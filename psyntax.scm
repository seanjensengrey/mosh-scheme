;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! jZ588@library-file-path->cache-path (unspecified)) (set! jZ58a@read-annotated (unspecified)) (set! jZ58c@annotation-stripped (unspecified)) (set! jZ58e@annotation? (unspecified)) (set! jZ590@annotation-source (unspecified)) (set! jZ592@annotation-expression (unspecified)) (set! jZ594@scm->fasl (unspecified)) (set! jZ596@fasl-save (unspecified)) (set! jZ598@fasl-load (unspecified)) (set! jZ59a@verbose? (unspecified)) (set! jZ59c@serialize-library (unspecified)) (set! jZ59e@load-serialized-library (unspecified)) (set! jZ5a0@make-record-printer (unspecified)) (set! jZ5a2@compile-core (unspecified)) (set! jZ5a4@read-library-source-file (unspecified)) (set! jZ5a6@make-parameter (unspecified)) (set! jZ5a8@mosh-cache-dir (unspecified)) (set! jZ63e@file-options-spec (unspecified)) (set! jZ588@library-file-path->cache-path (lambda (jZ63f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jZ645@jZ642 jZ646@jZ644) (let ((jZ649@extract jZ646@jZ644) (jZ64a@p jZ645@jZ642)) (let ((jZ64e@display-hex '#f)) (begin (set! jZ64e@display-hex (lambda (jZ657@n) (if (<= '0 jZ657@n '9) (display jZ657@n jZ64a@p) (display (integer->char (+ (char->integer '#\a) (- jZ657@n '10))) jZ64a@p)))) (begin (let jZ651@f ((jZ64f@ls (string-split jZ63f@x '#\/))) (if (not (null? jZ64f@ls)) (begin (display '"_" jZ64a@p) (for-each (lambda (jZ653@c) (if (or (char<=? '#\a jZ653@c '#\z) (char<=? '#\A jZ653@c '#\Z) (char<=? '#\0 jZ653@c '#\9) (memv jZ653@c '(#\- #\. #\_ #\~))) (display jZ653@c jZ64a@p) (begin (display '"%" jZ64a@p) (let ((jZ655@n (char->integer jZ653@c))) (begin (jZ64e@display-hex (quotient jZ655@n '16)) (jZ64e@display-hex (remainder jZ655@n '16))))))) (string->list (car jZ64f@ls))) (jZ651@f (cdr jZ64f@ls))) (void))) (jZ649@extract))))))))) (set! jZ6b9@jZ588@library-file-path->cache-path jZ588@library-file-path->cache-path) (set! jZ58a@read-annotated read) (set! jZ6ba@jZ58a@read-annotated jZ58a@read-annotated) (set! jZ58c@annotation-stripped (lambda (jZ659@x) (jZ592@annotation-expression jZ659@x))) (set! jZ6bb@jZ58c@annotation-stripped jZ58c@annotation-stripped) (set! jZ58e@annotation? (lambda (jZ65b@x) (source-info jZ65b@x))) (set! jZ6bc@jZ58e@annotation? jZ58e@annotation?) (set! jZ590@annotation-source (lambda (jZ65d@x) (source-info jZ65d@x))) (set! jZ6bd@jZ590@annotation-source jZ590@annotation-source) (set! jZ592@annotation-expression (lambda (jZ65f@x) (if (pair? jZ65f@x) (cons (car jZ65f@x) (cdr jZ65f@x)) (if (procedure? jZ65f@x) (set-source-info! jZ65f@x '#f) jZ65f@x)))) (set! jZ6be@jZ592@annotation-expression jZ592@annotation-expression) (set! jZ594@scm->fasl (lambda (jZ661@filename) (string-append (jZ5a8@mosh-cache-dir) '"/" (jZ588@library-file-path->cache-path jZ661@filename) '".mosh-fasl"))) (set! jZ6bf@jZ594@scm->fasl jZ594@scm->fasl) (set! jZ596@fasl-save (lambda (jZ663@filename jZ664@obj) (call-with-port (open-file-output-port jZ663@filename) (lambda (jZ667@port) ((symbol-value 'fasl-write!) jZ664@obj jZ667@port))))) (set! jZ6c0@jZ596@fasl-save jZ596@fasl-save) (set! jZ598@fasl-load (lambda (jZ669@filename) (call-with-port (open-file-input-port jZ669@filename) (symbol-value 'fasl-read!)))) (set! jZ6c1@jZ598@fasl-load jZ598@fasl-load) (set! jZ59a@verbose? (symbol-value '%verbose)) (set! jZ6c2@jZ59a@verbose? jZ59a@verbose?) (set! jZ59c@serialize-library (lambda (jZ66b@filename jZ66c@obj) (begin (if jZ59a@verbose? (format (current-error-port) '"serialize-library ~a\n..." jZ66b@filename) (void)) (let ((jZ66f@expanded2core (symbol-value 'expanded2core))) (let ((jZ671@compile (symbol-value 'compile-w/o-halt))) (let ((jZ673@code jZ66c@obj)) (let ((jZ675@pivot (cddddr (cddddr jZ673@code)))) (let ((jZ677@visit (jZ671@compile (jZ66f@expanded2core (car jZ675@pivot))))) (begin (set-car! jZ675@pivot jZ677@visit) (let ((jZ679@pivot (cdr jZ675@pivot))) (let ((jZ67b@invoke (jZ671@compile (jZ66f@expanded2core (car jZ679@pivot))))) (set-car! jZ679@pivot jZ67b@invoke))))))))) (let ((jZ67d@fasl-file (jZ594@scm->fasl jZ66b@filename))) (begin (if (file-exists? jZ67d@fasl-file) (delete-file jZ67d@fasl-file) (void)) ((call/cc (lambda (jZ681@jZ67f) (lambda () (with-exception-handler (lambda (jZ683@c) ((call/cc (lambda (jZ685@jZ680) (jZ681@jZ67f (lambda () (if '#t (begin (if jZ59a@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" jZ66b@filename) (void)) (if (file-exists? jZ67d@fasl-file) (delete-file jZ67d@fasl-file) (void)) '#f) (jZ685@jZ680 (lambda () (raise-continuable jZ683@c)))))))))) (lambda () (jZ596@fasl-save jZ67d@fasl-file jZ66c@obj)))))))))))) (set! jZ6c3@jZ59c@serialize-library jZ59c@serialize-library) (set! jZ59e@load-serialized-library (lambda (jZ687@filename jZ688@obj) (and (jZ5a8@mosh-cache-dir) (let ((jZ68b@fasl-file (jZ594@scm->fasl jZ687@filename))) (if (and (file-exists? jZ68b@fasl-file) ((symbol-value 'file-newer?) jZ68b@fasl-file jZ687@filename)) (let ((jZ68d@expanded2core (symbol-value 'expanded2core))) (let ((jZ68f@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((jZ691@code (jZ598@fasl-load jZ68b@fasl-file))) (let ((jZ693@pivot (cddddr (cddddr jZ691@code)))) (let ((jZ695@visit (car jZ693@pivot))) (let ((jZ697@visit-proc (lambda () (jZ68f@eval-compiled-core jZ695@visit)))) (begin (set-car! jZ693@pivot jZ697@visit-proc) (let ((jZ699@pivot (cdr jZ693@pivot))) (let ((jZ69b@invoke (car jZ699@pivot))) (begin (set-car! jZ699@pivot (lambda () (jZ68f@eval-compiled-core jZ69b@invoke))) (apply jZ688@obj jZ691@code))))))))))) '#f))))) (set! jZ6c4@jZ59e@load-serialized-library jZ59e@load-serialized-library) (set! jZ5a0@make-record-printer (lambda (jZ69d@name jZ69e@printer) (lambda jZ6a1@x (begin (display '"record printer") (for-each display jZ6a1@x))))) (set! jZ6c5@jZ5a0@make-record-printer jZ5a0@make-record-printer) (set! jZ5a2@compile-core (lambda jZ6a3@x (apply error 'comile-core '"not implementated" jZ6a3@x))) (set! jZ6c6@jZ5a2@compile-core jZ5a2@compile-core) (set! jZ5a4@read-library-source-file (lambda (jZ6a5@file-name) (with-input-from-file jZ6a5@file-name jZ58a@read-annotated))) (set! jZ6c7@jZ5a4@read-library-source-file jZ5a4@read-library-source-file) (set! jZ5a6@make-parameter (lambda jZ6b5 (let ((jZ6b6 (length jZ6b5))) (if (= jZ6b6 '1) (apply (lambda (jZ6a7@x) (jZ5a6@make-parameter jZ6a7@x (lambda (jZ6a9@x) jZ6a9@x))) jZ6b5) (if (= jZ6b6 '2) (apply (lambda (jZ6ab@x jZ6ac@fender) (let ((jZ6af@x (jZ6ac@fender jZ6ab@x))) (lambda jZ6b3 (let ((jZ6b4 (length jZ6b3))) (if (= jZ6b4 '0) (apply (lambda () jZ6af@x) jZ6b3) (if (= jZ6b4 '1) (apply (lambda (jZ6b1@v) (set! jZ6af@x (jZ6ac@fender jZ6b1@v))) jZ6b3) (error 'apply '"invalid arg count"))))))) jZ6b5) (error 'apply '"invalid arg count")))))) (set! jZ6c8@jZ5a6@make-parameter jZ5a6@make-parameter) (set! jZ5a8@mosh-cache-dir (jZ5a6@make-parameter '#f)) (set! jZ6c9@jZ5a8@mosh-cache-dir jZ5a8@mosh-cache-dir) (set! jZ63e@file-options-spec (lambda (jZ6b7@x) jZ6b7@x)) (set! jZ6ca@jZ63e@file-options-spec jZ63e@file-options-spec) (void))
(begin (set! jZ6d0@current-primitive-locations (unspecified)) (set! jZ6d2@mutable? (unspecified)) (set! jZ6d4@rewriter (unspecified)) (set! jZ6d6@expanded->core (unspecified)) (set! jZ6d8@compile-core-expr (unspecified)) (set! jZ6da@pretty-print (unspecified)) (set! jZ6dc@compile-core-expr-to-port (unspecified)) (set! jZ6d0@current-primitive-locations (jZ6c8@jZ5a6@make-parameter (lambda (jZ6dd@x) '#f) (lambda (jZ6df@p) jZ6df@p))) (set! jZ71b@jZ6d0@current-primitive-locations jZ6d0@current-primitive-locations) (set! jZ6d2@mutable? (lambda (jZ6e1@x) (or (pair? jZ6e1@x) (vector? jZ6e1@x) (hashtable? jZ6e1@x)))) (set! jZ71c@jZ6d2@mutable? jZ6d2@mutable?) (set! jZ6d4@rewriter (lambda (jZ6e3@quote-hack?) (let ((jZ6e6@f '#f)) (begin (set! jZ6e6@f (lambda (jZ6e7@x) (if (pair? jZ6e7@x) (let ((jZ6e9@t (car jZ6e7@x))) (if (memv jZ6e9@t '(quote)) (if (and jZ6e3@quote-hack? (jZ6d2@mutable? (cadr jZ6e7@x))) (let ((jZ6eb@g (gensym))) (begin (set-symbol-value! jZ6eb@g (cadr jZ6e7@x)) jZ6eb@g)) jZ6e7@x) (if (memv jZ6e9@t '(case-lambda)) (cons 'case-lambda (map (lambda (jZ6ed@x) (cons (car jZ6ed@x) (map jZ6e6@f (cdr jZ6ed@x)))) (cdr jZ6e7@x))) (if (memv jZ6e9@t '(lambda)) (cons* 'lambda (cadr jZ6e7@x) (map jZ6e6@f (cddr jZ6e7@x))) (if (memv jZ6e9@t '(letrec)) (let ((jZ6ef@bindings (cadr jZ6e7@x)) (jZ6f0@body* (cddr jZ6e7@x))) (let ((jZ6f3@lhs* (map car jZ6ef@bindings)) (jZ6f4@rhs* (map cadr jZ6ef@bindings))) (cons* 'letrec (map list jZ6f3@lhs* (map jZ6e6@f jZ6f4@rhs*)) (map jZ6e6@f jZ6f0@body*)))) (if (memv jZ6e9@t '(letrec*)) (let ((jZ6f7@bindings (cadr jZ6e7@x)) (jZ6f8@body* (cddr jZ6e7@x))) (let ((jZ6fb@lhs* (map car jZ6f7@bindings)) (jZ6fc@rhs* (map cadr jZ6f7@bindings))) (cons* 'letrec* (map list jZ6fb@lhs* (map jZ6e6@f jZ6fc@rhs*)) (map jZ6e6@f jZ6f8@body*)))) (if (memv jZ6e9@t '(library-letrec*)) (let ((jZ6ff@name (cadr jZ6e7@x)) (jZ700@x (cdr jZ6e7@x))) (let ((jZ703@bindings (cadr jZ700@x)) (jZ704@body* (cddr jZ700@x))) (let ((jZ707@lhs* (map car jZ703@bindings)) (jZ708@lhs** (map cadr jZ703@bindings)) (jZ709@rhs* (map caddr jZ703@bindings))) (cons* 'library-letrec* jZ6ff@name (map list jZ707@lhs* jZ708@lhs** (map jZ6e6@f jZ709@rhs*)) (map jZ6e6@f jZ704@body*))))) (if (memv jZ6e9@t '(begin)) (cons 'begin (map jZ6e6@f (cdr jZ6e7@x))) (if (memv jZ6e9@t '(set!)) (list 'set! (cadr jZ6e7@x) (jZ6e6@f (caddr jZ6e7@x))) (if (memv jZ6e9@t '(primitive)) (let ((jZ70d@op (cadr jZ6e7@x))) (let ((jZ70f@t ((jZ6d0@current-primitive-locations) jZ70d@op))) (if jZ70f@t ((lambda (jZ711@loc) jZ711@loc) jZ70f@t) jZ70d@op))) (if (memv jZ6e9@t '(define)) jZ6e7@x (if (list? jZ6e7@x) (map jZ6e6@f jZ6e7@x) (error 'rewrite '"invalid form ~s ~s" jZ6e7@x (list? jZ6e7@x)))))))))))))) jZ6e7@x))) jZ6e6@f)))) (set! jZ71d@jZ6d4@rewriter jZ6d4@rewriter) (set! jZ6d6@expanded->core (lambda (jZ713@x) ((jZ6d4@rewriter '#f) jZ713@x))) (set! jZ71e@jZ6d6@expanded->core jZ6d6@expanded->core) (set! jZ6d8@compile-core-expr (lambda (jZ715@x) ((jZ6d4@rewriter '#f) jZ715@x))) (set! jZ71f@jZ6d8@compile-core-expr jZ6d8@compile-core-expr) (set! jZ6da@pretty-print write) (set! jZ720@jZ6da@pretty-print jZ6da@pretty-print) (set! jZ6dc@compile-core-expr-to-port (lambda (jZ717@x jZ718@p) (jZ6da@pretty-print ((jZ6d4@rewriter '#f) jZ717@x) jZ718@p))) (set! jZ721@jZ6dc@compile-core-expr-to-port jZ6dc@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! jZ770@make-collection (unspecified)) (set! jZ772@current-library-collection (unspecified)) (set! jZ774@rp (unspecified)) (set! jZ77e@library? (unspecified)) (set! jZ780@library-id (unspecified)) (set! jZ782@set-library-id! (unspecified)) (set! jZ784@library-name (unspecified)) (set! jZ786@set-library-name! (unspecified)) (set! jZ788@library-version (unspecified)) (set! jZ78a@set-library-version! (unspecified)) (set! jZ78c@library-imp* (unspecified)) (set! jZ78e@set-library-imp*! (unspecified)) (set! jZ790@library-vis* (unspecified)) (set! jZ792@set-library-vis*! (unspecified)) (set! jZ794@library-inv* (unspecified)) (set! jZ796@set-library-inv*! (unspecified)) (set! jZ798@library-subst (unspecified)) (set! jZ79a@set-library-subst! (unspecified)) (set! jZ79c@library-env (unspecified)) (set! jZ79e@set-library-env! (unspecified)) (set! jZ7a0@library-visit-state (unspecified)) (set! jZ7a2@set-library-visit-state! (unspecified)) (set! jZ7a4@library-invoke-state (unspecified)) (set! jZ7a6@set-library-invoke-state! (unspecified)) (set! jZ7a8@library-visit-code (unspecified)) (set! jZ7aa@set-library-visit-code! (unspecified)) (set! jZ7ac@library-invoke-code (unspecified)) (set! jZ7ae@set-library-invoke-code! (unspecified)) (set! jZ7b0@library-visible? (unspecified)) (set! jZ7b2@set-library-visible?! (unspecified)) (set! jZ7b4@library-source-file-name (unspecified)) (set! jZ7b6@set-library-source-file-name! (unspecified)) (set! jZ7b8@dummy (unspecified)) (set! jZ7ba@find-dependencies (unspecified)) (set! jZ7bc@find-library-by (unspecified)) (set! jZ7be@library-path (unspecified)) (set! jZ7c0@library-extensions (unspecified)) (set! jZ7c2@library-name->file-name (unspecified)) (set! jZ7c4@file-locator (unspecified)) (set! jZ7c6@serialize-all (unspecified)) (set! jZ7c8@current-precompiled-library-loader (unspecified)) (set! jZ7ca@try-load-from-file (unspecified)) (set! jZ7cc@library-loader (unspecified)) (set! jZ7ce@current-library-expander (unspecified)) (set! jZ7d0@external-pending-libraries (unspecified)) (set! jZ7d2@find-external-library (unspecified)) (set! jZ7d4@find-library-by-name (unspecified)) (set! jZ7d6@library-exists? (unspecified)) (set! jZ7d8@find-library-by-spec/die (unspecified)) (set! jZ7da@label->binding-table (unspecified)) (set! jZ7dc@install-library-record (unspecified)) (set! jZ7de@install-library (unspecified)) (set! jZ7e0@imported-label->binding (unspecified)) (set! jZ7e2@invoke-library (unspecified)) (set! jZ7e4@visit-library (unspecified)) (set! jZ7e6@invoke-library-by-spec (unspecified)) (set! jZ7e8@invoke-library-by-name (unspecified)) (set! jZ7ea@installed-libraries (unspecified)) (set! jZ7ec@library-spec (unspecified)) (set! jZ770@make-collection (lambda () (let ((jZ7ed@set '())) (let ((jZ7f0@set-cons '#f)) (begin (set! jZ7f0@set-cons (lambda (jZ7f5@x jZ7f6@ls) (if (memq jZ7f5@x jZ7f6@ls) jZ7f6@ls (cons jZ7f5@x jZ7f6@ls)))) (lambda jZ7f3 (let ((jZ7f4 (length jZ7f3))) (if (= jZ7f4 '0) (apply (lambda () jZ7ed@set) jZ7f3) (if (= jZ7f4 '1) (apply (lambda (jZ7f1@x) (set! jZ7ed@set (jZ7f0@set-cons jZ7f1@x jZ7ed@set))) jZ7f3) (error 'apply '"invalid arg count")))))))))) (set! jZ963@jZ770@make-collection jZ770@make-collection) (set! jZ772@current-library-collection (jZ6c8@jZ5a6@make-parameter (jZ770@make-collection) (lambda (jZ7f9@x) (begin (if (not (procedure? jZ7f9@x)) (assertion-violation 'current-library-collection '"not a procedure" jZ7f9@x) (void)) jZ7f9@x)))) (set! jZ964@jZ772@current-library-collection jZ772@current-library-collection) (set! jZ774@rp (jZ6c5@jZ5a0@make-record-printer 'library (lambda (jZ7fb@x jZ7fc@p jZ7fd@wr) (begin (if (not (jZ77e@library? jZ7fb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (jZ788@library-version jZ7fb@x)) (jZ784@library-name jZ7fb@x) (append (jZ784@library-name jZ7fb@x) (list (jZ788@library-version jZ7fb@x))))) jZ7fc@p))))) (set! jZ965@jZ774@rp jZ774@rp) (set! jZ77e@library? (lambda (jZ801@x) (and (simple-struct? jZ801@x) (eq? (simple-struct-name jZ801@x) 'library)))) (set! jZ966@jZ77e@library? jZ77e@library?) (set! jZ780@library-id (lambda (jZ803@x) (simple-struct-ref jZ803@x '0))) (set! jZ967@jZ780@library-id jZ780@library-id) (set! jZ782@set-library-id! (lambda (jZ805@x jZ806@val) (simple-struct-set! jZ805@x '0 jZ806@val))) (set! jZ968@jZ782@set-library-id! jZ782@set-library-id!) (set! jZ784@library-name (lambda (jZ809@x) (simple-struct-ref jZ809@x '1))) (set! jZ969@jZ784@library-name jZ784@library-name) (set! jZ786@set-library-name! (lambda (jZ80b@x jZ80c@val) (simple-struct-set! jZ80b@x '1 jZ80c@val))) (set! jZ96a@jZ786@set-library-name! jZ786@set-library-name!) (set! jZ788@library-version (lambda (jZ80f@x) (simple-struct-ref jZ80f@x '2))) (set! jZ96b@jZ788@library-version jZ788@library-version) (set! jZ78a@set-library-version! (lambda (jZ811@x jZ812@val) (simple-struct-set! jZ811@x '2 jZ812@val))) (set! jZ96c@jZ78a@set-library-version! jZ78a@set-library-version!) (set! jZ78c@library-imp* (lambda (jZ815@x) (simple-struct-ref jZ815@x '3))) (set! jZ96d@jZ78c@library-imp* jZ78c@library-imp*) (set! jZ78e@set-library-imp*! (lambda (jZ817@x jZ818@val) (simple-struct-set! jZ817@x '3 jZ818@val))) (set! jZ96e@jZ78e@set-library-imp*! jZ78e@set-library-imp*!) (set! jZ790@library-vis* (lambda (jZ81b@x) (simple-struct-ref jZ81b@x '4))) (set! jZ96f@jZ790@library-vis* jZ790@library-vis*) (set! jZ792@set-library-vis*! (lambda (jZ81d@x jZ81e@val) (simple-struct-set! jZ81d@x '4 jZ81e@val))) (set! jZ970@jZ792@set-library-vis*! jZ792@set-library-vis*!) (set! jZ794@library-inv* (lambda (jZ821@x) (simple-struct-ref jZ821@x '5))) (set! jZ971@jZ794@library-inv* jZ794@library-inv*) (set! jZ796@set-library-inv*! (lambda (jZ823@x jZ824@val) (simple-struct-set! jZ823@x '5 jZ824@val))) (set! jZ972@jZ796@set-library-inv*! jZ796@set-library-inv*!) (set! jZ798@library-subst (lambda (jZ827@x) (simple-struct-ref jZ827@x '6))) (set! jZ973@jZ798@library-subst jZ798@library-subst) (set! jZ79a@set-library-subst! (lambda (jZ829@x jZ82a@val) (simple-struct-set! jZ829@x '6 jZ82a@val))) (set! jZ974@jZ79a@set-library-subst! jZ79a@set-library-subst!) (set! jZ79c@library-env (lambda (jZ82d@x) (simple-struct-ref jZ82d@x '7))) (set! jZ975@jZ79c@library-env jZ79c@library-env) (set! jZ79e@set-library-env! (lambda (jZ82f@x jZ830@val) (simple-struct-set! jZ82f@x '7 jZ830@val))) (set! jZ976@jZ79e@set-library-env! jZ79e@set-library-env!) (set! jZ7a0@library-visit-state (lambda (jZ833@x) (simple-struct-ref jZ833@x '8))) (set! jZ977@jZ7a0@library-visit-state jZ7a0@library-visit-state) (set! jZ7a2@set-library-visit-state! (lambda (jZ835@x jZ836@val) (simple-struct-set! jZ835@x '8 jZ836@val))) (set! jZ978@jZ7a2@set-library-visit-state! jZ7a2@set-library-visit-state!) (set! jZ7a4@library-invoke-state (lambda (jZ839@x) (simple-struct-ref jZ839@x '9))) (set! jZ979@jZ7a4@library-invoke-state jZ7a4@library-invoke-state) (set! jZ7a6@set-library-invoke-state! (lambda (jZ83b@x jZ83c@val) (simple-struct-set! jZ83b@x '9 jZ83c@val))) (set! jZ97a@jZ7a6@set-library-invoke-state! jZ7a6@set-library-invoke-state!) (set! jZ7a8@library-visit-code (lambda (jZ83f@x) (simple-struct-ref jZ83f@x '10))) (set! jZ97b@jZ7a8@library-visit-code jZ7a8@library-visit-code) (set! jZ7aa@set-library-visit-code! (lambda (jZ841@x jZ842@val) (simple-struct-set! jZ841@x '10 jZ842@val))) (set! jZ97c@jZ7aa@set-library-visit-code! jZ7aa@set-library-visit-code!) (set! jZ7ac@library-invoke-code (lambda (jZ845@x) (simple-struct-ref jZ845@x '11))) (set! jZ97d@jZ7ac@library-invoke-code jZ7ac@library-invoke-code) (set! jZ7ae@set-library-invoke-code! (lambda (jZ847@x jZ848@val) (simple-struct-set! jZ847@x '11 jZ848@val))) (set! jZ97e@jZ7ae@set-library-invoke-code! jZ7ae@set-library-invoke-code!) (set! jZ7b0@library-visible? (lambda (jZ84b@x) (simple-struct-ref jZ84b@x '12))) (set! jZ97f@jZ7b0@library-visible? jZ7b0@library-visible?) (set! jZ7b2@set-library-visible?! (lambda (jZ84d@x jZ84e@val) (simple-struct-set! jZ84d@x '12 jZ84e@val))) (set! jZ980@jZ7b2@set-library-visible?! jZ7b2@set-library-visible?!) (set! jZ7b4@library-source-file-name (lambda (jZ851@x) (simple-struct-ref jZ851@x '13))) (set! jZ981@jZ7b4@library-source-file-name jZ7b4@library-source-file-name) (set! jZ7b6@set-library-source-file-name! (lambda (jZ853@x jZ854@val) (simple-struct-set! jZ853@x '13 jZ854@val))) (set! jZ982@jZ7b6@set-library-source-file-name! jZ7b6@set-library-source-file-name!) (set! jZ7b8@dummy '3) (set! jZ983@jZ7b8@dummy jZ7b8@dummy) (set! jZ7ba@find-dependencies (lambda (jZ857@ls) (if (null? jZ857@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! jZ984@jZ7ba@find-dependencies jZ7ba@find-dependencies) (set! jZ7bc@find-library-by (lambda (jZ859@pred) (let jZ85d@f ((jZ85b@ls ((jZ772@current-library-collection)))) (if (null? jZ85b@ls) '#f (if (jZ859@pred (car jZ85b@ls)) (car jZ85b@ls) (jZ85d@f (cdr jZ85b@ls))))))) (set! jZ985@jZ7bc@find-library-by jZ7bc@find-library-by) (set! jZ7be@library-path (jZ6c8@jZ5a6@make-parameter '(".") (lambda (jZ85f@x) (if (and (list? jZ85f@x) (for-all string? jZ85f@x)) (map (lambda (jZ861@x) jZ861@x) jZ85f@x) (assertion-violation 'library-path '"not a list of strings" jZ85f@x))))) (set! jZ986@jZ7be@library-path jZ7be@library-path) (set! jZ7c0@library-extensions (jZ6c8@jZ5a6@make-parameter '(".sls" ".ss" ".scm") (lambda (jZ863@x) (if (and (list? jZ863@x) (for-all string? jZ863@x)) (map (lambda (jZ865@x) jZ865@x) jZ863@x) (assertion-violation 'library-extensions '"not a list of strings" jZ863@x))))) (set! jZ987@jZ7c0@library-extensions jZ7c0@library-extensions) (set! jZ7c2@library-name->file-name (lambda (jZ867@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jZ86d@jZ86a jZ86e@jZ86c) (let ((jZ871@extract jZ86e@jZ86c) (jZ872@p jZ86d@jZ86a)) (let ((jZ876@display-hex '#f)) (begin (set! jZ876@display-hex (lambda (jZ87f@n) (if (<= '0 jZ87f@n '9) (display jZ87f@n jZ872@p) (display (integer->char (+ (char->integer '#\a) (- jZ87f@n '10))) jZ872@p)))) (begin (let jZ879@f ((jZ877@ls jZ867@x)) (if (not (null? jZ877@ls)) (begin (display '"/" jZ872@p) (for-each (lambda (jZ87b@c) (if (or (char<=? '#\a jZ87b@c '#\z) (char<=? '#\A jZ87b@c '#\Z) (char<=? '#\0 jZ87b@c '#\9) (memv jZ87b@c '(#\- #\. #\_ #\~))) (display jZ87b@c jZ872@p) (begin (display '"%" jZ872@p) (let ((jZ87d@n (char->integer jZ87b@c))) (begin (jZ876@display-hex (quotient jZ87d@n '16)) (jZ876@display-hex (remainder jZ87d@n '16))))))) (string->list (symbol->string (car jZ877@ls)))) (jZ879@f (cdr jZ877@ls))) (void))) (jZ871@extract))))))))) (set! jZ988@jZ7c2@library-name->file-name jZ7c2@library-name->file-name) (set! jZ7c4@file-locator (jZ6c8@jZ5a6@make-parameter (lambda (jZ881@x) (let ((jZ883@str (jZ7c2@library-name->file-name jZ881@x))) (let jZ88b@f ((jZ885@ls (jZ7be@library-path)) (jZ886@exts (jZ7c0@library-extensions)) (jZ887@failed-list '())) (if (null? jZ885@ls) (let ((jZ895@jZ890 '#f) (jZ897@jZ892 '#f) (jZ899@jZ891 '#f) (jZ89c@jZ88f '#f) (jZ89e@make-library-resolution-condition '#f) (jZ8a0@jZ88d '#f) (jZ8a2@jZ88e '#f) (jZ8a4@library-resolution-condition? '#f) (jZ8a6@condition-library '#f) (jZ8a8@condition-files '#f)) (begin (set! jZ895@jZ890 (make-record-type-descriptor '&library-resolution jZ2b9f@jZ28e6@&condition-rtd 'jZ893 '#f '#f '#((immutable library) (immutable files)))) (set! jZ897@jZ892 '#f) (set! jZ899@jZ891 (make-record-constructor-descriptor jZ895@jZ890 jZ2ba0@jZ28e8@&condition-rcd jZ897@jZ892)) (set! jZ89c@jZ88f (record-predicate jZ895@jZ890)) (set! jZ89e@make-library-resolution-condition (record-constructor jZ899@jZ891)) (set! jZ8a0@jZ88d (record-accessor jZ895@jZ890 '0)) (set! jZ8a2@jZ88e (record-accessor jZ895@jZ890 '1)) (set! jZ8a4@library-resolution-condition? (condition-predicate jZ895@jZ890)) (set! jZ8a6@condition-library (condition-accessor jZ895@jZ890 jZ8a0@jZ88d)) (set! jZ8a8@condition-files (condition-accessor jZ895@jZ890 jZ8a2@jZ88e)) (raise (condition (jZ2bbf@jZ2980@make-error) (jZ2be1@jZ29dc@make-who-condition 'expander) (jZ2ba5@jZ293d@make-message-condition '"cannot locate library in library-path") (jZ89e@make-library-resolution-condition jZ881@x (reverse jZ887@failed-list)))))) (if (null? jZ886@exts) (jZ88b@f (cdr jZ885@ls) (jZ7c0@library-extensions) jZ887@failed-list) (let ((jZ8a9@name (string-append (car jZ885@ls) jZ883@str (car jZ886@exts)))) (if (file-exists? jZ8a9@name) jZ8a9@name (jZ88b@f jZ885@ls (cdr jZ886@exts) (cons jZ8a9@name jZ887@failed-list))))))))) (lambda (jZ8ab@f) (if (procedure? jZ8ab@f) jZ8ab@f (assertion-violation 'file-locator '"not a procedure" jZ8ab@f))))) (set! jZ989@jZ7c4@file-locator jZ7c4@file-locator) (set! jZ7c6@serialize-all (lambda (jZ8ad@serialize jZ8ae@compile) (let ((jZ8b2@library-desc '#f)) (begin (set! jZ8b2@library-desc (lambda (jZ8b5@x) (list (jZ780@library-id jZ8b5@x) (jZ784@library-name jZ8b5@x)))) (for-each (lambda (jZ8b3@x) (if (jZ7b4@library-source-file-name jZ8b3@x) (jZ8ad@serialize (jZ7b4@library-source-file-name jZ8b3@x) (list (jZ780@library-id jZ8b3@x) (jZ784@library-name jZ8b3@x) (jZ788@library-version jZ8b3@x) (map jZ8b2@library-desc (jZ78c@library-imp* jZ8b3@x)) (map jZ8b2@library-desc (jZ790@library-vis* jZ8b3@x)) (map jZ8b2@library-desc (jZ794@library-inv* jZ8b3@x)) (jZ798@library-subst jZ8b3@x) (jZ79c@library-env jZ8b3@x) (jZ8ae@compile (jZ7a8@library-visit-code jZ8b3@x)) (jZ8ae@compile (jZ7ac@library-invoke-code jZ8b3@x)) (jZ7b0@library-visible? jZ8b3@x))) (void))) ((jZ772@current-library-collection))))))) (set! jZ98a@jZ7c6@serialize-all jZ7c6@serialize-all) (set! jZ7c8@current-precompiled-library-loader (jZ6c8@jZ5a6@make-parameter (lambda (jZ8b7@filename jZ8b8@sk) '#f))) (set! jZ98b@jZ7c8@current-precompiled-library-loader jZ7c8@current-precompiled-library-loader) (set! jZ7ca@try-load-from-file (lambda (jZ8bb@filename) ((jZ7c8@current-precompiled-library-loader) jZ8bb@filename (lambda jZ8e1 (let ((jZ8e2 (length jZ8e1))) (if (= jZ8e2 '11) (apply (lambda (jZ8bd@id jZ8be@name jZ8bf@ver jZ8c0@imp* jZ8c1@vis* jZ8c2@inv* jZ8c3@exp-subst jZ8c4@exp-env jZ8c5@visit-proc jZ8c6@invoke-proc jZ8c7@visible?) (let jZ8d5@f ((jZ8d3@deps (append jZ8c0@imp* jZ8c1@vis* jZ8c2@inv*))) (if (null? jZ8d3@deps) (begin (jZ7de@install-library jZ8bd@id jZ8be@name jZ8bf@ver jZ8c0@imp* jZ8c1@vis* jZ8c2@inv* jZ8c3@exp-subst jZ8c4@exp-env jZ8c5@visit-proc jZ8c6@invoke-proc '#f '#f jZ8c7@visible? '#f) '#t) (let ((jZ8d7@d (car jZ8d3@deps))) (let ((jZ8d9@label (car jZ8d7@d)) (jZ8da@dname (cadr jZ8d7@d))) (let ((jZ8dd@l (jZ7d4@find-library-by-name jZ8da@dname))) (if (and (jZ77e@library? jZ8dd@l) (eq? jZ8d9@label (jZ780@library-id jZ8dd@l))) (jZ8d5@f (cdr jZ8d3@deps)) (begin (if jZ6c2@jZ59a@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" jZ8be@name jZ8da@dname jZ8bb@filename jZ8dd@l jZ8d9@label (jZ780@library-id jZ8dd@l)) (void)) '#f)))))))) jZ8e1) (if (>= jZ8e2 '0) (apply (lambda jZ8df@others '#f) jZ8e1) (error 'apply '"invalid arg count")))))))) (set! jZ98c@jZ7ca@try-load-from-file jZ7ca@try-load-from-file) (set! jZ7cc@library-loader (jZ6c8@jZ5a6@make-parameter (lambda (jZ8e3@x) (let ((jZ8e5@file-name ((jZ7c4@file-locator) jZ8e3@x))) (if (not jZ8e5@file-name) (assertion-violation '#f '"cannot file library" jZ8e3@x) (or (jZ7ca@try-load-from-file jZ8e5@file-name) ((jZ7ce@current-library-expander) (jZ6c7@jZ5a4@read-library-source-file jZ8e5@file-name) jZ8e5@file-name (lambda (jZ8e7@name) (if (not (fast-equal? jZ8e7@name jZ8e3@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (jZ8ed@jZ8ea jZ8ee@jZ8ec) (let ((jZ8f1@e jZ8ee@jZ8ec) (jZ8f2@p jZ8ed@jZ8ea)) (begin (display '"expected to find library " jZ8f2@p) (write jZ8e3@x jZ8f2@p) (display '" in file " jZ8f2@p) (display jZ8e5@file-name jZ8f2@p) (display '", found " jZ8f2@p) (write jZ8e7@name jZ8f2@p) (display '" instead" jZ8f2@p) (jZ8f1@e)))))) (void)))))))) (lambda (jZ8f5@f) (if (procedure? jZ8f5@f) jZ8f5@f (assertion-violation 'library-locator '"not a procedure" jZ8f5@f))))) (set! jZ98d@jZ7cc@library-loader jZ7cc@library-loader) (set! jZ7ce@current-library-expander (jZ6c8@jZ5a6@make-parameter (lambda (jZ8f7@x) (assertion-violation 'library-expander '"not initialized")) (lambda (jZ8f9@f) (if (procedure? jZ8f9@f) jZ8f9@f (assertion-violation 'library-expander '"not a procedure" jZ8f9@f))))) (set! jZ98e@jZ7ce@current-library-expander jZ7ce@current-library-expander) (set! jZ7d0@external-pending-libraries (jZ6c8@jZ5a6@make-parameter '())) (set! jZ98f@jZ7d0@external-pending-libraries jZ7d0@external-pending-libraries) (set! jZ7d2@find-external-library (lambda (jZ8fb@name) (begin (if (member jZ8fb@name (jZ7d0@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" jZ8fb@name) (void)) (let ((jZ901@jZ8fe jZ7d0@external-pending-libraries) (jZ902@jZ900 (cons jZ8fb@name (jZ7d0@external-pending-libraries)))) (let ((jZ905@swap (lambda () (let ((jZ907@t (jZ901@jZ8fe))) (begin (jZ901@jZ8fe jZ902@jZ900) (set! jZ902@jZ900 jZ907@t)))))) (dynamic-wind jZ905@swap (lambda () (begin ((jZ7cc@library-loader) jZ8fb@name) (or (jZ7bc@find-library-by (lambda (jZ909@x) (fast-equal? (jZ784@library-name jZ909@x) jZ8fb@name))) (assertion-violation '#f '"handling external library did not yield the correct library" jZ8fb@name)))) jZ905@swap)))))) (set! jZ990@jZ7d2@find-external-library jZ7d2@find-external-library) (set! jZ7d4@find-library-by-name (lambda (jZ90b@name) (or (jZ7bc@find-library-by (lambda (jZ90d@x) (fast-equal? (jZ784@library-name jZ90d@x) jZ90b@name))) (jZ7d2@find-external-library jZ90b@name)))) (set! jZ991@jZ7d4@find-library-by-name jZ7d4@find-library-by-name) (set! jZ7d6@library-exists? (lambda (jZ90f@name) (and (jZ7bc@find-library-by (lambda (jZ911@x) (fast-equal? (jZ784@library-name jZ911@x) jZ90f@name))) '#t))) (set! jZ992@jZ7d6@library-exists? jZ7d6@library-exists?) (set! jZ7d8@find-library-by-spec/die (lambda (jZ913@spec) (let ((jZ915@id (car jZ913@spec))) (or (jZ7bc@find-library-by (lambda (jZ917@x) (eq? jZ915@id (jZ780@library-id jZ917@x)))) (assertion-violation '#f '"cannot find library with required spec" jZ913@spec))))) (set! jZ993@jZ7d8@find-library-by-spec/die jZ7d8@find-library-by-spec/die) (set! jZ7da@label->binding-table (make-eq-hashtable)) (set! jZ994@jZ7da@label->binding-table jZ7da@label->binding-table) (set! jZ7dc@install-library-record (lambda (jZ919@lib) (begin (let ((jZ91b@exp-env (jZ79c@library-env jZ919@lib))) (for-each (lambda (jZ91d@x) (let ((jZ91f@label (car jZ91d@x)) (jZ920@binding (cdr jZ91d@x))) (let ((jZ923@binding (let ((jZ925@t (car jZ920@binding))) (if (memv jZ925@t '(global)) (cons 'global (cons jZ919@lib (cdr jZ920@binding))) (if (memv jZ925@t '(global-macro)) (cons 'global-macro (cons jZ919@lib (cdr jZ920@binding))) (if (memv jZ925@t '(global-macro!)) (cons 'global-macro! (cons jZ919@lib (cdr jZ920@binding))) jZ920@binding)))))) (begin (if (hashtable-ref jZ7da@label->binding-table jZ91f@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" jZ91f@label (hashtable-ref jZ7da@label->binding-table jZ91f@label '#f) jZ923@binding) (exit)) (void)) (hashtable-set! jZ7da@label->binding-table jZ91f@label jZ923@binding))))) jZ91b@exp-env)) ((jZ772@current-library-collection) jZ919@lib)))) (set! jZ995@jZ7dc@install-library-record jZ7dc@install-library-record) (set! jZ7de@install-library (lambda (jZ927@id jZ928@name jZ929@ver jZ92a@imp* jZ92b@vis* jZ92c@inv* jZ92d@exp-subst jZ92e@exp-env jZ92f@visit-proc jZ930@invoke-proc jZ931@visit-code jZ932@invoke-code jZ933@visible? jZ934@source-file-name) (let ((jZ943@imp-lib* (map jZ7d8@find-library-by-spec/die jZ92a@imp*)) (jZ944@vis-lib* (map jZ7d8@find-library-by-spec/die jZ92b@vis*)) (jZ945@inv-lib* (map jZ7d8@find-library-by-spec/die jZ92c@inv*))) (begin (if (not (and (symbol? jZ927@id) (list? jZ928@name) (list? jZ929@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" jZ927@id jZ928@name jZ929@ver) (void)) (if (jZ7d6@library-exists? jZ928@name) (assertion-violation 'install-library '"library is already installed" jZ928@name) (void)) (let ((jZ949@lib (make-simple-struct 'library '15 (list jZ927@id jZ928@name jZ929@ver jZ943@imp-lib* jZ944@vis-lib* jZ945@inv-lib* jZ92d@exp-subst jZ92e@exp-env jZ92f@visit-proc jZ930@invoke-proc jZ931@visit-code jZ932@invoke-code jZ933@visible? jZ934@source-file-name)))) (jZ7dc@install-library-record jZ949@lib)))))) (set! jZ996@jZ7de@install-library jZ7de@install-library) (set! jZ7e0@imported-label->binding (lambda (jZ94b@lab) (hashtable-ref jZ7da@label->binding-table jZ94b@lab '#f))) (set! jZ997@jZ7e0@imported-label->binding jZ7e0@imported-label->binding) (set! jZ7e2@invoke-library (lambda (jZ94d@lib) (let ((jZ94f@invoke (jZ7a4@library-invoke-state jZ94d@lib))) (if (procedure? jZ94f@invoke) (begin (jZ7a6@set-library-invoke-state! jZ94d@lib (lambda () (assertion-violation 'invoke '"circularity detected" jZ94d@lib))) (for-each jZ7e2@invoke-library (jZ794@library-inv* jZ94d@lib)) (jZ7a6@set-library-invoke-state! jZ94d@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" jZ94d@lib))) (jZ94f@invoke) (jZ7a6@set-library-invoke-state! jZ94d@lib '#t)) (void))))) (set! jZ998@jZ7e2@invoke-library jZ7e2@invoke-library) (set! jZ7e4@visit-library (lambda (jZ951@lib) (let ((jZ953@visit (jZ7a0@library-visit-state jZ951@lib))) (if (procedure? jZ953@visit) (begin (jZ7a2@set-library-visit-state! jZ951@lib (lambda () (assertion-violation 'visit '"circularity detected" jZ951@lib))) (for-each jZ7e2@invoke-library (jZ790@library-vis* jZ951@lib)) (jZ7a2@set-library-visit-state! jZ951@lib (lambda () (assertion-violation 'invoke '"first visit did not return" jZ951@lib))) (jZ953@visit) (jZ7a2@set-library-visit-state! jZ951@lib '#t)) (void))))) (set! jZ999@jZ7e4@visit-library jZ7e4@visit-library) (set! jZ7e6@invoke-library-by-spec (lambda (jZ955@spec) (jZ7e2@invoke-library (jZ7d8@find-library-by-spec/die jZ955@spec)))) (set! jZ99a@jZ7e6@invoke-library-by-spec jZ7e6@invoke-library-by-spec) (set! jZ7e8@invoke-library-by-name (lambda (jZ957@name) (jZ7e2@invoke-library (jZ7d4@find-library-by-name jZ957@name)))) (set! jZ99b@jZ7e8@invoke-library-by-name jZ7e8@invoke-library-by-name) (set! jZ7ea@installed-libraries (lambda jZ95f (let ((jZ960 (length jZ95f))) (if (= jZ960 '1) (apply (lambda (jZ959@all?) (let jZ95d@f ((jZ95b@ls ((jZ772@current-library-collection)))) (if (null? jZ95b@ls) '() (if (or jZ959@all? (jZ7b0@library-visible? (car jZ95b@ls))) (cons (car jZ95b@ls) (jZ95d@f (cdr jZ95b@ls))) (jZ95d@f (cdr jZ95b@ls)))))) jZ95f) (if (= jZ960 '0) (apply (lambda () (jZ7ea@installed-libraries '#f)) jZ95f) (error 'apply '"invalid arg count")))))) (set! jZ99c@jZ7ea@installed-libraries jZ7ea@installed-libraries) (set! jZ7ec@library-spec (lambda (jZ961@x) (begin (if (not (jZ77e@library? jZ961@x)) (assertion-violation 'library-spec '"not a library" jZ961@x) (void)) (list (jZ780@library-id jZ961@x) (jZ784@library-name jZ961@x) (jZ788@library-version jZ961@x))))) (set! jZ99d@jZ7ec@library-spec jZ7ec@library-spec) (void))
(begin (set! jZ9a1@build-global-define (unspecified)) (set! jZa12@build-lambda (unspecified)) (set! jZa14@build-case-lambda (unspecified)) (set! jZa42@build-sequence (unspecified)) (set! jZa44@build-void (unspecified)) (set! jZa46@build-letrec (unspecified)) (set! jZa48@build-let (unspecified)) (set! jZa4a@build-named-let (unspecified)) (set! jZa4c@build-letrec* (unspecified)) (set! jZa4e@build-library-letrec* (unspecified)) (set! jZa50@build-receive (unspecified)) (set! jZ9a1@build-global-define (lambda (jZa51@x) (jZa44@build-void))) (set! jZae5@jZ9a1@build-global-define jZ9a1@build-global-define) (set! jZa12@build-lambda (lambda (jZa53@ae jZa54@vars jZa55@exp) (list 'lambda jZa54@vars jZa55@exp))) (set! jZae6@jZa12@build-lambda jZa12@build-lambda) (set! jZa14@build-case-lambda (lambda (jZa59@ae jZa5a@vars* jZa5b@exp*) (let ((jZa60@build-error '#f) (jZa62@build-pred '#f) (jZa64@build-apply '#f) (jZa66@expand-case-lambda '#f)) (begin (set! jZa60@build-error (lambda (jZa97@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! jZa62@build-pred (lambda (jZa7f@ae jZa80@n jZa81@vars) (call-with-values (lambda () (let jZa8d@f ((jZa89@vars jZa81@vars) (jZa8a@count '0)) (if (pair? jZa89@vars) (jZa8d@f (cdr jZa89@vars) (+ jZa8a@count '1)) (if (null? jZa89@vars) (values jZa8a@count '=) (values jZa8a@count '>=))))) (lambda (jZa8f@jZa86 jZa90@jZa88) (let ((jZa93@pred jZa90@jZa88) (jZa94@count jZa8f@jZa86)) (list (list 'primitive jZa93@pred) jZa80@n (list 'quote jZa94@count))))))) (set! jZa64@build-apply (lambda (jZa77@ae jZa78@g jZa79@vars jZa7a@exp) (list '(primitive apply) (jZa12@build-lambda jZa77@ae jZa79@vars jZa7a@exp) jZa78@g))) (set! jZa66@expand-case-lambda (lambda (jZa67@ae jZa68@vars jZa69@exp*) (let ((jZa6d@g (gensym)) (jZa6e@n (gensym))) (list 'lambda jZa6d@g (jZa48@build-let jZa67@ae (list jZa6e@n) (list (list '(primitive length) jZa6d@g)) (let jZa75@f ((jZa71@vars* jZa5a@vars*) (jZa72@exp* jZa69@exp*)) (if (null? jZa71@vars*) (jZa60@build-error jZa67@ae) (list 'if (jZa62@build-pred jZa67@ae jZa6e@n (car jZa71@vars*)) (jZa64@build-apply jZa67@ae jZa6d@g (car jZa71@vars*) (car jZa72@exp*)) (jZa75@f (cdr jZa71@vars*) (cdr jZa72@exp*)))))))))) (if (= (length jZa5b@exp*) '1) (jZa12@build-lambda jZa59@ae (car jZa5a@vars*) (car jZa5b@exp*)) (jZa66@expand-case-lambda jZa59@ae jZa5a@vars* jZa5b@exp*)))))) (set! jZae7@jZa14@build-case-lambda jZa14@build-case-lambda) (set! jZa42@build-sequence (lambda (jZa99@ae jZa9a@exps) (let jZa9f@loop ((jZa9d@exps jZa9a@exps)) (if (null? (cdr jZa9d@exps)) (car jZa9d@exps) (if (equal? (car jZa9d@exps) (jZa44@build-void)) (jZa9f@loop (cdr jZa9d@exps)) (cons 'begin jZa9d@exps)))))) (set! jZae8@jZa42@build-sequence jZa42@build-sequence) (set! jZa44@build-void (lambda () '((primitive void)))) (set! jZae9@jZa44@build-void jZa44@build-void) (set! jZa46@build-letrec (lambda (jZaa1@ae jZaa2@vars jZaa3@val-exps jZaa4@body-exp) (if (null? jZaa2@vars) jZaa4@body-exp (list 'letrec (map list jZaa2@vars jZaa3@val-exps) jZaa4@body-exp)))) (set! jZaea@jZa46@build-letrec jZa46@build-letrec) (set! jZa48@build-let (lambda (jZaa9@ae jZaaa@vars jZaab@val-exps jZaac@body-exp) (if (null? jZaaa@vars) jZaac@body-exp (list 'let (map list jZaaa@vars jZaab@val-exps) jZaac@body-exp)))) (set! jZaeb@jZa48@build-let jZa48@build-let) (set! jZa4a@build-named-let (lambda (jZab1@ae jZab2@name jZab3@vars jZab4@val-exps jZab5@body-exp) (list 'let jZab2@name (map list jZab3@vars jZab4@val-exps) jZab5@body-exp))) (set! jZaec@jZa4a@build-named-let jZa4a@build-named-let) (set! jZa4c@build-letrec* (lambda (jZabb@ae jZabc@vars jZabd@val-exps jZabe@body-exp) (if (null? jZabc@vars) jZabe@body-exp (jZa48@build-let jZabb@ae jZabc@vars (map (lambda (jZac3@x) (list 'quote '#f)) jZabc@vars) (jZa42@build-sequence jZabb@ae (append (map (lambda (jZac5@lhs jZac6@rhs) (list 'set! jZac5@lhs jZac6@rhs)) jZabc@vars jZabd@val-exps) (list jZabe@body-exp))))))) (set! jZaed@jZa4c@build-letrec* jZa4c@build-letrec*) (set! jZa4e@build-library-letrec* (lambda (jZac9@ae jZaca@name jZacb@vars jZacc@locs jZacd@val-exps jZace@body-exp) (cons 'begin (append (map (lambda (jZad5@var) (cons 'set! (cons jZad5@var '((unspecified))))) jZacb@vars) (append (apply append (map (lambda (jZad7@var jZad8@loc jZad9@val-exp) (list (list 'set! jZad7@var jZad9@val-exp) (list 'set! jZad8@loc jZad7@var))) jZacb@vars jZacc@locs jZacd@val-exps)) (list jZace@body-exp)))))) (set! jZaee@jZa4e@build-library-letrec* jZa4e@build-library-letrec*) (set! jZa50@build-receive (lambda (jZadd@ae jZade@vars jZadf@producer jZae0@body*) (begin (display '"************** in ") (cons 'receive (cons jZade@vars (cons jZadf@producer jZae0@body*)))))) (set! jZaef@jZa50@build-receive jZa50@build-receive) (void))
(begin (set! jZafe@file-options-macro (unspecified)) (set! jZb00@set-cons (unspecified)) (set! jZb02@set-union (unspecified)) (set! jZb07@top-mark* (unspecified)) (set! jZb09@top-marked? (unspecified)) (set! jZb0b@gen-lexical (unspecified)) (set! jZb0d@gen-global (unspecified)) (set! jZb0f@gen-label (unspecified)) (set! jZb11@gen-top-level-label (unspecified)) (set! jZb13@gen-define-label+loc (unspecified)) (set! jZb15@gen-define-label (unspecified)) (set! jZb1f@rib? (unspecified)) (set! jZb21@rib-sym* (unspecified)) (set! jZb23@set-rib-sym*! (unspecified)) (set! jZb25@rib-mark** (unspecified)) (set! jZb27@set-rib-mark**! (unspecified)) (set! jZb29@rib-label* (unspecified)) (set! jZb2b@set-rib-label*! (unspecified)) (set! jZb2d@rib-sealed/freq (unspecified)) (set! jZb2f@set-rib-sealed/freq! (unspecified)) (set! jZb31@rib-cache (unspecified)) (set! jZb33@set-rib-cache! (unspecified)) (set! jZb35@dummy (unspecified)) (set! jZb37@make-empty-rib (unspecified)) (set! jZb39@extend-rib! (unspecified)) (set! jZb3b@extend-rib/nc! (unspecified)) (set! jZb3d@make-rib-map (unspecified)) (set! jZb3f@seal-rib! (unspecified)) (set! jZb41@unseal-rib! (unspecified)) (set! jZb43@make-full-rib (unspecified)) (set! jZb45@rp (unspecified)) (set! jZb4f@stx? (unspecified)) (set! jZb51@stx-expr (unspecified)) (set! jZb53@set-stx-expr! (unspecified)) (set! jZb55@stx-mark* (unspecified)) (set! jZb57@set-stx-mark*! (unspecified)) (set! jZb59@stx-subst* (unspecified)) (set! jZb5b@set-stx-subst*! (unspecified)) (set! jZb5d@stx-ae* (unspecified)) (set! jZb5f@set-stx-ae*! (unspecified)) (set! jZb61@dummy (unspecified)) (set! jZb63@datum->stx (unspecified)) (set! jZb65@gen-mark (unspecified)) (set! jZb67@anti-mark (unspecified)) (set! jZb69@anti-mark? (unspecified)) (set! jZb6b@mkstx (unspecified)) (set! jZb6d@add-mark (unspecified)) (set! jZb6f@add-subst (unspecified)) (set! jZb71@syntax-kind? (unspecified)) (set! jZb73@syntax-vector->list (unspecified)) (set! jZb75@syntax-pair? (unspecified)) (set! jZb77@syntax-vector? (unspecified)) (set! jZb79@syntax-null? (unspecified)) (set! jZb7b@syntax-list? (unspecified)) (set! jZb7d@syntax-car (unspecified)) (set! jZb7f@syntax-cdr (unspecified)) (set! jZb81@syntax->list (unspecified)) (set! jZb83@id? (unspecified)) (set! jZb85@id->sym (unspecified)) (set! jZb87@bound-id=? (unspecified)) (set! jZb89@free-id=? (unspecified)) (set! jZb8b@valid-bound-ids? (unspecified)) (set! jZb8d@distinct-bound-ids? (unspecified)) (set! jZb8f@bound-id-member? (unspecified)) (set! jZb91@self-evaluating? (unspecified)) (set! jZb93@strip-annotations (unspecified)) (set! jZb95@strip (unspecified)) (set! jZb97@stx->datum (unspecified)) (set! jZb99@id->label (unspecified)) (set! jZb9b@label->binding (unspecified)) (set! jZb9d@make-binding (unspecified)) (set! jZb9f@binding-type (unspecified)) (set! jZba1@binding-value (unspecified)) (set! jZba3@raise-unbound-error (unspecified)) (set! jZba5@syntax-type (unspecified)) (set! jZbb3@sanitize-binding (unspecified)) (set! jZbb5@make-variable-transformer (unspecified)) (set! jZbb7@variable-transformer? (unspecified)) (set! jZbb9@variable-transformer-procedure (unspecified)) (set! jZbbb@make-eval-transformer (unspecified)) (set! jZd0c@parse-define (unspecified)) (set! jZd0e@parse-define-syntax (unspecified)) (set! jZd10@scheme-stx-hashtable (unspecified)) (set! jZd12@scheme-stx (unspecified)) (set! jZd14@lexical-var (unspecified)) (set! jZd16@lexical-mutable? (unspecified)) (set! jZd18@set-lexical-mutable! (unspecified)) (set! jZd1a@add-lexical (unspecified)) (set! jZd1c@add-lexicals (unspecified)) (set! jZd1e@letrec-helper (unspecified)) (set! jZd20@let-transformer (unspecified)) (set! jZd22@letrec-transformer (unspecified)) (set! jZd24@letrec*-transformer (unspecified)) (set! jZd26@fluid-let-syntax-transformer (unspecified)) (set! jZd28@type-descriptor-transformer (unspecified)) (set! jZd2a@record-type-descriptor-transformer (unspecified)) (set! jZd2c@record-constructor-descriptor-transformer (unspecified)) (set! jZd2e@when-macro (unspecified)) (set! jZd30@unless-macro (unspecified)) (set! jZd32@if-transformer (unspecified)) (set! jZd34@and-transformer (unspecified)) (set! jZd36@or-transformer (unspecified)) (set! jZd38@case-macro (unspecified)) (set! jZd3a@quote-transformer (unspecified)) (set! jZd3c@case-lambda-transformer (unspecified)) (set! jZd3e@lambda-transformer (unspecified)) (set! jZd40@bless (unspecified)) (set! jZd42@with-syntax-macro (unspecified)) (set! jZd44@invalid-fmls-error (unspecified)) (set! jZd46@let-macro (unspecified)) (set! jZd48@let-values-macro (unspecified)) (set! jZd4a@let*-values-macro (unspecified)) (set! jZd4c@trace-lambda-macro (unspecified)) (set! jZd4e@trace-define-macro (unspecified)) (set! jZd50@trace-define-syntax-macro (unspecified)) (set! jZd52@trace-let/rec-syntax (unspecified)) (set! jZd54@trace-let-syntax-macro (unspecified)) (set! jZd56@trace-letrec-syntax-macro (unspecified)) (set! jZd58@guard-macro (unspecified)) (set! jZd5a@define-enumeration-macro (unspecified)) (set! jZd5c@time-macro (unspecified)) (set! jZd5e@delay-macro (unspecified)) (set! jZd60@assert-macro (unspecified)) (set! jZd62@endianness-macro (unspecified)) (set! jZd64@identifier-syntax-macro (unspecified)) (set! jZd66@do-macro (unspecified)) (set! jZd68@let*-macro (unspecified)) (set! jZd6a@or-macro (unspecified)) (set! jZd6c@and-macro (unspecified)) (set! jZd6e@cond-macro (unspecified)) (set! jZd70@do-include (unspecified)) (set! jZd72@include-macro (unspecified)) (set! jZd74@include-into-macro (unspecified)) (set! jZd76@syntax-rules-macro (unspecified)) (set! jZd78@quasiquote-macro (unspecified)) (set! jZd7a@quasisyntax-macro (unspecified)) (set! jZd7c@define-struct-macro (unspecified)) (set! jZd7e@define-record-type-macro (unspecified)) (set! jZd80@define-condition-type-macro (unspecified)) (set! jZd82@incorrect-usage-macro (unspecified)) (set! jZd84@parameterize-macro (unspecified)) (set! jZd86@foreign-call-transformer (unspecified)) (set! jZd88@convert-pattern (unspecified)) (set! jZd8a@syntax-dispatch (unspecified)) (set! jZd8c@ellipsis? (unspecified)) (set! jZd8e@underscore? (unspecified)) (set! jZd90@verify-literals (unspecified)) (set! jZd92@syntax-case-transformer (unspecified)) (set! jZd94@ellipsis-map (unspecified)) (set! jZd96@syntax-transformer (unspecified)) (set! jZd98@core-macro-transformer (unspecified)) (set! jZd9a@symbol-macro (unspecified)) (set! jZd9c@macro-transformer (unspecified)) (set! jZd9e@local-macro-transformer (unspecified)) (set! jZda0@do-macro-call (unspecified)) (set! jZda2@chi-macro (unspecified)) (set! jZda4@chi-local-macro (unspecified)) (set! jZda6@chi-global-macro (unspecified)) (set! jZda8@chi-expr* (unspecified)) (set! jZdaa@chi-application (unspecified)) (set! jZdac@chi-expr (unspecified)) (set! jZdae@chi-set! (unspecified)) (set! jZdb0@verify-formals (unspecified)) (set! jZdb2@chi-lambda-clause (unspecified)) (set! jZdb4@chi-lambda-clause* (unspecified)) (set! jZdb6@chi-defun (unspecified)) (set! jZdb8@chi-rhs (unspecified)) (set! jZdba@expand-interaction-rhs*/init* (unspecified)) (set! jZdbc@chi-rhs* (unspecified)) (set! jZdbe@find-bound=? (unspecified)) (set! jZdc0@find-dups (unspecified)) (set! jZdc2@chi-internal (unspecified)) (set! jZdc4@parse-module (unspecified)) (set! jZdce@module-interface? (unspecified)) (set! jZdd0@module-interface-first-mark (unspecified)) (set! jZdd2@set-module-interface-first-mark! (unspecified)) (set! jZdd4@module-interface-exp-id-vec (unspecified)) (set! jZdd6@set-module-interface-exp-id-vec! (unspecified)) (set! jZdd8@module-interface-exp-lab-vec (unspecified)) (set! jZdda@set-module-interface-exp-lab-vec! (unspecified)) (set! jZddc@dummy (unspecified)) (set! jZdde@module-interface-exp-id* (unspecified)) (set! jZde0@chi-internal-module (unspecified)) (set! jZde2@chi-body* (unspecified)) (set! jZde4@expand-transformer (unspecified)) (set! jZde6@parse-exports (unspecified)) (set! jZde8@parse-library-name (unspecified)) (set! jZdea@parse-library (unspecified)) (set! jZdec@parse-import-spec* (unspecified)) (set! jZdee@make-top-rib (unspecified)) (set! jZdf0@make-collector (unspecified)) (set! jZdf2@inv-collector (unspecified)) (set! jZdf4@vis-collector (unspecified)) (set! jZdf6@imp-collector (unspecified)) (set! jZdf8@chi-library-internal (unspecified)) (set! jZdfa@chi-interaction-expr (unspecified)) (set! jZdfc@library-body-expander (unspecified)) (set! jZdfe@core-library-expander (unspecified)) (set! jZe00@parse-top-level-program (unspecified)) (set! jZe02@top-level-expander (unspecified)) (set! jZe04@rp (unspecified)) (set! jZe0e@env? (unspecified)) (set! jZe10@env-names (unspecified)) (set! jZe12@set-env-names! (unspecified)) (set! jZe14@env-labels (unspecified)) (set! jZe16@set-env-labels! (unspecified)) (set! jZe18@env-itc (unspecified)) (set! jZe1a@set-env-itc! (unspecified)) (set! jZe1c@dummy (unspecified)) (set! jZe1e@rp (unspecified)) (set! jZe28@interaction-env? (unspecified)) (set! jZe2a@interaction-env-rib (unspecified)) (set! jZe2c@set-interaction-env-rib! (unspecified)) (set! jZe2e@interaction-env-r (unspecified)) (set! jZe30@set-interaction-env-r! (unspecified)) (set! jZe32@interaction-env-locs (unspecified)) (set! jZe34@set-interaction-env-locs! (unspecified)) (set! jZe36@dummy (unspecified)) (set! jZe38@interaction-environment-symbols (unspecified)) (set! jZe3a@environment-bindings (unspecified)) (set! jZe3c@parse-binding (unspecified)) (set! jZe3e@environment? (unspecified)) (set! jZe40@environment-symbols (unspecified)) (set! jZe42@environment (unspecified)) (set! jZe44@null-environment (unspecified)) (set! jZe46@scheme-report-environment (unspecified)) (set! jZe48@expand (unspecified)) (set! jZe4a@eval (unspecified)) (set! jZe4c@library-expander (unspecified)) (set! jZe4e@boot-library-expand (unspecified)) (set! jZe50@rev-map-append (unspecified)) (set! jZe52@build-exports (unspecified)) (set! jZe54@make-export-subst (unspecified)) (set! jZe56@make-export-env/macros (unspecified)) (set! jZe58@generate-temporaries (unspecified)) (set! jZe5a@free-identifier=? (unspecified)) (set! jZe5c@bound-identifier=? (unspecified)) (set! jZe5e@make-source-condition (unspecified)) (set! jZe60@extract-position-condition (unspecified)) (set! jZe62@expression-position (unspecified)) (set! jZe64@assertion-error (unspecified)) (set! jZe66@syntax-error (unspecified)) (set! jZe68@syntax-violation* (unspecified)) (set! jZe6a@syntax-violation (unspecified)) (set! jZe6c@identifier? (unspecified)) (set! jZe6e@datum->syntax (unspecified)) (set! jZe70@syntax->datum (unspecified)) (set! jZe72@ungensym-all (unspecified)) (set! jZe74@compile-r6rs-top-level (unspecified)) (set! jZe76@pre-compile-r6rs-top-level (unspecified)) (set! jZe78@interaction-environment (unspecified)) (set! jZe7a@top-level-context (unspecified)) (set! jZafe@file-options-macro (lambda (jZe7b@x) (let ((jZe7e@valid-option? '#f)) (begin (set! jZe7e@valid-option? (lambda (jZe87@x) (and (jZb83@id? jZe87@x) (memq (jZb85@id->sym jZe87@x) '(no-fail no-create no-truncate))))) (let ((jZe7f@t jZe7b@x)) (let ((jZe81@ls/false (jZd8a@syntax-dispatch jZe7f@t '(_ . each-any)))) (if (and jZe81@ls/false (apply (lambda (jZe83@opt*) (for-all jZe7e@valid-option? jZe83@opt*)) jZe81@ls/false)) (apply (lambda (jZe85@opt*) (jZd40@bless (list 'make-file-options (list 'quote jZe85@opt*)))) jZe81@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZe7f@t)))))))) (set! jZ27d1@jZafe@file-options-macro jZafe@file-options-macro) (set! jZb00@set-cons (lambda (jZe89@x jZe8a@ls) (if (memq jZe89@x jZe8a@ls) jZe8a@ls (cons jZe89@x jZe8a@ls)))) (set! jZ27d2@jZb00@set-cons jZb00@set-cons) (set! jZb02@set-union (lambda (jZe8d@ls1 jZe8e@ls2) (if (null? jZe8d@ls1) jZe8e@ls2 (if (memq (car jZe8d@ls1) jZe8e@ls2) (jZb02@set-union (cdr jZe8d@ls1) jZe8e@ls2) (cons (car jZe8d@ls1) (jZb02@set-union (cdr jZe8d@ls1) jZe8e@ls2)))))) (set! jZ27d3@jZb02@set-union jZb02@set-union) (set! jZb07@top-mark* '(top)) (set! jZ27d4@jZb07@top-mark* jZb07@top-mark*) (set! jZb09@top-marked? (lambda (jZe91@m*) (memq 'top jZe91@m*))) (set! jZ27d5@jZb09@top-marked? jZb09@top-marked?) (set! jZb0b@gen-lexical (lambda (jZe93@sym) (if (symbol? jZe93@sym) (gensym jZe93@sym) (if (jZb4f@stx? jZe93@sym) (jZb0b@gen-lexical (jZb85@id->sym jZe93@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" jZe93@sym))))) (set! jZ27d6@jZb0b@gen-lexical jZb0b@gen-lexical) (set! jZb0d@gen-global (lambda (jZe95@x) (jZb0b@gen-lexical jZe95@x))) (set! jZ27d7@jZb0d@gen-global jZb0d@gen-global) (set! jZb0f@gen-label (lambda (jZe97@_) (gensym))) (set! jZ27d8@jZb0f@gen-label jZb0f@gen-label) (set! jZb11@gen-top-level-label (lambda (jZe99@id jZe9a@rib) (let ((jZe9e@find '#f)) (begin (set! jZe9e@find (lambda (jZea9@sym jZeaa@mark* jZeab@sym* jZeac@mark** jZead@label*) (and (pair? jZeab@sym*) (if (and (eq? jZea9@sym (car jZeab@sym*)) (same-marks? jZeaa@mark* (car jZeac@mark**))) (car jZead@label*) (jZe9e@find jZea9@sym jZeaa@mark* (cdr jZeab@sym*) (cdr jZeac@mark**) (cdr jZead@label*)))))) (let ((jZe9f@sym (jZb85@id->sym jZe99@id)) (jZea0@mark* (jZb55@stx-mark* jZe99@id))) (let ((jZea3@sym* (jZb21@rib-sym* jZe9a@rib))) (let ((jZea5@t (and (memq jZe9f@sym (jZb21@rib-sym* jZe9a@rib)) (jZe9e@find jZe9f@sym jZea0@mark* jZea3@sym* (jZb25@rib-mark** jZe9a@rib) (jZb29@rib-label* jZe9a@rib))))) (if jZea5@t ((lambda (jZea7@label) (if (jZ997@jZ7e0@imported-label->binding jZea7@label) (gensym) jZea7@label)) jZea5@t) (gensym))))))))) (set! jZ27d9@jZb11@gen-top-level-label jZb11@gen-top-level-label) (set! jZb13@gen-define-label+loc (lambda (jZeb3@id jZeb4@rib) (let ((jZeb7@t (jZe7a@top-level-context))) (if jZeb7@t ((lambda (jZeb9@env) (let ((jZebb@label (jZb11@gen-top-level-label jZeb3@id jZeb4@rib)) (jZebc@locs (jZe32@interaction-env-locs jZeb9@env))) (values jZebb@label (let ((jZebf@t (assq jZebb@label jZebc@locs))) (if jZebf@t (cdr jZebf@t) (let ((jZec1@loc (jZb0b@gen-lexical jZeb3@id))) (begin (jZe34@set-interaction-env-locs! jZeb9@env (cons (cons jZebb@label jZec1@loc) jZebc@locs)) jZec1@loc))))))) jZeb7@t) (values (gensym) (jZb0b@gen-lexical jZeb3@id)))))) (set! jZ27da@jZb13@gen-define-label+loc jZb13@gen-define-label+loc) (set! jZb15@gen-define-label (lambda (jZec3@id jZec4@rib) (if (jZe7a@top-level-context) (jZb11@gen-top-level-label jZec3@id jZec4@rib) (gensym)))) (set! jZ27db@jZb15@gen-define-label jZb15@gen-define-label) (set! jZb1f@rib? (lambda (jZec7@x) (and (simple-struct? jZec7@x) (eq? (simple-struct-name jZec7@x) 'rib)))) (set! jZ27dc@jZb1f@rib? jZb1f@rib?) (set! jZb21@rib-sym* (lambda (jZec9@x) (simple-struct-ref jZec9@x '0))) (set! jZ27dd@jZb21@rib-sym* jZb21@rib-sym*) (set! jZb23@set-rib-sym*! (lambda (jZecb@x jZecc@val) (simple-struct-set! jZecb@x '0 jZecc@val))) (set! jZ27de@jZb23@set-rib-sym*! jZb23@set-rib-sym*!) (set! jZb25@rib-mark** (lambda (jZecf@x) (simple-struct-ref jZecf@x '1))) (set! jZ27df@jZb25@rib-mark** jZb25@rib-mark**) (set! jZb27@set-rib-mark**! (lambda (jZed1@x jZed2@val) (simple-struct-set! jZed1@x '1 jZed2@val))) (set! jZ27e0@jZb27@set-rib-mark**! jZb27@set-rib-mark**!) (set! jZb29@rib-label* (lambda (jZed5@x) (simple-struct-ref jZed5@x '2))) (set! jZ27e1@jZb29@rib-label* jZb29@rib-label*) (set! jZb2b@set-rib-label*! (lambda (jZed7@x jZed8@val) (simple-struct-set! jZed7@x '2 jZed8@val))) (set! jZ27e2@jZb2b@set-rib-label*! jZb2b@set-rib-label*!) (set! jZb2d@rib-sealed/freq (lambda (jZedb@x) (simple-struct-ref jZedb@x '3))) (set! jZ27e3@jZb2d@rib-sealed/freq jZb2d@rib-sealed/freq) (set! jZb2f@set-rib-sealed/freq! (lambda (jZedd@x jZede@val) (simple-struct-set! jZedd@x '3 jZede@val))) (set! jZ27e4@jZb2f@set-rib-sealed/freq! jZb2f@set-rib-sealed/freq!) (set! jZb31@rib-cache (lambda (jZee1@x) (simple-struct-ref jZee1@x '4))) (set! jZ27e5@jZb31@rib-cache jZb31@rib-cache) (set! jZb33@set-rib-cache! (lambda (jZee3@x jZee4@val) (simple-struct-set! jZee3@x '4 jZee4@val))) (set! jZ27e6@jZb33@set-rib-cache! jZb33@set-rib-cache!) (set! jZb35@dummy '3) (set! jZ27e7@jZb35@dummy jZb35@dummy) (set! jZb37@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! jZ27e8@jZb37@make-empty-rib jZb37@make-empty-rib) (set! jZb39@extend-rib! (lambda (jZee7@rib jZee8@id jZee9@label) (let ((jZeee@find '#f)) (begin (set! jZeee@find (lambda (jZefb@sym jZefc@mark* jZefd@sym* jZefe@mark** jZeff@label*) (and (pair? jZefd@sym*) (if (and (eq? jZefb@sym (car jZefd@sym*)) (same-marks? jZefc@mark* (car jZefe@mark**))) jZeff@label* (jZeee@find jZefb@sym jZefc@mark* (cdr jZefd@sym*) (cdr jZefe@mark**) (cdr jZeff@label*)))))) (begin (if (jZb2d@rib-sealed/freq jZee7@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" jZee7@rib) (void)) (let ((jZeef@sym (jZb85@id->sym jZee8@id)) (jZef0@mark* (jZb55@stx-mark* jZee8@id))) (let ((jZef3@sym* (jZb21@rib-sym* jZee7@rib))) (let ((jZef5@t (and (memq jZeef@sym (jZb21@rib-sym* jZee7@rib)) (jZeee@find jZeef@sym jZef0@mark* jZef3@sym* (jZb25@rib-mark** jZee7@rib) (jZb29@rib-label* jZee7@rib))))) (if jZef5@t ((lambda (jZef7@p) (if (not (eq? jZee9@label (car jZef7@p))) (if (jZe7a@top-level-context) (set-car! jZef7@p jZee9@label) (jZe6a@syntax-violation '#f '"multiple definitions of identifier" jZee8@id)) (void))) jZef5@t) (begin (if (jZb31@rib-cache jZee7@rib) (hashtable-update! (jZb31@rib-cache jZee7@rib) jZeef@sym (lambda (jZef9@e) (cons (cons jZef0@mark* jZee9@label) jZef9@e)) '()) (void)) (jZb23@set-rib-sym*! jZee7@rib (cons jZeef@sym jZef3@sym*)) (jZb27@set-rib-mark**! jZee7@rib (cons jZef0@mark* (jZb25@rib-mark** jZee7@rib))) (jZb2b@set-rib-label*! jZee7@rib (cons jZee9@label (jZb29@rib-label* jZee7@rib))))))))))))) (set! jZ27e9@jZb39@extend-rib! jZb39@extend-rib!) (set! jZb3b@extend-rib/nc! (lambda (jZf05@rib jZf06@id jZf07@label) (let ((jZf0b@sym (jZb85@id->sym jZf06@id)) (jZf0c@mark* (jZb55@stx-mark* jZf06@id))) (let ((jZf0f@sym* (jZb21@rib-sym* jZf05@rib))) (begin (if (jZb31@rib-cache jZf05@rib) (hashtable-update! (jZb31@rib-cache jZf05@rib) jZf0b@sym (lambda (jZf11@e) (cons (cons jZf0c@mark* jZf07@label) jZf11@e)) '()) (void)) (jZb23@set-rib-sym*! jZf05@rib (cons jZf0b@sym jZf0f@sym*)) (jZb27@set-rib-mark**! jZf05@rib (cons jZf0c@mark* (jZb25@rib-mark** jZf05@rib))) (jZb2b@set-rib-label*! jZf05@rib (cons jZf07@label (jZb29@rib-label* jZf05@rib)))))))) (set! jZ27ea@jZb3b@extend-rib/nc! jZb3b@extend-rib/nc!) (set! jZb3d@make-rib-map (lambda (jZf13@sym*) (let ((jZf15@ht (make-eq-hashtable))) (let jZf1b@f ((jZf17@i '0) (jZf18@sym* jZf13@sym*)) (if (null? jZf18@sym*) jZf15@ht (begin (hashtable-update! jZf15@ht (car jZf18@sym*) (lambda (jZf1d@x) (cons jZf17@i jZf1d@x)) '()) (jZf1b@f (+ jZf17@i '1) (cdr jZf18@sym*)))))))) (set! jZ27eb@jZb3d@make-rib-map jZb3d@make-rib-map) (set! jZb3f@seal-rib! (lambda (jZf1f@rib) (let ((jZf21@sym* (jZb21@rib-sym* jZf1f@rib))) (if (not (null? jZf21@sym*)) (begin (jZb23@set-rib-sym*! jZf1f@rib (list->vector jZf21@sym*)) (jZb27@set-rib-mark**! jZf1f@rib (list->vector (jZb25@rib-mark** jZf1f@rib))) (jZb2b@set-rib-label*! jZf1f@rib (list->vector (jZb29@rib-label* jZf1f@rib))) (jZb2f@set-rib-sealed/freq! jZf1f@rib (jZb3d@make-rib-map jZf21@sym*))) (void))))) (set! jZ27ec@jZb3f@seal-rib! jZb3f@seal-rib!) (set! jZb41@unseal-rib! (lambda (jZf23@rib) (if (jZb2d@rib-sealed/freq jZf23@rib) (begin (jZb2f@set-rib-sealed/freq! jZf23@rib '#f) (jZb23@set-rib-sym*! jZf23@rib (vector->list (jZb21@rib-sym* jZf23@rib))) (jZb27@set-rib-mark**! jZf23@rib (vector->list (jZb25@rib-mark** jZf23@rib))) (jZb2b@set-rib-label*! jZf23@rib (vector->list (jZb29@rib-label* jZf23@rib)))) (void)))) (set! jZ27ed@jZb41@unseal-rib! jZb41@unseal-rib!) (set! jZb43@make-full-rib (lambda (jZf25@id* jZf26@label*) (let ((jZf29@r (make-simple-struct 'rib '6 (list (map jZb85@id->sym jZf25@id*) (map jZb55@stx-mark* jZf25@id*) jZf26@label* '#f '#f)))) (begin (jZb3f@seal-rib! jZf29@r) jZf29@r)))) (set! jZ27ee@jZb43@make-full-rib jZb43@make-full-rib) (set! jZb45@rp (jZ6c5@jZ5a0@make-record-printer 'stx (lambda (jZf2b@x jZf2c@p jZf2d@wr) (begin (display '"#<syntax " jZf2c@p) (write (jZb97@stx->datum jZf2b@x) jZf2c@p) (let ((jZf31@expr (jZb51@stx-expr jZf2b@x))) (if (jZ6bc@jZ58e@annotation? jZf31@expr) (let ((jZf33@src (jZ6bd@jZ590@annotation-source jZf31@expr))) (if (pair? jZf33@src) (begin (display '" [" jZf2c@p) (display (cdr jZf33@src) jZf2c@p) (display '" of " jZf2c@p) (display (car jZf33@src) jZf2c@p) (display '"]" jZf2c@p)) (void))) (void))) (display '">" jZf2c@p))))) (set! jZ27ef@jZb45@rp jZb45@rp) (set! jZb4f@stx? (lambda (jZf35@x) (and (simple-struct? jZf35@x) (eq? (simple-struct-name jZf35@x) 'stx)))) (set! jZ27f0@jZb4f@stx? jZb4f@stx?) (set! jZb51@stx-expr (lambda (jZf37@x) (simple-struct-ref jZf37@x '0))) (set! jZ27f1@jZb51@stx-expr jZb51@stx-expr) (set! jZb53@set-stx-expr! (lambda (jZf39@x jZf3a@val) (simple-struct-set! jZf39@x '0 jZf3a@val))) (set! jZ27f2@jZb53@set-stx-expr! jZb53@set-stx-expr!) (set! jZb55@stx-mark* (lambda (jZf3d@x) (simple-struct-ref jZf3d@x '1))) (set! jZ27f3@jZb55@stx-mark* jZb55@stx-mark*) (set! jZb57@set-stx-mark*! (lambda (jZf3f@x jZf40@val) (simple-struct-set! jZf3f@x '1 jZf40@val))) (set! jZ27f4@jZb57@set-stx-mark*! jZb57@set-stx-mark*!) (set! jZb59@stx-subst* (lambda (jZf43@x) (simple-struct-ref jZf43@x '2))) (set! jZ27f5@jZb59@stx-subst* jZb59@stx-subst*) (set! jZb5b@set-stx-subst*! (lambda (jZf45@x jZf46@val) (simple-struct-set! jZf45@x '2 jZf46@val))) (set! jZ27f6@jZb5b@set-stx-subst*! jZb5b@set-stx-subst*!) (set! jZb5d@stx-ae* (lambda (jZf49@x) (simple-struct-ref jZf49@x '3))) (set! jZ27f7@jZb5d@stx-ae* jZb5d@stx-ae*) (set! jZb5f@set-stx-ae*! (lambda (jZf4b@x jZf4c@val) (simple-struct-set! jZf4b@x '3 jZf4c@val))) (set! jZ27f8@jZb5f@set-stx-ae*! jZb5f@set-stx-ae*!) (set! jZb61@dummy '3) (set! jZ27f9@jZb61@dummy jZb61@dummy) (set! jZb63@datum->stx (lambda (jZf4f@id jZf50@datum) (make-simple-struct 'stx '5 (list jZf50@datum (jZb55@stx-mark* jZf4f@id) (jZb59@stx-subst* jZf4f@id) (jZb5d@stx-ae* jZf4f@id))))) (set! jZ27fa@jZb63@datum->stx jZb63@datum->stx) (set! jZb65@gen-mark (lambda () (string '#\m))) (set! jZ27fb@jZb65@gen-mark jZb65@gen-mark) (set! jZb67@anti-mark '#f) (set! jZ27fc@jZb67@anti-mark jZb67@anti-mark) (set! jZb69@anti-mark? not) (set! jZ27fd@jZb69@anti-mark? jZb69@anti-mark?) (set! jZb6b@mkstx (lambda (jZf53@e jZf54@m* jZf55@s* jZf56@ae*) (if (and (jZb4f@stx? jZf53@e) (not (jZb09@top-marked? jZf54@m*))) (call-with-values (lambda () (join-wraps jZf54@m* jZf55@s* jZf56@ae* jZf53@e)) (lambda (jZf61@jZf5c jZf62@jZf5e jZf63@jZf60) (let ((jZf67@ae* jZf63@jZf60) (jZf68@s* jZf62@jZf5e) (jZf69@m* jZf61@jZf5c)) (make-simple-struct 'stx '5 (list (jZb51@stx-expr jZf53@e) jZf69@m* jZf68@s* jZf67@ae*))))) (make-simple-struct 'stx '5 (list jZf53@e jZf54@m* jZf55@s* jZf56@ae*))))) (set! jZ27fe@jZb6b@mkstx jZb6b@mkstx) (set! jZb6d@add-mark (lambda (jZf6d@m jZf6e@e jZf6f@ae) (jZb6b@mkstx jZf6e@e (list jZf6d@m) '(shift) (list jZf6f@ae)))) (set! jZ27ff@jZb6d@add-mark jZb6d@add-mark) (set! jZb6f@add-subst (lambda (jZf73@subst jZf74@e) (jZb6b@mkstx jZf74@e '() (list jZf73@subst) '()))) (set! jZ2800@jZb6f@add-subst jZb6f@add-subst) (set! jZb71@syntax-kind? (lambda (jZf77@x jZf78@p?) (if (jZb4f@stx? jZf77@x) (jZb71@syntax-kind? (jZb51@stx-expr jZf77@x) jZf78@p?) (if (jZ6bc@jZ58e@annotation? jZf77@x) (jZb71@syntax-kind? (jZ6be@jZ592@annotation-expression jZf77@x) jZf78@p?) (jZf78@p? jZf77@x))))) (set! jZ2801@jZb71@syntax-kind? jZb71@syntax-kind?) (set! jZb73@syntax-vector->list (lambda (jZf7b@x) (if (jZb4f@stx? jZf7b@x) (let ((jZf7d@ls (jZb73@syntax-vector->list (jZb51@stx-expr jZf7b@x))) (jZf7e@m* (jZb55@stx-mark* jZf7b@x)) (jZf7f@s* (jZb59@stx-subst* jZf7b@x)) (jZf80@ae* (jZb5d@stx-ae* jZf7b@x))) (map (lambda (jZf85@x) (jZb6b@mkstx jZf85@x jZf7e@m* jZf7f@s* jZf80@ae*)) jZf7d@ls)) (if (jZ6bc@jZ58e@annotation? jZf7b@x) (jZb73@syntax-vector->list (jZ6be@jZ592@annotation-expression jZf7b@x)) (if (vector? jZf7b@x) (vector->list jZf7b@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" jZf7b@x)))))) (set! jZ2802@jZb73@syntax-vector->list jZb73@syntax-vector->list) (set! jZb75@syntax-pair? (lambda (jZf87@x) (jZb71@syntax-kind? jZf87@x pair?))) (set! jZ2803@jZb75@syntax-pair? jZb75@syntax-pair?) (set! jZb77@syntax-vector? (lambda (jZf89@x) (jZb71@syntax-kind? jZf89@x vector?))) (set! jZ2804@jZb77@syntax-vector? jZb77@syntax-vector?) (set! jZb79@syntax-null? (lambda (jZf8b@x) (jZb71@syntax-kind? jZf8b@x null?))) (set! jZ2805@jZb79@syntax-null? jZb79@syntax-null?) (set! jZb7b@syntax-list? (lambda (jZf8d@x) (or (jZb79@syntax-null? jZf8d@x) (and (jZb75@syntax-pair? jZf8d@x) (jZb7b@syntax-list? (jZb7f@syntax-cdr jZf8d@x)))))) (set! jZ2806@jZb7b@syntax-list? jZb7b@syntax-list?) (set! jZb7d@syntax-car (lambda (jZf8f@x) (if (jZb4f@stx? jZf8f@x) (jZb6b@mkstx (jZb7d@syntax-car (jZb51@stx-expr jZf8f@x)) (jZb55@stx-mark* jZf8f@x) (jZb59@stx-subst* jZf8f@x) (jZb5d@stx-ae* jZf8f@x)) (if (jZ6bc@jZ58e@annotation? jZf8f@x) (jZb7d@syntax-car (jZ6be@jZ592@annotation-expression jZf8f@x)) (if (pair? jZf8f@x) (car jZf8f@x) (assertion-violation 'syntax-car '"BUG: not a pair" jZf8f@x)))))) (set! jZ2807@jZb7d@syntax-car jZb7d@syntax-car) (set! jZb7f@syntax-cdr (lambda (jZf91@x) (if (jZb4f@stx? jZf91@x) (jZb6b@mkstx (jZb7f@syntax-cdr (jZb51@stx-expr jZf91@x)) (jZb55@stx-mark* jZf91@x) (jZb59@stx-subst* jZf91@x) (jZb5d@stx-ae* jZf91@x)) (if (jZ6bc@jZ58e@annotation? jZf91@x) (jZb7f@syntax-cdr (jZ6be@jZ592@annotation-expression jZf91@x)) (if (pair? jZf91@x) (cdr jZf91@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" jZf91@x)))))) (set! jZ2808@jZb7f@syntax-cdr jZb7f@syntax-cdr) (set! jZb81@syntax->list (lambda (jZf93@x) (if (jZb75@syntax-pair? jZf93@x) (cons (jZb7d@syntax-car jZf93@x) (jZb81@syntax->list (jZb7f@syntax-cdr jZf93@x))) (if (jZb79@syntax-null? jZf93@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" jZf93@x))))) (set! jZ2809@jZb81@syntax->list jZb81@syntax->list) (set! jZb83@id? (lambda (jZf95@x) (and (jZb4f@stx? jZf95@x) (symbol? (jZb51@stx-expr jZf95@x))))) (set! jZ280a@jZb83@id? jZb83@id?) (set! jZb85@id->sym (lambda (jZf97@x) (jZb51@stx-expr jZf97@x))) (set! jZ280b@jZb85@id->sym jZb85@id->sym) (set! jZb87@bound-id=? (lambda (jZf99@x jZf9a@y) (and (eq? (jZb85@id->sym jZf99@x) (jZb85@id->sym jZf9a@y)) (same-marks? (jZb55@stx-mark* jZf99@x) (jZb55@stx-mark* jZf9a@y))))) (set! jZ280c@jZb87@bound-id=? jZb87@bound-id=?) (set! jZb89@free-id=? (lambda (jZf9d@i jZf9e@j) (let ((jZfa1@t0 (id->real-label jZf9d@i)) (jZfa2@t1 (id->real-label jZf9e@j))) (if (or jZfa1@t0 jZfa2@t1) (eq? jZfa1@t0 jZfa2@t1) (eq? (jZb85@id->sym jZf9d@i) (jZb85@id->sym jZf9e@j)))))) (set! jZ280d@jZb89@free-id=? jZb89@free-id=?) (set! jZb8b@valid-bound-ids? (lambda (jZfa5@id*) (and (for-all jZb83@id? jZfa5@id*) (jZb8d@distinct-bound-ids? jZfa5@id*)))) (set! jZ280e@jZb8b@valid-bound-ids? jZb8b@valid-bound-ids?) (set! jZb8d@distinct-bound-ids? (lambda (jZfa7@id*) (or (null? jZfa7@id*) (and (not (jZb8f@bound-id-member? (car jZfa7@id*) (cdr jZfa7@id*))) (jZb8d@distinct-bound-ids? (cdr jZfa7@id*)))))) (set! jZ280f@jZb8d@distinct-bound-ids? jZb8d@distinct-bound-ids?) (set! jZb8f@bound-id-member? (lambda (jZfa9@id jZfaa@id*) (and (pair? jZfaa@id*) (or (jZb87@bound-id=? jZfa9@id (car jZfaa@id*)) (jZb8f@bound-id-member? jZfa9@id (cdr jZfaa@id*)))))) (set! jZ2810@jZb8f@bound-id-member? jZb8f@bound-id-member?) (set! jZb91@self-evaluating? (lambda (jZfad@x) (or (number? jZfad@x) (string? jZfad@x) (char? jZfad@x) (boolean? jZfad@x) (regexp? jZfad@x) (bytevector? jZfad@x)))) (set! jZ2811@jZb91@self-evaluating? jZb91@self-evaluating?) (set! jZb93@strip-annotations (lambda (jZfaf@x) (if (pair? jZfaf@x) (cons (jZb93@strip-annotations (car jZfaf@x)) (jZb93@strip-annotations (cdr jZfaf@x))) (if (vector? jZfaf@x) (vector-map jZb93@strip-annotations jZfaf@x) (if (jZ6bc@jZ58e@annotation? jZfaf@x) (jZ6bb@jZ58c@annotation-stripped jZfaf@x) jZfaf@x))))) (set! jZ2812@jZb93@strip-annotations jZb93@strip-annotations) (set! jZb95@strip (lambda (jZfb1@x jZfb2@m*) (if (jZb09@top-marked? jZfb2@m*) (if (or (jZ6bc@jZ58e@annotation? jZfb1@x) (and (pair? jZfb1@x) (jZ6bc@jZ58e@annotation? (car jZfb1@x))) (and (vector? jZfb1@x) (> (vector-length jZfb1@x) '0) (jZ6bc@jZ58e@annotation? (vector-ref jZfb1@x '0)))) (jZb93@strip-annotations jZfb1@x) jZfb1@x) (let jZfb7@f ((jZfb5@x jZfb1@x)) (if (jZb4f@stx? jZfb5@x) (jZb95@strip (jZb51@stx-expr jZfb5@x) (jZb55@stx-mark* jZfb5@x)) (if (jZ6bc@jZ58e@annotation? jZfb5@x) (jZ6bb@jZ58c@annotation-stripped jZfb5@x) (if (pair? jZfb5@x) (let ((jZfb9@a (jZfb7@f (car jZfb5@x))) (jZfba@d (jZfb7@f (cdr jZfb5@x)))) (if (and (eq? jZfb9@a (car jZfb5@x)) (eq? jZfba@d (cdr jZfb5@x))) jZfb5@x (cons jZfb9@a jZfba@d))) (if (vector? jZfb5@x) (let ((jZfbd@old (vector->list jZfb5@x))) (let ((jZfbf@new (map jZfb7@f jZfbd@old))) (if (for-all eq? jZfbd@old jZfbf@new) jZfb5@x (list->vector jZfbf@new)))) jZfb5@x)))))))) (set! jZ2813@jZb95@strip jZb95@strip) (set! jZb97@stx->datum (lambda (jZfc1@x) (jZb95@strip jZfc1@x '()))) (set! jZ2814@jZb97@stx->datum jZb97@stx->datum) (set! jZb99@id->label (lambda (jZfc3@id) (or (id->real-label jZfc3@id) (let ((jZfc5@t (jZe7a@top-level-context))) (if jZfc5@t ((lambda (jZfc7@env) (let ((jZfc9@rib (jZe2a@interaction-env-rib jZfc7@env))) (call-with-values (lambda () (jZb13@gen-define-label+loc jZfc3@id jZfc9@rib)) (lambda (jZfcf@jZfcc jZfd0@jZfce) (let ((jZfd3@loc_ jZfd0@jZfce) (jZfd4@lab jZfcf@jZfcc)) (begin (jZb39@extend-rib! jZfc9@rib jZfc3@id jZfd4@lab) jZfd4@lab)))))) jZfc5@t) '#f))))) (set! jZ2815@jZb99@id->label jZb99@id->label) (set! jZb9b@label->binding (lambda (jZfd7@x jZfd8@r) (let ((jZfdb@t (jZ997@jZ7e0@imported-label->binding jZfd7@x))) (if jZfdb@t ((lambda (jZfdd@b) (if (and (pair? jZfdd@b) (eq? (car jZfdd@b) '$core-rtd)) (cons '$rtd (map jZd40@bless (cdr jZfdd@b))) (if (and (pair? jZfdd@b) (eq? (car jZfdd@b) 'global-rtd)) (let ((jZfdf@lib (cadr jZfdd@b)) (jZfe0@loc (cddr jZfdd@b))) (cons '$rtd (symbol-value jZfe0@loc))) jZfdd@b))) jZfdb@t) (let ((jZfe3@t (assq jZfd7@x jZfd8@r))) (if jZfe3@t (cdr jZfe3@t) (let ((jZfe5@t (jZe7a@top-level-context))) (if jZfe5@t ((lambda (jZfe7@env) (let ((jZfe9@t (assq jZfd7@x (jZe32@interaction-env-locs jZfe7@env)))) (if jZfe9@t ((lambda (jZfeb@p) (cons* 'lexical (cdr jZfeb@p) '#f)) jZfe9@t) '(displaced-lexical . #f)))) jZfe5@t) '(displaced-lexical . #f))))))))) (set! jZ2816@jZb9b@label->binding jZb9b@label->binding) (set! jZb9d@make-binding cons) (set! jZ2817@jZb9d@make-binding jZb9d@make-binding) (set! jZb9f@binding-type car) (set! jZ2818@jZb9f@binding-type jZb9f@binding-type) (set! jZba1@binding-value cdr) (set! jZ2819@jZba1@binding-value jZba1@binding-value) (set! jZba3@raise-unbound-error (lambda (jZfed@id) (jZe68@syntax-violation* '#f '"unbound identifier" jZfed@id (jZ2c0f@jZ2a55@make-undefined-violation)))) (set! jZ281a@jZba3@raise-unbound-error jZba3@raise-unbound-error) (set! jZba5@syntax-type (lambda (jZfef@e jZff0@r) (if (jZb83@id? jZfef@e) (let ((jZff3@id jZfef@e)) (let ((jZff5@label (jZb99@id->label jZff3@id))) (let ((jZff7@b (jZb9b@label->binding jZff5@label jZff0@r))) (let ((jZff9@type (jZb9f@binding-type jZff7@b))) (begin (if (not jZff5@label) (jZba3@raise-unbound-error jZff3@id) (void)) (let ((jZffb@t jZff9@type)) (if (memv jZffb@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values jZff9@type (jZba1@binding-value jZff7@b) jZff3@id) (values 'other '#f '#f)))))))) (if (jZb75@syntax-pair? jZfef@e) (let ((jZffd@id (jZb7d@syntax-car jZfef@e))) (if (jZb83@id? jZffd@id) (let ((jZfff@label (jZb99@id->label jZffd@id))) (let ((jZ1001@b (jZb9b@label->binding jZfff@label jZff0@r))) (let ((jZ1003@type (jZb9f@binding-type jZ1001@b))) (begin (if (not jZfff@label) (jZba3@raise-unbound-error jZffd@id) (void)) (let ((jZ1005@t jZ1003@type)) (if (memv jZ1005@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values jZ1003@type (jZba1@binding-value jZ1001@b) jZffd@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((jZ1007@d (jZb97@stx->datum jZfef@e))) (if (jZb91@self-evaluating? jZ1007@d) (values 'constant jZ1007@d '#f) (values 'other '#f '#f))))))) (set! jZ281b@jZba5@syntax-type jZba5@syntax-type) (set! jZbb3@sanitize-binding (lambda (jZ1009@x jZ100a@src) (if (procedure? jZ1009@x) (cons* 'local-macro jZ1009@x jZ100a@src) (if (and (pair? jZ1009@x) (eq? (car jZ1009@x) 'macro!) (procedure? (cdr jZ1009@x))) (cons* 'local-macro! (cdr jZ1009@x) jZ100a@src) (if (and (pair? jZ1009@x) (eq? (car jZ1009@x) '$rtd)) jZ1009@x (assertion-violation 'expand '"invalid transformer" jZ1009@x)))))) (set! jZ281c@jZbb3@sanitize-binding jZbb3@sanitize-binding) (set! jZbb5@make-variable-transformer (lambda (jZ100d@x) (if (procedure? jZ100d@x) (cons 'macro! jZ100d@x) (assertion-violation 'make-variable-transformer '"not a procedure" jZ100d@x)))) (set! jZ281d@jZbb5@make-variable-transformer jZbb5@make-variable-transformer) (set! jZbb7@variable-transformer? (lambda (jZ100f@x) (and (pair? jZ100f@x) (eq? (car jZ100f@x) 'macro!) (procedure? (cdr jZ100f@x))))) (set! jZ281e@jZbb7@variable-transformer? jZbb7@variable-transformer?) (set! jZbb9@variable-transformer-procedure (lambda (jZ1011@x) (if (jZbb7@variable-transformer? jZ1011@x) (cdr jZ1011@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" jZ1011@x)))) (set! jZ281f@jZbb9@variable-transformer-procedure jZbb9@variable-transformer-procedure) (set! jZbbb@make-eval-transformer (lambda (jZ1013@x) (jZbb3@sanitize-binding (eval-core (jZ71e@jZ6d6@expanded->core jZ1013@x)) jZ1013@x))) (set! jZ2820@jZbbb@make-eval-transformer jZbbb@make-eval-transformer) (set! jZd0c@parse-define (lambda (jZ1015@x) (let ((jZ1017@t jZ1015@x)) (let ((jZ1019@ls/false (jZd8a@syntax-dispatch jZ1017@t '(_ (any . any) any . each-any)))) (if (and jZ1019@ls/false (apply (lambda (jZ101b@id jZ101c@fmls jZ101d@b jZ101e@b*) (jZb83@id? jZ101b@id)) jZ1019@ls/false)) (apply (lambda (jZ1023@id jZ1024@fmls jZ1025@b jZ1026@b*) (begin (jZdb0@verify-formals jZ1024@fmls jZ1015@x) (values jZ1023@id (cons 'defun (cons jZ1024@fmls (cons jZ1025@b jZ1026@b*)))))) jZ1019@ls/false) (let ((jZ102b@t jZ1017@t)) (let ((jZ102d@ls/false (jZd8a@syntax-dispatch jZ102b@t '(_ any any)))) (if (and jZ102d@ls/false (apply (lambda (jZ102f@id jZ1030@val) (jZb83@id? jZ102f@id)) jZ102d@ls/false)) (apply (lambda (jZ1033@id jZ1034@val) (values jZ1033@id (cons 'expr jZ1034@val))) jZ102d@ls/false) (let ((jZ1037@t jZ102b@t)) (let ((jZ1039@ls/false (jZd8a@syntax-dispatch jZ1037@t '(_ any)))) (if (and jZ1039@ls/false (apply (lambda (jZ103b@id) (jZb83@id? jZ103b@id)) jZ1039@ls/false)) (apply (lambda (jZ103d@id) (values jZ103d@id (cons 'expr (jZd40@bless '(void))))) jZ1039@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1037@t)))))))))))) (set! jZ2821@jZd0c@parse-define jZd0c@parse-define) (set! jZd0e@parse-define-syntax (lambda (jZ103f@x) (let ((jZ1041@t jZ103f@x)) (let ((jZ1043@ls/false (jZd8a@syntax-dispatch jZ1041@t '(_ any any)))) (if (and jZ1043@ls/false (apply (lambda (jZ1045@id jZ1046@val) (jZb83@id? jZ1045@id)) jZ1043@ls/false)) (apply (lambda (jZ1049@id jZ104a@val) (values jZ1049@id jZ104a@val)) jZ1043@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1041@t)))))) (set! jZ2822@jZd0e@parse-define-syntax jZd0e@parse-define-syntax) (set! jZd10@scheme-stx-hashtable (make-eq-hashtable)) (set! jZ2823@jZd10@scheme-stx-hashtable jZd10@scheme-stx-hashtable) (set! jZd12@scheme-stx (lambda (jZ104d@sym) (or (hashtable-ref jZd10@scheme-stx-hashtable jZ104d@sym '#f) (let ((jZ104f@subst (jZ973@jZ798@library-subst (jZ991@jZ7d4@find-library-by-name '(psyntax system $all))))) (let ((jZ1051@stx (make-simple-struct 'stx '5 (list jZ104d@sym jZb07@top-mark* '() '())))) (let ((jZ1053@stx (let ((jZ1055@t (assq jZ104d@sym jZ104f@subst))) (if jZ1055@t ((lambda (jZ1057@x) (let ((jZ1059@name (car jZ1057@x)) (jZ105a@label (cdr jZ1057@x))) (jZb6f@add-subst (make-simple-struct 'rib '6 (list (list jZ1059@name) (list jZb07@top-mark*) (list jZ105a@label) '#f '#f)) jZ1051@stx))) jZ1055@t) jZ1051@stx)))) (begin (hashtable-set! jZd10@scheme-stx-hashtable jZ104d@sym jZ1053@stx) jZ1053@stx))))))) (set! jZ2824@jZd12@scheme-stx jZd12@scheme-stx) (set! jZd14@lexical-var car) (set! jZ2825@jZd14@lexical-var jZd14@lexical-var) (set! jZd16@lexical-mutable? cdr) (set! jZ2826@jZd16@lexical-mutable? jZd16@lexical-mutable?) (set! jZd18@set-lexical-mutable! set-cdr!) (set! jZ2827@jZd18@set-lexical-mutable! jZd18@set-lexical-mutable!) (set! jZd1a@add-lexical (lambda (jZ105d@lab jZ105e@lex jZ105f@r) (cons (cons* jZ105d@lab 'lexical jZ105e@lex '#f) jZ105f@r))) (set! jZ2828@jZd1a@add-lexical jZd1a@add-lexical) (set! jZd1c@add-lexicals (lambda (jZ1063@lab* jZ1064@lex* jZ1065@r) (if (null? jZ1063@lab*) jZ1065@r (jZd1c@add-lexicals (cdr jZ1063@lab*) (cdr jZ1064@lex*) (jZd1a@add-lexical (car jZ1063@lab*) (car jZ1064@lex*) jZ1065@r))))) (set! jZ2829@jZd1c@add-lexicals jZd1c@add-lexicals) (set! jZd1e@letrec-helper (lambda (jZ1069@e jZ106a@r jZ106b@mr jZ106c@build) (let ((jZ1071@t jZ1069@e)) (let ((jZ1073@ls/false (jZd8a@syntax-dispatch jZ1071@t '(_ #(each (any any)) any . each-any)))) (if jZ1073@ls/false (apply (lambda (jZ1075@lhs* jZ1076@rhs* jZ1077@b jZ1078@b*) (if (not (jZb8b@valid-bound-ids? jZ1075@lhs*)) (jZd44@invalid-fmls-error jZ1069@e jZ1075@lhs*) (let ((jZ107d@lex* (map jZb0b@gen-lexical jZ1075@lhs*)) (jZ107e@lab* (map jZb0f@gen-label jZ1075@lhs*))) (let ((jZ1081@rib (jZb43@make-full-rib jZ1075@lhs* jZ107e@lab*)) (jZ1082@r (jZd1c@add-lexicals jZ107e@lab* jZ107d@lex* jZ106a@r))) (let ((jZ1085@body (jZdc2@chi-internal (jZb6f@add-subst jZ1081@rib (cons jZ1077@b jZ1078@b*)) jZ1082@r jZ106b@mr)) (jZ1086@rhs* (jZda8@chi-expr* (map (lambda (jZ1089@x) (jZb6f@add-subst jZ1081@rib jZ1089@x)) jZ1076@rhs*) jZ1082@r jZ106b@mr))) (jZ106c@build '#f jZ107d@lex* jZ1086@rhs* jZ1085@body)))))) jZ1073@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1071@t)))))) (set! jZ282a@jZd1e@letrec-helper jZd1e@letrec-helper) (set! jZd20@let-transformer (lambda (jZ108b@e jZ108c@r jZ108d@mr) (let ((jZ1091@t jZ108b@e)) (let ((jZ1093@ls/false (jZd8a@syntax-dispatch jZ1091@t '(_ #(each (any any)) any . each-any)))) (if jZ1093@ls/false (apply (lambda (jZ1095@lhs* jZ1096@rhs* jZ1097@b jZ1098@b*) (if (not (jZb8b@valid-bound-ids? jZ1095@lhs*)) (jZd44@invalid-fmls-error jZ108b@e jZ1095@lhs*) (let ((jZ109d@lex* (map jZb0b@gen-lexical jZ1095@lhs*)) (jZ109e@lab* (map jZb0f@gen-label jZ1095@lhs*)) (jZ109f@rhs* (jZda8@chi-expr* jZ1096@rhs* jZ108c@r jZ108d@mr))) (let ((jZ10a3@rib (jZb43@make-full-rib jZ1095@lhs* jZ109e@lab*)) (jZ10a4@r (jZd1c@add-lexicals jZ109e@lab* jZ109d@lex* jZ108c@r))) (let ((jZ10a7@body (jZdc2@chi-internal (jZb6f@add-subst jZ10a3@rib (cons jZ1097@b jZ1098@b*)) jZ10a4@r jZ108d@mr))) (jZaeb@jZa48@build-let '#f jZ109d@lex* jZ109f@rhs* jZ10a7@body)))))) jZ1093@ls/false) (let ((jZ10a9@t jZ1091@t)) (let ((jZ10ab@ls/false (jZd8a@syntax-dispatch jZ10a9@t '(_ any #(each (any any)) any . each-any)))) (if jZ10ab@ls/false (apply (lambda (jZ10ad@loop jZ10ae@lhs* jZ10af@rhs* jZ10b0@b jZ10b1@b*) (if (not (jZb8b@valid-bound-ids? jZ10ae@lhs*)) (jZd44@invalid-fmls-error jZ108b@e jZ10ae@lhs*) (let ((jZ10b7@lex* (map jZb0b@gen-lexical jZ10ae@lhs*)) (jZ10b8@lab* (map jZb0f@gen-label jZ10ae@lhs*)) (jZ10b9@rhs* (jZda8@chi-expr* jZ10af@rhs* jZ108c@r jZ108d@mr)) (jZ10ba@loop-lex (jZb0b@gen-lexical jZ10ad@loop)) (jZ10bb@loop-lab (jZb0f@gen-label jZ10ad@loop))) (let ((jZ10c1@loop-rib (jZb43@make-full-rib (list jZ10ad@loop) (list jZ10bb@loop-lab))) (jZ10c2@rib (jZb43@make-full-rib jZ10ae@lhs* jZ10b8@lab*)) (jZ10c3@r (jZd1c@add-lexicals (cons jZ10bb@loop-lab jZ10b8@lab*) (cons jZ10ba@loop-lex jZ10b7@lex*) jZ108c@r))) (let ((jZ10c7@body (jZdc2@chi-internal (jZb6f@add-subst jZ10c1@loop-rib (jZb6f@add-subst jZ10c2@rib (cons jZ10b0@b jZ10b1@b*))) jZ10c3@r jZ108d@mr))) (jZaec@jZa4a@build-named-let '#f jZ10ba@loop-lex jZ10b7@lex* jZ10b9@rhs* jZ10c7@body)))))) jZ10ab@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ10a9@t))))))))) (set! jZ282b@jZd20@let-transformer jZd20@let-transformer) (set! jZd22@letrec-transformer (lambda (jZ10c9@e jZ10ca@r jZ10cb@mr) (jZd1e@letrec-helper jZ10c9@e jZ10ca@r jZ10cb@mr jZaea@jZa46@build-letrec))) (set! jZ282c@jZd22@letrec-transformer jZd22@letrec-transformer) (set! jZd24@letrec*-transformer (lambda (jZ10cf@e jZ10d0@r jZ10d1@mr) (jZd1e@letrec-helper jZ10cf@e jZ10d0@r jZ10d1@mr jZaed@jZa4c@build-letrec*))) (set! jZ282d@jZd24@letrec*-transformer jZd24@letrec*-transformer) (set! jZd26@fluid-let-syntax-transformer (lambda (jZ10d5@e jZ10d6@r jZ10d7@mr) (let ((jZ10dc@lookup '#f)) (begin (set! jZ10dc@lookup (lambda (jZ10ef@x) (or (jZb99@id->label jZ10ef@x) (jZe6a@syntax-violation '#f '"unbound identifier" jZ10d5@e jZ10ef@x)))) (let ((jZ10dd@t jZ10d5@e)) (let ((jZ10df@ls/false (jZd8a@syntax-dispatch jZ10dd@t '(_ #(each (any any)) any . each-any)))) (if jZ10df@ls/false (apply (lambda (jZ10e1@lhs* jZ10e2@rhs* jZ10e3@b jZ10e4@b*) (if (not (jZb8b@valid-bound-ids? jZ10e1@lhs*)) (jZd44@invalid-fmls-error jZ10d5@e jZ10e1@lhs*) (let ((jZ10e9@lab* (map jZ10dc@lookup jZ10e1@lhs*)) (jZ10ea@rhs* (map (lambda (jZ10ed@x) (jZbbb@make-eval-transformer (jZde4@expand-transformer jZ10ed@x jZ10d7@mr))) jZ10e2@rhs*))) (jZdc2@chi-internal (cons jZ10e3@b jZ10e4@b*) (append (map cons jZ10e9@lab* jZ10ea@rhs*) jZ10d6@r) (append (map cons jZ10e9@lab* jZ10ea@rhs*) jZ10d7@mr))))) jZ10df@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ10dd@t)))))))) (set! jZ282e@jZd26@fluid-let-syntax-transformer jZd26@fluid-let-syntax-transformer) (set! jZd28@type-descriptor-transformer (lambda (jZ10f1@e jZ10f2@r jZ10f3@mr) (let ((jZ10f7@t jZ10f1@e)) (let ((jZ10f9@ls/false (jZd8a@syntax-dispatch jZ10f7@t '(_ any)))) (if (and jZ10f9@ls/false (apply (lambda (jZ10fb@id) (jZb83@id? jZ10fb@id)) jZ10f9@ls/false)) (apply (lambda (jZ10fd@id) (let ((jZ10ff@lab (jZb99@id->label jZ10fd@id))) (let ((jZ1101@b (jZb9b@label->binding jZ10ff@lab jZ10f2@r))) (let ((jZ1103@type (jZb9f@binding-type jZ1101@b))) (begin (if (not jZ10ff@lab) (jZba3@raise-unbound-error jZ10fd@id) (void)) (if (not (and (eq? jZ1103@type '$rtd) (not (list? (jZba1@binding-value jZ1101@b))))) (jZe6a@syntax-violation '#f '"not a record type" jZ10f1@e) (void)) (list 'quote (jZba1@binding-value jZ1101@b))))))) jZ10f9@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ10f7@t)))))) (set! jZ282f@jZd28@type-descriptor-transformer jZd28@type-descriptor-transformer) (set! jZd2a@record-type-descriptor-transformer (lambda (jZ1105@e jZ1106@r jZ1107@mr) (let ((jZ110b@t jZ1105@e)) (let ((jZ110d@ls/false (jZd8a@syntax-dispatch jZ110b@t '(_ any)))) (if (and jZ110d@ls/false (apply (lambda (jZ110f@id) (jZb83@id? jZ110f@id)) jZ110d@ls/false)) (apply (lambda (jZ1111@id) (let ((jZ1113@lab (jZb99@id->label jZ1111@id))) (let ((jZ1115@b (jZb9b@label->binding jZ1113@lab jZ1106@r))) (let ((jZ1117@type (jZb9f@binding-type jZ1115@b))) (begin (if (not jZ1113@lab) (jZba3@raise-unbound-error jZ1111@id) (void)) (if (not (and (eq? jZ1117@type '$rtd) (list? (jZba1@binding-value jZ1115@b)))) (jZe6a@syntax-violation '#f '"not a record type" jZ1105@e) (void)) (jZdac@chi-expr (car (jZba1@binding-value jZ1115@b)) jZ1106@r jZ1107@mr)))))) jZ110d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ110b@t)))))) (set! jZ2830@jZd2a@record-type-descriptor-transformer jZd2a@record-type-descriptor-transformer) (set! jZd2c@record-constructor-descriptor-transformer (lambda (jZ1119@e jZ111a@r jZ111b@mr) (let ((jZ111f@t jZ1119@e)) (let ((jZ1121@ls/false (jZd8a@syntax-dispatch jZ111f@t '(_ any)))) (if (and jZ1121@ls/false (apply (lambda (jZ1123@id) (jZb83@id? jZ1123@id)) jZ1121@ls/false)) (apply (lambda (jZ1125@id) (let ((jZ1127@lab (jZb99@id->label jZ1125@id))) (let ((jZ1129@b (jZb9b@label->binding jZ1127@lab jZ111a@r))) (let ((jZ112b@type (jZb9f@binding-type jZ1129@b))) (begin (if (not jZ1127@lab) (jZba3@raise-unbound-error jZ1125@id) (void)) (if (not (and (eq? jZ112b@type '$rtd) (list? (jZba1@binding-value jZ1129@b)))) (jZe6a@syntax-violation '#f '"invalid type" jZ1119@e) (void)) (jZdac@chi-expr (cadr (jZba1@binding-value jZ1129@b)) jZ111a@r jZ111b@mr)))))) jZ1121@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ111f@t)))))) (set! jZ2831@jZd2c@record-constructor-descriptor-transformer jZd2c@record-constructor-descriptor-transformer) (set! jZd2e@when-macro (lambda (jZ112d@e) (let ((jZ112f@t jZ112d@e)) (let ((jZ1131@ls/false (jZd8a@syntax-dispatch jZ112f@t '(_ any any . each-any)))) (if jZ1131@ls/false (apply (lambda (jZ1133@test jZ1134@e jZ1135@e*) (jZd40@bless (list 'if jZ1133@test (cons 'begin (cons jZ1134@e jZ1135@e*))))) jZ1131@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ112f@t)))))) (set! jZ2832@jZd2e@when-macro jZd2e@when-macro) (set! jZd30@unless-macro (lambda (jZ1139@e) (let ((jZ113b@t jZ1139@e)) (let ((jZ113d@ls/false (jZd8a@syntax-dispatch jZ113b@t '(_ any any . each-any)))) (if jZ113d@ls/false (apply (lambda (jZ113f@test jZ1140@e jZ1141@e*) (jZd40@bless (list 'if (list 'not jZ113f@test) (cons 'begin (cons jZ1140@e jZ1141@e*))))) jZ113d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ113b@t)))))) (set! jZ2833@jZd30@unless-macro jZd30@unless-macro) (set! jZd32@if-transformer (lambda (jZ1145@e jZ1146@r jZ1147@mr) (let ((jZ114b@t jZ1145@e)) (let ((jZ114d@ls/false (jZd8a@syntax-dispatch jZ114b@t '(_ any any any)))) (if jZ114d@ls/false (apply (lambda (jZ114f@e0 jZ1150@e1 jZ1151@e2) (list 'if (jZdac@chi-expr jZ114f@e0 jZ1146@r jZ1147@mr) (jZdac@chi-expr jZ1150@e1 jZ1146@r jZ1147@mr) (jZdac@chi-expr jZ1151@e2 jZ1146@r jZ1147@mr))) jZ114d@ls/false) (let ((jZ1155@t jZ114b@t)) (let ((jZ1157@ls/false (jZd8a@syntax-dispatch jZ1155@t '(_ any any)))) (if jZ1157@ls/false (apply (lambda (jZ1159@e0 jZ115a@e1) (list 'if (jZdac@chi-expr jZ1159@e0 jZ1146@r jZ1147@mr) (jZdac@chi-expr jZ115a@e1 jZ1146@r jZ1147@mr) (jZae9@jZa44@build-void))) jZ1157@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1155@t))))))))) (set! jZ2834@jZd32@if-transformer jZd32@if-transformer) (set! jZd34@and-transformer (lambda (jZ115d@e jZ115e@r jZ115f@mr) (let ((jZ1163@t jZ115d@e)) (let ((jZ1165@ls/false (jZd8a@syntax-dispatch jZ1163@t '(_ . each-any)))) (if jZ1165@ls/false (apply (lambda (jZ1167@e*) (cons 'and (jZda8@chi-expr* jZ1167@e* jZ115e@r jZ115f@mr))) jZ1165@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1163@t)))))) (set! jZ2835@jZd34@and-transformer jZd34@and-transformer) (set! jZd36@or-transformer (lambda (jZ1169@e jZ116a@r jZ116b@mr) (let ((jZ116f@t jZ1169@e)) (let ((jZ1171@ls/false (jZd8a@syntax-dispatch jZ116f@t '(_ . each-any)))) (if jZ1171@ls/false (apply (lambda (jZ1173@e*) (cons 'or (jZda8@chi-expr* jZ1173@e* jZ116a@r jZ116b@mr))) jZ1171@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ116f@t)))))) (set! jZ2836@jZd36@or-transformer jZd36@or-transformer) (set! jZd38@case-macro (lambda (jZ1175@e) (let ((jZ1178@build-last '#f) (jZ117a@build-one '#f)) (begin (set! jZ1178@build-last (lambda (jZ119f@cls) (let ((jZ11a1@t jZ119f@cls)) (let ((jZ11a3@ls/false (jZd8a@syntax-dispatch jZ11a1@t '(#(scheme-id else) any . each-any)))) (if jZ11a3@ls/false (apply (lambda (jZ11a5@e jZ11a6@e*) (cons 'begin (cons jZ11a5@e jZ11a6@e*))) jZ11a3@ls/false) (let ((jZ11a9@t jZ11a1@t)) (let ((jZ11ab@ls/false (jZd8a@syntax-dispatch jZ11a9@t '_))) (if jZ11ab@ls/false (apply (lambda () (jZ117a@build-one jZ119f@cls '(if #f #f))) jZ11ab@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ11a9@t))))))))) (set! jZ117a@build-one (lambda (jZ1191@cls jZ1192@k) (let ((jZ1195@t jZ1191@cls)) (let ((jZ1197@ls/false (jZd8a@syntax-dispatch jZ1195@t '(each-any any . each-any)))) (if jZ1197@ls/false (apply (lambda (jZ1199@d* jZ119a@e jZ119b@e*) (list 'if (list 'memv 't (list 'quote jZ1199@d*)) (cons 'begin (cons jZ119a@e jZ119b@e*)) jZ1192@k)) jZ1197@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1195@t)))))) (let ((jZ117b@t jZ1175@e)) (let ((jZ117d@ls/false (jZd8a@syntax-dispatch jZ117b@t '(_ any)))) (if jZ117d@ls/false (apply (lambda (jZ117f@expr) (jZd40@bless (cons 'let (cons (list (list 't jZ117f@expr)) '((if #f #f)))))) jZ117d@ls/false) (let ((jZ1181@t jZ117b@t)) (let ((jZ1183@ls/false (jZd8a@syntax-dispatch jZ1181@t '(_ any any . each-any)))) (if jZ1183@ls/false (apply (lambda (jZ1185@expr jZ1186@cls jZ1187@cls*) (jZd40@bless (list 'let (list (list 't jZ1185@expr)) (let jZ118f@f ((jZ118b@cls jZ1186@cls) (jZ118c@cls* jZ1187@cls*)) (if (null? jZ118c@cls*) (jZ1178@build-last jZ118b@cls) (jZ117a@build-one jZ118b@cls (jZ118f@f (car jZ118c@cls*) (cdr jZ118c@cls*)))))))) jZ1183@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1181@t))))))))))) (set! jZ2837@jZd38@case-macro jZd38@case-macro) (set! jZd3a@quote-transformer (lambda (jZ11ad@e jZ11ae@r jZ11af@mr) (let ((jZ11b3@t jZ11ad@e)) (let ((jZ11b5@ls/false (jZd8a@syntax-dispatch jZ11b3@t '(_ any)))) (if jZ11b5@ls/false (apply (lambda (jZ11b7@datum) (list 'quote (jZb97@stx->datum jZ11b7@datum))) jZ11b5@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ11b3@t)))))) (set! jZ2838@jZd3a@quote-transformer jZd3a@quote-transformer) (set! jZd3c@case-lambda-transformer (lambda (jZ11b9@e jZ11ba@r jZ11bb@mr) (let ((jZ11bf@t jZ11b9@e)) (let ((jZ11c1@ls/false (jZd8a@syntax-dispatch jZ11bf@t '(_ . #(each (any any . each-any)))))) (if jZ11c1@ls/false (apply (lambda (jZ11c3@fmls* jZ11c4@b* jZ11c5@b**) (call-with-values (lambda () (jZdb4@chi-lambda-clause* jZ11b9@e jZ11c3@fmls* (map cons jZ11c4@b* jZ11c5@b**) jZ11ba@r jZ11bb@mr)) (lambda (jZ11cd@jZ11ca jZ11ce@jZ11cc) (let ((jZ11d1@body* jZ11ce@jZ11cc) (jZ11d2@fmls* jZ11cd@jZ11ca)) (jZae7@jZa14@build-case-lambda '#f jZ11d2@fmls* jZ11d1@body*))))) jZ11c1@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ11bf@t)))))) (set! jZ2839@jZd3c@case-lambda-transformer jZd3c@case-lambda-transformer) (set! jZd3e@lambda-transformer (lambda (jZ11d5@e jZ11d6@r jZ11d7@mr) (let ((jZ11db@t jZ11d5@e)) (let ((jZ11dd@ls/false (jZd8a@syntax-dispatch jZ11db@t '(_ any any . each-any)))) (if jZ11dd@ls/false (apply (lambda (jZ11df@fmls jZ11e0@b jZ11e1@b*) (call-with-values (lambda () (jZdb2@chi-lambda-clause jZ11d5@e jZ11df@fmls (cons jZ11e0@b jZ11e1@b*) jZ11d6@r jZ11d7@mr)) (lambda (jZ11e9@jZ11e6 jZ11ea@jZ11e8) (let ((jZ11ed@body jZ11ea@jZ11e8) (jZ11ee@fmls jZ11e9@jZ11e6)) (jZae6@jZa12@build-lambda '#f jZ11ee@fmls jZ11ed@body))))) jZ11dd@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ11db@t)))))) (set! jZ283a@jZd3e@lambda-transformer jZd3e@lambda-transformer) (set! jZd40@bless (lambda (jZ11f1@x) (jZb6b@mkstx (let jZ11f5@f ((jZ11f3@x jZ11f1@x)) (if (jZb4f@stx? jZ11f3@x) jZ11f3@x (if (pair? jZ11f3@x) (cons (jZ11f5@f (car jZ11f3@x)) (jZ11f5@f (cdr jZ11f3@x))) (if (symbol? jZ11f3@x) (jZd12@scheme-stx jZ11f3@x) (if (vector? jZ11f3@x) (vector-map jZ11f5@f jZ11f3@x) jZ11f3@x))))) '() '() '()))) (set! jZ283b@jZd40@bless jZd40@bless) (set! jZd42@with-syntax-macro (lambda (jZ11f7@e) (let ((jZ11f9@t jZ11f7@e)) (let ((jZ11fb@ls/false (jZd8a@syntax-dispatch jZ11f9@t '(_ #(each (any any)) any . each-any)))) (if jZ11fb@ls/false (apply (lambda (jZ11fd@pat* jZ11fe@expr* jZ11ff@b jZ1200@b*) (let ((jZ1205@idn* (let jZ1209@f ((jZ1207@pat* jZ11fd@pat*)) (if (null? jZ1207@pat*) '() (call-with-values (lambda () (jZd88@convert-pattern (car jZ1207@pat*) '())) (lambda (jZ120f@jZ120c jZ1210@jZ120e) (let ((jZ1213@idn* jZ1210@jZ120e) (jZ1214@pat jZ120f@jZ120c)) (append jZ1213@idn* (jZ1209@f (cdr jZ1207@pat*)))))))))) (begin (jZdb0@verify-formals (map car jZ1205@idn*) jZ11f7@e) (let ((jZ1217@t* (jZe58@generate-temporaries jZ11fe@expr*))) (jZd40@bless (list 'let (map list jZ1217@t* jZ11fe@expr*) (let jZ121d@f ((jZ1219@pat* jZ11fd@pat*) (jZ121a@t* jZ1217@t*)) (if (null? jZ1219@pat*) (cons 'begin (cons '#f (cons jZ11ff@b jZ1200@b*))) (list 'syntax-case (car jZ121a@t*) '() (list (car jZ1219@pat*) (jZ121d@f (cdr jZ1219@pat*) (cdr jZ121a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car jZ1219@pat*)) (car jZ121a@t*)))))))))))) jZ11fb@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ11f9@t)))))) (set! jZ283c@jZd42@with-syntax-macro jZd42@with-syntax-macro) (set! jZd44@invalid-fmls-error (lambda (jZ121f@stx jZ1220@fmls) (let ((jZ1223@t jZ1220@fmls)) (let ((jZ1225@ls/false (jZd8a@syntax-dispatch jZ1223@t '#(each+ any () any)))) (if jZ1225@ls/false (apply (lambda (jZ1227@id* jZ1228@last) (let jZ122d@f ((jZ122b@id* (if (jZb83@id? jZ1228@last) (cons jZ1228@last jZ1227@id*) (if (jZb79@syntax-null? jZ1228@last) jZ1227@id* (jZe6a@syntax-violation '#f '"not an identifier" jZ121f@stx jZ1228@last))))) (if (null? jZ122b@id*) (values) (if (not (jZb83@id? (car jZ122b@id*))) (jZe6a@syntax-violation '#f '"not an identifier" jZ121f@stx (car jZ122b@id*)) (begin (jZ122d@f (cdr jZ122b@id*)) (if (jZb8f@bound-id-member? (car jZ122b@id*) (cdr jZ122b@id*)) (jZe6a@syntax-violation '#f '"duplicate binding" jZ121f@stx (car jZ122b@id*)) (void))))))) jZ1225@ls/false) (let ((jZ122f@t jZ1223@t)) (let ((jZ1231@ls/false (jZd8a@syntax-dispatch jZ122f@t '_))) (if jZ1231@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"malformed binding form" jZ121f@stx jZ1220@fmls)) jZ1231@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ122f@t))))))))) (set! jZ283d@jZd44@invalid-fmls-error jZd44@invalid-fmls-error) (set! jZd46@let-macro (lambda (jZ1233@stx) (let ((jZ1235@t jZ1233@stx)) (let ((jZ1237@ls/false (jZd8a@syntax-dispatch jZ1235@t '(_ #(each (any any)) any . each-any)))) (if jZ1237@ls/false (apply (lambda (jZ1239@lhs* jZ123a@rhs* jZ123b@b jZ123c@b*) (if (jZb8b@valid-bound-ids? jZ1239@lhs*) (jZd40@bless (cons (cons 'lambda (cons jZ1239@lhs* (cons jZ123b@b jZ123c@b*))) jZ123a@rhs*)) (jZd44@invalid-fmls-error jZ1233@stx jZ1239@lhs*))) jZ1237@ls/false) (let ((jZ1241@t jZ1235@t)) (let ((jZ1243@ls/false (jZd8a@syntax-dispatch jZ1241@t '(_ any #(each (any any)) any . each-any)))) (if (and jZ1243@ls/false (apply (lambda (jZ1245@f jZ1246@lhs* jZ1247@rhs* jZ1248@b jZ1249@b*) (jZb83@id? jZ1245@f)) jZ1243@ls/false)) (apply (lambda (jZ124f@f jZ1250@lhs* jZ1251@rhs* jZ1252@b jZ1253@b*) (if (jZb8b@valid-bound-ids? jZ1250@lhs*) (jZd40@bless (cons (list 'letrec (list (list jZ124f@f (cons 'lambda (cons jZ1250@lhs* (cons jZ1252@b jZ1253@b*))))) jZ124f@f) jZ1251@rhs*)) (jZd44@invalid-fmls-error jZ1233@stx jZ1250@lhs*))) jZ1243@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1241@t))))))))) (set! jZ283e@jZd46@let-macro jZd46@let-macro) (set! jZd48@let-values-macro (lambda (jZ1259@stx) (let ((jZ125c@rename '#f) (jZ125e@rename* '#f)) (begin (set! jZ125c@rename (lambda (jZ12c1@x jZ12c2@old* jZ12c3@new*) (begin (if (not (jZb83@id? jZ12c1@x)) (jZe6a@syntax-violation '#f '"not an indentifier" jZ1259@stx jZ12c1@x) (void)) (if (jZb8f@bound-id-member? jZ12c1@x jZ12c2@old*) (jZe6a@syntax-violation '#f '"duplicate binding" jZ1259@stx jZ12c1@x) (void)) (let ((jZ12c7@y (gensym (jZe70@syntax->datum jZ12c1@x)))) (values jZ12c7@y (cons jZ12c1@x jZ12c2@old*) (cons jZ12c7@y jZ12c3@new*)))))) (set! jZ125e@rename* (lambda (jZ12af@x* jZ12b0@old* jZ12b1@new*) (if (null? jZ12af@x*) (values '() jZ12b0@old* jZ12b1@new*) (call-with-values (lambda () (jZ125c@rename (car jZ12af@x*) jZ12b0@old* jZ12b1@new*)) (lambda (jZ12b5@x jZ12b6@old* jZ12b7@new*) (call-with-values (lambda () (jZ125e@rename* (cdr jZ12af@x*) jZ12b6@old* jZ12b7@new*)) (lambda (jZ12bb@x* jZ12bc@old* jZ12bd@new*) (values (cons jZ12b5@x jZ12bb@x*) jZ12bc@old* jZ12bd@new*)))))))) (let ((jZ125f@t jZ1259@stx)) (let ((jZ1261@ls/false (jZd8a@syntax-dispatch jZ125f@t '(_ () any . each-any)))) (if jZ1261@ls/false (apply (lambda (jZ1263@b jZ1264@b*) (cons* (jZd40@bless 'let) '() jZ1263@b jZ1264@b*)) jZ1261@ls/false) (let ((jZ1267@t jZ125f@t)) (let ((jZ1269@ls/false (jZd8a@syntax-dispatch jZ1267@t '(_ #(each (any any)) any . each-any)))) (if jZ1269@ls/false (apply (lambda (jZ126b@lhs* jZ126c@rhs* jZ126d@b jZ126e@b*) (jZd40@bless (let jZ127b@f ((jZ1273@lhs* jZ126b@lhs*) (jZ1274@rhs* jZ126c@rhs*) (jZ1275@old* '()) (jZ1276@new* '())) (if (null? jZ1273@lhs*) (cons 'let (cons (map list jZ1275@old* jZ1276@new*) (cons jZ126d@b jZ126e@b*))) (let ((jZ127d@t (car jZ1273@lhs*))) (let ((jZ127f@ls/false (jZd8a@syntax-dispatch jZ127d@t 'each-any))) (if jZ127f@ls/false (apply (lambda (jZ1281@x*) (call-with-values (lambda () (jZ125e@rename* jZ1281@x* jZ1275@old* jZ1276@new*)) (lambda (jZ1289@jZ1284 jZ128a@jZ1286 jZ128b@jZ1288) (let ((jZ128f@new* jZ128b@jZ1288) (jZ1290@old* jZ128a@jZ1286) (jZ1291@y* jZ1289@jZ1284)) (list 'call-with-values (list 'lambda '() (car jZ1274@rhs*)) (list 'lambda jZ1291@y* (jZ127b@f (cdr jZ1273@lhs*) (cdr jZ1274@rhs*) jZ1290@old* jZ128f@new*))))))) jZ127f@ls/false) (let ((jZ1295@t jZ127d@t)) (let ((jZ1297@ls/false (jZd8a@syntax-dispatch jZ1295@t '#(each+ any () any)))) (if jZ1297@ls/false (apply (lambda (jZ1299@x* jZ129a@x) (call-with-values (lambda () (jZ125c@rename jZ129a@x jZ1275@old* jZ1276@new*)) (lambda (jZ129d@y jZ129e@old* jZ129f@new*) (call-with-values (lambda () (jZ125e@rename* jZ1299@x* jZ129e@old* jZ129f@new*)) (lambda (jZ12a3@y* jZ12a4@old* jZ12a5@new*) (list 'call-with-values (list 'lambda '() (car jZ1274@rhs*)) (list 'lambda (append jZ12a3@y* jZ129d@y) (jZ127b@f (cdr jZ1273@lhs*) (cdr jZ1274@rhs*) jZ12a4@old* jZ12a5@new*)))))))) jZ1297@ls/false) (let ((jZ12a9@t jZ1295@t)) (let ((jZ12ab@ls/false (jZd8a@syntax-dispatch jZ12a9@t 'any))) (if jZ12ab@ls/false (apply (lambda (jZ12ad@others) (jZe6a@syntax-violation '#f '"malformed bindings" jZ1259@stx jZ12ad@others)) jZ12ab@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ12a9@t)))))))))))))) jZ1269@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1267@t))))))))))) (set! jZ283f@jZd48@let-values-macro jZd48@let-values-macro) (set! jZd4a@let*-values-macro (lambda (jZ12c9@stx) (let ((jZ12cc@check '#f)) (begin (set! jZ12cc@check (lambda (jZ12fb@x*) (if (not (null? jZ12fb@x*)) (let ((jZ12fd@x (car jZ12fb@x*))) (begin (if (not (jZb83@id? jZ12fd@x)) (jZe6a@syntax-violation '#f '"not an identifier" jZ12c9@stx jZ12fd@x) (void)) (jZ12cc@check (cdr jZ12fb@x*)) (if (jZb8f@bound-id-member? jZ12fd@x (cdr jZ12fb@x*)) (jZe6a@syntax-violation '#f '"duplicate identifier" jZ12c9@stx jZ12fd@x) (void)))) (void)))) (let ((jZ12cd@t jZ12c9@stx)) (let ((jZ12cf@ls/false (jZd8a@syntax-dispatch jZ12cd@t '(_ () any . each-any)))) (if jZ12cf@ls/false (apply (lambda (jZ12d1@b jZ12d2@b*) (cons* (jZd40@bless 'let) '() jZ12d1@b jZ12d2@b*)) jZ12cf@ls/false) (let ((jZ12d5@t jZ12cd@t)) (let ((jZ12d7@ls/false (jZd8a@syntax-dispatch jZ12d5@t '(_ #(each (any any)) any . each-any)))) (if jZ12d7@ls/false (apply (lambda (jZ12d9@lhs* jZ12da@rhs* jZ12db@b jZ12dc@b*) (jZd40@bless (let jZ12e5@f ((jZ12e1@lhs* jZ12d9@lhs*) (jZ12e2@rhs* jZ12da@rhs*)) (if (null? jZ12e1@lhs*) (cons 'begin (cons jZ12db@b jZ12dc@b*)) (let ((jZ12e7@t (car jZ12e1@lhs*))) (let ((jZ12e9@ls/false (jZd8a@syntax-dispatch jZ12e7@t 'each-any))) (if jZ12e9@ls/false (apply (lambda (jZ12eb@x*) (begin (jZ12cc@check jZ12eb@x*) (list 'call-with-values (list 'lambda '() (car jZ12e2@rhs*)) (list 'lambda jZ12eb@x* (jZ12e5@f (cdr jZ12e1@lhs*) (cdr jZ12e2@rhs*)))))) jZ12e9@ls/false) (let ((jZ12ed@t jZ12e7@t)) (let ((jZ12ef@ls/false (jZd8a@syntax-dispatch jZ12ed@t '#(each+ any () any)))) (if jZ12ef@ls/false (apply (lambda (jZ12f1@x* jZ12f2@x) (begin (jZ12cc@check (cons jZ12f2@x jZ12f1@x*)) (list 'call-with-values (list 'lambda '() (car jZ12e2@rhs*)) (list 'lambda (append jZ12f1@x* jZ12f2@x) (jZ12e5@f (cdr jZ12e1@lhs*) (cdr jZ12e2@rhs*)))))) jZ12ef@ls/false) (let ((jZ12f5@t jZ12ed@t)) (let ((jZ12f7@ls/false (jZd8a@syntax-dispatch jZ12f5@t 'any))) (if jZ12f7@ls/false (apply (lambda (jZ12f9@others) (jZe6a@syntax-violation '#f '"malformed bindings" jZ12c9@stx jZ12f9@others)) jZ12f7@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ12f5@t)))))))))))))) jZ12d7@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ12d5@t))))))))))) (set! jZ2840@jZd4a@let*-values-macro jZd4a@let*-values-macro) (set! jZd4c@trace-lambda-macro (lambda (jZ12ff@stx) (let ((jZ1301@t jZ12ff@stx)) (let ((jZ1303@ls/false (jZd8a@syntax-dispatch jZ1301@t '(_ any each-any any . each-any)))) (if jZ1303@ls/false (apply (lambda (jZ1305@who jZ1306@fmls jZ1307@b jZ1308@b*) (if (jZb8b@valid-bound-ids? jZ1306@fmls) (jZd40@bless (list 'make-traced-procedure (list 'quote jZ1305@who) (cons 'lambda (cons jZ1306@fmls (cons jZ1307@b jZ1308@b*))))) (jZd44@invalid-fmls-error jZ12ff@stx jZ1306@fmls))) jZ1303@ls/false) (let ((jZ130d@t jZ1301@t)) (let ((jZ130f@ls/false (jZd8a@syntax-dispatch jZ130d@t '(_ any #(each+ any () any) any . each-any)))) (if jZ130f@ls/false (apply (lambda (jZ1311@who jZ1312@fmls jZ1313@last jZ1314@b jZ1315@b*) (if (jZb8b@valid-bound-ids? (cons jZ1313@last jZ1312@fmls)) (jZd40@bless (list 'make-traced-procedure (list 'quote jZ1311@who) (cons 'lambda (cons (append jZ1312@fmls jZ1313@last) (cons jZ1314@b jZ1315@b*))))) (jZd44@invalid-fmls-error jZ12ff@stx (append jZ1312@fmls jZ1313@last)))) jZ130f@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ130d@t))))))))) (set! jZ2841@jZd4c@trace-lambda-macro jZd4c@trace-lambda-macro) (set! jZd4e@trace-define-macro (lambda (jZ131b@stx) (let ((jZ131d@t jZ131b@stx)) (let ((jZ131f@ls/false (jZd8a@syntax-dispatch jZ131d@t '(_ (any . each-any) any . each-any)))) (if jZ131f@ls/false (apply (lambda (jZ1321@who jZ1322@fmls jZ1323@b jZ1324@b*) (if (jZb8b@valid-bound-ids? jZ1322@fmls) (jZd40@bless (list 'define jZ1321@who (list 'make-traced-procedure (list 'quote jZ1321@who) (cons 'lambda (cons jZ1322@fmls (cons jZ1323@b jZ1324@b*)))))) (jZd44@invalid-fmls-error jZ131b@stx jZ1322@fmls))) jZ131f@ls/false) (let ((jZ1329@t jZ131d@t)) (let ((jZ132b@ls/false (jZd8a@syntax-dispatch jZ1329@t '(_ (any . #(each+ any () any)) any . each-any)))) (if jZ132b@ls/false (apply (lambda (jZ132d@who jZ132e@fmls jZ132f@last jZ1330@b jZ1331@b*) (if (jZb8b@valid-bound-ids? (cons jZ132f@last jZ132e@fmls)) (jZd40@bless (list 'define jZ132d@who (list 'make-traced-procedure (list 'quote jZ132d@who) (cons 'lambda (cons (append jZ132e@fmls jZ132f@last) (cons jZ1330@b jZ1331@b*)))))) (jZd44@invalid-fmls-error jZ131b@stx (append jZ132e@fmls jZ132f@last)))) jZ132b@ls/false) (let ((jZ1337@t jZ1329@t)) (let ((jZ1339@ls/false (jZd8a@syntax-dispatch jZ1337@t '(_ any any)))) (if jZ1339@ls/false (apply (lambda (jZ133b@who jZ133c@expr) (if (jZb83@id? jZ133b@who) (jZd40@bless (list 'define jZ133b@who (list 'let (list (list 'v jZ133c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote jZ133b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (jZe6a@syntax-violation '#f '"invalid name" jZ131b@stx))) jZ1339@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1337@t)))))))))))) (set! jZ2842@jZd4e@trace-define-macro jZd4e@trace-define-macro) (set! jZd50@trace-define-syntax-macro (lambda (jZ133f@stx) (let ((jZ1341@t jZ133f@stx)) (let ((jZ1343@ls/false (jZd8a@syntax-dispatch jZ1341@t '(_ any any)))) (if jZ1343@ls/false (apply (lambda (jZ1345@who jZ1346@expr) (if (jZb83@id? jZ1345@who) (jZd40@bless (list 'define-syntax jZ1345@who (list 'make-traced-macro (list 'quote jZ1345@who) jZ1346@expr))) (jZe6a@syntax-violation '#f '"invalid name" jZ133f@stx))) jZ1343@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1341@t)))))) (set! jZ2843@jZd50@trace-define-syntax-macro jZd50@trace-define-syntax-macro) (set! jZd52@trace-let/rec-syntax (lambda (jZ1349@who) (lambda (jZ134b@stx) (let ((jZ134d@t jZ134b@stx)) (let ((jZ134f@ls/false (jZd8a@syntax-dispatch jZ134d@t '(_ #(each (any any)) any . each-any)))) (if jZ134f@ls/false (apply (lambda (jZ1351@lhs* jZ1352@rhs* jZ1353@b jZ1354@b*) (if (jZb8b@valid-bound-ids? jZ1351@lhs*) (let ((jZ1359@rhs* (map (lambda (jZ135b@lhs jZ135c@rhs) (list 'make-traced-macro (list 'quote jZ135b@lhs) jZ135c@rhs)) jZ1351@lhs* jZ1352@rhs*))) (jZd40@bless (cons jZ1349@who (cons (map list jZ1351@lhs* jZ1359@rhs*) (cons jZ1353@b jZ1354@b*))))) (jZd44@invalid-fmls-error jZ134b@stx jZ1351@lhs*))) jZ134f@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ134d@t))))))) (set! jZ2844@jZd52@trace-let/rec-syntax jZd52@trace-let/rec-syntax) (set! jZd54@trace-let-syntax-macro (jZd52@trace-let/rec-syntax 'let-syntax)) (set! jZ2845@jZd54@trace-let-syntax-macro jZd54@trace-let-syntax-macro) (set! jZd56@trace-letrec-syntax-macro (jZd52@trace-let/rec-syntax 'letrec-syntax)) (set! jZ2846@jZd56@trace-letrec-syntax-macro jZd56@trace-letrec-syntax-macro) (set! jZd58@guard-macro (lambda (jZ135f@x) (let ((jZ1362@gen-clauses '#f)) (begin (set! jZ1362@gen-clauses (lambda (jZ1379@con jZ137a@outerk jZ137b@clause*) (let ((jZ1380@f '#f) (jZ1382@f* '#f)) (begin (set! jZ1380@f (lambda (jZ13b9@x jZ13ba@k) (let ((jZ13bd@t jZ13b9@x)) (let ((jZ13bf@ls/false (jZd8a@syntax-dispatch jZ13bd@t '(any #(scheme-id =>) any)))) (if jZ13bf@ls/false (apply (lambda (jZ13c1@e jZ13c2@p) (let ((jZ13c5@t (gensym))) (list 'let (list (list jZ13c5@t jZ13c1@e)) (list 'if jZ13c5@t (list jZ13c2@p jZ13c5@t) jZ13ba@k)))) jZ13bf@ls/false) (let ((jZ13c7@t jZ13bd@t)) (let ((jZ13c9@ls/false (jZd8a@syntax-dispatch jZ13c7@t '(any)))) (if jZ13c9@ls/false (apply (lambda (jZ13cb@e) (let ((jZ13cd@t (gensym))) (list 'let (list (list jZ13cd@t jZ13cb@e)) (list 'if jZ13cd@t jZ13cd@t jZ13ba@k)))) jZ13c9@ls/false) (let ((jZ13cf@t jZ13c7@t)) (let ((jZ13d1@ls/false (jZd8a@syntax-dispatch jZ13cf@t '(any any . each-any)))) (if jZ13d1@ls/false (apply (lambda (jZ13d3@e jZ13d4@v jZ13d5@v*) (list 'if jZ13d3@e (cons 'begin (cons jZ13d4@v jZ13d5@v*)) jZ13ba@k)) jZ13d1@ls/false) (let ((jZ13d9@t jZ13cf@t)) (let ((jZ13db@ls/false (jZd8a@syntax-dispatch jZ13d9@t '_))) (if jZ13db@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid guard clause" jZ13b9@x)) jZ13db@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ13d9@t))))))))))))))) (set! jZ1382@f* (lambda (jZ138f@x*) (let ((jZ1391@t jZ138f@x*)) (let ((jZ1393@ls/false (jZd8a@syntax-dispatch jZ1391@t '()))) (if jZ1393@ls/false (apply (lambda () (let ((jZ1395@g (gensym))) (values (list jZ1395@g (list 'lambda '() (list 'raise-continuable jZ1379@con))) jZ1395@g))) jZ1393@ls/false) (let ((jZ1397@t jZ1391@t)) (let ((jZ1399@ls/false (jZd8a@syntax-dispatch jZ1397@t '((#(scheme-id else) any . each-any))))) (if jZ1399@ls/false (apply (lambda (jZ139b@e jZ139c@e*) (values (cons 'begin (cons jZ139b@e jZ139c@e*)) '#f)) jZ1399@ls/false) (let ((jZ139f@t jZ1397@t)) (let ((jZ13a1@ls/false (jZd8a@syntax-dispatch jZ139f@t '(any . any)))) (if jZ13a1@ls/false (apply (lambda (jZ13a3@cls jZ13a4@cls*) (call-with-values (lambda () (jZ1382@f* jZ13a4@cls*)) (lambda (jZ13ab@jZ13a8 jZ13ac@jZ13aa) (let ((jZ13af@g jZ13ac@jZ13aa) (jZ13b0@e jZ13ab@jZ13a8)) (values (jZ1380@f jZ13a3@cls jZ13b0@e) jZ13af@g))))) jZ13a1@ls/false) (let ((jZ13b3@t jZ139f@t)) (let ((jZ13b5@ls/false (jZd8a@syntax-dispatch jZ13b3@t 'any))) (if jZ13b5@ls/false (apply (lambda (jZ13b7@others) (jZe6a@syntax-violation '#f '"invalid guard clause" jZ13b7@others)) jZ13b5@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ13b3@t))))))))))))))) (call-with-values (lambda () (jZ1382@f* jZ137b@clause*)) (lambda (jZ1387@jZ1384 jZ1388@jZ1386) (let ((jZ138b@raisek jZ1388@jZ1386) (jZ138c@code jZ1387@jZ1384)) (if jZ138b@raisek (list (list 'call/cc (list 'lambda (list jZ138b@raisek) (list jZ137a@outerk (list 'lambda '() jZ138c@code))))) (list jZ137a@outerk (list 'lambda '() jZ138c@code)))))))))) (let ((jZ1363@t jZ135f@x)) (let ((jZ1365@ls/false (jZd8a@syntax-dispatch jZ1363@t '(_ (any . each-any) any . each-any)))) (if (and jZ1365@ls/false (apply (lambda (jZ1367@con jZ1368@clause* jZ1369@b jZ136a@b*) (jZb83@id? jZ1367@con)) jZ1365@ls/false)) (apply (lambda (jZ136f@con jZ1370@clause* jZ1371@b jZ1372@b*) (let ((jZ1377@outerk (gensym))) (jZd40@bless (list (list 'call/cc (list 'lambda (list jZ1377@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list jZ136f@con) (jZ1362@gen-clauses jZ136f@con jZ1377@outerk jZ1370@clause*)) (cons 'lambda (cons '() (cons jZ1371@b jZ1372@b*))))))))))) jZ1365@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1363@t)))))))) (set! jZ2847@jZd58@guard-macro jZd58@guard-macro) (set! jZd5a@define-enumeration-macro (lambda (jZ13dd@stx) (let ((jZ13e0@set? '#f) (jZ13e2@remove-dups '#f)) (begin (set! jZ13e0@set? (lambda (jZ13f9@x) (or (null? jZ13f9@x) (and (not (memq (car jZ13f9@x) (cdr jZ13f9@x))) (jZ13e0@set? (cdr jZ13f9@x)))))) (set! jZ13e2@remove-dups (lambda (jZ13f7@ls) (if (null? jZ13f7@ls) '() (cons (car jZ13f7@ls) (jZ13e2@remove-dups (remq (car jZ13f7@ls) (cdr jZ13f7@ls))))))) (let ((jZ13e3@t jZ13dd@stx)) (let ((jZ13e5@ls/false (jZd8a@syntax-dispatch jZ13e3@t '(_ any each-any any)))) (if (and jZ13e5@ls/false (apply (lambda (jZ13e7@name jZ13e8@id* jZ13e9@maker) (and (jZb83@id? jZ13e7@name) (jZb83@id? jZ13e9@maker) (for-all jZb83@id? jZ13e8@id*))) jZ13e5@ls/false)) (apply (lambda (jZ13ed@name jZ13ee@id* jZ13ef@maker) (let ((jZ13f3@name* (jZ13e2@remove-dups (jZe70@syntax->datum jZ13ee@id*))) (jZ13f4@mk (gensym))) (jZd40@bless (list 'begin (list 'define jZ13f4@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote jZ13f3@name*)))) (list 'define-syntax jZ13ed@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote jZ13f3@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote jZ13ed@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax jZ13ef@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote jZ13ef@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote jZ13f3@name*)) (cons 'syntax-violation (cons (list 'quote jZ13ef@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons jZ13f4@mk '('(n* ...))))))))))))) jZ13e5@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ13e3@t)))))))) (set! jZ2848@jZd5a@define-enumeration-macro jZd5a@define-enumeration-macro) (set! jZd5c@time-macro (lambda (jZ13fb@stx) (let ((jZ13fd@t jZ13fb@stx)) (let ((jZ13ff@ls/false (jZd8a@syntax-dispatch jZ13fd@t '(_ any)))) (if jZ13ff@ls/false (apply (lambda (jZ1401@expr) (jZd40@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() jZ1401@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) jZ13ff@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ13fd@t)))))) (set! jZ2849@jZd5c@time-macro jZd5c@time-macro) (set! jZd5e@delay-macro (lambda (jZ1403@stx) (let ((jZ1405@t jZ1403@stx)) (let ((jZ1407@ls/false (jZd8a@syntax-dispatch jZ1405@t '(_ any)))) (if jZ1407@ls/false (apply (lambda (jZ1409@expr) (jZd40@bless (list 'make-promise (list 'lambda '() jZ1409@expr)))) jZ1407@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1405@t)))))) (set! jZ284a@jZd5e@delay-macro jZd5e@delay-macro) (set! jZd60@assert-macro (lambda (jZ140b@stx) (let ((jZ140d@t jZ140b@stx)) (let ((jZ140f@ls/false (jZd8a@syntax-dispatch jZ140d@t '(_ any)))) (if jZ140f@ls/false (apply (lambda (jZ1411@expr) (let ((jZ1413@pos (or (jZe62@expression-position jZ140b@stx) (jZe62@expression-position jZ1411@expr)))) (jZd40@bless (list 'let (list (list 'x jZ1411@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote jZ1411@expr) (list 'quote jZ1413@pos))))))) jZ140f@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ140d@t)))))) (set! jZ284b@jZd60@assert-macro jZd60@assert-macro) (set! jZd62@endianness-macro (lambda (jZ1415@stx) (let ((jZ1417@t jZ1415@stx)) (let ((jZ1419@ls/false (jZd8a@syntax-dispatch jZ1417@t '(_ any)))) (if jZ1419@ls/false (apply (lambda (jZ141b@e) (let ((jZ141d@t (jZe70@syntax->datum jZ141b@e))) (if (memv jZ141d@t '(little)) (jZd40@bless ''little) (if (memv jZ141d@t '(big)) (jZd40@bless ''big) (jZe6a@syntax-violation '#f '"endianness must be big or little" jZ1415@stx))))) jZ1419@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1417@t)))))) (set! jZ284c@jZd62@endianness-macro jZd62@endianness-macro) (set! jZd64@identifier-syntax-macro (lambda (jZ141f@stx) (let ((jZ1421@t jZ141f@stx)) (let ((jZ1423@ls/false (jZd8a@syntax-dispatch jZ1421@t '(_ any)))) (if jZ1423@ls/false (apply (lambda (jZ1425@expr) (jZd40@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax jZ1425@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax jZ1425@expr) '((syntax (e* ...)))))))))) jZ1423@ls/false) (let ((jZ1427@t jZ1421@t)) (let ((jZ1429@ls/false (jZd8a@syntax-dispatch jZ1427@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and jZ1429@ls/false (apply (lambda (jZ142b@id1 jZ142c@expr1 jZ142d@id2 jZ142e@expr2 jZ142f@expr3) (and (jZb83@id? jZ142b@id1) (jZb83@id? jZ142d@id2) (jZb83@id? jZ142e@expr2))) jZ1429@ls/false)) (apply (lambda (jZ1435@id1 jZ1436@expr1 jZ1437@id2 jZ1438@expr2 jZ1439@expr3) (jZd40@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax jZ1436@expr1)) (list (list 'set! 'id jZ1438@expr2) (list 'syntax jZ1439@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons jZ1436@expr1 '(e* ...))))))))) jZ1429@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1427@t))))))))) (set! jZ284d@jZd64@identifier-syntax-macro jZd64@identifier-syntax-macro) (set! jZd66@do-macro (lambda (jZ143f@stx) (let ((jZ1442@bind '#f)) (begin (set! jZ1442@bind (lambda (jZ1459@x) (let ((jZ145b@t jZ1459@x)) (let ((jZ145d@ls/false (jZd8a@syntax-dispatch jZ145b@t '(any any)))) (if jZ145d@ls/false (apply (lambda (jZ145f@x jZ1460@init) (list jZ145f@x jZ1460@init jZ145f@x)) jZ145d@ls/false) (let ((jZ1463@t jZ145b@t)) (let ((jZ1465@ls/false (jZd8a@syntax-dispatch jZ1463@t '(any any any)))) (if jZ1465@ls/false (apply (lambda (jZ1467@x jZ1468@init jZ1469@step) (list jZ1467@x jZ1468@init jZ1469@step)) jZ1465@ls/false) (let ((jZ146d@t jZ1463@t)) (let ((jZ146f@ls/false (jZd8a@syntax-dispatch jZ146d@t '_))) (if jZ146f@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid binding" jZ143f@stx)) jZ146f@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ146d@t)))))))))))) (let ((jZ1443@t jZ143f@stx)) (let ((jZ1445@ls/false (jZd8a@syntax-dispatch jZ1443@t '(_ each-any (any . each-any) . each-any)))) (if jZ1445@ls/false (apply (lambda (jZ1447@binding* jZ1448@test jZ1449@expr* jZ144a@command*) (let ((jZ144f@t (map jZ1442@bind jZ1447@binding*))) (let ((jZ1451@ls/false (jZd8a@syntax-dispatch jZ144f@t '#(each (any any any))))) (if jZ1451@ls/false (apply (lambda (jZ1453@x* jZ1454@init* jZ1455@step*) (if (jZb8b@valid-bound-ids? jZ1453@x*) (jZd40@bless (list 'letrec (list (list 'loop (list 'lambda jZ1453@x* (list 'if jZ1448@test (cons 'begin (cons '(if #f #f) jZ1449@expr*)) (cons 'begin (append jZ144a@command* (list (cons 'loop jZ1455@step*)))))))) (cons 'loop jZ1454@init*))) (jZe6a@syntax-violation '#f '"invalid bindings" jZ143f@stx))) jZ1451@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ144f@t))))) jZ1445@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1443@t)))))))) (set! jZ284e@jZd66@do-macro jZd66@do-macro) (set! jZd68@let*-macro (lambda (jZ1471@stx) (let ((jZ1473@t jZ1471@stx)) (let ((jZ1475@ls/false (jZd8a@syntax-dispatch jZ1473@t '(_ #(each (any any)) any . each-any)))) (if (and jZ1475@ls/false (apply (lambda (jZ1477@lhs* jZ1478@rhs* jZ1479@b jZ147a@b*) (for-all jZb83@id? jZ1477@lhs*)) jZ1475@ls/false)) (apply (lambda (jZ147f@lhs* jZ1480@rhs* jZ1481@b jZ1482@b*) (jZd40@bless (let jZ1489@f ((jZ1487@x* (map list jZ147f@lhs* jZ1480@rhs*))) (if (null? jZ1487@x*) (cons 'let (cons '() (cons jZ1481@b jZ1482@b*))) (list 'let (list (car jZ1487@x*)) (jZ1489@f (cdr jZ1487@x*))))))) jZ1475@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1473@t)))))) (set! jZ284f@jZd68@let*-macro jZd68@let*-macro) (set! jZd6a@or-macro (lambda (jZ148b@stx) (let ((jZ148d@t jZ148b@stx)) (let ((jZ148f@ls/false (jZd8a@syntax-dispatch jZ148d@t '(_)))) (if jZ148f@ls/false (apply (lambda () '#f) jZ148f@ls/false) (let ((jZ1491@t jZ148d@t)) (let ((jZ1493@ls/false (jZd8a@syntax-dispatch jZ1491@t '(_ any . each-any)))) (if jZ1493@ls/false (apply (lambda (jZ1495@e jZ1496@e*) (jZd40@bless (let jZ149d@f ((jZ1499@e jZ1495@e) (jZ149a@e* jZ1496@e*)) (if (null? jZ149a@e*) (list 'begin '#f jZ1499@e) (list 'let (list (list 't jZ1499@e)) (list 'if 't 't (jZ149d@f (car jZ149a@e*) (cdr jZ149a@e*)))))))) jZ1493@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1491@t))))))))) (set! jZ2850@jZd6a@or-macro jZd6a@or-macro) (set! jZd6c@and-macro (lambda (jZ149f@stx) (let ((jZ14a1@t jZ149f@stx)) (let ((jZ14a3@ls/false (jZd8a@syntax-dispatch jZ14a1@t '(_)))) (if jZ14a3@ls/false (apply (lambda () '#t) jZ14a3@ls/false) (let ((jZ14a5@t jZ14a1@t)) (let ((jZ14a7@ls/false (jZd8a@syntax-dispatch jZ14a5@t '(_ any . each-any)))) (if jZ14a7@ls/false (apply (lambda (jZ14a9@e jZ14aa@e*) (jZd40@bless (let jZ14b1@f ((jZ14ad@e jZ14a9@e) (jZ14ae@e* jZ14aa@e*)) (if (null? jZ14ae@e*) (list 'begin '#f jZ14ad@e) (cons 'if (cons jZ14ad@e (cons (jZ14b1@f (car jZ14ae@e*) (cdr jZ14ae@e*)) '(#f)))))))) jZ14a7@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ14a5@t))))))))) (set! jZ2851@jZd6c@and-macro jZd6c@and-macro) (set! jZd6e@cond-macro (lambda (jZ14b3@stx) (let ((jZ14b5@t jZ14b3@stx)) (let ((jZ14b7@ls/false (jZd8a@syntax-dispatch jZ14b5@t '(_ any . each-any)))) (if jZ14b7@ls/false (apply (lambda (jZ14b9@cls jZ14ba@cls*) (jZd40@bless (let jZ14c1@f ((jZ14bd@cls jZ14b9@cls) (jZ14be@cls* jZ14ba@cls*)) (if (null? jZ14be@cls*) (let ((jZ14c3@t jZ14bd@cls)) (let ((jZ14c5@ls/false (jZd8a@syntax-dispatch jZ14c3@t '(#(scheme-id else) any . each-any)))) (if jZ14c5@ls/false (apply (lambda (jZ14c7@e jZ14c8@e*) (cons 'begin (cons jZ14c7@e jZ14c8@e*))) jZ14c5@ls/false) (let ((jZ14cb@t jZ14c3@t)) (let ((jZ14cd@ls/false (jZd8a@syntax-dispatch jZ14cb@t '(any #(scheme-id =>) any)))) (if jZ14cd@ls/false (apply (lambda (jZ14cf@e jZ14d0@p) (list 'let (list (list 't jZ14cf@e)) (list 'if 't (cons jZ14d0@p '(t))))) jZ14cd@ls/false) (let ((jZ14d3@t jZ14cb@t)) (let ((jZ14d5@ls/false (jZd8a@syntax-dispatch jZ14d3@t '(any)))) (if jZ14d5@ls/false (apply (lambda (jZ14d7@e) (cons 'or (cons jZ14d7@e '((if #f #f))))) jZ14d5@ls/false) (let ((jZ14d9@t jZ14d3@t)) (let ((jZ14db@ls/false (jZd8a@syntax-dispatch jZ14d9@t '(any . each-any)))) (if jZ14db@ls/false (apply (lambda (jZ14dd@e jZ14de@e*) (list 'if jZ14dd@e (cons 'begin jZ14de@e*))) jZ14db@ls/false) (let ((jZ14e1@t jZ14d9@t)) (let ((jZ14e3@ls/false (jZd8a@syntax-dispatch jZ14e1@t '_))) (if jZ14e3@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid last clause" jZ14b3@stx)) jZ14e3@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ14e1@t)))))))))))))))) (let ((jZ14e5@t jZ14bd@cls)) (let ((jZ14e7@ls/false (jZd8a@syntax-dispatch jZ14e5@t '(#(scheme-id else) any . each-any)))) (if jZ14e7@ls/false (apply (lambda (jZ14e9@e jZ14ea@e*) (jZe6a@syntax-violation '#f '"incorrect position of keyword else" jZ14b3@stx)) jZ14e7@ls/false) (let ((jZ14ed@t jZ14e5@t)) (let ((jZ14ef@ls/false (jZd8a@syntax-dispatch jZ14ed@t '(any #(scheme-id =>) any)))) (if jZ14ef@ls/false (apply (lambda (jZ14f1@e jZ14f2@p) (list 'let (list (list 't jZ14f1@e)) (list 'if 't (cons jZ14f2@p '(t)) (jZ14c1@f (car jZ14be@cls*) (cdr jZ14be@cls*))))) jZ14ef@ls/false) (let ((jZ14f5@t jZ14ed@t)) (let ((jZ14f7@ls/false (jZd8a@syntax-dispatch jZ14f5@t '(any)))) (if jZ14f7@ls/false (apply (lambda (jZ14f9@e) (list 'or jZ14f9@e (jZ14c1@f (car jZ14be@cls*) (cdr jZ14be@cls*)))) jZ14f7@ls/false) (let ((jZ14fb@t jZ14f5@t)) (let ((jZ14fd@ls/false (jZd8a@syntax-dispatch jZ14fb@t '(any . each-any)))) (if jZ14fd@ls/false (apply (lambda (jZ14ff@e jZ1500@e*) (list 'if jZ14ff@e (cons 'begin jZ1500@e*) (jZ14c1@f (car jZ14be@cls*) (cdr jZ14be@cls*)))) jZ14fd@ls/false) (let ((jZ1503@t jZ14fb@t)) (let ((jZ1505@ls/false (jZd8a@syntax-dispatch jZ1503@t '_))) (if jZ1505@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid last clause" jZ14b3@stx)) jZ1505@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1503@t)))))))))))))))))))) jZ14b7@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ14b5@t)))))) (set! jZ2852@jZd6e@cond-macro jZd6e@cond-macro) (set! jZd70@do-include (lambda (jZ1507@stx jZ1508@id jZ1509@filename) (let ((jZ150d@filename (jZb97@stx->datum jZ1509@filename))) (begin (if (not (and (string? jZ150d@filename) (jZb83@id? jZ1508@id))) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1507@stx) (void)) (cons (jZd40@bless 'begin) (with-input-from-file jZ150d@filename (lambda () (let jZ1511@f ((jZ150f@ls '())) (let ((jZ1513@x (jZ6ba@jZ58a@read-annotated))) (if (eof-object? jZ1513@x) (reverse jZ150f@ls) (jZ1511@f (cons (jZb63@datum->stx jZ1508@id jZ1513@x) jZ150f@ls)))))))))))) (set! jZ2853@jZd70@do-include jZd70@do-include) (set! jZd72@include-macro (lambda (jZ1515@e) (let ((jZ1517@t jZ1515@e)) (let ((jZ1519@ls/false (jZd8a@syntax-dispatch jZ1517@t '(any any)))) (if jZ1519@ls/false (apply (lambda (jZ151b@id jZ151c@filename) (jZd70@do-include jZ1515@e jZ151b@id jZ151c@filename)) jZ1519@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1517@t)))))) (set! jZ2854@jZd72@include-macro jZd72@include-macro) (set! jZd74@include-into-macro (lambda (jZ151f@e) (let ((jZ1521@t jZ151f@e)) (let ((jZ1523@ls/false (jZd8a@syntax-dispatch jZ1521@t '(_ any any)))) (if jZ1523@ls/false (apply (lambda (jZ1525@id jZ1526@filename) (jZd70@do-include jZ151f@e jZ1525@id jZ1526@filename)) jZ1523@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1521@t)))))) (set! jZ2855@jZd74@include-into-macro jZd74@include-into-macro) (set! jZd76@syntax-rules-macro (lambda (jZ1529@e) (let ((jZ152b@t jZ1529@e)) (let ((jZ152d@ls/false (jZd8a@syntax-dispatch jZ152b@t '(_ each-any . #(each (any any)))))) (if jZ152d@ls/false (apply (lambda (jZ152f@lits jZ1530@pat* jZ1531@tmp*) (begin (jZd90@verify-literals jZ152f@lits jZ1529@e) (jZd40@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons jZ152f@lits (map (lambda (jZ1535@pat jZ1536@tmp) (let ((jZ1539@t jZ1535@pat)) (let ((jZ153b@ls/false (jZd8a@syntax-dispatch jZ1539@t '(_ . any)))) (if jZ153b@ls/false (apply (lambda (jZ153d@rest) (list (cons 'g jZ153d@rest) (list 'syntax jZ1536@tmp))) jZ153b@ls/false) (let ((jZ153f@t jZ1539@t)) (let ((jZ1541@ls/false (jZd8a@syntax-dispatch jZ153f@t '_))) (if jZ1541@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid syntax-rules pattern" jZ1529@e jZ1535@pat)) jZ1541@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ153f@t)))))))) jZ1530@pat* jZ1531@tmp*)))))))) jZ152d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ152b@t)))))) (set! jZ2856@jZd76@syntax-rules-macro jZd76@syntax-rules-macro) (set! jZd78@quasiquote-macro (let ((jZ1544@datum '#f) (jZ1560@quasicons* '#f) (jZ1562@quasicons '#f) (jZ1564@quasiappend '#f) (jZ1566@quasivector '#f) (jZ1568@vquasi '#f) (jZ156a@quasi '#f)) (begin (set! jZ1544@datum (lambda (jZ1645@x) (list (jZd12@scheme-stx 'quote) (jZb6b@mkstx jZ1645@x '() '() '())))) (set! jZ1560@quasicons* (lambda (jZ163d@x jZ163e@y) (let jZ1643@f ((jZ1641@x jZ163d@x)) (if (null? jZ1641@x) jZ163e@y (jZ1562@quasicons (car jZ1641@x) (jZ1643@f (cdr jZ1641@x))))))) (set! jZ1562@quasicons (lambda (jZ1617@x jZ1618@y) (let ((jZ161b@t jZ1618@y)) (let ((jZ161d@ls/false (jZd8a@syntax-dispatch jZ161b@t '(#(scheme-id quote) any)))) (if jZ161d@ls/false (apply (lambda (jZ161f@dy) (let ((jZ1621@t jZ1617@x)) (let ((jZ1623@ls/false (jZd8a@syntax-dispatch jZ1621@t '(#(scheme-id quote) any)))) (if jZ1623@ls/false (apply (lambda (jZ1625@dx) (list (jZd12@scheme-stx 'quote) (cons jZ1625@dx jZ161f@dy))) jZ1623@ls/false) (let ((jZ1627@t jZ1621@t)) (let ((jZ1629@ls/false (jZd8a@syntax-dispatch jZ1627@t '_))) (if jZ1629@ls/false (apply (lambda () (let ((jZ162b@t jZ161f@dy)) (let ((jZ162d@ls/false (jZd8a@syntax-dispatch jZ162b@t '()))) (if jZ162d@ls/false (apply (lambda () (list (jZd12@scheme-stx 'list) jZ1617@x)) jZ162d@ls/false) (let ((jZ162f@t jZ162b@t)) (let ((jZ1631@ls/false (jZd8a@syntax-dispatch jZ162f@t '_))) (if jZ1631@ls/false (apply (lambda () (list (jZd12@scheme-stx 'cons) jZ1617@x jZ1618@y)) jZ1631@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ162f@t)))))))) jZ1629@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1627@t)))))))) jZ161d@ls/false) (let ((jZ1633@t jZ161b@t)) (let ((jZ1635@ls/false (jZd8a@syntax-dispatch jZ1633@t '(#(scheme-id list) . each-any)))) (if jZ1635@ls/false (apply (lambda (jZ1637@stuff) (cons* (jZd12@scheme-stx 'list) jZ1617@x jZ1637@stuff)) jZ1635@ls/false) (let ((jZ1639@t jZ1633@t)) (let ((jZ163b@ls/false (jZd8a@syntax-dispatch jZ1639@t '_))) (if jZ163b@ls/false (apply (lambda () (list (jZd12@scheme-stx 'cons) jZ1617@x jZ1618@y)) jZ163b@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1639@t)))))))))))) (set! jZ1564@quasiappend (lambda (jZ15fd@x jZ15fe@y) (let ((jZ1601@ls (let jZ1605@f ((jZ1603@x jZ15fd@x)) (if (null? jZ1603@x) (let ((jZ1607@t jZ15fe@y)) (let ((jZ1609@ls/false (jZd8a@syntax-dispatch jZ1607@t '(#(scheme-id quote) ())))) (if jZ1609@ls/false (apply (lambda () '()) jZ1609@ls/false) (let ((jZ160b@t jZ1607@t)) (let ((jZ160d@ls/false (jZd8a@syntax-dispatch jZ160b@t '_))) (if jZ160d@ls/false (apply (lambda () (list jZ15fe@y)) jZ160d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ160b@t))))))) (let ((jZ160f@t (car jZ1603@x))) (let ((jZ1611@ls/false (jZd8a@syntax-dispatch jZ160f@t '(#(scheme-id quote) ())))) (if jZ1611@ls/false (apply (lambda () (jZ1605@f (cdr jZ1603@x))) jZ1611@ls/false) (let ((jZ1613@t jZ160f@t)) (let ((jZ1615@ls/false (jZd8a@syntax-dispatch jZ1613@t '_))) (if jZ1615@ls/false (apply (lambda () (cons (car jZ1603@x) (jZ1605@f (cdr jZ1603@x)))) jZ1615@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1613@t))))))))))) (if (null? jZ1601@ls) (list (jZd12@scheme-stx 'quote) '()) (if (null? (cdr jZ1601@ls)) (car jZ1601@ls) (cons* (jZd12@scheme-stx 'append) jZ1601@ls)))))) (set! jZ1566@quasivector (lambda (jZ15cb@x) (let ((jZ15cd@pat-x jZ15cb@x)) (let ((jZ15cf@t jZ15cd@pat-x)) (let ((jZ15d1@ls/false (jZd8a@syntax-dispatch jZ15cf@t '(#(scheme-id quote) each-any)))) (if jZ15d1@ls/false (apply (lambda (jZ15d3@x*) (list (jZd12@scheme-stx 'quote) (list->vector jZ15d3@x*))) jZ15d1@ls/false) (let ((jZ15d5@t jZ15cf@t)) (let ((jZ15d7@ls/false (jZd8a@syntax-dispatch jZ15d5@t '_))) (if jZ15d7@ls/false (apply (lambda () (let jZ15df@f ((jZ15d9@x jZ15cb@x) (jZ15da@k (lambda (jZ15dd@ls) (cons* (jZd12@scheme-stx 'vector) jZ15dd@ls)))) (let ((jZ15e1@t jZ15d9@x)) (let ((jZ15e3@ls/false (jZd8a@syntax-dispatch jZ15e1@t '(#(scheme-id quote) each-any)))) (if jZ15e3@ls/false (apply (lambda (jZ15e5@x*) (jZ15da@k (map (lambda (jZ15e7@x) (list (jZd12@scheme-stx 'quote) jZ15e7@x)) jZ15e5@x*))) jZ15e3@ls/false) (let ((jZ15e9@t jZ15e1@t)) (let ((jZ15eb@ls/false (jZd8a@syntax-dispatch jZ15e9@t '(#(scheme-id list) . each-any)))) (if jZ15eb@ls/false (apply (lambda (jZ15ed@x*) (jZ15da@k jZ15ed@x*)) jZ15eb@ls/false) (let ((jZ15ef@t jZ15e9@t)) (let ((jZ15f1@ls/false (jZd8a@syntax-dispatch jZ15ef@t '(#(scheme-id cons) any any)))) (if jZ15f1@ls/false (apply (lambda (jZ15f3@x jZ15f4@y) (jZ15df@f jZ15f4@y (lambda (jZ15f7@ls) (jZ15da@k (cons jZ15f3@x jZ15f7@ls))))) jZ15f1@ls/false) (let ((jZ15f9@t jZ15ef@t)) (let ((jZ15fb@ls/false (jZd8a@syntax-dispatch jZ15f9@t '_))) (if jZ15fb@ls/false (apply (lambda () (list (jZd12@scheme-stx 'list->vector) jZ15cd@pat-x)) jZ15fb@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ15f9@t))))))))))))))) jZ15d7@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ15d5@t)))))))))) (set! jZ1568@vquasi (lambda (jZ15a9@p jZ15aa@lev) (let ((jZ15ad@t jZ15a9@p)) (let ((jZ15af@ls/false (jZd8a@syntax-dispatch jZ15ad@t '(any . any)))) (if jZ15af@ls/false (apply (lambda (jZ15b1@p jZ15b2@q) (let ((jZ15b5@t jZ15b1@p)) (let ((jZ15b7@ls/false (jZd8a@syntax-dispatch jZ15b5@t '(#(scheme-id unquote) . each-any)))) (if jZ15b7@ls/false (apply (lambda (jZ15b9@p) (if (= jZ15aa@lev '0) (jZ1560@quasicons* jZ15b9@p (jZ1568@vquasi jZ15b2@q jZ15aa@lev)) (jZ1562@quasicons (jZ1562@quasicons (jZ1544@datum 'unquote) (jZ156a@quasi jZ15b9@p (- jZ15aa@lev '1))) (jZ1568@vquasi jZ15b2@q jZ15aa@lev)))) jZ15b7@ls/false) (let ((jZ15bb@t jZ15b5@t)) (let ((jZ15bd@ls/false (jZd8a@syntax-dispatch jZ15bb@t '(#(scheme-id unquote-splicing) . each-any)))) (if jZ15bd@ls/false (apply (lambda (jZ15bf@p) (if (= jZ15aa@lev '0) (jZ1564@quasiappend jZ15bf@p (jZ1568@vquasi jZ15b2@q jZ15aa@lev)) (jZ1562@quasicons (jZ1562@quasicons (jZ1544@datum 'unquote-splicing) (jZ156a@quasi jZ15bf@p (- jZ15aa@lev '1))) (jZ1568@vquasi jZ15b2@q jZ15aa@lev)))) jZ15bd@ls/false) (let ((jZ15c1@t jZ15bb@t)) (let ((jZ15c3@ls/false (jZd8a@syntax-dispatch jZ15c1@t 'any))) (if jZ15c3@ls/false (apply (lambda (jZ15c5@p) (jZ1562@quasicons (jZ156a@quasi jZ15c5@p jZ15aa@lev) (jZ1568@vquasi jZ15b2@q jZ15aa@lev))) jZ15c3@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ15c1@t))))))))))) jZ15af@ls/false) (let ((jZ15c7@t jZ15ad@t)) (let ((jZ15c9@ls/false (jZd8a@syntax-dispatch jZ15c7@t '()))) (if jZ15c9@ls/false (apply (lambda () (list (jZd12@scheme-stx 'quote) '())) jZ15c9@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ15c7@t))))))))) (set! jZ156a@quasi (lambda (jZ1573@p jZ1574@lev) (let ((jZ1577@t jZ1573@p)) (let ((jZ1579@ls/false (jZd8a@syntax-dispatch jZ1577@t '(#(scheme-id unquote) any)))) (if jZ1579@ls/false (apply (lambda (jZ157b@p) (if (= jZ1574@lev '0) jZ157b@p (jZ1562@quasicons (jZ1544@datum 'unquote) (jZ156a@quasi (list jZ157b@p) (- jZ1574@lev '1))))) jZ1579@ls/false) (let ((jZ157d@t jZ1577@t)) (let ((jZ157f@ls/false (jZd8a@syntax-dispatch jZ157d@t '((#(scheme-id unquote) . each-any) . any)))) (if jZ157f@ls/false (apply (lambda (jZ1581@p jZ1582@q) (if (= jZ1574@lev '0) (jZ1560@quasicons* jZ1581@p (jZ156a@quasi jZ1582@q jZ1574@lev)) (jZ1562@quasicons (jZ1562@quasicons (jZ1544@datum 'unquote) (jZ156a@quasi jZ1581@p (- jZ1574@lev '1))) (jZ156a@quasi jZ1582@q jZ1574@lev)))) jZ157f@ls/false) (let ((jZ1585@t jZ157d@t)) (let ((jZ1587@ls/false (jZd8a@syntax-dispatch jZ1585@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if jZ1587@ls/false (apply (lambda (jZ1589@p jZ158a@q) (if (= jZ1574@lev '0) (jZ1564@quasiappend jZ1589@p (jZ156a@quasi jZ158a@q jZ1574@lev)) (jZ1562@quasicons (jZ1562@quasicons (jZ1544@datum 'unquote-splicing) (jZ156a@quasi jZ1589@p (- jZ1574@lev '1))) (jZ156a@quasi jZ158a@q jZ1574@lev)))) jZ1587@ls/false) (let ((jZ158d@t jZ1585@t)) (let ((jZ158f@ls/false (jZd8a@syntax-dispatch jZ158d@t '(#(scheme-id quasiquote) any)))) (if jZ158f@ls/false (apply (lambda (jZ1591@p) (jZ1562@quasicons (jZ1544@datum 'quasiquote) (jZ156a@quasi (list jZ1591@p) (+ jZ1574@lev '1)))) jZ158f@ls/false) (let ((jZ1593@t jZ158d@t)) (let ((jZ1595@ls/false (jZd8a@syntax-dispatch jZ1593@t '(any . any)))) (if jZ1595@ls/false (apply (lambda (jZ1597@p jZ1598@q) (jZ1562@quasicons (jZ156a@quasi jZ1597@p jZ1574@lev) (jZ156a@quasi jZ1598@q jZ1574@lev))) jZ1595@ls/false) (let ((jZ159b@t jZ1593@t)) (let ((jZ159d@ls/false (jZd8a@syntax-dispatch jZ159b@t '#(vector each-any)))) (if (and jZ159d@ls/false (apply (lambda (jZ159f@x) (not (jZb4f@stx? jZ159f@x))) jZ159d@ls/false)) (apply (lambda (jZ15a1@x) (jZ1566@quasivector (jZ1568@vquasi jZ15a1@x jZ1574@lev))) jZ159d@ls/false) (let ((jZ15a3@t jZ159b@t)) (let ((jZ15a5@ls/false (jZd8a@syntax-dispatch jZ15a3@t 'any))) (if jZ15a5@ls/false (apply (lambda (jZ15a7@p) (list (jZd12@scheme-stx 'quote) jZ15a7@p)) jZ15a5@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ15a3@t)))))))))))))))))))))))) (lambda (jZ156b@x) (let ((jZ156d@t jZ156b@x)) (let ((jZ156f@ls/false (jZd8a@syntax-dispatch jZ156d@t '(_ any)))) (if jZ156f@ls/false (apply (lambda (jZ1571@e) (jZ156a@quasi jZ1571@e '0)) jZ156f@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ156d@t)))))))) (set! jZ2857@jZd78@quasiquote-macro jZd78@quasiquote-macro) (set! jZd7a@quasisyntax-macro (let ((jZ1648@quasi '#f)) (begin (set! jZ1648@quasi (lambda (jZ1663@p jZ1664@lev) (let ((jZ1667@t jZ1663@p)) (let ((jZ1669@ls/false (jZd8a@syntax-dispatch jZ1667@t '(#(scheme-id unsyntax) any)))) (if jZ1669@ls/false (apply (lambda (jZ166b@p) (if (= jZ1664@lev '0) (let ((jZ166d@g (gensym))) (values (list jZ166d@g) (list jZ166b@p) jZ166d@g)) (call-with-values (lambda () (jZ1648@quasi jZ166b@p (- jZ1664@lev '1))) (lambda (jZ1675@jZ1670 jZ1676@jZ1672 jZ1677@jZ1674) (let ((jZ167b@p jZ1677@jZ1674) (jZ167c@rhs* jZ1676@jZ1672) (jZ167d@lhs* jZ1675@jZ1670)) (values jZ167d@lhs* jZ167c@rhs* (list 'unsyntax jZ167b@p))))))) jZ1669@ls/false) (let ((jZ1681@t jZ1667@t)) (let ((jZ1683@ls/false (jZd8a@syntax-dispatch jZ1681@t '#(scheme-id unsyntax)))) (if (and jZ1683@ls/false (apply (lambda () (= jZ1664@lev '0)) jZ1683@ls/false)) (apply (lambda () (jZe6a@syntax-violation '#f '"incorrect use of unsyntax" jZ1663@p)) jZ1683@ls/false) (let ((jZ1685@t jZ1681@t)) (let ((jZ1687@ls/false (jZd8a@syntax-dispatch jZ1685@t '((#(scheme-id unsyntax) . each-any) . any)))) (if jZ1687@ls/false (apply (lambda (jZ1689@p* jZ168a@q) (call-with-values (lambda () (jZ1648@quasi jZ168a@q jZ1664@lev)) (lambda (jZ1693@jZ168e jZ1694@jZ1690 jZ1695@jZ1692) (let ((jZ1699@q jZ1695@jZ1692) (jZ169a@rhs* jZ1694@jZ1690) (jZ169b@lhs* jZ1693@jZ168e)) (if (= jZ1664@lev '0) (let ((jZ169f@g* (map (lambda (jZ16a1@x) (gensym)) jZ1689@p*))) (values (append jZ169f@g* jZ169b@lhs*) (append jZ1689@p* jZ169a@rhs*) (append jZ169f@g* jZ1699@q))) (call-with-values (lambda () (jZ1648@quasi jZ1689@p* (- jZ1664@lev '1))) (lambda (jZ16a9@jZ16a4 jZ16aa@jZ16a6 jZ16ab@jZ16a8) (let ((jZ16af@p* jZ16ab@jZ16a8) (jZ16b0@rhs2* jZ16aa@jZ16a6) (jZ16b1@lhs2* jZ16a9@jZ16a4)) (values (append jZ16b1@lhs2* jZ169b@lhs*) (append jZ16b0@rhs2* jZ169a@rhs*) (cons (cons 'unsyntax jZ16af@p*) jZ1699@q)))))))))) jZ1687@ls/false) (let ((jZ16b5@t jZ1685@t)) (let ((jZ16b7@ls/false (jZd8a@syntax-dispatch jZ16b5@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if jZ16b7@ls/false (apply (lambda (jZ16b9@p* jZ16ba@q) (call-with-values (lambda () (jZ1648@quasi jZ16ba@q jZ1664@lev)) (lambda (jZ16c3@jZ16be jZ16c4@jZ16c0 jZ16c5@jZ16c2) (let ((jZ16c9@q jZ16c5@jZ16c2) (jZ16ca@rhs* jZ16c4@jZ16c0) (jZ16cb@lhs* jZ16c3@jZ16be)) (if (= jZ1664@lev '0) (let ((jZ16cf@g* (map (lambda (jZ16d1@x) (gensym)) jZ16b9@p*))) (values (append (map (lambda (jZ16d3@g) (cons jZ16d3@g '(...))) jZ16cf@g*) jZ16cb@lhs*) (append jZ16b9@p* jZ16ca@rhs*) (append (apply append (map (lambda (jZ16d5@g) (cons jZ16d5@g '(...))) jZ16cf@g*)) jZ16c9@q))) (call-with-values (lambda () (jZ1648@quasi jZ16b9@p* (- jZ1664@lev '1))) (lambda (jZ16dd@jZ16d8 jZ16de@jZ16da jZ16df@jZ16dc) (let ((jZ16e3@p* jZ16df@jZ16dc) (jZ16e4@rhs2* jZ16de@jZ16da) (jZ16e5@lhs2* jZ16dd@jZ16d8)) (values (append jZ16e5@lhs2* jZ16cb@lhs*) (append jZ16e4@rhs2* jZ16ca@rhs*) (cons (cons 'unsyntax-splicing jZ16e3@p*) jZ16c9@q)))))))))) jZ16b7@ls/false) (let ((jZ16e9@t jZ16b5@t)) (let ((jZ16eb@ls/false (jZd8a@syntax-dispatch jZ16e9@t '#(scheme-id unsyntax-splicing)))) (if (and jZ16eb@ls/false (apply (lambda () (= jZ1664@lev '0)) jZ16eb@ls/false)) (apply (lambda () (jZe6a@syntax-violation '#f '"incorrect use of unsyntax-splicing" jZ1663@p)) jZ16eb@ls/false) (let ((jZ16ed@t jZ16e9@t)) (let ((jZ16ef@ls/false (jZd8a@syntax-dispatch jZ16ed@t '(#(scheme-id quasisyntax) any)))) (if jZ16ef@ls/false (apply (lambda (jZ16f1@p) (call-with-values (lambda () (jZ1648@quasi jZ16f1@p (+ jZ1664@lev '1))) (lambda (jZ16f9@jZ16f4 jZ16fa@jZ16f6 jZ16fb@jZ16f8) (let ((jZ16ff@p jZ16fb@jZ16f8) (jZ1700@rhs* jZ16fa@jZ16f6) (jZ1701@lhs* jZ16f9@jZ16f4)) (values jZ1701@lhs* jZ1700@rhs* (list 'quasisyntax jZ16ff@p)))))) jZ16ef@ls/false) (let ((jZ1705@t jZ16ed@t)) (let ((jZ1707@ls/false (jZd8a@syntax-dispatch jZ1705@t '(any . any)))) (if jZ1707@ls/false (apply (lambda (jZ1709@p jZ170a@q) (call-with-values (lambda () (jZ1648@quasi jZ1709@p jZ1664@lev)) (lambda (jZ1719@jZ170e jZ171a@jZ1710 jZ171b@jZ1712) (call-with-values (lambda () (jZ1648@quasi jZ170a@q jZ1664@lev)) (lambda (jZ171f@jZ1714 jZ1720@jZ1716 jZ1721@jZ1718) (let ((jZ1725@q jZ1721@jZ1718) (jZ1726@rhs2* jZ1720@jZ1716) (jZ1727@lhs2* jZ171f@jZ1714) (jZ1728@p jZ171b@jZ1712) (jZ1729@rhs* jZ171a@jZ1710) (jZ172a@lhs* jZ1719@jZ170e)) (values (append jZ1727@lhs2* jZ172a@lhs*) (append jZ1726@rhs2* jZ1729@rhs*) (cons jZ1728@p jZ1725@q)))))))) jZ1707@ls/false) (let ((jZ1731@t jZ1705@t)) (let ((jZ1733@ls/false (jZd8a@syntax-dispatch jZ1731@t '#(vector each-any)))) (if jZ1733@ls/false (apply (lambda (jZ1735@x*) (call-with-values (lambda () (jZ1648@quasi jZ1735@x* jZ1664@lev)) (lambda (jZ173d@jZ1738 jZ173e@jZ173a jZ173f@jZ173c) (let ((jZ1743@x* jZ173f@jZ173c) (jZ1744@rhs* jZ173e@jZ173a) (jZ1745@lhs* jZ173d@jZ1738)) (values jZ1745@lhs* jZ1744@rhs* (list->vector jZ1743@x*)))))) jZ1733@ls/false) (let ((jZ1749@t jZ1731@t)) (let ((jZ174b@ls/false (jZd8a@syntax-dispatch jZ1749@t '_))) (if jZ174b@ls/false (apply (lambda () (values '() '() jZ1663@p)) jZ174b@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1749@t)))))))))))))))))))))))))))))) (lambda (jZ1649@x) (let ((jZ164b@t jZ1649@x)) (let ((jZ164d@ls/false (jZd8a@syntax-dispatch jZ164b@t '(_ any)))) (if jZ164d@ls/false (apply (lambda (jZ164f@e) (call-with-values (lambda () (jZ1648@quasi jZ164f@e '0)) (lambda (jZ1657@jZ1652 jZ1658@jZ1654 jZ1659@jZ1656) (let ((jZ165d@v jZ1659@jZ1656) (jZ165e@rhs* jZ1658@jZ1654) (jZ165f@lhs* jZ1657@jZ1652)) (jZd40@bless (list 'syntax-case (cons 'list jZ165e@rhs*) '() (list jZ165f@lhs* (list 'syntax jZ165d@v)))))))) jZ164d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ164b@t)))))))) (set! jZ2858@jZd7a@quasisyntax-macro jZd7a@quasisyntax-macro) (set! jZd7c@define-struct-macro (lambda (jZ174d@stx) (jZe6a@syntax-violation '#f '"define-struct not supported" jZ174d@stx))) (set! jZ2859@jZd7c@define-struct-macro jZd7c@define-struct-macro) (set! jZd7e@define-record-type-macro (lambda (jZ174f@x) (let ((jZ1752@id '#f) (jZ1754@get-record-name '#f) (jZ1756@get-record-constructor-name '#f) (jZ1758@get-record-predicate-name '#f) (jZ175a@get-clause '#f) (jZ175c@foo-rtd-code '#f) (jZ175e@parent-rtd-code '#f) (jZ1760@parent-rcd-code '#f) (jZ1762@foo-rcd-code '#f) (jZ1764@get-protocol-code '#f) (jZ1766@get-fields '#f) (jZ1768@get-mutator-indices '#f) (jZ176a@get-mutators '#f) (jZ176c@get-accessors '#f) (jZ176e@enumerate '#f) (jZ1770@do-define-record '#f) (jZ1772@verify-clauses '#f)) (begin (set! jZ1752@id (lambda (jZ1945@ctxt . jZ1947@str*) (jZe6e@datum->syntax jZ1945@ctxt (string->symbol (apply string-append (map (lambda (jZ1949@x) (if (symbol? jZ1949@x) (symbol->string jZ1949@x) (if (string? jZ1949@x) jZ1949@x (assertion-violation 'define-record-type '"BUG")))) jZ1947@str*)))))) (set! jZ1754@get-record-name (lambda (jZ1933@spec) (let ((jZ1935@t jZ1933@spec)) (let ((jZ1937@ls/false (jZd8a@syntax-dispatch jZ1935@t '(any any any)))) (if jZ1937@ls/false (apply (lambda (jZ1939@foo jZ193a@make-foo jZ193b@foo?) jZ1939@foo) jZ1937@ls/false) (let ((jZ193f@t jZ1935@t)) (let ((jZ1941@ls/false (jZd8a@syntax-dispatch jZ193f@t 'any))) (if jZ1941@ls/false (apply (lambda (jZ1943@foo) jZ1943@foo) jZ1941@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ193f@t))))))))) (set! jZ1756@get-record-constructor-name (lambda (jZ191f@spec) (let ((jZ1921@t jZ191f@spec)) (let ((jZ1923@ls/false (jZd8a@syntax-dispatch jZ1921@t '(any any any)))) (if jZ1923@ls/false (apply (lambda (jZ1925@foo jZ1926@make-foo jZ1927@foo?) jZ1926@make-foo) jZ1923@ls/false) (let ((jZ192b@t jZ1921@t)) (let ((jZ192d@ls/false (jZd8a@syntax-dispatch jZ192b@t 'any))) (if (and jZ192d@ls/false (apply (lambda (jZ192f@foo) (jZb83@id? jZ192f@foo)) jZ192d@ls/false)) (apply (lambda (jZ1931@foo) (jZ1752@id jZ1931@foo '"make-" (jZb97@stx->datum jZ1931@foo))) jZ192d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ192b@t))))))))) (set! jZ1758@get-record-predicate-name (lambda (jZ190b@spec) (let ((jZ190d@t jZ190b@spec)) (let ((jZ190f@ls/false (jZd8a@syntax-dispatch jZ190d@t '(any any any)))) (if jZ190f@ls/false (apply (lambda (jZ1911@foo jZ1912@make-foo jZ1913@foo?) jZ1913@foo?) jZ190f@ls/false) (let ((jZ1917@t jZ190d@t)) (let ((jZ1919@ls/false (jZd8a@syntax-dispatch jZ1917@t 'any))) (if (and jZ1919@ls/false (apply (lambda (jZ191b@foo) (jZb83@id? jZ191b@foo)) jZ1919@ls/false)) (apply (lambda (jZ191d@foo) (jZ1752@id jZ191d@foo (jZb97@stx->datum jZ191d@foo) '"?")) jZ1919@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1917@t))))))))) (set! jZ175a@get-clause (lambda (jZ18f9@id jZ18fa@ls) (let ((jZ18fd@t jZ18fa@ls)) (let ((jZ18ff@ls/false (jZd8a@syntax-dispatch jZ18fd@t '()))) (if jZ18ff@ls/false (apply (lambda () '#f) jZ18ff@ls/false) (let ((jZ1901@t jZ18fd@t)) (let ((jZ1903@ls/false (jZd8a@syntax-dispatch jZ1901@t '((any . any) . any)))) (if jZ1903@ls/false (apply (lambda (jZ1905@x jZ1906@rest jZ1907@ls) (if (jZb89@free-id=? (jZd40@bless jZ18f9@id) jZ1905@x) (cons jZ1905@x jZ1906@rest) (jZ175a@get-clause jZ18f9@id jZ1907@ls))) jZ1903@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1901@t))))))))) (set! jZ175c@foo-rtd-code (lambda (jZ18a7@name jZ18a8@clause* jZ18a9@parent-rtd-code) (let ((jZ18ae@convert-field-spec* '#f)) (begin (set! jZ18ae@convert-field-spec* (lambda (jZ18df@ls) (list->vector (map (lambda (jZ18e1@x) (let ((jZ18e3@t jZ18e1@x)) (let ((jZ18e5@ls/false (jZd8a@syntax-dispatch jZ18e3@t '(#(scheme-id mutable) any . any)))) (if jZ18e5@ls/false (apply (lambda (jZ18e7@name jZ18e8@rest) (list 'mutable jZ18e7@name)) jZ18e5@ls/false) (let ((jZ18eb@t jZ18e3@t)) (let ((jZ18ed@ls/false (jZd8a@syntax-dispatch jZ18eb@t '(#(scheme-id immutable) any . any)))) (if jZ18ed@ls/false (apply (lambda (jZ18ef@name jZ18f0@rest) (list 'immutable jZ18ef@name)) jZ18ed@ls/false) (let ((jZ18f3@t jZ18eb@t)) (let ((jZ18f5@ls/false (jZd8a@syntax-dispatch jZ18f3@t 'any))) (if jZ18f5@ls/false (apply (lambda (jZ18f7@name) (list 'immutable jZ18f7@name)) jZ18f5@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ18f3@t))))))))))) jZ18df@ls)))) (let ((jZ18af@uid-code (let ((jZ18b7@t (jZ175a@get-clause 'nongenerative jZ18a8@clause*))) (let ((jZ18b9@ls/false (jZd8a@syntax-dispatch jZ18b7@t '(_)))) (if jZ18b9@ls/false (apply (lambda () (list 'quote (gensym))) jZ18b9@ls/false) (let ((jZ18bb@t jZ18b7@t)) (let ((jZ18bd@ls/false (jZd8a@syntax-dispatch jZ18bb@t '(_ any)))) (if jZ18bd@ls/false (apply (lambda (jZ18bf@uid) (list 'quote jZ18bf@uid)) jZ18bd@ls/false) (let ((jZ18c1@t jZ18bb@t)) (let ((jZ18c3@ls/false (jZd8a@syntax-dispatch jZ18c1@t '_))) (if jZ18c3@ls/false (apply (lambda () '#f) jZ18c3@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ18c1@t))))))))))) (jZ18b0@sealed? (let ((jZ18c5@t (jZ175a@get-clause 'sealed jZ18a8@clause*))) (let ((jZ18c7@ls/false (jZd8a@syntax-dispatch jZ18c5@t '(_ #(atom #t))))) (if jZ18c7@ls/false (apply (lambda () '#t) jZ18c7@ls/false) (let ((jZ18c9@t jZ18c5@t)) (let ((jZ18cb@ls/false (jZd8a@syntax-dispatch jZ18c9@t '_))) (if jZ18cb@ls/false (apply (lambda () '#f) jZ18cb@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ18c9@t)))))))) (jZ18b1@opaque? (let ((jZ18cd@t (jZ175a@get-clause 'opaque jZ18a8@clause*))) (let ((jZ18cf@ls/false (jZd8a@syntax-dispatch jZ18cd@t '(_ #(atom #t))))) (if jZ18cf@ls/false (apply (lambda () '#t) jZ18cf@ls/false) (let ((jZ18d1@t jZ18cd@t)) (let ((jZ18d3@ls/false (jZd8a@syntax-dispatch jZ18d1@t '_))) (if jZ18d3@ls/false (apply (lambda () '#f) jZ18d3@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ18d1@t)))))))) (jZ18b2@fields (let ((jZ18d5@t (jZ175a@get-clause 'fields jZ18a8@clause*))) (let ((jZ18d7@ls/false (jZd8a@syntax-dispatch jZ18d5@t '(_ . each-any)))) (if jZ18d7@ls/false (apply (lambda (jZ18d9@field-spec*) (list 'quote (jZ18ae@convert-field-spec* jZ18d9@field-spec*))) jZ18d7@ls/false) (let ((jZ18db@t jZ18d5@t)) (let ((jZ18dd@ls/false (jZd8a@syntax-dispatch jZ18db@t '_))) (if jZ18dd@ls/false (apply (lambda () ''#()) jZ18dd@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ18db@t))))))))) (jZd40@bless (list 'make-record-type-descriptor (list 'quote jZ18a7@name) jZ18a9@parent-rtd-code jZ18af@uid-code jZ18b0@sealed? jZ18b1@opaque? jZ18b2@fields))))))) (set! jZ175e@parent-rtd-code (lambda (jZ188f@clause*) (let ((jZ1891@t (jZ175a@get-clause 'parent jZ188f@clause*))) (let ((jZ1893@ls/false (jZd8a@syntax-dispatch jZ1891@t '(_ any)))) (if jZ1893@ls/false (apply (lambda (jZ1895@name) (list 'record-type-descriptor jZ1895@name)) jZ1893@ls/false) (let ((jZ1897@t jZ1891@t)) (let ((jZ1899@ls/false (jZd8a@syntax-dispatch jZ1897@t '#(atom #f)))) (if jZ1899@ls/false (apply (lambda () (let ((jZ189b@t (jZ175a@get-clause 'parent-rtd jZ188f@clause*))) (let ((jZ189d@ls/false (jZd8a@syntax-dispatch jZ189b@t '(_ any any)))) (if jZ189d@ls/false (apply (lambda (jZ189f@rtd jZ18a0@rcd) jZ189f@rtd) jZ189d@ls/false) (let ((jZ18a3@t jZ189b@t)) (let ((jZ18a5@ls/false (jZd8a@syntax-dispatch jZ18a3@t '#(atom #f)))) (if jZ18a5@ls/false (apply (lambda () '#f) jZ18a5@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ18a3@t)))))))) jZ1899@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1897@t))))))))) (set! jZ1760@parent-rcd-code (lambda (jZ1877@clause*) (let ((jZ1879@t (jZ175a@get-clause 'parent jZ1877@clause*))) (let ((jZ187b@ls/false (jZd8a@syntax-dispatch jZ1879@t '(_ any)))) (if jZ187b@ls/false (apply (lambda (jZ187d@name) (list 'record-constructor-descriptor jZ187d@name)) jZ187b@ls/false) (let ((jZ187f@t jZ1879@t)) (let ((jZ1881@ls/false (jZd8a@syntax-dispatch jZ187f@t '#(atom #f)))) (if jZ1881@ls/false (apply (lambda () (let ((jZ1883@t (jZ175a@get-clause 'parent-rtd jZ1877@clause*))) (let ((jZ1885@ls/false (jZd8a@syntax-dispatch jZ1883@t '(_ any any)))) (if jZ1885@ls/false (apply (lambda (jZ1887@rtd jZ1888@rcd) jZ1888@rcd) jZ1885@ls/false) (let ((jZ188b@t jZ1883@t)) (let ((jZ188d@ls/false (jZd8a@syntax-dispatch jZ188b@t '#(atom #f)))) (if jZ188d@ls/false (apply (lambda () '#f) jZ188d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ188b@t)))))))) jZ1881@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ187f@t))))))))) (set! jZ1762@foo-rcd-code (lambda (jZ186f@clause* jZ1870@foo-rtd jZ1871@protocol jZ1872@parent-rcd-code) (list 'make-record-constructor-descriptor jZ1870@foo-rtd jZ1872@parent-rcd-code jZ1871@protocol))) (set! jZ1764@get-protocol-code (lambda (jZ1863@clause*) (let ((jZ1865@t (jZ175a@get-clause 'protocol jZ1863@clause*))) (let ((jZ1867@ls/false (jZd8a@syntax-dispatch jZ1865@t '(_ any)))) (if jZ1867@ls/false (apply (lambda (jZ1869@expr) jZ1869@expr) jZ1867@ls/false) (let ((jZ186b@t jZ1865@t)) (let ((jZ186d@ls/false (jZd8a@syntax-dispatch jZ186b@t '_))) (if jZ186d@ls/false (apply (lambda () '#f) jZ186d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ186b@t))))))))) (set! jZ1766@get-fields (lambda (jZ1851@clause*) (let ((jZ1853@t jZ1851@clause*)) (let ((jZ1855@ls/false (jZd8a@syntax-dispatch jZ1853@t '()))) (if jZ1855@ls/false (apply (lambda () '()) jZ1855@ls/false) (let ((jZ1857@t jZ1853@t)) (let ((jZ1859@ls/false (jZd8a@syntax-dispatch jZ1857@t '((#(scheme-id fields) . each-any) . _)))) (if jZ1859@ls/false (apply (lambda (jZ185b@f*) jZ185b@f*) jZ1859@ls/false) (let ((jZ185d@t jZ1857@t)) (let ((jZ185f@ls/false (jZd8a@syntax-dispatch jZ185d@t '(_ . any)))) (if jZ185f@ls/false (apply (lambda (jZ1861@rest) (jZ1766@get-fields jZ1861@rest)) jZ185f@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ185d@t)))))))))))) (set! jZ1768@get-mutator-indices (lambda (jZ1839@fields) (let jZ183f@f ((jZ183b@fields jZ1839@fields) (jZ183c@i '0)) (let ((jZ1841@t jZ183b@fields)) (let ((jZ1843@ls/false (jZd8a@syntax-dispatch jZ1841@t '()))) (if jZ1843@ls/false (apply (lambda () '()) jZ1843@ls/false) (let ((jZ1845@t jZ1841@t)) (let ((jZ1847@ls/false (jZd8a@syntax-dispatch jZ1845@t '((#(scheme-id mutable) . _) . any)))) (if jZ1847@ls/false (apply (lambda (jZ1849@rest) (cons jZ183c@i (jZ183f@f jZ1849@rest (+ jZ183c@i '1)))) jZ1847@ls/false) (let ((jZ184b@t jZ1845@t)) (let ((jZ184d@ls/false (jZd8a@syntax-dispatch jZ184b@t '(_ . any)))) (if jZ184d@ls/false (apply (lambda (jZ184f@rest) (jZ183f@f jZ184f@rest (+ jZ183c@i '1))) jZ184d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ184b@t))))))))))))) (set! jZ176a@get-mutators (lambda (jZ180f@foo jZ1810@fields) (let ((jZ1814@gen-name '#f)) (begin (set! jZ1814@gen-name (lambda (jZ1837@x) (jZe6e@datum->syntax jZ180f@foo (string->symbol (string-append (symbol->string (jZe70@syntax->datum jZ180f@foo)) '"-" (symbol->string (jZe70@syntax->datum jZ1837@x)) '"-set!"))))) (let jZ1817@f ((jZ1815@fields jZ1810@fields)) (let ((jZ1819@t jZ1815@fields)) (let ((jZ181b@ls/false (jZd8a@syntax-dispatch jZ1819@t '()))) (if jZ181b@ls/false (apply (lambda () '()) jZ181b@ls/false) (let ((jZ181d@t jZ1819@t)) (let ((jZ181f@ls/false (jZd8a@syntax-dispatch jZ181d@t '((#(scheme-id mutable) any any any) . any)))) (if jZ181f@ls/false (apply (lambda (jZ1821@name jZ1822@accessor jZ1823@mutator jZ1824@rest) (cons jZ1823@mutator (jZ1817@f jZ1824@rest))) jZ181f@ls/false) (let ((jZ1829@t jZ181d@t)) (let ((jZ182b@ls/false (jZd8a@syntax-dispatch jZ1829@t '((#(scheme-id mutable) any) . any)))) (if jZ182b@ls/false (apply (lambda (jZ182d@name jZ182e@rest) (cons (jZ1814@gen-name jZ182d@name) (jZ1817@f jZ182e@rest))) jZ182b@ls/false) (let ((jZ1831@t jZ1829@t)) (let ((jZ1833@ls/false (jZd8a@syntax-dispatch jZ1831@t '(_ . any)))) (if jZ1833@ls/false (apply (lambda (jZ1835@rest) (jZ1817@f jZ1835@rest)) jZ1833@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1831@t)))))))))))))))))) (set! jZ176c@get-accessors (lambda (jZ17cb@foo jZ17cc@fields) (let ((jZ17d0@gen-name '#f)) (begin (set! jZ17d0@gen-name (lambda (jZ180d@x) (jZe6e@datum->syntax jZ17cb@foo (string->symbol (string-append (symbol->string (jZe70@syntax->datum jZ17cb@foo)) '"-" (symbol->string (jZe70@syntax->datum jZ180d@x))))))) (map (lambda (jZ17d1@field) (let ((jZ17d3@t jZ17d1@field)) (let ((jZ17d5@ls/false (jZd8a@syntax-dispatch jZ17d3@t '(#(scheme-id mutable) any any any)))) (if (and jZ17d5@ls/false (apply (lambda (jZ17d7@name jZ17d8@accessor jZ17d9@mutator) (jZb83@id? jZ17d8@accessor)) jZ17d5@ls/false)) (apply (lambda (jZ17dd@name jZ17de@accessor jZ17df@mutator) jZ17de@accessor) jZ17d5@ls/false) (let ((jZ17e3@t jZ17d3@t)) (let ((jZ17e5@ls/false (jZd8a@syntax-dispatch jZ17e3@t '(#(scheme-id immutable) any any)))) (if (and jZ17e5@ls/false (apply (lambda (jZ17e7@name jZ17e8@accessor) (jZb83@id? jZ17e8@accessor)) jZ17e5@ls/false)) (apply (lambda (jZ17eb@name jZ17ec@accessor) jZ17ec@accessor) jZ17e5@ls/false) (let ((jZ17ef@t jZ17e3@t)) (let ((jZ17f1@ls/false (jZd8a@syntax-dispatch jZ17ef@t '(#(scheme-id mutable) any)))) (if (and jZ17f1@ls/false (apply (lambda (jZ17f3@name) (jZb83@id? jZ17f3@name)) jZ17f1@ls/false)) (apply (lambda (jZ17f5@name) (jZ17d0@gen-name jZ17f5@name)) jZ17f1@ls/false) (let ((jZ17f7@t jZ17ef@t)) (let ((jZ17f9@ls/false (jZd8a@syntax-dispatch jZ17f7@t '(#(scheme-id immutable) any)))) (if (and jZ17f9@ls/false (apply (lambda (jZ17fb@name) (jZb83@id? jZ17fb@name)) jZ17f9@ls/false)) (apply (lambda (jZ17fd@name) (jZ17d0@gen-name jZ17fd@name)) jZ17f9@ls/false) (let ((jZ17ff@t jZ17f7@t)) (let ((jZ1801@ls/false (jZd8a@syntax-dispatch jZ17ff@t 'any))) (if (and jZ1801@ls/false (apply (lambda (jZ1803@name) (jZb83@id? jZ1803@name)) jZ1801@ls/false)) (apply (lambda (jZ1805@name) (jZ17d0@gen-name jZ1805@name)) jZ1801@ls/false) (let ((jZ1807@t jZ17ff@t)) (let ((jZ1809@ls/false (jZd8a@syntax-dispatch jZ1807@t 'any))) (if jZ1809@ls/false (apply (lambda (jZ180b@others) (jZe6a@syntax-violation '#f '"invalid field spec" jZ17d1@field)) jZ1809@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1807@t)))))))))))))))))))) jZ17cc@fields))))) (set! jZ176e@enumerate (lambda (jZ17c3@ls) (let jZ17c9@f ((jZ17c5@ls jZ17c3@ls) (jZ17c6@i '0)) (if (null? jZ17c5@ls) '() (cons jZ17c6@i (jZ17c9@f (cdr jZ17c5@ls) (+ jZ17c6@i '1))))))) (set! jZ1770@do-define-record (lambda (jZ179b@namespec jZ179c@clause*) (let ((jZ179f@foo (jZ1754@get-record-name jZ179b@namespec))) (let ((jZ17a1@foo-rtd (gensym))) (let ((jZ17a3@foo-rcd (gensym))) (let ((jZ17a5@protocol (gensym))) (let ((jZ17a7@make-foo (jZ1756@get-record-constructor-name jZ179b@namespec))) (let ((jZ17a9@fields (jZ1766@get-fields jZ179c@clause*))) (let ((jZ17ab@idx* (jZ176e@enumerate jZ17a9@fields))) (let ((jZ17ad@foo-x* (jZ176c@get-accessors jZ179f@foo jZ17a9@fields))) (let ((jZ17af@set-foo-x!* (jZ176a@get-mutators jZ179f@foo jZ17a9@fields))) (let ((jZ17b1@set-foo-idx* (jZ1768@get-mutator-indices jZ17a9@fields))) (let ((jZ17b3@foo? (jZ1758@get-record-predicate-name jZ179b@namespec))) (let ((jZ17b5@foo-rtd-code (jZ175c@foo-rtd-code jZ179f@foo jZ179c@clause* (jZ175e@parent-rtd-code jZ179c@clause*)))) (let ((jZ17b7@foo-rcd-code (jZ1762@foo-rcd-code jZ179c@clause* jZ17a1@foo-rtd jZ17a5@protocol (jZ1760@parent-rcd-code jZ179c@clause*)))) (let ((jZ17b9@protocol-code (jZ1764@get-protocol-code jZ179c@clause*))) (jZd40@bless (cons 'begin (cons (list 'define jZ17a1@foo-rtd jZ17b5@foo-rtd-code) (cons (list 'define jZ17a5@protocol jZ17b9@protocol-code) (cons (list 'define jZ17a3@foo-rcd jZ17b7@foo-rcd-code) (cons (list 'define-syntax jZ179f@foo (list 'list ''$rtd (list 'syntax jZ17a1@foo-rtd) (list 'syntax jZ17a3@foo-rcd))) (cons (list 'define jZ17b3@foo? (list 'record-predicate jZ17a1@foo-rtd)) (cons (list 'define jZ17a7@make-foo (list 'record-constructor jZ17a3@foo-rcd)) (append (map (lambda (jZ17bb@foo-x jZ17bc@idx) (list 'define jZ17bb@foo-x (list 'record-accessor jZ17a1@foo-rtd jZ17bc@idx))) jZ17ad@foo-x* jZ17ab@idx*) (map (lambda (jZ17bf@set-foo-x! jZ17c0@idx) (list 'define jZ17bf@set-foo-x! (list 'record-mutator jZ17a1@foo-rtd jZ17c0@idx))) jZ17af@set-foo-x!* jZ17b1@set-foo-idx*)))))))))))))))))))))))))) (set! jZ1772@verify-clauses (lambda (jZ177b@x jZ177c@cls*) (let ((jZ1780@valid-kwds '#f) (jZ1782@free-id-member? '#f)) (begin (set! jZ1780@valid-kwds (map jZd40@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! jZ1782@free-id-member? (lambda (jZ1797@x jZ1798@ls) (and (pair? jZ1798@ls) (or (jZb89@free-id=? jZ1797@x (car jZ1798@ls)) (jZ1782@free-id-member? jZ1797@x (cdr jZ1798@ls)))))) (let jZ1787@f ((jZ1783@cls* jZ177c@cls*) (jZ1784@seen* '())) (if (not (null? jZ1783@cls*)) (let ((jZ1789@t (car jZ1783@cls*))) (let ((jZ178b@ls/false (jZd8a@syntax-dispatch jZ1789@t '(any . any)))) (if jZ178b@ls/false (apply (lambda (jZ178d@kwd jZ178e@rest) (if (or (not (jZb83@id? jZ178d@kwd)) (not (jZ1782@free-id-member? jZ178d@kwd jZ1780@valid-kwds))) (jZe6a@syntax-violation '#f '"not a valid define-record-type keyword" jZ178d@kwd) (if (jZb8f@bound-id-member? jZ178d@kwd jZ1784@seen*) (jZe6a@syntax-violation '#f '"duplicate use of keyword " jZ177b@x jZ178d@kwd) (jZ1787@f (cdr jZ1783@cls*) (cons jZ178d@kwd jZ1784@seen*))))) jZ178b@ls/false) (let ((jZ1791@t jZ1789@t)) (let ((jZ1793@ls/false (jZd8a@syntax-dispatch jZ1791@t 'any))) (if jZ1793@ls/false (apply (lambda (jZ1795@cls) (jZe6a@syntax-violation '#f '"malformed define-record-type clause" jZ1795@cls)) jZ1793@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1791@t))))))) (void))))))) (let ((jZ1773@t jZ174f@x)) (let ((jZ1775@ls/false (jZd8a@syntax-dispatch jZ1773@t '(_ any . each-any)))) (if jZ1775@ls/false (apply (lambda (jZ1777@namespec jZ1778@clause*) (begin (jZ1772@verify-clauses jZ174f@x jZ1778@clause*) (jZ1770@do-define-record jZ1777@namespec jZ1778@clause*))) jZ1775@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1773@t)))))))) (set! jZ285a@jZd7e@define-record-type-macro jZd7e@define-record-type-macro) (set! jZd80@define-condition-type-macro (lambda (jZ194b@x) (let ((jZ194e@mkname '#f)) (begin (set! jZ194e@mkname (lambda (jZ197b@name jZ197c@suffix) (jZe6e@datum->syntax jZ197b@name (string->symbol (string-append (symbol->string (jZe70@syntax->datum jZ197b@name)) jZ197c@suffix))))) (let ((jZ194f@t jZ194b@x)) (let ((jZ1951@ls/false (jZd8a@syntax-dispatch jZ194f@t '(any any any any any . #(each (any any)))))) (if (and jZ1951@ls/false (apply (lambda (jZ1953@ctxt jZ1954@name jZ1955@super jZ1956@constructor jZ1957@predicate jZ1958@field* jZ1959@accessor*) (and (jZb83@id? jZ1954@name) (jZb83@id? jZ1955@super) (jZb83@id? jZ1956@constructor) (jZb83@id? jZ1957@predicate) (for-all jZb83@id? jZ1958@field*) (for-all jZb83@id? jZ1959@accessor*))) jZ1951@ls/false)) (apply (lambda (jZ1961@ctxt jZ1962@name jZ1963@super jZ1964@constructor jZ1965@predicate jZ1966@field* jZ1967@accessor*) (let ((jZ196f@aux-accessor* (map (lambda (jZ1971@x) (gensym)) jZ1967@accessor*))) (jZd40@bless (cons 'begin (cons (cons 'define-record-type (cons (list jZ1962@name jZ1964@constructor (gensym)) (cons (list 'parent jZ1963@super) (cons (cons 'fields (map (lambda (jZ1973@field jZ1974@aux) (list 'immutable jZ1973@field jZ1974@aux)) jZ1966@field* jZ196f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define jZ1965@predicate (list 'condition-predicate (list 'record-type-descriptor jZ1962@name))) (map (lambda (jZ1977@accessor jZ1978@aux) (list 'define jZ1977@accessor (list 'condition-accessor (list 'record-type-descriptor jZ1962@name) jZ1978@aux))) jZ1967@accessor* jZ196f@aux-accessor*))))))) jZ1951@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ194f@t)))))))) (set! jZ285b@jZd80@define-condition-type-macro jZd80@define-condition-type-macro) (set! jZd82@incorrect-usage-macro (lambda (jZ197f@e) (jZe6a@syntax-violation '#f '"incorrect usage of auxiliary keyword" jZ197f@e))) (set! jZ285c@jZd82@incorrect-usage-macro jZd82@incorrect-usage-macro) (set! jZd84@parameterize-macro (lambda (jZ1981@e) (let ((jZ1983@t jZ1981@e)) (let ((jZ1985@ls/false (jZd8a@syntax-dispatch jZ1983@t '(_ () any . each-any)))) (if jZ1985@ls/false (apply (lambda (jZ1987@b jZ1988@b*) (jZd40@bless (cons 'let (cons '() (cons jZ1987@b jZ1988@b*))))) jZ1985@ls/false) (let ((jZ198b@t jZ1983@t)) (let ((jZ198d@ls/false (jZd8a@syntax-dispatch jZ198b@t '(_ #(each (any any)) any . each-any)))) (if jZ198d@ls/false (apply (lambda (jZ198f@olhs* jZ1990@orhs* jZ1991@b jZ1992@b*) (let ((jZ1997@lhs* (jZe58@generate-temporaries jZ198f@olhs*)) (jZ1998@rhs* (jZe58@generate-temporaries jZ1990@orhs*))) (jZd40@bless (cons (list 'lambda (append jZ1997@lhs* jZ1998@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (jZ199b@lhs jZ199c@rhs) (list 'let (list (list 't (list jZ199b@lhs))) (list jZ199b@lhs jZ199c@rhs) (cons 'set! (cons jZ199c@rhs '(t))))) jZ1997@lhs* jZ1998@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons jZ1991@b jZ1992@b*))) '(swap)))))) (append jZ198f@olhs* jZ1990@orhs*))))) jZ198d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ198b@t))))))))) (set! jZ285d@jZd84@parameterize-macro jZd84@parameterize-macro) (set! jZd86@foreign-call-transformer (lambda (jZ199f@e jZ19a0@r jZ19a1@mr) (let ((jZ19a5@t jZ199f@e)) (let ((jZ19a7@ls/false (jZd8a@syntax-dispatch jZ19a5@t '(_ any . each-any)))) (if jZ19a7@ls/false (apply (lambda (jZ19a9@name jZ19aa@arg*) (cons 'foreign-call (cons (jZdac@chi-expr jZ19a9@name jZ19a0@r jZ19a1@mr) (jZda8@chi-expr* jZ19aa@arg* jZ19a0@r jZ19a1@mr)))) jZ19a7@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ19a5@t)))))) (set! jZ285e@jZd86@foreign-call-transformer jZd86@foreign-call-transformer) (set! jZd88@convert-pattern (lambda (jZ19ad@pattern jZ19ae@keys) (let ((jZ19b2@cvt* '#f) (jZ19b4@cvt '#f)) (begin (set! jZ19b2@cvt* (lambda (jZ1a51@p* jZ1a52@n jZ1a53@ids) (if (null? jZ1a51@p*) (values '() jZ1a53@ids) (call-with-values (lambda () (jZ19b2@cvt* (cdr jZ1a51@p*) jZ1a52@n jZ1a53@ids)) (lambda (jZ1a5b@jZ1a58 jZ1a5c@jZ1a5a) (let ((jZ1a5f@ids jZ1a5c@jZ1a5a) (jZ1a60@y jZ1a5b@jZ1a58)) (call-with-values (lambda () (jZ19b4@cvt (car jZ1a51@p*) jZ1a52@n jZ1a5f@ids)) (lambda (jZ1a67@jZ1a64 jZ1a68@jZ1a66) (let ((jZ1a6b@ids jZ1a68@jZ1a66) (jZ1a6c@x jZ1a67@jZ1a64)) (values (cons jZ1a6c@x jZ1a60@y) jZ1a6b@ids)))))))))) (set! jZ19b4@cvt (lambda (jZ19b5@p jZ19b6@n jZ19b7@ids) (let ((jZ19bb@t jZ19b5@p)) (let ((jZ19bd@ls/false (jZd8a@syntax-dispatch jZ19bb@t 'any))) (if (and jZ19bd@ls/false (apply (lambda (jZ19bf@id) (jZb83@id? jZ19bf@id)) jZ19bd@ls/false)) (apply (lambda (jZ19c1@id) (if (jZb8f@bound-id-member? jZ19b5@p jZ19ae@keys) (values (vector 'free-id jZ19b5@p) jZ19b7@ids) (if (jZb89@free-id=? jZ19b5@p (jZd12@scheme-stx '_)) (values '_ jZ19b7@ids) (values 'any (cons (cons jZ19b5@p jZ19b6@n) jZ19b7@ids))))) jZ19bd@ls/false) (let ((jZ19c3@t jZ19bb@t)) (let ((jZ19c5@ls/false (jZd8a@syntax-dispatch jZ19c3@t '(any any)))) (if (and jZ19c5@ls/false (apply (lambda (jZ19c7@p jZ19c8@dots) (jZd8c@ellipsis? jZ19c8@dots)) jZ19c5@ls/false)) (apply (lambda (jZ19cb@p jZ19cc@dots) (call-with-values (lambda () (jZ19b4@cvt jZ19cb@p (+ jZ19b6@n '1) jZ19b7@ids)) (lambda (jZ19d3@jZ19d0 jZ19d4@jZ19d2) (let ((jZ19d7@ids jZ19d4@jZ19d2) (jZ19d8@p jZ19d3@jZ19d0)) (values (if (eq? jZ19d8@p 'any) 'each-any (vector 'each jZ19d8@p)) jZ19d7@ids))))) jZ19c5@ls/false) (let ((jZ19db@t jZ19c3@t)) (let ((jZ19dd@ls/false (jZd8a@syntax-dispatch jZ19db@t '(any any . #(each+ any () any))))) (if (and jZ19dd@ls/false (apply (lambda (jZ19df@x jZ19e0@dots jZ19e1@ys jZ19e2@z) (jZd8c@ellipsis? jZ19e0@dots)) jZ19dd@ls/false)) (apply (lambda (jZ19e7@x jZ19e8@dots jZ19e9@ys jZ19ea@z) (call-with-values (lambda () (jZ19b4@cvt jZ19ea@z jZ19b6@n jZ19b7@ids)) (lambda (jZ19f3@jZ19f0 jZ19f4@jZ19f2) (let ((jZ19f7@ids jZ19f4@jZ19f2) (jZ19f8@z jZ19f3@jZ19f0)) (call-with-values (lambda () (jZ19b2@cvt* jZ19e9@ys jZ19b6@n jZ19f7@ids)) (lambda (jZ19ff@jZ19fc jZ1a00@jZ19fe) (let ((jZ1a03@ids jZ1a00@jZ19fe) (jZ1a04@ys jZ19ff@jZ19fc)) (call-with-values (lambda () (jZ19b4@cvt jZ19e7@x (+ jZ19b6@n '1) jZ1a03@ids)) (lambda (jZ1a0b@jZ1a08 jZ1a0c@jZ1a0a) (let ((jZ1a0f@ids jZ1a0c@jZ1a0a) (jZ1a10@x jZ1a0b@jZ1a08)) (values (vector 'each+ jZ1a10@x (reverse jZ1a04@ys) jZ19f8@z) jZ1a0f@ids))))))))))) jZ19dd@ls/false) (let ((jZ1a13@t jZ19db@t)) (let ((jZ1a15@ls/false (jZd8a@syntax-dispatch jZ1a13@t '(any . any)))) (if jZ1a15@ls/false (apply (lambda (jZ1a17@x jZ1a18@y) (call-with-values (lambda () (jZ19b4@cvt jZ1a18@y jZ19b6@n jZ19b7@ids)) (lambda (jZ1a1f@jZ1a1c jZ1a20@jZ1a1e) (let ((jZ1a23@ids jZ1a20@jZ1a1e) (jZ1a24@y jZ1a1f@jZ1a1c)) (call-with-values (lambda () (jZ19b4@cvt jZ1a17@x jZ19b6@n jZ1a23@ids)) (lambda (jZ1a2b@jZ1a28 jZ1a2c@jZ1a2a) (let ((jZ1a2f@ids jZ1a2c@jZ1a2a) (jZ1a30@x jZ1a2b@jZ1a28)) (values (cons jZ1a30@x jZ1a24@y) jZ1a2f@ids)))))))) jZ1a15@ls/false) (let ((jZ1a33@t jZ1a13@t)) (let ((jZ1a35@ls/false (jZd8a@syntax-dispatch jZ1a33@t '()))) (if jZ1a35@ls/false (apply (lambda () (values '() jZ19b7@ids)) jZ1a35@ls/false) (let ((jZ1a37@t jZ1a33@t)) (let ((jZ1a39@ls/false (jZd8a@syntax-dispatch jZ1a37@t '#(vector each-any)))) (if (and jZ1a39@ls/false (apply (lambda (jZ1a3b@p) (not (jZb4f@stx? jZ1a3b@p))) jZ1a39@ls/false)) (apply (lambda (jZ1a3d@p) (call-with-values (lambda () (jZ19b4@cvt jZ1a3d@p jZ19b6@n jZ19b7@ids)) (lambda (jZ1a43@jZ1a40 jZ1a44@jZ1a42) (let ((jZ1a47@ids jZ1a44@jZ1a42) (jZ1a48@p jZ1a43@jZ1a40)) (values (vector 'vector jZ1a48@p) jZ1a47@ids))))) jZ1a39@ls/false) (let ((jZ1a4b@t jZ1a37@t)) (let ((jZ1a4d@ls/false (jZd8a@syntax-dispatch jZ1a4b@t 'any))) (if jZ1a4d@ls/false (apply (lambda (jZ1a4f@datum) (values (vector 'atom (jZb97@stx->datum jZ1a4f@datum)) jZ19b7@ids)) jZ1a4d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1a4b@t)))))))))))))))))))))))) (jZ19b4@cvt jZ19ad@pattern '0 '()))))) (set! jZ285f@jZd88@convert-pattern jZd88@convert-pattern) (set! jZd8a@syntax-dispatch (let ((jZ1a70@stx^ '#f) (jZ1a72@match-each '#f) (jZ1a74@match-each+ '#f) (jZ1a76@match-each-any '#f) (jZ1a78@match-empty '#f) (jZ1a7a@combine '#f) (jZ1a7c@match* '#f) (jZ1a7e@match '#f)) (begin (set! jZ1a70@stx^ (lambda (jZ1b4b@e jZ1b4c@m* jZ1b4d@s* jZ1b4e@ae*) (if (and (null? jZ1b4c@m*) (null? jZ1b4d@s*) (null? jZ1b4e@ae*)) jZ1b4b@e (jZb6b@mkstx jZ1b4b@e jZ1b4c@m* jZ1b4d@s* jZ1b4e@ae*)))) (set! jZ1a72@match-each (lambda (jZ1b2b@e jZ1b2c@p jZ1b2d@m* jZ1b2e@s* jZ1b2f@ae*) (if (pair? jZ1b2b@e) (let ((jZ1b35@first (jZ1a7e@match (car jZ1b2b@e) jZ1b2c@p jZ1b2d@m* jZ1b2e@s* jZ1b2f@ae* '()))) (and jZ1b35@first (let ((jZ1b37@rest (jZ1a72@match-each (cdr jZ1b2b@e) jZ1b2c@p jZ1b2d@m* jZ1b2e@s* jZ1b2f@ae*))) (and jZ1b37@rest (cons jZ1b35@first jZ1b37@rest))))) (if (null? jZ1b2b@e) '() (if (jZb4f@stx? jZ1b2b@e) (and (not (jZb09@top-marked? jZ1b2d@m*)) (call-with-values (lambda () (join-wraps jZ1b2d@m* jZ1b2e@s* jZ1b2f@ae* jZ1b2b@e)) (lambda (jZ1b3f@jZ1b3a jZ1b40@jZ1b3c jZ1b41@jZ1b3e) (let ((jZ1b45@ae* jZ1b41@jZ1b3e) (jZ1b46@s* jZ1b40@jZ1b3c) (jZ1b47@m* jZ1b3f@jZ1b3a)) (jZ1a72@match-each (jZb51@stx-expr jZ1b2b@e) jZ1b2c@p jZ1b47@m* jZ1b46@s* jZ1b45@ae*))))) (if (jZ6bc@jZ58e@annotation? jZ1b2b@e) (jZ1a72@match-each (jZ6be@jZ592@annotation-expression jZ1b2b@e) jZ1b2c@p jZ1b2d@m* jZ1b2e@s* jZ1b2f@ae*) '#f)))))) (set! jZ1a74@match-each+ (lambda (jZ1aeb@e jZ1aec@x-pat jZ1aed@y-pat jZ1aee@z-pat jZ1aef@m* jZ1af0@s* jZ1af1@ae* jZ1af2@r) (let jZ1b03@f ((jZ1afb@e jZ1aeb@e) (jZ1afc@m* jZ1aef@m*) (jZ1afd@s* jZ1af0@s*) (jZ1afe@ae* jZ1af1@ae*)) (if (pair? jZ1afb@e) (call-with-values (lambda () (jZ1b03@f (cdr jZ1afb@e) jZ1afc@m* jZ1afd@s* jZ1afe@ae*)) (lambda (jZ1b0b@jZ1b06 jZ1b0c@jZ1b08 jZ1b0d@jZ1b0a) (let ((jZ1b11@r jZ1b0d@jZ1b0a) (jZ1b12@y-pat jZ1b0c@jZ1b08) (jZ1b13@xr* jZ1b0b@jZ1b06)) (if jZ1b11@r (if (null? jZ1b12@y-pat) (let ((jZ1b17@xr (jZ1a7e@match (car jZ1afb@e) jZ1aec@x-pat jZ1afc@m* jZ1afd@s* jZ1afe@ae* '()))) (if jZ1b17@xr (values (cons jZ1b17@xr jZ1b13@xr*) jZ1b12@y-pat jZ1b11@r) (values '#f '#f '#f))) (values '() (cdr jZ1b12@y-pat) (jZ1a7e@match (car jZ1afb@e) (car jZ1b12@y-pat) jZ1afc@m* jZ1afd@s* jZ1afe@ae* jZ1b11@r))) (values '#f '#f '#f))))) (if (jZb4f@stx? jZ1afb@e) (if (jZb09@top-marked? jZ1afc@m*) (values '() jZ1aed@y-pat (jZ1a7e@match jZ1afb@e jZ1aee@z-pat jZ1afc@m* jZ1afd@s* jZ1afe@ae* jZ1af2@r)) (call-with-values (lambda () (join-wraps jZ1afc@m* jZ1afd@s* jZ1afe@ae* jZ1afb@e)) (lambda (jZ1b1f@jZ1b1a jZ1b20@jZ1b1c jZ1b21@jZ1b1e) (let ((jZ1b25@ae* jZ1b21@jZ1b1e) (jZ1b26@s* jZ1b20@jZ1b1c) (jZ1b27@m* jZ1b1f@jZ1b1a)) (jZ1b03@f (jZb51@stx-expr jZ1afb@e) jZ1b27@m* jZ1b26@s* jZ1b25@ae*))))) (if (jZ6bc@jZ58e@annotation? jZ1afb@e) (jZ1b03@f (jZ6be@jZ592@annotation-expression jZ1afb@e) jZ1afc@m* jZ1afd@s* jZ1afe@ae*) (values '() jZ1aed@y-pat (jZ1a7e@match jZ1afb@e jZ1aee@z-pat jZ1afc@m* jZ1afd@s* jZ1afe@ae* jZ1af2@r)))))))) (set! jZ1a76@match-each-any (lambda (jZ1acf@e jZ1ad0@m* jZ1ad1@s* jZ1ad2@ae*) (if (pair? jZ1acf@e) (let ((jZ1ad7@l (jZ1a76@match-each-any (cdr jZ1acf@e) jZ1ad0@m* jZ1ad1@s* jZ1ad2@ae*))) (and jZ1ad7@l (cons (jZ1a70@stx^ (car jZ1acf@e) jZ1ad0@m* jZ1ad1@s* jZ1ad2@ae*) jZ1ad7@l))) (if (null? jZ1acf@e) '() (if (jZb4f@stx? jZ1acf@e) (and (not (jZb09@top-marked? jZ1ad0@m*)) (call-with-values (lambda () (join-wraps jZ1ad0@m* jZ1ad1@s* jZ1ad2@ae* jZ1acf@e)) (lambda (jZ1adf@jZ1ada jZ1ae0@jZ1adc jZ1ae1@jZ1ade) (let ((jZ1ae5@ae* jZ1ae1@jZ1ade) (jZ1ae6@s* jZ1ae0@jZ1adc) (jZ1ae7@m* jZ1adf@jZ1ada)) (jZ1a76@match-each-any (jZb51@stx-expr jZ1acf@e) jZ1ae7@m* jZ1ae6@s* jZ1ae5@ae*))))) (if (jZ6bc@jZ58e@annotation? jZ1acf@e) (jZ1a76@match-each-any (jZ6be@jZ592@annotation-expression jZ1acf@e) jZ1ad0@m* jZ1ad1@s* jZ1ad2@ae*) '#f)))))) (set! jZ1a78@match-empty (lambda (jZ1ac9@p jZ1aca@r) (if (null? jZ1ac9@p) jZ1aca@r (if (eq? jZ1ac9@p '_) jZ1aca@r (if (eq? jZ1ac9@p 'any) (cons '() jZ1aca@r) (if (pair? jZ1ac9@p) (jZ1a78@match-empty (car jZ1ac9@p) (jZ1a78@match-empty (cdr jZ1ac9@p) jZ1aca@r)) (if (eq? jZ1ac9@p 'each-any) (cons '() jZ1aca@r) (let ((jZ1acd@t (vector-ref jZ1ac9@p '0))) (if (memv jZ1acd@t '(each)) (jZ1a78@match-empty (vector-ref jZ1ac9@p '1) jZ1aca@r) (if (memv jZ1acd@t '(each+)) (jZ1a78@match-empty (vector-ref jZ1ac9@p '1) (jZ1a78@match-empty (reverse (vector-ref jZ1ac9@p '2)) (jZ1a78@match-empty (vector-ref jZ1ac9@p '3) jZ1aca@r))) (if (memv jZ1acd@t '(free-id atom)) jZ1aca@r (if (memv jZ1acd@t '(scheme-id atom)) jZ1aca@r (if (memv jZ1acd@t '(vector)) (jZ1a78@match-empty (vector-ref jZ1ac9@p '1) jZ1aca@r) (assertion-violation 'syntax-dispatch '"invalid pattern" jZ1ac9@p)))))))))))))) (set! jZ1a7a@combine (lambda (jZ1ac5@r* jZ1ac6@r) (if (null? (car jZ1ac5@r*)) jZ1ac6@r (cons (map car jZ1ac5@r*) (jZ1a7a@combine (map cdr jZ1ac5@r*) jZ1ac6@r))))) (set! jZ1a7c@match* (lambda (jZ1aa1@e jZ1aa2@p jZ1aa3@m* jZ1aa4@s* jZ1aa5@ae* jZ1aa6@r) (if (null? jZ1aa2@p) (and (null? jZ1aa1@e) jZ1aa6@r) (if (pair? jZ1aa2@p) (and (pair? jZ1aa1@e) (jZ1a7e@match (car jZ1aa1@e) (car jZ1aa2@p) jZ1aa3@m* jZ1aa4@s* jZ1aa5@ae* (jZ1a7e@match (cdr jZ1aa1@e) (cdr jZ1aa2@p) jZ1aa3@m* jZ1aa4@s* jZ1aa5@ae* jZ1aa6@r))) (if (eq? jZ1aa2@p 'each-any) (let ((jZ1aad@l (jZ1a76@match-each-any jZ1aa1@e jZ1aa3@m* jZ1aa4@s* jZ1aa5@ae*))) (and jZ1aad@l (cons jZ1aad@l jZ1aa6@r))) (let ((jZ1aaf@t (vector-ref jZ1aa2@p '0))) (if (memv jZ1aaf@t '(each)) (if (null? jZ1aa1@e) (jZ1a78@match-empty (vector-ref jZ1aa2@p '1) jZ1aa6@r) (let ((jZ1ab1@r* (jZ1a72@match-each jZ1aa1@e (vector-ref jZ1aa2@p '1) jZ1aa3@m* jZ1aa4@s* jZ1aa5@ae*))) (and jZ1ab1@r* (jZ1a7a@combine jZ1ab1@r* jZ1aa6@r)))) (if (memv jZ1aaf@t '(free-id)) (and (symbol? jZ1aa1@e) (jZb09@top-marked? jZ1aa3@m*) (jZb89@free-id=? (jZ1a70@stx^ jZ1aa1@e jZ1aa3@m* jZ1aa4@s* jZ1aa5@ae*) (vector-ref jZ1aa2@p '1)) jZ1aa6@r) (if (memv jZ1aaf@t '(scheme-id)) (and (symbol? jZ1aa1@e) (jZb09@top-marked? jZ1aa3@m*) (jZb89@free-id=? (jZ1a70@stx^ jZ1aa1@e jZ1aa3@m* jZ1aa4@s* jZ1aa5@ae*) (jZd12@scheme-stx (vector-ref jZ1aa2@p '1))) jZ1aa6@r) (if (memv jZ1aaf@t '(each+)) (call-with-values (lambda () (jZ1a74@match-each+ jZ1aa1@e (vector-ref jZ1aa2@p '1) (vector-ref jZ1aa2@p '2) (vector-ref jZ1aa2@p '3) jZ1aa3@m* jZ1aa4@s* jZ1aa5@ae* jZ1aa6@r)) (lambda (jZ1ab9@jZ1ab4 jZ1aba@jZ1ab6 jZ1abb@jZ1ab8) (let ((jZ1abf@r jZ1abb@jZ1ab8) (jZ1ac0@y-pat jZ1aba@jZ1ab6) (jZ1ac1@xr* jZ1ab9@jZ1ab4)) (and jZ1abf@r (null? jZ1ac0@y-pat) (if (null? jZ1ac1@xr*) (jZ1a78@match-empty (vector-ref jZ1aa2@p '1) jZ1abf@r) (jZ1a7a@combine jZ1ac1@xr* jZ1abf@r)))))) (if (memv jZ1aaf@t '(atom)) (and (fast-equal? (vector-ref jZ1aa2@p '1) (jZb95@strip jZ1aa1@e jZ1aa3@m*)) jZ1aa6@r) (if (memv jZ1aaf@t '(vector)) (and (vector? jZ1aa1@e) (jZ1a7e@match (vector->list jZ1aa1@e) (vector-ref jZ1aa2@p '1) jZ1aa3@m* jZ1aa4@s* jZ1aa5@ae* jZ1aa6@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" jZ1aa2@p))))))))))))) (set! jZ1a7e@match (lambda (jZ1a83@e jZ1a84@p jZ1a85@m* jZ1a86@s* jZ1a87@ae* jZ1a88@r) (if (not jZ1a88@r) '#f (if (eq? jZ1a84@p '_) jZ1a88@r (if (eq? jZ1a84@p 'any) (cons (jZ1a70@stx^ jZ1a83@e jZ1a85@m* jZ1a86@s* jZ1a87@ae*) jZ1a88@r) (if (jZb4f@stx? jZ1a83@e) (and (not (jZb09@top-marked? jZ1a85@m*)) (call-with-values (lambda () (join-wraps jZ1a85@m* jZ1a86@s* jZ1a87@ae* jZ1a83@e)) (lambda (jZ1a95@jZ1a90 jZ1a96@jZ1a92 jZ1a97@jZ1a94) (let ((jZ1a9b@ae* jZ1a97@jZ1a94) (jZ1a9c@s* jZ1a96@jZ1a92) (jZ1a9d@m* jZ1a95@jZ1a90)) (jZ1a7e@match (jZb51@stx-expr jZ1a83@e) jZ1a84@p jZ1a9d@m* jZ1a9c@s* jZ1a9b@ae* jZ1a88@r))))) (if (jZ6bc@jZ58e@annotation? jZ1a83@e) (jZ1a7e@match (jZ6be@jZ592@annotation-expression jZ1a83@e) jZ1a84@p jZ1a85@m* jZ1a86@s* jZ1a87@ae* jZ1a88@r) (jZ1a7c@match* jZ1a83@e jZ1a84@p jZ1a85@m* jZ1a86@s* jZ1a87@ae* jZ1a88@r)))))))) (lambda (jZ1a7f@e jZ1a80@p) (jZ1a7e@match jZ1a7f@e jZ1a80@p '() '() '() '()))))) (set! jZ2860@jZd8a@syntax-dispatch jZd8a@syntax-dispatch) (set! jZd8c@ellipsis? (lambda (jZ1b53@x) (and (jZb83@id? jZ1b53@x) (jZb89@free-id=? jZ1b53@x (jZd12@scheme-stx '...))))) (set! jZ2861@jZd8c@ellipsis? jZd8c@ellipsis?) (set! jZd8e@underscore? (lambda (jZ1b55@x) (and (jZb83@id? jZ1b55@x) (jZb89@free-id=? jZ1b55@x (jZd12@scheme-stx '_))))) (set! jZ2862@jZd8e@underscore? jZd8e@underscore?) (set! jZd90@verify-literals (lambda (jZ1b57@lits jZ1b58@expr) (for-each (lambda (jZ1b5b@x) (if (or (not (jZb83@id? jZ1b5b@x)) (jZd8c@ellipsis? jZ1b5b@x) (jZd8e@underscore? jZ1b5b@x)) (jZe6a@syntax-violation '#f '"invalid literal" jZ1b58@expr jZ1b5b@x) (void))) jZ1b57@lits))) (set! jZ2863@jZd90@verify-literals jZd90@verify-literals) (set! jZd92@syntax-case-transformer (let ((jZ1b5e@build-dispatch-call '#f) (jZ1b60@invalid-ids-error '#f) (jZ1b62@gen-clause '#f) (jZ1b64@gen-syntax-case '#f)) (begin (set! jZ1b5e@build-dispatch-call (lambda (jZ1bcf@pvars jZ1bd0@expr jZ1bd1@y jZ1bd2@r jZ1bd3@mr) (let ((jZ1bd9@ids (map car jZ1bcf@pvars)) (jZ1bda@levels (map cdr jZ1bcf@pvars))) (let ((jZ1bdd@labels (map jZb0f@gen-label jZ1bd9@ids)) (jZ1bde@new-vars (map jZb0b@gen-lexical jZ1bd9@ids))) (let ((jZ1be1@body (jZdac@chi-expr (jZb6f@add-subst (jZb43@make-full-rib jZ1bd9@ids jZ1bdd@labels) jZ1bd0@expr) (append (map (lambda (jZ1be3@label jZ1be4@var jZ1be5@level) (cons jZ1be3@label (jZb9d@make-binding 'syntax (cons jZ1be4@var jZ1be5@level)))) jZ1bdd@labels jZ1bde@new-vars (map cdr jZ1bcf@pvars)) jZ1bd2@r) jZ1bd3@mr))) (list '(primitive apply) (jZae6@jZa12@build-lambda '#f jZ1bde@new-vars jZ1be1@body) jZ1bd1@y)))))) (set! jZ1b60@invalid-ids-error (lambda (jZ1bc3@id* jZ1bc4@e jZ1bc5@class) (let jZ1bcd@find ((jZ1bc9@id* jZ1bc3@id*) (jZ1bca@ok* '())) (if (null? jZ1bc9@id*) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1bc4@e) (if (jZb83@id? (car jZ1bc9@id*)) (if (jZb8f@bound-id-member? (car jZ1bc9@id*) jZ1bca@ok*) (jZe66@syntax-error (car jZ1bc9@id*) '"duplicate " jZ1bc5@class) (jZ1bcd@find (cdr jZ1bc9@id*) (cons (car jZ1bc9@id*) jZ1bca@ok*))) (jZe66@syntax-error (car jZ1bc9@id*) '"invalid " jZ1bc5@class)))))) (set! jZ1b62@gen-clause (lambda (jZ1b9b@x jZ1b9c@keys jZ1b9d@clauses jZ1b9e@r jZ1b9f@mr jZ1ba0@pat jZ1ba1@fender jZ1ba2@expr) (call-with-values (lambda () (jZd88@convert-pattern jZ1ba0@pat jZ1b9c@keys)) (lambda (jZ1baf@jZ1bac jZ1bb0@jZ1bae) (let ((jZ1bb3@pvars jZ1bb0@jZ1bae) (jZ1bb4@p jZ1baf@jZ1bac)) (if (not (jZb8d@distinct-bound-ids? (map car jZ1bb3@pvars))) (jZ1b60@invalid-ids-error (map car jZ1bb3@pvars) jZ1ba0@pat '"pattern variable") (if (not (for-all (lambda (jZ1bb7@x) (not (jZd8c@ellipsis? (car jZ1bb7@x)))) jZ1bb3@pvars)) (jZe6a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" jZ1ba0@pat) (let ((jZ1bb9@y (jZb0b@gen-lexical 'tmp))) (let ((jZ1bbb@test (if (eq? jZ1ba1@fender '#t) jZ1bb9@y (let ((jZ1bbd@call (jZ1b5e@build-dispatch-call jZ1bb3@pvars jZ1ba1@fender jZ1bb9@y jZ1b9e@r jZ1b9f@mr))) (list 'if jZ1bb9@y jZ1bbd@call (list 'quote '#f)))))) (let ((jZ1bbf@conseq (jZ1b5e@build-dispatch-call jZ1bb3@pvars jZ1ba2@expr jZ1bb9@y jZ1b9e@r jZ1b9f@mr))) (let ((jZ1bc1@altern (jZ1b64@gen-syntax-case jZ1b9b@x jZ1b9c@keys jZ1b9d@clauses jZ1b9e@r jZ1b9f@mr))) (list (jZae6@jZa12@build-lambda '#f (list jZ1bb9@y) (list 'if jZ1bbb@test jZ1bbf@conseq jZ1bc1@altern)) (list '(primitive syntax-dispatch) jZ1b9b@x (list 'quote jZ1bb4@p)))))))))))))) (set! jZ1b64@gen-syntax-case (lambda (jZ1b79@x jZ1b7a@keys jZ1b7b@clauses jZ1b7c@r jZ1b7d@mr) (if (null? jZ1b7b@clauses) (list '(primitive syntax-error) jZ1b79@x) (let ((jZ1b83@t (car jZ1b7b@clauses))) (let ((jZ1b85@ls/false (jZd8a@syntax-dispatch jZ1b83@t '(any any)))) (if jZ1b85@ls/false (apply (lambda (jZ1b87@pat jZ1b88@expr) (if (and (jZb83@id? jZ1b87@pat) (not (jZb8f@bound-id-member? jZ1b87@pat jZ1b7a@keys)) (not (jZd8c@ellipsis? jZ1b87@pat))) (if (jZb89@free-id=? jZ1b87@pat (jZd12@scheme-stx '_)) (jZdac@chi-expr jZ1b88@expr jZ1b7c@r jZ1b7d@mr) (let ((jZ1b8b@lab (jZb0f@gen-label jZ1b87@pat)) (jZ1b8c@lex (jZb0b@gen-lexical jZ1b87@pat))) (let ((jZ1b8f@body (jZdac@chi-expr (jZb6f@add-subst (jZb43@make-full-rib (list jZ1b87@pat) (list jZ1b8b@lab)) jZ1b88@expr) (cons (cons jZ1b8b@lab (jZb9d@make-binding 'syntax (cons jZ1b8c@lex '0))) jZ1b7c@r) jZ1b7d@mr))) (list (jZae6@jZa12@build-lambda '#f (list jZ1b8c@lex) jZ1b8f@body) jZ1b79@x)))) (jZ1b62@gen-clause jZ1b79@x jZ1b7a@keys (cdr jZ1b7b@clauses) jZ1b7c@r jZ1b7d@mr jZ1b87@pat '#t jZ1b88@expr))) jZ1b85@ls/false) (let ((jZ1b91@t jZ1b83@t)) (let ((jZ1b93@ls/false (jZd8a@syntax-dispatch jZ1b91@t '(any any any)))) (if jZ1b93@ls/false (apply (lambda (jZ1b95@pat jZ1b96@fender jZ1b97@expr) (jZ1b62@gen-clause jZ1b79@x jZ1b7a@keys (cdr jZ1b7b@clauses) jZ1b7c@r jZ1b7d@mr jZ1b95@pat jZ1b96@fender jZ1b97@expr)) jZ1b93@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1b91@t)))))))))) (lambda (jZ1b65@e jZ1b66@r jZ1b67@mr) (let ((jZ1b6b@t jZ1b65@e)) (let ((jZ1b6d@ls/false (jZd8a@syntax-dispatch jZ1b6b@t '(_ any each-any . each-any)))) (if jZ1b6d@ls/false (apply (lambda (jZ1b6f@expr jZ1b70@keys jZ1b71@clauses) (begin (jZd90@verify-literals jZ1b70@keys jZ1b65@e) (let ((jZ1b75@x (jZb0b@gen-lexical 'tmp))) (let ((jZ1b77@body (jZ1b64@gen-syntax-case jZ1b75@x jZ1b70@keys jZ1b71@clauses jZ1b66@r jZ1b67@mr))) (list (jZae6@jZa12@build-lambda '#f (list jZ1b75@x) jZ1b77@body) (jZdac@chi-expr jZ1b6f@expr jZ1b66@r jZ1b67@mr)))))) jZ1b6d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1b6b@t)))))))) (set! jZ2864@jZd92@syntax-case-transformer jZd92@syntax-case-transformer) (set! jZd94@ellipsis-map (lambda (jZ1be9@proc jZ1bea@ls . jZ1bed@ls*) (let ((jZ1bf0@who '#f)) (begin (set! jZ1bf0@who '...) (begin (if (not (list? jZ1bea@ls)) (assertion-violation jZ1bf0@who '"not a list" jZ1bea@ls) (void)) (if (not (null? jZ1bed@ls*)) (let ((jZ1bf1@n (length jZ1bea@ls))) (for-each (lambda (jZ1bf3@x) (begin (if (not (list? jZ1bf3@x)) (assertion-violation jZ1bf0@who '"not a list" jZ1bf3@x) (void)) (if (not (= (length jZ1bf3@x) jZ1bf1@n)) (assertion-violation jZ1bf0@who '"length mismatch" jZ1bea@ls jZ1bf3@x) (void)))) jZ1bed@ls*)) (void)) (apply map jZ1be9@proc jZ1bea@ls jZ1bed@ls*)))))) (set! jZ2865@jZd94@ellipsis-map jZd94@ellipsis-map) (set! jZd96@syntax-transformer (let ((jZ1bf6@gen-syntax '#f) (jZ1bf8@gen-ref '#f) (jZ1bfa@gen-append '#f) (jZ1bfc@gen-mappend '#f) (jZ1bfe@gen-map '#f) (jZ1c00@gen-cons '#f) (jZ1c02@gen-vector '#f) (jZ1c04@regen '#f)) (begin (set! jZ1bf6@gen-syntax (lambda (jZ1c6d@src jZ1c6e@e jZ1c6f@r jZ1c70@maps jZ1c71@ellipsis? jZ1c72@vec?) (let ((jZ1c79@t jZ1c6e@e)) (let ((jZ1c7b@ls/false (jZd8a@syntax-dispatch jZ1c79@t 'any))) (if (and jZ1c7b@ls/false (apply (lambda (jZ1c7d@dots) (jZ1c71@ellipsis? jZ1c7d@dots)) jZ1c7b@ls/false)) (apply (lambda (jZ1c7f@dots) (jZe6a@syntax-violation '#f '"misplaced ellipsis in syntax form" jZ1c6d@src)) jZ1c7b@ls/false) (let ((jZ1c81@t jZ1c79@t)) (let ((jZ1c83@ls/false (jZd8a@syntax-dispatch jZ1c81@t 'any))) (if (and jZ1c83@ls/false (apply (lambda (jZ1c85@id) (jZb83@id? jZ1c85@id)) jZ1c83@ls/false)) (apply (lambda (jZ1c87@id) (let ((jZ1c89@label (jZb99@id->label jZ1c6e@e))) (let ((jZ1c8b@b (jZb9b@label->binding jZ1c89@label jZ1c6f@r))) (if (eq? (jZb9f@binding-type jZ1c8b@b) 'syntax) (call-with-values (lambda () (let ((jZ1c91@var.lev (jZba1@binding-value jZ1c8b@b))) (jZ1bf8@gen-ref jZ1c6d@src (car jZ1c91@var.lev) (cdr jZ1c91@var.lev) jZ1c70@maps))) (lambda (jZ1c93@jZ1c8e jZ1c94@jZ1c90) (let ((jZ1c97@maps jZ1c94@jZ1c90) (jZ1c98@var jZ1c93@jZ1c8e)) (values (list 'ref jZ1c98@var) jZ1c97@maps)))) (values (list 'quote jZ1c6e@e) jZ1c70@maps))))) jZ1c83@ls/false) (let ((jZ1c9b@t jZ1c81@t)) (let ((jZ1c9d@ls/false (jZd8a@syntax-dispatch jZ1c9b@t '(any any)))) (if (and jZ1c9d@ls/false (apply (lambda (jZ1c9f@dots jZ1ca0@e) (jZ1c71@ellipsis? jZ1c9f@dots)) jZ1c9d@ls/false)) (apply (lambda (jZ1ca3@dots jZ1ca4@e) (if jZ1c72@vec? (jZe6a@syntax-violation '#f '"misplaced ellipsis in syntax form" jZ1c6d@src) (jZ1bf6@gen-syntax jZ1c6d@src jZ1ca4@e jZ1c6f@r jZ1c70@maps (lambda (jZ1ca7@x) '#f) '#f))) jZ1c9d@ls/false) (let ((jZ1ca9@t jZ1c9b@t)) (let ((jZ1cab@ls/false (jZd8a@syntax-dispatch jZ1ca9@t '(any any . any)))) (if (and jZ1cab@ls/false (apply (lambda (jZ1cad@x jZ1cae@dots jZ1caf@y) (jZ1c71@ellipsis? jZ1cae@dots)) jZ1cab@ls/false)) (apply (lambda (jZ1cb3@x jZ1cb4@dots jZ1cb5@y) (let jZ1ccb@f ((jZ1cb9@y jZ1cb5@y) (jZ1cba@k (lambda (jZ1cbd@maps) (call-with-values (lambda () (jZ1bf6@gen-syntax jZ1c6d@src jZ1cb3@x jZ1c6f@r (cons '() jZ1cbd@maps) jZ1c71@ellipsis? '#f)) (lambda (jZ1cc3@jZ1cc0 jZ1cc4@jZ1cc2) (let ((jZ1cc7@maps jZ1cc4@jZ1cc2) (jZ1cc8@x jZ1cc3@jZ1cc0)) (if (null? (car jZ1cc7@maps)) (jZe6a@syntax-violation '#f '"extra ellipsis in syntax form" jZ1c6d@src) (values (jZ1bfe@gen-map jZ1cc8@x (car jZ1cc7@maps)) (cdr jZ1cc7@maps))))))))) (let ((jZ1ccd@t jZ1cb9@y)) (let ((jZ1ccf@ls/false (jZd8a@syntax-dispatch jZ1ccd@t '()))) (if jZ1ccf@ls/false (apply (lambda () (jZ1cba@k jZ1c70@maps)) jZ1ccf@ls/false) (let ((jZ1cd1@t jZ1ccd@t)) (let ((jZ1cd3@ls/false (jZd8a@syntax-dispatch jZ1cd1@t '(any . any)))) (if (and jZ1cd3@ls/false (apply (lambda (jZ1cd5@dots jZ1cd6@y) (jZ1c71@ellipsis? jZ1cd5@dots)) jZ1cd3@ls/false)) (apply (lambda (jZ1cd9@dots jZ1cda@y) (jZ1ccb@f jZ1cda@y (lambda (jZ1cdd@maps) (call-with-values (lambda () (jZ1cba@k (cons '() jZ1cdd@maps))) (lambda (jZ1ce3@jZ1ce0 jZ1ce4@jZ1ce2) (let ((jZ1ce7@maps jZ1ce4@jZ1ce2) (jZ1ce8@x jZ1ce3@jZ1ce0)) (if (null? (car jZ1ce7@maps)) (jZe6a@syntax-violation '#f '"extra ellipsis in syntax form" jZ1c6d@src) (values (jZ1bfc@gen-mappend jZ1ce8@x (car jZ1ce7@maps)) (cdr jZ1ce7@maps))))))))) jZ1cd3@ls/false) (let ((jZ1ceb@t jZ1cd1@t)) (let ((jZ1ced@ls/false (jZd8a@syntax-dispatch jZ1ceb@t '_))) (if jZ1ced@ls/false (apply (lambda () (call-with-values (lambda () (jZ1bf6@gen-syntax jZ1c6d@src jZ1cb9@y jZ1c6f@r jZ1c70@maps jZ1c71@ellipsis? jZ1c72@vec?)) (lambda (jZ1cf3@jZ1cf0 jZ1cf4@jZ1cf2) (let ((jZ1cf7@maps jZ1cf4@jZ1cf2) (jZ1cf8@y jZ1cf3@jZ1cf0)) (call-with-values (lambda () (jZ1cba@k jZ1cf7@maps)) (lambda (jZ1cff@jZ1cfc jZ1d00@jZ1cfe) (let ((jZ1d03@maps jZ1d00@jZ1cfe) (jZ1d04@x jZ1cff@jZ1cfc)) (values (jZ1bfa@gen-append jZ1d04@x jZ1cf8@y) jZ1d03@maps)))))))) jZ1ced@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1ceb@t)))))))))))) jZ1cab@ls/false) (let ((jZ1d07@t jZ1ca9@t)) (let ((jZ1d09@ls/false (jZd8a@syntax-dispatch jZ1d07@t '(any . any)))) (if jZ1d09@ls/false (apply (lambda (jZ1d0b@x jZ1d0c@y) (call-with-values (lambda () (jZ1bf6@gen-syntax jZ1c6d@src jZ1d0b@x jZ1c6f@r jZ1c70@maps jZ1c71@ellipsis? '#f)) (lambda (jZ1d13@jZ1d10 jZ1d14@jZ1d12) (let ((jZ1d17@maps jZ1d14@jZ1d12) (jZ1d18@xnew jZ1d13@jZ1d10)) (call-with-values (lambda () (jZ1bf6@gen-syntax jZ1c6d@src jZ1d0c@y jZ1c6f@r jZ1d17@maps jZ1c71@ellipsis? jZ1c72@vec?)) (lambda (jZ1d1f@jZ1d1c jZ1d20@jZ1d1e) (let ((jZ1d23@maps jZ1d20@jZ1d1e) (jZ1d24@ynew jZ1d1f@jZ1d1c)) (values (jZ1c00@gen-cons jZ1c6e@e jZ1d0b@x jZ1d0c@y jZ1d18@xnew jZ1d24@ynew) jZ1d23@maps)))))))) jZ1d09@ls/false) (let ((jZ1d27@t jZ1d07@t)) (let ((jZ1d29@ls/false (jZd8a@syntax-dispatch jZ1d27@t '#(vector each-any)))) (if jZ1d29@ls/false (apply (lambda (jZ1d2b@ls) (call-with-values (lambda () (jZ1bf6@gen-syntax jZ1c6d@src jZ1d2b@ls jZ1c6f@r jZ1c70@maps jZ1c71@ellipsis? '#t)) (lambda (jZ1d31@jZ1d2e jZ1d32@jZ1d30) (let ((jZ1d35@maps jZ1d32@jZ1d30) (jZ1d36@lsnew jZ1d31@jZ1d2e)) (values (jZ1c02@gen-vector jZ1c6e@e jZ1d2b@ls jZ1d36@lsnew) jZ1d35@maps))))) jZ1d29@ls/false) (let ((jZ1d39@t jZ1d27@t)) (let ((jZ1d3b@ls/false (jZd8a@syntax-dispatch jZ1d39@t '_))) (if jZ1d3b@ls/false (apply (lambda () (values (list 'quote jZ1c6e@e) jZ1c70@maps)) jZ1d3b@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1d39@t)))))))))))))))))))))))) (set! jZ1bf8@gen-ref (lambda (jZ1c53@src jZ1c54@var jZ1c55@level jZ1c56@maps) (if (= jZ1c55@level '0) (values jZ1c54@var jZ1c56@maps) (if (null? jZ1c56@maps) (jZe6a@syntax-violation '#f '"missing ellipsis in syntax form" jZ1c53@src) (call-with-values (lambda () (jZ1bf8@gen-ref jZ1c53@src jZ1c54@var (- jZ1c55@level '1) (cdr jZ1c56@maps))) (lambda (jZ1c5f@jZ1c5c jZ1c60@jZ1c5e) (let ((jZ1c63@outer-maps jZ1c60@jZ1c5e) (jZ1c64@outer-var jZ1c5f@jZ1c5c)) (let ((jZ1c67@t (assq jZ1c64@outer-var (car jZ1c56@maps)))) (if jZ1c67@t ((lambda (jZ1c69@b) (values (cdr jZ1c69@b) jZ1c56@maps)) jZ1c67@t) (let ((jZ1c6b@inner-var (jZb0b@gen-lexical 'tmp))) (values jZ1c6b@inner-var (cons (cons (cons jZ1c64@outer-var jZ1c6b@inner-var) (car jZ1c56@maps)) jZ1c63@outer-maps)))))))))))) (set! jZ1bfa@gen-append (lambda (jZ1c4f@x jZ1c50@y) (if (fast-equal? jZ1c50@y ''()) jZ1c4f@x (list 'append jZ1c4f@x jZ1c50@y)))) (set! jZ1bfc@gen-mappend (lambda (jZ1c4b@e jZ1c4c@map-env) (list 'apply '(primitive append) (jZ1bfe@gen-map jZ1c4b@e jZ1c4c@map-env)))) (set! jZ1bfe@gen-map (lambda (jZ1c39@e jZ1c3a@map-env) (let ((jZ1c3d@formals (map cdr jZ1c3a@map-env)) (jZ1c3e@actuals (map (lambda (jZ1c41@x) (list 'ref (car jZ1c41@x))) jZ1c3a@map-env))) (if (eq? (car jZ1c39@e) 'ref) (car jZ1c3e@actuals) (if (for-all (lambda (jZ1c43@x) (and (eq? (car jZ1c43@x) 'ref) (memq (cadr jZ1c43@x) jZ1c3d@formals))) (cdr jZ1c39@e)) (let ((jZ1c45@args (map (let ((jZ1c47@r (map cons jZ1c3d@formals jZ1c3e@actuals))) (lambda (jZ1c49@x) (cdr (assq (cadr jZ1c49@x) jZ1c47@r)))) (cdr jZ1c39@e)))) (cons 'map (cons (list 'primitive (car jZ1c39@e)) jZ1c45@args))) (cons* 'map (list 'lambda jZ1c3d@formals jZ1c39@e) jZ1c3e@actuals)))))) (set! jZ1c00@gen-cons (lambda (jZ1c29@e jZ1c2a@x jZ1c2b@y jZ1c2c@xnew jZ1c2d@ynew) (let ((jZ1c33@t (car jZ1c2d@ynew))) (if (memv jZ1c33@t '(quote)) (if (eq? (car jZ1c2c@xnew) 'quote) (let ((jZ1c35@xnew (cadr jZ1c2c@xnew)) (jZ1c36@ynew (cadr jZ1c2d@ynew))) (if (and (eq? jZ1c35@xnew jZ1c2a@x) (eq? jZ1c36@ynew jZ1c2b@y)) (list 'quote jZ1c29@e) (list 'quote (cons jZ1c35@xnew jZ1c36@ynew)))) (if (null? (cadr jZ1c2d@ynew)) (list 'list jZ1c2c@xnew) (list 'cons jZ1c2c@xnew jZ1c2d@ynew))) (if (memv jZ1c33@t '(list)) (cons 'list (cons jZ1c2c@xnew (cdr jZ1c2d@ynew))) (list 'cons jZ1c2c@xnew jZ1c2d@ynew)))))) (set! jZ1c02@gen-vector (lambda (jZ1c23@e jZ1c24@ls jZ1c25@lsnew) (if (eq? (car jZ1c25@lsnew) 'quote) (if (eq? (cadr jZ1c25@lsnew) jZ1c24@ls) (list 'quote jZ1c23@e) (list 'quote (list->vector (cadr jZ1c25@lsnew)))) (if (eq? (car jZ1c25@lsnew) 'list) (cons 'vector (cdr jZ1c25@lsnew)) (list 'list->vector jZ1c25@lsnew))))) (set! jZ1c04@regen (lambda (jZ1c1d@x) (let ((jZ1c1f@t (car jZ1c1d@x))) (if (memv jZ1c1f@t '(ref)) (cadr jZ1c1d@x) (if (memv jZ1c1f@t '(primitive)) (list 'primitive (cadr jZ1c1d@x)) (if (memv jZ1c1f@t '(quote)) (list 'quote (cadr jZ1c1d@x)) (if (memv jZ1c1f@t '(lambda)) (jZae6@jZa12@build-lambda '#f (cadr jZ1c1d@x) (jZ1c04@regen (caddr jZ1c1d@x))) (if (memv jZ1c1f@t '(map)) (let ((jZ1c21@ls (map jZ1c04@regen (cdr jZ1c1d@x)))) (cons '(primitive ellipsis-map) jZ1c21@ls)) (cons (list 'primitive (car jZ1c1d@x)) (map jZ1c04@regen (cdr jZ1c1d@x))))))))))) (lambda (jZ1c05@e jZ1c06@r jZ1c07@mr) (let ((jZ1c0b@t jZ1c05@e)) (let ((jZ1c0d@ls/false (jZd8a@syntax-dispatch jZ1c0b@t '(_ any)))) (if jZ1c0d@ls/false (apply (lambda (jZ1c0f@x) (call-with-values (lambda () (jZ1bf6@gen-syntax jZ1c05@e jZ1c0f@x jZ1c06@r '() jZd8c@ellipsis? '#f)) (lambda (jZ1c15@jZ1c12 jZ1c16@jZ1c14) (let ((jZ1c19@maps jZ1c16@jZ1c14) (jZ1c1a@e jZ1c15@jZ1c12)) (jZ1c04@regen jZ1c1a@e))))) jZ1c0d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1c0b@t)))))))) (set! jZ2866@jZd96@syntax-transformer jZd96@syntax-transformer) (set! jZd98@core-macro-transformer (lambda (jZ1d3d@name) (let ((jZ1d3f@t jZ1d3d@name)) (if (memv jZ1d3f@t '(quote)) jZd3a@quote-transformer (if (memv jZ1d3f@t '(lambda)) jZd3e@lambda-transformer (if (memv jZ1d3f@t '(case-lambda)) jZd3c@case-lambda-transformer (if (memv jZ1d3f@t '(letrec)) jZd22@letrec-transformer (if (memv jZ1d3f@t '(letrec*)) jZd24@letrec*-transformer (if (memv jZ1d3f@t '(let)) jZd20@let-transformer (if (memv jZ1d3f@t '(if)) jZd32@if-transformer (if (memv jZ1d3f@t '(and)) jZd34@and-transformer (if (memv jZ1d3f@t '(or)) jZd36@or-transformer (if (memv jZ1d3f@t '(foreign-call)) jZd86@foreign-call-transformer (if (memv jZ1d3f@t '(syntax-case)) jZd92@syntax-case-transformer (if (memv jZ1d3f@t '(syntax)) jZd96@syntax-transformer (if (memv jZ1d3f@t '(type-descriptor)) jZd28@type-descriptor-transformer (if (memv jZ1d3f@t '(record-type-descriptor)) jZd2a@record-type-descriptor-transformer (if (memv jZ1d3f@t '(record-constructor-descriptor)) jZd2c@record-constructor-descriptor-transformer (if (memv jZ1d3f@t '(fluid-let-syntax)) jZd26@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" jZ1d3d@name)))))))))))))))))))) (set! jZ2867@jZd98@core-macro-transformer jZd98@core-macro-transformer) (set! jZd9a@symbol-macro (lambda (jZ1d41@x jZ1d42@set) (let ((jZ1d45@t jZ1d41@x)) (let ((jZ1d47@ls/false (jZd8a@syntax-dispatch jZ1d45@t '(_ any)))) (if (and jZ1d47@ls/false (apply (lambda (jZ1d49@name) (and (jZb83@id? jZ1d49@name) (memq (jZb85@id->sym jZ1d49@name) jZ1d42@set))) jZ1d47@ls/false)) (apply (lambda (jZ1d4b@name) (jZd40@bless (list 'quote jZ1d4b@name))) jZ1d47@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1d45@t)))))) (set! jZ2868@jZd9a@symbol-macro jZd9a@symbol-macro) (set! jZd9c@macro-transformer (lambda (jZ1d4d@x) (if (procedure? jZ1d4d@x) jZ1d4d@x (if (symbol? jZ1d4d@x) (let ((jZ1d4f@t jZ1d4d@x)) (if (memv jZ1d4f@t '(define-record-type)) jZd7e@define-record-type-macro (if (memv jZ1d4f@t '(define-struct)) jZd7c@define-struct-macro (if (memv jZ1d4f@t '(include)) jZd72@include-macro (if (memv jZ1d4f@t '(cond)) jZd6e@cond-macro (if (memv jZ1d4f@t '(let)) jZd46@let-macro (if (memv jZ1d4f@t '(do)) jZd66@do-macro (if (memv jZ1d4f@t '(or)) jZd6a@or-macro (if (memv jZ1d4f@t '(and)) jZd6c@and-macro (if (memv jZ1d4f@t '(let*)) jZd68@let*-macro (if (memv jZ1d4f@t '(let-values)) jZd48@let-values-macro (if (memv jZ1d4f@t '(let*-values)) jZd4a@let*-values-macro (if (memv jZ1d4f@t '(syntax-rules)) jZd76@syntax-rules-macro (if (memv jZ1d4f@t '(quasiquote)) jZd78@quasiquote-macro (if (memv jZ1d4f@t '(quasisyntax)) jZd7a@quasisyntax-macro (if (memv jZ1d4f@t '(with-syntax)) jZd42@with-syntax-macro (if (memv jZ1d4f@t '(when)) jZd2e@when-macro (if (memv jZ1d4f@t '(unless)) jZd30@unless-macro (if (memv jZ1d4f@t '(case)) jZd38@case-macro (if (memv jZ1d4f@t '(identifier-syntax)) jZd64@identifier-syntax-macro (if (memv jZ1d4f@t '(time)) jZd5c@time-macro (if (memv jZ1d4f@t '(delay)) jZd5e@delay-macro (if (memv jZ1d4f@t '(assert)) jZd60@assert-macro (if (memv jZ1d4f@t '(endianness)) jZd62@endianness-macro (if (memv jZ1d4f@t '(guard)) jZd58@guard-macro (if (memv jZ1d4f@t '(define-enumeration)) jZd5a@define-enumeration-macro (if (memv jZ1d4f@t '(trace-lambda)) jZd4c@trace-lambda-macro (if (memv jZ1d4f@t '(trace-define)) jZd4e@trace-define-macro (if (memv jZ1d4f@t '(trace-define-syntax)) jZd50@trace-define-syntax-macro (if (memv jZ1d4f@t '(trace-let-syntax)) jZd54@trace-let-syntax-macro (if (memv jZ1d4f@t '(trace-letrec-syntax)) jZd56@trace-letrec-syntax-macro (if (memv jZ1d4f@t '(define-condition-type)) jZd80@define-condition-type-macro (if (memv jZ1d4f@t '(parameterize)) jZd84@parameterize-macro (if (memv jZ1d4f@t '(include-into)) jZd74@include-into-macro (if (memv jZ1d4f@t '(eol-style)) (lambda (jZ1d51@x) (jZd9a@symbol-macro jZ1d51@x '(none lf cr crlf nel crnel ls))) (if (memv jZ1d4f@t '(error-handling-mode)) (lambda (jZ1d53@x) (jZd9a@symbol-macro jZ1d53@x '(ignore raise replace))) (if (memv jZ1d4f@t '(buffer-mode)) (lambda (jZ1d55@x) (jZd9a@symbol-macro jZ1d55@x '(none line block))) (if (memv jZ1d4f@t '(file-options)) jZafe@file-options-macro (if (memv jZ1d4f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) jZd82@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" jZ1d4d@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" jZ1d4d@x))))) (set! jZ2869@jZd9c@macro-transformer jZd9c@macro-transformer) (set! jZd9e@local-macro-transformer (lambda (jZ1d57@x) (car jZ1d57@x))) (set! jZ286a@jZd9e@local-macro-transformer jZd9e@local-macro-transformer) (set! jZda0@do-macro-call (lambda (jZ1d59@transformer jZ1d5a@expr) (let ((jZ1d5d@out (jZ1d59@transformer (jZb6d@add-mark jZb67@anti-mark jZ1d5a@expr '#f)))) (begin (let jZ1d61@f ((jZ1d5f@x jZ1d5d@out)) (if (not (jZb4f@stx? jZ1d5f@x)) (if (pair? jZ1d5f@x) (begin (jZ1d61@f (car jZ1d5f@x)) (jZ1d61@f (cdr jZ1d5f@x))) (if (vector? jZ1d5f@x) (vector-for-each jZ1d61@f jZ1d5f@x) (if (symbol? jZ1d5f@x) (jZe6a@syntax-violation '#f '"raw symbol encountered in output of macro" jZ1d5a@expr jZ1d5f@x) (void)))) (void))) (jZb6d@add-mark (jZb65@gen-mark) jZ1d5d@out jZ1d5a@expr))))) (set! jZ286b@jZda0@do-macro-call jZda0@do-macro-call) (set! jZda2@chi-macro (lambda (jZ1d63@p jZ1d64@e) (jZda0@do-macro-call (jZd9c@macro-transformer jZ1d63@p) jZ1d64@e))) (set! jZ286c@jZda2@chi-macro jZda2@chi-macro) (set! jZda4@chi-local-macro (lambda (jZ1d67@p jZ1d68@e) (jZda0@do-macro-call (jZd9e@local-macro-transformer jZ1d67@p) jZ1d68@e))) (set! jZ286d@jZda4@chi-local-macro jZda4@chi-local-macro) (set! jZda6@chi-global-macro (lambda (jZ1d6b@p jZ1d6c@e) (let ((jZ1d6f@lib (car jZ1d6b@p)) (jZ1d70@loc (cdr jZ1d6b@p))) (begin (jZ999@jZ7e4@visit-library jZ1d6f@lib) (let ((jZ1d73@x (symbol-value jZ1d70@loc))) (let ((jZ1d75@transformer (if (procedure? jZ1d73@x) jZ1d73@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" jZ1d73@x)))) (jZda0@do-macro-call jZ1d75@transformer jZ1d6c@e))))))) (set! jZ286e@jZda6@chi-global-macro jZda6@chi-global-macro) (set! jZda8@chi-expr* (lambda (jZ1d77@e* jZ1d78@r jZ1d79@mr) (if (null? jZ1d77@e*) '() (let ((jZ1d7d@e (jZdac@chi-expr (car jZ1d77@e*) jZ1d78@r jZ1d79@mr))) (cons jZ1d7d@e (jZda8@chi-expr* (cdr jZ1d77@e*) jZ1d78@r jZ1d79@mr)))))) (set! jZ286f@jZda8@chi-expr* jZda8@chi-expr*) (set! jZdaa@chi-application (lambda (jZ1d7f@e jZ1d80@r jZ1d81@mr) (let ((jZ1d85@t jZ1d7f@e)) (let ((jZ1d87@ls/false (jZd8a@syntax-dispatch jZ1d85@t '(any . each-any)))) (if jZ1d87@ls/false (apply (lambda (jZ1d89@rator jZ1d8a@rands) (let ((jZ1d8d@rator (jZdac@chi-expr jZ1d89@rator jZ1d80@r jZ1d81@mr))) (cons jZ1d8d@rator (jZda8@chi-expr* jZ1d8a@rands jZ1d80@r jZ1d81@mr)))) jZ1d87@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1d85@t)))))) (set! jZ2870@jZdaa@chi-application jZdaa@chi-application) (set! jZdac@chi-expr (lambda (jZ1d8f@e jZ1d90@r jZ1d91@mr) (call-with-values (lambda () (jZba5@syntax-type jZ1d8f@e jZ1d90@r)) (lambda (jZ1d9b@jZ1d96 jZ1d9c@jZ1d98 jZ1d9d@jZ1d9a) (let ((jZ1da1@kwd jZ1d9d@jZ1d9a) (jZ1da2@value jZ1d9c@jZ1d98) (jZ1da3@type jZ1d9b@jZ1d96)) (let ((jZ1da7@t jZ1da3@type)) (if (memv jZ1da7@t '(core-macro)) (let ((jZ1da9@transformer (jZd98@core-macro-transformer jZ1da2@value))) (jZ1da9@transformer jZ1d8f@e jZ1d90@r jZ1d91@mr)) (if (memv jZ1da7@t '(global)) (let ((jZ1dab@lib (car jZ1da2@value))) (let ((jZ1dad@loc (cdr jZ1da2@value))) (begin ((jZdf2@inv-collector) jZ1dab@lib) jZ1dad@loc))) (if (memv jZ1da7@t '(core-prim)) (let ((jZ1daf@name jZ1da2@value)) (list 'primitive jZ1daf@name)) (if (memv jZ1da7@t '(call)) (jZdaa@chi-application jZ1d8f@e jZ1d90@r jZ1d91@mr) (if (memv jZ1da7@t '(lexical)) (let ((jZ1db1@lex (jZd14@lexical-var jZ1da2@value))) jZ1db1@lex) (if (memv jZ1da7@t '(global-macro global-macro!)) (jZdac@chi-expr (jZda6@chi-global-macro jZ1da2@value jZ1d8f@e) jZ1d90@r jZ1d91@mr) (if (memv jZ1da7@t '(local-macro local-macro!)) (jZdac@chi-expr (jZda4@chi-local-macro jZ1da2@value jZ1d8f@e) jZ1d90@r jZ1d91@mr) (if (memv jZ1da7@t '(macro macro!)) (jZdac@chi-expr (jZda2@chi-macro jZ1da2@value jZ1d8f@e) jZ1d90@r jZ1d91@mr) (if (memv jZ1da7@t '(constant)) (let ((jZ1db3@datum jZ1da2@value)) (list 'quote jZ1db3@datum)) (if (memv jZ1da7@t '(set!)) (jZdae@chi-set! jZ1d8f@e jZ1d90@r jZ1d91@mr) (if (memv jZ1da7@t '(begin)) (let ((jZ1db5@t jZ1d8f@e)) (let ((jZ1db7@ls/false (jZd8a@syntax-dispatch jZ1db5@t '(_ any . each-any)))) (if jZ1db7@ls/false (apply (lambda (jZ1db9@x jZ1dba@x*) (jZae8@jZa42@build-sequence '#f (jZda8@chi-expr* (cons jZ1db9@x jZ1dba@x*) jZ1d90@r jZ1d91@mr))) jZ1db7@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1db5@t)))) (if (memv jZ1da7@t '(let-syntax letrec-syntax)) (let ((jZ1dbd@t jZ1d8f@e)) (let ((jZ1dbf@ls/false (jZd8a@syntax-dispatch jZ1dbd@t '(_ #(each (any any)) any . each-any)))) (if (and jZ1dbf@ls/false (apply (lambda (jZ1dc1@xlhs* jZ1dc2@xrhs* jZ1dc3@xbody jZ1dc4@xbody*) (if (not (jZb8b@valid-bound-ids? jZ1dc1@xlhs*)) (jZe6a@syntax-violation '#f '"invalid identifiers" jZ1d8f@e) (void))) jZ1dbf@ls/false)) (apply (lambda (jZ1dc9@xlhs* jZ1dca@xrhs* jZ1dcb@xbody jZ1dcc@xbody*) (let ((jZ1dd1@xlab* (map jZb0f@gen-label jZ1dc9@xlhs*))) (let ((jZ1dd3@xrib (jZb43@make-full-rib jZ1dc9@xlhs* jZ1dd1@xlab*))) (let ((jZ1dd5@xb* (map (lambda (jZ1dd7@x) (jZbbb@make-eval-transformer (jZde4@expand-transformer (if (eq? jZ1da3@type 'let-syntax) jZ1dd7@x (jZb6f@add-subst jZ1dd3@xrib jZ1dd7@x)) jZ1d91@mr))) jZ1dca@xrhs*))) (jZae8@jZa42@build-sequence '#f (jZda8@chi-expr* (map (lambda (jZ1dd9@x) (jZb6f@add-subst jZ1dd3@xrib jZ1dd9@x)) (cons jZ1dcb@xbody jZ1dcc@xbody*)) (append (map cons jZ1dd1@xlab* jZ1dd5@xb*) jZ1d90@r) (append (map cons jZ1dd1@xlab* jZ1dd5@xb*) jZ1d91@mr))))))) jZ1dbf@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1dbd@t)))) (if (memv jZ1da7@t '(displaced-lexical)) (jZe6a@syntax-violation '#f '"identifier out of context" jZ1d8f@e) (if (memv jZ1da7@t '(syntax)) (jZe6a@syntax-violation '#f '"reference to pattern variable outside a syntax form" jZ1d8f@e) (if (memv jZ1da7@t '(define define-syntax module import library)) (jZe6a@syntax-violation '#f (string-append (let ((jZ1ddb@t jZ1da3@type)) (if (memv jZ1ddb@t '(define)) '"a definition" (if (memv jZ1ddb@t '(define-syntax)) '"a define-syntax" (if (memv jZ1ddb@t '(module)) '"a module definition" (if (memv jZ1ddb@t '(library)) '"a library definition" (if (memv jZ1ddb@t '(import)) '"an import declaration" (if (memv jZ1ddb@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") jZ1d8f@e) (if (memv jZ1da7@t '(mutable)) (jZe6a@syntax-violation '#f '"attempt to reference an unexportable variable" jZ1d8f@e) (jZe6a@syntax-violation '#f '"invalid expression" jZ1d8f@e))))))))))))))))))))))) (set! jZ2871@jZdac@chi-expr jZdac@chi-expr) (set! jZdae@chi-set! (lambda (jZ1ddd@e jZ1dde@r jZ1ddf@mr) (let ((jZ1de3@t jZ1ddd@e)) (let ((jZ1de5@ls/false (jZd8a@syntax-dispatch jZ1de3@t '(_ any any)))) (if (and jZ1de5@ls/false (apply (lambda (jZ1de7@x jZ1de8@v) (jZb83@id? jZ1de7@x)) jZ1de5@ls/false)) (apply (lambda (jZ1deb@x jZ1dec@v) (call-with-values (lambda () (jZba5@syntax-type jZ1deb@x jZ1dde@r)) (lambda (jZ1df5@jZ1df0 jZ1df6@jZ1df2 jZ1df7@jZ1df4) (let ((jZ1dfb@kwd jZ1df7@jZ1df4) (jZ1dfc@value jZ1df6@jZ1df2) (jZ1dfd@type jZ1df5@jZ1df0)) (let ((jZ1e01@t jZ1dfd@type)) (if (memv jZ1e01@t '(lexical)) (begin (jZd18@set-lexical-mutable! jZ1dfc@value '#t) (list 'set! (jZd14@lexical-var jZ1dfc@value) (jZdac@chi-expr jZ1dec@v jZ1dde@r jZ1ddf@mr))) (if (memv jZ1e01@t '(core-prim)) (jZe6a@syntax-violation '#f '"cannot modify imported core primitive" jZ1ddd@e) (if (memv jZ1e01@t '(global)) (jZe6a@syntax-violation '#f '"attempt to modify imported binding" jZ1ddd@e) (if (memv jZ1e01@t '(global-macro!)) (jZdac@chi-expr (jZda6@chi-global-macro jZ1dfc@value jZ1ddd@e) jZ1dde@r jZ1ddf@mr) (if (memv jZ1e01@t '(local-macro!)) (jZdac@chi-expr (jZda4@chi-local-macro jZ1dfc@value jZ1ddd@e) jZ1dde@r jZ1ddf@mr) (if (memv jZ1e01@t '(mutable)) (jZe6a@syntax-violation '#f '"attempt to assign to an unexportable variable" jZ1ddd@e) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1ddd@e)))))))))))) jZ1de5@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1de3@t)))))) (set! jZ2872@jZdae@chi-set! jZdae@chi-set!) (set! jZdb0@verify-formals (lambda (jZ1e03@fmls jZ1e04@stx) (let ((jZ1e07@t jZ1e03@fmls)) (let ((jZ1e09@ls/false (jZd8a@syntax-dispatch jZ1e07@t 'each-any))) (if jZ1e09@ls/false (apply (lambda (jZ1e0b@x*) (if (not (jZb8b@valid-bound-ids? jZ1e0b@x*)) (jZd44@invalid-fmls-error jZ1e04@stx jZ1e03@fmls) (void))) jZ1e09@ls/false) (let ((jZ1e0d@t jZ1e07@t)) (let ((jZ1e0f@ls/false (jZd8a@syntax-dispatch jZ1e0d@t '#(each+ any () any)))) (if jZ1e0f@ls/false (apply (lambda (jZ1e11@x* jZ1e12@x) (if (not (jZb8b@valid-bound-ids? (cons jZ1e12@x jZ1e11@x*))) (jZd44@invalid-fmls-error jZ1e04@stx jZ1e03@fmls) (void))) jZ1e0f@ls/false) (let ((jZ1e15@t jZ1e0d@t)) (let ((jZ1e17@ls/false (jZd8a@syntax-dispatch jZ1e15@t '_))) (if jZ1e17@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid syntax" jZ1e04@stx)) jZ1e17@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1e15@t)))))))))))) (set! jZ2873@jZdb0@verify-formals jZdb0@verify-formals) (set! jZdb2@chi-lambda-clause (lambda (jZ1e19@stx jZ1e1a@fmls jZ1e1b@body* jZ1e1c@r jZ1e1d@mr) (let ((jZ1e23@t jZ1e1a@fmls)) (let ((jZ1e25@ls/false (jZd8a@syntax-dispatch jZ1e23@t 'each-any))) (if jZ1e25@ls/false (apply (lambda (jZ1e27@x*) (begin (jZdb0@verify-formals jZ1e1a@fmls jZ1e19@stx) (let ((jZ1e29@lex* (map jZb0b@gen-lexical jZ1e27@x*)) (jZ1e2a@lab* (map jZb0f@gen-label jZ1e27@x*))) (values jZ1e29@lex* (jZdc2@chi-internal (jZb6f@add-subst (jZb43@make-full-rib jZ1e27@x* jZ1e2a@lab*) jZ1e1b@body*) (jZd1c@add-lexicals jZ1e2a@lab* jZ1e29@lex* jZ1e1c@r) jZ1e1d@mr))))) jZ1e25@ls/false) (let ((jZ1e2d@t jZ1e23@t)) (let ((jZ1e2f@ls/false (jZd8a@syntax-dispatch jZ1e2d@t '#(each+ any () any)))) (if jZ1e2f@ls/false (apply (lambda (jZ1e31@x* jZ1e32@x) (begin (jZdb0@verify-formals jZ1e1a@fmls jZ1e19@stx) (let ((jZ1e35@lex* (map jZb0b@gen-lexical jZ1e31@x*)) (jZ1e36@lab* (map jZb0f@gen-label jZ1e31@x*)) (jZ1e37@lex (jZb0b@gen-lexical jZ1e32@x)) (jZ1e38@lab (jZb0f@gen-label jZ1e32@x))) (values (append jZ1e35@lex* jZ1e37@lex) (jZdc2@chi-internal (jZb6f@add-subst (jZb43@make-full-rib (cons jZ1e32@x jZ1e31@x*) (cons jZ1e38@lab jZ1e36@lab*)) jZ1e1b@body*) (jZd1c@add-lexicals (cons jZ1e38@lab jZ1e36@lab*) (cons jZ1e37@lex jZ1e35@lex*) jZ1e1c@r) jZ1e1d@mr))))) jZ1e2f@ls/false) (let ((jZ1e3d@t jZ1e2d@t)) (let ((jZ1e3f@ls/false (jZd8a@syntax-dispatch jZ1e3d@t '_))) (if jZ1e3f@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid syntax" jZ1e1a@fmls)) jZ1e3f@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1e3d@t)))))))))))) (set! jZ2874@jZdb2@chi-lambda-clause jZdb2@chi-lambda-clause) (set! jZdb4@chi-lambda-clause* (lambda (jZ1e41@stx jZ1e42@fmls* jZ1e43@body** jZ1e44@r jZ1e45@mr) (if (null? jZ1e42@fmls*) (values '() '()) (call-with-values (lambda () (jZdb2@chi-lambda-clause jZ1e41@stx (car jZ1e42@fmls*) (car jZ1e43@body**) jZ1e44@r jZ1e45@mr)) (lambda (jZ1e4f@jZ1e4c jZ1e50@jZ1e4e) (let ((jZ1e53@b jZ1e50@jZ1e4e) (jZ1e54@a jZ1e4f@jZ1e4c)) (call-with-values (lambda () (jZdb4@chi-lambda-clause* jZ1e41@stx (cdr jZ1e42@fmls*) (cdr jZ1e43@body**) jZ1e44@r jZ1e45@mr)) (lambda (jZ1e5b@jZ1e58 jZ1e5c@jZ1e5a) (let ((jZ1e5f@b* jZ1e5c@jZ1e5a) (jZ1e60@a* jZ1e5b@jZ1e58)) (values (cons jZ1e54@a jZ1e60@a*) (cons jZ1e53@b jZ1e5f@b*))))))))))) (set! jZ2875@jZdb4@chi-lambda-clause* jZdb4@chi-lambda-clause*) (set! jZdb6@chi-defun (lambda (jZ1e63@x jZ1e64@r jZ1e65@mr) (let ((jZ1e69@fmls (car jZ1e63@x)) (jZ1e6a@body* (cdr jZ1e63@x))) (call-with-values (lambda () (jZdb2@chi-lambda-clause jZ1e69@fmls jZ1e69@fmls jZ1e6a@body* jZ1e64@r jZ1e65@mr)) (lambda (jZ1e71@jZ1e6e jZ1e72@jZ1e70) (let ((jZ1e75@body jZ1e72@jZ1e70) (jZ1e76@fmls jZ1e71@jZ1e6e)) (jZae6@jZa12@build-lambda '#f jZ1e76@fmls jZ1e75@body))))))) (set! jZ2876@jZdb6@chi-defun jZdb6@chi-defun) (set! jZdb8@chi-rhs (lambda (jZ1e79@rhs jZ1e7a@r jZ1e7b@mr) (let ((jZ1e7f@t (car jZ1e79@rhs))) (if (memv jZ1e7f@t '(defun)) (jZdb6@chi-defun (cdr jZ1e79@rhs) jZ1e7a@r jZ1e7b@mr) (if (memv jZ1e7f@t '(expr)) (let ((jZ1e81@expr (cdr jZ1e79@rhs))) (jZdac@chi-expr jZ1e81@expr jZ1e7a@r jZ1e7b@mr)) (if (memv jZ1e7f@t '(top-expr)) (let ((jZ1e83@expr (cdr jZ1e79@rhs))) (jZae8@jZa42@build-sequence '#f (list (jZdac@chi-expr jZ1e83@expr jZ1e7a@r jZ1e7b@mr) (jZae9@jZa44@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" jZ1e79@rhs))))))) (set! jZ2877@jZdb8@chi-rhs jZdb8@chi-rhs) (set! jZdba@expand-interaction-rhs*/init* (lambda (jZ1e85@lhs* jZ1e86@rhs* jZ1e87@init* jZ1e88@r jZ1e89@mr) (let jZ1e93@f ((jZ1e8f@lhs* jZ1e85@lhs*) (jZ1e90@rhs* jZ1e86@rhs*)) (if (null? jZ1e8f@lhs*) (map (lambda (jZ1e95@x) (jZdac@chi-expr jZ1e95@x jZ1e88@r jZ1e89@mr)) jZ1e87@init*) (let ((jZ1e97@lhs (car jZ1e8f@lhs*)) (jZ1e98@rhs (car jZ1e90@rhs*))) (let ((jZ1e9b@t (car jZ1e98@rhs))) (if (memv jZ1e9b@t '(defun)) (let ((jZ1e9d@rhs (jZdb6@chi-defun (cdr jZ1e98@rhs) jZ1e88@r jZ1e89@mr))) (cons (list 'set! jZ1e97@lhs jZ1e9d@rhs) (jZ1e93@f (cdr jZ1e8f@lhs*) (cdr jZ1e90@rhs*)))) (if (memv jZ1e9b@t '(expr)) (let ((jZ1e9f@rhs (jZdac@chi-expr (cdr jZ1e98@rhs) jZ1e88@r jZ1e89@mr))) (cons (list 'set! jZ1e97@lhs jZ1e9f@rhs) (jZ1e93@f (cdr jZ1e8f@lhs*) (cdr jZ1e90@rhs*)))) (if (memv jZ1e9b@t '(top-expr)) (let ((jZ1ea1@e (jZdac@chi-expr (cdr jZ1e98@rhs) jZ1e88@r jZ1e89@mr))) (cons jZ1ea1@e (jZ1e93@f (cdr jZ1e8f@lhs*) (cdr jZ1e90@rhs*)))) (error 'expand-interaction '"invallid" jZ1e98@rhs)))))))))) (set! jZ2878@jZdba@expand-interaction-rhs*/init* jZdba@expand-interaction-rhs*/init*) (set! jZdbc@chi-rhs* (lambda (jZ1ea3@rhs* jZ1ea4@r jZ1ea5@mr) (let jZ1eab@f ((jZ1ea9@ls jZ1ea3@rhs*)) (if (null? jZ1ea9@ls) '() (let ((jZ1ead@a (jZdb8@chi-rhs (car jZ1ea9@ls) jZ1ea4@r jZ1ea5@mr))) (cons jZ1ead@a (jZ1eab@f (cdr jZ1ea9@ls)))))))) (set! jZ2879@jZdbc@chi-rhs* jZdbc@chi-rhs*) (set! jZdbe@find-bound=? (lambda (jZ1eaf@x jZ1eb0@lhs* jZ1eb1@rhs*) (if (null? jZ1eb0@lhs*) '#f (if (jZb87@bound-id=? jZ1eaf@x (car jZ1eb0@lhs*)) (car jZ1eb1@rhs*) (jZdbe@find-bound=? jZ1eaf@x (cdr jZ1eb0@lhs*) (cdr jZ1eb1@rhs*)))))) (set! jZ287a@jZdbe@find-bound=? jZdbe@find-bound=?) (set! jZdc0@find-dups (lambda (jZ1eb5@ls) (let jZ1ebb@f ((jZ1eb7@ls jZ1eb5@ls) (jZ1eb8@dups '())) (if (null? jZ1eb7@ls) jZ1eb8@dups (let ((jZ1ebd@t (jZdbe@find-bound=? (car jZ1eb7@ls) (cdr jZ1eb7@ls) (cdr jZ1eb7@ls)))) (if jZ1ebd@t ((lambda (jZ1ebf@x) (jZ1ebb@f (cdr jZ1eb7@ls) (cons (list (car jZ1eb7@ls) jZ1ebf@x) jZ1eb8@dups))) jZ1ebd@t) (jZ1ebb@f (cdr jZ1eb7@ls) jZ1eb8@dups))))))) (set! jZ287b@jZdc0@find-dups jZdc0@find-dups) (set! jZdc2@chi-internal (lambda (jZ1ec1@e* jZ1ec2@r jZ1ec3@mr) (let ((jZ1ec7@rib (jZb37@make-empty-rib))) (call-with-values (lambda () (jZde2@chi-body* (map (lambda (jZ1ed9@x) (jZb6f@add-subst jZ1ec7@rib jZ1ed9@x)) (jZb81@syntax->list jZ1ec1@e*)) jZ1ec2@r jZ1ec3@mr '() '() '() '() '() jZ1ec7@rib '#f)) (lambda (jZ1edb@jZ1eca jZ1edc@jZ1ecc jZ1edd@jZ1ece jZ1ede@jZ1ed0 jZ1edf@jZ1ed2 jZ1ee0@jZ1ed4 jZ1ee1@jZ1ed6 jZ1ee2@jZ1ed8) (let ((jZ1eeb@_exp* jZ1ee2@jZ1ed8) (jZ1eec@kwd* jZ1ee1@jZ1ed6) (jZ1eed@mod** jZ1ee0@jZ1ed4) (jZ1eee@rhs* jZ1edf@jZ1ed2) (jZ1eef@lex* jZ1ede@jZ1ed0) (jZ1ef0@mr jZ1edd@jZ1ece) (jZ1ef1@r jZ1edc@jZ1ecc) (jZ1ef2@e* jZ1edb@jZ1eca)) (begin (if (null? jZ1ef2@e*) (jZe6a@syntax-violation '#f '"no expression in body" jZ1ef2@e*) (void)) (let ((jZ1efb@init* (jZda8@chi-expr* (append (apply append (reverse jZ1eed@mod**)) jZ1ef2@e*) jZ1ef1@r jZ1ef0@mr))) (let ((jZ1efd@rhs* (jZdbc@chi-rhs* jZ1eee@rhs* jZ1ef1@r jZ1ef0@mr))) (jZaed@jZa4c@build-letrec* '#f (reverse jZ1eef@lex*) (reverse jZ1efd@rhs*) (jZae8@jZa42@build-sequence '#f jZ1efb@init*))))))))))) (set! jZ287c@jZdc2@chi-internal jZdc2@chi-internal) (set! jZdc4@parse-module (lambda (jZ1eff@e) (let ((jZ1f01@t jZ1eff@e)) (let ((jZ1f03@ls/false (jZd8a@syntax-dispatch jZ1f01@t '(_ each-any . each-any)))) (if jZ1f03@ls/false (apply (lambda (jZ1f05@export* jZ1f06@b*) (begin (if (not (for-all jZb83@id? jZ1f05@export*)) (jZe6a@syntax-violation '#f '"module exports must be identifiers" jZ1eff@e) (void)) (values '#f (list->vector jZ1f05@export*) jZ1f06@b*))) jZ1f03@ls/false) (let ((jZ1f09@t jZ1f01@t)) (let ((jZ1f0b@ls/false (jZd8a@syntax-dispatch jZ1f09@t '(_ any each-any . each-any)))) (if jZ1f0b@ls/false (apply (lambda (jZ1f0d@name jZ1f0e@export* jZ1f0f@b*) (begin (if (not (jZb83@id? jZ1f0d@name)) (jZe6a@syntax-violation '#f '"module name must be an identifier" jZ1eff@e) (void)) (if (not (for-all jZb83@id? jZ1f0e@export*)) (jZe6a@syntax-violation '#f '"module exports must be identifiers" jZ1eff@e) (void)) (values jZ1f0d@name (list->vector jZ1f0e@export*) jZ1f0f@b*))) jZ1f0b@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1f09@t))))))))) (set! jZ287d@jZdc4@parse-module jZdc4@parse-module) (set! jZdce@module-interface? (lambda (jZ1f13@x) (and (simple-struct? jZ1f13@x) (eq? (simple-struct-name jZ1f13@x) 'module-interface)))) (set! jZ287e@jZdce@module-interface? jZdce@module-interface?) (set! jZdd0@module-interface-first-mark (lambda (jZ1f15@x) (simple-struct-ref jZ1f15@x '0))) (set! jZ287f@jZdd0@module-interface-first-mark jZdd0@module-interface-first-mark) (set! jZdd2@set-module-interface-first-mark! (lambda (jZ1f17@x jZ1f18@val) (simple-struct-set! jZ1f17@x '0 jZ1f18@val))) (set! jZ2880@jZdd2@set-module-interface-first-mark! jZdd2@set-module-interface-first-mark!) (set! jZdd4@module-interface-exp-id-vec (lambda (jZ1f1b@x) (simple-struct-ref jZ1f1b@x '1))) (set! jZ2881@jZdd4@module-interface-exp-id-vec jZdd4@module-interface-exp-id-vec) (set! jZdd6@set-module-interface-exp-id-vec! (lambda (jZ1f1d@x jZ1f1e@val) (simple-struct-set! jZ1f1d@x '1 jZ1f1e@val))) (set! jZ2882@jZdd6@set-module-interface-exp-id-vec! jZdd6@set-module-interface-exp-id-vec!) (set! jZdd8@module-interface-exp-lab-vec (lambda (jZ1f21@x) (simple-struct-ref jZ1f21@x '2))) (set! jZ2883@jZdd8@module-interface-exp-lab-vec jZdd8@module-interface-exp-lab-vec) (set! jZdda@set-module-interface-exp-lab-vec! (lambda (jZ1f23@x jZ1f24@val) (simple-struct-set! jZ1f23@x '2 jZ1f24@val))) (set! jZ2884@jZdda@set-module-interface-exp-lab-vec! jZdda@set-module-interface-exp-lab-vec!) (set! jZddc@dummy '3) (set! jZ2885@jZddc@dummy jZddc@dummy) (set! jZdde@module-interface-exp-id* (lambda (jZ1f27@iface jZ1f28@id) (let ((jZ1f2c@diff-marks '#f)) (begin (set! jZ1f2c@diff-marks (lambda (jZ1f33@ls jZ1f34@x) (begin (if (null? jZ1f33@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((jZ1f37@a (car jZ1f33@ls))) (if (eq? jZ1f37@a jZ1f34@x) '() (cons jZ1f37@a (jZ1f2c@diff-marks (cdr jZ1f33@ls) jZ1f34@x))))))) (let ((jZ1f2d@diff (jZ1f2c@diff-marks (jZb55@stx-mark* jZ1f28@id) (jZdd0@module-interface-first-mark jZ1f27@iface))) (jZ1f2e@id-vec (jZdd4@module-interface-exp-id-vec jZ1f27@iface))) (if (null? jZ1f2d@diff) jZ1f2e@id-vec (vector-map (lambda (jZ1f31@x) (make-simple-struct 'stx '5 (list (jZb51@stx-expr jZ1f31@x) (append jZ1f2d@diff (jZb55@stx-mark* jZ1f31@x)) '() '()))) jZ1f2e@id-vec))))))) (set! jZ2886@jZdde@module-interface-exp-id* jZdde@module-interface-exp-id*) (set! jZde0@chi-internal-module (lambda (jZ1f39@e jZ1f3a@r jZ1f3b@mr jZ1f3c@lex* jZ1f3d@rhs* jZ1f3e@mod** jZ1f3f@kwd*) (call-with-values (lambda () (jZdc4@parse-module jZ1f39@e)) (lambda (jZ1f4d@jZ1f48 jZ1f4e@jZ1f4a jZ1f4f@jZ1f4c) (let ((jZ1f53@e* jZ1f4f@jZ1f4c) (jZ1f54@exp-id* jZ1f4e@jZ1f4a) (jZ1f55@name jZ1f4d@jZ1f48)) (let ((jZ1f59@rib (jZb37@make-empty-rib))) (let ((jZ1f5b@e* (map (lambda (jZ1f5d@x) (jZb6f@add-subst jZ1f59@rib jZ1f5d@x)) (jZb81@syntax->list jZ1f53@e*)))) (call-with-values (lambda () (jZde2@chi-body* jZ1f5b@e* jZ1f3a@r jZ1f3b@mr jZ1f3c@lex* jZ1f3d@rhs* jZ1f3e@mod** jZ1f3f@kwd* '() jZ1f59@rib '#f)) (lambda (jZ1f6f@jZ1f60 jZ1f70@jZ1f62 jZ1f71@jZ1f64 jZ1f72@jZ1f66 jZ1f73@jZ1f68 jZ1f74@jZ1f6a jZ1f75@jZ1f6c jZ1f76@jZ1f6e) (let ((jZ1f7f@_exp* jZ1f76@jZ1f6e) (jZ1f80@kwd* jZ1f75@jZ1f6c) (jZ1f81@mod** jZ1f74@jZ1f6a) (jZ1f82@rhs* jZ1f73@jZ1f68) (jZ1f83@lex* jZ1f72@jZ1f66) (jZ1f84@mr jZ1f71@jZ1f64) (jZ1f85@r jZ1f70@jZ1f62) (jZ1f86@e* jZ1f6f@jZ1f60)) (let ((jZ1f8f@exp-lab* (vector-map (lambda (jZ1f93@x) (or (jZb99@id->label (make-simple-struct 'stx '5 (list (jZb85@id->sym jZ1f93@x) (jZb55@stx-mark* jZ1f93@x) (list jZ1f59@rib) '()))) (jZe6a@syntax-violation '#f '"cannot find module export" jZ1f93@x))) jZ1f54@exp-id*)) (jZ1f90@mod** (cons jZ1f86@e* jZ1f81@mod**))) (if (not jZ1f55@name) (values jZ1f83@lex* jZ1f82@rhs* jZ1f54@exp-id* jZ1f8f@exp-lab* jZ1f85@r jZ1f84@mr jZ1f90@mod** jZ1f80@kwd*) (let ((jZ1f95@lab (jZb0f@gen-label 'module)) (jZ1f96@iface (make-simple-struct 'module-interface '4 (list (car (jZb55@stx-mark* jZ1f55@name)) (vector-map (lambda (jZ1f99@x) (make-simple-struct 'stx '5 (list (jZb51@stx-expr jZ1f99@x) (jZb55@stx-mark* jZ1f99@x) '() '()))) jZ1f54@exp-id*) jZ1f8f@exp-lab*)))) (values jZ1f83@lex* jZ1f82@rhs* (vector jZ1f55@name) (vector jZ1f95@lab) (cons (cons jZ1f95@lab (cons '$module jZ1f96@iface)) jZ1f85@r) (cons (cons jZ1f95@lab (cons '$module jZ1f96@iface)) jZ1f84@mr) jZ1f90@mod** jZ1f80@kwd*)))))))))))))) (set! jZ2887@jZde0@chi-internal-module jZde0@chi-internal-module) (set! jZde2@chi-body* (lambda (jZ1f9b@e* jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fa1@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?) (if (null? jZ1f9b@e*) (values jZ1f9b@e* jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fa1@kwd* jZ1fa2@exp*) (let ((jZ1faf@e (car jZ1f9b@e*))) (call-with-values (lambda () (jZba5@syntax-type jZ1faf@e jZ1f9c@r)) (lambda (jZ1fb7@jZ1fb2 jZ1fb8@jZ1fb4 jZ1fb9@jZ1fb6) (let ((jZ1fbd@kwd jZ1fb9@jZ1fb6) (jZ1fbe@value jZ1fb8@jZ1fb4) (jZ1fbf@type jZ1fb7@jZ1fb2)) (let ((jZ1fc3@kwd* (if (jZb83@id? jZ1fbd@kwd) (cons jZ1fbd@kwd jZ1fa1@kwd*) jZ1fa1@kwd*))) (let ((jZ1fc5@t jZ1fbf@type)) (if (memv jZ1fc5@t '(define)) (call-with-values (lambda () (jZd0c@parse-define jZ1faf@e)) (lambda (jZ1fcb@jZ1fc8 jZ1fcc@jZ1fca) (let ((jZ1fcf@rhs jZ1fcc@jZ1fca) (jZ1fd0@id jZ1fcb@jZ1fc8)) (begin (if (jZb8f@bound-id-member? jZ1fd0@id jZ1fc3@kwd*) (jZe6a@syntax-violation '#f '"cannot redefine keyword" jZ1faf@e) (void)) (call-with-values (lambda () (jZb13@gen-define-label+loc jZ1fd0@id jZ1fa3@rib)) (lambda (jZ1fd7@jZ1fd4 jZ1fd8@jZ1fd6) (let ((jZ1fdb@lex jZ1fd8@jZ1fd6) (jZ1fdc@lab jZ1fd7@jZ1fd4)) (begin (jZb39@extend-rib! jZ1fa3@rib jZ1fd0@id jZ1fdc@lab) (jZde2@chi-body* (cdr jZ1f9b@e*) (jZd1a@add-lexical jZ1fdc@lab jZ1fdb@lex jZ1f9c@r) jZ1f9d@mr (cons jZ1fdb@lex jZ1f9e@lex*) (cons jZ1fcf@rhs jZ1f9f@rhs*) jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?))))))))) (if (memv jZ1fc5@t '(define-syntax)) (call-with-values (lambda () (jZd0e@parse-define-syntax jZ1faf@e)) (lambda (jZ1fe3@jZ1fe0 jZ1fe4@jZ1fe2) (let ((jZ1fe7@rhs jZ1fe4@jZ1fe2) (jZ1fe8@id jZ1fe3@jZ1fe0)) (begin (if (jZb8f@bound-id-member? jZ1fe8@id jZ1fc3@kwd*) (jZe6a@syntax-violation '#f '"cannot redefine keyword" jZ1faf@e) (void)) (let ((jZ1feb@lab (jZb15@gen-define-label jZ1fe8@id jZ1fa3@rib)) (jZ1fec@expanded-rhs (jZde4@expand-transformer jZ1fe7@rhs jZ1f9d@mr))) (begin (jZb39@extend-rib! jZ1fa3@rib jZ1fe8@id jZ1feb@lab) (let ((jZ1fef@b (jZbbb@make-eval-transformer jZ1fec@expanded-rhs))) (jZde2@chi-body* (cdr jZ1f9b@e*) (cons (cons jZ1feb@lab jZ1fef@b) jZ1f9c@r) (cons (cons jZ1feb@lab jZ1fef@b) jZ1f9d@mr) jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?)))))))) (if (memv jZ1fc5@t '(let-syntax letrec-syntax)) (let ((jZ1ff1@t jZ1faf@e)) (let ((jZ1ff3@ls/false (jZd8a@syntax-dispatch jZ1ff1@t '(_ #(each (any any)) . each-any)))) (if (and jZ1ff3@ls/false (apply (lambda (jZ1ff5@xlhs* jZ1ff6@xrhs* jZ1ff7@xbody*) (if (not (jZb8b@valid-bound-ids? jZ1ff5@xlhs*)) (jZe6a@syntax-violation '#f '"invalid identifiers" jZ1faf@e) (void))) jZ1ff3@ls/false)) (apply (lambda (jZ1ffb@xlhs* jZ1ffc@xrhs* jZ1ffd@xbody*) (let ((jZ2001@xlab* (map jZb0f@gen-label jZ1ffb@xlhs*))) (let ((jZ2003@xrib (jZb43@make-full-rib jZ1ffb@xlhs* jZ2001@xlab*))) (let ((jZ2005@xb* (map (lambda (jZ2007@x) (jZbbb@make-eval-transformer (jZde4@expand-transformer (if (eq? jZ1fbf@type 'let-syntax) jZ2007@x (jZb6f@add-subst jZ2003@xrib jZ2007@x)) jZ1f9d@mr))) jZ1ffc@xrhs*))) (jZde2@chi-body* (append (map (lambda (jZ2009@x) (jZb6f@add-subst jZ2003@xrib jZ2009@x)) jZ1ffd@xbody*) (cdr jZ1f9b@e*)) (append (map cons jZ2001@xlab* jZ2005@xb*) jZ1f9c@r) (append (map cons jZ2001@xlab* jZ2005@xb*) jZ1f9d@mr) jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?))))) jZ1ff3@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ1ff1@t)))) (if (memv jZ1fc5@t '(begin)) (let ((jZ200b@t jZ1faf@e)) (let ((jZ200d@ls/false (jZd8a@syntax-dispatch jZ200b@t '(_ . each-any)))) (if jZ200d@ls/false (apply (lambda (jZ200f@x*) (jZde2@chi-body* (append jZ200f@x* (cdr jZ1f9b@e*)) jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?)) jZ200d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ200b@t)))) (if (memv jZ1fc5@t '(global-macro global-macro!)) (jZde2@chi-body* (cons (jZb6f@add-subst jZ1fa3@rib (jZda6@chi-global-macro jZ1fbe@value jZ1faf@e)) (cdr jZ1f9b@e*)) jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?) (if (memv jZ1fc5@t '(local-macro local-macro!)) (jZde2@chi-body* (cons (jZb6f@add-subst jZ1fa3@rib (jZda4@chi-local-macro jZ1fbe@value jZ1faf@e)) (cdr jZ1f9b@e*)) jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?) (if (memv jZ1fc5@t '(macro macro!)) (jZde2@chi-body* (cons (jZb6f@add-subst jZ1fa3@rib (jZda2@chi-macro jZ1fbe@value jZ1faf@e)) (cdr jZ1f9b@e*)) jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?) (if (memv jZ1fc5@t '(module)) (call-with-values (lambda () (jZde0@chi-internal-module jZ1faf@e jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd*)) (lambda (jZ2021@jZ2012 jZ2022@jZ2014 jZ2023@jZ2016 jZ2024@jZ2018 jZ2025@jZ201a jZ2026@jZ201c jZ2027@jZ201e jZ2028@jZ2020) (let ((jZ2031@kwd* jZ2028@jZ2020) (jZ2032@mod** jZ2027@jZ201e) (jZ2033@mr jZ2026@jZ201c) (jZ2034@r jZ2025@jZ201a) (jZ2035@m-exp-lab* jZ2024@jZ2018) (jZ2036@m-exp-id* jZ2023@jZ2016) (jZ2037@rhs* jZ2022@jZ2014) (jZ2038@lex* jZ2021@jZ2012)) (begin (vector-for-each (lambda (jZ2041@id jZ2042@lab) (jZb39@extend-rib! jZ1fa3@rib jZ2041@id jZ2042@lab)) jZ2036@m-exp-id* jZ2035@m-exp-lab*) (jZde2@chi-body* (cdr jZ1f9b@e*) jZ2034@r jZ2033@mr jZ2038@lex* jZ2037@rhs* jZ2032@mod** jZ2031@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?))))) (if (memv jZ1fc5@t '(library)) (begin (jZe4c@library-expander (jZb97@stx->datum jZ1faf@e)) (jZde2@chi-body* (cdr jZ1f9b@e*) jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?)) (if (memv jZ1fc5@t '(export)) (let ((jZ2045@t jZ1faf@e)) (let ((jZ2047@ls/false (jZd8a@syntax-dispatch jZ2045@t '(_ . each-any)))) (if jZ2047@ls/false (apply (lambda (jZ2049@exp-decl*) (jZde2@chi-body* (cdr jZ1f9b@e*) jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* (append jZ2049@exp-decl* jZ1fa2@exp*) jZ1fa3@rib jZ1fa4@top?)) jZ2047@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ2045@t)))) (if (memv jZ1fc5@t '(import)) (let ((jZ204c@module-import? '#f) (jZ204e@module-import '#f) (jZ2050@library-import '#f)) (begin (set! jZ204c@module-import? (lambda (jZ209f@e) (let ((jZ20a1@t jZ209f@e)) (let ((jZ20a3@ls/false (jZd8a@syntax-dispatch jZ20a1@t '(_ any)))) (if (and jZ20a3@ls/false (apply (lambda (jZ20a5@id) (jZb83@id? jZ20a5@id)) jZ20a3@ls/false)) (apply (lambda (jZ20a7@id) '#t) jZ20a3@ls/false) (let ((jZ20a9@t jZ20a1@t)) (let ((jZ20ab@ls/false (jZd8a@syntax-dispatch jZ20a9@t '(_ . each-any)))) (if jZ20ab@ls/false (apply (lambda (jZ20ad@imp*) '#f) jZ20ab@ls/false) (let ((jZ20af@t jZ20a9@t)) (let ((jZ20b1@ls/false (jZd8a@syntax-dispatch jZ20af@t '_))) (if jZ20b1@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"malformed import form" jZ209f@e)) jZ20b1@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ20af@t)))))))))))) (set! jZ204e@module-import (lambda (jZ207d@e jZ207e@r) (let ((jZ2081@t jZ207d@e)) (let ((jZ2083@ls/false (jZd8a@syntax-dispatch jZ2081@t '(_ any)))) (if (and jZ2083@ls/false (apply (lambda (jZ2085@id) (jZb83@id? jZ2085@id)) jZ2083@ls/false)) (apply (lambda (jZ2087@id) (call-with-values (lambda () (jZba5@syntax-type jZ2087@id jZ207e@r)) (lambda (jZ208f@jZ208a jZ2090@jZ208c jZ2091@jZ208e) (let ((jZ2095@kwd jZ2091@jZ208e) (jZ2096@value jZ2090@jZ208c) (jZ2097@type jZ208f@jZ208a)) (let ((jZ209b@t jZ2097@type)) (if (memv jZ209b@t '($module)) (let ((jZ209d@iface jZ2096@value)) (values (jZdde@module-interface-exp-id* jZ209d@iface jZ2087@id) (jZdd8@module-interface-exp-lab-vec jZ209d@iface))) (jZe6a@syntax-violation '#f '"invalid import" jZ207d@e))))))) jZ2083@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ2081@t)))))) (set! jZ2050@library-import (lambda (jZ2061@e) (let ((jZ2063@t jZ2061@e)) (let ((jZ2065@ls/false (jZd8a@syntax-dispatch jZ2063@t '(any . each-any)))) (if jZ2065@ls/false (apply (lambda (jZ2067@ctxt jZ2068@imp*) (call-with-values (lambda () (jZdec@parse-import-spec* (jZe70@syntax->datum jZ2068@imp*))) (lambda (jZ206f@jZ206c jZ2070@jZ206e) (let ((jZ2073@subst-labels jZ2070@jZ206e) (jZ2074@subst-names jZ206f@jZ206c)) (values (vector-map (lambda (jZ2077@name) (jZb63@datum->stx jZ2067@ctxt jZ2077@name)) jZ2074@subst-names) jZ2073@subst-labels))))) jZ2065@ls/false) (let ((jZ2079@t jZ2063@t)) (let ((jZ207b@ls/false (jZd8a@syntax-dispatch jZ2079@t '_))) (if jZ207b@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid import form" jZ2061@e)) jZ207b@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ2079@t))))))))) (begin (call-with-values (lambda () (if (jZ204c@module-import? jZ1faf@e) (jZ204e@module-import jZ1faf@e jZ1f9c@r) (jZ2050@library-import jZ1faf@e))) (lambda (jZ2055@jZ2052 jZ2056@jZ2054) (let ((jZ2059@lab* jZ2056@jZ2054) (jZ205a@id* jZ2055@jZ2052)) (vector-for-each (lambda (jZ205d@id jZ205e@lab) (jZb39@extend-rib! jZ1fa3@rib jZ205d@id jZ205e@lab)) jZ205a@id* jZ2059@lab*)))) (jZde2@chi-body* (cdr jZ1f9b@e*) jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?)))) (if jZ1fa4@top? (jZde2@chi-body* (cdr jZ1f9b@e*) jZ1f9c@r jZ1f9d@mr (cons (jZb0b@gen-lexical 'dummy) jZ1f9e@lex*) (cons (cons 'top-expr jZ1faf@e) jZ1f9f@rhs*) jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp* jZ1fa3@rib jZ1fa4@top?) (values jZ1f9b@e* jZ1f9c@r jZ1f9d@mr jZ1f9e@lex* jZ1f9f@rhs* jZ1fa0@mod** jZ1fc3@kwd* jZ1fa2@exp*)))))))))))))))))))))) (set! jZ2888@jZde2@chi-body* jZde2@chi-body*) (set! jZde4@expand-transformer (lambda (jZ20b3@expr jZ20b4@r) (let ((jZ20b7@rtc (jZdf0@make-collector))) (let ((jZ20b9@expanded-rhs (let ((jZ20c3@jZ20bc jZdf2@inv-collector) (jZ20c4@jZ20be jZdf4@vis-collector) (jZ20c5@jZ20c0 jZ20b7@rtc) (jZ20c6@jZ20c2 (lambda (jZ20cb@x) (values)))) (let ((jZ20cd@swap (lambda () (begin (let ((jZ20cf@t (jZ20c3@jZ20bc))) (begin (jZ20c3@jZ20bc jZ20c5@jZ20c0) (set! jZ20c5@jZ20c0 jZ20cf@t))) (let ((jZ20d1@t (jZ20c4@jZ20be))) (begin (jZ20c4@jZ20be jZ20c6@jZ20c2) (set! jZ20c6@jZ20c2 jZ20d1@t))))))) (dynamic-wind jZ20cd@swap (lambda () (jZdac@chi-expr jZ20b3@expr jZ20b4@r jZ20b4@r)) jZ20cd@swap))))) (begin (for-each (let ((jZ20d3@mark-visit (jZdf4@vis-collector))) (lambda (jZ20d5@x) (begin (jZ998@jZ7e2@invoke-library jZ20d5@x) (jZ20d3@mark-visit jZ20d5@x)))) (jZ20b7@rtc)) jZ20b9@expanded-rhs))))) (set! jZ2889@jZde4@expand-transformer jZde4@expand-transformer) (set! jZde6@parse-exports (lambda (jZ20d7@exp*) (let jZ20df@f ((jZ20d9@exp* jZ20d7@exp*) (jZ20da@int* '()) (jZ20db@ext* '())) (if (null? jZ20d9@exp*) (begin (if (not (jZb8b@valid-bound-ids? jZ20db@ext*)) (jZe6a@syntax-violation 'export '"invalid exports" (jZdc0@find-dups jZ20db@ext*)) (void)) (values (map jZe70@syntax->datum jZ20db@ext*) jZ20da@int*)) (let ((jZ20e1@t (car jZ20d9@exp*))) (let ((jZ20e3@ls/false (jZd8a@syntax-dispatch jZ20e1@t '(any . #(each (any any)))))) (if jZ20e3@ls/false (apply (lambda (jZ20e5@rename jZ20e6@i* jZ20e7@e*) (begin (if (not (and (eq? (jZe70@syntax->datum jZ20e5@rename) 'rename) (for-all jZb83@id? jZ20e6@i*) (for-all jZb83@id? jZ20e7@e*))) (jZe6a@syntax-violation 'export '"invalid export specifier" (car jZ20d9@exp*)) (void)) (jZ20df@f (cdr jZ20d9@exp*) (append jZ20e6@i* jZ20da@int*) (append jZ20e7@e* jZ20db@ext*)))) jZ20e3@ls/false) (let ((jZ20eb@t jZ20e1@t)) (let ((jZ20ed@ls/false (jZd8a@syntax-dispatch jZ20eb@t 'any))) (if jZ20ed@ls/false (apply (lambda (jZ20ef@ie) (begin (if (not (jZb83@id? jZ20ef@ie)) (jZe6a@syntax-violation 'export '"invalid export" jZ20ef@ie) (void)) (jZ20df@f (cdr jZ20d9@exp*) (cons jZ20ef@ie jZ20da@int*) (cons jZ20ef@ie jZ20db@ext*)))) jZ20ed@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ20eb@t))))))))))) (set! jZ288a@jZde6@parse-exports jZde6@parse-exports) (set! jZde8@parse-library-name (lambda (jZ20f1@spec) (let ((jZ20f4@parse '#f)) (begin (set! jZ20f4@parse (lambda (jZ2101@x) (let ((jZ2103@t jZ2101@x)) (let ((jZ2105@ls/false (jZd8a@syntax-dispatch jZ2103@t '(each-any)))) (if (and jZ2105@ls/false (apply (lambda (jZ2107@v*) (for-all (lambda (jZ2109@x) (let ((jZ210b@x (jZe70@syntax->datum jZ2109@x))) (and (integer? jZ210b@x) (exact? jZ210b@x)))) jZ2107@v*)) jZ2105@ls/false)) (apply (lambda (jZ210d@v*) (values '() (map jZe70@syntax->datum jZ210d@v*))) jZ2105@ls/false) (let ((jZ210f@t jZ2103@t)) (let ((jZ2111@ls/false (jZd8a@syntax-dispatch jZ210f@t '(any . any)))) (if (and jZ2111@ls/false (apply (lambda (jZ2113@x jZ2114@rest) (symbol? (jZe70@syntax->datum jZ2113@x))) jZ2111@ls/false)) (apply (lambda (jZ2117@x jZ2118@rest) (call-with-values (lambda () (jZ20f4@parse jZ2118@rest)) (lambda (jZ211f@jZ211c jZ2120@jZ211e) (let ((jZ2123@v* jZ2120@jZ211e) (jZ2124@x* jZ211f@jZ211c)) (values (cons (jZe70@syntax->datum jZ2117@x) jZ2124@x*) jZ2123@v*))))) jZ2111@ls/false) (let ((jZ2127@t jZ210f@t)) (let ((jZ2129@ls/false (jZd8a@syntax-dispatch jZ2127@t '()))) (if jZ2129@ls/false (apply (lambda () (values '() '())) jZ2129@ls/false) (let ((jZ212b@t jZ2127@t)) (let ((jZ212d@ls/false (jZd8a@syntax-dispatch jZ212b@t '_))) (if jZ212d@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid library name" jZ20f1@spec)) jZ212d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ212b@t))))))))))))))) (call-with-values (lambda () (jZ20f4@parse jZ20f1@spec)) (lambda (jZ20f9@jZ20f6 jZ20fa@jZ20f8) (let ((jZ20fd@ver* jZ20fa@jZ20f8) (jZ20fe@name* jZ20f9@jZ20f6)) (begin (if (null? jZ20fe@name*) (jZe6a@syntax-violation '#f '"empty library name" jZ20f1@spec) (void)) (values jZ20fe@name* jZ20fd@ver*))))))))) (set! jZ288b@jZde8@parse-library-name jZde8@parse-library-name) (set! jZdea@parse-library (lambda (jZ212f@e) (let ((jZ2131@t jZ212f@e)) (let ((jZ2133@ls/false (jZd8a@syntax-dispatch jZ2131@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and jZ2133@ls/false (apply (lambda (jZ2135@library jZ2136@name* jZ2137@export jZ2138@exp* jZ2139@import jZ213a@imp* jZ213b@b*) (and (eq? (jZe70@syntax->datum jZ2137@export) 'export) (eq? (jZe70@syntax->datum jZ2139@import) 'import) (eq? (jZe70@syntax->datum jZ2135@library) 'library))) jZ2133@ls/false)) (apply (lambda (jZ2143@library jZ2144@name* jZ2145@export jZ2146@exp* jZ2147@import jZ2148@imp* jZ2149@b*) (values jZ2144@name* jZ2146@exp* jZ2148@imp* jZ2149@b*)) jZ2133@ls/false) (let ((jZ2151@t jZ2131@t)) (let ((jZ2153@ls/false (jZd8a@syntax-dispatch jZ2151@t '_))) (if jZ2153@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"malformed library" jZ212f@e)) jZ2153@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ2151@t))))))))) (set! jZ288c@jZdea@parse-library jZdea@parse-library) (set! jZdec@parse-import-spec* (let ((jZ2156@idsyn? '#f) (jZ2158@dup-error '#f) (jZ215a@merge-substs '#f) (jZ215c@exclude* '#f) (jZ215e@find* '#f) (jZ2160@rem* '#f) (jZ2162@remove-dups '#f) (jZ2164@parse-library-name '#f) (jZ2166@import-library '#f) (jZ2168@get-import '#f) (jZ216a@add-imports! '#f)) (begin (set! jZ2156@idsyn? (lambda (jZ235f@x) (symbol? (jZe70@syntax->datum jZ235f@x)))) (set! jZ2158@dup-error (lambda (jZ235d@name) (jZe6a@syntax-violation 'import '"two imports with different bindings" jZ235d@name))) (set! jZ215a@merge-substs (lambda (jZ234b@s jZ234c@subst) (let ((jZ2350@insert-to-subst '#f)) (begin (set! jZ2350@insert-to-subst (lambda (jZ2351@a jZ2352@subst) (let ((jZ2355@name (car jZ2351@a)) (jZ2356@label (cdr jZ2351@a))) (let ((jZ2359@t (assq jZ2355@name jZ2352@subst))) (if jZ2359@t ((lambda (jZ235b@x) (if (eq? (cdr jZ235b@x) jZ2356@label) jZ2352@subst (jZ2158@dup-error jZ2355@name))) jZ2359@t) (cons jZ2351@a jZ2352@subst)))))) (if (null? jZ234b@s) jZ234c@subst (jZ2350@insert-to-subst (car jZ234b@s) (jZ215a@merge-substs (cdr jZ234b@s) jZ234c@subst))))))) (set! jZ215c@exclude* (lambda (jZ231b@sym* jZ231c@subst) (let ((jZ2320@exclude '#f)) (begin (set! jZ2320@exclude (lambda (jZ2339@sym jZ233a@subst) (if (null? jZ233a@subst) (jZe6a@syntax-violation 'import '"cannot rename unbound identifier" jZ2339@sym) (if (eq? jZ2339@sym (caar jZ233a@subst)) (values (cdar jZ233a@subst) (cdr jZ233a@subst)) (let ((jZ233d@a (car jZ233a@subst))) (call-with-values (lambda () (jZ2320@exclude jZ2339@sym (cdr jZ233a@subst))) (lambda (jZ2343@jZ2340 jZ2344@jZ2342) (let ((jZ2347@subst jZ2344@jZ2342) (jZ2348@old jZ2343@jZ2340)) (values jZ2348@old (cons jZ233d@a jZ2347@subst)))))))))) (if (null? jZ231b@sym*) (values '() jZ231c@subst) (call-with-values (lambda () (jZ2320@exclude (car jZ231b@sym*) jZ231c@subst)) (lambda (jZ2325@jZ2322 jZ2326@jZ2324) (let ((jZ2329@subst jZ2326@jZ2324) (jZ232a@old jZ2325@jZ2322)) (call-with-values (lambda () (jZ215c@exclude* (cdr jZ231b@sym*) jZ2329@subst)) (lambda (jZ2331@jZ232e jZ2332@jZ2330) (let ((jZ2335@subst jZ2332@jZ2330) (jZ2336@old* jZ2331@jZ232e)) (values (cons jZ232a@old jZ2336@old*) jZ2335@subst)))))))))))) (set! jZ215e@find* (lambda (jZ2313@sym* jZ2314@subst) (map (lambda (jZ2317@x) (let ((jZ2319@t (assq jZ2317@x jZ2314@subst))) (if jZ2319@t (cdr jZ2319@t) (jZe6a@syntax-violation 'import '"cannot find identifier" jZ2317@x)))) jZ2313@sym*))) (set! jZ2160@rem* (lambda (jZ230b@sym* jZ230c@subst) (let jZ2311@f ((jZ230f@subst jZ230c@subst)) (if (null? jZ230f@subst) '() (if (memq (caar jZ230f@subst) jZ230b@sym*) (jZ2311@f (cdr jZ230f@subst)) (cons (car jZ230f@subst) (jZ2311@f (cdr jZ230f@subst)))))))) (set! jZ2162@remove-dups (lambda (jZ2309@ls) (if (null? jZ2309@ls) '() (if (memq (car jZ2309@ls) (cdr jZ2309@ls)) (jZ2162@remove-dups (cdr jZ2309@ls)) (cons (car jZ2309@ls) (jZ2162@remove-dups (cdr jZ2309@ls))))))) (set! jZ2164@parse-library-name (lambda (jZ2221@spec) (let ((jZ2224@subversion? '#f) (jZ2226@subversion-pred '#f) (jZ2228@version-pred '#f)) (begin (set! jZ2224@subversion? (lambda (jZ2305@x) (let ((jZ2307@x (jZe70@syntax->datum jZ2305@x))) (and (integer? jZ2307@x) (exact? jZ2307@x) (>= jZ2307@x '0))))) (set! jZ2226@subversion-pred (lambda (jZ22a5@x*) (let ((jZ22a7@t jZ22a5@x*)) (let ((jZ22a9@ls/false (jZd8a@syntax-dispatch jZ22a7@t 'any))) (if (and jZ22a9@ls/false (apply (lambda (jZ22ab@n) (jZ2224@subversion? jZ22ab@n)) jZ22a9@ls/false)) (apply (lambda (jZ22ad@n) (lambda (jZ22af@x) (= jZ22af@x (jZe70@syntax->datum jZ22ad@n)))) jZ22a9@ls/false) (let ((jZ22b1@t jZ22a7@t)) (let ((jZ22b3@ls/false (jZd8a@syntax-dispatch jZ22b1@t '(any . each-any)))) (if (and jZ22b3@ls/false (apply (lambda (jZ22b5@p? jZ22b6@sub*) (eq? (jZe70@syntax->datum jZ22b5@p?) 'and)) jZ22b3@ls/false)) (apply (lambda (jZ22b9@p? jZ22ba@sub*) (let ((jZ22bd@p* (map jZ2226@subversion-pred jZ22ba@sub*))) (lambda (jZ22bf@x) (for-all (lambda (jZ22c1@p) (jZ22c1@p jZ22bf@x)) jZ22bd@p*)))) jZ22b3@ls/false) (let ((jZ22c3@t jZ22b1@t)) (let ((jZ22c5@ls/false (jZd8a@syntax-dispatch jZ22c3@t '(any . each-any)))) (if (and jZ22c5@ls/false (apply (lambda (jZ22c7@p? jZ22c8@sub*) (eq? (jZe70@syntax->datum jZ22c7@p?) 'or)) jZ22c5@ls/false)) (apply (lambda (jZ22cb@p? jZ22cc@sub*) (let ((jZ22cf@p* (map jZ2226@subversion-pred jZ22cc@sub*))) (lambda (jZ22d1@x) (exists (lambda (jZ22d3@p) (jZ22d3@p jZ22d1@x)) jZ22cf@p*)))) jZ22c5@ls/false) (let ((jZ22d5@t jZ22c3@t)) (let ((jZ22d7@ls/false (jZd8a@syntax-dispatch jZ22d5@t '(any any)))) (if (and jZ22d7@ls/false (apply (lambda (jZ22d9@p? jZ22da@sub) (eq? (jZe70@syntax->datum jZ22d9@p?) 'not)) jZ22d7@ls/false)) (apply (lambda (jZ22dd@p? jZ22de@sub) (let ((jZ22e1@p (jZ2226@subversion-pred jZ22de@sub))) (lambda (jZ22e3@x) (not (jZ22e1@p jZ22e3@x))))) jZ22d7@ls/false) (let ((jZ22e5@t jZ22d5@t)) (let ((jZ22e7@ls/false (jZd8a@syntax-dispatch jZ22e5@t '(any any)))) (if (and jZ22e7@ls/false (apply (lambda (jZ22e9@p? jZ22ea@n) (and (eq? (jZe70@syntax->datum jZ22e9@p?) '<=) (jZ2224@subversion? jZ22ea@n))) jZ22e7@ls/false)) (apply (lambda (jZ22ed@p? jZ22ee@n) (lambda (jZ22f1@x) (<= jZ22f1@x (jZe70@syntax->datum jZ22ee@n)))) jZ22e7@ls/false) (let ((jZ22f3@t jZ22e5@t)) (let ((jZ22f5@ls/false (jZd8a@syntax-dispatch jZ22f3@t '(any any)))) (if (and jZ22f5@ls/false (apply (lambda (jZ22f7@p? jZ22f8@n) (and (eq? (jZe70@syntax->datum jZ22f7@p?) '>=) (jZ2224@subversion? jZ22f8@n))) jZ22f5@ls/false)) (apply (lambda (jZ22fb@p? jZ22fc@n) (lambda (jZ22ff@x) (>= jZ22ff@x (jZe70@syntax->datum jZ22fc@n)))) jZ22f5@ls/false) (let ((jZ2301@t jZ22f3@t)) (let ((jZ2303@ls/false (jZd8a@syntax-dispatch jZ2301@t '_))) (if jZ2303@ls/false (apply (lambda () (jZe6a@syntax-violation 'import '"invalid sub-version spec" jZ2221@spec jZ22a5@x*)) jZ2303@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ2301@t)))))))))))))))))))))))) (set! jZ2228@version-pred (lambda (jZ2255@x*) (let ((jZ2257@t jZ2255@x*)) (let ((jZ2259@ls/false (jZd8a@syntax-dispatch jZ2257@t '()))) (if jZ2259@ls/false (apply (lambda () (lambda (jZ225b@x) '#t)) jZ2259@ls/false) (let ((jZ225d@t jZ2257@t)) (let ((jZ225f@ls/false (jZd8a@syntax-dispatch jZ225d@t '(any . each-any)))) (if (and jZ225f@ls/false (apply (lambda (jZ2261@c jZ2262@ver*) (eq? (jZe70@syntax->datum jZ2261@c) 'and)) jZ225f@ls/false)) (apply (lambda (jZ2265@c jZ2266@ver*) (let ((jZ2269@p* (map jZ2228@version-pred jZ2266@ver*))) (lambda (jZ226b@x) (for-all (lambda (jZ226d@p) (jZ226d@p jZ226b@x)) jZ2269@p*)))) jZ225f@ls/false) (let ((jZ226f@t jZ225d@t)) (let ((jZ2271@ls/false (jZd8a@syntax-dispatch jZ226f@t '(any . each-any)))) (if (and jZ2271@ls/false (apply (lambda (jZ2273@c jZ2274@ver*) (eq? (jZe70@syntax->datum jZ2273@c) 'or)) jZ2271@ls/false)) (apply (lambda (jZ2277@c jZ2278@ver*) (let ((jZ227b@p* (map jZ2228@version-pred jZ2278@ver*))) (lambda (jZ227d@x) (exists (lambda (jZ227f@p) (jZ227f@p jZ227d@x)) jZ227b@p*)))) jZ2271@ls/false) (let ((jZ2281@t jZ226f@t)) (let ((jZ2283@ls/false (jZd8a@syntax-dispatch jZ2281@t '(any any)))) (if (and jZ2283@ls/false (apply (lambda (jZ2285@c jZ2286@ver) (eq? (jZe70@syntax->datum jZ2285@c) 'not)) jZ2283@ls/false)) (apply (lambda (jZ2289@c jZ228a@ver) (let ((jZ228d@p (jZ2228@version-pred jZ228a@ver))) (lambda (jZ228f@x) (not (jZ228d@p jZ228f@x))))) jZ2283@ls/false) (let ((jZ2291@t jZ2281@t)) (let ((jZ2293@ls/false (jZd8a@syntax-dispatch jZ2291@t 'each-any))) (if jZ2293@ls/false (apply (lambda (jZ2295@sub*) (let ((jZ2297@p* (map jZ2226@subversion-pred jZ2295@sub*))) (lambda (jZ2299@x) (let jZ229f@f ((jZ229b@p* jZ2297@p*) (jZ229c@x jZ2299@x)) (if (null? jZ229b@p*) '#t (if (null? jZ229c@x) '#f (and ((car jZ229b@p*) (car jZ229c@x)) (jZ229f@f (cdr jZ229b@p*) (cdr jZ229c@x))))))))) jZ2293@ls/false) (let ((jZ22a1@t jZ2291@t)) (let ((jZ22a3@ls/false (jZd8a@syntax-dispatch jZ22a1@t '_))) (if jZ22a3@ls/false (apply (lambda () (jZe6a@syntax-violation 'import '"invalid version spec" jZ2221@spec jZ2255@x*)) jZ22a3@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ22a1@t))))))))))))))))))))) (let jZ222b@f ((jZ2229@x jZ2221@spec)) (let ((jZ222d@t jZ2229@x)) (let ((jZ222f@ls/false (jZd8a@syntax-dispatch jZ222d@t '(each-any)))) (if jZ222f@ls/false (apply (lambda (jZ2231@version-spec*) (values '() (jZ2228@version-pred jZ2231@version-spec*))) jZ222f@ls/false) (let ((jZ2233@t jZ222d@t)) (let ((jZ2235@ls/false (jZd8a@syntax-dispatch jZ2233@t '(any . any)))) (if (and jZ2235@ls/false (apply (lambda (jZ2237@x jZ2238@x*) (jZ2156@idsyn? jZ2237@x)) jZ2235@ls/false)) (apply (lambda (jZ223b@x jZ223c@x*) (call-with-values (lambda () (jZ222b@f jZ223c@x*)) (lambda (jZ2243@jZ2240 jZ2244@jZ2242) (let ((jZ2247@pred jZ2244@jZ2242) (jZ2248@name jZ2243@jZ2240)) (values (cons (jZe70@syntax->datum jZ223b@x) jZ2248@name) jZ2247@pred))))) jZ2235@ls/false) (let ((jZ224b@t jZ2233@t)) (let ((jZ224d@ls/false (jZd8a@syntax-dispatch jZ224b@t '()))) (if jZ224d@ls/false (apply (lambda () (values '() (lambda (jZ224f@x) '#t))) jZ224d@ls/false) (let ((jZ2251@t jZ224b@t)) (let ((jZ2253@ls/false (jZd8a@syntax-dispatch jZ2251@t '_))) (if jZ2253@ls/false (apply (lambda () (jZe6a@syntax-violation '#f '"invalid import spec" jZ2221@spec)) jZ2253@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ2251@t)))))))))))))))))) (set! jZ2166@import-library (lambda (jZ2211@spec*) (call-with-values (lambda () (jZ2164@parse-library-name jZ2211@spec*)) (lambda (jZ2217@jZ2214 jZ2218@jZ2216) (let ((jZ221b@pred jZ2218@jZ2216) (jZ221c@name jZ2217@jZ2214)) (begin (if (null? jZ221c@name) (jZe6a@syntax-violation 'import '"empty library name" jZ2211@spec*) (void)) (let ((jZ221f@lib (jZ991@jZ7d4@find-library-by-name jZ221c@name))) (begin (if (not jZ221f@lib) (jZe6a@syntax-violation 'import '"cannot find library with required name" jZ221c@name) (void)) (if (not (jZ221b@pred (jZ96b@jZ788@library-version jZ221f@lib))) (jZe6a@syntax-violation 'import '"library does not satisfy version specification" jZ2211@spec* jZ221f@lib) (void)) ((jZdf6@imp-collector) jZ221f@lib) (jZ973@jZ798@library-subst jZ221f@lib))))))))) (set! jZ2168@get-import (lambda (jZ2183@spec) (let ((jZ2185@t jZ2183@spec)) (let ((jZ2187@ls/false (jZd8a@syntax-dispatch jZ2185@t '(any . each-any)))) (if (and jZ2187@ls/false (apply (lambda (jZ2189@x jZ218a@x*) (not (memq (jZe70@syntax->datum jZ2189@x) '(for rename except only prefix library)))) jZ2187@ls/false)) (apply (lambda (jZ218d@x jZ218e@x*) (jZ2166@import-library (cons jZ218d@x jZ218e@x*))) jZ2187@ls/false) (let ((jZ2191@t jZ2185@t)) (let ((jZ2193@ls/false (jZd8a@syntax-dispatch jZ2191@t '(any any . #(each (any any)))))) (if (and jZ2193@ls/false (apply (lambda (jZ2195@rename jZ2196@isp jZ2197@old* jZ2198@new*) (and (eq? (jZe70@syntax->datum jZ2195@rename) 'rename) (for-all jZ2156@idsyn? jZ2197@old*) (for-all jZ2156@idsyn? jZ2198@new*))) jZ2193@ls/false)) (apply (lambda (jZ219d@rename jZ219e@isp jZ219f@old* jZ21a0@new*) (let ((jZ21a5@subst (jZ2168@get-import jZ219e@isp)) (jZ21a6@old* (map jZe70@syntax->datum jZ219f@old*)) (jZ21a7@new* (map jZe70@syntax->datum jZ21a0@new*))) (let ((jZ21ab@old-label* (jZ215e@find* jZ21a6@old* jZ21a5@subst))) (let ((jZ21ad@subst (jZ2160@rem* jZ21a6@old* jZ21a5@subst))) (jZ215a@merge-substs (map cons jZ21a7@new* jZ21ab@old-label*) jZ21ad@subst))))) jZ2193@ls/false) (let ((jZ21af@t jZ2191@t)) (let ((jZ21b1@ls/false (jZd8a@syntax-dispatch jZ21af@t '(any any . each-any)))) (if (and jZ21b1@ls/false (apply (lambda (jZ21b3@except jZ21b4@isp jZ21b5@sym*) (and (eq? (jZe70@syntax->datum jZ21b3@except) 'except) (for-all jZ2156@idsyn? jZ21b5@sym*))) jZ21b1@ls/false)) (apply (lambda (jZ21b9@except jZ21ba@isp jZ21bb@sym*) (let ((jZ21bf@subst (jZ2168@get-import jZ21ba@isp))) (jZ2160@rem* (map jZe70@syntax->datum jZ21bb@sym*) jZ21bf@subst))) jZ21b1@ls/false) (let ((jZ21c1@t jZ21af@t)) (let ((jZ21c3@ls/false (jZd8a@syntax-dispatch jZ21c1@t '(any any . each-any)))) (if (and jZ21c3@ls/false (apply (lambda (jZ21c5@only jZ21c6@isp jZ21c7@sym*) (and (eq? (jZe70@syntax->datum jZ21c5@only) 'only) (for-all jZ2156@idsyn? jZ21c7@sym*))) jZ21c3@ls/false)) (apply (lambda (jZ21cb@only jZ21cc@isp jZ21cd@sym*) (let ((jZ21d1@subst (jZ2168@get-import jZ21cc@isp)) (jZ21d2@sym* (map jZe70@syntax->datum jZ21cd@sym*))) (let ((jZ21d5@sym* (jZ2162@remove-dups jZ21d2@sym*))) (let ((jZ21d7@lab* (jZ215e@find* jZ21d5@sym* jZ21d1@subst))) (map cons jZ21d5@sym* jZ21d7@lab*))))) jZ21c3@ls/false) (let ((jZ21d9@t jZ21c1@t)) (let ((jZ21db@ls/false (jZd8a@syntax-dispatch jZ21d9@t '(any any any)))) (if (and jZ21db@ls/false (apply (lambda (jZ21dd@prefix jZ21de@isp jZ21df@p) (and (eq? (jZe70@syntax->datum jZ21dd@prefix) 'prefix) (jZ2156@idsyn? jZ21df@p))) jZ21db@ls/false)) (apply (lambda (jZ21e3@prefix jZ21e4@isp jZ21e5@p) (let ((jZ21e9@subst (jZ2168@get-import jZ21e4@isp)) (jZ21ea@prefix (symbol->string (jZe70@syntax->datum jZ21e5@p)))) (map (lambda (jZ21ed@x) (cons (string->symbol (string-append jZ21ea@prefix (symbol->string (car jZ21ed@x)))) (cdr jZ21ed@x))) jZ21e9@subst))) jZ21db@ls/false) (let ((jZ21ef@t jZ21d9@t)) (let ((jZ21f1@ls/false (jZd8a@syntax-dispatch jZ21ef@t '(any each-any)))) (if (and jZ21f1@ls/false (apply (lambda (jZ21f3@library jZ21f4@spec*) (eq? (jZe70@syntax->datum jZ21f3@library) 'library)) jZ21f1@ls/false)) (apply (lambda (jZ21f7@library jZ21f8@spec*) (jZ2166@import-library jZ21f8@spec*)) jZ21f1@ls/false) (let ((jZ21fb@t jZ21ef@t)) (let ((jZ21fd@ls/false (jZd8a@syntax-dispatch jZ21fb@t '(any any . any)))) (if (and jZ21fd@ls/false (apply (lambda (jZ21ff@for jZ2200@isp jZ2201@rest) (eq? (jZe70@syntax->datum jZ21ff@for) 'for)) jZ21fd@ls/false)) (apply (lambda (jZ2205@for jZ2206@isp jZ2207@rest) (jZ2168@get-import jZ2206@isp)) jZ21fd@ls/false) (let ((jZ220b@t jZ21fb@t)) (let ((jZ220d@ls/false (jZd8a@syntax-dispatch jZ220b@t 'any))) (if jZ220d@ls/false (apply (lambda (jZ220f@spec) (jZe6a@syntax-violation 'import '"invalid import spec" jZ220f@spec)) jZ220d@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ220b@t))))))))))))))))))))))))))) (set! jZ216a@add-imports! (lambda (jZ2173@imp jZ2174@h) (let ((jZ2177@subst (jZ2168@get-import jZ2173@imp))) (for-each (lambda (jZ2179@x) (let ((jZ217b@name (car jZ2179@x)) (jZ217c@label (cdr jZ2179@x))) (let ((jZ217f@t (hashtable-ref jZ2174@h jZ217b@name '#f))) (if jZ217f@t ((lambda (jZ2181@l) (if (not (eq? jZ2181@l jZ217c@label)) (jZ2158@dup-error jZ217b@name) (void))) jZ217f@t) (hashtable-set! jZ2174@h jZ217b@name jZ217c@label))))) jZ2177@subst)))) (lambda (jZ216b@imp*) (let jZ2171@f ((jZ216d@imp* jZ216b@imp*) (jZ216e@h (make-eq-hashtable))) (if (null? jZ216d@imp*) (hashtable-entries jZ216e@h) (begin (jZ216a@add-imports! (car jZ216d@imp*) jZ216e@h) (jZ2171@f (cdr jZ216d@imp*) jZ216e@h)))))))) (set! jZ288d@jZdec@parse-import-spec* jZdec@parse-import-spec*) (set! jZdee@make-top-rib (lambda (jZ2361@names jZ2362@labels) (let ((jZ2365@rib (jZb37@make-empty-rib))) (begin (vector-for-each (lambda (jZ2367@name jZ2368@label) (begin (if (not (symbol? jZ2367@name)) (error 'make-top-rib '"BUG: not a symbol" jZ2367@name) (void)) (jZb3b@extend-rib/nc! jZ2365@rib (make-simple-struct 'stx '5 (list jZ2367@name jZb07@top-mark* '() '())) jZ2368@label))) jZ2361@names jZ2362@labels) jZ2365@rib)))) (set! jZ288e@jZdee@make-top-rib jZdee@make-top-rib) (set! jZdf0@make-collector (lambda () (let ((jZ236b@ls '())) (lambda jZ236f (let ((jZ2370 (length jZ236f))) (if (= jZ2370 '0) (apply (lambda () jZ236b@ls) jZ236f) (if (= jZ2370 '1) (apply (lambda (jZ236d@x) (set! jZ236b@ls (jZb00@set-cons jZ236d@x jZ236b@ls))) jZ236f) (error 'apply '"invalid arg count")))))))) (set! jZ288f@jZdf0@make-collector jZdf0@make-collector) (set! jZdf2@inv-collector (jZ6c8@jZ5a6@make-parameter (lambda jZ2371@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (jZ2373@x) (begin (if (not (procedure? jZ2373@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" jZ2373@x) (void)) jZ2373@x)))) (set! jZ2890@jZdf2@inv-collector jZdf2@inv-collector) (set! jZdf4@vis-collector (jZ6c8@jZ5a6@make-parameter (lambda jZ2375@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (jZ2377@x) (begin (if (not (procedure? jZ2377@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" jZ2377@x) (void)) jZ2377@x)))) (set! jZ2891@jZdf4@vis-collector jZdf4@vis-collector) (set! jZdf6@imp-collector (jZ6c8@jZ5a6@make-parameter (lambda jZ2379@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (jZ237b@x) (begin (if (not (procedure? jZ237b@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" jZ237b@x) (void)) jZ237b@x)))) (set! jZ2892@jZdf6@imp-collector jZdf6@imp-collector) (set! jZdf8@chi-library-internal (lambda (jZ237d@e* jZ237e@rib jZ237f@top?) (call-with-values (lambda () (jZde2@chi-body* jZ237d@e* '() '() '() '() '() '() '() jZ237e@rib jZ237f@top?)) (lambda (jZ2393@jZ2384 jZ2394@jZ2386 jZ2395@jZ2388 jZ2396@jZ238a jZ2397@jZ238c jZ2398@jZ238e jZ2399@jZ2390 jZ239a@jZ2392) (let ((jZ23a3@exp* jZ239a@jZ2392) (jZ23a4@_kwd* jZ2399@jZ2390) (jZ23a5@mod** jZ2398@jZ238e) (jZ23a6@rhs* jZ2397@jZ238c) (jZ23a7@lex* jZ2396@jZ238a) (jZ23a8@mr jZ2395@jZ2388) (jZ23a9@r jZ2394@jZ2386) (jZ23aa@e* jZ2393@jZ2384)) (values (append (apply append (reverse jZ23a5@mod**)) jZ23aa@e*) jZ23a9@r jZ23a8@mr (reverse jZ23a7@lex*) (reverse jZ23a6@rhs*) jZ23a3@exp*)))))) (set! jZ2893@jZdf8@chi-library-internal jZdf8@chi-library-internal) (set! jZdfa@chi-interaction-expr (lambda (jZ23b3@e jZ23b4@rib jZ23b5@r) (call-with-values (lambda () (jZde2@chi-body* (list jZ23b3@e) jZ23b5@r jZ23b5@r '() '() '() '() '() jZ23b4@rib '#t)) (lambda (jZ23c9@jZ23ba jZ23ca@jZ23bc jZ23cb@jZ23be jZ23cc@jZ23c0 jZ23cd@jZ23c2 jZ23ce@jZ23c4 jZ23cf@jZ23c6 jZ23d0@jZ23c8) (let ((jZ23d9@_exp* jZ23d0@jZ23c8) (jZ23da@_kwd* jZ23cf@jZ23c6) (jZ23db@mod** jZ23ce@jZ23c4) (jZ23dc@rhs* jZ23cd@jZ23c2) (jZ23dd@lex* jZ23cc@jZ23c0) (jZ23de@mr jZ23cb@jZ23be) (jZ23df@r jZ23ca@jZ23bc) (jZ23e0@e* jZ23c9@jZ23ba)) (let ((jZ23e9@e* (jZdba@expand-interaction-rhs*/init* (reverse jZ23dd@lex*) (reverse jZ23dc@rhs*) (append (apply append (reverse jZ23db@mod**)) jZ23e0@e*) jZ23df@r jZ23de@mr))) (let ((jZ23eb@e (if (null? jZ23e9@e*) (jZae9@jZa44@build-void) (if (null? (cdr jZ23e9@e*)) (car jZ23e9@e*) (jZae8@jZa42@build-sequence '#f jZ23e9@e*))))) (values jZ23eb@e jZ23df@r)))))))) (set! jZ2894@jZdfa@chi-interaction-expr jZdfa@chi-interaction-expr) (set! jZdfc@library-body-expander (lambda (jZ23ed@name jZ23ee@main-exp* jZ23ef@imp* jZ23f0@b* jZ23f1@top?) (let ((jZ23f8@itc '#f)) (begin (set! jZ23f8@itc (jZdf0@make-collector)) (let ((jZ2401@jZ23fa jZdf6@imp-collector) (jZ2402@jZ23fc jZe7a@top-level-context) (jZ2403@jZ23fe jZ23f8@itc) (jZ2404@jZ2400 '#f)) (let ((jZ2409@swap (lambda () (begin (let ((jZ240b@t (jZ2401@jZ23fa))) (begin (jZ2401@jZ23fa jZ2403@jZ23fe) (set! jZ2403@jZ23fe jZ240b@t))) (let ((jZ240d@t (jZ2402@jZ23fc))) (begin (jZ2402@jZ23fc jZ2404@jZ2400) (set! jZ2404@jZ2400 jZ240d@t))))))) (dynamic-wind jZ2409@swap (lambda () (call-with-values (lambda () (jZdec@parse-import-spec* jZ23ef@imp*)) (lambda (jZ2413@jZ2410 jZ2414@jZ2412) (let ((jZ2417@subst-labels jZ2414@jZ2412) (jZ2418@subst-names jZ2413@jZ2410)) (let ((jZ241b@rib (jZdee@make-top-rib jZ2418@subst-names jZ2417@subst-labels))) (let ((jZ241e@wrap '#f)) (begin (set! jZ241e@wrap (lambda (jZ2499@x) (make-simple-struct 'stx '5 (list jZ2499@x jZb07@top-mark* (list jZ241b@rib) '())))) (let ((jZ241f@b* (map jZ241e@wrap jZ23f0@b*)) (jZ2420@main-exp* (map jZ241e@wrap jZ23ee@main-exp*)) (jZ2421@rtc (jZdf0@make-collector)) (jZ2422@vtc (jZdf0@make-collector))) (let ((jZ242f@jZ2428 jZdf2@inv-collector) (jZ2430@jZ242a jZdf4@vis-collector) (jZ2431@jZ242c jZ2421@rtc) (jZ2432@jZ242e jZ2422@vtc)) (let ((jZ2437@swap (lambda () (begin (let ((jZ2439@t (jZ242f@jZ2428))) (begin (jZ242f@jZ2428 jZ2431@jZ242c) (set! jZ2431@jZ242c jZ2439@t))) (let ((jZ243b@t (jZ2430@jZ242a))) (begin (jZ2430@jZ242a jZ2432@jZ242e) (set! jZ2432@jZ242e jZ243b@t))))))) (dynamic-wind jZ2437@swap (lambda () (call-with-values (lambda () (jZdf8@chi-library-internal jZ241f@b* jZ241b@rib jZ23f1@top?)) (lambda (jZ2449@jZ243e jZ244a@jZ2440 jZ244b@jZ2442 jZ244c@jZ2444 jZ244d@jZ2446 jZ244e@jZ2448) (let ((jZ2455@internal-exp* jZ244e@jZ2448) (jZ2456@rhs* jZ244d@jZ2446) (jZ2457@lex* jZ244c@jZ2444) (jZ2458@mr jZ244b@jZ2442) (jZ2459@r jZ244a@jZ2440) (jZ245a@init* jZ2449@jZ243e)) (call-with-values (lambda () (jZde6@parse-exports (append jZ2420@main-exp* jZ2455@internal-exp*))) (lambda (jZ2465@jZ2462 jZ2466@jZ2464) (let ((jZ2469@exp-id* jZ2466@jZ2464) (jZ246a@exp-name* jZ2465@jZ2462)) (begin (jZb3f@seal-rib! jZ241b@rib) (let ((jZ246d@init* (jZda8@chi-expr* jZ245a@init* jZ2459@r jZ2458@mr))) (let ((jZ246f@rhs* (jZdbc@chi-rhs* jZ2456@rhs* jZ2459@r jZ2458@mr))) (begin (jZb41@unseal-rib! jZ241b@rib) (let ((jZ2471@loc* (map jZb0d@gen-global jZ2457@lex*)) (jZ2472@export-subst (jZe54@make-export-subst jZ246a@exp-name* jZ2469@exp-id*))) (let ((jZ2476@errstr '#f)) (begin (set! jZ2476@errstr '"attempt to export mutated variable") (call-with-values (lambda () (jZe56@make-export-env/macros jZ2457@lex* jZ2471@loc* jZ2459@r)) (lambda (jZ247d@jZ2478 jZ247e@jZ247a jZ247f@jZ247c) (let ((jZ2483@macro* jZ247f@jZ247c) (jZ2484@global* jZ247e@jZ247a) (jZ2485@export-env jZ247d@jZ2478)) (begin (for-each (lambda (jZ2489@s) (let ((jZ248b@name (car jZ2489@s)) (jZ248c@label (cdr jZ2489@s))) (let ((jZ248f@p (assq jZ248c@label jZ2485@export-env))) (if jZ248f@p (let ((jZ2491@b (cdr jZ248f@p))) (let ((jZ2493@type (car jZ2491@b))) (if (eq? jZ2493@type 'mutable) (jZe6a@syntax-violation 'export jZ2476@errstr jZ248b@name) (void)))) (void))))) jZ2472@export-subst) (let ((jZ2495@invoke-body (jZaee@jZa4e@build-library-letrec* '#f jZ23ed@name jZ2457@lex* jZ2471@loc* jZ246f@rhs* (if (null? jZ246d@init*) (jZae9@jZa44@build-void) (jZae8@jZa42@build-sequence '#f jZ246d@init*)))) (jZ2496@invoke-definitions (map jZae5@jZ9a1@build-global-define (map cdr jZ2484@global*)))) (values (jZ23f8@itc) (jZ2421@rtc) (jZ2422@vtc) (jZae8@jZa42@build-sequence '#f (append jZ2496@invoke-definitions (list jZ2495@invoke-body))) jZ2483@macro* jZ2472@export-subst jZ2485@export-env)))))))))))))))))))) jZ2437@swap))))))))))) jZ2409@swap))))))) (set! jZ2895@jZdfc@library-body-expander jZdfc@library-body-expander) (set! jZdfe@core-library-expander (lambda (jZ249b@e jZ249c@verify-name) (call-with-values (lambda () (jZdea@parse-library jZ249b@e)) (lambda (jZ24a7@jZ24a0 jZ24a8@jZ24a2 jZ24a9@jZ24a4 jZ24aa@jZ24a6) (let ((jZ24af@b* jZ24aa@jZ24a6) (jZ24b0@imp* jZ24a9@jZ24a4) (jZ24b1@exp* jZ24a8@jZ24a2) (jZ24b2@name* jZ24a7@jZ24a0)) (call-with-values (lambda () (jZde8@parse-library-name jZ24b2@name*)) (lambda (jZ24bb@jZ24b8 jZ24bc@jZ24ba) (let ((jZ24bf@ver jZ24bc@jZ24ba) (jZ24c0@name jZ24bb@jZ24b8)) (begin (jZ249c@verify-name jZ24c0@name) (call-with-values (lambda () (jZdfc@library-body-expander jZ24c0@name jZ24b1@exp* jZ24b0@imp* jZ24af@b* '#f)) (lambda (jZ24d1@jZ24c4 jZ24d2@jZ24c6 jZ24d3@jZ24c8 jZ24d4@jZ24ca jZ24d5@jZ24cc jZ24d6@jZ24ce jZ24d7@jZ24d0) (let ((jZ24df@export-env jZ24d7@jZ24d0) (jZ24e0@export-subst jZ24d6@jZ24ce) (jZ24e1@visit-code jZ24d5@jZ24cc) (jZ24e2@invoke-code jZ24d4@jZ24ca) (jZ24e3@visit-req* jZ24d3@jZ24c8) (jZ24e4@invoke-req* jZ24d2@jZ24c6) (jZ24e5@imp* jZ24d1@jZ24c4)) (values jZ24c0@name jZ24bf@ver jZ24e5@imp* jZ24e4@invoke-req* jZ24e3@visit-req* jZ24e2@invoke-code jZ24e1@visit-code jZ24e0@export-subst jZ24df@export-env))))))))))))) (set! jZ2896@jZdfe@core-library-expander jZdfe@core-library-expander) (set! jZe00@parse-top-level-program (lambda (jZ24ed@e*) (let ((jZ24ef@t jZ24ed@e*)) (let ((jZ24f1@ls/false (jZd8a@syntax-dispatch jZ24ef@t '((any . each-any) . each-any)))) (if (and jZ24f1@ls/false (apply (lambda (jZ24f3@import jZ24f4@imp* jZ24f5@b*) (eq? (jZe70@syntax->datum jZ24f3@import) 'import)) jZ24f1@ls/false)) (apply (lambda (jZ24f9@import jZ24fa@imp* jZ24fb@b*) (values jZ24fa@imp* jZ24fb@b*)) jZ24f1@ls/false) (let ((jZ24ff@t jZ24ef@t)) (let ((jZ2501@ls/false (jZd8a@syntax-dispatch jZ24ff@t '((any . any) . any)))) (if (and jZ2501@ls/false (apply (lambda (jZ2503@import jZ2504@x jZ2505@y) (eq? (jZe70@syntax->datum jZ2503@import) 'import)) jZ2501@ls/false)) (apply (lambda (jZ2509@import jZ250a@x jZ250b@y) (jZe6a@syntax-violation 'expander '"invalid syntax of top-level program" (jZb7d@syntax-car jZ24ed@e*))) jZ2501@ls/false) (let ((jZ250f@t jZ24ff@t)) (let ((jZ2511@ls/false (jZd8a@syntax-dispatch jZ250f@t '_))) (if jZ2511@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) jZ2511@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ250f@t)))))))))))) (set! jZ2897@jZe00@parse-top-level-program jZe00@parse-top-level-program) (set! jZe02@top-level-expander (lambda (jZ2513@e*) (call-with-values (lambda () (jZe00@parse-top-level-program jZ2513@e*)) (lambda (jZ2519@jZ2516 jZ251a@jZ2518) (let ((jZ251d@b* jZ251a@jZ2518) (jZ251e@imp* jZ2519@jZ2516)) (call-with-values (lambda () (jZdfc@library-body-expander '() '() jZ251e@imp* jZ251d@b* '#t)) (lambda (jZ252f@jZ2522 jZ2530@jZ2524 jZ2531@jZ2526 jZ2532@jZ2528 jZ2533@jZ252a jZ2534@jZ252c jZ2535@jZ252e) (let ((jZ253d@export-env jZ2535@jZ252e) (jZ253e@export-subst jZ2534@jZ252c) (jZ253f@visit-code jZ2533@jZ252a) (jZ2540@invoke-code jZ2532@jZ2528) (jZ2541@visit-req* jZ2531@jZ2526) (jZ2542@invoke-req* jZ2530@jZ2524) (jZ2543@imp* jZ252f@jZ2522)) (values jZ2542@invoke-req* jZ2540@invoke-code))))))))) (set! jZ2898@jZe02@top-level-expander jZe02@top-level-expander) (set! jZe04@rp (jZ6c5@jZ5a0@make-record-printer 'env (lambda (jZ254b@x jZ254c@p jZ254d@wr) (display '"#<environment>" jZ254c@p)))) (set! jZ2899@jZe04@rp jZe04@rp) (set! jZe0e@env? (lambda (jZ2551@x) (and (simple-struct? jZ2551@x) (eq? (simple-struct-name jZ2551@x) 'env)))) (set! jZ289a@jZe0e@env? jZe0e@env?) (set! jZe10@env-names (lambda (jZ2553@x) (simple-struct-ref jZ2553@x '0))) (set! jZ289b@jZe10@env-names jZe10@env-names) (set! jZe12@set-env-names! (lambda (jZ2555@x jZ2556@val) (simple-struct-set! jZ2555@x '0 jZ2556@val))) (set! jZ289c@jZe12@set-env-names! jZe12@set-env-names!) (set! jZe14@env-labels (lambda (jZ2559@x) (simple-struct-ref jZ2559@x '1))) (set! jZ289d@jZe14@env-labels jZe14@env-labels) (set! jZe16@set-env-labels! (lambda (jZ255b@x jZ255c@val) (simple-struct-set! jZ255b@x '1 jZ255c@val))) (set! jZ289e@jZe16@set-env-labels! jZe16@set-env-labels!) (set! jZe18@env-itc (lambda (jZ255f@x) (simple-struct-ref jZ255f@x '2))) (set! jZ289f@jZe18@env-itc jZe18@env-itc) (set! jZe1a@set-env-itc! (lambda (jZ2561@x jZ2562@val) (simple-struct-set! jZ2561@x '2 jZ2562@val))) (set! jZ28a0@jZe1a@set-env-itc! jZe1a@set-env-itc!) (set! jZe1c@dummy '3) (set! jZ28a1@jZe1c@dummy jZe1c@dummy) (set! jZe1e@rp (jZ6c5@jZ5a0@make-record-printer 'interaction-env (lambda (jZ2565@x jZ2566@p jZ2567@wr) (display '"#<environment>" jZ2566@p)))) (set! jZ28a2@jZe1e@rp jZe1e@rp) (set! jZe28@interaction-env? (lambda (jZ256b@x) (and (simple-struct? jZ256b@x) (eq? (simple-struct-name jZ256b@x) 'interaction-env)))) (set! jZ28a3@jZe28@interaction-env? jZe28@interaction-env?) (set! jZe2a@interaction-env-rib (lambda (jZ256d@x) (simple-struct-ref jZ256d@x '0))) (set! jZ28a4@jZe2a@interaction-env-rib jZe2a@interaction-env-rib) (set! jZe2c@set-interaction-env-rib! (lambda (jZ256f@x jZ2570@val) (simple-struct-set! jZ256f@x '0 jZ2570@val))) (set! jZ28a5@jZe2c@set-interaction-env-rib! jZe2c@set-interaction-env-rib!) (set! jZe2e@interaction-env-r (lambda (jZ2573@x) (simple-struct-ref jZ2573@x '1))) (set! jZ28a6@jZe2e@interaction-env-r jZe2e@interaction-env-r) (set! jZe30@set-interaction-env-r! (lambda (jZ2575@x jZ2576@val) (simple-struct-set! jZ2575@x '1 jZ2576@val))) (set! jZ28a7@jZe30@set-interaction-env-r! jZe30@set-interaction-env-r!) (set! jZe32@interaction-env-locs (lambda (jZ2579@x) (simple-struct-ref jZ2579@x '2))) (set! jZ28a8@jZe32@interaction-env-locs jZe32@interaction-env-locs) (set! jZe34@set-interaction-env-locs! (lambda (jZ257b@x jZ257c@val) (simple-struct-set! jZ257b@x '2 jZ257c@val))) (set! jZ28a9@jZe34@set-interaction-env-locs! jZe34@set-interaction-env-locs!) (set! jZe36@dummy '3) (set! jZ28aa@jZe36@dummy jZe36@dummy) (set! jZe38@interaction-environment-symbols (lambda () (jZe40@environment-symbols (jZe78@interaction-environment)))) (set! jZ28ab@jZe38@interaction-environment-symbols jZe38@interaction-environment-symbols) (set! jZe3a@environment-bindings (lambda (jZ257f@e) (vector->list (vector-map (lambda (jZ2581@name jZ2582@label) (jZe3c@parse-binding (cons jZ2581@name (jZ997@jZ7e0@imported-label->binding jZ2582@label)))) (jZe10@env-names jZ257f@e) (jZe14@env-labels jZ257f@e))))) (set! jZ28ac@jZe3a@environment-bindings jZe3a@environment-bindings) (set! jZe3c@parse-binding (lambda (jZ2585@b) (cons (car jZ2585@b) (let ((jZ2587@t (cadr jZ2585@b))) (if (memv jZ2587@t '(core-prim global)) 'procedure (if (memv jZ2587@t '(core-macro macro global-macro)) 'syntax (if (memv jZ2587@t '($core-rtd)) 'record (if (eq? (car jZ2585@b) (cadr jZ2585@b)) 'syntax 'unknown)))))))) (set! jZ28ad@jZe3c@parse-binding jZe3c@parse-binding) (set! jZe3e@environment? (lambda (jZ2589@x) (or (jZe0e@env? jZ2589@x) (jZe28@interaction-env? jZ2589@x)))) (set! jZ28ae@jZe3e@environment? jZe3e@environment?) (set! jZe40@environment-symbols (lambda (jZ258b@x) (if (jZe0e@env? jZ258b@x) (vector->list (jZe10@env-names jZ258b@x)) (if (jZe28@interaction-env? jZ258b@x) (map values (jZb21@rib-sym* (jZe2a@interaction-env-rib jZ258b@x))) (assertion-violation 'environment-symbols '"not an environment" jZ258b@x))))) (set! jZ28af@jZe40@environment-symbols jZe40@environment-symbols) (set! jZe42@environment (lambda jZ258d@imp* (let ((jZ258f@itc (jZdf0@make-collector))) (let ((jZ2595@jZ2592 jZdf6@imp-collector) (jZ2596@jZ2594 jZ258f@itc)) (let ((jZ2599@swap (lambda () (let ((jZ259b@t (jZ2595@jZ2592))) (begin (jZ2595@jZ2592 jZ2596@jZ2594) (set! jZ2596@jZ2594 jZ259b@t)))))) (dynamic-wind jZ2599@swap (lambda () (call-with-values (lambda () (jZdec@parse-import-spec* jZ258d@imp*)) (lambda (jZ25a1@jZ259e jZ25a2@jZ25a0) (let ((jZ25a5@subst-labels jZ25a2@jZ25a0) (jZ25a6@subst-names jZ25a1@jZ259e)) (make-simple-struct 'env '4 (list jZ25a6@subst-names jZ25a5@subst-labels jZ258f@itc)))))) jZ2599@swap)))))) (set! jZ28b0@jZe42@environment jZe42@environment) (set! jZe44@null-environment (lambda (jZ25a9@n) (begin (if (not (eqv? jZ25a9@n '5)) (assertion-violation 'null-environment '"not 5" jZ25a9@n) (void)) (jZe42@environment '(psyntax null-environment-5))))) (set! jZ28b1@jZe44@null-environment jZe44@null-environment) (set! jZe46@scheme-report-environment (lambda (jZ25ab@n) (begin (if (not (eqv? jZ25ab@n '5)) (assertion-violation 'scheme-report-environment '"not 5" jZ25ab@n) (void)) (jZe42@environment '(psyntax scheme-report-environment-5))))) (set! jZ28b2@jZe46@scheme-report-environment jZe46@scheme-report-environment) (set! jZe48@expand (lambda (jZ25ad@x jZ25ae@env) (if (jZe0e@env? jZ25ae@env) (let ((jZ25b1@rib (jZdee@make-top-rib (jZe10@env-names jZ25ae@env) (jZe14@env-labels jZ25ae@env)))) (let ((jZ25b3@x (make-simple-struct 'stx '5 (list jZ25ad@x jZb07@top-mark* (list jZ25b1@rib) '()))) (jZ25b4@itc (jZe18@env-itc jZ25ae@env)) (jZ25b5@rtc (jZdf0@make-collector)) (jZ25b6@vtc (jZdf0@make-collector))) (let ((jZ25bb@x (let ((jZ25cd@jZ25be jZe7a@top-level-context) (jZ25ce@jZ25c0 jZdf2@inv-collector) (jZ25cf@jZ25c2 jZdf4@vis-collector) (jZ25d0@jZ25c4 jZdf6@imp-collector) (jZ25d1@jZ25c6 '#f) (jZ25d2@jZ25c8 jZ25b5@rtc) (jZ25d3@jZ25ca jZ25b6@vtc) (jZ25d4@jZ25cc jZ25b4@itc)) (let ((jZ25dd@swap (lambda () (begin (let ((jZ25df@t (jZ25cd@jZ25be))) (begin (jZ25cd@jZ25be jZ25d1@jZ25c6) (set! jZ25d1@jZ25c6 jZ25df@t))) (let ((jZ25e1@t (jZ25ce@jZ25c0))) (begin (jZ25ce@jZ25c0 jZ25d2@jZ25c8) (set! jZ25d2@jZ25c8 jZ25e1@t))) (let ((jZ25e3@t (jZ25cf@jZ25c2))) (begin (jZ25cf@jZ25c2 jZ25d3@jZ25ca) (set! jZ25d3@jZ25ca jZ25e3@t))) (let ((jZ25e5@t (jZ25d0@jZ25c4))) (begin (jZ25d0@jZ25c4 jZ25d4@jZ25cc) (set! jZ25d4@jZ25cc jZ25e5@t))))))) (dynamic-wind jZ25dd@swap (lambda () (jZdac@chi-expr jZ25b3@x '() '())) jZ25dd@swap))))) (begin (jZb3f@seal-rib! jZ25b1@rib) (values jZ25bb@x (jZ25b5@rtc)))))) (if (jZe28@interaction-env? jZ25ae@env) (let ((jZ25e7@rib (jZe2a@interaction-env-rib jZ25ae@env)) (jZ25e8@r (jZe2e@interaction-env-r jZ25ae@env)) (jZ25e9@rtc (jZdf0@make-collector))) (let ((jZ25ed@x (make-simple-struct 'stx '5 (list jZ25ad@x jZb07@top-mark* (list jZ25e7@rib) '())))) (call-with-values (lambda () (let ((jZ2603@jZ25f4 jZe7a@top-level-context) (jZ2604@jZ25f6 jZdf2@inv-collector) (jZ2605@jZ25f8 jZdf4@vis-collector) (jZ2606@jZ25fa jZdf6@imp-collector) (jZ2607@jZ25fc jZ25ae@env) (jZ2608@jZ25fe jZ25e9@rtc) (jZ2609@jZ2600 (jZdf0@make-collector)) (jZ260a@jZ2602 (jZdf0@make-collector))) (let ((jZ2613@swap (lambda () (begin (let ((jZ2615@t (jZ2603@jZ25f4))) (begin (jZ2603@jZ25f4 jZ2607@jZ25fc) (set! jZ2607@jZ25fc jZ2615@t))) (let ((jZ2617@t (jZ2604@jZ25f6))) (begin (jZ2604@jZ25f6 jZ2608@jZ25fe) (set! jZ2608@jZ25fe jZ2617@t))) (let ((jZ2619@t (jZ2605@jZ25f8))) (begin (jZ2605@jZ25f8 jZ2609@jZ2600) (set! jZ2609@jZ2600 jZ2619@t))) (let ((jZ261b@t (jZ2606@jZ25fa))) (begin (jZ2606@jZ25fa jZ260a@jZ2602) (set! jZ260a@jZ2602 jZ261b@t))))))) (dynamic-wind jZ2613@swap (lambda () (jZdfa@chi-interaction-expr jZ25ed@x jZ25e7@rib jZ25e8@r)) jZ2613@swap)))) (lambda (jZ261d@jZ25f0 jZ261e@jZ25f2) (let ((jZ2621@r^ jZ261e@jZ25f2) (jZ2622@e jZ261d@jZ25f0)) (begin (jZe30@set-interaction-env-r! jZ25ae@env jZ2621@r^) (values jZ2622@e (jZ25e9@rtc)))))))) (assertion-violation 'expand '"not an environment" jZ25ae@env))))) (set! jZ28b3@jZe48@expand jZe48@expand) (set! jZe4a@eval (lambda (jZ2625@x jZ2626@env) (begin (if (not (jZe3e@environment? jZ2626@env)) (error 'eval '"not an environment" jZ2626@env) (void)) (call-with-values (lambda () (jZe48@expand jZ2625@x jZ2626@env)) (lambda (jZ262d@jZ262a jZ262e@jZ262c) (let ((jZ2631@invoke-req* jZ262e@jZ262c) (jZ2632@x jZ262d@jZ262a)) (begin (for-each jZ998@jZ7e2@invoke-library jZ2631@invoke-req*) (eval-core (jZ71e@jZ6d6@expanded->core jZ2632@x))))))))) (set! jZ28b4@jZe4a@eval jZe4a@eval) (set! jZe4c@library-expander (lambda jZ26a3 (let ((jZ26a4 (length jZ26a3))) (if (= jZ26a4 '3) (apply (lambda (jZ2635@x jZ2636@filename jZ2637@verify-name) (let ((jZ263c@build-visit-code '#f) (jZ263e@visit! '#f)) (begin (set! jZ263c@build-visit-code (lambda (jZ2691@macro*) (if (null? jZ2691@macro*) (jZae9@jZa44@build-void) (jZae8@jZa42@build-sequence '#f (map (lambda (jZ2693@x) (let ((jZ2695@loc (car jZ2693@x)) (jZ2696@src (cddr jZ2693@x))) (list 'set! jZ2695@loc jZ2696@src))) jZ2691@macro*))))) (set! jZ263e@visit! (lambda (jZ2689@macro*) (for-each (lambda (jZ268b@x) (let ((jZ268d@loc (car jZ268b@x)) (jZ268e@proc (cadr jZ268b@x))) (set-symbol-value! jZ268d@loc jZ268e@proc))) jZ2689@macro*))) (call-with-values (lambda () (jZdfe@core-library-expander jZ2635@x jZ2637@verify-name)) (lambda (jZ2651@jZ2640 jZ2652@jZ2642 jZ2653@jZ2644 jZ2654@jZ2646 jZ2655@jZ2648 jZ2656@jZ264a jZ2657@jZ264c jZ2658@jZ264e jZ2659@jZ2650) (let ((jZ2663@export-env jZ2659@jZ2650) (jZ2664@export-subst jZ2658@jZ264e) (jZ2665@macro* jZ2657@jZ264c) (jZ2666@invoke-code jZ2656@jZ264a) (jZ2667@vis* jZ2655@jZ2648) (jZ2668@inv* jZ2654@jZ2646) (jZ2669@imp* jZ2653@jZ2644) (jZ266a@ver jZ2652@jZ2642) (jZ266b@name jZ2651@jZ2640)) (let ((jZ2675@id (gensym)) (jZ2676@name jZ266b@name) (jZ2677@ver jZ266a@ver) (jZ2678@imp* (map jZ99d@jZ7ec@library-spec jZ2669@imp*)) (jZ2679@vis* (map jZ99d@jZ7ec@library-spec jZ2667@vis*)) (jZ267a@inv* (map jZ99d@jZ7ec@library-spec jZ2668@inv*)) (jZ267b@visit-proc (lambda () (jZ263e@visit! jZ2665@macro*))) (jZ267c@invoke-proc (lambda () (eval-core (jZ71e@jZ6d6@expanded->core jZ2666@invoke-code)))) (jZ267d@visit-code (jZ263c@build-visit-code jZ2665@macro*)) (jZ267e@invoke-code jZ2666@invoke-code)) (begin (jZ996@jZ7de@install-library jZ2675@id jZ2676@name jZ2677@ver jZ2678@imp* jZ2679@vis* jZ267a@inv* jZ2664@export-subst jZ2663@export-env jZ267b@visit-proc jZ267c@invoke-proc jZ267d@visit-code jZ267e@invoke-code '#t jZ2636@filename) (values jZ2675@id jZ2676@name jZ2677@ver jZ2678@imp* jZ2679@vis* jZ267a@inv* jZ267e@invoke-code jZ267d@visit-code jZ2664@export-subst jZ2663@export-env))))))))) jZ26a3) (if (= jZ26a4 '2) (apply (lambda (jZ2699@x jZ269a@filename) (jZe4c@library-expander jZ2699@x jZ269a@filename (lambda (jZ269d@x) (values)))) jZ26a3) (if (= jZ26a4 '1) (apply (lambda (jZ269f@x) (jZe4c@library-expander jZ269f@x '#f (lambda (jZ26a1@x) (values)))) jZ26a3) (error 'apply '"invalid arg count"))))))) (set! jZ28b5@jZe4c@library-expander jZe4c@library-expander) (set! jZe4e@boot-library-expand (lambda (jZ26a5@x) (call-with-values (lambda () (jZe4c@library-expander jZ26a5@x)) (lambda (jZ26bb@jZ26a8 jZ26bc@jZ26aa jZ26bd@jZ26ac jZ26be@jZ26ae jZ26bf@jZ26b0 jZ26c0@jZ26b2 jZ26c1@jZ26b4 jZ26c2@jZ26b6 jZ26c3@jZ26b8 jZ26c4@jZ26ba) (let ((jZ26cf@export-env jZ26c4@jZ26ba) (jZ26d0@export-subst jZ26c3@jZ26b8) (jZ26d1@visit-code jZ26c2@jZ26b6) (jZ26d2@invoke-code jZ26c1@jZ26b4) (jZ26d3@inv* jZ26c0@jZ26b2) (jZ26d4@vis* jZ26bf@jZ26b0) (jZ26d5@imp* jZ26be@jZ26ae) (jZ26d6@ver jZ26bd@jZ26ac) (jZ26d7@name jZ26bc@jZ26aa) (jZ26d8@id jZ26bb@jZ26a8)) (values jZ26d7@name jZ26d2@invoke-code jZ26d0@export-subst jZ26cf@export-env)))))) (set! jZ28b6@jZe4e@boot-library-expand jZe4e@boot-library-expand) (set! jZe50@rev-map-append (lambda (jZ26e3@f jZ26e4@ls jZ26e5@ac) (if (null? jZ26e4@ls) jZ26e5@ac (jZe50@rev-map-append jZ26e3@f (cdr jZ26e4@ls) (cons (jZ26e3@f (car jZ26e4@ls)) jZ26e5@ac))))) (set! jZ28b7@jZe50@rev-map-append jZe50@rev-map-append) (set! jZe52@build-exports (lambda (jZ26e9@lex*+loc* jZ26ea@init*) (jZae8@jZa42@build-sequence '#f (cons (jZae9@jZa44@build-void) (jZe50@rev-map-append (lambda (jZ26ed@x) (list 'set! (cdr jZ26ed@x) (car jZ26ed@x))) jZ26e9@lex*+loc* jZ26ea@init*))))) (set! jZ28b8@jZe52@build-exports jZe52@build-exports) (set! jZe54@make-export-subst (lambda (jZ26ef@name* jZ26f0@id*) (map (lambda (jZ26f3@name jZ26f4@id) (let ((jZ26f7@label (jZb99@id->label jZ26f4@id))) (begin (if (not jZ26f7@label) (jZe6a@syntax-violation '#f '"cannot export unbound identifier" jZ26f4@id) (void)) (cons jZ26f3@name jZ26f7@label)))) jZ26ef@name* jZ26f0@id*))) (set! jZ28b9@jZe54@make-export-subst jZe54@make-export-subst) (set! jZe56@make-export-env/macros (lambda (jZ26f9@lex* jZ26fa@loc* jZ26fb@r) (let ((jZ2700@lookup '#f)) (begin (set! jZ2700@lookup (lambda (jZ271d@x) (let jZ2725@f ((jZ271f@x jZ271d@x) (jZ2720@lex* jZ26f9@lex*) (jZ2721@loc* jZ26fa@loc*)) (if (pair? jZ2720@lex*) (if (eq? jZ271f@x (car jZ2720@lex*)) (car jZ2721@loc*) (jZ2725@f jZ271f@x (cdr jZ2720@lex*) (cdr jZ2721@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let jZ2709@f ((jZ2701@r jZ26fb@r) (jZ2702@env '()) (jZ2703@global* '()) (jZ2704@macro* '())) (if (null? jZ2701@r) (values jZ2702@env jZ2703@global* jZ2704@macro*) (let ((jZ270b@x (car jZ2701@r))) (let ((jZ270d@label (car jZ270b@x)) (jZ270e@b (cdr jZ270b@x))) (let ((jZ2711@t (jZb9f@binding-type jZ270e@b))) (if (memv jZ2711@t '(lexical)) (let ((jZ2713@v (jZba1@binding-value jZ270e@b))) (let ((jZ2715@loc (jZ2700@lookup (jZd14@lexical-var jZ2713@v))) (jZ2716@type (if (jZd16@lexical-mutable? jZ2713@v) 'mutable 'global))) (jZ2709@f (cdr jZ2701@r) (cons (cons* jZ270d@label jZ2716@type jZ2715@loc) jZ2702@env) (cons (cons (jZd14@lexical-var jZ2713@v) jZ2715@loc) jZ2703@global*) jZ2704@macro*))) (if (memv jZ2711@t '(local-macro)) (let ((jZ2719@loc (gensym))) (jZ2709@f (cdr jZ2701@r) (cons (cons* jZ270d@label 'global-macro jZ2719@loc) jZ2702@env) jZ2703@global* (cons (cons jZ2719@loc (jZba1@binding-value jZ270e@b)) jZ2704@macro*))) (if (memv jZ2711@t '(local-macro!)) (let ((jZ271b@loc (gensym))) (jZ2709@f (cdr jZ2701@r) (cons (cons* jZ270d@label 'global-macro! jZ271b@loc) jZ2702@env) jZ2703@global* (cons (cons jZ271b@loc (jZba1@binding-value jZ270e@b)) jZ2704@macro*))) (if (memv jZ2711@t '($rtd $module)) (jZ2709@f (cdr jZ2701@r) (cons jZ270b@x jZ2702@env) jZ2703@global* jZ2704@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (jZb9f@binding-type jZ270e@b) (jZba1@binding-value jZ270e@b))))))))))))))) (set! jZ28ba@jZe56@make-export-env/macros jZe56@make-export-env/macros) (set! jZe58@generate-temporaries (lambda (jZ2727@ls) (let ((jZ2729@t jZ2727@ls)) (let ((jZ272b@ls/false (jZd8a@syntax-dispatch jZ2729@t 'each-any))) (if jZ272b@ls/false (apply (lambda (jZ272d@ls) (map (lambda (jZ272f@x) (make-simple-struct 'stx '5 (list (let ((jZ2731@x (jZe70@syntax->datum jZ272f@x))) (if (or (symbol? jZ2731@x) (string? jZ2731@x)) (gensym jZ2731@x) (gensym 't))) jZb07@top-mark* '() '()))) jZ272d@ls)) jZ272b@ls/false) (let ((jZ2733@t jZ2729@t)) (let ((jZ2735@ls/false (jZd8a@syntax-dispatch jZ2733@t '_))) (if jZ2735@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) jZ2735@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ2733@t))))))))) (set! jZ28bb@jZe58@generate-temporaries jZe58@generate-temporaries) (set! jZe5a@free-identifier=? (lambda (jZ2737@x jZ2738@y) (if (jZb83@id? jZ2737@x) (if (jZb83@id? jZ2738@y) (jZb89@free-id=? jZ2737@x jZ2738@y) (assertion-violation 'free-identifier=? '"not an identifier" jZ2738@y)) (assertion-violation 'free-identifier=? '"not an identifier" jZ2737@x)))) (set! jZ28bc@jZe5a@free-identifier=? jZe5a@free-identifier=?) (set! jZe5c@bound-identifier=? (lambda (jZ273b@x jZ273c@y) (if (jZb83@id? jZ273b@x) (if (jZb83@id? jZ273c@y) (jZb87@bound-id=? jZ273b@x jZ273c@y) (assertion-violation 'bound-identifier=? '"not an identifier" jZ273c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" jZ273b@x)))) (set! jZ28bd@jZe5c@bound-identifier=? jZe5c@bound-identifier=?) (set! jZe5e@make-source-condition (lambda (jZ273f@x) (let ((jZ2749@jZ2744 '#f) (jZ274b@jZ2746 '#f) (jZ274d@jZ2745 '#f) (jZ2750@jZ2743 '#f) (jZ2752@make-source-condition '#f) (jZ2754@jZ2741 '#f) (jZ2756@jZ2742 '#f) (jZ2758@source-condition? '#f) (jZ275a@source-filename '#f) (jZ275c@source-character '#f)) (begin (set! jZ2749@jZ2744 (make-record-type-descriptor '&source-information jZ2b9f@jZ28e6@&condition-rtd 'jZ2747 '#f '#f '#((immutable file-name) (immutable character)))) (set! jZ274b@jZ2746 '#f) (set! jZ274d@jZ2745 (make-record-constructor-descriptor jZ2749@jZ2744 jZ2ba0@jZ28e8@&condition-rcd jZ274b@jZ2746)) (set! jZ2750@jZ2743 (record-predicate jZ2749@jZ2744)) (set! jZ2752@make-source-condition (record-constructor jZ274d@jZ2745)) (set! jZ2754@jZ2741 (record-accessor jZ2749@jZ2744 '0)) (set! jZ2756@jZ2742 (record-accessor jZ2749@jZ2744 '1)) (set! jZ2758@source-condition? (condition-predicate jZ2749@jZ2744)) (set! jZ275a@source-filename (condition-accessor jZ2749@jZ2744 jZ2754@jZ2741)) (set! jZ275c@source-character (condition-accessor jZ2749@jZ2744 jZ2756@jZ2742)) (if (pair? jZ273f@x) (jZ2752@make-source-condition (car jZ273f@x) (cdr jZ273f@x)) (condition)))))) (set! jZ28be@jZe5e@make-source-condition jZe5e@make-source-condition) (set! jZe60@extract-position-condition (lambda (jZ275d@x) (jZe5e@make-source-condition (jZe62@expression-position jZ275d@x)))) (set! jZ28bf@jZe60@extract-position-condition jZe60@extract-position-condition) (set! jZe62@expression-position (lambda (jZ275f@x) (and (jZb4f@stx? jZ275f@x) (let ((jZ2761@x (jZb51@stx-expr jZ275f@x))) (and (jZ6bc@jZ58e@annotation? jZ2761@x) (jZ6bd@jZ590@annotation-source jZ2761@x)))))) (set! jZ28c0@jZe62@expression-position jZe62@expression-position) (set! jZe64@assertion-error (lambda (jZ2763@expr jZ2764@pos) (raise (condition (jZ2bcf@jZ29aa@make-assertion-violation) (jZ2be1@jZ29dc@make-who-condition 'assert) (jZ2ba5@jZ293d@make-message-condition '"assertion failed") (jZ2bd7@jZ29c1@make-irritants-condition (list jZ2763@expr)) (jZe5e@make-source-condition jZ2764@pos))))) (set! jZ28c1@jZe64@assertion-error jZe64@assertion-error) (set! jZe66@syntax-error (lambda (jZ2767@x . jZ2769@args) (begin (if (not (for-all string? jZ2769@args)) (assertion-violation 'syntax-error '"invalid argument" jZ2769@args) (void)) (raise (condition (jZ2ba5@jZ293d@make-message-condition (if (null? jZ2769@args) '"invalid syntax" (apply string-append jZ2769@args))) (jZ2c03@jZ2a38@make-syntax-violation (jZe70@syntax->datum jZ2767@x) '#f) (jZe60@extract-position-condition jZ2767@x)))))) (set! jZ28c2@jZe66@syntax-error jZe66@syntax-error) (set! jZe68@syntax-violation* (lambda (jZ276b@who jZ276c@msg jZ276d@form jZ276e@condition-object) (begin (if (not (string? jZ276c@msg)) (assertion-violation 'syntax-violation '"message is not a string" jZ276c@msg) (void)) (let ((jZ2773@who (if (or (string? jZ276b@who) (symbol? jZ276b@who)) jZ276b@who (if (not jZ276b@who) (let ((jZ2775@t jZ276d@form)) (let ((jZ2777@ls/false (jZd8a@syntax-dispatch jZ2775@t 'any))) (if (and jZ2777@ls/false (apply (lambda (jZ2779@id) (jZb83@id? jZ2779@id)) jZ2777@ls/false)) (apply (lambda (jZ277b@id) (jZe70@syntax->datum jZ277b@id)) jZ2777@ls/false) (let ((jZ277d@t jZ2775@t)) (let ((jZ277f@ls/false (jZd8a@syntax-dispatch jZ277d@t '(any . any)))) (if (and jZ277f@ls/false (apply (lambda (jZ2781@id jZ2782@rest) (jZb83@id? jZ2781@id)) jZ277f@ls/false)) (apply (lambda (jZ2785@id jZ2786@rest) (jZe70@syntax->datum jZ2785@id)) jZ277f@ls/false) (let ((jZ2789@t jZ277d@t)) (let ((jZ278b@ls/false (jZd8a@syntax-dispatch jZ2789@t '_))) (if jZ278b@ls/false (apply (lambda () '#f) jZ278b@ls/false) (jZe6a@syntax-violation '#f '"invalid syntax" jZ2789@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" jZ276b@who))))) (raise (condition (if jZ2773@who (jZ2be1@jZ29dc@make-who-condition jZ2773@who) (condition)) (jZ2ba5@jZ293d@make-message-condition jZ276c@msg) jZ276e@condition-object (jZe60@extract-position-condition jZ276d@form))))))) (set! jZ28c3@jZe68@syntax-violation* jZe68@syntax-violation*) (set! jZe6a@syntax-violation (lambda jZ279b (let ((jZ279c (length jZ279b))) (if (= jZ279c '3) (apply (lambda (jZ278d@who jZ278e@msg jZ278f@form) (jZe6a@syntax-violation jZ278d@who jZ278e@msg jZ278f@form '#f)) jZ279b) (if (= jZ279c '4) (apply (lambda (jZ2793@who jZ2794@msg jZ2795@form jZ2796@subform) (jZe68@syntax-violation* jZ2793@who jZ2794@msg jZ2795@form (jZ2c03@jZ2a38@make-syntax-violation (jZe70@syntax->datum jZ2795@form) (jZe70@syntax->datum jZ2796@subform)))) jZ279b) (error 'apply '"invalid arg count")))))) (set! jZ28c4@jZe6a@syntax-violation jZe6a@syntax-violation) (set! jZe6c@identifier? (lambda (jZ279d@x) (jZb83@id? jZ279d@x))) (set! jZ28c5@jZe6c@identifier? jZe6c@identifier?) (set! jZe6e@datum->syntax (lambda (jZ279f@id jZ27a0@datum) (if (jZb83@id? jZ279f@id) (jZb63@datum->stx jZ279f@id jZ27a0@datum) (assertion-violation 'datum->syntax '"not an identifier" jZ279f@id)))) (set! jZ28c6@jZe6e@datum->syntax jZe6e@datum->syntax) (set! jZe70@syntax->datum (lambda (jZ27a3@x) (jZb97@stx->datum jZ27a3@x))) (set! jZ28c7@jZe70@syntax->datum jZe70@syntax->datum) (set! jZe72@ungensym-all (lambda (jZ27a5@code) (if (pair? jZ27a5@code) (cons (jZe72@ungensym-all (car jZ27a5@code)) (jZe72@ungensym-all (cdr jZ27a5@code))) (if (symbol? jZ27a5@code) (ungensym jZ27a5@code) jZ27a5@code)))) (set! jZ28c8@jZe72@ungensym-all jZe72@ungensym-all) (set! jZe74@compile-r6rs-top-level (lambda (jZ27a7@x*) (call-with-values (lambda () (jZe02@top-level-expander jZ27a7@x*)) (lambda (jZ27ad@jZ27aa jZ27ae@jZ27ac) (let ((jZ27b1@invoke-code jZ27ae@jZ27ac) (jZ27b2@lib* jZ27ad@jZ27aa)) (lambda () (begin (for-each jZ998@jZ7e2@invoke-library jZ27b2@lib*) (let ((jZ27b5@expanded (jZ71e@jZ6d6@expanded->core jZ27b1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (jZe72@ungensym-all jZ27b5@expanded)) (void)) (eval-core jZ27b5@expanded)))))))))) (set! jZ28c9@jZe74@compile-r6rs-top-level jZe74@compile-r6rs-top-level) (set! jZe76@pre-compile-r6rs-top-level (lambda (jZ27b7@x*) (call-with-values (lambda () (jZe02@top-level-expander jZ27b7@x*)) (lambda (jZ27bd@jZ27ba jZ27be@jZ27bc) (let ((jZ27c1@invoke-code jZ27be@jZ27bc) (jZ27c2@lib* jZ27bd@jZ27ba)) (begin (for-each jZ998@jZ7e2@invoke-library jZ27c2@lib*) (jZ6c6@jZ5a2@compile-core (jZ71e@jZ6d6@expanded->core jZ27c1@invoke-code)))))))) (set! jZ28ca@jZe76@pre-compile-r6rs-top-level jZe76@pre-compile-r6rs-top-level) (set! jZe78@interaction-environment (let ((jZ27c5@the-env '#f)) (lambda () (or jZ27c5@the-env (let ((jZ27c7@lib (jZ991@jZ7d4@find-library-by-name '(mosh interaction))) (jZ27c8@rib (jZb37@make-empty-rib))) (begin (let ((jZ27cb@subst (jZ973@jZ798@library-subst jZ27c7@lib))) (begin (jZb23@set-rib-sym*! jZ27c8@rib (map car jZ27cb@subst)) (jZb27@set-rib-mark**! jZ27c8@rib (map (lambda (jZ27cd@x) jZb07@top-mark*) jZ27cb@subst)) (jZb2b@set-rib-label*! jZ27c8@rib (map cdr jZ27cb@subst)))) (let ((jZ27cf@env (make-simple-struct 'interaction-env '4 (list jZ27c8@rib '() '())))) (begin (set! jZ27c5@the-env jZ27cf@env) jZ27cf@env)))))))) (set! jZ28cb@jZe78@interaction-environment jZe78@interaction-environment) (set! jZe7a@top-level-context (jZ6c8@jZ5a6@make-parameter '#f)) (set! jZ28cc@jZe7a@top-level-context jZe7a@top-level-context) (jZ98e@jZ7ce@current-library-expander jZe4c@library-expander))
(begin (set! jZ28db@jZ28d6 (unspecified)) (set! jZ28dd@jZ28d8 (unspecified)) (set! jZ28df@jZ28d7 (unspecified)) (set! jZ28e2@&condition? (unspecified)) (set! jZ28e4@make-&condition (unspecified)) (set! jZ28e6@&condition-rtd (unspecified)) (set! jZ28e8@&condition-rcd (unspecified)) (set! jZ2934@jZ292f (unspecified)) (set! jZ2936@jZ2931 (unspecified)) (set! jZ2938@jZ2930 (unspecified)) (set! jZ293b@p? (unspecified)) (set! jZ293d@make-message-condition (unspecified)) (set! jZ293f@jZ292e (unspecified)) (set! jZ2941@message-condition? (unspecified)) (set! jZ2943@condition-message (unspecified)) (set! jZ2945@&message-rtd (unspecified)) (set! jZ2947@&message-rcd (unspecified)) (set! jZ294d@jZ2948 (unspecified)) (set! jZ294f@jZ294a (unspecified)) (set! jZ2951@jZ2949 (unspecified)) (set! jZ2954@p? (unspecified)) (set! jZ2956@make-warning (unspecified)) (set! jZ2958@warning? (unspecified)) (set! jZ295a@&warning-rtd (unspecified)) (set! jZ295c@&warning-rcd (unspecified)) (set! jZ2962@jZ295d (unspecified)) (set! jZ2964@jZ295f (unspecified)) (set! jZ2966@jZ295e (unspecified)) (set! jZ2969@p? (unspecified)) (set! jZ296b@make-serious-condition (unspecified)) (set! jZ296d@serious-condition? (unspecified)) (set! jZ296f@&serious-rtd (unspecified)) (set! jZ2971@&serious-rcd (unspecified)) (set! jZ2977@jZ2972 (unspecified)) (set! jZ2979@jZ2974 (unspecified)) (set! jZ297b@jZ2973 (unspecified)) (set! jZ297e@p? (unspecified)) (set! jZ2980@make-error (unspecified)) (set! jZ2982@error? (unspecified)) (set! jZ2984@&error-rtd (unspecified)) (set! jZ2986@&error-rcd (unspecified)) (set! jZ298c@jZ2987 (unspecified)) (set! jZ298e@jZ2989 (unspecified)) (set! jZ2990@jZ2988 (unspecified)) (set! jZ2993@p? (unspecified)) (set! jZ2995@make-violation (unspecified)) (set! jZ2997@violation? (unspecified)) (set! jZ2999@&violation-rtd (unspecified)) (set! jZ299b@&violation-rcd (unspecified)) (set! jZ29a1@jZ299c (unspecified)) (set! jZ29a3@jZ299e (unspecified)) (set! jZ29a5@jZ299d (unspecified)) (set! jZ29a8@p? (unspecified)) (set! jZ29aa@make-assertion-violation (unspecified)) (set! jZ29ac@assertion-violation? (unspecified)) (set! jZ29ae@&assertion-rtd (unspecified)) (set! jZ29b0@&assertion-rcd (unspecified)) (set! jZ29b8@jZ29b3 (unspecified)) (set! jZ29ba@jZ29b5 (unspecified)) (set! jZ29bc@jZ29b4 (unspecified)) (set! jZ29bf@p? (unspecified)) (set! jZ29c1@make-irritants-condition (unspecified)) (set! jZ29c3@jZ29b2 (unspecified)) (set! jZ29c5@irritants-condition? (unspecified)) (set! jZ29c7@condition-irritants (unspecified)) (set! jZ29c9@&irritants-rtd (unspecified)) (set! jZ29cb@&irritants-rcd (unspecified)) (set! jZ29d3@jZ29ce (unspecified)) (set! jZ29d5@jZ29d0 (unspecified)) (set! jZ29d7@jZ29cf (unspecified)) (set! jZ29da@p? (unspecified)) (set! jZ29dc@make-who-condition (unspecified)) (set! jZ29de@jZ29cd (unspecified)) (set! jZ29e0@who-condition? (unspecified)) (set! jZ29e2@condition-who (unspecified)) (set! jZ29e4@&who-rtd (unspecified)) (set! jZ29e6@&who-rcd (unspecified)) (set! jZ29ec@jZ29e7 (unspecified)) (set! jZ29ee@jZ29e9 (unspecified)) (set! jZ29f0@jZ29e8 (unspecified)) (set! jZ29f3@p? (unspecified)) (set! jZ29f5@make-non-continuable-violation (unspecified)) (set! jZ29f7@non-continuable-violation? (unspecified)) (set! jZ29f9@&non-continuable-rtd (unspecified)) (set! jZ29fb@&non-continuable-rcd (unspecified)) (set! jZ2a01@jZ29fc (unspecified)) (set! jZ2a03@jZ29fe (unspecified)) (set! jZ2a05@jZ29fd (unspecified)) (set! jZ2a08@p? (unspecified)) (set! jZ2a0a@make-implementation-restriction-violation (unspecified)) (set! jZ2a0c@implementation-restriction-violation? (unspecified)) (set! jZ2a0e@&implementation-restriction-rtd (unspecified)) (set! jZ2a10@&implementation-restriction-rcd (unspecified)) (set! jZ2a16@jZ2a11 (unspecified)) (set! jZ2a18@jZ2a13 (unspecified)) (set! jZ2a1a@jZ2a12 (unspecified)) (set! jZ2a1d@p? (unspecified)) (set! jZ2a1f@make-lexical-violation (unspecified)) (set! jZ2a21@lexical-violation? (unspecified)) (set! jZ2a23@&lexical-rtd (unspecified)) (set! jZ2a25@&lexical-rcd (unspecified)) (set! jZ2a2f@jZ2a2a (unspecified)) (set! jZ2a31@jZ2a2c (unspecified)) (set! jZ2a33@jZ2a2b (unspecified)) (set! jZ2a36@p? (unspecified)) (set! jZ2a38@make-syntax-violation (unspecified)) (set! jZ2a3a@jZ2a27 (unspecified)) (set! jZ2a3c@jZ2a29 (unspecified)) (set! jZ2a3e@syntax-violation? (unspecified)) (set! jZ2a40@syntax-violation-form (unspecified)) (set! jZ2a42@syntax-violation-subform (unspecified)) (set! jZ2a44@&syntax-rtd (unspecified)) (set! jZ2a46@&syntax-rcd (unspecified)) (set! jZ2a4c@jZ2a47 (unspecified)) (set! jZ2a4e@jZ2a49 (unspecified)) (set! jZ2a50@jZ2a48 (unspecified)) (set! jZ2a53@p? (unspecified)) (set! jZ2a55@make-undefined-violation (unspecified)) (set! jZ2a57@undefined-violation? (unspecified)) (set! jZ2a59@&undefined-rtd (unspecified)) (set! jZ2a5b@&undefined-rcd (unspecified)) (set! jZ2a61@jZ2a5c (unspecified)) (set! jZ2a63@jZ2a5e (unspecified)) (set! jZ2a65@jZ2a5d (unspecified)) (set! jZ2a68@p? (unspecified)) (set! jZ2a6a@make-i/o-error (unspecified)) (set! jZ2a6c@i/o-error? (unspecified)) (set! jZ2a6e@&i/o-rtd (unspecified)) (set! jZ2a70@&i/o-rcd (unspecified)) (set! jZ2a76@jZ2a71 (unspecified)) (set! jZ2a78@jZ2a73 (unspecified)) (set! jZ2a7a@jZ2a72 (unspecified)) (set! jZ2a7d@p? (unspecified)) (set! jZ2a7f@make-i/o-read-error (unspecified)) (set! jZ2a81@i/o-read-error? (unspecified)) (set! jZ2a83@&i/o-read-rtd (unspecified)) (set! jZ2a85@&i/o-read-rcd (unspecified)) (set! jZ2a8b@jZ2a86 (unspecified)) (set! jZ2a8d@jZ2a88 (unspecified)) (set! jZ2a8f@jZ2a87 (unspecified)) (set! jZ2a92@p? (unspecified)) (set! jZ2a94@make-i/o-write-error (unspecified)) (set! jZ2a96@i/o-write-error? (unspecified)) (set! jZ2a98@&i/o-write-rtd (unspecified)) (set! jZ2a9a@&i/o-write-rcd (unspecified)) (set! jZ2aa2@jZ2a9d (unspecified)) (set! jZ2aa4@jZ2a9f (unspecified)) (set! jZ2aa6@jZ2a9e (unspecified)) (set! jZ2aa9@p? (unspecified)) (set! jZ2aab@make-i/o-invalid-position-error (unspecified)) (set! jZ2aad@jZ2a9c (unspecified)) (set! jZ2aaf@i/o-invalid-position-error? (unspecified)) (set! jZ2ab1@i/o-error-position (unspecified)) (set! jZ2ab3@&i/o-invalid-position-rtd (unspecified)) (set! jZ2ab5@&i/o-invalid-position-rcd (unspecified)) (set! jZ2abd@jZ2ab8 (unspecified)) (set! jZ2abf@jZ2aba (unspecified)) (set! jZ2ac1@jZ2ab9 (unspecified)) (set! jZ2ac4@p? (unspecified)) (set! jZ2ac6@make-i/o-filename-error (unspecified)) (set! jZ2ac8@jZ2ab7 (unspecified)) (set! jZ2aca@i/o-filename-error? (unspecified)) (set! jZ2acc@i/o-error-filename (unspecified)) (set! jZ2ace@&i/o-filename-rtd (unspecified)) (set! jZ2ad0@&i/o-filename-rcd (unspecified)) (set! jZ2ad6@jZ2ad1 (unspecified)) (set! jZ2ad8@jZ2ad3 (unspecified)) (set! jZ2ada@jZ2ad2 (unspecified)) (set! jZ2add@p? (unspecified)) (set! jZ2adf@make-i/o-file-protection-error (unspecified)) (set! jZ2ae1@i/o-file-protection-error? (unspecified)) (set! jZ2ae3@&i/o-file-protection-rtd (unspecified)) (set! jZ2ae5@&i/o-file-protection-rcd (unspecified)) (set! jZ2aeb@jZ2ae6 (unspecified)) (set! jZ2aed@jZ2ae8 (unspecified)) (set! jZ2aef@jZ2ae7 (unspecified)) (set! jZ2af2@p? (unspecified)) (set! jZ2af4@make-i/o-file-is-read-only-error (unspecified)) (set! jZ2af6@i/o-file-is-read-only-error? (unspecified)) (set! jZ2af8@&i/o-file-is-read-only-rtd (unspecified)) (set! jZ2afa@&i/o-file-is-read-only-rcd (unspecified)) (set! jZ2b00@jZ2afb (unspecified)) (set! jZ2b02@jZ2afd (unspecified)) (set! jZ2b04@jZ2afc (unspecified)) (set! jZ2b07@p? (unspecified)) (set! jZ2b09@make-i/o-file-already-exists-error (unspecified)) (set! jZ2b0b@i/o-file-already-exists-error? (unspecified)) (set! jZ2b0d@&i/o-file-already-exists-rtd (unspecified)) (set! jZ2b0f@&i/o-file-already-exists-rcd (unspecified)) (set! jZ2b15@jZ2b10 (unspecified)) (set! jZ2b17@jZ2b12 (unspecified)) (set! jZ2b19@jZ2b11 (unspecified)) (set! jZ2b1c@p? (unspecified)) (set! jZ2b1e@make-i/o-file-does-not-exist-error (unspecified)) (set! jZ2b20@i/o-file-does-not-exist-error? (unspecified)) (set! jZ2b22@&i/o-file-does-not-exist-rtd (unspecified)) (set! jZ2b24@&i/o-file-does-not-exist-rcd (unspecified)) (set! jZ2b2c@jZ2b27 (unspecified)) (set! jZ2b2e@jZ2b29 (unspecified)) (set! jZ2b30@jZ2b28 (unspecified)) (set! jZ2b33@p? (unspecified)) (set! jZ2b35@make-i/o-port-error (unspecified)) (set! jZ2b37@jZ2b26 (unspecified)) (set! jZ2b39@i/o-port-error? (unspecified)) (set! jZ2b3b@i/o-error-port (unspecified)) (set! jZ2b3d@&i/o-port-rtd (unspecified)) (set! jZ2b3f@&i/o-port-rcd (unspecified)) (set! jZ2b45@jZ2b40 (unspecified)) (set! jZ2b47@jZ2b42 (unspecified)) (set! jZ2b49@jZ2b41 (unspecified)) (set! jZ2b4c@p? (unspecified)) (set! jZ2b4e@make-i/o-decoding-error (unspecified)) (set! jZ2b50@i/o-decoding-error? (unspecified)) (set! jZ2b52@&i/o-decoding-rtd (unspecified)) (set! jZ2b54@&i/o-decoding-rcd (unspecified)) (set! jZ2b5c@jZ2b57 (unspecified)) (set! jZ2b5e@jZ2b59 (unspecified)) (set! jZ2b60@jZ2b58 (unspecified)) (set! jZ2b63@p? (unspecified)) (set! jZ2b65@make-i/o-encoding-error (unspecified)) (set! jZ2b67@jZ2b56 (unspecified)) (set! jZ2b69@i/o-encoding-error? (unspecified)) (set! jZ2b6b@i/o-encoding-error-char (unspecified)) (set! jZ2b6d@&i/o-encoding-rtd (unspecified)) (set! jZ2b6f@&i/o-encoding-rcd (unspecified)) (set! jZ2b75@jZ2b70 (unspecified)) (set! jZ2b77@jZ2b72 (unspecified)) (set! jZ2b79@jZ2b71 (unspecified)) (set! jZ2b7c@p? (unspecified)) (set! jZ2b7e@make-no-infinities-violation (unspecified)) (set! jZ2b80@no-infinities-violation? (unspecified)) (set! jZ2b82@&no-infinities-rtd (unspecified)) (set! jZ2b84@&no-infinities-rcd (unspecified)) (set! jZ2b8a@jZ2b85 (unspecified)) (set! jZ2b8c@jZ2b87 (unspecified)) (set! jZ2b8e@jZ2b86 (unspecified)) (set! jZ2b91@p? (unspecified)) (set! jZ2b93@make-no-nans-violation (unspecified)) (set! jZ2b95@no-nans-violation? (unspecified)) (set! jZ2b97@&no-nans-rtd (unspecified)) (set! jZ2b99@&no-nans-rcd (unspecified)) (set! jZ28db@jZ28d6 (make-record-type-descriptor '&condition '#f 'jZ28d9 '#f '#f '#())) (set! jZ2b9a@jZ28db@jZ28d6 jZ28db@jZ28d6) (set! jZ28dd@jZ28d8 '#f) (set! jZ2b9b@jZ28dd@jZ28d8 jZ28dd@jZ28d8) (set! jZ28df@jZ28d7 (make-record-constructor-descriptor jZ28db@jZ28d6 '#f jZ28dd@jZ28d8)) (set! jZ2b9c@jZ28df@jZ28d7 jZ28df@jZ28d7) (set! jZ28e2@&condition? (record-predicate jZ28db@jZ28d6)) (set! jZ2b9d@jZ28e2@&condition? jZ28e2@&condition?) (set! jZ28e4@make-&condition (record-constructor jZ28df@jZ28d7)) (set! jZ2b9e@jZ28e4@make-&condition jZ28e4@make-&condition) (set! jZ28e6@&condition-rtd jZ28db@jZ28d6) (set! jZ2b9f@jZ28e6@&condition-rtd jZ28e6@&condition-rtd) (set! jZ28e8@&condition-rcd jZ28df@jZ28d7) (set! jZ2ba0@jZ28e8@&condition-rcd jZ28e8@&condition-rcd) (set! jZ2934@jZ292f (make-record-type-descriptor '&message jZ28db@jZ28d6 'jZ2932 '#f '#f '#((immutable message)))) (set! jZ2ba1@jZ2934@jZ292f jZ2934@jZ292f) (set! jZ2936@jZ2931 '#f) (set! jZ2ba2@jZ2936@jZ2931 jZ2936@jZ2931) (set! jZ2938@jZ2930 (make-record-constructor-descriptor jZ2934@jZ292f jZ28df@jZ28d7 jZ2936@jZ2931)) (set! jZ2ba3@jZ2938@jZ2930 jZ2938@jZ2930) (set! jZ293b@p? (record-predicate jZ2934@jZ292f)) (set! jZ2ba4@jZ293b@p? jZ293b@p?) (set! jZ293d@make-message-condition (record-constructor jZ2938@jZ2930)) (set! jZ2ba5@jZ293d@make-message-condition jZ293d@make-message-condition) (set! jZ293f@jZ292e (record-accessor jZ2934@jZ292f '0)) (set! jZ2ba6@jZ293f@jZ292e jZ293f@jZ292e) (set! jZ2941@message-condition? (condition-predicate jZ2934@jZ292f)) (set! jZ2ba7@jZ2941@message-condition? jZ2941@message-condition?) (set! jZ2943@condition-message (condition-accessor jZ2934@jZ292f jZ293f@jZ292e)) (set! jZ2ba8@jZ2943@condition-message jZ2943@condition-message) (set! jZ2945@&message-rtd jZ2934@jZ292f) (set! jZ2ba9@jZ2945@&message-rtd jZ2945@&message-rtd) (set! jZ2947@&message-rcd jZ2938@jZ2930) (set! jZ2baa@jZ2947@&message-rcd jZ2947@&message-rcd) (set! jZ294d@jZ2948 (make-record-type-descriptor '&warning jZ28db@jZ28d6 'jZ294b '#f '#f '#())) (set! jZ2bab@jZ294d@jZ2948 jZ294d@jZ2948) (set! jZ294f@jZ294a '#f) (set! jZ2bac@jZ294f@jZ294a jZ294f@jZ294a) (set! jZ2951@jZ2949 (make-record-constructor-descriptor jZ294d@jZ2948 jZ28df@jZ28d7 jZ294f@jZ294a)) (set! jZ2bad@jZ2951@jZ2949 jZ2951@jZ2949) (set! jZ2954@p? (record-predicate jZ294d@jZ2948)) (set! jZ2bae@jZ2954@p? jZ2954@p?) (set! jZ2956@make-warning (record-constructor jZ2951@jZ2949)) (set! jZ2baf@jZ2956@make-warning jZ2956@make-warning) (set! jZ2958@warning? (condition-predicate jZ294d@jZ2948)) (set! jZ2bb0@jZ2958@warning? jZ2958@warning?) (set! jZ295a@&warning-rtd jZ294d@jZ2948) (set! jZ2bb1@jZ295a@&warning-rtd jZ295a@&warning-rtd) (set! jZ295c@&warning-rcd jZ2951@jZ2949) (set! jZ2bb2@jZ295c@&warning-rcd jZ295c@&warning-rcd) (set! jZ2962@jZ295d (make-record-type-descriptor '&serious jZ28db@jZ28d6 'jZ2960 '#f '#f '#())) (set! jZ2bb3@jZ2962@jZ295d jZ2962@jZ295d) (set! jZ2964@jZ295f '#f) (set! jZ2bb4@jZ2964@jZ295f jZ2964@jZ295f) (set! jZ2966@jZ295e (make-record-constructor-descriptor jZ2962@jZ295d jZ28df@jZ28d7 jZ2964@jZ295f)) (set! jZ2bb5@jZ2966@jZ295e jZ2966@jZ295e) (set! jZ2969@p? (record-predicate jZ2962@jZ295d)) (set! jZ2bb6@jZ2969@p? jZ2969@p?) (set! jZ296b@make-serious-condition (record-constructor jZ2966@jZ295e)) (set! jZ2bb7@jZ296b@make-serious-condition jZ296b@make-serious-condition) (set! jZ296d@serious-condition? (condition-predicate jZ2962@jZ295d)) (set! jZ2bb8@jZ296d@serious-condition? jZ296d@serious-condition?) (set! jZ296f@&serious-rtd jZ2962@jZ295d) (set! jZ2bb9@jZ296f@&serious-rtd jZ296f@&serious-rtd) (set! jZ2971@&serious-rcd jZ2966@jZ295e) (set! jZ2bba@jZ2971@&serious-rcd jZ2971@&serious-rcd) (set! jZ2977@jZ2972 (make-record-type-descriptor '&error jZ2962@jZ295d 'jZ2975 '#f '#f '#())) (set! jZ2bbb@jZ2977@jZ2972 jZ2977@jZ2972) (set! jZ2979@jZ2974 '#f) (set! jZ2bbc@jZ2979@jZ2974 jZ2979@jZ2974) (set! jZ297b@jZ2973 (make-record-constructor-descriptor jZ2977@jZ2972 jZ2966@jZ295e jZ2979@jZ2974)) (set! jZ2bbd@jZ297b@jZ2973 jZ297b@jZ2973) (set! jZ297e@p? (record-predicate jZ2977@jZ2972)) (set! jZ2bbe@jZ297e@p? jZ297e@p?) (set! jZ2980@make-error (record-constructor jZ297b@jZ2973)) (set! jZ2bbf@jZ2980@make-error jZ2980@make-error) (set! jZ2982@error? (condition-predicate jZ2977@jZ2972)) (set! jZ2bc0@jZ2982@error? jZ2982@error?) (set! jZ2984@&error-rtd jZ2977@jZ2972) (set! jZ2bc1@jZ2984@&error-rtd jZ2984@&error-rtd) (set! jZ2986@&error-rcd jZ297b@jZ2973) (set! jZ2bc2@jZ2986@&error-rcd jZ2986@&error-rcd) (set! jZ298c@jZ2987 (make-record-type-descriptor '&violation jZ2962@jZ295d 'jZ298a '#f '#f '#())) (set! jZ2bc3@jZ298c@jZ2987 jZ298c@jZ2987) (set! jZ298e@jZ2989 '#f) (set! jZ2bc4@jZ298e@jZ2989 jZ298e@jZ2989) (set! jZ2990@jZ2988 (make-record-constructor-descriptor jZ298c@jZ2987 jZ2966@jZ295e jZ298e@jZ2989)) (set! jZ2bc5@jZ2990@jZ2988 jZ2990@jZ2988) (set! jZ2993@p? (record-predicate jZ298c@jZ2987)) (set! jZ2bc6@jZ2993@p? jZ2993@p?) (set! jZ2995@make-violation (record-constructor jZ2990@jZ2988)) (set! jZ2bc7@jZ2995@make-violation jZ2995@make-violation) (set! jZ2997@violation? (condition-predicate jZ298c@jZ2987)) (set! jZ2bc8@jZ2997@violation? jZ2997@violation?) (set! jZ2999@&violation-rtd jZ298c@jZ2987) (set! jZ2bc9@jZ2999@&violation-rtd jZ2999@&violation-rtd) (set! jZ299b@&violation-rcd jZ2990@jZ2988) (set! jZ2bca@jZ299b@&violation-rcd jZ299b@&violation-rcd) (set! jZ29a1@jZ299c (make-record-type-descriptor '&assertion jZ298c@jZ2987 'jZ299f '#f '#f '#())) (set! jZ2bcb@jZ29a1@jZ299c jZ29a1@jZ299c) (set! jZ29a3@jZ299e '#f) (set! jZ2bcc@jZ29a3@jZ299e jZ29a3@jZ299e) (set! jZ29a5@jZ299d (make-record-constructor-descriptor jZ29a1@jZ299c jZ2990@jZ2988 jZ29a3@jZ299e)) (set! jZ2bcd@jZ29a5@jZ299d jZ29a5@jZ299d) (set! jZ29a8@p? (record-predicate jZ29a1@jZ299c)) (set! jZ2bce@jZ29a8@p? jZ29a8@p?) (set! jZ29aa@make-assertion-violation (record-constructor jZ29a5@jZ299d)) (set! jZ2bcf@jZ29aa@make-assertion-violation jZ29aa@make-assertion-violation) (set! jZ29ac@assertion-violation? (condition-predicate jZ29a1@jZ299c)) (set! jZ2bd0@jZ29ac@assertion-violation? jZ29ac@assertion-violation?) (set! jZ29ae@&assertion-rtd jZ29a1@jZ299c) (set! jZ2bd1@jZ29ae@&assertion-rtd jZ29ae@&assertion-rtd) (set! jZ29b0@&assertion-rcd jZ29a5@jZ299d) (set! jZ2bd2@jZ29b0@&assertion-rcd jZ29b0@&assertion-rcd) (set! jZ29b8@jZ29b3 (make-record-type-descriptor '&irritants jZ28db@jZ28d6 'jZ29b6 '#f '#f '#((immutable irritants)))) (set! jZ2bd3@jZ29b8@jZ29b3 jZ29b8@jZ29b3) (set! jZ29ba@jZ29b5 '#f) (set! jZ2bd4@jZ29ba@jZ29b5 jZ29ba@jZ29b5) (set! jZ29bc@jZ29b4 (make-record-constructor-descriptor jZ29b8@jZ29b3 jZ28df@jZ28d7 jZ29ba@jZ29b5)) (set! jZ2bd5@jZ29bc@jZ29b4 jZ29bc@jZ29b4) (set! jZ29bf@p? (record-predicate jZ29b8@jZ29b3)) (set! jZ2bd6@jZ29bf@p? jZ29bf@p?) (set! jZ29c1@make-irritants-condition (record-constructor jZ29bc@jZ29b4)) (set! jZ2bd7@jZ29c1@make-irritants-condition jZ29c1@make-irritants-condition) (set! jZ29c3@jZ29b2 (record-accessor jZ29b8@jZ29b3 '0)) (set! jZ2bd8@jZ29c3@jZ29b2 jZ29c3@jZ29b2) (set! jZ29c5@irritants-condition? (condition-predicate jZ29b8@jZ29b3)) (set! jZ2bd9@jZ29c5@irritants-condition? jZ29c5@irritants-condition?) (set! jZ29c7@condition-irritants (condition-accessor jZ29b8@jZ29b3 jZ29c3@jZ29b2)) (set! jZ2bda@jZ29c7@condition-irritants jZ29c7@condition-irritants) (set! jZ29c9@&irritants-rtd jZ29b8@jZ29b3) (set! jZ2bdb@jZ29c9@&irritants-rtd jZ29c9@&irritants-rtd) (set! jZ29cb@&irritants-rcd jZ29bc@jZ29b4) (set! jZ2bdc@jZ29cb@&irritants-rcd jZ29cb@&irritants-rcd) (set! jZ29d3@jZ29ce (make-record-type-descriptor '&who jZ28db@jZ28d6 'jZ29d1 '#f '#f '#((immutable who)))) (set! jZ2bdd@jZ29d3@jZ29ce jZ29d3@jZ29ce) (set! jZ29d5@jZ29d0 '#f) (set! jZ2bde@jZ29d5@jZ29d0 jZ29d5@jZ29d0) (set! jZ29d7@jZ29cf (make-record-constructor-descriptor jZ29d3@jZ29ce jZ28df@jZ28d7 jZ29d5@jZ29d0)) (set! jZ2bdf@jZ29d7@jZ29cf jZ29d7@jZ29cf) (set! jZ29da@p? (record-predicate jZ29d3@jZ29ce)) (set! jZ2be0@jZ29da@p? jZ29da@p?) (set! jZ29dc@make-who-condition (record-constructor jZ29d7@jZ29cf)) (set! jZ2be1@jZ29dc@make-who-condition jZ29dc@make-who-condition) (set! jZ29de@jZ29cd (record-accessor jZ29d3@jZ29ce '0)) (set! jZ2be2@jZ29de@jZ29cd jZ29de@jZ29cd) (set! jZ29e0@who-condition? (condition-predicate jZ29d3@jZ29ce)) (set! jZ2be3@jZ29e0@who-condition? jZ29e0@who-condition?) (set! jZ29e2@condition-who (condition-accessor jZ29d3@jZ29ce jZ29de@jZ29cd)) (set! jZ2be4@jZ29e2@condition-who jZ29e2@condition-who) (set! jZ29e4@&who-rtd jZ29d3@jZ29ce) (set! jZ2be5@jZ29e4@&who-rtd jZ29e4@&who-rtd) (set! jZ29e6@&who-rcd jZ29d7@jZ29cf) (set! jZ2be6@jZ29e6@&who-rcd jZ29e6@&who-rcd) (set! jZ29ec@jZ29e7 (make-record-type-descriptor '&non-continuable jZ298c@jZ2987 'jZ29ea '#f '#f '#())) (set! jZ2be7@jZ29ec@jZ29e7 jZ29ec@jZ29e7) (set! jZ29ee@jZ29e9 '#f) (set! jZ2be8@jZ29ee@jZ29e9 jZ29ee@jZ29e9) (set! jZ29f0@jZ29e8 (make-record-constructor-descriptor jZ29ec@jZ29e7 jZ2990@jZ2988 jZ29ee@jZ29e9)) (set! jZ2be9@jZ29f0@jZ29e8 jZ29f0@jZ29e8) (set! jZ29f3@p? (record-predicate jZ29ec@jZ29e7)) (set! jZ2bea@jZ29f3@p? jZ29f3@p?) (set! jZ29f5@make-non-continuable-violation (record-constructor jZ29f0@jZ29e8)) (set! jZ2beb@jZ29f5@make-non-continuable-violation jZ29f5@make-non-continuable-violation) (set! jZ29f7@non-continuable-violation? (condition-predicate jZ29ec@jZ29e7)) (set! jZ2bec@jZ29f7@non-continuable-violation? jZ29f7@non-continuable-violation?) (set! jZ29f9@&non-continuable-rtd jZ29ec@jZ29e7) (set! jZ2bed@jZ29f9@&non-continuable-rtd jZ29f9@&non-continuable-rtd) (set! jZ29fb@&non-continuable-rcd jZ29f0@jZ29e8) (set! jZ2bee@jZ29fb@&non-continuable-rcd jZ29fb@&non-continuable-rcd) (set! jZ2a01@jZ29fc (make-record-type-descriptor '&implementation-restriction jZ298c@jZ2987 'jZ29ff '#f '#f '#())) (set! jZ2bef@jZ2a01@jZ29fc jZ2a01@jZ29fc) (set! jZ2a03@jZ29fe '#f) (set! jZ2bf0@jZ2a03@jZ29fe jZ2a03@jZ29fe) (set! jZ2a05@jZ29fd (make-record-constructor-descriptor jZ2a01@jZ29fc jZ2990@jZ2988 jZ2a03@jZ29fe)) (set! jZ2bf1@jZ2a05@jZ29fd jZ2a05@jZ29fd) (set! jZ2a08@p? (record-predicate jZ2a01@jZ29fc)) (set! jZ2bf2@jZ2a08@p? jZ2a08@p?) (set! jZ2a0a@make-implementation-restriction-violation (record-constructor jZ2a05@jZ29fd)) (set! jZ2bf3@jZ2a0a@make-implementation-restriction-violation jZ2a0a@make-implementation-restriction-violation) (set! jZ2a0c@implementation-restriction-violation? (condition-predicate jZ2a01@jZ29fc)) (set! jZ2bf4@jZ2a0c@implementation-restriction-violation? jZ2a0c@implementation-restriction-violation?) (set! jZ2a0e@&implementation-restriction-rtd jZ2a01@jZ29fc) (set! jZ2bf5@jZ2a0e@&implementation-restriction-rtd jZ2a0e@&implementation-restriction-rtd) (set! jZ2a10@&implementation-restriction-rcd jZ2a05@jZ29fd) (set! jZ2bf6@jZ2a10@&implementation-restriction-rcd jZ2a10@&implementation-restriction-rcd) (set! jZ2a16@jZ2a11 (make-record-type-descriptor '&lexical jZ298c@jZ2987 'jZ2a14 '#f '#f '#())) (set! jZ2bf7@jZ2a16@jZ2a11 jZ2a16@jZ2a11) (set! jZ2a18@jZ2a13 '#f) (set! jZ2bf8@jZ2a18@jZ2a13 jZ2a18@jZ2a13) (set! jZ2a1a@jZ2a12 (make-record-constructor-descriptor jZ2a16@jZ2a11 jZ2990@jZ2988 jZ2a18@jZ2a13)) (set! jZ2bf9@jZ2a1a@jZ2a12 jZ2a1a@jZ2a12) (set! jZ2a1d@p? (record-predicate jZ2a16@jZ2a11)) (set! jZ2bfa@jZ2a1d@p? jZ2a1d@p?) (set! jZ2a1f@make-lexical-violation (record-constructor jZ2a1a@jZ2a12)) (set! jZ2bfb@jZ2a1f@make-lexical-violation jZ2a1f@make-lexical-violation) (set! jZ2a21@lexical-violation? (condition-predicate jZ2a16@jZ2a11)) (set! jZ2bfc@jZ2a21@lexical-violation? jZ2a21@lexical-violation?) (set! jZ2a23@&lexical-rtd jZ2a16@jZ2a11) (set! jZ2bfd@jZ2a23@&lexical-rtd jZ2a23@&lexical-rtd) (set! jZ2a25@&lexical-rcd jZ2a1a@jZ2a12) (set! jZ2bfe@jZ2a25@&lexical-rcd jZ2a25@&lexical-rcd) (set! jZ2a2f@jZ2a2a (make-record-type-descriptor '&syntax jZ298c@jZ2987 'jZ2a2d '#f '#f '#((immutable form) (immutable subform)))) (set! jZ2bff@jZ2a2f@jZ2a2a jZ2a2f@jZ2a2a) (set! jZ2a31@jZ2a2c '#f) (set! jZ2c00@jZ2a31@jZ2a2c jZ2a31@jZ2a2c) (set! jZ2a33@jZ2a2b (make-record-constructor-descriptor jZ2a2f@jZ2a2a jZ2990@jZ2988 jZ2a31@jZ2a2c)) (set! jZ2c01@jZ2a33@jZ2a2b jZ2a33@jZ2a2b) (set! jZ2a36@p? (record-predicate jZ2a2f@jZ2a2a)) (set! jZ2c02@jZ2a36@p? jZ2a36@p?) (set! jZ2a38@make-syntax-violation (record-constructor jZ2a33@jZ2a2b)) (set! jZ2c03@jZ2a38@make-syntax-violation jZ2a38@make-syntax-violation) (set! jZ2a3a@jZ2a27 (record-accessor jZ2a2f@jZ2a2a '0)) (set! jZ2c04@jZ2a3a@jZ2a27 jZ2a3a@jZ2a27) (set! jZ2a3c@jZ2a29 (record-accessor jZ2a2f@jZ2a2a '1)) (set! jZ2c05@jZ2a3c@jZ2a29 jZ2a3c@jZ2a29) (set! jZ2a3e@syntax-violation? (condition-predicate jZ2a2f@jZ2a2a)) (set! jZ2c06@jZ2a3e@syntax-violation? jZ2a3e@syntax-violation?) (set! jZ2a40@syntax-violation-form (condition-accessor jZ2a2f@jZ2a2a jZ2a3a@jZ2a27)) (set! jZ2c07@jZ2a40@syntax-violation-form jZ2a40@syntax-violation-form) (set! jZ2a42@syntax-violation-subform (condition-accessor jZ2a2f@jZ2a2a jZ2a3c@jZ2a29)) (set! jZ2c08@jZ2a42@syntax-violation-subform jZ2a42@syntax-violation-subform) (set! jZ2a44@&syntax-rtd jZ2a2f@jZ2a2a) (set! jZ2c09@jZ2a44@&syntax-rtd jZ2a44@&syntax-rtd) (set! jZ2a46@&syntax-rcd jZ2a33@jZ2a2b) (set! jZ2c0a@jZ2a46@&syntax-rcd jZ2a46@&syntax-rcd) (set! jZ2a4c@jZ2a47 (make-record-type-descriptor '&undefined jZ298c@jZ2987 'jZ2a4a '#f '#f '#())) (set! jZ2c0b@jZ2a4c@jZ2a47 jZ2a4c@jZ2a47) (set! jZ2a4e@jZ2a49 '#f) (set! jZ2c0c@jZ2a4e@jZ2a49 jZ2a4e@jZ2a49) (set! jZ2a50@jZ2a48 (make-record-constructor-descriptor jZ2a4c@jZ2a47 jZ2990@jZ2988 jZ2a4e@jZ2a49)) (set! jZ2c0d@jZ2a50@jZ2a48 jZ2a50@jZ2a48) (set! jZ2a53@p? (record-predicate jZ2a4c@jZ2a47)) (set! jZ2c0e@jZ2a53@p? jZ2a53@p?) (set! jZ2a55@make-undefined-violation (record-constructor jZ2a50@jZ2a48)) (set! jZ2c0f@jZ2a55@make-undefined-violation jZ2a55@make-undefined-violation) (set! jZ2a57@undefined-violation? (condition-predicate jZ2a4c@jZ2a47)) (set! jZ2c10@jZ2a57@undefined-violation? jZ2a57@undefined-violation?) (set! jZ2a59@&undefined-rtd jZ2a4c@jZ2a47) (set! jZ2c11@jZ2a59@&undefined-rtd jZ2a59@&undefined-rtd) (set! jZ2a5b@&undefined-rcd jZ2a50@jZ2a48) (set! jZ2c12@jZ2a5b@&undefined-rcd jZ2a5b@&undefined-rcd) (set! jZ2a61@jZ2a5c (make-record-type-descriptor '&i/o jZ2977@jZ2972 'jZ2a5f '#f '#f '#())) (set! jZ2c13@jZ2a61@jZ2a5c jZ2a61@jZ2a5c) (set! jZ2a63@jZ2a5e '#f) (set! jZ2c14@jZ2a63@jZ2a5e jZ2a63@jZ2a5e) (set! jZ2a65@jZ2a5d (make-record-constructor-descriptor jZ2a61@jZ2a5c jZ297b@jZ2973 jZ2a63@jZ2a5e)) (set! jZ2c15@jZ2a65@jZ2a5d jZ2a65@jZ2a5d) (set! jZ2a68@p? (record-predicate jZ2a61@jZ2a5c)) (set! jZ2c16@jZ2a68@p? jZ2a68@p?) (set! jZ2a6a@make-i/o-error (record-constructor jZ2a65@jZ2a5d)) (set! jZ2c17@jZ2a6a@make-i/o-error jZ2a6a@make-i/o-error) (set! jZ2a6c@i/o-error? (condition-predicate jZ2a61@jZ2a5c)) (set! jZ2c18@jZ2a6c@i/o-error? jZ2a6c@i/o-error?) (set! jZ2a6e@&i/o-rtd jZ2a61@jZ2a5c) (set! jZ2c19@jZ2a6e@&i/o-rtd jZ2a6e@&i/o-rtd) (set! jZ2a70@&i/o-rcd jZ2a65@jZ2a5d) (set! jZ2c1a@jZ2a70@&i/o-rcd jZ2a70@&i/o-rcd) (set! jZ2a76@jZ2a71 (make-record-type-descriptor '&i/o-read jZ2a61@jZ2a5c 'jZ2a74 '#f '#f '#())) (set! jZ2c1b@jZ2a76@jZ2a71 jZ2a76@jZ2a71) (set! jZ2a78@jZ2a73 '#f) (set! jZ2c1c@jZ2a78@jZ2a73 jZ2a78@jZ2a73) (set! jZ2a7a@jZ2a72 (make-record-constructor-descriptor jZ2a76@jZ2a71 jZ2a65@jZ2a5d jZ2a78@jZ2a73)) (set! jZ2c1d@jZ2a7a@jZ2a72 jZ2a7a@jZ2a72) (set! jZ2a7d@p? (record-predicate jZ2a76@jZ2a71)) (set! jZ2c1e@jZ2a7d@p? jZ2a7d@p?) (set! jZ2a7f@make-i/o-read-error (record-constructor jZ2a7a@jZ2a72)) (set! jZ2c1f@jZ2a7f@make-i/o-read-error jZ2a7f@make-i/o-read-error) (set! jZ2a81@i/o-read-error? (condition-predicate jZ2a76@jZ2a71)) (set! jZ2c20@jZ2a81@i/o-read-error? jZ2a81@i/o-read-error?) (set! jZ2a83@&i/o-read-rtd jZ2a76@jZ2a71) (set! jZ2c21@jZ2a83@&i/o-read-rtd jZ2a83@&i/o-read-rtd) (set! jZ2a85@&i/o-read-rcd jZ2a7a@jZ2a72) (set! jZ2c22@jZ2a85@&i/o-read-rcd jZ2a85@&i/o-read-rcd) (set! jZ2a8b@jZ2a86 (make-record-type-descriptor '&i/o-write jZ2a61@jZ2a5c 'jZ2a89 '#f '#f '#())) (set! jZ2c23@jZ2a8b@jZ2a86 jZ2a8b@jZ2a86) (set! jZ2a8d@jZ2a88 '#f) (set! jZ2c24@jZ2a8d@jZ2a88 jZ2a8d@jZ2a88) (set! jZ2a8f@jZ2a87 (make-record-constructor-descriptor jZ2a8b@jZ2a86 jZ2a65@jZ2a5d jZ2a8d@jZ2a88)) (set! jZ2c25@jZ2a8f@jZ2a87 jZ2a8f@jZ2a87) (set! jZ2a92@p? (record-predicate jZ2a8b@jZ2a86)) (set! jZ2c26@jZ2a92@p? jZ2a92@p?) (set! jZ2a94@make-i/o-write-error (record-constructor jZ2a8f@jZ2a87)) (set! jZ2c27@jZ2a94@make-i/o-write-error jZ2a94@make-i/o-write-error) (set! jZ2a96@i/o-write-error? (condition-predicate jZ2a8b@jZ2a86)) (set! jZ2c28@jZ2a96@i/o-write-error? jZ2a96@i/o-write-error?) (set! jZ2a98@&i/o-write-rtd jZ2a8b@jZ2a86) (set! jZ2c29@jZ2a98@&i/o-write-rtd jZ2a98@&i/o-write-rtd) (set! jZ2a9a@&i/o-write-rcd jZ2a8f@jZ2a87) (set! jZ2c2a@jZ2a9a@&i/o-write-rcd jZ2a9a@&i/o-write-rcd) (set! jZ2aa2@jZ2a9d (make-record-type-descriptor '&i/o-invalid-position jZ2a61@jZ2a5c 'jZ2aa0 '#f '#f '#((immutable position)))) (set! jZ2c2b@jZ2aa2@jZ2a9d jZ2aa2@jZ2a9d) (set! jZ2aa4@jZ2a9f '#f) (set! jZ2c2c@jZ2aa4@jZ2a9f jZ2aa4@jZ2a9f) (set! jZ2aa6@jZ2a9e (make-record-constructor-descriptor jZ2aa2@jZ2a9d jZ2a65@jZ2a5d jZ2aa4@jZ2a9f)) (set! jZ2c2d@jZ2aa6@jZ2a9e jZ2aa6@jZ2a9e) (set! jZ2aa9@p? (record-predicate jZ2aa2@jZ2a9d)) (set! jZ2c2e@jZ2aa9@p? jZ2aa9@p?) (set! jZ2aab@make-i/o-invalid-position-error (record-constructor jZ2aa6@jZ2a9e)) (set! jZ2c2f@jZ2aab@make-i/o-invalid-position-error jZ2aab@make-i/o-invalid-position-error) (set! jZ2aad@jZ2a9c (record-accessor jZ2aa2@jZ2a9d '0)) (set! jZ2c30@jZ2aad@jZ2a9c jZ2aad@jZ2a9c) (set! jZ2aaf@i/o-invalid-position-error? (condition-predicate jZ2aa2@jZ2a9d)) (set! jZ2c31@jZ2aaf@i/o-invalid-position-error? jZ2aaf@i/o-invalid-position-error?) (set! jZ2ab1@i/o-error-position (condition-accessor jZ2aa2@jZ2a9d jZ2aad@jZ2a9c)) (set! jZ2c32@jZ2ab1@i/o-error-position jZ2ab1@i/o-error-position) (set! jZ2ab3@&i/o-invalid-position-rtd jZ2aa2@jZ2a9d) (set! jZ2c33@jZ2ab3@&i/o-invalid-position-rtd jZ2ab3@&i/o-invalid-position-rtd) (set! jZ2ab5@&i/o-invalid-position-rcd jZ2aa6@jZ2a9e) (set! jZ2c34@jZ2ab5@&i/o-invalid-position-rcd jZ2ab5@&i/o-invalid-position-rcd) (set! jZ2abd@jZ2ab8 (make-record-type-descriptor '&i/o-filename jZ2a61@jZ2a5c 'jZ2abb '#f '#f '#((immutable filename)))) (set! jZ2c35@jZ2abd@jZ2ab8 jZ2abd@jZ2ab8) (set! jZ2abf@jZ2aba '#f) (set! jZ2c36@jZ2abf@jZ2aba jZ2abf@jZ2aba) (set! jZ2ac1@jZ2ab9 (make-record-constructor-descriptor jZ2abd@jZ2ab8 jZ2a65@jZ2a5d jZ2abf@jZ2aba)) (set! jZ2c37@jZ2ac1@jZ2ab9 jZ2ac1@jZ2ab9) (set! jZ2ac4@p? (record-predicate jZ2abd@jZ2ab8)) (set! jZ2c38@jZ2ac4@p? jZ2ac4@p?) (set! jZ2ac6@make-i/o-filename-error (record-constructor jZ2ac1@jZ2ab9)) (set! jZ2c39@jZ2ac6@make-i/o-filename-error jZ2ac6@make-i/o-filename-error) (set! jZ2ac8@jZ2ab7 (record-accessor jZ2abd@jZ2ab8 '0)) (set! jZ2c3a@jZ2ac8@jZ2ab7 jZ2ac8@jZ2ab7) (set! jZ2aca@i/o-filename-error? (condition-predicate jZ2abd@jZ2ab8)) (set! jZ2c3b@jZ2aca@i/o-filename-error? jZ2aca@i/o-filename-error?) (set! jZ2acc@i/o-error-filename (condition-accessor jZ2abd@jZ2ab8 jZ2ac8@jZ2ab7)) (set! jZ2c3c@jZ2acc@i/o-error-filename jZ2acc@i/o-error-filename) (set! jZ2ace@&i/o-filename-rtd jZ2abd@jZ2ab8) (set! jZ2c3d@jZ2ace@&i/o-filename-rtd jZ2ace@&i/o-filename-rtd) (set! jZ2ad0@&i/o-filename-rcd jZ2ac1@jZ2ab9) (set! jZ2c3e@jZ2ad0@&i/o-filename-rcd jZ2ad0@&i/o-filename-rcd) (set! jZ2ad6@jZ2ad1 (make-record-type-descriptor '&i/o-file-protection jZ2abd@jZ2ab8 'jZ2ad4 '#f '#f '#())) (set! jZ2c3f@jZ2ad6@jZ2ad1 jZ2ad6@jZ2ad1) (set! jZ2ad8@jZ2ad3 '#f) (set! jZ2c40@jZ2ad8@jZ2ad3 jZ2ad8@jZ2ad3) (set! jZ2ada@jZ2ad2 (make-record-constructor-descriptor jZ2ad6@jZ2ad1 jZ2ac1@jZ2ab9 jZ2ad8@jZ2ad3)) (set! jZ2c41@jZ2ada@jZ2ad2 jZ2ada@jZ2ad2) (set! jZ2add@p? (record-predicate jZ2ad6@jZ2ad1)) (set! jZ2c42@jZ2add@p? jZ2add@p?) (set! jZ2adf@make-i/o-file-protection-error (record-constructor jZ2ada@jZ2ad2)) (set! jZ2c43@jZ2adf@make-i/o-file-protection-error jZ2adf@make-i/o-file-protection-error) (set! jZ2ae1@i/o-file-protection-error? (condition-predicate jZ2ad6@jZ2ad1)) (set! jZ2c44@jZ2ae1@i/o-file-protection-error? jZ2ae1@i/o-file-protection-error?) (set! jZ2ae3@&i/o-file-protection-rtd jZ2ad6@jZ2ad1) (set! jZ2c45@jZ2ae3@&i/o-file-protection-rtd jZ2ae3@&i/o-file-protection-rtd) (set! jZ2ae5@&i/o-file-protection-rcd jZ2ada@jZ2ad2) (set! jZ2c46@jZ2ae5@&i/o-file-protection-rcd jZ2ae5@&i/o-file-protection-rcd) (set! jZ2aeb@jZ2ae6 (make-record-type-descriptor '&i/o-file-is-read-only jZ2ad6@jZ2ad1 'jZ2ae9 '#f '#f '#())) (set! jZ2c47@jZ2aeb@jZ2ae6 jZ2aeb@jZ2ae6) (set! jZ2aed@jZ2ae8 '#f) (set! jZ2c48@jZ2aed@jZ2ae8 jZ2aed@jZ2ae8) (set! jZ2aef@jZ2ae7 (make-record-constructor-descriptor jZ2aeb@jZ2ae6 jZ2ada@jZ2ad2 jZ2aed@jZ2ae8)) (set! jZ2c49@jZ2aef@jZ2ae7 jZ2aef@jZ2ae7) (set! jZ2af2@p? (record-predicate jZ2aeb@jZ2ae6)) (set! jZ2c4a@jZ2af2@p? jZ2af2@p?) (set! jZ2af4@make-i/o-file-is-read-only-error (record-constructor jZ2aef@jZ2ae7)) (set! jZ2c4b@jZ2af4@make-i/o-file-is-read-only-error jZ2af4@make-i/o-file-is-read-only-error) (set! jZ2af6@i/o-file-is-read-only-error? (condition-predicate jZ2aeb@jZ2ae6)) (set! jZ2c4c@jZ2af6@i/o-file-is-read-only-error? jZ2af6@i/o-file-is-read-only-error?) (set! jZ2af8@&i/o-file-is-read-only-rtd jZ2aeb@jZ2ae6) (set! jZ2c4d@jZ2af8@&i/o-file-is-read-only-rtd jZ2af8@&i/o-file-is-read-only-rtd) (set! jZ2afa@&i/o-file-is-read-only-rcd jZ2aef@jZ2ae7) (set! jZ2c4e@jZ2afa@&i/o-file-is-read-only-rcd jZ2afa@&i/o-file-is-read-only-rcd) (set! jZ2b00@jZ2afb (make-record-type-descriptor '&i/o-file-already-exists jZ2abd@jZ2ab8 'jZ2afe '#f '#f '#())) (set! jZ2c4f@jZ2b00@jZ2afb jZ2b00@jZ2afb) (set! jZ2b02@jZ2afd '#f) (set! jZ2c50@jZ2b02@jZ2afd jZ2b02@jZ2afd) (set! jZ2b04@jZ2afc (make-record-constructor-descriptor jZ2b00@jZ2afb jZ2ac1@jZ2ab9 jZ2b02@jZ2afd)) (set! jZ2c51@jZ2b04@jZ2afc jZ2b04@jZ2afc) (set! jZ2b07@p? (record-predicate jZ2b00@jZ2afb)) (set! jZ2c52@jZ2b07@p? jZ2b07@p?) (set! jZ2b09@make-i/o-file-already-exists-error (record-constructor jZ2b04@jZ2afc)) (set! jZ2c53@jZ2b09@make-i/o-file-already-exists-error jZ2b09@make-i/o-file-already-exists-error) (set! jZ2b0b@i/o-file-already-exists-error? (condition-predicate jZ2b00@jZ2afb)) (set! jZ2c54@jZ2b0b@i/o-file-already-exists-error? jZ2b0b@i/o-file-already-exists-error?) (set! jZ2b0d@&i/o-file-already-exists-rtd jZ2b00@jZ2afb) (set! jZ2c55@jZ2b0d@&i/o-file-already-exists-rtd jZ2b0d@&i/o-file-already-exists-rtd) (set! jZ2b0f@&i/o-file-already-exists-rcd jZ2b04@jZ2afc) (set! jZ2c56@jZ2b0f@&i/o-file-already-exists-rcd jZ2b0f@&i/o-file-already-exists-rcd) (set! jZ2b15@jZ2b10 (make-record-type-descriptor '&i/o-file-does-not-exist jZ2abd@jZ2ab8 'jZ2b13 '#f '#f '#())) (set! jZ2c57@jZ2b15@jZ2b10 jZ2b15@jZ2b10) (set! jZ2b17@jZ2b12 '#f) (set! jZ2c58@jZ2b17@jZ2b12 jZ2b17@jZ2b12) (set! jZ2b19@jZ2b11 (make-record-constructor-descriptor jZ2b15@jZ2b10 jZ2ac1@jZ2ab9 jZ2b17@jZ2b12)) (set! jZ2c59@jZ2b19@jZ2b11 jZ2b19@jZ2b11) (set! jZ2b1c@p? (record-predicate jZ2b15@jZ2b10)) (set! jZ2c5a@jZ2b1c@p? jZ2b1c@p?) (set! jZ2b1e@make-i/o-file-does-not-exist-error (record-constructor jZ2b19@jZ2b11)) (set! jZ2c5b@jZ2b1e@make-i/o-file-does-not-exist-error jZ2b1e@make-i/o-file-does-not-exist-error) (set! jZ2b20@i/o-file-does-not-exist-error? (condition-predicate jZ2b15@jZ2b10)) (set! jZ2c5c@jZ2b20@i/o-file-does-not-exist-error? jZ2b20@i/o-file-does-not-exist-error?) (set! jZ2b22@&i/o-file-does-not-exist-rtd jZ2b15@jZ2b10) (set! jZ2c5d@jZ2b22@&i/o-file-does-not-exist-rtd jZ2b22@&i/o-file-does-not-exist-rtd) (set! jZ2b24@&i/o-file-does-not-exist-rcd jZ2b19@jZ2b11) (set! jZ2c5e@jZ2b24@&i/o-file-does-not-exist-rcd jZ2b24@&i/o-file-does-not-exist-rcd) (set! jZ2b2c@jZ2b27 (make-record-type-descriptor '&i/o-port jZ2a61@jZ2a5c 'jZ2b2a '#f '#f '#((immutable port)))) (set! jZ2c5f@jZ2b2c@jZ2b27 jZ2b2c@jZ2b27) (set! jZ2b2e@jZ2b29 '#f) (set! jZ2c60@jZ2b2e@jZ2b29 jZ2b2e@jZ2b29) (set! jZ2b30@jZ2b28 (make-record-constructor-descriptor jZ2b2c@jZ2b27 jZ2a65@jZ2a5d jZ2b2e@jZ2b29)) (set! jZ2c61@jZ2b30@jZ2b28 jZ2b30@jZ2b28) (set! jZ2b33@p? (record-predicate jZ2b2c@jZ2b27)) (set! jZ2c62@jZ2b33@p? jZ2b33@p?) (set! jZ2b35@make-i/o-port-error (record-constructor jZ2b30@jZ2b28)) (set! jZ2c63@jZ2b35@make-i/o-port-error jZ2b35@make-i/o-port-error) (set! jZ2b37@jZ2b26 (record-accessor jZ2b2c@jZ2b27 '0)) (set! jZ2c64@jZ2b37@jZ2b26 jZ2b37@jZ2b26) (set! jZ2b39@i/o-port-error? (condition-predicate jZ2b2c@jZ2b27)) (set! jZ2c65@jZ2b39@i/o-port-error? jZ2b39@i/o-port-error?) (set! jZ2b3b@i/o-error-port (condition-accessor jZ2b2c@jZ2b27 jZ2b37@jZ2b26)) (set! jZ2c66@jZ2b3b@i/o-error-port jZ2b3b@i/o-error-port) (set! jZ2b3d@&i/o-port-rtd jZ2b2c@jZ2b27) (set! jZ2c67@jZ2b3d@&i/o-port-rtd jZ2b3d@&i/o-port-rtd) (set! jZ2b3f@&i/o-port-rcd jZ2b30@jZ2b28) (set! jZ2c68@jZ2b3f@&i/o-port-rcd jZ2b3f@&i/o-port-rcd) (set! jZ2b45@jZ2b40 (make-record-type-descriptor '&i/o-decoding jZ2b2c@jZ2b27 'jZ2b43 '#f '#f '#())) (set! jZ2c69@jZ2b45@jZ2b40 jZ2b45@jZ2b40) (set! jZ2b47@jZ2b42 '#f) (set! jZ2c6a@jZ2b47@jZ2b42 jZ2b47@jZ2b42) (set! jZ2b49@jZ2b41 (make-record-constructor-descriptor jZ2b45@jZ2b40 jZ2b30@jZ2b28 jZ2b47@jZ2b42)) (set! jZ2c6b@jZ2b49@jZ2b41 jZ2b49@jZ2b41) (set! jZ2b4c@p? (record-predicate jZ2b45@jZ2b40)) (set! jZ2c6c@jZ2b4c@p? jZ2b4c@p?) (set! jZ2b4e@make-i/o-decoding-error (record-constructor jZ2b49@jZ2b41)) (set! jZ2c6d@jZ2b4e@make-i/o-decoding-error jZ2b4e@make-i/o-decoding-error) (set! jZ2b50@i/o-decoding-error? (condition-predicate jZ2b45@jZ2b40)) (set! jZ2c6e@jZ2b50@i/o-decoding-error? jZ2b50@i/o-decoding-error?) (set! jZ2b52@&i/o-decoding-rtd jZ2b45@jZ2b40) (set! jZ2c6f@jZ2b52@&i/o-decoding-rtd jZ2b52@&i/o-decoding-rtd) (set! jZ2b54@&i/o-decoding-rcd jZ2b49@jZ2b41) (set! jZ2c70@jZ2b54@&i/o-decoding-rcd jZ2b54@&i/o-decoding-rcd) (set! jZ2b5c@jZ2b57 (make-record-type-descriptor '&i/o-encoding jZ2b2c@jZ2b27 'jZ2b5a '#f '#f '#((immutable char)))) (set! jZ2c71@jZ2b5c@jZ2b57 jZ2b5c@jZ2b57) (set! jZ2b5e@jZ2b59 '#f) (set! jZ2c72@jZ2b5e@jZ2b59 jZ2b5e@jZ2b59) (set! jZ2b60@jZ2b58 (make-record-constructor-descriptor jZ2b5c@jZ2b57 jZ2b30@jZ2b28 jZ2b5e@jZ2b59)) (set! jZ2c73@jZ2b60@jZ2b58 jZ2b60@jZ2b58) (set! jZ2b63@p? (record-predicate jZ2b5c@jZ2b57)) (set! jZ2c74@jZ2b63@p? jZ2b63@p?) (set! jZ2b65@make-i/o-encoding-error (record-constructor jZ2b60@jZ2b58)) (set! jZ2c75@jZ2b65@make-i/o-encoding-error jZ2b65@make-i/o-encoding-error) (set! jZ2b67@jZ2b56 (record-accessor jZ2b5c@jZ2b57 '0)) (set! jZ2c76@jZ2b67@jZ2b56 jZ2b67@jZ2b56) (set! jZ2b69@i/o-encoding-error? (condition-predicate jZ2b5c@jZ2b57)) (set! jZ2c77@jZ2b69@i/o-encoding-error? jZ2b69@i/o-encoding-error?) (set! jZ2b6b@i/o-encoding-error-char (condition-accessor jZ2b5c@jZ2b57 jZ2b67@jZ2b56)) (set! jZ2c78@jZ2b6b@i/o-encoding-error-char jZ2b6b@i/o-encoding-error-char) (set! jZ2b6d@&i/o-encoding-rtd jZ2b5c@jZ2b57) (set! jZ2c79@jZ2b6d@&i/o-encoding-rtd jZ2b6d@&i/o-encoding-rtd) (set! jZ2b6f@&i/o-encoding-rcd jZ2b60@jZ2b58) (set! jZ2c7a@jZ2b6f@&i/o-encoding-rcd jZ2b6f@&i/o-encoding-rcd) (set! jZ2b75@jZ2b70 (make-record-type-descriptor '&no-infinities jZ2a01@jZ29fc 'jZ2b73 '#f '#f '#())) (set! jZ2c7b@jZ2b75@jZ2b70 jZ2b75@jZ2b70) (set! jZ2b77@jZ2b72 '#f) (set! jZ2c7c@jZ2b77@jZ2b72 jZ2b77@jZ2b72) (set! jZ2b79@jZ2b71 (make-record-constructor-descriptor jZ2b75@jZ2b70 jZ2a05@jZ29fd jZ2b77@jZ2b72)) (set! jZ2c7d@jZ2b79@jZ2b71 jZ2b79@jZ2b71) (set! jZ2b7c@p? (record-predicate jZ2b75@jZ2b70)) (set! jZ2c7e@jZ2b7c@p? jZ2b7c@p?) (set! jZ2b7e@make-no-infinities-violation (record-constructor jZ2b79@jZ2b71)) (set! jZ2c7f@jZ2b7e@make-no-infinities-violation jZ2b7e@make-no-infinities-violation) (set! jZ2b80@no-infinities-violation? (condition-predicate jZ2b75@jZ2b70)) (set! jZ2c80@jZ2b80@no-infinities-violation? jZ2b80@no-infinities-violation?) (set! jZ2b82@&no-infinities-rtd jZ2b75@jZ2b70) (set! jZ2c81@jZ2b82@&no-infinities-rtd jZ2b82@&no-infinities-rtd) (set! jZ2b84@&no-infinities-rcd jZ2b79@jZ2b71) (set! jZ2c82@jZ2b84@&no-infinities-rcd jZ2b84@&no-infinities-rcd) (set! jZ2b8a@jZ2b85 (make-record-type-descriptor '&no-nans jZ2a01@jZ29fc 'jZ2b88 '#f '#f '#())) (set! jZ2c83@jZ2b8a@jZ2b85 jZ2b8a@jZ2b85) (set! jZ2b8c@jZ2b87 '#f) (set! jZ2c84@jZ2b8c@jZ2b87 jZ2b8c@jZ2b87) (set! jZ2b8e@jZ2b86 (make-record-constructor-descriptor jZ2b8a@jZ2b85 jZ2a05@jZ29fd jZ2b8c@jZ2b87)) (set! jZ2c85@jZ2b8e@jZ2b86 jZ2b8e@jZ2b86) (set! jZ2b91@p? (record-predicate jZ2b8a@jZ2b85)) (set! jZ2c86@jZ2b91@p? jZ2b91@p?) (set! jZ2b93@make-no-nans-violation (record-constructor jZ2b8e@jZ2b86)) (set! jZ2c87@jZ2b93@make-no-nans-violation jZ2b93@make-no-nans-violation) (set! jZ2b95@no-nans-violation? (condition-predicate jZ2b8a@jZ2b85)) (set! jZ2c88@jZ2b95@no-nans-violation? jZ2b95@no-nans-violation?) (set! jZ2b97@&no-nans-rtd jZ2b8a@jZ2b85) (set! jZ2c89@jZ2b97@&no-nans-rtd jZ2b97@&no-nans-rtd) (set! jZ2b99@&no-nans-rcd jZ2b8e@jZ2b86) (set! jZ2c8a@jZ2b99@&no-nans-rcd jZ2b99@&no-nans-rcd) (void))
(begin (begin (jZ71b@jZ6d0@current-primitive-locations (lambda (jZ3151@x) (let ((jZ3153@t (assq jZ3151@x '((&no-nans-rcd . jZ2c8a@jZ2b99@&no-nans-rcd) (&no-nans-rtd . jZ2c89@jZ2b97@&no-nans-rtd) (&no-infinities-rcd . jZ2c82@jZ2b84@&no-infinities-rcd) (&no-infinities-rtd . jZ2c81@jZ2b82@&no-infinities-rtd) (&i/o-encoding-rcd . jZ2c7a@jZ2b6f@&i/o-encoding-rcd) (&i/o-encoding-rtd . jZ2c79@jZ2b6d@&i/o-encoding-rtd) (&i/o-decoding-rcd . jZ2c70@jZ2b54@&i/o-decoding-rcd) (&i/o-decoding-rtd . jZ2c6f@jZ2b52@&i/o-decoding-rtd) (&i/o-port-rcd . jZ2c68@jZ2b3f@&i/o-port-rcd) (&i/o-port-rtd . jZ2c67@jZ2b3d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . jZ2c5e@jZ2b24@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . jZ2c5d@jZ2b22@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . jZ2c56@jZ2b0f@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . jZ2c55@jZ2b0d@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . jZ2c4e@jZ2afa@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . jZ2c4d@jZ2af8@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . jZ2c46@jZ2ae5@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . jZ2c45@jZ2ae3@&i/o-file-protection-rtd) (&i/o-filename-rcd . jZ2c3e@jZ2ad0@&i/o-filename-rcd) (&i/o-filename-rtd . jZ2c3d@jZ2ace@&i/o-filename-rtd) (&i/o-invalid-position-rcd . jZ2c34@jZ2ab5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . jZ2c33@jZ2ab3@&i/o-invalid-position-rtd) (&i/o-write-rcd . jZ2c2a@jZ2a9a@&i/o-write-rcd) (&i/o-write-rtd . jZ2c29@jZ2a98@&i/o-write-rtd) (&i/o-read-rcd . jZ2c22@jZ2a85@&i/o-read-rcd) (&i/o-read-rtd . jZ2c21@jZ2a83@&i/o-read-rtd) (&i/o-rcd . jZ2c1a@jZ2a70@&i/o-rcd) (&i/o-rtd . jZ2c19@jZ2a6e@&i/o-rtd) (&undefined-rcd . jZ2c12@jZ2a5b@&undefined-rcd) (&undefined-rtd . jZ2c11@jZ2a59@&undefined-rtd) (&syntax-rcd . jZ2c0a@jZ2a46@&syntax-rcd) (&syntax-rtd . jZ2c09@jZ2a44@&syntax-rtd) (&lexical-rcd . jZ2bfe@jZ2a25@&lexical-rcd) (&lexical-rtd . jZ2bfd@jZ2a23@&lexical-rtd) (&implementation-restriction-rcd . jZ2bf6@jZ2a10@&implementation-restriction-rcd) (&implementation-restriction-rtd . jZ2bf5@jZ2a0e@&implementation-restriction-rtd) (&non-continuable-rcd . jZ2bee@jZ29fb@&non-continuable-rcd) (&non-continuable-rtd . jZ2bed@jZ29f9@&non-continuable-rtd) (&who-rcd . jZ2be6@jZ29e6@&who-rcd) (&who-rtd . jZ2be5@jZ29e4@&who-rtd) (&irritants-rcd . jZ2bdc@jZ29cb@&irritants-rcd) (&irritants-rtd . jZ2bdb@jZ29c9@&irritants-rtd) (&assertion-rcd . jZ2bd2@jZ29b0@&assertion-rcd) (&assertion-rtd . jZ2bd1@jZ29ae@&assertion-rtd) (&violation-rcd . jZ2bca@jZ299b@&violation-rcd) (&violation-rtd . jZ2bc9@jZ2999@&violation-rtd) (&error-rcd . jZ2bc2@jZ2986@&error-rcd) (&error-rtd . jZ2bc1@jZ2984@&error-rtd) (&serious-rcd . jZ2bba@jZ2971@&serious-rcd) (&serious-rtd . jZ2bb9@jZ296f@&serious-rtd) (&warning-rcd . jZ2bb2@jZ295c@&warning-rcd) (&warning-rtd . jZ2bb1@jZ295a@&warning-rtd) (&message-rcd . jZ2baa@jZ2947@&message-rcd) (&message-rtd . jZ2ba9@jZ2945@&message-rtd) (&condition-rcd . jZ2ba0@jZ28e8@&condition-rcd) (&condition-rtd . jZ2b9f@jZ28e6@&condition-rtd) (syntax-error . jZ28c2@jZe66@syntax-error) (syntax-dispatch . jZ2860@jZd8a@syntax-dispatch) (load . jZ2df2@jZ2ca8@load) (interaction-environment . jZ28cb@jZe78@interaction-environment) (library-path . jZ986@jZ7be@library-path) (mosh-cache-dir . jZ6c9@jZ5a8@mosh-cache-dir) (make-parameter . jZ6c8@jZ5a6@make-parameter) (make-variable-transformer . jZ281d@jZbb5@make-variable-transformer) (identifier? . jZ28c5@jZe6c@identifier?) (generate-temporaries . jZ28bb@jZe58@generate-temporaries) (free-identifier=? . jZ28bc@jZe5a@free-identifier=?) (syntax->datum . jZ28c7@jZe70@syntax->datum) (datum->syntax . jZ28c6@jZe6e@datum->syntax) (bound-identifier=? . jZ28bd@jZe5c@bound-identifier=?) (make-i/o-write-error . jZ2c27@jZ2a94@make-i/o-write-error) (make-i/o-read-error . jZ2c1f@jZ2a7f@make-i/o-read-error) (make-i/o-port-error . jZ2c63@jZ2b35@make-i/o-port-error) (make-i/o-invalid-position-error . jZ2c2f@jZ2aab@make-i/o-invalid-position-error) (make-i/o-filename-error . jZ2c39@jZ2ac6@make-i/o-filename-error) (make-i/o-file-protection-error . jZ2c43@jZ2adf@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . jZ2c4b@jZ2af4@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . jZ2c5b@jZ2b1e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . jZ2c53@jZ2b09@make-i/o-file-already-exists-error) (make-i/o-error . jZ2c17@jZ2a6a@make-i/o-error) (make-i/o-encoding-error . jZ2c75@jZ2b65@make-i/o-encoding-error) (make-i/o-decoding-error . jZ2c6d@jZ2b4e@make-i/o-decoding-error) (i/o-write-error? . jZ2c28@jZ2a96@i/o-write-error?) (i/o-read-error? . jZ2c20@jZ2a81@i/o-read-error?) (i/o-port-error? . jZ2c65@jZ2b39@i/o-port-error?) (i/o-invalid-position-error? . jZ2c31@jZ2aaf@i/o-invalid-position-error?) (i/o-filename-error? . jZ2c3b@jZ2aca@i/o-filename-error?) (i/o-file-protection-error? . jZ2c44@jZ2ae1@i/o-file-protection-error?) (i/o-file-is-read-only-error? . jZ2c4c@jZ2af6@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . jZ2c5c@jZ2b20@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . jZ2c54@jZ2b0b@i/o-file-already-exists-error?) (i/o-error? . jZ2c18@jZ2a6c@i/o-error?) (i/o-error-position . jZ2c32@jZ2ab1@i/o-error-position) (i/o-error-port . jZ2c66@jZ2b3b@i/o-error-port) (i/o-error-filename . jZ2c3c@jZ2acc@i/o-error-filename) (i/o-encoding-error? . jZ2c77@jZ2b69@i/o-encoding-error?) (i/o-encoding-error-char . jZ2c78@jZ2b6b@i/o-encoding-error-char) (i/o-decoding-error? . jZ2c6e@jZ2b50@i/o-decoding-error?) (scheme-report-environment . jZ28b2@jZe46@scheme-report-environment) (null-environment . jZ28b1@jZe44@null-environment) (command-line . jZ2def@jZ2ca2@command-line) (eval . jZ28b4@jZe4a@eval) (environment . jZ28b0@jZe42@environment) (who-condition? . jZ2be3@jZ29e0@who-condition?) (warning? . jZ2bb0@jZ2958@warning?) (violation? . jZ2bc8@jZ2997@violation?) (undefined-violation? . jZ2c10@jZ2a57@undefined-violation?) (syntax-violation? . jZ2c06@jZ2a3e@syntax-violation?) (syntax-violation-subform . jZ2c08@jZ2a42@syntax-violation-subform) (syntax-violation-form . jZ2c07@jZ2a40@syntax-violation-form) (syntax-violation . jZ28c4@jZe6a@syntax-violation) (serious-condition? . jZ2bb8@jZ296d@serious-condition?) (non-continuable-violation? . jZ2bec@jZ29f7@non-continuable-violation?) (message-condition? . jZ2ba7@jZ2941@message-condition?) (make-who-condition . jZ2be1@jZ29dc@make-who-condition) (make-warning . jZ2baf@jZ2956@make-warning) (make-violation . jZ2bc7@jZ2995@make-violation) (make-undefined-violation . jZ2c0f@jZ2a55@make-undefined-violation) (make-syntax-violation . jZ2c03@jZ2a38@make-syntax-violation) (make-serious-condition . jZ2bb7@jZ296b@make-serious-condition) (make-non-continuable-violation . jZ2beb@jZ29f5@make-non-continuable-violation) (make-message-condition . jZ2ba5@jZ293d@make-message-condition) (make-lexical-violation . jZ2bfb@jZ2a1f@make-lexical-violation) (make-irritants-condition . jZ2bd7@jZ29c1@make-irritants-condition) (make-implementation-restriction-violation . jZ2bf3@jZ2a0a@make-implementation-restriction-violation) (make-error . jZ2bbf@jZ2980@make-error) (make-assertion-violation . jZ2bcf@jZ29aa@make-assertion-violation) (lexical-violation? . jZ2bfc@jZ2a21@lexical-violation?) (irritants-condition? . jZ2bd9@jZ29c5@irritants-condition?) (implementation-restriction-violation? . jZ2bf4@jZ2a0c@implementation-restriction-violation?) (error? . jZ2bc0@jZ2982@error?) (condition-who . jZ2be4@jZ29e2@condition-who) (condition-message . jZ2ba8@jZ2943@condition-message) (condition-irritants . jZ2bda@jZ29c7@condition-irritants) (assertion-violation? . jZ2bd0@jZ29ac@assertion-violation?) (no-nans-violation? . jZ2c88@jZ2b95@no-nans-violation?) (no-infinities-violation? . jZ2c80@jZ2b80@no-infinities-violation?) (make-no-nans-violation . jZ2c87@jZ2b93@make-no-nans-violation) (make-no-infinities-violation . jZ2c7f@jZ2b7e@make-no-infinities-violation) (assertion-error . jZ28c1@jZe64@assertion-error))))) (if jZ3153@t (cdr jZ3153@t) '#f)))) (jZ996@jZ7de@install-library 'jZ312e '(mosh interaction) '() '() '() '() '((regexp? . jZ3126) (alist->eq-hash-table . jZ3122) (format . jZ311f) (string-split . jZ3113) (call-process . jZ310d) (set-current-directory! . jZ3109) (expand-path . jZ3108) (current-directory . jZ3107) (%spawn . jZ3106) (%waitpid . jZ3105) (simple-struct-name . jZ3104) (simple-struct-set! . jZ3103) (simple-struct-ref . jZ3102) (make-simple-struct . jZ3101) (simple-struct? . jZ3100) (pointer-ref-c-int64 . jZ30ff) (pointer-ref-c-int32 . jZ30fe) (pointer-ref-c-int16 . jZ30fd) (pointer-ref-c-int8 . jZ30fc) (pointer-ref-c-uint64 . jZ30fb) (pointer-ref-c-uint32 . jZ30fa) (pointer-ref-c-uint16 . jZ30f9) (pointer-ref-c-uint8 . jZ30f8) (pointer-set-c-uint64! . jZ30f7) (pointer-set-c-uint32! . jZ30f6) (pointer-set-c-uint16! . jZ30f5) (pointer-set-c-uint8! . jZ30f4) (pointer-set-c-int64! . jZ30f3) (pointer-set-c-int32! . jZ30f2) (pointer-set-c-int16! . jZ30f1) (pointer-set-c-int8! . jZ30f0) (pointer-set-c-pointer! . jZ30ef) (pointer-set-c-double! . jZ30ee) (pointer-set-c-float! . jZ30ed) (pointer-set-c-long-long! . jZ30ec) (pointer-set-c-long! . jZ30eb) (pointer-set-c-int! . jZ30ea) (pointer-set-c-short! . jZ30e9) (pointer-set-c-char! . jZ30e8) (pointer-ref-c-pointer . jZ30e7) (pointer-ref-c-double . jZ30e6) (pointer-ref-c-float . jZ30e5) (pointer-ref-c-unsigned-long-long . jZ30e4) (pointer-ref-c-signed-long-long . jZ30e3) (pointer-ref-c-unsigned-long . jZ30e2) (pointer-ref-c-signed-long . jZ30e1) (pointer-ref-c-unsigned-int . jZ30e0) (pointer-ref-c-signed-int . jZ30df) (pointer-ref-c-unsigned-short . jZ30de) (pointer-ref-c-signed-short . jZ30dd) (pointer-ref-c-unsigned-char . jZ30dc) (pointer-ref-c-signed-char . jZ30db) (pointer->integer . jZ30da) (integer->pointer . jZ30d9) (pointer? . jZ30d8) (shared-errno . jZ30d7) (%ffi-supported? . jZ30cf) (%ffi-pointer->string . jZ30ce) (%ffi-call . jZ30cd) (%ffi-lookup . jZ30cc) (%ffi-open . jZ30cb) (null-terminated-utf8->string . jZ30ca) (null-terminated-bytevector->string . jZ30c9) (%fork . jZ30c8) (%pipe . jZ30c7) (p . jZ30c6) (whereis . jZ30aa) (register . jZ30a9) (vm-join! . jZ30a8) (vm-set-value! . jZ30a7) (vm? . jZ30a6) (main-vm? . jZ30a5) (vm-eval . jZ30a4) (vm-self . jZ30a3) (vm-start! . jZ30a2) (make-vm . jZ30a1) (mutex-try-lock! . jZ30a0) (mutex-unlock! . jZ309f) (mutex-lock! . jZ309e) (mutex? . jZ309d) (make-mutex . jZ309c) (condition-variable-notify-all! . jZ309b) (condition-variable-notify! . jZ309a) (condition-variable-wait! . jZ3099) (make-condition-variable . jZ3098) (string-upcase . jZ307b) (string-titlecase . jZ307a) (string-normalize-nfkd . jZ3079) (string-normalize-nfkc . jZ3078) (string-normalize-nfd . jZ3077) (string-normalize-nfc . jZ3076) (string-foldcase . jZ3075) (string-downcase . jZ3074) (string-ci>? . jZ3073) (string-ci>=? . jZ3072) (string-ci=? . jZ3071) (string-ci<? . jZ3070) (string-ci<=? . jZ306f) (char-whitespace? . jZ306e) (char-upper-case? . jZ306d) (char-title-case? . jZ306c) (char-numeric? . jZ306b) (char-lower-case? . jZ306a) (char-general-category . jZ3069) (char-upcase . jZ3068) (char-titlecase . jZ3067) (char-foldcase . jZ3066) (char-downcase . jZ3065) (char-ci>? . jZ3064) (char-ci>=? . jZ3063) (char-ci=? . jZ3062) (char-ci<? . jZ3061) (char-ci<=? . jZ3060) (char-alphabetic? . jZ305f) (make-variable-transformer . jZbb4) (identifier? . jZe6b) (generate-temporaries . jZe57) (free-identifier=? . jZe59) (syntax->datum . jZe6f) (datum->syntax . jZe6d) (bound-identifier=? . jZe5b) (record-type-descriptor? . jZ305e) (record-predicate . jZ305d) (record-mutator . jZ305c) (record-constructor . jZ305b) (record-accessor . jZ305a) (make-record-type-descriptor . jZ3059) (make-record-constructor-descriptor . jZ3058) (record? . jZ3057) (record-type-uid . jZ3056) (record-type-sealed? . jZ3055) (record-type-parent . jZ3054) (record-type-opaque? . jZ3053) (record-type-name . jZ3052) (record-type-generative? . jZ3051) (record-type-field-names . jZ3050) (record-rtd . jZ304f) (record-field-mutable? . jZ304e) (delete-file . jZ304d) (file-exists? . jZ304c) (vector-sort! . jZ304b) (vector-sort . jZ304a) (list-sort . jZ3049) (symbol-hash . jZ3048) (string-ci-hash . jZ3047) (string-hash . jZ3046) (equal-hash . jZ3045) (hashtable-equivalence-function . jZ3044) (make-hashtable . jZ3043) (hashtable-hash-function . jZ3042) (make-eqv-hashtable . jZ3041) (make-eq-hashtable . jZ3040) (hashtable? . jZ303f) (hashtable-update! . jZ303e) (hashtable-size . jZ303d) (hashtable-set! . jZ303c) (hashtable-ref . jZ303b) (hashtable-mutable? . jZ303a) (hashtable-keys . jZ3039) (hashtable-entries . jZ3038) (hashtable-delete! . jZ3037) (hashtable-copy . jZ3036) (hashtable-contains? . jZ3035) (hashtable-clear! . jZ3034) (call-with-output-file . jZ3033) (call-with-input-file . jZ3032) (write-char . jZ3031) (write . jZ3030) (with-output-to-file . jZ302f) (with-input-from-file . jZ302e) (read-char . jZ302d) (read . jZ302c) (peek-char . jZ302b) (open-output-file . jZ302a) (open-input-file . jZ3029) (newline . jZ3028) (display . jZ3027) (close-output-port . jZ3026) (close-input-port . jZ3025) (eof-object? . jZ3024) (eof-object . jZ3023) (current-error-port . jZ3022) (current-output-port . jZ3021) (current-input-port . jZ3020) (output-port? . jZ301f) (input-port? . jZ301e) (utf-8-codec . jZ301d) (utf-16-codec . jZ301c) (transcoder-error-handling-mode . jZ301b) (transcoder-eol-style . jZ301a) (transcoder-codec . jZ3019) (transcoded-port . jZ3018) (textual-port? . jZ3017) (string->bytevector . jZ3016) (standard-output-port . jZ3015) (standard-input-port . jZ3014) (standard-error-port . jZ3013) (set-port-position! . jZ3012) (put-u8 . jZ3011) (put-string . jZ3010) (put-datum . jZ300f) (put-char . jZ300e) (put-bytevector . jZ300d) (port? . jZ300c) (port-transcoder . jZ300b) (port-position . jZ300a) (port-has-set-port-position!? . jZ3009) (port-has-port-position? . jZ3008) (port-eof? . jZ3007) (output-port-buffer-mode . jZ3006) (open-string-output-port . jZ3005) (open-string-input-port . jZ3004) (open-file-output-port . jZ3003) (open-file-input/output-port . jZ3002) (open-file-input-port . jZ3001) (open-bytevector-output-port . jZ3000) (open-bytevector-input-port . jZ2fff) (native-transcoder . jZ2ffe) (native-eol-style . jZ2ffd) (make-transcoder . jZ2ffc) (latin-1-codec . jZ2ffb) (make-i/o-write-error . jZ2a93) (make-i/o-read-error . jZ2a7e) (make-i/o-port-error . jZ2b34) (make-i/o-invalid-position-error . jZ2aaa) (make-i/o-filename-error . jZ2ac5) (make-i/o-file-protection-error . jZ2ade) (make-i/o-file-is-read-only-error . jZ2af3) (make-i/o-file-does-not-exist-error . jZ2b1d) (make-i/o-file-already-exists-error . jZ2b08) (make-i/o-error . jZ2a69) (make-i/o-encoding-error . jZ2b64) (make-i/o-decoding-error . jZ2b4d) (make-custom-textual-output-port . jZ2ffa) (make-custom-textual-input/output-port . jZ2ff9) (make-custom-textual-input-port . jZ2ff8) (make-custom-binary-output-port . jZ2ff7) (make-custom-binary-input/output-port . jZ2ff6) (make-custom-binary-input-port . jZ2ff5) (make-bytevector . jZ2ff4) (lookahead-u8 . jZ2ff3) (lookahead-char . jZ2ff2) (i/o-write-error? . jZ2a95) (i/o-read-error? . jZ2a80) (i/o-port-error? . jZ2b38) (i/o-invalid-position-error? . jZ2aae) (i/o-filename-error? . jZ2ac9) (i/o-file-protection-error? . jZ2ae0) (i/o-file-is-read-only-error? . jZ2af5) (i/o-file-does-not-exist-error? . jZ2b1f) (i/o-file-already-exists-error? . jZ2b0a) (i/o-error? . jZ2a6b) (i/o-error-position . jZ2ab0) (i/o-error-port . jZ2b3a) (i/o-error-filename . jZ2acb) (i/o-encoding-error? . jZ2b68) (i/o-encoding-error-char . jZ2b6a) (i/o-decoding-error? . jZ2b4f) (get-u8 . jZ2ff1) (get-string-n! . jZ2ff0) (get-string-n . jZ2fef) (get-string-all . jZ2fee) (get-line . jZ2fed) (get-datum . jZ2fec) (get-char . jZ2feb) (get-bytevector-some . jZ2fea) (get-bytevector-n! . jZ2fe9) (get-bytevector-n . jZ2fe8) (get-bytevector-all . jZ2fe7) (flush-output-port . jZ2fe6) (close-port . jZ2fe5) (exit . jZ2fdd) (command-line . jZ2ca1) (string-fill! . jZ2fdc) (string-set! . jZ2fdb) (set-cdr! . jZ2fda) (set-car! . jZ2fd9) (remove . jZ2fd8) (remv . jZ2fd7) (remp . jZ2fd6) (remq . jZ2fd5) (partition . jZ2fd4) (memv . jZ2fd3) (memq . jZ2fd2) (memp . jZ2fd1) (member . jZ2fd0) (exists . jZ2fcf) (for-all . jZ2fce) (fold-right . jZ2fcd) (fold-left . jZ2fcc) (find . jZ2fcb) (filter . jZ2fca) (cons* . jZ2fc9) (assv . jZ2fc8) (assq . jZ2fc7) (assp . jZ2fc6) (assoc . jZ2fc5) (call-with-string-output-port . jZ2fc4) (call-with-port . jZ2fc3) (call-with-bytevector-output-port . jZ2fc2) (bytevector->string . jZ2fc1) (buffer-mode? . jZ2fc0) (binary-port? . jZ2fbf) (with-exception-handler . jZ2fbe) (raise-continuable . jZ2fbd) (raise . jZ2fbc) (eval . jZe49) (environment . jZe41) (make-enumeration . jZ2fbb) (enum-set=? . jZ2fba) (enum-set-universe . jZ2fb9) (enum-set-union . jZ2fb8) (enum-set-subset? . jZ2fb7) (enum-set-projection . jZ2fb6) (enum-set-member? . jZ2fb5) (enum-set-intersection . jZ2fb4) (enum-set-indexer . jZ2fb3) (enum-set-difference . jZ2fb2) (enum-set-constructor . jZ2fb1) (enum-set-complement . jZ2fb0) (enum-set->list . jZ2faf) (who-condition? . jZ29df) (warning? . jZ2957) (violation? . jZ2996) (undefined-violation? . jZ2a56) (syntax-violation? . jZ2a3d) (syntax-violation-subform . jZ2a41) (syntax-violation-form . jZ2a3f) (syntax-violation . jZe69) (simple-conditions . jZ2fae) (serious-condition? . jZ296c) (non-continuable-violation? . jZ29f6) (message-condition? . jZ2940) (make-who-condition . jZ29db) (make-warning . jZ2955) (make-violation . jZ2994) (make-undefined-violation . jZ2a54) (make-syntax-violation . jZ2a37) (make-serious-condition . jZ296a) (make-non-continuable-violation . jZ29f4) (make-message-condition . jZ293c) (make-lexical-violation . jZ2a1e) (make-irritants-condition . jZ29c0) (make-implementation-restriction-violation . jZ2a09) (make-error . jZ297f) (make-assertion-violation . jZ29a9) (lexical-violation? . jZ2a20) (irritants-condition? . jZ29c4) (implementation-restriction-violation? . jZ2a0b) (error? . jZ2981) (condition-who . jZ29e1) (condition-predicate . jZ2fad) (condition-message . jZ2942) (condition-irritants . jZ29c6) (condition-accessor . jZ2fac) (condition . jZ2fab) (assertion-violation? . jZ29ab) (condition? . jZ2faa) (utf32->string . jZ2fa9) (utf16->string . jZ2fa8) (utf8->string . jZ2fa7) (uint-list->bytevector . jZ2fa6) (u8-list->bytevector . jZ2fa5) (string->utf8 . jZ2fa4) (string->utf32 . jZ2fa3) (string->utf16 . jZ2fa2) (sint-list->bytevector . jZ2fa1) (native-endianness . jZ2fa0) (bytevector? . jZ2f9f) (bytevector=? . jZ2f9e) (bytevector-uint-set! . jZ2f9d) (bytevector-uint-ref . jZ2f9c) (bytevector-u8-set! . jZ2f9b) (bytevector-u8-ref . jZ2f9a) (bytevector-u64-set! . jZ2f99) (bytevector-u64-ref . jZ2f98) (bytevector-u64-native-set! . jZ2f97) (bytevector-u64-native-ref . jZ2f96) (bytevector-u32-set! . jZ2f95) (bytevector-u32-ref . jZ2f94) (bytevector-u32-native-set! . jZ2f93) (bytevector-u32-native-ref . jZ2f92) (bytevector-u16-set! . jZ2f91) (bytevector-u16-ref . jZ2f90) (bytevector-u16-native-set! . jZ2f8f) (bytevector-u16-native-ref . jZ2f8e) (bytevector-sint-set! . jZ2f8d) (bytevector-sint-ref . jZ2f8c) (bytevector-s8-set! . jZ2f8b) (bytevector-s8-ref . jZ2f8a) (bytevector-s64-set! . jZ2f89) (bytevector-s64-ref . jZ2f88) (bytevector-s64-native-set! . jZ2f87) (bytevector-s64-native-ref . jZ2f86) (bytevector-s32-set! . jZ2f85) (bytevector-s32-ref . jZ2f84) (bytevector-s32-native-set! . jZ2f83) (bytevector-s32-native-ref . jZ2f82) (bytevector-s16-set! . jZ2f81) (bytevector-s16-ref . jZ2f80) (bytevector-s16-native-set! . jZ2f7f) (bytevector-s16-native-ref . jZ2f7e) (bytevector-length . jZ2f7d) (bytevector-ieee-single-ref . jZ2f7c) (bytevector-ieee-single-set! . jZ2f7b) (bytevector-ieee-single-native-set! . jZ2f7a) (bytevector-ieee-single-native-ref . jZ2f79) (bytevector-ieee-double-set! . jZ2f78) (bytevector-ieee-double-ref . jZ2f77) (bytevector-ieee-double-native-set! . jZ2f76) (bytevector-ieee-double-native-ref . jZ2f75) (bytevector-fill! . jZ2f74) (bytevector-copy! . jZ2f73) (bytevector-copy . jZ2f72) (bytevector->uint-list . jZ2f71) (bytevector->u8-list . jZ2f70) (bytevector->sint-list . jZ2f6f) (no-nans-violation? . jZ2b94) (no-infinities-violation? . jZ2b7f) (make-no-nans-violation . jZ2b92) (make-no-infinities-violation . jZ2b7d) (real->flonum . jZ2f6e) (flzero? . jZ2f6d) (fltruncate . jZ2f6c) (fltan . jZ2f6b) (flsqrt . jZ2f6a) (flsin . jZ2f69) (flround . jZ2f68) (flpositive? . jZ2f67) (flonum? . jZ2f66) (flodd? . jZ2f65) (flnumerator . jZ2f64) (flnegative? . jZ2f63) (flnan? . jZ2f62) (flmod0 . jZ2f61) (flmod . jZ2f60) (flmin . jZ2f5f) (flmax . jZ2f5e) (fllog . jZ2f5d) (flinteger? . jZ2f5c) (flinfinite? . jZ2f5b) (flfloor . jZ2f5a) (flfinite? . jZ2f59) (flexpt . jZ2f58) (flexp . jZ2f57) (fleven? . jZ2f56) (fldiv0-and-mod0 . jZ2f55) (fldiv0 . jZ2f54) (fldiv-and-mod . jZ2f53) (fldiv . jZ2f52) (fldenominator . jZ2f51) (flcos . jZ2f50) (flceiling . jZ2f4f) (flatan . jZ2f4e) (flasin . jZ2f4d) (flacos . jZ2f4c) (flabs . jZ2f4b) (fl>? . jZ2f4a) (fl>=? . jZ2f49) (fl=? . jZ2f48) (fl<? . jZ2f47) (fl<=? . jZ2f46) (fl/ . jZ2f45) (fl- . jZ2f44) (fl+ . jZ2f43) (fl* . jZ2f42) (fixnum->flonum . jZ2f41) (fxzero? . jZ2f40) (fxxor . jZ2f3f) (fxrotate-bit-field . jZ2f3e) (fxreverse-bit-field . jZ2f3d) (fxpositive? . jZ2f3c) (fxodd? . jZ2f3b) (fxnot . jZ2f3a) (fxnegative? . jZ2f39) (fxmod0 . jZ2f38) (fxmod . jZ2f37) (fxmin . jZ2f36) (fxmax . jZ2f35) (fxlength . jZ2f34) (fxior . jZ2f33) (fxif . jZ2f32) (fxfirst-bit-set . jZ2f31) (fxeven? . jZ2f30) (fxdiv0-and-mod0 . jZ2f2f) (fxdiv0 . jZ2f2e) (fxdiv-and-mod . jZ2f2d) (fxdiv . jZ2f2c) (fxcopy-bit-field . jZ2f2b) (fxcopy-bit . jZ2f2a) (fxbit-set? . jZ2f29) (fxbit-field . jZ2f28) (fxbit-count . jZ2f27) (fxarithmetic-shift-right . jZ2f26) (fxarithmetic-shift-left . jZ2f25) (fxarithmetic-shift . jZ2f24) (fxand . jZ2f23) (fx>? . jZ2f22) (fx>=? . jZ2f21) (fx=? . jZ2f20) (fx<? . jZ2f1f) (fx<=? . jZ2f1e) (fx-/carry . jZ2f1d) (fx- . jZ2f1c) (fx+/carry . jZ2f1b) (fx+ . jZ2f1a) (fx*/carry . jZ2f19) (fx* . jZ2f18) (greatest-fixnum . jZ2f17) (least-fixnum . jZ2f16) (fixnum-width . jZ2f15) (fixnum? . jZ2f14) (bitwise-rotate-bit-field . jZ2f13) (bitwise-reverse-bit-field . jZ2f12) (bitwise-length . jZ2f11) (bitwise-if . jZ2f10) (bitwise-first-bit-set . jZ2f0f) (bitwise-copy-bit-field . jZ2f0e) (bitwise-copy-bit . jZ2f0d) (bitwise-bit-set? . jZ2f0c) (bitwise-bit-field . jZ2f0b) (bitwise-bit-count . jZ2f0a) (bitwise-xor . jZ2f09) (bitwise-ior . jZ2f08) (bitwise-and . jZ2f07) (bitwise-not . jZ2f06) (bitwise-arithmetic-shift-right . jZ2f05) (bitwise-arithmetic-shift-left . jZ2f04) (bitwise-arithmetic-shift . jZ2f03) (zero? . jZ2f02) (vector? . jZ2f01) (vector-set! . jZ2f00) (vector-ref . jZ2eff) (vector-map . jZ2efe) (vector-length . jZ2efd) (vector-for-each . jZ2efc) (vector-fill! . jZ2efb) (vector->list . jZ2efa) (vector . jZ2ef9) (values . jZ2ef8) (truncate . jZ2ef7) (tan . jZ2ef6) (symbol? . jZ2ef5) (symbol=? . jZ2ef4) (symbol->string . jZ2ef3) (substring . jZ2ef2) (string? . jZ2ef1) (string>? . jZ2ef0) (string>=? . jZ2eef) (string=? . jZ2eee) (string<? . jZ2eed) (string<=? . jZ2eec) (string-ref . jZ2eeb) (string-length . jZ2eea) (string-for-each . jZ2ee9) (string-copy . jZ2ee8) (string-append . jZ2ee7) (string->symbol . jZ2ee6) (string->number . jZ2ee5) (string->list . jZ2ee4) (string . jZ2ee3) (sqrt . jZ2ee2) (sin . jZ2ee1) (round . jZ2ee0) (reverse . jZ2edf) (real? . jZ2ede) (real-valued? . jZ2edd) (real-part . jZ2edc) (rationalize . jZ2edb) (rational? . jZ2eda) (rational-valued? . jZ2ed9) (procedure? . jZ2ed8) (positive? . jZ2ed7) (pair? . jZ2ed6) (odd? . jZ2ed5) (numerator . jZ2ed4) (number? . jZ2ed3) (number->string . jZ2ed2) (null? . jZ2ed1) (not . jZ2ed0) (negative? . jZ2ecf) (nan? . jZ2ece) (min . jZ2ecd) (max . jZ2ecc) (map . jZ2ecb) (make-vector . jZ2eca) (make-string . jZ2ec9) (make-rectangular . jZ2ec8) (make-polar . jZ2ec7) (magnitude . jZ2ec6) (log . jZ2ec5) (list? . jZ2ec4) (list-tail . jZ2ec3) (list-ref . jZ2ec2) (list->vector . jZ2ec1) (list->string . jZ2ec0) (list . jZ2ebf) (length . jZ2ebe) (lcm . jZ2ebd) (integer? . jZ2ebc) (integer-valued? . jZ2ebb) (integer->char . jZ2eba) (infinite? . jZ2eb9) (inexact? . jZ2eb8) (inexact . jZ2eb7) (imag-part . jZ2eb6) (gcd . jZ2eb5) (for-each . jZ2eb4) (floor . jZ2eb3) (finite? . jZ2eb2) (expt . jZ2eb1) (exp . jZ2eb0) (exact? . jZ2eaf) (exact-integer-sqrt . jZ2eae) (exact . jZ2ead) (even? . jZ2eac) (error . jZ2eab) (eqv? . jZ2eaa) (equal? . jZ2ea9) (eq? . jZ2ea8) (dynamic-wind . jZ2ea7) (div0-and-mod0 . jZ2ea6) (mod0 . jZ2ea5) (div0 . jZ2ea4) (div-and-mod . jZ2ea3) (mod . jZ2ea2) (div . jZ2ea1) (denominator . jZ2ea0) (cos . jZ2e9f) (cons . jZ2e9e) (complex? . jZ2e9d) (char? . jZ2e9c) (char>? . jZ2e9b) (char>=? . jZ2e9a) (char=? . jZ2e99) (char<? . jZ2e98) (char<=? . jZ2e97) (char->integer . jZ2e96) (ceiling . jZ2e95) (call-with-values . jZ2e94) (call/cc . jZ2e93) (call-with-current-continuation . jZ2e92) (cddddr . jZ2e91) (cdddar . jZ2e90) (cddadr . jZ2e8f) (cddaar . jZ2e8e) (cdaddr . jZ2e8d) (cdadar . jZ2e8c) (cdaadr . jZ2e8b) (cdaaar . jZ2e8a) (cadddr . jZ2e89) (caddar . jZ2e88) (cadadr . jZ2e87) (cadaar . jZ2e86) (caaddr . jZ2e85) (caadar . jZ2e84) (caaadr . jZ2e83) (caaaar . jZ2e82) (cdddr . jZ2e81) (cddar . jZ2e80) (cdadr . jZ2e7f) (cdaar . jZ2e7e) (caddr . jZ2e7d) (cadar . jZ2e7c) (caadr . jZ2e7b) (caaar . jZ2e7a) (cddr . jZ2e79) (cdar . jZ2e78) (cadr . jZ2e77) (caar . jZ2e76) (cdr . jZ2e75) (car . jZ2e74) (boolean? . jZ2e73) (boolean=? . jZ2e72) (atan . jZ2e71) (assertion-violation . jZ2e70) (asin . jZ2e6f) (apply . jZ2e6e) (append . jZ2e6d) (angle . jZ2e6c) (acos . jZ2e6b) (abs . jZ2e6a) (/ . jZ2e69) (* . jZ2e68) (- . jZ2e67) (+ . jZ2e66) (>= . jZ2e65) (> . jZ2e64) (= . jZ2e63) (<= . jZ2e62) (< . jZ2e61) (library . jZ2e60) (&no-nans . jZ2e5f) (&no-infinities . jZ2e5e) (&i/o-encoding . jZ2e5d) (&i/o-decoding . jZ2e5c) (&i/o-port . jZ2e5b) (&i/o-file-does-not-exist . jZ2e5a) (&i/o-file-already-exists . jZ2e59) (&i/o-file-is-read-only . jZ2e58) (&i/o-file-protection . jZ2e57) (&i/o-filename . jZ2e56) (&i/o-invalid-position . jZ2e55) (&i/o-write . jZ2e54) (&i/o-read . jZ2e53) (&i/o . jZ2e52) (&undefined . jZ2e51) (&syntax . jZ2e50) (&lexical . jZ2e4f) (&implementation-restriction . jZ2e4e) (&non-continuable . jZ2e4d) (&who . jZ2e4c) (&irritants . jZ2e4b) (&assertion . jZ2e4a) (&violation . jZ2e49) (&error . jZ2e48) (&serious . jZ2e47) (&warning . jZ2e46) (&message . jZ2e45) (&condition . jZ2e44) (define-condition-type . jZ2e43) (define-enumeration . jZ2e42) (define-record-type . jZ2e41) (parent-rtd . jZ2e40) (nongenerative . jZ2e3f) (opaque . jZ2e3e) (sealed . jZ2e3d) (protocol . jZ2e3c) (parent . jZ2e3b) (immutable . jZ2e3a) (mutable . jZ2e39) (fields . jZ2e38) (error-handling-mode . jZ2e37) (file-options . jZ2e36) (buffer-mode . jZ2e35) (eol-style . jZ2e34) (guard . jZ2e33) (unsyntax-splicing . jZ2e30) (unsyntax . jZ2e2f) (unquote-splicing . jZ2e2e) (unquote . jZ2e2d) (_ . jZ2e2c) (else . jZ2e2b) (=> . jZ2e2a) (... . jZ2e29) (assert . jZ2e28) (endianness . jZ2e27) (time . jZ2e25) (do . jZ2e24) (cond . jZ2e23) (let* . jZ2e22) (let*-values . jZ2e21) (let-values . jZ2e20) (identifier-syntax . jZ2e1f) (with-syntax . jZ2e1e) (quasisyntax . jZ2e1d) (quasiquote . jZ2e1c) (syntax-rules . jZ2e1b) (include . jZ2e1a) (record-constructor-descriptor . jZ2e18) (record-type-descriptor . jZ2e17) (case . jZ2e16) (unless . jZ2e14) (when . jZ2e13) (or . jZ2e12) (and . jZ2e11) (if . jZ2e10) (let . jZ2e0f) (letrec* . jZ2e0e) (letrec . jZ2e0d) (case-lambda . jZ2e0b) (lambda . jZ2e0a) (syntax . jZ2e09) (syntax-case . jZ2e08) (quote . jZ2e07) (letrec-syntax . jZ2e05) (let-syntax . jZ2e04) (set! . jZ2e03) (import . jZ2e02) (begin . jZ2e01) (define-syntax . jZ2dff) (define . jZ2dfe)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ312f '(psyntax null-environment-5) '() '() '() '() '((make-promise . jZ2fde) (unquote-splicing . jZ2e2e) (unquote . jZ2e2d) (_ . jZ2e2c) (else . jZ2e2b) (=> . jZ2e2a) (... . jZ2e29) (delay . jZ2e26) (do . jZ2e24) (cond . jZ2e23) (let* . jZ2e22) (quasiquote . jZ2e1c) (syntax-rules . jZ2e1b) (case . jZ2e16) (or . jZ2e12) (and . jZ2e11) (if . jZ2e10) (let . jZ2e0f) (letrec . jZ2e0d) (lambda . jZ2e0a) (quote . jZ2e07) (letrec-syntax . jZ2e05) (let-syntax . jZ2e04) (set! . jZ2e03) (begin . jZ2e01) (define-syntax . jZ2dff) (define . jZ2dfe)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3130 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . jZ3073) (string-ci>=? . jZ3072) (string-ci=? . jZ3071) (string-ci<? . jZ3070) (string-ci<=? . jZ306f) (char-whitespace? . jZ306e) (char-upper-case? . jZ306d) (char-numeric? . jZ306b) (char-lower-case? . jZ306a) (char-upcase . jZ3068) (char-downcase . jZ3065) (char-ci>? . jZ3064) (char-ci>=? . jZ3063) (char-ci=? . jZ3062) (char-ci<? . jZ3061) (char-ci<=? . jZ3060) (char-alphabetic? . jZ305f) (call-with-output-file . jZ3033) (call-with-input-file . jZ3032) (write-char . jZ3031) (write . jZ3030) (with-output-to-file . jZ302f) (with-input-from-file . jZ302e) (read-char . jZ302d) (read . jZ302c) (peek-char . jZ302b) (open-output-file . jZ302a) (open-input-file . jZ3029) (newline . jZ3028) (display . jZ3027) (close-output-port . jZ3026) (close-input-port . jZ3025) (eof-object . jZ3023) (current-output-port . jZ3021) (current-input-port . jZ3020) (output-port? . jZ301f) (input-port? . jZ301e) (scheme-report-environment . jZe45) (quotient . jZ2fe4) (null-environment . jZe43) (remainder . jZ2fe3) (modulo . jZ2fe2) (inexact->exact . jZ2fe1) (force . jZ2fe0) (exact->inexact . jZ2fdf) (make-promise . jZ2fde) (string-fill! . jZ2fdc) (string-set! . jZ2fdb) (set-cdr! . jZ2fda) (set-car! . jZ2fd9) (memv . jZ2fd3) (memq . jZ2fd2) (member . jZ2fd0) (assv . jZ2fc8) (assq . jZ2fc7) (assoc . jZ2fc5) (eval . jZe49) (zero? . jZ2f02) (vector? . jZ2f01) (vector-set! . jZ2f00) (vector-ref . jZ2eff) (vector-length . jZ2efd) (vector-fill! . jZ2efb) (vector->list . jZ2efa) (vector . jZ2ef9) (values . jZ2ef8) (truncate . jZ2ef7) (tan . jZ2ef6) (symbol? . jZ2ef5) (symbol->string . jZ2ef3) (substring . jZ2ef2) (string? . jZ2ef1) (string>? . jZ2ef0) (string>=? . jZ2eef) (string=? . jZ2eee) (string<? . jZ2eed) (string<=? . jZ2eec) (string-ref . jZ2eeb) (string-length . jZ2eea) (string-copy . jZ2ee8) (string-append . jZ2ee7) (string->symbol . jZ2ee6) (string->number . jZ2ee5) (string->list . jZ2ee4) (string . jZ2ee3) (sqrt . jZ2ee2) (sin . jZ2ee1) (round . jZ2ee0) (reverse . jZ2edf) (real? . jZ2ede) (real-part . jZ2edc) (rationalize . jZ2edb) (rational? . jZ2eda) (procedure? . jZ2ed8) (positive? . jZ2ed7) (pair? . jZ2ed6) (odd? . jZ2ed5) (numerator . jZ2ed4) (number? . jZ2ed3) (number->string . jZ2ed2) (not . jZ2ed0) (negative? . jZ2ecf) (min . jZ2ecd) (max . jZ2ecc) (map . jZ2ecb) (make-vector . jZ2eca) (make-string . jZ2ec9) (make-rectangular . jZ2ec8) (make-polar . jZ2ec7) (magnitude . jZ2ec6) (log . jZ2ec5) (list? . jZ2ec4) (list-tail . jZ2ec3) (list-ref . jZ2ec2) (list->vector . jZ2ec1) (list->string . jZ2ec0) (list . jZ2ebf) (length . jZ2ebe) (lcm . jZ2ebd) (integer? . jZ2ebc) (integer->char . jZ2eba) (inexact? . jZ2eb8) (imag-part . jZ2eb6) (gcd . jZ2eb5) (for-each . jZ2eb4) (floor . jZ2eb3) (expt . jZ2eb1) (exp . jZ2eb0) (exact? . jZ2eaf) (even? . jZ2eac) (eqv? . jZ2eaa) (equal? . jZ2ea9) (eq? . jZ2ea8) (dynamic-wind . jZ2ea7) (denominator . jZ2ea0) (cos . jZ2e9f) (cons . jZ2e9e) (complex? . jZ2e9d) (char? . jZ2e9c) (char>? . jZ2e9b) (char>=? . jZ2e9a) (char=? . jZ2e99) (char<? . jZ2e98) (char<=? . jZ2e97) (char->integer . jZ2e96) (ceiling . jZ2e95) (call-with-values . jZ2e94) (call-with-current-continuation . jZ2e92) (cddddr . jZ2e91) (cdddar . jZ2e90) (cddadr . jZ2e8f) (cddaar . jZ2e8e) (cdaddr . jZ2e8d) (cdadar . jZ2e8c) (cdaadr . jZ2e8b) (cdaaar . jZ2e8a) (cadddr . jZ2e89) (caddar . jZ2e88) (cadadr . jZ2e87) (cadaar . jZ2e86) (caaddr . jZ2e85) (caadar . jZ2e84) (caaadr . jZ2e83) (caaaar . jZ2e82) (cdddr . jZ2e81) (cddar . jZ2e80) (cdadr . jZ2e7f) (cdaar . jZ2e7e) (caddr . jZ2e7d) (cadar . jZ2e7c) (caadr . jZ2e7b) (caaar . jZ2e7a) (cddr . jZ2e79) (cdar . jZ2e78) (cadr . jZ2e77) (caar . jZ2e76) (cdr . jZ2e75) (car . jZ2e74) (boolean? . jZ2e73) (atan . jZ2e71) (asin . jZ2e6f) (apply . jZ2e6e) (append . jZ2e6d) (angle . jZ2e6c) (acos . jZ2e6b) (abs . jZ2e6a) (/ . jZ2e69) (* . jZ2e68) (- . jZ2e67) (+ . jZ2e66) (>= . jZ2e65) (> . jZ2e64) (= . jZ2e63) (<= . jZ2e62) (< . jZ2e61) (unquote-splicing . jZ2e2e) (unquote . jZ2e2d) (else . jZ2e2b) (=> . jZ2e2a) (... . jZ2e29) (delay . jZ2e26) (do . jZ2e24) (cond . jZ2e23) (let* . jZ2e22) (quasiquote . jZ2e1c) (syntax-rules . jZ2e1b) (case . jZ2e16) (or . jZ2e12) (and . jZ2e11) (if . jZ2e10) (let . jZ2e0f) (letrec . jZ2e0d) (lambda . jZ2e0a) (quote . jZ2e07) (letrec-syntax . jZ2e05) (let-syntax . jZ2e04) (set! . jZ2e03) (begin . jZ2e01) (define-syntax . jZ2dff) (define . jZ2dfe)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3131 '(psyntax modules) '() '() '() '() '((module . jZ2e00)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3132 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3133 '(rnrs) '(6) '() '() '() '((regexp? . jZ3126) (string-upcase . jZ307b) (string-titlecase . jZ307a) (string-normalize-nfkd . jZ3079) (string-normalize-nfkc . jZ3078) (string-normalize-nfd . jZ3077) (string-normalize-nfc . jZ3076) (string-foldcase . jZ3075) (string-downcase . jZ3074) (string-ci>? . jZ3073) (string-ci>=? . jZ3072) (string-ci=? . jZ3071) (string-ci<? . jZ3070) (string-ci<=? . jZ306f) (char-whitespace? . jZ306e) (char-upper-case? . jZ306d) (char-title-case? . jZ306c) (char-numeric? . jZ306b) (char-lower-case? . jZ306a) (char-general-category . jZ3069) (char-upcase . jZ3068) (char-titlecase . jZ3067) (char-foldcase . jZ3066) (char-downcase . jZ3065) (char-ci>? . jZ3064) (char-ci>=? . jZ3063) (char-ci=? . jZ3062) (char-ci<? . jZ3061) (char-ci<=? . jZ3060) (char-alphabetic? . jZ305f) (make-variable-transformer . jZbb4) (identifier? . jZe6b) (generate-temporaries . jZe57) (free-identifier=? . jZe59) (syntax->datum . jZe6f) (datum->syntax . jZe6d) (bound-identifier=? . jZe5b) (record-type-descriptor? . jZ305e) (record-predicate . jZ305d) (record-mutator . jZ305c) (record-constructor . jZ305b) (record-accessor . jZ305a) (make-record-type-descriptor . jZ3059) (make-record-constructor-descriptor . jZ3058) (record? . jZ3057) (record-type-uid . jZ3056) (record-type-sealed? . jZ3055) (record-type-parent . jZ3054) (record-type-opaque? . jZ3053) (record-type-name . jZ3052) (record-type-generative? . jZ3051) (record-type-field-names . jZ3050) (record-rtd . jZ304f) (record-field-mutable? . jZ304e) (delete-file . jZ304d) (file-exists? . jZ304c) (vector-sort! . jZ304b) (vector-sort . jZ304a) (list-sort . jZ3049) (symbol-hash . jZ3048) (string-ci-hash . jZ3047) (string-hash . jZ3046) (equal-hash . jZ3045) (hashtable-equivalence-function . jZ3044) (make-hashtable . jZ3043) (hashtable-hash-function . jZ3042) (make-eqv-hashtable . jZ3041) (make-eq-hashtable . jZ3040) (hashtable? . jZ303f) (hashtable-update! . jZ303e) (hashtable-size . jZ303d) (hashtable-set! . jZ303c) (hashtable-ref . jZ303b) (hashtable-mutable? . jZ303a) (hashtable-keys . jZ3039) (hashtable-entries . jZ3038) (hashtable-delete! . jZ3037) (hashtable-copy . jZ3036) (hashtable-contains? . jZ3035) (hashtable-clear! . jZ3034) (call-with-output-file . jZ3033) (call-with-input-file . jZ3032) (write-char . jZ3031) (write . jZ3030) (with-output-to-file . jZ302f) (with-input-from-file . jZ302e) (read-char . jZ302d) (read . jZ302c) (peek-char . jZ302b) (open-output-file . jZ302a) (open-input-file . jZ3029) (newline . jZ3028) (display . jZ3027) (close-output-port . jZ3026) (close-input-port . jZ3025) (eof-object? . jZ3024) (eof-object . jZ3023) (current-error-port . jZ3022) (current-output-port . jZ3021) (current-input-port . jZ3020) (output-port? . jZ301f) (input-port? . jZ301e) (utf-8-codec . jZ301d) (utf-16-codec . jZ301c) (transcoder-error-handling-mode . jZ301b) (transcoder-eol-style . jZ301a) (transcoder-codec . jZ3019) (transcoded-port . jZ3018) (textual-port? . jZ3017) (string->bytevector . jZ3016) (standard-output-port . jZ3015) (standard-input-port . jZ3014) (standard-error-port . jZ3013) (set-port-position! . jZ3012) (put-u8 . jZ3011) (put-string . jZ3010) (put-datum . jZ300f) (put-char . jZ300e) (put-bytevector . jZ300d) (port? . jZ300c) (port-transcoder . jZ300b) (port-position . jZ300a) (port-has-set-port-position!? . jZ3009) (port-has-port-position? . jZ3008) (port-eof? . jZ3007) (output-port-buffer-mode . jZ3006) (open-string-output-port . jZ3005) (open-string-input-port . jZ3004) (open-file-output-port . jZ3003) (open-file-input/output-port . jZ3002) (open-file-input-port . jZ3001) (open-bytevector-output-port . jZ3000) (open-bytevector-input-port . jZ2fff) (native-transcoder . jZ2ffe) (native-eol-style . jZ2ffd) (make-transcoder . jZ2ffc) (latin-1-codec . jZ2ffb) (make-i/o-write-error . jZ2a93) (make-i/o-read-error . jZ2a7e) (make-i/o-port-error . jZ2b34) (make-i/o-invalid-position-error . jZ2aaa) (make-i/o-filename-error . jZ2ac5) (make-i/o-file-protection-error . jZ2ade) (make-i/o-file-is-read-only-error . jZ2af3) (make-i/o-file-does-not-exist-error . jZ2b1d) (make-i/o-file-already-exists-error . jZ2b08) (make-i/o-error . jZ2a69) (make-i/o-encoding-error . jZ2b64) (make-i/o-decoding-error . jZ2b4d) (make-custom-textual-output-port . jZ2ffa) (make-custom-textual-input/output-port . jZ2ff9) (make-custom-textual-input-port . jZ2ff8) (make-custom-binary-output-port . jZ2ff7) (make-custom-binary-input/output-port . jZ2ff6) (make-custom-binary-input-port . jZ2ff5) (make-bytevector . jZ2ff4) (lookahead-u8 . jZ2ff3) (lookahead-char . jZ2ff2) (i/o-write-error? . jZ2a95) (i/o-read-error? . jZ2a80) (i/o-port-error? . jZ2b38) (i/o-invalid-position-error? . jZ2aae) (i/o-filename-error? . jZ2ac9) (i/o-file-protection-error? . jZ2ae0) (i/o-file-is-read-only-error? . jZ2af5) (i/o-file-does-not-exist-error? . jZ2b1f) (i/o-file-already-exists-error? . jZ2b0a) (i/o-error? . jZ2a6b) (i/o-error-position . jZ2ab0) (i/o-error-port . jZ2b3a) (i/o-error-filename . jZ2acb) (i/o-encoding-error? . jZ2b68) (i/o-encoding-error-char . jZ2b6a) (i/o-decoding-error? . jZ2b4f) (get-u8 . jZ2ff1) (get-string-n! . jZ2ff0) (get-string-n . jZ2fef) (get-string-all . jZ2fee) (get-line . jZ2fed) (get-datum . jZ2fec) (get-char . jZ2feb) (get-bytevector-some . jZ2fea) (get-bytevector-n! . jZ2fe9) (get-bytevector-n . jZ2fe8) (get-bytevector-all . jZ2fe7) (flush-output-port . jZ2fe6) (close-port . jZ2fe5) (exit . jZ2fdd) (command-line . jZ2ca1) (remove . jZ2fd8) (remv . jZ2fd7) (remp . jZ2fd6) (remq . jZ2fd5) (partition . jZ2fd4) (memv . jZ2fd3) (memq . jZ2fd2) (memp . jZ2fd1) (member . jZ2fd0) (exists . jZ2fcf) (for-all . jZ2fce) (fold-right . jZ2fcd) (fold-left . jZ2fcc) (find . jZ2fcb) (filter . jZ2fca) (cons* . jZ2fc9) (assv . jZ2fc8) (assq . jZ2fc7) (assp . jZ2fc6) (assoc . jZ2fc5) (call-with-string-output-port . jZ2fc4) (call-with-port . jZ2fc3) (call-with-bytevector-output-port . jZ2fc2) (bytevector->string . jZ2fc1) (buffer-mode? . jZ2fc0) (binary-port? . jZ2fbf) (with-exception-handler . jZ2fbe) (raise-continuable . jZ2fbd) (raise . jZ2fbc) (make-enumeration . jZ2fbb) (enum-set=? . jZ2fba) (enum-set-universe . jZ2fb9) (enum-set-union . jZ2fb8) (enum-set-subset? . jZ2fb7) (enum-set-projection . jZ2fb6) (enum-set-member? . jZ2fb5) (enum-set-intersection . jZ2fb4) (enum-set-indexer . jZ2fb3) (enum-set-difference . jZ2fb2) (enum-set-constructor . jZ2fb1) (enum-set-complement . jZ2fb0) (enum-set->list . jZ2faf) (who-condition? . jZ29df) (warning? . jZ2957) (violation? . jZ2996) (undefined-violation? . jZ2a56) (syntax-violation? . jZ2a3d) (syntax-violation-subform . jZ2a41) (syntax-violation-form . jZ2a3f) (syntax-violation . jZe69) (simple-conditions . jZ2fae) (serious-condition? . jZ296c) (non-continuable-violation? . jZ29f6) (message-condition? . jZ2940) (make-who-condition . jZ29db) (make-warning . jZ2955) (make-violation . jZ2994) (make-undefined-violation . jZ2a54) (make-syntax-violation . jZ2a37) (make-serious-condition . jZ296a) (make-non-continuable-violation . jZ29f4) (make-message-condition . jZ293c) (make-lexical-violation . jZ2a1e) (make-irritants-condition . jZ29c0) (make-implementation-restriction-violation . jZ2a09) (make-error . jZ297f) (make-assertion-violation . jZ29a9) (lexical-violation? . jZ2a20) (irritants-condition? . jZ29c4) (implementation-restriction-violation? . jZ2a0b) (error? . jZ2981) (condition-who . jZ29e1) (condition-predicate . jZ2fad) (condition-message . jZ2942) (condition-irritants . jZ29c6) (condition-accessor . jZ2fac) (condition . jZ2fab) (assertion-violation? . jZ29ab) (condition? . jZ2faa) (utf32->string . jZ2fa9) (utf16->string . jZ2fa8) (utf8->string . jZ2fa7) (uint-list->bytevector . jZ2fa6) (u8-list->bytevector . jZ2fa5) (string->utf8 . jZ2fa4) (string->utf32 . jZ2fa3) (string->utf16 . jZ2fa2) (sint-list->bytevector . jZ2fa1) (native-endianness . jZ2fa0) (bytevector? . jZ2f9f) (bytevector=? . jZ2f9e) (bytevector-uint-set! . jZ2f9d) (bytevector-uint-ref . jZ2f9c) (bytevector-u8-set! . jZ2f9b) (bytevector-u8-ref . jZ2f9a) (bytevector-u64-set! . jZ2f99) (bytevector-u64-ref . jZ2f98) (bytevector-u64-native-set! . jZ2f97) (bytevector-u64-native-ref . jZ2f96) (bytevector-u32-set! . jZ2f95) (bytevector-u32-ref . jZ2f94) (bytevector-u32-native-set! . jZ2f93) (bytevector-u32-native-ref . jZ2f92) (bytevector-u16-set! . jZ2f91) (bytevector-u16-ref . jZ2f90) (bytevector-u16-native-set! . jZ2f8f) (bytevector-u16-native-ref . jZ2f8e) (bytevector-sint-set! . jZ2f8d) (bytevector-sint-ref . jZ2f8c) (bytevector-s8-set! . jZ2f8b) (bytevector-s8-ref . jZ2f8a) (bytevector-s64-set! . jZ2f89) (bytevector-s64-ref . jZ2f88) (bytevector-s64-native-set! . jZ2f87) (bytevector-s64-native-ref . jZ2f86) (bytevector-s32-set! . jZ2f85) (bytevector-s32-ref . jZ2f84) (bytevector-s32-native-set! . jZ2f83) (bytevector-s32-native-ref . jZ2f82) (bytevector-s16-set! . jZ2f81) (bytevector-s16-ref . jZ2f80) (bytevector-s16-native-set! . jZ2f7f) (bytevector-s16-native-ref . jZ2f7e) (bytevector-length . jZ2f7d) (bytevector-ieee-single-ref . jZ2f7c) (bytevector-ieee-single-set! . jZ2f7b) (bytevector-ieee-single-native-set! . jZ2f7a) (bytevector-ieee-single-native-ref . jZ2f79) (bytevector-ieee-double-set! . jZ2f78) (bytevector-ieee-double-ref . jZ2f77) (bytevector-ieee-double-native-set! . jZ2f76) (bytevector-ieee-double-native-ref . jZ2f75) (bytevector-fill! . jZ2f74) (bytevector-copy! . jZ2f73) (bytevector-copy . jZ2f72) (bytevector->uint-list . jZ2f71) (bytevector->u8-list . jZ2f70) (bytevector->sint-list . jZ2f6f) (no-nans-violation? . jZ2b94) (no-infinities-violation? . jZ2b7f) (make-no-nans-violation . jZ2b92) (make-no-infinities-violation . jZ2b7d) (real->flonum . jZ2f6e) (flzero? . jZ2f6d) (fltruncate . jZ2f6c) (fltan . jZ2f6b) (flsqrt . jZ2f6a) (flsin . jZ2f69) (flround . jZ2f68) (flpositive? . jZ2f67) (flonum? . jZ2f66) (flodd? . jZ2f65) (flnumerator . jZ2f64) (flnegative? . jZ2f63) (flnan? . jZ2f62) (flmod0 . jZ2f61) (flmod . jZ2f60) (flmin . jZ2f5f) (flmax . jZ2f5e) (fllog . jZ2f5d) (flinteger? . jZ2f5c) (flinfinite? . jZ2f5b) (flfloor . jZ2f5a) (flfinite? . jZ2f59) (flexpt . jZ2f58) (flexp . jZ2f57) (fleven? . jZ2f56) (fldiv0-and-mod0 . jZ2f55) (fldiv0 . jZ2f54) (fldiv-and-mod . jZ2f53) (fldiv . jZ2f52) (fldenominator . jZ2f51) (flcos . jZ2f50) (flceiling . jZ2f4f) (flatan . jZ2f4e) (flasin . jZ2f4d) (flacos . jZ2f4c) (flabs . jZ2f4b) (fl>? . jZ2f4a) (fl>=? . jZ2f49) (fl=? . jZ2f48) (fl<? . jZ2f47) (fl<=? . jZ2f46) (fl/ . jZ2f45) (fl- . jZ2f44) (fl+ . jZ2f43) (fl* . jZ2f42) (fixnum->flonum . jZ2f41) (fxzero? . jZ2f40) (fxxor . jZ2f3f) (fxrotate-bit-field . jZ2f3e) (fxreverse-bit-field . jZ2f3d) (fxpositive? . jZ2f3c) (fxodd? . jZ2f3b) (fxnot . jZ2f3a) (fxnegative? . jZ2f39) (fxmod0 . jZ2f38) (fxmod . jZ2f37) (fxmin . jZ2f36) (fxmax . jZ2f35) (fxlength . jZ2f34) (fxior . jZ2f33) (fxif . jZ2f32) (fxfirst-bit-set . jZ2f31) (fxeven? . jZ2f30) (fxdiv0-and-mod0 . jZ2f2f) (fxdiv0 . jZ2f2e) (fxdiv-and-mod . jZ2f2d) (fxdiv . jZ2f2c) (fxcopy-bit-field . jZ2f2b) (fxcopy-bit . jZ2f2a) (fxbit-set? . jZ2f29) (fxbit-field . jZ2f28) (fxbit-count . jZ2f27) (fxarithmetic-shift-right . jZ2f26) (fxarithmetic-shift-left . jZ2f25) (fxarithmetic-shift . jZ2f24) (fxand . jZ2f23) (fx>? . jZ2f22) (fx>=? . jZ2f21) (fx=? . jZ2f20) (fx<? . jZ2f1f) (fx<=? . jZ2f1e) (fx-/carry . jZ2f1d) (fx- . jZ2f1c) (fx+/carry . jZ2f1b) (fx+ . jZ2f1a) (fx*/carry . jZ2f19) (fx* . jZ2f18) (greatest-fixnum . jZ2f17) (least-fixnum . jZ2f16) (fixnum-width . jZ2f15) (fixnum? . jZ2f14) (bitwise-rotate-bit-field . jZ2f13) (bitwise-reverse-bit-field . jZ2f12) (bitwise-length . jZ2f11) (bitwise-if . jZ2f10) (bitwise-first-bit-set . jZ2f0f) (bitwise-copy-bit-field . jZ2f0e) (bitwise-copy-bit . jZ2f0d) (bitwise-bit-set? . jZ2f0c) (bitwise-bit-field . jZ2f0b) (bitwise-bit-count . jZ2f0a) (bitwise-xor . jZ2f09) (bitwise-ior . jZ2f08) (bitwise-and . jZ2f07) (bitwise-not . jZ2f06) (bitwise-arithmetic-shift-right . jZ2f05) (bitwise-arithmetic-shift-left . jZ2f04) (bitwise-arithmetic-shift . jZ2f03) (zero? . jZ2f02) (vector? . jZ2f01) (vector-set! . jZ2f00) (vector-ref . jZ2eff) (vector-map . jZ2efe) (vector-length . jZ2efd) (vector-for-each . jZ2efc) (vector-fill! . jZ2efb) (vector->list . jZ2efa) (vector . jZ2ef9) (values . jZ2ef8) (truncate . jZ2ef7) (tan . jZ2ef6) (symbol? . jZ2ef5) (symbol=? . jZ2ef4) (symbol->string . jZ2ef3) (substring . jZ2ef2) (string? . jZ2ef1) (string>? . jZ2ef0) (string>=? . jZ2eef) (string=? . jZ2eee) (string<? . jZ2eed) (string<=? . jZ2eec) (string-ref . jZ2eeb) (string-length . jZ2eea) (string-for-each . jZ2ee9) (string-copy . jZ2ee8) (string-append . jZ2ee7) (string->symbol . jZ2ee6) (string->number . jZ2ee5) (string->list . jZ2ee4) (string . jZ2ee3) (sqrt . jZ2ee2) (sin . jZ2ee1) (round . jZ2ee0) (reverse . jZ2edf) (real? . jZ2ede) (real-valued? . jZ2edd) (real-part . jZ2edc) (rationalize . jZ2edb) (rational? . jZ2eda) (rational-valued? . jZ2ed9) (procedure? . jZ2ed8) (positive? . jZ2ed7) (pair? . jZ2ed6) (odd? . jZ2ed5) (numerator . jZ2ed4) (number? . jZ2ed3) (number->string . jZ2ed2) (null? . jZ2ed1) (not . jZ2ed0) (negative? . jZ2ecf) (nan? . jZ2ece) (min . jZ2ecd) (max . jZ2ecc) (map . jZ2ecb) (make-vector . jZ2eca) (make-string . jZ2ec9) (make-rectangular . jZ2ec8) (make-polar . jZ2ec7) (magnitude . jZ2ec6) (log . jZ2ec5) (list? . jZ2ec4) (list-tail . jZ2ec3) (list-ref . jZ2ec2) (list->vector . jZ2ec1) (list->string . jZ2ec0) (list . jZ2ebf) (length . jZ2ebe) (lcm . jZ2ebd) (integer? . jZ2ebc) (integer-valued? . jZ2ebb) (integer->char . jZ2eba) (infinite? . jZ2eb9) (inexact? . jZ2eb8) (inexact . jZ2eb7) (imag-part . jZ2eb6) (gcd . jZ2eb5) (for-each . jZ2eb4) (floor . jZ2eb3) (finite? . jZ2eb2) (expt . jZ2eb1) (exp . jZ2eb0) (exact? . jZ2eaf) (exact-integer-sqrt . jZ2eae) (exact . jZ2ead) (even? . jZ2eac) (error . jZ2eab) (eqv? . jZ2eaa) (equal? . jZ2ea9) (eq? . jZ2ea8) (dynamic-wind . jZ2ea7) (div0-and-mod0 . jZ2ea6) (mod0 . jZ2ea5) (div0 . jZ2ea4) (div-and-mod . jZ2ea3) (mod . jZ2ea2) (div . jZ2ea1) (denominator . jZ2ea0) (cos . jZ2e9f) (cons . jZ2e9e) (complex? . jZ2e9d) (char? . jZ2e9c) (char>? . jZ2e9b) (char>=? . jZ2e9a) (char=? . jZ2e99) (char<? . jZ2e98) (char<=? . jZ2e97) (char->integer . jZ2e96) (ceiling . jZ2e95) (call-with-values . jZ2e94) (call/cc . jZ2e93) (call-with-current-continuation . jZ2e92) (cddddr . jZ2e91) (cdddar . jZ2e90) (cddadr . jZ2e8f) (cddaar . jZ2e8e) (cdaddr . jZ2e8d) (cdadar . jZ2e8c) (cdaadr . jZ2e8b) (cdaaar . jZ2e8a) (cadddr . jZ2e89) (caddar . jZ2e88) (cadadr . jZ2e87) (cadaar . jZ2e86) (caaddr . jZ2e85) (caadar . jZ2e84) (caaadr . jZ2e83) (caaaar . jZ2e82) (cdddr . jZ2e81) (cddar . jZ2e80) (cdadr . jZ2e7f) (cdaar . jZ2e7e) (caddr . jZ2e7d) (cadar . jZ2e7c) (caadr . jZ2e7b) (caaar . jZ2e7a) (cddr . jZ2e79) (cdar . jZ2e78) (cadr . jZ2e77) (caar . jZ2e76) (cdr . jZ2e75) (car . jZ2e74) (boolean? . jZ2e73) (boolean=? . jZ2e72) (atan . jZ2e71) (assertion-violation . jZ2e70) (asin . jZ2e6f) (apply . jZ2e6e) (append . jZ2e6d) (angle . jZ2e6c) (acos . jZ2e6b) (abs . jZ2e6a) (/ . jZ2e69) (* . jZ2e68) (- . jZ2e67) (+ . jZ2e66) (>= . jZ2e65) (> . jZ2e64) (= . jZ2e63) (<= . jZ2e62) (< . jZ2e61) (&no-nans . jZ2e5f) (&no-infinities . jZ2e5e) (&i/o-encoding . jZ2e5d) (&i/o-decoding . jZ2e5c) (&i/o-port . jZ2e5b) (&i/o-file-does-not-exist . jZ2e5a) (&i/o-file-already-exists . jZ2e59) (&i/o-file-is-read-only . jZ2e58) (&i/o-file-protection . jZ2e57) (&i/o-filename . jZ2e56) (&i/o-invalid-position . jZ2e55) (&i/o-write . jZ2e54) (&i/o-read . jZ2e53) (&i/o . jZ2e52) (&undefined . jZ2e51) (&syntax . jZ2e50) (&lexical . jZ2e4f) (&implementation-restriction . jZ2e4e) (&non-continuable . jZ2e4d) (&who . jZ2e4c) (&irritants . jZ2e4b) (&assertion . jZ2e4a) (&violation . jZ2e49) (&error . jZ2e48) (&serious . jZ2e47) (&warning . jZ2e46) (&message . jZ2e45) (&condition . jZ2e44) (define-condition-type . jZ2e43) (define-enumeration . jZ2e42) (define-record-type . jZ2e41) (parent-rtd . jZ2e40) (nongenerative . jZ2e3f) (opaque . jZ2e3e) (sealed . jZ2e3d) (protocol . jZ2e3c) (parent . jZ2e3b) (immutable . jZ2e3a) (mutable . jZ2e39) (fields . jZ2e38) (error-handling-mode . jZ2e37) (file-options . jZ2e36) (buffer-mode . jZ2e35) (eol-style . jZ2e34) (guard . jZ2e33) (unsyntax-splicing . jZ2e30) (unsyntax . jZ2e2f) (unquote-splicing . jZ2e2e) (unquote . jZ2e2d) (_ . jZ2e2c) (else . jZ2e2b) (=> . jZ2e2a) (... . jZ2e29) (assert . jZ2e28) (endianness . jZ2e27) (do . jZ2e24) (cond . jZ2e23) (let* . jZ2e22) (let*-values . jZ2e21) (let-values . jZ2e20) (identifier-syntax . jZ2e1f) (with-syntax . jZ2e1e) (quasisyntax . jZ2e1d) (quasiquote . jZ2e1c) (syntax-rules . jZ2e1b) (record-constructor-descriptor . jZ2e18) (record-type-descriptor . jZ2e17) (case . jZ2e16) (unless . jZ2e14) (when . jZ2e13) (or . jZ2e12) (and . jZ2e11) (if . jZ2e10) (let . jZ2e0f) (letrec* . jZ2e0e) (letrec . jZ2e0d) (case-lambda . jZ2e0b) (lambda . jZ2e0a) (syntax . jZ2e09) (syntax-case . jZ2e08) (quote . jZ2e07) (letrec-syntax . jZ2e05) (let-syntax . jZ2e04) (set! . jZ2e03) (begin . jZ2e01) (define-syntax . jZ2dff) (define . jZ2dfe)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3134 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . jZe45) (quotient . jZ2fe4) (null-environment . jZe43) (remainder . jZ2fe3) (modulo . jZ2fe2) (inexact->exact . jZ2fe1) (force . jZ2fe0) (exact->inexact . jZ2fdf) (make-promise . jZ2fde) (delay . jZ2e26)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3135 '(rnrs control) '(6) '() '() '() '((do . jZ2e24) (unless . jZ2e14) (when . jZ2e13) (case-lambda . jZ2e0b)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3136 '(rnrs eval) '(6) '() '() '() '((eval . jZe49) (environment . jZe41)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3137 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . jZ2fda) (set-car! . jZ2fd9)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3138 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . jZ2fdc) (string-set! . jZ2fdb)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3139 '(rnrs programs) '(6) '() '() '() '((exit . jZ2fdd) (command-line . jZ2ca1)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ313a '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . jZbb4) (identifier? . jZe6b) (generate-temporaries . jZe57) (free-identifier=? . jZe59) (syntax->datum . jZe6f) (datum->syntax . jZe6d) (bound-identifier=? . jZe5b) (syntax-violation . jZe69) (unsyntax-splicing . jZ2e30) (unsyntax . jZ2e2f) (_ . jZ2e2c) (... . jZ2e29) (with-syntax . jZ2e1e) (quasisyntax . jZ2e1d) (syntax . jZ2e09) (syntax-case . jZ2e08)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ313b '(rnrs files) '(6) '() '() '() '((delete-file . jZ304d) (file-exists? . jZ304c) (make-i/o-write-error . jZ2a93) (make-i/o-read-error . jZ2a7e) (make-i/o-port-error . jZ2b34) (make-i/o-invalid-position-error . jZ2aaa) (make-i/o-filename-error . jZ2ac5) (make-i/o-file-protection-error . jZ2ade) (make-i/o-file-is-read-only-error . jZ2af3) (make-i/o-file-does-not-exist-error . jZ2b1d) (make-i/o-file-already-exists-error . jZ2b08) (make-i/o-error . jZ2a69) (i/o-write-error? . jZ2a95) (i/o-read-error? . jZ2a80) (i/o-port-error? . jZ2b38) (i/o-invalid-position-error? . jZ2aae) (i/o-filename-error? . jZ2ac9) (i/o-file-protection-error? . jZ2ae0) (i/o-file-is-read-only-error? . jZ2af5) (i/o-file-does-not-exist-error? . jZ2b1f) (i/o-file-already-exists-error? . jZ2b0a) (i/o-error? . jZ2a6b) (i/o-error-position . jZ2ab0) (i/o-error-port . jZ2b3a) (i/o-error-filename . jZ2acb) (&i/o-port . jZ2e5b) (&i/o-file-does-not-exist . jZ2e5a) (&i/o-file-already-exists . jZ2e59) (&i/o-file-is-read-only . jZ2e58) (&i/o-file-protection . jZ2e57) (&i/o-filename . jZ2e56) (&i/o-invalid-position . jZ2e55) (&i/o-write . jZ2e54) (&i/o-read . jZ2e53) (&i/o . jZ2e52)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ313c '(rnrs sorting) '(6) '() '() '() '((vector-sort! . jZ304b) (vector-sort . jZ304a) (list-sort . jZ3049)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ313d '(rnrs base) '(6) '() '() '() '((zero? . jZ2f02) (vector? . jZ2f01) (vector-set! . jZ2f00) (vector-ref . jZ2eff) (vector-map . jZ2efe) (vector-length . jZ2efd) (vector-for-each . jZ2efc) (vector-fill! . jZ2efb) (vector->list . jZ2efa) (vector . jZ2ef9) (values . jZ2ef8) (truncate . jZ2ef7) (tan . jZ2ef6) (symbol? . jZ2ef5) (symbol=? . jZ2ef4) (symbol->string . jZ2ef3) (substring . jZ2ef2) (string? . jZ2ef1) (string>? . jZ2ef0) (string>=? . jZ2eef) (string=? . jZ2eee) (string<? . jZ2eed) (string<=? . jZ2eec) (string-ref . jZ2eeb) (string-length . jZ2eea) (string-for-each . jZ2ee9) (string-copy . jZ2ee8) (string-append . jZ2ee7) (string->symbol . jZ2ee6) (string->number . jZ2ee5) (string->list . jZ2ee4) (string . jZ2ee3) (sqrt . jZ2ee2) (sin . jZ2ee1) (round . jZ2ee0) (reverse . jZ2edf) (real? . jZ2ede) (real-valued? . jZ2edd) (real-part . jZ2edc) (rationalize . jZ2edb) (rational? . jZ2eda) (rational-valued? . jZ2ed9) (procedure? . jZ2ed8) (positive? . jZ2ed7) (pair? . jZ2ed6) (odd? . jZ2ed5) (numerator . jZ2ed4) (number? . jZ2ed3) (number->string . jZ2ed2) (null? . jZ2ed1) (not . jZ2ed0) (negative? . jZ2ecf) (nan? . jZ2ece) (min . jZ2ecd) (max . jZ2ecc) (map . jZ2ecb) (make-vector . jZ2eca) (make-string . jZ2ec9) (make-rectangular . jZ2ec8) (make-polar . jZ2ec7) (magnitude . jZ2ec6) (log . jZ2ec5) (list? . jZ2ec4) (list-tail . jZ2ec3) (list-ref . jZ2ec2) (list->vector . jZ2ec1) (list->string . jZ2ec0) (list . jZ2ebf) (length . jZ2ebe) (lcm . jZ2ebd) (integer? . jZ2ebc) (integer-valued? . jZ2ebb) (integer->char . jZ2eba) (infinite? . jZ2eb9) (inexact? . jZ2eb8) (inexact . jZ2eb7) (imag-part . jZ2eb6) (gcd . jZ2eb5) (for-each . jZ2eb4) (floor . jZ2eb3) (finite? . jZ2eb2) (expt . jZ2eb1) (exp . jZ2eb0) (exact? . jZ2eaf) (exact-integer-sqrt . jZ2eae) (exact . jZ2ead) (even? . jZ2eac) (error . jZ2eab) (eqv? . jZ2eaa) (equal? . jZ2ea9) (eq? . jZ2ea8) (dynamic-wind . jZ2ea7) (div0-and-mod0 . jZ2ea6) (mod0 . jZ2ea5) (div0 . jZ2ea4) (div-and-mod . jZ2ea3) (mod . jZ2ea2) (div . jZ2ea1) (denominator . jZ2ea0) (cos . jZ2e9f) (cons . jZ2e9e) (complex? . jZ2e9d) (char? . jZ2e9c) (char>? . jZ2e9b) (char>=? . jZ2e9a) (char=? . jZ2e99) (char<? . jZ2e98) (char<=? . jZ2e97) (char->integer . jZ2e96) (ceiling . jZ2e95) (call-with-values . jZ2e94) (call/cc . jZ2e93) (call-with-current-continuation . jZ2e92) (cddddr . jZ2e91) (cdddar . jZ2e90) (cddadr . jZ2e8f) (cddaar . jZ2e8e) (cdaddr . jZ2e8d) (cdadar . jZ2e8c) (cdaadr . jZ2e8b) (cdaaar . jZ2e8a) (cadddr . jZ2e89) (caddar . jZ2e88) (cadadr . jZ2e87) (cadaar . jZ2e86) (caaddr . jZ2e85) (caadar . jZ2e84) (caaadr . jZ2e83) (caaaar . jZ2e82) (cdddr . jZ2e81) (cddar . jZ2e80) (cdadr . jZ2e7f) (cdaar . jZ2e7e) (caddr . jZ2e7d) (cadar . jZ2e7c) (caadr . jZ2e7b) (caaar . jZ2e7a) (cddr . jZ2e79) (cdar . jZ2e78) (cadr . jZ2e77) (caar . jZ2e76) (cdr . jZ2e75) (car . jZ2e74) (boolean? . jZ2e73) (boolean=? . jZ2e72) (atan . jZ2e71) (assertion-violation . jZ2e70) (asin . jZ2e6f) (apply . jZ2e6e) (append . jZ2e6d) (angle . jZ2e6c) (acos . jZ2e6b) (abs . jZ2e6a) (/ . jZ2e69) (* . jZ2e68) (- . jZ2e67) (+ . jZ2e66) (>= . jZ2e65) (> . jZ2e64) (= . jZ2e63) (<= . jZ2e62) (< . jZ2e61) (unquote-splicing . jZ2e2e) (unquote . jZ2e2d) (_ . jZ2e2c) (else . jZ2e2b) (=> . jZ2e2a) (... . jZ2e29) (assert . jZ2e28) (cond . jZ2e23) (let* . jZ2e22) (let*-values . jZ2e21) (let-values . jZ2e20) (identifier-syntax . jZ2e1f) (quasiquote . jZ2e1c) (syntax-rules . jZ2e1b) (case . jZ2e16) (or . jZ2e12) (and . jZ2e11) (if . jZ2e10) (let . jZ2e0f) (letrec* . jZ2e0e) (letrec . jZ2e0d) (lambda . jZ2e0a) (quote . jZ2e07) (letrec-syntax . jZ2e05) (let-syntax . jZ2e04) (set! . jZ2e03) (begin . jZ2e01) (define-syntax . jZ2dff) (define . jZ2dfe)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ313e '(rnrs lists) '(6) '() '() '() '((remove . jZ2fd8) (remv . jZ2fd7) (remp . jZ2fd6) (remq . jZ2fd5) (partition . jZ2fd4) (memv . jZ2fd3) (memq . jZ2fd2) (memp . jZ2fd1) (member . jZ2fd0) (exists . jZ2fcf) (for-all . jZ2fce) (fold-right . jZ2fcd) (fold-left . jZ2fcc) (find . jZ2fcb) (filter . jZ2fca) (cons* . jZ2fc9) (assv . jZ2fc8) (assq . jZ2fc7) (assp . jZ2fc6) (assoc . jZ2fc5)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ313f '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . jZ3033) (call-with-input-file . jZ3032) (write-char . jZ3031) (write . jZ3030) (with-output-to-file . jZ302f) (with-input-from-file . jZ302e) (read-char . jZ302d) (read . jZ302c) (peek-char . jZ302b) (open-output-file . jZ302a) (open-input-file . jZ3029) (newline . jZ3028) (display . jZ3027) (close-output-port . jZ3026) (close-input-port . jZ3025) (eof-object? . jZ3024) (eof-object . jZ3023) (current-error-port . jZ3022) (current-output-port . jZ3021) (current-input-port . jZ3020) (output-port? . jZ301f) (input-port? . jZ301e) (make-i/o-write-error . jZ2a93) (make-i/o-read-error . jZ2a7e) (make-i/o-port-error . jZ2b34) (make-i/o-invalid-position-error . jZ2aaa) (make-i/o-filename-error . jZ2ac5) (make-i/o-file-protection-error . jZ2ade) (make-i/o-file-is-read-only-error . jZ2af3) (make-i/o-file-does-not-exist-error . jZ2b1d) (make-i/o-file-already-exists-error . jZ2b08) (make-i/o-error . jZ2a69) (i/o-write-error? . jZ2a95) (i/o-read-error? . jZ2a80) (i/o-port-error? . jZ2b38) (i/o-invalid-position-error? . jZ2aae) (i/o-filename-error? . jZ2ac9) (i/o-file-protection-error? . jZ2ae0) (i/o-file-is-read-only-error? . jZ2af5) (i/o-file-does-not-exist-error? . jZ2b1f) (i/o-file-already-exists-error? . jZ2b0a) (i/o-error? . jZ2a6b) (i/o-error-position . jZ2ab0) (i/o-error-port . jZ2b3a) (i/o-error-filename . jZ2acb) (&i/o-port . jZ2e5b) (&i/o-file-does-not-exist . jZ2e5a) (&i/o-file-already-exists . jZ2e59) (&i/o-file-is-read-only . jZ2e58) (&i/o-file-protection . jZ2e57) (&i/o-filename . jZ2e56) (&i/o-invalid-position . jZ2e55) (&i/o-write . jZ2e54) (&i/o-read . jZ2e53) (&i/o . jZ2e52)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3140 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . jZ2ff4) (utf32->string . jZ2fa9) (utf16->string . jZ2fa8) (utf8->string . jZ2fa7) (uint-list->bytevector . jZ2fa6) (u8-list->bytevector . jZ2fa5) (string->utf8 . jZ2fa4) (string->utf32 . jZ2fa3) (string->utf16 . jZ2fa2) (sint-list->bytevector . jZ2fa1) (native-endianness . jZ2fa0) (bytevector? . jZ2f9f) (bytevector=? . jZ2f9e) (bytevector-uint-set! . jZ2f9d) (bytevector-uint-ref . jZ2f9c) (bytevector-u8-set! . jZ2f9b) (bytevector-u8-ref . jZ2f9a) (bytevector-u64-set! . jZ2f99) (bytevector-u64-ref . jZ2f98) (bytevector-u64-native-set! . jZ2f97) (bytevector-u64-native-ref . jZ2f96) (bytevector-u32-set! . jZ2f95) (bytevector-u32-ref . jZ2f94) (bytevector-u32-native-set! . jZ2f93) (bytevector-u32-native-ref . jZ2f92) (bytevector-u16-set! . jZ2f91) (bytevector-u16-ref . jZ2f90) (bytevector-u16-native-set! . jZ2f8f) (bytevector-u16-native-ref . jZ2f8e) (bytevector-sint-set! . jZ2f8d) (bytevector-sint-ref . jZ2f8c) (bytevector-s8-set! . jZ2f8b) (bytevector-s8-ref . jZ2f8a) (bytevector-s64-set! . jZ2f89) (bytevector-s64-ref . jZ2f88) (bytevector-s64-native-set! . jZ2f87) (bytevector-s64-native-ref . jZ2f86) (bytevector-s32-set! . jZ2f85) (bytevector-s32-ref . jZ2f84) (bytevector-s32-native-set! . jZ2f83) (bytevector-s32-native-ref . jZ2f82) (bytevector-s16-set! . jZ2f81) (bytevector-s16-ref . jZ2f80) (bytevector-s16-native-set! . jZ2f7f) (bytevector-s16-native-ref . jZ2f7e) (bytevector-length . jZ2f7d) (bytevector-ieee-single-ref . jZ2f7c) (bytevector-ieee-single-set! . jZ2f7b) (bytevector-ieee-single-native-set! . jZ2f7a) (bytevector-ieee-single-native-ref . jZ2f79) (bytevector-ieee-double-set! . jZ2f78) (bytevector-ieee-double-ref . jZ2f77) (bytevector-ieee-double-native-set! . jZ2f76) (bytevector-ieee-double-native-ref . jZ2f75) (bytevector-fill! . jZ2f74) (bytevector-copy! . jZ2f73) (bytevector-copy . jZ2f72) (bytevector->uint-list . jZ2f71) (bytevector->u8-list . jZ2f70) (bytevector->sint-list . jZ2f6f) (endianness . jZ2e27)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3141 '(rnrs unicode) '(6) '() '() '() '((string-upcase . jZ307b) (string-titlecase . jZ307a) (string-normalize-nfkd . jZ3079) (string-normalize-nfkc . jZ3078) (string-normalize-nfd . jZ3077) (string-normalize-nfc . jZ3076) (string-foldcase . jZ3075) (string-downcase . jZ3074) (string-ci>? . jZ3073) (string-ci>=? . jZ3072) (string-ci=? . jZ3071) (string-ci<? . jZ3070) (string-ci<=? . jZ306f) (char-whitespace? . jZ306e) (char-upper-case? . jZ306d) (char-title-case? . jZ306c) (char-numeric? . jZ306b) (char-lower-case? . jZ306a) (char-general-category . jZ3069) (char-upcase . jZ3068) (char-titlecase . jZ3067) (char-foldcase . jZ3066) (char-downcase . jZ3065) (char-ci>? . jZ3064) (char-ci>=? . jZ3063) (char-ci=? . jZ3062) (char-ci<? . jZ3061) (char-ci<=? . jZ3060) (char-alphabetic? . jZ305f)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3142 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . jZ2fbe) (raise-continuable . jZ2fbd) (raise . jZ2fbc) (guard . jZ2e33) (else . jZ2e2b) (=> . jZ2e2a)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3143 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . jZ2f13) (bitwise-reverse-bit-field . jZ2f12) (bitwise-length . jZ2f11) (bitwise-if . jZ2f10) (bitwise-first-bit-set . jZ2f0f) (bitwise-copy-bit-field . jZ2f0e) (bitwise-copy-bit . jZ2f0d) (bitwise-bit-set? . jZ2f0c) (bitwise-bit-field . jZ2f0b) (bitwise-bit-count . jZ2f0a) (bitwise-xor . jZ2f09) (bitwise-ior . jZ2f08) (bitwise-and . jZ2f07) (bitwise-not . jZ2f06) (bitwise-arithmetic-shift-right . jZ2f05) (bitwise-arithmetic-shift-left . jZ2f04) (bitwise-arithmetic-shift . jZ2f03)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3144 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . jZ2f40) (fxxor . jZ2f3f) (fxrotate-bit-field . jZ2f3e) (fxreverse-bit-field . jZ2f3d) (fxpositive? . jZ2f3c) (fxodd? . jZ2f3b) (fxnot . jZ2f3a) (fxnegative? . jZ2f39) (fxmod0 . jZ2f38) (fxmod . jZ2f37) (fxmin . jZ2f36) (fxmax . jZ2f35) (fxlength . jZ2f34) (fxior . jZ2f33) (fxif . jZ2f32) (fxfirst-bit-set . jZ2f31) (fxeven? . jZ2f30) (fxdiv0-and-mod0 . jZ2f2f) (fxdiv0 . jZ2f2e) (fxdiv-and-mod . jZ2f2d) (fxdiv . jZ2f2c) (fxcopy-bit-field . jZ2f2b) (fxcopy-bit . jZ2f2a) (fxbit-set? . jZ2f29) (fxbit-field . jZ2f28) (fxbit-count . jZ2f27) (fxarithmetic-shift-right . jZ2f26) (fxarithmetic-shift-left . jZ2f25) (fxarithmetic-shift . jZ2f24) (fxand . jZ2f23) (fx>? . jZ2f22) (fx>=? . jZ2f21) (fx=? . jZ2f20) (fx<? . jZ2f1f) (fx<=? . jZ2f1e) (fx-/carry . jZ2f1d) (fx- . jZ2f1c) (fx+/carry . jZ2f1b) (fx+ . jZ2f1a) (fx*/carry . jZ2f19) (fx* . jZ2f18) (greatest-fixnum . jZ2f17) (least-fixnum . jZ2f16) (fixnum-width . jZ2f15) (fixnum? . jZ2f14)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3145 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . jZ2b94) (no-infinities-violation? . jZ2b7f) (make-no-nans-violation . jZ2b92) (make-no-infinities-violation . jZ2b7d) (real->flonum . jZ2f6e) (flzero? . jZ2f6d) (fltruncate . jZ2f6c) (fltan . jZ2f6b) (flsqrt . jZ2f6a) (flsin . jZ2f69) (flround . jZ2f68) (flpositive? . jZ2f67) (flonum? . jZ2f66) (flodd? . jZ2f65) (flnumerator . jZ2f64) (flnegative? . jZ2f63) (flnan? . jZ2f62) (flmod0 . jZ2f61) (flmod . jZ2f60) (flmin . jZ2f5f) (flmax . jZ2f5e) (fllog . jZ2f5d) (flinteger? . jZ2f5c) (flinfinite? . jZ2f5b) (flfloor . jZ2f5a) (flfinite? . jZ2f59) (flexpt . jZ2f58) (flexp . jZ2f57) (fleven? . jZ2f56) (fldiv0-and-mod0 . jZ2f55) (fldiv0 . jZ2f54) (fldiv-and-mod . jZ2f53) (fldiv . jZ2f52) (fldenominator . jZ2f51) (flcos . jZ2f50) (flceiling . jZ2f4f) (flatan . jZ2f4e) (flasin . jZ2f4d) (flacos . jZ2f4c) (flabs . jZ2f4b) (fl>? . jZ2f4a) (fl>=? . jZ2f49) (fl=? . jZ2f48) (fl<? . jZ2f47) (fl<=? . jZ2f46) (fl/ . jZ2f45) (fl- . jZ2f44) (fl+ . jZ2f43) (fl* . jZ2f42) (fixnum->flonum . jZ2f41) (&no-nans . jZ2e5f) (&no-infinities . jZ2e5e)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3146 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . jZ3048) (string-ci-hash . jZ3047) (string-hash . jZ3046) (equal-hash . jZ3045) (hashtable-equivalence-function . jZ3044) (make-hashtable . jZ3043) (hashtable-hash-function . jZ3042) (make-eqv-hashtable . jZ3041) (make-eq-hashtable . jZ3040) (hashtable? . jZ303f) (hashtable-update! . jZ303e) (hashtable-size . jZ303d) (hashtable-set! . jZ303c) (hashtable-ref . jZ303b) (hashtable-mutable? . jZ303a) (hashtable-keys . jZ3039) (hashtable-entries . jZ3038) (hashtable-delete! . jZ3037) (hashtable-copy . jZ3036) (hashtable-contains? . jZ3035) (hashtable-clear! . jZ3034)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3147 '(rnrs io ports) '(6) '() '() '() '((eof-object? . jZ3024) (eof-object . jZ3023) (current-error-port . jZ3022) (current-output-port . jZ3021) (current-input-port . jZ3020) (output-port? . jZ301f) (input-port? . jZ301e) (utf-8-codec . jZ301d) (utf-16-codec . jZ301c) (transcoder-error-handling-mode . jZ301b) (transcoder-eol-style . jZ301a) (transcoder-codec . jZ3019) (transcoded-port . jZ3018) (textual-port? . jZ3017) (string->bytevector . jZ3016) (standard-output-port . jZ3015) (standard-input-port . jZ3014) (standard-error-port . jZ3013) (set-port-position! . jZ3012) (put-u8 . jZ3011) (put-string . jZ3010) (put-datum . jZ300f) (put-char . jZ300e) (put-bytevector . jZ300d) (port? . jZ300c) (port-transcoder . jZ300b) (port-position . jZ300a) (port-has-set-port-position!? . jZ3009) (port-has-port-position? . jZ3008) (port-eof? . jZ3007) (output-port-buffer-mode . jZ3006) (open-string-output-port . jZ3005) (open-string-input-port . jZ3004) (open-file-output-port . jZ3003) (open-file-input/output-port . jZ3002) (open-file-input-port . jZ3001) (open-bytevector-output-port . jZ3000) (open-bytevector-input-port . jZ2fff) (native-transcoder . jZ2ffe) (native-eol-style . jZ2ffd) (make-transcoder . jZ2ffc) (latin-1-codec . jZ2ffb) (make-i/o-write-error . jZ2a93) (make-i/o-read-error . jZ2a7e) (make-i/o-port-error . jZ2b34) (make-i/o-invalid-position-error . jZ2aaa) (make-i/o-filename-error . jZ2ac5) (make-i/o-file-protection-error . jZ2ade) (make-i/o-file-is-read-only-error . jZ2af3) (make-i/o-file-does-not-exist-error . jZ2b1d) (make-i/o-file-already-exists-error . jZ2b08) (make-i/o-error . jZ2a69) (make-i/o-encoding-error . jZ2b64) (make-i/o-decoding-error . jZ2b4d) (make-custom-textual-output-port . jZ2ffa) (make-custom-textual-input/output-port . jZ2ff9) (make-custom-textual-input-port . jZ2ff8) (make-custom-binary-output-port . jZ2ff7) (make-custom-binary-input/output-port . jZ2ff6) (make-custom-binary-input-port . jZ2ff5) (lookahead-u8 . jZ2ff3) (lookahead-char . jZ2ff2) (i/o-write-error? . jZ2a95) (i/o-read-error? . jZ2a80) (i/o-port-error? . jZ2b38) (i/o-invalid-position-error? . jZ2aae) (i/o-filename-error? . jZ2ac9) (i/o-file-protection-error? . jZ2ae0) (i/o-file-is-read-only-error? . jZ2af5) (i/o-file-does-not-exist-error? . jZ2b1f) (i/o-file-already-exists-error? . jZ2b0a) (i/o-error? . jZ2a6b) (i/o-error-position . jZ2ab0) (i/o-error-port . jZ2b3a) (i/o-error-filename . jZ2acb) (i/o-encoding-error? . jZ2b68) (i/o-encoding-error-char . jZ2b6a) (i/o-decoding-error? . jZ2b4f) (get-u8 . jZ2ff1) (get-string-n! . jZ2ff0) (get-string-n . jZ2fef) (get-string-all . jZ2fee) (get-line . jZ2fed) (get-datum . jZ2fec) (get-char . jZ2feb) (get-bytevector-some . jZ2fea) (get-bytevector-n! . jZ2fe9) (get-bytevector-n . jZ2fe8) (get-bytevector-all . jZ2fe7) (flush-output-port . jZ2fe6) (close-port . jZ2fe5) (call-with-string-output-port . jZ2fc4) (call-with-port . jZ2fc3) (call-with-bytevector-output-port . jZ2fc2) (bytevector->string . jZ2fc1) (buffer-mode? . jZ2fc0) (binary-port? . jZ2fbf) (&i/o-encoding . jZ2e5d) (&i/o-decoding . jZ2e5c) (&i/o-port . jZ2e5b) (&i/o-file-does-not-exist . jZ2e5a) (&i/o-file-already-exists . jZ2e59) (&i/o-file-is-read-only . jZ2e58) (&i/o-file-protection . jZ2e57) (&i/o-filename . jZ2e56) (&i/o-invalid-position . jZ2e55) (&i/o-write . jZ2e54) (&i/o-read . jZ2e53) (&i/o . jZ2e52) (error-handling-mode . jZ2e37) (file-options . jZ2e36) (buffer-mode . jZ2e35) (eol-style . jZ2e34)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3148 '(rnrs enums) '(6) '() '() '() '((make-enumeration . jZ2fbb) (enum-set=? . jZ2fba) (enum-set-universe . jZ2fb9) (enum-set-union . jZ2fb8) (enum-set-subset? . jZ2fb7) (enum-set-projection . jZ2fb6) (enum-set-member? . jZ2fb5) (enum-set-intersection . jZ2fb4) (enum-set-indexer . jZ2fb3) (enum-set-difference . jZ2fb2) (enum-set-constructor . jZ2fb1) (enum-set-complement . jZ2fb0) (enum-set->list . jZ2faf) (define-enumeration . jZ2e42)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ3149 '(rnrs conditions) '(6) '() '() '() '((who-condition? . jZ29df) (warning? . jZ2957) (violation? . jZ2996) (undefined-violation? . jZ2a56) (syntax-violation? . jZ2a3d) (syntax-violation-subform . jZ2a41) (syntax-violation-form . jZ2a3f) (syntax-violation . jZe69) (simple-conditions . jZ2fae) (serious-condition? . jZ296c) (non-continuable-violation? . jZ29f6) (message-condition? . jZ2940) (make-who-condition . jZ29db) (make-warning . jZ2955) (make-violation . jZ2994) (make-undefined-violation . jZ2a54) (make-syntax-violation . jZ2a37) (make-serious-condition . jZ296a) (make-non-continuable-violation . jZ29f4) (make-message-condition . jZ293c) (make-lexical-violation . jZ2a1e) (make-irritants-condition . jZ29c0) (make-implementation-restriction-violation . jZ2a09) (make-error . jZ297f) (make-assertion-violation . jZ29a9) (lexical-violation? . jZ2a20) (irritants-condition? . jZ29c4) (implementation-restriction-violation? . jZ2a0b) (error? . jZ2981) (condition-who . jZ29e1) (condition-predicate . jZ2fad) (condition-message . jZ2942) (condition-irritants . jZ29c6) (condition-accessor . jZ2fac) (condition . jZ2fab) (assertion-violation? . jZ29ab) (condition? . jZ2faa) (&undefined . jZ2e51) (&syntax . jZ2e50) (&lexical . jZ2e4f) (&implementation-restriction . jZ2e4e) (&non-continuable . jZ2e4d) (&who . jZ2e4c) (&irritants . jZ2e4b) (&assertion . jZ2e4a) (&violation . jZ2e49) (&error . jZ2e48) (&serious . jZ2e47) (&warning . jZ2e46) (&message . jZ2e45) (&condition . jZ2e44) (define-condition-type . jZ2e43)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ314a '(rnrs records inspection) '(6) '() '() '() '((record? . jZ3057) (record-type-uid . jZ3056) (record-type-sealed? . jZ3055) (record-type-parent . jZ3054) (record-type-opaque? . jZ3053) (record-type-name . jZ3052) (record-type-generative? . jZ3051) (record-type-field-names . jZ3050) (record-rtd . jZ304f) (record-field-mutable? . jZ304e)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ314b '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . jZ305e) (record-predicate . jZ305d) (record-mutator . jZ305c) (record-constructor . jZ305b) (record-accessor . jZ305a) (make-record-type-descriptor . jZ3059) (make-record-constructor-descriptor . jZ3058)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ314c '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . jZ2e41) (parent-rtd . jZ2e40) (nongenerative . jZ2e3f) (opaque . jZ2e3e) (sealed . jZ2e3d) (protocol . jZ2e3c) (parent . jZ2e3b) (immutable . jZ2e3a) (mutable . jZ2e39) (fields . jZ2e38) (record-constructor-descriptor . jZ2e18) (record-type-descriptor . jZ2e17)) '() values values '#f '#f '#t '#f) (jZ996@jZ7de@install-library 'jZ314d '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . jZ2b98) (&no-nans-rtd . jZ2b96) (&no-infinities-rcd . jZ2b83) (&no-infinities-rtd . jZ2b81) (&i/o-encoding-rcd . jZ2b6e) (&i/o-encoding-rtd . jZ2b6c) (&i/o-decoding-rcd . jZ2b53) (&i/o-decoding-rtd . jZ2b51) (&i/o-port-rcd . jZ2b3e) (&i/o-port-rtd . jZ2b3c) (&i/o-file-does-not-exist-rcd . jZ2b23) (&i/o-file-does-not-exist-rtd . jZ2b21) (&i/o-file-already-exists-rcd . jZ2b0e) (&i/o-file-already-exists-rtd . jZ2b0c) (&i/o-file-is-read-only-rcd . jZ2af9) (&i/o-file-is-read-only-rtd . jZ2af7) (&i/o-file-protection-rcd . jZ2ae4) (&i/o-file-protection-rtd . jZ2ae2) (&i/o-filename-rcd . jZ2acf) (&i/o-filename-rtd . jZ2acd) (&i/o-invalid-position-rcd . jZ2ab4) (&i/o-invalid-position-rtd . jZ2ab2) (&i/o-write-rcd . jZ2a99) (&i/o-write-rtd . jZ2a97) (&i/o-read-rcd . jZ2a84) (&i/o-read-rtd . jZ2a82) (&i/o-rcd . jZ2a6f) (&i/o-rtd . jZ2a6d) (&undefined-rcd . jZ2a5a) (&undefined-rtd . jZ2a58) (&syntax-rcd . jZ2a45) (&syntax-rtd . jZ2a43) (&lexical-rcd . jZ2a24) (&lexical-rtd . jZ2a22) (&implementation-restriction-rcd . jZ2a0f) (&implementation-restriction-rtd . jZ2a0d) (&non-continuable-rcd . jZ29fa) (&non-continuable-rtd . jZ29f8) (&who-rcd . jZ29e5) (&who-rtd . jZ29e3) (&irritants-rcd . jZ29ca) (&irritants-rtd . jZ29c8) (&assertion-rcd . jZ29af) (&assertion-rtd . jZ29ad) (&violation-rcd . jZ299a) (&violation-rtd . jZ2998) (&error-rcd . jZ2985) (&error-rtd . jZ2983) (&serious-rcd . jZ2970) (&serious-rtd . jZ296e) (&warning-rcd . jZ295b) (&warning-rtd . jZ2959) (&message-rcd . jZ2946) (&message-rtd . jZ2944) (&condition-rcd . jZ28e7) (&condition-rtd . jZ28e5) (syntax-error . jZe65) (syntax-dispatch . jZd89) (pretty-print . jZ312d) (eval-core . jZ312c) (set-symbol-value! . jZ312b) (symbol-value . jZ312a) (gensym . jZ3129) (void . jZ3128) (load . jZ2ca7) (interaction-environment . jZe77) (char-ready? . jZ3127) (regexp? . jZ3126) (read-line . jZ3125) (gensym-prefix-set! . jZ3124) (ungensym . jZ3123) (alist->eq-hash-table . jZ3122) (assoc-ref . jZ3121) (print . jZ3120) (format . jZ311f) (host-os . jZ311e) (library-path . jZ7bd) (standard-library-path . jZ311d) (file-newer? . jZ311c) (stat-mtime . jZ311b) (write-to-file . jZ311a) (file->sexp-list . jZ3119) (file->list . jZ3118) (file->string . jZ3117) (digit->integer . jZ3116) (call-with-string-input-port . jZ3115) (call-with-string-io . jZ3114) (string-split . jZ3113) (bytevector-for-each . jZ3112) (string->regexp . jZ3111) (rxmatch . jZ3110) (regexp-replace-all . jZ310f) (hashtable-for-each . jZ310e) (mosh-cache-dir . jZ5a7) (call-process . jZ310d) (local-tz-offset . jZ310c) (microseconds . jZ310b) (directory-list . jZ310a) (set-current-directory! . jZ3109) (expand-path . jZ3108) (current-directory . jZ3107) (%spawn . jZ3106) (%waitpid . jZ3105) (simple-struct-name . jZ3104) (simple-struct-set! . jZ3103) (simple-struct-ref . jZ3102) (make-simple-struct . jZ3101) (simple-struct? . jZ3100) (pointer-ref-c-int64 . jZ30ff) (pointer-ref-c-int32 . jZ30fe) (pointer-ref-c-int16 . jZ30fd) (pointer-ref-c-int8 . jZ30fc) (pointer-ref-c-uint64 . jZ30fb) (pointer-ref-c-uint32 . jZ30fa) (pointer-ref-c-uint16 . jZ30f9) (pointer-ref-c-uint8 . jZ30f8) (pointer-set-c-uint64! . jZ30f7) (pointer-set-c-uint32! . jZ30f6) (pointer-set-c-uint16! . jZ30f5) (pointer-set-c-uint8! . jZ30f4) (pointer-set-c-int64! . jZ30f3) (pointer-set-c-int32! . jZ30f2) (pointer-set-c-int16! . jZ30f1) (pointer-set-c-int8! . jZ30f0) (pointer-set-c-pointer! . jZ30ef) (pointer-set-c-double! . jZ30ee) (pointer-set-c-float! . jZ30ed) (pointer-set-c-long-long! . jZ30ec) (pointer-set-c-long! . jZ30eb) (pointer-set-c-int! . jZ30ea) (pointer-set-c-short! . jZ30e9) (pointer-set-c-char! . jZ30e8) (pointer-ref-c-pointer . jZ30e7) (pointer-ref-c-double . jZ30e6) (pointer-ref-c-float . jZ30e5) (pointer-ref-c-unsigned-long-long . jZ30e4) (pointer-ref-c-signed-long-long . jZ30e3) (pointer-ref-c-unsigned-long . jZ30e2) (pointer-ref-c-signed-long . jZ30e1) (pointer-ref-c-unsigned-int . jZ30e0) (pointer-ref-c-signed-int . jZ30df) (pointer-ref-c-unsigned-short . jZ30de) (pointer-ref-c-signed-short . jZ30dd) (pointer-ref-c-unsigned-char . jZ30dc) (pointer-ref-c-signed-char . jZ30db) (pointer->integer . jZ30da) (integer->pointer . jZ30d9) (pointer? . jZ30d8) (shared-errno . jZ30d7) (get-c-address . jZ30d6) (obj->integer . jZ30d5) (u8-list->c-procedure . jZ30d4) (%ffi-free-c-callback-trampoline . jZ30d3) (%ffi-make-c-callback-trampoline . jZ30d2) (%ffi-free . jZ30d1) (%ffi-malloc . jZ30d0) (%ffi-supported? . jZ30cf) (%ffi-pointer->string . jZ30ce) (%ffi-call . jZ30cd) (%ffi-lookup . jZ30cc) (%ffi-open . jZ30cb) (null-terminated-utf8->string . jZ30ca) (null-terminated-bytevector->string . jZ30c9) (%fork . jZ30c8) (%pipe . jZ30c7) (p . jZ30c6) (open-output-string . jZ30c5) (get-output-string . jZ30c4) (file-stat-ctime . jZ30c3) (file-stat-atime . jZ30c2) (file-stat-mtime . jZ30c1) (file-size-in-bytes . jZ30c0) (file-writable? . jZ30bf) (file-executable? . jZ30be) (file-readable? . jZ30bd) (file-regular? . jZ30bc) (file-symbolic-link? . jZ30bb) (file-directory? . jZ30ba) (create-symbolic-link . jZ30b9) (rename-file . jZ30b8) (delete-directory . jZ30b7) (create-directory . jZ30b6) (create-mosh-cache-dir . jZ30b5) (get-environment-variables . jZ30b4) (current-exception-handler . jZ30b3) (get-environment-variable . jZ30b2) (join-wraps . jZ30b1) (id->real-label . jZ30b0) (same-marks? . jZ30af) (same-marks*? . jZ30ae) (get-timeofday . jZ30ad) (get-command-line . jZ30ac) (sys-display . jZ30ab) (whereis . jZ30aa) (register . jZ30a9) (vm-join! . jZ30a8) (vm-set-value! . jZ30a7) (vm? . jZ30a6) (main-vm? . jZ30a5) (vm-eval . jZ30a4) (vm-self . jZ30a3) (vm-start! . jZ30a2) (make-vm . jZ30a1) (mutex-try-lock! . jZ30a0) (mutex-unlock! . jZ309f) (mutex-lock! . jZ309e) (mutex? . jZ309d) (make-mutex . jZ309c) (condition-variable-notify-all! . jZ309b) (condition-variable-notify! . jZ309a) (condition-variable-wait! . jZ3099) (make-condition-variable . jZ3098) (mosh-executable-path . jZ3097) (make-file-options . jZ3096) (for-each-with-index . jZ3095) (source-info . jZ3094) (instruction? . jZ3093) (instruction->integer . jZ3092) (instruction->symbol . jZ3091) (closure->list . jZ3090) (make-compiler-instruction . jZ308f) (make-instruction . jZ308e) (set-source-info! . jZ308d) (bignum? . jZ308c) (fast-equal? . jZ308b) (fasl-read . jZ308a) (fasl-write . jZ3089) (time-usage . jZ3088) (os-constant . jZ3087) (disasm . jZ3086) (make-parameter . jZ5a5) (socket-port . jZ3085) (socket-shutdown . jZ3084) (socket-close . jZ3083) (socket-send . jZ3082) (socket-recv! . jZ3081) (socket-recv . jZ3080) (make-server-socket . jZ307f) (make-client-socket . jZ307e) (socket-accept . jZ307d) (socket? . jZ307c) (string-upcase . jZ307b) (string-titlecase . jZ307a) (string-normalize-nfkd . jZ3079) (string-normalize-nfkc . jZ3078) (string-normalize-nfd . jZ3077) (string-normalize-nfc . jZ3076) (string-foldcase . jZ3075) (string-downcase . jZ3074) (string-ci>? . jZ3073) (string-ci>=? . jZ3072) (string-ci=? . jZ3071) (string-ci<? . jZ3070) (string-ci<=? . jZ306f) (char-whitespace? . jZ306e) (char-upper-case? . jZ306d) (char-title-case? . jZ306c) (char-numeric? . jZ306b) (char-lower-case? . jZ306a) (char-general-category . jZ3069) (char-upcase . jZ3068) (char-titlecase . jZ3067) (char-foldcase . jZ3066) (char-downcase . jZ3065) (char-ci>? . jZ3064) (char-ci>=? . jZ3063) (char-ci=? . jZ3062) (char-ci<? . jZ3061) (char-ci<=? . jZ3060) (char-alphabetic? . jZ305f) (make-variable-transformer . jZbb4) (identifier? . jZe6b) (generate-temporaries . jZe57) (free-identifier=? . jZe59) (syntax->datum . jZe6f) (datum->syntax . jZe6d) (bound-identifier=? . jZe5b) (record-type-descriptor? . jZ305e) (record-predicate . jZ305d) (record-mutator . jZ305c) (record-constructor . jZ305b) (record-accessor . jZ305a) (make-record-type-descriptor . jZ3059) (make-record-constructor-descriptor . jZ3058) (record? . jZ3057) (record-type-uid . jZ3056) (record-type-sealed? . jZ3055) (record-type-parent . jZ3054) (record-type-opaque? . jZ3053) (record-type-name . jZ3052) (record-type-generative? . jZ3051) (record-type-field-names . jZ3050) (record-rtd . jZ304f) (record-field-mutable? . jZ304e) (delete-file . jZ304d) (file-exists? . jZ304c) (vector-sort! . jZ304b) (vector-sort . jZ304a) (list-sort . jZ3049) (symbol-hash . jZ3048) (string-ci-hash . jZ3047) (string-hash . jZ3046) (equal-hash . jZ3045) (hashtable-equivalence-function . jZ3044) (make-hashtable . jZ3043) (hashtable-hash-function . jZ3042) (make-eqv-hashtable . jZ3041) (make-eq-hashtable . jZ3040) (hashtable? . jZ303f) (hashtable-update! . jZ303e) (hashtable-size . jZ303d) (hashtable-set! . jZ303c) (hashtable-ref . jZ303b) (hashtable-mutable? . jZ303a) (hashtable-keys . jZ3039) (hashtable-entries . jZ3038) (hashtable-delete! . jZ3037) (hashtable-copy . jZ3036) (hashtable-contains? . jZ3035) (hashtable-clear! . jZ3034) (call-with-output-file . jZ3033) (call-with-input-file . jZ3032) (write-char . jZ3031) (write . jZ3030) (with-output-to-file . jZ302f) (with-input-from-file . jZ302e) (read-char . jZ302d) (read . jZ302c) (peek-char . jZ302b) (open-output-file . jZ302a) (open-input-file . jZ3029) (newline . jZ3028) (display . jZ3027) (close-output-port . jZ3026) (close-input-port . jZ3025) (eof-object? . jZ3024) (eof-object . jZ3023) (current-error-port . jZ3022) (current-output-port . jZ3021) (current-input-port . jZ3020) (output-port? . jZ301f) (input-port? . jZ301e) (utf-8-codec . jZ301d) (utf-16-codec . jZ301c) (transcoder-error-handling-mode . jZ301b) (transcoder-eol-style . jZ301a) (transcoder-codec . jZ3019) (transcoded-port . jZ3018) (textual-port? . jZ3017) (string->bytevector . jZ3016) (standard-output-port . jZ3015) (standard-input-port . jZ3014) (standard-error-port . jZ3013) (set-port-position! . jZ3012) (put-u8 . jZ3011) (put-string . jZ3010) (put-datum . jZ300f) (put-char . jZ300e) (put-bytevector . jZ300d) (port? . jZ300c) (port-transcoder . jZ300b) (port-position . jZ300a) (port-has-set-port-position!? . jZ3009) (port-has-port-position? . jZ3008) (port-eof? . jZ3007) (output-port-buffer-mode . jZ3006) (open-string-output-port . jZ3005) (open-string-input-port . jZ3004) (open-file-output-port . jZ3003) (open-file-input/output-port . jZ3002) (open-file-input-port . jZ3001) (open-bytevector-output-port . jZ3000) (open-bytevector-input-port . jZ2fff) (native-transcoder . jZ2ffe) (native-eol-style . jZ2ffd) (make-transcoder . jZ2ffc) (latin-1-codec . jZ2ffb) (make-i/o-write-error . jZ2a93) (make-i/o-read-error . jZ2a7e) (make-i/o-port-error . jZ2b34) (make-i/o-invalid-position-error . jZ2aaa) (make-i/o-filename-error . jZ2ac5) (make-i/o-file-protection-error . jZ2ade) (make-i/o-file-is-read-only-error . jZ2af3) (make-i/o-file-does-not-exist-error . jZ2b1d) (make-i/o-file-already-exists-error . jZ2b08) (make-i/o-error . jZ2a69) (make-i/o-encoding-error . jZ2b64) (make-i/o-decoding-error . jZ2b4d) (make-custom-textual-output-port . jZ2ffa) (make-custom-textual-input/output-port . jZ2ff9) (make-custom-textual-input-port . jZ2ff8) (make-custom-binary-output-port . jZ2ff7) (make-custom-binary-input/output-port . jZ2ff6) (make-custom-binary-input-port . jZ2ff5) (make-bytevector . jZ2ff4) (lookahead-u8 . jZ2ff3) (lookahead-char . jZ2ff2) (i/o-write-error? . jZ2a95) (i/o-read-error? . jZ2a80) (i/o-port-error? . jZ2b38) (i/o-invalid-position-error? . jZ2aae) (i/o-filename-error? . jZ2ac9) (i/o-file-protection-error? . jZ2ae0) (i/o-file-is-read-only-error? . jZ2af5) (i/o-file-does-not-exist-error? . jZ2b1f) (i/o-file-already-exists-error? . jZ2b0a) (i/o-error? . jZ2a6b) (i/o-error-position . jZ2ab0) (i/o-error-port . jZ2b3a) (i/o-error-filename . jZ2acb) (i/o-encoding-error? . jZ2b68) (i/o-encoding-error-char . jZ2b6a) (i/o-decoding-error? . jZ2b4f) (get-u8 . jZ2ff1) (get-string-n! . jZ2ff0) (get-string-n . jZ2fef) (get-string-all . jZ2fee) (get-line . jZ2fed) (get-datum . jZ2fec) (get-char . jZ2feb) (get-bytevector-some . jZ2fea) (get-bytevector-n! . jZ2fe9) (get-bytevector-n . jZ2fe8) (get-bytevector-all . jZ2fe7) (flush-output-port . jZ2fe6) (close-port . jZ2fe5) (scheme-report-environment . jZe45) (quotient . jZ2fe4) (null-environment . jZe43) (remainder . jZ2fe3) (modulo . jZ2fe2) (inexact->exact . jZ2fe1) (force . jZ2fe0) (exact->inexact . jZ2fdf) (make-promise . jZ2fde) (exit . jZ2fdd) (command-line . jZ2ca1) (string-fill! . jZ2fdc) (string-set! . jZ2fdb) (set-cdr! . jZ2fda) (set-car! . jZ2fd9) (remove . jZ2fd8) (remv . jZ2fd7) (remp . jZ2fd6) (remq . jZ2fd5) (partition . jZ2fd4) (memv . jZ2fd3) (memq . jZ2fd2) (memp . jZ2fd1) (member . jZ2fd0) (exists . jZ2fcf) (for-all . jZ2fce) (fold-right . jZ2fcd) (fold-left . jZ2fcc) (find . jZ2fcb) (filter . jZ2fca) (cons* . jZ2fc9) (assv . jZ2fc8) (assq . jZ2fc7) (assp . jZ2fc6) (assoc . jZ2fc5) (call-with-string-output-port . jZ2fc4) (call-with-port . jZ2fc3) (call-with-bytevector-output-port . jZ2fc2) (bytevector->string . jZ2fc1) (buffer-mode? . jZ2fc0) (binary-port? . jZ2fbf) (with-exception-handler . jZ2fbe) (raise-continuable . jZ2fbd) (raise . jZ2fbc) (eval . jZe49) (environment . jZe41) (make-enumeration . jZ2fbb) (enum-set=? . jZ2fba) (enum-set-universe . jZ2fb9) (enum-set-union . jZ2fb8) (enum-set-subset? . jZ2fb7) (enum-set-projection . jZ2fb6) (enum-set-member? . jZ2fb5) (enum-set-intersection . jZ2fb4) (enum-set-indexer . jZ2fb3) (enum-set-difference . jZ2fb2) (enum-set-constructor . jZ2fb1) (enum-set-complement . jZ2fb0) (enum-set->list . jZ2faf) (who-condition? . jZ29df) (warning? . jZ2957) (violation? . jZ2996) (undefined-violation? . jZ2a56) (syntax-violation? . jZ2a3d) (syntax-violation-subform . jZ2a41) (syntax-violation-form . jZ2a3f) (syntax-violation . jZe69) (simple-conditions . jZ2fae) (serious-condition? . jZ296c) (non-continuable-violation? . jZ29f6) (message-condition? . jZ2940) (make-who-condition . jZ29db) (make-warning . jZ2955) (make-violation . jZ2994) (make-undefined-violation . jZ2a54) (make-syntax-violation . jZ2a37) (make-serious-condition . jZ296a) (make-non-continuable-violation . jZ29f4) (make-message-condition . jZ293c) (make-lexical-violation . jZ2a1e) (make-irritants-condition . jZ29c0) (make-implementation-restriction-violation . jZ2a09) (make-error . jZ297f) (make-assertion-violation . jZ29a9) (lexical-violation? . jZ2a20) (irritants-condition? . jZ29c4) (implementation-restriction-violation? . jZ2a0b) (error? . jZ2981) (condition-who . jZ29e1) (condition-predicate . jZ2fad) (condition-message . jZ2942) (condition-irritants . jZ29c6) (condition-accessor . jZ2fac) (condition . jZ2fab) (assertion-violation? . jZ29ab) (condition? . jZ2faa) (utf32->string . jZ2fa9) (utf16->string . jZ2fa8) (utf8->string . jZ2fa7) (uint-list->bytevector . jZ2fa6) (u8-list->bytevector . jZ2fa5) (string->utf8 . jZ2fa4) (string->utf32 . jZ2fa3) (string->utf16 . jZ2fa2) (sint-list->bytevector . jZ2fa1) (native-endianness . jZ2fa0) (bytevector? . jZ2f9f) (bytevector=? . jZ2f9e) (bytevector-uint-set! . jZ2f9d) (bytevector-uint-ref . jZ2f9c) (bytevector-u8-set! . jZ2f9b) (bytevector-u8-ref . jZ2f9a) (bytevector-u64-set! . jZ2f99) (bytevector-u64-ref . jZ2f98) (bytevector-u64-native-set! . jZ2f97) (bytevector-u64-native-ref . jZ2f96) (bytevector-u32-set! . jZ2f95) (bytevector-u32-ref . jZ2f94) (bytevector-u32-native-set! . jZ2f93) (bytevector-u32-native-ref . jZ2f92) (bytevector-u16-set! . jZ2f91) (bytevector-u16-ref . jZ2f90) (bytevector-u16-native-set! . jZ2f8f) (bytevector-u16-native-ref . jZ2f8e) (bytevector-sint-set! . jZ2f8d) (bytevector-sint-ref . jZ2f8c) (bytevector-s8-set! . jZ2f8b) (bytevector-s8-ref . jZ2f8a) (bytevector-s64-set! . jZ2f89) (bytevector-s64-ref . jZ2f88) (bytevector-s64-native-set! . jZ2f87) (bytevector-s64-native-ref . jZ2f86) (bytevector-s32-set! . jZ2f85) (bytevector-s32-ref . jZ2f84) (bytevector-s32-native-set! . jZ2f83) (bytevector-s32-native-ref . jZ2f82) (bytevector-s16-set! . jZ2f81) (bytevector-s16-ref . jZ2f80) (bytevector-s16-native-set! . jZ2f7f) (bytevector-s16-native-ref . jZ2f7e) (bytevector-length . jZ2f7d) (bytevector-ieee-single-ref . jZ2f7c) (bytevector-ieee-single-set! . jZ2f7b) (bytevector-ieee-single-native-set! . jZ2f7a) (bytevector-ieee-single-native-ref . jZ2f79) (bytevector-ieee-double-set! . jZ2f78) (bytevector-ieee-double-ref . jZ2f77) (bytevector-ieee-double-native-set! . jZ2f76) (bytevector-ieee-double-native-ref . jZ2f75) (bytevector-fill! . jZ2f74) (bytevector-copy! . jZ2f73) (bytevector-copy . jZ2f72) (bytevector->uint-list . jZ2f71) (bytevector->u8-list . jZ2f70) (bytevector->sint-list . jZ2f6f) (no-nans-violation? . jZ2b94) (no-infinities-violation? . jZ2b7f) (make-no-nans-violation . jZ2b92) (make-no-infinities-violation . jZ2b7d) (real->flonum . jZ2f6e) (flzero? . jZ2f6d) (fltruncate . jZ2f6c) (fltan . jZ2f6b) (flsqrt . jZ2f6a) (flsin . jZ2f69) (flround . jZ2f68) (flpositive? . jZ2f67) (flonum? . jZ2f66) (flodd? . jZ2f65) (flnumerator . jZ2f64) (flnegative? . jZ2f63) (flnan? . jZ2f62) (flmod0 . jZ2f61) (flmod . jZ2f60) (flmin . jZ2f5f) (flmax . jZ2f5e) (fllog . jZ2f5d) (flinteger? . jZ2f5c) (flinfinite? . jZ2f5b) (flfloor . jZ2f5a) (flfinite? . jZ2f59) (flexpt . jZ2f58) (flexp . jZ2f57) (fleven? . jZ2f56) (fldiv0-and-mod0 . jZ2f55) (fldiv0 . jZ2f54) (fldiv-and-mod . jZ2f53) (fldiv . jZ2f52) (fldenominator . jZ2f51) (flcos . jZ2f50) (flceiling . jZ2f4f) (flatan . jZ2f4e) (flasin . jZ2f4d) (flacos . jZ2f4c) (flabs . jZ2f4b) (fl>? . jZ2f4a) (fl>=? . jZ2f49) (fl=? . jZ2f48) (fl<? . jZ2f47) (fl<=? . jZ2f46) (fl/ . jZ2f45) (fl- . jZ2f44) (fl+ . jZ2f43) (fl* . jZ2f42) (fixnum->flonum . jZ2f41) (fxzero? . jZ2f40) (fxxor . jZ2f3f) (fxrotate-bit-field . jZ2f3e) (fxreverse-bit-field . jZ2f3d) (fxpositive? . jZ2f3c) (fxodd? . jZ2f3b) (fxnot . jZ2f3a) (fxnegative? . jZ2f39) (fxmod0 . jZ2f38) (fxmod . jZ2f37) (fxmin . jZ2f36) (fxmax . jZ2f35) (fxlength . jZ2f34) (fxior . jZ2f33) (fxif . jZ2f32) (fxfirst-bit-set . jZ2f31) (fxeven? . jZ2f30) (fxdiv0-and-mod0 . jZ2f2f) (fxdiv0 . jZ2f2e) (fxdiv-and-mod . jZ2f2d) (fxdiv . jZ2f2c) (fxcopy-bit-field . jZ2f2b) (fxcopy-bit . jZ2f2a) (fxbit-set? . jZ2f29) (fxbit-field . jZ2f28) (fxbit-count . jZ2f27) (fxarithmetic-shift-right . jZ2f26) (fxarithmetic-shift-left . jZ2f25) (fxarithmetic-shift . jZ2f24) (fxand . jZ2f23) (fx>? . jZ2f22) (fx>=? . jZ2f21) (fx=? . jZ2f20) (fx<? . jZ2f1f) (fx<=? . jZ2f1e) (fx-/carry . jZ2f1d) (fx- . jZ2f1c) (fx+/carry . jZ2f1b) (fx+ . jZ2f1a) (fx*/carry . jZ2f19) (fx* . jZ2f18) (greatest-fixnum . jZ2f17) (least-fixnum . jZ2f16) (fixnum-width . jZ2f15) (fixnum? . jZ2f14) (bitwise-rotate-bit-field . jZ2f13) (bitwise-reverse-bit-field . jZ2f12) (bitwise-length . jZ2f11) (bitwise-if . jZ2f10) (bitwise-first-bit-set . jZ2f0f) (bitwise-copy-bit-field . jZ2f0e) (bitwise-copy-bit . jZ2f0d) (bitwise-bit-set? . jZ2f0c) (bitwise-bit-field . jZ2f0b) (bitwise-bit-count . jZ2f0a) (bitwise-xor . jZ2f09) (bitwise-ior . jZ2f08) (bitwise-and . jZ2f07) (bitwise-not . jZ2f06) (bitwise-arithmetic-shift-right . jZ2f05) (bitwise-arithmetic-shift-left . jZ2f04) (bitwise-arithmetic-shift . jZ2f03) (zero? . jZ2f02) (vector? . jZ2f01) (vector-set! . jZ2f00) (vector-ref . jZ2eff) (vector-map . jZ2efe) (vector-length . jZ2efd) (vector-for-each . jZ2efc) (vector-fill! . jZ2efb) (vector->list . jZ2efa) (vector . jZ2ef9) (values . jZ2ef8) (truncate . jZ2ef7) (tan . jZ2ef6) (symbol? . jZ2ef5) (symbol=? . jZ2ef4) (symbol->string . jZ2ef3) (substring . jZ2ef2) (string? . jZ2ef1) (string>? . jZ2ef0) (string>=? . jZ2eef) (string=? . jZ2eee) (string<? . jZ2eed) (string<=? . jZ2eec) (string-ref . jZ2eeb) (string-length . jZ2eea) (string-for-each . jZ2ee9) (string-copy . jZ2ee8) (string-append . jZ2ee7) (string->symbol . jZ2ee6) (string->number . jZ2ee5) (string->list . jZ2ee4) (string . jZ2ee3) (sqrt . jZ2ee2) (sin . jZ2ee1) (round . jZ2ee0) (reverse . jZ2edf) (real? . jZ2ede) (real-valued? . jZ2edd) (real-part . jZ2edc) (rationalize . jZ2edb) (rational? . jZ2eda) (rational-valued? . jZ2ed9) (procedure? . jZ2ed8) (positive? . jZ2ed7) (pair? . jZ2ed6) (odd? . jZ2ed5) (numerator . jZ2ed4) (number? . jZ2ed3) (number->string . jZ2ed2) (null? . jZ2ed1) (not . jZ2ed0) (negative? . jZ2ecf) (nan? . jZ2ece) (min . jZ2ecd) (max . jZ2ecc) (map . jZ2ecb) (make-vector . jZ2eca) (make-string . jZ2ec9) (make-rectangular . jZ2ec8) (make-polar . jZ2ec7) (magnitude . jZ2ec6) (log . jZ2ec5) (list? . jZ2ec4) (list-tail . jZ2ec3) (list-ref . jZ2ec2) (list->vector . jZ2ec1) (list->string . jZ2ec0) (list . jZ2ebf) (length . jZ2ebe) (lcm . jZ2ebd) (integer? . jZ2ebc) (integer-valued? . jZ2ebb) (integer->char . jZ2eba) (infinite? . jZ2eb9) (inexact? . jZ2eb8) (inexact . jZ2eb7) (imag-part . jZ2eb6) (gcd . jZ2eb5) (for-each . jZ2eb4) (floor . jZ2eb3) (finite? . jZ2eb2) (expt . jZ2eb1) (exp . jZ2eb0) (exact? . jZ2eaf) (exact-integer-sqrt . jZ2eae) (exact . jZ2ead) (even? . jZ2eac) (error . jZ2eab) (eqv? . jZ2eaa) (equal? . jZ2ea9) (eq? . jZ2ea8) (dynamic-wind . jZ2ea7) (div0-and-mod0 . jZ2ea6) (mod0 . jZ2ea5) (div0 . jZ2ea4) (div-and-mod . jZ2ea3) (mod . jZ2ea2) (div . jZ2ea1) (denominator . jZ2ea0) (cos . jZ2e9f) (cons . jZ2e9e) (complex? . jZ2e9d) (char? . jZ2e9c) (char>? . jZ2e9b) (char>=? . jZ2e9a) (char=? . jZ2e99) (char<? . jZ2e98) (char<=? . jZ2e97) (char->integer . jZ2e96) (ceiling . jZ2e95) (call-with-values . jZ2e94) (call/cc . jZ2e93) (call-with-current-continuation . jZ2e92) (cddddr . jZ2e91) (cdddar . jZ2e90) (cddadr . jZ2e8f) (cddaar . jZ2e8e) (cdaddr . jZ2e8d) (cdadar . jZ2e8c) (cdaadr . jZ2e8b) (cdaaar . jZ2e8a) (cadddr . jZ2e89) (caddar . jZ2e88) (cadadr . jZ2e87) (cadaar . jZ2e86) (caaddr . jZ2e85) (caadar . jZ2e84) (caaadr . jZ2e83) (caaaar . jZ2e82) (cdddr . jZ2e81) (cddar . jZ2e80) (cdadr . jZ2e7f) (cdaar . jZ2e7e) (caddr . jZ2e7d) (cadar . jZ2e7c) (caadr . jZ2e7b) (caaar . jZ2e7a) (cddr . jZ2e79) (cdar . jZ2e78) (cadr . jZ2e77) (caar . jZ2e76) (cdr . jZ2e75) (car . jZ2e74) (boolean? . jZ2e73) (boolean=? . jZ2e72) (atan . jZ2e71) (assertion-violation . jZ2e70) (assertion-error . jZe63) (asin . jZ2e6f) (apply . jZ2e6e) (append . jZ2e6d) (angle . jZ2e6c) (acos . jZ2e6b) (abs . jZ2e6a) (/ . jZ2e69) (* . jZ2e68) (- . jZ2e67) (+ . jZ2e66) (>= . jZ2e65) (> . jZ2e64) (= . jZ2e63) (<= . jZ2e62) (< . jZ2e61) (library . jZ2e60) (&no-nans . jZ2e5f) (&no-infinities . jZ2e5e) (&i/o-encoding . jZ2e5d) (&i/o-decoding . jZ2e5c) (&i/o-port . jZ2e5b) (&i/o-file-does-not-exist . jZ2e5a) (&i/o-file-already-exists . jZ2e59) (&i/o-file-is-read-only . jZ2e58) (&i/o-file-protection . jZ2e57) (&i/o-filename . jZ2e56) (&i/o-invalid-position . jZ2e55) (&i/o-write . jZ2e54) (&i/o-read . jZ2e53) (&i/o . jZ2e52) (&undefined . jZ2e51) (&syntax . jZ2e50) (&lexical . jZ2e4f) (&implementation-restriction . jZ2e4e) (&non-continuable . jZ2e4d) (&who . jZ2e4c) (&irritants . jZ2e4b) (&assertion . jZ2e4a) (&violation . jZ2e49) (&error . jZ2e48) (&serious . jZ2e47) (&warning . jZ2e46) (&message . jZ2e45) (&condition . jZ2e44) (define-condition-type . jZ2e43) (define-enumeration . jZ2e42) (define-record-type . jZ2e41) (parent-rtd . jZ2e40) (nongenerative . jZ2e3f) (opaque . jZ2e3e) (sealed . jZ2e3d) (protocol . jZ2e3c) (parent . jZ2e3b) (immutable . jZ2e3a) (mutable . jZ2e39) (fields . jZ2e38) (error-handling-mode . jZ2e37) (file-options . jZ2e36) (buffer-mode . jZ2e35) (eol-style . jZ2e34) (guard . jZ2e33) (trace-define . jZ2e32) (trace-lambda . jZ2e31) (unsyntax-splicing . jZ2e30) (unsyntax . jZ2e2f) (unquote-splicing . jZ2e2e) (unquote . jZ2e2d) (_ . jZ2e2c) (else . jZ2e2b) (=> . jZ2e2a) (... . jZ2e29) (assert . jZ2e28) (endianness . jZ2e27) (delay . jZ2e26) (time . jZ2e25) (do . jZ2e24) (cond . jZ2e23) (let* . jZ2e22) (let*-values . jZ2e21) (let-values . jZ2e20) (identifier-syntax . jZ2e1f) (with-syntax . jZ2e1e) (quasisyntax . jZ2e1d) (quasiquote . jZ2e1c) (syntax-rules . jZ2e1b) (include . jZ2e1a) (define-struct . jZ2e19) (record-constructor-descriptor . jZ2e18) (record-type-descriptor . jZ2e17) (case . jZ2e16) (parameterize . jZ2e15) (unless . jZ2e14) (when . jZ2e13) (or . jZ2e12) (and . jZ2e11) (if . jZ2e10) (let . jZ2e0f) (letrec* . jZ2e0e) (letrec . jZ2e0d) (type-descriptor . jZ2e0c) (case-lambda . jZ2e0b) (lambda . jZ2e0a) (syntax . jZ2e09) (syntax-case . jZ2e08) (quote . jZ2e07) (foreign-call . jZ2e06) (letrec-syntax . jZ2e05) (let-syntax . jZ2e04) (set! . jZ2e03) (import . jZ2e02) (begin . jZ2e01) (module . jZ2e00) (define-syntax . jZ2dff) (define . jZ2dfe)) '((jZ2b98 core-prim . &no-nans-rcd) (jZ2b96 core-prim . &no-nans-rtd) (jZ2b83 core-prim . &no-infinities-rcd) (jZ2b81 core-prim . &no-infinities-rtd) (jZ2b6e core-prim . &i/o-encoding-rcd) (jZ2b6c core-prim . &i/o-encoding-rtd) (jZ2b53 core-prim . &i/o-decoding-rcd) (jZ2b51 core-prim . &i/o-decoding-rtd) (jZ2b3e core-prim . &i/o-port-rcd) (jZ2b3c core-prim . &i/o-port-rtd) (jZ2b23 core-prim . &i/o-file-does-not-exist-rcd) (jZ2b21 core-prim . &i/o-file-does-not-exist-rtd) (jZ2b0e core-prim . &i/o-file-already-exists-rcd) (jZ2b0c core-prim . &i/o-file-already-exists-rtd) (jZ2af9 core-prim . &i/o-file-is-read-only-rcd) (jZ2af7 core-prim . &i/o-file-is-read-only-rtd) (jZ2ae4 core-prim . &i/o-file-protection-rcd) (jZ2ae2 core-prim . &i/o-file-protection-rtd) (jZ2acf core-prim . &i/o-filename-rcd) (jZ2acd core-prim . &i/o-filename-rtd) (jZ2ab4 core-prim . &i/o-invalid-position-rcd) (jZ2ab2 core-prim . &i/o-invalid-position-rtd) (jZ2a99 core-prim . &i/o-write-rcd) (jZ2a97 core-prim . &i/o-write-rtd) (jZ2a84 core-prim . &i/o-read-rcd) (jZ2a82 core-prim . &i/o-read-rtd) (jZ2a6f core-prim . &i/o-rcd) (jZ2a6d core-prim . &i/o-rtd) (jZ2a5a core-prim . &undefined-rcd) (jZ2a58 core-prim . &undefined-rtd) (jZ2a45 core-prim . &syntax-rcd) (jZ2a43 core-prim . &syntax-rtd) (jZ2a24 core-prim . &lexical-rcd) (jZ2a22 core-prim . &lexical-rtd) (jZ2a0f core-prim . &implementation-restriction-rcd) (jZ2a0d core-prim . &implementation-restriction-rtd) (jZ29fa core-prim . &non-continuable-rcd) (jZ29f8 core-prim . &non-continuable-rtd) (jZ29e5 core-prim . &who-rcd) (jZ29e3 core-prim . &who-rtd) (jZ29ca core-prim . &irritants-rcd) (jZ29c8 core-prim . &irritants-rtd) (jZ29af core-prim . &assertion-rcd) (jZ29ad core-prim . &assertion-rtd) (jZ299a core-prim . &violation-rcd) (jZ2998 core-prim . &violation-rtd) (jZ2985 core-prim . &error-rcd) (jZ2983 core-prim . &error-rtd) (jZ2970 core-prim . &serious-rcd) (jZ296e core-prim . &serious-rtd) (jZ295b core-prim . &warning-rcd) (jZ2959 core-prim . &warning-rtd) (jZ2946 core-prim . &message-rcd) (jZ2944 core-prim . &message-rtd) (jZ28e7 core-prim . &condition-rcd) (jZ28e5 core-prim . &condition-rtd) (jZe65 core-prim . syntax-error) (jZd89 core-prim . syntax-dispatch) (jZ312d core-prim . pretty-print) (jZ312c core-prim . eval-core) (jZ312b core-prim . set-symbol-value!) (jZ312a core-prim . symbol-value) (jZ3129 core-prim . gensym) (jZ3128 core-prim . void) (jZ2ca7 core-prim . load) (jZe77 core-prim . interaction-environment) (jZ3127 core-prim . char-ready?) (jZ3126 core-prim . regexp?) (jZ3125 core-prim . read-line) (jZ3124 core-prim . gensym-prefix-set!) (jZ3123 core-prim . ungensym) (jZ3122 core-prim . alist->eq-hash-table) (jZ3121 core-prim . assoc-ref) (jZ3120 core-prim . print) (jZ311f core-prim . format) (jZ311e core-prim . host-os) (jZ7bd core-prim . library-path) (jZ311d core-prim . standard-library-path) (jZ311c core-prim . file-newer?) (jZ311b core-prim . stat-mtime) (jZ311a core-prim . write-to-file) (jZ3119 core-prim . file->sexp-list) (jZ3118 core-prim . file->list) (jZ3117 core-prim . file->string) (jZ3116 core-prim . digit->integer) (jZ3115 core-prim . call-with-string-input-port) (jZ3114 core-prim . call-with-string-io) (jZ3113 core-prim . string-split) (jZ3112 core-prim . bytevector-for-each) (jZ3111 core-prim . string->regexp) (jZ3110 core-prim . rxmatch) (jZ310f core-prim . regexp-replace-all) (jZ310e core-prim . hashtable-for-each) (jZ5a7 core-prim . mosh-cache-dir) (jZ310d core-prim . call-process) (jZ310c core-prim . local-tz-offset) (jZ310b core-prim . microseconds) (jZ310a core-prim . directory-list) (jZ3109 core-prim . set-current-directory!) (jZ3108 core-prim . expand-path) (jZ3107 core-prim . current-directory) (jZ3106 core-prim . %spawn) (jZ3105 core-prim . %waitpid) (jZ3104 core-prim . simple-struct-name) (jZ3103 core-prim . simple-struct-set!) (jZ3102 core-prim . simple-struct-ref) (jZ3101 core-prim . make-simple-struct) (jZ3100 core-prim . simple-struct?) (jZ30ff core-prim . pointer-ref-c-int64) (jZ30fe core-prim . pointer-ref-c-int32) (jZ30fd core-prim . pointer-ref-c-int16) (jZ30fc core-prim . pointer-ref-c-int8) (jZ30fb core-prim . pointer-ref-c-uint64) (jZ30fa core-prim . pointer-ref-c-uint32) (jZ30f9 core-prim . pointer-ref-c-uint16) (jZ30f8 core-prim . pointer-ref-c-uint8) (jZ30f7 core-prim . pointer-set-c-uint64!) (jZ30f6 core-prim . pointer-set-c-uint32!) (jZ30f5 core-prim . pointer-set-c-uint16!) (jZ30f4 core-prim . pointer-set-c-uint8!) (jZ30f3 core-prim . pointer-set-c-int64!) (jZ30f2 core-prim . pointer-set-c-int32!) (jZ30f1 core-prim . pointer-set-c-int16!) (jZ30f0 core-prim . pointer-set-c-int8!) (jZ30ef core-prim . pointer-set-c-pointer!) (jZ30ee core-prim . pointer-set-c-double!) (jZ30ed core-prim . pointer-set-c-float!) (jZ30ec core-prim . pointer-set-c-long-long!) (jZ30eb core-prim . pointer-set-c-long!) (jZ30ea core-prim . pointer-set-c-int!) (jZ30e9 core-prim . pointer-set-c-short!) (jZ30e8 core-prim . pointer-set-c-char!) (jZ30e7 core-prim . pointer-ref-c-pointer) (jZ30e6 core-prim . pointer-ref-c-double) (jZ30e5 core-prim . pointer-ref-c-float) (jZ30e4 core-prim . pointer-ref-c-unsigned-long-long) (jZ30e3 core-prim . pointer-ref-c-signed-long-long) (jZ30e2 core-prim . pointer-ref-c-unsigned-long) (jZ30e1 core-prim . pointer-ref-c-signed-long) (jZ30e0 core-prim . pointer-ref-c-unsigned-int) (jZ30df core-prim . pointer-ref-c-signed-int) (jZ30de core-prim . pointer-ref-c-unsigned-short) (jZ30dd core-prim . pointer-ref-c-signed-short) (jZ30dc core-prim . pointer-ref-c-unsigned-char) (jZ30db core-prim . pointer-ref-c-signed-char) (jZ30da core-prim . pointer->integer) (jZ30d9 core-prim . integer->pointer) (jZ30d8 core-prim . pointer?) (jZ30d7 core-prim . shared-errno) (jZ30d6 core-prim . get-c-address) (jZ30d5 core-prim . obj->integer) (jZ30d4 core-prim . u8-list->c-procedure) (jZ30d3 core-prim . %ffi-free-c-callback-trampoline) (jZ30d2 core-prim . %ffi-make-c-callback-trampoline) (jZ30d1 core-prim . %ffi-free) (jZ30d0 core-prim . %ffi-malloc) (jZ30cf core-prim . %ffi-supported?) (jZ30ce core-prim . %ffi-pointer->string) (jZ30cd core-prim . %ffi-call) (jZ30cc core-prim . %ffi-lookup) (jZ30cb core-prim . %ffi-open) (jZ30ca core-prim . null-terminated-utf8->string) (jZ30c9 core-prim . null-terminated-bytevector->string) (jZ30c8 core-prim . %fork) (jZ30c7 core-prim . %pipe) (jZ30c6 core-prim . p) (jZ30c5 core-prim . open-output-string) (jZ30c4 core-prim . get-output-string) (jZ30c3 core-prim . file-stat-ctime) (jZ30c2 core-prim . file-stat-atime) (jZ30c1 core-prim . file-stat-mtime) (jZ30c0 core-prim . file-size-in-bytes) (jZ30bf core-prim . file-writable?) (jZ30be core-prim . file-executable?) (jZ30bd core-prim . file-readable?) (jZ30bc core-prim . file-regular?) (jZ30bb core-prim . file-symbolic-link?) (jZ30ba core-prim . file-directory?) (jZ30b9 core-prim . create-symbolic-link) (jZ30b8 core-prim . rename-file) (jZ30b7 core-prim . delete-directory) (jZ30b6 core-prim . create-directory) (jZ30b5 core-prim . create-mosh-cache-dir) (jZ30b4 core-prim . get-environment-variables) (jZ30b3 core-prim . current-exception-handler) (jZ30b2 core-prim . get-environment-variable) (jZ30b1 core-prim . join-wraps) (jZ30b0 core-prim . id->real-label) (jZ30af core-prim . same-marks?) (jZ30ae core-prim . same-marks*?) (jZ30ad core-prim . get-timeofday) (jZ30ac core-prim . get-command-line) (jZ30ab core-prim . sys-display) (jZ30aa core-prim . whereis) (jZ30a9 core-prim . register) (jZ30a8 core-prim . vm-join!) (jZ30a7 core-prim . vm-set-value!) (jZ30a6 core-prim . vm?) (jZ30a5 core-prim . main-vm?) (jZ30a4 core-prim . vm-eval) (jZ30a3 core-prim . vm-self) (jZ30a2 core-prim . vm-start!) (jZ30a1 core-prim . make-vm) (jZ30a0 core-prim . mutex-try-lock!) (jZ309f core-prim . mutex-unlock!) (jZ309e core-prim . mutex-lock!) (jZ309d core-prim . mutex?) (jZ309c core-prim . make-mutex) (jZ309b core-prim . condition-variable-notify-all!) (jZ309a core-prim . condition-variable-notify!) (jZ3099 core-prim . condition-variable-wait!) (jZ3098 core-prim . make-condition-variable) (jZ3097 core-prim . mosh-executable-path) (jZ3096 core-prim . make-file-options) (jZ3095 core-prim . for-each-with-index) (jZ3094 core-prim . source-info) (jZ3093 core-prim . instruction?) (jZ3092 core-prim . instruction->integer) (jZ3091 core-prim . instruction->symbol) (jZ3090 core-prim . closure->list) (jZ308f core-prim . make-compiler-instruction) (jZ308e core-prim . make-instruction) (jZ308d core-prim . set-source-info!) (jZ308c core-prim . bignum?) (jZ308b core-prim . fast-equal?) (jZ308a core-prim . fasl-read) (jZ3089 core-prim . fasl-write) (jZ3088 core-prim . time-usage) (jZ3087 core-prim . os-constant) (jZ3086 core-prim . disasm) (jZ5a5 core-prim . make-parameter) (jZ3085 core-prim . socket-port) (jZ3084 core-prim . socket-shutdown) (jZ3083 core-prim . socket-close) (jZ3082 core-prim . socket-send) (jZ3081 core-prim . socket-recv!) (jZ3080 core-prim . socket-recv) (jZ307f core-prim . make-server-socket) (jZ307e core-prim . make-client-socket) (jZ307d core-prim . socket-accept) (jZ307c core-prim . socket?) (jZ307b core-prim . string-upcase) (jZ307a core-prim . string-titlecase) (jZ3079 core-prim . string-normalize-nfkd) (jZ3078 core-prim . string-normalize-nfkc) (jZ3077 core-prim . string-normalize-nfd) (jZ3076 core-prim . string-normalize-nfc) (jZ3075 core-prim . string-foldcase) (jZ3074 core-prim . string-downcase) (jZ3073 core-prim . string-ci>?) (jZ3072 core-prim . string-ci>=?) (jZ3071 core-prim . string-ci=?) (jZ3070 core-prim . string-ci<?) (jZ306f core-prim . string-ci<=?) (jZ306e core-prim . char-whitespace?) (jZ306d core-prim . char-upper-case?) (jZ306c core-prim . char-title-case?) (jZ306b core-prim . char-numeric?) (jZ306a core-prim . char-lower-case?) (jZ3069 core-prim . char-general-category) (jZ3068 core-prim . char-upcase) (jZ3067 core-prim . char-titlecase) (jZ3066 core-prim . char-foldcase) (jZ3065 core-prim . char-downcase) (jZ3064 core-prim . char-ci>?) (jZ3063 core-prim . char-ci>=?) (jZ3062 core-prim . char-ci=?) (jZ3061 core-prim . char-ci<?) (jZ3060 core-prim . char-ci<=?) (jZ305f core-prim . char-alphabetic?) (jZbb4 core-prim . make-variable-transformer) (jZe6b core-prim . identifier?) (jZe57 core-prim . generate-temporaries) (jZe59 core-prim . free-identifier=?) (jZe6f core-prim . syntax->datum) (jZe6d core-prim . datum->syntax) (jZe5b core-prim . bound-identifier=?) (jZ305e core-prim . record-type-descriptor?) (jZ305d core-prim . record-predicate) (jZ305c core-prim . record-mutator) (jZ305b core-prim . record-constructor) (jZ305a core-prim . record-accessor) (jZ3059 core-prim . make-record-type-descriptor) (jZ3058 core-prim . make-record-constructor-descriptor) (jZ3057 core-prim . record?) (jZ3056 core-prim . record-type-uid) (jZ3055 core-prim . record-type-sealed?) (jZ3054 core-prim . record-type-parent) (jZ3053 core-prim . record-type-opaque?) (jZ3052 core-prim . record-type-name) (jZ3051 core-prim . record-type-generative?) (jZ3050 core-prim . record-type-field-names) (jZ304f core-prim . record-rtd) (jZ304e core-prim . record-field-mutable?) (jZ304d core-prim . delete-file) (jZ304c core-prim . file-exists?) (jZ304b core-prim . vector-sort!) (jZ304a core-prim . vector-sort) (jZ3049 core-prim . list-sort) (jZ3048 core-prim . symbol-hash) (jZ3047 core-prim . string-ci-hash) (jZ3046 core-prim . string-hash) (jZ3045 core-prim . equal-hash) (jZ3044 core-prim . hashtable-equivalence-function) (jZ3043 core-prim . make-hashtable) (jZ3042 core-prim . hashtable-hash-function) (jZ3041 core-prim . make-eqv-hashtable) (jZ3040 core-prim . make-eq-hashtable) (jZ303f core-prim . hashtable?) (jZ303e core-prim . hashtable-update!) (jZ303d core-prim . hashtable-size) (jZ303c core-prim . hashtable-set!) (jZ303b core-prim . hashtable-ref) (jZ303a core-prim . hashtable-mutable?) (jZ3039 core-prim . hashtable-keys) (jZ3038 core-prim . hashtable-entries) (jZ3037 core-prim . hashtable-delete!) (jZ3036 core-prim . hashtable-copy) (jZ3035 core-prim . hashtable-contains?) (jZ3034 core-prim . hashtable-clear!) (jZ3033 core-prim . call-with-output-file) (jZ3032 core-prim . call-with-input-file) (jZ3031 core-prim . write-char) (jZ3030 core-prim . write) (jZ302f core-prim . with-output-to-file) (jZ302e core-prim . with-input-from-file) (jZ302d core-prim . read-char) (jZ302c core-prim . read) (jZ302b core-prim . peek-char) (jZ302a core-prim . open-output-file) (jZ3029 core-prim . open-input-file) (jZ3028 core-prim . newline) (jZ3027 core-prim . display) (jZ3026 core-prim . close-output-port) (jZ3025 core-prim . close-input-port) (jZ3024 core-prim . eof-object?) (jZ3023 core-prim . eof-object) (jZ3022 core-prim . current-error-port) (jZ3021 core-prim . current-output-port) (jZ3020 core-prim . current-input-port) (jZ301f core-prim . output-port?) (jZ301e core-prim . input-port?) (jZ301d core-prim . utf-8-codec) (jZ301c core-prim . utf-16-codec) (jZ301b core-prim . transcoder-error-handling-mode) (jZ301a core-prim . transcoder-eol-style) (jZ3019 core-prim . transcoder-codec) (jZ3018 core-prim . transcoded-port) (jZ3017 core-prim . textual-port?) (jZ3016 core-prim . string->bytevector) (jZ3015 core-prim . standard-output-port) (jZ3014 core-prim . standard-input-port) (jZ3013 core-prim . standard-error-port) (jZ3012 core-prim . set-port-position!) (jZ3011 core-prim . put-u8) (jZ3010 core-prim . put-string) (jZ300f core-prim . put-datum) (jZ300e core-prim . put-char) (jZ300d core-prim . put-bytevector) (jZ300c core-prim . port?) (jZ300b core-prim . port-transcoder) (jZ300a core-prim . port-position) (jZ3009 core-prim . port-has-set-port-position!?) (jZ3008 core-prim . port-has-port-position?) (jZ3007 core-prim . port-eof?) (jZ3006 core-prim . output-port-buffer-mode) (jZ3005 core-prim . open-string-output-port) (jZ3004 core-prim . open-string-input-port) (jZ3003 core-prim . open-file-output-port) (jZ3002 core-prim . open-file-input/output-port) (jZ3001 core-prim . open-file-input-port) (jZ3000 core-prim . open-bytevector-output-port) (jZ2fff core-prim . open-bytevector-input-port) (jZ2ffe core-prim . native-transcoder) (jZ2ffd core-prim . native-eol-style) (jZ2ffc core-prim . make-transcoder) (jZ2ffb core-prim . latin-1-codec) (jZ2a93 core-prim . make-i/o-write-error) (jZ2a7e core-prim . make-i/o-read-error) (jZ2b34 core-prim . make-i/o-port-error) (jZ2aaa core-prim . make-i/o-invalid-position-error) (jZ2ac5 core-prim . make-i/o-filename-error) (jZ2ade core-prim . make-i/o-file-protection-error) (jZ2af3 core-prim . make-i/o-file-is-read-only-error) (jZ2b1d core-prim . make-i/o-file-does-not-exist-error) (jZ2b08 core-prim . make-i/o-file-already-exists-error) (jZ2a69 core-prim . make-i/o-error) (jZ2b64 core-prim . make-i/o-encoding-error) (jZ2b4d core-prim . make-i/o-decoding-error) (jZ2ffa core-prim . make-custom-textual-output-port) (jZ2ff9 core-prim . make-custom-textual-input/output-port) (jZ2ff8 core-prim . make-custom-textual-input-port) (jZ2ff7 core-prim . make-custom-binary-output-port) (jZ2ff6 core-prim . make-custom-binary-input/output-port) (jZ2ff5 core-prim . make-custom-binary-input-port) (jZ2ff4 core-prim . make-bytevector) (jZ2ff3 core-prim . lookahead-u8) (jZ2ff2 core-prim . lookahead-char) (jZ2a95 core-prim . i/o-write-error?) (jZ2a80 core-prim . i/o-read-error?) (jZ2b38 core-prim . i/o-port-error?) (jZ2aae core-prim . i/o-invalid-position-error?) (jZ2ac9 core-prim . i/o-filename-error?) (jZ2ae0 core-prim . i/o-file-protection-error?) (jZ2af5 core-prim . i/o-file-is-read-only-error?) (jZ2b1f core-prim . i/o-file-does-not-exist-error?) (jZ2b0a core-prim . i/o-file-already-exists-error?) (jZ2a6b core-prim . i/o-error?) (jZ2ab0 core-prim . i/o-error-position) (jZ2b3a core-prim . i/o-error-port) (jZ2acb core-prim . i/o-error-filename) (jZ2b68 core-prim . i/o-encoding-error?) (jZ2b6a core-prim . i/o-encoding-error-char) (jZ2b4f core-prim . i/o-decoding-error?) (jZ2ff1 core-prim . get-u8) (jZ2ff0 core-prim . get-string-n!) (jZ2fef core-prim . get-string-n) (jZ2fee core-prim . get-string-all) (jZ2fed core-prim . get-line) (jZ2fec core-prim . get-datum) (jZ2feb core-prim . get-char) (jZ2fea core-prim . get-bytevector-some) (jZ2fe9 core-prim . get-bytevector-n!) (jZ2fe8 core-prim . get-bytevector-n) (jZ2fe7 core-prim . get-bytevector-all) (jZ2fe6 core-prim . flush-output-port) (jZ2fe5 core-prim . close-port) (jZe45 core-prim . scheme-report-environment) (jZ2fe4 core-prim . quotient) (jZe43 core-prim . null-environment) (jZ2fe3 core-prim . remainder) (jZ2fe2 core-prim . modulo) (jZ2fe1 core-prim . inexact->exact) (jZ2fe0 core-prim . force) (jZ2fdf core-prim . exact->inexact) (jZ2fde core-prim . make-promise) (jZ2fdd core-prim . exit) (jZ2ca1 core-prim . command-line) (jZ2fdc core-prim . string-fill!) (jZ2fdb core-prim . string-set!) (jZ2fda core-prim . set-cdr!) (jZ2fd9 core-prim . set-car!) (jZ2fd8 core-prim . remove) (jZ2fd7 core-prim . remv) (jZ2fd6 core-prim . remp) (jZ2fd5 core-prim . remq) (jZ2fd4 core-prim . partition) (jZ2fd3 core-prim . memv) (jZ2fd2 core-prim . memq) (jZ2fd1 core-prim . memp) (jZ2fd0 core-prim . member) (jZ2fcf core-prim . exists) (jZ2fce core-prim . for-all) (jZ2fcd core-prim . fold-right) (jZ2fcc core-prim . fold-left) (jZ2fcb core-prim . find) (jZ2fca core-prim . filter) (jZ2fc9 core-prim . cons*) (jZ2fc8 core-prim . assv) (jZ2fc7 core-prim . assq) (jZ2fc6 core-prim . assp) (jZ2fc5 core-prim . assoc) (jZ2fc4 core-prim . call-with-string-output-port) (jZ2fc3 core-prim . call-with-port) (jZ2fc2 core-prim . call-with-bytevector-output-port) (jZ2fc1 core-prim . bytevector->string) (jZ2fc0 core-prim . buffer-mode?) (jZ2fbf core-prim . binary-port?) (jZ2fbe core-prim . with-exception-handler) (jZ2fbd core-prim . raise-continuable) (jZ2fbc core-prim . raise) (jZe49 core-prim . eval) (jZe41 core-prim . environment) (jZ2fbb core-prim . make-enumeration) (jZ2fba core-prim . enum-set=?) (jZ2fb9 core-prim . enum-set-universe) (jZ2fb8 core-prim . enum-set-union) (jZ2fb7 core-prim . enum-set-subset?) (jZ2fb6 core-prim . enum-set-projection) (jZ2fb5 core-prim . enum-set-member?) (jZ2fb4 core-prim . enum-set-intersection) (jZ2fb3 core-prim . enum-set-indexer) (jZ2fb2 core-prim . enum-set-difference) (jZ2fb1 core-prim . enum-set-constructor) (jZ2fb0 core-prim . enum-set-complement) (jZ2faf core-prim . enum-set->list) (jZ29df core-prim . who-condition?) (jZ2957 core-prim . warning?) (jZ2996 core-prim . violation?) (jZ2a56 core-prim . undefined-violation?) (jZ2a3d core-prim . syntax-violation?) (jZ2a41 core-prim . syntax-violation-subform) (jZ2a3f core-prim . syntax-violation-form) (jZe69 core-prim . syntax-violation) (jZ2fae core-prim . simple-conditions) (jZ296c core-prim . serious-condition?) (jZ29f6 core-prim . non-continuable-violation?) (jZ2940 core-prim . message-condition?) (jZ29db core-prim . make-who-condition) (jZ2955 core-prim . make-warning) (jZ2994 core-prim . make-violation) (jZ2a54 core-prim . make-undefined-violation) (jZ2a37 core-prim . make-syntax-violation) (jZ296a core-prim . make-serious-condition) (jZ29f4 core-prim . make-non-continuable-violation) (jZ293c core-prim . make-message-condition) (jZ2a1e core-prim . make-lexical-violation) (jZ29c0 core-prim . make-irritants-condition) (jZ2a09 core-prim . make-implementation-restriction-violation) (jZ297f core-prim . make-error) (jZ29a9 core-prim . make-assertion-violation) (jZ2a20 core-prim . lexical-violation?) (jZ29c4 core-prim . irritants-condition?) (jZ2a0b core-prim . implementation-restriction-violation?) (jZ2981 core-prim . error?) (jZ29e1 core-prim . condition-who) (jZ2fad core-prim . condition-predicate) (jZ2942 core-prim . condition-message) (jZ29c6 core-prim . condition-irritants) (jZ2fac core-prim . condition-accessor) (jZ2fab core-prim . condition) (jZ29ab core-prim . assertion-violation?) (jZ2faa core-prim . condition?) (jZ2fa9 core-prim . utf32->string) (jZ2fa8 core-prim . utf16->string) (jZ2fa7 core-prim . utf8->string) (jZ2fa6 core-prim . uint-list->bytevector) (jZ2fa5 core-prim . u8-list->bytevector) (jZ2fa4 core-prim . string->utf8) (jZ2fa3 core-prim . string->utf32) (jZ2fa2 core-prim . string->utf16) (jZ2fa1 core-prim . sint-list->bytevector) (jZ2fa0 core-prim . native-endianness) (jZ2f9f core-prim . bytevector?) (jZ2f9e core-prim . bytevector=?) (jZ2f9d core-prim . bytevector-uint-set!) (jZ2f9c core-prim . bytevector-uint-ref) (jZ2f9b core-prim . bytevector-u8-set!) (jZ2f9a core-prim . bytevector-u8-ref) (jZ2f99 core-prim . bytevector-u64-set!) (jZ2f98 core-prim . bytevector-u64-ref) (jZ2f97 core-prim . bytevector-u64-native-set!) (jZ2f96 core-prim . bytevector-u64-native-ref) (jZ2f95 core-prim . bytevector-u32-set!) (jZ2f94 core-prim . bytevector-u32-ref) (jZ2f93 core-prim . bytevector-u32-native-set!) (jZ2f92 core-prim . bytevector-u32-native-ref) (jZ2f91 core-prim . bytevector-u16-set!) (jZ2f90 core-prim . bytevector-u16-ref) (jZ2f8f core-prim . bytevector-u16-native-set!) (jZ2f8e core-prim . bytevector-u16-native-ref) (jZ2f8d core-prim . bytevector-sint-set!) (jZ2f8c core-prim . bytevector-sint-ref) (jZ2f8b core-prim . bytevector-s8-set!) (jZ2f8a core-prim . bytevector-s8-ref) (jZ2f89 core-prim . bytevector-s64-set!) (jZ2f88 core-prim . bytevector-s64-ref) (jZ2f87 core-prim . bytevector-s64-native-set!) (jZ2f86 core-prim . bytevector-s64-native-ref) (jZ2f85 core-prim . bytevector-s32-set!) (jZ2f84 core-prim . bytevector-s32-ref) (jZ2f83 core-prim . bytevector-s32-native-set!) (jZ2f82 core-prim . bytevector-s32-native-ref) (jZ2f81 core-prim . bytevector-s16-set!) (jZ2f80 core-prim . bytevector-s16-ref) (jZ2f7f core-prim . bytevector-s16-native-set!) (jZ2f7e core-prim . bytevector-s16-native-ref) (jZ2f7d core-prim . bytevector-length) (jZ2f7c core-prim . bytevector-ieee-single-ref) (jZ2f7b core-prim . bytevector-ieee-single-set!) (jZ2f7a core-prim . bytevector-ieee-single-native-set!) (jZ2f79 core-prim . bytevector-ieee-single-native-ref) (jZ2f78 core-prim . bytevector-ieee-double-set!) (jZ2f77 core-prim . bytevector-ieee-double-ref) (jZ2f76 core-prim . bytevector-ieee-double-native-set!) (jZ2f75 core-prim . bytevector-ieee-double-native-ref) (jZ2f74 core-prim . bytevector-fill!) (jZ2f73 core-prim . bytevector-copy!) (jZ2f72 core-prim . bytevector-copy) (jZ2f71 core-prim . bytevector->uint-list) (jZ2f70 core-prim . bytevector->u8-list) (jZ2f6f core-prim . bytevector->sint-list) (jZ2b94 core-prim . no-nans-violation?) (jZ2b7f core-prim . no-infinities-violation?) (jZ2b92 core-prim . make-no-nans-violation) (jZ2b7d core-prim . make-no-infinities-violation) (jZ2f6e core-prim . real->flonum) (jZ2f6d core-prim . flzero?) (jZ2f6c core-prim . fltruncate) (jZ2f6b core-prim . fltan) (jZ2f6a core-prim . flsqrt) (jZ2f69 core-prim . flsin) (jZ2f68 core-prim . flround) (jZ2f67 core-prim . flpositive?) (jZ2f66 core-prim . flonum?) (jZ2f65 core-prim . flodd?) (jZ2f64 core-prim . flnumerator) (jZ2f63 core-prim . flnegative?) (jZ2f62 core-prim . flnan?) (jZ2f61 core-prim . flmod0) (jZ2f60 core-prim . flmod) (jZ2f5f core-prim . flmin) (jZ2f5e core-prim . flmax) (jZ2f5d core-prim . fllog) (jZ2f5c core-prim . flinteger?) (jZ2f5b core-prim . flinfinite?) (jZ2f5a core-prim . flfloor) (jZ2f59 core-prim . flfinite?) (jZ2f58 core-prim . flexpt) (jZ2f57 core-prim . flexp) (jZ2f56 core-prim . fleven?) (jZ2f55 core-prim . fldiv0-and-mod0) (jZ2f54 core-prim . fldiv0) (jZ2f53 core-prim . fldiv-and-mod) (jZ2f52 core-prim . fldiv) (jZ2f51 core-prim . fldenominator) (jZ2f50 core-prim . flcos) (jZ2f4f core-prim . flceiling) (jZ2f4e core-prim . flatan) (jZ2f4d core-prim . flasin) (jZ2f4c core-prim . flacos) (jZ2f4b core-prim . flabs) (jZ2f4a core-prim . fl>?) (jZ2f49 core-prim . fl>=?) (jZ2f48 core-prim . fl=?) (jZ2f47 core-prim . fl<?) (jZ2f46 core-prim . fl<=?) (jZ2f45 core-prim . fl/) (jZ2f44 core-prim . fl-) (jZ2f43 core-prim . fl+) (jZ2f42 core-prim . fl*) (jZ2f41 core-prim . fixnum->flonum) (jZ2f40 core-prim . fxzero?) (jZ2f3f core-prim . fxxor) (jZ2f3e core-prim . fxrotate-bit-field) (jZ2f3d core-prim . fxreverse-bit-field) (jZ2f3c core-prim . fxpositive?) (jZ2f3b core-prim . fxodd?) (jZ2f3a core-prim . fxnot) (jZ2f39 core-prim . fxnegative?) (jZ2f38 core-prim . fxmod0) (jZ2f37 core-prim . fxmod) (jZ2f36 core-prim . fxmin) (jZ2f35 core-prim . fxmax) (jZ2f34 core-prim . fxlength) (jZ2f33 core-prim . fxior) (jZ2f32 core-prim . fxif) (jZ2f31 core-prim . fxfirst-bit-set) (jZ2f30 core-prim . fxeven?) (jZ2f2f core-prim . fxdiv0-and-mod0) (jZ2f2e core-prim . fxdiv0) (jZ2f2d core-prim . fxdiv-and-mod) (jZ2f2c core-prim . fxdiv) (jZ2f2b core-prim . fxcopy-bit-field) (jZ2f2a core-prim . fxcopy-bit) (jZ2f29 core-prim . fxbit-set?) (jZ2f28 core-prim . fxbit-field) (jZ2f27 core-prim . fxbit-count) (jZ2f26 core-prim . fxarithmetic-shift-right) (jZ2f25 core-prim . fxarithmetic-shift-left) (jZ2f24 core-prim . fxarithmetic-shift) (jZ2f23 core-prim . fxand) (jZ2f22 core-prim . fx>?) (jZ2f21 core-prim . fx>=?) (jZ2f20 core-prim . fx=?) (jZ2f1f core-prim . fx<?) (jZ2f1e core-prim . fx<=?) (jZ2f1d core-prim . fx-/carry) (jZ2f1c core-prim . fx-) (jZ2f1b core-prim . fx+/carry) (jZ2f1a core-prim . fx+) (jZ2f19 core-prim . fx*/carry) (jZ2f18 core-prim . fx*) (jZ2f17 core-prim . greatest-fixnum) (jZ2f16 core-prim . least-fixnum) (jZ2f15 core-prim . fixnum-width) (jZ2f14 core-prim . fixnum?) (jZ2f13 core-prim . bitwise-rotate-bit-field) (jZ2f12 core-prim . bitwise-reverse-bit-field) (jZ2f11 core-prim . bitwise-length) (jZ2f10 core-prim . bitwise-if) (jZ2f0f core-prim . bitwise-first-bit-set) (jZ2f0e core-prim . bitwise-copy-bit-field) (jZ2f0d core-prim . bitwise-copy-bit) (jZ2f0c core-prim . bitwise-bit-set?) (jZ2f0b core-prim . bitwise-bit-field) (jZ2f0a core-prim . bitwise-bit-count) (jZ2f09 core-prim . bitwise-xor) (jZ2f08 core-prim . bitwise-ior) (jZ2f07 core-prim . bitwise-and) (jZ2f06 core-prim . bitwise-not) (jZ2f05 core-prim . bitwise-arithmetic-shift-right) (jZ2f04 core-prim . bitwise-arithmetic-shift-left) (jZ2f03 core-prim . bitwise-arithmetic-shift) (jZ2f02 core-prim . zero?) (jZ2f01 core-prim . vector?) (jZ2f00 core-prim . vector-set!) (jZ2eff core-prim . vector-ref) (jZ2efe core-prim . vector-map) (jZ2efd core-prim . vector-length) (jZ2efc core-prim . vector-for-each) (jZ2efb core-prim . vector-fill!) (jZ2efa core-prim . vector->list) (jZ2ef9 core-prim . vector) (jZ2ef8 core-prim . values) (jZ2ef7 core-prim . truncate) (jZ2ef6 core-prim . tan) (jZ2ef5 core-prim . symbol?) (jZ2ef4 core-prim . symbol=?) (jZ2ef3 core-prim . symbol->string) (jZ2ef2 core-prim . substring) (jZ2ef1 core-prim . string?) (jZ2ef0 core-prim . string>?) (jZ2eef core-prim . string>=?) (jZ2eee core-prim . string=?) (jZ2eed core-prim . string<?) (jZ2eec core-prim . string<=?) (jZ2eeb core-prim . string-ref) (jZ2eea core-prim . string-length) (jZ2ee9 core-prim . string-for-each) (jZ2ee8 core-prim . string-copy) (jZ2ee7 core-prim . string-append) (jZ2ee6 core-prim . string->symbol) (jZ2ee5 core-prim . string->number) (jZ2ee4 core-prim . string->list) (jZ2ee3 core-prim . string) (jZ2ee2 core-prim . sqrt) (jZ2ee1 core-prim . sin) (jZ2ee0 core-prim . round) (jZ2edf core-prim . reverse) (jZ2ede core-prim . real?) (jZ2edd core-prim . real-valued?) (jZ2edc core-prim . real-part) (jZ2edb core-prim . rationalize) (jZ2eda core-prim . rational?) (jZ2ed9 core-prim . rational-valued?) (jZ2ed8 core-prim . procedure?) (jZ2ed7 core-prim . positive?) (jZ2ed6 core-prim . pair?) (jZ2ed5 core-prim . odd?) (jZ2ed4 core-prim . numerator) (jZ2ed3 core-prim . number?) (jZ2ed2 core-prim . number->string) (jZ2ed1 core-prim . null?) (jZ2ed0 core-prim . not) (jZ2ecf core-prim . negative?) (jZ2ece core-prim . nan?) (jZ2ecd core-prim . min) (jZ2ecc core-prim . max) (jZ2ecb core-prim . map) (jZ2eca core-prim . make-vector) (jZ2ec9 core-prim . make-string) (jZ2ec8 core-prim . make-rectangular) (jZ2ec7 core-prim . make-polar) (jZ2ec6 core-prim . magnitude) (jZ2ec5 core-prim . log) (jZ2ec4 core-prim . list?) (jZ2ec3 core-prim . list-tail) (jZ2ec2 core-prim . list-ref) (jZ2ec1 core-prim . list->vector) (jZ2ec0 core-prim . list->string) (jZ2ebf core-prim . list) (jZ2ebe core-prim . length) (jZ2ebd core-prim . lcm) (jZ2ebc core-prim . integer?) (jZ2ebb core-prim . integer-valued?) (jZ2eba core-prim . integer->char) (jZ2eb9 core-prim . infinite?) (jZ2eb8 core-prim . inexact?) (jZ2eb7 core-prim . inexact) (jZ2eb6 core-prim . imag-part) (jZ2eb5 core-prim . gcd) (jZ2eb4 core-prim . for-each) (jZ2eb3 core-prim . floor) (jZ2eb2 core-prim . finite?) (jZ2eb1 core-prim . expt) (jZ2eb0 core-prim . exp) (jZ2eaf core-prim . exact?) (jZ2eae core-prim . exact-integer-sqrt) (jZ2ead core-prim . exact) (jZ2eac core-prim . even?) (jZ2eab core-prim . error) (jZ2eaa core-prim . eqv?) (jZ2ea9 core-prim . equal?) (jZ2ea8 core-prim . eq?) (jZ2ea7 core-prim . dynamic-wind) (jZ2ea6 core-prim . div0-and-mod0) (jZ2ea5 core-prim . mod0) (jZ2ea4 core-prim . div0) (jZ2ea3 core-prim . div-and-mod) (jZ2ea2 core-prim . mod) (jZ2ea1 core-prim . div) (jZ2ea0 core-prim . denominator) (jZ2e9f core-prim . cos) (jZ2e9e core-prim . cons) (jZ2e9d core-prim . complex?) (jZ2e9c core-prim . char?) (jZ2e9b core-prim . char>?) (jZ2e9a core-prim . char>=?) (jZ2e99 core-prim . char=?) (jZ2e98 core-prim . char<?) (jZ2e97 core-prim . char<=?) (jZ2e96 core-prim . char->integer) (jZ2e95 core-prim . ceiling) (jZ2e94 core-prim . call-with-values) (jZ2e93 core-prim . call/cc) (jZ2e92 core-prim . call-with-current-continuation) (jZ2e91 core-prim . cddddr) (jZ2e90 core-prim . cdddar) (jZ2e8f core-prim . cddadr) (jZ2e8e core-prim . cddaar) (jZ2e8d core-prim . cdaddr) (jZ2e8c core-prim . cdadar) (jZ2e8b core-prim . cdaadr) (jZ2e8a core-prim . cdaaar) (jZ2e89 core-prim . cadddr) (jZ2e88 core-prim . caddar) (jZ2e87 core-prim . cadadr) (jZ2e86 core-prim . cadaar) (jZ2e85 core-prim . caaddr) (jZ2e84 core-prim . caadar) (jZ2e83 core-prim . caaadr) (jZ2e82 core-prim . caaaar) (jZ2e81 core-prim . cdddr) (jZ2e80 core-prim . cddar) (jZ2e7f core-prim . cdadr) (jZ2e7e core-prim . cdaar) (jZ2e7d core-prim . caddr) (jZ2e7c core-prim . cadar) (jZ2e7b core-prim . caadr) (jZ2e7a core-prim . caaar) (jZ2e79 core-prim . cddr) (jZ2e78 core-prim . cdar) (jZ2e77 core-prim . cadr) (jZ2e76 core-prim . caar) (jZ2e75 core-prim . cdr) (jZ2e74 core-prim . car) (jZ2e73 core-prim . boolean?) (jZ2e72 core-prim . boolean=?) (jZ2e71 core-prim . atan) (jZ2e70 core-prim . assertion-violation) (jZe63 core-prim . assertion-error) (jZ2e6f core-prim . asin) (jZ2e6e core-prim . apply) (jZ2e6d core-prim . append) (jZ2e6c core-prim . angle) (jZ2e6b core-prim . acos) (jZ2e6a core-prim . abs) (jZ2e69 core-prim . /) (jZ2e68 core-prim . *) (jZ2e67 core-prim . -) (jZ2e66 core-prim . +) (jZ2e65 core-prim . >=) (jZ2e64 core-prim . >) (jZ2e63 core-prim . =) (jZ2e62 core-prim . <=) (jZ2e61 core-prim . <) (jZ2e60 core-prim . library) (jZ2e5f $core-rtd &no-nans-rtd &no-nans-rcd) (jZ2e5e $core-rtd &no-infinities-rtd &no-infinities-rcd) (jZ2e5d $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (jZ2e5c $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (jZ2e5b $core-rtd &i/o-port-rtd &i/o-port-rcd) (jZ2e5a $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (jZ2e59 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (jZ2e58 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (jZ2e57 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (jZ2e56 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (jZ2e55 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (jZ2e54 $core-rtd &i/o-write-rtd &i/o-write-rcd) (jZ2e53 $core-rtd &i/o-read-rtd &i/o-read-rcd) (jZ2e52 $core-rtd &i/o-rtd &i/o-rcd) (jZ2e51 $core-rtd &undefined-rtd &undefined-rcd) (jZ2e50 $core-rtd &syntax-rtd &syntax-rcd) (jZ2e4f $core-rtd &lexical-rtd &lexical-rcd) (jZ2e4e $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (jZ2e4d $core-rtd &non-continuable-rtd &non-continuable-rcd) (jZ2e4c $core-rtd &who-rtd &who-rcd) (jZ2e4b $core-rtd &irritants-rtd &irritants-rcd) (jZ2e4a $core-rtd &assertion-rtd &assertion-rcd) (jZ2e49 $core-rtd &violation-rtd &violation-rcd) (jZ2e48 $core-rtd &error-rtd &error-rcd) (jZ2e47 $core-rtd &serious-rtd &serious-rcd) (jZ2e46 $core-rtd &warning-rtd &warning-rcd) (jZ2e45 $core-rtd &message-rtd &message-rcd) (jZ2e44 $core-rtd &condition-rtd &condition-rcd) (jZ2e43 macro . define-condition-type) (jZ2e42 macro . define-enumeration) (jZ2e41 macro . define-record-type) (jZ2e40 macro . parent-rtd) (jZ2e3f macro . nongenerative) (jZ2e3e macro . opaque) (jZ2e3d macro . sealed) (jZ2e3c macro . protocol) (jZ2e3b macro . parent) (jZ2e3a macro . immutable) (jZ2e39 macro . mutable) (jZ2e38 macro . fields) (jZ2e37 macro . error-handling-mode) (jZ2e36 macro . file-options) (jZ2e35 macro . buffer-mode) (jZ2e34 macro . eol-style) (jZ2e33 macro . guard) (jZ2e32 macro . trace-define) (jZ2e31 macro . trace-lambda) (jZ2e30 macro . unsyntax-splicing) (jZ2e2f macro . unsyntax) (jZ2e2e macro . unquote-splicing) (jZ2e2d macro . unquote) (jZ2e2c macro . _) (jZ2e2b macro . else) (jZ2e2a macro . =>) (jZ2e29 macro . ...) (jZ2e28 macro . assert) (jZ2e27 macro . endianness) (jZ2e26 macro . delay) (jZ2e25 macro . time) (jZ2e24 macro . do) (jZ2e23 macro . cond) (jZ2e22 macro . let*) (jZ2e21 macro . let*-values) (jZ2e20 macro . let-values) (jZ2e1f macro . identifier-syntax) (jZ2e1e macro . with-syntax) (jZ2e1d macro . quasisyntax) (jZ2e1c macro . quasiquote) (jZ2e1b macro . syntax-rules) (jZ2e1a macro . include) (jZ2e19 macro . define-struct) (jZ2e18 core-macro . record-constructor-descriptor) (jZ2e17 core-macro . record-type-descriptor) (jZ2e16 macro . case) (jZ2e15 macro . parameterize) (jZ2e14 macro . unless) (jZ2e13 macro . when) (jZ2e12 core-macro . or) (jZ2e11 core-macro . and) (jZ2e10 core-macro . if) (jZ2e0f core-macro . let) (jZ2e0e core-macro . letrec*) (jZ2e0d core-macro . letrec) (jZ2e0c core-macro . type-descriptor) (jZ2e0b core-macro . case-lambda) (jZ2e0a core-macro . lambda) (jZ2e09 core-macro . syntax) (jZ2e08 core-macro . syntax-case) (jZ2e07 core-macro . quote) (jZ2e06 core-macro . foreign-call) (jZ2e05 letrec-syntax) (jZ2e04 let-syntax) (jZ2e03 set!) (jZ2e02 import) (jZ2e01 begin) (jZ2e00 module) (jZ2dff define-syntax) (jZ2dfe define)) values values '#f '#f '#f '#f) (jZ996@jZ7de@install-library 'jZ314e '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . jZ312d) (eval-core . jZ312c) (set-symbol-value! . jZ312b) (symbol-value . jZ312a) (gensym . jZ3129) (void . jZ3128)) '() values values '#f '#f '#f '#f) (jZ996@jZ7de@install-library 'jZ314f '(mosh) '() '() '() '() '((set-symbol-value! . jZ312b) (symbol-value . jZ312a) (gensym . jZ3129) (regexp? . jZ3126) (read-line . jZ3125) (ungensym . jZ3123) (alist->eq-hash-table . jZ3122) (assoc-ref . jZ3121) (print . jZ3120) (format . jZ311f) (host-os . jZ311e) (library-path . jZ7bd) (standard-library-path . jZ311d) (file-newer? . jZ311c) (stat-mtime . jZ311b) (digit->integer . jZ3116) (call-with-string-input-port . jZ3115) (call-with-string-io . jZ3114) (string-split . jZ3113) (bytevector-for-each . jZ3112) (string->regexp . jZ3111) (rxmatch . jZ3110) (regexp-replace-all . jZ310f) (hashtable-for-each . jZ310e) (set-current-directory! . jZ3109) (expand-path . jZ3108) (current-directory . jZ3107) (p . jZ30c6) (get-timeofday . jZ30ad) (get-command-line . jZ30ac) (sys-display . jZ30ab) (whereis . jZ30aa) (register . jZ30a9) (vm-join! . jZ30a8) (vm-set-value! . jZ30a7) (vm? . jZ30a6) (main-vm? . jZ30a5) (vm-eval . jZ30a4) (vm-self . jZ30a3) (vm-start! . jZ30a2) (make-vm . jZ30a1) (mutex-try-lock! . jZ30a0) (mutex-unlock! . jZ309f) (mutex-lock! . jZ309e) (mutex? . jZ309d) (make-mutex . jZ309c) (condition-variable-notify-all! . jZ309b) (condition-variable-notify! . jZ309a) (condition-variable-wait! . jZ3099) (make-condition-variable . jZ3098) (mosh-executable-path . jZ3097) (make-file-options . jZ3096) (for-each-with-index . jZ3095) (source-info . jZ3094) (make-compiler-instruction . jZ308f) (make-instruction . jZ308e) (set-source-info! . jZ308d) (bignum? . jZ308c) (fast-equal? . jZ308b) (fasl-read . jZ308a) (fasl-write . jZ3089) (time-usage . jZ3088) (os-constant . jZ3087) (time . jZ2e25) (include . jZ2e1a)) '() values values '#f '#f '#f '#f) (jZ996@jZ7de@install-library 'jZ3150 '(system) '() '() '() '() '((gensym-prefix-set! . jZ3124) (write-to-file . jZ311a) (file->sexp-list . jZ3119) (file->list . jZ3118) (file->string . jZ3117) (mosh-cache-dir . jZ5a7) (call-process . jZ310d) (local-tz-offset . jZ310c) (microseconds . jZ310b) (directory-list . jZ310a) (expand-path . jZ3108) (%spawn . jZ3106) (%waitpid . jZ3105) (simple-struct-name . jZ3104) (simple-struct-set! . jZ3103) (simple-struct-ref . jZ3102) (make-simple-struct . jZ3101) (simple-struct? . jZ3100) (pointer-ref-c-int64 . jZ30ff) (pointer-ref-c-int32 . jZ30fe) (pointer-ref-c-int16 . jZ30fd) (pointer-ref-c-int8 . jZ30fc) (pointer-ref-c-uint64 . jZ30fb) (pointer-ref-c-uint32 . jZ30fa) (pointer-ref-c-uint16 . jZ30f9) (pointer-ref-c-uint8 . jZ30f8) (pointer-set-c-uint64! . jZ30f7) (pointer-set-c-uint32! . jZ30f6) (pointer-set-c-uint16! . jZ30f5) (pointer-set-c-uint8! . jZ30f4) (pointer-set-c-int64! . jZ30f3) (pointer-set-c-int32! . jZ30f2) (pointer-set-c-int16! . jZ30f1) (pointer-set-c-int8! . jZ30f0) (pointer-set-c-pointer! . jZ30ef) (pointer-set-c-double! . jZ30ee) (pointer-set-c-float! . jZ30ed) (pointer-set-c-long-long! . jZ30ec) (pointer-set-c-long! . jZ30eb) (pointer-set-c-int! . jZ30ea) (pointer-set-c-short! . jZ30e9) (pointer-set-c-char! . jZ30e8) (pointer-ref-c-pointer . jZ30e7) (pointer-ref-c-double . jZ30e6) (pointer-ref-c-float . jZ30e5) (pointer-ref-c-unsigned-long-long . jZ30e4) (pointer-ref-c-signed-long-long . jZ30e3) (pointer-ref-c-unsigned-long . jZ30e2) (pointer-ref-c-signed-long . jZ30e1) (pointer-ref-c-unsigned-int . jZ30e0) (pointer-ref-c-signed-int . jZ30df) (pointer-ref-c-unsigned-short . jZ30de) (pointer-ref-c-signed-short . jZ30dd) (pointer-ref-c-unsigned-char . jZ30dc) (pointer-ref-c-signed-char . jZ30db) (pointer->integer . jZ30da) (integer->pointer . jZ30d9) (pointer? . jZ30d8) (shared-errno . jZ30d7) (get-c-address . jZ30d6) (obj->integer . jZ30d5) (u8-list->c-procedure . jZ30d4) (%ffi-free-c-callback-trampoline . jZ30d3) (%ffi-make-c-callback-trampoline . jZ30d2) (%ffi-free . jZ30d1) (%ffi-malloc . jZ30d0) (%ffi-supported? . jZ30cf) (%ffi-pointer->string . jZ30ce) (%ffi-call . jZ30cd) (%ffi-lookup . jZ30cc) (%ffi-open . jZ30cb) (null-terminated-utf8->string . jZ30ca) (null-terminated-bytevector->string . jZ30c9) (%fork . jZ30c8) (%pipe . jZ30c7) (open-output-string . jZ30c5) (get-output-string . jZ30c4) (file-stat-ctime . jZ30c3) (file-stat-atime . jZ30c2) (file-stat-mtime . jZ30c1) (file-size-in-bytes . jZ30c0) (file-writable? . jZ30bf) (file-executable? . jZ30be) (file-readable? . jZ30bd) (file-regular? . jZ30bc) (file-symbolic-link? . jZ30bb) (file-directory? . jZ30ba) (create-symbolic-link . jZ30b9) (rename-file . jZ30b8) (delete-directory . jZ30b7) (create-directory . jZ30b6) (create-mosh-cache-dir . jZ30b5) (get-environment-variables . jZ30b4) (current-exception-handler . jZ30b3) (get-environment-variable . jZ30b2) (join-wraps . jZ30b1) (id->real-label . jZ30b0) (same-marks? . jZ30af) (same-marks*? . jZ30ae) (instruction? . jZ3093) (instruction->integer . jZ3092) (instruction->symbol . jZ3091) (closure->list . jZ3090) (disasm . jZ3086) (make-parameter . jZ5a5) (socket-port . jZ3085) (socket-shutdown . jZ3084) (socket-close . jZ3083) (socket-send . jZ3082) (socket-recv! . jZ3081) (socket-recv . jZ3080) (make-server-socket . jZ307f) (make-client-socket . jZ307e) (socket-accept . jZ307d) (socket? . jZ307c) (parameterize . jZ2e15)) '() values values '#f '#f '#f '#f)))
(begin (set! jZ2c8e@ref (unspecified)) (set! jZ2c90@x* (unspecified)) (set! jZ2c92@add-library-path! (unspecified)) (set! jZ2c94@parse-and-add-library-path (unspecified)) (set! jZ2c96@rpad (unspecified)) (set! jZ2c98@condition-printer (unspecified)) (set! jZ2c9a@record->field-alist (unspecified)) (set! jZ2c9c@map-with-index (unspecified)) (set! jZ2c9e@repl (unspecified)) (set! jZ2ca0@trace-printer (unspecified)) (set! jZ2ca2@command-line (unspecified)) (set! jZ2ca4@local-library-path (unspecified)) (set! jZ2ca6@load/args (unspecified)) (set! jZ2ca8@load (unspecified)) (set! jZ2caa@ironscheme-build (unspecified)) (set! jZ2cac@eval-top-level (unspecified)) (set! jZ2cae@compile-system-libraries (unspecified)) (set! jZ2cb0@compile (unspecified)) (set! jZ2cb2@compile->closure (unspecified)) (set! jZ2cb4@pre-compile-r6rs-file (unspecified)) (set! jZ2cb6@load-r6rs-top-level (unspecified)) (set! jZ2cb8@load-r6rs-top-level-sexp (unspecified)) (set! jZ2cba@prefix-inc (unspecified)) (set! jZ2cbc@prefix-inc! (unspecified)) (set! jZ2c8e@ref (lambda (jZ2cf7@rtd jZ2cf8@i jZ2cf9@x) (let ((jZ2cfd@val ((record-accessor jZ2cf7@rtd jZ2cf8@i) jZ2cf9@x))) (if (symbol? jZ2cfd@val) (ungensym jZ2cfd@val) jZ2cfd@val)))) (set! jZ2de5@jZ2c8e@ref jZ2c8e@ref) (set! jZ2c90@x* '()) (set! jZ2de6@jZ2c90@x* jZ2c90@x*) (set! jZ2c92@add-library-path! (lambda (jZ2cff@path) (jZ986@jZ7be@library-path (append (jZ986@jZ7be@library-path) (list jZ2cff@path))))) (set! jZ2de7@jZ2c92@add-library-path! jZ2c92@add-library-path!) (set! jZ2c94@parse-and-add-library-path (lambda (jZ2d01@paths jZ2d02@message) (let ((jZ2d06@separator '#f)) (begin (set! jZ2d06@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((jZ2d07@t jZ2d01@paths)) (if jZ2d07@t ((lambda (jZ2d09@paths) (for-each (lambda (jZ2d0b@path) (if (file-exists? jZ2d0b@path) (jZ2c92@add-library-path! (expand-path jZ2d0b@path)) (format (current-error-port) jZ2d02@message jZ2d0b@path))) (string-split jZ2d09@paths jZ2d06@separator))) jZ2d07@t) (void))))))) (set! jZ2de8@jZ2c94@parse-and-add-library-path jZ2c94@parse-and-add-library-path) (set! jZ2c96@rpad (lambda (jZ2d0d@str jZ2d0e@pad jZ2d0f@n) (let ((jZ2d13@rest (- jZ2d0f@n (string-length (format '"~a" jZ2d0d@str))))) (let jZ2d19@loop ((jZ2d15@rest jZ2d13@rest) (jZ2d16@ret (format '"~a" jZ2d0d@str))) (if (<= jZ2d15@rest '0) jZ2d16@ret (jZ2d19@loop (- jZ2d15@rest '1) (string-append jZ2d16@ret jZ2d0e@pad))))))) (set! jZ2de9@jZ2c96@rpad jZ2c96@rpad) (set! jZ2c98@condition-printer (lambda (jZ2d1b@e jZ2d1c@port) (let ((jZ2d20@max-condition-len '#f)) (begin (set! jZ2d20@max-condition-len (apply max (map (lambda (jZ2d31@c) (string-length (symbol->string (record-type-name (record-rtd jZ2d31@c))))) (simple-conditions jZ2d1b@e)))) (begin (display '" Condition components:\n" jZ2d1c@port) (for-each-with-index (lambda (jZ2d21@i jZ2d22@x) (let ((jZ2d25@rtd (record-rtd jZ2d22@x)) (jZ2d26@fields-alist (jZ2c9a@record->field-alist jZ2d22@x))) (begin (format jZ2d1c@port '" ~d. ~a" (+ jZ2d21@i '1) (jZ2c96@rpad (symbol->string (record-type-name jZ2d25@rtd)) '" " jZ2d20@max-condition-len)) (if (null? jZ2d26@fields-alist) (newline jZ2d1c@port) (void)) (let jZ2d2d@loop ((jZ2d29@first '#t) (jZ2d2a@fields-alist jZ2d26@fields-alist)) (if (null? jZ2d2a@fields-alist) '() (let ((jZ2d2f@field (car jZ2d2a@fields-alist))) (begin (if (not jZ2d29@first) (display (jZ2c96@rpad '"" '" " (+ '4 jZ2d20@max-condition-len)) jZ2d1c@port) (void)) (display '"       " jZ2d1c@port) (display (car jZ2d2f@field) jZ2d1c@port) (display '": " jZ2d1c@port) (write (cdr jZ2d2f@field) jZ2d1c@port) (newline jZ2d1c@port) (jZ2d2d@loop '#f (cdr jZ2d2a@fields-alist))))))))) (simple-conditions jZ2d1b@e))))))) (set! jZ2dea@jZ2c98@condition-printer jZ2c98@condition-printer) (set! jZ2c9a@record->field-alist (lambda (jZ2d33@r) (let ((jZ2d36@ref '#f)) (begin (set! jZ2d36@ref (lambda (jZ2d41@rtd jZ2d42@i jZ2d43@x) (let ((jZ2d47@val ((record-accessor jZ2d41@rtd jZ2d42@i) jZ2d43@x))) (if (symbol? jZ2d47@val) (ungensym jZ2d47@val) jZ2d47@val)))) (let jZ2d3b@loop ((jZ2d37@ret '()) (jZ2d38@rtd (record-rtd jZ2d33@r))) (if jZ2d38@rtd (jZ2d3b@loop (append jZ2d37@ret (jZ2c9c@map-with-index (lambda (jZ2d3d@i jZ2d3e@field) (cons jZ2d3e@field (jZ2d36@ref jZ2d38@rtd jZ2d3d@i jZ2d33@r))) (vector->list (record-type-field-names jZ2d38@rtd)))) (record-type-parent jZ2d38@rtd)) jZ2d37@ret)))))) (set! jZ2deb@jZ2c9a@record->field-alist jZ2c9a@record->field-alist) (set! jZ2c9c@map-with-index (lambda (jZ2d49@proc jZ2d4a@lst) (let jZ2d53@loop ((jZ2d4d@i '0) (jZ2d4e@lst jZ2d4a@lst) (jZ2d4f@ret '())) (if (null? jZ2d4e@lst) (reverse jZ2d4f@ret) (jZ2d53@loop (+ jZ2d4d@i '1) (cdr jZ2d4e@lst) (cons (jZ2d49@proc jZ2d4d@i (car jZ2d4e@lst)) jZ2d4f@ret)))))) (set! jZ2dec@jZ2c9c@map-with-index jZ2c9c@map-with-index) (set! jZ2c9e@repl (lambda jZ2d55@x (let ((jZ2d58@rec '#f)) (begin (set! jZ2d58@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (jZ2d5b@jZ2d59) (lambda () (with-exception-handler (lambda (jZ2d5d@e) ((call/cc (lambda (jZ2d5f@jZ2d5a) (jZ2d5b@jZ2d59 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? jZ2d5d@e) (jZ2c98@condition-printer jZ2d5d@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" jZ2d5d@e))) (jZ2d5f@jZ2d5a (lambda () (raise-continuable jZ2d5d@e)))))))))) (lambda () (let jZ2d65@loop ((jZ2d61@line (get-line (current-input-port))) (jZ2d62@accum '"")) (let ((jZ2d68@parentheses-ok? '#f) (jZ2d6a@eval-string-print '#f)) (begin (set! jZ2d68@parentheses-ok? (lambda (jZ2d6f@text) (let jZ2d77@loop ((jZ2d71@chars (string->list jZ2d6f@text)) (jZ2d72@p0 '0) (jZ2d73@p1 '0)) (if (null? jZ2d71@chars) (= '0 jZ2d72@p0 jZ2d73@p1) (let ((jZ2d79@t (car jZ2d71@chars))) (if (memv jZ2d79@t '(#\()) (jZ2d77@loop (cdr jZ2d71@chars) (+ jZ2d72@p0 '1) jZ2d73@p1) (if (memv jZ2d79@t '(#\))) (jZ2d77@loop (cdr jZ2d71@chars) (- jZ2d72@p0 '1) jZ2d73@p1) (if (memv jZ2d79@t '(#\[)) (jZ2d77@loop (cdr jZ2d71@chars) jZ2d72@p0 (+ jZ2d73@p1 '1)) (if (memv jZ2d79@t '(#\])) (jZ2d77@loop (cdr jZ2d71@chars) jZ2d72@p0 (- jZ2d73@p1 '1)) (jZ2d77@loop (cdr jZ2d71@chars) jZ2d72@p0 jZ2d73@p1)))))))))) (set! jZ2d6a@eval-string-print (lambda (jZ2d6d@text) (if (not (or (string=? '"\n" jZ2d6d@text) (= '0 (string-length jZ2d6d@text)))) (write (jZ2cac@eval-top-level (call-with-port (open-string-input-port jZ2d6d@text) read))) (void)))) (if (eof-object? jZ2d61@line) (begin (jZ2d6a@eval-string-print jZ2d62@accum) (exit)) (let ((jZ2d6b@current (string-append jZ2d62@accum jZ2d61@line))) (if (jZ2d68@parentheses-ok? jZ2d6b@current) (jZ2d6a@eval-string-print jZ2d6b@current) (jZ2d65@loop (get-line (current-input-port)) jZ2d6b@current))))))))))))) (newline) (jZ2d58@rec)))) (jZ2d58@rec))))) (set! jZ2ded@jZ2c9e@repl jZ2c9e@repl) (set! jZ2ca0@trace-printer (jZ6c8@jZ5a6@make-parameter write)) (set! jZ2dee@jZ2ca0@trace-printer jZ2ca0@trace-printer) (set! jZ2ca2@command-line (jZ6c8@jZ5a6@make-parameter (get-command-line))) (set! jZ2def@jZ2ca2@command-line jZ2ca2@command-line) (set! jZ2ca4@local-library-path (lambda (jZ2d7b@filename) (jZ986@jZ7be@library-path))) (set! jZ2df0@jZ2ca4@local-library-path jZ2ca4@local-library-path) (set! jZ2ca6@load/args (lambda (jZ2d7d@filename . jZ2d7f@args) (begin (apply jZ2cb6@load-r6rs-top-level jZ2d7d@filename 'load jZ2d7f@args) (void)))) (set! jZ2df1@jZ2ca6@load/args jZ2ca6@load/args) (set! jZ2ca8@load (lambda (jZ2d81@filename) (begin (apply jZ2cb6@load-r6rs-top-level jZ2d81@filename 'load (jZ2ca2@command-line)) (void)))) (set! jZ2df2@jZ2ca8@load jZ2ca8@load) (set! jZ2caa@ironscheme-build (lambda () (jZ2ca8@load '"ironscheme-buildscript.ss"))) (set! jZ2df3@jZ2caa@ironscheme-build jZ2caa@ironscheme-build) (set! jZ2cac@eval-top-level (lambda (jZ2d83@x) (jZ28b4@jZe4a@eval jZ2d83@x (jZ28cb@jZe78@interaction-environment)))) (set! jZ2df4@jZ2cac@eval-top-level jZ2cac@eval-top-level) (set! jZ2cae@compile-system-libraries (lambda () (jZ2cac@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! jZ2df5@jZ2cae@compile-system-libraries jZ2cae@compile-system-libraries) (set! jZ2cb0@compile (lambda (jZ2d85@filename) (jZ2cb6@load-r6rs-top-level jZ2d85@filename 'compile))) (set! jZ2df6@jZ2cb0@compile jZ2cb0@compile) (set! jZ2cb2@compile->closure (lambda (jZ2d87@filename) (jZ2cb6@load-r6rs-top-level jZ2d87@filename 'closure))) (set! jZ2df7@jZ2cb2@compile->closure jZ2cb2@compile->closure) (set! jZ2cb4@pre-compile-r6rs-file (lambda (jZ2d89@filename) (jZ2cb6@load-r6rs-top-level jZ2d89@filename 'compile))) (set! jZ2df8@jZ2cb4@pre-compile-r6rs-file jZ2cb4@pre-compile-r6rs-file) (set! jZ2cb6@load-r6rs-top-level (lambda (jZ2d8b@filename jZ2d8c@how . jZ2d8f@args) (begin (jZ986@jZ7be@library-path (jZ2ca4@local-library-path jZ2d8b@filename)) (let ((jZ2d91@x* (with-input-from-file jZ2d8b@filename (lambda () (let jZ2d93@f () (let ((jZ2d95@x (jZ6ba@jZ58a@read-annotated))) (if (eof-object? jZ2d95@x) '() (cons jZ2d95@x (jZ2d93@f))))))))) (let ((jZ2d97@t jZ2d8c@how)) (if (memv jZ2d97@t '(closure)) (jZ28ca@jZe76@pre-compile-r6rs-top-level jZ2d91@x*) (if (memv jZ2d97@t '(load)) (begin (jZ2ca2@command-line (cons jZ2d8b@filename (car jZ2d8f@args))) (jZ6c9@jZ5a8@mosh-cache-dir (create-mosh-cache-dir)) (if (jZ6c9@jZ5a8@mosh-cache-dir) (gensym-prefix-set! (jZ2cbc@prefix-inc! (string-append (jZ6c9@jZ5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jZ2d99@file) ((call/cc (lambda (jZ2d9d@jZ2d9b) (lambda () (with-exception-handler (lambda (jZ2d9f@c) ((call/cc (lambda (jZ2da1@jZ2d9c) (jZ2d9d@jZ2d9b (lambda () (if '#t '#t (jZ2da1@jZ2d9c (lambda () (raise-continuable jZ2d9f@c)))))))))) (lambda () (delete-file (string-append (jZ6c9@jZ5a8@mosh-cache-dir) '"/" jZ2d99@file))))))))) (directory-list (jZ6c9@jZ5a8@mosh-cache-dir))) (void)) (let ((jZ2da3@compiled (jZ28c9@jZe74@compile-r6rs-top-level jZ2d91@x*))) (begin (if (and (jZ6c9@jZ5a8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jZ98a@jZ7c6@serialize-all jZ6c3@jZ59c@serialize-library jZ71f@jZ6d8@compile-core-expr) (void)) (jZ2da3@compiled)))) (if (memv jZ2d97@t '(compile)) (begin (jZ28c9@jZe74@compile-r6rs-top-level jZ2d91@x*) (jZ98a@jZ7c6@serialize-all jZ6c3@jZ59c@serialize-library jZ71f@jZ6d8@compile-core-expr)) (if '#f '#f (void)))))))))) (set! jZ2df9@jZ2cb6@load-r6rs-top-level jZ2cb6@load-r6rs-top-level) (set! jZ2cb8@load-r6rs-top-level-sexp (lambda (jZ2da5@import-spec jZ2da6@thunk) (let ((jZ2db1@jZ2daa jZ986@jZ7be@library-path) (jZ2db2@jZ2dac jZ6c9@jZ5a8@mosh-cache-dir) (jZ2db3@jZ2dae (jZ2ca4@local-library-path '"")) (jZ2db4@jZ2db0 (create-mosh-cache-dir))) (let ((jZ2db9@swap (lambda () (begin (let ((jZ2dbb@t (jZ2db1@jZ2daa))) (begin (jZ2db1@jZ2daa jZ2db3@jZ2dae) (set! jZ2db3@jZ2dae jZ2dbb@t))) (let ((jZ2dbd@t (jZ2db2@jZ2dac))) (begin (jZ2db2@jZ2dac jZ2db4@jZ2db0) (set! jZ2db4@jZ2db0 jZ2dbd@t))))))) (dynamic-wind jZ2db9@swap (lambda () (begin (if (jZ6c9@jZ5a8@mosh-cache-dir) (gensym-prefix-set! (jZ2cbc@prefix-inc! (string-append (jZ6c9@jZ5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((jZ2dc3@jZ2dc0 jZ2ca2@command-line) (jZ2dc4@jZ2dc2 '())) (let ((jZ2dc7@swap (lambda () (let ((jZ2dc9@t (jZ2dc3@jZ2dc0))) (begin (jZ2dc3@jZ2dc0 jZ2dc4@jZ2dc2) (set! jZ2dc4@jZ2dc2 jZ2dc9@t)))))) (dynamic-wind jZ2dc7@swap (lambda () ((jZ28c9@jZe74@compile-r6rs-top-level (list (cons 'import jZ2da5@import-spec) (list jZ2da6@thunk))))) jZ2dc7@swap))))) jZ2db9@swap))))) (set! jZ2dfa@jZ2cb8@load-r6rs-top-level-sexp jZ2cb8@load-r6rs-top-level-sexp) (set! jZ2cba@prefix-inc (lambda (jZ2dcb@prefix-string) (let ((jZ2dcd@prefix (symbol->string jZ2dcb@prefix-string))) (let ((jZ2dcf@len (string-length jZ2dcd@prefix))) (let jZ2dd7@loop ((jZ2dd1@i (- jZ2dcf@len '1)) (jZ2dd2@carry? '#t) (jZ2dd3@accum '())) (if (< jZ2dd1@i '0) (string->symbol (list->string (if jZ2dd2@carry? (cons '#\a jZ2dd3@accum) jZ2dd3@accum))) (if jZ2dd2@carry? (let ((jZ2dd9@next-integer (+ '1 (char->integer (string-ref jZ2dcd@prefix jZ2dd1@i))))) (if (= jZ2dd9@next-integer '123) (jZ2dd7@loop (- jZ2dd1@i '1) '#f (cons '#\A jZ2dd3@accum)) (if (= jZ2dd9@next-integer '91) (jZ2dd7@loop (- jZ2dd1@i '1) '#t (cons '#\a jZ2dd3@accum)) (jZ2dd7@loop (- jZ2dd1@i '1) '#f (cons (integer->char jZ2dd9@next-integer) jZ2dd3@accum))))) (jZ2dd7@loop (- jZ2dd1@i '1) '#f (cons (string-ref jZ2dcd@prefix jZ2dd1@i) jZ2dd3@accum))))))))) (set! jZ2dfb@jZ2cba@prefix-inc jZ2cba@prefix-inc) (set! jZ2cbc@prefix-inc! (lambda (jZ2ddb@file) (begin (if (not (file-exists? jZ2ddb@file)) (call-with-output-file jZ2ddb@file (lambda (jZ2ddd@port) (write 'd jZ2ddd@port))) (void)) (let ((jZ2ddf@prefix (call-with-input-file jZ2ddb@file read))) (if (main-vm?) (let ((jZ2de1@next-prefix (jZ2cba@prefix-inc jZ2ddf@prefix))) (begin (call-with-port (open-file-output-port jZ2ddb@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (jZ2de3@port) (write jZ2de1@next-prefix jZ2de3@port))) jZ2ddf@prefix)) jZ2ddf@prefix))))) (set! jZ2dfc@jZ2cbc@prefix-inc! jZ2cbc@prefix-inc!) (begin (jZ98b@jZ7c8@current-precompiled-library-loader jZ6c4@jZ59e@load-serialized-library) (set-symbol-value! 'load jZ2ca8@load) (set-symbol-value! 'pre-compile-r6rs-file jZ2cb4@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs jZ2cac@eval-top-level) (set-symbol-value! 'int-env-syms jZ28ab@jZe38@interaction-environment-symbols) (set-symbol-value! 'expanded2core jZ71e@jZ6d6@expanded->core) (set-symbol-value! 'trace-printer jZ2ca0@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'invoke-library-by-name 'invoke-library-by-name) (set-symbol-value! 'create-non-continuable-violation (lambda (jZ2cbd@c) (condition (jZ2beb@jZ29f5@make-non-continuable-violation) (jZ2be1@jZ29dc@make-who-condition 'raise) (jZ2ba5@jZ293d@make-message-condition '"returned from non-continuable exception") (jZ2bd7@jZ29c1@make-irritants-condition (list jZ2cbd@c))))) (jZ2c94@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (jZ2c94@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (jZ2c92@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (jZ2c92@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (jZ2c92@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((jZ2cbf@prefix (lambda (jZ2cc1@ext jZ2cc2@ls) (append (map (lambda (jZ2cc5@x) (string-append jZ2cc1@ext jZ2cc5@x)) jZ2cc2@ls) jZ2cc2@ls)))) (jZ987@jZ7c0@library-extensions (jZ2cbf@prefix '".mosh" (jZ987@jZ7c0@library-extensions)))) (current-exception-handler (lambda (jZ2cc7@c) (begin (if (condition? jZ2cc7@c) (jZ2c98@condition-printer jZ2cc7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" jZ2cc7@c)) jZ2cc7@c))) (if ((call/cc (lambda (jZ2ccb@jZ2cc9) (lambda () (with-exception-handler (lambda (jZ2ccd@c) ((call/cc (lambda (jZ2ccf@jZ2cca) (jZ2ccb@jZ2cc9 (lambda () (if '#t '#f (jZ2ccf@jZ2cca (lambda () (raise-continuable jZ2ccd@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (jZ2cb8@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (jZ2ca2@command-line)) (let ((jZ2cd9@jZ2cd2 jZ2ca2@command-line) (jZ2cda@jZ2cd4 jZ6c9@jZ5a8@mosh-cache-dir) (jZ2cdb@jZ2cd6 '()) (jZ2cdc@jZ2cd8 (create-mosh-cache-dir))) (let ((jZ2ce1@swap (lambda () (begin (let ((jZ2ce3@t (jZ2cd9@jZ2cd2))) (begin (jZ2cd9@jZ2cd2 jZ2cdb@jZ2cd6) (set! jZ2cdb@jZ2cd6 jZ2ce3@t))) (let ((jZ2ce5@t (jZ2cda@jZ2cd4))) (begin (jZ2cda@jZ2cd4 jZ2cdc@jZ2cd8) (set! jZ2cdc@jZ2cd8 jZ2ce5@t))))))) (dynamic-wind jZ2ce1@swap (lambda () (begin (if (jZ6c9@jZ5a8@mosh-cache-dir) (gensym-prefix-set! (jZ2cbc@prefix-inc! (string-append (jZ6c9@jZ5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (jZ2c9e@repl))) jZ2ce1@swap))) (begin (jZ986@jZ7be@library-path (jZ2ca4@local-library-path (car (jZ2ca2@command-line)))) (set! jZ2c90@x* (with-input-from-file (car (jZ2ca2@command-line)) (lambda () (let jZ2ce7@f () (let ((jZ2ce9@x (jZ6ba@jZ58a@read-annotated))) (if (eof-object? jZ2ce9@x) '() (cons jZ2ce9@x (jZ2ce7@f)))))))) (jZ2ca2@command-line (cons (car (jZ2ca2@command-line)) (cdr (jZ2ca2@command-line)))) (jZ6c9@jZ5a8@mosh-cache-dir (create-mosh-cache-dir)) (if (jZ6c9@jZ5a8@mosh-cache-dir) (gensym-prefix-set! (jZ2cbc@prefix-inc! (string-append (jZ6c9@jZ5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jZ2ceb@file) ((call/cc (lambda (jZ2cef@jZ2ced) (lambda () (with-exception-handler (lambda (jZ2cf1@c) ((call/cc (lambda (jZ2cf3@jZ2cee) (jZ2cef@jZ2ced (lambda () (if '#t '#t (jZ2cf3@jZ2cee (lambda () (raise-continuable jZ2cf1@c)))))))))) (lambda () (delete-file (string-append (jZ6c9@jZ5a8@mosh-cache-dir) '"/" jZ2ceb@file))))))))) (directory-list (jZ6c9@jZ5a8@mosh-cache-dir))) (void)) (let ((jZ2cf5@compiled (jZ28c9@jZe74@compile-r6rs-top-level jZ2c90@x*))) (begin (if (and (jZ6c9@jZ5a8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jZ98a@jZ7c6@serialize-all jZ6c3@jZ59c@serialize-library jZ71f@jZ6d8@compile-core-expr) (void)) (jZ2cf5@compiled))))))))
