;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! nz6780@library-file-path->cache-path (unspecified)) (set! nz6782@read-annotated (unspecified)) (set! nz6784@annotation-stripped (unspecified)) (set! nz6786@annotation? (unspecified)) (set! nz6788@annotation-source (unspecified)) (set! nz678a@annotation-expression (unspecified)) (set! nz678c@scm->fasl (unspecified)) (set! nz678e@fasl-save (unspecified)) (set! nz6790@fasl-load (unspecified)) (set! nz6792@verbose? (unspecified)) (set! nz6794@serialize-library (unspecified)) (set! nz6796@load-serialized-library (unspecified)) (set! nz6798@make-record-printer (unspecified)) (set! nz679a@compile-core (unspecified)) (set! nz679c@read-library-source-file (unspecified)) (set! nz679e@make-parameter (unspecified)) (set! nz67a0@mosh-cache-dir (unspecified)) (set! nz6836@file-options-spec (unspecified)) (set! nz6780@library-file-path->cache-path (lambda (nz6837@x) (call-with-values (lambda () (open-string-output-port)) (lambda (nz683d@nz683a nz683e@nz683c) (let ((nz6841@extract nz683e@nz683c) (nz6842@p nz683d@nz683a)) (let ((nz6846@display-hex '#f)) (begin (set! nz6846@display-hex (lambda (nz684f@n) (if (<= '0 nz684f@n '9) (display nz684f@n nz6842@p) (display (integer->char (+ (char->integer '#\a) (- nz684f@n '10))) nz6842@p)))) (begin (let nz6849@f ((nz6847@ls (string-split nz6837@x '#\/))) (if (not (null? nz6847@ls)) (begin (display '"_" nz6842@p) (for-each (lambda (nz684b@c) (if (or (char<=? '#\a nz684b@c '#\z) (char<=? '#\A nz684b@c '#\Z) (char<=? '#\0 nz684b@c '#\9) (memv nz684b@c '(#\- #\. #\_ #\~))) (display nz684b@c nz6842@p) (begin (display '"%" nz6842@p) (let ((nz684d@n (char->integer nz684b@c))) (begin (nz6846@display-hex (quotient nz684d@n '16)) (nz6846@display-hex (remainder nz684d@n '16))))))) (string->list (car nz6847@ls))) (nz6849@f (cdr nz6847@ls))) (void))) (nz6841@extract))))))))) (set! nz68b1@nz6780@library-file-path->cache-path nz6780@library-file-path->cache-path) (set! nz6782@read-annotated read) (set! nz68b2@nz6782@read-annotated nz6782@read-annotated) (set! nz6784@annotation-stripped (lambda (nz6851@x) (nz678a@annotation-expression nz6851@x))) (set! nz68b3@nz6784@annotation-stripped nz6784@annotation-stripped) (set! nz6786@annotation? (lambda (nz6853@x) (source-info nz6853@x))) (set! nz68b4@nz6786@annotation? nz6786@annotation?) (set! nz6788@annotation-source (lambda (nz6855@x) (source-info nz6855@x))) (set! nz68b5@nz6788@annotation-source nz6788@annotation-source) (set! nz678a@annotation-expression (lambda (nz6857@x) (if (pair? nz6857@x) (cons (car nz6857@x) (cdr nz6857@x)) (if (procedure? nz6857@x) (set-source-info! nz6857@x '#f) nz6857@x)))) (set! nz68b6@nz678a@annotation-expression nz678a@annotation-expression) (set! nz678c@scm->fasl (lambda (nz6859@filename) (string-append (nz67a0@mosh-cache-dir) '"/" (nz6780@library-file-path->cache-path nz6859@filename) '".mosh-fasl"))) (set! nz68b7@nz678c@scm->fasl nz678c@scm->fasl) (set! nz678e@fasl-save (lambda (nz685b@filename nz685c@obj) (call-with-port (open-file-output-port nz685b@filename) (lambda (nz685f@port) ((symbol-value 'fasl-write!) nz685c@obj nz685f@port))))) (set! nz68b8@nz678e@fasl-save nz678e@fasl-save) (set! nz6790@fasl-load (lambda (nz6861@filename) (call-with-port (open-file-input-port nz6861@filename) (symbol-value 'fasl-read!)))) (set! nz68b9@nz6790@fasl-load nz6790@fasl-load) (set! nz6792@verbose? (symbol-value '%verbose)) (set! nz68ba@nz6792@verbose? nz6792@verbose?) (set! nz6794@serialize-library (lambda (nz6863@filename nz6864@obj) (begin (if nz6792@verbose? (format (current-error-port) '"serialize-library ~a\n..." nz6863@filename) (void)) (let ((nz6867@expanded2core (symbol-value 'expanded2core))) (let ((nz6869@compile (symbol-value 'compile-w/o-halt))) (let ((nz686b@code nz6864@obj)) (let ((nz686d@pivot (cddddr (cddddr nz686b@code)))) (let ((nz686f@visit (nz6869@compile (nz6867@expanded2core (car nz686d@pivot))))) (begin (set-car! nz686d@pivot nz686f@visit) (let ((nz6871@pivot (cdr nz686d@pivot))) (let ((nz6873@invoke (nz6869@compile (nz6867@expanded2core (car nz6871@pivot))))) (set-car! nz6871@pivot nz6873@invoke))))))))) (let ((nz6875@fasl-file (nz678c@scm->fasl nz6863@filename))) (begin (if (file-exists? nz6875@fasl-file) (delete-file nz6875@fasl-file) (void)) ((call/cc (lambda (nz6879@nz6877) (lambda () (with-exception-handler (lambda (nz687b@c) ((call/cc (lambda (nz687d@nz6878) (nz6879@nz6877 (lambda () (if '#t (begin (if nz6792@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" nz6863@filename) (void)) (if (file-exists? nz6875@fasl-file) (delete-file nz6875@fasl-file) (void)) '#f) (nz687d@nz6878 (lambda () (raise-continuable nz687b@c)))))))))) (lambda () (nz678e@fasl-save nz6875@fasl-file nz6864@obj)))))))))))) (set! nz68bb@nz6794@serialize-library nz6794@serialize-library) (set! nz6796@load-serialized-library (lambda (nz687f@filename nz6880@obj) (and (nz67a0@mosh-cache-dir) (let ((nz6883@fasl-file (nz678c@scm->fasl nz687f@filename))) (if (and (file-exists? nz6883@fasl-file) ((symbol-value 'file-newer?) nz6883@fasl-file nz687f@filename)) (let ((nz6885@expanded2core (symbol-value 'expanded2core))) (let ((nz6887@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((nz6889@code (nz6790@fasl-load nz6883@fasl-file))) (let ((nz688b@pivot (cddddr (cddddr nz6889@code)))) (let ((nz688d@visit (car nz688b@pivot))) (let ((nz688f@visit-proc (lambda () (nz6887@eval-compiled-core nz688d@visit)))) (begin (set-car! nz688b@pivot nz688f@visit-proc) (let ((nz6891@pivot (cdr nz688b@pivot))) (let ((nz6893@invoke (car nz6891@pivot))) (begin (set-car! nz6891@pivot (lambda () (nz6887@eval-compiled-core nz6893@invoke))) (apply nz6880@obj nz6889@code))))))))))) '#f))))) (set! nz68bc@nz6796@load-serialized-library nz6796@load-serialized-library) (set! nz6798@make-record-printer (lambda (nz6895@name nz6896@printer) (lambda nz6899@x (begin (display '"record printer") (for-each display nz6899@x))))) (set! nz68bd@nz6798@make-record-printer nz6798@make-record-printer) (set! nz679a@compile-core (lambda nz689b@x (apply error 'comile-core '"not implementated" nz689b@x))) (set! nz68be@nz679a@compile-core nz679a@compile-core) (set! nz679c@read-library-source-file (lambda (nz689d@file-name) (with-input-from-file nz689d@file-name nz6782@read-annotated))) (set! nz68bf@nz679c@read-library-source-file nz679c@read-library-source-file) (set! nz679e@make-parameter (lambda nz68ad (let ((nz68ae (length nz68ad))) (if (= nz68ae '1) (apply (lambda (nz689f@x) (nz679e@make-parameter nz689f@x (lambda (nz68a1@x) nz68a1@x))) nz68ad) (if (= nz68ae '2) (apply (lambda (nz68a3@x nz68a4@fender) (let ((nz68a7@x (nz68a4@fender nz68a3@x))) (lambda nz68ab (let ((nz68ac (length nz68ab))) (if (= nz68ac '0) (apply (lambda () nz68a7@x) nz68ab) (if (= nz68ac '1) (apply (lambda (nz68a9@v) (set! nz68a7@x (nz68a4@fender nz68a9@v))) nz68ab) (error 'apply '"invalid arg count"))))))) nz68ad) (error 'apply '"invalid arg count")))))) (set! nz68c0@nz679e@make-parameter nz679e@make-parameter) (set! nz67a0@mosh-cache-dir (nz679e@make-parameter '#f)) (set! nz68c1@nz67a0@mosh-cache-dir nz67a0@mosh-cache-dir) (set! nz6836@file-options-spec (lambda (nz68af@x) nz68af@x)) (set! nz68c2@nz6836@file-options-spec nz6836@file-options-spec) (void))
(begin (set! nz68c8@current-primitive-locations (unspecified)) (set! nz68ca@mutable? (unspecified)) (set! nz68cc@rewriter (unspecified)) (set! nz68ce@expanded->core (unspecified)) (set! nz68d0@compile-core-expr (unspecified)) (set! nz68d2@pretty-print (unspecified)) (set! nz68d4@compile-core-expr-to-port (unspecified)) (set! nz68c8@current-primitive-locations (nz68c0@nz679e@make-parameter (lambda (nz68d5@x) '#f) (lambda (nz68d7@p) nz68d7@p))) (set! nz6913@nz68c8@current-primitive-locations nz68c8@current-primitive-locations) (set! nz68ca@mutable? (lambda (nz68d9@x) (or (pair? nz68d9@x) (vector? nz68d9@x) (hashtable? nz68d9@x)))) (set! nz6914@nz68ca@mutable? nz68ca@mutable?) (set! nz68cc@rewriter (lambda (nz68db@quote-hack?) (let ((nz68de@f '#f)) (begin (set! nz68de@f (lambda (nz68df@x) (if (pair? nz68df@x) (let ((nz68e1@t (car nz68df@x))) (if (memv nz68e1@t '(quote)) (if (and nz68db@quote-hack? (nz68ca@mutable? (cadr nz68df@x))) (let ((nz68e3@g (gensym))) (begin (set-symbol-value! nz68e3@g (cadr nz68df@x)) nz68e3@g)) nz68df@x) (if (memv nz68e1@t '(case-lambda)) (cons 'case-lambda (map (lambda (nz68e5@x) (cons (car nz68e5@x) (map nz68de@f (cdr nz68e5@x)))) (cdr nz68df@x))) (if (memv nz68e1@t '(lambda)) (cons* 'lambda (cadr nz68df@x) (map nz68de@f (cddr nz68df@x))) (if (memv nz68e1@t '(letrec)) (let ((nz68e7@bindings (cadr nz68df@x)) (nz68e8@body* (cddr nz68df@x))) (let ((nz68eb@lhs* (map car nz68e7@bindings)) (nz68ec@rhs* (map cadr nz68e7@bindings))) (cons* 'letrec (map list nz68eb@lhs* (map nz68de@f nz68ec@rhs*)) (map nz68de@f nz68e8@body*)))) (if (memv nz68e1@t '(letrec*)) (let ((nz68ef@bindings (cadr nz68df@x)) (nz68f0@body* (cddr nz68df@x))) (let ((nz68f3@lhs* (map car nz68ef@bindings)) (nz68f4@rhs* (map cadr nz68ef@bindings))) (cons* 'letrec* (map list nz68f3@lhs* (map nz68de@f nz68f4@rhs*)) (map nz68de@f nz68f0@body*)))) (if (memv nz68e1@t '(library-letrec*)) (let ((nz68f7@name (cadr nz68df@x)) (nz68f8@x (cdr nz68df@x))) (let ((nz68fb@bindings (cadr nz68f8@x)) (nz68fc@body* (cddr nz68f8@x))) (let ((nz68ff@lhs* (map car nz68fb@bindings)) (nz6900@lhs** (map cadr nz68fb@bindings)) (nz6901@rhs* (map caddr nz68fb@bindings))) (cons* 'library-letrec* nz68f7@name (map list nz68ff@lhs* nz6900@lhs** (map nz68de@f nz6901@rhs*)) (map nz68de@f nz68fc@body*))))) (if (memv nz68e1@t '(begin)) (cons 'begin (map nz68de@f (cdr nz68df@x))) (if (memv nz68e1@t '(set!)) (list 'set! (cadr nz68df@x) (nz68de@f (caddr nz68df@x))) (if (memv nz68e1@t '(primitive)) (let ((nz6905@op (cadr nz68df@x))) (let ((nz6907@t ((nz68c8@current-primitive-locations) nz6905@op))) (if nz6907@t ((lambda (nz6909@loc) nz6909@loc) nz6907@t) nz6905@op))) (if (memv nz68e1@t '(define)) nz68df@x (if (list? nz68df@x) (map nz68de@f nz68df@x) (error 'rewrite '"invalid form ~s ~s" nz68df@x (list? nz68df@x)))))))))))))) nz68df@x))) nz68de@f)))) (set! nz6915@nz68cc@rewriter nz68cc@rewriter) (set! nz68ce@expanded->core (lambda (nz690b@x) ((nz68cc@rewriter '#f) nz690b@x))) (set! nz6916@nz68ce@expanded->core nz68ce@expanded->core) (set! nz68d0@compile-core-expr (lambda (nz690d@x) ((nz68cc@rewriter '#f) nz690d@x))) (set! nz6917@nz68d0@compile-core-expr nz68d0@compile-core-expr) (set! nz68d2@pretty-print write) (set! nz6918@nz68d2@pretty-print nz68d2@pretty-print) (set! nz68d4@compile-core-expr-to-port (lambda (nz690f@x nz6910@p) (nz68d2@pretty-print ((nz68cc@rewriter '#f) nz690f@x) nz6910@p))) (set! nz6919@nz68d4@compile-core-expr-to-port nz68d4@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! nz6968@make-collection (unspecified)) (set! nz696a@current-library-collection (unspecified)) (set! nz696c@rp (unspecified)) (set! nz6976@library? (unspecified)) (set! nz6978@library-id (unspecified)) (set! nz697a@set-library-id! (unspecified)) (set! nz697c@library-name (unspecified)) (set! nz697e@set-library-name! (unspecified)) (set! nz6980@library-version (unspecified)) (set! nz6982@set-library-version! (unspecified)) (set! nz6984@library-imp* (unspecified)) (set! nz6986@set-library-imp*! (unspecified)) (set! nz6988@library-vis* (unspecified)) (set! nz698a@set-library-vis*! (unspecified)) (set! nz698c@library-inv* (unspecified)) (set! nz698e@set-library-inv*! (unspecified)) (set! nz6990@library-subst (unspecified)) (set! nz6992@set-library-subst! (unspecified)) (set! nz6994@library-env (unspecified)) (set! nz6996@set-library-env! (unspecified)) (set! nz6998@library-visit-state (unspecified)) (set! nz699a@set-library-visit-state! (unspecified)) (set! nz699c@library-invoke-state (unspecified)) (set! nz699e@set-library-invoke-state! (unspecified)) (set! nz69a0@library-visit-code (unspecified)) (set! nz69a2@set-library-visit-code! (unspecified)) (set! nz69a4@library-invoke-code (unspecified)) (set! nz69a6@set-library-invoke-code! (unspecified)) (set! nz69a8@library-visible? (unspecified)) (set! nz69aa@set-library-visible?! (unspecified)) (set! nz69ac@library-source-file-name (unspecified)) (set! nz69ae@set-library-source-file-name! (unspecified)) (set! nz69b0@dummy (unspecified)) (set! nz69b2@find-dependencies (unspecified)) (set! nz69b4@find-library-by (unspecified)) (set! nz69b6@library-path (unspecified)) (set! nz69b8@library-extensions (unspecified)) (set! nz69ba@library-name->file-name (unspecified)) (set! nz69bc@file-locator (unspecified)) (set! nz69be@serialize-all (unspecified)) (set! nz69c0@current-precompiled-library-loader (unspecified)) (set! nz69c2@try-load-from-file (unspecified)) (set! nz69c4@library-loader (unspecified)) (set! nz69c6@current-library-expander (unspecified)) (set! nz69c8@external-pending-libraries (unspecified)) (set! nz69ca@find-external-library (unspecified)) (set! nz69cc@find-library-by-name (unspecified)) (set! nz69ce@library-exists? (unspecified)) (set! nz69d0@find-library-by-spec/die (unspecified)) (set! nz69d2@label->binding-table (unspecified)) (set! nz69d4@install-library-record (unspecified)) (set! nz69d6@install-library (unspecified)) (set! nz69d8@imported-label->binding (unspecified)) (set! nz69da@invoke-library (unspecified)) (set! nz69dc@visit-library (unspecified)) (set! nz69de@invoke-library-by-spec (unspecified)) (set! nz69e0@invoke-library-by-name (unspecified)) (set! nz69e2@installed-libraries (unspecified)) (set! nz69e4@library-spec (unspecified)) (set! nz6968@make-collection (lambda () (let ((nz69e5@set '())) (let ((nz69e8@set-cons '#f)) (begin (set! nz69e8@set-cons (lambda (nz69ed@x nz69ee@ls) (if (memq nz69ed@x nz69ee@ls) nz69ee@ls (cons nz69ed@x nz69ee@ls)))) (lambda nz69eb (let ((nz69ec (length nz69eb))) (if (= nz69ec '0) (apply (lambda () nz69e5@set) nz69eb) (if (= nz69ec '1) (apply (lambda (nz69e9@x) (set! nz69e5@set (nz69e8@set-cons nz69e9@x nz69e5@set))) nz69eb) (error 'apply '"invalid arg count")))))))))) (set! nz6b67@nz6968@make-collection nz6968@make-collection) (set! nz696a@current-library-collection (nz68c0@nz679e@make-parameter (nz6968@make-collection) (lambda (nz69f1@x) (begin (if (not (procedure? nz69f1@x)) (assertion-violation 'current-library-collection '"not a procedure" nz69f1@x) (void)) nz69f1@x)))) (set! nz6b68@nz696a@current-library-collection nz696a@current-library-collection) (set! nz696c@rp (nz68bd@nz6798@make-record-printer 'library (lambda (nz69f3@x nz69f4@p nz69f5@wr) (begin (if (not (nz6976@library? nz69f3@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (nz6980@library-version nz69f3@x)) (nz697c@library-name nz69f3@x) (append (nz697c@library-name nz69f3@x) (list (nz6980@library-version nz69f3@x))))) nz69f4@p))))) (set! nz6b69@nz696c@rp nz696c@rp) (set! nz6976@library? (lambda (nz69f9@x) (and (simple-struct? nz69f9@x) (eq? (simple-struct-name nz69f9@x) 'library)))) (set! nz6b6a@nz6976@library? nz6976@library?) (set! nz6978@library-id (lambda (nz69fb@x) (simple-struct-ref nz69fb@x '0))) (set! nz6b6b@nz6978@library-id nz6978@library-id) (set! nz697a@set-library-id! (lambda (nz69fd@x nz69fe@val) (simple-struct-set! nz69fd@x '0 nz69fe@val))) (set! nz6b6c@nz697a@set-library-id! nz697a@set-library-id!) (set! nz697c@library-name (lambda (nz6a01@x) (simple-struct-ref nz6a01@x '1))) (set! nz6b6d@nz697c@library-name nz697c@library-name) (set! nz697e@set-library-name! (lambda (nz6a03@x nz6a04@val) (simple-struct-set! nz6a03@x '1 nz6a04@val))) (set! nz6b6e@nz697e@set-library-name! nz697e@set-library-name!) (set! nz6980@library-version (lambda (nz6a07@x) (simple-struct-ref nz6a07@x '2))) (set! nz6b6f@nz6980@library-version nz6980@library-version) (set! nz6982@set-library-version! (lambda (nz6a09@x nz6a0a@val) (simple-struct-set! nz6a09@x '2 nz6a0a@val))) (set! nz6b70@nz6982@set-library-version! nz6982@set-library-version!) (set! nz6984@library-imp* (lambda (nz6a0d@x) (simple-struct-ref nz6a0d@x '3))) (set! nz6b71@nz6984@library-imp* nz6984@library-imp*) (set! nz6986@set-library-imp*! (lambda (nz6a0f@x nz6a10@val) (simple-struct-set! nz6a0f@x '3 nz6a10@val))) (set! nz6b72@nz6986@set-library-imp*! nz6986@set-library-imp*!) (set! nz6988@library-vis* (lambda (nz6a13@x) (simple-struct-ref nz6a13@x '4))) (set! nz6b73@nz6988@library-vis* nz6988@library-vis*) (set! nz698a@set-library-vis*! (lambda (nz6a15@x nz6a16@val) (simple-struct-set! nz6a15@x '4 nz6a16@val))) (set! nz6b74@nz698a@set-library-vis*! nz698a@set-library-vis*!) (set! nz698c@library-inv* (lambda (nz6a19@x) (simple-struct-ref nz6a19@x '5))) (set! nz6b75@nz698c@library-inv* nz698c@library-inv*) (set! nz698e@set-library-inv*! (lambda (nz6a1b@x nz6a1c@val) (simple-struct-set! nz6a1b@x '5 nz6a1c@val))) (set! nz6b76@nz698e@set-library-inv*! nz698e@set-library-inv*!) (set! nz6990@library-subst (lambda (nz6a1f@x) (simple-struct-ref nz6a1f@x '6))) (set! nz6b77@nz6990@library-subst nz6990@library-subst) (set! nz6992@set-library-subst! (lambda (nz6a21@x nz6a22@val) (simple-struct-set! nz6a21@x '6 nz6a22@val))) (set! nz6b78@nz6992@set-library-subst! nz6992@set-library-subst!) (set! nz6994@library-env (lambda (nz6a25@x) (simple-struct-ref nz6a25@x '7))) (set! nz6b79@nz6994@library-env nz6994@library-env) (set! nz6996@set-library-env! (lambda (nz6a27@x nz6a28@val) (simple-struct-set! nz6a27@x '7 nz6a28@val))) (set! nz6b7a@nz6996@set-library-env! nz6996@set-library-env!) (set! nz6998@library-visit-state (lambda (nz6a2b@x) (simple-struct-ref nz6a2b@x '8))) (set! nz6b7b@nz6998@library-visit-state nz6998@library-visit-state) (set! nz699a@set-library-visit-state! (lambda (nz6a2d@x nz6a2e@val) (simple-struct-set! nz6a2d@x '8 nz6a2e@val))) (set! nz6b7c@nz699a@set-library-visit-state! nz699a@set-library-visit-state!) (set! nz699c@library-invoke-state (lambda (nz6a31@x) (simple-struct-ref nz6a31@x '9))) (set! nz6b7d@nz699c@library-invoke-state nz699c@library-invoke-state) (set! nz699e@set-library-invoke-state! (lambda (nz6a33@x nz6a34@val) (simple-struct-set! nz6a33@x '9 nz6a34@val))) (set! nz6b7e@nz699e@set-library-invoke-state! nz699e@set-library-invoke-state!) (set! nz69a0@library-visit-code (lambda (nz6a37@x) (simple-struct-ref nz6a37@x '10))) (set! nz6b7f@nz69a0@library-visit-code nz69a0@library-visit-code) (set! nz69a2@set-library-visit-code! (lambda (nz6a39@x nz6a3a@val) (simple-struct-set! nz6a39@x '10 nz6a3a@val))) (set! nz6b80@nz69a2@set-library-visit-code! nz69a2@set-library-visit-code!) (set! nz69a4@library-invoke-code (lambda (nz6a3d@x) (simple-struct-ref nz6a3d@x '11))) (set! nz6b81@nz69a4@library-invoke-code nz69a4@library-invoke-code) (set! nz69a6@set-library-invoke-code! (lambda (nz6a3f@x nz6a40@val) (simple-struct-set! nz6a3f@x '11 nz6a40@val))) (set! nz6b82@nz69a6@set-library-invoke-code! nz69a6@set-library-invoke-code!) (set! nz69a8@library-visible? (lambda (nz6a43@x) (simple-struct-ref nz6a43@x '12))) (set! nz6b83@nz69a8@library-visible? nz69a8@library-visible?) (set! nz69aa@set-library-visible?! (lambda (nz6a45@x nz6a46@val) (simple-struct-set! nz6a45@x '12 nz6a46@val))) (set! nz6b84@nz69aa@set-library-visible?! nz69aa@set-library-visible?!) (set! nz69ac@library-source-file-name (lambda (nz6a49@x) (simple-struct-ref nz6a49@x '13))) (set! nz6b85@nz69ac@library-source-file-name nz69ac@library-source-file-name) (set! nz69ae@set-library-source-file-name! (lambda (nz6a4b@x nz6a4c@val) (simple-struct-set! nz6a4b@x '13 nz6a4c@val))) (set! nz6b86@nz69ae@set-library-source-file-name! nz69ae@set-library-source-file-name!) (set! nz69b0@dummy '3) (set! nz6b87@nz69b0@dummy nz69b0@dummy) (set! nz69b2@find-dependencies (lambda (nz6a4f@ls) (if (null? nz6a4f@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! nz6b88@nz69b2@find-dependencies nz69b2@find-dependencies) (set! nz69b4@find-library-by (lambda (nz6a51@pred) (let nz6a55@f ((nz6a53@ls ((nz696a@current-library-collection)))) (if (null? nz6a53@ls) '#f (if (nz6a51@pred (car nz6a53@ls)) (car nz6a53@ls) (nz6a55@f (cdr nz6a53@ls))))))) (set! nz6b89@nz69b4@find-library-by nz69b4@find-library-by) (set! nz69b6@library-path (nz68c0@nz679e@make-parameter '(".") (lambda (nz6a57@x) (if (and (list? nz6a57@x) (for-all string? nz6a57@x)) (map (lambda (nz6a59@x) nz6a59@x) nz6a57@x) (assertion-violation 'library-path '"not a list of strings" nz6a57@x))))) (set! nz6b8a@nz69b6@library-path nz69b6@library-path) (set! nz69b8@library-extensions (nz68c0@nz679e@make-parameter '(".sls" ".ss" ".scm") (lambda (nz6a5b@x) (if (and (list? nz6a5b@x) (for-all string? nz6a5b@x)) (map (lambda (nz6a5d@x) nz6a5d@x) nz6a5b@x) (assertion-violation 'library-extensions '"not a list of strings" nz6a5b@x))))) (set! nz6b8b@nz69b8@library-extensions nz69b8@library-extensions) (set! nz69ba@library-name->file-name (lambda (nz6a5f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (nz6a65@nz6a62 nz6a66@nz6a64) (let ((nz6a69@extract nz6a66@nz6a64) (nz6a6a@p nz6a65@nz6a62)) (let ((nz6a6e@display-hex '#f)) (begin (set! nz6a6e@display-hex (lambda (nz6a77@n) (if (<= '0 nz6a77@n '9) (display nz6a77@n nz6a6a@p) (display (integer->char (+ (char->integer '#\a) (- nz6a77@n '10))) nz6a6a@p)))) (begin (let nz6a71@f ((nz6a6f@ls nz6a5f@x)) (if (not (null? nz6a6f@ls)) (begin (display '"/" nz6a6a@p) (for-each (lambda (nz6a73@c) (if (or (char<=? '#\a nz6a73@c '#\z) (char<=? '#\A nz6a73@c '#\Z) (char<=? '#\0 nz6a73@c '#\9) (memv nz6a73@c '(#\- #\. #\_ #\~))) (display nz6a73@c nz6a6a@p) (begin (display '"%" nz6a6a@p) (let ((nz6a75@n (char->integer nz6a73@c))) (begin (nz6a6e@display-hex (quotient nz6a75@n '16)) (nz6a6e@display-hex (remainder nz6a75@n '16))))))) (string->list (symbol->string (car nz6a6f@ls)))) (nz6a71@f (cdr nz6a6f@ls))) (void))) (nz6a69@extract))))))))) (set! nz6b8c@nz69ba@library-name->file-name nz69ba@library-name->file-name) (set! nz69bc@file-locator (nz68c0@nz679e@make-parameter (lambda (nz6a79@x) (let ((nz6a7b@str (nz69ba@library-name->file-name nz6a79@x))) (let nz6a83@f ((nz6a7d@ls (nz69b6@library-path)) (nz6a7e@exts (nz69b8@library-extensions)) (nz6a7f@failed-list '())) (if (null? nz6a7d@ls) (let ((nz6a8d@nz6a88 '#f) (nz6a8f@nz6a8a '#f) (nz6a91@nz6a89 '#f) (nz6a94@nz6a87 '#f) (nz6a96@make-library-resolution-condition '#f) (nz6a98@nz6a85 '#f) (nz6a9a@nz6a86 '#f) (nz6a9c@library-resolution-condition? '#f) (nz6a9e@condition-library '#f) (nz6aa0@condition-files '#f)) (begin (set! nz6a8d@nz6a88 (make-record-type-descriptor '&library-resolution nz8da3@nz8aea@&condition-rtd 'nz6a8b '#f '#f '#((immutable library) (immutable files)))) (set! nz6a8f@nz6a8a '#f) (set! nz6a91@nz6a89 (make-record-constructor-descriptor nz6a8d@nz6a88 nz8da4@nz8aec@&condition-rcd nz6a8f@nz6a8a)) (set! nz6a94@nz6a87 (record-predicate nz6a8d@nz6a88)) (set! nz6a96@make-library-resolution-condition (record-constructor nz6a91@nz6a89)) (set! nz6a98@nz6a85 (record-accessor nz6a8d@nz6a88 '0)) (set! nz6a9a@nz6a86 (record-accessor nz6a8d@nz6a88 '1)) (set! nz6a9c@library-resolution-condition? (condition-predicate nz6a8d@nz6a88)) (set! nz6a9e@condition-library (condition-accessor nz6a8d@nz6a88 nz6a98@nz6a85)) (set! nz6aa0@condition-files (condition-accessor nz6a8d@nz6a88 nz6a9a@nz6a86)) (raise (condition (nz8dc3@nz8b84@make-error) (nz8de5@nz8be0@make-who-condition 'expander) (nz8da9@nz8b41@make-message-condition '"cannot locate library in library-path") (nz6a96@make-library-resolution-condition nz6a79@x (reverse nz6a7f@failed-list)))))) (if (null? nz6a7e@exts) (nz6a83@f (cdr nz6a7d@ls) (nz69b8@library-extensions) nz6a7f@failed-list) (let ((nz6aa1@name (string-append (car nz6a7d@ls) nz6a7b@str (car nz6a7e@exts)))) (if (file-exists? nz6aa1@name) nz6aa1@name (nz6a83@f nz6a7d@ls (cdr nz6a7e@exts) (cons nz6aa1@name nz6a7f@failed-list))))))))) (lambda (nz6aa3@f) (if (procedure? nz6aa3@f) nz6aa3@f (assertion-violation 'file-locator '"not a procedure" nz6aa3@f))))) (set! nz6b8d@nz69bc@file-locator nz69bc@file-locator) (set! nz69be@serialize-all (lambda (nz6aa5@serialize nz6aa6@compile) (let ((nz6aaa@library-desc '#f)) (begin (set! nz6aaa@library-desc (lambda (nz6aad@x) (list (nz6978@library-id nz6aad@x) (nz697c@library-name nz6aad@x)))) (for-each (lambda (nz6aab@x) (if (nz69ac@library-source-file-name nz6aab@x) (nz6aa5@serialize (nz69ac@library-source-file-name nz6aab@x) (list (nz6978@library-id nz6aab@x) (nz697c@library-name nz6aab@x) (nz6980@library-version nz6aab@x) (map nz6aaa@library-desc (nz6984@library-imp* nz6aab@x)) (map nz6aaa@library-desc (nz6988@library-vis* nz6aab@x)) (map nz6aaa@library-desc (nz698c@library-inv* nz6aab@x)) (nz6990@library-subst nz6aab@x) (nz6994@library-env nz6aab@x) (nz6aa6@compile (nz69a0@library-visit-code nz6aab@x)) (nz6aa6@compile (nz69a4@library-invoke-code nz6aab@x)) (nz69a8@library-visible? nz6aab@x))) (void))) ((nz696a@current-library-collection))))))) (set! nz6b8e@nz69be@serialize-all nz69be@serialize-all) (set! nz69c0@current-precompiled-library-loader (nz68c0@nz679e@make-parameter (lambda (nz6aaf@filename nz6ab0@sk) '#f))) (set! nz6b8f@nz69c0@current-precompiled-library-loader nz69c0@current-precompiled-library-loader) (set! nz69c2@try-load-from-file (lambda (nz6ab3@filename) ((nz69c0@current-precompiled-library-loader) nz6ab3@filename (lambda nz6ad9 (let ((nz6ada (length nz6ad9))) (if (= nz6ada '11) (apply (lambda (nz6ab5@id nz6ab6@name nz6ab7@ver nz6ab8@imp* nz6ab9@vis* nz6aba@inv* nz6abb@exp-subst nz6abc@exp-env nz6abd@visit-proc nz6abe@invoke-proc nz6abf@visible?) (let nz6acd@f ((nz6acb@deps (append nz6ab8@imp* nz6ab9@vis* nz6aba@inv*))) (if (null? nz6acb@deps) (begin (nz69d6@install-library nz6ab5@id nz6ab6@name nz6ab7@ver nz6ab8@imp* nz6ab9@vis* nz6aba@inv* nz6abb@exp-subst nz6abc@exp-env nz6abd@visit-proc nz6abe@invoke-proc '#f '#f nz6abf@visible? '#f) '#t) (let ((nz6acf@d (car nz6acb@deps))) (let ((nz6ad1@label (car nz6acf@d)) (nz6ad2@dname (cadr nz6acf@d))) (let ((nz6ad5@l (nz69cc@find-library-by-name nz6ad2@dname))) (if (and (nz6976@library? nz6ad5@l) (eq? nz6ad1@label (nz6978@library-id nz6ad5@l))) (nz6acd@f (cdr nz6acb@deps)) (begin (if nz68ba@nz6792@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" nz6ab6@name nz6ad2@dname nz6ab3@filename nz6ad5@l nz6ad1@label (nz6978@library-id nz6ad5@l)) (void)) '#f)))))))) nz6ad9) (if (>= nz6ada '0) (apply (lambda nz6ad7@others '#f) nz6ad9) (error 'apply '"invalid arg count")))))))) (set! nz6b90@nz69c2@try-load-from-file nz69c2@try-load-from-file) (set! nz69c4@library-loader (nz68c0@nz679e@make-parameter (lambda (nz6adb@x) (let ((nz6add@file-name ((nz69bc@file-locator) nz6adb@x))) (if (not nz6add@file-name) (assertion-violation '#f '"cannot file library" nz6adb@x) (or (nz69c2@try-load-from-file nz6add@file-name) ((nz69c6@current-library-expander) (nz68bf@nz679c@read-library-source-file nz6add@file-name) nz6add@file-name (lambda (nz6adf@name) (if (not (fast-equal? nz6adf@name nz6adb@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (nz6ae5@nz6ae2 nz6ae6@nz6ae4) (let ((nz6ae9@e nz6ae6@nz6ae4) (nz6aea@p nz6ae5@nz6ae2)) (begin (display '"expected to find library " nz6aea@p) (write nz6adb@x nz6aea@p) (display '" in file " nz6aea@p) (display nz6add@file-name nz6aea@p) (display '", found " nz6aea@p) (write nz6adf@name nz6aea@p) (display '" instead" nz6aea@p) (nz6ae9@e)))))) (void)))))))) (lambda (nz6aed@f) (if (procedure? nz6aed@f) nz6aed@f (assertion-violation 'library-locator '"not a procedure" nz6aed@f))))) (set! nz6b91@nz69c4@library-loader nz69c4@library-loader) (set! nz69c6@current-library-expander (nz68c0@nz679e@make-parameter (lambda (nz6aef@x) (assertion-violation 'library-expander '"not initialized")) (lambda (nz6af1@f) (if (procedure? nz6af1@f) nz6af1@f (assertion-violation 'library-expander '"not a procedure" nz6af1@f))))) (set! nz6b92@nz69c6@current-library-expander nz69c6@current-library-expander) (set! nz69c8@external-pending-libraries (nz68c0@nz679e@make-parameter '())) (set! nz6b93@nz69c8@external-pending-libraries nz69c8@external-pending-libraries) (set! nz69ca@find-external-library (lambda (nz6af3@name) (begin (if (member nz6af3@name (nz69c8@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" nz6af3@name) (void)) (let ((nz6af9@nz6af6 nz69c8@external-pending-libraries) (nz6afa@nz6af8 (cons nz6af3@name (nz69c8@external-pending-libraries)))) (let ((nz6afd@swap (lambda () (let ((nz6aff@t (nz6af9@nz6af6))) (begin (nz6af9@nz6af6 nz6afa@nz6af8) (set! nz6afa@nz6af8 nz6aff@t)))))) (dynamic-wind nz6afd@swap (lambda () (begin ((nz69c4@library-loader) nz6af3@name) (or (nz69b4@find-library-by (lambda (nz6b01@x) (fast-equal? (nz697c@library-name nz6b01@x) nz6af3@name))) (assertion-violation '#f '"handling external library did not yield the correct library" nz6af3@name)))) nz6afd@swap)))))) (set! nz6b94@nz69ca@find-external-library nz69ca@find-external-library) (set! nz69cc@find-library-by-name (lambda (nz6b03@name) (or (nz69b4@find-library-by (lambda (nz6b05@x) (fast-equal? (nz697c@library-name nz6b05@x) nz6b03@name))) (nz69ca@find-external-library nz6b03@name)))) (set! nz6b95@nz69cc@find-library-by-name nz69cc@find-library-by-name) (set! nz69ce@library-exists? (lambda (nz6b07@name) (and (nz69b4@find-library-by (lambda (nz6b09@x) (fast-equal? (nz697c@library-name nz6b09@x) nz6b07@name))) '#t))) (set! nz6b96@nz69ce@library-exists? nz69ce@library-exists?) (set! nz69d0@find-library-by-spec/die (lambda (nz6b0b@spec) (let ((nz6b0d@id (car nz6b0b@spec))) (or (nz69b4@find-library-by (lambda (nz6b0f@x) (eq? nz6b0d@id (nz6978@library-id nz6b0f@x)))) (assertion-violation '#f '"cannot find library with required spec" nz6b0b@spec))))) (set! nz6b97@nz69d0@find-library-by-spec/die nz69d0@find-library-by-spec/die) (set! nz69d2@label->binding-table (make-eq-hashtable)) (set! nz6b98@nz69d2@label->binding-table nz69d2@label->binding-table) (set! nz69d4@install-library-record (lambda (nz6b11@lib) (begin (let ((nz6b13@exp-env (nz6994@library-env nz6b11@lib))) (for-each (lambda (nz6b15@x) (let ((nz6b17@label (car nz6b15@x)) (nz6b18@binding (cdr nz6b15@x))) (let ((nz6b1b@binding (let ((nz6b1d@t (car nz6b18@binding))) (if (memv nz6b1d@t '(global)) (cons 'global (cons nz6b11@lib (cdr nz6b18@binding))) (if (memv nz6b1d@t '(global-macro)) (cons 'global-macro (cons nz6b11@lib (cdr nz6b18@binding))) (if (memv nz6b1d@t '(global-macro!)) (cons 'global-macro! (cons nz6b11@lib (cdr nz6b18@binding))) nz6b18@binding)))))) (begin (if (hashtable-ref nz69d2@label->binding-table nz6b17@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" nz6b17@label (hashtable-ref nz69d2@label->binding-table nz6b17@label '#f) nz6b1b@binding) (exit)) (void)) (hashtable-set! nz69d2@label->binding-table nz6b17@label nz6b1b@binding))))) nz6b13@exp-env)) ((nz696a@current-library-collection) nz6b11@lib)))) (set! nz6b99@nz69d4@install-library-record nz69d4@install-library-record) (set! nz69d6@install-library (lambda (nz6b1f@id nz6b20@name nz6b21@ver nz6b22@imp* nz6b23@vis* nz6b24@inv* nz6b25@exp-subst nz6b26@exp-env nz6b27@visit-proc nz6b28@invoke-proc nz6b29@visit-code nz6b2a@invoke-code nz6b2b@visible? nz6b2c@source-file-name) (let ((nz6b3b@imp-lib* (map nz69d0@find-library-by-spec/die nz6b22@imp*)) (nz6b3c@vis-lib* (map nz69d0@find-library-by-spec/die nz6b23@vis*)) (nz6b3d@inv-lib* (map nz69d0@find-library-by-spec/die nz6b24@inv*))) (begin (if (not (and (symbol? nz6b1f@id) (list? nz6b20@name) (list? nz6b21@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" nz6b1f@id nz6b20@name nz6b21@ver) (void)) (if (nz69ce@library-exists? nz6b20@name) (assertion-violation 'install-library '"library is already installed" nz6b20@name) (void)) (let ((nz6b41@lib (make-simple-struct 'library '15 (list nz6b1f@id nz6b20@name nz6b21@ver nz6b3b@imp-lib* nz6b3c@vis-lib* nz6b3d@inv-lib* nz6b25@exp-subst nz6b26@exp-env nz6b27@visit-proc nz6b28@invoke-proc nz6b29@visit-code nz6b2a@invoke-code nz6b2b@visible? nz6b2c@source-file-name)))) (nz69d4@install-library-record nz6b41@lib)))))) (set! nz6b9a@nz69d6@install-library nz69d6@install-library) (set! nz69d8@imported-label->binding (lambda (nz6b43@lab) (hashtable-ref nz69d2@label->binding-table nz6b43@lab '#f))) (set! nz6b9b@nz69d8@imported-label->binding nz69d8@imported-label->binding) (set! nz69da@invoke-library (lambda (nz6b45@lib) (begin (display '"invoke-library" (current-error-port)) (display (nz697c@library-name nz6b45@lib) (current-error-port)) (newline (current-error-port)) (let ((nz6b47@invoke (nz699c@library-invoke-state nz6b45@lib))) (if (procedure? nz6b47@invoke) (begin (nz699e@set-library-invoke-state! nz6b45@lib (lambda () (assertion-violation 'invoke '"circularity detected" nz6b45@lib))) (display '"invoke-library1" (current-error-port)) (newline (current-error-port)) (for-each nz69da@invoke-library (nz698c@library-inv* nz6b45@lib)) (display '"invoke-library2" (current-error-port)) (newline (current-error-port)) (nz699e@set-library-invoke-state! nz6b45@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" nz6b45@lib))) (display '"invoke-library3") (newline) (nz6b47@invoke) (display '"invoke-library4") (newline) (nz699e@set-library-invoke-state! nz6b45@lib '#t)) (void)))))) (set! nz6b9c@nz69da@invoke-library nz69da@invoke-library) (set! nz69dc@visit-library (lambda (nz6b49@lib) (let ((nz6b4b@visit (nz6998@library-visit-state nz6b49@lib))) (if (procedure? nz6b4b@visit) (begin (nz699a@set-library-visit-state! nz6b49@lib (lambda () (assertion-violation 'visit '"circularity detected" nz6b49@lib))) (for-each nz69da@invoke-library (nz6988@library-vis* nz6b49@lib)) (nz699a@set-library-visit-state! nz6b49@lib (lambda () (assertion-violation 'invoke '"first visit did not return" nz6b49@lib))) (nz6b4b@visit) (nz699a@set-library-visit-state! nz6b49@lib '#t)) (void))))) (set! nz6b9d@nz69dc@visit-library nz69dc@visit-library) (set! nz69de@invoke-library-by-spec (lambda (nz6b4d@spec) (nz69da@invoke-library (nz69d0@find-library-by-spec/die nz6b4d@spec)))) (set! nz6b9e@nz69de@invoke-library-by-spec nz69de@invoke-library-by-spec) (set! nz69e0@invoke-library-by-name (lambda (nz6b4f@name) (let ((nz6b55@nz6b52 nz68c1@nz67a0@mosh-cache-dir) (nz6b56@nz6b54 (create-mosh-cache-dir))) (let ((nz6b59@swap (lambda () (let ((nz6b5b@t (nz6b55@nz6b52))) (begin (nz6b55@nz6b52 nz6b56@nz6b54) (set! nz6b56@nz6b54 nz6b5b@t)))))) (dynamic-wind nz6b59@swap (lambda () (nz69da@invoke-library (nz69cc@find-library-by-name nz6b4f@name))) nz6b59@swap))))) (set! nz6b9f@nz69e0@invoke-library-by-name nz69e0@invoke-library-by-name) (set! nz69e2@installed-libraries (lambda nz6b63 (let ((nz6b64 (length nz6b63))) (if (= nz6b64 '1) (apply (lambda (nz6b5d@all?) (let nz6b61@f ((nz6b5f@ls ((nz696a@current-library-collection)))) (if (null? nz6b5f@ls) '() (if (or nz6b5d@all? (nz69a8@library-visible? (car nz6b5f@ls))) (cons (car nz6b5f@ls) (nz6b61@f (cdr nz6b5f@ls))) (nz6b61@f (cdr nz6b5f@ls)))))) nz6b63) (if (= nz6b64 '0) (apply (lambda () (nz69e2@installed-libraries '#f)) nz6b63) (error 'apply '"invalid arg count")))))) (set! nz6ba0@nz69e2@installed-libraries nz69e2@installed-libraries) (set! nz69e4@library-spec (lambda (nz6b65@x) (begin (if (not (nz6976@library? nz6b65@x)) (assertion-violation 'library-spec '"not a library" nz6b65@x) (void)) (list (nz6978@library-id nz6b65@x) (nz697c@library-name nz6b65@x) (nz6980@library-version nz6b65@x))))) (set! nz6ba1@nz69e4@library-spec nz69e4@library-spec) (void))
(begin (set! nz6ba5@build-global-define (unspecified)) (set! nz6c16@build-lambda (unspecified)) (set! nz6c18@build-case-lambda (unspecified)) (set! nz6c46@build-sequence (unspecified)) (set! nz6c48@build-void (unspecified)) (set! nz6c4a@build-letrec (unspecified)) (set! nz6c4c@build-let (unspecified)) (set! nz6c4e@build-named-let (unspecified)) (set! nz6c50@build-letrec* (unspecified)) (set! nz6c52@build-library-letrec* (unspecified)) (set! nz6c54@build-receive (unspecified)) (set! nz6ba5@build-global-define (lambda (nz6c55@x) (nz6c48@build-void))) (set! nz6ce9@nz6ba5@build-global-define nz6ba5@build-global-define) (set! nz6c16@build-lambda (lambda (nz6c57@ae nz6c58@vars nz6c59@exp) (list 'lambda nz6c58@vars nz6c59@exp))) (set! nz6cea@nz6c16@build-lambda nz6c16@build-lambda) (set! nz6c18@build-case-lambda (lambda (nz6c5d@ae nz6c5e@vars* nz6c5f@exp*) (let ((nz6c64@build-error '#f) (nz6c66@build-pred '#f) (nz6c68@build-apply '#f) (nz6c6a@expand-case-lambda '#f)) (begin (set! nz6c64@build-error (lambda (nz6c9b@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! nz6c66@build-pred (lambda (nz6c83@ae nz6c84@n nz6c85@vars) (call-with-values (lambda () (let nz6c91@f ((nz6c8d@vars nz6c85@vars) (nz6c8e@count '0)) (if (pair? nz6c8d@vars) (nz6c91@f (cdr nz6c8d@vars) (+ nz6c8e@count '1)) (if (null? nz6c8d@vars) (values nz6c8e@count '=) (values nz6c8e@count '>=))))) (lambda (nz6c93@nz6c8a nz6c94@nz6c8c) (let ((nz6c97@pred nz6c94@nz6c8c) (nz6c98@count nz6c93@nz6c8a)) (list (list 'primitive nz6c97@pred) nz6c84@n (list 'quote nz6c98@count))))))) (set! nz6c68@build-apply (lambda (nz6c7b@ae nz6c7c@g nz6c7d@vars nz6c7e@exp) (list '(primitive apply) (nz6c16@build-lambda nz6c7b@ae nz6c7d@vars nz6c7e@exp) nz6c7c@g))) (set! nz6c6a@expand-case-lambda (lambda (nz6c6b@ae nz6c6c@vars nz6c6d@exp*) (let ((nz6c71@g (gensym)) (nz6c72@n (gensym))) (list 'lambda nz6c71@g (nz6c4c@build-let nz6c6b@ae (list nz6c72@n) (list (list '(primitive length) nz6c71@g)) (let nz6c79@f ((nz6c75@vars* nz6c5e@vars*) (nz6c76@exp* nz6c6d@exp*)) (if (null? nz6c75@vars*) (nz6c64@build-error nz6c6b@ae) (list 'if (nz6c66@build-pred nz6c6b@ae nz6c72@n (car nz6c75@vars*)) (nz6c68@build-apply nz6c6b@ae nz6c71@g (car nz6c75@vars*) (car nz6c76@exp*)) (nz6c79@f (cdr nz6c75@vars*) (cdr nz6c76@exp*)))))))))) (if (= (length nz6c5f@exp*) '1) (nz6c16@build-lambda nz6c5d@ae (car nz6c5e@vars*) (car nz6c5f@exp*)) (nz6c6a@expand-case-lambda nz6c5d@ae nz6c5e@vars* nz6c5f@exp*)))))) (set! nz6ceb@nz6c18@build-case-lambda nz6c18@build-case-lambda) (set! nz6c46@build-sequence (lambda (nz6c9d@ae nz6c9e@exps) (let nz6ca3@loop ((nz6ca1@exps nz6c9e@exps)) (if (null? (cdr nz6ca1@exps)) (car nz6ca1@exps) (if (equal? (car nz6ca1@exps) (nz6c48@build-void)) (nz6ca3@loop (cdr nz6ca1@exps)) (cons 'begin nz6ca1@exps)))))) (set! nz6cec@nz6c46@build-sequence nz6c46@build-sequence) (set! nz6c48@build-void (lambda () '((primitive void)))) (set! nz6ced@nz6c48@build-void nz6c48@build-void) (set! nz6c4a@build-letrec (lambda (nz6ca5@ae nz6ca6@vars nz6ca7@val-exps nz6ca8@body-exp) (if (null? nz6ca6@vars) nz6ca8@body-exp (list 'letrec (map list nz6ca6@vars nz6ca7@val-exps) nz6ca8@body-exp)))) (set! nz6cee@nz6c4a@build-letrec nz6c4a@build-letrec) (set! nz6c4c@build-let (lambda (nz6cad@ae nz6cae@vars nz6caf@val-exps nz6cb0@body-exp) (if (null? nz6cae@vars) nz6cb0@body-exp (list 'let (map list nz6cae@vars nz6caf@val-exps) nz6cb0@body-exp)))) (set! nz6cef@nz6c4c@build-let nz6c4c@build-let) (set! nz6c4e@build-named-let (lambda (nz6cb5@ae nz6cb6@name nz6cb7@vars nz6cb8@val-exps nz6cb9@body-exp) (list 'let nz6cb6@name (map list nz6cb7@vars nz6cb8@val-exps) nz6cb9@body-exp))) (set! nz6cf0@nz6c4e@build-named-let nz6c4e@build-named-let) (set! nz6c50@build-letrec* (lambda (nz6cbf@ae nz6cc0@vars nz6cc1@val-exps nz6cc2@body-exp) (if (null? nz6cc0@vars) nz6cc2@body-exp (nz6c4c@build-let nz6cbf@ae nz6cc0@vars (map (lambda (nz6cc7@x) (list 'quote '#f)) nz6cc0@vars) (nz6c46@build-sequence nz6cbf@ae (append (map (lambda (nz6cc9@lhs nz6cca@rhs) (list 'set! nz6cc9@lhs nz6cca@rhs)) nz6cc0@vars nz6cc1@val-exps) (list nz6cc2@body-exp))))))) (set! nz6cf1@nz6c50@build-letrec* nz6c50@build-letrec*) (set! nz6c52@build-library-letrec* (lambda (nz6ccd@ae nz6cce@name nz6ccf@vars nz6cd0@locs nz6cd1@val-exps nz6cd2@body-exp) (cons 'begin (append (map (lambda (nz6cd9@var) (cons 'set! (cons nz6cd9@var '((unspecified))))) nz6ccf@vars) (append (apply append (map (lambda (nz6cdb@var nz6cdc@loc nz6cdd@val-exp) (list (list 'set! nz6cdb@var nz6cdd@val-exp) (list 'set! nz6cdc@loc nz6cdb@var))) nz6ccf@vars nz6cd0@locs nz6cd1@val-exps)) (list nz6cd2@body-exp)))))) (set! nz6cf2@nz6c52@build-library-letrec* nz6c52@build-library-letrec*) (set! nz6c54@build-receive (lambda (nz6ce1@ae nz6ce2@vars nz6ce3@producer nz6ce4@body*) (begin (display '"************** in ") (cons 'receive (cons nz6ce2@vars (cons nz6ce3@producer nz6ce4@body*)))))) (set! nz6cf3@nz6c54@build-receive nz6c54@build-receive) (void))
(begin (set! nz6d02@file-options-macro (unspecified)) (set! nz6d04@set-cons (unspecified)) (set! nz6d06@set-union (unspecified)) (set! nz6d0b@top-mark* (unspecified)) (set! nz6d0d@top-marked? (unspecified)) (set! nz6d0f@gen-lexical (unspecified)) (set! nz6d11@gen-global (unspecified)) (set! nz6d13@gen-label (unspecified)) (set! nz6d15@gen-top-level-label (unspecified)) (set! nz6d17@gen-define-label+loc (unspecified)) (set! nz6d19@gen-define-label (unspecified)) (set! nz6d23@rib? (unspecified)) (set! nz6d25@rib-sym* (unspecified)) (set! nz6d27@set-rib-sym*! (unspecified)) (set! nz6d29@rib-mark** (unspecified)) (set! nz6d2b@set-rib-mark**! (unspecified)) (set! nz6d2d@rib-label* (unspecified)) (set! nz6d2f@set-rib-label*! (unspecified)) (set! nz6d31@rib-sealed/freq (unspecified)) (set! nz6d33@set-rib-sealed/freq! (unspecified)) (set! nz6d35@rib-cache (unspecified)) (set! nz6d37@set-rib-cache! (unspecified)) (set! nz6d39@dummy (unspecified)) (set! nz6d3b@make-empty-rib (unspecified)) (set! nz6d3d@extend-rib! (unspecified)) (set! nz6d3f@extend-rib/nc! (unspecified)) (set! nz6d41@make-rib-map (unspecified)) (set! nz6d43@seal-rib! (unspecified)) (set! nz6d45@unseal-rib! (unspecified)) (set! nz6d47@make-full-rib (unspecified)) (set! nz6d49@rp (unspecified)) (set! nz6d53@stx? (unspecified)) (set! nz6d55@stx-expr (unspecified)) (set! nz6d57@set-stx-expr! (unspecified)) (set! nz6d59@stx-mark* (unspecified)) (set! nz6d5b@set-stx-mark*! (unspecified)) (set! nz6d5d@stx-subst* (unspecified)) (set! nz6d5f@set-stx-subst*! (unspecified)) (set! nz6d61@stx-ae* (unspecified)) (set! nz6d63@set-stx-ae*! (unspecified)) (set! nz6d65@dummy (unspecified)) (set! nz6d67@datum->stx (unspecified)) (set! nz6d69@gen-mark (unspecified)) (set! nz6d6b@anti-mark (unspecified)) (set! nz6d6d@anti-mark? (unspecified)) (set! nz6d6f@mkstx (unspecified)) (set! nz6d71@add-mark (unspecified)) (set! nz6d73@add-subst (unspecified)) (set! nz6d75@syntax-kind? (unspecified)) (set! nz6d77@syntax-vector->list (unspecified)) (set! nz6d79@syntax-pair? (unspecified)) (set! nz6d7b@syntax-vector? (unspecified)) (set! nz6d7d@syntax-null? (unspecified)) (set! nz6d7f@syntax-list? (unspecified)) (set! nz6d81@syntax-car (unspecified)) (set! nz6d83@syntax-cdr (unspecified)) (set! nz6d85@syntax->list (unspecified)) (set! nz6d87@id? (unspecified)) (set! nz6d89@id->sym (unspecified)) (set! nz6d8b@bound-id=? (unspecified)) (set! nz6d8d@free-id=? (unspecified)) (set! nz6d8f@valid-bound-ids? (unspecified)) (set! nz6d91@distinct-bound-ids? (unspecified)) (set! nz6d93@bound-id-member? (unspecified)) (set! nz6d95@self-evaluating? (unspecified)) (set! nz6d97@strip-annotations (unspecified)) (set! nz6d99@strip (unspecified)) (set! nz6d9b@stx->datum (unspecified)) (set! nz6d9d@id->label (unspecified)) (set! nz6d9f@label->binding (unspecified)) (set! nz6da1@make-binding (unspecified)) (set! nz6da3@binding-type (unspecified)) (set! nz6da5@binding-value (unspecified)) (set! nz6da7@raise-unbound-error (unspecified)) (set! nz6da9@syntax-type (unspecified)) (set! nz6db7@sanitize-binding (unspecified)) (set! nz6db9@make-variable-transformer (unspecified)) (set! nz6dbb@variable-transformer? (unspecified)) (set! nz6dbd@variable-transformer-procedure (unspecified)) (set! nz6dbf@make-eval-transformer (unspecified)) (set! nz6f10@parse-define (unspecified)) (set! nz6f12@parse-define-syntax (unspecified)) (set! nz6f14@scheme-stx-hashtable (unspecified)) (set! nz6f16@scheme-stx (unspecified)) (set! nz6f18@lexical-var (unspecified)) (set! nz6f1a@lexical-mutable? (unspecified)) (set! nz6f1c@set-lexical-mutable! (unspecified)) (set! nz6f1e@add-lexical (unspecified)) (set! nz6f20@add-lexicals (unspecified)) (set! nz6f22@letrec-helper (unspecified)) (set! nz6f24@let-transformer (unspecified)) (set! nz6f26@letrec-transformer (unspecified)) (set! nz6f28@letrec*-transformer (unspecified)) (set! nz6f2a@fluid-let-syntax-transformer (unspecified)) (set! nz6f2c@type-descriptor-transformer (unspecified)) (set! nz6f2e@record-type-descriptor-transformer (unspecified)) (set! nz6f30@record-constructor-descriptor-transformer (unspecified)) (set! nz6f32@when-macro (unspecified)) (set! nz6f34@unless-macro (unspecified)) (set! nz6f36@if-transformer (unspecified)) (set! nz6f38@and-transformer (unspecified)) (set! nz6f3a@or-transformer (unspecified)) (set! nz6f3c@case-macro (unspecified)) (set! nz6f3e@quote-transformer (unspecified)) (set! nz6f40@case-lambda-transformer (unspecified)) (set! nz6f42@lambda-transformer (unspecified)) (set! nz6f44@bless (unspecified)) (set! nz6f46@with-syntax-macro (unspecified)) (set! nz6f48@invalid-fmls-error (unspecified)) (set! nz6f4a@let-macro (unspecified)) (set! nz6f4c@let-values-macro (unspecified)) (set! nz6f4e@let*-values-macro (unspecified)) (set! nz6f50@trace-lambda-macro (unspecified)) (set! nz6f52@trace-define-macro (unspecified)) (set! nz6f54@trace-define-syntax-macro (unspecified)) (set! nz6f56@trace-let/rec-syntax (unspecified)) (set! nz6f58@trace-let-syntax-macro (unspecified)) (set! nz6f5a@trace-letrec-syntax-macro (unspecified)) (set! nz6f5c@guard-macro (unspecified)) (set! nz6f5e@define-enumeration-macro (unspecified)) (set! nz6f60@time-macro (unspecified)) (set! nz6f62@delay-macro (unspecified)) (set! nz6f64@assert-macro (unspecified)) (set! nz6f66@endianness-macro (unspecified)) (set! nz6f68@identifier-syntax-macro (unspecified)) (set! nz6f6a@do-macro (unspecified)) (set! nz6f6c@let*-macro (unspecified)) (set! nz6f6e@or-macro (unspecified)) (set! nz6f70@and-macro (unspecified)) (set! nz6f72@cond-macro (unspecified)) (set! nz6f74@do-include (unspecified)) (set! nz6f76@include-macro (unspecified)) (set! nz6f78@include-into-macro (unspecified)) (set! nz6f7a@syntax-rules-macro (unspecified)) (set! nz6f7c@quasiquote-macro (unspecified)) (set! nz6f7e@quasisyntax-macro (unspecified)) (set! nz6f80@define-struct-macro (unspecified)) (set! nz6f82@define-record-type-macro (unspecified)) (set! nz6f84@define-condition-type-macro (unspecified)) (set! nz6f86@incorrect-usage-macro (unspecified)) (set! nz6f88@parameterize-macro (unspecified)) (set! nz6f8a@foreign-call-transformer (unspecified)) (set! nz6f8c@convert-pattern (unspecified)) (set! nz6f8e@syntax-dispatch (unspecified)) (set! nz6f90@ellipsis? (unspecified)) (set! nz6f92@underscore? (unspecified)) (set! nz6f94@verify-literals (unspecified)) (set! nz6f96@syntax-case-transformer (unspecified)) (set! nz6f98@ellipsis-map (unspecified)) (set! nz6f9a@syntax-transformer (unspecified)) (set! nz6f9c@core-macro-transformer (unspecified)) (set! nz6f9e@symbol-macro (unspecified)) (set! nz6fa0@macro-transformer (unspecified)) (set! nz6fa2@local-macro-transformer (unspecified)) (set! nz6fa4@do-macro-call (unspecified)) (set! nz6fa6@chi-macro (unspecified)) (set! nz6fa8@chi-local-macro (unspecified)) (set! nz6faa@chi-global-macro (unspecified)) (set! nz6fac@chi-expr* (unspecified)) (set! nz6fae@chi-application (unspecified)) (set! nz6fb0@chi-expr (unspecified)) (set! nz6fb2@chi-set! (unspecified)) (set! nz6fb4@verify-formals (unspecified)) (set! nz6fb6@chi-lambda-clause (unspecified)) (set! nz6fb8@chi-lambda-clause* (unspecified)) (set! nz6fba@chi-defun (unspecified)) (set! nz6fbc@chi-rhs (unspecified)) (set! nz6fbe@expand-interaction-rhs*/init* (unspecified)) (set! nz6fc0@chi-rhs* (unspecified)) (set! nz6fc2@find-bound=? (unspecified)) (set! nz6fc4@find-dups (unspecified)) (set! nz6fc6@chi-internal (unspecified)) (set! nz6fc8@parse-module (unspecified)) (set! nz6fd2@module-interface? (unspecified)) (set! nz6fd4@module-interface-first-mark (unspecified)) (set! nz6fd6@set-module-interface-first-mark! (unspecified)) (set! nz6fd8@module-interface-exp-id-vec (unspecified)) (set! nz6fda@set-module-interface-exp-id-vec! (unspecified)) (set! nz6fdc@module-interface-exp-lab-vec (unspecified)) (set! nz6fde@set-module-interface-exp-lab-vec! (unspecified)) (set! nz6fe0@dummy (unspecified)) (set! nz6fe2@module-interface-exp-id* (unspecified)) (set! nz6fe4@chi-internal-module (unspecified)) (set! nz6fe6@chi-body* (unspecified)) (set! nz6fe8@expand-transformer (unspecified)) (set! nz6fea@parse-exports (unspecified)) (set! nz6fec@parse-library-name (unspecified)) (set! nz6fee@parse-library (unspecified)) (set! nz6ff0@parse-import-spec* (unspecified)) (set! nz6ff2@make-top-rib (unspecified)) (set! nz6ff4@make-collector (unspecified)) (set! nz6ff6@inv-collector (unspecified)) (set! nz6ff8@vis-collector (unspecified)) (set! nz6ffa@imp-collector (unspecified)) (set! nz6ffc@chi-library-internal (unspecified)) (set! nz6ffe@chi-interaction-expr (unspecified)) (set! nz7000@library-body-expander (unspecified)) (set! nz7002@core-library-expander (unspecified)) (set! nz7004@parse-top-level-program (unspecified)) (set! nz7006@top-level-expander (unspecified)) (set! nz7008@rp (unspecified)) (set! nz7012@env? (unspecified)) (set! nz7014@env-names (unspecified)) (set! nz7016@set-env-names! (unspecified)) (set! nz7018@env-labels (unspecified)) (set! nz701a@set-env-labels! (unspecified)) (set! nz701c@env-itc (unspecified)) (set! nz701e@set-env-itc! (unspecified)) (set! nz7020@dummy (unspecified)) (set! nz7022@rp (unspecified)) (set! nz702c@interaction-env? (unspecified)) (set! nz702e@interaction-env-rib (unspecified)) (set! nz7030@set-interaction-env-rib! (unspecified)) (set! nz7032@interaction-env-r (unspecified)) (set! nz7034@set-interaction-env-r! (unspecified)) (set! nz7036@interaction-env-locs (unspecified)) (set! nz7038@set-interaction-env-locs! (unspecified)) (set! nz703a@dummy (unspecified)) (set! nz703c@interaction-environment-symbols (unspecified)) (set! nz703e@environment-bindings (unspecified)) (set! nz7040@parse-binding (unspecified)) (set! nz7042@environment? (unspecified)) (set! nz7044@environment-symbols (unspecified)) (set! nz7046@environment (unspecified)) (set! nz7048@null-environment (unspecified)) (set! nz704a@scheme-report-environment (unspecified)) (set! nz704c@expand (unspecified)) (set! nz704e@eval (unspecified)) (set! nz7050@library-expander (unspecified)) (set! nz7052@boot-library-expand (unspecified)) (set! nz7054@rev-map-append (unspecified)) (set! nz7056@build-exports (unspecified)) (set! nz7058@make-export-subst (unspecified)) (set! nz705a@make-export-env/macros (unspecified)) (set! nz705c@generate-temporaries (unspecified)) (set! nz705e@free-identifier=? (unspecified)) (set! nz7060@bound-identifier=? (unspecified)) (set! nz7062@make-source-condition (unspecified)) (set! nz7064@extract-position-condition (unspecified)) (set! nz7066@expression-position (unspecified)) (set! nz7068@assertion-error (unspecified)) (set! nz706a@syntax-error (unspecified)) (set! nz706c@syntax-violation* (unspecified)) (set! nz706e@syntax-violation (unspecified)) (set! nz7070@identifier? (unspecified)) (set! nz7072@datum->syntax (unspecified)) (set! nz7074@syntax->datum (unspecified)) (set! nz7076@ungensym-all (unspecified)) (set! nz7078@compile-r6rs-top-level (unspecified)) (set! nz707a@pre-compile-r6rs-top-level (unspecified)) (set! nz707c@interaction-environment (unspecified)) (set! nz707e@top-level-context (unspecified)) (set! nz6d02@file-options-macro (lambda (nz707f@x) (let ((nz7082@valid-option? '#f)) (begin (set! nz7082@valid-option? (lambda (nz708b@x) (and (nz6d87@id? nz708b@x) (memq (nz6d89@id->sym nz708b@x) '(no-fail no-create no-truncate))))) (let ((nz7083@t nz707f@x)) (let ((nz7085@ls/false (nz6f8e@syntax-dispatch nz7083@t '(_ . each-any)))) (if (and nz7085@ls/false (apply (lambda (nz7087@opt*) (for-all nz7082@valid-option? nz7087@opt*)) nz7085@ls/false)) (apply (lambda (nz7089@opt*) (nz6f44@bless (list 'make-file-options (list 'quote nz7089@opt*)))) nz7085@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7083@t)))))))) (set! nz89d5@nz6d02@file-options-macro nz6d02@file-options-macro) (set! nz6d04@set-cons (lambda (nz708d@x nz708e@ls) (if (memq nz708d@x nz708e@ls) nz708e@ls (cons nz708d@x nz708e@ls)))) (set! nz89d6@nz6d04@set-cons nz6d04@set-cons) (set! nz6d06@set-union (lambda (nz7091@ls1 nz7092@ls2) (if (null? nz7091@ls1) nz7092@ls2 (if (memq (car nz7091@ls1) nz7092@ls2) (nz6d06@set-union (cdr nz7091@ls1) nz7092@ls2) (cons (car nz7091@ls1) (nz6d06@set-union (cdr nz7091@ls1) nz7092@ls2)))))) (set! nz89d7@nz6d06@set-union nz6d06@set-union) (set! nz6d0b@top-mark* '(top)) (set! nz89d8@nz6d0b@top-mark* nz6d0b@top-mark*) (set! nz6d0d@top-marked? (lambda (nz7095@m*) (memq 'top nz7095@m*))) (set! nz89d9@nz6d0d@top-marked? nz6d0d@top-marked?) (set! nz6d0f@gen-lexical (lambda (nz7097@sym) (if (symbol? nz7097@sym) (gensym nz7097@sym) (if (nz6d53@stx? nz7097@sym) (nz6d0f@gen-lexical (nz6d89@id->sym nz7097@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" nz7097@sym))))) (set! nz89da@nz6d0f@gen-lexical nz6d0f@gen-lexical) (set! nz6d11@gen-global (lambda (nz7099@x) (nz6d0f@gen-lexical nz7099@x))) (set! nz89db@nz6d11@gen-global nz6d11@gen-global) (set! nz6d13@gen-label (lambda (nz709b@_) (gensym))) (set! nz89dc@nz6d13@gen-label nz6d13@gen-label) (set! nz6d15@gen-top-level-label (lambda (nz709d@id nz709e@rib) (let ((nz70a2@find '#f)) (begin (set! nz70a2@find (lambda (nz70ad@sym nz70ae@mark* nz70af@sym* nz70b0@mark** nz70b1@label*) (and (pair? nz70af@sym*) (if (and (eq? nz70ad@sym (car nz70af@sym*)) (same-marks? nz70ae@mark* (car nz70b0@mark**))) (car nz70b1@label*) (nz70a2@find nz70ad@sym nz70ae@mark* (cdr nz70af@sym*) (cdr nz70b0@mark**) (cdr nz70b1@label*)))))) (let ((nz70a3@sym (nz6d89@id->sym nz709d@id)) (nz70a4@mark* (nz6d59@stx-mark* nz709d@id))) (let ((nz70a7@sym* (nz6d25@rib-sym* nz709e@rib))) (let ((nz70a9@t (and (memq nz70a3@sym (nz6d25@rib-sym* nz709e@rib)) (nz70a2@find nz70a3@sym nz70a4@mark* nz70a7@sym* (nz6d29@rib-mark** nz709e@rib) (nz6d2d@rib-label* nz709e@rib))))) (if nz70a9@t ((lambda (nz70ab@label) (if (nz6b9b@nz69d8@imported-label->binding nz70ab@label) (gensym) nz70ab@label)) nz70a9@t) (gensym))))))))) (set! nz89dd@nz6d15@gen-top-level-label nz6d15@gen-top-level-label) (set! nz6d17@gen-define-label+loc (lambda (nz70b7@id nz70b8@rib) (let ((nz70bb@t (nz707e@top-level-context))) (if nz70bb@t ((lambda (nz70bd@env) (let ((nz70bf@label (nz6d15@gen-top-level-label nz70b7@id nz70b8@rib)) (nz70c0@locs (nz7036@interaction-env-locs nz70bd@env))) (values nz70bf@label (let ((nz70c3@t (assq nz70bf@label nz70c0@locs))) (if nz70c3@t (cdr nz70c3@t) (let ((nz70c5@loc (nz6d0f@gen-lexical nz70b7@id))) (begin (nz7038@set-interaction-env-locs! nz70bd@env (cons (cons nz70bf@label nz70c5@loc) nz70c0@locs)) nz70c5@loc))))))) nz70bb@t) (values (gensym) (nz6d0f@gen-lexical nz70b7@id)))))) (set! nz89de@nz6d17@gen-define-label+loc nz6d17@gen-define-label+loc) (set! nz6d19@gen-define-label (lambda (nz70c7@id nz70c8@rib) (if (nz707e@top-level-context) (nz6d15@gen-top-level-label nz70c7@id nz70c8@rib) (gensym)))) (set! nz89df@nz6d19@gen-define-label nz6d19@gen-define-label) (set! nz6d23@rib? (lambda (nz70cb@x) (and (simple-struct? nz70cb@x) (eq? (simple-struct-name nz70cb@x) 'rib)))) (set! nz89e0@nz6d23@rib? nz6d23@rib?) (set! nz6d25@rib-sym* (lambda (nz70cd@x) (simple-struct-ref nz70cd@x '0))) (set! nz89e1@nz6d25@rib-sym* nz6d25@rib-sym*) (set! nz6d27@set-rib-sym*! (lambda (nz70cf@x nz70d0@val) (simple-struct-set! nz70cf@x '0 nz70d0@val))) (set! nz89e2@nz6d27@set-rib-sym*! nz6d27@set-rib-sym*!) (set! nz6d29@rib-mark** (lambda (nz70d3@x) (simple-struct-ref nz70d3@x '1))) (set! nz89e3@nz6d29@rib-mark** nz6d29@rib-mark**) (set! nz6d2b@set-rib-mark**! (lambda (nz70d5@x nz70d6@val) (simple-struct-set! nz70d5@x '1 nz70d6@val))) (set! nz89e4@nz6d2b@set-rib-mark**! nz6d2b@set-rib-mark**!) (set! nz6d2d@rib-label* (lambda (nz70d9@x) (simple-struct-ref nz70d9@x '2))) (set! nz89e5@nz6d2d@rib-label* nz6d2d@rib-label*) (set! nz6d2f@set-rib-label*! (lambda (nz70db@x nz70dc@val) (simple-struct-set! nz70db@x '2 nz70dc@val))) (set! nz89e6@nz6d2f@set-rib-label*! nz6d2f@set-rib-label*!) (set! nz6d31@rib-sealed/freq (lambda (nz70df@x) (simple-struct-ref nz70df@x '3))) (set! nz89e7@nz6d31@rib-sealed/freq nz6d31@rib-sealed/freq) (set! nz6d33@set-rib-sealed/freq! (lambda (nz70e1@x nz70e2@val) (simple-struct-set! nz70e1@x '3 nz70e2@val))) (set! nz89e8@nz6d33@set-rib-sealed/freq! nz6d33@set-rib-sealed/freq!) (set! nz6d35@rib-cache (lambda (nz70e5@x) (simple-struct-ref nz70e5@x '4))) (set! nz89e9@nz6d35@rib-cache nz6d35@rib-cache) (set! nz6d37@set-rib-cache! (lambda (nz70e7@x nz70e8@val) (simple-struct-set! nz70e7@x '4 nz70e8@val))) (set! nz89ea@nz6d37@set-rib-cache! nz6d37@set-rib-cache!) (set! nz6d39@dummy '3) (set! nz89eb@nz6d39@dummy nz6d39@dummy) (set! nz6d3b@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! nz89ec@nz6d3b@make-empty-rib nz6d3b@make-empty-rib) (set! nz6d3d@extend-rib! (lambda (nz70eb@rib nz70ec@id nz70ed@label) (let ((nz70f2@find '#f)) (begin (set! nz70f2@find (lambda (nz70ff@sym nz7100@mark* nz7101@sym* nz7102@mark** nz7103@label*) (and (pair? nz7101@sym*) (if (and (eq? nz70ff@sym (car nz7101@sym*)) (same-marks? nz7100@mark* (car nz7102@mark**))) nz7103@label* (nz70f2@find nz70ff@sym nz7100@mark* (cdr nz7101@sym*) (cdr nz7102@mark**) (cdr nz7103@label*)))))) (begin (if (nz6d31@rib-sealed/freq nz70eb@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" nz70eb@rib) (void)) (let ((nz70f3@sym (nz6d89@id->sym nz70ec@id)) (nz70f4@mark* (nz6d59@stx-mark* nz70ec@id))) (let ((nz70f7@sym* (nz6d25@rib-sym* nz70eb@rib))) (let ((nz70f9@t (and (memq nz70f3@sym (nz6d25@rib-sym* nz70eb@rib)) (nz70f2@find nz70f3@sym nz70f4@mark* nz70f7@sym* (nz6d29@rib-mark** nz70eb@rib) (nz6d2d@rib-label* nz70eb@rib))))) (if nz70f9@t ((lambda (nz70fb@p) (if (not (eq? nz70ed@label (car nz70fb@p))) (if (nz707e@top-level-context) (set-car! nz70fb@p nz70ed@label) (nz706e@syntax-violation '#f '"multiple definitions of identifier" nz70ec@id)) (void))) nz70f9@t) (begin (if (nz6d35@rib-cache nz70eb@rib) (hashtable-update! (nz6d35@rib-cache nz70eb@rib) nz70f3@sym (lambda (nz70fd@e) (cons (cons nz70f4@mark* nz70ed@label) nz70fd@e)) '()) (void)) (nz6d27@set-rib-sym*! nz70eb@rib (cons nz70f3@sym nz70f7@sym*)) (nz6d2b@set-rib-mark**! nz70eb@rib (cons nz70f4@mark* (nz6d29@rib-mark** nz70eb@rib))) (nz6d2f@set-rib-label*! nz70eb@rib (cons nz70ed@label (nz6d2d@rib-label* nz70eb@rib))))))))))))) (set! nz89ed@nz6d3d@extend-rib! nz6d3d@extend-rib!) (set! nz6d3f@extend-rib/nc! (lambda (nz7109@rib nz710a@id nz710b@label) (let ((nz710f@sym (nz6d89@id->sym nz710a@id)) (nz7110@mark* (nz6d59@stx-mark* nz710a@id))) (let ((nz7113@sym* (nz6d25@rib-sym* nz7109@rib))) (begin (if (nz6d35@rib-cache nz7109@rib) (hashtable-update! (nz6d35@rib-cache nz7109@rib) nz710f@sym (lambda (nz7115@e) (cons (cons nz7110@mark* nz710b@label) nz7115@e)) '()) (void)) (nz6d27@set-rib-sym*! nz7109@rib (cons nz710f@sym nz7113@sym*)) (nz6d2b@set-rib-mark**! nz7109@rib (cons nz7110@mark* (nz6d29@rib-mark** nz7109@rib))) (nz6d2f@set-rib-label*! nz7109@rib (cons nz710b@label (nz6d2d@rib-label* nz7109@rib)))))))) (set! nz89ee@nz6d3f@extend-rib/nc! nz6d3f@extend-rib/nc!) (set! nz6d41@make-rib-map (lambda (nz7117@sym*) (let ((nz7119@ht (make-eq-hashtable))) (let nz711f@f ((nz711b@i '0) (nz711c@sym* nz7117@sym*)) (if (null? nz711c@sym*) nz7119@ht (begin (hashtable-update! nz7119@ht (car nz711c@sym*) (lambda (nz7121@x) (cons nz711b@i nz7121@x)) '()) (nz711f@f (+ nz711b@i '1) (cdr nz711c@sym*)))))))) (set! nz89ef@nz6d41@make-rib-map nz6d41@make-rib-map) (set! nz6d43@seal-rib! (lambda (nz7123@rib) (let ((nz7125@sym* (nz6d25@rib-sym* nz7123@rib))) (if (not (null? nz7125@sym*)) (begin (nz6d27@set-rib-sym*! nz7123@rib (list->vector nz7125@sym*)) (nz6d2b@set-rib-mark**! nz7123@rib (list->vector (nz6d29@rib-mark** nz7123@rib))) (nz6d2f@set-rib-label*! nz7123@rib (list->vector (nz6d2d@rib-label* nz7123@rib))) (nz6d33@set-rib-sealed/freq! nz7123@rib (nz6d41@make-rib-map nz7125@sym*))) (void))))) (set! nz89f0@nz6d43@seal-rib! nz6d43@seal-rib!) (set! nz6d45@unseal-rib! (lambda (nz7127@rib) (if (nz6d31@rib-sealed/freq nz7127@rib) (begin (nz6d33@set-rib-sealed/freq! nz7127@rib '#f) (nz6d27@set-rib-sym*! nz7127@rib (vector->list (nz6d25@rib-sym* nz7127@rib))) (nz6d2b@set-rib-mark**! nz7127@rib (vector->list (nz6d29@rib-mark** nz7127@rib))) (nz6d2f@set-rib-label*! nz7127@rib (vector->list (nz6d2d@rib-label* nz7127@rib)))) (void)))) (set! nz89f1@nz6d45@unseal-rib! nz6d45@unseal-rib!) (set! nz6d47@make-full-rib (lambda (nz7129@id* nz712a@label*) (let ((nz712d@r (make-simple-struct 'rib '6 (list (map nz6d89@id->sym nz7129@id*) (map nz6d59@stx-mark* nz7129@id*) nz712a@label* '#f '#f)))) (begin (nz6d43@seal-rib! nz712d@r) nz712d@r)))) (set! nz89f2@nz6d47@make-full-rib nz6d47@make-full-rib) (set! nz6d49@rp (nz68bd@nz6798@make-record-printer 'stx (lambda (nz712f@x nz7130@p nz7131@wr) (begin (display '"#<syntax " nz7130@p) (write (nz6d9b@stx->datum nz712f@x) nz7130@p) (let ((nz7135@expr (nz6d55@stx-expr nz712f@x))) (if (nz68b4@nz6786@annotation? nz7135@expr) (let ((nz7137@src (nz68b5@nz6788@annotation-source nz7135@expr))) (if (pair? nz7137@src) (begin (display '" [" nz7130@p) (display (cdr nz7137@src) nz7130@p) (display '" of " nz7130@p) (display (car nz7137@src) nz7130@p) (display '"]" nz7130@p)) (void))) (void))) (display '">" nz7130@p))))) (set! nz89f3@nz6d49@rp nz6d49@rp) (set! nz6d53@stx? (lambda (nz7139@x) (and (simple-struct? nz7139@x) (eq? (simple-struct-name nz7139@x) 'stx)))) (set! nz89f4@nz6d53@stx? nz6d53@stx?) (set! nz6d55@stx-expr (lambda (nz713b@x) (simple-struct-ref nz713b@x '0))) (set! nz89f5@nz6d55@stx-expr nz6d55@stx-expr) (set! nz6d57@set-stx-expr! (lambda (nz713d@x nz713e@val) (simple-struct-set! nz713d@x '0 nz713e@val))) (set! nz89f6@nz6d57@set-stx-expr! nz6d57@set-stx-expr!) (set! nz6d59@stx-mark* (lambda (nz7141@x) (simple-struct-ref nz7141@x '1))) (set! nz89f7@nz6d59@stx-mark* nz6d59@stx-mark*) (set! nz6d5b@set-stx-mark*! (lambda (nz7143@x nz7144@val) (simple-struct-set! nz7143@x '1 nz7144@val))) (set! nz89f8@nz6d5b@set-stx-mark*! nz6d5b@set-stx-mark*!) (set! nz6d5d@stx-subst* (lambda (nz7147@x) (simple-struct-ref nz7147@x '2))) (set! nz89f9@nz6d5d@stx-subst* nz6d5d@stx-subst*) (set! nz6d5f@set-stx-subst*! (lambda (nz7149@x nz714a@val) (simple-struct-set! nz7149@x '2 nz714a@val))) (set! nz89fa@nz6d5f@set-stx-subst*! nz6d5f@set-stx-subst*!) (set! nz6d61@stx-ae* (lambda (nz714d@x) (simple-struct-ref nz714d@x '3))) (set! nz89fb@nz6d61@stx-ae* nz6d61@stx-ae*) (set! nz6d63@set-stx-ae*! (lambda (nz714f@x nz7150@val) (simple-struct-set! nz714f@x '3 nz7150@val))) (set! nz89fc@nz6d63@set-stx-ae*! nz6d63@set-stx-ae*!) (set! nz6d65@dummy '3) (set! nz89fd@nz6d65@dummy nz6d65@dummy) (set! nz6d67@datum->stx (lambda (nz7153@id nz7154@datum) (make-simple-struct 'stx '5 (list nz7154@datum (nz6d59@stx-mark* nz7153@id) (nz6d5d@stx-subst* nz7153@id) (nz6d61@stx-ae* nz7153@id))))) (set! nz89fe@nz6d67@datum->stx nz6d67@datum->stx) (set! nz6d69@gen-mark (lambda () (string '#\m))) (set! nz89ff@nz6d69@gen-mark nz6d69@gen-mark) (set! nz6d6b@anti-mark '#f) (set! nz8a00@nz6d6b@anti-mark nz6d6b@anti-mark) (set! nz6d6d@anti-mark? not) (set! nz8a01@nz6d6d@anti-mark? nz6d6d@anti-mark?) (set! nz6d6f@mkstx (lambda (nz7157@e nz7158@m* nz7159@s* nz715a@ae*) (if (and (nz6d53@stx? nz7157@e) (not (nz6d0d@top-marked? nz7158@m*))) (call-with-values (lambda () (join-wraps nz7158@m* nz7159@s* nz715a@ae* nz7157@e)) (lambda (nz7165@nz7160 nz7166@nz7162 nz7167@nz7164) (let ((nz716b@ae* nz7167@nz7164) (nz716c@s* nz7166@nz7162) (nz716d@m* nz7165@nz7160)) (make-simple-struct 'stx '5 (list (nz6d55@stx-expr nz7157@e) nz716d@m* nz716c@s* nz716b@ae*))))) (make-simple-struct 'stx '5 (list nz7157@e nz7158@m* nz7159@s* nz715a@ae*))))) (set! nz8a02@nz6d6f@mkstx nz6d6f@mkstx) (set! nz6d71@add-mark (lambda (nz7171@m nz7172@e nz7173@ae) (nz6d6f@mkstx nz7172@e (list nz7171@m) '(shift) (list nz7173@ae)))) (set! nz8a03@nz6d71@add-mark nz6d71@add-mark) (set! nz6d73@add-subst (lambda (nz7177@subst nz7178@e) (nz6d6f@mkstx nz7178@e '() (list nz7177@subst) '()))) (set! nz8a04@nz6d73@add-subst nz6d73@add-subst) (set! nz6d75@syntax-kind? (lambda (nz717b@x nz717c@p?) (if (nz6d53@stx? nz717b@x) (nz6d75@syntax-kind? (nz6d55@stx-expr nz717b@x) nz717c@p?) (if (nz68b4@nz6786@annotation? nz717b@x) (nz6d75@syntax-kind? (nz68b6@nz678a@annotation-expression nz717b@x) nz717c@p?) (nz717c@p? nz717b@x))))) (set! nz8a05@nz6d75@syntax-kind? nz6d75@syntax-kind?) (set! nz6d77@syntax-vector->list (lambda (nz717f@x) (if (nz6d53@stx? nz717f@x) (let ((nz7181@ls (nz6d77@syntax-vector->list (nz6d55@stx-expr nz717f@x))) (nz7182@m* (nz6d59@stx-mark* nz717f@x)) (nz7183@s* (nz6d5d@stx-subst* nz717f@x)) (nz7184@ae* (nz6d61@stx-ae* nz717f@x))) (map (lambda (nz7189@x) (nz6d6f@mkstx nz7189@x nz7182@m* nz7183@s* nz7184@ae*)) nz7181@ls)) (if (nz68b4@nz6786@annotation? nz717f@x) (nz6d77@syntax-vector->list (nz68b6@nz678a@annotation-expression nz717f@x)) (if (vector? nz717f@x) (vector->list nz717f@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" nz717f@x)))))) (set! nz8a06@nz6d77@syntax-vector->list nz6d77@syntax-vector->list) (set! nz6d79@syntax-pair? (lambda (nz718b@x) (nz6d75@syntax-kind? nz718b@x pair?))) (set! nz8a07@nz6d79@syntax-pair? nz6d79@syntax-pair?) (set! nz6d7b@syntax-vector? (lambda (nz718d@x) (nz6d75@syntax-kind? nz718d@x vector?))) (set! nz8a08@nz6d7b@syntax-vector? nz6d7b@syntax-vector?) (set! nz6d7d@syntax-null? (lambda (nz718f@x) (nz6d75@syntax-kind? nz718f@x null?))) (set! nz8a09@nz6d7d@syntax-null? nz6d7d@syntax-null?) (set! nz6d7f@syntax-list? (lambda (nz7191@x) (or (nz6d7d@syntax-null? nz7191@x) (and (nz6d79@syntax-pair? nz7191@x) (nz6d7f@syntax-list? (nz6d83@syntax-cdr nz7191@x)))))) (set! nz8a0a@nz6d7f@syntax-list? nz6d7f@syntax-list?) (set! nz6d81@syntax-car (lambda (nz7193@x) (if (nz6d53@stx? nz7193@x) (nz6d6f@mkstx (nz6d81@syntax-car (nz6d55@stx-expr nz7193@x)) (nz6d59@stx-mark* nz7193@x) (nz6d5d@stx-subst* nz7193@x) (nz6d61@stx-ae* nz7193@x)) (if (nz68b4@nz6786@annotation? nz7193@x) (nz6d81@syntax-car (nz68b6@nz678a@annotation-expression nz7193@x)) (if (pair? nz7193@x) (car nz7193@x) (assertion-violation 'syntax-car '"BUG: not a pair" nz7193@x)))))) (set! nz8a0b@nz6d81@syntax-car nz6d81@syntax-car) (set! nz6d83@syntax-cdr (lambda (nz7195@x) (if (nz6d53@stx? nz7195@x) (nz6d6f@mkstx (nz6d83@syntax-cdr (nz6d55@stx-expr nz7195@x)) (nz6d59@stx-mark* nz7195@x) (nz6d5d@stx-subst* nz7195@x) (nz6d61@stx-ae* nz7195@x)) (if (nz68b4@nz6786@annotation? nz7195@x) (nz6d83@syntax-cdr (nz68b6@nz678a@annotation-expression nz7195@x)) (if (pair? nz7195@x) (cdr nz7195@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" nz7195@x)))))) (set! nz8a0c@nz6d83@syntax-cdr nz6d83@syntax-cdr) (set! nz6d85@syntax->list (lambda (nz7197@x) (if (nz6d79@syntax-pair? nz7197@x) (cons (nz6d81@syntax-car nz7197@x) (nz6d85@syntax->list (nz6d83@syntax-cdr nz7197@x))) (if (nz6d7d@syntax-null? nz7197@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" nz7197@x))))) (set! nz8a0d@nz6d85@syntax->list nz6d85@syntax->list) (set! nz6d87@id? (lambda (nz7199@x) (and (nz6d53@stx? nz7199@x) (symbol? (nz6d55@stx-expr nz7199@x))))) (set! nz8a0e@nz6d87@id? nz6d87@id?) (set! nz6d89@id->sym (lambda (nz719b@x) (nz6d55@stx-expr nz719b@x))) (set! nz8a0f@nz6d89@id->sym nz6d89@id->sym) (set! nz6d8b@bound-id=? (lambda (nz719d@x nz719e@y) (and (eq? (nz6d89@id->sym nz719d@x) (nz6d89@id->sym nz719e@y)) (same-marks? (nz6d59@stx-mark* nz719d@x) (nz6d59@stx-mark* nz719e@y))))) (set! nz8a10@nz6d8b@bound-id=? nz6d8b@bound-id=?) (set! nz6d8d@free-id=? (lambda (nz71a1@i nz71a2@j) (let ((nz71a5@t0 (id->real-label nz71a1@i)) (nz71a6@t1 (id->real-label nz71a2@j))) (if (or nz71a5@t0 nz71a6@t1) (eq? nz71a5@t0 nz71a6@t1) (eq? (nz6d89@id->sym nz71a1@i) (nz6d89@id->sym nz71a2@j)))))) (set! nz8a11@nz6d8d@free-id=? nz6d8d@free-id=?) (set! nz6d8f@valid-bound-ids? (lambda (nz71a9@id*) (and (for-all nz6d87@id? nz71a9@id*) (nz6d91@distinct-bound-ids? nz71a9@id*)))) (set! nz8a12@nz6d8f@valid-bound-ids? nz6d8f@valid-bound-ids?) (set! nz6d91@distinct-bound-ids? (lambda (nz71ab@id*) (or (null? nz71ab@id*) (and (not (nz6d93@bound-id-member? (car nz71ab@id*) (cdr nz71ab@id*))) (nz6d91@distinct-bound-ids? (cdr nz71ab@id*)))))) (set! nz8a13@nz6d91@distinct-bound-ids? nz6d91@distinct-bound-ids?) (set! nz6d93@bound-id-member? (lambda (nz71ad@id nz71ae@id*) (and (pair? nz71ae@id*) (or (nz6d8b@bound-id=? nz71ad@id (car nz71ae@id*)) (nz6d93@bound-id-member? nz71ad@id (cdr nz71ae@id*)))))) (set! nz8a14@nz6d93@bound-id-member? nz6d93@bound-id-member?) (set! nz6d95@self-evaluating? (lambda (nz71b1@x) (or (number? nz71b1@x) (string? nz71b1@x) (char? nz71b1@x) (boolean? nz71b1@x) (regexp? nz71b1@x) (bytevector? nz71b1@x)))) (set! nz8a15@nz6d95@self-evaluating? nz6d95@self-evaluating?) (set! nz6d97@strip-annotations (lambda (nz71b3@x) (if (pair? nz71b3@x) (cons (nz6d97@strip-annotations (car nz71b3@x)) (nz6d97@strip-annotations (cdr nz71b3@x))) (if (vector? nz71b3@x) (vector-map nz6d97@strip-annotations nz71b3@x) (if (nz68b4@nz6786@annotation? nz71b3@x) (nz68b3@nz6784@annotation-stripped nz71b3@x) nz71b3@x))))) (set! nz8a16@nz6d97@strip-annotations nz6d97@strip-annotations) (set! nz6d99@strip (lambda (nz71b5@x nz71b6@m*) (if (nz6d0d@top-marked? nz71b6@m*) (if (or (nz68b4@nz6786@annotation? nz71b5@x) (and (pair? nz71b5@x) (nz68b4@nz6786@annotation? (car nz71b5@x))) (and (vector? nz71b5@x) (> (vector-length nz71b5@x) '0) (nz68b4@nz6786@annotation? (vector-ref nz71b5@x '0)))) (nz6d97@strip-annotations nz71b5@x) nz71b5@x) (let nz71bb@f ((nz71b9@x nz71b5@x)) (if (nz6d53@stx? nz71b9@x) (nz6d99@strip (nz6d55@stx-expr nz71b9@x) (nz6d59@stx-mark* nz71b9@x)) (if (nz68b4@nz6786@annotation? nz71b9@x) (nz68b3@nz6784@annotation-stripped nz71b9@x) (if (pair? nz71b9@x) (let ((nz71bd@a (nz71bb@f (car nz71b9@x))) (nz71be@d (nz71bb@f (cdr nz71b9@x)))) (if (and (eq? nz71bd@a (car nz71b9@x)) (eq? nz71be@d (cdr nz71b9@x))) nz71b9@x (cons nz71bd@a nz71be@d))) (if (vector? nz71b9@x) (let ((nz71c1@old (vector->list nz71b9@x))) (let ((nz71c3@new (map nz71bb@f nz71c1@old))) (if (for-all eq? nz71c1@old nz71c3@new) nz71b9@x (list->vector nz71c3@new)))) nz71b9@x)))))))) (set! nz8a17@nz6d99@strip nz6d99@strip) (set! nz6d9b@stx->datum (lambda (nz71c5@x) (nz6d99@strip nz71c5@x '()))) (set! nz8a18@nz6d9b@stx->datum nz6d9b@stx->datum) (set! nz6d9d@id->label (lambda (nz71c7@id) (or (id->real-label nz71c7@id) (let ((nz71c9@t (nz707e@top-level-context))) (if nz71c9@t ((lambda (nz71cb@env) (let ((nz71cd@rib (nz702e@interaction-env-rib nz71cb@env))) (call-with-values (lambda () (nz6d17@gen-define-label+loc nz71c7@id nz71cd@rib)) (lambda (nz71d3@nz71d0 nz71d4@nz71d2) (let ((nz71d7@loc_ nz71d4@nz71d2) (nz71d8@lab nz71d3@nz71d0)) (begin (nz6d3d@extend-rib! nz71cd@rib nz71c7@id nz71d8@lab) nz71d8@lab)))))) nz71c9@t) '#f))))) (set! nz8a19@nz6d9d@id->label nz6d9d@id->label) (set! nz6d9f@label->binding (lambda (nz71db@x nz71dc@r) (let ((nz71df@t (nz6b9b@nz69d8@imported-label->binding nz71db@x))) (if nz71df@t ((lambda (nz71e1@b) (if (and (pair? nz71e1@b) (eq? (car nz71e1@b) '$core-rtd)) (cons '$rtd (map nz6f44@bless (cdr nz71e1@b))) (if (and (pair? nz71e1@b) (eq? (car nz71e1@b) 'global-rtd)) (let ((nz71e3@lib (cadr nz71e1@b)) (nz71e4@loc (cddr nz71e1@b))) (cons '$rtd (symbol-value nz71e4@loc))) nz71e1@b))) nz71df@t) (let ((nz71e7@t (assq nz71db@x nz71dc@r))) (if nz71e7@t (cdr nz71e7@t) (let ((nz71e9@t (nz707e@top-level-context))) (if nz71e9@t ((lambda (nz71eb@env) (let ((nz71ed@t (assq nz71db@x (nz7036@interaction-env-locs nz71eb@env)))) (if nz71ed@t ((lambda (nz71ef@p) (cons* 'lexical (cdr nz71ef@p) '#f)) nz71ed@t) '(displaced-lexical . #f)))) nz71e9@t) '(displaced-lexical . #f))))))))) (set! nz8a1a@nz6d9f@label->binding nz6d9f@label->binding) (set! nz6da1@make-binding cons) (set! nz8a1b@nz6da1@make-binding nz6da1@make-binding) (set! nz6da3@binding-type car) (set! nz8a1c@nz6da3@binding-type nz6da3@binding-type) (set! nz6da5@binding-value cdr) (set! nz8a1d@nz6da5@binding-value nz6da5@binding-value) (set! nz6da7@raise-unbound-error (lambda (nz71f1@id) (nz706c@syntax-violation* '#f '"unbound identifier" nz71f1@id (nz8e13@nz8c59@make-undefined-violation)))) (set! nz8a1e@nz6da7@raise-unbound-error nz6da7@raise-unbound-error) (set! nz6da9@syntax-type (lambda (nz71f3@e nz71f4@r) (if (nz6d87@id? nz71f3@e) (let ((nz71f7@id nz71f3@e)) (let ((nz71f9@label (nz6d9d@id->label nz71f7@id))) (let ((nz71fb@b (nz6d9f@label->binding nz71f9@label nz71f4@r))) (let ((nz71fd@type (nz6da3@binding-type nz71fb@b))) (begin (if (not nz71f9@label) (nz6da7@raise-unbound-error nz71f7@id) (void)) (let ((nz71ff@t nz71fd@type)) (if (memv nz71ff@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values nz71fd@type (nz6da5@binding-value nz71fb@b) nz71f7@id) (values 'other '#f '#f)))))))) (if (nz6d79@syntax-pair? nz71f3@e) (let ((nz7201@id (nz6d81@syntax-car nz71f3@e))) (if (nz6d87@id? nz7201@id) (let ((nz7203@label (nz6d9d@id->label nz7201@id))) (let ((nz7205@b (nz6d9f@label->binding nz7203@label nz71f4@r))) (let ((nz7207@type (nz6da3@binding-type nz7205@b))) (begin (if (not nz7203@label) (nz6da7@raise-unbound-error nz7201@id) (void)) (let ((nz7209@t nz7207@type)) (if (memv nz7209@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values nz7207@type (nz6da5@binding-value nz7205@b) nz7201@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((nz720b@d (nz6d9b@stx->datum nz71f3@e))) (if (nz6d95@self-evaluating? nz720b@d) (values 'constant nz720b@d '#f) (values 'other '#f '#f))))))) (set! nz8a1f@nz6da9@syntax-type nz6da9@syntax-type) (set! nz6db7@sanitize-binding (lambda (nz720d@x nz720e@src) (if (procedure? nz720d@x) (cons* 'local-macro nz720d@x nz720e@src) (if (and (pair? nz720d@x) (eq? (car nz720d@x) 'macro!) (procedure? (cdr nz720d@x))) (cons* 'local-macro! (cdr nz720d@x) nz720e@src) (if (and (pair? nz720d@x) (eq? (car nz720d@x) '$rtd)) nz720d@x (assertion-violation 'expand '"invalid transformer" nz720d@x)))))) (set! nz8a20@nz6db7@sanitize-binding nz6db7@sanitize-binding) (set! nz6db9@make-variable-transformer (lambda (nz7211@x) (if (procedure? nz7211@x) (cons 'macro! nz7211@x) (assertion-violation 'make-variable-transformer '"not a procedure" nz7211@x)))) (set! nz8a21@nz6db9@make-variable-transformer nz6db9@make-variable-transformer) (set! nz6dbb@variable-transformer? (lambda (nz7213@x) (and (pair? nz7213@x) (eq? (car nz7213@x) 'macro!) (procedure? (cdr nz7213@x))))) (set! nz8a22@nz6dbb@variable-transformer? nz6dbb@variable-transformer?) (set! nz6dbd@variable-transformer-procedure (lambda (nz7215@x) (if (nz6dbb@variable-transformer? nz7215@x) (cdr nz7215@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" nz7215@x)))) (set! nz8a23@nz6dbd@variable-transformer-procedure nz6dbd@variable-transformer-procedure) (set! nz6dbf@make-eval-transformer (lambda (nz7217@x) (nz6db7@sanitize-binding (eval-core (nz6916@nz68ce@expanded->core nz7217@x)) nz7217@x))) (set! nz8a24@nz6dbf@make-eval-transformer nz6dbf@make-eval-transformer) (set! nz6f10@parse-define (lambda (nz7219@x) (let ((nz721b@t nz7219@x)) (let ((nz721d@ls/false (nz6f8e@syntax-dispatch nz721b@t '(_ (any . any) any . each-any)))) (if (and nz721d@ls/false (apply (lambda (nz721f@id nz7220@fmls nz7221@b nz7222@b*) (nz6d87@id? nz721f@id)) nz721d@ls/false)) (apply (lambda (nz7227@id nz7228@fmls nz7229@b nz722a@b*) (begin (nz6fb4@verify-formals nz7228@fmls nz7219@x) (values nz7227@id (cons 'defun (cons nz7228@fmls (cons nz7229@b nz722a@b*)))))) nz721d@ls/false) (let ((nz722f@t nz721b@t)) (let ((nz7231@ls/false (nz6f8e@syntax-dispatch nz722f@t '(_ any any)))) (if (and nz7231@ls/false (apply (lambda (nz7233@id nz7234@val) (nz6d87@id? nz7233@id)) nz7231@ls/false)) (apply (lambda (nz7237@id nz7238@val) (values nz7237@id (cons 'expr nz7238@val))) nz7231@ls/false) (let ((nz723b@t nz722f@t)) (let ((nz723d@ls/false (nz6f8e@syntax-dispatch nz723b@t '(_ any)))) (if (and nz723d@ls/false (apply (lambda (nz723f@id) (nz6d87@id? nz723f@id)) nz723d@ls/false)) (apply (lambda (nz7241@id) (values nz7241@id (cons 'expr (nz6f44@bless '(void))))) nz723d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz723b@t)))))))))))) (set! nz8a25@nz6f10@parse-define nz6f10@parse-define) (set! nz6f12@parse-define-syntax (lambda (nz7243@x) (let ((nz7245@t nz7243@x)) (let ((nz7247@ls/false (nz6f8e@syntax-dispatch nz7245@t '(_ any any)))) (if (and nz7247@ls/false (apply (lambda (nz7249@id nz724a@val) (nz6d87@id? nz7249@id)) nz7247@ls/false)) (apply (lambda (nz724d@id nz724e@val) (values nz724d@id nz724e@val)) nz7247@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7245@t)))))) (set! nz8a26@nz6f12@parse-define-syntax nz6f12@parse-define-syntax) (set! nz6f14@scheme-stx-hashtable (make-eq-hashtable)) (set! nz8a27@nz6f14@scheme-stx-hashtable nz6f14@scheme-stx-hashtable) (set! nz6f16@scheme-stx (lambda (nz7251@sym) (or (hashtable-ref nz6f14@scheme-stx-hashtable nz7251@sym '#f) (let ((nz7253@subst (nz6b77@nz6990@library-subst (nz6b95@nz69cc@find-library-by-name '(psyntax system $all))))) (let ((nz7255@stx (make-simple-struct 'stx '5 (list nz7251@sym nz6d0b@top-mark* '() '())))) (let ((nz7257@stx (let ((nz7259@t (assq nz7251@sym nz7253@subst))) (if nz7259@t ((lambda (nz725b@x) (let ((nz725d@name (car nz725b@x)) (nz725e@label (cdr nz725b@x))) (nz6d73@add-subst (make-simple-struct 'rib '6 (list (list nz725d@name) (list nz6d0b@top-mark*) (list nz725e@label) '#f '#f)) nz7255@stx))) nz7259@t) nz7255@stx)))) (begin (hashtable-set! nz6f14@scheme-stx-hashtable nz7251@sym nz7257@stx) nz7257@stx))))))) (set! nz8a28@nz6f16@scheme-stx nz6f16@scheme-stx) (set! nz6f18@lexical-var car) (set! nz8a29@nz6f18@lexical-var nz6f18@lexical-var) (set! nz6f1a@lexical-mutable? cdr) (set! nz8a2a@nz6f1a@lexical-mutable? nz6f1a@lexical-mutable?) (set! nz6f1c@set-lexical-mutable! set-cdr!) (set! nz8a2b@nz6f1c@set-lexical-mutable! nz6f1c@set-lexical-mutable!) (set! nz6f1e@add-lexical (lambda (nz7261@lab nz7262@lex nz7263@r) (cons (cons* nz7261@lab 'lexical nz7262@lex '#f) nz7263@r))) (set! nz8a2c@nz6f1e@add-lexical nz6f1e@add-lexical) (set! nz6f20@add-lexicals (lambda (nz7267@lab* nz7268@lex* nz7269@r) (if (null? nz7267@lab*) nz7269@r (nz6f20@add-lexicals (cdr nz7267@lab*) (cdr nz7268@lex*) (nz6f1e@add-lexical (car nz7267@lab*) (car nz7268@lex*) nz7269@r))))) (set! nz8a2d@nz6f20@add-lexicals nz6f20@add-lexicals) (set! nz6f22@letrec-helper (lambda (nz726d@e nz726e@r nz726f@mr nz7270@build) (let ((nz7275@t nz726d@e)) (let ((nz7277@ls/false (nz6f8e@syntax-dispatch nz7275@t '(_ #(each (any any)) any . each-any)))) (if nz7277@ls/false (apply (lambda (nz7279@lhs* nz727a@rhs* nz727b@b nz727c@b*) (if (not (nz6d8f@valid-bound-ids? nz7279@lhs*)) (nz6f48@invalid-fmls-error nz726d@e nz7279@lhs*) (let ((nz7281@lex* (map nz6d0f@gen-lexical nz7279@lhs*)) (nz7282@lab* (map nz6d13@gen-label nz7279@lhs*))) (let ((nz7285@rib (nz6d47@make-full-rib nz7279@lhs* nz7282@lab*)) (nz7286@r (nz6f20@add-lexicals nz7282@lab* nz7281@lex* nz726e@r))) (let ((nz7289@body (nz6fc6@chi-internal (nz6d73@add-subst nz7285@rib (cons nz727b@b nz727c@b*)) nz7286@r nz726f@mr)) (nz728a@rhs* (nz6fac@chi-expr* (map (lambda (nz728d@x) (nz6d73@add-subst nz7285@rib nz728d@x)) nz727a@rhs*) nz7286@r nz726f@mr))) (nz7270@build '#f nz7281@lex* nz728a@rhs* nz7289@body)))))) nz7277@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7275@t)))))) (set! nz8a2e@nz6f22@letrec-helper nz6f22@letrec-helper) (set! nz6f24@let-transformer (lambda (nz728f@e nz7290@r nz7291@mr) (let ((nz7295@t nz728f@e)) (let ((nz7297@ls/false (nz6f8e@syntax-dispatch nz7295@t '(_ #(each (any any)) any . each-any)))) (if nz7297@ls/false (apply (lambda (nz7299@lhs* nz729a@rhs* nz729b@b nz729c@b*) (if (not (nz6d8f@valid-bound-ids? nz7299@lhs*)) (nz6f48@invalid-fmls-error nz728f@e nz7299@lhs*) (let ((nz72a1@lex* (map nz6d0f@gen-lexical nz7299@lhs*)) (nz72a2@lab* (map nz6d13@gen-label nz7299@lhs*)) (nz72a3@rhs* (nz6fac@chi-expr* nz729a@rhs* nz7290@r nz7291@mr))) (let ((nz72a7@rib (nz6d47@make-full-rib nz7299@lhs* nz72a2@lab*)) (nz72a8@r (nz6f20@add-lexicals nz72a2@lab* nz72a1@lex* nz7290@r))) (let ((nz72ab@body (nz6fc6@chi-internal (nz6d73@add-subst nz72a7@rib (cons nz729b@b nz729c@b*)) nz72a8@r nz7291@mr))) (nz6cef@nz6c4c@build-let '#f nz72a1@lex* nz72a3@rhs* nz72ab@body)))))) nz7297@ls/false) (let ((nz72ad@t nz7295@t)) (let ((nz72af@ls/false (nz6f8e@syntax-dispatch nz72ad@t '(_ any #(each (any any)) any . each-any)))) (if nz72af@ls/false (apply (lambda (nz72b1@loop nz72b2@lhs* nz72b3@rhs* nz72b4@b nz72b5@b*) (if (not (nz6d8f@valid-bound-ids? nz72b2@lhs*)) (nz6f48@invalid-fmls-error nz728f@e nz72b2@lhs*) (let ((nz72bb@lex* (map nz6d0f@gen-lexical nz72b2@lhs*)) (nz72bc@lab* (map nz6d13@gen-label nz72b2@lhs*)) (nz72bd@rhs* (nz6fac@chi-expr* nz72b3@rhs* nz7290@r nz7291@mr)) (nz72be@loop-lex (nz6d0f@gen-lexical nz72b1@loop)) (nz72bf@loop-lab (nz6d13@gen-label nz72b1@loop))) (let ((nz72c5@loop-rib (nz6d47@make-full-rib (list nz72b1@loop) (list nz72bf@loop-lab))) (nz72c6@rib (nz6d47@make-full-rib nz72b2@lhs* nz72bc@lab*)) (nz72c7@r (nz6f20@add-lexicals (cons nz72bf@loop-lab nz72bc@lab*) (cons nz72be@loop-lex nz72bb@lex*) nz7290@r))) (let ((nz72cb@body (nz6fc6@chi-internal (nz6d73@add-subst nz72c5@loop-rib (nz6d73@add-subst nz72c6@rib (cons nz72b4@b nz72b5@b*))) nz72c7@r nz7291@mr))) (nz6cf0@nz6c4e@build-named-let '#f nz72be@loop-lex nz72bb@lex* nz72bd@rhs* nz72cb@body)))))) nz72af@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz72ad@t))))))))) (set! nz8a2f@nz6f24@let-transformer nz6f24@let-transformer) (set! nz6f26@letrec-transformer (lambda (nz72cd@e nz72ce@r nz72cf@mr) (nz6f22@letrec-helper nz72cd@e nz72ce@r nz72cf@mr nz6cee@nz6c4a@build-letrec))) (set! nz8a30@nz6f26@letrec-transformer nz6f26@letrec-transformer) (set! nz6f28@letrec*-transformer (lambda (nz72d3@e nz72d4@r nz72d5@mr) (nz6f22@letrec-helper nz72d3@e nz72d4@r nz72d5@mr nz6cf1@nz6c50@build-letrec*))) (set! nz8a31@nz6f28@letrec*-transformer nz6f28@letrec*-transformer) (set! nz6f2a@fluid-let-syntax-transformer (lambda (nz72d9@e nz72da@r nz72db@mr) (let ((nz72e0@lookup '#f)) (begin (set! nz72e0@lookup (lambda (nz72f3@x) (or (nz6d9d@id->label nz72f3@x) (nz706e@syntax-violation '#f '"unbound identifier" nz72d9@e nz72f3@x)))) (let ((nz72e1@t nz72d9@e)) (let ((nz72e3@ls/false (nz6f8e@syntax-dispatch nz72e1@t '(_ #(each (any any)) any . each-any)))) (if nz72e3@ls/false (apply (lambda (nz72e5@lhs* nz72e6@rhs* nz72e7@b nz72e8@b*) (if (not (nz6d8f@valid-bound-ids? nz72e5@lhs*)) (nz6f48@invalid-fmls-error nz72d9@e nz72e5@lhs*) (let ((nz72ed@lab* (map nz72e0@lookup nz72e5@lhs*)) (nz72ee@rhs* (map (lambda (nz72f1@x) (nz6dbf@make-eval-transformer (nz6fe8@expand-transformer nz72f1@x nz72db@mr))) nz72e6@rhs*))) (nz6fc6@chi-internal (cons nz72e7@b nz72e8@b*) (append (map cons nz72ed@lab* nz72ee@rhs*) nz72da@r) (append (map cons nz72ed@lab* nz72ee@rhs*) nz72db@mr))))) nz72e3@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz72e1@t)))))))) (set! nz8a32@nz6f2a@fluid-let-syntax-transformer nz6f2a@fluid-let-syntax-transformer) (set! nz6f2c@type-descriptor-transformer (lambda (nz72f5@e nz72f6@r nz72f7@mr) (let ((nz72fb@t nz72f5@e)) (let ((nz72fd@ls/false (nz6f8e@syntax-dispatch nz72fb@t '(_ any)))) (if (and nz72fd@ls/false (apply (lambda (nz72ff@id) (nz6d87@id? nz72ff@id)) nz72fd@ls/false)) (apply (lambda (nz7301@id) (let ((nz7303@lab (nz6d9d@id->label nz7301@id))) (let ((nz7305@b (nz6d9f@label->binding nz7303@lab nz72f6@r))) (let ((nz7307@type (nz6da3@binding-type nz7305@b))) (begin (if (not nz7303@lab) (nz6da7@raise-unbound-error nz7301@id) (void)) (if (not (and (eq? nz7307@type '$rtd) (not (list? (nz6da5@binding-value nz7305@b))))) (nz706e@syntax-violation '#f '"not a record type" nz72f5@e) (void)) (list 'quote (nz6da5@binding-value nz7305@b))))))) nz72fd@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz72fb@t)))))) (set! nz8a33@nz6f2c@type-descriptor-transformer nz6f2c@type-descriptor-transformer) (set! nz6f2e@record-type-descriptor-transformer (lambda (nz7309@e nz730a@r nz730b@mr) (let ((nz730f@t nz7309@e)) (let ((nz7311@ls/false (nz6f8e@syntax-dispatch nz730f@t '(_ any)))) (if (and nz7311@ls/false (apply (lambda (nz7313@id) (nz6d87@id? nz7313@id)) nz7311@ls/false)) (apply (lambda (nz7315@id) (let ((nz7317@lab (nz6d9d@id->label nz7315@id))) (let ((nz7319@b (nz6d9f@label->binding nz7317@lab nz730a@r))) (let ((nz731b@type (nz6da3@binding-type nz7319@b))) (begin (if (not nz7317@lab) (nz6da7@raise-unbound-error nz7315@id) (void)) (if (not (and (eq? nz731b@type '$rtd) (list? (nz6da5@binding-value nz7319@b)))) (nz706e@syntax-violation '#f '"not a record type" nz7309@e) (void)) (nz6fb0@chi-expr (car (nz6da5@binding-value nz7319@b)) nz730a@r nz730b@mr)))))) nz7311@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz730f@t)))))) (set! nz8a34@nz6f2e@record-type-descriptor-transformer nz6f2e@record-type-descriptor-transformer) (set! nz6f30@record-constructor-descriptor-transformer (lambda (nz731d@e nz731e@r nz731f@mr) (let ((nz7323@t nz731d@e)) (let ((nz7325@ls/false (nz6f8e@syntax-dispatch nz7323@t '(_ any)))) (if (and nz7325@ls/false (apply (lambda (nz7327@id) (nz6d87@id? nz7327@id)) nz7325@ls/false)) (apply (lambda (nz7329@id) (let ((nz732b@lab (nz6d9d@id->label nz7329@id))) (let ((nz732d@b (nz6d9f@label->binding nz732b@lab nz731e@r))) (let ((nz732f@type (nz6da3@binding-type nz732d@b))) (begin (if (not nz732b@lab) (nz6da7@raise-unbound-error nz7329@id) (void)) (if (not (and (eq? nz732f@type '$rtd) (list? (nz6da5@binding-value nz732d@b)))) (nz706e@syntax-violation '#f '"invalid type" nz731d@e) (void)) (nz6fb0@chi-expr (cadr (nz6da5@binding-value nz732d@b)) nz731e@r nz731f@mr)))))) nz7325@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7323@t)))))) (set! nz8a35@nz6f30@record-constructor-descriptor-transformer nz6f30@record-constructor-descriptor-transformer) (set! nz6f32@when-macro (lambda (nz7331@e) (let ((nz7333@t nz7331@e)) (let ((nz7335@ls/false (nz6f8e@syntax-dispatch nz7333@t '(_ any any . each-any)))) (if nz7335@ls/false (apply (lambda (nz7337@test nz7338@e nz7339@e*) (nz6f44@bless (list 'if nz7337@test (cons 'begin (cons nz7338@e nz7339@e*))))) nz7335@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7333@t)))))) (set! nz8a36@nz6f32@when-macro nz6f32@when-macro) (set! nz6f34@unless-macro (lambda (nz733d@e) (let ((nz733f@t nz733d@e)) (let ((nz7341@ls/false (nz6f8e@syntax-dispatch nz733f@t '(_ any any . each-any)))) (if nz7341@ls/false (apply (lambda (nz7343@test nz7344@e nz7345@e*) (nz6f44@bless (list 'if (list 'not nz7343@test) (cons 'begin (cons nz7344@e nz7345@e*))))) nz7341@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz733f@t)))))) (set! nz8a37@nz6f34@unless-macro nz6f34@unless-macro) (set! nz6f36@if-transformer (lambda (nz7349@e nz734a@r nz734b@mr) (let ((nz734f@t nz7349@e)) (let ((nz7351@ls/false (nz6f8e@syntax-dispatch nz734f@t '(_ any any any)))) (if nz7351@ls/false (apply (lambda (nz7353@e0 nz7354@e1 nz7355@e2) (list 'if (nz6fb0@chi-expr nz7353@e0 nz734a@r nz734b@mr) (nz6fb0@chi-expr nz7354@e1 nz734a@r nz734b@mr) (nz6fb0@chi-expr nz7355@e2 nz734a@r nz734b@mr))) nz7351@ls/false) (let ((nz7359@t nz734f@t)) (let ((nz735b@ls/false (nz6f8e@syntax-dispatch nz7359@t '(_ any any)))) (if nz735b@ls/false (apply (lambda (nz735d@e0 nz735e@e1) (list 'if (nz6fb0@chi-expr nz735d@e0 nz734a@r nz734b@mr) (nz6fb0@chi-expr nz735e@e1 nz734a@r nz734b@mr) (nz6ced@nz6c48@build-void))) nz735b@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7359@t))))))))) (set! nz8a38@nz6f36@if-transformer nz6f36@if-transformer) (set! nz6f38@and-transformer (lambda (nz7361@e nz7362@r nz7363@mr) (let ((nz7367@t nz7361@e)) (let ((nz7369@ls/false (nz6f8e@syntax-dispatch nz7367@t '(_ . each-any)))) (if nz7369@ls/false (apply (lambda (nz736b@e*) (cons 'and (nz6fac@chi-expr* nz736b@e* nz7362@r nz7363@mr))) nz7369@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7367@t)))))) (set! nz8a39@nz6f38@and-transformer nz6f38@and-transformer) (set! nz6f3a@or-transformer (lambda (nz736d@e nz736e@r nz736f@mr) (let ((nz7373@t nz736d@e)) (let ((nz7375@ls/false (nz6f8e@syntax-dispatch nz7373@t '(_ . each-any)))) (if nz7375@ls/false (apply (lambda (nz7377@e*) (cons 'or (nz6fac@chi-expr* nz7377@e* nz736e@r nz736f@mr))) nz7375@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7373@t)))))) (set! nz8a3a@nz6f3a@or-transformer nz6f3a@or-transformer) (set! nz6f3c@case-macro (lambda (nz7379@e) (let ((nz737c@build-last '#f) (nz737e@build-one '#f)) (begin (set! nz737c@build-last (lambda (nz73a3@cls) (let ((nz73a5@t nz73a3@cls)) (let ((nz73a7@ls/false (nz6f8e@syntax-dispatch nz73a5@t '(#(scheme-id else) any . each-any)))) (if nz73a7@ls/false (apply (lambda (nz73a9@e nz73aa@e*) (cons 'begin (cons nz73a9@e nz73aa@e*))) nz73a7@ls/false) (let ((nz73ad@t nz73a5@t)) (let ((nz73af@ls/false (nz6f8e@syntax-dispatch nz73ad@t '_))) (if nz73af@ls/false (apply (lambda () (nz737e@build-one nz73a3@cls '(if #f #f))) nz73af@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz73ad@t))))))))) (set! nz737e@build-one (lambda (nz7395@cls nz7396@k) (let ((nz7399@t nz7395@cls)) (let ((nz739b@ls/false (nz6f8e@syntax-dispatch nz7399@t '(each-any any . each-any)))) (if nz739b@ls/false (apply (lambda (nz739d@d* nz739e@e nz739f@e*) (list 'if (list 'memv 't (list 'quote nz739d@d*)) (cons 'begin (cons nz739e@e nz739f@e*)) nz7396@k)) nz739b@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7399@t)))))) (let ((nz737f@t nz7379@e)) (let ((nz7381@ls/false (nz6f8e@syntax-dispatch nz737f@t '(_ any)))) (if nz7381@ls/false (apply (lambda (nz7383@expr) (nz6f44@bless (cons 'let (cons (list (list 't nz7383@expr)) '((if #f #f)))))) nz7381@ls/false) (let ((nz7385@t nz737f@t)) (let ((nz7387@ls/false (nz6f8e@syntax-dispatch nz7385@t '(_ any any . each-any)))) (if nz7387@ls/false (apply (lambda (nz7389@expr nz738a@cls nz738b@cls*) (nz6f44@bless (list 'let (list (list 't nz7389@expr)) (let nz7393@f ((nz738f@cls nz738a@cls) (nz7390@cls* nz738b@cls*)) (if (null? nz7390@cls*) (nz737c@build-last nz738f@cls) (nz737e@build-one nz738f@cls (nz7393@f (car nz7390@cls*) (cdr nz7390@cls*)))))))) nz7387@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7385@t))))))))))) (set! nz8a3b@nz6f3c@case-macro nz6f3c@case-macro) (set! nz6f3e@quote-transformer (lambda (nz73b1@e nz73b2@r nz73b3@mr) (let ((nz73b7@t nz73b1@e)) (let ((nz73b9@ls/false (nz6f8e@syntax-dispatch nz73b7@t '(_ any)))) (if nz73b9@ls/false (apply (lambda (nz73bb@datum) (list 'quote (nz6d9b@stx->datum nz73bb@datum))) nz73b9@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz73b7@t)))))) (set! nz8a3c@nz6f3e@quote-transformer nz6f3e@quote-transformer) (set! nz6f40@case-lambda-transformer (lambda (nz73bd@e nz73be@r nz73bf@mr) (let ((nz73c3@t nz73bd@e)) (let ((nz73c5@ls/false (nz6f8e@syntax-dispatch nz73c3@t '(_ . #(each (any any . each-any)))))) (if nz73c5@ls/false (apply (lambda (nz73c7@fmls* nz73c8@b* nz73c9@b**) (call-with-values (lambda () (nz6fb8@chi-lambda-clause* nz73bd@e nz73c7@fmls* (map cons nz73c8@b* nz73c9@b**) nz73be@r nz73bf@mr)) (lambda (nz73d1@nz73ce nz73d2@nz73d0) (let ((nz73d5@body* nz73d2@nz73d0) (nz73d6@fmls* nz73d1@nz73ce)) (nz6ceb@nz6c18@build-case-lambda '#f nz73d6@fmls* nz73d5@body*))))) nz73c5@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz73c3@t)))))) (set! nz8a3d@nz6f40@case-lambda-transformer nz6f40@case-lambda-transformer) (set! nz6f42@lambda-transformer (lambda (nz73d9@e nz73da@r nz73db@mr) (let ((nz73df@t nz73d9@e)) (let ((nz73e1@ls/false (nz6f8e@syntax-dispatch nz73df@t '(_ any any . each-any)))) (if nz73e1@ls/false (apply (lambda (nz73e3@fmls nz73e4@b nz73e5@b*) (call-with-values (lambda () (nz6fb6@chi-lambda-clause nz73d9@e nz73e3@fmls (cons nz73e4@b nz73e5@b*) nz73da@r nz73db@mr)) (lambda (nz73ed@nz73ea nz73ee@nz73ec) (let ((nz73f1@body nz73ee@nz73ec) (nz73f2@fmls nz73ed@nz73ea)) (nz6cea@nz6c16@build-lambda '#f nz73f2@fmls nz73f1@body))))) nz73e1@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz73df@t)))))) (set! nz8a3e@nz6f42@lambda-transformer nz6f42@lambda-transformer) (set! nz6f44@bless (lambda (nz73f5@x) (nz6d6f@mkstx (let nz73f9@f ((nz73f7@x nz73f5@x)) (if (nz6d53@stx? nz73f7@x) nz73f7@x (if (pair? nz73f7@x) (cons (nz73f9@f (car nz73f7@x)) (nz73f9@f (cdr nz73f7@x))) (if (symbol? nz73f7@x) (nz6f16@scheme-stx nz73f7@x) (if (vector? nz73f7@x) (vector-map nz73f9@f nz73f7@x) nz73f7@x))))) '() '() '()))) (set! nz8a3f@nz6f44@bless nz6f44@bless) (set! nz6f46@with-syntax-macro (lambda (nz73fb@e) (let ((nz73fd@t nz73fb@e)) (let ((nz73ff@ls/false (nz6f8e@syntax-dispatch nz73fd@t '(_ #(each (any any)) any . each-any)))) (if nz73ff@ls/false (apply (lambda (nz7401@pat* nz7402@expr* nz7403@b nz7404@b*) (let ((nz7409@idn* (let nz740d@f ((nz740b@pat* nz7401@pat*)) (if (null? nz740b@pat*) '() (call-with-values (lambda () (nz6f8c@convert-pattern (car nz740b@pat*) '())) (lambda (nz7413@nz7410 nz7414@nz7412) (let ((nz7417@idn* nz7414@nz7412) (nz7418@pat nz7413@nz7410)) (append nz7417@idn* (nz740d@f (cdr nz740b@pat*)))))))))) (begin (nz6fb4@verify-formals (map car nz7409@idn*) nz73fb@e) (let ((nz741b@t* (nz705c@generate-temporaries nz7402@expr*))) (nz6f44@bless (list 'let (map list nz741b@t* nz7402@expr*) (let nz7421@f ((nz741d@pat* nz7401@pat*) (nz741e@t* nz741b@t*)) (if (null? nz741d@pat*) (cons 'begin (cons '#f (cons nz7403@b nz7404@b*))) (list 'syntax-case (car nz741e@t*) '() (list (car nz741d@pat*) (nz7421@f (cdr nz741d@pat*) (cdr nz741e@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car nz741d@pat*)) (car nz741e@t*)))))))))))) nz73ff@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz73fd@t)))))) (set! nz8a40@nz6f46@with-syntax-macro nz6f46@with-syntax-macro) (set! nz6f48@invalid-fmls-error (lambda (nz7423@stx nz7424@fmls) (let ((nz7427@t nz7424@fmls)) (let ((nz7429@ls/false (nz6f8e@syntax-dispatch nz7427@t '#(each+ any () any)))) (if nz7429@ls/false (apply (lambda (nz742b@id* nz742c@last) (let nz7431@f ((nz742f@id* (if (nz6d87@id? nz742c@last) (cons nz742c@last nz742b@id*) (if (nz6d7d@syntax-null? nz742c@last) nz742b@id* (nz706e@syntax-violation '#f '"not an identifier" nz7423@stx nz742c@last))))) (if (null? nz742f@id*) (values) (if (not (nz6d87@id? (car nz742f@id*))) (nz706e@syntax-violation '#f '"not an identifier" nz7423@stx (car nz742f@id*)) (begin (nz7431@f (cdr nz742f@id*)) (if (nz6d93@bound-id-member? (car nz742f@id*) (cdr nz742f@id*)) (nz706e@syntax-violation '#f '"duplicate binding" nz7423@stx (car nz742f@id*)) (void))))))) nz7429@ls/false) (let ((nz7433@t nz7427@t)) (let ((nz7435@ls/false (nz6f8e@syntax-dispatch nz7433@t '_))) (if nz7435@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"malformed binding form" nz7423@stx nz7424@fmls)) nz7435@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7433@t))))))))) (set! nz8a41@nz6f48@invalid-fmls-error nz6f48@invalid-fmls-error) (set! nz6f4a@let-macro (lambda (nz7437@stx) (let ((nz7439@t nz7437@stx)) (let ((nz743b@ls/false (nz6f8e@syntax-dispatch nz7439@t '(_ #(each (any any)) any . each-any)))) (if nz743b@ls/false (apply (lambda (nz743d@lhs* nz743e@rhs* nz743f@b nz7440@b*) (if (nz6d8f@valid-bound-ids? nz743d@lhs*) (nz6f44@bless (cons (cons 'lambda (cons nz743d@lhs* (cons nz743f@b nz7440@b*))) nz743e@rhs*)) (nz6f48@invalid-fmls-error nz7437@stx nz743d@lhs*))) nz743b@ls/false) (let ((nz7445@t nz7439@t)) (let ((nz7447@ls/false (nz6f8e@syntax-dispatch nz7445@t '(_ any #(each (any any)) any . each-any)))) (if (and nz7447@ls/false (apply (lambda (nz7449@f nz744a@lhs* nz744b@rhs* nz744c@b nz744d@b*) (nz6d87@id? nz7449@f)) nz7447@ls/false)) (apply (lambda (nz7453@f nz7454@lhs* nz7455@rhs* nz7456@b nz7457@b*) (if (nz6d8f@valid-bound-ids? nz7454@lhs*) (nz6f44@bless (cons (list 'letrec (list (list nz7453@f (cons 'lambda (cons nz7454@lhs* (cons nz7456@b nz7457@b*))))) nz7453@f) nz7455@rhs*)) (nz6f48@invalid-fmls-error nz7437@stx nz7454@lhs*))) nz7447@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7445@t))))))))) (set! nz8a42@nz6f4a@let-macro nz6f4a@let-macro) (set! nz6f4c@let-values-macro (lambda (nz745d@stx) (let ((nz7460@rename '#f) (nz7462@rename* '#f)) (begin (set! nz7460@rename (lambda (nz74c5@x nz74c6@old* nz74c7@new*) (begin (if (not (nz6d87@id? nz74c5@x)) (nz706e@syntax-violation '#f '"not an indentifier" nz745d@stx nz74c5@x) (void)) (if (nz6d93@bound-id-member? nz74c5@x nz74c6@old*) (nz706e@syntax-violation '#f '"duplicate binding" nz745d@stx nz74c5@x) (void)) (let ((nz74cb@y (gensym (nz7074@syntax->datum nz74c5@x)))) (values nz74cb@y (cons nz74c5@x nz74c6@old*) (cons nz74cb@y nz74c7@new*)))))) (set! nz7462@rename* (lambda (nz74b3@x* nz74b4@old* nz74b5@new*) (if (null? nz74b3@x*) (values '() nz74b4@old* nz74b5@new*) (call-with-values (lambda () (nz7460@rename (car nz74b3@x*) nz74b4@old* nz74b5@new*)) (lambda (nz74b9@x nz74ba@old* nz74bb@new*) (call-with-values (lambda () (nz7462@rename* (cdr nz74b3@x*) nz74ba@old* nz74bb@new*)) (lambda (nz74bf@x* nz74c0@old* nz74c1@new*) (values (cons nz74b9@x nz74bf@x*) nz74c0@old* nz74c1@new*)))))))) (let ((nz7463@t nz745d@stx)) (let ((nz7465@ls/false (nz6f8e@syntax-dispatch nz7463@t '(_ () any . each-any)))) (if nz7465@ls/false (apply (lambda (nz7467@b nz7468@b*) (cons* (nz6f44@bless 'let) '() nz7467@b nz7468@b*)) nz7465@ls/false) (let ((nz746b@t nz7463@t)) (let ((nz746d@ls/false (nz6f8e@syntax-dispatch nz746b@t '(_ #(each (any any)) any . each-any)))) (if nz746d@ls/false (apply (lambda (nz746f@lhs* nz7470@rhs* nz7471@b nz7472@b*) (nz6f44@bless (let nz747f@f ((nz7477@lhs* nz746f@lhs*) (nz7478@rhs* nz7470@rhs*) (nz7479@old* '()) (nz747a@new* '())) (if (null? nz7477@lhs*) (cons 'let (cons (map list nz7479@old* nz747a@new*) (cons nz7471@b nz7472@b*))) (let ((nz7481@t (car nz7477@lhs*))) (let ((nz7483@ls/false (nz6f8e@syntax-dispatch nz7481@t 'each-any))) (if nz7483@ls/false (apply (lambda (nz7485@x*) (call-with-values (lambda () (nz7462@rename* nz7485@x* nz7479@old* nz747a@new*)) (lambda (nz748d@nz7488 nz748e@nz748a nz748f@nz748c) (let ((nz7493@new* nz748f@nz748c) (nz7494@old* nz748e@nz748a) (nz7495@y* nz748d@nz7488)) (list 'call-with-values (list 'lambda '() (car nz7478@rhs*)) (list 'lambda nz7495@y* (nz747f@f (cdr nz7477@lhs*) (cdr nz7478@rhs*) nz7494@old* nz7493@new*))))))) nz7483@ls/false) (let ((nz7499@t nz7481@t)) (let ((nz749b@ls/false (nz6f8e@syntax-dispatch nz7499@t '#(each+ any () any)))) (if nz749b@ls/false (apply (lambda (nz749d@x* nz749e@x) (call-with-values (lambda () (nz7460@rename nz749e@x nz7479@old* nz747a@new*)) (lambda (nz74a1@y nz74a2@old* nz74a3@new*) (call-with-values (lambda () (nz7462@rename* nz749d@x* nz74a2@old* nz74a3@new*)) (lambda (nz74a7@y* nz74a8@old* nz74a9@new*) (list 'call-with-values (list 'lambda '() (car nz7478@rhs*)) (list 'lambda (append nz74a7@y* nz74a1@y) (nz747f@f (cdr nz7477@lhs*) (cdr nz7478@rhs*) nz74a8@old* nz74a9@new*)))))))) nz749b@ls/false) (let ((nz74ad@t nz7499@t)) (let ((nz74af@ls/false (nz6f8e@syntax-dispatch nz74ad@t 'any))) (if nz74af@ls/false (apply (lambda (nz74b1@others) (nz706e@syntax-violation '#f '"malformed bindings" nz745d@stx nz74b1@others)) nz74af@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz74ad@t)))))))))))))) nz746d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz746b@t))))))))))) (set! nz8a43@nz6f4c@let-values-macro nz6f4c@let-values-macro) (set! nz6f4e@let*-values-macro (lambda (nz74cd@stx) (let ((nz74d0@check '#f)) (begin (set! nz74d0@check (lambda (nz74ff@x*) (if (not (null? nz74ff@x*)) (let ((nz7501@x (car nz74ff@x*))) (begin (if (not (nz6d87@id? nz7501@x)) (nz706e@syntax-violation '#f '"not an identifier" nz74cd@stx nz7501@x) (void)) (nz74d0@check (cdr nz74ff@x*)) (if (nz6d93@bound-id-member? nz7501@x (cdr nz74ff@x*)) (nz706e@syntax-violation '#f '"duplicate identifier" nz74cd@stx nz7501@x) (void)))) (void)))) (let ((nz74d1@t nz74cd@stx)) (let ((nz74d3@ls/false (nz6f8e@syntax-dispatch nz74d1@t '(_ () any . each-any)))) (if nz74d3@ls/false (apply (lambda (nz74d5@b nz74d6@b*) (cons* (nz6f44@bless 'let) '() nz74d5@b nz74d6@b*)) nz74d3@ls/false) (let ((nz74d9@t nz74d1@t)) (let ((nz74db@ls/false (nz6f8e@syntax-dispatch nz74d9@t '(_ #(each (any any)) any . each-any)))) (if nz74db@ls/false (apply (lambda (nz74dd@lhs* nz74de@rhs* nz74df@b nz74e0@b*) (nz6f44@bless (let nz74e9@f ((nz74e5@lhs* nz74dd@lhs*) (nz74e6@rhs* nz74de@rhs*)) (if (null? nz74e5@lhs*) (cons 'begin (cons nz74df@b nz74e0@b*)) (let ((nz74eb@t (car nz74e5@lhs*))) (let ((nz74ed@ls/false (nz6f8e@syntax-dispatch nz74eb@t 'each-any))) (if nz74ed@ls/false (apply (lambda (nz74ef@x*) (begin (nz74d0@check nz74ef@x*) (list 'call-with-values (list 'lambda '() (car nz74e6@rhs*)) (list 'lambda nz74ef@x* (nz74e9@f (cdr nz74e5@lhs*) (cdr nz74e6@rhs*)))))) nz74ed@ls/false) (let ((nz74f1@t nz74eb@t)) (let ((nz74f3@ls/false (nz6f8e@syntax-dispatch nz74f1@t '#(each+ any () any)))) (if nz74f3@ls/false (apply (lambda (nz74f5@x* nz74f6@x) (begin (nz74d0@check (cons nz74f6@x nz74f5@x*)) (list 'call-with-values (list 'lambda '() (car nz74e6@rhs*)) (list 'lambda (append nz74f5@x* nz74f6@x) (nz74e9@f (cdr nz74e5@lhs*) (cdr nz74e6@rhs*)))))) nz74f3@ls/false) (let ((nz74f9@t nz74f1@t)) (let ((nz74fb@ls/false (nz6f8e@syntax-dispatch nz74f9@t 'any))) (if nz74fb@ls/false (apply (lambda (nz74fd@others) (nz706e@syntax-violation '#f '"malformed bindings" nz74cd@stx nz74fd@others)) nz74fb@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz74f9@t)))))))))))))) nz74db@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz74d9@t))))))))))) (set! nz8a44@nz6f4e@let*-values-macro nz6f4e@let*-values-macro) (set! nz6f50@trace-lambda-macro (lambda (nz7503@stx) (let ((nz7505@t nz7503@stx)) (let ((nz7507@ls/false (nz6f8e@syntax-dispatch nz7505@t '(_ any each-any any . each-any)))) (if nz7507@ls/false (apply (lambda (nz7509@who nz750a@fmls nz750b@b nz750c@b*) (if (nz6d8f@valid-bound-ids? nz750a@fmls) (nz6f44@bless (list 'make-traced-procedure (list 'quote nz7509@who) (cons 'lambda (cons nz750a@fmls (cons nz750b@b nz750c@b*))))) (nz6f48@invalid-fmls-error nz7503@stx nz750a@fmls))) nz7507@ls/false) (let ((nz7511@t nz7505@t)) (let ((nz7513@ls/false (nz6f8e@syntax-dispatch nz7511@t '(_ any #(each+ any () any) any . each-any)))) (if nz7513@ls/false (apply (lambda (nz7515@who nz7516@fmls nz7517@last nz7518@b nz7519@b*) (if (nz6d8f@valid-bound-ids? (cons nz7517@last nz7516@fmls)) (nz6f44@bless (list 'make-traced-procedure (list 'quote nz7515@who) (cons 'lambda (cons (append nz7516@fmls nz7517@last) (cons nz7518@b nz7519@b*))))) (nz6f48@invalid-fmls-error nz7503@stx (append nz7516@fmls nz7517@last)))) nz7513@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7511@t))))))))) (set! nz8a45@nz6f50@trace-lambda-macro nz6f50@trace-lambda-macro) (set! nz6f52@trace-define-macro (lambda (nz751f@stx) (let ((nz7521@t nz751f@stx)) (let ((nz7523@ls/false (nz6f8e@syntax-dispatch nz7521@t '(_ (any . each-any) any . each-any)))) (if nz7523@ls/false (apply (lambda (nz7525@who nz7526@fmls nz7527@b nz7528@b*) (if (nz6d8f@valid-bound-ids? nz7526@fmls) (nz6f44@bless (list 'define nz7525@who (list 'make-traced-procedure (list 'quote nz7525@who) (cons 'lambda (cons nz7526@fmls (cons nz7527@b nz7528@b*)))))) (nz6f48@invalid-fmls-error nz751f@stx nz7526@fmls))) nz7523@ls/false) (let ((nz752d@t nz7521@t)) (let ((nz752f@ls/false (nz6f8e@syntax-dispatch nz752d@t '(_ (any . #(each+ any () any)) any . each-any)))) (if nz752f@ls/false (apply (lambda (nz7531@who nz7532@fmls nz7533@last nz7534@b nz7535@b*) (if (nz6d8f@valid-bound-ids? (cons nz7533@last nz7532@fmls)) (nz6f44@bless (list 'define nz7531@who (list 'make-traced-procedure (list 'quote nz7531@who) (cons 'lambda (cons (append nz7532@fmls nz7533@last) (cons nz7534@b nz7535@b*)))))) (nz6f48@invalid-fmls-error nz751f@stx (append nz7532@fmls nz7533@last)))) nz752f@ls/false) (let ((nz753b@t nz752d@t)) (let ((nz753d@ls/false (nz6f8e@syntax-dispatch nz753b@t '(_ any any)))) (if nz753d@ls/false (apply (lambda (nz753f@who nz7540@expr) (if (nz6d87@id? nz753f@who) (nz6f44@bless (list 'define nz753f@who (list 'let (list (list 'v nz7540@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote nz753f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (nz706e@syntax-violation '#f '"invalid name" nz751f@stx))) nz753d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz753b@t)))))))))))) (set! nz8a46@nz6f52@trace-define-macro nz6f52@trace-define-macro) (set! nz6f54@trace-define-syntax-macro (lambda (nz7543@stx) (let ((nz7545@t nz7543@stx)) (let ((nz7547@ls/false (nz6f8e@syntax-dispatch nz7545@t '(_ any any)))) (if nz7547@ls/false (apply (lambda (nz7549@who nz754a@expr) (if (nz6d87@id? nz7549@who) (nz6f44@bless (list 'define-syntax nz7549@who (list 'make-traced-macro (list 'quote nz7549@who) nz754a@expr))) (nz706e@syntax-violation '#f '"invalid name" nz7543@stx))) nz7547@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7545@t)))))) (set! nz8a47@nz6f54@trace-define-syntax-macro nz6f54@trace-define-syntax-macro) (set! nz6f56@trace-let/rec-syntax (lambda (nz754d@who) (lambda (nz754f@stx) (let ((nz7551@t nz754f@stx)) (let ((nz7553@ls/false (nz6f8e@syntax-dispatch nz7551@t '(_ #(each (any any)) any . each-any)))) (if nz7553@ls/false (apply (lambda (nz7555@lhs* nz7556@rhs* nz7557@b nz7558@b*) (if (nz6d8f@valid-bound-ids? nz7555@lhs*) (let ((nz755d@rhs* (map (lambda (nz755f@lhs nz7560@rhs) (list 'make-traced-macro (list 'quote nz755f@lhs) nz7560@rhs)) nz7555@lhs* nz7556@rhs*))) (nz6f44@bless (cons nz754d@who (cons (map list nz7555@lhs* nz755d@rhs*) (cons nz7557@b nz7558@b*))))) (nz6f48@invalid-fmls-error nz754f@stx nz7555@lhs*))) nz7553@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7551@t))))))) (set! nz8a48@nz6f56@trace-let/rec-syntax nz6f56@trace-let/rec-syntax) (set! nz6f58@trace-let-syntax-macro (nz6f56@trace-let/rec-syntax 'let-syntax)) (set! nz8a49@nz6f58@trace-let-syntax-macro nz6f58@trace-let-syntax-macro) (set! nz6f5a@trace-letrec-syntax-macro (nz6f56@trace-let/rec-syntax 'letrec-syntax)) (set! nz8a4a@nz6f5a@trace-letrec-syntax-macro nz6f5a@trace-letrec-syntax-macro) (set! nz6f5c@guard-macro (lambda (nz7563@x) (let ((nz7566@gen-clauses '#f)) (begin (set! nz7566@gen-clauses (lambda (nz757d@con nz757e@outerk nz757f@clause*) (let ((nz7584@f '#f) (nz7586@f* '#f)) (begin (set! nz7584@f (lambda (nz75bd@x nz75be@k) (let ((nz75c1@t nz75bd@x)) (let ((nz75c3@ls/false (nz6f8e@syntax-dispatch nz75c1@t '(any #(scheme-id =>) any)))) (if nz75c3@ls/false (apply (lambda (nz75c5@e nz75c6@p) (let ((nz75c9@t (gensym))) (list 'let (list (list nz75c9@t nz75c5@e)) (list 'if nz75c9@t (list nz75c6@p nz75c9@t) nz75be@k)))) nz75c3@ls/false) (let ((nz75cb@t nz75c1@t)) (let ((nz75cd@ls/false (nz6f8e@syntax-dispatch nz75cb@t '(any)))) (if nz75cd@ls/false (apply (lambda (nz75cf@e) (let ((nz75d1@t (gensym))) (list 'let (list (list nz75d1@t nz75cf@e)) (list 'if nz75d1@t nz75d1@t nz75be@k)))) nz75cd@ls/false) (let ((nz75d3@t nz75cb@t)) (let ((nz75d5@ls/false (nz6f8e@syntax-dispatch nz75d3@t '(any any . each-any)))) (if nz75d5@ls/false (apply (lambda (nz75d7@e nz75d8@v nz75d9@v*) (list 'if nz75d7@e (cons 'begin (cons nz75d8@v nz75d9@v*)) nz75be@k)) nz75d5@ls/false) (let ((nz75dd@t nz75d3@t)) (let ((nz75df@ls/false (nz6f8e@syntax-dispatch nz75dd@t '_))) (if nz75df@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid guard clause" nz75bd@x)) nz75df@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz75dd@t))))))))))))))) (set! nz7586@f* (lambda (nz7593@x*) (let ((nz7595@t nz7593@x*)) (let ((nz7597@ls/false (nz6f8e@syntax-dispatch nz7595@t '()))) (if nz7597@ls/false (apply (lambda () (let ((nz7599@g (gensym))) (values (list nz7599@g (list 'lambda '() (list 'raise-continuable nz757d@con))) nz7599@g))) nz7597@ls/false) (let ((nz759b@t nz7595@t)) (let ((nz759d@ls/false (nz6f8e@syntax-dispatch nz759b@t '((#(scheme-id else) any . each-any))))) (if nz759d@ls/false (apply (lambda (nz759f@e nz75a0@e*) (values (cons 'begin (cons nz759f@e nz75a0@e*)) '#f)) nz759d@ls/false) (let ((nz75a3@t nz759b@t)) (let ((nz75a5@ls/false (nz6f8e@syntax-dispatch nz75a3@t '(any . any)))) (if nz75a5@ls/false (apply (lambda (nz75a7@cls nz75a8@cls*) (call-with-values (lambda () (nz7586@f* nz75a8@cls*)) (lambda (nz75af@nz75ac nz75b0@nz75ae) (let ((nz75b3@g nz75b0@nz75ae) (nz75b4@e nz75af@nz75ac)) (values (nz7584@f nz75a7@cls nz75b4@e) nz75b3@g))))) nz75a5@ls/false) (let ((nz75b7@t nz75a3@t)) (let ((nz75b9@ls/false (nz6f8e@syntax-dispatch nz75b7@t 'any))) (if nz75b9@ls/false (apply (lambda (nz75bb@others) (nz706e@syntax-violation '#f '"invalid guard clause" nz75bb@others)) nz75b9@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz75b7@t))))))))))))))) (call-with-values (lambda () (nz7586@f* nz757f@clause*)) (lambda (nz758b@nz7588 nz758c@nz758a) (let ((nz758f@raisek nz758c@nz758a) (nz7590@code nz758b@nz7588)) (if nz758f@raisek (list (list 'call/cc (list 'lambda (list nz758f@raisek) (list nz757e@outerk (list 'lambda '() nz7590@code))))) (list nz757e@outerk (list 'lambda '() nz7590@code)))))))))) (let ((nz7567@t nz7563@x)) (let ((nz7569@ls/false (nz6f8e@syntax-dispatch nz7567@t '(_ (any . each-any) any . each-any)))) (if (and nz7569@ls/false (apply (lambda (nz756b@con nz756c@clause* nz756d@b nz756e@b*) (nz6d87@id? nz756b@con)) nz7569@ls/false)) (apply (lambda (nz7573@con nz7574@clause* nz7575@b nz7576@b*) (let ((nz757b@outerk (gensym))) (nz6f44@bless (list (list 'call/cc (list 'lambda (list nz757b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list nz7573@con) (nz7566@gen-clauses nz7573@con nz757b@outerk nz7574@clause*)) (cons 'lambda (cons '() (cons nz7575@b nz7576@b*))))))))))) nz7569@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7567@t)))))))) (set! nz8a4b@nz6f5c@guard-macro nz6f5c@guard-macro) (set! nz6f5e@define-enumeration-macro (lambda (nz75e1@stx) (let ((nz75e4@set? '#f) (nz75e6@remove-dups '#f)) (begin (set! nz75e4@set? (lambda (nz75fd@x) (or (null? nz75fd@x) (and (not (memq (car nz75fd@x) (cdr nz75fd@x))) (nz75e4@set? (cdr nz75fd@x)))))) (set! nz75e6@remove-dups (lambda (nz75fb@ls) (if (null? nz75fb@ls) '() (cons (car nz75fb@ls) (nz75e6@remove-dups (remq (car nz75fb@ls) (cdr nz75fb@ls))))))) (let ((nz75e7@t nz75e1@stx)) (let ((nz75e9@ls/false (nz6f8e@syntax-dispatch nz75e7@t '(_ any each-any any)))) (if (and nz75e9@ls/false (apply (lambda (nz75eb@name nz75ec@id* nz75ed@maker) (and (nz6d87@id? nz75eb@name) (nz6d87@id? nz75ed@maker) (for-all nz6d87@id? nz75ec@id*))) nz75e9@ls/false)) (apply (lambda (nz75f1@name nz75f2@id* nz75f3@maker) (let ((nz75f7@name* (nz75e6@remove-dups (nz7074@syntax->datum nz75f2@id*))) (nz75f8@mk (gensym))) (nz6f44@bless (list 'begin (list 'define nz75f8@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote nz75f7@name*)))) (list 'define-syntax nz75f1@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote nz75f7@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote nz75f1@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax nz75f3@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote nz75f3@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote nz75f7@name*)) (cons 'syntax-violation (cons (list 'quote nz75f3@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons nz75f8@mk '('(n* ...))))))))))))) nz75e9@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz75e7@t)))))))) (set! nz8a4c@nz6f5e@define-enumeration-macro nz6f5e@define-enumeration-macro) (set! nz6f60@time-macro (lambda (nz75ff@stx) (let ((nz7601@t nz75ff@stx)) (let ((nz7603@ls/false (nz6f8e@syntax-dispatch nz7601@t '(_ any)))) (if nz7603@ls/false (apply (lambda (nz7605@expr) (nz6f44@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() nz7605@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) nz7603@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7601@t)))))) (set! nz8a4d@nz6f60@time-macro nz6f60@time-macro) (set! nz6f62@delay-macro (lambda (nz7607@stx) (let ((nz7609@t nz7607@stx)) (let ((nz760b@ls/false (nz6f8e@syntax-dispatch nz7609@t '(_ any)))) (if nz760b@ls/false (apply (lambda (nz760d@expr) (nz6f44@bless (list 'make-promise (list 'lambda '() nz760d@expr)))) nz760b@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7609@t)))))) (set! nz8a4e@nz6f62@delay-macro nz6f62@delay-macro) (set! nz6f64@assert-macro (lambda (nz760f@stx) (let ((nz7611@t nz760f@stx)) (let ((nz7613@ls/false (nz6f8e@syntax-dispatch nz7611@t '(_ any)))) (if nz7613@ls/false (apply (lambda (nz7615@expr) (let ((nz7617@pos (or (nz7066@expression-position nz760f@stx) (nz7066@expression-position nz7615@expr)))) (nz6f44@bless (list 'let (list (list 'x nz7615@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote nz7615@expr) (list 'quote nz7617@pos))))))) nz7613@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7611@t)))))) (set! nz8a4f@nz6f64@assert-macro nz6f64@assert-macro) (set! nz6f66@endianness-macro (lambda (nz7619@stx) (let ((nz761b@t nz7619@stx)) (let ((nz761d@ls/false (nz6f8e@syntax-dispatch nz761b@t '(_ any)))) (if nz761d@ls/false (apply (lambda (nz761f@e) (let ((nz7621@t (nz7074@syntax->datum nz761f@e))) (if (memv nz7621@t '(little)) (nz6f44@bless ''little) (if (memv nz7621@t '(big)) (nz6f44@bless ''big) (nz706e@syntax-violation '#f '"endianness must be big or little" nz7619@stx))))) nz761d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz761b@t)))))) (set! nz8a50@nz6f66@endianness-macro nz6f66@endianness-macro) (set! nz6f68@identifier-syntax-macro (lambda (nz7623@stx) (let ((nz7625@t nz7623@stx)) (let ((nz7627@ls/false (nz6f8e@syntax-dispatch nz7625@t '(_ any)))) (if nz7627@ls/false (apply (lambda (nz7629@expr) (nz6f44@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax nz7629@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax nz7629@expr) '((syntax (e* ...)))))))))) nz7627@ls/false) (let ((nz762b@t nz7625@t)) (let ((nz762d@ls/false (nz6f8e@syntax-dispatch nz762b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and nz762d@ls/false (apply (lambda (nz762f@id1 nz7630@expr1 nz7631@id2 nz7632@expr2 nz7633@expr3) (and (nz6d87@id? nz762f@id1) (nz6d87@id? nz7631@id2) (nz6d87@id? nz7632@expr2))) nz762d@ls/false)) (apply (lambda (nz7639@id1 nz763a@expr1 nz763b@id2 nz763c@expr2 nz763d@expr3) (nz6f44@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax nz763a@expr1)) (list (list 'set! 'id nz763c@expr2) (list 'syntax nz763d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons nz763a@expr1 '(e* ...))))))))) nz762d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz762b@t))))))))) (set! nz8a51@nz6f68@identifier-syntax-macro nz6f68@identifier-syntax-macro) (set! nz6f6a@do-macro (lambda (nz7643@stx) (let ((nz7646@bind '#f)) (begin (set! nz7646@bind (lambda (nz765d@x) (let ((nz765f@t nz765d@x)) (let ((nz7661@ls/false (nz6f8e@syntax-dispatch nz765f@t '(any any)))) (if nz7661@ls/false (apply (lambda (nz7663@x nz7664@init) (list nz7663@x nz7664@init nz7663@x)) nz7661@ls/false) (let ((nz7667@t nz765f@t)) (let ((nz7669@ls/false (nz6f8e@syntax-dispatch nz7667@t '(any any any)))) (if nz7669@ls/false (apply (lambda (nz766b@x nz766c@init nz766d@step) (list nz766b@x nz766c@init nz766d@step)) nz7669@ls/false) (let ((nz7671@t nz7667@t)) (let ((nz7673@ls/false (nz6f8e@syntax-dispatch nz7671@t '_))) (if nz7673@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid binding" nz7643@stx)) nz7673@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7671@t)))))))))))) (let ((nz7647@t nz7643@stx)) (let ((nz7649@ls/false (nz6f8e@syntax-dispatch nz7647@t '(_ each-any (any . each-any) . each-any)))) (if nz7649@ls/false (apply (lambda (nz764b@binding* nz764c@test nz764d@expr* nz764e@command*) (let ((nz7653@t (map nz7646@bind nz764b@binding*))) (let ((nz7655@ls/false (nz6f8e@syntax-dispatch nz7653@t '#(each (any any any))))) (if nz7655@ls/false (apply (lambda (nz7657@x* nz7658@init* nz7659@step*) (if (nz6d8f@valid-bound-ids? nz7657@x*) (nz6f44@bless (list 'letrec (list (list 'loop (list 'lambda nz7657@x* (list 'if nz764c@test (cons 'begin (cons '(if #f #f) nz764d@expr*)) (cons 'begin (append nz764e@command* (list (cons 'loop nz7659@step*)))))))) (cons 'loop nz7658@init*))) (nz706e@syntax-violation '#f '"invalid bindings" nz7643@stx))) nz7655@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7653@t))))) nz7649@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7647@t)))))))) (set! nz8a52@nz6f6a@do-macro nz6f6a@do-macro) (set! nz6f6c@let*-macro (lambda (nz7675@stx) (let ((nz7677@t nz7675@stx)) (let ((nz7679@ls/false (nz6f8e@syntax-dispatch nz7677@t '(_ #(each (any any)) any . each-any)))) (if (and nz7679@ls/false (apply (lambda (nz767b@lhs* nz767c@rhs* nz767d@b nz767e@b*) (for-all nz6d87@id? nz767b@lhs*)) nz7679@ls/false)) (apply (lambda (nz7683@lhs* nz7684@rhs* nz7685@b nz7686@b*) (nz6f44@bless (let nz768d@f ((nz768b@x* (map list nz7683@lhs* nz7684@rhs*))) (if (null? nz768b@x*) (cons 'let (cons '() (cons nz7685@b nz7686@b*))) (list 'let (list (car nz768b@x*)) (nz768d@f (cdr nz768b@x*))))))) nz7679@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7677@t)))))) (set! nz8a53@nz6f6c@let*-macro nz6f6c@let*-macro) (set! nz6f6e@or-macro (lambda (nz768f@stx) (let ((nz7691@t nz768f@stx)) (let ((nz7693@ls/false (nz6f8e@syntax-dispatch nz7691@t '(_)))) (if nz7693@ls/false (apply (lambda () '#f) nz7693@ls/false) (let ((nz7695@t nz7691@t)) (let ((nz7697@ls/false (nz6f8e@syntax-dispatch nz7695@t '(_ any . each-any)))) (if nz7697@ls/false (apply (lambda (nz7699@e nz769a@e*) (nz6f44@bless (let nz76a1@f ((nz769d@e nz7699@e) (nz769e@e* nz769a@e*)) (if (null? nz769e@e*) (list 'begin '#f nz769d@e) (list 'let (list (list 't nz769d@e)) (list 'if 't 't (nz76a1@f (car nz769e@e*) (cdr nz769e@e*)))))))) nz7697@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7695@t))))))))) (set! nz8a54@nz6f6e@or-macro nz6f6e@or-macro) (set! nz6f70@and-macro (lambda (nz76a3@stx) (let ((nz76a5@t nz76a3@stx)) (let ((nz76a7@ls/false (nz6f8e@syntax-dispatch nz76a5@t '(_)))) (if nz76a7@ls/false (apply (lambda () '#t) nz76a7@ls/false) (let ((nz76a9@t nz76a5@t)) (let ((nz76ab@ls/false (nz6f8e@syntax-dispatch nz76a9@t '(_ any . each-any)))) (if nz76ab@ls/false (apply (lambda (nz76ad@e nz76ae@e*) (nz6f44@bless (let nz76b5@f ((nz76b1@e nz76ad@e) (nz76b2@e* nz76ae@e*)) (if (null? nz76b2@e*) (list 'begin '#f nz76b1@e) (cons 'if (cons nz76b1@e (cons (nz76b5@f (car nz76b2@e*) (cdr nz76b2@e*)) '(#f)))))))) nz76ab@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz76a9@t))))))))) (set! nz8a55@nz6f70@and-macro nz6f70@and-macro) (set! nz6f72@cond-macro (lambda (nz76b7@stx) (let ((nz76b9@t nz76b7@stx)) (let ((nz76bb@ls/false (nz6f8e@syntax-dispatch nz76b9@t '(_ any . each-any)))) (if nz76bb@ls/false (apply (lambda (nz76bd@cls nz76be@cls*) (nz6f44@bless (let nz76c5@f ((nz76c1@cls nz76bd@cls) (nz76c2@cls* nz76be@cls*)) (if (null? nz76c2@cls*) (let ((nz76c7@t nz76c1@cls)) (let ((nz76c9@ls/false (nz6f8e@syntax-dispatch nz76c7@t '(#(scheme-id else) any . each-any)))) (if nz76c9@ls/false (apply (lambda (nz76cb@e nz76cc@e*) (cons 'begin (cons nz76cb@e nz76cc@e*))) nz76c9@ls/false) (let ((nz76cf@t nz76c7@t)) (let ((nz76d1@ls/false (nz6f8e@syntax-dispatch nz76cf@t '(any #(scheme-id =>) any)))) (if nz76d1@ls/false (apply (lambda (nz76d3@e nz76d4@p) (list 'let (list (list 't nz76d3@e)) (list 'if 't (cons nz76d4@p '(t))))) nz76d1@ls/false) (let ((nz76d7@t nz76cf@t)) (let ((nz76d9@ls/false (nz6f8e@syntax-dispatch nz76d7@t '(any)))) (if nz76d9@ls/false (apply (lambda (nz76db@e) (cons 'or (cons nz76db@e '((if #f #f))))) nz76d9@ls/false) (let ((nz76dd@t nz76d7@t)) (let ((nz76df@ls/false (nz6f8e@syntax-dispatch nz76dd@t '(any . each-any)))) (if nz76df@ls/false (apply (lambda (nz76e1@e nz76e2@e*) (list 'if nz76e1@e (cons 'begin nz76e2@e*))) nz76df@ls/false) (let ((nz76e5@t nz76dd@t)) (let ((nz76e7@ls/false (nz6f8e@syntax-dispatch nz76e5@t '_))) (if nz76e7@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid last clause" nz76b7@stx)) nz76e7@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz76e5@t)))))))))))))))) (let ((nz76e9@t nz76c1@cls)) (let ((nz76eb@ls/false (nz6f8e@syntax-dispatch nz76e9@t '(#(scheme-id else) any . each-any)))) (if nz76eb@ls/false (apply (lambda (nz76ed@e nz76ee@e*) (nz706e@syntax-violation '#f '"incorrect position of keyword else" nz76b7@stx)) nz76eb@ls/false) (let ((nz76f1@t nz76e9@t)) (let ((nz76f3@ls/false (nz6f8e@syntax-dispatch nz76f1@t '(any #(scheme-id =>) any)))) (if nz76f3@ls/false (apply (lambda (nz76f5@e nz76f6@p) (list 'let (list (list 't nz76f5@e)) (list 'if 't (cons nz76f6@p '(t)) (nz76c5@f (car nz76c2@cls*) (cdr nz76c2@cls*))))) nz76f3@ls/false) (let ((nz76f9@t nz76f1@t)) (let ((nz76fb@ls/false (nz6f8e@syntax-dispatch nz76f9@t '(any)))) (if nz76fb@ls/false (apply (lambda (nz76fd@e) (list 'or nz76fd@e (nz76c5@f (car nz76c2@cls*) (cdr nz76c2@cls*)))) nz76fb@ls/false) (let ((nz76ff@t nz76f9@t)) (let ((nz7701@ls/false (nz6f8e@syntax-dispatch nz76ff@t '(any . each-any)))) (if nz7701@ls/false (apply (lambda (nz7703@e nz7704@e*) (list 'if nz7703@e (cons 'begin nz7704@e*) (nz76c5@f (car nz76c2@cls*) (cdr nz76c2@cls*)))) nz7701@ls/false) (let ((nz7707@t nz76ff@t)) (let ((nz7709@ls/false (nz6f8e@syntax-dispatch nz7707@t '_))) (if nz7709@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid last clause" nz76b7@stx)) nz7709@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7707@t)))))))))))))))))))) nz76bb@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz76b9@t)))))) (set! nz8a56@nz6f72@cond-macro nz6f72@cond-macro) (set! nz6f74@do-include (lambda (nz770b@stx nz770c@id nz770d@filename) (let ((nz7711@filename (nz6d9b@stx->datum nz770d@filename))) (begin (if (not (and (string? nz7711@filename) (nz6d87@id? nz770c@id))) (nz706e@syntax-violation '#f '"invalid syntax" nz770b@stx) (void)) (cons (nz6f44@bless 'begin) (with-input-from-file nz7711@filename (lambda () (let nz7715@f ((nz7713@ls '())) (let ((nz7717@x (nz68b2@nz6782@read-annotated))) (if (eof-object? nz7717@x) (reverse nz7713@ls) (nz7715@f (cons (nz6d67@datum->stx nz770c@id nz7717@x) nz7713@ls)))))))))))) (set! nz8a57@nz6f74@do-include nz6f74@do-include) (set! nz6f76@include-macro (lambda (nz7719@e) (let ((nz771b@t nz7719@e)) (let ((nz771d@ls/false (nz6f8e@syntax-dispatch nz771b@t '(any any)))) (if nz771d@ls/false (apply (lambda (nz771f@id nz7720@filename) (nz6f74@do-include nz7719@e nz771f@id nz7720@filename)) nz771d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz771b@t)))))) (set! nz8a58@nz6f76@include-macro nz6f76@include-macro) (set! nz6f78@include-into-macro (lambda (nz7723@e) (let ((nz7725@t nz7723@e)) (let ((nz7727@ls/false (nz6f8e@syntax-dispatch nz7725@t '(_ any any)))) (if nz7727@ls/false (apply (lambda (nz7729@id nz772a@filename) (nz6f74@do-include nz7723@e nz7729@id nz772a@filename)) nz7727@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7725@t)))))) (set! nz8a59@nz6f78@include-into-macro nz6f78@include-into-macro) (set! nz6f7a@syntax-rules-macro (lambda (nz772d@e) (let ((nz772f@t nz772d@e)) (let ((nz7731@ls/false (nz6f8e@syntax-dispatch nz772f@t '(_ each-any . #(each (any any)))))) (if nz7731@ls/false (apply (lambda (nz7733@lits nz7734@pat* nz7735@tmp*) (begin (nz6f94@verify-literals nz7733@lits nz772d@e) (nz6f44@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons nz7733@lits (map (lambda (nz7739@pat nz773a@tmp) (let ((nz773d@t nz7739@pat)) (let ((nz773f@ls/false (nz6f8e@syntax-dispatch nz773d@t '(_ . any)))) (if nz773f@ls/false (apply (lambda (nz7741@rest) (list (cons 'g nz7741@rest) (list 'syntax nz773a@tmp))) nz773f@ls/false) (let ((nz7743@t nz773d@t)) (let ((nz7745@ls/false (nz6f8e@syntax-dispatch nz7743@t '_))) (if nz7745@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid syntax-rules pattern" nz772d@e nz7739@pat)) nz7745@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7743@t)))))))) nz7734@pat* nz7735@tmp*)))))))) nz7731@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz772f@t)))))) (set! nz8a5a@nz6f7a@syntax-rules-macro nz6f7a@syntax-rules-macro) (set! nz6f7c@quasiquote-macro (let ((nz7748@datum '#f) (nz7764@quasicons* '#f) (nz7766@quasicons '#f) (nz7768@quasiappend '#f) (nz776a@quasivector '#f) (nz776c@vquasi '#f) (nz776e@quasi '#f)) (begin (set! nz7748@datum (lambda (nz7849@x) (list (nz6f16@scheme-stx 'quote) (nz6d6f@mkstx nz7849@x '() '() '())))) (set! nz7764@quasicons* (lambda (nz7841@x nz7842@y) (let nz7847@f ((nz7845@x nz7841@x)) (if (null? nz7845@x) nz7842@y (nz7766@quasicons (car nz7845@x) (nz7847@f (cdr nz7845@x))))))) (set! nz7766@quasicons (lambda (nz781b@x nz781c@y) (let ((nz781f@t nz781c@y)) (let ((nz7821@ls/false (nz6f8e@syntax-dispatch nz781f@t '(#(scheme-id quote) any)))) (if nz7821@ls/false (apply (lambda (nz7823@dy) (let ((nz7825@t nz781b@x)) (let ((nz7827@ls/false (nz6f8e@syntax-dispatch nz7825@t '(#(scheme-id quote) any)))) (if nz7827@ls/false (apply (lambda (nz7829@dx) (list (nz6f16@scheme-stx 'quote) (cons nz7829@dx nz7823@dy))) nz7827@ls/false) (let ((nz782b@t nz7825@t)) (let ((nz782d@ls/false (nz6f8e@syntax-dispatch nz782b@t '_))) (if nz782d@ls/false (apply (lambda () (let ((nz782f@t nz7823@dy)) (let ((nz7831@ls/false (nz6f8e@syntax-dispatch nz782f@t '()))) (if nz7831@ls/false (apply (lambda () (list (nz6f16@scheme-stx 'list) nz781b@x)) nz7831@ls/false) (let ((nz7833@t nz782f@t)) (let ((nz7835@ls/false (nz6f8e@syntax-dispatch nz7833@t '_))) (if nz7835@ls/false (apply (lambda () (list (nz6f16@scheme-stx 'cons) nz781b@x nz781c@y)) nz7835@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7833@t)))))))) nz782d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz782b@t)))))))) nz7821@ls/false) (let ((nz7837@t nz781f@t)) (let ((nz7839@ls/false (nz6f8e@syntax-dispatch nz7837@t '(#(scheme-id list) . each-any)))) (if nz7839@ls/false (apply (lambda (nz783b@stuff) (cons* (nz6f16@scheme-stx 'list) nz781b@x nz783b@stuff)) nz7839@ls/false) (let ((nz783d@t nz7837@t)) (let ((nz783f@ls/false (nz6f8e@syntax-dispatch nz783d@t '_))) (if nz783f@ls/false (apply (lambda () (list (nz6f16@scheme-stx 'cons) nz781b@x nz781c@y)) nz783f@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz783d@t)))))))))))) (set! nz7768@quasiappend (lambda (nz7801@x nz7802@y) (let ((nz7805@ls (let nz7809@f ((nz7807@x nz7801@x)) (if (null? nz7807@x) (let ((nz780b@t nz7802@y)) (let ((nz780d@ls/false (nz6f8e@syntax-dispatch nz780b@t '(#(scheme-id quote) ())))) (if nz780d@ls/false (apply (lambda () '()) nz780d@ls/false) (let ((nz780f@t nz780b@t)) (let ((nz7811@ls/false (nz6f8e@syntax-dispatch nz780f@t '_))) (if nz7811@ls/false (apply (lambda () (list nz7802@y)) nz7811@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz780f@t))))))) (let ((nz7813@t (car nz7807@x))) (let ((nz7815@ls/false (nz6f8e@syntax-dispatch nz7813@t '(#(scheme-id quote) ())))) (if nz7815@ls/false (apply (lambda () (nz7809@f (cdr nz7807@x))) nz7815@ls/false) (let ((nz7817@t nz7813@t)) (let ((nz7819@ls/false (nz6f8e@syntax-dispatch nz7817@t '_))) (if nz7819@ls/false (apply (lambda () (cons (car nz7807@x) (nz7809@f (cdr nz7807@x)))) nz7819@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7817@t))))))))))) (if (null? nz7805@ls) (list (nz6f16@scheme-stx 'quote) '()) (if (null? (cdr nz7805@ls)) (car nz7805@ls) (cons* (nz6f16@scheme-stx 'append) nz7805@ls)))))) (set! nz776a@quasivector (lambda (nz77cf@x) (let ((nz77d1@pat-x nz77cf@x)) (let ((nz77d3@t nz77d1@pat-x)) (let ((nz77d5@ls/false (nz6f8e@syntax-dispatch nz77d3@t '(#(scheme-id quote) each-any)))) (if nz77d5@ls/false (apply (lambda (nz77d7@x*) (list (nz6f16@scheme-stx 'quote) (list->vector nz77d7@x*))) nz77d5@ls/false) (let ((nz77d9@t nz77d3@t)) (let ((nz77db@ls/false (nz6f8e@syntax-dispatch nz77d9@t '_))) (if nz77db@ls/false (apply (lambda () (let nz77e3@f ((nz77dd@x nz77cf@x) (nz77de@k (lambda (nz77e1@ls) (cons* (nz6f16@scheme-stx 'vector) nz77e1@ls)))) (let ((nz77e5@t nz77dd@x)) (let ((nz77e7@ls/false (nz6f8e@syntax-dispatch nz77e5@t '(#(scheme-id quote) each-any)))) (if nz77e7@ls/false (apply (lambda (nz77e9@x*) (nz77de@k (map (lambda (nz77eb@x) (list (nz6f16@scheme-stx 'quote) nz77eb@x)) nz77e9@x*))) nz77e7@ls/false) (let ((nz77ed@t nz77e5@t)) (let ((nz77ef@ls/false (nz6f8e@syntax-dispatch nz77ed@t '(#(scheme-id list) . each-any)))) (if nz77ef@ls/false (apply (lambda (nz77f1@x*) (nz77de@k nz77f1@x*)) nz77ef@ls/false) (let ((nz77f3@t nz77ed@t)) (let ((nz77f5@ls/false (nz6f8e@syntax-dispatch nz77f3@t '(#(scheme-id cons) any any)))) (if nz77f5@ls/false (apply (lambda (nz77f7@x nz77f8@y) (nz77e3@f nz77f8@y (lambda (nz77fb@ls) (nz77de@k (cons nz77f7@x nz77fb@ls))))) nz77f5@ls/false) (let ((nz77fd@t nz77f3@t)) (let ((nz77ff@ls/false (nz6f8e@syntax-dispatch nz77fd@t '_))) (if nz77ff@ls/false (apply (lambda () (list (nz6f16@scheme-stx 'list->vector) nz77d1@pat-x)) nz77ff@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz77fd@t))))))))))))))) nz77db@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz77d9@t)))))))))) (set! nz776c@vquasi (lambda (nz77ad@p nz77ae@lev) (let ((nz77b1@t nz77ad@p)) (let ((nz77b3@ls/false (nz6f8e@syntax-dispatch nz77b1@t '(any . any)))) (if nz77b3@ls/false (apply (lambda (nz77b5@p nz77b6@q) (let ((nz77b9@t nz77b5@p)) (let ((nz77bb@ls/false (nz6f8e@syntax-dispatch nz77b9@t '(#(scheme-id unquote) . each-any)))) (if nz77bb@ls/false (apply (lambda (nz77bd@p) (if (= nz77ae@lev '0) (nz7764@quasicons* nz77bd@p (nz776c@vquasi nz77b6@q nz77ae@lev)) (nz7766@quasicons (nz7766@quasicons (nz7748@datum 'unquote) (nz776e@quasi nz77bd@p (- nz77ae@lev '1))) (nz776c@vquasi nz77b6@q nz77ae@lev)))) nz77bb@ls/false) (let ((nz77bf@t nz77b9@t)) (let ((nz77c1@ls/false (nz6f8e@syntax-dispatch nz77bf@t '(#(scheme-id unquote-splicing) . each-any)))) (if nz77c1@ls/false (apply (lambda (nz77c3@p) (if (= nz77ae@lev '0) (nz7768@quasiappend nz77c3@p (nz776c@vquasi nz77b6@q nz77ae@lev)) (nz7766@quasicons (nz7766@quasicons (nz7748@datum 'unquote-splicing) (nz776e@quasi nz77c3@p (- nz77ae@lev '1))) (nz776c@vquasi nz77b6@q nz77ae@lev)))) nz77c1@ls/false) (let ((nz77c5@t nz77bf@t)) (let ((nz77c7@ls/false (nz6f8e@syntax-dispatch nz77c5@t 'any))) (if nz77c7@ls/false (apply (lambda (nz77c9@p) (nz7766@quasicons (nz776e@quasi nz77c9@p nz77ae@lev) (nz776c@vquasi nz77b6@q nz77ae@lev))) nz77c7@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz77c5@t))))))))))) nz77b3@ls/false) (let ((nz77cb@t nz77b1@t)) (let ((nz77cd@ls/false (nz6f8e@syntax-dispatch nz77cb@t '()))) (if nz77cd@ls/false (apply (lambda () (list (nz6f16@scheme-stx 'quote) '())) nz77cd@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz77cb@t))))))))) (set! nz776e@quasi (lambda (nz7777@p nz7778@lev) (let ((nz777b@t nz7777@p)) (let ((nz777d@ls/false (nz6f8e@syntax-dispatch nz777b@t '(#(scheme-id unquote) any)))) (if nz777d@ls/false (apply (lambda (nz777f@p) (if (= nz7778@lev '0) nz777f@p (nz7766@quasicons (nz7748@datum 'unquote) (nz776e@quasi (list nz777f@p) (- nz7778@lev '1))))) nz777d@ls/false) (let ((nz7781@t nz777b@t)) (let ((nz7783@ls/false (nz6f8e@syntax-dispatch nz7781@t '((#(scheme-id unquote) . each-any) . any)))) (if nz7783@ls/false (apply (lambda (nz7785@p nz7786@q) (if (= nz7778@lev '0) (nz7764@quasicons* nz7785@p (nz776e@quasi nz7786@q nz7778@lev)) (nz7766@quasicons (nz7766@quasicons (nz7748@datum 'unquote) (nz776e@quasi nz7785@p (- nz7778@lev '1))) (nz776e@quasi nz7786@q nz7778@lev)))) nz7783@ls/false) (let ((nz7789@t nz7781@t)) (let ((nz778b@ls/false (nz6f8e@syntax-dispatch nz7789@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if nz778b@ls/false (apply (lambda (nz778d@p nz778e@q) (if (= nz7778@lev '0) (nz7768@quasiappend nz778d@p (nz776e@quasi nz778e@q nz7778@lev)) (nz7766@quasicons (nz7766@quasicons (nz7748@datum 'unquote-splicing) (nz776e@quasi nz778d@p (- nz7778@lev '1))) (nz776e@quasi nz778e@q nz7778@lev)))) nz778b@ls/false) (let ((nz7791@t nz7789@t)) (let ((nz7793@ls/false (nz6f8e@syntax-dispatch nz7791@t '(#(scheme-id quasiquote) any)))) (if nz7793@ls/false (apply (lambda (nz7795@p) (nz7766@quasicons (nz7748@datum 'quasiquote) (nz776e@quasi (list nz7795@p) (+ nz7778@lev '1)))) nz7793@ls/false) (let ((nz7797@t nz7791@t)) (let ((nz7799@ls/false (nz6f8e@syntax-dispatch nz7797@t '(any . any)))) (if nz7799@ls/false (apply (lambda (nz779b@p nz779c@q) (nz7766@quasicons (nz776e@quasi nz779b@p nz7778@lev) (nz776e@quasi nz779c@q nz7778@lev))) nz7799@ls/false) (let ((nz779f@t nz7797@t)) (let ((nz77a1@ls/false (nz6f8e@syntax-dispatch nz779f@t '#(vector each-any)))) (if (and nz77a1@ls/false (apply (lambda (nz77a3@x) (not (nz6d53@stx? nz77a3@x))) nz77a1@ls/false)) (apply (lambda (nz77a5@x) (nz776a@quasivector (nz776c@vquasi nz77a5@x nz7778@lev))) nz77a1@ls/false) (let ((nz77a7@t nz779f@t)) (let ((nz77a9@ls/false (nz6f8e@syntax-dispatch nz77a7@t 'any))) (if nz77a9@ls/false (apply (lambda (nz77ab@p) (list (nz6f16@scheme-stx 'quote) nz77ab@p)) nz77a9@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz77a7@t)))))))))))))))))))))))) (lambda (nz776f@x) (let ((nz7771@t nz776f@x)) (let ((nz7773@ls/false (nz6f8e@syntax-dispatch nz7771@t '(_ any)))) (if nz7773@ls/false (apply (lambda (nz7775@e) (nz776e@quasi nz7775@e '0)) nz7773@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7771@t)))))))) (set! nz8a5b@nz6f7c@quasiquote-macro nz6f7c@quasiquote-macro) (set! nz6f7e@quasisyntax-macro (let ((nz784c@quasi '#f)) (begin (set! nz784c@quasi (lambda (nz7867@p nz7868@lev) (let ((nz786b@t nz7867@p)) (let ((nz786d@ls/false (nz6f8e@syntax-dispatch nz786b@t '(#(scheme-id unsyntax) any)))) (if nz786d@ls/false (apply (lambda (nz786f@p) (if (= nz7868@lev '0) (let ((nz7871@g (gensym))) (values (list nz7871@g) (list nz786f@p) nz7871@g)) (call-with-values (lambda () (nz784c@quasi nz786f@p (- nz7868@lev '1))) (lambda (nz7879@nz7874 nz787a@nz7876 nz787b@nz7878) (let ((nz787f@p nz787b@nz7878) (nz7880@rhs* nz787a@nz7876) (nz7881@lhs* nz7879@nz7874)) (values nz7881@lhs* nz7880@rhs* (list 'unsyntax nz787f@p))))))) nz786d@ls/false) (let ((nz7885@t nz786b@t)) (let ((nz7887@ls/false (nz6f8e@syntax-dispatch nz7885@t '#(scheme-id unsyntax)))) (if (and nz7887@ls/false (apply (lambda () (= nz7868@lev '0)) nz7887@ls/false)) (apply (lambda () (nz706e@syntax-violation '#f '"incorrect use of unsyntax" nz7867@p)) nz7887@ls/false) (let ((nz7889@t nz7885@t)) (let ((nz788b@ls/false (nz6f8e@syntax-dispatch nz7889@t '((#(scheme-id unsyntax) . each-any) . any)))) (if nz788b@ls/false (apply (lambda (nz788d@p* nz788e@q) (call-with-values (lambda () (nz784c@quasi nz788e@q nz7868@lev)) (lambda (nz7897@nz7892 nz7898@nz7894 nz7899@nz7896) (let ((nz789d@q nz7899@nz7896) (nz789e@rhs* nz7898@nz7894) (nz789f@lhs* nz7897@nz7892)) (if (= nz7868@lev '0) (let ((nz78a3@g* (map (lambda (nz78a5@x) (gensym)) nz788d@p*))) (values (append nz78a3@g* nz789f@lhs*) (append nz788d@p* nz789e@rhs*) (append nz78a3@g* nz789d@q))) (call-with-values (lambda () (nz784c@quasi nz788d@p* (- nz7868@lev '1))) (lambda (nz78ad@nz78a8 nz78ae@nz78aa nz78af@nz78ac) (let ((nz78b3@p* nz78af@nz78ac) (nz78b4@rhs2* nz78ae@nz78aa) (nz78b5@lhs2* nz78ad@nz78a8)) (values (append nz78b5@lhs2* nz789f@lhs*) (append nz78b4@rhs2* nz789e@rhs*) (cons (cons 'unsyntax nz78b3@p*) nz789d@q)))))))))) nz788b@ls/false) (let ((nz78b9@t nz7889@t)) (let ((nz78bb@ls/false (nz6f8e@syntax-dispatch nz78b9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if nz78bb@ls/false (apply (lambda (nz78bd@p* nz78be@q) (call-with-values (lambda () (nz784c@quasi nz78be@q nz7868@lev)) (lambda (nz78c7@nz78c2 nz78c8@nz78c4 nz78c9@nz78c6) (let ((nz78cd@q nz78c9@nz78c6) (nz78ce@rhs* nz78c8@nz78c4) (nz78cf@lhs* nz78c7@nz78c2)) (if (= nz7868@lev '0) (let ((nz78d3@g* (map (lambda (nz78d5@x) (gensym)) nz78bd@p*))) (values (append (map (lambda (nz78d7@g) (cons nz78d7@g '(...))) nz78d3@g*) nz78cf@lhs*) (append nz78bd@p* nz78ce@rhs*) (append (apply append (map (lambda (nz78d9@g) (cons nz78d9@g '(...))) nz78d3@g*)) nz78cd@q))) (call-with-values (lambda () (nz784c@quasi nz78bd@p* (- nz7868@lev '1))) (lambda (nz78e1@nz78dc nz78e2@nz78de nz78e3@nz78e0) (let ((nz78e7@p* nz78e3@nz78e0) (nz78e8@rhs2* nz78e2@nz78de) (nz78e9@lhs2* nz78e1@nz78dc)) (values (append nz78e9@lhs2* nz78cf@lhs*) (append nz78e8@rhs2* nz78ce@rhs*) (cons (cons 'unsyntax-splicing nz78e7@p*) nz78cd@q)))))))))) nz78bb@ls/false) (let ((nz78ed@t nz78b9@t)) (let ((nz78ef@ls/false (nz6f8e@syntax-dispatch nz78ed@t '#(scheme-id unsyntax-splicing)))) (if (and nz78ef@ls/false (apply (lambda () (= nz7868@lev '0)) nz78ef@ls/false)) (apply (lambda () (nz706e@syntax-violation '#f '"incorrect use of unsyntax-splicing" nz7867@p)) nz78ef@ls/false) (let ((nz78f1@t nz78ed@t)) (let ((nz78f3@ls/false (nz6f8e@syntax-dispatch nz78f1@t '(#(scheme-id quasisyntax) any)))) (if nz78f3@ls/false (apply (lambda (nz78f5@p) (call-with-values (lambda () (nz784c@quasi nz78f5@p (+ nz7868@lev '1))) (lambda (nz78fd@nz78f8 nz78fe@nz78fa nz78ff@nz78fc) (let ((nz7903@p nz78ff@nz78fc) (nz7904@rhs* nz78fe@nz78fa) (nz7905@lhs* nz78fd@nz78f8)) (values nz7905@lhs* nz7904@rhs* (list 'quasisyntax nz7903@p)))))) nz78f3@ls/false) (let ((nz7909@t nz78f1@t)) (let ((nz790b@ls/false (nz6f8e@syntax-dispatch nz7909@t '(any . any)))) (if nz790b@ls/false (apply (lambda (nz790d@p nz790e@q) (call-with-values (lambda () (nz784c@quasi nz790d@p nz7868@lev)) (lambda (nz791d@nz7912 nz791e@nz7914 nz791f@nz7916) (call-with-values (lambda () (nz784c@quasi nz790e@q nz7868@lev)) (lambda (nz7923@nz7918 nz7924@nz791a nz7925@nz791c) (let ((nz7929@q nz7925@nz791c) (nz792a@rhs2* nz7924@nz791a) (nz792b@lhs2* nz7923@nz7918) (nz792c@p nz791f@nz7916) (nz792d@rhs* nz791e@nz7914) (nz792e@lhs* nz791d@nz7912)) (values (append nz792b@lhs2* nz792e@lhs*) (append nz792a@rhs2* nz792d@rhs*) (cons nz792c@p nz7929@q)))))))) nz790b@ls/false) (let ((nz7935@t nz7909@t)) (let ((nz7937@ls/false (nz6f8e@syntax-dispatch nz7935@t '#(vector each-any)))) (if nz7937@ls/false (apply (lambda (nz7939@x*) (call-with-values (lambda () (nz784c@quasi nz7939@x* nz7868@lev)) (lambda (nz7941@nz793c nz7942@nz793e nz7943@nz7940) (let ((nz7947@x* nz7943@nz7940) (nz7948@rhs* nz7942@nz793e) (nz7949@lhs* nz7941@nz793c)) (values nz7949@lhs* nz7948@rhs* (list->vector nz7947@x*)))))) nz7937@ls/false) (let ((nz794d@t nz7935@t)) (let ((nz794f@ls/false (nz6f8e@syntax-dispatch nz794d@t '_))) (if nz794f@ls/false (apply (lambda () (values '() '() nz7867@p)) nz794f@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz794d@t)))))))))))))))))))))))))))))) (lambda (nz784d@x) (let ((nz784f@t nz784d@x)) (let ((nz7851@ls/false (nz6f8e@syntax-dispatch nz784f@t '(_ any)))) (if nz7851@ls/false (apply (lambda (nz7853@e) (call-with-values (lambda () (nz784c@quasi nz7853@e '0)) (lambda (nz785b@nz7856 nz785c@nz7858 nz785d@nz785a) (let ((nz7861@v nz785d@nz785a) (nz7862@rhs* nz785c@nz7858) (nz7863@lhs* nz785b@nz7856)) (nz6f44@bless (list 'syntax-case (cons 'list nz7862@rhs*) '() (list nz7863@lhs* (list 'syntax nz7861@v)))))))) nz7851@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz784f@t)))))))) (set! nz8a5c@nz6f7e@quasisyntax-macro nz6f7e@quasisyntax-macro) (set! nz6f80@define-struct-macro (lambda (nz7951@stx) (nz706e@syntax-violation '#f '"define-struct not supported" nz7951@stx))) (set! nz8a5d@nz6f80@define-struct-macro nz6f80@define-struct-macro) (set! nz6f82@define-record-type-macro (lambda (nz7953@x) (let ((nz7956@id '#f) (nz7958@get-record-name '#f) (nz795a@get-record-constructor-name '#f) (nz795c@get-record-predicate-name '#f) (nz795e@get-clause '#f) (nz7960@foo-rtd-code '#f) (nz7962@parent-rtd-code '#f) (nz7964@parent-rcd-code '#f) (nz7966@foo-rcd-code '#f) (nz7968@get-protocol-code '#f) (nz796a@get-fields '#f) (nz796c@get-mutator-indices '#f) (nz796e@get-mutators '#f) (nz7970@get-accessors '#f) (nz7972@enumerate '#f) (nz7974@do-define-record '#f) (nz7976@verify-clauses '#f)) (begin (set! nz7956@id (lambda (nz7b49@ctxt . nz7b4b@str*) (nz7072@datum->syntax nz7b49@ctxt (string->symbol (apply string-append (map (lambda (nz7b4d@x) (if (symbol? nz7b4d@x) (symbol->string nz7b4d@x) (if (string? nz7b4d@x) nz7b4d@x (assertion-violation 'define-record-type '"BUG")))) nz7b4b@str*)))))) (set! nz7958@get-record-name (lambda (nz7b37@spec) (let ((nz7b39@t nz7b37@spec)) (let ((nz7b3b@ls/false (nz6f8e@syntax-dispatch nz7b39@t '(any any any)))) (if nz7b3b@ls/false (apply (lambda (nz7b3d@foo nz7b3e@make-foo nz7b3f@foo?) nz7b3d@foo) nz7b3b@ls/false) (let ((nz7b43@t nz7b39@t)) (let ((nz7b45@ls/false (nz6f8e@syntax-dispatch nz7b43@t 'any))) (if nz7b45@ls/false (apply (lambda (nz7b47@foo) nz7b47@foo) nz7b45@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7b43@t))))))))) (set! nz795a@get-record-constructor-name (lambda (nz7b23@spec) (let ((nz7b25@t nz7b23@spec)) (let ((nz7b27@ls/false (nz6f8e@syntax-dispatch nz7b25@t '(any any any)))) (if nz7b27@ls/false (apply (lambda (nz7b29@foo nz7b2a@make-foo nz7b2b@foo?) nz7b2a@make-foo) nz7b27@ls/false) (let ((nz7b2f@t nz7b25@t)) (let ((nz7b31@ls/false (nz6f8e@syntax-dispatch nz7b2f@t 'any))) (if (and nz7b31@ls/false (apply (lambda (nz7b33@foo) (nz6d87@id? nz7b33@foo)) nz7b31@ls/false)) (apply (lambda (nz7b35@foo) (nz7956@id nz7b35@foo '"make-" (nz6d9b@stx->datum nz7b35@foo))) nz7b31@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7b2f@t))))))))) (set! nz795c@get-record-predicate-name (lambda (nz7b0f@spec) (let ((nz7b11@t nz7b0f@spec)) (let ((nz7b13@ls/false (nz6f8e@syntax-dispatch nz7b11@t '(any any any)))) (if nz7b13@ls/false (apply (lambda (nz7b15@foo nz7b16@make-foo nz7b17@foo?) nz7b17@foo?) nz7b13@ls/false) (let ((nz7b1b@t nz7b11@t)) (let ((nz7b1d@ls/false (nz6f8e@syntax-dispatch nz7b1b@t 'any))) (if (and nz7b1d@ls/false (apply (lambda (nz7b1f@foo) (nz6d87@id? nz7b1f@foo)) nz7b1d@ls/false)) (apply (lambda (nz7b21@foo) (nz7956@id nz7b21@foo (nz6d9b@stx->datum nz7b21@foo) '"?")) nz7b1d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7b1b@t))))))))) (set! nz795e@get-clause (lambda (nz7afd@id nz7afe@ls) (let ((nz7b01@t nz7afe@ls)) (let ((nz7b03@ls/false (nz6f8e@syntax-dispatch nz7b01@t '()))) (if nz7b03@ls/false (apply (lambda () '#f) nz7b03@ls/false) (let ((nz7b05@t nz7b01@t)) (let ((nz7b07@ls/false (nz6f8e@syntax-dispatch nz7b05@t '((any . any) . any)))) (if nz7b07@ls/false (apply (lambda (nz7b09@x nz7b0a@rest nz7b0b@ls) (if (nz6d8d@free-id=? (nz6f44@bless nz7afd@id) nz7b09@x) (cons nz7b09@x nz7b0a@rest) (nz795e@get-clause nz7afd@id nz7b0b@ls))) nz7b07@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7b05@t))))))))) (set! nz7960@foo-rtd-code (lambda (nz7aab@name nz7aac@clause* nz7aad@parent-rtd-code) (let ((nz7ab2@convert-field-spec* '#f)) (begin (set! nz7ab2@convert-field-spec* (lambda (nz7ae3@ls) (list->vector (map (lambda (nz7ae5@x) (let ((nz7ae7@t nz7ae5@x)) (let ((nz7ae9@ls/false (nz6f8e@syntax-dispatch nz7ae7@t '(#(scheme-id mutable) any . any)))) (if nz7ae9@ls/false (apply (lambda (nz7aeb@name nz7aec@rest) (list 'mutable nz7aeb@name)) nz7ae9@ls/false) (let ((nz7aef@t nz7ae7@t)) (let ((nz7af1@ls/false (nz6f8e@syntax-dispatch nz7aef@t '(#(scheme-id immutable) any . any)))) (if nz7af1@ls/false (apply (lambda (nz7af3@name nz7af4@rest) (list 'immutable nz7af3@name)) nz7af1@ls/false) (let ((nz7af7@t nz7aef@t)) (let ((nz7af9@ls/false (nz6f8e@syntax-dispatch nz7af7@t 'any))) (if nz7af9@ls/false (apply (lambda (nz7afb@name) (list 'immutable nz7afb@name)) nz7af9@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7af7@t))))))))))) nz7ae3@ls)))) (let ((nz7ab3@uid-code (let ((nz7abb@t (nz795e@get-clause 'nongenerative nz7aac@clause*))) (let ((nz7abd@ls/false (nz6f8e@syntax-dispatch nz7abb@t '(_)))) (if nz7abd@ls/false (apply (lambda () (list 'quote (gensym))) nz7abd@ls/false) (let ((nz7abf@t nz7abb@t)) (let ((nz7ac1@ls/false (nz6f8e@syntax-dispatch nz7abf@t '(_ any)))) (if nz7ac1@ls/false (apply (lambda (nz7ac3@uid) (list 'quote nz7ac3@uid)) nz7ac1@ls/false) (let ((nz7ac5@t nz7abf@t)) (let ((nz7ac7@ls/false (nz6f8e@syntax-dispatch nz7ac5@t '_))) (if nz7ac7@ls/false (apply (lambda () '#f) nz7ac7@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7ac5@t))))))))))) (nz7ab4@sealed? (let ((nz7ac9@t (nz795e@get-clause 'sealed nz7aac@clause*))) (let ((nz7acb@ls/false (nz6f8e@syntax-dispatch nz7ac9@t '(_ #(atom #t))))) (if nz7acb@ls/false (apply (lambda () '#t) nz7acb@ls/false) (let ((nz7acd@t nz7ac9@t)) (let ((nz7acf@ls/false (nz6f8e@syntax-dispatch nz7acd@t '_))) (if nz7acf@ls/false (apply (lambda () '#f) nz7acf@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7acd@t)))))))) (nz7ab5@opaque? (let ((nz7ad1@t (nz795e@get-clause 'opaque nz7aac@clause*))) (let ((nz7ad3@ls/false (nz6f8e@syntax-dispatch nz7ad1@t '(_ #(atom #t))))) (if nz7ad3@ls/false (apply (lambda () '#t) nz7ad3@ls/false) (let ((nz7ad5@t nz7ad1@t)) (let ((nz7ad7@ls/false (nz6f8e@syntax-dispatch nz7ad5@t '_))) (if nz7ad7@ls/false (apply (lambda () '#f) nz7ad7@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7ad5@t)))))))) (nz7ab6@fields (let ((nz7ad9@t (nz795e@get-clause 'fields nz7aac@clause*))) (let ((nz7adb@ls/false (nz6f8e@syntax-dispatch nz7ad9@t '(_ . each-any)))) (if nz7adb@ls/false (apply (lambda (nz7add@field-spec*) (list 'quote (nz7ab2@convert-field-spec* nz7add@field-spec*))) nz7adb@ls/false) (let ((nz7adf@t nz7ad9@t)) (let ((nz7ae1@ls/false (nz6f8e@syntax-dispatch nz7adf@t '_))) (if nz7ae1@ls/false (apply (lambda () ''#()) nz7ae1@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7adf@t))))))))) (nz6f44@bless (list 'make-record-type-descriptor (list 'quote nz7aab@name) nz7aad@parent-rtd-code nz7ab3@uid-code nz7ab4@sealed? nz7ab5@opaque? nz7ab6@fields))))))) (set! nz7962@parent-rtd-code (lambda (nz7a93@clause*) (let ((nz7a95@t (nz795e@get-clause 'parent nz7a93@clause*))) (let ((nz7a97@ls/false (nz6f8e@syntax-dispatch nz7a95@t '(_ any)))) (if nz7a97@ls/false (apply (lambda (nz7a99@name) (list 'record-type-descriptor nz7a99@name)) nz7a97@ls/false) (let ((nz7a9b@t nz7a95@t)) (let ((nz7a9d@ls/false (nz6f8e@syntax-dispatch nz7a9b@t '#(atom #f)))) (if nz7a9d@ls/false (apply (lambda () (let ((nz7a9f@t (nz795e@get-clause 'parent-rtd nz7a93@clause*))) (let ((nz7aa1@ls/false (nz6f8e@syntax-dispatch nz7a9f@t '(_ any any)))) (if nz7aa1@ls/false (apply (lambda (nz7aa3@rtd nz7aa4@rcd) nz7aa3@rtd) nz7aa1@ls/false) (let ((nz7aa7@t nz7a9f@t)) (let ((nz7aa9@ls/false (nz6f8e@syntax-dispatch nz7aa7@t '#(atom #f)))) (if nz7aa9@ls/false (apply (lambda () '#f) nz7aa9@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7aa7@t)))))))) nz7a9d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7a9b@t))))))))) (set! nz7964@parent-rcd-code (lambda (nz7a7b@clause*) (let ((nz7a7d@t (nz795e@get-clause 'parent nz7a7b@clause*))) (let ((nz7a7f@ls/false (nz6f8e@syntax-dispatch nz7a7d@t '(_ any)))) (if nz7a7f@ls/false (apply (lambda (nz7a81@name) (list 'record-constructor-descriptor nz7a81@name)) nz7a7f@ls/false) (let ((nz7a83@t nz7a7d@t)) (let ((nz7a85@ls/false (nz6f8e@syntax-dispatch nz7a83@t '#(atom #f)))) (if nz7a85@ls/false (apply (lambda () (let ((nz7a87@t (nz795e@get-clause 'parent-rtd nz7a7b@clause*))) (let ((nz7a89@ls/false (nz6f8e@syntax-dispatch nz7a87@t '(_ any any)))) (if nz7a89@ls/false (apply (lambda (nz7a8b@rtd nz7a8c@rcd) nz7a8c@rcd) nz7a89@ls/false) (let ((nz7a8f@t nz7a87@t)) (let ((nz7a91@ls/false (nz6f8e@syntax-dispatch nz7a8f@t '#(atom #f)))) (if nz7a91@ls/false (apply (lambda () '#f) nz7a91@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7a8f@t)))))))) nz7a85@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7a83@t))))))))) (set! nz7966@foo-rcd-code (lambda (nz7a73@clause* nz7a74@foo-rtd nz7a75@protocol nz7a76@parent-rcd-code) (list 'make-record-constructor-descriptor nz7a74@foo-rtd nz7a76@parent-rcd-code nz7a75@protocol))) (set! nz7968@get-protocol-code (lambda (nz7a67@clause*) (let ((nz7a69@t (nz795e@get-clause 'protocol nz7a67@clause*))) (let ((nz7a6b@ls/false (nz6f8e@syntax-dispatch nz7a69@t '(_ any)))) (if nz7a6b@ls/false (apply (lambda (nz7a6d@expr) nz7a6d@expr) nz7a6b@ls/false) (let ((nz7a6f@t nz7a69@t)) (let ((nz7a71@ls/false (nz6f8e@syntax-dispatch nz7a6f@t '_))) (if nz7a71@ls/false (apply (lambda () '#f) nz7a71@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7a6f@t))))))))) (set! nz796a@get-fields (lambda (nz7a55@clause*) (let ((nz7a57@t nz7a55@clause*)) (let ((nz7a59@ls/false (nz6f8e@syntax-dispatch nz7a57@t '()))) (if nz7a59@ls/false (apply (lambda () '()) nz7a59@ls/false) (let ((nz7a5b@t nz7a57@t)) (let ((nz7a5d@ls/false (nz6f8e@syntax-dispatch nz7a5b@t '((#(scheme-id fields) . each-any) . _)))) (if nz7a5d@ls/false (apply (lambda (nz7a5f@f*) nz7a5f@f*) nz7a5d@ls/false) (let ((nz7a61@t nz7a5b@t)) (let ((nz7a63@ls/false (nz6f8e@syntax-dispatch nz7a61@t '(_ . any)))) (if nz7a63@ls/false (apply (lambda (nz7a65@rest) (nz796a@get-fields nz7a65@rest)) nz7a63@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7a61@t)))))))))))) (set! nz796c@get-mutator-indices (lambda (nz7a3d@fields) (let nz7a43@f ((nz7a3f@fields nz7a3d@fields) (nz7a40@i '0)) (let ((nz7a45@t nz7a3f@fields)) (let ((nz7a47@ls/false (nz6f8e@syntax-dispatch nz7a45@t '()))) (if nz7a47@ls/false (apply (lambda () '()) nz7a47@ls/false) (let ((nz7a49@t nz7a45@t)) (let ((nz7a4b@ls/false (nz6f8e@syntax-dispatch nz7a49@t '((#(scheme-id mutable) . _) . any)))) (if nz7a4b@ls/false (apply (lambda (nz7a4d@rest) (cons nz7a40@i (nz7a43@f nz7a4d@rest (+ nz7a40@i '1)))) nz7a4b@ls/false) (let ((nz7a4f@t nz7a49@t)) (let ((nz7a51@ls/false (nz6f8e@syntax-dispatch nz7a4f@t '(_ . any)))) (if nz7a51@ls/false (apply (lambda (nz7a53@rest) (nz7a43@f nz7a53@rest (+ nz7a40@i '1))) nz7a51@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7a4f@t))))))))))))) (set! nz796e@get-mutators (lambda (nz7a13@foo nz7a14@fields) (let ((nz7a18@gen-name '#f)) (begin (set! nz7a18@gen-name (lambda (nz7a3b@x) (nz7072@datum->syntax nz7a13@foo (string->symbol (string-append (symbol->string (nz7074@syntax->datum nz7a13@foo)) '"-" (symbol->string (nz7074@syntax->datum nz7a3b@x)) '"-set!"))))) (let nz7a1b@f ((nz7a19@fields nz7a14@fields)) (let ((nz7a1d@t nz7a19@fields)) (let ((nz7a1f@ls/false (nz6f8e@syntax-dispatch nz7a1d@t '()))) (if nz7a1f@ls/false (apply (lambda () '()) nz7a1f@ls/false) (let ((nz7a21@t nz7a1d@t)) (let ((nz7a23@ls/false (nz6f8e@syntax-dispatch nz7a21@t '((#(scheme-id mutable) any any any) . any)))) (if nz7a23@ls/false (apply (lambda (nz7a25@name nz7a26@accessor nz7a27@mutator nz7a28@rest) (cons nz7a27@mutator (nz7a1b@f nz7a28@rest))) nz7a23@ls/false) (let ((nz7a2d@t nz7a21@t)) (let ((nz7a2f@ls/false (nz6f8e@syntax-dispatch nz7a2d@t '((#(scheme-id mutable) any) . any)))) (if nz7a2f@ls/false (apply (lambda (nz7a31@name nz7a32@rest) (cons (nz7a18@gen-name nz7a31@name) (nz7a1b@f nz7a32@rest))) nz7a2f@ls/false) (let ((nz7a35@t nz7a2d@t)) (let ((nz7a37@ls/false (nz6f8e@syntax-dispatch nz7a35@t '(_ . any)))) (if nz7a37@ls/false (apply (lambda (nz7a39@rest) (nz7a1b@f nz7a39@rest)) nz7a37@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7a35@t)))))))))))))))))) (set! nz7970@get-accessors (lambda (nz79cf@foo nz79d0@fields) (let ((nz79d4@gen-name '#f)) (begin (set! nz79d4@gen-name (lambda (nz7a11@x) (nz7072@datum->syntax nz79cf@foo (string->symbol (string-append (symbol->string (nz7074@syntax->datum nz79cf@foo)) '"-" (symbol->string (nz7074@syntax->datum nz7a11@x))))))) (map (lambda (nz79d5@field) (let ((nz79d7@t nz79d5@field)) (let ((nz79d9@ls/false (nz6f8e@syntax-dispatch nz79d7@t '(#(scheme-id mutable) any any any)))) (if (and nz79d9@ls/false (apply (lambda (nz79db@name nz79dc@accessor nz79dd@mutator) (nz6d87@id? nz79dc@accessor)) nz79d9@ls/false)) (apply (lambda (nz79e1@name nz79e2@accessor nz79e3@mutator) nz79e2@accessor) nz79d9@ls/false) (let ((nz79e7@t nz79d7@t)) (let ((nz79e9@ls/false (nz6f8e@syntax-dispatch nz79e7@t '(#(scheme-id immutable) any any)))) (if (and nz79e9@ls/false (apply (lambda (nz79eb@name nz79ec@accessor) (nz6d87@id? nz79ec@accessor)) nz79e9@ls/false)) (apply (lambda (nz79ef@name nz79f0@accessor) nz79f0@accessor) nz79e9@ls/false) (let ((nz79f3@t nz79e7@t)) (let ((nz79f5@ls/false (nz6f8e@syntax-dispatch nz79f3@t '(#(scheme-id mutable) any)))) (if (and nz79f5@ls/false (apply (lambda (nz79f7@name) (nz6d87@id? nz79f7@name)) nz79f5@ls/false)) (apply (lambda (nz79f9@name) (nz79d4@gen-name nz79f9@name)) nz79f5@ls/false) (let ((nz79fb@t nz79f3@t)) (let ((nz79fd@ls/false (nz6f8e@syntax-dispatch nz79fb@t '(#(scheme-id immutable) any)))) (if (and nz79fd@ls/false (apply (lambda (nz79ff@name) (nz6d87@id? nz79ff@name)) nz79fd@ls/false)) (apply (lambda (nz7a01@name) (nz79d4@gen-name nz7a01@name)) nz79fd@ls/false) (let ((nz7a03@t nz79fb@t)) (let ((nz7a05@ls/false (nz6f8e@syntax-dispatch nz7a03@t 'any))) (if (and nz7a05@ls/false (apply (lambda (nz7a07@name) (nz6d87@id? nz7a07@name)) nz7a05@ls/false)) (apply (lambda (nz7a09@name) (nz79d4@gen-name nz7a09@name)) nz7a05@ls/false) (let ((nz7a0b@t nz7a03@t)) (let ((nz7a0d@ls/false (nz6f8e@syntax-dispatch nz7a0b@t 'any))) (if nz7a0d@ls/false (apply (lambda (nz7a0f@others) (nz706e@syntax-violation '#f '"invalid field spec" nz79d5@field)) nz7a0d@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7a0b@t)))))))))))))))))))) nz79d0@fields))))) (set! nz7972@enumerate (lambda (nz79c7@ls) (let nz79cd@f ((nz79c9@ls nz79c7@ls) (nz79ca@i '0)) (if (null? nz79c9@ls) '() (cons nz79ca@i (nz79cd@f (cdr nz79c9@ls) (+ nz79ca@i '1))))))) (set! nz7974@do-define-record (lambda (nz799f@namespec nz79a0@clause*) (let ((nz79a3@foo (nz7958@get-record-name nz799f@namespec))) (let ((nz79a5@foo-rtd (gensym))) (let ((nz79a7@foo-rcd (gensym))) (let ((nz79a9@protocol (gensym))) (let ((nz79ab@make-foo (nz795a@get-record-constructor-name nz799f@namespec))) (let ((nz79ad@fields (nz796a@get-fields nz79a0@clause*))) (let ((nz79af@idx* (nz7972@enumerate nz79ad@fields))) (let ((nz79b1@foo-x* (nz7970@get-accessors nz79a3@foo nz79ad@fields))) (let ((nz79b3@set-foo-x!* (nz796e@get-mutators nz79a3@foo nz79ad@fields))) (let ((nz79b5@set-foo-idx* (nz796c@get-mutator-indices nz79ad@fields))) (let ((nz79b7@foo? (nz795c@get-record-predicate-name nz799f@namespec))) (let ((nz79b9@foo-rtd-code (nz7960@foo-rtd-code nz79a3@foo nz79a0@clause* (nz7962@parent-rtd-code nz79a0@clause*)))) (let ((nz79bb@foo-rcd-code (nz7966@foo-rcd-code nz79a0@clause* nz79a5@foo-rtd nz79a9@protocol (nz7964@parent-rcd-code nz79a0@clause*)))) (let ((nz79bd@protocol-code (nz7968@get-protocol-code nz79a0@clause*))) (nz6f44@bless (cons 'begin (cons (list 'define nz79a5@foo-rtd nz79b9@foo-rtd-code) (cons (list 'define nz79a9@protocol nz79bd@protocol-code) (cons (list 'define nz79a7@foo-rcd nz79bb@foo-rcd-code) (cons (list 'define-syntax nz79a3@foo (list 'list ''$rtd (list 'syntax nz79a5@foo-rtd) (list 'syntax nz79a7@foo-rcd))) (cons (list 'define nz79b7@foo? (list 'record-predicate nz79a5@foo-rtd)) (cons (list 'define nz79ab@make-foo (list 'record-constructor nz79a7@foo-rcd)) (append (map (lambda (nz79bf@foo-x nz79c0@idx) (list 'define nz79bf@foo-x (list 'record-accessor nz79a5@foo-rtd nz79c0@idx))) nz79b1@foo-x* nz79af@idx*) (map (lambda (nz79c3@set-foo-x! nz79c4@idx) (list 'define nz79c3@set-foo-x! (list 'record-mutator nz79a5@foo-rtd nz79c4@idx))) nz79b3@set-foo-x!* nz79b5@set-foo-idx*)))))))))))))))))))))))))) (set! nz7976@verify-clauses (lambda (nz797f@x nz7980@cls*) (let ((nz7984@valid-kwds '#f) (nz7986@free-id-member? '#f)) (begin (set! nz7984@valid-kwds (map nz6f44@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! nz7986@free-id-member? (lambda (nz799b@x nz799c@ls) (and (pair? nz799c@ls) (or (nz6d8d@free-id=? nz799b@x (car nz799c@ls)) (nz7986@free-id-member? nz799b@x (cdr nz799c@ls)))))) (let nz798b@f ((nz7987@cls* nz7980@cls*) (nz7988@seen* '())) (if (not (null? nz7987@cls*)) (let ((nz798d@t (car nz7987@cls*))) (let ((nz798f@ls/false (nz6f8e@syntax-dispatch nz798d@t '(any . any)))) (if nz798f@ls/false (apply (lambda (nz7991@kwd nz7992@rest) (if (or (not (nz6d87@id? nz7991@kwd)) (not (nz7986@free-id-member? nz7991@kwd nz7984@valid-kwds))) (nz706e@syntax-violation '#f '"not a valid define-record-type keyword" nz7991@kwd) (if (nz6d93@bound-id-member? nz7991@kwd nz7988@seen*) (nz706e@syntax-violation '#f '"duplicate use of keyword " nz797f@x nz7991@kwd) (nz798b@f (cdr nz7987@cls*) (cons nz7991@kwd nz7988@seen*))))) nz798f@ls/false) (let ((nz7995@t nz798d@t)) (let ((nz7997@ls/false (nz6f8e@syntax-dispatch nz7995@t 'any))) (if nz7997@ls/false (apply (lambda (nz7999@cls) (nz706e@syntax-violation '#f '"malformed define-record-type clause" nz7999@cls)) nz7997@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7995@t))))))) (void))))))) (let ((nz7977@t nz7953@x)) (let ((nz7979@ls/false (nz6f8e@syntax-dispatch nz7977@t '(_ any . each-any)))) (if nz7979@ls/false (apply (lambda (nz797b@namespec nz797c@clause*) (begin (nz7976@verify-clauses nz7953@x nz797c@clause*) (nz7974@do-define-record nz797b@namespec nz797c@clause*))) nz7979@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7977@t)))))))) (set! nz8a5e@nz6f82@define-record-type-macro nz6f82@define-record-type-macro) (set! nz6f84@define-condition-type-macro (lambda (nz7b4f@x) (let ((nz7b52@mkname '#f)) (begin (set! nz7b52@mkname (lambda (nz7b7f@name nz7b80@suffix) (nz7072@datum->syntax nz7b7f@name (string->symbol (string-append (symbol->string (nz7074@syntax->datum nz7b7f@name)) nz7b80@suffix))))) (let ((nz7b53@t nz7b4f@x)) (let ((nz7b55@ls/false (nz6f8e@syntax-dispatch nz7b53@t '(any any any any any . #(each (any any)))))) (if (and nz7b55@ls/false (apply (lambda (nz7b57@ctxt nz7b58@name nz7b59@super nz7b5a@constructor nz7b5b@predicate nz7b5c@field* nz7b5d@accessor*) (and (nz6d87@id? nz7b58@name) (nz6d87@id? nz7b59@super) (nz6d87@id? nz7b5a@constructor) (nz6d87@id? nz7b5b@predicate) (for-all nz6d87@id? nz7b5c@field*) (for-all nz6d87@id? nz7b5d@accessor*))) nz7b55@ls/false)) (apply (lambda (nz7b65@ctxt nz7b66@name nz7b67@super nz7b68@constructor nz7b69@predicate nz7b6a@field* nz7b6b@accessor*) (let ((nz7b73@aux-accessor* (map (lambda (nz7b75@x) (gensym)) nz7b6b@accessor*))) (nz6f44@bless (cons 'begin (cons (cons 'define-record-type (cons (list nz7b66@name nz7b68@constructor (gensym)) (cons (list 'parent nz7b67@super) (cons (cons 'fields (map (lambda (nz7b77@field nz7b78@aux) (list 'immutable nz7b77@field nz7b78@aux)) nz7b6a@field* nz7b73@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define nz7b69@predicate (list 'condition-predicate (list 'record-type-descriptor nz7b66@name))) (map (lambda (nz7b7b@accessor nz7b7c@aux) (list 'define nz7b7b@accessor (list 'condition-accessor (list 'record-type-descriptor nz7b66@name) nz7b7c@aux))) nz7b6b@accessor* nz7b73@aux-accessor*))))))) nz7b55@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7b53@t)))))))) (set! nz8a5f@nz6f84@define-condition-type-macro nz6f84@define-condition-type-macro) (set! nz6f86@incorrect-usage-macro (lambda (nz7b83@e) (nz706e@syntax-violation '#f '"incorrect usage of auxiliary keyword" nz7b83@e))) (set! nz8a60@nz6f86@incorrect-usage-macro nz6f86@incorrect-usage-macro) (set! nz6f88@parameterize-macro (lambda (nz7b85@e) (let ((nz7b87@t nz7b85@e)) (let ((nz7b89@ls/false (nz6f8e@syntax-dispatch nz7b87@t '(_ () any . each-any)))) (if nz7b89@ls/false (apply (lambda (nz7b8b@b nz7b8c@b*) (nz6f44@bless (cons 'let (cons '() (cons nz7b8b@b nz7b8c@b*))))) nz7b89@ls/false) (let ((nz7b8f@t nz7b87@t)) (let ((nz7b91@ls/false (nz6f8e@syntax-dispatch nz7b8f@t '(_ #(each (any any)) any . each-any)))) (if nz7b91@ls/false (apply (lambda (nz7b93@olhs* nz7b94@orhs* nz7b95@b nz7b96@b*) (let ((nz7b9b@lhs* (nz705c@generate-temporaries nz7b93@olhs*)) (nz7b9c@rhs* (nz705c@generate-temporaries nz7b94@orhs*))) (nz6f44@bless (cons (list 'lambda (append nz7b9b@lhs* nz7b9c@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (nz7b9f@lhs nz7ba0@rhs) (list 'let (list (list 't (list nz7b9f@lhs))) (list nz7b9f@lhs nz7ba0@rhs) (cons 'set! (cons nz7ba0@rhs '(t))))) nz7b9b@lhs* nz7b9c@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons nz7b95@b nz7b96@b*))) '(swap)))))) (append nz7b93@olhs* nz7b94@orhs*))))) nz7b91@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7b8f@t))))))))) (set! nz8a61@nz6f88@parameterize-macro nz6f88@parameterize-macro) (set! nz6f8a@foreign-call-transformer (lambda (nz7ba3@e nz7ba4@r nz7ba5@mr) (let ((nz7ba9@t nz7ba3@e)) (let ((nz7bab@ls/false (nz6f8e@syntax-dispatch nz7ba9@t '(_ any . each-any)))) (if nz7bab@ls/false (apply (lambda (nz7bad@name nz7bae@arg*) (cons 'foreign-call (cons (nz6fb0@chi-expr nz7bad@name nz7ba4@r nz7ba5@mr) (nz6fac@chi-expr* nz7bae@arg* nz7ba4@r nz7ba5@mr)))) nz7bab@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7ba9@t)))))) (set! nz8a62@nz6f8a@foreign-call-transformer nz6f8a@foreign-call-transformer) (set! nz6f8c@convert-pattern (lambda (nz7bb1@pattern nz7bb2@keys) (let ((nz7bb6@cvt* '#f) (nz7bb8@cvt '#f)) (begin (set! nz7bb6@cvt* (lambda (nz7c55@p* nz7c56@n nz7c57@ids) (if (null? nz7c55@p*) (values '() nz7c57@ids) (call-with-values (lambda () (nz7bb6@cvt* (cdr nz7c55@p*) nz7c56@n nz7c57@ids)) (lambda (nz7c5f@nz7c5c nz7c60@nz7c5e) (let ((nz7c63@ids nz7c60@nz7c5e) (nz7c64@y nz7c5f@nz7c5c)) (call-with-values (lambda () (nz7bb8@cvt (car nz7c55@p*) nz7c56@n nz7c63@ids)) (lambda (nz7c6b@nz7c68 nz7c6c@nz7c6a) (let ((nz7c6f@ids nz7c6c@nz7c6a) (nz7c70@x nz7c6b@nz7c68)) (values (cons nz7c70@x nz7c64@y) nz7c6f@ids)))))))))) (set! nz7bb8@cvt (lambda (nz7bb9@p nz7bba@n nz7bbb@ids) (let ((nz7bbf@t nz7bb9@p)) (let ((nz7bc1@ls/false (nz6f8e@syntax-dispatch nz7bbf@t 'any))) (if (and nz7bc1@ls/false (apply (lambda (nz7bc3@id) (nz6d87@id? nz7bc3@id)) nz7bc1@ls/false)) (apply (lambda (nz7bc5@id) (if (nz6d93@bound-id-member? nz7bb9@p nz7bb2@keys) (values (vector 'free-id nz7bb9@p) nz7bbb@ids) (if (nz6d8d@free-id=? nz7bb9@p (nz6f16@scheme-stx '_)) (values '_ nz7bbb@ids) (values 'any (cons (cons nz7bb9@p nz7bba@n) nz7bbb@ids))))) nz7bc1@ls/false) (let ((nz7bc7@t nz7bbf@t)) (let ((nz7bc9@ls/false (nz6f8e@syntax-dispatch nz7bc7@t '(any any)))) (if (and nz7bc9@ls/false (apply (lambda (nz7bcb@p nz7bcc@dots) (nz6f90@ellipsis? nz7bcc@dots)) nz7bc9@ls/false)) (apply (lambda (nz7bcf@p nz7bd0@dots) (call-with-values (lambda () (nz7bb8@cvt nz7bcf@p (+ nz7bba@n '1) nz7bbb@ids)) (lambda (nz7bd7@nz7bd4 nz7bd8@nz7bd6) (let ((nz7bdb@ids nz7bd8@nz7bd6) (nz7bdc@p nz7bd7@nz7bd4)) (values (if (eq? nz7bdc@p 'any) 'each-any (vector 'each nz7bdc@p)) nz7bdb@ids))))) nz7bc9@ls/false) (let ((nz7bdf@t nz7bc7@t)) (let ((nz7be1@ls/false (nz6f8e@syntax-dispatch nz7bdf@t '(any any . #(each+ any () any))))) (if (and nz7be1@ls/false (apply (lambda (nz7be3@x nz7be4@dots nz7be5@ys nz7be6@z) (nz6f90@ellipsis? nz7be4@dots)) nz7be1@ls/false)) (apply (lambda (nz7beb@x nz7bec@dots nz7bed@ys nz7bee@z) (call-with-values (lambda () (nz7bb8@cvt nz7bee@z nz7bba@n nz7bbb@ids)) (lambda (nz7bf7@nz7bf4 nz7bf8@nz7bf6) (let ((nz7bfb@ids nz7bf8@nz7bf6) (nz7bfc@z nz7bf7@nz7bf4)) (call-with-values (lambda () (nz7bb6@cvt* nz7bed@ys nz7bba@n nz7bfb@ids)) (lambda (nz7c03@nz7c00 nz7c04@nz7c02) (let ((nz7c07@ids nz7c04@nz7c02) (nz7c08@ys nz7c03@nz7c00)) (call-with-values (lambda () (nz7bb8@cvt nz7beb@x (+ nz7bba@n '1) nz7c07@ids)) (lambda (nz7c0f@nz7c0c nz7c10@nz7c0e) (let ((nz7c13@ids nz7c10@nz7c0e) (nz7c14@x nz7c0f@nz7c0c)) (values (vector 'each+ nz7c14@x (reverse nz7c08@ys) nz7bfc@z) nz7c13@ids))))))))))) nz7be1@ls/false) (let ((nz7c17@t nz7bdf@t)) (let ((nz7c19@ls/false (nz6f8e@syntax-dispatch nz7c17@t '(any . any)))) (if nz7c19@ls/false (apply (lambda (nz7c1b@x nz7c1c@y) (call-with-values (lambda () (nz7bb8@cvt nz7c1c@y nz7bba@n nz7bbb@ids)) (lambda (nz7c23@nz7c20 nz7c24@nz7c22) (let ((nz7c27@ids nz7c24@nz7c22) (nz7c28@y nz7c23@nz7c20)) (call-with-values (lambda () (nz7bb8@cvt nz7c1b@x nz7bba@n nz7c27@ids)) (lambda (nz7c2f@nz7c2c nz7c30@nz7c2e) (let ((nz7c33@ids nz7c30@nz7c2e) (nz7c34@x nz7c2f@nz7c2c)) (values (cons nz7c34@x nz7c28@y) nz7c33@ids)))))))) nz7c19@ls/false) (let ((nz7c37@t nz7c17@t)) (let ((nz7c39@ls/false (nz6f8e@syntax-dispatch nz7c37@t '()))) (if nz7c39@ls/false (apply (lambda () (values '() nz7bbb@ids)) nz7c39@ls/false) (let ((nz7c3b@t nz7c37@t)) (let ((nz7c3d@ls/false (nz6f8e@syntax-dispatch nz7c3b@t '#(vector each-any)))) (if (and nz7c3d@ls/false (apply (lambda (nz7c3f@p) (not (nz6d53@stx? nz7c3f@p))) nz7c3d@ls/false)) (apply (lambda (nz7c41@p) (call-with-values (lambda () (nz7bb8@cvt nz7c41@p nz7bba@n nz7bbb@ids)) (lambda (nz7c47@nz7c44 nz7c48@nz7c46) (let ((nz7c4b@ids nz7c48@nz7c46) (nz7c4c@p nz7c47@nz7c44)) (values (vector 'vector nz7c4c@p) nz7c4b@ids))))) nz7c3d@ls/false) (let ((nz7c4f@t nz7c3b@t)) (let ((nz7c51@ls/false (nz6f8e@syntax-dispatch nz7c4f@t 'any))) (if nz7c51@ls/false (apply (lambda (nz7c53@datum) (values (vector 'atom (nz6d9b@stx->datum nz7c53@datum)) nz7bbb@ids)) nz7c51@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7c4f@t)))))))))))))))))))))))) (nz7bb8@cvt nz7bb1@pattern '0 '()))))) (set! nz8a63@nz6f8c@convert-pattern nz6f8c@convert-pattern) (set! nz6f8e@syntax-dispatch (let ((nz7c74@stx^ '#f) (nz7c76@match-each '#f) (nz7c78@match-each+ '#f) (nz7c7a@match-each-any '#f) (nz7c7c@match-empty '#f) (nz7c7e@combine '#f) (nz7c80@match* '#f) (nz7c82@match '#f)) (begin (set! nz7c74@stx^ (lambda (nz7d4f@e nz7d50@m* nz7d51@s* nz7d52@ae*) (if (and (null? nz7d50@m*) (null? nz7d51@s*) (null? nz7d52@ae*)) nz7d4f@e (nz6d6f@mkstx nz7d4f@e nz7d50@m* nz7d51@s* nz7d52@ae*)))) (set! nz7c76@match-each (lambda (nz7d2f@e nz7d30@p nz7d31@m* nz7d32@s* nz7d33@ae*) (if (pair? nz7d2f@e) (let ((nz7d39@first (nz7c82@match (car nz7d2f@e) nz7d30@p nz7d31@m* nz7d32@s* nz7d33@ae* '()))) (and nz7d39@first (let ((nz7d3b@rest (nz7c76@match-each (cdr nz7d2f@e) nz7d30@p nz7d31@m* nz7d32@s* nz7d33@ae*))) (and nz7d3b@rest (cons nz7d39@first nz7d3b@rest))))) (if (null? nz7d2f@e) '() (if (nz6d53@stx? nz7d2f@e) (and (not (nz6d0d@top-marked? nz7d31@m*)) (call-with-values (lambda () (join-wraps nz7d31@m* nz7d32@s* nz7d33@ae* nz7d2f@e)) (lambda (nz7d43@nz7d3e nz7d44@nz7d40 nz7d45@nz7d42) (let ((nz7d49@ae* nz7d45@nz7d42) (nz7d4a@s* nz7d44@nz7d40) (nz7d4b@m* nz7d43@nz7d3e)) (nz7c76@match-each (nz6d55@stx-expr nz7d2f@e) nz7d30@p nz7d4b@m* nz7d4a@s* nz7d49@ae*))))) (if (nz68b4@nz6786@annotation? nz7d2f@e) (nz7c76@match-each (nz68b6@nz678a@annotation-expression nz7d2f@e) nz7d30@p nz7d31@m* nz7d32@s* nz7d33@ae*) '#f)))))) (set! nz7c78@match-each+ (lambda (nz7cef@e nz7cf0@x-pat nz7cf1@y-pat nz7cf2@z-pat nz7cf3@m* nz7cf4@s* nz7cf5@ae* nz7cf6@r) (let nz7d07@f ((nz7cff@e nz7cef@e) (nz7d00@m* nz7cf3@m*) (nz7d01@s* nz7cf4@s*) (nz7d02@ae* nz7cf5@ae*)) (if (pair? nz7cff@e) (call-with-values (lambda () (nz7d07@f (cdr nz7cff@e) nz7d00@m* nz7d01@s* nz7d02@ae*)) (lambda (nz7d0f@nz7d0a nz7d10@nz7d0c nz7d11@nz7d0e) (let ((nz7d15@r nz7d11@nz7d0e) (nz7d16@y-pat nz7d10@nz7d0c) (nz7d17@xr* nz7d0f@nz7d0a)) (if nz7d15@r (if (null? nz7d16@y-pat) (let ((nz7d1b@xr (nz7c82@match (car nz7cff@e) nz7cf0@x-pat nz7d00@m* nz7d01@s* nz7d02@ae* '()))) (if nz7d1b@xr (values (cons nz7d1b@xr nz7d17@xr*) nz7d16@y-pat nz7d15@r) (values '#f '#f '#f))) (values '() (cdr nz7d16@y-pat) (nz7c82@match (car nz7cff@e) (car nz7d16@y-pat) nz7d00@m* nz7d01@s* nz7d02@ae* nz7d15@r))) (values '#f '#f '#f))))) (if (nz6d53@stx? nz7cff@e) (if (nz6d0d@top-marked? nz7d00@m*) (values '() nz7cf1@y-pat (nz7c82@match nz7cff@e nz7cf2@z-pat nz7d00@m* nz7d01@s* nz7d02@ae* nz7cf6@r)) (call-with-values (lambda () (join-wraps nz7d00@m* nz7d01@s* nz7d02@ae* nz7cff@e)) (lambda (nz7d23@nz7d1e nz7d24@nz7d20 nz7d25@nz7d22) (let ((nz7d29@ae* nz7d25@nz7d22) (nz7d2a@s* nz7d24@nz7d20) (nz7d2b@m* nz7d23@nz7d1e)) (nz7d07@f (nz6d55@stx-expr nz7cff@e) nz7d2b@m* nz7d2a@s* nz7d29@ae*))))) (if (nz68b4@nz6786@annotation? nz7cff@e) (nz7d07@f (nz68b6@nz678a@annotation-expression nz7cff@e) nz7d00@m* nz7d01@s* nz7d02@ae*) (values '() nz7cf1@y-pat (nz7c82@match nz7cff@e nz7cf2@z-pat nz7d00@m* nz7d01@s* nz7d02@ae* nz7cf6@r)))))))) (set! nz7c7a@match-each-any (lambda (nz7cd3@e nz7cd4@m* nz7cd5@s* nz7cd6@ae*) (if (pair? nz7cd3@e) (let ((nz7cdb@l (nz7c7a@match-each-any (cdr nz7cd3@e) nz7cd4@m* nz7cd5@s* nz7cd6@ae*))) (and nz7cdb@l (cons (nz7c74@stx^ (car nz7cd3@e) nz7cd4@m* nz7cd5@s* nz7cd6@ae*) nz7cdb@l))) (if (null? nz7cd3@e) '() (if (nz6d53@stx? nz7cd3@e) (and (not (nz6d0d@top-marked? nz7cd4@m*)) (call-with-values (lambda () (join-wraps nz7cd4@m* nz7cd5@s* nz7cd6@ae* nz7cd3@e)) (lambda (nz7ce3@nz7cde nz7ce4@nz7ce0 nz7ce5@nz7ce2) (let ((nz7ce9@ae* nz7ce5@nz7ce2) (nz7cea@s* nz7ce4@nz7ce0) (nz7ceb@m* nz7ce3@nz7cde)) (nz7c7a@match-each-any (nz6d55@stx-expr nz7cd3@e) nz7ceb@m* nz7cea@s* nz7ce9@ae*))))) (if (nz68b4@nz6786@annotation? nz7cd3@e) (nz7c7a@match-each-any (nz68b6@nz678a@annotation-expression nz7cd3@e) nz7cd4@m* nz7cd5@s* nz7cd6@ae*) '#f)))))) (set! nz7c7c@match-empty (lambda (nz7ccd@p nz7cce@r) (if (null? nz7ccd@p) nz7cce@r (if (eq? nz7ccd@p '_) nz7cce@r (if (eq? nz7ccd@p 'any) (cons '() nz7cce@r) (if (pair? nz7ccd@p) (nz7c7c@match-empty (car nz7ccd@p) (nz7c7c@match-empty (cdr nz7ccd@p) nz7cce@r)) (if (eq? nz7ccd@p 'each-any) (cons '() nz7cce@r) (let ((nz7cd1@t (vector-ref nz7ccd@p '0))) (if (memv nz7cd1@t '(each)) (nz7c7c@match-empty (vector-ref nz7ccd@p '1) nz7cce@r) (if (memv nz7cd1@t '(each+)) (nz7c7c@match-empty (vector-ref nz7ccd@p '1) (nz7c7c@match-empty (reverse (vector-ref nz7ccd@p '2)) (nz7c7c@match-empty (vector-ref nz7ccd@p '3) nz7cce@r))) (if (memv nz7cd1@t '(free-id atom)) nz7cce@r (if (memv nz7cd1@t '(scheme-id atom)) nz7cce@r (if (memv nz7cd1@t '(vector)) (nz7c7c@match-empty (vector-ref nz7ccd@p '1) nz7cce@r) (assertion-violation 'syntax-dispatch '"invalid pattern" nz7ccd@p)))))))))))))) (set! nz7c7e@combine (lambda (nz7cc9@r* nz7cca@r) (if (null? (car nz7cc9@r*)) nz7cca@r (cons (map car nz7cc9@r*) (nz7c7e@combine (map cdr nz7cc9@r*) nz7cca@r))))) (set! nz7c80@match* (lambda (nz7ca5@e nz7ca6@p nz7ca7@m* nz7ca8@s* nz7ca9@ae* nz7caa@r) (if (null? nz7ca6@p) (and (null? nz7ca5@e) nz7caa@r) (if (pair? nz7ca6@p) (and (pair? nz7ca5@e) (nz7c82@match (car nz7ca5@e) (car nz7ca6@p) nz7ca7@m* nz7ca8@s* nz7ca9@ae* (nz7c82@match (cdr nz7ca5@e) (cdr nz7ca6@p) nz7ca7@m* nz7ca8@s* nz7ca9@ae* nz7caa@r))) (if (eq? nz7ca6@p 'each-any) (let ((nz7cb1@l (nz7c7a@match-each-any nz7ca5@e nz7ca7@m* nz7ca8@s* nz7ca9@ae*))) (and nz7cb1@l (cons nz7cb1@l nz7caa@r))) (let ((nz7cb3@t (vector-ref nz7ca6@p '0))) (if (memv nz7cb3@t '(each)) (if (null? nz7ca5@e) (nz7c7c@match-empty (vector-ref nz7ca6@p '1) nz7caa@r) (let ((nz7cb5@r* (nz7c76@match-each nz7ca5@e (vector-ref nz7ca6@p '1) nz7ca7@m* nz7ca8@s* nz7ca9@ae*))) (and nz7cb5@r* (nz7c7e@combine nz7cb5@r* nz7caa@r)))) (if (memv nz7cb3@t '(free-id)) (and (symbol? nz7ca5@e) (nz6d0d@top-marked? nz7ca7@m*) (nz6d8d@free-id=? (nz7c74@stx^ nz7ca5@e nz7ca7@m* nz7ca8@s* nz7ca9@ae*) (vector-ref nz7ca6@p '1)) nz7caa@r) (if (memv nz7cb3@t '(scheme-id)) (and (symbol? nz7ca5@e) (nz6d0d@top-marked? nz7ca7@m*) (nz6d8d@free-id=? (nz7c74@stx^ nz7ca5@e nz7ca7@m* nz7ca8@s* nz7ca9@ae*) (nz6f16@scheme-stx (vector-ref nz7ca6@p '1))) nz7caa@r) (if (memv nz7cb3@t '(each+)) (call-with-values (lambda () (nz7c78@match-each+ nz7ca5@e (vector-ref nz7ca6@p '1) (vector-ref nz7ca6@p '2) (vector-ref nz7ca6@p '3) nz7ca7@m* nz7ca8@s* nz7ca9@ae* nz7caa@r)) (lambda (nz7cbd@nz7cb8 nz7cbe@nz7cba nz7cbf@nz7cbc) (let ((nz7cc3@r nz7cbf@nz7cbc) (nz7cc4@y-pat nz7cbe@nz7cba) (nz7cc5@xr* nz7cbd@nz7cb8)) (and nz7cc3@r (null? nz7cc4@y-pat) (if (null? nz7cc5@xr*) (nz7c7c@match-empty (vector-ref nz7ca6@p '1) nz7cc3@r) (nz7c7e@combine nz7cc5@xr* nz7cc3@r)))))) (if (memv nz7cb3@t '(atom)) (and (fast-equal? (vector-ref nz7ca6@p '1) (nz6d99@strip nz7ca5@e nz7ca7@m*)) nz7caa@r) (if (memv nz7cb3@t '(vector)) (and (vector? nz7ca5@e) (nz7c82@match (vector->list nz7ca5@e) (vector-ref nz7ca6@p '1) nz7ca7@m* nz7ca8@s* nz7ca9@ae* nz7caa@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" nz7ca6@p))))))))))))) (set! nz7c82@match (lambda (nz7c87@e nz7c88@p nz7c89@m* nz7c8a@s* nz7c8b@ae* nz7c8c@r) (if (not nz7c8c@r) '#f (if (eq? nz7c88@p '_) nz7c8c@r (if (eq? nz7c88@p 'any) (cons (nz7c74@stx^ nz7c87@e nz7c89@m* nz7c8a@s* nz7c8b@ae*) nz7c8c@r) (if (nz6d53@stx? nz7c87@e) (and (not (nz6d0d@top-marked? nz7c89@m*)) (call-with-values (lambda () (join-wraps nz7c89@m* nz7c8a@s* nz7c8b@ae* nz7c87@e)) (lambda (nz7c99@nz7c94 nz7c9a@nz7c96 nz7c9b@nz7c98) (let ((nz7c9f@ae* nz7c9b@nz7c98) (nz7ca0@s* nz7c9a@nz7c96) (nz7ca1@m* nz7c99@nz7c94)) (nz7c82@match (nz6d55@stx-expr nz7c87@e) nz7c88@p nz7ca1@m* nz7ca0@s* nz7c9f@ae* nz7c8c@r))))) (if (nz68b4@nz6786@annotation? nz7c87@e) (nz7c82@match (nz68b6@nz678a@annotation-expression nz7c87@e) nz7c88@p nz7c89@m* nz7c8a@s* nz7c8b@ae* nz7c8c@r) (nz7c80@match* nz7c87@e nz7c88@p nz7c89@m* nz7c8a@s* nz7c8b@ae* nz7c8c@r)))))))) (lambda (nz7c83@e nz7c84@p) (nz7c82@match nz7c83@e nz7c84@p '() '() '() '()))))) (set! nz8a64@nz6f8e@syntax-dispatch nz6f8e@syntax-dispatch) (set! nz6f90@ellipsis? (lambda (nz7d57@x) (and (nz6d87@id? nz7d57@x) (nz6d8d@free-id=? nz7d57@x (nz6f16@scheme-stx '...))))) (set! nz8a65@nz6f90@ellipsis? nz6f90@ellipsis?) (set! nz6f92@underscore? (lambda (nz7d59@x) (and (nz6d87@id? nz7d59@x) (nz6d8d@free-id=? nz7d59@x (nz6f16@scheme-stx '_))))) (set! nz8a66@nz6f92@underscore? nz6f92@underscore?) (set! nz6f94@verify-literals (lambda (nz7d5b@lits nz7d5c@expr) (for-each (lambda (nz7d5f@x) (if (or (not (nz6d87@id? nz7d5f@x)) (nz6f90@ellipsis? nz7d5f@x) (nz6f92@underscore? nz7d5f@x)) (nz706e@syntax-violation '#f '"invalid literal" nz7d5c@expr nz7d5f@x) (void))) nz7d5b@lits))) (set! nz8a67@nz6f94@verify-literals nz6f94@verify-literals) (set! nz6f96@syntax-case-transformer (let ((nz7d62@build-dispatch-call '#f) (nz7d64@invalid-ids-error '#f) (nz7d66@gen-clause '#f) (nz7d68@gen-syntax-case '#f)) (begin (set! nz7d62@build-dispatch-call (lambda (nz7dd3@pvars nz7dd4@expr nz7dd5@y nz7dd6@r nz7dd7@mr) (let ((nz7ddd@ids (map car nz7dd3@pvars)) (nz7dde@levels (map cdr nz7dd3@pvars))) (let ((nz7de1@labels (map nz6d13@gen-label nz7ddd@ids)) (nz7de2@new-vars (map nz6d0f@gen-lexical nz7ddd@ids))) (let ((nz7de5@body (nz6fb0@chi-expr (nz6d73@add-subst (nz6d47@make-full-rib nz7ddd@ids nz7de1@labels) nz7dd4@expr) (append (map (lambda (nz7de7@label nz7de8@var nz7de9@level) (cons nz7de7@label (nz6da1@make-binding 'syntax (cons nz7de8@var nz7de9@level)))) nz7de1@labels nz7de2@new-vars (map cdr nz7dd3@pvars)) nz7dd6@r) nz7dd7@mr))) (list '(primitive apply) (nz6cea@nz6c16@build-lambda '#f nz7de2@new-vars nz7de5@body) nz7dd5@y)))))) (set! nz7d64@invalid-ids-error (lambda (nz7dc7@id* nz7dc8@e nz7dc9@class) (let nz7dd1@find ((nz7dcd@id* nz7dc7@id*) (nz7dce@ok* '())) (if (null? nz7dcd@id*) (nz706e@syntax-violation '#f '"invalid syntax" nz7dc8@e) (if (nz6d87@id? (car nz7dcd@id*)) (if (nz6d93@bound-id-member? (car nz7dcd@id*) nz7dce@ok*) (nz706a@syntax-error (car nz7dcd@id*) '"duplicate " nz7dc9@class) (nz7dd1@find (cdr nz7dcd@id*) (cons (car nz7dcd@id*) nz7dce@ok*))) (nz706a@syntax-error (car nz7dcd@id*) '"invalid " nz7dc9@class)))))) (set! nz7d66@gen-clause (lambda (nz7d9f@x nz7da0@keys nz7da1@clauses nz7da2@r nz7da3@mr nz7da4@pat nz7da5@fender nz7da6@expr) (call-with-values (lambda () (nz6f8c@convert-pattern nz7da4@pat nz7da0@keys)) (lambda (nz7db3@nz7db0 nz7db4@nz7db2) (let ((nz7db7@pvars nz7db4@nz7db2) (nz7db8@p nz7db3@nz7db0)) (if (not (nz6d91@distinct-bound-ids? (map car nz7db7@pvars))) (nz7d64@invalid-ids-error (map car nz7db7@pvars) nz7da4@pat '"pattern variable") (if (not (for-all (lambda (nz7dbb@x) (not (nz6f90@ellipsis? (car nz7dbb@x)))) nz7db7@pvars)) (nz706e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" nz7da4@pat) (let ((nz7dbd@y (nz6d0f@gen-lexical 'tmp))) (let ((nz7dbf@test (if (eq? nz7da5@fender '#t) nz7dbd@y (let ((nz7dc1@call (nz7d62@build-dispatch-call nz7db7@pvars nz7da5@fender nz7dbd@y nz7da2@r nz7da3@mr))) (list 'if nz7dbd@y nz7dc1@call (list 'quote '#f)))))) (let ((nz7dc3@conseq (nz7d62@build-dispatch-call nz7db7@pvars nz7da6@expr nz7dbd@y nz7da2@r nz7da3@mr))) (let ((nz7dc5@altern (nz7d68@gen-syntax-case nz7d9f@x nz7da0@keys nz7da1@clauses nz7da2@r nz7da3@mr))) (list (nz6cea@nz6c16@build-lambda '#f (list nz7dbd@y) (list 'if nz7dbf@test nz7dc3@conseq nz7dc5@altern)) (list '(primitive syntax-dispatch) nz7d9f@x (list 'quote nz7db8@p)))))))))))))) (set! nz7d68@gen-syntax-case (lambda (nz7d7d@x nz7d7e@keys nz7d7f@clauses nz7d80@r nz7d81@mr) (if (null? nz7d7f@clauses) (list '(primitive syntax-error) nz7d7d@x) (let ((nz7d87@t (car nz7d7f@clauses))) (let ((nz7d89@ls/false (nz6f8e@syntax-dispatch nz7d87@t '(any any)))) (if nz7d89@ls/false (apply (lambda (nz7d8b@pat nz7d8c@expr) (if (and (nz6d87@id? nz7d8b@pat) (not (nz6d93@bound-id-member? nz7d8b@pat nz7d7e@keys)) (not (nz6f90@ellipsis? nz7d8b@pat))) (if (nz6d8d@free-id=? nz7d8b@pat (nz6f16@scheme-stx '_)) (nz6fb0@chi-expr nz7d8c@expr nz7d80@r nz7d81@mr) (let ((nz7d8f@lab (nz6d13@gen-label nz7d8b@pat)) (nz7d90@lex (nz6d0f@gen-lexical nz7d8b@pat))) (let ((nz7d93@body (nz6fb0@chi-expr (nz6d73@add-subst (nz6d47@make-full-rib (list nz7d8b@pat) (list nz7d8f@lab)) nz7d8c@expr) (cons (cons nz7d8f@lab (nz6da1@make-binding 'syntax (cons nz7d90@lex '0))) nz7d80@r) nz7d81@mr))) (list (nz6cea@nz6c16@build-lambda '#f (list nz7d90@lex) nz7d93@body) nz7d7d@x)))) (nz7d66@gen-clause nz7d7d@x nz7d7e@keys (cdr nz7d7f@clauses) nz7d80@r nz7d81@mr nz7d8b@pat '#t nz7d8c@expr))) nz7d89@ls/false) (let ((nz7d95@t nz7d87@t)) (let ((nz7d97@ls/false (nz6f8e@syntax-dispatch nz7d95@t '(any any any)))) (if nz7d97@ls/false (apply (lambda (nz7d99@pat nz7d9a@fender nz7d9b@expr) (nz7d66@gen-clause nz7d7d@x nz7d7e@keys (cdr nz7d7f@clauses) nz7d80@r nz7d81@mr nz7d99@pat nz7d9a@fender nz7d9b@expr)) nz7d97@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7d95@t)))))))))) (lambda (nz7d69@e nz7d6a@r nz7d6b@mr) (let ((nz7d6f@t nz7d69@e)) (let ((nz7d71@ls/false (nz6f8e@syntax-dispatch nz7d6f@t '(_ any each-any . each-any)))) (if nz7d71@ls/false (apply (lambda (nz7d73@expr nz7d74@keys nz7d75@clauses) (begin (nz6f94@verify-literals nz7d74@keys nz7d69@e) (let ((nz7d79@x (nz6d0f@gen-lexical 'tmp))) (let ((nz7d7b@body (nz7d68@gen-syntax-case nz7d79@x nz7d74@keys nz7d75@clauses nz7d6a@r nz7d6b@mr))) (list (nz6cea@nz6c16@build-lambda '#f (list nz7d79@x) nz7d7b@body) (nz6fb0@chi-expr nz7d73@expr nz7d6a@r nz7d6b@mr)))))) nz7d71@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7d6f@t)))))))) (set! nz8a68@nz6f96@syntax-case-transformer nz6f96@syntax-case-transformer) (set! nz6f98@ellipsis-map (lambda (nz7ded@proc nz7dee@ls . nz7df1@ls*) (let ((nz7df4@who '#f)) (begin (set! nz7df4@who '...) (begin (if (not (list? nz7dee@ls)) (assertion-violation nz7df4@who '"not a list" nz7dee@ls) (void)) (if (not (null? nz7df1@ls*)) (let ((nz7df5@n (length nz7dee@ls))) (for-each (lambda (nz7df7@x) (begin (if (not (list? nz7df7@x)) (assertion-violation nz7df4@who '"not a list" nz7df7@x) (void)) (if (not (= (length nz7df7@x) nz7df5@n)) (assertion-violation nz7df4@who '"length mismatch" nz7dee@ls nz7df7@x) (void)))) nz7df1@ls*)) (void)) (apply map nz7ded@proc nz7dee@ls nz7df1@ls*)))))) (set! nz8a69@nz6f98@ellipsis-map nz6f98@ellipsis-map) (set! nz6f9a@syntax-transformer (let ((nz7dfa@gen-syntax '#f) (nz7dfc@gen-ref '#f) (nz7dfe@gen-append '#f) (nz7e00@gen-mappend '#f) (nz7e02@gen-map '#f) (nz7e04@gen-cons '#f) (nz7e06@gen-vector '#f) (nz7e08@regen '#f)) (begin (set! nz7dfa@gen-syntax (lambda (nz7e71@src nz7e72@e nz7e73@r nz7e74@maps nz7e75@ellipsis? nz7e76@vec?) (let ((nz7e7d@t nz7e72@e)) (let ((nz7e7f@ls/false (nz6f8e@syntax-dispatch nz7e7d@t 'any))) (if (and nz7e7f@ls/false (apply (lambda (nz7e81@dots) (nz7e75@ellipsis? nz7e81@dots)) nz7e7f@ls/false)) (apply (lambda (nz7e83@dots) (nz706e@syntax-violation '#f '"misplaced ellipsis in syntax form" nz7e71@src)) nz7e7f@ls/false) (let ((nz7e85@t nz7e7d@t)) (let ((nz7e87@ls/false (nz6f8e@syntax-dispatch nz7e85@t 'any))) (if (and nz7e87@ls/false (apply (lambda (nz7e89@id) (nz6d87@id? nz7e89@id)) nz7e87@ls/false)) (apply (lambda (nz7e8b@id) (let ((nz7e8d@label (nz6d9d@id->label nz7e72@e))) (let ((nz7e8f@b (nz6d9f@label->binding nz7e8d@label nz7e73@r))) (if (eq? (nz6da3@binding-type nz7e8f@b) 'syntax) (call-with-values (lambda () (let ((nz7e95@var.lev (nz6da5@binding-value nz7e8f@b))) (nz7dfc@gen-ref nz7e71@src (car nz7e95@var.lev) (cdr nz7e95@var.lev) nz7e74@maps))) (lambda (nz7e97@nz7e92 nz7e98@nz7e94) (let ((nz7e9b@maps nz7e98@nz7e94) (nz7e9c@var nz7e97@nz7e92)) (values (list 'ref nz7e9c@var) nz7e9b@maps)))) (values (list 'quote nz7e72@e) nz7e74@maps))))) nz7e87@ls/false) (let ((nz7e9f@t nz7e85@t)) (let ((nz7ea1@ls/false (nz6f8e@syntax-dispatch nz7e9f@t '(any any)))) (if (and nz7ea1@ls/false (apply (lambda (nz7ea3@dots nz7ea4@e) (nz7e75@ellipsis? nz7ea3@dots)) nz7ea1@ls/false)) (apply (lambda (nz7ea7@dots nz7ea8@e) (if nz7e76@vec? (nz706e@syntax-violation '#f '"misplaced ellipsis in syntax form" nz7e71@src) (nz7dfa@gen-syntax nz7e71@src nz7ea8@e nz7e73@r nz7e74@maps (lambda (nz7eab@x) '#f) '#f))) nz7ea1@ls/false) (let ((nz7ead@t nz7e9f@t)) (let ((nz7eaf@ls/false (nz6f8e@syntax-dispatch nz7ead@t '(any any . any)))) (if (and nz7eaf@ls/false (apply (lambda (nz7eb1@x nz7eb2@dots nz7eb3@y) (nz7e75@ellipsis? nz7eb2@dots)) nz7eaf@ls/false)) (apply (lambda (nz7eb7@x nz7eb8@dots nz7eb9@y) (let nz7ecf@f ((nz7ebd@y nz7eb9@y) (nz7ebe@k (lambda (nz7ec1@maps) (call-with-values (lambda () (nz7dfa@gen-syntax nz7e71@src nz7eb7@x nz7e73@r (cons '() nz7ec1@maps) nz7e75@ellipsis? '#f)) (lambda (nz7ec7@nz7ec4 nz7ec8@nz7ec6) (let ((nz7ecb@maps nz7ec8@nz7ec6) (nz7ecc@x nz7ec7@nz7ec4)) (if (null? (car nz7ecb@maps)) (nz706e@syntax-violation '#f '"extra ellipsis in syntax form" nz7e71@src) (values (nz7e02@gen-map nz7ecc@x (car nz7ecb@maps)) (cdr nz7ecb@maps))))))))) (let ((nz7ed1@t nz7ebd@y)) (let ((nz7ed3@ls/false (nz6f8e@syntax-dispatch nz7ed1@t '()))) (if nz7ed3@ls/false (apply (lambda () (nz7ebe@k nz7e74@maps)) nz7ed3@ls/false) (let ((nz7ed5@t nz7ed1@t)) (let ((nz7ed7@ls/false (nz6f8e@syntax-dispatch nz7ed5@t '(any . any)))) (if (and nz7ed7@ls/false (apply (lambda (nz7ed9@dots nz7eda@y) (nz7e75@ellipsis? nz7ed9@dots)) nz7ed7@ls/false)) (apply (lambda (nz7edd@dots nz7ede@y) (nz7ecf@f nz7ede@y (lambda (nz7ee1@maps) (call-with-values (lambda () (nz7ebe@k (cons '() nz7ee1@maps))) (lambda (nz7ee7@nz7ee4 nz7ee8@nz7ee6) (let ((nz7eeb@maps nz7ee8@nz7ee6) (nz7eec@x nz7ee7@nz7ee4)) (if (null? (car nz7eeb@maps)) (nz706e@syntax-violation '#f '"extra ellipsis in syntax form" nz7e71@src) (values (nz7e00@gen-mappend nz7eec@x (car nz7eeb@maps)) (cdr nz7eeb@maps))))))))) nz7ed7@ls/false) (let ((nz7eef@t nz7ed5@t)) (let ((nz7ef1@ls/false (nz6f8e@syntax-dispatch nz7eef@t '_))) (if nz7ef1@ls/false (apply (lambda () (call-with-values (lambda () (nz7dfa@gen-syntax nz7e71@src nz7ebd@y nz7e73@r nz7e74@maps nz7e75@ellipsis? nz7e76@vec?)) (lambda (nz7ef7@nz7ef4 nz7ef8@nz7ef6) (let ((nz7efb@maps nz7ef8@nz7ef6) (nz7efc@y nz7ef7@nz7ef4)) (call-with-values (lambda () (nz7ebe@k nz7efb@maps)) (lambda (nz7f03@nz7f00 nz7f04@nz7f02) (let ((nz7f07@maps nz7f04@nz7f02) (nz7f08@x nz7f03@nz7f00)) (values (nz7dfe@gen-append nz7f08@x nz7efc@y) nz7f07@maps)))))))) nz7ef1@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7eef@t)))))))))))) nz7eaf@ls/false) (let ((nz7f0b@t nz7ead@t)) (let ((nz7f0d@ls/false (nz6f8e@syntax-dispatch nz7f0b@t '(any . any)))) (if nz7f0d@ls/false (apply (lambda (nz7f0f@x nz7f10@y) (call-with-values (lambda () (nz7dfa@gen-syntax nz7e71@src nz7f0f@x nz7e73@r nz7e74@maps nz7e75@ellipsis? '#f)) (lambda (nz7f17@nz7f14 nz7f18@nz7f16) (let ((nz7f1b@maps nz7f18@nz7f16) (nz7f1c@xnew nz7f17@nz7f14)) (call-with-values (lambda () (nz7dfa@gen-syntax nz7e71@src nz7f10@y nz7e73@r nz7f1b@maps nz7e75@ellipsis? nz7e76@vec?)) (lambda (nz7f23@nz7f20 nz7f24@nz7f22) (let ((nz7f27@maps nz7f24@nz7f22) (nz7f28@ynew nz7f23@nz7f20)) (values (nz7e04@gen-cons nz7e72@e nz7f0f@x nz7f10@y nz7f1c@xnew nz7f28@ynew) nz7f27@maps)))))))) nz7f0d@ls/false) (let ((nz7f2b@t nz7f0b@t)) (let ((nz7f2d@ls/false (nz6f8e@syntax-dispatch nz7f2b@t '#(vector each-any)))) (if nz7f2d@ls/false (apply (lambda (nz7f2f@ls) (call-with-values (lambda () (nz7dfa@gen-syntax nz7e71@src nz7f2f@ls nz7e73@r nz7e74@maps nz7e75@ellipsis? '#t)) (lambda (nz7f35@nz7f32 nz7f36@nz7f34) (let ((nz7f39@maps nz7f36@nz7f34) (nz7f3a@lsnew nz7f35@nz7f32)) (values (nz7e06@gen-vector nz7e72@e nz7f2f@ls nz7f3a@lsnew) nz7f39@maps))))) nz7f2d@ls/false) (let ((nz7f3d@t nz7f2b@t)) (let ((nz7f3f@ls/false (nz6f8e@syntax-dispatch nz7f3d@t '_))) (if nz7f3f@ls/false (apply (lambda () (values (list 'quote nz7e72@e) nz7e74@maps)) nz7f3f@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7f3d@t)))))))))))))))))))))))) (set! nz7dfc@gen-ref (lambda (nz7e57@src nz7e58@var nz7e59@level nz7e5a@maps) (if (= nz7e59@level '0) (values nz7e58@var nz7e5a@maps) (if (null? nz7e5a@maps) (nz706e@syntax-violation '#f '"missing ellipsis in syntax form" nz7e57@src) (call-with-values (lambda () (nz7dfc@gen-ref nz7e57@src nz7e58@var (- nz7e59@level '1) (cdr nz7e5a@maps))) (lambda (nz7e63@nz7e60 nz7e64@nz7e62) (let ((nz7e67@outer-maps nz7e64@nz7e62) (nz7e68@outer-var nz7e63@nz7e60)) (let ((nz7e6b@t (assq nz7e68@outer-var (car nz7e5a@maps)))) (if nz7e6b@t ((lambda (nz7e6d@b) (values (cdr nz7e6d@b) nz7e5a@maps)) nz7e6b@t) (let ((nz7e6f@inner-var (nz6d0f@gen-lexical 'tmp))) (values nz7e6f@inner-var (cons (cons (cons nz7e68@outer-var nz7e6f@inner-var) (car nz7e5a@maps)) nz7e67@outer-maps)))))))))))) (set! nz7dfe@gen-append (lambda (nz7e53@x nz7e54@y) (if (fast-equal? nz7e54@y ''()) nz7e53@x (list 'append nz7e53@x nz7e54@y)))) (set! nz7e00@gen-mappend (lambda (nz7e4f@e nz7e50@map-env) (list 'apply '(primitive append) (nz7e02@gen-map nz7e4f@e nz7e50@map-env)))) (set! nz7e02@gen-map (lambda (nz7e3d@e nz7e3e@map-env) (let ((nz7e41@formals (map cdr nz7e3e@map-env)) (nz7e42@actuals (map (lambda (nz7e45@x) (list 'ref (car nz7e45@x))) nz7e3e@map-env))) (if (eq? (car nz7e3d@e) 'ref) (car nz7e42@actuals) (if (for-all (lambda (nz7e47@x) (and (eq? (car nz7e47@x) 'ref) (memq (cadr nz7e47@x) nz7e41@formals))) (cdr nz7e3d@e)) (let ((nz7e49@args (map (let ((nz7e4b@r (map cons nz7e41@formals nz7e42@actuals))) (lambda (nz7e4d@x) (cdr (assq (cadr nz7e4d@x) nz7e4b@r)))) (cdr nz7e3d@e)))) (cons 'map (cons (list 'primitive (car nz7e3d@e)) nz7e49@args))) (cons* 'map (list 'lambda nz7e41@formals nz7e3d@e) nz7e42@actuals)))))) (set! nz7e04@gen-cons (lambda (nz7e2d@e nz7e2e@x nz7e2f@y nz7e30@xnew nz7e31@ynew) (let ((nz7e37@t (car nz7e31@ynew))) (if (memv nz7e37@t '(quote)) (if (eq? (car nz7e30@xnew) 'quote) (let ((nz7e39@xnew (cadr nz7e30@xnew)) (nz7e3a@ynew (cadr nz7e31@ynew))) (if (and (eq? nz7e39@xnew nz7e2e@x) (eq? nz7e3a@ynew nz7e2f@y)) (list 'quote nz7e2d@e) (list 'quote (cons nz7e39@xnew nz7e3a@ynew)))) (if (null? (cadr nz7e31@ynew)) (list 'list nz7e30@xnew) (list 'cons nz7e30@xnew nz7e31@ynew))) (if (memv nz7e37@t '(list)) (cons 'list (cons nz7e30@xnew (cdr nz7e31@ynew))) (list 'cons nz7e30@xnew nz7e31@ynew)))))) (set! nz7e06@gen-vector (lambda (nz7e27@e nz7e28@ls nz7e29@lsnew) (if (eq? (car nz7e29@lsnew) 'quote) (if (eq? (cadr nz7e29@lsnew) nz7e28@ls) (list 'quote nz7e27@e) (list 'quote (list->vector (cadr nz7e29@lsnew)))) (if (eq? (car nz7e29@lsnew) 'list) (cons 'vector (cdr nz7e29@lsnew)) (list 'list->vector nz7e29@lsnew))))) (set! nz7e08@regen (lambda (nz7e21@x) (let ((nz7e23@t (car nz7e21@x))) (if (memv nz7e23@t '(ref)) (cadr nz7e21@x) (if (memv nz7e23@t '(primitive)) (list 'primitive (cadr nz7e21@x)) (if (memv nz7e23@t '(quote)) (list 'quote (cadr nz7e21@x)) (if (memv nz7e23@t '(lambda)) (nz6cea@nz6c16@build-lambda '#f (cadr nz7e21@x) (nz7e08@regen (caddr nz7e21@x))) (if (memv nz7e23@t '(map)) (let ((nz7e25@ls (map nz7e08@regen (cdr nz7e21@x)))) (cons '(primitive ellipsis-map) nz7e25@ls)) (cons (list 'primitive (car nz7e21@x)) (map nz7e08@regen (cdr nz7e21@x))))))))))) (lambda (nz7e09@e nz7e0a@r nz7e0b@mr) (let ((nz7e0f@t nz7e09@e)) (let ((nz7e11@ls/false (nz6f8e@syntax-dispatch nz7e0f@t '(_ any)))) (if nz7e11@ls/false (apply (lambda (nz7e13@x) (call-with-values (lambda () (nz7dfa@gen-syntax nz7e09@e nz7e13@x nz7e0a@r '() nz6f90@ellipsis? '#f)) (lambda (nz7e19@nz7e16 nz7e1a@nz7e18) (let ((nz7e1d@maps nz7e1a@nz7e18) (nz7e1e@e nz7e19@nz7e16)) (nz7e08@regen nz7e1e@e))))) nz7e11@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7e0f@t)))))))) (set! nz8a6a@nz6f9a@syntax-transformer nz6f9a@syntax-transformer) (set! nz6f9c@core-macro-transformer (lambda (nz7f41@name) (let ((nz7f43@t nz7f41@name)) (if (memv nz7f43@t '(quote)) nz6f3e@quote-transformer (if (memv nz7f43@t '(lambda)) nz6f42@lambda-transformer (if (memv nz7f43@t '(case-lambda)) nz6f40@case-lambda-transformer (if (memv nz7f43@t '(letrec)) nz6f26@letrec-transformer (if (memv nz7f43@t '(letrec*)) nz6f28@letrec*-transformer (if (memv nz7f43@t '(let)) nz6f24@let-transformer (if (memv nz7f43@t '(if)) nz6f36@if-transformer (if (memv nz7f43@t '(and)) nz6f38@and-transformer (if (memv nz7f43@t '(or)) nz6f3a@or-transformer (if (memv nz7f43@t '(foreign-call)) nz6f8a@foreign-call-transformer (if (memv nz7f43@t '(syntax-case)) nz6f96@syntax-case-transformer (if (memv nz7f43@t '(syntax)) nz6f9a@syntax-transformer (if (memv nz7f43@t '(type-descriptor)) nz6f2c@type-descriptor-transformer (if (memv nz7f43@t '(record-type-descriptor)) nz6f2e@record-type-descriptor-transformer (if (memv nz7f43@t '(record-constructor-descriptor)) nz6f30@record-constructor-descriptor-transformer (if (memv nz7f43@t '(fluid-let-syntax)) nz6f2a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" nz7f41@name)))))))))))))))))))) (set! nz8a6b@nz6f9c@core-macro-transformer nz6f9c@core-macro-transformer) (set! nz6f9e@symbol-macro (lambda (nz7f45@x nz7f46@set) (let ((nz7f49@t nz7f45@x)) (let ((nz7f4b@ls/false (nz6f8e@syntax-dispatch nz7f49@t '(_ any)))) (if (and nz7f4b@ls/false (apply (lambda (nz7f4d@name) (and (nz6d87@id? nz7f4d@name) (memq (nz6d89@id->sym nz7f4d@name) nz7f46@set))) nz7f4b@ls/false)) (apply (lambda (nz7f4f@name) (nz6f44@bless (list 'quote nz7f4f@name))) nz7f4b@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7f49@t)))))) (set! nz8a6c@nz6f9e@symbol-macro nz6f9e@symbol-macro) (set! nz6fa0@macro-transformer (lambda (nz7f51@x) (if (procedure? nz7f51@x) nz7f51@x (if (symbol? nz7f51@x) (let ((nz7f53@t nz7f51@x)) (if (memv nz7f53@t '(define-record-type)) nz6f82@define-record-type-macro (if (memv nz7f53@t '(define-struct)) nz6f80@define-struct-macro (if (memv nz7f53@t '(include)) nz6f76@include-macro (if (memv nz7f53@t '(cond)) nz6f72@cond-macro (if (memv nz7f53@t '(let)) nz6f4a@let-macro (if (memv nz7f53@t '(do)) nz6f6a@do-macro (if (memv nz7f53@t '(or)) nz6f6e@or-macro (if (memv nz7f53@t '(and)) nz6f70@and-macro (if (memv nz7f53@t '(let*)) nz6f6c@let*-macro (if (memv nz7f53@t '(let-values)) nz6f4c@let-values-macro (if (memv nz7f53@t '(let*-values)) nz6f4e@let*-values-macro (if (memv nz7f53@t '(syntax-rules)) nz6f7a@syntax-rules-macro (if (memv nz7f53@t '(quasiquote)) nz6f7c@quasiquote-macro (if (memv nz7f53@t '(quasisyntax)) nz6f7e@quasisyntax-macro (if (memv nz7f53@t '(with-syntax)) nz6f46@with-syntax-macro (if (memv nz7f53@t '(when)) nz6f32@when-macro (if (memv nz7f53@t '(unless)) nz6f34@unless-macro (if (memv nz7f53@t '(case)) nz6f3c@case-macro (if (memv nz7f53@t '(identifier-syntax)) nz6f68@identifier-syntax-macro (if (memv nz7f53@t '(time)) nz6f60@time-macro (if (memv nz7f53@t '(delay)) nz6f62@delay-macro (if (memv nz7f53@t '(assert)) nz6f64@assert-macro (if (memv nz7f53@t '(endianness)) nz6f66@endianness-macro (if (memv nz7f53@t '(guard)) nz6f5c@guard-macro (if (memv nz7f53@t '(define-enumeration)) nz6f5e@define-enumeration-macro (if (memv nz7f53@t '(trace-lambda)) nz6f50@trace-lambda-macro (if (memv nz7f53@t '(trace-define)) nz6f52@trace-define-macro (if (memv nz7f53@t '(trace-define-syntax)) nz6f54@trace-define-syntax-macro (if (memv nz7f53@t '(trace-let-syntax)) nz6f58@trace-let-syntax-macro (if (memv nz7f53@t '(trace-letrec-syntax)) nz6f5a@trace-letrec-syntax-macro (if (memv nz7f53@t '(define-condition-type)) nz6f84@define-condition-type-macro (if (memv nz7f53@t '(parameterize)) nz6f88@parameterize-macro (if (memv nz7f53@t '(include-into)) nz6f78@include-into-macro (if (memv nz7f53@t '(eol-style)) (lambda (nz7f55@x) (nz6f9e@symbol-macro nz7f55@x '(none lf cr crlf nel crnel ls))) (if (memv nz7f53@t '(error-handling-mode)) (lambda (nz7f57@x) (nz6f9e@symbol-macro nz7f57@x '(ignore raise replace))) (if (memv nz7f53@t '(buffer-mode)) (lambda (nz7f59@x) (nz6f9e@symbol-macro nz7f59@x '(none line block))) (if (memv nz7f53@t '(file-options)) nz6d02@file-options-macro (if (memv nz7f53@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) nz6f86@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" nz7f51@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" nz7f51@x))))) (set! nz8a6d@nz6fa0@macro-transformer nz6fa0@macro-transformer) (set! nz6fa2@local-macro-transformer (lambda (nz7f5b@x) (car nz7f5b@x))) (set! nz8a6e@nz6fa2@local-macro-transformer nz6fa2@local-macro-transformer) (set! nz6fa4@do-macro-call (lambda (nz7f5d@transformer nz7f5e@expr) (let ((nz7f61@out (nz7f5d@transformer (nz6d71@add-mark nz6d6b@anti-mark nz7f5e@expr '#f)))) (begin (let nz7f65@f ((nz7f63@x nz7f61@out)) (if (not (nz6d53@stx? nz7f63@x)) (if (pair? nz7f63@x) (begin (nz7f65@f (car nz7f63@x)) (nz7f65@f (cdr nz7f63@x))) (if (vector? nz7f63@x) (vector-for-each nz7f65@f nz7f63@x) (if (symbol? nz7f63@x) (nz706e@syntax-violation '#f '"raw symbol encountered in output of macro" nz7f5e@expr nz7f63@x) (void)))) (void))) (nz6d71@add-mark (nz6d69@gen-mark) nz7f61@out nz7f5e@expr))))) (set! nz8a6f@nz6fa4@do-macro-call nz6fa4@do-macro-call) (set! nz6fa6@chi-macro (lambda (nz7f67@p nz7f68@e) (nz6fa4@do-macro-call (nz6fa0@macro-transformer nz7f67@p) nz7f68@e))) (set! nz8a70@nz6fa6@chi-macro nz6fa6@chi-macro) (set! nz6fa8@chi-local-macro (lambda (nz7f6b@p nz7f6c@e) (nz6fa4@do-macro-call (nz6fa2@local-macro-transformer nz7f6b@p) nz7f6c@e))) (set! nz8a71@nz6fa8@chi-local-macro nz6fa8@chi-local-macro) (set! nz6faa@chi-global-macro (lambda (nz7f6f@p nz7f70@e) (let ((nz7f73@lib (car nz7f6f@p)) (nz7f74@loc (cdr nz7f6f@p))) (begin (nz6b9d@nz69dc@visit-library nz7f73@lib) (let ((nz7f77@x (symbol-value nz7f74@loc))) (let ((nz7f79@transformer (if (procedure? nz7f77@x) nz7f77@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" nz7f77@x)))) (nz6fa4@do-macro-call nz7f79@transformer nz7f70@e))))))) (set! nz8a72@nz6faa@chi-global-macro nz6faa@chi-global-macro) (set! nz6fac@chi-expr* (lambda (nz7f7b@e* nz7f7c@r nz7f7d@mr) (if (null? nz7f7b@e*) '() (let ((nz7f81@e (nz6fb0@chi-expr (car nz7f7b@e*) nz7f7c@r nz7f7d@mr))) (cons nz7f81@e (nz6fac@chi-expr* (cdr nz7f7b@e*) nz7f7c@r nz7f7d@mr)))))) (set! nz8a73@nz6fac@chi-expr* nz6fac@chi-expr*) (set! nz6fae@chi-application (lambda (nz7f83@e nz7f84@r nz7f85@mr) (let ((nz7f89@t nz7f83@e)) (let ((nz7f8b@ls/false (nz6f8e@syntax-dispatch nz7f89@t '(any . each-any)))) (if nz7f8b@ls/false (apply (lambda (nz7f8d@rator nz7f8e@rands) (let ((nz7f91@rator (nz6fb0@chi-expr nz7f8d@rator nz7f84@r nz7f85@mr))) (cons nz7f91@rator (nz6fac@chi-expr* nz7f8e@rands nz7f84@r nz7f85@mr)))) nz7f8b@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7f89@t)))))) (set! nz8a74@nz6fae@chi-application nz6fae@chi-application) (set! nz6fb0@chi-expr (lambda (nz7f93@e nz7f94@r nz7f95@mr) (call-with-values (lambda () (nz6da9@syntax-type nz7f93@e nz7f94@r)) (lambda (nz7f9f@nz7f9a nz7fa0@nz7f9c nz7fa1@nz7f9e) (let ((nz7fa5@kwd nz7fa1@nz7f9e) (nz7fa6@value nz7fa0@nz7f9c) (nz7fa7@type nz7f9f@nz7f9a)) (let ((nz7fab@t nz7fa7@type)) (if (memv nz7fab@t '(core-macro)) (let ((nz7fad@transformer (nz6f9c@core-macro-transformer nz7fa6@value))) (nz7fad@transformer nz7f93@e nz7f94@r nz7f95@mr)) (if (memv nz7fab@t '(global)) (let ((nz7faf@lib (car nz7fa6@value))) (let ((nz7fb1@loc (cdr nz7fa6@value))) (begin ((nz6ff6@inv-collector) nz7faf@lib) nz7fb1@loc))) (if (memv nz7fab@t '(core-prim)) (let ((nz7fb3@name nz7fa6@value)) (list 'primitive nz7fb3@name)) (if (memv nz7fab@t '(call)) (nz6fae@chi-application nz7f93@e nz7f94@r nz7f95@mr) (if (memv nz7fab@t '(lexical)) (let ((nz7fb5@lex (nz6f18@lexical-var nz7fa6@value))) nz7fb5@lex) (if (memv nz7fab@t '(global-macro global-macro!)) (nz6fb0@chi-expr (nz6faa@chi-global-macro nz7fa6@value nz7f93@e) nz7f94@r nz7f95@mr) (if (memv nz7fab@t '(local-macro local-macro!)) (nz6fb0@chi-expr (nz6fa8@chi-local-macro nz7fa6@value nz7f93@e) nz7f94@r nz7f95@mr) (if (memv nz7fab@t '(macro macro!)) (nz6fb0@chi-expr (nz6fa6@chi-macro nz7fa6@value nz7f93@e) nz7f94@r nz7f95@mr) (if (memv nz7fab@t '(constant)) (let ((nz7fb7@datum nz7fa6@value)) (list 'quote nz7fb7@datum)) (if (memv nz7fab@t '(set!)) (nz6fb2@chi-set! nz7f93@e nz7f94@r nz7f95@mr) (if (memv nz7fab@t '(begin)) (let ((nz7fb9@t nz7f93@e)) (let ((nz7fbb@ls/false (nz6f8e@syntax-dispatch nz7fb9@t '(_ any . each-any)))) (if nz7fbb@ls/false (apply (lambda (nz7fbd@x nz7fbe@x*) (nz6cec@nz6c46@build-sequence '#f (nz6fac@chi-expr* (cons nz7fbd@x nz7fbe@x*) nz7f94@r nz7f95@mr))) nz7fbb@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7fb9@t)))) (if (memv nz7fab@t '(let-syntax letrec-syntax)) (let ((nz7fc1@t nz7f93@e)) (let ((nz7fc3@ls/false (nz6f8e@syntax-dispatch nz7fc1@t '(_ #(each (any any)) any . each-any)))) (if (and nz7fc3@ls/false (apply (lambda (nz7fc5@xlhs* nz7fc6@xrhs* nz7fc7@xbody nz7fc8@xbody*) (if (not (nz6d8f@valid-bound-ids? nz7fc5@xlhs*)) (nz706e@syntax-violation '#f '"invalid identifiers" nz7f93@e) (void))) nz7fc3@ls/false)) (apply (lambda (nz7fcd@xlhs* nz7fce@xrhs* nz7fcf@xbody nz7fd0@xbody*) (let ((nz7fd5@xlab* (map nz6d13@gen-label nz7fcd@xlhs*))) (let ((nz7fd7@xrib (nz6d47@make-full-rib nz7fcd@xlhs* nz7fd5@xlab*))) (let ((nz7fd9@xb* (map (lambda (nz7fdb@x) (nz6dbf@make-eval-transformer (nz6fe8@expand-transformer (if (eq? nz7fa7@type 'let-syntax) nz7fdb@x (nz6d73@add-subst nz7fd7@xrib nz7fdb@x)) nz7f95@mr))) nz7fce@xrhs*))) (nz6cec@nz6c46@build-sequence '#f (nz6fac@chi-expr* (map (lambda (nz7fdd@x) (nz6d73@add-subst nz7fd7@xrib nz7fdd@x)) (cons nz7fcf@xbody nz7fd0@xbody*)) (append (map cons nz7fd5@xlab* nz7fd9@xb*) nz7f94@r) (append (map cons nz7fd5@xlab* nz7fd9@xb*) nz7f95@mr))))))) nz7fc3@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7fc1@t)))) (if (memv nz7fab@t '(displaced-lexical)) (nz706e@syntax-violation '#f '"identifier out of context" nz7f93@e) (if (memv nz7fab@t '(syntax)) (nz706e@syntax-violation '#f '"reference to pattern variable outside a syntax form" nz7f93@e) (if (memv nz7fab@t '(define define-syntax module import library)) (nz706e@syntax-violation '#f (string-append (let ((nz7fdf@t nz7fa7@type)) (if (memv nz7fdf@t '(define)) '"a definition" (if (memv nz7fdf@t '(define-syntax)) '"a define-syntax" (if (memv nz7fdf@t '(module)) '"a module definition" (if (memv nz7fdf@t '(library)) '"a library definition" (if (memv nz7fdf@t '(import)) '"an import declaration" (if (memv nz7fdf@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") nz7f93@e) (if (memv nz7fab@t '(mutable)) (nz706e@syntax-violation '#f '"attempt to reference an unexportable variable" nz7f93@e) (nz706e@syntax-violation '#f '"invalid expression" nz7f93@e))))))))))))))))))))))) (set! nz8a75@nz6fb0@chi-expr nz6fb0@chi-expr) (set! nz6fb2@chi-set! (lambda (nz7fe1@e nz7fe2@r nz7fe3@mr) (let ((nz7fe7@t nz7fe1@e)) (let ((nz7fe9@ls/false (nz6f8e@syntax-dispatch nz7fe7@t '(_ any any)))) (if (and nz7fe9@ls/false (apply (lambda (nz7feb@x nz7fec@v) (nz6d87@id? nz7feb@x)) nz7fe9@ls/false)) (apply (lambda (nz7fef@x nz7ff0@v) (call-with-values (lambda () (nz6da9@syntax-type nz7fef@x nz7fe2@r)) (lambda (nz7ff9@nz7ff4 nz7ffa@nz7ff6 nz7ffb@nz7ff8) (let ((nz7fff@kwd nz7ffb@nz7ff8) (nz8000@value nz7ffa@nz7ff6) (nz8001@type nz7ff9@nz7ff4)) (let ((nz8005@t nz8001@type)) (if (memv nz8005@t '(lexical)) (begin (nz6f1c@set-lexical-mutable! nz8000@value '#t) (list 'set! (nz6f18@lexical-var nz8000@value) (nz6fb0@chi-expr nz7ff0@v nz7fe2@r nz7fe3@mr))) (if (memv nz8005@t '(core-prim)) (nz706e@syntax-violation '#f '"cannot modify imported core primitive" nz7fe1@e) (if (memv nz8005@t '(global)) (nz706e@syntax-violation '#f '"attempt to modify imported binding" nz7fe1@e) (if (memv nz8005@t '(global-macro!)) (nz6fb0@chi-expr (nz6faa@chi-global-macro nz8000@value nz7fe1@e) nz7fe2@r nz7fe3@mr) (if (memv nz8005@t '(local-macro!)) (nz6fb0@chi-expr (nz6fa8@chi-local-macro nz8000@value nz7fe1@e) nz7fe2@r nz7fe3@mr) (if (memv nz8005@t '(mutable)) (nz706e@syntax-violation '#f '"attempt to assign to an unexportable variable" nz7fe1@e) (nz706e@syntax-violation '#f '"invalid syntax" nz7fe1@e)))))))))))) nz7fe9@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz7fe7@t)))))) (set! nz8a76@nz6fb2@chi-set! nz6fb2@chi-set!) (set! nz6fb4@verify-formals (lambda (nz8007@fmls nz8008@stx) (let ((nz800b@t nz8007@fmls)) (let ((nz800d@ls/false (nz6f8e@syntax-dispatch nz800b@t 'each-any))) (if nz800d@ls/false (apply (lambda (nz800f@x*) (if (not (nz6d8f@valid-bound-ids? nz800f@x*)) (nz6f48@invalid-fmls-error nz8008@stx nz8007@fmls) (void))) nz800d@ls/false) (let ((nz8011@t nz800b@t)) (let ((nz8013@ls/false (nz6f8e@syntax-dispatch nz8011@t '#(each+ any () any)))) (if nz8013@ls/false (apply (lambda (nz8015@x* nz8016@x) (if (not (nz6d8f@valid-bound-ids? (cons nz8016@x nz8015@x*))) (nz6f48@invalid-fmls-error nz8008@stx nz8007@fmls) (void))) nz8013@ls/false) (let ((nz8019@t nz8011@t)) (let ((nz801b@ls/false (nz6f8e@syntax-dispatch nz8019@t '_))) (if nz801b@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid syntax" nz8008@stx)) nz801b@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz8019@t)))))))))))) (set! nz8a77@nz6fb4@verify-formals nz6fb4@verify-formals) (set! nz6fb6@chi-lambda-clause (lambda (nz801d@stx nz801e@fmls nz801f@body* nz8020@r nz8021@mr) (let ((nz8027@t nz801e@fmls)) (let ((nz8029@ls/false (nz6f8e@syntax-dispatch nz8027@t 'each-any))) (if nz8029@ls/false (apply (lambda (nz802b@x*) (begin (nz6fb4@verify-formals nz801e@fmls nz801d@stx) (let ((nz802d@lex* (map nz6d0f@gen-lexical nz802b@x*)) (nz802e@lab* (map nz6d13@gen-label nz802b@x*))) (values nz802d@lex* (nz6fc6@chi-internal (nz6d73@add-subst (nz6d47@make-full-rib nz802b@x* nz802e@lab*) nz801f@body*) (nz6f20@add-lexicals nz802e@lab* nz802d@lex* nz8020@r) nz8021@mr))))) nz8029@ls/false) (let ((nz8031@t nz8027@t)) (let ((nz8033@ls/false (nz6f8e@syntax-dispatch nz8031@t '#(each+ any () any)))) (if nz8033@ls/false (apply (lambda (nz8035@x* nz8036@x) (begin (nz6fb4@verify-formals nz801e@fmls nz801d@stx) (let ((nz8039@lex* (map nz6d0f@gen-lexical nz8035@x*)) (nz803a@lab* (map nz6d13@gen-label nz8035@x*)) (nz803b@lex (nz6d0f@gen-lexical nz8036@x)) (nz803c@lab (nz6d13@gen-label nz8036@x))) (values (append nz8039@lex* nz803b@lex) (nz6fc6@chi-internal (nz6d73@add-subst (nz6d47@make-full-rib (cons nz8036@x nz8035@x*) (cons nz803c@lab nz803a@lab*)) nz801f@body*) (nz6f20@add-lexicals (cons nz803c@lab nz803a@lab*) (cons nz803b@lex nz8039@lex*) nz8020@r) nz8021@mr))))) nz8033@ls/false) (let ((nz8041@t nz8031@t)) (let ((nz8043@ls/false (nz6f8e@syntax-dispatch nz8041@t '_))) (if nz8043@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid syntax" nz801e@fmls)) nz8043@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz8041@t)))))))))))) (set! nz8a78@nz6fb6@chi-lambda-clause nz6fb6@chi-lambda-clause) (set! nz6fb8@chi-lambda-clause* (lambda (nz8045@stx nz8046@fmls* nz8047@body** nz8048@r nz8049@mr) (if (null? nz8046@fmls*) (values '() '()) (call-with-values (lambda () (nz6fb6@chi-lambda-clause nz8045@stx (car nz8046@fmls*) (car nz8047@body**) nz8048@r nz8049@mr)) (lambda (nz8053@nz8050 nz8054@nz8052) (let ((nz8057@b nz8054@nz8052) (nz8058@a nz8053@nz8050)) (call-with-values (lambda () (nz6fb8@chi-lambda-clause* nz8045@stx (cdr nz8046@fmls*) (cdr nz8047@body**) nz8048@r nz8049@mr)) (lambda (nz805f@nz805c nz8060@nz805e) (let ((nz8063@b* nz8060@nz805e) (nz8064@a* nz805f@nz805c)) (values (cons nz8058@a nz8064@a*) (cons nz8057@b nz8063@b*))))))))))) (set! nz8a79@nz6fb8@chi-lambda-clause* nz6fb8@chi-lambda-clause*) (set! nz6fba@chi-defun (lambda (nz8067@x nz8068@r nz8069@mr) (let ((nz806d@fmls (car nz8067@x)) (nz806e@body* (cdr nz8067@x))) (call-with-values (lambda () (nz6fb6@chi-lambda-clause nz806d@fmls nz806d@fmls nz806e@body* nz8068@r nz8069@mr)) (lambda (nz8075@nz8072 nz8076@nz8074) (let ((nz8079@body nz8076@nz8074) (nz807a@fmls nz8075@nz8072)) (nz6cea@nz6c16@build-lambda '#f nz807a@fmls nz8079@body))))))) (set! nz8a7a@nz6fba@chi-defun nz6fba@chi-defun) (set! nz6fbc@chi-rhs (lambda (nz807d@rhs nz807e@r nz807f@mr) (let ((nz8083@t (car nz807d@rhs))) (if (memv nz8083@t '(defun)) (nz6fba@chi-defun (cdr nz807d@rhs) nz807e@r nz807f@mr) (if (memv nz8083@t '(expr)) (let ((nz8085@expr (cdr nz807d@rhs))) (nz6fb0@chi-expr nz8085@expr nz807e@r nz807f@mr)) (if (memv nz8083@t '(top-expr)) (let ((nz8087@expr (cdr nz807d@rhs))) (nz6cec@nz6c46@build-sequence '#f (list (nz6fb0@chi-expr nz8087@expr nz807e@r nz807f@mr) (nz6ced@nz6c48@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" nz807d@rhs))))))) (set! nz8a7b@nz6fbc@chi-rhs nz6fbc@chi-rhs) (set! nz6fbe@expand-interaction-rhs*/init* (lambda (nz8089@lhs* nz808a@rhs* nz808b@init* nz808c@r nz808d@mr) (let nz8097@f ((nz8093@lhs* nz8089@lhs*) (nz8094@rhs* nz808a@rhs*)) (if (null? nz8093@lhs*) (map (lambda (nz8099@x) (nz6fb0@chi-expr nz8099@x nz808c@r nz808d@mr)) nz808b@init*) (let ((nz809b@lhs (car nz8093@lhs*)) (nz809c@rhs (car nz8094@rhs*))) (let ((nz809f@t (car nz809c@rhs))) (if (memv nz809f@t '(defun)) (let ((nz80a1@rhs (nz6fba@chi-defun (cdr nz809c@rhs) nz808c@r nz808d@mr))) (cons (list 'set! nz809b@lhs nz80a1@rhs) (nz8097@f (cdr nz8093@lhs*) (cdr nz8094@rhs*)))) (if (memv nz809f@t '(expr)) (let ((nz80a3@rhs (nz6fb0@chi-expr (cdr nz809c@rhs) nz808c@r nz808d@mr))) (cons (list 'set! nz809b@lhs nz80a3@rhs) (nz8097@f (cdr nz8093@lhs*) (cdr nz8094@rhs*)))) (if (memv nz809f@t '(top-expr)) (let ((nz80a5@e (nz6fb0@chi-expr (cdr nz809c@rhs) nz808c@r nz808d@mr))) (cons nz80a5@e (nz8097@f (cdr nz8093@lhs*) (cdr nz8094@rhs*)))) (error 'expand-interaction '"invallid" nz809c@rhs)))))))))) (set! nz8a7c@nz6fbe@expand-interaction-rhs*/init* nz6fbe@expand-interaction-rhs*/init*) (set! nz6fc0@chi-rhs* (lambda (nz80a7@rhs* nz80a8@r nz80a9@mr) (let nz80af@f ((nz80ad@ls nz80a7@rhs*)) (if (null? nz80ad@ls) '() (let ((nz80b1@a (nz6fbc@chi-rhs (car nz80ad@ls) nz80a8@r nz80a9@mr))) (cons nz80b1@a (nz80af@f (cdr nz80ad@ls)))))))) (set! nz8a7d@nz6fc0@chi-rhs* nz6fc0@chi-rhs*) (set! nz6fc2@find-bound=? (lambda (nz80b3@x nz80b4@lhs* nz80b5@rhs*) (if (null? nz80b4@lhs*) '#f (if (nz6d8b@bound-id=? nz80b3@x (car nz80b4@lhs*)) (car nz80b5@rhs*) (nz6fc2@find-bound=? nz80b3@x (cdr nz80b4@lhs*) (cdr nz80b5@rhs*)))))) (set! nz8a7e@nz6fc2@find-bound=? nz6fc2@find-bound=?) (set! nz6fc4@find-dups (lambda (nz80b9@ls) (let nz80bf@f ((nz80bb@ls nz80b9@ls) (nz80bc@dups '())) (if (null? nz80bb@ls) nz80bc@dups (let ((nz80c1@t (nz6fc2@find-bound=? (car nz80bb@ls) (cdr nz80bb@ls) (cdr nz80bb@ls)))) (if nz80c1@t ((lambda (nz80c3@x) (nz80bf@f (cdr nz80bb@ls) (cons (list (car nz80bb@ls) nz80c3@x) nz80bc@dups))) nz80c1@t) (nz80bf@f (cdr nz80bb@ls) nz80bc@dups))))))) (set! nz8a7f@nz6fc4@find-dups nz6fc4@find-dups) (set! nz6fc6@chi-internal (lambda (nz80c5@e* nz80c6@r nz80c7@mr) (let ((nz80cb@rib (nz6d3b@make-empty-rib))) (call-with-values (lambda () (nz6fe6@chi-body* (map (lambda (nz80dd@x) (nz6d73@add-subst nz80cb@rib nz80dd@x)) (nz6d85@syntax->list nz80c5@e*)) nz80c6@r nz80c7@mr '() '() '() '() '() nz80cb@rib '#f)) (lambda (nz80df@nz80ce nz80e0@nz80d0 nz80e1@nz80d2 nz80e2@nz80d4 nz80e3@nz80d6 nz80e4@nz80d8 nz80e5@nz80da nz80e6@nz80dc) (let ((nz80ef@_exp* nz80e6@nz80dc) (nz80f0@kwd* nz80e5@nz80da) (nz80f1@mod** nz80e4@nz80d8) (nz80f2@rhs* nz80e3@nz80d6) (nz80f3@lex* nz80e2@nz80d4) (nz80f4@mr nz80e1@nz80d2) (nz80f5@r nz80e0@nz80d0) (nz80f6@e* nz80df@nz80ce)) (begin (if (null? nz80f6@e*) (nz706e@syntax-violation '#f '"no expression in body" nz80f6@e*) (void)) (let ((nz80ff@init* (nz6fac@chi-expr* (append (apply append (reverse nz80f1@mod**)) nz80f6@e*) nz80f5@r nz80f4@mr))) (let ((nz8101@rhs* (nz6fc0@chi-rhs* nz80f2@rhs* nz80f5@r nz80f4@mr))) (nz6cf1@nz6c50@build-letrec* '#f (reverse nz80f3@lex*) (reverse nz8101@rhs*) (nz6cec@nz6c46@build-sequence '#f nz80ff@init*))))))))))) (set! nz8a80@nz6fc6@chi-internal nz6fc6@chi-internal) (set! nz6fc8@parse-module (lambda (nz8103@e) (let ((nz8105@t nz8103@e)) (let ((nz8107@ls/false (nz6f8e@syntax-dispatch nz8105@t '(_ each-any . each-any)))) (if nz8107@ls/false (apply (lambda (nz8109@export* nz810a@b*) (begin (if (not (for-all nz6d87@id? nz8109@export*)) (nz706e@syntax-violation '#f '"module exports must be identifiers" nz8103@e) (void)) (values '#f (list->vector nz8109@export*) nz810a@b*))) nz8107@ls/false) (let ((nz810d@t nz8105@t)) (let ((nz810f@ls/false (nz6f8e@syntax-dispatch nz810d@t '(_ any each-any . each-any)))) (if nz810f@ls/false (apply (lambda (nz8111@name nz8112@export* nz8113@b*) (begin (if (not (nz6d87@id? nz8111@name)) (nz706e@syntax-violation '#f '"module name must be an identifier" nz8103@e) (void)) (if (not (for-all nz6d87@id? nz8112@export*)) (nz706e@syntax-violation '#f '"module exports must be identifiers" nz8103@e) (void)) (values nz8111@name (list->vector nz8112@export*) nz8113@b*))) nz810f@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz810d@t))))))))) (set! nz8a81@nz6fc8@parse-module nz6fc8@parse-module) (set! nz6fd2@module-interface? (lambda (nz8117@x) (and (simple-struct? nz8117@x) (eq? (simple-struct-name nz8117@x) 'module-interface)))) (set! nz8a82@nz6fd2@module-interface? nz6fd2@module-interface?) (set! nz6fd4@module-interface-first-mark (lambda (nz8119@x) (simple-struct-ref nz8119@x '0))) (set! nz8a83@nz6fd4@module-interface-first-mark nz6fd4@module-interface-first-mark) (set! nz6fd6@set-module-interface-first-mark! (lambda (nz811b@x nz811c@val) (simple-struct-set! nz811b@x '0 nz811c@val))) (set! nz8a84@nz6fd6@set-module-interface-first-mark! nz6fd6@set-module-interface-first-mark!) (set! nz6fd8@module-interface-exp-id-vec (lambda (nz811f@x) (simple-struct-ref nz811f@x '1))) (set! nz8a85@nz6fd8@module-interface-exp-id-vec nz6fd8@module-interface-exp-id-vec) (set! nz6fda@set-module-interface-exp-id-vec! (lambda (nz8121@x nz8122@val) (simple-struct-set! nz8121@x '1 nz8122@val))) (set! nz8a86@nz6fda@set-module-interface-exp-id-vec! nz6fda@set-module-interface-exp-id-vec!) (set! nz6fdc@module-interface-exp-lab-vec (lambda (nz8125@x) (simple-struct-ref nz8125@x '2))) (set! nz8a87@nz6fdc@module-interface-exp-lab-vec nz6fdc@module-interface-exp-lab-vec) (set! nz6fde@set-module-interface-exp-lab-vec! (lambda (nz8127@x nz8128@val) (simple-struct-set! nz8127@x '2 nz8128@val))) (set! nz8a88@nz6fde@set-module-interface-exp-lab-vec! nz6fde@set-module-interface-exp-lab-vec!) (set! nz6fe0@dummy '3) (set! nz8a89@nz6fe0@dummy nz6fe0@dummy) (set! nz6fe2@module-interface-exp-id* (lambda (nz812b@iface nz812c@id) (let ((nz8130@diff-marks '#f)) (begin (set! nz8130@diff-marks (lambda (nz8137@ls nz8138@x) (begin (if (null? nz8137@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((nz813b@a (car nz8137@ls))) (if (eq? nz813b@a nz8138@x) '() (cons nz813b@a (nz8130@diff-marks (cdr nz8137@ls) nz8138@x))))))) (let ((nz8131@diff (nz8130@diff-marks (nz6d59@stx-mark* nz812c@id) (nz6fd4@module-interface-first-mark nz812b@iface))) (nz8132@id-vec (nz6fd8@module-interface-exp-id-vec nz812b@iface))) (if (null? nz8131@diff) nz8132@id-vec (vector-map (lambda (nz8135@x) (make-simple-struct 'stx '5 (list (nz6d55@stx-expr nz8135@x) (append nz8131@diff (nz6d59@stx-mark* nz8135@x)) '() '()))) nz8132@id-vec))))))) (set! nz8a8a@nz6fe2@module-interface-exp-id* nz6fe2@module-interface-exp-id*) (set! nz6fe4@chi-internal-module (lambda (nz813d@e nz813e@r nz813f@mr nz8140@lex* nz8141@rhs* nz8142@mod** nz8143@kwd*) (call-with-values (lambda () (nz6fc8@parse-module nz813d@e)) (lambda (nz8151@nz814c nz8152@nz814e nz8153@nz8150) (let ((nz8157@e* nz8153@nz8150) (nz8158@exp-id* nz8152@nz814e) (nz8159@name nz8151@nz814c)) (let ((nz815d@rib (nz6d3b@make-empty-rib))) (let ((nz815f@e* (map (lambda (nz8161@x) (nz6d73@add-subst nz815d@rib nz8161@x)) (nz6d85@syntax->list nz8157@e*)))) (call-with-values (lambda () (nz6fe6@chi-body* nz815f@e* nz813e@r nz813f@mr nz8140@lex* nz8141@rhs* nz8142@mod** nz8143@kwd* '() nz815d@rib '#f)) (lambda (nz8173@nz8164 nz8174@nz8166 nz8175@nz8168 nz8176@nz816a nz8177@nz816c nz8178@nz816e nz8179@nz8170 nz817a@nz8172) (let ((nz8183@_exp* nz817a@nz8172) (nz8184@kwd* nz8179@nz8170) (nz8185@mod** nz8178@nz816e) (nz8186@rhs* nz8177@nz816c) (nz8187@lex* nz8176@nz816a) (nz8188@mr nz8175@nz8168) (nz8189@r nz8174@nz8166) (nz818a@e* nz8173@nz8164)) (let ((nz8193@exp-lab* (vector-map (lambda (nz8197@x) (or (nz6d9d@id->label (make-simple-struct 'stx '5 (list (nz6d89@id->sym nz8197@x) (nz6d59@stx-mark* nz8197@x) (list nz815d@rib) '()))) (nz706e@syntax-violation '#f '"cannot find module export" nz8197@x))) nz8158@exp-id*)) (nz8194@mod** (cons nz818a@e* nz8185@mod**))) (if (not nz8159@name) (values nz8187@lex* nz8186@rhs* nz8158@exp-id* nz8193@exp-lab* nz8189@r nz8188@mr nz8194@mod** nz8184@kwd*) (let ((nz8199@lab (nz6d13@gen-label 'module)) (nz819a@iface (make-simple-struct 'module-interface '4 (list (car (nz6d59@stx-mark* nz8159@name)) (vector-map (lambda (nz819d@x) (make-simple-struct 'stx '5 (list (nz6d55@stx-expr nz819d@x) (nz6d59@stx-mark* nz819d@x) '() '()))) nz8158@exp-id*) nz8193@exp-lab*)))) (values nz8187@lex* nz8186@rhs* (vector nz8159@name) (vector nz8199@lab) (cons (cons nz8199@lab (cons '$module nz819a@iface)) nz8189@r) (cons (cons nz8199@lab (cons '$module nz819a@iface)) nz8188@mr) nz8194@mod** nz8184@kwd*)))))))))))))) (set! nz8a8b@nz6fe4@chi-internal-module nz6fe4@chi-internal-module) (set! nz6fe6@chi-body* (lambda (nz819f@e* nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81a5@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?) (if (null? nz819f@e*) (values nz819f@e* nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81a5@kwd* nz81a6@exp*) (let ((nz81b3@e (car nz819f@e*))) (call-with-values (lambda () (nz6da9@syntax-type nz81b3@e nz81a0@r)) (lambda (nz81bb@nz81b6 nz81bc@nz81b8 nz81bd@nz81ba) (let ((nz81c1@kwd nz81bd@nz81ba) (nz81c2@value nz81bc@nz81b8) (nz81c3@type nz81bb@nz81b6)) (let ((nz81c7@kwd* (if (nz6d87@id? nz81c1@kwd) (cons nz81c1@kwd nz81a5@kwd*) nz81a5@kwd*))) (let ((nz81c9@t nz81c3@type)) (if (memv nz81c9@t '(define)) (call-with-values (lambda () (nz6f10@parse-define nz81b3@e)) (lambda (nz81cf@nz81cc nz81d0@nz81ce) (let ((nz81d3@rhs nz81d0@nz81ce) (nz81d4@id nz81cf@nz81cc)) (begin (if (nz6d93@bound-id-member? nz81d4@id nz81c7@kwd*) (nz706e@syntax-violation '#f '"cannot redefine keyword" nz81b3@e) (void)) (call-with-values (lambda () (nz6d17@gen-define-label+loc nz81d4@id nz81a7@rib)) (lambda (nz81db@nz81d8 nz81dc@nz81da) (let ((nz81df@lex nz81dc@nz81da) (nz81e0@lab nz81db@nz81d8)) (begin (nz6d3d@extend-rib! nz81a7@rib nz81d4@id nz81e0@lab) (nz6fe6@chi-body* (cdr nz819f@e*) (nz6f1e@add-lexical nz81e0@lab nz81df@lex nz81a0@r) nz81a1@mr (cons nz81df@lex nz81a2@lex*) (cons nz81d3@rhs nz81a3@rhs*) nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?))))))))) (if (memv nz81c9@t '(define-syntax)) (call-with-values (lambda () (nz6f12@parse-define-syntax nz81b3@e)) (lambda (nz81e7@nz81e4 nz81e8@nz81e6) (let ((nz81eb@rhs nz81e8@nz81e6) (nz81ec@id nz81e7@nz81e4)) (begin (if (nz6d93@bound-id-member? nz81ec@id nz81c7@kwd*) (nz706e@syntax-violation '#f '"cannot redefine keyword" nz81b3@e) (void)) (let ((nz81ef@lab (nz6d19@gen-define-label nz81ec@id nz81a7@rib)) (nz81f0@expanded-rhs (nz6fe8@expand-transformer nz81eb@rhs nz81a1@mr))) (begin (nz6d3d@extend-rib! nz81a7@rib nz81ec@id nz81ef@lab) (let ((nz81f3@b (nz6dbf@make-eval-transformer nz81f0@expanded-rhs))) (nz6fe6@chi-body* (cdr nz819f@e*) (cons (cons nz81ef@lab nz81f3@b) nz81a0@r) (cons (cons nz81ef@lab nz81f3@b) nz81a1@mr) nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?)))))))) (if (memv nz81c9@t '(let-syntax letrec-syntax)) (let ((nz81f5@t nz81b3@e)) (let ((nz81f7@ls/false (nz6f8e@syntax-dispatch nz81f5@t '(_ #(each (any any)) . each-any)))) (if (and nz81f7@ls/false (apply (lambda (nz81f9@xlhs* nz81fa@xrhs* nz81fb@xbody*) (if (not (nz6d8f@valid-bound-ids? nz81f9@xlhs*)) (nz706e@syntax-violation '#f '"invalid identifiers" nz81b3@e) (void))) nz81f7@ls/false)) (apply (lambda (nz81ff@xlhs* nz8200@xrhs* nz8201@xbody*) (let ((nz8205@xlab* (map nz6d13@gen-label nz81ff@xlhs*))) (let ((nz8207@xrib (nz6d47@make-full-rib nz81ff@xlhs* nz8205@xlab*))) (let ((nz8209@xb* (map (lambda (nz820b@x) (nz6dbf@make-eval-transformer (nz6fe8@expand-transformer (if (eq? nz81c3@type 'let-syntax) nz820b@x (nz6d73@add-subst nz8207@xrib nz820b@x)) nz81a1@mr))) nz8200@xrhs*))) (nz6fe6@chi-body* (append (map (lambda (nz820d@x) (nz6d73@add-subst nz8207@xrib nz820d@x)) nz8201@xbody*) (cdr nz819f@e*)) (append (map cons nz8205@xlab* nz8209@xb*) nz81a0@r) (append (map cons nz8205@xlab* nz8209@xb*) nz81a1@mr) nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?))))) nz81f7@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz81f5@t)))) (if (memv nz81c9@t '(begin)) (let ((nz820f@t nz81b3@e)) (let ((nz8211@ls/false (nz6f8e@syntax-dispatch nz820f@t '(_ . each-any)))) (if nz8211@ls/false (apply (lambda (nz8213@x*) (nz6fe6@chi-body* (append nz8213@x* (cdr nz819f@e*)) nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?)) nz8211@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz820f@t)))) (if (memv nz81c9@t '(global-macro global-macro!)) (nz6fe6@chi-body* (cons (nz6d73@add-subst nz81a7@rib (nz6faa@chi-global-macro nz81c2@value nz81b3@e)) (cdr nz819f@e*)) nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?) (if (memv nz81c9@t '(local-macro local-macro!)) (nz6fe6@chi-body* (cons (nz6d73@add-subst nz81a7@rib (nz6fa8@chi-local-macro nz81c2@value nz81b3@e)) (cdr nz819f@e*)) nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?) (if (memv nz81c9@t '(macro macro!)) (nz6fe6@chi-body* (cons (nz6d73@add-subst nz81a7@rib (nz6fa6@chi-macro nz81c2@value nz81b3@e)) (cdr nz819f@e*)) nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?) (if (memv nz81c9@t '(module)) (call-with-values (lambda () (nz6fe4@chi-internal-module nz81b3@e nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd*)) (lambda (nz8225@nz8216 nz8226@nz8218 nz8227@nz821a nz8228@nz821c nz8229@nz821e nz822a@nz8220 nz822b@nz8222 nz822c@nz8224) (let ((nz8235@kwd* nz822c@nz8224) (nz8236@mod** nz822b@nz8222) (nz8237@mr nz822a@nz8220) (nz8238@r nz8229@nz821e) (nz8239@m-exp-lab* nz8228@nz821c) (nz823a@m-exp-id* nz8227@nz821a) (nz823b@rhs* nz8226@nz8218) (nz823c@lex* nz8225@nz8216)) (begin (vector-for-each (lambda (nz8245@id nz8246@lab) (nz6d3d@extend-rib! nz81a7@rib nz8245@id nz8246@lab)) nz823a@m-exp-id* nz8239@m-exp-lab*) (nz6fe6@chi-body* (cdr nz819f@e*) nz8238@r nz8237@mr nz823c@lex* nz823b@rhs* nz8236@mod** nz8235@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?))))) (if (memv nz81c9@t '(library)) (begin (nz7050@library-expander (nz6d9b@stx->datum nz81b3@e)) (nz6fe6@chi-body* (cdr nz819f@e*) nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?)) (if (memv nz81c9@t '(export)) (let ((nz8249@t nz81b3@e)) (let ((nz824b@ls/false (nz6f8e@syntax-dispatch nz8249@t '(_ . each-any)))) (if nz824b@ls/false (apply (lambda (nz824d@exp-decl*) (nz6fe6@chi-body* (cdr nz819f@e*) nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* (append nz824d@exp-decl* nz81a6@exp*) nz81a7@rib nz81a8@top?)) nz824b@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz8249@t)))) (if (memv nz81c9@t '(import)) (let ((nz8250@module-import? '#f) (nz8252@module-import '#f) (nz8254@library-import '#f)) (begin (set! nz8250@module-import? (lambda (nz82a3@e) (let ((nz82a5@t nz82a3@e)) (let ((nz82a7@ls/false (nz6f8e@syntax-dispatch nz82a5@t '(_ any)))) (if (and nz82a7@ls/false (apply (lambda (nz82a9@id) (nz6d87@id? nz82a9@id)) nz82a7@ls/false)) (apply (lambda (nz82ab@id) '#t) nz82a7@ls/false) (let ((nz82ad@t nz82a5@t)) (let ((nz82af@ls/false (nz6f8e@syntax-dispatch nz82ad@t '(_ . each-any)))) (if nz82af@ls/false (apply (lambda (nz82b1@imp*) '#f) nz82af@ls/false) (let ((nz82b3@t nz82ad@t)) (let ((nz82b5@ls/false (nz6f8e@syntax-dispatch nz82b3@t '_))) (if nz82b5@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"malformed import form" nz82a3@e)) nz82b5@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz82b3@t)))))))))))) (set! nz8252@module-import (lambda (nz8281@e nz8282@r) (let ((nz8285@t nz8281@e)) (let ((nz8287@ls/false (nz6f8e@syntax-dispatch nz8285@t '(_ any)))) (if (and nz8287@ls/false (apply (lambda (nz8289@id) (nz6d87@id? nz8289@id)) nz8287@ls/false)) (apply (lambda (nz828b@id) (call-with-values (lambda () (nz6da9@syntax-type nz828b@id nz8282@r)) (lambda (nz8293@nz828e nz8294@nz8290 nz8295@nz8292) (let ((nz8299@kwd nz8295@nz8292) (nz829a@value nz8294@nz8290) (nz829b@type nz8293@nz828e)) (let ((nz829f@t nz829b@type)) (if (memv nz829f@t '($module)) (let ((nz82a1@iface nz829a@value)) (values (nz6fe2@module-interface-exp-id* nz82a1@iface nz828b@id) (nz6fdc@module-interface-exp-lab-vec nz82a1@iface))) (nz706e@syntax-violation '#f '"invalid import" nz8281@e))))))) nz8287@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz8285@t)))))) (set! nz8254@library-import (lambda (nz8265@e) (let ((nz8267@t nz8265@e)) (let ((nz8269@ls/false (nz6f8e@syntax-dispatch nz8267@t '(any . each-any)))) (if nz8269@ls/false (apply (lambda (nz826b@ctxt nz826c@imp*) (call-with-values (lambda () (nz6ff0@parse-import-spec* (nz7074@syntax->datum nz826c@imp*))) (lambda (nz8273@nz8270 nz8274@nz8272) (let ((nz8277@subst-labels nz8274@nz8272) (nz8278@subst-names nz8273@nz8270)) (values (vector-map (lambda (nz827b@name) (nz6d67@datum->stx nz826b@ctxt nz827b@name)) nz8278@subst-names) nz8277@subst-labels))))) nz8269@ls/false) (let ((nz827d@t nz8267@t)) (let ((nz827f@ls/false (nz6f8e@syntax-dispatch nz827d@t '_))) (if nz827f@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid import form" nz8265@e)) nz827f@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz827d@t))))))))) (begin (call-with-values (lambda () (if (nz8250@module-import? nz81b3@e) (nz8252@module-import nz81b3@e nz81a0@r) (nz8254@library-import nz81b3@e))) (lambda (nz8259@nz8256 nz825a@nz8258) (let ((nz825d@lab* nz825a@nz8258) (nz825e@id* nz8259@nz8256)) (vector-for-each (lambda (nz8261@id nz8262@lab) (nz6d3d@extend-rib! nz81a7@rib nz8261@id nz8262@lab)) nz825e@id* nz825d@lab*)))) (nz6fe6@chi-body* (cdr nz819f@e*) nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?)))) (if nz81a8@top? (nz6fe6@chi-body* (cdr nz819f@e*) nz81a0@r nz81a1@mr (cons (nz6d0f@gen-lexical 'dummy) nz81a2@lex*) (cons (cons 'top-expr nz81b3@e) nz81a3@rhs*) nz81a4@mod** nz81c7@kwd* nz81a6@exp* nz81a7@rib nz81a8@top?) (values nz819f@e* nz81a0@r nz81a1@mr nz81a2@lex* nz81a3@rhs* nz81a4@mod** nz81c7@kwd* nz81a6@exp*)))))))))))))))))))))) (set! nz8a8c@nz6fe6@chi-body* nz6fe6@chi-body*) (set! nz6fe8@expand-transformer (lambda (nz82b7@expr nz82b8@r) (let ((nz82bb@rtc (nz6ff4@make-collector))) (let ((nz82bd@expanded-rhs (let ((nz82c7@nz82c0 nz6ff6@inv-collector) (nz82c8@nz82c2 nz6ff8@vis-collector) (nz82c9@nz82c4 nz82bb@rtc) (nz82ca@nz82c6 (lambda (nz82cf@x) (values)))) (let ((nz82d1@swap (lambda () (begin (let ((nz82d3@t (nz82c7@nz82c0))) (begin (nz82c7@nz82c0 nz82c9@nz82c4) (set! nz82c9@nz82c4 nz82d3@t))) (let ((nz82d5@t (nz82c8@nz82c2))) (begin (nz82c8@nz82c2 nz82ca@nz82c6) (set! nz82ca@nz82c6 nz82d5@t))))))) (dynamic-wind nz82d1@swap (lambda () (nz6fb0@chi-expr nz82b7@expr nz82b8@r nz82b8@r)) nz82d1@swap))))) (begin (for-each (let ((nz82d7@mark-visit (nz6ff8@vis-collector))) (lambda (nz82d9@x) (begin (nz6b9c@nz69da@invoke-library nz82d9@x) (nz82d7@mark-visit nz82d9@x)))) (nz82bb@rtc)) nz82bd@expanded-rhs))))) (set! nz8a8d@nz6fe8@expand-transformer nz6fe8@expand-transformer) (set! nz6fea@parse-exports (lambda (nz82db@exp*) (let nz82e3@f ((nz82dd@exp* nz82db@exp*) (nz82de@int* '()) (nz82df@ext* '())) (if (null? nz82dd@exp*) (begin (if (not (nz6d8f@valid-bound-ids? nz82df@ext*)) (nz706e@syntax-violation 'export '"invalid exports" (nz6fc4@find-dups nz82df@ext*)) (void)) (values (map nz7074@syntax->datum nz82df@ext*) nz82de@int*)) (let ((nz82e5@t (car nz82dd@exp*))) (let ((nz82e7@ls/false (nz6f8e@syntax-dispatch nz82e5@t '(any . #(each (any any)))))) (if nz82e7@ls/false (apply (lambda (nz82e9@rename nz82ea@i* nz82eb@e*) (begin (if (not (and (eq? (nz7074@syntax->datum nz82e9@rename) 'rename) (for-all nz6d87@id? nz82ea@i*) (for-all nz6d87@id? nz82eb@e*))) (nz706e@syntax-violation 'export '"invalid export specifier" (car nz82dd@exp*)) (void)) (nz82e3@f (cdr nz82dd@exp*) (append nz82ea@i* nz82de@int*) (append nz82eb@e* nz82df@ext*)))) nz82e7@ls/false) (let ((nz82ef@t nz82e5@t)) (let ((nz82f1@ls/false (nz6f8e@syntax-dispatch nz82ef@t 'any))) (if nz82f1@ls/false (apply (lambda (nz82f3@ie) (begin (if (not (nz6d87@id? nz82f3@ie)) (nz706e@syntax-violation 'export '"invalid export" nz82f3@ie) (void)) (nz82e3@f (cdr nz82dd@exp*) (cons nz82f3@ie nz82de@int*) (cons nz82f3@ie nz82df@ext*)))) nz82f1@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz82ef@t))))))))))) (set! nz8a8e@nz6fea@parse-exports nz6fea@parse-exports) (set! nz6fec@parse-library-name (lambda (nz82f5@spec) (let ((nz82f8@parse '#f)) (begin (set! nz82f8@parse (lambda (nz8305@x) (let ((nz8307@t nz8305@x)) (let ((nz8309@ls/false (nz6f8e@syntax-dispatch nz8307@t '(each-any)))) (if (and nz8309@ls/false (apply (lambda (nz830b@v*) (for-all (lambda (nz830d@x) (let ((nz830f@x (nz7074@syntax->datum nz830d@x))) (and (integer? nz830f@x) (exact? nz830f@x)))) nz830b@v*)) nz8309@ls/false)) (apply (lambda (nz8311@v*) (values '() (map nz7074@syntax->datum nz8311@v*))) nz8309@ls/false) (let ((nz8313@t nz8307@t)) (let ((nz8315@ls/false (nz6f8e@syntax-dispatch nz8313@t '(any . any)))) (if (and nz8315@ls/false (apply (lambda (nz8317@x nz8318@rest) (symbol? (nz7074@syntax->datum nz8317@x))) nz8315@ls/false)) (apply (lambda (nz831b@x nz831c@rest) (call-with-values (lambda () (nz82f8@parse nz831c@rest)) (lambda (nz8323@nz8320 nz8324@nz8322) (let ((nz8327@v* nz8324@nz8322) (nz8328@x* nz8323@nz8320)) (values (cons (nz7074@syntax->datum nz831b@x) nz8328@x*) nz8327@v*))))) nz8315@ls/false) (let ((nz832b@t nz8313@t)) (let ((nz832d@ls/false (nz6f8e@syntax-dispatch nz832b@t '()))) (if nz832d@ls/false (apply (lambda () (values '() '())) nz832d@ls/false) (let ((nz832f@t nz832b@t)) (let ((nz8331@ls/false (nz6f8e@syntax-dispatch nz832f@t '_))) (if nz8331@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid library name" nz82f5@spec)) nz8331@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz832f@t))))))))))))))) (call-with-values (lambda () (nz82f8@parse nz82f5@spec)) (lambda (nz82fd@nz82fa nz82fe@nz82fc) (let ((nz8301@ver* nz82fe@nz82fc) (nz8302@name* nz82fd@nz82fa)) (begin (if (null? nz8302@name*) (nz706e@syntax-violation '#f '"empty library name" nz82f5@spec) (void)) (values nz8302@name* nz8301@ver*))))))))) (set! nz8a8f@nz6fec@parse-library-name nz6fec@parse-library-name) (set! nz6fee@parse-library (lambda (nz8333@e) (let ((nz8335@t nz8333@e)) (let ((nz8337@ls/false (nz6f8e@syntax-dispatch nz8335@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and nz8337@ls/false (apply (lambda (nz8339@library nz833a@name* nz833b@export nz833c@exp* nz833d@import nz833e@imp* nz833f@b*) (and (eq? (nz7074@syntax->datum nz833b@export) 'export) (eq? (nz7074@syntax->datum nz833d@import) 'import) (eq? (nz7074@syntax->datum nz8339@library) 'library))) nz8337@ls/false)) (apply (lambda (nz8347@library nz8348@name* nz8349@export nz834a@exp* nz834b@import nz834c@imp* nz834d@b*) (values nz8348@name* nz834a@exp* nz834c@imp* nz834d@b*)) nz8337@ls/false) (let ((nz8355@t nz8335@t)) (let ((nz8357@ls/false (nz6f8e@syntax-dispatch nz8355@t '_))) (if nz8357@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"malformed library" nz8333@e)) nz8357@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz8355@t))))))))) (set! nz8a90@nz6fee@parse-library nz6fee@parse-library) (set! nz6ff0@parse-import-spec* (let ((nz835a@idsyn? '#f) (nz835c@dup-error '#f) (nz835e@merge-substs '#f) (nz8360@exclude* '#f) (nz8362@find* '#f) (nz8364@rem* '#f) (nz8366@remove-dups '#f) (nz8368@parse-library-name '#f) (nz836a@import-library '#f) (nz836c@get-import '#f) (nz836e@add-imports! '#f)) (begin (set! nz835a@idsyn? (lambda (nz8563@x) (symbol? (nz7074@syntax->datum nz8563@x)))) (set! nz835c@dup-error (lambda (nz8561@name) (nz706e@syntax-violation 'import '"two imports with different bindings" nz8561@name))) (set! nz835e@merge-substs (lambda (nz854f@s nz8550@subst) (let ((nz8554@insert-to-subst '#f)) (begin (set! nz8554@insert-to-subst (lambda (nz8555@a nz8556@subst) (let ((nz8559@name (car nz8555@a)) (nz855a@label (cdr nz8555@a))) (let ((nz855d@t (assq nz8559@name nz8556@subst))) (if nz855d@t ((lambda (nz855f@x) (if (eq? (cdr nz855f@x) nz855a@label) nz8556@subst (nz835c@dup-error nz8559@name))) nz855d@t) (cons nz8555@a nz8556@subst)))))) (if (null? nz854f@s) nz8550@subst (nz8554@insert-to-subst (car nz854f@s) (nz835e@merge-substs (cdr nz854f@s) nz8550@subst))))))) (set! nz8360@exclude* (lambda (nz851f@sym* nz8520@subst) (let ((nz8524@exclude '#f)) (begin (set! nz8524@exclude (lambda (nz853d@sym nz853e@subst) (if (null? nz853e@subst) (nz706e@syntax-violation 'import '"cannot rename unbound identifier" nz853d@sym) (if (eq? nz853d@sym (caar nz853e@subst)) (values (cdar nz853e@subst) (cdr nz853e@subst)) (let ((nz8541@a (car nz853e@subst))) (call-with-values (lambda () (nz8524@exclude nz853d@sym (cdr nz853e@subst))) (lambda (nz8547@nz8544 nz8548@nz8546) (let ((nz854b@subst nz8548@nz8546) (nz854c@old nz8547@nz8544)) (values nz854c@old (cons nz8541@a nz854b@subst)))))))))) (if (null? nz851f@sym*) (values '() nz8520@subst) (call-with-values (lambda () (nz8524@exclude (car nz851f@sym*) nz8520@subst)) (lambda (nz8529@nz8526 nz852a@nz8528) (let ((nz852d@subst nz852a@nz8528) (nz852e@old nz8529@nz8526)) (call-with-values (lambda () (nz8360@exclude* (cdr nz851f@sym*) nz852d@subst)) (lambda (nz8535@nz8532 nz8536@nz8534) (let ((nz8539@subst nz8536@nz8534) (nz853a@old* nz8535@nz8532)) (values (cons nz852e@old nz853a@old*) nz8539@subst)))))))))))) (set! nz8362@find* (lambda (nz8517@sym* nz8518@subst) (map (lambda (nz851b@x) (let ((nz851d@t (assq nz851b@x nz8518@subst))) (if nz851d@t (cdr nz851d@t) (nz706e@syntax-violation 'import '"cannot find identifier" nz851b@x)))) nz8517@sym*))) (set! nz8364@rem* (lambda (nz850f@sym* nz8510@subst) (let nz8515@f ((nz8513@subst nz8510@subst)) (if (null? nz8513@subst) '() (if (memq (caar nz8513@subst) nz850f@sym*) (nz8515@f (cdr nz8513@subst)) (cons (car nz8513@subst) (nz8515@f (cdr nz8513@subst)))))))) (set! nz8366@remove-dups (lambda (nz850d@ls) (if (null? nz850d@ls) '() (if (memq (car nz850d@ls) (cdr nz850d@ls)) (nz8366@remove-dups (cdr nz850d@ls)) (cons (car nz850d@ls) (nz8366@remove-dups (cdr nz850d@ls))))))) (set! nz8368@parse-library-name (lambda (nz8425@spec) (let ((nz8428@subversion? '#f) (nz842a@subversion-pred '#f) (nz842c@version-pred '#f)) (begin (set! nz8428@subversion? (lambda (nz8509@x) (let ((nz850b@x (nz7074@syntax->datum nz8509@x))) (and (integer? nz850b@x) (exact? nz850b@x) (>= nz850b@x '0))))) (set! nz842a@subversion-pred (lambda (nz84a9@x*) (let ((nz84ab@t nz84a9@x*)) (let ((nz84ad@ls/false (nz6f8e@syntax-dispatch nz84ab@t 'any))) (if (and nz84ad@ls/false (apply (lambda (nz84af@n) (nz8428@subversion? nz84af@n)) nz84ad@ls/false)) (apply (lambda (nz84b1@n) (lambda (nz84b3@x) (= nz84b3@x (nz7074@syntax->datum nz84b1@n)))) nz84ad@ls/false) (let ((nz84b5@t nz84ab@t)) (let ((nz84b7@ls/false (nz6f8e@syntax-dispatch nz84b5@t '(any . each-any)))) (if (and nz84b7@ls/false (apply (lambda (nz84b9@p? nz84ba@sub*) (eq? (nz7074@syntax->datum nz84b9@p?) 'and)) nz84b7@ls/false)) (apply (lambda (nz84bd@p? nz84be@sub*) (let ((nz84c1@p* (map nz842a@subversion-pred nz84be@sub*))) (lambda (nz84c3@x) (for-all (lambda (nz84c5@p) (nz84c5@p nz84c3@x)) nz84c1@p*)))) nz84b7@ls/false) (let ((nz84c7@t nz84b5@t)) (let ((nz84c9@ls/false (nz6f8e@syntax-dispatch nz84c7@t '(any . each-any)))) (if (and nz84c9@ls/false (apply (lambda (nz84cb@p? nz84cc@sub*) (eq? (nz7074@syntax->datum nz84cb@p?) 'or)) nz84c9@ls/false)) (apply (lambda (nz84cf@p? nz84d0@sub*) (let ((nz84d3@p* (map nz842a@subversion-pred nz84d0@sub*))) (lambda (nz84d5@x) (exists (lambda (nz84d7@p) (nz84d7@p nz84d5@x)) nz84d3@p*)))) nz84c9@ls/false) (let ((nz84d9@t nz84c7@t)) (let ((nz84db@ls/false (nz6f8e@syntax-dispatch nz84d9@t '(any any)))) (if (and nz84db@ls/false (apply (lambda (nz84dd@p? nz84de@sub) (eq? (nz7074@syntax->datum nz84dd@p?) 'not)) nz84db@ls/false)) (apply (lambda (nz84e1@p? nz84e2@sub) (let ((nz84e5@p (nz842a@subversion-pred nz84e2@sub))) (lambda (nz84e7@x) (not (nz84e5@p nz84e7@x))))) nz84db@ls/false) (let ((nz84e9@t nz84d9@t)) (let ((nz84eb@ls/false (nz6f8e@syntax-dispatch nz84e9@t '(any any)))) (if (and nz84eb@ls/false (apply (lambda (nz84ed@p? nz84ee@n) (and (eq? (nz7074@syntax->datum nz84ed@p?) '<=) (nz8428@subversion? nz84ee@n))) nz84eb@ls/false)) (apply (lambda (nz84f1@p? nz84f2@n) (lambda (nz84f5@x) (<= nz84f5@x (nz7074@syntax->datum nz84f2@n)))) nz84eb@ls/false) (let ((nz84f7@t nz84e9@t)) (let ((nz84f9@ls/false (nz6f8e@syntax-dispatch nz84f7@t '(any any)))) (if (and nz84f9@ls/false (apply (lambda (nz84fb@p? nz84fc@n) (and (eq? (nz7074@syntax->datum nz84fb@p?) '>=) (nz8428@subversion? nz84fc@n))) nz84f9@ls/false)) (apply (lambda (nz84ff@p? nz8500@n) (lambda (nz8503@x) (>= nz8503@x (nz7074@syntax->datum nz8500@n)))) nz84f9@ls/false) (let ((nz8505@t nz84f7@t)) (let ((nz8507@ls/false (nz6f8e@syntax-dispatch nz8505@t '_))) (if nz8507@ls/false (apply (lambda () (nz706e@syntax-violation 'import '"invalid sub-version spec" nz8425@spec nz84a9@x*)) nz8507@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz8505@t)))))))))))))))))))))))) (set! nz842c@version-pred (lambda (nz8459@x*) (let ((nz845b@t nz8459@x*)) (let ((nz845d@ls/false (nz6f8e@syntax-dispatch nz845b@t '()))) (if nz845d@ls/false (apply (lambda () (lambda (nz845f@x) '#t)) nz845d@ls/false) (let ((nz8461@t nz845b@t)) (let ((nz8463@ls/false (nz6f8e@syntax-dispatch nz8461@t '(any . each-any)))) (if (and nz8463@ls/false (apply (lambda (nz8465@c nz8466@ver*) (eq? (nz7074@syntax->datum nz8465@c) 'and)) nz8463@ls/false)) (apply (lambda (nz8469@c nz846a@ver*) (let ((nz846d@p* (map nz842c@version-pred nz846a@ver*))) (lambda (nz846f@x) (for-all (lambda (nz8471@p) (nz8471@p nz846f@x)) nz846d@p*)))) nz8463@ls/false) (let ((nz8473@t nz8461@t)) (let ((nz8475@ls/false (nz6f8e@syntax-dispatch nz8473@t '(any . each-any)))) (if (and nz8475@ls/false (apply (lambda (nz8477@c nz8478@ver*) (eq? (nz7074@syntax->datum nz8477@c) 'or)) nz8475@ls/false)) (apply (lambda (nz847b@c nz847c@ver*) (let ((nz847f@p* (map nz842c@version-pred nz847c@ver*))) (lambda (nz8481@x) (exists (lambda (nz8483@p) (nz8483@p nz8481@x)) nz847f@p*)))) nz8475@ls/false) (let ((nz8485@t nz8473@t)) (let ((nz8487@ls/false (nz6f8e@syntax-dispatch nz8485@t '(any any)))) (if (and nz8487@ls/false (apply (lambda (nz8489@c nz848a@ver) (eq? (nz7074@syntax->datum nz8489@c) 'not)) nz8487@ls/false)) (apply (lambda (nz848d@c nz848e@ver) (let ((nz8491@p (nz842c@version-pred nz848e@ver))) (lambda (nz8493@x) (not (nz8491@p nz8493@x))))) nz8487@ls/false) (let ((nz8495@t nz8485@t)) (let ((nz8497@ls/false (nz6f8e@syntax-dispatch nz8495@t 'each-any))) (if nz8497@ls/false (apply (lambda (nz8499@sub*) (let ((nz849b@p* (map nz842a@subversion-pred nz8499@sub*))) (lambda (nz849d@x) (let nz84a3@f ((nz849f@p* nz849b@p*) (nz84a0@x nz849d@x)) (if (null? nz849f@p*) '#t (if (null? nz84a0@x) '#f (and ((car nz849f@p*) (car nz84a0@x)) (nz84a3@f (cdr nz849f@p*) (cdr nz84a0@x))))))))) nz8497@ls/false) (let ((nz84a5@t nz8495@t)) (let ((nz84a7@ls/false (nz6f8e@syntax-dispatch nz84a5@t '_))) (if nz84a7@ls/false (apply (lambda () (nz706e@syntax-violation 'import '"invalid version spec" nz8425@spec nz8459@x*)) nz84a7@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz84a5@t))))))))))))))))))))) (let nz842f@f ((nz842d@x nz8425@spec)) (let ((nz8431@t nz842d@x)) (let ((nz8433@ls/false (nz6f8e@syntax-dispatch nz8431@t '(each-any)))) (if nz8433@ls/false (apply (lambda (nz8435@version-spec*) (values '() (nz842c@version-pred nz8435@version-spec*))) nz8433@ls/false) (let ((nz8437@t nz8431@t)) (let ((nz8439@ls/false (nz6f8e@syntax-dispatch nz8437@t '(any . any)))) (if (and nz8439@ls/false (apply (lambda (nz843b@x nz843c@x*) (nz835a@idsyn? nz843b@x)) nz8439@ls/false)) (apply (lambda (nz843f@x nz8440@x*) (call-with-values (lambda () (nz842f@f nz8440@x*)) (lambda (nz8447@nz8444 nz8448@nz8446) (let ((nz844b@pred nz8448@nz8446) (nz844c@name nz8447@nz8444)) (values (cons (nz7074@syntax->datum nz843f@x) nz844c@name) nz844b@pred))))) nz8439@ls/false) (let ((nz844f@t nz8437@t)) (let ((nz8451@ls/false (nz6f8e@syntax-dispatch nz844f@t '()))) (if nz8451@ls/false (apply (lambda () (values '() (lambda (nz8453@x) '#t))) nz8451@ls/false) (let ((nz8455@t nz844f@t)) (let ((nz8457@ls/false (nz6f8e@syntax-dispatch nz8455@t '_))) (if nz8457@ls/false (apply (lambda () (nz706e@syntax-violation '#f '"invalid import spec" nz8425@spec)) nz8457@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz8455@t)))))))))))))))))) (set! nz836a@import-library (lambda (nz8415@spec*) (call-with-values (lambda () (nz8368@parse-library-name nz8415@spec*)) (lambda (nz841b@nz8418 nz841c@nz841a) (let ((nz841f@pred nz841c@nz841a) (nz8420@name nz841b@nz8418)) (begin (if (null? nz8420@name) (nz706e@syntax-violation 'import '"empty library name" nz8415@spec*) (void)) (let ((nz8423@lib (nz6b95@nz69cc@find-library-by-name nz8420@name))) (begin (if (not nz8423@lib) (nz706e@syntax-violation 'import '"cannot find library with required name" nz8420@name) (void)) (if (not (nz841f@pred (nz6b6f@nz6980@library-version nz8423@lib))) (nz706e@syntax-violation 'import '"library does not satisfy version specification" nz8415@spec* nz8423@lib) (void)) ((nz6ffa@imp-collector) nz8423@lib) (nz6b77@nz6990@library-subst nz8423@lib))))))))) (set! nz836c@get-import (lambda (nz8387@spec) (let ((nz8389@t nz8387@spec)) (let ((nz838b@ls/false (nz6f8e@syntax-dispatch nz8389@t '(any . each-any)))) (if (and nz838b@ls/false (apply (lambda (nz838d@x nz838e@x*) (not (memq (nz7074@syntax->datum nz838d@x) '(for rename except only prefix library)))) nz838b@ls/false)) (apply (lambda (nz8391@x nz8392@x*) (nz836a@import-library (cons nz8391@x nz8392@x*))) nz838b@ls/false) (let ((nz8395@t nz8389@t)) (let ((nz8397@ls/false (nz6f8e@syntax-dispatch nz8395@t '(any any . #(each (any any)))))) (if (and nz8397@ls/false (apply (lambda (nz8399@rename nz839a@isp nz839b@old* nz839c@new*) (and (eq? (nz7074@syntax->datum nz8399@rename) 'rename) (for-all nz835a@idsyn? nz839b@old*) (for-all nz835a@idsyn? nz839c@new*))) nz8397@ls/false)) (apply (lambda (nz83a1@rename nz83a2@isp nz83a3@old* nz83a4@new*) (let ((nz83a9@subst (nz836c@get-import nz83a2@isp)) (nz83aa@old* (map nz7074@syntax->datum nz83a3@old*)) (nz83ab@new* (map nz7074@syntax->datum nz83a4@new*))) (let ((nz83af@old-label* (nz8362@find* nz83aa@old* nz83a9@subst))) (let ((nz83b1@subst (nz8364@rem* nz83aa@old* nz83a9@subst))) (nz835e@merge-substs (map cons nz83ab@new* nz83af@old-label*) nz83b1@subst))))) nz8397@ls/false) (let ((nz83b3@t nz8395@t)) (let ((nz83b5@ls/false (nz6f8e@syntax-dispatch nz83b3@t '(any any . each-any)))) (if (and nz83b5@ls/false (apply (lambda (nz83b7@except nz83b8@isp nz83b9@sym*) (and (eq? (nz7074@syntax->datum nz83b7@except) 'except) (for-all nz835a@idsyn? nz83b9@sym*))) nz83b5@ls/false)) (apply (lambda (nz83bd@except nz83be@isp nz83bf@sym*) (let ((nz83c3@subst (nz836c@get-import nz83be@isp))) (nz8364@rem* (map nz7074@syntax->datum nz83bf@sym*) nz83c3@subst))) nz83b5@ls/false) (let ((nz83c5@t nz83b3@t)) (let ((nz83c7@ls/false (nz6f8e@syntax-dispatch nz83c5@t '(any any . each-any)))) (if (and nz83c7@ls/false (apply (lambda (nz83c9@only nz83ca@isp nz83cb@sym*) (and (eq? (nz7074@syntax->datum nz83c9@only) 'only) (for-all nz835a@idsyn? nz83cb@sym*))) nz83c7@ls/false)) (apply (lambda (nz83cf@only nz83d0@isp nz83d1@sym*) (let ((nz83d5@subst (nz836c@get-import nz83d0@isp)) (nz83d6@sym* (map nz7074@syntax->datum nz83d1@sym*))) (let ((nz83d9@sym* (nz8366@remove-dups nz83d6@sym*))) (let ((nz83db@lab* (nz8362@find* nz83d9@sym* nz83d5@subst))) (map cons nz83d9@sym* nz83db@lab*))))) nz83c7@ls/false) (let ((nz83dd@t nz83c5@t)) (let ((nz83df@ls/false (nz6f8e@syntax-dispatch nz83dd@t '(any any any)))) (if (and nz83df@ls/false (apply (lambda (nz83e1@prefix nz83e2@isp nz83e3@p) (and (eq? (nz7074@syntax->datum nz83e1@prefix) 'prefix) (nz835a@idsyn? nz83e3@p))) nz83df@ls/false)) (apply (lambda (nz83e7@prefix nz83e8@isp nz83e9@p) (let ((nz83ed@subst (nz836c@get-import nz83e8@isp)) (nz83ee@prefix (symbol->string (nz7074@syntax->datum nz83e9@p)))) (map (lambda (nz83f1@x) (cons (string->symbol (string-append nz83ee@prefix (symbol->string (car nz83f1@x)))) (cdr nz83f1@x))) nz83ed@subst))) nz83df@ls/false) (let ((nz83f3@t nz83dd@t)) (let ((nz83f5@ls/false (nz6f8e@syntax-dispatch nz83f3@t '(any each-any)))) (if (and nz83f5@ls/false (apply (lambda (nz83f7@library nz83f8@spec*) (eq? (nz7074@syntax->datum nz83f7@library) 'library)) nz83f5@ls/false)) (apply (lambda (nz83fb@library nz83fc@spec*) (nz836a@import-library nz83fc@spec*)) nz83f5@ls/false) (let ((nz83ff@t nz83f3@t)) (let ((nz8401@ls/false (nz6f8e@syntax-dispatch nz83ff@t '(any any . any)))) (if (and nz8401@ls/false (apply (lambda (nz8403@for nz8404@isp nz8405@rest) (eq? (nz7074@syntax->datum nz8403@for) 'for)) nz8401@ls/false)) (apply (lambda (nz8409@for nz840a@isp nz840b@rest) (nz836c@get-import nz840a@isp)) nz8401@ls/false) (let ((nz840f@t nz83ff@t)) (let ((nz8411@ls/false (nz6f8e@syntax-dispatch nz840f@t 'any))) (if nz8411@ls/false (apply (lambda (nz8413@spec) (nz706e@syntax-violation 'import '"invalid import spec" nz8413@spec)) nz8411@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz840f@t))))))))))))))))))))))))))) (set! nz836e@add-imports! (lambda (nz8377@imp nz8378@h) (let ((nz837b@subst (nz836c@get-import nz8377@imp))) (for-each (lambda (nz837d@x) (let ((nz837f@name (car nz837d@x)) (nz8380@label (cdr nz837d@x))) (let ((nz8383@t (hashtable-ref nz8378@h nz837f@name '#f))) (if nz8383@t ((lambda (nz8385@l) (if (not (eq? nz8385@l nz8380@label)) (nz835c@dup-error nz837f@name) (void))) nz8383@t) (hashtable-set! nz8378@h nz837f@name nz8380@label))))) nz837b@subst)))) (lambda (nz836f@imp*) (let nz8375@f ((nz8371@imp* nz836f@imp*) (nz8372@h (make-eq-hashtable))) (if (null? nz8371@imp*) (hashtable-entries nz8372@h) (begin (nz836e@add-imports! (car nz8371@imp*) nz8372@h) (nz8375@f (cdr nz8371@imp*) nz8372@h)))))))) (set! nz8a91@nz6ff0@parse-import-spec* nz6ff0@parse-import-spec*) (set! nz6ff2@make-top-rib (lambda (nz8565@names nz8566@labels) (let ((nz8569@rib (nz6d3b@make-empty-rib))) (begin (vector-for-each (lambda (nz856b@name nz856c@label) (begin (if (not (symbol? nz856b@name)) (error 'make-top-rib '"BUG: not a symbol" nz856b@name) (void)) (nz6d3f@extend-rib/nc! nz8569@rib (make-simple-struct 'stx '5 (list nz856b@name nz6d0b@top-mark* '() '())) nz856c@label))) nz8565@names nz8566@labels) nz8569@rib)))) (set! nz8a92@nz6ff2@make-top-rib nz6ff2@make-top-rib) (set! nz6ff4@make-collector (lambda () (let ((nz856f@ls '())) (lambda nz8573 (let ((nz8574 (length nz8573))) (if (= nz8574 '0) (apply (lambda () nz856f@ls) nz8573) (if (= nz8574 '1) (apply (lambda (nz8571@x) (set! nz856f@ls (nz6d04@set-cons nz8571@x nz856f@ls))) nz8573) (error 'apply '"invalid arg count")))))))) (set! nz8a93@nz6ff4@make-collector nz6ff4@make-collector) (set! nz6ff6@inv-collector (nz68c0@nz679e@make-parameter (lambda nz8575@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (nz8577@x) (begin (if (not (procedure? nz8577@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" nz8577@x) (void)) nz8577@x)))) (set! nz8a94@nz6ff6@inv-collector nz6ff6@inv-collector) (set! nz6ff8@vis-collector (nz68c0@nz679e@make-parameter (lambda nz8579@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (nz857b@x) (begin (if (not (procedure? nz857b@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" nz857b@x) (void)) nz857b@x)))) (set! nz8a95@nz6ff8@vis-collector nz6ff8@vis-collector) (set! nz6ffa@imp-collector (nz68c0@nz679e@make-parameter (lambda nz857d@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (nz857f@x) (begin (if (not (procedure? nz857f@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" nz857f@x) (void)) nz857f@x)))) (set! nz8a96@nz6ffa@imp-collector nz6ffa@imp-collector) (set! nz6ffc@chi-library-internal (lambda (nz8581@e* nz8582@rib nz8583@top?) (call-with-values (lambda () (nz6fe6@chi-body* nz8581@e* '() '() '() '() '() '() '() nz8582@rib nz8583@top?)) (lambda (nz8597@nz8588 nz8598@nz858a nz8599@nz858c nz859a@nz858e nz859b@nz8590 nz859c@nz8592 nz859d@nz8594 nz859e@nz8596) (let ((nz85a7@exp* nz859e@nz8596) (nz85a8@_kwd* nz859d@nz8594) (nz85a9@mod** nz859c@nz8592) (nz85aa@rhs* nz859b@nz8590) (nz85ab@lex* nz859a@nz858e) (nz85ac@mr nz8599@nz858c) (nz85ad@r nz8598@nz858a) (nz85ae@e* nz8597@nz8588)) (values (append (apply append (reverse nz85a9@mod**)) nz85ae@e*) nz85ad@r nz85ac@mr (reverse nz85ab@lex*) (reverse nz85aa@rhs*) nz85a7@exp*)))))) (set! nz8a97@nz6ffc@chi-library-internal nz6ffc@chi-library-internal) (set! nz6ffe@chi-interaction-expr (lambda (nz85b7@e nz85b8@rib nz85b9@r) (call-with-values (lambda () (nz6fe6@chi-body* (list nz85b7@e) nz85b9@r nz85b9@r '() '() '() '() '() nz85b8@rib '#t)) (lambda (nz85cd@nz85be nz85ce@nz85c0 nz85cf@nz85c2 nz85d0@nz85c4 nz85d1@nz85c6 nz85d2@nz85c8 nz85d3@nz85ca nz85d4@nz85cc) (let ((nz85dd@_exp* nz85d4@nz85cc) (nz85de@_kwd* nz85d3@nz85ca) (nz85df@mod** nz85d2@nz85c8) (nz85e0@rhs* nz85d1@nz85c6) (nz85e1@lex* nz85d0@nz85c4) (nz85e2@mr nz85cf@nz85c2) (nz85e3@r nz85ce@nz85c0) (nz85e4@e* nz85cd@nz85be)) (let ((nz85ed@e* (nz6fbe@expand-interaction-rhs*/init* (reverse nz85e1@lex*) (reverse nz85e0@rhs*) (append (apply append (reverse nz85df@mod**)) nz85e4@e*) nz85e3@r nz85e2@mr))) (let ((nz85ef@e (if (null? nz85ed@e*) (nz6ced@nz6c48@build-void) (if (null? (cdr nz85ed@e*)) (car nz85ed@e*) (nz6cec@nz6c46@build-sequence '#f nz85ed@e*))))) (values nz85ef@e nz85e3@r)))))))) (set! nz8a98@nz6ffe@chi-interaction-expr nz6ffe@chi-interaction-expr) (set! nz7000@library-body-expander (lambda (nz85f1@name nz85f2@main-exp* nz85f3@imp* nz85f4@b* nz85f5@top?) (let ((nz85fc@itc '#f)) (begin (set! nz85fc@itc (nz6ff4@make-collector)) (let ((nz8605@nz85fe nz6ffa@imp-collector) (nz8606@nz8600 nz707e@top-level-context) (nz8607@nz8602 nz85fc@itc) (nz8608@nz8604 '#f)) (let ((nz860d@swap (lambda () (begin (let ((nz860f@t (nz8605@nz85fe))) (begin (nz8605@nz85fe nz8607@nz8602) (set! nz8607@nz8602 nz860f@t))) (let ((nz8611@t (nz8606@nz8600))) (begin (nz8606@nz8600 nz8608@nz8604) (set! nz8608@nz8604 nz8611@t))))))) (dynamic-wind nz860d@swap (lambda () (call-with-values (lambda () (nz6ff0@parse-import-spec* nz85f3@imp*)) (lambda (nz8617@nz8614 nz8618@nz8616) (let ((nz861b@subst-labels nz8618@nz8616) (nz861c@subst-names nz8617@nz8614)) (let ((nz861f@rib (nz6ff2@make-top-rib nz861c@subst-names nz861b@subst-labels))) (let ((nz8622@wrap '#f)) (begin (set! nz8622@wrap (lambda (nz869d@x) (make-simple-struct 'stx '5 (list nz869d@x nz6d0b@top-mark* (list nz861f@rib) '())))) (let ((nz8623@b* (map nz8622@wrap nz85f4@b*)) (nz8624@main-exp* (map nz8622@wrap nz85f2@main-exp*)) (nz8625@rtc (nz6ff4@make-collector)) (nz8626@vtc (nz6ff4@make-collector))) (let ((nz8633@nz862c nz6ff6@inv-collector) (nz8634@nz862e nz6ff8@vis-collector) (nz8635@nz8630 nz8625@rtc) (nz8636@nz8632 nz8626@vtc)) (let ((nz863b@swap (lambda () (begin (let ((nz863d@t (nz8633@nz862c))) (begin (nz8633@nz862c nz8635@nz8630) (set! nz8635@nz8630 nz863d@t))) (let ((nz863f@t (nz8634@nz862e))) (begin (nz8634@nz862e nz8636@nz8632) (set! nz8636@nz8632 nz863f@t))))))) (dynamic-wind nz863b@swap (lambda () (call-with-values (lambda () (nz6ffc@chi-library-internal nz8623@b* nz861f@rib nz85f5@top?)) (lambda (nz864d@nz8642 nz864e@nz8644 nz864f@nz8646 nz8650@nz8648 nz8651@nz864a nz8652@nz864c) (let ((nz8659@internal-exp* nz8652@nz864c) (nz865a@rhs* nz8651@nz864a) (nz865b@lex* nz8650@nz8648) (nz865c@mr nz864f@nz8646) (nz865d@r nz864e@nz8644) (nz865e@init* nz864d@nz8642)) (call-with-values (lambda () (nz6fea@parse-exports (append nz8624@main-exp* nz8659@internal-exp*))) (lambda (nz8669@nz8666 nz866a@nz8668) (let ((nz866d@exp-id* nz866a@nz8668) (nz866e@exp-name* nz8669@nz8666)) (begin (nz6d43@seal-rib! nz861f@rib) (let ((nz8671@init* (nz6fac@chi-expr* nz865e@init* nz865d@r nz865c@mr))) (let ((nz8673@rhs* (nz6fc0@chi-rhs* nz865a@rhs* nz865d@r nz865c@mr))) (begin (nz6d45@unseal-rib! nz861f@rib) (let ((nz8675@loc* (map nz6d11@gen-global nz865b@lex*)) (nz8676@export-subst (nz7058@make-export-subst nz866e@exp-name* nz866d@exp-id*))) (let ((nz867a@errstr '#f)) (begin (set! nz867a@errstr '"attempt to export mutated variable") (call-with-values (lambda () (nz705a@make-export-env/macros nz865b@lex* nz8675@loc* nz865d@r)) (lambda (nz8681@nz867c nz8682@nz867e nz8683@nz8680) (let ((nz8687@macro* nz8683@nz8680) (nz8688@global* nz8682@nz867e) (nz8689@export-env nz8681@nz867c)) (begin (for-each (lambda (nz868d@s) (let ((nz868f@name (car nz868d@s)) (nz8690@label (cdr nz868d@s))) (let ((nz8693@p (assq nz8690@label nz8689@export-env))) (if nz8693@p (let ((nz8695@b (cdr nz8693@p))) (let ((nz8697@type (car nz8695@b))) (if (eq? nz8697@type 'mutable) (nz706e@syntax-violation 'export nz867a@errstr nz868f@name) (void)))) (void))))) nz8676@export-subst) (let ((nz8699@invoke-body (nz6cf2@nz6c52@build-library-letrec* '#f nz85f1@name nz865b@lex* nz8675@loc* nz8673@rhs* (if (null? nz8671@init*) (nz6ced@nz6c48@build-void) (nz6cec@nz6c46@build-sequence '#f nz8671@init*)))) (nz869a@invoke-definitions (map nz6ce9@nz6ba5@build-global-define (map cdr nz8688@global*)))) (values (nz85fc@itc) (nz8625@rtc) (nz8626@vtc) (nz6cec@nz6c46@build-sequence '#f (append nz869a@invoke-definitions (list nz8699@invoke-body))) nz8687@macro* nz8676@export-subst nz8689@export-env)))))))))))))))))))) nz863b@swap))))))))))) nz860d@swap))))))) (set! nz8a99@nz7000@library-body-expander nz7000@library-body-expander) (set! nz7002@core-library-expander (lambda (nz869f@e nz86a0@verify-name) (call-with-values (lambda () (nz6fee@parse-library nz869f@e)) (lambda (nz86ab@nz86a4 nz86ac@nz86a6 nz86ad@nz86a8 nz86ae@nz86aa) (let ((nz86b3@b* nz86ae@nz86aa) (nz86b4@imp* nz86ad@nz86a8) (nz86b5@exp* nz86ac@nz86a6) (nz86b6@name* nz86ab@nz86a4)) (call-with-values (lambda () (nz6fec@parse-library-name nz86b6@name*)) (lambda (nz86bf@nz86bc nz86c0@nz86be) (let ((nz86c3@ver nz86c0@nz86be) (nz86c4@name nz86bf@nz86bc)) (begin (nz86a0@verify-name nz86c4@name) (call-with-values (lambda () (nz7000@library-body-expander nz86c4@name nz86b5@exp* nz86b4@imp* nz86b3@b* '#f)) (lambda (nz86d5@nz86c8 nz86d6@nz86ca nz86d7@nz86cc nz86d8@nz86ce nz86d9@nz86d0 nz86da@nz86d2 nz86db@nz86d4) (let ((nz86e3@export-env nz86db@nz86d4) (nz86e4@export-subst nz86da@nz86d2) (nz86e5@visit-code nz86d9@nz86d0) (nz86e6@invoke-code nz86d8@nz86ce) (nz86e7@visit-req* nz86d7@nz86cc) (nz86e8@invoke-req* nz86d6@nz86ca) (nz86e9@imp* nz86d5@nz86c8)) (values nz86c4@name nz86c3@ver nz86e9@imp* nz86e8@invoke-req* nz86e7@visit-req* nz86e6@invoke-code nz86e5@visit-code nz86e4@export-subst nz86e3@export-env))))))))))))) (set! nz8a9a@nz7002@core-library-expander nz7002@core-library-expander) (set! nz7004@parse-top-level-program (lambda (nz86f1@e*) (let ((nz86f3@t nz86f1@e*)) (let ((nz86f5@ls/false (nz6f8e@syntax-dispatch nz86f3@t '((any . each-any) . each-any)))) (if (and nz86f5@ls/false (apply (lambda (nz86f7@import nz86f8@imp* nz86f9@b*) (eq? (nz7074@syntax->datum nz86f7@import) 'import)) nz86f5@ls/false)) (apply (lambda (nz86fd@import nz86fe@imp* nz86ff@b*) (values nz86fe@imp* nz86ff@b*)) nz86f5@ls/false) (let ((nz8703@t nz86f3@t)) (let ((nz8705@ls/false (nz6f8e@syntax-dispatch nz8703@t '((any . any) . any)))) (if (and nz8705@ls/false (apply (lambda (nz8707@import nz8708@x nz8709@y) (eq? (nz7074@syntax->datum nz8707@import) 'import)) nz8705@ls/false)) (apply (lambda (nz870d@import nz870e@x nz870f@y) (nz706e@syntax-violation 'expander '"invalid syntax of top-level program" (nz6d81@syntax-car nz86f1@e*))) nz8705@ls/false) (let ((nz8713@t nz8703@t)) (let ((nz8715@ls/false (nz6f8e@syntax-dispatch nz8713@t '_))) (if nz8715@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) nz8715@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz8713@t)))))))))))) (set! nz8a9b@nz7004@parse-top-level-program nz7004@parse-top-level-program) (set! nz7006@top-level-expander (lambda (nz8717@e*) (call-with-values (lambda () (nz7004@parse-top-level-program nz8717@e*)) (lambda (nz871d@nz871a nz871e@nz871c) (let ((nz8721@b* nz871e@nz871c) (nz8722@imp* nz871d@nz871a)) (call-with-values (lambda () (nz7000@library-body-expander '() '() nz8722@imp* nz8721@b* '#t)) (lambda (nz8733@nz8726 nz8734@nz8728 nz8735@nz872a nz8736@nz872c nz8737@nz872e nz8738@nz8730 nz8739@nz8732) (let ((nz8741@export-env nz8739@nz8732) (nz8742@export-subst nz8738@nz8730) (nz8743@visit-code nz8737@nz872e) (nz8744@invoke-code nz8736@nz872c) (nz8745@visit-req* nz8735@nz872a) (nz8746@invoke-req* nz8734@nz8728) (nz8747@imp* nz8733@nz8726)) (values nz8746@invoke-req* nz8744@invoke-code))))))))) (set! nz8a9c@nz7006@top-level-expander nz7006@top-level-expander) (set! nz7008@rp (nz68bd@nz6798@make-record-printer 'env (lambda (nz874f@x nz8750@p nz8751@wr) (display '"#<environment>" nz8750@p)))) (set! nz8a9d@nz7008@rp nz7008@rp) (set! nz7012@env? (lambda (nz8755@x) (and (simple-struct? nz8755@x) (eq? (simple-struct-name nz8755@x) 'env)))) (set! nz8a9e@nz7012@env? nz7012@env?) (set! nz7014@env-names (lambda (nz8757@x) (simple-struct-ref nz8757@x '0))) (set! nz8a9f@nz7014@env-names nz7014@env-names) (set! nz7016@set-env-names! (lambda (nz8759@x nz875a@val) (simple-struct-set! nz8759@x '0 nz875a@val))) (set! nz8aa0@nz7016@set-env-names! nz7016@set-env-names!) (set! nz7018@env-labels (lambda (nz875d@x) (simple-struct-ref nz875d@x '1))) (set! nz8aa1@nz7018@env-labels nz7018@env-labels) (set! nz701a@set-env-labels! (lambda (nz875f@x nz8760@val) (simple-struct-set! nz875f@x '1 nz8760@val))) (set! nz8aa2@nz701a@set-env-labels! nz701a@set-env-labels!) (set! nz701c@env-itc (lambda (nz8763@x) (simple-struct-ref nz8763@x '2))) (set! nz8aa3@nz701c@env-itc nz701c@env-itc) (set! nz701e@set-env-itc! (lambda (nz8765@x nz8766@val) (simple-struct-set! nz8765@x '2 nz8766@val))) (set! nz8aa4@nz701e@set-env-itc! nz701e@set-env-itc!) (set! nz7020@dummy '3) (set! nz8aa5@nz7020@dummy nz7020@dummy) (set! nz7022@rp (nz68bd@nz6798@make-record-printer 'interaction-env (lambda (nz8769@x nz876a@p nz876b@wr) (display '"#<environment>" nz876a@p)))) (set! nz8aa6@nz7022@rp nz7022@rp) (set! nz702c@interaction-env? (lambda (nz876f@x) (and (simple-struct? nz876f@x) (eq? (simple-struct-name nz876f@x) 'interaction-env)))) (set! nz8aa7@nz702c@interaction-env? nz702c@interaction-env?) (set! nz702e@interaction-env-rib (lambda (nz8771@x) (simple-struct-ref nz8771@x '0))) (set! nz8aa8@nz702e@interaction-env-rib nz702e@interaction-env-rib) (set! nz7030@set-interaction-env-rib! (lambda (nz8773@x nz8774@val) (simple-struct-set! nz8773@x '0 nz8774@val))) (set! nz8aa9@nz7030@set-interaction-env-rib! nz7030@set-interaction-env-rib!) (set! nz7032@interaction-env-r (lambda (nz8777@x) (simple-struct-ref nz8777@x '1))) (set! nz8aaa@nz7032@interaction-env-r nz7032@interaction-env-r) (set! nz7034@set-interaction-env-r! (lambda (nz8779@x nz877a@val) (simple-struct-set! nz8779@x '1 nz877a@val))) (set! nz8aab@nz7034@set-interaction-env-r! nz7034@set-interaction-env-r!) (set! nz7036@interaction-env-locs (lambda (nz877d@x) (simple-struct-ref nz877d@x '2))) (set! nz8aac@nz7036@interaction-env-locs nz7036@interaction-env-locs) (set! nz7038@set-interaction-env-locs! (lambda (nz877f@x nz8780@val) (simple-struct-set! nz877f@x '2 nz8780@val))) (set! nz8aad@nz7038@set-interaction-env-locs! nz7038@set-interaction-env-locs!) (set! nz703a@dummy '3) (set! nz8aae@nz703a@dummy nz703a@dummy) (set! nz703c@interaction-environment-symbols (lambda () (nz7044@environment-symbols (nz707c@interaction-environment)))) (set! nz8aaf@nz703c@interaction-environment-symbols nz703c@interaction-environment-symbols) (set! nz703e@environment-bindings (lambda (nz8783@e) (vector->list (vector-map (lambda (nz8785@name nz8786@label) (nz7040@parse-binding (cons nz8785@name (nz6b9b@nz69d8@imported-label->binding nz8786@label)))) (nz7014@env-names nz8783@e) (nz7018@env-labels nz8783@e))))) (set! nz8ab0@nz703e@environment-bindings nz703e@environment-bindings) (set! nz7040@parse-binding (lambda (nz8789@b) (cons (car nz8789@b) (let ((nz878b@t (cadr nz8789@b))) (if (memv nz878b@t '(core-prim global)) 'procedure (if (memv nz878b@t '(core-macro macro global-macro)) 'syntax (if (memv nz878b@t '($core-rtd)) 'record (if (eq? (car nz8789@b) (cadr nz8789@b)) 'syntax 'unknown)))))))) (set! nz8ab1@nz7040@parse-binding nz7040@parse-binding) (set! nz7042@environment? (lambda (nz878d@x) (or (nz7012@env? nz878d@x) (nz702c@interaction-env? nz878d@x)))) (set! nz8ab2@nz7042@environment? nz7042@environment?) (set! nz7044@environment-symbols (lambda (nz878f@x) (if (nz7012@env? nz878f@x) (vector->list (nz7014@env-names nz878f@x)) (if (nz702c@interaction-env? nz878f@x) (map values (nz6d25@rib-sym* (nz702e@interaction-env-rib nz878f@x))) (assertion-violation 'environment-symbols '"not an environment" nz878f@x))))) (set! nz8ab3@nz7044@environment-symbols nz7044@environment-symbols) (set! nz7046@environment (lambda nz8791@imp* (let ((nz8793@itc (nz6ff4@make-collector))) (let ((nz8799@nz8796 nz6ffa@imp-collector) (nz879a@nz8798 nz8793@itc)) (let ((nz879d@swap (lambda () (let ((nz879f@t (nz8799@nz8796))) (begin (nz8799@nz8796 nz879a@nz8798) (set! nz879a@nz8798 nz879f@t)))))) (dynamic-wind nz879d@swap (lambda () (call-with-values (lambda () (nz6ff0@parse-import-spec* nz8791@imp*)) (lambda (nz87a5@nz87a2 nz87a6@nz87a4) (let ((nz87a9@subst-labels nz87a6@nz87a4) (nz87aa@subst-names nz87a5@nz87a2)) (make-simple-struct 'env '4 (list nz87aa@subst-names nz87a9@subst-labels nz8793@itc)))))) nz879d@swap)))))) (set! nz8ab4@nz7046@environment nz7046@environment) (set! nz7048@null-environment (lambda (nz87ad@n) (begin (if (not (eqv? nz87ad@n '5)) (assertion-violation 'null-environment '"not 5" nz87ad@n) (void)) (nz7046@environment '(psyntax null-environment-5))))) (set! nz8ab5@nz7048@null-environment nz7048@null-environment) (set! nz704a@scheme-report-environment (lambda (nz87af@n) (begin (if (not (eqv? nz87af@n '5)) (assertion-violation 'scheme-report-environment '"not 5" nz87af@n) (void)) (nz7046@environment '(psyntax scheme-report-environment-5))))) (set! nz8ab6@nz704a@scheme-report-environment nz704a@scheme-report-environment) (set! nz704c@expand (lambda (nz87b1@x nz87b2@env) (if (nz7012@env? nz87b2@env) (let ((nz87b5@rib (nz6ff2@make-top-rib (nz7014@env-names nz87b2@env) (nz7018@env-labels nz87b2@env)))) (let ((nz87b7@x (make-simple-struct 'stx '5 (list nz87b1@x nz6d0b@top-mark* (list nz87b5@rib) '()))) (nz87b8@itc (nz701c@env-itc nz87b2@env)) (nz87b9@rtc (nz6ff4@make-collector)) (nz87ba@vtc (nz6ff4@make-collector))) (let ((nz87bf@x (let ((nz87d1@nz87c2 nz707e@top-level-context) (nz87d2@nz87c4 nz6ff6@inv-collector) (nz87d3@nz87c6 nz6ff8@vis-collector) (nz87d4@nz87c8 nz6ffa@imp-collector) (nz87d5@nz87ca '#f) (nz87d6@nz87cc nz87b9@rtc) (nz87d7@nz87ce nz87ba@vtc) (nz87d8@nz87d0 nz87b8@itc)) (let ((nz87e1@swap (lambda () (begin (let ((nz87e3@t (nz87d1@nz87c2))) (begin (nz87d1@nz87c2 nz87d5@nz87ca) (set! nz87d5@nz87ca nz87e3@t))) (let ((nz87e5@t (nz87d2@nz87c4))) (begin (nz87d2@nz87c4 nz87d6@nz87cc) (set! nz87d6@nz87cc nz87e5@t))) (let ((nz87e7@t (nz87d3@nz87c6))) (begin (nz87d3@nz87c6 nz87d7@nz87ce) (set! nz87d7@nz87ce nz87e7@t))) (let ((nz87e9@t (nz87d4@nz87c8))) (begin (nz87d4@nz87c8 nz87d8@nz87d0) (set! nz87d8@nz87d0 nz87e9@t))))))) (dynamic-wind nz87e1@swap (lambda () (nz6fb0@chi-expr nz87b7@x '() '())) nz87e1@swap))))) (begin (nz6d43@seal-rib! nz87b5@rib) (values nz87bf@x (nz87b9@rtc)))))) (if (nz702c@interaction-env? nz87b2@env) (let ((nz87eb@rib (nz702e@interaction-env-rib nz87b2@env)) (nz87ec@r (nz7032@interaction-env-r nz87b2@env)) (nz87ed@rtc (nz6ff4@make-collector))) (let ((nz87f1@x (make-simple-struct 'stx '5 (list nz87b1@x nz6d0b@top-mark* (list nz87eb@rib) '())))) (call-with-values (lambda () (let ((nz8807@nz87f8 nz707e@top-level-context) (nz8808@nz87fa nz6ff6@inv-collector) (nz8809@nz87fc nz6ff8@vis-collector) (nz880a@nz87fe nz6ffa@imp-collector) (nz880b@nz8800 nz87b2@env) (nz880c@nz8802 nz87ed@rtc) (nz880d@nz8804 (nz6ff4@make-collector)) (nz880e@nz8806 (nz6ff4@make-collector))) (let ((nz8817@swap (lambda () (begin (let ((nz8819@t (nz8807@nz87f8))) (begin (nz8807@nz87f8 nz880b@nz8800) (set! nz880b@nz8800 nz8819@t))) (let ((nz881b@t (nz8808@nz87fa))) (begin (nz8808@nz87fa nz880c@nz8802) (set! nz880c@nz8802 nz881b@t))) (let ((nz881d@t (nz8809@nz87fc))) (begin (nz8809@nz87fc nz880d@nz8804) (set! nz880d@nz8804 nz881d@t))) (let ((nz881f@t (nz880a@nz87fe))) (begin (nz880a@nz87fe nz880e@nz8806) (set! nz880e@nz8806 nz881f@t))))))) (dynamic-wind nz8817@swap (lambda () (nz6ffe@chi-interaction-expr nz87f1@x nz87eb@rib nz87ec@r)) nz8817@swap)))) (lambda (nz8821@nz87f4 nz8822@nz87f6) (let ((nz8825@r^ nz8822@nz87f6) (nz8826@e nz8821@nz87f4)) (begin (nz7034@set-interaction-env-r! nz87b2@env nz8825@r^) (values nz8826@e (nz87ed@rtc)))))))) (assertion-violation 'expand '"not an environment" nz87b2@env))))) (set! nz8ab7@nz704c@expand nz704c@expand) (set! nz704e@eval (lambda (nz8829@x nz882a@env) (begin (if (not (nz7042@environment? nz882a@env)) (error 'eval '"not an environment" nz882a@env) (void)) (call-with-values (lambda () (nz704c@expand nz8829@x nz882a@env)) (lambda (nz8831@nz882e nz8832@nz8830) (let ((nz8835@invoke-req* nz8832@nz8830) (nz8836@x nz8831@nz882e)) (begin (for-each nz6b9c@nz69da@invoke-library nz8835@invoke-req*) (eval-core (nz6916@nz68ce@expanded->core nz8836@x))))))))) (set! nz8ab8@nz704e@eval nz704e@eval) (set! nz7050@library-expander (lambda nz88a7 (let ((nz88a8 (length nz88a7))) (if (= nz88a8 '3) (apply (lambda (nz8839@x nz883a@filename nz883b@verify-name) (let ((nz8840@build-visit-code '#f) (nz8842@visit! '#f)) (begin (set! nz8840@build-visit-code (lambda (nz8895@macro*) (if (null? nz8895@macro*) (nz6ced@nz6c48@build-void) (nz6cec@nz6c46@build-sequence '#f (map (lambda (nz8897@x) (let ((nz8899@loc (car nz8897@x)) (nz889a@src (cddr nz8897@x))) (list 'set! nz8899@loc nz889a@src))) nz8895@macro*))))) (set! nz8842@visit! (lambda (nz888d@macro*) (for-each (lambda (nz888f@x) (let ((nz8891@loc (car nz888f@x)) (nz8892@proc (cadr nz888f@x))) (set-symbol-value! nz8891@loc nz8892@proc))) nz888d@macro*))) (call-with-values (lambda () (nz7002@core-library-expander nz8839@x nz883b@verify-name)) (lambda (nz8855@nz8844 nz8856@nz8846 nz8857@nz8848 nz8858@nz884a nz8859@nz884c nz885a@nz884e nz885b@nz8850 nz885c@nz8852 nz885d@nz8854) (let ((nz8867@export-env nz885d@nz8854) (nz8868@export-subst nz885c@nz8852) (nz8869@macro* nz885b@nz8850) (nz886a@invoke-code nz885a@nz884e) (nz886b@vis* nz8859@nz884c) (nz886c@inv* nz8858@nz884a) (nz886d@imp* nz8857@nz8848) (nz886e@ver nz8856@nz8846) (nz886f@name nz8855@nz8844)) (let ((nz8879@id (gensym)) (nz887a@name nz886f@name) (nz887b@ver nz886e@ver) (nz887c@imp* (map nz6ba1@nz69e4@library-spec nz886d@imp*)) (nz887d@vis* (map nz6ba1@nz69e4@library-spec nz886b@vis*)) (nz887e@inv* (map nz6ba1@nz69e4@library-spec nz886c@inv*)) (nz887f@visit-proc (lambda () (nz8842@visit! nz8869@macro*))) (nz8880@invoke-proc (lambda () (eval-core (nz6916@nz68ce@expanded->core nz886a@invoke-code)))) (nz8881@visit-code (nz8840@build-visit-code nz8869@macro*)) (nz8882@invoke-code nz886a@invoke-code)) (begin (nz6b9a@nz69d6@install-library nz8879@id nz887a@name nz887b@ver nz887c@imp* nz887d@vis* nz887e@inv* nz8868@export-subst nz8867@export-env nz887f@visit-proc nz8880@invoke-proc nz8881@visit-code nz8882@invoke-code '#t nz883a@filename) (values nz8879@id nz887a@name nz887b@ver nz887c@imp* nz887d@vis* nz887e@inv* nz8882@invoke-code nz8881@visit-code nz8868@export-subst nz8867@export-env))))))))) nz88a7) (if (= nz88a8 '2) (apply (lambda (nz889d@x nz889e@filename) (nz7050@library-expander nz889d@x nz889e@filename (lambda (nz88a1@x) (values)))) nz88a7) (if (= nz88a8 '1) (apply (lambda (nz88a3@x) (nz7050@library-expander nz88a3@x '#f (lambda (nz88a5@x) (values)))) nz88a7) (error 'apply '"invalid arg count"))))))) (set! nz8ab9@nz7050@library-expander nz7050@library-expander) (set! nz7052@boot-library-expand (lambda (nz88a9@x) (call-with-values (lambda () (nz7050@library-expander nz88a9@x)) (lambda (nz88bf@nz88ac nz88c0@nz88ae nz88c1@nz88b0 nz88c2@nz88b2 nz88c3@nz88b4 nz88c4@nz88b6 nz88c5@nz88b8 nz88c6@nz88ba nz88c7@nz88bc nz88c8@nz88be) (let ((nz88d3@export-env nz88c8@nz88be) (nz88d4@export-subst nz88c7@nz88bc) (nz88d5@visit-code nz88c6@nz88ba) (nz88d6@invoke-code nz88c5@nz88b8) (nz88d7@inv* nz88c4@nz88b6) (nz88d8@vis* nz88c3@nz88b4) (nz88d9@imp* nz88c2@nz88b2) (nz88da@ver nz88c1@nz88b0) (nz88db@name nz88c0@nz88ae) (nz88dc@id nz88bf@nz88ac)) (values nz88db@name nz88d6@invoke-code nz88d4@export-subst nz88d3@export-env)))))) (set! nz8aba@nz7052@boot-library-expand nz7052@boot-library-expand) (set! nz7054@rev-map-append (lambda (nz88e7@f nz88e8@ls nz88e9@ac) (if (null? nz88e8@ls) nz88e9@ac (nz7054@rev-map-append nz88e7@f (cdr nz88e8@ls) (cons (nz88e7@f (car nz88e8@ls)) nz88e9@ac))))) (set! nz8abb@nz7054@rev-map-append nz7054@rev-map-append) (set! nz7056@build-exports (lambda (nz88ed@lex*+loc* nz88ee@init*) (nz6cec@nz6c46@build-sequence '#f (cons (nz6ced@nz6c48@build-void) (nz7054@rev-map-append (lambda (nz88f1@x) (list 'set! (cdr nz88f1@x) (car nz88f1@x))) nz88ed@lex*+loc* nz88ee@init*))))) (set! nz8abc@nz7056@build-exports nz7056@build-exports) (set! nz7058@make-export-subst (lambda (nz88f3@name* nz88f4@id*) (map (lambda (nz88f7@name nz88f8@id) (let ((nz88fb@label (nz6d9d@id->label nz88f8@id))) (begin (if (not nz88fb@label) (nz706e@syntax-violation '#f '"cannot export unbound identifier" nz88f8@id) (void)) (cons nz88f7@name nz88fb@label)))) nz88f3@name* nz88f4@id*))) (set! nz8abd@nz7058@make-export-subst nz7058@make-export-subst) (set! nz705a@make-export-env/macros (lambda (nz88fd@lex* nz88fe@loc* nz88ff@r) (let ((nz8904@lookup '#f)) (begin (set! nz8904@lookup (lambda (nz8921@x) (let nz8929@f ((nz8923@x nz8921@x) (nz8924@lex* nz88fd@lex*) (nz8925@loc* nz88fe@loc*)) (if (pair? nz8924@lex*) (if (eq? nz8923@x (car nz8924@lex*)) (car nz8925@loc*) (nz8929@f nz8923@x (cdr nz8924@lex*) (cdr nz8925@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let nz890d@f ((nz8905@r nz88ff@r) (nz8906@env '()) (nz8907@global* '()) (nz8908@macro* '())) (if (null? nz8905@r) (values nz8906@env nz8907@global* nz8908@macro*) (let ((nz890f@x (car nz8905@r))) (let ((nz8911@label (car nz890f@x)) (nz8912@b (cdr nz890f@x))) (let ((nz8915@t (nz6da3@binding-type nz8912@b))) (if (memv nz8915@t '(lexical)) (let ((nz8917@v (nz6da5@binding-value nz8912@b))) (let ((nz8919@loc (nz8904@lookup (nz6f18@lexical-var nz8917@v))) (nz891a@type (if (nz6f1a@lexical-mutable? nz8917@v) 'mutable 'global))) (nz890d@f (cdr nz8905@r) (cons (cons* nz8911@label nz891a@type nz8919@loc) nz8906@env) (cons (cons (nz6f18@lexical-var nz8917@v) nz8919@loc) nz8907@global*) nz8908@macro*))) (if (memv nz8915@t '(local-macro)) (let ((nz891d@loc (gensym))) (nz890d@f (cdr nz8905@r) (cons (cons* nz8911@label 'global-macro nz891d@loc) nz8906@env) nz8907@global* (cons (cons nz891d@loc (nz6da5@binding-value nz8912@b)) nz8908@macro*))) (if (memv nz8915@t '(local-macro!)) (let ((nz891f@loc (gensym))) (nz890d@f (cdr nz8905@r) (cons (cons* nz8911@label 'global-macro! nz891f@loc) nz8906@env) nz8907@global* (cons (cons nz891f@loc (nz6da5@binding-value nz8912@b)) nz8908@macro*))) (if (memv nz8915@t '($rtd $module)) (nz890d@f (cdr nz8905@r) (cons nz890f@x nz8906@env) nz8907@global* nz8908@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (nz6da3@binding-type nz8912@b) (nz6da5@binding-value nz8912@b))))))))))))))) (set! nz8abe@nz705a@make-export-env/macros nz705a@make-export-env/macros) (set! nz705c@generate-temporaries (lambda (nz892b@ls) (let ((nz892d@t nz892b@ls)) (let ((nz892f@ls/false (nz6f8e@syntax-dispatch nz892d@t 'each-any))) (if nz892f@ls/false (apply (lambda (nz8931@ls) (map (lambda (nz8933@x) (make-simple-struct 'stx '5 (list (let ((nz8935@x (nz7074@syntax->datum nz8933@x))) (if (or (symbol? nz8935@x) (string? nz8935@x)) (gensym nz8935@x) (gensym 't))) nz6d0b@top-mark* '() '()))) nz8931@ls)) nz892f@ls/false) (let ((nz8937@t nz892d@t)) (let ((nz8939@ls/false (nz6f8e@syntax-dispatch nz8937@t '_))) (if nz8939@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) nz8939@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz8937@t))))))))) (set! nz8abf@nz705c@generate-temporaries nz705c@generate-temporaries) (set! nz705e@free-identifier=? (lambda (nz893b@x nz893c@y) (if (nz6d87@id? nz893b@x) (if (nz6d87@id? nz893c@y) (nz6d8d@free-id=? nz893b@x nz893c@y) (assertion-violation 'free-identifier=? '"not an identifier" nz893c@y)) (assertion-violation 'free-identifier=? '"not an identifier" nz893b@x)))) (set! nz8ac0@nz705e@free-identifier=? nz705e@free-identifier=?) (set! nz7060@bound-identifier=? (lambda (nz893f@x nz8940@y) (if (nz6d87@id? nz893f@x) (if (nz6d87@id? nz8940@y) (nz6d8b@bound-id=? nz893f@x nz8940@y) (assertion-violation 'bound-identifier=? '"not an identifier" nz8940@y)) (assertion-violation 'bound-identifier=? '"not an identifier" nz893f@x)))) (set! nz8ac1@nz7060@bound-identifier=? nz7060@bound-identifier=?) (set! nz7062@make-source-condition (lambda (nz8943@x) (let ((nz894d@nz8948 '#f) (nz894f@nz894a '#f) (nz8951@nz8949 '#f) (nz8954@nz8947 '#f) (nz8956@make-source-condition '#f) (nz8958@nz8945 '#f) (nz895a@nz8946 '#f) (nz895c@source-condition? '#f) (nz895e@source-filename '#f) (nz8960@source-character '#f)) (begin (set! nz894d@nz8948 (make-record-type-descriptor '&source-information nz8da3@nz8aea@&condition-rtd 'nz894b '#f '#f '#((immutable file-name) (immutable character)))) (set! nz894f@nz894a '#f) (set! nz8951@nz8949 (make-record-constructor-descriptor nz894d@nz8948 nz8da4@nz8aec@&condition-rcd nz894f@nz894a)) (set! nz8954@nz8947 (record-predicate nz894d@nz8948)) (set! nz8956@make-source-condition (record-constructor nz8951@nz8949)) (set! nz8958@nz8945 (record-accessor nz894d@nz8948 '0)) (set! nz895a@nz8946 (record-accessor nz894d@nz8948 '1)) (set! nz895c@source-condition? (condition-predicate nz894d@nz8948)) (set! nz895e@source-filename (condition-accessor nz894d@nz8948 nz8958@nz8945)) (set! nz8960@source-character (condition-accessor nz894d@nz8948 nz895a@nz8946)) (if (pair? nz8943@x) (nz8956@make-source-condition (car nz8943@x) (cdr nz8943@x)) (condition)))))) (set! nz8ac2@nz7062@make-source-condition nz7062@make-source-condition) (set! nz7064@extract-position-condition (lambda (nz8961@x) (nz7062@make-source-condition (nz7066@expression-position nz8961@x)))) (set! nz8ac3@nz7064@extract-position-condition nz7064@extract-position-condition) (set! nz7066@expression-position (lambda (nz8963@x) (and (nz6d53@stx? nz8963@x) (let ((nz8965@x (nz6d55@stx-expr nz8963@x))) (and (nz68b4@nz6786@annotation? nz8965@x) (nz68b5@nz6788@annotation-source nz8965@x)))))) (set! nz8ac4@nz7066@expression-position nz7066@expression-position) (set! nz7068@assertion-error (lambda (nz8967@expr nz8968@pos) (raise (condition (nz8dd3@nz8bae@make-assertion-violation) (nz8de5@nz8be0@make-who-condition 'assert) (nz8da9@nz8b41@make-message-condition '"assertion failed") (nz8ddb@nz8bc5@make-irritants-condition (list nz8967@expr)) (nz7062@make-source-condition nz8968@pos))))) (set! nz8ac5@nz7068@assertion-error nz7068@assertion-error) (set! nz706a@syntax-error (lambda (nz896b@x . nz896d@args) (begin (if (not (for-all string? nz896d@args)) (assertion-violation 'syntax-error '"invalid argument" nz896d@args) (void)) (raise (condition (nz8da9@nz8b41@make-message-condition (if (null? nz896d@args) '"invalid syntax" (apply string-append nz896d@args))) (nz8e07@nz8c3c@make-syntax-violation (nz7074@syntax->datum nz896b@x) '#f) (nz7064@extract-position-condition nz896b@x)))))) (set! nz8ac6@nz706a@syntax-error nz706a@syntax-error) (set! nz706c@syntax-violation* (lambda (nz896f@who nz8970@msg nz8971@form nz8972@condition-object) (begin (if (not (string? nz8970@msg)) (assertion-violation 'syntax-violation '"message is not a string" nz8970@msg) (void)) (let ((nz8977@who (if (or (string? nz896f@who) (symbol? nz896f@who)) nz896f@who (if (not nz896f@who) (let ((nz8979@t nz8971@form)) (let ((nz897b@ls/false (nz6f8e@syntax-dispatch nz8979@t 'any))) (if (and nz897b@ls/false (apply (lambda (nz897d@id) (nz6d87@id? nz897d@id)) nz897b@ls/false)) (apply (lambda (nz897f@id) (nz7074@syntax->datum nz897f@id)) nz897b@ls/false) (let ((nz8981@t nz8979@t)) (let ((nz8983@ls/false (nz6f8e@syntax-dispatch nz8981@t '(any . any)))) (if (and nz8983@ls/false (apply (lambda (nz8985@id nz8986@rest) (nz6d87@id? nz8985@id)) nz8983@ls/false)) (apply (lambda (nz8989@id nz898a@rest) (nz7074@syntax->datum nz8989@id)) nz8983@ls/false) (let ((nz898d@t nz8981@t)) (let ((nz898f@ls/false (nz6f8e@syntax-dispatch nz898d@t '_))) (if nz898f@ls/false (apply (lambda () '#f) nz898f@ls/false) (nz706e@syntax-violation '#f '"invalid syntax" nz898d@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" nz896f@who))))) (raise (condition (if nz8977@who (nz8de5@nz8be0@make-who-condition nz8977@who) (condition)) (nz8da9@nz8b41@make-message-condition nz8970@msg) nz8972@condition-object (nz7064@extract-position-condition nz8971@form))))))) (set! nz8ac7@nz706c@syntax-violation* nz706c@syntax-violation*) (set! nz706e@syntax-violation (lambda nz899f (let ((nz89a0 (length nz899f))) (if (= nz89a0 '3) (apply (lambda (nz8991@who nz8992@msg nz8993@form) (nz706e@syntax-violation nz8991@who nz8992@msg nz8993@form '#f)) nz899f) (if (= nz89a0 '4) (apply (lambda (nz8997@who nz8998@msg nz8999@form nz899a@subform) (nz706c@syntax-violation* nz8997@who nz8998@msg nz8999@form (nz8e07@nz8c3c@make-syntax-violation (nz7074@syntax->datum nz8999@form) (nz7074@syntax->datum nz899a@subform)))) nz899f) (error 'apply '"invalid arg count")))))) (set! nz8ac8@nz706e@syntax-violation nz706e@syntax-violation) (set! nz7070@identifier? (lambda (nz89a1@x) (nz6d87@id? nz89a1@x))) (set! nz8ac9@nz7070@identifier? nz7070@identifier?) (set! nz7072@datum->syntax (lambda (nz89a3@id nz89a4@datum) (if (nz6d87@id? nz89a3@id) (nz6d67@datum->stx nz89a3@id nz89a4@datum) (assertion-violation 'datum->syntax '"not an identifier" nz89a3@id)))) (set! nz8aca@nz7072@datum->syntax nz7072@datum->syntax) (set! nz7074@syntax->datum (lambda (nz89a7@x) (nz6d9b@stx->datum nz89a7@x))) (set! nz8acb@nz7074@syntax->datum nz7074@syntax->datum) (set! nz7076@ungensym-all (lambda (nz89a9@code) (if (pair? nz89a9@code) (cons (nz7076@ungensym-all (car nz89a9@code)) (nz7076@ungensym-all (cdr nz89a9@code))) (if (symbol? nz89a9@code) (ungensym nz89a9@code) nz89a9@code)))) (set! nz8acc@nz7076@ungensym-all nz7076@ungensym-all) (set! nz7078@compile-r6rs-top-level (lambda (nz89ab@x*) (call-with-values (lambda () (nz7006@top-level-expander nz89ab@x*)) (lambda (nz89b1@nz89ae nz89b2@nz89b0) (let ((nz89b5@invoke-code nz89b2@nz89b0) (nz89b6@lib* nz89b1@nz89ae)) (lambda () (begin (for-each nz6b9c@nz69da@invoke-library nz89b6@lib*) (let ((nz89b9@expanded (nz6916@nz68ce@expanded->core nz89b5@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (nz7076@ungensym-all nz89b9@expanded)) (void)) (eval-core nz89b9@expanded)))))))))) (set! nz8acd@nz7078@compile-r6rs-top-level nz7078@compile-r6rs-top-level) (set! nz707a@pre-compile-r6rs-top-level (lambda (nz89bb@x*) (call-with-values (lambda () (nz7006@top-level-expander nz89bb@x*)) (lambda (nz89c1@nz89be nz89c2@nz89c0) (let ((nz89c5@invoke-code nz89c2@nz89c0) (nz89c6@lib* nz89c1@nz89be)) (begin (for-each nz6b9c@nz69da@invoke-library nz89c6@lib*) (nz68be@nz679a@compile-core (nz6916@nz68ce@expanded->core nz89c5@invoke-code)))))))) (set! nz8ace@nz707a@pre-compile-r6rs-top-level nz707a@pre-compile-r6rs-top-level) (set! nz707c@interaction-environment (let ((nz89c9@the-env '#f)) (lambda () (or nz89c9@the-env (let ((nz89cb@lib (nz6b95@nz69cc@find-library-by-name '(mosh interaction))) (nz89cc@rib (nz6d3b@make-empty-rib))) (begin (let ((nz89cf@subst (nz6b77@nz6990@library-subst nz89cb@lib))) (begin (nz6d27@set-rib-sym*! nz89cc@rib (map car nz89cf@subst)) (nz6d2b@set-rib-mark**! nz89cc@rib (map (lambda (nz89d1@x) nz6d0b@top-mark*) nz89cf@subst)) (nz6d2f@set-rib-label*! nz89cc@rib (map cdr nz89cf@subst)))) (let ((nz89d3@env (make-simple-struct 'interaction-env '4 (list nz89cc@rib '() '())))) (begin (set! nz89c9@the-env nz89d3@env) nz89d3@env)))))))) (set! nz8acf@nz707c@interaction-environment nz707c@interaction-environment) (set! nz707e@top-level-context (nz68c0@nz679e@make-parameter '#f)) (set! nz8ad0@nz707e@top-level-context nz707e@top-level-context) (nz6b92@nz69c6@current-library-expander nz7050@library-expander))
(begin (set! nz8adf@nz8ada (unspecified)) (set! nz8ae1@nz8adc (unspecified)) (set! nz8ae3@nz8adb (unspecified)) (set! nz8ae6@&condition? (unspecified)) (set! nz8ae8@make-&condition (unspecified)) (set! nz8aea@&condition-rtd (unspecified)) (set! nz8aec@&condition-rcd (unspecified)) (set! nz8b38@nz8b33 (unspecified)) (set! nz8b3a@nz8b35 (unspecified)) (set! nz8b3c@nz8b34 (unspecified)) (set! nz8b3f@p? (unspecified)) (set! nz8b41@make-message-condition (unspecified)) (set! nz8b43@nz8b32 (unspecified)) (set! nz8b45@message-condition? (unspecified)) (set! nz8b47@condition-message (unspecified)) (set! nz8b49@&message-rtd (unspecified)) (set! nz8b4b@&message-rcd (unspecified)) (set! nz8b51@nz8b4c (unspecified)) (set! nz8b53@nz8b4e (unspecified)) (set! nz8b55@nz8b4d (unspecified)) (set! nz8b58@p? (unspecified)) (set! nz8b5a@make-warning (unspecified)) (set! nz8b5c@warning? (unspecified)) (set! nz8b5e@&warning-rtd (unspecified)) (set! nz8b60@&warning-rcd (unspecified)) (set! nz8b66@nz8b61 (unspecified)) (set! nz8b68@nz8b63 (unspecified)) (set! nz8b6a@nz8b62 (unspecified)) (set! nz8b6d@p? (unspecified)) (set! nz8b6f@make-serious-condition (unspecified)) (set! nz8b71@serious-condition? (unspecified)) (set! nz8b73@&serious-rtd (unspecified)) (set! nz8b75@&serious-rcd (unspecified)) (set! nz8b7b@nz8b76 (unspecified)) (set! nz8b7d@nz8b78 (unspecified)) (set! nz8b7f@nz8b77 (unspecified)) (set! nz8b82@p? (unspecified)) (set! nz8b84@make-error (unspecified)) (set! nz8b86@error? (unspecified)) (set! nz8b88@&error-rtd (unspecified)) (set! nz8b8a@&error-rcd (unspecified)) (set! nz8b90@nz8b8b (unspecified)) (set! nz8b92@nz8b8d (unspecified)) (set! nz8b94@nz8b8c (unspecified)) (set! nz8b97@p? (unspecified)) (set! nz8b99@make-violation (unspecified)) (set! nz8b9b@violation? (unspecified)) (set! nz8b9d@&violation-rtd (unspecified)) (set! nz8b9f@&violation-rcd (unspecified)) (set! nz8ba5@nz8ba0 (unspecified)) (set! nz8ba7@nz8ba2 (unspecified)) (set! nz8ba9@nz8ba1 (unspecified)) (set! nz8bac@p? (unspecified)) (set! nz8bae@make-assertion-violation (unspecified)) (set! nz8bb0@assertion-violation? (unspecified)) (set! nz8bb2@&assertion-rtd (unspecified)) (set! nz8bb4@&assertion-rcd (unspecified)) (set! nz8bbc@nz8bb7 (unspecified)) (set! nz8bbe@nz8bb9 (unspecified)) (set! nz8bc0@nz8bb8 (unspecified)) (set! nz8bc3@p? (unspecified)) (set! nz8bc5@make-irritants-condition (unspecified)) (set! nz8bc7@nz8bb6 (unspecified)) (set! nz8bc9@irritants-condition? (unspecified)) (set! nz8bcb@condition-irritants (unspecified)) (set! nz8bcd@&irritants-rtd (unspecified)) (set! nz8bcf@&irritants-rcd (unspecified)) (set! nz8bd7@nz8bd2 (unspecified)) (set! nz8bd9@nz8bd4 (unspecified)) (set! nz8bdb@nz8bd3 (unspecified)) (set! nz8bde@p? (unspecified)) (set! nz8be0@make-who-condition (unspecified)) (set! nz8be2@nz8bd1 (unspecified)) (set! nz8be4@who-condition? (unspecified)) (set! nz8be6@condition-who (unspecified)) (set! nz8be8@&who-rtd (unspecified)) (set! nz8bea@&who-rcd (unspecified)) (set! nz8bf0@nz8beb (unspecified)) (set! nz8bf2@nz8bed (unspecified)) (set! nz8bf4@nz8bec (unspecified)) (set! nz8bf7@p? (unspecified)) (set! nz8bf9@make-non-continuable-violation (unspecified)) (set! nz8bfb@non-continuable-violation? (unspecified)) (set! nz8bfd@&non-continuable-rtd (unspecified)) (set! nz8bff@&non-continuable-rcd (unspecified)) (set! nz8c05@nz8c00 (unspecified)) (set! nz8c07@nz8c02 (unspecified)) (set! nz8c09@nz8c01 (unspecified)) (set! nz8c0c@p? (unspecified)) (set! nz8c0e@make-implementation-restriction-violation (unspecified)) (set! nz8c10@implementation-restriction-violation? (unspecified)) (set! nz8c12@&implementation-restriction-rtd (unspecified)) (set! nz8c14@&implementation-restriction-rcd (unspecified)) (set! nz8c1a@nz8c15 (unspecified)) (set! nz8c1c@nz8c17 (unspecified)) (set! nz8c1e@nz8c16 (unspecified)) (set! nz8c21@p? (unspecified)) (set! nz8c23@make-lexical-violation (unspecified)) (set! nz8c25@lexical-violation? (unspecified)) (set! nz8c27@&lexical-rtd (unspecified)) (set! nz8c29@&lexical-rcd (unspecified)) (set! nz8c33@nz8c2e (unspecified)) (set! nz8c35@nz8c30 (unspecified)) (set! nz8c37@nz8c2f (unspecified)) (set! nz8c3a@p? (unspecified)) (set! nz8c3c@make-syntax-violation (unspecified)) (set! nz8c3e@nz8c2b (unspecified)) (set! nz8c40@nz8c2d (unspecified)) (set! nz8c42@syntax-violation? (unspecified)) (set! nz8c44@syntax-violation-form (unspecified)) (set! nz8c46@syntax-violation-subform (unspecified)) (set! nz8c48@&syntax-rtd (unspecified)) (set! nz8c4a@&syntax-rcd (unspecified)) (set! nz8c50@nz8c4b (unspecified)) (set! nz8c52@nz8c4d (unspecified)) (set! nz8c54@nz8c4c (unspecified)) (set! nz8c57@p? (unspecified)) (set! nz8c59@make-undefined-violation (unspecified)) (set! nz8c5b@undefined-violation? (unspecified)) (set! nz8c5d@&undefined-rtd (unspecified)) (set! nz8c5f@&undefined-rcd (unspecified)) (set! nz8c65@nz8c60 (unspecified)) (set! nz8c67@nz8c62 (unspecified)) (set! nz8c69@nz8c61 (unspecified)) (set! nz8c6c@p? (unspecified)) (set! nz8c6e@make-i/o-error (unspecified)) (set! nz8c70@i/o-error? (unspecified)) (set! nz8c72@&i/o-rtd (unspecified)) (set! nz8c74@&i/o-rcd (unspecified)) (set! nz8c7a@nz8c75 (unspecified)) (set! nz8c7c@nz8c77 (unspecified)) (set! nz8c7e@nz8c76 (unspecified)) (set! nz8c81@p? (unspecified)) (set! nz8c83@make-i/o-read-error (unspecified)) (set! nz8c85@i/o-read-error? (unspecified)) (set! nz8c87@&i/o-read-rtd (unspecified)) (set! nz8c89@&i/o-read-rcd (unspecified)) (set! nz8c8f@nz8c8a (unspecified)) (set! nz8c91@nz8c8c (unspecified)) (set! nz8c93@nz8c8b (unspecified)) (set! nz8c96@p? (unspecified)) (set! nz8c98@make-i/o-write-error (unspecified)) (set! nz8c9a@i/o-write-error? (unspecified)) (set! nz8c9c@&i/o-write-rtd (unspecified)) (set! nz8c9e@&i/o-write-rcd (unspecified)) (set! nz8ca6@nz8ca1 (unspecified)) (set! nz8ca8@nz8ca3 (unspecified)) (set! nz8caa@nz8ca2 (unspecified)) (set! nz8cad@p? (unspecified)) (set! nz8caf@make-i/o-invalid-position-error (unspecified)) (set! nz8cb1@nz8ca0 (unspecified)) (set! nz8cb3@i/o-invalid-position-error? (unspecified)) (set! nz8cb5@i/o-error-position (unspecified)) (set! nz8cb7@&i/o-invalid-position-rtd (unspecified)) (set! nz8cb9@&i/o-invalid-position-rcd (unspecified)) (set! nz8cc1@nz8cbc (unspecified)) (set! nz8cc3@nz8cbe (unspecified)) (set! nz8cc5@nz8cbd (unspecified)) (set! nz8cc8@p? (unspecified)) (set! nz8cca@make-i/o-filename-error (unspecified)) (set! nz8ccc@nz8cbb (unspecified)) (set! nz8cce@i/o-filename-error? (unspecified)) (set! nz8cd0@i/o-error-filename (unspecified)) (set! nz8cd2@&i/o-filename-rtd (unspecified)) (set! nz8cd4@&i/o-filename-rcd (unspecified)) (set! nz8cda@nz8cd5 (unspecified)) (set! nz8cdc@nz8cd7 (unspecified)) (set! nz8cde@nz8cd6 (unspecified)) (set! nz8ce1@p? (unspecified)) (set! nz8ce3@make-i/o-file-protection-error (unspecified)) (set! nz8ce5@i/o-file-protection-error? (unspecified)) (set! nz8ce7@&i/o-file-protection-rtd (unspecified)) (set! nz8ce9@&i/o-file-protection-rcd (unspecified)) (set! nz8cef@nz8cea (unspecified)) (set! nz8cf1@nz8cec (unspecified)) (set! nz8cf3@nz8ceb (unspecified)) (set! nz8cf6@p? (unspecified)) (set! nz8cf8@make-i/o-file-is-read-only-error (unspecified)) (set! nz8cfa@i/o-file-is-read-only-error? (unspecified)) (set! nz8cfc@&i/o-file-is-read-only-rtd (unspecified)) (set! nz8cfe@&i/o-file-is-read-only-rcd (unspecified)) (set! nz8d04@nz8cff (unspecified)) (set! nz8d06@nz8d01 (unspecified)) (set! nz8d08@nz8d00 (unspecified)) (set! nz8d0b@p? (unspecified)) (set! nz8d0d@make-i/o-file-already-exists-error (unspecified)) (set! nz8d0f@i/o-file-already-exists-error? (unspecified)) (set! nz8d11@&i/o-file-already-exists-rtd (unspecified)) (set! nz8d13@&i/o-file-already-exists-rcd (unspecified)) (set! nz8d19@nz8d14 (unspecified)) (set! nz8d1b@nz8d16 (unspecified)) (set! nz8d1d@nz8d15 (unspecified)) (set! nz8d20@p? (unspecified)) (set! nz8d22@make-i/o-file-does-not-exist-error (unspecified)) (set! nz8d24@i/o-file-does-not-exist-error? (unspecified)) (set! nz8d26@&i/o-file-does-not-exist-rtd (unspecified)) (set! nz8d28@&i/o-file-does-not-exist-rcd (unspecified)) (set! nz8d30@nz8d2b (unspecified)) (set! nz8d32@nz8d2d (unspecified)) (set! nz8d34@nz8d2c (unspecified)) (set! nz8d37@p? (unspecified)) (set! nz8d39@make-i/o-port-error (unspecified)) (set! nz8d3b@nz8d2a (unspecified)) (set! nz8d3d@i/o-port-error? (unspecified)) (set! nz8d3f@i/o-error-port (unspecified)) (set! nz8d41@&i/o-port-rtd (unspecified)) (set! nz8d43@&i/o-port-rcd (unspecified)) (set! nz8d49@nz8d44 (unspecified)) (set! nz8d4b@nz8d46 (unspecified)) (set! nz8d4d@nz8d45 (unspecified)) (set! nz8d50@p? (unspecified)) (set! nz8d52@make-i/o-decoding-error (unspecified)) (set! nz8d54@i/o-decoding-error? (unspecified)) (set! nz8d56@&i/o-decoding-rtd (unspecified)) (set! nz8d58@&i/o-decoding-rcd (unspecified)) (set! nz8d60@nz8d5b (unspecified)) (set! nz8d62@nz8d5d (unspecified)) (set! nz8d64@nz8d5c (unspecified)) (set! nz8d67@p? (unspecified)) (set! nz8d69@make-i/o-encoding-error (unspecified)) (set! nz8d6b@nz8d5a (unspecified)) (set! nz8d6d@i/o-encoding-error? (unspecified)) (set! nz8d6f@i/o-encoding-error-char (unspecified)) (set! nz8d71@&i/o-encoding-rtd (unspecified)) (set! nz8d73@&i/o-encoding-rcd (unspecified)) (set! nz8d79@nz8d74 (unspecified)) (set! nz8d7b@nz8d76 (unspecified)) (set! nz8d7d@nz8d75 (unspecified)) (set! nz8d80@p? (unspecified)) (set! nz8d82@make-no-infinities-violation (unspecified)) (set! nz8d84@no-infinities-violation? (unspecified)) (set! nz8d86@&no-infinities-rtd (unspecified)) (set! nz8d88@&no-infinities-rcd (unspecified)) (set! nz8d8e@nz8d89 (unspecified)) (set! nz8d90@nz8d8b (unspecified)) (set! nz8d92@nz8d8a (unspecified)) (set! nz8d95@p? (unspecified)) (set! nz8d97@make-no-nans-violation (unspecified)) (set! nz8d99@no-nans-violation? (unspecified)) (set! nz8d9b@&no-nans-rtd (unspecified)) (set! nz8d9d@&no-nans-rcd (unspecified)) (set! nz8adf@nz8ada (make-record-type-descriptor '&condition '#f 'nz8add '#f '#f '#())) (set! nz8d9e@nz8adf@nz8ada nz8adf@nz8ada) (set! nz8ae1@nz8adc '#f) (set! nz8d9f@nz8ae1@nz8adc nz8ae1@nz8adc) (set! nz8ae3@nz8adb (make-record-constructor-descriptor nz8adf@nz8ada '#f nz8ae1@nz8adc)) (set! nz8da0@nz8ae3@nz8adb nz8ae3@nz8adb) (set! nz8ae6@&condition? (record-predicate nz8adf@nz8ada)) (set! nz8da1@nz8ae6@&condition? nz8ae6@&condition?) (set! nz8ae8@make-&condition (record-constructor nz8ae3@nz8adb)) (set! nz8da2@nz8ae8@make-&condition nz8ae8@make-&condition) (set! nz8aea@&condition-rtd nz8adf@nz8ada) (set! nz8da3@nz8aea@&condition-rtd nz8aea@&condition-rtd) (set! nz8aec@&condition-rcd nz8ae3@nz8adb) (set! nz8da4@nz8aec@&condition-rcd nz8aec@&condition-rcd) (set! nz8b38@nz8b33 (make-record-type-descriptor '&message nz8adf@nz8ada 'nz8b36 '#f '#f '#((immutable message)))) (set! nz8da5@nz8b38@nz8b33 nz8b38@nz8b33) (set! nz8b3a@nz8b35 '#f) (set! nz8da6@nz8b3a@nz8b35 nz8b3a@nz8b35) (set! nz8b3c@nz8b34 (make-record-constructor-descriptor nz8b38@nz8b33 nz8ae3@nz8adb nz8b3a@nz8b35)) (set! nz8da7@nz8b3c@nz8b34 nz8b3c@nz8b34) (set! nz8b3f@p? (record-predicate nz8b38@nz8b33)) (set! nz8da8@nz8b3f@p? nz8b3f@p?) (set! nz8b41@make-message-condition (record-constructor nz8b3c@nz8b34)) (set! nz8da9@nz8b41@make-message-condition nz8b41@make-message-condition) (set! nz8b43@nz8b32 (record-accessor nz8b38@nz8b33 '0)) (set! nz8daa@nz8b43@nz8b32 nz8b43@nz8b32) (set! nz8b45@message-condition? (condition-predicate nz8b38@nz8b33)) (set! nz8dab@nz8b45@message-condition? nz8b45@message-condition?) (set! nz8b47@condition-message (condition-accessor nz8b38@nz8b33 nz8b43@nz8b32)) (set! nz8dac@nz8b47@condition-message nz8b47@condition-message) (set! nz8b49@&message-rtd nz8b38@nz8b33) (set! nz8dad@nz8b49@&message-rtd nz8b49@&message-rtd) (set! nz8b4b@&message-rcd nz8b3c@nz8b34) (set! nz8dae@nz8b4b@&message-rcd nz8b4b@&message-rcd) (set! nz8b51@nz8b4c (make-record-type-descriptor '&warning nz8adf@nz8ada 'nz8b4f '#f '#f '#())) (set! nz8daf@nz8b51@nz8b4c nz8b51@nz8b4c) (set! nz8b53@nz8b4e '#f) (set! nz8db0@nz8b53@nz8b4e nz8b53@nz8b4e) (set! nz8b55@nz8b4d (make-record-constructor-descriptor nz8b51@nz8b4c nz8ae3@nz8adb nz8b53@nz8b4e)) (set! nz8db1@nz8b55@nz8b4d nz8b55@nz8b4d) (set! nz8b58@p? (record-predicate nz8b51@nz8b4c)) (set! nz8db2@nz8b58@p? nz8b58@p?) (set! nz8b5a@make-warning (record-constructor nz8b55@nz8b4d)) (set! nz8db3@nz8b5a@make-warning nz8b5a@make-warning) (set! nz8b5c@warning? (condition-predicate nz8b51@nz8b4c)) (set! nz8db4@nz8b5c@warning? nz8b5c@warning?) (set! nz8b5e@&warning-rtd nz8b51@nz8b4c) (set! nz8db5@nz8b5e@&warning-rtd nz8b5e@&warning-rtd) (set! nz8b60@&warning-rcd nz8b55@nz8b4d) (set! nz8db6@nz8b60@&warning-rcd nz8b60@&warning-rcd) (set! nz8b66@nz8b61 (make-record-type-descriptor '&serious nz8adf@nz8ada 'nz8b64 '#f '#f '#())) (set! nz8db7@nz8b66@nz8b61 nz8b66@nz8b61) (set! nz8b68@nz8b63 '#f) (set! nz8db8@nz8b68@nz8b63 nz8b68@nz8b63) (set! nz8b6a@nz8b62 (make-record-constructor-descriptor nz8b66@nz8b61 nz8ae3@nz8adb nz8b68@nz8b63)) (set! nz8db9@nz8b6a@nz8b62 nz8b6a@nz8b62) (set! nz8b6d@p? (record-predicate nz8b66@nz8b61)) (set! nz8dba@nz8b6d@p? nz8b6d@p?) (set! nz8b6f@make-serious-condition (record-constructor nz8b6a@nz8b62)) (set! nz8dbb@nz8b6f@make-serious-condition nz8b6f@make-serious-condition) (set! nz8b71@serious-condition? (condition-predicate nz8b66@nz8b61)) (set! nz8dbc@nz8b71@serious-condition? nz8b71@serious-condition?) (set! nz8b73@&serious-rtd nz8b66@nz8b61) (set! nz8dbd@nz8b73@&serious-rtd nz8b73@&serious-rtd) (set! nz8b75@&serious-rcd nz8b6a@nz8b62) (set! nz8dbe@nz8b75@&serious-rcd nz8b75@&serious-rcd) (set! nz8b7b@nz8b76 (make-record-type-descriptor '&error nz8b66@nz8b61 'nz8b79 '#f '#f '#())) (set! nz8dbf@nz8b7b@nz8b76 nz8b7b@nz8b76) (set! nz8b7d@nz8b78 '#f) (set! nz8dc0@nz8b7d@nz8b78 nz8b7d@nz8b78) (set! nz8b7f@nz8b77 (make-record-constructor-descriptor nz8b7b@nz8b76 nz8b6a@nz8b62 nz8b7d@nz8b78)) (set! nz8dc1@nz8b7f@nz8b77 nz8b7f@nz8b77) (set! nz8b82@p? (record-predicate nz8b7b@nz8b76)) (set! nz8dc2@nz8b82@p? nz8b82@p?) (set! nz8b84@make-error (record-constructor nz8b7f@nz8b77)) (set! nz8dc3@nz8b84@make-error nz8b84@make-error) (set! nz8b86@error? (condition-predicate nz8b7b@nz8b76)) (set! nz8dc4@nz8b86@error? nz8b86@error?) (set! nz8b88@&error-rtd nz8b7b@nz8b76) (set! nz8dc5@nz8b88@&error-rtd nz8b88@&error-rtd) (set! nz8b8a@&error-rcd nz8b7f@nz8b77) (set! nz8dc6@nz8b8a@&error-rcd nz8b8a@&error-rcd) (set! nz8b90@nz8b8b (make-record-type-descriptor '&violation nz8b66@nz8b61 'nz8b8e '#f '#f '#())) (set! nz8dc7@nz8b90@nz8b8b nz8b90@nz8b8b) (set! nz8b92@nz8b8d '#f) (set! nz8dc8@nz8b92@nz8b8d nz8b92@nz8b8d) (set! nz8b94@nz8b8c (make-record-constructor-descriptor nz8b90@nz8b8b nz8b6a@nz8b62 nz8b92@nz8b8d)) (set! nz8dc9@nz8b94@nz8b8c nz8b94@nz8b8c) (set! nz8b97@p? (record-predicate nz8b90@nz8b8b)) (set! nz8dca@nz8b97@p? nz8b97@p?) (set! nz8b99@make-violation (record-constructor nz8b94@nz8b8c)) (set! nz8dcb@nz8b99@make-violation nz8b99@make-violation) (set! nz8b9b@violation? (condition-predicate nz8b90@nz8b8b)) (set! nz8dcc@nz8b9b@violation? nz8b9b@violation?) (set! nz8b9d@&violation-rtd nz8b90@nz8b8b) (set! nz8dcd@nz8b9d@&violation-rtd nz8b9d@&violation-rtd) (set! nz8b9f@&violation-rcd nz8b94@nz8b8c) (set! nz8dce@nz8b9f@&violation-rcd nz8b9f@&violation-rcd) (set! nz8ba5@nz8ba0 (make-record-type-descriptor '&assertion nz8b90@nz8b8b 'nz8ba3 '#f '#f '#())) (set! nz8dcf@nz8ba5@nz8ba0 nz8ba5@nz8ba0) (set! nz8ba7@nz8ba2 '#f) (set! nz8dd0@nz8ba7@nz8ba2 nz8ba7@nz8ba2) (set! nz8ba9@nz8ba1 (make-record-constructor-descriptor nz8ba5@nz8ba0 nz8b94@nz8b8c nz8ba7@nz8ba2)) (set! nz8dd1@nz8ba9@nz8ba1 nz8ba9@nz8ba1) (set! nz8bac@p? (record-predicate nz8ba5@nz8ba0)) (set! nz8dd2@nz8bac@p? nz8bac@p?) (set! nz8bae@make-assertion-violation (record-constructor nz8ba9@nz8ba1)) (set! nz8dd3@nz8bae@make-assertion-violation nz8bae@make-assertion-violation) (set! nz8bb0@assertion-violation? (condition-predicate nz8ba5@nz8ba0)) (set! nz8dd4@nz8bb0@assertion-violation? nz8bb0@assertion-violation?) (set! nz8bb2@&assertion-rtd nz8ba5@nz8ba0) (set! nz8dd5@nz8bb2@&assertion-rtd nz8bb2@&assertion-rtd) (set! nz8bb4@&assertion-rcd nz8ba9@nz8ba1) (set! nz8dd6@nz8bb4@&assertion-rcd nz8bb4@&assertion-rcd) (set! nz8bbc@nz8bb7 (make-record-type-descriptor '&irritants nz8adf@nz8ada 'nz8bba '#f '#f '#((immutable irritants)))) (set! nz8dd7@nz8bbc@nz8bb7 nz8bbc@nz8bb7) (set! nz8bbe@nz8bb9 '#f) (set! nz8dd8@nz8bbe@nz8bb9 nz8bbe@nz8bb9) (set! nz8bc0@nz8bb8 (make-record-constructor-descriptor nz8bbc@nz8bb7 nz8ae3@nz8adb nz8bbe@nz8bb9)) (set! nz8dd9@nz8bc0@nz8bb8 nz8bc0@nz8bb8) (set! nz8bc3@p? (record-predicate nz8bbc@nz8bb7)) (set! nz8dda@nz8bc3@p? nz8bc3@p?) (set! nz8bc5@make-irritants-condition (record-constructor nz8bc0@nz8bb8)) (set! nz8ddb@nz8bc5@make-irritants-condition nz8bc5@make-irritants-condition) (set! nz8bc7@nz8bb6 (record-accessor nz8bbc@nz8bb7 '0)) (set! nz8ddc@nz8bc7@nz8bb6 nz8bc7@nz8bb6) (set! nz8bc9@irritants-condition? (condition-predicate nz8bbc@nz8bb7)) (set! nz8ddd@nz8bc9@irritants-condition? nz8bc9@irritants-condition?) (set! nz8bcb@condition-irritants (condition-accessor nz8bbc@nz8bb7 nz8bc7@nz8bb6)) (set! nz8dde@nz8bcb@condition-irritants nz8bcb@condition-irritants) (set! nz8bcd@&irritants-rtd nz8bbc@nz8bb7) (set! nz8ddf@nz8bcd@&irritants-rtd nz8bcd@&irritants-rtd) (set! nz8bcf@&irritants-rcd nz8bc0@nz8bb8) (set! nz8de0@nz8bcf@&irritants-rcd nz8bcf@&irritants-rcd) (set! nz8bd7@nz8bd2 (make-record-type-descriptor '&who nz8adf@nz8ada 'nz8bd5 '#f '#f '#((immutable who)))) (set! nz8de1@nz8bd7@nz8bd2 nz8bd7@nz8bd2) (set! nz8bd9@nz8bd4 '#f) (set! nz8de2@nz8bd9@nz8bd4 nz8bd9@nz8bd4) (set! nz8bdb@nz8bd3 (make-record-constructor-descriptor nz8bd7@nz8bd2 nz8ae3@nz8adb nz8bd9@nz8bd4)) (set! nz8de3@nz8bdb@nz8bd3 nz8bdb@nz8bd3) (set! nz8bde@p? (record-predicate nz8bd7@nz8bd2)) (set! nz8de4@nz8bde@p? nz8bde@p?) (set! nz8be0@make-who-condition (record-constructor nz8bdb@nz8bd3)) (set! nz8de5@nz8be0@make-who-condition nz8be0@make-who-condition) (set! nz8be2@nz8bd1 (record-accessor nz8bd7@nz8bd2 '0)) (set! nz8de6@nz8be2@nz8bd1 nz8be2@nz8bd1) (set! nz8be4@who-condition? (condition-predicate nz8bd7@nz8bd2)) (set! nz8de7@nz8be4@who-condition? nz8be4@who-condition?) (set! nz8be6@condition-who (condition-accessor nz8bd7@nz8bd2 nz8be2@nz8bd1)) (set! nz8de8@nz8be6@condition-who nz8be6@condition-who) (set! nz8be8@&who-rtd nz8bd7@nz8bd2) (set! nz8de9@nz8be8@&who-rtd nz8be8@&who-rtd) (set! nz8bea@&who-rcd nz8bdb@nz8bd3) (set! nz8dea@nz8bea@&who-rcd nz8bea@&who-rcd) (set! nz8bf0@nz8beb (make-record-type-descriptor '&non-continuable nz8b90@nz8b8b 'nz8bee '#f '#f '#())) (set! nz8deb@nz8bf0@nz8beb nz8bf0@nz8beb) (set! nz8bf2@nz8bed '#f) (set! nz8dec@nz8bf2@nz8bed nz8bf2@nz8bed) (set! nz8bf4@nz8bec (make-record-constructor-descriptor nz8bf0@nz8beb nz8b94@nz8b8c nz8bf2@nz8bed)) (set! nz8ded@nz8bf4@nz8bec nz8bf4@nz8bec) (set! nz8bf7@p? (record-predicate nz8bf0@nz8beb)) (set! nz8dee@nz8bf7@p? nz8bf7@p?) (set! nz8bf9@make-non-continuable-violation (record-constructor nz8bf4@nz8bec)) (set! nz8def@nz8bf9@make-non-continuable-violation nz8bf9@make-non-continuable-violation) (set! nz8bfb@non-continuable-violation? (condition-predicate nz8bf0@nz8beb)) (set! nz8df0@nz8bfb@non-continuable-violation? nz8bfb@non-continuable-violation?) (set! nz8bfd@&non-continuable-rtd nz8bf0@nz8beb) (set! nz8df1@nz8bfd@&non-continuable-rtd nz8bfd@&non-continuable-rtd) (set! nz8bff@&non-continuable-rcd nz8bf4@nz8bec) (set! nz8df2@nz8bff@&non-continuable-rcd nz8bff@&non-continuable-rcd) (set! nz8c05@nz8c00 (make-record-type-descriptor '&implementation-restriction nz8b90@nz8b8b 'nz8c03 '#f '#f '#())) (set! nz8df3@nz8c05@nz8c00 nz8c05@nz8c00) (set! nz8c07@nz8c02 '#f) (set! nz8df4@nz8c07@nz8c02 nz8c07@nz8c02) (set! nz8c09@nz8c01 (make-record-constructor-descriptor nz8c05@nz8c00 nz8b94@nz8b8c nz8c07@nz8c02)) (set! nz8df5@nz8c09@nz8c01 nz8c09@nz8c01) (set! nz8c0c@p? (record-predicate nz8c05@nz8c00)) (set! nz8df6@nz8c0c@p? nz8c0c@p?) (set! nz8c0e@make-implementation-restriction-violation (record-constructor nz8c09@nz8c01)) (set! nz8df7@nz8c0e@make-implementation-restriction-violation nz8c0e@make-implementation-restriction-violation) (set! nz8c10@implementation-restriction-violation? (condition-predicate nz8c05@nz8c00)) (set! nz8df8@nz8c10@implementation-restriction-violation? nz8c10@implementation-restriction-violation?) (set! nz8c12@&implementation-restriction-rtd nz8c05@nz8c00) (set! nz8df9@nz8c12@&implementation-restriction-rtd nz8c12@&implementation-restriction-rtd) (set! nz8c14@&implementation-restriction-rcd nz8c09@nz8c01) (set! nz8dfa@nz8c14@&implementation-restriction-rcd nz8c14@&implementation-restriction-rcd) (set! nz8c1a@nz8c15 (make-record-type-descriptor '&lexical nz8b90@nz8b8b 'nz8c18 '#f '#f '#())) (set! nz8dfb@nz8c1a@nz8c15 nz8c1a@nz8c15) (set! nz8c1c@nz8c17 '#f) (set! nz8dfc@nz8c1c@nz8c17 nz8c1c@nz8c17) (set! nz8c1e@nz8c16 (make-record-constructor-descriptor nz8c1a@nz8c15 nz8b94@nz8b8c nz8c1c@nz8c17)) (set! nz8dfd@nz8c1e@nz8c16 nz8c1e@nz8c16) (set! nz8c21@p? (record-predicate nz8c1a@nz8c15)) (set! nz8dfe@nz8c21@p? nz8c21@p?) (set! nz8c23@make-lexical-violation (record-constructor nz8c1e@nz8c16)) (set! nz8dff@nz8c23@make-lexical-violation nz8c23@make-lexical-violation) (set! nz8c25@lexical-violation? (condition-predicate nz8c1a@nz8c15)) (set! nz8e00@nz8c25@lexical-violation? nz8c25@lexical-violation?) (set! nz8c27@&lexical-rtd nz8c1a@nz8c15) (set! nz8e01@nz8c27@&lexical-rtd nz8c27@&lexical-rtd) (set! nz8c29@&lexical-rcd nz8c1e@nz8c16) (set! nz8e02@nz8c29@&lexical-rcd nz8c29@&lexical-rcd) (set! nz8c33@nz8c2e (make-record-type-descriptor '&syntax nz8b90@nz8b8b 'nz8c31 '#f '#f '#((immutable form) (immutable subform)))) (set! nz8e03@nz8c33@nz8c2e nz8c33@nz8c2e) (set! nz8c35@nz8c30 '#f) (set! nz8e04@nz8c35@nz8c30 nz8c35@nz8c30) (set! nz8c37@nz8c2f (make-record-constructor-descriptor nz8c33@nz8c2e nz8b94@nz8b8c nz8c35@nz8c30)) (set! nz8e05@nz8c37@nz8c2f nz8c37@nz8c2f) (set! nz8c3a@p? (record-predicate nz8c33@nz8c2e)) (set! nz8e06@nz8c3a@p? nz8c3a@p?) (set! nz8c3c@make-syntax-violation (record-constructor nz8c37@nz8c2f)) (set! nz8e07@nz8c3c@make-syntax-violation nz8c3c@make-syntax-violation) (set! nz8c3e@nz8c2b (record-accessor nz8c33@nz8c2e '0)) (set! nz8e08@nz8c3e@nz8c2b nz8c3e@nz8c2b) (set! nz8c40@nz8c2d (record-accessor nz8c33@nz8c2e '1)) (set! nz8e09@nz8c40@nz8c2d nz8c40@nz8c2d) (set! nz8c42@syntax-violation? (condition-predicate nz8c33@nz8c2e)) (set! nz8e0a@nz8c42@syntax-violation? nz8c42@syntax-violation?) (set! nz8c44@syntax-violation-form (condition-accessor nz8c33@nz8c2e nz8c3e@nz8c2b)) (set! nz8e0b@nz8c44@syntax-violation-form nz8c44@syntax-violation-form) (set! nz8c46@syntax-violation-subform (condition-accessor nz8c33@nz8c2e nz8c40@nz8c2d)) (set! nz8e0c@nz8c46@syntax-violation-subform nz8c46@syntax-violation-subform) (set! nz8c48@&syntax-rtd nz8c33@nz8c2e) (set! nz8e0d@nz8c48@&syntax-rtd nz8c48@&syntax-rtd) (set! nz8c4a@&syntax-rcd nz8c37@nz8c2f) (set! nz8e0e@nz8c4a@&syntax-rcd nz8c4a@&syntax-rcd) (set! nz8c50@nz8c4b (make-record-type-descriptor '&undefined nz8b90@nz8b8b 'nz8c4e '#f '#f '#())) (set! nz8e0f@nz8c50@nz8c4b nz8c50@nz8c4b) (set! nz8c52@nz8c4d '#f) (set! nz8e10@nz8c52@nz8c4d nz8c52@nz8c4d) (set! nz8c54@nz8c4c (make-record-constructor-descriptor nz8c50@nz8c4b nz8b94@nz8b8c nz8c52@nz8c4d)) (set! nz8e11@nz8c54@nz8c4c nz8c54@nz8c4c) (set! nz8c57@p? (record-predicate nz8c50@nz8c4b)) (set! nz8e12@nz8c57@p? nz8c57@p?) (set! nz8c59@make-undefined-violation (record-constructor nz8c54@nz8c4c)) (set! nz8e13@nz8c59@make-undefined-violation nz8c59@make-undefined-violation) (set! nz8c5b@undefined-violation? (condition-predicate nz8c50@nz8c4b)) (set! nz8e14@nz8c5b@undefined-violation? nz8c5b@undefined-violation?) (set! nz8c5d@&undefined-rtd nz8c50@nz8c4b) (set! nz8e15@nz8c5d@&undefined-rtd nz8c5d@&undefined-rtd) (set! nz8c5f@&undefined-rcd nz8c54@nz8c4c) (set! nz8e16@nz8c5f@&undefined-rcd nz8c5f@&undefined-rcd) (set! nz8c65@nz8c60 (make-record-type-descriptor '&i/o nz8b7b@nz8b76 'nz8c63 '#f '#f '#())) (set! nz8e17@nz8c65@nz8c60 nz8c65@nz8c60) (set! nz8c67@nz8c62 '#f) (set! nz8e18@nz8c67@nz8c62 nz8c67@nz8c62) (set! nz8c69@nz8c61 (make-record-constructor-descriptor nz8c65@nz8c60 nz8b7f@nz8b77 nz8c67@nz8c62)) (set! nz8e19@nz8c69@nz8c61 nz8c69@nz8c61) (set! nz8c6c@p? (record-predicate nz8c65@nz8c60)) (set! nz8e1a@nz8c6c@p? nz8c6c@p?) (set! nz8c6e@make-i/o-error (record-constructor nz8c69@nz8c61)) (set! nz8e1b@nz8c6e@make-i/o-error nz8c6e@make-i/o-error) (set! nz8c70@i/o-error? (condition-predicate nz8c65@nz8c60)) (set! nz8e1c@nz8c70@i/o-error? nz8c70@i/o-error?) (set! nz8c72@&i/o-rtd nz8c65@nz8c60) (set! nz8e1d@nz8c72@&i/o-rtd nz8c72@&i/o-rtd) (set! nz8c74@&i/o-rcd nz8c69@nz8c61) (set! nz8e1e@nz8c74@&i/o-rcd nz8c74@&i/o-rcd) (set! nz8c7a@nz8c75 (make-record-type-descriptor '&i/o-read nz8c65@nz8c60 'nz8c78 '#f '#f '#())) (set! nz8e1f@nz8c7a@nz8c75 nz8c7a@nz8c75) (set! nz8c7c@nz8c77 '#f) (set! nz8e20@nz8c7c@nz8c77 nz8c7c@nz8c77) (set! nz8c7e@nz8c76 (make-record-constructor-descriptor nz8c7a@nz8c75 nz8c69@nz8c61 nz8c7c@nz8c77)) (set! nz8e21@nz8c7e@nz8c76 nz8c7e@nz8c76) (set! nz8c81@p? (record-predicate nz8c7a@nz8c75)) (set! nz8e22@nz8c81@p? nz8c81@p?) (set! nz8c83@make-i/o-read-error (record-constructor nz8c7e@nz8c76)) (set! nz8e23@nz8c83@make-i/o-read-error nz8c83@make-i/o-read-error) (set! nz8c85@i/o-read-error? (condition-predicate nz8c7a@nz8c75)) (set! nz8e24@nz8c85@i/o-read-error? nz8c85@i/o-read-error?) (set! nz8c87@&i/o-read-rtd nz8c7a@nz8c75) (set! nz8e25@nz8c87@&i/o-read-rtd nz8c87@&i/o-read-rtd) (set! nz8c89@&i/o-read-rcd nz8c7e@nz8c76) (set! nz8e26@nz8c89@&i/o-read-rcd nz8c89@&i/o-read-rcd) (set! nz8c8f@nz8c8a (make-record-type-descriptor '&i/o-write nz8c65@nz8c60 'nz8c8d '#f '#f '#())) (set! nz8e27@nz8c8f@nz8c8a nz8c8f@nz8c8a) (set! nz8c91@nz8c8c '#f) (set! nz8e28@nz8c91@nz8c8c nz8c91@nz8c8c) (set! nz8c93@nz8c8b (make-record-constructor-descriptor nz8c8f@nz8c8a nz8c69@nz8c61 nz8c91@nz8c8c)) (set! nz8e29@nz8c93@nz8c8b nz8c93@nz8c8b) (set! nz8c96@p? (record-predicate nz8c8f@nz8c8a)) (set! nz8e2a@nz8c96@p? nz8c96@p?) (set! nz8c98@make-i/o-write-error (record-constructor nz8c93@nz8c8b)) (set! nz8e2b@nz8c98@make-i/o-write-error nz8c98@make-i/o-write-error) (set! nz8c9a@i/o-write-error? (condition-predicate nz8c8f@nz8c8a)) (set! nz8e2c@nz8c9a@i/o-write-error? nz8c9a@i/o-write-error?) (set! nz8c9c@&i/o-write-rtd nz8c8f@nz8c8a) (set! nz8e2d@nz8c9c@&i/o-write-rtd nz8c9c@&i/o-write-rtd) (set! nz8c9e@&i/o-write-rcd nz8c93@nz8c8b) (set! nz8e2e@nz8c9e@&i/o-write-rcd nz8c9e@&i/o-write-rcd) (set! nz8ca6@nz8ca1 (make-record-type-descriptor '&i/o-invalid-position nz8c65@nz8c60 'nz8ca4 '#f '#f '#((immutable position)))) (set! nz8e2f@nz8ca6@nz8ca1 nz8ca6@nz8ca1) (set! nz8ca8@nz8ca3 '#f) (set! nz8e30@nz8ca8@nz8ca3 nz8ca8@nz8ca3) (set! nz8caa@nz8ca2 (make-record-constructor-descriptor nz8ca6@nz8ca1 nz8c69@nz8c61 nz8ca8@nz8ca3)) (set! nz8e31@nz8caa@nz8ca2 nz8caa@nz8ca2) (set! nz8cad@p? (record-predicate nz8ca6@nz8ca1)) (set! nz8e32@nz8cad@p? nz8cad@p?) (set! nz8caf@make-i/o-invalid-position-error (record-constructor nz8caa@nz8ca2)) (set! nz8e33@nz8caf@make-i/o-invalid-position-error nz8caf@make-i/o-invalid-position-error) (set! nz8cb1@nz8ca0 (record-accessor nz8ca6@nz8ca1 '0)) (set! nz8e34@nz8cb1@nz8ca0 nz8cb1@nz8ca0) (set! nz8cb3@i/o-invalid-position-error? (condition-predicate nz8ca6@nz8ca1)) (set! nz8e35@nz8cb3@i/o-invalid-position-error? nz8cb3@i/o-invalid-position-error?) (set! nz8cb5@i/o-error-position (condition-accessor nz8ca6@nz8ca1 nz8cb1@nz8ca0)) (set! nz8e36@nz8cb5@i/o-error-position nz8cb5@i/o-error-position) (set! nz8cb7@&i/o-invalid-position-rtd nz8ca6@nz8ca1) (set! nz8e37@nz8cb7@&i/o-invalid-position-rtd nz8cb7@&i/o-invalid-position-rtd) (set! nz8cb9@&i/o-invalid-position-rcd nz8caa@nz8ca2) (set! nz8e38@nz8cb9@&i/o-invalid-position-rcd nz8cb9@&i/o-invalid-position-rcd) (set! nz8cc1@nz8cbc (make-record-type-descriptor '&i/o-filename nz8c65@nz8c60 'nz8cbf '#f '#f '#((immutable filename)))) (set! nz8e39@nz8cc1@nz8cbc nz8cc1@nz8cbc) (set! nz8cc3@nz8cbe '#f) (set! nz8e3a@nz8cc3@nz8cbe nz8cc3@nz8cbe) (set! nz8cc5@nz8cbd (make-record-constructor-descriptor nz8cc1@nz8cbc nz8c69@nz8c61 nz8cc3@nz8cbe)) (set! nz8e3b@nz8cc5@nz8cbd nz8cc5@nz8cbd) (set! nz8cc8@p? (record-predicate nz8cc1@nz8cbc)) (set! nz8e3c@nz8cc8@p? nz8cc8@p?) (set! nz8cca@make-i/o-filename-error (record-constructor nz8cc5@nz8cbd)) (set! nz8e3d@nz8cca@make-i/o-filename-error nz8cca@make-i/o-filename-error) (set! nz8ccc@nz8cbb (record-accessor nz8cc1@nz8cbc '0)) (set! nz8e3e@nz8ccc@nz8cbb nz8ccc@nz8cbb) (set! nz8cce@i/o-filename-error? (condition-predicate nz8cc1@nz8cbc)) (set! nz8e3f@nz8cce@i/o-filename-error? nz8cce@i/o-filename-error?) (set! nz8cd0@i/o-error-filename (condition-accessor nz8cc1@nz8cbc nz8ccc@nz8cbb)) (set! nz8e40@nz8cd0@i/o-error-filename nz8cd0@i/o-error-filename) (set! nz8cd2@&i/o-filename-rtd nz8cc1@nz8cbc) (set! nz8e41@nz8cd2@&i/o-filename-rtd nz8cd2@&i/o-filename-rtd) (set! nz8cd4@&i/o-filename-rcd nz8cc5@nz8cbd) (set! nz8e42@nz8cd4@&i/o-filename-rcd nz8cd4@&i/o-filename-rcd) (set! nz8cda@nz8cd5 (make-record-type-descriptor '&i/o-file-protection nz8cc1@nz8cbc 'nz8cd8 '#f '#f '#())) (set! nz8e43@nz8cda@nz8cd5 nz8cda@nz8cd5) (set! nz8cdc@nz8cd7 '#f) (set! nz8e44@nz8cdc@nz8cd7 nz8cdc@nz8cd7) (set! nz8cde@nz8cd6 (make-record-constructor-descriptor nz8cda@nz8cd5 nz8cc5@nz8cbd nz8cdc@nz8cd7)) (set! nz8e45@nz8cde@nz8cd6 nz8cde@nz8cd6) (set! nz8ce1@p? (record-predicate nz8cda@nz8cd5)) (set! nz8e46@nz8ce1@p? nz8ce1@p?) (set! nz8ce3@make-i/o-file-protection-error (record-constructor nz8cde@nz8cd6)) (set! nz8e47@nz8ce3@make-i/o-file-protection-error nz8ce3@make-i/o-file-protection-error) (set! nz8ce5@i/o-file-protection-error? (condition-predicate nz8cda@nz8cd5)) (set! nz8e48@nz8ce5@i/o-file-protection-error? nz8ce5@i/o-file-protection-error?) (set! nz8ce7@&i/o-file-protection-rtd nz8cda@nz8cd5) (set! nz8e49@nz8ce7@&i/o-file-protection-rtd nz8ce7@&i/o-file-protection-rtd) (set! nz8ce9@&i/o-file-protection-rcd nz8cde@nz8cd6) (set! nz8e4a@nz8ce9@&i/o-file-protection-rcd nz8ce9@&i/o-file-protection-rcd) (set! nz8cef@nz8cea (make-record-type-descriptor '&i/o-file-is-read-only nz8cda@nz8cd5 'nz8ced '#f '#f '#())) (set! nz8e4b@nz8cef@nz8cea nz8cef@nz8cea) (set! nz8cf1@nz8cec '#f) (set! nz8e4c@nz8cf1@nz8cec nz8cf1@nz8cec) (set! nz8cf3@nz8ceb (make-record-constructor-descriptor nz8cef@nz8cea nz8cde@nz8cd6 nz8cf1@nz8cec)) (set! nz8e4d@nz8cf3@nz8ceb nz8cf3@nz8ceb) (set! nz8cf6@p? (record-predicate nz8cef@nz8cea)) (set! nz8e4e@nz8cf6@p? nz8cf6@p?) (set! nz8cf8@make-i/o-file-is-read-only-error (record-constructor nz8cf3@nz8ceb)) (set! nz8e4f@nz8cf8@make-i/o-file-is-read-only-error nz8cf8@make-i/o-file-is-read-only-error) (set! nz8cfa@i/o-file-is-read-only-error? (condition-predicate nz8cef@nz8cea)) (set! nz8e50@nz8cfa@i/o-file-is-read-only-error? nz8cfa@i/o-file-is-read-only-error?) (set! nz8cfc@&i/o-file-is-read-only-rtd nz8cef@nz8cea) (set! nz8e51@nz8cfc@&i/o-file-is-read-only-rtd nz8cfc@&i/o-file-is-read-only-rtd) (set! nz8cfe@&i/o-file-is-read-only-rcd nz8cf3@nz8ceb) (set! nz8e52@nz8cfe@&i/o-file-is-read-only-rcd nz8cfe@&i/o-file-is-read-only-rcd) (set! nz8d04@nz8cff (make-record-type-descriptor '&i/o-file-already-exists nz8cc1@nz8cbc 'nz8d02 '#f '#f '#())) (set! nz8e53@nz8d04@nz8cff nz8d04@nz8cff) (set! nz8d06@nz8d01 '#f) (set! nz8e54@nz8d06@nz8d01 nz8d06@nz8d01) (set! nz8d08@nz8d00 (make-record-constructor-descriptor nz8d04@nz8cff nz8cc5@nz8cbd nz8d06@nz8d01)) (set! nz8e55@nz8d08@nz8d00 nz8d08@nz8d00) (set! nz8d0b@p? (record-predicate nz8d04@nz8cff)) (set! nz8e56@nz8d0b@p? nz8d0b@p?) (set! nz8d0d@make-i/o-file-already-exists-error (record-constructor nz8d08@nz8d00)) (set! nz8e57@nz8d0d@make-i/o-file-already-exists-error nz8d0d@make-i/o-file-already-exists-error) (set! nz8d0f@i/o-file-already-exists-error? (condition-predicate nz8d04@nz8cff)) (set! nz8e58@nz8d0f@i/o-file-already-exists-error? nz8d0f@i/o-file-already-exists-error?) (set! nz8d11@&i/o-file-already-exists-rtd nz8d04@nz8cff) (set! nz8e59@nz8d11@&i/o-file-already-exists-rtd nz8d11@&i/o-file-already-exists-rtd) (set! nz8d13@&i/o-file-already-exists-rcd nz8d08@nz8d00) (set! nz8e5a@nz8d13@&i/o-file-already-exists-rcd nz8d13@&i/o-file-already-exists-rcd) (set! nz8d19@nz8d14 (make-record-type-descriptor '&i/o-file-does-not-exist nz8cc1@nz8cbc 'nz8d17 '#f '#f '#())) (set! nz8e5b@nz8d19@nz8d14 nz8d19@nz8d14) (set! nz8d1b@nz8d16 '#f) (set! nz8e5c@nz8d1b@nz8d16 nz8d1b@nz8d16) (set! nz8d1d@nz8d15 (make-record-constructor-descriptor nz8d19@nz8d14 nz8cc5@nz8cbd nz8d1b@nz8d16)) (set! nz8e5d@nz8d1d@nz8d15 nz8d1d@nz8d15) (set! nz8d20@p? (record-predicate nz8d19@nz8d14)) (set! nz8e5e@nz8d20@p? nz8d20@p?) (set! nz8d22@make-i/o-file-does-not-exist-error (record-constructor nz8d1d@nz8d15)) (set! nz8e5f@nz8d22@make-i/o-file-does-not-exist-error nz8d22@make-i/o-file-does-not-exist-error) (set! nz8d24@i/o-file-does-not-exist-error? (condition-predicate nz8d19@nz8d14)) (set! nz8e60@nz8d24@i/o-file-does-not-exist-error? nz8d24@i/o-file-does-not-exist-error?) (set! nz8d26@&i/o-file-does-not-exist-rtd nz8d19@nz8d14) (set! nz8e61@nz8d26@&i/o-file-does-not-exist-rtd nz8d26@&i/o-file-does-not-exist-rtd) (set! nz8d28@&i/o-file-does-not-exist-rcd nz8d1d@nz8d15) (set! nz8e62@nz8d28@&i/o-file-does-not-exist-rcd nz8d28@&i/o-file-does-not-exist-rcd) (set! nz8d30@nz8d2b (make-record-type-descriptor '&i/o-port nz8c65@nz8c60 'nz8d2e '#f '#f '#((immutable port)))) (set! nz8e63@nz8d30@nz8d2b nz8d30@nz8d2b) (set! nz8d32@nz8d2d '#f) (set! nz8e64@nz8d32@nz8d2d nz8d32@nz8d2d) (set! nz8d34@nz8d2c (make-record-constructor-descriptor nz8d30@nz8d2b nz8c69@nz8c61 nz8d32@nz8d2d)) (set! nz8e65@nz8d34@nz8d2c nz8d34@nz8d2c) (set! nz8d37@p? (record-predicate nz8d30@nz8d2b)) (set! nz8e66@nz8d37@p? nz8d37@p?) (set! nz8d39@make-i/o-port-error (record-constructor nz8d34@nz8d2c)) (set! nz8e67@nz8d39@make-i/o-port-error nz8d39@make-i/o-port-error) (set! nz8d3b@nz8d2a (record-accessor nz8d30@nz8d2b '0)) (set! nz8e68@nz8d3b@nz8d2a nz8d3b@nz8d2a) (set! nz8d3d@i/o-port-error? (condition-predicate nz8d30@nz8d2b)) (set! nz8e69@nz8d3d@i/o-port-error? nz8d3d@i/o-port-error?) (set! nz8d3f@i/o-error-port (condition-accessor nz8d30@nz8d2b nz8d3b@nz8d2a)) (set! nz8e6a@nz8d3f@i/o-error-port nz8d3f@i/o-error-port) (set! nz8d41@&i/o-port-rtd nz8d30@nz8d2b) (set! nz8e6b@nz8d41@&i/o-port-rtd nz8d41@&i/o-port-rtd) (set! nz8d43@&i/o-port-rcd nz8d34@nz8d2c) (set! nz8e6c@nz8d43@&i/o-port-rcd nz8d43@&i/o-port-rcd) (set! nz8d49@nz8d44 (make-record-type-descriptor '&i/o-decoding nz8d30@nz8d2b 'nz8d47 '#f '#f '#())) (set! nz8e6d@nz8d49@nz8d44 nz8d49@nz8d44) (set! nz8d4b@nz8d46 '#f) (set! nz8e6e@nz8d4b@nz8d46 nz8d4b@nz8d46) (set! nz8d4d@nz8d45 (make-record-constructor-descriptor nz8d49@nz8d44 nz8d34@nz8d2c nz8d4b@nz8d46)) (set! nz8e6f@nz8d4d@nz8d45 nz8d4d@nz8d45) (set! nz8d50@p? (record-predicate nz8d49@nz8d44)) (set! nz8e70@nz8d50@p? nz8d50@p?) (set! nz8d52@make-i/o-decoding-error (record-constructor nz8d4d@nz8d45)) (set! nz8e71@nz8d52@make-i/o-decoding-error nz8d52@make-i/o-decoding-error) (set! nz8d54@i/o-decoding-error? (condition-predicate nz8d49@nz8d44)) (set! nz8e72@nz8d54@i/o-decoding-error? nz8d54@i/o-decoding-error?) (set! nz8d56@&i/o-decoding-rtd nz8d49@nz8d44) (set! nz8e73@nz8d56@&i/o-decoding-rtd nz8d56@&i/o-decoding-rtd) (set! nz8d58@&i/o-decoding-rcd nz8d4d@nz8d45) (set! nz8e74@nz8d58@&i/o-decoding-rcd nz8d58@&i/o-decoding-rcd) (set! nz8d60@nz8d5b (make-record-type-descriptor '&i/o-encoding nz8d30@nz8d2b 'nz8d5e '#f '#f '#((immutable char)))) (set! nz8e75@nz8d60@nz8d5b nz8d60@nz8d5b) (set! nz8d62@nz8d5d '#f) (set! nz8e76@nz8d62@nz8d5d nz8d62@nz8d5d) (set! nz8d64@nz8d5c (make-record-constructor-descriptor nz8d60@nz8d5b nz8d34@nz8d2c nz8d62@nz8d5d)) (set! nz8e77@nz8d64@nz8d5c nz8d64@nz8d5c) (set! nz8d67@p? (record-predicate nz8d60@nz8d5b)) (set! nz8e78@nz8d67@p? nz8d67@p?) (set! nz8d69@make-i/o-encoding-error (record-constructor nz8d64@nz8d5c)) (set! nz8e79@nz8d69@make-i/o-encoding-error nz8d69@make-i/o-encoding-error) (set! nz8d6b@nz8d5a (record-accessor nz8d60@nz8d5b '0)) (set! nz8e7a@nz8d6b@nz8d5a nz8d6b@nz8d5a) (set! nz8d6d@i/o-encoding-error? (condition-predicate nz8d60@nz8d5b)) (set! nz8e7b@nz8d6d@i/o-encoding-error? nz8d6d@i/o-encoding-error?) (set! nz8d6f@i/o-encoding-error-char (condition-accessor nz8d60@nz8d5b nz8d6b@nz8d5a)) (set! nz8e7c@nz8d6f@i/o-encoding-error-char nz8d6f@i/o-encoding-error-char) (set! nz8d71@&i/o-encoding-rtd nz8d60@nz8d5b) (set! nz8e7d@nz8d71@&i/o-encoding-rtd nz8d71@&i/o-encoding-rtd) (set! nz8d73@&i/o-encoding-rcd nz8d64@nz8d5c) (set! nz8e7e@nz8d73@&i/o-encoding-rcd nz8d73@&i/o-encoding-rcd) (set! nz8d79@nz8d74 (make-record-type-descriptor '&no-infinities nz8c05@nz8c00 'nz8d77 '#f '#f '#())) (set! nz8e7f@nz8d79@nz8d74 nz8d79@nz8d74) (set! nz8d7b@nz8d76 '#f) (set! nz8e80@nz8d7b@nz8d76 nz8d7b@nz8d76) (set! nz8d7d@nz8d75 (make-record-constructor-descriptor nz8d79@nz8d74 nz8c09@nz8c01 nz8d7b@nz8d76)) (set! nz8e81@nz8d7d@nz8d75 nz8d7d@nz8d75) (set! nz8d80@p? (record-predicate nz8d79@nz8d74)) (set! nz8e82@nz8d80@p? nz8d80@p?) (set! nz8d82@make-no-infinities-violation (record-constructor nz8d7d@nz8d75)) (set! nz8e83@nz8d82@make-no-infinities-violation nz8d82@make-no-infinities-violation) (set! nz8d84@no-infinities-violation? (condition-predicate nz8d79@nz8d74)) (set! nz8e84@nz8d84@no-infinities-violation? nz8d84@no-infinities-violation?) (set! nz8d86@&no-infinities-rtd nz8d79@nz8d74) (set! nz8e85@nz8d86@&no-infinities-rtd nz8d86@&no-infinities-rtd) (set! nz8d88@&no-infinities-rcd nz8d7d@nz8d75) (set! nz8e86@nz8d88@&no-infinities-rcd nz8d88@&no-infinities-rcd) (set! nz8d8e@nz8d89 (make-record-type-descriptor '&no-nans nz8c05@nz8c00 'nz8d8c '#f '#f '#())) (set! nz8e87@nz8d8e@nz8d89 nz8d8e@nz8d89) (set! nz8d90@nz8d8b '#f) (set! nz8e88@nz8d90@nz8d8b nz8d90@nz8d8b) (set! nz8d92@nz8d8a (make-record-constructor-descriptor nz8d8e@nz8d89 nz8c09@nz8c01 nz8d90@nz8d8b)) (set! nz8e89@nz8d92@nz8d8a nz8d92@nz8d8a) (set! nz8d95@p? (record-predicate nz8d8e@nz8d89)) (set! nz8e8a@nz8d95@p? nz8d95@p?) (set! nz8d97@make-no-nans-violation (record-constructor nz8d92@nz8d8a)) (set! nz8e8b@nz8d97@make-no-nans-violation nz8d97@make-no-nans-violation) (set! nz8d99@no-nans-violation? (condition-predicate nz8d8e@nz8d89)) (set! nz8e8c@nz8d99@no-nans-violation? nz8d99@no-nans-violation?) (set! nz8d9b@&no-nans-rtd nz8d8e@nz8d89) (set! nz8e8d@nz8d9b@&no-nans-rtd nz8d9b@&no-nans-rtd) (set! nz8d9d@&no-nans-rcd nz8d92@nz8d8a) (set! nz8e8e@nz8d9d@&no-nans-rcd nz8d9d@&no-nans-rcd) (void))
(begin (begin (nz6913@nz68c8@current-primitive-locations (lambda (nz9355@x) (let ((nz9357@t (assq nz9355@x '((&no-nans-rcd . nz8e8e@nz8d9d@&no-nans-rcd) (&no-nans-rtd . nz8e8d@nz8d9b@&no-nans-rtd) (&no-infinities-rcd . nz8e86@nz8d88@&no-infinities-rcd) (&no-infinities-rtd . nz8e85@nz8d86@&no-infinities-rtd) (&i/o-encoding-rcd . nz8e7e@nz8d73@&i/o-encoding-rcd) (&i/o-encoding-rtd . nz8e7d@nz8d71@&i/o-encoding-rtd) (&i/o-decoding-rcd . nz8e74@nz8d58@&i/o-decoding-rcd) (&i/o-decoding-rtd . nz8e73@nz8d56@&i/o-decoding-rtd) (&i/o-port-rcd . nz8e6c@nz8d43@&i/o-port-rcd) (&i/o-port-rtd . nz8e6b@nz8d41@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . nz8e62@nz8d28@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . nz8e61@nz8d26@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . nz8e5a@nz8d13@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . nz8e59@nz8d11@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . nz8e52@nz8cfe@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . nz8e51@nz8cfc@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . nz8e4a@nz8ce9@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . nz8e49@nz8ce7@&i/o-file-protection-rtd) (&i/o-filename-rcd . nz8e42@nz8cd4@&i/o-filename-rcd) (&i/o-filename-rtd . nz8e41@nz8cd2@&i/o-filename-rtd) (&i/o-invalid-position-rcd . nz8e38@nz8cb9@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . nz8e37@nz8cb7@&i/o-invalid-position-rtd) (&i/o-write-rcd . nz8e2e@nz8c9e@&i/o-write-rcd) (&i/o-write-rtd . nz8e2d@nz8c9c@&i/o-write-rtd) (&i/o-read-rcd . nz8e26@nz8c89@&i/o-read-rcd) (&i/o-read-rtd . nz8e25@nz8c87@&i/o-read-rtd) (&i/o-rcd . nz8e1e@nz8c74@&i/o-rcd) (&i/o-rtd . nz8e1d@nz8c72@&i/o-rtd) (&undefined-rcd . nz8e16@nz8c5f@&undefined-rcd) (&undefined-rtd . nz8e15@nz8c5d@&undefined-rtd) (&syntax-rcd . nz8e0e@nz8c4a@&syntax-rcd) (&syntax-rtd . nz8e0d@nz8c48@&syntax-rtd) (&lexical-rcd . nz8e02@nz8c29@&lexical-rcd) (&lexical-rtd . nz8e01@nz8c27@&lexical-rtd) (&implementation-restriction-rcd . nz8dfa@nz8c14@&implementation-restriction-rcd) (&implementation-restriction-rtd . nz8df9@nz8c12@&implementation-restriction-rtd) (&non-continuable-rcd . nz8df2@nz8bff@&non-continuable-rcd) (&non-continuable-rtd . nz8df1@nz8bfd@&non-continuable-rtd) (&who-rcd . nz8dea@nz8bea@&who-rcd) (&who-rtd . nz8de9@nz8be8@&who-rtd) (&irritants-rcd . nz8de0@nz8bcf@&irritants-rcd) (&irritants-rtd . nz8ddf@nz8bcd@&irritants-rtd) (&assertion-rcd . nz8dd6@nz8bb4@&assertion-rcd) (&assertion-rtd . nz8dd5@nz8bb2@&assertion-rtd) (&violation-rcd . nz8dce@nz8b9f@&violation-rcd) (&violation-rtd . nz8dcd@nz8b9d@&violation-rtd) (&error-rcd . nz8dc6@nz8b8a@&error-rcd) (&error-rtd . nz8dc5@nz8b88@&error-rtd) (&serious-rcd . nz8dbe@nz8b75@&serious-rcd) (&serious-rtd . nz8dbd@nz8b73@&serious-rtd) (&warning-rcd . nz8db6@nz8b60@&warning-rcd) (&warning-rtd . nz8db5@nz8b5e@&warning-rtd) (&message-rcd . nz8dae@nz8b4b@&message-rcd) (&message-rtd . nz8dad@nz8b49@&message-rtd) (&condition-rcd . nz8da4@nz8aec@&condition-rcd) (&condition-rtd . nz8da3@nz8aea@&condition-rtd) (syntax-error . nz8ac6@nz706a@syntax-error) (syntax-dispatch . nz8a64@nz6f8e@syntax-dispatch) (load . nz8ff6@nz8eac@load) (interaction-environment . nz8acf@nz707c@interaction-environment) (library-path . nz6b8a@nz69b6@library-path) (mosh-cache-dir . nz68c1@nz67a0@mosh-cache-dir) (make-parameter . nz68c0@nz679e@make-parameter) (make-variable-transformer . nz8a21@nz6db9@make-variable-transformer) (identifier? . nz8ac9@nz7070@identifier?) (generate-temporaries . nz8abf@nz705c@generate-temporaries) (free-identifier=? . nz8ac0@nz705e@free-identifier=?) (syntax->datum . nz8acb@nz7074@syntax->datum) (datum->syntax . nz8aca@nz7072@datum->syntax) (bound-identifier=? . nz8ac1@nz7060@bound-identifier=?) (make-i/o-write-error . nz8e2b@nz8c98@make-i/o-write-error) (make-i/o-read-error . nz8e23@nz8c83@make-i/o-read-error) (make-i/o-port-error . nz8e67@nz8d39@make-i/o-port-error) (make-i/o-invalid-position-error . nz8e33@nz8caf@make-i/o-invalid-position-error) (make-i/o-filename-error . nz8e3d@nz8cca@make-i/o-filename-error) (make-i/o-file-protection-error . nz8e47@nz8ce3@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . nz8e4f@nz8cf8@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . nz8e5f@nz8d22@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . nz8e57@nz8d0d@make-i/o-file-already-exists-error) (make-i/o-error . nz8e1b@nz8c6e@make-i/o-error) (make-i/o-encoding-error . nz8e79@nz8d69@make-i/o-encoding-error) (make-i/o-decoding-error . nz8e71@nz8d52@make-i/o-decoding-error) (i/o-write-error? . nz8e2c@nz8c9a@i/o-write-error?) (i/o-read-error? . nz8e24@nz8c85@i/o-read-error?) (i/o-port-error? . nz8e69@nz8d3d@i/o-port-error?) (i/o-invalid-position-error? . nz8e35@nz8cb3@i/o-invalid-position-error?) (i/o-filename-error? . nz8e3f@nz8cce@i/o-filename-error?) (i/o-file-protection-error? . nz8e48@nz8ce5@i/o-file-protection-error?) (i/o-file-is-read-only-error? . nz8e50@nz8cfa@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . nz8e60@nz8d24@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . nz8e58@nz8d0f@i/o-file-already-exists-error?) (i/o-error? . nz8e1c@nz8c70@i/o-error?) (i/o-error-position . nz8e36@nz8cb5@i/o-error-position) (i/o-error-port . nz8e6a@nz8d3f@i/o-error-port) (i/o-error-filename . nz8e40@nz8cd0@i/o-error-filename) (i/o-encoding-error? . nz8e7b@nz8d6d@i/o-encoding-error?) (i/o-encoding-error-char . nz8e7c@nz8d6f@i/o-encoding-error-char) (i/o-decoding-error? . nz8e72@nz8d54@i/o-decoding-error?) (scheme-report-environment . nz8ab6@nz704a@scheme-report-environment) (null-environment . nz8ab5@nz7048@null-environment) (command-line . nz8ff3@nz8ea6@command-line) (eval . nz8ab8@nz704e@eval) (environment . nz8ab4@nz7046@environment) (who-condition? . nz8de7@nz8be4@who-condition?) (warning? . nz8db4@nz8b5c@warning?) (violation? . nz8dcc@nz8b9b@violation?) (undefined-violation? . nz8e14@nz8c5b@undefined-violation?) (syntax-violation? . nz8e0a@nz8c42@syntax-violation?) (syntax-violation-subform . nz8e0c@nz8c46@syntax-violation-subform) (syntax-violation-form . nz8e0b@nz8c44@syntax-violation-form) (syntax-violation . nz8ac8@nz706e@syntax-violation) (serious-condition? . nz8dbc@nz8b71@serious-condition?) (non-continuable-violation? . nz8df0@nz8bfb@non-continuable-violation?) (message-condition? . nz8dab@nz8b45@message-condition?) (make-who-condition . nz8de5@nz8be0@make-who-condition) (make-warning . nz8db3@nz8b5a@make-warning) (make-violation . nz8dcb@nz8b99@make-violation) (make-undefined-violation . nz8e13@nz8c59@make-undefined-violation) (make-syntax-violation . nz8e07@nz8c3c@make-syntax-violation) (make-serious-condition . nz8dbb@nz8b6f@make-serious-condition) (make-non-continuable-violation . nz8def@nz8bf9@make-non-continuable-violation) (make-message-condition . nz8da9@nz8b41@make-message-condition) (make-lexical-violation . nz8dff@nz8c23@make-lexical-violation) (make-irritants-condition . nz8ddb@nz8bc5@make-irritants-condition) (make-implementation-restriction-violation . nz8df7@nz8c0e@make-implementation-restriction-violation) (make-error . nz8dc3@nz8b84@make-error) (make-assertion-violation . nz8dd3@nz8bae@make-assertion-violation) (lexical-violation? . nz8e00@nz8c25@lexical-violation?) (irritants-condition? . nz8ddd@nz8bc9@irritants-condition?) (implementation-restriction-violation? . nz8df8@nz8c10@implementation-restriction-violation?) (error? . nz8dc4@nz8b86@error?) (condition-who . nz8de8@nz8be6@condition-who) (condition-message . nz8dac@nz8b47@condition-message) (condition-irritants . nz8dde@nz8bcb@condition-irritants) (assertion-violation? . nz8dd4@nz8bb0@assertion-violation?) (no-nans-violation? . nz8e8c@nz8d99@no-nans-violation?) (no-infinities-violation? . nz8e84@nz8d84@no-infinities-violation?) (make-no-nans-violation . nz8e8b@nz8d97@make-no-nans-violation) (make-no-infinities-violation . nz8e83@nz8d82@make-no-infinities-violation) (assertion-error . nz8ac5@nz7068@assertion-error))))) (if nz9357@t (cdr nz9357@t) '#f)))) (nz6b9a@nz69d6@install-library 'nz9332 '(mosh interaction) '() '() '() '() '((regexp? . nz932a) (alist->eq-hash-table . nz9326) (format . nz9323) (string-split . nz9317) (call-process . nz9311) (set-current-directory! . nz930d) (expand-path . nz930c) (current-directory . nz930b) (%spawn . nz930a) (%waitpid . nz9309) (simple-struct-name . nz9308) (simple-struct-set! . nz9307) (simple-struct-ref . nz9306) (make-simple-struct . nz9305) (simple-struct? . nz9304) (pointer-ref-c-int64 . nz9303) (pointer-ref-c-int32 . nz9302) (pointer-ref-c-int16 . nz9301) (pointer-ref-c-int8 . nz9300) (pointer-ref-c-uint64 . nz92ff) (pointer-ref-c-uint32 . nz92fe) (pointer-ref-c-uint16 . nz92fd) (pointer-ref-c-uint8 . nz92fc) (pointer-set-c-uint64! . nz92fb) (pointer-set-c-uint32! . nz92fa) (pointer-set-c-uint16! . nz92f9) (pointer-set-c-uint8! . nz92f8) (pointer-set-c-int64! . nz92f7) (pointer-set-c-int32! . nz92f6) (pointer-set-c-int16! . nz92f5) (pointer-set-c-int8! . nz92f4) (pointer-set-c-pointer! . nz92f3) (pointer-set-c-double! . nz92f2) (pointer-set-c-float! . nz92f1) (pointer-set-c-long-long! . nz92f0) (pointer-set-c-long! . nz92ef) (pointer-set-c-int! . nz92ee) (pointer-set-c-short! . nz92ed) (pointer-set-c-char! . nz92ec) (pointer-ref-c-pointer . nz92eb) (pointer-ref-c-double . nz92ea) (pointer-ref-c-float . nz92e9) (pointer-ref-c-unsigned-long-long . nz92e8) (pointer-ref-c-signed-long-long . nz92e7) (pointer-ref-c-unsigned-long . nz92e6) (pointer-ref-c-signed-long . nz92e5) (pointer-ref-c-unsigned-int . nz92e4) (pointer-ref-c-signed-int . nz92e3) (pointer-ref-c-unsigned-short . nz92e2) (pointer-ref-c-signed-short . nz92e1) (pointer-ref-c-unsigned-char . nz92e0) (pointer-ref-c-signed-char . nz92df) (pointer->integer . nz92de) (integer->pointer . nz92dd) (pointer? . nz92dc) (shared-errno . nz92db) (%ffi-supported? . nz92d3) (%ffi-pointer->string . nz92d2) (%ffi-call . nz92d1) (%ffi-lookup . nz92d0) (%ffi-open . nz92cf) (null-terminated-utf8->string . nz92ce) (null-terminated-bytevector->string . nz92cd) (%fork . nz92cc) (%pipe . nz92cb) (p . nz92ca) (whereis . nz92ae) (register . nz92ad) (vm-join! . nz92ac) (vm-set-value! . nz92ab) (vm? . nz92aa) (main-vm? . nz92a9) (vm-eval . nz92a8) (vm-self . nz92a7) (vm-start! . nz92a6) (make-vm . nz92a5) (mutex-try-lock! . nz92a4) (mutex-unlock! . nz92a3) (mutex-lock! . nz92a2) (mutex? . nz92a1) (make-mutex . nz92a0) (condition-variable-notify-all! . nz929f) (condition-variable-notify! . nz929e) (condition-variable-wait! . nz929d) (make-condition-variable . nz929c) (string-upcase . nz927f) (string-titlecase . nz927e) (string-normalize-nfkd . nz927d) (string-normalize-nfkc . nz927c) (string-normalize-nfd . nz927b) (string-normalize-nfc . nz927a) (string-foldcase . nz9279) (string-downcase . nz9278) (string-ci>? . nz9277) (string-ci>=? . nz9276) (string-ci=? . nz9275) (string-ci<? . nz9274) (string-ci<=? . nz9273) (char-whitespace? . nz9272) (char-upper-case? . nz9271) (char-title-case? . nz9270) (char-numeric? . nz926f) (char-lower-case? . nz926e) (char-general-category . nz926d) (char-upcase . nz926c) (char-titlecase . nz926b) (char-foldcase . nz926a) (char-downcase . nz9269) (char-ci>? . nz9268) (char-ci>=? . nz9267) (char-ci=? . nz9266) (char-ci<? . nz9265) (char-ci<=? . nz9264) (char-alphabetic? . nz9263) (make-variable-transformer . nz6db8) (identifier? . nz706f) (generate-temporaries . nz705b) (free-identifier=? . nz705d) (syntax->datum . nz7073) (datum->syntax . nz7071) (bound-identifier=? . nz705f) (record-type-descriptor? . nz9262) (record-predicate . nz9261) (record-mutator . nz9260) (record-constructor . nz925f) (record-accessor . nz925e) (make-record-type-descriptor . nz925d) (make-record-constructor-descriptor . nz925c) (record? . nz925b) (record-type-uid . nz925a) (record-type-sealed? . nz9259) (record-type-parent . nz9258) (record-type-opaque? . nz9257) (record-type-name . nz9256) (record-type-generative? . nz9255) (record-type-field-names . nz9254) (record-rtd . nz9253) (record-field-mutable? . nz9252) (delete-file . nz9251) (file-exists? . nz9250) (vector-sort! . nz924f) (vector-sort . nz924e) (list-sort . nz924d) (symbol-hash . nz924c) (string-ci-hash . nz924b) (string-hash . nz924a) (equal-hash . nz9249) (hashtable-equivalence-function . nz9248) (make-hashtable . nz9247) (hashtable-hash-function . nz9246) (make-eqv-hashtable . nz9245) (make-eq-hashtable . nz9244) (hashtable? . nz9243) (hashtable-update! . nz9242) (hashtable-size . nz9241) (hashtable-set! . nz9240) (hashtable-ref . nz923f) (hashtable-mutable? . nz923e) (hashtable-keys . nz923d) (hashtable-entries . nz923c) (hashtable-delete! . nz923b) (hashtable-copy . nz923a) (hashtable-contains? . nz9239) (hashtable-clear! . nz9238) (call-with-output-file . nz9237) (call-with-input-file . nz9236) (write-char . nz9235) (write . nz9234) (with-output-to-file . nz9233) (with-input-from-file . nz9232) (read-char . nz9231) (read . nz9230) (peek-char . nz922f) (open-output-file . nz922e) (open-input-file . nz922d) (newline . nz922c) (display . nz922b) (close-output-port . nz922a) (close-input-port . nz9229) (eof-object? . nz9228) (eof-object . nz9227) (current-error-port . nz9226) (current-output-port . nz9225) (current-input-port . nz9224) (output-port? . nz9223) (input-port? . nz9222) (utf-8-codec . nz9221) (utf-16-codec . nz9220) (transcoder-error-handling-mode . nz921f) (transcoder-eol-style . nz921e) (transcoder-codec . nz921d) (transcoded-port . nz921c) (textual-port? . nz921b) (string->bytevector . nz921a) (standard-output-port . nz9219) (standard-input-port . nz9218) (standard-error-port . nz9217) (set-port-position! . nz9216) (put-u8 . nz9215) (put-string . nz9214) (put-datum . nz9213) (put-char . nz9212) (put-bytevector . nz9211) (port? . nz9210) (port-transcoder . nz920f) (port-position . nz920e) (port-has-set-port-position!? . nz920d) (port-has-port-position? . nz920c) (port-eof? . nz920b) (output-port-buffer-mode . nz920a) (open-string-output-port . nz9209) (open-string-input-port . nz9208) (open-file-output-port . nz9207) (open-file-input/output-port . nz9206) (open-file-input-port . nz9205) (open-bytevector-output-port . nz9204) (open-bytevector-input-port . nz9203) (native-transcoder . nz9202) (native-eol-style . nz9201) (make-transcoder . nz9200) (latin-1-codec . nz91ff) (make-i/o-write-error . nz8c97) (make-i/o-read-error . nz8c82) (make-i/o-port-error . nz8d38) (make-i/o-invalid-position-error . nz8cae) (make-i/o-filename-error . nz8cc9) (make-i/o-file-protection-error . nz8ce2) (make-i/o-file-is-read-only-error . nz8cf7) (make-i/o-file-does-not-exist-error . nz8d21) (make-i/o-file-already-exists-error . nz8d0c) (make-i/o-error . nz8c6d) (make-i/o-encoding-error . nz8d68) (make-i/o-decoding-error . nz8d51) (make-custom-textual-output-port . nz91fe) (make-custom-textual-input/output-port . nz91fd) (make-custom-textual-input-port . nz91fc) (make-custom-binary-output-port . nz91fb) (make-custom-binary-input/output-port . nz91fa) (make-custom-binary-input-port . nz91f9) (make-bytevector . nz91f8) (lookahead-u8 . nz91f7) (lookahead-char . nz91f6) (i/o-write-error? . nz8c99) (i/o-read-error? . nz8c84) (i/o-port-error? . nz8d3c) (i/o-invalid-position-error? . nz8cb2) (i/o-filename-error? . nz8ccd) (i/o-file-protection-error? . nz8ce4) (i/o-file-is-read-only-error? . nz8cf9) (i/o-file-does-not-exist-error? . nz8d23) (i/o-file-already-exists-error? . nz8d0e) (i/o-error? . nz8c6f) (i/o-error-position . nz8cb4) (i/o-error-port . nz8d3e) (i/o-error-filename . nz8ccf) (i/o-encoding-error? . nz8d6c) (i/o-encoding-error-char . nz8d6e) (i/o-decoding-error? . nz8d53) (get-u8 . nz91f5) (get-string-n! . nz91f4) (get-string-n . nz91f3) (get-string-all . nz91f2) (get-line . nz91f1) (get-datum . nz91f0) (get-char . nz91ef) (get-bytevector-some . nz91ee) (get-bytevector-n! . nz91ed) (get-bytevector-n . nz91ec) (get-bytevector-all . nz91eb) (flush-output-port . nz91ea) (close-port . nz91e9) (exit . nz91e1) (command-line . nz8ea5) (string-fill! . nz91e0) (string-set! . nz91df) (set-cdr! . nz91de) (set-car! . nz91dd) (remove . nz91dc) (remv . nz91db) (remp . nz91da) (remq . nz91d9) (partition . nz91d8) (memv . nz91d7) (memq . nz91d6) (memp . nz91d5) (member . nz91d4) (exists . nz91d3) (for-all . nz91d2) (fold-right . nz91d1) (fold-left . nz91d0) (find . nz91cf) (filter . nz91ce) (cons* . nz91cd) (assv . nz91cc) (assq . nz91cb) (assp . nz91ca) (assoc . nz91c9) (call-with-string-output-port . nz91c8) (call-with-port . nz91c7) (call-with-bytevector-output-port . nz91c6) (bytevector->string . nz91c5) (buffer-mode? . nz91c4) (binary-port? . nz91c3) (with-exception-handler . nz91c2) (raise-continuable . nz91c1) (raise . nz91c0) (eval . nz704d) (environment . nz7045) (make-enumeration . nz91bf) (enum-set=? . nz91be) (enum-set-universe . nz91bd) (enum-set-union . nz91bc) (enum-set-subset? . nz91bb) (enum-set-projection . nz91ba) (enum-set-member? . nz91b9) (enum-set-intersection . nz91b8) (enum-set-indexer . nz91b7) (enum-set-difference . nz91b6) (enum-set-constructor . nz91b5) (enum-set-complement . nz91b4) (enum-set->list . nz91b3) (who-condition? . nz8be3) (warning? . nz8b5b) (violation? . nz8b9a) (undefined-violation? . nz8c5a) (syntax-violation? . nz8c41) (syntax-violation-subform . nz8c45) (syntax-violation-form . nz8c43) (syntax-violation . nz706d) (simple-conditions . nz91b2) (serious-condition? . nz8b70) (non-continuable-violation? . nz8bfa) (message-condition? . nz8b44) (make-who-condition . nz8bdf) (make-warning . nz8b59) (make-violation . nz8b98) (make-undefined-violation . nz8c58) (make-syntax-violation . nz8c3b) (make-serious-condition . nz8b6e) (make-non-continuable-violation . nz8bf8) (make-message-condition . nz8b40) (make-lexical-violation . nz8c22) (make-irritants-condition . nz8bc4) (make-implementation-restriction-violation . nz8c0d) (make-error . nz8b83) (make-assertion-violation . nz8bad) (lexical-violation? . nz8c24) (irritants-condition? . nz8bc8) (implementation-restriction-violation? . nz8c0f) (error? . nz8b85) (condition-who . nz8be5) (condition-predicate . nz91b1) (condition-message . nz8b46) (condition-irritants . nz8bca) (condition-accessor . nz91b0) (condition . nz91af) (assertion-violation? . nz8baf) (condition? . nz91ae) (utf32->string . nz91ad) (utf16->string . nz91ac) (utf8->string . nz91ab) (uint-list->bytevector . nz91aa) (u8-list->bytevector . nz91a9) (string->utf8 . nz91a8) (string->utf32 . nz91a7) (string->utf16 . nz91a6) (sint-list->bytevector . nz91a5) (native-endianness . nz91a4) (bytevector? . nz91a3) (bytevector=? . nz91a2) (bytevector-uint-set! . nz91a1) (bytevector-uint-ref . nz91a0) (bytevector-u8-set! . nz919f) (bytevector-u8-ref . nz919e) (bytevector-u64-set! . nz919d) (bytevector-u64-ref . nz919c) (bytevector-u64-native-set! . nz919b) (bytevector-u64-native-ref . nz919a) (bytevector-u32-set! . nz9199) (bytevector-u32-ref . nz9198) (bytevector-u32-native-set! . nz9197) (bytevector-u32-native-ref . nz9196) (bytevector-u16-set! . nz9195) (bytevector-u16-ref . nz9194) (bytevector-u16-native-set! . nz9193) (bytevector-u16-native-ref . nz9192) (bytevector-sint-set! . nz9191) (bytevector-sint-ref . nz9190) (bytevector-s8-set! . nz918f) (bytevector-s8-ref . nz918e) (bytevector-s64-set! . nz918d) (bytevector-s64-ref . nz918c) (bytevector-s64-native-set! . nz918b) (bytevector-s64-native-ref . nz918a) (bytevector-s32-set! . nz9189) (bytevector-s32-ref . nz9188) (bytevector-s32-native-set! . nz9187) (bytevector-s32-native-ref . nz9186) (bytevector-s16-set! . nz9185) (bytevector-s16-ref . nz9184) (bytevector-s16-native-set! . nz9183) (bytevector-s16-native-ref . nz9182) (bytevector-length . nz9181) (bytevector-ieee-single-ref . nz9180) (bytevector-ieee-single-set! . nz917f) (bytevector-ieee-single-native-set! . nz917e) (bytevector-ieee-single-native-ref . nz917d) (bytevector-ieee-double-set! . nz917c) (bytevector-ieee-double-ref . nz917b) (bytevector-ieee-double-native-set! . nz917a) (bytevector-ieee-double-native-ref . nz9179) (bytevector-fill! . nz9178) (bytevector-copy! . nz9177) (bytevector-copy . nz9176) (bytevector->uint-list . nz9175) (bytevector->u8-list . nz9174) (bytevector->sint-list . nz9173) (no-nans-violation? . nz8d98) (no-infinities-violation? . nz8d83) (make-no-nans-violation . nz8d96) (make-no-infinities-violation . nz8d81) (real->flonum . nz9172) (flzero? . nz9171) (fltruncate . nz9170) (fltan . nz916f) (flsqrt . nz916e) (flsin . nz916d) (flround . nz916c) (flpositive? . nz916b) (flonum? . nz916a) (flodd? . nz9169) (flnumerator . nz9168) (flnegative? . nz9167) (flnan? . nz9166) (flmod0 . nz9165) (flmod . nz9164) (flmin . nz9163) (flmax . nz9162) (fllog . nz9161) (flinteger? . nz9160) (flinfinite? . nz915f) (flfloor . nz915e) (flfinite? . nz915d) (flexpt . nz915c) (flexp . nz915b) (fleven? . nz915a) (fldiv0-and-mod0 . nz9159) (fldiv0 . nz9158) (fldiv-and-mod . nz9157) (fldiv . nz9156) (fldenominator . nz9155) (flcos . nz9154) (flceiling . nz9153) (flatan . nz9152) (flasin . nz9151) (flacos . nz9150) (flabs . nz914f) (fl>? . nz914e) (fl>=? . nz914d) (fl=? . nz914c) (fl<? . nz914b) (fl<=? . nz914a) (fl/ . nz9149) (fl- . nz9148) (fl+ . nz9147) (fl* . nz9146) (fixnum->flonum . nz9145) (fxzero? . nz9144) (fxxor . nz9143) (fxrotate-bit-field . nz9142) (fxreverse-bit-field . nz9141) (fxpositive? . nz9140) (fxodd? . nz913f) (fxnot . nz913e) (fxnegative? . nz913d) (fxmod0 . nz913c) (fxmod . nz913b) (fxmin . nz913a) (fxmax . nz9139) (fxlength . nz9138) (fxior . nz9137) (fxif . nz9136) (fxfirst-bit-set . nz9135) (fxeven? . nz9134) (fxdiv0-and-mod0 . nz9133) (fxdiv0 . nz9132) (fxdiv-and-mod . nz9131) (fxdiv . nz9130) (fxcopy-bit-field . nz912f) (fxcopy-bit . nz912e) (fxbit-set? . nz912d) (fxbit-field . nz912c) (fxbit-count . nz912b) (fxarithmetic-shift-right . nz912a) (fxarithmetic-shift-left . nz9129) (fxarithmetic-shift . nz9128) (fxand . nz9127) (fx>? . nz9126) (fx>=? . nz9125) (fx=? . nz9124) (fx<? . nz9123) (fx<=? . nz9122) (fx-/carry . nz9121) (fx- . nz9120) (fx+/carry . nz911f) (fx+ . nz911e) (fx*/carry . nz911d) (fx* . nz911c) (greatest-fixnum . nz911b) (least-fixnum . nz911a) (fixnum-width . nz9119) (fixnum? . nz9118) (bitwise-rotate-bit-field . nz9117) (bitwise-reverse-bit-field . nz9116) (bitwise-length . nz9115) (bitwise-if . nz9114) (bitwise-first-bit-set . nz9113) (bitwise-copy-bit-field . nz9112) (bitwise-copy-bit . nz9111) (bitwise-bit-set? . nz9110) (bitwise-bit-field . nz910f) (bitwise-bit-count . nz910e) (bitwise-xor . nz910d) (bitwise-ior . nz910c) (bitwise-and . nz910b) (bitwise-not . nz910a) (bitwise-arithmetic-shift-right . nz9109) (bitwise-arithmetic-shift-left . nz9108) (bitwise-arithmetic-shift . nz9107) (zero? . nz9106) (vector? . nz9105) (vector-set! . nz9104) (vector-ref . nz9103) (vector-map . nz9102) (vector-length . nz9101) (vector-for-each . nz9100) (vector-fill! . nz90ff) (vector->list . nz90fe) (vector . nz90fd) (values . nz90fc) (truncate . nz90fb) (tan . nz90fa) (symbol? . nz90f9) (symbol=? . nz90f8) (symbol->string . nz90f7) (substring . nz90f6) (string? . nz90f5) (string>? . nz90f4) (string>=? . nz90f3) (string=? . nz90f2) (string<? . nz90f1) (string<=? . nz90f0) (string-ref . nz90ef) (string-length . nz90ee) (string-for-each . nz90ed) (string-copy . nz90ec) (string-append . nz90eb) (string->symbol . nz90ea) (string->number . nz90e9) (string->list . nz90e8) (string . nz90e7) (sqrt . nz90e6) (sin . nz90e5) (round . nz90e4) (reverse . nz90e3) (real? . nz90e2) (real-valued? . nz90e1) (real-part . nz90e0) (rationalize . nz90df) (rational? . nz90de) (rational-valued? . nz90dd) (procedure? . nz90dc) (positive? . nz90db) (pair? . nz90da) (odd? . nz90d9) (numerator . nz90d8) (number? . nz90d7) (number->string . nz90d6) (null? . nz90d5) (not . nz90d4) (negative? . nz90d3) (nan? . nz90d2) (min . nz90d1) (max . nz90d0) (map . nz90cf) (make-vector . nz90ce) (make-string . nz90cd) (make-rectangular . nz90cc) (make-polar . nz90cb) (magnitude . nz90ca) (log . nz90c9) (list? . nz90c8) (list-tail . nz90c7) (list-ref . nz90c6) (list->vector . nz90c5) (list->string . nz90c4) (list . nz90c3) (length . nz90c2) (lcm . nz90c1) (integer? . nz90c0) (integer-valued? . nz90bf) (integer->char . nz90be) (infinite? . nz90bd) (inexact? . nz90bc) (inexact . nz90bb) (imag-part . nz90ba) (gcd . nz90b9) (for-each . nz90b8) (floor . nz90b7) (finite? . nz90b6) (expt . nz90b5) (exp . nz90b4) (exact? . nz90b3) (exact-integer-sqrt . nz90b2) (exact . nz90b1) (even? . nz90b0) (error . nz90af) (eqv? . nz90ae) (equal? . nz90ad) (eq? . nz90ac) (dynamic-wind . nz90ab) (div0-and-mod0 . nz90aa) (mod0 . nz90a9) (div0 . nz90a8) (div-and-mod . nz90a7) (mod . nz90a6) (div . nz90a5) (denominator . nz90a4) (cos . nz90a3) (cons . nz90a2) (complex? . nz90a1) (char? . nz90a0) (char>? . nz909f) (char>=? . nz909e) (char=? . nz909d) (char<? . nz909c) (char<=? . nz909b) (char->integer . nz909a) (ceiling . nz9099) (call-with-values . nz9098) (call/cc . nz9097) (call-with-current-continuation . nz9096) (cddddr . nz9095) (cdddar . nz9094) (cddadr . nz9093) (cddaar . nz9092) (cdaddr . nz9091) (cdadar . nz9090) (cdaadr . nz908f) (cdaaar . nz908e) (cadddr . nz908d) (caddar . nz908c) (cadadr . nz908b) (cadaar . nz908a) (caaddr . nz9089) (caadar . nz9088) (caaadr . nz9087) (caaaar . nz9086) (cdddr . nz9085) (cddar . nz9084) (cdadr . nz9083) (cdaar . nz9082) (caddr . nz9081) (cadar . nz9080) (caadr . nz907f) (caaar . nz907e) (cddr . nz907d) (cdar . nz907c) (cadr . nz907b) (caar . nz907a) (cdr . nz9079) (car . nz9078) (boolean? . nz9077) (boolean=? . nz9076) (atan . nz9075) (assertion-violation . nz9074) (asin . nz9073) (apply . nz9072) (append . nz9071) (angle . nz9070) (acos . nz906f) (abs . nz906e) (/ . nz906d) (* . nz906c) (- . nz906b) (+ . nz906a) (>= . nz9069) (> . nz9068) (= . nz9067) (<= . nz9066) (< . nz9065) (library . nz9064) (&no-nans . nz9063) (&no-infinities . nz9062) (&i/o-encoding . nz9061) (&i/o-decoding . nz9060) (&i/o-port . nz905f) (&i/o-file-does-not-exist . nz905e) (&i/o-file-already-exists . nz905d) (&i/o-file-is-read-only . nz905c) (&i/o-file-protection . nz905b) (&i/o-filename . nz905a) (&i/o-invalid-position . nz9059) (&i/o-write . nz9058) (&i/o-read . nz9057) (&i/o . nz9056) (&undefined . nz9055) (&syntax . nz9054) (&lexical . nz9053) (&implementation-restriction . nz9052) (&non-continuable . nz9051) (&who . nz9050) (&irritants . nz904f) (&assertion . nz904e) (&violation . nz904d) (&error . nz904c) (&serious . nz904b) (&warning . nz904a) (&message . nz9049) (&condition . nz9048) (define-condition-type . nz9047) (define-enumeration . nz9046) (define-record-type . nz9045) (parent-rtd . nz9044) (nongenerative . nz9043) (opaque . nz9042) (sealed . nz9041) (protocol . nz9040) (parent . nz903f) (immutable . nz903e) (mutable . nz903d) (fields . nz903c) (error-handling-mode . nz903b) (file-options . nz903a) (buffer-mode . nz9039) (eol-style . nz9038) (guard . nz9037) (unsyntax-splicing . nz9034) (unsyntax . nz9033) (unquote-splicing . nz9032) (unquote . nz9031) (_ . nz9030) (else . nz902f) (=> . nz902e) (... . nz902d) (assert . nz902c) (endianness . nz902b) (time . nz9029) (do . nz9028) (cond . nz9027) (let* . nz9026) (let*-values . nz9025) (let-values . nz9024) (identifier-syntax . nz9023) (with-syntax . nz9022) (quasisyntax . nz9021) (quasiquote . nz9020) (syntax-rules . nz901f) (include . nz901e) (record-constructor-descriptor . nz901c) (record-type-descriptor . nz901b) (case . nz901a) (unless . nz9018) (when . nz9017) (or . nz9016) (and . nz9015) (if . nz9014) (let . nz9013) (letrec* . nz9012) (letrec . nz9011) (case-lambda . nz900f) (lambda . nz900e) (syntax . nz900d) (syntax-case . nz900c) (quote . nz900b) (letrec-syntax . nz9009) (let-syntax . nz9008) (set! . nz9007) (import . nz9006) (begin . nz9005) (define-syntax . nz9003) (define . nz9002)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9333 '(psyntax null-environment-5) '() '() '() '() '((make-promise . nz91e2) (unquote-splicing . nz9032) (unquote . nz9031) (_ . nz9030) (else . nz902f) (=> . nz902e) (... . nz902d) (delay . nz902a) (do . nz9028) (cond . nz9027) (let* . nz9026) (quasiquote . nz9020) (syntax-rules . nz901f) (case . nz901a) (or . nz9016) (and . nz9015) (if . nz9014) (let . nz9013) (letrec . nz9011) (lambda . nz900e) (quote . nz900b) (letrec-syntax . nz9009) (let-syntax . nz9008) (set! . nz9007) (begin . nz9005) (define-syntax . nz9003) (define . nz9002)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9334 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . nz9277) (string-ci>=? . nz9276) (string-ci=? . nz9275) (string-ci<? . nz9274) (string-ci<=? . nz9273) (char-whitespace? . nz9272) (char-upper-case? . nz9271) (char-numeric? . nz926f) (char-lower-case? . nz926e) (char-upcase . nz926c) (char-downcase . nz9269) (char-ci>? . nz9268) (char-ci>=? . nz9267) (char-ci=? . nz9266) (char-ci<? . nz9265) (char-ci<=? . nz9264) (char-alphabetic? . nz9263) (call-with-output-file . nz9237) (call-with-input-file . nz9236) (write-char . nz9235) (write . nz9234) (with-output-to-file . nz9233) (with-input-from-file . nz9232) (read-char . nz9231) (read . nz9230) (peek-char . nz922f) (open-output-file . nz922e) (open-input-file . nz922d) (newline . nz922c) (display . nz922b) (close-output-port . nz922a) (close-input-port . nz9229) (eof-object . nz9227) (current-output-port . nz9225) (current-input-port . nz9224) (output-port? . nz9223) (input-port? . nz9222) (scheme-report-environment . nz7049) (quotient . nz91e8) (null-environment . nz7047) (remainder . nz91e7) (modulo . nz91e6) (inexact->exact . nz91e5) (force . nz91e4) (exact->inexact . nz91e3) (make-promise . nz91e2) (string-fill! . nz91e0) (string-set! . nz91df) (set-cdr! . nz91de) (set-car! . nz91dd) (memv . nz91d7) (memq . nz91d6) (member . nz91d4) (assv . nz91cc) (assq . nz91cb) (assoc . nz91c9) (eval . nz704d) (zero? . nz9106) (vector? . nz9105) (vector-set! . nz9104) (vector-ref . nz9103) (vector-length . nz9101) (vector-fill! . nz90ff) (vector->list . nz90fe) (vector . nz90fd) (values . nz90fc) (truncate . nz90fb) (tan . nz90fa) (symbol? . nz90f9) (symbol->string . nz90f7) (substring . nz90f6) (string? . nz90f5) (string>? . nz90f4) (string>=? . nz90f3) (string=? . nz90f2) (string<? . nz90f1) (string<=? . nz90f0) (string-ref . nz90ef) (string-length . nz90ee) (string-copy . nz90ec) (string-append . nz90eb) (string->symbol . nz90ea) (string->number . nz90e9) (string->list . nz90e8) (string . nz90e7) (sqrt . nz90e6) (sin . nz90e5) (round . nz90e4) (reverse . nz90e3) (real? . nz90e2) (real-part . nz90e0) (rationalize . nz90df) (rational? . nz90de) (procedure? . nz90dc) (positive? . nz90db) (pair? . nz90da) (odd? . nz90d9) (numerator . nz90d8) (number? . nz90d7) (number->string . nz90d6) (not . nz90d4) (negative? . nz90d3) (min . nz90d1) (max . nz90d0) (map . nz90cf) (make-vector . nz90ce) (make-string . nz90cd) (make-rectangular . nz90cc) (make-polar . nz90cb) (magnitude . nz90ca) (log . nz90c9) (list? . nz90c8) (list-tail . nz90c7) (list-ref . nz90c6) (list->vector . nz90c5) (list->string . nz90c4) (list . nz90c3) (length . nz90c2) (lcm . nz90c1) (integer? . nz90c0) (integer->char . nz90be) (inexact? . nz90bc) (imag-part . nz90ba) (gcd . nz90b9) (for-each . nz90b8) (floor . nz90b7) (expt . nz90b5) (exp . nz90b4) (exact? . nz90b3) (even? . nz90b0) (eqv? . nz90ae) (equal? . nz90ad) (eq? . nz90ac) (dynamic-wind . nz90ab) (denominator . nz90a4) (cos . nz90a3) (cons . nz90a2) (complex? . nz90a1) (char? . nz90a0) (char>? . nz909f) (char>=? . nz909e) (char=? . nz909d) (char<? . nz909c) (char<=? . nz909b) (char->integer . nz909a) (ceiling . nz9099) (call-with-values . nz9098) (call-with-current-continuation . nz9096) (cddddr . nz9095) (cdddar . nz9094) (cddadr . nz9093) (cddaar . nz9092) (cdaddr . nz9091) (cdadar . nz9090) (cdaadr . nz908f) (cdaaar . nz908e) (cadddr . nz908d) (caddar . nz908c) (cadadr . nz908b) (cadaar . nz908a) (caaddr . nz9089) (caadar . nz9088) (caaadr . nz9087) (caaaar . nz9086) (cdddr . nz9085) (cddar . nz9084) (cdadr . nz9083) (cdaar . nz9082) (caddr . nz9081) (cadar . nz9080) (caadr . nz907f) (caaar . nz907e) (cddr . nz907d) (cdar . nz907c) (cadr . nz907b) (caar . nz907a) (cdr . nz9079) (car . nz9078) (boolean? . nz9077) (atan . nz9075) (asin . nz9073) (apply . nz9072) (append . nz9071) (angle . nz9070) (acos . nz906f) (abs . nz906e) (/ . nz906d) (* . nz906c) (- . nz906b) (+ . nz906a) (>= . nz9069) (> . nz9068) (= . nz9067) (<= . nz9066) (< . nz9065) (unquote-splicing . nz9032) (unquote . nz9031) (else . nz902f) (=> . nz902e) (... . nz902d) (delay . nz902a) (do . nz9028) (cond . nz9027) (let* . nz9026) (quasiquote . nz9020) (syntax-rules . nz901f) (case . nz901a) (or . nz9016) (and . nz9015) (if . nz9014) (let . nz9013) (letrec . nz9011) (lambda . nz900e) (quote . nz900b) (letrec-syntax . nz9009) (let-syntax . nz9008) (set! . nz9007) (begin . nz9005) (define-syntax . nz9003) (define . nz9002)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9335 '(psyntax modules) '() '() '() '() '((module . nz9004)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9336 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9337 '(rnrs) '(6) '() '() '() '((regexp? . nz932a) (string-upcase . nz927f) (string-titlecase . nz927e) (string-normalize-nfkd . nz927d) (string-normalize-nfkc . nz927c) (string-normalize-nfd . nz927b) (string-normalize-nfc . nz927a) (string-foldcase . nz9279) (string-downcase . nz9278) (string-ci>? . nz9277) (string-ci>=? . nz9276) (string-ci=? . nz9275) (string-ci<? . nz9274) (string-ci<=? . nz9273) (char-whitespace? . nz9272) (char-upper-case? . nz9271) (char-title-case? . nz9270) (char-numeric? . nz926f) (char-lower-case? . nz926e) (char-general-category . nz926d) (char-upcase . nz926c) (char-titlecase . nz926b) (char-foldcase . nz926a) (char-downcase . nz9269) (char-ci>? . nz9268) (char-ci>=? . nz9267) (char-ci=? . nz9266) (char-ci<? . nz9265) (char-ci<=? . nz9264) (char-alphabetic? . nz9263) (make-variable-transformer . nz6db8) (identifier? . nz706f) (generate-temporaries . nz705b) (free-identifier=? . nz705d) (syntax->datum . nz7073) (datum->syntax . nz7071) (bound-identifier=? . nz705f) (record-type-descriptor? . nz9262) (record-predicate . nz9261) (record-mutator . nz9260) (record-constructor . nz925f) (record-accessor . nz925e) (make-record-type-descriptor . nz925d) (make-record-constructor-descriptor . nz925c) (record? . nz925b) (record-type-uid . nz925a) (record-type-sealed? . nz9259) (record-type-parent . nz9258) (record-type-opaque? . nz9257) (record-type-name . nz9256) (record-type-generative? . nz9255) (record-type-field-names . nz9254) (record-rtd . nz9253) (record-field-mutable? . nz9252) (delete-file . nz9251) (file-exists? . nz9250) (vector-sort! . nz924f) (vector-sort . nz924e) (list-sort . nz924d) (symbol-hash . nz924c) (string-ci-hash . nz924b) (string-hash . nz924a) (equal-hash . nz9249) (hashtable-equivalence-function . nz9248) (make-hashtable . nz9247) (hashtable-hash-function . nz9246) (make-eqv-hashtable . nz9245) (make-eq-hashtable . nz9244) (hashtable? . nz9243) (hashtable-update! . nz9242) (hashtable-size . nz9241) (hashtable-set! . nz9240) (hashtable-ref . nz923f) (hashtable-mutable? . nz923e) (hashtable-keys . nz923d) (hashtable-entries . nz923c) (hashtable-delete! . nz923b) (hashtable-copy . nz923a) (hashtable-contains? . nz9239) (hashtable-clear! . nz9238) (call-with-output-file . nz9237) (call-with-input-file . nz9236) (write-char . nz9235) (write . nz9234) (with-output-to-file . nz9233) (with-input-from-file . nz9232) (read-char . nz9231) (read . nz9230) (peek-char . nz922f) (open-output-file . nz922e) (open-input-file . nz922d) (newline . nz922c) (display . nz922b) (close-output-port . nz922a) (close-input-port . nz9229) (eof-object? . nz9228) (eof-object . nz9227) (current-error-port . nz9226) (current-output-port . nz9225) (current-input-port . nz9224) (output-port? . nz9223) (input-port? . nz9222) (utf-8-codec . nz9221) (utf-16-codec . nz9220) (transcoder-error-handling-mode . nz921f) (transcoder-eol-style . nz921e) (transcoder-codec . nz921d) (transcoded-port . nz921c) (textual-port? . nz921b) (string->bytevector . nz921a) (standard-output-port . nz9219) (standard-input-port . nz9218) (standard-error-port . nz9217) (set-port-position! . nz9216) (put-u8 . nz9215) (put-string . nz9214) (put-datum . nz9213) (put-char . nz9212) (put-bytevector . nz9211) (port? . nz9210) (port-transcoder . nz920f) (port-position . nz920e) (port-has-set-port-position!? . nz920d) (port-has-port-position? . nz920c) (port-eof? . nz920b) (output-port-buffer-mode . nz920a) (open-string-output-port . nz9209) (open-string-input-port . nz9208) (open-file-output-port . nz9207) (open-file-input/output-port . nz9206) (open-file-input-port . nz9205) (open-bytevector-output-port . nz9204) (open-bytevector-input-port . nz9203) (native-transcoder . nz9202) (native-eol-style . nz9201) (make-transcoder . nz9200) (latin-1-codec . nz91ff) (make-i/o-write-error . nz8c97) (make-i/o-read-error . nz8c82) (make-i/o-port-error . nz8d38) (make-i/o-invalid-position-error . nz8cae) (make-i/o-filename-error . nz8cc9) (make-i/o-file-protection-error . nz8ce2) (make-i/o-file-is-read-only-error . nz8cf7) (make-i/o-file-does-not-exist-error . nz8d21) (make-i/o-file-already-exists-error . nz8d0c) (make-i/o-error . nz8c6d) (make-i/o-encoding-error . nz8d68) (make-i/o-decoding-error . nz8d51) (make-custom-textual-output-port . nz91fe) (make-custom-textual-input/output-port . nz91fd) (make-custom-textual-input-port . nz91fc) (make-custom-binary-output-port . nz91fb) (make-custom-binary-input/output-port . nz91fa) (make-custom-binary-input-port . nz91f9) (make-bytevector . nz91f8) (lookahead-u8 . nz91f7) (lookahead-char . nz91f6) (i/o-write-error? . nz8c99) (i/o-read-error? . nz8c84) (i/o-port-error? . nz8d3c) (i/o-invalid-position-error? . nz8cb2) (i/o-filename-error? . nz8ccd) (i/o-file-protection-error? . nz8ce4) (i/o-file-is-read-only-error? . nz8cf9) (i/o-file-does-not-exist-error? . nz8d23) (i/o-file-already-exists-error? . nz8d0e) (i/o-error? . nz8c6f) (i/o-error-position . nz8cb4) (i/o-error-port . nz8d3e) (i/o-error-filename . nz8ccf) (i/o-encoding-error? . nz8d6c) (i/o-encoding-error-char . nz8d6e) (i/o-decoding-error? . nz8d53) (get-u8 . nz91f5) (get-string-n! . nz91f4) (get-string-n . nz91f3) (get-string-all . nz91f2) (get-line . nz91f1) (get-datum . nz91f0) (get-char . nz91ef) (get-bytevector-some . nz91ee) (get-bytevector-n! . nz91ed) (get-bytevector-n . nz91ec) (get-bytevector-all . nz91eb) (flush-output-port . nz91ea) (close-port . nz91e9) (exit . nz91e1) (command-line . nz8ea5) (remove . nz91dc) (remv . nz91db) (remp . nz91da) (remq . nz91d9) (partition . nz91d8) (memv . nz91d7) (memq . nz91d6) (memp . nz91d5) (member . nz91d4) (exists . nz91d3) (for-all . nz91d2) (fold-right . nz91d1) (fold-left . nz91d0) (find . nz91cf) (filter . nz91ce) (cons* . nz91cd) (assv . nz91cc) (assq . nz91cb) (assp . nz91ca) (assoc . nz91c9) (call-with-string-output-port . nz91c8) (call-with-port . nz91c7) (call-with-bytevector-output-port . nz91c6) (bytevector->string . nz91c5) (buffer-mode? . nz91c4) (binary-port? . nz91c3) (with-exception-handler . nz91c2) (raise-continuable . nz91c1) (raise . nz91c0) (make-enumeration . nz91bf) (enum-set=? . nz91be) (enum-set-universe . nz91bd) (enum-set-union . nz91bc) (enum-set-subset? . nz91bb) (enum-set-projection . nz91ba) (enum-set-member? . nz91b9) (enum-set-intersection . nz91b8) (enum-set-indexer . nz91b7) (enum-set-difference . nz91b6) (enum-set-constructor . nz91b5) (enum-set-complement . nz91b4) (enum-set->list . nz91b3) (who-condition? . nz8be3) (warning? . nz8b5b) (violation? . nz8b9a) (undefined-violation? . nz8c5a) (syntax-violation? . nz8c41) (syntax-violation-subform . nz8c45) (syntax-violation-form . nz8c43) (syntax-violation . nz706d) (simple-conditions . nz91b2) (serious-condition? . nz8b70) (non-continuable-violation? . nz8bfa) (message-condition? . nz8b44) (make-who-condition . nz8bdf) (make-warning . nz8b59) (make-violation . nz8b98) (make-undefined-violation . nz8c58) (make-syntax-violation . nz8c3b) (make-serious-condition . nz8b6e) (make-non-continuable-violation . nz8bf8) (make-message-condition . nz8b40) (make-lexical-violation . nz8c22) (make-irritants-condition . nz8bc4) (make-implementation-restriction-violation . nz8c0d) (make-error . nz8b83) (make-assertion-violation . nz8bad) (lexical-violation? . nz8c24) (irritants-condition? . nz8bc8) (implementation-restriction-violation? . nz8c0f) (error? . nz8b85) (condition-who . nz8be5) (condition-predicate . nz91b1) (condition-message . nz8b46) (condition-irritants . nz8bca) (condition-accessor . nz91b0) (condition . nz91af) (assertion-violation? . nz8baf) (condition? . nz91ae) (utf32->string . nz91ad) (utf16->string . nz91ac) (utf8->string . nz91ab) (uint-list->bytevector . nz91aa) (u8-list->bytevector . nz91a9) (string->utf8 . nz91a8) (string->utf32 . nz91a7) (string->utf16 . nz91a6) (sint-list->bytevector . nz91a5) (native-endianness . nz91a4) (bytevector? . nz91a3) (bytevector=? . nz91a2) (bytevector-uint-set! . nz91a1) (bytevector-uint-ref . nz91a0) (bytevector-u8-set! . nz919f) (bytevector-u8-ref . nz919e) (bytevector-u64-set! . nz919d) (bytevector-u64-ref . nz919c) (bytevector-u64-native-set! . nz919b) (bytevector-u64-native-ref . nz919a) (bytevector-u32-set! . nz9199) (bytevector-u32-ref . nz9198) (bytevector-u32-native-set! . nz9197) (bytevector-u32-native-ref . nz9196) (bytevector-u16-set! . nz9195) (bytevector-u16-ref . nz9194) (bytevector-u16-native-set! . nz9193) (bytevector-u16-native-ref . nz9192) (bytevector-sint-set! . nz9191) (bytevector-sint-ref . nz9190) (bytevector-s8-set! . nz918f) (bytevector-s8-ref . nz918e) (bytevector-s64-set! . nz918d) (bytevector-s64-ref . nz918c) (bytevector-s64-native-set! . nz918b) (bytevector-s64-native-ref . nz918a) (bytevector-s32-set! . nz9189) (bytevector-s32-ref . nz9188) (bytevector-s32-native-set! . nz9187) (bytevector-s32-native-ref . nz9186) (bytevector-s16-set! . nz9185) (bytevector-s16-ref . nz9184) (bytevector-s16-native-set! . nz9183) (bytevector-s16-native-ref . nz9182) (bytevector-length . nz9181) (bytevector-ieee-single-ref . nz9180) (bytevector-ieee-single-set! . nz917f) (bytevector-ieee-single-native-set! . nz917e) (bytevector-ieee-single-native-ref . nz917d) (bytevector-ieee-double-set! . nz917c) (bytevector-ieee-double-ref . nz917b) (bytevector-ieee-double-native-set! . nz917a) (bytevector-ieee-double-native-ref . nz9179) (bytevector-fill! . nz9178) (bytevector-copy! . nz9177) (bytevector-copy . nz9176) (bytevector->uint-list . nz9175) (bytevector->u8-list . nz9174) (bytevector->sint-list . nz9173) (no-nans-violation? . nz8d98) (no-infinities-violation? . nz8d83) (make-no-nans-violation . nz8d96) (make-no-infinities-violation . nz8d81) (real->flonum . nz9172) (flzero? . nz9171) (fltruncate . nz9170) (fltan . nz916f) (flsqrt . nz916e) (flsin . nz916d) (flround . nz916c) (flpositive? . nz916b) (flonum? . nz916a) (flodd? . nz9169) (flnumerator . nz9168) (flnegative? . nz9167) (flnan? . nz9166) (flmod0 . nz9165) (flmod . nz9164) (flmin . nz9163) (flmax . nz9162) (fllog . nz9161) (flinteger? . nz9160) (flinfinite? . nz915f) (flfloor . nz915e) (flfinite? . nz915d) (flexpt . nz915c) (flexp . nz915b) (fleven? . nz915a) (fldiv0-and-mod0 . nz9159) (fldiv0 . nz9158) (fldiv-and-mod . nz9157) (fldiv . nz9156) (fldenominator . nz9155) (flcos . nz9154) (flceiling . nz9153) (flatan . nz9152) (flasin . nz9151) (flacos . nz9150) (flabs . nz914f) (fl>? . nz914e) (fl>=? . nz914d) (fl=? . nz914c) (fl<? . nz914b) (fl<=? . nz914a) (fl/ . nz9149) (fl- . nz9148) (fl+ . nz9147) (fl* . nz9146) (fixnum->flonum . nz9145) (fxzero? . nz9144) (fxxor . nz9143) (fxrotate-bit-field . nz9142) (fxreverse-bit-field . nz9141) (fxpositive? . nz9140) (fxodd? . nz913f) (fxnot . nz913e) (fxnegative? . nz913d) (fxmod0 . nz913c) (fxmod . nz913b) (fxmin . nz913a) (fxmax . nz9139) (fxlength . nz9138) (fxior . nz9137) (fxif . nz9136) (fxfirst-bit-set . nz9135) (fxeven? . nz9134) (fxdiv0-and-mod0 . nz9133) (fxdiv0 . nz9132) (fxdiv-and-mod . nz9131) (fxdiv . nz9130) (fxcopy-bit-field . nz912f) (fxcopy-bit . nz912e) (fxbit-set? . nz912d) (fxbit-field . nz912c) (fxbit-count . nz912b) (fxarithmetic-shift-right . nz912a) (fxarithmetic-shift-left . nz9129) (fxarithmetic-shift . nz9128) (fxand . nz9127) (fx>? . nz9126) (fx>=? . nz9125) (fx=? . nz9124) (fx<? . nz9123) (fx<=? . nz9122) (fx-/carry . nz9121) (fx- . nz9120) (fx+/carry . nz911f) (fx+ . nz911e) (fx*/carry . nz911d) (fx* . nz911c) (greatest-fixnum . nz911b) (least-fixnum . nz911a) (fixnum-width . nz9119) (fixnum? . nz9118) (bitwise-rotate-bit-field . nz9117) (bitwise-reverse-bit-field . nz9116) (bitwise-length . nz9115) (bitwise-if . nz9114) (bitwise-first-bit-set . nz9113) (bitwise-copy-bit-field . nz9112) (bitwise-copy-bit . nz9111) (bitwise-bit-set? . nz9110) (bitwise-bit-field . nz910f) (bitwise-bit-count . nz910e) (bitwise-xor . nz910d) (bitwise-ior . nz910c) (bitwise-and . nz910b) (bitwise-not . nz910a) (bitwise-arithmetic-shift-right . nz9109) (bitwise-arithmetic-shift-left . nz9108) (bitwise-arithmetic-shift . nz9107) (zero? . nz9106) (vector? . nz9105) (vector-set! . nz9104) (vector-ref . nz9103) (vector-map . nz9102) (vector-length . nz9101) (vector-for-each . nz9100) (vector-fill! . nz90ff) (vector->list . nz90fe) (vector . nz90fd) (values . nz90fc) (truncate . nz90fb) (tan . nz90fa) (symbol? . nz90f9) (symbol=? . nz90f8) (symbol->string . nz90f7) (substring . nz90f6) (string? . nz90f5) (string>? . nz90f4) (string>=? . nz90f3) (string=? . nz90f2) (string<? . nz90f1) (string<=? . nz90f0) (string-ref . nz90ef) (string-length . nz90ee) (string-for-each . nz90ed) (string-copy . nz90ec) (string-append . nz90eb) (string->symbol . nz90ea) (string->number . nz90e9) (string->list . nz90e8) (string . nz90e7) (sqrt . nz90e6) (sin . nz90e5) (round . nz90e4) (reverse . nz90e3) (real? . nz90e2) (real-valued? . nz90e1) (real-part . nz90e0) (rationalize . nz90df) (rational? . nz90de) (rational-valued? . nz90dd) (procedure? . nz90dc) (positive? . nz90db) (pair? . nz90da) (odd? . nz90d9) (numerator . nz90d8) (number? . nz90d7) (number->string . nz90d6) (null? . nz90d5) (not . nz90d4) (negative? . nz90d3) (nan? . nz90d2) (min . nz90d1) (max . nz90d0) (map . nz90cf) (make-vector . nz90ce) (make-string . nz90cd) (make-rectangular . nz90cc) (make-polar . nz90cb) (magnitude . nz90ca) (log . nz90c9) (list? . nz90c8) (list-tail . nz90c7) (list-ref . nz90c6) (list->vector . nz90c5) (list->string . nz90c4) (list . nz90c3) (length . nz90c2) (lcm . nz90c1) (integer? . nz90c0) (integer-valued? . nz90bf) (integer->char . nz90be) (infinite? . nz90bd) (inexact? . nz90bc) (inexact . nz90bb) (imag-part . nz90ba) (gcd . nz90b9) (for-each . nz90b8) (floor . nz90b7) (finite? . nz90b6) (expt . nz90b5) (exp . nz90b4) (exact? . nz90b3) (exact-integer-sqrt . nz90b2) (exact . nz90b1) (even? . nz90b0) (error . nz90af) (eqv? . nz90ae) (equal? . nz90ad) (eq? . nz90ac) (dynamic-wind . nz90ab) (div0-and-mod0 . nz90aa) (mod0 . nz90a9) (div0 . nz90a8) (div-and-mod . nz90a7) (mod . nz90a6) (div . nz90a5) (denominator . nz90a4) (cos . nz90a3) (cons . nz90a2) (complex? . nz90a1) (char? . nz90a0) (char>? . nz909f) (char>=? . nz909e) (char=? . nz909d) (char<? . nz909c) (char<=? . nz909b) (char->integer . nz909a) (ceiling . nz9099) (call-with-values . nz9098) (call/cc . nz9097) (call-with-current-continuation . nz9096) (cddddr . nz9095) (cdddar . nz9094) (cddadr . nz9093) (cddaar . nz9092) (cdaddr . nz9091) (cdadar . nz9090) (cdaadr . nz908f) (cdaaar . nz908e) (cadddr . nz908d) (caddar . nz908c) (cadadr . nz908b) (cadaar . nz908a) (caaddr . nz9089) (caadar . nz9088) (caaadr . nz9087) (caaaar . nz9086) (cdddr . nz9085) (cddar . nz9084) (cdadr . nz9083) (cdaar . nz9082) (caddr . nz9081) (cadar . nz9080) (caadr . nz907f) (caaar . nz907e) (cddr . nz907d) (cdar . nz907c) (cadr . nz907b) (caar . nz907a) (cdr . nz9079) (car . nz9078) (boolean? . nz9077) (boolean=? . nz9076) (atan . nz9075) (assertion-violation . nz9074) (asin . nz9073) (apply . nz9072) (append . nz9071) (angle . nz9070) (acos . nz906f) (abs . nz906e) (/ . nz906d) (* . nz906c) (- . nz906b) (+ . nz906a) (>= . nz9069) (> . nz9068) (= . nz9067) (<= . nz9066) (< . nz9065) (&no-nans . nz9063) (&no-infinities . nz9062) (&i/o-encoding . nz9061) (&i/o-decoding . nz9060) (&i/o-port . nz905f) (&i/o-file-does-not-exist . nz905e) (&i/o-file-already-exists . nz905d) (&i/o-file-is-read-only . nz905c) (&i/o-file-protection . nz905b) (&i/o-filename . nz905a) (&i/o-invalid-position . nz9059) (&i/o-write . nz9058) (&i/o-read . nz9057) (&i/o . nz9056) (&undefined . nz9055) (&syntax . nz9054) (&lexical . nz9053) (&implementation-restriction . nz9052) (&non-continuable . nz9051) (&who . nz9050) (&irritants . nz904f) (&assertion . nz904e) (&violation . nz904d) (&error . nz904c) (&serious . nz904b) (&warning . nz904a) (&message . nz9049) (&condition . nz9048) (define-condition-type . nz9047) (define-enumeration . nz9046) (define-record-type . nz9045) (parent-rtd . nz9044) (nongenerative . nz9043) (opaque . nz9042) (sealed . nz9041) (protocol . nz9040) (parent . nz903f) (immutable . nz903e) (mutable . nz903d) (fields . nz903c) (error-handling-mode . nz903b) (file-options . nz903a) (buffer-mode . nz9039) (eol-style . nz9038) (guard . nz9037) (unsyntax-splicing . nz9034) (unsyntax . nz9033) (unquote-splicing . nz9032) (unquote . nz9031) (_ . nz9030) (else . nz902f) (=> . nz902e) (... . nz902d) (assert . nz902c) (endianness . nz902b) (do . nz9028) (cond . nz9027) (let* . nz9026) (let*-values . nz9025) (let-values . nz9024) (identifier-syntax . nz9023) (with-syntax . nz9022) (quasisyntax . nz9021) (quasiquote . nz9020) (syntax-rules . nz901f) (record-constructor-descriptor . nz901c) (record-type-descriptor . nz901b) (case . nz901a) (unless . nz9018) (when . nz9017) (or . nz9016) (and . nz9015) (if . nz9014) (let . nz9013) (letrec* . nz9012) (letrec . nz9011) (case-lambda . nz900f) (lambda . nz900e) (syntax . nz900d) (syntax-case . nz900c) (quote . nz900b) (letrec-syntax . nz9009) (let-syntax . nz9008) (set! . nz9007) (begin . nz9005) (define-syntax . nz9003) (define . nz9002)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9338 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . nz7049) (quotient . nz91e8) (null-environment . nz7047) (remainder . nz91e7) (modulo . nz91e6) (inexact->exact . nz91e5) (force . nz91e4) (exact->inexact . nz91e3) (make-promise . nz91e2) (delay . nz902a)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9339 '(rnrs control) '(6) '() '() '() '((do . nz9028) (unless . nz9018) (when . nz9017) (case-lambda . nz900f)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz933a '(rnrs eval) '(6) '() '() '() '((eval . nz704d) (environment . nz7045)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz933b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . nz91de) (set-car! . nz91dd)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz933c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . nz91e0) (string-set! . nz91df)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz933d '(rnrs programs) '(6) '() '() '() '((exit . nz91e1) (command-line . nz8ea5)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz933e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . nz6db8) (identifier? . nz706f) (generate-temporaries . nz705b) (free-identifier=? . nz705d) (syntax->datum . nz7073) (datum->syntax . nz7071) (bound-identifier=? . nz705f) (syntax-violation . nz706d) (unsyntax-splicing . nz9034) (unsyntax . nz9033) (_ . nz9030) (... . nz902d) (with-syntax . nz9022) (quasisyntax . nz9021) (syntax . nz900d) (syntax-case . nz900c)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz933f '(rnrs files) '(6) '() '() '() '((delete-file . nz9251) (file-exists? . nz9250) (make-i/o-write-error . nz8c97) (make-i/o-read-error . nz8c82) (make-i/o-port-error . nz8d38) (make-i/o-invalid-position-error . nz8cae) (make-i/o-filename-error . nz8cc9) (make-i/o-file-protection-error . nz8ce2) (make-i/o-file-is-read-only-error . nz8cf7) (make-i/o-file-does-not-exist-error . nz8d21) (make-i/o-file-already-exists-error . nz8d0c) (make-i/o-error . nz8c6d) (i/o-write-error? . nz8c99) (i/o-read-error? . nz8c84) (i/o-port-error? . nz8d3c) (i/o-invalid-position-error? . nz8cb2) (i/o-filename-error? . nz8ccd) (i/o-file-protection-error? . nz8ce4) (i/o-file-is-read-only-error? . nz8cf9) (i/o-file-does-not-exist-error? . nz8d23) (i/o-file-already-exists-error? . nz8d0e) (i/o-error? . nz8c6f) (i/o-error-position . nz8cb4) (i/o-error-port . nz8d3e) (i/o-error-filename . nz8ccf) (&i/o-port . nz905f) (&i/o-file-does-not-exist . nz905e) (&i/o-file-already-exists . nz905d) (&i/o-file-is-read-only . nz905c) (&i/o-file-protection . nz905b) (&i/o-filename . nz905a) (&i/o-invalid-position . nz9059) (&i/o-write . nz9058) (&i/o-read . nz9057) (&i/o . nz9056)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9340 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . nz924f) (vector-sort . nz924e) (list-sort . nz924d)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9341 '(rnrs base) '(6) '() '() '() '((zero? . nz9106) (vector? . nz9105) (vector-set! . nz9104) (vector-ref . nz9103) (vector-map . nz9102) (vector-length . nz9101) (vector-for-each . nz9100) (vector-fill! . nz90ff) (vector->list . nz90fe) (vector . nz90fd) (values . nz90fc) (truncate . nz90fb) (tan . nz90fa) (symbol? . nz90f9) (symbol=? . nz90f8) (symbol->string . nz90f7) (substring . nz90f6) (string? . nz90f5) (string>? . nz90f4) (string>=? . nz90f3) (string=? . nz90f2) (string<? . nz90f1) (string<=? . nz90f0) (string-ref . nz90ef) (string-length . nz90ee) (string-for-each . nz90ed) (string-copy . nz90ec) (string-append . nz90eb) (string->symbol . nz90ea) (string->number . nz90e9) (string->list . nz90e8) (string . nz90e7) (sqrt . nz90e6) (sin . nz90e5) (round . nz90e4) (reverse . nz90e3) (real? . nz90e2) (real-valued? . nz90e1) (real-part . nz90e0) (rationalize . nz90df) (rational? . nz90de) (rational-valued? . nz90dd) (procedure? . nz90dc) (positive? . nz90db) (pair? . nz90da) (odd? . nz90d9) (numerator . nz90d8) (number? . nz90d7) (number->string . nz90d6) (null? . nz90d5) (not . nz90d4) (negative? . nz90d3) (nan? . nz90d2) (min . nz90d1) (max . nz90d0) (map . nz90cf) (make-vector . nz90ce) (make-string . nz90cd) (make-rectangular . nz90cc) (make-polar . nz90cb) (magnitude . nz90ca) (log . nz90c9) (list? . nz90c8) (list-tail . nz90c7) (list-ref . nz90c6) (list->vector . nz90c5) (list->string . nz90c4) (list . nz90c3) (length . nz90c2) (lcm . nz90c1) (integer? . nz90c0) (integer-valued? . nz90bf) (integer->char . nz90be) (infinite? . nz90bd) (inexact? . nz90bc) (inexact . nz90bb) (imag-part . nz90ba) (gcd . nz90b9) (for-each . nz90b8) (floor . nz90b7) (finite? . nz90b6) (expt . nz90b5) (exp . nz90b4) (exact? . nz90b3) (exact-integer-sqrt . nz90b2) (exact . nz90b1) (even? . nz90b0) (error . nz90af) (eqv? . nz90ae) (equal? . nz90ad) (eq? . nz90ac) (dynamic-wind . nz90ab) (div0-and-mod0 . nz90aa) (mod0 . nz90a9) (div0 . nz90a8) (div-and-mod . nz90a7) (mod . nz90a6) (div . nz90a5) (denominator . nz90a4) (cos . nz90a3) (cons . nz90a2) (complex? . nz90a1) (char? . nz90a0) (char>? . nz909f) (char>=? . nz909e) (char=? . nz909d) (char<? . nz909c) (char<=? . nz909b) (char->integer . nz909a) (ceiling . nz9099) (call-with-values . nz9098) (call/cc . nz9097) (call-with-current-continuation . nz9096) (cddddr . nz9095) (cdddar . nz9094) (cddadr . nz9093) (cddaar . nz9092) (cdaddr . nz9091) (cdadar . nz9090) (cdaadr . nz908f) (cdaaar . nz908e) (cadddr . nz908d) (caddar . nz908c) (cadadr . nz908b) (cadaar . nz908a) (caaddr . nz9089) (caadar . nz9088) (caaadr . nz9087) (caaaar . nz9086) (cdddr . nz9085) (cddar . nz9084) (cdadr . nz9083) (cdaar . nz9082) (caddr . nz9081) (cadar . nz9080) (caadr . nz907f) (caaar . nz907e) (cddr . nz907d) (cdar . nz907c) (cadr . nz907b) (caar . nz907a) (cdr . nz9079) (car . nz9078) (boolean? . nz9077) (boolean=? . nz9076) (atan . nz9075) (assertion-violation . nz9074) (asin . nz9073) (apply . nz9072) (append . nz9071) (angle . nz9070) (acos . nz906f) (abs . nz906e) (/ . nz906d) (* . nz906c) (- . nz906b) (+ . nz906a) (>= . nz9069) (> . nz9068) (= . nz9067) (<= . nz9066) (< . nz9065) (unquote-splicing . nz9032) (unquote . nz9031) (_ . nz9030) (else . nz902f) (=> . nz902e) (... . nz902d) (assert . nz902c) (cond . nz9027) (let* . nz9026) (let*-values . nz9025) (let-values . nz9024) (identifier-syntax . nz9023) (quasiquote . nz9020) (syntax-rules . nz901f) (case . nz901a) (or . nz9016) (and . nz9015) (if . nz9014) (let . nz9013) (letrec* . nz9012) (letrec . nz9011) (lambda . nz900e) (quote . nz900b) (letrec-syntax . nz9009) (let-syntax . nz9008) (set! . nz9007) (begin . nz9005) (define-syntax . nz9003) (define . nz9002)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9342 '(rnrs lists) '(6) '() '() '() '((remove . nz91dc) (remv . nz91db) (remp . nz91da) (remq . nz91d9) (partition . nz91d8) (memv . nz91d7) (memq . nz91d6) (memp . nz91d5) (member . nz91d4) (exists . nz91d3) (for-all . nz91d2) (fold-right . nz91d1) (fold-left . nz91d0) (find . nz91cf) (filter . nz91ce) (cons* . nz91cd) (assv . nz91cc) (assq . nz91cb) (assp . nz91ca) (assoc . nz91c9)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9343 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . nz9237) (call-with-input-file . nz9236) (write-char . nz9235) (write . nz9234) (with-output-to-file . nz9233) (with-input-from-file . nz9232) (read-char . nz9231) (read . nz9230) (peek-char . nz922f) (open-output-file . nz922e) (open-input-file . nz922d) (newline . nz922c) (display . nz922b) (close-output-port . nz922a) (close-input-port . nz9229) (eof-object? . nz9228) (eof-object . nz9227) (current-error-port . nz9226) (current-output-port . nz9225) (current-input-port . nz9224) (output-port? . nz9223) (input-port? . nz9222) (make-i/o-write-error . nz8c97) (make-i/o-read-error . nz8c82) (make-i/o-port-error . nz8d38) (make-i/o-invalid-position-error . nz8cae) (make-i/o-filename-error . nz8cc9) (make-i/o-file-protection-error . nz8ce2) (make-i/o-file-is-read-only-error . nz8cf7) (make-i/o-file-does-not-exist-error . nz8d21) (make-i/o-file-already-exists-error . nz8d0c) (make-i/o-error . nz8c6d) (i/o-write-error? . nz8c99) (i/o-read-error? . nz8c84) (i/o-port-error? . nz8d3c) (i/o-invalid-position-error? . nz8cb2) (i/o-filename-error? . nz8ccd) (i/o-file-protection-error? . nz8ce4) (i/o-file-is-read-only-error? . nz8cf9) (i/o-file-does-not-exist-error? . nz8d23) (i/o-file-already-exists-error? . nz8d0e) (i/o-error? . nz8c6f) (i/o-error-position . nz8cb4) (i/o-error-port . nz8d3e) (i/o-error-filename . nz8ccf) (&i/o-port . nz905f) (&i/o-file-does-not-exist . nz905e) (&i/o-file-already-exists . nz905d) (&i/o-file-is-read-only . nz905c) (&i/o-file-protection . nz905b) (&i/o-filename . nz905a) (&i/o-invalid-position . nz9059) (&i/o-write . nz9058) (&i/o-read . nz9057) (&i/o . nz9056)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9344 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . nz91f8) (utf32->string . nz91ad) (utf16->string . nz91ac) (utf8->string . nz91ab) (uint-list->bytevector . nz91aa) (u8-list->bytevector . nz91a9) (string->utf8 . nz91a8) (string->utf32 . nz91a7) (string->utf16 . nz91a6) (sint-list->bytevector . nz91a5) (native-endianness . nz91a4) (bytevector? . nz91a3) (bytevector=? . nz91a2) (bytevector-uint-set! . nz91a1) (bytevector-uint-ref . nz91a0) (bytevector-u8-set! . nz919f) (bytevector-u8-ref . nz919e) (bytevector-u64-set! . nz919d) (bytevector-u64-ref . nz919c) (bytevector-u64-native-set! . nz919b) (bytevector-u64-native-ref . nz919a) (bytevector-u32-set! . nz9199) (bytevector-u32-ref . nz9198) (bytevector-u32-native-set! . nz9197) (bytevector-u32-native-ref . nz9196) (bytevector-u16-set! . nz9195) (bytevector-u16-ref . nz9194) (bytevector-u16-native-set! . nz9193) (bytevector-u16-native-ref . nz9192) (bytevector-sint-set! . nz9191) (bytevector-sint-ref . nz9190) (bytevector-s8-set! . nz918f) (bytevector-s8-ref . nz918e) (bytevector-s64-set! . nz918d) (bytevector-s64-ref . nz918c) (bytevector-s64-native-set! . nz918b) (bytevector-s64-native-ref . nz918a) (bytevector-s32-set! . nz9189) (bytevector-s32-ref . nz9188) (bytevector-s32-native-set! . nz9187) (bytevector-s32-native-ref . nz9186) (bytevector-s16-set! . nz9185) (bytevector-s16-ref . nz9184) (bytevector-s16-native-set! . nz9183) (bytevector-s16-native-ref . nz9182) (bytevector-length . nz9181) (bytevector-ieee-single-ref . nz9180) (bytevector-ieee-single-set! . nz917f) (bytevector-ieee-single-native-set! . nz917e) (bytevector-ieee-single-native-ref . nz917d) (bytevector-ieee-double-set! . nz917c) (bytevector-ieee-double-ref . nz917b) (bytevector-ieee-double-native-set! . nz917a) (bytevector-ieee-double-native-ref . nz9179) (bytevector-fill! . nz9178) (bytevector-copy! . nz9177) (bytevector-copy . nz9176) (bytevector->uint-list . nz9175) (bytevector->u8-list . nz9174) (bytevector->sint-list . nz9173) (endianness . nz902b)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9345 '(rnrs unicode) '(6) '() '() '() '((string-upcase . nz927f) (string-titlecase . nz927e) (string-normalize-nfkd . nz927d) (string-normalize-nfkc . nz927c) (string-normalize-nfd . nz927b) (string-normalize-nfc . nz927a) (string-foldcase . nz9279) (string-downcase . nz9278) (string-ci>? . nz9277) (string-ci>=? . nz9276) (string-ci=? . nz9275) (string-ci<? . nz9274) (string-ci<=? . nz9273) (char-whitespace? . nz9272) (char-upper-case? . nz9271) (char-title-case? . nz9270) (char-numeric? . nz926f) (char-lower-case? . nz926e) (char-general-category . nz926d) (char-upcase . nz926c) (char-titlecase . nz926b) (char-foldcase . nz926a) (char-downcase . nz9269) (char-ci>? . nz9268) (char-ci>=? . nz9267) (char-ci=? . nz9266) (char-ci<? . nz9265) (char-ci<=? . nz9264) (char-alphabetic? . nz9263)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9346 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . nz91c2) (raise-continuable . nz91c1) (raise . nz91c0) (guard . nz9037) (else . nz902f) (=> . nz902e)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9347 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . nz9117) (bitwise-reverse-bit-field . nz9116) (bitwise-length . nz9115) (bitwise-if . nz9114) (bitwise-first-bit-set . nz9113) (bitwise-copy-bit-field . nz9112) (bitwise-copy-bit . nz9111) (bitwise-bit-set? . nz9110) (bitwise-bit-field . nz910f) (bitwise-bit-count . nz910e) (bitwise-xor . nz910d) (bitwise-ior . nz910c) (bitwise-and . nz910b) (bitwise-not . nz910a) (bitwise-arithmetic-shift-right . nz9109) (bitwise-arithmetic-shift-left . nz9108) (bitwise-arithmetic-shift . nz9107)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9348 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . nz9144) (fxxor . nz9143) (fxrotate-bit-field . nz9142) (fxreverse-bit-field . nz9141) (fxpositive? . nz9140) (fxodd? . nz913f) (fxnot . nz913e) (fxnegative? . nz913d) (fxmod0 . nz913c) (fxmod . nz913b) (fxmin . nz913a) (fxmax . nz9139) (fxlength . nz9138) (fxior . nz9137) (fxif . nz9136) (fxfirst-bit-set . nz9135) (fxeven? . nz9134) (fxdiv0-and-mod0 . nz9133) (fxdiv0 . nz9132) (fxdiv-and-mod . nz9131) (fxdiv . nz9130) (fxcopy-bit-field . nz912f) (fxcopy-bit . nz912e) (fxbit-set? . nz912d) (fxbit-field . nz912c) (fxbit-count . nz912b) (fxarithmetic-shift-right . nz912a) (fxarithmetic-shift-left . nz9129) (fxarithmetic-shift . nz9128) (fxand . nz9127) (fx>? . nz9126) (fx>=? . nz9125) (fx=? . nz9124) (fx<? . nz9123) (fx<=? . nz9122) (fx-/carry . nz9121) (fx- . nz9120) (fx+/carry . nz911f) (fx+ . nz911e) (fx*/carry . nz911d) (fx* . nz911c) (greatest-fixnum . nz911b) (least-fixnum . nz911a) (fixnum-width . nz9119) (fixnum? . nz9118)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9349 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . nz8d98) (no-infinities-violation? . nz8d83) (make-no-nans-violation . nz8d96) (make-no-infinities-violation . nz8d81) (real->flonum . nz9172) (flzero? . nz9171) (fltruncate . nz9170) (fltan . nz916f) (flsqrt . nz916e) (flsin . nz916d) (flround . nz916c) (flpositive? . nz916b) (flonum? . nz916a) (flodd? . nz9169) (flnumerator . nz9168) (flnegative? . nz9167) (flnan? . nz9166) (flmod0 . nz9165) (flmod . nz9164) (flmin . nz9163) (flmax . nz9162) (fllog . nz9161) (flinteger? . nz9160) (flinfinite? . nz915f) (flfloor . nz915e) (flfinite? . nz915d) (flexpt . nz915c) (flexp . nz915b) (fleven? . nz915a) (fldiv0-and-mod0 . nz9159) (fldiv0 . nz9158) (fldiv-and-mod . nz9157) (fldiv . nz9156) (fldenominator . nz9155) (flcos . nz9154) (flceiling . nz9153) (flatan . nz9152) (flasin . nz9151) (flacos . nz9150) (flabs . nz914f) (fl>? . nz914e) (fl>=? . nz914d) (fl=? . nz914c) (fl<? . nz914b) (fl<=? . nz914a) (fl/ . nz9149) (fl- . nz9148) (fl+ . nz9147) (fl* . nz9146) (fixnum->flonum . nz9145) (&no-nans . nz9063) (&no-infinities . nz9062)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz934a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . nz924c) (string-ci-hash . nz924b) (string-hash . nz924a) (equal-hash . nz9249) (hashtable-equivalence-function . nz9248) (make-hashtable . nz9247) (hashtable-hash-function . nz9246) (make-eqv-hashtable . nz9245) (make-eq-hashtable . nz9244) (hashtable? . nz9243) (hashtable-update! . nz9242) (hashtable-size . nz9241) (hashtable-set! . nz9240) (hashtable-ref . nz923f) (hashtable-mutable? . nz923e) (hashtable-keys . nz923d) (hashtable-entries . nz923c) (hashtable-delete! . nz923b) (hashtable-copy . nz923a) (hashtable-contains? . nz9239) (hashtable-clear! . nz9238)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz934b '(rnrs io ports) '(6) '() '() '() '((eof-object? . nz9228) (eof-object . nz9227) (current-error-port . nz9226) (current-output-port . nz9225) (current-input-port . nz9224) (output-port? . nz9223) (input-port? . nz9222) (utf-8-codec . nz9221) (utf-16-codec . nz9220) (transcoder-error-handling-mode . nz921f) (transcoder-eol-style . nz921e) (transcoder-codec . nz921d) (transcoded-port . nz921c) (textual-port? . nz921b) (string->bytevector . nz921a) (standard-output-port . nz9219) (standard-input-port . nz9218) (standard-error-port . nz9217) (set-port-position! . nz9216) (put-u8 . nz9215) (put-string . nz9214) (put-datum . nz9213) (put-char . nz9212) (put-bytevector . nz9211) (port? . nz9210) (port-transcoder . nz920f) (port-position . nz920e) (port-has-set-port-position!? . nz920d) (port-has-port-position? . nz920c) (port-eof? . nz920b) (output-port-buffer-mode . nz920a) (open-string-output-port . nz9209) (open-string-input-port . nz9208) (open-file-output-port . nz9207) (open-file-input/output-port . nz9206) (open-file-input-port . nz9205) (open-bytevector-output-port . nz9204) (open-bytevector-input-port . nz9203) (native-transcoder . nz9202) (native-eol-style . nz9201) (make-transcoder . nz9200) (latin-1-codec . nz91ff) (make-i/o-write-error . nz8c97) (make-i/o-read-error . nz8c82) (make-i/o-port-error . nz8d38) (make-i/o-invalid-position-error . nz8cae) (make-i/o-filename-error . nz8cc9) (make-i/o-file-protection-error . nz8ce2) (make-i/o-file-is-read-only-error . nz8cf7) (make-i/o-file-does-not-exist-error . nz8d21) (make-i/o-file-already-exists-error . nz8d0c) (make-i/o-error . nz8c6d) (make-i/o-encoding-error . nz8d68) (make-i/o-decoding-error . nz8d51) (make-custom-textual-output-port . nz91fe) (make-custom-textual-input/output-port . nz91fd) (make-custom-textual-input-port . nz91fc) (make-custom-binary-output-port . nz91fb) (make-custom-binary-input/output-port . nz91fa) (make-custom-binary-input-port . nz91f9) (lookahead-u8 . nz91f7) (lookahead-char . nz91f6) (i/o-write-error? . nz8c99) (i/o-read-error? . nz8c84) (i/o-port-error? . nz8d3c) (i/o-invalid-position-error? . nz8cb2) (i/o-filename-error? . nz8ccd) (i/o-file-protection-error? . nz8ce4) (i/o-file-is-read-only-error? . nz8cf9) (i/o-file-does-not-exist-error? . nz8d23) (i/o-file-already-exists-error? . nz8d0e) (i/o-error? . nz8c6f) (i/o-error-position . nz8cb4) (i/o-error-port . nz8d3e) (i/o-error-filename . nz8ccf) (i/o-encoding-error? . nz8d6c) (i/o-encoding-error-char . nz8d6e) (i/o-decoding-error? . nz8d53) (get-u8 . nz91f5) (get-string-n! . nz91f4) (get-string-n . nz91f3) (get-string-all . nz91f2) (get-line . nz91f1) (get-datum . nz91f0) (get-char . nz91ef) (get-bytevector-some . nz91ee) (get-bytevector-n! . nz91ed) (get-bytevector-n . nz91ec) (get-bytevector-all . nz91eb) (flush-output-port . nz91ea) (close-port . nz91e9) (call-with-string-output-port . nz91c8) (call-with-port . nz91c7) (call-with-bytevector-output-port . nz91c6) (bytevector->string . nz91c5) (buffer-mode? . nz91c4) (binary-port? . nz91c3) (&i/o-encoding . nz9061) (&i/o-decoding . nz9060) (&i/o-port . nz905f) (&i/o-file-does-not-exist . nz905e) (&i/o-file-already-exists . nz905d) (&i/o-file-is-read-only . nz905c) (&i/o-file-protection . nz905b) (&i/o-filename . nz905a) (&i/o-invalid-position . nz9059) (&i/o-write . nz9058) (&i/o-read . nz9057) (&i/o . nz9056) (error-handling-mode . nz903b) (file-options . nz903a) (buffer-mode . nz9039) (eol-style . nz9038)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz934c '(rnrs enums) '(6) '() '() '() '((make-enumeration . nz91bf) (enum-set=? . nz91be) (enum-set-universe . nz91bd) (enum-set-union . nz91bc) (enum-set-subset? . nz91bb) (enum-set-projection . nz91ba) (enum-set-member? . nz91b9) (enum-set-intersection . nz91b8) (enum-set-indexer . nz91b7) (enum-set-difference . nz91b6) (enum-set-constructor . nz91b5) (enum-set-complement . nz91b4) (enum-set->list . nz91b3) (define-enumeration . nz9046)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz934d '(rnrs conditions) '(6) '() '() '() '((who-condition? . nz8be3) (warning? . nz8b5b) (violation? . nz8b9a) (undefined-violation? . nz8c5a) (syntax-violation? . nz8c41) (syntax-violation-subform . nz8c45) (syntax-violation-form . nz8c43) (syntax-violation . nz706d) (simple-conditions . nz91b2) (serious-condition? . nz8b70) (non-continuable-violation? . nz8bfa) (message-condition? . nz8b44) (make-who-condition . nz8bdf) (make-warning . nz8b59) (make-violation . nz8b98) (make-undefined-violation . nz8c58) (make-syntax-violation . nz8c3b) (make-serious-condition . nz8b6e) (make-non-continuable-violation . nz8bf8) (make-message-condition . nz8b40) (make-lexical-violation . nz8c22) (make-irritants-condition . nz8bc4) (make-implementation-restriction-violation . nz8c0d) (make-error . nz8b83) (make-assertion-violation . nz8bad) (lexical-violation? . nz8c24) (irritants-condition? . nz8bc8) (implementation-restriction-violation? . nz8c0f) (error? . nz8b85) (condition-who . nz8be5) (condition-predicate . nz91b1) (condition-message . nz8b46) (condition-irritants . nz8bca) (condition-accessor . nz91b0) (condition . nz91af) (assertion-violation? . nz8baf) (condition? . nz91ae) (&undefined . nz9055) (&syntax . nz9054) (&lexical . nz9053) (&implementation-restriction . nz9052) (&non-continuable . nz9051) (&who . nz9050) (&irritants . nz904f) (&assertion . nz904e) (&violation . nz904d) (&error . nz904c) (&serious . nz904b) (&warning . nz904a) (&message . nz9049) (&condition . nz9048) (define-condition-type . nz9047)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz934e '(rnrs records inspection) '(6) '() '() '() '((record? . nz925b) (record-type-uid . nz925a) (record-type-sealed? . nz9259) (record-type-parent . nz9258) (record-type-opaque? . nz9257) (record-type-name . nz9256) (record-type-generative? . nz9255) (record-type-field-names . nz9254) (record-rtd . nz9253) (record-field-mutable? . nz9252)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz934f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . nz9262) (record-predicate . nz9261) (record-mutator . nz9260) (record-constructor . nz925f) (record-accessor . nz925e) (make-record-type-descriptor . nz925d) (make-record-constructor-descriptor . nz925c)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9350 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . nz9045) (parent-rtd . nz9044) (nongenerative . nz9043) (opaque . nz9042) (sealed . nz9041) (protocol . nz9040) (parent . nz903f) (immutable . nz903e) (mutable . nz903d) (fields . nz903c) (record-constructor-descriptor . nz901c) (record-type-descriptor . nz901b)) '() values values '#f '#f '#t '#f) (nz6b9a@nz69d6@install-library 'nz9351 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . nz8d9c) (&no-nans-rtd . nz8d9a) (&no-infinities-rcd . nz8d87) (&no-infinities-rtd . nz8d85) (&i/o-encoding-rcd . nz8d72) (&i/o-encoding-rtd . nz8d70) (&i/o-decoding-rcd . nz8d57) (&i/o-decoding-rtd . nz8d55) (&i/o-port-rcd . nz8d42) (&i/o-port-rtd . nz8d40) (&i/o-file-does-not-exist-rcd . nz8d27) (&i/o-file-does-not-exist-rtd . nz8d25) (&i/o-file-already-exists-rcd . nz8d12) (&i/o-file-already-exists-rtd . nz8d10) (&i/o-file-is-read-only-rcd . nz8cfd) (&i/o-file-is-read-only-rtd . nz8cfb) (&i/o-file-protection-rcd . nz8ce8) (&i/o-file-protection-rtd . nz8ce6) (&i/o-filename-rcd . nz8cd3) (&i/o-filename-rtd . nz8cd1) (&i/o-invalid-position-rcd . nz8cb8) (&i/o-invalid-position-rtd . nz8cb6) (&i/o-write-rcd . nz8c9d) (&i/o-write-rtd . nz8c9b) (&i/o-read-rcd . nz8c88) (&i/o-read-rtd . nz8c86) (&i/o-rcd . nz8c73) (&i/o-rtd . nz8c71) (&undefined-rcd . nz8c5e) (&undefined-rtd . nz8c5c) (&syntax-rcd . nz8c49) (&syntax-rtd . nz8c47) (&lexical-rcd . nz8c28) (&lexical-rtd . nz8c26) (&implementation-restriction-rcd . nz8c13) (&implementation-restriction-rtd . nz8c11) (&non-continuable-rcd . nz8bfe) (&non-continuable-rtd . nz8bfc) (&who-rcd . nz8be9) (&who-rtd . nz8be7) (&irritants-rcd . nz8bce) (&irritants-rtd . nz8bcc) (&assertion-rcd . nz8bb3) (&assertion-rtd . nz8bb1) (&violation-rcd . nz8b9e) (&violation-rtd . nz8b9c) (&error-rcd . nz8b89) (&error-rtd . nz8b87) (&serious-rcd . nz8b74) (&serious-rtd . nz8b72) (&warning-rcd . nz8b5f) (&warning-rtd . nz8b5d) (&message-rcd . nz8b4a) (&message-rtd . nz8b48) (&condition-rcd . nz8aeb) (&condition-rtd . nz8ae9) (syntax-error . nz7069) (syntax-dispatch . nz6f8d) (pretty-print . nz9331) (eval-core . nz9330) (set-symbol-value! . nz932f) (symbol-value . nz932e) (gensym . nz932d) (void . nz932c) (load . nz8eab) (interaction-environment . nz707b) (char-ready? . nz932b) (regexp? . nz932a) (read-line . nz9329) (gensym-prefix-set! . nz9328) (ungensym . nz9327) (alist->eq-hash-table . nz9326) (assoc-ref . nz9325) (print . nz9324) (format . nz9323) (host-os . nz9322) (library-path . nz69b5) (standard-library-path . nz9321) (file-newer? . nz9320) (stat-mtime . nz931f) (write-to-file . nz931e) (file->sexp-list . nz931d) (file->list . nz931c) (file->string . nz931b) (digit->integer . nz931a) (call-with-string-input-port . nz9319) (call-with-string-io . nz9318) (string-split . nz9317) (bytevector-for-each . nz9316) (string->regexp . nz9315) (rxmatch . nz9314) (regexp-replace-all . nz9313) (hashtable-for-each . nz9312) (mosh-cache-dir . nz679f) (call-process . nz9311) (local-tz-offset . nz9310) (microseconds . nz930f) (directory-list . nz930e) (set-current-directory! . nz930d) (expand-path . nz930c) (current-directory . nz930b) (%spawn . nz930a) (%waitpid . nz9309) (simple-struct-name . nz9308) (simple-struct-set! . nz9307) (simple-struct-ref . nz9306) (make-simple-struct . nz9305) (simple-struct? . nz9304) (pointer-ref-c-int64 . nz9303) (pointer-ref-c-int32 . nz9302) (pointer-ref-c-int16 . nz9301) (pointer-ref-c-int8 . nz9300) (pointer-ref-c-uint64 . nz92ff) (pointer-ref-c-uint32 . nz92fe) (pointer-ref-c-uint16 . nz92fd) (pointer-ref-c-uint8 . nz92fc) (pointer-set-c-uint64! . nz92fb) (pointer-set-c-uint32! . nz92fa) (pointer-set-c-uint16! . nz92f9) (pointer-set-c-uint8! . nz92f8) (pointer-set-c-int64! . nz92f7) (pointer-set-c-int32! . nz92f6) (pointer-set-c-int16! . nz92f5) (pointer-set-c-int8! . nz92f4) (pointer-set-c-pointer! . nz92f3) (pointer-set-c-double! . nz92f2) (pointer-set-c-float! . nz92f1) (pointer-set-c-long-long! . nz92f0) (pointer-set-c-long! . nz92ef) (pointer-set-c-int! . nz92ee) (pointer-set-c-short! . nz92ed) (pointer-set-c-char! . nz92ec) (pointer-ref-c-pointer . nz92eb) (pointer-ref-c-double . nz92ea) (pointer-ref-c-float . nz92e9) (pointer-ref-c-unsigned-long-long . nz92e8) (pointer-ref-c-signed-long-long . nz92e7) (pointer-ref-c-unsigned-long . nz92e6) (pointer-ref-c-signed-long . nz92e5) (pointer-ref-c-unsigned-int . nz92e4) (pointer-ref-c-signed-int . nz92e3) (pointer-ref-c-unsigned-short . nz92e2) (pointer-ref-c-signed-short . nz92e1) (pointer-ref-c-unsigned-char . nz92e0) (pointer-ref-c-signed-char . nz92df) (pointer->integer . nz92de) (integer->pointer . nz92dd) (pointer? . nz92dc) (shared-errno . nz92db) (get-c-address . nz92da) (obj->integer . nz92d9) (u8-list->c-procedure . nz92d8) (%ffi-free-c-callback-trampoline . nz92d7) (%ffi-make-c-callback-trampoline . nz92d6) (%ffi-free . nz92d5) (%ffi-malloc . nz92d4) (%ffi-supported? . nz92d3) (%ffi-pointer->string . nz92d2) (%ffi-call . nz92d1) (%ffi-lookup . nz92d0) (%ffi-open . nz92cf) (null-terminated-utf8->string . nz92ce) (null-terminated-bytevector->string . nz92cd) (%fork . nz92cc) (%pipe . nz92cb) (p . nz92ca) (open-output-string . nz92c9) (get-output-string . nz92c8) (file-stat-ctime . nz92c7) (file-stat-atime . nz92c6) (file-stat-mtime . nz92c5) (file-size-in-bytes . nz92c4) (file-writable? . nz92c3) (file-executable? . nz92c2) (file-readable? . nz92c1) (file-regular? . nz92c0) (file-symbolic-link? . nz92bf) (file-directory? . nz92be) (create-symbolic-link . nz92bd) (rename-file . nz92bc) (delete-directory . nz92bb) (create-directory . nz92ba) (create-mosh-cache-dir . nz92b9) (get-environment-variables . nz92b8) (current-exception-handler . nz92b7) (get-environment-variable . nz92b6) (join-wraps . nz92b5) (id->real-label . nz92b4) (same-marks? . nz92b3) (same-marks*? . nz92b2) (get-timeofday . nz92b1) (get-command-line . nz92b0) (sys-display . nz92af) (whereis . nz92ae) (register . nz92ad) (vm-join! . nz92ac) (vm-set-value! . nz92ab) (vm? . nz92aa) (main-vm? . nz92a9) (vm-eval . nz92a8) (vm-self . nz92a7) (vm-start! . nz92a6) (make-vm . nz92a5) (mutex-try-lock! . nz92a4) (mutex-unlock! . nz92a3) (mutex-lock! . nz92a2) (mutex? . nz92a1) (make-mutex . nz92a0) (condition-variable-notify-all! . nz929f) (condition-variable-notify! . nz929e) (condition-variable-wait! . nz929d) (make-condition-variable . nz929c) (mosh-executable-path . nz929b) (make-file-options . nz929a) (for-each-with-index . nz9299) (source-info . nz9298) (instruction? . nz9297) (instruction->integer . nz9296) (instruction->symbol . nz9295) (closure->list . nz9294) (make-compiler-instruction . nz9293) (make-instruction . nz9292) (set-source-info! . nz9291) (bignum? . nz9290) (fast-equal? . nz928f) (fasl-read . nz928e) (fasl-write . nz928d) (time-usage . nz928c) (os-constant . nz928b) (disasm . nz928a) (make-parameter . nz679d) (socket-port . nz9289) (socket-shutdown . nz9288) (socket-close . nz9287) (socket-send . nz9286) (socket-recv! . nz9285) (socket-recv . nz9284) (make-server-socket . nz9283) (make-client-socket . nz9282) (socket-accept . nz9281) (socket? . nz9280) (string-upcase . nz927f) (string-titlecase . nz927e) (string-normalize-nfkd . nz927d) (string-normalize-nfkc . nz927c) (string-normalize-nfd . nz927b) (string-normalize-nfc . nz927a) (string-foldcase . nz9279) (string-downcase . nz9278) (string-ci>? . nz9277) (string-ci>=? . nz9276) (string-ci=? . nz9275) (string-ci<? . nz9274) (string-ci<=? . nz9273) (char-whitespace? . nz9272) (char-upper-case? . nz9271) (char-title-case? . nz9270) (char-numeric? . nz926f) (char-lower-case? . nz926e) (char-general-category . nz926d) (char-upcase . nz926c) (char-titlecase . nz926b) (char-foldcase . nz926a) (char-downcase . nz9269) (char-ci>? . nz9268) (char-ci>=? . nz9267) (char-ci=? . nz9266) (char-ci<? . nz9265) (char-ci<=? . nz9264) (char-alphabetic? . nz9263) (make-variable-transformer . nz6db8) (identifier? . nz706f) (generate-temporaries . nz705b) (free-identifier=? . nz705d) (syntax->datum . nz7073) (datum->syntax . nz7071) (bound-identifier=? . nz705f) (record-type-descriptor? . nz9262) (record-predicate . nz9261) (record-mutator . nz9260) (record-constructor . nz925f) (record-accessor . nz925e) (make-record-type-descriptor . nz925d) (make-record-constructor-descriptor . nz925c) (record? . nz925b) (record-type-uid . nz925a) (record-type-sealed? . nz9259) (record-type-parent . nz9258) (record-type-opaque? . nz9257) (record-type-name . nz9256) (record-type-generative? . nz9255) (record-type-field-names . nz9254) (record-rtd . nz9253) (record-field-mutable? . nz9252) (delete-file . nz9251) (file-exists? . nz9250) (vector-sort! . nz924f) (vector-sort . nz924e) (list-sort . nz924d) (symbol-hash . nz924c) (string-ci-hash . nz924b) (string-hash . nz924a) (equal-hash . nz9249) (hashtable-equivalence-function . nz9248) (make-hashtable . nz9247) (hashtable-hash-function . nz9246) (make-eqv-hashtable . nz9245) (make-eq-hashtable . nz9244) (hashtable? . nz9243) (hashtable-update! . nz9242) (hashtable-size . nz9241) (hashtable-set! . nz9240) (hashtable-ref . nz923f) (hashtable-mutable? . nz923e) (hashtable-keys . nz923d) (hashtable-entries . nz923c) (hashtable-delete! . nz923b) (hashtable-copy . nz923a) (hashtable-contains? . nz9239) (hashtable-clear! . nz9238) (call-with-output-file . nz9237) (call-with-input-file . nz9236) (write-char . nz9235) (write . nz9234) (with-output-to-file . nz9233) (with-input-from-file . nz9232) (read-char . nz9231) (read . nz9230) (peek-char . nz922f) (open-output-file . nz922e) (open-input-file . nz922d) (newline . nz922c) (display . nz922b) (close-output-port . nz922a) (close-input-port . nz9229) (eof-object? . nz9228) (eof-object . nz9227) (current-error-port . nz9226) (current-output-port . nz9225) (current-input-port . nz9224) (output-port? . nz9223) (input-port? . nz9222) (utf-8-codec . nz9221) (utf-16-codec . nz9220) (transcoder-error-handling-mode . nz921f) (transcoder-eol-style . nz921e) (transcoder-codec . nz921d) (transcoded-port . nz921c) (textual-port? . nz921b) (string->bytevector . nz921a) (standard-output-port . nz9219) (standard-input-port . nz9218) (standard-error-port . nz9217) (set-port-position! . nz9216) (put-u8 . nz9215) (put-string . nz9214) (put-datum . nz9213) (put-char . nz9212) (put-bytevector . nz9211) (port? . nz9210) (port-transcoder . nz920f) (port-position . nz920e) (port-has-set-port-position!? . nz920d) (port-has-port-position? . nz920c) (port-eof? . nz920b) (output-port-buffer-mode . nz920a) (open-string-output-port . nz9209) (open-string-input-port . nz9208) (open-file-output-port . nz9207) (open-file-input/output-port . nz9206) (open-file-input-port . nz9205) (open-bytevector-output-port . nz9204) (open-bytevector-input-port . nz9203) (native-transcoder . nz9202) (native-eol-style . nz9201) (make-transcoder . nz9200) (latin-1-codec . nz91ff) (make-i/o-write-error . nz8c97) (make-i/o-read-error . nz8c82) (make-i/o-port-error . nz8d38) (make-i/o-invalid-position-error . nz8cae) (make-i/o-filename-error . nz8cc9) (make-i/o-file-protection-error . nz8ce2) (make-i/o-file-is-read-only-error . nz8cf7) (make-i/o-file-does-not-exist-error . nz8d21) (make-i/o-file-already-exists-error . nz8d0c) (make-i/o-error . nz8c6d) (make-i/o-encoding-error . nz8d68) (make-i/o-decoding-error . nz8d51) (make-custom-textual-output-port . nz91fe) (make-custom-textual-input/output-port . nz91fd) (make-custom-textual-input-port . nz91fc) (make-custom-binary-output-port . nz91fb) (make-custom-binary-input/output-port . nz91fa) (make-custom-binary-input-port . nz91f9) (make-bytevector . nz91f8) (lookahead-u8 . nz91f7) (lookahead-char . nz91f6) (i/o-write-error? . nz8c99) (i/o-read-error? . nz8c84) (i/o-port-error? . nz8d3c) (i/o-invalid-position-error? . nz8cb2) (i/o-filename-error? . nz8ccd) (i/o-file-protection-error? . nz8ce4) (i/o-file-is-read-only-error? . nz8cf9) (i/o-file-does-not-exist-error? . nz8d23) (i/o-file-already-exists-error? . nz8d0e) (i/o-error? . nz8c6f) (i/o-error-position . nz8cb4) (i/o-error-port . nz8d3e) (i/o-error-filename . nz8ccf) (i/o-encoding-error? . nz8d6c) (i/o-encoding-error-char . nz8d6e) (i/o-decoding-error? . nz8d53) (get-u8 . nz91f5) (get-string-n! . nz91f4) (get-string-n . nz91f3) (get-string-all . nz91f2) (get-line . nz91f1) (get-datum . nz91f0) (get-char . nz91ef) (get-bytevector-some . nz91ee) (get-bytevector-n! . nz91ed) (get-bytevector-n . nz91ec) (get-bytevector-all . nz91eb) (flush-output-port . nz91ea) (close-port . nz91e9) (scheme-report-environment . nz7049) (quotient . nz91e8) (null-environment . nz7047) (remainder . nz91e7) (modulo . nz91e6) (inexact->exact . nz91e5) (force . nz91e4) (exact->inexact . nz91e3) (make-promise . nz91e2) (exit . nz91e1) (command-line . nz8ea5) (string-fill! . nz91e0) (string-set! . nz91df) (set-cdr! . nz91de) (set-car! . nz91dd) (remove . nz91dc) (remv . nz91db) (remp . nz91da) (remq . nz91d9) (partition . nz91d8) (memv . nz91d7) (memq . nz91d6) (memp . nz91d5) (member . nz91d4) (exists . nz91d3) (for-all . nz91d2) (fold-right . nz91d1) (fold-left . nz91d0) (find . nz91cf) (filter . nz91ce) (cons* . nz91cd) (assv . nz91cc) (assq . nz91cb) (assp . nz91ca) (assoc . nz91c9) (call-with-string-output-port . nz91c8) (call-with-port . nz91c7) (call-with-bytevector-output-port . nz91c6) (bytevector->string . nz91c5) (buffer-mode? . nz91c4) (binary-port? . nz91c3) (with-exception-handler . nz91c2) (raise-continuable . nz91c1) (raise . nz91c0) (eval . nz704d) (environment . nz7045) (make-enumeration . nz91bf) (enum-set=? . nz91be) (enum-set-universe . nz91bd) (enum-set-union . nz91bc) (enum-set-subset? . nz91bb) (enum-set-projection . nz91ba) (enum-set-member? . nz91b9) (enum-set-intersection . nz91b8) (enum-set-indexer . nz91b7) (enum-set-difference . nz91b6) (enum-set-constructor . nz91b5) (enum-set-complement . nz91b4) (enum-set->list . nz91b3) (who-condition? . nz8be3) (warning? . nz8b5b) (violation? . nz8b9a) (undefined-violation? . nz8c5a) (syntax-violation? . nz8c41) (syntax-violation-subform . nz8c45) (syntax-violation-form . nz8c43) (syntax-violation . nz706d) (simple-conditions . nz91b2) (serious-condition? . nz8b70) (non-continuable-violation? . nz8bfa) (message-condition? . nz8b44) (make-who-condition . nz8bdf) (make-warning . nz8b59) (make-violation . nz8b98) (make-undefined-violation . nz8c58) (make-syntax-violation . nz8c3b) (make-serious-condition . nz8b6e) (make-non-continuable-violation . nz8bf8) (make-message-condition . nz8b40) (make-lexical-violation . nz8c22) (make-irritants-condition . nz8bc4) (make-implementation-restriction-violation . nz8c0d) (make-error . nz8b83) (make-assertion-violation . nz8bad) (lexical-violation? . nz8c24) (irritants-condition? . nz8bc8) (implementation-restriction-violation? . nz8c0f) (error? . nz8b85) (condition-who . nz8be5) (condition-predicate . nz91b1) (condition-message . nz8b46) (condition-irritants . nz8bca) (condition-accessor . nz91b0) (condition . nz91af) (assertion-violation? . nz8baf) (condition? . nz91ae) (utf32->string . nz91ad) (utf16->string . nz91ac) (utf8->string . nz91ab) (uint-list->bytevector . nz91aa) (u8-list->bytevector . nz91a9) (string->utf8 . nz91a8) (string->utf32 . nz91a7) (string->utf16 . nz91a6) (sint-list->bytevector . nz91a5) (native-endianness . nz91a4) (bytevector? . nz91a3) (bytevector=? . nz91a2) (bytevector-uint-set! . nz91a1) (bytevector-uint-ref . nz91a0) (bytevector-u8-set! . nz919f) (bytevector-u8-ref . nz919e) (bytevector-u64-set! . nz919d) (bytevector-u64-ref . nz919c) (bytevector-u64-native-set! . nz919b) (bytevector-u64-native-ref . nz919a) (bytevector-u32-set! . nz9199) (bytevector-u32-ref . nz9198) (bytevector-u32-native-set! . nz9197) (bytevector-u32-native-ref . nz9196) (bytevector-u16-set! . nz9195) (bytevector-u16-ref . nz9194) (bytevector-u16-native-set! . nz9193) (bytevector-u16-native-ref . nz9192) (bytevector-sint-set! . nz9191) (bytevector-sint-ref . nz9190) (bytevector-s8-set! . nz918f) (bytevector-s8-ref . nz918e) (bytevector-s64-set! . nz918d) (bytevector-s64-ref . nz918c) (bytevector-s64-native-set! . nz918b) (bytevector-s64-native-ref . nz918a) (bytevector-s32-set! . nz9189) (bytevector-s32-ref . nz9188) (bytevector-s32-native-set! . nz9187) (bytevector-s32-native-ref . nz9186) (bytevector-s16-set! . nz9185) (bytevector-s16-ref . nz9184) (bytevector-s16-native-set! . nz9183) (bytevector-s16-native-ref . nz9182) (bytevector-length . nz9181) (bytevector-ieee-single-ref . nz9180) (bytevector-ieee-single-set! . nz917f) (bytevector-ieee-single-native-set! . nz917e) (bytevector-ieee-single-native-ref . nz917d) (bytevector-ieee-double-set! . nz917c) (bytevector-ieee-double-ref . nz917b) (bytevector-ieee-double-native-set! . nz917a) (bytevector-ieee-double-native-ref . nz9179) (bytevector-fill! . nz9178) (bytevector-copy! . nz9177) (bytevector-copy . nz9176) (bytevector->uint-list . nz9175) (bytevector->u8-list . nz9174) (bytevector->sint-list . nz9173) (no-nans-violation? . nz8d98) (no-infinities-violation? . nz8d83) (make-no-nans-violation . nz8d96) (make-no-infinities-violation . nz8d81) (real->flonum . nz9172) (flzero? . nz9171) (fltruncate . nz9170) (fltan . nz916f) (flsqrt . nz916e) (flsin . nz916d) (flround . nz916c) (flpositive? . nz916b) (flonum? . nz916a) (flodd? . nz9169) (flnumerator . nz9168) (flnegative? . nz9167) (flnan? . nz9166) (flmod0 . nz9165) (flmod . nz9164) (flmin . nz9163) (flmax . nz9162) (fllog . nz9161) (flinteger? . nz9160) (flinfinite? . nz915f) (flfloor . nz915e) (flfinite? . nz915d) (flexpt . nz915c) (flexp . nz915b) (fleven? . nz915a) (fldiv0-and-mod0 . nz9159) (fldiv0 . nz9158) (fldiv-and-mod . nz9157) (fldiv . nz9156) (fldenominator . nz9155) (flcos . nz9154) (flceiling . nz9153) (flatan . nz9152) (flasin . nz9151) (flacos . nz9150) (flabs . nz914f) (fl>? . nz914e) (fl>=? . nz914d) (fl=? . nz914c) (fl<? . nz914b) (fl<=? . nz914a) (fl/ . nz9149) (fl- . nz9148) (fl+ . nz9147) (fl* . nz9146) (fixnum->flonum . nz9145) (fxzero? . nz9144) (fxxor . nz9143) (fxrotate-bit-field . nz9142) (fxreverse-bit-field . nz9141) (fxpositive? . nz9140) (fxodd? . nz913f) (fxnot . nz913e) (fxnegative? . nz913d) (fxmod0 . nz913c) (fxmod . nz913b) (fxmin . nz913a) (fxmax . nz9139) (fxlength . nz9138) (fxior . nz9137) (fxif . nz9136) (fxfirst-bit-set . nz9135) (fxeven? . nz9134) (fxdiv0-and-mod0 . nz9133) (fxdiv0 . nz9132) (fxdiv-and-mod . nz9131) (fxdiv . nz9130) (fxcopy-bit-field . nz912f) (fxcopy-bit . nz912e) (fxbit-set? . nz912d) (fxbit-field . nz912c) (fxbit-count . nz912b) (fxarithmetic-shift-right . nz912a) (fxarithmetic-shift-left . nz9129) (fxarithmetic-shift . nz9128) (fxand . nz9127) (fx>? . nz9126) (fx>=? . nz9125) (fx=? . nz9124) (fx<? . nz9123) (fx<=? . nz9122) (fx-/carry . nz9121) (fx- . nz9120) (fx+/carry . nz911f) (fx+ . nz911e) (fx*/carry . nz911d) (fx* . nz911c) (greatest-fixnum . nz911b) (least-fixnum . nz911a) (fixnum-width . nz9119) (fixnum? . nz9118) (bitwise-rotate-bit-field . nz9117) (bitwise-reverse-bit-field . nz9116) (bitwise-length . nz9115) (bitwise-if . nz9114) (bitwise-first-bit-set . nz9113) (bitwise-copy-bit-field . nz9112) (bitwise-copy-bit . nz9111) (bitwise-bit-set? . nz9110) (bitwise-bit-field . nz910f) (bitwise-bit-count . nz910e) (bitwise-xor . nz910d) (bitwise-ior . nz910c) (bitwise-and . nz910b) (bitwise-not . nz910a) (bitwise-arithmetic-shift-right . nz9109) (bitwise-arithmetic-shift-left . nz9108) (bitwise-arithmetic-shift . nz9107) (zero? . nz9106) (vector? . nz9105) (vector-set! . nz9104) (vector-ref . nz9103) (vector-map . nz9102) (vector-length . nz9101) (vector-for-each . nz9100) (vector-fill! . nz90ff) (vector->list . nz90fe) (vector . nz90fd) (values . nz90fc) (truncate . nz90fb) (tan . nz90fa) (symbol? . nz90f9) (symbol=? . nz90f8) (symbol->string . nz90f7) (substring . nz90f6) (string? . nz90f5) (string>? . nz90f4) (string>=? . nz90f3) (string=? . nz90f2) (string<? . nz90f1) (string<=? . nz90f0) (string-ref . nz90ef) (string-length . nz90ee) (string-for-each . nz90ed) (string-copy . nz90ec) (string-append . nz90eb) (string->symbol . nz90ea) (string->number . nz90e9) (string->list . nz90e8) (string . nz90e7) (sqrt . nz90e6) (sin . nz90e5) (round . nz90e4) (reverse . nz90e3) (real? . nz90e2) (real-valued? . nz90e1) (real-part . nz90e0) (rationalize . nz90df) (rational? . nz90de) (rational-valued? . nz90dd) (procedure? . nz90dc) (positive? . nz90db) (pair? . nz90da) (odd? . nz90d9) (numerator . nz90d8) (number? . nz90d7) (number->string . nz90d6) (null? . nz90d5) (not . nz90d4) (negative? . nz90d3) (nan? . nz90d2) (min . nz90d1) (max . nz90d0) (map . nz90cf) (make-vector . nz90ce) (make-string . nz90cd) (make-rectangular . nz90cc) (make-polar . nz90cb) (magnitude . nz90ca) (log . nz90c9) (list? . nz90c8) (list-tail . nz90c7) (list-ref . nz90c6) (list->vector . nz90c5) (list->string . nz90c4) (list . nz90c3) (length . nz90c2) (lcm . nz90c1) (integer? . nz90c0) (integer-valued? . nz90bf) (integer->char . nz90be) (infinite? . nz90bd) (inexact? . nz90bc) (inexact . nz90bb) (imag-part . nz90ba) (gcd . nz90b9) (for-each . nz90b8) (floor . nz90b7) (finite? . nz90b6) (expt . nz90b5) (exp . nz90b4) (exact? . nz90b3) (exact-integer-sqrt . nz90b2) (exact . nz90b1) (even? . nz90b0) (error . nz90af) (eqv? . nz90ae) (equal? . nz90ad) (eq? . nz90ac) (dynamic-wind . nz90ab) (div0-and-mod0 . nz90aa) (mod0 . nz90a9) (div0 . nz90a8) (div-and-mod . nz90a7) (mod . nz90a6) (div . nz90a5) (denominator . nz90a4) (cos . nz90a3) (cons . nz90a2) (complex? . nz90a1) (char? . nz90a0) (char>? . nz909f) (char>=? . nz909e) (char=? . nz909d) (char<? . nz909c) (char<=? . nz909b) (char->integer . nz909a) (ceiling . nz9099) (call-with-values . nz9098) (call/cc . nz9097) (call-with-current-continuation . nz9096) (cddddr . nz9095) (cdddar . nz9094) (cddadr . nz9093) (cddaar . nz9092) (cdaddr . nz9091) (cdadar . nz9090) (cdaadr . nz908f) (cdaaar . nz908e) (cadddr . nz908d) (caddar . nz908c) (cadadr . nz908b) (cadaar . nz908a) (caaddr . nz9089) (caadar . nz9088) (caaadr . nz9087) (caaaar . nz9086) (cdddr . nz9085) (cddar . nz9084) (cdadr . nz9083) (cdaar . nz9082) (caddr . nz9081) (cadar . nz9080) (caadr . nz907f) (caaar . nz907e) (cddr . nz907d) (cdar . nz907c) (cadr . nz907b) (caar . nz907a) (cdr . nz9079) (car . nz9078) (boolean? . nz9077) (boolean=? . nz9076) (atan . nz9075) (assertion-violation . nz9074) (assertion-error . nz7067) (asin . nz9073) (apply . nz9072) (append . nz9071) (angle . nz9070) (acos . nz906f) (abs . nz906e) (/ . nz906d) (* . nz906c) (- . nz906b) (+ . nz906a) (>= . nz9069) (> . nz9068) (= . nz9067) (<= . nz9066) (< . nz9065) (library . nz9064) (&no-nans . nz9063) (&no-infinities . nz9062) (&i/o-encoding . nz9061) (&i/o-decoding . nz9060) (&i/o-port . nz905f) (&i/o-file-does-not-exist . nz905e) (&i/o-file-already-exists . nz905d) (&i/o-file-is-read-only . nz905c) (&i/o-file-protection . nz905b) (&i/o-filename . nz905a) (&i/o-invalid-position . nz9059) (&i/o-write . nz9058) (&i/o-read . nz9057) (&i/o . nz9056) (&undefined . nz9055) (&syntax . nz9054) (&lexical . nz9053) (&implementation-restriction . nz9052) (&non-continuable . nz9051) (&who . nz9050) (&irritants . nz904f) (&assertion . nz904e) (&violation . nz904d) (&error . nz904c) (&serious . nz904b) (&warning . nz904a) (&message . nz9049) (&condition . nz9048) (define-condition-type . nz9047) (define-enumeration . nz9046) (define-record-type . nz9045) (parent-rtd . nz9044) (nongenerative . nz9043) (opaque . nz9042) (sealed . nz9041) (protocol . nz9040) (parent . nz903f) (immutable . nz903e) (mutable . nz903d) (fields . nz903c) (error-handling-mode . nz903b) (file-options . nz903a) (buffer-mode . nz9039) (eol-style . nz9038) (guard . nz9037) (trace-define . nz9036) (trace-lambda . nz9035) (unsyntax-splicing . nz9034) (unsyntax . nz9033) (unquote-splicing . nz9032) (unquote . nz9031) (_ . nz9030) (else . nz902f) (=> . nz902e) (... . nz902d) (assert . nz902c) (endianness . nz902b) (delay . nz902a) (time . nz9029) (do . nz9028) (cond . nz9027) (let* . nz9026) (let*-values . nz9025) (let-values . nz9024) (identifier-syntax . nz9023) (with-syntax . nz9022) (quasisyntax . nz9021) (quasiquote . nz9020) (syntax-rules . nz901f) (include . nz901e) (define-struct . nz901d) (record-constructor-descriptor . nz901c) (record-type-descriptor . nz901b) (case . nz901a) (parameterize . nz9019) (unless . nz9018) (when . nz9017) (or . nz9016) (and . nz9015) (if . nz9014) (let . nz9013) (letrec* . nz9012) (letrec . nz9011) (type-descriptor . nz9010) (case-lambda . nz900f) (lambda . nz900e) (syntax . nz900d) (syntax-case . nz900c) (quote . nz900b) (foreign-call . nz900a) (letrec-syntax . nz9009) (let-syntax . nz9008) (set! . nz9007) (import . nz9006) (begin . nz9005) (module . nz9004) (define-syntax . nz9003) (define . nz9002)) '((nz8d9c core-prim . &no-nans-rcd) (nz8d9a core-prim . &no-nans-rtd) (nz8d87 core-prim . &no-infinities-rcd) (nz8d85 core-prim . &no-infinities-rtd) (nz8d72 core-prim . &i/o-encoding-rcd) (nz8d70 core-prim . &i/o-encoding-rtd) (nz8d57 core-prim . &i/o-decoding-rcd) (nz8d55 core-prim . &i/o-decoding-rtd) (nz8d42 core-prim . &i/o-port-rcd) (nz8d40 core-prim . &i/o-port-rtd) (nz8d27 core-prim . &i/o-file-does-not-exist-rcd) (nz8d25 core-prim . &i/o-file-does-not-exist-rtd) (nz8d12 core-prim . &i/o-file-already-exists-rcd) (nz8d10 core-prim . &i/o-file-already-exists-rtd) (nz8cfd core-prim . &i/o-file-is-read-only-rcd) (nz8cfb core-prim . &i/o-file-is-read-only-rtd) (nz8ce8 core-prim . &i/o-file-protection-rcd) (nz8ce6 core-prim . &i/o-file-protection-rtd) (nz8cd3 core-prim . &i/o-filename-rcd) (nz8cd1 core-prim . &i/o-filename-rtd) (nz8cb8 core-prim . &i/o-invalid-position-rcd) (nz8cb6 core-prim . &i/o-invalid-position-rtd) (nz8c9d core-prim . &i/o-write-rcd) (nz8c9b core-prim . &i/o-write-rtd) (nz8c88 core-prim . &i/o-read-rcd) (nz8c86 core-prim . &i/o-read-rtd) (nz8c73 core-prim . &i/o-rcd) (nz8c71 core-prim . &i/o-rtd) (nz8c5e core-prim . &undefined-rcd) (nz8c5c core-prim . &undefined-rtd) (nz8c49 core-prim . &syntax-rcd) (nz8c47 core-prim . &syntax-rtd) (nz8c28 core-prim . &lexical-rcd) (nz8c26 core-prim . &lexical-rtd) (nz8c13 core-prim . &implementation-restriction-rcd) (nz8c11 core-prim . &implementation-restriction-rtd) (nz8bfe core-prim . &non-continuable-rcd) (nz8bfc core-prim . &non-continuable-rtd) (nz8be9 core-prim . &who-rcd) (nz8be7 core-prim . &who-rtd) (nz8bce core-prim . &irritants-rcd) (nz8bcc core-prim . &irritants-rtd) (nz8bb3 core-prim . &assertion-rcd) (nz8bb1 core-prim . &assertion-rtd) (nz8b9e core-prim . &violation-rcd) (nz8b9c core-prim . &violation-rtd) (nz8b89 core-prim . &error-rcd) (nz8b87 core-prim . &error-rtd) (nz8b74 core-prim . &serious-rcd) (nz8b72 core-prim . &serious-rtd) (nz8b5f core-prim . &warning-rcd) (nz8b5d core-prim . &warning-rtd) (nz8b4a core-prim . &message-rcd) (nz8b48 core-prim . &message-rtd) (nz8aeb core-prim . &condition-rcd) (nz8ae9 core-prim . &condition-rtd) (nz7069 core-prim . syntax-error) (nz6f8d core-prim . syntax-dispatch) (nz9331 core-prim . pretty-print) (nz9330 core-prim . eval-core) (nz932f core-prim . set-symbol-value!) (nz932e core-prim . symbol-value) (nz932d core-prim . gensym) (nz932c core-prim . void) (nz8eab core-prim . load) (nz707b core-prim . interaction-environment) (nz932b core-prim . char-ready?) (nz932a core-prim . regexp?) (nz9329 core-prim . read-line) (nz9328 core-prim . gensym-prefix-set!) (nz9327 core-prim . ungensym) (nz9326 core-prim . alist->eq-hash-table) (nz9325 core-prim . assoc-ref) (nz9324 core-prim . print) (nz9323 core-prim . format) (nz9322 core-prim . host-os) (nz69b5 core-prim . library-path) (nz9321 core-prim . standard-library-path) (nz9320 core-prim . file-newer?) (nz931f core-prim . stat-mtime) (nz931e core-prim . write-to-file) (nz931d core-prim . file->sexp-list) (nz931c core-prim . file->list) (nz931b core-prim . file->string) (nz931a core-prim . digit->integer) (nz9319 core-prim . call-with-string-input-port) (nz9318 core-prim . call-with-string-io) (nz9317 core-prim . string-split) (nz9316 core-prim . bytevector-for-each) (nz9315 core-prim . string->regexp) (nz9314 core-prim . rxmatch) (nz9313 core-prim . regexp-replace-all) (nz9312 core-prim . hashtable-for-each) (nz679f core-prim . mosh-cache-dir) (nz9311 core-prim . call-process) (nz9310 core-prim . local-tz-offset) (nz930f core-prim . microseconds) (nz930e core-prim . directory-list) (nz930d core-prim . set-current-directory!) (nz930c core-prim . expand-path) (nz930b core-prim . current-directory) (nz930a core-prim . %spawn) (nz9309 core-prim . %waitpid) (nz9308 core-prim . simple-struct-name) (nz9307 core-prim . simple-struct-set!) (nz9306 core-prim . simple-struct-ref) (nz9305 core-prim . make-simple-struct) (nz9304 core-prim . simple-struct?) (nz9303 core-prim . pointer-ref-c-int64) (nz9302 core-prim . pointer-ref-c-int32) (nz9301 core-prim . pointer-ref-c-int16) (nz9300 core-prim . pointer-ref-c-int8) (nz92ff core-prim . pointer-ref-c-uint64) (nz92fe core-prim . pointer-ref-c-uint32) (nz92fd core-prim . pointer-ref-c-uint16) (nz92fc core-prim . pointer-ref-c-uint8) (nz92fb core-prim . pointer-set-c-uint64!) (nz92fa core-prim . pointer-set-c-uint32!) (nz92f9 core-prim . pointer-set-c-uint16!) (nz92f8 core-prim . pointer-set-c-uint8!) (nz92f7 core-prim . pointer-set-c-int64!) (nz92f6 core-prim . pointer-set-c-int32!) (nz92f5 core-prim . pointer-set-c-int16!) (nz92f4 core-prim . pointer-set-c-int8!) (nz92f3 core-prim . pointer-set-c-pointer!) (nz92f2 core-prim . pointer-set-c-double!) (nz92f1 core-prim . pointer-set-c-float!) (nz92f0 core-prim . pointer-set-c-long-long!) (nz92ef core-prim . pointer-set-c-long!) (nz92ee core-prim . pointer-set-c-int!) (nz92ed core-prim . pointer-set-c-short!) (nz92ec core-prim . pointer-set-c-char!) (nz92eb core-prim . pointer-ref-c-pointer) (nz92ea core-prim . pointer-ref-c-double) (nz92e9 core-prim . pointer-ref-c-float) (nz92e8 core-prim . pointer-ref-c-unsigned-long-long) (nz92e7 core-prim . pointer-ref-c-signed-long-long) (nz92e6 core-prim . pointer-ref-c-unsigned-long) (nz92e5 core-prim . pointer-ref-c-signed-long) (nz92e4 core-prim . pointer-ref-c-unsigned-int) (nz92e3 core-prim . pointer-ref-c-signed-int) (nz92e2 core-prim . pointer-ref-c-unsigned-short) (nz92e1 core-prim . pointer-ref-c-signed-short) (nz92e0 core-prim . pointer-ref-c-unsigned-char) (nz92df core-prim . pointer-ref-c-signed-char) (nz92de core-prim . pointer->integer) (nz92dd core-prim . integer->pointer) (nz92dc core-prim . pointer?) (nz92db core-prim . shared-errno) (nz92da core-prim . get-c-address) (nz92d9 core-prim . obj->integer) (nz92d8 core-prim . u8-list->c-procedure) (nz92d7 core-prim . %ffi-free-c-callback-trampoline) (nz92d6 core-prim . %ffi-make-c-callback-trampoline) (nz92d5 core-prim . %ffi-free) (nz92d4 core-prim . %ffi-malloc) (nz92d3 core-prim . %ffi-supported?) (nz92d2 core-prim . %ffi-pointer->string) (nz92d1 core-prim . %ffi-call) (nz92d0 core-prim . %ffi-lookup) (nz92cf core-prim . %ffi-open) (nz92ce core-prim . null-terminated-utf8->string) (nz92cd core-prim . null-terminated-bytevector->string) (nz92cc core-prim . %fork) (nz92cb core-prim . %pipe) (nz92ca core-prim . p) (nz92c9 core-prim . open-output-string) (nz92c8 core-prim . get-output-string) (nz92c7 core-prim . file-stat-ctime) (nz92c6 core-prim . file-stat-atime) (nz92c5 core-prim . file-stat-mtime) (nz92c4 core-prim . file-size-in-bytes) (nz92c3 core-prim . file-writable?) (nz92c2 core-prim . file-executable?) (nz92c1 core-prim . file-readable?) (nz92c0 core-prim . file-regular?) (nz92bf core-prim . file-symbolic-link?) (nz92be core-prim . file-directory?) (nz92bd core-prim . create-symbolic-link) (nz92bc core-prim . rename-file) (nz92bb core-prim . delete-directory) (nz92ba core-prim . create-directory) (nz92b9 core-prim . create-mosh-cache-dir) (nz92b8 core-prim . get-environment-variables) (nz92b7 core-prim . current-exception-handler) (nz92b6 core-prim . get-environment-variable) (nz92b5 core-prim . join-wraps) (nz92b4 core-prim . id->real-label) (nz92b3 core-prim . same-marks?) (nz92b2 core-prim . same-marks*?) (nz92b1 core-prim . get-timeofday) (nz92b0 core-prim . get-command-line) (nz92af core-prim . sys-display) (nz92ae core-prim . whereis) (nz92ad core-prim . register) (nz92ac core-prim . vm-join!) (nz92ab core-prim . vm-set-value!) (nz92aa core-prim . vm?) (nz92a9 core-prim . main-vm?) (nz92a8 core-prim . vm-eval) (nz92a7 core-prim . vm-self) (nz92a6 core-prim . vm-start!) (nz92a5 core-prim . make-vm) (nz92a4 core-prim . mutex-try-lock!) (nz92a3 core-prim . mutex-unlock!) (nz92a2 core-prim . mutex-lock!) (nz92a1 core-prim . mutex?) (nz92a0 core-prim . make-mutex) (nz929f core-prim . condition-variable-notify-all!) (nz929e core-prim . condition-variable-notify!) (nz929d core-prim . condition-variable-wait!) (nz929c core-prim . make-condition-variable) (nz929b core-prim . mosh-executable-path) (nz929a core-prim . make-file-options) (nz9299 core-prim . for-each-with-index) (nz9298 core-prim . source-info) (nz9297 core-prim . instruction?) (nz9296 core-prim . instruction->integer) (nz9295 core-prim . instruction->symbol) (nz9294 core-prim . closure->list) (nz9293 core-prim . make-compiler-instruction) (nz9292 core-prim . make-instruction) (nz9291 core-prim . set-source-info!) (nz9290 core-prim . bignum?) (nz928f core-prim . fast-equal?) (nz928e core-prim . fasl-read) (nz928d core-prim . fasl-write) (nz928c core-prim . time-usage) (nz928b core-prim . os-constant) (nz928a core-prim . disasm) (nz679d core-prim . make-parameter) (nz9289 core-prim . socket-port) (nz9288 core-prim . socket-shutdown) (nz9287 core-prim . socket-close) (nz9286 core-prim . socket-send) (nz9285 core-prim . socket-recv!) (nz9284 core-prim . socket-recv) (nz9283 core-prim . make-server-socket) (nz9282 core-prim . make-client-socket) (nz9281 core-prim . socket-accept) (nz9280 core-prim . socket?) (nz927f core-prim . string-upcase) (nz927e core-prim . string-titlecase) (nz927d core-prim . string-normalize-nfkd) (nz927c core-prim . string-normalize-nfkc) (nz927b core-prim . string-normalize-nfd) (nz927a core-prim . string-normalize-nfc) (nz9279 core-prim . string-foldcase) (nz9278 core-prim . string-downcase) (nz9277 core-prim . string-ci>?) (nz9276 core-prim . string-ci>=?) (nz9275 core-prim . string-ci=?) (nz9274 core-prim . string-ci<?) (nz9273 core-prim . string-ci<=?) (nz9272 core-prim . char-whitespace?) (nz9271 core-prim . char-upper-case?) (nz9270 core-prim . char-title-case?) (nz926f core-prim . char-numeric?) (nz926e core-prim . char-lower-case?) (nz926d core-prim . char-general-category) (nz926c core-prim . char-upcase) (nz926b core-prim . char-titlecase) (nz926a core-prim . char-foldcase) (nz9269 core-prim . char-downcase) (nz9268 core-prim . char-ci>?) (nz9267 core-prim . char-ci>=?) (nz9266 core-prim . char-ci=?) (nz9265 core-prim . char-ci<?) (nz9264 core-prim . char-ci<=?) (nz9263 core-prim . char-alphabetic?) (nz6db8 core-prim . make-variable-transformer) (nz706f core-prim . identifier?) (nz705b core-prim . generate-temporaries) (nz705d core-prim . free-identifier=?) (nz7073 core-prim . syntax->datum) (nz7071 core-prim . datum->syntax) (nz705f core-prim . bound-identifier=?) (nz9262 core-prim . record-type-descriptor?) (nz9261 core-prim . record-predicate) (nz9260 core-prim . record-mutator) (nz925f core-prim . record-constructor) (nz925e core-prim . record-accessor) (nz925d core-prim . make-record-type-descriptor) (nz925c core-prim . make-record-constructor-descriptor) (nz925b core-prim . record?) (nz925a core-prim . record-type-uid) (nz9259 core-prim . record-type-sealed?) (nz9258 core-prim . record-type-parent) (nz9257 core-prim . record-type-opaque?) (nz9256 core-prim . record-type-name) (nz9255 core-prim . record-type-generative?) (nz9254 core-prim . record-type-field-names) (nz9253 core-prim . record-rtd) (nz9252 core-prim . record-field-mutable?) (nz9251 core-prim . delete-file) (nz9250 core-prim . file-exists?) (nz924f core-prim . vector-sort!) (nz924e core-prim . vector-sort) (nz924d core-prim . list-sort) (nz924c core-prim . symbol-hash) (nz924b core-prim . string-ci-hash) (nz924a core-prim . string-hash) (nz9249 core-prim . equal-hash) (nz9248 core-prim . hashtable-equivalence-function) (nz9247 core-prim . make-hashtable) (nz9246 core-prim . hashtable-hash-function) (nz9245 core-prim . make-eqv-hashtable) (nz9244 core-prim . make-eq-hashtable) (nz9243 core-prim . hashtable?) (nz9242 core-prim . hashtable-update!) (nz9241 core-prim . hashtable-size) (nz9240 core-prim . hashtable-set!) (nz923f core-prim . hashtable-ref) (nz923e core-prim . hashtable-mutable?) (nz923d core-prim . hashtable-keys) (nz923c core-prim . hashtable-entries) (nz923b core-prim . hashtable-delete!) (nz923a core-prim . hashtable-copy) (nz9239 core-prim . hashtable-contains?) (nz9238 core-prim . hashtable-clear!) (nz9237 core-prim . call-with-output-file) (nz9236 core-prim . call-with-input-file) (nz9235 core-prim . write-char) (nz9234 core-prim . write) (nz9233 core-prim . with-output-to-file) (nz9232 core-prim . with-input-from-file) (nz9231 core-prim . read-char) (nz9230 core-prim . read) (nz922f core-prim . peek-char) (nz922e core-prim . open-output-file) (nz922d core-prim . open-input-file) (nz922c core-prim . newline) (nz922b core-prim . display) (nz922a core-prim . close-output-port) (nz9229 core-prim . close-input-port) (nz9228 core-prim . eof-object?) (nz9227 core-prim . eof-object) (nz9226 core-prim . current-error-port) (nz9225 core-prim . current-output-port) (nz9224 core-prim . current-input-port) (nz9223 core-prim . output-port?) (nz9222 core-prim . input-port?) (nz9221 core-prim . utf-8-codec) (nz9220 core-prim . utf-16-codec) (nz921f core-prim . transcoder-error-handling-mode) (nz921e core-prim . transcoder-eol-style) (nz921d core-prim . transcoder-codec) (nz921c core-prim . transcoded-port) (nz921b core-prim . textual-port?) (nz921a core-prim . string->bytevector) (nz9219 core-prim . standard-output-port) (nz9218 core-prim . standard-input-port) (nz9217 core-prim . standard-error-port) (nz9216 core-prim . set-port-position!) (nz9215 core-prim . put-u8) (nz9214 core-prim . put-string) (nz9213 core-prim . put-datum) (nz9212 core-prim . put-char) (nz9211 core-prim . put-bytevector) (nz9210 core-prim . port?) (nz920f core-prim . port-transcoder) (nz920e core-prim . port-position) (nz920d core-prim . port-has-set-port-position!?) (nz920c core-prim . port-has-port-position?) (nz920b core-prim . port-eof?) (nz920a core-prim . output-port-buffer-mode) (nz9209 core-prim . open-string-output-port) (nz9208 core-prim . open-string-input-port) (nz9207 core-prim . open-file-output-port) (nz9206 core-prim . open-file-input/output-port) (nz9205 core-prim . open-file-input-port) (nz9204 core-prim . open-bytevector-output-port) (nz9203 core-prim . open-bytevector-input-port) (nz9202 core-prim . native-transcoder) (nz9201 core-prim . native-eol-style) (nz9200 core-prim . make-transcoder) (nz91ff core-prim . latin-1-codec) (nz8c97 core-prim . make-i/o-write-error) (nz8c82 core-prim . make-i/o-read-error) (nz8d38 core-prim . make-i/o-port-error) (nz8cae core-prim . make-i/o-invalid-position-error) (nz8cc9 core-prim . make-i/o-filename-error) (nz8ce2 core-prim . make-i/o-file-protection-error) (nz8cf7 core-prim . make-i/o-file-is-read-only-error) (nz8d21 core-prim . make-i/o-file-does-not-exist-error) (nz8d0c core-prim . make-i/o-file-already-exists-error) (nz8c6d core-prim . make-i/o-error) (nz8d68 core-prim . make-i/o-encoding-error) (nz8d51 core-prim . make-i/o-decoding-error) (nz91fe core-prim . make-custom-textual-output-port) (nz91fd core-prim . make-custom-textual-input/output-port) (nz91fc core-prim . make-custom-textual-input-port) (nz91fb core-prim . make-custom-binary-output-port) (nz91fa core-prim . make-custom-binary-input/output-port) (nz91f9 core-prim . make-custom-binary-input-port) (nz91f8 core-prim . make-bytevector) (nz91f7 core-prim . lookahead-u8) (nz91f6 core-prim . lookahead-char) (nz8c99 core-prim . i/o-write-error?) (nz8c84 core-prim . i/o-read-error?) (nz8d3c core-prim . i/o-port-error?) (nz8cb2 core-prim . i/o-invalid-position-error?) (nz8ccd core-prim . i/o-filename-error?) (nz8ce4 core-prim . i/o-file-protection-error?) (nz8cf9 core-prim . i/o-file-is-read-only-error?) (nz8d23 core-prim . i/o-file-does-not-exist-error?) (nz8d0e core-prim . i/o-file-already-exists-error?) (nz8c6f core-prim . i/o-error?) (nz8cb4 core-prim . i/o-error-position) (nz8d3e core-prim . i/o-error-port) (nz8ccf core-prim . i/o-error-filename) (nz8d6c core-prim . i/o-encoding-error?) (nz8d6e core-prim . i/o-encoding-error-char) (nz8d53 core-prim . i/o-decoding-error?) (nz91f5 core-prim . get-u8) (nz91f4 core-prim . get-string-n!) (nz91f3 core-prim . get-string-n) (nz91f2 core-prim . get-string-all) (nz91f1 core-prim . get-line) (nz91f0 core-prim . get-datum) (nz91ef core-prim . get-char) (nz91ee core-prim . get-bytevector-some) (nz91ed core-prim . get-bytevector-n!) (nz91ec core-prim . get-bytevector-n) (nz91eb core-prim . get-bytevector-all) (nz91ea core-prim . flush-output-port) (nz91e9 core-prim . close-port) (nz7049 core-prim . scheme-report-environment) (nz91e8 core-prim . quotient) (nz7047 core-prim . null-environment) (nz91e7 core-prim . remainder) (nz91e6 core-prim . modulo) (nz91e5 core-prim . inexact->exact) (nz91e4 core-prim . force) (nz91e3 core-prim . exact->inexact) (nz91e2 core-prim . make-promise) (nz91e1 core-prim . exit) (nz8ea5 core-prim . command-line) (nz91e0 core-prim . string-fill!) (nz91df core-prim . string-set!) (nz91de core-prim . set-cdr!) (nz91dd core-prim . set-car!) (nz91dc core-prim . remove) (nz91db core-prim . remv) (nz91da core-prim . remp) (nz91d9 core-prim . remq) (nz91d8 core-prim . partition) (nz91d7 core-prim . memv) (nz91d6 core-prim . memq) (nz91d5 core-prim . memp) (nz91d4 core-prim . member) (nz91d3 core-prim . exists) (nz91d2 core-prim . for-all) (nz91d1 core-prim . fold-right) (nz91d0 core-prim . fold-left) (nz91cf core-prim . find) (nz91ce core-prim . filter) (nz91cd core-prim . cons*) (nz91cc core-prim . assv) (nz91cb core-prim . assq) (nz91ca core-prim . assp) (nz91c9 core-prim . assoc) (nz91c8 core-prim . call-with-string-output-port) (nz91c7 core-prim . call-with-port) (nz91c6 core-prim . call-with-bytevector-output-port) (nz91c5 core-prim . bytevector->string) (nz91c4 core-prim . buffer-mode?) (nz91c3 core-prim . binary-port?) (nz91c2 core-prim . with-exception-handler) (nz91c1 core-prim . raise-continuable) (nz91c0 core-prim . raise) (nz704d core-prim . eval) (nz7045 core-prim . environment) (nz91bf core-prim . make-enumeration) (nz91be core-prim . enum-set=?) (nz91bd core-prim . enum-set-universe) (nz91bc core-prim . enum-set-union) (nz91bb core-prim . enum-set-subset?) (nz91ba core-prim . enum-set-projection) (nz91b9 core-prim . enum-set-member?) (nz91b8 core-prim . enum-set-intersection) (nz91b7 core-prim . enum-set-indexer) (nz91b6 core-prim . enum-set-difference) (nz91b5 core-prim . enum-set-constructor) (nz91b4 core-prim . enum-set-complement) (nz91b3 core-prim . enum-set->list) (nz8be3 core-prim . who-condition?) (nz8b5b core-prim . warning?) (nz8b9a core-prim . violation?) (nz8c5a core-prim . undefined-violation?) (nz8c41 core-prim . syntax-violation?) (nz8c45 core-prim . syntax-violation-subform) (nz8c43 core-prim . syntax-violation-form) (nz706d core-prim . syntax-violation) (nz91b2 core-prim . simple-conditions) (nz8b70 core-prim . serious-condition?) (nz8bfa core-prim . non-continuable-violation?) (nz8b44 core-prim . message-condition?) (nz8bdf core-prim . make-who-condition) (nz8b59 core-prim . make-warning) (nz8b98 core-prim . make-violation) (nz8c58 core-prim . make-undefined-violation) (nz8c3b core-prim . make-syntax-violation) (nz8b6e core-prim . make-serious-condition) (nz8bf8 core-prim . make-non-continuable-violation) (nz8b40 core-prim . make-message-condition) (nz8c22 core-prim . make-lexical-violation) (nz8bc4 core-prim . make-irritants-condition) (nz8c0d core-prim . make-implementation-restriction-violation) (nz8b83 core-prim . make-error) (nz8bad core-prim . make-assertion-violation) (nz8c24 core-prim . lexical-violation?) (nz8bc8 core-prim . irritants-condition?) (nz8c0f core-prim . implementation-restriction-violation?) (nz8b85 core-prim . error?) (nz8be5 core-prim . condition-who) (nz91b1 core-prim . condition-predicate) (nz8b46 core-prim . condition-message) (nz8bca core-prim . condition-irritants) (nz91b0 core-prim . condition-accessor) (nz91af core-prim . condition) (nz8baf core-prim . assertion-violation?) (nz91ae core-prim . condition?) (nz91ad core-prim . utf32->string) (nz91ac core-prim . utf16->string) (nz91ab core-prim . utf8->string) (nz91aa core-prim . uint-list->bytevector) (nz91a9 core-prim . u8-list->bytevector) (nz91a8 core-prim . string->utf8) (nz91a7 core-prim . string->utf32) (nz91a6 core-prim . string->utf16) (nz91a5 core-prim . sint-list->bytevector) (nz91a4 core-prim . native-endianness) (nz91a3 core-prim . bytevector?) (nz91a2 core-prim . bytevector=?) (nz91a1 core-prim . bytevector-uint-set!) (nz91a0 core-prim . bytevector-uint-ref) (nz919f core-prim . bytevector-u8-set!) (nz919e core-prim . bytevector-u8-ref) (nz919d core-prim . bytevector-u64-set!) (nz919c core-prim . bytevector-u64-ref) (nz919b core-prim . bytevector-u64-native-set!) (nz919a core-prim . bytevector-u64-native-ref) (nz9199 core-prim . bytevector-u32-set!) (nz9198 core-prim . bytevector-u32-ref) (nz9197 core-prim . bytevector-u32-native-set!) (nz9196 core-prim . bytevector-u32-native-ref) (nz9195 core-prim . bytevector-u16-set!) (nz9194 core-prim . bytevector-u16-ref) (nz9193 core-prim . bytevector-u16-native-set!) (nz9192 core-prim . bytevector-u16-native-ref) (nz9191 core-prim . bytevector-sint-set!) (nz9190 core-prim . bytevector-sint-ref) (nz918f core-prim . bytevector-s8-set!) (nz918e core-prim . bytevector-s8-ref) (nz918d core-prim . bytevector-s64-set!) (nz918c core-prim . bytevector-s64-ref) (nz918b core-prim . bytevector-s64-native-set!) (nz918a core-prim . bytevector-s64-native-ref) (nz9189 core-prim . bytevector-s32-set!) (nz9188 core-prim . bytevector-s32-ref) (nz9187 core-prim . bytevector-s32-native-set!) (nz9186 core-prim . bytevector-s32-native-ref) (nz9185 core-prim . bytevector-s16-set!) (nz9184 core-prim . bytevector-s16-ref) (nz9183 core-prim . bytevector-s16-native-set!) (nz9182 core-prim . bytevector-s16-native-ref) (nz9181 core-prim . bytevector-length) (nz9180 core-prim . bytevector-ieee-single-ref) (nz917f core-prim . bytevector-ieee-single-set!) (nz917e core-prim . bytevector-ieee-single-native-set!) (nz917d core-prim . bytevector-ieee-single-native-ref) (nz917c core-prim . bytevector-ieee-double-set!) (nz917b core-prim . bytevector-ieee-double-ref) (nz917a core-prim . bytevector-ieee-double-native-set!) (nz9179 core-prim . bytevector-ieee-double-native-ref) (nz9178 core-prim . bytevector-fill!) (nz9177 core-prim . bytevector-copy!) (nz9176 core-prim . bytevector-copy) (nz9175 core-prim . bytevector->uint-list) (nz9174 core-prim . bytevector->u8-list) (nz9173 core-prim . bytevector->sint-list) (nz8d98 core-prim . no-nans-violation?) (nz8d83 core-prim . no-infinities-violation?) (nz8d96 core-prim . make-no-nans-violation) (nz8d81 core-prim . make-no-infinities-violation) (nz9172 core-prim . real->flonum) (nz9171 core-prim . flzero?) (nz9170 core-prim . fltruncate) (nz916f core-prim . fltan) (nz916e core-prim . flsqrt) (nz916d core-prim . flsin) (nz916c core-prim . flround) (nz916b core-prim . flpositive?) (nz916a core-prim . flonum?) (nz9169 core-prim . flodd?) (nz9168 core-prim . flnumerator) (nz9167 core-prim . flnegative?) (nz9166 core-prim . flnan?) (nz9165 core-prim . flmod0) (nz9164 core-prim . flmod) (nz9163 core-prim . flmin) (nz9162 core-prim . flmax) (nz9161 core-prim . fllog) (nz9160 core-prim . flinteger?) (nz915f core-prim . flinfinite?) (nz915e core-prim . flfloor) (nz915d core-prim . flfinite?) (nz915c core-prim . flexpt) (nz915b core-prim . flexp) (nz915a core-prim . fleven?) (nz9159 core-prim . fldiv0-and-mod0) (nz9158 core-prim . fldiv0) (nz9157 core-prim . fldiv-and-mod) (nz9156 core-prim . fldiv) (nz9155 core-prim . fldenominator) (nz9154 core-prim . flcos) (nz9153 core-prim . flceiling) (nz9152 core-prim . flatan) (nz9151 core-prim . flasin) (nz9150 core-prim . flacos) (nz914f core-prim . flabs) (nz914e core-prim . fl>?) (nz914d core-prim . fl>=?) (nz914c core-prim . fl=?) (nz914b core-prim . fl<?) (nz914a core-prim . fl<=?) (nz9149 core-prim . fl/) (nz9148 core-prim . fl-) (nz9147 core-prim . fl+) (nz9146 core-prim . fl*) (nz9145 core-prim . fixnum->flonum) (nz9144 core-prim . fxzero?) (nz9143 core-prim . fxxor) (nz9142 core-prim . fxrotate-bit-field) (nz9141 core-prim . fxreverse-bit-field) (nz9140 core-prim . fxpositive?) (nz913f core-prim . fxodd?) (nz913e core-prim . fxnot) (nz913d core-prim . fxnegative?) (nz913c core-prim . fxmod0) (nz913b core-prim . fxmod) (nz913a core-prim . fxmin) (nz9139 core-prim . fxmax) (nz9138 core-prim . fxlength) (nz9137 core-prim . fxior) (nz9136 core-prim . fxif) (nz9135 core-prim . fxfirst-bit-set) (nz9134 core-prim . fxeven?) (nz9133 core-prim . fxdiv0-and-mod0) (nz9132 core-prim . fxdiv0) (nz9131 core-prim . fxdiv-and-mod) (nz9130 core-prim . fxdiv) (nz912f core-prim . fxcopy-bit-field) (nz912e core-prim . fxcopy-bit) (nz912d core-prim . fxbit-set?) (nz912c core-prim . fxbit-field) (nz912b core-prim . fxbit-count) (nz912a core-prim . fxarithmetic-shift-right) (nz9129 core-prim . fxarithmetic-shift-left) (nz9128 core-prim . fxarithmetic-shift) (nz9127 core-prim . fxand) (nz9126 core-prim . fx>?) (nz9125 core-prim . fx>=?) (nz9124 core-prim . fx=?) (nz9123 core-prim . fx<?) (nz9122 core-prim . fx<=?) (nz9121 core-prim . fx-/carry) (nz9120 core-prim . fx-) (nz911f core-prim . fx+/carry) (nz911e core-prim . fx+) (nz911d core-prim . fx*/carry) (nz911c core-prim . fx*) (nz911b core-prim . greatest-fixnum) (nz911a core-prim . least-fixnum) (nz9119 core-prim . fixnum-width) (nz9118 core-prim . fixnum?) (nz9117 core-prim . bitwise-rotate-bit-field) (nz9116 core-prim . bitwise-reverse-bit-field) (nz9115 core-prim . bitwise-length) (nz9114 core-prim . bitwise-if) (nz9113 core-prim . bitwise-first-bit-set) (nz9112 core-prim . bitwise-copy-bit-field) (nz9111 core-prim . bitwise-copy-bit) (nz9110 core-prim . bitwise-bit-set?) (nz910f core-prim . bitwise-bit-field) (nz910e core-prim . bitwise-bit-count) (nz910d core-prim . bitwise-xor) (nz910c core-prim . bitwise-ior) (nz910b core-prim . bitwise-and) (nz910a core-prim . bitwise-not) (nz9109 core-prim . bitwise-arithmetic-shift-right) (nz9108 core-prim . bitwise-arithmetic-shift-left) (nz9107 core-prim . bitwise-arithmetic-shift) (nz9106 core-prim . zero?) (nz9105 core-prim . vector?) (nz9104 core-prim . vector-set!) (nz9103 core-prim . vector-ref) (nz9102 core-prim . vector-map) (nz9101 core-prim . vector-length) (nz9100 core-prim . vector-for-each) (nz90ff core-prim . vector-fill!) (nz90fe core-prim . vector->list) (nz90fd core-prim . vector) (nz90fc core-prim . values) (nz90fb core-prim . truncate) (nz90fa core-prim . tan) (nz90f9 core-prim . symbol?) (nz90f8 core-prim . symbol=?) (nz90f7 core-prim . symbol->string) (nz90f6 core-prim . substring) (nz90f5 core-prim . string?) (nz90f4 core-prim . string>?) (nz90f3 core-prim . string>=?) (nz90f2 core-prim . string=?) (nz90f1 core-prim . string<?) (nz90f0 core-prim . string<=?) (nz90ef core-prim . string-ref) (nz90ee core-prim . string-length) (nz90ed core-prim . string-for-each) (nz90ec core-prim . string-copy) (nz90eb core-prim . string-append) (nz90ea core-prim . string->symbol) (nz90e9 core-prim . string->number) (nz90e8 core-prim . string->list) (nz90e7 core-prim . string) (nz90e6 core-prim . sqrt) (nz90e5 core-prim . sin) (nz90e4 core-prim . round) (nz90e3 core-prim . reverse) (nz90e2 core-prim . real?) (nz90e1 core-prim . real-valued?) (nz90e0 core-prim . real-part) (nz90df core-prim . rationalize) (nz90de core-prim . rational?) (nz90dd core-prim . rational-valued?) (nz90dc core-prim . procedure?) (nz90db core-prim . positive?) (nz90da core-prim . pair?) (nz90d9 core-prim . odd?) (nz90d8 core-prim . numerator) (nz90d7 core-prim . number?) (nz90d6 core-prim . number->string) (nz90d5 core-prim . null?) (nz90d4 core-prim . not) (nz90d3 core-prim . negative?) (nz90d2 core-prim . nan?) (nz90d1 core-prim . min) (nz90d0 core-prim . max) (nz90cf core-prim . map) (nz90ce core-prim . make-vector) (nz90cd core-prim . make-string) (nz90cc core-prim . make-rectangular) (nz90cb core-prim . make-polar) (nz90ca core-prim . magnitude) (nz90c9 core-prim . log) (nz90c8 core-prim . list?) (nz90c7 core-prim . list-tail) (nz90c6 core-prim . list-ref) (nz90c5 core-prim . list->vector) (nz90c4 core-prim . list->string) (nz90c3 core-prim . list) (nz90c2 core-prim . length) (nz90c1 core-prim . lcm) (nz90c0 core-prim . integer?) (nz90bf core-prim . integer-valued?) (nz90be core-prim . integer->char) (nz90bd core-prim . infinite?) (nz90bc core-prim . inexact?) (nz90bb core-prim . inexact) (nz90ba core-prim . imag-part) (nz90b9 core-prim . gcd) (nz90b8 core-prim . for-each) (nz90b7 core-prim . floor) (nz90b6 core-prim . finite?) (nz90b5 core-prim . expt) (nz90b4 core-prim . exp) (nz90b3 core-prim . exact?) (nz90b2 core-prim . exact-integer-sqrt) (nz90b1 core-prim . exact) (nz90b0 core-prim . even?) (nz90af core-prim . error) (nz90ae core-prim . eqv?) (nz90ad core-prim . equal?) (nz90ac core-prim . eq?) (nz90ab core-prim . dynamic-wind) (nz90aa core-prim . div0-and-mod0) (nz90a9 core-prim . mod0) (nz90a8 core-prim . div0) (nz90a7 core-prim . div-and-mod) (nz90a6 core-prim . mod) (nz90a5 core-prim . div) (nz90a4 core-prim . denominator) (nz90a3 core-prim . cos) (nz90a2 core-prim . cons) (nz90a1 core-prim . complex?) (nz90a0 core-prim . char?) (nz909f core-prim . char>?) (nz909e core-prim . char>=?) (nz909d core-prim . char=?) (nz909c core-prim . char<?) (nz909b core-prim . char<=?) (nz909a core-prim . char->integer) (nz9099 core-prim . ceiling) (nz9098 core-prim . call-with-values) (nz9097 core-prim . call/cc) (nz9096 core-prim . call-with-current-continuation) (nz9095 core-prim . cddddr) (nz9094 core-prim . cdddar) (nz9093 core-prim . cddadr) (nz9092 core-prim . cddaar) (nz9091 core-prim . cdaddr) (nz9090 core-prim . cdadar) (nz908f core-prim . cdaadr) (nz908e core-prim . cdaaar) (nz908d core-prim . cadddr) (nz908c core-prim . caddar) (nz908b core-prim . cadadr) (nz908a core-prim . cadaar) (nz9089 core-prim . caaddr) (nz9088 core-prim . caadar) (nz9087 core-prim . caaadr) (nz9086 core-prim . caaaar) (nz9085 core-prim . cdddr) (nz9084 core-prim . cddar) (nz9083 core-prim . cdadr) (nz9082 core-prim . cdaar) (nz9081 core-prim . caddr) (nz9080 core-prim . cadar) (nz907f core-prim . caadr) (nz907e core-prim . caaar) (nz907d core-prim . cddr) (nz907c core-prim . cdar) (nz907b core-prim . cadr) (nz907a core-prim . caar) (nz9079 core-prim . cdr) (nz9078 core-prim . car) (nz9077 core-prim . boolean?) (nz9076 core-prim . boolean=?) (nz9075 core-prim . atan) (nz9074 core-prim . assertion-violation) (nz7067 core-prim . assertion-error) (nz9073 core-prim . asin) (nz9072 core-prim . apply) (nz9071 core-prim . append) (nz9070 core-prim . angle) (nz906f core-prim . acos) (nz906e core-prim . abs) (nz906d core-prim . /) (nz906c core-prim . *) (nz906b core-prim . -) (nz906a core-prim . +) (nz9069 core-prim . >=) (nz9068 core-prim . >) (nz9067 core-prim . =) (nz9066 core-prim . <=) (nz9065 core-prim . <) (nz9064 core-prim . library) (nz9063 $core-rtd &no-nans-rtd &no-nans-rcd) (nz9062 $core-rtd &no-infinities-rtd &no-infinities-rcd) (nz9061 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (nz9060 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (nz905f $core-rtd &i/o-port-rtd &i/o-port-rcd) (nz905e $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (nz905d $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (nz905c $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (nz905b $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (nz905a $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (nz9059 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (nz9058 $core-rtd &i/o-write-rtd &i/o-write-rcd) (nz9057 $core-rtd &i/o-read-rtd &i/o-read-rcd) (nz9056 $core-rtd &i/o-rtd &i/o-rcd) (nz9055 $core-rtd &undefined-rtd &undefined-rcd) (nz9054 $core-rtd &syntax-rtd &syntax-rcd) (nz9053 $core-rtd &lexical-rtd &lexical-rcd) (nz9052 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (nz9051 $core-rtd &non-continuable-rtd &non-continuable-rcd) (nz9050 $core-rtd &who-rtd &who-rcd) (nz904f $core-rtd &irritants-rtd &irritants-rcd) (nz904e $core-rtd &assertion-rtd &assertion-rcd) (nz904d $core-rtd &violation-rtd &violation-rcd) (nz904c $core-rtd &error-rtd &error-rcd) (nz904b $core-rtd &serious-rtd &serious-rcd) (nz904a $core-rtd &warning-rtd &warning-rcd) (nz9049 $core-rtd &message-rtd &message-rcd) (nz9048 $core-rtd &condition-rtd &condition-rcd) (nz9047 macro . define-condition-type) (nz9046 macro . define-enumeration) (nz9045 macro . define-record-type) (nz9044 macro . parent-rtd) (nz9043 macro . nongenerative) (nz9042 macro . opaque) (nz9041 macro . sealed) (nz9040 macro . protocol) (nz903f macro . parent) (nz903e macro . immutable) (nz903d macro . mutable) (nz903c macro . fields) (nz903b macro . error-handling-mode) (nz903a macro . file-options) (nz9039 macro . buffer-mode) (nz9038 macro . eol-style) (nz9037 macro . guard) (nz9036 macro . trace-define) (nz9035 macro . trace-lambda) (nz9034 macro . unsyntax-splicing) (nz9033 macro . unsyntax) (nz9032 macro . unquote-splicing) (nz9031 macro . unquote) (nz9030 macro . _) (nz902f macro . else) (nz902e macro . =>) (nz902d macro . ...) (nz902c macro . assert) (nz902b macro . endianness) (nz902a macro . delay) (nz9029 macro . time) (nz9028 macro . do) (nz9027 macro . cond) (nz9026 macro . let*) (nz9025 macro . let*-values) (nz9024 macro . let-values) (nz9023 macro . identifier-syntax) (nz9022 macro . with-syntax) (nz9021 macro . quasisyntax) (nz9020 macro . quasiquote) (nz901f macro . syntax-rules) (nz901e macro . include) (nz901d macro . define-struct) (nz901c core-macro . record-constructor-descriptor) (nz901b core-macro . record-type-descriptor) (nz901a macro . case) (nz9019 macro . parameterize) (nz9018 macro . unless) (nz9017 macro . when) (nz9016 core-macro . or) (nz9015 core-macro . and) (nz9014 core-macro . if) (nz9013 core-macro . let) (nz9012 core-macro . letrec*) (nz9011 core-macro . letrec) (nz9010 core-macro . type-descriptor) (nz900f core-macro . case-lambda) (nz900e core-macro . lambda) (nz900d core-macro . syntax) (nz900c core-macro . syntax-case) (nz900b core-macro . quote) (nz900a core-macro . foreign-call) (nz9009 letrec-syntax) (nz9008 let-syntax) (nz9007 set!) (nz9006 import) (nz9005 begin) (nz9004 module) (nz9003 define-syntax) (nz9002 define)) values values '#f '#f '#f '#f) (nz6b9a@nz69d6@install-library 'nz9352 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . nz9331) (eval-core . nz9330) (set-symbol-value! . nz932f) (symbol-value . nz932e) (gensym . nz932d) (void . nz932c)) '() values values '#f '#f '#f '#f) (nz6b9a@nz69d6@install-library 'nz9353 '(mosh) '() '() '() '() '((set-symbol-value! . nz932f) (symbol-value . nz932e) (gensym . nz932d) (regexp? . nz932a) (read-line . nz9329) (ungensym . nz9327) (alist->eq-hash-table . nz9326) (assoc-ref . nz9325) (print . nz9324) (format . nz9323) (host-os . nz9322) (library-path . nz69b5) (standard-library-path . nz9321) (file-newer? . nz9320) (stat-mtime . nz931f) (digit->integer . nz931a) (call-with-string-input-port . nz9319) (call-with-string-io . nz9318) (string-split . nz9317) (bytevector-for-each . nz9316) (string->regexp . nz9315) (rxmatch . nz9314) (regexp-replace-all . nz9313) (hashtable-for-each . nz9312) (set-current-directory! . nz930d) (expand-path . nz930c) (current-directory . nz930b) (p . nz92ca) (get-timeofday . nz92b1) (get-command-line . nz92b0) (sys-display . nz92af) (whereis . nz92ae) (register . nz92ad) (vm-join! . nz92ac) (vm-set-value! . nz92ab) (vm? . nz92aa) (main-vm? . nz92a9) (vm-eval . nz92a8) (vm-self . nz92a7) (vm-start! . nz92a6) (make-vm . nz92a5) (mutex-try-lock! . nz92a4) (mutex-unlock! . nz92a3) (mutex-lock! . nz92a2) (mutex? . nz92a1) (make-mutex . nz92a0) (condition-variable-notify-all! . nz929f) (condition-variable-notify! . nz929e) (condition-variable-wait! . nz929d) (make-condition-variable . nz929c) (mosh-executable-path . nz929b) (make-file-options . nz929a) (for-each-with-index . nz9299) (source-info . nz9298) (make-compiler-instruction . nz9293) (make-instruction . nz9292) (set-source-info! . nz9291) (bignum? . nz9290) (fast-equal? . nz928f) (fasl-read . nz928e) (fasl-write . nz928d) (time-usage . nz928c) (os-constant . nz928b) (time . nz9029) (include . nz901e)) '() values values '#f '#f '#f '#f) (nz6b9a@nz69d6@install-library 'nz9354 '(system) '() '() '() '() '((gensym-prefix-set! . nz9328) (write-to-file . nz931e) (file->sexp-list . nz931d) (file->list . nz931c) (file->string . nz931b) (mosh-cache-dir . nz679f) (call-process . nz9311) (local-tz-offset . nz9310) (microseconds . nz930f) (directory-list . nz930e) (expand-path . nz930c) (%spawn . nz930a) (%waitpid . nz9309) (simple-struct-name . nz9308) (simple-struct-set! . nz9307) (simple-struct-ref . nz9306) (make-simple-struct . nz9305) (simple-struct? . nz9304) (pointer-ref-c-int64 . nz9303) (pointer-ref-c-int32 . nz9302) (pointer-ref-c-int16 . nz9301) (pointer-ref-c-int8 . nz9300) (pointer-ref-c-uint64 . nz92ff) (pointer-ref-c-uint32 . nz92fe) (pointer-ref-c-uint16 . nz92fd) (pointer-ref-c-uint8 . nz92fc) (pointer-set-c-uint64! . nz92fb) (pointer-set-c-uint32! . nz92fa) (pointer-set-c-uint16! . nz92f9) (pointer-set-c-uint8! . nz92f8) (pointer-set-c-int64! . nz92f7) (pointer-set-c-int32! . nz92f6) (pointer-set-c-int16! . nz92f5) (pointer-set-c-int8! . nz92f4) (pointer-set-c-pointer! . nz92f3) (pointer-set-c-double! . nz92f2) (pointer-set-c-float! . nz92f1) (pointer-set-c-long-long! . nz92f0) (pointer-set-c-long! . nz92ef) (pointer-set-c-int! . nz92ee) (pointer-set-c-short! . nz92ed) (pointer-set-c-char! . nz92ec) (pointer-ref-c-pointer . nz92eb) (pointer-ref-c-double . nz92ea) (pointer-ref-c-float . nz92e9) (pointer-ref-c-unsigned-long-long . nz92e8) (pointer-ref-c-signed-long-long . nz92e7) (pointer-ref-c-unsigned-long . nz92e6) (pointer-ref-c-signed-long . nz92e5) (pointer-ref-c-unsigned-int . nz92e4) (pointer-ref-c-signed-int . nz92e3) (pointer-ref-c-unsigned-short . nz92e2) (pointer-ref-c-signed-short . nz92e1) (pointer-ref-c-unsigned-char . nz92e0) (pointer-ref-c-signed-char . nz92df) (pointer->integer . nz92de) (integer->pointer . nz92dd) (pointer? . nz92dc) (shared-errno . nz92db) (get-c-address . nz92da) (obj->integer . nz92d9) (u8-list->c-procedure . nz92d8) (%ffi-free-c-callback-trampoline . nz92d7) (%ffi-make-c-callback-trampoline . nz92d6) (%ffi-free . nz92d5) (%ffi-malloc . nz92d4) (%ffi-supported? . nz92d3) (%ffi-pointer->string . nz92d2) (%ffi-call . nz92d1) (%ffi-lookup . nz92d0) (%ffi-open . nz92cf) (null-terminated-utf8->string . nz92ce) (null-terminated-bytevector->string . nz92cd) (%fork . nz92cc) (%pipe . nz92cb) (open-output-string . nz92c9) (get-output-string . nz92c8) (file-stat-ctime . nz92c7) (file-stat-atime . nz92c6) (file-stat-mtime . nz92c5) (file-size-in-bytes . nz92c4) (file-writable? . nz92c3) (file-executable? . nz92c2) (file-readable? . nz92c1) (file-regular? . nz92c0) (file-symbolic-link? . nz92bf) (file-directory? . nz92be) (create-symbolic-link . nz92bd) (rename-file . nz92bc) (delete-directory . nz92bb) (create-directory . nz92ba) (create-mosh-cache-dir . nz92b9) (get-environment-variables . nz92b8) (current-exception-handler . nz92b7) (get-environment-variable . nz92b6) (join-wraps . nz92b5) (id->real-label . nz92b4) (same-marks? . nz92b3) (same-marks*? . nz92b2) (instruction? . nz9297) (instruction->integer . nz9296) (instruction->symbol . nz9295) (closure->list . nz9294) (disasm . nz928a) (make-parameter . nz679d) (socket-port . nz9289) (socket-shutdown . nz9288) (socket-close . nz9287) (socket-send . nz9286) (socket-recv! . nz9285) (socket-recv . nz9284) (make-server-socket . nz9283) (make-client-socket . nz9282) (socket-accept . nz9281) (socket? . nz9280) (parameterize . nz9019)) '() values values '#f '#f '#f '#f)))
(begin (set! nz8e92@ref (unspecified)) (set! nz8e94@x* (unspecified)) (set! nz8e96@add-library-path! (unspecified)) (set! nz8e98@parse-and-add-library-path (unspecified)) (set! nz8e9a@rpad (unspecified)) (set! nz8e9c@condition-printer (unspecified)) (set! nz8e9e@record->field-alist (unspecified)) (set! nz8ea0@map-with-index (unspecified)) (set! nz8ea2@repl (unspecified)) (set! nz8ea4@trace-printer (unspecified)) (set! nz8ea6@command-line (unspecified)) (set! nz8ea8@local-library-path (unspecified)) (set! nz8eaa@load/args (unspecified)) (set! nz8eac@load (unspecified)) (set! nz8eae@ironscheme-build (unspecified)) (set! nz8eb0@eval-top-level (unspecified)) (set! nz8eb2@compile-system-libraries (unspecified)) (set! nz8eb4@compile (unspecified)) (set! nz8eb6@compile->closure (unspecified)) (set! nz8eb8@pre-compile-r6rs-file (unspecified)) (set! nz8eba@load-r6rs-top-level (unspecified)) (set! nz8ebc@load-r6rs-top-level-sexp (unspecified)) (set! nz8ebe@prefix-inc (unspecified)) (set! nz8ec0@prefix-inc! (unspecified)) (set! nz8e92@ref (lambda (nz8efb@rtd nz8efc@i nz8efd@x) (let ((nz8f01@val ((record-accessor nz8efb@rtd nz8efc@i) nz8efd@x))) (if (symbol? nz8f01@val) (ungensym nz8f01@val) nz8f01@val)))) (set! nz8fe9@nz8e92@ref nz8e92@ref) (set! nz8e94@x* '()) (set! nz8fea@nz8e94@x* nz8e94@x*) (set! nz8e96@add-library-path! (lambda (nz8f03@path) (nz6b8a@nz69b6@library-path (append (nz6b8a@nz69b6@library-path) (list nz8f03@path))))) (set! nz8feb@nz8e96@add-library-path! nz8e96@add-library-path!) (set! nz8e98@parse-and-add-library-path (lambda (nz8f05@paths nz8f06@message) (let ((nz8f0a@separator '#f)) (begin (set! nz8f0a@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((nz8f0b@t nz8f05@paths)) (if nz8f0b@t ((lambda (nz8f0d@paths) (for-each (lambda (nz8f0f@path) (if (file-exists? nz8f0f@path) (nz8e96@add-library-path! (expand-path nz8f0f@path)) (format (current-error-port) nz8f06@message nz8f0f@path))) (string-split nz8f0d@paths nz8f0a@separator))) nz8f0b@t) (void))))))) (set! nz8fec@nz8e98@parse-and-add-library-path nz8e98@parse-and-add-library-path) (set! nz8e9a@rpad (lambda (nz8f11@str nz8f12@pad nz8f13@n) (let ((nz8f17@rest (- nz8f13@n (string-length (format '"~a" nz8f11@str))))) (let nz8f1d@loop ((nz8f19@rest nz8f17@rest) (nz8f1a@ret (format '"~a" nz8f11@str))) (if (<= nz8f19@rest '0) nz8f1a@ret (nz8f1d@loop (- nz8f19@rest '1) (string-append nz8f1a@ret nz8f12@pad))))))) (set! nz8fed@nz8e9a@rpad nz8e9a@rpad) (set! nz8e9c@condition-printer (lambda (nz8f1f@e nz8f20@port) (let ((nz8f24@max-condition-len '#f)) (begin (set! nz8f24@max-condition-len (apply max (map (lambda (nz8f35@c) (string-length (symbol->string (record-type-name (record-rtd nz8f35@c))))) (simple-conditions nz8f1f@e)))) (begin (display '" Condition components:\n" nz8f20@port) (for-each-with-index (lambda (nz8f25@i nz8f26@x) (let ((nz8f29@rtd (record-rtd nz8f26@x)) (nz8f2a@fields-alist (nz8e9e@record->field-alist nz8f26@x))) (begin (format nz8f20@port '" ~d. ~a" (+ nz8f25@i '1) (nz8e9a@rpad (symbol->string (record-type-name nz8f29@rtd)) '" " nz8f24@max-condition-len)) (if (null? nz8f2a@fields-alist) (newline nz8f20@port) (void)) (let nz8f31@loop ((nz8f2d@first '#t) (nz8f2e@fields-alist nz8f2a@fields-alist)) (if (null? nz8f2e@fields-alist) '() (let ((nz8f33@field (car nz8f2e@fields-alist))) (begin (if (not nz8f2d@first) (display (nz8e9a@rpad '"" '" " (+ '4 nz8f24@max-condition-len)) nz8f20@port) (void)) (display '"       " nz8f20@port) (display (car nz8f33@field) nz8f20@port) (display '": " nz8f20@port) (write (cdr nz8f33@field) nz8f20@port) (newline nz8f20@port) (nz8f31@loop '#f (cdr nz8f2e@fields-alist))))))))) (simple-conditions nz8f1f@e))))))) (set! nz8fee@nz8e9c@condition-printer nz8e9c@condition-printer) (set! nz8e9e@record->field-alist (lambda (nz8f37@r) (let ((nz8f3a@ref '#f)) (begin (set! nz8f3a@ref (lambda (nz8f45@rtd nz8f46@i nz8f47@x) (let ((nz8f4b@val ((record-accessor nz8f45@rtd nz8f46@i) nz8f47@x))) (if (symbol? nz8f4b@val) (ungensym nz8f4b@val) nz8f4b@val)))) (let nz8f3f@loop ((nz8f3b@ret '()) (nz8f3c@rtd (record-rtd nz8f37@r))) (if nz8f3c@rtd (nz8f3f@loop (append nz8f3b@ret (nz8ea0@map-with-index (lambda (nz8f41@i nz8f42@field) (cons nz8f42@field (nz8f3a@ref nz8f3c@rtd nz8f41@i nz8f37@r))) (vector->list (record-type-field-names nz8f3c@rtd)))) (record-type-parent nz8f3c@rtd)) nz8f3b@ret)))))) (set! nz8fef@nz8e9e@record->field-alist nz8e9e@record->field-alist) (set! nz8ea0@map-with-index (lambda (nz8f4d@proc nz8f4e@lst) (let nz8f57@loop ((nz8f51@i '0) (nz8f52@lst nz8f4e@lst) (nz8f53@ret '())) (if (null? nz8f52@lst) (reverse nz8f53@ret) (nz8f57@loop (+ nz8f51@i '1) (cdr nz8f52@lst) (cons (nz8f4d@proc nz8f51@i (car nz8f52@lst)) nz8f53@ret)))))) (set! nz8ff0@nz8ea0@map-with-index nz8ea0@map-with-index) (set! nz8ea2@repl (lambda nz8f59@x (let ((nz8f5c@rec '#f)) (begin (set! nz8f5c@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (nz8f5f@nz8f5d) (lambda () (with-exception-handler (lambda (nz8f61@e) ((call/cc (lambda (nz8f63@nz8f5e) (nz8f5f@nz8f5d (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? nz8f61@e) (nz8e9c@condition-printer nz8f61@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" nz8f61@e))) (nz8f63@nz8f5e (lambda () (raise-continuable nz8f61@e)))))))))) (lambda () (let nz8f69@loop ((nz8f65@line (get-line (current-input-port))) (nz8f66@accum '"")) (let ((nz8f6c@parentheses-ok? '#f) (nz8f6e@eval-string-print '#f)) (begin (set! nz8f6c@parentheses-ok? (lambda (nz8f73@text) (let nz8f7b@loop ((nz8f75@chars (string->list nz8f73@text)) (nz8f76@p0 '0) (nz8f77@p1 '0)) (if (null? nz8f75@chars) (= '0 nz8f76@p0 nz8f77@p1) (let ((nz8f7d@t (car nz8f75@chars))) (if (memv nz8f7d@t '(#\()) (nz8f7b@loop (cdr nz8f75@chars) (+ nz8f76@p0 '1) nz8f77@p1) (if (memv nz8f7d@t '(#\))) (nz8f7b@loop (cdr nz8f75@chars) (- nz8f76@p0 '1) nz8f77@p1) (if (memv nz8f7d@t '(#\[)) (nz8f7b@loop (cdr nz8f75@chars) nz8f76@p0 (+ nz8f77@p1 '1)) (if (memv nz8f7d@t '(#\])) (nz8f7b@loop (cdr nz8f75@chars) nz8f76@p0 (- nz8f77@p1 '1)) (nz8f7b@loop (cdr nz8f75@chars) nz8f76@p0 nz8f77@p1)))))))))) (set! nz8f6e@eval-string-print (lambda (nz8f71@text) (if (not (or (string=? '"\n" nz8f71@text) (= '0 (string-length nz8f71@text)))) (write (nz8eb0@eval-top-level (call-with-port (open-string-input-port nz8f71@text) read))) (void)))) (if (eof-object? nz8f65@line) (begin (nz8f6e@eval-string-print nz8f66@accum) (exit)) (let ((nz8f6f@current (string-append nz8f66@accum nz8f65@line))) (if (nz8f6c@parentheses-ok? nz8f6f@current) (nz8f6e@eval-string-print nz8f6f@current) (nz8f69@loop (get-line (current-input-port)) nz8f6f@current))))))))))))) (newline) (nz8f5c@rec)))) (nz8f5c@rec))))) (set! nz8ff1@nz8ea2@repl nz8ea2@repl) (set! nz8ea4@trace-printer (nz68c0@nz679e@make-parameter write)) (set! nz8ff2@nz8ea4@trace-printer nz8ea4@trace-printer) (set! nz8ea6@command-line (nz68c0@nz679e@make-parameter (get-command-line))) (set! nz8ff3@nz8ea6@command-line nz8ea6@command-line) (set! nz8ea8@local-library-path (lambda (nz8f7f@filename) (nz6b8a@nz69b6@library-path))) (set! nz8ff4@nz8ea8@local-library-path nz8ea8@local-library-path) (set! nz8eaa@load/args (lambda (nz8f81@filename . nz8f83@args) (begin (apply nz8eba@load-r6rs-top-level nz8f81@filename 'load nz8f83@args) (void)))) (set! nz8ff5@nz8eaa@load/args nz8eaa@load/args) (set! nz8eac@load (lambda (nz8f85@filename) (begin (apply nz8eba@load-r6rs-top-level nz8f85@filename 'load (nz8ea6@command-line)) (void)))) (set! nz8ff6@nz8eac@load nz8eac@load) (set! nz8eae@ironscheme-build (lambda () (nz8eac@load '"ironscheme-buildscript.ss"))) (set! nz8ff7@nz8eae@ironscheme-build nz8eae@ironscheme-build) (set! nz8eb0@eval-top-level (lambda (nz8f87@x) (nz8ab8@nz704e@eval nz8f87@x (nz8acf@nz707c@interaction-environment)))) (set! nz8ff8@nz8eb0@eval-top-level nz8eb0@eval-top-level) (set! nz8eb2@compile-system-libraries (lambda () (nz8eb0@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! nz8ff9@nz8eb2@compile-system-libraries nz8eb2@compile-system-libraries) (set! nz8eb4@compile (lambda (nz8f89@filename) (nz8eba@load-r6rs-top-level nz8f89@filename 'compile))) (set! nz8ffa@nz8eb4@compile nz8eb4@compile) (set! nz8eb6@compile->closure (lambda (nz8f8b@filename) (nz8eba@load-r6rs-top-level nz8f8b@filename 'closure))) (set! nz8ffb@nz8eb6@compile->closure nz8eb6@compile->closure) (set! nz8eb8@pre-compile-r6rs-file (lambda (nz8f8d@filename) (nz8eba@load-r6rs-top-level nz8f8d@filename 'compile))) (set! nz8ffc@nz8eb8@pre-compile-r6rs-file nz8eb8@pre-compile-r6rs-file) (set! nz8eba@load-r6rs-top-level (lambda (nz8f8f@filename nz8f90@how . nz8f93@args) (begin (nz6b8a@nz69b6@library-path (nz8ea8@local-library-path nz8f8f@filename)) (let ((nz8f95@x* (with-input-from-file nz8f8f@filename (lambda () (let nz8f97@f () (let ((nz8f99@x (nz68b2@nz6782@read-annotated))) (if (eof-object? nz8f99@x) '() (cons nz8f99@x (nz8f97@f))))))))) (let ((nz8f9b@t nz8f90@how)) (if (memv nz8f9b@t '(closure)) (nz8ace@nz707a@pre-compile-r6rs-top-level nz8f95@x*) (if (memv nz8f9b@t '(load)) (begin (nz8ea6@command-line (cons nz8f8f@filename (car nz8f93@args))) (nz68c1@nz67a0@mosh-cache-dir (create-mosh-cache-dir)) (if (nz68c1@nz67a0@mosh-cache-dir) (gensym-prefix-set! (nz8ec0@prefix-inc! (string-append (nz68c1@nz67a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (nz8f9d@file) ((call/cc (lambda (nz8fa1@nz8f9f) (lambda () (with-exception-handler (lambda (nz8fa3@c) ((call/cc (lambda (nz8fa5@nz8fa0) (nz8fa1@nz8f9f (lambda () (if '#t '#t (nz8fa5@nz8fa0 (lambda () (raise-continuable nz8fa3@c)))))))))) (lambda () (delete-file (string-append (nz68c1@nz67a0@mosh-cache-dir) '"/" nz8f9d@file))))))))) (directory-list (nz68c1@nz67a0@mosh-cache-dir))) (void)) (let ((nz8fa7@compiled (nz8acd@nz7078@compile-r6rs-top-level nz8f95@x*))) (begin (if (and (nz68c1@nz67a0@mosh-cache-dir) (not (symbol-value '%disable-acc))) (nz6b8e@nz69be@serialize-all nz68bb@nz6794@serialize-library nz6917@nz68d0@compile-core-expr) (void)) (nz8fa7@compiled)))) (if (memv nz8f9b@t '(compile)) (begin (nz8acd@nz7078@compile-r6rs-top-level nz8f95@x*) (nz6b8e@nz69be@serialize-all nz68bb@nz6794@serialize-library nz6917@nz68d0@compile-core-expr)) (if '#f '#f (void)))))))))) (set! nz8ffd@nz8eba@load-r6rs-top-level nz8eba@load-r6rs-top-level) (set! nz8ebc@load-r6rs-top-level-sexp (lambda (nz8fa9@import-spec nz8faa@thunk) (let ((nz8fb5@nz8fae nz6b8a@nz69b6@library-path) (nz8fb6@nz8fb0 nz68c1@nz67a0@mosh-cache-dir) (nz8fb7@nz8fb2 (nz8ea8@local-library-path '"")) (nz8fb8@nz8fb4 (create-mosh-cache-dir))) (let ((nz8fbd@swap (lambda () (begin (let ((nz8fbf@t (nz8fb5@nz8fae))) (begin (nz8fb5@nz8fae nz8fb7@nz8fb2) (set! nz8fb7@nz8fb2 nz8fbf@t))) (let ((nz8fc1@t (nz8fb6@nz8fb0))) (begin (nz8fb6@nz8fb0 nz8fb8@nz8fb4) (set! nz8fb8@nz8fb4 nz8fc1@t))))))) (dynamic-wind nz8fbd@swap (lambda () (begin (if (nz68c1@nz67a0@mosh-cache-dir) (gensym-prefix-set! (nz8ec0@prefix-inc! (string-append (nz68c1@nz67a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((nz8fc7@nz8fc4 nz8ea6@command-line) (nz8fc8@nz8fc6 '())) (let ((nz8fcb@swap (lambda () (let ((nz8fcd@t (nz8fc7@nz8fc4))) (begin (nz8fc7@nz8fc4 nz8fc8@nz8fc6) (set! nz8fc8@nz8fc6 nz8fcd@t)))))) (dynamic-wind nz8fcb@swap (lambda () ((nz8acd@nz7078@compile-r6rs-top-level (list (cons 'import nz8fa9@import-spec) (list nz8faa@thunk))))) nz8fcb@swap))))) nz8fbd@swap))))) (set! nz8ffe@nz8ebc@load-r6rs-top-level-sexp nz8ebc@load-r6rs-top-level-sexp) (set! nz8ebe@prefix-inc (lambda (nz8fcf@prefix-string) (let ((nz8fd1@prefix (symbol->string nz8fcf@prefix-string))) (let ((nz8fd3@len (string-length nz8fd1@prefix))) (let nz8fdb@loop ((nz8fd5@i (- nz8fd3@len '1)) (nz8fd6@carry? '#t) (nz8fd7@accum '())) (if (< nz8fd5@i '0) (string->symbol (list->string (if nz8fd6@carry? (cons '#\a nz8fd7@accum) nz8fd7@accum))) (if nz8fd6@carry? (let ((nz8fdd@next-integer (+ '1 (char->integer (string-ref nz8fd1@prefix nz8fd5@i))))) (if (= nz8fdd@next-integer '123) (nz8fdb@loop (- nz8fd5@i '1) '#f (cons '#\A nz8fd7@accum)) (if (= nz8fdd@next-integer '91) (nz8fdb@loop (- nz8fd5@i '1) '#t (cons '#\a nz8fd7@accum)) (nz8fdb@loop (- nz8fd5@i '1) '#f (cons (integer->char nz8fdd@next-integer) nz8fd7@accum))))) (nz8fdb@loop (- nz8fd5@i '1) '#f (cons (string-ref nz8fd1@prefix nz8fd5@i) nz8fd7@accum))))))))) (set! nz8fff@nz8ebe@prefix-inc nz8ebe@prefix-inc) (set! nz8ec0@prefix-inc! (lambda (nz8fdf@file) (begin (if (not (file-exists? nz8fdf@file)) (call-with-output-file nz8fdf@file (lambda (nz8fe1@port) (write 'd nz8fe1@port))) (void)) (let ((nz8fe3@prefix (call-with-input-file nz8fdf@file read))) (if (main-vm?) (let ((nz8fe5@next-prefix (nz8ebe@prefix-inc nz8fe3@prefix))) (begin (call-with-port (open-file-output-port nz8fdf@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (nz8fe7@port) (write nz8fe5@next-prefix nz8fe7@port))) nz8fe3@prefix)) nz8fe3@prefix))))) (set! nz9000@nz8ec0@prefix-inc! nz8ec0@prefix-inc!) (begin (nz6b8f@nz69c0@current-precompiled-library-loader nz68bc@nz6796@load-serialized-library) (set-symbol-value! 'load nz8eac@load) (set-symbol-value! 'pre-compile-r6rs-file nz8eb8@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs nz8eb0@eval-top-level) (set-symbol-value! 'int-env-syms nz8aaf@nz703c@interaction-environment-symbols) (set-symbol-value! 'expanded2core nz6916@nz68ce@expanded->core) (set-symbol-value! 'trace-printer nz8ea4@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'invoke-library-by-name nz6b9f@nz69e0@invoke-library-by-name) (set-symbol-value! 'mosh-cache-dir nz68c1@nz67a0@mosh-cache-dir) (set-symbol-value! 'create-non-continuable-violation (lambda (nz8ec1@c) (condition (nz8def@nz8bf9@make-non-continuable-violation) (nz8de5@nz8be0@make-who-condition 'raise) (nz8da9@nz8b41@make-message-condition '"returned from non-continuable exception") (nz8ddb@nz8bc5@make-irritants-condition (list nz8ec1@c))))) (nz8e98@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (nz8e98@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (nz8e96@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (nz8e96@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (nz8e96@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((nz8ec3@prefix (lambda (nz8ec5@ext nz8ec6@ls) (append (map (lambda (nz8ec9@x) (string-append nz8ec5@ext nz8ec9@x)) nz8ec6@ls) nz8ec6@ls)))) (nz6b8b@nz69b8@library-extensions (nz8ec3@prefix '".mosh" (nz6b8b@nz69b8@library-extensions)))) (current-exception-handler (lambda (nz8ecb@c) (begin (if (condition? nz8ecb@c) (nz8e9c@condition-printer nz8ecb@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" nz8ecb@c)) nz8ecb@c))) (if ((call/cc (lambda (nz8ecf@nz8ecd) (lambda () (with-exception-handler (lambda (nz8ed1@c) ((call/cc (lambda (nz8ed3@nz8ece) (nz8ecf@nz8ecd (lambda () (if '#t '#f (nz8ed3@nz8ece (lambda () (raise-continuable nz8ed1@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (nz8ebc@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (nz8ea6@command-line)) (let ((nz8edd@nz8ed6 nz8ea6@command-line) (nz8ede@nz8ed8 nz68c1@nz67a0@mosh-cache-dir) (nz8edf@nz8eda '()) (nz8ee0@nz8edc (create-mosh-cache-dir))) (let ((nz8ee5@swap (lambda () (begin (let ((nz8ee7@t (nz8edd@nz8ed6))) (begin (nz8edd@nz8ed6 nz8edf@nz8eda) (set! nz8edf@nz8eda nz8ee7@t))) (let ((nz8ee9@t (nz8ede@nz8ed8))) (begin (nz8ede@nz8ed8 nz8ee0@nz8edc) (set! nz8ee0@nz8edc nz8ee9@t))))))) (dynamic-wind nz8ee5@swap (lambda () (begin (if (nz68c1@nz67a0@mosh-cache-dir) (gensym-prefix-set! (nz8ec0@prefix-inc! (string-append (nz68c1@nz67a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (nz8ea2@repl))) nz8ee5@swap))) (begin (nz6b8a@nz69b6@library-path (nz8ea8@local-library-path (car (nz8ea6@command-line)))) (set! nz8e94@x* (with-input-from-file (car (nz8ea6@command-line)) (lambda () (let nz8eeb@f () (let ((nz8eed@x (nz68b2@nz6782@read-annotated))) (if (eof-object? nz8eed@x) '() (cons nz8eed@x (nz8eeb@f)))))))) (nz8ea6@command-line (cons (car (nz8ea6@command-line)) (cdr (nz8ea6@command-line)))) (nz68c1@nz67a0@mosh-cache-dir (create-mosh-cache-dir)) (if (nz68c1@nz67a0@mosh-cache-dir) (gensym-prefix-set! (nz8ec0@prefix-inc! (string-append (nz68c1@nz67a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (nz8eef@file) ((call/cc (lambda (nz8ef3@nz8ef1) (lambda () (with-exception-handler (lambda (nz8ef5@c) ((call/cc (lambda (nz8ef7@nz8ef2) (nz8ef3@nz8ef1 (lambda () (if '#t '#t (nz8ef7@nz8ef2 (lambda () (raise-continuable nz8ef5@c)))))))))) (lambda () (delete-file (string-append (nz68c1@nz67a0@mosh-cache-dir) '"/" nz8eef@file))))))))) (directory-list (nz68c1@nz67a0@mosh-cache-dir))) (void)) (let ((nz8ef9@compiled (nz8acd@nz7078@compile-r6rs-top-level nz8e94@x*))) (begin (if (and (nz68c1@nz67a0@mosh-cache-dir) (not (symbol-value '%disable-acc))) (nz6b8e@nz69be@serialize-all nz68bb@nz6794@serialize-library nz6917@nz68d0@compile-core-expr) (void)) (nz8ef9@compiled))))))))
