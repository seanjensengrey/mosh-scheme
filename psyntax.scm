;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! c28c4@library-file-path->cache-path (unspecified)) (set! c28c6@read-annotated (unspecified)) (set! c28c8@annotation-stripped (unspecified)) (set! c28ca@annotation? (unspecified)) (set! c28cc@annotation-source (unspecified)) (set! c28ce@annotation-expression (unspecified)) (set! c28d0@scm->fasl (unspecified)) (set! c28d2@fasl-save (unspecified)) (set! c28d4@fasl-load (unspecified)) (set! c28d6@verbose? (unspecified)) (set! c28d8@serialize-library (unspecified)) (set! c28da@load-serialized-library (unspecified)) (set! c28dc@make-record-printer (unspecified)) (set! c28de@compile-core (unspecified)) (set! c28e0@read-library-source-file (unspecified)) (set! c28e2@make-parameter (unspecified)) (set! c28e4@mosh-cache-dir (unspecified)) (set! c297a@file-options-spec (unspecified)) (set! c28c4@library-file-path->cache-path (lambda (c297b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (c2981@c297e c2982@c2980) (let ((c2985@extract c2982@c2980) (c2986@p c2981@c297e)) (letrec* ((c298a@display-hex (lambda (c2993@n) (if (<= '0 c2993@n '9) (display c2993@n c2986@p) (display (integer->char (+ (char->integer '#\a) (- c2993@n '10))) c2986@p))))) (begin (let c298d@f ((c298b@ls (string-split c297b@x '#\/))) (if (not (null? c298b@ls)) (begin (display '"_" c2986@p) (for-each (lambda (c298f@c) (if (or (char<=? '#\a c298f@c '#\z) (char<=? '#\A c298f@c '#\Z) (char<=? '#\0 c298f@c '#\9) (memv c298f@c '(#\- #\. #\_ #\~))) (display c298f@c c2986@p) (begin (display '"%" c2986@p) (let ((c2991@n (char->integer c298f@c))) (begin (c298a@display-hex (quotient c2991@n '16)) (c298a@display-hex (remainder c2991@n '16))))))) (string->list (car c298b@ls))) (c298d@f (cdr c298b@ls))) (void))) (c2985@extract)))))))) (set! c29f5@c28c4@library-file-path->cache-path c28c4@library-file-path->cache-path) (set! c28c6@read-annotated read) (set! c29f6@c28c6@read-annotated c28c6@read-annotated) (set! c28c8@annotation-stripped (lambda (c2995@x) (c28ce@annotation-expression c2995@x))) (set! c29f7@c28c8@annotation-stripped c28c8@annotation-stripped) (set! c28ca@annotation? (lambda (c2997@x) (source-info c2997@x))) (set! c29f8@c28ca@annotation? c28ca@annotation?) (set! c28cc@annotation-source (lambda (c2999@x) (source-info c2999@x))) (set! c29f9@c28cc@annotation-source c28cc@annotation-source) (set! c28ce@annotation-expression (lambda (c299b@x) (if (pair? c299b@x) (cons (car c299b@x) (cdr c299b@x)) (if (procedure? c299b@x) (set-source-info! c299b@x '#f) c299b@x)))) (set! c29fa@c28ce@annotation-expression c28ce@annotation-expression) (set! c28d0@scm->fasl (lambda (c299d@filename) (string-append (c28e4@mosh-cache-dir) '"/" (c28c4@library-file-path->cache-path c299d@filename) '".mosh-fasl"))) (set! c29fb@c28d0@scm->fasl c28d0@scm->fasl) (set! c28d2@fasl-save (lambda (c299f@filename c29a0@obj) (call-with-port (open-file-output-port c299f@filename) (lambda (c29a3@port) ((symbol-value 'fasl-write!) c29a0@obj c29a3@port))))) (set! c29fc@c28d2@fasl-save c28d2@fasl-save) (set! c28d4@fasl-load (lambda (c29a5@filename) (call-with-port (open-file-input-port c29a5@filename) (symbol-value 'fasl-read!)))) (set! c29fd@c28d4@fasl-load c28d4@fasl-load) (set! c28d6@verbose? (symbol-value '%verbose)) (set! c29fe@c28d6@verbose? c28d6@verbose?) (set! c28d8@serialize-library (lambda (c29a7@filename c29a8@obj) (begin (if c28d6@verbose? (format (current-error-port) '"serialize-library ~a\n..." c29a7@filename) (void)) (let ((c29ab@expanded2core (symbol-value 'expanded2core))) (let ((c29ad@compile (symbol-value 'compile-w/o-halt))) (let ((c29af@code c29a8@obj)) (let ((c29b1@pivot (cddddr (cddddr c29af@code)))) (let ((c29b3@visit (c29ad@compile (c29ab@expanded2core (car c29b1@pivot))))) (begin (set-car! c29b1@pivot c29b3@visit) (let ((c29b5@pivot (cdr c29b1@pivot))) (let ((c29b7@invoke (c29ad@compile (c29ab@expanded2core (car c29b5@pivot))))) (set-car! c29b5@pivot c29b7@invoke))))))))) (let ((c29b9@fasl-file (c28d0@scm->fasl c29a7@filename))) (begin (if (file-exists? c29b9@fasl-file) (delete-file c29b9@fasl-file) (void)) ((call/cc (lambda (c29bd@c29bb) (lambda () (with-exception-handler (lambda (c29bf@c) ((call/cc (lambda (c29c1@c29bc) (c29bd@c29bb (lambda () (if '#t (begin (if c28d6@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" c29a7@filename) (void)) (if (file-exists? c29b9@fasl-file) (delete-file c29b9@fasl-file) (void)) '#f) (c29c1@c29bc (lambda () (raise-continuable c29bf@c)))))))))) (lambda () (c28d2@fasl-save c29b9@fasl-file c29a8@obj)))))))))))) (set! c29ff@c28d8@serialize-library c28d8@serialize-library) (set! c28da@load-serialized-library (lambda (c29c3@filename c29c4@obj) (and (c28e4@mosh-cache-dir) (let ((c29c7@fasl-file (c28d0@scm->fasl c29c3@filename))) (if (and (file-exists? c29c7@fasl-file) ((symbol-value 'file-newer?) c29c7@fasl-file c29c3@filename)) (let ((c29c9@expanded2core (symbol-value 'expanded2core))) (let ((c29cb@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((c29cd@code (c28d4@fasl-load c29c7@fasl-file))) (let ((c29cf@pivot (cddddr (cddddr c29cd@code)))) (let ((c29d1@visit (car c29cf@pivot))) (let ((c29d3@visit-proc (lambda () (c29cb@eval-compiled-core c29d1@visit)))) (begin (set-car! c29cf@pivot c29d3@visit-proc) (let ((c29d5@pivot (cdr c29cf@pivot))) (let ((c29d7@invoke (car c29d5@pivot))) (begin (set-car! c29d5@pivot (lambda () (c29cb@eval-compiled-core c29d7@invoke))) (apply c29c4@obj c29cd@code))))))))))) '#f))))) (set! c2a00@c28da@load-serialized-library c28da@load-serialized-library) (set! c28dc@make-record-printer (lambda (c29d9@name c29da@printer) (lambda c29dd@x (begin (display '"record printer") (for-each display c29dd@x))))) (set! c2a01@c28dc@make-record-printer c28dc@make-record-printer) (set! c28de@compile-core (lambda c29df@x (apply error 'comile-core '"not implementated" c29df@x))) (set! c2a02@c28de@compile-core c28de@compile-core) (set! c28e0@read-library-source-file (lambda (c29e1@file-name) (with-input-from-file c29e1@file-name c28c6@read-annotated))) (set! c2a03@c28e0@read-library-source-file c28e0@read-library-source-file) (set! c28e2@make-parameter (lambda c29f1 (let ((c29f2 (length c29f1))) (if (= c29f2 '1) (apply (lambda (c29e3@x) (c28e2@make-parameter c29e3@x (lambda (c29e5@x) c29e5@x))) c29f1) (if (= c29f2 '2) (apply (lambda (c29e7@x c29e8@fender) (let ((c29eb@x (c29e8@fender c29e7@x))) (lambda c29ef (let ((c29f0 (length c29ef))) (if (= c29f0 '0) (apply (lambda () c29eb@x) c29ef) (if (= c29f0 '1) (apply (lambda (c29ed@v) (set! c29eb@x (c29e8@fender c29ed@v))) c29ef) (error #1='apply '"invalid arg count"))))))) c29f1) (error #1# '"invalid arg count")))))) (set! c2a04@c28e2@make-parameter c28e2@make-parameter) (set! c28e4@mosh-cache-dir (c28e2@make-parameter '#f)) (set! c2a05@c28e4@mosh-cache-dir c28e4@mosh-cache-dir) (set! c297a@file-options-spec (lambda (c29f3@x) c29f3@x)) (set! c2a06@c297a@file-options-spec c297a@file-options-spec) (void))
(begin (set! c2a0c@current-primitive-locations (unspecified)) (set! c2a0e@mutable? (unspecified)) (set! c2a10@rewriter (unspecified)) (set! c2a12@expanded->core (unspecified)) (set! c2a14@compile-core-expr (unspecified)) (set! c2a16@pretty-print (unspecified)) (set! c2a18@compile-core-expr-to-port (unspecified)) (set! c2a0c@current-primitive-locations (c2a04@c28e2@make-parameter (lambda (c2a19@x) '#f) (lambda (c2a1b@p) c2a1b@p))) (set! c2a57@c2a0c@current-primitive-locations c2a0c@current-primitive-locations) (set! c2a0e@mutable? (lambda (c2a1d@x) (or (pair? c2a1d@x) (vector? c2a1d@x) (hashtable? c2a1d@x)))) (set! c2a58@c2a0e@mutable? c2a0e@mutable?) (set! c2a10@rewriter (lambda (c2a1f@quote-hack?) (letrec* ((c2a22@f (lambda (c2a23@x) (if (pair? c2a23@x) (let ((c2a25@t (car c2a23@x))) (if (memv c2a25@t '(quote)) (if (and c2a1f@quote-hack? (c2a0e@mutable? (cadr c2a23@x))) (let ((c2a27@g (gensym))) (begin (set-symbol-value! c2a27@g (cadr c2a23@x)) c2a27@g)) c2a23@x) (if (memv c2a25@t '(case-lambda)) (cons 'case-lambda (map (lambda (c2a29@x) (cons (car c2a29@x) (map c2a22@f (cdr c2a29@x)))) (cdr c2a23@x))) (if (memv c2a25@t '(lambda)) (cons* 'lambda (cadr c2a23@x) (map c2a22@f (cddr c2a23@x))) (if (memv c2a25@t '(letrec)) (let ((c2a2b@bindings (cadr c2a23@x)) (c2a2c@body* (cddr c2a23@x))) (let ((c2a2f@lhs* (map car c2a2b@bindings)) (c2a30@rhs* (map cadr c2a2b@bindings))) (cons* 'letrec (map list c2a2f@lhs* (map c2a22@f c2a30@rhs*)) (map c2a22@f c2a2c@body*)))) (if (memv c2a25@t '(letrec*)) (let ((c2a33@bindings (cadr c2a23@x)) (c2a34@body* (cddr c2a23@x))) (let ((c2a37@lhs* (map car c2a33@bindings)) (c2a38@rhs* (map cadr c2a33@bindings))) (cons* 'letrec* (map list c2a37@lhs* (map c2a22@f c2a38@rhs*)) (map c2a22@f c2a34@body*)))) (if (memv c2a25@t '(library-letrec*)) (let ((c2a3b@name (cadr c2a23@x)) (c2a3c@x (cdr c2a23@x))) (let ((c2a3f@bindings (cadr c2a3c@x)) (c2a40@body* (cddr c2a3c@x))) (let ((c2a43@lhs* (map car c2a3f@bindings)) (c2a44@lhs** (map cadr c2a3f@bindings)) (c2a45@rhs* (map caddr c2a3f@bindings))) (cons* 'library-letrec* c2a3b@name (map list c2a43@lhs* c2a44@lhs** (map c2a22@f c2a45@rhs*)) (map c2a22@f c2a40@body*))))) (if (memv c2a25@t '(begin)) (cons 'begin (map c2a22@f (cdr c2a23@x))) (if (memv c2a25@t '(set!)) (list 'set! (cadr c2a23@x) (c2a22@f (caddr c2a23@x))) (if (memv c2a25@t '(primitive)) (let ((c2a49@op (cadr c2a23@x))) (let ((c2a4b@t ((c2a0c@current-primitive-locations) c2a49@op))) (if c2a4b@t ((lambda (c2a4d@loc) c2a4d@loc) c2a4b@t) c2a49@op))) (if (memv c2a25@t '(define)) c2a23@x (if (list? c2a23@x) (map c2a22@f c2a23@x) (error 'rewrite '"invalid form ~s ~s" c2a23@x (list? c2a23@x)))))))))))))) c2a23@x)))) c2a22@f))) (set! c2a59@c2a10@rewriter c2a10@rewriter) (set! c2a12@expanded->core (lambda (c2a4f@x) ((c2a10@rewriter '#f) c2a4f@x))) (set! c2a5a@c2a12@expanded->core c2a12@expanded->core) (set! c2a14@compile-core-expr (lambda (c2a51@x) ((c2a10@rewriter '#f) c2a51@x))) (set! c2a5b@c2a14@compile-core-expr c2a14@compile-core-expr) (set! c2a16@pretty-print write) (set! c2a5c@c2a16@pretty-print c2a16@pretty-print) (set! c2a18@compile-core-expr-to-port (lambda (c2a53@x c2a54@p) (c2a16@pretty-print ((c2a10@rewriter '#f) c2a53@x) c2a54@p))) (set! c2a5d@c2a18@compile-core-expr-to-port c2a18@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! c2aac@make-collection (unspecified)) (set! c2aae@current-library-collection (unspecified)) (set! c2ab0@rp (unspecified)) (set! c2aba@library? (unspecified)) (set! c2abc@library-id (unspecified)) (set! c2abe@set-library-id! (unspecified)) (set! c2ac0@library-name (unspecified)) (set! c2ac2@set-library-name! (unspecified)) (set! c2ac4@library-version (unspecified)) (set! c2ac6@set-library-version! (unspecified)) (set! c2ac8@library-imp* (unspecified)) (set! c2aca@set-library-imp*! (unspecified)) (set! c2acc@library-vis* (unspecified)) (set! c2ace@set-library-vis*! (unspecified)) (set! c2ad0@library-inv* (unspecified)) (set! c2ad2@set-library-inv*! (unspecified)) (set! c2ad4@library-subst (unspecified)) (set! c2ad6@set-library-subst! (unspecified)) (set! c2ad8@library-env (unspecified)) (set! c2ada@set-library-env! (unspecified)) (set! c2adc@library-visit-state (unspecified)) (set! c2ade@set-library-visit-state! (unspecified)) (set! c2ae0@library-invoke-state (unspecified)) (set! c2ae2@set-library-invoke-state! (unspecified)) (set! c2ae4@library-visit-code (unspecified)) (set! c2ae6@set-library-visit-code! (unspecified)) (set! c2ae8@library-invoke-code (unspecified)) (set! c2aea@set-library-invoke-code! (unspecified)) (set! c2aec@library-visible? (unspecified)) (set! c2aee@set-library-visible?! (unspecified)) (set! c2af0@library-source-file-name (unspecified)) (set! c2af2@set-library-source-file-name! (unspecified)) (set! c2af4@dummy (unspecified)) (set! c2af6@find-dependencies (unspecified)) (set! c2af8@find-library-by (unspecified)) (set! c2afa@library-path (unspecified)) (set! c2afc@library-extensions (unspecified)) (set! c2afe@library-name->file-name (unspecified)) (set! c2b00@file-locator (unspecified)) (set! c2b02@serialize-all (unspecified)) (set! c2b04@current-precompiled-library-loader (unspecified)) (set! c2b06@try-load-from-file (unspecified)) (set! c2b08@library-loader (unspecified)) (set! c2b0a@current-library-expander (unspecified)) (set! c2b0c@external-pending-libraries (unspecified)) (set! c2b0e@find-external-library (unspecified)) (set! c2b10@find-library-by-name (unspecified)) (set! c2b12@library-exists? (unspecified)) (set! c2b14@find-library-by-spec/die (unspecified)) (set! c2b16@label->binding-table (unspecified)) (set! c2b18@install-library-record (unspecified)) (set! c2b1a@install-library (unspecified)) (set! c2b1c@imported-label->binding (unspecified)) (set! c2b1e@invoke-library (unspecified)) (set! c2b20@visit-library (unspecified)) (set! c2b22@invoke-library-by-spec (unspecified)) (set! c2b24@installed-libraries (unspecified)) (set! c2b26@library-spec (unspecified)) (set! c2aac@make-collection (lambda () (let ((c2b27@set '())) (letrec* ((c2b2a@set-cons (lambda (c2b2f@x c2b30@ls) (if (memq c2b2f@x c2b30@ls) c2b30@ls (cons c2b2f@x c2b30@ls))))) (lambda c2b2d (let ((c2b2e (length c2b2d))) (if (= c2b2e '0) (apply (lambda () c2b27@set) c2b2d) (if (= c2b2e '1) (apply (lambda (c2b2b@x) (set! c2b27@set (c2b2a@set-cons c2b2b@x c2b27@set))) c2b2d) (error #1='apply '"invalid arg count"))))))))) (set! c2c9b@c2aac@make-collection c2aac@make-collection) (set! c2aae@current-library-collection (c2a04@c28e2@make-parameter (c2aac@make-collection) (lambda (c2b33@x) (begin (if (not (procedure? c2b33@x)) (assertion-violation 'current-library-collection '"not a procedure" c2b33@x) (void)) c2b33@x)))) (set! c2c9c@c2aae@current-library-collection c2aae@current-library-collection) (set! c2ab0@rp (c2a01@c28dc@make-record-printer 'library (lambda (c2b35@x c2b36@p c2b37@wr) (begin (if (not (c2aba@library? c2b35@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (c2ac4@library-version c2b35@x)) (c2ac0@library-name c2b35@x) (append (c2ac0@library-name c2b35@x) (list (c2ac4@library-version c2b35@x))))) c2b36@p))))) (set! c2c9d@c2ab0@rp c2ab0@rp) (set! c2aba@library? (lambda (c2b3b@x) (and (simple-struct? c2b3b@x) (eq? (simple-struct-name c2b3b@x) 'library)))) (set! c2c9e@c2aba@library? c2aba@library?) (set! c2abc@library-id (lambda (c2b3d@x) (simple-struct-ref c2b3d@x '0))) (set! c2c9f@c2abc@library-id c2abc@library-id) (set! c2abe@set-library-id! (lambda (c2b3f@x c2b40@val) (simple-struct-set! c2b3f@x '0 c2b40@val))) (set! c2ca0@c2abe@set-library-id! c2abe@set-library-id!) (set! c2ac0@library-name (lambda (c2b43@x) (simple-struct-ref c2b43@x '1))) (set! c2ca1@c2ac0@library-name c2ac0@library-name) (set! c2ac2@set-library-name! (lambda (c2b45@x c2b46@val) (simple-struct-set! c2b45@x '1 c2b46@val))) (set! c2ca2@c2ac2@set-library-name! c2ac2@set-library-name!) (set! c2ac4@library-version (lambda (c2b49@x) (simple-struct-ref c2b49@x '2))) (set! c2ca3@c2ac4@library-version c2ac4@library-version) (set! c2ac6@set-library-version! (lambda (c2b4b@x c2b4c@val) (simple-struct-set! c2b4b@x '2 c2b4c@val))) (set! c2ca4@c2ac6@set-library-version! c2ac6@set-library-version!) (set! c2ac8@library-imp* (lambda (c2b4f@x) (simple-struct-ref c2b4f@x '3))) (set! c2ca5@c2ac8@library-imp* c2ac8@library-imp*) (set! c2aca@set-library-imp*! (lambda (c2b51@x c2b52@val) (simple-struct-set! c2b51@x '3 c2b52@val))) (set! c2ca6@c2aca@set-library-imp*! c2aca@set-library-imp*!) (set! c2acc@library-vis* (lambda (c2b55@x) (simple-struct-ref c2b55@x '4))) (set! c2ca7@c2acc@library-vis* c2acc@library-vis*) (set! c2ace@set-library-vis*! (lambda (c2b57@x c2b58@val) (simple-struct-set! c2b57@x '4 c2b58@val))) (set! c2ca8@c2ace@set-library-vis*! c2ace@set-library-vis*!) (set! c2ad0@library-inv* (lambda (c2b5b@x) (simple-struct-ref c2b5b@x '5))) (set! c2ca9@c2ad0@library-inv* c2ad0@library-inv*) (set! c2ad2@set-library-inv*! (lambda (c2b5d@x c2b5e@val) (simple-struct-set! c2b5d@x '5 c2b5e@val))) (set! c2caa@c2ad2@set-library-inv*! c2ad2@set-library-inv*!) (set! c2ad4@library-subst (lambda (c2b61@x) (simple-struct-ref c2b61@x '6))) (set! c2cab@c2ad4@library-subst c2ad4@library-subst) (set! c2ad6@set-library-subst! (lambda (c2b63@x c2b64@val) (simple-struct-set! c2b63@x '6 c2b64@val))) (set! c2cac@c2ad6@set-library-subst! c2ad6@set-library-subst!) (set! c2ad8@library-env (lambda (c2b67@x) (simple-struct-ref c2b67@x '7))) (set! c2cad@c2ad8@library-env c2ad8@library-env) (set! c2ada@set-library-env! (lambda (c2b69@x c2b6a@val) (simple-struct-set! c2b69@x '7 c2b6a@val))) (set! c2cae@c2ada@set-library-env! c2ada@set-library-env!) (set! c2adc@library-visit-state (lambda (c2b6d@x) (simple-struct-ref c2b6d@x '8))) (set! c2caf@c2adc@library-visit-state c2adc@library-visit-state) (set! c2ade@set-library-visit-state! (lambda (c2b6f@x c2b70@val) (simple-struct-set! c2b6f@x '8 c2b70@val))) (set! c2cb0@c2ade@set-library-visit-state! c2ade@set-library-visit-state!) (set! c2ae0@library-invoke-state (lambda (c2b73@x) (simple-struct-ref c2b73@x '9))) (set! c2cb1@c2ae0@library-invoke-state c2ae0@library-invoke-state) (set! c2ae2@set-library-invoke-state! (lambda (c2b75@x c2b76@val) (simple-struct-set! c2b75@x '9 c2b76@val))) (set! c2cb2@c2ae2@set-library-invoke-state! c2ae2@set-library-invoke-state!) (set! c2ae4@library-visit-code (lambda (c2b79@x) (simple-struct-ref c2b79@x '10))) (set! c2cb3@c2ae4@library-visit-code c2ae4@library-visit-code) (set! c2ae6@set-library-visit-code! (lambda (c2b7b@x c2b7c@val) (simple-struct-set! c2b7b@x '10 c2b7c@val))) (set! c2cb4@c2ae6@set-library-visit-code! c2ae6@set-library-visit-code!) (set! c2ae8@library-invoke-code (lambda (c2b7f@x) (simple-struct-ref c2b7f@x '11))) (set! c2cb5@c2ae8@library-invoke-code c2ae8@library-invoke-code) (set! c2aea@set-library-invoke-code! (lambda (c2b81@x c2b82@val) (simple-struct-set! c2b81@x '11 c2b82@val))) (set! c2cb6@c2aea@set-library-invoke-code! c2aea@set-library-invoke-code!) (set! c2aec@library-visible? (lambda (c2b85@x) (simple-struct-ref c2b85@x '12))) (set! c2cb7@c2aec@library-visible? c2aec@library-visible?) (set! c2aee@set-library-visible?! (lambda (c2b87@x c2b88@val) (simple-struct-set! c2b87@x '12 c2b88@val))) (set! c2cb8@c2aee@set-library-visible?! c2aee@set-library-visible?!) (set! c2af0@library-source-file-name (lambda (c2b8b@x) (simple-struct-ref c2b8b@x '13))) (set! c2cb9@c2af0@library-source-file-name c2af0@library-source-file-name) (set! c2af2@set-library-source-file-name! (lambda (c2b8d@x c2b8e@val) (simple-struct-set! c2b8d@x '13 c2b8e@val))) (set! c2cba@c2af2@set-library-source-file-name! c2af2@set-library-source-file-name!) (set! c2af4@dummy '3) (set! c2cbb@c2af4@dummy c2af4@dummy) (set! c2af6@find-dependencies (lambda (c2b91@ls) (if (null? c2b91@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! c2cbc@c2af6@find-dependencies c2af6@find-dependencies) (set! c2af8@find-library-by (lambda (c2b93@pred) (let c2b97@f ((c2b95@ls ((c2aae@current-library-collection)))) (if (null? c2b95@ls) '#f (if (c2b93@pred (car c2b95@ls)) (car c2b95@ls) (c2b97@f (cdr c2b95@ls))))))) (set! c2cbd@c2af8@find-library-by c2af8@find-library-by) (set! c2afa@library-path (c2a04@c28e2@make-parameter '(".") (lambda (c2b99@x) (if (and (list? c2b99@x) (for-all string? c2b99@x)) (map (lambda (c2b9b@x) c2b9b@x) c2b99@x) (assertion-violation 'library-path '"not a list of strings" c2b99@x))))) (set! c2cbe@c2afa@library-path c2afa@library-path) (set! c2afc@library-extensions (c2a04@c28e2@make-parameter '(".sls" ".ss" ".scm") (lambda (c2b9d@x) (if (and (list? c2b9d@x) (for-all string? c2b9d@x)) (map (lambda (c2b9f@x) c2b9f@x) c2b9d@x) (assertion-violation 'library-extensions '"not a list of strings" c2b9d@x))))) (set! c2cbf@c2afc@library-extensions c2afc@library-extensions) (set! c2afe@library-name->file-name (lambda (c2ba1@x) (call-with-values (lambda () (open-string-output-port)) (lambda (c2ba7@c2ba4 c2ba8@c2ba6) (let ((c2bab@extract c2ba8@c2ba6) (c2bac@p c2ba7@c2ba4)) (letrec* ((c2bb0@display-hex (lambda (c2bb9@n) (if (<= '0 c2bb9@n '9) (display c2bb9@n c2bac@p) (display (integer->char (+ (char->integer '#\a) (- c2bb9@n '10))) c2bac@p))))) (begin (let c2bb3@f ((c2bb1@ls c2ba1@x)) (if (not (null? c2bb1@ls)) (begin (display '"/" c2bac@p) (for-each (lambda (c2bb5@c) (if (or (char<=? '#\a c2bb5@c '#\z) (char<=? '#\A c2bb5@c '#\Z) (char<=? '#\0 c2bb5@c '#\9) (memv c2bb5@c '(#\- #\. #\_ #\~))) (display c2bb5@c c2bac@p) (begin (display '"%" c2bac@p) (let ((c2bb7@n (char->integer c2bb5@c))) (begin (c2bb0@display-hex (quotient c2bb7@n '16)) (c2bb0@display-hex (remainder c2bb7@n '16))))))) (string->list (symbol->string (car c2bb1@ls)))) (c2bb3@f (cdr c2bb1@ls))) (void))) (c2bab@extract)))))))) (set! c2cc0@c2afe@library-name->file-name c2afe@library-name->file-name) (set! c2b00@file-locator (c2a04@c28e2@make-parameter (lambda (c2bbb@x) (let ((c2bbd@str (c2afe@library-name->file-name c2bbb@x))) (let c2bc5@f ((c2bbf@ls (c2afa@library-path)) (c2bc0@exts (c2afc@library-extensions)) (c2bc1@failed-list '())) (if (null? c2bbf@ls) (letrec* ((c2bcf@c2bca (make-record-type-descriptor '&library-resolution &condition-rtd 'c2bcd '#f '#f '#((immutable library) (immutable files)))) (c2bd1@c2bcc '#f) (c2bd3@c2bcb (make-record-constructor-descriptor c2bcf@c2bca &condition-rcd c2bd1@c2bcc)) (c2bd6@c2bc9 (record-predicate c2bcf@c2bca)) (c2bd8@make-library-resolution-condition (record-constructor c2bd3@c2bcb)) (c2bda@c2bc7 (record-accessor c2bcf@c2bca '0)) (c2bdc@c2bc8 (record-accessor c2bcf@c2bca '1)) (c2bde@library-resolution-condition? (condition-predicate c2bcf@c2bca)) (c2be0@condition-library (condition-accessor c2bcf@c2bca c2bda@c2bc7)) (c2be2@condition-files (condition-accessor c2bcf@c2bca c2bdc@c2bc8))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (c2bd8@make-library-resolution-condition c2bbb@x (reverse c2bc1@failed-list))))) (if (null? c2bc0@exts) (c2bc5@f (cdr c2bbf@ls) (c2afc@library-extensions) c2bc1@failed-list) (let ((c2be3@name (string-append (car c2bbf@ls) c2bbd@str (car c2bc0@exts)))) (if (file-exists? c2be3@name) c2be3@name (c2bc5@f c2bbf@ls (cdr c2bc0@exts) (cons c2be3@name c2bc1@failed-list))))))))) (lambda (c2be5@f) (if (procedure? c2be5@f) c2be5@f (assertion-violation 'file-locator '"not a procedure" c2be5@f))))) (set! c2cc1@c2b00@file-locator c2b00@file-locator) (set! c2b02@serialize-all (lambda (c2be7@serialize c2be8@compile) (letrec* ((c2bec@library-desc (lambda (c2bef@x) (list (c2abc@library-id c2bef@x) (c2ac0@library-name c2bef@x))))) (for-each (lambda (c2bed@x) (if (c2af0@library-source-file-name c2bed@x) (c2be7@serialize (c2af0@library-source-file-name c2bed@x) (list (c2abc@library-id c2bed@x) (c2ac0@library-name c2bed@x) (c2ac4@library-version c2bed@x) (map c2bec@library-desc (c2ac8@library-imp* c2bed@x)) (map c2bec@library-desc (c2acc@library-vis* c2bed@x)) (map c2bec@library-desc (c2ad0@library-inv* c2bed@x)) (c2ad4@library-subst c2bed@x) (c2ad8@library-env c2bed@x) (c2be8@compile (c2ae4@library-visit-code c2bed@x)) (c2be8@compile (c2ae8@library-invoke-code c2bed@x)) (c2aec@library-visible? c2bed@x))) (void))) ((c2aae@current-library-collection)))))) (set! c2cc2@c2b02@serialize-all c2b02@serialize-all) (set! c2b04@current-precompiled-library-loader (c2a04@c28e2@make-parameter (lambda (c2bf1@filename c2bf2@sk) '#f))) (set! c2cc3@c2b04@current-precompiled-library-loader c2b04@current-precompiled-library-loader) (set! c2b06@try-load-from-file (lambda (c2bf5@filename) ((c2b04@current-precompiled-library-loader) c2bf5@filename (lambda c2c1b (let ((c2c1c (length c2c1b))) (if (= c2c1c '11) (apply (lambda (c2bf7@id c2bf8@name c2bf9@ver c2bfa@imp* c2bfb@vis* c2bfc@inv* c2bfd@exp-subst c2bfe@exp-env c2bff@visit-proc c2c00@invoke-proc c2c01@visible?) (let c2c0f@f ((c2c0d@deps (append c2bfa@imp* c2bfb@vis* c2bfc@inv*))) (if (null? c2c0d@deps) (begin (c2b1a@install-library c2bf7@id c2bf8@name c2bf9@ver c2bfa@imp* c2bfb@vis* c2bfc@inv* c2bfd@exp-subst c2bfe@exp-env c2bff@visit-proc c2c00@invoke-proc '#f '#f c2c01@visible? '#f) '#t) (let ((c2c11@d (car c2c0d@deps))) (let ((c2c13@label (car c2c11@d)) (c2c14@dname (cadr c2c11@d))) (let ((c2c17@l (c2b10@find-library-by-name c2c14@dname))) (if (and (c2aba@library? c2c17@l) (eq? c2c13@label (c2abc@library-id c2c17@l))) (c2c0f@f (cdr c2c0d@deps)) (begin (if c29fe@c28d6@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" c2bf8@name c2c14@dname c2bf5@filename c2c17@l c2c13@label (c2abc@library-id c2c17@l)) (void)) '#f)))))))) c2c1b) (if (>= c2c1c '0) (apply (lambda c2c19@others '#f) c2c1b) (error #1# '"invalid arg count")))))))) (set! c2cc4@c2b06@try-load-from-file c2b06@try-load-from-file) (set! c2b08@library-loader (c2a04@c28e2@make-parameter (lambda (c2c1d@x) (let ((c2c1f@file-name ((c2b00@file-locator) c2c1d@x))) (if (not c2c1f@file-name) (assertion-violation '#f '"cannot file library" c2c1d@x) (or (c2b06@try-load-from-file c2c1f@file-name) ((c2b0a@current-library-expander) (c2a03@c28e0@read-library-source-file c2c1f@file-name) c2c1f@file-name (lambda (c2c21@name) (if (not (fast-equal? c2c21@name c2c1d@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (c2c27@c2c24 c2c28@c2c26) (let ((c2c2b@e c2c28@c2c26) (c2c2c@p c2c27@c2c24)) (begin (display '"expected to find library " c2c2c@p) (write c2c1d@x c2c2c@p) (display '" in file " c2c2c@p) (display c2c1f@file-name c2c2c@p) (display '", found " c2c2c@p) (write c2c21@name c2c2c@p) (display '" instead" c2c2c@p) (c2c2b@e)))))) (void)))))))) (lambda (c2c2f@f) (if (procedure? c2c2f@f) c2c2f@f (assertion-violation 'library-locator '"not a procedure" c2c2f@f))))) (set! c2cc5@c2b08@library-loader c2b08@library-loader) (set! c2b0a@current-library-expander (c2a04@c28e2@make-parameter (lambda (c2c31@x) (assertion-violation 'library-expander '"not initialized")) (lambda (c2c33@f) (if (procedure? c2c33@f) c2c33@f (assertion-violation 'library-expander '"not a procedure" c2c33@f))))) (set! c2cc6@c2b0a@current-library-expander c2b0a@current-library-expander) (set! c2b0c@external-pending-libraries (c2a04@c28e2@make-parameter '())) (set! c2cc7@c2b0c@external-pending-libraries c2b0c@external-pending-libraries) (set! c2b0e@find-external-library (lambda (c2c35@name) (begin (if (member c2c35@name (c2b0c@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" c2c35@name) (void)) (let ((c2c3b@c2c38 c2b0c@external-pending-libraries) (c2c3c@c2c3a (cons c2c35@name (c2b0c@external-pending-libraries)))) (let ((c2c3f@swap (lambda () (let ((c2c41@t (c2c3b@c2c38))) (begin (c2c3b@c2c38 c2c3c@c2c3a) (set! c2c3c@c2c3a c2c41@t)))))) (dynamic-wind c2c3f@swap (lambda () (begin ((c2b08@library-loader) c2c35@name) (or (c2af8@find-library-by (lambda (c2c43@x) (fast-equal? (c2ac0@library-name c2c43@x) c2c35@name))) (assertion-violation '#f '"handling external library did not yield the correct library" c2c35@name)))) c2c3f@swap)))))) (set! c2cc8@c2b0e@find-external-library c2b0e@find-external-library) (set! c2b10@find-library-by-name (lambda (c2c45@name) (or (c2af8@find-library-by (lambda (c2c47@x) (fast-equal? (c2ac0@library-name c2c47@x) c2c45@name))) (c2b0e@find-external-library c2c45@name)))) (set! c2cc9@c2b10@find-library-by-name c2b10@find-library-by-name) (set! c2b12@library-exists? (lambda (c2c49@name) (and (c2af8@find-library-by (lambda (c2c4b@x) (fast-equal? (c2ac0@library-name c2c4b@x) c2c49@name))) '#t))) (set! c2cca@c2b12@library-exists? c2b12@library-exists?) (set! c2b14@find-library-by-spec/die (lambda (c2c4d@spec) (let ((c2c4f@id (car c2c4d@spec))) (or (c2af8@find-library-by (lambda (c2c51@x) (eq? c2c4f@id (c2abc@library-id c2c51@x)))) (assertion-violation '#f '"cannot find library with required spec" c2c4d@spec))))) (set! c2ccb@c2b14@find-library-by-spec/die c2b14@find-library-by-spec/die) (set! c2b16@label->binding-table (make-eq-hashtable)) (set! c2ccc@c2b16@label->binding-table c2b16@label->binding-table) (set! c2b18@install-library-record (lambda (c2c53@lib) (begin (let ((c2c55@exp-env (c2ad8@library-env c2c53@lib))) (for-each (lambda (c2c57@x) (let ((c2c59@label (car c2c57@x)) (c2c5a@binding (cdr c2c57@x))) (let ((c2c5d@binding (let ((c2c5f@t (car c2c5a@binding))) (if (memv c2c5f@t '(global)) (cons 'global (cons c2c53@lib (cdr c2c5a@binding))) (if (memv c2c5f@t '(global-macro)) (cons 'global-macro (cons c2c53@lib (cdr c2c5a@binding))) (if (memv c2c5f@t '(global-macro!)) (cons 'global-macro! (cons c2c53@lib (cdr c2c5a@binding))) c2c5a@binding)))))) (begin (if (hashtable-ref c2b16@label->binding-table c2c59@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" c2c59@label (hashtable-ref c2b16@label->binding-table c2c59@label '#f) c2c5d@binding) (exit)) (void)) (hashtable-set! c2b16@label->binding-table c2c59@label c2c5d@binding))))) c2c55@exp-env)) ((c2aae@current-library-collection) c2c53@lib)))) (set! c2ccd@c2b18@install-library-record c2b18@install-library-record) (set! c2b1a@install-library (lambda (c2c61@id c2c62@name c2c63@ver c2c64@imp* c2c65@vis* c2c66@inv* c2c67@exp-subst c2c68@exp-env c2c69@visit-proc c2c6a@invoke-proc c2c6b@visit-code c2c6c@invoke-code c2c6d@visible? c2c6e@source-file-name) (let ((c2c7d@imp-lib* (map c2b14@find-library-by-spec/die c2c64@imp*)) (c2c7e@vis-lib* (map c2b14@find-library-by-spec/die c2c65@vis*)) (c2c7f@inv-lib* (map c2b14@find-library-by-spec/die c2c66@inv*))) (begin (if (not (and (symbol? c2c61@id) (list? c2c62@name) (list? c2c63@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" c2c61@id c2c62@name c2c63@ver) (void)) (if (c2b12@library-exists? c2c62@name) (assertion-violation 'install-library '"library is already installed" c2c62@name) (void)) (let ((c2c83@lib (make-simple-struct 'library '15 (list c2c61@id c2c62@name c2c63@ver c2c7d@imp-lib* c2c7e@vis-lib* c2c7f@inv-lib* c2c67@exp-subst c2c68@exp-env c2c69@visit-proc c2c6a@invoke-proc c2c6b@visit-code c2c6c@invoke-code c2c6d@visible? c2c6e@source-file-name)))) (c2b18@install-library-record c2c83@lib)))))) (set! c2cce@c2b1a@install-library c2b1a@install-library) (set! c2b1c@imported-label->binding (lambda (c2c85@lab) (hashtable-ref c2b16@label->binding-table c2c85@lab '#f))) (set! c2ccf@c2b1c@imported-label->binding c2b1c@imported-label->binding) (set! c2b1e@invoke-library (lambda (c2c87@lib) (let ((c2c89@invoke (c2ae0@library-invoke-state c2c87@lib))) (if (procedure? c2c89@invoke) (begin (c2ae2@set-library-invoke-state! c2c87@lib (lambda () (assertion-violation 'invoke '"circularity detected" c2c87@lib))) (for-each c2b1e@invoke-library (c2ad0@library-inv* c2c87@lib)) (c2ae2@set-library-invoke-state! c2c87@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" c2c87@lib))) (c2c89@invoke) (c2ae2@set-library-invoke-state! c2c87@lib '#t)) (void))))) (set! c2cd0@c2b1e@invoke-library c2b1e@invoke-library) (set! c2b20@visit-library (lambda (c2c8b@lib) (let ((c2c8d@visit (c2adc@library-visit-state c2c8b@lib))) (if (procedure? c2c8d@visit) (begin (c2ade@set-library-visit-state! c2c8b@lib (lambda () (assertion-violation 'visit '"circularity detected" c2c8b@lib))) (for-each c2b1e@invoke-library (c2acc@library-vis* c2c8b@lib)) (c2ade@set-library-visit-state! c2c8b@lib (lambda () (assertion-violation 'invoke '"first visit did not return" c2c8b@lib))) (c2c8d@visit) (c2ade@set-library-visit-state! c2c8b@lib '#t)) (void))))) (set! c2cd1@c2b20@visit-library c2b20@visit-library) (set! c2b22@invoke-library-by-spec (lambda (c2c8f@spec) (c2b1e@invoke-library (c2b14@find-library-by-spec/die c2c8f@spec)))) (set! c2cd2@c2b22@invoke-library-by-spec c2b22@invoke-library-by-spec) (set! c2b24@installed-libraries (lambda c2c97 (let ((c2c98 (length c2c97))) (if (= c2c98 '1) (apply (lambda (c2c91@all?) (let c2c95@f ((c2c93@ls ((c2aae@current-library-collection)))) (if (null? c2c93@ls) '() (if (or c2c91@all? (c2aec@library-visible? (car c2c93@ls))) (cons (car c2c93@ls) (c2c95@f (cdr c2c93@ls))) (c2c95@f (cdr c2c93@ls)))))) c2c97) (if (= c2c98 '0) (apply (lambda () (c2b24@installed-libraries '#f)) c2c97) (error #1# '"invalid arg count")))))) (set! c2cd3@c2b24@installed-libraries c2b24@installed-libraries) (set! c2b26@library-spec (lambda (c2c99@x) (begin (if (not (c2aba@library? c2c99@x)) (assertion-violation 'library-spec '"not a library" c2c99@x) (void)) (list (c2abc@library-id c2c99@x) (c2ac0@library-name c2c99@x) (c2ac4@library-version c2c99@x))))) (set! c2cd4@c2b26@library-spec c2b26@library-spec) (void))
(begin (set! c2cd8@build-global-define (unspecified)) (set! c2d49@build-lambda (unspecified)) (set! c2d4b@build-case-lambda (unspecified)) (set! c2d79@build-sequence (unspecified)) (set! c2d7b@build-void (unspecified)) (set! c2d7d@build-letrec (unspecified)) (set! c2d7f@build-let (unspecified)) (set! c2d81@build-named-let (unspecified)) (set! c2d83@build-letrec* (unspecified)) (set! c2d85@build-library-letrec* (unspecified)) (set! c2d87@build-receive (unspecified)) (set! c2cd8@build-global-define (lambda (c2d88@x) (c2d7b@build-void))) (set! c2e16@c2cd8@build-global-define c2cd8@build-global-define) (set! c2d49@build-lambda (lambda (c2d8a@ae c2d8b@vars c2d8c@exp) (list 'lambda c2d8b@vars c2d8c@exp))) (set! c2e17@c2d49@build-lambda c2d49@build-lambda) (set! c2d4b@build-case-lambda (lambda (c2d90@ae c2d91@vars* c2d92@exp*) (letrec* ((c2d97@build-error (lambda (c2dce@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (c2d99@build-pred (lambda (c2db6@ae c2db7@n c2db8@vars) (call-with-values (lambda () (let c2dc4@f ((c2dc0@vars c2db8@vars) (c2dc1@count '0)) (if (pair? c2dc0@vars) (c2dc4@f (cdr c2dc0@vars) (+ c2dc1@count '1)) (if (null? c2dc0@vars) (values c2dc1@count '=) (values c2dc1@count '>=))))) (lambda (c2dc6@c2dbd c2dc7@c2dbf) (let ((c2dca@pred c2dc7@c2dbf) (c2dcb@count c2dc6@c2dbd)) (list (list 'primitive c2dca@pred) c2db7@n (list 'quote c2dcb@count))))))) (c2d9b@build-apply (lambda (c2dae@ae c2daf@g c2db0@vars c2db1@exp) (list '(primitive apply) (c2d49@build-lambda c2dae@ae c2db0@vars c2db1@exp) c2daf@g))) (c2d9d@expand-case-lambda (lambda (c2d9e@ae c2d9f@vars c2da0@exp*) (let ((c2da4@g (gensym)) (c2da5@n (gensym))) (list 'lambda c2da4@g (c2d7f@build-let c2d9e@ae (list c2da5@n) (list (list '(primitive length) c2da4@g)) (let c2dac@f ((c2da8@vars* c2d91@vars*) (c2da9@exp* c2da0@exp*)) (if (null? c2da8@vars*) (c2d97@build-error c2d9e@ae) (list 'if (c2d99@build-pred c2d9e@ae c2da5@n (car c2da8@vars*)) (c2d9b@build-apply c2d9e@ae c2da4@g (car c2da8@vars*) (car c2da9@exp*)) (c2dac@f (cdr c2da8@vars*) (cdr c2da9@exp*))))))))))) (if (= (length c2d92@exp*) '1) (c2d49@build-lambda c2d90@ae (car c2d91@vars*) (car c2d92@exp*)) (c2d9d@expand-case-lambda c2d90@ae c2d91@vars* c2d92@exp*))))) (set! c2e18@c2d4b@build-case-lambda c2d4b@build-case-lambda) (set! c2d79@build-sequence (lambda (c2dd0@ae c2dd1@exps) (let c2dd6@loop ((c2dd4@exps c2dd1@exps)) (if (null? (cdr c2dd4@exps)) (car c2dd4@exps) (if (equal? (car c2dd4@exps) (c2d7b@build-void)) (c2dd6@loop (cdr c2dd4@exps)) (cons 'begin c2dd4@exps)))))) (set! c2e19@c2d79@build-sequence c2d79@build-sequence) (set! c2d7b@build-void (lambda () '((primitive void)))) (set! c2e1a@c2d7b@build-void c2d7b@build-void) (set! c2d7d@build-letrec (lambda (c2dd8@ae c2dd9@vars c2dda@val-exps c2ddb@body-exp) (if (null? c2dd9@vars) c2ddb@body-exp (list 'letrec (map list c2dd9@vars c2dda@val-exps) c2ddb@body-exp)))) (set! c2e1b@c2d7d@build-letrec c2d7d@build-letrec) (set! c2d7f@build-let (lambda (c2de0@ae c2de1@vars c2de2@val-exps c2de3@body-exp) (if (null? c2de1@vars) c2de3@body-exp (list 'let (map list c2de1@vars c2de2@val-exps) c2de3@body-exp)))) (set! c2e1c@c2d7f@build-let c2d7f@build-let) (set! c2d81@build-named-let (lambda (c2de8@ae c2de9@name c2dea@vars c2deb@val-exps c2dec@body-exp) (list 'let c2de9@name (map list c2dea@vars c2deb@val-exps) c2dec@body-exp))) (set! c2e1d@c2d81@build-named-let c2d81@build-named-let) (set! c2d83@build-letrec* (lambda (c2df2@ae c2df3@vars c2df4@val-exps c2df5@body-exp) (if (null? c2df3@vars) c2df5@body-exp (list 'letrec* (map list c2df3@vars c2df4@val-exps) c2df5@body-exp)))) (set! c2e1e@c2d83@build-letrec* c2d83@build-letrec*) (set! c2d85@build-library-letrec* (lambda (c2dfa@ae c2dfb@name c2dfc@vars c2dfd@locs c2dfe@val-exps c2dff@body-exp) (cons 'begin (append (map (lambda (c2e06@var) (cons 'set! (cons c2e06@var '((unspecified))))) c2dfc@vars) (append (apply append (map (lambda (c2e08@var c2e09@loc c2e0a@val-exp) (list (list 'set! c2e08@var c2e0a@val-exp) (list 'set! c2e09@loc c2e08@var))) c2dfc@vars c2dfd@locs c2dfe@val-exps)) (list c2dff@body-exp)))))) (set! c2e1f@c2d85@build-library-letrec* c2d85@build-library-letrec*) (set! c2d87@build-receive (lambda (c2e0e@ae c2e0f@vars c2e10@producer c2e11@body*) (begin (display '"************** in ") (cons 'receive (cons c2e0f@vars (cons c2e10@producer c2e11@body*)))))) (set! c2e20@c2d87@build-receive c2d87@build-receive) (void))
(begin (set! c2e2f@file-options-macro (unspecified)) (set! c2e31@set-cons (unspecified)) (set! c2e33@set-union (unspecified)) (set! c2e38@top-mark* (unspecified)) (set! c2e3a@top-marked? (unspecified)) (set! c2e3c@gen-lexical (unspecified)) (set! c2e3e@gen-global (unspecified)) (set! c2e40@gen-label (unspecified)) (set! c2e42@gen-top-level-label (unspecified)) (set! c2e44@gen-define-label+loc (unspecified)) (set! c2e46@gen-define-label (unspecified)) (set! c2e50@rib? (unspecified)) (set! c2e52@rib-sym* (unspecified)) (set! c2e54@set-rib-sym*! (unspecified)) (set! c2e56@rib-mark** (unspecified)) (set! c2e58@set-rib-mark**! (unspecified)) (set! c2e5a@rib-label* (unspecified)) (set! c2e5c@set-rib-label*! (unspecified)) (set! c2e5e@rib-sealed/freq (unspecified)) (set! c2e60@set-rib-sealed/freq! (unspecified)) (set! c2e62@rib-cache (unspecified)) (set! c2e64@set-rib-cache! (unspecified)) (set! c2e66@dummy (unspecified)) (set! c2e68@make-empty-rib (unspecified)) (set! c2e6a@extend-rib! (unspecified)) (set! c2e6c@extend-rib/nc! (unspecified)) (set! c2e6e@make-rib-map (unspecified)) (set! c2e70@seal-rib! (unspecified)) (set! c2e72@unseal-rib! (unspecified)) (set! c2e74@make-full-rib (unspecified)) (set! c2e76@rp (unspecified)) (set! c2e80@stx? (unspecified)) (set! c2e82@stx-expr (unspecified)) (set! c2e84@set-stx-expr! (unspecified)) (set! c2e86@stx-mark* (unspecified)) (set! c2e88@set-stx-mark*! (unspecified)) (set! c2e8a@stx-subst* (unspecified)) (set! c2e8c@set-stx-subst*! (unspecified)) (set! c2e8e@stx-ae* (unspecified)) (set! c2e90@set-stx-ae*! (unspecified)) (set! c2e92@dummy (unspecified)) (set! c2e94@datum->stx (unspecified)) (set! c2e96@gen-mark (unspecified)) (set! c2e98@anti-mark (unspecified)) (set! c2e9a@anti-mark? (unspecified)) (set! c2e9c@mkstx (unspecified)) (set! c2e9e@add-mark (unspecified)) (set! c2ea0@add-subst (unspecified)) (set! c2ea2@syntax-kind? (unspecified)) (set! c2ea4@syntax-vector->list (unspecified)) (set! c2ea6@syntax-pair? (unspecified)) (set! c2ea8@syntax-vector? (unspecified)) (set! c2eaa@syntax-null? (unspecified)) (set! c2eac@syntax-list? (unspecified)) (set! c2eae@syntax-car (unspecified)) (set! c2eb0@syntax-cdr (unspecified)) (set! c2eb2@syntax->list (unspecified)) (set! c2eb4@id? (unspecified)) (set! c2eb6@id->sym (unspecified)) (set! c2eb8@bound-id=? (unspecified)) (set! c2eba@free-id=? (unspecified)) (set! c2ebc@valid-bound-ids? (unspecified)) (set! c2ebe@distinct-bound-ids? (unspecified)) (set! c2ec0@bound-id-member? (unspecified)) (set! c2ec2@self-evaluating? (unspecified)) (set! c2ec4@strip-annotations (unspecified)) (set! c2ec6@strip (unspecified)) (set! c2ec8@stx->datum (unspecified)) (set! c2eca@id->label (unspecified)) (set! c2ecc@label->binding (unspecified)) (set! c2ece@make-binding (unspecified)) (set! c2ed0@binding-type (unspecified)) (set! c2ed2@binding-value (unspecified)) (set! c2ed4@raise-unbound-error (unspecified)) (set! c2ed6@syntax-type (unspecified)) (set! c2ee4@sanitize-binding (unspecified)) (set! c2ee6@make-variable-transformer (unspecified)) (set! c2ee8@variable-transformer? (unspecified)) (set! c2eea@variable-transformer-procedure (unspecified)) (set! c2eec@make-eval-transformer (unspecified)) (set! c303d@parse-define (unspecified)) (set! c303f@parse-define-syntax (unspecified)) (set! c3041@scheme-stx-hashtable (unspecified)) (set! c3043@scheme-stx (unspecified)) (set! c3045@lexical-var (unspecified)) (set! c3047@lexical-mutable? (unspecified)) (set! c3049@set-lexical-mutable! (unspecified)) (set! c304b@add-lexical (unspecified)) (set! c304d@add-lexicals (unspecified)) (set! c304f@letrec-helper (unspecified)) (set! c3051@let-transformer (unspecified)) (set! c3053@letrec-transformer (unspecified)) (set! c3055@letrec*-transformer (unspecified)) (set! c3057@fluid-let-syntax-transformer (unspecified)) (set! c3059@type-descriptor-transformer (unspecified)) (set! c305b@record-type-descriptor-transformer (unspecified)) (set! c305d@record-constructor-descriptor-transformer (unspecified)) (set! c305f@when-macro (unspecified)) (set! c3061@unless-macro (unspecified)) (set! c3063@if-transformer (unspecified)) (set! c3065@and-transformer (unspecified)) (set! c3067@or-transformer (unspecified)) (set! c3069@case-macro (unspecified)) (set! c306b@quote-transformer (unspecified)) (set! c306d@case-lambda-transformer (unspecified)) (set! c306f@lambda-transformer (unspecified)) (set! c3071@bless (unspecified)) (set! c3073@with-syntax-macro (unspecified)) (set! c3075@invalid-fmls-error (unspecified)) (set! c3077@let-macro (unspecified)) (set! c3079@let-values-macro (unspecified)) (set! c307b@let*-values-macro (unspecified)) (set! c307d@trace-lambda-macro (unspecified)) (set! c307f@trace-define-macro (unspecified)) (set! c3081@trace-define-syntax-macro (unspecified)) (set! c3083@trace-let/rec-syntax (unspecified)) (set! c3085@trace-let-syntax-macro (unspecified)) (set! c3087@trace-letrec-syntax-macro (unspecified)) (set! c3089@guard-macro (unspecified)) (set! c308b@define-enumeration-macro (unspecified)) (set! c308d@time-macro (unspecified)) (set! c308f@delay-macro (unspecified)) (set! c3091@assert-macro (unspecified)) (set! c3093@endianness-macro (unspecified)) (set! c3095@identifier-syntax-macro (unspecified)) (set! c3097@do-macro (unspecified)) (set! c3099@let*-macro (unspecified)) (set! c309b@or-macro (unspecified)) (set! c309d@and-macro (unspecified)) (set! c309f@cond-macro (unspecified)) (set! c30a1@do-include (unspecified)) (set! c30a3@include-macro (unspecified)) (set! c30a5@include-into-macro (unspecified)) (set! c30a7@syntax-rules-macro (unspecified)) (set! c30a9@quasiquote-macro (unspecified)) (set! c30ab@quasisyntax-macro (unspecified)) (set! c30ad@define-struct-macro (unspecified)) (set! c30af@define-record-type-macro (unspecified)) (set! c30b1@define-condition-type-macro (unspecified)) (set! c30b3@incorrect-usage-macro (unspecified)) (set! c30b5@parameterize-macro (unspecified)) (set! c30b7@foreign-call-transformer (unspecified)) (set! c30b9@convert-pattern (unspecified)) (set! c30bb@syntax-dispatch (unspecified)) (set! c30bd@ellipsis? (unspecified)) (set! c30bf@underscore? (unspecified)) (set! c30c1@verify-literals (unspecified)) (set! c30c3@syntax-case-transformer (unspecified)) (set! c30c5@ellipsis-map (unspecified)) (set! c30c7@syntax-transformer (unspecified)) (set! c30c9@core-macro-transformer (unspecified)) (set! c30cb@symbol-macro (unspecified)) (set! c30cd@macro-transformer (unspecified)) (set! c30cf@local-macro-transformer (unspecified)) (set! c30d1@do-macro-call (unspecified)) (set! c30d3@chi-macro (unspecified)) (set! c30d5@chi-local-macro (unspecified)) (set! c30d7@chi-global-macro (unspecified)) (set! c30d9@chi-expr* (unspecified)) (set! c30db@chi-application (unspecified)) (set! c30dd@chi-expr (unspecified)) (set! c30df@chi-set! (unspecified)) (set! c30e1@verify-formals (unspecified)) (set! c30e3@chi-lambda-clause (unspecified)) (set! c30e5@chi-lambda-clause* (unspecified)) (set! c30e7@chi-defun (unspecified)) (set! c30e9@chi-rhs (unspecified)) (set! c30eb@expand-interaction-rhs*/init* (unspecified)) (set! c30ed@chi-rhs* (unspecified)) (set! c30ef@find-bound=? (unspecified)) (set! c30f1@find-dups (unspecified)) (set! c30f3@chi-internal (unspecified)) (set! c30f5@parse-module (unspecified)) (set! c30ff@module-interface? (unspecified)) (set! c3101@module-interface-first-mark (unspecified)) (set! c3103@set-module-interface-first-mark! (unspecified)) (set! c3105@module-interface-exp-id-vec (unspecified)) (set! c3107@set-module-interface-exp-id-vec! (unspecified)) (set! c3109@module-interface-exp-lab-vec (unspecified)) (set! c310b@set-module-interface-exp-lab-vec! (unspecified)) (set! c310d@dummy (unspecified)) (set! c310f@module-interface-exp-id* (unspecified)) (set! c3111@chi-internal-module (unspecified)) (set! c3113@chi-body* (unspecified)) (set! c3115@expand-transformer (unspecified)) (set! c3117@parse-exports (unspecified)) (set! c3119@parse-library-name (unspecified)) (set! c311b@parse-library (unspecified)) (set! c311d@parse-import-spec* (unspecified)) (set! c311f@make-top-rib (unspecified)) (set! c3121@make-collector (unspecified)) (set! c3123@inv-collector (unspecified)) (set! c3125@vis-collector (unspecified)) (set! c3127@imp-collector (unspecified)) (set! c3129@chi-library-internal (unspecified)) (set! c312b@chi-interaction-expr (unspecified)) (set! c312d@library-body-expander (unspecified)) (set! c312f@core-library-expander (unspecified)) (set! c3131@parse-top-level-program (unspecified)) (set! c3133@top-level-expander (unspecified)) (set! c3135@rp (unspecified)) (set! c313f@env? (unspecified)) (set! c3141@env-names (unspecified)) (set! c3143@set-env-names! (unspecified)) (set! c3145@env-labels (unspecified)) (set! c3147@set-env-labels! (unspecified)) (set! c3149@env-itc (unspecified)) (set! c314b@set-env-itc! (unspecified)) (set! c314d@dummy (unspecified)) (set! c314f@rp (unspecified)) (set! c3159@interaction-env? (unspecified)) (set! c315b@interaction-env-rib (unspecified)) (set! c315d@set-interaction-env-rib! (unspecified)) (set! c315f@interaction-env-r (unspecified)) (set! c3161@set-interaction-env-r! (unspecified)) (set! c3163@interaction-env-locs (unspecified)) (set! c3165@set-interaction-env-locs! (unspecified)) (set! c3167@dummy (unspecified)) (set! c3169@interaction-environment-symbols (unspecified)) (set! c316b@environment-bindings (unspecified)) (set! c316d@parse-binding (unspecified)) (set! c316f@environment? (unspecified)) (set! c3171@environment-symbols (unspecified)) (set! c3173@environment (unspecified)) (set! c3175@null-environment (unspecified)) (set! c3177@scheme-report-environment (unspecified)) (set! c3179@expand (unspecified)) (set! c317b@eval (unspecified)) (set! c317d@library-expander (unspecified)) (set! c317f@boot-library-expand (unspecified)) (set! c3181@rev-map-append (unspecified)) (set! c3183@build-exports (unspecified)) (set! c3185@make-export-subst (unspecified)) (set! c3187@make-export-env/macros (unspecified)) (set! c3189@generate-temporaries (unspecified)) (set! c318b@free-identifier=? (unspecified)) (set! c318d@bound-identifier=? (unspecified)) (set! c318f@make-source-condition (unspecified)) (set! c3191@extract-position-condition (unspecified)) (set! c3193@expression-position (unspecified)) (set! c3195@assertion-error (unspecified)) (set! c3197@syntax-error (unspecified)) (set! c3199@syntax-violation* (unspecified)) (set! c319b@syntax-violation (unspecified)) (set! c319d@identifier? (unspecified)) (set! c319f@datum->syntax (unspecified)) (set! c31a1@syntax->datum (unspecified)) (set! c31a3@ungensym-all (unspecified)) (set! c31a5@compile-r6rs-top-level (unspecified)) (set! c31a7@pre-compile-r6rs-top-level (unspecified)) (set! c31a9@interaction-environment (unspecified)) (set! c31ab@top-level-context (unspecified)) (set! c2e2f@file-options-macro (lambda (c31ac@x) (letrec* ((c31af@valid-option? (lambda (c31b8@x) (and (c2eb4@id? c31b8@x) (memq (c2eb6@id->sym c31b8@x) '(no-fail no-create no-truncate)))))) (let ((c31b0@t c31ac@x)) (let ((c31b2@ls/false (c30bb@syntax-dispatch c31b0@t '(_ . each-any)))) (if (and c31b2@ls/false (apply (lambda (c31b4@opt*) (for-all c31af@valid-option? c31b4@opt*)) c31b2@ls/false)) (apply (lambda (c31b6@opt*) (c3071@bless (list 'make-file-options (list 'quote c31b6@opt*)))) c31b2@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c31b0@t))))))) (set! c4b02@c2e2f@file-options-macro c2e2f@file-options-macro) (set! c2e31@set-cons (lambda (c31ba@x c31bb@ls) (if (memq c31ba@x c31bb@ls) c31bb@ls (cons c31ba@x c31bb@ls)))) (set! c4b03@c2e31@set-cons c2e31@set-cons) (set! c2e33@set-union (lambda (c31be@ls1 c31bf@ls2) (if (null? c31be@ls1) c31bf@ls2 (if (memq (car c31be@ls1) c31bf@ls2) (c2e33@set-union (cdr c31be@ls1) c31bf@ls2) (cons (car c31be@ls1) (c2e33@set-union (cdr c31be@ls1) c31bf@ls2)))))) (set! c4b04@c2e33@set-union c2e33@set-union) (set! c2e38@top-mark* '(top)) (set! c4b05@c2e38@top-mark* c2e38@top-mark*) (set! c2e3a@top-marked? (lambda (c31c2@m*) (memq 'top c31c2@m*))) (set! c4b06@c2e3a@top-marked? c2e3a@top-marked?) (set! c2e3c@gen-lexical (lambda (c31c4@sym) (if (symbol? c31c4@sym) (gensym c31c4@sym) (if (c2e80@stx? c31c4@sym) (c2e3c@gen-lexical (c2eb6@id->sym c31c4@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" c31c4@sym))))) (set! c4b07@c2e3c@gen-lexical c2e3c@gen-lexical) (set! c2e3e@gen-global (lambda (c31c6@x) (c2e3c@gen-lexical c31c6@x))) (set! c4b08@c2e3e@gen-global c2e3e@gen-global) (set! c2e40@gen-label (lambda (c31c8@_) (gensym))) (set! c4b09@c2e40@gen-label c2e40@gen-label) (set! c2e42@gen-top-level-label (lambda (c31ca@id c31cb@rib) (letrec* ((c31cf@find (lambda (c31da@sym c31db@mark* c31dc@sym* c31dd@mark** c31de@label*) (and (pair? c31dc@sym*) (if (and (eq? c31da@sym (car c31dc@sym*)) (same-marks? c31db@mark* (car c31dd@mark**))) (car c31de@label*) (c31cf@find c31da@sym c31db@mark* (cdr c31dc@sym*) (cdr c31dd@mark**) (cdr c31de@label*))))))) (let ((c31d0@sym (c2eb6@id->sym c31ca@id)) (c31d1@mark* (c2e86@stx-mark* c31ca@id))) (let ((c31d4@sym* (c2e52@rib-sym* c31cb@rib))) (let ((c31d6@t (and (memq c31d0@sym (c2e52@rib-sym* c31cb@rib)) (c31cf@find c31d0@sym c31d1@mark* c31d4@sym* (c2e56@rib-mark** c31cb@rib) (c2e5a@rib-label* c31cb@rib))))) (if c31d6@t ((lambda (c31d8@label) (if (c2ccf@c2b1c@imported-label->binding c31d8@label) (gensym) c31d8@label)) c31d6@t) (gensym)))))))) (set! c4b0a@c2e42@gen-top-level-label c2e42@gen-top-level-label) (set! c2e44@gen-define-label+loc (lambda (c31e4@id c31e5@rib) (let ((c31e8@t (c31ab@top-level-context))) (if c31e8@t ((lambda (c31ea@env) (let ((c31ec@label (c2e42@gen-top-level-label c31e4@id c31e5@rib)) (c31ed@locs (c3163@interaction-env-locs c31ea@env))) (values c31ec@label (let ((c31f0@t (assq c31ec@label c31ed@locs))) (if c31f0@t (cdr c31f0@t) (let ((c31f2@loc (c2e3c@gen-lexical c31e4@id))) (begin (c3165@set-interaction-env-locs! c31ea@env (cons (cons c31ec@label c31f2@loc) c31ed@locs)) c31f2@loc))))))) c31e8@t) (values (gensym) (c2e3c@gen-lexical c31e4@id)))))) (set! c4b0b@c2e44@gen-define-label+loc c2e44@gen-define-label+loc) (set! c2e46@gen-define-label (lambda (c31f4@id c31f5@rib) (if (c31ab@top-level-context) (c2e42@gen-top-level-label c31f4@id c31f5@rib) (gensym)))) (set! c4b0c@c2e46@gen-define-label c2e46@gen-define-label) (set! c2e50@rib? (lambda (c31f8@x) (and (simple-struct? c31f8@x) (eq? (simple-struct-name c31f8@x) 'rib)))) (set! c4b0d@c2e50@rib? c2e50@rib?) (set! c2e52@rib-sym* (lambda (c31fa@x) (simple-struct-ref c31fa@x '0))) (set! c4b0e@c2e52@rib-sym* c2e52@rib-sym*) (set! c2e54@set-rib-sym*! (lambda (c31fc@x c31fd@val) (simple-struct-set! c31fc@x '0 c31fd@val))) (set! c4b0f@c2e54@set-rib-sym*! c2e54@set-rib-sym*!) (set! c2e56@rib-mark** (lambda (c3200@x) (simple-struct-ref c3200@x '1))) (set! c4b10@c2e56@rib-mark** c2e56@rib-mark**) (set! c2e58@set-rib-mark**! (lambda (c3202@x c3203@val) (simple-struct-set! c3202@x '1 c3203@val))) (set! c4b11@c2e58@set-rib-mark**! c2e58@set-rib-mark**!) (set! c2e5a@rib-label* (lambda (c3206@x) (simple-struct-ref c3206@x '2))) (set! c4b12@c2e5a@rib-label* c2e5a@rib-label*) (set! c2e5c@set-rib-label*! (lambda (c3208@x c3209@val) (simple-struct-set! c3208@x '2 c3209@val))) (set! c4b13@c2e5c@set-rib-label*! c2e5c@set-rib-label*!) (set! c2e5e@rib-sealed/freq (lambda (c320c@x) (simple-struct-ref c320c@x '3))) (set! c4b14@c2e5e@rib-sealed/freq c2e5e@rib-sealed/freq) (set! c2e60@set-rib-sealed/freq! (lambda (c320e@x c320f@val) (simple-struct-set! c320e@x '3 c320f@val))) (set! c4b15@c2e60@set-rib-sealed/freq! c2e60@set-rib-sealed/freq!) (set! c2e62@rib-cache (lambda (c3212@x) (simple-struct-ref c3212@x '4))) (set! c4b16@c2e62@rib-cache c2e62@rib-cache) (set! c2e64@set-rib-cache! (lambda (c3214@x c3215@val) (simple-struct-set! c3214@x '4 c3215@val))) (set! c4b17@c2e64@set-rib-cache! c2e64@set-rib-cache!) (set! c2e66@dummy '3) (set! c4b18@c2e66@dummy c2e66@dummy) (set! c2e68@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! c4b19@c2e68@make-empty-rib c2e68@make-empty-rib) (set! c2e6a@extend-rib! (lambda (c3218@rib c3219@id c321a@label) (letrec* ((c321f@find (lambda (c322c@sym c322d@mark* c322e@sym* c322f@mark** c3230@label*) (and (pair? c322e@sym*) (if (and (eq? c322c@sym (car c322e@sym*)) (same-marks? c322d@mark* (car c322f@mark**))) c3230@label* (c321f@find c322c@sym c322d@mark* (cdr c322e@sym*) (cdr c322f@mark**) (cdr c3230@label*))))))) (begin (if (c2e5e@rib-sealed/freq c3218@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" c3218@rib) (void)) (let ((c3220@sym (c2eb6@id->sym c3219@id)) (c3221@mark* (c2e86@stx-mark* c3219@id))) (let ((c3224@sym* (c2e52@rib-sym* c3218@rib))) (let ((c3226@t (and (memq c3220@sym (c2e52@rib-sym* c3218@rib)) (c321f@find c3220@sym c3221@mark* c3224@sym* (c2e56@rib-mark** c3218@rib) (c2e5a@rib-label* c3218@rib))))) (if c3226@t ((lambda (c3228@p) (if (not (eq? c321a@label (car c3228@p))) (if (c31ab@top-level-context) (set-car! c3228@p c321a@label) (c319b@syntax-violation '#f '"multiple definitions of identifier" c3219@id)) (void))) c3226@t) (begin (if (c2e62@rib-cache c3218@rib) (hashtable-update! (c2e62@rib-cache c3218@rib) c3220@sym (lambda (c322a@e) (cons (cons c3221@mark* c321a@label) c322a@e)) '()) (void)) (c2e54@set-rib-sym*! c3218@rib (cons c3220@sym c3224@sym*)) (c2e58@set-rib-mark**! c3218@rib (cons c3221@mark* (c2e56@rib-mark** c3218@rib))) (c2e5c@set-rib-label*! c3218@rib (cons c321a@label (c2e5a@rib-label* c3218@rib)))))))))))) (set! c4b1a@c2e6a@extend-rib! c2e6a@extend-rib!) (set! c2e6c@extend-rib/nc! (lambda (c3236@rib c3237@id c3238@label) (let ((c323c@sym (c2eb6@id->sym c3237@id)) (c323d@mark* (c2e86@stx-mark* c3237@id))) (let ((c3240@sym* (c2e52@rib-sym* c3236@rib))) (begin (if (c2e62@rib-cache c3236@rib) (hashtable-update! (c2e62@rib-cache c3236@rib) c323c@sym (lambda (c3242@e) (cons (cons c323d@mark* c3238@label) c3242@e)) '()) (void)) (c2e54@set-rib-sym*! c3236@rib (cons c323c@sym c3240@sym*)) (c2e58@set-rib-mark**! c3236@rib (cons c323d@mark* (c2e56@rib-mark** c3236@rib))) (c2e5c@set-rib-label*! c3236@rib (cons c3238@label (c2e5a@rib-label* c3236@rib)))))))) (set! c4b1b@c2e6c@extend-rib/nc! c2e6c@extend-rib/nc!) (set! c2e6e@make-rib-map (lambda (c3244@sym*) (let ((c3246@ht (make-eq-hashtable))) (let c324c@f ((c3248@i '0) (c3249@sym* c3244@sym*)) (if (null? c3249@sym*) c3246@ht (begin (hashtable-update! c3246@ht (car c3249@sym*) (lambda (c324e@x) (cons c3248@i c324e@x)) '()) (c324c@f (+ c3248@i '1) (cdr c3249@sym*)))))))) (set! c4b1c@c2e6e@make-rib-map c2e6e@make-rib-map) (set! c2e70@seal-rib! (lambda (c3250@rib) (let ((c3252@sym* (c2e52@rib-sym* c3250@rib))) (if (not (null? c3252@sym*)) (begin (c2e54@set-rib-sym*! c3250@rib (list->vector c3252@sym*)) (c2e58@set-rib-mark**! c3250@rib (list->vector (c2e56@rib-mark** c3250@rib))) (c2e5c@set-rib-label*! c3250@rib (list->vector (c2e5a@rib-label* c3250@rib))) (c2e60@set-rib-sealed/freq! c3250@rib (c2e6e@make-rib-map c3252@sym*))) (void))))) (set! c4b1d@c2e70@seal-rib! c2e70@seal-rib!) (set! c2e72@unseal-rib! (lambda (c3254@rib) (if (c2e5e@rib-sealed/freq c3254@rib) (begin (c2e60@set-rib-sealed/freq! c3254@rib '#f) (c2e54@set-rib-sym*! c3254@rib (vector->list (c2e52@rib-sym* c3254@rib))) (c2e58@set-rib-mark**! c3254@rib (vector->list (c2e56@rib-mark** c3254@rib))) (c2e5c@set-rib-label*! c3254@rib (vector->list (c2e5a@rib-label* c3254@rib)))) (void)))) (set! c4b1e@c2e72@unseal-rib! c2e72@unseal-rib!) (set! c2e74@make-full-rib (lambda (c3256@id* c3257@label*) (let ((c325a@r (make-simple-struct 'rib '6 (list (map c2eb6@id->sym c3256@id*) (map c2e86@stx-mark* c3256@id*) c3257@label* '#f '#f)))) (begin (c2e70@seal-rib! c325a@r) c325a@r)))) (set! c4b1f@c2e74@make-full-rib c2e74@make-full-rib) (set! c2e76@rp (c2a01@c28dc@make-record-printer 'stx (lambda (c325c@x c325d@p c325e@wr) (begin (display '"#<syntax " c325d@p) (write (c2ec8@stx->datum c325c@x) c325d@p) (let ((c3262@expr (c2e82@stx-expr c325c@x))) (if (c29f8@c28ca@annotation? c3262@expr) (let ((c3264@src (c29f9@c28cc@annotation-source c3262@expr))) (if (pair? c3264@src) (begin (display '" [" c325d@p) (display (cdr c3264@src) c325d@p) (display '" of " c325d@p) (display (car c3264@src) c325d@p) (display '"]" c325d@p)) (void))) (void))) (display '">" c325d@p))))) (set! c4b20@c2e76@rp c2e76@rp) (set! c2e80@stx? (lambda (c3266@x) (and (simple-struct? c3266@x) (eq? (simple-struct-name c3266@x) 'stx)))) (set! c4b21@c2e80@stx? c2e80@stx?) (set! c2e82@stx-expr (lambda (c3268@x) (simple-struct-ref c3268@x '0))) (set! c4b22@c2e82@stx-expr c2e82@stx-expr) (set! c2e84@set-stx-expr! (lambda (c326a@x c326b@val) (simple-struct-set! c326a@x '0 c326b@val))) (set! c4b23@c2e84@set-stx-expr! c2e84@set-stx-expr!) (set! c2e86@stx-mark* (lambda (c326e@x) (simple-struct-ref c326e@x '1))) (set! c4b24@c2e86@stx-mark* c2e86@stx-mark*) (set! c2e88@set-stx-mark*! (lambda (c3270@x c3271@val) (simple-struct-set! c3270@x '1 c3271@val))) (set! c4b25@c2e88@set-stx-mark*! c2e88@set-stx-mark*!) (set! c2e8a@stx-subst* (lambda (c3274@x) (simple-struct-ref c3274@x '2))) (set! c4b26@c2e8a@stx-subst* c2e8a@stx-subst*) (set! c2e8c@set-stx-subst*! (lambda (c3276@x c3277@val) (simple-struct-set! c3276@x '2 c3277@val))) (set! c4b27@c2e8c@set-stx-subst*! c2e8c@set-stx-subst*!) (set! c2e8e@stx-ae* (lambda (c327a@x) (simple-struct-ref c327a@x '3))) (set! c4b28@c2e8e@stx-ae* c2e8e@stx-ae*) (set! c2e90@set-stx-ae*! (lambda (c327c@x c327d@val) (simple-struct-set! c327c@x '3 c327d@val))) (set! c4b29@c2e90@set-stx-ae*! c2e90@set-stx-ae*!) (set! c2e92@dummy '3) (set! c4b2a@c2e92@dummy c2e92@dummy) (set! c2e94@datum->stx (lambda (c3280@id c3281@datum) (make-simple-struct 'stx '5 (list c3281@datum (c2e86@stx-mark* c3280@id) (c2e8a@stx-subst* c3280@id) (c2e8e@stx-ae* c3280@id))))) (set! c4b2b@c2e94@datum->stx c2e94@datum->stx) (set! c2e96@gen-mark (lambda () (string '#\m))) (set! c4b2c@c2e96@gen-mark c2e96@gen-mark) (set! c2e98@anti-mark '#f) (set! c4b2d@c2e98@anti-mark c2e98@anti-mark) (set! c2e9a@anti-mark? not) (set! c4b2e@c2e9a@anti-mark? c2e9a@anti-mark?) (set! c2e9c@mkstx (lambda (c3284@e c3285@m* c3286@s* c3287@ae*) (if (and (c2e80@stx? c3284@e) (not (c2e3a@top-marked? c3285@m*))) (call-with-values (lambda () (join-wraps c3285@m* c3286@s* c3287@ae* c3284@e)) (lambda (c3292@c328d c3293@c328f c3294@c3291) (let ((c3298@ae* c3294@c3291) (c3299@s* c3293@c328f) (c329a@m* c3292@c328d)) (make-simple-struct 'stx '5 (list (c2e82@stx-expr c3284@e) c329a@m* c3299@s* c3298@ae*))))) (make-simple-struct 'stx '5 (list c3284@e c3285@m* c3286@s* c3287@ae*))))) (set! c4b2f@c2e9c@mkstx c2e9c@mkstx) (set! c2e9e@add-mark (lambda (c329e@m c329f@e c32a0@ae) (c2e9c@mkstx c329f@e (list c329e@m) '(shift) (list c32a0@ae)))) (set! c4b30@c2e9e@add-mark c2e9e@add-mark) (set! c2ea0@add-subst (lambda (c32a4@subst c32a5@e) (c2e9c@mkstx c32a5@e '() (list c32a4@subst) '()))) (set! c4b31@c2ea0@add-subst c2ea0@add-subst) (set! c2ea2@syntax-kind? (lambda (c32a8@x c32a9@p?) (if (c2e80@stx? c32a8@x) (c2ea2@syntax-kind? (c2e82@stx-expr c32a8@x) c32a9@p?) (if (c29f8@c28ca@annotation? c32a8@x) (c2ea2@syntax-kind? (c29fa@c28ce@annotation-expression c32a8@x) c32a9@p?) (c32a9@p? c32a8@x))))) (set! c4b32@c2ea2@syntax-kind? c2ea2@syntax-kind?) (set! c2ea4@syntax-vector->list (lambda (c32ac@x) (if (c2e80@stx? c32ac@x) (let ((c32ae@ls (c2ea4@syntax-vector->list (c2e82@stx-expr c32ac@x))) (c32af@m* (c2e86@stx-mark* c32ac@x)) (c32b0@s* (c2e8a@stx-subst* c32ac@x)) (c32b1@ae* (c2e8e@stx-ae* c32ac@x))) (map (lambda (c32b6@x) (c2e9c@mkstx c32b6@x c32af@m* c32b0@s* c32b1@ae*)) c32ae@ls)) (if (c29f8@c28ca@annotation? c32ac@x) (c2ea4@syntax-vector->list (c29fa@c28ce@annotation-expression c32ac@x)) (if (vector? c32ac@x) (vector->list c32ac@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" c32ac@x)))))) (set! c4b33@c2ea4@syntax-vector->list c2ea4@syntax-vector->list) (set! c2ea6@syntax-pair? (lambda (c32b8@x) (c2ea2@syntax-kind? c32b8@x pair?))) (set! c4b34@c2ea6@syntax-pair? c2ea6@syntax-pair?) (set! c2ea8@syntax-vector? (lambda (c32ba@x) (c2ea2@syntax-kind? c32ba@x vector?))) (set! c4b35@c2ea8@syntax-vector? c2ea8@syntax-vector?) (set! c2eaa@syntax-null? (lambda (c32bc@x) (c2ea2@syntax-kind? c32bc@x null?))) (set! c4b36@c2eaa@syntax-null? c2eaa@syntax-null?) (set! c2eac@syntax-list? (lambda (c32be@x) (or (c2eaa@syntax-null? c32be@x) (and (c2ea6@syntax-pair? c32be@x) (c2eac@syntax-list? (c2eb0@syntax-cdr c32be@x)))))) (set! c4b37@c2eac@syntax-list? c2eac@syntax-list?) (set! c2eae@syntax-car (lambda (c32c0@x) (if (c2e80@stx? c32c0@x) (c2e9c@mkstx (c2eae@syntax-car (c2e82@stx-expr c32c0@x)) (c2e86@stx-mark* c32c0@x) (c2e8a@stx-subst* c32c0@x) (c2e8e@stx-ae* c32c0@x)) (if (c29f8@c28ca@annotation? c32c0@x) (c2eae@syntax-car (c29fa@c28ce@annotation-expression c32c0@x)) (if (pair? c32c0@x) (car c32c0@x) (assertion-violation 'syntax-car '"BUG: not a pair" c32c0@x)))))) (set! c4b38@c2eae@syntax-car c2eae@syntax-car) (set! c2eb0@syntax-cdr (lambda (c32c2@x) (if (c2e80@stx? c32c2@x) (c2e9c@mkstx (c2eb0@syntax-cdr (c2e82@stx-expr c32c2@x)) (c2e86@stx-mark* c32c2@x) (c2e8a@stx-subst* c32c2@x) (c2e8e@stx-ae* c32c2@x)) (if (c29f8@c28ca@annotation? c32c2@x) (c2eb0@syntax-cdr (c29fa@c28ce@annotation-expression c32c2@x)) (if (pair? c32c2@x) (cdr c32c2@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" c32c2@x)))))) (set! c4b39@c2eb0@syntax-cdr c2eb0@syntax-cdr) (set! c2eb2@syntax->list (lambda (c32c4@x) (if (c2ea6@syntax-pair? c32c4@x) (cons (c2eae@syntax-car c32c4@x) (c2eb2@syntax->list (c2eb0@syntax-cdr c32c4@x))) (if (c2eaa@syntax-null? c32c4@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" c32c4@x))))) (set! c4b3a@c2eb2@syntax->list c2eb2@syntax->list) (set! c2eb4@id? (lambda (c32c6@x) (and (c2e80@stx? c32c6@x) (symbol? (c2e82@stx-expr c32c6@x))))) (set! c4b3b@c2eb4@id? c2eb4@id?) (set! c2eb6@id->sym (lambda (c32c8@x) (c2e82@stx-expr c32c8@x))) (set! c4b3c@c2eb6@id->sym c2eb6@id->sym) (set! c2eb8@bound-id=? (lambda (c32ca@x c32cb@y) (and (eq? (c2eb6@id->sym c32ca@x) (c2eb6@id->sym c32cb@y)) (same-marks? (c2e86@stx-mark* c32ca@x) (c2e86@stx-mark* c32cb@y))))) (set! c4b3d@c2eb8@bound-id=? c2eb8@bound-id=?) (set! c2eba@free-id=? (lambda (c32ce@i c32cf@j) (let ((c32d2@t0 (id->real-label c32ce@i)) (c32d3@t1 (id->real-label c32cf@j))) (if (or c32d2@t0 c32d3@t1) (eq? c32d2@t0 c32d3@t1) (eq? (c2eb6@id->sym c32ce@i) (c2eb6@id->sym c32cf@j)))))) (set! c4b3e@c2eba@free-id=? c2eba@free-id=?) (set! c2ebc@valid-bound-ids? (lambda (c32d6@id*) (and (for-all c2eb4@id? c32d6@id*) (c2ebe@distinct-bound-ids? c32d6@id*)))) (set! c4b3f@c2ebc@valid-bound-ids? c2ebc@valid-bound-ids?) (set! c2ebe@distinct-bound-ids? (lambda (c32d8@id*) (or (null? c32d8@id*) (and (not (c2ec0@bound-id-member? (car c32d8@id*) (cdr c32d8@id*))) (c2ebe@distinct-bound-ids? (cdr c32d8@id*)))))) (set! c4b40@c2ebe@distinct-bound-ids? c2ebe@distinct-bound-ids?) (set! c2ec0@bound-id-member? (lambda (c32da@id c32db@id*) (and (pair? c32db@id*) (or (c2eb8@bound-id=? c32da@id (car c32db@id*)) (c2ec0@bound-id-member? c32da@id (cdr c32db@id*)))))) (set! c4b41@c2ec0@bound-id-member? c2ec0@bound-id-member?) (set! c2ec2@self-evaluating? (lambda (c32de@x) (or (number? c32de@x) (string? c32de@x) (char? c32de@x) (boolean? c32de@x) (regexp? c32de@x) (bytevector? c32de@x)))) (set! c4b42@c2ec2@self-evaluating? c2ec2@self-evaluating?) (set! c2ec4@strip-annotations (lambda (c32e0@x) (if (pair? c32e0@x) (cons (c2ec4@strip-annotations (car c32e0@x)) (c2ec4@strip-annotations (cdr c32e0@x))) (if (vector? c32e0@x) (vector-map c2ec4@strip-annotations c32e0@x) (if (c29f8@c28ca@annotation? c32e0@x) (c29f7@c28c8@annotation-stripped c32e0@x) c32e0@x))))) (set! c4b43@c2ec4@strip-annotations c2ec4@strip-annotations) (set! c2ec6@strip (lambda (c32e2@x c32e3@m*) (if (c2e3a@top-marked? c32e3@m*) (if (or (c29f8@c28ca@annotation? c32e2@x) (and (pair? c32e2@x) (c29f8@c28ca@annotation? (car c32e2@x))) (and (vector? c32e2@x) (> (vector-length c32e2@x) '0) (c29f8@c28ca@annotation? (vector-ref c32e2@x '0)))) (c2ec4@strip-annotations c32e2@x) c32e2@x) (let c32e8@f ((c32e6@x c32e2@x)) (if (c2e80@stx? c32e6@x) (begin (if (pair? (c2e82@stx-expr c32e6@x)) (begin (set-source-info! (c2e82@stx-expr c32e6@x) '#f) (set-source-info! (cdr (c2e82@stx-expr c32e6@x)) '#f) (set-source-info! (car (c2e82@stx-expr c32e6@x)) '#f)) (void)) (c2ec6@strip (c2e82@stx-expr c32e6@x) (c2e86@stx-mark* c32e6@x))) (if (c29f8@c28ca@annotation? c32e6@x) (c29f7@c28c8@annotation-stripped c32e6@x) (if (pair? c32e6@x) (let ((c32ea@a (c32e8@f (car c32e6@x))) (c32eb@d (c32e8@f (cdr c32e6@x)))) (if (and (eq? c32ea@a (car c32e6@x)) (eq? c32eb@d (cdr c32e6@x))) c32e6@x (cons c32ea@a c32eb@d))) (if (vector? c32e6@x) (let ((c32ee@old (vector->list c32e6@x))) (let ((c32f0@new (map c32e8@f c32ee@old))) (if (for-all eq? c32ee@old c32f0@new) c32e6@x (list->vector c32f0@new)))) c32e6@x)))))))) (set! c4b44@c2ec6@strip c2ec6@strip) (set! c2ec8@stx->datum (lambda (c32f2@x) (c2ec6@strip c32f2@x '()))) (set! c4b45@c2ec8@stx->datum c2ec8@stx->datum) (set! c2eca@id->label (lambda (c32f4@id) (or (id->real-label c32f4@id) (let ((c32f6@t (c31ab@top-level-context))) (if c32f6@t ((lambda (c32f8@env) (let ((c32fa@rib (c315b@interaction-env-rib c32f8@env))) (call-with-values (lambda () (c2e44@gen-define-label+loc c32f4@id c32fa@rib)) (lambda (c3300@c32fd c3301@c32ff) (let ((c3304@loc_ c3301@c32ff) (c3305@lab c3300@c32fd)) (begin (c2e6a@extend-rib! c32fa@rib c32f4@id c3305@lab) c3305@lab)))))) c32f6@t) '#f))))) (set! c4b46@c2eca@id->label c2eca@id->label) (set! c2ecc@label->binding (lambda (c3308@x c3309@r) (let ((c330c@t (c2ccf@c2b1c@imported-label->binding c3308@x))) (if c330c@t ((lambda (c330e@b) (if (and (pair? c330e@b) (eq? (car c330e@b) '$core-rtd)) (cons '$rtd (map c3071@bless (cdr c330e@b))) (if (and (pair? c330e@b) (eq? (car c330e@b) 'global-rtd)) (let ((c3310@lib (cadr c330e@b)) (c3311@loc (cddr c330e@b))) (cons '$rtd (symbol-value c3311@loc))) c330e@b))) c330c@t) (let ((c3314@t (assq c3308@x c3309@r))) (if c3314@t (cdr c3314@t) (let ((c3316@t (c31ab@top-level-context))) (if c3316@t ((lambda (c3318@env) (let ((c331a@t (assq c3308@x (c3163@interaction-env-locs c3318@env)))) (if c331a@t ((lambda (c331c@p) (cons* 'lexical (cdr c331c@p) '#f)) c331a@t) '(displaced-lexical . #f)))) c3316@t) '(displaced-lexical . #f))))))))) (set! c4b47@c2ecc@label->binding c2ecc@label->binding) (set! c2ece@make-binding cons) (set! c4b48@c2ece@make-binding c2ece@make-binding) (set! c2ed0@binding-type car) (set! c4b49@c2ed0@binding-type c2ed0@binding-type) (set! c2ed2@binding-value cdr) (set! c4b4a@c2ed2@binding-value c2ed2@binding-value) (set! c2ed4@raise-unbound-error (lambda (c331e@id) (c3199@syntax-violation* '#f '"unbound identifier" c331e@id (make-undefined-violation)))) (set! c4b4b@c2ed4@raise-unbound-error c2ed4@raise-unbound-error) (set! c2ed6@syntax-type (lambda (c3320@e c3321@r) (if (c2eb4@id? c3320@e) (let ((c3324@id c3320@e)) (let ((c3326@label (c2eca@id->label c3324@id))) (let ((c3328@b (c2ecc@label->binding c3326@label c3321@r))) (let ((c332a@type (c2ed0@binding-type c3328@b))) (begin (if (not c3326@label) (c2ed4@raise-unbound-error c3324@id) (void)) (let ((c332c@t c332a@type)) (if (memv c332c@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values c332a@type (c2ed2@binding-value c3328@b) c3324@id) (values 'other '#f '#f)))))))) (if (c2ea6@syntax-pair? c3320@e) (let ((c332e@id (c2eae@syntax-car c3320@e))) (if (c2eb4@id? c332e@id) (let ((c3330@label (c2eca@id->label c332e@id))) (let ((c3332@b (c2ecc@label->binding c3330@label c3321@r))) (let ((c3334@type (c2ed0@binding-type c3332@b))) (begin (if (not c3330@label) (c2ed4@raise-unbound-error c332e@id) (void)) (let ((c3336@t c3334@type)) (if (memv c3336@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values c3334@type (c2ed2@binding-value c3332@b) c332e@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((c3338@d (c2ec8@stx->datum c3320@e))) (if (c2ec2@self-evaluating? c3338@d) (values 'constant c3338@d '#f) (values 'other '#f '#f))))))) (set! c4b4c@c2ed6@syntax-type c2ed6@syntax-type) (set! c2ee4@sanitize-binding (lambda (c333a@x c333b@src) (if (procedure? c333a@x) (cons* 'local-macro c333a@x c333b@src) (if (and (pair? c333a@x) (eq? (car c333a@x) 'macro!) (procedure? (cdr c333a@x))) (cons* 'local-macro! (cdr c333a@x) c333b@src) (if (and (pair? c333a@x) (eq? (car c333a@x) '$rtd)) c333a@x (assertion-violation 'expand '"invalid transformer" c333a@x)))))) (set! c4b4d@c2ee4@sanitize-binding c2ee4@sanitize-binding) (set! c2ee6@make-variable-transformer (lambda (c333e@x) (if (procedure? c333e@x) (cons 'macro! c333e@x) (assertion-violation 'make-variable-transformer '"not a procedure" c333e@x)))) (set! c4b4e@c2ee6@make-variable-transformer c2ee6@make-variable-transformer) (set! c2ee8@variable-transformer? (lambda (c3340@x) (and (pair? c3340@x) (eq? (car c3340@x) 'macro!) (procedure? (cdr c3340@x))))) (set! c4b4f@c2ee8@variable-transformer? c2ee8@variable-transformer?) (set! c2eea@variable-transformer-procedure (lambda (c3342@x) (if (c2ee8@variable-transformer? c3342@x) (cdr c3342@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" c3342@x)))) (set! c4b50@c2eea@variable-transformer-procedure c2eea@variable-transformer-procedure) (set! c2eec@make-eval-transformer (lambda (c3344@x) (c2ee4@sanitize-binding (eval-core (c2a5a@c2a12@expanded->core c3344@x)) c3344@x))) (set! c4b51@c2eec@make-eval-transformer c2eec@make-eval-transformer) (set! c303d@parse-define (lambda (c3346@x) (let ((c3348@t c3346@x)) (let ((c334a@ls/false (c30bb@syntax-dispatch c3348@t '(_ (any . any) any . each-any)))) (if (and c334a@ls/false (apply (lambda (c334c@id c334d@fmls c334e@b c334f@b*) (c2eb4@id? c334c@id)) c334a@ls/false)) (apply (lambda (c3354@id c3355@fmls c3356@b c3357@b*) (begin (c30e1@verify-formals c3355@fmls c3346@x) (values c3354@id (cons 'defun (cons c3355@fmls (cons c3356@b c3357@b*)))))) c334a@ls/false) (let ((c335c@t c3348@t)) (let ((c335e@ls/false (c30bb@syntax-dispatch c335c@t '(_ any any)))) (if (and c335e@ls/false (apply (lambda (c3360@id c3361@val) (c2eb4@id? c3360@id)) c335e@ls/false)) (apply (lambda (c3364@id c3365@val) (values c3364@id (cons 'expr c3365@val))) c335e@ls/false) (let ((c3368@t c335c@t)) (let ((c336a@ls/false (c30bb@syntax-dispatch c3368@t '(_ any)))) (if (and c336a@ls/false (apply (lambda (c336c@id) (c2eb4@id? c336c@id)) c336a@ls/false)) (apply (lambda (c336e@id) (values c336e@id (cons 'expr (c3071@bless '(void))))) c336a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3368@t)))))))))))) (set! c4b52@c303d@parse-define c303d@parse-define) (set! c303f@parse-define-syntax (lambda (c3370@x) (let ((c3372@t c3370@x)) (let ((c3374@ls/false (c30bb@syntax-dispatch c3372@t '(_ any any)))) (if (and c3374@ls/false (apply (lambda (c3376@id c3377@val) (c2eb4@id? c3376@id)) c3374@ls/false)) (apply (lambda (c337a@id c337b@val) (values c337a@id c337b@val)) c3374@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3372@t)))))) (set! c4b53@c303f@parse-define-syntax c303f@parse-define-syntax) (set! c3041@scheme-stx-hashtable (make-eq-hashtable)) (set! c4b54@c3041@scheme-stx-hashtable c3041@scheme-stx-hashtable) (set! c3043@scheme-stx (lambda (c337e@sym) (or (hashtable-ref c3041@scheme-stx-hashtable c337e@sym '#f) (let ((c3380@subst (c2cab@c2ad4@library-subst (c2cc9@c2b10@find-library-by-name '(psyntax system $all))))) (let ((c3382@stx (make-simple-struct 'stx '5 (list c337e@sym c2e38@top-mark* '() '())))) (let ((c3384@stx (let ((c3386@t (assq c337e@sym c3380@subst))) (if c3386@t ((lambda (c3388@x) (let ((c338a@name (car c3388@x)) (c338b@label (cdr c3388@x))) (c2ea0@add-subst (make-simple-struct 'rib '6 (list (list c338a@name) (list c2e38@top-mark*) (list c338b@label) '#f '#f)) c3382@stx))) c3386@t) c3382@stx)))) (begin (hashtable-set! c3041@scheme-stx-hashtable c337e@sym c3384@stx) c3384@stx))))))) (set! c4b55@c3043@scheme-stx c3043@scheme-stx) (set! c3045@lexical-var car) (set! c4b56@c3045@lexical-var c3045@lexical-var) (set! c3047@lexical-mutable? cdr) (set! c4b57@c3047@lexical-mutable? c3047@lexical-mutable?) (set! c3049@set-lexical-mutable! set-cdr!) (set! c4b58@c3049@set-lexical-mutable! c3049@set-lexical-mutable!) (set! c304b@add-lexical (lambda (c338e@lab c338f@lex c3390@r) (cons (cons* c338e@lab 'lexical c338f@lex '#f) c3390@r))) (set! c4b59@c304b@add-lexical c304b@add-lexical) (set! c304d@add-lexicals (lambda (c3394@lab* c3395@lex* c3396@r) (if (null? c3394@lab*) c3396@r (c304d@add-lexicals (cdr c3394@lab*) (cdr c3395@lex*) (c304b@add-lexical (car c3394@lab*) (car c3395@lex*) c3396@r))))) (set! c4b5a@c304d@add-lexicals c304d@add-lexicals) (set! c304f@letrec-helper (lambda (c339a@e c339b@r c339c@mr c339d@build) (let ((c33a2@t c339a@e)) (let ((c33a4@ls/false (c30bb@syntax-dispatch c33a2@t '(_ #(each (any any)) any . each-any)))) (if c33a4@ls/false (apply (lambda (c33a6@lhs* c33a7@rhs* c33a8@b c33a9@b*) (if (not (c2ebc@valid-bound-ids? c33a6@lhs*)) (c3075@invalid-fmls-error c339a@e c33a6@lhs*) (let ((c33ae@lex* (map c2e3c@gen-lexical c33a6@lhs*)) (c33af@lab* (map c2e40@gen-label c33a6@lhs*))) (let ((c33b2@rib (c2e74@make-full-rib c33a6@lhs* c33af@lab*)) (c33b3@r (c304d@add-lexicals c33af@lab* c33ae@lex* c339b@r))) (let ((c33b6@body (c30f3@chi-internal (c2ea0@add-subst c33b2@rib (cons c33a8@b c33a9@b*)) c33b3@r c339c@mr)) (c33b7@rhs* (c30d9@chi-expr* (map (lambda (c33ba@x) (c2ea0@add-subst c33b2@rib c33ba@x)) c33a7@rhs*) c33b3@r c339c@mr))) (c339d@build '#f c33ae@lex* c33b7@rhs* c33b6@body)))))) c33a4@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c33a2@t)))))) (set! c4b5b@c304f@letrec-helper c304f@letrec-helper) (set! c3051@let-transformer (lambda (c33bc@e c33bd@r c33be@mr) (let ((c33c2@t c33bc@e)) (let ((c33c4@ls/false (c30bb@syntax-dispatch c33c2@t '(_ #(each (any any)) any . each-any)))) (if c33c4@ls/false (apply (lambda (c33c6@lhs* c33c7@rhs* c33c8@b c33c9@b*) (if (not (c2ebc@valid-bound-ids? c33c6@lhs*)) (c3075@invalid-fmls-error c33bc@e c33c6@lhs*) (let ((c33ce@lex* (map c2e3c@gen-lexical c33c6@lhs*)) (c33cf@lab* (map c2e40@gen-label c33c6@lhs*)) (c33d0@rhs* (c30d9@chi-expr* c33c7@rhs* c33bd@r c33be@mr))) (let ((c33d4@rib (c2e74@make-full-rib c33c6@lhs* c33cf@lab*)) (c33d5@r (c304d@add-lexicals c33cf@lab* c33ce@lex* c33bd@r))) (let ((c33d8@body (c30f3@chi-internal (c2ea0@add-subst c33d4@rib (cons c33c8@b c33c9@b*)) c33d5@r c33be@mr))) (c2e1c@c2d7f@build-let '#f c33ce@lex* c33d0@rhs* c33d8@body)))))) c33c4@ls/false) (let ((c33da@t c33c2@t)) (let ((c33dc@ls/false (c30bb@syntax-dispatch c33da@t '(_ any #(each (any any)) any . each-any)))) (if c33dc@ls/false (apply (lambda (c33de@loop c33df@lhs* c33e0@rhs* c33e1@b c33e2@b*) (if (not (c2ebc@valid-bound-ids? c33df@lhs*)) (c3075@invalid-fmls-error c33bc@e c33df@lhs*) (let ((c33e8@lex* (map c2e3c@gen-lexical c33df@lhs*)) (c33e9@lab* (map c2e40@gen-label c33df@lhs*)) (c33ea@rhs* (c30d9@chi-expr* c33e0@rhs* c33bd@r c33be@mr)) (c33eb@loop-lex (c2e3c@gen-lexical c33de@loop)) (c33ec@loop-lab (c2e40@gen-label c33de@loop))) (let ((c33f2@loop-rib (c2e74@make-full-rib (list c33de@loop) (list c33ec@loop-lab))) (c33f3@rib (c2e74@make-full-rib c33df@lhs* c33e9@lab*)) (c33f4@r (c304d@add-lexicals (cons c33ec@loop-lab c33e9@lab*) (cons c33eb@loop-lex c33e8@lex*) c33bd@r))) (let ((c33f8@body (c30f3@chi-internal (c2ea0@add-subst c33f2@loop-rib (c2ea0@add-subst c33f3@rib (cons c33e1@b c33e2@b*))) c33f4@r c33be@mr))) (c2e1d@c2d81@build-named-let '#f c33eb@loop-lex c33e8@lex* c33ea@rhs* c33f8@body)))))) c33dc@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c33da@t))))))))) (set! c4b5c@c3051@let-transformer c3051@let-transformer) (set! c3053@letrec-transformer (lambda (c33fa@e c33fb@r c33fc@mr) (c304f@letrec-helper c33fa@e c33fb@r c33fc@mr c2e1b@c2d7d@build-letrec))) (set! c4b5d@c3053@letrec-transformer c3053@letrec-transformer) (set! c3055@letrec*-transformer (lambda (c3400@e c3401@r c3402@mr) (c304f@letrec-helper c3400@e c3401@r c3402@mr c2e1e@c2d83@build-letrec*))) (set! c4b5e@c3055@letrec*-transformer c3055@letrec*-transformer) (set! c3057@fluid-let-syntax-transformer (lambda (c3406@e c3407@r c3408@mr) (letrec* ((c340d@lookup (lambda (c3420@x) (or (c2eca@id->label c3420@x) (c319b@syntax-violation '#f '"unbound identifier" c3406@e c3420@x))))) (let ((c340e@t c3406@e)) (let ((c3410@ls/false (c30bb@syntax-dispatch c340e@t '(_ #(each (any any)) any . each-any)))) (if c3410@ls/false (apply (lambda (c3412@lhs* c3413@rhs* c3414@b c3415@b*) (if (not (c2ebc@valid-bound-ids? c3412@lhs*)) (c3075@invalid-fmls-error c3406@e c3412@lhs*) (let ((c341a@lab* (map c340d@lookup c3412@lhs*)) (c341b@rhs* (map (lambda (c341e@x) (c2eec@make-eval-transformer (c3115@expand-transformer c341e@x c3408@mr))) c3413@rhs*))) (c30f3@chi-internal (cons c3414@b c3415@b*) (append (map cons c341a@lab* c341b@rhs*) c3407@r) (append (map cons c341a@lab* c341b@rhs*) c3408@mr))))) c3410@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c340e@t))))))) (set! c4b5f@c3057@fluid-let-syntax-transformer c3057@fluid-let-syntax-transformer) (set! c3059@type-descriptor-transformer (lambda (c3422@e c3423@r c3424@mr) (let ((c3428@t c3422@e)) (let ((c342a@ls/false (c30bb@syntax-dispatch c3428@t '(_ any)))) (if (and c342a@ls/false (apply (lambda (c342c@id) (c2eb4@id? c342c@id)) c342a@ls/false)) (apply (lambda (c342e@id) (let ((c3430@lab (c2eca@id->label c342e@id))) (let ((c3432@b (c2ecc@label->binding c3430@lab c3423@r))) (let ((c3434@type (c2ed0@binding-type c3432@b))) (begin (if (not c3430@lab) (c2ed4@raise-unbound-error c342e@id) (void)) (if (not (and (eq? c3434@type '$rtd) (not (list? (c2ed2@binding-value c3432@b))))) (c319b@syntax-violation '#f '"not a record type" c3422@e) (void)) (list 'quote (c2ed2@binding-value c3432@b))))))) c342a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3428@t)))))) (set! c4b60@c3059@type-descriptor-transformer c3059@type-descriptor-transformer) (set! c305b@record-type-descriptor-transformer (lambda (c3436@e c3437@r c3438@mr) (let ((c343c@t c3436@e)) (let ((c343e@ls/false (c30bb@syntax-dispatch c343c@t '(_ any)))) (if (and c343e@ls/false (apply (lambda (c3440@id) (c2eb4@id? c3440@id)) c343e@ls/false)) (apply (lambda (c3442@id) (let ((c3444@lab (c2eca@id->label c3442@id))) (let ((c3446@b (c2ecc@label->binding c3444@lab c3437@r))) (let ((c3448@type (c2ed0@binding-type c3446@b))) (begin (if (not c3444@lab) (c2ed4@raise-unbound-error c3442@id) (void)) (if (not (and (eq? c3448@type '$rtd) (list? (c2ed2@binding-value c3446@b)))) (c319b@syntax-violation '#f '"not a record type" c3436@e) (void)) (c30dd@chi-expr (car (c2ed2@binding-value c3446@b)) c3437@r c3438@mr)))))) c343e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c343c@t)))))) (set! c4b61@c305b@record-type-descriptor-transformer c305b@record-type-descriptor-transformer) (set! c305d@record-constructor-descriptor-transformer (lambda (c344a@e c344b@r c344c@mr) (let ((c3450@t c344a@e)) (let ((c3452@ls/false (c30bb@syntax-dispatch c3450@t '(_ any)))) (if (and c3452@ls/false (apply (lambda (c3454@id) (c2eb4@id? c3454@id)) c3452@ls/false)) (apply (lambda (c3456@id) (let ((c3458@lab (c2eca@id->label c3456@id))) (let ((c345a@b (c2ecc@label->binding c3458@lab c344b@r))) (let ((c345c@type (c2ed0@binding-type c345a@b))) (begin (if (not c3458@lab) (c2ed4@raise-unbound-error c3456@id) (void)) (if (not (and (eq? c345c@type '$rtd) (list? (c2ed2@binding-value c345a@b)))) (c319b@syntax-violation '#f '"invalid type" c344a@e) (void)) (c30dd@chi-expr (cadr (c2ed2@binding-value c345a@b)) c344b@r c344c@mr)))))) c3452@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3450@t)))))) (set! c4b62@c305d@record-constructor-descriptor-transformer c305d@record-constructor-descriptor-transformer) (set! c305f@when-macro (lambda (c345e@e) (let ((c3460@t c345e@e)) (let ((c3462@ls/false (c30bb@syntax-dispatch c3460@t '(_ any any . each-any)))) (if c3462@ls/false (apply (lambda (c3464@test c3465@e c3466@e*) (c3071@bless (list 'if c3464@test (cons 'begin (cons c3465@e c3466@e*))))) c3462@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3460@t)))))) (set! c4b63@c305f@when-macro c305f@when-macro) (set! c3061@unless-macro (lambda (c346a@e) (let ((c346c@t c346a@e)) (let ((c346e@ls/false (c30bb@syntax-dispatch c346c@t '(_ any any . each-any)))) (if c346e@ls/false (apply (lambda (c3470@test c3471@e c3472@e*) (c3071@bless (list 'if (list 'not c3470@test) (cons 'begin (cons c3471@e c3472@e*))))) c346e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c346c@t)))))) (set! c4b64@c3061@unless-macro c3061@unless-macro) (set! c3063@if-transformer (lambda (c3476@e c3477@r c3478@mr) (let ((c347c@t c3476@e)) (let ((c347e@ls/false (c30bb@syntax-dispatch c347c@t '(_ any any any)))) (if c347e@ls/false (apply (lambda (c3480@e0 c3481@e1 c3482@e2) (list 'if (c30dd@chi-expr c3480@e0 c3477@r c3478@mr) (c30dd@chi-expr c3481@e1 c3477@r c3478@mr) (c30dd@chi-expr c3482@e2 c3477@r c3478@mr))) c347e@ls/false) (let ((c3486@t c347c@t)) (let ((c3488@ls/false (c30bb@syntax-dispatch c3486@t '(_ any any)))) (if c3488@ls/false (apply (lambda (c348a@e0 c348b@e1) (list 'if (c30dd@chi-expr c348a@e0 c3477@r c3478@mr) (c30dd@chi-expr c348b@e1 c3477@r c3478@mr) (c2e1a@c2d7b@build-void))) c3488@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3486@t))))))))) (set! c4b65@c3063@if-transformer c3063@if-transformer) (set! c3065@and-transformer (lambda (c348e@e c348f@r c3490@mr) (let ((c3494@t c348e@e)) (let ((c3496@ls/false (c30bb@syntax-dispatch c3494@t '(_ . each-any)))) (if c3496@ls/false (apply (lambda (c3498@e*) (cons 'and (c30d9@chi-expr* c3498@e* c348f@r c3490@mr))) c3496@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3494@t)))))) (set! c4b66@c3065@and-transformer c3065@and-transformer) (set! c3067@or-transformer (lambda (c349a@e c349b@r c349c@mr) (let ((c34a0@t c349a@e)) (let ((c34a2@ls/false (c30bb@syntax-dispatch c34a0@t '(_ . each-any)))) (if c34a2@ls/false (apply (lambda (c34a4@e*) (cons 'or (c30d9@chi-expr* c34a4@e* c349b@r c349c@mr))) c34a2@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c34a0@t)))))) (set! c4b67@c3067@or-transformer c3067@or-transformer) (set! c3069@case-macro (lambda (c34a6@e) (letrec* ((c34a9@build-last (lambda (c34d0@cls) (let ((c34d2@t c34d0@cls)) (let ((c34d4@ls/false (c30bb@syntax-dispatch c34d2@t '(#(scheme-id else) any . each-any)))) (if c34d4@ls/false (apply (lambda (c34d6@e c34d7@e*) (cons 'begin (cons c34d6@e c34d7@e*))) c34d4@ls/false) (let ((c34da@t c34d2@t)) (let ((c34dc@ls/false (c30bb@syntax-dispatch c34da@t '_))) (if c34dc@ls/false (apply (lambda () (c34ab@build-one c34d0@cls '(if #f #f))) c34dc@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c34da@t))))))))) (c34ab@build-one (lambda (c34c2@cls c34c3@k) (let ((c34c6@t c34c2@cls)) (let ((c34c8@ls/false (c30bb@syntax-dispatch c34c6@t '(each-any any . each-any)))) (if c34c8@ls/false (apply (lambda (c34ca@d* c34cb@e c34cc@e*) (list 'if (list 'memv 't (list 'quote c34ca@d*)) (cons 'begin (cons c34cb@e c34cc@e*)) c34c3@k)) c34c8@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c34c6@t))))))) (let ((c34ac@t c34a6@e)) (let ((c34ae@ls/false (c30bb@syntax-dispatch c34ac@t '(_ any)))) (if c34ae@ls/false (apply (lambda (c34b0@expr) (c3071@bless (cons 'let (cons (list (list 't c34b0@expr)) '((if #f #f)))))) c34ae@ls/false) (let ((c34b2@t c34ac@t)) (let ((c34b4@ls/false (c30bb@syntax-dispatch c34b2@t '(_ any any . each-any)))) (if c34b4@ls/false (apply (lambda (c34b6@expr c34b7@cls c34b8@cls*) (c3071@bless (list 'let (list (list 't c34b6@expr)) (let c34c0@f ((c34bc@cls c34b7@cls) (c34bd@cls* c34b8@cls*)) (if (null? c34bd@cls*) (c34a9@build-last c34bc@cls) (c34ab@build-one c34bc@cls (c34c0@f (car c34bd@cls*) (cdr c34bd@cls*)))))))) c34b4@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c34b2@t)))))))))) (set! c4b68@c3069@case-macro c3069@case-macro) (set! c306b@quote-transformer (lambda (c34de@e c34df@r c34e0@mr) (let ((c34e4@t c34de@e)) (let ((c34e6@ls/false (c30bb@syntax-dispatch c34e4@t '(_ any)))) (if c34e6@ls/false (apply (lambda (c34e8@datum) (list 'quote (c2ec8@stx->datum c34e8@datum))) c34e6@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c34e4@t)))))) (set! c4b69@c306b@quote-transformer c306b@quote-transformer) (set! c306d@case-lambda-transformer (lambda (c34ea@e c34eb@r c34ec@mr) (let ((c34f0@t c34ea@e)) (let ((c34f2@ls/false (c30bb@syntax-dispatch c34f0@t '(_ . #(each (any any . each-any)))))) (if c34f2@ls/false (apply (lambda (c34f4@fmls* c34f5@b* c34f6@b**) (call-with-values (lambda () (c30e5@chi-lambda-clause* c34ea@e c34f4@fmls* (map cons c34f5@b* c34f6@b**) c34eb@r c34ec@mr)) (lambda (c34fe@c34fb c34ff@c34fd) (let ((c3502@body* c34ff@c34fd) (c3503@fmls* c34fe@c34fb)) (c2e18@c2d4b@build-case-lambda '#f c3503@fmls* c3502@body*))))) c34f2@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c34f0@t)))))) (set! c4b6a@c306d@case-lambda-transformer c306d@case-lambda-transformer) (set! c306f@lambda-transformer (lambda (c3506@e c3507@r c3508@mr) (let ((c350c@t c3506@e)) (let ((c350e@ls/false (c30bb@syntax-dispatch c350c@t '(_ any any . each-any)))) (if c350e@ls/false (apply (lambda (c3510@fmls c3511@b c3512@b*) (call-with-values (lambda () (c30e3@chi-lambda-clause c3506@e c3510@fmls (cons c3511@b c3512@b*) c3507@r c3508@mr)) (lambda (c351a@c3517 c351b@c3519) (let ((c351e@body c351b@c3519) (c351f@fmls c351a@c3517)) (c2e17@c2d49@build-lambda '#f c351f@fmls c351e@body))))) c350e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c350c@t)))))) (set! c4b6b@c306f@lambda-transformer c306f@lambda-transformer) (set! c3071@bless (lambda (c3522@x) (c2e9c@mkstx (let c3526@f ((c3524@x c3522@x)) (if (c2e80@stx? c3524@x) c3524@x (if (pair? c3524@x) (cons (c3526@f (car c3524@x)) (c3526@f (cdr c3524@x))) (if (symbol? c3524@x) (c3043@scheme-stx c3524@x) (if (vector? c3524@x) (vector-map c3526@f c3524@x) c3524@x))))) '() '() '()))) (set! c4b6c@c3071@bless c3071@bless) (set! c3073@with-syntax-macro (lambda (c3528@e) (let ((c352a@t c3528@e)) (let ((c352c@ls/false (c30bb@syntax-dispatch c352a@t '(_ #(each (any any)) any . each-any)))) (if c352c@ls/false (apply (lambda (c352e@pat* c352f@expr* c3530@b c3531@b*) (let ((c3536@idn* (let c353a@f ((c3538@pat* c352e@pat*)) (if (null? c3538@pat*) '() (call-with-values (lambda () (c30b9@convert-pattern (car c3538@pat*) '())) (lambda (c3540@c353d c3541@c353f) (let ((c3544@idn* c3541@c353f) (c3545@pat c3540@c353d)) (append c3544@idn* (c353a@f (cdr c3538@pat*)))))))))) (begin (c30e1@verify-formals (map car c3536@idn*) c3528@e) (let ((c3548@t* (c3189@generate-temporaries c352f@expr*))) (c3071@bless (list 'let (map list c3548@t* c352f@expr*) (let c354e@f ((c354a@pat* c352e@pat*) (c354b@t* c3548@t*)) (if (null? c354a@pat*) (cons 'begin (cons '#f (cons c3530@b c3531@b*))) (list 'syntax-case (car c354b@t*) '() (list (car c354a@pat*) (c354e@f (cdr c354a@pat*) (cdr c354b@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car c354a@pat*)) (car c354b@t*)))))))))))) c352c@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c352a@t)))))) (set! c4b6d@c3073@with-syntax-macro c3073@with-syntax-macro) (set! c3075@invalid-fmls-error (lambda (c3550@stx c3551@fmls) (let ((c3554@t c3551@fmls)) (let ((c3556@ls/false (c30bb@syntax-dispatch c3554@t '#(each+ any () any)))) (if c3556@ls/false (apply (lambda (c3558@id* c3559@last) (let c355e@f ((c355c@id* (if (c2eb4@id? c3559@last) (cons c3559@last c3558@id*) (if (c2eaa@syntax-null? c3559@last) c3558@id* (c319b@syntax-violation '#f '"not an identifier" c3550@stx c3559@last))))) (if (null? c355c@id*) (values) (if (not (c2eb4@id? (car c355c@id*))) (c319b@syntax-violation '#f '"not an identifier" c3550@stx (car c355c@id*)) (begin (c355e@f (cdr c355c@id*)) (if (c2ec0@bound-id-member? (car c355c@id*) (cdr c355c@id*)) (c319b@syntax-violation '#f '"duplicate binding" c3550@stx (car c355c@id*)) (void))))))) c3556@ls/false) (let ((c3560@t c3554@t)) (let ((c3562@ls/false (c30bb@syntax-dispatch c3560@t '_))) (if c3562@ls/false (apply (lambda () (c319b@syntax-violation '#f '"malformed binding form" c3550@stx c3551@fmls)) c3562@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3560@t))))))))) (set! c4b6e@c3075@invalid-fmls-error c3075@invalid-fmls-error) (set! c3077@let-macro (lambda (c3564@stx) (let ((c3566@t c3564@stx)) (let ((c3568@ls/false (c30bb@syntax-dispatch c3566@t '(_ #(each (any any)) any . each-any)))) (if c3568@ls/false (apply (lambda (c356a@lhs* c356b@rhs* c356c@b c356d@b*) (if (c2ebc@valid-bound-ids? c356a@lhs*) (c3071@bless (cons (cons 'lambda (cons c356a@lhs* (cons c356c@b c356d@b*))) c356b@rhs*)) (c3075@invalid-fmls-error c3564@stx c356a@lhs*))) c3568@ls/false) (let ((c3572@t c3566@t)) (let ((c3574@ls/false (c30bb@syntax-dispatch c3572@t '(_ any #(each (any any)) any . each-any)))) (if (and c3574@ls/false (apply (lambda (c3576@f c3577@lhs* c3578@rhs* c3579@b c357a@b*) (c2eb4@id? c3576@f)) c3574@ls/false)) (apply (lambda (c3580@f c3581@lhs* c3582@rhs* c3583@b c3584@b*) (if (c2ebc@valid-bound-ids? c3581@lhs*) (c3071@bless (cons (list 'letrec (list (list c3580@f (cons 'lambda (cons c3581@lhs* (cons c3583@b c3584@b*))))) c3580@f) c3582@rhs*)) (c3075@invalid-fmls-error c3564@stx c3581@lhs*))) c3574@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3572@t))))))))) (set! c4b6f@c3077@let-macro c3077@let-macro) (set! c3079@let-values-macro (lambda (c358a@stx) (letrec* ((c358d@rename (lambda (c35f2@x c35f3@old* c35f4@new*) (begin (if (not (c2eb4@id? c35f2@x)) (c319b@syntax-violation '#f '"not an indentifier" c358a@stx c35f2@x) (void)) (if (c2ec0@bound-id-member? c35f2@x c35f3@old*) (c319b@syntax-violation '#f '"duplicate binding" c358a@stx c35f2@x) (void)) (let ((c35f8@y (gensym (c31a1@syntax->datum c35f2@x)))) (values c35f8@y (cons c35f2@x c35f3@old*) (cons c35f8@y c35f4@new*)))))) (c358f@rename* (lambda (c35e0@x* c35e1@old* c35e2@new*) (if (null? c35e0@x*) (values '() c35e1@old* c35e2@new*) (call-with-values (lambda () (c358d@rename (car c35e0@x*) c35e1@old* c35e2@new*)) (lambda (c35e6@x c35e7@old* c35e8@new*) (call-with-values (lambda () (c358f@rename* (cdr c35e0@x*) c35e7@old* c35e8@new*)) (lambda (c35ec@x* c35ed@old* c35ee@new*) (values (cons c35e6@x c35ec@x*) c35ed@old* c35ee@new*))))))))) (let ((c3590@t c358a@stx)) (let ((c3592@ls/false (c30bb@syntax-dispatch c3590@t '(_ () any . each-any)))) (if c3592@ls/false (apply (lambda (c3594@b c3595@b*) (cons* (c3071@bless 'let) '() c3594@b c3595@b*)) c3592@ls/false) (let ((c3598@t c3590@t)) (let ((c359a@ls/false (c30bb@syntax-dispatch c3598@t '(_ #(each (any any)) any . each-any)))) (if c359a@ls/false (apply (lambda (c359c@lhs* c359d@rhs* c359e@b c359f@b*) (c3071@bless (let c35ac@f ((c35a4@lhs* c359c@lhs*) (c35a5@rhs* c359d@rhs*) (c35a6@old* '()) (c35a7@new* '())) (if (null? c35a4@lhs*) (cons 'let (cons (map list c35a6@old* c35a7@new*) (cons c359e@b c359f@b*))) (let ((c35ae@t (car c35a4@lhs*))) (let ((c35b0@ls/false (c30bb@syntax-dispatch c35ae@t 'each-any))) (if c35b0@ls/false (apply (lambda (c35b2@x*) (call-with-values (lambda () (c358f@rename* c35b2@x* c35a6@old* c35a7@new*)) (lambda (c35ba@c35b5 c35bb@c35b7 c35bc@c35b9) (let ((c35c0@new* c35bc@c35b9) (c35c1@old* c35bb@c35b7) (c35c2@y* c35ba@c35b5)) (list 'call-with-values (list 'lambda '() (car c35a5@rhs*)) (list 'lambda c35c2@y* (c35ac@f (cdr c35a4@lhs*) (cdr c35a5@rhs*) c35c1@old* c35c0@new*))))))) c35b0@ls/false) (let ((c35c6@t c35ae@t)) (let ((c35c8@ls/false (c30bb@syntax-dispatch c35c6@t '#(each+ any () any)))) (if c35c8@ls/false (apply (lambda (c35ca@x* c35cb@x) (call-with-values (lambda () (c358d@rename c35cb@x c35a6@old* c35a7@new*)) (lambda (c35ce@y c35cf@old* c35d0@new*) (call-with-values (lambda () (c358f@rename* c35ca@x* c35cf@old* c35d0@new*)) (lambda (c35d4@y* c35d5@old* c35d6@new*) (list 'call-with-values (list 'lambda '() (car c35a5@rhs*)) (list 'lambda (append c35d4@y* c35ce@y) (c35ac@f (cdr c35a4@lhs*) (cdr c35a5@rhs*) c35d5@old* c35d6@new*)))))))) c35c8@ls/false) (let ((c35da@t c35c6@t)) (let ((c35dc@ls/false (c30bb@syntax-dispatch c35da@t 'any))) (if c35dc@ls/false (apply (lambda (c35de@others) (c319b@syntax-violation '#f '"malformed bindings" c358a@stx c35de@others)) c35dc@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c35da@t)))))))))))))) c359a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3598@t)))))))))) (set! c4b70@c3079@let-values-macro c3079@let-values-macro) (set! c307b@let*-values-macro (lambda (c35fa@stx) (letrec* ((c35fd@check (lambda (c362c@x*) (if (not (null? c362c@x*)) (let ((c362e@x (car c362c@x*))) (begin (if (not (c2eb4@id? c362e@x)) (c319b@syntax-violation '#f '"not an identifier" c35fa@stx c362e@x) (void)) (c35fd@check (cdr c362c@x*)) (if (c2ec0@bound-id-member? c362e@x (cdr c362c@x*)) (c319b@syntax-violation '#f '"duplicate identifier" c35fa@stx c362e@x) (void)))) (void))))) (let ((c35fe@t c35fa@stx)) (let ((c3600@ls/false (c30bb@syntax-dispatch c35fe@t '(_ () any . each-any)))) (if c3600@ls/false (apply (lambda (c3602@b c3603@b*) (cons* (c3071@bless 'let) '() c3602@b c3603@b*)) c3600@ls/false) (let ((c3606@t c35fe@t)) (let ((c3608@ls/false (c30bb@syntax-dispatch c3606@t '(_ #(each (any any)) any . each-any)))) (if c3608@ls/false (apply (lambda (c360a@lhs* c360b@rhs* c360c@b c360d@b*) (c3071@bless (let c3616@f ((c3612@lhs* c360a@lhs*) (c3613@rhs* c360b@rhs*)) (if (null? c3612@lhs*) (cons 'begin (cons c360c@b c360d@b*)) (let ((c3618@t (car c3612@lhs*))) (let ((c361a@ls/false (c30bb@syntax-dispatch c3618@t 'each-any))) (if c361a@ls/false (apply (lambda (c361c@x*) (begin (c35fd@check c361c@x*) (list 'call-with-values (list 'lambda '() (car c3613@rhs*)) (list 'lambda c361c@x* (c3616@f (cdr c3612@lhs*) (cdr c3613@rhs*)))))) c361a@ls/false) (let ((c361e@t c3618@t)) (let ((c3620@ls/false (c30bb@syntax-dispatch c361e@t '#(each+ any () any)))) (if c3620@ls/false (apply (lambda (c3622@x* c3623@x) (begin (c35fd@check (cons c3623@x c3622@x*)) (list 'call-with-values (list 'lambda '() (car c3613@rhs*)) (list 'lambda (append c3622@x* c3623@x) (c3616@f (cdr c3612@lhs*) (cdr c3613@rhs*)))))) c3620@ls/false) (let ((c3626@t c361e@t)) (let ((c3628@ls/false (c30bb@syntax-dispatch c3626@t 'any))) (if c3628@ls/false (apply (lambda (c362a@others) (c319b@syntax-violation '#f '"malformed bindings" c35fa@stx c362a@others)) c3628@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3626@t)))))))))))))) c3608@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3606@t)))))))))) (set! c4b71@c307b@let*-values-macro c307b@let*-values-macro) (set! c307d@trace-lambda-macro (lambda (c3630@stx) (let ((c3632@t c3630@stx)) (let ((c3634@ls/false (c30bb@syntax-dispatch c3632@t '(_ any each-any any . each-any)))) (if c3634@ls/false (apply (lambda (c3636@who c3637@fmls c3638@b c3639@b*) (if (c2ebc@valid-bound-ids? c3637@fmls) (c3071@bless (list 'make-traced-procedure (list 'quote c3636@who) (cons 'lambda (cons c3637@fmls (cons c3638@b c3639@b*))))) (c3075@invalid-fmls-error c3630@stx c3637@fmls))) c3634@ls/false) (let ((c363e@t c3632@t)) (let ((c3640@ls/false (c30bb@syntax-dispatch c363e@t '(_ any #(each+ any () any) any . each-any)))) (if c3640@ls/false (apply (lambda (c3642@who c3643@fmls c3644@last c3645@b c3646@b*) (if (c2ebc@valid-bound-ids? (cons c3644@last c3643@fmls)) (c3071@bless (list 'make-traced-procedure (list 'quote c3642@who) (cons 'lambda (cons (append c3643@fmls c3644@last) (cons c3645@b c3646@b*))))) (c3075@invalid-fmls-error c3630@stx (append c3643@fmls c3644@last)))) c3640@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c363e@t))))))))) (set! c4b72@c307d@trace-lambda-macro c307d@trace-lambda-macro) (set! c307f@trace-define-macro (lambda (c364c@stx) (let ((c364e@t c364c@stx)) (let ((c3650@ls/false (c30bb@syntax-dispatch c364e@t '(_ (any . each-any) any . each-any)))) (if c3650@ls/false (apply (lambda (c3652@who c3653@fmls c3654@b c3655@b*) (if (c2ebc@valid-bound-ids? c3653@fmls) (c3071@bless (list 'define c3652@who (list 'make-traced-procedure (list 'quote c3652@who) (cons 'lambda (cons c3653@fmls (cons c3654@b c3655@b*)))))) (c3075@invalid-fmls-error c364c@stx c3653@fmls))) c3650@ls/false) (let ((c365a@t c364e@t)) (let ((c365c@ls/false (c30bb@syntax-dispatch c365a@t '(_ (any . #(each+ any () any)) any . each-any)))) (if c365c@ls/false (apply (lambda (c365e@who c365f@fmls c3660@last c3661@b c3662@b*) (if (c2ebc@valid-bound-ids? (cons c3660@last c365f@fmls)) (c3071@bless (list 'define c365e@who (list 'make-traced-procedure (list 'quote c365e@who) (cons 'lambda (cons (append c365f@fmls c3660@last) (cons c3661@b c3662@b*)))))) (c3075@invalid-fmls-error c364c@stx (append c365f@fmls c3660@last)))) c365c@ls/false) (let ((c3668@t c365a@t)) (let ((c366a@ls/false (c30bb@syntax-dispatch c3668@t '(_ any any)))) (if c366a@ls/false (apply (lambda (c366c@who c366d@expr) (if (c2eb4@id? c366c@who) (c3071@bless (list 'define c366c@who (list 'let (list (list 'v c366d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote c366c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (c319b@syntax-violation '#f '"invalid name" c364c@stx))) c366a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3668@t)))))))))))) (set! c4b73@c307f@trace-define-macro c307f@trace-define-macro) (set! c3081@trace-define-syntax-macro (lambda (c3670@stx) (let ((c3672@t c3670@stx)) (let ((c3674@ls/false (c30bb@syntax-dispatch c3672@t '(_ any any)))) (if c3674@ls/false (apply (lambda (c3676@who c3677@expr) (if (c2eb4@id? c3676@who) (c3071@bless (list 'define-syntax c3676@who (list 'make-traced-macro (list 'quote c3676@who) c3677@expr))) (c319b@syntax-violation '#f '"invalid name" c3670@stx))) c3674@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3672@t)))))) (set! c4b74@c3081@trace-define-syntax-macro c3081@trace-define-syntax-macro) (set! c3083@trace-let/rec-syntax (lambda (c367a@who) (lambda (c367c@stx) (let ((c367e@t c367c@stx)) (let ((c3680@ls/false (c30bb@syntax-dispatch c367e@t '(_ #(each (any any)) any . each-any)))) (if c3680@ls/false (apply (lambda (c3682@lhs* c3683@rhs* c3684@b c3685@b*) (if (c2ebc@valid-bound-ids? c3682@lhs*) (let ((c368a@rhs* (map (lambda (c368c@lhs c368d@rhs) (list 'make-traced-macro (list 'quote c368c@lhs) c368d@rhs)) c3682@lhs* c3683@rhs*))) (c3071@bless (cons c367a@who (cons (map list c3682@lhs* c368a@rhs*) (cons c3684@b c3685@b*))))) (c3075@invalid-fmls-error c367c@stx c3682@lhs*))) c3680@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c367e@t))))))) (set! c4b75@c3083@trace-let/rec-syntax c3083@trace-let/rec-syntax) (set! c3085@trace-let-syntax-macro (c3083@trace-let/rec-syntax 'let-syntax)) (set! c4b76@c3085@trace-let-syntax-macro c3085@trace-let-syntax-macro) (set! c3087@trace-letrec-syntax-macro (c3083@trace-let/rec-syntax 'letrec-syntax)) (set! c4b77@c3087@trace-letrec-syntax-macro c3087@trace-letrec-syntax-macro) (set! c3089@guard-macro (lambda (c3690@x) (letrec* ((c3693@gen-clauses (lambda (c36aa@con c36ab@outerk c36ac@clause*) (letrec* ((c36b1@f (lambda (c36ea@x c36eb@k) (let ((c36ee@t c36ea@x)) (let ((c36f0@ls/false (c30bb@syntax-dispatch c36ee@t '(any #(scheme-id =>) any)))) (if c36f0@ls/false (apply (lambda (c36f2@e c36f3@p) (let ((c36f6@t (gensym))) (list 'let (list (list c36f6@t c36f2@e)) (list 'if c36f6@t (list c36f3@p c36f6@t) c36eb@k)))) c36f0@ls/false) (let ((c36f8@t c36ee@t)) (let ((c36fa@ls/false (c30bb@syntax-dispatch c36f8@t '(any)))) (if c36fa@ls/false (apply (lambda (c36fc@e) (let ((c36fe@t (gensym))) (list 'let (list (list c36fe@t c36fc@e)) (list 'if c36fe@t c36fe@t c36eb@k)))) c36fa@ls/false) (let ((c3700@t c36f8@t)) (let ((c3702@ls/false (c30bb@syntax-dispatch c3700@t '(any any . each-any)))) (if c3702@ls/false (apply (lambda (c3704@e c3705@v c3706@v*) (list 'if c3704@e (cons 'begin (cons c3705@v c3706@v*)) c36eb@k)) c3702@ls/false) (let ((c370a@t c3700@t)) (let ((c370c@ls/false (c30bb@syntax-dispatch c370a@t '_))) (if c370c@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid guard clause" c36ea@x)) c370c@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c370a@t))))))))))))))) (c36b3@f* (lambda (c36c0@x*) (let ((c36c2@t c36c0@x*)) (let ((c36c4@ls/false (c30bb@syntax-dispatch c36c2@t '()))) (if c36c4@ls/false (apply (lambda () (let ((c36c6@g (gensym))) (values (list c36c6@g (list 'lambda '() (list 'raise-continuable c36aa@con))) c36c6@g))) c36c4@ls/false) (let ((c36c8@t c36c2@t)) (let ((c36ca@ls/false (c30bb@syntax-dispatch c36c8@t '((#(scheme-id else) any . each-any))))) (if c36ca@ls/false (apply (lambda (c36cc@e c36cd@e*) (values (cons 'begin (cons c36cc@e c36cd@e*)) '#f)) c36ca@ls/false) (let ((c36d0@t c36c8@t)) (let ((c36d2@ls/false (c30bb@syntax-dispatch c36d0@t '(any . any)))) (if c36d2@ls/false (apply (lambda (c36d4@cls c36d5@cls*) (call-with-values (lambda () (c36b3@f* c36d5@cls*)) (lambda (c36dc@c36d9 c36dd@c36db) (let ((c36e0@g c36dd@c36db) (c36e1@e c36dc@c36d9)) (values (c36b1@f c36d4@cls c36e1@e) c36e0@g))))) c36d2@ls/false) (let ((c36e4@t c36d0@t)) (let ((c36e6@ls/false (c30bb@syntax-dispatch c36e4@t 'any))) (if c36e6@ls/false (apply (lambda (c36e8@others) (c319b@syntax-violation '#f '"invalid guard clause" c36e8@others)) c36e6@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c36e4@t)))))))))))))))) (call-with-values (lambda () (c36b3@f* c36ac@clause*)) (lambda (c36b8@c36b5 c36b9@c36b7) (let ((c36bc@raisek c36b9@c36b7) (c36bd@code c36b8@c36b5)) (if c36bc@raisek (list (list 'call/cc (list 'lambda (list c36bc@raisek) (list c36ab@outerk (list 'lambda '() c36bd@code))))) (list c36ab@outerk (list 'lambda '() c36bd@code)))))))))) (let ((c3694@t c3690@x)) (let ((c3696@ls/false (c30bb@syntax-dispatch c3694@t '(_ (any . each-any) any . each-any)))) (if (and c3696@ls/false (apply (lambda (c3698@con c3699@clause* c369a@b c369b@b*) (c2eb4@id? c3698@con)) c3696@ls/false)) (apply (lambda (c36a0@con c36a1@clause* c36a2@b c36a3@b*) (let ((c36a8@outerk (gensym))) (c3071@bless (list (list 'call/cc (list 'lambda (list c36a8@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list c36a0@con) (c3693@gen-clauses c36a0@con c36a8@outerk c36a1@clause*)) (cons 'lambda (cons '() (cons c36a2@b c36a3@b*))))))))))) c3696@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3694@t))))))) (set! c4b78@c3089@guard-macro c3089@guard-macro) (set! c308b@define-enumeration-macro (lambda (c370e@stx) (letrec* ((c3711@set? (lambda (c372a@x) (or (null? c372a@x) (and (not (memq (car c372a@x) (cdr c372a@x))) (c3711@set? (cdr c372a@x)))))) (c3713@remove-dups (lambda (c3728@ls) (if (null? c3728@ls) '() (cons (car c3728@ls) (c3713@remove-dups (remq (car c3728@ls) (cdr c3728@ls)))))))) (let ((c3714@t c370e@stx)) (let ((c3716@ls/false (c30bb@syntax-dispatch c3714@t '(_ any each-any any)))) (if (and c3716@ls/false (apply (lambda (c3718@name c3719@id* c371a@maker) (and (c2eb4@id? c3718@name) (c2eb4@id? c371a@maker) (for-all c2eb4@id? c3719@id*))) c3716@ls/false)) (apply (lambda (c371e@name c371f@id* c3720@maker) (let ((c3724@name* (c3713@remove-dups (c31a1@syntax->datum c371f@id*))) (c3725@mk (gensym))) (c3071@bless (list 'begin (list 'define c3725@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote c3724@name*)))) (list 'define-syntax c371e@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote c3724@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote c371e@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax c3720@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote c3720@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote c3724@name*)) (cons 'syntax-violation (cons (list 'quote c3720@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons c3725@mk '('(n* ...))))))))))))) c3716@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3714@t))))))) (set! c4b79@c308b@define-enumeration-macro c308b@define-enumeration-macro) (set! c308d@time-macro (lambda (c372c@stx) (let ((c372e@t c372c@stx)) (let ((c3730@ls/false (c30bb@syntax-dispatch c372e@t '(_ any)))) (if c3730@ls/false (apply (lambda (c3732@expr) (c3071@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() c3732@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) c3730@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c372e@t)))))) (set! c4b7a@c308d@time-macro c308d@time-macro) (set! c308f@delay-macro (lambda (c3734@stx) (let ((c3736@t c3734@stx)) (let ((c3738@ls/false (c30bb@syntax-dispatch c3736@t '(_ any)))) (if c3738@ls/false (apply (lambda (c373a@expr) (c3071@bless (list 'make-promise (list 'lambda '() c373a@expr)))) c3738@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3736@t)))))) (set! c4b7b@c308f@delay-macro c308f@delay-macro) (set! c3091@assert-macro (lambda (c373c@stx) (let ((c373e@t c373c@stx)) (let ((c3740@ls/false (c30bb@syntax-dispatch c373e@t '(_ any)))) (if c3740@ls/false (apply (lambda (c3742@expr) (let ((c3744@pos (or (c3193@expression-position c373c@stx) (c3193@expression-position c3742@expr)))) (c3071@bless (list 'let (list (list 'x c3742@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote c3742@expr) (list 'quote c3744@pos))))))) c3740@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c373e@t)))))) (set! c4b7c@c3091@assert-macro c3091@assert-macro) (set! c3093@endianness-macro (lambda (c3746@stx) (let ((c3748@t c3746@stx)) (let ((c374a@ls/false (c30bb@syntax-dispatch c3748@t '(_ any)))) (if c374a@ls/false (apply (lambda (c374c@e) (let ((c374e@t (c31a1@syntax->datum c374c@e))) (if (memv c374e@t '(little)) (c3071@bless ''little) (if (memv c374e@t '(big)) (c3071@bless ''big) (c319b@syntax-violation '#f '"endianness must be big or little" c3746@stx))))) c374a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3748@t)))))) (set! c4b7d@c3093@endianness-macro c3093@endianness-macro) (set! c3095@identifier-syntax-macro (lambda (c3750@stx) (let ((c3752@t c3750@stx)) (let ((c3754@ls/false (c30bb@syntax-dispatch c3752@t '(_ any)))) (if c3754@ls/false (apply (lambda (c3756@expr) (c3071@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax c3756@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax c3756@expr) '((syntax (e* ...)))))))))) c3754@ls/false) (let ((c3758@t c3752@t)) (let ((c375a@ls/false (c30bb@syntax-dispatch c3758@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and c375a@ls/false (apply (lambda (c375c@id1 c375d@expr1 c375e@id2 c375f@expr2 c3760@expr3) (and (c2eb4@id? c375c@id1) (c2eb4@id? c375e@id2) (c2eb4@id? c375f@expr2))) c375a@ls/false)) (apply (lambda (c3766@id1 c3767@expr1 c3768@id2 c3769@expr2 c376a@expr3) (c3071@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax c3767@expr1)) (list (list 'set! 'id c3769@expr2) (list 'syntax c376a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons c3767@expr1 '(e* ...))))))))) c375a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3758@t))))))))) (set! c4b7e@c3095@identifier-syntax-macro c3095@identifier-syntax-macro) (set! c3097@do-macro (lambda (c3770@stx) (letrec* ((c3773@bind (lambda (c378a@x) (let ((c378c@t c378a@x)) (let ((c378e@ls/false (c30bb@syntax-dispatch c378c@t '(any any)))) (if c378e@ls/false (apply (lambda (c3790@x c3791@init) (list c3790@x c3791@init c3790@x)) c378e@ls/false) (let ((c3794@t c378c@t)) (let ((c3796@ls/false (c30bb@syntax-dispatch c3794@t '(any any any)))) (if c3796@ls/false (apply (lambda (c3798@x c3799@init c379a@step) (list c3798@x c3799@init c379a@step)) c3796@ls/false) (let ((c379e@t c3794@t)) (let ((c37a0@ls/false (c30bb@syntax-dispatch c379e@t '_))) (if c37a0@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid binding" c3770@stx)) c37a0@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c379e@t))))))))))))) (let ((c3774@t c3770@stx)) (let ((c3776@ls/false (c30bb@syntax-dispatch c3774@t '(_ each-any (any . each-any) . each-any)))) (if c3776@ls/false (apply (lambda (c3778@binding* c3779@test c377a@expr* c377b@command*) (let ((c3780@t (map c3773@bind c3778@binding*))) (let ((c3782@ls/false (c30bb@syntax-dispatch c3780@t '#(each (any any any))))) (if c3782@ls/false (apply (lambda (c3784@x* c3785@init* c3786@step*) (if (c2ebc@valid-bound-ids? c3784@x*) (c3071@bless (list 'letrec (list (list 'loop (list 'lambda c3784@x* (list 'if c3779@test (cons 'begin (cons '(if #f #f) c377a@expr*)) (cons 'begin (append c377b@command* (list (cons 'loop c3786@step*)))))))) (cons 'loop c3785@init*))) (c319b@syntax-violation '#f '"invalid bindings" c3770@stx))) c3782@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3780@t))))) c3776@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3774@t))))))) (set! c4b7f@c3097@do-macro c3097@do-macro) (set! c3099@let*-macro (lambda (c37a2@stx) (let ((c37a4@t c37a2@stx)) (let ((c37a6@ls/false (c30bb@syntax-dispatch c37a4@t '(_ #(each (any any)) any . each-any)))) (if (and c37a6@ls/false (apply (lambda (c37a8@lhs* c37a9@rhs* c37aa@b c37ab@b*) (for-all c2eb4@id? c37a8@lhs*)) c37a6@ls/false)) (apply (lambda (c37b0@lhs* c37b1@rhs* c37b2@b c37b3@b*) (c3071@bless (let c37ba@f ((c37b8@x* (map list c37b0@lhs* c37b1@rhs*))) (if (null? c37b8@x*) (cons 'let (cons '() (cons c37b2@b c37b3@b*))) (list 'let (list (car c37b8@x*)) (c37ba@f (cdr c37b8@x*))))))) c37a6@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c37a4@t)))))) (set! c4b80@c3099@let*-macro c3099@let*-macro) (set! c309b@or-macro (lambda (c37bc@stx) (let ((c37be@t c37bc@stx)) (let ((c37c0@ls/false (c30bb@syntax-dispatch c37be@t '(_)))) (if c37c0@ls/false (apply (lambda () '#f) c37c0@ls/false) (let ((c37c2@t c37be@t)) (let ((c37c4@ls/false (c30bb@syntax-dispatch c37c2@t '(_ any . each-any)))) (if c37c4@ls/false (apply (lambda (c37c6@e c37c7@e*) (c3071@bless (let c37ce@f ((c37ca@e c37c6@e) (c37cb@e* c37c7@e*)) (if (null? c37cb@e*) (list 'begin '#f c37ca@e) (list 'let (list (list 't c37ca@e)) (list 'if 't 't (c37ce@f (car c37cb@e*) (cdr c37cb@e*)))))))) c37c4@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c37c2@t))))))))) (set! c4b81@c309b@or-macro c309b@or-macro) (set! c309d@and-macro (lambda (c37d0@stx) (let ((c37d2@t c37d0@stx)) (let ((c37d4@ls/false (c30bb@syntax-dispatch c37d2@t '(_)))) (if c37d4@ls/false (apply (lambda () '#t) c37d4@ls/false) (let ((c37d6@t c37d2@t)) (let ((c37d8@ls/false (c30bb@syntax-dispatch c37d6@t '(_ any . each-any)))) (if c37d8@ls/false (apply (lambda (c37da@e c37db@e*) (c3071@bless (let c37e2@f ((c37de@e c37da@e) (c37df@e* c37db@e*)) (if (null? c37df@e*) (list 'begin '#f c37de@e) (cons 'if (cons c37de@e (cons (c37e2@f (car c37df@e*) (cdr c37df@e*)) '(#f)))))))) c37d8@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c37d6@t))))))))) (set! c4b82@c309d@and-macro c309d@and-macro) (set! c309f@cond-macro (lambda (c37e4@stx) (let ((c37e6@t c37e4@stx)) (let ((c37e8@ls/false (c30bb@syntax-dispatch c37e6@t '(_ any . each-any)))) (if c37e8@ls/false (apply (lambda (c37ea@cls c37eb@cls*) (c3071@bless (let c37f2@f ((c37ee@cls c37ea@cls) (c37ef@cls* c37eb@cls*)) (if (null? c37ef@cls*) (let ((c37f4@t c37ee@cls)) (let ((c37f6@ls/false (c30bb@syntax-dispatch c37f4@t '(#(scheme-id else) any . each-any)))) (if c37f6@ls/false (apply (lambda (c37f8@e c37f9@e*) (cons 'begin (cons c37f8@e c37f9@e*))) c37f6@ls/false) (let ((c37fc@t c37f4@t)) (let ((c37fe@ls/false (c30bb@syntax-dispatch c37fc@t '(any #(scheme-id =>) any)))) (if c37fe@ls/false (apply (lambda (c3800@e c3801@p) (list 'let (list (list 't c3800@e)) (list 'if 't (cons c3801@p '(t))))) c37fe@ls/false) (let ((c3804@t c37fc@t)) (let ((c3806@ls/false (c30bb@syntax-dispatch c3804@t '(any)))) (if c3806@ls/false (apply (lambda (c3808@e) (cons 'or (cons c3808@e '((if #f #f))))) c3806@ls/false) (let ((c380a@t c3804@t)) (let ((c380c@ls/false (c30bb@syntax-dispatch c380a@t '(any . each-any)))) (if c380c@ls/false (apply (lambda (c380e@e c380f@e*) (list 'if c380e@e (cons 'begin c380f@e*))) c380c@ls/false) (let ((c3812@t c380a@t)) (let ((c3814@ls/false (c30bb@syntax-dispatch c3812@t '_))) (if c3814@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid last clause" c37e4@stx)) c3814@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3812@t)))))))))))))))) (let ((c3816@t c37ee@cls)) (let ((c3818@ls/false (c30bb@syntax-dispatch c3816@t '(#(scheme-id else) any . each-any)))) (if c3818@ls/false (apply (lambda (c381a@e c381b@e*) (c319b@syntax-violation '#f '"incorrect position of keyword else" c37e4@stx)) c3818@ls/false) (let ((c381e@t c3816@t)) (let ((c3820@ls/false (c30bb@syntax-dispatch c381e@t '(any #(scheme-id =>) any)))) (if c3820@ls/false (apply (lambda (c3822@e c3823@p) (list 'let (list (list 't c3822@e)) (list 'if 't (cons c3823@p '(t)) (c37f2@f (car c37ef@cls*) (cdr c37ef@cls*))))) c3820@ls/false) (let ((c3826@t c381e@t)) (let ((c3828@ls/false (c30bb@syntax-dispatch c3826@t '(any)))) (if c3828@ls/false (apply (lambda (c382a@e) (list 'or c382a@e (c37f2@f (car c37ef@cls*) (cdr c37ef@cls*)))) c3828@ls/false) (let ((c382c@t c3826@t)) (let ((c382e@ls/false (c30bb@syntax-dispatch c382c@t '(any . each-any)))) (if c382e@ls/false (apply (lambda (c3830@e c3831@e*) (list 'if c3830@e (cons 'begin c3831@e*) (c37f2@f (car c37ef@cls*) (cdr c37ef@cls*)))) c382e@ls/false) (let ((c3834@t c382c@t)) (let ((c3836@ls/false (c30bb@syntax-dispatch c3834@t '_))) (if c3836@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid last clause" c37e4@stx)) c3836@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3834@t)))))))))))))))))))) c37e8@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c37e6@t)))))) (set! c4b83@c309f@cond-macro c309f@cond-macro) (set! c30a1@do-include (lambda (c3838@stx c3839@id c383a@filename) (let ((c383e@filename (c2ec8@stx->datum c383a@filename))) (begin (if (not (and (string? c383e@filename) (c2eb4@id? c3839@id))) (c319b@syntax-violation '#f '"invalid syntax" c3838@stx) (void)) (cons (c3071@bless 'begin) (with-input-from-file c383e@filename (lambda () (let c3842@f ((c3840@ls '())) (let ((c3844@x (c29f6@c28c6@read-annotated))) (if (eof-object? c3844@x) (reverse c3840@ls) (c3842@f (cons (c2e94@datum->stx c3839@id c3844@x) c3840@ls)))))))))))) (set! c4b84@c30a1@do-include c30a1@do-include) (set! c30a3@include-macro (lambda (c3846@e) (let ((c3848@t c3846@e)) (let ((c384a@ls/false (c30bb@syntax-dispatch c3848@t '(any any)))) (if c384a@ls/false (apply (lambda (c384c@id c384d@filename) (c30a1@do-include c3846@e c384c@id c384d@filename)) c384a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3848@t)))))) (set! c4b85@c30a3@include-macro c30a3@include-macro) (set! c30a5@include-into-macro (lambda (c3850@e) (let ((c3852@t c3850@e)) (let ((c3854@ls/false (c30bb@syntax-dispatch c3852@t '(_ any any)))) (if c3854@ls/false (apply (lambda (c3856@id c3857@filename) (c30a1@do-include c3850@e c3856@id c3857@filename)) c3854@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3852@t)))))) (set! c4b86@c30a5@include-into-macro c30a5@include-into-macro) (set! c30a7@syntax-rules-macro (lambda (c385a@e) (let ((c385c@t c385a@e)) (let ((c385e@ls/false (c30bb@syntax-dispatch c385c@t '(_ each-any . #(each (any any)))))) (if c385e@ls/false (apply (lambda (c3860@lits c3861@pat* c3862@tmp*) (begin (c30c1@verify-literals c3860@lits c385a@e) (c3071@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons c3860@lits (map (lambda (c3866@pat c3867@tmp) (let ((c386a@t c3866@pat)) (let ((c386c@ls/false (c30bb@syntax-dispatch c386a@t '(_ . any)))) (if c386c@ls/false (apply (lambda (c386e@rest) (list (cons 'g c386e@rest) (list 'syntax c3867@tmp))) c386c@ls/false) (let ((c3870@t c386a@t)) (let ((c3872@ls/false (c30bb@syntax-dispatch c3870@t '_))) (if c3872@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid syntax-rules pattern" c385a@e c3866@pat)) c3872@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3870@t)))))))) c3861@pat* c3862@tmp*)))))))) c385e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c385c@t)))))) (set! c4b87@c30a7@syntax-rules-macro c30a7@syntax-rules-macro) (set! c30a9@quasiquote-macro (letrec* ((c3875@datum (lambda (c3976@x) (list (c3043@scheme-stx 'quote) (c2e9c@mkstx c3976@x '() '() '())))) (c3891@quasicons* (lambda (c396e@x c396f@y) (let c3974@f ((c3972@x c396e@x)) (if (null? c3972@x) c396f@y (c3893@quasicons (car c3972@x) (c3974@f (cdr c3972@x))))))) (c3893@quasicons (lambda (c3948@x c3949@y) (let ((c394c@t c3949@y)) (let ((c394e@ls/false (c30bb@syntax-dispatch c394c@t '(#(scheme-id quote) any)))) (if c394e@ls/false (apply (lambda (c3950@dy) (let ((c3952@t c3948@x)) (let ((c3954@ls/false (c30bb@syntax-dispatch c3952@t '(#(scheme-id quote) any)))) (if c3954@ls/false (apply (lambda (c3956@dx) (list (c3043@scheme-stx 'quote) (cons c3956@dx c3950@dy))) c3954@ls/false) (let ((c3958@t c3952@t)) (let ((c395a@ls/false (c30bb@syntax-dispatch c3958@t '_))) (if c395a@ls/false (apply (lambda () (let ((c395c@t c3950@dy)) (let ((c395e@ls/false (c30bb@syntax-dispatch c395c@t '()))) (if c395e@ls/false (apply (lambda () (list (c3043@scheme-stx 'list) c3948@x)) c395e@ls/false) (let ((c3960@t c395c@t)) (let ((c3962@ls/false (c30bb@syntax-dispatch c3960@t '_))) (if c3962@ls/false (apply (lambda () (list (c3043@scheme-stx 'cons) c3948@x c3949@y)) c3962@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3960@t)))))))) c395a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3958@t)))))))) c394e@ls/false) (let ((c3964@t c394c@t)) (let ((c3966@ls/false (c30bb@syntax-dispatch c3964@t '(#(scheme-id list) . each-any)))) (if c3966@ls/false (apply (lambda (c3968@stuff) (cons* (c3043@scheme-stx 'list) c3948@x c3968@stuff)) c3966@ls/false) (let ((c396a@t c3964@t)) (let ((c396c@ls/false (c30bb@syntax-dispatch c396a@t '_))) (if c396c@ls/false (apply (lambda () (list (c3043@scheme-stx 'cons) c3948@x c3949@y)) c396c@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c396a@t)))))))))))) (c3895@quasiappend (lambda (c392e@x c392f@y) (let ((c3932@ls (let c3936@f ((c3934@x c392e@x)) (if (null? c3934@x) (let ((c3938@t c392f@y)) (let ((c393a@ls/false (c30bb@syntax-dispatch c3938@t '(#(scheme-id quote) ())))) (if c393a@ls/false (apply (lambda () '()) c393a@ls/false) (let ((c393c@t c3938@t)) (let ((c393e@ls/false (c30bb@syntax-dispatch c393c@t '_))) (if c393e@ls/false (apply (lambda () (list c392f@y)) c393e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c393c@t))))))) (let ((c3940@t (car c3934@x))) (let ((c3942@ls/false (c30bb@syntax-dispatch c3940@t '(#(scheme-id quote) ())))) (if c3942@ls/false (apply (lambda () (c3936@f (cdr c3934@x))) c3942@ls/false) (let ((c3944@t c3940@t)) (let ((c3946@ls/false (c30bb@syntax-dispatch c3944@t '_))) (if c3946@ls/false (apply (lambda () (cons (car c3934@x) (c3936@f (cdr c3934@x)))) c3946@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3944@t))))))))))) (if (null? c3932@ls) (list (c3043@scheme-stx 'quote) '()) (if (null? (cdr c3932@ls)) (car c3932@ls) (cons* (c3043@scheme-stx 'append) c3932@ls)))))) (c3897@quasivector (lambda (c38fc@x) (let ((c38fe@pat-x c38fc@x)) (let ((c3900@t c38fe@pat-x)) (let ((c3902@ls/false (c30bb@syntax-dispatch c3900@t '(#(scheme-id quote) each-any)))) (if c3902@ls/false (apply (lambda (c3904@x*) (list (c3043@scheme-stx 'quote) (list->vector c3904@x*))) c3902@ls/false) (let ((c3906@t c3900@t)) (let ((c3908@ls/false (c30bb@syntax-dispatch c3906@t '_))) (if c3908@ls/false (apply (lambda () (let c3910@f ((c390a@x c38fc@x) (c390b@k (lambda (c390e@ls) (cons* (c3043@scheme-stx 'vector) c390e@ls)))) (let ((c3912@t c390a@x)) (let ((c3914@ls/false (c30bb@syntax-dispatch c3912@t '(#(scheme-id quote) each-any)))) (if c3914@ls/false (apply (lambda (c3916@x*) (c390b@k (map (lambda (c3918@x) (list (c3043@scheme-stx 'quote) c3918@x)) c3916@x*))) c3914@ls/false) (let ((c391a@t c3912@t)) (let ((c391c@ls/false (c30bb@syntax-dispatch c391a@t '(#(scheme-id list) . each-any)))) (if c391c@ls/false (apply (lambda (c391e@x*) (c390b@k c391e@x*)) c391c@ls/false) (let ((c3920@t c391a@t)) (let ((c3922@ls/false (c30bb@syntax-dispatch c3920@t '(#(scheme-id cons) any any)))) (if c3922@ls/false (apply (lambda (c3924@x c3925@y) (c3910@f c3925@y (lambda (c3928@ls) (c390b@k (cons c3924@x c3928@ls))))) c3922@ls/false) (let ((c392a@t c3920@t)) (let ((c392c@ls/false (c30bb@syntax-dispatch c392a@t '_))) (if c392c@ls/false (apply (lambda () (list (c3043@scheme-stx 'list->vector) c38fe@pat-x)) c392c@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c392a@t))))))))))))))) c3908@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3906@t)))))))))) (c3899@vquasi (lambda (c38da@p c38db@lev) (let ((c38de@t c38da@p)) (let ((c38e0@ls/false (c30bb@syntax-dispatch c38de@t '(any . any)))) (if c38e0@ls/false (apply (lambda (c38e2@p c38e3@q) (let ((c38e6@t c38e2@p)) (let ((c38e8@ls/false (c30bb@syntax-dispatch c38e6@t '(#(scheme-id unquote) . each-any)))) (if c38e8@ls/false (apply (lambda (c38ea@p) (if (= c38db@lev '0) (c3891@quasicons* c38ea@p (c3899@vquasi c38e3@q c38db@lev)) (c3893@quasicons (c3893@quasicons (c3875@datum 'unquote) (c389b@quasi c38ea@p (- c38db@lev '1))) (c3899@vquasi c38e3@q c38db@lev)))) c38e8@ls/false) (let ((c38ec@t c38e6@t)) (let ((c38ee@ls/false (c30bb@syntax-dispatch c38ec@t '(#(scheme-id unquote-splicing) . each-any)))) (if c38ee@ls/false (apply (lambda (c38f0@p) (if (= c38db@lev '0) (c3895@quasiappend c38f0@p (c3899@vquasi c38e3@q c38db@lev)) (c3893@quasicons (c3893@quasicons (c3875@datum 'unquote-splicing) (c389b@quasi c38f0@p (- c38db@lev '1))) (c3899@vquasi c38e3@q c38db@lev)))) c38ee@ls/false) (let ((c38f2@t c38ec@t)) (let ((c38f4@ls/false (c30bb@syntax-dispatch c38f2@t 'any))) (if c38f4@ls/false (apply (lambda (c38f6@p) (c3893@quasicons (c389b@quasi c38f6@p c38db@lev) (c3899@vquasi c38e3@q c38db@lev))) c38f4@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c38f2@t))))))))))) c38e0@ls/false) (let ((c38f8@t c38de@t)) (let ((c38fa@ls/false (c30bb@syntax-dispatch c38f8@t '()))) (if c38fa@ls/false (apply (lambda () (list (c3043@scheme-stx 'quote) '())) c38fa@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c38f8@t))))))))) (c389b@quasi (lambda (c38a4@p c38a5@lev) (let ((c38a8@t c38a4@p)) (let ((c38aa@ls/false (c30bb@syntax-dispatch c38a8@t '(#(scheme-id unquote) any)))) (if c38aa@ls/false (apply (lambda (c38ac@p) (if (= c38a5@lev '0) c38ac@p (c3893@quasicons (c3875@datum 'unquote) (c389b@quasi (list c38ac@p) (- c38a5@lev '1))))) c38aa@ls/false) (let ((c38ae@t c38a8@t)) (let ((c38b0@ls/false (c30bb@syntax-dispatch c38ae@t '((#(scheme-id unquote) . each-any) . any)))) (if c38b0@ls/false (apply (lambda (c38b2@p c38b3@q) (if (= c38a5@lev '0) (c3891@quasicons* c38b2@p (c389b@quasi c38b3@q c38a5@lev)) (c3893@quasicons (c3893@quasicons (c3875@datum 'unquote) (c389b@quasi c38b2@p (- c38a5@lev '1))) (c389b@quasi c38b3@q c38a5@lev)))) c38b0@ls/false) (let ((c38b6@t c38ae@t)) (let ((c38b8@ls/false (c30bb@syntax-dispatch c38b6@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if c38b8@ls/false (apply (lambda (c38ba@p c38bb@q) (if (= c38a5@lev '0) (c3895@quasiappend c38ba@p (c389b@quasi c38bb@q c38a5@lev)) (c3893@quasicons (c3893@quasicons (c3875@datum 'unquote-splicing) (c389b@quasi c38ba@p (- c38a5@lev '1))) (c389b@quasi c38bb@q c38a5@lev)))) c38b8@ls/false) (let ((c38be@t c38b6@t)) (let ((c38c0@ls/false (c30bb@syntax-dispatch c38be@t '(#(scheme-id quasiquote) any)))) (if c38c0@ls/false (apply (lambda (c38c2@p) (c3893@quasicons (c3875@datum 'quasiquote) (c389b@quasi (list c38c2@p) (+ c38a5@lev '1)))) c38c0@ls/false) (let ((c38c4@t c38be@t)) (let ((c38c6@ls/false (c30bb@syntax-dispatch c38c4@t '(any . any)))) (if c38c6@ls/false (apply (lambda (c38c8@p c38c9@q) (c3893@quasicons (c389b@quasi c38c8@p c38a5@lev) (c389b@quasi c38c9@q c38a5@lev))) c38c6@ls/false) (let ((c38cc@t c38c4@t)) (let ((c38ce@ls/false (c30bb@syntax-dispatch c38cc@t '#(vector each-any)))) (if (and c38ce@ls/false (apply (lambda (c38d0@x) (not (c2e80@stx? c38d0@x))) c38ce@ls/false)) (apply (lambda (c38d2@x) (c3897@quasivector (c3899@vquasi c38d2@x c38a5@lev))) c38ce@ls/false) (let ((c38d4@t c38cc@t)) (let ((c38d6@ls/false (c30bb@syntax-dispatch c38d4@t 'any))) (if c38d6@ls/false (apply (lambda (c38d8@p) (list (c3043@scheme-stx 'quote) c38d8@p)) c38d6@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c38d4@t))))))))))))))))))))))))) (lambda (c389c@x) (let ((c389e@t c389c@x)) (let ((c38a0@ls/false (c30bb@syntax-dispatch c389e@t '(_ any)))) (if c38a0@ls/false (apply (lambda (c38a2@e) (c389b@quasi c38a2@e '0)) c38a0@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c389e@t))))))) (set! c4b88@c30a9@quasiquote-macro c30a9@quasiquote-macro) (set! c30ab@quasisyntax-macro (letrec* ((c3979@quasi (lambda (c3994@p c3995@lev) (let ((c3998@t c3994@p)) (let ((c399a@ls/false (c30bb@syntax-dispatch c3998@t '(#(scheme-id unsyntax) any)))) (if c399a@ls/false (apply (lambda (c399c@p) (if (= c3995@lev '0) (let ((c399e@g (gensym))) (values (list c399e@g) (list c399c@p) c399e@g)) (call-with-values (lambda () (c3979@quasi c399c@p (- c3995@lev '1))) (lambda (c39a6@c39a1 c39a7@c39a3 c39a8@c39a5) (let ((c39ac@p c39a8@c39a5) (c39ad@rhs* c39a7@c39a3) (c39ae@lhs* c39a6@c39a1)) (values c39ae@lhs* c39ad@rhs* (list 'unsyntax c39ac@p))))))) c399a@ls/false) (let ((c39b2@t c3998@t)) (let ((c39b4@ls/false (c30bb@syntax-dispatch c39b2@t '#(scheme-id unsyntax)))) (if (and c39b4@ls/false (apply (lambda () (= c3995@lev '0)) c39b4@ls/false)) (apply (lambda () (c319b@syntax-violation '#f '"incorrect use of unsyntax" c3994@p)) c39b4@ls/false) (let ((c39b6@t c39b2@t)) (let ((c39b8@ls/false (c30bb@syntax-dispatch c39b6@t '((#(scheme-id unsyntax) . each-any) . any)))) (if c39b8@ls/false (apply (lambda (c39ba@p* c39bb@q) (call-with-values (lambda () (c3979@quasi c39bb@q c3995@lev)) (lambda (c39c4@c39bf c39c5@c39c1 c39c6@c39c3) (let ((c39ca@q c39c6@c39c3) (c39cb@rhs* c39c5@c39c1) (c39cc@lhs* c39c4@c39bf)) (if (= c3995@lev '0) (let ((c39d0@g* (map (lambda (c39d2@x) (gensym)) c39ba@p*))) (values (append c39d0@g* c39cc@lhs*) (append c39ba@p* c39cb@rhs*) (append c39d0@g* c39ca@q))) (call-with-values (lambda () (c3979@quasi c39ba@p* (- c3995@lev '1))) (lambda (c39da@c39d5 c39db@c39d7 c39dc@c39d9) (let ((c39e0@p* c39dc@c39d9) (c39e1@rhs2* c39db@c39d7) (c39e2@lhs2* c39da@c39d5)) (values (append c39e2@lhs2* c39cc@lhs*) (append c39e1@rhs2* c39cb@rhs*) (cons (cons 'unsyntax c39e0@p*) c39ca@q)))))))))) c39b8@ls/false) (let ((c39e6@t c39b6@t)) (let ((c39e8@ls/false (c30bb@syntax-dispatch c39e6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if c39e8@ls/false (apply (lambda (c39ea@p* c39eb@q) (call-with-values (lambda () (c3979@quasi c39eb@q c3995@lev)) (lambda (c39f4@c39ef c39f5@c39f1 c39f6@c39f3) (let ((c39fa@q c39f6@c39f3) (c39fb@rhs* c39f5@c39f1) (c39fc@lhs* c39f4@c39ef)) (if (= c3995@lev '0) (let ((c3a00@g* (map (lambda (c3a02@x) (gensym)) c39ea@p*))) (values (append (map (lambda (c3a04@g) (cons c3a04@g '(...))) c3a00@g*) c39fc@lhs*) (append c39ea@p* c39fb@rhs*) (append (apply append (map (lambda (c3a06@g) (cons c3a06@g '(...))) c3a00@g*)) c39fa@q))) (call-with-values (lambda () (c3979@quasi c39ea@p* (- c3995@lev '1))) (lambda (c3a0e@c3a09 c3a0f@c3a0b c3a10@c3a0d) (let ((c3a14@p* c3a10@c3a0d) (c3a15@rhs2* c3a0f@c3a0b) (c3a16@lhs2* c3a0e@c3a09)) (values (append c3a16@lhs2* c39fc@lhs*) (append c3a15@rhs2* c39fb@rhs*) (cons (cons 'unsyntax-splicing c3a14@p*) c39fa@q)))))))))) c39e8@ls/false) (let ((c3a1a@t c39e6@t)) (let ((c3a1c@ls/false (c30bb@syntax-dispatch c3a1a@t '#(scheme-id unsyntax-splicing)))) (if (and c3a1c@ls/false (apply (lambda () (= c3995@lev '0)) c3a1c@ls/false)) (apply (lambda () (c319b@syntax-violation '#f '"incorrect use of unsyntax-splicing" c3994@p)) c3a1c@ls/false) (let ((c3a1e@t c3a1a@t)) (let ((c3a20@ls/false (c30bb@syntax-dispatch c3a1e@t '(#(scheme-id quasisyntax) any)))) (if c3a20@ls/false (apply (lambda (c3a22@p) (call-with-values (lambda () (c3979@quasi c3a22@p (+ c3995@lev '1))) (lambda (c3a2a@c3a25 c3a2b@c3a27 c3a2c@c3a29) (let ((c3a30@p c3a2c@c3a29) (c3a31@rhs* c3a2b@c3a27) (c3a32@lhs* c3a2a@c3a25)) (values c3a32@lhs* c3a31@rhs* (list 'quasisyntax c3a30@p)))))) c3a20@ls/false) (let ((c3a36@t c3a1e@t)) (let ((c3a38@ls/false (c30bb@syntax-dispatch c3a36@t '(any . any)))) (if c3a38@ls/false (apply (lambda (c3a3a@p c3a3b@q) (call-with-values (lambda () (c3979@quasi c3a3a@p c3995@lev)) (lambda (c3a4a@c3a3f c3a4b@c3a41 c3a4c@c3a43) (call-with-values (lambda () (c3979@quasi c3a3b@q c3995@lev)) (lambda (c3a50@c3a45 c3a51@c3a47 c3a52@c3a49) (let ((c3a56@q c3a52@c3a49) (c3a57@rhs2* c3a51@c3a47) (c3a58@lhs2* c3a50@c3a45) (c3a59@p c3a4c@c3a43) (c3a5a@rhs* c3a4b@c3a41) (c3a5b@lhs* c3a4a@c3a3f)) (values (append c3a58@lhs2* c3a5b@lhs*) (append c3a57@rhs2* c3a5a@rhs*) (cons c3a59@p c3a56@q)))))))) c3a38@ls/false) (let ((c3a62@t c3a36@t)) (let ((c3a64@ls/false (c30bb@syntax-dispatch c3a62@t '#(vector each-any)))) (if c3a64@ls/false (apply (lambda (c3a66@x*) (call-with-values (lambda () (c3979@quasi c3a66@x* c3995@lev)) (lambda (c3a6e@c3a69 c3a6f@c3a6b c3a70@c3a6d) (let ((c3a74@x* c3a70@c3a6d) (c3a75@rhs* c3a6f@c3a6b) (c3a76@lhs* c3a6e@c3a69)) (values c3a76@lhs* c3a75@rhs* (list->vector c3a74@x*)))))) c3a64@ls/false) (let ((c3a7a@t c3a62@t)) (let ((c3a7c@ls/false (c30bb@syntax-dispatch c3a7a@t '_))) (if c3a7c@ls/false (apply (lambda () (values '() '() c3994@p)) c3a7c@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3a7a@t))))))))))))))))))))))))))))))) (lambda (c397a@x) (let ((c397c@t c397a@x)) (let ((c397e@ls/false (c30bb@syntax-dispatch c397c@t '(_ any)))) (if c397e@ls/false (apply (lambda (c3980@e) (call-with-values (lambda () (c3979@quasi c3980@e '0)) (lambda (c3988@c3983 c3989@c3985 c398a@c3987) (let ((c398e@v c398a@c3987) (c398f@rhs* c3989@c3985) (c3990@lhs* c3988@c3983)) (c3071@bless (list 'syntax-case (cons 'list c398f@rhs*) '() (list c3990@lhs* (list 'syntax c398e@v)))))))) c397e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c397c@t))))))) (set! c4b89@c30ab@quasisyntax-macro c30ab@quasisyntax-macro) (set! c30ad@define-struct-macro (lambda (c3a7e@stx) (c319b@syntax-violation '#f '"define-struct not supported" c3a7e@stx))) (set! c4b8a@c30ad@define-struct-macro c30ad@define-struct-macro) (set! c30af@define-record-type-macro (lambda (c3a80@x) (letrec* ((c3a83@id (lambda (c3c76@ctxt . c3c78@str*) (c319f@datum->syntax c3c76@ctxt (string->symbol (apply string-append (map (lambda (c3c7a@x) (if (symbol? c3c7a@x) (symbol->string c3c7a@x) (if (string? c3c7a@x) c3c7a@x (assertion-violation 'define-record-type '"BUG")))) c3c78@str*)))))) (c3a85@get-record-name (lambda (c3c64@spec) (let ((c3c66@t c3c64@spec)) (let ((c3c68@ls/false (c30bb@syntax-dispatch c3c66@t '(any any any)))) (if c3c68@ls/false (apply (lambda (c3c6a@foo c3c6b@make-foo c3c6c@foo?) c3c6a@foo) c3c68@ls/false) (let ((c3c70@t c3c66@t)) (let ((c3c72@ls/false (c30bb@syntax-dispatch c3c70@t 'any))) (if c3c72@ls/false (apply (lambda (c3c74@foo) c3c74@foo) c3c72@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3c70@t))))))))) (c3a87@get-record-constructor-name (lambda (c3c50@spec) (let ((c3c52@t c3c50@spec)) (let ((c3c54@ls/false (c30bb@syntax-dispatch c3c52@t '(any any any)))) (if c3c54@ls/false (apply (lambda (c3c56@foo c3c57@make-foo c3c58@foo?) c3c57@make-foo) c3c54@ls/false) (let ((c3c5c@t c3c52@t)) (let ((c3c5e@ls/false (c30bb@syntax-dispatch c3c5c@t 'any))) (if (and c3c5e@ls/false (apply (lambda (c3c60@foo) (c2eb4@id? c3c60@foo)) c3c5e@ls/false)) (apply (lambda (c3c62@foo) (c3a83@id c3c62@foo '"make-" (c2ec8@stx->datum c3c62@foo))) c3c5e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3c5c@t))))))))) (c3a89@get-record-predicate-name (lambda (c3c3c@spec) (let ((c3c3e@t c3c3c@spec)) (let ((c3c40@ls/false (c30bb@syntax-dispatch c3c3e@t '(any any any)))) (if c3c40@ls/false (apply (lambda (c3c42@foo c3c43@make-foo c3c44@foo?) c3c44@foo?) c3c40@ls/false) (let ((c3c48@t c3c3e@t)) (let ((c3c4a@ls/false (c30bb@syntax-dispatch c3c48@t 'any))) (if (and c3c4a@ls/false (apply (lambda (c3c4c@foo) (c2eb4@id? c3c4c@foo)) c3c4a@ls/false)) (apply (lambda (c3c4e@foo) (c3a83@id c3c4e@foo (c2ec8@stx->datum c3c4e@foo) '"?")) c3c4a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3c48@t))))))))) (c3a8b@get-clause (lambda (c3c2a@id c3c2b@ls) (let ((c3c2e@t c3c2b@ls)) (let ((c3c30@ls/false (c30bb@syntax-dispatch c3c2e@t '()))) (if c3c30@ls/false (apply (lambda () '#f) c3c30@ls/false) (let ((c3c32@t c3c2e@t)) (let ((c3c34@ls/false (c30bb@syntax-dispatch c3c32@t '((any . any) . any)))) (if c3c34@ls/false (apply (lambda (c3c36@x c3c37@rest c3c38@ls) (if (c2eba@free-id=? (c3071@bless c3c2a@id) c3c36@x) (cons c3c36@x c3c37@rest) (c3a8b@get-clause c3c2a@id c3c38@ls))) c3c34@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3c32@t))))))))) (c3a8d@foo-rtd-code (lambda (c3bd8@name c3bd9@clause* c3bda@parent-rtd-code) (letrec* ((c3bdf@convert-field-spec* (lambda (c3c10@ls) (list->vector (map (lambda (c3c12@x) (let ((c3c14@t c3c12@x)) (let ((c3c16@ls/false (c30bb@syntax-dispatch c3c14@t '(#(scheme-id mutable) any . any)))) (if c3c16@ls/false (apply (lambda (c3c18@name c3c19@rest) (list 'mutable c3c18@name)) c3c16@ls/false) (let ((c3c1c@t c3c14@t)) (let ((c3c1e@ls/false (c30bb@syntax-dispatch c3c1c@t '(#(scheme-id immutable) any . any)))) (if c3c1e@ls/false (apply (lambda (c3c20@name c3c21@rest) (list 'immutable c3c20@name)) c3c1e@ls/false) (let ((c3c24@t c3c1c@t)) (let ((c3c26@ls/false (c30bb@syntax-dispatch c3c24@t 'any))) (if c3c26@ls/false (apply (lambda (c3c28@name) (list 'immutable c3c28@name)) c3c26@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3c24@t))))))))))) c3c10@ls))))) (let ((c3be0@uid-code (let ((c3be8@t (c3a8b@get-clause 'nongenerative c3bd9@clause*))) (let ((c3bea@ls/false (c30bb@syntax-dispatch c3be8@t '(_)))) (if c3bea@ls/false (apply (lambda () (list 'quote (gensym))) c3bea@ls/false) (let ((c3bec@t c3be8@t)) (let ((c3bee@ls/false (c30bb@syntax-dispatch c3bec@t '(_ any)))) (if c3bee@ls/false (apply (lambda (c3bf0@uid) (list 'quote c3bf0@uid)) c3bee@ls/false) (let ((c3bf2@t c3bec@t)) (let ((c3bf4@ls/false (c30bb@syntax-dispatch c3bf2@t '_))) (if c3bf4@ls/false (apply (lambda () '#f) c3bf4@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3bf2@t))))))))))) (c3be1@sealed? (let ((c3bf6@t (c3a8b@get-clause 'sealed c3bd9@clause*))) (let ((c3bf8@ls/false (c30bb@syntax-dispatch c3bf6@t '(_ #(atom #t))))) (if c3bf8@ls/false (apply (lambda () '#t) c3bf8@ls/false) (let ((c3bfa@t c3bf6@t)) (let ((c3bfc@ls/false (c30bb@syntax-dispatch c3bfa@t '_))) (if c3bfc@ls/false (apply (lambda () '#f) c3bfc@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3bfa@t)))))))) (c3be2@opaque? (let ((c3bfe@t (c3a8b@get-clause 'opaque c3bd9@clause*))) (let ((c3c00@ls/false (c30bb@syntax-dispatch c3bfe@t '(_ #(atom #t))))) (if c3c00@ls/false (apply (lambda () '#t) c3c00@ls/false) (let ((c3c02@t c3bfe@t)) (let ((c3c04@ls/false (c30bb@syntax-dispatch c3c02@t '_))) (if c3c04@ls/false (apply (lambda () '#f) c3c04@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3c02@t)))))))) (c3be3@fields (let ((c3c06@t (c3a8b@get-clause 'fields c3bd9@clause*))) (let ((c3c08@ls/false (c30bb@syntax-dispatch c3c06@t '(_ . each-any)))) (if c3c08@ls/false (apply (lambda (c3c0a@field-spec*) (list 'quote (c3bdf@convert-field-spec* c3c0a@field-spec*))) c3c08@ls/false) (let ((c3c0c@t c3c06@t)) (let ((c3c0e@ls/false (c30bb@syntax-dispatch c3c0c@t '_))) (if c3c0e@ls/false (apply (lambda () ''#()) c3c0e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3c0c@t))))))))) (c3071@bless (list 'make-record-type-descriptor (list 'quote c3bd8@name) c3bda@parent-rtd-code c3be0@uid-code c3be1@sealed? c3be2@opaque? c3be3@fields)))))) (c3a8f@parent-rtd-code (lambda (c3bc0@clause*) (let ((c3bc2@t (c3a8b@get-clause 'parent c3bc0@clause*))) (let ((c3bc4@ls/false (c30bb@syntax-dispatch c3bc2@t '(_ any)))) (if c3bc4@ls/false (apply (lambda (c3bc6@name) (list 'record-type-descriptor c3bc6@name)) c3bc4@ls/false) (let ((c3bc8@t c3bc2@t)) (let ((c3bca@ls/false (c30bb@syntax-dispatch c3bc8@t '#(atom #f)))) (if c3bca@ls/false (apply (lambda () (let ((c3bcc@t (c3a8b@get-clause 'parent-rtd c3bc0@clause*))) (let ((c3bce@ls/false (c30bb@syntax-dispatch c3bcc@t '(_ any any)))) (if c3bce@ls/false (apply (lambda (c3bd0@rtd c3bd1@rcd) c3bd0@rtd) c3bce@ls/false) (let ((c3bd4@t c3bcc@t)) (let ((c3bd6@ls/false (c30bb@syntax-dispatch c3bd4@t '#(atom #f)))) (if c3bd6@ls/false (apply (lambda () '#f) c3bd6@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3bd4@t)))))))) c3bca@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3bc8@t))))))))) (c3a91@parent-rcd-code (lambda (c3ba8@clause*) (let ((c3baa@t (c3a8b@get-clause 'parent c3ba8@clause*))) (let ((c3bac@ls/false (c30bb@syntax-dispatch c3baa@t '(_ any)))) (if c3bac@ls/false (apply (lambda (c3bae@name) (list 'record-constructor-descriptor c3bae@name)) c3bac@ls/false) (let ((c3bb0@t c3baa@t)) (let ((c3bb2@ls/false (c30bb@syntax-dispatch c3bb0@t '#(atom #f)))) (if c3bb2@ls/false (apply (lambda () (let ((c3bb4@t (c3a8b@get-clause 'parent-rtd c3ba8@clause*))) (let ((c3bb6@ls/false (c30bb@syntax-dispatch c3bb4@t '(_ any any)))) (if c3bb6@ls/false (apply (lambda (c3bb8@rtd c3bb9@rcd) c3bb9@rcd) c3bb6@ls/false) (let ((c3bbc@t c3bb4@t)) (let ((c3bbe@ls/false (c30bb@syntax-dispatch c3bbc@t '#(atom #f)))) (if c3bbe@ls/false (apply (lambda () '#f) c3bbe@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3bbc@t)))))))) c3bb2@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3bb0@t))))))))) (c3a93@foo-rcd-code (lambda (c3ba0@clause* c3ba1@foo-rtd c3ba2@protocol c3ba3@parent-rcd-code) (list 'make-record-constructor-descriptor c3ba1@foo-rtd c3ba3@parent-rcd-code c3ba2@protocol))) (c3a95@get-protocol-code (lambda (c3b94@clause*) (let ((c3b96@t (c3a8b@get-clause 'protocol c3b94@clause*))) (let ((c3b98@ls/false (c30bb@syntax-dispatch c3b96@t '(_ any)))) (if c3b98@ls/false (apply (lambda (c3b9a@expr) c3b9a@expr) c3b98@ls/false) (let ((c3b9c@t c3b96@t)) (let ((c3b9e@ls/false (c30bb@syntax-dispatch c3b9c@t '_))) (if c3b9e@ls/false (apply (lambda () '#f) c3b9e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3b9c@t))))))))) (c3a97@get-fields (lambda (c3b82@clause*) (let ((c3b84@t c3b82@clause*)) (let ((c3b86@ls/false (c30bb@syntax-dispatch c3b84@t '()))) (if c3b86@ls/false (apply (lambda () '()) c3b86@ls/false) (let ((c3b88@t c3b84@t)) (let ((c3b8a@ls/false (c30bb@syntax-dispatch c3b88@t '((#(scheme-id fields) . each-any) . _)))) (if c3b8a@ls/false (apply (lambda (c3b8c@f*) c3b8c@f*) c3b8a@ls/false) (let ((c3b8e@t c3b88@t)) (let ((c3b90@ls/false (c30bb@syntax-dispatch c3b8e@t '(_ . any)))) (if c3b90@ls/false (apply (lambda (c3b92@rest) (c3a97@get-fields c3b92@rest)) c3b90@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3b8e@t)))))))))))) (c3a99@get-mutator-indices (lambda (c3b6a@fields) (let c3b70@f ((c3b6c@fields c3b6a@fields) (c3b6d@i '0)) (let ((c3b72@t c3b6c@fields)) (let ((c3b74@ls/false (c30bb@syntax-dispatch c3b72@t '()))) (if c3b74@ls/false (apply (lambda () '()) c3b74@ls/false) (let ((c3b76@t c3b72@t)) (let ((c3b78@ls/false (c30bb@syntax-dispatch c3b76@t '((#(scheme-id mutable) . _) . any)))) (if c3b78@ls/false (apply (lambda (c3b7a@rest) (cons c3b6d@i (c3b70@f c3b7a@rest (+ c3b6d@i '1)))) c3b78@ls/false) (let ((c3b7c@t c3b76@t)) (let ((c3b7e@ls/false (c30bb@syntax-dispatch c3b7c@t '(_ . any)))) (if c3b7e@ls/false (apply (lambda (c3b80@rest) (c3b70@f c3b80@rest (+ c3b6d@i '1))) c3b7e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3b7c@t))))))))))))) (c3a9b@get-mutators (lambda (c3b40@foo c3b41@fields) (letrec* ((c3b45@gen-name (lambda (c3b68@x) (c319f@datum->syntax c3b40@foo (string->symbol (string-append (symbol->string (c31a1@syntax->datum c3b40@foo)) '"-" (symbol->string (c31a1@syntax->datum c3b68@x)) '"-set!")))))) (let c3b48@f ((c3b46@fields c3b41@fields)) (let ((c3b4a@t c3b46@fields)) (let ((c3b4c@ls/false (c30bb@syntax-dispatch c3b4a@t '()))) (if c3b4c@ls/false (apply (lambda () '()) c3b4c@ls/false) (let ((c3b4e@t c3b4a@t)) (let ((c3b50@ls/false (c30bb@syntax-dispatch c3b4e@t '((#(scheme-id mutable) any any any) . any)))) (if c3b50@ls/false (apply (lambda (c3b52@name c3b53@accessor c3b54@mutator c3b55@rest) (cons c3b54@mutator (c3b48@f c3b55@rest))) c3b50@ls/false) (let ((c3b5a@t c3b4e@t)) (let ((c3b5c@ls/false (c30bb@syntax-dispatch c3b5a@t '((#(scheme-id mutable) any) . any)))) (if c3b5c@ls/false (apply (lambda (c3b5e@name c3b5f@rest) (cons (c3b45@gen-name c3b5e@name) (c3b48@f c3b5f@rest))) c3b5c@ls/false) (let ((c3b62@t c3b5a@t)) (let ((c3b64@ls/false (c30bb@syntax-dispatch c3b62@t '(_ . any)))) (if c3b64@ls/false (apply (lambda (c3b66@rest) (c3b48@f c3b66@rest)) c3b64@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3b62@t))))))))))))))))) (c3a9d@get-accessors (lambda (c3afc@foo c3afd@fields) (letrec* ((c3b01@gen-name (lambda (c3b3e@x) (c319f@datum->syntax c3afc@foo (string->symbol (string-append (symbol->string (c31a1@syntax->datum c3afc@foo)) '"-" (symbol->string (c31a1@syntax->datum c3b3e@x)))))))) (map (lambda (c3b02@field) (let ((c3b04@t c3b02@field)) (let ((c3b06@ls/false (c30bb@syntax-dispatch c3b04@t '(#(scheme-id mutable) any any any)))) (if (and c3b06@ls/false (apply (lambda (c3b08@name c3b09@accessor c3b0a@mutator) (c2eb4@id? c3b09@accessor)) c3b06@ls/false)) (apply (lambda (c3b0e@name c3b0f@accessor c3b10@mutator) c3b0f@accessor) c3b06@ls/false) (let ((c3b14@t c3b04@t)) (let ((c3b16@ls/false (c30bb@syntax-dispatch c3b14@t '(#(scheme-id immutable) any any)))) (if (and c3b16@ls/false (apply (lambda (c3b18@name c3b19@accessor) (c2eb4@id? c3b19@accessor)) c3b16@ls/false)) (apply (lambda (c3b1c@name c3b1d@accessor) c3b1d@accessor) c3b16@ls/false) (let ((c3b20@t c3b14@t)) (let ((c3b22@ls/false (c30bb@syntax-dispatch c3b20@t '(#(scheme-id mutable) any)))) (if (and c3b22@ls/false (apply (lambda (c3b24@name) (c2eb4@id? c3b24@name)) c3b22@ls/false)) (apply (lambda (c3b26@name) (c3b01@gen-name c3b26@name)) c3b22@ls/false) (let ((c3b28@t c3b20@t)) (let ((c3b2a@ls/false (c30bb@syntax-dispatch c3b28@t '(#(scheme-id immutable) any)))) (if (and c3b2a@ls/false (apply (lambda (c3b2c@name) (c2eb4@id? c3b2c@name)) c3b2a@ls/false)) (apply (lambda (c3b2e@name) (c3b01@gen-name c3b2e@name)) c3b2a@ls/false) (let ((c3b30@t c3b28@t)) (let ((c3b32@ls/false (c30bb@syntax-dispatch c3b30@t 'any))) (if (and c3b32@ls/false (apply (lambda (c3b34@name) (c2eb4@id? c3b34@name)) c3b32@ls/false)) (apply (lambda (c3b36@name) (c3b01@gen-name c3b36@name)) c3b32@ls/false) (let ((c3b38@t c3b30@t)) (let ((c3b3a@ls/false (c30bb@syntax-dispatch c3b38@t 'any))) (if c3b3a@ls/false (apply (lambda (c3b3c@others) (c319b@syntax-violation '#f '"invalid field spec" c3b02@field)) c3b3a@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3b38@t)))))))))))))))))))) c3afd@fields)))) (c3a9f@enumerate (lambda (c3af4@ls) (let c3afa@f ((c3af6@ls c3af4@ls) (c3af7@i '0)) (if (null? c3af6@ls) '() (cons c3af7@i (c3afa@f (cdr c3af6@ls) (+ c3af7@i '1))))))) (c3aa1@do-define-record (lambda (c3acc@namespec c3acd@clause*) (let ((c3ad0@foo (c3a85@get-record-name c3acc@namespec))) (let ((c3ad2@foo-rtd (gensym))) (let ((c3ad4@foo-rcd (gensym))) (let ((c3ad6@protocol (gensym))) (let ((c3ad8@make-foo (c3a87@get-record-constructor-name c3acc@namespec))) (let ((c3ada@fields (c3a97@get-fields c3acd@clause*))) (let ((c3adc@idx* (c3a9f@enumerate c3ada@fields))) (let ((c3ade@foo-x* (c3a9d@get-accessors c3ad0@foo c3ada@fields))) (let ((c3ae0@set-foo-x!* (c3a9b@get-mutators c3ad0@foo c3ada@fields))) (let ((c3ae2@set-foo-idx* (c3a99@get-mutator-indices c3ada@fields))) (let ((c3ae4@foo? (c3a89@get-record-predicate-name c3acc@namespec))) (let ((c3ae6@foo-rtd-code (c3a8d@foo-rtd-code c3ad0@foo c3acd@clause* (c3a8f@parent-rtd-code c3acd@clause*)))) (let ((c3ae8@foo-rcd-code (c3a93@foo-rcd-code c3acd@clause* c3ad2@foo-rtd c3ad6@protocol (c3a91@parent-rcd-code c3acd@clause*)))) (let ((c3aea@protocol-code (c3a95@get-protocol-code c3acd@clause*))) (c3071@bless (cons 'begin (cons (list 'define c3ad2@foo-rtd c3ae6@foo-rtd-code) (cons (list 'define c3ad6@protocol c3aea@protocol-code) (cons (list 'define c3ad4@foo-rcd c3ae8@foo-rcd-code) (cons (list 'define-syntax c3ad0@foo (list 'list ''$rtd (list 'syntax c3ad2@foo-rtd) (list 'syntax c3ad4@foo-rcd))) (cons (list 'define c3ae4@foo? (list 'record-predicate c3ad2@foo-rtd)) (cons (list 'define c3ad8@make-foo (list 'record-constructor c3ad4@foo-rcd)) (append (map (lambda (c3aec@foo-x c3aed@idx) (list 'define c3aec@foo-x (list 'record-accessor c3ad2@foo-rtd c3aed@idx))) c3ade@foo-x* c3adc@idx*) (map (lambda (c3af0@set-foo-x! c3af1@idx) (list 'define c3af0@set-foo-x! (list 'record-mutator c3ad2@foo-rtd c3af1@idx))) c3ae0@set-foo-x!* c3ae2@set-foo-idx*)))))))))))))))))))))))))) (c3aa3@verify-clauses (lambda (c3aac@x c3aad@cls*) (letrec* ((c3ab1@valid-kwds (map c3071@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (c3ab3@free-id-member? (lambda (c3ac8@x c3ac9@ls) (and (pair? c3ac9@ls) (or (c2eba@free-id=? c3ac8@x (car c3ac9@ls)) (c3ab3@free-id-member? c3ac8@x (cdr c3ac9@ls))))))) (let c3ab8@f ((c3ab4@cls* c3aad@cls*) (c3ab5@seen* '())) (if (not (null? c3ab4@cls*)) (let ((c3aba@t (car c3ab4@cls*))) (let ((c3abc@ls/false (c30bb@syntax-dispatch c3aba@t '(any . any)))) (if c3abc@ls/false (apply (lambda (c3abe@kwd c3abf@rest) (if (or (not (c2eb4@id? c3abe@kwd)) (not (c3ab3@free-id-member? c3abe@kwd c3ab1@valid-kwds))) (c319b@syntax-violation '#f '"not a valid define-record-type keyword" c3abe@kwd) (if (c2ec0@bound-id-member? c3abe@kwd c3ab5@seen*) (c319b@syntax-violation '#f '"duplicate use of keyword " c3aac@x c3abe@kwd) (c3ab8@f (cdr c3ab4@cls*) (cons c3abe@kwd c3ab5@seen*))))) c3abc@ls/false) (let ((c3ac2@t c3aba@t)) (let ((c3ac4@ls/false (c30bb@syntax-dispatch c3ac2@t 'any))) (if c3ac4@ls/false (apply (lambda (c3ac6@cls) (c319b@syntax-violation '#f '"malformed define-record-type clause" c3ac6@cls)) c3ac4@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3ac2@t))))))) (void))))))) (let ((c3aa4@t c3a80@x)) (let ((c3aa6@ls/false (c30bb@syntax-dispatch c3aa4@t '(_ any . each-any)))) (if c3aa6@ls/false (apply (lambda (c3aa8@namespec c3aa9@clause*) (begin (c3aa3@verify-clauses c3a80@x c3aa9@clause*) (c3aa1@do-define-record c3aa8@namespec c3aa9@clause*))) c3aa6@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3aa4@t))))))) (set! c4b8b@c30af@define-record-type-macro c30af@define-record-type-macro) (set! c30b1@define-condition-type-macro (lambda (c3c7c@x) (letrec* ((c3c7f@mkname (lambda (c3cac@name c3cad@suffix) (c319f@datum->syntax c3cac@name (string->symbol (string-append (symbol->string (c31a1@syntax->datum c3cac@name)) c3cad@suffix)))))) (let ((c3c80@t c3c7c@x)) (let ((c3c82@ls/false (c30bb@syntax-dispatch c3c80@t '(any any any any any . #(each (any any)))))) (if (and c3c82@ls/false (apply (lambda (c3c84@ctxt c3c85@name c3c86@super c3c87@constructor c3c88@predicate c3c89@field* c3c8a@accessor*) (and (c2eb4@id? c3c85@name) (c2eb4@id? c3c86@super) (c2eb4@id? c3c87@constructor) (c2eb4@id? c3c88@predicate) (for-all c2eb4@id? c3c89@field*) (for-all c2eb4@id? c3c8a@accessor*))) c3c82@ls/false)) (apply (lambda (c3c92@ctxt c3c93@name c3c94@super c3c95@constructor c3c96@predicate c3c97@field* c3c98@accessor*) (let ((c3ca0@aux-accessor* (map (lambda (c3ca2@x) (gensym)) c3c98@accessor*))) (c3071@bless (cons 'begin (cons (cons 'define-record-type (cons (list c3c93@name c3c95@constructor (gensym)) (cons (list 'parent c3c94@super) (cons (cons 'fields (map (lambda (c3ca4@field c3ca5@aux) (list 'immutable c3ca4@field c3ca5@aux)) c3c97@field* c3ca0@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define c3c96@predicate (list 'condition-predicate (list 'record-type-descriptor c3c93@name))) (map (lambda (c3ca8@accessor c3ca9@aux) (list 'define c3ca8@accessor (list 'condition-accessor (list 'record-type-descriptor c3c93@name) c3ca9@aux))) c3c98@accessor* c3ca0@aux-accessor*))))))) c3c82@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3c80@t))))))) (set! c4b8c@c30b1@define-condition-type-macro c30b1@define-condition-type-macro) (set! c30b3@incorrect-usage-macro (lambda (c3cb0@e) (c319b@syntax-violation '#f '"incorrect usage of auxiliary keyword" c3cb0@e))) (set! c4b8d@c30b3@incorrect-usage-macro c30b3@incorrect-usage-macro) (set! c30b5@parameterize-macro (lambda (c3cb2@e) (let ((c3cb4@t c3cb2@e)) (let ((c3cb6@ls/false (c30bb@syntax-dispatch c3cb4@t '(_ () any . each-any)))) (if c3cb6@ls/false (apply (lambda (c3cb8@b c3cb9@b*) (c3071@bless (cons 'let (cons '() (cons c3cb8@b c3cb9@b*))))) c3cb6@ls/false) (let ((c3cbc@t c3cb4@t)) (let ((c3cbe@ls/false (c30bb@syntax-dispatch c3cbc@t '(_ #(each (any any)) any . each-any)))) (if c3cbe@ls/false (apply (lambda (c3cc0@olhs* c3cc1@orhs* c3cc2@b c3cc3@b*) (let ((c3cc8@lhs* (c3189@generate-temporaries c3cc0@olhs*)) (c3cc9@rhs* (c3189@generate-temporaries c3cc1@orhs*))) (c3071@bless (cons (list 'lambda (append c3cc8@lhs* c3cc9@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (c3ccc@lhs c3ccd@rhs) (list 'let (list (list 't (list c3ccc@lhs))) (list c3ccc@lhs c3ccd@rhs) (cons 'set! (cons c3ccd@rhs '(t))))) c3cc8@lhs* c3cc9@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons c3cc2@b c3cc3@b*))) '(swap)))))) (append c3cc0@olhs* c3cc1@orhs*))))) c3cbe@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3cbc@t))))))))) (set! c4b8e@c30b5@parameterize-macro c30b5@parameterize-macro) (set! c30b7@foreign-call-transformer (lambda (c3cd0@e c3cd1@r c3cd2@mr) (let ((c3cd6@t c3cd0@e)) (let ((c3cd8@ls/false (c30bb@syntax-dispatch c3cd6@t '(_ any . each-any)))) (if c3cd8@ls/false (apply (lambda (c3cda@name c3cdb@arg*) (cons 'foreign-call (cons (c30dd@chi-expr c3cda@name c3cd1@r c3cd2@mr) (c30d9@chi-expr* c3cdb@arg* c3cd1@r c3cd2@mr)))) c3cd8@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3cd6@t)))))) (set! c4b8f@c30b7@foreign-call-transformer c30b7@foreign-call-transformer) (set! c30b9@convert-pattern (lambda (c3cde@pattern c3cdf@keys) (letrec* ((c3ce3@cvt* (lambda (c3d82@p* c3d83@n c3d84@ids) (if (null? c3d82@p*) (values '() c3d84@ids) (call-with-values (lambda () (c3ce3@cvt* (cdr c3d82@p*) c3d83@n c3d84@ids)) (lambda (c3d8c@c3d89 c3d8d@c3d8b) (let ((c3d90@ids c3d8d@c3d8b) (c3d91@y c3d8c@c3d89)) (call-with-values (lambda () (c3ce5@cvt (car c3d82@p*) c3d83@n c3d90@ids)) (lambda (c3d98@c3d95 c3d99@c3d97) (let ((c3d9c@ids c3d99@c3d97) (c3d9d@x c3d98@c3d95)) (values (cons c3d9d@x c3d91@y) c3d9c@ids)))))))))) (c3ce5@cvt (lambda (c3ce6@p c3ce7@n c3ce8@ids) (let ((c3cec@t c3ce6@p)) (let ((c3cee@ls/false (c30bb@syntax-dispatch c3cec@t 'any))) (if (and c3cee@ls/false (apply (lambda (c3cf0@id) (c2eb4@id? c3cf0@id)) c3cee@ls/false)) (apply (lambda (c3cf2@id) (if (c2ec0@bound-id-member? c3ce6@p c3cdf@keys) (values (vector 'free-id c3ce6@p) c3ce8@ids) (if (c2eba@free-id=? c3ce6@p (c3043@scheme-stx '_)) (values '_ c3ce8@ids) (values 'any (cons (cons c3ce6@p c3ce7@n) c3ce8@ids))))) c3cee@ls/false) (let ((c3cf4@t c3cec@t)) (let ((c3cf6@ls/false (c30bb@syntax-dispatch c3cf4@t '(any any)))) (if (and c3cf6@ls/false (apply (lambda (c3cf8@p c3cf9@dots) (c30bd@ellipsis? c3cf9@dots)) c3cf6@ls/false)) (apply (lambda (c3cfc@p c3cfd@dots) (call-with-values (lambda () (c3ce5@cvt c3cfc@p (+ c3ce7@n '1) c3ce8@ids)) (lambda (c3d04@c3d01 c3d05@c3d03) (let ((c3d08@ids c3d05@c3d03) (c3d09@p c3d04@c3d01)) (values (if (eq? c3d09@p 'any) 'each-any (vector 'each c3d09@p)) c3d08@ids))))) c3cf6@ls/false) (let ((c3d0c@t c3cf4@t)) (let ((c3d0e@ls/false (c30bb@syntax-dispatch c3d0c@t '(any any . #(each+ any () any))))) (if (and c3d0e@ls/false (apply (lambda (c3d10@x c3d11@dots c3d12@ys c3d13@z) (c30bd@ellipsis? c3d11@dots)) c3d0e@ls/false)) (apply (lambda (c3d18@x c3d19@dots c3d1a@ys c3d1b@z) (call-with-values (lambda () (c3ce5@cvt c3d1b@z c3ce7@n c3ce8@ids)) (lambda (c3d24@c3d21 c3d25@c3d23) (let ((c3d28@ids c3d25@c3d23) (c3d29@z c3d24@c3d21)) (call-with-values (lambda () (c3ce3@cvt* c3d1a@ys c3ce7@n c3d28@ids)) (lambda (c3d30@c3d2d c3d31@c3d2f) (let ((c3d34@ids c3d31@c3d2f) (c3d35@ys c3d30@c3d2d)) (call-with-values (lambda () (c3ce5@cvt c3d18@x (+ c3ce7@n '1) c3d34@ids)) (lambda (c3d3c@c3d39 c3d3d@c3d3b) (let ((c3d40@ids c3d3d@c3d3b) (c3d41@x c3d3c@c3d39)) (values (vector 'each+ c3d41@x (reverse c3d35@ys) c3d29@z) c3d40@ids))))))))))) c3d0e@ls/false) (let ((c3d44@t c3d0c@t)) (let ((c3d46@ls/false (c30bb@syntax-dispatch c3d44@t '(any . any)))) (if c3d46@ls/false (apply (lambda (c3d48@x c3d49@y) (call-with-values (lambda () (c3ce5@cvt c3d49@y c3ce7@n c3ce8@ids)) (lambda (c3d50@c3d4d c3d51@c3d4f) (let ((c3d54@ids c3d51@c3d4f) (c3d55@y c3d50@c3d4d)) (call-with-values (lambda () (c3ce5@cvt c3d48@x c3ce7@n c3d54@ids)) (lambda (c3d5c@c3d59 c3d5d@c3d5b) (let ((c3d60@ids c3d5d@c3d5b) (c3d61@x c3d5c@c3d59)) (values (cons c3d61@x c3d55@y) c3d60@ids)))))))) c3d46@ls/false) (let ((c3d64@t c3d44@t)) (let ((c3d66@ls/false (c30bb@syntax-dispatch c3d64@t '()))) (if c3d66@ls/false (apply (lambda () (values '() c3ce8@ids)) c3d66@ls/false) (let ((c3d68@t c3d64@t)) (let ((c3d6a@ls/false (c30bb@syntax-dispatch c3d68@t '#(vector each-any)))) (if (and c3d6a@ls/false (apply (lambda (c3d6c@p) (not (c2e80@stx? c3d6c@p))) c3d6a@ls/false)) (apply (lambda (c3d6e@p) (call-with-values (lambda () (c3ce5@cvt c3d6e@p c3ce7@n c3ce8@ids)) (lambda (c3d74@c3d71 c3d75@c3d73) (let ((c3d78@ids c3d75@c3d73) (c3d79@p c3d74@c3d71)) (values (vector 'vector c3d79@p) c3d78@ids))))) c3d6a@ls/false) (let ((c3d7c@t c3d68@t)) (let ((c3d7e@ls/false (c30bb@syntax-dispatch c3d7c@t 'any))) (if c3d7e@ls/false (apply (lambda (c3d80@datum) (values (vector 'atom (c2ec8@stx->datum c3d80@datum)) c3ce8@ids)) c3d7e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3d7c@t))))))))))))))))))))))))) (c3ce5@cvt c3cde@pattern '0 '())))) (set! c4b90@c30b9@convert-pattern c30b9@convert-pattern) (set! c30bb@syntax-dispatch (letrec* ((c3da1@stx^ (lambda (c3e7c@e c3e7d@m* c3e7e@s* c3e7f@ae*) (if (and (null? c3e7d@m*) (null? c3e7e@s*) (null? c3e7f@ae*)) c3e7c@e (c2e9c@mkstx c3e7c@e c3e7d@m* c3e7e@s* c3e7f@ae*)))) (c3da3@match-each (lambda (c3e5c@e c3e5d@p c3e5e@m* c3e5f@s* c3e60@ae*) (if (pair? c3e5c@e) (let ((c3e66@first (c3daf@match (car c3e5c@e) c3e5d@p c3e5e@m* c3e5f@s* c3e60@ae* '()))) (and c3e66@first (let ((c3e68@rest (c3da3@match-each (cdr c3e5c@e) c3e5d@p c3e5e@m* c3e5f@s* c3e60@ae*))) (and c3e68@rest (cons c3e66@first c3e68@rest))))) (if (null? c3e5c@e) '() (if (c2e80@stx? c3e5c@e) (and (not (c2e3a@top-marked? c3e5e@m*)) (call-with-values (lambda () (join-wraps c3e5e@m* c3e5f@s* c3e60@ae* c3e5c@e)) (lambda (c3e70@c3e6b c3e71@c3e6d c3e72@c3e6f) (let ((c3e76@ae* c3e72@c3e6f) (c3e77@s* c3e71@c3e6d) (c3e78@m* c3e70@c3e6b)) (c3da3@match-each (c2e82@stx-expr c3e5c@e) c3e5d@p c3e78@m* c3e77@s* c3e76@ae*))))) (if (c29f8@c28ca@annotation? c3e5c@e) (c3da3@match-each (c29fa@c28ce@annotation-expression c3e5c@e) c3e5d@p c3e5e@m* c3e5f@s* c3e60@ae*) '#f)))))) (c3da5@match-each+ (lambda (c3e1c@e c3e1d@x-pat c3e1e@y-pat c3e1f@z-pat c3e20@m* c3e21@s* c3e22@ae* c3e23@r) (let c3e34@f ((c3e2c@e c3e1c@e) (c3e2d@m* c3e20@m*) (c3e2e@s* c3e21@s*) (c3e2f@ae* c3e22@ae*)) (if (pair? c3e2c@e) (call-with-values (lambda () (c3e34@f (cdr c3e2c@e) c3e2d@m* c3e2e@s* c3e2f@ae*)) (lambda (c3e3c@c3e37 c3e3d@c3e39 c3e3e@c3e3b) (let ((c3e42@r c3e3e@c3e3b) (c3e43@y-pat c3e3d@c3e39) (c3e44@xr* c3e3c@c3e37)) (if c3e42@r (if (null? c3e43@y-pat) (let ((c3e48@xr (c3daf@match (car c3e2c@e) c3e1d@x-pat c3e2d@m* c3e2e@s* c3e2f@ae* '()))) (if c3e48@xr (values (cons c3e48@xr c3e44@xr*) c3e43@y-pat c3e42@r) (values '#f '#f '#f))) (values '() (cdr c3e43@y-pat) (c3daf@match (car c3e2c@e) (car c3e43@y-pat) c3e2d@m* c3e2e@s* c3e2f@ae* c3e42@r))) (values '#f '#f '#f))))) (if (c2e80@stx? c3e2c@e) (if (c2e3a@top-marked? c3e2d@m*) (values '() c3e1e@y-pat (c3daf@match c3e2c@e c3e1f@z-pat c3e2d@m* c3e2e@s* c3e2f@ae* c3e23@r)) (call-with-values (lambda () (join-wraps c3e2d@m* c3e2e@s* c3e2f@ae* c3e2c@e)) (lambda (c3e50@c3e4b c3e51@c3e4d c3e52@c3e4f) (let ((c3e56@ae* c3e52@c3e4f) (c3e57@s* c3e51@c3e4d) (c3e58@m* c3e50@c3e4b)) (c3e34@f (c2e82@stx-expr c3e2c@e) c3e58@m* c3e57@s* c3e56@ae*))))) (if (c29f8@c28ca@annotation? c3e2c@e) (c3e34@f (c29fa@c28ce@annotation-expression c3e2c@e) c3e2d@m* c3e2e@s* c3e2f@ae*) (values '() c3e1e@y-pat (c3daf@match c3e2c@e c3e1f@z-pat c3e2d@m* c3e2e@s* c3e2f@ae* c3e23@r)))))))) (c3da7@match-each-any (lambda (c3e00@e c3e01@m* c3e02@s* c3e03@ae*) (if (pair? c3e00@e) (let ((c3e08@l (c3da7@match-each-any (cdr c3e00@e) c3e01@m* c3e02@s* c3e03@ae*))) (and c3e08@l (cons (c3da1@stx^ (car c3e00@e) c3e01@m* c3e02@s* c3e03@ae*) c3e08@l))) (if (null? c3e00@e) '() (if (c2e80@stx? c3e00@e) (and (not (c2e3a@top-marked? c3e01@m*)) (call-with-values (lambda () (join-wraps c3e01@m* c3e02@s* c3e03@ae* c3e00@e)) (lambda (c3e10@c3e0b c3e11@c3e0d c3e12@c3e0f) (let ((c3e16@ae* c3e12@c3e0f) (c3e17@s* c3e11@c3e0d) (c3e18@m* c3e10@c3e0b)) (c3da7@match-each-any (c2e82@stx-expr c3e00@e) c3e18@m* c3e17@s* c3e16@ae*))))) (if (c29f8@c28ca@annotation? c3e00@e) (c3da7@match-each-any (c29fa@c28ce@annotation-expression c3e00@e) c3e01@m* c3e02@s* c3e03@ae*) '#f)))))) (c3da9@match-empty (lambda (c3dfa@p c3dfb@r) (if (null? c3dfa@p) c3dfb@r (if (eq? c3dfa@p '_) c3dfb@r (if (eq? c3dfa@p 'any) (cons '() c3dfb@r) (if (pair? c3dfa@p) (c3da9@match-empty (car c3dfa@p) (c3da9@match-empty (cdr c3dfa@p) c3dfb@r)) (if (eq? c3dfa@p 'each-any) (cons '() c3dfb@r) (let ((c3dfe@t (vector-ref c3dfa@p '0))) (if (memv c3dfe@t '(each)) (c3da9@match-empty (vector-ref c3dfa@p '1) c3dfb@r) (if (memv c3dfe@t '(each+)) (c3da9@match-empty (vector-ref c3dfa@p '1) (c3da9@match-empty (reverse (vector-ref c3dfa@p '2)) (c3da9@match-empty (vector-ref c3dfa@p '3) c3dfb@r))) (if (memv c3dfe@t '(free-id atom)) c3dfb@r (if (memv c3dfe@t '(scheme-id atom)) c3dfb@r (if (memv c3dfe@t '(vector)) (c3da9@match-empty (vector-ref c3dfa@p '1) c3dfb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" c3dfa@p)))))))))))))) (c3dab@combine (lambda (c3df6@r* c3df7@r) (if (null? (car c3df6@r*)) c3df7@r (cons (map car c3df6@r*) (c3dab@combine (map cdr c3df6@r*) c3df7@r))))) (c3dad@match* (lambda (c3dd2@e c3dd3@p c3dd4@m* c3dd5@s* c3dd6@ae* c3dd7@r) (if (null? c3dd3@p) (and (null? c3dd2@e) c3dd7@r) (if (pair? c3dd3@p) (and (pair? c3dd2@e) (c3daf@match (car c3dd2@e) (car c3dd3@p) c3dd4@m* c3dd5@s* c3dd6@ae* (c3daf@match (cdr c3dd2@e) (cdr c3dd3@p) c3dd4@m* c3dd5@s* c3dd6@ae* c3dd7@r))) (if (eq? c3dd3@p 'each-any) (let ((c3dde@l (c3da7@match-each-any c3dd2@e c3dd4@m* c3dd5@s* c3dd6@ae*))) (and c3dde@l (cons c3dde@l c3dd7@r))) (let ((c3de0@t (vector-ref c3dd3@p '0))) (if (memv c3de0@t '(each)) (if (null? c3dd2@e) (c3da9@match-empty (vector-ref c3dd3@p '1) c3dd7@r) (let ((c3de2@r* (c3da3@match-each c3dd2@e (vector-ref c3dd3@p '1) c3dd4@m* c3dd5@s* c3dd6@ae*))) (and c3de2@r* (c3dab@combine c3de2@r* c3dd7@r)))) (if (memv c3de0@t '(free-id)) (and (symbol? c3dd2@e) (c2e3a@top-marked? c3dd4@m*) (c2eba@free-id=? (c3da1@stx^ c3dd2@e c3dd4@m* c3dd5@s* c3dd6@ae*) (vector-ref c3dd3@p '1)) c3dd7@r) (if (memv c3de0@t '(scheme-id)) (and (symbol? c3dd2@e) (c2e3a@top-marked? c3dd4@m*) (c2eba@free-id=? (c3da1@stx^ c3dd2@e c3dd4@m* c3dd5@s* c3dd6@ae*) (c3043@scheme-stx (vector-ref c3dd3@p '1))) c3dd7@r) (if (memv c3de0@t '(each+)) (call-with-values (lambda () (c3da5@match-each+ c3dd2@e (vector-ref c3dd3@p '1) (vector-ref c3dd3@p '2) (vector-ref c3dd3@p '3) c3dd4@m* c3dd5@s* c3dd6@ae* c3dd7@r)) (lambda (c3dea@c3de5 c3deb@c3de7 c3dec@c3de9) (let ((c3df0@r c3dec@c3de9) (c3df1@y-pat c3deb@c3de7) (c3df2@xr* c3dea@c3de5)) (and c3df0@r (null? c3df1@y-pat) (if (null? c3df2@xr*) (c3da9@match-empty (vector-ref c3dd3@p '1) c3df0@r) (c3dab@combine c3df2@xr* c3df0@r)))))) (if (memv c3de0@t '(atom)) (and (fast-equal? (vector-ref c3dd3@p '1) (c2ec6@strip c3dd2@e c3dd4@m*)) c3dd7@r) (if (memv c3de0@t '(vector)) (and (vector? c3dd2@e) (c3daf@match (vector->list c3dd2@e) (vector-ref c3dd3@p '1) c3dd4@m* c3dd5@s* c3dd6@ae* c3dd7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" c3dd3@p))))))))))))) (c3daf@match (lambda (c3db4@e c3db5@p c3db6@m* c3db7@s* c3db8@ae* c3db9@r) (if (not c3db9@r) '#f (if (eq? c3db5@p '_) c3db9@r (if (eq? c3db5@p 'any) (cons (c3da1@stx^ c3db4@e c3db6@m* c3db7@s* c3db8@ae*) c3db9@r) (if (c2e80@stx? c3db4@e) (and (not (c2e3a@top-marked? c3db6@m*)) (call-with-values (lambda () (join-wraps c3db6@m* c3db7@s* c3db8@ae* c3db4@e)) (lambda (c3dc6@c3dc1 c3dc7@c3dc3 c3dc8@c3dc5) (let ((c3dcc@ae* c3dc8@c3dc5) (c3dcd@s* c3dc7@c3dc3) (c3dce@m* c3dc6@c3dc1)) (c3daf@match (c2e82@stx-expr c3db4@e) c3db5@p c3dce@m* c3dcd@s* c3dcc@ae* c3db9@r))))) (if (c29f8@c28ca@annotation? c3db4@e) (c3daf@match (c29fa@c28ce@annotation-expression c3db4@e) c3db5@p c3db6@m* c3db7@s* c3db8@ae* c3db9@r) (c3dad@match* c3db4@e c3db5@p c3db6@m* c3db7@s* c3db8@ae* c3db9@r))))))))) (lambda (c3db0@e c3db1@p) (c3daf@match c3db0@e c3db1@p '() '() '() '())))) (set! c4b91@c30bb@syntax-dispatch c30bb@syntax-dispatch) (set! c30bd@ellipsis? (lambda (c3e84@x) (and (c2eb4@id? c3e84@x) (c2eba@free-id=? c3e84@x (c3043@scheme-stx '...))))) (set! c4b92@c30bd@ellipsis? c30bd@ellipsis?) (set! c30bf@underscore? (lambda (c3e86@x) (and (c2eb4@id? c3e86@x) (c2eba@free-id=? c3e86@x (c3043@scheme-stx '_))))) (set! c4b93@c30bf@underscore? c30bf@underscore?) (set! c30c1@verify-literals (lambda (c3e88@lits c3e89@expr) (for-each (lambda (c3e8c@x) (if (or (not (c2eb4@id? c3e8c@x)) (c30bd@ellipsis? c3e8c@x) (c30bf@underscore? c3e8c@x)) (c319b@syntax-violation '#f '"invalid literal" c3e89@expr c3e8c@x) (void))) c3e88@lits))) (set! c4b94@c30c1@verify-literals c30c1@verify-literals) (set! c30c3@syntax-case-transformer (letrec* ((c3e8f@build-dispatch-call (lambda (c3f00@pvars c3f01@expr c3f02@y c3f03@r c3f04@mr) (let ((c3f0a@ids (map car c3f00@pvars)) (c3f0b@levels (map cdr c3f00@pvars))) (let ((c3f0e@labels (map c2e40@gen-label c3f0a@ids)) (c3f0f@new-vars (map c2e3c@gen-lexical c3f0a@ids))) (let ((c3f12@body (c30dd@chi-expr (c2ea0@add-subst (c2e74@make-full-rib c3f0a@ids c3f0e@labels) c3f01@expr) (append (map (lambda (c3f14@label c3f15@var c3f16@level) (cons c3f14@label (c2ece@make-binding 'syntax (cons c3f15@var c3f16@level)))) c3f0e@labels c3f0f@new-vars (map cdr c3f00@pvars)) c3f03@r) c3f04@mr))) (list '(primitive apply) (c2e17@c2d49@build-lambda '#f c3f0f@new-vars c3f12@body) c3f02@y)))))) (c3e91@invalid-ids-error (lambda (c3ef4@id* c3ef5@e c3ef6@class) (let c3efe@find ((c3efa@id* c3ef4@id*) (c3efb@ok* '())) (if (null? c3efa@id*) (c319b@syntax-violation '#f '"invalid syntax" c3ef5@e) (if (c2eb4@id? (car c3efa@id*)) (if (c2ec0@bound-id-member? (car c3efa@id*) c3efb@ok*) (c3197@syntax-error (car c3efa@id*) '"duplicate " c3ef6@class) (c3efe@find (cdr c3efa@id*) (cons (car c3efa@id*) c3efb@ok*))) (c3197@syntax-error (car c3efa@id*) '"invalid " c3ef6@class)))))) (c3e93@gen-clause (lambda (c3ecc@x c3ecd@keys c3ece@clauses c3ecf@r c3ed0@mr c3ed1@pat c3ed2@fender c3ed3@expr) (call-with-values (lambda () (c30b9@convert-pattern c3ed1@pat c3ecd@keys)) (lambda (c3ee0@c3edd c3ee1@c3edf) (let ((c3ee4@pvars c3ee1@c3edf) (c3ee5@p c3ee0@c3edd)) (if (not (c2ebe@distinct-bound-ids? (map car c3ee4@pvars))) (c3e91@invalid-ids-error (map car c3ee4@pvars) c3ed1@pat '"pattern variable") (if (not (for-all (lambda (c3ee8@x) (not (c30bd@ellipsis? (car c3ee8@x)))) c3ee4@pvars)) (c319b@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" c3ed1@pat) (let ((c3eea@y (c2e3c@gen-lexical 'tmp))) (let ((c3eec@test (if (eq? c3ed2@fender '#t) c3eea@y (let ((c3eee@call (c3e8f@build-dispatch-call c3ee4@pvars c3ed2@fender c3eea@y c3ecf@r c3ed0@mr))) (list 'if c3eea@y c3eee@call (list 'quote '#f)))))) (let ((c3ef0@conseq (c3e8f@build-dispatch-call c3ee4@pvars c3ed3@expr c3eea@y c3ecf@r c3ed0@mr))) (let ((c3ef2@altern (c3e95@gen-syntax-case c3ecc@x c3ecd@keys c3ece@clauses c3ecf@r c3ed0@mr))) (list (c2e17@c2d49@build-lambda '#f (list c3eea@y) (list 'if c3eec@test c3ef0@conseq c3ef2@altern)) (list '(primitive syntax-dispatch) c3ecc@x (list 'quote c3ee5@p)))))))))))))) (c3e95@gen-syntax-case (lambda (c3eaa@x c3eab@keys c3eac@clauses c3ead@r c3eae@mr) (if (null? c3eac@clauses) (list '(primitive syntax-error) c3eaa@x) (let ((c3eb4@t (car c3eac@clauses))) (let ((c3eb6@ls/false (c30bb@syntax-dispatch c3eb4@t '(any any)))) (if c3eb6@ls/false (apply (lambda (c3eb8@pat c3eb9@expr) (if (and (c2eb4@id? c3eb8@pat) (not (c2ec0@bound-id-member? c3eb8@pat c3eab@keys)) (not (c30bd@ellipsis? c3eb8@pat))) (if (c2eba@free-id=? c3eb8@pat (c3043@scheme-stx '_)) (c30dd@chi-expr c3eb9@expr c3ead@r c3eae@mr) (let ((c3ebc@lab (c2e40@gen-label c3eb8@pat)) (c3ebd@lex (c2e3c@gen-lexical c3eb8@pat))) (let ((c3ec0@body (c30dd@chi-expr (c2ea0@add-subst (c2e74@make-full-rib (list c3eb8@pat) (list c3ebc@lab)) c3eb9@expr) (cons (cons c3ebc@lab (c2ece@make-binding 'syntax (cons c3ebd@lex '0))) c3ead@r) c3eae@mr))) (list (c2e17@c2d49@build-lambda '#f (list c3ebd@lex) c3ec0@body) c3eaa@x)))) (c3e93@gen-clause c3eaa@x c3eab@keys (cdr c3eac@clauses) c3ead@r c3eae@mr c3eb8@pat '#t c3eb9@expr))) c3eb6@ls/false) (let ((c3ec2@t c3eb4@t)) (let ((c3ec4@ls/false (c30bb@syntax-dispatch c3ec2@t '(any any any)))) (if c3ec4@ls/false (apply (lambda (c3ec6@pat c3ec7@fender c3ec8@expr) (c3e93@gen-clause c3eaa@x c3eab@keys (cdr c3eac@clauses) c3ead@r c3eae@mr c3ec6@pat c3ec7@fender c3ec8@expr)) c3ec4@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3ec2@t))))))))))) (lambda (c3e96@e c3e97@r c3e98@mr) (let ((c3e9c@t c3e96@e)) (let ((c3e9e@ls/false (c30bb@syntax-dispatch c3e9c@t '(_ any each-any . each-any)))) (if c3e9e@ls/false (apply (lambda (c3ea0@expr c3ea1@keys c3ea2@clauses) (begin (c30c1@verify-literals c3ea1@keys c3e96@e) (let ((c3ea6@x (c2e3c@gen-lexical 'tmp))) (let ((c3ea8@body (c3e95@gen-syntax-case c3ea6@x c3ea1@keys c3ea2@clauses c3e97@r c3e98@mr))) (list (c2e17@c2d49@build-lambda '#f (list c3ea6@x) c3ea8@body) (c30dd@chi-expr c3ea0@expr c3e97@r c3e98@mr)))))) c3e9e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3e9c@t))))))) (set! c4b95@c30c3@syntax-case-transformer c30c3@syntax-case-transformer) (set! c30c5@ellipsis-map (lambda (c3f1a@proc c3f1b@ls . c3f1e@ls*) (letrec* ((c3f21@who '...)) (begin (if (not (list? c3f1b@ls)) (assertion-violation c3f21@who '"not a list" c3f1b@ls) (void)) (if (not (null? c3f1e@ls*)) (let ((c3f22@n (length c3f1b@ls))) (for-each (lambda (c3f24@x) (begin (if (not (list? c3f24@x)) (assertion-violation c3f21@who '"not a list" c3f24@x) (void)) (if (not (= (length c3f24@x) c3f22@n)) (assertion-violation c3f21@who '"length mismatch" c3f1b@ls c3f24@x) (void)))) c3f1e@ls*)) (void)) (apply map c3f1a@proc c3f1b@ls c3f1e@ls*))))) (set! c4b96@c30c5@ellipsis-map c30c5@ellipsis-map) (set! c30c7@syntax-transformer (letrec* ((c3f27@gen-syntax (lambda (c3f9e@src c3f9f@e c3fa0@r c3fa1@maps c3fa2@ellipsis? c3fa3@vec?) (let ((c3faa@t c3f9f@e)) (let ((c3fac@ls/false (c30bb@syntax-dispatch c3faa@t 'any))) (if (and c3fac@ls/false (apply (lambda (c3fae@dots) (c3fa2@ellipsis? c3fae@dots)) c3fac@ls/false)) (apply (lambda (c3fb0@dots) (c319b@syntax-violation '#f '"misplaced ellipsis in syntax form" c3f9e@src)) c3fac@ls/false) (let ((c3fb2@t c3faa@t)) (let ((c3fb4@ls/false (c30bb@syntax-dispatch c3fb2@t 'any))) (if (and c3fb4@ls/false (apply (lambda (c3fb6@id) (c2eb4@id? c3fb6@id)) c3fb4@ls/false)) (apply (lambda (c3fb8@id) (let ((c3fba@label (c2eca@id->label c3f9f@e))) (let ((c3fbc@b (c2ecc@label->binding c3fba@label c3fa0@r))) (if (eq? (c2ed0@binding-type c3fbc@b) 'syntax) (call-with-values (lambda () (let ((c3fc2@var.lev (c2ed2@binding-value c3fbc@b))) (c3f29@gen-ref c3f9e@src (car c3fc2@var.lev) (cdr c3fc2@var.lev) c3fa1@maps))) (lambda (c3fc4@c3fbf c3fc5@c3fc1) (let ((c3fc8@maps c3fc5@c3fc1) (c3fc9@var c3fc4@c3fbf)) (values (list 'ref c3fc9@var) c3fc8@maps)))) (values (list 'quote c3f9f@e) c3fa1@maps))))) c3fb4@ls/false) (let ((c3fcc@t c3fb2@t)) (let ((c3fce@ls/false (c30bb@syntax-dispatch c3fcc@t '(any any)))) (if (and c3fce@ls/false (apply (lambda (c3fd0@dots c3fd1@e) (c3fa2@ellipsis? c3fd0@dots)) c3fce@ls/false)) (apply (lambda (c3fd4@dots c3fd5@e) (if c3fa3@vec? (c319b@syntax-violation '#f '"misplaced ellipsis in syntax form" c3f9e@src) (c3f27@gen-syntax c3f9e@src c3fd5@e c3fa0@r c3fa1@maps (lambda (c3fd8@x) '#f) '#f))) c3fce@ls/false) (let ((c3fda@t c3fcc@t)) (let ((c3fdc@ls/false (c30bb@syntax-dispatch c3fda@t '(any any . any)))) (if (and c3fdc@ls/false (apply (lambda (c3fde@x c3fdf@dots c3fe0@y) (c3fa2@ellipsis? c3fdf@dots)) c3fdc@ls/false)) (apply (lambda (c3fe4@x c3fe5@dots c3fe6@y) (let c3ffc@f ((c3fea@y c3fe6@y) (c3feb@k (lambda (c3fee@maps) (call-with-values (lambda () (c3f27@gen-syntax c3f9e@src c3fe4@x c3fa0@r (cons '() c3fee@maps) c3fa2@ellipsis? '#f)) (lambda (c3ff4@c3ff1 c3ff5@c3ff3) (let ((c3ff8@maps c3ff5@c3ff3) (c3ff9@x c3ff4@c3ff1)) (if (null? (car c3ff8@maps)) (c319b@syntax-violation '#f '"extra ellipsis in syntax form" c3f9e@src) (values (c3f2f@gen-map c3ff9@x (car c3ff8@maps)) (cdr c3ff8@maps))))))))) (let ((c3ffe@t c3fea@y)) (let ((c4000@ls/false (c30bb@syntax-dispatch c3ffe@t '()))) (if c4000@ls/false (apply (lambda () (c3feb@k c3fa1@maps)) c4000@ls/false) (let ((c4002@t c3ffe@t)) (let ((c4004@ls/false (c30bb@syntax-dispatch c4002@t '(any . any)))) (if (and c4004@ls/false (apply (lambda (c4006@dots c4007@y) (c3fa2@ellipsis? c4006@dots)) c4004@ls/false)) (apply (lambda (c400a@dots c400b@y) (c3ffc@f c400b@y (lambda (c400e@maps) (call-with-values (lambda () (c3feb@k (cons '() c400e@maps))) (lambda (c4014@c4011 c4015@c4013) (let ((c4018@maps c4015@c4013) (c4019@x c4014@c4011)) (if (null? (car c4018@maps)) (c319b@syntax-violation '#f '"extra ellipsis in syntax form" c3f9e@src) (values (c3f2d@gen-mappend c4019@x (car c4018@maps)) (cdr c4018@maps))))))))) c4004@ls/false) (let ((c401c@t c4002@t)) (let ((c401e@ls/false (c30bb@syntax-dispatch c401c@t '_))) (if c401e@ls/false (apply (lambda () (call-with-values (lambda () (c3f27@gen-syntax c3f9e@src c3fea@y c3fa0@r c3fa1@maps c3fa2@ellipsis? c3fa3@vec?)) (lambda (c4024@c4021 c4025@c4023) (let ((c4028@maps c4025@c4023) (c4029@y c4024@c4021)) (call-with-values (lambda () (c3feb@k c4028@maps)) (lambda (c4030@c402d c4031@c402f) (let ((c4034@maps c4031@c402f) (c4035@x c4030@c402d)) (values (c3f2b@gen-append c4035@x c4029@y) c4034@maps)))))))) c401e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c401c@t)))))))))))) c3fdc@ls/false) (let ((c4038@t c3fda@t)) (let ((c403a@ls/false (c30bb@syntax-dispatch c4038@t '(any . any)))) (if c403a@ls/false (apply (lambda (c403c@x c403d@y) (call-with-values (lambda () (c3f27@gen-syntax c3f9e@src c403c@x c3fa0@r c3fa1@maps c3fa2@ellipsis? '#f)) (lambda (c4044@c4041 c4045@c4043) (let ((c4048@maps c4045@c4043) (c4049@xnew c4044@c4041)) (call-with-values (lambda () (c3f27@gen-syntax c3f9e@src c403d@y c3fa0@r c4048@maps c3fa2@ellipsis? c3fa3@vec?)) (lambda (c4050@c404d c4051@c404f) (let ((c4054@maps c4051@c404f) (c4055@ynew c4050@c404d)) (values (c3f31@gen-cons c3f9f@e c403c@x c403d@y c4049@xnew c4055@ynew) c4054@maps)))))))) c403a@ls/false) (let ((c4058@t c4038@t)) (let ((c405a@ls/false (c30bb@syntax-dispatch c4058@t '#(vector each-any)))) (if c405a@ls/false (apply (lambda (c405c@ls) (call-with-values (lambda () (c3f27@gen-syntax c3f9e@src c405c@ls c3fa0@r c3fa1@maps c3fa2@ellipsis? '#t)) (lambda (c4062@c405f c4063@c4061) (let ((c4066@maps c4063@c4061) (c4067@lsnew c4062@c405f)) (values (c3f33@gen-vector c3f9f@e c405c@ls c4067@lsnew) c4066@maps))))) c405a@ls/false) (let ((c406a@t c4058@t)) (let ((c406c@ls/false (c30bb@syntax-dispatch c406a@t '_))) (if c406c@ls/false (apply (lambda () (values (list 'quote c3f9f@e) c3fa1@maps)) c406c@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c406a@t)))))))))))))))))))))))) (c3f29@gen-ref (lambda (c3f84@src c3f85@var c3f86@level c3f87@maps) (if (= c3f86@level '0) (values c3f85@var c3f87@maps) (if (null? c3f87@maps) (c319b@syntax-violation '#f '"missing ellipsis in syntax form" c3f84@src) (call-with-values (lambda () (c3f29@gen-ref c3f84@src c3f85@var (- c3f86@level '1) (cdr c3f87@maps))) (lambda (c3f90@c3f8d c3f91@c3f8f) (let ((c3f94@outer-maps c3f91@c3f8f) (c3f95@outer-var c3f90@c3f8d)) (let ((c3f98@t (assq c3f95@outer-var (car c3f87@maps)))) (if c3f98@t ((lambda (c3f9a@b) (values (cdr c3f9a@b) c3f87@maps)) c3f98@t) (let ((c3f9c@inner-var (c2e3c@gen-lexical 'tmp))) (values c3f9c@inner-var (cons (cons (cons c3f95@outer-var c3f9c@inner-var) (car c3f87@maps)) c3f94@outer-maps)))))))))))) (c3f2b@gen-append (lambda (c3f80@x c3f81@y) (if (fast-equal? c3f81@y ''()) c3f80@x (list 'append c3f80@x c3f81@y)))) (c3f2d@gen-mappend (lambda (c3f7c@e c3f7d@map-env) (list 'apply '(primitive append) (c3f2f@gen-map c3f7c@e c3f7d@map-env)))) (c3f2f@gen-map (lambda (c3f6a@e c3f6b@map-env) (let ((c3f6e@formals (map cdr c3f6b@map-env)) (c3f6f@actuals (map (lambda (c3f72@x) (list 'ref (car c3f72@x))) c3f6b@map-env))) (if (eq? (car c3f6a@e) 'ref) (car c3f6f@actuals) (if (for-all (lambda (c3f74@x) (and (eq? (car c3f74@x) 'ref) (memq (cadr c3f74@x) c3f6e@formals))) (cdr c3f6a@e)) (let ((c3f76@args (map (let ((c3f78@r (map cons c3f6e@formals c3f6f@actuals))) (lambda (c3f7a@x) (cdr (assq (cadr c3f7a@x) c3f78@r)))) (cdr c3f6a@e)))) (cons 'map (cons (list 'primitive (car c3f6a@e)) c3f76@args))) (cons* 'map (list 'lambda c3f6e@formals c3f6a@e) c3f6f@actuals)))))) (c3f31@gen-cons (lambda (c3f5a@e c3f5b@x c3f5c@y c3f5d@xnew c3f5e@ynew) (let ((c3f64@t (car c3f5e@ynew))) (if (memv c3f64@t '(quote)) (if (eq? (car c3f5d@xnew) 'quote) (let ((c3f66@xnew (cadr c3f5d@xnew)) (c3f67@ynew (cadr c3f5e@ynew))) (if (and (eq? c3f66@xnew c3f5b@x) (eq? c3f67@ynew c3f5c@y)) (list 'quote c3f5a@e) (list 'quote (cons c3f66@xnew c3f67@ynew)))) (if (null? (cadr c3f5e@ynew)) (list 'list c3f5d@xnew) (list 'cons c3f5d@xnew c3f5e@ynew))) (if (memv c3f64@t '(list)) (cons 'list (cons c3f5d@xnew (cdr c3f5e@ynew))) (list 'cons c3f5d@xnew c3f5e@ynew)))))) (c3f33@gen-vector (lambda (c3f54@e c3f55@ls c3f56@lsnew) (if (eq? (car c3f56@lsnew) 'quote) (if (eq? (cadr c3f56@lsnew) c3f55@ls) (list 'quote c3f54@e) (list 'quote (list->vector (cadr c3f56@lsnew)))) (if (eq? (car c3f56@lsnew) 'list) (cons 'vector (cdr c3f56@lsnew)) (list 'list->vector c3f56@lsnew))))) (c3f35@regen (lambda (c3f4e@x) (let ((c3f50@t (car c3f4e@x))) (if (memv c3f50@t '(ref)) (cadr c3f4e@x) (if (memv c3f50@t '(primitive)) (list 'primitive (cadr c3f4e@x)) (if (memv c3f50@t '(quote)) (list 'quote (cadr c3f4e@x)) (if (memv c3f50@t '(lambda)) (c2e17@c2d49@build-lambda '#f (cadr c3f4e@x) (c3f35@regen (caddr c3f4e@x))) (if (memv c3f50@t '(map)) (let ((c3f52@ls (map c3f35@regen (cdr c3f4e@x)))) (cons '(primitive ellipsis-map) c3f52@ls)) (cons (list 'primitive (car c3f4e@x)) (map c3f35@regen (cdr c3f4e@x)))))))))))) (lambda (c3f36@e c3f37@r c3f38@mr) (let ((c3f3c@t c3f36@e)) (let ((c3f3e@ls/false (c30bb@syntax-dispatch c3f3c@t '(_ any)))) (if c3f3e@ls/false (apply (lambda (c3f40@x) (call-with-values (lambda () (c3f27@gen-syntax c3f36@e c3f40@x c3f37@r '() c30bd@ellipsis? '#f)) (lambda (c3f46@c3f43 c3f47@c3f45) (let ((c3f4a@maps c3f47@c3f45) (c3f4b@e c3f46@c3f43)) (c3f35@regen c3f4b@e))))) c3f3e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c3f3c@t))))))) (set! c4b97@c30c7@syntax-transformer c30c7@syntax-transformer) (set! c30c9@core-macro-transformer (lambda (c406e@name) (let ((c4070@t c406e@name)) (if (memv c4070@t '(quote)) c306b@quote-transformer (if (memv c4070@t '(lambda)) c306f@lambda-transformer (if (memv c4070@t '(case-lambda)) c306d@case-lambda-transformer (if (memv c4070@t '(letrec)) c3053@letrec-transformer (if (memv c4070@t '(letrec*)) c3055@letrec*-transformer (if (memv c4070@t '(let)) c3051@let-transformer (if (memv c4070@t '(if)) c3063@if-transformer (if (memv c4070@t '(and)) c3065@and-transformer (if (memv c4070@t '(or)) c3067@or-transformer (if (memv c4070@t '(foreign-call)) c30b7@foreign-call-transformer (if (memv c4070@t '(syntax-case)) c30c3@syntax-case-transformer (if (memv c4070@t '(syntax)) c30c7@syntax-transformer (if (memv c4070@t '(type-descriptor)) c3059@type-descriptor-transformer (if (memv c4070@t '(record-type-descriptor)) c305b@record-type-descriptor-transformer (if (memv c4070@t '(record-constructor-descriptor)) c305d@record-constructor-descriptor-transformer (if (memv c4070@t '(fluid-let-syntax)) c3057@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" c406e@name)))))))))))))))))))) (set! c4b98@c30c9@core-macro-transformer c30c9@core-macro-transformer) (set! c30cb@symbol-macro (lambda (c4072@x c4073@set) (let ((c4076@t c4072@x)) (let ((c4078@ls/false (c30bb@syntax-dispatch c4076@t '(_ any)))) (if (and c4078@ls/false (apply (lambda (c407a@name) (and (c2eb4@id? c407a@name) (memq (c2eb6@id->sym c407a@name) c4073@set))) c4078@ls/false)) (apply (lambda (c407c@name) (c3071@bless (list 'quote c407c@name))) c4078@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4076@t)))))) (set! c4b99@c30cb@symbol-macro c30cb@symbol-macro) (set! c30cd@macro-transformer (lambda (c407e@x) (if (procedure? c407e@x) c407e@x (if (symbol? c407e@x) (let ((c4080@t c407e@x)) (if (memv c4080@t '(define-record-type)) c30af@define-record-type-macro (if (memv c4080@t '(define-struct)) c30ad@define-struct-macro (if (memv c4080@t '(include)) c30a3@include-macro (if (memv c4080@t '(cond)) c309f@cond-macro (if (memv c4080@t '(let)) c3077@let-macro (if (memv c4080@t '(do)) c3097@do-macro (if (memv c4080@t '(or)) c309b@or-macro (if (memv c4080@t '(and)) c309d@and-macro (if (memv c4080@t '(let*)) c3099@let*-macro (if (memv c4080@t '(let-values)) c3079@let-values-macro (if (memv c4080@t '(let*-values)) c307b@let*-values-macro (if (memv c4080@t '(syntax-rules)) c30a7@syntax-rules-macro (if (memv c4080@t '(quasiquote)) c30a9@quasiquote-macro (if (memv c4080@t '(quasisyntax)) c30ab@quasisyntax-macro (if (memv c4080@t '(with-syntax)) c3073@with-syntax-macro (if (memv c4080@t '(when)) c305f@when-macro (if (memv c4080@t '(unless)) c3061@unless-macro (if (memv c4080@t '(case)) c3069@case-macro (if (memv c4080@t '(identifier-syntax)) c3095@identifier-syntax-macro (if (memv c4080@t '(time)) c308d@time-macro (if (memv c4080@t '(delay)) c308f@delay-macro (if (memv c4080@t '(assert)) c3091@assert-macro (if (memv c4080@t '(endianness)) c3093@endianness-macro (if (memv c4080@t '(guard)) c3089@guard-macro (if (memv c4080@t '(define-enumeration)) c308b@define-enumeration-macro (if (memv c4080@t '(trace-lambda)) c307d@trace-lambda-macro (if (memv c4080@t '(trace-define)) c307f@trace-define-macro (if (memv c4080@t '(trace-define-syntax)) c3081@trace-define-syntax-macro (if (memv c4080@t '(trace-let-syntax)) c3085@trace-let-syntax-macro (if (memv c4080@t '(trace-letrec-syntax)) c3087@trace-letrec-syntax-macro (if (memv c4080@t '(define-condition-type)) c30b1@define-condition-type-macro (if (memv c4080@t '(parameterize)) c30b5@parameterize-macro (if (memv c4080@t '(include-into)) c30a5@include-into-macro (if (memv c4080@t '(eol-style)) (lambda (c4082@x) (c30cb@symbol-macro c4082@x '(none lf cr crlf nel crnel ls))) (if (memv c4080@t '(error-handling-mode)) (lambda (c4084@x) (c30cb@symbol-macro c4084@x '(ignore raise replace))) (if (memv c4080@t '(buffer-mode)) (lambda (c4086@x) (c30cb@symbol-macro c4086@x '(none line block))) (if (memv c4080@t '(file-options)) c2e2f@file-options-macro (if (memv c4080@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) c30b3@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" c407e@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" c407e@x))))) (set! c4b9a@c30cd@macro-transformer c30cd@macro-transformer) (set! c30cf@local-macro-transformer (lambda (c4088@x) (car c4088@x))) (set! c4b9b@c30cf@local-macro-transformer c30cf@local-macro-transformer) (set! c30d1@do-macro-call (lambda (c408a@transformer c408b@expr) (let ((c408e@out (c408a@transformer (c2e9e@add-mark c2e98@anti-mark c408b@expr '#f)))) (begin (let c4092@f ((c4090@x c408e@out)) (if (not (c2e80@stx? c4090@x)) (if (pair? c4090@x) (begin (c4092@f (car c4090@x)) (c4092@f (cdr c4090@x))) (if (vector? c4090@x) (vector-for-each c4092@f c4090@x) (if (symbol? c4090@x) (c319b@syntax-violation '#f '"raw symbol encountered in output of macro" c408b@expr c4090@x) (void)))) (void))) (c2e9e@add-mark (c2e96@gen-mark) c408e@out c408b@expr))))) (set! c4b9c@c30d1@do-macro-call c30d1@do-macro-call) (set! c30d3@chi-macro (lambda (c4094@p c4095@e) (c30d1@do-macro-call (c30cd@macro-transformer c4094@p) c4095@e))) (set! c4b9d@c30d3@chi-macro c30d3@chi-macro) (set! c30d5@chi-local-macro (lambda (c4098@p c4099@e) (c30d1@do-macro-call (c30cf@local-macro-transformer c4098@p) c4099@e))) (set! c4b9e@c30d5@chi-local-macro c30d5@chi-local-macro) (set! c30d7@chi-global-macro (lambda (c409c@p c409d@e) (let ((c40a0@lib (car c409c@p)) (c40a1@loc (cdr c409c@p))) (begin (c2cd1@c2b20@visit-library c40a0@lib) (let ((c40a4@x (symbol-value c40a1@loc))) (let ((c40a6@transformer (if (procedure? c40a4@x) c40a4@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" c40a4@x)))) (c30d1@do-macro-call c40a6@transformer c409d@e))))))) (set! c4b9f@c30d7@chi-global-macro c30d7@chi-global-macro) (set! c30d9@chi-expr* (lambda (c40a8@e* c40a9@r c40aa@mr) (if (null? c40a8@e*) '() (let ((c40ae@e (c30dd@chi-expr (car c40a8@e*) c40a9@r c40aa@mr))) (cons c40ae@e (c30d9@chi-expr* (cdr c40a8@e*) c40a9@r c40aa@mr)))))) (set! c4ba0@c30d9@chi-expr* c30d9@chi-expr*) (set! c30db@chi-application (lambda (c40b0@e c40b1@r c40b2@mr) (let ((c40b6@t c40b0@e)) (let ((c40b8@ls/false (c30bb@syntax-dispatch c40b6@t '(any . each-any)))) (if c40b8@ls/false (apply (lambda (c40ba@rator c40bb@rands) (let ((c40be@rator (c30dd@chi-expr c40ba@rator c40b1@r c40b2@mr))) (cons c40be@rator (c30d9@chi-expr* c40bb@rands c40b1@r c40b2@mr)))) c40b8@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c40b6@t)))))) (set! c4ba1@c30db@chi-application c30db@chi-application) (set! c30dd@chi-expr (lambda (c40c0@e c40c1@r c40c2@mr) (call-with-values (lambda () (c2ed6@syntax-type c40c0@e c40c1@r)) (lambda (c40cc@c40c7 c40cd@c40c9 c40ce@c40cb) (let ((c40d2@kwd c40ce@c40cb) (c40d3@value c40cd@c40c9) (c40d4@type c40cc@c40c7)) (let ((c40d8@t c40d4@type)) (if (memv c40d8@t '(core-macro)) (let ((c40da@transformer (c30c9@core-macro-transformer c40d3@value))) (c40da@transformer c40c0@e c40c1@r c40c2@mr)) (if (memv c40d8@t '(global)) (let ((c40dc@lib (car c40d3@value))) (let ((c40de@loc (cdr c40d3@value))) (begin ((c3123@inv-collector) c40dc@lib) c40de@loc))) (if (memv c40d8@t '(core-prim)) (let ((c40e0@name c40d3@value)) (list 'primitive c40e0@name)) (if (memv c40d8@t '(call)) (c30db@chi-application c40c0@e c40c1@r c40c2@mr) (if (memv c40d8@t '(lexical)) (let ((c40e2@lex (c3045@lexical-var c40d3@value))) c40e2@lex) (if (memv c40d8@t '(global-macro global-macro!)) (c30dd@chi-expr (c30d7@chi-global-macro c40d3@value c40c0@e) c40c1@r c40c2@mr) (if (memv c40d8@t '(local-macro local-macro!)) (c30dd@chi-expr (c30d5@chi-local-macro c40d3@value c40c0@e) c40c1@r c40c2@mr) (if (memv c40d8@t '(macro macro!)) (c30dd@chi-expr (c30d3@chi-macro c40d3@value c40c0@e) c40c1@r c40c2@mr) (if (memv c40d8@t '(constant)) (let ((c40e4@datum c40d3@value)) (list 'quote c40e4@datum)) (if (memv c40d8@t '(set!)) (c30df@chi-set! c40c0@e c40c1@r c40c2@mr) (if (memv c40d8@t '(begin)) (let ((c40e6@t c40c0@e)) (let ((c40e8@ls/false (c30bb@syntax-dispatch c40e6@t '(_ any . each-any)))) (if c40e8@ls/false (apply (lambda (c40ea@x c40eb@x*) (c2e19@c2d79@build-sequence '#f (c30d9@chi-expr* (cons c40ea@x c40eb@x*) c40c1@r c40c2@mr))) c40e8@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c40e6@t)))) (if (memv c40d8@t '(let-syntax letrec-syntax)) (let ((c40ee@t c40c0@e)) (let ((c40f0@ls/false (c30bb@syntax-dispatch c40ee@t '(_ #(each (any any)) any . each-any)))) (if (and c40f0@ls/false (apply (lambda (c40f2@xlhs* c40f3@xrhs* c40f4@xbody c40f5@xbody*) (if (not (c2ebc@valid-bound-ids? c40f2@xlhs*)) (c319b@syntax-violation '#f '"invalid identifiers" c40c0@e) (void))) c40f0@ls/false)) (apply (lambda (c40fa@xlhs* c40fb@xrhs* c40fc@xbody c40fd@xbody*) (let ((c4102@xlab* (map c2e40@gen-label c40fa@xlhs*))) (let ((c4104@xrib (c2e74@make-full-rib c40fa@xlhs* c4102@xlab*))) (let ((c4106@xb* (map (lambda (c4108@x) (c2eec@make-eval-transformer (c3115@expand-transformer (if (eq? c40d4@type 'let-syntax) c4108@x (c2ea0@add-subst c4104@xrib c4108@x)) c40c2@mr))) c40fb@xrhs*))) (c2e19@c2d79@build-sequence '#f (c30d9@chi-expr* (map (lambda (c410a@x) (c2ea0@add-subst c4104@xrib c410a@x)) (cons c40fc@xbody c40fd@xbody*)) (append (map cons c4102@xlab* c4106@xb*) c40c1@r) (append (map cons c4102@xlab* c4106@xb*) c40c2@mr))))))) c40f0@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c40ee@t)))) (if (memv c40d8@t '(displaced-lexical)) (c319b@syntax-violation '#f '"identifier out of context" c40c0@e) (if (memv c40d8@t '(syntax)) (c319b@syntax-violation '#f '"reference to pattern variable outside a syntax form" c40c0@e) (if (memv c40d8@t '(define define-syntax module import library)) (c319b@syntax-violation '#f (string-append (let ((c410c@t c40d4@type)) (if (memv c410c@t '(define)) '"a definition" (if (memv c410c@t '(define-syntax)) '"a define-syntax" (if (memv c410c@t '(module)) '"a module definition" (if (memv c410c@t '(library)) '"a library definition" (if (memv c410c@t '(import)) '"an import declaration" (if (memv c410c@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") c40c0@e) (if (memv c40d8@t '(mutable)) (c319b@syntax-violation '#f '"attempt to reference an unexportable variable" c40c0@e) (c319b@syntax-violation '#f '"invalid expression" c40c0@e))))))))))))))))))))))) (set! c4ba2@c30dd@chi-expr c30dd@chi-expr) (set! c30df@chi-set! (lambda (c410e@e c410f@r c4110@mr) (let ((c4114@t c410e@e)) (let ((c4116@ls/false (c30bb@syntax-dispatch c4114@t '(_ any any)))) (if (and c4116@ls/false (apply (lambda (c4118@x c4119@v) (c2eb4@id? c4118@x)) c4116@ls/false)) (apply (lambda (c411c@x c411d@v) (call-with-values (lambda () (c2ed6@syntax-type c411c@x c410f@r)) (lambda (c4126@c4121 c4127@c4123 c4128@c4125) (let ((c412c@kwd c4128@c4125) (c412d@value c4127@c4123) (c412e@type c4126@c4121)) (let ((c4132@t c412e@type)) (if (memv c4132@t '(lexical)) (begin (c3049@set-lexical-mutable! c412d@value '#t) (list 'set! (c3045@lexical-var c412d@value) (c30dd@chi-expr c411d@v c410f@r c4110@mr))) (if (memv c4132@t '(core-prim)) (c319b@syntax-violation '#f '"cannot modify imported core primitive" c410e@e) (if (memv c4132@t '(global)) (c319b@syntax-violation '#f '"attempt to modify imported binding" c410e@e) (if (memv c4132@t '(global-macro!)) (c30dd@chi-expr (c30d7@chi-global-macro c412d@value c410e@e) c410f@r c4110@mr) (if (memv c4132@t '(local-macro!)) (c30dd@chi-expr (c30d5@chi-local-macro c412d@value c410e@e) c410f@r c4110@mr) (if (memv c4132@t '(mutable)) (c319b@syntax-violation '#f '"attempt to assign to an unexportable variable" c410e@e) (c319b@syntax-violation '#f '"invalid syntax" c410e@e)))))))))))) c4116@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4114@t)))))) (set! c4ba3@c30df@chi-set! c30df@chi-set!) (set! c30e1@verify-formals (lambda (c4134@fmls c4135@stx) (let ((c4138@t c4134@fmls)) (let ((c413a@ls/false (c30bb@syntax-dispatch c4138@t 'each-any))) (if c413a@ls/false (apply (lambda (c413c@x*) (if (not (c2ebc@valid-bound-ids? c413c@x*)) (c3075@invalid-fmls-error c4135@stx c4134@fmls) (void))) c413a@ls/false) (let ((c413e@t c4138@t)) (let ((c4140@ls/false (c30bb@syntax-dispatch c413e@t '#(each+ any () any)))) (if c4140@ls/false (apply (lambda (c4142@x* c4143@x) (if (not (c2ebc@valid-bound-ids? (cons c4143@x c4142@x*))) (c3075@invalid-fmls-error c4135@stx c4134@fmls) (void))) c4140@ls/false) (let ((c4146@t c413e@t)) (let ((c4148@ls/false (c30bb@syntax-dispatch c4146@t '_))) (if c4148@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid syntax" c4135@stx)) c4148@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4146@t)))))))))))) (set! c4ba4@c30e1@verify-formals c30e1@verify-formals) (set! c30e3@chi-lambda-clause (lambda (c414a@stx c414b@fmls c414c@body* c414d@r c414e@mr) (let ((c4154@t c414b@fmls)) (let ((c4156@ls/false (c30bb@syntax-dispatch c4154@t 'each-any))) (if c4156@ls/false (apply (lambda (c4158@x*) (begin (c30e1@verify-formals c414b@fmls c414a@stx) (let ((c415a@lex* (map c2e3c@gen-lexical c4158@x*)) (c415b@lab* (map c2e40@gen-label c4158@x*))) (values c415a@lex* (c30f3@chi-internal (c2ea0@add-subst (c2e74@make-full-rib c4158@x* c415b@lab*) c414c@body*) (c304d@add-lexicals c415b@lab* c415a@lex* c414d@r) c414e@mr))))) c4156@ls/false) (let ((c415e@t c4154@t)) (let ((c4160@ls/false (c30bb@syntax-dispatch c415e@t '#(each+ any () any)))) (if c4160@ls/false (apply (lambda (c4162@x* c4163@x) (begin (c30e1@verify-formals c414b@fmls c414a@stx) (let ((c4166@lex* (map c2e3c@gen-lexical c4162@x*)) (c4167@lab* (map c2e40@gen-label c4162@x*)) (c4168@lex (c2e3c@gen-lexical c4163@x)) (c4169@lab (c2e40@gen-label c4163@x))) (values (append c4166@lex* c4168@lex) (c30f3@chi-internal (c2ea0@add-subst (c2e74@make-full-rib (cons c4163@x c4162@x*) (cons c4169@lab c4167@lab*)) c414c@body*) (c304d@add-lexicals (cons c4169@lab c4167@lab*) (cons c4168@lex c4166@lex*) c414d@r) c414e@mr))))) c4160@ls/false) (let ((c416e@t c415e@t)) (let ((c4170@ls/false (c30bb@syntax-dispatch c416e@t '_))) (if c4170@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid syntax" c414b@fmls)) c4170@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c416e@t)))))))))))) (set! c4ba5@c30e3@chi-lambda-clause c30e3@chi-lambda-clause) (set! c30e5@chi-lambda-clause* (lambda (c4172@stx c4173@fmls* c4174@body** c4175@r c4176@mr) (if (null? c4173@fmls*) (values '() '()) (call-with-values (lambda () (c30e3@chi-lambda-clause c4172@stx (car c4173@fmls*) (car c4174@body**) c4175@r c4176@mr)) (lambda (c4180@c417d c4181@c417f) (let ((c4184@b c4181@c417f) (c4185@a c4180@c417d)) (call-with-values (lambda () (c30e5@chi-lambda-clause* c4172@stx (cdr c4173@fmls*) (cdr c4174@body**) c4175@r c4176@mr)) (lambda (c418c@c4189 c418d@c418b) (let ((c4190@b* c418d@c418b) (c4191@a* c418c@c4189)) (values (cons c4185@a c4191@a*) (cons c4184@b c4190@b*))))))))))) (set! c4ba6@c30e5@chi-lambda-clause* c30e5@chi-lambda-clause*) (set! c30e7@chi-defun (lambda (c4194@x c4195@r c4196@mr) (let ((c419a@fmls (car c4194@x)) (c419b@body* (cdr c4194@x))) (call-with-values (lambda () (c30e3@chi-lambda-clause c419a@fmls c419a@fmls c419b@body* c4195@r c4196@mr)) (lambda (c41a2@c419f c41a3@c41a1) (let ((c41a6@body c41a3@c41a1) (c41a7@fmls c41a2@c419f)) (c2e17@c2d49@build-lambda '#f c41a7@fmls c41a6@body))))))) (set! c4ba7@c30e7@chi-defun c30e7@chi-defun) (set! c30e9@chi-rhs (lambda (c41aa@rhs c41ab@r c41ac@mr) (let ((c41b0@t (car c41aa@rhs))) (if (memv c41b0@t '(defun)) (c30e7@chi-defun (cdr c41aa@rhs) c41ab@r c41ac@mr) (if (memv c41b0@t '(expr)) (let ((c41b2@expr (cdr c41aa@rhs))) (c30dd@chi-expr c41b2@expr c41ab@r c41ac@mr)) (if (memv c41b0@t '(top-expr)) (let ((c41b4@expr (cdr c41aa@rhs))) (c2e19@c2d79@build-sequence '#f (list (c30dd@chi-expr c41b4@expr c41ab@r c41ac@mr) (c2e1a@c2d7b@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" c41aa@rhs))))))) (set! c4ba8@c30e9@chi-rhs c30e9@chi-rhs) (set! c30eb@expand-interaction-rhs*/init* (lambda (c41b6@lhs* c41b7@rhs* c41b8@init* c41b9@r c41ba@mr) (let c41c4@f ((c41c0@lhs* c41b6@lhs*) (c41c1@rhs* c41b7@rhs*)) (if (null? c41c0@lhs*) (map (lambda (c41c6@x) (c30dd@chi-expr c41c6@x c41b9@r c41ba@mr)) c41b8@init*) (let ((c41c8@lhs (car c41c0@lhs*)) (c41c9@rhs (car c41c1@rhs*))) (let ((c41cc@t (car c41c9@rhs))) (if (memv c41cc@t '(defun)) (let ((c41ce@rhs (c30e7@chi-defun (cdr c41c9@rhs) c41b9@r c41ba@mr))) (cons (list 'set! c41c8@lhs c41ce@rhs) (c41c4@f (cdr c41c0@lhs*) (cdr c41c1@rhs*)))) (if (memv c41cc@t '(expr)) (let ((c41d0@rhs (c30dd@chi-expr (cdr c41c9@rhs) c41b9@r c41ba@mr))) (cons (list 'set! c41c8@lhs c41d0@rhs) (c41c4@f (cdr c41c0@lhs*) (cdr c41c1@rhs*)))) (if (memv c41cc@t '(top-expr)) (let ((c41d2@e (c30dd@chi-expr (cdr c41c9@rhs) c41b9@r c41ba@mr))) (cons c41d2@e (c41c4@f (cdr c41c0@lhs*) (cdr c41c1@rhs*)))) (error 'expand-interaction '"invallid" c41c9@rhs)))))))))) (set! c4ba9@c30eb@expand-interaction-rhs*/init* c30eb@expand-interaction-rhs*/init*) (set! c30ed@chi-rhs* (lambda (c41d4@rhs* c41d5@r c41d6@mr) (let c41dc@f ((c41da@ls c41d4@rhs*)) (if (null? c41da@ls) '() (let ((c41de@a (c30e9@chi-rhs (car c41da@ls) c41d5@r c41d6@mr))) (cons c41de@a (c41dc@f (cdr c41da@ls)))))))) (set! c4baa@c30ed@chi-rhs* c30ed@chi-rhs*) (set! c30ef@find-bound=? (lambda (c41e0@x c41e1@lhs* c41e2@rhs*) (if (null? c41e1@lhs*) '#f (if (c2eb8@bound-id=? c41e0@x (car c41e1@lhs*)) (car c41e2@rhs*) (c30ef@find-bound=? c41e0@x (cdr c41e1@lhs*) (cdr c41e2@rhs*)))))) (set! c4bab@c30ef@find-bound=? c30ef@find-bound=?) (set! c30f1@find-dups (lambda (c41e6@ls) (let c41ec@f ((c41e8@ls c41e6@ls) (c41e9@dups '())) (if (null? c41e8@ls) c41e9@dups (let ((c41ee@t (c30ef@find-bound=? (car c41e8@ls) (cdr c41e8@ls) (cdr c41e8@ls)))) (if c41ee@t ((lambda (c41f0@x) (c41ec@f (cdr c41e8@ls) (cons (list (car c41e8@ls) c41f0@x) c41e9@dups))) c41ee@t) (c41ec@f (cdr c41e8@ls) c41e9@dups))))))) (set! c4bac@c30f1@find-dups c30f1@find-dups) (set! c30f3@chi-internal (lambda (c41f2@e* c41f3@r c41f4@mr) (let ((c41f8@rib (c2e68@make-empty-rib))) (call-with-values (lambda () (c3113@chi-body* (map (lambda (c420a@x) (c2ea0@add-subst c41f8@rib c420a@x)) (c2eb2@syntax->list c41f2@e*)) c41f3@r c41f4@mr '() '() '() '() '() c41f8@rib '#f)) (lambda (c420c@c41fb c420d@c41fd c420e@c41ff c420f@c4201 c4210@c4203 c4211@c4205 c4212@c4207 c4213@c4209) (let ((c421c@_exp* c4213@c4209) (c421d@kwd* c4212@c4207) (c421e@mod** c4211@c4205) (c421f@rhs* c4210@c4203) (c4220@lex* c420f@c4201) (c4221@mr c420e@c41ff) (c4222@r c420d@c41fd) (c4223@e* c420c@c41fb)) (begin (if (null? c4223@e*) (c319b@syntax-violation '#f '"no expression in body" c4223@e*) (void)) (let ((c422c@init* (c30d9@chi-expr* (append (apply append (reverse c421e@mod**)) c4223@e*) c4222@r c4221@mr))) (let ((c422e@rhs* (c30ed@chi-rhs* c421f@rhs* c4222@r c4221@mr))) (c2e1e@c2d83@build-letrec* '#f (reverse c4220@lex*) (reverse c422e@rhs*) (c2e19@c2d79@build-sequence '#f c422c@init*))))))))))) (set! c4bad@c30f3@chi-internal c30f3@chi-internal) (set! c30f5@parse-module (lambda (c4230@e) (let ((c4232@t c4230@e)) (let ((c4234@ls/false (c30bb@syntax-dispatch c4232@t '(_ each-any . each-any)))) (if c4234@ls/false (apply (lambda (c4236@export* c4237@b*) (begin (if (not (for-all c2eb4@id? c4236@export*)) (c319b@syntax-violation '#f '"module exports must be identifiers" c4230@e) (void)) (values '#f (list->vector c4236@export*) c4237@b*))) c4234@ls/false) (let ((c423a@t c4232@t)) (let ((c423c@ls/false (c30bb@syntax-dispatch c423a@t '(_ any each-any . each-any)))) (if c423c@ls/false (apply (lambda (c423e@name c423f@export* c4240@b*) (begin (if (not (c2eb4@id? c423e@name)) (c319b@syntax-violation '#f '"module name must be an identifier" c4230@e) (void)) (if (not (for-all c2eb4@id? c423f@export*)) (c319b@syntax-violation '#f '"module exports must be identifiers" c4230@e) (void)) (values c423e@name (list->vector c423f@export*) c4240@b*))) c423c@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c423a@t))))))))) (set! c4bae@c30f5@parse-module c30f5@parse-module) (set! c30ff@module-interface? (lambda (c4244@x) (and (simple-struct? c4244@x) (eq? (simple-struct-name c4244@x) 'module-interface)))) (set! c4baf@c30ff@module-interface? c30ff@module-interface?) (set! c3101@module-interface-first-mark (lambda (c4246@x) (simple-struct-ref c4246@x '0))) (set! c4bb0@c3101@module-interface-first-mark c3101@module-interface-first-mark) (set! c3103@set-module-interface-first-mark! (lambda (c4248@x c4249@val) (simple-struct-set! c4248@x '0 c4249@val))) (set! c4bb1@c3103@set-module-interface-first-mark! c3103@set-module-interface-first-mark!) (set! c3105@module-interface-exp-id-vec (lambda (c424c@x) (simple-struct-ref c424c@x '1))) (set! c4bb2@c3105@module-interface-exp-id-vec c3105@module-interface-exp-id-vec) (set! c3107@set-module-interface-exp-id-vec! (lambda (c424e@x c424f@val) (simple-struct-set! c424e@x '1 c424f@val))) (set! c4bb3@c3107@set-module-interface-exp-id-vec! c3107@set-module-interface-exp-id-vec!) (set! c3109@module-interface-exp-lab-vec (lambda (c4252@x) (simple-struct-ref c4252@x '2))) (set! c4bb4@c3109@module-interface-exp-lab-vec c3109@module-interface-exp-lab-vec) (set! c310b@set-module-interface-exp-lab-vec! (lambda (c4254@x c4255@val) (simple-struct-set! c4254@x '2 c4255@val))) (set! c4bb5@c310b@set-module-interface-exp-lab-vec! c310b@set-module-interface-exp-lab-vec!) (set! c310d@dummy '3) (set! c4bb6@c310d@dummy c310d@dummy) (set! c310f@module-interface-exp-id* (lambda (c4258@iface c4259@id) (letrec* ((c425d@diff-marks (lambda (c4264@ls c4265@x) (begin (if (null? c4264@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((c4268@a (car c4264@ls))) (if (eq? c4268@a c4265@x) '() (cons c4268@a (c425d@diff-marks (cdr c4264@ls) c4265@x)))))))) (let ((c425e@diff (c425d@diff-marks (c2e86@stx-mark* c4259@id) (c3101@module-interface-first-mark c4258@iface))) (c425f@id-vec (c3105@module-interface-exp-id-vec c4258@iface))) (if (null? c425e@diff) c425f@id-vec (vector-map (lambda (c4262@x) (make-simple-struct 'stx '5 (list (c2e82@stx-expr c4262@x) (append c425e@diff (c2e86@stx-mark* c4262@x)) '() '()))) c425f@id-vec)))))) (set! c4bb7@c310f@module-interface-exp-id* c310f@module-interface-exp-id*) (set! c3111@chi-internal-module (lambda (c426a@e c426b@r c426c@mr c426d@lex* c426e@rhs* c426f@mod** c4270@kwd*) (call-with-values (lambda () (c30f5@parse-module c426a@e)) (lambda (c427e@c4279 c427f@c427b c4280@c427d) (let ((c4284@e* c4280@c427d) (c4285@exp-id* c427f@c427b) (c4286@name c427e@c4279)) (let ((c428a@rib (c2e68@make-empty-rib))) (let ((c428c@e* (map (lambda (c428e@x) (c2ea0@add-subst c428a@rib c428e@x)) (c2eb2@syntax->list c4284@e*)))) (call-with-values (lambda () (c3113@chi-body* c428c@e* c426b@r c426c@mr c426d@lex* c426e@rhs* c426f@mod** c4270@kwd* '() c428a@rib '#f)) (lambda (c42a0@c4291 c42a1@c4293 c42a2@c4295 c42a3@c4297 c42a4@c4299 c42a5@c429b c42a6@c429d c42a7@c429f) (let ((c42b0@_exp* c42a7@c429f) (c42b1@kwd* c42a6@c429d) (c42b2@mod** c42a5@c429b) (c42b3@rhs* c42a4@c4299) (c42b4@lex* c42a3@c4297) (c42b5@mr c42a2@c4295) (c42b6@r c42a1@c4293) (c42b7@e* c42a0@c4291)) (let ((c42c0@exp-lab* (vector-map (lambda (c42c4@x) (or (c2eca@id->label (make-simple-struct 'stx '5 (list (c2eb6@id->sym c42c4@x) (c2e86@stx-mark* c42c4@x) (list c428a@rib) '()))) (c319b@syntax-violation '#f '"cannot find module export" c42c4@x))) c4285@exp-id*)) (c42c1@mod** (cons c42b7@e* c42b2@mod**))) (if (not c4286@name) (values c42b4@lex* c42b3@rhs* c4285@exp-id* c42c0@exp-lab* c42b6@r c42b5@mr c42c1@mod** c42b1@kwd*) (let ((c42c6@lab (c2e40@gen-label 'module)) (c42c7@iface (make-simple-struct 'module-interface '4 (list (car (c2e86@stx-mark* c4286@name)) (vector-map (lambda (c42ca@x) (make-simple-struct 'stx '5 (list (c2e82@stx-expr c42ca@x) (c2e86@stx-mark* c42ca@x) '() '()))) c4285@exp-id*) c42c0@exp-lab*)))) (values c42b4@lex* c42b3@rhs* (vector c4286@name) (vector c42c6@lab) (cons (cons c42c6@lab (cons '$module c42c7@iface)) c42b6@r) (cons (cons c42c6@lab (cons '$module c42c7@iface)) c42b5@mr) c42c1@mod** c42b1@kwd*)))))))))))))) (set! c4bb8@c3111@chi-internal-module c3111@chi-internal-module) (set! c3113@chi-body* (lambda (c42cc@e* c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42d2@kwd* c42d3@exp* c42d4@rib c42d5@top?) (if (null? c42cc@e*) (values c42cc@e* c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42d2@kwd* c42d3@exp*) (let ((c42e0@e (car c42cc@e*))) (call-with-values (lambda () (c2ed6@syntax-type c42e0@e c42cd@r)) (lambda (c42e8@c42e3 c42e9@c42e5 c42ea@c42e7) (let ((c42ee@kwd c42ea@c42e7) (c42ef@value c42e9@c42e5) (c42f0@type c42e8@c42e3)) (let ((c42f4@kwd* (if (c2eb4@id? c42ee@kwd) (cons c42ee@kwd c42d2@kwd*) c42d2@kwd*))) (let ((c42f6@t c42f0@type)) (if (memv c42f6@t '(define)) (call-with-values (lambda () (c303d@parse-define c42e0@e)) (lambda (c42fc@c42f9 c42fd@c42fb) (let ((c4300@rhs c42fd@c42fb) (c4301@id c42fc@c42f9)) (begin (if (c2ec0@bound-id-member? c4301@id c42f4@kwd*) (c319b@syntax-violation '#f '"cannot redefine keyword" c42e0@e) (void)) (call-with-values (lambda () (c2e44@gen-define-label+loc c4301@id c42d4@rib)) (lambda (c4308@c4305 c4309@c4307) (let ((c430c@lex c4309@c4307) (c430d@lab c4308@c4305)) (begin (c2e6a@extend-rib! c42d4@rib c4301@id c430d@lab) (c3113@chi-body* (cdr c42cc@e*) (c304b@add-lexical c430d@lab c430c@lex c42cd@r) c42ce@mr (cons c430c@lex c42cf@lex*) (cons c4300@rhs c42d0@rhs*) c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?))))))))) (if (memv c42f6@t '(define-syntax)) (call-with-values (lambda () (c303f@parse-define-syntax c42e0@e)) (lambda (c4314@c4311 c4315@c4313) (let ((c4318@rhs c4315@c4313) (c4319@id c4314@c4311)) (begin (if (c2ec0@bound-id-member? c4319@id c42f4@kwd*) (c319b@syntax-violation '#f '"cannot redefine keyword" c42e0@e) (void)) (let ((c431c@lab (c2e46@gen-define-label c4319@id c42d4@rib)) (c431d@expanded-rhs (c3115@expand-transformer c4318@rhs c42ce@mr))) (begin (c2e6a@extend-rib! c42d4@rib c4319@id c431c@lab) (let ((c4320@b (c2eec@make-eval-transformer c431d@expanded-rhs))) (c3113@chi-body* (cdr c42cc@e*) (cons (cons c431c@lab c4320@b) c42cd@r) (cons (cons c431c@lab c4320@b) c42ce@mr) c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?)))))))) (if (memv c42f6@t '(let-syntax letrec-syntax)) (let ((c4322@t c42e0@e)) (let ((c4324@ls/false (c30bb@syntax-dispatch c4322@t '(_ #(each (any any)) . each-any)))) (if (and c4324@ls/false (apply (lambda (c4326@xlhs* c4327@xrhs* c4328@xbody*) (if (not (c2ebc@valid-bound-ids? c4326@xlhs*)) (c319b@syntax-violation '#f '"invalid identifiers" c42e0@e) (void))) c4324@ls/false)) (apply (lambda (c432c@xlhs* c432d@xrhs* c432e@xbody*) (let ((c4332@xlab* (map c2e40@gen-label c432c@xlhs*))) (let ((c4334@xrib (c2e74@make-full-rib c432c@xlhs* c4332@xlab*))) (let ((c4336@xb* (map (lambda (c4338@x) (c2eec@make-eval-transformer (c3115@expand-transformer (if (eq? c42f0@type 'let-syntax) c4338@x (c2ea0@add-subst c4334@xrib c4338@x)) c42ce@mr))) c432d@xrhs*))) (c3113@chi-body* (append (map (lambda (c433a@x) (c2ea0@add-subst c4334@xrib c433a@x)) c432e@xbody*) (cdr c42cc@e*)) (append (map cons c4332@xlab* c4336@xb*) c42cd@r) (append (map cons c4332@xlab* c4336@xb*) c42ce@mr) c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?))))) c4324@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4322@t)))) (if (memv c42f6@t '(begin)) (let ((c433c@t c42e0@e)) (let ((c433e@ls/false (c30bb@syntax-dispatch c433c@t '(_ . each-any)))) (if c433e@ls/false (apply (lambda (c4340@x*) (c3113@chi-body* (append c4340@x* (cdr c42cc@e*)) c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?)) c433e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c433c@t)))) (if (memv c42f6@t '(global-macro global-macro!)) (c3113@chi-body* (cons (c2ea0@add-subst c42d4@rib (c30d7@chi-global-macro c42ef@value c42e0@e)) (cdr c42cc@e*)) c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?) (if (memv c42f6@t '(local-macro local-macro!)) (c3113@chi-body* (cons (c2ea0@add-subst c42d4@rib (c30d5@chi-local-macro c42ef@value c42e0@e)) (cdr c42cc@e*)) c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?) (if (memv c42f6@t '(macro macro!)) (c3113@chi-body* (cons (c2ea0@add-subst c42d4@rib (c30d3@chi-macro c42ef@value c42e0@e)) (cdr c42cc@e*)) c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?) (if (memv c42f6@t '(module)) (call-with-values (lambda () (c3111@chi-internal-module c42e0@e c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd*)) (lambda (c4352@c4343 c4353@c4345 c4354@c4347 c4355@c4349 c4356@c434b c4357@c434d c4358@c434f c4359@c4351) (let ((c4362@kwd* c4359@c4351) (c4363@mod** c4358@c434f) (c4364@mr c4357@c434d) (c4365@r c4356@c434b) (c4366@m-exp-lab* c4355@c4349) (c4367@m-exp-id* c4354@c4347) (c4368@rhs* c4353@c4345) (c4369@lex* c4352@c4343)) (begin (vector-for-each (lambda (c4372@id c4373@lab) (c2e6a@extend-rib! c42d4@rib c4372@id c4373@lab)) c4367@m-exp-id* c4366@m-exp-lab*) (c3113@chi-body* (cdr c42cc@e*) c4365@r c4364@mr c4369@lex* c4368@rhs* c4363@mod** c4362@kwd* c42d3@exp* c42d4@rib c42d5@top?))))) (if (memv c42f6@t '(library)) (begin (c317d@library-expander (c2ec8@stx->datum c42e0@e)) (c3113@chi-body* (cdr c42cc@e*) c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?)) (if (memv c42f6@t '(export)) (let ((c4376@t c42e0@e)) (let ((c4378@ls/false (c30bb@syntax-dispatch c4376@t '(_ . each-any)))) (if c4378@ls/false (apply (lambda (c437a@exp-decl*) (c3113@chi-body* (cdr c42cc@e*) c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* (append c437a@exp-decl* c42d3@exp*) c42d4@rib c42d5@top?)) c4378@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4376@t)))) (if (memv c42f6@t '(import)) (letrec* ((c437d@module-import? (lambda (c43d0@e) (let ((c43d2@t c43d0@e)) (let ((c43d4@ls/false (c30bb@syntax-dispatch c43d2@t '(_ any)))) (if (and c43d4@ls/false (apply (lambda (c43d6@id) (c2eb4@id? c43d6@id)) c43d4@ls/false)) (apply (lambda (c43d8@id) '#t) c43d4@ls/false) (let ((c43da@t c43d2@t)) (let ((c43dc@ls/false (c30bb@syntax-dispatch c43da@t '(_ . each-any)))) (if c43dc@ls/false (apply (lambda (c43de@imp*) '#f) c43dc@ls/false) (let ((c43e0@t c43da@t)) (let ((c43e2@ls/false (c30bb@syntax-dispatch c43e0@t '_))) (if c43e2@ls/false (apply (lambda () (c319b@syntax-violation '#f '"malformed import form" c43d0@e)) c43e2@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c43e0@t)))))))))))) (c437f@module-import (lambda (c43ae@e c43af@r) (let ((c43b2@t c43ae@e)) (let ((c43b4@ls/false (c30bb@syntax-dispatch c43b2@t '(_ any)))) (if (and c43b4@ls/false (apply (lambda (c43b6@id) (c2eb4@id? c43b6@id)) c43b4@ls/false)) (apply (lambda (c43b8@id) (call-with-values (lambda () (c2ed6@syntax-type c43b8@id c43af@r)) (lambda (c43c0@c43bb c43c1@c43bd c43c2@c43bf) (let ((c43c6@kwd c43c2@c43bf) (c43c7@value c43c1@c43bd) (c43c8@type c43c0@c43bb)) (let ((c43cc@t c43c8@type)) (if (memv c43cc@t '($module)) (let ((c43ce@iface c43c7@value)) (values (c310f@module-interface-exp-id* c43ce@iface c43b8@id) (c3109@module-interface-exp-lab-vec c43ce@iface))) (c319b@syntax-violation '#f '"invalid import" c43ae@e))))))) c43b4@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c43b2@t)))))) (c4381@library-import (lambda (c4392@e) (let ((c4394@t c4392@e)) (let ((c4396@ls/false (c30bb@syntax-dispatch c4394@t '(any . each-any)))) (if c4396@ls/false (apply (lambda (c4398@ctxt c4399@imp*) (call-with-values (lambda () (c311d@parse-import-spec* (c31a1@syntax->datum c4399@imp*))) (lambda (c43a0@c439d c43a1@c439f) (let ((c43a4@subst-labels c43a1@c439f) (c43a5@subst-names c43a0@c439d)) (values (vector-map (lambda (c43a8@name) (c2e94@datum->stx c4398@ctxt c43a8@name)) c43a5@subst-names) c43a4@subst-labels))))) c4396@ls/false) (let ((c43aa@t c4394@t)) (let ((c43ac@ls/false (c30bb@syntax-dispatch c43aa@t '_))) (if c43ac@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid import form" c4392@e)) c43ac@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c43aa@t)))))))))) (begin (call-with-values (lambda () (if (c437d@module-import? c42e0@e) (c437f@module-import c42e0@e c42cd@r) (c4381@library-import c42e0@e))) (lambda (c4386@c4383 c4387@c4385) (let ((c438a@lab* c4387@c4385) (c438b@id* c4386@c4383)) (vector-for-each (lambda (c438e@id c438f@lab) (c2e6a@extend-rib! c42d4@rib c438e@id c438f@lab)) c438b@id* c438a@lab*)))) (c3113@chi-body* (cdr c42cc@e*) c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?))) (if c42d5@top? (c3113@chi-body* (cdr c42cc@e*) c42cd@r c42ce@mr (cons (c2e3c@gen-lexical 'dummy) c42cf@lex*) (cons (cons 'top-expr c42e0@e) c42d0@rhs*) c42d1@mod** c42f4@kwd* c42d3@exp* c42d4@rib c42d5@top?) (values c42cc@e* c42cd@r c42ce@mr c42cf@lex* c42d0@rhs* c42d1@mod** c42f4@kwd* c42d3@exp*)))))))))))))))))))))) (set! c4bb9@c3113@chi-body* c3113@chi-body*) (set! c3115@expand-transformer (lambda (c43e4@expr c43e5@r) (let ((c43e8@rtc (c3121@make-collector))) (let ((c43ea@expanded-rhs (let ((c43f4@c43ed c3123@inv-collector) (c43f5@c43ef c3125@vis-collector) (c43f6@c43f1 c43e8@rtc) (c43f7@c43f3 (lambda (c43fc@x) (values)))) (let ((c43fe@swap (lambda () (begin (let ((c4400@t (c43f4@c43ed))) (begin (c43f4@c43ed c43f6@c43f1) (set! c43f6@c43f1 c4400@t))) (let ((c4402@t (c43f5@c43ef))) (begin (c43f5@c43ef c43f7@c43f3) (set! c43f7@c43f3 c4402@t))))))) (dynamic-wind c43fe@swap (lambda () (c30dd@chi-expr c43e4@expr c43e5@r c43e5@r)) c43fe@swap))))) (begin (for-each (let ((c4404@mark-visit (c3125@vis-collector))) (lambda (c4406@x) (begin (c2cd0@c2b1e@invoke-library c4406@x) (c4404@mark-visit c4406@x)))) (c43e8@rtc)) c43ea@expanded-rhs))))) (set! c4bba@c3115@expand-transformer c3115@expand-transformer) (set! c3117@parse-exports (lambda (c4408@exp*) (let c4410@f ((c440a@exp* c4408@exp*) (c440b@int* '()) (c440c@ext* '())) (if (null? c440a@exp*) (begin (if (not (c2ebc@valid-bound-ids? c440c@ext*)) (c319b@syntax-violation 'export '"invalid exports" (c30f1@find-dups c440c@ext*)) (void)) (values (map c31a1@syntax->datum c440c@ext*) c440b@int*)) (let ((c4412@t (car c440a@exp*))) (let ((c4414@ls/false (c30bb@syntax-dispatch c4412@t '(any . #(each (any any)))))) (if c4414@ls/false (apply (lambda (c4416@rename c4417@i* c4418@e*) (begin (if (not (and (eq? (c31a1@syntax->datum c4416@rename) 'rename) (for-all c2eb4@id? c4417@i*) (for-all c2eb4@id? c4418@e*))) (c319b@syntax-violation 'export '"invalid export specifier" (car c440a@exp*)) (void)) (c4410@f (cdr c440a@exp*) (append c4417@i* c440b@int*) (append c4418@e* c440c@ext*)))) c4414@ls/false) (let ((c441c@t c4412@t)) (let ((c441e@ls/false (c30bb@syntax-dispatch c441c@t 'any))) (if c441e@ls/false (apply (lambda (c4420@ie) (begin (if (not (c2eb4@id? c4420@ie)) (c319b@syntax-violation 'export '"invalid export" c4420@ie) (void)) (c4410@f (cdr c440a@exp*) (cons c4420@ie c440b@int*) (cons c4420@ie c440c@ext*)))) c441e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c441c@t))))))))))) (set! c4bbb@c3117@parse-exports c3117@parse-exports) (set! c3119@parse-library-name (lambda (c4422@spec) (letrec* ((c4425@parse (lambda (c4432@x) (let ((c4434@t c4432@x)) (let ((c4436@ls/false (c30bb@syntax-dispatch c4434@t '(each-any)))) (if (and c4436@ls/false (apply (lambda (c4438@v*) (for-all (lambda (c443a@x) (let ((c443c@x (c31a1@syntax->datum c443a@x))) (and (integer? c443c@x) (exact? c443c@x)))) c4438@v*)) c4436@ls/false)) (apply (lambda (c443e@v*) (values '() (map c31a1@syntax->datum c443e@v*))) c4436@ls/false) (let ((c4440@t c4434@t)) (let ((c4442@ls/false (c30bb@syntax-dispatch c4440@t '(any . any)))) (if (and c4442@ls/false (apply (lambda (c4444@x c4445@rest) (symbol? (c31a1@syntax->datum c4444@x))) c4442@ls/false)) (apply (lambda (c4448@x c4449@rest) (call-with-values (lambda () (c4425@parse c4449@rest)) (lambda (c4450@c444d c4451@c444f) (let ((c4454@v* c4451@c444f) (c4455@x* c4450@c444d)) (values (cons (c31a1@syntax->datum c4448@x) c4455@x*) c4454@v*))))) c4442@ls/false) (let ((c4458@t c4440@t)) (let ((c445a@ls/false (c30bb@syntax-dispatch c4458@t '()))) (if c445a@ls/false (apply (lambda () (values '() '())) c445a@ls/false) (let ((c445c@t c4458@t)) (let ((c445e@ls/false (c30bb@syntax-dispatch c445c@t '_))) (if c445e@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid library name" c4422@spec)) c445e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c445c@t)))))))))))))))) (call-with-values (lambda () (c4425@parse c4422@spec)) (lambda (c442a@c4427 c442b@c4429) (let ((c442e@ver* c442b@c4429) (c442f@name* c442a@c4427)) (begin (if (null? c442f@name*) (c319b@syntax-violation '#f '"empty library name" c4422@spec) (void)) (values c442f@name* c442e@ver*)))))))) (set! c4bbc@c3119@parse-library-name c3119@parse-library-name) (set! c311b@parse-library (lambda (c4460@e) (let ((c4462@t c4460@e)) (let ((c4464@ls/false (c30bb@syntax-dispatch c4462@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and c4464@ls/false (apply (lambda (c4466@library c4467@name* c4468@export c4469@exp* c446a@import c446b@imp* c446c@b*) (and (eq? (c31a1@syntax->datum c4468@export) 'export) (eq? (c31a1@syntax->datum c446a@import) 'import) (eq? (c31a1@syntax->datum c4466@library) 'library))) c4464@ls/false)) (apply (lambda (c4474@library c4475@name* c4476@export c4477@exp* c4478@import c4479@imp* c447a@b*) (values c4475@name* c4477@exp* c4479@imp* c447a@b*)) c4464@ls/false) (let ((c4482@t c4462@t)) (let ((c4484@ls/false (c30bb@syntax-dispatch c4482@t '_))) (if c4484@ls/false (apply (lambda () (c319b@syntax-violation '#f '"malformed library" c4460@e)) c4484@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4482@t))))))))) (set! c4bbd@c311b@parse-library c311b@parse-library) (set! c311d@parse-import-spec* (letrec* ((c4487@idsyn? (lambda (c4690@x) (symbol? (c31a1@syntax->datum c4690@x)))) (c4489@dup-error (lambda (c468e@name) (c319b@syntax-violation 'import '"two imports with different bindings" c468e@name))) (c448b@merge-substs (lambda (c467c@s c467d@subst) (letrec* ((c4681@insert-to-subst (lambda (c4682@a c4683@subst) (let ((c4686@name (car c4682@a)) (c4687@label (cdr c4682@a))) (let ((c468a@t (assq c4686@name c4683@subst))) (if c468a@t ((lambda (c468c@x) (if (eq? (cdr c468c@x) c4687@label) c4683@subst (c4489@dup-error c4686@name))) c468a@t) (cons c4682@a c4683@subst))))))) (if (null? c467c@s) c467d@subst (c4681@insert-to-subst (car c467c@s) (c448b@merge-substs (cdr c467c@s) c467d@subst)))))) (c448d@exclude* (lambda (c464c@sym* c464d@subst) (letrec* ((c4651@exclude (lambda (c466a@sym c466b@subst) (if (null? c466b@subst) (c319b@syntax-violation 'import '"cannot rename unbound identifier" c466a@sym) (if (eq? c466a@sym (caar c466b@subst)) (values (cdar c466b@subst) (cdr c466b@subst)) (let ((c466e@a (car c466b@subst))) (call-with-values (lambda () (c4651@exclude c466a@sym (cdr c466b@subst))) (lambda (c4674@c4671 c4675@c4673) (let ((c4678@subst c4675@c4673) (c4679@old c4674@c4671)) (values c4679@old (cons c466e@a c4678@subst))))))))))) (if (null? c464c@sym*) (values '() c464d@subst) (call-with-values (lambda () (c4651@exclude (car c464c@sym*) c464d@subst)) (lambda (c4656@c4653 c4657@c4655) (let ((c465a@subst c4657@c4655) (c465b@old c4656@c4653)) (call-with-values (lambda () (c448d@exclude* (cdr c464c@sym*) c465a@subst)) (lambda (c4662@c465f c4663@c4661) (let ((c4666@subst c4663@c4661) (c4667@old* c4662@c465f)) (values (cons c465b@old c4667@old*) c4666@subst))))))))))) (c448f@find* (lambda (c4644@sym* c4645@subst) (map (lambda (c4648@x) (let ((c464a@t (assq c4648@x c4645@subst))) (if c464a@t (cdr c464a@t) (c319b@syntax-violation 'import '"cannot find identifier" c4648@x)))) c4644@sym*))) (c4491@rem* (lambda (c463c@sym* c463d@subst) (let c4642@f ((c4640@subst c463d@subst)) (if (null? c4640@subst) '() (if (memq (caar c4640@subst) c463c@sym*) (c4642@f (cdr c4640@subst)) (cons (car c4640@subst) (c4642@f (cdr c4640@subst)))))))) (c4493@remove-dups (lambda (c463a@ls) (if (null? c463a@ls) '() (if (memq (car c463a@ls) (cdr c463a@ls)) (c4493@remove-dups (cdr c463a@ls)) (cons (car c463a@ls) (c4493@remove-dups (cdr c463a@ls))))))) (c4495@parse-library-name (lambda (c4552@spec) (letrec* ((c4555@subversion? (lambda (c4636@x) (let ((c4638@x (c31a1@syntax->datum c4636@x))) (and (integer? c4638@x) (exact? c4638@x) (>= c4638@x '0))))) (c4557@subversion-pred (lambda (c45d6@x*) (let ((c45d8@t c45d6@x*)) (let ((c45da@ls/false (c30bb@syntax-dispatch c45d8@t 'any))) (if (and c45da@ls/false (apply (lambda (c45dc@n) (c4555@subversion? c45dc@n)) c45da@ls/false)) (apply (lambda (c45de@n) (lambda (c45e0@x) (= c45e0@x (c31a1@syntax->datum c45de@n)))) c45da@ls/false) (let ((c45e2@t c45d8@t)) (let ((c45e4@ls/false (c30bb@syntax-dispatch c45e2@t '(any . each-any)))) (if (and c45e4@ls/false (apply (lambda (c45e6@p? c45e7@sub*) (eq? (c31a1@syntax->datum c45e6@p?) 'and)) c45e4@ls/false)) (apply (lambda (c45ea@p? c45eb@sub*) (let ((c45ee@p* (map c4557@subversion-pred c45eb@sub*))) (lambda (c45f0@x) (for-all (lambda (c45f2@p) (c45f2@p c45f0@x)) c45ee@p*)))) c45e4@ls/false) (let ((c45f4@t c45e2@t)) (let ((c45f6@ls/false (c30bb@syntax-dispatch c45f4@t '(any . each-any)))) (if (and c45f6@ls/false (apply (lambda (c45f8@p? c45f9@sub*) (eq? (c31a1@syntax->datum c45f8@p?) 'or)) c45f6@ls/false)) (apply (lambda (c45fc@p? c45fd@sub*) (let ((c4600@p* (map c4557@subversion-pred c45fd@sub*))) (lambda (c4602@x) (exists (lambda (c4604@p) (c4604@p c4602@x)) c4600@p*)))) c45f6@ls/false) (let ((c4606@t c45f4@t)) (let ((c4608@ls/false (c30bb@syntax-dispatch c4606@t '(any any)))) (if (and c4608@ls/false (apply (lambda (c460a@p? c460b@sub) (eq? (c31a1@syntax->datum c460a@p?) 'not)) c4608@ls/false)) (apply (lambda (c460e@p? c460f@sub) (let ((c4612@p (c4557@subversion-pred c460f@sub))) (lambda (c4614@x) (not (c4612@p c4614@x))))) c4608@ls/false) (let ((c4616@t c4606@t)) (let ((c4618@ls/false (c30bb@syntax-dispatch c4616@t '(any any)))) (if (and c4618@ls/false (apply (lambda (c461a@p? c461b@n) (and (eq? (c31a1@syntax->datum c461a@p?) '<=) (c4555@subversion? c461b@n))) c4618@ls/false)) (apply (lambda (c461e@p? c461f@n) (lambda (c4622@x) (<= c4622@x (c31a1@syntax->datum c461f@n)))) c4618@ls/false) (let ((c4624@t c4616@t)) (let ((c4626@ls/false (c30bb@syntax-dispatch c4624@t '(any any)))) (if (and c4626@ls/false (apply (lambda (c4628@p? c4629@n) (and (eq? (c31a1@syntax->datum c4628@p?) '>=) (c4555@subversion? c4629@n))) c4626@ls/false)) (apply (lambda (c462c@p? c462d@n) (lambda (c4630@x) (>= c4630@x (c31a1@syntax->datum c462d@n)))) c4626@ls/false) (let ((c4632@t c4624@t)) (let ((c4634@ls/false (c30bb@syntax-dispatch c4632@t '_))) (if c4634@ls/false (apply (lambda () (c319b@syntax-violation 'import '"invalid sub-version spec" c4552@spec c45d6@x*)) c4634@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4632@t)))))))))))))))))))))))) (c4559@version-pred (lambda (c4586@x*) (let ((c4588@t c4586@x*)) (let ((c458a@ls/false (c30bb@syntax-dispatch c4588@t '()))) (if c458a@ls/false (apply (lambda () (lambda (c458c@x) '#t)) c458a@ls/false) (let ((c458e@t c4588@t)) (let ((c4590@ls/false (c30bb@syntax-dispatch c458e@t '(any . each-any)))) (if (and c4590@ls/false (apply (lambda (c4592@c c4593@ver*) (eq? (c31a1@syntax->datum c4592@c) 'and)) c4590@ls/false)) (apply (lambda (c4596@c c4597@ver*) (let ((c459a@p* (map c4559@version-pred c4597@ver*))) (lambda (c459c@x) (for-all (lambda (c459e@p) (c459e@p c459c@x)) c459a@p*)))) c4590@ls/false) (let ((c45a0@t c458e@t)) (let ((c45a2@ls/false (c30bb@syntax-dispatch c45a0@t '(any . each-any)))) (if (and c45a2@ls/false (apply (lambda (c45a4@c c45a5@ver*) (eq? (c31a1@syntax->datum c45a4@c) 'or)) c45a2@ls/false)) (apply (lambda (c45a8@c c45a9@ver*) (let ((c45ac@p* (map c4559@version-pred c45a9@ver*))) (lambda (c45ae@x) (exists (lambda (c45b0@p) (c45b0@p c45ae@x)) c45ac@p*)))) c45a2@ls/false) (let ((c45b2@t c45a0@t)) (let ((c45b4@ls/false (c30bb@syntax-dispatch c45b2@t '(any any)))) (if (and c45b4@ls/false (apply (lambda (c45b6@c c45b7@ver) (eq? (c31a1@syntax->datum c45b6@c) 'not)) c45b4@ls/false)) (apply (lambda (c45ba@c c45bb@ver) (let ((c45be@p (c4559@version-pred c45bb@ver))) (lambda (c45c0@x) (not (c45be@p c45c0@x))))) c45b4@ls/false) (let ((c45c2@t c45b2@t)) (let ((c45c4@ls/false (c30bb@syntax-dispatch c45c2@t 'each-any))) (if c45c4@ls/false (apply (lambda (c45c6@sub*) (let ((c45c8@p* (map c4557@subversion-pred c45c6@sub*))) (lambda (c45ca@x) (let c45d0@f ((c45cc@p* c45c8@p*) (c45cd@x c45ca@x)) (if (null? c45cc@p*) '#t (if (null? c45cd@x) '#f (and ((car c45cc@p*) (car c45cd@x)) (c45d0@f (cdr c45cc@p*) (cdr c45cd@x))))))))) c45c4@ls/false) (let ((c45d2@t c45c2@t)) (let ((c45d4@ls/false (c30bb@syntax-dispatch c45d2@t '_))) (if c45d4@ls/false (apply (lambda () (c319b@syntax-violation 'import '"invalid version spec" c4552@spec c4586@x*)) c45d4@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c45d2@t)))))))))))))))))))))) (let c455c@f ((c455a@x c4552@spec)) (let ((c455e@t c455a@x)) (let ((c4560@ls/false (c30bb@syntax-dispatch c455e@t '(each-any)))) (if c4560@ls/false (apply (lambda (c4562@version-spec*) (values '() (c4559@version-pred c4562@version-spec*))) c4560@ls/false) (let ((c4564@t c455e@t)) (let ((c4566@ls/false (c30bb@syntax-dispatch c4564@t '(any . any)))) (if (and c4566@ls/false (apply (lambda (c4568@x c4569@x*) (c4487@idsyn? c4568@x)) c4566@ls/false)) (apply (lambda (c456c@x c456d@x*) (call-with-values (lambda () (c455c@f c456d@x*)) (lambda (c4574@c4571 c4575@c4573) (let ((c4578@pred c4575@c4573) (c4579@name c4574@c4571)) (values (cons (c31a1@syntax->datum c456c@x) c4579@name) c4578@pred))))) c4566@ls/false) (let ((c457c@t c4564@t)) (let ((c457e@ls/false (c30bb@syntax-dispatch c457c@t '()))) (if c457e@ls/false (apply (lambda () (values '() (lambda (c4580@x) '#t))) c457e@ls/false) (let ((c4582@t c457c@t)) (let ((c4584@ls/false (c30bb@syntax-dispatch c4582@t '_))) (if c4584@ls/false (apply (lambda () (c319b@syntax-violation '#f '"invalid import spec" c4552@spec)) c4584@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4582@t))))))))))))))))) (c4497@import-library (lambda (c4542@spec*) (call-with-values (lambda () (c4495@parse-library-name c4542@spec*)) (lambda (c4548@c4545 c4549@c4547) (let ((c454c@pred c4549@c4547) (c454d@name c4548@c4545)) (begin (if (null? c454d@name) (c319b@syntax-violation 'import '"empty library name" c4542@spec*) (void)) (let ((c4550@lib (c2cc9@c2b10@find-library-by-name c454d@name))) (begin (if (not c4550@lib) (c319b@syntax-violation 'import '"cannot find library with required name" c454d@name) (void)) (if (not (c454c@pred (c2ca3@c2ac4@library-version c4550@lib))) (c319b@syntax-violation 'import '"library does not satisfy version specification" c4542@spec* c4550@lib) (void)) ((c3127@imp-collector) c4550@lib) (c2cab@c2ad4@library-subst c4550@lib))))))))) (c4499@get-import (lambda (c44b4@spec) (let ((c44b6@t c44b4@spec)) (let ((c44b8@ls/false (c30bb@syntax-dispatch c44b6@t '(any . each-any)))) (if (and c44b8@ls/false (apply (lambda (c44ba@x c44bb@x*) (not (memq (c31a1@syntax->datum c44ba@x) '(for rename except only prefix library)))) c44b8@ls/false)) (apply (lambda (c44be@x c44bf@x*) (c4497@import-library (cons c44be@x c44bf@x*))) c44b8@ls/false) (let ((c44c2@t c44b6@t)) (let ((c44c4@ls/false (c30bb@syntax-dispatch c44c2@t '(any any . #(each (any any)))))) (if (and c44c4@ls/false (apply (lambda (c44c6@rename c44c7@isp c44c8@old* c44c9@new*) (and (eq? (c31a1@syntax->datum c44c6@rename) 'rename) (for-all c4487@idsyn? c44c8@old*) (for-all c4487@idsyn? c44c9@new*))) c44c4@ls/false)) (apply (lambda (c44ce@rename c44cf@isp c44d0@old* c44d1@new*) (let ((c44d6@subst (c4499@get-import c44cf@isp)) (c44d7@old* (map c31a1@syntax->datum c44d0@old*)) (c44d8@new* (map c31a1@syntax->datum c44d1@new*))) (let ((c44dc@old-label* (c448f@find* c44d7@old* c44d6@subst))) (let ((c44de@subst (c4491@rem* c44d7@old* c44d6@subst))) (c448b@merge-substs (map cons c44d8@new* c44dc@old-label*) c44de@subst))))) c44c4@ls/false) (let ((c44e0@t c44c2@t)) (let ((c44e2@ls/false (c30bb@syntax-dispatch c44e0@t '(any any . each-any)))) (if (and c44e2@ls/false (apply (lambda (c44e4@except c44e5@isp c44e6@sym*) (and (eq? (c31a1@syntax->datum c44e4@except) 'except) (for-all c4487@idsyn? c44e6@sym*))) c44e2@ls/false)) (apply (lambda (c44ea@except c44eb@isp c44ec@sym*) (let ((c44f0@subst (c4499@get-import c44eb@isp))) (c4491@rem* (map c31a1@syntax->datum c44ec@sym*) c44f0@subst))) c44e2@ls/false) (let ((c44f2@t c44e0@t)) (let ((c44f4@ls/false (c30bb@syntax-dispatch c44f2@t '(any any . each-any)))) (if (and c44f4@ls/false (apply (lambda (c44f6@only c44f7@isp c44f8@sym*) (and (eq? (c31a1@syntax->datum c44f6@only) 'only) (for-all c4487@idsyn? c44f8@sym*))) c44f4@ls/false)) (apply (lambda (c44fc@only c44fd@isp c44fe@sym*) (let ((c4502@subst (c4499@get-import c44fd@isp)) (c4503@sym* (map c31a1@syntax->datum c44fe@sym*))) (let ((c4506@sym* (c4493@remove-dups c4503@sym*))) (let ((c4508@lab* (c448f@find* c4506@sym* c4502@subst))) (map cons c4506@sym* c4508@lab*))))) c44f4@ls/false) (let ((c450a@t c44f2@t)) (let ((c450c@ls/false (c30bb@syntax-dispatch c450a@t '(any any any)))) (if (and c450c@ls/false (apply (lambda (c450e@prefix c450f@isp c4510@p) (and (eq? (c31a1@syntax->datum c450e@prefix) 'prefix) (c4487@idsyn? c4510@p))) c450c@ls/false)) (apply (lambda (c4514@prefix c4515@isp c4516@p) (let ((c451a@subst (c4499@get-import c4515@isp)) (c451b@prefix (symbol->string (c31a1@syntax->datum c4516@p)))) (map (lambda (c451e@x) (cons (string->symbol (string-append c451b@prefix (symbol->string (car c451e@x)))) (cdr c451e@x))) c451a@subst))) c450c@ls/false) (let ((c4520@t c450a@t)) (let ((c4522@ls/false (c30bb@syntax-dispatch c4520@t '(any each-any)))) (if (and c4522@ls/false (apply (lambda (c4524@library c4525@spec*) (eq? (c31a1@syntax->datum c4524@library) 'library)) c4522@ls/false)) (apply (lambda (c4528@library c4529@spec*) (c4497@import-library c4529@spec*)) c4522@ls/false) (let ((c452c@t c4520@t)) (let ((c452e@ls/false (c30bb@syntax-dispatch c452c@t '(any any . any)))) (if (and c452e@ls/false (apply (lambda (c4530@for c4531@isp c4532@rest) (eq? (c31a1@syntax->datum c4530@for) 'for)) c452e@ls/false)) (apply (lambda (c4536@for c4537@isp c4538@rest) (c4499@get-import c4537@isp)) c452e@ls/false) (let ((c453c@t c452c@t)) (let ((c453e@ls/false (c30bb@syntax-dispatch c453c@t 'any))) (if c453e@ls/false (apply (lambda (c4540@spec) (c319b@syntax-violation 'import '"invalid import spec" c4540@spec)) c453e@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c453c@t))))))))))))))))))))))))))) (c449b@add-imports! (lambda (c44a4@imp c44a5@h) (let ((c44a8@subst (c4499@get-import c44a4@imp))) (for-each (lambda (c44aa@x) (let ((c44ac@name (car c44aa@x)) (c44ad@label (cdr c44aa@x))) (let ((c44b0@t (hashtable-ref c44a5@h c44ac@name '#f))) (if c44b0@t ((lambda (c44b2@l) (if (not (eq? c44b2@l c44ad@label)) (c4489@dup-error c44ac@name) (void))) c44b0@t) (hashtable-set! c44a5@h c44ac@name c44ad@label))))) c44a8@subst))))) (lambda (c449c@imp*) (let c44a2@f ((c449e@imp* c449c@imp*) (c449f@h (make-eq-hashtable))) (if (null? c449e@imp*) (hashtable-entries c449f@h) (begin (c449b@add-imports! (car c449e@imp*) c449f@h) (c44a2@f (cdr c449e@imp*) c449f@h))))))) (set! c4bbe@c311d@parse-import-spec* c311d@parse-import-spec*) (set! c311f@make-top-rib (lambda (c4692@names c4693@labels) (let ((c4696@rib (c2e68@make-empty-rib))) (begin (vector-for-each (lambda (c4698@name c4699@label) (begin (if (not (symbol? c4698@name)) (error 'make-top-rib '"BUG: not a symbol" c4698@name) (void)) (c2e6c@extend-rib/nc! c4696@rib (make-simple-struct 'stx '5 (list c4698@name c2e38@top-mark* '() '())) c4699@label))) c4692@names c4693@labels) c4696@rib)))) (set! c4bbf@c311f@make-top-rib c311f@make-top-rib) (set! c3121@make-collector (lambda () (let ((c469c@ls '())) (lambda c46a0 (let ((c46a1 (length c46a0))) (if (= c46a1 '0) (apply (lambda () c469c@ls) c46a0) (if (= c46a1 '1) (apply (lambda (c469e@x) (set! c469c@ls (c2e31@set-cons c469e@x c469c@ls))) c46a0) (error #1='apply '"invalid arg count")))))))) (set! c4bc0@c3121@make-collector c3121@make-collector) (set! c3123@inv-collector (c2a04@c28e2@make-parameter (lambda c46a2@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (c46a4@x) (begin (if (not (procedure? c46a4@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" c46a4@x) (void)) c46a4@x)))) (set! c4bc1@c3123@inv-collector c3123@inv-collector) (set! c3125@vis-collector (c2a04@c28e2@make-parameter (lambda c46a6@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (c46a8@x) (begin (if (not (procedure? c46a8@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" c46a8@x) (void)) c46a8@x)))) (set! c4bc2@c3125@vis-collector c3125@vis-collector) (set! c3127@imp-collector (c2a04@c28e2@make-parameter (lambda c46aa@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (c46ac@x) (begin (if (not (procedure? c46ac@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" c46ac@x) (void)) c46ac@x)))) (set! c4bc3@c3127@imp-collector c3127@imp-collector) (set! c3129@chi-library-internal (lambda (c46ae@e* c46af@rib c46b0@top?) (call-with-values (lambda () (c3113@chi-body* c46ae@e* '() '() '() '() '() '() '() c46af@rib c46b0@top?)) (lambda (c46c4@c46b5 c46c5@c46b7 c46c6@c46b9 c46c7@c46bb c46c8@c46bd c46c9@c46bf c46ca@c46c1 c46cb@c46c3) (let ((c46d4@exp* c46cb@c46c3) (c46d5@_kwd* c46ca@c46c1) (c46d6@mod** c46c9@c46bf) (c46d7@rhs* c46c8@c46bd) (c46d8@lex* c46c7@c46bb) (c46d9@mr c46c6@c46b9) (c46da@r c46c5@c46b7) (c46db@e* c46c4@c46b5)) (values (append (apply append (reverse c46d6@mod**)) c46db@e*) c46da@r c46d9@mr (reverse c46d8@lex*) (reverse c46d7@rhs*) c46d4@exp*)))))) (set! c4bc4@c3129@chi-library-internal c3129@chi-library-internal) (set! c312b@chi-interaction-expr (lambda (c46e4@e c46e5@rib c46e6@r) (call-with-values (lambda () (c3113@chi-body* (list c46e4@e) c46e6@r c46e6@r '() '() '() '() '() c46e5@rib '#t)) (lambda (c46fa@c46eb c46fb@c46ed c46fc@c46ef c46fd@c46f1 c46fe@c46f3 c46ff@c46f5 c4700@c46f7 c4701@c46f9) (let ((c470a@_exp* c4701@c46f9) (c470b@_kwd* c4700@c46f7) (c470c@mod** c46ff@c46f5) (c470d@rhs* c46fe@c46f3) (c470e@lex* c46fd@c46f1) (c470f@mr c46fc@c46ef) (c4710@r c46fb@c46ed) (c4711@e* c46fa@c46eb)) (let ((c471a@e* (c30eb@expand-interaction-rhs*/init* (reverse c470e@lex*) (reverse c470d@rhs*) (append (apply append (reverse c470c@mod**)) c4711@e*) c4710@r c470f@mr))) (let ((c471c@e (if (null? c471a@e*) (c2e1a@c2d7b@build-void) (if (null? (cdr c471a@e*)) (car c471a@e*) (c2e19@c2d79@build-sequence '#f c471a@e*))))) (values c471c@e c4710@r)))))))) (set! c4bc5@c312b@chi-interaction-expr c312b@chi-interaction-expr) (set! c312d@library-body-expander (lambda (c471e@name c471f@main-exp* c4720@imp* c4721@b* c4722@top?) (letrec* ((c4729@itc (c3121@make-collector))) (let ((c4732@c472b c3127@imp-collector) (c4733@c472d c31ab@top-level-context) (c4734@c472f c4729@itc) (c4735@c4731 '#f)) (let ((c473a@swap (lambda () (begin (let ((c473c@t (c4732@c472b))) (begin (c4732@c472b c4734@c472f) (set! c4734@c472f c473c@t))) (let ((c473e@t (c4733@c472d))) (begin (c4733@c472d c4735@c4731) (set! c4735@c4731 c473e@t))))))) (dynamic-wind c473a@swap (lambda () (call-with-values (lambda () (c311d@parse-import-spec* c4720@imp*)) (lambda (c4744@c4741 c4745@c4743) (let ((c4748@subst-labels c4745@c4743) (c4749@subst-names c4744@c4741)) (let ((c474c@rib (c311f@make-top-rib c4749@subst-names c4748@subst-labels))) (letrec* ((c474f@wrap (lambda (c47ca@x) (make-simple-struct 'stx '5 (list c47ca@x c2e38@top-mark* (list c474c@rib) '()))))) (let ((c4750@b* (map c474f@wrap c4721@b*)) (c4751@main-exp* (map c474f@wrap c471f@main-exp*)) (c4752@rtc (c3121@make-collector)) (c4753@vtc (c3121@make-collector))) (let ((c4760@c4759 c3123@inv-collector) (c4761@c475b c3125@vis-collector) (c4762@c475d c4752@rtc) (c4763@c475f c4753@vtc)) (let ((c4768@swap (lambda () (begin (let ((c476a@t (c4760@c4759))) (begin (c4760@c4759 c4762@c475d) (set! c4762@c475d c476a@t))) (let ((c476c@t (c4761@c475b))) (begin (c4761@c475b c4763@c475f) (set! c4763@c475f c476c@t))))))) (dynamic-wind c4768@swap (lambda () (call-with-values (lambda () (c3129@chi-library-internal c4750@b* c474c@rib c4722@top?)) (lambda (c477a@c476f c477b@c4771 c477c@c4773 c477d@c4775 c477e@c4777 c477f@c4779) (let ((c4786@internal-exp* c477f@c4779) (c4787@rhs* c477e@c4777) (c4788@lex* c477d@c4775) (c4789@mr c477c@c4773) (c478a@r c477b@c4771) (c478b@init* c477a@c476f)) (call-with-values (lambda () (c3117@parse-exports (append c4751@main-exp* c4786@internal-exp*))) (lambda (c4796@c4793 c4797@c4795) (let ((c479a@exp-id* c4797@c4795) (c479b@exp-name* c4796@c4793)) (begin (c2e70@seal-rib! c474c@rib) (let ((c479e@init* (c30d9@chi-expr* c478b@init* c478a@r c4789@mr))) (let ((c47a0@rhs* (c30ed@chi-rhs* c4787@rhs* c478a@r c4789@mr))) (begin (c2e72@unseal-rib! c474c@rib) (let ((c47a2@loc* (map c2e3e@gen-global c4788@lex*)) (c47a3@export-subst (c3185@make-export-subst c479b@exp-name* c479a@exp-id*))) (letrec* ((c47a7@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (c3187@make-export-env/macros c4788@lex* c47a2@loc* c478a@r)) (lambda (c47ae@c47a9 c47af@c47ab c47b0@c47ad) (let ((c47b4@macro* c47b0@c47ad) (c47b5@global* c47af@c47ab) (c47b6@export-env c47ae@c47a9)) (begin (for-each (lambda (c47ba@s) (let ((c47bc@name (car c47ba@s)) (c47bd@label (cdr c47ba@s))) (let ((c47c0@p (assq c47bd@label c47b6@export-env))) (if c47c0@p (let ((c47c2@b (cdr c47c0@p))) (let ((c47c4@type (car c47c2@b))) (if (eq? c47c4@type 'mutable) (c319b@syntax-violation 'export c47a7@errstr c47bc@name) (void)))) (void))))) c47a3@export-subst) (let ((c47c6@invoke-body (c2e1f@c2d85@build-library-letrec* '#f c471e@name c4788@lex* c47a2@loc* c47a0@rhs* (if (null? c479e@init*) (c2e1a@c2d7b@build-void) (c2e19@c2d79@build-sequence '#f c479e@init*)))) (c47c7@invoke-definitions (map c2e16@c2cd8@build-global-define (map cdr c47b5@global*)))) (values (c4729@itc) (c4752@rtc) (c4753@vtc) (c2e19@c2d79@build-sequence '#f (append c47c7@invoke-definitions (list c47c6@invoke-body))) c47b4@macro* c47a3@export-subst c47b6@export-env))))))))))))))))))) c4768@swap)))))))))) c473a@swap)))))) (set! c4bc6@c312d@library-body-expander c312d@library-body-expander) (set! c312f@core-library-expander (lambda (c47cc@e c47cd@verify-name) (call-with-values (lambda () (c311b@parse-library c47cc@e)) (lambda (c47d8@c47d1 c47d9@c47d3 c47da@c47d5 c47db@c47d7) (let ((c47e0@b* c47db@c47d7) (c47e1@imp* c47da@c47d5) (c47e2@exp* c47d9@c47d3) (c47e3@name* c47d8@c47d1)) (call-with-values (lambda () (c3119@parse-library-name c47e3@name*)) (lambda (c47ec@c47e9 c47ed@c47eb) (let ((c47f0@ver c47ed@c47eb) (c47f1@name c47ec@c47e9)) (begin (c47cd@verify-name c47f1@name) (call-with-values (lambda () (c312d@library-body-expander c47f1@name c47e2@exp* c47e1@imp* c47e0@b* '#f)) (lambda (c4802@c47f5 c4803@c47f7 c4804@c47f9 c4805@c47fb c4806@c47fd c4807@c47ff c4808@c4801) (let ((c4810@export-env c4808@c4801) (c4811@export-subst c4807@c47ff) (c4812@visit-code c4806@c47fd) (c4813@invoke-code c4805@c47fb) (c4814@visit-req* c4804@c47f9) (c4815@invoke-req* c4803@c47f7) (c4816@imp* c4802@c47f5)) (values c47f1@name c47f0@ver c4816@imp* c4815@invoke-req* c4814@visit-req* c4813@invoke-code c4812@visit-code c4811@export-subst c4810@export-env))))))))))))) (set! c4bc7@c312f@core-library-expander c312f@core-library-expander) (set! c3131@parse-top-level-program (lambda (c481e@e*) (let ((c4820@t c481e@e*)) (let ((c4822@ls/false (c30bb@syntax-dispatch c4820@t '((any . each-any) . each-any)))) (if (and c4822@ls/false (apply (lambda (c4824@import c4825@imp* c4826@b*) (eq? (c31a1@syntax->datum c4824@import) 'import)) c4822@ls/false)) (apply (lambda (c482a@import c482b@imp* c482c@b*) (values c482b@imp* c482c@b*)) c4822@ls/false) (let ((c4830@t c4820@t)) (let ((c4832@ls/false (c30bb@syntax-dispatch c4830@t '((any . any) . any)))) (if (and c4832@ls/false (apply (lambda (c4834@import c4835@x c4836@y) (eq? (c31a1@syntax->datum c4834@import) 'import)) c4832@ls/false)) (apply (lambda (c483a@import c483b@x c483c@y) (c319b@syntax-violation 'expander '"invalid syntax of top-level program" (c2eae@syntax-car c481e@e*))) c4832@ls/false) (let ((c4840@t c4830@t)) (let ((c4842@ls/false (c30bb@syntax-dispatch c4840@t '_))) (if c4842@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) c4842@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4840@t)))))))))))) (set! c4bc8@c3131@parse-top-level-program c3131@parse-top-level-program) (set! c3133@top-level-expander (lambda (c4844@e*) (call-with-values (lambda () (c3131@parse-top-level-program c4844@e*)) (lambda (c484a@c4847 c484b@c4849) (let ((c484e@b* c484b@c4849) (c484f@imp* c484a@c4847)) (call-with-values (lambda () (c312d@library-body-expander '() '() c484f@imp* c484e@b* '#t)) (lambda (c4860@c4853 c4861@c4855 c4862@c4857 c4863@c4859 c4864@c485b c4865@c485d c4866@c485f) (let ((c486e@export-env c4866@c485f) (c486f@export-subst c4865@c485d) (c4870@visit-code c4864@c485b) (c4871@invoke-code c4863@c4859) (c4872@visit-req* c4862@c4857) (c4873@invoke-req* c4861@c4855) (c4874@imp* c4860@c4853)) (values c4873@invoke-req* c4871@invoke-code))))))))) (set! c4bc9@c3133@top-level-expander c3133@top-level-expander) (set! c3135@rp (c2a01@c28dc@make-record-printer 'env (lambda (c487c@x c487d@p c487e@wr) (display '"#<environment>" c487d@p)))) (set! c4bca@c3135@rp c3135@rp) (set! c313f@env? (lambda (c4882@x) (and (simple-struct? c4882@x) (eq? (simple-struct-name c4882@x) 'env)))) (set! c4bcb@c313f@env? c313f@env?) (set! c3141@env-names (lambda (c4884@x) (simple-struct-ref c4884@x '0))) (set! c4bcc@c3141@env-names c3141@env-names) (set! c3143@set-env-names! (lambda (c4886@x c4887@val) (simple-struct-set! c4886@x '0 c4887@val))) (set! c4bcd@c3143@set-env-names! c3143@set-env-names!) (set! c3145@env-labels (lambda (c488a@x) (simple-struct-ref c488a@x '1))) (set! c4bce@c3145@env-labels c3145@env-labels) (set! c3147@set-env-labels! (lambda (c488c@x c488d@val) (simple-struct-set! c488c@x '1 c488d@val))) (set! c4bcf@c3147@set-env-labels! c3147@set-env-labels!) (set! c3149@env-itc (lambda (c4890@x) (simple-struct-ref c4890@x '2))) (set! c4bd0@c3149@env-itc c3149@env-itc) (set! c314b@set-env-itc! (lambda (c4892@x c4893@val) (simple-struct-set! c4892@x '2 c4893@val))) (set! c4bd1@c314b@set-env-itc! c314b@set-env-itc!) (set! c314d@dummy '3) (set! c4bd2@c314d@dummy c314d@dummy) (set! c314f@rp (c2a01@c28dc@make-record-printer 'interaction-env (lambda (c4896@x c4897@p c4898@wr) (display '"#<environment>" c4897@p)))) (set! c4bd3@c314f@rp c314f@rp) (set! c3159@interaction-env? (lambda (c489c@x) (and (simple-struct? c489c@x) (eq? (simple-struct-name c489c@x) 'interaction-env)))) (set! c4bd4@c3159@interaction-env? c3159@interaction-env?) (set! c315b@interaction-env-rib (lambda (c489e@x) (simple-struct-ref c489e@x '0))) (set! c4bd5@c315b@interaction-env-rib c315b@interaction-env-rib) (set! c315d@set-interaction-env-rib! (lambda (c48a0@x c48a1@val) (simple-struct-set! c48a0@x '0 c48a1@val))) (set! c4bd6@c315d@set-interaction-env-rib! c315d@set-interaction-env-rib!) (set! c315f@interaction-env-r (lambda (c48a4@x) (simple-struct-ref c48a4@x '1))) (set! c4bd7@c315f@interaction-env-r c315f@interaction-env-r) (set! c3161@set-interaction-env-r! (lambda (c48a6@x c48a7@val) (simple-struct-set! c48a6@x '1 c48a7@val))) (set! c4bd8@c3161@set-interaction-env-r! c3161@set-interaction-env-r!) (set! c3163@interaction-env-locs (lambda (c48aa@x) (simple-struct-ref c48aa@x '2))) (set! c4bd9@c3163@interaction-env-locs c3163@interaction-env-locs) (set! c3165@set-interaction-env-locs! (lambda (c48ac@x c48ad@val) (simple-struct-set! c48ac@x '2 c48ad@val))) (set! c4bda@c3165@set-interaction-env-locs! c3165@set-interaction-env-locs!) (set! c3167@dummy '3) (set! c4bdb@c3167@dummy c3167@dummy) (set! c3169@interaction-environment-symbols (lambda () (c3171@environment-symbols (c31a9@interaction-environment)))) (set! c4bdc@c3169@interaction-environment-symbols c3169@interaction-environment-symbols) (set! c316b@environment-bindings (lambda (c48b0@e) (vector->list (vector-map (lambda (c48b2@name c48b3@label) (c316d@parse-binding (cons c48b2@name (c2ccf@c2b1c@imported-label->binding c48b3@label)))) (c3141@env-names c48b0@e) (c3145@env-labels c48b0@e))))) (set! c4bdd@c316b@environment-bindings c316b@environment-bindings) (set! c316d@parse-binding (lambda (c48b6@b) (cons (car c48b6@b) (let ((c48b8@t (cadr c48b6@b))) (if (memv c48b8@t '(core-prim global)) 'procedure (if (memv c48b8@t '(core-macro macro global-macro)) 'syntax (if (memv c48b8@t '($core-rtd)) 'record (if (eq? (car c48b6@b) (cadr c48b6@b)) 'syntax 'unknown)))))))) (set! c4bde@c316d@parse-binding c316d@parse-binding) (set! c316f@environment? (lambda (c48ba@x) (or (c313f@env? c48ba@x) (c3159@interaction-env? c48ba@x)))) (set! c4bdf@c316f@environment? c316f@environment?) (set! c3171@environment-symbols (lambda (c48bc@x) (if (c313f@env? c48bc@x) (vector->list (c3141@env-names c48bc@x)) (if (c3159@interaction-env? c48bc@x) (map values (c2e52@rib-sym* (c315b@interaction-env-rib c48bc@x))) (assertion-violation 'environment-symbols '"not an environment" c48bc@x))))) (set! c4be0@c3171@environment-symbols c3171@environment-symbols) (set! c3173@environment (lambda c48be@imp* (let ((c48c0@itc (c3121@make-collector))) (let ((c48c6@c48c3 c3127@imp-collector) (c48c7@c48c5 c48c0@itc)) (let ((c48ca@swap (lambda () (let ((c48cc@t (c48c6@c48c3))) (begin (c48c6@c48c3 c48c7@c48c5) (set! c48c7@c48c5 c48cc@t)))))) (dynamic-wind c48ca@swap (lambda () (call-with-values (lambda () (c311d@parse-import-spec* c48be@imp*)) (lambda (c48d2@c48cf c48d3@c48d1) (let ((c48d6@subst-labels c48d3@c48d1) (c48d7@subst-names c48d2@c48cf)) (make-simple-struct 'env '4 (list c48d7@subst-names c48d6@subst-labels c48c0@itc)))))) c48ca@swap)))))) (set! c4be1@c3173@environment c3173@environment) (set! c3175@null-environment (lambda (c48da@n) (begin (if (not (eqv? c48da@n '5)) (assertion-violation 'null-environment '"not 5" c48da@n) (void)) (c3173@environment '(psyntax null-environment-5))))) (set! c4be2@c3175@null-environment c3175@null-environment) (set! c3177@scheme-report-environment (lambda (c48dc@n) (begin (if (not (eqv? c48dc@n '5)) (assertion-violation 'scheme-report-environment '"not 5" c48dc@n) (void)) (c3173@environment '(psyntax scheme-report-environment-5))))) (set! c4be3@c3177@scheme-report-environment c3177@scheme-report-environment) (set! c3179@expand (lambda (c48de@x c48df@env) (if (c313f@env? c48df@env) (let ((c48e2@rib (c311f@make-top-rib (c3141@env-names c48df@env) (c3145@env-labels c48df@env)))) (let ((c48e4@x (make-simple-struct 'stx '5 (list c48de@x c2e38@top-mark* (list c48e2@rib) '()))) (c48e5@itc (c3149@env-itc c48df@env)) (c48e6@rtc (c3121@make-collector)) (c48e7@vtc (c3121@make-collector))) (let ((c48ec@x (let ((c48fe@c48ef c31ab@top-level-context) (c48ff@c48f1 c3123@inv-collector) (c4900@c48f3 c3125@vis-collector) (c4901@c48f5 c3127@imp-collector) (c4902@c48f7 '#f) (c4903@c48f9 c48e6@rtc) (c4904@c48fb c48e7@vtc) (c4905@c48fd c48e5@itc)) (let ((c490e@swap (lambda () (begin (let ((c4910@t (c48fe@c48ef))) (begin (c48fe@c48ef c4902@c48f7) (set! c4902@c48f7 c4910@t))) (let ((c4912@t (c48ff@c48f1))) (begin (c48ff@c48f1 c4903@c48f9) (set! c4903@c48f9 c4912@t))) (let ((c4914@t (c4900@c48f3))) (begin (c4900@c48f3 c4904@c48fb) (set! c4904@c48fb c4914@t))) (let ((c4916@t (c4901@c48f5))) (begin (c4901@c48f5 c4905@c48fd) (set! c4905@c48fd c4916@t))))))) (dynamic-wind c490e@swap (lambda () (c30dd@chi-expr c48e4@x '() '())) c490e@swap))))) (begin (c2e70@seal-rib! c48e2@rib) (values c48ec@x (c48e6@rtc)))))) (if (c3159@interaction-env? c48df@env) (let ((c4918@rib (c315b@interaction-env-rib c48df@env)) (c4919@r (c315f@interaction-env-r c48df@env)) (c491a@rtc (c3121@make-collector))) (let ((c491e@x (make-simple-struct 'stx '5 (list c48de@x c2e38@top-mark* (list c4918@rib) '())))) (call-with-values (lambda () (let ((c4934@c4925 c31ab@top-level-context) (c4935@c4927 c3123@inv-collector) (c4936@c4929 c3125@vis-collector) (c4937@c492b c3127@imp-collector) (c4938@c492d c48df@env) (c4939@c492f c491a@rtc) (c493a@c4931 (c3121@make-collector)) (c493b@c4933 (c3121@make-collector))) (let ((c4944@swap (lambda () (begin (let ((c4946@t (c4934@c4925))) (begin (c4934@c4925 c4938@c492d) (set! c4938@c492d c4946@t))) (let ((c4948@t (c4935@c4927))) (begin (c4935@c4927 c4939@c492f) (set! c4939@c492f c4948@t))) (let ((c494a@t (c4936@c4929))) (begin (c4936@c4929 c493a@c4931) (set! c493a@c4931 c494a@t))) (let ((c494c@t (c4937@c492b))) (begin (c4937@c492b c493b@c4933) (set! c493b@c4933 c494c@t))))))) (dynamic-wind c4944@swap (lambda () (c312b@chi-interaction-expr c491e@x c4918@rib c4919@r)) c4944@swap)))) (lambda (c494e@c4921 c494f@c4923) (let ((c4952@r^ c494f@c4923) (c4953@e c494e@c4921)) (begin (c3161@set-interaction-env-r! c48df@env c4952@r^) (values c4953@e (c491a@rtc)))))))) (assertion-violation 'expand '"not an environment" c48df@env))))) (set! c4be4@c3179@expand c3179@expand) (set! c317b@eval (lambda (c4956@x c4957@env) (begin (if (not (c316f@environment? c4957@env)) (error 'eval '"not an environment" c4957@env) (void)) (call-with-values (lambda () (c3179@expand c4956@x c4957@env)) (lambda (c495e@c495b c495f@c495d) (let ((c4962@invoke-req* c495f@c495d) (c4963@x c495e@c495b)) (begin (for-each c2cd0@c2b1e@invoke-library c4962@invoke-req*) (eval-core (c2a5a@c2a12@expanded->core c4963@x))))))))) (set! c4be5@c317b@eval c317b@eval) (set! c317d@library-expander (lambda c49d4 (let ((c49d5 (length c49d4))) (if (= c49d5 '3) (apply (lambda (c4966@x c4967@filename c4968@verify-name) (letrec* ((c496d@build-visit-code (lambda (c49c2@macro*) (if (null? c49c2@macro*) (c2e1a@c2d7b@build-void) (c2e19@c2d79@build-sequence '#f (map (lambda (c49c4@x) (let ((c49c6@loc (car c49c4@x)) (c49c7@src (cddr c49c4@x))) (list 'set! c49c6@loc c49c7@src))) c49c2@macro*))))) (c496f@visit! (lambda (c49ba@macro*) (for-each (lambda (c49bc@x) (let ((c49be@loc (car c49bc@x)) (c49bf@proc (cadr c49bc@x))) (set-symbol-value! c49be@loc c49bf@proc))) c49ba@macro*)))) (call-with-values (lambda () (c312f@core-library-expander c4966@x c4968@verify-name)) (lambda (c4982@c4971 c4983@c4973 c4984@c4975 c4985@c4977 c4986@c4979 c4987@c497b c4988@c497d c4989@c497f c498a@c4981) (let ((c4994@export-env c498a@c4981) (c4995@export-subst c4989@c497f) (c4996@macro* c4988@c497d) (c4997@invoke-code c4987@c497b) (c4998@vis* c4986@c4979) (c4999@inv* c4985@c4977) (c499a@imp* c4984@c4975) (c499b@ver c4983@c4973) (c499c@name c4982@c4971)) (let ((c49a6@id (gensym)) (c49a7@name c499c@name) (c49a8@ver c499b@ver) (c49a9@imp* (map c2cd4@c2b26@library-spec c499a@imp*)) (c49aa@vis* (map c2cd4@c2b26@library-spec c4998@vis*)) (c49ab@inv* (map c2cd4@c2b26@library-spec c4999@inv*)) (c49ac@visit-proc (lambda () (c496f@visit! c4996@macro*))) (c49ad@invoke-proc (lambda () (eval-core (c2a5a@c2a12@expanded->core c4997@invoke-code)))) (c49ae@visit-code (c496d@build-visit-code c4996@macro*)) (c49af@invoke-code c4997@invoke-code)) (begin (c2cce@c2b1a@install-library c49a6@id c49a7@name c49a8@ver c49a9@imp* c49aa@vis* c49ab@inv* c4995@export-subst c4994@export-env c49ac@visit-proc c49ad@invoke-proc c49ae@visit-code c49af@invoke-code '#t c4967@filename) (values c49a6@id c49a7@name c49a8@ver c49a9@imp* c49aa@vis* c49ab@inv* c49af@invoke-code c49ae@visit-code c4995@export-subst c4994@export-env)))))))) c49d4) (if (= c49d5 '2) (apply (lambda (c49ca@x c49cb@filename) (c317d@library-expander c49ca@x c49cb@filename (lambda (c49ce@x) (values)))) c49d4) (if (= c49d5 '1) (apply (lambda (c49d0@x) (c317d@library-expander c49d0@x '#f (lambda (c49d2@x) (values)))) c49d4) (error #1# '"invalid arg count"))))))) (set! c4be6@c317d@library-expander c317d@library-expander) (set! c317f@boot-library-expand (lambda (c49d6@x) (call-with-values (lambda () (c317d@library-expander c49d6@x)) (lambda (c49ec@c49d9 c49ed@c49db c49ee@c49dd c49ef@c49df c49f0@c49e1 c49f1@c49e3 c49f2@c49e5 c49f3@c49e7 c49f4@c49e9 c49f5@c49eb) (let ((c4a00@export-env c49f5@c49eb) (c4a01@export-subst c49f4@c49e9) (c4a02@visit-code c49f3@c49e7) (c4a03@invoke-code c49f2@c49e5) (c4a04@inv* c49f1@c49e3) (c4a05@vis* c49f0@c49e1) (c4a06@imp* c49ef@c49df) (c4a07@ver c49ee@c49dd) (c4a08@name c49ed@c49db) (c4a09@id c49ec@c49d9)) (values c4a08@name c4a03@invoke-code c4a01@export-subst c4a00@export-env)))))) (set! c4be7@c317f@boot-library-expand c317f@boot-library-expand) (set! c3181@rev-map-append (lambda (c4a14@f c4a15@ls c4a16@ac) (if (null? c4a15@ls) c4a16@ac (c3181@rev-map-append c4a14@f (cdr c4a15@ls) (cons (c4a14@f (car c4a15@ls)) c4a16@ac))))) (set! c4be8@c3181@rev-map-append c3181@rev-map-append) (set! c3183@build-exports (lambda (c4a1a@lex*+loc* c4a1b@init*) (c2e19@c2d79@build-sequence '#f (cons (c2e1a@c2d7b@build-void) (c3181@rev-map-append (lambda (c4a1e@x) (list 'set! (cdr c4a1e@x) (car c4a1e@x))) c4a1a@lex*+loc* c4a1b@init*))))) (set! c4be9@c3183@build-exports c3183@build-exports) (set! c3185@make-export-subst (lambda (c4a20@name* c4a21@id*) (map (lambda (c4a24@name c4a25@id) (let ((c4a28@label (c2eca@id->label c4a25@id))) (begin (if (not c4a28@label) (c319b@syntax-violation '#f '"cannot export unbound identifier" c4a25@id) (void)) (cons c4a24@name c4a28@label)))) c4a20@name* c4a21@id*))) (set! c4bea@c3185@make-export-subst c3185@make-export-subst) (set! c3187@make-export-env/macros (lambda (c4a2a@lex* c4a2b@loc* c4a2c@r) (letrec* ((c4a31@lookup (lambda (c4a4e@x) (let c4a56@f ((c4a50@x c4a4e@x) (c4a51@lex* c4a2a@lex*) (c4a52@loc* c4a2b@loc*)) (if (pair? c4a51@lex*) (if (eq? c4a50@x (car c4a51@lex*)) (car c4a52@loc*) (c4a56@f c4a50@x (cdr c4a51@lex*) (cdr c4a52@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let c4a3a@f ((c4a32@r c4a2c@r) (c4a33@env '()) (c4a34@global* '()) (c4a35@macro* '())) (if (null? c4a32@r) (values c4a33@env c4a34@global* c4a35@macro*) (let ((c4a3c@x (car c4a32@r))) (let ((c4a3e@label (car c4a3c@x)) (c4a3f@b (cdr c4a3c@x))) (let ((c4a42@t (c2ed0@binding-type c4a3f@b))) (if (memv c4a42@t '(lexical)) (let ((c4a44@v (c2ed2@binding-value c4a3f@b))) (let ((c4a46@loc (c4a31@lookup (c3045@lexical-var c4a44@v))) (c4a47@type (if (c3047@lexical-mutable? c4a44@v) 'mutable 'global))) (c4a3a@f (cdr c4a32@r) (cons (cons* c4a3e@label c4a47@type c4a46@loc) c4a33@env) (cons (cons (c3045@lexical-var c4a44@v) c4a46@loc) c4a34@global*) c4a35@macro*))) (if (memv c4a42@t '(local-macro)) (let ((c4a4a@loc (gensym))) (c4a3a@f (cdr c4a32@r) (cons (cons* c4a3e@label 'global-macro c4a4a@loc) c4a33@env) c4a34@global* (cons (cons c4a4a@loc (c2ed2@binding-value c4a3f@b)) c4a35@macro*))) (if (memv c4a42@t '(local-macro!)) (let ((c4a4c@loc (gensym))) (c4a3a@f (cdr c4a32@r) (cons (cons* c4a3e@label 'global-macro! c4a4c@loc) c4a33@env) c4a34@global* (cons (cons c4a4c@loc (c2ed2@binding-value c4a3f@b)) c4a35@macro*))) (if (memv c4a42@t '($rtd $module)) (c4a3a@f (cdr c4a32@r) (cons c4a3c@x c4a33@env) c4a34@global* c4a35@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (c2ed0@binding-type c4a3f@b) (c2ed2@binding-value c4a3f@b)))))))))))))) (set! c4beb@c3187@make-export-env/macros c3187@make-export-env/macros) (set! c3189@generate-temporaries (lambda (c4a58@ls) (let ((c4a5a@t c4a58@ls)) (let ((c4a5c@ls/false (c30bb@syntax-dispatch c4a5a@t 'each-any))) (if c4a5c@ls/false (apply (lambda (c4a5e@ls) (map (lambda (c4a60@x) (make-simple-struct 'stx '5 (list (let ((c4a62@x (c31a1@syntax->datum c4a60@x))) (if (or (symbol? c4a62@x) (string? c4a62@x)) (gensym c4a62@x) (gensym 't))) c2e38@top-mark* '() '()))) c4a5e@ls)) c4a5c@ls/false) (let ((c4a64@t c4a5a@t)) (let ((c4a66@ls/false (c30bb@syntax-dispatch c4a64@t '_))) (if c4a66@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) c4a66@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4a64@t))))))))) (set! c4bec@c3189@generate-temporaries c3189@generate-temporaries) (set! c318b@free-identifier=? (lambda (c4a68@x c4a69@y) (if (c2eb4@id? c4a68@x) (if (c2eb4@id? c4a69@y) (c2eba@free-id=? c4a68@x c4a69@y) (assertion-violation 'free-identifier=? '"not an identifier" c4a69@y)) (assertion-violation 'free-identifier=? '"not an identifier" c4a68@x)))) (set! c4bed@c318b@free-identifier=? c318b@free-identifier=?) (set! c318d@bound-identifier=? (lambda (c4a6c@x c4a6d@y) (if (c2eb4@id? c4a6c@x) (if (c2eb4@id? c4a6d@y) (c2eb8@bound-id=? c4a6c@x c4a6d@y) (assertion-violation 'bound-identifier=? '"not an identifier" c4a6d@y)) (assertion-violation 'bound-identifier=? '"not an identifier" c4a6c@x)))) (set! c4bee@c318d@bound-identifier=? c318d@bound-identifier=?) (set! c318f@make-source-condition (lambda (c4a70@x) (letrec* ((c4a7a@c4a75 (make-record-type-descriptor '&source-information &condition-rtd 'c4a78 '#f '#f '#((immutable file-name) (immutable line)))) (c4a7c@c4a77 '#f) (c4a7e@c4a76 (make-record-constructor-descriptor c4a7a@c4a75 &condition-rcd c4a7c@c4a77)) (c4a81@c4a74 (record-predicate c4a7a@c4a75)) (c4a83@make-source-condition (record-constructor c4a7e@c4a76)) (c4a85@c4a72 (record-accessor c4a7a@c4a75 '0)) (c4a87@c4a73 (record-accessor c4a7a@c4a75 '1)) (c4a89@source-condition? (condition-predicate c4a7a@c4a75)) (c4a8b@source-filename (condition-accessor c4a7a@c4a75 c4a85@c4a72)) (c4a8d@source-character (condition-accessor c4a7a@c4a75 c4a87@c4a73))) (if (and (pair? c4a70@x) (pair? (cdr c4a70@x))) (c4a83@make-source-condition (car c4a70@x) (cadr c4a70@x)) (condition))))) (set! c4bef@c318f@make-source-condition c318f@make-source-condition) (set! c3191@extract-position-condition (lambda (c4a8e@x) (c318f@make-source-condition (c3193@expression-position c4a8e@x)))) (set! c4bf0@c3191@extract-position-condition c3191@extract-position-condition) (set! c3193@expression-position (lambda (c4a90@x) (and (c2e80@stx? c4a90@x) (let ((c4a92@x (c2e82@stx-expr c4a90@x))) (and (c29f8@c28ca@annotation? c4a92@x) (c29f9@c28cc@annotation-source c4a92@x)))))) (set! c4bf1@c3193@expression-position c3193@expression-position) (set! c3195@assertion-error (lambda (c4a94@expr c4a95@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list c4a94@expr)) (c318f@make-source-condition c4a95@pos))))) (set! c4bf2@c3195@assertion-error c3195@assertion-error) (set! c3197@syntax-error (lambda (c4a98@x . c4a9a@args) (begin (if (not (for-all string? c4a9a@args)) (assertion-violation 'syntax-error '"invalid argument" c4a9a@args) (void)) (raise (condition (make-message-condition (if (null? c4a9a@args) '"invalid syntax" (apply string-append c4a9a@args))) (make-syntax-violation (c31a1@syntax->datum c4a98@x) '#f) (c3191@extract-position-condition c4a98@x)))))) (set! c4bf3@c3197@syntax-error c3197@syntax-error) (set! c3199@syntax-violation* (lambda (c4a9c@who c4a9d@msg c4a9e@form c4a9f@condition-object) (begin (if (not (string? c4a9d@msg)) (assertion-violation 'syntax-violation '"message is not a string" c4a9d@msg) (void)) (let ((c4aa4@who (if (or (string? c4a9c@who) (symbol? c4a9c@who)) c4a9c@who (if (not c4a9c@who) (let ((c4aa6@t c4a9e@form)) (let ((c4aa8@ls/false (c30bb@syntax-dispatch c4aa6@t 'any))) (if (and c4aa8@ls/false (apply (lambda (c4aaa@id) (c2eb4@id? c4aaa@id)) c4aa8@ls/false)) (apply (lambda (c4aac@id) (c31a1@syntax->datum c4aac@id)) c4aa8@ls/false) (let ((c4aae@t c4aa6@t)) (let ((c4ab0@ls/false (c30bb@syntax-dispatch c4aae@t '(any . any)))) (if (and c4ab0@ls/false (apply (lambda (c4ab2@id c4ab3@rest) (c2eb4@id? c4ab2@id)) c4ab0@ls/false)) (apply (lambda (c4ab6@id c4ab7@rest) (c31a1@syntax->datum c4ab6@id)) c4ab0@ls/false) (let ((c4aba@t c4aae@t)) (let ((c4abc@ls/false (c30bb@syntax-dispatch c4aba@t '_))) (if c4abc@ls/false (apply (lambda () '#f) c4abc@ls/false) (c319b@syntax-violation '#f '"invalid syntax" c4aba@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" c4a9c@who))))) (raise (condition (if c4aa4@who (make-who-condition c4aa4@who) (condition)) (make-message-condition c4a9d@msg) c4a9f@condition-object (c3191@extract-position-condition c4a9e@form))))))) (set! c4bf4@c3199@syntax-violation* c3199@syntax-violation*) (set! c319b@syntax-violation (lambda c4acc (let ((c4acd (length c4acc))) (if (= c4acd '3) (apply (lambda (c4abe@who c4abf@msg c4ac0@form) (c319b@syntax-violation c4abe@who c4abf@msg c4ac0@form '#f)) c4acc) (if (= c4acd '4) (apply (lambda (c4ac4@who c4ac5@msg c4ac6@form c4ac7@subform) (c3199@syntax-violation* c4ac4@who c4ac5@msg c4ac6@form (make-syntax-violation (c31a1@syntax->datum c4ac6@form) (c31a1@syntax->datum c4ac7@subform)))) c4acc) (error #1# '"invalid arg count")))))) (set! c4bf5@c319b@syntax-violation c319b@syntax-violation) (set! c319d@identifier? (lambda (c4ace@x) (c2eb4@id? c4ace@x))) (set! c4bf6@c319d@identifier? c319d@identifier?) (set! c319f@datum->syntax (lambda (c4ad0@id c4ad1@datum) (if (c2eb4@id? c4ad0@id) (c2e94@datum->stx c4ad0@id c4ad1@datum) (assertion-violation 'datum->syntax '"not an identifier" c4ad0@id)))) (set! c4bf7@c319f@datum->syntax c319f@datum->syntax) (set! c31a1@syntax->datum (lambda (c4ad4@x) (c2ec8@stx->datum c4ad4@x))) (set! c4bf8@c31a1@syntax->datum c31a1@syntax->datum) (set! c31a3@ungensym-all (lambda (c4ad6@code) (if (pair? c4ad6@code) (cons (c31a3@ungensym-all (car c4ad6@code)) (c31a3@ungensym-all (cdr c4ad6@code))) (if (symbol? c4ad6@code) (ungensym c4ad6@code) c4ad6@code)))) (set! c4bf9@c31a3@ungensym-all c31a3@ungensym-all) (set! c31a5@compile-r6rs-top-level (lambda (c4ad8@x*) (call-with-values (lambda () (c3133@top-level-expander c4ad8@x*)) (lambda (c4ade@c4adb c4adf@c4add) (let ((c4ae2@invoke-code c4adf@c4add) (c4ae3@lib* c4ade@c4adb)) (lambda () (begin (for-each c2cd0@c2b1e@invoke-library c4ae3@lib*) (let ((c4ae6@expanded (c2a5a@c2a12@expanded->core c4ae2@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (c31a3@ungensym-all c4ae6@expanded)) (void)) (eval-core c4ae6@expanded)))))))))) (set! c4bfa@c31a5@compile-r6rs-top-level c31a5@compile-r6rs-top-level) (set! c31a7@pre-compile-r6rs-top-level (lambda (c4ae8@x*) (call-with-values (lambda () (c3133@top-level-expander c4ae8@x*)) (lambda (c4aee@c4aeb c4aef@c4aed) (let ((c4af2@invoke-code c4aef@c4aed) (c4af3@lib* c4aee@c4aeb)) (begin (for-each c2cd0@c2b1e@invoke-library c4af3@lib*) (c2a02@c28de@compile-core (c2a5a@c2a12@expanded->core c4af2@invoke-code)))))))) (set! c4bfb@c31a7@pre-compile-r6rs-top-level c31a7@pre-compile-r6rs-top-level) (set! c31a9@interaction-environment (let ((c4af6@the-env '#f)) (lambda () (or c4af6@the-env (let ((c4af8@lib (c2cc9@c2b10@find-library-by-name '(mosh interaction))) (c4af9@rib (c2e68@make-empty-rib))) (begin (let ((c4afc@subst (c2cab@c2ad4@library-subst c4af8@lib))) (begin (c2e54@set-rib-sym*! c4af9@rib (map car c4afc@subst)) (c2e58@set-rib-mark**! c4af9@rib (map (lambda (c4afe@x) c2e38@top-mark*) c4afc@subst)) (c2e5c@set-rib-label*! c4af9@rib (map cdr c4afc@subst)))) (let ((c4b00@env (make-simple-struct 'interaction-env '4 (list c4af9@rib '() '())))) (begin (set! c4af6@the-env c4b00@env) c4b00@env)))))))) (set! c4bfc@c31a9@interaction-environment c31a9@interaction-environment) (set! c31ab@top-level-context (c2a04@c28e2@make-parameter '#f)) (set! c4bfd@c31ab@top-level-context c31ab@top-level-context) (c2cc6@c2b0a@current-library-expander c317d@library-expander))
(begin (begin (c2a57@c2a0c@current-primitive-locations (lambda (c5147@x) (let ((c5149@t (assq c5147@x '((syntax-error . c4bf3@c3197@syntax-error) (syntax-dispatch . c4b91@c30bb@syntax-dispatch) (load . c4d79@c4c24@load) (interaction-environment . c4bfc@c31a9@interaction-environment) (library-path . c2cbe@c2afa@library-path) (mosh-cache-dir . c2a05@c28e4@mosh-cache-dir) (make-parameter . c2a04@c28e2@make-parameter) (make-variable-transformer . c4b4e@c2ee6@make-variable-transformer) (identifier? . c4bf6@c319d@identifier?) (generate-temporaries . c4bec@c3189@generate-temporaries) (free-identifier=? . c4bed@c318b@free-identifier=?) (syntax->datum . c4bf8@c31a1@syntax->datum) (datum->syntax . c4bf7@c319f@datum->syntax) (bound-identifier=? . c4bee@c318d@bound-identifier=?) (scheme-report-environment . c4be3@c3177@scheme-report-environment) (null-environment . c4be2@c3175@null-environment) (command-line . c4d76@c4c1e@command-line) (eval . c4be5@c317b@eval) (environment . c4be1@c3173@environment) (syntax-violation . c4bf5@c319b@syntax-violation) (assertion-error . c4bf2@c3195@assertion-error))))) (if c5149@t (cdr c5149@t) '#f)))) (c2cce@c2b1a@install-library 'c5124 '(mosh interaction) '() '() '() '() '(#1=(regexp? . c50e4) #2=(alist->eq-hash-table . c50e0) #3=(format . c50dd) #4=(string-split . c50d2) #5=(call-process . c50cc) #6=(set-current-directory! . c50c8) #7=(expand-path . c50c7) #8=(current-directory . c50c6) #9=(%spawn . c50c5) #10=(%waitpid . c50c4) #11=(simple-struct-name . c50c3) #12=(simple-struct-set! . c50c2) #13=(simple-struct-ref . c50c1) #14=(make-simple-struct . c50c0) #15=(simple-struct? . c50bf) #16=(pointer-ref-c-int64 . c50be) #17=(pointer-ref-c-int32 . c50bd) #18=(pointer-ref-c-int16 . c50bc) #19=(pointer-ref-c-int8 . c50bb) #20=(pointer-ref-c-uint64 . c50ba) #21=(pointer-ref-c-uint32 . c50b9) #22=(pointer-ref-c-uint16 . c50b8) #23=(pointer-ref-c-uint8 . c50b7) #24=(pointer-set-c-uint64! . c50b6) #25=(pointer-set-c-uint32! . c50b5) #26=(pointer-set-c-uint16! . c50b4) #27=(pointer-set-c-uint8! . c50b3) #28=(pointer-set-c-int64! . c50b2) #29=(pointer-set-c-int32! . c50b1) #30=(pointer-set-c-int16! . c50b0) #31=(pointer-set-c-int8! . c50af) #32=(pointer-set-c-pointer! . c50ae) #33=(pointer-set-c-double! . c50ad) #34=(pointer-set-c-float! . c50ac) #35=(pointer-set-c-long-long! . c50ab) #36=(pointer-set-c-long! . c50aa) #37=(pointer-set-c-int! . c50a9) #38=(pointer-set-c-short! . c50a8) #39=(pointer-set-c-char! . c50a7) #40=(pointer-ref-c-pointer . c50a6) #41=(pointer-ref-c-double . c50a5) #42=(pointer-ref-c-float . c50a4) #43=(pointer-ref-c-unsigned-long-long . c50a3) #44=(pointer-ref-c-signed-long-long . c50a2) #45=(pointer-ref-c-unsigned-long . c50a1) #46=(pointer-ref-c-signed-long . c50a0) #47=(pointer-ref-c-unsigned-int . c509f) #48=(pointer-ref-c-signed-int . c509e) #49=(pointer-ref-c-unsigned-short . c509d) #50=(pointer-ref-c-signed-short . c509c) #51=(pointer-ref-c-unsigned-char . c509b) #52=(pointer-ref-c-signed-char . c509a) #53=(pointer->integer . c5099) #54=(integer->pointer . c5098) #55=(pointer? . c5097) #56=(shared-errno . c5096) #57=(%ffi-supported? . c5091) #58=(%ffi-pointer->string . c5090) #59=(%ffi-call . c508f) #60=(%ffi-lookup . c508e) #61=(%ffi-open . c508d) #62=(null-terminated-utf8->string . c508c) #63=(null-terminated-bytevector->string . c508b) #64=(%exec . c508a) #65=(%fork . c5089) #66=(%pipe . c5088) #67=(p . c5087) #68=(whereis . c506b) #69=(register . c506a) #70=(vm-join! . c5069) #71=(vm-set-value! . c5068) #72=(vm? . c5067) #73=(main-vm? . c5066) #74=(vm-eval . c5065) #75=(vm-self . c5064) #76=(vm-start! . c5063) #77=(make-vm . c5062) #78=(mutex-try-lock! . c5061) #79=(mutex-unlock! . c5060) #80=(mutex-lock! . c505f) #81=(mutex? . c505e) #82=(make-mutex . c505d) #83=(condition-variable-notify-all! . c505c) #84=(condition-variable-notify! . c505b) #85=(condition-variable-wait! . c505a) #86=(make-condition-variable . c5059) #87=(string-upcase . c5041) #88=(string-titlecase . c5040) #89=(string-normalize-nfkd . c503f) #90=(string-normalize-nfkc . c503e) #91=(string-normalize-nfd . c503d) #92=(string-normalize-nfc . c503c) #93=(string-foldcase . c503b) #94=(string-downcase . c503a) #95=(string-ci>? . c5039) #96=(string-ci>=? . c5038) #97=(string-ci=? . c5037) #98=(string-ci<? . c5036) #99=(string-ci<=? . c5035) #100=(char-whitespace? . c5034) #101=(char-upper-case? . c5033) #102=(char-title-case? . c5032) #103=(char-numeric? . c5031) #104=(char-lower-case? . c5030) #105=(char-general-category . c502f) #106=(char-upcase . c502e) #107=(char-titlecase . c502d) #108=(char-foldcase . c502c) #109=(char-downcase . c502b) #110=(char-ci>? . c502a) #111=(char-ci>=? . c5029) #112=(char-ci=? . c5028) #113=(char-ci<? . c5027) #114=(char-ci<=? . c5026) #115=(char-alphabetic? . c5025) #116=(make-variable-transformer . c2ee5) #117=(identifier? . c319c) #118=(generate-temporaries . c3188) #119=(free-identifier=? . c318a) #120=(syntax->datum . c31a0) #121=(datum->syntax . c319e) #122=(bound-identifier=? . c318c) #123=(record-type-descriptor? . c5024) #124=(record-predicate . c5023) #125=(record-mutator . c5022) #126=(record-constructor . c5021) #127=(record-accessor . c5020) #128=(make-record-type-descriptor . c501f) #129=(make-record-constructor-descriptor . c501e) #130=(record? . c501d) #131=(record-type-uid . c501c) #132=(record-type-sealed? . c501b) #133=(record-type-parent . c501a) #134=(record-type-opaque? . c5019) #135=(record-type-name . c5018) #136=(record-type-generative? . c5017) #137=(record-type-field-names . c5016) #138=(record-rtd . c5015) #139=(record-field-mutable? . c5014) #140=(delete-file . c5013) #141=(file-exists? . c5012) #142=(vector-sort! . c5011) #143=(vector-sort . c5010) #144=(list-sort . c500f) #145=(symbol-hash . c500e) #146=(string-ci-hash . c500d) #147=(string-hash . c500c) #148=(equal-hash . c500b) #149=(hashtable-equivalence-function . c500a) #150=(make-hashtable . c5009) #151=(hashtable-hash-function . c5008) #152=(make-eqv-hashtable . c5007) #153=(make-eq-hashtable . c5006) #154=(hashtable? . c5005) #155=(hashtable-update! . c5004) #156=(hashtable-size . c5003) #157=(hashtable-set! . c5002) #158=(hashtable-ref . c5001) #159=(hashtable-mutable? . c5000) #160=(hashtable-keys . c4fff) #161=(hashtable-entries . c4ffe) #162=(hashtable-delete! . c4ffd) #163=(hashtable-copy . c4ffc) #164=(hashtable-contains? . c4ffb) #165=(hashtable-clear! . c4ffa) #166=(call-with-output-file . c4ff9) #167=(call-with-input-file . c4ff8) #168=(write-char . c4ff7) #169=(write . c4ff6) #170=(with-output-to-file . c4ff5) #171=(with-input-from-file . c4ff4) #172=(read-char . c4ff3) #173=(read . c4ff2) #174=(peek-char . c4ff1) #175=(open-output-file . c4ff0) #176=(open-input-file . c4fef) #177=(newline . c4fee) #178=(display . c4fed) #179=(close-output-port . c4fec) #180=(close-input-port . c4feb) #181=(eof-object? . c4fea) #182=(eof-object . c4fe9) #183=(current-error-port . c4fe8) #184=(current-output-port . c4fe7) #185=(current-input-port . c4fe6) #186=(output-port? . c4fe5) #187=(input-port? . c4fe4) #188=(utf-8-codec . c4fe3) #189=(utf-16-codec . c4fe2) #190=(transcoder-error-handling-mode . c4fe1) #191=(transcoder-eol-style . c4fe0) #192=(transcoder-codec . c4fdf) #193=(transcoded-port . c4fde) #194=(textual-port? . c4fdd) #195=(string->bytevector . c4fdc) #196=(standard-output-port . c4fdb) #197=(standard-input-port . c4fda) #198=(standard-error-port . c4fd9) #199=(set-port-position! . c4fd8) #200=(put-u8 . c4fd7) #201=(put-string . c4fd6) #202=(put-datum . c4fd5) #203=(put-char . c4fd4) #204=(put-bytevector . c4fd3) #205=(port? . c4fd2) #206=(port-transcoder . c4fd1) #207=(port-position . c4fd0) #208=(port-has-set-port-position!? . c4fcf) #209=(port-has-port-position? . c4fce) #210=(port-eof? . c4fcd) #211=(output-port-buffer-mode . c4fcc) #212=(open-string-output-port . c4fcb) #213=(open-string-input-port . c4fca) #214=(open-file-output-port . c4fc9) #215=(open-file-input/output-port . c4fc8) #216=(open-file-input-port . c4fc7) #217=(open-bytevector-output-port . c4fc6) #218=(open-bytevector-input-port . c4fc5) #219=(native-transcoder . c4fc4) #220=(native-eol-style . c4fc3) #221=(make-transcoder . c4fc2) #222=(latin-1-codec . c4fc1) #223=(make-i/o-write-error . c4fc0) #224=(make-i/o-read-error . c4fbf) #225=(make-i/o-port-error . c4fbe) #226=(make-i/o-invalid-position-error . c4fbd) #227=(make-i/o-filename-error . c4fbc) #228=(make-i/o-file-protection-error . c4fbb) #229=(make-i/o-file-is-read-only-error . c4fba) #230=(make-i/o-file-does-not-exist-error . c4fb9) #231=(make-i/o-file-already-exists-error . c4fb8) #232=(make-i/o-error . c4fb7) #233=(make-i/o-encoding-error . c4fb6) #234=(make-i/o-decoding-error . c4fb5) #235=(make-custom-textual-output-port . c4fb4) #236=(make-custom-textual-input/output-port . c4fb3) #237=(make-custom-textual-input-port . c4fb2) #238=(make-custom-binary-output-port . c4fb1) #239=(make-custom-binary-input/output-port . c4fb0) #240=(make-custom-binary-input-port . c4faf) #241=(make-bytevector . c4fae) #242=(lookahead-u8 . c4fad) #243=(lookahead-char . c4fac) #244=(i/o-write-error? . c4fab) #245=(i/o-read-error? . c4faa) #246=(i/o-port-error? . c4fa9) #247=(i/o-invalid-position-error? . c4fa8) #248=(i/o-filename-error? . c4fa7) #249=(i/o-file-protection-error? . c4fa6) #250=(i/o-file-is-read-only-error? . c4fa5) #251=(i/o-file-does-not-exist-error? . c4fa4) #252=(i/o-file-already-exists-error? . c4fa3) #253=(i/o-error? . c4fa2) #254=(i/o-error-position . c4fa1) #255=(i/o-error-port . c4fa0) #256=(i/o-error-filename . c4f9f) #257=(i/o-encoding-error? . c4f9e) #258=(i/o-encoding-error-char . c4f9d) #259=(i/o-decoding-error? . c4f9c) #260=(get-u8 . c4f9b) #261=(get-string-n! . c4f9a) #262=(get-string-n . c4f99) #263=(get-string-all . c4f98) #264=(get-line . c4f97) #265=(get-datum . c4f96) #266=(get-char . c4f95) #267=(get-bytevector-some . c4f94) #268=(get-bytevector-n! . c4f93) #269=(get-bytevector-n . c4f92) #270=(get-bytevector-all . c4f91) #271=(flush-output-port . c4f90) #272=(close-port . c4f8f) #273=(exit . c4f87) #274=(command-line . c4c1d) #275=(string-fill! . c4f86) #276=(string-set! . c4f85) #277=(set-cdr! . c4f84) #278=(set-car! . c4f83) #279=(remove . c4f82) #280=(remv . c4f81) #281=(remp . c4f80) #282=(remq . c4f7f) #283=(partition . c4f7e) #284=(memv . c4f7d) #285=(memq . c4f7c) #286=(memp . c4f7b) #287=(member . c4f7a) #288=(exists . c4f79) #289=(for-all . c4f78) #290=(fold-right . c4f77) #291=(fold-left . c4f76) #292=(find . c4f75) #293=(filter . c4f74) #294=(cons* . c4f73) #295=(assv . c4f72) #296=(assq . c4f71) #297=(assp . c4f70) #298=(assoc . c4f6f) #299=(call-with-string-output-port . c4f6e) #300=(call-with-port . c4f6d) #301=(call-with-bytevector-output-port . c4f6c) #302=(bytevector->string . c4f6b) #303=(buffer-mode? . c4f6a) #304=(binary-port? . c4f69) #305=(with-exception-handler . c4f68) #306=(raise-continuable . c4f67) #307=(raise . c4f66) #308=(eval . c317a) #309=(environment . c3172) #310=(make-enumeration . c4f65) #311=(enum-set=? . c4f64) #312=(enum-set-universe . c4f63) #313=(enum-set-union . c4f62) #314=(enum-set-subset? . c4f61) #315=(enum-set-projection . c4f60) #316=(enum-set-member? . c4f5f) #317=(enum-set-intersection . c4f5e) #318=(enum-set-indexer . c4f5d) #319=(enum-set-difference . c4f5c) #320=(enum-set-constructor . c4f5b) #321=(enum-set-complement . c4f5a) #322=(enum-set->list . c4f59) #323=(who-condition? . c4f58) #324=(warning? . c4f57) #325=(violation? . c4f56) #326=(undefined-violation? . c4f55) #327=(syntax-violation? . c4f54) #328=(syntax-violation-subform . c4f53) #329=(syntax-violation-form . c4f52) #330=(syntax-violation . c319a) #331=(simple-conditions . c4f51) #332=(serious-condition? . c4f50) #333=(non-continuable-violation? . c4f4f) #334=(message-condition? . c4f4e) #335=(make-who-condition . c4f4d) #336=(make-warning . c4f4c) #337=(make-violation . c4f4b) #338=(make-undefined-violation . c4f4a) #339=(make-syntax-violation . c4f49) #340=(make-serious-condition . c4f48) #341=(make-non-continuable-violation . c4f47) #342=(make-message-condition . c4f46) #343=(make-lexical-violation . c4f45) #344=(make-irritants-condition . c4f44) #345=(make-implementation-restriction-violation . c4f43) #346=(make-error . c4f42) #347=(make-assertion-violation . c4f41) #348=(lexical-violation? . c4f40) #349=(irritants-condition? . c4f3f) #350=(implementation-restriction-violation? . c4f3e) #351=(error? . c4f3d) #352=(condition-who . c4f3c) #353=(condition-predicate . c4f3b) #354=(condition-message . c4f3a) #355=(condition-irritants . c4f39) #356=(condition-accessor . c4f38) #357=(condition . c4f37) #358=(assertion-violation? . c4f36) #359=(condition? . c4f35) #360=(utf32->string . c4f34) #361=(utf16->string . c4f33) #362=(utf8->string . c4f32) #363=(uint-list->bytevector . c4f31) #364=(u8-list->bytevector . c4f30) #365=(string->utf8 . c4f2f) #366=(string->utf32 . c4f2e) #367=(string->utf16 . c4f2d) #368=(sint-list->bytevector . c4f2c) #369=(native-endianness . c4f2b) #370=(bytevector? . c4f2a) #371=(bytevector=? . c4f29) #372=(bytevector-uint-set! . c4f28) #373=(bytevector-uint-ref . c4f27) #374=(bytevector-u8-set! . c4f26) #375=(bytevector-u8-ref . c4f25) #376=(bytevector-u64-set! . c4f24) #377=(bytevector-u64-ref . c4f23) #378=(bytevector-u64-native-set! . c4f22) #379=(bytevector-u64-native-ref . c4f21) #380=(bytevector-u32-set! . c4f20) #381=(bytevector-u32-ref . c4f1f) #382=(bytevector-u32-native-set! . c4f1e) #383=(bytevector-u32-native-ref . c4f1d) #384=(bytevector-u16-set! . c4f1c) #385=(bytevector-u16-ref . c4f1b) #386=(bytevector-u16-native-set! . c4f1a) #387=(bytevector-u16-native-ref . c4f19) #388=(bytevector-sint-set! . c4f18) #389=(bytevector-sint-ref . c4f17) #390=(bytevector-s8-set! . c4f16) #391=(bytevector-s8-ref . c4f15) #392=(bytevector-s64-set! . c4f14) #393=(bytevector-s64-ref . c4f13) #394=(bytevector-s64-native-set! . c4f12) #395=(bytevector-s64-native-ref . c4f11) #396=(bytevector-s32-set! . c4f10) #397=(bytevector-s32-ref . c4f0f) #398=(bytevector-s32-native-set! . c4f0e) #399=(bytevector-s32-native-ref . c4f0d) #400=(bytevector-s16-set! . c4f0c) #401=(bytevector-s16-ref . c4f0b) #402=(bytevector-s16-native-set! . c4f0a) #403=(bytevector-s16-native-ref . c4f09) #404=(bytevector-length . c4f08) #405=(bytevector-ieee-single-ref . c4f07) #406=(bytevector-ieee-single-set! . c4f06) #407=(bytevector-ieee-single-native-set! . c4f05) #408=(bytevector-ieee-single-native-ref . c4f04) #409=(bytevector-ieee-double-set! . c4f03) #410=(bytevector-ieee-double-ref . c4f02) #411=(bytevector-ieee-double-native-set! . c4f01) #412=(bytevector-ieee-double-native-ref . c4f00) #413=(bytevector-fill! . c4eff) #414=(bytevector-copy! . c4efe) #415=(bytevector-copy . c4efd) #416=(bytevector->uint-list . c4efc) #417=(bytevector->u8-list . c4efb) #418=(bytevector->sint-list . c4efa) #419=(no-nans-violation? . c4ef9) #420=(no-infinities-violation? . c4ef8) #421=(make-no-nans-violation . c4ef7) #422=(make-no-infinities-violation . c4ef6) #423=(real->flonum . c4ef5) #424=(flzero? . c4ef4) #425=(fltruncate . c4ef3) #426=(fltan . c4ef2) #427=(flsqrt . c4ef1) #428=(flsin . c4ef0) #429=(flround . c4eef) #430=(flpositive? . c4eee) #431=(flonum? . c4eed) #432=(flodd? . c4eec) #433=(flnumerator . c4eeb) #434=(flnegative? . c4eea) #435=(flnan? . c4ee9) #436=(flmod0 . c4ee8) #437=(flmod . c4ee7) #438=(flmin . c4ee6) #439=(flmax . c4ee5) #440=(fllog . c4ee4) #441=(flinteger? . c4ee3) #442=(flinfinite? . c4ee2) #443=(flfloor . c4ee1) #444=(flfinite? . c4ee0) #445=(flexpt . c4edf) #446=(flexp . c4ede) #447=(fleven? . c4edd) #448=(fldiv0-and-mod0 . c4edc) #449=(fldiv0 . c4edb) #450=(fldiv-and-mod . c4eda) #451=(fldiv . c4ed9) #452=(fldenominator . c4ed8) #453=(flcos . c4ed7) #454=(flceiling . c4ed6) #455=(flatan . c4ed5) #456=(flasin . c4ed4) #457=(flacos . c4ed3) #458=(flabs . c4ed2) #459=(fl>? . c4ed1) #460=(fl>=? . c4ed0) #461=(fl=? . c4ecf) #462=(fl<? . c4ece) #463=(fl<=? . c4ecd) #464=(fl/ . c4ecc) #465=(fl- . c4ecb) #466=(fl+ . c4eca) #467=(fl* . c4ec9) #468=(fixnum->flonum . c4ec8) #469=(fxzero? . c4ec7) #470=(fxxor . c4ec6) #471=(fxrotate-bit-field . c4ec5) #472=(fxreverse-bit-field . c4ec4) #473=(fxpositive? . c4ec3) #474=(fxodd? . c4ec2) #475=(fxnot . c4ec1) #476=(fxnegative? . c4ec0) #477=(fxmod0 . c4ebf) #478=(fxmod . c4ebe) #479=(fxmin . c4ebd) #480=(fxmax . c4ebc) #481=(fxlength . c4ebb) #482=(fxior . c4eba) #483=(fxif . c4eb9) #484=(fxfirst-bit-set . c4eb8) #485=(fxeven? . c4eb7) #486=(fxdiv0-and-mod0 . c4eb6) #487=(fxdiv0 . c4eb5) #488=(fxdiv-and-mod . c4eb4) #489=(fxdiv . c4eb3) #490=(fxcopy-bit-field . c4eb2) #491=(fxcopy-bit . c4eb1) #492=(fxbit-set? . c4eb0) #493=(fxbit-field . c4eaf) #494=(fxbit-count . c4eae) #495=(fxarithmetic-shift-right . c4ead) #496=(fxarithmetic-shift-left . c4eac) #497=(fxarithmetic-shift . c4eab) #498=(fxand . c4eaa) #499=(fx>? . c4ea9) #500=(fx>=? . c4ea8) #501=(fx=? . c4ea7) #502=(fx<? . c4ea6) #503=(fx<=? . c4ea5) #504=(fx-/carry . c4ea4) #505=(fx- . c4ea3) #506=(fx+/carry . c4ea2) #507=(fx+ . c4ea1) #508=(fx*/carry . c4ea0) #509=(fx* . c4e9f) #510=(greatest-fixnum . c4e9e) #511=(least-fixnum . c4e9d) #512=(fixnum-width . c4e9c) #513=(fixnum? . c4e9b) #514=(bitwise-rotate-bit-field . c4e9a) #515=(bitwise-reverse-bit-field . c4e99) #516=(bitwise-length . c4e98) #517=(bitwise-if . c4e97) #518=(bitwise-first-bit-set . c4e96) #519=(bitwise-copy-bit-field . c4e95) #520=(bitwise-copy-bit . c4e94) #521=(bitwise-bit-set? . c4e93) #522=(bitwise-bit-field . c4e92) #523=(bitwise-bit-count . c4e91) #524=(bitwise-xor . c4e90) #525=(bitwise-ior . c4e8f) #526=(bitwise-and . c4e8e) #527=(bitwise-not . c4e8d) #528=(bitwise-arithmetic-shift-right . c4e8c) #529=(bitwise-arithmetic-shift-left . c4e8b) #530=(bitwise-arithmetic-shift . c4e8a) #531=(zero? . c4e89) #532=(vector? . c4e88) #533=(vector-set! . c4e87) #534=(vector-ref . c4e86) #535=(vector-map . c4e85) #536=(vector-length . c4e84) #537=(vector-for-each . c4e83) #538=(vector-fill! . c4e82) #539=(vector->list . c4e81) #540=(vector . c4e80) #541=(values . c4e7f) #542=(truncate . c4e7e) #543=(tan . c4e7d) #544=(symbol? . c4e7c) #545=(symbol=? . c4e7b) #546=(symbol->string . c4e7a) #547=(substring . c4e79) #548=(string? . c4e78) #549=(string>? . c4e77) #550=(string>=? . c4e76) #551=(string=? . c4e75) #552=(string<? . c4e74) #553=(string<=? . c4e73) #554=(string-ref . c4e72) #555=(string-length . c4e71) #556=(string-for-each . c4e70) #557=(string-copy . c4e6f) #558=(string-append . c4e6e) #559=(string->symbol . c4e6d) #560=(string->number . c4e6c) #561=(string->list . c4e6b) #562=(string . c4e6a) #563=(sqrt . c4e69) #564=(sin . c4e68) #565=(round . c4e67) #566=(reverse . c4e66) #567=(real? . c4e65) #568=(real-valued? . c4e64) #569=(real-part . c4e63) #570=(rationalize . c4e62) #571=(rational? . c4e61) #572=(rational-valued? . c4e60) #573=(procedure? . c4e5f) #574=(positive? . c4e5e) #575=(pair? . c4e5d) #576=(odd? . c4e5c) #577=(numerator . c4e5b) #578=(number? . c4e5a) #579=(number->string . c4e59) #580=(null? . c4e58) #581=(not . c4e57) #582=(negative? . c4e56) #583=(nan? . c4e55) #584=(min . c4e54) #585=(max . c4e53) #586=(map . c4e52) #587=(make-vector . c4e51) #588=(make-string . c4e50) #589=(make-rectangular . c4e4f) #590=(make-polar . c4e4e) #591=(magnitude . c4e4d) #592=(log . c4e4c) #593=(list? . c4e4b) #594=(list-tail . c4e4a) #595=(list-ref . c4e49) #596=(list->vector . c4e48) #597=(list->string . c4e47) #598=(list . c4e46) #599=(length . c4e45) #600=(lcm . c4e44) #601=(integer? . c4e43) #602=(integer-valued? . c4e42) #603=(integer->char . c4e41) #604=(infinite? . c4e40) #605=(inexact? . c4e3f) #606=(inexact . c4e3e) #607=(imag-part . c4e3d) #608=(gcd . c4e3c) #609=(for-each . c4e3b) #610=(floor . c4e3a) #611=(finite? . c4e39) #612=(expt . c4e38) #613=(exp . c4e37) #614=(exact? . c4e36) #615=(exact-integer-sqrt . c4e35) #616=(exact . c4e34) #617=(even? . c4e33) #618=(error . c4e32) #619=(eqv? . c4e31) #620=(equal? . c4e30) #621=(eq? . c4e2f) #622=(dynamic-wind . c4e2e) #623=(div0-and-mod0 . c4e2d) #624=(mod0 . c4e2c) #625=(div0 . c4e2b) #626=(div-and-mod . c4e2a) #627=(mod . c4e29) #628=(div . c4e28) #629=(denominator . c4e27) #630=(cos . c4e26) #631=(cons . c4e25) #632=(complex? . c4e24) #633=(char? . c4e23) #634=(char>? . c4e22) #635=(char>=? . c4e21) #636=(char=? . c4e20) #637=(char<? . c4e1f) #638=(char<=? . c4e1e) #639=(char->integer . c4e1d) #640=(ceiling . c4e1c) #641=(call-with-values . c4e1b) #642=(call/cc . c4e1a) #643=(call-with-current-continuation . c4e19) #644=(cddddr . c4e18) #645=(cdddar . c4e17) #646=(cddadr . c4e16) #647=(cddaar . c4e15) #648=(cdaddr . c4e14) #649=(cdadar . c4e13) #650=(cdaadr . c4e12) #651=(cdaaar . c4e11) #652=(cadddr . c4e10) #653=(caddar . c4e0f) #654=(cadadr . c4e0e) #655=(cadaar . c4e0d) #656=(caaddr . c4e0c) #657=(caadar . c4e0b) #658=(caaadr . c4e0a) #659=(caaaar . c4e09) #660=(cdddr . c4e08) #661=(cddar . c4e07) #662=(cdadr . c4e06) #663=(cdaar . c4e05) #664=(caddr . c4e04) #665=(cadar . c4e03) #666=(caadr . c4e02) #667=(caaar . c4e01) #668=(cddr . c4e00) #669=(cdar . c4dff) #670=(cadr . c4dfe) #671=(caar . c4dfd) #672=(cdr . c4dfc) #673=(car . c4dfb) #674=(boolean? . c4dfa) #675=(boolean=? . c4df9) #676=(atan . c4df8) #677=(assertion-violation . c4df7) #678=(asin . c4df6) #679=(apply . c4df5) #680=(append . c4df4) #681=(angle . c4df3) #682=(acos . c4df2) #683=(abs . c4df1) #684=(/ . c4df0) #685=(* . c4def) #686=(- . c4dee) #687=(+ . c4ded) #688=(>= . c4dec) #689=(> . c4deb) #690=(= . c4dea) #691=(<= . c4de9) #692=(< . c4de8) #693=(library . c4de7) #694=(&no-nans . c4de6) #695=(&no-infinities . c4de5) #696=(&i/o-encoding . c4de4) #697=(&i/o-decoding . c4de3) #698=(&i/o-port . c4de2) #699=(&i/o-file-does-not-exist . c4de1) #700=(&i/o-file-already-exists . c4de0) #701=(&i/o-file-is-read-only . c4ddf) #702=(&i/o-file-protection . c4dde) #703=(&i/o-filename . c4ddd) #704=(&i/o-invalid-position . c4ddc) #705=(&i/o-write . c4ddb) #706=(&i/o-read . c4dda) #707=(&i/o . c4dd9) #708=(&undefined . c4dd8) #709=(&syntax . c4dd7) #710=(&lexical . c4dd6) #711=(&implementation-restriction . c4dd5) #712=(&non-continuable . c4dd4) #713=(&who . c4dd3) #714=(&irritants . c4dd2) #715=(&assertion . c4dd1) #716=(&violation . c4dd0) #717=(&error . c4dcf) #718=(&serious . c4dce) #719=(&warning . c4dcd) #720=(&message . c4dcc) #721=(&condition . c4dcb) #722=(define-condition-type . c4dca) #723=(define-enumeration . c4dc9) #724=(define-record-type . c4dc8) #725=(parent-rtd . c4dc7) #726=(nongenerative . c4dc6) #727=(opaque . c4dc5) #728=(sealed . c4dc4) #729=(protocol . c4dc3) #730=(parent . c4dc2) #731=(immutable . c4dc1) #732=(mutable . c4dc0) #733=(fields . c4dbf) #734=(error-handling-mode . c4dbe) #735=(file-options . c4dbd) #736=(buffer-mode . c4dbc) #737=(eol-style . c4dbb) #738=(guard . c4dba) #739=(unsyntax-splicing . c4db7) #740=(unsyntax . c4db6) #741=(unquote-splicing . c4db5) #742=(unquote . c4db4) #743=(_ . c4db3) #744=(else . c4db2) #745=(=> . c4db1) #746=(... . c4db0) #747=(assert . c4daf) #748=(endianness . c4dae) #749=(time . c4dac) #750=(do . c4dab) #751=(cond . c4daa) #752=(let* . c4da9) #753=(let*-values . c4da8) #754=(let-values . c4da7) #755=(identifier-syntax . c4da6) #756=(with-syntax . c4da5) #757=(quasisyntax . c4da4) #758=(quasiquote . c4da3) #759=(syntax-rules . c4da2) #760=(include . c4da1) #761=(record-constructor-descriptor . c4d9f) #762=(record-type-descriptor . c4d9e) #763=(case . c4d9d) #764=(unless . c4d9b) #765=(when . c4d9a) #766=(or . c4d99) #767=(and . c4d98) #768=(if . c4d97) #769=(let . c4d96) #770=(letrec* . c4d95) #771=(letrec . c4d94) #772=(case-lambda . c4d92) #773=(lambda . c4d91) #774=(syntax . c4d90) #775=(syntax-case . c4d8f) #776=(quote . c4d8e) #777=(letrec-syntax . c4d8c) #778=(let-syntax . c4d8b) #779=(set! . c4d8a) #780=(import . c4d89) #781=(begin . c4d88) #782=(define-syntax . c4d86) #783=(define . c4d85)) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5125 '(psyntax null-environment-5) '() '() '() '() '(#784=(make-promise . c4f88) #741# #742# #743# #744# #745# #746# #785=(delay . c4dad) #750# #751# #752# #758# #759# #763# #766# #767# #768# #769# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5126 '(psyntax scheme-report-environment-5) '() '() '() '() '(#95# #96# #97# #98# #99# #100# #101# #103# #104# #106# #109# #110# #111# #112# #113# #114# #115# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #182# #184# #185# #186# #187# #786=(scheme-report-environment . c3176) #787=(quotient . c4f8e) #788=(null-environment . c3174) #789=(remainder . c4f8d) #790=(modulo . c4f8c) #791=(inexact->exact . c4f8b) #792=(force . c4f8a) #793=(exact->inexact . c4f89) #784# #275# #276# #277# #278# #284# #285# #287# #295# #296# #298# #308# #531# #532# #533# #534# #536# #538# #539# #540# #541# #542# #543# #544# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #569# #570# #571# #573# #574# #575# #576# #577# #578# #579# #581# #582# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #603# #605# #607# #608# #609# #610# #612# #613# #614# #617# #619# #620# #621# #622# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #676# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #741# #742# #744# #745# #746# #785# #750# #751# #752# #758# #759# #763# #766# #767# #768# #769# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5127 '(psyntax modules) '() '() '() '() '(#794=(module . c4d87)) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5128 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5129 '(rnrs) '#795=(6) '() '() '() '(#1# #87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114# #115# #116# #117# #118# #119# #120# #121# #122# #123# #124# #125# #126# #127# #128# #129# #130# #131# #132# #133# #134# #135# #136# #137# #138# #139# #140# #141# #142# #143# #144# #145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #241# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #273# #274# #279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297# #298# #299# #300# #301# #302# #303# #304# #305# #306# #307# #310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513# #514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530# #531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# #738# #739# #740# #741# #742# #743# #744# #745# #746# #747# #748# #750# #751# #752# #753# #754# #755# #756# #757# #758# #759# #761# #762# #763# #764# #765# #766# #767# #768# #769# #770# #771# #772# #773# #774# #775# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c512a '(rnrs r5rs) '#795# '() '() '() '(#786# #787# #788# #789# #790# #791# #792# #793# #784# #785#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c512b '(rnrs control) '#795# '() '() '() '(#750# #764# #765# #772#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c512c '(rnrs eval) '#795# '() '() '() '(#308# #309#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c512d '(rnrs mutable-pairs) '#795# '() '() '() '(#277# #278#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c512e '(rnrs mutable-strings) '#795# '() '() '() '(#275# #276#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c512f '(rnrs programs) '#795# '() '() '() '(#273# #274#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5130 '(rnrs syntax-case) '#795# '() '() '() '(#116# #117# #118# #119# #120# #121# #122# #330# #739# #740# #743# #746# #756# #757# #774# #775#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5131 '(rnrs files) '#795# '() '() '() '(#140# #141# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5132 '(rnrs sorting) '#795# '() '() '() '(#142# #143# #144#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5133 '(rnrs base) '#795# '() '() '() '(#531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #741# #742# #743# #744# #745# #746# #747# #751# #752# #753# #754# #755# #758# #759# #763# #766# #767# #768# #769# #770# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5134 '(rnrs lists) '#795# '() '() '() '(#279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297# #298#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5135 '(rnrs io simple) '#795# '() '() '() '(#166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5136 '(rnrs bytevectors) '#795# '() '() '() '(#241# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #748#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5137 '(rnrs unicode) '#795# '() '() '() '(#87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114# #115#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5138 '(rnrs exceptions) '#795# '() '() '() '(#305# #306# #307# #738# #744# #745#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5139 '(rnrs arithmetic bitwise) '#795# '() '() '() '(#514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c513a '(rnrs arithmetic fixnums) '#795# '() '() '() '(#469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c513b '(rnrs arithmetic flonums) '#795# '() '() '() '(#419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #694# #695#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c513c '(rnrs hashtables) '#795# '() '() '() '(#145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c513d '(rnrs io ports) '#795# '() '() '() '(#181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #299# #300# #301# #302# #303# #304# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #734# #735# #736# #737#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c513e '(rnrs enums) '#795# '() '() '() '(#310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #723#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c513f '(rnrs conditions) '#795# '() '() '() '(#323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5140 '(rnrs records inspection) '#795# '() '() '() '(#130# #131# #132# #133# #134# #135# #136# #137# #138# #139#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5141 '(rnrs records procedural) '#795# '() '() '() '(#123# #124# #125# #126# #127# #128# #129#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5142 '(rnrs records syntactic) '#795# '() '() '() '(#724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #761# #762#) '() values values '#f '#f '#t '#f) (c2cce@c2b1a@install-library 'c5143 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . c5123) (&no-nans-rtd . c5122) (&no-infinities-rcd . c5121) (&no-infinities-rtd . c5120) (&i/o-encoding-rcd . c511f) (&i/o-encoding-rtd . c511e) (&i/o-decoding-rcd . c511d) (&i/o-decoding-rtd . c511c) (&i/o-port-rcd . c511b) (&i/o-port-rtd . c511a) (&i/o-file-does-not-exist-rcd . c5119) (&i/o-file-does-not-exist-rtd . c5118) (&i/o-file-already-exists-rcd . c5117) (&i/o-file-already-exists-rtd . c5116) (&i/o-file-is-read-only-rcd . c5115) (&i/o-file-is-read-only-rtd . c5114) (&i/o-file-protection-rcd . c5113) (&i/o-file-protection-rtd . c5112) (&i/o-filename-rcd . c5111) (&i/o-filename-rtd . c5110) (&i/o-invalid-position-rcd . c510f) (&i/o-invalid-position-rtd . c510e) (&i/o-write-rcd . c510d) (&i/o-write-rtd . c510c) (&i/o-read-rcd . c510b) (&i/o-read-rtd . c510a) (&i/o-rcd . c5109) (&i/o-rtd . c5108) (&undefined-rcd . c5107) (&undefined-rtd . c5106) (&syntax-rcd . c5105) (&syntax-rtd . c5104) (&lexical-rcd . c5103) (&lexical-rtd . c5102) (&implementation-restriction-rcd . c5101) (&implementation-restriction-rtd . c5100) (&non-continuable-rcd . c50ff) (&non-continuable-rtd . c50fe) (&who-rcd . c50fd) (&who-rtd . c50fc) (&irritants-rcd . c50fb) (&irritants-rtd . c50fa) (&assertion-rcd . c50f9) (&assertion-rtd . c50f8) (&violation-rcd . c50f7) (&violation-rtd . c50f6) (&error-rcd . c50f5) (&error-rtd . c50f4) (&serious-rcd . c50f3) (&serious-rtd . c50f2) (&warning-rcd . c50f1) (&warning-rtd . c50f0) (&message-rcd . c50ef) (&message-rtd . c50ee) (&condition-rcd . c50ed) (&condition-rtd . c50ec) (syntax-error . c3196) (syntax-dispatch . c30ba) #796=(pretty-print . c50eb) #797=(eval-core . c50ea) #798=(set-symbol-value! . c50e9) #799=(symbol-value . c50e8) #800=(gensym . c50e7) #801=(void . c50e6) (load . c4c23) (interaction-environment . c31a8) (char-ready? . c50e5) #1# #802=(read-line . c50e3) #803=(gensym-prefix-set! . c50e2) #804=(ungensym . c50e1) #2# #805=(assoc-ref . c50df) #806=(print . c50de) #3# #807=(host-os . c50dc) #808=(library-path . c2af9) #809=(standard-library-path . c50db) #810=(file-newer? . c50da) #811=(stat-mtime . c50d9) #812=(write-to-file . c50d8) #813=(file->list . c50d7) #814=(file->string . c50d6) #815=(digit->integer . c50d5) #816=(call-with-string-input-port . c50d4) #817=(call-with-string-io . c50d3) #4# #818=(bytevector-for-each . c50d1) #819=(string->regexp . c50d0) #820=(rxmatch . c50cf) #821=(regexp-replace-all . c50ce) #822=(hashtable-for-each . c50cd) #823=(mosh-cache-dir . c28e3) #5# #824=(local-tz-offset . c50cb) #825=(microseconds . c50ca) #826=(directory-list . c50c9) #6# #7# #8# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #827=(%ffi-free-c-callback-trampoline . c5095) #828=(%ffi-make-c-callback-trampoline . c5094) #829=(%ffi-free . c5093) #830=(%ffi-malloc . c5092) #57# #58# #59# #60# #61# #62# #63# #64# #65# #66# #67# #831=(open-output-string . c5086) #832=(get-output-string . c5085) #833=(file-stat-ctime . c5084) #834=(file-stat-atime . c5083) #835=(file-stat-mtime . c5082) #836=(file-size-in-bytes . c5081) #837=(file-writable? . c5080) #838=(file-executable? . c507f) #839=(file-readable? . c507e) #840=(file-regular? . c507d) #841=(file-symbolic-link? . c507c) #842=(file-directory? . c507b) #843=(create-symbolic-link . c507a) #844=(rename-file . c5079) #845=(delete-directory . c5078) #846=(create-directory . c5077) #847=(create-mosh-cache-dir . c5076) #848=(get-environment-variables . c5075) #849=(current-exception-handler . c5074) #850=(get-environment-variable . c5073) #851=(join-wraps . c5072) #852=(id->real-label . c5071) #853=(same-marks? . c5070) #854=(same-marks*? . c506f) #855=(get-timeofday . c506e) #856=(get-command-line . c506d) #857=(sys-display . c506c) #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #86# #858=(mosh-executable-path . c5058) #859=(make-file-options . c5057) #860=(source-info . c5056) #861=(make-compiler-instruction . c5055) #862=(make-instruction . c5054) #863=(set-source-info! . c5053) #864=(bignum? . c5052) #865=(fast-equal? . c5051) #866=(fasl-read . c5050) #867=(fasl-write . c504f) #868=(time-usage . c504e) #869=(os-constant . c504d) #870=(disasm . c504c) #871=(make-parameter . c28e1) #872=(socket-port . c504b) #873=(socket-shutdown . c504a) #874=(socket-close . c5049) #875=(socket-send . c5048) #876=(socket-recv! . c5047) #877=(socket-recv . c5046) #878=(make-server-socket . c5045) #879=(make-client-socket . c5044) #880=(socket-accept . c5043) #881=(socket? . cassertion-error . c3194) #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #693# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# #738# (trace-define . c4db9) (trace-lambda . c4db8) #739# #740# #741# #742# #743# #744# #745# #746# #747# #748# #785# #749# #750# #751# #752# #753# #754# #755# #756# #757# #758# #759# #760# (define-struct . c4da0) #761# #762# #763# #882=(parameterize . c4d9c) #764# #765# #766# #767# #768# #769# #770# #771# (type-descriptor . c4d93) #772# #773# #774# #775# #776# (foreign-call . c4d8d) #777# #778# #779# #780# #781# #794# #782# #783#) '((c5123 core-prim . &no-nans-rcd) (c5122 core-prim . &no-nans-rtd) (c5121 core-prim . &no-infinities-rcd) (c5120 core-prim . &no-infinities-rtd) (c511f core-prim . &i/o-encoding-rcd) (c511e core-prim . &i/o-encoding-rtd) (c511d core-prim . &i/o-decoding-rcd) (c511c core-prim . &i/o-decoding-rtd) (c511b core-prim . &i/o-port-rcd) (c511a core-prim . &i/o-port-rtd) (c5119 core-prim . &i/o-file-does-not-exist-rcd) (c5118 core-prim . &i/o-file-does-not-exist-rtd) (c5117 core-prim . &i/o-file-already-exists-rcd) (c5116 core-prim . &i/o-file-already-exists-rtd) (c5115 core-prim . &i/o-file-is-read-only-rcd) (c5114 core-prim . &i/o-file-is-read-only-rtd) (c5113 core-prim . &i/o-file-protection-rcd) (c5112 core-prim . &i/o-file-protection-rtd) (c5111 core-prim . &i/o-filename-rcd) (c5110 core-prim . &i/o-filename-rtd) (c510f core-prim . &i/o-invalid-position-rcd) (c510e core-prim . &i/o-invalid-position-rtd) (c510d core-prim . &i/o-write-rcd) (c510c core-prim . &i/o-write-rtd) (c510b core-prim . &i/o-read-rcd) (c510a core-prim . &i/o-read-rtd) (c5109 core-prim . &i/o-rcd) (c5108 core-prim . &i/o-rtd) (c5107 core-prim . &undefined-rcd) (c5106 core-prim . &undefined-rtd) (c5105 core-prim . &syntax-rcd) (c5104 core-prim . &syntax-rtd) (c5103 core-prim . &lexical-rcd) (c5102 core-prim . &lexical-rtd) (c5101 core-prim . &implementation-restriction-rcd) (c5100 core-prim . &implementation-restriction-rtd) (c50ff core-prim . &non-continuable-rcd) (c50fe core-prim . &non-continuable-rtd) (c50fd core-prim . &who-rcd) (c50fc core-prim . &who-rtd) (c50fb core-prim . &irritants-rcd) (c50fa core-prim . &irritants-rtd) (c50f9 core-prim . &assertion-rcd) (c50f8 core-prim . &assertion-rtd) (c50f7 core-prim . &violation-rcd) (c50f6 core-prim . &violation-rtd) (c50f5 core-prim . &error-rcd) (c50f4 core-prim . &error-rtd) (c50f3 core-prim . &serious-rcd) (c50f2 core-prim . &serious-rtd) (c50f1 core-prim . &warning-rcd) (c50f0 core-prim . &warning-rtd) (c50ef core-prim . &message-rcd) (c50ee core-prim . &message-rtd) (c50ed core-prim . &condition-rcd) (c50ec core-prim . &condition-rtd) (c3196 core-prim . syntax-error) (c30ba core-prim . syntax-dispatch) (c50eb core-prim . pretty-print) (c50ea core-prim . eval-core) (c50e9 core-prim . set-symbol-value!) (c50e8 core-prim . symbol-value) (c50e7 core-prim . gensym) (c50e6 core-prim . void) (c4c23 core-prim . load) (c31a8 core-prim . interaction-environment) (c50e5 core-prim . char-ready?) (c50e4 core-prim . regexp?) (c50e3 core-prim . read-line) (c50e2 core-prim . gensym-prefix-set!) (c50e1 core-prim . ungensym) (c50e0 core-prim . alist->eq-hash-table) (c50df core-prim . assoc-ref) (c50de core-prim . print) (c50dd core-prim . format) (c50dc core-prim . host-os) (c2af9 core-prim . library-path) (c50db core-prim . standard-library-path) (c50da core-prim . file-newer?) (c50d9 core-prim . stat-mtime) (c50d8 core-prim . write-to-file) (c50d7 core-prim . file->list) (c50d6 core-prim . file->string) (c50d5 core-prim . digit->integer) (c50d4 core-prim . call-with-string-input-port) (c50d3 core-prim . call-with-string-io) (c50d2 core-prim . string-split) (c50d1 core-prim . bytevector-for-each) (c50d0 core-prim . string->regexp) (c50cf core-prim . rxmatch) (c50ce core-prim . regexp-replace-all) (c50cd core-prim . hashtable-for-each) (c28e3 core-prim . mosh-cache-dir) (c50cc core-prim . call-process) (c50cb core-prim . local-tz-offset) (c50ca core-prim . microseconds) (c50c9 core-prim . directory-list) (c50c8 core-prim . set-current-directory!) (c50c7 core-prim . expand-path) (c50c6 core-prim . current-directory) (c50c5 core-prim . %spawn) (c50c4 core-prim . %waitpid) (c50c3 core-prim . simple-struct-name) (c50c2 core-prim . simple-struct-set!) (c50c1 core-prim . simple-struct-ref) (c50c0 core-prim . make-simple-struct) (c50bf core-prim . simple-struct?) (c50be core-prim . pointer-ref-c-int64) (c50bd core-prim . pointer-ref-c-int32) (c50bc core-prim . pointer-ref-c-int16) (c50bb core-prim . pointer-ref-c-int8) (c50ba core-prim . pointer-ref-c-uint64) (c50b9 core-prim . pointer-ref-c-uint32) (c50b8 core-prim . pointer-ref-c-uint16) (c50b7 core-prim . pointer-ref-c-uint8) (c50b6 core-prim . pointer-set-c-uint64!) (c50b5 core-prim . pointer-set-c-uint32!) (c50b4 core-prim . pointer-set-c-uint16!) (c50b3 core-prim . pointer-set-c-uint8!) (c50b2 core-prim . pointer-set-c-int64!) (c50b1 core-prim . pointer-set-c-int32!) (c50b0 core-prim . pointer-set-c-int16!) (c50af core-prim . pointer-set-c-int8!) (c50ae core-prim . pointer-set-c-pointer!) (c50ad core-prim . pointer-set-c-double!) (c50ac core-prim . pointer-set-c-float!) (c50ab core-prim . pointer-set-c-long-long!) (c50aa core-prim . pointer-set-c-long!) (c50a9 core-prim . pointer-set-c-int!) (c50a8 core-prim . pointer-set-c-short!) (c50a7 core-prim . pointer-set-c-char!) (c50a6 core-prim . pointer-ref-c-pointer) (c50a5 core-prim . pointer-ref-c-double) (c50a4 core-prim . pointer-ref-c-float) (c50a3 core-prim . pointer-ref-c-unsigned-long-long) (c50a2 core-prim . pointer-ref-c-signed-long-long) (c50a1 core-prim . pointer-ref-c-unsigned-long) (c50a0 core-prim . pointer-ref-c-signed-long) (c509f core-prim . pointer-ref-c-unsigned-int) (c509e core-prim . pointer-ref-c-signed-int) (c509d core-prim . pointer-ref-c-unsigned-short) (c509c core-prim . pointer-ref-c-signed-short) (c509b core-prim . pointer-ref-c-unsigned-char) (c509a core-prim . pointer-ref-c-signed-char) (c5099 core-prim . pointer->integer) (c5098 core-prim . integer->pointer) (c5097 core-prim . pointer?) (c5096 core-prim . shared-errno) (c5095 core-prim . %ffi-free-c-callback-trampoline) (c5094 core-prim . %ffi-make-c-callback-trampoline) (c5093 core-prim . %ffi-free) (c5092 core-prim . %ffi-malloc) (c5091 core-prim . %ffi-supported?) (c5090 core-prim . %ffi-pointer->string) (c508f core-prim . %ffi-call) (c508e core-prim . %ffi-lookup) (c508d core-prim . %ffi-open) (c508c core-prim . null-terminated-utf8->string) (c508b core-prim . null-terminated-bytevector->string) (c508a core-prim . %exec) (c5089 core-prim . %fork) (c5088 core-prim . %pipe) (c5087 core-prim . p) (c5086 core-prim . open-output-string) (c5085 core-prim . get-output-string) (c5084 core-prim . file-stat-ctime) (c5083 core-prim . file-stat-atime) (c5082 core-prim . file-stat-mtime) (c5081 core-prim . file-size-in-bytes) (c5080 core-prim . file-writable?) (c507f core-prim . file-executable?) (c507e core-prim . file-readable?) (c507d core-prim . file-regular?) (c507c core-prim . file-symbolic-link?) (c507b core-prim . file-directory?) (c507a core-prim . create-symbolic-link) (c5079 core-prim . rename-file) (c5078 core-prim . delete-directory) (c5077 core-prim . create-directory) (c5076 core-prim . create-mosh-cache-dir) (c5075 core-prim . get-environment-variables) (c5074 core-prim . current-exception-handler) (c5073 core-prim . get-environment-variable) (c5072 core-prim . join-wraps) (c5071 core-prim . id->real-label) (c5070 core-prim . same-marks?) (c506f core-prim . same-marks*?) (c506e core-prim . get-timeofday) (c506d core-prim . get-command-line) (c506c core-prim . sys-display) (c506b core-prim . whereis) (c506a core-prim . register) (c5069 core-prim . vm-join!) (c5068 core-prim . vm-set-value!) (c5067 core-prim . vm?) (c5066 core-prim . main-vm?) (c5065 core-prim . vm-eval) (c5064 core-prim . vm-self) (c5063 core-prim . vm-start!) (c5062 core-prim . make-vm) (c5061 core-prim . mutex-try-lock!) (c5060 core-prim . mutex-unlock!) (c505f core-prim . mutex-lock!) (c505e core-prim . mutex?) (c505d core-prim . make-mutex) (c505c core-prim . condition-variable-notify-all!) (c505b core-prim . condition-variable-notify!) (c505a core-prim . condition-variable-wait!) (c5059 core-prim . make-condition-variable) (c5058 core-prim . mosh-executable-path) (c5057 core-prim . make-file-options) (c5056 core-prim . source-info) (c5055 core-prim . make-compiler-instruction) (c5054 core-prim . make-instruction) (c5053 core-prim . set-source-info!) (c5052 core-prim . bignum?) (c5051 core-prim . fast-equal?) (c5050 core-prim . fasl-read) (c504f core-prim . fasl-write) (c504e core-prim . time-usage) (c504d core-prim . os-constant) (c504c core-prim . disasm) (c28e1 core-prim . make-parameter) (c504b core-prim . socket-port) (c504a core-prim . socket-shutdown) (c5049 core-prim . socket-close) (c5048 core-prim . socket-send) (c5047 core-prim . socket-recv!) (c5046 core-prim . socket-recv) (c5045 core-prim . make-server-socket) (c5044 core-prim . make-client-socket) (c5043 core-prim . socket-accept) (c5042 core-prim . socket?) (c5041 core-prim . string-upcase) (c5040 core-prim . string-titlecase) (c503f core-prim . string-normalize-nfkd) (c503e core-prim . string-normalize-nfkc) (c503d core-prim . string-normalize-nfd) (c503c core-prim . string-normalize-nfc) (c503b core-prim . string-foldcase) (c503a core-prim . string-downcase) (c5039 core-prim . string-ci>?) (c5038 core-prim . string-ci>=?) (c5037 core-prim . string-ci=?) (c5036 core-prim . string-ci<?) (c5035 core-prim . string-ci<=?) (c5034 core-prim . char-whitespace?) (c5033 core-prim . char-upper-case?) (c5032 core-prim . char-title-case?) (c5031 core-prim . char-numeric?) (c5030 core-prim . char-lower-case?) (c502f core-prim . char-general-category) (c502e core-prim . char-upcase) (c502d core-prim . char-titlecase) (c502c core-prim . char-foldcase) (c502b core-prim . char-downcase) (c502a core-prim . char-ci>?) (c5029 core-prim . char-ci>=?) (c5028 core-prim . char-ci=?) (c5027 core-prim . char-ci<?) (c5026 core-prim . char-ci<=?) (c5025 core-prim . char-alphabetic?) (c2ee5 core-prim . make-variable-transformer) (c319c core-prim . identifier?) (c3188 core-prim . generate-temporaries) (c318a core-prim . free-identifier=?) (c31a0 core-prim . syntax->datum) (c319e core-prim . datum->syntax) (c318c core-prim . bound-identifier=?) (c5024 core-prim . record-type-descriptor?) (c5023 core-prim . record-predicate) (c5022 core-prim . record-mutator) (c5021 core-prim . record-constructor) (c5020 core-prim . record-accessor) (c501f core-prim . make-record-type-descriptor) (c501e core-prim . make-record-constructor-descriptor) (c501d core-prim . record?) (c501c core-prim . record-type-uid) (c501b core-prim . record-type-sealed?) (c501a core-prim . record-type-parent) (c5019 core-prim . record-type-opaque?) (c5018 core-prim . record-type-name) (c5017 core-prim . record-type-generative?) (c5016 core-prim . record-type-field-names) (c5015 core-prim . record-rtd) (c5014 core-prim . record-field-mutable?) (c5013 core-prim . delete-file) (c5012 core-prim . file-exists?) (c5011 core-prim . vector-sort!) (c5010 core-prim . vector-sort) (c500f core-prim . list-sort) (c500e core-prim . symbol-hash) (c500d core-prim . string-ci-hash) (c500c core-prim . string-hash) (c500b core-prim . equal-hash) (c500a core-prim . hashtable-equivalence-function) (c5009 core-prim . make-hashtable) (c5008 core-prim . hashtable-hash-function) (c5007 core-prim . make-eqv-hashtable) (c5006 core-prim . make-eq-hashtable) (c5005 core-prim . hashtable?) (c5004 core-prim . hashtable-update!) (c5003 core-prim . hashtable-size) (c5002 core-prim . hashtable-set!) (c5001 core-prim . hashtable-ref) (c5000 core-prim . hashtable-mutable?) (c4fff core-prim . hashtable-keys) (c4ffe core-prim . hashtable-entries) (c4ffd core-prim . hashtable-delete!) (c4ffc core-prim . hashtable-copy) (c4ffb core-prim . hashtable-contains?) (c4ffa core-prim . hashtable-clear!) (c4ff9 core-prim . call-with-output-file) (c4ff8 core-prim . call-with-input-file) (c4ff7 core-prim . write-char) (c4ff6 core-prim . write) (c4ff5 core-prim . with-output-to-file) (c4ff4 core-prim . with-input-from-file) (c4ff3 core-prim . read-char) (c4ff2 core-prim . read) (c4ff1 core-prim . peek-char) (c4ff0 core-prim . open-output-file) (c4fef core-prim . open-input-file) (c4fee core-prim . newline) (c4fed core-prim . display) (c4fec core-prim . close-output-port) (c4feb core-prim . close-input-port) (c4fea core-prim . eof-object?) (c4fe9 core-prim . eof-object) (c4fe8 core-prim . current-error-port) (c4fe7 core-prim . current-output-port) (c4fe6 core-prim . current-input-port) (c4fe5 core-prim . output-port?) (c4fe4 core-prim . input-port?) (c4fe3 core-prim . utf-8-codec) (c4fe2 core-prim . utf-16-codec) (c4fe1 core-prim . transcoder-error-handling-mode) (c4fe0 core-prim . transcoder-eol-style) (c4fdf core-prim . transcoder-codec) (c4fde core-prim . transcoded-port) (c4fdd core-prim . textual-port?) (c4fdc core-prim . string->bytevector) (c4fdb core-prim . standard-output-port) (c4fda core-prim . standard-input-port) (c4fd9 core-prim . standard-error-port) (c4fd8 core-prim . set-port-position!) (c4fd7 core-prim . put-u8) (c4fd6 core-prim . put-string) (c4fd5 core-prim . put-datum) (c4fd4 core-prim . put-char) (c4fd3 core-prim . put-bytevector) (c4fd2 core-prim . port?) (c4fd1 core-prim . port-transcoder) (c4fd0 core-prim . port-position) (c4fcf core-prim . port-has-set-port-position!?) (c4fce core-prim . port-has-port-position?) (c4fcd core-prim . port-eof?) (c4fcc core-prim . output-port-buffer-mode) (c4fcb core-prim . open-string-output-port) (c4fca core-prim . open-string-input-port) (c4fc9 core-prim . open-file-output-port) (c4fc8 core-prim . open-file-input/output-port) (c4fc7 core-prim . open-file-input-port) (c4fc6 core-prim . open-bytevector-output-port) (c4fc5 core-prim . open-bytevector-input-port) (c4fc4 core-prim . native-transcoder) (c4fc3 core-prim . native-eol-style) (c4fc2 core-prim . make-transcoder) (c4fc1 core-prim . latin-1-codec) (c4fc0 core-prim . make-i/o-write-error) (c4fbf core-prim . make-i/o-read-error) (c4fbe core-prim . make-i/o-port-error) (c4fbd core-prim . make-i/o-invalid-position-error) (c4fbc core-prim . make-i/o-filename-error) (c4fbb core-prim . make-i/o-file-protection-error) (c4fba core-prim . make-i/o-file-is-read-only-error) (c4fb9 core-prim . make-i/o-file-does-not-exist-error) (c4fb8 core-prim . make-i/o-file-already-exists-error) (c4fb7 core-prim . make-i/o-error) (c4fb6 core-prim . make-i/o-encoding-error) (c4fb5 core-prim . make-i/o-decoding-error) (c4fb4 core-prim . make-custom-textual-output-port) (c4fb3 core-prim . make-custom-textual-input/output-port) (c4fb2 core-prim . make-custom-textual-input-port) (c4fb1 core-prim . make-custom-binary-output-port) (c4fb0 core-prim . make-custom-binary-input/output-port) (c4faf core-prim . make-custom-binary-input-port) (c4fae core-prim . make-bytevector) (c4fad core-prim . lookahead-u8) (c4fac core-prim . lookahead-char) (c4fab core-prim . i/o-write-error?) (c4faa core-prim . i/o-read-error?) (c4fa9 core-prim . i/o-port-error?) (c4fa8 core-prim . i/o-invalid-position-error?) (c4fa7 core-prim . i/o-filename-error?) (c4fa6 core-prim . i/o-file-protection-error?) (c4fa5 core-prim . i/o-file-is-read-only-error?) (c4fa4 core-prim . i/o-file-does-not-exist-error?) (c4fa3 core-prim . i/o-file-already-exists-error?) (c4fa2 core-prim . i/o-error?) (c4fa1 core-prim . i/o-error-position) (c4fa0 core-prim . i/o-error-port) (c4f9f core-prim . i/o-error-filename) (c4f9e core-prim . i/o-encoding-error?) (c4f9d core-prim . i/o-encoding-error-char) (c4f9c core-prim . i/o-decoding-error?) (c4f9b core-prim . get-u8) (c4f9a core-prim . get-string-n!) (c4f99 core-prim . get-string-n) (c4f98 core-prim . get-string-all) (c4f97 core-prim . get-line) (c4f96 core-prim . get-datum) (c4f95 core-prim . get-char) (c4f94 core-prim . get-bytevector-some) (c4f93 core-prim . get-bytevector-n!) (c4f92 core-prim . get-bytevector-n) (c4f91 core-prim . get-bytevector-all) (c4f90 core-prim . flush-output-port) (c4f8f core-prim . close-port) (c3176 core-prim . scheme-report-environment) (c4f8e core-prim . quotient) (c3174 core-prim . null-environment) (c4f8d core-prim . remainder) (c4f8c core-prim . modulo) (c4f8b core-prim . inexact->exact) (c4f8a core-prim . force) (c4f89 core-prim . exact->inexact) (c4f88 core-prim . make-promise) (c4f87 core-prim . exit) (c4c1d core-prim . command-line) (c4f86 core-prim . string-fill!) (c4f85 core-prim . string-set!) (c4f84 core-prim . set-cdr!) (c4f83 core-prim . set-car!) (c4f82 core-prim . remove) (c4f81 core-prim . remv) (c4f80 core-prim . remp) (c4f7f core-prim . remq) (c4f7e core-prim . partition) (c4f7d core-prim . memv) (c4f7c core-prim . memq) (c4f7b core-prim . memp) (c4f7a core-prim . member) (c4f79 core-prim . exists) (c4f78 core-prim . for-all) (c4f77 core-prim . fold-right) (c4f76 core-prim . fold-left) (c4f75 core-prim . find) (c4f74 core-prim . filter) (c4f73 core-prim . cons*) (c4f72 core-prim . assv) (c4f71 core-prim . assq) (c4f70 core-prim . assp) (c4f6f core-prim . assoc) (c4f6e core-prim . call-with-string-output-port) (c4f6d core-prim . call-with-port) (c4f6c core-prim . call-with-bytevector-output-port) (c4f6b core-prim . bytevector->string) (c4f6a core-prim . buffer-mode?) (c4f69 core-prim . binary-port?) (c4f68 core-prim . with-exception-handler) (c4f67 core-prim . raise-continuable) (c4f66 core-prim . raise) (c317a core-prim . eval) (c3172 core-prim . environment) (c4f65 core-prim . make-enumeration) (c4f64 core-prim . enum-set=?) (c4f63 core-prim . enum-set-universe) (c4f62 core-prim . enum-set-union) (c4f61 core-prim . enum-set-subset?) (c4f60 core-prim . enum-set-projection) (c4f5f core-prim . enum-set-member?) (c4f5e core-prim . enum-set-intersection) (c4f5d core-prim . enum-set-indexer) (c4f5c core-prim . enum-set-difference) (c4f5b core-prim . enum-set-constructor) (c4f5a core-prim . enum-set-complement) (c4f59 core-prim . enum-set->list) (c4f58 core-prim . who-condition?) (c4f57 core-prim . warning?) (c4f56 core-prim . violation?) (c4f55 core-prim . undefined-violation?) (c4f54 core-prim . syntax-violation?) (c4f53 core-prim . syntax-violation-subform) (c4f52 core-prim . syntax-violation-form) (c319a core-prim . syntax-violation) (c4f51 core-prim . simple-conditions) (c4f50 core-prim . serious-condition?) (c4f4f core-prim . non-continuable-violation?) (c4f4e core-prim . message-condition?) (c4f4d core-prim . make-who-condition) (c4f4c core-prim . make-warning) (c4f4b core-prim . make-violation) (c4f4a core-prim . make-undefined-violation) (c4f49 core-prim . make-syntax-violation) (c4f48 core-prim . make-serious-condition) (c4f47 core-prim . make-non-continuable-violation) (c4f46 core-prim . make-message-condition) (c4f45 core-prim . make-lexical-violation) (c4f44 core-prim . make-irritants-condition) (c4f43 core-prim . make-implementation-restriction-violation) (c4f42 core-prim . make-error) (c4f41 core-prim . make-assertion-violation) (c4f40 core-prim . lexical-violation?) (c4f3f core-prim . irritants-condition?) (c4f3e core-prim . implementation-restriction-violation?) (c4f3d core-prim . error?) (c4f3c core-prim . condition-who) (c4f3b core-prim . condition-predicate) (c4f3a core-prim . condition-message) (c4f39 core-prim . condition-irritants) (c4f38 core-prim . condition-accessor) (c4f37 core-prim . condition) (c4f36 core-prim . assertion-violation?) (c4f35 core-prim . condition?) (c4f34 core-prim . utf32->string) (c4f33 core-prim . utf16->string) (c4f32 core-prim . utf8->string) (c4f31 core-prim . uint-list->bytevector) (c4f30 core-prim . u8-list->bytevector) (c4f2f core-prim . string->utf8) (c4f2e core-prim . string->utf32) (c4f2d core-prim . string->utf16) (c4f2c core-prim . sint-list->bytevector) (c4f2b core-prim . native-endianness) (c4f2a core-prim . bytevector?) (c4f29 core-prim . bytevector=?) (c4f28 core-prim . bytevector-uint-set!) (c4f27 core-prim . bytevector-uint-ref) (c4f26 core-prim . bytevector-u8-set!) (c4f25 core-prim . bytevector-u8-ref) (c4f24 core-prim . bytevector-u64-set!) (c4f23 core-prim . bytevector-u64-ref) (c4f22 core-prim . bytevector-u64-native-set!) (c4f21 core-prim . bytevector-u64-native-ref) (c4f20 core-prim . bytevector-u32-set!) (c4f1f core-prim . bytevector-u32-ref) (c4f1e core-prim . bytevector-u32-native-set!) (c4f1d core-prim . bytevector-u32-native-ref) (c4f1c core-prim . bytevector-u16-set!) (c4f1b core-prim . bytevector-u16-ref) (c4f1a core-prim . bytevector-u16-native-set!) (c4f19 core-prim . bytevector-u16-native-ref) (c4f18 core-prim . bytevector-sint-set!) (c4f17 core-prim . bytevector-sint-ref) (c4f16 core-prim . bytevector-s8-set!) (c4f15 core-prim . bytevector-s8-ref) (c4f14 core-prim . bytevector-s64-set!) (c4f13 core-prim . bytevector-s64-ref) (c4f12 core-prim . bytevector-s64-native-set!) (c4f11 core-prim . bytevector-s64-native-ref) (c4f10 core-prim . bytevector-s32-set!) (c4f0f core-prim . bytevector-s32-ref) (c4f0e core-prim . bytevector-s32-native-set!) (c4f0d core-prim . bytevector-s32-native-ref) (c4f0c core-prim . bytevector-s16-set!) (c4f0b core-prim . bytevector-s16-ref) (c4f0a core-prim . bytevector-s16-native-set!) (c4f09 core-prim . bytevector-s16-native-ref) (c4f08 core-prim . bytevector-length) (c4f07 core-prim . bytevector-ieee-single-ref) (c4f06 core-prim . bytevector-ieee-single-set!) (c4f05 core-prim . bytevector-ieee-single-native-set!) (c4f04 core-prim . bytevector-ieee-single-native-ref) (c4f03 core-prim . bytevector-ieee-double-set!) (c4f02 core-prim . bytevector-ieee-double-ref) (c4f01 core-prim . bytevector-ieee-double-native-set!) (c4f00 core-prim . bytevector-ieee-double-native-ref) (c4eff core-prim . bytevector-fill!) (c4efe core-prim . bytevector-copy!) (c4efd core-prim . bytevector-copy) (c4efc core-prim . bytevector->uint-list) (c4efb core-prim . bytevector->u8-list) (c4efa core-prim . bytevector->sint-list) (c4ef9 core-prim . no-nans-violation?) (c4ef8 core-prim . no-infinities-violation?) (c4ef7 core-prim . make-no-nans-violation) (c4ef6 core-prim . make-no-infinities-violation) (c4ef5 core-prim . real->flonum) (c4ef4 core-prim . flzero?) (c4ef3 core-prim . fltruncate) (c4ef2 core-prim . fltan) (c4ef1 core-prim . flsqrt) (c4ef0 core-prim . flsin) (c4eef core-prim . flround) (c4eee core-prim . flpositive?) (c4eed core-prim . flonum?) (c4eec core-prim . flodd?) (c4eeb core-prim . flnumerator) (c4eea core-prim . flnegative?) (c4ee9 core-prim . flnan?) (c4ee8 core-prim . flmod0) (c4ee7 core-prim . flmod) (c4ee6 core-prim . flmin) (c4ee5 core-prim . flmax) (c4ee4 core-prim . fllog) (c4ee3 core-prim . flinteger?) (c4ee2 core-prim . flinfinite?) (c4ee1 core-prim . flfloor) (c4ee0 core-prim . flfinite?) (c4edf core-prim . flexpt) (c4ede core-prim . flexp) (c4edd core-prim . fleven?) (c4edc core-prim . fldiv0-and-mod0) (c4edb core-prim . fldiv0) (c4eda core-prim . fldiv-and-mod) (c4ed9 core-prim . fldiv) (c4ed8 core-prim . fldenominator) (c4ed7 core-prim . flcos) (c4ed6 core-prim . flceiling) (c4ed5 core-prim . flatan) (c4ed4 core-prim . flasin) (c4ed3 core-prim . flacos) (c4ed2 core-prim . flabs) (c4ed1 core-prim . fl>?) (c4ed0 core-prim . fl>=?) (c4ecf core-prim . fl=?) (c4ece core-prim . fl<?) (c4ecd core-prim . fl<=?) (c4ecc core-prim . fl/) (c4ecb core-prim . fl-) (c4eca core-prim . fl+) (c4ec9 core-prim . fl*) (c4ec8 core-prim . fixnum->flonum) (c4ec7 core-prim . fxzero?) (c4ec6 core-prim . fxxor) (c4ec5 core-prim . fxrotate-bit-field) (c4ec4 core-prim . fxreverse-bit-field) (c4ec3 core-prim . fxpositive?) (c4ec2 core-prim . fxodd?) (c4ec1 core-prim . fxnot) (c4ec0 core-prim . fxnegative?) (c4ebf core-prim . fxmod0) (c4ebe core-prim . fxmod) (c4ebd core-prim . fxmin) (c4ebc core-prim . fxmax) (c4ebb core-prim . fxlength) (c4eba core-prim . fxior) (c4eb9 core-prim . fxif) (c4eb8 core-prim . fxfirst-bit-set) (c4eb7 core-prim . fxeven?) (c4eb6 core-prim . fxdiv0-and-mod0) (c4eb5 core-prim . fxdiv0) (c4eb4 core-prim . fxdiv-and-mod) (c4eb3 core-prim . fxdiv) (c4eb2 core-prim . fxcopy-bit-field) (c4eb1 core-prim . fxcopy-bit) (c4eb0 core-prim . fxbit-set?) (c4eaf core-prim . fxbit-field) (c4eae core-prim . fxbit-count) (c4ead core-prim . fxarithmetic-shift-right) (c4eac core-prim . fxarithmetic-shift-left) (c4eab core-prim . fxarithmetic-shift) (c4eaa core-prim . fxand) (c4ea9 core-prim . fx>?) (c4ea8 core-prim . fx>=?) (c4ea7 core-prim . fx=?) (c4ea6 core-prim . fx<?) (c4ea5 core-prim . fx<=?) (c4ea4 core-prim . fx-/carry) (c4ea3 core-prim . fx-) (c4ea2 core-prim . fx+/carry) (c4ea1 core-prim . fx+) (c4ea0 core-prim . fx*/carry) (c4e9f core-prim . fx*) (c4e9e core-prim . greatest-fixnum) (c4e9d core-prim . least-fixnum) (c4e9c core-prim . fixnum-width) (c4e9b core-prim . fixnum?) (c4e9a core-prim . bitwise-rotate-bit-field) (c4e99 core-prim . bitwise-reverse-bit-field) (c4e98 core-prim . bitwise-length) (c4e97 core-prim . bitwise-if) (c4e96 core-prim . bitwise-first-bit-set) (c4e95 core-prim . bitwise-copy-bit-field) (c4e94 core-prim . bitwise-copy-bit) (c4e93 core-prim . bitwise-bit-set?) (c4e92 core-prim . bitwise-bit-field) (c4e91 core-prim . bitwise-bit-count) (c4e90 core-prim . bitwise-xor) (c4e8f core-prim . bitwise-ior) (c4e8e core-prim . bitwise-and) (c4e8d core-prim . bitwise-not) (c4e8c core-prim . bitwise-arithmetic-shift-right) (c4e8b core-prim . bitwise-arithmetic-shift-left) (c4e8a core-prim . bitwise-arithmetic-shift) (c4e89 core-prim . zero?) (c4e88 core-prim . vector?) (c4e87 core-prim . vector-set!) (c4e86 core-prim . vector-ref) (c4e85 core-prim . vector-map) (c4e84 core-prim . vector-length) (c4e83 core-prim . vector-for-each) (c4e82 core-prim . vector-fill!) (c4e81 core-prim . vector->list) (c4e80 core-prim . vector) (c4e7f core-prim . values) (c4e7e core-prim . truncate) (c4e7d core-prim . tan) (c4e7c core-prim . symbol?) (c4e7b core-prim . symbol=?) (c4e7a core-prim . symbol->string) (c4e79 core-prim . substring) (c4e78 core-prim . string?) (c4e77 core-prim . string>?) (c4e76 core-prim . string>=?) (c4e75 core-prim . string=?) (c4e74 core-prim . string<?) (c4e73 core-prim . string<=?) (c4e72 core-prim . string-ref) (c4e71 core-prim . string-length) (c4e70 core-prim . string-for-each) (c4e6f core-prim . string-copy) (c4e6e core-prim . string-append) (c4e6d core-prim . string->symbol) (c4e6c core-prim . string->number) (c4e6b core-prim . string->list) (c4e6a core-prim . string) (c4e69 core-prim . sqrt) (c4e68 core-prim . sin) (c4e67 core-prim . round) (c4e66 core-prim . reverse) (c4e65 core-prim . real?) (c4e64 core-prim . real-valued?) (c4e63 core-prim . real-part) (c4e62 core-prim . rationalize) (c4e61 core-prim . rational?) (c4e60 core-prim . rational-valued?) (c4e5f core-prim . procedure?) (c4e5e core-prim . positive?) (c4e5d core-prim . pair?) (c4e5c core-prim . odd?) (c4e5b core-prim . numerator) (c4e5a core-prim . number?) (c4e59 core-prim . number->string) (c4e58 core-prim . null?) (c4e57 core-prim . not) (c4e56 core-prim . negative?) (c4e55 core-prim . nan?) (c4e54 core-prim . min) (c4e53 core-prim . max) (c4e52 core-prim . map) (c4e51 core-prim . make-vector) (c4e50 core-prim . make-string) (c4e4f core-prim . make-rectangular) (c4e4e core-prim . make-polar) (c4e4d core-prim . magnitude) (c4e4c core-prim . log) (c4e4b core-prim . list?) (c4e4a core-prim . list-tail) (c4e49 core-prim . list-ref) (c4e48 core-prim . list->vector) (c4e47 core-prim . list->string) (c4e46 core-prim . list) (c4e45 core-prim . length) (c4e44 core-prim . lcm) (c4e43 core-prim . integer?) (c4e42 core-prim . integer-valued?) (c4e41 core-prim . integer->char) (c4e40 core-prim . infinite?) (c4e3f core-prim . inexact?) (c4e3e core-prim . inexact) (c4e3d core-prim . imag-part) (c4e3c core-prim . gcd) (c4e3b core-prim . for-each) (c4e3a core-prim . floor) (c4e39 core-prim . finite?) (c4e38 core-prim . expt) (c4e37 core-prim . exp) (c4e36 core-prim . exact?) (c4e35 core-prim . exact-integer-sqrt) (c4e34 core-prim . exact) (c4e33 core-prim . even?) (c4e32 core-prim . error) (c4e31 core-prim . eqv?) (c4e30 core-prim . equal?) (c4e2f core-prim . eq?) (c4e2e core-prim . dynamic-wind) (c4e2d core-prim . div0-and-mod0) (c4e2c core-prim . mod0) (c4e2b core-prim . div0) (c4e2a core-prim . div-and-mod) (c4e29 core-prim . mod) (c4e28 core-prim . div) (c4e27 core-prim . denominator) (c4e26 core-prim . cos) (c4e25 core-prim . cons) (c4e24 core-prim . complex?) (c4e23 core-prim . char?) (c4e22 core-prim . char>?) (c4e21 core-prim . char>=?) (c4e20 core-prim . char=?) (c4e1f core-prim . char<?) (c4e1e core-prim . char<=?) (c4e1d core-prim . char->integer) (c4e1c core-prim . ceiling) (c4e1b core-prim . call-with-values) (c4e1a core-prim . call/cc) (c4e19 core-prim . call-with-current-continuation) (c4e18 core-prim . cddddr) (c4e17 core-prim . cdddar) (c4e16 core-prim . cddadr) (c4e15 core-prim . cddaar) (c4e14 core-prim . cdaddr) (c4e13 core-prim . cdadar) (c4e12 core-prim . cdaadr) (c4e11 core-prim . cdaaar) (c4e10 core-prim . cadddr) (c4e0f core-prim . caddar) (c4e0e core-prim . cadadr) (c4e0d core-prim . cadaar) (c4e0c core-prim . caaddr) (c4e0b core-prim . caadar) (c4e0a core-prim . caaadr) (c4e09 core-prim . caaaar) (c4e08 core-prim . cdddr) (c4e07 core-prim . cddar) (c4e06 core-prim . cdadr) (c4e05 core-prim . cdaar) (c4e04 core-prim . caddr) (c4e03 core-prim . cadar) (c4e02 core-prim . caadr) (c4e01 core-prim . caaar) (c4e00 core-prim . cddr) (c4dff core-prim . cdar) (c4dfe core-prim . cadr) (c4dfd core-prim . caar) (c4dfc core-prim . cdr) (c4dfb core-prim . car) (c4dfa core-prim . boolean?) (c4df9 core-prim . boolean=?) (c4df8 core-prim . atan) (c4df7 core-prim . assertion-violation) (c3194 core-prim . assertion-error) (c4df6 core-prim . asin) (c4df5 core-prim . apply) (c4df4 core-prim . append) (c4df3 core-prim . angle) (c4df2 core-prim . acos) (c4df1 core-prim . abs) (c4df0 core-prim . /) (c4def core-prim . *) (c4dee core-prim . -) (c4ded core-prim . +) (c4dec core-prim . >=) (c4deb core-prim . >) (c4dea core-prim . =) (c4de9 core-prim . <=) (c4de8 core-prim . <) (c4de7 core-prim . library) (c4de6 $core-rtd &no-nans-rtd &no-nans-rcd) (c4de5 $core-rtd &no-infinities-rtd &no-infinities-rcd) (c4de4 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (c4de3 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (c4de2 $core-rtd &i/o-port-rtd &i/o-port-rcd) (c4de1 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (c4de0 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (c4ddf $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (c4dde $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (c4ddd $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (c4ddc $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (c4ddb $core-rtd &i/o-write-rtd &i/o-write-rcd) (c4dda $core-rtd &i/o-read-rtd &i/o-read-rcd) (c4dd9 $core-rtd &i/o-rtd &i/o-rcd) (c4dd8 $core-rtd &undefined-rtd &undefined-rcd) (c4dd7 $core-rtd &syntax-rtd &syntax-rcd) (c4dd6 $core-rtd &lexical-rtd &lexical-rcd) (c4dd5 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (c4dd4 $core-rtd &non-continuable-rtd &non-continuable-rcd) (c4dd3 $core-rtd &who-rtd &who-rcd) (c4dd2 $core-rtd &irritants-rtd &irritants-rcd) (c4dd1 $core-rtd &assertion-rtd &assertion-rcd) (c4dd0 $core-rtd &violation-rtd &violation-rcd) (c4dcf $core-rtd &error-rtd &error-rcd) (c4dce $core-rtd &serious-rtd &serious-rcd) (c4dcd $core-rtd &warning-rtd &warning-rcd) (c4dcc $core-rtd &message-rtd &message-rcd) (c4dcb $core-rtd &condition-rtd &condition-rcd) (c4dca macro . define-condition-type) (c4dc9 macro . define-enumeration) (c4dc8 macro . define-record-type) (c4dc7 macro . parent-rtd) (c4dc6 macro . nongenerative) (c4dc5 macro . opaque) (c4dc4 macro . sealed) (c4dc3 macro . protocol) (c4dc2 macro . parent) (c4dc1 macro . immutable) (c4dc0 macro . mutable) (c4dbf macro . fields) (c4dbe macro . error-handling-mode) (c4dbd macro . file-options) (c4dbc macro . buffer-mode) (c4dbb macro . eol-style) (c4dba macro . guard) (c4db9 macro . trace-define) (c4db8 macro . trace-lambda) (c4db7 macro . unsyntax-splicing) (c4db6 macro . unsyntax) (c4db5 macro . unquote-splicing) (c4db4 macro . unquote) (c4db3 macro . _) (c4db2 macro . else) (c4db1 macro . =>) (c4db0 macro . ...) (c4daf macro . assert) (c4dae macro . endianness) (c4dad macro . delay) (c4dac macro . time) (c4dab macro . do) (c4daa macro . cond) (c4da9 macro . let*) (c4da8 macro . let*-values) (c4da7 macro . let-values) (c4da6 macro . identifier-syntax) (c4da5 macro . with-syntax) (c4da4 macro . quasisyntax) (c4da3 macro . quasiquote) (c4da2 macro . syntax-rules) (c4da1 macro . include) (c4da0 macro . define-struct) (c4d9f core-macro . record-constructor-descriptor) (c4d9e core-macro . record-type-descriptor) (c4d9d macro . case) (c4d9c macro . parameterize) (c4d9b macro . unless) (c4d9a macro . when) (c4d99 core-macro . or) (c4d98 core-macro . and) (c4d97 core-macro . if) (c4d96 core-macro . let) (c4d95 core-macro . letrec*) (c4d94 core-macro . letrec) (c4d93 core-macro . type-descriptor) (c4d92 core-macro . case-lambda) (c4d91 core-macro . lambda) (c4d90 core-macro . syntax) (c4d8f core-macro . syntax-case) (c4d8e core-macro . quote) (c4d8d core-macro . foreign-call) (c4d8c letrec-syntax) (c4d8b let-syntax) (c4d8a set!) (c4d89 import) (c4d88 begin) (c4d87 module) (c4d86 define-syntax) (c4d85 define)) values values '#f '#f '#f '#f) (c2cce@c2b1a@install-library 'c5144 '(psyntax system $bootstrap) '() '() '() '() '(#796# #797# #798# #799# #800# #801#) '() values values '#f '#f '#f '#f) (c2cce@c2b1a@install-library 'c5145 '(mosh) '() '() '() '() '(#798# #799# #1# #802# #804# #2# #805# #806# #3# #807# #808# #809# #810# #811# #815# #816# #817# #4# #818# #819# #820# #821# #822# #6# #7# #8# #67# #855# #856# #857# #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #86# #858# #859# #860# #861# #862# #863# #864# #865# #866# #867# #868# #869# #749# #760#) '() values values '#f '#f '#f '#f) (c2cce@c2b1a@install-library 'c5146 '(system) '() '() '() '() '(#803# #812# #813# #814# #823# #5# #824# #825# #826# #7# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #827# #828# #829# #830# #57# #58# #59# #60# #61# #62# #63# #64# #65# #66# #831# #832# #833# #834# #835# #836# #837# #838# #839# #840# #841# #842# #843# #844# #845# #846# #847# #848# #849# #850# #851# #852# #853# #854# #870# #871# #872# #873# #874# #875# #876# #877# #878# #879# #880# #881# #882#) '() values values '#f '#f '#f '#f)))
(begin (set! c4c08@ref (unspecified)) (set! c4c0a@x* (unspecified)) (set! c4c0c@add-library-path! (unspecified)) (set! c4c0e@parse-and-add-library-path (unspecified)) (set! c4c10@for-each-with-index (unspecified)) (set! c4c12@rpad (unspecified)) (set! c4c14@condition-printer (unspecified)) (set! c4c16@record->field-alist (unspecified)) (set! c4c18@map-with-index (unspecified)) (set! c4c1a@repl (unspecified)) (set! c4c1c@trace-printer (unspecified)) (set! c4c1e@command-line (unspecified)) (set! c4c20@local-library-path (unspecified)) (set! c4c22@load/args (unspecified)) (set! c4c24@load (unspecified)) (set! c4c26@ironscheme-build (unspecified)) (set! c4c28@eval-top-level (unspecified)) (set! c4c2a@compile-system-libraries (unspecified)) (set! c4c2c@compile (unspecified)) (set! c4c2e@compile->closure (unspecified)) (set! c4c30@pre-compile-r6rs-file (unspecified)) (set! c4c32@load-r6rs-top-level (unspecified)) (set! c4c34@load-r6rs-top-level-sexp (unspecified)) (set! c4c36@prefix-inc (unspecified)) (set! c4c38@prefix-inc! (unspecified)) (set! c4c08@ref (lambda (c4c73@rtd c4c74@i c4c75@x) (let ((c4c79@val ((record-accessor c4c73@rtd c4c74@i) c4c75@x))) (if (symbol? c4c79@val) (ungensym c4c79@val) c4c79@val)))) (set! c4d6b@c4c08@ref c4c08@ref) (set! c4c0a@x* '()) (set! c4d6c@c4c0a@x* c4c0a@x*) (set! c4c0c@add-library-path! (lambda (c4c7b@path) (c2cbe@c2afa@library-path (append (c2cbe@c2afa@library-path) (list c4c7b@path))))) (set! c4d6d@c4c0c@add-library-path! c4c0c@add-library-path!) (set! c4c0e@parse-and-add-library-path (lambda (c4c7d@paths c4c7e@message) (letrec* ((c4c82@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((c4c83@t c4c7d@paths)) (if c4c83@t ((lambda (c4c85@paths) (for-each (lambda (c4c87@path) (if (file-exists? c4c87@path) (c4c0c@add-library-path! (expand-path c4c87@path)) (format (current-error-port) c4c7e@message c4c87@path))) (string-split c4c85@paths c4c82@separator))) c4c83@t) (void)))))) (set! c4d6e@c4c0e@parse-and-add-library-path c4c0e@parse-and-add-library-path) (set! c4c10@for-each-with-index (lambda (c4c89@proc c4c8a@lst) (letrec ((c4c8d@loop (lambda (c4c8f@i c4c90@lst) (if (null? c4c90@lst) (if '#f '#f (void)) (begin (c4c89@proc c4c8f@i (car c4c90@lst)) (c4c8d@loop (+ c4c8f@i '1) (cdr c4c90@lst))))))) (c4c8d@loop '1 c4c8a@lst)))) (set! c4d6f@c4c10@for-each-with-index c4c10@for-each-with-index) (set! c4c12@rpad (lambda (c4c93@str c4c94@pad c4c95@n) (let ((c4c99@rest (- c4c95@n (string-length (format '"~a" c4c93@str))))) (let c4c9f@loop ((c4c9b@rest c4c99@rest) (c4c9c@ret (format '"~a" c4c93@str))) (if (<= c4c9b@rest '0) c4c9c@ret (c4c9f@loop (- c4c9b@rest '1) (string-append c4c9c@ret c4c94@pad))))))) (set! c4d70@c4c12@rpad c4c12@rpad) (set! c4c14@condition-printer (lambda (c4ca1@e c4ca2@port) (letrec* ((c4ca6@max-condition-len (apply max (map (lambda (c4cb7@c) (string-length (symbol->string (record-type-name (record-rtd c4cb7@c))))) (simple-conditions c4ca1@e))))) (begin (display '" Condition components:\n" c4ca2@port) (c4c10@for-each-with-index (lambda (c4ca7@i c4ca8@x) (let ((c4cab@rtd (record-rtd c4ca8@x)) (c4cac@fields-alist (c4c16@record->field-alist c4ca8@x))) (begin (format c4ca2@port '" ~d. ~a" c4ca7@i (c4c12@rpad (symbol->string (record-type-name c4cab@rtd)) '" " c4ca6@max-condition-len)) (if (null? c4cac@fields-alist) (newline c4ca2@port) (void)) (let c4cb3@loop ((c4caf@first '#t) (c4cb0@fields-alist c4cac@fields-alist)) (if (null? c4cb0@fields-alist) '() (let ((c4cb5@field (car c4cb0@fields-alist))) (begin (if (not c4caf@first) (display (c4c12@rpad '"" '" " (+ '4 c4ca6@max-condition-len)) c4ca2@port) (void)) (display '"       " c4ca2@port) (display (car c4cb5@field) c4ca2@port) (display '": " c4ca2@port) (write (cdr c4cb5@field) c4ca2@port) (newline c4ca2@port) (c4cb3@loop '#f (cdr c4cb0@fields-alist))))))))) (simple-conditions c4ca1@e)))))) (set! c4d71@c4c14@condition-printer c4c14@condition-printer) (set! c4c16@record->field-alist (lambda (c4cb9@r) (letrec* ((c4cbc@ref (lambda (c4cc7@rtd c4cc8@i c4cc9@x) (let ((c4ccd@val ((record-accessor c4cc7@rtd c4cc8@i) c4cc9@x))) (if (symbol? c4ccd@val) (ungensym c4ccd@val) c4ccd@val))))) (let c4cc1@loop ((c4cbd@ret '()) (c4cbe@rtd (record-rtd c4cb9@r))) (if c4cbe@rtd (c4cc1@loop (append c4cbd@ret (c4c18@map-with-index (lambda (c4cc3@i c4cc4@field) (cons c4cc4@field (c4cbc@ref c4cbe@rtd c4cc3@i c4cb9@r))) (vector->list (record-type-field-names c4cbe@rtd)))) (record-type-parent c4cbe@rtd)) c4cbd@ret))))) (set! c4d72@c4c16@record->field-alist c4c16@record->field-alist) (set! c4c18@map-with-index (lambda (c4ccf@proc c4cd0@lst) (let c4cd9@loop ((c4cd3@i '0) (c4cd4@lst c4cd0@lst) (c4cd5@ret '())) (if (null? c4cd4@lst) (reverse c4cd5@ret) (c4cd9@loop (+ c4cd3@i '1) (cdr c4cd4@lst) (cons (c4ccf@proc c4cd3@i (car c4cd4@lst)) c4cd5@ret)))))) (set! c4d73@c4c18@map-with-index c4c18@map-with-index) (set! c4c1a@repl (lambda c4cdb@x (letrec* ((c4cde@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (c4ce1@c4cdf) (lambda () (with-exception-handler (lambda (c4ce3@e) ((call/cc (lambda (c4ce5@c4ce0) (c4ce1@c4cdf (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? c4ce3@e) (c4c14@condition-printer c4ce3@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" c4ce3@e))) (c4ce5@c4ce0 (lambda () (raise-continuable c4ce3@e)))))))))) (lambda () (let c4ceb@loop ((c4ce7@line (get-line (current-input-port))) (c4ce8@accum '"")) (letrec* ((c4cee@parentheses-ok? (lambda (c4cf5@text) (let c4cfd@loop ((c4cf7@chars (string->list c4cf5@text)) (c4cf8@p0 '0) (c4cf9@p1 '0)) (if (null? c4cf7@chars) (= '0 c4cf8@p0 c4cf9@p1) (let ((c4cff@t (car c4cf7@chars))) (if (memv c4cff@t '(#\()) (c4cfd@loop (cdr c4cf7@chars) (+ c4cf8@p0 '1) c4cf9@p1) (if (memv c4cff@t '(#\))) (c4cfd@loop (cdr c4cf7@chars) (- c4cf8@p0 '1) c4cf9@p1) (if (memv c4cff@t '(#\[)) (c4cfd@loop (cdr c4cf7@chars) c4cf8@p0 (+ c4cf9@p1 '1)) (if (memv c4cff@t '(#\])) (c4cfd@loop (cdr c4cf7@chars) c4cf8@p0 (- c4cf9@p1 '1)) (c4cfd@loop (cdr c4cf7@chars) c4cf8@p0 c4cf9@p1)))))))))) (c4cf0@eval-string-print (lambda (c4cf3@text) (if (not (or (string=? '"\n" c4cf3@text) (= '0 (string-length c4cf3@text)))) (write (c4c28@eval-top-level (call-with-port (open-string-input-port c4cf3@text) read))) (void))))) (if (eof-object? c4ce7@line) (begin (c4cf0@eval-string-print c4ce8@accum) (exit)) (let ((c4cf1@current (string-append c4ce8@accum c4ce7@line))) (if (c4cee@parentheses-ok? c4cf1@current) (c4cf0@eval-string-print c4cf1@current) (c4ceb@loop (get-line (current-input-port)) c4cf1@current)))))))))))) (newline) (c4cde@rec))))) (c4cde@rec)))) (set! c4d74@c4c1a@repl c4c1a@repl) (set! c4c1c@trace-printer (c2a04@c28e2@make-parameter write)) (set! c4d75@c4c1c@trace-printer c4c1c@trace-printer) (set! c4c1e@command-line (c2a04@c28e2@make-parameter (get-command-line))) (set! c4d76@c4c1e@command-line c4c1e@command-line) (set! c4c20@local-library-path (lambda (c4d01@filename) (c2cbe@c2afa@library-path))) (set! c4d77@c4c20@local-library-path c4c20@local-library-path) (set! c4c22@load/args (lambda (c4d03@filename . c4d05@args) (begin (apply c4c32@load-r6rs-top-level c4d03@filename 'load c4d05@args) (void)))) (set! c4d78@c4c22@load/args c4c22@load/args) (set! c4c24@load (lambda (c4d07@filename) (begin (apply c4c32@load-r6rs-top-level c4d07@filename 'load (c4c1e@command-line)) (void)))) (set! c4d79@c4c24@load c4c24@load) (set! c4c26@ironscheme-build (lambda () (c4c24@load '"ironscheme-buildscript.ss"))) (set! c4d7a@c4c26@ironscheme-build c4c26@ironscheme-build) (set! c4c28@eval-top-level (lambda (c4d09@x) (c4be5@c317b@eval c4d09@x (c4bfc@c31a9@interaction-environment)))) (set! c4d7b@c4c28@eval-top-level c4c28@eval-top-level) (set! c4c2a@compile-system-libraries (lambda () (c4c28@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! c4d7c@c4c2a@compile-system-libraries c4c2a@compile-system-libraries) (set! c4c2c@compile (lambda (c4d0b@filename) (c4c32@load-r6rs-top-level c4d0b@filename 'compile))) (set! c4d7d@c4c2c@compile c4c2c@compile) (set! c4c2e@compile->closure (lambda (c4d0d@filename) (c4c32@load-r6rs-top-level c4d0d@filename 'closure))) (set! c4d7e@c4c2e@compile->closure c4c2e@compile->closure) (set! c4c30@pre-compile-r6rs-file (lambda (c4d0f@filename) (c4c32@load-r6rs-top-level c4d0f@filename 'compile))) (set! c4d7f@c4c30@pre-compile-r6rs-file c4c30@pre-compile-r6rs-file) (set! c4c32@load-r6rs-top-level (lambda (c4d11@filename c4d12@how . c4d15@args) (begin (c2cbe@c2afa@library-path (c4c20@local-library-path c4d11@filename)) (let ((c4d17@x* (with-input-from-file c4d11@filename (lambda () (let c4d19@f () (let ((c4d1b@x (c29f6@c28c6@read-annotated))) (if (eof-object? c4d1b@x) '() (cons c4d1b@x (c4d19@f))))))))) (let ((c4d1d@t c4d12@how)) (if (memv c4d1d@t '(closure)) (c4bfb@c31a7@pre-compile-r6rs-top-level c4d17@x*) (if (memv c4d1d@t '(load)) (begin (c4c1e@command-line (cons c4d11@filename (car c4d15@args))) (c2a05@c28e4@mosh-cache-dir (create-mosh-cache-dir)) (if (c2a05@c28e4@mosh-cache-dir) (gensym-prefix-set! (c4c38@prefix-inc! (string-append (c2a05@c28e4@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (c4d1f@file) ((call/cc (lambda (c4d23@c4d21) (lambda () (with-exception-handler (lambda (c4d25@c) ((call/cc (lambda (c4d27@c4d22) (c4d23@c4d21 (lambda () (if '#t '#t (c4d27@c4d22 (lambda () (raise-continuable c4d25@c)))))))))) (lambda () (delete-file (string-append (c2a05@c28e4@mosh-cache-dir) '"/" c4d1f@file))))))))) (directory-list (c2a05@c28e4@mosh-cache-dir))) (void)) (let ((c4d29@compiled (c4bfa@c31a5@compile-r6rs-top-level c4d17@x*))) (begin (if (and (c2a05@c28e4@mosh-cache-dir) (not (symbol-value '%disable-acc))) (c2cc2@c2b02@serialize-all c29ff@c28d8@serialize-library c2a5b@c2a14@compile-core-expr) (void)) (c4d29@compiled)))) (if (memv c4d1d@t '(compile)) (begin (c4bfa@c31a5@compile-r6rs-top-level c4d17@x*) (c2cc2@c2b02@serialize-all c29ff@c28d8@serialize-library c2a5b@c2a14@compile-core-expr)) (if '#f '#f (void)))))))))) (set! c4d80@c4c32@load-r6rs-top-level c4c32@load-r6rs-top-level) (set! c4c34@load-r6rs-top-level-sexp (lambda (c4d2b@import-spec c4d2c@thunk) (let ((c4d37@c4d30 c2cbe@c2afa@library-path) (c4d38@c4d32 c2a05@c28e4@mosh-cache-dir) (c4d39@c4d34 (c4c20@local-library-path '"")) (c4d3a@c4d36 (create-mosh-cache-dir))) (let ((c4d3f@swap (lambda () (begin (let ((c4d41@t (c4d37@c4d30))) (begin (c4d37@c4d30 c4d39@c4d34) (set! c4d39@c4d34 c4d41@t))) (let ((c4d43@t (c4d38@c4d32))) (begin (c4d38@c4d32 c4d3a@c4d36) (set! c4d3a@c4d36 c4d43@t))))))) (dynamic-wind c4d3f@swap (lambda () (begin (if (c2a05@c28e4@mosh-cache-dir) (gensym-prefix-set! (c4c38@prefix-inc! (string-append (c2a05@c28e4@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((c4d49@c4d46 c4c1e@command-line) (c4d4a@c4d48 '())) (let ((c4d4d@swap (lambda () (let ((c4d4f@t (c4d49@c4d46))) (begin (c4d49@c4d46 c4d4a@c4d48) (set! c4d4a@c4d48 c4d4f@t)))))) (dynamic-wind c4d4d@swap (lambda () ((c4bfa@c31a5@compile-r6rs-top-level (list (cons 'import c4d2b@import-spec) (list c4d2c@thunk))))) c4d4d@swap))))) c4d3f@swap))))) (set! c4d81@c4c34@load-r6rs-top-level-sexp c4c34@load-r6rs-top-level-sexp) (set! c4c36@prefix-inc (lambda (c4d51@prefix-string) (let ((c4d53@prefix (symbol->string c4d51@prefix-string))) (let ((c4d55@len (string-length c4d53@prefix))) (let c4d5d@loop ((c4d57@i (- c4d55@len '1)) (c4d58@carry? '#t) (c4d59@accum '())) (if (< c4d57@i '0) (string->symbol (list->string (if c4d58@carry? (cons '#\a c4d59@accum) c4d59@accum))) (if c4d58@carry? (let ((c4d5f@next-integer (+ '1 (char->integer (string-ref c4d53@prefix c4d57@i))))) (if (= c4d5f@next-integer '123) (c4d5d@loop (- c4d57@i '1) '#f (cons '#\A c4d59@accum)) (if (= c4d5f@next-integer '91) (c4d5d@loop (- c4d57@i '1) '#t (cons '#\a c4d59@accum)) (c4d5d@loop (- c4d57@i '1) '#f (cons (integer->char c4d5f@next-integer) c4d59@accum))))) (c4d5d@loop (- c4d57@i '1) '#f (cons (string-ref c4d53@prefix c4d57@i) c4d59@accum))))))))) (set! c4d82@c4c36@prefix-inc c4c36@prefix-inc) (set! c4c38@prefix-inc! (lambda (c4d61@file) (begin (if (not (file-exists? c4d61@file)) (call-with-output-file c4d61@file (lambda (c4d63@port) (write 'd c4d63@port))) (void)) (let ((c4d65@prefix (call-with-input-file c4d61@file read))) (if (main-vm?) (let ((c4d67@next-prefix (c4c36@prefix-inc c4d65@prefix))) (begin (call-with-port (open-file-output-port c4d61@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (c4d69@port) (write c4d67@next-prefix c4d69@port))) c4d65@prefix)) c4d65@prefix))))) (set! c4d83@c4c38@prefix-inc! c4c38@prefix-inc!) (begin (c2cc3@c2b04@current-precompiled-library-loader c2a00@c28da@load-serialized-library) (set-symbol-value! 'load c4c24@load) (set-symbol-value! 'pre-compile-r6rs-file c4c30@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs c4c28@eval-top-level) (set-symbol-value! 'int-env-syms c4bdc@c3169@interaction-environment-symbols) (set-symbol-value! 'expanded2core c2a5a@c2a12@expanded->core) (set-symbol-value! 'trace-printer c4c1c@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (c4c39@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list c4c39@c))))) (c4c0e@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (c4c0e@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (c4c0c@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (c4c0c@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (c4c0c@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((c4c3b@prefix (lambda (c4c3d@ext c4c3e@ls) (append (map (lambda (c4c41@x) (string-append c4c3d@ext c4c41@x)) c4c3e@ls) c4c3e@ls)))) (c2cbf@c2afc@library-extensions (c4c3b@prefix '".mosh" (c2cbf@c2afc@library-extensions)))) (current-exception-handler (lambda (c4c43@c) (begin (if (condition? c4c43@c) (c4c14@condition-printer c4c43@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" c4c43@c)) c4c43@c))) (if ((call/cc (lambda (c4c47@c4c45) (lambda () (with-exception-handler (lambda (c4c49@c) ((call/cc (lambda (c4c4b@c4c46) (c4c47@c4c45 (lambda () (if '#t '#f (c4c4b@c4c46 (lambda () (raise-continuable c4c49@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (c4c34@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (c4c1e@command-line)) (let ((c4c55@c4c4e c4c1e@command-line) (c4c56@c4c50 c2a05@c28e4@mosh-cache-dir) (c4c57@c4c52 '()) (c4c58@c4c54 (create-mosh-cache-dir))) (let ((c4c5d@swap (lambda () (begin (let ((c4c5f@t (c4c55@c4c4e))) (begin (c4c55@c4c4e c4c57@c4c52) (set! c4c57@c4c52 c4c5f@t))) (let ((c4c61@t (c4c56@c4c50))) (begin (c4c56@c4c50 c4c58@c4c54) (set! c4c58@c4c54 c4c61@t))))))) (dynamic-wind c4c5d@swap (lambda () (begin (if (c2a05@c28e4@mosh-cache-dir) (gensym-prefix-set! (c4c38@prefix-inc! (string-append (c2a05@c28e4@mosh-cache-dir) '"/prefix.txt"))) (void)) (c4c1a@repl))) c4c5d@swap))) (begin (c2cbe@c2afa@library-path (c4c20@local-library-path (car (c4c1e@command-line)))) (set! c4c0a@x* (with-input-from-file (car (c4c1e@command-line)) (lambda () (let c4c63@f () (let ((c4c65@x (c29f6@c28c6@read-annotated))) (if (eof-object? c4c65@x) '() (cons c4c65@x (c4c63@f)))))))) (c4c1e@command-line (cons (car (c4c1e@command-line)) (cdr (c4c1e@command-line)))) (c2a05@c28e4@mosh-cache-dir (create-mosh-cache-dir)) (if (c2a05@c28e4@mosh-cache-dir) (gensym-prefix-set! (c4c38@prefix-inc! (string-append (c2a05@c28e4@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (c4c67@file) ((call/cc (lambda (c4c6b@c4c69) (lambda () (with-exception-handler (lambda (c4c6d@c) ((call/cc (lambda (c4c6f@c4c6a) (c4c6b@c4c69 (lambda () (if '#t '#t (c4c6f@c4c6a (lambda () (raise-continuable c4c6d@c)))))))))) (lambda () (delete-file (string-append (c2a05@c28e4@mosh-cache-dir) '"/" c4c67@file))))))))) (directory-list (c2a05@c28e4@mosh-cache-dir))) (void)) (let ((c4c71@compiled (c4bfa@c31a5@compile-r6rs-top-level c4c0a@x*))) (begin (if (and (c2a05@c28e4@mosh-cache-dir) (not (symbol-value '%disable-acc))) (c2cc2@c2b02@serialize-all c29ff@c28d8@serialize-library c2a5b@c2a14@compile-core-expr) (void)) (c4c71@compiled))))))))
