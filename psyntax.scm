;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! ci580@library-file-path->cache-path (unspecified)) (set! ci582@read-annotated (unspecified)) (set! ci584@annotation-stripped (unspecified)) (set! ci586@annotation? (unspecified)) (set! ci588@annotation-source (unspecified)) (set! ci58a@annotation-expression (unspecified)) (set! ci58c@scm->fasl (unspecified)) (set! ci58e@fasl-save (unspecified)) (set! ci590@fasl-load (unspecified)) (set! ci592@verbose? (unspecified)) (set! ci594@serialize-library (unspecified)) (set! ci596@load-serialized-library (unspecified)) (set! ci598@make-record-printer (unspecified)) (set! ci59a@compile-core (unspecified)) (set! ci59c@read-library-source-file (unspecified)) (set! ci59e@make-parameter (unspecified)) (set! ci5a0@mosh-cache-dir (unspecified)) (set! ci636@file-options-spec (unspecified)) (set! ci580@library-file-path->cache-path (lambda (ci637@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ci63d@ci63a ci63e@ci63c) (let ((ci641@extract ci63e@ci63c) (ci642@p ci63d@ci63a)) (letrec* ((ci646@display-hex (lambda (ci64f@n) (if (<= '0 ci64f@n '9) (display ci64f@n ci642@p) (display (integer->char (+ (char->integer '#\a) (- ci64f@n '10))) ci642@p))))) (begin (let ci649@f ((ci647@ls (string-split ci637@x '#\/))) (if (not (null? ci647@ls)) (begin (display '"_" ci642@p) (for-each (lambda (ci64b@c) (if (or (char<=? '#\a ci64b@c '#\z) (char<=? '#\A ci64b@c '#\Z) (char<=? '#\0 ci64b@c '#\9) (memv ci64b@c '(#\- #\. #\_ #\~))) (display ci64b@c ci642@p) (begin (display '"%" ci642@p) (let ((ci64d@n (char->integer ci64b@c))) (begin (ci646@display-hex (quotient ci64d@n '16)) (ci646@display-hex (remainder ci64d@n '16))))))) (string->list (car ci647@ls))) (ci649@f (cdr ci647@ls))) (void))) (ci641@extract)))))))) (set! ci6b1@ci580@library-file-path->cache-path ci580@library-file-path->cache-path) (set! ci582@read-annotated read) (set! ci6b2@ci582@read-annotated ci582@read-annotated) (set! ci584@annotation-stripped (lambda (ci651@x) (ci58a@annotation-expression ci651@x))) (set! ci6b3@ci584@annotation-stripped ci584@annotation-stripped) (set! ci586@annotation? (lambda (ci653@x) (source-info ci653@x))) (set! ci6b4@ci586@annotation? ci586@annotation?) (set! ci588@annotation-source (lambda (ci655@x) (source-info ci655@x))) (set! ci6b5@ci588@annotation-source ci588@annotation-source) (set! ci58a@annotation-expression (lambda (ci657@x) (if (pair? ci657@x) (cons (car ci657@x) (cdr ci657@x)) (if (procedure? ci657@x) (set-source-info! ci657@x '#f) ci657@x)))) (set! ci6b6@ci58a@annotation-expression ci58a@annotation-expression) (set! ci58c@scm->fasl (lambda (ci659@filename) (string-append (ci5a0@mosh-cache-dir) '"/" (ci580@library-file-path->cache-path ci659@filename) '".mosh-fasl"))) (set! ci6b7@ci58c@scm->fasl ci58c@scm->fasl) (set! ci58e@fasl-save (lambda (ci65b@filename ci65c@obj) (call-with-port (open-file-output-port ci65b@filename) (lambda (ci65f@port) ((symbol-value 'fasl-write!) ci65c@obj ci65f@port))))) (set! ci6b8@ci58e@fasl-save ci58e@fasl-save) (set! ci590@fasl-load (lambda (ci661@filename) (call-with-port (open-file-input-port ci661@filename) (symbol-value 'fasl-read!)))) (set! ci6b9@ci590@fasl-load ci590@fasl-load) (set! ci592@verbose? (symbol-value '%verbose)) (set! ci6ba@ci592@verbose? ci592@verbose?) (set! ci594@serialize-library (lambda (ci663@filename ci664@obj) (begin (if ci592@verbose? (format (current-error-port) '"serialize-library ~a\n..." ci663@filename) (void)) (let ((ci667@expanded2core (symbol-value 'expanded2core))) (let ((ci669@compile (symbol-value 'compile-w/o-halt))) (let ((ci66b@code ci664@obj)) (let ((ci66d@pivot (cddddr (cddddr ci66b@code)))) (let ((ci66f@visit (ci669@compile (ci667@expanded2core (car ci66d@pivot))))) (begin (set-car! ci66d@pivot ci66f@visit) (let ((ci671@pivot (cdr ci66d@pivot))) (let ((ci673@invoke (ci669@compile (ci667@expanded2core (car ci671@pivot))))) (set-car! ci671@pivot ci673@invoke))))))))) (let ((ci675@fasl-file (ci58c@scm->fasl ci663@filename))) (begin (if (file-exists? ci675@fasl-file) (delete-file ci675@fasl-file) (void)) ((call/cc (lambda (ci679@ci677) (lambda () (with-exception-handler (lambda (ci67b@c) ((call/cc (lambda (ci67d@ci678) (ci679@ci677 (lambda () (if '#t (begin (if ci592@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" ci663@filename) (void)) (if (file-exists? ci675@fasl-file) (delete-file ci675@fasl-file) (void)) '#f) (ci67d@ci678 (lambda () (raise-continuable ci67b@c)))))))))) (lambda () (ci58e@fasl-save ci675@fasl-file ci664@obj)))))))))))) (set! ci6bb@ci594@serialize-library ci594@serialize-library) (set! ci596@load-serialized-library (lambda (ci67f@filename ci680@obj) (and (ci5a0@mosh-cache-dir) (let ((ci683@fasl-file (ci58c@scm->fasl ci67f@filename))) (if (and (file-exists? ci683@fasl-file) ((symbol-value 'file-newer?) ci683@fasl-file ci67f@filename)) (let ((ci685@expanded2core (symbol-value 'expanded2core))) (let ((ci687@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((ci689@code (ci590@fasl-load ci683@fasl-file))) (let ((ci68b@pivot (cddddr (cddddr ci689@code)))) (let ((ci68d@visit (car ci68b@pivot))) (let ((ci68f@visit-proc (lambda () (ci687@eval-compiled-core ci68d@visit)))) (begin (set-car! ci68b@pivot ci68f@visit-proc) (let ((ci691@pivot (cdr ci68b@pivot))) (let ((ci693@invoke (car ci691@pivot))) (begin (set-car! ci691@pivot (lambda () (ci687@eval-compiled-core ci693@invoke))) (apply ci680@obj ci689@code))))))))))) '#f))))) (set! ci6bc@ci596@load-serialized-library ci596@load-serialized-library) (set! ci598@make-record-printer (lambda (ci695@name ci696@printer) (lambda ci699@x (begin (display '"record printer") (for-each display ci699@x))))) (set! ci6bd@ci598@make-record-printer ci598@make-record-printer) (set! ci59a@compile-core (lambda ci69b@x (apply error 'comile-core '"not implementated" ci69b@x))) (set! ci6be@ci59a@compile-core ci59a@compile-core) (set! ci59c@read-library-source-file (lambda (ci69d@file-name) (with-input-from-file ci69d@file-name ci582@read-annotated))) (set! ci6bf@ci59c@read-library-source-file ci59c@read-library-source-file) (set! ci59e@make-parameter (lambda ci6ad (let ((ci6ae (length ci6ad))) (if (= ci6ae '1) (apply (lambda (ci69f@x) (ci59e@make-parameter ci69f@x (lambda (ci6a1@x) ci6a1@x))) ci6ad) (if (= ci6ae '2) (apply (lambda (ci6a3@x ci6a4@fender) (let ((ci6a7@x (ci6a4@fender ci6a3@x))) (lambda ci6ab (let ((ci6ac (length ci6ab))) (if (= ci6ac '0) (apply (lambda () ci6a7@x) ci6ab) (if (= ci6ac '1) (apply (lambda (ci6a9@v) (set! ci6a7@x (ci6a4@fender ci6a9@v))) ci6ab) (error #1='apply '"invalid arg count"))))))) ci6ad) (error #1# '"invalid arg count")))))) (set! ci6c0@ci59e@make-parameter ci59e@make-parameter) (set! ci5a0@mosh-cache-dir (ci59e@make-parameter '#f)) (set! ci6c1@ci5a0@mosh-cache-dir ci5a0@mosh-cache-dir) (set! ci636@file-options-spec (lambda (ci6af@x) ci6af@x)) (set! ci6c2@ci636@file-options-spec ci636@file-options-spec) (void))
(begin (set! ci6c8@current-primitive-locations (unspecified)) (set! ci6ca@mutable? (unspecified)) (set! ci6cc@rewriter (unspecified)) (set! ci6ce@expanded->core (unspecified)) (set! ci6d0@compile-core-expr (unspecified)) (set! ci6d2@pretty-print (unspecified)) (set! ci6d4@compile-core-expr-to-port (unspecified)) (set! ci6c8@current-primitive-locations (ci6c0@ci59e@make-parameter (lambda (ci6d5@x) '#f) (lambda (ci6d7@p) ci6d7@p))) (set! ci713@ci6c8@current-primitive-locations ci6c8@current-primitive-locations) (set! ci6ca@mutable? (lambda (ci6d9@x) (or (pair? ci6d9@x) (vector? ci6d9@x) (hashtable? ci6d9@x)))) (set! ci714@ci6ca@mutable? ci6ca@mutable?) (set! ci6cc@rewriter (lambda (ci6db@quote-hack?) (letrec* ((ci6de@f (lambda (ci6df@x) (if (pair? ci6df@x) (let ((ci6e1@t (car ci6df@x))) (if (memv ci6e1@t '(quote)) (if (and ci6db@quote-hack? (ci6ca@mutable? (cadr ci6df@x))) (let ((ci6e3@g (gensym))) (begin (set-symbol-value! ci6e3@g (cadr ci6df@x)) ci6e3@g)) ci6df@x) (if (memv ci6e1@t '(case-lambda)) (cons 'case-lambda (map (lambda (ci6e5@x) (cons (car ci6e5@x) (map ci6de@f (cdr ci6e5@x)))) (cdr ci6df@x))) (if (memv ci6e1@t '(lambda)) (cons* 'lambda (cadr ci6df@x) (map ci6de@f (cddr ci6df@x))) (if (memv ci6e1@t '(letrec)) (let ((ci6e7@bindings (cadr ci6df@x)) (ci6e8@body* (cddr ci6df@x))) (let ((ci6eb@lhs* (map car ci6e7@bindings)) (ci6ec@rhs* (map cadr ci6e7@bindings))) (cons* 'letrec (map list ci6eb@lhs* (map ci6de@f ci6ec@rhs*)) (map ci6de@f ci6e8@body*)))) (if (memv ci6e1@t '(letrec*)) (let ((ci6ef@bindings (cadr ci6df@x)) (ci6f0@body* (cddr ci6df@x))) (let ((ci6f3@lhs* (map car ci6ef@bindings)) (ci6f4@rhs* (map cadr ci6ef@bindings))) (cons* 'letrec* (map list ci6f3@lhs* (map ci6de@f ci6f4@rhs*)) (map ci6de@f ci6f0@body*)))) (if (memv ci6e1@t '(library-letrec*)) (let ((ci6f7@name (cadr ci6df@x)) (ci6f8@x (cdr ci6df@x))) (let ((ci6fb@bindings (cadr ci6f8@x)) (ci6fc@body* (cddr ci6f8@x))) (let ((ci6ff@lhs* (map car ci6fb@bindings)) (ci700@lhs** (map cadr ci6fb@bindings)) (ci701@rhs* (map caddr ci6fb@bindings))) (cons* 'library-letrec* ci6f7@name (map list ci6ff@lhs* ci700@lhs** (map ci6de@f ci701@rhs*)) (map ci6de@f ci6fc@body*))))) (if (memv ci6e1@t '(begin)) (cons 'begin (map ci6de@f (cdr ci6df@x))) (if (memv ci6e1@t '(set!)) (list 'set! (cadr ci6df@x) (ci6de@f (caddr ci6df@x))) (if (memv ci6e1@t '(primitive)) (let ((ci705@op (cadr ci6df@x))) (let ((ci707@t ((ci6c8@current-primitive-locations) ci705@op))) (if ci707@t ((lambda (ci709@loc) ci709@loc) ci707@t) ci705@op))) (if (memv ci6e1@t '(define)) ci6df@x (if (list? ci6df@x) (map ci6de@f ci6df@x) (error 'rewrite '"invalid form ~s ~s" ci6df@x (list? ci6df@x)))))))))))))) ci6df@x)))) ci6de@f))) (set! ci715@ci6cc@rewriter ci6cc@rewriter) (set! ci6ce@expanded->core (lambda (ci70b@x) ((ci6cc@rewriter '#f) ci70b@x))) (set! ci716@ci6ce@expanded->core ci6ce@expanded->core) (set! ci6d0@compile-core-expr (lambda (ci70d@x) ((ci6cc@rewriter '#f) ci70d@x))) (set! ci717@ci6d0@compile-core-expr ci6d0@compile-core-expr) (set! ci6d2@pretty-print write) (set! ci718@ci6d2@pretty-print ci6d2@pretty-print) (set! ci6d4@compile-core-expr-to-port (lambda (ci70f@x ci710@p) (ci6d2@pretty-print ((ci6cc@rewriter '#f) ci70f@x) ci710@p))) (set! ci719@ci6d4@compile-core-expr-to-port ci6d4@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! ci768@make-collection (unspecified)) (set! ci76a@current-library-collection (unspecified)) (set! ci76c@rp (unspecified)) (set! ci776@library? (unspecified)) (set! ci778@library-id (unspecified)) (set! ci77a@set-library-id! (unspecified)) (set! ci77c@library-name (unspecified)) (set! ci77e@set-library-name! (unspecified)) (set! ci780@library-version (unspecified)) (set! ci782@set-library-version! (unspecified)) (set! ci784@library-imp* (unspecified)) (set! ci786@set-library-imp*! (unspecified)) (set! ci788@library-vis* (unspecified)) (set! ci78a@set-library-vis*! (unspecified)) (set! ci78c@library-inv* (unspecified)) (set! ci78e@set-library-inv*! (unspecified)) (set! ci790@library-subst (unspecified)) (set! ci792@set-library-subst! (unspecified)) (set! ci794@library-env (unspecified)) (set! ci796@set-library-env! (unspecified)) (set! ci798@library-visit-state (unspecified)) (set! ci79a@set-library-visit-state! (unspecified)) (set! ci79c@library-invoke-state (unspecified)) (set! ci79e@set-library-invoke-state! (unspecified)) (set! ci7a0@library-visit-code (unspecified)) (set! ci7a2@set-library-visit-code! (unspecified)) (set! ci7a4@library-invoke-code (unspecified)) (set! ci7a6@set-library-invoke-code! (unspecified)) (set! ci7a8@library-visible? (unspecified)) (set! ci7aa@set-library-visible?! (unspecified)) (set! ci7ac@library-source-file-name (unspecified)) (set! ci7ae@set-library-source-file-name! (unspecified)) (set! ci7b0@dummy (unspecified)) (set! ci7b2@find-dependencies (unspecified)) (set! ci7b4@find-library-by (unspecified)) (set! ci7b6@library-path (unspecified)) (set! ci7b8@library-extensions (unspecified)) (set! ci7ba@library-name->file-name (unspecified)) (set! ci7bc@file-locator (unspecified)) (set! ci7be@serialize-all (unspecified)) (set! ci7c0@current-precompiled-library-loader (unspecified)) (set! ci7c2@try-load-from-file (unspecified)) (set! ci7c4@library-loader (unspecified)) (set! ci7c6@current-library-expander (unspecified)) (set! ci7c8@external-pending-libraries (unspecified)) (set! ci7ca@find-external-library (unspecified)) (set! ci7cc@find-library-by-name (unspecified)) (set! ci7ce@library-exists? (unspecified)) (set! ci7d0@find-library-by-spec/die (unspecified)) (set! ci7d2@label->binding-table (unspecified)) (set! ci7d4@install-library-record (unspecified)) (set! ci7d6@install-library (unspecified)) (set! ci7d8@imported-label->binding (unspecified)) (set! ci7da@invoke-library (unspecified)) (set! ci7dc@visit-library (unspecified)) (set! ci7de@invoke-library-by-spec (unspecified)) (set! ci7e0@installed-libraries (unspecified)) (set! ci7e2@library-spec (unspecified)) (set! ci768@make-collection (lambda () (let ((ci7e3@set '())) (letrec* ((ci7e6@set-cons (lambda (ci7eb@x ci7ec@ls) (if (memq ci7eb@x ci7ec@ls) ci7ec@ls (cons ci7eb@x ci7ec@ls))))) (lambda ci7e9 (let ((ci7ea (length ci7e9))) (if (= ci7ea '0) (apply (lambda () ci7e3@set) ci7e9) (if (= ci7ea '1) (apply (lambda (ci7e7@x) (set! ci7e3@set (ci7e6@set-cons ci7e7@x ci7e3@set))) ci7e9) (error #1='apply '"invalid arg count"))))))))) (set! ci957@ci768@make-collection ci768@make-collection) (set! ci76a@current-library-collection (ci6c0@ci59e@make-parameter (ci768@make-collection) (lambda (ci7ef@x) (begin (if (not (procedure? ci7ef@x)) (assertion-violation 'current-library-collection '"not a procedure" ci7ef@x) (void)) ci7ef@x)))) (set! ci958@ci76a@current-library-collection ci76a@current-library-collection) (set! ci76c@rp (ci6bd@ci598@make-record-printer 'library (lambda (ci7f1@x ci7f2@p ci7f3@wr) (begin (if (not (ci776@library? ci7f1@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (ci780@library-version ci7f1@x)) (ci77c@library-name ci7f1@x) (append (ci77c@library-name ci7f1@x) (list (ci780@library-version ci7f1@x))))) ci7f2@p))))) (set! ci959@ci76c@rp ci76c@rp) (set! ci776@library? (lambda (ci7f7@x) (and (simple-struct? ci7f7@x) (eq? (simple-struct-name ci7f7@x) 'library)))) (set! ci95a@ci776@library? ci776@library?) (set! ci778@library-id (lambda (ci7f9@x) (simple-struct-ref ci7f9@x '0))) (set! ci95b@ci778@library-id ci778@library-id) (set! ci77a@set-library-id! (lambda (ci7fb@x ci7fc@val) (simple-struct-set! ci7fb@x '0 ci7fc@val))) (set! ci95c@ci77a@set-library-id! ci77a@set-library-id!) (set! ci77c@library-name (lambda (ci7ff@x) (simple-struct-ref ci7ff@x '1))) (set! ci95d@ci77c@library-name ci77c@library-name) (set! ci77e@set-library-name! (lambda (ci801@x ci802@val) (simple-struct-set! ci801@x '1 ci802@val))) (set! ci95e@ci77e@set-library-name! ci77e@set-library-name!) (set! ci780@library-version (lambda (ci805@x) (simple-struct-ref ci805@x '2))) (set! ci95f@ci780@library-version ci780@library-version) (set! ci782@set-library-version! (lambda (ci807@x ci808@val) (simple-struct-set! ci807@x '2 ci808@val))) (set! ci960@ci782@set-library-version! ci782@set-library-version!) (set! ci784@library-imp* (lambda (ci80b@x) (simple-struct-ref ci80b@x '3))) (set! ci961@ci784@library-imp* ci784@library-imp*) (set! ci786@set-library-imp*! (lambda (ci80d@x ci80e@val) (simple-struct-set! ci80d@x '3 ci80e@val))) (set! ci962@ci786@set-library-imp*! ci786@set-library-imp*!) (set! ci788@library-vis* (lambda (ci811@x) (simple-struct-ref ci811@x '4))) (set! ci963@ci788@library-vis* ci788@library-vis*) (set! ci78a@set-library-vis*! (lambda (ci813@x ci814@val) (simple-struct-set! ci813@x '4 ci814@val))) (set! ci964@ci78a@set-library-vis*! ci78a@set-library-vis*!) (set! ci78c@library-inv* (lambda (ci817@x) (simple-struct-ref ci817@x '5))) (set! ci965@ci78c@library-inv* ci78c@library-inv*) (set! ci78e@set-library-inv*! (lambda (ci819@x ci81a@val) (simple-struct-set! ci819@x '5 ci81a@val))) (set! ci966@ci78e@set-library-inv*! ci78e@set-library-inv*!) (set! ci790@library-subst (lambda (ci81d@x) (simple-struct-ref ci81d@x '6))) (set! ci967@ci790@library-subst ci790@library-subst) (set! ci792@set-library-subst! (lambda (ci81f@x ci820@val) (simple-struct-set! ci81f@x '6 ci820@val))) (set! ci968@ci792@set-library-subst! ci792@set-library-subst!) (set! ci794@library-env (lambda (ci823@x) (simple-struct-ref ci823@x '7))) (set! ci969@ci794@library-env ci794@library-env) (set! ci796@set-library-env! (lambda (ci825@x ci826@val) (simple-struct-set! ci825@x '7 ci826@val))) (set! ci96a@ci796@set-library-env! ci796@set-library-env!) (set! ci798@library-visit-state (lambda (ci829@x) (simple-struct-ref ci829@x '8))) (set! ci96b@ci798@library-visit-state ci798@library-visit-state) (set! ci79a@set-library-visit-state! (lambda (ci82b@x ci82c@val) (simple-struct-set! ci82b@x '8 ci82c@val))) (set! ci96c@ci79a@set-library-visit-state! ci79a@set-library-visit-state!) (set! ci79c@library-invoke-state (lambda (ci82f@x) (simple-struct-ref ci82f@x '9))) (set! ci96d@ci79c@library-invoke-state ci79c@library-invoke-state) (set! ci79e@set-library-invoke-state! (lambda (ci831@x ci832@val) (simple-struct-set! ci831@x '9 ci832@val))) (set! ci96e@ci79e@set-library-invoke-state! ci79e@set-library-invoke-state!) (set! ci7a0@library-visit-code (lambda (ci835@x) (simple-struct-ref ci835@x '10))) (set! ci96f@ci7a0@library-visit-code ci7a0@library-visit-code) (set! ci7a2@set-library-visit-code! (lambda (ci837@x ci838@val) (simple-struct-set! ci837@x '10 ci838@val))) (set! ci970@ci7a2@set-library-visit-code! ci7a2@set-library-visit-code!) (set! ci7a4@library-invoke-code (lambda (ci83b@x) (simple-struct-ref ci83b@x '11))) (set! ci971@ci7a4@library-invoke-code ci7a4@library-invoke-code) (set! ci7a6@set-library-invoke-code! (lambda (ci83d@x ci83e@val) (simple-struct-set! ci83d@x '11 ci83e@val))) (set! ci972@ci7a6@set-library-invoke-code! ci7a6@set-library-invoke-code!) (set! ci7a8@library-visible? (lambda (ci841@x) (simple-struct-ref ci841@x '12))) (set! ci973@ci7a8@library-visible? ci7a8@library-visible?) (set! ci7aa@set-library-visible?! (lambda (ci843@x ci844@val) (simple-struct-set! ci843@x '12 ci844@val))) (set! ci974@ci7aa@set-library-visible?! ci7aa@set-library-visible?!) (set! ci7ac@library-source-file-name (lambda (ci847@x) (simple-struct-ref ci847@x '13))) (set! ci975@ci7ac@library-source-file-name ci7ac@library-source-file-name) (set! ci7ae@set-library-source-file-name! (lambda (ci849@x ci84a@val) (simple-struct-set! ci849@x '13 ci84a@val))) (set! ci976@ci7ae@set-library-source-file-name! ci7ae@set-library-source-file-name!) (set! ci7b0@dummy '3) (set! ci977@ci7b0@dummy ci7b0@dummy) (set! ci7b2@find-dependencies (lambda (ci84d@ls) (if (null? ci84d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! ci978@ci7b2@find-dependencies ci7b2@find-dependencies) (set! ci7b4@find-library-by (lambda (ci84f@pred) (let ci853@f ((ci851@ls ((ci76a@current-library-collection)))) (if (null? ci851@ls) '#f (if (ci84f@pred (car ci851@ls)) (car ci851@ls) (ci853@f (cdr ci851@ls))))))) (set! ci979@ci7b4@find-library-by ci7b4@find-library-by) (set! ci7b6@library-path (ci6c0@ci59e@make-parameter '(".") (lambda (ci855@x) (if (and (list? ci855@x) (for-all string? ci855@x)) (map (lambda (ci857@x) ci857@x) ci855@x) (assertion-violation 'library-path '"not a list of strings" ci855@x))))) (set! ci97a@ci7b6@library-path ci7b6@library-path) (set! ci7b8@library-extensions (ci6c0@ci59e@make-parameter '(".sls" ".ss" ".scm") (lambda (ci859@x) (if (and (list? ci859@x) (for-all string? ci859@x)) (map (lambda (ci85b@x) ci85b@x) ci859@x) (assertion-violation 'library-extensions '"not a list of strings" ci859@x))))) (set! ci97b@ci7b8@library-extensions ci7b8@library-extensions) (set! ci7ba@library-name->file-name (lambda (ci85d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ci863@ci860 ci864@ci862) (let ((ci867@extract ci864@ci862) (ci868@p ci863@ci860)) (letrec* ((ci86c@display-hex (lambda (ci875@n) (if (<= '0 ci875@n '9) (display ci875@n ci868@p) (display (integer->char (+ (char->integer '#\a) (- ci875@n '10))) ci868@p))))) (begin (let ci86f@f ((ci86d@ls ci85d@x)) (if (not (null? ci86d@ls)) (begin (display '"/" ci868@p) (for-each (lambda (ci871@c) (if (or (char<=? '#\a ci871@c '#\z) (char<=? '#\A ci871@c '#\Z) (char<=? '#\0 ci871@c '#\9) (memv ci871@c '(#\- #\. #\_ #\~))) (display ci871@c ci868@p) (begin (display '"%" ci868@p) (let ((ci873@n (char->integer ci871@c))) (begin (ci86c@display-hex (quotient ci873@n '16)) (ci86c@display-hex (remainder ci873@n '16))))))) (string->list (symbol->string (car ci86d@ls)))) (ci86f@f (cdr ci86d@ls))) (void))) (ci867@extract)))))))) (set! ci97c@ci7ba@library-name->file-name ci7ba@library-name->file-name) (set! ci7bc@file-locator (ci6c0@ci59e@make-parameter (lambda (ci877@x) (let ((ci879@str (ci7ba@library-name->file-name ci877@x))) (let ci881@f ((ci87b@ls (ci7b6@library-path)) (ci87c@exts (ci7b8@library-extensions)) (ci87d@failed-list '())) (if (null? ci87b@ls) (letrec* ((ci88b@ci886 (make-record-type-descriptor '&library-resolution &condition-rtd 'ci889 '#f '#f '#((immutable library) (immutable files)))) (ci88d@ci888 '#f) (ci88f@ci887 (make-record-constructor-descriptor ci88b@ci886 &condition-rcd ci88d@ci888)) (ci892@ci885 (record-predicate ci88b@ci886)) (ci894@make-library-resolution-condition (record-constructor ci88f@ci887)) (ci896@ci883 (record-accessor ci88b@ci886 '0)) (ci898@ci884 (record-accessor ci88b@ci886 '1)) (ci89a@library-resolution-condition? (condition-predicate ci88b@ci886)) (ci89c@condition-library (condition-accessor ci88b@ci886 ci896@ci883)) (ci89e@condition-files (condition-accessor ci88b@ci886 ci898@ci884))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (ci894@make-library-resolution-condition ci877@x (reverse ci87d@failed-list))))) (if (null? ci87c@exts) (ci881@f (cdr ci87b@ls) (ci7b8@library-extensions) ci87d@failed-list) (let ((ci89f@name (string-append (car ci87b@ls) ci879@str (car ci87c@exts)))) (if (file-exists? ci89f@name) ci89f@name (ci881@f ci87b@ls (cdr ci87c@exts) (cons ci89f@name ci87d@failed-list))))))))) (lambda (ci8a1@f) (if (procedure? ci8a1@f) ci8a1@f (assertion-violation 'file-locator '"not a procedure" ci8a1@f))))) (set! ci97d@ci7bc@file-locator ci7bc@file-locator) (set! ci7be@serialize-all (lambda (ci8a3@serialize ci8a4@compile) (letrec* ((ci8a8@library-desc (lambda (ci8ab@x) (list (ci778@library-id ci8ab@x) (ci77c@library-name ci8ab@x))))) (for-each (lambda (ci8a9@x) (if (ci7ac@library-source-file-name ci8a9@x) (ci8a3@serialize (ci7ac@library-source-file-name ci8a9@x) (list (ci778@library-id ci8a9@x) (ci77c@library-name ci8a9@x) (ci780@library-version ci8a9@x) (map ci8a8@library-desc (ci784@library-imp* ci8a9@x)) (map ci8a8@library-desc (ci788@library-vis* ci8a9@x)) (map ci8a8@library-desc (ci78c@library-inv* ci8a9@x)) (ci790@library-subst ci8a9@x) (ci794@library-env ci8a9@x) (ci8a4@compile (ci7a0@library-visit-code ci8a9@x)) (ci8a4@compile (ci7a4@library-invoke-code ci8a9@x)) (ci7a8@library-visible? ci8a9@x))) (void))) ((ci76a@current-library-collection)))))) (set! ci97e@ci7be@serialize-all ci7be@serialize-all) (set! ci7c0@current-precompiled-library-loader (ci6c0@ci59e@make-parameter (lambda (ci8ad@filename ci8ae@sk) '#f))) (set! ci97f@ci7c0@current-precompiled-library-loader ci7c0@current-precompiled-library-loader) (set! ci7c2@try-load-from-file (lambda (ci8b1@filename) ((ci7c0@current-precompiled-library-loader) ci8b1@filename (lambda ci8d7 (let ((ci8d8 (length ci8d7))) (if (= ci8d8 '11) (apply (lambda (ci8b3@id ci8b4@name ci8b5@ver ci8b6@imp* ci8b7@vis* ci8b8@inv* ci8b9@exp-subst ci8ba@exp-env ci8bb@visit-proc ci8bc@invoke-proc ci8bd@visible?) (let ci8cb@f ((ci8c9@deps (append ci8b6@imp* ci8b7@vis* ci8b8@inv*))) (if (null? ci8c9@deps) (begin (ci7d6@install-library ci8b3@id ci8b4@name ci8b5@ver ci8b6@imp* ci8b7@vis* ci8b8@inv* ci8b9@exp-subst ci8ba@exp-env ci8bb@visit-proc ci8bc@invoke-proc '#f '#f ci8bd@visible? '#f) '#t) (let ((ci8cd@d (car ci8c9@deps))) (let ((ci8cf@label (car ci8cd@d)) (ci8d0@dname (cadr ci8cd@d))) (let ((ci8d3@l (ci7cc@find-library-by-name ci8d0@dname))) (if (and (ci776@library? ci8d3@l) (eq? ci8cf@label (ci778@library-id ci8d3@l))) (ci8cb@f (cdr ci8c9@deps)) (begin (if ci6ba@ci592@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" ci8b4@name ci8d0@dname ci8b1@filename ci8d3@l ci8cf@label (ci778@library-id ci8d3@l)) (void)) '#f)))))))) ci8d7) (if (>= ci8d8 '0) (apply (lambda ci8d5@others '#f) ci8d7) (error #1# '"invalid arg count")))))))) (set! ci980@ci7c2@try-load-from-file ci7c2@try-load-from-file) (set! ci7c4@library-loader (ci6c0@ci59e@make-parameter (lambda (ci8d9@x) (let ((ci8db@file-name ((ci7bc@file-locator) ci8d9@x))) (if (not ci8db@file-name) (assertion-violation '#f '"cannot file library" ci8d9@x) (or (ci7c2@try-load-from-file ci8db@file-name) ((ci7c6@current-library-expander) (ci6bf@ci59c@read-library-source-file ci8db@file-name) ci8db@file-name (lambda (ci8dd@name) (if (not (fast-equal? ci8dd@name ci8d9@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (ci8e3@ci8e0 ci8e4@ci8e2) (let ((ci8e7@e ci8e4@ci8e2) (ci8e8@p ci8e3@ci8e0)) (begin (display '"expected to find library " ci8e8@p) (write ci8d9@x ci8e8@p) (display '" in file " ci8e8@p) (display ci8db@file-name ci8e8@p) (display '", found " ci8e8@p) (write ci8dd@name ci8e8@p) (display '" instead" ci8e8@p) (ci8e7@e)))))) (void)))))))) (lambda (ci8eb@f) (if (procedure? ci8eb@f) ci8eb@f (assertion-violation 'library-locator '"not a procedure" ci8eb@f))))) (set! ci981@ci7c4@library-loader ci7c4@library-loader) (set! ci7c6@current-library-expander (ci6c0@ci59e@make-parameter (lambda (ci8ed@x) (assertion-violation 'library-expander '"not initialized")) (lambda (ci8ef@f) (if (procedure? ci8ef@f) ci8ef@f (assertion-violation 'library-expander '"not a procedure" ci8ef@f))))) (set! ci982@ci7c6@current-library-expander ci7c6@current-library-expander) (set! ci7c8@external-pending-libraries (ci6c0@ci59e@make-parameter '())) (set! ci983@ci7c8@external-pending-libraries ci7c8@external-pending-libraries) (set! ci7ca@find-external-library (lambda (ci8f1@name) (begin (if (member ci8f1@name (ci7c8@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" ci8f1@name) (void)) (let ((ci8f7@ci8f4 ci7c8@external-pending-libraries) (ci8f8@ci8f6 (cons ci8f1@name (ci7c8@external-pending-libraries)))) (let ((ci8fb@swap (lambda () (let ((ci8fd@t (ci8f7@ci8f4))) (begin (ci8f7@ci8f4 ci8f8@ci8f6) (set! ci8f8@ci8f6 ci8fd@t)))))) (dynamic-wind ci8fb@swap (lambda () (begin ((ci7c4@library-loader) ci8f1@name) (or (ci7b4@find-library-by (lambda (ci8ff@x) (fast-equal? (ci77c@library-name ci8ff@x) ci8f1@name))) (assertion-violation '#f '"handling external library did not yield the correct library" ci8f1@name)))) ci8fb@swap)))))) (set! ci984@ci7ca@find-external-library ci7ca@find-external-library) (set! ci7cc@find-library-by-name (lambda (ci901@name) (or (ci7b4@find-library-by (lambda (ci903@x) (fast-equal? (ci77c@library-name ci903@x) ci901@name))) (ci7ca@find-external-library ci901@name)))) (set! ci985@ci7cc@find-library-by-name ci7cc@find-library-by-name) (set! ci7ce@library-exists? (lambda (ci905@name) (and (ci7b4@find-library-by (lambda (ci907@x) (fast-equal? (ci77c@library-name ci907@x) ci905@name))) '#t))) (set! ci986@ci7ce@library-exists? ci7ce@library-exists?) (set! ci7d0@find-library-by-spec/die (lambda (ci909@spec) (let ((ci90b@id (car ci909@spec))) (or (ci7b4@find-library-by (lambda (ci90d@x) (eq? ci90b@id (ci778@library-id ci90d@x)))) (assertion-violation '#f '"cannot find library with required spec" ci909@spec))))) (set! ci987@ci7d0@find-library-by-spec/die ci7d0@find-library-by-spec/die) (set! ci7d2@label->binding-table (make-eq-hashtable)) (set! ci988@ci7d2@label->binding-table ci7d2@label->binding-table) (set! ci7d4@install-library-record (lambda (ci90f@lib) (begin (let ((ci911@exp-env (ci794@library-env ci90f@lib))) (for-each (lambda (ci913@x) (let ((ci915@label (car ci913@x)) (ci916@binding (cdr ci913@x))) (let ((ci919@binding (let ((ci91b@t (car ci916@binding))) (if (memv ci91b@t '(global)) (cons 'global (cons ci90f@lib (cdr ci916@binding))) (if (memv ci91b@t '(global-macro)) (cons 'global-macro (cons ci90f@lib (cdr ci916@binding))) (if (memv ci91b@t '(global-macro!)) (cons 'global-macro! (cons ci90f@lib (cdr ci916@binding))) ci916@binding)))))) (begin (if (hashtable-ref ci7d2@label->binding-table ci915@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" ci915@label (hashtable-ref ci7d2@label->binding-table ci915@label '#f) ci919@binding) (exit)) (void)) (hashtable-set! ci7d2@label->binding-table ci915@label ci919@binding))))) ci911@exp-env)) ((ci76a@current-library-collection) ci90f@lib)))) (set! ci989@ci7d4@install-library-record ci7d4@install-library-record) (set! ci7d6@install-library (lambda (ci91d@id ci91e@name ci91f@ver ci920@imp* ci921@vis* ci922@inv* ci923@exp-subst ci924@exp-env ci925@visit-proc ci926@invoke-proc ci927@visit-code ci928@invoke-code ci929@visible? ci92a@source-file-name) (let ((ci939@imp-lib* (map ci7d0@find-library-by-spec/die ci920@imp*)) (ci93a@vis-lib* (map ci7d0@find-library-by-spec/die ci921@vis*)) (ci93b@inv-lib* (map ci7d0@find-library-by-spec/die ci922@inv*))) (begin (if (not (and (symbol? ci91d@id) (list? ci91e@name) (list? ci91f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" ci91d@id ci91e@name ci91f@ver) (void)) (if (ci7ce@library-exists? ci91e@name) (assertion-violation 'install-library '"library is already installed" ci91e@name) (void)) (let ((ci93f@lib (make-simple-struct 'library '15 (list ci91d@id ci91e@name ci91f@ver ci939@imp-lib* ci93a@vis-lib* ci93b@inv-lib* ci923@exp-subst ci924@exp-env ci925@visit-proc ci926@invoke-proc ci927@visit-code ci928@invoke-code ci929@visible? ci92a@source-file-name)))) (ci7d4@install-library-record ci93f@lib)))))) (set! ci98a@ci7d6@install-library ci7d6@install-library) (set! ci7d8@imported-label->binding (lambda (ci941@lab) (hashtable-ref ci7d2@label->binding-table ci941@lab '#f))) (set! ci98b@ci7d8@imported-label->binding ci7d8@imported-label->binding) (set! ci7da@invoke-library (lambda (ci943@lib) (let ((ci945@invoke (ci79c@library-invoke-state ci943@lib))) (if (procedure? ci945@invoke) (begin (ci79e@set-library-invoke-state! ci943@lib (lambda () (assertion-violation 'invoke '"circularity detected" ci943@lib))) (for-each ci7da@invoke-library (ci78c@library-inv* ci943@lib)) (ci79e@set-library-invoke-state! ci943@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" ci943@lib))) (ci945@invoke) (ci79e@set-library-invoke-state! ci943@lib '#t)) (void))))) (set! ci98c@ci7da@invoke-library ci7da@invoke-library) (set! ci7dc@visit-library (lambda (ci947@lib) (let ((ci949@visit (ci798@library-visit-state ci947@lib))) (if (procedure? ci949@visit) (begin (ci79a@set-library-visit-state! ci947@lib (lambda () (assertion-violation 'visit '"circularity detected" ci947@lib))) (for-each ci7da@invoke-library (ci788@library-vis* ci947@lib)) (ci79a@set-library-visit-state! ci947@lib (lambda () (assertion-violation 'invoke '"first visit did not return" ci947@lib))) (ci949@visit) (ci79a@set-library-visit-state! ci947@lib '#t)) (void))))) (set! ci98d@ci7dc@visit-library ci7dc@visit-library) (set! ci7de@invoke-library-by-spec (lambda (ci94b@spec) (ci7da@invoke-library (ci7d0@find-library-by-spec/die ci94b@spec)))) (set! ci98e@ci7de@invoke-library-by-spec ci7de@invoke-library-by-spec) (set! ci7e0@installed-libraries (lambda ci953 (let ((ci954 (length ci953))) (if (= ci954 '1) (apply (lambda (ci94d@all?) (let ci951@f ((ci94f@ls ((ci76a@current-library-collection)))) (if (null? ci94f@ls) '() (if (or ci94d@all? (ci7a8@library-visible? (car ci94f@ls))) (cons (car ci94f@ls) (ci951@f (cdr ci94f@ls))) (ci951@f (cdr ci94f@ls)))))) ci953) (if (= ci954 '0) (apply (lambda () (ci7e0@installed-libraries '#f)) ci953) (error #1# '"invalid arg count")))))) (set! ci98f@ci7e0@installed-libraries ci7e0@installed-libraries) (set! ci7e2@library-spec (lambda (ci955@x) (begin (if (not (ci776@library? ci955@x)) (assertion-violation 'library-spec '"not a library" ci955@x) (void)) (list (ci778@library-id ci955@x) (ci77c@library-name ci955@x) (ci780@library-version ci955@x))))) (set! ci990@ci7e2@library-spec ci7e2@library-spec) (void))
(begin (set! ci994@build-global-define (unspecified)) (set! cia05@build-lambda (unspecified)) (set! cia07@build-case-lambda (unspecified)) (set! cia35@build-sequence (unspecified)) (set! cia37@build-void (unspecified)) (set! cia39@build-letrec (unspecified)) (set! cia3b@build-let (unspecified)) (set! cia3d@build-named-let (unspecified)) (set! cia3f@build-letrec* (unspecified)) (set! cia41@build-library-letrec* (unspecified)) (set! cia43@build-receive (unspecified)) (set! ci994@build-global-define (lambda (cia44@x) (cia37@build-void))) (set! ciad2@ci994@build-global-define ci994@build-global-define) (set! cia05@build-lambda (lambda (cia46@ae cia47@vars cia48@exp) (list 'lambda cia47@vars cia48@exp))) (set! ciad3@cia05@build-lambda cia05@build-lambda) (set! cia07@build-case-lambda (lambda (cia4c@ae cia4d@vars* cia4e@exp*) (letrec* ((cia53@build-error (lambda (cia8a@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (cia55@build-pred (lambda (cia72@ae cia73@n cia74@vars) (call-with-values (lambda () (let cia80@f ((cia7c@vars cia74@vars) (cia7d@count '0)) (if (pair? cia7c@vars) (cia80@f (cdr cia7c@vars) (+ cia7d@count '1)) (if (null? cia7c@vars) (values cia7d@count '=) (values cia7d@count '>=))))) (lambda (cia82@cia79 cia83@cia7b) (let ((cia86@pred cia83@cia7b) (cia87@count cia82@cia79)) (list (list 'primitive cia86@pred) cia73@n (list 'quote cia87@count))))))) (cia57@build-apply (lambda (cia6a@ae cia6b@g cia6c@vars cia6d@exp) (list '(primitive apply) (cia05@build-lambda cia6a@ae cia6c@vars cia6d@exp) cia6b@g))) (cia59@expand-case-lambda (lambda (cia5a@ae cia5b@vars cia5c@exp*) (let ((cia60@g (gensym)) (cia61@n (gensym))) (list 'lambda cia60@g (cia3b@build-let cia5a@ae (list cia61@n) (list (list '(primitive length) cia60@g)) (let cia68@f ((cia64@vars* cia4d@vars*) (cia65@exp* cia5c@exp*)) (if (null? cia64@vars*) (cia53@build-error cia5a@ae) (list 'if (cia55@build-pred cia5a@ae cia61@n (car cia64@vars*)) (cia57@build-apply cia5a@ae cia60@g (car cia64@vars*) (car cia65@exp*)) (cia68@f (cdr cia64@vars*) (cdr cia65@exp*))))))))))) (if (= (length cia4e@exp*) '1) (cia05@build-lambda cia4c@ae (car cia4d@vars*) (car cia4e@exp*)) (cia59@expand-case-lambda cia4c@ae cia4d@vars* cia4e@exp*))))) (set! ciad4@cia07@build-case-lambda cia07@build-case-lambda) (set! cia35@build-sequence (lambda (cia8c@ae cia8d@exps) (let cia92@loop ((cia90@exps cia8d@exps)) (if (null? (cdr cia90@exps)) (car cia90@exps) (if (equal? (car cia90@exps) (cia37@build-void)) (cia92@loop (cdr cia90@exps)) (cons 'begin cia90@exps)))))) (set! ciad5@cia35@build-sequence cia35@build-sequence) (set! cia37@build-void (lambda () '((primitive void)))) (set! ciad6@cia37@build-void cia37@build-void) (set! cia39@build-letrec (lambda (cia94@ae cia95@vars cia96@val-exps cia97@body-exp) (if (null? cia95@vars) cia97@body-exp (list 'letrec (map list cia95@vars cia96@val-exps) cia97@body-exp)))) (set! ciad7@cia39@build-letrec cia39@build-letrec) (set! cia3b@build-let (lambda (cia9c@ae cia9d@vars cia9e@val-exps cia9f@body-exp) (if (null? cia9d@vars) cia9f@body-exp (list 'let (map list cia9d@vars cia9e@val-exps) cia9f@body-exp)))) (set! ciad8@cia3b@build-let cia3b@build-let) (set! cia3d@build-named-let (lambda (ciaa4@ae ciaa5@name ciaa6@vars ciaa7@val-exps ciaa8@body-exp) (list 'let ciaa5@name (map list ciaa6@vars ciaa7@val-exps) ciaa8@body-exp))) (set! ciad9@cia3d@build-named-let cia3d@build-named-let) (set! cia3f@build-letrec* (lambda (ciaae@ae ciaaf@vars ciab0@val-exps ciab1@body-exp) (if (null? ciaaf@vars) ciab1@body-exp (list 'letrec* (map list ciaaf@vars ciab0@val-exps) ciab1@body-exp)))) (set! ciada@cia3f@build-letrec* cia3f@build-letrec*) (set! cia41@build-library-letrec* (lambda (ciab6@ae ciab7@name ciab8@vars ciab9@locs ciaba@val-exps ciabb@body-exp) (cons 'begin (append (map (lambda (ciac2@var) (cons 'set! (cons ciac2@var '((unspecified))))) ciab8@vars) (append (apply append (map (lambda (ciac4@var ciac5@loc ciac6@val-exp) (list (list 'set! ciac4@var ciac6@val-exp) (list 'set! ciac5@loc ciac4@var))) ciab8@vars ciab9@locs ciaba@val-exps)) (list ciabb@body-exp)))))) (set! ciadb@cia41@build-library-letrec* cia41@build-library-letrec*) (set! cia43@build-receive (lambda (ciaca@ae ciacb@vars ciacc@producer ciacd@body*) (begin (display '"************** in ") (cons 'receive (cons ciacb@vars (cons ciacc@producer ciacd@body*)))))) (set! ciadc@cia43@build-receive cia43@build-receive) (void))
(begin (set! ciaeb@file-options-macro (unspecified)) (set! ciaed@set-cons (unspecified)) (set! ciaef@set-union (unspecified)) (set! ciaf4@top-mark* (unspecified)) (set! ciaf6@top-marked? (unspecified)) (set! ciaf8@gen-lexical (unspecified)) (set! ciafa@gen-global (unspecified)) (set! ciafc@gen-label (unspecified)) (set! ciafe@gen-top-level-label (unspecified)) (set! cib00@gen-define-label+loc (unspecified)) (set! cib02@gen-define-label (unspecified)) (set! cib0c@rib? (unspecified)) (set! cib0e@rib-sym* (unspecified)) (set! cib10@set-rib-sym*! (unspecified)) (set! cib12@rib-mark** (unspecified)) (set! cib14@set-rib-mark**! (unspecified)) (set! cib16@rib-label* (unspecified)) (set! cib18@set-rib-label*! (unspecified)) (set! cib1a@rib-sealed/freq (unspecified)) (set! cib1c@set-rib-sealed/freq! (unspecified)) (set! cib1e@rib-cache (unspecified)) (set! cib20@set-rib-cache! (unspecified)) (set! cib22@dummy (unspecified)) (set! cib24@make-empty-rib (unspecified)) (set! cib26@extend-rib! (unspecified)) (set! cib28@extend-rib/nc! (unspecified)) (set! cib2a@make-rib-map (unspecified)) (set! cib2c@seal-rib! (unspecified)) (set! cib2e@unseal-rib! (unspecified)) (set! cib30@make-full-rib (unspecified)) (set! cib32@rp (unspecified)) (set! cib3c@stx? (unspecified)) (set! cib3e@stx-expr (unspecified)) (set! cib40@set-stx-expr! (unspecified)) (set! cib42@stx-mark* (unspecified)) (set! cib44@set-stx-mark*! (unspecified)) (set! cib46@stx-subst* (unspecified)) (set! cib48@set-stx-subst*! (unspecified)) (set! cib4a@stx-ae* (unspecified)) (set! cib4c@set-stx-ae*! (unspecified)) (set! cib4e@dummy (unspecified)) (set! cib50@datum->stx (unspecified)) (set! cib52@gen-mark (unspecified)) (set! cib54@anti-mark (unspecified)) (set! cib56@anti-mark? (unspecified)) (set! cib58@mkstx (unspecified)) (set! cib5a@add-mark (unspecified)) (set! cib5c@add-subst (unspecified)) (set! cib5e@syntax-kind? (unspecified)) (set! cib60@syntax-vector->list (unspecified)) (set! cib62@syntax-pair? (unspecified)) (set! cib64@syntax-vector? (unspecified)) (set! cib66@syntax-null? (unspecified)) (set! cib68@syntax-list? (unspecified)) (set! cib6a@syntax-car (unspecified)) (set! cib6c@syntax-cdr (unspecified)) (set! cib6e@syntax->list (unspecified)) (set! cib70@id? (unspecified)) (set! cib72@id->sym (unspecified)) (set! cib74@bound-id=? (unspecified)) (set! cib76@free-id=? (unspecified)) (set! cib78@valid-bound-ids? (unspecified)) (set! cib7a@distinct-bound-ids? (unspecified)) (set! cib7c@bound-id-member? (unspecified)) (set! cib7e@self-evaluating? (unspecified)) (set! cib80@strip-annotations (unspecified)) (set! cib82@strip (unspecified)) (set! cib84@stx->datum (unspecified)) (set! cib86@id->label (unspecified)) (set! cib88@label->binding (unspecified)) (set! cib8a@make-binding (unspecified)) (set! cib8c@binding-type (unspecified)) (set! cib8e@binding-value (unspecified)) (set! cib90@raise-unbound-error (unspecified)) (set! cib92@syntax-type (unspecified)) (set! ciba0@sanitize-binding (unspecified)) (set! ciba2@make-variable-transformer (unspecified)) (set! ciba4@variable-transformer? (unspecified)) (set! ciba6@variable-transformer-procedure (unspecified)) (set! ciba8@make-eval-transformer (unspecified)) (set! cicf9@parse-define (unspecified)) (set! cicfb@parse-define-syntax (unspecified)) (set! cicfd@scheme-stx-hashtable (unspecified)) (set! cicff@scheme-stx (unspecified)) (set! cid01@lexical-var (unspecified)) (set! cid03@lexical-mutable? (unspecified)) (set! cid05@set-lexical-mutable! (unspecified)) (set! cid07@add-lexical (unspecified)) (set! cid09@add-lexicals (unspecified)) (set! cid0b@letrec-helper (unspecified)) (set! cid0d@let-transformer (unspecified)) (set! cid0f@letrec-transformer (unspecified)) (set! cid11@letrec*-transformer (unspecified)) (set! cid13@fluid-let-syntax-transformer (unspecified)) (set! cid15@type-descriptor-transformer (unspecified)) (set! cid17@record-type-descriptor-transformer (unspecified)) (set! cid19@record-constructor-descriptor-transformer (unspecified)) (set! cid1b@when-macro (unspecified)) (set! cid1d@unless-macro (unspecified)) (set! cid1f@if-transformer (unspecified)) (set! cid21@and-transformer (unspecified)) (set! cid23@or-transformer (unspecified)) (set! cid25@case-macro (unspecified)) (set! cid27@quote-transformer (unspecified)) (set! cid29@case-lambda-transformer (unspecified)) (set! cid2b@lambda-transformer (unspecified)) (set! cid2d@bless (unspecified)) (set! cid2f@with-syntax-macro (unspecified)) (set! cid31@invalid-fmls-error (unspecified)) (set! cid33@let-macro (unspecified)) (set! cid35@let-values-macro (unspecified)) (set! cid37@let*-values-macro (unspecified)) (set! cid39@trace-lambda-macro (unspecified)) (set! cid3b@trace-define-macro (unspecified)) (set! cid3d@trace-define-syntax-macro (unspecified)) (set! cid3f@trace-let/rec-syntax (unspecified)) (set! cid41@trace-let-syntax-macro (unspecified)) (set! cid43@trace-letrec-syntax-macro (unspecified)) (set! cid45@guard-macro (unspecified)) (set! cid47@define-enumeration-macro (unspecified)) (set! cid49@time-macro (unspecified)) (set! cid4b@delay-macro (unspecified)) (set! cid4d@assert-macro (unspecified)) (set! cid4f@endianness-macro (unspecified)) (set! cid51@identifier-syntax-macro (unspecified)) (set! cid53@do-macro (unspecified)) (set! cid55@let*-macro (unspecified)) (set! cid57@or-macro (unspecified)) (set! cid59@and-macro (unspecified)) (set! cid5b@cond-macro (unspecified)) (set! cid5d@do-include (unspecified)) (set! cid5f@include-macro (unspecified)) (set! cid61@include-into-macro (unspecified)) (set! cid63@syntax-rules-macro (unspecified)) (set! cid65@quasiquote-macro (unspecified)) (set! cid67@quasisyntax-macro (unspecified)) (set! cid69@define-struct-macro (unspecified)) (set! cid6b@define-record-type-macro (unspecified)) (set! cid6d@define-condition-type-macro (unspecified)) (set! cid6f@incorrect-usage-macro (unspecified)) (set! cid71@parameterize-macro (unspecified)) (set! cid73@foreign-call-transformer (unspecified)) (set! cid75@convert-pattern (unspecified)) (set! cid77@syntax-dispatch (unspecified)) (set! cid79@ellipsis? (unspecified)) (set! cid7b@underscore? (unspecified)) (set! cid7d@verify-literals (unspecified)) (set! cid7f@syntax-case-transformer (unspecified)) (set! cid81@ellipsis-map (unspecified)) (set! cid83@syntax-transformer (unspecified)) (set! cid85@core-macro-transformer (unspecified)) (set! cid87@symbol-macro (unspecified)) (set! cid89@macro-transformer (unspecified)) (set! cid8b@local-macro-transformer (unspecified)) (set! cid8d@do-macro-call (unspecified)) (set! cid8f@chi-macro (unspecified)) (set! cid91@chi-local-macro (unspecified)) (set! cid93@chi-global-macro (unspecified)) (set! cid95@chi-expr* (unspecified)) (set! cid97@chi-application (unspecified)) (set! cid99@chi-expr (unspecified)) (set! cid9b@chi-set! (unspecified)) (set! cid9d@verify-formals (unspecified)) (set! cid9f@chi-lambda-clause (unspecified)) (set! cida1@chi-lambda-clause* (unspecified)) (set! cida3@chi-defun (unspecified)) (set! cida5@chi-rhs (unspecified)) (set! cida7@expand-interaction-rhs*/init* (unspecified)) (set! cida9@chi-rhs* (unspecified)) (set! cidab@find-bound=? (unspecified)) (set! cidad@find-dups (unspecified)) (set! cidaf@chi-internal (unspecified)) (set! cidb1@parse-module (unspecified)) (set! cidbb@module-interface? (unspecified)) (set! cidbd@module-interface-first-mark (unspecified)) (set! cidbf@set-module-interface-first-mark! (unspecified)) (set! cidc1@module-interface-exp-id-vec (unspecified)) (set! cidc3@set-module-interface-exp-id-vec! (unspecified)) (set! cidc5@module-interface-exp-lab-vec (unspecified)) (set! cidc7@set-module-interface-exp-lab-vec! (unspecified)) (set! cidc9@dummy (unspecified)) (set! cidcb@module-interface-exp-id* (unspecified)) (set! cidcd@chi-internal-module (unspecified)) (set! cidcf@chi-body* (unspecified)) (set! cidd1@expand-transformer (unspecified)) (set! cidd3@parse-exports (unspecified)) (set! cidd5@parse-library-name (unspecified)) (set! cidd7@parse-library (unspecified)) (set! cidd9@parse-import-spec* (unspecified)) (set! ciddb@make-top-rib (unspecified)) (set! ciddd@make-collector (unspecified)) (set! ciddf@inv-collector (unspecified)) (set! cide1@vis-collector (unspecified)) (set! cide3@imp-collector (unspecified)) (set! cide5@chi-library-internal (unspecified)) (set! cide7@chi-interaction-expr (unspecified)) (set! cide9@library-body-expander (unspecified)) (set! cideb@core-library-expander (unspecified)) (set! cided@parse-top-level-program (unspecified)) (set! cidef@top-level-expander (unspecified)) (set! cidf1@rp (unspecified)) (set! cidfb@env? (unspecified)) (set! cidfd@env-names (unspecified)) (set! cidff@set-env-names! (unspecified)) (set! cie01@env-labels (unspecified)) (set! cie03@set-env-labels! (unspecified)) (set! cie05@env-itc (unspecified)) (set! cie07@set-env-itc! (unspecified)) (set! cie09@dummy (unspecified)) (set! cie0b@rp (unspecified)) (set! cie15@interaction-env? (unspecified)) (set! cie17@interaction-env-rib (unspecified)) (set! cie19@set-interaction-env-rib! (unspecified)) (set! cie1b@interaction-env-r (unspecified)) (set! cie1d@set-interaction-env-r! (unspecified)) (set! cie1f@interaction-env-locs (unspecified)) (set! cie21@set-interaction-env-locs! (unspecified)) (set! cie23@dummy (unspecified)) (set! cie25@interaction-environment-symbols (unspecified)) (set! cie27@environment-bindings (unspecified)) (set! cie29@parse-binding (unspecified)) (set! cie2b@environment? (unspecified)) (set! cie2d@environment-symbols (unspecified)) (set! cie2f@environment (unspecified)) (set! cie31@null-environment (unspecified)) (set! cie33@scheme-report-environment (unspecified)) (set! cie35@expand (unspecified)) (set! cie37@eval (unspecified)) (set! cie39@library-expander (unspecified)) (set! cie3b@boot-library-expand (unspecified)) (set! cie3d@rev-map-append (unspecified)) (set! cie3f@build-exports (unspecified)) (set! cie41@make-export-subst (unspecified)) (set! cie43@make-export-env/macros (unspecified)) (set! cie45@generate-temporaries (unspecified)) (set! cie47@free-identifier=? (unspecified)) (set! cie49@bound-identifier=? (unspecified)) (set! cie4b@make-source-condition (unspecified)) (set! cie4d@extract-position-condition (unspecified)) (set! cie4f@expression-position (unspecified)) (set! cie51@assertion-error (unspecified)) (set! cie53@syntax-error (unspecified)) (set! cie55@syntax-violation* (unspecified)) (set! cie57@syntax-violation (unspecified)) (set! cie59@identifier? (unspecified)) (set! cie5b@datum->syntax (unspecified)) (set! cie5d@syntax->datum (unspecified)) (set! cie5f@ungensym-all (unspecified)) (set! cie61@compile-r6rs-top-level (unspecified)) (set! cie63@pre-compile-r6rs-top-level (unspecified)) (set! cie65@interaction-environment (unspecified)) (set! cie67@top-level-context (unspecified)) (set! ciaeb@file-options-macro (lambda (cie68@x) (letrec* ((cie6b@valid-option? (lambda (cie74@x) (and (cib70@id? cie74@x) (memq (cib72@id->sym cie74@x) '(no-fail no-create no-truncate)))))) (let ((cie6c@t cie68@x)) (let ((cie6e@ls/false (cid77@syntax-dispatch cie6c@t '(_ . each-any)))) (if (and cie6e@ls/false (apply (lambda (cie70@opt*) (for-all cie6b@valid-option? cie70@opt*)) cie6e@ls/false)) (apply (lambda (cie72@opt*) (cid2d@bless (list 'make-file-options (list 'quote cie72@opt*)))) cie6e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" cie6c@t))))))) (set! ci27be@ciaeb@file-options-macro ciaeb@file-options-macro) (set! ciaed@set-cons (lambda (cie76@x cie77@ls) (if (memq cie76@x cie77@ls) cie77@ls (cons cie76@x cie77@ls)))) (set! ci27bf@ciaed@set-cons ciaed@set-cons) (set! ciaef@set-union (lambda (cie7a@ls1 cie7b@ls2) (if (null? cie7a@ls1) cie7b@ls2 (if (memq (car cie7a@ls1) cie7b@ls2) (ciaef@set-union (cdr cie7a@ls1) cie7b@ls2) (cons (car cie7a@ls1) (ciaef@set-union (cdr cie7a@ls1) cie7b@ls2)))))) (set! ci27c0@ciaef@set-union ciaef@set-union) (set! ciaf4@top-mark* '(top)) (set! ci27c1@ciaf4@top-mark* ciaf4@top-mark*) (set! ciaf6@top-marked? (lambda (cie7e@m*) (memq 'top cie7e@m*))) (set! ci27c2@ciaf6@top-marked? ciaf6@top-marked?) (set! ciaf8@gen-lexical (lambda (cie80@sym) (if (symbol? cie80@sym) (gensym cie80@sym) (if (cib3c@stx? cie80@sym) (ciaf8@gen-lexical (cib72@id->sym cie80@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" cie80@sym))))) (set! ci27c3@ciaf8@gen-lexical ciaf8@gen-lexical) (set! ciafa@gen-global (lambda (cie82@x) (ciaf8@gen-lexical cie82@x))) (set! ci27c4@ciafa@gen-global ciafa@gen-global) (set! ciafc@gen-label (lambda (cie84@_) (gensym))) (set! ci27c5@ciafc@gen-label ciafc@gen-label) (set! ciafe@gen-top-level-label (lambda (cie86@id cie87@rib) (letrec* ((cie8b@find (lambda (cie96@sym cie97@mark* cie98@sym* cie99@mark** cie9a@label*) (and (pair? cie98@sym*) (if (and (eq? cie96@sym (car cie98@sym*)) (same-marks? cie97@mark* (car cie99@mark**))) (car cie9a@label*) (cie8b@find cie96@sym cie97@mark* (cdr cie98@sym*) (cdr cie99@mark**) (cdr cie9a@label*))))))) (let ((cie8c@sym (cib72@id->sym cie86@id)) (cie8d@mark* (cib42@stx-mark* cie86@id))) (let ((cie90@sym* (cib0e@rib-sym* cie87@rib))) (let ((cie92@t (and (memq cie8c@sym (cib0e@rib-sym* cie87@rib)) (cie8b@find cie8c@sym cie8d@mark* cie90@sym* (cib12@rib-mark** cie87@rib) (cib16@rib-label* cie87@rib))))) (if cie92@t ((lambda (cie94@label) (if (ci98b@ci7d8@imported-label->binding cie94@label) (gensym) cie94@label)) cie92@t) (gensym)))))))) (set! ci27c6@ciafe@gen-top-level-label ciafe@gen-top-level-label) (set! cib00@gen-define-label+loc (lambda (ciea0@id ciea1@rib) (let ((ciea4@t (cie67@top-level-context))) (if ciea4@t ((lambda (ciea6@env) (let ((ciea8@label (ciafe@gen-top-level-label ciea0@id ciea1@rib)) (ciea9@locs (cie1f@interaction-env-locs ciea6@env))) (values ciea8@label (let ((cieac@t (assq ciea8@label ciea9@locs))) (if cieac@t (cdr cieac@t) (let ((cieae@loc (ciaf8@gen-lexical ciea0@id))) (begin (cie21@set-interaction-env-locs! ciea6@env (cons (cons ciea8@label cieae@loc) ciea9@locs)) cieae@loc))))))) ciea4@t) (values (gensym) (ciaf8@gen-lexical ciea0@id)))))) (set! ci27c7@cib00@gen-define-label+loc cib00@gen-define-label+loc) (set! cib02@gen-define-label (lambda (cieb0@id cieb1@rib) (if (cie67@top-level-context) (ciafe@gen-top-level-label cieb0@id cieb1@rib) (gensym)))) (set! ci27c8@cib02@gen-define-label cib02@gen-define-label) (set! cib0c@rib? (lambda (cieb4@x) (and (simple-struct? cieb4@x) (eq? (simple-struct-name cieb4@x) 'rib)))) (set! ci27c9@cib0c@rib? cib0c@rib?) (set! cib0e@rib-sym* (lambda (cieb6@x) (simple-struct-ref cieb6@x '0))) (set! ci27ca@cib0e@rib-sym* cib0e@rib-sym*) (set! cib10@set-rib-sym*! (lambda (cieb8@x cieb9@val) (simple-struct-set! cieb8@x '0 cieb9@val))) (set! ci27cb@cib10@set-rib-sym*! cib10@set-rib-sym*!) (set! cib12@rib-mark** (lambda (ciebc@x) (simple-struct-ref ciebc@x '1))) (set! ci27cc@cib12@rib-mark** cib12@rib-mark**) (set! cib14@set-rib-mark**! (lambda (ciebe@x ciebf@val) (simple-struct-set! ciebe@x '1 ciebf@val))) (set! ci27cd@cib14@set-rib-mark**! cib14@set-rib-mark**!) (set! cib16@rib-label* (lambda (ciec2@x) (simple-struct-ref ciec2@x '2))) (set! ci27ce@cib16@rib-label* cib16@rib-label*) (set! cib18@set-rib-label*! (lambda (ciec4@x ciec5@val) (simple-struct-set! ciec4@x '2 ciec5@val))) (set! ci27cf@cib18@set-rib-label*! cib18@set-rib-label*!) (set! cib1a@rib-sealed/freq (lambda (ciec8@x) (simple-struct-ref ciec8@x '3))) (set! ci27d0@cib1a@rib-sealed/freq cib1a@rib-sealed/freq) (set! cib1c@set-rib-sealed/freq! (lambda (cieca@x ciecb@val) (simple-struct-set! cieca@x '3 ciecb@val))) (set! ci27d1@cib1c@set-rib-sealed/freq! cib1c@set-rib-sealed/freq!) (set! cib1e@rib-cache (lambda (ciece@x) (simple-struct-ref ciece@x '4))) (set! ci27d2@cib1e@rib-cache cib1e@rib-cache) (set! cib20@set-rib-cache! (lambda (cied0@x cied1@val) (simple-struct-set! cied0@x '4 cied1@val))) (set! ci27d3@cib20@set-rib-cache! cib20@set-rib-cache!) (set! cib22@dummy '3) (set! ci27d4@cib22@dummy cib22@dummy) (set! cib24@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! ci27d5@cib24@make-empty-rib cib24@make-empty-rib) (set! cib26@extend-rib! (lambda (cied4@rib cied5@id cied6@label) (letrec* ((ciedb@find (lambda (ciee8@sym ciee9@mark* cieea@sym* cieeb@mark** cieec@label*) (and (pair? cieea@sym*) (if (and (eq? ciee8@sym (car cieea@sym*)) (same-marks? ciee9@mark* (car cieeb@mark**))) cieec@label* (ciedb@find ciee8@sym ciee9@mark* (cdr cieea@sym*) (cdr cieeb@mark**) (cdr cieec@label*))))))) (begin (if (cib1a@rib-sealed/freq cied4@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" cied4@rib) (void)) (let ((ciedc@sym (cib72@id->sym cied5@id)) (ciedd@mark* (cib42@stx-mark* cied5@id))) (let ((ciee0@sym* (cib0e@rib-sym* cied4@rib))) (let ((ciee2@t (and (memq ciedc@sym (cib0e@rib-sym* cied4@rib)) (ciedb@find ciedc@sym ciedd@mark* ciee0@sym* (cib12@rib-mark** cied4@rib) (cib16@rib-label* cied4@rib))))) (if ciee2@t ((lambda (ciee4@p) (if (not (eq? cied6@label (car ciee4@p))) (if (cie67@top-level-context) (set-car! ciee4@p cied6@label) (cie57@syntax-violation '#f '"multiple definitions of identifier" cied5@id)) (void))) ciee2@t) (begin (if (cib1e@rib-cache cied4@rib) (hashtable-update! (cib1e@rib-cache cied4@rib) ciedc@sym (lambda (ciee6@e) (cons (cons ciedd@mark* cied6@label) ciee6@e)) '()) (void)) (cib10@set-rib-sym*! cied4@rib (cons ciedc@sym ciee0@sym*)) (cib14@set-rib-mark**! cied4@rib (cons ciedd@mark* (cib12@rib-mark** cied4@rib))) (cib18@set-rib-label*! cied4@rib (cons cied6@label (cib16@rib-label* cied4@rib)))))))))))) (set! ci27d6@cib26@extend-rib! cib26@extend-rib!) (set! cib28@extend-rib/nc! (lambda (cief2@rib cief3@id cief4@label) (let ((cief8@sym (cib72@id->sym cief3@id)) (cief9@mark* (cib42@stx-mark* cief3@id))) (let ((ciefc@sym* (cib0e@rib-sym* cief2@rib))) (begin (if (cib1e@rib-cache cief2@rib) (hashtable-update! (cib1e@rib-cache cief2@rib) cief8@sym (lambda (ciefe@e) (cons (cons cief9@mark* cief4@label) ciefe@e)) '()) (void)) (cib10@set-rib-sym*! cief2@rib (cons cief8@sym ciefc@sym*)) (cib14@set-rib-mark**! cief2@rib (cons cief9@mark* (cib12@rib-mark** cief2@rib))) (cib18@set-rib-label*! cief2@rib (cons cief4@label (cib16@rib-label* cief2@rib)))))))) (set! ci27d7@cib28@extend-rib/nc! cib28@extend-rib/nc!) (set! cib2a@make-rib-map (lambda (cif00@sym*) (let ((cif02@ht (make-eq-hashtable))) (let cif08@f ((cif04@i '0) (cif05@sym* cif00@sym*)) (if (null? cif05@sym*) cif02@ht (begin (hashtable-update! cif02@ht (car cif05@sym*) (lambda (cif0a@x) (cons cif04@i cif0a@x)) '()) (cif08@f (+ cif04@i '1) (cdr cif05@sym*)))))))) (set! ci27d8@cib2a@make-rib-map cib2a@make-rib-map) (set! cib2c@seal-rib! (lambda (cif0c@rib) (let ((cif0e@sym* (cib0e@rib-sym* cif0c@rib))) (if (not (null? cif0e@sym*)) (begin (cib10@set-rib-sym*! cif0c@rib (list->vector cif0e@sym*)) (cib14@set-rib-mark**! cif0c@rib (list->vector (cib12@rib-mark** cif0c@rib))) (cib18@set-rib-label*! cif0c@rib (list->vector (cib16@rib-label* cif0c@rib))) (cib1c@set-rib-sealed/freq! cif0c@rib (cib2a@make-rib-map cif0e@sym*))) (void))))) (set! ci27d9@cib2c@seal-rib! cib2c@seal-rib!) (set! cib2e@unseal-rib! (lambda (cif10@rib) (if (cib1a@rib-sealed/freq cif10@rib) (begin (cib1c@set-rib-sealed/freq! cif10@rib '#f) (cib10@set-rib-sym*! cif10@rib (vector->list (cib0e@rib-sym* cif10@rib))) (cib14@set-rib-mark**! cif10@rib (vector->list (cib12@rib-mark** cif10@rib))) (cib18@set-rib-label*! cif10@rib (vector->list (cib16@rib-label* cif10@rib)))) (void)))) (set! ci27da@cib2e@unseal-rib! cib2e@unseal-rib!) (set! cib30@make-full-rib (lambda (cif12@id* cif13@label*) (let ((cif16@r (make-simple-struct 'rib '6 (list (map cib72@id->sym cif12@id*) (map cib42@stx-mark* cif12@id*) cif13@label* '#f '#f)))) (begin (cib2c@seal-rib! cif16@r) cif16@r)))) (set! ci27db@cib30@make-full-rib cib30@make-full-rib) (set! cib32@rp (ci6bd@ci598@make-record-printer 'stx (lambda (cif18@x cif19@p cif1a@wr) (begin (display '"#<syntax " cif19@p) (write (cib84@stx->datum cif18@x) cif19@p) (let ((cif1e@expr (cib3e@stx-expr cif18@x))) (if (ci6b4@ci586@annotation? cif1e@expr) (let ((cif20@src (ci6b5@ci588@annotation-source cif1e@expr))) (if (pair? cif20@src) (begin (display '" [" cif19@p) (display (cdr cif20@src) cif19@p) (display '" of " cif19@p) (display (car cif20@src) cif19@p) (display '"]" cif19@p)) (void))) (void))) (display '">" cif19@p))))) (set! ci27dc@cib32@rp cib32@rp) (set! cib3c@stx? (lambda (cif22@x) (and (simple-struct? cif22@x) (eq? (simple-struct-name cif22@x) 'stx)))) (set! ci27dd@cib3c@stx? cib3c@stx?) (set! cib3e@stx-expr (lambda (cif24@x) (simple-struct-ref cif24@x '0))) (set! ci27de@cib3e@stx-expr cib3e@stx-expr) (set! cib40@set-stx-expr! (lambda (cif26@x cif27@val) (simple-struct-set! cif26@x '0 cif27@val))) (set! ci27df@cib40@set-stx-expr! cib40@set-stx-expr!) (set! cib42@stx-mark* (lambda (cif2a@x) (simple-struct-ref cif2a@x '1))) (set! ci27e0@cib42@stx-mark* cib42@stx-mark*) (set! cib44@set-stx-mark*! (lambda (cif2c@x cif2d@val) (simple-struct-set! cif2c@x '1 cif2d@val))) (set! ci27e1@cib44@set-stx-mark*! cib44@set-stx-mark*!) (set! cib46@stx-subst* (lambda (cif30@x) (simple-struct-ref cif30@x '2))) (set! ci27e2@cib46@stx-subst* cib46@stx-subst*) (set! cib48@set-stx-subst*! (lambda (cif32@x cif33@val) (simple-struct-set! cif32@x '2 cif33@val))) (set! ci27e3@cib48@set-stx-subst*! cib48@set-stx-subst*!) (set! cib4a@stx-ae* (lambda (cif36@x) (simple-struct-ref cif36@x '3))) (set! ci27e4@cib4a@stx-ae* cib4a@stx-ae*) (set! cib4c@set-stx-ae*! (lambda (cif38@x cif39@val) (simple-struct-set! cif38@x '3 cif39@val))) (set! ci27e5@cib4c@set-stx-ae*! cib4c@set-stx-ae*!) (set! cib4e@dummy '3) (set! ci27e6@cib4e@dummy cib4e@dummy) (set! cib50@datum->stx (lambda (cif3c@id cif3d@datum) (make-simple-struct 'stx '5 (list cif3d@datum (cib42@stx-mark* cif3c@id) (cib46@stx-subst* cif3c@id) (cib4a@stx-ae* cif3c@id))))) (set! ci27e7@cib50@datum->stx cib50@datum->stx) (set! cib52@gen-mark (lambda () (string '#\m))) (set! ci27e8@cib52@gen-mark cib52@gen-mark) (set! cib54@anti-mark '#f) (set! ci27e9@cib54@anti-mark cib54@anti-mark) (set! cib56@anti-mark? not) (set! ci27ea@cib56@anti-mark? cib56@anti-mark?) (set! cib58@mkstx (lambda (cif40@e cif41@m* cif42@s* cif43@ae*) (if (and (cib3c@stx? cif40@e) (not (ciaf6@top-marked? cif41@m*))) (call-with-values (lambda () (join-wraps cif41@m* cif42@s* cif43@ae* cif40@e)) (lambda (cif4e@cif49 cif4f@cif4b cif50@cif4d) (let ((cif54@ae* cif50@cif4d) (cif55@s* cif4f@cif4b) (cif56@m* cif4e@cif49)) (make-simple-struct 'stx '5 (list (cib3e@stx-expr cif40@e) cif56@m* cif55@s* cif54@ae*))))) (make-simple-struct 'stx '5 (list cif40@e cif41@m* cif42@s* cif43@ae*))))) (set! ci27eb@cib58@mkstx cib58@mkstx) (set! cib5a@add-mark (lambda (cif5a@m cif5b@e cif5c@ae) (cib58@mkstx cif5b@e (list cif5a@m) '(shift) (list cif5c@ae)))) (set! ci27ec@cib5a@add-mark cib5a@add-mark) (set! cib5c@add-subst (lambda (cif60@subst cif61@e) (cib58@mkstx cif61@e '() (list cif60@subst) '()))) (set! ci27ed@cib5c@add-subst cib5c@add-subst) (set! cib5e@syntax-kind? (lambda (cif64@x cif65@p?) (if (cib3c@stx? cif64@x) (cib5e@syntax-kind? (cib3e@stx-expr cif64@x) cif65@p?) (if (ci6b4@ci586@annotation? cif64@x) (cib5e@syntax-kind? (ci6b6@ci58a@annotation-expression cif64@x) cif65@p?) (cif65@p? cif64@x))))) (set! ci27ee@cib5e@syntax-kind? cib5e@syntax-kind?) (set! cib60@syntax-vector->list (lambda (cif68@x) (if (cib3c@stx? cif68@x) (let ((cif6a@ls (cib60@syntax-vector->list (cib3e@stx-expr cif68@x))) (cif6b@m* (cib42@stx-mark* cif68@x)) (cif6c@s* (cib46@stx-subst* cif68@x)) (cif6d@ae* (cib4a@stx-ae* cif68@x))) (map (lambda (cif72@x) (cib58@mkstx cif72@x cif6b@m* cif6c@s* cif6d@ae*)) cif6a@ls)) (if (ci6b4@ci586@annotation? cif68@x) (cib60@syntax-vector->list (ci6b6@ci58a@annotation-expression cif68@x)) (if (vector? cif68@x) (vector->list cif68@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" cif68@x)))))) (set! ci27ef@cib60@syntax-vector->list cib60@syntax-vector->list) (set! cib62@syntax-pair? (lambda (cif74@x) (cib5e@syntax-kind? cif74@x pair?))) (set! ci27f0@cib62@syntax-pair? cib62@syntax-pair?) (set! cib64@syntax-vector? (lambda (cif76@x) (cib5e@syntax-kind? cif76@x vector?))) (set! ci27f1@cib64@syntax-vector? cib64@syntax-vector?) (set! cib66@syntax-null? (lambda (cif78@x) (cib5e@syntax-kind? cif78@x null?))) (set! ci27f2@cib66@syntax-null? cib66@syntax-null?) (set! cib68@syntax-list? (lambda (cif7a@x) (or (cib66@syntax-null? cif7a@x) (and (cib62@syntax-pair? cif7a@x) (cib68@syntax-list? (cib6c@syntax-cdr cif7a@x)))))) (set! ci27f3@cib68@syntax-list? cib68@syntax-list?) (set! cib6a@syntax-car (lambda (cif7c@x) (if (cib3c@stx? cif7c@x) (cib58@mkstx (cib6a@syntax-car (cib3e@stx-expr cif7c@x)) (cib42@stx-mark* cif7c@x) (cib46@stx-subst* cif7c@x) (cib4a@stx-ae* cif7c@x)) (if (ci6b4@ci586@annotation? cif7c@x) (cib6a@syntax-car (ci6b6@ci58a@annotation-expression cif7c@x)) (if (pair? cif7c@x) (car cif7c@x) (assertion-violation 'syntax-car '"BUG: not a pair" cif7c@x)))))) (set! ci27f4@cib6a@syntax-car cib6a@syntax-car) (set! cib6c@syntax-cdr (lambda (cif7e@x) (if (cib3c@stx? cif7e@x) (cib58@mkstx (cib6c@syntax-cdr (cib3e@stx-expr cif7e@x)) (cib42@stx-mark* cif7e@x) (cib46@stx-subst* cif7e@x) (cib4a@stx-ae* cif7e@x)) (if (ci6b4@ci586@annotation? cif7e@x) (cib6c@syntax-cdr (ci6b6@ci58a@annotation-expression cif7e@x)) (if (pair? cif7e@x) (cdr cif7e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" cif7e@x)))))) (set! ci27f5@cib6c@syntax-cdr cib6c@syntax-cdr) (set! cib6e@syntax->list (lambda (cif80@x) (if (cib62@syntax-pair? cif80@x) (cons (cib6a@syntax-car cif80@x) (cib6e@syntax->list (cib6c@syntax-cdr cif80@x))) (if (cib66@syntax-null? cif80@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" cif80@x))))) (set! ci27f6@cib6e@syntax->list cib6e@syntax->list) (set! cib70@id? (lambda (cif82@x) (and (cib3c@stx? cif82@x) (symbol? (cib3e@stx-expr cif82@x))))) (set! ci27f7@cib70@id? cib70@id?) (set! cib72@id->sym (lambda (cif84@x) (cib3e@stx-expr cif84@x))) (set! ci27f8@cib72@id->sym cib72@id->sym) (set! cib74@bound-id=? (lambda (cif86@x cif87@y) (and (eq? (cib72@id->sym cif86@x) (cib72@id->sym cif87@y)) (same-marks? (cib42@stx-mark* cif86@x) (cib42@stx-mark* cif87@y))))) (set! ci27f9@cib74@bound-id=? cib74@bound-id=?) (set! cib76@free-id=? (lambda (cif8a@i cif8b@j) (let ((cif8e@t0 (id->real-label cif8a@i)) (cif8f@t1 (id->real-label cif8b@j))) (if (or cif8e@t0 cif8f@t1) (eq? cif8e@t0 cif8f@t1) (eq? (cib72@id->sym cif8a@i) (cib72@id->sym cif8b@j)))))) (set! ci27fa@cib76@free-id=? cib76@free-id=?) (set! cib78@valid-bound-ids? (lambda (cif92@id*) (and (for-all cib70@id? cif92@id*) (cib7a@distinct-bound-ids? cif92@id*)))) (set! ci27fb@cib78@valid-bound-ids? cib78@valid-bound-ids?) (set! cib7a@distinct-bound-ids? (lambda (cif94@id*) (or (null? cif94@id*) (and (not (cib7c@bound-id-member? (car cif94@id*) (cdr cif94@id*))) (cib7a@distinct-bound-ids? (cdr cif94@id*)))))) (set! ci27fc@cib7a@distinct-bound-ids? cib7a@distinct-bound-ids?) (set! cib7c@bound-id-member? (lambda (cif96@id cif97@id*) (and (pair? cif97@id*) (or (cib74@bound-id=? cif96@id (car cif97@id*)) (cib7c@bound-id-member? cif96@id (cdr cif97@id*)))))) (set! ci27fd@cib7c@bound-id-member? cib7c@bound-id-member?) (set! cib7e@self-evaluating? (lambda (cif9a@x) (or (number? cif9a@x) (string? cif9a@x) (char? cif9a@x) (boolean? cif9a@x) (regexp? cif9a@x) (bytevector? cif9a@x)))) (set! ci27fe@cib7e@self-evaluating? cib7e@self-evaluating?) (set! cib80@strip-annotations (lambda (cif9c@x) (if (pair? cif9c@x) (cons (cib80@strip-annotations (car cif9c@x)) (cib80@strip-annotations (cdr cif9c@x))) (if (vector? cif9c@x) (vector-map cib80@strip-annotations cif9c@x) (if (ci6b4@ci586@annotation? cif9c@x) (ci6b3@ci584@annotation-stripped cif9c@x) cif9c@x))))) (set! ci27ff@cib80@strip-annotations cib80@strip-annotations) (set! cib82@strip (lambda (cif9e@x cif9f@m*) (if (ciaf6@top-marked? cif9f@m*) (if (or (ci6b4@ci586@annotation? cif9e@x) (and (pair? cif9e@x) (ci6b4@ci586@annotation? (car cif9e@x))) (and (vector? cif9e@x) (> (vector-length cif9e@x) '0) (ci6b4@ci586@annotation? (vector-ref cif9e@x '0)))) (cib80@strip-annotations cif9e@x) cif9e@x) (let cifa4@f ((cifa2@x cif9e@x)) (if (cib3c@stx? cifa2@x) (begin (if (pair? (cib3e@stx-expr cifa2@x)) (begin (set-source-info! (cib3e@stx-expr cifa2@x) '#f) (set-source-info! (cdr (cib3e@stx-expr cifa2@x)) '#f) (set-source-info! (car (cib3e@stx-expr cifa2@x)) '#f)) (void)) (cib82@strip (cib3e@stx-expr cifa2@x) (cib42@stx-mark* cifa2@x))) (if (ci6b4@ci586@annotation? cifa2@x) (ci6b3@ci584@annotation-stripped cifa2@x) (if (pair? cifa2@x) (let ((cifa6@a (cifa4@f (car cifa2@x))) (cifa7@d (cifa4@f (cdr cifa2@x)))) (if (and (eq? cifa6@a (car cifa2@x)) (eq? cifa7@d (cdr cifa2@x))) cifa2@x (cons cifa6@a cifa7@d))) (if (vector? cifa2@x) (let ((cifaa@old (vector->list cifa2@x))) (let ((cifac@new (map cifa4@f cifaa@old))) (if (for-all eq? cifaa@old cifac@new) cifa2@x (list->vector cifac@new)))) cifa2@x)))))))) (set! ci2800@cib82@strip cib82@strip) (set! cib84@stx->datum (lambda (cifae@x) (cib82@strip cifae@x '()))) (set! ci2801@cib84@stx->datum cib84@stx->datum) (set! cib86@id->label (lambda (cifb0@id) (or (id->real-label cifb0@id) (let ((cifb2@t (cie67@top-level-context))) (if cifb2@t ((lambda (cifb4@env) (let ((cifb6@rib (cie17@interaction-env-rib cifb4@env))) (call-with-values (lambda () (cib00@gen-define-label+loc cifb0@id cifb6@rib)) (lambda (cifbc@cifb9 cifbd@cifbb) (let ((cifc0@loc_ cifbd@cifbb) (cifc1@lab cifbc@cifb9)) (begin (cib26@extend-rib! cifb6@rib cifb0@id cifc1@lab) cifc1@lab)))))) cifb2@t) '#f))))) (set! ci2802@cib86@id->label cib86@id->label) (set! cib88@label->binding (lambda (cifc4@x cifc5@r) (let ((cifc8@t (ci98b@ci7d8@imported-label->binding cifc4@x))) (if cifc8@t ((lambda (cifca@b) (if (and (pair? cifca@b) (eq? (car cifca@b) '$core-rtd)) (cons '$rtd (map cid2d@bless (cdr cifca@b))) (if (and (pair? cifca@b) (eq? (car cifca@b) 'global-rtd)) (let ((cifcc@lib (cadr cifca@b)) (cifcd@loc (cddr cifca@b))) (cons '$rtd (symbol-value cifcd@loc))) cifca@b))) cifc8@t) (let ((cifd0@t (assq cifc4@x cifc5@r))) (if cifd0@t (cdr cifd0@t) (let ((cifd2@t (cie67@top-level-context))) (if cifd2@t ((lambda (cifd4@env) (let ((cifd6@t (assq cifc4@x (cie1f@interaction-env-locs cifd4@env)))) (if cifd6@t ((lambda (cifd8@p) (cons* 'lexical (cdr cifd8@p) '#f)) cifd6@t) '(displaced-lexical . #f)))) cifd2@t) '(displaced-lexical . #f))))))))) (set! ci2803@cib88@label->binding cib88@label->binding) (set! cib8a@make-binding cons) (set! ci2804@cib8a@make-binding cib8a@make-binding) (set! cib8c@binding-type car) (set! ci2805@cib8c@binding-type cib8c@binding-type) (set! cib8e@binding-value cdr) (set! ci2806@cib8e@binding-value cib8e@binding-value) (set! cib90@raise-unbound-error (lambda (cifda@id) (cie55@syntax-violation* '#f '"unbound identifier" cifda@id (make-undefined-violation)))) (set! ci2807@cib90@raise-unbound-error cib90@raise-unbound-error) (set! cib92@syntax-type (lambda (cifdc@e cifdd@r) (if (cib70@id? cifdc@e) (let ((cife0@id cifdc@e)) (let ((cife2@label (cib86@id->label cife0@id))) (let ((cife4@b (cib88@label->binding cife2@label cifdd@r))) (let ((cife6@type (cib8c@binding-type cife4@b))) (begin (if (not cife2@label) (cib90@raise-unbound-error cife0@id) (void)) (let ((cife8@t cife6@type)) (if (memv cife8@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values cife6@type (cib8e@binding-value cife4@b) cife0@id) (values 'other '#f '#f)))))))) (if (cib62@syntax-pair? cifdc@e) (let ((cifea@id (cib6a@syntax-car cifdc@e))) (if (cib70@id? cifea@id) (let ((cifec@label (cib86@id->label cifea@id))) (let ((cifee@b (cib88@label->binding cifec@label cifdd@r))) (let ((ciff0@type (cib8c@binding-type cifee@b))) (begin (if (not cifec@label) (cib90@raise-unbound-error cifea@id) (void)) (let ((ciff2@t ciff0@type)) (if (memv ciff2@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values ciff0@type (cib8e@binding-value cifee@b) cifea@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((ciff4@d (cib84@stx->datum cifdc@e))) (if (cib7e@self-evaluating? ciff4@d) (values 'constant ciff4@d '#f) (values 'other '#f '#f))))))) (set! ci2808@cib92@syntax-type cib92@syntax-type) (set! ciba0@sanitize-binding (lambda (ciff6@x ciff7@src) (if (procedure? ciff6@x) (cons* 'local-macro ciff6@x ciff7@src) (if (and (pair? ciff6@x) (eq? (car ciff6@x) 'macro!) (procedure? (cdr ciff6@x))) (cons* 'local-macro! (cdr ciff6@x) ciff7@src) (if (and (pair? ciff6@x) (eq? (car ciff6@x) '$rtd)) ciff6@x (assertion-violation 'expand '"invalid transformer" ciff6@x)))))) (set! ci2809@ciba0@sanitize-binding ciba0@sanitize-binding) (set! ciba2@make-variable-transformer (lambda (ciffa@x) (if (procedure? ciffa@x) (cons 'macro! ciffa@x) (assertion-violation 'make-variable-transformer '"not a procedure" ciffa@x)))) (set! ci280a@ciba2@make-variable-transformer ciba2@make-variable-transformer) (set! ciba4@variable-transformer? (lambda (ciffc@x) (and (pair? ciffc@x) (eq? (car ciffc@x) 'macro!) (procedure? (cdr ciffc@x))))) (set! ci280b@ciba4@variable-transformer? ciba4@variable-transformer?) (set! ciba6@variable-transformer-procedure (lambda (ciffe@x) (if (ciba4@variable-transformer? ciffe@x) (cdr ciffe@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" ciffe@x)))) (set! ci280c@ciba6@variable-transformer-procedure ciba6@variable-transformer-procedure) (set! ciba8@make-eval-transformer (lambda (ci1000@x) (ciba0@sanitize-binding (eval-core (ci716@ci6ce@expanded->core ci1000@x)) ci1000@x))) (set! ci280d@ciba8@make-eval-transformer ciba8@make-eval-transformer) (set! cicf9@parse-define (lambda (ci1002@x) (let ((ci1004@t ci1002@x)) (let ((ci1006@ls/false (cid77@syntax-dispatch ci1004@t '(_ (any . any) any . each-any)))) (if (and ci1006@ls/false (apply (lambda (ci1008@id ci1009@fmls ci100a@b ci100b@b*) (cib70@id? ci1008@id)) ci1006@ls/false)) (apply (lambda (ci1010@id ci1011@fmls ci1012@b ci1013@b*) (begin (cid9d@verify-formals ci1011@fmls ci1002@x) (values ci1010@id (cons 'defun (cons ci1011@fmls (cons ci1012@b ci1013@b*)))))) ci1006@ls/false) (let ((ci1018@t ci1004@t)) (let ((ci101a@ls/false (cid77@syntax-dispatch ci1018@t '(_ any any)))) (if (and ci101a@ls/false (apply (lambda (ci101c@id ci101d@val) (cib70@id? ci101c@id)) ci101a@ls/false)) (apply (lambda (ci1020@id ci1021@val) (values ci1020@id (cons 'expr ci1021@val))) ci101a@ls/false) (let ((ci1024@t ci1018@t)) (let ((ci1026@ls/false (cid77@syntax-dispatch ci1024@t '(_ any)))) (if (and ci1026@ls/false (apply (lambda (ci1028@id) (cib70@id? ci1028@id)) ci1026@ls/false)) (apply (lambda (ci102a@id) (values ci102a@id (cons 'expr (cid2d@bless '(void))))) ci1026@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1024@t)))))))))))) (set! ci280e@cicf9@parse-define cicf9@parse-define) (set! cicfb@parse-define-syntax (lambda (ci102c@x) (let ((ci102e@t ci102c@x)) (let ((ci1030@ls/false (cid77@syntax-dispatch ci102e@t '(_ any any)))) (if (and ci1030@ls/false (apply (lambda (ci1032@id ci1033@val) (cib70@id? ci1032@id)) ci1030@ls/false)) (apply (lambda (ci1036@id ci1037@val) (values ci1036@id ci1037@val)) ci1030@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci102e@t)))))) (set! ci280f@cicfb@parse-define-syntax cicfb@parse-define-syntax) (set! cicfd@scheme-stx-hashtable (make-eq-hashtable)) (set! ci2810@cicfd@scheme-stx-hashtable cicfd@scheme-stx-hashtable) (set! cicff@scheme-stx (lambda (ci103a@sym) (or (hashtable-ref cicfd@scheme-stx-hashtable ci103a@sym '#f) (let ((ci103c@subst (ci967@ci790@library-subst (ci985@ci7cc@find-library-by-name '(psyntax system $all))))) (let ((ci103e@stx (make-simple-struct 'stx '5 (list ci103a@sym ciaf4@top-mark* '() '())))) (let ((ci1040@stx (let ((ci1042@t (assq ci103a@sym ci103c@subst))) (if ci1042@t ((lambda (ci1044@x) (let ((ci1046@name (car ci1044@x)) (ci1047@label (cdr ci1044@x))) (cib5c@add-subst (make-simple-struct 'rib '6 (list (list ci1046@name) (list ciaf4@top-mark*) (list ci1047@label) '#f '#f)) ci103e@stx))) ci1042@t) ci103e@stx)))) (begin (hashtable-set! cicfd@scheme-stx-hashtable ci103a@sym ci1040@stx) ci1040@stx))))))) (set! ci2811@cicff@scheme-stx cicff@scheme-stx) (set! cid01@lexical-var car) (set! ci2812@cid01@lexical-var cid01@lexical-var) (set! cid03@lexical-mutable? cdr) (set! ci2813@cid03@lexical-mutable? cid03@lexical-mutable?) (set! cid05@set-lexical-mutable! set-cdr!) (set! ci2814@cid05@set-lexical-mutable! cid05@set-lexical-mutable!) (set! cid07@add-lexical (lambda (ci104a@lab ci104b@lex ci104c@r) (cons (cons* ci104a@lab 'lexical ci104b@lex '#f) ci104c@r))) (set! ci2815@cid07@add-lexical cid07@add-lexical) (set! cid09@add-lexicals (lambda (ci1050@lab* ci1051@lex* ci1052@r) (if (null? ci1050@lab*) ci1052@r (cid09@add-lexicals (cdr ci1050@lab*) (cdr ci1051@lex*) (cid07@add-lexical (car ci1050@lab*) (car ci1051@lex*) ci1052@r))))) (set! ci2816@cid09@add-lexicals cid09@add-lexicals) (set! cid0b@letrec-helper (lambda (ci1056@e ci1057@r ci1058@mr ci1059@build) (let ((ci105e@t ci1056@e)) (let ((ci1060@ls/false (cid77@syntax-dispatch ci105e@t '(_ #(each (any any)) any . each-any)))) (if ci1060@ls/false (apply (lambda (ci1062@lhs* ci1063@rhs* ci1064@b ci1065@b*) (if (not (cib78@valid-bound-ids? ci1062@lhs*)) (cid31@invalid-fmls-error ci1056@e ci1062@lhs*) (let ((ci106a@lex* (map ciaf8@gen-lexical ci1062@lhs*)) (ci106b@lab* (map ciafc@gen-label ci1062@lhs*))) (let ((ci106e@rib (cib30@make-full-rib ci1062@lhs* ci106b@lab*)) (ci106f@r (cid09@add-lexicals ci106b@lab* ci106a@lex* ci1057@r))) (let ((ci1072@body (cidaf@chi-internal (cib5c@add-subst ci106e@rib (cons ci1064@b ci1065@b*)) ci106f@r ci1058@mr)) (ci1073@rhs* (cid95@chi-expr* (map (lambda (ci1076@x) (cib5c@add-subst ci106e@rib ci1076@x)) ci1063@rhs*) ci106f@r ci1058@mr))) (ci1059@build '#f ci106a@lex* ci1073@rhs* ci1072@body)))))) ci1060@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci105e@t)))))) (set! ci2817@cid0b@letrec-helper cid0b@letrec-helper) (set! cid0d@let-transformer (lambda (ci1078@e ci1079@r ci107a@mr) (let ((ci107e@t ci1078@e)) (let ((ci1080@ls/false (cid77@syntax-dispatch ci107e@t '(_ #(each (any any)) any . each-any)))) (if ci1080@ls/false (apply (lambda (ci1082@lhs* ci1083@rhs* ci1084@b ci1085@b*) (if (not (cib78@valid-bound-ids? ci1082@lhs*)) (cid31@invalid-fmls-error ci1078@e ci1082@lhs*) (let ((ci108a@lex* (map ciaf8@gen-lexical ci1082@lhs*)) (ci108b@lab* (map ciafc@gen-label ci1082@lhs*)) (ci108c@rhs* (cid95@chi-expr* ci1083@rhs* ci1079@r ci107a@mr))) (let ((ci1090@rib (cib30@make-full-rib ci1082@lhs* ci108b@lab*)) (ci1091@r (cid09@add-lexicals ci108b@lab* ci108a@lex* ci1079@r))) (let ((ci1094@body (cidaf@chi-internal (cib5c@add-subst ci1090@rib (cons ci1084@b ci1085@b*)) ci1091@r ci107a@mr))) (ciad8@cia3b@build-let '#f ci108a@lex* ci108c@rhs* ci1094@body)))))) ci1080@ls/false) (let ((ci1096@t ci107e@t)) (let ((ci1098@ls/false (cid77@syntax-dispatch ci1096@t '(_ any #(each (any any)) any . each-any)))) (if ci1098@ls/false (apply (lambda (ci109a@loop ci109b@lhs* ci109c@rhs* ci109d@b ci109e@b*) (if (not (cib78@valid-bound-ids? ci109b@lhs*)) (cid31@invalid-fmls-error ci1078@e ci109b@lhs*) (let ((ci10a4@lex* (map ciaf8@gen-lexical ci109b@lhs*)) (ci10a5@lab* (map ciafc@gen-label ci109b@lhs*)) (ci10a6@rhs* (cid95@chi-expr* ci109c@rhs* ci1079@r ci107a@mr)) (ci10a7@loop-lex (ciaf8@gen-lexical ci109a@loop)) (ci10a8@loop-lab (ciafc@gen-label ci109a@loop))) (let ((ci10ae@loop-rib (cib30@make-full-rib (list ci109a@loop) (list ci10a8@loop-lab))) (ci10af@rib (cib30@make-full-rib ci109b@lhs* ci10a5@lab*)) (ci10b0@r (cid09@add-lexicals (cons ci10a8@loop-lab ci10a5@lab*) (cons ci10a7@loop-lex ci10a4@lex*) ci1079@r))) (let ((ci10b4@body (cidaf@chi-internal (cib5c@add-subst ci10ae@loop-rib (cib5c@add-subst ci10af@rib (cons ci109d@b ci109e@b*))) ci10b0@r ci107a@mr))) (ciad9@cia3d@build-named-let '#f ci10a7@loop-lex ci10a4@lex* ci10a6@rhs* ci10b4@body)))))) ci1098@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1096@t))))))))) (set! ci2818@cid0d@let-transformer cid0d@let-transformer) (set! cid0f@letrec-transformer (lambda (ci10b6@e ci10b7@r ci10b8@mr) (cid0b@letrec-helper ci10b6@e ci10b7@r ci10b8@mr ciad7@cia39@build-letrec))) (set! ci2819@cid0f@letrec-transformer cid0f@letrec-transformer) (set! cid11@letrec*-transformer (lambda (ci10bc@e ci10bd@r ci10be@mr) (cid0b@letrec-helper ci10bc@e ci10bd@r ci10be@mr ciada@cia3f@build-letrec*))) (set! ci281a@cid11@letrec*-transformer cid11@letrec*-transformer) (set! cid13@fluid-let-syntax-transformer (lambda (ci10c2@e ci10c3@r ci10c4@mr) (letrec* ((ci10c9@lookup (lambda (ci10dc@x) (or (cib86@id->label ci10dc@x) (cie57@syntax-violation '#f '"unbound identifier" ci10c2@e ci10dc@x))))) (let ((ci10ca@t ci10c2@e)) (let ((ci10cc@ls/false (cid77@syntax-dispatch ci10ca@t '(_ #(each (any any)) any . each-any)))) (if ci10cc@ls/false (apply (lambda (ci10ce@lhs* ci10cf@rhs* ci10d0@b ci10d1@b*) (if (not (cib78@valid-bound-ids? ci10ce@lhs*)) (cid31@invalid-fmls-error ci10c2@e ci10ce@lhs*) (let ((ci10d6@lab* (map ci10c9@lookup ci10ce@lhs*)) (ci10d7@rhs* (map (lambda (ci10da@x) (ciba8@make-eval-transformer (cidd1@expand-transformer ci10da@x ci10c4@mr))) ci10cf@rhs*))) (cidaf@chi-internal (cons ci10d0@b ci10d1@b*) (append (map cons ci10d6@lab* ci10d7@rhs*) ci10c3@r) (append (map cons ci10d6@lab* ci10d7@rhs*) ci10c4@mr))))) ci10cc@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci10ca@t))))))) (set! ci281b@cid13@fluid-let-syntax-transformer cid13@fluid-let-syntax-transformer) (set! cid15@type-descriptor-transformer (lambda (ci10de@e ci10df@r ci10e0@mr) (let ((ci10e4@t ci10de@e)) (let ((ci10e6@ls/false (cid77@syntax-dispatch ci10e4@t '(_ any)))) (if (and ci10e6@ls/false (apply (lambda (ci10e8@id) (cib70@id? ci10e8@id)) ci10e6@ls/false)) (apply (lambda (ci10ea@id) (let ((ci10ec@lab (cib86@id->label ci10ea@id))) (let ((ci10ee@b (cib88@label->binding ci10ec@lab ci10df@r))) (let ((ci10f0@type (cib8c@binding-type ci10ee@b))) (begin (if (not ci10ec@lab) (cib90@raise-unbound-error ci10ea@id) (void)) (if (not (and (eq? ci10f0@type '$rtd) (not (list? (cib8e@binding-value ci10ee@b))))) (cie57@syntax-violation '#f '"not a record type" ci10de@e) (void)) (list 'quote (cib8e@binding-value ci10ee@b))))))) ci10e6@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci10e4@t)))))) (set! ci281c@cid15@type-descriptor-transformer cid15@type-descriptor-transformer) (set! cid17@record-type-descriptor-transformer (lambda (ci10f2@e ci10f3@r ci10f4@mr) (let ((ci10f8@t ci10f2@e)) (let ((ci10fa@ls/false (cid77@syntax-dispatch ci10f8@t '(_ any)))) (if (and ci10fa@ls/false (apply (lambda (ci10fc@id) (cib70@id? ci10fc@id)) ci10fa@ls/false)) (apply (lambda (ci10fe@id) (let ((ci1100@lab (cib86@id->label ci10fe@id))) (let ((ci1102@b (cib88@label->binding ci1100@lab ci10f3@r))) (let ((ci1104@type (cib8c@binding-type ci1102@b))) (begin (if (not ci1100@lab) (cib90@raise-unbound-error ci10fe@id) (void)) (if (not (and (eq? ci1104@type '$rtd) (list? (cib8e@binding-value ci1102@b)))) (cie57@syntax-violation '#f '"not a record type" ci10f2@e) (void)) (cid99@chi-expr (car (cib8e@binding-value ci1102@b)) ci10f3@r ci10f4@mr)))))) ci10fa@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci10f8@t)))))) (set! ci281d@cid17@record-type-descriptor-transformer cid17@record-type-descriptor-transformer) (set! cid19@record-constructor-descriptor-transformer (lambda (ci1106@e ci1107@r ci1108@mr) (let ((ci110c@t ci1106@e)) (let ((ci110e@ls/false (cid77@syntax-dispatch ci110c@t '(_ any)))) (if (and ci110e@ls/false (apply (lambda (ci1110@id) (cib70@id? ci1110@id)) ci110e@ls/false)) (apply (lambda (ci1112@id) (let ((ci1114@lab (cib86@id->label ci1112@id))) (let ((ci1116@b (cib88@label->binding ci1114@lab ci1107@r))) (let ((ci1118@type (cib8c@binding-type ci1116@b))) (begin (if (not ci1114@lab) (cib90@raise-unbound-error ci1112@id) (void)) (if (not (and (eq? ci1118@type '$rtd) (list? (cib8e@binding-value ci1116@b)))) (cie57@syntax-violation '#f '"invalid type" ci1106@e) (void)) (cid99@chi-expr (cadr (cib8e@binding-value ci1116@b)) ci1107@r ci1108@mr)))))) ci110e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci110c@t)))))) (set! ci281e@cid19@record-constructor-descriptor-transformer cid19@record-constructor-descriptor-transformer) (set! cid1b@when-macro (lambda (ci111a@e) (let ((ci111c@t ci111a@e)) (let ((ci111e@ls/false (cid77@syntax-dispatch ci111c@t '(_ any any . each-any)))) (if ci111e@ls/false (apply (lambda (ci1120@test ci1121@e ci1122@e*) (cid2d@bless (list 'if ci1120@test (cons 'begin (cons ci1121@e ci1122@e*))))) ci111e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci111c@t)))))) (set! ci281f@cid1b@when-macro cid1b@when-macro) (set! cid1d@unless-macro (lambda (ci1126@e) (let ((ci1128@t ci1126@e)) (let ((ci112a@ls/false (cid77@syntax-dispatch ci1128@t '(_ any any . each-any)))) (if ci112a@ls/false (apply (lambda (ci112c@test ci112d@e ci112e@e*) (cid2d@bless (list 'if (list 'not ci112c@test) (cons 'begin (cons ci112d@e ci112e@e*))))) ci112a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1128@t)))))) (set! ci2820@cid1d@unless-macro cid1d@unless-macro) (set! cid1f@if-transformer (lambda (ci1132@e ci1133@r ci1134@mr) (let ((ci1138@t ci1132@e)) (let ((ci113a@ls/false (cid77@syntax-dispatch ci1138@t '(_ any any any)))) (if ci113a@ls/false (apply (lambda (ci113c@e0 ci113d@e1 ci113e@e2) (list 'if (cid99@chi-expr ci113c@e0 ci1133@r ci1134@mr) (cid99@chi-expr ci113d@e1 ci1133@r ci1134@mr) (cid99@chi-expr ci113e@e2 ci1133@r ci1134@mr))) ci113a@ls/false) (let ((ci1142@t ci1138@t)) (let ((ci1144@ls/false (cid77@syntax-dispatch ci1142@t '(_ any any)))) (if ci1144@ls/false (apply (lambda (ci1146@e0 ci1147@e1) (list 'if (cid99@chi-expr ci1146@e0 ci1133@r ci1134@mr) (cid99@chi-expr ci1147@e1 ci1133@r ci1134@mr) (ciad6@cia37@build-void))) ci1144@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1142@t))))))))) (set! ci2821@cid1f@if-transformer cid1f@if-transformer) (set! cid21@and-transformer (lambda (ci114a@e ci114b@r ci114c@mr) (let ((ci1150@t ci114a@e)) (let ((ci1152@ls/false (cid77@syntax-dispatch ci1150@t '(_ . each-any)))) (if ci1152@ls/false (apply (lambda (ci1154@e*) (cons 'and (cid95@chi-expr* ci1154@e* ci114b@r ci114c@mr))) ci1152@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1150@t)))))) (set! ci2822@cid21@and-transformer cid21@and-transformer) (set! cid23@or-transformer (lambda (ci1156@e ci1157@r ci1158@mr) (let ((ci115c@t ci1156@e)) (let ((ci115e@ls/false (cid77@syntax-dispatch ci115c@t '(_ . each-any)))) (if ci115e@ls/false (apply (lambda (ci1160@e*) (cons 'or (cid95@chi-expr* ci1160@e* ci1157@r ci1158@mr))) ci115e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci115c@t)))))) (set! ci2823@cid23@or-transformer cid23@or-transformer) (set! cid25@case-macro (lambda (ci1162@e) (letrec* ((ci1165@build-last (lambda (ci118c@cls) (let ((ci118e@t ci118c@cls)) (let ((ci1190@ls/false (cid77@syntax-dispatch ci118e@t '(#(scheme-id else) any . each-any)))) (if ci1190@ls/false (apply (lambda (ci1192@e ci1193@e*) (cons 'begin (cons ci1192@e ci1193@e*))) ci1190@ls/false) (let ((ci1196@t ci118e@t)) (let ((ci1198@ls/false (cid77@syntax-dispatch ci1196@t '_))) (if ci1198@ls/false (apply (lambda () (ci1167@build-one ci118c@cls '(if #f #f))) ci1198@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1196@t))))))))) (ci1167@build-one (lambda (ci117e@cls ci117f@k) (let ((ci1182@t ci117e@cls)) (let ((ci1184@ls/false (cid77@syntax-dispatch ci1182@t '(each-any any . each-any)))) (if ci1184@ls/false (apply (lambda (ci1186@d* ci1187@e ci1188@e*) (list 'if (list 'memv 't (list 'quote ci1186@d*)) (cons 'begin (cons ci1187@e ci1188@e*)) ci117f@k)) ci1184@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1182@t))))))) (let ((ci1168@t ci1162@e)) (let ((ci116a@ls/false (cid77@syntax-dispatch ci1168@t '(_ any)))) (if ci116a@ls/false (apply (lambda (ci116c@expr) (cid2d@bless (cons 'let (cons (list (list 't ci116c@expr)) '((if #f #f)))))) ci116a@ls/false) (let ((ci116e@t ci1168@t)) (let ((ci1170@ls/false (cid77@syntax-dispatch ci116e@t '(_ any any . each-any)))) (if ci1170@ls/false (apply (lambda (ci1172@expr ci1173@cls ci1174@cls*) (cid2d@bless (list 'let (list (list 't ci1172@expr)) (let ci117c@f ((ci1178@cls ci1173@cls) (ci1179@cls* ci1174@cls*)) (if (null? ci1179@cls*) (ci1165@build-last ci1178@cls) (ci1167@build-one ci1178@cls (ci117c@f (car ci1179@cls*) (cdr ci1179@cls*)))))))) ci1170@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci116e@t)))))))))) (set! ci2824@cid25@case-macro cid25@case-macro) (set! cid27@quote-transformer (lambda (ci119a@e ci119b@r ci119c@mr) (let ((ci11a0@t ci119a@e)) (let ((ci11a2@ls/false (cid77@syntax-dispatch ci11a0@t '(_ any)))) (if ci11a2@ls/false (apply (lambda (ci11a4@datum) (list 'quote (cib84@stx->datum ci11a4@datum))) ci11a2@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci11a0@t)))))) (set! ci2825@cid27@quote-transformer cid27@quote-transformer) (set! cid29@case-lambda-transformer (lambda (ci11a6@e ci11a7@r ci11a8@mr) (let ((ci11ac@t ci11a6@e)) (let ((ci11ae@ls/false (cid77@syntax-dispatch ci11ac@t '(_ . #(each (any any . each-any)))))) (if ci11ae@ls/false (apply (lambda (ci11b0@fmls* ci11b1@b* ci11b2@b**) (call-with-values (lambda () (cida1@chi-lambda-clause* ci11a6@e ci11b0@fmls* (map cons ci11b1@b* ci11b2@b**) ci11a7@r ci11a8@mr)) (lambda (ci11ba@ci11b7 ci11bb@ci11b9) (let ((ci11be@body* ci11bb@ci11b9) (ci11bf@fmls* ci11ba@ci11b7)) (ciad4@cia07@build-case-lambda '#f ci11bf@fmls* ci11be@body*))))) ci11ae@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci11ac@t)))))) (set! ci2826@cid29@case-lambda-transformer cid29@case-lambda-transformer) (set! cid2b@lambda-transformer (lambda (ci11c2@e ci11c3@r ci11c4@mr) (let ((ci11c8@t ci11c2@e)) (let ((ci11ca@ls/false (cid77@syntax-dispatch ci11c8@t '(_ any any . each-any)))) (if ci11ca@ls/false (apply (lambda (ci11cc@fmls ci11cd@b ci11ce@b*) (call-with-values (lambda () (cid9f@chi-lambda-clause ci11c2@e ci11cc@fmls (cons ci11cd@b ci11ce@b*) ci11c3@r ci11c4@mr)) (lambda (ci11d6@ci11d3 ci11d7@ci11d5) (let ((ci11da@body ci11d7@ci11d5) (ci11db@fmls ci11d6@ci11d3)) (ciad3@cia05@build-lambda '#f ci11db@fmls ci11da@body))))) ci11ca@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci11c8@t)))))) (set! ci2827@cid2b@lambda-transformer cid2b@lambda-transformer) (set! cid2d@bless (lambda (ci11de@x) (cib58@mkstx (let ci11e2@f ((ci11e0@x ci11de@x)) (if (cib3c@stx? ci11e0@x) ci11e0@x (if (pair? ci11e0@x) (cons (ci11e2@f (car ci11e0@x)) (ci11e2@f (cdr ci11e0@x))) (if (symbol? ci11e0@x) (cicff@scheme-stx ci11e0@x) (if (vector? ci11e0@x) (vector-map ci11e2@f ci11e0@x) ci11e0@x))))) '() '() '()))) (set! ci2828@cid2d@bless cid2d@bless) (set! cid2f@with-syntax-macro (lambda (ci11e4@e) (let ((ci11e6@t ci11e4@e)) (let ((ci11e8@ls/false (cid77@syntax-dispatch ci11e6@t '(_ #(each (any any)) any . each-any)))) (if ci11e8@ls/false (apply (lambda (ci11ea@pat* ci11eb@expr* ci11ec@b ci11ed@b*) (let ((ci11f2@idn* (let ci11f6@f ((ci11f4@pat* ci11ea@pat*)) (if (null? ci11f4@pat*) '() (call-with-values (lambda () (cid75@convert-pattern (car ci11f4@pat*) '())) (lambda (ci11fc@ci11f9 ci11fd@ci11fb) (let ((ci1200@idn* ci11fd@ci11fb) (ci1201@pat ci11fc@ci11f9)) (append ci1200@idn* (ci11f6@f (cdr ci11f4@pat*)))))))))) (begin (cid9d@verify-formals (map car ci11f2@idn*) ci11e4@e) (let ((ci1204@t* (cie45@generate-temporaries ci11eb@expr*))) (cid2d@bless (list 'let (map list ci1204@t* ci11eb@expr*) (let ci120a@f ((ci1206@pat* ci11ea@pat*) (ci1207@t* ci1204@t*)) (if (null? ci1206@pat*) (cons 'begin (cons '#f (cons ci11ec@b ci11ed@b*))) (list 'syntax-case (car ci1207@t*) '() (list (car ci1206@pat*) (ci120a@f (cdr ci1206@pat*) (cdr ci1207@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car ci1206@pat*)) (car ci1207@t*)))))))))))) ci11e8@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci11e6@t)))))) (set! ci2829@cid2f@with-syntax-macro cid2f@with-syntax-macro) (set! cid31@invalid-fmls-error (lambda (ci120c@stx ci120d@fmls) (let ((ci1210@t ci120d@fmls)) (let ((ci1212@ls/false (cid77@syntax-dispatch ci1210@t '#(each+ any () any)))) (if ci1212@ls/false (apply (lambda (ci1214@id* ci1215@last) (let ci121a@f ((ci1218@id* (if (cib70@id? ci1215@last) (cons ci1215@last ci1214@id*) (if (cib66@syntax-null? ci1215@last) ci1214@id* (cie57@syntax-violation '#f '"not an identifier" ci120c@stx ci1215@last))))) (if (null? ci1218@id*) (values) (if (not (cib70@id? (car ci1218@id*))) (cie57@syntax-violation '#f '"not an identifier" ci120c@stx (car ci1218@id*)) (begin (ci121a@f (cdr ci1218@id*)) (if (cib7c@bound-id-member? (car ci1218@id*) (cdr ci1218@id*)) (cie57@syntax-violation '#f '"duplicate binding" ci120c@stx (car ci1218@id*)) (void))))))) ci1212@ls/false) (let ((ci121c@t ci1210@t)) (let ((ci121e@ls/false (cid77@syntax-dispatch ci121c@t '_))) (if ci121e@ls/false (apply (lambda () (cie57@syntax-violation '#f '"malformed binding form" ci120c@stx ci120d@fmls)) ci121e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci121c@t))))))))) (set! ci282a@cid31@invalid-fmls-error cid31@invalid-fmls-error) (set! cid33@let-macro (lambda (ci1220@stx) (let ((ci1222@t ci1220@stx)) (let ((ci1224@ls/false (cid77@syntax-dispatch ci1222@t '(_ #(each (any any)) any . each-any)))) (if ci1224@ls/false (apply (lambda (ci1226@lhs* ci1227@rhs* ci1228@b ci1229@b*) (if (cib78@valid-bound-ids? ci1226@lhs*) (cid2d@bless (cons (cons 'lambda (cons ci1226@lhs* (cons ci1228@b ci1229@b*))) ci1227@rhs*)) (cid31@invalid-fmls-error ci1220@stx ci1226@lhs*))) ci1224@ls/false) (let ((ci122e@t ci1222@t)) (let ((ci1230@ls/false (cid77@syntax-dispatch ci122e@t '(_ any #(each (any any)) any . each-any)))) (if (and ci1230@ls/false (apply (lambda (ci1232@f ci1233@lhs* ci1234@rhs* ci1235@b ci1236@b*) (cib70@id? ci1232@f)) ci1230@ls/false)) (apply (lambda (ci123c@f ci123d@lhs* ci123e@rhs* ci123f@b ci1240@b*) (if (cib78@valid-bound-ids? ci123d@lhs*) (cid2d@bless (cons (list 'letrec (list (list ci123c@f (cons 'lambda (cons ci123d@lhs* (cons ci123f@b ci1240@b*))))) ci123c@f) ci123e@rhs*)) (cid31@invalid-fmls-error ci1220@stx ci123d@lhs*))) ci1230@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci122e@t))))))))) (set! ci282b@cid33@let-macro cid33@let-macro) (set! cid35@let-values-macro (lambda (ci1246@stx) (letrec* ((ci1249@rename (lambda (ci12ae@x ci12af@old* ci12b0@new*) (begin (if (not (cib70@id? ci12ae@x)) (cie57@syntax-violation '#f '"not an indentifier" ci1246@stx ci12ae@x) (void)) (if (cib7c@bound-id-member? ci12ae@x ci12af@old*) (cie57@syntax-violation '#f '"duplicate binding" ci1246@stx ci12ae@x) (void)) (let ((ci12b4@y (gensym (cie5d@syntax->datum ci12ae@x)))) (values ci12b4@y (cons ci12ae@x ci12af@old*) (cons ci12b4@y ci12b0@new*)))))) (ci124b@rename* (lambda (ci129c@x* ci129d@old* ci129e@new*) (if (null? ci129c@x*) (values '() ci129d@old* ci129e@new*) (call-with-values (lambda () (ci1249@rename (car ci129c@x*) ci129d@old* ci129e@new*)) (lambda (ci12a2@x ci12a3@old* ci12a4@new*) (call-with-values (lambda () (ci124b@rename* (cdr ci129c@x*) ci12a3@old* ci12a4@new*)) (lambda (ci12a8@x* ci12a9@old* ci12aa@new*) (values (cons ci12a2@x ci12a8@x*) ci12a9@old* ci12aa@new*))))))))) (let ((ci124c@t ci1246@stx)) (let ((ci124e@ls/false (cid77@syntax-dispatch ci124c@t '(_ () any . each-any)))) (if ci124e@ls/false (apply (lambda (ci1250@b ci1251@b*) (cons* (cid2d@bless 'let) '() ci1250@b ci1251@b*)) ci124e@ls/false) (let ((ci1254@t ci124c@t)) (let ((ci1256@ls/false (cid77@syntax-dispatch ci1254@t '(_ #(each (any any)) any . each-any)))) (if ci1256@ls/false (apply (lambda (ci1258@lhs* ci1259@rhs* ci125a@b ci125b@b*) (cid2d@bless (let ci1268@f ((ci1260@lhs* ci1258@lhs*) (ci1261@rhs* ci1259@rhs*) (ci1262@old* '()) (ci1263@new* '())) (if (null? ci1260@lhs*) (cons 'let (cons (map list ci1262@old* ci1263@new*) (cons ci125a@b ci125b@b*))) (let ((ci126a@t (car ci1260@lhs*))) (let ((ci126c@ls/false (cid77@syntax-dispatch ci126a@t 'each-any))) (if ci126c@ls/false (apply (lambda (ci126e@x*) (call-with-values (lambda () (ci124b@rename* ci126e@x* ci1262@old* ci1263@new*)) (lambda (ci1276@ci1271 ci1277@ci1273 ci1278@ci1275) (let ((ci127c@new* ci1278@ci1275) (ci127d@old* ci1277@ci1273) (ci127e@y* ci1276@ci1271)) (list 'call-with-values (list 'lambda '() (car ci1261@rhs*)) (list 'lambda ci127e@y* (ci1268@f (cdr ci1260@lhs*) (cdr ci1261@rhs*) ci127d@old* ci127c@new*))))))) ci126c@ls/false) (let ((ci1282@t ci126a@t)) (let ((ci1284@ls/false (cid77@syntax-dispatch ci1282@t '#(each+ any () any)))) (if ci1284@ls/false (apply (lambda (ci1286@x* ci1287@x) (call-with-values (lambda () (ci1249@rename ci1287@x ci1262@old* ci1263@new*)) (lambda (ci128a@y ci128b@old* ci128c@new*) (call-with-values (lambda () (ci124b@rename* ci1286@x* ci128b@old* ci128c@new*)) (lambda (ci1290@y* ci1291@old* ci1292@new*) (list 'call-with-values (list 'lambda '() (car ci1261@rhs*)) (list 'lambda (append ci1290@y* ci128a@y) (ci1268@f (cdr ci1260@lhs*) (cdr ci1261@rhs*) ci1291@old* ci1292@new*)))))))) ci1284@ls/false) (let ((ci1296@t ci1282@t)) (let ((ci1298@ls/false (cid77@syntax-dispatch ci1296@t 'any))) (if ci1298@ls/false (apply (lambda (ci129a@others) (cie57@syntax-violation '#f '"malformed bindings" ci1246@stx ci129a@others)) ci1298@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1296@t)))))))))))))) ci1256@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1254@t)))))))))) (set! ci282c@cid35@let-values-macro cid35@let-values-macro) (set! cid37@let*-values-macro (lambda (ci12b6@stx) (letrec* ((ci12b9@check (lambda (ci12e8@x*) (if (not (null? ci12e8@x*)) (let ((ci12ea@x (car ci12e8@x*))) (begin (if (not (cib70@id? ci12ea@x)) (cie57@syntax-violation '#f '"not an identifier" ci12b6@stx ci12ea@x) (void)) (ci12b9@check (cdr ci12e8@x*)) (if (cib7c@bound-id-member? ci12ea@x (cdr ci12e8@x*)) (cie57@syntax-violation '#f '"duplicate identifier" ci12b6@stx ci12ea@x) (void)))) (void))))) (let ((ci12ba@t ci12b6@stx)) (let ((ci12bc@ls/false (cid77@syntax-dispatch ci12ba@t '(_ () any . each-any)))) (if ci12bc@ls/false (apply (lambda (ci12be@b ci12bf@b*) (cons* (cid2d@bless 'let) '() ci12be@b ci12bf@b*)) ci12bc@ls/false) (let ((ci12c2@t ci12ba@t)) (let ((ci12c4@ls/false (cid77@syntax-dispatch ci12c2@t '(_ #(each (any any)) any . each-any)))) (if ci12c4@ls/false (apply (lambda (ci12c6@lhs* ci12c7@rhs* ci12c8@b ci12c9@b*) (cid2d@bless (let ci12d2@f ((ci12ce@lhs* ci12c6@lhs*) (ci12cf@rhs* ci12c7@rhs*)) (if (null? ci12ce@lhs*) (cons 'begin (cons ci12c8@b ci12c9@b*)) (let ((ci12d4@t (car ci12ce@lhs*))) (let ((ci12d6@ls/false (cid77@syntax-dispatch ci12d4@t 'each-any))) (if ci12d6@ls/false (apply (lambda (ci12d8@x*) (begin (ci12b9@check ci12d8@x*) (list 'call-with-values (list 'lambda '() (car ci12cf@rhs*)) (list 'lambda ci12d8@x* (ci12d2@f (cdr ci12ce@lhs*) (cdr ci12cf@rhs*)))))) ci12d6@ls/false) (let ((ci12da@t ci12d4@t)) (let ((ci12dc@ls/false (cid77@syntax-dispatch ci12da@t '#(each+ any () any)))) (if ci12dc@ls/false (apply (lambda (ci12de@x* ci12df@x) (begin (ci12b9@check (cons ci12df@x ci12de@x*)) (list 'call-with-values (list 'lambda '() (car ci12cf@rhs*)) (list 'lambda (append ci12de@x* ci12df@x) (ci12d2@f (cdr ci12ce@lhs*) (cdr ci12cf@rhs*)))))) ci12dc@ls/false) (let ((ci12e2@t ci12da@t)) (let ((ci12e4@ls/false (cid77@syntax-dispatch ci12e2@t 'any))) (if ci12e4@ls/false (apply (lambda (ci12e6@others) (cie57@syntax-violation '#f '"malformed bindings" ci12b6@stx ci12e6@others)) ci12e4@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci12e2@t)))))))))))))) ci12c4@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci12c2@t)))))))))) (set! ci282d@cid37@let*-values-macro cid37@let*-values-macro) (set! cid39@trace-lambda-macro (lambda (ci12ec@stx) (let ((ci12ee@t ci12ec@stx)) (let ((ci12f0@ls/false (cid77@syntax-dispatch ci12ee@t '(_ any each-any any . each-any)))) (if ci12f0@ls/false (apply (lambda (ci12f2@who ci12f3@fmls ci12f4@b ci12f5@b*) (if (cib78@valid-bound-ids? ci12f3@fmls) (cid2d@bless (list 'make-traced-procedure (list 'quote ci12f2@who) (cons 'lambda (cons ci12f3@fmls (cons ci12f4@b ci12f5@b*))))) (cid31@invalid-fmls-error ci12ec@stx ci12f3@fmls))) ci12f0@ls/false) (let ((ci12fa@t ci12ee@t)) (let ((ci12fc@ls/false (cid77@syntax-dispatch ci12fa@t '(_ any #(each+ any () any) any . each-any)))) (if ci12fc@ls/false (apply (lambda (ci12fe@who ci12ff@fmls ci1300@last ci1301@b ci1302@b*) (if (cib78@valid-bound-ids? (cons ci1300@last ci12ff@fmls)) (cid2d@bless (list 'make-traced-procedure (list 'quote ci12fe@who) (cons 'lambda (cons (append ci12ff@fmls ci1300@last) (cons ci1301@b ci1302@b*))))) (cid31@invalid-fmls-error ci12ec@stx (append ci12ff@fmls ci1300@last)))) ci12fc@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci12fa@t))))))))) (set! ci282e@cid39@trace-lambda-macro cid39@trace-lambda-macro) (set! cid3b@trace-define-macro (lambda (ci1308@stx) (let ((ci130a@t ci1308@stx)) (let ((ci130c@ls/false (cid77@syntax-dispatch ci130a@t '(_ (any . each-any) any . each-any)))) (if ci130c@ls/false (apply (lambda (ci130e@who ci130f@fmls ci1310@b ci1311@b*) (if (cib78@valid-bound-ids? ci130f@fmls) (cid2d@bless (list 'define ci130e@who (list 'make-traced-procedure (list 'quote ci130e@who) (cons 'lambda (cons ci130f@fmls (cons ci1310@b ci1311@b*)))))) (cid31@invalid-fmls-error ci1308@stx ci130f@fmls))) ci130c@ls/false) (let ((ci1316@t ci130a@t)) (let ((ci1318@ls/false (cid77@syntax-dispatch ci1316@t '(_ (any . #(each+ any () any)) any . each-any)))) (if ci1318@ls/false (apply (lambda (ci131a@who ci131b@fmls ci131c@last ci131d@b ci131e@b*) (if (cib78@valid-bound-ids? (cons ci131c@last ci131b@fmls)) (cid2d@bless (list 'define ci131a@who (list 'make-traced-procedure (list 'quote ci131a@who) (cons 'lambda (cons (append ci131b@fmls ci131c@last) (cons ci131d@b ci131e@b*)))))) (cid31@invalid-fmls-error ci1308@stx (append ci131b@fmls ci131c@last)))) ci1318@ls/false) (let ((ci1324@t ci1316@t)) (let ((ci1326@ls/false (cid77@syntax-dispatch ci1324@t '(_ any any)))) (if ci1326@ls/false (apply (lambda (ci1328@who ci1329@expr) (if (cib70@id? ci1328@who) (cid2d@bless (list 'define ci1328@who (list 'let (list (list 'v ci1329@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote ci1328@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (cie57@syntax-violation '#f '"invalid name" ci1308@stx))) ci1326@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1324@t)))))))))))) (set! ci282f@cid3b@trace-define-macro cid3b@trace-define-macro) (set! cid3d@trace-define-syntax-macro (lambda (ci132c@stx) (let ((ci132e@t ci132c@stx)) (let ((ci1330@ls/false (cid77@syntax-dispatch ci132e@t '(_ any any)))) (if ci1330@ls/false (apply (lambda (ci1332@who ci1333@expr) (if (cib70@id? ci1332@who) (cid2d@bless (list 'define-syntax ci1332@who (list 'make-traced-macro (list 'quote ci1332@who) ci1333@expr))) (cie57@syntax-violation '#f '"invalid name" ci132c@stx))) ci1330@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci132e@t)))))) (set! ci2830@cid3d@trace-define-syntax-macro cid3d@trace-define-syntax-macro) (set! cid3f@trace-let/rec-syntax (lambda (ci1336@who) (lambda (ci1338@stx) (let ((ci133a@t ci1338@stx)) (let ((ci133c@ls/false (cid77@syntax-dispatch ci133a@t '(_ #(each (any any)) any . each-any)))) (if ci133c@ls/false (apply (lambda (ci133e@lhs* ci133f@rhs* ci1340@b ci1341@b*) (if (cib78@valid-bound-ids? ci133e@lhs*) (let ((ci1346@rhs* (map (lambda (ci1348@lhs ci1349@rhs) (list 'make-traced-macro (list 'quote ci1348@lhs) ci1349@rhs)) ci133e@lhs* ci133f@rhs*))) (cid2d@bless (cons ci1336@who (cons (map list ci133e@lhs* ci1346@rhs*) (cons ci1340@b ci1341@b*))))) (cid31@invalid-fmls-error ci1338@stx ci133e@lhs*))) ci133c@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci133a@t))))))) (set! ci2831@cid3f@trace-let/rec-syntax cid3f@trace-let/rec-syntax) (set! cid41@trace-let-syntax-macro (cid3f@trace-let/rec-syntax 'let-syntax)) (set! ci2832@cid41@trace-let-syntax-macro cid41@trace-let-syntax-macro) (set! cid43@trace-letrec-syntax-macro (cid3f@trace-let/rec-syntax 'letrec-syntax)) (set! ci2833@cid43@trace-letrec-syntax-macro cid43@trace-letrec-syntax-macro) (set! cid45@guard-macro (lambda (ci134c@x) (letrec* ((ci134f@gen-clauses (lambda (ci1366@con ci1367@outerk ci1368@clause*) (letrec* ((ci136d@f (lambda (ci13a6@x ci13a7@k) (let ((ci13aa@t ci13a6@x)) (let ((ci13ac@ls/false (cid77@syntax-dispatch ci13aa@t '(any #(scheme-id =>) any)))) (if ci13ac@ls/false (apply (lambda (ci13ae@e ci13af@p) (let ((ci13b2@t (gensym))) (list 'let (list (list ci13b2@t ci13ae@e)) (list 'if ci13b2@t (list ci13af@p ci13b2@t) ci13a7@k)))) ci13ac@ls/false) (let ((ci13b4@t ci13aa@t)) (let ((ci13b6@ls/false (cid77@syntax-dispatch ci13b4@t '(any)))) (if ci13b6@ls/false (apply (lambda (ci13b8@e) (let ((ci13ba@t (gensym))) (list 'let (list (list ci13ba@t ci13b8@e)) (list 'if ci13ba@t ci13ba@t ci13a7@k)))) ci13b6@ls/false) (let ((ci13bc@t ci13b4@t)) (let ((ci13be@ls/false (cid77@syntax-dispatch ci13bc@t '(any any . each-any)))) (if ci13be@ls/false (apply (lambda (ci13c0@e ci13c1@v ci13c2@v*) (list 'if ci13c0@e (cons 'begin (cons ci13c1@v ci13c2@v*)) ci13a7@k)) ci13be@ls/false) (let ((ci13c6@t ci13bc@t)) (let ((ci13c8@ls/false (cid77@syntax-dispatch ci13c6@t '_))) (if ci13c8@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid guard clause" ci13a6@x)) ci13c8@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci13c6@t))))))))))))))) (ci136f@f* (lambda (ci137c@x*) (let ((ci137e@t ci137c@x*)) (let ((ci1380@ls/false (cid77@syntax-dispatch ci137e@t '()))) (if ci1380@ls/false (apply (lambda () (let ((ci1382@g (gensym))) (values (list ci1382@g (list 'lambda '() (list 'raise-continuable ci1366@con))) ci1382@g))) ci1380@ls/false) (let ((ci1384@t ci137e@t)) (let ((ci1386@ls/false (cid77@syntax-dispatch ci1384@t '((#(scheme-id else) any . each-any))))) (if ci1386@ls/false (apply (lambda (ci1388@e ci1389@e*) (values (cons 'begin (cons ci1388@e ci1389@e*)) '#f)) ci1386@ls/false) (let ((ci138c@t ci1384@t)) (let ((ci138e@ls/false (cid77@syntax-dispatch ci138c@t '(any . any)))) (if ci138e@ls/false (apply (lambda (ci1390@cls ci1391@cls*) (call-with-values (lambda () (ci136f@f* ci1391@cls*)) (lambda (ci1398@ci1395 ci1399@ci1397) (let ((ci139c@g ci1399@ci1397) (ci139d@e ci1398@ci1395)) (values (ci136d@f ci1390@cls ci139d@e) ci139c@g))))) ci138e@ls/false) (let ((ci13a0@t ci138c@t)) (let ((ci13a2@ls/false (cid77@syntax-dispatch ci13a0@t 'any))) (if ci13a2@ls/false (apply (lambda (ci13a4@others) (cie57@syntax-violation '#f '"invalid guard clause" ci13a4@others)) ci13a2@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci13a0@t)))))))))))))))) (call-with-values (lambda () (ci136f@f* ci1368@clause*)) (lambda (ci1374@ci1371 ci1375@ci1373) (let ((ci1378@raisek ci1375@ci1373) (ci1379@code ci1374@ci1371)) (if ci1378@raisek (list (list 'call/cc (list 'lambda (list ci1378@raisek) (list ci1367@outerk (list 'lambda '() ci1379@code))))) (list ci1367@outerk (list 'lambda '() ci1379@code)))))))))) (let ((ci1350@t ci134c@x)) (let ((ci1352@ls/false (cid77@syntax-dispatch ci1350@t '(_ (any . each-any) any . each-any)))) (if (and ci1352@ls/false (apply (lambda (ci1354@con ci1355@clause* ci1356@b ci1357@b*) (cib70@id? ci1354@con)) ci1352@ls/false)) (apply (lambda (ci135c@con ci135d@clause* ci135e@b ci135f@b*) (let ((ci1364@outerk (gensym))) (cid2d@bless (list (list 'call/cc (list 'lambda (list ci1364@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list ci135c@con) (ci134f@gen-clauses ci135c@con ci1364@outerk ci135d@clause*)) (cons 'lambda (cons '() (cons ci135e@b ci135f@b*))))))))))) ci1352@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1350@t))))))) (set! ci2834@cid45@guard-macro cid45@guard-macro) (set! cid47@define-enumeration-macro (lambda (ci13ca@stx) (letrec* ((ci13cd@set? (lambda (ci13e6@x) (or (null? ci13e6@x) (and (not (memq (car ci13e6@x) (cdr ci13e6@x))) (ci13cd@set? (cdr ci13e6@x)))))) (ci13cf@remove-dups (lambda (ci13e4@ls) (if (null? ci13e4@ls) '() (cons (car ci13e4@ls) (ci13cf@remove-dups (remq (car ci13e4@ls) (cdr ci13e4@ls)))))))) (let ((ci13d0@t ci13ca@stx)) (let ((ci13d2@ls/false (cid77@syntax-dispatch ci13d0@t '(_ any each-any any)))) (if (and ci13d2@ls/false (apply (lambda (ci13d4@name ci13d5@id* ci13d6@maker) (and (cib70@id? ci13d4@name) (cib70@id? ci13d6@maker) (for-all cib70@id? ci13d5@id*))) ci13d2@ls/false)) (apply (lambda (ci13da@name ci13db@id* ci13dc@maker) (let ((ci13e0@name* (ci13cf@remove-dups (cie5d@syntax->datum ci13db@id*))) (ci13e1@mk (gensym))) (cid2d@bless (list 'begin (list 'define ci13e1@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote ci13e0@name*)))) (list 'define-syntax ci13da@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote ci13e0@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote ci13da@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax ci13dc@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote ci13dc@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote ci13e0@name*)) (cons 'syntax-violation (cons (list 'quote ci13dc@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons ci13e1@mk '('(n* ...))))))))))))) ci13d2@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci13d0@t))))))) (set! ci2835@cid47@define-enumeration-macro cid47@define-enumeration-macro) (set! cid49@time-macro (lambda (ci13e8@stx) (let ((ci13ea@t ci13e8@stx)) (let ((ci13ec@ls/false (cid77@syntax-dispatch ci13ea@t '(_ any)))) (if ci13ec@ls/false (apply (lambda (ci13ee@expr) (cid2d@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() ci13ee@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) ci13ec@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci13ea@t)))))) (set! ci2836@cid49@time-macro cid49@time-macro) (set! cid4b@delay-macro (lambda (ci13f0@stx) (let ((ci13f2@t ci13f0@stx)) (let ((ci13f4@ls/false (cid77@syntax-dispatch ci13f2@t '(_ any)))) (if ci13f4@ls/false (apply (lambda (ci13f6@expr) (cid2d@bless (list 'make-promise (list 'lambda '() ci13f6@expr)))) ci13f4@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci13f2@t)))))) (set! ci2837@cid4b@delay-macro cid4b@delay-macro) (set! cid4d@assert-macro (lambda (ci13f8@stx) (let ((ci13fa@t ci13f8@stx)) (let ((ci13fc@ls/false (cid77@syntax-dispatch ci13fa@t '(_ any)))) (if ci13fc@ls/false (apply (lambda (ci13fe@expr) (let ((ci1400@pos (or (cie4f@expression-position ci13f8@stx) (cie4f@expression-position ci13fe@expr)))) (cid2d@bless (list 'let (list (list 'x ci13fe@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote ci13fe@expr) (list 'quote ci1400@pos))))))) ci13fc@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci13fa@t)))))) (set! ci2838@cid4d@assert-macro cid4d@assert-macro) (set! cid4f@endianness-macro (lambda (ci1402@stx) (let ((ci1404@t ci1402@stx)) (let ((ci1406@ls/false (cid77@syntax-dispatch ci1404@t '(_ any)))) (if ci1406@ls/false (apply (lambda (ci1408@e) (let ((ci140a@t (cie5d@syntax->datum ci1408@e))) (if (memv ci140a@t '(little)) (cid2d@bless ''little) (if (memv ci140a@t '(big)) (cid2d@bless ''big) (cie57@syntax-violation '#f '"endianness must be big or little" ci1402@stx))))) ci1406@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1404@t)))))) (set! ci2839@cid4f@endianness-macro cid4f@endianness-macro) (set! cid51@identifier-syntax-macro (lambda (ci140c@stx) (let ((ci140e@t ci140c@stx)) (let ((ci1410@ls/false (cid77@syntax-dispatch ci140e@t '(_ any)))) (if ci1410@ls/false (apply (lambda (ci1412@expr) (cid2d@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax ci1412@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax ci1412@expr) '((syntax (e* ...)))))))))) ci1410@ls/false) (let ((ci1414@t ci140e@t)) (let ((ci1416@ls/false (cid77@syntax-dispatch ci1414@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and ci1416@ls/false (apply (lambda (ci1418@id1 ci1419@expr1 ci141a@id2 ci141b@expr2 ci141c@expr3) (and (cib70@id? ci1418@id1) (cib70@id? ci141a@id2) (cib70@id? ci141b@expr2))) ci1416@ls/false)) (apply (lambda (ci1422@id1 ci1423@expr1 ci1424@id2 ci1425@expr2 ci1426@expr3) (cid2d@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax ci1423@expr1)) (list (list 'set! 'id ci1425@expr2) (list 'syntax ci1426@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons ci1423@expr1 '(e* ...))))))))) ci1416@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1414@t))))))))) (set! ci283a@cid51@identifier-syntax-macro cid51@identifier-syntax-macro) (set! cid53@do-macro (lambda (ci142c@stx) (letrec* ((ci142f@bind (lambda (ci1446@x) (let ((ci1448@t ci1446@x)) (let ((ci144a@ls/false (cid77@syntax-dispatch ci1448@t '(any any)))) (if ci144a@ls/false (apply (lambda (ci144c@x ci144d@init) (list ci144c@x ci144d@init ci144c@x)) ci144a@ls/false) (let ((ci1450@t ci1448@t)) (let ((ci1452@ls/false (cid77@syntax-dispatch ci1450@t '(any any any)))) (if ci1452@ls/false (apply (lambda (ci1454@x ci1455@init ci1456@step) (list ci1454@x ci1455@init ci1456@step)) ci1452@ls/false) (let ((ci145a@t ci1450@t)) (let ((ci145c@ls/false (cid77@syntax-dispatch ci145a@t '_))) (if ci145c@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid binding" ci142c@stx)) ci145c@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci145a@t))))))))))))) (let ((ci1430@t ci142c@stx)) (let ((ci1432@ls/false (cid77@syntax-dispatch ci1430@t '(_ each-any (any . each-any) . each-any)))) (if ci1432@ls/false (apply (lambda (ci1434@binding* ci1435@test ci1436@expr* ci1437@command*) (let ((ci143c@t (map ci142f@bind ci1434@binding*))) (let ((ci143e@ls/false (cid77@syntax-dispatch ci143c@t '#(each (any any any))))) (if ci143e@ls/false (apply (lambda (ci1440@x* ci1441@init* ci1442@step*) (if (cib78@valid-bound-ids? ci1440@x*) (cid2d@bless (list 'letrec (list (list 'loop (list 'lambda ci1440@x* (list 'if ci1435@test (cons 'begin (cons '(if #f #f) ci1436@expr*)) (cons 'begin (append ci1437@command* (list (cons 'loop ci1442@step*)))))))) (cons 'loop ci1441@init*))) (cie57@syntax-violation '#f '"invalid bindings" ci142c@stx))) ci143e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci143c@t))))) ci1432@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1430@t))))))) (set! ci283b@cid53@do-macro cid53@do-macro) (set! cid55@let*-macro (lambda (ci145e@stx) (let ((ci1460@t ci145e@stx)) (let ((ci1462@ls/false (cid77@syntax-dispatch ci1460@t '(_ #(each (any any)) any . each-any)))) (if (and ci1462@ls/false (apply (lambda (ci1464@lhs* ci1465@rhs* ci1466@b ci1467@b*) (for-all cib70@id? ci1464@lhs*)) ci1462@ls/false)) (apply (lambda (ci146c@lhs* ci146d@rhs* ci146e@b ci146f@b*) (cid2d@bless (let ci1476@f ((ci1474@x* (map list ci146c@lhs* ci146d@rhs*))) (if (null? ci1474@x*) (cons 'let (cons '() (cons ci146e@b ci146f@b*))) (list 'let (list (car ci1474@x*)) (ci1476@f (cdr ci1474@x*))))))) ci1462@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1460@t)))))) (set! ci283c@cid55@let*-macro cid55@let*-macro) (set! cid57@or-macro (lambda (ci1478@stx) (let ((ci147a@t ci1478@stx)) (let ((ci147c@ls/false (cid77@syntax-dispatch ci147a@t '(_)))) (if ci147c@ls/false (apply (lambda () '#f) ci147c@ls/false) (let ((ci147e@t ci147a@t)) (let ((ci1480@ls/false (cid77@syntax-dispatch ci147e@t '(_ any . each-any)))) (if ci1480@ls/false (apply (lambda (ci1482@e ci1483@e*) (cid2d@bless (let ci148a@f ((ci1486@e ci1482@e) (ci1487@e* ci1483@e*)) (if (null? ci1487@e*) (list 'begin '#f ci1486@e) (list 'let (list (list 't ci1486@e)) (list 'if 't 't (ci148a@f (car ci1487@e*) (cdr ci1487@e*)))))))) ci1480@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci147e@t))))))))) (set! ci283d@cid57@or-macro cid57@or-macro) (set! cid59@and-macro (lambda (ci148c@stx) (let ((ci148e@t ci148c@stx)) (let ((ci1490@ls/false (cid77@syntax-dispatch ci148e@t '(_)))) (if ci1490@ls/false (apply (lambda () '#t) ci1490@ls/false) (let ((ci1492@t ci148e@t)) (let ((ci1494@ls/false (cid77@syntax-dispatch ci1492@t '(_ any . each-any)))) (if ci1494@ls/false (apply (lambda (ci1496@e ci1497@e*) (cid2d@bless (let ci149e@f ((ci149a@e ci1496@e) (ci149b@e* ci1497@e*)) (if (null? ci149b@e*) (list 'begin '#f ci149a@e) (cons 'if (cons ci149a@e (cons (ci149e@f (car ci149b@e*) (cdr ci149b@e*)) '(#f)))))))) ci1494@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1492@t))))))))) (set! ci283e@cid59@and-macro cid59@and-macro) (set! cid5b@cond-macro (lambda (ci14a0@stx) (let ((ci14a2@t ci14a0@stx)) (let ((ci14a4@ls/false (cid77@syntax-dispatch ci14a2@t '(_ any . each-any)))) (if ci14a4@ls/false (apply (lambda (ci14a6@cls ci14a7@cls*) (cid2d@bless (let ci14ae@f ((ci14aa@cls ci14a6@cls) (ci14ab@cls* ci14a7@cls*)) (if (null? ci14ab@cls*) (let ((ci14b0@t ci14aa@cls)) (let ((ci14b2@ls/false (cid77@syntax-dispatch ci14b0@t '(#(scheme-id else) any . each-any)))) (if ci14b2@ls/false (apply (lambda (ci14b4@e ci14b5@e*) (cons 'begin (cons ci14b4@e ci14b5@e*))) ci14b2@ls/false) (let ((ci14b8@t ci14b0@t)) (let ((ci14ba@ls/false (cid77@syntax-dispatch ci14b8@t '(any #(scheme-id =>) any)))) (if ci14ba@ls/false (apply (lambda (ci14bc@e ci14bd@p) (list 'let (list (list 't ci14bc@e)) (list 'if 't (cons ci14bd@p '(t))))) ci14ba@ls/false) (let ((ci14c0@t ci14b8@t)) (let ((ci14c2@ls/false (cid77@syntax-dispatch ci14c0@t '(any)))) (if ci14c2@ls/false (apply (lambda (ci14c4@e) (cons 'or (cons ci14c4@e '((if #f #f))))) ci14c2@ls/false) (let ((ci14c6@t ci14c0@t)) (let ((ci14c8@ls/false (cid77@syntax-dispatch ci14c6@t '(any . each-any)))) (if ci14c8@ls/false (apply (lambda (ci14ca@e ci14cb@e*) (list 'if ci14ca@e (cons 'begin ci14cb@e*))) ci14c8@ls/false) (let ((ci14ce@t ci14c6@t)) (let ((ci14d0@ls/false (cid77@syntax-dispatch ci14ce@t '_))) (if ci14d0@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid last clause" ci14a0@stx)) ci14d0@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci14ce@t)))))))))))))))) (let ((ci14d2@t ci14aa@cls)) (let ((ci14d4@ls/false (cid77@syntax-dispatch ci14d2@t '(#(scheme-id else) any . each-any)))) (if ci14d4@ls/false (apply (lambda (ci14d6@e ci14d7@e*) (cie57@syntax-violation '#f '"incorrect position of keyword else" ci14a0@stx)) ci14d4@ls/false) (let ((ci14da@t ci14d2@t)) (let ((ci14dc@ls/false (cid77@syntax-dispatch ci14da@t '(any #(scheme-id =>) any)))) (if ci14dc@ls/false (apply (lambda (ci14de@e ci14df@p) (list 'let (list (list 't ci14de@e)) (list 'if 't (cons ci14df@p '(t)) (ci14ae@f (car ci14ab@cls*) (cdr ci14ab@cls*))))) ci14dc@ls/false) (let ((ci14e2@t ci14da@t)) (let ((ci14e4@ls/false (cid77@syntax-dispatch ci14e2@t '(any)))) (if ci14e4@ls/false (apply (lambda (ci14e6@e) (list 'or ci14e6@e (ci14ae@f (car ci14ab@cls*) (cdr ci14ab@cls*)))) ci14e4@ls/false) (let ((ci14e8@t ci14e2@t)) (let ((ci14ea@ls/false (cid77@syntax-dispatch ci14e8@t '(any . each-any)))) (if ci14ea@ls/false (apply (lambda (ci14ec@e ci14ed@e*) (list 'if ci14ec@e (cons 'begin ci14ed@e*) (ci14ae@f (car ci14ab@cls*) (cdr ci14ab@cls*)))) ci14ea@ls/false) (let ((ci14f0@t ci14e8@t)) (let ((ci14f2@ls/false (cid77@syntax-dispatch ci14f0@t '_))) (if ci14f2@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid last clause" ci14a0@stx)) ci14f2@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci14f0@t)))))))))))))))))))) ci14a4@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci14a2@t)))))) (set! ci283f@cid5b@cond-macro cid5b@cond-macro) (set! cid5d@do-include (lambda (ci14f4@stx ci14f5@id ci14f6@filename) (let ((ci14fa@filename (cib84@stx->datum ci14f6@filename))) (begin (if (not (and (string? ci14fa@filename) (cib70@id? ci14f5@id))) (cie57@syntax-violation '#f '"invalid syntax" ci14f4@stx) (void)) (cons (cid2d@bless 'begin) (with-input-from-file ci14fa@filename (lambda () (let ci14fe@f ((ci14fc@ls '())) (let ((ci1500@x (ci6b2@ci582@read-annotated))) (if (eof-object? ci1500@x) (reverse ci14fc@ls) (ci14fe@f (cons (cib50@datum->stx ci14f5@id ci1500@x) ci14fc@ls)))))))))))) (set! ci2840@cid5d@do-include cid5d@do-include) (set! cid5f@include-macro (lambda (ci1502@e) (let ((ci1504@t ci1502@e)) (let ((ci1506@ls/false (cid77@syntax-dispatch ci1504@t '(any any)))) (if ci1506@ls/false (apply (lambda (ci1508@id ci1509@filename) (cid5d@do-include ci1502@e ci1508@id ci1509@filename)) ci1506@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1504@t)))))) (set! ci2841@cid5f@include-macro cid5f@include-macro) (set! cid61@include-into-macro (lambda (ci150c@e) (let ((ci150e@t ci150c@e)) (let ((ci1510@ls/false (cid77@syntax-dispatch ci150e@t '(_ any any)))) (if ci1510@ls/false (apply (lambda (ci1512@id ci1513@filename) (cid5d@do-include ci150c@e ci1512@id ci1513@filename)) ci1510@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci150e@t)))))) (set! ci2842@cid61@include-into-macro cid61@include-into-macro) (set! cid63@syntax-rules-macro (lambda (ci1516@e) (let ((ci1518@t ci1516@e)) (let ((ci151a@ls/false (cid77@syntax-dispatch ci1518@t '(_ each-any . #(each (any any)))))) (if ci151a@ls/false (apply (lambda (ci151c@lits ci151d@pat* ci151e@tmp*) (begin (cid7d@verify-literals ci151c@lits ci1516@e) (cid2d@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons ci151c@lits (map (lambda (ci1522@pat ci1523@tmp) (let ((ci1526@t ci1522@pat)) (let ((ci1528@ls/false (cid77@syntax-dispatch ci1526@t '(_ . any)))) (if ci1528@ls/false (apply (lambda (ci152a@rest) (list (cons 'g ci152a@rest) (list 'syntax ci1523@tmp))) ci1528@ls/false) (let ((ci152c@t ci1526@t)) (let ((ci152e@ls/false (cid77@syntax-dispatch ci152c@t '_))) (if ci152e@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid syntax-rules pattern" ci1516@e ci1522@pat)) ci152e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci152c@t)))))))) ci151d@pat* ci151e@tmp*)))))))) ci151a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1518@t)))))) (set! ci2843@cid63@syntax-rules-macro cid63@syntax-rules-macro) (set! cid65@quasiquote-macro (letrec* ((ci1531@datum (lambda (ci1632@x) (list (cicff@scheme-stx 'quote) (cib58@mkstx ci1632@x '() '() '())))) (ci154d@quasicons* (lambda (ci162a@x ci162b@y) (let ci1630@f ((ci162e@x ci162a@x)) (if (null? ci162e@x) ci162b@y (ci154f@quasicons (car ci162e@x) (ci1630@f (cdr ci162e@x))))))) (ci154f@quasicons (lambda (ci1604@x ci1605@y) (let ((ci1608@t ci1605@y)) (let ((ci160a@ls/false (cid77@syntax-dispatch ci1608@t '(#(scheme-id quote) any)))) (if ci160a@ls/false (apply (lambda (ci160c@dy) (let ((ci160e@t ci1604@x)) (let ((ci1610@ls/false (cid77@syntax-dispatch ci160e@t '(#(scheme-id quote) any)))) (if ci1610@ls/false (apply (lambda (ci1612@dx) (list (cicff@scheme-stx 'quote) (cons ci1612@dx ci160c@dy))) ci1610@ls/false) (let ((ci1614@t ci160e@t)) (let ((ci1616@ls/false (cid77@syntax-dispatch ci1614@t '_))) (if ci1616@ls/false (apply (lambda () (let ((ci1618@t ci160c@dy)) (let ((ci161a@ls/false (cid77@syntax-dispatch ci1618@t '()))) (if ci161a@ls/false (apply (lambda () (list (cicff@scheme-stx 'list) ci1604@x)) ci161a@ls/false) (let ((ci161c@t ci1618@t)) (let ((ci161e@ls/false (cid77@syntax-dispatch ci161c@t '_))) (if ci161e@ls/false (apply (lambda () (list (cicff@scheme-stx 'cons) ci1604@x ci1605@y)) ci161e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci161c@t)))))))) ci1616@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1614@t)))))))) ci160a@ls/false) (let ((ci1620@t ci1608@t)) (let ((ci1622@ls/false (cid77@syntax-dispatch ci1620@t '(#(scheme-id list) . each-any)))) (if ci1622@ls/false (apply (lambda (ci1624@stuff) (cons* (cicff@scheme-stx 'list) ci1604@x ci1624@stuff)) ci1622@ls/false) (let ((ci1626@t ci1620@t)) (let ((ci1628@ls/false (cid77@syntax-dispatch ci1626@t '_))) (if ci1628@ls/false (apply (lambda () (list (cicff@scheme-stx 'cons) ci1604@x ci1605@y)) ci1628@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1626@t)))))))))))) (ci1551@quasiappend (lambda (ci15ea@x ci15eb@y) (let ((ci15ee@ls (let ci15f2@f ((ci15f0@x ci15ea@x)) (if (null? ci15f0@x) (let ((ci15f4@t ci15eb@y)) (let ((ci15f6@ls/false (cid77@syntax-dispatch ci15f4@t '(#(scheme-id quote) ())))) (if ci15f6@ls/false (apply (lambda () '()) ci15f6@ls/false) (let ((ci15f8@t ci15f4@t)) (let ((ci15fa@ls/false (cid77@syntax-dispatch ci15f8@t '_))) (if ci15fa@ls/false (apply (lambda () (list ci15eb@y)) ci15fa@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci15f8@t))))))) (let ((ci15fc@t (car ci15f0@x))) (let ((ci15fe@ls/false (cid77@syntax-dispatch ci15fc@t '(#(scheme-id quote) ())))) (if ci15fe@ls/false (apply (lambda () (ci15f2@f (cdr ci15f0@x))) ci15fe@ls/false) (let ((ci1600@t ci15fc@t)) (let ((ci1602@ls/false (cid77@syntax-dispatch ci1600@t '_))) (if ci1602@ls/false (apply (lambda () (cons (car ci15f0@x) (ci15f2@f (cdr ci15f0@x)))) ci1602@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1600@t))))))))))) (if (null? ci15ee@ls) (list (cicff@scheme-stx 'quote) '()) (if (null? (cdr ci15ee@ls)) (car ci15ee@ls) (cons* (cicff@scheme-stx 'append) ci15ee@ls)))))) (ci1553@quasivector (lambda (ci15b8@x) (let ((ci15ba@pat-x ci15b8@x)) (let ((ci15bc@t ci15ba@pat-x)) (let ((ci15be@ls/false (cid77@syntax-dispatch ci15bc@t '(#(scheme-id quote) each-any)))) (if ci15be@ls/false (apply (lambda (ci15c0@x*) (list (cicff@scheme-stx 'quote) (list->vector ci15c0@x*))) ci15be@ls/false) (let ((ci15c2@t ci15bc@t)) (let ((ci15c4@ls/false (cid77@syntax-dispatch ci15c2@t '_))) (if ci15c4@ls/false (apply (lambda () (let ci15cc@f ((ci15c6@x ci15b8@x) (ci15c7@k (lambda (ci15ca@ls) (cons* (cicff@scheme-stx 'vector) ci15ca@ls)))) (let ((ci15ce@t ci15c6@x)) (let ((ci15d0@ls/false (cid77@syntax-dispatch ci15ce@t '(#(scheme-id quote) each-any)))) (if ci15d0@ls/false (apply (lambda (ci15d2@x*) (ci15c7@k (map (lambda (ci15d4@x) (list (cicff@scheme-stx 'quote) ci15d4@x)) ci15d2@x*))) ci15d0@ls/false) (let ((ci15d6@t ci15ce@t)) (let ((ci15d8@ls/false (cid77@syntax-dispatch ci15d6@t '(#(scheme-id list) . each-any)))) (if ci15d8@ls/false (apply (lambda (ci15da@x*) (ci15c7@k ci15da@x*)) ci15d8@ls/false) (let ((ci15dc@t ci15d6@t)) (let ((ci15de@ls/false (cid77@syntax-dispatch ci15dc@t '(#(scheme-id cons) any any)))) (if ci15de@ls/false (apply (lambda (ci15e0@x ci15e1@y) (ci15cc@f ci15e1@y (lambda (ci15e4@ls) (ci15c7@k (cons ci15e0@x ci15e4@ls))))) ci15de@ls/false) (let ((ci15e6@t ci15dc@t)) (let ((ci15e8@ls/false (cid77@syntax-dispatch ci15e6@t '_))) (if ci15e8@ls/false (apply (lambda () (list (cicff@scheme-stx 'list->vector) ci15ba@pat-x)) ci15e8@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci15e6@t))))))))))))))) ci15c4@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci15c2@t)))))))))) (ci1555@vquasi (lambda (ci1596@p ci1597@lev) (let ((ci159a@t ci1596@p)) (let ((ci159c@ls/false (cid77@syntax-dispatch ci159a@t '(any . any)))) (if ci159c@ls/false (apply (lambda (ci159e@p ci159f@q) (let ((ci15a2@t ci159e@p)) (let ((ci15a4@ls/false (cid77@syntax-dispatch ci15a2@t '(#(scheme-id unquote) . each-any)))) (if ci15a4@ls/false (apply (lambda (ci15a6@p) (if (= ci1597@lev '0) (ci154d@quasicons* ci15a6@p (ci1555@vquasi ci159f@q ci1597@lev)) (ci154f@quasicons (ci154f@quasicons (ci1531@datum 'unquote) (ci1557@quasi ci15a6@p (- ci1597@lev '1))) (ci1555@vquasi ci159f@q ci1597@lev)))) ci15a4@ls/false) (let ((ci15a8@t ci15a2@t)) (let ((ci15aa@ls/false (cid77@syntax-dispatch ci15a8@t '(#(scheme-id unquote-splicing) . each-any)))) (if ci15aa@ls/false (apply (lambda (ci15ac@p) (if (= ci1597@lev '0) (ci1551@quasiappend ci15ac@p (ci1555@vquasi ci159f@q ci1597@lev)) (ci154f@quasicons (ci154f@quasicons (ci1531@datum 'unquote-splicing) (ci1557@quasi ci15ac@p (- ci1597@lev '1))) (ci1555@vquasi ci159f@q ci1597@lev)))) ci15aa@ls/false) (let ((ci15ae@t ci15a8@t)) (let ((ci15b0@ls/false (cid77@syntax-dispatch ci15ae@t 'any))) (if ci15b0@ls/false (apply (lambda (ci15b2@p) (ci154f@quasicons (ci1557@quasi ci15b2@p ci1597@lev) (ci1555@vquasi ci159f@q ci1597@lev))) ci15b0@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci15ae@t))))))))))) ci159c@ls/false) (let ((ci15b4@t ci159a@t)) (let ((ci15b6@ls/false (cid77@syntax-dispatch ci15b4@t '()))) (if ci15b6@ls/false (apply (lambda () (list (cicff@scheme-stx 'quote) '())) ci15b6@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci15b4@t))))))))) (ci1557@quasi (lambda (ci1560@p ci1561@lev) (let ((ci1564@t ci1560@p)) (let ((ci1566@ls/false (cid77@syntax-dispatch ci1564@t '(#(scheme-id unquote) any)))) (if ci1566@ls/false (apply (lambda (ci1568@p) (if (= ci1561@lev '0) ci1568@p (ci154f@quasicons (ci1531@datum 'unquote) (ci1557@quasi (list ci1568@p) (- ci1561@lev '1))))) ci1566@ls/false) (let ((ci156a@t ci1564@t)) (let ((ci156c@ls/false (cid77@syntax-dispatch ci156a@t '((#(scheme-id unquote) . each-any) . any)))) (if ci156c@ls/false (apply (lambda (ci156e@p ci156f@q) (if (= ci1561@lev '0) (ci154d@quasicons* ci156e@p (ci1557@quasi ci156f@q ci1561@lev)) (ci154f@quasicons (ci154f@quasicons (ci1531@datum 'unquote) (ci1557@quasi ci156e@p (- ci1561@lev '1))) (ci1557@quasi ci156f@q ci1561@lev)))) ci156c@ls/false) (let ((ci1572@t ci156a@t)) (let ((ci1574@ls/false (cid77@syntax-dispatch ci1572@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if ci1574@ls/false (apply (lambda (ci1576@p ci1577@q) (if (= ci1561@lev '0) (ci1551@quasiappend ci1576@p (ci1557@quasi ci1577@q ci1561@lev)) (ci154f@quasicons (ci154f@quasicons (ci1531@datum 'unquote-splicing) (ci1557@quasi ci1576@p (- ci1561@lev '1))) (ci1557@quasi ci1577@q ci1561@lev)))) ci1574@ls/false) (let ((ci157a@t ci1572@t)) (let ((ci157c@ls/false (cid77@syntax-dispatch ci157a@t '(#(scheme-id quasiquote) any)))) (if ci157c@ls/false (apply (lambda (ci157e@p) (ci154f@quasicons (ci1531@datum 'quasiquote) (ci1557@quasi (list ci157e@p) (+ ci1561@lev '1)))) ci157c@ls/false) (let ((ci1580@t ci157a@t)) (let ((ci1582@ls/false (cid77@syntax-dispatch ci1580@t '(any . any)))) (if ci1582@ls/false (apply (lambda (ci1584@p ci1585@q) (ci154f@quasicons (ci1557@quasi ci1584@p ci1561@lev) (ci1557@quasi ci1585@q ci1561@lev))) ci1582@ls/false) (let ((ci1588@t ci1580@t)) (let ((ci158a@ls/false (cid77@syntax-dispatch ci1588@t '#(vector each-any)))) (if (and ci158a@ls/false (apply (lambda (ci158c@x) (not (cib3c@stx? ci158c@x))) ci158a@ls/false)) (apply (lambda (ci158e@x) (ci1553@quasivector (ci1555@vquasi ci158e@x ci1561@lev))) ci158a@ls/false) (let ((ci1590@t ci1588@t)) (let ((ci1592@ls/false (cid77@syntax-dispatch ci1590@t 'any))) (if ci1592@ls/false (apply (lambda (ci1594@p) (list (cicff@scheme-stx 'quote) ci1594@p)) ci1592@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1590@t))))))))))))))))))))))))) (lambda (ci1558@x) (let ((ci155a@t ci1558@x)) (let ((ci155c@ls/false (cid77@syntax-dispatch ci155a@t '(_ any)))) (if ci155c@ls/false (apply (lambda (ci155e@e) (ci1557@quasi ci155e@e '0)) ci155c@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci155a@t))))))) (set! ci2844@cid65@quasiquote-macro cid65@quasiquote-macro) (set! cid67@quasisyntax-macro (letrec* ((ci1635@quasi (lambda (ci1650@p ci1651@lev) (let ((ci1654@t ci1650@p)) (let ((ci1656@ls/false (cid77@syntax-dispatch ci1654@t '(#(scheme-id unsyntax) any)))) (if ci1656@ls/false (apply (lambda (ci1658@p) (if (= ci1651@lev '0) (let ((ci165a@g (gensym))) (values (list ci165a@g) (list ci1658@p) ci165a@g)) (call-with-values (lambda () (ci1635@quasi ci1658@p (- ci1651@lev '1))) (lambda (ci1662@ci165d ci1663@ci165f ci1664@ci1661) (let ((ci1668@p ci1664@ci1661) (ci1669@rhs* ci1663@ci165f) (ci166a@lhs* ci1662@ci165d)) (values ci166a@lhs* ci1669@rhs* (list 'unsyntax ci1668@p))))))) ci1656@ls/false) (let ((ci166e@t ci1654@t)) (let ((ci1670@ls/false (cid77@syntax-dispatch ci166e@t '#(scheme-id unsyntax)))) (if (and ci1670@ls/false (apply (lambda () (= ci1651@lev '0)) ci1670@ls/false)) (apply (lambda () (cie57@syntax-violation '#f '"incorrect use of unsyntax" ci1650@p)) ci1670@ls/false) (let ((ci1672@t ci166e@t)) (let ((ci1674@ls/false (cid77@syntax-dispatch ci1672@t '((#(scheme-id unsyntax) . each-any) . any)))) (if ci1674@ls/false (apply (lambda (ci1676@p* ci1677@q) (call-with-values (lambda () (ci1635@quasi ci1677@q ci1651@lev)) (lambda (ci1680@ci167b ci1681@ci167d ci1682@ci167f) (let ((ci1686@q ci1682@ci167f) (ci1687@rhs* ci1681@ci167d) (ci1688@lhs* ci1680@ci167b)) (if (= ci1651@lev '0) (let ((ci168c@g* (map (lambda (ci168e@x) (gensym)) ci1676@p*))) (values (append ci168c@g* ci1688@lhs*) (append ci1676@p* ci1687@rhs*) (append ci168c@g* ci1686@q))) (call-with-values (lambda () (ci1635@quasi ci1676@p* (- ci1651@lev '1))) (lambda (ci1696@ci1691 ci1697@ci1693 ci1698@ci1695) (let ((ci169c@p* ci1698@ci1695) (ci169d@rhs2* ci1697@ci1693) (ci169e@lhs2* ci1696@ci1691)) (values (append ci169e@lhs2* ci1688@lhs*) (append ci169d@rhs2* ci1687@rhs*) (cons (cons 'unsyntax ci169c@p*) ci1686@q)))))))))) ci1674@ls/false) (let ((ci16a2@t ci1672@t)) (let ((ci16a4@ls/false (cid77@syntax-dispatch ci16a2@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if ci16a4@ls/false (apply (lambda (ci16a6@p* ci16a7@q) (call-with-values (lambda () (ci1635@quasi ci16a7@q ci1651@lev)) (lambda (ci16b0@ci16ab ci16b1@ci16ad ci16b2@ci16af) (let ((ci16b6@q ci16b2@ci16af) (ci16b7@rhs* ci16b1@ci16ad) (ci16b8@lhs* ci16b0@ci16ab)) (if (= ci1651@lev '0) (let ((ci16bc@g* (map (lambda (ci16be@x) (gensym)) ci16a6@p*))) (values (append (map (lambda (ci16c0@g) (cons ci16c0@g '(...))) ci16bc@g*) ci16b8@lhs*) (append ci16a6@p* ci16b7@rhs*) (append (apply append (map (lambda (ci16c2@g) (cons ci16c2@g '(...))) ci16bc@g*)) ci16b6@q))) (call-with-values (lambda () (ci1635@quasi ci16a6@p* (- ci1651@lev '1))) (lambda (ci16ca@ci16c5 ci16cb@ci16c7 ci16cc@ci16c9) (let ((ci16d0@p* ci16cc@ci16c9) (ci16d1@rhs2* ci16cb@ci16c7) (ci16d2@lhs2* ci16ca@ci16c5)) (values (append ci16d2@lhs2* ci16b8@lhs*) (append ci16d1@rhs2* ci16b7@rhs*) (cons (cons 'unsyntax-splicing ci16d0@p*) ci16b6@q)))))))))) ci16a4@ls/false) (let ((ci16d6@t ci16a2@t)) (let ((ci16d8@ls/false (cid77@syntax-dispatch ci16d6@t '#(scheme-id unsyntax-splicing)))) (if (and ci16d8@ls/false (apply (lambda () (= ci1651@lev '0)) ci16d8@ls/false)) (apply (lambda () (cie57@syntax-violation '#f '"incorrect use of unsyntax-splicing" ci1650@p)) ci16d8@ls/false) (let ((ci16da@t ci16d6@t)) (let ((ci16dc@ls/false (cid77@syntax-dispatch ci16da@t '(#(scheme-id quasisyntax) any)))) (if ci16dc@ls/false (apply (lambda (ci16de@p) (call-with-values (lambda () (ci1635@quasi ci16de@p (+ ci1651@lev '1))) (lambda (ci16e6@ci16e1 ci16e7@ci16e3 ci16e8@ci16e5) (let ((ci16ec@p ci16e8@ci16e5) (ci16ed@rhs* ci16e7@ci16e3) (ci16ee@lhs* ci16e6@ci16e1)) (values ci16ee@lhs* ci16ed@rhs* (list 'quasisyntax ci16ec@p)))))) ci16dc@ls/false) (let ((ci16f2@t ci16da@t)) (let ((ci16f4@ls/false (cid77@syntax-dispatch ci16f2@t '(any . any)))) (if ci16f4@ls/false (apply (lambda (ci16f6@p ci16f7@q) (call-with-values (lambda () (ci1635@quasi ci16f6@p ci1651@lev)) (lambda (ci1706@ci16fb ci1707@ci16fd ci1708@ci16ff) (call-with-values (lambda () (ci1635@quasi ci16f7@q ci1651@lev)) (lambda (ci170c@ci1701 ci170d@ci1703 ci170e@ci1705) (let ((ci1712@q ci170e@ci1705) (ci1713@rhs2* ci170d@ci1703) (ci1714@lhs2* ci170c@ci1701) (ci1715@p ci1708@ci16ff) (ci1716@rhs* ci1707@ci16fd) (ci1717@lhs* ci1706@ci16fb)) (values (append ci1714@lhs2* ci1717@lhs*) (append ci1713@rhs2* ci1716@rhs*) (cons ci1715@p ci1712@q)))))))) ci16f4@ls/false) (let ((ci171e@t ci16f2@t)) (let ((ci1720@ls/false (cid77@syntax-dispatch ci171e@t '#(vector each-any)))) (if ci1720@ls/false (apply (lambda (ci1722@x*) (call-with-values (lambda () (ci1635@quasi ci1722@x* ci1651@lev)) (lambda (ci172a@ci1725 ci172b@ci1727 ci172c@ci1729) (let ((ci1730@x* ci172c@ci1729) (ci1731@rhs* ci172b@ci1727) (ci1732@lhs* ci172a@ci1725)) (values ci1732@lhs* ci1731@rhs* (list->vector ci1730@x*)))))) ci1720@ls/false) (let ((ci1736@t ci171e@t)) (let ((ci1738@ls/false (cid77@syntax-dispatch ci1736@t '_))) (if ci1738@ls/false (apply (lambda () (values '() '() ci1650@p)) ci1738@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1736@t))))))))))))))))))))))))))))))) (lambda (ci1636@x) (let ((ci1638@t ci1636@x)) (let ((ci163a@ls/false (cid77@syntax-dispatch ci1638@t '(_ any)))) (if ci163a@ls/false (apply (lambda (ci163c@e) (call-with-values (lambda () (ci1635@quasi ci163c@e '0)) (lambda (ci1644@ci163f ci1645@ci1641 ci1646@ci1643) (let ((ci164a@v ci1646@ci1643) (ci164b@rhs* ci1645@ci1641) (ci164c@lhs* ci1644@ci163f)) (cid2d@bless (list 'syntax-case (cons 'list ci164b@rhs*) '() (list ci164c@lhs* (list 'syntax ci164a@v)))))))) ci163a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1638@t))))))) (set! ci2845@cid67@quasisyntax-macro cid67@quasisyntax-macro) (set! cid69@define-struct-macro (lambda (ci173a@stx) (cie57@syntax-violation '#f '"define-struct not supported" ci173a@stx))) (set! ci2846@cid69@define-struct-macro cid69@define-struct-macro) (set! cid6b@define-record-type-macro (lambda (ci173c@x) (letrec* ((ci173f@id (lambda (ci1932@ctxt . ci1934@str*) (cie5b@datum->syntax ci1932@ctxt (string->symbol (apply string-append (map (lambda (ci1936@x) (if (symbol? ci1936@x) (symbol->string ci1936@x) (if (string? ci1936@x) ci1936@x (assertion-violation 'define-record-type '"BUG")))) ci1934@str*)))))) (ci1741@get-record-name (lambda (ci1920@spec) (let ((ci1922@t ci1920@spec)) (let ((ci1924@ls/false (cid77@syntax-dispatch ci1922@t '(any any any)))) (if ci1924@ls/false (apply (lambda (ci1926@foo ci1927@make-foo ci1928@foo?) ci1926@foo) ci1924@ls/false) (let ((ci192c@t ci1922@t)) (let ((ci192e@ls/false (cid77@syntax-dispatch ci192c@t 'any))) (if ci192e@ls/false (apply (lambda (ci1930@foo) ci1930@foo) ci192e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci192c@t))))))))) (ci1743@get-record-constructor-name (lambda (ci190c@spec) (let ((ci190e@t ci190c@spec)) (let ((ci1910@ls/false (cid77@syntax-dispatch ci190e@t '(any any any)))) (if ci1910@ls/false (apply (lambda (ci1912@foo ci1913@make-foo ci1914@foo?) ci1913@make-foo) ci1910@ls/false) (let ((ci1918@t ci190e@t)) (let ((ci191a@ls/false (cid77@syntax-dispatch ci1918@t 'any))) (if (and ci191a@ls/false (apply (lambda (ci191c@foo) (cib70@id? ci191c@foo)) ci191a@ls/false)) (apply (lambda (ci191e@foo) (ci173f@id ci191e@foo '"make-" (cib84@stx->datum ci191e@foo))) ci191a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1918@t))))))))) (ci1745@get-record-predicate-name (lambda (ci18f8@spec) (let ((ci18fa@t ci18f8@spec)) (let ((ci18fc@ls/false (cid77@syntax-dispatch ci18fa@t '(any any any)))) (if ci18fc@ls/false (apply (lambda (ci18fe@foo ci18ff@make-foo ci1900@foo?) ci1900@foo?) ci18fc@ls/false) (let ((ci1904@t ci18fa@t)) (let ((ci1906@ls/false (cid77@syntax-dispatch ci1904@t 'any))) (if (and ci1906@ls/false (apply (lambda (ci1908@foo) (cib70@id? ci1908@foo)) ci1906@ls/false)) (apply (lambda (ci190a@foo) (ci173f@id ci190a@foo (cib84@stx->datum ci190a@foo) '"?")) ci1906@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1904@t))))))))) (ci1747@get-clause (lambda (ci18e6@id ci18e7@ls) (let ((ci18ea@t ci18e7@ls)) (let ((ci18ec@ls/false (cid77@syntax-dispatch ci18ea@t '()))) (if ci18ec@ls/false (apply (lambda () '#f) ci18ec@ls/false) (let ((ci18ee@t ci18ea@t)) (let ((ci18f0@ls/false (cid77@syntax-dispatch ci18ee@t '((any . any) . any)))) (if ci18f0@ls/false (apply (lambda (ci18f2@x ci18f3@rest ci18f4@ls) (if (cib76@free-id=? (cid2d@bless ci18e6@id) ci18f2@x) (cons ci18f2@x ci18f3@rest) (ci1747@get-clause ci18e6@id ci18f4@ls))) ci18f0@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci18ee@t))))))))) (ci1749@foo-rtd-code (lambda (ci1894@name ci1895@clause* ci1896@parent-rtd-code) (letrec* ((ci189b@convert-field-spec* (lambda (ci18cc@ls) (list->vector (map (lambda (ci18ce@x) (let ((ci18d0@t ci18ce@x)) (let ((ci18d2@ls/false (cid77@syntax-dispatch ci18d0@t '(#(scheme-id mutable) any . any)))) (if ci18d2@ls/false (apply (lambda (ci18d4@name ci18d5@rest) (list 'mutable ci18d4@name)) ci18d2@ls/false) (let ((ci18d8@t ci18d0@t)) (let ((ci18da@ls/false (cid77@syntax-dispatch ci18d8@t '(#(scheme-id immutable) any . any)))) (if ci18da@ls/false (apply (lambda (ci18dc@name ci18dd@rest) (list 'immutable ci18dc@name)) ci18da@ls/false) (let ((ci18e0@t ci18d8@t)) (let ((ci18e2@ls/false (cid77@syntax-dispatch ci18e0@t 'any))) (if ci18e2@ls/false (apply (lambda (ci18e4@name) (list 'immutable ci18e4@name)) ci18e2@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci18e0@t))))))))))) ci18cc@ls))))) (let ((ci189c@uid-code (let ((ci18a4@t (ci1747@get-clause 'nongenerative ci1895@clause*))) (let ((ci18a6@ls/false (cid77@syntax-dispatch ci18a4@t '(_)))) (if ci18a6@ls/false (apply (lambda () (list 'quote (gensym))) ci18a6@ls/false) (let ((ci18a8@t ci18a4@t)) (let ((ci18aa@ls/false (cid77@syntax-dispatch ci18a8@t '(_ any)))) (if ci18aa@ls/false (apply (lambda (ci18ac@uid) (list 'quote ci18ac@uid)) ci18aa@ls/false) (let ((ci18ae@t ci18a8@t)) (let ((ci18b0@ls/false (cid77@syntax-dispatch ci18ae@t '_))) (if ci18b0@ls/false (apply (lambda () '#f) ci18b0@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci18ae@t))))))))))) (ci189d@sealed? (let ((ci18b2@t (ci1747@get-clause 'sealed ci1895@clause*))) (let ((ci18b4@ls/false (cid77@syntax-dispatch ci18b2@t '(_ #(atom #t))))) (if ci18b4@ls/false (apply (lambda () '#t) ci18b4@ls/false) (let ((ci18b6@t ci18b2@t)) (let ((ci18b8@ls/false (cid77@syntax-dispatch ci18b6@t '_))) (if ci18b8@ls/false (apply (lambda () '#f) ci18b8@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci18b6@t)))))))) (ci189e@opaque? (let ((ci18ba@t (ci1747@get-clause 'opaque ci1895@clause*))) (let ((ci18bc@ls/false (cid77@syntax-dispatch ci18ba@t '(_ #(atom #t))))) (if ci18bc@ls/false (apply (lambda () '#t) ci18bc@ls/false) (let ((ci18be@t ci18ba@t)) (let ((ci18c0@ls/false (cid77@syntax-dispatch ci18be@t '_))) (if ci18c0@ls/false (apply (lambda () '#f) ci18c0@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci18be@t)))))))) (ci189f@fields (let ((ci18c2@t (ci1747@get-clause 'fields ci1895@clause*))) (let ((ci18c4@ls/false (cid77@syntax-dispatch ci18c2@t '(_ . each-any)))) (if ci18c4@ls/false (apply (lambda (ci18c6@field-spec*) (list 'quote (ci189b@convert-field-spec* ci18c6@field-spec*))) ci18c4@ls/false) (let ((ci18c8@t ci18c2@t)) (let ((ci18ca@ls/false (cid77@syntax-dispatch ci18c8@t '_))) (if ci18ca@ls/false (apply (lambda () ''#()) ci18ca@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci18c8@t))))))))) (cid2d@bless (list 'make-record-type-descriptor (list 'quote ci1894@name) ci1896@parent-rtd-code ci189c@uid-code ci189d@sealed? ci189e@opaque? ci189f@fields)))))) (ci174b@parent-rtd-code (lambda (ci187c@clause*) (let ((ci187e@t (ci1747@get-clause 'parent ci187c@clause*))) (let ((ci1880@ls/false (cid77@syntax-dispatch ci187e@t '(_ any)))) (if ci1880@ls/false (apply (lambda (ci1882@name) (list 'record-type-descriptor ci1882@name)) ci1880@ls/false) (let ((ci1884@t ci187e@t)) (let ((ci1886@ls/false (cid77@syntax-dispatch ci1884@t '#(atom #f)))) (if ci1886@ls/false (apply (lambda () (let ((ci1888@t (ci1747@get-clause 'parent-rtd ci187c@clause*))) (let ((ci188a@ls/false (cid77@syntax-dispatch ci1888@t '(_ any any)))) (if ci188a@ls/false (apply (lambda (ci188c@rtd ci188d@rcd) ci188c@rtd) ci188a@ls/false) (let ((ci1890@t ci1888@t)) (let ((ci1892@ls/false (cid77@syntax-dispatch ci1890@t '#(atom #f)))) (if ci1892@ls/false (apply (lambda () '#f) ci1892@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1890@t)))))))) ci1886@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1884@t))))))))) (ci174d@parent-rcd-code (lambda (ci1864@clause*) (let ((ci1866@t (ci1747@get-clause 'parent ci1864@clause*))) (let ((ci1868@ls/false (cid77@syntax-dispatch ci1866@t '(_ any)))) (if ci1868@ls/false (apply (lambda (ci186a@name) (list 'record-constructor-descriptor ci186a@name)) ci1868@ls/false) (let ((ci186c@t ci1866@t)) (let ((ci186e@ls/false (cid77@syntax-dispatch ci186c@t '#(atom #f)))) (if ci186e@ls/false (apply (lambda () (let ((ci1870@t (ci1747@get-clause 'parent-rtd ci1864@clause*))) (let ((ci1872@ls/false (cid77@syntax-dispatch ci1870@t '(_ any any)))) (if ci1872@ls/false (apply (lambda (ci1874@rtd ci1875@rcd) ci1875@rcd) ci1872@ls/false) (let ((ci1878@t ci1870@t)) (let ((ci187a@ls/false (cid77@syntax-dispatch ci1878@t '#(atom #f)))) (if ci187a@ls/false (apply (lambda () '#f) ci187a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1878@t)))))))) ci186e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci186c@t))))))))) (ci174f@foo-rcd-code (lambda (ci185c@clause* ci185d@foo-rtd ci185e@protocol ci185f@parent-rcd-code) (list 'make-record-constructor-descriptor ci185d@foo-rtd ci185f@parent-rcd-code ci185e@protocol))) (ci1751@get-protocol-code (lambda (ci1850@clause*) (let ((ci1852@t (ci1747@get-clause 'protocol ci1850@clause*))) (let ((ci1854@ls/false (cid77@syntax-dispatch ci1852@t '(_ any)))) (if ci1854@ls/false (apply (lambda (ci1856@expr) ci1856@expr) ci1854@ls/false) (let ((ci1858@t ci1852@t)) (let ((ci185a@ls/false (cid77@syntax-dispatch ci1858@t '_))) (if ci185a@ls/false (apply (lambda () '#f) ci185a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1858@t))))))))) (ci1753@get-fields (lambda (ci183e@clause*) (let ((ci1840@t ci183e@clause*)) (let ((ci1842@ls/false (cid77@syntax-dispatch ci1840@t '()))) (if ci1842@ls/false (apply (lambda () '()) ci1842@ls/false) (let ((ci1844@t ci1840@t)) (let ((ci1846@ls/false (cid77@syntax-dispatch ci1844@t '((#(scheme-id fields) . each-any) . _)))) (if ci1846@ls/false (apply (lambda (ci1848@f*) ci1848@f*) ci1846@ls/false) (let ((ci184a@t ci1844@t)) (let ((ci184c@ls/false (cid77@syntax-dispatch ci184a@t '(_ . any)))) (if ci184c@ls/false (apply (lambda (ci184e@rest) (ci1753@get-fields ci184e@rest)) ci184c@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci184a@t)))))))))))) (ci1755@get-mutator-indices (lambda (ci1826@fields) (let ci182c@f ((ci1828@fields ci1826@fields) (ci1829@i '0)) (let ((ci182e@t ci1828@fields)) (let ((ci1830@ls/false (cid77@syntax-dispatch ci182e@t '()))) (if ci1830@ls/false (apply (lambda () '()) ci1830@ls/false) (let ((ci1832@t ci182e@t)) (let ((ci1834@ls/false (cid77@syntax-dispatch ci1832@t '((#(scheme-id mutable) . _) . any)))) (if ci1834@ls/false (apply (lambda (ci1836@rest) (cons ci1829@i (ci182c@f ci1836@rest (+ ci1829@i '1)))) ci1834@ls/false) (let ((ci1838@t ci1832@t)) (let ((ci183a@ls/false (cid77@syntax-dispatch ci1838@t '(_ . any)))) (if ci183a@ls/false (apply (lambda (ci183c@rest) (ci182c@f ci183c@rest (+ ci1829@i '1))) ci183a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1838@t))))))))))))) (ci1757@get-mutators (lambda (ci17fc@foo ci17fd@fields) (letrec* ((ci1801@gen-name (lambda (ci1824@x) (cie5b@datum->syntax ci17fc@foo (string->symbol (string-append (symbol->string (cie5d@syntax->datum ci17fc@foo)) '"-" (symbol->string (cie5d@syntax->datum ci1824@x)) '"-set!")))))) (let ci1804@f ((ci1802@fields ci17fd@fields)) (let ((ci1806@t ci1802@fields)) (let ((ci1808@ls/false (cid77@syntax-dispatch ci1806@t '()))) (if ci1808@ls/false (apply (lambda () '()) ci1808@ls/false) (let ((ci180a@t ci1806@t)) (let ((ci180c@ls/false (cid77@syntax-dispatch ci180a@t '((#(scheme-id mutable) any any any) . any)))) (if ci180c@ls/false (apply (lambda (ci180e@name ci180f@accessor ci1810@mutator ci1811@rest) (cons ci1810@mutator (ci1804@f ci1811@rest))) ci180c@ls/false) (let ((ci1816@t ci180a@t)) (let ((ci1818@ls/false (cid77@syntax-dispatch ci1816@t '((#(scheme-id mutable) any) . any)))) (if ci1818@ls/false (apply (lambda (ci181a@name ci181b@rest) (cons (ci1801@gen-name ci181a@name) (ci1804@f ci181b@rest))) ci1818@ls/false) (let ((ci181e@t ci1816@t)) (let ((ci1820@ls/false (cid77@syntax-dispatch ci181e@t '(_ . any)))) (if ci1820@ls/false (apply (lambda (ci1822@rest) (ci1804@f ci1822@rest)) ci1820@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci181e@t))))))))))))))))) (ci1759@get-accessors (lambda (ci17b8@foo ci17b9@fields) (letrec* ((ci17bd@gen-name (lambda (ci17fa@x) (cie5b@datum->syntax ci17b8@foo (string->symbol (string-append (symbol->string (cie5d@syntax->datum ci17b8@foo)) '"-" (symbol->string (cie5d@syntax->datum ci17fa@x)))))))) (map (lambda (ci17be@field) (let ((ci17c0@t ci17be@field)) (let ((ci17c2@ls/false (cid77@syntax-dispatch ci17c0@t '(#(scheme-id mutable) any any any)))) (if (and ci17c2@ls/false (apply (lambda (ci17c4@name ci17c5@accessor ci17c6@mutator) (cib70@id? ci17c5@accessor)) ci17c2@ls/false)) (apply (lambda (ci17ca@name ci17cb@accessor ci17cc@mutator) ci17cb@accessor) ci17c2@ls/false) (let ((ci17d0@t ci17c0@t)) (let ((ci17d2@ls/false (cid77@syntax-dispatch ci17d0@t '(#(scheme-id immutable) any any)))) (if (and ci17d2@ls/false (apply (lambda (ci17d4@name ci17d5@accessor) (cib70@id? ci17d5@accessor)) ci17d2@ls/false)) (apply (lambda (ci17d8@name ci17d9@accessor) ci17d9@accessor) ci17d2@ls/false) (let ((ci17dc@t ci17d0@t)) (let ((ci17de@ls/false (cid77@syntax-dispatch ci17dc@t '(#(scheme-id mutable) any)))) (if (and ci17de@ls/false (apply (lambda (ci17e0@name) (cib70@id? ci17e0@name)) ci17de@ls/false)) (apply (lambda (ci17e2@name) (ci17bd@gen-name ci17e2@name)) ci17de@ls/false) (let ((ci17e4@t ci17dc@t)) (let ((ci17e6@ls/false (cid77@syntax-dispatch ci17e4@t '(#(scheme-id immutable) any)))) (if (and ci17e6@ls/false (apply (lambda (ci17e8@name) (cib70@id? ci17e8@name)) ci17e6@ls/false)) (apply (lambda (ci17ea@name) (ci17bd@gen-name ci17ea@name)) ci17e6@ls/false) (let ((ci17ec@t ci17e4@t)) (let ((ci17ee@ls/false (cid77@syntax-dispatch ci17ec@t 'any))) (if (and ci17ee@ls/false (apply (lambda (ci17f0@name) (cib70@id? ci17f0@name)) ci17ee@ls/false)) (apply (lambda (ci17f2@name) (ci17bd@gen-name ci17f2@name)) ci17ee@ls/false) (let ((ci17f4@t ci17ec@t)) (let ((ci17f6@ls/false (cid77@syntax-dispatch ci17f4@t 'any))) (if ci17f6@ls/false (apply (lambda (ci17f8@others) (cie57@syntax-violation '#f '"invalid field spec" ci17be@field)) ci17f6@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci17f4@t)))))))))))))))))))) ci17b9@fields)))) (ci175b@enumerate (lambda (ci17b0@ls) (let ci17b6@f ((ci17b2@ls ci17b0@ls) (ci17b3@i '0)) (if (null? ci17b2@ls) '() (cons ci17b3@i (ci17b6@f (cdr ci17b2@ls) (+ ci17b3@i '1))))))) (ci175d@do-define-record (lambda (ci1788@namespec ci1789@clause*) (let ((ci178c@foo (ci1741@get-record-name ci1788@namespec))) (let ((ci178e@foo-rtd (gensym))) (let ((ci1790@foo-rcd (gensym))) (let ((ci1792@protocol (gensym))) (let ((ci1794@make-foo (ci1743@get-record-constructor-name ci1788@namespec))) (let ((ci1796@fields (ci1753@get-fields ci1789@clause*))) (let ((ci1798@idx* (ci175b@enumerate ci1796@fields))) (let ((ci179a@foo-x* (ci1759@get-accessors ci178c@foo ci1796@fields))) (let ((ci179c@set-foo-x!* (ci1757@get-mutators ci178c@foo ci1796@fields))) (let ((ci179e@set-foo-idx* (ci1755@get-mutator-indices ci1796@fields))) (let ((ci17a0@foo? (ci1745@get-record-predicate-name ci1788@namespec))) (let ((ci17a2@foo-rtd-code (ci1749@foo-rtd-code ci178c@foo ci1789@clause* (ci174b@parent-rtd-code ci1789@clause*)))) (let ((ci17a4@foo-rcd-code (ci174f@foo-rcd-code ci1789@clause* ci178e@foo-rtd ci1792@protocol (ci174d@parent-rcd-code ci1789@clause*)))) (let ((ci17a6@protocol-code (ci1751@get-protocol-code ci1789@clause*))) (cid2d@bless (cons 'begin (cons (list 'define ci178e@foo-rtd ci17a2@foo-rtd-code) (cons (list 'define ci1792@protocol ci17a6@protocol-code) (cons (list 'define ci1790@foo-rcd ci17a4@foo-rcd-code) (cons (list 'define-syntax ci178c@foo (list 'list ''$rtd (list 'syntax ci178e@foo-rtd) (list 'syntax ci1790@foo-rcd))) (cons (list 'define ci17a0@foo? (list 'record-predicate ci178e@foo-rtd)) (cons (list 'define ci1794@make-foo (list 'record-constructor ci1790@foo-rcd)) (append (map (lambda (ci17a8@foo-x ci17a9@idx) (list 'define ci17a8@foo-x (list 'record-accessor ci178e@foo-rtd ci17a9@idx))) ci179a@foo-x* ci1798@idx*) (map (lambda (ci17ac@set-foo-x! ci17ad@idx) (list 'define ci17ac@set-foo-x! (list 'record-mutator ci178e@foo-rtd ci17ad@idx))) ci179c@set-foo-x!* ci179e@set-foo-idx*)))))))))))))))))))))))))) (ci175f@verify-clauses (lambda (ci1768@x ci1769@cls*) (letrec* ((ci176d@valid-kwds (map cid2d@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (ci176f@free-id-member? (lambda (ci1784@x ci1785@ls) (and (pair? ci1785@ls) (or (cib76@free-id=? ci1784@x (car ci1785@ls)) (ci176f@free-id-member? ci1784@x (cdr ci1785@ls))))))) (let ci1774@f ((ci1770@cls* ci1769@cls*) (ci1771@seen* '())) (if (not (null? ci1770@cls*)) (let ((ci1776@t (car ci1770@cls*))) (let ((ci1778@ls/false (cid77@syntax-dispatch ci1776@t '(any . any)))) (if ci1778@ls/false (apply (lambda (ci177a@kwd ci177b@rest) (if (or (not (cib70@id? ci177a@kwd)) (not (ci176f@free-id-member? ci177a@kwd ci176d@valid-kwds))) (cie57@syntax-violation '#f '"not a valid define-record-type keyword" ci177a@kwd) (if (cib7c@bound-id-member? ci177a@kwd ci1771@seen*) (cie57@syntax-violation '#f '"duplicate use of keyword " ci1768@x ci177a@kwd) (ci1774@f (cdr ci1770@cls*) (cons ci177a@kwd ci1771@seen*))))) ci1778@ls/false) (let ((ci177e@t ci1776@t)) (let ((ci1780@ls/false (cid77@syntax-dispatch ci177e@t 'any))) (if ci1780@ls/false (apply (lambda (ci1782@cls) (cie57@syntax-violation '#f '"malformed define-record-type clause" ci1782@cls)) ci1780@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci177e@t))))))) (void))))))) (let ((ci1760@t ci173c@x)) (let ((ci1762@ls/false (cid77@syntax-dispatch ci1760@t '(_ any . each-any)))) (if ci1762@ls/false (apply (lambda (ci1764@namespec ci1765@clause*) (begin (ci175f@verify-clauses ci173c@x ci1765@clause*) (ci175d@do-define-record ci1764@namespec ci1765@clause*))) ci1762@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1760@t))))))) (set! ci2847@cid6b@define-record-type-macro cid6b@define-record-type-macro) (set! cid6d@define-condition-type-macro (lambda (ci1938@x) (letrec* ((ci193b@mkname (lambda (ci1968@name ci1969@suffix) (cie5b@datum->syntax ci1968@name (string->symbol (string-append (symbol->string (cie5d@syntax->datum ci1968@name)) ci1969@suffix)))))) (let ((ci193c@t ci1938@x)) (let ((ci193e@ls/false (cid77@syntax-dispatch ci193c@t '(any any any any any . #(each (any any)))))) (if (and ci193e@ls/false (apply (lambda (ci1940@ctxt ci1941@name ci1942@super ci1943@constructor ci1944@predicate ci1945@field* ci1946@accessor*) (and (cib70@id? ci1941@name) (cib70@id? ci1942@super) (cib70@id? ci1943@constructor) (cib70@id? ci1944@predicate) (for-all cib70@id? ci1945@field*) (for-all cib70@id? ci1946@accessor*))) ci193e@ls/false)) (apply (lambda (ci194e@ctxt ci194f@name ci1950@super ci1951@constructor ci1952@predicate ci1953@field* ci1954@accessor*) (let ((ci195c@aux-accessor* (map (lambda (ci195e@x) (gensym)) ci1954@accessor*))) (cid2d@bless (cons 'begin (cons (cons 'define-record-type (cons (list ci194f@name ci1951@constructor (gensym)) (cons (list 'parent ci1950@super) (cons (cons 'fields (map (lambda (ci1960@field ci1961@aux) (list 'immutable ci1960@field ci1961@aux)) ci1953@field* ci195c@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define ci1952@predicate (list 'condition-predicate (list 'record-type-descriptor ci194f@name))) (map (lambda (ci1964@accessor ci1965@aux) (list 'define ci1964@accessor (list 'condition-accessor (list 'record-type-descriptor ci194f@name) ci1965@aux))) ci1954@accessor* ci195c@aux-accessor*))))))) ci193e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci193c@t))))))) (set! ci2848@cid6d@define-condition-type-macro cid6d@define-condition-type-macro) (set! cid6f@incorrect-usage-macro (lambda (ci196c@e) (cie57@syntax-violation '#f '"incorrect usage of auxiliary keyword" ci196c@e))) (set! ci2849@cid6f@incorrect-usage-macro cid6f@incorrect-usage-macro) (set! cid71@parameterize-macro (lambda (ci196e@e) (let ((ci1970@t ci196e@e)) (let ((ci1972@ls/false (cid77@syntax-dispatch ci1970@t '(_ () any . each-any)))) (if ci1972@ls/false (apply (lambda (ci1974@b ci1975@b*) (cid2d@bless (cons 'let (cons '() (cons ci1974@b ci1975@b*))))) ci1972@ls/false) (let ((ci1978@t ci1970@t)) (let ((ci197a@ls/false (cid77@syntax-dispatch ci1978@t '(_ #(each (any any)) any . each-any)))) (if ci197a@ls/false (apply (lambda (ci197c@olhs* ci197d@orhs* ci197e@b ci197f@b*) (let ((ci1984@lhs* (cie45@generate-temporaries ci197c@olhs*)) (ci1985@rhs* (cie45@generate-temporaries ci197d@orhs*))) (cid2d@bless (cons (list 'lambda (append ci1984@lhs* ci1985@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (ci1988@lhs ci1989@rhs) (list 'let (list (list 't (list ci1988@lhs))) (list ci1988@lhs ci1989@rhs) (cons 'set! (cons ci1989@rhs '(t))))) ci1984@lhs* ci1985@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons ci197e@b ci197f@b*))) '(swap)))))) (append ci197c@olhs* ci197d@orhs*))))) ci197a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1978@t))))))))) (set! ci284a@cid71@parameterize-macro cid71@parameterize-macro) (set! cid73@foreign-call-transformer (lambda (ci198c@e ci198d@r ci198e@mr) (let ((ci1992@t ci198c@e)) (let ((ci1994@ls/false (cid77@syntax-dispatch ci1992@t '(_ any . each-any)))) (if ci1994@ls/false (apply (lambda (ci1996@name ci1997@arg*) (cons 'foreign-call (cons (cid99@chi-expr ci1996@name ci198d@r ci198e@mr) (cid95@chi-expr* ci1997@arg* ci198d@r ci198e@mr)))) ci1994@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1992@t)))))) (set! ci284b@cid73@foreign-call-transformer cid73@foreign-call-transformer) (set! cid75@convert-pattern (lambda (ci199a@pattern ci199b@keys) (letrec* ((ci199f@cvt* (lambda (ci1a3e@p* ci1a3f@n ci1a40@ids) (if (null? ci1a3e@p*) (values '() ci1a40@ids) (call-with-values (lambda () (ci199f@cvt* (cdr ci1a3e@p*) ci1a3f@n ci1a40@ids)) (lambda (ci1a48@ci1a45 ci1a49@ci1a47) (let ((ci1a4c@ids ci1a49@ci1a47) (ci1a4d@y ci1a48@ci1a45)) (call-with-values (lambda () (ci19a1@cvt (car ci1a3e@p*) ci1a3f@n ci1a4c@ids)) (lambda (ci1a54@ci1a51 ci1a55@ci1a53) (let ((ci1a58@ids ci1a55@ci1a53) (ci1a59@x ci1a54@ci1a51)) (values (cons ci1a59@x ci1a4d@y) ci1a58@ids)))))))))) (ci19a1@cvt (lambda (ci19a2@p ci19a3@n ci19a4@ids) (let ((ci19a8@t ci19a2@p)) (let ((ci19aa@ls/false (cid77@syntax-dispatch ci19a8@t 'any))) (if (and ci19aa@ls/false (apply (lambda (ci19ac@id) (cib70@id? ci19ac@id)) ci19aa@ls/false)) (apply (lambda (ci19ae@id) (if (cib7c@bound-id-member? ci19a2@p ci199b@keys) (values (vector 'free-id ci19a2@p) ci19a4@ids) (if (cib76@free-id=? ci19a2@p (cicff@scheme-stx '_)) (values '_ ci19a4@ids) (values 'any (cons (cons ci19a2@p ci19a3@n) ci19a4@ids))))) ci19aa@ls/false) (let ((ci19b0@t ci19a8@t)) (let ((ci19b2@ls/false (cid77@syntax-dispatch ci19b0@t '(any any)))) (if (and ci19b2@ls/false (apply (lambda (ci19b4@p ci19b5@dots) (cid79@ellipsis? ci19b5@dots)) ci19b2@ls/false)) (apply (lambda (ci19b8@p ci19b9@dots) (call-with-values (lambda () (ci19a1@cvt ci19b8@p (+ ci19a3@n '1) ci19a4@ids)) (lambda (ci19c0@ci19bd ci19c1@ci19bf) (let ((ci19c4@ids ci19c1@ci19bf) (ci19c5@p ci19c0@ci19bd)) (values (if (eq? ci19c5@p 'any) 'each-any (vector 'each ci19c5@p)) ci19c4@ids))))) ci19b2@ls/false) (let ((ci19c8@t ci19b0@t)) (let ((ci19ca@ls/false (cid77@syntax-dispatch ci19c8@t '(any any . #(each+ any () any))))) (if (and ci19ca@ls/false (apply (lambda (ci19cc@x ci19cd@dots ci19ce@ys ci19cf@z) (cid79@ellipsis? ci19cd@dots)) ci19ca@ls/false)) (apply (lambda (ci19d4@x ci19d5@dots ci19d6@ys ci19d7@z) (call-with-values (lambda () (ci19a1@cvt ci19d7@z ci19a3@n ci19a4@ids)) (lambda (ci19e0@ci19dd ci19e1@ci19df) (let ((ci19e4@ids ci19e1@ci19df) (ci19e5@z ci19e0@ci19dd)) (call-with-values (lambda () (ci199f@cvt* ci19d6@ys ci19a3@n ci19e4@ids)) (lambda (ci19ec@ci19e9 ci19ed@ci19eb) (let ((ci19f0@ids ci19ed@ci19eb) (ci19f1@ys ci19ec@ci19e9)) (call-with-values (lambda () (ci19a1@cvt ci19d4@x (+ ci19a3@n '1) ci19f0@ids)) (lambda (ci19f8@ci19f5 ci19f9@ci19f7) (let ((ci19fc@ids ci19f9@ci19f7) (ci19fd@x ci19f8@ci19f5)) (values (vector 'each+ ci19fd@x (reverse ci19f1@ys) ci19e5@z) ci19fc@ids))))))))))) ci19ca@ls/false) (let ((ci1a00@t ci19c8@t)) (let ((ci1a02@ls/false (cid77@syntax-dispatch ci1a00@t '(any . any)))) (if ci1a02@ls/false (apply (lambda (ci1a04@x ci1a05@y) (call-with-values (lambda () (ci19a1@cvt ci1a05@y ci19a3@n ci19a4@ids)) (lambda (ci1a0c@ci1a09 ci1a0d@ci1a0b) (let ((ci1a10@ids ci1a0d@ci1a0b) (ci1a11@y ci1a0c@ci1a09)) (call-with-values (lambda () (ci19a1@cvt ci1a04@x ci19a3@n ci1a10@ids)) (lambda (ci1a18@ci1a15 ci1a19@ci1a17) (let ((ci1a1c@ids ci1a19@ci1a17) (ci1a1d@x ci1a18@ci1a15)) (values (cons ci1a1d@x ci1a11@y) ci1a1c@ids)))))))) ci1a02@ls/false) (let ((ci1a20@t ci1a00@t)) (let ((ci1a22@ls/false (cid77@syntax-dispatch ci1a20@t '()))) (if ci1a22@ls/false (apply (lambda () (values '() ci19a4@ids)) ci1a22@ls/false) (let ((ci1a24@t ci1a20@t)) (let ((ci1a26@ls/false (cid77@syntax-dispatch ci1a24@t '#(vector each-any)))) (if (and ci1a26@ls/false (apply (lambda (ci1a28@p) (not (cib3c@stx? ci1a28@p))) ci1a26@ls/false)) (apply (lambda (ci1a2a@p) (call-with-values (lambda () (ci19a1@cvt ci1a2a@p ci19a3@n ci19a4@ids)) (lambda (ci1a30@ci1a2d ci1a31@ci1a2f) (let ((ci1a34@ids ci1a31@ci1a2f) (ci1a35@p ci1a30@ci1a2d)) (values (vector 'vector ci1a35@p) ci1a34@ids))))) ci1a26@ls/false) (let ((ci1a38@t ci1a24@t)) (let ((ci1a3a@ls/false (cid77@syntax-dispatch ci1a38@t 'any))) (if ci1a3a@ls/false (apply (lambda (ci1a3c@datum) (values (vector 'atom (cib84@stx->datum ci1a3c@datum)) ci19a4@ids)) ci1a3a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1a38@t))))))))))))))))))))))))) (ci19a1@cvt ci199a@pattern '0 '())))) (set! ci284c@cid75@convert-pattern cid75@convert-pattern) (set! cid77@syntax-dispatch (letrec* ((ci1a5d@stx^ (lambda (ci1b38@e ci1b39@m* ci1b3a@s* ci1b3b@ae*) (if (and (null? ci1b39@m*) (null? ci1b3a@s*) (null? ci1b3b@ae*)) ci1b38@e (cib58@mkstx ci1b38@e ci1b39@m* ci1b3a@s* ci1b3b@ae*)))) (ci1a5f@match-each (lambda (ci1b18@e ci1b19@p ci1b1a@m* ci1b1b@s* ci1b1c@ae*) (if (pair? ci1b18@e) (let ((ci1b22@first (ci1a6b@match (car ci1b18@e) ci1b19@p ci1b1a@m* ci1b1b@s* ci1b1c@ae* '()))) (and ci1b22@first (let ((ci1b24@rest (ci1a5f@match-each (cdr ci1b18@e) ci1b19@p ci1b1a@m* ci1b1b@s* ci1b1c@ae*))) (and ci1b24@rest (cons ci1b22@first ci1b24@rest))))) (if (null? ci1b18@e) '() (if (cib3c@stx? ci1b18@e) (and (not (ciaf6@top-marked? ci1b1a@m*)) (call-with-values (lambda () (join-wraps ci1b1a@m* ci1b1b@s* ci1b1c@ae* ci1b18@e)) (lambda (ci1b2c@ci1b27 ci1b2d@ci1b29 ci1b2e@ci1b2b) (let ((ci1b32@ae* ci1b2e@ci1b2b) (ci1b33@s* ci1b2d@ci1b29) (ci1b34@m* ci1b2c@ci1b27)) (ci1a5f@match-each (cib3e@stx-expr ci1b18@e) ci1b19@p ci1b34@m* ci1b33@s* ci1b32@ae*))))) (if (ci6b4@ci586@annotation? ci1b18@e) (ci1a5f@match-each (ci6b6@ci58a@annotation-expression ci1b18@e) ci1b19@p ci1b1a@m* ci1b1b@s* ci1b1c@ae*) '#f)))))) (ci1a61@match-each+ (lambda (ci1ad8@e ci1ad9@x-pat ci1ada@y-pat ci1adb@z-pat ci1adc@m* ci1add@s* ci1ade@ae* ci1adf@r) (let ci1af0@f ((ci1ae8@e ci1ad8@e) (ci1ae9@m* ci1adc@m*) (ci1aea@s* ci1add@s*) (ci1aeb@ae* ci1ade@ae*)) (if (pair? ci1ae8@e) (call-with-values (lambda () (ci1af0@f (cdr ci1ae8@e) ci1ae9@m* ci1aea@s* ci1aeb@ae*)) (lambda (ci1af8@ci1af3 ci1af9@ci1af5 ci1afa@ci1af7) (let ((ci1afe@r ci1afa@ci1af7) (ci1aff@y-pat ci1af9@ci1af5) (ci1b00@xr* ci1af8@ci1af3)) (if ci1afe@r (if (null? ci1aff@y-pat) (let ((ci1b04@xr (ci1a6b@match (car ci1ae8@e) ci1ad9@x-pat ci1ae9@m* ci1aea@s* ci1aeb@ae* '()))) (if ci1b04@xr (values (cons ci1b04@xr ci1b00@xr*) ci1aff@y-pat ci1afe@r) (values '#f '#f '#f))) (values '() (cdr ci1aff@y-pat) (ci1a6b@match (car ci1ae8@e) (car ci1aff@y-pat) ci1ae9@m* ci1aea@s* ci1aeb@ae* ci1afe@r))) (values '#f '#f '#f))))) (if (cib3c@stx? ci1ae8@e) (if (ciaf6@top-marked? ci1ae9@m*) (values '() ci1ada@y-pat (ci1a6b@match ci1ae8@e ci1adb@z-pat ci1ae9@m* ci1aea@s* ci1aeb@ae* ci1adf@r)) (call-with-values (lambda () (join-wraps ci1ae9@m* ci1aea@s* ci1aeb@ae* ci1ae8@e)) (lambda (ci1b0c@ci1b07 ci1b0d@ci1b09 ci1b0e@ci1b0b) (let ((ci1b12@ae* ci1b0e@ci1b0b) (ci1b13@s* ci1b0d@ci1b09) (ci1b14@m* ci1b0c@ci1b07)) (ci1af0@f (cib3e@stx-expr ci1ae8@e) ci1b14@m* ci1b13@s* ci1b12@ae*))))) (if (ci6b4@ci586@annotation? ci1ae8@e) (ci1af0@f (ci6b6@ci58a@annotation-expression ci1ae8@e) ci1ae9@m* ci1aea@s* ci1aeb@ae*) (values '() ci1ada@y-pat (ci1a6b@match ci1ae8@e ci1adb@z-pat ci1ae9@m* ci1aea@s* ci1aeb@ae* ci1adf@r)))))))) (ci1a63@match-each-any (lambda (ci1abc@e ci1abd@m* ci1abe@s* ci1abf@ae*) (if (pair? ci1abc@e) (let ((ci1ac4@l (ci1a63@match-each-any (cdr ci1abc@e) ci1abd@m* ci1abe@s* ci1abf@ae*))) (and ci1ac4@l (cons (ci1a5d@stx^ (car ci1abc@e) ci1abd@m* ci1abe@s* ci1abf@ae*) ci1ac4@l))) (if (null? ci1abc@e) '() (if (cib3c@stx? ci1abc@e) (and (not (ciaf6@top-marked? ci1abd@m*)) (call-with-values (lambda () (join-wraps ci1abd@m* ci1abe@s* ci1abf@ae* ci1abc@e)) (lambda (ci1acc@ci1ac7 ci1acd@ci1ac9 ci1ace@ci1acb) (let ((ci1ad2@ae* ci1ace@ci1acb) (ci1ad3@s* ci1acd@ci1ac9) (ci1ad4@m* ci1acc@ci1ac7)) (ci1a63@match-each-any (cib3e@stx-expr ci1abc@e) ci1ad4@m* ci1ad3@s* ci1ad2@ae*))))) (if (ci6b4@ci586@annotation? ci1abc@e) (ci1a63@match-each-any (ci6b6@ci58a@annotation-expression ci1abc@e) ci1abd@m* ci1abe@s* ci1abf@ae*) '#f)))))) (ci1a65@match-empty (lambda (ci1ab6@p ci1ab7@r) (if (null? ci1ab6@p) ci1ab7@r (if (eq? ci1ab6@p '_) ci1ab7@r (if (eq? ci1ab6@p 'any) (cons '() ci1ab7@r) (if (pair? ci1ab6@p) (ci1a65@match-empty (car ci1ab6@p) (ci1a65@match-empty (cdr ci1ab6@p) ci1ab7@r)) (if (eq? ci1ab6@p 'each-any) (cons '() ci1ab7@r) (let ((ci1aba@t (vector-ref ci1ab6@p '0))) (if (memv ci1aba@t '(each)) (ci1a65@match-empty (vector-ref ci1ab6@p '1) ci1ab7@r) (if (memv ci1aba@t '(each+)) (ci1a65@match-empty (vector-ref ci1ab6@p '1) (ci1a65@match-empty (reverse (vector-ref ci1ab6@p '2)) (ci1a65@match-empty (vector-ref ci1ab6@p '3) ci1ab7@r))) (if (memv ci1aba@t '(free-id atom)) ci1ab7@r (if (memv ci1aba@t '(scheme-id atom)) ci1ab7@r (if (memv ci1aba@t '(vector)) (ci1a65@match-empty (vector-ref ci1ab6@p '1) ci1ab7@r) (assertion-violation 'syntax-dispatch '"invalid pattern" ci1ab6@p)))))))))))))) (ci1a67@combine (lambda (ci1ab2@r* ci1ab3@r) (if (null? (car ci1ab2@r*)) ci1ab3@r (cons (map car ci1ab2@r*) (ci1a67@combine (map cdr ci1ab2@r*) ci1ab3@r))))) (ci1a69@match* (lambda (ci1a8e@e ci1a8f@p ci1a90@m* ci1a91@s* ci1a92@ae* ci1a93@r) (if (null? ci1a8f@p) (and (null? ci1a8e@e) ci1a93@r) (if (pair? ci1a8f@p) (and (pair? ci1a8e@e) (ci1a6b@match (car ci1a8e@e) (car ci1a8f@p) ci1a90@m* ci1a91@s* ci1a92@ae* (ci1a6b@match (cdr ci1a8e@e) (cdr ci1a8f@p) ci1a90@m* ci1a91@s* ci1a92@ae* ci1a93@r))) (if (eq? ci1a8f@p 'each-any) (let ((ci1a9a@l (ci1a63@match-each-any ci1a8e@e ci1a90@m* ci1a91@s* ci1a92@ae*))) (and ci1a9a@l (cons ci1a9a@l ci1a93@r))) (let ((ci1a9c@t (vector-ref ci1a8f@p '0))) (if (memv ci1a9c@t '(each)) (if (null? ci1a8e@e) (ci1a65@match-empty (vector-ref ci1a8f@p '1) ci1a93@r) (let ((ci1a9e@r* (ci1a5f@match-each ci1a8e@e (vector-ref ci1a8f@p '1) ci1a90@m* ci1a91@s* ci1a92@ae*))) (and ci1a9e@r* (ci1a67@combine ci1a9e@r* ci1a93@r)))) (if (memv ci1a9c@t '(free-id)) (and (symbol? ci1a8e@e) (ciaf6@top-marked? ci1a90@m*) (cib76@free-id=? (ci1a5d@stx^ ci1a8e@e ci1a90@m* ci1a91@s* ci1a92@ae*) (vector-ref ci1a8f@p '1)) ci1a93@r) (if (memv ci1a9c@t '(scheme-id)) (and (symbol? ci1a8e@e) (ciaf6@top-marked? ci1a90@m*) (cib76@free-id=? (ci1a5d@stx^ ci1a8e@e ci1a90@m* ci1a91@s* ci1a92@ae*) (cicff@scheme-stx (vector-ref ci1a8f@p '1))) ci1a93@r) (if (memv ci1a9c@t '(each+)) (call-with-values (lambda () (ci1a61@match-each+ ci1a8e@e (vector-ref ci1a8f@p '1) (vector-ref ci1a8f@p '2) (vector-ref ci1a8f@p '3) ci1a90@m* ci1a91@s* ci1a92@ae* ci1a93@r)) (lambda (ci1aa6@ci1aa1 ci1aa7@ci1aa3 ci1aa8@ci1aa5) (let ((ci1aac@r ci1aa8@ci1aa5) (ci1aad@y-pat ci1aa7@ci1aa3) (ci1aae@xr* ci1aa6@ci1aa1)) (and ci1aac@r (null? ci1aad@y-pat) (if (null? ci1aae@xr*) (ci1a65@match-empty (vector-ref ci1a8f@p '1) ci1aac@r) (ci1a67@combine ci1aae@xr* ci1aac@r)))))) (if (memv ci1a9c@t '(atom)) (and (fast-equal? (vector-ref ci1a8f@p '1) (cib82@strip ci1a8e@e ci1a90@m*)) ci1a93@r) (if (memv ci1a9c@t '(vector)) (and (vector? ci1a8e@e) (ci1a6b@match (vector->list ci1a8e@e) (vector-ref ci1a8f@p '1) ci1a90@m* ci1a91@s* ci1a92@ae* ci1a93@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" ci1a8f@p))))))))))))) (ci1a6b@match (lambda (ci1a70@e ci1a71@p ci1a72@m* ci1a73@s* ci1a74@ae* ci1a75@r) (if (not ci1a75@r) '#f (if (eq? ci1a71@p '_) ci1a75@r (if (eq? ci1a71@p 'any) (cons (ci1a5d@stx^ ci1a70@e ci1a72@m* ci1a73@s* ci1a74@ae*) ci1a75@r) (if (cib3c@stx? ci1a70@e) (and (not (ciaf6@top-marked? ci1a72@m*)) (call-with-values (lambda () (join-wraps ci1a72@m* ci1a73@s* ci1a74@ae* ci1a70@e)) (lambda (ci1a82@ci1a7d ci1a83@ci1a7f ci1a84@ci1a81) (let ((ci1a88@ae* ci1a84@ci1a81) (ci1a89@s* ci1a83@ci1a7f) (ci1a8a@m* ci1a82@ci1a7d)) (ci1a6b@match (cib3e@stx-expr ci1a70@e) ci1a71@p ci1a8a@m* ci1a89@s* ci1a88@ae* ci1a75@r))))) (if (ci6b4@ci586@annotation? ci1a70@e) (ci1a6b@match (ci6b6@ci58a@annotation-expression ci1a70@e) ci1a71@p ci1a72@m* ci1a73@s* ci1a74@ae* ci1a75@r) (ci1a69@match* ci1a70@e ci1a71@p ci1a72@m* ci1a73@s* ci1a74@ae* ci1a75@r))))))))) (lambda (ci1a6c@e ci1a6d@p) (ci1a6b@match ci1a6c@e ci1a6d@p '() '() '() '())))) (set! ci284d@cid77@syntax-dispatch cid77@syntax-dispatch) (set! cid79@ellipsis? (lambda (ci1b40@x) (and (cib70@id? ci1b40@x) (cib76@free-id=? ci1b40@x (cicff@scheme-stx '...))))) (set! ci284e@cid79@ellipsis? cid79@ellipsis?) (set! cid7b@underscore? (lambda (ci1b42@x) (and (cib70@id? ci1b42@x) (cib76@free-id=? ci1b42@x (cicff@scheme-stx '_))))) (set! ci284f@cid7b@underscore? cid7b@underscore?) (set! cid7d@verify-literals (lambda (ci1b44@lits ci1b45@expr) (for-each (lambda (ci1b48@x) (if (or (not (cib70@id? ci1b48@x)) (cid79@ellipsis? ci1b48@x) (cid7b@underscore? ci1b48@x)) (cie57@syntax-violation '#f '"invalid literal" ci1b45@expr ci1b48@x) (void))) ci1b44@lits))) (set! ci2850@cid7d@verify-literals cid7d@verify-literals) (set! cid7f@syntax-case-transformer (letrec* ((ci1b4b@build-dispatch-call (lambda (ci1bbc@pvars ci1bbd@expr ci1bbe@y ci1bbf@r ci1bc0@mr) (let ((ci1bc6@ids (map car ci1bbc@pvars)) (ci1bc7@levels (map cdr ci1bbc@pvars))) (let ((ci1bca@labels (map ciafc@gen-label ci1bc6@ids)) (ci1bcb@new-vars (map ciaf8@gen-lexical ci1bc6@ids))) (let ((ci1bce@body (cid99@chi-expr (cib5c@add-subst (cib30@make-full-rib ci1bc6@ids ci1bca@labels) ci1bbd@expr) (append (map (lambda (ci1bd0@label ci1bd1@var ci1bd2@level) (cons ci1bd0@label (cib8a@make-binding 'syntax (cons ci1bd1@var ci1bd2@level)))) ci1bca@labels ci1bcb@new-vars (map cdr ci1bbc@pvars)) ci1bbf@r) ci1bc0@mr))) (list '(primitive apply) (ciad3@cia05@build-lambda '#f ci1bcb@new-vars ci1bce@body) ci1bbe@y)))))) (ci1b4d@invalid-ids-error (lambda (ci1bb0@id* ci1bb1@e ci1bb2@class) (let ci1bba@find ((ci1bb6@id* ci1bb0@id*) (ci1bb7@ok* '())) (if (null? ci1bb6@id*) (cie57@syntax-violation '#f '"invalid syntax" ci1bb1@e) (if (cib70@id? (car ci1bb6@id*)) (if (cib7c@bound-id-member? (car ci1bb6@id*) ci1bb7@ok*) (cie53@syntax-error (car ci1bb6@id*) '"duplicate " ci1bb2@class) (ci1bba@find (cdr ci1bb6@id*) (cons (car ci1bb6@id*) ci1bb7@ok*))) (cie53@syntax-error (car ci1bb6@id*) '"invalid " ci1bb2@class)))))) (ci1b4f@gen-clause (lambda (ci1b88@x ci1b89@keys ci1b8a@clauses ci1b8b@r ci1b8c@mr ci1b8d@pat ci1b8e@fender ci1b8f@expr) (call-with-values (lambda () (cid75@convert-pattern ci1b8d@pat ci1b89@keys)) (lambda (ci1b9c@ci1b99 ci1b9d@ci1b9b) (let ((ci1ba0@pvars ci1b9d@ci1b9b) (ci1ba1@p ci1b9c@ci1b99)) (if (not (cib7a@distinct-bound-ids? (map car ci1ba0@pvars))) (ci1b4d@invalid-ids-error (map car ci1ba0@pvars) ci1b8d@pat '"pattern variable") (if (not (for-all (lambda (ci1ba4@x) (not (cid79@ellipsis? (car ci1ba4@x)))) ci1ba0@pvars)) (cie57@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" ci1b8d@pat) (let ((ci1ba6@y (ciaf8@gen-lexical 'tmp))) (let ((ci1ba8@test (if (eq? ci1b8e@fender '#t) ci1ba6@y (let ((ci1baa@call (ci1b4b@build-dispatch-call ci1ba0@pvars ci1b8e@fender ci1ba6@y ci1b8b@r ci1b8c@mr))) (list 'if ci1ba6@y ci1baa@call (list 'quote '#f)))))) (let ((ci1bac@conseq (ci1b4b@build-dispatch-call ci1ba0@pvars ci1b8f@expr ci1ba6@y ci1b8b@r ci1b8c@mr))) (let ((ci1bae@altern (ci1b51@gen-syntax-case ci1b88@x ci1b89@keys ci1b8a@clauses ci1b8b@r ci1b8c@mr))) (list (ciad3@cia05@build-lambda '#f (list ci1ba6@y) (list 'if ci1ba8@test ci1bac@conseq ci1bae@altern)) (list '(primitive syntax-dispatch) ci1b88@x (list 'quote ci1ba1@p)))))))))))))) (ci1b51@gen-syntax-case (lambda (ci1b66@x ci1b67@keys ci1b68@clauses ci1b69@r ci1b6a@mr) (if (null? ci1b68@clauses) (list '(primitive syntax-error) ci1b66@x) (let ((ci1b70@t (car ci1b68@clauses))) (let ((ci1b72@ls/false (cid77@syntax-dispatch ci1b70@t '(any any)))) (if ci1b72@ls/false (apply (lambda (ci1b74@pat ci1b75@expr) (if (and (cib70@id? ci1b74@pat) (not (cib7c@bound-id-member? ci1b74@pat ci1b67@keys)) (not (cid79@ellipsis? ci1b74@pat))) (if (cib76@free-id=? ci1b74@pat (cicff@scheme-stx '_)) (cid99@chi-expr ci1b75@expr ci1b69@r ci1b6a@mr) (let ((ci1b78@lab (ciafc@gen-label ci1b74@pat)) (ci1b79@lex (ciaf8@gen-lexical ci1b74@pat))) (let ((ci1b7c@body (cid99@chi-expr (cib5c@add-subst (cib30@make-full-rib (list ci1b74@pat) (list ci1b78@lab)) ci1b75@expr) (cons (cons ci1b78@lab (cib8a@make-binding 'syntax (cons ci1b79@lex '0))) ci1b69@r) ci1b6a@mr))) (list (ciad3@cia05@build-lambda '#f (list ci1b79@lex) ci1b7c@body) ci1b66@x)))) (ci1b4f@gen-clause ci1b66@x ci1b67@keys (cdr ci1b68@clauses) ci1b69@r ci1b6a@mr ci1b74@pat '#t ci1b75@expr))) ci1b72@ls/false) (let ((ci1b7e@t ci1b70@t)) (let ((ci1b80@ls/false (cid77@syntax-dispatch ci1b7e@t '(any any any)))) (if ci1b80@ls/false (apply (lambda (ci1b82@pat ci1b83@fender ci1b84@expr) (ci1b4f@gen-clause ci1b66@x ci1b67@keys (cdr ci1b68@clauses) ci1b69@r ci1b6a@mr ci1b82@pat ci1b83@fender ci1b84@expr)) ci1b80@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1b7e@t))))))))))) (lambda (ci1b52@e ci1b53@r ci1b54@mr) (let ((ci1b58@t ci1b52@e)) (let ((ci1b5a@ls/false (cid77@syntax-dispatch ci1b58@t '(_ any each-any . each-any)))) (if ci1b5a@ls/false (apply (lambda (ci1b5c@expr ci1b5d@keys ci1b5e@clauses) (begin (cid7d@verify-literals ci1b5d@keys ci1b52@e) (let ((ci1b62@x (ciaf8@gen-lexical 'tmp))) (let ((ci1b64@body (ci1b51@gen-syntax-case ci1b62@x ci1b5d@keys ci1b5e@clauses ci1b53@r ci1b54@mr))) (list (ciad3@cia05@build-lambda '#f (list ci1b62@x) ci1b64@body) (cid99@chi-expr ci1b5c@expr ci1b53@r ci1b54@mr)))))) ci1b5a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1b58@t))))))) (set! ci2851@cid7f@syntax-case-transformer cid7f@syntax-case-transformer) (set! cid81@ellipsis-map (lambda (ci1bd6@proc ci1bd7@ls . ci1bda@ls*) (letrec* ((ci1bdd@who '...)) (begin (if (not (list? ci1bd7@ls)) (assertion-violation ci1bdd@who '"not a list" ci1bd7@ls) (void)) (if (not (null? ci1bda@ls*)) (let ((ci1bde@n (length ci1bd7@ls))) (for-each (lambda (ci1be0@x) (begin (if (not (list? ci1be0@x)) (assertion-violation ci1bdd@who '"not a list" ci1be0@x) (void)) (if (not (= (length ci1be0@x) ci1bde@n)) (assertion-violation ci1bdd@who '"length mismatch" ci1bd7@ls ci1be0@x) (void)))) ci1bda@ls*)) (void)) (apply map ci1bd6@proc ci1bd7@ls ci1bda@ls*))))) (set! ci2852@cid81@ellipsis-map cid81@ellipsis-map) (set! cid83@syntax-transformer (letrec* ((ci1be3@gen-syntax (lambda (ci1c5a@src ci1c5b@e ci1c5c@r ci1c5d@maps ci1c5e@ellipsis? ci1c5f@vec?) (let ((ci1c66@t ci1c5b@e)) (let ((ci1c68@ls/false (cid77@syntax-dispatch ci1c66@t 'any))) (if (and ci1c68@ls/false (apply (lambda (ci1c6a@dots) (ci1c5e@ellipsis? ci1c6a@dots)) ci1c68@ls/false)) (apply (lambda (ci1c6c@dots) (cie57@syntax-violation '#f '"misplaced ellipsis in syntax form" ci1c5a@src)) ci1c68@ls/false) (let ((ci1c6e@t ci1c66@t)) (let ((ci1c70@ls/false (cid77@syntax-dispatch ci1c6e@t 'any))) (if (and ci1c70@ls/false (apply (lambda (ci1c72@id) (cib70@id? ci1c72@id)) ci1c70@ls/false)) (apply (lambda (ci1c74@id) (let ((ci1c76@label (cib86@id->label ci1c5b@e))) (let ((ci1c78@b (cib88@label->binding ci1c76@label ci1c5c@r))) (if (eq? (cib8c@binding-type ci1c78@b) 'syntax) (call-with-values (lambda () (let ((ci1c7e@var.lev (cib8e@binding-value ci1c78@b))) (ci1be5@gen-ref ci1c5a@src (car ci1c7e@var.lev) (cdr ci1c7e@var.lev) ci1c5d@maps))) (lambda (ci1c80@ci1c7b ci1c81@ci1c7d) (let ((ci1c84@maps ci1c81@ci1c7d) (ci1c85@var ci1c80@ci1c7b)) (values (list 'ref ci1c85@var) ci1c84@maps)))) (values (list 'quote ci1c5b@e) ci1c5d@maps))))) ci1c70@ls/false) (let ((ci1c88@t ci1c6e@t)) (let ((ci1c8a@ls/false (cid77@syntax-dispatch ci1c88@t '(any any)))) (if (and ci1c8a@ls/false (apply (lambda (ci1c8c@dots ci1c8d@e) (ci1c5e@ellipsis? ci1c8c@dots)) ci1c8a@ls/false)) (apply (lambda (ci1c90@dots ci1c91@e) (if ci1c5f@vec? (cie57@syntax-violation '#f '"misplaced ellipsis in syntax form" ci1c5a@src) (ci1be3@gen-syntax ci1c5a@src ci1c91@e ci1c5c@r ci1c5d@maps (lambda (ci1c94@x) '#f) '#f))) ci1c8a@ls/false) (let ((ci1c96@t ci1c88@t)) (let ((ci1c98@ls/false (cid77@syntax-dispatch ci1c96@t '(any any . any)))) (if (and ci1c98@ls/false (apply (lambda (ci1c9a@x ci1c9b@dots ci1c9c@y) (ci1c5e@ellipsis? ci1c9b@dots)) ci1c98@ls/false)) (apply (lambda (ci1ca0@x ci1ca1@dots ci1ca2@y) (let ci1cb8@f ((ci1ca6@y ci1ca2@y) (ci1ca7@k (lambda (ci1caa@maps) (call-with-values (lambda () (ci1be3@gen-syntax ci1c5a@src ci1ca0@x ci1c5c@r (cons '() ci1caa@maps) ci1c5e@ellipsis? '#f)) (lambda (ci1cb0@ci1cad ci1cb1@ci1caf) (let ((ci1cb4@maps ci1cb1@ci1caf) (ci1cb5@x ci1cb0@ci1cad)) (if (null? (car ci1cb4@maps)) (cie57@syntax-violation '#f '"extra ellipsis in syntax form" ci1c5a@src) (values (ci1beb@gen-map ci1cb5@x (car ci1cb4@maps)) (cdr ci1cb4@maps))))))))) (let ((ci1cba@t ci1ca6@y)) (let ((ci1cbc@ls/false (cid77@syntax-dispatch ci1cba@t '()))) (if ci1cbc@ls/false (apply (lambda () (ci1ca7@k ci1c5d@maps)) ci1cbc@ls/false) (let ((ci1cbe@t ci1cba@t)) (let ((ci1cc0@ls/false (cid77@syntax-dispatch ci1cbe@t '(any . any)))) (if (and ci1cc0@ls/false (apply (lambda (ci1cc2@dots ci1cc3@y) (ci1c5e@ellipsis? ci1cc2@dots)) ci1cc0@ls/false)) (apply (lambda (ci1cc6@dots ci1cc7@y) (ci1cb8@f ci1cc7@y (lambda (ci1cca@maps) (call-with-values (lambda () (ci1ca7@k (cons '() ci1cca@maps))) (lambda (ci1cd0@ci1ccd ci1cd1@ci1ccf) (let ((ci1cd4@maps ci1cd1@ci1ccf) (ci1cd5@x ci1cd0@ci1ccd)) (if (null? (car ci1cd4@maps)) (cie57@syntax-violation '#f '"extra ellipsis in syntax form" ci1c5a@src) (values (ci1be9@gen-mappend ci1cd5@x (car ci1cd4@maps)) (cdr ci1cd4@maps))))))))) ci1cc0@ls/false) (let ((ci1cd8@t ci1cbe@t)) (let ((ci1cda@ls/false (cid77@syntax-dispatch ci1cd8@t '_))) (if ci1cda@ls/false (apply (lambda () (call-with-values (lambda () (ci1be3@gen-syntax ci1c5a@src ci1ca6@y ci1c5c@r ci1c5d@maps ci1c5e@ellipsis? ci1c5f@vec?)) (lambda (ci1ce0@ci1cdd ci1ce1@ci1cdf) (let ((ci1ce4@maps ci1ce1@ci1cdf) (ci1ce5@y ci1ce0@ci1cdd)) (call-with-values (lambda () (ci1ca7@k ci1ce4@maps)) (lambda (ci1cec@ci1ce9 ci1ced@ci1ceb) (let ((ci1cf0@maps ci1ced@ci1ceb) (ci1cf1@x ci1cec@ci1ce9)) (values (ci1be7@gen-append ci1cf1@x ci1ce5@y) ci1cf0@maps)))))))) ci1cda@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1cd8@t)))))))))))) ci1c98@ls/false) (let ((ci1cf4@t ci1c96@t)) (let ((ci1cf6@ls/false (cid77@syntax-dispatch ci1cf4@t '(any . any)))) (if ci1cf6@ls/false (apply (lambda (ci1cf8@x ci1cf9@y) (call-with-values (lambda () (ci1be3@gen-syntax ci1c5a@src ci1cf8@x ci1c5c@r ci1c5d@maps ci1c5e@ellipsis? '#f)) (lambda (ci1d00@ci1cfd ci1d01@ci1cff) (let ((ci1d04@maps ci1d01@ci1cff) (ci1d05@xnew ci1d00@ci1cfd)) (call-with-values (lambda () (ci1be3@gen-syntax ci1c5a@src ci1cf9@y ci1c5c@r ci1d04@maps ci1c5e@ellipsis? ci1c5f@vec?)) (lambda (ci1d0c@ci1d09 ci1d0d@ci1d0b) (let ((ci1d10@maps ci1d0d@ci1d0b) (ci1d11@ynew ci1d0c@ci1d09)) (values (ci1bed@gen-cons ci1c5b@e ci1cf8@x ci1cf9@y ci1d05@xnew ci1d11@ynew) ci1d10@maps)))))))) ci1cf6@ls/false) (let ((ci1d14@t ci1cf4@t)) (let ((ci1d16@ls/false (cid77@syntax-dispatch ci1d14@t '#(vector each-any)))) (if ci1d16@ls/false (apply (lambda (ci1d18@ls) (call-with-values (lambda () (ci1be3@gen-syntax ci1c5a@src ci1d18@ls ci1c5c@r ci1c5d@maps ci1c5e@ellipsis? '#t)) (lambda (ci1d1e@ci1d1b ci1d1f@ci1d1d) (let ((ci1d22@maps ci1d1f@ci1d1d) (ci1d23@lsnew ci1d1e@ci1d1b)) (values (ci1bef@gen-vector ci1c5b@e ci1d18@ls ci1d23@lsnew) ci1d22@maps))))) ci1d16@ls/false) (let ((ci1d26@t ci1d14@t)) (let ((ci1d28@ls/false (cid77@syntax-dispatch ci1d26@t '_))) (if ci1d28@ls/false (apply (lambda () (values (list 'quote ci1c5b@e) ci1c5d@maps)) ci1d28@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1d26@t)))))))))))))))))))))))) (ci1be5@gen-ref (lambda (ci1c40@src ci1c41@var ci1c42@level ci1c43@maps) (if (= ci1c42@level '0) (values ci1c41@var ci1c43@maps) (if (null? ci1c43@maps) (cie57@syntax-violation '#f '"missing ellipsis in syntax form" ci1c40@src) (call-with-values (lambda () (ci1be5@gen-ref ci1c40@src ci1c41@var (- ci1c42@level '1) (cdr ci1c43@maps))) (lambda (ci1c4c@ci1c49 ci1c4d@ci1c4b) (let ((ci1c50@outer-maps ci1c4d@ci1c4b) (ci1c51@outer-var ci1c4c@ci1c49)) (let ((ci1c54@t (assq ci1c51@outer-var (car ci1c43@maps)))) (if ci1c54@t ((lambda (ci1c56@b) (values (cdr ci1c56@b) ci1c43@maps)) ci1c54@t) (let ((ci1c58@inner-var (ciaf8@gen-lexical 'tmp))) (values ci1c58@inner-var (cons (cons (cons ci1c51@outer-var ci1c58@inner-var) (car ci1c43@maps)) ci1c50@outer-maps)))))))))))) (ci1be7@gen-append (lambda (ci1c3c@x ci1c3d@y) (if (fast-equal? ci1c3d@y ''()) ci1c3c@x (list 'append ci1c3c@x ci1c3d@y)))) (ci1be9@gen-mappend (lambda (ci1c38@e ci1c39@map-env) (list 'apply '(primitive append) (ci1beb@gen-map ci1c38@e ci1c39@map-env)))) (ci1beb@gen-map (lambda (ci1c26@e ci1c27@map-env) (let ((ci1c2a@formals (map cdr ci1c27@map-env)) (ci1c2b@actuals (map (lambda (ci1c2e@x) (list 'ref (car ci1c2e@x))) ci1c27@map-env))) (if (eq? (car ci1c26@e) 'ref) (car ci1c2b@actuals) (if (for-all (lambda (ci1c30@x) (and (eq? (car ci1c30@x) 'ref) (memq (cadr ci1c30@x) ci1c2a@formals))) (cdr ci1c26@e)) (let ((ci1c32@args (map (let ((ci1c34@r (map cons ci1c2a@formals ci1c2b@actuals))) (lambda (ci1c36@x) (cdr (assq (cadr ci1c36@x) ci1c34@r)))) (cdr ci1c26@e)))) (cons 'map (cons (list 'primitive (car ci1c26@e)) ci1c32@args))) (cons* 'map (list 'lambda ci1c2a@formals ci1c26@e) ci1c2b@actuals)))))) (ci1bed@gen-cons (lambda (ci1c16@e ci1c17@x ci1c18@y ci1c19@xnew ci1c1a@ynew) (let ((ci1c20@t (car ci1c1a@ynew))) (if (memv ci1c20@t '(quote)) (if (eq? (car ci1c19@xnew) 'quote) (let ((ci1c22@xnew (cadr ci1c19@xnew)) (ci1c23@ynew (cadr ci1c1a@ynew))) (if (and (eq? ci1c22@xnew ci1c17@x) (eq? ci1c23@ynew ci1c18@y)) (list 'quote ci1c16@e) (list 'quote (cons ci1c22@xnew ci1c23@ynew)))) (if (null? (cadr ci1c1a@ynew)) (list 'list ci1c19@xnew) (list 'cons ci1c19@xnew ci1c1a@ynew))) (if (memv ci1c20@t '(list)) (cons 'list (cons ci1c19@xnew (cdr ci1c1a@ynew))) (list 'cons ci1c19@xnew ci1c1a@ynew)))))) (ci1bef@gen-vector (lambda (ci1c10@e ci1c11@ls ci1c12@lsnew) (if (eq? (car ci1c12@lsnew) 'quote) (if (eq? (cadr ci1c12@lsnew) ci1c11@ls) (list 'quote ci1c10@e) (list 'quote (list->vector (cadr ci1c12@lsnew)))) (if (eq? (car ci1c12@lsnew) 'list) (cons 'vector (cdr ci1c12@lsnew)) (list 'list->vector ci1c12@lsnew))))) (ci1bf1@regen (lambda (ci1c0a@x) (let ((ci1c0c@t (car ci1c0a@x))) (if (memv ci1c0c@t '(ref)) (cadr ci1c0a@x) (if (memv ci1c0c@t '(primitive)) (list 'primitive (cadr ci1c0a@x)) (if (memv ci1c0c@t '(quote)) (list 'quote (cadr ci1c0a@x)) (if (memv ci1c0c@t '(lambda)) (ciad3@cia05@build-lambda '#f (cadr ci1c0a@x) (ci1bf1@regen (caddr ci1c0a@x))) (if (memv ci1c0c@t '(map)) (let ((ci1c0e@ls (map ci1bf1@regen (cdr ci1c0a@x)))) (cons '(primitive ellipsis-map) ci1c0e@ls)) (cons (list 'primitive (car ci1c0a@x)) (map ci1bf1@regen (cdr ci1c0a@x)))))))))))) (lambda (ci1bf2@e ci1bf3@r ci1bf4@mr) (let ((ci1bf8@t ci1bf2@e)) (let ((ci1bfa@ls/false (cid77@syntax-dispatch ci1bf8@t '(_ any)))) (if ci1bfa@ls/false (apply (lambda (ci1bfc@x) (call-with-values (lambda () (ci1be3@gen-syntax ci1bf2@e ci1bfc@x ci1bf3@r '() cid79@ellipsis? '#f)) (lambda (ci1c02@ci1bff ci1c03@ci1c01) (let ((ci1c06@maps ci1c03@ci1c01) (ci1c07@e ci1c02@ci1bff)) (ci1bf1@regen ci1c07@e))))) ci1bfa@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1bf8@t))))))) (set! ci2853@cid83@syntax-transformer cid83@syntax-transformer) (set! cid85@core-macro-transformer (lambda (ci1d2a@name) (let ((ci1d2c@t ci1d2a@name)) (if (memv ci1d2c@t '(quote)) cid27@quote-transformer (if (memv ci1d2c@t '(lambda)) cid2b@lambda-transformer (if (memv ci1d2c@t '(case-lambda)) cid29@case-lambda-transformer (if (memv ci1d2c@t '(letrec)) cid0f@letrec-transformer (if (memv ci1d2c@t '(letrec*)) cid11@letrec*-transformer (if (memv ci1d2c@t '(let)) cid0d@let-transformer (if (memv ci1d2c@t '(if)) cid1f@if-transformer (if (memv ci1d2c@t '(and)) cid21@and-transformer (if (memv ci1d2c@t '(or)) cid23@or-transformer (if (memv ci1d2c@t '(foreign-call)) cid73@foreign-call-transformer (if (memv ci1d2c@t '(syntax-case)) cid7f@syntax-case-transformer (if (memv ci1d2c@t '(syntax)) cid83@syntax-transformer (if (memv ci1d2c@t '(type-descriptor)) cid15@type-descriptor-transformer (if (memv ci1d2c@t '(record-type-descriptor)) cid17@record-type-descriptor-transformer (if (memv ci1d2c@t '(record-constructor-descriptor)) cid19@record-constructor-descriptor-transformer (if (memv ci1d2c@t '(fluid-let-syntax)) cid13@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" ci1d2a@name)))))))))))))))))))) (set! ci2854@cid85@core-macro-transformer cid85@core-macro-transformer) (set! cid87@symbol-macro (lambda (ci1d2e@x ci1d2f@set) (let ((ci1d32@t ci1d2e@x)) (let ((ci1d34@ls/false (cid77@syntax-dispatch ci1d32@t '(_ any)))) (if (and ci1d34@ls/false (apply (lambda (ci1d36@name) (and (cib70@id? ci1d36@name) (memq (cib72@id->sym ci1d36@name) ci1d2f@set))) ci1d34@ls/false)) (apply (lambda (ci1d38@name) (cid2d@bless (list 'quote ci1d38@name))) ci1d34@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1d32@t)))))) (set! ci2855@cid87@symbol-macro cid87@symbol-macro) (set! cid89@macro-transformer (lambda (ci1d3a@x) (if (procedure? ci1d3a@x) ci1d3a@x (if (symbol? ci1d3a@x) (let ((ci1d3c@t ci1d3a@x)) (if (memv ci1d3c@t '(define-record-type)) cid6b@define-record-type-macro (if (memv ci1d3c@t '(define-struct)) cid69@define-struct-macro (if (memv ci1d3c@t '(include)) cid5f@include-macro (if (memv ci1d3c@t '(cond)) cid5b@cond-macro (if (memv ci1d3c@t '(let)) cid33@let-macro (if (memv ci1d3c@t '(do)) cid53@do-macro (if (memv ci1d3c@t '(or)) cid57@or-macro (if (memv ci1d3c@t '(and)) cid59@and-macro (if (memv ci1d3c@t '(let*)) cid55@let*-macro (if (memv ci1d3c@t '(let-values)) cid35@let-values-macro (if (memv ci1d3c@t '(let*-values)) cid37@let*-values-macro (if (memv ci1d3c@t '(syntax-rules)) cid63@syntax-rules-macro (if (memv ci1d3c@t '(quasiquote)) cid65@quasiquote-macro (if (memv ci1d3c@t '(quasisyntax)) cid67@quasisyntax-macro (if (memv ci1d3c@t '(with-syntax)) cid2f@with-syntax-macro (if (memv ci1d3c@t '(when)) cid1b@when-macro (if (memv ci1d3c@t '(unless)) cid1d@unless-macro (if (memv ci1d3c@t '(case)) cid25@case-macro (if (memv ci1d3c@t '(identifier-syntax)) cid51@identifier-syntax-macro (if (memv ci1d3c@t '(time)) cid49@time-macro (if (memv ci1d3c@t '(delay)) cid4b@delay-macro (if (memv ci1d3c@t '(assert)) cid4d@assert-macro (if (memv ci1d3c@t '(endianness)) cid4f@endianness-macro (if (memv ci1d3c@t '(guard)) cid45@guard-macro (if (memv ci1d3c@t '(define-enumeration)) cid47@define-enumeration-macro (if (memv ci1d3c@t '(trace-lambda)) cid39@trace-lambda-macro (if (memv ci1d3c@t '(trace-define)) cid3b@trace-define-macro (if (memv ci1d3c@t '(trace-define-syntax)) cid3d@trace-define-syntax-macro (if (memv ci1d3c@t '(trace-let-syntax)) cid41@trace-let-syntax-macro (if (memv ci1d3c@t '(trace-letrec-syntax)) cid43@trace-letrec-syntax-macro (if (memv ci1d3c@t '(define-condition-type)) cid6d@define-condition-type-macro (if (memv ci1d3c@t '(parameterize)) cid71@parameterize-macro (if (memv ci1d3c@t '(include-into)) cid61@include-into-macro (if (memv ci1d3c@t '(eol-style)) (lambda (ci1d3e@x) (cid87@symbol-macro ci1d3e@x '(none lf cr crlf nel crnel ls))) (if (memv ci1d3c@t '(error-handling-mode)) (lambda (ci1d40@x) (cid87@symbol-macro ci1d40@x '(ignore raise replace))) (if (memv ci1d3c@t '(buffer-mode)) (lambda (ci1d42@x) (cid87@symbol-macro ci1d42@x '(none line block))) (if (memv ci1d3c@t '(file-options)) ciaeb@file-options-macro (if (memv ci1d3c@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) cid6f@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" ci1d3a@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" ci1d3a@x))))) (set! ci2856@cid89@macro-transformer cid89@macro-transformer) (set! cid8b@local-macro-transformer (lambda (ci1d44@x) (car ci1d44@x))) (set! ci2857@cid8b@local-macro-transformer cid8b@local-macro-transformer) (set! cid8d@do-macro-call (lambda (ci1d46@transformer ci1d47@expr) (let ((ci1d4a@out (ci1d46@transformer (cib5a@add-mark cib54@anti-mark ci1d47@expr '#f)))) (begin (let ci1d4e@f ((ci1d4c@x ci1d4a@out)) (if (not (cib3c@stx? ci1d4c@x)) (if (pair? ci1d4c@x) (begin (ci1d4e@f (car ci1d4c@x)) (ci1d4e@f (cdr ci1d4c@x))) (if (vector? ci1d4c@x) (vector-for-each ci1d4e@f ci1d4c@x) (if (symbol? ci1d4c@x) (cie57@syntax-violation '#f '"raw symbol encountered in output of macro" ci1d47@expr ci1d4c@x) (void)))) (void))) (cib5a@add-mark (cib52@gen-mark) ci1d4a@out ci1d47@expr))))) (set! ci2858@cid8d@do-macro-call cid8d@do-macro-call) (set! cid8f@chi-macro (lambda (ci1d50@p ci1d51@e) (cid8d@do-macro-call (cid89@macro-transformer ci1d50@p) ci1d51@e))) (set! ci2859@cid8f@chi-macro cid8f@chi-macro) (set! cid91@chi-local-macro (lambda (ci1d54@p ci1d55@e) (cid8d@do-macro-call (cid8b@local-macro-transformer ci1d54@p) ci1d55@e))) (set! ci285a@cid91@chi-local-macro cid91@chi-local-macro) (set! cid93@chi-global-macro (lambda (ci1d58@p ci1d59@e) (let ((ci1d5c@lib (car ci1d58@p)) (ci1d5d@loc (cdr ci1d58@p))) (begin (ci98d@ci7dc@visit-library ci1d5c@lib) (let ((ci1d60@x (symbol-value ci1d5d@loc))) (let ((ci1d62@transformer (if (procedure? ci1d60@x) ci1d60@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" ci1d60@x)))) (cid8d@do-macro-call ci1d62@transformer ci1d59@e))))))) (set! ci285b@cid93@chi-global-macro cid93@chi-global-macro) (set! cid95@chi-expr* (lambda (ci1d64@e* ci1d65@r ci1d66@mr) (if (null? ci1d64@e*) '() (let ((ci1d6a@e (cid99@chi-expr (car ci1d64@e*) ci1d65@r ci1d66@mr))) (cons ci1d6a@e (cid95@chi-expr* (cdr ci1d64@e*) ci1d65@r ci1d66@mr)))))) (set! ci285c@cid95@chi-expr* cid95@chi-expr*) (set! cid97@chi-application (lambda (ci1d6c@e ci1d6d@r ci1d6e@mr) (let ((ci1d72@t ci1d6c@e)) (let ((ci1d74@ls/false (cid77@syntax-dispatch ci1d72@t '(any . each-any)))) (if ci1d74@ls/false (apply (lambda (ci1d76@rator ci1d77@rands) (let ((ci1d7a@rator (cid99@chi-expr ci1d76@rator ci1d6d@r ci1d6e@mr))) (cons ci1d7a@rator (cid95@chi-expr* ci1d77@rands ci1d6d@r ci1d6e@mr)))) ci1d74@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1d72@t)))))) (set! ci285d@cid97@chi-application cid97@chi-application) (set! cid99@chi-expr (lambda (ci1d7c@e ci1d7d@r ci1d7e@mr) (call-with-values (lambda () (cib92@syntax-type ci1d7c@e ci1d7d@r)) (lambda (ci1d88@ci1d83 ci1d89@ci1d85 ci1d8a@ci1d87) (let ((ci1d8e@kwd ci1d8a@ci1d87) (ci1d8f@value ci1d89@ci1d85) (ci1d90@type ci1d88@ci1d83)) (let ((ci1d94@t ci1d90@type)) (if (memv ci1d94@t '(core-macro)) (let ((ci1d96@transformer (cid85@core-macro-transformer ci1d8f@value))) (ci1d96@transformer ci1d7c@e ci1d7d@r ci1d7e@mr)) (if (memv ci1d94@t '(global)) (let ((ci1d98@lib (car ci1d8f@value))) (let ((ci1d9a@loc (cdr ci1d8f@value))) (begin ((ciddf@inv-collector) ci1d98@lib) ci1d9a@loc))) (if (memv ci1d94@t '(core-prim)) (let ((ci1d9c@name ci1d8f@value)) (list 'primitive ci1d9c@name)) (if (memv ci1d94@t '(call)) (cid97@chi-application ci1d7c@e ci1d7d@r ci1d7e@mr) (if (memv ci1d94@t '(lexical)) (let ((ci1d9e@lex (cid01@lexical-var ci1d8f@value))) ci1d9e@lex) (if (memv ci1d94@t '(global-macro global-macro!)) (cid99@chi-expr (cid93@chi-global-macro ci1d8f@value ci1d7c@e) ci1d7d@r ci1d7e@mr) (if (memv ci1d94@t '(local-macro local-macro!)) (cid99@chi-expr (cid91@chi-local-macro ci1d8f@value ci1d7c@e) ci1d7d@r ci1d7e@mr) (if (memv ci1d94@t '(macro macro!)) (cid99@chi-expr (cid8f@chi-macro ci1d8f@value ci1d7c@e) ci1d7d@r ci1d7e@mr) (if (memv ci1d94@t '(constant)) (let ((ci1da0@datum ci1d8f@value)) (list 'quote ci1da0@datum)) (if (memv ci1d94@t '(set!)) (cid9b@chi-set! ci1d7c@e ci1d7d@r ci1d7e@mr) (if (memv ci1d94@t '(begin)) (let ((ci1da2@t ci1d7c@e)) (let ((ci1da4@ls/false (cid77@syntax-dispatch ci1da2@t '(_ any . each-any)))) (if ci1da4@ls/false (apply (lambda (ci1da6@x ci1da7@x*) (ciad5@cia35@build-sequence '#f (cid95@chi-expr* (cons ci1da6@x ci1da7@x*) ci1d7d@r ci1d7e@mr))) ci1da4@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1da2@t)))) (if (memv ci1d94@t '(let-syntax letrec-syntax)) (let ((ci1daa@t ci1d7c@e)) (let ((ci1dac@ls/false (cid77@syntax-dispatch ci1daa@t '(_ #(each (any any)) any . each-any)))) (if (and ci1dac@ls/false (apply (lambda (ci1dae@xlhs* ci1daf@xrhs* ci1db0@xbody ci1db1@xbody*) (if (not (cib78@valid-bound-ids? ci1dae@xlhs*)) (cie57@syntax-violation '#f '"invalid identifiers" ci1d7c@e) (void))) ci1dac@ls/false)) (apply (lambda (ci1db6@xlhs* ci1db7@xrhs* ci1db8@xbody ci1db9@xbody*) (let ((ci1dbe@xlab* (map ciafc@gen-label ci1db6@xlhs*))) (let ((ci1dc0@xrib (cib30@make-full-rib ci1db6@xlhs* ci1dbe@xlab*))) (let ((ci1dc2@xb* (map (lambda (ci1dc4@x) (ciba8@make-eval-transformer (cidd1@expand-transformer (if (eq? ci1d90@type 'let-syntax) ci1dc4@x (cib5c@add-subst ci1dc0@xrib ci1dc4@x)) ci1d7e@mr))) ci1db7@xrhs*))) (ciad5@cia35@build-sequence '#f (cid95@chi-expr* (map (lambda (ci1dc6@x) (cib5c@add-subst ci1dc0@xrib ci1dc6@x)) (cons ci1db8@xbody ci1db9@xbody*)) (append (map cons ci1dbe@xlab* ci1dc2@xb*) ci1d7d@r) (append (map cons ci1dbe@xlab* ci1dc2@xb*) ci1d7e@mr))))))) ci1dac@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1daa@t)))) (if (memv ci1d94@t '(displaced-lexical)) (cie57@syntax-violation '#f '"identifier out of context" ci1d7c@e) (if (memv ci1d94@t '(syntax)) (cie57@syntax-violation '#f '"reference to pattern variable outside a syntax form" ci1d7c@e) (if (memv ci1d94@t '(define define-syntax module import library)) (cie57@syntax-violation '#f (string-append (let ((ci1dc8@t ci1d90@type)) (if (memv ci1dc8@t '(define)) '"a definition" (if (memv ci1dc8@t '(define-syntax)) '"a define-syntax" (if (memv ci1dc8@t '(module)) '"a module definition" (if (memv ci1dc8@t '(library)) '"a library definition" (if (memv ci1dc8@t '(import)) '"an import declaration" (if (memv ci1dc8@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") ci1d7c@e) (if (memv ci1d94@t '(mutable)) (cie57@syntax-violation '#f '"attempt to reference an unexportable variable" ci1d7c@e) (cie57@syntax-violation '#f '"invalid expression" ci1d7c@e))))))))))))))))))))))) (set! ci285e@cid99@chi-expr cid99@chi-expr) (set! cid9b@chi-set! (lambda (ci1dca@e ci1dcb@r ci1dcc@mr) (let ((ci1dd0@t ci1dca@e)) (let ((ci1dd2@ls/false (cid77@syntax-dispatch ci1dd0@t '(_ any any)))) (if (and ci1dd2@ls/false (apply (lambda (ci1dd4@x ci1dd5@v) (cib70@id? ci1dd4@x)) ci1dd2@ls/false)) (apply (lambda (ci1dd8@x ci1dd9@v) (call-with-values (lambda () (cib92@syntax-type ci1dd8@x ci1dcb@r)) (lambda (ci1de2@ci1ddd ci1de3@ci1ddf ci1de4@ci1de1) (let ((ci1de8@kwd ci1de4@ci1de1) (ci1de9@value ci1de3@ci1ddf) (ci1dea@type ci1de2@ci1ddd)) (let ((ci1dee@t ci1dea@type)) (if (memv ci1dee@t '(lexical)) (begin (cid05@set-lexical-mutable! ci1de9@value '#t) (list 'set! (cid01@lexical-var ci1de9@value) (cid99@chi-expr ci1dd9@v ci1dcb@r ci1dcc@mr))) (if (memv ci1dee@t '(core-prim)) (cie57@syntax-violation '#f '"cannot modify imported core primitive" ci1dca@e) (if (memv ci1dee@t '(global)) (cie57@syntax-violation '#f '"attempt to modify imported binding" ci1dca@e) (if (memv ci1dee@t '(global-macro!)) (cid99@chi-expr (cid93@chi-global-macro ci1de9@value ci1dca@e) ci1dcb@r ci1dcc@mr) (if (memv ci1dee@t '(local-macro!)) (cid99@chi-expr (cid91@chi-local-macro ci1de9@value ci1dca@e) ci1dcb@r ci1dcc@mr) (if (memv ci1dee@t '(mutable)) (cie57@syntax-violation '#f '"attempt to assign to an unexportable variable" ci1dca@e) (cie57@syntax-violation '#f '"invalid syntax" ci1dca@e)))))))))))) ci1dd2@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1dd0@t)))))) (set! ci285f@cid9b@chi-set! cid9b@chi-set!) (set! cid9d@verify-formals (lambda (ci1df0@fmls ci1df1@stx) (let ((ci1df4@t ci1df0@fmls)) (let ((ci1df6@ls/false (cid77@syntax-dispatch ci1df4@t 'each-any))) (if ci1df6@ls/false (apply (lambda (ci1df8@x*) (if (not (cib78@valid-bound-ids? ci1df8@x*)) (cid31@invalid-fmls-error ci1df1@stx ci1df0@fmls) (void))) ci1df6@ls/false) (let ((ci1dfa@t ci1df4@t)) (let ((ci1dfc@ls/false (cid77@syntax-dispatch ci1dfa@t '#(each+ any () any)))) (if ci1dfc@ls/false (apply (lambda (ci1dfe@x* ci1dff@x) (if (not (cib78@valid-bound-ids? (cons ci1dff@x ci1dfe@x*))) (cid31@invalid-fmls-error ci1df1@stx ci1df0@fmls) (void))) ci1dfc@ls/false) (let ((ci1e02@t ci1dfa@t)) (let ((ci1e04@ls/false (cid77@syntax-dispatch ci1e02@t '_))) (if ci1e04@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid syntax" ci1df1@stx)) ci1e04@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1e02@t)))))))))))) (set! ci2860@cid9d@verify-formals cid9d@verify-formals) (set! cid9f@chi-lambda-clause (lambda (ci1e06@stx ci1e07@fmls ci1e08@body* ci1e09@r ci1e0a@mr) (let ((ci1e10@t ci1e07@fmls)) (let ((ci1e12@ls/false (cid77@syntax-dispatch ci1e10@t 'each-any))) (if ci1e12@ls/false (apply (lambda (ci1e14@x*) (begin (cid9d@verify-formals ci1e07@fmls ci1e06@stx) (let ((ci1e16@lex* (map ciaf8@gen-lexical ci1e14@x*)) (ci1e17@lab* (map ciafc@gen-label ci1e14@x*))) (values ci1e16@lex* (cidaf@chi-internal (cib5c@add-subst (cib30@make-full-rib ci1e14@x* ci1e17@lab*) ci1e08@body*) (cid09@add-lexicals ci1e17@lab* ci1e16@lex* ci1e09@r) ci1e0a@mr))))) ci1e12@ls/false) (let ((ci1e1a@t ci1e10@t)) (let ((ci1e1c@ls/false (cid77@syntax-dispatch ci1e1a@t '#(each+ any () any)))) (if ci1e1c@ls/false (apply (lambda (ci1e1e@x* ci1e1f@x) (begin (cid9d@verify-formals ci1e07@fmls ci1e06@stx) (let ((ci1e22@lex* (map ciaf8@gen-lexical ci1e1e@x*)) (ci1e23@lab* (map ciafc@gen-label ci1e1e@x*)) (ci1e24@lex (ciaf8@gen-lexical ci1e1f@x)) (ci1e25@lab (ciafc@gen-label ci1e1f@x))) (values (append ci1e22@lex* ci1e24@lex) (cidaf@chi-internal (cib5c@add-subst (cib30@make-full-rib (cons ci1e1f@x ci1e1e@x*) (cons ci1e25@lab ci1e23@lab*)) ci1e08@body*) (cid09@add-lexicals (cons ci1e25@lab ci1e23@lab*) (cons ci1e24@lex ci1e22@lex*) ci1e09@r) ci1e0a@mr))))) ci1e1c@ls/false) (let ((ci1e2a@t ci1e1a@t)) (let ((ci1e2c@ls/false (cid77@syntax-dispatch ci1e2a@t '_))) (if ci1e2c@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid syntax" ci1e07@fmls)) ci1e2c@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1e2a@t)))))))))))) (set! ci2861@cid9f@chi-lambda-clause cid9f@chi-lambda-clause) (set! cida1@chi-lambda-clause* (lambda (ci1e2e@stx ci1e2f@fmls* ci1e30@body** ci1e31@r ci1e32@mr) (if (null? ci1e2f@fmls*) (values '() '()) (call-with-values (lambda () (cid9f@chi-lambda-clause ci1e2e@stx (car ci1e2f@fmls*) (car ci1e30@body**) ci1e31@r ci1e32@mr)) (lambda (ci1e3c@ci1e39 ci1e3d@ci1e3b) (let ((ci1e40@b ci1e3d@ci1e3b) (ci1e41@a ci1e3c@ci1e39)) (call-with-values (lambda () (cida1@chi-lambda-clause* ci1e2e@stx (cdr ci1e2f@fmls*) (cdr ci1e30@body**) ci1e31@r ci1e32@mr)) (lambda (ci1e48@ci1e45 ci1e49@ci1e47) (let ((ci1e4c@b* ci1e49@ci1e47) (ci1e4d@a* ci1e48@ci1e45)) (values (cons ci1e41@a ci1e4d@a*) (cons ci1e40@b ci1e4c@b*))))))))))) (set! ci2862@cida1@chi-lambda-clause* cida1@chi-lambda-clause*) (set! cida3@chi-defun (lambda (ci1e50@x ci1e51@r ci1e52@mr) (let ((ci1e56@fmls (car ci1e50@x)) (ci1e57@body* (cdr ci1e50@x))) (call-with-values (lambda () (cid9f@chi-lambda-clause ci1e56@fmls ci1e56@fmls ci1e57@body* ci1e51@r ci1e52@mr)) (lambda (ci1e5e@ci1e5b ci1e5f@ci1e5d) (let ((ci1e62@body ci1e5f@ci1e5d) (ci1e63@fmls ci1e5e@ci1e5b)) (ciad3@cia05@build-lambda '#f ci1e63@fmls ci1e62@body))))))) (set! ci2863@cida3@chi-defun cida3@chi-defun) (set! cida5@chi-rhs (lambda (ci1e66@rhs ci1e67@r ci1e68@mr) (let ((ci1e6c@t (car ci1e66@rhs))) (if (memv ci1e6c@t '(defun)) (cida3@chi-defun (cdr ci1e66@rhs) ci1e67@r ci1e68@mr) (if (memv ci1e6c@t '(expr)) (let ((ci1e6e@expr (cdr ci1e66@rhs))) (cid99@chi-expr ci1e6e@expr ci1e67@r ci1e68@mr)) (if (memv ci1e6c@t '(top-expr)) (let ((ci1e70@expr (cdr ci1e66@rhs))) (ciad5@cia35@build-sequence '#f (list (cid99@chi-expr ci1e70@expr ci1e67@r ci1e68@mr) (ciad6@cia37@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" ci1e66@rhs))))))) (set! ci2864@cida5@chi-rhs cida5@chi-rhs) (set! cida7@expand-interaction-rhs*/init* (lambda (ci1e72@lhs* ci1e73@rhs* ci1e74@init* ci1e75@r ci1e76@mr) (let ci1e80@f ((ci1e7c@lhs* ci1e72@lhs*) (ci1e7d@rhs* ci1e73@rhs*)) (if (null? ci1e7c@lhs*) (map (lambda (ci1e82@x) (cid99@chi-expr ci1e82@x ci1e75@r ci1e76@mr)) ci1e74@init*) (let ((ci1e84@lhs (car ci1e7c@lhs*)) (ci1e85@rhs (car ci1e7d@rhs*))) (let ((ci1e88@t (car ci1e85@rhs))) (if (memv ci1e88@t '(defun)) (let ((ci1e8a@rhs (cida3@chi-defun (cdr ci1e85@rhs) ci1e75@r ci1e76@mr))) (cons (list 'set! ci1e84@lhs ci1e8a@rhs) (ci1e80@f (cdr ci1e7c@lhs*) (cdr ci1e7d@rhs*)))) (if (memv ci1e88@t '(expr)) (let ((ci1e8c@rhs (cid99@chi-expr (cdr ci1e85@rhs) ci1e75@r ci1e76@mr))) (cons (list 'set! ci1e84@lhs ci1e8c@rhs) (ci1e80@f (cdr ci1e7c@lhs*) (cdr ci1e7d@rhs*)))) (if (memv ci1e88@t '(top-expr)) (let ((ci1e8e@e (cid99@chi-expr (cdr ci1e85@rhs) ci1e75@r ci1e76@mr))) (cons ci1e8e@e (ci1e80@f (cdr ci1e7c@lhs*) (cdr ci1e7d@rhs*)))) (error 'expand-interaction '"invallid" ci1e85@rhs)))))))))) (set! ci2865@cida7@expand-interaction-rhs*/init* cida7@expand-interaction-rhs*/init*) (set! cida9@chi-rhs* (lambda (ci1e90@rhs* ci1e91@r ci1e92@mr) (let ci1e98@f ((ci1e96@ls ci1e90@rhs*)) (if (null? ci1e96@ls) '() (let ((ci1e9a@a (cida5@chi-rhs (car ci1e96@ls) ci1e91@r ci1e92@mr))) (cons ci1e9a@a (ci1e98@f (cdr ci1e96@ls)))))))) (set! ci2866@cida9@chi-rhs* cida9@chi-rhs*) (set! cidab@find-bound=? (lambda (ci1e9c@x ci1e9d@lhs* ci1e9e@rhs*) (if (null? ci1e9d@lhs*) '#f (if (cib74@bound-id=? ci1e9c@x (car ci1e9d@lhs*)) (car ci1e9e@rhs*) (cidab@find-bound=? ci1e9c@x (cdr ci1e9d@lhs*) (cdr ci1e9e@rhs*)))))) (set! ci2867@cidab@find-bound=? cidab@find-bound=?) (set! cidad@find-dups (lambda (ci1ea2@ls) (let ci1ea8@f ((ci1ea4@ls ci1ea2@ls) (ci1ea5@dups '())) (if (null? ci1ea4@ls) ci1ea5@dups (let ((ci1eaa@t (cidab@find-bound=? (car ci1ea4@ls) (cdr ci1ea4@ls) (cdr ci1ea4@ls)))) (if ci1eaa@t ((lambda (ci1eac@x) (ci1ea8@f (cdr ci1ea4@ls) (cons (list (car ci1ea4@ls) ci1eac@x) ci1ea5@dups))) ci1eaa@t) (ci1ea8@f (cdr ci1ea4@ls) ci1ea5@dups))))))) (set! ci2868@cidad@find-dups cidad@find-dups) (set! cidaf@chi-internal (lambda (ci1eae@e* ci1eaf@r ci1eb0@mr) (let ((ci1eb4@rib (cib24@make-empty-rib))) (call-with-values (lambda () (cidcf@chi-body* (map (lambda (ci1ec6@x) (cib5c@add-subst ci1eb4@rib ci1ec6@x)) (cib6e@syntax->list ci1eae@e*)) ci1eaf@r ci1eb0@mr '() '() '() '() '() ci1eb4@rib '#f)) (lambda (ci1ec8@ci1eb7 ci1ec9@ci1eb9 ci1eca@ci1ebb ci1ecb@ci1ebd ci1ecc@ci1ebf ci1ecd@ci1ec1 ci1ece@ci1ec3 ci1ecf@ci1ec5) (let ((ci1ed8@_exp* ci1ecf@ci1ec5) (ci1ed9@kwd* ci1ece@ci1ec3) (ci1eda@mod** ci1ecd@ci1ec1) (ci1edb@rhs* ci1ecc@ci1ebf) (ci1edc@lex* ci1ecb@ci1ebd) (ci1edd@mr ci1eca@ci1ebb) (ci1ede@r ci1ec9@ci1eb9) (ci1edf@e* ci1ec8@ci1eb7)) (begin (if (null? ci1edf@e*) (cie57@syntax-violation '#f '"no expression in body" ci1edf@e*) (void)) (let ((ci1ee8@init* (cid95@chi-expr* (append (apply append (reverse ci1eda@mod**)) ci1edf@e*) ci1ede@r ci1edd@mr))) (let ((ci1eea@rhs* (cida9@chi-rhs* ci1edb@rhs* ci1ede@r ci1edd@mr))) (ciada@cia3f@build-letrec* '#f (reverse ci1edc@lex*) (reverse ci1eea@rhs*) (ciad5@cia35@build-sequence '#f ci1ee8@init*))))))))))) (set! ci2869@cidaf@chi-internal cidaf@chi-internal) (set! cidb1@parse-module (lambda (ci1eec@e) (let ((ci1eee@t ci1eec@e)) (let ((ci1ef0@ls/false (cid77@syntax-dispatch ci1eee@t '(_ each-any . each-any)))) (if ci1ef0@ls/false (apply (lambda (ci1ef2@export* ci1ef3@b*) (begin (if (not (for-all cib70@id? ci1ef2@export*)) (cie57@syntax-violation '#f '"module exports must be identifiers" ci1eec@e) (void)) (values '#f (list->vector ci1ef2@export*) ci1ef3@b*))) ci1ef0@ls/false) (let ((ci1ef6@t ci1eee@t)) (let ((ci1ef8@ls/false (cid77@syntax-dispatch ci1ef6@t '(_ any each-any . each-any)))) (if ci1ef8@ls/false (apply (lambda (ci1efa@name ci1efb@export* ci1efc@b*) (begin (if (not (cib70@id? ci1efa@name)) (cie57@syntax-violation '#f '"module name must be an identifier" ci1eec@e) (void)) (if (not (for-all cib70@id? ci1efb@export*)) (cie57@syntax-violation '#f '"module exports must be identifiers" ci1eec@e) (void)) (values ci1efa@name (list->vector ci1efb@export*) ci1efc@b*))) ci1ef8@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1ef6@t))))))))) (set! ci286a@cidb1@parse-module cidb1@parse-module) (set! cidbb@module-interface? (lambda (ci1f00@x) (and (simple-struct? ci1f00@x) (eq? (simple-struct-name ci1f00@x) 'module-interface)))) (set! ci286b@cidbb@module-interface? cidbb@module-interface?) (set! cidbd@module-interface-first-mark (lambda (ci1f02@x) (simple-struct-ref ci1f02@x '0))) (set! ci286c@cidbd@module-interface-first-mark cidbd@module-interface-first-mark) (set! cidbf@set-module-interface-first-mark! (lambda (ci1f04@x ci1f05@val) (simple-struct-set! ci1f04@x '0 ci1f05@val))) (set! ci286d@cidbf@set-module-interface-first-mark! cidbf@set-module-interface-first-mark!) (set! cidc1@module-interface-exp-id-vec (lambda (ci1f08@x) (simple-struct-ref ci1f08@x '1))) (set! ci286e@cidc1@module-interface-exp-id-vec cidc1@module-interface-exp-id-vec) (set! cidc3@set-module-interface-exp-id-vec! (lambda (ci1f0a@x ci1f0b@val) (simple-struct-set! ci1f0a@x '1 ci1f0b@val))) (set! ci286f@cidc3@set-module-interface-exp-id-vec! cidc3@set-module-interface-exp-id-vec!) (set! cidc5@module-interface-exp-lab-vec (lambda (ci1f0e@x) (simple-struct-ref ci1f0e@x '2))) (set! ci2870@cidc5@module-interface-exp-lab-vec cidc5@module-interface-exp-lab-vec) (set! cidc7@set-module-interface-exp-lab-vec! (lambda (ci1f10@x ci1f11@val) (simple-struct-set! ci1f10@x '2 ci1f11@val))) (set! ci2871@cidc7@set-module-interface-exp-lab-vec! cidc7@set-module-interface-exp-lab-vec!) (set! cidc9@dummy '3) (set! ci2872@cidc9@dummy cidc9@dummy) (set! cidcb@module-interface-exp-id* (lambda (ci1f14@iface ci1f15@id) (letrec* ((ci1f19@diff-marks (lambda (ci1f20@ls ci1f21@x) (begin (if (null? ci1f20@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((ci1f24@a (car ci1f20@ls))) (if (eq? ci1f24@a ci1f21@x) '() (cons ci1f24@a (ci1f19@diff-marks (cdr ci1f20@ls) ci1f21@x)))))))) (let ((ci1f1a@diff (ci1f19@diff-marks (cib42@stx-mark* ci1f15@id) (cidbd@module-interface-first-mark ci1f14@iface))) (ci1f1b@id-vec (cidc1@module-interface-exp-id-vec ci1f14@iface))) (if (null? ci1f1a@diff) ci1f1b@id-vec (vector-map (lambda (ci1f1e@x) (make-simple-struct 'stx '5 (list (cib3e@stx-expr ci1f1e@x) (append ci1f1a@diff (cib42@stx-mark* ci1f1e@x)) '() '()))) ci1f1b@id-vec)))))) (set! ci2873@cidcb@module-interface-exp-id* cidcb@module-interface-exp-id*) (set! cidcd@chi-internal-module (lambda (ci1f26@e ci1f27@r ci1f28@mr ci1f29@lex* ci1f2a@rhs* ci1f2b@mod** ci1f2c@kwd*) (call-with-values (lambda () (cidb1@parse-module ci1f26@e)) (lambda (ci1f3a@ci1f35 ci1f3b@ci1f37 ci1f3c@ci1f39) (let ((ci1f40@e* ci1f3c@ci1f39) (ci1f41@exp-id* ci1f3b@ci1f37) (ci1f42@name ci1f3a@ci1f35)) (let ((ci1f46@rib (cib24@make-empty-rib))) (let ((ci1f48@e* (map (lambda (ci1f4a@x) (cib5c@add-subst ci1f46@rib ci1f4a@x)) (cib6e@syntax->list ci1f40@e*)))) (call-with-values (lambda () (cidcf@chi-body* ci1f48@e* ci1f27@r ci1f28@mr ci1f29@lex* ci1f2a@rhs* ci1f2b@mod** ci1f2c@kwd* '() ci1f46@rib '#f)) (lambda (ci1f5c@ci1f4d ci1f5d@ci1f4f ci1f5e@ci1f51 ci1f5f@ci1f53 ci1f60@ci1f55 ci1f61@ci1f57 ci1f62@ci1f59 ci1f63@ci1f5b) (let ((ci1f6c@_exp* ci1f63@ci1f5b) (ci1f6d@kwd* ci1f62@ci1f59) (ci1f6e@mod** ci1f61@ci1f57) (ci1f6f@rhs* ci1f60@ci1f55) (ci1f70@lex* ci1f5f@ci1f53) (ci1f71@mr ci1f5e@ci1f51) (ci1f72@r ci1f5d@ci1f4f) (ci1f73@e* ci1f5c@ci1f4d)) (let ((ci1f7c@exp-lab* (vector-map (lambda (ci1f80@x) (or (cib86@id->label (make-simple-struct 'stx '5 (list (cib72@id->sym ci1f80@x) (cib42@stx-mark* ci1f80@x) (list ci1f46@rib) '()))) (cie57@syntax-violation '#f '"cannot find module export" ci1f80@x))) ci1f41@exp-id*)) (ci1f7d@mod** (cons ci1f73@e* ci1f6e@mod**))) (if (not ci1f42@name) (values ci1f70@lex* ci1f6f@rhs* ci1f41@exp-id* ci1f7c@exp-lab* ci1f72@r ci1f71@mr ci1f7d@mod** ci1f6d@kwd*) (let ((ci1f82@lab (ciafc@gen-label 'module)) (ci1f83@iface (make-simple-struct 'module-interface '4 (list (car (cib42@stx-mark* ci1f42@name)) (vector-map (lambda (ci1f86@x) (make-simple-struct 'stx '5 (list (cib3e@stx-expr ci1f86@x) (cib42@stx-mark* ci1f86@x) '() '()))) ci1f41@exp-id*) ci1f7c@exp-lab*)))) (values ci1f70@lex* ci1f6f@rhs* (vector ci1f42@name) (vector ci1f82@lab) (cons (cons ci1f82@lab (cons '$module ci1f83@iface)) ci1f72@r) (cons (cons ci1f82@lab (cons '$module ci1f83@iface)) ci1f71@mr) ci1f7d@mod** ci1f6d@kwd*)))))))))))))) (set! ci2874@cidcd@chi-internal-module cidcd@chi-internal-module) (set! cidcf@chi-body* (lambda (ci1f88@e* ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1f8e@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?) (if (null? ci1f88@e*) (values ci1f88@e* ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1f8e@kwd* ci1f8f@exp*) (let ((ci1f9c@e (car ci1f88@e*))) (call-with-values (lambda () (cib92@syntax-type ci1f9c@e ci1f89@r)) (lambda (ci1fa4@ci1f9f ci1fa5@ci1fa1 ci1fa6@ci1fa3) (let ((ci1faa@kwd ci1fa6@ci1fa3) (ci1fab@value ci1fa5@ci1fa1) (ci1fac@type ci1fa4@ci1f9f)) (let ((ci1fb0@kwd* (if (cib70@id? ci1faa@kwd) (cons ci1faa@kwd ci1f8e@kwd*) ci1f8e@kwd*))) (let ((ci1fb2@t ci1fac@type)) (if (memv ci1fb2@t '(define)) (call-with-values (lambda () (cicf9@parse-define ci1f9c@e)) (lambda (ci1fb8@ci1fb5 ci1fb9@ci1fb7) (let ((ci1fbc@rhs ci1fb9@ci1fb7) (ci1fbd@id ci1fb8@ci1fb5)) (begin (if (cib7c@bound-id-member? ci1fbd@id ci1fb0@kwd*) (cie57@syntax-violation '#f '"cannot redefine keyword" ci1f9c@e) (void)) (call-with-values (lambda () (cib00@gen-define-label+loc ci1fbd@id ci1f90@rib)) (lambda (ci1fc4@ci1fc1 ci1fc5@ci1fc3) (let ((ci1fc8@lex ci1fc5@ci1fc3) (ci1fc9@lab ci1fc4@ci1fc1)) (begin (cib26@extend-rib! ci1f90@rib ci1fbd@id ci1fc9@lab) (cidcf@chi-body* (cdr ci1f88@e*) (cid07@add-lexical ci1fc9@lab ci1fc8@lex ci1f89@r) ci1f8a@mr (cons ci1fc8@lex ci1f8b@lex*) (cons ci1fbc@rhs ci1f8c@rhs*) ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?))))))))) (if (memv ci1fb2@t '(define-syntax)) (call-with-values (lambda () (cicfb@parse-define-syntax ci1f9c@e)) (lambda (ci1fd0@ci1fcd ci1fd1@ci1fcf) (let ((ci1fd4@rhs ci1fd1@ci1fcf) (ci1fd5@id ci1fd0@ci1fcd)) (begin (if (cib7c@bound-id-member? ci1fd5@id ci1fb0@kwd*) (cie57@syntax-violation '#f '"cannot redefine keyword" ci1f9c@e) (void)) (let ((ci1fd8@lab (cib02@gen-define-label ci1fd5@id ci1f90@rib)) (ci1fd9@expanded-rhs (cidd1@expand-transformer ci1fd4@rhs ci1f8a@mr))) (begin (cib26@extend-rib! ci1f90@rib ci1fd5@id ci1fd8@lab) (let ((ci1fdc@b (ciba8@make-eval-transformer ci1fd9@expanded-rhs))) (cidcf@chi-body* (cdr ci1f88@e*) (cons (cons ci1fd8@lab ci1fdc@b) ci1f89@r) (cons (cons ci1fd8@lab ci1fdc@b) ci1f8a@mr) ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?)))))))) (if (memv ci1fb2@t '(let-syntax letrec-syntax)) (let ((ci1fde@t ci1f9c@e)) (let ((ci1fe0@ls/false (cid77@syntax-dispatch ci1fde@t '(_ #(each (any any)) . each-any)))) (if (and ci1fe0@ls/false (apply (lambda (ci1fe2@xlhs* ci1fe3@xrhs* ci1fe4@xbody*) (if (not (cib78@valid-bound-ids? ci1fe2@xlhs*)) (cie57@syntax-violation '#f '"invalid identifiers" ci1f9c@e) (void))) ci1fe0@ls/false)) (apply (lambda (ci1fe8@xlhs* ci1fe9@xrhs* ci1fea@xbody*) (let ((ci1fee@xlab* (map ciafc@gen-label ci1fe8@xlhs*))) (let ((ci1ff0@xrib (cib30@make-full-rib ci1fe8@xlhs* ci1fee@xlab*))) (let ((ci1ff2@xb* (map (lambda (ci1ff4@x) (ciba8@make-eval-transformer (cidd1@expand-transformer (if (eq? ci1fac@type 'let-syntax) ci1ff4@x (cib5c@add-subst ci1ff0@xrib ci1ff4@x)) ci1f8a@mr))) ci1fe9@xrhs*))) (cidcf@chi-body* (append (map (lambda (ci1ff6@x) (cib5c@add-subst ci1ff0@xrib ci1ff6@x)) ci1fea@xbody*) (cdr ci1f88@e*)) (append (map cons ci1fee@xlab* ci1ff2@xb*) ci1f89@r) (append (map cons ci1fee@xlab* ci1ff2@xb*) ci1f8a@mr) ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?))))) ci1fe0@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1fde@t)))) (if (memv ci1fb2@t '(begin)) (let ((ci1ff8@t ci1f9c@e)) (let ((ci1ffa@ls/false (cid77@syntax-dispatch ci1ff8@t '(_ . each-any)))) (if ci1ffa@ls/false (apply (lambda (ci1ffc@x*) (cidcf@chi-body* (append ci1ffc@x* (cdr ci1f88@e*)) ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?)) ci1ffa@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci1ff8@t)))) (if (memv ci1fb2@t '(global-macro global-macro!)) (cidcf@chi-body* (cons (cib5c@add-subst ci1f90@rib (cid93@chi-global-macro ci1fab@value ci1f9c@e)) (cdr ci1f88@e*)) ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?) (if (memv ci1fb2@t '(local-macro local-macro!)) (cidcf@chi-body* (cons (cib5c@add-subst ci1f90@rib (cid91@chi-local-macro ci1fab@value ci1f9c@e)) (cdr ci1f88@e*)) ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?) (if (memv ci1fb2@t '(macro macro!)) (cidcf@chi-body* (cons (cib5c@add-subst ci1f90@rib (cid8f@chi-macro ci1fab@value ci1f9c@e)) (cdr ci1f88@e*)) ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?) (if (memv ci1fb2@t '(module)) (call-with-values (lambda () (cidcd@chi-internal-module ci1f9c@e ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd*)) (lambda (ci200e@ci1fff ci200f@ci2001 ci2010@ci2003 ci2011@ci2005 ci2012@ci2007 ci2013@ci2009 ci2014@ci200b ci2015@ci200d) (let ((ci201e@kwd* ci2015@ci200d) (ci201f@mod** ci2014@ci200b) (ci2020@mr ci2013@ci2009) (ci2021@r ci2012@ci2007) (ci2022@m-exp-lab* ci2011@ci2005) (ci2023@m-exp-id* ci2010@ci2003) (ci2024@rhs* ci200f@ci2001) (ci2025@lex* ci200e@ci1fff)) (begin (vector-for-each (lambda (ci202e@id ci202f@lab) (cib26@extend-rib! ci1f90@rib ci202e@id ci202f@lab)) ci2023@m-exp-id* ci2022@m-exp-lab*) (cidcf@chi-body* (cdr ci1f88@e*) ci2021@r ci2020@mr ci2025@lex* ci2024@rhs* ci201f@mod** ci201e@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?))))) (if (memv ci1fb2@t '(library)) (begin (cie39@library-expander (cib84@stx->datum ci1f9c@e)) (cidcf@chi-body* (cdr ci1f88@e*) ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?)) (if (memv ci1fb2@t '(export)) (let ((ci2032@t ci1f9c@e)) (let ((ci2034@ls/false (cid77@syntax-dispatch ci2032@t '(_ . each-any)))) (if ci2034@ls/false (apply (lambda (ci2036@exp-decl*) (cidcf@chi-body* (cdr ci1f88@e*) ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* (append ci2036@exp-decl* ci1f8f@exp*) ci1f90@rib ci1f91@top?)) ci2034@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci2032@t)))) (if (memv ci1fb2@t '(import)) (letrec* ((ci2039@module-import? (lambda (ci208c@e) (let ((ci208e@t ci208c@e)) (let ((ci2090@ls/false (cid77@syntax-dispatch ci208e@t '(_ any)))) (if (and ci2090@ls/false (apply (lambda (ci2092@id) (cib70@id? ci2092@id)) ci2090@ls/false)) (apply (lambda (ci2094@id) '#t) ci2090@ls/false) (let ((ci2096@t ci208e@t)) (let ((ci2098@ls/false (cid77@syntax-dispatch ci2096@t '(_ . each-any)))) (if ci2098@ls/false (apply (lambda (ci209a@imp*) '#f) ci2098@ls/false) (let ((ci209c@t ci2096@t)) (let ((ci209e@ls/false (cid77@syntax-dispatch ci209c@t '_))) (if ci209e@ls/false (apply (lambda () (cie57@syntax-violation '#f '"malformed import form" ci208c@e)) ci209e@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci209c@t)))))))))))) (ci203b@module-import (lambda (ci206a@e ci206b@r) (let ((ci206e@t ci206a@e)) (let ((ci2070@ls/false (cid77@syntax-dispatch ci206e@t '(_ any)))) (if (and ci2070@ls/false (apply (lambda (ci2072@id) (cib70@id? ci2072@id)) ci2070@ls/false)) (apply (lambda (ci2074@id) (call-with-values (lambda () (cib92@syntax-type ci2074@id ci206b@r)) (lambda (ci207c@ci2077 ci207d@ci2079 ci207e@ci207b) (let ((ci2082@kwd ci207e@ci207b) (ci2083@value ci207d@ci2079) (ci2084@type ci207c@ci2077)) (let ((ci2088@t ci2084@type)) (if (memv ci2088@t '($module)) (let ((ci208a@iface ci2083@value)) (values (cidcb@module-interface-exp-id* ci208a@iface ci2074@id) (cidc5@module-interface-exp-lab-vec ci208a@iface))) (cie57@syntax-violation '#f '"invalid import" ci206a@e))))))) ci2070@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci206e@t)))))) (ci203d@library-import (lambda (ci204e@e) (let ((ci2050@t ci204e@e)) (let ((ci2052@ls/false (cid77@syntax-dispatch ci2050@t '(any . each-any)))) (if ci2052@ls/false (apply (lambda (ci2054@ctxt ci2055@imp*) (call-with-values (lambda () (cidd9@parse-import-spec* (cie5d@syntax->datum ci2055@imp*))) (lambda (ci205c@ci2059 ci205d@ci205b) (let ((ci2060@subst-labels ci205d@ci205b) (ci2061@subst-names ci205c@ci2059)) (values (vector-map (lambda (ci2064@name) (cib50@datum->stx ci2054@ctxt ci2064@name)) ci2061@subst-names) ci2060@subst-labels))))) ci2052@ls/false) (let ((ci2066@t ci2050@t)) (let ((ci2068@ls/false (cid77@syntax-dispatch ci2066@t '_))) (if ci2068@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid import form" ci204e@e)) ci2068@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci2066@t)))))))))) (begin (call-with-values (lambda () (if (ci2039@module-import? ci1f9c@e) (ci203b@module-import ci1f9c@e ci1f89@r) (ci203d@library-import ci1f9c@e))) (lambda (ci2042@ci203f ci2043@ci2041) (let ((ci2046@lab* ci2043@ci2041) (ci2047@id* ci2042@ci203f)) (vector-for-each (lambda (ci204a@id ci204b@lab) (cib26@extend-rib! ci1f90@rib ci204a@id ci204b@lab)) ci2047@id* ci2046@lab*)))) (cidcf@chi-body* (cdr ci1f88@e*) ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?))) (if ci1f91@top? (cidcf@chi-body* (cdr ci1f88@e*) ci1f89@r ci1f8a@mr (cons (ciaf8@gen-lexical 'dummy) ci1f8b@lex*) (cons (cons 'top-expr ci1f9c@e) ci1f8c@rhs*) ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp* ci1f90@rib ci1f91@top?) (values ci1f88@e* ci1f89@r ci1f8a@mr ci1f8b@lex* ci1f8c@rhs* ci1f8d@mod** ci1fb0@kwd* ci1f8f@exp*)))))))))))))))))))))) (set! ci2875@cidcf@chi-body* cidcf@chi-body*) (set! cidd1@expand-transformer (lambda (ci20a0@expr ci20a1@r) (let ((ci20a4@rtc (ciddd@make-collector))) (let ((ci20a6@expanded-rhs (let ((ci20b0@ci20a9 ciddf@inv-collector) (ci20b1@ci20ab cide1@vis-collector) (ci20b2@ci20ad ci20a4@rtc) (ci20b3@ci20af (lambda (ci20b8@x) (values)))) (let ((ci20ba@swap (lambda () (begin (let ((ci20bc@t (ci20b0@ci20a9))) (begin (ci20b0@ci20a9 ci20b2@ci20ad) (set! ci20b2@ci20ad ci20bc@t))) (let ((ci20be@t (ci20b1@ci20ab))) (begin (ci20b1@ci20ab ci20b3@ci20af) (set! ci20b3@ci20af ci20be@t))))))) (dynamic-wind ci20ba@swap (lambda () (cid99@chi-expr ci20a0@expr ci20a1@r ci20a1@r)) ci20ba@swap))))) (begin (for-each (let ((ci20c0@mark-visit (cide1@vis-collector))) (lambda (ci20c2@x) (begin (ci98c@ci7da@invoke-library ci20c2@x) (ci20c0@mark-visit ci20c2@x)))) (ci20a4@rtc)) ci20a6@expanded-rhs))))) (set! ci2876@cidd1@expand-transformer cidd1@expand-transformer) (set! cidd3@parse-exports (lambda (ci20c4@exp*) (let ci20cc@f ((ci20c6@exp* ci20c4@exp*) (ci20c7@int* '()) (ci20c8@ext* '())) (if (null? ci20c6@exp*) (begin (if (not (cib78@valid-bound-ids? ci20c8@ext*)) (cie57@syntax-violation 'export '"invalid exports" (cidad@find-dups ci20c8@ext*)) (void)) (values (map cie5d@syntax->datum ci20c8@ext*) ci20c7@int*)) (let ((ci20ce@t (car ci20c6@exp*))) (let ((ci20d0@ls/false (cid77@syntax-dispatch ci20ce@t '(any . #(each (any any)))))) (if ci20d0@ls/false (apply (lambda (ci20d2@rename ci20d3@i* ci20d4@e*) (begin (if (not (and (eq? (cie5d@syntax->datum ci20d2@rename) 'rename) (for-all cib70@id? ci20d3@i*) (for-all cib70@id? ci20d4@e*))) (cie57@syntax-violation 'export '"invalid export specifier" (car ci20c6@exp*)) (void)) (ci20cc@f (cdr ci20c6@exp*) (append ci20d3@i* ci20c7@int*) (append ci20d4@e* ci20c8@ext*)))) ci20d0@ls/false) (let ((ci20d8@t ci20ce@t)) (let ((ci20da@ls/false (cid77@syntax-dispatch ci20d8@t 'any))) (if ci20da@ls/false (apply (lambda (ci20dc@ie) (begin (if (not (cib70@id? ci20dc@ie)) (cie57@syntax-violation 'export '"invalid export" ci20dc@ie) (void)) (ci20cc@f (cdr ci20c6@exp*) (cons ci20dc@ie ci20c7@int*) (cons ci20dc@ie ci20c8@ext*)))) ci20da@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci20d8@t))))))))))) (set! ci2877@cidd3@parse-exports cidd3@parse-exports) (set! cidd5@parse-library-name (lambda (ci20de@spec) (letrec* ((ci20e1@parse (lambda (ci20ee@x) (let ((ci20f0@t ci20ee@x)) (let ((ci20f2@ls/false (cid77@syntax-dispatch ci20f0@t '(each-any)))) (if (and ci20f2@ls/false (apply (lambda (ci20f4@v*) (for-all (lambda (ci20f6@x) (let ((ci20f8@x (cie5d@syntax->datum ci20f6@x))) (and (integer? ci20f8@x) (exact? ci20f8@x)))) ci20f4@v*)) ci20f2@ls/false)) (apply (lambda (ci20fa@v*) (values '() (map cie5d@syntax->datum ci20fa@v*))) ci20f2@ls/false) (let ((ci20fc@t ci20f0@t)) (let ((ci20fe@ls/false (cid77@syntax-dispatch ci20fc@t '(any . any)))) (if (and ci20fe@ls/false (apply (lambda (ci2100@x ci2101@rest) (symbol? (cie5d@syntax->datum ci2100@x))) ci20fe@ls/false)) (apply (lambda (ci2104@x ci2105@rest) (call-with-values (lambda () (ci20e1@parse ci2105@rest)) (lambda (ci210c@ci2109 ci210d@ci210b) (let ((ci2110@v* ci210d@ci210b) (ci2111@x* ci210c@ci2109)) (values (cons (cie5d@syntax->datum ci2104@x) ci2111@x*) ci2110@v*))))) ci20fe@ls/false) (let ((ci2114@t ci20fc@t)) (let ((ci2116@ls/false (cid77@syntax-dispatch ci2114@t '()))) (if ci2116@ls/false (apply (lambda () (values '() '())) ci2116@ls/false) (let ((ci2118@t ci2114@t)) (let ((ci211a@ls/false (cid77@syntax-dispatch ci2118@t '_))) (if ci211a@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid library name" ci20de@spec)) ci211a@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci2118@t)))))))))))))))) (call-with-values (lambda () (ci20e1@parse ci20de@spec)) (lambda (ci20e6@ci20e3 ci20e7@ci20e5) (let ((ci20ea@ver* ci20e7@ci20e5) (ci20eb@name* ci20e6@ci20e3)) (begin (if (null? ci20eb@name*) (cie57@syntax-violation '#f '"empty library name" ci20de@spec) (void)) (values ci20eb@name* ci20ea@ver*)))))))) (set! ci2878@cidd5@parse-library-name cidd5@parse-library-name) (set! cidd7@parse-library (lambda (ci211c@e) (let ((ci211e@t ci211c@e)) (let ((ci2120@ls/false (cid77@syntax-dispatch ci211e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and ci2120@ls/false (apply (lambda (ci2122@library ci2123@name* ci2124@export ci2125@exp* ci2126@import ci2127@imp* ci2128@b*) (and (eq? (cie5d@syntax->datum ci2124@export) 'export) (eq? (cie5d@syntax->datum ci2126@import) 'import) (eq? (cie5d@syntax->datum ci2122@library) 'library))) ci2120@ls/false)) (apply (lambda (ci2130@library ci2131@name* ci2132@export ci2133@exp* ci2134@import ci2135@imp* ci2136@b*) (values ci2131@name* ci2133@exp* ci2135@imp* ci2136@b*)) ci2120@ls/false) (let ((ci213e@t ci211e@t)) (let ((ci2140@ls/false (cid77@syntax-dispatch ci213e@t '_))) (if ci2140@ls/false (apply (lambda () (cie57@syntax-violation '#f '"malformed library" ci211c@e)) ci2140@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci213e@t))))))))) (set! ci2879@cidd7@parse-library cidd7@parse-library) (set! cidd9@parse-import-spec* (letrec* ((ci2143@idsyn? (lambda (ci234c@x) (symbol? (cie5d@syntax->datum ci234c@x)))) (ci2145@dup-error (lambda (ci234a@name) (cie57@syntax-violation 'import '"two imports with different bindings" ci234a@name))) (ci2147@merge-substs (lambda (ci2338@s ci2339@subst) (letrec* ((ci233d@insert-to-subst (lambda (ci233e@a ci233f@subst) (let ((ci2342@name (car ci233e@a)) (ci2343@label (cdr ci233e@a))) (let ((ci2346@t (assq ci2342@name ci233f@subst))) (if ci2346@t ((lambda (ci2348@x) (if (eq? (cdr ci2348@x) ci2343@label) ci233f@subst (ci2145@dup-error ci2342@name))) ci2346@t) (cons ci233e@a ci233f@subst))))))) (if (null? ci2338@s) ci2339@subst (ci233d@insert-to-subst (car ci2338@s) (ci2147@merge-substs (cdr ci2338@s) ci2339@subst)))))) (ci2149@exclude* (lambda (ci2308@sym* ci2309@subst) (letrec* ((ci230d@exclude (lambda (ci2326@sym ci2327@subst) (if (null? ci2327@subst) (cie57@syntax-violation 'import '"cannot rename unbound identifier" ci2326@sym) (if (eq? ci2326@sym (caar ci2327@subst)) (values (cdar ci2327@subst) (cdr ci2327@subst)) (let ((ci232a@a (car ci2327@subst))) (call-with-values (lambda () (ci230d@exclude ci2326@sym (cdr ci2327@subst))) (lambda (ci2330@ci232d ci2331@ci232f) (let ((ci2334@subst ci2331@ci232f) (ci2335@old ci2330@ci232d)) (values ci2335@old (cons ci232a@a ci2334@subst))))))))))) (if (null? ci2308@sym*) (values '() ci2309@subst) (call-with-values (lambda () (ci230d@exclude (car ci2308@sym*) ci2309@subst)) (lambda (ci2312@ci230f ci2313@ci2311) (let ((ci2316@subst ci2313@ci2311) (ci2317@old ci2312@ci230f)) (call-with-values (lambda () (ci2149@exclude* (cdr ci2308@sym*) ci2316@subst)) (lambda (ci231e@ci231b ci231f@ci231d) (let ((ci2322@subst ci231f@ci231d) (ci2323@old* ci231e@ci231b)) (values (cons ci2317@old ci2323@old*) ci2322@subst))))))))))) (ci214b@find* (lambda (ci2300@sym* ci2301@subst) (map (lambda (ci2304@x) (let ((ci2306@t (assq ci2304@x ci2301@subst))) (if ci2306@t (cdr ci2306@t) (cie57@syntax-violation 'import '"cannot find identifier" ci2304@x)))) ci2300@sym*))) (ci214d@rem* (lambda (ci22f8@sym* ci22f9@subst) (let ci22fe@f ((ci22fc@subst ci22f9@subst)) (if (null? ci22fc@subst) '() (if (memq (caar ci22fc@subst) ci22f8@sym*) (ci22fe@f (cdr ci22fc@subst)) (cons (car ci22fc@subst) (ci22fe@f (cdr ci22fc@subst)))))))) (ci214f@remove-dups (lambda (ci22f6@ls) (if (null? ci22f6@ls) '() (if (memq (car ci22f6@ls) (cdr ci22f6@ls)) (ci214f@remove-dups (cdr ci22f6@ls)) (cons (car ci22f6@ls) (ci214f@remove-dups (cdr ci22f6@ls))))))) (ci2151@parse-library-name (lambda (ci220e@spec) (letrec* ((ci2211@subversion? (lambda (ci22f2@x) (let ((ci22f4@x (cie5d@syntax->datum ci22f2@x))) (and (integer? ci22f4@x) (exact? ci22f4@x) (>= ci22f4@x '0))))) (ci2213@subversion-pred (lambda (ci2292@x*) (let ((ci2294@t ci2292@x*)) (let ((ci2296@ls/false (cid77@syntax-dispatch ci2294@t 'any))) (if (and ci2296@ls/false (apply (lambda (ci2298@n) (ci2211@subversion? ci2298@n)) ci2296@ls/false)) (apply (lambda (ci229a@n) (lambda (ci229c@x) (= ci229c@x (cie5d@syntax->datum ci229a@n)))) ci2296@ls/false) (let ((ci229e@t ci2294@t)) (let ((ci22a0@ls/false (cid77@syntax-dispatch ci229e@t '(any . each-any)))) (if (and ci22a0@ls/false (apply (lambda (ci22a2@p? ci22a3@sub*) (eq? (cie5d@syntax->datum ci22a2@p?) 'and)) ci22a0@ls/false)) (apply (lambda (ci22a6@p? ci22a7@sub*) (let ((ci22aa@p* (map ci2213@subversion-pred ci22a7@sub*))) (lambda (ci22ac@x) (for-all (lambda (ci22ae@p) (ci22ae@p ci22ac@x)) ci22aa@p*)))) ci22a0@ls/false) (let ((ci22b0@t ci229e@t)) (let ((ci22b2@ls/false (cid77@syntax-dispatch ci22b0@t '(any . each-any)))) (if (and ci22b2@ls/false (apply (lambda (ci22b4@p? ci22b5@sub*) (eq? (cie5d@syntax->datum ci22b4@p?) 'or)) ci22b2@ls/false)) (apply (lambda (ci22b8@p? ci22b9@sub*) (let ((ci22bc@p* (map ci2213@subversion-pred ci22b9@sub*))) (lambda (ci22be@x) (exists (lambda (ci22c0@p) (ci22c0@p ci22be@x)) ci22bc@p*)))) ci22b2@ls/false) (let ((ci22c2@t ci22b0@t)) (let ((ci22c4@ls/false (cid77@syntax-dispatch ci22c2@t '(any any)))) (if (and ci22c4@ls/false (apply (lambda (ci22c6@p? ci22c7@sub) (eq? (cie5d@syntax->datum ci22c6@p?) 'not)) ci22c4@ls/false)) (apply (lambda (ci22ca@p? ci22cb@sub) (let ((ci22ce@p (ci2213@subversion-pred ci22cb@sub))) (lambda (ci22d0@x) (not (ci22ce@p ci22d0@x))))) ci22c4@ls/false) (let ((ci22d2@t ci22c2@t)) (let ((ci22d4@ls/false (cid77@syntax-dispatch ci22d2@t '(any any)))) (if (and ci22d4@ls/false (apply (lambda (ci22d6@p? ci22d7@n) (and (eq? (cie5d@syntax->datum ci22d6@p?) '<=) (ci2211@subversion? ci22d7@n))) ci22d4@ls/false)) (apply (lambda (ci22da@p? ci22db@n) (lambda (ci22de@x) (<= ci22de@x (cie5d@syntax->datum ci22db@n)))) ci22d4@ls/false) (let ((ci22e0@t ci22d2@t)) (let ((ci22e2@ls/false (cid77@syntax-dispatch ci22e0@t '(any any)))) (if (and ci22e2@ls/false (apply (lambda (ci22e4@p? ci22e5@n) (and (eq? (cie5d@syntax->datum ci22e4@p?) '>=) (ci2211@subversion? ci22e5@n))) ci22e2@ls/false)) (apply (lambda (ci22e8@p? ci22e9@n) (lambda (ci22ec@x) (>= ci22ec@x (cie5d@syntax->datum ci22e9@n)))) ci22e2@ls/false) (let ((ci22ee@t ci22e0@t)) (let ((ci22f0@ls/false (cid77@syntax-dispatch ci22ee@t '_))) (if ci22f0@ls/false (apply (lambda () (cie57@syntax-violation 'import '"invalid sub-version spec" ci220e@spec ci2292@x*)) ci22f0@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci22ee@t)))))))))))))))))))))))) (ci2215@version-pred (lambda (ci2242@x*) (let ((ci2244@t ci2242@x*)) (let ((ci2246@ls/false (cid77@syntax-dispatch ci2244@t '()))) (if ci2246@ls/false (apply (lambda () (lambda (ci2248@x) '#t)) ci2246@ls/false) (let ((ci224a@t ci2244@t)) (let ((ci224c@ls/false (cid77@syntax-dispatch ci224a@t '(any . each-any)))) (if (and ci224c@ls/false (apply (lambda (ci224e@c ci224f@ver*) (eq? (cie5d@syntax->datum ci224e@c) 'and)) ci224c@ls/false)) (apply (lambda (ci2252@c ci2253@ver*) (let ((ci2256@p* (map ci2215@version-pred ci2253@ver*))) (lambda (ci2258@x) (for-all (lambda (ci225a@p) (ci225a@p ci2258@x)) ci2256@p*)))) ci224c@ls/false) (let ((ci225c@t ci224a@t)) (let ((ci225e@ls/false (cid77@syntax-dispatch ci225c@t '(any . each-any)))) (if (and ci225e@ls/false (apply (lambda (ci2260@c ci2261@ver*) (eq? (cie5d@syntax->datum ci2260@c) 'or)) ci225e@ls/false)) (apply (lambda (ci2264@c ci2265@ver*) (let ((ci2268@p* (map ci2215@version-pred ci2265@ver*))) (lambda (ci226a@x) (exists (lambda (ci226c@p) (ci226c@p ci226a@x)) ci2268@p*)))) ci225e@ls/false) (let ((ci226e@t ci225c@t)) (let ((ci2270@ls/false (cid77@syntax-dispatch ci226e@t '(any any)))) (if (and ci2270@ls/false (apply (lambda (ci2272@c ci2273@ver) (eq? (cie5d@syntax->datum ci2272@c) 'not)) ci2270@ls/false)) (apply (lambda (ci2276@c ci2277@ver) (let ((ci227a@p (ci2215@version-pred ci2277@ver))) (lambda (ci227c@x) (not (ci227a@p ci227c@x))))) ci2270@ls/false) (let ((ci227e@t ci226e@t)) (let ((ci2280@ls/false (cid77@syntax-dispatch ci227e@t 'each-any))) (if ci2280@ls/false (apply (lambda (ci2282@sub*) (let ((ci2284@p* (map ci2213@subversion-pred ci2282@sub*))) (lambda (ci2286@x) (let ci228c@f ((ci2288@p* ci2284@p*) (ci2289@x ci2286@x)) (if (null? ci2288@p*) '#t (if (null? ci2289@x) '#f (and ((car ci2288@p*) (car ci2289@x)) (ci228c@f (cdr ci2288@p*) (cdr ci2289@x))))))))) ci2280@ls/false) (let ((ci228e@t ci227e@t)) (let ((ci2290@ls/false (cid77@syntax-dispatch ci228e@t '_))) (if ci2290@ls/false (apply (lambda () (cie57@syntax-violation 'import '"invalid version spec" ci220e@spec ci2242@x*)) ci2290@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci228e@t)))))))))))))))))))))) (let ci2218@f ((ci2216@x ci220e@spec)) (let ((ci221a@t ci2216@x)) (let ((ci221c@ls/false (cid77@syntax-dispatch ci221a@t '(each-any)))) (if ci221c@ls/false (apply (lambda (ci221e@version-spec*) (values '() (ci2215@version-pred ci221e@version-spec*))) ci221c@ls/false) (let ((ci2220@t ci221a@t)) (let ((ci2222@ls/false (cid77@syntax-dispatch ci2220@t '(any . any)))) (if (and ci2222@ls/false (apply (lambda (ci2224@x ci2225@x*) (ci2143@idsyn? ci2224@x)) ci2222@ls/false)) (apply (lambda (ci2228@x ci2229@x*) (call-with-values (lambda () (ci2218@f ci2229@x*)) (lambda (ci2230@ci222d ci2231@ci222f) (let ((ci2234@pred ci2231@ci222f) (ci2235@name ci2230@ci222d)) (values (cons (cie5d@syntax->datum ci2228@x) ci2235@name) ci2234@pred))))) ci2222@ls/false) (let ((ci2238@t ci2220@t)) (let ((ci223a@ls/false (cid77@syntax-dispatch ci2238@t '()))) (if ci223a@ls/false (apply (lambda () (values '() (lambda (ci223c@x) '#t))) ci223a@ls/false) (let ((ci223e@t ci2238@t)) (let ((ci2240@ls/false (cid77@syntax-dispatch ci223e@t '_))) (if ci2240@ls/false (apply (lambda () (cie57@syntax-violation '#f '"invalid import spec" ci220e@spec)) ci2240@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci223e@t))))))))))))))))) (ci2153@import-library (lambda (ci21fe@spec*) (call-with-values (lambda () (ci2151@parse-library-name ci21fe@spec*)) (lambda (ci2204@ci2201 ci2205@ci2203) (let ((ci2208@pred ci2205@ci2203) (ci2209@name ci2204@ci2201)) (begin (if (null? ci2209@name) (cie57@syntax-violation 'import '"empty library name" ci21fe@spec*) (void)) (let ((ci220c@lib (ci985@ci7cc@find-library-by-name ci2209@name))) (begin (if (not ci220c@lib) (cie57@syntax-violation 'import '"cannot find library with required name" ci2209@name) (void)) (if (not (ci2208@pred (ci95f@ci780@library-version ci220c@lib))) (cie57@syntax-violation 'import '"library does not satisfy version specification" ci21fe@spec* ci220c@lib) (void)) ((cide3@imp-collector) ci220c@lib) (ci967@ci790@library-subst ci220c@lib))))))))) (ci2155@get-import (lambda (ci2170@spec) (let ((ci2172@t ci2170@spec)) (let ((ci2174@ls/false (cid77@syntax-dispatch ci2172@t '(any . each-any)))) (if (and ci2174@ls/false (apply (lambda (ci2176@x ci2177@x*) (not (memq (cie5d@syntax->datum ci2176@x) '(for rename except only prefix library)))) ci2174@ls/false)) (apply (lambda (ci217a@x ci217b@x*) (ci2153@import-library (cons ci217a@x ci217b@x*))) ci2174@ls/false) (let ((ci217e@t ci2172@t)) (let ((ci2180@ls/false (cid77@syntax-dispatch ci217e@t '(any any . #(each (any any)))))) (if (and ci2180@ls/false (apply (lambda (ci2182@rename ci2183@isp ci2184@old* ci2185@new*) (and (eq? (cie5d@syntax->datum ci2182@rename) 'rename) (for-all ci2143@idsyn? ci2184@old*) (for-all ci2143@idsyn? ci2185@new*))) ci2180@ls/false)) (apply (lambda (ci218a@rename ci218b@isp ci218c@old* ci218d@new*) (let ((ci2192@subst (ci2155@get-import ci218b@isp)) (ci2193@old* (map cie5d@syntax->datum ci218c@old*)) (ci2194@new* (map cie5d@syntax->datum ci218d@new*))) (let ((ci2198@old-label* (ci214b@find* ci2193@old* ci2192@subst))) (let ((ci219a@subst (ci214d@rem* ci2193@old* ci2192@subst))) (ci2147@merge-substs (map cons ci2194@new* ci2198@old-label*) ci219a@subst))))) ci2180@ls/false) (let ((ci219c@t ci217e@t)) (let ((ci219e@ls/false (cid77@syntax-dispatch ci219c@t '(any any . each-any)))) (if (and ci219e@ls/false (apply (lambda (ci21a0@except ci21a1@isp ci21a2@sym*) (and (eq? (cie5d@syntax->datum ci21a0@except) 'except) (for-all ci2143@idsyn? ci21a2@sym*))) ci219e@ls/false)) (apply (lambda (ci21a6@except ci21a7@isp ci21a8@sym*) (let ((ci21ac@subst (ci2155@get-import ci21a7@isp))) (ci214d@rem* (map cie5d@syntax->datum ci21a8@sym*) ci21ac@subst))) ci219e@ls/false) (let ((ci21ae@t ci219c@t)) (let ((ci21b0@ls/false (cid77@syntax-dispatch ci21ae@t '(any any . each-any)))) (if (and ci21b0@ls/false (apply (lambda (ci21b2@only ci21b3@isp ci21b4@sym*) (and (eq? (cie5d@syntax->datum ci21b2@only) 'only) (for-all ci2143@idsyn? ci21b4@sym*))) ci21b0@ls/false)) (apply (lambda (ci21b8@only ci21b9@isp ci21ba@sym*) (let ((ci21be@subst (ci2155@get-import ci21b9@isp)) (ci21bf@sym* (map cie5d@syntax->datum ci21ba@sym*))) (let ((ci21c2@sym* (ci214f@remove-dups ci21bf@sym*))) (let ((ci21c4@lab* (ci214b@find* ci21c2@sym* ci21be@subst))) (map cons ci21c2@sym* ci21c4@lab*))))) ci21b0@ls/false) (let ((ci21c6@t ci21ae@t)) (let ((ci21c8@ls/false (cid77@syntax-dispatch ci21c6@t '(any any any)))) (if (and ci21c8@ls/false (apply (lambda (ci21ca@prefix ci21cb@isp ci21cc@p) (and (eq? (cie5d@syntax->datum ci21ca@prefix) 'prefix) (ci2143@idsyn? ci21cc@p))) ci21c8@ls/false)) (apply (lambda (ci21d0@prefix ci21d1@isp ci21d2@p) (let ((ci21d6@subst (ci2155@get-import ci21d1@isp)) (ci21d7@prefix (symbol->string (cie5d@syntax->datum ci21d2@p)))) (map (lambda (ci21da@x) (cons (string->symbol (string-append ci21d7@prefix (symbol->string (car ci21da@x)))) (cdr ci21da@x))) ci21d6@subst))) ci21c8@ls/false) (let ((ci21dc@t ci21c6@t)) (let ((ci21de@ls/false (cid77@syntax-dispatch ci21dc@t '(any each-any)))) (if (and ci21de@ls/false (apply (lambda (ci21e0@library ci21e1@spec*) (eq? (cie5d@syntax->datum ci21e0@library) 'library)) ci21de@ls/false)) (apply (lambda (ci21e4@library ci21e5@spec*) (ci2153@import-library ci21e5@spec*)) ci21de@ls/false) (let ((ci21e8@t ci21dc@t)) (let ((ci21ea@ls/false (cid77@syntax-dispatch ci21e8@t '(any any . any)))) (if (and ci21ea@ls/false (apply (lambda (ci21ec@for ci21ed@isp ci21ee@rest) (eq? (cie5d@syntax->datum ci21ec@for) 'for)) ci21ea@ls/false)) (apply (lambda (ci21f2@for ci21f3@isp ci21f4@rest) (ci2155@get-import ci21f3@isp)) ci21ea@ls/false) (let ((ci21f8@t ci21e8@t)) (let ((ci21fa@ls/false (cid77@syntax-dispatch ci21f8@t 'any))) (if ci21fa@ls/false (apply (lambda (ci21fc@spec) (cie57@syntax-violation 'import '"invalid import spec" ci21fc@spec)) ci21fa@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci21f8@t))))))))))))))))))))))))))) (ci2157@add-imports! (lambda (ci2160@imp ci2161@h) (let ((ci2164@subst (ci2155@get-import ci2160@imp))) (for-each (lambda (ci2166@x) (let ((ci2168@name (car ci2166@x)) (ci2169@label (cdr ci2166@x))) (let ((ci216c@t (hashtable-ref ci2161@h ci2168@name '#f))) (if ci216c@t ((lambda (ci216e@l) (if (not (eq? ci216e@l ci2169@label)) (ci2145@dup-error ci2168@name) (void))) ci216c@t) (hashtable-set! ci2161@h ci2168@name ci2169@label))))) ci2164@subst))))) (lambda (ci2158@imp*) (let ci215e@f ((ci215a@imp* ci2158@imp*) (ci215b@h (make-eq-hashtable))) (if (null? ci215a@imp*) (hashtable-entries ci215b@h) (begin (ci2157@add-imports! (car ci215a@imp*) ci215b@h) (ci215e@f (cdr ci215a@imp*) ci215b@h))))))) (set! ci287a@cidd9@parse-import-spec* cidd9@parse-import-spec*) (set! ciddb@make-top-rib (lambda (ci234e@names ci234f@labels) (let ((ci2352@rib (cib24@make-empty-rib))) (begin (vector-for-each (lambda (ci2354@name ci2355@label) (begin (if (not (symbol? ci2354@name)) (error 'make-top-rib '"BUG: not a symbol" ci2354@name) (void)) (cib28@extend-rib/nc! ci2352@rib (make-simple-struct 'stx '5 (list ci2354@name ciaf4@top-mark* '() '())) ci2355@label))) ci234e@names ci234f@labels) ci2352@rib)))) (set! ci287b@ciddb@make-top-rib ciddb@make-top-rib) (set! ciddd@make-collector (lambda () (let ((ci2358@ls '())) (lambda ci235c (let ((ci235d (length ci235c))) (if (= ci235d '0) (apply (lambda () ci2358@ls) ci235c) (if (= ci235d '1) (apply (lambda (ci235a@x) (set! ci2358@ls (ciaed@set-cons ci235a@x ci2358@ls))) ci235c) (error #1='apply '"invalid arg count")))))))) (set! ci287c@ciddd@make-collector ciddd@make-collector) (set! ciddf@inv-collector (ci6c0@ci59e@make-parameter (lambda ci235e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (ci2360@x) (begin (if (not (procedure? ci2360@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" ci2360@x) (void)) ci2360@x)))) (set! ci287d@ciddf@inv-collector ciddf@inv-collector) (set! cide1@vis-collector (ci6c0@ci59e@make-parameter (lambda ci2362@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (ci2364@x) (begin (if (not (procedure? ci2364@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" ci2364@x) (void)) ci2364@x)))) (set! ci287e@cide1@vis-collector cide1@vis-collector) (set! cide3@imp-collector (ci6c0@ci59e@make-parameter (lambda ci2366@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (ci2368@x) (begin (if (not (procedure? ci2368@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" ci2368@x) (void)) ci2368@x)))) (set! ci287f@cide3@imp-collector cide3@imp-collector) (set! cide5@chi-library-internal (lambda (ci236a@e* ci236b@rib ci236c@top?) (call-with-values (lambda () (cidcf@chi-body* ci236a@e* '() '() '() '() '() '() '() ci236b@rib ci236c@top?)) (lambda (ci2380@ci2371 ci2381@ci2373 ci2382@ci2375 ci2383@ci2377 ci2384@ci2379 ci2385@ci237b ci2386@ci237d ci2387@ci237f) (let ((ci2390@exp* ci2387@ci237f) (ci2391@_kwd* ci2386@ci237d) (ci2392@mod** ci2385@ci237b) (ci2393@rhs* ci2384@ci2379) (ci2394@lex* ci2383@ci2377) (ci2395@mr ci2382@ci2375) (ci2396@r ci2381@ci2373) (ci2397@e* ci2380@ci2371)) (values (append (apply append (reverse ci2392@mod**)) ci2397@e*) ci2396@r ci2395@mr (reverse ci2394@lex*) (reverse ci2393@rhs*) ci2390@exp*)))))) (set! ci2880@cide5@chi-library-internal cide5@chi-library-internal) (set! cide7@chi-interaction-expr (lambda (ci23a0@e ci23a1@rib ci23a2@r) (call-with-values (lambda () (cidcf@chi-body* (list ci23a0@e) ci23a2@r ci23a2@r '() '() '() '() '() ci23a1@rib '#t)) (lambda (ci23b6@ci23a7 ci23b7@ci23a9 ci23b8@ci23ab ci23b9@ci23ad ci23ba@ci23af ci23bb@ci23b1 ci23bc@ci23b3 ci23bd@ci23b5) (let ((ci23c6@_exp* ci23bd@ci23b5) (ci23c7@_kwd* ci23bc@ci23b3) (ci23c8@mod** ci23bb@ci23b1) (ci23c9@rhs* ci23ba@ci23af) (ci23ca@lex* ci23b9@ci23ad) (ci23cb@mr ci23b8@ci23ab) (ci23cc@r ci23b7@ci23a9) (ci23cd@e* ci23b6@ci23a7)) (let ((ci23d6@e* (cida7@expand-interaction-rhs*/init* (reverse ci23ca@lex*) (reverse ci23c9@rhs*) (append (apply append (reverse ci23c8@mod**)) ci23cd@e*) ci23cc@r ci23cb@mr))) (let ((ci23d8@e (if (null? ci23d6@e*) (ciad6@cia37@build-void) (if (null? (cdr ci23d6@e*)) (car ci23d6@e*) (ciad5@cia35@build-sequence '#f ci23d6@e*))))) (values ci23d8@e ci23cc@r)))))))) (set! ci2881@cide7@chi-interaction-expr cide7@chi-interaction-expr) (set! cide9@library-body-expander (lambda (ci23da@name ci23db@main-exp* ci23dc@imp* ci23dd@b* ci23de@top?) (letrec* ((ci23e5@itc (ciddd@make-collector))) (let ((ci23ee@ci23e7 cide3@imp-collector) (ci23ef@ci23e9 cie67@top-level-context) (ci23f0@ci23eb ci23e5@itc) (ci23f1@ci23ed '#f)) (let ((ci23f6@swap (lambda () (begin (let ((ci23f8@t (ci23ee@ci23e7))) (begin (ci23ee@ci23e7 ci23f0@ci23eb) (set! ci23f0@ci23eb ci23f8@t))) (let ((ci23fa@t (ci23ef@ci23e9))) (begin (ci23ef@ci23e9 ci23f1@ci23ed) (set! ci23f1@ci23ed ci23fa@t))))))) (dynamic-wind ci23f6@swap (lambda () (call-with-values (lambda () (cidd9@parse-import-spec* ci23dc@imp*)) (lambda (ci2400@ci23fd ci2401@ci23ff) (let ((ci2404@subst-labels ci2401@ci23ff) (ci2405@subst-names ci2400@ci23fd)) (let ((ci2408@rib (ciddb@make-top-rib ci2405@subst-names ci2404@subst-labels))) (letrec* ((ci240b@wrap (lambda (ci2486@x) (make-simple-struct 'stx '5 (list ci2486@x ciaf4@top-mark* (list ci2408@rib) '()))))) (let ((ci240c@b* (map ci240b@wrap ci23dd@b*)) (ci240d@main-exp* (map ci240b@wrap ci23db@main-exp*)) (ci240e@rtc (ciddd@make-collector)) (ci240f@vtc (ciddd@make-collector))) (let ((ci241c@ci2415 ciddf@inv-collector) (ci241d@ci2417 cide1@vis-collector) (ci241e@ci2419 ci240e@rtc) (ci241f@ci241b ci240f@vtc)) (let ((ci2424@swap (lambda () (begin (let ((ci2426@t (ci241c@ci2415))) (begin (ci241c@ci2415 ci241e@ci2419) (set! ci241e@ci2419 ci2426@t))) (let ((ci2428@t (ci241d@ci2417))) (begin (ci241d@ci2417 ci241f@ci241b) (set! ci241f@ci241b ci2428@t))))))) (dynamic-wind ci2424@swap (lambda () (call-with-values (lambda () (cide5@chi-library-internal ci240c@b* ci2408@rib ci23de@top?)) (lambda (ci2436@ci242b ci2437@ci242d ci2438@ci242f ci2439@ci2431 ci243a@ci2433 ci243b@ci2435) (let ((ci2442@internal-exp* ci243b@ci2435) (ci2443@rhs* ci243a@ci2433) (ci2444@lex* ci2439@ci2431) (ci2445@mr ci2438@ci242f) (ci2446@r ci2437@ci242d) (ci2447@init* ci2436@ci242b)) (call-with-values (lambda () (cidd3@parse-exports (append ci240d@main-exp* ci2442@internal-exp*))) (lambda (ci2452@ci244f ci2453@ci2451) (let ((ci2456@exp-id* ci2453@ci2451) (ci2457@exp-name* ci2452@ci244f)) (begin (cib2c@seal-rib! ci2408@rib) (let ((ci245a@init* (cid95@chi-expr* ci2447@init* ci2446@r ci2445@mr))) (let ((ci245c@rhs* (cida9@chi-rhs* ci2443@rhs* ci2446@r ci2445@mr))) (begin (cib2e@unseal-rib! ci2408@rib) (let ((ci245e@loc* (map ciafa@gen-global ci2444@lex*)) (ci245f@export-subst (cie41@make-export-subst ci2457@exp-name* ci2456@exp-id*))) (letrec* ((ci2463@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (cie43@make-export-env/macros ci2444@lex* ci245e@loc* ci2446@r)) (lambda (ci246a@ci2465 ci246b@ci2467 ci246c@ci2469) (let ((ci2470@macro* ci246c@ci2469) (ci2471@global* ci246b@ci2467) (ci2472@export-env ci246a@ci2465)) (begin (for-each (lambda (ci2476@s) (let ((ci2478@name (car ci2476@s)) (ci2479@label (cdr ci2476@s))) (let ((ci247c@p (assq ci2479@label ci2472@export-env))) (if ci247c@p (let ((ci247e@b (cdr ci247c@p))) (let ((ci2480@type (car ci247e@b))) (if (eq? ci2480@type 'mutable) (cie57@syntax-violation 'export ci2463@errstr ci2478@name) (void)))) (void))))) ci245f@export-subst) (let ((ci2482@invoke-body (ciadb@cia41@build-library-letrec* '#f ci23da@name ci2444@lex* ci245e@loc* ci245c@rhs* (if (null? ci245a@init*) (ciad6@cia37@build-void) (ciad5@cia35@build-sequence '#f ci245a@init*)))) (ci2483@invoke-definitions (map ciad2@ci994@build-global-define (map cdr ci2471@global*)))) (values (ci23e5@itc) (ci240e@rtc) (ci240f@vtc) (ciad5@cia35@build-sequence '#f (append ci2483@invoke-definitions (list ci2482@invoke-body))) ci2470@macro* ci245f@export-subst ci2472@export-env))))))))))))))))))) ci2424@swap)))))))))) ci23f6@swap)))))) (set! ci2882@cide9@library-body-expander cide9@library-body-expander) (set! cideb@core-library-expander (lambda (ci2488@e ci2489@verify-name) (call-with-values (lambda () (cidd7@parse-library ci2488@e)) (lambda (ci2494@ci248d ci2495@ci248f ci2496@ci2491 ci2497@ci2493) (let ((ci249c@b* ci2497@ci2493) (ci249d@imp* ci2496@ci2491) (ci249e@exp* ci2495@ci248f) (ci249f@name* ci2494@ci248d)) (call-with-values (lambda () (cidd5@parse-library-name ci249f@name*)) (lambda (ci24a8@ci24a5 ci24a9@ci24a7) (let ((ci24ac@ver ci24a9@ci24a7) (ci24ad@name ci24a8@ci24a5)) (begin (ci2489@verify-name ci24ad@name) (call-with-values (lambda () (cide9@library-body-expander ci24ad@name ci249e@exp* ci249d@imp* ci249c@b* '#f)) (lambda (ci24be@ci24b1 ci24bf@ci24b3 ci24c0@ci24b5 ci24c1@ci24b7 ci24c2@ci24b9 ci24c3@ci24bb ci24c4@ci24bd) (let ((ci24cc@export-env ci24c4@ci24bd) (ci24cd@export-subst ci24c3@ci24bb) (ci24ce@visit-code ci24c2@ci24b9) (ci24cf@invoke-code ci24c1@ci24b7) (ci24d0@visit-req* ci24c0@ci24b5) (ci24d1@invoke-req* ci24bf@ci24b3) (ci24d2@imp* ci24be@ci24b1)) (values ci24ad@name ci24ac@ver ci24d2@imp* ci24d1@invoke-req* ci24d0@visit-req* ci24cf@invoke-code ci24ce@visit-code ci24cd@export-subst ci24cc@export-env))))))))))))) (set! ci2883@cideb@core-library-expander cideb@core-library-expander) (set! cided@parse-top-level-program (lambda (ci24da@e*) (let ((ci24dc@t ci24da@e*)) (let ((ci24de@ls/false (cid77@syntax-dispatch ci24dc@t '((any . each-any) . each-any)))) (if (and ci24de@ls/false (apply (lambda (ci24e0@import ci24e1@imp* ci24e2@b*) (eq? (cie5d@syntax->datum ci24e0@import) 'import)) ci24de@ls/false)) (apply (lambda (ci24e6@import ci24e7@imp* ci24e8@b*) (values ci24e7@imp* ci24e8@b*)) ci24de@ls/false) (let ((ci24ec@t ci24dc@t)) (let ((ci24ee@ls/false (cid77@syntax-dispatch ci24ec@t '((any . any) . any)))) (if (and ci24ee@ls/false (apply (lambda (ci24f0@import ci24f1@x ci24f2@y) (eq? (cie5d@syntax->datum ci24f0@import) 'import)) ci24ee@ls/false)) (apply (lambda (ci24f6@import ci24f7@x ci24f8@y) (cie57@syntax-violation 'expander '"invalid syntax of top-level program" (cib6a@syntax-car ci24da@e*))) ci24ee@ls/false) (let ((ci24fc@t ci24ec@t)) (let ((ci24fe@ls/false (cid77@syntax-dispatch ci24fc@t '_))) (if ci24fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) ci24fe@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci24fc@t)))))))))))) (set! ci2884@cided@parse-top-level-program cided@parse-top-level-program) (set! cidef@top-level-expander (lambda (ci2500@e*) (call-with-values (lambda () (cided@parse-top-level-program ci2500@e*)) (lambda (ci2506@ci2503 ci2507@ci2505) (let ((ci250a@b* ci2507@ci2505) (ci250b@imp* ci2506@ci2503)) (call-with-values (lambda () (cide9@library-body-expander '() '() ci250b@imp* ci250a@b* '#t)) (lambda (ci251c@ci250f ci251d@ci2511 ci251e@ci2513 ci251f@ci2515 ci2520@ci2517 ci2521@ci2519 ci2522@ci251b) (let ((ci252a@export-env ci2522@ci251b) (ci252b@export-subst ci2521@ci2519) (ci252c@visit-code ci2520@ci2517) (ci252d@invoke-code ci251f@ci2515) (ci252e@visit-req* ci251e@ci2513) (ci252f@invoke-req* ci251d@ci2511) (ci2530@imp* ci251c@ci250f)) (values ci252f@invoke-req* ci252d@invoke-code))))))))) (set! ci2885@cidef@top-level-expander cidef@top-level-expander) (set! cidf1@rp (ci6bd@ci598@make-record-printer 'env (lambda (ci2538@x ci2539@p ci253a@wr) (display '"#<environment>" ci2539@p)))) (set! ci2886@cidf1@rp cidf1@rp) (set! cidfb@env? (lambda (ci253e@x) (and (simple-struct? ci253e@x) (eq? (simple-struct-name ci253e@x) 'env)))) (set! ci2887@cidfb@env? cidfb@env?) (set! cidfd@env-names (lambda (ci2540@x) (simple-struct-ref ci2540@x '0))) (set! ci2888@cidfd@env-names cidfd@env-names) (set! cidff@set-env-names! (lambda (ci2542@x ci2543@val) (simple-struct-set! ci2542@x '0 ci2543@val))) (set! ci2889@cidff@set-env-names! cidff@set-env-names!) (set! cie01@env-labels (lambda (ci2546@x) (simple-struct-ref ci2546@x '1))) (set! ci288a@cie01@env-labels cie01@env-labels) (set! cie03@set-env-labels! (lambda (ci2548@x ci2549@val) (simple-struct-set! ci2548@x '1 ci2549@val))) (set! ci288b@cie03@set-env-labels! cie03@set-env-labels!) (set! cie05@env-itc (lambda (ci254c@x) (simple-struct-ref ci254c@x '2))) (set! ci288c@cie05@env-itc cie05@env-itc) (set! cie07@set-env-itc! (lambda (ci254e@x ci254f@val) (simple-struct-set! ci254e@x '2 ci254f@val))) (set! ci288d@cie07@set-env-itc! cie07@set-env-itc!) (set! cie09@dummy '3) (set! ci288e@cie09@dummy cie09@dummy) (set! cie0b@rp (ci6bd@ci598@make-record-printer 'interaction-env (lambda (ci2552@x ci2553@p ci2554@wr) (display '"#<environment>" ci2553@p)))) (set! ci288f@cie0b@rp cie0b@rp) (set! cie15@interaction-env? (lambda (ci2558@x) (and (simple-struct? ci2558@x) (eq? (simple-struct-name ci2558@x) 'interaction-env)))) (set! ci2890@cie15@interaction-env? cie15@interaction-env?) (set! cie17@interaction-env-rib (lambda (ci255a@x) (simple-struct-ref ci255a@x '0))) (set! ci2891@cie17@interaction-env-rib cie17@interaction-env-rib) (set! cie19@set-interaction-env-rib! (lambda (ci255c@x ci255d@val) (simple-struct-set! ci255c@x '0 ci255d@val))) (set! ci2892@cie19@set-interaction-env-rib! cie19@set-interaction-env-rib!) (set! cie1b@interaction-env-r (lambda (ci2560@x) (simple-struct-ref ci2560@x '1))) (set! ci2893@cie1b@interaction-env-r cie1b@interaction-env-r) (set! cie1d@set-interaction-env-r! (lambda (ci2562@x ci2563@val) (simple-struct-set! ci2562@x '1 ci2563@val))) (set! ci2894@cie1d@set-interaction-env-r! cie1d@set-interaction-env-r!) (set! cie1f@interaction-env-locs (lambda (ci2566@x) (simple-struct-ref ci2566@x '2))) (set! ci2895@cie1f@interaction-env-locs cie1f@interaction-env-locs) (set! cie21@set-interaction-env-locs! (lambda (ci2568@x ci2569@val) (simple-struct-set! ci2568@x '2 ci2569@val))) (set! ci2896@cie21@set-interaction-env-locs! cie21@set-interaction-env-locs!) (set! cie23@dummy '3) (set! ci2897@cie23@dummy cie23@dummy) (set! cie25@interaction-environment-symbols (lambda () (cie2d@environment-symbols (cie65@interaction-environment)))) (set! ci2898@cie25@interaction-environment-symbols cie25@interaction-environment-symbols) (set! cie27@environment-bindings (lambda (ci256c@e) (vector->list (vector-map (lambda (ci256e@name ci256f@label) (cie29@parse-binding (cons ci256e@name (ci98b@ci7d8@imported-label->binding ci256f@label)))) (cidfd@env-names ci256c@e) (cie01@env-labels ci256c@e))))) (set! ci2899@cie27@environment-bindings cie27@environment-bindings) (set! cie29@parse-binding (lambda (ci2572@b) (cons (car ci2572@b) (let ((ci2574@t (cadr ci2572@b))) (if (memv ci2574@t '(core-prim global)) 'procedure (if (memv ci2574@t '(core-macro macro global-macro)) 'syntax (if (memv ci2574@t '($core-rtd)) 'record (if (eq? (car ci2572@b) (cadr ci2572@b)) 'syntax 'unknown)))))))) (set! ci289a@cie29@parse-binding cie29@parse-binding) (set! cie2b@environment? (lambda (ci2576@x) (or (cidfb@env? ci2576@x) (cie15@interaction-env? ci2576@x)))) (set! ci289b@cie2b@environment? cie2b@environment?) (set! cie2d@environment-symbols (lambda (ci2578@x) (if (cidfb@env? ci2578@x) (vector->list (cidfd@env-names ci2578@x)) (if (cie15@interaction-env? ci2578@x) (map values (cib0e@rib-sym* (cie17@interaction-env-rib ci2578@x))) (assertion-violation 'environment-symbols '"not an environment" ci2578@x))))) (set! ci289c@cie2d@environment-symbols cie2d@environment-symbols) (set! cie2f@environment (lambda ci257a@imp* (let ((ci257c@itc (ciddd@make-collector))) (let ((ci2582@ci257f cide3@imp-collector) (ci2583@ci2581 ci257c@itc)) (let ((ci2586@swap (lambda () (let ((ci2588@t (ci2582@ci257f))) (begin (ci2582@ci257f ci2583@ci2581) (set! ci2583@ci2581 ci2588@t)))))) (dynamic-wind ci2586@swap (lambda () (call-with-values (lambda () (cidd9@parse-import-spec* ci257a@imp*)) (lambda (ci258e@ci258b ci258f@ci258d) (let ((ci2592@subst-labels ci258f@ci258d) (ci2593@subst-names ci258e@ci258b)) (make-simple-struct 'env '4 (list ci2593@subst-names ci2592@subst-labels ci257c@itc)))))) ci2586@swap)))))) (set! ci289d@cie2f@environment cie2f@environment) (set! cie31@null-environment (lambda (ci2596@n) (begin (if (not (eqv? ci2596@n '5)) (assertion-violation 'null-environment '"not 5" ci2596@n) (void)) (cie2f@environment '(psyntax null-environment-5))))) (set! ci289e@cie31@null-environment cie31@null-environment) (set! cie33@scheme-report-environment (lambda (ci2598@n) (begin (if (not (eqv? ci2598@n '5)) (assertion-violation 'scheme-report-environment '"not 5" ci2598@n) (void)) (cie2f@environment '(psyntax scheme-report-environment-5))))) (set! ci289f@cie33@scheme-report-environment cie33@scheme-report-environment) (set! cie35@expand (lambda (ci259a@x ci259b@env) (if (cidfb@env? ci259b@env) (let ((ci259e@rib (ciddb@make-top-rib (cidfd@env-names ci259b@env) (cie01@env-labels ci259b@env)))) (let ((ci25a0@x (make-simple-struct 'stx '5 (list ci259a@x ciaf4@top-mark* (list ci259e@rib) '()))) (ci25a1@itc (cie05@env-itc ci259b@env)) (ci25a2@rtc (ciddd@make-collector)) (ci25a3@vtc (ciddd@make-collector))) (let ((ci25a8@x (let ((ci25ba@ci25ab cie67@top-level-context) (ci25bb@ci25ad ciddf@inv-collector) (ci25bc@ci25af cide1@vis-collector) (ci25bd@ci25b1 cide3@imp-collector) (ci25be@ci25b3 '#f) (ci25bf@ci25b5 ci25a2@rtc) (ci25c0@ci25b7 ci25a3@vtc) (ci25c1@ci25b9 ci25a1@itc)) (let ((ci25ca@swap (lambda () (begin (let ((ci25cc@t (ci25ba@ci25ab))) (begin (ci25ba@ci25ab ci25be@ci25b3) (set! ci25be@ci25b3 ci25cc@t))) (let ((ci25ce@t (ci25bb@ci25ad))) (begin (ci25bb@ci25ad ci25bf@ci25b5) (set! ci25bf@ci25b5 ci25ce@t))) (let ((ci25d0@t (ci25bc@ci25af))) (begin (ci25bc@ci25af ci25c0@ci25b7) (set! ci25c0@ci25b7 ci25d0@t))) (let ((ci25d2@t (ci25bd@ci25b1))) (begin (ci25bd@ci25b1 ci25c1@ci25b9) (set! ci25c1@ci25b9 ci25d2@t))))))) (dynamic-wind ci25ca@swap (lambda () (cid99@chi-expr ci25a0@x '() '())) ci25ca@swap))))) (begin (cib2c@seal-rib! ci259e@rib) (values ci25a8@x (ci25a2@rtc)))))) (if (cie15@interaction-env? ci259b@env) (let ((ci25d4@rib (cie17@interaction-env-rib ci259b@env)) (ci25d5@r (cie1b@interaction-env-r ci259b@env)) (ci25d6@rtc (ciddd@make-collector))) (let ((ci25da@x (make-simple-struct 'stx '5 (list ci259a@x ciaf4@top-mark* (list ci25d4@rib) '())))) (call-with-values (lambda () (let ((ci25f0@ci25e1 cie67@top-level-context) (ci25f1@ci25e3 ciddf@inv-collector) (ci25f2@ci25e5 cide1@vis-collector) (ci25f3@ci25e7 cide3@imp-collector) (ci25f4@ci25e9 ci259b@env) (ci25f5@ci25eb ci25d6@rtc) (ci25f6@ci25ed (ciddd@make-collector)) (ci25f7@ci25ef (ciddd@make-collector))) (let ((ci2600@swap (lambda () (begin (let ((ci2602@t (ci25f0@ci25e1))) (begin (ci25f0@ci25e1 ci25f4@ci25e9) (set! ci25f4@ci25e9 ci2602@t))) (let ((ci2604@t (ci25f1@ci25e3))) (begin (ci25f1@ci25e3 ci25f5@ci25eb) (set! ci25f5@ci25eb ci2604@t))) (let ((ci2606@t (ci25f2@ci25e5))) (begin (ci25f2@ci25e5 ci25f6@ci25ed) (set! ci25f6@ci25ed ci2606@t))) (let ((ci2608@t (ci25f3@ci25e7))) (begin (ci25f3@ci25e7 ci25f7@ci25ef) (set! ci25f7@ci25ef ci2608@t))))))) (dynamic-wind ci2600@swap (lambda () (cide7@chi-interaction-expr ci25da@x ci25d4@rib ci25d5@r)) ci2600@swap)))) (lambda (ci260a@ci25dd ci260b@ci25df) (let ((ci260e@r^ ci260b@ci25df) (ci260f@e ci260a@ci25dd)) (begin (cie1d@set-interaction-env-r! ci259b@env ci260e@r^) (values ci260f@e (ci25d6@rtc)))))))) (assertion-violation 'expand '"not an environment" ci259b@env))))) (set! ci28a0@cie35@expand cie35@expand) (set! cie37@eval (lambda (ci2612@x ci2613@env) (begin (if (not (cie2b@environment? ci2613@env)) (error 'eval '"not an environment" ci2613@env) (void)) (call-with-values (lambda () (cie35@expand ci2612@x ci2613@env)) (lambda (ci261a@ci2617 ci261b@ci2619) (let ((ci261e@invoke-req* ci261b@ci2619) (ci261f@x ci261a@ci2617)) (begin (for-each ci98c@ci7da@invoke-library ci261e@invoke-req*) (eval-core (ci716@ci6ce@expanded->core ci261f@x))))))))) (set! ci28a1@cie37@eval cie37@eval) (set! cie39@library-expander (lambda ci2690 (let ((ci2691 (length ci2690))) (if (= ci2691 '3) (apply (lambda (ci2622@x ci2623@filename ci2624@verify-name) (letrec* ((ci2629@build-visit-code (lambda (ci267e@macro*) (if (null? ci267e@macro*) (ciad6@cia37@build-void) (ciad5@cia35@build-sequence '#f (map (lambda (ci2680@x) (let ((ci2682@loc (car ci2680@x)) (ci2683@src (cddr ci2680@x))) (list 'set! ci2682@loc ci2683@src))) ci267e@macro*))))) (ci262b@visit! (lambda (ci2676@macro*) (for-each (lambda (ci2678@x) (let ((ci267a@loc (car ci2678@x)) (ci267b@proc (cadr ci2678@x))) (set-symbol-value! ci267a@loc ci267b@proc))) ci2676@macro*)))) (call-with-values (lambda () (cideb@core-library-expander ci2622@x ci2624@verify-name)) (lambda (ci263e@ci262d ci263f@ci262f ci2640@ci2631 ci2641@ci2633 ci2642@ci2635 ci2643@ci2637 ci2644@ci2639 ci2645@ci263b ci2646@ci263d) (let ((ci2650@export-env ci2646@ci263d) (ci2651@export-subst ci2645@ci263b) (ci2652@macro* ci2644@ci2639) (ci2653@invoke-code ci2643@ci2637) (ci2654@vis* ci2642@ci2635) (ci2655@inv* ci2641@ci2633) (ci2656@imp* ci2640@ci2631) (ci2657@ver ci263f@ci262f) (ci2658@name ci263e@ci262d)) (let ((ci2662@id (gensym)) (ci2663@name ci2658@name) (ci2664@ver ci2657@ver) (ci2665@imp* (map ci990@ci7e2@library-spec ci2656@imp*)) (ci2666@vis* (map ci990@ci7e2@library-spec ci2654@vis*)) (ci2667@inv* (map ci990@ci7e2@library-spec ci2655@inv*)) (ci2668@visit-proc (lambda () (ci262b@visit! ci2652@macro*))) (ci2669@invoke-proc (lambda () (eval-core (ci716@ci6ce@expanded->core ci2653@invoke-code)))) (ci266a@visit-code (ci2629@build-visit-code ci2652@macro*)) (ci266b@invoke-code ci2653@invoke-code)) (begin (ci98a@ci7d6@install-library ci2662@id ci2663@name ci2664@ver ci2665@imp* ci2666@vis* ci2667@inv* ci2651@export-subst ci2650@export-env ci2668@visit-proc ci2669@invoke-proc ci266a@visit-code ci266b@invoke-code '#t ci2623@filename) (values ci2662@id ci2663@name ci2664@ver ci2665@imp* ci2666@vis* ci2667@inv* ci266b@invoke-code ci266a@visit-code ci2651@export-subst ci2650@export-env)))))))) ci2690) (if (= ci2691 '2) (apply (lambda (ci2686@x ci2687@filename) (cie39@library-expander ci2686@x ci2687@filename (lambda (ci268a@x) (values)))) ci2690) (if (= ci2691 '1) (apply (lambda (ci268c@x) (cie39@library-expander ci268c@x '#f (lambda (ci268e@x) (values)))) ci2690) (error #1# '"invalid arg count"))))))) (set! ci28a2@cie39@library-expander cie39@library-expander) (set! cie3b@boot-library-expand (lambda (ci2692@x) (call-with-values (lambda () (cie39@library-expander ci2692@x)) (lambda (ci26a8@ci2695 ci26a9@ci2697 ci26aa@ci2699 ci26ab@ci269b ci26ac@ci269d ci26ad@ci269f ci26ae@ci26a1 ci26af@ci26a3 ci26b0@ci26a5 ci26b1@ci26a7) (let ((ci26bc@export-env ci26b1@ci26a7) (ci26bd@export-subst ci26b0@ci26a5) (ci26be@visit-code ci26af@ci26a3) (ci26bf@invoke-code ci26ae@ci26a1) (ci26c0@inv* ci26ad@ci269f) (ci26c1@vis* ci26ac@ci269d) (ci26c2@imp* ci26ab@ci269b) (ci26c3@ver ci26aa@ci2699) (ci26c4@name ci26a9@ci2697) (ci26c5@id ci26a8@ci2695)) (values ci26c4@name ci26bf@invoke-code ci26bd@export-subst ci26bc@export-env)))))) (set! ci28a3@cie3b@boot-library-expand cie3b@boot-library-expand) (set! cie3d@rev-map-append (lambda (ci26d0@f ci26d1@ls ci26d2@ac) (if (null? ci26d1@ls) ci26d2@ac (cie3d@rev-map-append ci26d0@f (cdr ci26d1@ls) (cons (ci26d0@f (car ci26d1@ls)) ci26d2@ac))))) (set! ci28a4@cie3d@rev-map-append cie3d@rev-map-append) (set! cie3f@build-exports (lambda (ci26d6@lex*+loc* ci26d7@init*) (ciad5@cia35@build-sequence '#f (cons (ciad6@cia37@build-void) (cie3d@rev-map-append (lambda (ci26da@x) (list 'set! (cdr ci26da@x) (car ci26da@x))) ci26d6@lex*+loc* ci26d7@init*))))) (set! ci28a5@cie3f@build-exports cie3f@build-exports) (set! cie41@make-export-subst (lambda (ci26dc@name* ci26dd@id*) (map (lambda (ci26e0@name ci26e1@id) (let ((ci26e4@label (cib86@id->label ci26e1@id))) (begin (if (not ci26e4@label) (cie57@syntax-violation '#f '"cannot export unbound identifier" ci26e1@id) (void)) (cons ci26e0@name ci26e4@label)))) ci26dc@name* ci26dd@id*))) (set! ci28a6@cie41@make-export-subst cie41@make-export-subst) (set! cie43@make-export-env/macros (lambda (ci26e6@lex* ci26e7@loc* ci26e8@r) (letrec* ((ci26ed@lookup (lambda (ci270a@x) (let ci2712@f ((ci270c@x ci270a@x) (ci270d@lex* ci26e6@lex*) (ci270e@loc* ci26e7@loc*)) (if (pair? ci270d@lex*) (if (eq? ci270c@x (car ci270d@lex*)) (car ci270e@loc*) (ci2712@f ci270c@x (cdr ci270d@lex*) (cdr ci270e@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let ci26f6@f ((ci26ee@r ci26e8@r) (ci26ef@env '()) (ci26f0@global* '()) (ci26f1@macro* '())) (if (null? ci26ee@r) (values ci26ef@env ci26f0@global* ci26f1@macro*) (let ((ci26f8@x (car ci26ee@r))) (let ((ci26fa@label (car ci26f8@x)) (ci26fb@b (cdr ci26f8@x))) (let ((ci26fe@t (cib8c@binding-type ci26fb@b))) (if (memv ci26fe@t '(lexical)) (let ((ci2700@v (cib8e@binding-value ci26fb@b))) (let ((ci2702@loc (ci26ed@lookup (cid01@lexical-var ci2700@v))) (ci2703@type (if (cid03@lexical-mutable? ci2700@v) 'mutable 'global))) (ci26f6@f (cdr ci26ee@r) (cons (cons* ci26fa@label ci2703@type ci2702@loc) ci26ef@env) (cons (cons (cid01@lexical-var ci2700@v) ci2702@loc) ci26f0@global*) ci26f1@macro*))) (if (memv ci26fe@t '(local-macro)) (let ((ci2706@loc (gensym))) (ci26f6@f (cdr ci26ee@r) (cons (cons* ci26fa@label 'global-macro ci2706@loc) ci26ef@env) ci26f0@global* (cons (cons ci2706@loc (cib8e@binding-value ci26fb@b)) ci26f1@macro*))) (if (memv ci26fe@t '(local-macro!)) (let ((ci2708@loc (gensym))) (ci26f6@f (cdr ci26ee@r) (cons (cons* ci26fa@label 'global-macro! ci2708@loc) ci26ef@env) ci26f0@global* (cons (cons ci2708@loc (cib8e@binding-value ci26fb@b)) ci26f1@macro*))) (if (memv ci26fe@t '($rtd $module)) (ci26f6@f (cdr ci26ee@r) (cons ci26f8@x ci26ef@env) ci26f0@global* ci26f1@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (cib8c@binding-type ci26fb@b) (cib8e@binding-value ci26fb@b)))))))))))))) (set! ci28a7@cie43@make-export-env/macros cie43@make-export-env/macros) (set! cie45@generate-temporaries (lambda (ci2714@ls) (let ((ci2716@t ci2714@ls)) (let ((ci2718@ls/false (cid77@syntax-dispatch ci2716@t 'each-any))) (if ci2718@ls/false (apply (lambda (ci271a@ls) (map (lambda (ci271c@x) (make-simple-struct 'stx '5 (list (let ((ci271e@x (cie5d@syntax->datum ci271c@x))) (if (or (symbol? ci271e@x) (string? ci271e@x)) (gensym ci271e@x) (gensym 't))) ciaf4@top-mark* '() '()))) ci271a@ls)) ci2718@ls/false) (let ((ci2720@t ci2716@t)) (let ((ci2722@ls/false (cid77@syntax-dispatch ci2720@t '_))) (if ci2722@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) ci2722@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci2720@t))))))))) (set! ci28a8@cie45@generate-temporaries cie45@generate-temporaries) (set! cie47@free-identifier=? (lambda (ci2724@x ci2725@y) (if (cib70@id? ci2724@x) (if (cib70@id? ci2725@y) (cib76@free-id=? ci2724@x ci2725@y) (assertion-violation 'free-identifier=? '"not an identifier" ci2725@y)) (assertion-violation 'free-identifier=? '"not an identifier" ci2724@x)))) (set! ci28a9@cie47@free-identifier=? cie47@free-identifier=?) (set! cie49@bound-identifier=? (lambda (ci2728@x ci2729@y) (if (cib70@id? ci2728@x) (if (cib70@id? ci2729@y) (cib74@bound-id=? ci2728@x ci2729@y) (assertion-violation 'bound-identifier=? '"not an identifier" ci2729@y)) (assertion-violation 'bound-identifier=? '"not an identifier" ci2728@x)))) (set! ci28aa@cie49@bound-identifier=? cie49@bound-identifier=?) (set! cie4b@make-source-condition (lambda (ci272c@x) (letrec* ((ci2736@ci2731 (make-record-type-descriptor '&source-information &condition-rtd 'ci2734 '#f '#f '#((immutable file-name) (immutable line)))) (ci2738@ci2733 '#f) (ci273a@ci2732 (make-record-constructor-descriptor ci2736@ci2731 &condition-rcd ci2738@ci2733)) (ci273d@ci2730 (record-predicate ci2736@ci2731)) (ci273f@make-source-condition (record-constructor ci273a@ci2732)) (ci2741@ci272e (record-accessor ci2736@ci2731 '0)) (ci2743@ci272f (record-accessor ci2736@ci2731 '1)) (ci2745@source-condition? (condition-predicate ci2736@ci2731)) (ci2747@source-filename (condition-accessor ci2736@ci2731 ci2741@ci272e)) (ci2749@source-character (condition-accessor ci2736@ci2731 ci2743@ci272f))) (if (and (pair? ci272c@x) (pair? (cdr ci272c@x))) (ci273f@make-source-condition (car ci272c@x) (cadr ci272c@x)) (condition))))) (set! ci28ab@cie4b@make-source-condition cie4b@make-source-condition) (set! cie4d@extract-position-condition (lambda (ci274a@x) (cie4b@make-source-condition (cie4f@expression-position ci274a@x)))) (set! ci28ac@cie4d@extract-position-condition cie4d@extract-position-condition) (set! cie4f@expression-position (lambda (ci274c@x) (and (cib3c@stx? ci274c@x) (let ((ci274e@x (cib3e@stx-expr ci274c@x))) (and (ci6b4@ci586@annotation? ci274e@x) (ci6b5@ci588@annotation-source ci274e@x)))))) (set! ci28ad@cie4f@expression-position cie4f@expression-position) (set! cie51@assertion-error (lambda (ci2750@expr ci2751@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list ci2750@expr)) (cie4b@make-source-condition ci2751@pos))))) (set! ci28ae@cie51@assertion-error cie51@assertion-error) (set! cie53@syntax-error (lambda (ci2754@x . ci2756@args) (begin (if (not (for-all string? ci2756@args)) (assertion-violation 'syntax-error '"invalid argument" ci2756@args) (void)) (raise (condition (make-message-condition (if (null? ci2756@args) '"invalid syntax" (apply string-append ci2756@args))) (make-syntax-violation (cie5d@syntax->datum ci2754@x) '#f) (cie4d@extract-position-condition ci2754@x)))))) (set! ci28af@cie53@syntax-error cie53@syntax-error) (set! cie55@syntax-violation* (lambda (ci2758@who ci2759@msg ci275a@form ci275b@condition-object) (begin (if (not (string? ci2759@msg)) (assertion-violation 'syntax-violation '"message is not a string" ci2759@msg) (void)) (let ((ci2760@who (if (or (string? ci2758@who) (symbol? ci2758@who)) ci2758@who (if (not ci2758@who) (let ((ci2762@t ci275a@form)) (let ((ci2764@ls/false (cid77@syntax-dispatch ci2762@t 'any))) (if (and ci2764@ls/false (apply (lambda (ci2766@id) (cib70@id? ci2766@id)) ci2764@ls/false)) (apply (lambda (ci2768@id) (cie5d@syntax->datum ci2768@id)) ci2764@ls/false) (let ((ci276a@t ci2762@t)) (let ((ci276c@ls/false (cid77@syntax-dispatch ci276a@t '(any . any)))) (if (and ci276c@ls/false (apply (lambda (ci276e@id ci276f@rest) (cib70@id? ci276e@id)) ci276c@ls/false)) (apply (lambda (ci2772@id ci2773@rest) (cie5d@syntax->datum ci2772@id)) ci276c@ls/false) (let ((ci2776@t ci276a@t)) (let ((ci2778@ls/false (cid77@syntax-dispatch ci2776@t '_))) (if ci2778@ls/false (apply (lambda () '#f) ci2778@ls/false) (cie57@syntax-violation '#f '"invalid syntax" ci2776@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" ci2758@who))))) (raise (condition (if ci2760@who (make-who-condition ci2760@who) (condition)) (make-message-condition ci2759@msg) ci275b@condition-object (cie4d@extract-position-condition ci275a@form))))))) (set! ci28b0@cie55@syntax-violation* cie55@syntax-violation*) (set! cie57@syntax-violation (lambda ci2788 (let ((ci2789 (length ci2788))) (if (= ci2789 '3) (apply (lambda (ci277a@who ci277b@msg ci277c@form) (cie57@syntax-violation ci277a@who ci277b@msg ci277c@form '#f)) ci2788) (if (= ci2789 '4) (apply (lambda (ci2780@who ci2781@msg ci2782@form ci2783@subform) (cie55@syntax-violation* ci2780@who ci2781@msg ci2782@form (make-syntax-violation (cie5d@syntax->datum ci2782@form) (cie5d@syntax->datum ci2783@subform)))) ci2788) (error #1# '"invalid arg count")))))) (set! ci28b1@cie57@syntax-violation cie57@syntax-violation) (set! cie59@identifier? (lambda (ci278a@x) (cib70@id? ci278a@x))) (set! ci28b2@cie59@identifier? cie59@identifier?) (set! cie5b@datum->syntax (lambda (ci278c@id ci278d@datum) (if (cib70@id? ci278c@id) (cib50@datum->stx ci278c@id ci278d@datum) (assertion-violation 'datum->syntax '"not an identifier" ci278c@id)))) (set! ci28b3@cie5b@datum->syntax cie5b@datum->syntax) (set! cie5d@syntax->datum (lambda (ci2790@x) (cib84@stx->datum ci2790@x))) (set! ci28b4@cie5d@syntax->datum cie5d@syntax->datum) (set! cie5f@ungensym-all (lambda (ci2792@code) (if (pair? ci2792@code) (cons (cie5f@ungensym-all (car ci2792@code)) (cie5f@ungensym-all (cdr ci2792@code))) (if (symbol? ci2792@code) (ungensym ci2792@code) ci2792@code)))) (set! ci28b5@cie5f@ungensym-all cie5f@ungensym-all) (set! cie61@compile-r6rs-top-level (lambda (ci2794@x*) (call-with-values (lambda () (cidef@top-level-expander ci2794@x*)) (lambda (ci279a@ci2797 ci279b@ci2799) (let ((ci279e@invoke-code ci279b@ci2799) (ci279f@lib* ci279a@ci2797)) (lambda () (begin (for-each ci98c@ci7da@invoke-library ci279f@lib*) (let ((ci27a2@expanded (ci716@ci6ce@expanded->core ci279e@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (cie5f@ungensym-all ci27a2@expanded)) (void)) (eval-core ci27a2@expanded)))))))))) (set! ci28b6@cie61@compile-r6rs-top-level cie61@compile-r6rs-top-level) (set! cie63@pre-compile-r6rs-top-level (lambda (ci27a4@x*) (call-with-values (lambda () (cidef@top-level-expander ci27a4@x*)) (lambda (ci27aa@ci27a7 ci27ab@ci27a9) (let ((ci27ae@invoke-code ci27ab@ci27a9) (ci27af@lib* ci27aa@ci27a7)) (begin (for-each ci98c@ci7da@invoke-library ci27af@lib*) (ci6be@ci59a@compile-core (ci716@ci6ce@expanded->core ci27ae@invoke-code)))))))) (set! ci28b7@cie63@pre-compile-r6rs-top-level cie63@pre-compile-r6rs-top-level) (set! cie65@interaction-environment (let ((ci27b2@the-env '#f)) (lambda () (or ci27b2@the-env (let ((ci27b4@lib (ci985@ci7cc@find-library-by-name '(mosh interaction))) (ci27b5@rib (cib24@make-empty-rib))) (begin (let ((ci27b8@subst (ci967@ci790@library-subst ci27b4@lib))) (begin (cib10@set-rib-sym*! ci27b5@rib (map car ci27b8@subst)) (cib14@set-rib-mark**! ci27b5@rib (map (lambda (ci27ba@x) ciaf4@top-mark*) ci27b8@subst)) (cib18@set-rib-label*! ci27b5@rib (map cdr ci27b8@subst)))) (let ((ci27bc@env (make-simple-struct 'interaction-env '4 (list ci27b5@rib '() '())))) (begin (set! ci27b2@the-env ci27bc@env) ci27bc@env)))))))) (set! ci28b8@cie65@interaction-environment cie65@interaction-environment) (set! cie67@top-level-context (ci6c0@ci59e@make-parameter '#f)) (set! ci28b9@cie67@top-level-context cie67@top-level-context) (ci982@ci7c6@current-library-expander cie39@library-expander))
(begin (begin (ci713@ci6c8@current-primitive-locations (lambda (ci2e03@x) (let ((ci2e05@t (assq ci2e03@x '((syntax-error . ci28af@cie53@syntax-error) (syntax-dispatch . ci284d@cid77@syntax-dispatch) (load . ci2a35@ci28e0@load) (interaction-environment . ci28b8@cie65@interaction-environment) (library-path . ci97a@ci7b6@library-path) (mosh-cache-dir . ci6c1@ci5a0@mosh-cache-dir) (make-parameter . ci6c0@ci59e@make-parameter) (make-variable-transformer . ci280a@ciba2@make-variable-transformer) (identifier? . ci28b2@cie59@identifier?) (generate-temporaries . ci28a8@cie45@generate-temporaries) (free-identifier=? . ci28a9@cie47@free-identifier=?) (syntax->datum . ci28b4@cie5d@syntax->datum) (datum->syntax . ci28b3@cie5b@datum->syntax) (bound-identifier=? . ci28aa@cie49@bound-identifier=?) (scheme-report-environment . ci289f@cie33@scheme-report-environment) (null-environment . ci289e@cie31@null-environment) (command-line . ci2a32@ci28da@command-line) (eval . ci28a1@cie37@eval) (environment . ci289d@cie2f@environment) (syntax-violation . ci28b1@cie57@syntax-violation) (assertion-error . ci28ae@cie51@assertion-error))))) (if ci2e05@t (cdr ci2e05@t) '#f)))) (ci98a@ci7d6@install-library 'ci2de0 '(mosh interaction) '() '() '() '() '(#1=(regexp? . ci2da0) #2=(alist->eq-hash-table . ci2d9c) #3=(format . ci2d99) #4=(string-split . ci2d8e) #5=(call-process . ci2d88) #6=(set-current-directory! . ci2d84) #7=(expand-path . ci2d83) #8=(current-directory . ci2d82) #9=(%spawn . ci2d81) #10=(%waitpid . ci2d80) #11=(simple-struct-name . ci2d7f) #12=(simple-struct-set! . ci2d7e) #13=(simple-struct-ref . ci2d7d) #14=(make-simple-struct . ci2d7c) #15=(simple-struct? . ci2d7b) #16=(pointer-ref-c-int64 . ci2d7a) #17=(pointer-ref-c-int32 . ci2d79) #18=(pointer-ref-c-int16 . ci2d78) #19=(pointer-ref-c-int8 . ci2d77) #20=(pointer-ref-c-uint64 . ci2d76) #21=(pointer-ref-c-uint32 . ci2d75) #22=(pointer-ref-c-uint16 . ci2d74) #23=(pointer-ref-c-uint8 . ci2d73) #24=(pointer-set-c-uint64! . ci2d72) #25=(pointer-set-c-uint32! . ci2d71) #26=(pointer-set-c-uint16! . ci2d70) #27=(pointer-set-c-uint8! . ci2d6f) #28=(pointer-set-c-int64! . ci2d6e) #29=(pointer-set-c-int32! . ci2d6d) #30=(pointer-set-c-int16! . ci2d6c) #31=(pointer-set-c-int8! . ci2d6b) #32=(pointer-set-c-pointer! . ci2d6a) #33=(pointer-set-c-double! . ci2d69) #34=(pointer-set-c-float! . ci2d68) #35=(pointer-set-c-long-long! . ci2d67) #36=(pointer-set-c-long! . ci2d66) #37=(pointer-set-c-int! . ci2d65) #38=(pointer-set-c-short! . ci2d64) #39=(pointer-set-c-char! . ci2d63) #40=(pointer-ref-c-pointer . ci2d62) #41=(pointer-ref-c-double . ci2d61) #42=(pointer-ref-c-float . ci2d60) #43=(pointer-ref-c-unsigned-long-long . ci2d5f) #44=(pointer-ref-c-signed-long-long . ci2d5e) #45=(pointer-ref-c-unsigned-long . ci2d5d) #46=(pointer-ref-c-signed-long . ci2d5c) #47=(pointer-ref-c-unsigned-int . ci2d5b) #48=(pointer-ref-c-signed-int . ci2d5a) #49=(pointer-ref-c-unsigned-short . ci2d59) #50=(pointer-ref-c-signed-short . ci2d58) #51=(pointer-ref-c-unsigned-char . ci2d57) #52=(pointer-ref-c-signed-char . ci2d56) #53=(pointer->integer . ci2d55) #54=(integer->pointer . ci2d54) #55=(pointer? . ci2d53) #56=(shared-errno . ci2d52) #57=(%ffi-supported? . ci2d4d) #58=(%ffi-pointer->string . ci2d4c) #59=(%ffi-call . ci2d4b) #60=(%ffi-lookup . ci2d4a) #61=(%ffi-open . ci2d49) #62=(null-terminated-utf8->string . ci2d48) #63=(null-terminated-bytevector->string . ci2d47) #64=(%exec . ci2d46) #65=(%fork . ci2d45) #66=(%pipe . ci2d44) #67=(p . ci2d43) #68=(whereis . ci2d27) #69=(register . ci2d26) #70=(vm-join! . ci2d25) #71=(vm-set-value! . ci2d24) #72=(vm? . ci2d23) #73=(main-vm? . ci2d22) #74=(vm-eval . ci2d21) #75=(vm-self . ci2d20) #76=(vm-start! . ci2d1f) #77=(make-vm . ci2d1e) #78=(mutex-try-lock! . ci2d1d) #79=(mutex-unlock! . ci2d1c) #80=(mutex-lock! . ci2d1b) #81=(mutex? . ci2d1a) #82=(make-mutex . ci2d19) #83=(condition-variable-notify-all! . ci2d18) #84=(condition-variable-notify! . ci2d17) #85=(condition-variable-wait! . ci2d16) #86=(make-condition-variable . ci2d15) #87=(string-upcase . ci2cfd) #88=(string-titlecase . ci2cfc) #89=(string-normalize-nfkd . ci2cfb) #90=(string-normalize-nfkc . ci2cfa) #91=(string-normalize-nfd . ci2cf9) #92=(string-normalize-nfc . ci2cf8) #93=(string-foldcase . ci2cf7) #94=(string-downcase . ci2cf6) #95=(string-ci>? . ci2cf5) #96=(string-ci>=? . ci2cf4) #97=(string-ci=? . ci2cf3) #98=(string-ci<? . ci2cf2) #99=(string-ci<=? . ci2cf1) #100=(char-whitespace? . ci2cf0) #101=(char-upper-case? . ci2cef) #102=(char-title-case? . ci2cee) #103=(char-numeric? . ci2ced) #104=(char-lower-case? . ci2cec) #105=(char-general-category . ci2ceb) #106=(char-upcase . ci2cea) #107=(char-titlecase . ci2ce9) #108=(char-foldcase . ci2ce8) #109=(char-downcase . ci2ce7) #110=(char-ci>? . ci2ce6) #111=(char-ci>=? . ci2ce5) #112=(char-ci=? . ci2ce4) #113=(char-ci<? . ci2ce3) #114=(char-ci<=? . ci2ce2) #115=(char-alphabetic? . ci2ce1) #116=(make-variable-transformer . ciba1) #117=(identifier? . cie58) #118=(generate-temporaries . cie44) #119=(free-identifier=? . cie46) #120=(syntax->datum . cie5c) #121=(datum->syntax . cie5a) #122=(bound-identifier=? . cie48) #123=(record-type-descriptor? . ci2ce0) #124=(record-predicate . ci2cdf) #125=(record-mutator . ci2cde) #126=(record-constructor . ci2cdd) #127=(record-accessor . ci2cdc) #128=(make-record-type-descriptor . ci2cdb) #129=(make-record-constructor-descriptor . ci2cda) #130=(record? . ci2cd9) #131=(record-type-uid . ci2cd8) #132=(record-type-sealed? . ci2cd7) #133=(record-type-parent . ci2cd6) #134=(record-type-opaque? . ci2cd5) #135=(record-type-name . ci2cd4) #136=(record-type-generative? . ci2cd3) #137=(record-type-field-names . ci2cd2) #138=(record-rtd . ci2cd1) #139=(record-field-mutable? . ci2cd0) #140=(delete-file . ci2ccf) #141=(file-exists? . ci2cce) #142=(vector-sort! . ci2ccd) #143=(vector-sort . ci2ccc) #144=(list-sort . ci2ccb) #145=(symbol-hash . ci2cca) #146=(string-ci-hash . ci2cc9) #147=(string-hash . ci2cc8) #148=(equal-hash . ci2cc7) #149=(hashtable-equivalence-function . ci2cc6) #150=(make-hashtable . ci2cc5) #151=(hashtable-hash-function . ci2cc4) #152=(make-eqv-hashtable . ci2cc3) #153=(make-eq-hashtable . ci2cc2) #154=(hashtable? . ci2cc1) #155=(hashtable-update! . ci2cc0) #156=(hashtable-size . ci2cbf) #157=(hashtable-set! . ci2cbe) #158=(hashtable-ref . ci2cbd) #159=(hashtable-mutable? . ci2cbc) #160=(hashtable-keys . ci2cbb) #161=(hashtable-entries . ci2cba) #162=(hashtable-delete! . ci2cb9) #163=(hashtable-copy . ci2cb8) #164=(hashtable-contains? . ci2cb7) #165=(hashtable-clear! . ci2cb6) #166=(call-with-output-file . ci2cb5) #167=(call-with-input-file . ci2cb4) #168=(write-char . ci2cb3) #169=(write . ci2cb2) #170=(with-output-to-file . ci2cb1) #171=(with-input-from-file . ci2cb0) #172=(read-char . ci2caf) #173=(read . ci2cae) #174=(peek-char . ci2cad) #175=(open-output-file . ci2cac) #176=(open-input-file . ci2cab) #177=(newline . ci2caa) #178=(display . ci2ca9) #179=(close-output-port . ci2ca8) #180=(close-input-port . ci2ca7) #181=(eof-object? . ci2ca6) #182=(eof-object . ci2ca5) #183=(current-error-port . ci2ca4) #184=(current-output-port . ci2ca3) #185=(current-input-port . ci2ca2) #186=(output-port? . ci2ca1) #187=(input-port? . ci2ca0) #188=(utf-8-codec . ci2c9f) #189=(utf-16-codec . ci2c9e) #190=(transcoder-error-handling-mode . ci2c9d) #191=(transcoder-eol-style . ci2c9c) #192=(transcoder-codec . ci2c9b) #193=(transcoded-port . ci2c9a) #194=(textual-port? . ci2c99) #195=(string->bytevector . ci2c98) #196=(standard-output-port . ci2c97) #197=(standard-input-port . ci2c96) #198=(standard-error-port . ci2c95) #199=(set-port-position! . ci2c94) #200=(put-u8 . ci2c93) #201=(put-string . ci2c92) #202=(put-datum . ci2c91) #203=(put-char . ci2c90) #204=(put-bytevector . ci2c8f) #205=(port? . ci2c8e) #206=(port-transcoder . ci2c8d) #207=(port-position . ci2c8c) #208=(port-has-set-port-position!? . ci2c8b) #209=(port-has-port-position? . ci2c8a) #210=(port-eof? . ci2c89) #211=(output-port-buffer-mode . ci2c88) #212=(open-string-output-port . ci2c87) #213=(open-string-input-port . ci2c86) #214=(open-file-output-port . ci2c85) #215=(open-file-input/output-port . ci2c84) #216=(open-file-input-port . ci2c83) #217=(open-bytevector-output-port . ci2c82) #218=(open-bytevector-input-port . ci2c81) #219=(native-transcoder . ci2c80) #220=(native-eol-style . ci2c7f) #221=(make-transcoder . ci2c7e) #222=(latin-1-codec . ci2c7d) #223=(make-i/o-write-error . ci2c7c) #224=(make-i/o-read-error . ci2c7b) #225=(make-i/o-port-error . ci2c7a) #226=(make-i/o-invalid-position-error . ci2c79) #227=(make-i/o-filename-error . ci2c78) #228=(make-i/o-file-protection-error . ci2c77) #229=(make-i/o-file-is-read-only-error . ci2c76) #230=(make-i/o-file-does-not-exist-error . ci2c75) #231=(make-i/o-file-already-exists-error . ci2c74) #232=(make-i/o-error . ci2c73) #233=(make-i/o-encoding-error . ci2c72) #234=(make-i/o-decoding-error . ci2c71) #235=(make-custom-textual-output-port . ci2c70) #236=(make-custom-textual-input/output-port . ci2c6f) #237=(make-custom-textual-input-port . ci2c6e) #238=(make-custom-binary-output-port . ci2c6d) #239=(make-custom-binary-input/output-port . ci2c6c) #240=(make-custom-binary-input-port . ci2c6b) #241=(make-bytevector . ci2c6a) #242=(lookahead-u8 . ci2c69) #243=(lookahead-char . ci2c68) #244=(i/o-write-error? . ci2c67) #245=(i/o-read-error? . ci2c66) #246=(i/o-port-error? . ci2c65) #247=(i/o-invalid-position-error? . ci2c64) #248=(i/o-filename-error? . ci2c63) #249=(i/o-file-protection-error? . ci2c62) #250=(i/o-file-is-read-only-error? . ci2c61) #251=(i/o-file-does-not-exist-error? . ci2c60) #252=(i/o-file-already-exists-error? . ci2c5f) #253=(i/o-error? . ci2c5e) #254=(i/o-error-position . ci2c5d) #255=(i/o-error-port . ci2c5c) #256=(i/o-error-filename . ci2c5b) #257=(i/o-encoding-error? . ci2c5a) #258=(i/o-encoding-error-char . ci2c59) #259=(i/o-decoding-error? . ci2c58) #260=(get-u8 . ci2c57) #261=(get-string-n! . ci2c56) #262=(get-string-n . ci2c55) #263=(get-string-all . ci2c54) #264=(get-line . ci2c53) #265=(get-datum . ci2c52) #266=(get-char . ci2c51) #267=(get-bytevector-some . ci2c50) #268=(get-bytevector-n! . ci2c4f) #269=(get-bytevector-n . ci2c4e) #270=(get-bytevector-all . ci2c4d) #271=(flush-output-port . ci2c4c) #272=(close-port . ci2c4b) #273=(exit . ci2c43) #274=(command-line . ci28d9) #275=(string-fill! . ci2c42) #276=(string-set! . ci2c41) #277=(set-cdr! . ci2c40) #278=(set-car! . ci2c3f) #279=(remove . ci2c3e) #280=(remv . ci2c3d) #281=(remp . ci2c3c) #282=(remq . ci2c3b) #283=(partition . ci2c3a) #284=(memv . ci2c39) #285=(memq . ci2c38) #286=(memp . ci2c37) #287=(member . ci2c36) #288=(exists . ci2c35) #289=(for-all . ci2c34) #290=(fold-right . ci2c33) #291=(fold-left . ci2c32) #292=(find . ci2c31) #293=(filter . ci2c30) #294=(cons* . ci2c2f) #295=(assv . ci2c2e) #296=(assq . ci2c2d) #297=(assp . ci2c2c) #298=(assoc . ci2c2b) #299=(call-with-string-output-port . ci2c2a) #300=(call-with-port . ci2c29) #301=(call-with-bytevector-output-port . ci2c28) #302=(bytevector->string . ci2c27) #303=(buffer-mode? . ci2c26) #304=(binary-port? . ci2c25) #305=(with-exception-handler . ci2c24) #306=(raise-continuable . ci2c23) #307=(raise . ci2c22) #308=(eval . cie36) #309=(environment . cie2e) #310=(make-enumeration . ci2c21) #311=(enum-set=? . ci2c20) #312=(enum-set-universe . ci2c1f) #313=(enum-set-union . ci2c1e) #314=(enum-set-subset? . ci2c1d) #315=(enum-set-projection . ci2c1c) #316=(enum-set-member? . ci2c1b) #317=(enum-set-intersection . ci2c1a) #318=(enum-set-indexer . ci2c19) #319=(enum-set-difference . ci2c18) #320=(enum-set-constructor . ci2c17) #321=(enum-set-complement . ci2c16) #322=(enum-set->list . ci2c15) #323=(who-condition? . ci2c14) #324=(warning? . ci2c13) #325=(violation? . ci2c12) #326=(undefined-violation? . ci2c11) #327=(syntax-violation? . ci2c10) #328=(syntax-violation-subform . ci2c0f) #329=(syntax-violation-form . ci2c0e) #330=(syntax-violation . cie56) #331=(simple-conditions . ci2c0d) #332=(serious-condition? . ci2c0c) #333=(non-continuable-violation? . ci2c0b) #334=(message-condition? . ci2c0a) #335=(make-who-condition . ci2c09) #336=(make-warning . ci2c08) #337=(make-violation . ci2c07) #338=(make-undefined-violation . ci2c06) #339=(make-syntax-violation . ci2c05) #340=(make-serious-condition . ci2c04) #341=(make-non-continuable-violation . ci2c03) #342=(make-message-condition . ci2c02) #343=(make-lexical-violation . ci2c01) #344=(make-irritants-condition . ci2c00) #345=(make-implementation-restriction-violation . ci2bff) #346=(make-error . ci2bfe) #347=(make-assertion-violation . ci2bfd) #348=(lexical-violation? . ci2bfc) #349=(irritants-condition? . ci2bfb) #350=(implementation-restriction-violation? . ci2bfa) #351=(error? . ci2bf9) #352=(condition-who . ci2bf8) #353=(condition-predicate . ci2bf7) #354=(condition-message . ci2bf6) #355=(condition-irritants . ci2bf5) #356=(condition-accessor . ci2bf4) #357=(condition . ci2bf3) #358=(assertion-violation? . ci2bf2) #359=(condition? . ci2bf1) #360=(utf32->string . ci2bf0) #361=(utf16->string . ci2bef) #362=(utf8->string . ci2bee) #363=(uint-list->bytevector . ci2bed) #364=(u8-list->bytevector . ci2bec) #365=(string->utf8 . ci2beb) #366=(string->utf32 . ci2bea) #367=(string->utf16 . ci2be9) #368=(sint-list->bytevector . ci2be8) #369=(native-endianness . ci2be7) #370=(bytevector? . ci2be6) #371=(bytevector=? . ci2be5) #372=(bytevector-uint-set! . ci2be4) #373=(bytevector-uint-ref . ci2be3) #374=(bytevector-u8-set! . ci2be2) #375=(bytevector-u8-ref . ci2be1) #376=(bytevector-u64-set! . ci2be0) #377=(bytevector-u64-ref . ci2bdf) #378=(bytevector-u64-native-set! . ci2bde) #379=(bytevector-u64-native-ref . ci2bdd) #380=(bytevector-u32-set! . ci2bdc) #381=(bytevector-u32-ref . ci2bdb) #382=(bytevector-u32-native-set! . ci2bda) #383=(bytevector-u32-native-ref . ci2bd9) #384=(bytevector-u16-set! . ci2bd8) #385=(bytevector-u16-ref . ci2bd7) #386=(bytevector-u16-native-set! . ci2bd6) #387=(bytevector-u16-native-ref . ci2bd5) #388=(bytevector-sint-set! . ci2bd4) #389=(bytevector-sint-ref . ci2bd3) #390=(bytevector-s8-set! . ci2bd2) #391=(bytevector-s8-ref . ci2bd1) #392=(bytevector-s64-set! . ci2bd0) #393=(bytevector-s64-ref . ci2bcf) #394=(bytevector-s64-native-set! . ci2bce) #395=(bytevector-s64-native-ref . ci2bcd) #396=(bytevector-s32-set! . ci2bcc) #397=(bytevector-s32-ref . ci2bcb) #398=(bytevector-s32-native-set! . ci2bca) #399=(bytevector-s32-native-ref . ci2bc9) #400=(bytevector-s16-set! . ci2bc8) #401=(bytevector-s16-ref . ci2bc7) #402=(bytevector-s16-native-set! . ci2bc6) #403=(bytevector-s16-native-ref . ci2bc5) #404=(bytevector-length . ci2bc4) #405=(bytevector-ieee-single-ref . ci2bc3) #406=(bytevector-ieee-single-set! . ci2bc2) #407=(bytevector-ieee-single-native-set! . ci2bc1) #408=(bytevector-ieee-single-native-ref . ci2bc0) #409=(bytevector-ieee-double-set! . ci2bbf) #410=(bytevector-ieee-double-ref . ci2bbe) #411=(bytevector-ieee-double-native-set! . ci2bbd) #412=(bytevector-ieee-double-native-ref . ci2bbc) #413=(bytevector-fill! . ci2bbb) #414=(bytevector-copy! . ci2bba) #415=(bytevector-copy . ci2bb9) #416=(bytevector->uint-list . ci2bb8) #417=(bytevector->u8-list . ci2bb7) #418=(bytevector->sint-list . ci2bb6) #419=(no-nans-violation? . ci2bb5) #420=(no-infinities-violation? . ci2bb4) #421=(make-no-nans-violation . ci2bb3) #422=(make-no-infinities-violation . ci2bb2) #423=(real->flonum . ci2bb1) #424=(flzero? . ci2bb0) #425=(fltruncate . ci2baf) #426=(fltan . ci2bae) #427=(flsqrt . ci2bad) #428=(flsin . ci2bac) #429=(flround . ci2bab) #430=(flpositive? . ci2baa) #431=(flonum? . ci2ba9) #432=(flodd? . ci2ba8) #433=(flnumerator . ci2ba7) #434=(flnegative? . ci2ba6) #435=(flnan? . ci2ba5) #436=(flmod0 . ci2ba4) #437=(flmod . ci2ba3) #438=(flmin . ci2ba2) #439=(flmax . ci2ba1) #440=(fllog . ci2ba0) #441=(flinteger? . ci2b9f) #442=(flinfinite? . ci2b9e) #443=(flfloor . ci2b9d) #444=(flfinite? . ci2b9c) #445=(flexpt . ci2b9b) #446=(flexp . ci2b9a) #447=(fleven? . ci2b99) #448=(fldiv0-and-mod0 . ci2b98) #449=(fldiv0 . ci2b97) #450=(fldiv-and-mod . ci2b96) #451=(fldiv . ci2b95) #452=(fldenominator . ci2b94) #453=(flcos . ci2b93) #454=(flceiling . ci2b92) #455=(flatan . ci2b91) #456=(flasin . ci2b90) #457=(flacos . ci2b8f) #458=(flabs . ci2b8e) #459=(fl>? . ci2b8d) #460=(fl>=? . ci2b8c) #461=(fl=? . ci2b8b) #462=(fl<? . ci2b8a) #463=(fl<=? . ci2b89) #464=(fl/ . ci2b88) #465=(fl- . ci2b87) #466=(fl+ . ci2b86) #467=(fl* . ci2b85) #468=(fixnum->flonum . ci2b84) #469=(fxzero? . ci2b83) #470=(fxxor . ci2b82) #471=(fxrotate-bit-field . ci2b81) #472=(fxreverse-bit-field . ci2b80) #473=(fxpositive? . ci2b7f) #474=(fxodd? . ci2b7e) #475=(fxnot . ci2b7d) #476=(fxnegative? . ci2b7c) #477=(fxmod0 . ci2b7b) #478=(fxmod . ci2b7a) #479=(fxmin . ci2b79) #480=(fxmax . ci2b78) #481=(fxlength . ci2b77) #482=(fxior . ci2b76) #483=(fxif . ci2b75) #484=(fxfirst-bit-set . ci2b74) #485=(fxeven? . ci2b73) #486=(fxdiv0-and-mod0 . ci2b72) #487=(fxdiv0 . ci2b71) #488=(fxdiv-and-mod . ci2b70) #489=(fxdiv . ci2b6f) #490=(fxcopy-bit-field . ci2b6e) #491=(fxcopy-bit . ci2b6d) #492=(fxbit-set? . ci2b6c) #493=(fxbit-field . ci2b6b) #494=(fxbit-count . ci2b6a) #495=(fxarithmetic-shift-right . ci2b69) #496=(fxarithmetic-shift-left . ci2b68) #497=(fxarithmetic-shift . ci2b67) #498=(fxand . ci2b66) #499=(fx>? . ci2b65) #500=(fx>=? . ci2b64) #501=(fx=? . ci2b63) #502=(fx<? . ci2b62) #503=(fx<=? . ci2b61) #504=(fx-/carry . ci2b60) #505=(fx- . ci2b5f) #506=(fx+/carry . ci2b5e) #507=(fx+ . ci2b5d) #508=(fx*/carry . ci2b5c) #509=(fx* . ci2b5b) #510=(greatest-fixnum . ci2b5a) #511=(least-fixnum . ci2b59) #512=(fixnum-width . ci2b58) #513=(fixnum? . ci2b57) #514=(bitwise-rotate-bit-field . ci2b56) #515=(bitwise-reverse-bit-field . ci2b55) #516=(bitwise-length . ci2b54) #517=(bitwise-if . ci2b53) #518=(bitwise-first-bit-set . ci2b52) #519=(bitwise-copy-bit-field . ci2b51) #520=(bitwise-copy-bit . ci2b50) #521=(bitwise-bit-set? . ci2b4f) #522=(bitwise-bit-field . ci2b4e) #523=(bitwise-bit-count . ci2b4d) #524=(bitwise-xor . ci2b4c) #525=(bitwise-ior . ci2b4b) #526=(bitwise-and . ci2b4a) #527=(bitwise-not . ci2b49) #528=(bitwise-arithmetic-shift-right . ci2b48) #529=(bitwise-arithmetic-shift-left . ci2b47) #530=(bitwise-arithmetic-shift . ci2b46) #531=(zero? . ci2b45) #532=(vector? . ci2b44) #533=(vector-set! . ci2b43) #534=(vector-ref . ci2b42) #535=(vector-map . ci2b41) #536=(vector-length . ci2b40) #537=(vector-for-each . ci2b3f) #538=(vector-fill! . ci2b3e) #539=(vector->list . ci2b3d) #540=(vector . ci2b3c) #541=(values . ci2b3b) #542=(truncate . ci2b3a) #543=(tan . ci2b39) #544=(symbol? . ci2b38) #545=(symbol=? . ci2b37) #546=(symbol->string . ci2b36) #547=(substring . ci2b35) #548=(string? . ci2b34) #549=(string>? . ci2b33) #550=(string>=? . ci2b32) #551=(string=? . ci2b31) #552=(string<? . ci2b30) #553=(string<=? . ci2b2f) #554=(string-ref . ci2b2e) #555=(string-length . ci2b2d) #556=(string-for-each . ci2b2c) #557=(string-copy . ci2b2b) #558=(string-append . ci2b2a) #559=(string->symbol . ci2b29) #560=(string->number . ci2b28) #561=(string->list . ci2b27) #562=(string . ci2b26) #563=(sqrt . ci2b25) #564=(sin . ci2b24) #565=(round . ci2b23) #566=(reverse . ci2b22) #567=(real? . ci2b21) #568=(real-valued? . ci2b20) #569=(real-part . ci2b1f) #570=(rationalize . ci2b1e) #571=(rational? . ci2b1d) #572=(rational-valued? . ci2b1c) #573=(procedure? . ci2b1b) #574=(positive? . ci2b1a) #575=(pair? . ci2b19) #576=(odd? . ci2b18) #577=(numerator . ci2b17) #578=(number? . ci2b16) #579=(number->string . ci2b15) #580=(null? . ci2b14) #581=(not . ci2b13) #582=(negative? . ci2b12) #583=(nan? . ci2b11) #584=(min . ci2b10) #585=(max . ci2b0f) #586=(map . ci2b0e) #587=(make-vector . ci2b0d) #588=(make-string . ci2b0c) #589=(make-rectangular . ci2b0b) #590=(make-polar . ci2b0a) #591=(magnitude . ci2b09) #592=(log . ci2b08) #593=(list? . ci2b07) #594=(list-tail . ci2b06) #595=(list-ref . ci2b05) #596=(list->vector . ci2b04) #597=(list->string . ci2b03) #598=(list . ci2b02) #599=(length . ci2b01) #600=(lcm . ci2b00) #601=(integer? . ci2aff) #602=(integer-valued? . ci2afe) #603=(integer->char . ci2afd) #604=(infinite? . ci2afc) #605=(inexact? . ci2afb) #606=(inexact . ci2afa) #607=(imag-part . ci2af9) #608=(gcd . ci2af8) #609=(for-each . ci2af7) #610=(floor . ci2af6) #611=(finite? . ci2af5) #612=(expt . ci2af4) #613=(exp . ci2af3) #614=(exact? . ci2af2) #615=(exact-integer-sqrt . ci2af1) #616=(exact . ci2af0) #617=(even? . ci2aef) #618=(error . ci2aee) #619=(eqv? . ci2aed) #620=(equal? . ci2aec) #621=(eq? . ci2aeb) #622=(dynamic-wind . ci2aea) #623=(div0-and-mod0 . ci2ae9) #624=(mod0 . ci2ae8) #625=(div0 . ci2ae7) #626=(div-and-mod . ci2ae6) #627=(mod . ci2ae5) #628=(div . ci2ae4) #629=(denominator . ci2ae3) #630=(cos . ci2ae2) #631=(cons . ci2ae1) #632=(complex? . ci2ae0) #633=(char? . ci2adf) #634=(char>? . ci2ade) #635=(char>=? . ci2add) #636=(char=? . ci2adc) #637=(char<? . ci2adb) #638=(char<=? . ci2ada) #639=(char->integer . ci2ad9) #640=(ceiling . ci2ad8) #641=(call-with-values . ci2ad7) #642=(call/cc . ci2ad6) #643=(call-with-current-continuation . ci2ad5) #644=(cddddr . ci2ad4) #645=(cdddar . ci2ad3) #646=(cddadr . ci2ad2) #647=(cddaar . ci2ad1) #648=(cdaddr . ci2ad0) #649=(cdadar . ci2acf) #650=(cdaadr . ci2ace) #651=(cdaaar . ci2acd) #652=(cadddr . ci2acc) #653=(caddar . ci2acb) #654=(cadadr . ci2aca) #655=(cadaar . ci2ac9) #656=(caaddr . ci2ac8) #657=(caadar . ci2ac7) #658=(caaadr . ci2ac6) #659=(caaaar . ci2ac5) #660=(cdddr . ci2ac4) #661=(cddar . ci2ac3) #662=(cdadr . ci2ac2) #663=(cdaar . ci2ac1) #664=(caddr . ci2ac0) #665=(cadar . ci2abf) #666=(caadr . ci2abe) #667=(caaar . ci2abd) #668=(cddr . ci2abc) #669=(cdar . ci2abb) #670=(cadr . ci2aba) #671=(caar . ci2ab9) #672=(cdr . ci2ab8) #673=(car . ci2ab7) #674=(boolean? . ci2ab6) #675=(boolean=? . ci2ab5) #676=(atan . ci2ab4) #677=(assertion-violation . ci2ab3) #678=(asin . ci2ab2) #679=(apply . ci2ab1) #680=(append . ci2ab0) #681=(angle . ci2aaf) #682=(acos . ci2aae) #683=(abs . ci2aad) #684=(/ . ci2aac) #685=(* . ci2aab) #686=(- . ci2aaa) #687=(+ . ci2aa9) #688=(>= . ci2aa8) #689=(> . ci2aa7) #690=(= . ci2aa6) #691=(<= . ci2aa5) #692=(< . ci2aa4) #693=(library . ci2aa3) #694=(&no-nans . ci2aa2) #695=(&no-infinities . ci2aa1) #696=(&i/o-encoding . ci2aa0) #697=(&i/o-decoding . ci2a9f) #698=(&i/o-port . ci2a9e) #699=(&i/o-file-does-not-exist . ci2a9d) #700=(&i/o-file-already-exists . ci2a9c) #701=(&i/o-file-is-read-only . ci2a9b) #702=(&i/o-file-protection . ci2a9a) #703=(&i/o-filename . ci2a99) #704=(&i/o-invalid-position . ci2a98) #705=(&i/o-write . ci2a97) #706=(&i/o-read . ci2a96) #707=(&i/o . ci2a95) #708=(&undefined . ci2a94) #709=(&syntax . ci2a93) #710=(&lexical . ci2a92) #711=(&implementation-restriction . ci2a91) #712=(&non-continuable . ci2a90) #713=(&who . ci2a8f) #714=(&irritants . ci2a8e) #715=(&assertion . ci2a8d) #716=(&violation . ci2a8c) #717=(&error . ci2a8b) #718=(&serious . ci2a8a) #719=(&warning . ci2a89) #720=(&message . ci2a88) #721=(&condition . ci2a87) #722=(define-condition-type . ci2a86) #723=(define-enumeration . ci2a85) #724=(define-record-type . ci2a84) #725=(parent-rtd . ci2a83) #726=(nongenerative . ci2a82) #727=(opaque . ci2a81) #728=(sealed . ci2a80) #729=(protocol . ci2a7f) #730=(parent . ci2a7e) #731=(immutable . ci2a7d) #732=(mutable . ci2a7c) #733=(fields . ci2a7b) #734=(error-handling-mode . ci2a7a) #735=(file-options . ci2a79) #736=(buffer-mode . ci2a78) #737=(eol-style . ci2a77) #738=(guard . ci2a76) #739=(unsyntax-splicing . ci2a73) #740=(unsyntax . ci2a72) #741=(unquote-splicing . ci2a71) #742=(unquote . ci2a70) #743=(_ . ci2a6f) #744=(else . ci2a6e) #745=(=> . ci2a6d) #746=(... . ci2a6c) #747=(assert . ci2a6b) #748=(endianness . ci2a6a) #749=(time . ci2a68) #750=(do . ci2a67) #751=(cond . ci2a66) #752=(let* . ci2a65) #753=(let*-values . ci2a64) #754=(let-values . ci2a63) #755=(identifier-syntax . ci2a62) #756=(with-syntax . ci2a61) #757=(quasisyntax . ci2a60) #758=(quasiquote . ci2a5f) #759=(syntax-rules . ci2a5e) #760=(include . ci2a5d) #761=(record-constructor-descriptor . ci2a5b) #762=(record-type-descriptor . ci2a5a) #763=(case . ci2a59) #764=(unless . ci2a57) #765=(when . ci2a56) #766=(or . ci2a55) #767=(and . ci2a54) #768=(if . ci2a53) #769=(let . ci2a52) #770=(letrec* . ci2a51) #771=(letrec . ci2a50) #772=(case-lambda . ci2a4e) #773=(lambda . ci2a4d) #774=(syntax . ci2a4c) #775=(syntax-case . ci2a4b) #776=(quote . ci2a4a) #777=(letrec-syntax . ci2a48) #778=(let-syntax . ci2a47) #779=(set! . ci2a46) #780=(import . ci2a45) #781=(begin . ci2a44) #782=(define-syntax . ci2a42) #783=(define . ci2a41)) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2de1 '(psyntax null-environment-5) '() '() '() '() '(#784=(make-promise . ci2c44) #741# #742# #743# #744# #745# #746# #785=(delay . ci2a69) #750# #751# #752# #758# #759# #763# #766# #767# #768# #769# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2de2 '(psyntax scheme-report-environment-5) '() '() '() '() '(#95# #96# #97# #98# #99# #100# #101# #103# #104# #106# #109# #110# #111# #112# #113# #114# #115# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #182# #184# #185# #186# #187# #786=(scheme-report-environment . cie32) #787=(quotient . ci2c4a) #788=(null-environment . cie30) #789=(remainder . ci2c49) #790=(modulo . ci2c48) #791=(inexact->exact . ci2c47) #792=(force . ci2c46) #793=(exact->inexact . ci2c45) #784# #275# #276# #277# #278# #284# #285# #287# #295# #296# #298# #308# #531# #532# #533# #534# #536# #538# #539# #540# #541# #542# #543# #544# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #569# #570# #571# #573# #574# #575# #576# #577# #578# #579# #581# #582# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #603# #605# #607# #608# #609# #610# #612# #613# #614# #617# #619# #620# #621# #622# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #676# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #741# #742# #744# #745# #746# #785# #750# #751# #752# #758# #759# #763# #766# #767# #768# #769# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2de3 '(psyntax modules) '() '() '() '() '(#794=(module . ci2a43)) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2de4 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2de5 '(rnrs) '#795=(6) '() '() '() '(#1# #87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114# #115# #116# #117# #118# #119# #120# #121# #122# #123# #124# #125# #126# #127# #128# #129# #130# #131# #132# #133# #134# #135# #136# #137# #138# #139# #140# #141# #142# #143# #144# #145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #241# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #273# #274# #279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297# #298# #299# #300# #301# #302# #303# #304# #305# #306# #307# #310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513# #514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530# #531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# #738# #739# #740# #741# #742# #743# #744# #745# #746# #747# #748# #750# #751# #752# #753# #754# #755# #756# #757# #758# #759# #761# #762# #763# #764# #765# #766# #767# #768# #769# #770# #771# #772# #773# #774# #775# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2de6 '(rnrs r5rs) '#795# '() '() '() '(#786# #787# #788# #789# #790# #791# #792# #793# #784# #785#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2de7 '(rnrs control) '#795# '() '() '() '(#750# #764# #765# #772#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2de8 '(rnrs eval) '#795# '() '() '() '(#308# #309#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2de9 '(rnrs mutable-pairs) '#795# '() '() '() '(#277# #278#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2dea '(rnrs mutable-strings) '#795# '() '() '() '(#275# #276#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2deb '(rnrs programs) '#795# '() '() '() '(#273# #274#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2dec '(rnrs syntax-case) '#795# '() '() '() '(#116# #117# #118# #119# #120# #121# #122# #330# #739# #740# #743# #746# #756# #757# #774# #775#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2ded '(rnrs files) '#795# '() '() '() '(#140# #141# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2dee '(rnrs sorting) '#795# '() '() '() '(#142# #143# #144#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2def '(rnrs base) '#795# '() '() '() '(#531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #741# #742# #743# #744# #745# #746# #747# #751# #752# #753# #754# #755# #758# #759# #763# #766# #767# #768# #769# #770# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df0 '(rnrs lists) '#795# '() '() '() '(#279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297# #298#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df1 '(rnrs io simple) '#795# '() '() '() '(#166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df2 '(rnrs bytevectors) '#795# '() '() '() '(#241# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #748#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df3 '(rnrs unicode) '#795# '() '() '() '(#87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114# #115#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df4 '(rnrs exceptions) '#795# '() '() '() '(#305# #306# #307# #738# #744# #745#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df5 '(rnrs arithmetic bitwise) '#795# '() '() '() '(#514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df6 '(rnrs arithmetic fixnums) '#795# '() '() '() '(#469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df7 '(rnrs arithmetic flonums) '#795# '() '() '() '(#419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #694# #695#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df8 '(rnrs hashtables) '#795# '() '() '() '(#145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2df9 '(rnrs io ports) '#795# '() '() '() '(#181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #299# #300# #301# #302# #303# #304# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #734# #735# #736# #737#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2dfa '(rnrs enums) '#795# '() '() '() '(#310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #723#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2dfb '(rnrs conditions) '#795# '() '() '() '(#323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2dfc '(rnrs records inspection) '#795# '() '() '() '(#130# #131# #132# #133# #134# #135# #136# #137# #138# #139#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2dfd '(rnrs records procedural) '#795# '() '() '() '(#123# #124# #125# #126# #127# #128# #129#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2dfe '(rnrs records syntactic) '#795# '() '() '() '(#724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #761# #762#) '() values values '#f '#f '#t '#f) (ci98a@ci7d6@install-library 'ci2dff '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . ci2ddf) (&no-nans-rtd . ci2dde) (&no-infinities-rcd . ci2ddd) (&no-infinities-rtd . ci2ddc) (&i/o-encoding-rcd . ci2ddb) (&i/o-encoding-rtd . ci2dda) (&i/o-decoding-rcd . ci2dd9) (&i/o-decoding-rtd . ci2dd8) (&i/o-port-rcd . ci2dd7) (&i/o-port-rtd . ci2dd6) (&i/o-file-does-not-exist-rcd . ci2dd5) (&i/o-file-does-not-exist-rtd . ci2dd4) (&i/o-file-already-exists-rcd . ci2dd3) (&i/o-file-already-exists-rtd . ci2dd2) (&i/o-file-is-read-only-rcd . ci2dd1) (&i/o-file-is-read-only-rtd . ci2dd0) (&i/o-file-protection-rcd . ci2dcf) (&i/o-file-protection-rtd . ci2dce) (&i/o-filename-rcd . ci2dcd) (&i/o-filename-rtd . ci2dcc) (&i/o-invalid-position-rcd . ci2dcb) (&i/o-invalid-position-rtd . ci2dca) (&i/o-write-rcd . ci2dc9) (&i/o-write-rtd . ci2dc8) (&i/o-read-rcd . ci2dc7) (&i/o-read-rtd . ci2dc6) (&i/o-rcd . ci2dc5) (&i/o-rtd . ci2dc4) (&undefined-rcd . ci2dc3) (&undefined-rtd . ci2dc2) (&syntax-rcd . ci2dc1) (&syntax-rtd . ci2dc0) (&lexical-rcd . ci2dbf) (&lexical-rtd . ci2dbe) (&implementation-restriction-rcd . ci2dbd) (&implementation-restriction-rtd . ci2dbc) (&non-continuable-rcd . ci2dbb) (&non-continuable-rtd . ci2dba) (&who-rcd . ci2db9) (&who-rtd . ci2db8) (&irritants-rcd . ci2db7) (&irritants-rtd . ci2db6) (&assertion-rcd . ci2db5) (&assertion-rtd . ci2db4) (&violation-rcd . ci2db3) (&violation-rtd . ci2db2) (&error-rcd . ci2db1) (&error-rtd . ci2db0) (&serious-rcd . ci2daf) (&serious-rtd . ci2dae) (&warning-rcd . ci2dad) (&warning-rtd . ci2dac) (&message-rcd . ci2dab) (&message-rtd . ci2daa) (&condition-rcd . ci2da9) (&condition-rtd . ci2da8) (syntax-error . cie52) (syntax-dispatch . cid76) #796=(pretty-print . ci2da7) #797=(eval-core . ci2da6) #798=(set-symbol-value! . ci2da5) #799=(symbol-value . ci2da4) #800=(gensym . ci2da3) #801=(void . ci2da2) (load . ci28df) (interaction-environment . cie64) (char-ready? . ci2da1) #1# #802=(read-line . ci2d9f) #803=(gensym-prefix-set! . ci2d9e) #804=(ungensym . ci2d9d) #2# #805=(assoc-ref . ci2d9b) #806=(print . ci2d9a) #3# #807=(host-os . ci2d98) #808=(library-path . ci7b5) #809=(standard-library-path . ci2d97) #810=(file-newer? . ci2d96) #811=(stat-mtime . ci2d95) #812=(write-to-file . ci2d94) #813=(file->list . ci2d93) #814=(file->string . ci2d92) #815=(digit->integer . ci2d91) #816=(call-with-string-input-port . ci2d90) #817=(call-with-string-io . ci2d8f) #4# #818=(bytevector-for-each . ci2d8d) #819=(string->regexp . ci2d8c) #820=(rxmatch . ci2d8b) #821=(regexp-replace-all . ci2d8a) #822=(hashtable-for-each . ci2d89) #823=(mosh-cache-dir . ci59f) #5# #824=(local-tz-offset . ci2d87) #825=(microseconds . ci2d86) #826=(directory-list . ci2d85) #6# #7# #8# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #827=(%ffi-free-c-callback-trampoline . ci2d51) #828=(%ffi-make-c-callback-trampoline . ci2d50) #829=(%ffi-free . ci2d4f) #830=(%ffi-malloc . ci2d4e) #57# #58# #59# #60# #61# #62# #63# #64# #65# #66# #67# #831=(open-output-string . ci2d42) #832=(get-output-string . ci2d41) #833=(file-stat-ctime . ci2d40) #834=(file-stat-atime . ci2d3f) #835=(file-stat-mtime . ci2d3e) #836=(file-size-in-bytes . ci2d3d) #837=(file-writable? . ci2d3c) #838=(file-executable? . ci2d3b) #839=(file-readable? . ci2d3a) #840=(file-regular? . ci2d39) #841=(file-symbolic-link? . ci2d38) #842=(file-directory? . ci2d37) #843=(create-symbolic-link . ci2d36) #844=(rename-file . ci2d35) #845=(delete-directory . ci2d34) #846=(create-directory . ci2d33) #847=(create-mosh-cache-dir . ci2d32) #848=(get-environment-variables . ci2d31) #849=(current-exception-handler . ci2d30) #850=(get-environment-variable . ci2d2f) #851=(join-wraps . ci2d2e) #852=(id->real-label . ci2d2d) #853=(same-marks? . ci2d2c) #854=(same-marks*? . ci2d2b) #855=(get-timeofday . ci2d2a) #856=(get-command-line . ci2d29) #857=(sys-display . ci2d28) #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #86# #858=(mosh-executable-path . ci2d14) #859=(make-file-options . ci2d13) #860=(source-info . ci2d12) #861=(make-compiler-instruction . ci2d11) #862=(make-instruction . ci2d10) #863=(set-source-info! . ci2d0f) #864=(bignum? . ci2d0e) #865=(fast-equal? . ci2d0d) #866=(fasl-read . ci2d0c) #867=(fasl-write . ci2d0b) #868=(time-usage . ci2d0a) #869=(os-constant . ci2d09) #870=(disasm . ci2d08) #871=(make-parameter . ci59d) #872=(socket-port . ci2d07) #873=(socket-shutdown . ci2d06) #874=(socket-close . ci2d05) #875=(socket-send . ci2d04) #876=(socket-recv! . ci2d03) #877=(socket-recv . ci2d02) #878=(make-server-socket . ci2d01) #879=(make-client-socket . ci2d00) #880=(socket-accept . ci2cff) #881=(socket? . ci2cfeassertion-error . cie50) #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #693# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# #738# (trace-define . ci2a75) (trace-lambda . ci2a74) #739# #740# #741# #742# #743# #744# #745# #746# #747# #748# #785# #749# #750# #751# #752# #753# #754# #755# #756# #757# #758# #759# #760# (define-struct . ci2a5c) #761# #762# #763# #882=(parameterize . ci2a58) #764# #765# #766# #767# #768# #769# #770# #771# (type-descriptor . ci2a4f) #772# #773# #774# #775# #776# (foreign-call . ci2a49) #777# #778# #779# #780# #781# #794# #782# #783#) '((ci2ddf core-prim . &no-nans-rcd) (ci2dde core-prim . &no-nans-rtd) (ci2ddd core-prim . &no-infinities-rcd) (ci2ddc core-prim . &no-infinities-rtd) (ci2ddb core-prim . &i/o-encoding-rcd) (ci2dda core-prim . &i/o-encoding-rtd) (ci2dd9 core-prim . &i/o-decoding-rcd) (ci2dd8 core-prim . &i/o-decoding-rtd) (ci2dd7 core-prim . &i/o-port-rcd) (ci2dd6 core-prim . &i/o-port-rtd) (ci2dd5 core-prim . &i/o-file-does-not-exist-rcd) (ci2dd4 core-prim . &i/o-file-does-not-exist-rtd) (ci2dd3 core-prim . &i/o-file-already-exists-rcd) (ci2dd2 core-prim . &i/o-file-already-exists-rtd) (ci2dd1 core-prim . &i/o-file-is-read-only-rcd) (ci2dd0 core-prim . &i/o-file-is-read-only-rtd) (ci2dcf core-prim . &i/o-file-protection-rcd) (ci2dce core-prim . &i/o-file-protection-rtd) (ci2dcd core-prim . &i/o-filename-rcd) (ci2dcc core-prim . &i/o-filename-rtd) (ci2dcb core-prim . &i/o-invalid-position-rcd) (ci2dca core-prim . &i/o-invalid-position-rtd) (ci2dc9 core-prim . &i/o-write-rcd) (ci2dc8 core-prim . &i/o-write-rtd) (ci2dc7 core-prim . &i/o-read-rcd) (ci2dc6 core-prim . &i/o-read-rtd) (ci2dc5 core-prim . &i/o-rcd) (ci2dc4 core-prim . &i/o-rtd) (ci2dc3 core-prim . &undefined-rcd) (ci2dc2 core-prim . &undefined-rtd) (ci2dc1 core-prim . &syntax-rcd) (ci2dc0 core-prim . &syntax-rtd) (ci2dbf core-prim . &lexical-rcd) (ci2dbe core-prim . &lexical-rtd) (ci2dbd core-prim . &implementation-restriction-rcd) (ci2dbc core-prim . &implementation-restriction-rtd) (ci2dbb core-prim . &non-continuable-rcd) (ci2dba core-prim . &non-continuable-rtd) (ci2db9 core-prim . &who-rcd) (ci2db8 core-prim . &who-rtd) (ci2db7 core-prim . &irritants-rcd) (ci2db6 core-prim . &irritants-rtd) (ci2db5 core-prim . &assertion-rcd) (ci2db4 core-prim . &assertion-rtd) (ci2db3 core-prim . &violation-rcd) (ci2db2 core-prim . &violation-rtd) (ci2db1 core-prim . &error-rcd) (ci2db0 core-prim . &error-rtd) (ci2daf core-prim . &serious-rcd) (ci2dae core-prim . &serious-rtd) (ci2dad core-prim . &warning-rcd) (ci2dac core-prim . &warning-rtd) (ci2dab core-prim . &message-rcd) (ci2daa core-prim . &message-rtd) (ci2da9 core-prim . &condition-rcd) (ci2da8 core-prim . &condition-rtd) (cie52 core-prim . syntax-error) (cid76 core-prim . syntax-dispatch) (ci2da7 core-prim . pretty-print) (ci2da6 core-prim . eval-core) (ci2da5 core-prim . set-symbol-value!) (ci2da4 core-prim . symbol-value) (ci2da3 core-prim . gensym) (ci2da2 core-prim . void) (ci28df core-prim . load) (cie64 core-prim . interaction-environment) (ci2da1 core-prim . char-ready?) (ci2da0 core-prim . regexp?) (ci2d9f core-prim . read-line) (ci2d9e core-prim . gensym-prefix-set!) (ci2d9d core-prim . ungensym) (ci2d9c core-prim . alist->eq-hash-table) (ci2d9b core-prim . assoc-ref) (ci2d9a core-prim . print) (ci2d99 core-prim . format) (ci2d98 core-prim . host-os) (ci7b5 core-prim . library-path) (ci2d97 core-prim . standard-library-path) (ci2d96 core-prim . file-newer?) (ci2d95 core-prim . stat-mtime) (ci2d94 core-prim . write-to-file) (ci2d93 core-prim . file->list) (ci2d92 core-prim . file->string) (ci2d91 core-prim . digit->integer) (ci2d90 core-prim . call-with-string-input-port) (ci2d8f core-prim . call-with-string-io) (ci2d8e core-prim . string-split) (ci2d8d core-prim . bytevector-for-each) (ci2d8c core-prim . string->regexp) (ci2d8b core-prim . rxmatch) (ci2d8a core-prim . regexp-replace-all) (ci2d89 core-prim . hashtable-for-each) (ci59f core-prim . mosh-cache-dir) (ci2d88 core-prim . call-process) (ci2d87 core-prim . local-tz-offset) (ci2d86 core-prim . microseconds) (ci2d85 core-prim . directory-list) (ci2d84 core-prim . set-current-directory!) (ci2d83 core-prim . expand-path) (ci2d82 core-prim . current-directory) (ci2d81 core-prim . %spawn) (ci2d80 core-prim . %waitpid) (ci2d7f core-prim . simple-struct-name) (ci2d7e core-prim . simple-struct-set!) (ci2d7d core-prim . simple-struct-ref) (ci2d7c core-prim . make-simple-struct) (ci2d7b core-prim . simple-struct?) (ci2d7a core-prim . pointer-ref-c-int64) (ci2d79 core-prim . pointer-ref-c-int32) (ci2d78 core-prim . pointer-ref-c-int16) (ci2d77 core-prim . pointer-ref-c-int8) (ci2d76 core-prim . pointer-ref-c-uint64) (ci2d75 core-prim . pointer-ref-c-uint32) (ci2d74 core-prim . pointer-ref-c-uint16) (ci2d73 core-prim . pointer-ref-c-uint8) (ci2d72 core-prim . pointer-set-c-uint64!) (ci2d71 core-prim . pointer-set-c-uint32!) (ci2d70 core-prim . pointer-set-c-uint16!) (ci2d6f core-prim . pointer-set-c-uint8!) (ci2d6e core-prim . pointer-set-c-int64!) (ci2d6d core-prim . pointer-set-c-int32!) (ci2d6c core-prim . pointer-set-c-int16!) (ci2d6b core-prim . pointer-set-c-int8!) (ci2d6a core-prim . pointer-set-c-pointer!) (ci2d69 core-prim . pointer-set-c-double!) (ci2d68 core-prim . pointer-set-c-float!) (ci2d67 core-prim . pointer-set-c-long-long!) (ci2d66 core-prim . pointer-set-c-long!) (ci2d65 core-prim . pointer-set-c-int!) (ci2d64 core-prim . pointer-set-c-short!) (ci2d63 core-prim . pointer-set-c-char!) (ci2d62 core-prim . pointer-ref-c-pointer) (ci2d61 core-prim . pointer-ref-c-double) (ci2d60 core-prim . pointer-ref-c-float) (ci2d5f core-prim . pointer-ref-c-unsigned-long-long) (ci2d5e core-prim . pointer-ref-c-signed-long-long) (ci2d5d core-prim . pointer-ref-c-unsigned-long) (ci2d5c core-prim . pointer-ref-c-signed-long) (ci2d5b core-prim . pointer-ref-c-unsigned-int) (ci2d5a core-prim . pointer-ref-c-signed-int) (ci2d59 core-prim . pointer-ref-c-unsigned-short) (ci2d58 core-prim . pointer-ref-c-signed-short) (ci2d57 core-prim . pointer-ref-c-unsigned-char) (ci2d56 core-prim . pointer-ref-c-signed-char) (ci2d55 core-prim . pointer->integer) (ci2d54 core-prim . integer->pointer) (ci2d53 core-prim . pointer?) (ci2d52 core-prim . shared-errno) (ci2d51 core-prim . %ffi-free-c-callback-trampoline) (ci2d50 core-prim . %ffi-make-c-callback-trampoline) (ci2d4f core-prim . %ffi-free) (ci2d4e core-prim . %ffi-malloc) (ci2d4d core-prim . %ffi-supported?) (ci2d4c core-prim . %ffi-pointer->string) (ci2d4b core-prim . %ffi-call) (ci2d4a core-prim . %ffi-lookup) (ci2d49 core-prim . %ffi-open) (ci2d48 core-prim . null-terminated-utf8->string) (ci2d47 core-prim . null-terminated-bytevector->string) (ci2d46 core-prim . %exec) (ci2d45 core-prim . %fork) (ci2d44 core-prim . %pipe) (ci2d43 core-prim . p) (ci2d42 core-prim . open-output-string) (ci2d41 core-prim . get-output-string) (ci2d40 core-prim . file-stat-ctime) (ci2d3f core-prim . file-stat-atime) (ci2d3e core-prim . file-stat-mtime) (ci2d3d core-prim . file-size-in-bytes) (ci2d3c core-prim . file-writable?) (ci2d3b core-prim . file-executable?) (ci2d3a core-prim . file-readable?) (ci2d39 core-prim . file-regular?) (ci2d38 core-prim . file-symbolic-link?) (ci2d37 core-prim . file-directory?) (ci2d36 core-prim . create-symbolic-link) (ci2d35 core-prim . rename-file) (ci2d34 core-prim . delete-directory) (ci2d33 core-prim . create-directory) (ci2d32 core-prim . create-mosh-cache-dir) (ci2d31 core-prim . get-environment-variables) (ci2d30 core-prim . current-exception-handler) (ci2d2f core-prim . get-environment-variable) (ci2d2e core-prim . join-wraps) (ci2d2d core-prim . id->real-label) (ci2d2c core-prim . same-marks?) (ci2d2b core-prim . same-marks*?) (ci2d2a core-prim . get-timeofday) (ci2d29 core-prim . get-command-line) (ci2d28 core-prim . sys-display) (ci2d27 core-prim . whereis) (ci2d26 core-prim . register) (ci2d25 core-prim . vm-join!) (ci2d24 core-prim . vm-set-value!) (ci2d23 core-prim . vm?) (ci2d22 core-prim . main-vm?) (ci2d21 core-prim . vm-eval) (ci2d20 core-prim . vm-self) (ci2d1f core-prim . vm-start!) (ci2d1e core-prim . make-vm) (ci2d1d core-prim . mutex-try-lock!) (ci2d1c core-prim . mutex-unlock!) (ci2d1b core-prim . mutex-lock!) (ci2d1a core-prim . mutex?) (ci2d19 core-prim . make-mutex) (ci2d18 core-prim . condition-variable-notify-all!) (ci2d17 core-prim . condition-variable-notify!) (ci2d16 core-prim . condition-variable-wait!) (ci2d15 core-prim . make-condition-variable) (ci2d14 core-prim . mosh-executable-path) (ci2d13 core-prim . make-file-options) (ci2d12 core-prim . source-info) (ci2d11 core-prim . make-compiler-instruction) (ci2d10 core-prim . make-instruction) (ci2d0f core-prim . set-source-info!) (ci2d0e core-prim . bignum?) (ci2d0d core-prim . fast-equal?) (ci2d0c core-prim . fasl-read) (ci2d0b core-prim . fasl-write) (ci2d0a core-prim . time-usage) (ci2d09 core-prim . os-constant) (ci2d08 core-prim . disasm) (ci59d core-prim . make-parameter) (ci2d07 core-prim . socket-port) (ci2d06 core-prim . socket-shutdown) (ci2d05 core-prim . socket-close) (ci2d04 core-prim . socket-send) (ci2d03 core-prim . socket-recv!) (ci2d02 core-prim . socket-recv) (ci2d01 core-prim . make-server-socket) (ci2d00 core-prim . make-client-socket) (ci2cff core-prim . socket-accept) (ci2cfe core-prim . socket?) (ci2cfd core-prim . string-upcase) (ci2cfc core-prim . string-titlecase) (ci2cfb core-prim . string-normalize-nfkd) (ci2cfa core-prim . string-normalize-nfkc) (ci2cf9 core-prim . string-normalize-nfd) (ci2cf8 core-prim . string-normalize-nfc) (ci2cf7 core-prim . string-foldcase) (ci2cf6 core-prim . string-downcase) (ci2cf5 core-prim . string-ci>?) (ci2cf4 core-prim . string-ci>=?) (ci2cf3 core-prim . string-ci=?) (ci2cf2 core-prim . string-ci<?) (ci2cf1 core-prim . string-ci<=?) (ci2cf0 core-prim . char-whitespace?) (ci2cef core-prim . char-upper-case?) (ci2cee core-prim . char-title-case?) (ci2ced core-prim . char-numeric?) (ci2cec core-prim . char-lower-case?) (ci2ceb core-prim . char-general-category) (ci2cea core-prim . char-upcase) (ci2ce9 core-prim . char-titlecase) (ci2ce8 core-prim . char-foldcase) (ci2ce7 core-prim . char-downcase) (ci2ce6 core-prim . char-ci>?) (ci2ce5 core-prim . char-ci>=?) (ci2ce4 core-prim . char-ci=?) (ci2ce3 core-prim . char-ci<?) (ci2ce2 core-prim . char-ci<=?) (ci2ce1 core-prim . char-alphabetic?) (ciba1 core-prim . make-variable-transformer) (cie58 core-prim . identifier?) (cie44 core-prim . generate-temporaries) (cie46 core-prim . free-identifier=?) (cie5c core-prim . syntax->datum) (cie5a core-prim . datum->syntax) (cie48 core-prim . bound-identifier=?) (ci2ce0 core-prim . record-type-descriptor?) (ci2cdf core-prim . record-predicate) (ci2cde core-prim . record-mutator) (ci2cdd core-prim . record-constructor) (ci2cdc core-prim . record-accessor) (ci2cdb core-prim . make-record-type-descriptor) (ci2cda core-prim . make-record-constructor-descriptor) (ci2cd9 core-prim . record?) (ci2cd8 core-prim . record-type-uid) (ci2cd7 core-prim . record-type-sealed?) (ci2cd6 core-prim . record-type-parent) (ci2cd5 core-prim . record-type-opaque?) (ci2cd4 core-prim . record-type-name) (ci2cd3 core-prim . record-type-generative?) (ci2cd2 core-prim . record-type-field-names) (ci2cd1 core-prim . record-rtd) (ci2cd0 core-prim . record-field-mutable?) (ci2ccf core-prim . delete-file) (ci2cce core-prim . file-exists?) (ci2ccd core-prim . vector-sort!) (ci2ccc core-prim . vector-sort) (ci2ccb core-prim . list-sort) (ci2cca core-prim . symbol-hash) (ci2cc9 core-prim . string-ci-hash) (ci2cc8 core-prim . string-hash) (ci2cc7 core-prim . equal-hash) (ci2cc6 core-prim . hashtable-equivalence-function) (ci2cc5 core-prim . make-hashtable) (ci2cc4 core-prim . hashtable-hash-function) (ci2cc3 core-prim . make-eqv-hashtable) (ci2cc2 core-prim . make-eq-hashtable) (ci2cc1 core-prim . hashtable?) (ci2cc0 core-prim . hashtable-update!) (ci2cbf core-prim . hashtable-size) (ci2cbe core-prim . hashtable-set!) (ci2cbd core-prim . hashtable-ref) (ci2cbc core-prim . hashtable-mutable?) (ci2cbb core-prim . hashtable-keys) (ci2cba core-prim . hashtable-entries) (ci2cb9 core-prim . hashtable-delete!) (ci2cb8 core-prim . hashtable-copy) (ci2cb7 core-prim . hashtable-contains?) (ci2cb6 core-prim . hashtable-clear!) (ci2cb5 core-prim . call-with-output-file) (ci2cb4 core-prim . call-with-input-file) (ci2cb3 core-prim . write-char) (ci2cb2 core-prim . write) (ci2cb1 core-prim . with-output-to-file) (ci2cb0 core-prim . with-input-from-file) (ci2caf core-prim . read-char) (ci2cae core-prim . read) (ci2cad core-prim . peek-char) (ci2cac core-prim . open-output-file) (ci2cab core-prim . open-input-file) (ci2caa core-prim . newline) (ci2ca9 core-prim . display) (ci2ca8 core-prim . close-output-port) (ci2ca7 core-prim . close-input-port) (ci2ca6 core-prim . eof-object?) (ci2ca5 core-prim . eof-object) (ci2ca4 core-prim . current-error-port) (ci2ca3 core-prim . current-output-port) (ci2ca2 core-prim . current-input-port) (ci2ca1 core-prim . output-port?) (ci2ca0 core-prim . input-port?) (ci2c9f core-prim . utf-8-codec) (ci2c9e core-prim . utf-16-codec) (ci2c9d core-prim . transcoder-error-handling-mode) (ci2c9c core-prim . transcoder-eol-style) (ci2c9b core-prim . transcoder-codec) (ci2c9a core-prim . transcoded-port) (ci2c99 core-prim . textual-port?) (ci2c98 core-prim . string->bytevector) (ci2c97 core-prim . standard-output-port) (ci2c96 core-prim . standard-input-port) (ci2c95 core-prim . standard-error-port) (ci2c94 core-prim . set-port-position!) (ci2c93 core-prim . put-u8) (ci2c92 core-prim . put-string) (ci2c91 core-prim . put-datum) (ci2c90 core-prim . put-char) (ci2c8f core-prim . put-bytevector) (ci2c8e core-prim . port?) (ci2c8d core-prim . port-transcoder) (ci2c8c core-prim . port-position) (ci2c8b core-prim . port-has-set-port-position!?) (ci2c8a core-prim . port-has-port-position?) (ci2c89 core-prim . port-eof?) (ci2c88 core-prim . output-port-buffer-mode) (ci2c87 core-prim . open-string-output-port) (ci2c86 core-prim . open-string-input-port) (ci2c85 core-prim . open-file-output-port) (ci2c84 core-prim . open-file-input/output-port) (ci2c83 core-prim . open-file-input-port) (ci2c82 core-prim . open-bytevector-output-port) (ci2c81 core-prim . open-bytevector-input-port) (ci2c80 core-prim . native-transcoder) (ci2c7f core-prim . native-eol-style) (ci2c7e core-prim . make-transcoder) (ci2c7d core-prim . latin-1-codec) (ci2c7c core-prim . make-i/o-write-error) (ci2c7b core-prim . make-i/o-read-error) (ci2c7a core-prim . make-i/o-port-error) (ci2c79 core-prim . make-i/o-invalid-position-error) (ci2c78 core-prim . make-i/o-filename-error) (ci2c77 core-prim . make-i/o-file-protection-error) (ci2c76 core-prim . make-i/o-file-is-read-only-error) (ci2c75 core-prim . make-i/o-file-does-not-exist-error) (ci2c74 core-prim . make-i/o-file-already-exists-error) (ci2c73 core-prim . make-i/o-error) (ci2c72 core-prim . make-i/o-encoding-error) (ci2c71 core-prim . make-i/o-decoding-error) (ci2c70 core-prim . make-custom-textual-output-port) (ci2c6f core-prim . make-custom-textual-input/output-port) (ci2c6e core-prim . make-custom-textual-input-port) (ci2c6d core-prim . make-custom-binary-output-port) (ci2c6c core-prim . make-custom-binary-input/output-port) (ci2c6b core-prim . make-custom-binary-input-port) (ci2c6a core-prim . make-bytevector) (ci2c69 core-prim . lookahead-u8) (ci2c68 core-prim . lookahead-char) (ci2c67 core-prim . i/o-write-error?) (ci2c66 core-prim . i/o-read-error?) (ci2c65 core-prim . i/o-port-error?) (ci2c64 core-prim . i/o-invalid-position-error?) (ci2c63 core-prim . i/o-filename-error?) (ci2c62 core-prim . i/o-file-protection-error?) (ci2c61 core-prim . i/o-file-is-read-only-error?) (ci2c60 core-prim . i/o-file-does-not-exist-error?) (ci2c5f core-prim . i/o-file-already-exists-error?) (ci2c5e core-prim . i/o-error?) (ci2c5d core-prim . i/o-error-position) (ci2c5c core-prim . i/o-error-port) (ci2c5b core-prim . i/o-error-filename) (ci2c5a core-prim . i/o-encoding-error?) (ci2c59 core-prim . i/o-encoding-error-char) (ci2c58 core-prim . i/o-decoding-error?) (ci2c57 core-prim . get-u8) (ci2c56 core-prim . get-string-n!) (ci2c55 core-prim . get-string-n) (ci2c54 core-prim . get-string-all) (ci2c53 core-prim . get-line) (ci2c52 core-prim . get-datum) (ci2c51 core-prim . get-char) (ci2c50 core-prim . get-bytevector-some) (ci2c4f core-prim . get-bytevector-n!) (ci2c4e core-prim . get-bytevector-n) (ci2c4d core-prim . get-bytevector-all) (ci2c4c core-prim . flush-output-port) (ci2c4b core-prim . close-port) (cie32 core-prim . scheme-report-environment) (ci2c4a core-prim . quotient) (cie30 core-prim . null-environment) (ci2c49 core-prim . remainder) (ci2c48 core-prim . modulo) (ci2c47 core-prim . inexact->exact) (ci2c46 core-prim . force) (ci2c45 core-prim . exact->inexact) (ci2c44 core-prim . make-promise) (ci2c43 core-prim . exit) (ci28d9 core-prim . command-line) (ci2c42 core-prim . string-fill!) (ci2c41 core-prim . string-set!) (ci2c40 core-prim . set-cdr!) (ci2c3f core-prim . set-car!) (ci2c3e core-prim . remove) (ci2c3d core-prim . remv) (ci2c3c core-prim . remp) (ci2c3b core-prim . remq) (ci2c3a core-prim . partition) (ci2c39 core-prim . memv) (ci2c38 core-prim . memq) (ci2c37 core-prim . memp) (ci2c36 core-prim . member) (ci2c35 core-prim . exists) (ci2c34 core-prim . for-all) (ci2c33 core-prim . fold-right) (ci2c32 core-prim . fold-left) (ci2c31 core-prim . find) (ci2c30 core-prim . filter) (ci2c2f core-prim . cons*) (ci2c2e core-prim . assv) (ci2c2d core-prim . assq) (ci2c2c core-prim . assp) (ci2c2b core-prim . assoc) (ci2c2a core-prim . call-with-string-output-port) (ci2c29 core-prim . call-with-port) (ci2c28 core-prim . call-with-bytevector-output-port) (ci2c27 core-prim . bytevector->string) (ci2c26 core-prim . buffer-mode?) (ci2c25 core-prim . binary-port?) (ci2c24 core-prim . with-exception-handler) (ci2c23 core-prim . raise-continuable) (ci2c22 core-prim . raise) (cie36 core-prim . eval) (cie2e core-prim . environment) (ci2c21 core-prim . make-enumeration) (ci2c20 core-prim . enum-set=?) (ci2c1f core-prim . enum-set-universe) (ci2c1e core-prim . enum-set-union) (ci2c1d core-prim . enum-set-subset?) (ci2c1c core-prim . enum-set-projection) (ci2c1b core-prim . enum-set-member?) (ci2c1a core-prim . enum-set-intersection) (ci2c19 core-prim . enum-set-indexer) (ci2c18 core-prim . enum-set-difference) (ci2c17 core-prim . enum-set-constructor) (ci2c16 core-prim . enum-set-complement) (ci2c15 core-prim . enum-set->list) (ci2c14 core-prim . who-condition?) (ci2c13 core-prim . warning?) (ci2c12 core-prim . violation?) (ci2c11 core-prim . undefined-violation?) (ci2c10 core-prim . syntax-violation?) (ci2c0f core-prim . syntax-violation-subform) (ci2c0e core-prim . syntax-violation-form) (cie56 core-prim . syntax-violation) (ci2c0d core-prim . simple-conditions) (ci2c0c core-prim . serious-condition?) (ci2c0b core-prim . non-continuable-violation?) (ci2c0a core-prim . message-condition?) (ci2c09 core-prim . make-who-condition) (ci2c08 core-prim . make-warning) (ci2c07 core-prim . make-violation) (ci2c06 core-prim . make-undefined-violation) (ci2c05 core-prim . make-syntax-violation) (ci2c04 core-prim . make-serious-condition) (ci2c03 core-prim . make-non-continuable-violation) (ci2c02 core-prim . make-message-condition) (ci2c01 core-prim . make-lexical-violation) (ci2c00 core-prim . make-irritants-condition) (ci2bff core-prim . make-implementation-restriction-violation) (ci2bfe core-prim . make-error) (ci2bfd core-prim . make-assertion-violation) (ci2bfc core-prim . lexical-violation?) (ci2bfb core-prim . irritants-condition?) (ci2bfa core-prim . implementation-restriction-violation?) (ci2bf9 core-prim . error?) (ci2bf8 core-prim . condition-who) (ci2bf7 core-prim . condition-predicate) (ci2bf6 core-prim . condition-message) (ci2bf5 core-prim . condition-irritants) (ci2bf4 core-prim . condition-accessor) (ci2bf3 core-prim . condition) (ci2bf2 core-prim . assertion-violation?) (ci2bf1 core-prim . condition?) (ci2bf0 core-prim . utf32->string) (ci2bef core-prim . utf16->string) (ci2bee core-prim . utf8->string) (ci2bed core-prim . uint-list->bytevector) (ci2bec core-prim . u8-list->bytevector) (ci2beb core-prim . string->utf8) (ci2bea core-prim . string->utf32) (ci2be9 core-prim . string->utf16) (ci2be8 core-prim . sint-list->bytevector) (ci2be7 core-prim . native-endianness) (ci2be6 core-prim . bytevector?) (ci2be5 core-prim . bytevector=?) (ci2be4 core-prim . bytevector-uint-set!) (ci2be3 core-prim . bytevector-uint-ref) (ci2be2 core-prim . bytevector-u8-set!) (ci2be1 core-prim . bytevector-u8-ref) (ci2be0 core-prim . bytevector-u64-set!) (ci2bdf core-prim . bytevector-u64-ref) (ci2bde core-prim . bytevector-u64-native-set!) (ci2bdd core-prim . bytevector-u64-native-ref) (ci2bdc core-prim . bytevector-u32-set!) (ci2bdb core-prim . bytevector-u32-ref) (ci2bda core-prim . bytevector-u32-native-set!) (ci2bd9 core-prim . bytevector-u32-native-ref) (ci2bd8 core-prim . bytevector-u16-set!) (ci2bd7 core-prim . bytevector-u16-ref) (ci2bd6 core-prim . bytevector-u16-native-set!) (ci2bd5 core-prim . bytevector-u16-native-ref) (ci2bd4 core-prim . bytevector-sint-set!) (ci2bd3 core-prim . bytevector-sint-ref) (ci2bd2 core-prim . bytevector-s8-set!) (ci2bd1 core-prim . bytevector-s8-ref) (ci2bd0 core-prim . bytevector-s64-set!) (ci2bcf core-prim . bytevector-s64-ref) (ci2bce core-prim . bytevector-s64-native-set!) (ci2bcd core-prim . bytevector-s64-native-ref) (ci2bcc core-prim . bytevector-s32-set!) (ci2bcb core-prim . bytevector-s32-ref) (ci2bca core-prim . bytevector-s32-native-set!) (ci2bc9 core-prim . bytevector-s32-native-ref) (ci2bc8 core-prim . bytevector-s16-set!) (ci2bc7 core-prim . bytevector-s16-ref) (ci2bc6 core-prim . bytevector-s16-native-set!) (ci2bc5 core-prim . bytevector-s16-native-ref) (ci2bc4 core-prim . bytevector-length) (ci2bc3 core-prim . bytevector-ieee-single-ref) (ci2bc2 core-prim . bytevector-ieee-single-set!) (ci2bc1 core-prim . bytevector-ieee-single-native-set!) (ci2bc0 core-prim . bytevector-ieee-single-native-ref) (ci2bbf core-prim . bytevector-ieee-double-set!) (ci2bbe core-prim . bytevector-ieee-double-ref) (ci2bbd core-prim . bytevector-ieee-double-native-set!) (ci2bbc core-prim . bytevector-ieee-double-native-ref) (ci2bbb core-prim . bytevector-fill!) (ci2bba core-prim . bytevector-copy!) (ci2bb9 core-prim . bytevector-copy) (ci2bb8 core-prim . bytevector->uint-list) (ci2bb7 core-prim . bytevector->u8-list) (ci2bb6 core-prim . bytevector->sint-list) (ci2bb5 core-prim . no-nans-violation?) (ci2bb4 core-prim . no-infinities-violation?) (ci2bb3 core-prim . make-no-nans-violation) (ci2bb2 core-prim . make-no-infinities-violation) (ci2bb1 core-prim . real->flonum) (ci2bb0 core-prim . flzero?) (ci2baf core-prim . fltruncate) (ci2bae core-prim . fltan) (ci2bad core-prim . flsqrt) (ci2bac core-prim . flsin) (ci2bab core-prim . flround) (ci2baa core-prim . flpositive?) (ci2ba9 core-prim . flonum?) (ci2ba8 core-prim . flodd?) (ci2ba7 core-prim . flnumerator) (ci2ba6 core-prim . flnegative?) (ci2ba5 core-prim . flnan?) (ci2ba4 core-prim . flmod0) (ci2ba3 core-prim . flmod) (ci2ba2 core-prim . flmin) (ci2ba1 core-prim . flmax) (ci2ba0 core-prim . fllog) (ci2b9f core-prim . flinteger?) (ci2b9e core-prim . flinfinite?) (ci2b9d core-prim . flfloor) (ci2b9c core-prim . flfinite?) (ci2b9b core-prim . flexpt) (ci2b9a core-prim . flexp) (ci2b99 core-prim . fleven?) (ci2b98 core-prim . fldiv0-and-mod0) (ci2b97 core-prim . fldiv0) (ci2b96 core-prim . fldiv-and-mod) (ci2b95 core-prim . fldiv) (ci2b94 core-prim . fldenominator) (ci2b93 core-prim . flcos) (ci2b92 core-prim . flceiling) (ci2b91 core-prim . flatan) (ci2b90 core-prim . flasin) (ci2b8f core-prim . flacos) (ci2b8e core-prim . flabs) (ci2b8d core-prim . fl>?) (ci2b8c core-prim . fl>=?) (ci2b8b core-prim . fl=?) (ci2b8a core-prim . fl<?) (ci2b89 core-prim . fl<=?) (ci2b88 core-prim . fl/) (ci2b87 core-prim . fl-) (ci2b86 core-prim . fl+) (ci2b85 core-prim . fl*) (ci2b84 core-prim . fixnum->flonum) (ci2b83 core-prim . fxzero?) (ci2b82 core-prim . fxxor) (ci2b81 core-prim . fxrotate-bit-field) (ci2b80 core-prim . fxreverse-bit-field) (ci2b7f core-prim . fxpositive?) (ci2b7e core-prim . fxodd?) (ci2b7d core-prim . fxnot) (ci2b7c core-prim . fxnegative?) (ci2b7b core-prim . fxmod0) (ci2b7a core-prim . fxmod) (ci2b79 core-prim . fxmin) (ci2b78 core-prim . fxmax) (ci2b77 core-prim . fxlength) (ci2b76 core-prim . fxior) (ci2b75 core-prim . fxif) (ci2b74 core-prim . fxfirst-bit-set) (ci2b73 core-prim . fxeven?) (ci2b72 core-prim . fxdiv0-and-mod0) (ci2b71 core-prim . fxdiv0) (ci2b70 core-prim . fxdiv-and-mod) (ci2b6f core-prim . fxdiv) (ci2b6e core-prim . fxcopy-bit-field) (ci2b6d core-prim . fxcopy-bit) (ci2b6c core-prim . fxbit-set?) (ci2b6b core-prim . fxbit-field) (ci2b6a core-prim . fxbit-count) (ci2b69 core-prim . fxarithmetic-shift-right) (ci2b68 core-prim . fxarithmetic-shift-left) (ci2b67 core-prim . fxarithmetic-shift) (ci2b66 core-prim . fxand) (ci2b65 core-prim . fx>?) (ci2b64 core-prim . fx>=?) (ci2b63 core-prim . fx=?) (ci2b62 core-prim . fx<?) (ci2b61 core-prim . fx<=?) (ci2b60 core-prim . fx-/carry) (ci2b5f core-prim . fx-) (ci2b5e core-prim . fx+/carry) (ci2b5d core-prim . fx+) (ci2b5c core-prim . fx*/carry) (ci2b5b core-prim . fx*) (ci2b5a core-prim . greatest-fixnum) (ci2b59 core-prim . least-fixnum) (ci2b58 core-prim . fixnum-width) (ci2b57 core-prim . fixnum?) (ci2b56 core-prim . bitwise-rotate-bit-field) (ci2b55 core-prim . bitwise-reverse-bit-field) (ci2b54 core-prim . bitwise-length) (ci2b53 core-prim . bitwise-if) (ci2b52 core-prim . bitwise-first-bit-set) (ci2b51 core-prim . bitwise-copy-bit-field) (ci2b50 core-prim . bitwise-copy-bit) (ci2b4f core-prim . bitwise-bit-set?) (ci2b4e core-prim . bitwise-bit-field) (ci2b4d core-prim . bitwise-bit-count) (ci2b4c core-prim . bitwise-xor) (ci2b4b core-prim . bitwise-ior) (ci2b4a core-prim . bitwise-and) (ci2b49 core-prim . bitwise-not) (ci2b48 core-prim . bitwise-arithmetic-shift-right) (ci2b47 core-prim . bitwise-arithmetic-shift-left) (ci2b46 core-prim . bitwise-arithmetic-shift) (ci2b45 core-prim . zero?) (ci2b44 core-prim . vector?) (ci2b43 core-prim . vector-set!) (ci2b42 core-prim . vector-ref) (ci2b41 core-prim . vector-map) (ci2b40 core-prim . vector-length) (ci2b3f core-prim . vector-for-each) (ci2b3e core-prim . vector-fill!) (ci2b3d core-prim . vector->list) (ci2b3c core-prim . vector) (ci2b3b core-prim . values) (ci2b3a core-prim . truncate) (ci2b39 core-prim . tan) (ci2b38 core-prim . symbol?) (ci2b37 core-prim . symbol=?) (ci2b36 core-prim . symbol->string) (ci2b35 core-prim . substring) (ci2b34 core-prim . string?) (ci2b33 core-prim . string>?) (ci2b32 core-prim . string>=?) (ci2b31 core-prim . string=?) (ci2b30 core-prim . string<?) (ci2b2f core-prim . string<=?) (ci2b2e core-prim . string-ref) (ci2b2d core-prim . string-length) (ci2b2c core-prim . string-for-each) (ci2b2b core-prim . string-copy) (ci2b2a core-prim . string-append) (ci2b29 core-prim . string->symbol) (ci2b28 core-prim . string->number) (ci2b27 core-prim . string->list) (ci2b26 core-prim . string) (ci2b25 core-prim . sqrt) (ci2b24 core-prim . sin) (ci2b23 core-prim . round) (ci2b22 core-prim . reverse) (ci2b21 core-prim . real?) (ci2b20 core-prim . real-valued?) (ci2b1f core-prim . real-part) (ci2b1e core-prim . rationalize) (ci2b1d core-prim . rational?) (ci2b1c core-prim . rational-valued?) (ci2b1b core-prim . procedure?) (ci2b1a core-prim . positive?) (ci2b19 core-prim . pair?) (ci2b18 core-prim . odd?) (ci2b17 core-prim . numerator) (ci2b16 core-prim . number?) (ci2b15 core-prim . number->string) (ci2b14 core-prim . null?) (ci2b13 core-prim . not) (ci2b12 core-prim . negative?) (ci2b11 core-prim . nan?) (ci2b10 core-prim . min) (ci2b0f core-prim . max) (ci2b0e core-prim . map) (ci2b0d core-prim . make-vector) (ci2b0c core-prim . make-string) (ci2b0b core-prim . make-rectangular) (ci2b0a core-prim . make-polar) (ci2b09 core-prim . magnitude) (ci2b08 core-prim . log) (ci2b07 core-prim . list?) (ci2b06 core-prim . list-tail) (ci2b05 core-prim . list-ref) (ci2b04 core-prim . list->vector) (ci2b03 core-prim . list->string) (ci2b02 core-prim . list) (ci2b01 core-prim . length) (ci2b00 core-prim . lcm) (ci2aff core-prim . integer?) (ci2afe core-prim . integer-valued?) (ci2afd core-prim . integer->char) (ci2afc core-prim . infinite?) (ci2afb core-prim . inexact?) (ci2afa core-prim . inexact) (ci2af9 core-prim . imag-part) (ci2af8 core-prim . gcd) (ci2af7 core-prim . for-each) (ci2af6 core-prim . floor) (ci2af5 core-prim . finite?) (ci2af4 core-prim . expt) (ci2af3 core-prim . exp) (ci2af2 core-prim . exact?) (ci2af1 core-prim . exact-integer-sqrt) (ci2af0 core-prim . exact) (ci2aef core-prim . even?) (ci2aee core-prim . error) (ci2aed core-prim . eqv?) (ci2aec core-prim . equal?) (ci2aeb core-prim . eq?) (ci2aea core-prim . dynamic-wind) (ci2ae9 core-prim . div0-and-mod0) (ci2ae8 core-prim . mod0) (ci2ae7 core-prim . div0) (ci2ae6 core-prim . div-and-mod) (ci2ae5 core-prim . mod) (ci2ae4 core-prim . div) (ci2ae3 core-prim . denominator) (ci2ae2 core-prim . cos) (ci2ae1 core-prim . cons) (ci2ae0 core-prim . complex?) (ci2adf core-prim . char?) (ci2ade core-prim . char>?) (ci2add core-prim . char>=?) (ci2adc core-prim . char=?) (ci2adb core-prim . char<?) (ci2ada core-prim . char<=?) (ci2ad9 core-prim . char->integer) (ci2ad8 core-prim . ceiling) (ci2ad7 core-prim . call-with-values) (ci2ad6 core-prim . call/cc) (ci2ad5 core-prim . call-with-current-continuation) (ci2ad4 core-prim . cddddr) (ci2ad3 core-prim . cdddar) (ci2ad2 core-prim . cddadr) (ci2ad1 core-prim . cddaar) (ci2ad0 core-prim . cdaddr) (ci2acf core-prim . cdadar) (ci2ace core-prim . cdaadr) (ci2acd core-prim . cdaaar) (ci2acc core-prim . cadddr) (ci2acb core-prim . caddar) (ci2aca core-prim . cadadr) (ci2ac9 core-prim . cadaar) (ci2ac8 core-prim . caaddr) (ci2ac7 core-prim . caadar) (ci2ac6 core-prim . caaadr) (ci2ac5 core-prim . caaaar) (ci2ac4 core-prim . cdddr) (ci2ac3 core-prim . cddar) (ci2ac2 core-prim . cdadr) (ci2ac1 core-prim . cdaar) (ci2ac0 core-prim . caddr) (ci2abf core-prim . cadar) (ci2abe core-prim . caadr) (ci2abd core-prim . caaar) (ci2abc core-prim . cddr) (ci2abb core-prim . cdar) (ci2aba core-prim . cadr) (ci2ab9 core-prim . caar) (ci2ab8 core-prim . cdr) (ci2ab7 core-prim . car) (ci2ab6 core-prim . boolean?) (ci2ab5 core-prim . boolean=?) (ci2ab4 core-prim . atan) (ci2ab3 core-prim . assertion-violation) (cie50 core-prim . assertion-error) (ci2ab2 core-prim . asin) (ci2ab1 core-prim . apply) (ci2ab0 core-prim . append) (ci2aaf core-prim . angle) (ci2aae core-prim . acos) (ci2aad core-prim . abs) (ci2aac core-prim . /) (ci2aab core-prim . *) (ci2aaa core-prim . -) (ci2aa9 core-prim . +) (ci2aa8 core-prim . >=) (ci2aa7 core-prim . >) (ci2aa6 core-prim . =) (ci2aa5 core-prim . <=) (ci2aa4 core-prim . <) (ci2aa3 core-prim . library) (ci2aa2 $core-rtd &no-nans-rtd &no-nans-rcd) (ci2aa1 $core-rtd &no-infinities-rtd &no-infinities-rcd) (ci2aa0 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (ci2a9f $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (ci2a9e $core-rtd &i/o-port-rtd &i/o-port-rcd) (ci2a9d $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (ci2a9c $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (ci2a9b $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (ci2a9a $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (ci2a99 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (ci2a98 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (ci2a97 $core-rtd &i/o-write-rtd &i/o-write-rcd) (ci2a96 $core-rtd &i/o-read-rtd &i/o-read-rcd) (ci2a95 $core-rtd &i/o-rtd &i/o-rcd) (ci2a94 $core-rtd &undefined-rtd &undefined-rcd) (ci2a93 $core-rtd &syntax-rtd &syntax-rcd) (ci2a92 $core-rtd &lexical-rtd &lexical-rcd) (ci2a91 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (ci2a90 $core-rtd &non-continuable-rtd &non-continuable-rcd) (ci2a8f $core-rtd &who-rtd &who-rcd) (ci2a8e $core-rtd &irritants-rtd &irritants-rcd) (ci2a8d $core-rtd &assertion-rtd &assertion-rcd) (ci2a8c $core-rtd &violation-rtd &violation-rcd) (ci2a8b $core-rtd &error-rtd &error-rcd) (ci2a8a $core-rtd &serious-rtd &serious-rcd) (ci2a89 $core-rtd &warning-rtd &warning-rcd) (ci2a88 $core-rtd &message-rtd &message-rcd) (ci2a87 $core-rtd &condition-rtd &condition-rcd) (ci2a86 macro . define-condition-type) (ci2a85 macro . define-enumeration) (ci2a84 macro . define-record-type) (ci2a83 macro . parent-rtd) (ci2a82 macro . nongenerative) (ci2a81 macro . opaque) (ci2a80 macro . sealed) (ci2a7f macro . protocol) (ci2a7e macro . parent) (ci2a7d macro . immutable) (ci2a7c macro . mutable) (ci2a7b macro . fields) (ci2a7a macro . error-handling-mode) (ci2a79 macro . file-options) (ci2a78 macro . buffer-mode) (ci2a77 macro . eol-style) (ci2a76 macro . guard) (ci2a75 macro . trace-define) (ci2a74 macro . trace-lambda) (ci2a73 macro . unsyntax-splicing) (ci2a72 macro . unsyntax) (ci2a71 macro . unquote-splicing) (ci2a70 macro . unquote) (ci2a6f macro . _) (ci2a6e macro . else) (ci2a6d macro . =>) (ci2a6c macro . ...) (ci2a6b macro . assert) (ci2a6a macro . endianness) (ci2a69 macro . delay) (ci2a68 macro . time) (ci2a67 macro . do) (ci2a66 macro . cond) (ci2a65 macro . let*) (ci2a64 macro . let*-values) (ci2a63 macro . let-values) (ci2a62 macro . identifier-syntax) (ci2a61 macro . with-syntax) (ci2a60 macro . quasisyntax) (ci2a5f macro . quasiquote) (ci2a5e macro . syntax-rules) (ci2a5d macro . include) (ci2a5c macro . define-struct) (ci2a5b core-macro . record-constructor-descriptor) (ci2a5a core-macro . record-type-descriptor) (ci2a59 macro . case) (ci2a58 macro . parameterize) (ci2a57 macro . unless) (ci2a56 macro . when) (ci2a55 core-macro . or) (ci2a54 core-macro . and) (ci2a53 core-macro . if) (ci2a52 core-macro . let) (ci2a51 core-macro . letrec*) (ci2a50 core-macro . letrec) (ci2a4f core-macro . type-descriptor) (ci2a4e core-macro . case-lambda) (ci2a4d core-macro . lambda) (ci2a4c core-macro . syntax) (ci2a4b core-macro . syntax-case) (ci2a4a core-macro . quote) (ci2a49 core-macro . foreign-call) (ci2a48 letrec-syntax) (ci2a47 let-syntax) (ci2a46 set!) (ci2a45 import) (ci2a44 begin) (ci2a43 module) (ci2a42 define-syntax) (ci2a41 define)) values values '#f '#f '#f '#f) (ci98a@ci7d6@install-library 'ci2e00 '(psyntax system $bootstrap) '() '() '() '() '(#796# #797# #798# #799# #800# #801#) '() values values '#f '#f '#f '#f) (ci98a@ci7d6@install-library 'ci2e01 '(mosh) '() '() '() '() '(#798# #799# #1# #802# #804# #2# #805# #806# #3# #807# #808# #809# #810# #811# #815# #816# #817# #4# #818# #819# #820# #821# #822# #6# #7# #8# #67# #855# #856# #857# #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #86# #858# #859# #860# #861# #862# #863# #864# #865# #866# #867# #868# #869# #749# #760#) '() values values '#f '#f '#f '#f) (ci98a@ci7d6@install-library 'ci2e02 '(system) '() '() '() '() '(#803# #812# #813# #814# #823# #5# #824# #825# #826# #7# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #827# #828# #829# #830# #57# #58# #59# #60# #61# #62# #63# #64# #65# #66# #831# #832# #833# #834# #835# #836# #837# #838# #839# #840# #841# #842# #843# #844# #845# #846# #847# #848# #849# #850# #851# #852# #853# #854# #870# #871# #872# #873# #874# #875# #876# #877# #878# #879# #880# #881# #882#) '() values values '#f '#f '#f '#f)))
(begin (set! ci28c4@ref (unspecified)) (set! ci28c6@x* (unspecified)) (set! ci28c8@add-library-path! (unspecified)) (set! ci28ca@parse-and-add-library-path (unspecified)) (set! ci28cc@for-each-with-index (unspecified)) (set! ci28ce@rpad (unspecified)) (set! ci28d0@condition-printer (unspecified)) (set! ci28d2@record->field-alist (unspecified)) (set! ci28d4@map-with-index (unspecified)) (set! ci28d6@repl (unspecified)) (set! ci28d8@trace-printer (unspecified)) (set! ci28da@command-line (unspecified)) (set! ci28dc@local-library-path (unspecified)) (set! ci28de@load/args (unspecified)) (set! ci28e0@load (unspecified)) (set! ci28e2@ironscheme-build (unspecified)) (set! ci28e4@eval-top-level (unspecified)) (set! ci28e6@compile-system-libraries (unspecified)) (set! ci28e8@compile (unspecified)) (set! ci28ea@compile->closure (unspecified)) (set! ci28ec@pre-compile-r6rs-file (unspecified)) (set! ci28ee@load-r6rs-top-level (unspecified)) (set! ci28f0@load-r6rs-top-level-sexp (unspecified)) (set! ci28f2@prefix-inc (unspecified)) (set! ci28f4@prefix-inc! (unspecified)) (set! ci28c4@ref (lambda (ci292f@rtd ci2930@i ci2931@x) (let ((ci2935@val ((record-accessor ci292f@rtd ci2930@i) ci2931@x))) (if (symbol? ci2935@val) (ungensym ci2935@val) ci2935@val)))) (set! ci2a27@ci28c4@ref ci28c4@ref) (set! ci28c6@x* '()) (set! ci2a28@ci28c6@x* ci28c6@x*) (set! ci28c8@add-library-path! (lambda (ci2937@path) (ci97a@ci7b6@library-path (append (ci97a@ci7b6@library-path) (list ci2937@path))))) (set! ci2a29@ci28c8@add-library-path! ci28c8@add-library-path!) (set! ci28ca@parse-and-add-library-path (lambda (ci2939@paths ci293a@message) (letrec* ((ci293e@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((ci293f@t ci2939@paths)) (if ci293f@t ((lambda (ci2941@paths) (for-each (lambda (ci2943@path) (if (file-exists? ci2943@path) (ci28c8@add-library-path! (expand-path ci2943@path)) (format (current-error-port) ci293a@message ci2943@path))) (string-split ci2941@paths ci293e@separator))) ci293f@t) (void)))))) (set! ci2a2a@ci28ca@parse-and-add-library-path ci28ca@parse-and-add-library-path) (set! ci28cc@for-each-with-index (lambda (ci2945@proc ci2946@lst) (letrec ((ci2949@loop (lambda (ci294b@i ci294c@lst) (if (null? ci294c@lst) (if '#f '#f (void)) (begin (ci2945@proc ci294b@i (car ci294c@lst)) (ci2949@loop (+ ci294b@i '1) (cdr ci294c@lst))))))) (ci2949@loop '1 ci2946@lst)))) (set! ci2a2b@ci28cc@for-each-with-index ci28cc@for-each-with-index) (set! ci28ce@rpad (lambda (ci294f@str ci2950@pad ci2951@n) (let ((ci2955@rest (- ci2951@n (string-length (format '"~a" ci294f@str))))) (let ci295b@loop ((ci2957@rest ci2955@rest) (ci2958@ret (format '"~a" ci294f@str))) (if (<= ci2957@rest '0) ci2958@ret (ci295b@loop (- ci2957@rest '1) (string-append ci2958@ret ci2950@pad))))))) (set! ci2a2c@ci28ce@rpad ci28ce@rpad) (set! ci28d0@condition-printer (lambda (ci295d@e ci295e@port) (letrec* ((ci2962@max-condition-len (apply max (map (lambda (ci2973@c) (string-length (symbol->string (record-type-name (record-rtd ci2973@c))))) (simple-conditions ci295d@e))))) (begin (display '" Condition components:\n" ci295e@port) (ci28cc@for-each-with-index (lambda (ci2963@i ci2964@x) (let ((ci2967@rtd (record-rtd ci2964@x)) (ci2968@fields-alist (ci28d2@record->field-alist ci2964@x))) (begin (format ci295e@port '" ~d. ~a" ci2963@i (ci28ce@rpad (symbol->string (record-type-name ci2967@rtd)) '" " ci2962@max-condition-len)) (if (null? ci2968@fields-alist) (newline ci295e@port) (void)) (let ci296f@loop ((ci296b@first '#t) (ci296c@fields-alist ci2968@fields-alist)) (if (null? ci296c@fields-alist) '() (let ((ci2971@field (car ci296c@fields-alist))) (begin (if (not ci296b@first) (display (ci28ce@rpad '"" '" " (+ '4 ci2962@max-condition-len)) ci295e@port) (void)) (display '"       " ci295e@port) (display (car ci2971@field) ci295e@port) (display '": " ci295e@port) (write (cdr ci2971@field) ci295e@port) (newline ci295e@port) (ci296f@loop '#f (cdr ci296c@fields-alist))))))))) (simple-conditions ci295d@e)))))) (set! ci2a2d@ci28d0@condition-printer ci28d0@condition-printer) (set! ci28d2@record->field-alist (lambda (ci2975@r) (letrec* ((ci2978@ref (lambda (ci2983@rtd ci2984@i ci2985@x) (let ((ci2989@val ((record-accessor ci2983@rtd ci2984@i) ci2985@x))) (if (symbol? ci2989@val) (ungensym ci2989@val) ci2989@val))))) (let ci297d@loop ((ci2979@ret '()) (ci297a@rtd (record-rtd ci2975@r))) (if ci297a@rtd (ci297d@loop (append ci2979@ret (ci28d4@map-with-index (lambda (ci297f@i ci2980@field) (cons ci2980@field (ci2978@ref ci297a@rtd ci297f@i ci2975@r))) (vector->list (record-type-field-names ci297a@rtd)))) (record-type-parent ci297a@rtd)) ci2979@ret))))) (set! ci2a2e@ci28d2@record->field-alist ci28d2@record->field-alist) (set! ci28d4@map-with-index (lambda (ci298b@proc ci298c@lst) (let ci2995@loop ((ci298f@i '0) (ci2990@lst ci298c@lst) (ci2991@ret '())) (if (null? ci2990@lst) (reverse ci2991@ret) (ci2995@loop (+ ci298f@i '1) (cdr ci2990@lst) (cons (ci298b@proc ci298f@i (car ci2990@lst)) ci2991@ret)))))) (set! ci2a2f@ci28d4@map-with-index ci28d4@map-with-index) (set! ci28d6@repl (lambda ci2997@x (letrec* ((ci299a@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (ci299d@ci299b) (lambda () (with-exception-handler (lambda (ci299f@e) ((call/cc (lambda (ci29a1@ci299c) (ci299d@ci299b (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? ci299f@e) (ci28d0@condition-printer ci299f@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" ci299f@e))) (ci29a1@ci299c (lambda () (raise-continuable ci299f@e)))))))))) (lambda () (let ci29a7@loop ((ci29a3@line (get-line (current-input-port))) (ci29a4@accum '"")) (letrec* ((ci29aa@parentheses-ok? (lambda (ci29b1@text) (let ci29b9@loop ((ci29b3@chars (string->list ci29b1@text)) (ci29b4@p0 '0) (ci29b5@p1 '0)) (if (null? ci29b3@chars) (= '0 ci29b4@p0 ci29b5@p1) (let ((ci29bb@t (car ci29b3@chars))) (if (memv ci29bb@t '(#\()) (ci29b9@loop (cdr ci29b3@chars) (+ ci29b4@p0 '1) ci29b5@p1) (if (memv ci29bb@t '(#\))) (ci29b9@loop (cdr ci29b3@chars) (- ci29b4@p0 '1) ci29b5@p1) (if (memv ci29bb@t '(#\[)) (ci29b9@loop (cdr ci29b3@chars) ci29b4@p0 (+ ci29b5@p1 '1)) (if (memv ci29bb@t '(#\])) (ci29b9@loop (cdr ci29b3@chars) ci29b4@p0 (- ci29b5@p1 '1)) (ci29b9@loop (cdr ci29b3@chars) ci29b4@p0 ci29b5@p1)))))))))) (ci29ac@eval-string-print (lambda (ci29af@text) (if (not (or (string=? '"\n" ci29af@text) (= '0 (string-length ci29af@text)))) (write (ci28e4@eval-top-level (call-with-port (open-string-input-port ci29af@text) read))) (void))))) (if (eof-object? ci29a3@line) (begin (ci29ac@eval-string-print ci29a4@accum) (exit)) (let ((ci29ad@current (string-append ci29a4@accum ci29a3@line))) (if (ci29aa@parentheses-ok? ci29ad@current) (ci29ac@eval-string-print ci29ad@current) (ci29a7@loop (get-line (current-input-port)) ci29ad@current)))))))))))) (newline) (ci299a@rec))))) (ci299a@rec)))) (set! ci2a30@ci28d6@repl ci28d6@repl) (set! ci28d8@trace-printer (ci6c0@ci59e@make-parameter write)) (set! ci2a31@ci28d8@trace-printer ci28d8@trace-printer) (set! ci28da@command-line (ci6c0@ci59e@make-parameter (get-command-line))) (set! ci2a32@ci28da@command-line ci28da@command-line) (set! ci28dc@local-library-path (lambda (ci29bd@filename) (ci97a@ci7b6@library-path))) (set! ci2a33@ci28dc@local-library-path ci28dc@local-library-path) (set! ci28de@load/args (lambda (ci29bf@filename . ci29c1@args) (begin (apply ci28ee@load-r6rs-top-level ci29bf@filename 'load ci29c1@args) (void)))) (set! ci2a34@ci28de@load/args ci28de@load/args) (set! ci28e0@load (lambda (ci29c3@filename) (begin (apply ci28ee@load-r6rs-top-level ci29c3@filename 'load (ci28da@command-line)) (void)))) (set! ci2a35@ci28e0@load ci28e0@load) (set! ci28e2@ironscheme-build (lambda () (ci28e0@load '"ironscheme-buildscript.ss"))) (set! ci2a36@ci28e2@ironscheme-build ci28e2@ironscheme-build) (set! ci28e4@eval-top-level (lambda (ci29c5@x) (ci28a1@cie37@eval ci29c5@x (ci28b8@cie65@interaction-environment)))) (set! ci2a37@ci28e4@eval-top-level ci28e4@eval-top-level) (set! ci28e6@compile-system-libraries (lambda () (ci28e4@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! ci2a38@ci28e6@compile-system-libraries ci28e6@compile-system-libraries) (set! ci28e8@compile (lambda (ci29c7@filename) (ci28ee@load-r6rs-top-level ci29c7@filename 'compile))) (set! ci2a39@ci28e8@compile ci28e8@compile) (set! ci28ea@compile->closure (lambda (ci29c9@filename) (ci28ee@load-r6rs-top-level ci29c9@filename 'closure))) (set! ci2a3a@ci28ea@compile->closure ci28ea@compile->closure) (set! ci28ec@pre-compile-r6rs-file (lambda (ci29cb@filename) (ci28ee@load-r6rs-top-level ci29cb@filename 'compile))) (set! ci2a3b@ci28ec@pre-compile-r6rs-file ci28ec@pre-compile-r6rs-file) (set! ci28ee@load-r6rs-top-level (lambda (ci29cd@filename ci29ce@how . ci29d1@args) (begin (ci97a@ci7b6@library-path (ci28dc@local-library-path ci29cd@filename)) (let ((ci29d3@x* (with-input-from-file ci29cd@filename (lambda () (let ci29d5@f () (let ((ci29d7@x (ci6b2@ci582@read-annotated))) (if (eof-object? ci29d7@x) '() (cons ci29d7@x (ci29d5@f))))))))) (let ((ci29d9@t ci29ce@how)) (if (memv ci29d9@t '(closure)) (ci28b7@cie63@pre-compile-r6rs-top-level ci29d3@x*) (if (memv ci29d9@t '(load)) (begin (ci28da@command-line (cons ci29cd@filename (car ci29d1@args))) (ci6c1@ci5a0@mosh-cache-dir (create-mosh-cache-dir)) (if (ci6c1@ci5a0@mosh-cache-dir) (gensym-prefix-set! (ci28f4@prefix-inc! (string-append (ci6c1@ci5a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ci29db@file) ((call/cc (lambda (ci29df@ci29dd) (lambda () (with-exception-handler (lambda (ci29e1@c) ((call/cc (lambda (ci29e3@ci29de) (ci29df@ci29dd (lambda () (if '#t '#t (ci29e3@ci29de (lambda () (raise-continuable ci29e1@c)))))))))) (lambda () (delete-file (string-append (ci6c1@ci5a0@mosh-cache-dir) '"/" ci29db@file))))))))) (directory-list (ci6c1@ci5a0@mosh-cache-dir))) (void)) (let ((ci29e5@compiled (ci28b6@cie61@compile-r6rs-top-level ci29d3@x*))) (begin (if (and (ci6c1@ci5a0@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ci97e@ci7be@serialize-all ci6bb@ci594@serialize-library ci717@ci6d0@compile-core-expr) (void)) (ci29e5@compiled)))) (if (memv ci29d9@t '(compile)) (begin (ci28b6@cie61@compile-r6rs-top-level ci29d3@x*) (ci97e@ci7be@serialize-all ci6bb@ci594@serialize-library ci717@ci6d0@compile-core-expr)) (if '#f '#f (void)))))))))) (set! ci2a3c@ci28ee@load-r6rs-top-level ci28ee@load-r6rs-top-level) (set! ci28f0@load-r6rs-top-level-sexp (lambda (ci29e7@import-spec ci29e8@thunk) (let ((ci29f3@ci29ec ci97a@ci7b6@library-path) (ci29f4@ci29ee ci6c1@ci5a0@mosh-cache-dir) (ci29f5@ci29f0 (ci28dc@local-library-path '"")) (ci29f6@ci29f2 (create-mosh-cache-dir))) (let ((ci29fb@swap (lambda () (begin (let ((ci29fd@t (ci29f3@ci29ec))) (begin (ci29f3@ci29ec ci29f5@ci29f0) (set! ci29f5@ci29f0 ci29fd@t))) (let ((ci29ff@t (ci29f4@ci29ee))) (begin (ci29f4@ci29ee ci29f6@ci29f2) (set! ci29f6@ci29f2 ci29ff@t))))))) (dynamic-wind ci29fb@swap (lambda () (begin (if (ci6c1@ci5a0@mosh-cache-dir) (gensym-prefix-set! (ci28f4@prefix-inc! (string-append (ci6c1@ci5a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((ci2a05@ci2a02 ci28da@command-line) (ci2a06@ci2a04 '())) (let ((ci2a09@swap (lambda () (let ((ci2a0b@t (ci2a05@ci2a02))) (begin (ci2a05@ci2a02 ci2a06@ci2a04) (set! ci2a06@ci2a04 ci2a0b@t)))))) (dynamic-wind ci2a09@swap (lambda () ((ci28b6@cie61@compile-r6rs-top-level (list (cons 'import ci29e7@import-spec) (list ci29e8@thunk))))) ci2a09@swap))))) ci29fb@swap))))) (set! ci2a3d@ci28f0@load-r6rs-top-level-sexp ci28f0@load-r6rs-top-level-sexp) (set! ci28f2@prefix-inc (lambda (ci2a0d@prefix-string) (let ((ci2a0f@prefix (symbol->string ci2a0d@prefix-string))) (let ((ci2a11@len (string-length ci2a0f@prefix))) (let ci2a19@loop ((ci2a13@i (- ci2a11@len '1)) (ci2a14@carry? '#t) (ci2a15@accum '())) (if (< ci2a13@i '0) (string->symbol (list->string (if ci2a14@carry? (cons '#\a ci2a15@accum) ci2a15@accum))) (if ci2a14@carry? (let ((ci2a1b@next-integer (+ '1 (char->integer (string-ref ci2a0f@prefix ci2a13@i))))) (if (= ci2a1b@next-integer '123) (ci2a19@loop (- ci2a13@i '1) '#f (cons '#\A ci2a15@accum)) (if (= ci2a1b@next-integer '91) (ci2a19@loop (- ci2a13@i '1) '#t (cons '#\a ci2a15@accum)) (ci2a19@loop (- ci2a13@i '1) '#f (cons (integer->char ci2a1b@next-integer) ci2a15@accum))))) (ci2a19@loop (- ci2a13@i '1) '#f (cons (string-ref ci2a0f@prefix ci2a13@i) ci2a15@accum))))))))) (set! ci2a3e@ci28f2@prefix-inc ci28f2@prefix-inc) (set! ci28f4@prefix-inc! (lambda (ci2a1d@file) (begin (if (not (file-exists? ci2a1d@file)) (call-with-output-file ci2a1d@file (lambda (ci2a1f@port) (write 'd ci2a1f@port))) (void)) (let ((ci2a21@prefix (call-with-input-file ci2a1d@file read))) (if (main-vm?) (let ((ci2a23@next-prefix (ci28f2@prefix-inc ci2a21@prefix))) (begin (call-with-port (open-file-output-port ci2a1d@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (ci2a25@port) (write ci2a23@next-prefix ci2a25@port))) ci2a21@prefix)) ci2a21@prefix))))) (set! ci2a3f@ci28f4@prefix-inc! ci28f4@prefix-inc!) (begin (ci97f@ci7c0@current-precompiled-library-loader ci6bc@ci596@load-serialized-library) (set-symbol-value! 'load ci28e0@load) (set-symbol-value! 'pre-compile-r6rs-file ci28ec@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs ci28e4@eval-top-level) (set-symbol-value! 'int-env-syms ci2898@cie25@interaction-environment-symbols) (set-symbol-value! 'expanded2core ci716@ci6ce@expanded->core) (set-symbol-value! 'trace-printer ci28d8@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (ci28f5@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list ci28f5@c))))) (ci28ca@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (ci28ca@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (ci28c8@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (ci28c8@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (ci28c8@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((ci28f7@prefix (lambda (ci28f9@ext ci28fa@ls) (append (map (lambda (ci28fd@x) (string-append ci28f9@ext ci28fd@x)) ci28fa@ls) ci28fa@ls)))) (ci97b@ci7b8@library-extensions (ci28f7@prefix '".mosh" (ci97b@ci7b8@library-extensions)))) (current-exception-handler (lambda (ci28ff@c) (begin (if (condition? ci28ff@c) (ci28d0@condition-printer ci28ff@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" ci28ff@c)) ci28ff@c))) (if ((call/cc (lambda (ci2903@ci2901) (lambda () (with-exception-handler (lambda (ci2905@c) ((call/cc (lambda (ci2907@ci2902) (ci2903@ci2901 (lambda () (if '#t '#f (ci2907@ci2902 (lambda () (raise-continuable ci2905@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (ci28f0@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (ci28da@command-line)) (let ((ci2911@ci290a ci28da@command-line) (ci2912@ci290c ci6c1@ci5a0@mosh-cache-dir) (ci2913@ci290e '()) (ci2914@ci2910 (create-mosh-cache-dir))) (let ((ci2919@swap (lambda () (begin (let ((ci291b@t (ci2911@ci290a))) (begin (ci2911@ci290a ci2913@ci290e) (set! ci2913@ci290e ci291b@t))) (let ((ci291d@t (ci2912@ci290c))) (begin (ci2912@ci290c ci2914@ci2910) (set! ci2914@ci2910 ci291d@t))))))) (dynamic-wind ci2919@swap (lambda () (begin (if (ci6c1@ci5a0@mosh-cache-dir) (gensym-prefix-set! (ci28f4@prefix-inc! (string-append (ci6c1@ci5a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (ci28d6@repl))) ci2919@swap))) (begin (ci97a@ci7b6@library-path (ci28dc@local-library-path (car (ci28da@command-line)))) (set! ci28c6@x* (with-input-from-file (car (ci28da@command-line)) (lambda () (let ci291f@f () (let ((ci2921@x (ci6b2@ci582@read-annotated))) (if (eof-object? ci2921@x) '() (cons ci2921@x (ci291f@f)))))))) (ci28da@command-line (cons (car (ci28da@command-line)) (cdr (ci28da@command-line)))) (ci6c1@ci5a0@mosh-cache-dir (create-mosh-cache-dir)) (if (ci6c1@ci5a0@mosh-cache-dir) (gensym-prefix-set! (ci28f4@prefix-inc! (string-append (ci6c1@ci5a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ci2923@file) ((call/cc (lambda (ci2927@ci2925) (lambda () (with-exception-handler (lambda (ci2929@c) ((call/cc (lambda (ci292b@ci2926) (ci2927@ci2925 (lambda () (if '#t '#t (ci292b@ci2926 (lambda () (raise-continuable ci2929@c)))))))))) (lambda () (delete-file (string-append (ci6c1@ci5a0@mosh-cache-dir) '"/" ci2923@file))))))))) (directory-list (ci6c1@ci5a0@mosh-cache-dir))) (void)) (let ((ci292d@compiled (ci28b6@cie61@compile-r6rs-top-level ci28c6@x*))) (begin (if (and (ci6c1@ci5a0@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ci97e@ci7be@serialize-all ci6bb@ci594@serialize-library ci717@ci6d0@compile-core-expr) (void)) (ci292d@compiled))))))))
