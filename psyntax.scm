;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! ap2902@library-file-path->cache-path (unspecified)) (set! ap2904@read-annotated (unspecified)) (set! ap2906@annotation-stripped (unspecified)) (set! ap2908@annotation? (unspecified)) (set! ap290a@annotation-source (unspecified)) (set! ap290c@annotation-expression (unspecified)) (set! ap290e@scm->fasl (unspecified)) (set! ap2910@fasl-save (unspecified)) (set! ap2912@fasl-load (unspecified)) (set! ap2914@verbose? (unspecified)) (set! ap2916@serialize-library (unspecified)) (set! ap2918@load-serialized-library (unspecified)) (set! ap291a@make-record-printer (unspecified)) (set! ap291c@compile-core (unspecified)) (set! ap291e@read-library-source-file (unspecified)) (set! ap2920@make-parameter (unspecified)) (set! ap2922@mosh-cache-dir (unspecified)) (set! ap29b8@file-options-spec (unspecified)) (set! ap2902@library-file-path->cache-path (lambda (ap29b9@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ap29bf@ap29bc ap29c0@ap29be) (let ((ap29c3@extract ap29c0@ap29be) (ap29c4@p ap29bf@ap29bc)) (letrec* ((ap29c8@display-hex (lambda (ap29d1@n) (if (<= '0 ap29d1@n '9) (display ap29d1@n ap29c4@p) (display (integer->char (+ (char->integer '#\a) (- ap29d1@n '10))) ap29c4@p))))) (begin (let ap29cb@f ((ap29c9@ls (string-split ap29b9@x '#\/))) (if (not (null? ap29c9@ls)) (begin (display '"_" ap29c4@p) (for-each (lambda (ap29cd@c) (if (or (char<=? '#\a ap29cd@c '#\z) (char<=? '#\A ap29cd@c '#\Z) (char<=? '#\0 ap29cd@c '#\9) (memv ap29cd@c '(#\- #\. #\_ #\~))) (display ap29cd@c ap29c4@p) (begin (display '"%" ap29c4@p) (let ((ap29cf@n (char->integer ap29cd@c))) (begin (ap29c8@display-hex (quotient ap29cf@n '16)) (ap29c8@display-hex (remainder ap29cf@n '16))))))) (string->list (car ap29c9@ls))) (ap29cb@f (cdr ap29c9@ls))) (void))) (ap29c3@extract)))))))) (set! ap2a33@ap2902@library-file-path->cache-path ap2902@library-file-path->cache-path) (set! ap2904@read-annotated read) (set! ap2a34@ap2904@read-annotated ap2904@read-annotated) (set! ap2906@annotation-stripped (lambda (ap29d3@x) (ap290c@annotation-expression ap29d3@x))) (set! ap2a35@ap2906@annotation-stripped ap2906@annotation-stripped) (set! ap2908@annotation? (lambda (ap29d5@x) (source-info ap29d5@x))) (set! ap2a36@ap2908@annotation? ap2908@annotation?) (set! ap290a@annotation-source (lambda (ap29d7@x) (source-info ap29d7@x))) (set! ap2a37@ap290a@annotation-source ap290a@annotation-source) (set! ap290c@annotation-expression (lambda (ap29d9@x) (if (pair? ap29d9@x) (cons (car ap29d9@x) (cdr ap29d9@x)) (if (procedure? ap29d9@x) (set-source-info! ap29d9@x '#f) ap29d9@x)))) (set! ap2a38@ap290c@annotation-expression ap290c@annotation-expression) (set! ap290e@scm->fasl (lambda (ap29db@filename) (string-append (ap2922@mosh-cache-dir) '"/" (ap2902@library-file-path->cache-path ap29db@filename) '".mosh-fasl"))) (set! ap2a39@ap290e@scm->fasl ap290e@scm->fasl) (set! ap2910@fasl-save (lambda (ap29dd@filename ap29de@obj) (call-with-port (open-file-output-port ap29dd@filename) (lambda (ap29e1@port) ((symbol-value 'fasl-write!) ap29de@obj ap29e1@port))))) (set! ap2a3a@ap2910@fasl-save ap2910@fasl-save) (set! ap2912@fasl-load (lambda (ap29e3@filename) (call-with-port (open-file-input-port ap29e3@filename) (symbol-value 'fasl-read!)))) (set! ap2a3b@ap2912@fasl-load ap2912@fasl-load) (set! ap2914@verbose? (symbol-value '%verbose)) (set! ap2a3c@ap2914@verbose? ap2914@verbose?) (set! ap2916@serialize-library (lambda (ap29e5@filename ap29e6@obj) (begin (if ap2914@verbose? (format (current-error-port) '"serialize-library ~a\n..." ap29e5@filename) (void)) (let ((ap29e9@expanded2core (symbol-value 'expanded2core))) (let ((ap29eb@compile (symbol-value 'compile-w/o-halt))) (let ((ap29ed@code ap29e6@obj)) (let ((ap29ef@pivot (cddddr (cddddr ap29ed@code)))) (let ((ap29f1@visit (ap29eb@compile (ap29e9@expanded2core (car ap29ef@pivot))))) (begin (set-car! ap29ef@pivot ap29f1@visit) (let ((ap29f3@pivot (cdr ap29ef@pivot))) (let ((ap29f5@invoke (ap29eb@compile (ap29e9@expanded2core (car ap29f3@pivot))))) (set-car! ap29f3@pivot ap29f5@invoke))))))))) (let ((ap29f7@fasl-file (ap290e@scm->fasl ap29e5@filename))) (begin (if (file-exists? ap29f7@fasl-file) (delete-file ap29f7@fasl-file) (void)) ((call/cc (lambda (ap29fb@ap29f9) (lambda () (with-exception-handler (lambda (ap29fd@c) ((call/cc (lambda (ap29ff@ap29fa) (ap29fb@ap29f9 (lambda () (if '#t (begin (if ap2914@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" ap29e5@filename) (void)) (if (file-exists? ap29f7@fasl-file) (delete-file ap29f7@fasl-file) (void)) '#f) (ap29ff@ap29fa (lambda () (raise-continuable ap29fd@c)))))))))) (lambda () (ap2910@fasl-save ap29f7@fasl-file ap29e6@obj)))))))))))) (set! ap2a3d@ap2916@serialize-library ap2916@serialize-library) (set! ap2918@load-serialized-library (lambda (ap2a01@filename ap2a02@obj) (and (ap2922@mosh-cache-dir) (let ((ap2a05@fasl-file (ap290e@scm->fasl ap2a01@filename))) (if (and (file-exists? ap2a05@fasl-file) ((symbol-value 'file-newer?) ap2a05@fasl-file ap2a01@filename)) (let ((ap2a07@expanded2core (symbol-value 'expanded2core))) (let ((ap2a09@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((ap2a0b@code (ap2912@fasl-load ap2a05@fasl-file))) (let ((ap2a0d@pivot (cddddr (cddddr ap2a0b@code)))) (let ((ap2a0f@visit (car ap2a0d@pivot))) (let ((ap2a11@visit-proc (lambda () (ap2a09@eval-compiled-core ap2a0f@visit)))) (begin (set-car! ap2a0d@pivot ap2a11@visit-proc) (let ((ap2a13@pivot (cdr ap2a0d@pivot))) (let ((ap2a15@invoke (car ap2a13@pivot))) (begin (set-car! ap2a13@pivot (lambda () (ap2a09@eval-compiled-core ap2a15@invoke))) (apply ap2a02@obj ap2a0b@code))))))))))) '#f))))) (set! ap2a3e@ap2918@load-serialized-library ap2918@load-serialized-library) (set! ap291a@make-record-printer (lambda (ap2a17@name ap2a18@printer) (lambda ap2a1b@x (begin (display '"record printer") (for-each display ap2a1b@x))))) (set! ap2a3f@ap291a@make-record-printer ap291a@make-record-printer) (set! ap291c@compile-core (lambda ap2a1d@x (apply error 'comile-core '"not implementated" ap2a1d@x))) (set! ap2a40@ap291c@compile-core ap291c@compile-core) (set! ap291e@read-library-source-file (lambda (ap2a1f@file-name) (with-input-from-file ap2a1f@file-name ap2904@read-annotated))) (set! ap2a41@ap291e@read-library-source-file ap291e@read-library-source-file) (set! ap2920@make-parameter (lambda ap2a2f (let ((ap2a30 (length ap2a2f))) (if (= ap2a30 '1) (apply (lambda (ap2a21@x) (ap2920@make-parameter ap2a21@x (lambda (ap2a23@x) ap2a23@x))) ap2a2f) (if (= ap2a30 '2) (apply (lambda (ap2a25@x ap2a26@fender) (let ((ap2a29@x (ap2a26@fender ap2a25@x))) (lambda ap2a2d (let ((ap2a2e (length ap2a2d))) (if (= ap2a2e '0) (apply (lambda () ap2a29@x) ap2a2d) (if (= ap2a2e '1) (apply (lambda (ap2a2b@v) (set! ap2a29@x (ap2a26@fender ap2a2b@v))) ap2a2d) (error 'apply '"invalid arg count"))))))) ap2a2f) (error 'apply '"invalid arg count")))))) (set! ap2a42@ap2920@make-parameter ap2920@make-parameter) (set! ap2922@mosh-cache-dir (ap2920@make-parameter '#f)) (set! ap2a43@ap2922@mosh-cache-dir ap2922@mosh-cache-dir) (set! ap29b8@file-options-spec (lambda (ap2a31@x) ap2a31@x)) (set! ap2a44@ap29b8@file-options-spec ap29b8@file-options-spec) (void))
(begin (set! ap2a4a@current-primitive-locations (unspecified)) (set! ap2a4c@mutable? (unspecified)) (set! ap2a4e@rewriter (unspecified)) (set! ap2a50@expanded->core (unspecified)) (set! ap2a52@compile-core-expr (unspecified)) (set! ap2a54@pretty-print (unspecified)) (set! ap2a56@compile-core-expr-to-port (unspecified)) (set! ap2a4a@current-primitive-locations (ap2a42@ap2920@make-parameter (lambda (ap2a57@x) '#f) (lambda (ap2a59@p) ap2a59@p))) (set! ap2a95@ap2a4a@current-primitive-locations ap2a4a@current-primitive-locations) (set! ap2a4c@mutable? (lambda (ap2a5b@x) (or (pair? ap2a5b@x) (vector? ap2a5b@x) (hashtable? ap2a5b@x)))) (set! ap2a96@ap2a4c@mutable? ap2a4c@mutable?) (set! ap2a4e@rewriter (lambda (ap2a5d@quote-hack?) (letrec* ((ap2a60@f (lambda (ap2a61@x) (if (pair? ap2a61@x) (let ((ap2a63@t (car ap2a61@x))) (if (memv ap2a63@t '(quote)) (if (and ap2a5d@quote-hack? (ap2a4c@mutable? (cadr ap2a61@x))) (let ((ap2a65@g (gensym))) (begin (set-symbol-value! ap2a65@g (cadr ap2a61@x)) ap2a65@g)) ap2a61@x) (if (memv ap2a63@t '(case-lambda)) (cons 'case-lambda (map (lambda (ap2a67@x) (cons (car ap2a67@x) (map ap2a60@f (cdr ap2a67@x)))) (cdr ap2a61@x))) (if (memv ap2a63@t '(lambda)) (cons* 'lambda (cadr ap2a61@x) (map ap2a60@f (cddr ap2a61@x))) (if (memv ap2a63@t '(letrec)) (let ((ap2a69@bindings (cadr ap2a61@x)) (ap2a6a@body* (cddr ap2a61@x))) (let ((ap2a6d@lhs* (map car ap2a69@bindings)) (ap2a6e@rhs* (map cadr ap2a69@bindings))) (cons* 'letrec (map list ap2a6d@lhs* (map ap2a60@f ap2a6e@rhs*)) (map ap2a60@f ap2a6a@body*)))) (if (memv ap2a63@t '(letrec*)) (let ((ap2a71@bindings (cadr ap2a61@x)) (ap2a72@body* (cddr ap2a61@x))) (let ((ap2a75@lhs* (map car ap2a71@bindings)) (ap2a76@rhs* (map cadr ap2a71@bindings))) (cons* 'letrec* (map list ap2a75@lhs* (map ap2a60@f ap2a76@rhs*)) (map ap2a60@f ap2a72@body*)))) (if (memv ap2a63@t '(library-letrec*)) (let ((ap2a79@name (cadr ap2a61@x)) (ap2a7a@x (cdr ap2a61@x))) (let ((ap2a7d@bindings (cadr ap2a7a@x)) (ap2a7e@body* (cddr ap2a7a@x))) (let ((ap2a81@lhs* (map car ap2a7d@bindings)) (ap2a82@lhs** (map cadr ap2a7d@bindings)) (ap2a83@rhs* (map caddr ap2a7d@bindings))) (cons* 'library-letrec* ap2a79@name (map list ap2a81@lhs* ap2a82@lhs** (map ap2a60@f ap2a83@rhs*)) (map ap2a60@f ap2a7e@body*))))) (if (memv ap2a63@t '(begin)) (cons 'begin (map ap2a60@f (cdr ap2a61@x))) (if (memv ap2a63@t '(set!)) (list 'set! (cadr ap2a61@x) (ap2a60@f (caddr ap2a61@x))) (if (memv ap2a63@t '(primitive)) (let ((ap2a87@op (cadr ap2a61@x))) (let ((ap2a89@t ((ap2a4a@current-primitive-locations) ap2a87@op))) (if ap2a89@t ((lambda (ap2a8b@loc) ap2a8b@loc) ap2a89@t) ap2a87@op))) (if (memv ap2a63@t '(define)) ap2a61@x (if (list? ap2a61@x) (map ap2a60@f ap2a61@x) (error 'rewrite '"invalid form ~s ~s" ap2a61@x (list? ap2a61@x)))))))))))))) ap2a61@x)))) ap2a60@f))) (set! ap2a97@ap2a4e@rewriter ap2a4e@rewriter) (set! ap2a50@expanded->core (lambda (ap2a8d@x) ((ap2a4e@rewriter '#f) ap2a8d@x))) (set! ap2a98@ap2a50@expanded->core ap2a50@expanded->core) (set! ap2a52@compile-core-expr (lambda (ap2a8f@x) ((ap2a4e@rewriter '#f) ap2a8f@x))) (set! ap2a99@ap2a52@compile-core-expr ap2a52@compile-core-expr) (set! ap2a54@pretty-print write) (set! ap2a9a@ap2a54@pretty-print ap2a54@pretty-print) (set! ap2a56@compile-core-expr-to-port (lambda (ap2a91@x ap2a92@p) (ap2a54@pretty-print ((ap2a4e@rewriter '#f) ap2a91@x) ap2a92@p))) (set! ap2a9b@ap2a56@compile-core-expr-to-port ap2a56@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! ap2aea@make-collection (unspecified)) (set! ap2aec@current-library-collection (unspecified)) (set! ap2aee@rp (unspecified)) (set! ap2af8@library? (unspecified)) (set! ap2afa@library-id (unspecified)) (set! ap2afc@set-library-id! (unspecified)) (set! ap2afe@library-name (unspecified)) (set! ap2b00@set-library-name! (unspecified)) (set! ap2b02@library-version (unspecified)) (set! ap2b04@set-library-version! (unspecified)) (set! ap2b06@library-imp* (unspecified)) (set! ap2b08@set-library-imp*! (unspecified)) (set! ap2b0a@library-vis* (unspecified)) (set! ap2b0c@set-library-vis*! (unspecified)) (set! ap2b0e@library-inv* (unspecified)) (set! ap2b10@set-library-inv*! (unspecified)) (set! ap2b12@library-subst (unspecified)) (set! ap2b14@set-library-subst! (unspecified)) (set! ap2b16@library-env (unspecified)) (set! ap2b18@set-library-env! (unspecified)) (set! ap2b1a@library-visit-state (unspecified)) (set! ap2b1c@set-library-visit-state! (unspecified)) (set! ap2b1e@library-invoke-state (unspecified)) (set! ap2b20@set-library-invoke-state! (unspecified)) (set! ap2b22@library-visit-code (unspecified)) (set! ap2b24@set-library-visit-code! (unspecified)) (set! ap2b26@library-invoke-code (unspecified)) (set! ap2b28@set-library-invoke-code! (unspecified)) (set! ap2b2a@library-visible? (unspecified)) (set! ap2b2c@set-library-visible?! (unspecified)) (set! ap2b2e@library-source-file-name (unspecified)) (set! ap2b30@set-library-source-file-name! (unspecified)) (set! ap2b32@dummy (unspecified)) (set! ap2b34@find-dependencies (unspecified)) (set! ap2b36@find-library-by (unspecified)) (set! ap2b38@library-path (unspecified)) (set! ap2b3a@library-extensions (unspecified)) (set! ap2b3c@library-name->file-name (unspecified)) (set! ap2b3e@file-locator (unspecified)) (set! ap2b40@serialize-all (unspecified)) (set! ap2b42@current-precompiled-library-loader (unspecified)) (set! ap2b44@try-load-from-file (unspecified)) (set! ap2b46@library-loader (unspecified)) (set! ap2b48@current-library-expander (unspecified)) (set! ap2b4a@external-pending-libraries (unspecified)) (set! ap2b4c@find-external-library (unspecified)) (set! ap2b4e@find-library-by-name (unspecified)) (set! ap2b50@library-exists? (unspecified)) (set! ap2b52@find-library-by-spec/die (unspecified)) (set! ap2b54@label->binding-table (unspecified)) (set! ap2b56@install-library-record (unspecified)) (set! ap2b58@install-library (unspecified)) (set! ap2b5a@imported-label->binding (unspecified)) (set! ap2b5c@invoke-library (unspecified)) (set! ap2b5e@visit-library (unspecified)) (set! ap2b60@invoke-library-by-spec (unspecified)) (set! ap2b62@installed-libraries (unspecified)) (set! ap2b64@library-spec (unspecified)) (set! ap2aea@make-collection (lambda () (let ((ap2b65@set '())) (letrec* ((ap2b68@set-cons (lambda (ap2b6d@x ap2b6e@ls) (if (memq ap2b6d@x ap2b6e@ls) ap2b6e@ls (cons ap2b6d@x ap2b6e@ls))))) (lambda ap2b6b (let ((ap2b6c (length ap2b6b))) (if (= ap2b6c '0) (apply (lambda () ap2b65@set) ap2b6b) (if (= ap2b6c '1) (apply (lambda (ap2b69@x) (set! ap2b65@set (ap2b68@set-cons ap2b69@x ap2b65@set))) ap2b6b) (error 'apply '"invalid arg count"))))))))) (set! ap2cd9@ap2aea@make-collection ap2aea@make-collection) (set! ap2aec@current-library-collection (ap2a42@ap2920@make-parameter (ap2aea@make-collection) (lambda (ap2b71@x) (begin (if (not (procedure? ap2b71@x)) (assertion-violation 'current-library-collection '"not a procedure" ap2b71@x) (void)) ap2b71@x)))) (set! ap2cda@ap2aec@current-library-collection ap2aec@current-library-collection) (set! ap2aee@rp (ap2a3f@ap291a@make-record-printer 'library (lambda (ap2b73@x ap2b74@p ap2b75@wr) (begin (if (not (ap2af8@library? ap2b73@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (ap2b02@library-version ap2b73@x)) (ap2afe@library-name ap2b73@x) (append (ap2afe@library-name ap2b73@x) (list (ap2b02@library-version ap2b73@x))))) ap2b74@p))))) (set! ap2cdb@ap2aee@rp ap2aee@rp) (set! ap2af8@library? (lambda (ap2b79@x) (and (simple-struct? ap2b79@x) (eq? (simple-struct-name ap2b79@x) 'library)))) (set! ap2cdc@ap2af8@library? ap2af8@library?) (set! ap2afa@library-id (lambda (ap2b7b@x) (simple-struct-ref ap2b7b@x '0))) (set! ap2cdd@ap2afa@library-id ap2afa@library-id) (set! ap2afc@set-library-id! (lambda (ap2b7d@x ap2b7e@val) (simple-struct-set! ap2b7d@x '0 ap2b7e@val))) (set! ap2cde@ap2afc@set-library-id! ap2afc@set-library-id!) (set! ap2afe@library-name (lambda (ap2b81@x) (simple-struct-ref ap2b81@x '1))) (set! ap2cdf@ap2afe@library-name ap2afe@library-name) (set! ap2b00@set-library-name! (lambda (ap2b83@x ap2b84@val) (simple-struct-set! ap2b83@x '1 ap2b84@val))) (set! ap2ce0@ap2b00@set-library-name! ap2b00@set-library-name!) (set! ap2b02@library-version (lambda (ap2b87@x) (simple-struct-ref ap2b87@x '2))) (set! ap2ce1@ap2b02@library-version ap2b02@library-version) (set! ap2b04@set-library-version! (lambda (ap2b89@x ap2b8a@val) (simple-struct-set! ap2b89@x '2 ap2b8a@val))) (set! ap2ce2@ap2b04@set-library-version! ap2b04@set-library-version!) (set! ap2b06@library-imp* (lambda (ap2b8d@x) (simple-struct-ref ap2b8d@x '3))) (set! ap2ce3@ap2b06@library-imp* ap2b06@library-imp*) (set! ap2b08@set-library-imp*! (lambda (ap2b8f@x ap2b90@val) (simple-struct-set! ap2b8f@x '3 ap2b90@val))) (set! ap2ce4@ap2b08@set-library-imp*! ap2b08@set-library-imp*!) (set! ap2b0a@library-vis* (lambda (ap2b93@x) (simple-struct-ref ap2b93@x '4))) (set! ap2ce5@ap2b0a@library-vis* ap2b0a@library-vis*) (set! ap2b0c@set-library-vis*! (lambda (ap2b95@x ap2b96@val) (simple-struct-set! ap2b95@x '4 ap2b96@val))) (set! ap2ce6@ap2b0c@set-library-vis*! ap2b0c@set-library-vis*!) (set! ap2b0e@library-inv* (lambda (ap2b99@x) (simple-struct-ref ap2b99@x '5))) (set! ap2ce7@ap2b0e@library-inv* ap2b0e@library-inv*) (set! ap2b10@set-library-inv*! (lambda (ap2b9b@x ap2b9c@val) (simple-struct-set! ap2b9b@x '5 ap2b9c@val))) (set! ap2ce8@ap2b10@set-library-inv*! ap2b10@set-library-inv*!) (set! ap2b12@library-subst (lambda (ap2b9f@x) (simple-struct-ref ap2b9f@x '6))) (set! ap2ce9@ap2b12@library-subst ap2b12@library-subst) (set! ap2b14@set-library-subst! (lambda (ap2ba1@x ap2ba2@val) (simple-struct-set! ap2ba1@x '6 ap2ba2@val))) (set! ap2cea@ap2b14@set-library-subst! ap2b14@set-library-subst!) (set! ap2b16@library-env (lambda (ap2ba5@x) (simple-struct-ref ap2ba5@x '7))) (set! ap2ceb@ap2b16@library-env ap2b16@library-env) (set! ap2b18@set-library-env! (lambda (ap2ba7@x ap2ba8@val) (simple-struct-set! ap2ba7@x '7 ap2ba8@val))) (set! ap2cec@ap2b18@set-library-env! ap2b18@set-library-env!) (set! ap2b1a@library-visit-state (lambda (ap2bab@x) (simple-struct-ref ap2bab@x '8))) (set! ap2ced@ap2b1a@library-visit-state ap2b1a@library-visit-state) (set! ap2b1c@set-library-visit-state! (lambda (ap2bad@x ap2bae@val) (simple-struct-set! ap2bad@x '8 ap2bae@val))) (set! ap2cee@ap2b1c@set-library-visit-state! ap2b1c@set-library-visit-state!) (set! ap2b1e@library-invoke-state (lambda (ap2bb1@x) (simple-struct-ref ap2bb1@x '9))) (set! ap2cef@ap2b1e@library-invoke-state ap2b1e@library-invoke-state) (set! ap2b20@set-library-invoke-state! (lambda (ap2bb3@x ap2bb4@val) (simple-struct-set! ap2bb3@x '9 ap2bb4@val))) (set! ap2cf0@ap2b20@set-library-invoke-state! ap2b20@set-library-invoke-state!) (set! ap2b22@library-visit-code (lambda (ap2bb7@x) (simple-struct-ref ap2bb7@x '10))) (set! ap2cf1@ap2b22@library-visit-code ap2b22@library-visit-code) (set! ap2b24@set-library-visit-code! (lambda (ap2bb9@x ap2bba@val) (simple-struct-set! ap2bb9@x '10 ap2bba@val))) (set! ap2cf2@ap2b24@set-library-visit-code! ap2b24@set-library-visit-code!) (set! ap2b26@library-invoke-code (lambda (ap2bbd@x) (simple-struct-ref ap2bbd@x '11))) (set! ap2cf3@ap2b26@library-invoke-code ap2b26@library-invoke-code) (set! ap2b28@set-library-invoke-code! (lambda (ap2bbf@x ap2bc0@val) (simple-struct-set! ap2bbf@x '11 ap2bc0@val))) (set! ap2cf4@ap2b28@set-library-invoke-code! ap2b28@set-library-invoke-code!) (set! ap2b2a@library-visible? (lambda (ap2bc3@x) (simple-struct-ref ap2bc3@x '12))) (set! ap2cf5@ap2b2a@library-visible? ap2b2a@library-visible?) (set! ap2b2c@set-library-visible?! (lambda (ap2bc5@x ap2bc6@val) (simple-struct-set! ap2bc5@x '12 ap2bc6@val))) (set! ap2cf6@ap2b2c@set-library-visible?! ap2b2c@set-library-visible?!) (set! ap2b2e@library-source-file-name (lambda (ap2bc9@x) (simple-struct-ref ap2bc9@x '13))) (set! ap2cf7@ap2b2e@library-source-file-name ap2b2e@library-source-file-name) (set! ap2b30@set-library-source-file-name! (lambda (ap2bcb@x ap2bcc@val) (simple-struct-set! ap2bcb@x '13 ap2bcc@val))) (set! ap2cf8@ap2b30@set-library-source-file-name! ap2b30@set-library-source-file-name!) (set! ap2b32@dummy '3) (set! ap2cf9@ap2b32@dummy ap2b32@dummy) (set! ap2b34@find-dependencies (lambda (ap2bcf@ls) (if (null? ap2bcf@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! ap2cfa@ap2b34@find-dependencies ap2b34@find-dependencies) (set! ap2b36@find-library-by (lambda (ap2bd1@pred) (let ap2bd5@f ((ap2bd3@ls ((ap2aec@current-library-collection)))) (if (null? ap2bd3@ls) '#f (if (ap2bd1@pred (car ap2bd3@ls)) (car ap2bd3@ls) (ap2bd5@f (cdr ap2bd3@ls))))))) (set! ap2cfb@ap2b36@find-library-by ap2b36@find-library-by) (set! ap2b38@library-path (ap2a42@ap2920@make-parameter '(".") (lambda (ap2bd7@x) (if (and (list? ap2bd7@x) (for-all string? ap2bd7@x)) (map (lambda (ap2bd9@x) ap2bd9@x) ap2bd7@x) (assertion-violation 'library-path '"not a list of strings" ap2bd7@x))))) (set! ap2cfc@ap2b38@library-path ap2b38@library-path) (set! ap2b3a@library-extensions (ap2a42@ap2920@make-parameter '(".sls" ".ss" ".scm") (lambda (ap2bdb@x) (if (and (list? ap2bdb@x) (for-all string? ap2bdb@x)) (map (lambda (ap2bdd@x) ap2bdd@x) ap2bdb@x) (assertion-violation 'library-extensions '"not a list of strings" ap2bdb@x))))) (set! ap2cfd@ap2b3a@library-extensions ap2b3a@library-extensions) (set! ap2b3c@library-name->file-name (lambda (ap2bdf@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ap2be5@ap2be2 ap2be6@ap2be4) (let ((ap2be9@extract ap2be6@ap2be4) (ap2bea@p ap2be5@ap2be2)) (letrec* ((ap2bee@display-hex (lambda (ap2bf7@n) (if (<= '0 ap2bf7@n '9) (display ap2bf7@n ap2bea@p) (display (integer->char (+ (char->integer '#\a) (- ap2bf7@n '10))) ap2bea@p))))) (begin (let ap2bf1@f ((ap2bef@ls ap2bdf@x)) (if (not (null? ap2bef@ls)) (begin (display '"/" ap2bea@p) (for-each (lambda (ap2bf3@c) (if (or (char<=? '#\a ap2bf3@c '#\z) (char<=? '#\A ap2bf3@c '#\Z) (char<=? '#\0 ap2bf3@c '#\9) (memv ap2bf3@c '(#\- #\. #\_ #\~))) (display ap2bf3@c ap2bea@p) (begin (display '"%" ap2bea@p) (let ((ap2bf5@n (char->integer ap2bf3@c))) (begin (ap2bee@display-hex (quotient ap2bf5@n '16)) (ap2bee@display-hex (remainder ap2bf5@n '16))))))) (string->list (symbol->string (car ap2bef@ls)))) (ap2bf1@f (cdr ap2bef@ls))) (void))) (ap2be9@extract)))))))) (set! ap2cfe@ap2b3c@library-name->file-name ap2b3c@library-name->file-name) (set! ap2b3e@file-locator (ap2a42@ap2920@make-parameter (lambda (ap2bf9@x) (let ((ap2bfb@str (ap2b3c@library-name->file-name ap2bf9@x))) (let ap2c03@f ((ap2bfd@ls (ap2b38@library-path)) (ap2bfe@exts (ap2b3a@library-extensions)) (ap2bff@failed-list '())) (if (null? ap2bfd@ls) (letrec* ((ap2c0d@ap2c08 (make-record-type-descriptor '&library-resolution &condition-rtd 'ap2c0b '#f '#f '#((immutable library) (immutable files)))) (ap2c0f@ap2c0a '#f) (ap2c11@ap2c09 (make-record-constructor-descriptor ap2c0d@ap2c08 &condition-rcd ap2c0f@ap2c0a)) (ap2c14@ap2c07 (record-predicate ap2c0d@ap2c08)) (ap2c16@make-library-resolution-condition (record-constructor ap2c11@ap2c09)) (ap2c18@ap2c05 (record-accessor ap2c0d@ap2c08 '0)) (ap2c1a@ap2c06 (record-accessor ap2c0d@ap2c08 '1)) (ap2c1c@library-resolution-condition? (condition-predicate ap2c0d@ap2c08)) (ap2c1e@condition-library (condition-accessor ap2c0d@ap2c08 ap2c18@ap2c05)) (ap2c20@condition-files (condition-accessor ap2c0d@ap2c08 ap2c1a@ap2c06))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (ap2c16@make-library-resolution-condition ap2bf9@x (reverse ap2bff@failed-list))))) (if (null? ap2bfe@exts) (ap2c03@f (cdr ap2bfd@ls) (ap2b3a@library-extensions) ap2bff@failed-list) (let ((ap2c21@name (string-append (car ap2bfd@ls) ap2bfb@str (car ap2bfe@exts)))) (if (file-exists? ap2c21@name) ap2c21@name (ap2c03@f ap2bfd@ls (cdr ap2bfe@exts) (cons ap2c21@name ap2bff@failed-list))))))))) (lambda (ap2c23@f) (if (procedure? ap2c23@f) ap2c23@f (assertion-violation 'file-locator '"not a procedure" ap2c23@f))))) (set! ap2cff@ap2b3e@file-locator ap2b3e@file-locator) (set! ap2b40@serialize-all (lambda (ap2c25@serialize ap2c26@compile) (letrec* ((ap2c2a@library-desc (lambda (ap2c2d@x) (list (ap2afa@library-id ap2c2d@x) (ap2afe@library-name ap2c2d@x))))) (for-each (lambda (ap2c2b@x) (if (ap2b2e@library-source-file-name ap2c2b@x) (ap2c25@serialize (ap2b2e@library-source-file-name ap2c2b@x) (list (ap2afa@library-id ap2c2b@x) (ap2afe@library-name ap2c2b@x) (ap2b02@library-version ap2c2b@x) (map ap2c2a@library-desc (ap2b06@library-imp* ap2c2b@x)) (map ap2c2a@library-desc (ap2b0a@library-vis* ap2c2b@x)) (map ap2c2a@library-desc (ap2b0e@library-inv* ap2c2b@x)) (ap2b12@library-subst ap2c2b@x) (ap2b16@library-env ap2c2b@x) (ap2c26@compile (ap2b22@library-visit-code ap2c2b@x)) (ap2c26@compile (ap2b26@library-invoke-code ap2c2b@x)) (ap2b2a@library-visible? ap2c2b@x))) (void))) ((ap2aec@current-library-collection)))))) (set! ap2d00@ap2b40@serialize-all ap2b40@serialize-all) (set! ap2b42@current-precompiled-library-loader (ap2a42@ap2920@make-parameter (lambda (ap2c2f@filename ap2c30@sk) '#f))) (set! ap2d01@ap2b42@current-precompiled-library-loader ap2b42@current-precompiled-library-loader) (set! ap2b44@try-load-from-file (lambda (ap2c33@filename) ((ap2b42@current-precompiled-library-loader) ap2c33@filename (lambda ap2c59 (let ((ap2c5a (length ap2c59))) (if (= ap2c5a '11) (apply (lambda (ap2c35@id ap2c36@name ap2c37@ver ap2c38@imp* ap2c39@vis* ap2c3a@inv* ap2c3b@exp-subst ap2c3c@exp-env ap2c3d@visit-proc ap2c3e@invoke-proc ap2c3f@visible?) (let ap2c4d@f ((ap2c4b@deps (append ap2c38@imp* ap2c39@vis* ap2c3a@inv*))) (if (null? ap2c4b@deps) (begin (ap2b58@install-library ap2c35@id ap2c36@name ap2c37@ver ap2c38@imp* ap2c39@vis* ap2c3a@inv* ap2c3b@exp-subst ap2c3c@exp-env ap2c3d@visit-proc ap2c3e@invoke-proc '#f '#f ap2c3f@visible? '#f) '#t) (let ((ap2c4f@d (car ap2c4b@deps))) (let ((ap2c51@label (car ap2c4f@d)) (ap2c52@dname (cadr ap2c4f@d))) (let ((ap2c55@l (ap2b4e@find-library-by-name ap2c52@dname))) (if (and (ap2af8@library? ap2c55@l) (eq? ap2c51@label (ap2afa@library-id ap2c55@l))) (ap2c4d@f (cdr ap2c4b@deps)) (begin (if ap2a3c@ap2914@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" ap2c36@name ap2c52@dname ap2c33@filename) (void)) '#f)))))))) ap2c59) (if (>= ap2c5a '0) (apply (lambda ap2c57@others '#f) ap2c59) (error 'apply '"invalid arg count")))))))) (set! ap2d02@ap2b44@try-load-from-file ap2b44@try-load-from-file) (set! ap2b46@library-loader (ap2a42@ap2920@make-parameter (lambda (ap2c5b@x) (let ((ap2c5d@file-name ((ap2b3e@file-locator) ap2c5b@x))) (if (not ap2c5d@file-name) (assertion-violation '#f '"cannot file library" ap2c5b@x) (or (ap2b44@try-load-from-file ap2c5d@file-name) ((ap2b48@current-library-expander) (ap2a41@ap291e@read-library-source-file ap2c5d@file-name) ap2c5d@file-name (lambda (ap2c5f@name) (if (not (fast-equal? ap2c5f@name ap2c5b@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (ap2c65@ap2c62 ap2c66@ap2c64) (let ((ap2c69@e ap2c66@ap2c64) (ap2c6a@p ap2c65@ap2c62)) (begin (display '"expected to find library " ap2c6a@p) (write ap2c5b@x ap2c6a@p) (display '" in file " ap2c6a@p) (display ap2c5d@file-name ap2c6a@p) (display '", found " ap2c6a@p) (write ap2c5f@name ap2c6a@p) (display '" instead" ap2c6a@p) (ap2c69@e)))))) (void)))))))) (lambda (ap2c6d@f) (if (procedure? ap2c6d@f) ap2c6d@f (assertion-violation 'library-locator '"not a procedure" ap2c6d@f))))) (set! ap2d03@ap2b46@library-loader ap2b46@library-loader) (set! ap2b48@current-library-expander (ap2a42@ap2920@make-parameter (lambda (ap2c6f@x) (assertion-violation 'library-expander '"not initialized")) (lambda (ap2c71@f) (if (procedure? ap2c71@f) ap2c71@f (assertion-violation 'library-expander '"not a procedure" ap2c71@f))))) (set! ap2d04@ap2b48@current-library-expander ap2b48@current-library-expander) (set! ap2b4a@external-pending-libraries (ap2a42@ap2920@make-parameter '())) (set! ap2d05@ap2b4a@external-pending-libraries ap2b4a@external-pending-libraries) (set! ap2b4c@find-external-library (lambda (ap2c73@name) (begin (if (member ap2c73@name (ap2b4a@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" ap2c73@name) (void)) (let ((ap2c79@ap2c76 ap2b4a@external-pending-libraries) (ap2c7a@ap2c78 (cons ap2c73@name (ap2b4a@external-pending-libraries)))) (let ((ap2c7d@swap (lambda () (let ((ap2c7f@t (ap2c79@ap2c76))) (begin (ap2c79@ap2c76 ap2c7a@ap2c78) (set! ap2c7a@ap2c78 ap2c7f@t)))))) (dynamic-wind ap2c7d@swap (lambda () (begin ((ap2b46@library-loader) ap2c73@name) (or (ap2b36@find-library-by (lambda (ap2c81@x) (fast-equal? (ap2afe@library-name ap2c81@x) ap2c73@name))) (assertion-violation '#f '"handling external library did not yield the correct library" ap2c73@name)))) ap2c7d@swap)))))) (set! ap2d06@ap2b4c@find-external-library ap2b4c@find-external-library) (set! ap2b4e@find-library-by-name (lambda (ap2c83@name) (or (ap2b36@find-library-by (lambda (ap2c85@x) (fast-equal? (ap2afe@library-name ap2c85@x) ap2c83@name))) (ap2b4c@find-external-library ap2c83@name)))) (set! ap2d07@ap2b4e@find-library-by-name ap2b4e@find-library-by-name) (set! ap2b50@library-exists? (lambda (ap2c87@name) (and (ap2b36@find-library-by (lambda (ap2c89@x) (fast-equal? (ap2afe@library-name ap2c89@x) ap2c87@name))) '#t))) (set! ap2d08@ap2b50@library-exists? ap2b50@library-exists?) (set! ap2b52@find-library-by-spec/die (lambda (ap2c8b@spec) (let ((ap2c8d@id (car ap2c8b@spec))) (or (ap2b36@find-library-by (lambda (ap2c8f@x) (eq? ap2c8d@id (ap2afa@library-id ap2c8f@x)))) (assertion-violation '#f '"cannot find library with required spec" ap2c8b@spec))))) (set! ap2d09@ap2b52@find-library-by-spec/die ap2b52@find-library-by-spec/die) (set! ap2b54@label->binding-table (make-eq-hashtable)) (set! ap2d0a@ap2b54@label->binding-table ap2b54@label->binding-table) (set! ap2b56@install-library-record (lambda (ap2c91@lib) (begin (let ((ap2c93@exp-env (ap2b16@library-env ap2c91@lib))) (for-each (lambda (ap2c95@x) (let ((ap2c97@label (car ap2c95@x)) (ap2c98@binding (cdr ap2c95@x))) (let ((ap2c9b@binding (let ((ap2c9d@t (car ap2c98@binding))) (if (memv ap2c9d@t '(global)) (cons 'global (cons ap2c91@lib (cdr ap2c98@binding))) (if (memv ap2c9d@t '(global-macro)) (cons 'global-macro (cons ap2c91@lib (cdr ap2c98@binding))) (if (memv ap2c9d@t '(global-macro!)) (cons 'global-macro! (cons ap2c91@lib (cdr ap2c98@binding))) ap2c98@binding)))))) (begin (if (hashtable-ref ap2b54@label->binding-table ap2c97@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" ap2c97@label (hashtable-ref ap2b54@label->binding-table ap2c97@label '#f) ap2c9b@binding) (exit)) (void)) (hashtable-set! ap2b54@label->binding-table ap2c97@label ap2c9b@binding))))) ap2c93@exp-env)) ((ap2aec@current-library-collection) ap2c91@lib)))) (set! ap2d0b@ap2b56@install-library-record ap2b56@install-library-record) (set! ap2b58@install-library (lambda (ap2c9f@id ap2ca0@name ap2ca1@ver ap2ca2@imp* ap2ca3@vis* ap2ca4@inv* ap2ca5@exp-subst ap2ca6@exp-env ap2ca7@visit-proc ap2ca8@invoke-proc ap2ca9@visit-code ap2caa@invoke-code ap2cab@visible? ap2cac@source-file-name) (let ((ap2cbb@imp-lib* (map ap2b52@find-library-by-spec/die ap2ca2@imp*)) (ap2cbc@vis-lib* (map ap2b52@find-library-by-spec/die ap2ca3@vis*)) (ap2cbd@inv-lib* (map ap2b52@find-library-by-spec/die ap2ca4@inv*))) (begin (if (not (and (symbol? ap2c9f@id) (list? ap2ca0@name) (list? ap2ca1@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" ap2c9f@id ap2ca0@name ap2ca1@ver) (void)) (if (ap2b50@library-exists? ap2ca0@name) (assertion-violation 'install-library '"library is already installed" ap2ca0@name) (void)) (let ((ap2cc1@lib (make-simple-struct 'library '15 (list ap2c9f@id ap2ca0@name ap2ca1@ver ap2cbb@imp-lib* ap2cbc@vis-lib* ap2cbd@inv-lib* ap2ca5@exp-subst ap2ca6@exp-env ap2ca7@visit-proc ap2ca8@invoke-proc ap2ca9@visit-code ap2caa@invoke-code ap2cab@visible? ap2cac@source-file-name)))) (ap2b56@install-library-record ap2cc1@lib)))))) (set! ap2d0c@ap2b58@install-library ap2b58@install-library) (set! ap2b5a@imported-label->binding (lambda (ap2cc3@lab) (hashtable-ref ap2b54@label->binding-table ap2cc3@lab '#f))) (set! ap2d0d@ap2b5a@imported-label->binding ap2b5a@imported-label->binding) (set! ap2b5c@invoke-library (lambda (ap2cc5@lib) (let ((ap2cc7@invoke (ap2b1e@library-invoke-state ap2cc5@lib))) (if (procedure? ap2cc7@invoke) (begin (ap2b20@set-library-invoke-state! ap2cc5@lib (lambda () (assertion-violation 'invoke '"circularity detected" ap2cc5@lib))) (for-each ap2b5c@invoke-library (ap2b0e@library-inv* ap2cc5@lib)) (ap2b20@set-library-invoke-state! ap2cc5@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" ap2cc5@lib))) (ap2cc7@invoke) (ap2b20@set-library-invoke-state! ap2cc5@lib '#t)) (void))))) (set! ap2d0e@ap2b5c@invoke-library ap2b5c@invoke-library) (set! ap2b5e@visit-library (lambda (ap2cc9@lib) (let ((ap2ccb@visit (ap2b1a@library-visit-state ap2cc9@lib))) (if (procedure? ap2ccb@visit) (begin (ap2b1c@set-library-visit-state! ap2cc9@lib (lambda () (assertion-violation 'visit '"circularity detected" ap2cc9@lib))) (for-each ap2b5c@invoke-library (ap2b0a@library-vis* ap2cc9@lib)) (ap2b1c@set-library-visit-state! ap2cc9@lib (lambda () (assertion-violation 'invoke '"first visit did not return" ap2cc9@lib))) (ap2ccb@visit) (ap2b1c@set-library-visit-state! ap2cc9@lib '#t)) (void))))) (set! ap2d0f@ap2b5e@visit-library ap2b5e@visit-library) (set! ap2b60@invoke-library-by-spec (lambda (ap2ccd@spec) (ap2b5c@invoke-library (ap2b52@find-library-by-spec/die ap2ccd@spec)))) (set! ap2d10@ap2b60@invoke-library-by-spec ap2b60@invoke-library-by-spec) (set! ap2b62@installed-libraries (lambda ap2cd5 (let ((ap2cd6 (length ap2cd5))) (if (= ap2cd6 '1) (apply (lambda (ap2ccf@all?) (let ap2cd3@f ((ap2cd1@ls ((ap2aec@current-library-collection)))) (if (null? ap2cd1@ls) '() (if (or ap2ccf@all? (ap2b2a@library-visible? (car ap2cd1@ls))) (cons (car ap2cd1@ls) (ap2cd3@f (cdr ap2cd1@ls))) (ap2cd3@f (cdr ap2cd1@ls)))))) ap2cd5) (if (= ap2cd6 '0) (apply (lambda () (ap2b62@installed-libraries '#f)) ap2cd5) (error 'apply '"invalid arg count")))))) (set! ap2d11@ap2b62@installed-libraries ap2b62@installed-libraries) (set! ap2b64@library-spec (lambda (ap2cd7@x) (begin (if (not (ap2af8@library? ap2cd7@x)) (assertion-violation 'library-spec '"not a library" ap2cd7@x) (void)) (list (ap2afa@library-id ap2cd7@x) (ap2afe@library-name ap2cd7@x) (ap2b02@library-version ap2cd7@x))))) (set! ap2d12@ap2b64@library-spec ap2b64@library-spec) (void))
(begin (set! ap2d16@build-global-define (unspecified)) (set! ap2d87@build-lambda (unspecified)) (set! ap2d89@build-case-lambda (unspecified)) (set! ap2db7@build-sequence (unspecified)) (set! ap2db9@build-void (unspecified)) (set! ap2dbb@build-letrec (unspecified)) (set! ap2dbd@build-let (unspecified)) (set! ap2dbf@build-named-let (unspecified)) (set! ap2dc1@build-letrec* (unspecified)) (set! ap2dc3@build-library-letrec* (unspecified)) (set! ap2dc5@build-receive (unspecified)) (set! ap2d16@build-global-define (lambda (ap2dc6@x) (ap2db9@build-void))) (set! ap2e54@ap2d16@build-global-define ap2d16@build-global-define) (set! ap2d87@build-lambda (lambda (ap2dc8@ae ap2dc9@vars ap2dca@exp) (list 'lambda ap2dc9@vars ap2dca@exp))) (set! ap2e55@ap2d87@build-lambda ap2d87@build-lambda) (set! ap2d89@build-case-lambda (lambda (ap2dce@ae ap2dcf@vars* ap2dd0@exp*) (letrec* ((ap2dd5@build-error (lambda (ap2e0c@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (ap2dd7@build-pred (lambda (ap2df4@ae ap2df5@n ap2df6@vars) (call-with-values (lambda () (let ap2e02@f ((ap2dfe@vars ap2df6@vars) (ap2dff@count '0)) (if (pair? ap2dfe@vars) (ap2e02@f (cdr ap2dfe@vars) (+ ap2dff@count '1)) (if (null? ap2dfe@vars) (values ap2dff@count '=) (values ap2dff@count '>=))))) (lambda (ap2e04@ap2dfb ap2e05@ap2dfd) (let ((ap2e08@pred ap2e05@ap2dfd) (ap2e09@count ap2e04@ap2dfb)) (list (list 'primitive ap2e08@pred) ap2df5@n (list 'quote ap2e09@count))))))) (ap2dd9@build-apply (lambda (ap2dec@ae ap2ded@g ap2dee@vars ap2def@exp) (list '(primitive apply) (ap2d87@build-lambda ap2dec@ae ap2dee@vars ap2def@exp) ap2ded@g))) (ap2ddb@expand-case-lambda (lambda (ap2ddc@ae ap2ddd@vars ap2dde@exp*) (let ((ap2de2@g (gensym)) (ap2de3@n (gensym))) (list 'lambda ap2de2@g (ap2dbd@build-let ap2ddc@ae (list ap2de3@n) (list (list '(primitive length) ap2de2@g)) (let ap2dea@f ((ap2de6@vars* ap2dcf@vars*) (ap2de7@exp* ap2dde@exp*)) (if (null? ap2de6@vars*) (ap2dd5@build-error ap2ddc@ae) (list 'if (ap2dd7@build-pred ap2ddc@ae ap2de3@n (car ap2de6@vars*)) (ap2dd9@build-apply ap2ddc@ae ap2de2@g (car ap2de6@vars*) (car ap2de7@exp*)) (ap2dea@f (cdr ap2de6@vars*) (cdr ap2de7@exp*))))))))))) (if (= (length ap2dd0@exp*) '1) (ap2d87@build-lambda ap2dce@ae (car ap2dcf@vars*) (car ap2dd0@exp*)) (ap2ddb@expand-case-lambda ap2dce@ae ap2dcf@vars* ap2dd0@exp*))))) (set! ap2e56@ap2d89@build-case-lambda ap2d89@build-case-lambda) (set! ap2db7@build-sequence (lambda (ap2e0e@ae ap2e0f@exps) (let ap2e14@loop ((ap2e12@exps ap2e0f@exps)) (if (null? (cdr ap2e12@exps)) (car ap2e12@exps) (if (equal? (car ap2e12@exps) (ap2db9@build-void)) (ap2e14@loop (cdr ap2e12@exps)) (cons 'begin ap2e12@exps)))))) (set! ap2e57@ap2db7@build-sequence ap2db7@build-sequence) (set! ap2db9@build-void (lambda () '((primitive void)))) (set! ap2e58@ap2db9@build-void ap2db9@build-void) (set! ap2dbb@build-letrec (lambda (ap2e16@ae ap2e17@vars ap2e18@val-exps ap2e19@body-exp) (if (null? ap2e17@vars) ap2e19@body-exp (list 'letrec (map list ap2e17@vars ap2e18@val-exps) ap2e19@body-exp)))) (set! ap2e59@ap2dbb@build-letrec ap2dbb@build-letrec) (set! ap2dbd@build-let (lambda (ap2e1e@ae ap2e1f@vars ap2e20@val-exps ap2e21@body-exp) (if (null? ap2e1f@vars) ap2e21@body-exp (list 'let (map list ap2e1f@vars ap2e20@val-exps) ap2e21@body-exp)))) (set! ap2e5a@ap2dbd@build-let ap2dbd@build-let) (set! ap2dbf@build-named-let (lambda (ap2e26@ae ap2e27@name ap2e28@vars ap2e29@val-exps ap2e2a@body-exp) (list 'let ap2e27@name (map list ap2e28@vars ap2e29@val-exps) ap2e2a@body-exp))) (set! ap2e5b@ap2dbf@build-named-let ap2dbf@build-named-let) (set! ap2dc1@build-letrec* (lambda (ap2e30@ae ap2e31@vars ap2e32@val-exps ap2e33@body-exp) (if (null? ap2e31@vars) ap2e33@body-exp (list 'letrec* (map list ap2e31@vars ap2e32@val-exps) ap2e33@body-exp)))) (set! ap2e5c@ap2dc1@build-letrec* ap2dc1@build-letrec*) (set! ap2dc3@build-library-letrec* (lambda (ap2e38@ae ap2e39@name ap2e3a@vars ap2e3b@locs ap2e3c@val-exps ap2e3d@body-exp) (cons 'begin (append (map (lambda (ap2e44@var) (cons 'set! (cons ap2e44@var '((unspecified))))) ap2e3a@vars) (append (apply append (map (lambda (ap2e46@var ap2e47@loc ap2e48@val-exp) (list (list 'set! ap2e46@var ap2e48@val-exp) (list 'set! ap2e47@loc ap2e46@var))) ap2e3a@vars ap2e3b@locs ap2e3c@val-exps)) (list ap2e3d@body-exp)))))) (set! ap2e5d@ap2dc3@build-library-letrec* ap2dc3@build-library-letrec*) (set! ap2dc5@build-receive (lambda (ap2e4c@ae ap2e4d@vars ap2e4e@producer ap2e4f@body*) (begin (display '"************** in ") (cons 'receive (cons ap2e4d@vars (cons ap2e4e@producer ap2e4f@body*)))))) (set! ap2e5e@ap2dc5@build-receive ap2dc5@build-receive) (void))
(begin (set! ap2e6d@file-options-macro (unspecified)) (set! ap2e6f@set-cons (unspecified)) (set! ap2e71@set-union (unspecified)) (set! ap2e76@top-mark* (unspecified)) (set! ap2e78@top-marked? (unspecified)) (set! ap2e7a@gen-lexical (unspecified)) (set! ap2e7c@gen-global (unspecified)) (set! ap2e7e@gen-label (unspecified)) (set! ap2e80@gen-top-level-label (unspecified)) (set! ap2e82@gen-define-label+loc (unspecified)) (set! ap2e84@gen-define-label (unspecified)) (set! ap2e8e@rib? (unspecified)) (set! ap2e90@rib-sym* (unspecified)) (set! ap2e92@set-rib-sym*! (unspecified)) (set! ap2e94@rib-mark** (unspecified)) (set! ap2e96@set-rib-mark**! (unspecified)) (set! ap2e98@rib-label* (unspecified)) (set! ap2e9a@set-rib-label*! (unspecified)) (set! ap2e9c@rib-sealed/freq (unspecified)) (set! ap2e9e@set-rib-sealed/freq! (unspecified)) (set! ap2ea0@rib-cache (unspecified)) (set! ap2ea2@set-rib-cache! (unspecified)) (set! ap2ea4@dummy (unspecified)) (set! ap2ea6@make-empty-rib (unspecified)) (set! ap2ea8@extend-rib! (unspecified)) (set! ap2eaa@extend-rib/nc! (unspecified)) (set! ap2eac@make-rib-map (unspecified)) (set! ap2eae@seal-rib! (unspecified)) (set! ap2eb0@unseal-rib! (unspecified)) (set! ap2eb2@make-full-rib (unspecified)) (set! ap2eb4@rp (unspecified)) (set! ap2ebe@stx? (unspecified)) (set! ap2ec0@stx-expr (unspecified)) (set! ap2ec2@set-stx-expr! (unspecified)) (set! ap2ec4@stx-mark* (unspecified)) (set! ap2ec6@set-stx-mark*! (unspecified)) (set! ap2ec8@stx-subst* (unspecified)) (set! ap2eca@set-stx-subst*! (unspecified)) (set! ap2ecc@stx-ae* (unspecified)) (set! ap2ece@set-stx-ae*! (unspecified)) (set! ap2ed0@dummy (unspecified)) (set! ap2ed2@datum->stx (unspecified)) (set! ap2ed4@gen-mark (unspecified)) (set! ap2ed6@anti-mark (unspecified)) (set! ap2ed8@anti-mark? (unspecified)) (set! ap2eda@mkstx (unspecified)) (set! ap2edc@add-subst (unspecified)) (set! ap2ede@add-mark (unspecified)) (set! ap2ee0@syntax-kind? (unspecified)) (set! ap2ee2@syntax-vector->list (unspecified)) (set! ap2ee4@syntax-pair? (unspecified)) (set! ap2ee6@syntax-vector? (unspecified)) (set! ap2ee8@syntax-null? (unspecified)) (set! ap2eea@syntax-list? (unspecified)) (set! ap2eec@syntax-car (unspecified)) (set! ap2eee@syntax-cdr (unspecified)) (set! ap2ef0@syntax->list (unspecified)) (set! ap2ef2@id? (unspecified)) (set! ap2ef4@id->sym (unspecified)) (set! ap2ef6@bound-id=? (unspecified)) (set! ap2ef8@free-id=? (unspecified)) (set! ap2efa@valid-bound-ids? (unspecified)) (set! ap2efc@distinct-bound-ids? (unspecified)) (set! ap2efe@bound-id-member? (unspecified)) (set! ap2f00@self-evaluating? (unspecified)) (set! ap2f02@strip-annotations (unspecified)) (set! ap2f04@strip (unspecified)) (set! ap2f06@stx->datum (unspecified)) (set! ap2f08@id->label (unspecified)) (set! ap2f0a@label->binding (unspecified)) (set! ap2f0c@make-binding (unspecified)) (set! ap2f0e@binding-type (unspecified)) (set! ap2f10@binding-value (unspecified)) (set! ap2f12@raise-unbound-error (unspecified)) (set! ap2f14@syntax-type (unspecified)) (set! ap2f22@sanitize-binding (unspecified)) (set! ap2f24@make-variable-transformer (unspecified)) (set! ap2f26@variable-transformer? (unspecified)) (set! ap2f28@variable-transformer-procedure (unspecified)) (set! ap2f2a@make-eval-transformer (unspecified)) (set! ap307b@parse-define (unspecified)) (set! ap307d@parse-define-syntax (unspecified)) (set! ap307f@scheme-stx-hashtable (unspecified)) (set! ap3081@scheme-stx (unspecified)) (set! ap3083@lexical-var (unspecified)) (set! ap3085@lexical-mutable? (unspecified)) (set! ap3087@set-lexical-mutable! (unspecified)) (set! ap3089@add-lexical (unspecified)) (set! ap308b@add-lexicals (unspecified)) (set! ap308d@letrec-helper (unspecified)) (set! ap308f@let-transformer (unspecified)) (set! ap3091@letrec-transformer (unspecified)) (set! ap3093@letrec*-transformer (unspecified)) (set! ap3095@fluid-let-syntax-transformer (unspecified)) (set! ap3097@type-descriptor-transformer (unspecified)) (set! ap3099@record-type-descriptor-transformer (unspecified)) (set! ap309b@record-constructor-descriptor-transformer (unspecified)) (set! ap309d@when-macro (unspecified)) (set! ap309f@unless-macro (unspecified)) (set! ap30a1@if-transformer (unspecified)) (set! ap30a3@and-transformer (unspecified)) (set! ap30a5@or-transformer (unspecified)) (set! ap30a7@case-macro (unspecified)) (set! ap30a9@quote-transformer (unspecified)) (set! ap30ab@case-lambda-transformer (unspecified)) (set! ap30ad@lambda-transformer (unspecified)) (set! ap30af@bless (unspecified)) (set! ap30b1@with-syntax-macro (unspecified)) (set! ap30b3@invalid-fmls-error (unspecified)) (set! ap30b5@let-macro (unspecified)) (set! ap30b7@let-values-macro (unspecified)) (set! ap30b9@let*-values-macro (unspecified)) (set! ap30bb@trace-lambda-macro (unspecified)) (set! ap30bd@trace-define-macro (unspecified)) (set! ap30bf@trace-define-syntax-macro (unspecified)) (set! ap30c1@trace-let/rec-syntax (unspecified)) (set! ap30c3@trace-let-syntax-macro (unspecified)) (set! ap30c5@trace-letrec-syntax-macro (unspecified)) (set! ap30c7@guard-macro (unspecified)) (set! ap30c9@define-enumeration-macro (unspecified)) (set! ap30cb@time-macro (unspecified)) (set! ap30cd@delay-macro (unspecified)) (set! ap30cf@assert-macro (unspecified)) (set! ap30d1@endianness-macro (unspecified)) (set! ap30d3@identifier-syntax-macro (unspecified)) (set! ap30d5@do-macro (unspecified)) (set! ap30d7@let*-macro (unspecified)) (set! ap30d9@or-macro (unspecified)) (set! ap30db@and-macro (unspecified)) (set! ap30dd@cond-macro (unspecified)) (set! ap30df@do-include (unspecified)) (set! ap30e1@include-macro (unspecified)) (set! ap30e3@include-into-macro (unspecified)) (set! ap30e5@syntax-rules-macro (unspecified)) (set! ap30e7@quasiquote-macro (unspecified)) (set! ap30e9@quasisyntax-macro (unspecified)) (set! ap30eb@define-struct-macro (unspecified)) (set! ap30ed@define-record-type-macro (unspecified)) (set! ap30ef@define-condition-type-macro (unspecified)) (set! ap30f1@incorrect-usage-macro (unspecified)) (set! ap30f3@parameterize-macro (unspecified)) (set! ap30f5@foreign-call-transformer (unspecified)) (set! ap30f7@convert-pattern (unspecified)) (set! ap30f9@syntax-dispatch (unspecified)) (set! ap30fb@ellipsis? (unspecified)) (set! ap30fd@underscore? (unspecified)) (set! ap30ff@verify-literals (unspecified)) (set! ap3101@syntax-case-transformer (unspecified)) (set! ap3103@ellipsis-map (unspecified)) (set! ap3105@syntax-transformer (unspecified)) (set! ap3107@core-macro-transformer (unspecified)) (set! ap3109@symbol-macro (unspecified)) (set! ap310b@macro-transformer (unspecified)) (set! ap310d@local-macro-transformer (unspecified)) (set! ap310f@do-macro-call (unspecified)) (set! ap3111@chi-macro (unspecified)) (set! ap3113@chi-local-macro (unspecified)) (set! ap3115@chi-global-macro (unspecified)) (set! ap3117@chi-expr* (unspecified)) (set! ap3119@chi-application (unspecified)) (set! ap311b@chi-expr (unspecified)) (set! ap311d@chi-set! (unspecified)) (set! ap311f@verify-formals (unspecified)) (set! ap3121@chi-lambda-clause (unspecified)) (set! ap3123@chi-lambda-clause* (unspecified)) (set! ap3125@chi-defun (unspecified)) (set! ap3127@chi-rhs (unspecified)) (set! ap3129@expand-interaction-rhs*/init* (unspecified)) (set! ap312b@chi-rhs* (unspecified)) (set! ap312d@find-bound=? (unspecified)) (set! ap312f@find-dups (unspecified)) (set! ap3131@chi-internal (unspecified)) (set! ap3133@parse-module (unspecified)) (set! ap313d@module-interface? (unspecified)) (set! ap313f@module-interface-first-mark (unspecified)) (set! ap3141@set-module-interface-first-mark! (unspecified)) (set! ap3143@module-interface-exp-id-vec (unspecified)) (set! ap3145@set-module-interface-exp-id-vec! (unspecified)) (set! ap3147@module-interface-exp-lab-vec (unspecified)) (set! ap3149@set-module-interface-exp-lab-vec! (unspecified)) (set! ap314b@dummy (unspecified)) (set! ap314d@module-interface-exp-id* (unspecified)) (set! ap314f@chi-internal-module (unspecified)) (set! ap3151@chi-body* (unspecified)) (set! ap3153@expand-transformer (unspecified)) (set! ap3155@parse-exports (unspecified)) (set! ap3157@parse-library-name (unspecified)) (set! ap3159@parse-library (unspecified)) (set! ap315b@parse-import-spec* (unspecified)) (set! ap315d@make-top-rib (unspecified)) (set! ap315f@make-collector (unspecified)) (set! ap3161@inv-collector (unspecified)) (set! ap3163@vis-collector (unspecified)) (set! ap3165@imp-collector (unspecified)) (set! ap3167@chi-library-internal (unspecified)) (set! ap3169@chi-interaction-expr (unspecified)) (set! ap316b@library-body-expander (unspecified)) (set! ap316d@core-library-expander (unspecified)) (set! ap316f@parse-top-level-program (unspecified)) (set! ap3171@top-level-expander (unspecified)) (set! ap3173@rp (unspecified)) (set! ap317d@env? (unspecified)) (set! ap317f@env-names (unspecified)) (set! ap3181@set-env-names! (unspecified)) (set! ap3183@env-labels (unspecified)) (set! ap3185@set-env-labels! (unspecified)) (set! ap3187@env-itc (unspecified)) (set! ap3189@set-env-itc! (unspecified)) (set! ap318b@dummy (unspecified)) (set! ap318d@rp (unspecified)) (set! ap3197@interaction-env? (unspecified)) (set! ap3199@interaction-env-rib (unspecified)) (set! ap319b@set-interaction-env-rib! (unspecified)) (set! ap319d@interaction-env-r (unspecified)) (set! ap319f@set-interaction-env-r! (unspecified)) (set! ap31a1@interaction-env-locs (unspecified)) (set! ap31a3@set-interaction-env-locs! (unspecified)) (set! ap31a5@dummy (unspecified)) (set! ap31a7@interaction-environment-symbols (unspecified)) (set! ap31a9@environment-bindings (unspecified)) (set! ap31ab@parse-binding (unspecified)) (set! ap31ad@environment? (unspecified)) (set! ap31af@environment-symbols (unspecified)) (set! ap31b1@environment (unspecified)) (set! ap31b3@null-environment (unspecified)) (set! ap31b5@scheme-report-environment (unspecified)) (set! ap31b7@expand (unspecified)) (set! ap31b9@eval (unspecified)) (set! ap31bb@library-expander (unspecified)) (set! ap31bd@boot-library-expand (unspecified)) (set! ap31bf@rev-map-append (unspecified)) (set! ap31c1@build-exports (unspecified)) (set! ap31c3@make-export-subst (unspecified)) (set! ap31c5@make-export-env/macros (unspecified)) (set! ap31c7@generate-temporaries (unspecified)) (set! ap31c9@free-identifier=? (unspecified)) (set! ap31cb@bound-identifier=? (unspecified)) (set! ap31cd@make-source-condition (unspecified)) (set! ap31cf@extract-position-condition (unspecified)) (set! ap31d1@expression-position (unspecified)) (set! ap31d3@assertion-error (unspecified)) (set! ap31d5@syntax-error (unspecified)) (set! ap31d7@syntax-violation* (unspecified)) (set! ap31d9@syntax-violation (unspecified)) (set! ap31db@identifier? (unspecified)) (set! ap31dd@datum->syntax (unspecified)) (set! ap31df@syntax->datum (unspecified)) (set! ap31e1@ungensym-all (unspecified)) (set! ap31e3@compile-r6rs-top-level (unspecified)) (set! ap31e5@pre-compile-r6rs-top-level (unspecified)) (set! ap31e7@interaction-environment (unspecified)) (set! ap31e9@top-level-context (unspecified)) (set! ap2e6d@file-options-macro (lambda (ap31ea@x) (letrec* ((ap31ed@valid-option? (lambda (ap31f6@x) (and (ap2ef2@id? ap31f6@x) (memq (ap2ef4@id->sym ap31f6@x) '(no-fail no-create no-truncate)))))) (let ((ap31ee@t ap31ea@x)) (let ((ap31f0@ls/false (ap30f9@syntax-dispatch ap31ee@t '(_ . each-any)))) (if (and ap31f0@ls/false (apply (lambda (ap31f2@opt*) (for-all ap31ed@valid-option? ap31f2@opt*)) ap31f0@ls/false)) (apply (lambda (ap31f4@opt*) (ap30af@bless (list 'make-file-options (list 'quote ap31f4@opt*)))) ap31f0@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap31ee@t))))))) (set! ap4b76@ap2e6d@file-options-macro ap2e6d@file-options-macro) (set! ap2e6f@set-cons (lambda (ap31f8@x ap31f9@ls) (if (memq ap31f8@x ap31f9@ls) ap31f9@ls (cons ap31f8@x ap31f9@ls)))) (set! ap4b77@ap2e6f@set-cons ap2e6f@set-cons) (set! ap2e71@set-union (lambda (ap31fc@ls1 ap31fd@ls2) (if (null? ap31fc@ls1) ap31fd@ls2 (if (memq (car ap31fc@ls1) ap31fd@ls2) (ap2e71@set-union (cdr ap31fc@ls1) ap31fd@ls2) (cons (car ap31fc@ls1) (ap2e71@set-union (cdr ap31fc@ls1) ap31fd@ls2)))))) (set! ap4b78@ap2e71@set-union ap2e71@set-union) (set! ap2e76@top-mark* '(top)) (set! ap4b79@ap2e76@top-mark* ap2e76@top-mark*) (set! ap2e78@top-marked? (lambda (ap3200@m*) (memq 'top ap3200@m*))) (set! ap4b7a@ap2e78@top-marked? ap2e78@top-marked?) (set! ap2e7a@gen-lexical (lambda (ap3202@sym) (if (symbol? ap3202@sym) (gensym ap3202@sym) (if (ap2ebe@stx? ap3202@sym) (ap2e7a@gen-lexical (ap2ef4@id->sym ap3202@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" ap3202@sym))))) (set! ap4b7b@ap2e7a@gen-lexical ap2e7a@gen-lexical) (set! ap2e7c@gen-global (lambda (ap3204@x) (ap2e7a@gen-lexical ap3204@x))) (set! ap4b7c@ap2e7c@gen-global ap2e7c@gen-global) (set! ap2e7e@gen-label (lambda (ap3206@_) (gensym))) (set! ap4b7d@ap2e7e@gen-label ap2e7e@gen-label) (set! ap2e80@gen-top-level-label (lambda (ap3208@id ap3209@rib) (letrec* ((ap320d@find (lambda (ap3218@sym ap3219@mark* ap321a@sym* ap321b@mark** ap321c@label*) (and (pair? ap321a@sym*) (if (and (eq? ap3218@sym (car ap321a@sym*)) (same-marks? ap3219@mark* (car ap321b@mark**))) (car ap321c@label*) (ap320d@find ap3218@sym ap3219@mark* (cdr ap321a@sym*) (cdr ap321b@mark**) (cdr ap321c@label*))))))) (let ((ap320e@sym (ap2ef4@id->sym ap3208@id)) (ap320f@mark* (ap2ec4@stx-mark* ap3208@id))) (let ((ap3212@sym* (ap2e90@rib-sym* ap3209@rib))) (let ((ap3214@t (and (memq ap320e@sym (ap2e90@rib-sym* ap3209@rib)) (ap320d@find ap320e@sym ap320f@mark* ap3212@sym* (ap2e94@rib-mark** ap3209@rib) (ap2e98@rib-label* ap3209@rib))))) (if ap3214@t ((lambda (ap3216@label) (if (ap2d0d@ap2b5a@imported-label->binding ap3216@label) (gensym) ap3216@label)) ap3214@t) (gensym)))))))) (set! ap4b7e@ap2e80@gen-top-level-label ap2e80@gen-top-level-label) (set! ap2e82@gen-define-label+loc (lambda (ap3222@id ap3223@rib) (let ((ap3226@t (ap31e9@top-level-context))) (if ap3226@t ((lambda (ap3228@env) (let ((ap322a@label (ap2e80@gen-top-level-label ap3222@id ap3223@rib)) (ap322b@locs (ap31a1@interaction-env-locs ap3228@env))) (values ap322a@label (let ((ap322e@t (assq ap322a@label ap322b@locs))) (if ap322e@t (cdr ap322e@t) (let ((ap3230@loc (ap2e7a@gen-lexical ap3222@id))) (begin (ap31a3@set-interaction-env-locs! ap3228@env (cons (cons ap322a@label ap3230@loc) ap322b@locs)) ap3230@loc))))))) ap3226@t) (values (gensym) (ap2e7a@gen-lexical ap3222@id)))))) (set! ap4b7f@ap2e82@gen-define-label+loc ap2e82@gen-define-label+loc) (set! ap2e84@gen-define-label (lambda (ap3232@id ap3233@rib) (if (ap31e9@top-level-context) (ap2e80@gen-top-level-label ap3232@id ap3233@rib) (gensym)))) (set! ap4b80@ap2e84@gen-define-label ap2e84@gen-define-label) (set! ap2e8e@rib? (lambda (ap3236@x) (and (simple-struct? ap3236@x) (eq? (simple-struct-name ap3236@x) 'rib)))) (set! ap4b81@ap2e8e@rib? ap2e8e@rib?) (set! ap2e90@rib-sym* (lambda (ap3238@x) (simple-struct-ref ap3238@x '0))) (set! ap4b82@ap2e90@rib-sym* ap2e90@rib-sym*) (set! ap2e92@set-rib-sym*! (lambda (ap323a@x ap323b@val) (simple-struct-set! ap323a@x '0 ap323b@val))) (set! ap4b83@ap2e92@set-rib-sym*! ap2e92@set-rib-sym*!) (set! ap2e94@rib-mark** (lambda (ap323e@x) (simple-struct-ref ap323e@x '1))) (set! ap4b84@ap2e94@rib-mark** ap2e94@rib-mark**) (set! ap2e96@set-rib-mark**! (lambda (ap3240@x ap3241@val) (simple-struct-set! ap3240@x '1 ap3241@val))) (set! ap4b85@ap2e96@set-rib-mark**! ap2e96@set-rib-mark**!) (set! ap2e98@rib-label* (lambda (ap3244@x) (simple-struct-ref ap3244@x '2))) (set! ap4b86@ap2e98@rib-label* ap2e98@rib-label*) (set! ap2e9a@set-rib-label*! (lambda (ap3246@x ap3247@val) (simple-struct-set! ap3246@x '2 ap3247@val))) (set! ap4b87@ap2e9a@set-rib-label*! ap2e9a@set-rib-label*!) (set! ap2e9c@rib-sealed/freq (lambda (ap324a@x) (simple-struct-ref ap324a@x '3))) (set! ap4b88@ap2e9c@rib-sealed/freq ap2e9c@rib-sealed/freq) (set! ap2e9e@set-rib-sealed/freq! (lambda (ap324c@x ap324d@val) (simple-struct-set! ap324c@x '3 ap324d@val))) (set! ap4b89@ap2e9e@set-rib-sealed/freq! ap2e9e@set-rib-sealed/freq!) (set! ap2ea0@rib-cache (lambda (ap3250@x) (simple-struct-ref ap3250@x '4))) (set! ap4b8a@ap2ea0@rib-cache ap2ea0@rib-cache) (set! ap2ea2@set-rib-cache! (lambda (ap3252@x ap3253@val) (simple-struct-set! ap3252@x '4 ap3253@val))) (set! ap4b8b@ap2ea2@set-rib-cache! ap2ea2@set-rib-cache!) (set! ap2ea4@dummy '3) (set! ap4b8c@ap2ea4@dummy ap2ea4@dummy) (set! ap2ea6@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! ap4b8d@ap2ea6@make-empty-rib ap2ea6@make-empty-rib) (set! ap2ea8@extend-rib! (lambda (ap3256@rib ap3257@id ap3258@label) (letrec* ((ap325d@find (lambda (ap326a@sym ap326b@mark* ap326c@sym* ap326d@mark** ap326e@label*) (and (pair? ap326c@sym*) (if (and (eq? ap326a@sym (car ap326c@sym*)) (same-marks? ap326b@mark* (car ap326d@mark**))) ap326e@label* (ap325d@find ap326a@sym ap326b@mark* (cdr ap326c@sym*) (cdr ap326d@mark**) (cdr ap326e@label*))))))) (begin (if (ap2e9c@rib-sealed/freq ap3256@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" ap3256@rib) (void)) (let ((ap325e@sym (ap2ef4@id->sym ap3257@id)) (ap325f@mark* (ap2ec4@stx-mark* ap3257@id))) (let ((ap3262@sym* (ap2e90@rib-sym* ap3256@rib))) (let ((ap3264@t (and (memq ap325e@sym (ap2e90@rib-sym* ap3256@rib)) (ap325d@find ap325e@sym ap325f@mark* ap3262@sym* (ap2e94@rib-mark** ap3256@rib) (ap2e98@rib-label* ap3256@rib))))) (if ap3264@t ((lambda (ap3266@p) (if (not (eq? ap3258@label (car ap3266@p))) (if (ap31e9@top-level-context) (set-car! ap3266@p ap3258@label) (ap31d9@syntax-violation '#f '"multiple definitions of identifier" ap3257@id)) (void))) ap3264@t) (begin (if (ap2ea0@rib-cache ap3256@rib) (hashtable-update! (ap2ea0@rib-cache ap3256@rib) ap325e@sym (lambda (ap3268@e) (cons (cons ap325f@mark* ap3258@label) ap3268@e)) '()) (void)) (ap2e92@set-rib-sym*! ap3256@rib (cons ap325e@sym ap3262@sym*)) (ap2e96@set-rib-mark**! ap3256@rib (cons ap325f@mark* (ap2e94@rib-mark** ap3256@rib))) (ap2e9a@set-rib-label*! ap3256@rib (cons ap3258@label (ap2e98@rib-label* ap3256@rib)))))))))))) (set! ap4b8e@ap2ea8@extend-rib! ap2ea8@extend-rib!) (set! ap2eaa@extend-rib/nc! (lambda (ap3274@rib ap3275@id ap3276@label) (let ((ap327a@sym (ap2ef4@id->sym ap3275@id)) (ap327b@mark* (ap2ec4@stx-mark* ap3275@id))) (let ((ap327e@sym* (ap2e90@rib-sym* ap3274@rib))) (begin (if (ap2ea0@rib-cache ap3274@rib) (hashtable-update! (ap2ea0@rib-cache ap3274@rib) ap327a@sym (lambda (ap3280@e) (cons (cons ap327b@mark* ap3276@label) ap3280@e)) '()) (void)) (ap2e92@set-rib-sym*! ap3274@rib (cons ap327a@sym ap327e@sym*)) (ap2e96@set-rib-mark**! ap3274@rib (cons ap327b@mark* (ap2e94@rib-mark** ap3274@rib))) (ap2e9a@set-rib-label*! ap3274@rib (cons ap3276@label (ap2e98@rib-label* ap3274@rib)))))))) (set! ap4b8f@ap2eaa@extend-rib/nc! ap2eaa@extend-rib/nc!) (set! ap2eac@make-rib-map (lambda (ap3282@sym*) (let ((ap3284@ht (make-eq-hashtable))) (let ap328a@f ((ap3286@i '0) (ap3287@sym* ap3282@sym*)) (if (null? ap3287@sym*) ap3284@ht (begin (hashtable-update! ap3284@ht (car ap3287@sym*) (lambda (ap328c@x) (cons ap3286@i ap328c@x)) '()) (ap328a@f (+ ap3286@i '1) (cdr ap3287@sym*)))))))) (set! ap4b90@ap2eac@make-rib-map ap2eac@make-rib-map) (set! ap2eae@seal-rib! (lambda (ap328e@rib) (let ((ap3290@sym* (ap2e90@rib-sym* ap328e@rib))) (if (not (null? ap3290@sym*)) (begin (ap2e92@set-rib-sym*! ap328e@rib (list->vector ap3290@sym*)) (ap2e96@set-rib-mark**! ap328e@rib (list->vector (ap2e94@rib-mark** ap328e@rib))) (ap2e9a@set-rib-label*! ap328e@rib (list->vector (ap2e98@rib-label* ap328e@rib))) (ap2e9e@set-rib-sealed/freq! ap328e@rib (ap2eac@make-rib-map ap3290@sym*))) (void))))) (set! ap4b91@ap2eae@seal-rib! ap2eae@seal-rib!) (set! ap2eb0@unseal-rib! (lambda (ap3292@rib) (if (ap2e9c@rib-sealed/freq ap3292@rib) (begin (ap2e9e@set-rib-sealed/freq! ap3292@rib '#f) (ap2e92@set-rib-sym*! ap3292@rib (vector->list (ap2e90@rib-sym* ap3292@rib))) (ap2e96@set-rib-mark**! ap3292@rib (vector->list (ap2e94@rib-mark** ap3292@rib))) (ap2e9a@set-rib-label*! ap3292@rib (vector->list (ap2e98@rib-label* ap3292@rib)))) (void)))) (set! ap4b92@ap2eb0@unseal-rib! ap2eb0@unseal-rib!) (set! ap2eb2@make-full-rib (lambda (ap3294@id* ap3295@label*) (let ((ap3298@r (make-simple-struct 'rib '6 (list (map ap2ef4@id->sym ap3294@id*) (map ap2ec4@stx-mark* ap3294@id*) ap3295@label* '#f '#f)))) (begin (ap2eae@seal-rib! ap3298@r) ap3298@r)))) (set! ap4b93@ap2eb2@make-full-rib ap2eb2@make-full-rib) (set! ap2eb4@rp (ap2a3f@ap291a@make-record-printer 'stx (lambda (ap329a@x ap329b@p ap329c@wr) (begin (display '"#<syntax " ap329b@p) (write (ap2f06@stx->datum ap329a@x) ap329b@p) (let ((ap32a0@expr (ap2ec0@stx-expr ap329a@x))) (if (ap2a36@ap2908@annotation? ap32a0@expr) (let ((ap32a2@src (ap2a37@ap290a@annotation-source ap32a0@expr))) (if (pair? ap32a2@src) (begin (display '" [" ap329b@p) (display (cdr ap32a2@src) ap329b@p) (display '" of " ap329b@p) (display (car ap32a2@src) ap329b@p) (display '"]" ap329b@p)) (void))) (void))) (display '">" ap329b@p))))) (set! ap4b94@ap2eb4@rp ap2eb4@rp) (set! ap2ebe@stx? (lambda (ap32a4@x) (and (simple-struct? ap32a4@x) (eq? (simple-struct-name ap32a4@x) 'stx)))) (set! ap4b95@ap2ebe@stx? ap2ebe@stx?) (set! ap2ec0@stx-expr (lambda (ap32a6@x) (simple-struct-ref ap32a6@x '0))) (set! ap4b96@ap2ec0@stx-expr ap2ec0@stx-expr) (set! ap2ec2@set-stx-expr! (lambda (ap32a8@x ap32a9@val) (simple-struct-set! ap32a8@x '0 ap32a9@val))) (set! ap4b97@ap2ec2@set-stx-expr! ap2ec2@set-stx-expr!) (set! ap2ec4@stx-mark* (lambda (ap32ac@x) (simple-struct-ref ap32ac@x '1))) (set! ap4b98@ap2ec4@stx-mark* ap2ec4@stx-mark*) (set! ap2ec6@set-stx-mark*! (lambda (ap32ae@x ap32af@val) (simple-struct-set! ap32ae@x '1 ap32af@val))) (set! ap4b99@ap2ec6@set-stx-mark*! ap2ec6@set-stx-mark*!) (set! ap2ec8@stx-subst* (lambda (ap32b2@x) (simple-struct-ref ap32b2@x '2))) (set! ap4b9a@ap2ec8@stx-subst* ap2ec8@stx-subst*) (set! ap2eca@set-stx-subst*! (lambda (ap32b4@x ap32b5@val) (simple-struct-set! ap32b4@x '2 ap32b5@val))) (set! ap4b9b@ap2eca@set-stx-subst*! ap2eca@set-stx-subst*!) (set! ap2ecc@stx-ae* (lambda (ap32b8@x) (simple-struct-ref ap32b8@x '3))) (set! ap4b9c@ap2ecc@stx-ae* ap2ecc@stx-ae*) (set! ap2ece@set-stx-ae*! (lambda (ap32ba@x ap32bb@val) (simple-struct-set! ap32ba@x '3 ap32bb@val))) (set! ap4b9d@ap2ece@set-stx-ae*! ap2ece@set-stx-ae*!) (set! ap2ed0@dummy '3) (set! ap4b9e@ap2ed0@dummy ap2ed0@dummy) (set! ap2ed2@datum->stx (lambda (ap32be@id ap32bf@datum) (make-simple-struct 'stx '5 (list ap32bf@datum (ap2ec4@stx-mark* ap32be@id) (ap2ec8@stx-subst* ap32be@id) (ap2ecc@stx-ae* ap32be@id))))) (set! ap4b9f@ap2ed2@datum->stx ap2ed2@datum->stx) (set! ap2ed4@gen-mark (lambda () (string '#\m))) (set! ap4ba0@ap2ed4@gen-mark ap2ed4@gen-mark) (set! ap2ed6@anti-mark '#f) (set! ap4ba1@ap2ed6@anti-mark ap2ed6@anti-mark) (set! ap2ed8@anti-mark? not) (set! ap4ba2@ap2ed8@anti-mark? ap2ed8@anti-mark?) (set! ap2eda@mkstx (lambda (ap32c2@e ap32c3@m* ap32c4@s* ap32c5@ae*) (if (and (ap2ebe@stx? ap32c2@e) (not (ap2e78@top-marked? ap32c3@m*))) (call-with-values (lambda () (join-wraps ap32c3@m* ap32c4@s* ap32c5@ae* ap32c2@e)) (lambda (ap32d0@ap32cb ap32d1@ap32cd ap32d2@ap32cf) (let ((ap32d6@ae* ap32d2@ap32cf) (ap32d7@s* ap32d1@ap32cd) (ap32d8@m* ap32d0@ap32cb)) (make-simple-struct 'stx '5 (list (ap2ec0@stx-expr ap32c2@e) ap32d8@m* ap32d7@s* ap32d6@ae*))))) (make-simple-struct 'stx '5 (list ap32c2@e ap32c3@m* ap32c4@s* ap32c5@ae*))))) (set! ap4ba3@ap2eda@mkstx ap2eda@mkstx) (set! ap2edc@add-subst (lambda (ap32dc@subst ap32dd@e) (ap2eda@mkstx ap32dd@e '() (list ap32dc@subst) '()))) (set! ap4ba4@ap2edc@add-subst ap2edc@add-subst) (set! ap2ede@add-mark (lambda (ap32e0@mark ap32e1@subst ap32e2@expr ap32e3@ae) (letrec* ((ap32e9@merge-ae* (lambda (ap3310@ls1 ap3311@ls2) (if (and (pair? ap3310@ls1) (pair? ap3311@ls2) (not (car ap3311@ls2))) (ap32eb@cancel ap3310@ls1 ap3311@ls2) (append ap3310@ls1 ap3311@ls2)))) (ap32eb@cancel (lambda (ap3306@ls1 ap3307@ls2) (let ap330e@f ((ap330a@x (car ap3306@ls1)) (ap330b@ls1 (cdr ap3306@ls1))) (if (null? ap330b@ls1) (cdr ap3307@ls2) (cons ap330a@x (ap330e@f (car ap330b@ls1) (cdr ap330b@ls1))))))) (ap32ed@f (lambda (ap32ee@e ap32ef@m ap32f0@s1* ap32f1@ae*) (if (pair? ap32ee@e) (let ((ap32f6@a (ap32ed@f (car ap32ee@e) ap32ef@m ap32f0@s1* ap32f1@ae*)) (ap32f7@d (ap32ed@f (cdr ap32ee@e) ap32ef@m ap32f0@s1* ap32f1@ae*))) (if (eq? ap32f6@a ap32f7@d) ap32ee@e (cons ap32f6@a ap32f7@d))) (if (vector? ap32ee@e) (let ((ap32fa@ls1 (vector->list ap32ee@e))) (let ((ap32fc@ls2 (map (lambda (ap32fe@x) (ap32ed@f ap32fe@x ap32ef@m ap32f0@s1* ap32f1@ae*)) ap32fa@ls1))) (if (for-all eq? ap32fa@ls1 ap32fc@ls2) ap32ee@e (list->vector ap32fc@ls2)))) (if (ap2ebe@stx? ap32ee@e) (let ((ap3300@m* (ap2ec4@stx-mark* ap32ee@e)) (ap3301@s2* (ap2ec8@stx-subst* ap32ee@e))) (if (null? ap3300@m*) (ap32ed@f (ap2ec0@stx-expr ap32ee@e) ap32ef@m (append ap32f0@s1* ap3301@s2*) (ap32e9@merge-ae* ap32f1@ae* (ap2ecc@stx-ae* ap32ee@e))) (if (eq? (car ap3300@m*) ap2ed6@anti-mark) (make-simple-struct 'stx '5 (list (ap2ec0@stx-expr ap32ee@e) (cdr ap3300@m*) (cdr (append ap32f0@s1* ap3301@s2*)) (ap32e9@merge-ae* ap32f1@ae* (ap2ecc@stx-ae* ap32ee@e)))) (make-simple-struct 'stx '5 (list (ap2ec0@stx-expr ap32ee@e) (cons ap32ef@m ap3300@m*) (let ((ap3304@s* (cons 'shift (append ap32f0@s1* ap3301@s2*)))) (if ap32e1@subst (cons ap32e1@subst ap3304@s*) ap3304@s*)) (ap32e9@merge-ae* ap32f1@ae* (ap2ecc@stx-ae* ap32ee@e))))))) (if (symbol? ap32ee@e) (ap31d9@syntax-violation '#f '"raw symbol encountered in output of macro" ap32e2@expr ap32ee@e) (make-simple-struct 'stx '5 (list ap32ee@e (list ap32ef@m) ap32f0@s1* ap32f1@ae*))))))))) (ap2eda@mkstx (ap32ed@f ap32e2@expr ap32e0@mark '() '()) '() '() (list ap32e3@ae))))) (set! ap4ba5@ap2ede@add-mark ap2ede@add-mark) (set! ap2ee0@syntax-kind? (lambda (ap3314@x ap3315@p?) (if (ap2ebe@stx? ap3314@x) (ap2ee0@syntax-kind? (ap2ec0@stx-expr ap3314@x) ap3315@p?) (if (ap2a36@ap2908@annotation? ap3314@x) (ap2ee0@syntax-kind? (ap2a38@ap290c@annotation-expression ap3314@x) ap3315@p?) (ap3315@p? ap3314@x))))) (set! ap4ba6@ap2ee0@syntax-kind? ap2ee0@syntax-kind?) (set! ap2ee2@syntax-vector->list (lambda (ap3318@x) (if (ap2ebe@stx? ap3318@x) (let ((ap331a@ls (ap2ee2@syntax-vector->list (ap2ec0@stx-expr ap3318@x))) (ap331b@m* (ap2ec4@stx-mark* ap3318@x)) (ap331c@s* (ap2ec8@stx-subst* ap3318@x)) (ap331d@ae* (ap2ecc@stx-ae* ap3318@x))) (map (lambda (ap3322@x) (ap2eda@mkstx ap3322@x ap331b@m* ap331c@s* ap331d@ae*)) ap331a@ls)) (if (ap2a36@ap2908@annotation? ap3318@x) (ap2ee2@syntax-vector->list (ap2a38@ap290c@annotation-expression ap3318@x)) (if (vector? ap3318@x) (vector->list ap3318@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" ap3318@x)))))) (set! ap4ba7@ap2ee2@syntax-vector->list ap2ee2@syntax-vector->list) (set! ap2ee4@syntax-pair? (lambda (ap3324@x) (ap2ee0@syntax-kind? ap3324@x pair?))) (set! ap4ba8@ap2ee4@syntax-pair? ap2ee4@syntax-pair?) (set! ap2ee6@syntax-vector? (lambda (ap3326@x) (ap2ee0@syntax-kind? ap3326@x vector?))) (set! ap4ba9@ap2ee6@syntax-vector? ap2ee6@syntax-vector?) (set! ap2ee8@syntax-null? (lambda (ap3328@x) (ap2ee0@syntax-kind? ap3328@x null?))) (set! ap4baa@ap2ee8@syntax-null? ap2ee8@syntax-null?) (set! ap2eea@syntax-list? (lambda (ap332a@x) (or (ap2ee8@syntax-null? ap332a@x) (and (ap2ee4@syntax-pair? ap332a@x) (ap2eea@syntax-list? (ap2eee@syntax-cdr ap332a@x)))))) (set! ap4bab@ap2eea@syntax-list? ap2eea@syntax-list?) (set! ap2eec@syntax-car (lambda (ap332c@x) (if (ap2ebe@stx? ap332c@x) (ap2eda@mkstx (ap2eec@syntax-car (ap2ec0@stx-expr ap332c@x)) (ap2ec4@stx-mark* ap332c@x) (ap2ec8@stx-subst* ap332c@x) (ap2ecc@stx-ae* ap332c@x)) (if (ap2a36@ap2908@annotation? ap332c@x) (ap2eec@syntax-car (ap2a38@ap290c@annotation-expression ap332c@x)) (if (pair? ap332c@x) (car ap332c@x) (assertion-violation 'syntax-car '"BUG: not a pair" ap332c@x)))))) (set! ap4bac@ap2eec@syntax-car ap2eec@syntax-car) (set! ap2eee@syntax-cdr (lambda (ap332e@x) (if (ap2ebe@stx? ap332e@x) (ap2eda@mkstx (ap2eee@syntax-cdr (ap2ec0@stx-expr ap332e@x)) (ap2ec4@stx-mark* ap332e@x) (ap2ec8@stx-subst* ap332e@x) (ap2ecc@stx-ae* ap332e@x)) (if (ap2a36@ap2908@annotation? ap332e@x) (ap2eee@syntax-cdr (ap2a38@ap290c@annotation-expression ap332e@x)) (if (pair? ap332e@x) (cdr ap332e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" ap332e@x)))))) (set! ap4bad@ap2eee@syntax-cdr ap2eee@syntax-cdr) (set! ap2ef0@syntax->list (lambda (ap3330@x) (if (ap2ee4@syntax-pair? ap3330@x) (cons (ap2eec@syntax-car ap3330@x) (ap2ef0@syntax->list (ap2eee@syntax-cdr ap3330@x))) (if (ap2ee8@syntax-null? ap3330@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" ap3330@x))))) (set! ap4bae@ap2ef0@syntax->list ap2ef0@syntax->list) (set! ap2ef2@id? (lambda (ap3332@x) (and (ap2ebe@stx? ap3332@x) (symbol? (ap2ec0@stx-expr ap3332@x))))) (set! ap4baf@ap2ef2@id? ap2ef2@id?) (set! ap2ef4@id->sym (lambda (ap3334@x) (ap2ec0@stx-expr ap3334@x))) (set! ap4bb0@ap2ef4@id->sym ap2ef4@id->sym) (set! ap2ef6@bound-id=? (lambda (ap3336@x ap3337@y) (and (eq? (ap2ef4@id->sym ap3336@x) (ap2ef4@id->sym ap3337@y)) (same-marks? (ap2ec4@stx-mark* ap3336@x) (ap2ec4@stx-mark* ap3337@y))))) (set! ap4bb1@ap2ef6@bound-id=? ap2ef6@bound-id=?) (set! ap2ef8@free-id=? (lambda (ap333a@i ap333b@j) (let ((ap333e@t0 (id->real-label ap333a@i)) (ap333f@t1 (id->real-label ap333b@j))) (if (or ap333e@t0 ap333f@t1) (eq? ap333e@t0 ap333f@t1) (eq? (ap2ef4@id->sym ap333a@i) (ap2ef4@id->sym ap333b@j)))))) (set! ap4bb2@ap2ef8@free-id=? ap2ef8@free-id=?) (set! ap2efa@valid-bound-ids? (lambda (ap3342@id*) (and (for-all ap2ef2@id? ap3342@id*) (ap2efc@distinct-bound-ids? ap3342@id*)))) (set! ap4bb3@ap2efa@valid-bound-ids? ap2efa@valid-bound-ids?) (set! ap2efc@distinct-bound-ids? (lambda (ap3344@id*) (or (null? ap3344@id*) (and (not (ap2efe@bound-id-member? (car ap3344@id*) (cdr ap3344@id*))) (ap2efc@distinct-bound-ids? (cdr ap3344@id*)))))) (set! ap4bb4@ap2efc@distinct-bound-ids? ap2efc@distinct-bound-ids?) (set! ap2efe@bound-id-member? (lambda (ap3346@id ap3347@id*) (and (pair? ap3347@id*) (or (ap2ef6@bound-id=? ap3346@id (car ap3347@id*)) (ap2efe@bound-id-member? ap3346@id (cdr ap3347@id*)))))) (set! ap4bb5@ap2efe@bound-id-member? ap2efe@bound-id-member?) (set! ap2f00@self-evaluating? (lambda (ap334a@x) (or (number? ap334a@x) (string? ap334a@x) (char? ap334a@x) (boolean? ap334a@x) (regexp? ap334a@x) (bytevector? ap334a@x)))) (set! ap4bb6@ap2f00@self-evaluating? ap2f00@self-evaluating?) (set! ap2f02@strip-annotations (lambda (ap334c@x) (if (pair? ap334c@x) (cons (ap2f02@strip-annotations (car ap334c@x)) (ap2f02@strip-annotations (cdr ap334c@x))) (if (vector? ap334c@x) (vector-map ap2f02@strip-annotations ap334c@x) (if (ap2a36@ap2908@annotation? ap334c@x) (ap2a35@ap2906@annotation-stripped ap334c@x) ap334c@x))))) (set! ap4bb7@ap2f02@strip-annotations ap2f02@strip-annotations) (set! ap2f04@strip (lambda (ap334e@x ap334f@m*) (if (ap2e78@top-marked? ap334f@m*) (if (or (ap2a36@ap2908@annotation? ap334e@x) (and (pair? ap334e@x) (ap2a36@ap2908@annotation? (car ap334e@x))) (and (vector? ap334e@x) (> (vector-length ap334e@x) '0) (ap2a36@ap2908@annotation? (vector-ref ap334e@x '0)))) (ap2f02@strip-annotations ap334e@x) ap334e@x) (let ap3354@f ((ap3352@x ap334e@x)) (if (ap2ebe@stx? ap3352@x) (begin (if (pair? (ap2ec0@stx-expr ap3352@x)) (begin (set-source-info! (ap2ec0@stx-expr ap3352@x) '#f) (set-source-info! (cdr (ap2ec0@stx-expr ap3352@x)) '#f) (set-source-info! (car (ap2ec0@stx-expr ap3352@x)) '#f)) (void)) (ap2f04@strip (ap2ec0@stx-expr ap3352@x) (ap2ec4@stx-mark* ap3352@x))) (if (ap2a36@ap2908@annotation? ap3352@x) (ap2a35@ap2906@annotation-stripped ap3352@x) (if (pair? ap3352@x) (let ((ap3356@a (ap3354@f (car ap3352@x))) (ap3357@d (ap3354@f (cdr ap3352@x)))) (if (and (eq? ap3356@a (car ap3352@x)) (eq? ap3357@d (cdr ap3352@x))) ap3352@x (cons ap3356@a ap3357@d))) (if (vector? ap3352@x) (let ((ap335a@old (vector->list ap3352@x))) (let ((ap335c@new (map ap3354@f ap335a@old))) (if (for-all eq? ap335a@old ap335c@new) ap3352@x (list->vector ap335c@new)))) ap3352@x)))))))) (set! ap4bb8@ap2f04@strip ap2f04@strip) (set! ap2f06@stx->datum (lambda (ap335e@x) (ap2f04@strip ap335e@x '()))) (set! ap4bb9@ap2f06@stx->datum ap2f06@stx->datum) (set! ap2f08@id->label (lambda (ap3360@id) (or (id->real-label ap3360@id) (let ((ap3362@t (ap31e9@top-level-context))) (if ap3362@t ((lambda (ap3364@env) (let ((ap3366@rib (ap3199@interaction-env-rib ap3364@env))) (call-with-values (lambda () (ap2e82@gen-define-label+loc ap3360@id ap3366@rib)) (lambda (ap336c@ap3369 ap336d@ap336b) (let ((ap3370@loc_ ap336d@ap336b) (ap3371@lab ap336c@ap3369)) (begin (ap2ea8@extend-rib! ap3366@rib ap3360@id ap3371@lab) ap3371@lab)))))) ap3362@t) '#f))))) (set! ap4bba@ap2f08@id->label ap2f08@id->label) (set! ap2f0a@label->binding (lambda (ap3374@x ap3375@r) (let ((ap3378@t (ap2d0d@ap2b5a@imported-label->binding ap3374@x))) (if ap3378@t ((lambda (ap337a@b) (if (and (pair? ap337a@b) (eq? (car ap337a@b) '$core-rtd)) (cons '$rtd (map ap30af@bless (cdr ap337a@b))) (if (and (pair? ap337a@b) (eq? (car ap337a@b) 'global-rtd)) (let ((ap337c@lib (cadr ap337a@b)) (ap337d@loc (cddr ap337a@b))) (cons '$rtd (symbol-value ap337d@loc))) ap337a@b))) ap3378@t) (let ((ap3380@t (assq ap3374@x ap3375@r))) (if ap3380@t (cdr ap3380@t) (let ((ap3382@t (ap31e9@top-level-context))) (if ap3382@t ((lambda (ap3384@env) (let ((ap3386@t (assq ap3374@x (ap31a1@interaction-env-locs ap3384@env)))) (if ap3386@t ((lambda (ap3388@p) (cons* 'lexical (cdr ap3388@p) '#f)) ap3386@t) '(displaced-lexical . #f)))) ap3382@t) '(displaced-lexical . #f))))))))) (set! ap4bbb@ap2f0a@label->binding ap2f0a@label->binding) (set! ap2f0c@make-binding cons) (set! ap4bbc@ap2f0c@make-binding ap2f0c@make-binding) (set! ap2f0e@binding-type car) (set! ap4bbd@ap2f0e@binding-type ap2f0e@binding-type) (set! ap2f10@binding-value cdr) (set! ap4bbe@ap2f10@binding-value ap2f10@binding-value) (set! ap2f12@raise-unbound-error (lambda (ap338a@id) (ap31d7@syntax-violation* '#f '"unbound identifier" ap338a@id (make-undefined-violation)))) (set! ap4bbf@ap2f12@raise-unbound-error ap2f12@raise-unbound-error) (set! ap2f14@syntax-type (lambda (ap338c@e ap338d@r) (if (ap2ef2@id? ap338c@e) (let ((ap3390@id ap338c@e)) (let ((ap3392@label (ap2f08@id->label ap3390@id))) (let ((ap3394@b (ap2f0a@label->binding ap3392@label ap338d@r))) (let ((ap3396@type (ap2f0e@binding-type ap3394@b))) (begin (if (not ap3392@label) (ap2f12@raise-unbound-error ap3390@id) (void)) (let ((ap3398@t ap3396@type)) (if (memv ap3398@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values ap3396@type (ap2f10@binding-value ap3394@b) ap3390@id) (values 'other '#f '#f)))))))) (if (ap2ee4@syntax-pair? ap338c@e) (let ((ap339a@id (ap2eec@syntax-car ap338c@e))) (if (ap2ef2@id? ap339a@id) (let ((ap339c@label (ap2f08@id->label ap339a@id))) (let ((ap339e@b (ap2f0a@label->binding ap339c@label ap338d@r))) (let ((ap33a0@type (ap2f0e@binding-type ap339e@b))) (begin (if (not ap339c@label) (ap2f12@raise-unbound-error ap339a@id) (void)) (let ((ap33a2@t ap33a0@type)) (if (memv ap33a2@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values ap33a0@type (ap2f10@binding-value ap339e@b) ap339a@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((ap33a4@d (ap2f06@stx->datum ap338c@e))) (if (ap2f00@self-evaluating? ap33a4@d) (values 'constant ap33a4@d '#f) (values 'other '#f '#f))))))) (set! ap4bc0@ap2f14@syntax-type ap2f14@syntax-type) (set! ap2f22@sanitize-binding (lambda (ap33a6@x ap33a7@src) (if (procedure? ap33a6@x) (cons* 'local-macro ap33a6@x ap33a7@src) (if (and (pair? ap33a6@x) (eq? (car ap33a6@x) 'macro!) (procedure? (cdr ap33a6@x))) (cons* 'local-macro! (cdr ap33a6@x) ap33a7@src) (if (and (pair? ap33a6@x) (eq? (car ap33a6@x) '$rtd)) ap33a6@x (assertion-violation 'expand '"invalid transformer" ap33a6@x)))))) (set! ap4bc1@ap2f22@sanitize-binding ap2f22@sanitize-binding) (set! ap2f24@make-variable-transformer (lambda (ap33aa@x) (if (procedure? ap33aa@x) (cons 'macro! ap33aa@x) (assertion-violation 'make-variable-transformer '"not a procedure" ap33aa@x)))) (set! ap4bc2@ap2f24@make-variable-transformer ap2f24@make-variable-transformer) (set! ap2f26@variable-transformer? (lambda (ap33ac@x) (and (pair? ap33ac@x) (eq? (car ap33ac@x) 'macro!) (procedure? (cdr ap33ac@x))))) (set! ap4bc3@ap2f26@variable-transformer? ap2f26@variable-transformer?) (set! ap2f28@variable-transformer-procedure (lambda (ap33ae@x) (if (ap2f26@variable-transformer? ap33ae@x) (cdr ap33ae@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" ap33ae@x)))) (set! ap4bc4@ap2f28@variable-transformer-procedure ap2f28@variable-transformer-procedure) (set! ap2f2a@make-eval-transformer (lambda (ap33b0@x) (ap2f22@sanitize-binding (eval-core (ap2a98@ap2a50@expanded->core ap33b0@x)) ap33b0@x))) (set! ap4bc5@ap2f2a@make-eval-transformer ap2f2a@make-eval-transformer) (set! ap307b@parse-define (lambda (ap33b2@x) (let ((ap33b4@t ap33b2@x)) (let ((ap33b6@ls/false (ap30f9@syntax-dispatch ap33b4@t '(_ (any . any) any . each-any)))) (if (and ap33b6@ls/false (apply (lambda (ap33b8@id ap33b9@fmls ap33ba@b ap33bb@b*) (ap2ef2@id? ap33b8@id)) ap33b6@ls/false)) (apply (lambda (ap33c0@id ap33c1@fmls ap33c2@b ap33c3@b*) (begin (ap311f@verify-formals ap33c1@fmls ap33b2@x) (values ap33c0@id (cons 'defun (cons ap33c1@fmls (cons ap33c2@b ap33c3@b*)))))) ap33b6@ls/false) (let ((ap33c8@t ap33b4@t)) (let ((ap33ca@ls/false (ap30f9@syntax-dispatch ap33c8@t '(_ any any)))) (if (and ap33ca@ls/false (apply (lambda (ap33cc@id ap33cd@val) (ap2ef2@id? ap33cc@id)) ap33ca@ls/false)) (apply (lambda (ap33d0@id ap33d1@val) (values ap33d0@id (cons 'expr ap33d1@val))) ap33ca@ls/false) (let ((ap33d4@t ap33c8@t)) (let ((ap33d6@ls/false (ap30f9@syntax-dispatch ap33d4@t '(_ any)))) (if (and ap33d6@ls/false (apply (lambda (ap33d8@id) (ap2ef2@id? ap33d8@id)) ap33d6@ls/false)) (apply (lambda (ap33da@id) (values ap33da@id (cons 'expr (ap30af@bless '(void))))) ap33d6@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap33d4@t)))))))))))) (set! ap4bc6@ap307b@parse-define ap307b@parse-define) (set! ap307d@parse-define-syntax (lambda (ap33dc@x) (let ((ap33de@t ap33dc@x)) (let ((ap33e0@ls/false (ap30f9@syntax-dispatch ap33de@t '(_ any any)))) (if (and ap33e0@ls/false (apply (lambda (ap33e2@id ap33e3@val) (ap2ef2@id? ap33e2@id)) ap33e0@ls/false)) (apply (lambda (ap33e6@id ap33e7@val) (values ap33e6@id ap33e7@val)) ap33e0@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap33de@t)))))) (set! ap4bc7@ap307d@parse-define-syntax ap307d@parse-define-syntax) (set! ap307f@scheme-stx-hashtable (make-eq-hashtable)) (set! ap4bc8@ap307f@scheme-stx-hashtable ap307f@scheme-stx-hashtable) (set! ap3081@scheme-stx (lambda (ap33ea@sym) (or (hashtable-ref ap307f@scheme-stx-hashtable ap33ea@sym '#f) (let ((ap33ec@subst (ap2ce9@ap2b12@library-subst (ap2d07@ap2b4e@find-library-by-name '(psyntax system $all))))) (let ((ap33ee@stx (make-simple-struct 'stx '5 (list ap33ea@sym ap2e76@top-mark* '() '())))) (let ((ap33f0@stx (let ((ap33f2@t (assq ap33ea@sym ap33ec@subst))) (if ap33f2@t ((lambda (ap33f4@x) (let ((ap33f6@name (car ap33f4@x)) (ap33f7@label (cdr ap33f4@x))) (ap2edc@add-subst (make-simple-struct 'rib '6 (list (list ap33f6@name) (list ap2e76@top-mark*) (list ap33f7@label) '#f '#f)) ap33ee@stx))) ap33f2@t) ap33ee@stx)))) (begin (hashtable-set! ap307f@scheme-stx-hashtable ap33ea@sym ap33f0@stx) ap33f0@stx))))))) (set! ap4bc9@ap3081@scheme-stx ap3081@scheme-stx) (set! ap3083@lexical-var car) (set! ap4bca@ap3083@lexical-var ap3083@lexical-var) (set! ap3085@lexical-mutable? cdr) (set! ap4bcb@ap3085@lexical-mutable? ap3085@lexical-mutable?) (set! ap3087@set-lexical-mutable! set-cdr!) (set! ap4bcc@ap3087@set-lexical-mutable! ap3087@set-lexical-mutable!) (set! ap3089@add-lexical (lambda (ap33fa@lab ap33fb@lex ap33fc@r) (cons (cons* ap33fa@lab 'lexical ap33fb@lex '#f) ap33fc@r))) (set! ap4bcd@ap3089@add-lexical ap3089@add-lexical) (set! ap308b@add-lexicals (lambda (ap3400@lab* ap3401@lex* ap3402@r) (if (null? ap3400@lab*) ap3402@r (ap308b@add-lexicals (cdr ap3400@lab*) (cdr ap3401@lex*) (ap3089@add-lexical (car ap3400@lab*) (car ap3401@lex*) ap3402@r))))) (set! ap4bce@ap308b@add-lexicals ap308b@add-lexicals) (set! ap308d@letrec-helper (lambda (ap3406@e ap3407@r ap3408@mr ap3409@build) (let ((ap340e@t ap3406@e)) (let ((ap3410@ls/false (ap30f9@syntax-dispatch ap340e@t '(_ #(each (any any)) any . each-any)))) (if ap3410@ls/false (apply (lambda (ap3412@lhs* ap3413@rhs* ap3414@b ap3415@b*) (if (not (ap2efa@valid-bound-ids? ap3412@lhs*)) (ap30b3@invalid-fmls-error ap3406@e ap3412@lhs*) (let ((ap341a@lex* (map ap2e7a@gen-lexical ap3412@lhs*)) (ap341b@lab* (map ap2e7e@gen-label ap3412@lhs*))) (let ((ap341e@rib (ap2eb2@make-full-rib ap3412@lhs* ap341b@lab*)) (ap341f@r (ap308b@add-lexicals ap341b@lab* ap341a@lex* ap3407@r))) (let ((ap3422@body (ap3131@chi-internal (ap2edc@add-subst ap341e@rib (cons ap3414@b ap3415@b*)) ap341f@r ap3408@mr)) (ap3423@rhs* (ap3117@chi-expr* (map (lambda (ap3426@x) (ap2edc@add-subst ap341e@rib ap3426@x)) ap3413@rhs*) ap341f@r ap3408@mr))) (ap3409@build '#f ap341a@lex* ap3423@rhs* ap3422@body)))))) ap3410@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap340e@t)))))) (set! ap4bcf@ap308d@letrec-helper ap308d@letrec-helper) (set! ap308f@let-transformer (lambda (ap3428@e ap3429@r ap342a@mr) (let ((ap342e@t ap3428@e)) (let ((ap3430@ls/false (ap30f9@syntax-dispatch ap342e@t '(_ #(each (any any)) any . each-any)))) (if ap3430@ls/false (apply (lambda (ap3432@lhs* ap3433@rhs* ap3434@b ap3435@b*) (if (not (ap2efa@valid-bound-ids? ap3432@lhs*)) (ap30b3@invalid-fmls-error ap3428@e ap3432@lhs*) (let ((ap343a@lex* (map ap2e7a@gen-lexical ap3432@lhs*)) (ap343b@lab* (map ap2e7e@gen-label ap3432@lhs*)) (ap343c@rhs* (ap3117@chi-expr* ap3433@rhs* ap3429@r ap342a@mr))) (let ((ap3440@rib (ap2eb2@make-full-rib ap3432@lhs* ap343b@lab*)) (ap3441@r (ap308b@add-lexicals ap343b@lab* ap343a@lex* ap3429@r))) (let ((ap3444@body (ap3131@chi-internal (ap2edc@add-subst ap3440@rib (cons ap3434@b ap3435@b*)) ap3441@r ap342a@mr))) (ap2e5a@ap2dbd@build-let '#f ap343a@lex* ap343c@rhs* ap3444@body)))))) ap3430@ls/false) (let ((ap3446@t ap342e@t)) (let ((ap3448@ls/false (ap30f9@syntax-dispatch ap3446@t '(_ any #(each (any any)) any . each-any)))) (if ap3448@ls/false (apply (lambda (ap344a@loop ap344b@lhs* ap344c@rhs* ap344d@b ap344e@b*) (if (not (ap2efa@valid-bound-ids? ap344b@lhs*)) (ap30b3@invalid-fmls-error ap3428@e ap344b@lhs*) (let ((ap3454@lex* (map ap2e7a@gen-lexical ap344b@lhs*)) (ap3455@lab* (map ap2e7e@gen-label ap344b@lhs*)) (ap3456@rhs* (ap3117@chi-expr* ap344c@rhs* ap3429@r ap342a@mr)) (ap3457@loop-lex (ap2e7a@gen-lexical ap344a@loop)) (ap3458@loop-lab (ap2e7e@gen-label ap344a@loop))) (let ((ap345e@loop-rib (ap2eb2@make-full-rib (list ap344a@loop) (list ap3458@loop-lab))) (ap345f@rib (ap2eb2@make-full-rib ap344b@lhs* ap3455@lab*)) (ap3460@r (ap308b@add-lexicals (cons ap3458@loop-lab ap3455@lab*) (cons ap3457@loop-lex ap3454@lex*) ap3429@r))) (let ((ap3464@body (ap3131@chi-internal (ap2edc@add-subst ap345e@loop-rib (ap2edc@add-subst ap345f@rib (cons ap344d@b ap344e@b*))) ap3460@r ap342a@mr))) (ap2e5b@ap2dbf@build-named-let '#f ap3457@loop-lex ap3454@lex* ap3456@rhs* ap3464@body)))))) ap3448@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3446@t))))))))) (set! ap4bd0@ap308f@let-transformer ap308f@let-transformer) (set! ap3091@letrec-transformer (lambda (ap3466@e ap3467@r ap3468@mr) (ap308d@letrec-helper ap3466@e ap3467@r ap3468@mr ap2e59@ap2dbb@build-letrec))) (set! ap4bd1@ap3091@letrec-transformer ap3091@letrec-transformer) (set! ap3093@letrec*-transformer (lambda (ap346c@e ap346d@r ap346e@mr) (ap308d@letrec-helper ap346c@e ap346d@r ap346e@mr ap2e5c@ap2dc1@build-letrec*))) (set! ap4bd2@ap3093@letrec*-transformer ap3093@letrec*-transformer) (set! ap3095@fluid-let-syntax-transformer (lambda (ap3472@e ap3473@r ap3474@mr) (letrec* ((ap3479@lookup (lambda (ap348c@x) (or (ap2f08@id->label ap348c@x) (ap31d9@syntax-violation '#f '"unbound identifier" ap3472@e ap348c@x))))) (let ((ap347a@t ap3472@e)) (let ((ap347c@ls/false (ap30f9@syntax-dispatch ap347a@t '(_ #(each (any any)) any . each-any)))) (if ap347c@ls/false (apply (lambda (ap347e@lhs* ap347f@rhs* ap3480@b ap3481@b*) (if (not (ap2efa@valid-bound-ids? ap347e@lhs*)) (ap30b3@invalid-fmls-error ap3472@e ap347e@lhs*) (let ((ap3486@lab* (map ap3479@lookup ap347e@lhs*)) (ap3487@rhs* (map (lambda (ap348a@x) (ap2f2a@make-eval-transformer (ap3153@expand-transformer ap348a@x ap3474@mr))) ap347f@rhs*))) (ap3131@chi-internal (cons ap3480@b ap3481@b*) (append (map cons ap3486@lab* ap3487@rhs*) ap3473@r) (append (map cons ap3486@lab* ap3487@rhs*) ap3474@mr))))) ap347c@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap347a@t))))))) (set! ap4bd3@ap3095@fluid-let-syntax-transformer ap3095@fluid-let-syntax-transformer) (set! ap3097@type-descriptor-transformer (lambda (ap348e@e ap348f@r ap3490@mr) (let ((ap3494@t ap348e@e)) (let ((ap3496@ls/false (ap30f9@syntax-dispatch ap3494@t '(_ any)))) (if (and ap3496@ls/false (apply (lambda (ap3498@id) (ap2ef2@id? ap3498@id)) ap3496@ls/false)) (apply (lambda (ap349a@id) (let ((ap349c@lab (ap2f08@id->label ap349a@id))) (let ((ap349e@b (ap2f0a@label->binding ap349c@lab ap348f@r))) (let ((ap34a0@type (ap2f0e@binding-type ap349e@b))) (begin (if (not ap349c@lab) (ap2f12@raise-unbound-error ap349a@id) (void)) (if (not (and (eq? ap34a0@type '$rtd) (not (list? (ap2f10@binding-value ap349e@b))))) (ap31d9@syntax-violation '#f '"not a record type" ap348e@e) (void)) (list 'quote (ap2f10@binding-value ap349e@b))))))) ap3496@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3494@t)))))) (set! ap4bd4@ap3097@type-descriptor-transformer ap3097@type-descriptor-transformer) (set! ap3099@record-type-descriptor-transformer (lambda (ap34a2@e ap34a3@r ap34a4@mr) (let ((ap34a8@t ap34a2@e)) (let ((ap34aa@ls/false (ap30f9@syntax-dispatch ap34a8@t '(_ any)))) (if (and ap34aa@ls/false (apply (lambda (ap34ac@id) (ap2ef2@id? ap34ac@id)) ap34aa@ls/false)) (apply (lambda (ap34ae@id) (let ((ap34b0@lab (ap2f08@id->label ap34ae@id))) (let ((ap34b2@b (ap2f0a@label->binding ap34b0@lab ap34a3@r))) (let ((ap34b4@type (ap2f0e@binding-type ap34b2@b))) (begin (if (not ap34b0@lab) (ap2f12@raise-unbound-error ap34ae@id) (void)) (if (not (and (eq? ap34b4@type '$rtd) (list? (ap2f10@binding-value ap34b2@b)))) (ap31d9@syntax-violation '#f '"not a record type" ap34a2@e) (void)) (ap311b@chi-expr (car (ap2f10@binding-value ap34b2@b)) ap34a3@r ap34a4@mr)))))) ap34aa@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap34a8@t)))))) (set! ap4bd5@ap3099@record-type-descriptor-transformer ap3099@record-type-descriptor-transformer) (set! ap309b@record-constructor-descriptor-transformer (lambda (ap34b6@e ap34b7@r ap34b8@mr) (let ((ap34bc@t ap34b6@e)) (let ((ap34be@ls/false (ap30f9@syntax-dispatch ap34bc@t '(_ any)))) (if (and ap34be@ls/false (apply (lambda (ap34c0@id) (ap2ef2@id? ap34c0@id)) ap34be@ls/false)) (apply (lambda (ap34c2@id) (let ((ap34c4@lab (ap2f08@id->label ap34c2@id))) (let ((ap34c6@b (ap2f0a@label->binding ap34c4@lab ap34b7@r))) (let ((ap34c8@type (ap2f0e@binding-type ap34c6@b))) (begin (if (not ap34c4@lab) (ap2f12@raise-unbound-error ap34c2@id) (void)) (if (not (and (eq? ap34c8@type '$rtd) (list? (ap2f10@binding-value ap34c6@b)))) (ap31d9@syntax-violation '#f '"invalid type" ap34b6@e) (void)) (ap311b@chi-expr (cadr (ap2f10@binding-value ap34c6@b)) ap34b7@r ap34b8@mr)))))) ap34be@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap34bc@t)))))) (set! ap4bd6@ap309b@record-constructor-descriptor-transformer ap309b@record-constructor-descriptor-transformer) (set! ap309d@when-macro (lambda (ap34ca@e) (let ((ap34cc@t ap34ca@e)) (let ((ap34ce@ls/false (ap30f9@syntax-dispatch ap34cc@t '(_ any any . each-any)))) (if ap34ce@ls/false (apply (lambda (ap34d0@test ap34d1@e ap34d2@e*) (ap30af@bless (list 'if ap34d0@test (cons 'begin (cons ap34d1@e ap34d2@e*))))) ap34ce@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap34cc@t)))))) (set! ap4bd7@ap309d@when-macro ap309d@when-macro) (set! ap309f@unless-macro (lambda (ap34d6@e) (let ((ap34d8@t ap34d6@e)) (let ((ap34da@ls/false (ap30f9@syntax-dispatch ap34d8@t '(_ any any . each-any)))) (if ap34da@ls/false (apply (lambda (ap34dc@test ap34dd@e ap34de@e*) (ap30af@bless (list 'if (list 'not ap34dc@test) (cons 'begin (cons ap34dd@e ap34de@e*))))) ap34da@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap34d8@t)))))) (set! ap4bd8@ap309f@unless-macro ap309f@unless-macro) (set! ap30a1@if-transformer (lambda (ap34e2@e ap34e3@r ap34e4@mr) (let ((ap34e8@t ap34e2@e)) (let ((ap34ea@ls/false (ap30f9@syntax-dispatch ap34e8@t '(_ any any any)))) (if ap34ea@ls/false (apply (lambda (ap34ec@e0 ap34ed@e1 ap34ee@e2) (list 'if (ap311b@chi-expr ap34ec@e0 ap34e3@r ap34e4@mr) (ap311b@chi-expr ap34ed@e1 ap34e3@r ap34e4@mr) (ap311b@chi-expr ap34ee@e2 ap34e3@r ap34e4@mr))) ap34ea@ls/false) (let ((ap34f2@t ap34e8@t)) (let ((ap34f4@ls/false (ap30f9@syntax-dispatch ap34f2@t '(_ any any)))) (if ap34f4@ls/false (apply (lambda (ap34f6@e0 ap34f7@e1) (list 'if (ap311b@chi-expr ap34f6@e0 ap34e3@r ap34e4@mr) (ap311b@chi-expr ap34f7@e1 ap34e3@r ap34e4@mr) (ap2e58@ap2db9@build-void))) ap34f4@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap34f2@t))))))))) (set! ap4bd9@ap30a1@if-transformer ap30a1@if-transformer) (set! ap30a3@and-transformer (lambda (ap34fa@e ap34fb@r ap34fc@mr) (let ((ap3500@t ap34fa@e)) (let ((ap3502@ls/false (ap30f9@syntax-dispatch ap3500@t '(_ . each-any)))) (if ap3502@ls/false (apply (lambda (ap3504@e*) (cons 'and (ap3117@chi-expr* ap3504@e* ap34fb@r ap34fc@mr))) ap3502@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3500@t)))))) (set! ap4bda@ap30a3@and-transformer ap30a3@and-transformer) (set! ap30a5@or-transformer (lambda (ap3506@e ap3507@r ap3508@mr) (let ((ap350c@t ap3506@e)) (let ((ap350e@ls/false (ap30f9@syntax-dispatch ap350c@t '(_ . each-any)))) (if ap350e@ls/false (apply (lambda (ap3510@e*) (cons 'or (ap3117@chi-expr* ap3510@e* ap3507@r ap3508@mr))) ap350e@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap350c@t)))))) (set! ap4bdb@ap30a5@or-transformer ap30a5@or-transformer) (set! ap30a7@case-macro (lambda (ap3512@e) (letrec* ((ap3515@build-last (lambda (ap353c@cls) (let ((ap353e@t ap353c@cls)) (let ((ap3540@ls/false (ap30f9@syntax-dispatch ap353e@t '(#(scheme-id else) any . each-any)))) (if ap3540@ls/false (apply (lambda (ap3542@e ap3543@e*) (cons 'begin (cons ap3542@e ap3543@e*))) ap3540@ls/false) (let ((ap3546@t ap353e@t)) (let ((ap3548@ls/false (ap30f9@syntax-dispatch ap3546@t '_))) (if ap3548@ls/false (apply (lambda () (ap3517@build-one ap353c@cls '(if #f #f))) ap3548@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3546@t))))))))) (ap3517@build-one (lambda (ap352e@cls ap352f@k) (let ((ap3532@t ap352e@cls)) (let ((ap3534@ls/false (ap30f9@syntax-dispatch ap3532@t '(each-any any . each-any)))) (if ap3534@ls/false (apply (lambda (ap3536@d* ap3537@e ap3538@e*) (list 'if (list 'memv 't (list 'quote ap3536@d*)) (cons 'begin (cons ap3537@e ap3538@e*)) ap352f@k)) ap3534@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3532@t))))))) (let ((ap3518@t ap3512@e)) (let ((ap351a@ls/false (ap30f9@syntax-dispatch ap3518@t '(_ any)))) (if ap351a@ls/false (apply (lambda (ap351c@expr) (ap30af@bless (cons 'let (cons (list (list 't ap351c@expr)) '((if #f #f)))))) ap351a@ls/false) (let ((ap351e@t ap3518@t)) (let ((ap3520@ls/false (ap30f9@syntax-dispatch ap351e@t '(_ any any . each-any)))) (if ap3520@ls/false (apply (lambda (ap3522@expr ap3523@cls ap3524@cls*) (ap30af@bless (list 'let (list (list 't ap3522@expr)) (let ap352c@f ((ap3528@cls ap3523@cls) (ap3529@cls* ap3524@cls*)) (if (null? ap3529@cls*) (ap3515@build-last ap3528@cls) (ap3517@build-one ap3528@cls (ap352c@f (car ap3529@cls*) (cdr ap3529@cls*)))))))) ap3520@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap351e@t)))))))))) (set! ap4bdc@ap30a7@case-macro ap30a7@case-macro) (set! ap30a9@quote-transformer (lambda (ap354a@e ap354b@r ap354c@mr) (let ((ap3550@t ap354a@e)) (let ((ap3552@ls/false (ap30f9@syntax-dispatch ap3550@t '(_ any)))) (if ap3552@ls/false (apply (lambda (ap3554@datum) (list 'quote (ap2f06@stx->datum ap3554@datum))) ap3552@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3550@t)))))) (set! ap4bdd@ap30a9@quote-transformer ap30a9@quote-transformer) (set! ap30ab@case-lambda-transformer (lambda (ap3556@e ap3557@r ap3558@mr) (let ((ap355c@t ap3556@e)) (let ((ap355e@ls/false (ap30f9@syntax-dispatch ap355c@t '(_ . #(each (any any . each-any)))))) (if ap355e@ls/false (apply (lambda (ap3560@fmls* ap3561@b* ap3562@b**) (call-with-values (lambda () (ap3123@chi-lambda-clause* ap3556@e ap3560@fmls* (map cons ap3561@b* ap3562@b**) ap3557@r ap3558@mr)) (lambda (ap356a@ap3567 ap356b@ap3569) (let ((ap356e@body* ap356b@ap3569) (ap356f@fmls* ap356a@ap3567)) (ap2e56@ap2d89@build-case-lambda '#f ap356f@fmls* ap356e@body*))))) ap355e@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap355c@t)))))) (set! ap4bde@ap30ab@case-lambda-transformer ap30ab@case-lambda-transformer) (set! ap30ad@lambda-transformer (lambda (ap3572@e ap3573@r ap3574@mr) (let ((ap3578@t ap3572@e)) (let ((ap357a@ls/false (ap30f9@syntax-dispatch ap3578@t '(_ any any . each-any)))) (if ap357a@ls/false (apply (lambda (ap357c@fmls ap357d@b ap357e@b*) (call-with-values (lambda () (ap3121@chi-lambda-clause ap3572@e ap357c@fmls (cons ap357d@b ap357e@b*) ap3573@r ap3574@mr)) (lambda (ap3586@ap3583 ap3587@ap3585) (let ((ap358a@body ap3587@ap3585) (ap358b@fmls ap3586@ap3583)) (ap2e55@ap2d87@build-lambda '#f ap358b@fmls ap358a@body))))) ap357a@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3578@t)))))) (set! ap4bdf@ap30ad@lambda-transformer ap30ad@lambda-transformer) (set! ap30af@bless (lambda (ap358e@x) (ap2eda@mkstx (let ap3592@f ((ap3590@x ap358e@x)) (if (ap2ebe@stx? ap3590@x) ap3590@x (if (pair? ap3590@x) (cons (ap3592@f (car ap3590@x)) (ap3592@f (cdr ap3590@x))) (if (symbol? ap3590@x) (ap3081@scheme-stx ap3590@x) (if (vector? ap3590@x) (vector-map ap3592@f ap3590@x) ap3590@x))))) '() '() '()))) (set! ap4be0@ap30af@bless ap30af@bless) (set! ap30b1@with-syntax-macro (lambda (ap3594@e) (let ((ap3596@t ap3594@e)) (let ((ap3598@ls/false (ap30f9@syntax-dispatch ap3596@t '(_ #(each (any any)) any . each-any)))) (if ap3598@ls/false (apply (lambda (ap359a@pat* ap359b@expr* ap359c@b ap359d@b*) (let ((ap35a2@idn* (let ap35a6@f ((ap35a4@pat* ap359a@pat*)) (if (null? ap35a4@pat*) '() (call-with-values (lambda () (ap30f7@convert-pattern (car ap35a4@pat*) '())) (lambda (ap35ac@ap35a9 ap35ad@ap35ab) (let ((ap35b0@idn* ap35ad@ap35ab) (ap35b1@pat ap35ac@ap35a9)) (append ap35b0@idn* (ap35a6@f (cdr ap35a4@pat*)))))))))) (begin (ap311f@verify-formals (map car ap35a2@idn*) ap3594@e) (let ((ap35b4@t* (ap31c7@generate-temporaries ap359b@expr*))) (ap30af@bless (list 'let (map list ap35b4@t* ap359b@expr*) (let ap35ba@f ((ap35b6@pat* ap359a@pat*) (ap35b7@t* ap35b4@t*)) (if (null? ap35b6@pat*) (cons 'begin (cons '#f (cons ap359c@b ap359d@b*))) (list 'syntax-case (car ap35b7@t*) '() (list (car ap35b6@pat*) (ap35ba@f (cdr ap35b6@pat*) (cdr ap35b7@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car ap35b6@pat*)) (car ap35b7@t*)))))))))))) ap3598@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3596@t)))))) (set! ap4be1@ap30b1@with-syntax-macro ap30b1@with-syntax-macro) (set! ap30b3@invalid-fmls-error (lambda (ap35bc@stx ap35bd@fmls) (let ((ap35c0@t ap35bd@fmls)) (let ((ap35c2@ls/false (ap30f9@syntax-dispatch ap35c0@t '#(each+ any () any)))) (if ap35c2@ls/false (apply (lambda (ap35c4@id* ap35c5@last) (let ap35ca@f ((ap35c8@id* (if (ap2ef2@id? ap35c5@last) (cons ap35c5@last ap35c4@id*) (if (ap2ee8@syntax-null? ap35c5@last) ap35c4@id* (ap31d9@syntax-violation '#f '"not an identifier" ap35bc@stx ap35c5@last))))) (if (null? ap35c8@id*) (values) (if (not (ap2ef2@id? (car ap35c8@id*))) (ap31d9@syntax-violation '#f '"not an identifier" ap35bc@stx (car ap35c8@id*)) (begin (ap35ca@f (cdr ap35c8@id*)) (if (ap2efe@bound-id-member? (car ap35c8@id*) (cdr ap35c8@id*)) (ap31d9@syntax-violation '#f '"duplicate binding" ap35bc@stx (car ap35c8@id*)) (void))))))) ap35c2@ls/false) (let ((ap35cc@t ap35c0@t)) (let ((ap35ce@ls/false (ap30f9@syntax-dispatch ap35cc@t '_))) (if ap35ce@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"malformed binding form" ap35bc@stx ap35bd@fmls)) ap35ce@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap35cc@t))))))))) (set! ap4be2@ap30b3@invalid-fmls-error ap30b3@invalid-fmls-error) (set! ap30b5@let-macro (lambda (ap35d0@stx) (let ((ap35d2@t ap35d0@stx)) (let ((ap35d4@ls/false (ap30f9@syntax-dispatch ap35d2@t '(_ #(each (any any)) any . each-any)))) (if ap35d4@ls/false (apply (lambda (ap35d6@lhs* ap35d7@rhs* ap35d8@b ap35d9@b*) (if (ap2efa@valid-bound-ids? ap35d6@lhs*) (ap30af@bless (cons (cons 'lambda (cons ap35d6@lhs* (cons ap35d8@b ap35d9@b*))) ap35d7@rhs*)) (ap30b3@invalid-fmls-error ap35d0@stx ap35d6@lhs*))) ap35d4@ls/false) (let ((ap35de@t ap35d2@t)) (let ((ap35e0@ls/false (ap30f9@syntax-dispatch ap35de@t '(_ any #(each (any any)) any . each-any)))) (if (and ap35e0@ls/false (apply (lambda (ap35e2@f ap35e3@lhs* ap35e4@rhs* ap35e5@b ap35e6@b*) (ap2ef2@id? ap35e2@f)) ap35e0@ls/false)) (apply (lambda (ap35ec@f ap35ed@lhs* ap35ee@rhs* ap35ef@b ap35f0@b*) (if (ap2efa@valid-bound-ids? ap35ed@lhs*) (ap30af@bless (cons (list 'letrec (list (list ap35ec@f (cons 'lambda (cons ap35ed@lhs* (cons ap35ef@b ap35f0@b*))))) ap35ec@f) ap35ee@rhs*)) (ap30b3@invalid-fmls-error ap35d0@stx ap35ed@lhs*))) ap35e0@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap35de@t))))))))) (set! ap4be3@ap30b5@let-macro ap30b5@let-macro) (set! ap30b7@let-values-macro (lambda (ap35f6@stx) (letrec* ((ap35f9@rename (lambda (ap365e@x ap365f@old* ap3660@new*) (begin (if (not (ap2ef2@id? ap365e@x)) (ap31d9@syntax-violation '#f '"not an indentifier" ap35f6@stx ap365e@x) (void)) (if (ap2efe@bound-id-member? ap365e@x ap365f@old*) (ap31d9@syntax-violation '#f '"duplicate binding" ap35f6@stx ap365e@x) (void)) (let ((ap3664@y (gensym (ap31df@syntax->datum ap365e@x)))) (values ap3664@y (cons ap365e@x ap365f@old*) (cons ap3664@y ap3660@new*)))))) (ap35fb@rename* (lambda (ap364c@x* ap364d@old* ap364e@new*) (if (null? ap364c@x*) (values '() ap364d@old* ap364e@new*) (call-with-values (lambda () (ap35f9@rename (car ap364c@x*) ap364d@old* ap364e@new*)) (lambda (ap3652@x ap3653@old* ap3654@new*) (call-with-values (lambda () (ap35fb@rename* (cdr ap364c@x*) ap3653@old* ap3654@new*)) (lambda (ap3658@x* ap3659@old* ap365a@new*) (values (cons ap3652@x ap3658@x*) ap3659@old* ap365a@new*))))))))) (let ((ap35fc@t ap35f6@stx)) (let ((ap35fe@ls/false (ap30f9@syntax-dispatch ap35fc@t '(_ () any . each-any)))) (if ap35fe@ls/false (apply (lambda (ap3600@b ap3601@b*) (cons* (ap30af@bless 'let) '() ap3600@b ap3601@b*)) ap35fe@ls/false) (let ((ap3604@t ap35fc@t)) (let ((ap3606@ls/false (ap30f9@syntax-dispatch ap3604@t '(_ #(each (any any)) any . each-any)))) (if ap3606@ls/false (apply (lambda (ap3608@lhs* ap3609@rhs* ap360a@b ap360b@b*) (ap30af@bless (let ap3618@f ((ap3610@lhs* ap3608@lhs*) (ap3611@rhs* ap3609@rhs*) (ap3612@old* '()) (ap3613@new* '())) (if (null? ap3610@lhs*) (cons 'let (cons (map list ap3612@old* ap3613@new*) (cons ap360a@b ap360b@b*))) (let ((ap361a@t (car ap3610@lhs*))) (let ((ap361c@ls/false (ap30f9@syntax-dispatch ap361a@t 'each-any))) (if ap361c@ls/false (apply (lambda (ap361e@x*) (call-with-values (lambda () (ap35fb@rename* ap361e@x* ap3612@old* ap3613@new*)) (lambda (ap3626@ap3621 ap3627@ap3623 ap3628@ap3625) (let ((ap362c@new* ap3628@ap3625) (ap362d@old* ap3627@ap3623) (ap362e@y* ap3626@ap3621)) (list 'call-with-values (list 'lambda '() (car ap3611@rhs*)) (list 'lambda ap362e@y* (ap3618@f (cdr ap3610@lhs*) (cdr ap3611@rhs*) ap362d@old* ap362c@new*))))))) ap361c@ls/false) (let ((ap3632@t ap361a@t)) (let ((ap3634@ls/false (ap30f9@syntax-dispatch ap3632@t '#(each+ any () any)))) (if ap3634@ls/false (apply (lambda (ap3636@x* ap3637@x) (call-with-values (lambda () (ap35f9@rename ap3637@x ap3612@old* ap3613@new*)) (lambda (ap363a@y ap363b@old* ap363c@new*) (call-with-values (lambda () (ap35fb@rename* ap3636@x* ap363b@old* ap363c@new*)) (lambda (ap3640@y* ap3641@old* ap3642@new*) (list 'call-with-values (list 'lambda '() (car ap3611@rhs*)) (list 'lambda (append ap3640@y* ap363a@y) (ap3618@f (cdr ap3610@lhs*) (cdr ap3611@rhs*) ap3641@old* ap3642@new*)))))))) ap3634@ls/false) (let ((ap3646@t ap3632@t)) (let ((ap3648@ls/false (ap30f9@syntax-dispatch ap3646@t 'any))) (if ap3648@ls/false (apply (lambda (ap364a@others) (ap31d9@syntax-violation '#f '"malformed bindings" ap35f6@stx ap364a@others)) ap3648@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3646@t)))))))))))))) ap3606@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3604@t)))))))))) (set! ap4be4@ap30b7@let-values-macro ap30b7@let-values-macro) (set! ap30b9@let*-values-macro (lambda (ap3666@stx) (letrec* ((ap3669@check (lambda (ap3698@x*) (if (not (null? ap3698@x*)) (let ((ap369a@x (car ap3698@x*))) (begin (if (not (ap2ef2@id? ap369a@x)) (ap31d9@syntax-violation '#f '"not an identifier" ap3666@stx ap369a@x) (void)) (ap3669@check (cdr ap3698@x*)) (if (ap2efe@bound-id-member? ap369a@x (cdr ap3698@x*)) (ap31d9@syntax-violation '#f '"duplicate identifier" ap3666@stx ap369a@x) (void)))) (void))))) (let ((ap366a@t ap3666@stx)) (let ((ap366c@ls/false (ap30f9@syntax-dispatch ap366a@t '(_ () any . each-any)))) (if ap366c@ls/false (apply (lambda (ap366e@b ap366f@b*) (cons* (ap30af@bless 'let) '() ap366e@b ap366f@b*)) ap366c@ls/false) (let ((ap3672@t ap366a@t)) (let ((ap3674@ls/false (ap30f9@syntax-dispatch ap3672@t '(_ #(each (any any)) any . each-any)))) (if ap3674@ls/false (apply (lambda (ap3676@lhs* ap3677@rhs* ap3678@b ap3679@b*) (ap30af@bless (let ap3682@f ((ap367e@lhs* ap3676@lhs*) (ap367f@rhs* ap3677@rhs*)) (if (null? ap367e@lhs*) (cons 'begin (cons ap3678@b ap3679@b*)) (let ((ap3684@t (car ap367e@lhs*))) (let ((ap3686@ls/false (ap30f9@syntax-dispatch ap3684@t 'each-any))) (if ap3686@ls/false (apply (lambda (ap3688@x*) (begin (ap3669@check ap3688@x*) (list 'call-with-values (list 'lambda '() (car ap367f@rhs*)) (list 'lambda ap3688@x* (ap3682@f (cdr ap367e@lhs*) (cdr ap367f@rhs*)))))) ap3686@ls/false) (let ((ap368a@t ap3684@t)) (let ((ap368c@ls/false (ap30f9@syntax-dispatch ap368a@t '#(each+ any () any)))) (if ap368c@ls/false (apply (lambda (ap368e@x* ap368f@x) (begin (ap3669@check (cons ap368f@x ap368e@x*)) (list 'call-with-values (list 'lambda '() (car ap367f@rhs*)) (list 'lambda (append ap368e@x* ap368f@x) (ap3682@f (cdr ap367e@lhs*) (cdr ap367f@rhs*)))))) ap368c@ls/false) (let ((ap3692@t ap368a@t)) (let ((ap3694@ls/false (ap30f9@syntax-dispatch ap3692@t 'any))) (if ap3694@ls/false (apply (lambda (ap3696@others) (ap31d9@syntax-violation '#f '"malformed bindings" ap3666@stx ap3696@others)) ap3694@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3692@t)))))))))))))) ap3674@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3672@t)))))))))) (set! ap4be5@ap30b9@let*-values-macro ap30b9@let*-values-macro) (set! ap30bb@trace-lambda-macro (lambda (ap369c@stx) (let ((ap369e@t ap369c@stx)) (let ((ap36a0@ls/false (ap30f9@syntax-dispatch ap369e@t '(_ any each-any any . each-any)))) (if ap36a0@ls/false (apply (lambda (ap36a2@who ap36a3@fmls ap36a4@b ap36a5@b*) (if (ap2efa@valid-bound-ids? ap36a3@fmls) (ap30af@bless (list 'make-traced-procedure (list 'quote ap36a2@who) (cons 'lambda (cons ap36a3@fmls (cons ap36a4@b ap36a5@b*))))) (ap30b3@invalid-fmls-error ap369c@stx ap36a3@fmls))) ap36a0@ls/false) (let ((ap36aa@t ap369e@t)) (let ((ap36ac@ls/false (ap30f9@syntax-dispatch ap36aa@t '(_ any #(each+ any () any) any . each-any)))) (if ap36ac@ls/false (apply (lambda (ap36ae@who ap36af@fmls ap36b0@last ap36b1@b ap36b2@b*) (if (ap2efa@valid-bound-ids? (cons ap36b0@last ap36af@fmls)) (ap30af@bless (list 'make-traced-procedure (list 'quote ap36ae@who) (cons 'lambda (cons (append ap36af@fmls ap36b0@last) (cons ap36b1@b ap36b2@b*))))) (ap30b3@invalid-fmls-error ap369c@stx (append ap36af@fmls ap36b0@last)))) ap36ac@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap36aa@t))))))))) (set! ap4be6@ap30bb@trace-lambda-macro ap30bb@trace-lambda-macro) (set! ap30bd@trace-define-macro (lambda (ap36b8@stx) (let ((ap36ba@t ap36b8@stx)) (let ((ap36bc@ls/false (ap30f9@syntax-dispatch ap36ba@t '(_ (any . each-any) any . each-any)))) (if ap36bc@ls/false (apply (lambda (ap36be@who ap36bf@fmls ap36c0@b ap36c1@b*) (if (ap2efa@valid-bound-ids? ap36bf@fmls) (ap30af@bless (list 'define ap36be@who (list 'make-traced-procedure (list 'quote ap36be@who) (cons 'lambda (cons ap36bf@fmls (cons ap36c0@b ap36c1@b*)))))) (ap30b3@invalid-fmls-error ap36b8@stx ap36bf@fmls))) ap36bc@ls/false) (let ((ap36c6@t ap36ba@t)) (let ((ap36c8@ls/false (ap30f9@syntax-dispatch ap36c6@t '(_ (any . #(each+ any () any)) any . each-any)))) (if ap36c8@ls/false (apply (lambda (ap36ca@who ap36cb@fmls ap36cc@last ap36cd@b ap36ce@b*) (if (ap2efa@valid-bound-ids? (cons ap36cc@last ap36cb@fmls)) (ap30af@bless (list 'define ap36ca@who (list 'make-traced-procedure (list 'quote ap36ca@who) (cons 'lambda (cons (append ap36cb@fmls ap36cc@last) (cons ap36cd@b ap36ce@b*)))))) (ap30b3@invalid-fmls-error ap36b8@stx (append ap36cb@fmls ap36cc@last)))) ap36c8@ls/false) (let ((ap36d4@t ap36c6@t)) (let ((ap36d6@ls/false (ap30f9@syntax-dispatch ap36d4@t '(_ any any)))) (if ap36d6@ls/false (apply (lambda (ap36d8@who ap36d9@expr) (if (ap2ef2@id? ap36d8@who) (ap30af@bless (list 'define ap36d8@who (list 'let (list (list 'v ap36d9@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote ap36d8@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (ap31d9@syntax-violation '#f '"invalid name" ap36b8@stx))) ap36d6@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap36d4@t)))))))))))) (set! ap4be7@ap30bd@trace-define-macro ap30bd@trace-define-macro) (set! ap30bf@trace-define-syntax-macro (lambda (ap36dc@stx) (let ((ap36de@t ap36dc@stx)) (let ((ap36e0@ls/false (ap30f9@syntax-dispatch ap36de@t '(_ any any)))) (if ap36e0@ls/false (apply (lambda (ap36e2@who ap36e3@expr) (if (ap2ef2@id? ap36e2@who) (ap30af@bless (list 'define-syntax ap36e2@who (list 'make-traced-macro (list 'quote ap36e2@who) ap36e3@expr))) (ap31d9@syntax-violation '#f '"invalid name" ap36dc@stx))) ap36e0@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap36de@t)))))) (set! ap4be8@ap30bf@trace-define-syntax-macro ap30bf@trace-define-syntax-macro) (set! ap30c1@trace-let/rec-syntax (lambda (ap36e6@who) (lambda (ap36e8@stx) (let ((ap36ea@t ap36e8@stx)) (let ((ap36ec@ls/false (ap30f9@syntax-dispatch ap36ea@t '(_ #(each (any any)) any . each-any)))) (if ap36ec@ls/false (apply (lambda (ap36ee@lhs* ap36ef@rhs* ap36f0@b ap36f1@b*) (if (ap2efa@valid-bound-ids? ap36ee@lhs*) (let ((ap36f6@rhs* (map (lambda (ap36f8@lhs ap36f9@rhs) (list 'make-traced-macro (list 'quote ap36f8@lhs) ap36f9@rhs)) ap36ee@lhs* ap36ef@rhs*))) (ap30af@bless (cons ap36e6@who (cons (map list ap36ee@lhs* ap36f6@rhs*) (cons ap36f0@b ap36f1@b*))))) (ap30b3@invalid-fmls-error ap36e8@stx ap36ee@lhs*))) ap36ec@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap36ea@t))))))) (set! ap4be9@ap30c1@trace-let/rec-syntax ap30c1@trace-let/rec-syntax) (set! ap30c3@trace-let-syntax-macro (ap30c1@trace-let/rec-syntax 'let-syntax)) (set! ap4bea@ap30c3@trace-let-syntax-macro ap30c3@trace-let-syntax-macro) (set! ap30c5@trace-letrec-syntax-macro (ap30c1@trace-let/rec-syntax 'letrec-syntax)) (set! ap4beb@ap30c5@trace-letrec-syntax-macro ap30c5@trace-letrec-syntax-macro) (set! ap30c7@guard-macro (lambda (ap36fc@x) (letrec* ((ap36ff@gen-clauses (lambda (ap3716@con ap3717@outerk ap3718@clause*) (letrec* ((ap371d@f (lambda (ap3756@x ap3757@k) (let ((ap375a@t ap3756@x)) (let ((ap375c@ls/false (ap30f9@syntax-dispatch ap375a@t '(any #(scheme-id =>) any)))) (if ap375c@ls/false (apply (lambda (ap375e@e ap375f@p) (let ((ap3762@t (gensym))) (list 'let (list (list ap3762@t ap375e@e)) (list 'if ap3762@t (list ap375f@p ap3762@t) ap3757@k)))) ap375c@ls/false) (let ((ap3764@t ap375a@t)) (let ((ap3766@ls/false (ap30f9@syntax-dispatch ap3764@t '(any)))) (if ap3766@ls/false (apply (lambda (ap3768@e) (let ((ap376a@t (gensym))) (list 'let (list (list ap376a@t ap3768@e)) (list 'if ap376a@t ap376a@t ap3757@k)))) ap3766@ls/false) (let ((ap376c@t ap3764@t)) (let ((ap376e@ls/false (ap30f9@syntax-dispatch ap376c@t '(any any . each-any)))) (if ap376e@ls/false (apply (lambda (ap3770@e ap3771@v ap3772@v*) (list 'if ap3770@e (cons 'begin (cons ap3771@v ap3772@v*)) ap3757@k)) ap376e@ls/false) (let ((ap3776@t ap376c@t)) (let ((ap3778@ls/false (ap30f9@syntax-dispatch ap3776@t '_))) (if ap3778@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid guard clause" ap3756@x)) ap3778@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3776@t))))))))))))))) (ap371f@f* (lambda (ap372c@x*) (let ((ap372e@t ap372c@x*)) (let ((ap3730@ls/false (ap30f9@syntax-dispatch ap372e@t '()))) (if ap3730@ls/false (apply (lambda () (let ((ap3732@g (gensym))) (values (list ap3732@g (list 'lambda '() (list 'raise-continuable ap3716@con))) ap3732@g))) ap3730@ls/false) (let ((ap3734@t ap372e@t)) (let ((ap3736@ls/false (ap30f9@syntax-dispatch ap3734@t '((#(scheme-id else) any . each-any))))) (if ap3736@ls/false (apply (lambda (ap3738@e ap3739@e*) (values (cons 'begin (cons ap3738@e ap3739@e*)) '#f)) ap3736@ls/false) (let ((ap373c@t ap3734@t)) (let ((ap373e@ls/false (ap30f9@syntax-dispatch ap373c@t '(any . any)))) (if ap373e@ls/false (apply (lambda (ap3740@cls ap3741@cls*) (call-with-values (lambda () (ap371f@f* ap3741@cls*)) (lambda (ap3748@ap3745 ap3749@ap3747) (let ((ap374c@g ap3749@ap3747) (ap374d@e ap3748@ap3745)) (values (ap371d@f ap3740@cls ap374d@e) ap374c@g))))) ap373e@ls/false) (let ((ap3750@t ap373c@t)) (let ((ap3752@ls/false (ap30f9@syntax-dispatch ap3750@t 'any))) (if ap3752@ls/false (apply (lambda (ap3754@others) (ap31d9@syntax-violation '#f '"invalid guard clause" ap3754@others)) ap3752@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3750@t)))))))))))))))) (call-with-values (lambda () (ap371f@f* ap3718@clause*)) (lambda (ap3724@ap3721 ap3725@ap3723) (let ((ap3728@raisek ap3725@ap3723) (ap3729@code ap3724@ap3721)) (if ap3728@raisek (list (list 'call/cc (list 'lambda (list ap3728@raisek) (list ap3717@outerk (list 'lambda '() ap3729@code))))) (list ap3717@outerk (list 'lambda '() ap3729@code)))))))))) (let ((ap3700@t ap36fc@x)) (let ((ap3702@ls/false (ap30f9@syntax-dispatch ap3700@t '(_ (any . each-any) any . each-any)))) (if (and ap3702@ls/false (apply (lambda (ap3704@con ap3705@clause* ap3706@b ap3707@b*) (ap2ef2@id? ap3704@con)) ap3702@ls/false)) (apply (lambda (ap370c@con ap370d@clause* ap370e@b ap370f@b*) (let ((ap3714@outerk (gensym))) (ap30af@bless (list (list 'call/cc (list 'lambda (list ap3714@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list ap370c@con) (ap36ff@gen-clauses ap370c@con ap3714@outerk ap370d@clause*)) (cons 'lambda (cons '() (cons ap370e@b ap370f@b*))))))))))) ap3702@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3700@t))))))) (set! ap4bec@ap30c7@guard-macro ap30c7@guard-macro) (set! ap30c9@define-enumeration-macro (lambda (ap377a@stx) (letrec* ((ap377d@set? (lambda (ap3796@x) (or (null? ap3796@x) (and (not (memq (car ap3796@x) (cdr ap3796@x))) (ap377d@set? (cdr ap3796@x)))))) (ap377f@remove-dups (lambda (ap3794@ls) (if (null? ap3794@ls) '() (cons (car ap3794@ls) (ap377f@remove-dups (remq (car ap3794@ls) (cdr ap3794@ls)))))))) (let ((ap3780@t ap377a@stx)) (let ((ap3782@ls/false (ap30f9@syntax-dispatch ap3780@t '(_ any each-any any)))) (if (and ap3782@ls/false (apply (lambda (ap3784@name ap3785@id* ap3786@maker) (and (ap2ef2@id? ap3784@name) (ap2ef2@id? ap3786@maker) (for-all ap2ef2@id? ap3785@id*))) ap3782@ls/false)) (apply (lambda (ap378a@name ap378b@id* ap378c@maker) (let ((ap3790@name* (ap377f@remove-dups (ap31df@syntax->datum ap378b@id*))) (ap3791@mk (gensym))) (ap30af@bless (list 'begin (list 'define ap3791@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote ap3790@name*)))) (list 'define-syntax ap378a@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote ap3790@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote ap378a@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax ap378c@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote ap378c@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote ap3790@name*)) (cons 'syntax-violation (cons (list 'quote ap378c@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons ap3791@mk '('(n* ...))))))))))))) ap3782@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3780@t))))))) (set! ap4bed@ap30c9@define-enumeration-macro ap30c9@define-enumeration-macro) (set! ap30cb@time-macro (lambda (ap3798@stx) (let ((ap379a@t ap3798@stx)) (let ((ap379c@ls/false (ap30f9@syntax-dispatch ap379a@t '(_ any)))) (if ap379c@ls/false (apply (lambda (ap379e@expr) (ap30af@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() ap379e@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) ap379c@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap379a@t)))))) (set! ap4bee@ap30cb@time-macro ap30cb@time-macro) (set! ap30cd@delay-macro (lambda (ap37a0@stx) (let ((ap37a2@t ap37a0@stx)) (let ((ap37a4@ls/false (ap30f9@syntax-dispatch ap37a2@t '(_ any)))) (if ap37a4@ls/false (apply (lambda (ap37a6@expr) (ap30af@bless (list 'make-promise (list 'lambda '() ap37a6@expr)))) ap37a4@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap37a2@t)))))) (set! ap4bef@ap30cd@delay-macro ap30cd@delay-macro) (set! ap30cf@assert-macro (lambda (ap37a8@stx) (let ((ap37aa@t ap37a8@stx)) (let ((ap37ac@ls/false (ap30f9@syntax-dispatch ap37aa@t '(_ any)))) (if ap37ac@ls/false (apply (lambda (ap37ae@expr) (let ((ap37b0@pos (or (ap31d1@expression-position ap37a8@stx) (ap31d1@expression-position ap37ae@expr)))) (ap30af@bless (list 'let (list (list 'x ap37ae@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote ap37ae@expr) (list 'quote ap37b0@pos))))))) ap37ac@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap37aa@t)))))) (set! ap4bf0@ap30cf@assert-macro ap30cf@assert-macro) (set! ap30d1@endianness-macro (lambda (ap37b2@stx) (let ((ap37b4@t ap37b2@stx)) (let ((ap37b6@ls/false (ap30f9@syntax-dispatch ap37b4@t '(_ any)))) (if ap37b6@ls/false (apply (lambda (ap37b8@e) (let ((ap37ba@t (ap31df@syntax->datum ap37b8@e))) (if (memv ap37ba@t '(little)) (ap30af@bless ''little) (if (memv ap37ba@t '(big)) (ap30af@bless ''big) (ap31d9@syntax-violation '#f '"endianness must be big or little" ap37b2@stx))))) ap37b6@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap37b4@t)))))) (set! ap4bf1@ap30d1@endianness-macro ap30d1@endianness-macro) (set! ap30d3@identifier-syntax-macro (lambda (ap37bc@stx) (let ((ap37be@t ap37bc@stx)) (let ((ap37c0@ls/false (ap30f9@syntax-dispatch ap37be@t '(_ any)))) (if ap37c0@ls/false (apply (lambda (ap37c2@expr) (ap30af@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax ap37c2@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax ap37c2@expr) '((syntax (e* ...)))))))))) ap37c0@ls/false) (let ((ap37c4@t ap37be@t)) (let ((ap37c6@ls/false (ap30f9@syntax-dispatch ap37c4@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and ap37c6@ls/false (apply (lambda (ap37c8@id1 ap37c9@expr1 ap37ca@id2 ap37cb@expr2 ap37cc@expr3) (and (ap2ef2@id? ap37c8@id1) (ap2ef2@id? ap37ca@id2) (ap2ef2@id? ap37cb@expr2))) ap37c6@ls/false)) (apply (lambda (ap37d2@id1 ap37d3@expr1 ap37d4@id2 ap37d5@expr2 ap37d6@expr3) (ap30af@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax ap37d3@expr1)) (list (list 'set! 'id ap37d5@expr2) (list 'syntax ap37d6@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons ap37d3@expr1 '(e* ...))))))))) ap37c6@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap37c4@t))))))))) (set! ap4bf2@ap30d3@identifier-syntax-macro ap30d3@identifier-syntax-macro) (set! ap30d5@do-macro (lambda (ap37dc@stx) (letrec* ((ap37df@bind (lambda (ap37f6@x) (let ((ap37f8@t ap37f6@x)) (let ((ap37fa@ls/false (ap30f9@syntax-dispatch ap37f8@t '(any any)))) (if ap37fa@ls/false (apply (lambda (ap37fc@x ap37fd@init) (list ap37fc@x ap37fd@init ap37fc@x)) ap37fa@ls/false) (let ((ap3800@t ap37f8@t)) (let ((ap3802@ls/false (ap30f9@syntax-dispatch ap3800@t '(any any any)))) (if ap3802@ls/false (apply (lambda (ap3804@x ap3805@init ap3806@step) (list ap3804@x ap3805@init ap3806@step)) ap3802@ls/false) (let ((ap380a@t ap3800@t)) (let ((ap380c@ls/false (ap30f9@syntax-dispatch ap380a@t '_))) (if ap380c@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid binding" ap37dc@stx)) ap380c@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap380a@t))))))))))))) (let ((ap37e0@t ap37dc@stx)) (let ((ap37e2@ls/false (ap30f9@syntax-dispatch ap37e0@t '(_ each-any (any . each-any) . each-any)))) (if ap37e2@ls/false (apply (lambda (ap37e4@binding* ap37e5@test ap37e6@expr* ap37e7@command*) (let ((ap37ec@t (map ap37df@bind ap37e4@binding*))) (let ((ap37ee@ls/false (ap30f9@syntax-dispatch ap37ec@t '#(each (any any any))))) (if ap37ee@ls/false (apply (lambda (ap37f0@x* ap37f1@init* ap37f2@step*) (if (ap2efa@valid-bound-ids? ap37f0@x*) (ap30af@bless (list 'letrec (list (list 'loop (list 'lambda ap37f0@x* (list 'if ap37e5@test (cons 'begin (cons '(if #f #f) ap37e6@expr*)) (cons 'begin (append ap37e7@command* (list (cons 'loop ap37f2@step*)))))))) (cons 'loop ap37f1@init*))) (ap31d9@syntax-violation '#f '"invalid bindings" ap37dc@stx))) ap37ee@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap37ec@t))))) ap37e2@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap37e0@t))))))) (set! ap4bf3@ap30d5@do-macro ap30d5@do-macro) (set! ap30d7@let*-macro (lambda (ap380e@stx) (let ((ap3810@t ap380e@stx)) (let ((ap3812@ls/false (ap30f9@syntax-dispatch ap3810@t '(_ #(each (any any)) any . each-any)))) (if (and ap3812@ls/false (apply (lambda (ap3814@lhs* ap3815@rhs* ap3816@b ap3817@b*) (for-all ap2ef2@id? ap3814@lhs*)) ap3812@ls/false)) (apply (lambda (ap381c@lhs* ap381d@rhs* ap381e@b ap381f@b*) (ap30af@bless (let ap3826@f ((ap3824@x* (map list ap381c@lhs* ap381d@rhs*))) (if (null? ap3824@x*) (cons 'let (cons '() (cons ap381e@b ap381f@b*))) (list 'let (list (car ap3824@x*)) (ap3826@f (cdr ap3824@x*))))))) ap3812@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3810@t)))))) (set! ap4bf4@ap30d7@let*-macro ap30d7@let*-macro) (set! ap30d9@or-macro (lambda (ap3828@stx) (let ((ap382a@t ap3828@stx)) (let ((ap382c@ls/false (ap30f9@syntax-dispatch ap382a@t '(_)))) (if ap382c@ls/false (apply (lambda () '#f) ap382c@ls/false) (let ((ap382e@t ap382a@t)) (let ((ap3830@ls/false (ap30f9@syntax-dispatch ap382e@t '(_ any . each-any)))) (if ap3830@ls/false (apply (lambda (ap3832@e ap3833@e*) (ap30af@bless (let ap383a@f ((ap3836@e ap3832@e) (ap3837@e* ap3833@e*)) (if (null? ap3837@e*) (list 'begin '#f ap3836@e) (list 'let (list (list 't ap3836@e)) (list 'if 't 't (ap383a@f (car ap3837@e*) (cdr ap3837@e*)))))))) ap3830@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap382e@t))))))))) (set! ap4bf5@ap30d9@or-macro ap30d9@or-macro) (set! ap30db@and-macro (lambda (ap383c@stx) (let ((ap383e@t ap383c@stx)) (let ((ap3840@ls/false (ap30f9@syntax-dispatch ap383e@t '(_)))) (if ap3840@ls/false (apply (lambda () '#t) ap3840@ls/false) (let ((ap3842@t ap383e@t)) (let ((ap3844@ls/false (ap30f9@syntax-dispatch ap3842@t '(_ any . each-any)))) (if ap3844@ls/false (apply (lambda (ap3846@e ap3847@e*) (ap30af@bless (let ap384e@f ((ap384a@e ap3846@e) (ap384b@e* ap3847@e*)) (if (null? ap384b@e*) (list 'begin '#f ap384a@e) (cons 'if (cons ap384a@e (cons (ap384e@f (car ap384b@e*) (cdr ap384b@e*)) '(#f)))))))) ap3844@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3842@t))))))))) (set! ap4bf6@ap30db@and-macro ap30db@and-macro) (set! ap30dd@cond-macro (lambda (ap3850@stx) (let ((ap3852@t ap3850@stx)) (let ((ap3854@ls/false (ap30f9@syntax-dispatch ap3852@t '(_ any . each-any)))) (if ap3854@ls/false (apply (lambda (ap3856@cls ap3857@cls*) (ap30af@bless (let ap385e@f ((ap385a@cls ap3856@cls) (ap385b@cls* ap3857@cls*)) (if (null? ap385b@cls*) (let ((ap3860@t ap385a@cls)) (let ((ap3862@ls/false (ap30f9@syntax-dispatch ap3860@t '(#(scheme-id else) any . each-any)))) (if ap3862@ls/false (apply (lambda (ap3864@e ap3865@e*) (cons 'begin (cons ap3864@e ap3865@e*))) ap3862@ls/false) (let ((ap3868@t ap3860@t)) (let ((ap386a@ls/false (ap30f9@syntax-dispatch ap3868@t '(any #(scheme-id =>) any)))) (if ap386a@ls/false (apply (lambda (ap386c@e ap386d@p) (list 'let (list (list 't ap386c@e)) (list 'if 't (cons ap386d@p '(t))))) ap386a@ls/false) (let ((ap3870@t ap3868@t)) (let ((ap3872@ls/false (ap30f9@syntax-dispatch ap3870@t '(any)))) (if ap3872@ls/false (apply (lambda (ap3874@e) (cons 'or (cons ap3874@e '((if #f #f))))) ap3872@ls/false) (let ((ap3876@t ap3870@t)) (let ((ap3878@ls/false (ap30f9@syntax-dispatch ap3876@t '(any . each-any)))) (if ap3878@ls/false (apply (lambda (ap387a@e ap387b@e*) (list 'if ap387a@e (cons 'begin ap387b@e*))) ap3878@ls/false) (let ((ap387e@t ap3876@t)) (let ((ap3880@ls/false (ap30f9@syntax-dispatch ap387e@t '_))) (if ap3880@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid last clause" ap3850@stx)) ap3880@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap387e@t)))))))))))))))) (let ((ap3882@t ap385a@cls)) (let ((ap3884@ls/false (ap30f9@syntax-dispatch ap3882@t '(#(scheme-id else) any . each-any)))) (if ap3884@ls/false (apply (lambda (ap3886@e ap3887@e*) (ap31d9@syntax-violation '#f '"incorrect position of keyword else" ap3850@stx)) ap3884@ls/false) (let ((ap388a@t ap3882@t)) (let ((ap388c@ls/false (ap30f9@syntax-dispatch ap388a@t '(any #(scheme-id =>) any)))) (if ap388c@ls/false (apply (lambda (ap388e@e ap388f@p) (list 'let (list (list 't ap388e@e)) (list 'if 't (cons ap388f@p '(t)) (ap385e@f (car ap385b@cls*) (cdr ap385b@cls*))))) ap388c@ls/false) (let ((ap3892@t ap388a@t)) (let ((ap3894@ls/false (ap30f9@syntax-dispatch ap3892@t '(any)))) (if ap3894@ls/false (apply (lambda (ap3896@e) (list 'or ap3896@e (ap385e@f (car ap385b@cls*) (cdr ap385b@cls*)))) ap3894@ls/false) (let ((ap3898@t ap3892@t)) (let ((ap389a@ls/false (ap30f9@syntax-dispatch ap3898@t '(any . each-any)))) (if ap389a@ls/false (apply (lambda (ap389c@e ap389d@e*) (list 'if ap389c@e (cons 'begin ap389d@e*) (ap385e@f (car ap385b@cls*) (cdr ap385b@cls*)))) ap389a@ls/false) (let ((ap38a0@t ap3898@t)) (let ((ap38a2@ls/false (ap30f9@syntax-dispatch ap38a0@t '_))) (if ap38a2@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid last clause" ap3850@stx)) ap38a2@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap38a0@t)))))))))))))))))))) ap3854@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3852@t)))))) (set! ap4bf7@ap30dd@cond-macro ap30dd@cond-macro) (set! ap30df@do-include (lambda (ap38a4@stx ap38a5@id ap38a6@filename) (let ((ap38aa@filename (ap2f06@stx->datum ap38a6@filename))) (begin (if (not (and (string? ap38aa@filename) (ap2ef2@id? ap38a5@id))) (ap31d9@syntax-violation '#f '"invalid syntax" ap38a4@stx) (void)) (cons (ap30af@bless 'begin) (with-input-from-file ap38aa@filename (lambda () (let ap38ae@f ((ap38ac@ls '())) (let ((ap38b0@x (ap2a34@ap2904@read-annotated))) (if (eof-object? ap38b0@x) (reverse ap38ac@ls) (ap38ae@f (cons (ap2ed2@datum->stx ap38a5@id ap38b0@x) ap38ac@ls)))))))))))) (set! ap4bf8@ap30df@do-include ap30df@do-include) (set! ap30e1@include-macro (lambda (ap38b2@e) (let ((ap38b4@t ap38b2@e)) (let ((ap38b6@ls/false (ap30f9@syntax-dispatch ap38b4@t '(any any)))) (if ap38b6@ls/false (apply (lambda (ap38b8@id ap38b9@filename) (ap30df@do-include ap38b2@e ap38b8@id ap38b9@filename)) ap38b6@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap38b4@t)))))) (set! ap4bf9@ap30e1@include-macro ap30e1@include-macro) (set! ap30e3@include-into-macro (lambda (ap38bc@e) (let ((ap38be@t ap38bc@e)) (let ((ap38c0@ls/false (ap30f9@syntax-dispatch ap38be@t '(_ any any)))) (if ap38c0@ls/false (apply (lambda (ap38c2@id ap38c3@filename) (ap30df@do-include ap38bc@e ap38c2@id ap38c3@filename)) ap38c0@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap38be@t)))))) (set! ap4bfa@ap30e3@include-into-macro ap30e3@include-into-macro) (set! ap30e5@syntax-rules-macro (lambda (ap38c6@e) (let ((ap38c8@t ap38c6@e)) (let ((ap38ca@ls/false (ap30f9@syntax-dispatch ap38c8@t '(_ each-any . #(each (any any)))))) (if ap38ca@ls/false (apply (lambda (ap38cc@lits ap38cd@pat* ap38ce@tmp*) (begin (ap30ff@verify-literals ap38cc@lits ap38c6@e) (ap30af@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons ap38cc@lits (map (lambda (ap38d2@pat ap38d3@tmp) (let ((ap38d6@t ap38d2@pat)) (let ((ap38d8@ls/false (ap30f9@syntax-dispatch ap38d6@t '(_ . any)))) (if ap38d8@ls/false (apply (lambda (ap38da@rest) (list (cons 'g ap38da@rest) (list 'syntax ap38d3@tmp))) ap38d8@ls/false) (let ((ap38dc@t ap38d6@t)) (let ((ap38de@ls/false (ap30f9@syntax-dispatch ap38dc@t '_))) (if ap38de@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid syntax-rules pattern" ap38c6@e ap38d2@pat)) ap38de@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap38dc@t)))))))) ap38cd@pat* ap38ce@tmp*)))))))) ap38ca@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap38c8@t)))))) (set! ap4bfb@ap30e5@syntax-rules-macro ap30e5@syntax-rules-macro) (set! ap30e7@quasiquote-macro (letrec* ((ap38e1@datum (lambda (ap39e2@x) (list (ap3081@scheme-stx 'quote) (ap2eda@mkstx ap39e2@x '() '() '())))) (ap38fd@quasicons* (lambda (ap39da@x ap39db@y) (let ap39e0@f ((ap39de@x ap39da@x)) (if (null? ap39de@x) ap39db@y (ap38ff@quasicons (car ap39de@x) (ap39e0@f (cdr ap39de@x))))))) (ap38ff@quasicons (lambda (ap39b4@x ap39b5@y) (let ((ap39b8@t ap39b5@y)) (let ((ap39ba@ls/false (ap30f9@syntax-dispatch ap39b8@t '(#(scheme-id quote) any)))) (if ap39ba@ls/false (apply (lambda (ap39bc@dy) (let ((ap39be@t ap39b4@x)) (let ((ap39c0@ls/false (ap30f9@syntax-dispatch ap39be@t '(#(scheme-id quote) any)))) (if ap39c0@ls/false (apply (lambda (ap39c2@dx) (list (ap3081@scheme-stx 'quote) (cons ap39c2@dx ap39bc@dy))) ap39c0@ls/false) (let ((ap39c4@t ap39be@t)) (let ((ap39c6@ls/false (ap30f9@syntax-dispatch ap39c4@t '_))) (if ap39c6@ls/false (apply (lambda () (let ((ap39c8@t ap39bc@dy)) (let ((ap39ca@ls/false (ap30f9@syntax-dispatch ap39c8@t '()))) (if ap39ca@ls/false (apply (lambda () (list (ap3081@scheme-stx 'list) ap39b4@x)) ap39ca@ls/false) (let ((ap39cc@t ap39c8@t)) (let ((ap39ce@ls/false (ap30f9@syntax-dispatch ap39cc@t '_))) (if ap39ce@ls/false (apply (lambda () (list (ap3081@scheme-stx 'cons) ap39b4@x ap39b5@y)) ap39ce@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap39cc@t)))))))) ap39c6@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap39c4@t)))))))) ap39ba@ls/false) (let ((ap39d0@t ap39b8@t)) (let ((ap39d2@ls/false (ap30f9@syntax-dispatch ap39d0@t '(#(scheme-id list) . each-any)))) (if ap39d2@ls/false (apply (lambda (ap39d4@stuff) (cons* (ap3081@scheme-stx 'list) ap39b4@x ap39d4@stuff)) ap39d2@ls/false) (let ((ap39d6@t ap39d0@t)) (let ((ap39d8@ls/false (ap30f9@syntax-dispatch ap39d6@t '_))) (if ap39d8@ls/false (apply (lambda () (list (ap3081@scheme-stx 'cons) ap39b4@x ap39b5@y)) ap39d8@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap39d6@t)))))))))))) (ap3901@quasiappend (lambda (ap399a@x ap399b@y) (let ((ap399e@ls (let ap39a2@f ((ap39a0@x ap399a@x)) (if (null? ap39a0@x) (let ((ap39a4@t ap399b@y)) (let ((ap39a6@ls/false (ap30f9@syntax-dispatch ap39a4@t '(#(scheme-id quote) ())))) (if ap39a6@ls/false (apply (lambda () '()) ap39a6@ls/false) (let ((ap39a8@t ap39a4@t)) (let ((ap39aa@ls/false (ap30f9@syntax-dispatch ap39a8@t '_))) (if ap39aa@ls/false (apply (lambda () (list ap399b@y)) ap39aa@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap39a8@t))))))) (let ((ap39ac@t (car ap39a0@x))) (let ((ap39ae@ls/false (ap30f9@syntax-dispatch ap39ac@t '(#(scheme-id quote) ())))) (if ap39ae@ls/false (apply (lambda () (ap39a2@f (cdr ap39a0@x))) ap39ae@ls/false) (let ((ap39b0@t ap39ac@t)) (let ((ap39b2@ls/false (ap30f9@syntax-dispatch ap39b0@t '_))) (if ap39b2@ls/false (apply (lambda () (cons (car ap39a0@x) (ap39a2@f (cdr ap39a0@x)))) ap39b2@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap39b0@t))))))))))) (if (null? ap399e@ls) (list (ap3081@scheme-stx 'quote) '()) (if (null? (cdr ap399e@ls)) (car ap399e@ls) (cons* (ap3081@scheme-stx 'append) ap399e@ls)))))) (ap3903@quasivector (lambda (ap3968@x) (let ((ap396a@pat-x ap3968@x)) (let ((ap396c@t ap396a@pat-x)) (let ((ap396e@ls/false (ap30f9@syntax-dispatch ap396c@t '(#(scheme-id quote) each-any)))) (if ap396e@ls/false (apply (lambda (ap3970@x*) (list (ap3081@scheme-stx 'quote) (list->vector ap3970@x*))) ap396e@ls/false) (let ((ap3972@t ap396c@t)) (let ((ap3974@ls/false (ap30f9@syntax-dispatch ap3972@t '_))) (if ap3974@ls/false (apply (lambda () (let ap397c@f ((ap3976@x ap3968@x) (ap3977@k (lambda (ap397a@ls) (cons* (ap3081@scheme-stx 'vector) ap397a@ls)))) (let ((ap397e@t ap3976@x)) (let ((ap3980@ls/false (ap30f9@syntax-dispatch ap397e@t '(#(scheme-id quote) each-any)))) (if ap3980@ls/false (apply (lambda (ap3982@x*) (ap3977@k (map (lambda (ap3984@x) (list (ap3081@scheme-stx 'quote) ap3984@x)) ap3982@x*))) ap3980@ls/false) (let ((ap3986@t ap397e@t)) (let ((ap3988@ls/false (ap30f9@syntax-dispatch ap3986@t '(#(scheme-id list) . each-any)))) (if ap3988@ls/false (apply (lambda (ap398a@x*) (ap3977@k ap398a@x*)) ap3988@ls/false) (let ((ap398c@t ap3986@t)) (let ((ap398e@ls/false (ap30f9@syntax-dispatch ap398c@t '(#(scheme-id cons) any any)))) (if ap398e@ls/false (apply (lambda (ap3990@x ap3991@y) (ap397c@f ap3991@y (lambda (ap3994@ls) (ap3977@k (cons ap3990@x ap3994@ls))))) ap398e@ls/false) (let ((ap3996@t ap398c@t)) (let ((ap3998@ls/false (ap30f9@syntax-dispatch ap3996@t '_))) (if ap3998@ls/false (apply (lambda () (list (ap3081@scheme-stx 'list->vector) ap396a@pat-x)) ap3998@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3996@t))))))))))))))) ap3974@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3972@t)))))))))) (ap3905@vquasi (lambda (ap3946@p ap3947@lev) (let ((ap394a@t ap3946@p)) (let ((ap394c@ls/false (ap30f9@syntax-dispatch ap394a@t '(any . any)))) (if ap394c@ls/false (apply (lambda (ap394e@p ap394f@q) (let ((ap3952@t ap394e@p)) (let ((ap3954@ls/false (ap30f9@syntax-dispatch ap3952@t '(#(scheme-id unquote) . each-any)))) (if ap3954@ls/false (apply (lambda (ap3956@p) (if (= ap3947@lev '0) (ap38fd@quasicons* ap3956@p (ap3905@vquasi ap394f@q ap3947@lev)) (ap38ff@quasicons (ap38ff@quasicons (ap38e1@datum 'unquote) (ap3907@quasi ap3956@p (- ap3947@lev '1))) (ap3905@vquasi ap394f@q ap3947@lev)))) ap3954@ls/false) (let ((ap3958@t ap3952@t)) (let ((ap395a@ls/false (ap30f9@syntax-dispatch ap3958@t '(#(scheme-id unquote-splicing) . each-any)))) (if ap395a@ls/false (apply (lambda (ap395c@p) (if (= ap3947@lev '0) (ap3901@quasiappend ap395c@p (ap3905@vquasi ap394f@q ap3947@lev)) (ap38ff@quasicons (ap38ff@quasicons (ap38e1@datum 'unquote-splicing) (ap3907@quasi ap395c@p (- ap3947@lev '1))) (ap3905@vquasi ap394f@q ap3947@lev)))) ap395a@ls/false) (let ((ap395e@t ap3958@t)) (let ((ap3960@ls/false (ap30f9@syntax-dispatch ap395e@t 'any))) (if ap3960@ls/false (apply (lambda (ap3962@p) (ap38ff@quasicons (ap3907@quasi ap3962@p ap3947@lev) (ap3905@vquasi ap394f@q ap3947@lev))) ap3960@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap395e@t))))))))))) ap394c@ls/false) (let ((ap3964@t ap394a@t)) (let ((ap3966@ls/false (ap30f9@syntax-dispatch ap3964@t '()))) (if ap3966@ls/false (apply (lambda () (list (ap3081@scheme-stx 'quote) '())) ap3966@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3964@t))))))))) (ap3907@quasi (lambda (ap3910@p ap3911@lev) (let ((ap3914@t ap3910@p)) (let ((ap3916@ls/false (ap30f9@syntax-dispatch ap3914@t '(#(scheme-id unquote) any)))) (if ap3916@ls/false (apply (lambda (ap3918@p) (if (= ap3911@lev '0) ap3918@p (ap38ff@quasicons (ap38e1@datum 'unquote) (ap3907@quasi (list ap3918@p) (- ap3911@lev '1))))) ap3916@ls/false) (let ((ap391a@t ap3914@t)) (let ((ap391c@ls/false (ap30f9@syntax-dispatch ap391a@t '((#(scheme-id unquote) . each-any) . any)))) (if ap391c@ls/false (apply (lambda (ap391e@p ap391f@q) (if (= ap3911@lev '0) (ap38fd@quasicons* ap391e@p (ap3907@quasi ap391f@q ap3911@lev)) (ap38ff@quasicons (ap38ff@quasicons (ap38e1@datum 'unquote) (ap3907@quasi ap391e@p (- ap3911@lev '1))) (ap3907@quasi ap391f@q ap3911@lev)))) ap391c@ls/false) (let ((ap3922@t ap391a@t)) (let ((ap3924@ls/false (ap30f9@syntax-dispatch ap3922@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if ap3924@ls/false (apply (lambda (ap3926@p ap3927@q) (if (= ap3911@lev '0) (ap3901@quasiappend ap3926@p (ap3907@quasi ap3927@q ap3911@lev)) (ap38ff@quasicons (ap38ff@quasicons (ap38e1@datum 'unquote-splicing) (ap3907@quasi ap3926@p (- ap3911@lev '1))) (ap3907@quasi ap3927@q ap3911@lev)))) ap3924@ls/false) (let ((ap392a@t ap3922@t)) (let ((ap392c@ls/false (ap30f9@syntax-dispatch ap392a@t '(#(scheme-id quasiquote) any)))) (if ap392c@ls/false (apply (lambda (ap392e@p) (ap38ff@quasicons (ap38e1@datum 'quasiquote) (ap3907@quasi (list ap392e@p) (+ ap3911@lev '1)))) ap392c@ls/false) (let ((ap3930@t ap392a@t)) (let ((ap3932@ls/false (ap30f9@syntax-dispatch ap3930@t '(any . any)))) (if ap3932@ls/false (apply (lambda (ap3934@p ap3935@q) (ap38ff@quasicons (ap3907@quasi ap3934@p ap3911@lev) (ap3907@quasi ap3935@q ap3911@lev))) ap3932@ls/false) (let ((ap3938@t ap3930@t)) (let ((ap393a@ls/false (ap30f9@syntax-dispatch ap3938@t '#(vector each-any)))) (if (and ap393a@ls/false (apply (lambda (ap393c@x) (not (ap2ebe@stx? ap393c@x))) ap393a@ls/false)) (apply (lambda (ap393e@x) (ap3903@quasivector (ap3905@vquasi ap393e@x ap3911@lev))) ap393a@ls/false) (let ((ap3940@t ap3938@t)) (let ((ap3942@ls/false (ap30f9@syntax-dispatch ap3940@t 'any))) (if ap3942@ls/false (apply (lambda (ap3944@p) (list (ap3081@scheme-stx 'quote) ap3944@p)) ap3942@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3940@t))))))))))))))))))))))))) (lambda (ap3908@x) (let ((ap390a@t ap3908@x)) (let ((ap390c@ls/false (ap30f9@syntax-dispatch ap390a@t '(_ any)))) (if ap390c@ls/false (apply (lambda (ap390e@e) (ap3907@quasi ap390e@e '0)) ap390c@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap390a@t))))))) (set! ap4bfc@ap30e7@quasiquote-macro ap30e7@quasiquote-macro) (set! ap30e9@quasisyntax-macro (letrec* ((ap39e5@quasi (lambda (ap3a00@p ap3a01@lev) (let ((ap3a04@t ap3a00@p)) (let ((ap3a06@ls/false (ap30f9@syntax-dispatch ap3a04@t '(#(scheme-id unsyntax) any)))) (if ap3a06@ls/false (apply (lambda (ap3a08@p) (if (= ap3a01@lev '0) (let ((ap3a0a@g (gensym))) (values (list ap3a0a@g) (list ap3a08@p) ap3a0a@g)) (call-with-values (lambda () (ap39e5@quasi ap3a08@p (- ap3a01@lev '1))) (lambda (ap3a12@ap3a0d ap3a13@ap3a0f ap3a14@ap3a11) (let ((ap3a18@p ap3a14@ap3a11) (ap3a19@rhs* ap3a13@ap3a0f) (ap3a1a@lhs* ap3a12@ap3a0d)) (values ap3a1a@lhs* ap3a19@rhs* (list 'unsyntax ap3a18@p))))))) ap3a06@ls/false) (let ((ap3a1e@t ap3a04@t)) (let ((ap3a20@ls/false (ap30f9@syntax-dispatch ap3a1e@t '#(scheme-id unsyntax)))) (if (and ap3a20@ls/false (apply (lambda () (= ap3a01@lev '0)) ap3a20@ls/false)) (apply (lambda () (ap31d9@syntax-violation '#f '"incorrect use of unsyntax" ap3a00@p)) ap3a20@ls/false) (let ((ap3a22@t ap3a1e@t)) (let ((ap3a24@ls/false (ap30f9@syntax-dispatch ap3a22@t '((#(scheme-id unsyntax) . each-any) . any)))) (if ap3a24@ls/false (apply (lambda (ap3a26@p* ap3a27@q) (call-with-values (lambda () (ap39e5@quasi ap3a27@q ap3a01@lev)) (lambda (ap3a30@ap3a2b ap3a31@ap3a2d ap3a32@ap3a2f) (let ((ap3a36@q ap3a32@ap3a2f) (ap3a37@rhs* ap3a31@ap3a2d) (ap3a38@lhs* ap3a30@ap3a2b)) (if (= ap3a01@lev '0) (let ((ap3a3c@g* (map (lambda (ap3a3e@x) (gensym)) ap3a26@p*))) (values (append ap3a3c@g* ap3a38@lhs*) (append ap3a26@p* ap3a37@rhs*) (append ap3a3c@g* ap3a36@q))) (call-with-values (lambda () (ap39e5@quasi ap3a26@p* (- ap3a01@lev '1))) (lambda (ap3a46@ap3a41 ap3a47@ap3a43 ap3a48@ap3a45) (let ((ap3a4c@p* ap3a48@ap3a45) (ap3a4d@rhs2* ap3a47@ap3a43) (ap3a4e@lhs2* ap3a46@ap3a41)) (values (append ap3a4e@lhs2* ap3a38@lhs*) (append ap3a4d@rhs2* ap3a37@rhs*) (cons (cons 'unsyntax ap3a4c@p*) ap3a36@q)))))))))) ap3a24@ls/false) (let ((ap3a52@t ap3a22@t)) (let ((ap3a54@ls/false (ap30f9@syntax-dispatch ap3a52@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if ap3a54@ls/false (apply (lambda (ap3a56@p* ap3a57@q) (call-with-values (lambda () (ap39e5@quasi ap3a57@q ap3a01@lev)) (lambda (ap3a60@ap3a5b ap3a61@ap3a5d ap3a62@ap3a5f) (let ((ap3a66@q ap3a62@ap3a5f) (ap3a67@rhs* ap3a61@ap3a5d) (ap3a68@lhs* ap3a60@ap3a5b)) (if (= ap3a01@lev '0) (let ((ap3a6c@g* (map (lambda (ap3a6e@x) (gensym)) ap3a56@p*))) (values (append (map (lambda (ap3a70@g) (cons ap3a70@g '(...))) ap3a6c@g*) ap3a68@lhs*) (append ap3a56@p* ap3a67@rhs*) (append (apply append (map (lambda (ap3a72@g) (cons ap3a72@g '(...))) ap3a6c@g*)) ap3a66@q))) (call-with-values (lambda () (ap39e5@quasi ap3a56@p* (- ap3a01@lev '1))) (lambda (ap3a7a@ap3a75 ap3a7b@ap3a77 ap3a7c@ap3a79) (let ((ap3a80@p* ap3a7c@ap3a79) (ap3a81@rhs2* ap3a7b@ap3a77) (ap3a82@lhs2* ap3a7a@ap3a75)) (values (append ap3a82@lhs2* ap3a68@lhs*) (append ap3a81@rhs2* ap3a67@rhs*) (cons (cons 'unsyntax-splicing ap3a80@p*) ap3a66@q)))))))))) ap3a54@ls/false) (let ((ap3a86@t ap3a52@t)) (let ((ap3a88@ls/false (ap30f9@syntax-dispatch ap3a86@t '#(scheme-id unsyntax-splicing)))) (if (and ap3a88@ls/false (apply (lambda () (= ap3a01@lev '0)) ap3a88@ls/false)) (apply (lambda () (ap31d9@syntax-violation '#f '"incorrect use of unsyntax-splicing" ap3a00@p)) ap3a88@ls/false) (let ((ap3a8a@t ap3a86@t)) (let ((ap3a8c@ls/false (ap30f9@syntax-dispatch ap3a8a@t '(#(scheme-id quasisyntax) any)))) (if ap3a8c@ls/false (apply (lambda (ap3a8e@p) (call-with-values (lambda () (ap39e5@quasi ap3a8e@p (+ ap3a01@lev '1))) (lambda (ap3a96@ap3a91 ap3a97@ap3a93 ap3a98@ap3a95) (let ((ap3a9c@p ap3a98@ap3a95) (ap3a9d@rhs* ap3a97@ap3a93) (ap3a9e@lhs* ap3a96@ap3a91)) (values ap3a9e@lhs* ap3a9d@rhs* (list 'quasisyntax ap3a9c@p)))))) ap3a8c@ls/false) (let ((ap3aa2@t ap3a8a@t)) (let ((ap3aa4@ls/false (ap30f9@syntax-dispatch ap3aa2@t '(any . any)))) (if ap3aa4@ls/false (apply (lambda (ap3aa6@p ap3aa7@q) (call-with-values (lambda () (ap39e5@quasi ap3aa6@p ap3a01@lev)) (lambda (ap3ab6@ap3aab ap3ab7@ap3aad ap3ab8@ap3aaf) (call-with-values (lambda () (ap39e5@quasi ap3aa7@q ap3a01@lev)) (lambda (ap3abc@ap3ab1 ap3abd@ap3ab3 ap3abe@ap3ab5) (let ((ap3ac2@q ap3abe@ap3ab5) (ap3ac3@rhs2* ap3abd@ap3ab3) (ap3ac4@lhs2* ap3abc@ap3ab1) (ap3ac5@p ap3ab8@ap3aaf) (ap3ac6@rhs* ap3ab7@ap3aad) (ap3ac7@lhs* ap3ab6@ap3aab)) (values (append ap3ac4@lhs2* ap3ac7@lhs*) (append ap3ac3@rhs2* ap3ac6@rhs*) (cons ap3ac5@p ap3ac2@q)))))))) ap3aa4@ls/false) (let ((ap3ace@t ap3aa2@t)) (let ((ap3ad0@ls/false (ap30f9@syntax-dispatch ap3ace@t '#(vector each-any)))) (if ap3ad0@ls/false (apply (lambda (ap3ad2@x*) (call-with-values (lambda () (ap39e5@quasi ap3ad2@x* ap3a01@lev)) (lambda (ap3ada@ap3ad5 ap3adb@ap3ad7 ap3adc@ap3ad9) (let ((ap3ae0@x* ap3adc@ap3ad9) (ap3ae1@rhs* ap3adb@ap3ad7) (ap3ae2@lhs* ap3ada@ap3ad5)) (values ap3ae2@lhs* ap3ae1@rhs* (list->vector ap3ae0@x*)))))) ap3ad0@ls/false) (let ((ap3ae6@t ap3ace@t)) (let ((ap3ae8@ls/false (ap30f9@syntax-dispatch ap3ae6@t '_))) (if ap3ae8@ls/false (apply (lambda () (values '() '() ap3a00@p)) ap3ae8@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3ae6@t))))))))))))))))))))))))))))))) (lambda (ap39e6@x) (let ((ap39e8@t ap39e6@x)) (let ((ap39ea@ls/false (ap30f9@syntax-dispatch ap39e8@t '(_ any)))) (if ap39ea@ls/false (apply (lambda (ap39ec@e) (call-with-values (lambda () (ap39e5@quasi ap39ec@e '0)) (lambda (ap39f4@ap39ef ap39f5@ap39f1 ap39f6@ap39f3) (let ((ap39fa@v ap39f6@ap39f3) (ap39fb@rhs* ap39f5@ap39f1) (ap39fc@lhs* ap39f4@ap39ef)) (ap30af@bless (list 'syntax-case (cons 'list ap39fb@rhs*) '() (list ap39fc@lhs* (list 'syntax ap39fa@v)))))))) ap39ea@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap39e8@t))))))) (set! ap4bfd@ap30e9@quasisyntax-macro ap30e9@quasisyntax-macro) (set! ap30eb@define-struct-macro (lambda (ap3aea@stx) (ap31d9@syntax-violation '#f '"define-struct not supported" ap3aea@stx))) (set! ap4bfe@ap30eb@define-struct-macro ap30eb@define-struct-macro) (set! ap30ed@define-record-type-macro (lambda (ap3aec@x) (letrec* ((ap3aef@id (lambda (ap3ce2@ctxt . ap3ce4@str*) (ap31dd@datum->syntax ap3ce2@ctxt (string->symbol (apply string-append (map (lambda (ap3ce6@x) (if (symbol? ap3ce6@x) (symbol->string ap3ce6@x) (if (string? ap3ce6@x) ap3ce6@x (assertion-violation 'define-record-type '"BUG")))) ap3ce4@str*)))))) (ap3af1@get-record-name (lambda (ap3cd0@spec) (let ((ap3cd2@t ap3cd0@spec)) (let ((ap3cd4@ls/false (ap30f9@syntax-dispatch ap3cd2@t '(any any any)))) (if ap3cd4@ls/false (apply (lambda (ap3cd6@foo ap3cd7@make-foo ap3cd8@foo?) ap3cd6@foo) ap3cd4@ls/false) (let ((ap3cdc@t ap3cd2@t)) (let ((ap3cde@ls/false (ap30f9@syntax-dispatch ap3cdc@t 'any))) (if ap3cde@ls/false (apply (lambda (ap3ce0@foo) ap3ce0@foo) ap3cde@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3cdc@t))))))))) (ap3af3@get-record-constructor-name (lambda (ap3cbc@spec) (let ((ap3cbe@t ap3cbc@spec)) (let ((ap3cc0@ls/false (ap30f9@syntax-dispatch ap3cbe@t '(any any any)))) (if ap3cc0@ls/false (apply (lambda (ap3cc2@foo ap3cc3@make-foo ap3cc4@foo?) ap3cc3@make-foo) ap3cc0@ls/false) (let ((ap3cc8@t ap3cbe@t)) (let ((ap3cca@ls/false (ap30f9@syntax-dispatch ap3cc8@t 'any))) (if (and ap3cca@ls/false (apply (lambda (ap3ccc@foo) (ap2ef2@id? ap3ccc@foo)) ap3cca@ls/false)) (apply (lambda (ap3cce@foo) (ap3aef@id ap3cce@foo '"make-" (ap2f06@stx->datum ap3cce@foo))) ap3cca@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3cc8@t))))))))) (ap3af5@get-record-predicate-name (lambda (ap3ca8@spec) (let ((ap3caa@t ap3ca8@spec)) (let ((ap3cac@ls/false (ap30f9@syntax-dispatch ap3caa@t '(any any any)))) (if ap3cac@ls/false (apply (lambda (ap3cae@foo ap3caf@make-foo ap3cb0@foo?) ap3cb0@foo?) ap3cac@ls/false) (let ((ap3cb4@t ap3caa@t)) (let ((ap3cb6@ls/false (ap30f9@syntax-dispatch ap3cb4@t 'any))) (if (and ap3cb6@ls/false (apply (lambda (ap3cb8@foo) (ap2ef2@id? ap3cb8@foo)) ap3cb6@ls/false)) (apply (lambda (ap3cba@foo) (ap3aef@id ap3cba@foo (ap2f06@stx->datum ap3cba@foo) '"?")) ap3cb6@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3cb4@t))))))))) (ap3af7@get-clause (lambda (ap3c96@id ap3c97@ls) (let ((ap3c9a@t ap3c97@ls)) (let ((ap3c9c@ls/false (ap30f9@syntax-dispatch ap3c9a@t '()))) (if ap3c9c@ls/false (apply (lambda () '#f) ap3c9c@ls/false) (let ((ap3c9e@t ap3c9a@t)) (let ((ap3ca0@ls/false (ap30f9@syntax-dispatch ap3c9e@t '((any . any) . any)))) (if ap3ca0@ls/false (apply (lambda (ap3ca2@x ap3ca3@rest ap3ca4@ls) (if (ap2ef8@free-id=? (ap30af@bless ap3c96@id) ap3ca2@x) (cons ap3ca2@x ap3ca3@rest) (ap3af7@get-clause ap3c96@id ap3ca4@ls))) ap3ca0@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c9e@t))))))))) (ap3af9@foo-rtd-code (lambda (ap3c44@name ap3c45@clause* ap3c46@parent-rtd-code) (letrec* ((ap3c4b@convert-field-spec* (lambda (ap3c7c@ls) (list->vector (map (lambda (ap3c7e@x) (let ((ap3c80@t ap3c7e@x)) (let ((ap3c82@ls/false (ap30f9@syntax-dispatch ap3c80@t '(#(scheme-id mutable) any . any)))) (if ap3c82@ls/false (apply (lambda (ap3c84@name ap3c85@rest) (list 'mutable ap3c84@name)) ap3c82@ls/false) (let ((ap3c88@t ap3c80@t)) (let ((ap3c8a@ls/false (ap30f9@syntax-dispatch ap3c88@t '(#(scheme-id immutable) any . any)))) (if ap3c8a@ls/false (apply (lambda (ap3c8c@name ap3c8d@rest) (list 'immutable ap3c8c@name)) ap3c8a@ls/false) (let ((ap3c90@t ap3c88@t)) (let ((ap3c92@ls/false (ap30f9@syntax-dispatch ap3c90@t 'any))) (if ap3c92@ls/false (apply (lambda (ap3c94@name) (list 'immutable ap3c94@name)) ap3c92@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c90@t))))))))))) ap3c7c@ls))))) (let ((ap3c4c@uid-code (let ((ap3c54@t (ap3af7@get-clause 'nongenerative ap3c45@clause*))) (let ((ap3c56@ls/false (ap30f9@syntax-dispatch ap3c54@t '(_)))) (if ap3c56@ls/false (apply (lambda () (list 'quote (gensym))) ap3c56@ls/false) (let ((ap3c58@t ap3c54@t)) (let ((ap3c5a@ls/false (ap30f9@syntax-dispatch ap3c58@t '(_ any)))) (if ap3c5a@ls/false (apply (lambda (ap3c5c@uid) (list 'quote ap3c5c@uid)) ap3c5a@ls/false) (let ((ap3c5e@t ap3c58@t)) (let ((ap3c60@ls/false (ap30f9@syntax-dispatch ap3c5e@t '_))) (if ap3c60@ls/false (apply (lambda () '#f) ap3c60@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c5e@t))))))))))) (ap3c4d@sealed? (let ((ap3c62@t (ap3af7@get-clause 'sealed ap3c45@clause*))) (let ((ap3c64@ls/false (ap30f9@syntax-dispatch ap3c62@t '(_ #(atom #t))))) (if ap3c64@ls/false (apply (lambda () '#t) ap3c64@ls/false) (let ((ap3c66@t ap3c62@t)) (let ((ap3c68@ls/false (ap30f9@syntax-dispatch ap3c66@t '_))) (if ap3c68@ls/false (apply (lambda () '#f) ap3c68@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c66@t)))))))) (ap3c4e@opaque? (let ((ap3c6a@t (ap3af7@get-clause 'opaque ap3c45@clause*))) (let ((ap3c6c@ls/false (ap30f9@syntax-dispatch ap3c6a@t '(_ #(atom #t))))) (if ap3c6c@ls/false (apply (lambda () '#t) ap3c6c@ls/false) (let ((ap3c6e@t ap3c6a@t)) (let ((ap3c70@ls/false (ap30f9@syntax-dispatch ap3c6e@t '_))) (if ap3c70@ls/false (apply (lambda () '#f) ap3c70@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c6e@t)))))))) (ap3c4f@fields (let ((ap3c72@t (ap3af7@get-clause 'fields ap3c45@clause*))) (let ((ap3c74@ls/false (ap30f9@syntax-dispatch ap3c72@t '(_ . each-any)))) (if ap3c74@ls/false (apply (lambda (ap3c76@field-spec*) (list 'quote (ap3c4b@convert-field-spec* ap3c76@field-spec*))) ap3c74@ls/false) (let ((ap3c78@t ap3c72@t)) (let ((ap3c7a@ls/false (ap30f9@syntax-dispatch ap3c78@t '_))) (if ap3c7a@ls/false (apply (lambda () ''#()) ap3c7a@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c78@t))))))))) (ap30af@bless (list 'make-record-type-descriptor (list 'quote ap3c44@name) ap3c46@parent-rtd-code ap3c4c@uid-code ap3c4d@sealed? ap3c4e@opaque? ap3c4f@fields)))))) (ap3afb@parent-rtd-code (lambda (ap3c2c@clause*) (let ((ap3c2e@t (ap3af7@get-clause 'parent ap3c2c@clause*))) (let ((ap3c30@ls/false (ap30f9@syntax-dispatch ap3c2e@t '(_ any)))) (if ap3c30@ls/false (apply (lambda (ap3c32@name) (list 'record-type-descriptor ap3c32@name)) ap3c30@ls/false) (let ((ap3c34@t ap3c2e@t)) (let ((ap3c36@ls/false (ap30f9@syntax-dispatch ap3c34@t '#(atom #f)))) (if ap3c36@ls/false (apply (lambda () (let ((ap3c38@t (ap3af7@get-clause 'parent-rtd ap3c2c@clause*))) (let ((ap3c3a@ls/false (ap30f9@syntax-dispatch ap3c38@t '(_ any any)))) (if ap3c3a@ls/false (apply (lambda (ap3c3c@rtd ap3c3d@rcd) ap3c3c@rtd) ap3c3a@ls/false) (let ((ap3c40@t ap3c38@t)) (let ((ap3c42@ls/false (ap30f9@syntax-dispatch ap3c40@t '#(atom #f)))) (if ap3c42@ls/false (apply (lambda () '#f) ap3c42@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c40@t)))))))) ap3c36@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c34@t))))))))) (ap3afd@parent-rcd-code (lambda (ap3c14@clause*) (let ((ap3c16@t (ap3af7@get-clause 'parent ap3c14@clause*))) (let ((ap3c18@ls/false (ap30f9@syntax-dispatch ap3c16@t '(_ any)))) (if ap3c18@ls/false (apply (lambda (ap3c1a@name) (list 'record-constructor-descriptor ap3c1a@name)) ap3c18@ls/false) (let ((ap3c1c@t ap3c16@t)) (let ((ap3c1e@ls/false (ap30f9@syntax-dispatch ap3c1c@t '#(atom #f)))) (if ap3c1e@ls/false (apply (lambda () (let ((ap3c20@t (ap3af7@get-clause 'parent-rtd ap3c14@clause*))) (let ((ap3c22@ls/false (ap30f9@syntax-dispatch ap3c20@t '(_ any any)))) (if ap3c22@ls/false (apply (lambda (ap3c24@rtd ap3c25@rcd) ap3c25@rcd) ap3c22@ls/false) (let ((ap3c28@t ap3c20@t)) (let ((ap3c2a@ls/false (ap30f9@syntax-dispatch ap3c28@t '#(atom #f)))) (if ap3c2a@ls/false (apply (lambda () '#f) ap3c2a@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c28@t)))))))) ap3c1e@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c1c@t))))))))) (ap3aff@foo-rcd-code (lambda (ap3c0c@clause* ap3c0d@foo-rtd ap3c0e@protocol ap3c0f@parent-rcd-code) (list 'make-record-constructor-descriptor ap3c0d@foo-rtd ap3c0f@parent-rcd-code ap3c0e@protocol))) (ap3b01@get-protocol-code (lambda (ap3c00@clause*) (let ((ap3c02@t (ap3af7@get-clause 'protocol ap3c00@clause*))) (let ((ap3c04@ls/false (ap30f9@syntax-dispatch ap3c02@t '(_ any)))) (if ap3c04@ls/false (apply (lambda (ap3c06@expr) ap3c06@expr) ap3c04@ls/false) (let ((ap3c08@t ap3c02@t)) (let ((ap3c0a@ls/false (ap30f9@syntax-dispatch ap3c08@t '_))) (if ap3c0a@ls/false (apply (lambda () '#f) ap3c0a@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3c08@t))))))))) (ap3b03@get-fields (lambda (ap3bee@clause*) (let ((ap3bf0@t ap3bee@clause*)) (let ((ap3bf2@ls/false (ap30f9@syntax-dispatch ap3bf0@t '()))) (if ap3bf2@ls/false (apply (lambda () '()) ap3bf2@ls/false) (let ((ap3bf4@t ap3bf0@t)) (let ((ap3bf6@ls/false (ap30f9@syntax-dispatch ap3bf4@t '((#(scheme-id fields) . each-any) . _)))) (if ap3bf6@ls/false (apply (lambda (ap3bf8@f*) ap3bf8@f*) ap3bf6@ls/false) (let ((ap3bfa@t ap3bf4@t)) (let ((ap3bfc@ls/false (ap30f9@syntax-dispatch ap3bfa@t '(_ . any)))) (if ap3bfc@ls/false (apply (lambda (ap3bfe@rest) (ap3b03@get-fields ap3bfe@rest)) ap3bfc@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3bfa@t)))))))))))) (ap3b05@get-mutator-indices (lambda (ap3bd6@fields) (let ap3bdc@f ((ap3bd8@fields ap3bd6@fields) (ap3bd9@i '0)) (let ((ap3bde@t ap3bd8@fields)) (let ((ap3be0@ls/false (ap30f9@syntax-dispatch ap3bde@t '()))) (if ap3be0@ls/false (apply (lambda () '()) ap3be0@ls/false) (let ((ap3be2@t ap3bde@t)) (let ((ap3be4@ls/false (ap30f9@syntax-dispatch ap3be2@t '((#(scheme-id mutable) . _) . any)))) (if ap3be4@ls/false (apply (lambda (ap3be6@rest) (cons ap3bd9@i (ap3bdc@f ap3be6@rest (+ ap3bd9@i '1)))) ap3be4@ls/false) (let ((ap3be8@t ap3be2@t)) (let ((ap3bea@ls/false (ap30f9@syntax-dispatch ap3be8@t '(_ . any)))) (if ap3bea@ls/false (apply (lambda (ap3bec@rest) (ap3bdc@f ap3bec@rest (+ ap3bd9@i '1))) ap3bea@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3be8@t))))))))))))) (ap3b07@get-mutators (lambda (ap3bac@foo ap3bad@fields) (letrec* ((ap3bb1@gen-name (lambda (ap3bd4@x) (ap31dd@datum->syntax ap3bac@foo (string->symbol (string-append (symbol->string (ap31df@syntax->datum ap3bac@foo)) '"-" (symbol->string (ap31df@syntax->datum ap3bd4@x)) '"-set!")))))) (let ap3bb4@f ((ap3bb2@fields ap3bad@fields)) (let ((ap3bb6@t ap3bb2@fields)) (let ((ap3bb8@ls/false (ap30f9@syntax-dispatch ap3bb6@t '()))) (if ap3bb8@ls/false (apply (lambda () '()) ap3bb8@ls/false) (let ((ap3bba@t ap3bb6@t)) (let ((ap3bbc@ls/false (ap30f9@syntax-dispatch ap3bba@t '((#(scheme-id mutable) any any any) . any)))) (if ap3bbc@ls/false (apply (lambda (ap3bbe@name ap3bbf@accessor ap3bc0@mutator ap3bc1@rest) (cons ap3bc0@mutator (ap3bb4@f ap3bc1@rest))) ap3bbc@ls/false) (let ((ap3bc6@t ap3bba@t)) (let ((ap3bc8@ls/false (ap30f9@syntax-dispatch ap3bc6@t '((#(scheme-id mutable) any) . any)))) (if ap3bc8@ls/false (apply (lambda (ap3bca@name ap3bcb@rest) (cons (ap3bb1@gen-name ap3bca@name) (ap3bb4@f ap3bcb@rest))) ap3bc8@ls/false) (let ((ap3bce@t ap3bc6@t)) (let ((ap3bd0@ls/false (ap30f9@syntax-dispatch ap3bce@t '(_ . any)))) (if ap3bd0@ls/false (apply (lambda (ap3bd2@rest) (ap3bb4@f ap3bd2@rest)) ap3bd0@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3bce@t))))))))))))))))) (ap3b09@get-accessors (lambda (ap3b68@foo ap3b69@fields) (letrec* ((ap3b6d@gen-name (lambda (ap3baa@x) (ap31dd@datum->syntax ap3b68@foo (string->symbol (string-append (symbol->string (ap31df@syntax->datum ap3b68@foo)) '"-" (symbol->string (ap31df@syntax->datum ap3baa@x)))))))) (map (lambda (ap3b6e@field) (let ((ap3b70@t ap3b6e@field)) (let ((ap3b72@ls/false (ap30f9@syntax-dispatch ap3b70@t '(#(scheme-id mutable) any any any)))) (if (and ap3b72@ls/false (apply (lambda (ap3b74@name ap3b75@accessor ap3b76@mutator) (ap2ef2@id? ap3b75@accessor)) ap3b72@ls/false)) (apply (lambda (ap3b7a@name ap3b7b@accessor ap3b7c@mutator) ap3b7b@accessor) ap3b72@ls/false) (let ((ap3b80@t ap3b70@t)) (let ((ap3b82@ls/false (ap30f9@syntax-dispatch ap3b80@t '(#(scheme-id immutable) any any)))) (if (and ap3b82@ls/false (apply (lambda (ap3b84@name ap3b85@accessor) (ap2ef2@id? ap3b85@accessor)) ap3b82@ls/false)) (apply (lambda (ap3b88@name ap3b89@accessor) ap3b89@accessor) ap3b82@ls/false) (let ((ap3b8c@t ap3b80@t)) (let ((ap3b8e@ls/false (ap30f9@syntax-dispatch ap3b8c@t '(#(scheme-id mutable) any)))) (if (and ap3b8e@ls/false (apply (lambda (ap3b90@name) (ap2ef2@id? ap3b90@name)) ap3b8e@ls/false)) (apply (lambda (ap3b92@name) (ap3b6d@gen-name ap3b92@name)) ap3b8e@ls/false) (let ((ap3b94@t ap3b8c@t)) (let ((ap3b96@ls/false (ap30f9@syntax-dispatch ap3b94@t '(#(scheme-id immutable) any)))) (if (and ap3b96@ls/false (apply (lambda (ap3b98@name) (ap2ef2@id? ap3b98@name)) ap3b96@ls/false)) (apply (lambda (ap3b9a@name) (ap3b6d@gen-name ap3b9a@name)) ap3b96@ls/false) (let ((ap3b9c@t ap3b94@t)) (let ((ap3b9e@ls/false (ap30f9@syntax-dispatch ap3b9c@t 'any))) (if (and ap3b9e@ls/false (apply (lambda (ap3ba0@name) (ap2ef2@id? ap3ba0@name)) ap3b9e@ls/false)) (apply (lambda (ap3ba2@name) (ap3b6d@gen-name ap3ba2@name)) ap3b9e@ls/false) (let ((ap3ba4@t ap3b9c@t)) (let ((ap3ba6@ls/false (ap30f9@syntax-dispatch ap3ba4@t 'any))) (if ap3ba6@ls/false (apply (lambda (ap3ba8@others) (ap31d9@syntax-violation '#f '"invalid field spec" ap3b6e@field)) ap3ba6@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3ba4@t)))))))))))))))))))) ap3b69@fields)))) (ap3b0b@enumerate (lambda (ap3b60@ls) (let ap3b66@f ((ap3b62@ls ap3b60@ls) (ap3b63@i '0)) (if (null? ap3b62@ls) '() (cons ap3b63@i (ap3b66@f (cdr ap3b62@ls) (+ ap3b63@i '1))))))) (ap3b0d@do-define-record (lambda (ap3b38@namespec ap3b39@clause*) (let ((ap3b3c@foo (ap3af1@get-record-name ap3b38@namespec))) (let ((ap3b3e@foo-rtd (gensym))) (let ((ap3b40@foo-rcd (gensym))) (let ((ap3b42@protocol (gensym))) (let ((ap3b44@make-foo (ap3af3@get-record-constructor-name ap3b38@namespec))) (let ((ap3b46@fields (ap3b03@get-fields ap3b39@clause*))) (let ((ap3b48@idx* (ap3b0b@enumerate ap3b46@fields))) (let ((ap3b4a@foo-x* (ap3b09@get-accessors ap3b3c@foo ap3b46@fields))) (let ((ap3b4c@set-foo-x!* (ap3b07@get-mutators ap3b3c@foo ap3b46@fields))) (let ((ap3b4e@set-foo-idx* (ap3b05@get-mutator-indices ap3b46@fields))) (let ((ap3b50@foo? (ap3af5@get-record-predicate-name ap3b38@namespec))) (let ((ap3b52@foo-rtd-code (ap3af9@foo-rtd-code ap3b3c@foo ap3b39@clause* (ap3afb@parent-rtd-code ap3b39@clause*)))) (let ((ap3b54@foo-rcd-code (ap3aff@foo-rcd-code ap3b39@clause* ap3b3e@foo-rtd ap3b42@protocol (ap3afd@parent-rcd-code ap3b39@clause*)))) (let ((ap3b56@protocol-code (ap3b01@get-protocol-code ap3b39@clause*))) (ap30af@bless (cons 'begin (cons (list 'define ap3b3e@foo-rtd ap3b52@foo-rtd-code) (cons (list 'define ap3b42@protocol ap3b56@protocol-code) (cons (list 'define ap3b40@foo-rcd ap3b54@foo-rcd-code) (cons (list 'define-syntax ap3b3c@foo (list 'list ''$rtd (list 'syntax ap3b3e@foo-rtd) (list 'syntax ap3b40@foo-rcd))) (cons (list 'define ap3b50@foo? (list 'record-predicate ap3b3e@foo-rtd)) (cons (list 'define ap3b44@make-foo (list 'record-constructor ap3b40@foo-rcd)) (append (map (lambda (ap3b58@foo-x ap3b59@idx) (list 'define ap3b58@foo-x (list 'record-accessor ap3b3e@foo-rtd ap3b59@idx))) ap3b4a@foo-x* ap3b48@idx*) (map (lambda (ap3b5c@set-foo-x! ap3b5d@idx) (list 'define ap3b5c@set-foo-x! (list 'record-mutator ap3b3e@foo-rtd ap3b5d@idx))) ap3b4c@set-foo-x!* ap3b4e@set-foo-idx*)))))))))))))))))))))))))) (ap3b0f@verify-clauses (lambda (ap3b18@x ap3b19@cls*) (letrec* ((ap3b1d@valid-kwds (map ap30af@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (ap3b1f@free-id-member? (lambda (ap3b34@x ap3b35@ls) (and (pair? ap3b35@ls) (or (ap2ef8@free-id=? ap3b34@x (car ap3b35@ls)) (ap3b1f@free-id-member? ap3b34@x (cdr ap3b35@ls))))))) (let ap3b24@f ((ap3b20@cls* ap3b19@cls*) (ap3b21@seen* '())) (if (not (null? ap3b20@cls*)) (let ((ap3b26@t (car ap3b20@cls*))) (let ((ap3b28@ls/false (ap30f9@syntax-dispatch ap3b26@t '(any . any)))) (if ap3b28@ls/false (apply (lambda (ap3b2a@kwd ap3b2b@rest) (if (or (not (ap2ef2@id? ap3b2a@kwd)) (not (ap3b1f@free-id-member? ap3b2a@kwd ap3b1d@valid-kwds))) (ap31d9@syntax-violation '#f '"not a valid define-record-type keyword" ap3b2a@kwd) (if (ap2efe@bound-id-member? ap3b2a@kwd ap3b21@seen*) (ap31d9@syntax-violation '#f '"duplicate use of keyword " ap3b18@x ap3b2a@kwd) (ap3b24@f (cdr ap3b20@cls*) (cons ap3b2a@kwd ap3b21@seen*))))) ap3b28@ls/false) (let ((ap3b2e@t ap3b26@t)) (let ((ap3b30@ls/false (ap30f9@syntax-dispatch ap3b2e@t 'any))) (if ap3b30@ls/false (apply (lambda (ap3b32@cls) (ap31d9@syntax-violation '#f '"malformed define-record-type clause" ap3b32@cls)) ap3b30@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3b2e@t))))))) (void))))))) (let ((ap3b10@t ap3aec@x)) (let ((ap3b12@ls/false (ap30f9@syntax-dispatch ap3b10@t '(_ any . each-any)))) (if ap3b12@ls/false (apply (lambda (ap3b14@namespec ap3b15@clause*) (begin (ap3b0f@verify-clauses ap3aec@x ap3b15@clause*) (ap3b0d@do-define-record ap3b14@namespec ap3b15@clause*))) ap3b12@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3b10@t))))))) (set! ap4bff@ap30ed@define-record-type-macro ap30ed@define-record-type-macro) (set! ap30ef@define-condition-type-macro (lambda (ap3ce8@x) (letrec* ((ap3ceb@mkname (lambda (ap3d18@name ap3d19@suffix) (ap31dd@datum->syntax ap3d18@name (string->symbol (string-append (symbol->string (ap31df@syntax->datum ap3d18@name)) ap3d19@suffix)))))) (let ((ap3cec@t ap3ce8@x)) (let ((ap3cee@ls/false (ap30f9@syntax-dispatch ap3cec@t '(any any any any any . #(each (any any)))))) (if (and ap3cee@ls/false (apply (lambda (ap3cf0@ctxt ap3cf1@name ap3cf2@super ap3cf3@constructor ap3cf4@predicate ap3cf5@field* ap3cf6@accessor*) (and (ap2ef2@id? ap3cf1@name) (ap2ef2@id? ap3cf2@super) (ap2ef2@id? ap3cf3@constructor) (ap2ef2@id? ap3cf4@predicate) (for-all ap2ef2@id? ap3cf5@field*) (for-all ap2ef2@id? ap3cf6@accessor*))) ap3cee@ls/false)) (apply (lambda (ap3cfe@ctxt ap3cff@name ap3d00@super ap3d01@constructor ap3d02@predicate ap3d03@field* ap3d04@accessor*) (let ((ap3d0c@aux-accessor* (map (lambda (ap3d0e@x) (gensym)) ap3d04@accessor*))) (ap30af@bless (cons 'begin (cons (cons 'define-record-type (cons (list ap3cff@name ap3d01@constructor (gensym)) (cons (list 'parent ap3d00@super) (cons (cons 'fields (map (lambda (ap3d10@field ap3d11@aux) (list 'immutable ap3d10@field ap3d11@aux)) ap3d03@field* ap3d0c@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define ap3d02@predicate (list 'condition-predicate (list 'record-type-descriptor ap3cff@name))) (map (lambda (ap3d14@accessor ap3d15@aux) (list 'define ap3d14@accessor (list 'condition-accessor (list 'record-type-descriptor ap3cff@name) ap3d15@aux))) ap3d04@accessor* ap3d0c@aux-accessor*))))))) ap3cee@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3cec@t))))))) (set! ap4c00@ap30ef@define-condition-type-macro ap30ef@define-condition-type-macro) (set! ap30f1@incorrect-usage-macro (lambda (ap3d1c@e) (ap31d9@syntax-violation '#f '"incorrect usage of auxiliary keyword" ap3d1c@e))) (set! ap4c01@ap30f1@incorrect-usage-macro ap30f1@incorrect-usage-macro) (set! ap30f3@parameterize-macro (lambda (ap3d1e@e) (let ((ap3d20@t ap3d1e@e)) (let ((ap3d22@ls/false (ap30f9@syntax-dispatch ap3d20@t '(_ () any . each-any)))) (if ap3d22@ls/false (apply (lambda (ap3d24@b ap3d25@b*) (ap30af@bless (cons 'let (cons '() (cons ap3d24@b ap3d25@b*))))) ap3d22@ls/false) (let ((ap3d28@t ap3d20@t)) (let ((ap3d2a@ls/false (ap30f9@syntax-dispatch ap3d28@t '(_ #(each (any any)) any . each-any)))) (if ap3d2a@ls/false (apply (lambda (ap3d2c@olhs* ap3d2d@orhs* ap3d2e@b ap3d2f@b*) (let ((ap3d34@lhs* (ap31c7@generate-temporaries ap3d2c@olhs*)) (ap3d35@rhs* (ap31c7@generate-temporaries ap3d2d@orhs*))) (ap30af@bless (cons (list 'lambda (append ap3d34@lhs* ap3d35@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (ap3d38@lhs ap3d39@rhs) (list 'let (list (list 't (list ap3d38@lhs))) (list ap3d38@lhs ap3d39@rhs) (cons 'set! (cons ap3d39@rhs '(t))))) ap3d34@lhs* ap3d35@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons ap3d2e@b ap3d2f@b*))) '(swap)))))) (append ap3d2c@olhs* ap3d2d@orhs*))))) ap3d2a@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3d28@t))))))))) (set! ap4c02@ap30f3@parameterize-macro ap30f3@parameterize-macro) (set! ap30f5@foreign-call-transformer (lambda (ap3d3c@e ap3d3d@r ap3d3e@mr) (let ((ap3d42@t ap3d3c@e)) (let ((ap3d44@ls/false (ap30f9@syntax-dispatch ap3d42@t '(_ any . each-any)))) (if ap3d44@ls/false (apply (lambda (ap3d46@name ap3d47@arg*) (cons 'foreign-call (cons (ap311b@chi-expr ap3d46@name ap3d3d@r ap3d3e@mr) (ap3117@chi-expr* ap3d47@arg* ap3d3d@r ap3d3e@mr)))) ap3d44@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3d42@t)))))) (set! ap4c03@ap30f5@foreign-call-transformer ap30f5@foreign-call-transformer) (set! ap30f7@convert-pattern (lambda (ap3d4a@pattern ap3d4b@keys) (letrec* ((ap3d4f@cvt* (lambda (ap3dee@p* ap3def@n ap3df0@ids) (if (null? ap3dee@p*) (values '() ap3df0@ids) (call-with-values (lambda () (ap3d4f@cvt* (cdr ap3dee@p*) ap3def@n ap3df0@ids)) (lambda (ap3df8@ap3df5 ap3df9@ap3df7) (let ((ap3dfc@ids ap3df9@ap3df7) (ap3dfd@y ap3df8@ap3df5)) (call-with-values (lambda () (ap3d51@cvt (car ap3dee@p*) ap3def@n ap3dfc@ids)) (lambda (ap3e04@ap3e01 ap3e05@ap3e03) (let ((ap3e08@ids ap3e05@ap3e03) (ap3e09@x ap3e04@ap3e01)) (values (cons ap3e09@x ap3dfd@y) ap3e08@ids)))))))))) (ap3d51@cvt (lambda (ap3d52@p ap3d53@n ap3d54@ids) (let ((ap3d58@t ap3d52@p)) (let ((ap3d5a@ls/false (ap30f9@syntax-dispatch ap3d58@t 'any))) (if (and ap3d5a@ls/false (apply (lambda (ap3d5c@id) (ap2ef2@id? ap3d5c@id)) ap3d5a@ls/false)) (apply (lambda (ap3d5e@id) (if (ap2efe@bound-id-member? ap3d52@p ap3d4b@keys) (values (vector 'free-id ap3d52@p) ap3d54@ids) (if (ap2ef8@free-id=? ap3d52@p (ap3081@scheme-stx '_)) (values '_ ap3d54@ids) (values 'any (cons (cons ap3d52@p ap3d53@n) ap3d54@ids))))) ap3d5a@ls/false) (let ((ap3d60@t ap3d58@t)) (let ((ap3d62@ls/false (ap30f9@syntax-dispatch ap3d60@t '(any any)))) (if (and ap3d62@ls/false (apply (lambda (ap3d64@p ap3d65@dots) (ap30fb@ellipsis? ap3d65@dots)) ap3d62@ls/false)) (apply (lambda (ap3d68@p ap3d69@dots) (call-with-values (lambda () (ap3d51@cvt ap3d68@p (+ ap3d53@n '1) ap3d54@ids)) (lambda (ap3d70@ap3d6d ap3d71@ap3d6f) (let ((ap3d74@ids ap3d71@ap3d6f) (ap3d75@p ap3d70@ap3d6d)) (values (if (eq? ap3d75@p 'any) 'each-any (vector 'each ap3d75@p)) ap3d74@ids))))) ap3d62@ls/false) (let ((ap3d78@t ap3d60@t)) (let ((ap3d7a@ls/false (ap30f9@syntax-dispatch ap3d78@t '(any any . #(each+ any () any))))) (if (and ap3d7a@ls/false (apply (lambda (ap3d7c@x ap3d7d@dots ap3d7e@ys ap3d7f@z) (ap30fb@ellipsis? ap3d7d@dots)) ap3d7a@ls/false)) (apply (lambda (ap3d84@x ap3d85@dots ap3d86@ys ap3d87@z) (call-with-values (lambda () (ap3d51@cvt ap3d87@z ap3d53@n ap3d54@ids)) (lambda (ap3d90@ap3d8d ap3d91@ap3d8f) (let ((ap3d94@ids ap3d91@ap3d8f) (ap3d95@z ap3d90@ap3d8d)) (call-with-values (lambda () (ap3d4f@cvt* ap3d86@ys ap3d53@n ap3d94@ids)) (lambda (ap3d9c@ap3d99 ap3d9d@ap3d9b) (let ((ap3da0@ids ap3d9d@ap3d9b) (ap3da1@ys ap3d9c@ap3d99)) (call-with-values (lambda () (ap3d51@cvt ap3d84@x (+ ap3d53@n '1) ap3da0@ids)) (lambda (ap3da8@ap3da5 ap3da9@ap3da7) (let ((ap3dac@ids ap3da9@ap3da7) (ap3dad@x ap3da8@ap3da5)) (values (vector 'each+ ap3dad@x (reverse ap3da1@ys) ap3d95@z) ap3dac@ids))))))))))) ap3d7a@ls/false) (let ((ap3db0@t ap3d78@t)) (let ((ap3db2@ls/false (ap30f9@syntax-dispatch ap3db0@t '(any . any)))) (if ap3db2@ls/false (apply (lambda (ap3db4@x ap3db5@y) (call-with-values (lambda () (ap3d51@cvt ap3db5@y ap3d53@n ap3d54@ids)) (lambda (ap3dbc@ap3db9 ap3dbd@ap3dbb) (let ((ap3dc0@ids ap3dbd@ap3dbb) (ap3dc1@y ap3dbc@ap3db9)) (call-with-values (lambda () (ap3d51@cvt ap3db4@x ap3d53@n ap3dc0@ids)) (lambda (ap3dc8@ap3dc5 ap3dc9@ap3dc7) (let ((ap3dcc@ids ap3dc9@ap3dc7) (ap3dcd@x ap3dc8@ap3dc5)) (values (cons ap3dcd@x ap3dc1@y) ap3dcc@ids)))))))) ap3db2@ls/false) (let ((ap3dd0@t ap3db0@t)) (let ((ap3dd2@ls/false (ap30f9@syntax-dispatch ap3dd0@t '()))) (if ap3dd2@ls/false (apply (lambda () (values '() ap3d54@ids)) ap3dd2@ls/false) (let ((ap3dd4@t ap3dd0@t)) (let ((ap3dd6@ls/false (ap30f9@syntax-dispatch ap3dd4@t '#(vector each-any)))) (if (and ap3dd6@ls/false (apply (lambda (ap3dd8@p) (not (ap2ebe@stx? ap3dd8@p))) ap3dd6@ls/false)) (apply (lambda (ap3dda@p) (call-with-values (lambda () (ap3d51@cvt ap3dda@p ap3d53@n ap3d54@ids)) (lambda (ap3de0@ap3ddd ap3de1@ap3ddf) (let ((ap3de4@ids ap3de1@ap3ddf) (ap3de5@p ap3de0@ap3ddd)) (values (vector 'vector ap3de5@p) ap3de4@ids))))) ap3dd6@ls/false) (let ((ap3de8@t ap3dd4@t)) (let ((ap3dea@ls/false (ap30f9@syntax-dispatch ap3de8@t 'any))) (if ap3dea@ls/false (apply (lambda (ap3dec@datum) (values (vector 'atom (ap2f06@stx->datum ap3dec@datum)) ap3d54@ids)) ap3dea@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3de8@t))))))))))))))))))))))))) (ap3d51@cvt ap3d4a@pattern '0 '())))) (set! ap4c04@ap30f7@convert-pattern ap30f7@convert-pattern) (set! ap30f9@syntax-dispatch (letrec* ((ap3e0d@stx^ (lambda (ap3ee8@e ap3ee9@m* ap3eea@s* ap3eeb@ae*) (if (and (null? ap3ee9@m*) (null? ap3eea@s*) (null? ap3eeb@ae*)) ap3ee8@e (ap2eda@mkstx ap3ee8@e ap3ee9@m* ap3eea@s* ap3eeb@ae*)))) (ap3e0f@match-each (lambda (ap3ec8@e ap3ec9@p ap3eca@m* ap3ecb@s* ap3ecc@ae*) (if (pair? ap3ec8@e) (let ((ap3ed2@first (ap3e1b@match (car ap3ec8@e) ap3ec9@p ap3eca@m* ap3ecb@s* ap3ecc@ae* '()))) (and ap3ed2@first (let ((ap3ed4@rest (ap3e0f@match-each (cdr ap3ec8@e) ap3ec9@p ap3eca@m* ap3ecb@s* ap3ecc@ae*))) (and ap3ed4@rest (cons ap3ed2@first ap3ed4@rest))))) (if (null? ap3ec8@e) '() (if (ap2ebe@stx? ap3ec8@e) (and (not (ap2e78@top-marked? ap3eca@m*)) (call-with-values (lambda () (join-wraps ap3eca@m* ap3ecb@s* ap3ecc@ae* ap3ec8@e)) (lambda (ap3edc@ap3ed7 ap3edd@ap3ed9 ap3ede@ap3edb) (let ((ap3ee2@ae* ap3ede@ap3edb) (ap3ee3@s* ap3edd@ap3ed9) (ap3ee4@m* ap3edc@ap3ed7)) (ap3e0f@match-each (ap2ec0@stx-expr ap3ec8@e) ap3ec9@p ap3ee4@m* ap3ee3@s* ap3ee2@ae*))))) (if (ap2a36@ap2908@annotation? ap3ec8@e) (ap3e0f@match-each (ap2a38@ap290c@annotation-expression ap3ec8@e) ap3ec9@p ap3eca@m* ap3ecb@s* ap3ecc@ae*) '#f)))))) (ap3e11@match-each+ (lambda (ap3e88@e ap3e89@x-pat ap3e8a@y-pat ap3e8b@z-pat ap3e8c@m* ap3e8d@s* ap3e8e@ae* ap3e8f@r) (let ap3ea0@f ((ap3e98@e ap3e88@e) (ap3e99@m* ap3e8c@m*) (ap3e9a@s* ap3e8d@s*) (ap3e9b@ae* ap3e8e@ae*)) (if (pair? ap3e98@e) (call-with-values (lambda () (ap3ea0@f (cdr ap3e98@e) ap3e99@m* ap3e9a@s* ap3e9b@ae*)) (lambda (ap3ea8@ap3ea3 ap3ea9@ap3ea5 ap3eaa@ap3ea7) (let ((ap3eae@r ap3eaa@ap3ea7) (ap3eaf@y-pat ap3ea9@ap3ea5) (ap3eb0@xr* ap3ea8@ap3ea3)) (if ap3eae@r (if (null? ap3eaf@y-pat) (let ((ap3eb4@xr (ap3e1b@match (car ap3e98@e) ap3e89@x-pat ap3e99@m* ap3e9a@s* ap3e9b@ae* '()))) (if ap3eb4@xr (values (cons ap3eb4@xr ap3eb0@xr*) ap3eaf@y-pat ap3eae@r) (values '#f '#f '#f))) (values '() (cdr ap3eaf@y-pat) (ap3e1b@match (car ap3e98@e) (car ap3eaf@y-pat) ap3e99@m* ap3e9a@s* ap3e9b@ae* ap3eae@r))) (values '#f '#f '#f))))) (if (ap2ebe@stx? ap3e98@e) (if (ap2e78@top-marked? ap3e99@m*) (values '() ap3e8a@y-pat (ap3e1b@match ap3e98@e ap3e8b@z-pat ap3e99@m* ap3e9a@s* ap3e9b@ae* ap3e8f@r)) (call-with-values (lambda () (join-wraps ap3e99@m* ap3e9a@s* ap3e9b@ae* ap3e98@e)) (lambda (ap3ebc@ap3eb7 ap3ebd@ap3eb9 ap3ebe@ap3ebb) (let ((ap3ec2@ae* ap3ebe@ap3ebb) (ap3ec3@s* ap3ebd@ap3eb9) (ap3ec4@m* ap3ebc@ap3eb7)) (ap3ea0@f (ap2ec0@stx-expr ap3e98@e) ap3ec4@m* ap3ec3@s* ap3ec2@ae*))))) (if (ap2a36@ap2908@annotation? ap3e98@e) (ap3ea0@f (ap2a38@ap290c@annotation-expression ap3e98@e) ap3e99@m* ap3e9a@s* ap3e9b@ae*) (values '() ap3e8a@y-pat (ap3e1b@match ap3e98@e ap3e8b@z-pat ap3e99@m* ap3e9a@s* ap3e9b@ae* ap3e8f@r)))))))) (ap3e13@match-each-any (lambda (ap3e6c@e ap3e6d@m* ap3e6e@s* ap3e6f@ae*) (if (pair? ap3e6c@e) (let ((ap3e74@l (ap3e13@match-each-any (cdr ap3e6c@e) ap3e6d@m* ap3e6e@s* ap3e6f@ae*))) (and ap3e74@l (cons (ap3e0d@stx^ (car ap3e6c@e) ap3e6d@m* ap3e6e@s* ap3e6f@ae*) ap3e74@l))) (if (null? ap3e6c@e) '() (if (ap2ebe@stx? ap3e6c@e) (and (not (ap2e78@top-marked? ap3e6d@m*)) (call-with-values (lambda () (join-wraps ap3e6d@m* ap3e6e@s* ap3e6f@ae* ap3e6c@e)) (lambda (ap3e7c@ap3e77 ap3e7d@ap3e79 ap3e7e@ap3e7b) (let ((ap3e82@ae* ap3e7e@ap3e7b) (ap3e83@s* ap3e7d@ap3e79) (ap3e84@m* ap3e7c@ap3e77)) (ap3e13@match-each-any (ap2ec0@stx-expr ap3e6c@e) ap3e84@m* ap3e83@s* ap3e82@ae*))))) (if (ap2a36@ap2908@annotation? ap3e6c@e) (ap3e13@match-each-any (ap2a38@ap290c@annotation-expression ap3e6c@e) ap3e6d@m* ap3e6e@s* ap3e6f@ae*) '#f)))))) (ap3e15@match-empty (lambda (ap3e66@p ap3e67@r) (if (null? ap3e66@p) ap3e67@r (if (eq? ap3e66@p '_) ap3e67@r (if (eq? ap3e66@p 'any) (cons '() ap3e67@r) (if (pair? ap3e66@p) (ap3e15@match-empty (car ap3e66@p) (ap3e15@match-empty (cdr ap3e66@p) ap3e67@r)) (if (eq? ap3e66@p 'each-any) (cons '() ap3e67@r) (let ((ap3e6a@t (vector-ref ap3e66@p '0))) (if (memv ap3e6a@t '(each)) (ap3e15@match-empty (vector-ref ap3e66@p '1) ap3e67@r) (if (memv ap3e6a@t '(each+)) (ap3e15@match-empty (vector-ref ap3e66@p '1) (ap3e15@match-empty (reverse (vector-ref ap3e66@p '2)) (ap3e15@match-empty (vector-ref ap3e66@p '3) ap3e67@r))) (if (memv ap3e6a@t '(free-id atom)) ap3e67@r (if (memv ap3e6a@t '(scheme-id atom)) ap3e67@r (if (memv ap3e6a@t '(vector)) (ap3e15@match-empty (vector-ref ap3e66@p '1) ap3e67@r) (assertion-violation 'syntax-dispatch '"invalid pattern" ap3e66@p)))))))))))))) (ap3e17@combine (lambda (ap3e62@r* ap3e63@r) (if (null? (car ap3e62@r*)) ap3e63@r (cons (map car ap3e62@r*) (ap3e17@combine (map cdr ap3e62@r*) ap3e63@r))))) (ap3e19@match* (lambda (ap3e3e@e ap3e3f@p ap3e40@m* ap3e41@s* ap3e42@ae* ap3e43@r) (if (null? ap3e3f@p) (and (null? ap3e3e@e) ap3e43@r) (if (pair? ap3e3f@p) (and (pair? ap3e3e@e) (ap3e1b@match (car ap3e3e@e) (car ap3e3f@p) ap3e40@m* ap3e41@s* ap3e42@ae* (ap3e1b@match (cdr ap3e3e@e) (cdr ap3e3f@p) ap3e40@m* ap3e41@s* ap3e42@ae* ap3e43@r))) (if (eq? ap3e3f@p 'each-any) (let ((ap3e4a@l (ap3e13@match-each-any ap3e3e@e ap3e40@m* ap3e41@s* ap3e42@ae*))) (and ap3e4a@l (cons ap3e4a@l ap3e43@r))) (let ((ap3e4c@t (vector-ref ap3e3f@p '0))) (if (memv ap3e4c@t '(each)) (if (null? ap3e3e@e) (ap3e15@match-empty (vector-ref ap3e3f@p '1) ap3e43@r) (let ((ap3e4e@r* (ap3e0f@match-each ap3e3e@e (vector-ref ap3e3f@p '1) ap3e40@m* ap3e41@s* ap3e42@ae*))) (and ap3e4e@r* (ap3e17@combine ap3e4e@r* ap3e43@r)))) (if (memv ap3e4c@t '(free-id)) (and (symbol? ap3e3e@e) (ap2e78@top-marked? ap3e40@m*) (ap2ef8@free-id=? (ap3e0d@stx^ ap3e3e@e ap3e40@m* ap3e41@s* ap3e42@ae*) (vector-ref ap3e3f@p '1)) ap3e43@r) (if (memv ap3e4c@t '(scheme-id)) (and (symbol? ap3e3e@e) (ap2e78@top-marked? ap3e40@m*) (ap2ef8@free-id=? (ap3e0d@stx^ ap3e3e@e ap3e40@m* ap3e41@s* ap3e42@ae*) (ap3081@scheme-stx (vector-ref ap3e3f@p '1))) ap3e43@r) (if (memv ap3e4c@t '(each+)) (call-with-values (lambda () (ap3e11@match-each+ ap3e3e@e (vector-ref ap3e3f@p '1) (vector-ref ap3e3f@p '2) (vector-ref ap3e3f@p '3) ap3e40@m* ap3e41@s* ap3e42@ae* ap3e43@r)) (lambda (ap3e56@ap3e51 ap3e57@ap3e53 ap3e58@ap3e55) (let ((ap3e5c@r ap3e58@ap3e55) (ap3e5d@y-pat ap3e57@ap3e53) (ap3e5e@xr* ap3e56@ap3e51)) (and ap3e5c@r (null? ap3e5d@y-pat) (if (null? ap3e5e@xr*) (ap3e15@match-empty (vector-ref ap3e3f@p '1) ap3e5c@r) (ap3e17@combine ap3e5e@xr* ap3e5c@r)))))) (if (memv ap3e4c@t '(atom)) (and (fast-equal? (vector-ref ap3e3f@p '1) (ap2f04@strip ap3e3e@e ap3e40@m*)) ap3e43@r) (if (memv ap3e4c@t '(vector)) (and (vector? ap3e3e@e) (ap3e1b@match (vector->list ap3e3e@e) (vector-ref ap3e3f@p '1) ap3e40@m* ap3e41@s* ap3e42@ae* ap3e43@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" ap3e3f@p))))))))))))) (ap3e1b@match (lambda (ap3e20@e ap3e21@p ap3e22@m* ap3e23@s* ap3e24@ae* ap3e25@r) (if (not ap3e25@r) '#f (if (eq? ap3e21@p '_) ap3e25@r (if (eq? ap3e21@p 'any) (cons (ap3e0d@stx^ ap3e20@e ap3e22@m* ap3e23@s* ap3e24@ae*) ap3e25@r) (if (ap2ebe@stx? ap3e20@e) (and (not (ap2e78@top-marked? ap3e22@m*)) (call-with-values (lambda () (join-wraps ap3e22@m* ap3e23@s* ap3e24@ae* ap3e20@e)) (lambda (ap3e32@ap3e2d ap3e33@ap3e2f ap3e34@ap3e31) (let ((ap3e38@ae* ap3e34@ap3e31) (ap3e39@s* ap3e33@ap3e2f) (ap3e3a@m* ap3e32@ap3e2d)) (ap3e1b@match (ap2ec0@stx-expr ap3e20@e) ap3e21@p ap3e3a@m* ap3e39@s* ap3e38@ae* ap3e25@r))))) (if (ap2a36@ap2908@annotation? ap3e20@e) (ap3e1b@match (ap2a38@ap290c@annotation-expression ap3e20@e) ap3e21@p ap3e22@m* ap3e23@s* ap3e24@ae* ap3e25@r) (ap3e19@match* ap3e20@e ap3e21@p ap3e22@m* ap3e23@s* ap3e24@ae* ap3e25@r))))))))) (lambda (ap3e1c@e ap3e1d@p) (ap3e1b@match ap3e1c@e ap3e1d@p '() '() '() '())))) (set! ap4c05@ap30f9@syntax-dispatch ap30f9@syntax-dispatch) (set! ap30fb@ellipsis? (lambda (ap3ef0@x) (and (ap2ef2@id? ap3ef0@x) (ap2ef8@free-id=? ap3ef0@x (ap3081@scheme-stx '...))))) (set! ap4c06@ap30fb@ellipsis? ap30fb@ellipsis?) (set! ap30fd@underscore? (lambda (ap3ef2@x) (and (ap2ef2@id? ap3ef2@x) (ap2ef8@free-id=? ap3ef2@x (ap3081@scheme-stx '_))))) (set! ap4c07@ap30fd@underscore? ap30fd@underscore?) (set! ap30ff@verify-literals (lambda (ap3ef4@lits ap3ef5@expr) (for-each (lambda (ap3ef8@x) (if (or (not (ap2ef2@id? ap3ef8@x)) (ap30fb@ellipsis? ap3ef8@x) (ap30fd@underscore? ap3ef8@x)) (ap31d9@syntax-violation '#f '"invalid literal" ap3ef5@expr ap3ef8@x) (void))) ap3ef4@lits))) (set! ap4c08@ap30ff@verify-literals ap30ff@verify-literals) (set! ap3101@syntax-case-transformer (letrec* ((ap3efb@build-dispatch-call (lambda (ap3f6c@pvars ap3f6d@expr ap3f6e@y ap3f6f@r ap3f70@mr) (let ((ap3f76@ids (map car ap3f6c@pvars)) (ap3f77@levels (map cdr ap3f6c@pvars))) (let ((ap3f7a@labels (map ap2e7e@gen-label ap3f76@ids)) (ap3f7b@new-vars (map ap2e7a@gen-lexical ap3f76@ids))) (let ((ap3f7e@body (ap311b@chi-expr (ap2edc@add-subst (ap2eb2@make-full-rib ap3f76@ids ap3f7a@labels) ap3f6d@expr) (append (map (lambda (ap3f80@label ap3f81@var ap3f82@level) (cons ap3f80@label (ap2f0c@make-binding 'syntax (cons ap3f81@var ap3f82@level)))) ap3f7a@labels ap3f7b@new-vars (map cdr ap3f6c@pvars)) ap3f6f@r) ap3f70@mr))) (list '(primitive apply) (ap2e55@ap2d87@build-lambda '#f ap3f7b@new-vars ap3f7e@body) ap3f6e@y)))))) (ap3efd@invalid-ids-error (lambda (ap3f60@id* ap3f61@e ap3f62@class) (let ap3f6a@find ((ap3f66@id* ap3f60@id*) (ap3f67@ok* '())) (if (null? ap3f66@id*) (ap31d9@syntax-violation '#f '"invalid syntax" ap3f61@e) (if (ap2ef2@id? (car ap3f66@id*)) (if (ap2efe@bound-id-member? (car ap3f66@id*) ap3f67@ok*) (ap31d5@syntax-error (car ap3f66@id*) '"duplicate " ap3f62@class) (ap3f6a@find (cdr ap3f66@id*) (cons (car ap3f66@id*) ap3f67@ok*))) (ap31d5@syntax-error (car ap3f66@id*) '"invalid " ap3f62@class)))))) (ap3eff@gen-clause (lambda (ap3f38@x ap3f39@keys ap3f3a@clauses ap3f3b@r ap3f3c@mr ap3f3d@pat ap3f3e@fender ap3f3f@expr) (call-with-values (lambda () (ap30f7@convert-pattern ap3f3d@pat ap3f39@keys)) (lambda (ap3f4c@ap3f49 ap3f4d@ap3f4b) (let ((ap3f50@pvars ap3f4d@ap3f4b) (ap3f51@p ap3f4c@ap3f49)) (if (not (ap2efc@distinct-bound-ids? (map car ap3f50@pvars))) (ap3efd@invalid-ids-error (map car ap3f50@pvars) ap3f3d@pat '"pattern variable") (if (not (for-all (lambda (ap3f54@x) (not (ap30fb@ellipsis? (car ap3f54@x)))) ap3f50@pvars)) (ap31d9@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" ap3f3d@pat) (let ((ap3f56@y (ap2e7a@gen-lexical 'tmp))) (let ((ap3f58@test (if (eq? ap3f3e@fender '#t) ap3f56@y (let ((ap3f5a@call (ap3efb@build-dispatch-call ap3f50@pvars ap3f3e@fender ap3f56@y ap3f3b@r ap3f3c@mr))) (list 'if ap3f56@y ap3f5a@call (list 'quote '#f)))))) (let ((ap3f5c@conseq (ap3efb@build-dispatch-call ap3f50@pvars ap3f3f@expr ap3f56@y ap3f3b@r ap3f3c@mr))) (let ((ap3f5e@altern (ap3f01@gen-syntax-case ap3f38@x ap3f39@keys ap3f3a@clauses ap3f3b@r ap3f3c@mr))) (list (ap2e55@ap2d87@build-lambda '#f (list ap3f56@y) (list 'if ap3f58@test ap3f5c@conseq ap3f5e@altern)) (list '(primitive syntax-dispatch) ap3f38@x (list 'quote ap3f51@p)))))))))))))) (ap3f01@gen-syntax-case (lambda (ap3f16@x ap3f17@keys ap3f18@clauses ap3f19@r ap3f1a@mr) (if (null? ap3f18@clauses) (list '(primitive syntax-error) ap3f16@x) (let ((ap3f20@t (car ap3f18@clauses))) (let ((ap3f22@ls/false (ap30f9@syntax-dispatch ap3f20@t '(any any)))) (if ap3f22@ls/false (apply (lambda (ap3f24@pat ap3f25@expr) (if (and (ap2ef2@id? ap3f24@pat) (not (ap2efe@bound-id-member? ap3f24@pat ap3f17@keys)) (not (ap30fb@ellipsis? ap3f24@pat))) (if (ap2ef8@free-id=? ap3f24@pat (ap3081@scheme-stx '_)) (ap311b@chi-expr ap3f25@expr ap3f19@r ap3f1a@mr) (let ((ap3f28@lab (ap2e7e@gen-label ap3f24@pat)) (ap3f29@lex (ap2e7a@gen-lexical ap3f24@pat))) (let ((ap3f2c@body (ap311b@chi-expr (ap2edc@add-subst (ap2eb2@make-full-rib (list ap3f24@pat) (list ap3f28@lab)) ap3f25@expr) (cons (cons ap3f28@lab (ap2f0c@make-binding 'syntax (cons ap3f29@lex '0))) ap3f19@r) ap3f1a@mr))) (list (ap2e55@ap2d87@build-lambda '#f (list ap3f29@lex) ap3f2c@body) ap3f16@x)))) (ap3eff@gen-clause ap3f16@x ap3f17@keys (cdr ap3f18@clauses) ap3f19@r ap3f1a@mr ap3f24@pat '#t ap3f25@expr))) ap3f22@ls/false) (let ((ap3f2e@t ap3f20@t)) (let ((ap3f30@ls/false (ap30f9@syntax-dispatch ap3f2e@t '(any any any)))) (if ap3f30@ls/false (apply (lambda (ap3f32@pat ap3f33@fender ap3f34@expr) (ap3eff@gen-clause ap3f16@x ap3f17@keys (cdr ap3f18@clauses) ap3f19@r ap3f1a@mr ap3f32@pat ap3f33@fender ap3f34@expr)) ap3f30@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3f2e@t))))))))))) (lambda (ap3f02@e ap3f03@r ap3f04@mr) (let ((ap3f08@t ap3f02@e)) (let ((ap3f0a@ls/false (ap30f9@syntax-dispatch ap3f08@t '(_ any each-any . each-any)))) (if ap3f0a@ls/false (apply (lambda (ap3f0c@expr ap3f0d@keys ap3f0e@clauses) (begin (ap30ff@verify-literals ap3f0d@keys ap3f02@e) (let ((ap3f12@x (ap2e7a@gen-lexical 'tmp))) (let ((ap3f14@body (ap3f01@gen-syntax-case ap3f12@x ap3f0d@keys ap3f0e@clauses ap3f03@r ap3f04@mr))) (list (ap2e55@ap2d87@build-lambda '#f (list ap3f12@x) ap3f14@body) (ap311b@chi-expr ap3f0c@expr ap3f03@r ap3f04@mr)))))) ap3f0a@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3f08@t))))))) (set! ap4c09@ap3101@syntax-case-transformer ap3101@syntax-case-transformer) (set! ap3103@ellipsis-map (lambda (ap3f86@proc ap3f87@ls . ap3f8a@ls*) (letrec* ((ap3f8d@who '...)) (begin (if (not (list? ap3f87@ls)) (assertion-violation ap3f8d@who '"not a list" ap3f87@ls) (void)) (if (not (null? ap3f8a@ls*)) (let ((ap3f8e@n (length ap3f87@ls))) (for-each (lambda (ap3f90@x) (begin (if (not (list? ap3f90@x)) (assertion-violation ap3f8d@who '"not a list" ap3f90@x) (void)) (if (not (= (length ap3f90@x) ap3f8e@n)) (assertion-violation ap3f8d@who '"length mismatch" ap3f87@ls ap3f90@x) (void)))) ap3f8a@ls*)) (void)) (apply map ap3f86@proc ap3f87@ls ap3f8a@ls*))))) (set! ap4c0a@ap3103@ellipsis-map ap3103@ellipsis-map) (set! ap3105@syntax-transformer (letrec* ((ap3f93@gen-syntax (lambda (ap400a@src ap400b@e ap400c@r ap400d@maps ap400e@ellipsis? ap400f@vec?) (let ((ap4016@t ap400b@e)) (let ((ap4018@ls/false (ap30f9@syntax-dispatch ap4016@t 'any))) (if (and ap4018@ls/false (apply (lambda (ap401a@dots) (ap400e@ellipsis? ap401a@dots)) ap4018@ls/false)) (apply (lambda (ap401c@dots) (ap31d9@syntax-violation '#f '"misplaced ellipsis in syntax form" ap400a@src)) ap4018@ls/false) (let ((ap401e@t ap4016@t)) (let ((ap4020@ls/false (ap30f9@syntax-dispatch ap401e@t 'any))) (if (and ap4020@ls/false (apply (lambda (ap4022@id) (ap2ef2@id? ap4022@id)) ap4020@ls/false)) (apply (lambda (ap4024@id) (let ((ap4026@label (ap2f08@id->label ap400b@e))) (let ((ap4028@b (ap2f0a@label->binding ap4026@label ap400c@r))) (if (eq? (ap2f0e@binding-type ap4028@b) 'syntax) (call-with-values (lambda () (let ((ap402e@var.lev (ap2f10@binding-value ap4028@b))) (ap3f95@gen-ref ap400a@src (car ap402e@var.lev) (cdr ap402e@var.lev) ap400d@maps))) (lambda (ap4030@ap402b ap4031@ap402d) (let ((ap4034@maps ap4031@ap402d) (ap4035@var ap4030@ap402b)) (values (list 'ref ap4035@var) ap4034@maps)))) (values (list 'quote ap400b@e) ap400d@maps))))) ap4020@ls/false) (let ((ap4038@t ap401e@t)) (let ((ap403a@ls/false (ap30f9@syntax-dispatch ap4038@t '(any any)))) (if (and ap403a@ls/false (apply (lambda (ap403c@dots ap403d@e) (ap400e@ellipsis? ap403c@dots)) ap403a@ls/false)) (apply (lambda (ap4040@dots ap4041@e) (if ap400f@vec? (ap31d9@syntax-violation '#f '"misplaced ellipsis in syntax form" ap400a@src) (ap3f93@gen-syntax ap400a@src ap4041@e ap400c@r ap400d@maps (lambda (ap4044@x) '#f) '#f))) ap403a@ls/false) (let ((ap4046@t ap4038@t)) (let ((ap4048@ls/false (ap30f9@syntax-dispatch ap4046@t '(any any . any)))) (if (and ap4048@ls/false (apply (lambda (ap404a@x ap404b@dots ap404c@y) (ap400e@ellipsis? ap404b@dots)) ap4048@ls/false)) (apply (lambda (ap4050@x ap4051@dots ap4052@y) (let ap4068@f ((ap4056@y ap4052@y) (ap4057@k (lambda (ap405a@maps) (call-with-values (lambda () (ap3f93@gen-syntax ap400a@src ap4050@x ap400c@r (cons '() ap405a@maps) ap400e@ellipsis? '#f)) (lambda (ap4060@ap405d ap4061@ap405f) (let ((ap4064@maps ap4061@ap405f) (ap4065@x ap4060@ap405d)) (if (null? (car ap4064@maps)) (ap31d9@syntax-violation '#f '"extra ellipsis in syntax form" ap400a@src) (values (ap3f9b@gen-map ap4065@x (car ap4064@maps)) (cdr ap4064@maps))))))))) (let ((ap406a@t ap4056@y)) (let ((ap406c@ls/false (ap30f9@syntax-dispatch ap406a@t '()))) (if ap406c@ls/false (apply (lambda () (ap4057@k ap400d@maps)) ap406c@ls/false) (let ((ap406e@t ap406a@t)) (let ((ap4070@ls/false (ap30f9@syntax-dispatch ap406e@t '(any . any)))) (if (and ap4070@ls/false (apply (lambda (ap4072@dots ap4073@y) (ap400e@ellipsis? ap4072@dots)) ap4070@ls/false)) (apply (lambda (ap4076@dots ap4077@y) (ap4068@f ap4077@y (lambda (ap407a@maps) (call-with-values (lambda () (ap4057@k (cons '() ap407a@maps))) (lambda (ap4080@ap407d ap4081@ap407f) (let ((ap4084@maps ap4081@ap407f) (ap4085@x ap4080@ap407d)) (if (null? (car ap4084@maps)) (ap31d9@syntax-violation '#f '"extra ellipsis in syntax form" ap400a@src) (values (ap3f99@gen-mappend ap4085@x (car ap4084@maps)) (cdr ap4084@maps))))))))) ap4070@ls/false) (let ((ap4088@t ap406e@t)) (let ((ap408a@ls/false (ap30f9@syntax-dispatch ap4088@t '_))) (if ap408a@ls/false (apply (lambda () (call-with-values (lambda () (ap3f93@gen-syntax ap400a@src ap4056@y ap400c@r ap400d@maps ap400e@ellipsis? ap400f@vec?)) (lambda (ap4090@ap408d ap4091@ap408f) (let ((ap4094@maps ap4091@ap408f) (ap4095@y ap4090@ap408d)) (call-with-values (lambda () (ap4057@k ap4094@maps)) (lambda (ap409c@ap4099 ap409d@ap409b) (let ((ap40a0@maps ap409d@ap409b) (ap40a1@x ap409c@ap4099)) (values (ap3f97@gen-append ap40a1@x ap4095@y) ap40a0@maps)))))))) ap408a@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4088@t)))))))))))) ap4048@ls/false) (let ((ap40a4@t ap4046@t)) (let ((ap40a6@ls/false (ap30f9@syntax-dispatch ap40a4@t '(any . any)))) (if ap40a6@ls/false (apply (lambda (ap40a8@x ap40a9@y) (call-with-values (lambda () (ap3f93@gen-syntax ap400a@src ap40a8@x ap400c@r ap400d@maps ap400e@ellipsis? '#f)) (lambda (ap40b0@ap40ad ap40b1@ap40af) (let ((ap40b4@maps ap40b1@ap40af) (ap40b5@xnew ap40b0@ap40ad)) (call-with-values (lambda () (ap3f93@gen-syntax ap400a@src ap40a9@y ap400c@r ap40b4@maps ap400e@ellipsis? ap400f@vec?)) (lambda (ap40bc@ap40b9 ap40bd@ap40bb) (let ((ap40c0@maps ap40bd@ap40bb) (ap40c1@ynew ap40bc@ap40b9)) (values (ap3f9d@gen-cons ap400b@e ap40a8@x ap40a9@y ap40b5@xnew ap40c1@ynew) ap40c0@maps)))))))) ap40a6@ls/false) (let ((ap40c4@t ap40a4@t)) (let ((ap40c6@ls/false (ap30f9@syntax-dispatch ap40c4@t '#(vector each-any)))) (if ap40c6@ls/false (apply (lambda (ap40c8@ls) (call-with-values (lambda () (ap3f93@gen-syntax ap400a@src ap40c8@ls ap400c@r ap400d@maps ap400e@ellipsis? '#t)) (lambda (ap40ce@ap40cb ap40cf@ap40cd) (let ((ap40d2@maps ap40cf@ap40cd) (ap40d3@lsnew ap40ce@ap40cb)) (values (ap3f9f@gen-vector ap400b@e ap40c8@ls ap40d3@lsnew) ap40d2@maps))))) ap40c6@ls/false) (let ((ap40d6@t ap40c4@t)) (let ((ap40d8@ls/false (ap30f9@syntax-dispatch ap40d6@t '_))) (if ap40d8@ls/false (apply (lambda () (values (list 'quote ap400b@e) ap400d@maps)) ap40d8@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap40d6@t)))))))))))))))))))))))) (ap3f95@gen-ref (lambda (ap3ff0@src ap3ff1@var ap3ff2@level ap3ff3@maps) (if (= ap3ff2@level '0) (values ap3ff1@var ap3ff3@maps) (if (null? ap3ff3@maps) (ap31d9@syntax-violation '#f '"missing ellipsis in syntax form" ap3ff0@src) (call-with-values (lambda () (ap3f95@gen-ref ap3ff0@src ap3ff1@var (- ap3ff2@level '1) (cdr ap3ff3@maps))) (lambda (ap3ffc@ap3ff9 ap3ffd@ap3ffb) (let ((ap4000@outer-maps ap3ffd@ap3ffb) (ap4001@outer-var ap3ffc@ap3ff9)) (let ((ap4004@t (assq ap4001@outer-var (car ap3ff3@maps)))) (if ap4004@t ((lambda (ap4006@b) (values (cdr ap4006@b) ap3ff3@maps)) ap4004@t) (let ((ap4008@inner-var (ap2e7a@gen-lexical 'tmp))) (values ap4008@inner-var (cons (cons (cons ap4001@outer-var ap4008@inner-var) (car ap3ff3@maps)) ap4000@outer-maps)))))))))))) (ap3f97@gen-append (lambda (ap3fec@x ap3fed@y) (if (fast-equal? ap3fed@y ''()) ap3fec@x (list 'append ap3fec@x ap3fed@y)))) (ap3f99@gen-mappend (lambda (ap3fe8@e ap3fe9@map-env) (list 'apply '(primitive append) (ap3f9b@gen-map ap3fe8@e ap3fe9@map-env)))) (ap3f9b@gen-map (lambda (ap3fd6@e ap3fd7@map-env) (let ((ap3fda@formals (map cdr ap3fd7@map-env)) (ap3fdb@actuals (map (lambda (ap3fde@x) (list 'ref (car ap3fde@x))) ap3fd7@map-env))) (if (eq? (car ap3fd6@e) 'ref) (car ap3fdb@actuals) (if (for-all (lambda (ap3fe0@x) (and (eq? (car ap3fe0@x) 'ref) (memq (cadr ap3fe0@x) ap3fda@formals))) (cdr ap3fd6@e)) (let ((ap3fe2@args (map (let ((ap3fe4@r (map cons ap3fda@formals ap3fdb@actuals))) (lambda (ap3fe6@x) (cdr (assq (cadr ap3fe6@x) ap3fe4@r)))) (cdr ap3fd6@e)))) (cons 'map (cons (list 'primitive (car ap3fd6@e)) ap3fe2@args))) (cons* 'map (list 'lambda ap3fda@formals ap3fd6@e) ap3fdb@actuals)))))) (ap3f9d@gen-cons (lambda (ap3fc6@e ap3fc7@x ap3fc8@y ap3fc9@xnew ap3fca@ynew) (let ((ap3fd0@t (car ap3fca@ynew))) (if (memv ap3fd0@t '(quote)) (if (eq? (car ap3fc9@xnew) 'quote) (let ((ap3fd2@xnew (cadr ap3fc9@xnew)) (ap3fd3@ynew (cadr ap3fca@ynew))) (if (and (eq? ap3fd2@xnew ap3fc7@x) (eq? ap3fd3@ynew ap3fc8@y)) (list 'quote ap3fc6@e) (list 'quote (cons ap3fd2@xnew ap3fd3@ynew)))) (if (null? (cadr ap3fca@ynew)) (list 'list ap3fc9@xnew) (list 'cons ap3fc9@xnew ap3fca@ynew))) (if (memv ap3fd0@t '(list)) (cons 'list (cons ap3fc9@xnew (cdr ap3fca@ynew))) (list 'cons ap3fc9@xnew ap3fca@ynew)))))) (ap3f9f@gen-vector (lambda (ap3fc0@e ap3fc1@ls ap3fc2@lsnew) (if (eq? (car ap3fc2@lsnew) 'quote) (if (eq? (cadr ap3fc2@lsnew) ap3fc1@ls) (list 'quote ap3fc0@e) (list 'quote (list->vector (cadr ap3fc2@lsnew)))) (if (eq? (car ap3fc2@lsnew) 'list) (cons 'vector (cdr ap3fc2@lsnew)) (list 'list->vector ap3fc2@lsnew))))) (ap3fa1@regen (lambda (ap3fba@x) (let ((ap3fbc@t (car ap3fba@x))) (if (memv ap3fbc@t '(ref)) (cadr ap3fba@x) (if (memv ap3fbc@t '(primitive)) (list 'primitive (cadr ap3fba@x)) (if (memv ap3fbc@t '(quote)) (list 'quote (cadr ap3fba@x)) (if (memv ap3fbc@t '(lambda)) (ap2e55@ap2d87@build-lambda '#f (cadr ap3fba@x) (ap3fa1@regen (caddr ap3fba@x))) (if (memv ap3fbc@t '(map)) (let ((ap3fbe@ls (map ap3fa1@regen (cdr ap3fba@x)))) (cons '(primitive ellipsis-map) ap3fbe@ls)) (cons (list 'primitive (car ap3fba@x)) (map ap3fa1@regen (cdr ap3fba@x)))))))))))) (lambda (ap3fa2@e ap3fa3@r ap3fa4@mr) (let ((ap3fa8@t ap3fa2@e)) (let ((ap3faa@ls/false (ap30f9@syntax-dispatch ap3fa8@t '(_ any)))) (if ap3faa@ls/false (apply (lambda (ap3fac@x) (call-with-values (lambda () (ap3f93@gen-syntax ap3fa2@e ap3fac@x ap3fa3@r '() ap30fb@ellipsis? '#f)) (lambda (ap3fb2@ap3faf ap3fb3@ap3fb1) (let ((ap3fb6@maps ap3fb3@ap3fb1) (ap3fb7@e ap3fb2@ap3faf)) (ap3fa1@regen ap3fb7@e))))) ap3faa@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap3fa8@t))))))) (set! ap4c0b@ap3105@syntax-transformer ap3105@syntax-transformer) (set! ap3107@core-macro-transformer (lambda (ap40da@name) (let ((ap40dc@t ap40da@name)) (if (memv ap40dc@t '(quote)) ap30a9@quote-transformer (if (memv ap40dc@t '(lambda)) ap30ad@lambda-transformer (if (memv ap40dc@t '(case-lambda)) ap30ab@case-lambda-transformer (if (memv ap40dc@t '(letrec)) ap3091@letrec-transformer (if (memv ap40dc@t '(letrec*)) ap3093@letrec*-transformer (if (memv ap40dc@t '(let)) ap308f@let-transformer (if (memv ap40dc@t '(if)) ap30a1@if-transformer (if (memv ap40dc@t '(and)) ap30a3@and-transformer (if (memv ap40dc@t '(or)) ap30a5@or-transformer (if (memv ap40dc@t '(foreign-call)) ap30f5@foreign-call-transformer (if (memv ap40dc@t '(syntax-case)) ap3101@syntax-case-transformer (if (memv ap40dc@t '(syntax)) ap3105@syntax-transformer (if (memv ap40dc@t '(type-descriptor)) ap3097@type-descriptor-transformer (if (memv ap40dc@t '(record-type-descriptor)) ap3099@record-type-descriptor-transformer (if (memv ap40dc@t '(record-constructor-descriptor)) ap309b@record-constructor-descriptor-transformer (if (memv ap40dc@t '(fluid-let-syntax)) ap3095@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" ap40da@name)))))))))))))))))))) (set! ap4c0c@ap3107@core-macro-transformer ap3107@core-macro-transformer) (set! ap3109@symbol-macro (lambda (ap40de@x ap40df@set) (let ((ap40e2@t ap40de@x)) (let ((ap40e4@ls/false (ap30f9@syntax-dispatch ap40e2@t '(_ any)))) (if (and ap40e4@ls/false (apply (lambda (ap40e6@name) (and (ap2ef2@id? ap40e6@name) (memq (ap2ef4@id->sym ap40e6@name) ap40df@set))) ap40e4@ls/false)) (apply (lambda (ap40e8@name) (ap30af@bless (list 'quote ap40e8@name))) ap40e4@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap40e2@t)))))) (set! ap4c0d@ap3109@symbol-macro ap3109@symbol-macro) (set! ap310b@macro-transformer (lambda (ap40ea@x) (if (procedure? ap40ea@x) ap40ea@x (if (symbol? ap40ea@x) (let ((ap40ec@t ap40ea@x)) (if (memv ap40ec@t '(define-record-type)) ap30ed@define-record-type-macro (if (memv ap40ec@t '(define-struct)) ap30eb@define-struct-macro (if (memv ap40ec@t '(include)) ap30e1@include-macro (if (memv ap40ec@t '(cond)) ap30dd@cond-macro (if (memv ap40ec@t '(let)) ap30b5@let-macro (if (memv ap40ec@t '(do)) ap30d5@do-macro (if (memv ap40ec@t '(or)) ap30d9@or-macro (if (memv ap40ec@t '(and)) ap30db@and-macro (if (memv ap40ec@t '(let*)) ap30d7@let*-macro (if (memv ap40ec@t '(let-values)) ap30b7@let-values-macro (if (memv ap40ec@t '(let*-values)) ap30b9@let*-values-macro (if (memv ap40ec@t '(syntax-rules)) ap30e5@syntax-rules-macro (if (memv ap40ec@t '(quasiquote)) ap30e7@quasiquote-macro (if (memv ap40ec@t '(quasisyntax)) ap30e9@quasisyntax-macro (if (memv ap40ec@t '(with-syntax)) ap30b1@with-syntax-macro (if (memv ap40ec@t '(when)) ap309d@when-macro (if (memv ap40ec@t '(unless)) ap309f@unless-macro (if (memv ap40ec@t '(case)) ap30a7@case-macro (if (memv ap40ec@t '(identifier-syntax)) ap30d3@identifier-syntax-macro (if (memv ap40ec@t '(time)) ap30cb@time-macro (if (memv ap40ec@t '(delay)) ap30cd@delay-macro (if (memv ap40ec@t '(assert)) ap30cf@assert-macro (if (memv ap40ec@t '(endianness)) ap30d1@endianness-macro (if (memv ap40ec@t '(guard)) ap30c7@guard-macro (if (memv ap40ec@t '(define-enumeration)) ap30c9@define-enumeration-macro (if (memv ap40ec@t '(trace-lambda)) ap30bb@trace-lambda-macro (if (memv ap40ec@t '(trace-define)) ap30bd@trace-define-macro (if (memv ap40ec@t '(trace-define-syntax)) ap30bf@trace-define-syntax-macro (if (memv ap40ec@t '(trace-let-syntax)) ap30c3@trace-let-syntax-macro (if (memv ap40ec@t '(trace-letrec-syntax)) ap30c5@trace-letrec-syntax-macro (if (memv ap40ec@t '(define-condition-type)) ap30ef@define-condition-type-macro (if (memv ap40ec@t '(parameterize)) ap30f3@parameterize-macro (if (memv ap40ec@t '(include-into)) ap30e3@include-into-macro (if (memv ap40ec@t '(eol-style)) (lambda (ap40ee@x) (ap3109@symbol-macro ap40ee@x '(none lf cr crlf nel crnel ls))) (if (memv ap40ec@t '(error-handling-mode)) (lambda (ap40f0@x) (ap3109@symbol-macro ap40f0@x '(ignore raise replace))) (if (memv ap40ec@t '(buffer-mode)) (lambda (ap40f2@x) (ap3109@symbol-macro ap40f2@x '(none line block))) (if (memv ap40ec@t '(file-options)) ap2e6d@file-options-macro (if (memv ap40ec@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) ap30f1@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" ap40ea@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" ap40ea@x))))) (set! ap4c0e@ap310b@macro-transformer ap310b@macro-transformer) (set! ap310d@local-macro-transformer (lambda (ap40f4@x) (car ap40f4@x))) (set! ap4c0f@ap310d@local-macro-transformer ap310d@local-macro-transformer) (set! ap310f@do-macro-call (lambda (ap40f6@transformer ap40f7@expr ap40f8@rib) (let ((ap40fc@out (ap40f6@transformer (ap2ede@add-mark ap2ed6@anti-mark '#f ap40f7@expr '#f)))) (begin (let ap4100@f ((ap40fe@x ap40fc@out)) (if (not (ap2ebe@stx? ap40fe@x)) (if (pair? ap40fe@x) (begin (ap4100@f (car ap40fe@x)) (ap4100@f (cdr ap40fe@x))) (if (vector? ap40fe@x) (vector-for-each ap4100@f ap40fe@x) (if (symbol? ap40fe@x) (ap31d9@syntax-violation '#f '"raw symbol encountered in output of macro" ap40f7@expr ap40fe@x) (void)))) (void))) (ap2ede@add-mark (ap2ed4@gen-mark) ap40f8@rib ap40fc@out ap40f7@expr))))) (set! ap4c10@ap310f@do-macro-call ap310f@do-macro-call) (set! ap3111@chi-macro (lambda (ap4102@p ap4103@e ap4104@rib) (ap310f@do-macro-call (ap310b@macro-transformer ap4102@p) ap4103@e ap4104@rib))) (set! ap4c11@ap3111@chi-macro ap3111@chi-macro) (set! ap3113@chi-local-macro (lambda (ap4108@p ap4109@e ap410a@rib) (ap310f@do-macro-call (ap310d@local-macro-transformer ap4108@p) ap4109@e ap410a@rib))) (set! ap4c12@ap3113@chi-local-macro ap3113@chi-local-macro) (set! ap3115@chi-global-macro (lambda (ap410e@p ap410f@e ap4110@rib) (let ((ap4114@lib (car ap410e@p)) (ap4115@loc (cdr ap410e@p))) (begin (ap2d0f@ap2b5e@visit-library ap4114@lib) (let ((ap4118@x (symbol-value ap4115@loc))) (let ((ap411a@transformer (if (procedure? ap4118@x) ap4118@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" ap4118@x)))) (ap310f@do-macro-call ap411a@transformer ap410f@e ap4110@rib))))))) (set! ap4c13@ap3115@chi-global-macro ap3115@chi-global-macro) (set! ap3117@chi-expr* (lambda (ap411c@e* ap411d@r ap411e@mr) (if (null? ap411c@e*) '() (let ((ap4122@e (ap311b@chi-expr (car ap411c@e*) ap411d@r ap411e@mr))) (cons ap4122@e (ap3117@chi-expr* (cdr ap411c@e*) ap411d@r ap411e@mr)))))) (set! ap4c14@ap3117@chi-expr* ap3117@chi-expr*) (set! ap3119@chi-application (lambda (ap4124@e ap4125@r ap4126@mr) (let ((ap412a@t ap4124@e)) (let ((ap412c@ls/false (ap30f9@syntax-dispatch ap412a@t '(any . each-any)))) (if ap412c@ls/false (apply (lambda (ap412e@rator ap412f@rands) (let ((ap4132@rator (ap311b@chi-expr ap412e@rator ap4125@r ap4126@mr))) (cons ap4132@rator (ap3117@chi-expr* ap412f@rands ap4125@r ap4126@mr)))) ap412c@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap412a@t)))))) (set! ap4c15@ap3119@chi-application ap3119@chi-application) (set! ap311b@chi-expr (lambda (ap4134@e ap4135@r ap4136@mr) (call-with-values (lambda () (ap2f14@syntax-type ap4134@e ap4135@r)) (lambda (ap4140@ap413b ap4141@ap413d ap4142@ap413f) (let ((ap4146@kwd ap4142@ap413f) (ap4147@value ap4141@ap413d) (ap4148@type ap4140@ap413b)) (let ((ap414c@t ap4148@type)) (if (memv ap414c@t '(core-macro)) (let ((ap414e@transformer (ap3107@core-macro-transformer ap4147@value))) (ap414e@transformer ap4134@e ap4135@r ap4136@mr)) (if (memv ap414c@t '(global)) (let ((ap4150@lib (car ap4147@value))) (let ((ap4152@loc (cdr ap4147@value))) (begin ((ap3161@inv-collector) ap4150@lib) ap4152@loc))) (if (memv ap414c@t '(core-prim)) (let ((ap4154@name ap4147@value)) (list 'primitive ap4154@name)) (if (memv ap414c@t '(call)) (ap3119@chi-application ap4134@e ap4135@r ap4136@mr) (if (memv ap414c@t '(lexical)) (let ((ap4156@lex (ap3083@lexical-var ap4147@value))) ap4156@lex) (if (memv ap414c@t '(global-macro global-macro!)) (ap311b@chi-expr (ap3115@chi-global-macro ap4147@value ap4134@e '#f) ap4135@r ap4136@mr) (if (memv ap414c@t '(local-macro local-macro!)) (ap311b@chi-expr (ap3113@chi-local-macro ap4147@value ap4134@e '#f) ap4135@r ap4136@mr) (if (memv ap414c@t '(macro macro!)) (ap311b@chi-expr (ap3111@chi-macro ap4147@value ap4134@e '#f) ap4135@r ap4136@mr) (if (memv ap414c@t '(constant)) (let ((ap4158@datum ap4147@value)) (list 'quote ap4158@datum)) (if (memv ap414c@t '(set!)) (ap311d@chi-set! ap4134@e ap4135@r ap4136@mr) (if (memv ap414c@t '(begin)) (let ((ap415a@t ap4134@e)) (let ((ap415c@ls/false (ap30f9@syntax-dispatch ap415a@t '(_ any . each-any)))) (if ap415c@ls/false (apply (lambda (ap415e@x ap415f@x*) (ap2e57@ap2db7@build-sequence '#f (ap3117@chi-expr* (cons ap415e@x ap415f@x*) ap4135@r ap4136@mr))) ap415c@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap415a@t)))) (if (memv ap414c@t '(let-syntax letrec-syntax)) (let ((ap4162@t ap4134@e)) (let ((ap4164@ls/false (ap30f9@syntax-dispatch ap4162@t '(_ #(each (any any)) any . each-any)))) (if (and ap4164@ls/false (apply (lambda (ap4166@xlhs* ap4167@xrhs* ap4168@xbody ap4169@xbody*) (if (not (ap2efa@valid-bound-ids? ap4166@xlhs*)) (ap31d9@syntax-violation '#f '"invalid identifiers" ap4134@e) (void))) ap4164@ls/false)) (apply (lambda (ap416e@xlhs* ap416f@xrhs* ap4170@xbody ap4171@xbody*) (let ((ap4176@xlab* (map ap2e7e@gen-label ap416e@xlhs*))) (let ((ap4178@xrib (ap2eb2@make-full-rib ap416e@xlhs* ap4176@xlab*))) (let ((ap417a@xb* (map (lambda (ap417c@x) (ap2f2a@make-eval-transformer (ap3153@expand-transformer (if (eq? ap4148@type 'let-syntax) ap417c@x (ap2edc@add-subst ap4178@xrib ap417c@x)) ap4136@mr))) ap416f@xrhs*))) (ap2e57@ap2db7@build-sequence '#f (ap3117@chi-expr* (map (lambda (ap417e@x) (ap2edc@add-subst ap4178@xrib ap417e@x)) (cons ap4170@xbody ap4171@xbody*)) (append (map cons ap4176@xlab* ap417a@xb*) ap4135@r) (append (map cons ap4176@xlab* ap417a@xb*) ap4136@mr))))))) ap4164@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4162@t)))) (if (memv ap414c@t '(displaced-lexical)) (ap31d9@syntax-violation '#f '"identifier out of context" ap4134@e) (if (memv ap414c@t '(syntax)) (ap31d9@syntax-violation '#f '"reference to pattern variable outside a syntax form" ap4134@e) (if (memv ap414c@t '(define define-syntax module import library)) (ap31d9@syntax-violation '#f (string-append (let ((ap4180@t ap4148@type)) (if (memv ap4180@t '(define)) '"a definition" (if (memv ap4180@t '(define-syntax)) '"a define-syntax" (if (memv ap4180@t '(module)) '"a module definition" (if (memv ap4180@t '(library)) '"a library definition" (if (memv ap4180@t '(import)) '"an import declaration" (if (memv ap4180@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") ap4134@e) (if (memv ap414c@t '(mutable)) (ap31d9@syntax-violation '#f '"attempt to reference an unexportable variable" ap4134@e) (ap31d9@syntax-violation '#f '"invalid expression" ap4134@e))))))))))))))))))))))) (set! ap4c16@ap311b@chi-expr ap311b@chi-expr) (set! ap311d@chi-set! (lambda (ap4182@e ap4183@r ap4184@mr) (let ((ap4188@t ap4182@e)) (let ((ap418a@ls/false (ap30f9@syntax-dispatch ap4188@t '(_ any any)))) (if (and ap418a@ls/false (apply (lambda (ap418c@x ap418d@v) (ap2ef2@id? ap418c@x)) ap418a@ls/false)) (apply (lambda (ap4190@x ap4191@v) (call-with-values (lambda () (ap2f14@syntax-type ap4190@x ap4183@r)) (lambda (ap419a@ap4195 ap419b@ap4197 ap419c@ap4199) (let ((ap41a0@kwd ap419c@ap4199) (ap41a1@value ap419b@ap4197) (ap41a2@type ap419a@ap4195)) (let ((ap41a6@t ap41a2@type)) (if (memv ap41a6@t '(lexical)) (begin (ap3087@set-lexical-mutable! ap41a1@value '#t) (list 'set! (ap3083@lexical-var ap41a1@value) (ap311b@chi-expr ap4191@v ap4183@r ap4184@mr))) (if (memv ap41a6@t '(core-prim)) (ap31d9@syntax-violation '#f '"cannot modify imported core primitive" ap4182@e) (if (memv ap41a6@t '(global)) (ap31d9@syntax-violation '#f '"attempt to modify imported binding" ap4182@e) (if (memv ap41a6@t '(global-macro!)) (ap311b@chi-expr (ap3115@chi-global-macro ap41a1@value ap4182@e '#f) ap4183@r ap4184@mr) (if (memv ap41a6@t '(local-macro!)) (ap311b@chi-expr (ap3113@chi-local-macro ap41a1@value ap4182@e '#f) ap4183@r ap4184@mr) (if (memv ap41a6@t '(mutable)) (ap31d9@syntax-violation '#f '"attempt to assign to an unexportable variable" ap4182@e) (ap31d9@syntax-violation '#f '"invalid syntax" ap4182@e)))))))))))) ap418a@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4188@t)))))) (set! ap4c17@ap311d@chi-set! ap311d@chi-set!) (set! ap311f@verify-formals (lambda (ap41a8@fmls ap41a9@stx) (let ((ap41ac@t ap41a8@fmls)) (let ((ap41ae@ls/false (ap30f9@syntax-dispatch ap41ac@t 'each-any))) (if ap41ae@ls/false (apply (lambda (ap41b0@x*) (if (not (ap2efa@valid-bound-ids? ap41b0@x*)) (ap30b3@invalid-fmls-error ap41a9@stx ap41a8@fmls) (void))) ap41ae@ls/false) (let ((ap41b2@t ap41ac@t)) (let ((ap41b4@ls/false (ap30f9@syntax-dispatch ap41b2@t '#(each+ any () any)))) (if ap41b4@ls/false (apply (lambda (ap41b6@x* ap41b7@x) (if (not (ap2efa@valid-bound-ids? (cons ap41b7@x ap41b6@x*))) (ap30b3@invalid-fmls-error ap41a9@stx ap41a8@fmls) (void))) ap41b4@ls/false) (let ((ap41ba@t ap41b2@t)) (let ((ap41bc@ls/false (ap30f9@syntax-dispatch ap41ba@t '_))) (if ap41bc@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid syntax" ap41a9@stx)) ap41bc@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap41ba@t)))))))))))) (set! ap4c18@ap311f@verify-formals ap311f@verify-formals) (set! ap3121@chi-lambda-clause (lambda (ap41be@stx ap41bf@fmls ap41c0@body* ap41c1@r ap41c2@mr) (let ((ap41c8@t ap41bf@fmls)) (let ((ap41ca@ls/false (ap30f9@syntax-dispatch ap41c8@t 'each-any))) (if ap41ca@ls/false (apply (lambda (ap41cc@x*) (begin (ap311f@verify-formals ap41bf@fmls ap41be@stx) (let ((ap41ce@lex* (map ap2e7a@gen-lexical ap41cc@x*)) (ap41cf@lab* (map ap2e7e@gen-label ap41cc@x*))) (values ap41ce@lex* (ap3131@chi-internal (ap2edc@add-subst (ap2eb2@make-full-rib ap41cc@x* ap41cf@lab*) ap41c0@body*) (ap308b@add-lexicals ap41cf@lab* ap41ce@lex* ap41c1@r) ap41c2@mr))))) ap41ca@ls/false) (let ((ap41d2@t ap41c8@t)) (let ((ap41d4@ls/false (ap30f9@syntax-dispatch ap41d2@t '#(each+ any () any)))) (if ap41d4@ls/false (apply (lambda (ap41d6@x* ap41d7@x) (begin (ap311f@verify-formals ap41bf@fmls ap41be@stx) (let ((ap41da@lex* (map ap2e7a@gen-lexical ap41d6@x*)) (ap41db@lab* (map ap2e7e@gen-label ap41d6@x*)) (ap41dc@lex (ap2e7a@gen-lexical ap41d7@x)) (ap41dd@lab (ap2e7e@gen-label ap41d7@x))) (values (append ap41da@lex* ap41dc@lex) (ap3131@chi-internal (ap2edc@add-subst (ap2eb2@make-full-rib (cons ap41d7@x ap41d6@x*) (cons ap41dd@lab ap41db@lab*)) ap41c0@body*) (ap308b@add-lexicals (cons ap41dd@lab ap41db@lab*) (cons ap41dc@lex ap41da@lex*) ap41c1@r) ap41c2@mr))))) ap41d4@ls/false) (let ((ap41e2@t ap41d2@t)) (let ((ap41e4@ls/false (ap30f9@syntax-dispatch ap41e2@t '_))) (if ap41e4@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid syntax" ap41bf@fmls)) ap41e4@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap41e2@t)))))))))))) (set! ap4c19@ap3121@chi-lambda-clause ap3121@chi-lambda-clause) (set! ap3123@chi-lambda-clause* (lambda (ap41e6@stx ap41e7@fmls* ap41e8@body** ap41e9@r ap41ea@mr) (if (null? ap41e7@fmls*) (values '() '()) (call-with-values (lambda () (ap3121@chi-lambda-clause ap41e6@stx (car ap41e7@fmls*) (car ap41e8@body**) ap41e9@r ap41ea@mr)) (lambda (ap41f4@ap41f1 ap41f5@ap41f3) (let ((ap41f8@b ap41f5@ap41f3) (ap41f9@a ap41f4@ap41f1)) (call-with-values (lambda () (ap3123@chi-lambda-clause* ap41e6@stx (cdr ap41e7@fmls*) (cdr ap41e8@body**) ap41e9@r ap41ea@mr)) (lambda (ap4200@ap41fd ap4201@ap41ff) (let ((ap4204@b* ap4201@ap41ff) (ap4205@a* ap4200@ap41fd)) (values (cons ap41f9@a ap4205@a*) (cons ap41f8@b ap4204@b*))))))))))) (set! ap4c1a@ap3123@chi-lambda-clause* ap3123@chi-lambda-clause*) (set! ap3125@chi-defun (lambda (ap4208@x ap4209@r ap420a@mr) (let ((ap420e@fmls (car ap4208@x)) (ap420f@body* (cdr ap4208@x))) (call-with-values (lambda () (ap3121@chi-lambda-clause ap420e@fmls ap420e@fmls ap420f@body* ap4209@r ap420a@mr)) (lambda (ap4216@ap4213 ap4217@ap4215) (let ((ap421a@body ap4217@ap4215) (ap421b@fmls ap4216@ap4213)) (ap2e55@ap2d87@build-lambda '#f ap421b@fmls ap421a@body))))))) (set! ap4c1b@ap3125@chi-defun ap3125@chi-defun) (set! ap3127@chi-rhs (lambda (ap421e@rhs ap421f@r ap4220@mr) (let ((ap4224@t (car ap421e@rhs))) (if (memv ap4224@t '(defun)) (ap3125@chi-defun (cdr ap421e@rhs) ap421f@r ap4220@mr) (if (memv ap4224@t '(expr)) (let ((ap4226@expr (cdr ap421e@rhs))) (ap311b@chi-expr ap4226@expr ap421f@r ap4220@mr)) (if (memv ap4224@t '(top-expr)) (let ((ap4228@expr (cdr ap421e@rhs))) (ap2e57@ap2db7@build-sequence '#f (list (ap311b@chi-expr ap4228@expr ap421f@r ap4220@mr) (ap2e58@ap2db9@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" ap421e@rhs))))))) (set! ap4c1c@ap3127@chi-rhs ap3127@chi-rhs) (set! ap3129@expand-interaction-rhs*/init* (lambda (ap422a@lhs* ap422b@rhs* ap422c@init* ap422d@r ap422e@mr) (let ap4238@f ((ap4234@lhs* ap422a@lhs*) (ap4235@rhs* ap422b@rhs*)) (if (null? ap4234@lhs*) (map (lambda (ap423a@x) (ap311b@chi-expr ap423a@x ap422d@r ap422e@mr)) ap422c@init*) (let ((ap423c@lhs (car ap4234@lhs*)) (ap423d@rhs (car ap4235@rhs*))) (let ((ap4240@t (car ap423d@rhs))) (if (memv ap4240@t '(defun)) (let ((ap4242@rhs (ap3125@chi-defun (cdr ap423d@rhs) ap422d@r ap422e@mr))) (cons (list 'set! ap423c@lhs ap4242@rhs) (ap4238@f (cdr ap4234@lhs*) (cdr ap4235@rhs*)))) (if (memv ap4240@t '(expr)) (let ((ap4244@rhs (ap311b@chi-expr (cdr ap423d@rhs) ap422d@r ap422e@mr))) (cons (list 'set! ap423c@lhs ap4244@rhs) (ap4238@f (cdr ap4234@lhs*) (cdr ap4235@rhs*)))) (if (memv ap4240@t '(top-expr)) (let ((ap4246@e (ap311b@chi-expr (cdr ap423d@rhs) ap422d@r ap422e@mr))) (cons ap4246@e (ap4238@f (cdr ap4234@lhs*) (cdr ap4235@rhs*)))) (error 'expand-interaction '"invallid" ap423d@rhs)))))))))) (set! ap4c1d@ap3129@expand-interaction-rhs*/init* ap3129@expand-interaction-rhs*/init*) (set! ap312b@chi-rhs* (lambda (ap4248@rhs* ap4249@r ap424a@mr) (let ap4250@f ((ap424e@ls ap4248@rhs*)) (if (null? ap424e@ls) '() (let ((ap4252@a (ap3127@chi-rhs (car ap424e@ls) ap4249@r ap424a@mr))) (cons ap4252@a (ap4250@f (cdr ap424e@ls)))))))) (set! ap4c1e@ap312b@chi-rhs* ap312b@chi-rhs*) (set! ap312d@find-bound=? (lambda (ap4254@x ap4255@lhs* ap4256@rhs*) (if (null? ap4255@lhs*) '#f (if (ap2ef6@bound-id=? ap4254@x (car ap4255@lhs*)) (car ap4256@rhs*) (ap312d@find-bound=? ap4254@x (cdr ap4255@lhs*) (cdr ap4256@rhs*)))))) (set! ap4c1f@ap312d@find-bound=? ap312d@find-bound=?) (set! ap312f@find-dups (lambda (ap425a@ls) (let ap4260@f ((ap425c@ls ap425a@ls) (ap425d@dups '())) (if (null? ap425c@ls) ap425d@dups (let ((ap4262@t (ap312d@find-bound=? (car ap425c@ls) (cdr ap425c@ls) (cdr ap425c@ls)))) (if ap4262@t ((lambda (ap4264@x) (ap4260@f (cdr ap425c@ls) (cons (list (car ap425c@ls) ap4264@x) ap425d@dups))) ap4262@t) (ap4260@f (cdr ap425c@ls) ap425d@dups))))))) (set! ap4c20@ap312f@find-dups ap312f@find-dups) (set! ap3131@chi-internal (lambda (ap4266@e* ap4267@r ap4268@mr) (let ((ap426c@rib (ap2ea6@make-empty-rib))) (call-with-values (lambda () (ap3151@chi-body* (map (lambda (ap427e@x) (ap2edc@add-subst ap426c@rib ap427e@x)) (ap2ef0@syntax->list ap4266@e*)) ap4267@r ap4268@mr '() '() '() '() '() ap426c@rib '#f)) (lambda (ap4280@ap426f ap4281@ap4271 ap4282@ap4273 ap4283@ap4275 ap4284@ap4277 ap4285@ap4279 ap4286@ap427b ap4287@ap427d) (let ((ap4290@_exp* ap4287@ap427d) (ap4291@kwd* ap4286@ap427b) (ap4292@mod** ap4285@ap4279) (ap4293@rhs* ap4284@ap4277) (ap4294@lex* ap4283@ap4275) (ap4295@mr ap4282@ap4273) (ap4296@r ap4281@ap4271) (ap4297@e* ap4280@ap426f)) (begin (if (null? ap4297@e*) (ap31d9@syntax-violation '#f '"no expression in body" ap4297@e*) (void)) (let ((ap42a0@init* (ap3117@chi-expr* (append (apply append (reverse ap4292@mod**)) ap4297@e*) ap4296@r ap4295@mr))) (let ((ap42a2@rhs* (ap312b@chi-rhs* ap4293@rhs* ap4296@r ap4295@mr))) (ap2e5c@ap2dc1@build-letrec* '#f (reverse ap4294@lex*) (reverse ap42a2@rhs*) (ap2e57@ap2db7@build-sequence '#f ap42a0@init*))))))))))) (set! ap4c21@ap3131@chi-internal ap3131@chi-internal) (set! ap3133@parse-module (lambda (ap42a4@e) (let ((ap42a6@t ap42a4@e)) (let ((ap42a8@ls/false (ap30f9@syntax-dispatch ap42a6@t '(_ each-any . each-any)))) (if ap42a8@ls/false (apply (lambda (ap42aa@export* ap42ab@b*) (begin (if (not (for-all ap2ef2@id? ap42aa@export*)) (ap31d9@syntax-violation '#f '"module exports must be identifiers" ap42a4@e) (void)) (values '#f (list->vector ap42aa@export*) ap42ab@b*))) ap42a8@ls/false) (let ((ap42ae@t ap42a6@t)) (let ((ap42b0@ls/false (ap30f9@syntax-dispatch ap42ae@t '(_ any each-any . each-any)))) (if ap42b0@ls/false (apply (lambda (ap42b2@name ap42b3@export* ap42b4@b*) (begin (if (not (ap2ef2@id? ap42b2@name)) (ap31d9@syntax-violation '#f '"module name must be an identifier" ap42a4@e) (void)) (if (not (for-all ap2ef2@id? ap42b3@export*)) (ap31d9@syntax-violation '#f '"module exports must be identifiers" ap42a4@e) (void)) (values ap42b2@name (list->vector ap42b3@export*) ap42b4@b*))) ap42b0@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap42ae@t))))))))) (set! ap4c22@ap3133@parse-module ap3133@parse-module) (set! ap313d@module-interface? (lambda (ap42b8@x) (and (simple-struct? ap42b8@x) (eq? (simple-struct-name ap42b8@x) 'module-interface)))) (set! ap4c23@ap313d@module-interface? ap313d@module-interface?) (set! ap313f@module-interface-first-mark (lambda (ap42ba@x) (simple-struct-ref ap42ba@x '0))) (set! ap4c24@ap313f@module-interface-first-mark ap313f@module-interface-first-mark) (set! ap3141@set-module-interface-first-mark! (lambda (ap42bc@x ap42bd@val) (simple-struct-set! ap42bc@x '0 ap42bd@val))) (set! ap4c25@ap3141@set-module-interface-first-mark! ap3141@set-module-interface-first-mark!) (set! ap3143@module-interface-exp-id-vec (lambda (ap42c0@x) (simple-struct-ref ap42c0@x '1))) (set! ap4c26@ap3143@module-interface-exp-id-vec ap3143@module-interface-exp-id-vec) (set! ap3145@set-module-interface-exp-id-vec! (lambda (ap42c2@x ap42c3@val) (simple-struct-set! ap42c2@x '1 ap42c3@val))) (set! ap4c27@ap3145@set-module-interface-exp-id-vec! ap3145@set-module-interface-exp-id-vec!) (set! ap3147@module-interface-exp-lab-vec (lambda (ap42c6@x) (simple-struct-ref ap42c6@x '2))) (set! ap4c28@ap3147@module-interface-exp-lab-vec ap3147@module-interface-exp-lab-vec) (set! ap3149@set-module-interface-exp-lab-vec! (lambda (ap42c8@x ap42c9@val) (simple-struct-set! ap42c8@x '2 ap42c9@val))) (set! ap4c29@ap3149@set-module-interface-exp-lab-vec! ap3149@set-module-interface-exp-lab-vec!) (set! ap314b@dummy '3) (set! ap4c2a@ap314b@dummy ap314b@dummy) (set! ap314d@module-interface-exp-id* (lambda (ap42cc@iface ap42cd@id) (letrec* ((ap42d1@diff-marks (lambda (ap42d8@ls ap42d9@x) (begin (if (null? ap42d8@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((ap42dc@a (car ap42d8@ls))) (if (eq? ap42dc@a ap42d9@x) '() (cons ap42dc@a (ap42d1@diff-marks (cdr ap42d8@ls) ap42d9@x)))))))) (let ((ap42d2@diff (ap42d1@diff-marks (ap2ec4@stx-mark* ap42cd@id) (ap313f@module-interface-first-mark ap42cc@iface))) (ap42d3@id-vec (ap3143@module-interface-exp-id-vec ap42cc@iface))) (if (null? ap42d2@diff) ap42d3@id-vec (vector-map (lambda (ap42d6@x) (make-simple-struct 'stx '5 (list (ap2ec0@stx-expr ap42d6@x) (append ap42d2@diff (ap2ec4@stx-mark* ap42d6@x)) '() '()))) ap42d3@id-vec)))))) (set! ap4c2b@ap314d@module-interface-exp-id* ap314d@module-interface-exp-id*) (set! ap314f@chi-internal-module (lambda (ap42de@e ap42df@r ap42e0@mr ap42e1@lex* ap42e2@rhs* ap42e3@mod** ap42e4@kwd*) (call-with-values (lambda () (ap3133@parse-module ap42de@e)) (lambda (ap42f2@ap42ed ap42f3@ap42ef ap42f4@ap42f1) (let ((ap42f8@e* ap42f4@ap42f1) (ap42f9@exp-id* ap42f3@ap42ef) (ap42fa@name ap42f2@ap42ed)) (let ((ap42fe@rib (ap2ea6@make-empty-rib))) (let ((ap4300@e* (map (lambda (ap4302@x) (ap2edc@add-subst ap42fe@rib ap4302@x)) (ap2ef0@syntax->list ap42f8@e*)))) (call-with-values (lambda () (ap3151@chi-body* ap4300@e* ap42df@r ap42e0@mr ap42e1@lex* ap42e2@rhs* ap42e3@mod** ap42e4@kwd* '() ap42fe@rib '#f)) (lambda (ap4314@ap4305 ap4315@ap4307 ap4316@ap4309 ap4317@ap430b ap4318@ap430d ap4319@ap430f ap431a@ap4311 ap431b@ap4313) (let ((ap4324@_exp* ap431b@ap4313) (ap4325@kwd* ap431a@ap4311) (ap4326@mod** ap4319@ap430f) (ap4327@rhs* ap4318@ap430d) (ap4328@lex* ap4317@ap430b) (ap4329@mr ap4316@ap4309) (ap432a@r ap4315@ap4307) (ap432b@e* ap4314@ap4305)) (let ((ap4334@exp-lab* (vector-map (lambda (ap4338@x) (or (ap2f08@id->label (make-simple-struct 'stx '5 (list (ap2ef4@id->sym ap4338@x) (ap2ec4@stx-mark* ap4338@x) (list ap42fe@rib) '()))) (ap31d9@syntax-violation '#f '"cannot find module export" ap4338@x))) ap42f9@exp-id*)) (ap4335@mod** (cons ap432b@e* ap4326@mod**))) (if (not ap42fa@name) (values ap4328@lex* ap4327@rhs* ap42f9@exp-id* ap4334@exp-lab* ap432a@r ap4329@mr ap4335@mod** ap4325@kwd*) (let ((ap433a@lab (ap2e7e@gen-label 'module)) (ap433b@iface (make-simple-struct 'module-interface '4 (list (car (ap2ec4@stx-mark* ap42fa@name)) (vector-map (lambda (ap433e@x) (make-simple-struct 'stx '5 (list (ap2ec0@stx-expr ap433e@x) (ap2ec4@stx-mark* ap433e@x) '() '()))) ap42f9@exp-id*) ap4334@exp-lab*)))) (values ap4328@lex* ap4327@rhs* (vector ap42fa@name) (vector ap433a@lab) (cons (cons ap433a@lab (cons '$module ap433b@iface)) ap432a@r) (cons (cons ap433a@lab (cons '$module ap433b@iface)) ap4329@mr) ap4335@mod** ap4325@kwd*)))))))))))))) (set! ap4c2c@ap314f@chi-internal-module ap314f@chi-internal-module) (set! ap3151@chi-body* (lambda (ap4340@e* ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4346@kwd* ap4347@exp* ap4348@rib ap4349@top?) (if (null? ap4340@e*) (values ap4340@e* ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4346@kwd* ap4347@exp*) (let ((ap4354@e (car ap4340@e*))) (call-with-values (lambda () (ap2f14@syntax-type ap4354@e ap4341@r)) (lambda (ap435c@ap4357 ap435d@ap4359 ap435e@ap435b) (let ((ap4362@kwd ap435e@ap435b) (ap4363@value ap435d@ap4359) (ap4364@type ap435c@ap4357)) (let ((ap4368@kwd* (if (ap2ef2@id? ap4362@kwd) (cons ap4362@kwd ap4346@kwd*) ap4346@kwd*))) (let ((ap436a@t ap4364@type)) (if (memv ap436a@t '(define)) (call-with-values (lambda () (ap307b@parse-define ap4354@e)) (lambda (ap4370@ap436d ap4371@ap436f) (let ((ap4374@rhs ap4371@ap436f) (ap4375@id ap4370@ap436d)) (begin (if (ap2efe@bound-id-member? ap4375@id ap4368@kwd*) (ap31d9@syntax-violation '#f '"cannot redefine keyword" ap4354@e) (void)) (call-with-values (lambda () (ap2e82@gen-define-label+loc ap4375@id ap4348@rib)) (lambda (ap437c@ap4379 ap437d@ap437b) (let ((ap4380@lex ap437d@ap437b) (ap4381@lab ap437c@ap4379)) (begin (ap2ea8@extend-rib! ap4348@rib ap4375@id ap4381@lab) (ap3151@chi-body* (cdr ap4340@e*) (ap3089@add-lexical ap4381@lab ap4380@lex ap4341@r) ap4342@mr (cons ap4380@lex ap4343@lex*) (cons ap4374@rhs ap4344@rhs*) ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?))))))))) (if (memv ap436a@t '(define-syntax)) (call-with-values (lambda () (ap307d@parse-define-syntax ap4354@e)) (lambda (ap4388@ap4385 ap4389@ap4387) (let ((ap438c@rhs ap4389@ap4387) (ap438d@id ap4388@ap4385)) (begin (if (ap2efe@bound-id-member? ap438d@id ap4368@kwd*) (ap31d9@syntax-violation '#f '"cannot redefine keyword" ap4354@e) (void)) (let ((ap4390@lab (ap2e84@gen-define-label ap438d@id ap4348@rib)) (ap4391@expanded-rhs (ap3153@expand-transformer ap438c@rhs ap4342@mr))) (begin (ap2ea8@extend-rib! ap4348@rib ap438d@id ap4390@lab) (let ((ap4394@b (ap2f2a@make-eval-transformer ap4391@expanded-rhs))) (ap3151@chi-body* (cdr ap4340@e*) (cons (cons ap4390@lab ap4394@b) ap4341@r) (cons (cons ap4390@lab ap4394@b) ap4342@mr) ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?)))))))) (if (memv ap436a@t '(let-syntax letrec-syntax)) (let ((ap4396@t ap4354@e)) (let ((ap4398@ls/false (ap30f9@syntax-dispatch ap4396@t '(_ #(each (any any)) . each-any)))) (if (and ap4398@ls/false (apply (lambda (ap439a@xlhs* ap439b@xrhs* ap439c@xbody*) (if (not (ap2efa@valid-bound-ids? ap439a@xlhs*)) (ap31d9@syntax-violation '#f '"invalid identifiers" ap4354@e) (void))) ap4398@ls/false)) (apply (lambda (ap43a0@xlhs* ap43a1@xrhs* ap43a2@xbody*) (let ((ap43a6@xlab* (map ap2e7e@gen-label ap43a0@xlhs*))) (let ((ap43a8@xrib (ap2eb2@make-full-rib ap43a0@xlhs* ap43a6@xlab*))) (let ((ap43aa@xb* (map (lambda (ap43ac@x) (ap2f2a@make-eval-transformer (ap3153@expand-transformer (if (eq? ap4364@type 'let-syntax) ap43ac@x (ap2edc@add-subst ap43a8@xrib ap43ac@x)) ap4342@mr))) ap43a1@xrhs*))) (ap3151@chi-body* (append (map (lambda (ap43ae@x) (ap2edc@add-subst ap43a8@xrib ap43ae@x)) ap43a2@xbody*) (cdr ap4340@e*)) (append (map cons ap43a6@xlab* ap43aa@xb*) ap4341@r) (append (map cons ap43a6@xlab* ap43aa@xb*) ap4342@mr) ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?))))) ap4398@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4396@t)))) (if (memv ap436a@t '(begin)) (let ((ap43b0@t ap4354@e)) (let ((ap43b2@ls/false (ap30f9@syntax-dispatch ap43b0@t '(_ . each-any)))) (if ap43b2@ls/false (apply (lambda (ap43b4@x*) (ap3151@chi-body* (append ap43b4@x* (cdr ap4340@e*)) ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?)) ap43b2@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap43b0@t)))) (if (memv ap436a@t '(global-macro global-macro!)) (ap3151@chi-body* (cons (ap3115@chi-global-macro ap4363@value ap4354@e ap4348@rib) (cdr ap4340@e*)) ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?) (if (memv ap436a@t '(local-macro local-macro!)) (ap3151@chi-body* (cons (ap3113@chi-local-macro ap4363@value ap4354@e ap4348@rib) (cdr ap4340@e*)) ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?) (if (memv ap436a@t '(macro macro!)) (ap3151@chi-body* (cons (ap3111@chi-macro ap4363@value ap4354@e ap4348@rib) (cdr ap4340@e*)) ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?) (if (memv ap436a@t '(module)) (call-with-values (lambda () (ap314f@chi-internal-module ap4354@e ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd*)) (lambda (ap43c6@ap43b7 ap43c7@ap43b9 ap43c8@ap43bb ap43c9@ap43bd ap43ca@ap43bf ap43cb@ap43c1 ap43cc@ap43c3 ap43cd@ap43c5) (let ((ap43d6@kwd* ap43cd@ap43c5) (ap43d7@mod** ap43cc@ap43c3) (ap43d8@mr ap43cb@ap43c1) (ap43d9@r ap43ca@ap43bf) (ap43da@m-exp-lab* ap43c9@ap43bd) (ap43db@m-exp-id* ap43c8@ap43bb) (ap43dc@rhs* ap43c7@ap43b9) (ap43dd@lex* ap43c6@ap43b7)) (begin (vector-for-each (lambda (ap43e6@id ap43e7@lab) (ap2ea8@extend-rib! ap4348@rib ap43e6@id ap43e7@lab)) ap43db@m-exp-id* ap43da@m-exp-lab*) (ap3151@chi-body* (cdr ap4340@e*) ap43d9@r ap43d8@mr ap43dd@lex* ap43dc@rhs* ap43d7@mod** ap43d6@kwd* ap4347@exp* ap4348@rib ap4349@top?))))) (if (memv ap436a@t '(library)) (begin (ap31bb@library-expander (ap2f06@stx->datum ap4354@e)) (ap3151@chi-body* (cdr ap4340@e*) ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?)) (if (memv ap436a@t '(export)) (let ((ap43ea@t ap4354@e)) (let ((ap43ec@ls/false (ap30f9@syntax-dispatch ap43ea@t '(_ . each-any)))) (if ap43ec@ls/false (apply (lambda (ap43ee@exp-decl*) (ap3151@chi-body* (cdr ap4340@e*) ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* (append ap43ee@exp-decl* ap4347@exp*) ap4348@rib ap4349@top?)) ap43ec@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap43ea@t)))) (if (memv ap436a@t '(import)) (letrec* ((ap43f1@module-import? (lambda (ap4444@e) (let ((ap4446@t ap4444@e)) (let ((ap4448@ls/false (ap30f9@syntax-dispatch ap4446@t '(_ any)))) (if (and ap4448@ls/false (apply (lambda (ap444a@id) (ap2ef2@id? ap444a@id)) ap4448@ls/false)) (apply (lambda (ap444c@id) '#t) ap4448@ls/false) (let ((ap444e@t ap4446@t)) (let ((ap4450@ls/false (ap30f9@syntax-dispatch ap444e@t '(_ . each-any)))) (if ap4450@ls/false (apply (lambda (ap4452@imp*) '#f) ap4450@ls/false) (let ((ap4454@t ap444e@t)) (let ((ap4456@ls/false (ap30f9@syntax-dispatch ap4454@t '_))) (if ap4456@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"malformed import form" ap4444@e)) ap4456@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4454@t)))))))))))) (ap43f3@module-import (lambda (ap4422@e ap4423@r) (let ((ap4426@t ap4422@e)) (let ((ap4428@ls/false (ap30f9@syntax-dispatch ap4426@t '(_ any)))) (if (and ap4428@ls/false (apply (lambda (ap442a@id) (ap2ef2@id? ap442a@id)) ap4428@ls/false)) (apply (lambda (ap442c@id) (call-with-values (lambda () (ap2f14@syntax-type ap442c@id ap4423@r)) (lambda (ap4434@ap442f ap4435@ap4431 ap4436@ap4433) (let ((ap443a@kwd ap4436@ap4433) (ap443b@value ap4435@ap4431) (ap443c@type ap4434@ap442f)) (let ((ap4440@t ap443c@type)) (if (memv ap4440@t '($module)) (let ((ap4442@iface ap443b@value)) (values (ap314d@module-interface-exp-id* ap4442@iface ap442c@id) (ap3147@module-interface-exp-lab-vec ap4442@iface))) (ap31d9@syntax-violation '#f '"invalid import" ap4422@e))))))) ap4428@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4426@t)))))) (ap43f5@library-import (lambda (ap4406@e) (let ((ap4408@t ap4406@e)) (let ((ap440a@ls/false (ap30f9@syntax-dispatch ap4408@t '(any . each-any)))) (if ap440a@ls/false (apply (lambda (ap440c@ctxt ap440d@imp*) (call-with-values (lambda () (ap315b@parse-import-spec* (ap31df@syntax->datum ap440d@imp*))) (lambda (ap4414@ap4411 ap4415@ap4413) (let ((ap4418@subst-labels ap4415@ap4413) (ap4419@subst-names ap4414@ap4411)) (values (vector-map (lambda (ap441c@name) (ap2ed2@datum->stx ap440c@ctxt ap441c@name)) ap4419@subst-names) ap4418@subst-labels))))) ap440a@ls/false) (let ((ap441e@t ap4408@t)) (let ((ap4420@ls/false (ap30f9@syntax-dispatch ap441e@t '_))) (if ap4420@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid import form" ap4406@e)) ap4420@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap441e@t)))))))))) (begin (call-with-values (lambda () (if (ap43f1@module-import? ap4354@e) (ap43f3@module-import ap4354@e ap4341@r) (ap43f5@library-import ap4354@e))) (lambda (ap43fa@ap43f7 ap43fb@ap43f9) (let ((ap43fe@lab* ap43fb@ap43f9) (ap43ff@id* ap43fa@ap43f7)) (vector-for-each (lambda (ap4402@id ap4403@lab) (ap2ea8@extend-rib! ap4348@rib ap4402@id ap4403@lab)) ap43ff@id* ap43fe@lab*)))) (ap3151@chi-body* (cdr ap4340@e*) ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?))) (if ap4349@top? (ap3151@chi-body* (cdr ap4340@e*) ap4341@r ap4342@mr (cons (ap2e7a@gen-lexical 'dummy) ap4343@lex*) (cons (cons 'top-expr ap4354@e) ap4344@rhs*) ap4345@mod** ap4368@kwd* ap4347@exp* ap4348@rib ap4349@top?) (values ap4340@e* ap4341@r ap4342@mr ap4343@lex* ap4344@rhs* ap4345@mod** ap4368@kwd* ap4347@exp*)))))))))))))))))))))) (set! ap4c2d@ap3151@chi-body* ap3151@chi-body*) (set! ap3153@expand-transformer (lambda (ap4458@expr ap4459@r) (let ((ap445c@rtc (ap315f@make-collector))) (let ((ap445e@expanded-rhs (let ((ap4468@ap4461 ap3161@inv-collector) (ap4469@ap4463 ap3163@vis-collector) (ap446a@ap4465 ap445c@rtc) (ap446b@ap4467 (lambda (ap4470@x) (values)))) (let ((ap4472@swap (lambda () (begin (let ((ap4474@t (ap4468@ap4461))) (begin (ap4468@ap4461 ap446a@ap4465) (set! ap446a@ap4465 ap4474@t))) (let ((ap4476@t (ap4469@ap4463))) (begin (ap4469@ap4463 ap446b@ap4467) (set! ap446b@ap4467 ap4476@t))))))) (dynamic-wind ap4472@swap (lambda () (ap311b@chi-expr ap4458@expr ap4459@r ap4459@r)) ap4472@swap))))) (begin (for-each (let ((ap4478@mark-visit (ap3163@vis-collector))) (lambda (ap447a@x) (begin (ap2d0e@ap2b5c@invoke-library ap447a@x) (ap4478@mark-visit ap447a@x)))) (ap445c@rtc)) ap445e@expanded-rhs))))) (set! ap4c2e@ap3153@expand-transformer ap3153@expand-transformer) (set! ap3155@parse-exports (lambda (ap447c@exp*) (let ap4484@f ((ap447e@exp* ap447c@exp*) (ap447f@int* '()) (ap4480@ext* '())) (if (null? ap447e@exp*) (begin (if (not (ap2efa@valid-bound-ids? ap4480@ext*)) (ap31d9@syntax-violation 'export '"invalid exports" (ap312f@find-dups ap4480@ext*)) (void)) (values (map ap31df@syntax->datum ap4480@ext*) ap447f@int*)) (let ((ap4486@t (car ap447e@exp*))) (let ((ap4488@ls/false (ap30f9@syntax-dispatch ap4486@t '(any . #(each (any any)))))) (if ap4488@ls/false (apply (lambda (ap448a@rename ap448b@i* ap448c@e*) (begin (if (not (and (eq? (ap31df@syntax->datum ap448a@rename) 'rename) (for-all ap2ef2@id? ap448b@i*) (for-all ap2ef2@id? ap448c@e*))) (ap31d9@syntax-violation 'export '"invalid export specifier" (car ap447e@exp*)) (void)) (ap4484@f (cdr ap447e@exp*) (append ap448b@i* ap447f@int*) (append ap448c@e* ap4480@ext*)))) ap4488@ls/false) (let ((ap4490@t ap4486@t)) (let ((ap4492@ls/false (ap30f9@syntax-dispatch ap4490@t 'any))) (if ap4492@ls/false (apply (lambda (ap4494@ie) (begin (if (not (ap2ef2@id? ap4494@ie)) (ap31d9@syntax-violation 'export '"invalid export" ap4494@ie) (void)) (ap4484@f (cdr ap447e@exp*) (cons ap4494@ie ap447f@int*) (cons ap4494@ie ap4480@ext*)))) ap4492@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4490@t))))))))))) (set! ap4c2f@ap3155@parse-exports ap3155@parse-exports) (set! ap3157@parse-library-name (lambda (ap4496@spec) (letrec* ((ap4499@parse (lambda (ap44a6@x) (let ((ap44a8@t ap44a6@x)) (let ((ap44aa@ls/false (ap30f9@syntax-dispatch ap44a8@t '(each-any)))) (if (and ap44aa@ls/false (apply (lambda (ap44ac@v*) (for-all (lambda (ap44ae@x) (let ((ap44b0@x (ap31df@syntax->datum ap44ae@x))) (and (integer? ap44b0@x) (exact? ap44b0@x)))) ap44ac@v*)) ap44aa@ls/false)) (apply (lambda (ap44b2@v*) (values '() (map ap31df@syntax->datum ap44b2@v*))) ap44aa@ls/false) (let ((ap44b4@t ap44a8@t)) (let ((ap44b6@ls/false (ap30f9@syntax-dispatch ap44b4@t '(any . any)))) (if (and ap44b6@ls/false (apply (lambda (ap44b8@x ap44b9@rest) (symbol? (ap31df@syntax->datum ap44b8@x))) ap44b6@ls/false)) (apply (lambda (ap44bc@x ap44bd@rest) (call-with-values (lambda () (ap4499@parse ap44bd@rest)) (lambda (ap44c4@ap44c1 ap44c5@ap44c3) (let ((ap44c8@v* ap44c5@ap44c3) (ap44c9@x* ap44c4@ap44c1)) (values (cons (ap31df@syntax->datum ap44bc@x) ap44c9@x*) ap44c8@v*))))) ap44b6@ls/false) (let ((ap44cc@t ap44b4@t)) (let ((ap44ce@ls/false (ap30f9@syntax-dispatch ap44cc@t '()))) (if ap44ce@ls/false (apply (lambda () (values '() '())) ap44ce@ls/false) (let ((ap44d0@t ap44cc@t)) (let ((ap44d2@ls/false (ap30f9@syntax-dispatch ap44d0@t '_))) (if ap44d2@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid library name" ap4496@spec)) ap44d2@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap44d0@t)))))))))))))))) (call-with-values (lambda () (ap4499@parse ap4496@spec)) (lambda (ap449e@ap449b ap449f@ap449d) (let ((ap44a2@ver* ap449f@ap449d) (ap44a3@name* ap449e@ap449b)) (begin (if (null? ap44a3@name*) (ap31d9@syntax-violation '#f '"empty library name" ap4496@spec) (void)) (values ap44a3@name* ap44a2@ver*)))))))) (set! ap4c30@ap3157@parse-library-name ap3157@parse-library-name) (set! ap3159@parse-library (lambda (ap44d4@e) (let ((ap44d6@t ap44d4@e)) (let ((ap44d8@ls/false (ap30f9@syntax-dispatch ap44d6@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and ap44d8@ls/false (apply (lambda (ap44da@library ap44db@name* ap44dc@export ap44dd@exp* ap44de@import ap44df@imp* ap44e0@b*) (and (eq? (ap31df@syntax->datum ap44dc@export) 'export) (eq? (ap31df@syntax->datum ap44de@import) 'import) (eq? (ap31df@syntax->datum ap44da@library) 'library))) ap44d8@ls/false)) (apply (lambda (ap44e8@library ap44e9@name* ap44ea@export ap44eb@exp* ap44ec@import ap44ed@imp* ap44ee@b*) (values ap44e9@name* ap44eb@exp* ap44ed@imp* ap44ee@b*)) ap44d8@ls/false) (let ((ap44f6@t ap44d6@t)) (let ((ap44f8@ls/false (ap30f9@syntax-dispatch ap44f6@t '_))) (if ap44f8@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"malformed library" ap44d4@e)) ap44f8@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap44f6@t))))))))) (set! ap4c31@ap3159@parse-library ap3159@parse-library) (set! ap315b@parse-import-spec* (letrec* ((ap44fb@idsyn? (lambda (ap4704@x) (symbol? (ap31df@syntax->datum ap4704@x)))) (ap44fd@dup-error (lambda (ap4702@name) (ap31d9@syntax-violation 'import '"two imports with different bindings" ap4702@name))) (ap44ff@merge-substs (lambda (ap46f0@s ap46f1@subst) (letrec* ((ap46f5@insert-to-subst (lambda (ap46f6@a ap46f7@subst) (let ((ap46fa@name (car ap46f6@a)) (ap46fb@label (cdr ap46f6@a))) (let ((ap46fe@t (assq ap46fa@name ap46f7@subst))) (if ap46fe@t ((lambda (ap4700@x) (if (eq? (cdr ap4700@x) ap46fb@label) ap46f7@subst (ap44fd@dup-error ap46fa@name))) ap46fe@t) (cons ap46f6@a ap46f7@subst))))))) (if (null? ap46f0@s) ap46f1@subst (ap46f5@insert-to-subst (car ap46f0@s) (ap44ff@merge-substs (cdr ap46f0@s) ap46f1@subst)))))) (ap4501@exclude* (lambda (ap46c0@sym* ap46c1@subst) (letrec* ((ap46c5@exclude (lambda (ap46de@sym ap46df@subst) (if (null? ap46df@subst) (ap31d9@syntax-violation 'import '"cannot rename unbound identifier" ap46de@sym) (if (eq? ap46de@sym (caar ap46df@subst)) (values (cdar ap46df@subst) (cdr ap46df@subst)) (let ((ap46e2@a (car ap46df@subst))) (call-with-values (lambda () (ap46c5@exclude ap46de@sym (cdr ap46df@subst))) (lambda (ap46e8@ap46e5 ap46e9@ap46e7) (let ((ap46ec@subst ap46e9@ap46e7) (ap46ed@old ap46e8@ap46e5)) (values ap46ed@old (cons ap46e2@a ap46ec@subst))))))))))) (if (null? ap46c0@sym*) (values '() ap46c1@subst) (call-with-values (lambda () (ap46c5@exclude (car ap46c0@sym*) ap46c1@subst)) (lambda (ap46ca@ap46c7 ap46cb@ap46c9) (let ((ap46ce@subst ap46cb@ap46c9) (ap46cf@old ap46ca@ap46c7)) (call-with-values (lambda () (ap4501@exclude* (cdr ap46c0@sym*) ap46ce@subst)) (lambda (ap46d6@ap46d3 ap46d7@ap46d5) (let ((ap46da@subst ap46d7@ap46d5) (ap46db@old* ap46d6@ap46d3)) (values (cons ap46cf@old ap46db@old*) ap46da@subst))))))))))) (ap4503@find* (lambda (ap46b8@sym* ap46b9@subst) (map (lambda (ap46bc@x) (let ((ap46be@t (assq ap46bc@x ap46b9@subst))) (if ap46be@t (cdr ap46be@t) (ap31d9@syntax-violation 'import '"cannot find identifier" ap46bc@x)))) ap46b8@sym*))) (ap4505@rem* (lambda (ap46b0@sym* ap46b1@subst) (let ap46b6@f ((ap46b4@subst ap46b1@subst)) (if (null? ap46b4@subst) '() (if (memq (caar ap46b4@subst) ap46b0@sym*) (ap46b6@f (cdr ap46b4@subst)) (cons (car ap46b4@subst) (ap46b6@f (cdr ap46b4@subst)))))))) (ap4507@remove-dups (lambda (ap46ae@ls) (if (null? ap46ae@ls) '() (if (memq (car ap46ae@ls) (cdr ap46ae@ls)) (ap4507@remove-dups (cdr ap46ae@ls)) (cons (car ap46ae@ls) (ap4507@remove-dups (cdr ap46ae@ls))))))) (ap4509@parse-library-name (lambda (ap45c6@spec) (letrec* ((ap45c9@subversion? (lambda (ap46aa@x) (let ((ap46ac@x (ap31df@syntax->datum ap46aa@x))) (and (integer? ap46ac@x) (exact? ap46ac@x) (>= ap46ac@x '0))))) (ap45cb@subversion-pred (lambda (ap464a@x*) (let ((ap464c@t ap464a@x*)) (let ((ap464e@ls/false (ap30f9@syntax-dispatch ap464c@t 'any))) (if (and ap464e@ls/false (apply (lambda (ap4650@n) (ap45c9@subversion? ap4650@n)) ap464e@ls/false)) (apply (lambda (ap4652@n) (lambda (ap4654@x) (= ap4654@x (ap31df@syntax->datum ap4652@n)))) ap464e@ls/false) (let ((ap4656@t ap464c@t)) (let ((ap4658@ls/false (ap30f9@syntax-dispatch ap4656@t '(any . each-any)))) (if (and ap4658@ls/false (apply (lambda (ap465a@p? ap465b@sub*) (eq? (ap31df@syntax->datum ap465a@p?) 'and)) ap4658@ls/false)) (apply (lambda (ap465e@p? ap465f@sub*) (let ((ap4662@p* (map ap45cb@subversion-pred ap465f@sub*))) (lambda (ap4664@x) (for-all (lambda (ap4666@p) (ap4666@p ap4664@x)) ap4662@p*)))) ap4658@ls/false) (let ((ap4668@t ap4656@t)) (let ((ap466a@ls/false (ap30f9@syntax-dispatch ap4668@t '(any . each-any)))) (if (and ap466a@ls/false (apply (lambda (ap466c@p? ap466d@sub*) (eq? (ap31df@syntax->datum ap466c@p?) 'or)) ap466a@ls/false)) (apply (lambda (ap4670@p? ap4671@sub*) (let ((ap4674@p* (map ap45cb@subversion-pred ap4671@sub*))) (lambda (ap4676@x) (exists (lambda (ap4678@p) (ap4678@p ap4676@x)) ap4674@p*)))) ap466a@ls/false) (let ((ap467a@t ap4668@t)) (let ((ap467c@ls/false (ap30f9@syntax-dispatch ap467a@t '(any any)))) (if (and ap467c@ls/false (apply (lambda (ap467e@p? ap467f@sub) (eq? (ap31df@syntax->datum ap467e@p?) 'not)) ap467c@ls/false)) (apply (lambda (ap4682@p? ap4683@sub) (let ((ap4686@p (ap45cb@subversion-pred ap4683@sub))) (lambda (ap4688@x) (not (ap4686@p ap4688@x))))) ap467c@ls/false) (let ((ap468a@t ap467a@t)) (let ((ap468c@ls/false (ap30f9@syntax-dispatch ap468a@t '(any any)))) (if (and ap468c@ls/false (apply (lambda (ap468e@p? ap468f@n) (and (eq? (ap31df@syntax->datum ap468e@p?) '<=) (ap45c9@subversion? ap468f@n))) ap468c@ls/false)) (apply (lambda (ap4692@p? ap4693@n) (lambda (ap4696@x) (<= ap4696@x (ap31df@syntax->datum ap4693@n)))) ap468c@ls/false) (let ((ap4698@t ap468a@t)) (let ((ap469a@ls/false (ap30f9@syntax-dispatch ap4698@t '(any any)))) (if (and ap469a@ls/false (apply (lambda (ap469c@p? ap469d@n) (and (eq? (ap31df@syntax->datum ap469c@p?) '>=) (ap45c9@subversion? ap469d@n))) ap469a@ls/false)) (apply (lambda (ap46a0@p? ap46a1@n) (lambda (ap46a4@x) (>= ap46a4@x (ap31df@syntax->datum ap46a1@n)))) ap469a@ls/false) (let ((ap46a6@t ap4698@t)) (let ((ap46a8@ls/false (ap30f9@syntax-dispatch ap46a6@t '_))) (if ap46a8@ls/false (apply (lambda () (ap31d9@syntax-violation 'import '"invalid sub-version spec" ap45c6@spec ap464a@x*)) ap46a8@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap46a6@t)))))))))))))))))))))))) (ap45cd@version-pred (lambda (ap45fa@x*) (let ((ap45fc@t ap45fa@x*)) (let ((ap45fe@ls/false (ap30f9@syntax-dispatch ap45fc@t '()))) (if ap45fe@ls/false (apply (lambda () (lambda (ap4600@x) '#t)) ap45fe@ls/false) (let ((ap4602@t ap45fc@t)) (let ((ap4604@ls/false (ap30f9@syntax-dispatch ap4602@t '(any . each-any)))) (if (and ap4604@ls/false (apply (lambda (ap4606@c ap4607@ver*) (eq? (ap31df@syntax->datum ap4606@c) 'and)) ap4604@ls/false)) (apply (lambda (ap460a@c ap460b@ver*) (let ((ap460e@p* (map ap45cd@version-pred ap460b@ver*))) (lambda (ap4610@x) (for-all (lambda (ap4612@p) (ap4612@p ap4610@x)) ap460e@p*)))) ap4604@ls/false) (let ((ap4614@t ap4602@t)) (let ((ap4616@ls/false (ap30f9@syntax-dispatch ap4614@t '(any . each-any)))) (if (and ap4616@ls/false (apply (lambda (ap4618@c ap4619@ver*) (eq? (ap31df@syntax->datum ap4618@c) 'or)) ap4616@ls/false)) (apply (lambda (ap461c@c ap461d@ver*) (let ((ap4620@p* (map ap45cd@version-pred ap461d@ver*))) (lambda (ap4622@x) (exists (lambda (ap4624@p) (ap4624@p ap4622@x)) ap4620@p*)))) ap4616@ls/false) (let ((ap4626@t ap4614@t)) (let ((ap4628@ls/false (ap30f9@syntax-dispatch ap4626@t '(any any)))) (if (and ap4628@ls/false (apply (lambda (ap462a@c ap462b@ver) (eq? (ap31df@syntax->datum ap462a@c) 'not)) ap4628@ls/false)) (apply (lambda (ap462e@c ap462f@ver) (let ((ap4632@p (ap45cd@version-pred ap462f@ver))) (lambda (ap4634@x) (not (ap4632@p ap4634@x))))) ap4628@ls/false) (let ((ap4636@t ap4626@t)) (let ((ap4638@ls/false (ap30f9@syntax-dispatch ap4636@t 'each-any))) (if ap4638@ls/false (apply (lambda (ap463a@sub*) (let ((ap463c@p* (map ap45cb@subversion-pred ap463a@sub*))) (lambda (ap463e@x) (let ap4644@f ((ap4640@p* ap463c@p*) (ap4641@x ap463e@x)) (if (null? ap4640@p*) '#t (if (null? ap4641@x) '#f (and ((car ap4640@p*) (car ap4641@x)) (ap4644@f (cdr ap4640@p*) (cdr ap4641@x))))))))) ap4638@ls/false) (let ((ap4646@t ap4636@t)) (let ((ap4648@ls/false (ap30f9@syntax-dispatch ap4646@t '_))) (if ap4648@ls/false (apply (lambda () (ap31d9@syntax-violation 'import '"invalid version spec" ap45c6@spec ap45fa@x*)) ap4648@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4646@t)))))))))))))))))))))) (let ap45d0@f ((ap45ce@x ap45c6@spec)) (let ((ap45d2@t ap45ce@x)) (let ((ap45d4@ls/false (ap30f9@syntax-dispatch ap45d2@t '(each-any)))) (if ap45d4@ls/false (apply (lambda (ap45d6@version-spec*) (values '() (ap45cd@version-pred ap45d6@version-spec*))) ap45d4@ls/false) (let ((ap45d8@t ap45d2@t)) (let ((ap45da@ls/false (ap30f9@syntax-dispatch ap45d8@t '(any . any)))) (if (and ap45da@ls/false (apply (lambda (ap45dc@x ap45dd@x*) (ap44fb@idsyn? ap45dc@x)) ap45da@ls/false)) (apply (lambda (ap45e0@x ap45e1@x*) (call-with-values (lambda () (ap45d0@f ap45e1@x*)) (lambda (ap45e8@ap45e5 ap45e9@ap45e7) (let ((ap45ec@pred ap45e9@ap45e7) (ap45ed@name ap45e8@ap45e5)) (values (cons (ap31df@syntax->datum ap45e0@x) ap45ed@name) ap45ec@pred))))) ap45da@ls/false) (let ((ap45f0@t ap45d8@t)) (let ((ap45f2@ls/false (ap30f9@syntax-dispatch ap45f0@t '()))) (if ap45f2@ls/false (apply (lambda () (values '() (lambda (ap45f4@x) '#t))) ap45f2@ls/false) (let ((ap45f6@t ap45f0@t)) (let ((ap45f8@ls/false (ap30f9@syntax-dispatch ap45f6@t '_))) (if ap45f8@ls/false (apply (lambda () (ap31d9@syntax-violation '#f '"invalid import spec" ap45c6@spec)) ap45f8@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap45f6@t))))))))))))))))) (ap450b@import-library (lambda (ap45b6@spec*) (call-with-values (lambda () (ap4509@parse-library-name ap45b6@spec*)) (lambda (ap45bc@ap45b9 ap45bd@ap45bb) (let ((ap45c0@pred ap45bd@ap45bb) (ap45c1@name ap45bc@ap45b9)) (begin (if (null? ap45c1@name) (ap31d9@syntax-violation 'import '"empty library name" ap45b6@spec*) (void)) (let ((ap45c4@lib (ap2d07@ap2b4e@find-library-by-name ap45c1@name))) (begin (if (not ap45c4@lib) (ap31d9@syntax-violation 'import '"cannot find library with required name" ap45c1@name) (void)) (if (not (ap45c0@pred (ap2ce1@ap2b02@library-version ap45c4@lib))) (ap31d9@syntax-violation 'import '"library does not satisfy version specification" ap45b6@spec* ap45c4@lib) (void)) ((ap3165@imp-collector) ap45c4@lib) (ap2ce9@ap2b12@library-subst ap45c4@lib))))))))) (ap450d@get-import (lambda (ap4528@spec) (let ((ap452a@t ap4528@spec)) (let ((ap452c@ls/false (ap30f9@syntax-dispatch ap452a@t '(any . each-any)))) (if (and ap452c@ls/false (apply (lambda (ap452e@x ap452f@x*) (not (memq (ap31df@syntax->datum ap452e@x) '(for rename except only prefix library)))) ap452c@ls/false)) (apply (lambda (ap4532@x ap4533@x*) (ap450b@import-library (cons ap4532@x ap4533@x*))) ap452c@ls/false) (let ((ap4536@t ap452a@t)) (let ((ap4538@ls/false (ap30f9@syntax-dispatch ap4536@t '(any any . #(each (any any)))))) (if (and ap4538@ls/false (apply (lambda (ap453a@rename ap453b@isp ap453c@old* ap453d@new*) (and (eq? (ap31df@syntax->datum ap453a@rename) 'rename) (for-all ap44fb@idsyn? ap453c@old*) (for-all ap44fb@idsyn? ap453d@new*))) ap4538@ls/false)) (apply (lambda (ap4542@rename ap4543@isp ap4544@old* ap4545@new*) (let ((ap454a@subst (ap450d@get-import ap4543@isp)) (ap454b@old* (map ap31df@syntax->datum ap4544@old*)) (ap454c@new* (map ap31df@syntax->datum ap4545@new*))) (let ((ap4550@old-label* (ap4503@find* ap454b@old* ap454a@subst))) (let ((ap4552@subst (ap4505@rem* ap454b@old* ap454a@subst))) (ap44ff@merge-substs (map cons ap454c@new* ap4550@old-label*) ap4552@subst))))) ap4538@ls/false) (let ((ap4554@t ap4536@t)) (let ((ap4556@ls/false (ap30f9@syntax-dispatch ap4554@t '(any any . each-any)))) (if (and ap4556@ls/false (apply (lambda (ap4558@except ap4559@isp ap455a@sym*) (and (eq? (ap31df@syntax->datum ap4558@except) 'except) (for-all ap44fb@idsyn? ap455a@sym*))) ap4556@ls/false)) (apply (lambda (ap455e@except ap455f@isp ap4560@sym*) (let ((ap4564@subst (ap450d@get-import ap455f@isp))) (ap4505@rem* (map ap31df@syntax->datum ap4560@sym*) ap4564@subst))) ap4556@ls/false) (let ((ap4566@t ap4554@t)) (let ((ap4568@ls/false (ap30f9@syntax-dispatch ap4566@t '(any any . each-any)))) (if (and ap4568@ls/false (apply (lambda (ap456a@only ap456b@isp ap456c@sym*) (and (eq? (ap31df@syntax->datum ap456a@only) 'only) (for-all ap44fb@idsyn? ap456c@sym*))) ap4568@ls/false)) (apply (lambda (ap4570@only ap4571@isp ap4572@sym*) (let ((ap4576@subst (ap450d@get-import ap4571@isp)) (ap4577@sym* (map ap31df@syntax->datum ap4572@sym*))) (let ((ap457a@sym* (ap4507@remove-dups ap4577@sym*))) (let ((ap457c@lab* (ap4503@find* ap457a@sym* ap4576@subst))) (map cons ap457a@sym* ap457c@lab*))))) ap4568@ls/false) (let ((ap457e@t ap4566@t)) (let ((ap4580@ls/false (ap30f9@syntax-dispatch ap457e@t '(any any any)))) (if (and ap4580@ls/false (apply (lambda (ap4582@prefix ap4583@isp ap4584@p) (and (eq? (ap31df@syntax->datum ap4582@prefix) 'prefix) (ap44fb@idsyn? ap4584@p))) ap4580@ls/false)) (apply (lambda (ap4588@prefix ap4589@isp ap458a@p) (let ((ap458e@subst (ap450d@get-import ap4589@isp)) (ap458f@prefix (symbol->string (ap31df@syntax->datum ap458a@p)))) (map (lambda (ap4592@x) (cons (string->symbol (string-append ap458f@prefix (symbol->string (car ap4592@x)))) (cdr ap4592@x))) ap458e@subst))) ap4580@ls/false) (let ((ap4594@t ap457e@t)) (let ((ap4596@ls/false (ap30f9@syntax-dispatch ap4594@t '(any each-any)))) (if (and ap4596@ls/false (apply (lambda (ap4598@library ap4599@spec*) (eq? (ap31df@syntax->datum ap4598@library) 'library)) ap4596@ls/false)) (apply (lambda (ap459c@library ap459d@spec*) (ap450b@import-library ap459d@spec*)) ap4596@ls/false) (let ((ap45a0@t ap4594@t)) (let ((ap45a2@ls/false (ap30f9@syntax-dispatch ap45a0@t '(any any . any)))) (if (and ap45a2@ls/false (apply (lambda (ap45a4@for ap45a5@isp ap45a6@rest) (eq? (ap31df@syntax->datum ap45a4@for) 'for)) ap45a2@ls/false)) (apply (lambda (ap45aa@for ap45ab@isp ap45ac@rest) (ap450d@get-import ap45ab@isp)) ap45a2@ls/false) (let ((ap45b0@t ap45a0@t)) (let ((ap45b2@ls/false (ap30f9@syntax-dispatch ap45b0@t 'any))) (if ap45b2@ls/false (apply (lambda (ap45b4@spec) (ap31d9@syntax-violation 'import '"invalid import spec" ap45b4@spec)) ap45b2@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap45b0@t))))))))))))))))))))))))))) (ap450f@add-imports! (lambda (ap4518@imp ap4519@h) (let ((ap451c@subst (ap450d@get-import ap4518@imp))) (for-each (lambda (ap451e@x) (let ((ap4520@name (car ap451e@x)) (ap4521@label (cdr ap451e@x))) (let ((ap4524@t (hashtable-ref ap4519@h ap4520@name '#f))) (if ap4524@t ((lambda (ap4526@l) (if (not (eq? ap4526@l ap4521@label)) (ap44fd@dup-error ap4520@name) (void))) ap4524@t) (hashtable-set! ap4519@h ap4520@name ap4521@label))))) ap451c@subst))))) (lambda (ap4510@imp*) (let ap4516@f ((ap4512@imp* ap4510@imp*) (ap4513@h (make-eq-hashtable))) (if (null? ap4512@imp*) (hashtable-entries ap4513@h) (begin (ap450f@add-imports! (car ap4512@imp*) ap4513@h) (ap4516@f (cdr ap4512@imp*) ap4513@h))))))) (set! ap4c32@ap315b@parse-import-spec* ap315b@parse-import-spec*) (set! ap315d@make-top-rib (lambda (ap4706@names ap4707@labels) (let ((ap470a@rib (ap2ea6@make-empty-rib))) (begin (vector-for-each (lambda (ap470c@name ap470d@label) (begin (if (not (symbol? ap470c@name)) (error 'make-top-rib '"BUG: not a symbol" ap470c@name) (void)) (ap2eaa@extend-rib/nc! ap470a@rib (make-simple-struct 'stx '5 (list ap470c@name ap2e76@top-mark* '() '())) ap470d@label))) ap4706@names ap4707@labels) ap470a@rib)))) (set! ap4c33@ap315d@make-top-rib ap315d@make-top-rib) (set! ap315f@make-collector (lambda () (let ((ap4710@ls '())) (lambda ap4714 (let ((ap4715 (length ap4714))) (if (= ap4715 '0) (apply (lambda () ap4710@ls) ap4714) (if (= ap4715 '1) (apply (lambda (ap4712@x) (set! ap4710@ls (ap2e6f@set-cons ap4712@x ap4710@ls))) ap4714) (error 'apply '"invalid arg count")))))))) (set! ap4c34@ap315f@make-collector ap315f@make-collector) (set! ap3161@inv-collector (ap2a42@ap2920@make-parameter (lambda ap4716@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (ap4718@x) (begin (if (not (procedure? ap4718@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" ap4718@x) (void)) ap4718@x)))) (set! ap4c35@ap3161@inv-collector ap3161@inv-collector) (set! ap3163@vis-collector (ap2a42@ap2920@make-parameter (lambda ap471a@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (ap471c@x) (begin (if (not (procedure? ap471c@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" ap471c@x) (void)) ap471c@x)))) (set! ap4c36@ap3163@vis-collector ap3163@vis-collector) (set! ap3165@imp-collector (ap2a42@ap2920@make-parameter (lambda ap471e@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (ap4720@x) (begin (if (not (procedure? ap4720@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" ap4720@x) (void)) ap4720@x)))) (set! ap4c37@ap3165@imp-collector ap3165@imp-collector) (set! ap3167@chi-library-internal (lambda (ap4722@e* ap4723@rib ap4724@top?) (call-with-values (lambda () (ap3151@chi-body* ap4722@e* '() '() '() '() '() '() '() ap4723@rib ap4724@top?)) (lambda (ap4738@ap4729 ap4739@ap472b ap473a@ap472d ap473b@ap472f ap473c@ap4731 ap473d@ap4733 ap473e@ap4735 ap473f@ap4737) (let ((ap4748@exp* ap473f@ap4737) (ap4749@_kwd* ap473e@ap4735) (ap474a@mod** ap473d@ap4733) (ap474b@rhs* ap473c@ap4731) (ap474c@lex* ap473b@ap472f) (ap474d@mr ap473a@ap472d) (ap474e@r ap4739@ap472b) (ap474f@e* ap4738@ap4729)) (values (append (apply append (reverse ap474a@mod**)) ap474f@e*) ap474e@r ap474d@mr (reverse ap474c@lex*) (reverse ap474b@rhs*) ap4748@exp*)))))) (set! ap4c38@ap3167@chi-library-internal ap3167@chi-library-internal) (set! ap3169@chi-interaction-expr (lambda (ap4758@e ap4759@rib ap475a@r) (call-with-values (lambda () (ap3151@chi-body* (list ap4758@e) ap475a@r ap475a@r '() '() '() '() '() ap4759@rib '#t)) (lambda (ap476e@ap475f ap476f@ap4761 ap4770@ap4763 ap4771@ap4765 ap4772@ap4767 ap4773@ap4769 ap4774@ap476b ap4775@ap476d) (let ((ap477e@_exp* ap4775@ap476d) (ap477f@_kwd* ap4774@ap476b) (ap4780@mod** ap4773@ap4769) (ap4781@rhs* ap4772@ap4767) (ap4782@lex* ap4771@ap4765) (ap4783@mr ap4770@ap4763) (ap4784@r ap476f@ap4761) (ap4785@e* ap476e@ap475f)) (let ((ap478e@e* (ap3129@expand-interaction-rhs*/init* (reverse ap4782@lex*) (reverse ap4781@rhs*) (append (apply append (reverse ap4780@mod**)) ap4785@e*) ap4784@r ap4783@mr))) (let ((ap4790@e (if (null? ap478e@e*) (ap2e58@ap2db9@build-void) (if (null? (cdr ap478e@e*)) (car ap478e@e*) (ap2e57@ap2db7@build-sequence '#f ap478e@e*))))) (values ap4790@e ap4784@r)))))))) (set! ap4c39@ap3169@chi-interaction-expr ap3169@chi-interaction-expr) (set! ap316b@library-body-expander (lambda (ap4792@name ap4793@main-exp* ap4794@imp* ap4795@b* ap4796@top?) (letrec* ((ap479d@itc (ap315f@make-collector))) (let ((ap47a6@ap479f ap3165@imp-collector) (ap47a7@ap47a1 ap31e9@top-level-context) (ap47a8@ap47a3 ap479d@itc) (ap47a9@ap47a5 '#f)) (let ((ap47ae@swap (lambda () (begin (let ((ap47b0@t (ap47a6@ap479f))) (begin (ap47a6@ap479f ap47a8@ap47a3) (set! ap47a8@ap47a3 ap47b0@t))) (let ((ap47b2@t (ap47a7@ap47a1))) (begin (ap47a7@ap47a1 ap47a9@ap47a5) (set! ap47a9@ap47a5 ap47b2@t))))))) (dynamic-wind ap47ae@swap (lambda () (call-with-values (lambda () (ap315b@parse-import-spec* ap4794@imp*)) (lambda (ap47b8@ap47b5 ap47b9@ap47b7) (let ((ap47bc@subst-labels ap47b9@ap47b7) (ap47bd@subst-names ap47b8@ap47b5)) (let ((ap47c0@rib (ap315d@make-top-rib ap47bd@subst-names ap47bc@subst-labels))) (letrec* ((ap47c3@wrap (lambda (ap483e@x) (make-simple-struct 'stx '5 (list ap483e@x ap2e76@top-mark* (list ap47c0@rib) '()))))) (let ((ap47c4@b* (map ap47c3@wrap ap4795@b*)) (ap47c5@main-exp* (map ap47c3@wrap ap4793@main-exp*)) (ap47c6@rtc (ap315f@make-collector)) (ap47c7@vtc (ap315f@make-collector))) (let ((ap47d4@ap47cd ap3161@inv-collector) (ap47d5@ap47cf ap3163@vis-collector) (ap47d6@ap47d1 ap47c6@rtc) (ap47d7@ap47d3 ap47c7@vtc)) (let ((ap47dc@swap (lambda () (begin (let ((ap47de@t (ap47d4@ap47cd))) (begin (ap47d4@ap47cd ap47d6@ap47d1) (set! ap47d6@ap47d1 ap47de@t))) (let ((ap47e0@t (ap47d5@ap47cf))) (begin (ap47d5@ap47cf ap47d7@ap47d3) (set! ap47d7@ap47d3 ap47e0@t))))))) (dynamic-wind ap47dc@swap (lambda () (call-with-values (lambda () (ap3167@chi-library-internal ap47c4@b* ap47c0@rib ap4796@top?)) (lambda (ap47ee@ap47e3 ap47ef@ap47e5 ap47f0@ap47e7 ap47f1@ap47e9 ap47f2@ap47eb ap47f3@ap47ed) (let ((ap47fa@internal-exp* ap47f3@ap47ed) (ap47fb@rhs* ap47f2@ap47eb) (ap47fc@lex* ap47f1@ap47e9) (ap47fd@mr ap47f0@ap47e7) (ap47fe@r ap47ef@ap47e5) (ap47ff@init* ap47ee@ap47e3)) (call-with-values (lambda () (ap3155@parse-exports (append ap47c5@main-exp* ap47fa@internal-exp*))) (lambda (ap480a@ap4807 ap480b@ap4809) (let ((ap480e@exp-id* ap480b@ap4809) (ap480f@exp-name* ap480a@ap4807)) (begin (ap2eae@seal-rib! ap47c0@rib) (let ((ap4812@init* (ap3117@chi-expr* ap47ff@init* ap47fe@r ap47fd@mr))) (let ((ap4814@rhs* (ap312b@chi-rhs* ap47fb@rhs* ap47fe@r ap47fd@mr))) (begin (ap2eb0@unseal-rib! ap47c0@rib) (let ((ap4816@loc* (map ap2e7c@gen-global ap47fc@lex*)) (ap4817@export-subst (ap31c3@make-export-subst ap480f@exp-name* ap480e@exp-id*))) (letrec* ((ap481b@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (ap31c5@make-export-env/macros ap47fc@lex* ap4816@loc* ap47fe@r)) (lambda (ap4822@ap481d ap4823@ap481f ap4824@ap4821) (let ((ap4828@macro* ap4824@ap4821) (ap4829@global* ap4823@ap481f) (ap482a@export-env ap4822@ap481d)) (begin (for-each (lambda (ap482e@s) (let ((ap4830@name (car ap482e@s)) (ap4831@label (cdr ap482e@s))) (let ((ap4834@p (assq ap4831@label ap482a@export-env))) (if ap4834@p (let ((ap4836@b (cdr ap4834@p))) (let ((ap4838@type (car ap4836@b))) (if (eq? ap4838@type 'mutable) (ap31d9@syntax-violation 'export ap481b@errstr ap4830@name) (void)))) (void))))) ap4817@export-subst) (let ((ap483a@invoke-body (ap2e5d@ap2dc3@build-library-letrec* '#f ap4792@name ap47fc@lex* ap4816@loc* ap4814@rhs* (if (null? ap4812@init*) (ap2e58@ap2db9@build-void) (ap2e57@ap2db7@build-sequence '#f ap4812@init*)))) (ap483b@invoke-definitions (map ap2e54@ap2d16@build-global-define (map cdr ap4829@global*)))) (values (ap479d@itc) (ap47c6@rtc) (ap47c7@vtc) (ap2e57@ap2db7@build-sequence '#f (append ap483b@invoke-definitions (list ap483a@invoke-body))) ap4828@macro* ap4817@export-subst ap482a@export-env))))))))))))))))))) ap47dc@swap)))))))))) ap47ae@swap)))))) (set! ap4c3a@ap316b@library-body-expander ap316b@library-body-expander) (set! ap316d@core-library-expander (lambda (ap4840@e ap4841@verify-name) (call-with-values (lambda () (ap3159@parse-library ap4840@e)) (lambda (ap484c@ap4845 ap484d@ap4847 ap484e@ap4849 ap484f@ap484b) (let ((ap4854@b* ap484f@ap484b) (ap4855@imp* ap484e@ap4849) (ap4856@exp* ap484d@ap4847) (ap4857@name* ap484c@ap4845)) (call-with-values (lambda () (ap3157@parse-library-name ap4857@name*)) (lambda (ap4860@ap485d ap4861@ap485f) (let ((ap4864@ver ap4861@ap485f) (ap4865@name ap4860@ap485d)) (begin (ap4841@verify-name ap4865@name) (call-with-values (lambda () (ap316b@library-body-expander ap4865@name ap4856@exp* ap4855@imp* ap4854@b* '#f)) (lambda (ap4876@ap4869 ap4877@ap486b ap4878@ap486d ap4879@ap486f ap487a@ap4871 ap487b@ap4873 ap487c@ap4875) (let ((ap4884@export-env ap487c@ap4875) (ap4885@export-subst ap487b@ap4873) (ap4886@visit-code ap487a@ap4871) (ap4887@invoke-code ap4879@ap486f) (ap4888@visit-req* ap4878@ap486d) (ap4889@invoke-req* ap4877@ap486b) (ap488a@imp* ap4876@ap4869)) (values ap4865@name ap4864@ver ap488a@imp* ap4889@invoke-req* ap4888@visit-req* ap4887@invoke-code ap4886@visit-code ap4885@export-subst ap4884@export-env))))))))))))) (set! ap4c3b@ap316d@core-library-expander ap316d@core-library-expander) (set! ap316f@parse-top-level-program (lambda (ap4892@e*) (let ((ap4894@t ap4892@e*)) (let ((ap4896@ls/false (ap30f9@syntax-dispatch ap4894@t '((any . each-any) . each-any)))) (if (and ap4896@ls/false (apply (lambda (ap4898@import ap4899@imp* ap489a@b*) (eq? (ap31df@syntax->datum ap4898@import) 'import)) ap4896@ls/false)) (apply (lambda (ap489e@import ap489f@imp* ap48a0@b*) (values ap489f@imp* ap48a0@b*)) ap4896@ls/false) (let ((ap48a4@t ap4894@t)) (let ((ap48a6@ls/false (ap30f9@syntax-dispatch ap48a4@t '((any . any) . any)))) (if (and ap48a6@ls/false (apply (lambda (ap48a8@import ap48a9@x ap48aa@y) (eq? (ap31df@syntax->datum ap48a8@import) 'import)) ap48a6@ls/false)) (apply (lambda (ap48ae@import ap48af@x ap48b0@y) (ap31d9@syntax-violation 'expander '"invalid syntax of top-level program" (ap2eec@syntax-car ap4892@e*))) ap48a6@ls/false) (let ((ap48b4@t ap48a4@t)) (let ((ap48b6@ls/false (ap30f9@syntax-dispatch ap48b4@t '_))) (if ap48b6@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) ap48b6@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap48b4@t)))))))))))) (set! ap4c3c@ap316f@parse-top-level-program ap316f@parse-top-level-program) (set! ap3171@top-level-expander (lambda (ap48b8@e*) (call-with-values (lambda () (ap316f@parse-top-level-program ap48b8@e*)) (lambda (ap48be@ap48bb ap48bf@ap48bd) (let ((ap48c2@b* ap48bf@ap48bd) (ap48c3@imp* ap48be@ap48bb)) (call-with-values (lambda () (ap316b@library-body-expander '() '() ap48c3@imp* ap48c2@b* '#t)) (lambda (ap48d4@ap48c7 ap48d5@ap48c9 ap48d6@ap48cb ap48d7@ap48cd ap48d8@ap48cf ap48d9@ap48d1 ap48da@ap48d3) (let ((ap48e2@export-env ap48da@ap48d3) (ap48e3@export-subst ap48d9@ap48d1) (ap48e4@visit-code ap48d8@ap48cf) (ap48e5@invoke-code ap48d7@ap48cd) (ap48e6@visit-req* ap48d6@ap48cb) (ap48e7@invoke-req* ap48d5@ap48c9) (ap48e8@imp* ap48d4@ap48c7)) (values ap48e7@invoke-req* ap48e5@invoke-code))))))))) (set! ap4c3d@ap3171@top-level-expander ap3171@top-level-expander) (set! ap3173@rp (ap2a3f@ap291a@make-record-printer 'env (lambda (ap48f0@x ap48f1@p ap48f2@wr) (display '"#<environment>" ap48f1@p)))) (set! ap4c3e@ap3173@rp ap3173@rp) (set! ap317d@env? (lambda (ap48f6@x) (and (simple-struct? ap48f6@x) (eq? (simple-struct-name ap48f6@x) 'env)))) (set! ap4c3f@ap317d@env? ap317d@env?) (set! ap317f@env-names (lambda (ap48f8@x) (simple-struct-ref ap48f8@x '0))) (set! ap4c40@ap317f@env-names ap317f@env-names) (set! ap3181@set-env-names! (lambda (ap48fa@x ap48fb@val) (simple-struct-set! ap48fa@x '0 ap48fb@val))) (set! ap4c41@ap3181@set-env-names! ap3181@set-env-names!) (set! ap3183@env-labels (lambda (ap48fe@x) (simple-struct-ref ap48fe@x '1))) (set! ap4c42@ap3183@env-labels ap3183@env-labels) (set! ap3185@set-env-labels! (lambda (ap4900@x ap4901@val) (simple-struct-set! ap4900@x '1 ap4901@val))) (set! ap4c43@ap3185@set-env-labels! ap3185@set-env-labels!) (set! ap3187@env-itc (lambda (ap4904@x) (simple-struct-ref ap4904@x '2))) (set! ap4c44@ap3187@env-itc ap3187@env-itc) (set! ap3189@set-env-itc! (lambda (ap4906@x ap4907@val) (simple-struct-set! ap4906@x '2 ap4907@val))) (set! ap4c45@ap3189@set-env-itc! ap3189@set-env-itc!) (set! ap318b@dummy '3) (set! ap4c46@ap318b@dummy ap318b@dummy) (set! ap318d@rp (ap2a3f@ap291a@make-record-printer 'interaction-env (lambda (ap490a@x ap490b@p ap490c@wr) (display '"#<environment>" ap490b@p)))) (set! ap4c47@ap318d@rp ap318d@rp) (set! ap3197@interaction-env? (lambda (ap4910@x) (and (simple-struct? ap4910@x) (eq? (simple-struct-name ap4910@x) 'interaction-env)))) (set! ap4c48@ap3197@interaction-env? ap3197@interaction-env?) (set! ap3199@interaction-env-rib (lambda (ap4912@x) (simple-struct-ref ap4912@x '0))) (set! ap4c49@ap3199@interaction-env-rib ap3199@interaction-env-rib) (set! ap319b@set-interaction-env-rib! (lambda (ap4914@x ap4915@val) (simple-struct-set! ap4914@x '0 ap4915@val))) (set! ap4c4a@ap319b@set-interaction-env-rib! ap319b@set-interaction-env-rib!) (set! ap319d@interaction-env-r (lambda (ap4918@x) (simple-struct-ref ap4918@x '1))) (set! ap4c4b@ap319d@interaction-env-r ap319d@interaction-env-r) (set! ap319f@set-interaction-env-r! (lambda (ap491a@x ap491b@val) (simple-struct-set! ap491a@x '1 ap491b@val))) (set! ap4c4c@ap319f@set-interaction-env-r! ap319f@set-interaction-env-r!) (set! ap31a1@interaction-env-locs (lambda (ap491e@x) (simple-struct-ref ap491e@x '2))) (set! ap4c4d@ap31a1@interaction-env-locs ap31a1@interaction-env-locs) (set! ap31a3@set-interaction-env-locs! (lambda (ap4920@x ap4921@val) (simple-struct-set! ap4920@x '2 ap4921@val))) (set! ap4c4e@ap31a3@set-interaction-env-locs! ap31a3@set-interaction-env-locs!) (set! ap31a5@dummy '3) (set! ap4c4f@ap31a5@dummy ap31a5@dummy) (set! ap31a7@interaction-environment-symbols (lambda () (ap31af@environment-symbols (ap31e7@interaction-environment)))) (set! ap4c50@ap31a7@interaction-environment-symbols ap31a7@interaction-environment-symbols) (set! ap31a9@environment-bindings (lambda (ap4924@e) (vector->list (vector-map (lambda (ap4926@name ap4927@label) (ap31ab@parse-binding (cons ap4926@name (ap2d0d@ap2b5a@imported-label->binding ap4927@label)))) (ap317f@env-names ap4924@e) (ap3183@env-labels ap4924@e))))) (set! ap4c51@ap31a9@environment-bindings ap31a9@environment-bindings) (set! ap31ab@parse-binding (lambda (ap492a@b) (cons (car ap492a@b) (let ((ap492c@t (cadr ap492a@b))) (if (memv ap492c@t '(core-prim global)) 'procedure (if (memv ap492c@t '(core-macro macro global-macro)) 'syntax (if (memv ap492c@t '($core-rtd)) 'record (if (eq? (car ap492a@b) (cadr ap492a@b)) 'syntax 'unknown)))))))) (set! ap4c52@ap31ab@parse-binding ap31ab@parse-binding) (set! ap31ad@environment? (lambda (ap492e@x) (or (ap317d@env? ap492e@x) (ap3197@interaction-env? ap492e@x)))) (set! ap4c53@ap31ad@environment? ap31ad@environment?) (set! ap31af@environment-symbols (lambda (ap4930@x) (if (ap317d@env? ap4930@x) (vector->list (ap317f@env-names ap4930@x)) (if (ap3197@interaction-env? ap4930@x) (map values (ap2e90@rib-sym* (ap3199@interaction-env-rib ap4930@x))) (assertion-violation 'environment-symbols '"not an environment" ap4930@x))))) (set! ap4c54@ap31af@environment-symbols ap31af@environment-symbols) (set! ap31b1@environment (lambda ap4932@imp* (let ((ap4934@itc (ap315f@make-collector))) (let ((ap493a@ap4937 ap3165@imp-collector) (ap493b@ap4939 ap4934@itc)) (let ((ap493e@swap (lambda () (let ((ap4940@t (ap493a@ap4937))) (begin (ap493a@ap4937 ap493b@ap4939) (set! ap493b@ap4939 ap4940@t)))))) (dynamic-wind ap493e@swap (lambda () (call-with-values (lambda () (ap315b@parse-import-spec* ap4932@imp*)) (lambda (ap4946@ap4943 ap4947@ap4945) (let ((ap494a@subst-labels ap4947@ap4945) (ap494b@subst-names ap4946@ap4943)) (make-simple-struct 'env '4 (list ap494b@subst-names ap494a@subst-labels ap4934@itc)))))) ap493e@swap)))))) (set! ap4c55@ap31b1@environment ap31b1@environment) (set! ap31b3@null-environment (lambda (ap494e@n) (begin (if (not (eqv? ap494e@n '5)) (assertion-violation 'null-environment '"not 5" ap494e@n) (void)) (ap31b1@environment '(psyntax null-environment-5))))) (set! ap4c56@ap31b3@null-environment ap31b3@null-environment) (set! ap31b5@scheme-report-environment (lambda (ap4950@n) (begin (if (not (eqv? ap4950@n '5)) (assertion-violation 'scheme-report-environment '"not 5" ap4950@n) (void)) (ap31b1@environment '(psyntax scheme-report-environment-5))))) (set! ap4c57@ap31b5@scheme-report-environment ap31b5@scheme-report-environment) (set! ap31b7@expand (lambda (ap4952@x ap4953@env) (if (ap317d@env? ap4953@env) (let ((ap4956@rib (ap315d@make-top-rib (ap317f@env-names ap4953@env) (ap3183@env-labels ap4953@env)))) (let ((ap4958@x (make-simple-struct 'stx '5 (list ap4952@x ap2e76@top-mark* (list ap4956@rib) '()))) (ap4959@itc (ap3187@env-itc ap4953@env)) (ap495a@rtc (ap315f@make-collector)) (ap495b@vtc (ap315f@make-collector))) (let ((ap4960@x (let ((ap4972@ap4963 ap31e9@top-level-context) (ap4973@ap4965 ap3161@inv-collector) (ap4974@ap4967 ap3163@vis-collector) (ap4975@ap4969 ap3165@imp-collector) (ap4976@ap496b '#f) (ap4977@ap496d ap495a@rtc) (ap4978@ap496f ap495b@vtc) (ap4979@ap4971 ap4959@itc)) (let ((ap4982@swap (lambda () (begin (let ((ap4984@t (ap4972@ap4963))) (begin (ap4972@ap4963 ap4976@ap496b) (set! ap4976@ap496b ap4984@t))) (let ((ap4986@t (ap4973@ap4965))) (begin (ap4973@ap4965 ap4977@ap496d) (set! ap4977@ap496d ap4986@t))) (let ((ap4988@t (ap4974@ap4967))) (begin (ap4974@ap4967 ap4978@ap496f) (set! ap4978@ap496f ap4988@t))) (let ((ap498a@t (ap4975@ap4969))) (begin (ap4975@ap4969 ap4979@ap4971) (set! ap4979@ap4971 ap498a@t))))))) (dynamic-wind ap4982@swap (lambda () (ap311b@chi-expr ap4958@x '() '())) ap4982@swap))))) (begin (ap2eae@seal-rib! ap4956@rib) (values ap4960@x (ap495a@rtc)))))) (if (ap3197@interaction-env? ap4953@env) (let ((ap498c@rib (ap3199@interaction-env-rib ap4953@env)) (ap498d@r (ap319d@interaction-env-r ap4953@env)) (ap498e@rtc (ap315f@make-collector))) (let ((ap4992@x (make-simple-struct 'stx '5 (list ap4952@x ap2e76@top-mark* (list ap498c@rib) '())))) (call-with-values (lambda () (let ((ap49a8@ap4999 ap31e9@top-level-context) (ap49a9@ap499b ap3161@inv-collector) (ap49aa@ap499d ap3163@vis-collector) (ap49ab@ap499f ap3165@imp-collector) (ap49ac@ap49a1 ap4953@env) (ap49ad@ap49a3 ap498e@rtc) (ap49ae@ap49a5 (ap315f@make-collector)) (ap49af@ap49a7 (ap315f@make-collector))) (let ((ap49b8@swap (lambda () (begin (let ((ap49ba@t (ap49a8@ap4999))) (begin (ap49a8@ap4999 ap49ac@ap49a1) (set! ap49ac@ap49a1 ap49ba@t))) (let ((ap49bc@t (ap49a9@ap499b))) (begin (ap49a9@ap499b ap49ad@ap49a3) (set! ap49ad@ap49a3 ap49bc@t))) (let ((ap49be@t (ap49aa@ap499d))) (begin (ap49aa@ap499d ap49ae@ap49a5) (set! ap49ae@ap49a5 ap49be@t))) (let ((ap49c0@t (ap49ab@ap499f))) (begin (ap49ab@ap499f ap49af@ap49a7) (set! ap49af@ap49a7 ap49c0@t))))))) (dynamic-wind ap49b8@swap (lambda () (ap3169@chi-interaction-expr ap4992@x ap498c@rib ap498d@r)) ap49b8@swap)))) (lambda (ap49c2@ap4995 ap49c3@ap4997) (let ((ap49c6@r^ ap49c3@ap4997) (ap49c7@e ap49c2@ap4995)) (begin (ap319f@set-interaction-env-r! ap4953@env ap49c6@r^) (values ap49c7@e (ap498e@rtc)))))))) (assertion-violation 'expand '"not an environment" ap4953@env))))) (set! ap4c58@ap31b7@expand ap31b7@expand) (set! ap31b9@eval (lambda (ap49ca@x ap49cb@env) (begin (if (not (ap31ad@environment? ap49cb@env)) (error 'eval '"not an environment" ap49cb@env) (void)) (call-with-values (lambda () (ap31b7@expand ap49ca@x ap49cb@env)) (lambda (ap49d2@ap49cf ap49d3@ap49d1) (let ((ap49d6@invoke-req* ap49d3@ap49d1) (ap49d7@x ap49d2@ap49cf)) (begin (for-each ap2d0e@ap2b5c@invoke-library ap49d6@invoke-req*) (eval-core (ap2a98@ap2a50@expanded->core ap49d7@x))))))))) (set! ap4c59@ap31b9@eval ap31b9@eval) (set! ap31bb@library-expander (lambda ap4a48 (let ((ap4a49 (length ap4a48))) (if (= ap4a49 '3) (apply (lambda (ap49da@x ap49db@filename ap49dc@verify-name) (letrec* ((ap49e1@build-visit-code (lambda (ap4a36@macro*) (if (null? ap4a36@macro*) (ap2e58@ap2db9@build-void) (ap2e57@ap2db7@build-sequence '#f (map (lambda (ap4a38@x) (let ((ap4a3a@loc (car ap4a38@x)) (ap4a3b@src (cddr ap4a38@x))) (list 'set! ap4a3a@loc ap4a3b@src))) ap4a36@macro*))))) (ap49e3@visit! (lambda (ap4a2e@macro*) (for-each (lambda (ap4a30@x) (let ((ap4a32@loc (car ap4a30@x)) (ap4a33@proc (cadr ap4a30@x))) (set-symbol-value! ap4a32@loc ap4a33@proc))) ap4a2e@macro*)))) (call-with-values (lambda () (ap316d@core-library-expander ap49da@x ap49dc@verify-name)) (lambda (ap49f6@ap49e5 ap49f7@ap49e7 ap49f8@ap49e9 ap49f9@ap49eb ap49fa@ap49ed ap49fb@ap49ef ap49fc@ap49f1 ap49fd@ap49f3 ap49fe@ap49f5) (let ((ap4a08@export-env ap49fe@ap49f5) (ap4a09@export-subst ap49fd@ap49f3) (ap4a0a@macro* ap49fc@ap49f1) (ap4a0b@invoke-code ap49fb@ap49ef) (ap4a0c@vis* ap49fa@ap49ed) (ap4a0d@inv* ap49f9@ap49eb) (ap4a0e@imp* ap49f8@ap49e9) (ap4a0f@ver ap49f7@ap49e7) (ap4a10@name ap49f6@ap49e5)) (let ((ap4a1a@id (gensym)) (ap4a1b@name ap4a10@name) (ap4a1c@ver ap4a0f@ver) (ap4a1d@imp* (map ap2d12@ap2b64@library-spec ap4a0e@imp*)) (ap4a1e@vis* (map ap2d12@ap2b64@library-spec ap4a0c@vis*)) (ap4a1f@inv* (map ap2d12@ap2b64@library-spec ap4a0d@inv*)) (ap4a20@visit-proc (lambda () (ap49e3@visit! ap4a0a@macro*))) (ap4a21@invoke-proc (lambda () (eval-core (ap2a98@ap2a50@expanded->core ap4a0b@invoke-code)))) (ap4a22@visit-code (ap49e1@build-visit-code ap4a0a@macro*)) (ap4a23@invoke-code ap4a0b@invoke-code)) (begin (ap2d0c@ap2b58@install-library ap4a1a@id ap4a1b@name ap4a1c@ver ap4a1d@imp* ap4a1e@vis* ap4a1f@inv* ap4a09@export-subst ap4a08@export-env ap4a20@visit-proc ap4a21@invoke-proc ap4a22@visit-code ap4a23@invoke-code '#t ap49db@filename) (values ap4a1a@id ap4a1b@name ap4a1c@ver ap4a1d@imp* ap4a1e@vis* ap4a1f@inv* ap4a23@invoke-code ap4a22@visit-code ap4a09@export-subst ap4a08@export-env)))))))) ap4a48) (if (= ap4a49 '2) (apply (lambda (ap4a3e@x ap4a3f@filename) (ap31bb@library-expander ap4a3e@x ap4a3f@filename (lambda (ap4a42@x) (values)))) ap4a48) (if (= ap4a49 '1) (apply (lambda (ap4a44@x) (ap31bb@library-expander ap4a44@x '#f (lambda (ap4a46@x) (values)))) ap4a48) (error 'apply '"invalid arg count"))))))) (set! ap4c5a@ap31bb@library-expander ap31bb@library-expander) (set! ap31bd@boot-library-expand (lambda (ap4a4a@x) (call-with-values (lambda () (ap31bb@library-expander ap4a4a@x)) (lambda (ap4a60@ap4a4d ap4a61@ap4a4f ap4a62@ap4a51 ap4a63@ap4a53 ap4a64@ap4a55 ap4a65@ap4a57 ap4a66@ap4a59 ap4a67@ap4a5b ap4a68@ap4a5d ap4a69@ap4a5f) (let ((ap4a74@export-env ap4a69@ap4a5f) (ap4a75@export-subst ap4a68@ap4a5d) (ap4a76@visit-code ap4a67@ap4a5b) (ap4a77@invoke-code ap4a66@ap4a59) (ap4a78@inv* ap4a65@ap4a57) (ap4a79@vis* ap4a64@ap4a55) (ap4a7a@imp* ap4a63@ap4a53) (ap4a7b@ver ap4a62@ap4a51) (ap4a7c@name ap4a61@ap4a4f) (ap4a7d@id ap4a60@ap4a4d)) (values ap4a7c@name ap4a77@invoke-code ap4a75@export-subst ap4a74@export-env)))))) (set! ap4c5b@ap31bd@boot-library-expand ap31bd@boot-library-expand) (set! ap31bf@rev-map-append (lambda (ap4a88@f ap4a89@ls ap4a8a@ac) (if (null? ap4a89@ls) ap4a8a@ac (ap31bf@rev-map-append ap4a88@f (cdr ap4a89@ls) (cons (ap4a88@f (car ap4a89@ls)) ap4a8a@ac))))) (set! ap4c5c@ap31bf@rev-map-append ap31bf@rev-map-append) (set! ap31c1@build-exports (lambda (ap4a8e@lex*+loc* ap4a8f@init*) (ap2e57@ap2db7@build-sequence '#f (cons (ap2e58@ap2db9@build-void) (ap31bf@rev-map-append (lambda (ap4a92@x) (list 'set! (cdr ap4a92@x) (car ap4a92@x))) ap4a8e@lex*+loc* ap4a8f@init*))))) (set! ap4c5d@ap31c1@build-exports ap31c1@build-exports) (set! ap31c3@make-export-subst (lambda (ap4a94@name* ap4a95@id*) (map (lambda (ap4a98@name ap4a99@id) (let ((ap4a9c@label (ap2f08@id->label ap4a99@id))) (begin (if (not ap4a9c@label) (ap31d9@syntax-violation '#f '"cannot export unbound identifier" ap4a99@id) (void)) (cons ap4a98@name ap4a9c@label)))) ap4a94@name* ap4a95@id*))) (set! ap4c5e@ap31c3@make-export-subst ap31c3@make-export-subst) (set! ap31c5@make-export-env/macros (lambda (ap4a9e@lex* ap4a9f@loc* ap4aa0@r) (letrec* ((ap4aa5@lookup (lambda (ap4ac2@x) (let ap4aca@f ((ap4ac4@x ap4ac2@x) (ap4ac5@lex* ap4a9e@lex*) (ap4ac6@loc* ap4a9f@loc*)) (if (pair? ap4ac5@lex*) (if (eq? ap4ac4@x (car ap4ac5@lex*)) (car ap4ac6@loc*) (ap4aca@f ap4ac4@x (cdr ap4ac5@lex*) (cdr ap4ac6@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let ap4aae@f ((ap4aa6@r ap4aa0@r) (ap4aa7@env '()) (ap4aa8@global* '()) (ap4aa9@macro* '())) (if (null? ap4aa6@r) (values ap4aa7@env ap4aa8@global* ap4aa9@macro*) (let ((ap4ab0@x (car ap4aa6@r))) (let ((ap4ab2@label (car ap4ab0@x)) (ap4ab3@b (cdr ap4ab0@x))) (let ((ap4ab6@t (ap2f0e@binding-type ap4ab3@b))) (if (memv ap4ab6@t '(lexical)) (let ((ap4ab8@v (ap2f10@binding-value ap4ab3@b))) (let ((ap4aba@loc (ap4aa5@lookup (ap3083@lexical-var ap4ab8@v))) (ap4abb@type (if (ap3085@lexical-mutable? ap4ab8@v) 'mutable 'global))) (ap4aae@f (cdr ap4aa6@r) (cons (cons* ap4ab2@label ap4abb@type ap4aba@loc) ap4aa7@env) (cons (cons (ap3083@lexical-var ap4ab8@v) ap4aba@loc) ap4aa8@global*) ap4aa9@macro*))) (if (memv ap4ab6@t '(local-macro)) (let ((ap4abe@loc (gensym))) (ap4aae@f (cdr ap4aa6@r) (cons (cons* ap4ab2@label 'global-macro ap4abe@loc) ap4aa7@env) ap4aa8@global* (cons (cons ap4abe@loc (ap2f10@binding-value ap4ab3@b)) ap4aa9@macro*))) (if (memv ap4ab6@t '(local-macro!)) (let ((ap4ac0@loc (gensym))) (ap4aae@f (cdr ap4aa6@r) (cons (cons* ap4ab2@label 'global-macro! ap4ac0@loc) ap4aa7@env) ap4aa8@global* (cons (cons ap4ac0@loc (ap2f10@binding-value ap4ab3@b)) ap4aa9@macro*))) (if (memv ap4ab6@t '($rtd $module)) (ap4aae@f (cdr ap4aa6@r) (cons ap4ab0@x ap4aa7@env) ap4aa8@global* ap4aa9@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (ap2f0e@binding-type ap4ab3@b) (ap2f10@binding-value ap4ab3@b)))))))))))))) (set! ap4c5f@ap31c5@make-export-env/macros ap31c5@make-export-env/macros) (set! ap31c7@generate-temporaries (lambda (ap4acc@ls) (let ((ap4ace@t ap4acc@ls)) (let ((ap4ad0@ls/false (ap30f9@syntax-dispatch ap4ace@t 'each-any))) (if ap4ad0@ls/false (apply (lambda (ap4ad2@ls) (map (lambda (ap4ad4@x) (make-simple-struct 'stx '5 (list (let ((ap4ad6@x (ap31df@syntax->datum ap4ad4@x))) (if (or (symbol? ap4ad6@x) (string? ap4ad6@x)) (gensym ap4ad6@x) (gensym 't))) ap2e76@top-mark* '() '()))) ap4ad2@ls)) ap4ad0@ls/false) (let ((ap4ad8@t ap4ace@t)) (let ((ap4ada@ls/false (ap30f9@syntax-dispatch ap4ad8@t '_))) (if ap4ada@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) ap4ada@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4ad8@t))))))))) (set! ap4c60@ap31c7@generate-temporaries ap31c7@generate-temporaries) (set! ap31c9@free-identifier=? (lambda (ap4adc@x ap4add@y) (if (ap2ef2@id? ap4adc@x) (if (ap2ef2@id? ap4add@y) (ap2ef8@free-id=? ap4adc@x ap4add@y) (assertion-violation 'free-identifier=? '"not an identifier" ap4add@y)) (assertion-violation 'free-identifier=? '"not an identifier" ap4adc@x)))) (set! ap4c61@ap31c9@free-identifier=? ap31c9@free-identifier=?) (set! ap31cb@bound-identifier=? (lambda (ap4ae0@x ap4ae1@y) (if (ap2ef2@id? ap4ae0@x) (if (ap2ef2@id? ap4ae1@y) (ap2ef6@bound-id=? ap4ae0@x ap4ae1@y) (assertion-violation 'bound-identifier=? '"not an identifier" ap4ae1@y)) (assertion-violation 'bound-identifier=? '"not an identifier" ap4ae0@x)))) (set! ap4c62@ap31cb@bound-identifier=? ap31cb@bound-identifier=?) (set! ap31cd@make-source-condition (lambda (ap4ae4@x) (letrec* ((ap4aee@ap4ae9 (make-record-type-descriptor '&source-information &condition-rtd 'ap4aec '#f '#f '#((immutable file-name) (immutable line)))) (ap4af0@ap4aeb '#f) (ap4af2@ap4aea (make-record-constructor-descriptor ap4aee@ap4ae9 &condition-rcd ap4af0@ap4aeb)) (ap4af5@ap4ae8 (record-predicate ap4aee@ap4ae9)) (ap4af7@make-source-condition (record-constructor ap4af2@ap4aea)) (ap4af9@ap4ae6 (record-accessor ap4aee@ap4ae9 '0)) (ap4afb@ap4ae7 (record-accessor ap4aee@ap4ae9 '1)) (ap4afd@source-condition? (condition-predicate ap4aee@ap4ae9)) (ap4aff@source-filename (condition-accessor ap4aee@ap4ae9 ap4af9@ap4ae6)) (ap4b01@source-character (condition-accessor ap4aee@ap4ae9 ap4afb@ap4ae7))) (if (and (pair? ap4ae4@x) (pair? (cdr ap4ae4@x))) (ap4af7@make-source-condition (car ap4ae4@x) (cadr ap4ae4@x)) (condition))))) (set! ap4c63@ap31cd@make-source-condition ap31cd@make-source-condition) (set! ap31cf@extract-position-condition (lambda (ap4b02@x) (ap31cd@make-source-condition (ap31d1@expression-position ap4b02@x)))) (set! ap4c64@ap31cf@extract-position-condition ap31cf@extract-position-condition) (set! ap31d1@expression-position (lambda (ap4b04@x) (and (ap2ebe@stx? ap4b04@x) (let ((ap4b06@x (ap2ec0@stx-expr ap4b04@x))) (and (ap2a36@ap2908@annotation? ap4b06@x) (ap2a37@ap290a@annotation-source ap4b06@x)))))) (set! ap4c65@ap31d1@expression-position ap31d1@expression-position) (set! ap31d3@assertion-error (lambda (ap4b08@expr ap4b09@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list ap4b08@expr)) (ap31cd@make-source-condition ap4b09@pos))))) (set! ap4c66@ap31d3@assertion-error ap31d3@assertion-error) (set! ap31d5@syntax-error (lambda (ap4b0c@x . ap4b0e@args) (begin (if (not (for-all string? ap4b0e@args)) (assertion-violation 'syntax-error '"invalid argument" ap4b0e@args) (void)) (raise (condition (make-message-condition (if (null? ap4b0e@args) '"invalid syntax" (apply string-append ap4b0e@args))) (make-syntax-violation (ap31df@syntax->datum ap4b0c@x) '#f) (ap31cf@extract-position-condition ap4b0c@x)))))) (set! ap4c67@ap31d5@syntax-error ap31d5@syntax-error) (set! ap31d7@syntax-violation* (lambda (ap4b10@who ap4b11@msg ap4b12@form ap4b13@condition-object) (begin (if (not (string? ap4b11@msg)) (assertion-violation 'syntax-violation '"message is not a string" ap4b11@msg) (void)) (let ((ap4b18@who (if (or (string? ap4b10@who) (symbol? ap4b10@who)) ap4b10@who (if (not ap4b10@who) (let ((ap4b1a@t ap4b12@form)) (let ((ap4b1c@ls/false (ap30f9@syntax-dispatch ap4b1a@t 'any))) (if (and ap4b1c@ls/false (apply (lambda (ap4b1e@id) (ap2ef2@id? ap4b1e@id)) ap4b1c@ls/false)) (apply (lambda (ap4b20@id) (ap31df@syntax->datum ap4b20@id)) ap4b1c@ls/false) (let ((ap4b22@t ap4b1a@t)) (let ((ap4b24@ls/false (ap30f9@syntax-dispatch ap4b22@t '(any . any)))) (if (and ap4b24@ls/false (apply (lambda (ap4b26@id ap4b27@rest) (ap2ef2@id? ap4b26@id)) ap4b24@ls/false)) (apply (lambda (ap4b2a@id ap4b2b@rest) (ap31df@syntax->datum ap4b2a@id)) ap4b24@ls/false) (let ((ap4b2e@t ap4b22@t)) (let ((ap4b30@ls/false (ap30f9@syntax-dispatch ap4b2e@t '_))) (if ap4b30@ls/false (apply (lambda () '#f) ap4b30@ls/false) (ap31d9@syntax-violation '#f '"invalid syntax" ap4b2e@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" ap4b10@who))))) (raise (condition (if ap4b18@who (make-who-condition ap4b18@who) (condition)) (make-message-condition ap4b11@msg) ap4b13@condition-object (ap31cf@extract-position-condition ap4b12@form))))))) (set! ap4c68@ap31d7@syntax-violation* ap31d7@syntax-violation*) (set! ap31d9@syntax-violation (lambda ap4b40 (let ((ap4b41 (length ap4b40))) (if (= ap4b41 '3) (apply (lambda (ap4b32@who ap4b33@msg ap4b34@form) (ap31d9@syntax-violation ap4b32@who ap4b33@msg ap4b34@form '#f)) ap4b40) (if (= ap4b41 '4) (apply (lambda (ap4b38@who ap4b39@msg ap4b3a@form ap4b3b@subform) (ap31d7@syntax-violation* ap4b38@who ap4b39@msg ap4b3a@form (make-syntax-violation (ap31df@syntax->datum ap4b3a@form) (ap31df@syntax->datum ap4b3b@subform)))) ap4b40) (error 'apply '"invalid arg count")))))) (set! ap4c69@ap31d9@syntax-violation ap31d9@syntax-violation) (set! ap31db@identifier? (lambda (ap4b42@x) (ap2ef2@id? ap4b42@x))) (set! ap4c6a@ap31db@identifier? ap31db@identifier?) (set! ap31dd@datum->syntax (lambda (ap4b44@id ap4b45@datum) (if (ap2ef2@id? ap4b44@id) (ap2ed2@datum->stx ap4b44@id ap4b45@datum) (assertion-violation 'datum->syntax '"not an identifier" ap4b44@id)))) (set! ap4c6b@ap31dd@datum->syntax ap31dd@datum->syntax) (set! ap31df@syntax->datum (lambda (ap4b48@x) (ap2f06@stx->datum ap4b48@x))) (set! ap4c6c@ap31df@syntax->datum ap31df@syntax->datum) (set! ap31e1@ungensym-all (lambda (ap4b4a@code) (if (pair? ap4b4a@code) (cons (ap31e1@ungensym-all (car ap4b4a@code)) (ap31e1@ungensym-all (cdr ap4b4a@code))) (if (symbol? ap4b4a@code) (ungensym ap4b4a@code) ap4b4a@code)))) (set! ap4c6d@ap31e1@ungensym-all ap31e1@ungensym-all) (set! ap31e3@compile-r6rs-top-level (lambda (ap4b4c@x*) (call-with-values (lambda () (ap3171@top-level-expander ap4b4c@x*)) (lambda (ap4b52@ap4b4f ap4b53@ap4b51) (let ((ap4b56@invoke-code ap4b53@ap4b51) (ap4b57@lib* ap4b52@ap4b4f)) (lambda () (begin (for-each ap2d0e@ap2b5c@invoke-library ap4b57@lib*) (let ((ap4b5a@expanded (ap2a98@ap2a50@expanded->core ap4b56@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (ap31e1@ungensym-all ap4b5a@expanded)) (void)) (eval-core ap4b5a@expanded)))))))))) (set! ap4c6e@ap31e3@compile-r6rs-top-level ap31e3@compile-r6rs-top-level) (set! ap31e5@pre-compile-r6rs-top-level (lambda (ap4b5c@x*) (call-with-values (lambda () (ap3171@top-level-expander ap4b5c@x*)) (lambda (ap4b62@ap4b5f ap4b63@ap4b61) (let ((ap4b66@invoke-code ap4b63@ap4b61) (ap4b67@lib* ap4b62@ap4b5f)) (begin (for-each ap2d0e@ap2b5c@invoke-library ap4b67@lib*) (ap2a40@ap291c@compile-core (ap2a98@ap2a50@expanded->core ap4b66@invoke-code)))))))) (set! ap4c6f@ap31e5@pre-compile-r6rs-top-level ap31e5@pre-compile-r6rs-top-level) (set! ap31e7@interaction-environment (let ((ap4b6a@the-env '#f)) (lambda () (or ap4b6a@the-env (let ((ap4b6c@lib (ap2d07@ap2b4e@find-library-by-name '(mosh interaction))) (ap4b6d@rib (ap2ea6@make-empty-rib))) (begin (let ((ap4b70@subst (ap2ce9@ap2b12@library-subst ap4b6c@lib))) (begin (ap2e92@set-rib-sym*! ap4b6d@rib (map car ap4b70@subst)) (ap2e96@set-rib-mark**! ap4b6d@rib (map (lambda (ap4b72@x) ap2e76@top-mark*) ap4b70@subst)) (ap2e9a@set-rib-label*! ap4b6d@rib (map cdr ap4b70@subst)))) (let ((ap4b74@env (make-simple-struct 'interaction-env '4 (list ap4b6d@rib '() '())))) (begin (set! ap4b6a@the-env ap4b74@env) ap4b74@env)))))))) (set! ap4c70@ap31e7@interaction-environment ap31e7@interaction-environment) (set! ap31e9@top-level-context (ap2a42@ap2920@make-parameter '#f)) (set! ap4c71@ap31e9@top-level-context ap31e9@top-level-context) (ap2d04@ap2b48@current-library-expander ap31bb@library-expander))
(begin (begin (ap2a95@ap2a4a@current-primitive-locations (lambda (ap51c7@x) (let ((ap51c9@t (assq ap51c7@x '((syntax-error . ap4c67@ap31d5@syntax-error) (syntax-dispatch . ap4c05@ap30f9@syntax-dispatch) (load . ap4df1@ap4c98@load) (interaction-environment . ap4c70@ap31e7@interaction-environment) (library-path . ap2cfc@ap2b38@library-path) (mosh-cache-dir . ap2a43@ap2922@mosh-cache-dir) (make-parameter . ap2a42@ap2920@make-parameter) (make-variable-transformer . ap4bc2@ap2f24@make-variable-transformer) (identifier? . ap4c6a@ap31db@identifier?) (generate-temporaries . ap4c60@ap31c7@generate-temporaries) (free-identifier=? . ap4c61@ap31c9@free-identifier=?) (syntax->datum . ap4c6c@ap31df@syntax->datum) (datum->syntax . ap4c6b@ap31dd@datum->syntax) (bound-identifier=? . ap4c62@ap31cb@bound-identifier=?) (scheme-report-environment . ap4c57@ap31b5@scheme-report-environment) (null-environment . ap4c56@ap31b3@null-environment) (command-line . ap4dee@ap4c92@command-line) (eval . ap4c59@ap31b9@eval) (environment . ap4c55@ap31b1@environment) (syntax-violation . ap4c69@ap31d9@syntax-violation) (assertion-error . ap4c66@ap31d3@assertion-error))))) (if ap51c9@t (cdr ap51c9@t) '#f)))) (ap2d0c@ap2b58@install-library 'ap51a4 '(mosh interaction) '() '() '() '() '((regexp? . ap5164) (alist->eq-hash-table . ap5160) (format . ap515d) (string-split . ap514d) (call-process . ap5146) (set-current-directory! . ap5142) (expand-path . ap5141) (current-directory . ap5140) (%spawn . ap513f) (%waitpid . ap513e) (simple-struct-name . ap513d) (simple-struct-set! . ap513c) (simple-struct-ref . ap513b) (make-simple-struct . ap513a) (simple-struct? . ap5139) (pointer-ref-c-int64 . ap5138) (pointer-ref-c-int32 . ap5137) (pointer-ref-c-int16 . ap5136) (pointer-ref-c-int8 . ap5135) (pointer-ref-c-uint64 . ap5134) (pointer-ref-c-uint32 . ap5133) (pointer-ref-c-uint16 . ap5132) (pointer-ref-c-uint8 . ap5131) (pointer-set-c-uint64! . ap5130) (pointer-set-c-uint32! . ap512f) (pointer-set-c-uint16! . ap512e) (pointer-set-c-uint8! . ap512d) (pointer-set-c-int64! . ap512c) (pointer-set-c-int32! . ap512b) (pointer-set-c-int16! . ap512a) (pointer-set-c-int8! . ap5129) (pointer-set-c-pointer! . ap5128) (pointer-set-c-double! . ap5127) (pointer-set-c-float! . ap5126) (pointer-set-c-long-long! . ap5125) (pointer-set-c-long! . ap5124) (pointer-set-c-int! . ap5123) (pointer-set-c-short! . ap5122) (pointer-set-c-char! . ap5121) (pointer-ref-c-pointer . ap5120) (pointer-ref-c-double . ap511f) (pointer-ref-c-float . ap511e) (pointer-ref-c-unsigned-long-long . ap511d) (pointer-ref-c-signed-long-long . ap511c) (pointer-ref-c-unsigned-long . ap511b) (pointer-ref-c-signed-long . ap511a) (pointer-ref-c-unsigned-int . ap5119) (pointer-ref-c-signed-int . ap5118) (pointer-ref-c-unsigned-short . ap5117) (pointer-ref-c-signed-short . ap5116) (pointer-ref-c-unsigned-char . ap5115) (pointer-ref-c-signed-char . ap5114) (pointer->integer . ap5113) (integer->pointer . ap5112) (pointer? . ap5111) (shared-errno . ap5110) (%ffi-supported? . ap510b) (%ffi-pointer->string . ap510a) (%ffi-call . ap5109) (%ffi-lookup . ap5108) (%ffi-open . ap5107) (null-terminated-utf8->string . ap5106) (null-terminated-bytevector->string . ap5105) (%exec . ap5104) (%fork . ap5103) (%pipe . ap5102) (p . ap5101) (whereis . ap50e5) (register . ap50e4) (vm-join! . ap50e3) (vm-set-value! . ap50e2) (vm? . ap50e1) (main-vm? . ap50e0) (vm-eval . ap50df) (vm-self . ap50de) (vm-start! . ap50dd) (make-vm . ap50dc) (mutex-try-lock! . ap50db) (mutex-unlock! . ap50da) (mutex-lock! . ap50d9) (mutex? . ap50d8) (make-mutex . ap50d7) (condition-variable-notify-all! . ap50d6) (condition-variable-notify! . ap50d5) (condition-variable-wait! . ap50d4) (make-condition-variable . ap50d3) (write/ss . ap50d2) (string-upcase . ap50b9) (string-titlecase . ap50b8) (string-normalize-nfkd . ap50b7) (string-normalize-nfkc . ap50b6) (string-normalize-nfd . ap50b5) (string-normalize-nfc . ap50b4) (string-foldcase . ap50b3) (string-downcase . ap50b2) (string-ci>? . ap50b1) (string-ci>=? . ap50b0) (string-ci=? . ap50af) (string-ci<? . ap50ae) (string-ci<=? . ap50ad) (char-whitespace? . ap50ac) (char-upper-case? . ap50ab) (char-title-case? . ap50aa) (char-numeric? . ap50a9) (char-lower-case? . ap50a8) (char-general-category . ap50a7) (char-upcase . ap50a6) (char-titlecase . ap50a5) (char-foldcase . ap50a4) (char-downcase . ap50a3) (char-ci>? . ap50a2) (char-ci>=? . ap50a1) (char-ci=? . ap50a0) (char-ci<? . ap509f) (char-ci<=? . ap509e) (char-alphabetic? . ap509d) (make-variable-transformer . ap2f23) (identifier? . ap31da) (generate-temporaries . ap31c6) (free-identifier=? . ap31c8) (syntax->datum . ap31de) (datum->syntax . ap31dc) (bound-identifier=? . ap31ca) (record-type-descriptor? . ap509c) (record-predicate . ap509b) (record-mutator . ap509a) (record-constructor . ap5099) (record-accessor . ap5098) (make-record-type-descriptor . ap5097) (make-record-constructor-descriptor . ap5096) (record? . ap5095) (record-type-uid . ap5094) (record-type-sealed? . ap5093) (record-type-parent . ap5092) (record-type-opaque? . ap5091) (record-type-name . ap5090) (record-type-generative? . ap508f) (record-type-field-names . ap508e) (record-rtd . ap508d) (record-field-mutable? . ap508c) (delete-file . ap508b) (file-exists? . ap508a) (vector-sort! . ap5089) (vector-sort . ap5088) (list-sort . ap5087) (symbol-hash . ap5086) (string-ci-hash . ap5085) (string-hash . ap5084) (equal-hash . ap5083) (hashtable-equivalence-function . ap5082) (make-hashtable . ap5081) (hashtable-hash-function . ap5080) (make-eqv-hashtable . ap507f) (make-eq-hashtable . ap507e) (hashtable? . ap507d) (hashtable-update! . ap507c) (hashtable-size . ap507b) (hashtable-set! . ap507a) (hashtable-ref . ap5079) (hashtable-mutable? . ap5078) (hashtable-keys . ap5077) (hashtable-entries . ap5076) (hashtable-delete! . ap5075) (hashtable-copy . ap5074) (hashtable-contains? . ap5073) (hashtable-clear! . ap5072) (call-with-output-file . ap5071) (call-with-input-file . ap5070) (write-char . ap506f) (write . ap506e) (with-output-to-file . ap506d) (with-input-from-file . ap506c) (read-char . ap506b) (read . ap506a) (peek-char . ap5069) (open-output-file . ap5068) (open-input-file . ap5067) (newline . ap5066) (display . ap5065) (close-output-port . ap5064) (close-input-port . ap5063) (eof-object? . ap5062) (eof-object . ap5061) (current-error-port . ap5060) (current-output-port . ap505f) (current-input-port . ap505e) (output-port? . ap505d) (input-port? . ap505c) (utf-8-codec . ap505b) (utf-16-codec . ap505a) (transcoder-error-handling-mode . ap5059) (transcoder-eol-style . ap5058) (transcoder-codec . ap5057) (transcoded-port . ap5056) (textual-port? . ap5055) (string->bytevector . ap5054) (standard-output-port . ap5053) (standard-input-port . ap5052) (standard-error-port . ap5051) (set-port-position! . ap5050) (put-u8 . ap504f) (put-string . ap504e) (put-datum . ap504d) (put-char . ap504c) (put-bytevector . ap504b) (port? . ap504a) (port-transcoder . ap5049) (port-position . ap5048) (port-has-set-port-position!? . ap5047) (port-has-port-position? . ap5046) (port-eof? . ap5045) (output-port-buffer-mode . ap5044) (open-string-output-port . ap5043) (open-string-input-port . ap5042) (open-file-output-port . ap5041) (open-file-input/output-port . ap5040) (open-file-input-port . ap503f) (open-bytevector-output-port . ap503e) (open-bytevector-input-port . ap503d) (native-transcoder . ap503c) (native-eol-style . ap503b) (make-transcoder . ap503a) (latin-1-codec . ap5039) (make-i/o-write-error . ap5038) (make-i/o-read-error . ap5037) (make-i/o-port-error . ap5036) (make-i/o-invalid-position-error . ap5035) (make-i/o-filename-error . ap5034) (make-i/o-file-protection-error . ap5033) (make-i/o-file-is-read-only-error . ap5032) (make-i/o-file-does-not-exist-error . ap5031) (make-i/o-file-already-exists-error . ap5030) (make-i/o-error . ap502f) (make-i/o-encoding-error . ap502e) (make-i/o-decoding-error . ap502d) (make-custom-textual-output-port . ap502c) (make-custom-textual-input/output-port . ap502b) (make-custom-textual-input-port . ap502a) (make-custom-binary-output-port . ap5029) (make-custom-binary-input/output-port . ap5028) (make-custom-binary-input-port . ap5027) (make-bytevector . ap5026) (lookahead-u8 . ap5025) (lookahead-char . ap5024) (i/o-write-error? . ap5023) (i/o-read-error? . ap5022) (i/o-port-error? . ap5021) (i/o-invalid-position-error? . ap5020) (i/o-filename-error? . ap501f) (i/o-file-protection-error? . ap501e) (i/o-file-is-read-only-error? . ap501d) (i/o-file-does-not-exist-error? . ap501c) (i/o-file-already-exists-error? . ap501b) (i/o-error? . ap501a) (i/o-error-position . ap5019) (i/o-error-port . ap5018) (i/o-error-filename . ap5017) (i/o-encoding-error? . ap5016) (i/o-encoding-error-char . ap5015) (i/o-decoding-error? . ap5014) (get-u8 . ap5013) (get-string-n! . ap5012) (get-string-n . ap5011) (get-string-all . ap5010) (get-line . ap500f) (get-datum . ap500e) (get-char . ap500d) (get-bytevector-some . ap500c) (get-bytevector-n! . ap500b) (get-bytevector-n . ap500a) (get-bytevector-all . ap5009) (flush-output-port . ap5008) (close-port . ap5007) (exit . ap4fff) (command-line . ap4c91) (string-fill! . ap4ffe) (string-set! . ap4ffd) (set-cdr! . ap4ffc) (set-car! . ap4ffb) (remove . ap4ffa) (remv . ap4ff9) (remp . ap4ff8) (remq . ap4ff7) (partition . ap4ff6) (memv . ap4ff5) (memq . ap4ff4) (memp . ap4ff3) (member . ap4ff2) (exists . ap4ff1) (for-all . ap4ff0) (fold-right . ap4fef) (fold-left . ap4fee) (find . ap4fed) (filter . ap4fec) (cons* . ap4feb) (assv . ap4fea) (assq . ap4fe9) (assp . ap4fe8) (assoc . ap4fe7) (call-with-string-output-port . ap4fe6) (call-with-port . ap4fe5) (call-with-bytevector-output-port . ap4fe4) (bytevector->string . ap4fe3) (buffer-mode? . ap4fe2) (binary-port? . ap4fe1) (with-exception-handler . ap4fe0) (raise-continuable . ap4fdf) (raise . ap4fde) (eval . ap31b8) (environment . ap31b0) (make-enumeration . ap4fdd) (enum-set=? . ap4fdc) (enum-set-universe . ap4fdb) (enum-set-union . ap4fda) (enum-set-subset? . ap4fd9) (enum-set-projection . ap4fd8) (enum-set-member? . ap4fd7) (enum-set-intersection . ap4fd6) (enum-set-indexer . ap4fd5) (enum-set-difference . ap4fd4) (enum-set-constructor . ap4fd3) (enum-set-complement . ap4fd2) (enum-set->list . ap4fd1) (who-condition? . ap4fd0) (warning? . ap4fcf) (violation? . ap4fce) (undefined-violation? . ap4fcd) (syntax-violation? . ap4fcc) (syntax-violation-subform . ap4fcb) (syntax-violation-form . ap4fca) (syntax-violation . ap31d8) (simple-conditions . ap4fc9) (serious-condition? . ap4fc8) (non-continuable-violation? . ap4fc7) (message-condition? . ap4fc6) (make-who-condition . ap4fc5) (make-warning . ap4fc4) (make-violation . ap4fc3) (make-undefined-violation . ap4fc2) (make-syntax-violation . ap4fc1) (make-serious-condition . ap4fc0) (make-non-continuable-violation . ap4fbf) (make-message-condition . ap4fbe) (make-lexical-violation . ap4fbd) (make-irritants-condition . ap4fbc) (make-implementation-restriction-violation . ap4fbb) (make-error . ap4fba) (make-assertion-violation . ap4fb9) (lexical-violation? . ap4fb8) (irritants-condition? . ap4fb7) (implementation-restriction-violation? . ap4fb6) (error? . ap4fb5) (condition-who . ap4fb4) (condition-predicate . ap4fb3) (condition-message . ap4fb2) (condition-irritants . ap4fb1) (condition-accessor . ap4fb0) (condition . ap4faf) (assertion-violation? . ap4fae) (condition? . ap4fad) (utf32->string . ap4fac) (utf16->string . ap4fab) (utf8->string . ap4faa) (uint-list->bytevector . ap4fa9) (u8-list->bytevector . ap4fa8) (string->utf8 . ap4fa7) (string->utf32 . ap4fa6) (string->utf16 . ap4fa5) (sint-list->bytevector . ap4fa4) (native-endianness . ap4fa3) (bytevector? . ap4fa2) (bytevector=? . ap4fa1) (bytevector-uint-set! . ap4fa0) (bytevector-uint-ref . ap4f9f) (bytevector-u8-set! . ap4f9e) (bytevector-u8-ref . ap4f9d) (bytevector-u64-set! . ap4f9c) (bytevector-u64-ref . ap4f9b) (bytevector-u64-native-set! . ap4f9a) (bytevector-u64-native-ref . ap4f99) (bytevector-u32-set! . ap4f98) (bytevector-u32-ref . ap4f97) (bytevector-u32-native-set! . ap4f96) (bytevector-u32-native-ref . ap4f95) (bytevector-u16-set! . ap4f94) (bytevector-u16-ref . ap4f93) (bytevector-u16-native-set! . ap4f92) (bytevector-u16-native-ref . ap4f91) (bytevector-sint-set! . ap4f90) (bytevector-sint-ref . ap4f8f) (bytevector-s8-set! . ap4f8e) (bytevector-s8-ref . ap4f8d) (bytevector-s64-set! . ap4f8c) (bytevector-s64-ref . ap4f8b) (bytevector-s64-native-set! . ap4f8a) (bytevector-s64-native-ref . ap4f89) (bytevector-s32-set! . ap4f88) (bytevector-s32-ref . ap4f87) (bytevector-s32-native-set! . ap4f86) (bytevector-s32-native-ref . ap4f85) (bytevector-s16-set! . ap4f84) (bytevector-s16-ref . ap4f83) (bytevector-s16-native-set! . ap4f82) (bytevector-s16-native-ref . ap4f81) (bytevector-length . ap4f80) (bytevector-ieee-single-ref . ap4f7f) (bytevector-ieee-single-set! . ap4f7e) (bytevector-ieee-single-native-set! . ap4f7d) (bytevector-ieee-single-native-ref . ap4f7c) (bytevector-ieee-double-set! . ap4f7b) (bytevector-ieee-double-ref . ap4f7a) (bytevector-ieee-double-native-set! . ap4f79) (bytevector-ieee-double-native-ref . ap4f78) (bytevector-fill! . ap4f77) (bytevector-copy! . ap4f76) (bytevector-copy . ap4f75) (bytevector->uint-list . ap4f74) (bytevector->u8-list . ap4f73) (bytevector->sint-list . ap4f72) (no-nans-violation? . ap4f71) (no-infinities-violation? . ap4f70) (make-no-nans-violation . ap4f6f) (make-no-infinities-violation . ap4f6e) (real->flonum . ap4f6d) (flzero? . ap4f6c) (fltruncate . ap4f6b) (fltan . ap4f6a) (flsqrt . ap4f69) (flsin . ap4f68) (flround . ap4f67) (flpositive? . ap4f66) (flonum? . ap4f65) (flodd? . ap4f64) (flnumerator . ap4f63) (flnegative? . ap4f62) (flnan? . ap4f61) (flmod0 . ap4f60) (flmod . ap4f5f) (flmin . ap4f5e) (flmax . ap4f5d) (fllog . ap4f5c) (flinteger? . ap4f5b) (flinfinite? . ap4f5a) (flfloor . ap4f59) (flfinite? . ap4f58) (flexpt . ap4f57) (flexp . ap4f56) (fleven? . ap4f55) (fldiv0-and-mod0 . ap4f54) (fldiv0 . ap4f53) (fldiv-and-mod . ap4f52) (fldiv . ap4f51) (fldenominator . ap4f50) (flcos . ap4f4f) (flceiling . ap4f4e) (flatan . ap4f4d) (flasin . ap4f4c) (flacos . ap4f4b) (flabs . ap4f4a) (fl>? . ap4f49) (fl>=? . ap4f48) (fl=? . ap4f47) (fl<? . ap4f46) (fl<=? . ap4f45) (fl/ . ap4f44) (fl- . ap4f43) (fl+ . ap4f42) (fl* . ap4f41) (fixnum->flonum . ap4f40) (fxzero? . ap4f3f) (fxxor . ap4f3e) (fxrotate-bit-field . ap4f3d) (fxreverse-bit-field . ap4f3c) (fxpositive? . ap4f3b) (fxodd? . ap4f3a) (fxnot . ap4f39) (fxnegative? . ap4f38) (fxmod0 . ap4f37) (fxmod . ap4f36) (fxmin . ap4f35) (fxmax . ap4f34) (fxlength . ap4f33) (fxior . ap4f32) (fxif . ap4f31) (fxfirst-bit-set . ap4f30) (fxeven? . ap4f2f) (fxdiv0-and-mod0 . ap4f2e) (fxdiv0 . ap4f2d) (fxdiv-and-mod . ap4f2c) (fxdiv . ap4f2b) (fxcopy-bit-field . ap4f2a) (fxcopy-bit . ap4f29) (fxbit-set? . ap4f28) (fxbit-field . ap4f27) (fxbit-count . ap4f26) (fxarithmetic-shift-right . ap4f25) (fxarithmetic-shift-left . ap4f24) (fxarithmetic-shift . ap4f23) (fxand . ap4f22) (fx>? . ap4f21) (fx>=? . ap4f20) (fx=? . ap4f1f) (fx<? . ap4f1e) (fx<=? . ap4f1d) (fx-/carry . ap4f1c) (fx- . ap4f1b) (fx+/carry . ap4f1a) (fx+ . ap4f19) (fx*/carry . ap4f18) (fx* . ap4f17) (greatest-fixnum . ap4f16) (least-fixnum . ap4f15) (fixnum-width . ap4f14) (fixnum? . ap4f13) (bitwise-rotate-bit-field . ap4f12) (bitwise-reverse-bit-field . ap4f11) (bitwise-length . ap4f10) (bitwise-if . ap4f0f) (bitwise-first-bit-set . ap4f0e) (bitwise-copy-bit-field . ap4f0d) (bitwise-copy-bit . ap4f0c) (bitwise-bit-set? . ap4f0b) (bitwise-bit-field . ap4f0a) (bitwise-bit-count . ap4f09) (bitwise-xor . ap4f08) (bitwise-ior . ap4f07) (bitwise-and . ap4f06) (bitwise-not . ap4f05) (bitwise-arithmetic-shift-right . ap4f04) (bitwise-arithmetic-shift-left . ap4f03) (bitwise-arithmetic-shift . ap4f02) (zero? . ap4f01) (vector? . ap4f00) (vector-set! . ap4eff) (vector-ref . ap4efe) (vector-map . ap4efd) (vector-length . ap4efc) (vector-for-each . ap4efb) (vector-fill! . ap4efa) (vector->list . ap4ef9) (vector . ap4ef8) (values . ap4ef7) (truncate . ap4ef6) (tan . ap4ef5) (symbol? . ap4ef4) (symbol=? . ap4ef3) (symbol->string . ap4ef2) (substring . ap4ef1) (string? . ap4ef0) (string>? . ap4eef) (string>=? . ap4eee) (string=? . ap4eed) (string<? . ap4eec) (string<=? . ap4eeb) (string-ref . ap4eea) (string-length . ap4ee9) (string-for-each . ap4ee8) (string-copy . ap4ee7) (string-append . ap4ee6) (string->symbol . ap4ee5) (string->number . ap4ee4) (string->list . ap4ee3) (string . ap4ee2) (sqrt . ap4ee1) (sin . ap4ee0) (round . ap4edf) (reverse . ap4ede) (real? . ap4edd) (real-valued? . ap4edc) (real-part . ap4edb) (rationalize . ap4eda) (rational? . ap4ed9) (rational-valued? . ap4ed8) (procedure? . ap4ed7) (positive? . ap4ed6) (pair? . ap4ed5) (odd? . ap4ed4) (numerator . ap4ed3) (number? . ap4ed2) (number->string . ap4ed1) (null? . ap4ed0) (not . ap4ecf) (negative? . ap4ece) (nan? . ap4ecd) (min . ap4ecc) (max . ap4ecb) (map . ap4eca) (make-vector . ap4ec9) (make-string . ap4ec8) (make-rectangular . ap4ec7) (make-polar . ap4ec6) (magnitude . ap4ec5) (log . ap4ec4) (list? . ap4ec3) (list-tail . ap4ec2) (list-ref . ap4ec1) (list->vector . ap4ec0) (list->string . ap4ebf) (list . ap4ebe) (length . ap4ebd) (lcm . ap4ebc) (integer? . ap4ebb) (integer-valued? . ap4eba) (integer->char . ap4eb9) (infinite? . ap4eb8) (inexact? . ap4eb7) (inexact . ap4eb6) (imag-part . ap4eb5) (gcd . ap4eb4) (for-each . ap4eb3) (floor . ap4eb2) (finite? . ap4eb1) (expt . ap4eb0) (exp . ap4eaf) (exact? . ap4eae) (exact-integer-sqrt . ap4ead) (exact . ap4eac) (even? . ap4eab) (error . ap4eaa) (eqv? . ap4ea9) (equal? . ap4ea8) (eq? . ap4ea7) (dynamic-wind . ap4ea6) (div0-and-mod0 . ap4ea5) (mod0 . ap4ea4) (div0 . ap4ea3) (div-and-mod . ap4ea2) (mod . ap4ea1) (div . ap4ea0) (denominator . ap4e9f) (cos . ap4e9e) (cons . ap4e9d) (complex? . ap4e9c) (char? . ap4e9b) (char>? . ap4e9a) (char>=? . ap4e99) (char=? . ap4e98) (char<? . ap4e97) (char<=? . ap4e96) (char->integer . ap4e95) (ceiling . ap4e94) (call-with-values . ap4e93) (call/cc . ap4e92) (call-with-current-continuation . ap4e91) (cddddr . ap4e90) (cdddar . ap4e8f) (cddadr . ap4e8e) (cddaar . ap4e8d) (cdaddr . ap4e8c) (cdadar . ap4e8b) (cdaadr . ap4e8a) (cdaaar . ap4e89) (cadddr . ap4e88) (caddar . ap4e87) (cadadr . ap4e86) (cadaar . ap4e85) (caaddr . ap4e84) (caadar . ap4e83) (caaadr . ap4e82) (caaaar . ap4e81) (cdddr . ap4e80) (cddar . ap4e7f) (cdadr . ap4e7e) (cdaar . ap4e7d) (caddr . ap4e7c) (cadar . ap4e7b) (caadr . ap4e7a) (caaar . ap4e79) (cddr . ap4e78) (cdar . ap4e77) (cadr . ap4e76) (caar . ap4e75) (cdr . ap4e74) (car . ap4e73) (boolean? . ap4e72) (boolean=? . ap4e71) (atan . ap4e70) (assertion-violation . ap4e6f) (asin . ap4e6e) (apply . ap4e6d) (append . ap4e6c) (angle . ap4e6b) (acos . ap4e6a) (abs . ap4e69) (/ . ap4e68) (* . ap4e67) (- . ap4e66) (+ . ap4e65) (>= . ap4e64) (> . ap4e63) (= . ap4e62) (<= . ap4e61) (< . ap4e60) (library . ap4e5f) (&no-nans . ap4e5e) (&no-infinities . ap4e5d) (&i/o-encoding . ap4e5c) (&i/o-decoding . ap4e5b) (&i/o-port . ap4e5a) (&i/o-file-does-not-exist . ap4e59) (&i/o-file-already-exists . ap4e58) (&i/o-file-is-read-only . ap4e57) (&i/o-file-protection . ap4e56) (&i/o-filename . ap4e55) (&i/o-invalid-position . ap4e54) (&i/o-write . ap4e53) (&i/o-read . ap4e52) (&i/o . ap4e51) (&undefined . ap4e50) (&syntax . ap4e4f) (&lexical . ap4e4e) (&implementation-restriction . ap4e4d) (&non-continuable . ap4e4c) (&who . ap4e4b) (&irritants . ap4e4a) (&assertion . ap4e49) (&violation . ap4e48) (&error . ap4e47) (&serious . ap4e46) (&warning . ap4e45) (&message . ap4e44) (&condition . ap4e43) (define-condition-type . ap4e42) (define-enumeration . ap4e41) (define-record-type . ap4e40) (parent-rtd . ap4e3f) (nongenerative . ap4e3e) (opaque . ap4e3d) (sealed . ap4e3c) (protocol . ap4e3b) (parent . ap4e3a) (immutable . ap4e39) (mutable . ap4e38) (fields . ap4e37) (error-handling-mode . ap4e36) (file-options . ap4e35) (buffer-mode . ap4e34) (eol-style . ap4e33) (guard . ap4e32) (unsyntax-splicing . ap4e2f) (unsyntax . ap4e2e) (unquote-splicing . ap4e2d) (unquote . ap4e2c) (_ . ap4e2b) (else . ap4e2a) (=> . ap4e29) (... . ap4e28) (assert . ap4e27) (endianness . ap4e26) (time . ap4e24) (do . ap4e23) (cond . ap4e22) (let* . ap4e21) (let*-values . ap4e20) (let-values . ap4e1f) (identifier-syntax . ap4e1e) (with-syntax . ap4e1d) (quasisyntax . ap4e1c) (quasiquote . ap4e1b) (syntax-rules . ap4e1a) (include . ap4e19) (record-constructor-descriptor . ap4e17) (record-type-descriptor . ap4e16) (case . ap4e15) (unless . ap4e13) (when . ap4e12) (or . ap4e11) (and . ap4e10) (if . ap4e0f) (let . ap4e0e) (letrec* . ap4e0d) (letrec . ap4e0c) (case-lambda . ap4e0a) (lambda . ap4e09) (syntax . ap4e08) (syntax-case . ap4e07) (quote . ap4e06) (letrec-syntax . ap4e04) (let-syntax . ap4e03) (set! . ap4e02) (import . ap4e01) (begin . ap4e00) (define-syntax . ap4dfe) (define . ap4dfd)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51a5 '(psyntax null-environment-5) '() '() '() '() '((make-promise . ap5000) (unquote-splicing . ap4e2d) (unquote . ap4e2c) (_ . ap4e2b) (else . ap4e2a) (=> . ap4e29) (... . ap4e28) (delay . ap4e25) (do . ap4e23) (cond . ap4e22) (let* . ap4e21) (quasiquote . ap4e1b) (syntax-rules . ap4e1a) (case . ap4e15) (or . ap4e11) (and . ap4e10) (if . ap4e0f) (let . ap4e0e) (letrec . ap4e0c) (lambda . ap4e09) (quote . ap4e06) (letrec-syntax . ap4e04) (let-syntax . ap4e03) (set! . ap4e02) (begin . ap4e00) (define-syntax . ap4dfe) (define . ap4dfd)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51a6 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . ap50b1) (string-ci>=? . ap50b0) (string-ci=? . ap50af) (string-ci<? . ap50ae) (string-ci<=? . ap50ad) (char-whitespace? . ap50ac) (char-upper-case? . ap50ab) (char-numeric? . ap50a9) (char-lower-case? . ap50a8) (char-upcase . ap50a6) (char-downcase . ap50a3) (char-ci>? . ap50a2) (char-ci>=? . ap50a1) (char-ci=? . ap50a0) (char-ci<? . ap509f) (char-ci<=? . ap509e) (char-alphabetic? . ap509d) (call-with-output-file . ap5071) (call-with-input-file . ap5070) (write-char . ap506f) (write . ap506e) (with-output-to-file . ap506d) (with-input-from-file . ap506c) (read-char . ap506b) (read . ap506a) (peek-char . ap5069) (open-output-file . ap5068) (open-input-file . ap5067) (newline . ap5066) (display . ap5065) (close-output-port . ap5064) (close-input-port . ap5063) (eof-object . ap5061) (current-output-port . ap505f) (current-input-port . ap505e) (output-port? . ap505d) (input-port? . ap505c) (scheme-report-environment . ap31b4) (quotient . ap5006) (null-environment . ap31b2) (remainder . ap5005) (modulo . ap5004) (inexact->exact . ap5003) (force . ap5002) (exact->inexact . ap5001) (make-promise . ap5000) (string-fill! . ap4ffe) (string-set! . ap4ffd) (set-cdr! . ap4ffc) (set-car! . ap4ffb) (memv . ap4ff5) (memq . ap4ff4) (member . ap4ff2) (assv . ap4fea) (assq . ap4fe9) (assoc . ap4fe7) (eval . ap31b8) (zero? . ap4f01) (vector? . ap4f00) (vector-set! . ap4eff) (vector-ref . ap4efe) (vector-length . ap4efc) (vector-fill! . ap4efa) (vector->list . ap4ef9) (vector . ap4ef8) (values . ap4ef7) (truncate . ap4ef6) (tan . ap4ef5) (symbol? . ap4ef4) (symbol->string . ap4ef2) (substring . ap4ef1) (string? . ap4ef0) (string>? . ap4eef) (string>=? . ap4eee) (string=? . ap4eed) (string<? . ap4eec) (string<=? . ap4eeb) (string-ref . ap4eea) (string-length . ap4ee9) (string-copy . ap4ee7) (string-append . ap4ee6) (string->symbol . ap4ee5) (string->number . ap4ee4) (string->list . ap4ee3) (string . ap4ee2) (sqrt . ap4ee1) (sin . ap4ee0) (round . ap4edf) (reverse . ap4ede) (real? . ap4edd) (real-part . ap4edb) (rationalize . ap4eda) (rational? . ap4ed9) (procedure? . ap4ed7) (positive? . ap4ed6) (pair? . ap4ed5) (odd? . ap4ed4) (numerator . ap4ed3) (number? . ap4ed2) (number->string . ap4ed1) (not . ap4ecf) (negative? . ap4ece) (min . ap4ecc) (max . ap4ecb) (map . ap4eca) (make-vector . ap4ec9) (make-string . ap4ec8) (make-rectangular . ap4ec7) (make-polar . ap4ec6) (magnitude . ap4ec5) (log . ap4ec4) (list? . ap4ec3) (list-tail . ap4ec2) (list-ref . ap4ec1) (list->vector . ap4ec0) (list->string . ap4ebf) (list . ap4ebe) (length . ap4ebd) (lcm . ap4ebc) (integer? . ap4ebb) (integer->char . ap4eb9) (inexact? . ap4eb7) (imag-part . ap4eb5) (gcd . ap4eb4) (for-each . ap4eb3) (floor . ap4eb2) (expt . ap4eb0) (exp . ap4eaf) (exact? . ap4eae) (even? . ap4eab) (eqv? . ap4ea9) (equal? . ap4ea8) (eq? . ap4ea7) (dynamic-wind . ap4ea6) (denominator . ap4e9f) (cos . ap4e9e) (cons . ap4e9d) (complex? . ap4e9c) (char? . ap4e9b) (char>? . ap4e9a) (char>=? . ap4e99) (char=? . ap4e98) (char<? . ap4e97) (char<=? . ap4e96) (char->integer . ap4e95) (ceiling . ap4e94) (call-with-values . ap4e93) (call-with-current-continuation . ap4e91) (cddddr . ap4e90) (cdddar . ap4e8f) (cddadr . ap4e8e) (cddaar . ap4e8d) (cdaddr . ap4e8c) (cdadar . ap4e8b) (cdaadr . ap4e8a) (cdaaar . ap4e89) (cadddr . ap4e88) (caddar . ap4e87) (cadadr . ap4e86) (cadaar . ap4e85) (caaddr . ap4e84) (caadar . ap4e83) (caaadr . ap4e82) (caaaar . ap4e81) (cdddr . ap4e80) (cddar . ap4e7f) (cdadr . ap4e7e) (cdaar . ap4e7d) (caddr . ap4e7c) (cadar . ap4e7b) (caadr . ap4e7a) (caaar . ap4e79) (cddr . ap4e78) (cdar . ap4e77) (cadr . ap4e76) (caar . ap4e75) (cdr . ap4e74) (car . ap4e73) (boolean? . ap4e72) (atan . ap4e70) (asin . ap4e6e) (apply . ap4e6d) (append . ap4e6c) (angle . ap4e6b) (acos . ap4e6a) (abs . ap4e69) (/ . ap4e68) (* . ap4e67) (- . ap4e66) (+ . ap4e65) (>= . ap4e64) (> . ap4e63) (= . ap4e62) (<= . ap4e61) (< . ap4e60) (unquote-splicing . ap4e2d) (unquote . ap4e2c) (else . ap4e2a) (=> . ap4e29) (... . ap4e28) (delay . ap4e25) (do . ap4e23) (cond . ap4e22) (let* . ap4e21) (quasiquote . ap4e1b) (syntax-rules . ap4e1a) (case . ap4e15) (or . ap4e11) (and . ap4e10) (if . ap4e0f) (let . ap4e0e) (letrec . ap4e0c) (lambda . ap4e09) (quote . ap4e06) (letrec-syntax . ap4e04) (let-syntax . ap4e03) (set! . ap4e02) (begin . ap4e00) (define-syntax . ap4dfe) (define . ap4dfd)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51a7 '(psyntax modules) '() '() '() '() '((module . ap4dff)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51a8 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51a9 '(rnrs) '(6) '() '() '() '((regexp? . ap5164) (string-upcase . ap50b9) (string-titlecase . ap50b8) (string-normalize-nfkd . ap50b7) (string-normalize-nfkc . ap50b6) (string-normalize-nfd . ap50b5) (string-normalize-nfc . ap50b4) (string-foldcase . ap50b3) (string-downcase . ap50b2) (string-ci>? . ap50b1) (string-ci>=? . ap50b0) (string-ci=? . ap50af) (string-ci<? . ap50ae) (string-ci<=? . ap50ad) (char-whitespace? . ap50ac) (char-upper-case? . ap50ab) (char-title-case? . ap50aa) (char-numeric? . ap50a9) (char-lower-case? . ap50a8) (char-general-category . ap50a7) (char-upcase . ap50a6) (char-titlecase . ap50a5) (char-foldcase . ap50a4) (char-downcase . ap50a3) (char-ci>? . ap50a2) (char-ci>=? . ap50a1) (char-ci=? . ap50a0) (char-ci<? . ap509f) (char-ci<=? . ap509e) (char-alphabetic? . ap509d) (make-variable-transformer . ap2f23) (identifier? . ap31da) (generate-temporaries . ap31c6) (free-identifier=? . ap31c8) (syntax->datum . ap31de) (datum->syntax . ap31dc) (bound-identifier=? . ap31ca) (record-type-descriptor? . ap509c) (record-predicate . ap509b) (record-mutator . ap509a) (record-constructor . ap5099) (record-accessor . ap5098) (make-record-type-descriptor . ap5097) (make-record-constructor-descriptor . ap5096) (record? . ap5095) (record-type-uid . ap5094) (record-type-sealed? . ap5093) (record-type-parent . ap5092) (record-type-opaque? . ap5091) (record-type-name . ap5090) (record-type-generative? . ap508f) (record-type-field-names . ap508e) (record-rtd . ap508d) (record-field-mutable? . ap508c) (delete-file . ap508b) (file-exists? . ap508a) (vector-sort! . ap5089) (vector-sort . ap5088) (list-sort . ap5087) (symbol-hash . ap5086) (string-ci-hash . ap5085) (string-hash . ap5084) (equal-hash . ap5083) (hashtable-equivalence-function . ap5082) (make-hashtable . ap5081) (hashtable-hash-function . ap5080) (make-eqv-hashtable . ap507f) (make-eq-hashtable . ap507e) (hashtable? . ap507d) (hashtable-update! . ap507c) (hashtable-size . ap507b) (hashtable-set! . ap507a) (hashtable-ref . ap5079) (hashtable-mutable? . ap5078) (hashtable-keys . ap5077) (hashtable-entries . ap5076) (hashtable-delete! . ap5075) (hashtable-copy . ap5074) (hashtable-contains? . ap5073) (hashtable-clear! . ap5072) (call-with-output-file . ap5071) (call-with-input-file . ap5070) (write-char . ap506f) (write . ap506e) (with-output-to-file . ap506d) (with-input-from-file . ap506c) (read-char . ap506b) (read . ap506a) (peek-char . ap5069) (open-output-file . ap5068) (open-input-file . ap5067) (newline . ap5066) (display . ap5065) (close-output-port . ap5064) (close-input-port . ap5063) (eof-object? . ap5062) (eof-object . ap5061) (current-error-port . ap5060) (current-output-port . ap505f) (current-input-port . ap505e) (output-port? . ap505d) (input-port? . ap505c) (utf-8-codec . ap505b) (utf-16-codec . ap505a) (transcoder-error-handling-mode . ap5059) (transcoder-eol-style . ap5058) (transcoder-codec . ap5057) (transcoded-port . ap5056) (textual-port? . ap5055) (string->bytevector . ap5054) (standard-output-port . ap5053) (standard-input-port . ap5052) (standard-error-port . ap5051) (set-port-position! . ap5050) (put-u8 . ap504f) (put-string . ap504e) (put-datum . ap504d) (put-char . ap504c) (put-bytevector . ap504b) (port? . ap504a) (port-transcoder . ap5049) (port-position . ap5048) (port-has-set-port-position!? . ap5047) (port-has-port-position? . ap5046) (port-eof? . ap5045) (output-port-buffer-mode . ap5044) (open-string-output-port . ap5043) (open-string-input-port . ap5042) (open-file-output-port . ap5041) (open-file-input/output-port . ap5040) (open-file-input-port . ap503f) (open-bytevector-output-port . ap503e) (open-bytevector-input-port . ap503d) (native-transcoder . ap503c) (native-eol-style . ap503b) (make-transcoder . ap503a) (latin-1-codec . ap5039) (make-i/o-write-error . ap5038) (make-i/o-read-error . ap5037) (make-i/o-port-error . ap5036) (make-i/o-invalid-position-error . ap5035) (make-i/o-filename-error . ap5034) (make-i/o-file-protection-error . ap5033) (make-i/o-file-is-read-only-error . ap5032) (make-i/o-file-does-not-exist-error . ap5031) (make-i/o-file-already-exists-error . ap5030) (make-i/o-error . ap502f) (make-i/o-encoding-error . ap502e) (make-i/o-decoding-error . ap502d) (make-custom-textual-output-port . ap502c) (make-custom-textual-input/output-port . ap502b) (make-custom-textual-input-port . ap502a) (make-custom-binary-output-port . ap5029) (make-custom-binary-input/output-port . ap5028) (make-custom-binary-input-port . ap5027) (make-bytevector . ap5026) (lookahead-u8 . ap5025) (lookahead-char . ap5024) (i/o-write-error? . ap5023) (i/o-read-error? . ap5022) (i/o-port-error? . ap5021) (i/o-invalid-position-error? . ap5020) (i/o-filename-error? . ap501f) (i/o-file-protection-error? . ap501e) (i/o-file-is-read-only-error? . ap501d) (i/o-file-does-not-exist-error? . ap501c) (i/o-file-already-exists-error? . ap501b) (i/o-error? . ap501a) (i/o-error-position . ap5019) (i/o-error-port . ap5018) (i/o-error-filename . ap5017) (i/o-encoding-error? . ap5016) (i/o-encoding-error-char . ap5015) (i/o-decoding-error? . ap5014) (get-u8 . ap5013) (get-string-n! . ap5012) (get-string-n . ap5011) (get-string-all . ap5010) (get-line . ap500f) (get-datum . ap500e) (get-char . ap500d) (get-bytevector-some . ap500c) (get-bytevector-n! . ap500b) (get-bytevector-n . ap500a) (get-bytevector-all . ap5009) (flush-output-port . ap5008) (close-port . ap5007) (exit . ap4fff) (command-line . ap4c91) (remove . ap4ffa) (remv . ap4ff9) (remp . ap4ff8) (remq . ap4ff7) (partition . ap4ff6) (memv . ap4ff5) (memq . ap4ff4) (memp . ap4ff3) (member . ap4ff2) (exists . ap4ff1) (for-all . ap4ff0) (fold-right . ap4fef) (fold-left . ap4fee) (find . ap4fed) (filter . ap4fec) (cons* . ap4feb) (assv . ap4fea) (assq . ap4fe9) (assp . ap4fe8) (assoc . ap4fe7) (call-with-string-output-port . ap4fe6) (call-with-port . ap4fe5) (call-with-bytevector-output-port . ap4fe4) (bytevector->string . ap4fe3) (buffer-mode? . ap4fe2) (binary-port? . ap4fe1) (with-exception-handler . ap4fe0) (raise-continuable . ap4fdf) (raise . ap4fde) (make-enumeration . ap4fdd) (enum-set=? . ap4fdc) (enum-set-universe . ap4fdb) (enum-set-union . ap4fda) (enum-set-subset? . ap4fd9) (enum-set-projection . ap4fd8) (enum-set-member? . ap4fd7) (enum-set-intersection . ap4fd6) (enum-set-indexer . ap4fd5) (enum-set-difference . ap4fd4) (enum-set-constructor . ap4fd3) (enum-set-complement . ap4fd2) (enum-set->list . ap4fd1) (who-condition? . ap4fd0) (warning? . ap4fcf) (violation? . ap4fce) (undefined-violation? . ap4fcd) (syntax-violation? . ap4fcc) (syntax-violation-subform . ap4fcb) (syntax-violation-form . ap4fca) (syntax-violation . ap31d8) (simple-conditions . ap4fc9) (serious-condition? . ap4fc8) (non-continuable-violation? . ap4fc7) (message-condition? . ap4fc6) (make-who-condition . ap4fc5) (make-warning . ap4fc4) (make-violation . ap4fc3) (make-undefined-violation . ap4fc2) (make-syntax-violation . ap4fc1) (make-serious-condition . ap4fc0) (make-non-continuable-violation . ap4fbf) (make-message-condition . ap4fbe) (make-lexical-violation . ap4fbd) (make-irritants-condition . ap4fbc) (make-implementation-restriction-violation . ap4fbb) (make-error . ap4fba) (make-assertion-violation . ap4fb9) (lexical-violation? . ap4fb8) (irritants-condition? . ap4fb7) (implementation-restriction-violation? . ap4fb6) (error? . ap4fb5) (condition-who . ap4fb4) (condition-predicate . ap4fb3) (condition-message . ap4fb2) (condition-irritants . ap4fb1) (condition-accessor . ap4fb0) (condition . ap4faf) (assertion-violation? . ap4fae) (condition? . ap4fad) (utf32->string . ap4fac) (utf16->string . ap4fab) (utf8->string . ap4faa) (uint-list->bytevector . ap4fa9) (u8-list->bytevector . ap4fa8) (string->utf8 . ap4fa7) (string->utf32 . ap4fa6) (string->utf16 . ap4fa5) (sint-list->bytevector . ap4fa4) (native-endianness . ap4fa3) (bytevector? . ap4fa2) (bytevector=? . ap4fa1) (bytevector-uint-set! . ap4fa0) (bytevector-uint-ref . ap4f9f) (bytevector-u8-set! . ap4f9e) (bytevector-u8-ref . ap4f9d) (bytevector-u64-set! . ap4f9c) (bytevector-u64-ref . ap4f9b) (bytevector-u64-native-set! . ap4f9a) (bytevector-u64-native-ref . ap4f99) (bytevector-u32-set! . ap4f98) (bytevector-u32-ref . ap4f97) (bytevector-u32-native-set! . ap4f96) (bytevector-u32-native-ref . ap4f95) (bytevector-u16-set! . ap4f94) (bytevector-u16-ref . ap4f93) (bytevector-u16-native-set! . ap4f92) (bytevector-u16-native-ref . ap4f91) (bytevector-sint-set! . ap4f90) (bytevector-sint-ref . ap4f8f) (bytevector-s8-set! . ap4f8e) (bytevector-s8-ref . ap4f8d) (bytevector-s64-set! . ap4f8c) (bytevector-s64-ref . ap4f8b) (bytevector-s64-native-set! . ap4f8a) (bytevector-s64-native-ref . ap4f89) (bytevector-s32-set! . ap4f88) (bytevector-s32-ref . ap4f87) (bytevector-s32-native-set! . ap4f86) (bytevector-s32-native-ref . ap4f85) (bytevector-s16-set! . ap4f84) (bytevector-s16-ref . ap4f83) (bytevector-s16-native-set! . ap4f82) (bytevector-s16-native-ref . ap4f81) (bytevector-length . ap4f80) (bytevector-ieee-single-ref . ap4f7f) (bytevector-ieee-single-set! . ap4f7e) (bytevector-ieee-single-native-set! . ap4f7d) (bytevector-ieee-single-native-ref . ap4f7c) (bytevector-ieee-double-set! . ap4f7b) (bytevector-ieee-double-ref . ap4f7a) (bytevector-ieee-double-native-set! . ap4f79) (bytevector-ieee-double-native-ref . ap4f78) (bytevector-fill! . ap4f77) (bytevector-copy! . ap4f76) (bytevector-copy . ap4f75) (bytevector->uint-list . ap4f74) (bytevector->u8-list . ap4f73) (bytevector->sint-list . ap4f72) (no-nans-violation? . ap4f71) (no-infinities-violation? . ap4f70) (make-no-nans-violation . ap4f6f) (make-no-infinities-violation . ap4f6e) (real->flonum . ap4f6d) (flzero? . ap4f6c) (fltruncate . ap4f6b) (fltan . ap4f6a) (flsqrt . ap4f69) (flsin . ap4f68) (flround . ap4f67) (flpositive? . ap4f66) (flonum? . ap4f65) (flodd? . ap4f64) (flnumerator . ap4f63) (flnegative? . ap4f62) (flnan? . ap4f61) (flmod0 . ap4f60) (flmod . ap4f5f) (flmin . ap4f5e) (flmax . ap4f5d) (fllog . ap4f5c) (flinteger? . ap4f5b) (flinfinite? . ap4f5a) (flfloor . ap4f59) (flfinite? . ap4f58) (flexpt . ap4f57) (flexp . ap4f56) (fleven? . ap4f55) (fldiv0-and-mod0 . ap4f54) (fldiv0 . ap4f53) (fldiv-and-mod . ap4f52) (fldiv . ap4f51) (fldenominator . ap4f50) (flcos . ap4f4f) (flceiling . ap4f4e) (flatan . ap4f4d) (flasin . ap4f4c) (flacos . ap4f4b) (flabs . ap4f4a) (fl>? . ap4f49) (fl>=? . ap4f48) (fl=? . ap4f47) (fl<? . ap4f46) (fl<=? . ap4f45) (fl/ . ap4f44) (fl- . ap4f43) (fl+ . ap4f42) (fl* . ap4f41) (fixnum->flonum . ap4f40) (fxzero? . ap4f3f) (fxxor . ap4f3e) (fxrotate-bit-field . ap4f3d) (fxreverse-bit-field . ap4f3c) (fxpositive? . ap4f3b) (fxodd? . ap4f3a) (fxnot . ap4f39) (fxnegative? . ap4f38) (fxmod0 . ap4f37) (fxmod . ap4f36) (fxmin . ap4f35) (fxmax . ap4f34) (fxlength . ap4f33) (fxior . ap4f32) (fxif . ap4f31) (fxfirst-bit-set . ap4f30) (fxeven? . ap4f2f) (fxdiv0-and-mod0 . ap4f2e) (fxdiv0 . ap4f2d) (fxdiv-and-mod . ap4f2c) (fxdiv . ap4f2b) (fxcopy-bit-field . ap4f2a) (fxcopy-bit . ap4f29) (fxbit-set? . ap4f28) (fxbit-field . ap4f27) (fxbit-count . ap4f26) (fxarithmetic-shift-right . ap4f25) (fxarithmetic-shift-left . ap4f24) (fxarithmetic-shift . ap4f23) (fxand . ap4f22) (fx>? . ap4f21) (fx>=? . ap4f20) (fx=? . ap4f1f) (fx<? . ap4f1e) (fx<=? . ap4f1d) (fx-/carry . ap4f1c) (fx- . ap4f1b) (fx+/carry . ap4f1a) (fx+ . ap4f19) (fx*/carry . ap4f18) (fx* . ap4f17) (greatest-fixnum . ap4f16) (least-fixnum . ap4f15) (fixnum-width . ap4f14) (fixnum? . ap4f13) (bitwise-rotate-bit-field . ap4f12) (bitwise-reverse-bit-field . ap4f11) (bitwise-length . ap4f10) (bitwise-if . ap4f0f) (bitwise-first-bit-set . ap4f0e) (bitwise-copy-bit-field . ap4f0d) (bitwise-copy-bit . ap4f0c) (bitwise-bit-set? . ap4f0b) (bitwise-bit-field . ap4f0a) (bitwise-bit-count . ap4f09) (bitwise-xor . ap4f08) (bitwise-ior . ap4f07) (bitwise-and . ap4f06) (bitwise-not . ap4f05) (bitwise-arithmetic-shift-right . ap4f04) (bitwise-arithmetic-shift-left . ap4f03) (bitwise-arithmetic-shift . ap4f02) (zero? . ap4f01) (vector? . ap4f00) (vector-set! . ap4eff) (vector-ref . ap4efe) (vector-map . ap4efd) (vector-length . ap4efc) (vector-for-each . ap4efb) (vector-fill! . ap4efa) (vector->list . ap4ef9) (vector . ap4ef8) (values . ap4ef7) (truncate . ap4ef6) (tan . ap4ef5) (symbol? . ap4ef4) (symbol=? . ap4ef3) (symbol->string . ap4ef2) (substring . ap4ef1) (string? . ap4ef0) (string>? . ap4eef) (string>=? . ap4eee) (string=? . ap4eed) (string<? . ap4eec) (string<=? . ap4eeb) (string-ref . ap4eea) (string-length . ap4ee9) (string-for-each . ap4ee8) (string-copy . ap4ee7) (string-append . ap4ee6) (string->symbol . ap4ee5) (string->number . ap4ee4) (string->list . ap4ee3) (string . ap4ee2) (sqrt . ap4ee1) (sin . ap4ee0) (round . ap4edf) (reverse . ap4ede) (real? . ap4edd) (real-valued? . ap4edc) (real-part . ap4edb) (rationalize . ap4eda) (rational? . ap4ed9) (rational-valued? . ap4ed8) (procedure? . ap4ed7) (positive? . ap4ed6) (pair? . ap4ed5) (odd? . ap4ed4) (numerator . ap4ed3) (number? . ap4ed2) (number->string . ap4ed1) (null? . ap4ed0) (not . ap4ecf) (negative? . ap4ece) (nan? . ap4ecd) (min . ap4ecc) (max . ap4ecb) (map . ap4eca) (make-vector . ap4ec9) (make-string . ap4ec8) (make-rectangular . ap4ec7) (make-polar . ap4ec6) (magnitude . ap4ec5) (log . ap4ec4) (list? . ap4ec3) (list-tail . ap4ec2) (list-ref . ap4ec1) (list->vector . ap4ec0) (list->string . ap4ebf) (list . ap4ebe) (length . ap4ebd) (lcm . ap4ebc) (integer? . ap4ebb) (integer-valued? . ap4eba) (integer->char . ap4eb9) (infinite? . ap4eb8) (inexact? . ap4eb7) (inexact . ap4eb6) (imag-part . ap4eb5) (gcd . ap4eb4) (for-each . ap4eb3) (floor . ap4eb2) (finite? . ap4eb1) (expt . ap4eb0) (exp . ap4eaf) (exact? . ap4eae) (exact-integer-sqrt . ap4ead) (exact . ap4eac) (even? . ap4eab) (error . ap4eaa) (eqv? . ap4ea9) (equal? . ap4ea8) (eq? . ap4ea7) (dynamic-wind . ap4ea6) (div0-and-mod0 . ap4ea5) (mod0 . ap4ea4) (div0 . ap4ea3) (div-and-mod . ap4ea2) (mod . ap4ea1) (div . ap4ea0) (denominator . ap4e9f) (cos . ap4e9e) (cons . ap4e9d) (complex? . ap4e9c) (char? . ap4e9b) (char>? . ap4e9a) (char>=? . ap4e99) (char=? . ap4e98) (char<? . ap4e97) (char<=? . ap4e96) (char->integer . ap4e95) (ceiling . ap4e94) (call-with-values . ap4e93) (call/cc . ap4e92) (call-with-current-continuation . ap4e91) (cddddr . ap4e90) (cdddar . ap4e8f) (cddadr . ap4e8e) (cddaar . ap4e8d) (cdaddr . ap4e8c) (cdadar . ap4e8b) (cdaadr . ap4e8a) (cdaaar . ap4e89) (cadddr . ap4e88) (caddar . ap4e87) (cadadr . ap4e86) (cadaar . ap4e85) (caaddr . ap4e84) (caadar . ap4e83) (caaadr . ap4e82) (caaaar . ap4e81) (cdddr . ap4e80) (cddar . ap4e7f) (cdadr . ap4e7e) (cdaar . ap4e7d) (caddr . ap4e7c) (cadar . ap4e7b) (caadr . ap4e7a) (caaar . ap4e79) (cddr . ap4e78) (cdar . ap4e77) (cadr . ap4e76) (caar . ap4e75) (cdr . ap4e74) (car . ap4e73) (boolean? . ap4e72) (boolean=? . ap4e71) (atan . ap4e70) (assertion-violation . ap4e6f) (asin . ap4e6e) (apply . ap4e6d) (append . ap4e6c) (angle . ap4e6b) (acos . ap4e6a) (abs . ap4e69) (/ . ap4e68) (* . ap4e67) (- . ap4e66) (+ . ap4e65) (>= . ap4e64) (> . ap4e63) (= . ap4e62) (<= . ap4e61) (< . ap4e60) (&no-nans . ap4e5e) (&no-infinities . ap4e5d) (&i/o-encoding . ap4e5c) (&i/o-decoding . ap4e5b) (&i/o-port . ap4e5a) (&i/o-file-does-not-exist . ap4e59) (&i/o-file-already-exists . ap4e58) (&i/o-file-is-read-only . ap4e57) (&i/o-file-protection . ap4e56) (&i/o-filename . ap4e55) (&i/o-invalid-position . ap4e54) (&i/o-write . ap4e53) (&i/o-read . ap4e52) (&i/o . ap4e51) (&undefined . ap4e50) (&syntax . ap4e4f) (&lexical . ap4e4e) (&implementation-restriction . ap4e4d) (&non-continuable . ap4e4c) (&who . ap4e4b) (&irritants . ap4e4a) (&assertion . ap4e49) (&violation . ap4e48) (&error . ap4e47) (&serious . ap4e46) (&warning . ap4e45) (&message . ap4e44) (&condition . ap4e43) (define-condition-type . ap4e42) (define-enumeration . ap4e41) (define-record-type . ap4e40) (parent-rtd . ap4e3f) (nongenerative . ap4e3e) (opaque . ap4e3d) (sealed . ap4e3c) (protocol . ap4e3b) (parent . ap4e3a) (immutable . ap4e39) (mutable . ap4e38) (fields . ap4e37) (error-handling-mode . ap4e36) (file-options . ap4e35) (buffer-mode . ap4e34) (eol-style . ap4e33) (guard . ap4e32) (unsyntax-splicing . ap4e2f) (unsyntax . ap4e2e) (unquote-splicing . ap4e2d) (unquote . ap4e2c) (_ . ap4e2b) (else . ap4e2a) (=> . ap4e29) (... . ap4e28) (assert . ap4e27) (endianness . ap4e26) (do . ap4e23) (cond . ap4e22) (let* . ap4e21) (let*-values . ap4e20) (let-values . ap4e1f) (identifier-syntax . ap4e1e) (with-syntax . ap4e1d) (quasisyntax . ap4e1c) (quasiquote . ap4e1b) (syntax-rules . ap4e1a) (record-constructor-descriptor . ap4e17) (record-type-descriptor . ap4e16) (case . ap4e15) (unless . ap4e13) (when . ap4e12) (or . ap4e11) (and . ap4e10) (if . ap4e0f) (let . ap4e0e) (letrec* . ap4e0d) (letrec . ap4e0c) (case-lambda . ap4e0a) (lambda . ap4e09) (syntax . ap4e08) (syntax-case . ap4e07) (quote . ap4e06) (letrec-syntax . ap4e04) (let-syntax . ap4e03) (set! . ap4e02) (begin . ap4e00) (define-syntax . ap4dfe) (define . ap4dfd)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51aa '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . ap31b4) (quotient . ap5006) (null-environment . ap31b2) (remainder . ap5005) (modulo . ap5004) (inexact->exact . ap5003) (force . ap5002) (exact->inexact . ap5001) (make-promise . ap5000) (delay . ap4e25)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51ab '(rnrs control) '(6) '() '() '() '((do . ap4e23) (unless . ap4e13) (when . ap4e12) (case-lambda . ap4e0a)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51ac '(rnrs eval) '(6) '() '() '() '((eval . ap31b8) (environment . ap31b0)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51ad '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . ap4ffc) (set-car! . ap4ffb)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51ae '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . ap4ffe) (string-set! . ap4ffd)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51af '(rnrs programs) '(6) '() '() '() '((exit . ap4fff) (command-line . ap4c91)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b0 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . ap2f23) (identifier? . ap31da) (generate-temporaries . ap31c6) (free-identifier=? . ap31c8) (syntax->datum . ap31de) (datum->syntax . ap31dc) (bound-identifier=? . ap31ca) (syntax-violation . ap31d8) (unsyntax-splicing . ap4e2f) (unsyntax . ap4e2e) (_ . ap4e2b) (... . ap4e28) (with-syntax . ap4e1d) (quasisyntax . ap4e1c) (syntax . ap4e08) (syntax-case . ap4e07)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b1 '(rnrs files) '(6) '() '() '() '((delete-file . ap508b) (file-exists? . ap508a) (make-i/o-write-error . ap5038) (make-i/o-read-error . ap5037) (make-i/o-port-error . ap5036) (make-i/o-invalid-position-error . ap5035) (make-i/o-filename-error . ap5034) (make-i/o-file-protection-error . ap5033) (make-i/o-file-is-read-only-error . ap5032) (make-i/o-file-does-not-exist-error . ap5031) (make-i/o-file-already-exists-error . ap5030) (make-i/o-error . ap502f) (i/o-write-error? . ap5023) (i/o-read-error? . ap5022) (i/o-port-error? . ap5021) (i/o-invalid-position-error? . ap5020) (i/o-filename-error? . ap501f) (i/o-file-protection-error? . ap501e) (i/o-file-is-read-only-error? . ap501d) (i/o-file-does-not-exist-error? . ap501c) (i/o-file-already-exists-error? . ap501b) (i/o-error? . ap501a) (i/o-error-position . ap5019) (i/o-error-port . ap5018) (i/o-error-filename . ap5017) (&i/o-port . ap4e5a) (&i/o-file-does-not-exist . ap4e59) (&i/o-file-already-exists . ap4e58) (&i/o-file-is-read-only . ap4e57) (&i/o-file-protection . ap4e56) (&i/o-filename . ap4e55) (&i/o-invalid-position . ap4e54) (&i/o-write . ap4e53) (&i/o-read . ap4e52) (&i/o . ap4e51)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b2 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . ap5089) (vector-sort . ap5088) (list-sort . ap5087)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b3 '(rnrs base) '(6) '() '() '() '((zero? . ap4f01) (vector? . ap4f00) (vector-set! . ap4eff) (vector-ref . ap4efe) (vector-map . ap4efd) (vector-length . ap4efc) (vector-for-each . ap4efb) (vector-fill! . ap4efa) (vector->list . ap4ef9) (vector . ap4ef8) (values . ap4ef7) (truncate . ap4ef6) (tan . ap4ef5) (symbol? . ap4ef4) (symbol=? . ap4ef3) (symbol->string . ap4ef2) (substring . ap4ef1) (string? . ap4ef0) (string>? . ap4eef) (string>=? . ap4eee) (string=? . ap4eed) (string<? . ap4eec) (string<=? . ap4eeb) (string-ref . ap4eea) (string-length . ap4ee9) (string-for-each . ap4ee8) (string-copy . ap4ee7) (string-append . ap4ee6) (string->symbol . ap4ee5) (string->number . ap4ee4) (string->list . ap4ee3) (string . ap4ee2) (sqrt . ap4ee1) (sin . ap4ee0) (round . ap4edf) (reverse . ap4ede) (real? . ap4edd) (real-valued? . ap4edc) (real-part . ap4edb) (rationalize . ap4eda) (rational? . ap4ed9) (rational-valued? . ap4ed8) (procedure? . ap4ed7) (positive? . ap4ed6) (pair? . ap4ed5) (odd? . ap4ed4) (numerator . ap4ed3) (number? . ap4ed2) (number->string . ap4ed1) (null? . ap4ed0) (not . ap4ecf) (negative? . ap4ece) (nan? . ap4ecd) (min . ap4ecc) (max . ap4ecb) (map . ap4eca) (make-vector . ap4ec9) (make-string . ap4ec8) (make-rectangular . ap4ec7) (make-polar . ap4ec6) (magnitude . ap4ec5) (log . ap4ec4) (list? . ap4ec3) (list-tail . ap4ec2) (list-ref . ap4ec1) (list->vector . ap4ec0) (list->string . ap4ebf) (list . ap4ebe) (length . ap4ebd) (lcm . ap4ebc) (integer? . ap4ebb) (integer-valued? . ap4eba) (integer->char . ap4eb9) (infinite? . ap4eb8) (inexact? . ap4eb7) (inexact . ap4eb6) (imag-part . ap4eb5) (gcd . ap4eb4) (for-each . ap4eb3) (floor . ap4eb2) (finite? . ap4eb1) (expt . ap4eb0) (exp . ap4eaf) (exact? . ap4eae) (exact-integer-sqrt . ap4ead) (exact . ap4eac) (even? . ap4eab) (error . ap4eaa) (eqv? . ap4ea9) (equal? . ap4ea8) (eq? . ap4ea7) (dynamic-wind . ap4ea6) (div0-and-mod0 . ap4ea5) (mod0 . ap4ea4) (div0 . ap4ea3) (div-and-mod . ap4ea2) (mod . ap4ea1) (div . ap4ea0) (denominator . ap4e9f) (cos . ap4e9e) (cons . ap4e9d) (complex? . ap4e9c) (char? . ap4e9b) (char>? . ap4e9a) (char>=? . ap4e99) (char=? . ap4e98) (char<? . ap4e97) (char<=? . ap4e96) (char->integer . ap4e95) (ceiling . ap4e94) (call-with-values . ap4e93) (call/cc . ap4e92) (call-with-current-continuation . ap4e91) (cddddr . ap4e90) (cdddar . ap4e8f) (cddadr . ap4e8e) (cddaar . ap4e8d) (cdaddr . ap4e8c) (cdadar . ap4e8b) (cdaadr . ap4e8a) (cdaaar . ap4e89) (cadddr . ap4e88) (caddar . ap4e87) (cadadr . ap4e86) (cadaar . ap4e85) (caaddr . ap4e84) (caadar . ap4e83) (caaadr . ap4e82) (caaaar . ap4e81) (cdddr . ap4e80) (cddar . ap4e7f) (cdadr . ap4e7e) (cdaar . ap4e7d) (caddr . ap4e7c) (cadar . ap4e7b) (caadr . ap4e7a) (caaar . ap4e79) (cddr . ap4e78) (cdar . ap4e77) (cadr . ap4e76) (caar . ap4e75) (cdr . ap4e74) (car . ap4e73) (boolean? . ap4e72) (boolean=? . ap4e71) (atan . ap4e70) (assertion-violation . ap4e6f) (asin . ap4e6e) (apply . ap4e6d) (append . ap4e6c) (angle . ap4e6b) (acos . ap4e6a) (abs . ap4e69) (/ . ap4e68) (* . ap4e67) (- . ap4e66) (+ . ap4e65) (>= . ap4e64) (> . ap4e63) (= . ap4e62) (<= . ap4e61) (< . ap4e60) (unquote-splicing . ap4e2d) (unquote . ap4e2c) (_ . ap4e2b) (else . ap4e2a) (=> . ap4e29) (... . ap4e28) (assert . ap4e27) (cond . ap4e22) (let* . ap4e21) (let*-values . ap4e20) (let-values . ap4e1f) (identifier-syntax . ap4e1e) (quasiquote . ap4e1b) (syntax-rules . ap4e1a) (case . ap4e15) (or . ap4e11) (and . ap4e10) (if . ap4e0f) (let . ap4e0e) (letrec* . ap4e0d) (letrec . ap4e0c) (lambda . ap4e09) (quote . ap4e06) (letrec-syntax . ap4e04) (let-syntax . ap4e03) (set! . ap4e02) (begin . ap4e00) (define-syntax . ap4dfe) (define . ap4dfd)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b4 '(rnrs lists) '(6) '() '() '() '((remove . ap4ffa) (remv . ap4ff9) (remp . ap4ff8) (remq . ap4ff7) (partition . ap4ff6) (memv . ap4ff5) (memq . ap4ff4) (memp . ap4ff3) (member . ap4ff2) (exists . ap4ff1) (for-all . ap4ff0) (fold-right . ap4fef) (fold-left . ap4fee) (find . ap4fed) (filter . ap4fec) (cons* . ap4feb) (assv . ap4fea) (assq . ap4fe9) (assp . ap4fe8) (assoc . ap4fe7)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b5 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . ap5071) (call-with-input-file . ap5070) (write-char . ap506f) (write . ap506e) (with-output-to-file . ap506d) (with-input-from-file . ap506c) (read-char . ap506b) (read . ap506a) (peek-char . ap5069) (open-output-file . ap5068) (open-input-file . ap5067) (newline . ap5066) (display . ap5065) (close-output-port . ap5064) (close-input-port . ap5063) (eof-object? . ap5062) (eof-object . ap5061) (current-error-port . ap5060) (current-output-port . ap505f) (current-input-port . ap505e) (output-port? . ap505d) (input-port? . ap505c) (make-i/o-write-error . ap5038) (make-i/o-read-error . ap5037) (make-i/o-port-error . ap5036) (make-i/o-invalid-position-error . ap5035) (make-i/o-filename-error . ap5034) (make-i/o-file-protection-error . ap5033) (make-i/o-file-is-read-only-error . ap5032) (make-i/o-file-does-not-exist-error . ap5031) (make-i/o-file-already-exists-error . ap5030) (make-i/o-error . ap502f) (i/o-write-error? . ap5023) (i/o-read-error? . ap5022) (i/o-port-error? . ap5021) (i/o-invalid-position-error? . ap5020) (i/o-filename-error? . ap501f) (i/o-file-protection-error? . ap501e) (i/o-file-is-read-only-error? . ap501d) (i/o-file-does-not-exist-error? . ap501c) (i/o-file-already-exists-error? . ap501b) (i/o-error? . ap501a) (i/o-error-position . ap5019) (i/o-error-port . ap5018) (i/o-error-filename . ap5017) (&i/o-port . ap4e5a) (&i/o-file-does-not-exist . ap4e59) (&i/o-file-already-exists . ap4e58) (&i/o-file-is-read-only . ap4e57) (&i/o-file-protection . ap4e56) (&i/o-filename . ap4e55) (&i/o-invalid-position . ap4e54) (&i/o-write . ap4e53) (&i/o-read . ap4e52) (&i/o . ap4e51)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b6 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . ap5026) (utf32->string . ap4fac) (utf16->string . ap4fab) (utf8->string . ap4faa) (uint-list->bytevector . ap4fa9) (u8-list->bytevector . ap4fa8) (string->utf8 . ap4fa7) (string->utf32 . ap4fa6) (string->utf16 . ap4fa5) (sint-list->bytevector . ap4fa4) (native-endianness . ap4fa3) (bytevector? . ap4fa2) (bytevector=? . ap4fa1) (bytevector-uint-set! . ap4fa0) (bytevector-uint-ref . ap4f9f) (bytevector-u8-set! . ap4f9e) (bytevector-u8-ref . ap4f9d) (bytevector-u64-set! . ap4f9c) (bytevector-u64-ref . ap4f9b) (bytevector-u64-native-set! . ap4f9a) (bytevector-u64-native-ref . ap4f99) (bytevector-u32-set! . ap4f98) (bytevector-u32-ref . ap4f97) (bytevector-u32-native-set! . ap4f96) (bytevector-u32-native-ref . ap4f95) (bytevector-u16-set! . ap4f94) (bytevector-u16-ref . ap4f93) (bytevector-u16-native-set! . ap4f92) (bytevector-u16-native-ref . ap4f91) (bytevector-sint-set! . ap4f90) (bytevector-sint-ref . ap4f8f) (bytevector-s8-set! . ap4f8e) (bytevector-s8-ref . ap4f8d) (bytevector-s64-set! . ap4f8c) (bytevector-s64-ref . ap4f8b) (bytevector-s64-native-set! . ap4f8a) (bytevector-s64-native-ref . ap4f89) (bytevector-s32-set! . ap4f88) (bytevector-s32-ref . ap4f87) (bytevector-s32-native-set! . ap4f86) (bytevector-s32-native-ref . ap4f85) (bytevector-s16-set! . ap4f84) (bytevector-s16-ref . ap4f83) (bytevector-s16-native-set! . ap4f82) (bytevector-s16-native-ref . ap4f81) (bytevector-length . ap4f80) (bytevector-ieee-single-ref . ap4f7f) (bytevector-ieee-single-set! . ap4f7e) (bytevector-ieee-single-native-set! . ap4f7d) (bytevector-ieee-single-native-ref . ap4f7c) (bytevector-ieee-double-set! . ap4f7b) (bytevector-ieee-double-ref . ap4f7a) (bytevector-ieee-double-native-set! . ap4f79) (bytevector-ieee-double-native-ref . ap4f78) (bytevector-fill! . ap4f77) (bytevector-copy! . ap4f76) (bytevector-copy . ap4f75) (bytevector->uint-list . ap4f74) (bytevector->u8-list . ap4f73) (bytevector->sint-list . ap4f72) (endianness . ap4e26)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b7 '(rnrs unicode) '(6) '() '() '() '((string-upcase . ap50b9) (string-titlecase . ap50b8) (string-normalize-nfkd . ap50b7) (string-normalize-nfkc . ap50b6) (string-normalize-nfd . ap50b5) (string-normalize-nfc . ap50b4) (string-foldcase . ap50b3) (string-downcase . ap50b2) (string-ci>? . ap50b1) (string-ci>=? . ap50b0) (string-ci=? . ap50af) (string-ci<? . ap50ae) (string-ci<=? . ap50ad) (char-whitespace? . ap50ac) (char-upper-case? . ap50ab) (char-title-case? . ap50aa) (char-numeric? . ap50a9) (char-lower-case? . ap50a8) (char-general-category . ap50a7) (char-upcase . ap50a6) (char-titlecase . ap50a5) (char-foldcase . ap50a4) (char-downcase . ap50a3) (char-ci>? . ap50a2) (char-ci>=? . ap50a1) (char-ci=? . ap50a0) (char-ci<? . ap509f) (char-ci<=? . ap509e) (char-alphabetic? . ap509d)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b8 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . ap4fe0) (raise-continuable . ap4fdf) (raise . ap4fde) (guard . ap4e32) (else . ap4e2a) (=> . ap4e29)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51b9 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . ap4f12) (bitwise-reverse-bit-field . ap4f11) (bitwise-length . ap4f10) (bitwise-if . ap4f0f) (bitwise-first-bit-set . ap4f0e) (bitwise-copy-bit-field . ap4f0d) (bitwise-copy-bit . ap4f0c) (bitwise-bit-set? . ap4f0b) (bitwise-bit-field . ap4f0a) (bitwise-bit-count . ap4f09) (bitwise-xor . ap4f08) (bitwise-ior . ap4f07) (bitwise-and . ap4f06) (bitwise-not . ap4f05) (bitwise-arithmetic-shift-right . ap4f04) (bitwise-arithmetic-shift-left . ap4f03) (bitwise-arithmetic-shift . ap4f02)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51ba '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . ap4f3f) (fxxor . ap4f3e) (fxrotate-bit-field . ap4f3d) (fxreverse-bit-field . ap4f3c) (fxpositive? . ap4f3b) (fxodd? . ap4f3a) (fxnot . ap4f39) (fxnegative? . ap4f38) (fxmod0 . ap4f37) (fxmod . ap4f36) (fxmin . ap4f35) (fxmax . ap4f34) (fxlength . ap4f33) (fxior . ap4f32) (fxif . ap4f31) (fxfirst-bit-set . ap4f30) (fxeven? . ap4f2f) (fxdiv0-and-mod0 . ap4f2e) (fxdiv0 . ap4f2d) (fxdiv-and-mod . ap4f2c) (fxdiv . ap4f2b) (fxcopy-bit-field . ap4f2a) (fxcopy-bit . ap4f29) (fxbit-set? . ap4f28) (fxbit-field . ap4f27) (fxbit-count . ap4f26) (fxarithmetic-shift-right . ap4f25) (fxarithmetic-shift-left . ap4f24) (fxarithmetic-shift . ap4f23) (fxand . ap4f22) (fx>? . ap4f21) (fx>=? . ap4f20) (fx=? . ap4f1f) (fx<? . ap4f1e) (fx<=? . ap4f1d) (fx-/carry . ap4f1c) (fx- . ap4f1b) (fx+/carry . ap4f1a) (fx+ . ap4f19) (fx*/carry . ap4f18) (fx* . ap4f17) (greatest-fixnum . ap4f16) (least-fixnum . ap4f15) (fixnum-width . ap4f14) (fixnum? . ap4f13)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51bb '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . ap4f71) (no-infinities-violation? . ap4f70) (make-no-nans-violation . ap4f6f) (make-no-infinities-violation . ap4f6e) (real->flonum . ap4f6d) (flzero? . ap4f6c) (fltruncate . ap4f6b) (fltan . ap4f6a) (flsqrt . ap4f69) (flsin . ap4f68) (flround . ap4f67) (flpositive? . ap4f66) (flonum? . ap4f65) (flodd? . ap4f64) (flnumerator . ap4f63) (flnegative? . ap4f62) (flnan? . ap4f61) (flmod0 . ap4f60) (flmod . ap4f5f) (flmin . ap4f5e) (flmax . ap4f5d) (fllog . ap4f5c) (flinteger? . ap4f5b) (flinfinite? . ap4f5a) (flfloor . ap4f59) (flfinite? . ap4f58) (flexpt . ap4f57) (flexp . ap4f56) (fleven? . ap4f55) (fldiv0-and-mod0 . ap4f54) (fldiv0 . ap4f53) (fldiv-and-mod . ap4f52) (fldiv . ap4f51) (fldenominator . ap4f50) (flcos . ap4f4f) (flceiling . ap4f4e) (flatan . ap4f4d) (flasin . ap4f4c) (flacos . ap4f4b) (flabs . ap4f4a) (fl>? . ap4f49) (fl>=? . ap4f48) (fl=? . ap4f47) (fl<? . ap4f46) (fl<=? . ap4f45) (fl/ . ap4f44) (fl- . ap4f43) (fl+ . ap4f42) (fl* . ap4f41) (fixnum->flonum . ap4f40) (&no-nans . ap4e5e) (&no-infinities . ap4e5d)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51bc '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . ap5086) (string-ci-hash . ap5085) (string-hash . ap5084) (equal-hash . ap5083) (hashtable-equivalence-function . ap5082) (make-hashtable . ap5081) (hashtable-hash-function . ap5080) (make-eqv-hashtable . ap507f) (make-eq-hashtable . ap507e) (hashtable? . ap507d) (hashtable-update! . ap507c) (hashtable-size . ap507b) (hashtable-set! . ap507a) (hashtable-ref . ap5079) (hashtable-mutable? . ap5078) (hashtable-keys . ap5077) (hashtable-entries . ap5076) (hashtable-delete! . ap5075) (hashtable-copy . ap5074) (hashtable-contains? . ap5073) (hashtable-clear! . ap5072)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51bd '(rnrs io ports) '(6) '() '() '() '((eof-object? . ap5062) (eof-object . ap5061) (current-error-port . ap5060) (current-output-port . ap505f) (current-input-port . ap505e) (output-port? . ap505d) (input-port? . ap505c) (utf-8-codec . ap505b) (utf-16-codec . ap505a) (transcoder-error-handling-mode . ap5059) (transcoder-eol-style . ap5058) (transcoder-codec . ap5057) (transcoded-port . ap5056) (textual-port? . ap5055) (string->bytevector . ap5054) (standard-output-port . ap5053) (standard-input-port . ap5052) (standard-error-port . ap5051) (set-port-position! . ap5050) (put-u8 . ap504f) (put-string . ap504e) (put-datum . ap504d) (put-char . ap504c) (put-bytevector . ap504b) (port? . ap504a) (port-transcoder . ap5049) (port-position . ap5048) (port-has-set-port-position!? . ap5047) (port-has-port-position? . ap5046) (port-eof? . ap5045) (output-port-buffer-mode . ap5044) (open-string-output-port . ap5043) (open-string-input-port . ap5042) (open-file-output-port . ap5041) (open-file-input/output-port . ap5040) (open-file-input-port . ap503f) (open-bytevector-output-port . ap503e) (open-bytevector-input-port . ap503d) (native-transcoder . ap503c) (native-eol-style . ap503b) (make-transcoder . ap503a) (latin-1-codec . ap5039) (make-i/o-write-error . ap5038) (make-i/o-read-error . ap5037) (make-i/o-port-error . ap5036) (make-i/o-invalid-position-error . ap5035) (make-i/o-filename-error . ap5034) (make-i/o-file-protection-error . ap5033) (make-i/o-file-is-read-only-error . ap5032) (make-i/o-file-does-not-exist-error . ap5031) (make-i/o-file-already-exists-error . ap5030) (make-i/o-error . ap502f) (make-i/o-encoding-error . ap502e) (make-i/o-decoding-error . ap502d) (make-custom-textual-output-port . ap502c) (make-custom-textual-input/output-port . ap502b) (make-custom-textual-input-port . ap502a) (make-custom-binary-output-port . ap5029) (make-custom-binary-input/output-port . ap5028) (make-custom-binary-input-port . ap5027) (lookahead-u8 . ap5025) (lookahead-char . ap5024) (i/o-write-error? . ap5023) (i/o-read-error? . ap5022) (i/o-port-error? . ap5021) (i/o-invalid-position-error? . ap5020) (i/o-filename-error? . ap501f) (i/o-file-protection-error? . ap501e) (i/o-file-is-read-only-error? . ap501d) (i/o-file-does-not-exist-error? . ap501c) (i/o-file-already-exists-error? . ap501b) (i/o-error? . ap501a) (i/o-error-position . ap5019) (i/o-error-port . ap5018) (i/o-error-filename . ap5017) (i/o-encoding-error? . ap5016) (i/o-encoding-error-char . ap5015) (i/o-decoding-error? . ap5014) (get-u8 . ap5013) (get-string-n! . ap5012) (get-string-n . ap5011) (get-string-all . ap5010) (get-line . ap500f) (get-datum . ap500e) (get-char . ap500d) (get-bytevector-some . ap500c) (get-bytevector-n! . ap500b) (get-bytevector-n . ap500a) (get-bytevector-all . ap5009) (flush-output-port . ap5008) (close-port . ap5007) (call-with-string-output-port . ap4fe6) (call-with-port . ap4fe5) (call-with-bytevector-output-port . ap4fe4) (bytevector->string . ap4fe3) (buffer-mode? . ap4fe2) (binary-port? . ap4fe1) (&i/o-encoding . ap4e5c) (&i/o-decoding . ap4e5b) (&i/o-port . ap4e5a) (&i/o-file-does-not-exist . ap4e59) (&i/o-file-already-exists . ap4e58) (&i/o-file-is-read-only . ap4e57) (&i/o-file-protection . ap4e56) (&i/o-filename . ap4e55) (&i/o-invalid-position . ap4e54) (&i/o-write . ap4e53) (&i/o-read . ap4e52) (&i/o . ap4e51) (error-handling-mode . ap4e36) (file-options . ap4e35) (buffer-mode . ap4e34) (eol-style . ap4e33)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51be '(rnrs enums) '(6) '() '() '() '((make-enumeration . ap4fdd) (enum-set=? . ap4fdc) (enum-set-universe . ap4fdb) (enum-set-union . ap4fda) (enum-set-subset? . ap4fd9) (enum-set-projection . ap4fd8) (enum-set-member? . ap4fd7) (enum-set-intersection . ap4fd6) (enum-set-indexer . ap4fd5) (enum-set-difference . ap4fd4) (enum-set-constructor . ap4fd3) (enum-set-complement . ap4fd2) (enum-set->list . ap4fd1) (define-enumeration . ap4e41)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51bf '(rnrs conditions) '(6) '() '() '() '((who-condition? . ap4fd0) (warning? . ap4fcf) (violation? . ap4fce) (undefined-violation? . ap4fcd) (syntax-violation? . ap4fcc) (syntax-violation-subform . ap4fcb) (syntax-violation-form . ap4fca) (syntax-violation . ap31d8) (simple-conditions . ap4fc9) (serious-condition? . ap4fc8) (non-continuable-violation? . ap4fc7) (message-condition? . ap4fc6) (make-who-condition . ap4fc5) (make-warning . ap4fc4) (make-violation . ap4fc3) (make-undefined-violation . ap4fc2) (make-syntax-violation . ap4fc1) (make-serious-condition . ap4fc0) (make-non-continuable-violation . ap4fbf) (make-message-condition . ap4fbe) (make-lexical-violation . ap4fbd) (make-irritants-condition . ap4fbc) (make-implementation-restriction-violation . ap4fbb) (make-error . ap4fba) (make-assertion-violation . ap4fb9) (lexical-violation? . ap4fb8) (irritants-condition? . ap4fb7) (implementation-restriction-violation? . ap4fb6) (error? . ap4fb5) (condition-who . ap4fb4) (condition-predicate . ap4fb3) (condition-message . ap4fb2) (condition-irritants . ap4fb1) (condition-accessor . ap4fb0) (condition . ap4faf) (assertion-violation? . ap4fae) (condition? . ap4fad) (&undefined . ap4e50) (&syntax . ap4e4f) (&lexical . ap4e4e) (&implementation-restriction . ap4e4d) (&non-continuable . ap4e4c) (&who . ap4e4b) (&irritants . ap4e4a) (&assertion . ap4e49) (&violation . ap4e48) (&error . ap4e47) (&serious . ap4e46) (&warning . ap4e45) (&message . ap4e44) (&condition . ap4e43) (define-condition-type . ap4e42)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51c0 '(rnrs records inspection) '(6) '() '() '() '((record? . ap5095) (record-type-uid . ap5094) (record-type-sealed? . ap5093) (record-type-parent . ap5092) (record-type-opaque? . ap5091) (record-type-name . ap5090) (record-type-generative? . ap508f) (record-type-field-names . ap508e) (record-rtd . ap508d) (record-field-mutable? . ap508c)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51c1 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . ap509c) (record-predicate . ap509b) (record-mutator . ap509a) (record-constructor . ap5099) (record-accessor . ap5098) (make-record-type-descriptor . ap5097) (make-record-constructor-descriptor . ap5096)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51c2 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . ap4e40) (parent-rtd . ap4e3f) (nongenerative . ap4e3e) (opaque . ap4e3d) (sealed . ap4e3c) (protocol . ap4e3b) (parent . ap4e3a) (immutable . ap4e39) (mutable . ap4e38) (fields . ap4e37) (record-constructor-descriptor . ap4e17) (record-type-descriptor . ap4e16)) '() values values '#f '#f '#t '#f) (ap2d0c@ap2b58@install-library 'ap51c3 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . ap51a3) (&no-nans-rtd . ap51a2) (&no-infinities-rcd . ap51a1) (&no-infinities-rtd . ap51a0) (&i/o-encoding-rcd . ap519f) (&i/o-encoding-rtd . ap519e) (&i/o-decoding-rcd . ap519d) (&i/o-decoding-rtd . ap519c) (&i/o-port-rcd . ap519b) (&i/o-port-rtd . ap519a) (&i/o-file-does-not-exist-rcd . ap5199) (&i/o-file-does-not-exist-rtd . ap5198) (&i/o-file-already-exists-rcd . ap5197) (&i/o-file-already-exists-rtd . ap5196) (&i/o-file-is-read-only-rcd . ap5195) (&i/o-file-is-read-only-rtd . ap5194) (&i/o-file-protection-rcd . ap5193) (&i/o-file-protection-rtd . ap5192) (&i/o-filename-rcd . ap5191) (&i/o-filename-rtd . ap5190) (&i/o-invalid-position-rcd . ap518f) (&i/o-invalid-position-rtd . ap518e) (&i/o-write-rcd . ap518d) (&i/o-write-rtd . ap518c) (&i/o-read-rcd . ap518b) (&i/o-read-rtd . ap518a) (&i/o-rcd . ap5189) (&i/o-rtd . ap5188) (&undefined-rcd . ap5187) (&undefined-rtd . ap5186) (&syntax-rcd . ap5185) (&syntax-rtd . ap5184) (&lexical-rcd . ap5183) (&lexical-rtd . ap5182) (&implementation-restriction-rcd . ap5181) (&implementation-restriction-rtd . ap5180) (&non-continuable-rcd . ap517f) (&non-continuable-rtd . ap517e) (&who-rcd . ap517d) (&who-rtd . ap517c) (&irritants-rcd . ap517b) (&irritants-rtd . ap517a) (&assertion-rcd . ap5179) (&assertion-rtd . ap5178) (&violation-rcd . ap5177) (&violation-rtd . ap5176) (&error-rcd . ap5175) (&error-rtd . ap5174) (&serious-rcd . ap5173) (&serious-rtd . ap5172) (&warning-rcd . ap5171) (&warning-rtd . ap5170) (&message-rcd . ap516f) (&message-rtd . ap516e) (&condition-rcd . ap516d) (&condition-rtd . ap516c) (syntax-error . ap31d4) (syntax-dispatch . ap30f8) (pretty-print . ap516b) (eval-core . ap516a) (set-symbol-value! . ap5169) (symbol-value . ap5168) (gensym . ap5167) (void . ap5166) (load . ap4c97) (interaction-environment . ap31e6) (char-ready? . ap5165) (regexp? . ap5164) (read-line . ap5163) (gensym-prefix-set! . ap5162) (ungensym . ap5161) (alist->eq-hash-table . ap5160) (assoc-ref . ap515f) (print . ap515e) (format . ap515d) (host-os . ap515c) (library-path . ap2b37) (standard-library-path . ap515b) (ssl-supported? . ap515a) (ssl-socket? . ap5159) (socket-sslize! . ap5158) (%monapi-name-whereis . ap5157) (%monapi-message-send . ap5156) (file-newer? . ap5155) (stat-mtime . ap5154) (write-to-file . ap5153) (file->list . ap5152) (file->string . ap5151) (digit->integer . ap5150) (call-with-string-input-port . ap514f) (call-with-string-io . ap514e) (string-split . ap514d) (bytevector-for-each . ap514c) (string->regexp . ap514b) (rxmatch . ap514a) (regexp-replace-all . ap5149) (hashtable-fold-left . ap5148) (hashtable-for-each . ap5147) (mosh-cache-dir . ap2921) (call-process . ap5146) (local-tz-offset . ap5145) (microseconds . ap5144) (directory-list . ap5143) (set-current-directory! . ap5142) (expand-path . ap5141) (current-directory . ap5140) (%spawn . ap513f) (%waitpid . ap513e) (simple-struct-name . ap513d) (simple-struct-set! . ap513c) (simple-struct-ref . ap513b) (make-simple-struct . ap513a) (simple-struct? . ap5139) (pointer-ref-c-int64 . ap5138) (pointer-ref-c-int32 . ap5137) (pointer-ref-c-int16 . ap5136) (pointer-ref-c-int8 . ap5135) (pointer-ref-c-uint64 . ap5134) (pointer-ref-c-uint32 . ap5133) (pointer-ref-c-uint16 . ap5132) (pointer-ref-c-uint8 . ap5131) (pointer-set-c-uint64! . ap5130) (pointer-set-c-uint32! . ap512f) (pointer-set-c-uint16! . ap512e) (pointer-set-c-uint8! . ap512d) (pointer-set-c-int64! . ap512c) (pointer-set-c-int32! . ap512b) (pointer-set-c-int16! . ap512a) (pointer-set-c-int8! . ap5129) (pointer-set-c-pointer! . ap5128) (pointer-set-c-double! . ap5127) (pointer-set-c-float! . ap5126) (pointer-set-c-long-long! . ap5125) (pointer-set-c-long! . ap5124) (pointer-set-c-int! . ap5123) (pointer-set-c-short! . ap5122) (pointer-set-c-char! . ap5121) (pointer-ref-c-pointer . ap5120) (pointer-ref-c-double . ap511f) (pointer-ref-c-float . ap511e) (pointer-ref-c-unsigned-long-long . ap511d) (pointer-ref-c-signed-long-long . ap511c) (pointer-ref-c-unsigned-long . ap511b) (pointer-ref-c-signed-long . ap511a) (pointer-ref-c-unsigned-int . ap5119) (pointer-ref-c-signed-int . ap5118) (pointer-ref-c-unsigned-short . ap5117) (pointer-ref-c-signed-short . ap5116) (pointer-ref-c-unsigned-char . ap5115) (pointer-ref-c-signed-char . ap5114) (pointer->integer . ap5113) (integer->pointer . ap5112) (pointer? . ap5111) (shared-errno . ap5110) (%ffi-free-c-callback-trampoline . ap510f) (%ffi-make-c-callback-trampoline . ap510e) (%ffi-free . ap510d) (%ffi-malloc . ap510c) (%ffi-supported? . ap510b) (%ffi-pointer->string . ap510a) (%ffi-call . ap5109) (%ffi-lookup . ap5108) (%ffi-open . ap5107) (null-terminated-utf8->string . ap5106) (null-terminated-bytevector->string . ap5105) (%exec . ap5104) (%fork . ap5103) (%pipe . ap5102) (p . ap5101) (open-output-string . ap5100) (get-output-string . ap50ff) (file-stat-ctime . ap50fe) (file-stat-atime . ap50fd) (file-stat-mtime . ap50fc) (file-size-in-bytes . ap50fb) (file-writable? . ap50fa) (file-executable? . ap50f9) (file-readable? . ap50f8) (file-regular? . ap50f7) (file-symbolic-link? . ap50f6) (file-directory? . ap50f5) (create-symbolic-link . ap50f4) (rename-file . ap50f3) (delete-directory . ap50f2) (create-directory . ap50f1) (create-mosh-cache-dir . ap50f0) (get-environment-variables . ap50ef) (current-exception-handler . ap50ee) (get-environment-variable . ap50ed) (join-wraps . ap50ec) (id->real-label . ap50eb) (same-marks? . ap50ea) (same-marks*? . ap50e9) (get-timeofday . ap50e8) (get-command-line . ap50e7) (sys-display . ap50e6) (whereis . ap50e5) (register . ap50e4) (vm-join! . ap50e3) (vm-set-value! . ap50e2) (vm? . ap50e1) (main-vm? . ap50e0) (vm-eval . ap50df) (vm-self . ap50de) (vm-start! . ap50dd) (make-vm . ap50dc) (mutex-try-lock! . ap50db) (mutex-unlock! . ap50da) (mutex-lock! . ap50d9) (mutex? . ap50d8) (make-mutex . ap50d7) (condition-variable-notify-all! . ap50d6) (condition-variable-notify! . ap50d5) (condition-variable-wait! . ap50d4) (make-condition-variable . ap50d3) (write/ss . ap50d2) (mosh-executable-path . ap50d1) (make-file-options . ap50d0) (source-info . ap50cf) (make-compiler-instruction . ap50ce) (make-instruction . ap50cd) (set-source-info! . ap50cc) (bignum? . ap50cb) (fast-equal? . ap50ca) (fasl-read . ap50c9) (fasl-write . ap50c8) (time-usage . ap50c7) (os-constant . ap50c6) (condition-printer . ap50c5) (disasm . ap50c4) (make-parameter . ap291f) (socket-port . ap50c3) (socket-shutdown . ap50c2) (socket-close . ap50c1) (socket-send . ap50c0) (socket-recv! . ap50bf) (socket-recv . ap50be) (make-server-socket . ap50bd) (make-client-socket . ap50bc) (socket-accept . ap50bb) (socket? . ap50ba) (string-upcase . ap50b9) (string-titlecase . ap50b8) (string-normalize-nfkd . ap50b7) (string-normalize-nfkc . ap50b6) (string-normalize-nfd . ap50b5) (string-normalize-nfc . ap50b4) (string-foldcase . ap50b3) (string-downcase . ap50b2) (string-ci>? . ap50b1) (string-ci>=? . ap50b0) (string-ci=? . ap50af) (string-ci<? . ap50ae) (string-ci<=? . ap50ad) (char-whitespace? . ap50ac) (char-upper-case? . ap50ab) (char-title-case? . ap50aa) (char-numeric? . ap50a9) (char-lower-case? . ap50a8) (char-general-category . ap50a7) (char-upcase . ap50a6) (char-titlecase . ap50a5) (char-foldcase . ap50a4) (char-downcase . ap50a3) (char-ci>? . ap50a2) (char-ci>=? . ap50a1) (char-ci=? . ap50a0) (char-ci<? . ap509f) (char-ci<=? . ap509e) (char-alphabetic? . ap509d) (make-variable-transformer . ap2f23) (identifier? . ap31da) (generate-temporaries . ap31c6) (free-identifier=? . ap31c8) (syntax->datum . ap31de) (datum->syntax . ap31dc) (bound-identifier=? . ap31ca) (record-type-descriptor? . ap509c) (record-predicate . ap509b) (record-mutator . ap509a) (record-constructor . ap5099) (record-accessor . ap5098) (make-record-type-descriptor . ap5097) (make-record-constructor-descriptor . ap5096) (record? . ap5095) (record-type-uid . ap5094) (record-type-sealed? . ap5093) (record-type-parent . ap5092) (record-type-opaque? . ap5091) (record-type-name . ap5090) (record-type-generative? . ap508f) (record-type-field-names . ap508e) (record-rtd . ap508d) (record-field-mutable? . ap508c) (delete-file . ap508b) (file-exists? . ap508a) (vector-sort! . ap5089) (vector-sort . ap5088) (list-sort . ap5087) (symbol-hash . ap5086) (string-ci-hash . ap5085) (string-hash . ap5084) (equal-hash . ap5083) (hashtable-equivalence-function . ap5082) (make-hashtable . ap5081) (hashtable-hash-function . ap5080) (make-eqv-hashtable . ap507f) (make-eq-hashtable . ap507e) (hashtable? . ap507d) (hashtable-update! . ap507c) (hashtable-size . ap507b) (hashtable-set! . ap507a) (hashtable-ref . ap5079) (hashtable-mutable? . ap5078) (hashtable-keys . ap5077) (hashtable-entries . ap5076) (hashtable-delete! . ap5075) (hashtable-copy . ap5074) (hashtable-contains? . ap5073) (hashtable-clear! . ap5072) (call-with-output-file . ap5071) (call-with-input-file . ap5070) (write-char . ap506f) (write . ap506e) (with-output-to-file . ap506d) (with-input-from-file . ap506c) (read-char . ap506b) (read . ap506a) (peek-char . ap5069) (open-output-file . ap5068) (open-input-file . ap5067) (newline . ap5066) (display . ap5065) (close-output-port . ap5064) (close-input-port . ap5063) (eof-object? . ap5062) (eof-object . ap5061) (current-error-port . ap5060) (current-output-port . ap505f) (current-input-port . ap505e) (output-port? . ap505d) (input-port? . ap505c) (utf-8-codec . ap505b) (utf-16-codec . ap505a) (transcoder-error-handling-mode . ap5059) (transcoder-eol-style . ap5058) (transcoder-codec . ap5057) (transcoded-port . ap5056) (textual-port? . ap5055) (string->bytevector . ap5054) (standard-output-port . ap5053) (standard-input-port . ap5052) (standard-error-port . ap5051) (set-port-position! . ap5050) (put-u8 . ap504f) (put-string . ap504e) (put-datum . ap504d) (put-char . ap504c) (put-bytevector . ap504b) (port? . ap504a) (port-transcoder . ap5049) (port-position . ap5048) (port-has-set-port-position!? . ap5047) (port-has-port-position? . ap5046) (port-eof? . ap5045) (output-port-buffer-mode . ap5044) (open-string-output-port . ap5043) (open-string-input-port . ap5042) (open-file-output-port . ap5041) (open-file-input/output-port . ap5040) (open-file-input-port . ap503f) (open-bytevector-output-port . ap503e) (open-bytevector-input-port . ap503d) (native-transcoder . ap503c) (native-eol-style . ap503b) (make-transcoder . ap503a) (latin-1-codec . ap5039) (make-i/o-write-error . ap5038) (make-i/o-read-error . ap5037) (make-i/o-port-error . ap5036) (make-i/o-invalid-position-error . ap5035) (make-i/o-filename-error . ap5034) (make-i/o-file-protection-error . ap5033) (make-i/o-file-is-read-only-error . ap5032) (make-i/o-file-does-not-exist-error . ap5031) (make-i/o-file-already-exists-error . ap5030) (make-i/o-error . ap502f) (make-i/o-encoding-error . ap502e) (make-i/o-decoding-error . ap502d) (make-custom-textual-output-port . ap502c) (make-custom-textual-input/output-port . ap502b) (make-custom-textual-input-port . ap502a) (make-custom-binary-output-port . ap5029) (make-custom-binary-input/output-port . ap5028) (make-custom-binary-input-port . ap5027) (make-bytevector . ap5026) (lookahead-u8 . ap5025) (lookahead-char . ap5024) (i/o-write-error? . ap5023) (i/o-read-error? . ap5022) (i/o-port-error? . ap5021) (i/o-invalid-position-error? . ap5020) (i/o-filename-error? . ap501f) (i/o-file-protection-error? . ap501e) (i/o-file-is-read-only-error? . ap501d) (i/o-file-does-not-exist-error? . ap501c) (i/o-file-already-exists-error? . ap501b) (i/o-error? . ap501a) (i/o-error-position . ap5019) (i/o-error-port . ap5018) (i/o-error-filename . ap5017) (i/o-encoding-error? . ap5016) (i/o-encoding-error-char . ap5015) (i/o-decoding-error? . ap5014) (get-u8 . ap5013) (get-string-n! . ap5012) (get-string-n . ap5011) (get-string-all . ap5010) (get-line . ap500f) (get-datum . ap500e) (get-char . ap500d) (get-bytevector-some . ap500c) (get-bytevector-n! . ap500b) (get-bytevector-n . ap500a) (get-bytevector-all . ap5009) (flush-output-port . ap5008) (close-port . ap5007) (scheme-report-environment . ap31b4) (quotient . ap5006) (null-environment . ap31b2) (remainder . ap5005) (modulo . ap5004) (inexact->exact . ap5003) (force . ap5002) (exact->inexact . ap5001) (make-promise . ap5000) (exit . ap4fff) (command-line . ap4c91) (string-fill! . ap4ffe) (string-set! . ap4ffd) (set-cdr! . ap4ffc) (set-car! . ap4ffb) (remove . ap4ffa) (remv . ap4ff9) (remp . ap4ff8) (remq . ap4ff7) (partition . ap4ff6) (memv . ap4ff5) (memq . ap4ff4) (memp . ap4ff3) (member . ap4ff2) (exists . ap4ff1) (for-all . ap4ff0) (fold-right . ap4fef) (fold-left . ap4fee) (find . ap4fed) (filter . ap4fec) (cons* . ap4feb) (assv . ap4fea) (assq . ap4fe9) (assp . ap4fe8) (assoc . ap4fe7) (call-with-string-output-port . ap4fe6) (call-with-port . ap4fe5) (call-with-bytevector-output-port . ap4fe4) (bytevector->string . ap4fe3) (buffer-mode? . ap4fe2) (binary-port? . ap4fe1) (with-exception-handler . ap4fe0) (raise-continuable . ap4fdf) (raise . ap4fde) (eval . ap31b8) (environment . ap31b0) (make-enumeration . ap4fdd) (enum-set=? . ap4fdc) (enum-set-universe . ap4fdb) (enum-set-union . ap4fda) (enum-set-subset? . ap4fd9) (enum-set-projection . ap4fd8) (enum-set-member? . ap4fd7) (enum-set-intersection . ap4fd6) (enum-set-indexer . ap4fd5) (enum-set-difference . ap4fd4) (enum-set-constructor . ap4fd3) (enum-set-complement . ap4fd2) (enum-set->list . ap4fd1) (who-condition? . ap4fd0) (warning? . ap4fcf) (violation? . ap4fce) (undefined-violation? . ap4fcd) (syntax-violation? . ap4fcc) (syntax-violation-subform . ap4fcb) (syntax-violation-form . ap4fca) (syntax-violation . ap31d8) (simple-conditions . ap4fc9) (serious-condition? . ap4fc8) (non-continuable-violation? . ap4fc7) (message-condition? . ap4fc6) (make-who-condition . ap4fc5) (make-warning . ap4fc4) (make-violation . ap4fc3) (make-undefined-violation . ap4fc2) (make-syntax-violation . ap4fc1) (make-serious-condition . ap4fc0) (make-non-continuable-violation . ap4fbf) (make-message-condition . ap4fbe) (make-lexical-violation . ap4fbd) (make-irritants-condition . ap4fbc) (make-implementation-restriction-violation . ap4fbb) (make-error . ap4fba) (make-assertion-violation . ap4fb9) (lexical-violation? . ap4fb8) (irritants-condition? . ap4fb7) (implementation-restriction-violation? . ap4fb6) (error? . ap4fb5) (condition-who . ap4fb4) (condition-predicate . ap4fb3) (condition-message . ap4fb2) (condition-irritants . ap4fb1) (condition-accessor . ap4fb0) (condition . ap4faf) (assertion-violation? . ap4fae) (condition? . ap4fad) (utf32->string . ap4fac) (utf16->string . ap4fab) (utf8->string . ap4faa) (uint-list->bytevector . ap4fa9) (u8-list->bytevector . ap4fa8) (string->utf8 . ap4fa7) (string->utf32 . ap4fa6) (string->utf16 . ap4fa5) (sint-list->bytevector . ap4fa4) (native-endianness . ap4fa3) (bytevector? . ap4fa2) (bytevector=? . ap4fa1) (bytevector-uint-set! . ap4fa0) (bytevector-uint-ref . ap4f9f) (bytevector-u8-set! . ap4f9e) (bytevector-u8-ref . ap4f9d) (bytevector-u64-set! . ap4f9c) (bytevector-u64-ref . ap4f9b) (bytevector-u64-native-set! . ap4f9a) (bytevector-u64-native-ref . ap4f99) (bytevector-u32-set! . ap4f98) (bytevector-u32-ref . ap4f97) (bytevector-u32-native-set! . ap4f96) (bytevector-u32-native-ref . ap4f95) (bytevector-u16-set! . ap4f94) (bytevector-u16-ref . ap4f93) (bytevector-u16-native-set! . ap4f92) (bytevector-u16-native-ref . ap4f91) (bytevector-sint-set! . ap4f90) (bytevector-sint-ref . ap4f8f) (bytevector-s8-set! . ap4f8e) (bytevector-s8-ref . ap4f8d) (bytevector-s64-set! . ap4f8c) (bytevector-s64-ref . ap4f8b) (bytevector-s64-native-set! . ap4f8a) (bytevector-s64-native-ref . ap4f89) (bytevector-s32-set! . ap4f88) (bytevector-s32-ref . ap4f87) (bytevector-s32-native-set! . ap4f86) (bytevector-s32-native-ref . ap4f85) (bytevector-s16-set! . ap4f84) (bytevector-s16-ref . ap4f83) (bytevector-s16-native-set! . ap4f82) (bytevector-s16-native-ref . ap4f81) (bytevector-length . ap4f80) (bytevector-ieee-single-ref . ap4f7f) (bytevector-ieee-single-set! . ap4f7e) (bytevector-ieee-single-native-set! . ap4f7d) (bytevector-ieee-single-native-ref . ap4f7c) (bytevector-ieee-double-set! . ap4f7b) (bytevector-ieee-double-ref . ap4f7a) (bytevector-ieee-double-native-set! . ap4f79) (bytevector-ieee-double-native-ref . ap4f78) (bytevector-fill! . ap4f77) (bytevector-copy! . ap4f76) (bytevector-copy . ap4f75) (bytevector->uint-list . ap4f74) (bytevector->u8-list . ap4f73) (bytevector->sint-list . ap4f72) (no-nans-violation? . ap4f71) (no-infinities-violation? . ap4f70) (make-no-nans-violation . ap4f6f) (make-no-infinities-violation . ap4f6e) (real->flonum . ap4f6d) (flzero? . ap4f6c) (fltruncate . ap4f6b) (fltan . ap4f6a) (flsqrt . ap4f69) (flsin . ap4f68) (flround . ap4f67) (flpositive? . ap4f66) (flonum? . ap4f65) (flodd? . ap4f64) (flnumerator . ap4f63) (flnegative? . ap4f62) (flnan? . ap4f61) (flmod0 . ap4f60) (flmod . ap4f5f) (flmin . ap4f5e) (flmax . ap4f5d) (fllog . ap4f5c) (flinteger? . ap4f5b) (flinfinite? . ap4f5a) (flfloor . ap4f59) (flfinite? . ap4f58) (flexpt . ap4f57) (flexp . ap4f56) (fleven? . ap4f55) (fldiv0-and-mod0 . ap4f54) (fldiv0 . ap4f53) (fldiv-and-mod . ap4f52) (fldiv . ap4f51) (fldenominator . ap4f50) (flcos . ap4f4f) (flceiling . ap4f4e) (flatan . ap4f4d) (flasin . ap4f4c) (flacos . ap4f4b) (flabs . ap4f4a) (fl>? . ap4f49) (fl>=? . ap4f48) (fl=? . ap4f47) (fl<? . ap4f46) (fl<=? . ap4f45) (fl/ . ap4f44) (fl- . ap4f43) (fl+ . ap4f42) (fl* . ap4f41) (fixnum->flonum . ap4f40) (fxzero? . ap4f3f) (fxxor . ap4f3e) (fxrotate-bit-field . ap4f3d) (fxreverse-bit-field . ap4f3c) (fxpositive? . ap4f3b) (fxodd? . ap4f3a) (fxnot . ap4f39) (fxnegative? . ap4f38) (fxmod0 . ap4f37) (fxmod . ap4f36) (fxmin . ap4f35) (fxmax . ap4f34) (fxlength . ap4f33) (fxior . ap4f32) (fxif . ap4f31) (fxfirst-bit-set . ap4f30) (fxeven? . ap4f2f) (fxdiv0-and-mod0 . ap4f2e) (fxdiv0 . ap4f2d) (fxdiv-and-mod . ap4f2c) (fxdiv . ap4f2b) (fxcopy-bit-field . ap4f2a) (fxcopy-bit . ap4f29) (fxbit-set? . ap4f28) (fxbit-field . ap4f27) (fxbit-count . ap4f26) (fxarithmetic-shift-right . ap4f25) (fxarithmetic-shift-left . ap4f24) (fxarithmetic-shift . ap4f23) (fxand . ap4f22) (fx>? . ap4f21) (fx>=? . ap4f20) (fx=? . ap4f1f) (fx<? . ap4f1e) (fx<=? . ap4f1d) (fx-/carry . ap4f1c) (fx- . ap4f1b) (fx+/carry . ap4f1a) (fx+ . ap4f19) (fx*/carry . ap4f18) (fx* . ap4f17) (greatest-fixnum . ap4f16) (least-fixnum . ap4f15) (fixnum-width . ap4f14) (fixnum? . ap4f13) (bitwise-rotate-bit-field . ap4f12) (bitwise-reverse-bit-field . ap4f11) (bitwise-length . ap4f10) (bitwise-if . ap4f0f) (bitwise-first-bit-set . ap4f0e) (bitwise-copy-bit-field . ap4f0d) (bitwise-copy-bit . ap4f0c) (bitwise-bit-set? . ap4f0b) (bitwise-bit-field . ap4f0a) (bitwise-bit-count . ap4f09) (bitwise-xor . ap4f08) (bitwise-ior . ap4f07) (bitwise-and . ap4f06) (bitwise-not . ap4f05) (bitwise-arithmetic-shift-right . ap4f04) (bitwise-arithmetic-shift-left . ap4f03) (bitwise-arithmetic-shift . ap4f02) (zero? . ap4f01) (vector? . ap4f00) (vector-set! . ap4eff) (vector-ref . ap4efe) (vector-map . ap4efd) (vector-length . ap4efc) (vector-for-each . ap4efb) (vector-fill! . ap4efa) (vector->list . ap4ef9) (vector . ap4ef8) (values . ap4ef7) (truncate . ap4ef6) (tan . ap4ef5) (symbol? . ap4ef4) (symbol=? . ap4ef3) (symbol->string . ap4ef2) (substring . ap4ef1) (string? . ap4ef0) (string>? . ap4eef) (string>=? . ap4eee) (string=? . ap4eed) (string<? . ap4eec) (string<=? . ap4eeb) (string-ref . ap4eea) (string-length . ap4ee9) (string-for-each . ap4ee8) (string-copy . ap4ee7) (string-append . ap4ee6) (string->symbol . ap4ee5) (string->number . ap4ee4) (string->list . ap4ee3) (string . ap4ee2) (sqrt . ap4ee1) (sin . ap4ee0) (round . ap4edf) (reverse . ap4ede) (real? . ap4edd) (real-valued? . ap4edc) (real-part . ap4edb) (rationalize . ap4eda) (rational? . ap4ed9) (rational-valued? . ap4ed8) (procedure? . ap4ed7) (positive? . ap4ed6) (pair? . ap4ed5) (odd? . ap4ed4) (numerator . ap4ed3) (number? . ap4ed2) (number->string . ap4ed1) (null? . ap4ed0) (not . ap4ecf) (negative? . ap4ece) (nan? . ap4ecd) (min . ap4ecc) (max . ap4ecb) (map . ap4eca) (make-vector . ap4ec9) (make-string . ap4ec8) (make-rectangular . ap4ec7) (make-polar . ap4ec6) (magnitude . ap4ec5) (log . ap4ec4) (list? . ap4ec3) (list-tail . ap4ec2) (list-ref . ap4ec1) (list->vector . ap4ec0) (list->string . ap4ebf) (list . ap4ebe) (length . ap4ebd) (lcm . ap4ebc) (integer? . ap4ebb) (integer-valued? . ap4eba) (integer->char . ap4eb9) (infinite? . ap4eb8) (inexact? . ap4eb7) (inexact . ap4eb6) (imag-part . ap4eb5) (gcd . ap4eb4) (for-each . ap4eb3) (floor . ap4eb2) (finite? . ap4eb1) (expt . ap4eb0) (exp . ap4eaf) (exact? . ap4eae) (exact-integer-sqrt . ap4ead) (exact . ap4eac) (even? . ap4eab) (error . ap4eaa) (eqv? . ap4ea9) (equal? . ap4ea8) (eq? . ap4ea7) (dynamic-wind . ap4ea6) (div0-and-mod0 . ap4ea5) (mod0 . ap4ea4) (div0 . ap4ea3) (div-and-mod . ap4ea2) (mod . ap4ea1) (div . ap4ea0) (denominator . ap4e9f) (cos . ap4e9e) (cons . ap4e9d) (complex? . ap4e9c) (char? . ap4e9b) (char>? . ap4e9a) (char>=? . ap4e99) (char=? . ap4e98) (char<? . ap4e97) (char<=? . ap4e96) (char->integer . ap4e95) (ceiling . ap4e94) (call-with-values . ap4e93) (call/cc . ap4e92) (call-with-current-continuation . ap4e91) (cddddr . ap4e90) (cdddar . ap4e8f) (cddadr . ap4e8e) (cddaar . ap4e8d) (cdaddr . ap4e8c) (cdadar . ap4e8b) (cdaadr . ap4e8a) (cdaaar . ap4e89) (cadddr . ap4e88) (caddar . ap4e87) (cadadr . ap4e86) (cadaar . ap4e85) (caaddr . ap4e84) (caadar . ap4e83) (caaadr . ap4e82) (caaaar . ap4e81) (cdddr . ap4e80) (cddar . ap4e7f) (cdadr . ap4e7e) (cdaar . ap4e7d) (caddr . ap4e7c) (cadar . ap4e7b) (caadr . ap4e7a) (caaar . ap4e79) (cddr . ap4e78) (cdar . ap4e77) (cadr . ap4e76) (caar . ap4e75) (cdr . ap4e74) (car . ap4e73) (boolean? . ap4e72) (boolean=? . ap4e71) (atan . ap4e70) (assertion-violation . ap4e6f) (assertion-error . ap31d2) (asin . ap4e6e) (apply . ap4e6d) (append . ap4e6c) (angle . ap4e6b) (acos . ap4e6a) (abs . ap4e69) (/ . ap4e68) (* . ap4e67) (- . ap4e66) (+ . ap4e65) (>= . ap4e64) (> . ap4e63) (= . ap4e62) (<= . ap4e61) (< . ap4e60) (library . ap4e5f) (&no-nans . ap4e5e) (&no-infinities . ap4e5d) (&i/o-encoding . ap4e5c) (&i/o-decoding . ap4e5b) (&i/o-port . ap4e5a) (&i/o-file-does-not-exist . ap4e59) (&i/o-file-already-exists . ap4e58) (&i/o-file-is-read-only . ap4e57) (&i/o-file-protection . ap4e56) (&i/o-filename . ap4e55) (&i/o-invalid-position . ap4e54) (&i/o-write . ap4e53) (&i/o-read . ap4e52) (&i/o . ap4e51) (&undefined . ap4e50) (&syntax . ap4e4f) (&lexical . ap4e4e) (&implementation-restriction . ap4e4d) (&non-continuable . ap4e4c) (&who . ap4e4b) (&irritants . ap4e4a) (&assertion . ap4e49) (&violation . ap4e48) (&error . ap4e47) (&serious . ap4e46) (&warning . ap4e45) (&message . ap4e44) (&condition . ap4e43) (define-condition-type . ap4e42) (define-enumeration . ap4e41) (define-record-type . ap4e40) (parent-rtd . ap4e3f) (nongenerative . ap4e3e) (opaque . ap4e3d) (sealed . ap4e3c) (protocol . ap4e3b) (parent . ap4e3a) (immutable . ap4e39) (mutable . ap4e38) (fields . ap4e37) (error-handling-mode . ap4e36) (file-options . ap4e35) (buffer-mode . ap4e34) (eol-style . ap4e33) (guard . ap4e32) (trace-define . ap4e31) (trace-lambda . ap4e30) (unsyntax-splicing . ap4e2f) (unsyntax . ap4e2e) (unquote-splicing . ap4e2d) (unquote . ap4e2c) (_ . ap4e2b) (else . ap4e2a) (=> . ap4e29) (... . ap4e28) (assert . ap4e27) (endianness . ap4e26) (delay . ap4e25) (time . ap4e24) (do . ap4e23) (cond . ap4e22) (let* . ap4e21) (let*-values . ap4e20) (let-values . ap4e1f) (identifier-syntax . ap4e1e) (with-syntax . ap4e1d) (quasisyntax . ap4e1c) (quasiquote . ap4e1b) (syntax-rules . ap4e1a) (include . ap4e19) (define-struct . ap4e18) (record-constructor-descriptor . ap4e17) (record-type-descriptor . ap4e16) (case . ap4e15) (parameterize . ap4e14) (unless . ap4e13) (when . ap4e12) (or . ap4e11) (and . ap4e10) (if . ap4e0f) (let . ap4e0e) (letrec* . ap4e0d) (letrec . ap4e0c) (type-descriptor . ap4e0b) (case-lambda . ap4e0a) (lambda . ap4e09) (syntax . ap4e08) (syntax-case . ap4e07) (quote . ap4e06) (foreign-call . ap4e05) (letrec-syntax . ap4e04) (let-syntax . ap4e03) (set! . ap4e02) (import . ap4e01) (begin . ap4e00) (module . ap4dff) (define-syntax . ap4dfe) (define . ap4dfd)) '((ap51a3 core-prim . &no-nans-rcd) (ap51a2 core-prim . &no-nans-rtd) (ap51a1 core-prim . &no-infinities-rcd) (ap51a0 core-prim . &no-infinities-rtd) (ap519f core-prim . &i/o-encoding-rcd) (ap519e core-prim . &i/o-encoding-rtd) (ap519d core-prim . &i/o-decoding-rcd) (ap519c core-prim . &i/o-decoding-rtd) (ap519b core-prim . &i/o-port-rcd) (ap519a core-prim . &i/o-port-rtd) (ap5199 core-prim . &i/o-file-does-not-exist-rcd) (ap5198 core-prim . &i/o-file-does-not-exist-rtd) (ap5197 core-prim . &i/o-file-already-exists-rcd) (ap5196 core-prim . &i/o-file-already-exists-rtd) (ap5195 core-prim . &i/o-file-is-read-only-rcd) (ap5194 core-prim . &i/o-file-is-read-only-rtd) (ap5193 core-prim . &i/o-file-protection-rcd) (ap5192 core-prim . &i/o-file-protection-rtd) (ap5191 core-prim . &i/o-filename-rcd) (ap5190 core-prim . &i/o-filename-rtd) (ap518f core-prim . &i/o-invalid-position-rcd) (ap518e core-prim . &i/o-invalid-position-rtd) (ap518d core-prim . &i/o-write-rcd) (ap518c core-prim . &i/o-write-rtd) (ap518b core-prim . &i/o-read-rcd) (ap518a core-prim . &i/o-read-rtd) (ap5189 core-prim . &i/o-rcd) (ap5188 core-prim . &i/o-rtd) (ap5187 core-prim . &undefined-rcd) (ap5186 core-prim . &undefined-rtd) (ap5185 core-prim . &syntax-rcd) (ap5184 core-prim . &syntax-rtd) (ap5183 core-prim . &lexical-rcd) (ap5182 core-prim . &lexical-rtd) (ap5181 core-prim . &implementation-restriction-rcd) (ap5180 core-prim . &implementation-restriction-rtd) (ap517f core-prim . &non-continuable-rcd) (ap517e core-prim . &non-continuable-rtd) (ap517d core-prim . &who-rcd) (ap517c core-prim . &who-rtd) (ap517b core-prim . &irritants-rcd) (ap517a core-prim . &irritants-rtd) (ap5179 core-prim . &assertion-rcd) (ap5178 core-prim . &assertion-rtd) (ap5177 core-prim . &violation-rcd) (ap5176 core-prim . &violation-rtd) (ap5175 core-prim . &error-rcd) (ap5174 core-prim . &error-rtd) (ap5173 core-prim . &serious-rcd) (ap5172 core-prim . &serious-rtd) (ap5171 core-prim . &warning-rcd) (ap5170 core-prim . &warning-rtd) (ap516f core-prim . &message-rcd) (ap516e core-prim . &message-rtd) (ap516d core-prim . &condition-rcd) (ap516c core-prim . &condition-rtd) (ap31d4 core-prim . syntax-error) (ap30f8 core-prim . syntax-dispatch) (ap516b core-prim . pretty-print) (ap516a core-prim . eval-core) (ap5169 core-prim . set-symbol-value!) (ap5168 core-prim . symbol-value) (ap5167 core-prim . gensym) (ap5166 core-prim . void) (ap4c97 core-prim . load) (ap31e6 core-prim . interaction-environment) (ap5165 core-prim . char-ready?) (ap5164 core-prim . regexp?) (ap5163 core-prim . read-line) (ap5162 core-prim . gensym-prefix-set!) (ap5161 core-prim . ungensym) (ap5160 core-prim . alist->eq-hash-table) (ap515f core-prim . assoc-ref) (ap515e core-prim . print) (ap515d core-prim . format) (ap515c core-prim . host-os) (ap2b37 core-prim . library-path) (ap515b core-prim . standard-library-path) (ap515a core-prim . ssl-supported?) (ap5159 core-prim . ssl-socket?) (ap5158 core-prim . socket-sslize!) (ap5157 core-prim . %monapi-name-whereis) (ap5156 core-prim . %monapi-message-send) (ap5155 core-prim . file-newer?) (ap5154 core-prim . stat-mtime) (ap5153 core-prim . write-to-file) (ap5152 core-prim . file->list) (ap5151 core-prim . file->string) (ap5150 core-prim . digit->integer) (ap514f core-prim . call-with-string-input-port) (ap514e core-prim . call-with-string-io) (ap514d core-prim . string-split) (ap514c core-prim . bytevector-for-each) (ap514b core-prim . string->regexp) (ap514a core-prim . rxmatch) (ap5149 core-prim . regexp-replace-all) (ap5148 core-prim . hashtable-fold-left) (ap5147 core-prim . hashtable-for-each) (ap2921 core-prim . mosh-cache-dir) (ap5146 core-prim . call-process) (ap5145 core-prim . local-tz-offset) (ap5144 core-prim . microseconds) (ap5143 core-prim . directory-list) (ap5142 core-prim . set-current-directory!) (ap5141 core-prim . expand-path) (ap5140 core-prim . current-directory) (ap513f core-prim . %spawn) (ap513e core-prim . %waitpid) (ap513d core-prim . simple-struct-name) (ap513c core-prim . simple-struct-set!) (ap513b core-prim . simple-struct-ref) (ap513a core-prim . make-simple-struct) (ap5139 core-prim . simple-struct?) (ap5138 core-prim . pointer-ref-c-int64) (ap5137 core-prim . pointer-ref-c-int32) (ap5136 core-prim . pointer-ref-c-int16) (ap5135 core-prim . pointer-ref-c-int8) (ap5134 core-prim . pointer-ref-c-uint64) (ap5133 core-prim . pointer-ref-c-uint32) (ap5132 core-prim . pointer-ref-c-uint16) (ap5131 core-prim . pointer-ref-c-uint8) (ap5130 core-prim . pointer-set-c-uint64!) (ap512f core-prim . pointer-set-c-uint32!) (ap512e core-prim . pointer-set-c-uint16!) (ap512d core-prim . pointer-set-c-uint8!) (ap512c core-prim . pointer-set-c-int64!) (ap512b core-prim . pointer-set-c-int32!) (ap512a core-prim . pointer-set-c-int16!) (ap5129 core-prim . pointer-set-c-int8!) (ap5128 core-prim . pointer-set-c-pointer!) (ap5127 core-prim . pointer-set-c-double!) (ap5126 core-prim . pointer-set-c-float!) (ap5125 core-prim . pointer-set-c-long-long!) (ap5124 core-prim . pointer-set-c-long!) (ap5123 core-prim . pointer-set-c-int!) (ap5122 core-prim . pointer-set-c-short!) (ap5121 core-prim . pointer-set-c-char!) (ap5120 core-prim . pointer-ref-c-pointer) (ap511f core-prim . pointer-ref-c-double) (ap511e core-prim . pointer-ref-c-float) (ap511d core-prim . pointer-ref-c-unsigned-long-long) (ap511c core-prim . pointer-ref-c-signed-long-long) (ap511b core-prim . pointer-ref-c-unsigned-long) (ap511a core-prim . pointer-ref-c-signed-long) (ap5119 core-prim . pointer-ref-c-unsigned-int) (ap5118 core-prim . pointer-ref-c-signed-int) (ap5117 core-prim . pointer-ref-c-unsigned-short) (ap5116 core-prim . pointer-ref-c-signed-short) (ap5115 core-prim . pointer-ref-c-unsigned-char) (ap5114 core-prim . pointer-ref-c-signed-char) (ap5113 core-prim . pointer->integer) (ap5112 core-prim . integer->pointer) (ap5111 core-prim . pointer?) (ap5110 core-prim . shared-errno) (ap510f core-prim . %ffi-free-c-callback-trampoline) (ap510e core-prim . %ffi-make-c-callback-trampoline) (ap510d core-prim . %ffi-free) (ap510c core-prim . %ffi-malloc) (ap510b core-prim . %ffi-supported?) (ap510a core-prim . %ffi-pointer->string) (ap5109 core-prim . %ffi-call) (ap5108 core-prim . %ffi-lookup) (ap5107 core-prim . %ffi-open) (ap5106 core-prim . null-terminated-utf8->string) (ap5105 core-prim . null-terminated-bytevector->string) (ap5104 core-prim . %exec) (ap5103 core-prim . %fork) (ap5102 core-prim . %pipe) (ap5101 core-prim . p) (ap5100 core-prim . open-output-string) (ap50ff core-prim . get-output-string) (ap50fe core-prim . file-stat-ctime) (ap50fd core-prim . file-stat-atime) (ap50fc core-prim . file-stat-mtime) (ap50fb core-prim . file-size-in-bytes) (ap50fa core-prim . file-writable?) (ap50f9 core-prim . file-executable?) (ap50f8 core-prim . file-readable?) (ap50f7 core-prim . file-regular?) (ap50f6 core-prim . file-symbolic-link?) (ap50f5 core-prim . file-directory?) (ap50f4 core-prim . create-symbolic-link) (ap50f3 core-prim . rename-file) (ap50f2 core-prim . delete-directory) (ap50f1 core-prim . create-directory) (ap50f0 core-prim . create-mosh-cache-dir) (ap50ef core-prim . get-environment-variables) (ap50ee core-prim . current-exception-handler) (ap50ed core-prim . get-environment-variable) (ap50ec core-prim . join-wraps) (ap50eb core-prim . id->real-label) (ap50ea core-prim . same-marks?) (ap50e9 core-prim . same-marks*?) (ap50e8 core-prim . get-timeofday) (ap50e7 core-prim . get-command-line) (ap50e6 core-prim . sys-display) (ap50e5 core-prim . whereis) (ap50e4 core-prim . register) (ap50e3 core-prim . vm-join!) (ap50e2 core-prim . vm-set-value!) (ap50e1 core-prim . vm?) (ap50e0 core-prim . main-vm?) (ap50df core-prim . vm-eval) (ap50de core-prim . vm-self) (ap50dd core-prim . vm-start!) (ap50dc core-prim . make-vm) (ap50db core-prim . mutex-try-lock!) (ap50da core-prim . mutex-unlock!) (ap50d9 core-prim . mutex-lock!) (ap50d8 core-prim . mutex?) (ap50d7 core-prim . make-mutex) (ap50d6 core-prim . condition-variable-notify-all!) (ap50d5 core-prim . condition-variable-notify!) (ap50d4 core-prim . condition-variable-wait!) (ap50d3 core-prim . make-condition-variable) (ap50d2 core-prim . write/ss) (ap50d1 core-prim . mosh-executable-path) (ap50d0 core-prim . make-file-options) (ap50cf core-prim . source-info) (ap50ce core-prim . make-compiler-instruction) (ap50cd core-prim . make-instruction) (ap50cc core-prim . set-source-info!) (ap50cb core-prim . bignum?) (ap50ca core-prim . fast-equal?) (ap50c9 core-prim . fasl-read) (ap50c8 core-prim . fasl-write) (ap50c7 core-prim . time-usage) (ap50c6 core-prim . os-constant) (ap50c5 core-prim . condition-printer) (ap50c4 core-prim . disasm) (ap291f core-prim . make-parameter) (ap50c3 core-prim . socket-port) (ap50c2 core-prim . socket-shutdown) (ap50c1 core-prim . socket-close) (ap50c0 core-prim . socket-send) (ap50bf core-prim . socket-recv!) (ap50be core-prim . socket-recv) (ap50bd core-prim . make-server-socket) (ap50bc core-prim . make-client-socket) (ap50bb core-prim . socket-accept) (ap50ba core-prim . socket?) (ap50b9 core-prim . string-upcase) (ap50b8 core-prim . string-titlecase) (ap50b7 core-prim . string-normalize-nfkd) (ap50b6 core-prim . string-normalize-nfkc) (ap50b5 core-prim . string-normalize-nfd) (ap50b4 core-prim . string-normalize-nfc) (ap50b3 core-prim . string-foldcase) (ap50b2 core-prim . string-downcase) (ap50b1 core-prim . string-ci>?) (ap50b0 core-prim . string-ci>=?) (ap50af core-prim . string-ci=?) (ap50ae core-prim . string-ci<?) (ap50ad core-prim . string-ci<=?) (ap50ac core-prim . char-whitespace?) (ap50ab core-prim . char-upper-case?) (ap50aa core-prim . char-title-case?) (ap50a9 core-prim . char-numeric?) (ap50a8 core-prim . char-lower-case?) (ap50a7 core-prim . char-general-category) (ap50a6 core-prim . char-upcase) (ap50a5 core-prim . char-titlecase) (ap50a4 core-prim . char-foldcase) (ap50a3 core-prim . char-downcase) (ap50a2 core-prim . char-ci>?) (ap50a1 core-prim . char-ci>=?) (ap50a0 core-prim . char-ci=?) (ap509f core-prim . char-ci<?) (ap509e core-prim . char-ci<=?) (ap509d core-prim . char-alphabetic?) (ap2f23 core-prim . make-variable-transformer) (ap31da core-prim . identifier?) (ap31c6 core-prim . generate-temporaries) (ap31c8 core-prim . free-identifier=?) (ap31de core-prim . syntax->datum) (ap31dc core-prim . datum->syntax) (ap31ca core-prim . bound-identifier=?) (ap509c core-prim . record-type-descriptor?) (ap509b core-prim . record-predicate) (ap509a core-prim . record-mutator) (ap5099 core-prim . record-constructor) (ap5098 core-prim . record-accessor) (ap5097 core-prim . make-record-type-descriptor) (ap5096 core-prim . make-record-constructor-descriptor) (ap5095 core-prim . record?) (ap5094 core-prim . record-type-uid) (ap5093 core-prim . record-type-sealed?) (ap5092 core-prim . record-type-parent) (ap5091 core-prim . record-type-opaque?) (ap5090 core-prim . record-type-name) (ap508f core-prim . record-type-generative?) (ap508e core-prim . record-type-field-names) (ap508d core-prim . record-rtd) (ap508c core-prim . record-field-mutable?) (ap508b core-prim . delete-file) (ap508a core-prim . file-exists?) (ap5089 core-prim . vector-sort!) (ap5088 core-prim . vector-sort) (ap5087 core-prim . list-sort) (ap5086 core-prim . symbol-hash) (ap5085 core-prim . string-ci-hash) (ap5084 core-prim . string-hash) (ap5083 core-prim . equal-hash) (ap5082 core-prim . hashtable-equivalence-function) (ap5081 core-prim . make-hashtable) (ap5080 core-prim . hashtable-hash-function) (ap507f core-prim . make-eqv-hashtable) (ap507e core-prim . make-eq-hashtable) (ap507d core-prim . hashtable?) (ap507c core-prim . hashtable-update!) (ap507b core-prim . hashtable-size) (ap507a core-prim . hashtable-set!) (ap5079 core-prim . hashtable-ref) (ap5078 core-prim . hashtable-mutable?) (ap5077 core-prim . hashtable-keys) (ap5076 core-prim . hashtable-entries) (ap5075 core-prim . hashtable-delete!) (ap5074 core-prim . hashtable-copy) (ap5073 core-prim . hashtable-contains?) (ap5072 core-prim . hashtable-clear!) (ap5071 core-prim . call-with-output-file) (ap5070 core-prim . call-with-input-file) (ap506f core-prim . write-char) (ap506e core-prim . write) (ap506d core-prim . with-output-to-file) (ap506c core-prim . with-input-from-file) (ap506b core-prim . read-char) (ap506a core-prim . read) (ap5069 core-prim . peek-char) (ap5068 core-prim . open-output-file) (ap5067 core-prim . open-input-file) (ap5066 core-prim . newline) (ap5065 core-prim . display) (ap5064 core-prim . close-output-port) (ap5063 core-prim . close-input-port) (ap5062 core-prim . eof-object?) (ap5061 core-prim . eof-object) (ap5060 core-prim . current-error-port) (ap505f core-prim . current-output-port) (ap505e core-prim . current-input-port) (ap505d core-prim . output-port?) (ap505c core-prim . input-port?) (ap505b core-prim . utf-8-codec) (ap505a core-prim . utf-16-codec) (ap5059 core-prim . transcoder-error-handling-mode) (ap5058 core-prim . transcoder-eol-style) (ap5057 core-prim . transcoder-codec) (ap5056 core-prim . transcoded-port) (ap5055 core-prim . textual-port?) (ap5054 core-prim . string->bytevector) (ap5053 core-prim . standard-output-port) (ap5052 core-prim . standard-input-port) (ap5051 core-prim . standard-error-port) (ap5050 core-prim . set-port-position!) (ap504f core-prim . put-u8) (ap504e core-prim . put-string) (ap504d core-prim . put-datum) (ap504c core-prim . put-char) (ap504b core-prim . put-bytevector) (ap504a core-prim . port?) (ap5049 core-prim . port-transcoder) (ap5048 core-prim . port-position) (ap5047 core-prim . port-has-set-port-position!?) (ap5046 core-prim . port-has-port-position?) (ap5045 core-prim . port-eof?) (ap5044 core-prim . output-port-buffer-mode) (ap5043 core-prim . open-string-output-port) (ap5042 core-prim . open-string-input-port) (ap5041 core-prim . open-file-output-port) (ap5040 core-prim . open-file-input/output-port) (ap503f core-prim . open-file-input-port) (ap503e core-prim . open-bytevector-output-port) (ap503d core-prim . open-bytevector-input-port) (ap503c core-prim . native-transcoder) (ap503b core-prim . native-eol-style) (ap503a core-prim . make-transcoder) (ap5039 core-prim . latin-1-codec) (ap5038 core-prim . make-i/o-write-error) (ap5037 core-prim . make-i/o-read-error) (ap5036 core-prim . make-i/o-port-error) (ap5035 core-prim . make-i/o-invalid-position-error) (ap5034 core-prim . make-i/o-filename-error) (ap5033 core-prim . make-i/o-file-protection-error) (ap5032 core-prim . make-i/o-file-is-read-only-error) (ap5031 core-prim . make-i/o-file-does-not-exist-error) (ap5030 core-prim . make-i/o-file-already-exists-error) (ap502f core-prim . make-i/o-error) (ap502e core-prim . make-i/o-encoding-error) (ap502d core-prim . make-i/o-decoding-error) (ap502c core-prim . make-custom-textual-output-port) (ap502b core-prim . make-custom-textual-input/output-port) (ap502a core-prim . make-custom-textual-input-port) (ap5029 core-prim . make-custom-binary-output-port) (ap5028 core-prim . make-custom-binary-input/output-port) (ap5027 core-prim . make-custom-binary-input-port) (ap5026 core-prim . make-bytevector) (ap5025 core-prim . lookahead-u8) (ap5024 core-prim . lookahead-char) (ap5023 core-prim . i/o-write-error?) (ap5022 core-prim . i/o-read-error?) (ap5021 core-prim . i/o-port-error?) (ap5020 core-prim . i/o-invalid-position-error?) (ap501f core-prim . i/o-filename-error?) (ap501e core-prim . i/o-file-protection-error?) (ap501d core-prim . i/o-file-is-read-only-error?) (ap501c core-prim . i/o-file-does-not-exist-error?) (ap501b core-prim . i/o-file-already-exists-error?) (ap501a core-prim . i/o-error?) (ap5019 core-prim . i/o-error-position) (ap5018 core-prim . i/o-error-port) (ap5017 core-prim . i/o-error-filename) (ap5016 core-prim . i/o-encoding-error?) (ap5015 core-prim . i/o-encoding-error-char) (ap5014 core-prim . i/o-decoding-error?) (ap5013 core-prim . get-u8) (ap5012 core-prim . get-string-n!) (ap5011 core-prim . get-string-n) (ap5010 core-prim . get-string-all) (ap500f core-prim . get-line) (ap500e core-prim . get-datum) (ap500d core-prim . get-char) (ap500c core-prim . get-bytevector-some) (ap500b core-prim . get-bytevector-n!) (ap500a core-prim . get-bytevector-n) (ap5009 core-prim . get-bytevector-all) (ap5008 core-prim . flush-output-port) (ap5007 core-prim . close-port) (ap31b4 core-prim . scheme-report-environment) (ap5006 core-prim . quotient) (ap31b2 core-prim . null-environment) (ap5005 core-prim . remainder) (ap5004 core-prim . modulo) (ap5003 core-prim . inexact->exact) (ap5002 core-prim . force) (ap5001 core-prim . exact->inexact) (ap5000 core-prim . make-promise) (ap4fff core-prim . exit) (ap4c91 core-prim . command-line) (ap4ffe core-prim . string-fill!) (ap4ffd core-prim . string-set!) (ap4ffc core-prim . set-cdr!) (ap4ffb core-prim . set-car!) (ap4ffa core-prim . remove) (ap4ff9 core-prim . remv) (ap4ff8 core-prim . remp) (ap4ff7 core-prim . remq) (ap4ff6 core-prim . partition) (ap4ff5 core-prim . memv) (ap4ff4 core-prim . memq) (ap4ff3 core-prim . memp) (ap4ff2 core-prim . member) (ap4ff1 core-prim . exists) (ap4ff0 core-prim . for-all) (ap4fef core-prim . fold-right) (ap4fee core-prim . fold-left) (ap4fed core-prim . find) (ap4fec core-prim . filter) (ap4feb core-prim . cons*) (ap4fea core-prim . assv) (ap4fe9 core-prim . assq) (ap4fe8 core-prim . assp) (ap4fe7 core-prim . assoc) (ap4fe6 core-prim . call-with-string-output-port) (ap4fe5 core-prim . call-with-port) (ap4fe4 core-prim . call-with-bytevector-output-port) (ap4fe3 core-prim . bytevector->string) (ap4fe2 core-prim . buffer-mode?) (ap4fe1 core-prim . binary-port?) (ap4fe0 core-prim . with-exception-handler) (ap4fdf core-prim . raise-continuable) (ap4fde core-prim . raise) (ap31b8 core-prim . eval) (ap31b0 core-prim . environment) (ap4fdd core-prim . make-enumeration) (ap4fdc core-prim . enum-set=?) (ap4fdb core-prim . enum-set-universe) (ap4fda core-prim . enum-set-union) (ap4fd9 core-prim . enum-set-subset?) (ap4fd8 core-prim . enum-set-projection) (ap4fd7 core-prim . enum-set-member?) (ap4fd6 core-prim . enum-set-intersection) (ap4fd5 core-prim . enum-set-indexer) (ap4fd4 core-prim . enum-set-difference) (ap4fd3 core-prim . enum-set-constructor) (ap4fd2 core-prim . enum-set-complement) (ap4fd1 core-prim . enum-set->list) (ap4fd0 core-prim . who-condition?) (ap4fcf core-prim . warning?) (ap4fce core-prim . violation?) (ap4fcd core-prim . undefined-violation?) (ap4fcc core-prim . syntax-violation?) (ap4fcb core-prim . syntax-violation-subform) (ap4fca core-prim . syntax-violation-form) (ap31d8 core-prim . syntax-violation) (ap4fc9 core-prim . simple-conditions) (ap4fc8 core-prim . serious-condition?) (ap4fc7 core-prim . non-continuable-violation?) (ap4fc6 core-prim . message-condition?) (ap4fc5 core-prim . make-who-condition) (ap4fc4 core-prim . make-warning) (ap4fc3 core-prim . make-violation) (ap4fc2 core-prim . make-undefined-violation) (ap4fc1 core-prim . make-syntax-violation) (ap4fc0 core-prim . make-serious-condition) (ap4fbf core-prim . make-non-continuable-violation) (ap4fbe core-prim . make-message-condition) (ap4fbd core-prim . make-lexical-violation) (ap4fbc core-prim . make-irritants-condition) (ap4fbb core-prim . make-implementation-restriction-violation) (ap4fba core-prim . make-error) (ap4fb9 core-prim . make-assertion-violation) (ap4fb8 core-prim . lexical-violation?) (ap4fb7 core-prim . irritants-condition?) (ap4fb6 core-prim . implementation-restriction-violation?) (ap4fb5 core-prim . error?) (ap4fb4 core-prim . condition-who) (ap4fb3 core-prim . condition-predicate) (ap4fb2 core-prim . condition-message) (ap4fb1 core-prim . condition-irritants) (ap4fb0 core-prim . condition-accessor) (ap4faf core-prim . condition) (ap4fae core-prim . assertion-violation?) (ap4fad core-prim . condition?) (ap4fac core-prim . utf32->string) (ap4fab core-prim . utf16->string) (ap4faa core-prim . utf8->string) (ap4fa9 core-prim . uint-list->bytevector) (ap4fa8 core-prim . u8-list->bytevector) (ap4fa7 core-prim . string->utf8) (ap4fa6 core-prim . string->utf32) (ap4fa5 core-prim . string->utf16) (ap4fa4 core-prim . sint-list->bytevector) (ap4fa3 core-prim . native-endianness) (ap4fa2 core-prim . bytevector?) (ap4fa1 core-prim . bytevector=?) (ap4fa0 core-prim . bytevector-uint-set!) (ap4f9f core-prim . bytevector-uint-ref) (ap4f9e core-prim . bytevector-u8-set!) (ap4f9d core-prim . bytevector-u8-ref) (ap4f9c core-prim . bytevector-u64-set!) (ap4f9b core-prim . bytevector-u64-ref) (ap4f9a core-prim . bytevector-u64-native-set!) (ap4f99 core-prim . bytevector-u64-native-ref) (ap4f98 core-prim . bytevector-u32-set!) (ap4f97 core-prim . bytevector-u32-ref) (ap4f96 core-prim . bytevector-u32-native-set!) (ap4f95 core-prim . bytevector-u32-native-ref) (ap4f94 core-prim . bytevector-u16-set!) (ap4f93 core-prim . bytevector-u16-ref) (ap4f92 core-prim . bytevector-u16-native-set!) (ap4f91 core-prim . bytevector-u16-native-ref) (ap4f90 core-prim . bytevector-sint-set!) (ap4f8f core-prim . bytevector-sint-ref) (ap4f8e core-prim . bytevector-s8-set!) (ap4f8d core-prim . bytevector-s8-ref) (ap4f8c core-prim . bytevector-s64-set!) (ap4f8b core-prim . bytevector-s64-ref) (ap4f8a core-prim . bytevector-s64-native-set!) (ap4f89 core-prim . bytevector-s64-native-ref) (ap4f88 core-prim . bytevector-s32-set!) (ap4f87 core-prim . bytevector-s32-ref) (ap4f86 core-prim . bytevector-s32-native-set!) (ap4f85 core-prim . bytevector-s32-native-ref) (ap4f84 core-prim . bytevector-s16-set!) (ap4f83 core-prim . bytevector-s16-ref) (ap4f82 core-prim . bytevector-s16-native-set!) (ap4f81 core-prim . bytevector-s16-native-ref) (ap4f80 core-prim . bytevector-length) (ap4f7f core-prim . bytevector-ieee-single-ref) (ap4f7e core-prim . bytevector-ieee-single-set!) (ap4f7d core-prim . bytevector-ieee-single-native-set!) (ap4f7c core-prim . bytevector-ieee-single-native-ref) (ap4f7b core-prim . bytevector-ieee-double-set!) (ap4f7a core-prim . bytevector-ieee-double-ref) (ap4f79 core-prim . bytevector-ieee-double-native-set!) (ap4f78 core-prim . bytevector-ieee-double-native-ref) (ap4f77 core-prim . bytevector-fill!) (ap4f76 core-prim . bytevector-copy!) (ap4f75 core-prim . bytevector-copy) (ap4f74 core-prim . bytevector->uint-list) (ap4f73 core-prim . bytevector->u8-list) (ap4f72 core-prim . bytevector->sint-list) (ap4f71 core-prim . no-nans-violation?) (ap4f70 core-prim . no-infinities-violation?) (ap4f6f core-prim . make-no-nans-violation) (ap4f6e core-prim . make-no-infinities-violation) (ap4f6d core-prim . real->flonum) (ap4f6c core-prim . flzero?) (ap4f6b core-prim . fltruncate) (ap4f6a core-prim . fltan) (ap4f69 core-prim . flsqrt) (ap4f68 core-prim . flsin) (ap4f67 core-prim . flround) (ap4f66 core-prim . flpositive?) (ap4f65 core-prim . flonum?) (ap4f64 core-prim . flodd?) (ap4f63 core-prim . flnumerator) (ap4f62 core-prim . flnegative?) (ap4f61 core-prim . flnan?) (ap4f60 core-prim . flmod0) (ap4f5f core-prim . flmod) (ap4f5e core-prim . flmin) (ap4f5d core-prim . flmax) (ap4f5c core-prim . fllog) (ap4f5b core-prim . flinteger?) (ap4f5a core-prim . flinfinite?) (ap4f59 core-prim . flfloor) (ap4f58 core-prim . flfinite?) (ap4f57 core-prim . flexpt) (ap4f56 core-prim . flexp) (ap4f55 core-prim . fleven?) (ap4f54 core-prim . fldiv0-and-mod0) (ap4f53 core-prim . fldiv0) (ap4f52 core-prim . fldiv-and-mod) (ap4f51 core-prim . fldiv) (ap4f50 core-prim . fldenominator) (ap4f4f core-prim . flcos) (ap4f4e core-prim . flceiling) (ap4f4d core-prim . flatan) (ap4f4c core-prim . flasin) (ap4f4b core-prim . flacos) (ap4f4a core-prim . flabs) (ap4f49 core-prim . fl>?) (ap4f48 core-prim . fl>=?) (ap4f47 core-prim . fl=?) (ap4f46 core-prim . fl<?) (ap4f45 core-prim . fl<=?) (ap4f44 core-prim . fl/) (ap4f43 core-prim . fl-) (ap4f42 core-prim . fl+) (ap4f41 core-prim . fl*) (ap4f40 core-prim . fixnum->flonum) (ap4f3f core-prim . fxzero?) (ap4f3e core-prim . fxxor) (ap4f3d core-prim . fxrotate-bit-field) (ap4f3c core-prim . fxreverse-bit-field) (ap4f3b core-prim . fxpositive?) (ap4f3a core-prim . fxodd?) (ap4f39 core-prim . fxnot) (ap4f38 core-prim . fxnegative?) (ap4f37 core-prim . fxmod0) (ap4f36 core-prim . fxmod) (ap4f35 core-prim . fxmin) (ap4f34 core-prim . fxmax) (ap4f33 core-prim . fxlength) (ap4f32 core-prim . fxior) (ap4f31 core-prim . fxif) (ap4f30 core-prim . fxfirst-bit-set) (ap4f2f core-prim . fxeven?) (ap4f2e core-prim . fxdiv0-and-mod0) (ap4f2d core-prim . fxdiv0) (ap4f2c core-prim . fxdiv-and-mod) (ap4f2b core-prim . fxdiv) (ap4f2a core-prim . fxcopy-bit-field) (ap4f29 core-prim . fxcopy-bit) (ap4f28 core-prim . fxbit-set?) (ap4f27 core-prim . fxbit-field) (ap4f26 core-prim . fxbit-count) (ap4f25 core-prim . fxarithmetic-shift-right) (ap4f24 core-prim . fxarithmetic-shift-left) (ap4f23 core-prim . fxarithmetic-shift) (ap4f22 core-prim . fxand) (ap4f21 core-prim . fx>?) (ap4f20 core-prim . fx>=?) (ap4f1f core-prim . fx=?) (ap4f1e core-prim . fx<?) (ap4f1d core-prim . fx<=?) (ap4f1c core-prim . fx-/carry) (ap4f1b core-prim . fx-) (ap4f1a core-prim . fx+/carry) (ap4f19 core-prim . fx+) (ap4f18 core-prim . fx*/carry) (ap4f17 core-prim . fx*) (ap4f16 core-prim . greatest-fixnum) (ap4f15 core-prim . least-fixnum) (ap4f14 core-prim . fixnum-width) (ap4f13 core-prim . fixnum?) (ap4f12 core-prim . bitwise-rotate-bit-field) (ap4f11 core-prim . bitwise-reverse-bit-field) (ap4f10 core-prim . bitwise-length) (ap4f0f core-prim . bitwise-if) (ap4f0e core-prim . bitwise-first-bit-set) (ap4f0d core-prim . bitwise-copy-bit-field) (ap4f0c core-prim . bitwise-copy-bit) (ap4f0b core-prim . bitwise-bit-set?) (ap4f0a core-prim . bitwise-bit-field) (ap4f09 core-prim . bitwise-bit-count) (ap4f08 core-prim . bitwise-xor) (ap4f07 core-prim . bitwise-ior) (ap4f06 core-prim . bitwise-and) (ap4f05 core-prim . bitwise-not) (ap4f04 core-prim . bitwise-arithmetic-shift-right) (ap4f03 core-prim . bitwise-arithmetic-shift-left) (ap4f02 core-prim . bitwise-arithmetic-shift) (ap4f01 core-prim . zero?) (ap4f00 core-prim . vector?) (ap4eff core-prim . vector-set!) (ap4efe core-prim . vector-ref) (ap4efd core-prim . vector-map) (ap4efc core-prim . vector-length) (ap4efb core-prim . vector-for-each) (ap4efa core-prim . vector-fill!) (ap4ef9 core-prim . vector->list) (ap4ef8 core-prim . vector) (ap4ef7 core-prim . values) (ap4ef6 core-prim . truncate) (ap4ef5 core-prim . tan) (ap4ef4 core-prim . symbol?) (ap4ef3 core-prim . symbol=?) (ap4ef2 core-prim . symbol->string) (ap4ef1 core-prim . substring) (ap4ef0 core-prim . string?) (ap4eef core-prim . string>?) (ap4eee core-prim . string>=?) (ap4eed core-prim . string=?) (ap4eec core-prim . string<?) (ap4eeb core-prim . string<=?) (ap4eea core-prim . string-ref) (ap4ee9 core-prim . string-length) (ap4ee8 core-prim . string-for-each) (ap4ee7 core-prim . string-copy) (ap4ee6 core-prim . string-append) (ap4ee5 core-prim . string->symbol) (ap4ee4 core-prim . string->number) (ap4ee3 core-prim . string->list) (ap4ee2 core-prim . string) (ap4ee1 core-prim . sqrt) (ap4ee0 core-prim . sin) (ap4edf core-prim . round) (ap4ede core-prim . reverse) (ap4edd core-prim . real?) (ap4edc core-prim . real-valued?) (ap4edb core-prim . real-part) (ap4eda core-prim . rationalize) (ap4ed9 core-prim . rational?) (ap4ed8 core-prim . rational-valued?) (ap4ed7 core-prim . procedure?) (ap4ed6 core-prim . positive?) (ap4ed5 core-prim . pair?) (ap4ed4 core-prim . odd?) (ap4ed3 core-prim . numerator) (ap4ed2 core-prim . number?) (ap4ed1 core-prim . number->string) (ap4ed0 core-prim . null?) (ap4ecf core-prim . not) (ap4ece core-prim . negative?) (ap4ecd core-prim . nan?) (ap4ecc core-prim . min) (ap4ecb core-prim . max) (ap4eca core-prim . map) (ap4ec9 core-prim . make-vector) (ap4ec8 core-prim . make-string) (ap4ec7 core-prim . make-rectangular) (ap4ec6 core-prim . make-polar) (ap4ec5 core-prim . magnitude) (ap4ec4 core-prim . log) (ap4ec3 core-prim . list?) (ap4ec2 core-prim . list-tail) (ap4ec1 core-prim . list-ref) (ap4ec0 core-prim . list->vector) (ap4ebf core-prim . list->string) (ap4ebe core-prim . list) (ap4ebd core-prim . length) (ap4ebc core-prim . lcm) (ap4ebb core-prim . integer?) (ap4eba core-prim . integer-valued?) (ap4eb9 core-prim . integer->char) (ap4eb8 core-prim . infinite?) (ap4eb7 core-prim . inexact?) (ap4eb6 core-prim . inexact) (ap4eb5 core-prim . imag-part) (ap4eb4 core-prim . gcd) (ap4eb3 core-prim . for-each) (ap4eb2 core-prim . floor) (ap4eb1 core-prim . finite?) (ap4eb0 core-prim . expt) (ap4eaf core-prim . exp) (ap4eae core-prim . exact?) (ap4ead core-prim . exact-integer-sqrt) (ap4eac core-prim . exact) (ap4eab core-prim . even?) (ap4eaa core-prim . error) (ap4ea9 core-prim . eqv?) (ap4ea8 core-prim . equal?) (ap4ea7 core-prim . eq?) (ap4ea6 core-prim . dynamic-wind) (ap4ea5 core-prim . div0-and-mod0) (ap4ea4 core-prim . mod0) (ap4ea3 core-prim . div0) (ap4ea2 core-prim . div-and-mod) (ap4ea1 core-prim . mod) (ap4ea0 core-prim . div) (ap4e9f core-prim . denominator) (ap4e9e core-prim . cos) (ap4e9d core-prim . cons) (ap4e9c core-prim . complex?) (ap4e9b core-prim . char?) (ap4e9a core-prim . char>?) (ap4e99 core-prim . char>=?) (ap4e98 core-prim . char=?) (ap4e97 core-prim . char<?) (ap4e96 core-prim . char<=?) (ap4e95 core-prim . char->integer) (ap4e94 core-prim . ceiling) (ap4e93 core-prim . call-with-values) (ap4e92 core-prim . call/cc) (ap4e91 core-prim . call-with-current-continuation) (ap4e90 core-prim . cddddr) (ap4e8f core-prim . cdddar) (ap4e8e core-prim . cddadr) (ap4e8d core-prim . cddaar) (ap4e8c core-prim . cdaddr) (ap4e8b core-prim . cdadar) (ap4e8a core-prim . cdaadr) (ap4e89 core-prim . cdaaar) (ap4e88 core-prim . cadddr) (ap4e87 core-prim . caddar) (ap4e86 core-prim . cadadr) (ap4e85 core-prim . cadaar) (ap4e84 core-prim . caaddr) (ap4e83 core-prim . caadar) (ap4e82 core-prim . caaadr) (ap4e81 core-prim . caaaar) (ap4e80 core-prim . cdddr) (ap4e7f core-prim . cddar) (ap4e7e core-prim . cdadr) (ap4e7d core-prim . cdaar) (ap4e7c core-prim . caddr) (ap4e7b core-prim . cadar) (ap4e7a core-prim . caadr) (ap4e79 core-prim . caaar) (ap4e78 core-prim . cddr) (ap4e77 core-prim . cdar) (ap4e76 core-prim . cadr) (ap4e75 core-prim . caar) (ap4e74 core-prim . cdr) (ap4e73 core-prim . car) (ap4e72 core-prim . boolean?) (ap4e71 core-prim . boolean=?) (ap4e70 core-prim . atan) (ap4e6f core-prim . assertion-violation) (ap31d2 core-prim . assertion-error) (ap4e6e core-prim . asin) (ap4e6d core-prim . apply) (ap4e6c core-prim . append) (ap4e6b core-prim . angle) (ap4e6a core-prim . acos) (ap4e69 core-prim . abs) (ap4e68 core-prim . /) (ap4e67 core-prim . *) (ap4e66 core-prim . -) (ap4e65 core-prim . +) (ap4e64 core-prim . >=) (ap4e63 core-prim . >) (ap4e62 core-prim . =) (ap4e61 core-prim . <=) (ap4e60 core-prim . <) (ap4e5f core-prim . library) (ap4e5e $core-rtd &no-nans-rtd &no-nans-rcd) (ap4e5d $core-rtd &no-infinities-rtd &no-infinities-rcd) (ap4e5c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (ap4e5b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (ap4e5a $core-rtd &i/o-port-rtd &i/o-port-rcd) (ap4e59 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (ap4e58 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (ap4e57 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (ap4e56 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (ap4e55 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (ap4e54 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (ap4e53 $core-rtd &i/o-write-rtd &i/o-write-rcd) (ap4e52 $core-rtd &i/o-read-rtd &i/o-read-rcd) (ap4e51 $core-rtd &i/o-rtd &i/o-rcd) (ap4e50 $core-rtd &undefined-rtd &undefined-rcd) (ap4e4f $core-rtd &syntax-rtd &syntax-rcd) (ap4e4e $core-rtd &lexical-rtd &lexical-rcd) (ap4e4d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (ap4e4c $core-rtd &non-continuable-rtd &non-continuable-rcd) (ap4e4b $core-rtd &who-rtd &who-rcd) (ap4e4a $core-rtd &irritants-rtd &irritants-rcd) (ap4e49 $core-rtd &assertion-rtd &assertion-rcd) (ap4e48 $core-rtd &violation-rtd &violation-rcd) (ap4e47 $core-rtd &error-rtd &error-rcd) (ap4e46 $core-rtd &serious-rtd &serious-rcd) (ap4e45 $core-rtd &warning-rtd &warning-rcd) (ap4e44 $core-rtd &message-rtd &message-rcd) (ap4e43 $core-rtd &condition-rtd &condition-rcd) (ap4e42 macro . define-condition-type) (ap4e41 macro . define-enumeration) (ap4e40 macro . define-record-type) (ap4e3f macro . parent-rtd) (ap4e3e macro . nongenerative) (ap4e3d macro . opaque) (ap4e3c macro . sealed) (ap4e3b macro . protocol) (ap4e3a macro . parent) (ap4e39 macro . immutable) (ap4e38 macro . mutable) (ap4e37 macro . fields) (ap4e36 macro . error-handling-mode) (ap4e35 macro . file-options) (ap4e34 macro . buffer-mode) (ap4e33 macro . eol-style) (ap4e32 macro . guard) (ap4e31 macro . trace-define) (ap4e30 macro . trace-lambda) (ap4e2f macro . unsyntax-splicing) (ap4e2e macro . unsyntax) (ap4e2d macro . unquote-splicing) (ap4e2c macro . unquote) (ap4e2b macro . _) (ap4e2a macro . else) (ap4e29 macro . =>) (ap4e28 macro . ...) (ap4e27 macro . assert) (ap4e26 macro . endianness) (ap4e25 macro . delay) (ap4e24 macro . time) (ap4e23 macro . do) (ap4e22 macro . cond) (ap4e21 macro . let*) (ap4e20 macro . let*-values) (ap4e1f macro . let-values) (ap4e1e macro . identifier-syntax) (ap4e1d macro . with-syntax) (ap4e1c macro . quasisyntax) (ap4e1b macro . quasiquote) (ap4e1a macro . syntax-rules) (ap4e19 macro . include) (ap4e18 macro . define-struct) (ap4e17 core-macro . record-constructor-descriptor) (ap4e16 core-macro . record-type-descriptor) (ap4e15 macro . case) (ap4e14 macro . parameterize) (ap4e13 macro . unless) (ap4e12 macro . when) (ap4e11 core-macro . or) (ap4e10 core-macro . and) (ap4e0f core-macro . if) (ap4e0e core-macro . let) (ap4e0d core-macro . letrec*) (ap4e0c core-macro . letrec) (ap4e0b core-macro . type-descriptor) (ap4e0a core-macro . case-lambda) (ap4e09 core-macro . lambda) (ap4e08 core-macro . syntax) (ap4e07 core-macro . syntax-case) (ap4e06 core-macro . quote) (ap4e05 core-macro . foreign-call) (ap4e04 letrec-syntax) (ap4e03 let-syntax) (ap4e02 set!) (ap4e01 import) (ap4e00 begin) (ap4dff module) (ap4dfe define-syntax) (ap4dfd define)) values values '#f '#f '#f '#f) (ap2d0c@ap2b58@install-library 'ap51c4 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . ap516b) (eval-core . ap516a) (set-symbol-value! . ap5169) (symbol-value . ap5168) (gensym . ap5167) (void . ap5166)) '() values values '#f '#f '#f '#f) (ap2d0c@ap2b58@install-library 'ap51c5 '(mosh) '() '() '() '() '((set-symbol-value! . ap5169) (symbol-value . ap5168) (regexp? . ap5164) (read-line . ap5163) (ungensym . ap5161) (alist->eq-hash-table . ap5160) (assoc-ref . ap515f) (print . ap515e) (format . ap515d) (host-os . ap515c) (library-path . ap2b37) (standard-library-path . ap515b) (file-newer? . ap5155) (stat-mtime . ap5154) (digit->integer . ap5150) (call-with-string-input-port . ap514f) (call-with-string-io . ap514e) (string-split . ap514d) (bytevector-for-each . ap514c) (string->regexp . ap514b) (rxmatch . ap514a) (regexp-replace-all . ap5149) (hashtable-fold-left . ap5148) (hashtable-for-each . ap5147) (set-current-directory! . ap5142) (expand-path . ap5141) (current-directory . ap5140) (p . ap5101) (get-timeofday . ap50e8) (get-command-line . ap50e7) (sys-display . ap50e6) (whereis . ap50e5) (register . ap50e4) (vm-join! . ap50e3) (vm-set-value! . ap50e2) (vm? . ap50e1) (main-vm? . ap50e0) (vm-eval . ap50df) (vm-self . ap50de) (vm-start! . ap50dd) (make-vm . ap50dc) (mutex-try-lock! . ap50db) (mutex-unlock! . ap50da) (mutex-lock! . ap50d9) (mutex? . ap50d8) (make-mutex . ap50d7) (condition-variable-notify-all! . ap50d6) (condition-variable-notify! . ap50d5) (condition-variable-wait! . ap50d4) (make-condition-variable . ap50d3) (write/ss . ap50d2) (mosh-executable-path . ap50d1) (make-file-options . ap50d0) (source-info . ap50cf) (make-compiler-instruction . ap50ce) (make-instruction . ap50cd) (set-source-info! . ap50cc) (bignum? . ap50cb) (fast-equal? . ap50ca) (fasl-read . ap50c9) (fasl-write . ap50c8) (time-usage . ap50c7) (os-constant . ap50c6) (condition-printer . ap50c5) (time . ap4e24) (include . ap4e19)) '() values values '#f '#f '#f '#f) (ap2d0c@ap2b58@install-library 'ap51c6 '(system) '() '() '() '() '((gensym-prefix-set! . ap5162) (ssl-supported? . ap515a) (ssl-socket? . ap5159) (socket-sslize! . ap5158) (%monapi-name-whereis . ap5157) (%monapi-message-send . ap5156) (write-to-file . ap5153) (file->list . ap5152) (file->string . ap5151) (mosh-cache-dir . ap2921) (call-process . ap5146) (local-tz-offset . ap5145) (microseconds . ap5144) (directory-list . ap5143) (expand-path . ap5141) (%spawn . ap513f) (%waitpid . ap513e) (simple-struct-name . ap513d) (simple-struct-set! . ap513c) (simple-struct-ref . ap513b) (make-simple-struct . ap513a) (simple-struct? . ap5139) (pointer-ref-c-int64 . ap5138) (pointer-ref-c-int32 . ap5137) (pointer-ref-c-int16 . ap5136) (pointer-ref-c-int8 . ap5135) (pointer-ref-c-uint64 . ap5134) (pointer-ref-c-uint32 . ap5133) (pointer-ref-c-uint16 . ap5132) (pointer-ref-c-uint8 . ap5131) (pointer-set-c-uint64! . ap5130) (pointer-set-c-uint32! . ap512f) (pointer-set-c-uint16! . ap512e) (pointer-set-c-uint8! . ap512d) (pointer-set-c-int64! . ap512c) (pointer-set-c-int32! . ap512b) (pointer-set-c-int16! . ap512a) (pointer-set-c-int8! . ap5129) (pointer-set-c-pointer! . ap5128) (pointer-set-c-double! . ap5127) (pointer-set-c-float! . ap5126) (pointer-set-c-long-long! . ap5125) (pointer-set-c-long! . ap5124) (pointer-set-c-int! . ap5123) (pointer-set-c-short! . ap5122) (pointer-set-c-char! . ap5121) (pointer-ref-c-pointer . ap5120) (pointer-ref-c-double . ap511f) (pointer-ref-c-float . ap511e) (pointer-ref-c-unsigned-long-long . ap511d) (pointer-ref-c-signed-long-long . ap511c) (pointer-ref-c-unsigned-long . ap511b) (pointer-ref-c-signed-long . ap511a) (pointer-ref-c-unsigned-int . ap5119) (pointer-ref-c-signed-int . ap5118) (pointer-ref-c-unsigned-short . ap5117) (pointer-ref-c-signed-short . ap5116) (pointer-ref-c-unsigned-char . ap5115) (pointer-ref-c-signed-char . ap5114) (pointer->integer . ap5113) (integer->pointer . ap5112) (pointer? . ap5111) (shared-errno . ap5110) (%ffi-free-c-callback-trampoline . ap510f) (%ffi-make-c-callback-trampoline . ap510e) (%ffi-free . ap510d) (%ffi-malloc . ap510c) (%ffi-supported? . ap510b) (%ffi-pointer->string . ap510a) (%ffi-call . ap5109) (%ffi-lookup . ap5108) (%ffi-open . ap5107) (null-terminated-utf8->string . ap5106) (null-terminated-bytevector->string . ap5105) (%exec . ap5104) (%fork . ap5103) (%pipe . ap5102) (open-output-string . ap5100) (get-output-string . ap50ff) (file-stat-ctime . ap50fe) (file-stat-atime . ap50fd) (file-stat-mtime . ap50fc) (file-size-in-bytes . ap50fb) (file-writable? . ap50fa) (file-executable? . ap50f9) (file-readable? . ap50f8) (file-regular? . ap50f7) (file-symbolic-link? . ap50f6) (file-directory? . ap50f5) (create-symbolic-link . ap50f4) (rename-file . ap50f3) (delete-directory . ap50f2) (create-directory . ap50f1) (create-mosh-cache-dir . ap50f0) (get-environment-variables . ap50ef) (current-exception-handler . ap50ee) (get-environment-variable . ap50ed) (join-wraps . ap50ec) (id->real-label . ap50eb) (same-marks? . ap50ea) (same-marks*? . ap50e9) (disasm . ap50c4) (make-parameter . ap291f) (socket-port . ap50c3) (socket-shutdown . ap50c2) (socket-close . ap50c1) (socket-send . ap50c0) (socket-recv! . ap50bf) (socket-recv . ap50be) (make-server-socket . ap50bd) (make-client-socket . ap50bc) (socket-accept . ap50bb) (socket? . ap50ba) (parameterize . ap4e14)) '() values values '#f '#f '#f '#f)))
(begin (set! ap4c7c@ref (unspecified)) (set! ap4c7e@x* (unspecified)) (set! ap4c80@add-library-path! (unspecified)) (set! ap4c82@parse-and-add-library-path (unspecified)) (set! ap4c84@for-each-with-index (unspecified)) (set! ap4c86@rpad (unspecified)) (set! ap4c88@condition-printer/p (unspecified)) (set! ap4c8a@record->field-alist (unspecified)) (set! ap4c8c@map-with-index (unspecified)) (set! ap4c8e@repl (unspecified)) (set! ap4c90@trace-printer (unspecified)) (set! ap4c92@command-line (unspecified)) (set! ap4c94@local-library-path (unspecified)) (set! ap4c96@load/args (unspecified)) (set! ap4c98@load (unspecified)) (set! ap4c9a@ironscheme-build (unspecified)) (set! ap4c9c@eval-top-level (unspecified)) (set! ap4c9e@compile-system-libraries (unspecified)) (set! ap4ca0@compile (unspecified)) (set! ap4ca2@compile->closure (unspecified)) (set! ap4ca4@pre-compile-r6rs-file (unspecified)) (set! ap4ca6@load-r6rs-top-level (unspecified)) (set! ap4ca8@load-r6rs-top-level-sexp (unspecified)) (set! ap4caa@prefix-inc (unspecified)) (set! ap4cac@prefix-inc! (unspecified)) (set! ap4c7c@ref (lambda (ap4ce7@rtd ap4ce8@i ap4ce9@x) (let ((ap4ced@val ((record-accessor ap4ce7@rtd ap4ce8@i) ap4ce9@x))) (if (symbol? ap4ced@val) (ungensym ap4ced@val) ap4ced@val)))) (set! ap4de3@ap4c7c@ref ap4c7c@ref) (set! ap4c7e@x* '()) (set! ap4de4@ap4c7e@x* ap4c7e@x*) (set! ap4c80@add-library-path! (lambda (ap4cef@path) (ap2cfc@ap2b38@library-path (append (ap2cfc@ap2b38@library-path) (list ap4cef@path))))) (set! ap4de5@ap4c80@add-library-path! ap4c80@add-library-path!) (set! ap4c82@parse-and-add-library-path (lambda (ap4cf1@paths ap4cf2@message) (letrec* ((ap4cf6@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((ap4cf7@t ap4cf1@paths)) (if ap4cf7@t ((lambda (ap4cf9@paths) (for-each (lambda (ap4cfb@path) (if (file-exists? ap4cfb@path) (ap4c80@add-library-path! (expand-path ap4cfb@path)) (format (current-error-port) ap4cf2@message ap4cfb@path))) (string-split ap4cf9@paths ap4cf6@separator))) ap4cf7@t) (void)))))) (set! ap4de6@ap4c82@parse-and-add-library-path ap4c82@parse-and-add-library-path) (set! ap4c84@for-each-with-index (lambda (ap4cfd@proc ap4cfe@lst) (letrec ((ap4d01@loop (lambda (ap4d03@i ap4d04@lst) (if (null? ap4d04@lst) (if '#f '#f (void)) (begin (ap4cfd@proc ap4d03@i (car ap4d04@lst)) (ap4d01@loop (+ ap4d03@i '1) (cdr ap4d04@lst))))))) (ap4d01@loop '1 ap4cfe@lst)))) (set! ap4de7@ap4c84@for-each-with-index ap4c84@for-each-with-index) (set! ap4c86@rpad (lambda (ap4d07@str ap4d08@pad ap4d09@n) (let ((ap4d0d@rest (- ap4d09@n (string-length (format '"~a" ap4d07@str))))) (let ap4d13@loop ((ap4d0f@rest ap4d0d@rest) (ap4d10@ret (format '"~a" ap4d07@str))) (if (<= ap4d0f@rest '0) ap4d10@ret (ap4d13@loop (- ap4d0f@rest '1) (string-append ap4d10@ret ap4d08@pad))))))) (set! ap4de8@ap4c86@rpad ap4c86@rpad) (set! ap4c88@condition-printer/p (lambda (ap4d15@e ap4d16@port) (letrec* ((ap4d1a@max-condition-len (apply max (map (lambda (ap4d2b@c) (string-length (symbol->string (record-type-name (record-rtd ap4d2b@c))))) (simple-conditions ap4d15@e))))) (begin (display '" Condition components:\n" ap4d16@port) (ap4c84@for-each-with-index (lambda (ap4d1b@i ap4d1c@x) (let ((ap4d1f@rtd (record-rtd ap4d1c@x)) (ap4d20@fields-alist (ap4c8a@record->field-alist ap4d1c@x))) (begin (format ap4d16@port '" ~d. ~a" ap4d1b@i (ap4c86@rpad (symbol->string (record-type-name ap4d1f@rtd)) '" " ap4d1a@max-condition-len)) (if (null? ap4d20@fields-alist) (newline ap4d16@port) (void)) (let ap4d27@loop ((ap4d23@first '#t) (ap4d24@fields-alist ap4d20@fields-alist)) (if (null? ap4d24@fields-alist) '() (let ((ap4d29@field (car ap4d24@fields-alist))) (begin (if (not ap4d23@first) (display (ap4c86@rpad '"" '" " (+ '4 ap4d1a@max-condition-len)) ap4d16@port) (void)) (display '"       " ap4d16@port) (display (car ap4d29@field) ap4d16@port) (display '": " ap4d16@port) (write (cdr ap4d29@field) ap4d16@port) (newline ap4d16@port) (ap4d27@loop '#f (cdr ap4d24@fields-alist))))))))) (simple-conditions ap4d15@e)))))) (set! ap4de9@ap4c88@condition-printer/p ap4c88@condition-printer/p) (set! ap4c8a@record->field-alist (lambda (ap4d2d@r) (letrec* ((ap4d30@ref (lambda (ap4d3b@rtd ap4d3c@i ap4d3d@x) (let ((ap4d41@val ((record-accessor ap4d3b@rtd ap4d3c@i) ap4d3d@x))) (if (symbol? ap4d41@val) (ungensym ap4d41@val) ap4d41@val))))) (let ap4d35@loop ((ap4d31@ret '()) (ap4d32@rtd (record-rtd ap4d2d@r))) (if ap4d32@rtd (ap4d35@loop (append ap4d31@ret (ap4c8c@map-with-index (lambda (ap4d37@i ap4d38@field) (cons ap4d38@field (ap4d30@ref ap4d32@rtd ap4d37@i ap4d2d@r))) (vector->list (record-type-field-names ap4d32@rtd)))) (record-type-parent ap4d32@rtd)) ap4d31@ret))))) (set! ap4dea@ap4c8a@record->field-alist ap4c8a@record->field-alist) (set! ap4c8c@map-with-index (lambda (ap4d43@proc ap4d44@lst) (let ap4d4d@loop ((ap4d47@i '0) (ap4d48@lst ap4d44@lst) (ap4d49@ret '())) (if (null? ap4d48@lst) (reverse ap4d49@ret) (ap4d4d@loop (+ ap4d47@i '1) (cdr ap4d48@lst) (cons (ap4d43@proc ap4d47@i (car ap4d48@lst)) ap4d49@ret)))))) (set! ap4deb@ap4c8c@map-with-index ap4c8c@map-with-index) (set! ap4c8e@repl (lambda ap4d4f@x (letrec* ((ap4d52@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (ap4d55@ap4d53) (lambda () (with-exception-handler (lambda (ap4d57@e) ((call/cc (lambda (ap4d59@ap4d54) (ap4d55@ap4d53 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? ap4d57@e) (ap4c88@condition-printer/p ap4d57@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" ap4d57@e))) (ap4d59@ap4d54 (lambda () (raise-continuable ap4d57@e)))))))))) (lambda () (let ap4d5f@loop ((ap4d5b@line (get-line (current-input-port))) (ap4d5c@accum '"")) (letrec* ((ap4d62@parentheses-ok? (lambda (ap4d6d@text) (let ap4d75@loop ((ap4d6f@chars (string->list ap4d6d@text)) (ap4d70@p0 '0) (ap4d71@p1 '0)) (if (null? ap4d6f@chars) (= '0 ap4d70@p0 ap4d71@p1) (let ((ap4d77@t (car ap4d6f@chars))) (if (memv ap4d77@t '(#\()) (ap4d75@loop (cdr ap4d6f@chars) (+ ap4d70@p0 '1) ap4d71@p1) (if (memv ap4d77@t '(#\))) (ap4d75@loop (cdr ap4d6f@chars) (- ap4d70@p0 '1) ap4d71@p1) (if (memv ap4d77@t '(#\[)) (ap4d75@loop (cdr ap4d6f@chars) ap4d70@p0 (+ ap4d71@p1 '1)) (if (memv ap4d77@t '(#\])) (ap4d75@loop (cdr ap4d6f@chars) ap4d70@p0 (- ap4d71@p1 '1)) (ap4d75@loop (cdr ap4d6f@chars) ap4d70@p0 ap4d71@p1)))))))))) (ap4d64@eval-string-print (lambda (ap4d67@text) (if (not (or (string=? '"\n" ap4d67@text) (= '0 (string-length ap4d67@text)))) (call-with-values (lambda () (ap4c9c@eval-top-level (call-with-port (open-string-input-port ap4d67@text) read))) (lambda ap4d69@out* (for-each (lambda (ap4d6b@out) (begin (write ap4d6b@out) (newline))) ap4d69@out*))) (void))))) (if (eof-object? ap4d5b@line) (begin (ap4d64@eval-string-print ap4d5c@accum) (exit)) (let ((ap4d65@current (string-append ap4d5c@accum ap4d5b@line))) (if (ap4d62@parentheses-ok? ap4d65@current) (ap4d64@eval-string-print ap4d65@current) (ap4d5f@loop (get-line (current-input-port)) ap4d65@current)))))))))))) (newline) (ap4d52@rec))))) (ap4d52@rec)))) (set! ap4dec@ap4c8e@repl ap4c8e@repl) (set! ap4c90@trace-printer (ap2a42@ap2920@make-parameter write)) (set! ap4ded@ap4c90@trace-printer ap4c90@trace-printer) (set! ap4c92@command-line (ap2a42@ap2920@make-parameter (get-command-line))) (set! ap4dee@ap4c92@command-line ap4c92@command-line) (set! ap4c94@local-library-path (lambda (ap4d79@filename) (ap2cfc@ap2b38@library-path))) (set! ap4def@ap4c94@local-library-path ap4c94@local-library-path) (set! ap4c96@load/args (lambda (ap4d7b@filename . ap4d7d@args) (begin (apply ap4ca6@load-r6rs-top-level ap4d7b@filename 'load ap4d7d@args) (void)))) (set! ap4df0@ap4c96@load/args ap4c96@load/args) (set! ap4c98@load (lambda (ap4d7f@filename) (begin (apply ap4ca6@load-r6rs-top-level ap4d7f@filename 'load (ap4c92@command-line)) (void)))) (set! ap4df1@ap4c98@load ap4c98@load) (set! ap4c9a@ironscheme-build (lambda () (ap4c98@load '"ironscheme-buildscript.ss"))) (set! ap4df2@ap4c9a@ironscheme-build ap4c9a@ironscheme-build) (set! ap4c9c@eval-top-level (lambda (ap4d81@x) (ap4c59@ap31b9@eval ap4d81@x (ap4c70@ap31e7@interaction-environment)))) (set! ap4df3@ap4c9c@eval-top-level ap4c9c@eval-top-level) (set! ap4c9e@compile-system-libraries (lambda () (ap4c9c@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! ap4df4@ap4c9e@compile-system-libraries ap4c9e@compile-system-libraries) (set! ap4ca0@compile (lambda (ap4d83@filename) (ap4ca6@load-r6rs-top-level ap4d83@filename 'compile))) (set! ap4df5@ap4ca0@compile ap4ca0@compile) (set! ap4ca2@compile->closure (lambda (ap4d85@filename) (ap4ca6@load-r6rs-top-level ap4d85@filename 'closure))) (set! ap4df6@ap4ca2@compile->closure ap4ca2@compile->closure) (set! ap4ca4@pre-compile-r6rs-file (lambda (ap4d87@filename) (ap4ca6@load-r6rs-top-level ap4d87@filename 'compile))) (set! ap4df7@ap4ca4@pre-compile-r6rs-file ap4ca4@pre-compile-r6rs-file) (set! ap4ca6@load-r6rs-top-level (lambda (ap4d89@filename ap4d8a@how . ap4d8d@args) (begin (ap2cfc@ap2b38@library-path (ap4c94@local-library-path ap4d89@filename)) (let ((ap4d8f@x* (with-input-from-file ap4d89@filename (lambda () (let ap4d91@f () (let ((ap4d93@x (ap2a34@ap2904@read-annotated))) (if (eof-object? ap4d93@x) '() (cons ap4d93@x (ap4d91@f))))))))) (let ((ap4d95@t ap4d8a@how)) (if (memv ap4d95@t '(closure)) (ap4c6f@ap31e5@pre-compile-r6rs-top-level ap4d8f@x*) (if (memv ap4d95@t '(load)) (begin (ap4c92@command-line (cons ap4d89@filename (car ap4d8d@args))) (ap2a43@ap2922@mosh-cache-dir (create-mosh-cache-dir)) (if (ap2a43@ap2922@mosh-cache-dir) (gensym-prefix-set! (ap4cac@prefix-inc! (string-append (ap2a43@ap2922@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ap4d97@file) ((call/cc (lambda (ap4d9b@ap4d99) (lambda () (with-exception-handler (lambda (ap4d9d@c) ((call/cc (lambda (ap4d9f@ap4d9a) (ap4d9b@ap4d99 (lambda () (if '#t '#t (ap4d9f@ap4d9a (lambda () (raise-continuable ap4d9d@c)))))))))) (lambda () (delete-file (string-append (ap2a43@ap2922@mosh-cache-dir) '"/" ap4d97@file))))))))) (directory-list (ap2a43@ap2922@mosh-cache-dir))) (void)) (let ((ap4da1@compiled (ap4c6e@ap31e3@compile-r6rs-top-level ap4d8f@x*))) (begin (if (and (ap2a43@ap2922@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ap2d00@ap2b40@serialize-all ap2a3d@ap2916@serialize-library ap2a99@ap2a52@compile-core-expr) (void)) (ap4da1@compiled)))) (if (memv ap4d95@t '(compile)) (begin (ap4c6e@ap31e3@compile-r6rs-top-level ap4d8f@x*) (ap2d00@ap2b40@serialize-all ap2a3d@ap2916@serialize-library ap2a99@ap2a52@compile-core-expr)) (if '#f '#f (void)))))))))) (set! ap4df8@ap4ca6@load-r6rs-top-level ap4ca6@load-r6rs-top-level) (set! ap4ca8@load-r6rs-top-level-sexp (lambda (ap4da3@import-spec ap4da4@thunk) (let ((ap4daf@ap4da8 ap2cfc@ap2b38@library-path) (ap4db0@ap4daa ap2a43@ap2922@mosh-cache-dir) (ap4db1@ap4dac (ap4c94@local-library-path '"")) (ap4db2@ap4dae (create-mosh-cache-dir))) (let ((ap4db7@swap (lambda () (begin (let ((ap4db9@t (ap4daf@ap4da8))) (begin (ap4daf@ap4da8 ap4db1@ap4dac) (set! ap4db1@ap4dac ap4db9@t))) (let ((ap4dbb@t (ap4db0@ap4daa))) (begin (ap4db0@ap4daa ap4db2@ap4dae) (set! ap4db2@ap4dae ap4dbb@t))))))) (dynamic-wind ap4db7@swap (lambda () (begin (if (ap2a43@ap2922@mosh-cache-dir) (gensym-prefix-set! (ap4cac@prefix-inc! (string-append (ap2a43@ap2922@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((ap4dc1@ap4dbe ap4c92@command-line) (ap4dc2@ap4dc0 '())) (let ((ap4dc5@swap (lambda () (let ((ap4dc7@t (ap4dc1@ap4dbe))) (begin (ap4dc1@ap4dbe ap4dc2@ap4dc0) (set! ap4dc2@ap4dc0 ap4dc7@t)))))) (dynamic-wind ap4dc5@swap (lambda () ((ap4c6e@ap31e3@compile-r6rs-top-level (list (cons 'import ap4da3@import-spec) (list ap4da4@thunk))))) ap4dc5@swap))))) ap4db7@swap))))) (set! ap4df9@ap4ca8@load-r6rs-top-level-sexp ap4ca8@load-r6rs-top-level-sexp) (set! ap4caa@prefix-inc (lambda (ap4dc9@prefix-string) (let ((ap4dcb@prefix (symbol->string ap4dc9@prefix-string))) (let ((ap4dcd@len (string-length ap4dcb@prefix))) (let ap4dd5@loop ((ap4dcf@i (- ap4dcd@len '1)) (ap4dd0@carry? '#t) (ap4dd1@accum '())) (if (< ap4dcf@i '0) (string->symbol (list->string (if ap4dd0@carry? (cons '#\a ap4dd1@accum) ap4dd1@accum))) (if ap4dd0@carry? (let ((ap4dd7@next-integer (+ '1 (char->integer (string-ref ap4dcb@prefix ap4dcf@i))))) (if (= ap4dd7@next-integer '123) (ap4dd5@loop (- ap4dcf@i '1) '#f (cons '#\A ap4dd1@accum)) (if (= ap4dd7@next-integer '91) (ap4dd5@loop (- ap4dcf@i '1) '#t (cons '#\a ap4dd1@accum)) (ap4dd5@loop (- ap4dcf@i '1) '#f (cons (integer->char ap4dd7@next-integer) ap4dd1@accum))))) (ap4dd5@loop (- ap4dcf@i '1) '#f (cons (string-ref ap4dcb@prefix ap4dcf@i) ap4dd1@accum))))))))) (set! ap4dfa@ap4caa@prefix-inc ap4caa@prefix-inc) (set! ap4cac@prefix-inc! (lambda (ap4dd9@file) (begin (if (not (file-exists? ap4dd9@file)) (call-with-output-file ap4dd9@file (lambda (ap4ddb@port) (write 'd ap4ddb@port))) (void)) (let ((ap4ddd@prefix (call-with-input-file ap4dd9@file read))) (if (main-vm?) (let ((ap4ddf@next-prefix (ap4caa@prefix-inc ap4ddd@prefix))) (begin (call-with-port (open-file-output-port ap4dd9@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (ap4de1@port) (write ap4ddf@next-prefix ap4de1@port))) ap4ddd@prefix)) ap4ddd@prefix))))) (set! ap4dfb@ap4cac@prefix-inc! ap4cac@prefix-inc!) (begin (ap2d01@ap2b42@current-precompiled-library-loader ap2a3e@ap2918@load-serialized-library) (set-symbol-value! 'load ap4c98@load) (set-symbol-value! 'pre-compile-r6rs-file ap4ca4@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs ap4c9c@eval-top-level) (set-symbol-value! 'int-env-syms ap4c50@ap31a7@interaction-environment-symbols) (set-symbol-value! 'expanded2core ap2a98@ap2a50@expanded->core) (set-symbol-value! 'trace-printer ap4c90@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (ap4cad@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list ap4cad@c))))) (ap4c82@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (ap4c82@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (ap4c80@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (ap4c80@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (ap4c80@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((ap4caf@prefix (lambda (ap4cb1@ext ap4cb2@ls) (append (map (lambda (ap4cb5@x) (string-append ap4cb1@ext ap4cb5@x)) ap4cb2@ls) ap4cb2@ls)))) (ap2cfd@ap2b3a@library-extensions (ap4caf@prefix '".mosh" (ap2cfd@ap2b3a@library-extensions)))) (current-exception-handler (lambda (ap4cb7@c) (begin (if (condition? ap4cb7@c) (ap4c88@condition-printer/p ap4cb7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" ap4cb7@c)) ap4cb7@c))) (if ((call/cc (lambda (ap4cbb@ap4cb9) (lambda () (with-exception-handler (lambda (ap4cbd@c) ((call/cc (lambda (ap4cbf@ap4cba) (ap4cbb@ap4cb9 (lambda () (if '#t '#f (ap4cbf@ap4cba (lambda () (raise-continuable ap4cbd@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (ap4ca8@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (ap4c92@command-line)) (let ((ap4cc9@ap4cc2 ap4c92@command-line) (ap4cca@ap4cc4 ap2a43@ap2922@mosh-cache-dir) (ap4ccb@ap4cc6 '()) (ap4ccc@ap4cc8 (create-mosh-cache-dir))) (let ((ap4cd1@swap (lambda () (begin (let ((ap4cd3@t (ap4cc9@ap4cc2))) (begin (ap4cc9@ap4cc2 ap4ccb@ap4cc6) (set! ap4ccb@ap4cc6 ap4cd3@t))) (let ((ap4cd5@t (ap4cca@ap4cc4))) (begin (ap4cca@ap4cc4 ap4ccc@ap4cc8) (set! ap4ccc@ap4cc8 ap4cd5@t))))))) (dynamic-wind ap4cd1@swap (lambda () (begin (if (ap2a43@ap2922@mosh-cache-dir) (gensym-prefix-set! (ap4cac@prefix-inc! (string-append (ap2a43@ap2922@mosh-cache-dir) '"/prefix.txt"))) (void)) (ap4c8e@repl))) ap4cd1@swap))) (begin (ap2cfc@ap2b38@library-path (ap4c94@local-library-path (car (ap4c92@command-line)))) (set! ap4c7e@x* (with-input-from-file (car (ap4c92@command-line)) (lambda () (let ap4cd7@f () (let ((ap4cd9@x (ap2a34@ap2904@read-annotated))) (if (eof-object? ap4cd9@x) '() (cons ap4cd9@x (ap4cd7@f)))))))) (ap4c92@command-line (cons (car (ap4c92@command-line)) (cdr (ap4c92@command-line)))) (ap2a43@ap2922@mosh-cache-dir (create-mosh-cache-dir)) (if (ap2a43@ap2922@mosh-cache-dir) (gensym-prefix-set! (ap4cac@prefix-inc! (string-append (ap2a43@ap2922@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ap4cdb@file) ((call/cc (lambda (ap4cdf@ap4cdd) (lambda () (with-exception-handler (lambda (ap4ce1@c) ((call/cc (lambda (ap4ce3@ap4cde) (ap4cdf@ap4cdd (lambda () (if '#t '#t (ap4ce3@ap4cde (lambda () (raise-continuable ap4ce1@c)))))))))) (lambda () (delete-file (string-append (ap2a43@ap2922@mosh-cache-dir) '"/" ap4cdb@file))))))))) (directory-list (ap2a43@ap2922@mosh-cache-dir))) (void)) (let ((ap4ce5@compiled (ap4c6e@ap31e3@compile-r6rs-top-level ap4c7e@x*))) (begin (if (and (ap2a43@ap2922@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ap2d00@ap2b40@serialize-all ap2a3d@ap2916@serialize-library ap2a99@ap2a52@compile-core-expr) (void)) (ap4ce5@compiled))))))))
