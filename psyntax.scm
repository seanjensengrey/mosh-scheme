;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! k28cc@library-file-path->cache-path (unspecified)) (set! k28ce@read-annotated (unspecified)) (set! k28d0@annotation-stripped (unspecified)) (set! k28d2@annotation? (unspecified)) (set! k28d4@annotation-source (unspecified)) (set! k28d6@annotation-expression (unspecified)) (set! k28d8@scm->fasl (unspecified)) (set! k28da@fasl-save (unspecified)) (set! k28dc@fasl-load (unspecified)) (set! k28de@verbose? (unspecified)) (set! k28e0@serialize-library (unspecified)) (set! k28e2@load-serialized-library (unspecified)) (set! k28e4@make-record-printer (unspecified)) (set! k28e6@compile-core (unspecified)) (set! k28e8@read-library-source-file (unspecified)) (set! k28ea@make-parameter (unspecified)) (set! k28ec@mosh-cache-dir (unspecified)) (set! k2982@file-options-spec (unspecified)) (set! k28cc@library-file-path->cache-path (lambda (k2983@x) (call-with-values (lambda () (open-string-output-port)) (lambda (k2989@k2986 k298a@k2988) (let ((k298d@extract k298a@k2988) (k298e@p k2989@k2986)) (letrec* ((k2992@display-hex (lambda (k299b@n) (if (<= '0 k299b@n '9) (display k299b@n k298e@p) (display (integer->char (+ (char->integer '#\a) (- k299b@n '10))) k298e@p))))) (begin (let k2995@f ((k2993@ls (string-split k2983@x '#\/))) (if (not (null? k2993@ls)) (begin (display '"_" k298e@p) (for-each (lambda (k2997@c) (if (or (char<=? '#\a k2997@c '#\z) (char<=? '#\A k2997@c '#\Z) (char<=? '#\0 k2997@c '#\9) (memv k2997@c '(#\- #\. #\_ #\~))) (display k2997@c k298e@p) (begin (display '"%" k298e@p) (let ((k2999@n (char->integer k2997@c))) (begin (k2992@display-hex (quotient k2999@n '16)) (k2992@display-hex (remainder k2999@n '16))))))) (string->list (car k2993@ls))) (k2995@f (cdr k2993@ls))) (void))) (k298d@extract)))))))) (set! k29fd@k28cc@library-file-path->cache-path k28cc@library-file-path->cache-path) (set! k28ce@read-annotated read) (set! k29fe@k28ce@read-annotated k28ce@read-annotated) (set! k28d0@annotation-stripped (lambda (k299d@x) (k28d6@annotation-expression k299d@x))) (set! k29ff@k28d0@annotation-stripped k28d0@annotation-stripped) (set! k28d2@annotation? (lambda (k299f@x) (source-info k299f@x))) (set! k2a00@k28d2@annotation? k28d2@annotation?) (set! k28d4@annotation-source (lambda (k29a1@x) (source-info k29a1@x))) (set! k2a01@k28d4@annotation-source k28d4@annotation-source) (set! k28d6@annotation-expression (lambda (k29a3@x) (if (pair? k29a3@x) (cons (car k29a3@x) (cdr k29a3@x)) (if (procedure? k29a3@x) (set-source-info! k29a3@x '#f) k29a3@x)))) (set! k2a02@k28d6@annotation-expression k28d6@annotation-expression) (set! k28d8@scm->fasl (lambda (k29a5@filename) (string-append (k28ec@mosh-cache-dir) '"/" (k28cc@library-file-path->cache-path k29a5@filename) '".mosh-fasl"))) (set! k2a03@k28d8@scm->fasl k28d8@scm->fasl) (set! k28da@fasl-save (lambda (k29a7@filename k29a8@obj) (call-with-port (open-file-output-port k29a7@filename) (lambda (k29ab@port) ((symbol-value 'fasl-write!) k29a8@obj k29ab@port))))) (set! k2a04@k28da@fasl-save k28da@fasl-save) (set! k28dc@fasl-load (lambda (k29ad@filename) (call-with-port (open-file-input-port k29ad@filename) (symbol-value 'fasl-read!)))) (set! k2a05@k28dc@fasl-load k28dc@fasl-load) (set! k28de@verbose? (symbol-value '%verbose)) (set! k2a06@k28de@verbose? k28de@verbose?) (set! k28e0@serialize-library (lambda (k29af@filename k29b0@obj) (begin (if k28de@verbose? (format (current-error-port) '"serialize-library ~a\n..." k29af@filename) (void)) (let ((k29b3@expanded2core (symbol-value 'expanded2core))) (let ((k29b5@compile (symbol-value 'compile-w/o-halt))) (let ((k29b7@code k29b0@obj)) (let ((k29b9@pivot (cddddr (cddddr k29b7@code)))) (let ((k29bb@visit (k29b5@compile (k29b3@expanded2core (car k29b9@pivot))))) (begin (set-car! k29b9@pivot k29bb@visit) (let ((k29bd@pivot (cdr k29b9@pivot))) (let ((k29bf@invoke (k29b5@compile (k29b3@expanded2core (car k29bd@pivot))))) (set-car! k29bd@pivot k29bf@invoke))))))))) (let ((k29c1@fasl-file (k28d8@scm->fasl k29af@filename))) (begin (if (file-exists? k29c1@fasl-file) (delete-file k29c1@fasl-file) (void)) ((call/cc (lambda (k29c5@k29c3) (lambda () (with-exception-handler (lambda (k29c7@c) ((call/cc (lambda (k29c9@k29c4) (k29c5@k29c3 (lambda () (if '#t (begin (if k28de@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" k29af@filename) (void)) (if (file-exists? k29c1@fasl-file) (delete-file k29c1@fasl-file) (void)) '#f) (k29c9@k29c4 (lambda () (raise-continuable k29c7@c)))))))))) (lambda () (k28da@fasl-save k29c1@fasl-file k29b0@obj)))))))))))) (set! k2a07@k28e0@serialize-library k28e0@serialize-library) (set! k28e2@load-serialized-library (lambda (k29cb@filename k29cc@obj) (and (k28ec@mosh-cache-dir) (let ((k29cf@fasl-file (k28d8@scm->fasl k29cb@filename))) (if (and (file-exists? k29cf@fasl-file) ((symbol-value 'file-newer?) k29cf@fasl-file k29cb@filename)) (let ((k29d1@expanded2core (symbol-value 'expanded2core))) (let ((k29d3@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((k29d5@code (k28dc@fasl-load k29cf@fasl-file))) (let ((k29d7@pivot (cddddr (cddddr k29d5@code)))) (let ((k29d9@visit (car k29d7@pivot))) (let ((k29db@visit-proc (lambda () (k29d3@eval-compiled-core k29d9@visit)))) (begin (set-car! k29d7@pivot k29db@visit-proc) (let ((k29dd@pivot (cdr k29d7@pivot))) (let ((k29df@invoke (car k29dd@pivot))) (begin (set-car! k29dd@pivot (lambda () (k29d3@eval-compiled-core k29df@invoke))) (apply k29cc@obj k29d5@code))))))))))) '#f))))) (set! k2a08@k28e2@load-serialized-library k28e2@load-serialized-library) (set! k28e4@make-record-printer (lambda (k29e1@name k29e2@printer) (lambda k29e5@x (begin (display '"record printer") (for-each display k29e5@x))))) (set! k2a09@k28e4@make-record-printer k28e4@make-record-printer) (set! k28e6@compile-core (lambda k29e7@x (apply error 'comile-core '"not implementated" k29e7@x))) (set! k2a0a@k28e6@compile-core k28e6@compile-core) (set! k28e8@read-library-source-file (lambda (k29e9@file-name) (with-input-from-file k29e9@file-name k28ce@read-annotated))) (set! k2a0b@k28e8@read-library-source-file k28e8@read-library-source-file) (set! k28ea@make-parameter (lambda k29f9 (let ((k29fa (length k29f9))) (if (= k29fa '1) (apply (lambda (k29eb@x) (k28ea@make-parameter k29eb@x (lambda (k29ed@x) k29ed@x))) k29f9) (if (= k29fa '2) (apply (lambda (k29ef@x k29f0@fender) (let ((k29f3@x (k29f0@fender k29ef@x))) (lambda k29f7 (let ((k29f8 (length k29f7))) (if (= k29f8 '0) (apply (lambda () k29f3@x) k29f7) (if (= k29f8 '1) (apply (lambda (k29f5@v) (set! k29f3@x (k29f0@fender k29f5@v))) k29f7) (error 'apply '"invalid arg count"))))))) k29f9) (error 'apply '"invalid arg count")))))) (set! k2a0c@k28ea@make-parameter k28ea@make-parameter) (set! k28ec@mosh-cache-dir (k28ea@make-parameter '#f)) (set! k2a0d@k28ec@mosh-cache-dir k28ec@mosh-cache-dir) (set! k2982@file-options-spec (lambda (k29fb@x) k29fb@x)) (set! k2a0e@k2982@file-options-spec k2982@file-options-spec) (void))
(begin (set! k2a14@current-primitive-locations (unspecified)) (set! k2a16@mutable? (unspecified)) (set! k2a18@rewriter (unspecified)) (set! k2a1a@expanded->core (unspecified)) (set! k2a1c@compile-core-expr (unspecified)) (set! k2a1e@pretty-print (unspecified)) (set! k2a20@compile-core-expr-to-port (unspecified)) (set! k2a14@current-primitive-locations (k2a0c@k28ea@make-parameter (lambda (k2a21@x) '#f) (lambda (k2a23@p) k2a23@p))) (set! k2a5f@k2a14@current-primitive-locations k2a14@current-primitive-locations) (set! k2a16@mutable? (lambda (k2a25@x) (or (pair? k2a25@x) (vector? k2a25@x) (hashtable? k2a25@x)))) (set! k2a60@k2a16@mutable? k2a16@mutable?) (set! k2a18@rewriter (lambda (k2a27@quote-hack?) (letrec* ((k2a2a@f (lambda (k2a2b@x) (if (pair? k2a2b@x) (let ((k2a2d@t (car k2a2b@x))) (if (memv k2a2d@t '(quote)) (if (and k2a27@quote-hack? (k2a16@mutable? (cadr k2a2b@x))) (let ((k2a2f@g (gensym))) (begin (set-symbol-value! k2a2f@g (cadr k2a2b@x)) k2a2f@g)) k2a2b@x) (if (memv k2a2d@t '(case-lambda)) (cons 'case-lambda (map (lambda (k2a31@x) (cons (car k2a31@x) (map k2a2a@f (cdr k2a31@x)))) (cdr k2a2b@x))) (if (memv k2a2d@t '(lambda)) (cons* 'lambda (cadr k2a2b@x) (map k2a2a@f (cddr k2a2b@x))) (if (memv k2a2d@t '(letrec)) (let ((k2a33@bindings (cadr k2a2b@x)) (k2a34@body* (cddr k2a2b@x))) (let ((k2a37@lhs* (map car k2a33@bindings)) (k2a38@rhs* (map cadr k2a33@bindings))) (cons* 'letrec (map list k2a37@lhs* (map k2a2a@f k2a38@rhs*)) (map k2a2a@f k2a34@body*)))) (if (memv k2a2d@t '(letrec*)) (let ((k2a3b@bindings (cadr k2a2b@x)) (k2a3c@body* (cddr k2a2b@x))) (let ((k2a3f@lhs* (map car k2a3b@bindings)) (k2a40@rhs* (map cadr k2a3b@bindings))) (cons* 'letrec* (map list k2a3f@lhs* (map k2a2a@f k2a40@rhs*)) (map k2a2a@f k2a3c@body*)))) (if (memv k2a2d@t '(library-letrec*)) (let ((k2a43@name (cadr k2a2b@x)) (k2a44@x (cdr k2a2b@x))) (let ((k2a47@bindings (cadr k2a44@x)) (k2a48@body* (cddr k2a44@x))) (let ((k2a4b@lhs* (map car k2a47@bindings)) (k2a4c@lhs** (map cadr k2a47@bindings)) (k2a4d@rhs* (map caddr k2a47@bindings))) (cons* 'library-letrec* k2a43@name (map list k2a4b@lhs* k2a4c@lhs** (map k2a2a@f k2a4d@rhs*)) (map k2a2a@f k2a48@body*))))) (if (memv k2a2d@t '(begin)) (cons 'begin (map k2a2a@f (cdr k2a2b@x))) (if (memv k2a2d@t '(set!)) (list 'set! (cadr k2a2b@x) (k2a2a@f (caddr k2a2b@x))) (if (memv k2a2d@t '(primitive)) (let ((k2a51@op (cadr k2a2b@x))) (let ((k2a53@t ((k2a14@current-primitive-locations) k2a51@op))) (if k2a53@t ((lambda (k2a55@loc) k2a55@loc) k2a53@t) k2a51@op))) (if (memv k2a2d@t '(define)) k2a2b@x (if (list? k2a2b@x) (map k2a2a@f k2a2b@x) (error 'rewrite '"invalid form ~s ~s" k2a2b@x (list? k2a2b@x)))))))))))))) k2a2b@x)))) k2a2a@f))) (set! k2a61@k2a18@rewriter k2a18@rewriter) (set! k2a1a@expanded->core (lambda (k2a57@x) ((k2a18@rewriter '#f) k2a57@x))) (set! k2a62@k2a1a@expanded->core k2a1a@expanded->core) (set! k2a1c@compile-core-expr (lambda (k2a59@x) ((k2a18@rewriter '#f) k2a59@x))) (set! k2a63@k2a1c@compile-core-expr k2a1c@compile-core-expr) (set! k2a1e@pretty-print write) (set! k2a64@k2a1e@pretty-print k2a1e@pretty-print) (set! k2a20@compile-core-expr-to-port (lambda (k2a5b@x k2a5c@p) (k2a1e@pretty-print ((k2a18@rewriter '#f) k2a5b@x) k2a5c@p))) (set! k2a65@k2a20@compile-core-expr-to-port k2a20@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! k2ab4@make-collection (unspecified)) (set! k2ab6@current-library-collection (unspecified)) (set! k2ab8@rp (unspecified)) (set! k2ac2@library? (unspecified)) (set! k2ac4@library-id (unspecified)) (set! k2ac6@set-library-id! (unspecified)) (set! k2ac8@library-name (unspecified)) (set! k2aca@set-library-name! (unspecified)) (set! k2acc@library-version (unspecified)) (set! k2ace@set-library-version! (unspecified)) (set! k2ad0@library-imp* (unspecified)) (set! k2ad2@set-library-imp*! (unspecified)) (set! k2ad4@library-vis* (unspecified)) (set! k2ad6@set-library-vis*! (unspecified)) (set! k2ad8@library-inv* (unspecified)) (set! k2ada@set-library-inv*! (unspecified)) (set! k2adc@library-subst (unspecified)) (set! k2ade@set-library-subst! (unspecified)) (set! k2ae0@library-env (unspecified)) (set! k2ae2@set-library-env! (unspecified)) (set! k2ae4@library-visit-state (unspecified)) (set! k2ae6@set-library-visit-state! (unspecified)) (set! k2ae8@library-invoke-state (unspecified)) (set! k2aea@set-library-invoke-state! (unspecified)) (set! k2aec@library-visit-code (unspecified)) (set! k2aee@set-library-visit-code! (unspecified)) (set! k2af0@library-invoke-code (unspecified)) (set! k2af2@set-library-invoke-code! (unspecified)) (set! k2af4@library-visible? (unspecified)) (set! k2af6@set-library-visible?! (unspecified)) (set! k2af8@library-source-file-name (unspecified)) (set! k2afa@set-library-source-file-name! (unspecified)) (set! k2afc@dummy (unspecified)) (set! k2afe@find-dependencies (unspecified)) (set! k2b00@find-library-by (unspecified)) (set! k2b02@library-path (unspecified)) (set! k2b04@library-extensions (unspecified)) (set! k2b06@library-name->file-name (unspecified)) (set! k2b08@file-locator (unspecified)) (set! k2b0a@serialize-all (unspecified)) (set! k2b0c@current-precompiled-library-loader (unspecified)) (set! k2b0e@try-load-from-file (unspecified)) (set! k2b10@library-loader (unspecified)) (set! k2b12@current-library-expander (unspecified)) (set! k2b14@external-pending-libraries (unspecified)) (set! k2b16@find-external-library (unspecified)) (set! k2b18@find-library-by-name (unspecified)) (set! k2b1a@library-exists? (unspecified)) (set! k2b1c@find-library-by-spec/die (unspecified)) (set! k2b1e@label->binding-table (unspecified)) (set! k2b20@install-library-record (unspecified)) (set! k2b22@install-library (unspecified)) (set! k2b24@imported-label->binding (unspecified)) (set! k2b26@invoke-library (unspecified)) (set! k2b28@visit-library (unspecified)) (set! k2b2a@invoke-library-by-spec (unspecified)) (set! k2b2c@installed-libraries (unspecified)) (set! k2b2e@library-spec (unspecified)) (set! k2ab4@make-collection (lambda () (let ((k2b2f@set '())) (letrec* ((k2b32@set-cons (lambda (k2b37@x k2b38@ls) (if (memq k2b37@x k2b38@ls) k2b38@ls (cons k2b37@x k2b38@ls))))) (lambda k2b35 (let ((k2b36 (length k2b35))) (if (= k2b36 '0) (apply (lambda () k2b2f@set) k2b35) (if (= k2b36 '1) (apply (lambda (k2b33@x) (set! k2b2f@set (k2b32@set-cons k2b33@x k2b2f@set))) k2b35) (error 'apply '"invalid arg count"))))))))) (set! k2ca3@k2ab4@make-collection k2ab4@make-collection) (set! k2ab6@current-library-collection (k2a0c@k28ea@make-parameter (k2ab4@make-collection) (lambda (k2b3b@x) (begin (if (not (procedure? k2b3b@x)) (assertion-violation 'current-library-collection '"not a procedure" k2b3b@x) (void)) k2b3b@x)))) (set! k2ca4@k2ab6@current-library-collection k2ab6@current-library-collection) (set! k2ab8@rp (k2a09@k28e4@make-record-printer 'library (lambda (k2b3d@x k2b3e@p k2b3f@wr) (begin (if (not (k2ac2@library? k2b3d@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (k2acc@library-version k2b3d@x)) (k2ac8@library-name k2b3d@x) (append (k2ac8@library-name k2b3d@x) (list (k2acc@library-version k2b3d@x))))) k2b3e@p))))) (set! k2ca5@k2ab8@rp k2ab8@rp) (set! k2ac2@library? (lambda (k2b43@x) (and (simple-struct? k2b43@x) (eq? (simple-struct-name k2b43@x) 'library)))) (set! k2ca6@k2ac2@library? k2ac2@library?) (set! k2ac4@library-id (lambda (k2b45@x) (simple-struct-ref k2b45@x '0))) (set! k2ca7@k2ac4@library-id k2ac4@library-id) (set! k2ac6@set-library-id! (lambda (k2b47@x k2b48@val) (simple-struct-set! k2b47@x '0 k2b48@val))) (set! k2ca8@k2ac6@set-library-id! k2ac6@set-library-id!) (set! k2ac8@library-name (lambda (k2b4b@x) (simple-struct-ref k2b4b@x '1))) (set! k2ca9@k2ac8@library-name k2ac8@library-name) (set! k2aca@set-library-name! (lambda (k2b4d@x k2b4e@val) (simple-struct-set! k2b4d@x '1 k2b4e@val))) (set! k2caa@k2aca@set-library-name! k2aca@set-library-name!) (set! k2acc@library-version (lambda (k2b51@x) (simple-struct-ref k2b51@x '2))) (set! k2cab@k2acc@library-version k2acc@library-version) (set! k2ace@set-library-version! (lambda (k2b53@x k2b54@val) (simple-struct-set! k2b53@x '2 k2b54@val))) (set! k2cac@k2ace@set-library-version! k2ace@set-library-version!) (set! k2ad0@library-imp* (lambda (k2b57@x) (simple-struct-ref k2b57@x '3))) (set! k2cad@k2ad0@library-imp* k2ad0@library-imp*) (set! k2ad2@set-library-imp*! (lambda (k2b59@x k2b5a@val) (simple-struct-set! k2b59@x '3 k2b5a@val))) (set! k2cae@k2ad2@set-library-imp*! k2ad2@set-library-imp*!) (set! k2ad4@library-vis* (lambda (k2b5d@x) (simple-struct-ref k2b5d@x '4))) (set! k2caf@k2ad4@library-vis* k2ad4@library-vis*) (set! k2ad6@set-library-vis*! (lambda (k2b5f@x k2b60@val) (simple-struct-set! k2b5f@x '4 k2b60@val))) (set! k2cb0@k2ad6@set-library-vis*! k2ad6@set-library-vis*!) (set! k2ad8@library-inv* (lambda (k2b63@x) (simple-struct-ref k2b63@x '5))) (set! k2cb1@k2ad8@library-inv* k2ad8@library-inv*) (set! k2ada@set-library-inv*! (lambda (k2b65@x k2b66@val) (simple-struct-set! k2b65@x '5 k2b66@val))) (set! k2cb2@k2ada@set-library-inv*! k2ada@set-library-inv*!) (set! k2adc@library-subst (lambda (k2b69@x) (simple-struct-ref k2b69@x '6))) (set! k2cb3@k2adc@library-subst k2adc@library-subst) (set! k2ade@set-library-subst! (lambda (k2b6b@x k2b6c@val) (simple-struct-set! k2b6b@x '6 k2b6c@val))) (set! k2cb4@k2ade@set-library-subst! k2ade@set-library-subst!) (set! k2ae0@library-env (lambda (k2b6f@x) (simple-struct-ref k2b6f@x '7))) (set! k2cb5@k2ae0@library-env k2ae0@library-env) (set! k2ae2@set-library-env! (lambda (k2b71@x k2b72@val) (simple-struct-set! k2b71@x '7 k2b72@val))) (set! k2cb6@k2ae2@set-library-env! k2ae2@set-library-env!) (set! k2ae4@library-visit-state (lambda (k2b75@x) (simple-struct-ref k2b75@x '8))) (set! k2cb7@k2ae4@library-visit-state k2ae4@library-visit-state) (set! k2ae6@set-library-visit-state! (lambda (k2b77@x k2b78@val) (simple-struct-set! k2b77@x '8 k2b78@val))) (set! k2cb8@k2ae6@set-library-visit-state! k2ae6@set-library-visit-state!) (set! k2ae8@library-invoke-state (lambda (k2b7b@x) (simple-struct-ref k2b7b@x '9))) (set! k2cb9@k2ae8@library-invoke-state k2ae8@library-invoke-state) (set! k2aea@set-library-invoke-state! (lambda (k2b7d@x k2b7e@val) (simple-struct-set! k2b7d@x '9 k2b7e@val))) (set! k2cba@k2aea@set-library-invoke-state! k2aea@set-library-invoke-state!) (set! k2aec@library-visit-code (lambda (k2b81@x) (simple-struct-ref k2b81@x '10))) (set! k2cbb@k2aec@library-visit-code k2aec@library-visit-code) (set! k2aee@set-library-visit-code! (lambda (k2b83@x k2b84@val) (simple-struct-set! k2b83@x '10 k2b84@val))) (set! k2cbc@k2aee@set-library-visit-code! k2aee@set-library-visit-code!) (set! k2af0@library-invoke-code (lambda (k2b87@x) (simple-struct-ref k2b87@x '11))) (set! k2cbd@k2af0@library-invoke-code k2af0@library-invoke-code) (set! k2af2@set-library-invoke-code! (lambda (k2b89@x k2b8a@val) (simple-struct-set! k2b89@x '11 k2b8a@val))) (set! k2cbe@k2af2@set-library-invoke-code! k2af2@set-library-invoke-code!) (set! k2af4@library-visible? (lambda (k2b8d@x) (simple-struct-ref k2b8d@x '12))) (set! k2cbf@k2af4@library-visible? k2af4@library-visible?) (set! k2af6@set-library-visible?! (lambda (k2b8f@x k2b90@val) (simple-struct-set! k2b8f@x '12 k2b90@val))) (set! k2cc0@k2af6@set-library-visible?! k2af6@set-library-visible?!) (set! k2af8@library-source-file-name (lambda (k2b93@x) (simple-struct-ref k2b93@x '13))) (set! k2cc1@k2af8@library-source-file-name k2af8@library-source-file-name) (set! k2afa@set-library-source-file-name! (lambda (k2b95@x k2b96@val) (simple-struct-set! k2b95@x '13 k2b96@val))) (set! k2cc2@k2afa@set-library-source-file-name! k2afa@set-library-source-file-name!) (set! k2afc@dummy '3) (set! k2cc3@k2afc@dummy k2afc@dummy) (set! k2afe@find-dependencies (lambda (k2b99@ls) (if (null? k2b99@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! k2cc4@k2afe@find-dependencies k2afe@find-dependencies) (set! k2b00@find-library-by (lambda (k2b9b@pred) (let k2b9f@f ((k2b9d@ls ((k2ab6@current-library-collection)))) (if (null? k2b9d@ls) '#f (if (k2b9b@pred (car k2b9d@ls)) (car k2b9d@ls) (k2b9f@f (cdr k2b9d@ls))))))) (set! k2cc5@k2b00@find-library-by k2b00@find-library-by) (set! k2b02@library-path (k2a0c@k28ea@make-parameter '(".") (lambda (k2ba1@x) (if (and (list? k2ba1@x) (for-all string? k2ba1@x)) (map (lambda (k2ba3@x) k2ba3@x) k2ba1@x) (assertion-violation 'library-path '"not a list of strings" k2ba1@x))))) (set! k2cc6@k2b02@library-path k2b02@library-path) (set! k2b04@library-extensions (k2a0c@k28ea@make-parameter '(".sls" ".ss" ".scm") (lambda (k2ba5@x) (if (and (list? k2ba5@x) (for-all string? k2ba5@x)) (map (lambda (k2ba7@x) k2ba7@x) k2ba5@x) (assertion-violation 'library-extensions '"not a list of strings" k2ba5@x))))) (set! k2cc7@k2b04@library-extensions k2b04@library-extensions) (set! k2b06@library-name->file-name (lambda (k2ba9@x) (call-with-values (lambda () (open-string-output-port)) (lambda (k2baf@k2bac k2bb0@k2bae) (let ((k2bb3@extract k2bb0@k2bae) (k2bb4@p k2baf@k2bac)) (letrec* ((k2bb8@display-hex (lambda (k2bc1@n) (if (<= '0 k2bc1@n '9) (display k2bc1@n k2bb4@p) (display (integer->char (+ (char->integer '#\a) (- k2bc1@n '10))) k2bb4@p))))) (begin (let k2bbb@f ((k2bb9@ls k2ba9@x)) (if (not (null? k2bb9@ls)) (begin (display '"/" k2bb4@p) (for-each (lambda (k2bbd@c) (if (or (char<=? '#\a k2bbd@c '#\z) (char<=? '#\A k2bbd@c '#\Z) (char<=? '#\0 k2bbd@c '#\9) (memv k2bbd@c '(#\- #\. #\_ #\~))) (display k2bbd@c k2bb4@p) (begin (display '"%" k2bb4@p) (let ((k2bbf@n (char->integer k2bbd@c))) (begin (k2bb8@display-hex (quotient k2bbf@n '16)) (k2bb8@display-hex (remainder k2bbf@n '16))))))) (string->list (symbol->string (car k2bb9@ls)))) (k2bbb@f (cdr k2bb9@ls))) (void))) (k2bb3@extract)))))))) (set! k2cc8@k2b06@library-name->file-name k2b06@library-name->file-name) (set! k2b08@file-locator (k2a0c@k28ea@make-parameter (lambda (k2bc3@x) (let ((k2bc5@str (k2b06@library-name->file-name k2bc3@x))) (let k2bcd@f ((k2bc7@ls (k2b02@library-path)) (k2bc8@exts (k2b04@library-extensions)) (k2bc9@failed-list '())) (if (null? k2bc7@ls) (letrec* ((k2bd7@k2bd2 (make-record-type-descriptor '&library-resolution &condition-rtd 'k2bd5 '#f '#f '#((immutable library) (immutable files)))) (k2bd9@k2bd4 '#f) (k2bdb@k2bd3 (make-record-constructor-descriptor k2bd7@k2bd2 &condition-rcd k2bd9@k2bd4)) (k2bde@k2bd1 (record-predicate k2bd7@k2bd2)) (k2be0@make-library-resolution-condition (record-constructor k2bdb@k2bd3)) (k2be2@k2bcf (record-accessor k2bd7@k2bd2 '0)) (k2be4@k2bd0 (record-accessor k2bd7@k2bd2 '1)) (k2be6@library-resolution-condition? (condition-predicate k2bd7@k2bd2)) (k2be8@condition-library (condition-accessor k2bd7@k2bd2 k2be2@k2bcf)) (k2bea@condition-files (condition-accessor k2bd7@k2bd2 k2be4@k2bd0))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (k2be0@make-library-resolution-condition k2bc3@x (reverse k2bc9@failed-list))))) (if (null? k2bc8@exts) (k2bcd@f (cdr k2bc7@ls) (k2b04@library-extensions) k2bc9@failed-list) (let ((k2beb@name (string-append (car k2bc7@ls) k2bc5@str (car k2bc8@exts)))) (if (file-exists? k2beb@name) k2beb@name (k2bcd@f k2bc7@ls (cdr k2bc8@exts) (cons k2beb@name k2bc9@failed-list))))))))) (lambda (k2bed@f) (if (procedure? k2bed@f) k2bed@f (assertion-violation 'file-locator '"not a procedure" k2bed@f))))) (set! k2cc9@k2b08@file-locator k2b08@file-locator) (set! k2b0a@serialize-all (lambda (k2bef@serialize k2bf0@compile) (letrec* ((k2bf4@library-desc (lambda (k2bf7@x) (list (k2ac4@library-id k2bf7@x) (k2ac8@library-name k2bf7@x))))) (for-each (lambda (k2bf5@x) (if (k2af8@library-source-file-name k2bf5@x) (k2bef@serialize (k2af8@library-source-file-name k2bf5@x) (list (k2ac4@library-id k2bf5@x) (k2ac8@library-name k2bf5@x) (k2acc@library-version k2bf5@x) (map k2bf4@library-desc (k2ad0@library-imp* k2bf5@x)) (map k2bf4@library-desc (k2ad4@library-vis* k2bf5@x)) (map k2bf4@library-desc (k2ad8@library-inv* k2bf5@x)) (k2adc@library-subst k2bf5@x) (k2ae0@library-env k2bf5@x) (k2bf0@compile (k2aec@library-visit-code k2bf5@x)) (k2bf0@compile (k2af0@library-invoke-code k2bf5@x)) (k2af4@library-visible? k2bf5@x))) (void))) ((k2ab6@current-library-collection)))))) (set! k2cca@k2b0a@serialize-all k2b0a@serialize-all) (set! k2b0c@current-precompiled-library-loader (k2a0c@k28ea@make-parameter (lambda (k2bf9@filename k2bfa@sk) '#f))) (set! k2ccb@k2b0c@current-precompiled-library-loader k2b0c@current-precompiled-library-loader) (set! k2b0e@try-load-from-file (lambda (k2bfd@filename) ((k2b0c@current-precompiled-library-loader) k2bfd@filename (lambda k2c23 (let ((k2c24 (length k2c23))) (if (= k2c24 '11) (apply (lambda (k2bff@id k2c00@name k2c01@ver k2c02@imp* k2c03@vis* k2c04@inv* k2c05@exp-subst k2c06@exp-env k2c07@visit-proc k2c08@invoke-proc k2c09@visible?) (let k2c17@f ((k2c15@deps (append k2c02@imp* k2c03@vis* k2c04@inv*))) (if (null? k2c15@deps) (begin (k2b22@install-library k2bff@id k2c00@name k2c01@ver k2c02@imp* k2c03@vis* k2c04@inv* k2c05@exp-subst k2c06@exp-env k2c07@visit-proc k2c08@invoke-proc '#f '#f k2c09@visible? '#f) '#t) (let ((k2c19@d (car k2c15@deps))) (let ((k2c1b@label (car k2c19@d)) (k2c1c@dname (cadr k2c19@d))) (let ((k2c1f@l (k2b18@find-library-by-name k2c1c@dname))) (if (and (k2ac2@library? k2c1f@l) (eq? k2c1b@label (k2ac4@library-id k2c1f@l))) (k2c17@f (cdr k2c15@deps)) (begin (if k2a06@k28de@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" k2c00@name k2c1c@dname k2bfd@filename) (void)) '#f)))))))) k2c23) (if (>= k2c24 '0) (apply (lambda k2c21@others '#f) k2c23) (error 'apply '"invalid arg count")))))))) (set! k2ccc@k2b0e@try-load-from-file k2b0e@try-load-from-file) (set! k2b10@library-loader (k2a0c@k28ea@make-parameter (lambda (k2c25@x) (let ((k2c27@file-name ((k2b08@file-locator) k2c25@x))) (if (not k2c27@file-name) (assertion-violation '#f '"cannot file library" k2c25@x) (or (k2b0e@try-load-from-file k2c27@file-name) ((k2b12@current-library-expander) (k2a0b@k28e8@read-library-source-file k2c27@file-name) k2c27@file-name (lambda (k2c29@name) (if (not (fast-equal? k2c29@name k2c25@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (k2c2f@k2c2c k2c30@k2c2e) (let ((k2c33@e k2c30@k2c2e) (k2c34@p k2c2f@k2c2c)) (begin (display '"expected to find library " k2c34@p) (write k2c25@x k2c34@p) (display '" in file " k2c34@p) (display k2c27@file-name k2c34@p) (display '", found " k2c34@p) (write k2c29@name k2c34@p) (display '" instead" k2c34@p) (k2c33@e)))))) (void)))))))) (lambda (k2c37@f) (if (procedure? k2c37@f) k2c37@f (assertion-violation 'library-locator '"not a procedure" k2c37@f))))) (set! k2ccd@k2b10@library-loader k2b10@library-loader) (set! k2b12@current-library-expander (k2a0c@k28ea@make-parameter (lambda (k2c39@x) (assertion-violation 'library-expander '"not initialized")) (lambda (k2c3b@f) (if (procedure? k2c3b@f) k2c3b@f (assertion-violation 'library-expander '"not a procedure" k2c3b@f))))) (set! k2cce@k2b12@current-library-expander k2b12@current-library-expander) (set! k2b14@external-pending-libraries (k2a0c@k28ea@make-parameter '())) (set! k2ccf@k2b14@external-pending-libraries k2b14@external-pending-libraries) (set! k2b16@find-external-library (lambda (k2c3d@name) (begin (if (member k2c3d@name (k2b14@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" k2c3d@name) (void)) (let ((k2c43@k2c40 k2b14@external-pending-libraries) (k2c44@k2c42 (cons k2c3d@name (k2b14@external-pending-libraries)))) (let ((k2c47@swap (lambda () (let ((k2c49@t (k2c43@k2c40))) (begin (k2c43@k2c40 k2c44@k2c42) (set! k2c44@k2c42 k2c49@t)))))) (dynamic-wind k2c47@swap (lambda () (begin ((k2b10@library-loader) k2c3d@name) (or (k2b00@find-library-by (lambda (k2c4b@x) (fast-equal? (k2ac8@library-name k2c4b@x) k2c3d@name))) (assertion-violation '#f '"handling external library did not yield the correct library" k2c3d@name)))) k2c47@swap)))))) (set! k2cd0@k2b16@find-external-library k2b16@find-external-library) (set! k2b18@find-library-by-name (lambda (k2c4d@name) (or (k2b00@find-library-by (lambda (k2c4f@x) (fast-equal? (k2ac8@library-name k2c4f@x) k2c4d@name))) (k2b16@find-external-library k2c4d@name)))) (set! k2cd1@k2b18@find-library-by-name k2b18@find-library-by-name) (set! k2b1a@library-exists? (lambda (k2c51@name) (and (k2b00@find-library-by (lambda (k2c53@x) (fast-equal? (k2ac8@library-name k2c53@x) k2c51@name))) '#t))) (set! k2cd2@k2b1a@library-exists? k2b1a@library-exists?) (set! k2b1c@find-library-by-spec/die (lambda (k2c55@spec) (let ((k2c57@id (car k2c55@spec))) (or (k2b00@find-library-by (lambda (k2c59@x) (eq? k2c57@id (k2ac4@library-id k2c59@x)))) (assertion-violation '#f '"cannot find library with required spec" k2c55@spec))))) (set! k2cd3@k2b1c@find-library-by-spec/die k2b1c@find-library-by-spec/die) (set! k2b1e@label->binding-table (make-eq-hashtable)) (set! k2cd4@k2b1e@label->binding-table k2b1e@label->binding-table) (set! k2b20@install-library-record (lambda (k2c5b@lib) (begin (let ((k2c5d@exp-env (k2ae0@library-env k2c5b@lib))) (for-each (lambda (k2c5f@x) (let ((k2c61@label (car k2c5f@x)) (k2c62@binding (cdr k2c5f@x))) (let ((k2c65@binding (let ((k2c67@t (car k2c62@binding))) (if (memv k2c67@t '(global)) (cons 'global (cons k2c5b@lib (cdr k2c62@binding))) (if (memv k2c67@t '(global-macro)) (cons 'global-macro (cons k2c5b@lib (cdr k2c62@binding))) (if (memv k2c67@t '(global-macro!)) (cons 'global-macro! (cons k2c5b@lib (cdr k2c62@binding))) k2c62@binding)))))) (begin (if (hashtable-ref k2b1e@label->binding-table k2c61@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" k2c61@label (hashtable-ref k2b1e@label->binding-table k2c61@label '#f) k2c65@binding) (exit)) (void)) (hashtable-set! k2b1e@label->binding-table k2c61@label k2c65@binding))))) k2c5d@exp-env)) ((k2ab6@current-library-collection) k2c5b@lib)))) (set! k2cd5@k2b20@install-library-record k2b20@install-library-record) (set! k2b22@install-library (lambda (k2c69@id k2c6a@name k2c6b@ver k2c6c@imp* k2c6d@vis* k2c6e@inv* k2c6f@exp-subst k2c70@exp-env k2c71@visit-proc k2c72@invoke-proc k2c73@visit-code k2c74@invoke-code k2c75@visible? k2c76@source-file-name) (let ((k2c85@imp-lib* (map k2b1c@find-library-by-spec/die k2c6c@imp*)) (k2c86@vis-lib* (map k2b1c@find-library-by-spec/die k2c6d@vis*)) (k2c87@inv-lib* (map k2b1c@find-library-by-spec/die k2c6e@inv*))) (begin (if (not (and (symbol? k2c69@id) (list? k2c6a@name) (list? k2c6b@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" k2c69@id k2c6a@name k2c6b@ver) (void)) (if (k2b1a@library-exists? k2c6a@name) (assertion-violation 'install-library '"library is already installed" k2c6a@name) (void)) (let ((k2c8b@lib (make-simple-struct 'library '15 (list k2c69@id k2c6a@name k2c6b@ver k2c85@imp-lib* k2c86@vis-lib* k2c87@inv-lib* k2c6f@exp-subst k2c70@exp-env k2c71@visit-proc k2c72@invoke-proc k2c73@visit-code k2c74@invoke-code k2c75@visible? k2c76@source-file-name)))) (k2b20@install-library-record k2c8b@lib)))))) (set! k2cd6@k2b22@install-library k2b22@install-library) (set! k2b24@imported-label->binding (lambda (k2c8d@lab) (hashtable-ref k2b1e@label->binding-table k2c8d@lab '#f))) (set! k2cd7@k2b24@imported-label->binding k2b24@imported-label->binding) (set! k2b26@invoke-library (lambda (k2c8f@lib) (let ((k2c91@invoke (k2ae8@library-invoke-state k2c8f@lib))) (if (procedure? k2c91@invoke) (begin (k2aea@set-library-invoke-state! k2c8f@lib (lambda () (assertion-violation 'invoke '"circularity detected" k2c8f@lib))) (for-each k2b26@invoke-library (k2ad8@library-inv* k2c8f@lib)) (k2aea@set-library-invoke-state! k2c8f@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" k2c8f@lib))) (k2c91@invoke) (k2aea@set-library-invoke-state! k2c8f@lib '#t)) (void))))) (set! k2cd8@k2b26@invoke-library k2b26@invoke-library) (set! k2b28@visit-library (lambda (k2c93@lib) (let ((k2c95@visit (k2ae4@library-visit-state k2c93@lib))) (if (procedure? k2c95@visit) (begin (k2ae6@set-library-visit-state! k2c93@lib (lambda () (assertion-violation 'visit '"circularity detected" k2c93@lib))) (for-each k2b26@invoke-library (k2ad4@library-vis* k2c93@lib)) (k2ae6@set-library-visit-state! k2c93@lib (lambda () (assertion-violation 'invoke '"first visit did not return" k2c93@lib))) (k2c95@visit) (k2ae6@set-library-visit-state! k2c93@lib '#t)) (void))))) (set! k2cd9@k2b28@visit-library k2b28@visit-library) (set! k2b2a@invoke-library-by-spec (lambda (k2c97@spec) (k2b26@invoke-library (k2b1c@find-library-by-spec/die k2c97@spec)))) (set! k2cda@k2b2a@invoke-library-by-spec k2b2a@invoke-library-by-spec) (set! k2b2c@installed-libraries (lambda k2c9f (let ((k2ca0 (length k2c9f))) (if (= k2ca0 '1) (apply (lambda (k2c99@all?) (let k2c9d@f ((k2c9b@ls ((k2ab6@current-library-collection)))) (if (null? k2c9b@ls) '() (if (or k2c99@all? (k2af4@library-visible? (car k2c9b@ls))) (cons (car k2c9b@ls) (k2c9d@f (cdr k2c9b@ls))) (k2c9d@f (cdr k2c9b@ls)))))) k2c9f) (if (= k2ca0 '0) (apply (lambda () (k2b2c@installed-libraries '#f)) k2c9f) (error 'apply '"invalid arg count")))))) (set! k2cdb@k2b2c@installed-libraries k2b2c@installed-libraries) (set! k2b2e@library-spec (lambda (k2ca1@x) (begin (if (not (k2ac2@library? k2ca1@x)) (assertion-violation 'library-spec '"not a library" k2ca1@x) (void)) (list (k2ac4@library-id k2ca1@x) (k2ac8@library-name k2ca1@x) (k2acc@library-version k2ca1@x))))) (set! k2cdc@k2b2e@library-spec k2b2e@library-spec) (void))
(begin (set! k2ce0@build-global-define (unspecified)) (set! k2d51@build-lambda (unspecified)) (set! k2d53@build-case-lambda (unspecified)) (set! k2d81@build-sequence (unspecified)) (set! k2d83@build-void (unspecified)) (set! k2d85@build-letrec (unspecified)) (set! k2d87@build-let (unspecified)) (set! k2d89@build-named-let (unspecified)) (set! k2d8b@build-letrec* (unspecified)) (set! k2d8d@build-library-letrec* (unspecified)) (set! k2d8f@build-receive (unspecified)) (set! k2ce0@build-global-define (lambda (k2d90@x) (k2d83@build-void))) (set! k2e1e@k2ce0@build-global-define k2ce0@build-global-define) (set! k2d51@build-lambda (lambda (k2d92@ae k2d93@vars k2d94@exp) (list 'lambda k2d93@vars k2d94@exp))) (set! k2e1f@k2d51@build-lambda k2d51@build-lambda) (set! k2d53@build-case-lambda (lambda (k2d98@ae k2d99@vars* k2d9a@exp*) (letrec* ((k2d9f@build-error (lambda (k2dd6@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (k2da1@build-pred (lambda (k2dbe@ae k2dbf@n k2dc0@vars) (call-with-values (lambda () (let k2dcc@f ((k2dc8@vars k2dc0@vars) (k2dc9@count '0)) (if (pair? k2dc8@vars) (k2dcc@f (cdr k2dc8@vars) (+ k2dc9@count '1)) (if (null? k2dc8@vars) (values k2dc9@count '=) (values k2dc9@count '>=))))) (lambda (k2dce@k2dc5 k2dcf@k2dc7) (let ((k2dd2@pred k2dcf@k2dc7) (k2dd3@count k2dce@k2dc5)) (list (list 'primitive k2dd2@pred) k2dbf@n (list 'quote k2dd3@count))))))) (k2da3@build-apply (lambda (k2db6@ae k2db7@g k2db8@vars k2db9@exp) (list '(primitive apply) (k2d51@build-lambda k2db6@ae k2db8@vars k2db9@exp) k2db7@g))) (k2da5@expand-case-lambda (lambda (k2da6@ae k2da7@vars k2da8@exp*) (let ((k2dac@g (gensym)) (k2dad@n (gensym))) (list 'lambda k2dac@g (k2d87@build-let k2da6@ae (list k2dad@n) (list (list '(primitive length) k2dac@g)) (let k2db4@f ((k2db0@vars* k2d99@vars*) (k2db1@exp* k2da8@exp*)) (if (null? k2db0@vars*) (k2d9f@build-error k2da6@ae) (list 'if (k2da1@build-pred k2da6@ae k2dad@n (car k2db0@vars*)) (k2da3@build-apply k2da6@ae k2dac@g (car k2db0@vars*) (car k2db1@exp*)) (k2db4@f (cdr k2db0@vars*) (cdr k2db1@exp*))))))))))) (if (= (length k2d9a@exp*) '1) (k2d51@build-lambda k2d98@ae (car k2d99@vars*) (car k2d9a@exp*)) (k2da5@expand-case-lambda k2d98@ae k2d99@vars* k2d9a@exp*))))) (set! k2e20@k2d53@build-case-lambda k2d53@build-case-lambda) (set! k2d81@build-sequence (lambda (k2dd8@ae k2dd9@exps) (let k2dde@loop ((k2ddc@exps k2dd9@exps)) (if (null? (cdr k2ddc@exps)) (car k2ddc@exps) (if (equal? (car k2ddc@exps) (k2d83@build-void)) (k2dde@loop (cdr k2ddc@exps)) (cons 'begin k2ddc@exps)))))) (set! k2e21@k2d81@build-sequence k2d81@build-sequence) (set! k2d83@build-void (lambda () '((primitive void)))) (set! k2e22@k2d83@build-void k2d83@build-void) (set! k2d85@build-letrec (lambda (k2de0@ae k2de1@vars k2de2@val-exps k2de3@body-exp) (if (null? k2de1@vars) k2de3@body-exp (list 'letrec (map list k2de1@vars k2de2@val-exps) k2de3@body-exp)))) (set! k2e23@k2d85@build-letrec k2d85@build-letrec) (set! k2d87@build-let (lambda (k2de8@ae k2de9@vars k2dea@val-exps k2deb@body-exp) (if (null? k2de9@vars) k2deb@body-exp (list 'let (map list k2de9@vars k2dea@val-exps) k2deb@body-exp)))) (set! k2e24@k2d87@build-let k2d87@build-let) (set! k2d89@build-named-let (lambda (k2df0@ae k2df1@name k2df2@vars k2df3@val-exps k2df4@body-exp) (list 'let k2df1@name (map list k2df2@vars k2df3@val-exps) k2df4@body-exp))) (set! k2e25@k2d89@build-named-let k2d89@build-named-let) (set! k2d8b@build-letrec* (lambda (k2dfa@ae k2dfb@vars k2dfc@val-exps k2dfd@body-exp) (if (null? k2dfb@vars) k2dfd@body-exp (list 'letrec* (map list k2dfb@vars k2dfc@val-exps) k2dfd@body-exp)))) (set! k2e26@k2d8b@build-letrec* k2d8b@build-letrec*) (set! k2d8d@build-library-letrec* (lambda (k2e02@ae k2e03@name k2e04@vars k2e05@locs k2e06@val-exps k2e07@body-exp) (cons 'begin (append (map (lambda (k2e0e@var) (cons 'set! (cons k2e0e@var '((unspecified))))) k2e04@vars) (append (apply append (map (lambda (k2e10@var k2e11@loc k2e12@val-exp) (list (list 'set! k2e10@var k2e12@val-exp) (list 'set! k2e11@loc k2e10@var))) k2e04@vars k2e05@locs k2e06@val-exps)) (list k2e07@body-exp)))))) (set! k2e27@k2d8d@build-library-letrec* k2d8d@build-library-letrec*) (set! k2d8f@build-receive (lambda (k2e16@ae k2e17@vars k2e18@producer k2e19@body*) (begin (display '"************** in ") (cons 'receive (cons k2e17@vars (cons k2e18@producer k2e19@body*)))))) (set! k2e28@k2d8f@build-receive k2d8f@build-receive) (void))
(begin (set! k2e37@file-options-macro (unspecified)) (set! k2e39@set-cons (unspecified)) (set! k2e3b@set-union (unspecified)) (set! k2e40@top-mark* (unspecified)) (set! k2e42@top-marked? (unspecified)) (set! k2e44@gen-lexical (unspecified)) (set! k2e46@gen-global (unspecified)) (set! k2e48@gen-label (unspecified)) (set! k2e4a@gen-top-level-label (unspecified)) (set! k2e4c@gen-define-label+loc (unspecified)) (set! k2e4e@gen-define-label (unspecified)) (set! k2e58@rib? (unspecified)) (set! k2e5a@rib-sym* (unspecified)) (set! k2e5c@set-rib-sym*! (unspecified)) (set! k2e5e@rib-mark** (unspecified)) (set! k2e60@set-rib-mark**! (unspecified)) (set! k2e62@rib-label* (unspecified)) (set! k2e64@set-rib-label*! (unspecified)) (set! k2e66@rib-sealed/freq (unspecified)) (set! k2e68@set-rib-sealed/freq! (unspecified)) (set! k2e6a@rib-cache (unspecified)) (set! k2e6c@set-rib-cache! (unspecified)) (set! k2e6e@dummy (unspecified)) (set! k2e70@make-empty-rib (unspecified)) (set! k2e72@extend-rib! (unspecified)) (set! k2e74@extend-rib/nc! (unspecified)) (set! k2e76@make-rib-map (unspecified)) (set! k2e78@seal-rib! (unspecified)) (set! k2e7a@unseal-rib! (unspecified)) (set! k2e7c@make-full-rib (unspecified)) (set! k2e7e@rp (unspecified)) (set! k2e88@stx? (unspecified)) (set! k2e8a@stx-expr (unspecified)) (set! k2e8c@set-stx-expr! (unspecified)) (set! k2e8e@stx-mark* (unspecified)) (set! k2e90@set-stx-mark*! (unspecified)) (set! k2e92@stx-subst* (unspecified)) (set! k2e94@set-stx-subst*! (unspecified)) (set! k2e96@stx-ae* (unspecified)) (set! k2e98@set-stx-ae*! (unspecified)) (set! k2e9a@dummy (unspecified)) (set! k2e9c@datum->stx (unspecified)) (set! k2e9e@gen-mark (unspecified)) (set! k2ea0@anti-mark (unspecified)) (set! k2ea2@anti-mark? (unspecified)) (set! k2ea4@mkstx (unspecified)) (set! k2ea6@add-mark (unspecified)) (set! k2ea8@add-subst (unspecified)) (set! k2eaa@syntax-kind? (unspecified)) (set! k2eac@syntax-vector->list (unspecified)) (set! k2eae@syntax-pair? (unspecified)) (set! k2eb0@syntax-vector? (unspecified)) (set! k2eb2@syntax-null? (unspecified)) (set! k2eb4@syntax-list? (unspecified)) (set! k2eb6@syntax-car (unspecified)) (set! k2eb8@syntax-cdr (unspecified)) (set! k2eba@syntax->list (unspecified)) (set! k2ebc@id? (unspecified)) (set! k2ebe@id->sym (unspecified)) (set! k2ec0@bound-id=? (unspecified)) (set! k2ec2@free-id=? (unspecified)) (set! k2ec4@valid-bound-ids? (unspecified)) (set! k2ec6@distinct-bound-ids? (unspecified)) (set! k2ec8@bound-id-member? (unspecified)) (set! k2eca@self-evaluating? (unspecified)) (set! k2ecc@strip-annotations (unspecified)) (set! k2ece@strip (unspecified)) (set! k2ed0@stx->datum (unspecified)) (set! k2ed2@id->label (unspecified)) (set! k2ed4@label->binding (unspecified)) (set! k2ed6@make-binding (unspecified)) (set! k2ed8@binding-type (unspecified)) (set! k2eda@binding-value (unspecified)) (set! k2edc@raise-unbound-error (unspecified)) (set! k2ede@syntax-type (unspecified)) (set! k2eec@sanitize-binding (unspecified)) (set! k2eee@make-variable-transformer (unspecified)) (set! k2ef0@variable-transformer? (unspecified)) (set! k2ef2@variable-transformer-procedure (unspecified)) (set! k2ef4@make-eval-transformer (unspecified)) (set! k3045@parse-define (unspecified)) (set! k3047@parse-define-syntax (unspecified)) (set! k3049@scheme-stx-hashtable (unspecified)) (set! k304b@scheme-stx (unspecified)) (set! k304d@lexical-var (unspecified)) (set! k304f@lexical-mutable? (unspecified)) (set! k3051@set-lexical-mutable! (unspecified)) (set! k3053@add-lexical (unspecified)) (set! k3055@add-lexicals (unspecified)) (set! k3057@letrec-helper (unspecified)) (set! k3059@let-transformer (unspecified)) (set! k305b@letrec-transformer (unspecified)) (set! k305d@letrec*-transformer (unspecified)) (set! k305f@fluid-let-syntax-transformer (unspecified)) (set! k3061@type-descriptor-transformer (unspecified)) (set! k3063@record-type-descriptor-transformer (unspecified)) (set! k3065@record-constructor-descriptor-transformer (unspecified)) (set! k3067@when-macro (unspecified)) (set! k3069@unless-macro (unspecified)) (set! k306b@if-transformer (unspecified)) (set! k306d@and-transformer (unspecified)) (set! k306f@or-transformer (unspecified)) (set! k3071@case-macro (unspecified)) (set! k3073@quote-transformer (unspecified)) (set! k3075@case-lambda-transformer (unspecified)) (set! k3077@lambda-transformer (unspecified)) (set! k3079@bless (unspecified)) (set! k307b@with-syntax-macro (unspecified)) (set! k307d@invalid-fmls-error (unspecified)) (set! k307f@let-macro (unspecified)) (set! k3081@let-values-macro (unspecified)) (set! k3083@let*-values-macro (unspecified)) (set! k3085@trace-lambda-macro (unspecified)) (set! k3087@trace-define-macro (unspecified)) (set! k3089@trace-define-syntax-macro (unspecified)) (set! k308b@trace-let/rec-syntax (unspecified)) (set! k308d@trace-let-syntax-macro (unspecified)) (set! k308f@trace-letrec-syntax-macro (unspecified)) (set! k3091@guard-macro (unspecified)) (set! k3093@define-enumeration-macro (unspecified)) (set! k3095@time-macro (unspecified)) (set! k3097@delay-macro (unspecified)) (set! k3099@assert-macro (unspecified)) (set! k309b@endianness-macro (unspecified)) (set! k309d@identifier-syntax-macro (unspecified)) (set! k309f@do-macro (unspecified)) (set! k30a1@let*-macro (unspecified)) (set! k30a3@or-macro (unspecified)) (set! k30a5@and-macro (unspecified)) (set! k30a7@cond-macro (unspecified)) (set! k30a9@do-include (unspecified)) (set! k30ab@include-macro (unspecified)) (set! k30ad@include-into-macro (unspecified)) (set! k30af@syntax-rules-macro (unspecified)) (set! k30b1@quasiquote-macro (unspecified)) (set! k30b3@quasisyntax-macro (unspecified)) (set! k30b5@define-struct-macro (unspecified)) (set! k30b7@define-record-type-macro (unspecified)) (set! k30b9@define-condition-type-macro (unspecified)) (set! k30bb@incorrect-usage-macro (unspecified)) (set! k30bd@parameterize-macro (unspecified)) (set! k30bf@foreign-call-transformer (unspecified)) (set! k30c1@convert-pattern (unspecified)) (set! k30c3@syntax-dispatch (unspecified)) (set! k30c5@ellipsis? (unspecified)) (set! k30c7@underscore? (unspecified)) (set! k30c9@verify-literals (unspecified)) (set! k30cb@syntax-case-transformer (unspecified)) (set! k30cd@ellipsis-map (unspecified)) (set! k30cf@syntax-transformer (unspecified)) (set! k30d1@core-macro-transformer (unspecified)) (set! k30d3@symbol-macro (unspecified)) (set! k30d5@macro-transformer (unspecified)) (set! k30d7@local-macro-transformer (unspecified)) (set! k30d9@do-macro-call (unspecified)) (set! k30db@chi-macro (unspecified)) (set! k30dd@chi-local-macro (unspecified)) (set! k30df@chi-global-macro (unspecified)) (set! k30e1@chi-expr* (unspecified)) (set! k30e3@chi-application (unspecified)) (set! k30e5@chi-expr (unspecified)) (set! k30e7@chi-set! (unspecified)) (set! k30e9@verify-formals (unspecified)) (set! k30eb@chi-lambda-clause (unspecified)) (set! k30ed@chi-lambda-clause* (unspecified)) (set! k30ef@chi-defun (unspecified)) (set! k30f1@chi-rhs (unspecified)) (set! k30f3@expand-interaction-rhs*/init* (unspecified)) (set! k30f5@chi-rhs* (unspecified)) (set! k30f7@find-bound=? (unspecified)) (set! k30f9@find-dups (unspecified)) (set! k30fb@chi-internal (unspecified)) (set! k30fd@parse-module (unspecified)) (set! k3107@module-interface? (unspecified)) (set! k3109@module-interface-first-mark (unspecified)) (set! k310b@set-module-interface-first-mark! (unspecified)) (set! k310d@module-interface-exp-id-vec (unspecified)) (set! k310f@set-module-interface-exp-id-vec! (unspecified)) (set! k3111@module-interface-exp-lab-vec (unspecified)) (set! k3113@set-module-interface-exp-lab-vec! (unspecified)) (set! k3115@dummy (unspecified)) (set! k3117@module-interface-exp-id* (unspecified)) (set! k3119@chi-internal-module (unspecified)) (set! k311b@chi-body* (unspecified)) (set! k311d@expand-transformer (unspecified)) (set! k311f@parse-exports (unspecified)) (set! k3121@parse-library-name (unspecified)) (set! k3123@parse-library (unspecified)) (set! k3125@parse-import-spec* (unspecified)) (set! k3127@make-top-rib (unspecified)) (set! k3129@make-collector (unspecified)) (set! k312b@inv-collector (unspecified)) (set! k312d@vis-collector (unspecified)) (set! k312f@imp-collector (unspecified)) (set! k3131@chi-library-internal (unspecified)) (set! k3133@chi-interaction-expr (unspecified)) (set! k3135@library-body-expander (unspecified)) (set! k3137@core-library-expander (unspecified)) (set! k3139@parse-top-level-program (unspecified)) (set! k313b@top-level-expander (unspecified)) (set! k313d@rp (unspecified)) (set! k3147@env? (unspecified)) (set! k3149@env-names (unspecified)) (set! k314b@set-env-names! (unspecified)) (set! k314d@env-labels (unspecified)) (set! k314f@set-env-labels! (unspecified)) (set! k3151@env-itc (unspecified)) (set! k3153@set-env-itc! (unspecified)) (set! k3155@dummy (unspecified)) (set! k3157@rp (unspecified)) (set! k3161@interaction-env? (unspecified)) (set! k3163@interaction-env-rib (unspecified)) (set! k3165@set-interaction-env-rib! (unspecified)) (set! k3167@interaction-env-r (unspecified)) (set! k3169@set-interaction-env-r! (unspecified)) (set! k316b@interaction-env-locs (unspecified)) (set! k316d@set-interaction-env-locs! (unspecified)) (set! k316f@dummy (unspecified)) (set! k3171@interaction-environment-symbols (unspecified)) (set! k3173@environment-bindings (unspecified)) (set! k3175@parse-binding (unspecified)) (set! k3177@environment? (unspecified)) (set! k3179@environment-symbols (unspecified)) (set! k317b@environment (unspecified)) (set! k317d@null-environment (unspecified)) (set! k317f@scheme-report-environment (unspecified)) (set! k3181@expand (unspecified)) (set! k3183@eval (unspecified)) (set! k3185@library-expander (unspecified)) (set! k3187@boot-library-expand (unspecified)) (set! k3189@rev-map-append (unspecified)) (set! k318b@build-exports (unspecified)) (set! k318d@make-export-subst (unspecified)) (set! k318f@make-export-env/macros (unspecified)) (set! k3191@generate-temporaries (unspecified)) (set! k3193@free-identifier=? (unspecified)) (set! k3195@bound-identifier=? (unspecified)) (set! k3197@make-source-condition (unspecified)) (set! k3199@extract-position-condition (unspecified)) (set! k319b@expression-position (unspecified)) (set! k319d@assertion-error (unspecified)) (set! k319f@syntax-error (unspecified)) (set! k31a1@syntax-violation* (unspecified)) (set! k31a3@syntax-violation (unspecified)) (set! k31a5@identifier? (unspecified)) (set! k31a7@datum->syntax (unspecified)) (set! k31a9@syntax->datum (unspecified)) (set! k31ab@ungensym-all (unspecified)) (set! k31ad@compile-r6rs-top-level (unspecified)) (set! k31af@pre-compile-r6rs-top-level (unspecified)) (set! k31b1@interaction-environment (unspecified)) (set! k31b3@top-level-context (unspecified)) (set! k2e37@file-options-macro (lambda (k31b4@x) (letrec* ((k31b7@valid-option? (lambda (k31c0@x) (and (k2ebc@id? k31c0@x) (memq (k2ebe@id->sym k31c0@x) '(no-fail no-create no-truncate)))))) (let ((k31b8@t k31b4@x)) (let ((k31ba@ls/false (k30c3@syntax-dispatch k31b8@t '(_ . each-any)))) (if (and k31ba@ls/false (apply (lambda (k31bc@opt*) (for-all k31b7@valid-option? k31bc@opt*)) k31ba@ls/false)) (apply (lambda (k31be@opt*) (k3079@bless (list 'make-file-options (list 'quote k31be@opt*)))) k31ba@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k31b8@t))))))) (set! k4b0a@k2e37@file-options-macro k2e37@file-options-macro) (set! k2e39@set-cons (lambda (k31c2@x k31c3@ls) (if (memq k31c2@x k31c3@ls) k31c3@ls (cons k31c2@x k31c3@ls)))) (set! k4b0b@k2e39@set-cons k2e39@set-cons) (set! k2e3b@set-union (lambda (k31c6@ls1 k31c7@ls2) (if (null? k31c6@ls1) k31c7@ls2 (if (memq (car k31c6@ls1) k31c7@ls2) (k2e3b@set-union (cdr k31c6@ls1) k31c7@ls2) (cons (car k31c6@ls1) (k2e3b@set-union (cdr k31c6@ls1) k31c7@ls2)))))) (set! k4b0c@k2e3b@set-union k2e3b@set-union) (set! k2e40@top-mark* '(top)) (set! k4b0d@k2e40@top-mark* k2e40@top-mark*) (set! k2e42@top-marked? (lambda (k31ca@m*) (memq 'top k31ca@m*))) (set! k4b0e@k2e42@top-marked? k2e42@top-marked?) (set! k2e44@gen-lexical (lambda (k31cc@sym) (if (symbol? k31cc@sym) (gensym k31cc@sym) (if (k2e88@stx? k31cc@sym) (k2e44@gen-lexical (k2ebe@id->sym k31cc@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" k31cc@sym))))) (set! k4b0f@k2e44@gen-lexical k2e44@gen-lexical) (set! k2e46@gen-global (lambda (k31ce@x) (k2e44@gen-lexical k31ce@x))) (set! k4b10@k2e46@gen-global k2e46@gen-global) (set! k2e48@gen-label (lambda (k31d0@_) (gensym))) (set! k4b11@k2e48@gen-label k2e48@gen-label) (set! k2e4a@gen-top-level-label (lambda (k31d2@id k31d3@rib) (letrec* ((k31d7@find (lambda (k31e2@sym k31e3@mark* k31e4@sym* k31e5@mark** k31e6@label*) (and (pair? k31e4@sym*) (if (and (eq? k31e2@sym (car k31e4@sym*)) (same-marks? k31e3@mark* (car k31e5@mark**))) (car k31e6@label*) (k31d7@find k31e2@sym k31e3@mark* (cdr k31e4@sym*) (cdr k31e5@mark**) (cdr k31e6@label*))))))) (let ((k31d8@sym (k2ebe@id->sym k31d2@id)) (k31d9@mark* (k2e8e@stx-mark* k31d2@id))) (let ((k31dc@sym* (k2e5a@rib-sym* k31d3@rib))) (let ((k31de@t (and (memq k31d8@sym (k2e5a@rib-sym* k31d3@rib)) (k31d7@find k31d8@sym k31d9@mark* k31dc@sym* (k2e5e@rib-mark** k31d3@rib) (k2e62@rib-label* k31d3@rib))))) (if k31de@t ((lambda (k31e0@label) (if (k2cd7@k2b24@imported-label->binding k31e0@label) (gensym) k31e0@label)) k31de@t) (gensym)))))))) (set! k4b12@k2e4a@gen-top-level-label k2e4a@gen-top-level-label) (set! k2e4c@gen-define-label+loc (lambda (k31ec@id k31ed@rib) (let ((k31f0@t (k31b3@top-level-context))) (if k31f0@t ((lambda (k31f2@env) (let ((k31f4@label (k2e4a@gen-top-level-label k31ec@id k31ed@rib)) (k31f5@locs (k316b@interaction-env-locs k31f2@env))) (values k31f4@label (let ((k31f8@t (assq k31f4@label k31f5@locs))) (if k31f8@t (cdr k31f8@t) (let ((k31fa@loc (k2e44@gen-lexical k31ec@id))) (begin (k316d@set-interaction-env-locs! k31f2@env (cons (cons k31f4@label k31fa@loc) k31f5@locs)) k31fa@loc))))))) k31f0@t) (values (gensym) (k2e44@gen-lexical k31ec@id)))))) (set! k4b13@k2e4c@gen-define-label+loc k2e4c@gen-define-label+loc) (set! k2e4e@gen-define-label (lambda (k31fc@id k31fd@rib) (if (k31b3@top-level-context) (k2e4a@gen-top-level-label k31fc@id k31fd@rib) (gensym)))) (set! k4b14@k2e4e@gen-define-label k2e4e@gen-define-label) (set! k2e58@rib? (lambda (k3200@x) (and (simple-struct? k3200@x) (eq? (simple-struct-name k3200@x) 'rib)))) (set! k4b15@k2e58@rib? k2e58@rib?) (set! k2e5a@rib-sym* (lambda (k3202@x) (simple-struct-ref k3202@x '0))) (set! k4b16@k2e5a@rib-sym* k2e5a@rib-sym*) (set! k2e5c@set-rib-sym*! (lambda (k3204@x k3205@val) (simple-struct-set! k3204@x '0 k3205@val))) (set! k4b17@k2e5c@set-rib-sym*! k2e5c@set-rib-sym*!) (set! k2e5e@rib-mark** (lambda (k3208@x) (simple-struct-ref k3208@x '1))) (set! k4b18@k2e5e@rib-mark** k2e5e@rib-mark**) (set! k2e60@set-rib-mark**! (lambda (k320a@x k320b@val) (simple-struct-set! k320a@x '1 k320b@val))) (set! k4b19@k2e60@set-rib-mark**! k2e60@set-rib-mark**!) (set! k2e62@rib-label* (lambda (k320e@x) (simple-struct-ref k320e@x '2))) (set! k4b1a@k2e62@rib-label* k2e62@rib-label*) (set! k2e64@set-rib-label*! (lambda (k3210@x k3211@val) (simple-struct-set! k3210@x '2 k3211@val))) (set! k4b1b@k2e64@set-rib-label*! k2e64@set-rib-label*!) (set! k2e66@rib-sealed/freq (lambda (k3214@x) (simple-struct-ref k3214@x '3))) (set! k4b1c@k2e66@rib-sealed/freq k2e66@rib-sealed/freq) (set! k2e68@set-rib-sealed/freq! (lambda (k3216@x k3217@val) (simple-struct-set! k3216@x '3 k3217@val))) (set! k4b1d@k2e68@set-rib-sealed/freq! k2e68@set-rib-sealed/freq!) (set! k2e6a@rib-cache (lambda (k321a@x) (simple-struct-ref k321a@x '4))) (set! k4b1e@k2e6a@rib-cache k2e6a@rib-cache) (set! k2e6c@set-rib-cache! (lambda (k321c@x k321d@val) (simple-struct-set! k321c@x '4 k321d@val))) (set! k4b1f@k2e6c@set-rib-cache! k2e6c@set-rib-cache!) (set! k2e6e@dummy '3) (set! k4b20@k2e6e@dummy k2e6e@dummy) (set! k2e70@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! k4b21@k2e70@make-empty-rib k2e70@make-empty-rib) (set! k2e72@extend-rib! (lambda (k3220@rib k3221@id k3222@label) (letrec* ((k3227@find (lambda (k3234@sym k3235@mark* k3236@sym* k3237@mark** k3238@label*) (and (pair? k3236@sym*) (if (and (eq? k3234@sym (car k3236@sym*)) (same-marks? k3235@mark* (car k3237@mark**))) k3238@label* (k3227@find k3234@sym k3235@mark* (cdr k3236@sym*) (cdr k3237@mark**) (cdr k3238@label*))))))) (begin (if (k2e66@rib-sealed/freq k3220@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" k3220@rib) (void)) (let ((k3228@sym (k2ebe@id->sym k3221@id)) (k3229@mark* (k2e8e@stx-mark* k3221@id))) (let ((k322c@sym* (k2e5a@rib-sym* k3220@rib))) (let ((k322e@t (and (memq k3228@sym (k2e5a@rib-sym* k3220@rib)) (k3227@find k3228@sym k3229@mark* k322c@sym* (k2e5e@rib-mark** k3220@rib) (k2e62@rib-label* k3220@rib))))) (if k322e@t ((lambda (k3230@p) (if (not (eq? k3222@label (car k3230@p))) (if (k31b3@top-level-context) (set-car! k3230@p k3222@label) (k31a3@syntax-violation '#f '"multiple definitions of identifier" k3221@id)) (void))) k322e@t) (begin (if (k2e6a@rib-cache k3220@rib) (hashtable-update! (k2e6a@rib-cache k3220@rib) k3228@sym (lambda (k3232@e) (cons (cons k3229@mark* k3222@label) k3232@e)) '()) (void)) (k2e5c@set-rib-sym*! k3220@rib (cons k3228@sym k322c@sym*)) (k2e60@set-rib-mark**! k3220@rib (cons k3229@mark* (k2e5e@rib-mark** k3220@rib))) (k2e64@set-rib-label*! k3220@rib (cons k3222@label (k2e62@rib-label* k3220@rib)))))))))))) (set! k4b22@k2e72@extend-rib! k2e72@extend-rib!) (set! k2e74@extend-rib/nc! (lambda (k323e@rib k323f@id k3240@label) (let ((k3244@sym (k2ebe@id->sym k323f@id)) (k3245@mark* (k2e8e@stx-mark* k323f@id))) (let ((k3248@sym* (k2e5a@rib-sym* k323e@rib))) (begin (if (k2e6a@rib-cache k323e@rib) (hashtable-update! (k2e6a@rib-cache k323e@rib) k3244@sym (lambda (k324a@e) (cons (cons k3245@mark* k3240@label) k324a@e)) '()) (void)) (k2e5c@set-rib-sym*! k323e@rib (cons k3244@sym k3248@sym*)) (k2e60@set-rib-mark**! k323e@rib (cons k3245@mark* (k2e5e@rib-mark** k323e@rib))) (k2e64@set-rib-label*! k323e@rib (cons k3240@label (k2e62@rib-label* k323e@rib)))))))) (set! k4b23@k2e74@extend-rib/nc! k2e74@extend-rib/nc!) (set! k2e76@make-rib-map (lambda (k324c@sym*) (let ((k324e@ht (make-eq-hashtable))) (let k3254@f ((k3250@i '0) (k3251@sym* k324c@sym*)) (if (null? k3251@sym*) k324e@ht (begin (hashtable-update! k324e@ht (car k3251@sym*) (lambda (k3256@x) (cons k3250@i k3256@x)) '()) (k3254@f (+ k3250@i '1) (cdr k3251@sym*)))))))) (set! k4b24@k2e76@make-rib-map k2e76@make-rib-map) (set! k2e78@seal-rib! (lambda (k3258@rib) (let ((k325a@sym* (k2e5a@rib-sym* k3258@rib))) (if (not (null? k325a@sym*)) (begin (k2e5c@set-rib-sym*! k3258@rib (list->vector k325a@sym*)) (k2e60@set-rib-mark**! k3258@rib (list->vector (k2e5e@rib-mark** k3258@rib))) (k2e64@set-rib-label*! k3258@rib (list->vector (k2e62@rib-label* k3258@rib))) (k2e68@set-rib-sealed/freq! k3258@rib (k2e76@make-rib-map k325a@sym*))) (void))))) (set! k4b25@k2e78@seal-rib! k2e78@seal-rib!) (set! k2e7a@unseal-rib! (lambda (k325c@rib) (if (k2e66@rib-sealed/freq k325c@rib) (begin (k2e68@set-rib-sealed/freq! k325c@rib '#f) (k2e5c@set-rib-sym*! k325c@rib (vector->list (k2e5a@rib-sym* k325c@rib))) (k2e60@set-rib-mark**! k325c@rib (vector->list (k2e5e@rib-mark** k325c@rib))) (k2e64@set-rib-label*! k325c@rib (vector->list (k2e62@rib-label* k325c@rib)))) (void)))) (set! k4b26@k2e7a@unseal-rib! k2e7a@unseal-rib!) (set! k2e7c@make-full-rib (lambda (k325e@id* k325f@label*) (let ((k3262@r (make-simple-struct 'rib '6 (list (map k2ebe@id->sym k325e@id*) (map k2e8e@stx-mark* k325e@id*) k325f@label* '#f '#f)))) (begin (k2e78@seal-rib! k3262@r) k3262@r)))) (set! k4b27@k2e7c@make-full-rib k2e7c@make-full-rib) (set! k2e7e@rp (k2a09@k28e4@make-record-printer 'stx (lambda (k3264@x k3265@p k3266@wr) (begin (display '"#<syntax " k3265@p) (write (k2ed0@stx->datum k3264@x) k3265@p) (let ((k326a@expr (k2e8a@stx-expr k3264@x))) (if (k2a00@k28d2@annotation? k326a@expr) (let ((k326c@src (k2a01@k28d4@annotation-source k326a@expr))) (if (pair? k326c@src) (begin (display '" [" k3265@p) (display (cdr k326c@src) k3265@p) (display '" of " k3265@p) (display (car k326c@src) k3265@p) (display '"]" k3265@p)) (void))) (void))) (display '">" k3265@p))))) (set! k4b28@k2e7e@rp k2e7e@rp) (set! k2e88@stx? (lambda (k326e@x) (and (simple-struct? k326e@x) (eq? (simple-struct-name k326e@x) 'stx)))) (set! k4b29@k2e88@stx? k2e88@stx?) (set! k2e8a@stx-expr (lambda (k3270@x) (simple-struct-ref k3270@x '0))) (set! k4b2a@k2e8a@stx-expr k2e8a@stx-expr) (set! k2e8c@set-stx-expr! (lambda (k3272@x k3273@val) (simple-struct-set! k3272@x '0 k3273@val))) (set! k4b2b@k2e8c@set-stx-expr! k2e8c@set-stx-expr!) (set! k2e8e@stx-mark* (lambda (k3276@x) (simple-struct-ref k3276@x '1))) (set! k4b2c@k2e8e@stx-mark* k2e8e@stx-mark*) (set! k2e90@set-stx-mark*! (lambda (k3278@x k3279@val) (simple-struct-set! k3278@x '1 k3279@val))) (set! k4b2d@k2e90@set-stx-mark*! k2e90@set-stx-mark*!) (set! k2e92@stx-subst* (lambda (k327c@x) (simple-struct-ref k327c@x '2))) (set! k4b2e@k2e92@stx-subst* k2e92@stx-subst*) (set! k2e94@set-stx-subst*! (lambda (k327e@x k327f@val) (simple-struct-set! k327e@x '2 k327f@val))) (set! k4b2f@k2e94@set-stx-subst*! k2e94@set-stx-subst*!) (set! k2e96@stx-ae* (lambda (k3282@x) (simple-struct-ref k3282@x '3))) (set! k4b30@k2e96@stx-ae* k2e96@stx-ae*) (set! k2e98@set-stx-ae*! (lambda (k3284@x k3285@val) (simple-struct-set! k3284@x '3 k3285@val))) (set! k4b31@k2e98@set-stx-ae*! k2e98@set-stx-ae*!) (set! k2e9a@dummy '3) (set! k4b32@k2e9a@dummy k2e9a@dummy) (set! k2e9c@datum->stx (lambda (k3288@id k3289@datum) (make-simple-struct 'stx '5 (list k3289@datum (k2e8e@stx-mark* k3288@id) (k2e92@stx-subst* k3288@id) (k2e96@stx-ae* k3288@id))))) (set! k4b33@k2e9c@datum->stx k2e9c@datum->stx) (set! k2e9e@gen-mark (lambda () (string '#\m))) (set! k4b34@k2e9e@gen-mark k2e9e@gen-mark) (set! k2ea0@anti-mark '#f) (set! k4b35@k2ea0@anti-mark k2ea0@anti-mark) (set! k2ea2@anti-mark? not) (set! k4b36@k2ea2@anti-mark? k2ea2@anti-mark?) (set! k2ea4@mkstx (lambda (k328c@e k328d@m* k328e@s* k328f@ae*) (if (and (k2e88@stx? k328c@e) (not (k2e42@top-marked? k328d@m*))) (call-with-values (lambda () (join-wraps k328d@m* k328e@s* k328f@ae* k328c@e)) (lambda (k329a@k3295 k329b@k3297 k329c@k3299) (let ((k32a0@ae* k329c@k3299) (k32a1@s* k329b@k3297) (k32a2@m* k329a@k3295)) (make-simple-struct 'stx '5 (list (k2e8a@stx-expr k328c@e) k32a2@m* k32a1@s* k32a0@ae*))))) (make-simple-struct 'stx '5 (list k328c@e k328d@m* k328e@s* k328f@ae*))))) (set! k4b37@k2ea4@mkstx k2ea4@mkstx) (set! k2ea6@add-mark (lambda (k32a6@m k32a7@e k32a8@ae) (k2ea4@mkstx k32a7@e (list k32a6@m) '(shift) (list k32a8@ae)))) (set! k4b38@k2ea6@add-mark k2ea6@add-mark) (set! k2ea8@add-subst (lambda (k32ac@subst k32ad@e) (k2ea4@mkstx k32ad@e '() (list k32ac@subst) '()))) (set! k4b39@k2ea8@add-subst k2ea8@add-subst) (set! k2eaa@syntax-kind? (lambda (k32b0@x k32b1@p?) (if (k2e88@stx? k32b0@x) (k2eaa@syntax-kind? (k2e8a@stx-expr k32b0@x) k32b1@p?) (if (k2a00@k28d2@annotation? k32b0@x) (k2eaa@syntax-kind? (k2a02@k28d6@annotation-expression k32b0@x) k32b1@p?) (k32b1@p? k32b0@x))))) (set! k4b3a@k2eaa@syntax-kind? k2eaa@syntax-kind?) (set! k2eac@syntax-vector->list (lambda (k32b4@x) (if (k2e88@stx? k32b4@x) (let ((k32b6@ls (k2eac@syntax-vector->list (k2e8a@stx-expr k32b4@x))) (k32b7@m* (k2e8e@stx-mark* k32b4@x)) (k32b8@s* (k2e92@stx-subst* k32b4@x)) (k32b9@ae* (k2e96@stx-ae* k32b4@x))) (map (lambda (k32be@x) (k2ea4@mkstx k32be@x k32b7@m* k32b8@s* k32b9@ae*)) k32b6@ls)) (if (k2a00@k28d2@annotation? k32b4@x) (k2eac@syntax-vector->list (k2a02@k28d6@annotation-expression k32b4@x)) (if (vector? k32b4@x) (vector->list k32b4@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" k32b4@x)))))) (set! k4b3b@k2eac@syntax-vector->list k2eac@syntax-vector->list) (set! k2eae@syntax-pair? (lambda (k32c0@x) (k2eaa@syntax-kind? k32c0@x pair?))) (set! k4b3c@k2eae@syntax-pair? k2eae@syntax-pair?) (set! k2eb0@syntax-vector? (lambda (k32c2@x) (k2eaa@syntax-kind? k32c2@x vector?))) (set! k4b3d@k2eb0@syntax-vector? k2eb0@syntax-vector?) (set! k2eb2@syntax-null? (lambda (k32c4@x) (k2eaa@syntax-kind? k32c4@x null?))) (set! k4b3e@k2eb2@syntax-null? k2eb2@syntax-null?) (set! k2eb4@syntax-list? (lambda (k32c6@x) (or (k2eb2@syntax-null? k32c6@x) (and (k2eae@syntax-pair? k32c6@x) (k2eb4@syntax-list? (k2eb8@syntax-cdr k32c6@x)))))) (set! k4b3f@k2eb4@syntax-list? k2eb4@syntax-list?) (set! k2eb6@syntax-car (lambda (k32c8@x) (if (k2e88@stx? k32c8@x) (k2ea4@mkstx (k2eb6@syntax-car (k2e8a@stx-expr k32c8@x)) (k2e8e@stx-mark* k32c8@x) (k2e92@stx-subst* k32c8@x) (k2e96@stx-ae* k32c8@x)) (if (k2a00@k28d2@annotation? k32c8@x) (k2eb6@syntax-car (k2a02@k28d6@annotation-expression k32c8@x)) (if (pair? k32c8@x) (car k32c8@x) (assertion-violation 'syntax-car '"BUG: not a pair" k32c8@x)))))) (set! k4b40@k2eb6@syntax-car k2eb6@syntax-car) (set! k2eb8@syntax-cdr (lambda (k32ca@x) (if (k2e88@stx? k32ca@x) (k2ea4@mkstx (k2eb8@syntax-cdr (k2e8a@stx-expr k32ca@x)) (k2e8e@stx-mark* k32ca@x) (k2e92@stx-subst* k32ca@x) (k2e96@stx-ae* k32ca@x)) (if (k2a00@k28d2@annotation? k32ca@x) (k2eb8@syntax-cdr (k2a02@k28d6@annotation-expression k32ca@x)) (if (pair? k32ca@x) (cdr k32ca@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" k32ca@x)))))) (set! k4b41@k2eb8@syntax-cdr k2eb8@syntax-cdr) (set! k2eba@syntax->list (lambda (k32cc@x) (if (k2eae@syntax-pair? k32cc@x) (cons (k2eb6@syntax-car k32cc@x) (k2eba@syntax->list (k2eb8@syntax-cdr k32cc@x))) (if (k2eb2@syntax-null? k32cc@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" k32cc@x))))) (set! k4b42@k2eba@syntax->list k2eba@syntax->list) (set! k2ebc@id? (lambda (k32ce@x) (and (k2e88@stx? k32ce@x) (symbol? (k2e8a@stx-expr k32ce@x))))) (set! k4b43@k2ebc@id? k2ebc@id?) (set! k2ebe@id->sym (lambda (k32d0@x) (k2e8a@stx-expr k32d0@x))) (set! k4b44@k2ebe@id->sym k2ebe@id->sym) (set! k2ec0@bound-id=? (lambda (k32d2@x k32d3@y) (and (eq? (k2ebe@id->sym k32d2@x) (k2ebe@id->sym k32d3@y)) (same-marks? (k2e8e@stx-mark* k32d2@x) (k2e8e@stx-mark* k32d3@y))))) (set! k4b45@k2ec0@bound-id=? k2ec0@bound-id=?) (set! k2ec2@free-id=? (lambda (k32d6@i k32d7@j) (let ((k32da@t0 (id->real-label k32d6@i)) (k32db@t1 (id->real-label k32d7@j))) (if (or k32da@t0 k32db@t1) (eq? k32da@t0 k32db@t1) (eq? (k2ebe@id->sym k32d6@i) (k2ebe@id->sym k32d7@j)))))) (set! k4b46@k2ec2@free-id=? k2ec2@free-id=?) (set! k2ec4@valid-bound-ids? (lambda (k32de@id*) (and (for-all k2ebc@id? k32de@id*) (k2ec6@distinct-bound-ids? k32de@id*)))) (set! k4b47@k2ec4@valid-bound-ids? k2ec4@valid-bound-ids?) (set! k2ec6@distinct-bound-ids? (lambda (k32e0@id*) (or (null? k32e0@id*) (and (not (k2ec8@bound-id-member? (car k32e0@id*) (cdr k32e0@id*))) (k2ec6@distinct-bound-ids? (cdr k32e0@id*)))))) (set! k4b48@k2ec6@distinct-bound-ids? k2ec6@distinct-bound-ids?) (set! k2ec8@bound-id-member? (lambda (k32e2@id k32e3@id*) (and (pair? k32e3@id*) (or (k2ec0@bound-id=? k32e2@id (car k32e3@id*)) (k2ec8@bound-id-member? k32e2@id (cdr k32e3@id*)))))) (set! k4b49@k2ec8@bound-id-member? k2ec8@bound-id-member?) (set! k2eca@self-evaluating? (lambda (k32e6@x) (or (number? k32e6@x) (string? k32e6@x) (char? k32e6@x) (boolean? k32e6@x) (regexp? k32e6@x) (bytevector? k32e6@x)))) (set! k4b4a@k2eca@self-evaluating? k2eca@self-evaluating?) (set! k2ecc@strip-annotations (lambda (k32e8@x) (if (pair? k32e8@x) (cons (k2ecc@strip-annotations (car k32e8@x)) (k2ecc@strip-annotations (cdr k32e8@x))) (if (vector? k32e8@x) (vector-map k2ecc@strip-annotations k32e8@x) (if (k2a00@k28d2@annotation? k32e8@x) (k29ff@k28d0@annotation-stripped k32e8@x) k32e8@x))))) (set! k4b4b@k2ecc@strip-annotations k2ecc@strip-annotations) (set! k2ece@strip (lambda (k32ea@x k32eb@m*) (if (k2e42@top-marked? k32eb@m*) (if (or (k2a00@k28d2@annotation? k32ea@x) (and (pair? k32ea@x) (k2a00@k28d2@annotation? (car k32ea@x))) (and (vector? k32ea@x) (> (vector-length k32ea@x) '0) (k2a00@k28d2@annotation? (vector-ref k32ea@x '0)))) (k2ecc@strip-annotations k32ea@x) k32ea@x) (let k32f0@f ((k32ee@x k32ea@x)) (if (k2e88@stx? k32ee@x) (begin (if (pair? (k2e8a@stx-expr k32ee@x)) (begin (set-source-info! (k2e8a@stx-expr k32ee@x) '#f) (set-source-info! (cdr (k2e8a@stx-expr k32ee@x)) '#f) (set-source-info! (car (k2e8a@stx-expr k32ee@x)) '#f)) (void)) (k2ece@strip (k2e8a@stx-expr k32ee@x) (k2e8e@stx-mark* k32ee@x))) (if (k2a00@k28d2@annotation? k32ee@x) (k29ff@k28d0@annotation-stripped k32ee@x) (if (pair? k32ee@x) (let ((k32f2@a (k32f0@f (car k32ee@x))) (k32f3@d (k32f0@f (cdr k32ee@x)))) (if (and (eq? k32f2@a (car k32ee@x)) (eq? k32f3@d (cdr k32ee@x))) k32ee@x (cons k32f2@a k32f3@d))) (if (vector? k32ee@x) (let ((k32f6@old (vector->list k32ee@x))) (let ((k32f8@new (map k32f0@f k32f6@old))) (if (for-all eq? k32f6@old k32f8@new) k32ee@x (list->vector k32f8@new)))) k32ee@x)))))))) (set! k4b4c@k2ece@strip k2ece@strip) (set! k2ed0@stx->datum (lambda (k32fa@x) (k2ece@strip k32fa@x '()))) (set! k4b4d@k2ed0@stx->datum k2ed0@stx->datum) (set! k2ed2@id->label (lambda (k32fc@id) (or (id->real-label k32fc@id) (let ((k32fe@t (k31b3@top-level-context))) (if k32fe@t ((lambda (k3300@env) (let ((k3302@rib (k3163@interaction-env-rib k3300@env))) (call-with-values (lambda () (k2e4c@gen-define-label+loc k32fc@id k3302@rib)) (lambda (k3308@k3305 k3309@k3307) (let ((k330c@loc_ k3309@k3307) (k330d@lab k3308@k3305)) (begin (k2e72@extend-rib! k3302@rib k32fc@id k330d@lab) k330d@lab)))))) k32fe@t) '#f))))) (set! k4b4e@k2ed2@id->label k2ed2@id->label) (set! k2ed4@label->binding (lambda (k3310@x k3311@r) (let ((k3314@t (k2cd7@k2b24@imported-label->binding k3310@x))) (if k3314@t ((lambda (k3316@b) (if (and (pair? k3316@b) (eq? (car k3316@b) '$core-rtd)) (cons '$rtd (map k3079@bless (cdr k3316@b))) (if (and (pair? k3316@b) (eq? (car k3316@b) 'global-rtd)) (let ((k3318@lib (cadr k3316@b)) (k3319@loc (cddr k3316@b))) (cons '$rtd (symbol-value k3319@loc))) k3316@b))) k3314@t) (let ((k331c@t (assq k3310@x k3311@r))) (if k331c@t (cdr k331c@t) (let ((k331e@t (k31b3@top-level-context))) (if k331e@t ((lambda (k3320@env) (let ((k3322@t (assq k3310@x (k316b@interaction-env-locs k3320@env)))) (if k3322@t ((lambda (k3324@p) (cons* 'lexical (cdr k3324@p) '#f)) k3322@t) '(displaced-lexical . #f)))) k331e@t) '(displaced-lexical . #f))))))))) (set! k4b4f@k2ed4@label->binding k2ed4@label->binding) (set! k2ed6@make-binding cons) (set! k4b50@k2ed6@make-binding k2ed6@make-binding) (set! k2ed8@binding-type car) (set! k4b51@k2ed8@binding-type k2ed8@binding-type) (set! k2eda@binding-value cdr) (set! k4b52@k2eda@binding-value k2eda@binding-value) (set! k2edc@raise-unbound-error (lambda (k3326@id) (k31a1@syntax-violation* '#f '"unbound identifier" k3326@id (make-undefined-violation)))) (set! k4b53@k2edc@raise-unbound-error k2edc@raise-unbound-error) (set! k2ede@syntax-type (lambda (k3328@e k3329@r) (if (k2ebc@id? k3328@e) (let ((k332c@id k3328@e)) (let ((k332e@label (k2ed2@id->label k332c@id))) (let ((k3330@b (k2ed4@label->binding k332e@label k3329@r))) (let ((k3332@type (k2ed8@binding-type k3330@b))) (begin (if (not k332e@label) (k2edc@raise-unbound-error k332c@id) (void)) (let ((k3334@t k3332@type)) (if (memv k3334@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values k3332@type (k2eda@binding-value k3330@b) k332c@id) (values 'other '#f '#f)))))))) (if (k2eae@syntax-pair? k3328@e) (let ((k3336@id (k2eb6@syntax-car k3328@e))) (if (k2ebc@id? k3336@id) (let ((k3338@label (k2ed2@id->label k3336@id))) (let ((k333a@b (k2ed4@label->binding k3338@label k3329@r))) (let ((k333c@type (k2ed8@binding-type k333a@b))) (begin (if (not k3338@label) (k2edc@raise-unbound-error k3336@id) (void)) (let ((k333e@t k333c@type)) (if (memv k333e@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values k333c@type (k2eda@binding-value k333a@b) k3336@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((k3340@d (k2ed0@stx->datum k3328@e))) (if (k2eca@self-evaluating? k3340@d) (values 'constant k3340@d '#f) (values 'other '#f '#f))))))) (set! k4b54@k2ede@syntax-type k2ede@syntax-type) (set! k2eec@sanitize-binding (lambda (k3342@x k3343@src) (if (procedure? k3342@x) (cons* 'local-macro k3342@x k3343@src) (if (and (pair? k3342@x) (eq? (car k3342@x) 'macro!) (procedure? (cdr k3342@x))) (cons* 'local-macro! (cdr k3342@x) k3343@src) (if (and (pair? k3342@x) (eq? (car k3342@x) '$rtd)) k3342@x (assertion-violation 'expand '"invalid transformer" k3342@x)))))) (set! k4b55@k2eec@sanitize-binding k2eec@sanitize-binding) (set! k2eee@make-variable-transformer (lambda (k3346@x) (if (procedure? k3346@x) (cons 'macro! k3346@x) (assertion-violation 'make-variable-transformer '"not a procedure" k3346@x)))) (set! k4b56@k2eee@make-variable-transformer k2eee@make-variable-transformer) (set! k2ef0@variable-transformer? (lambda (k3348@x) (and (pair? k3348@x) (eq? (car k3348@x) 'macro!) (procedure? (cdr k3348@x))))) (set! k4b57@k2ef0@variable-transformer? k2ef0@variable-transformer?) (set! k2ef2@variable-transformer-procedure (lambda (k334a@x) (if (k2ef0@variable-transformer? k334a@x) (cdr k334a@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" k334a@x)))) (set! k4b58@k2ef2@variable-transformer-procedure k2ef2@variable-transformer-procedure) (set! k2ef4@make-eval-transformer (lambda (k334c@x) (k2eec@sanitize-binding (eval-core (k2a62@k2a1a@expanded->core k334c@x)) k334c@x))) (set! k4b59@k2ef4@make-eval-transformer k2ef4@make-eval-transformer) (set! k3045@parse-define (lambda (k334e@x) (let ((k3350@t k334e@x)) (let ((k3352@ls/false (k30c3@syntax-dispatch k3350@t '(_ (any . any) any . each-any)))) (if (and k3352@ls/false (apply (lambda (k3354@id k3355@fmls k3356@b k3357@b*) (k2ebc@id? k3354@id)) k3352@ls/false)) (apply (lambda (k335c@id k335d@fmls k335e@b k335f@b*) (begin (k30e9@verify-formals k335d@fmls k334e@x) (values k335c@id (cons 'defun (cons k335d@fmls (cons k335e@b k335f@b*)))))) k3352@ls/false) (let ((k3364@t k3350@t)) (let ((k3366@ls/false (k30c3@syntax-dispatch k3364@t '(_ any any)))) (if (and k3366@ls/false (apply (lambda (k3368@id k3369@val) (k2ebc@id? k3368@id)) k3366@ls/false)) (apply (lambda (k336c@id k336d@val) (values k336c@id (cons 'expr k336d@val))) k3366@ls/false) (let ((k3370@t k3364@t)) (let ((k3372@ls/false (k30c3@syntax-dispatch k3370@t '(_ any)))) (if (and k3372@ls/false (apply (lambda (k3374@id) (k2ebc@id? k3374@id)) k3372@ls/false)) (apply (lambda (k3376@id) (values k3376@id (cons 'expr (k3079@bless '(void))))) k3372@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3370@t)))))))))))) (set! k4b5a@k3045@parse-define k3045@parse-define) (set! k3047@parse-define-syntax (lambda (k3378@x) (let ((k337a@t k3378@x)) (let ((k337c@ls/false (k30c3@syntax-dispatch k337a@t '(_ any any)))) (if (and k337c@ls/false (apply (lambda (k337e@id k337f@val) (k2ebc@id? k337e@id)) k337c@ls/false)) (apply (lambda (k3382@id k3383@val) (values k3382@id k3383@val)) k337c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k337a@t)))))) (set! k4b5b@k3047@parse-define-syntax k3047@parse-define-syntax) (set! k3049@scheme-stx-hashtable (make-eq-hashtable)) (set! k4b5c@k3049@scheme-stx-hashtable k3049@scheme-stx-hashtable) (set! k304b@scheme-stx (lambda (k3386@sym) (or (hashtable-ref k3049@scheme-stx-hashtable k3386@sym '#f) (let ((k3388@subst (k2cb3@k2adc@library-subst (k2cd1@k2b18@find-library-by-name '(psyntax system $all))))) (let ((k338a@stx (make-simple-struct 'stx '5 (list k3386@sym k2e40@top-mark* '() '())))) (let ((k338c@stx (let ((k338e@t (assq k3386@sym k3388@subst))) (if k338e@t ((lambda (k3390@x) (let ((k3392@name (car k3390@x)) (k3393@label (cdr k3390@x))) (k2ea8@add-subst (make-simple-struct 'rib '6 (list (list k3392@name) (list k2e40@top-mark*) (list k3393@label) '#f '#f)) k338a@stx))) k338e@t) k338a@stx)))) (begin (hashtable-set! k3049@scheme-stx-hashtable k3386@sym k338c@stx) k338c@stx))))))) (set! k4b5d@k304b@scheme-stx k304b@scheme-stx) (set! k304d@lexical-var car) (set! k4b5e@k304d@lexical-var k304d@lexical-var) (set! k304f@lexical-mutable? cdr) (set! k4b5f@k304f@lexical-mutable? k304f@lexical-mutable?) (set! k3051@set-lexical-mutable! set-cdr!) (set! k4b60@k3051@set-lexical-mutable! k3051@set-lexical-mutable!) (set! k3053@add-lexical (lambda (k3396@lab k3397@lex k3398@r) (cons (cons* k3396@lab 'lexical k3397@lex '#f) k3398@r))) (set! k4b61@k3053@add-lexical k3053@add-lexical) (set! k3055@add-lexicals (lambda (k339c@lab* k339d@lex* k339e@r) (if (null? k339c@lab*) k339e@r (k3055@add-lexicals (cdr k339c@lab*) (cdr k339d@lex*) (k3053@add-lexical (car k339c@lab*) (car k339d@lex*) k339e@r))))) (set! k4b62@k3055@add-lexicals k3055@add-lexicals) (set! k3057@letrec-helper (lambda (k33a2@e k33a3@r k33a4@mr k33a5@build) (let ((k33aa@t k33a2@e)) (let ((k33ac@ls/false (k30c3@syntax-dispatch k33aa@t '(_ #(each (any any)) any . each-any)))) (if k33ac@ls/false (apply (lambda (k33ae@lhs* k33af@rhs* k33b0@b k33b1@b*) (if (not (k2ec4@valid-bound-ids? k33ae@lhs*)) (k307d@invalid-fmls-error k33a2@e k33ae@lhs*) (let ((k33b6@lex* (map k2e44@gen-lexical k33ae@lhs*)) (k33b7@lab* (map k2e48@gen-label k33ae@lhs*))) (let ((k33ba@rib (k2e7c@make-full-rib k33ae@lhs* k33b7@lab*)) (k33bb@r (k3055@add-lexicals k33b7@lab* k33b6@lex* k33a3@r))) (let ((k33be@body (k30fb@chi-internal (k2ea8@add-subst k33ba@rib (cons k33b0@b k33b1@b*)) k33bb@r k33a4@mr)) (k33bf@rhs* (k30e1@chi-expr* (map (lambda (k33c2@x) (k2ea8@add-subst k33ba@rib k33c2@x)) k33af@rhs*) k33bb@r k33a4@mr))) (k33a5@build '#f k33b6@lex* k33bf@rhs* k33be@body)))))) k33ac@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k33aa@t)))))) (set! k4b63@k3057@letrec-helper k3057@letrec-helper) (set! k3059@let-transformer (lambda (k33c4@e k33c5@r k33c6@mr) (let ((k33ca@t k33c4@e)) (let ((k33cc@ls/false (k30c3@syntax-dispatch k33ca@t '(_ #(each (any any)) any . each-any)))) (if k33cc@ls/false (apply (lambda (k33ce@lhs* k33cf@rhs* k33d0@b k33d1@b*) (if (not (k2ec4@valid-bound-ids? k33ce@lhs*)) (k307d@invalid-fmls-error k33c4@e k33ce@lhs*) (let ((k33d6@lex* (map k2e44@gen-lexical k33ce@lhs*)) (k33d7@lab* (map k2e48@gen-label k33ce@lhs*)) (k33d8@rhs* (k30e1@chi-expr* k33cf@rhs* k33c5@r k33c6@mr))) (let ((k33dc@rib (k2e7c@make-full-rib k33ce@lhs* k33d7@lab*)) (k33dd@r (k3055@add-lexicals k33d7@lab* k33d6@lex* k33c5@r))) (let ((k33e0@body (k30fb@chi-internal (k2ea8@add-subst k33dc@rib (cons k33d0@b k33d1@b*)) k33dd@r k33c6@mr))) (k2e24@k2d87@build-let '#f k33d6@lex* k33d8@rhs* k33e0@body)))))) k33cc@ls/false) (let ((k33e2@t k33ca@t)) (let ((k33e4@ls/false (k30c3@syntax-dispatch k33e2@t '(_ any #(each (any any)) any . each-any)))) (if k33e4@ls/false (apply (lambda (k33e6@loop k33e7@lhs* k33e8@rhs* k33e9@b k33ea@b*) (if (not (k2ec4@valid-bound-ids? k33e7@lhs*)) (k307d@invalid-fmls-error k33c4@e k33e7@lhs*) (let ((k33f0@lex* (map k2e44@gen-lexical k33e7@lhs*)) (k33f1@lab* (map k2e48@gen-label k33e7@lhs*)) (k33f2@rhs* (k30e1@chi-expr* k33e8@rhs* k33c5@r k33c6@mr)) (k33f3@loop-lex (k2e44@gen-lexical k33e6@loop)) (k33f4@loop-lab (k2e48@gen-label k33e6@loop))) (let ((k33fa@loop-rib (k2e7c@make-full-rib (list k33e6@loop) (list k33f4@loop-lab))) (k33fb@rib (k2e7c@make-full-rib k33e7@lhs* k33f1@lab*)) (k33fc@r (k3055@add-lexicals (cons k33f4@loop-lab k33f1@lab*) (cons k33f3@loop-lex k33f0@lex*) k33c5@r))) (let ((k3400@body (k30fb@chi-internal (k2ea8@add-subst k33fa@loop-rib (k2ea8@add-subst k33fb@rib (cons k33e9@b k33ea@b*))) k33fc@r k33c6@mr))) (k2e25@k2d89@build-named-let '#f k33f3@loop-lex k33f0@lex* k33f2@rhs* k3400@body)))))) k33e4@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k33e2@t))))))))) (set! k4b64@k3059@let-transformer k3059@let-transformer) (set! k305b@letrec-transformer (lambda (k3402@e k3403@r k3404@mr) (k3057@letrec-helper k3402@e k3403@r k3404@mr k2e23@k2d85@build-letrec))) (set! k4b65@k305b@letrec-transformer k305b@letrec-transformer) (set! k305d@letrec*-transformer (lambda (k3408@e k3409@r k340a@mr) (k3057@letrec-helper k3408@e k3409@r k340a@mr k2e26@k2d8b@build-letrec*))) (set! k4b66@k305d@letrec*-transformer k305d@letrec*-transformer) (set! k305f@fluid-let-syntax-transformer (lambda (k340e@e k340f@r k3410@mr) (letrec* ((k3415@lookup (lambda (k3428@x) (or (k2ed2@id->label k3428@x) (k31a3@syntax-violation '#f '"unbound identifier" k340e@e k3428@x))))) (let ((k3416@t k340e@e)) (let ((k3418@ls/false (k30c3@syntax-dispatch k3416@t '(_ #(each (any any)) any . each-any)))) (if k3418@ls/false (apply (lambda (k341a@lhs* k341b@rhs* k341c@b k341d@b*) (if (not (k2ec4@valid-bound-ids? k341a@lhs*)) (k307d@invalid-fmls-error k340e@e k341a@lhs*) (let ((k3422@lab* (map k3415@lookup k341a@lhs*)) (k3423@rhs* (map (lambda (k3426@x) (k2ef4@make-eval-transformer (k311d@expand-transformer k3426@x k3410@mr))) k341b@rhs*))) (k30fb@chi-internal (cons k341c@b k341d@b*) (append (map cons k3422@lab* k3423@rhs*) k340f@r) (append (map cons k3422@lab* k3423@rhs*) k3410@mr))))) k3418@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3416@t))))))) (set! k4b67@k305f@fluid-let-syntax-transformer k305f@fluid-let-syntax-transformer) (set! k3061@type-descriptor-transformer (lambda (k342a@e k342b@r k342c@mr) (let ((k3430@t k342a@e)) (let ((k3432@ls/false (k30c3@syntax-dispatch k3430@t '(_ any)))) (if (and k3432@ls/false (apply (lambda (k3434@id) (k2ebc@id? k3434@id)) k3432@ls/false)) (apply (lambda (k3436@id) (let ((k3438@lab (k2ed2@id->label k3436@id))) (let ((k343a@b (k2ed4@label->binding k3438@lab k342b@r))) (let ((k343c@type (k2ed8@binding-type k343a@b))) (begin (if (not k3438@lab) (k2edc@raise-unbound-error k3436@id) (void)) (if (not (and (eq? k343c@type '$rtd) (not (list? (k2eda@binding-value k343a@b))))) (k31a3@syntax-violation '#f '"not a record type" k342a@e) (void)) (list 'quote (k2eda@binding-value k343a@b))))))) k3432@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3430@t)))))) (set! k4b68@k3061@type-descriptor-transformer k3061@type-descriptor-transformer) (set! k3063@record-type-descriptor-transformer (lambda (k343e@e k343f@r k3440@mr) (let ((k3444@t k343e@e)) (let ((k3446@ls/false (k30c3@syntax-dispatch k3444@t '(_ any)))) (if (and k3446@ls/false (apply (lambda (k3448@id) (k2ebc@id? k3448@id)) k3446@ls/false)) (apply (lambda (k344a@id) (let ((k344c@lab (k2ed2@id->label k344a@id))) (let ((k344e@b (k2ed4@label->binding k344c@lab k343f@r))) (let ((k3450@type (k2ed8@binding-type k344e@b))) (begin (if (not k344c@lab) (k2edc@raise-unbound-error k344a@id) (void)) (if (not (and (eq? k3450@type '$rtd) (list? (k2eda@binding-value k344e@b)))) (k31a3@syntax-violation '#f '"not a record type" k343e@e) (void)) (k30e5@chi-expr (car (k2eda@binding-value k344e@b)) k343f@r k3440@mr)))))) k3446@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3444@t)))))) (set! k4b69@k3063@record-type-descriptor-transformer k3063@record-type-descriptor-transformer) (set! k3065@record-constructor-descriptor-transformer (lambda (k3452@e k3453@r k3454@mr) (let ((k3458@t k3452@e)) (let ((k345a@ls/false (k30c3@syntax-dispatch k3458@t '(_ any)))) (if (and k345a@ls/false (apply (lambda (k345c@id) (k2ebc@id? k345c@id)) k345a@ls/false)) (apply (lambda (k345e@id) (let ((k3460@lab (k2ed2@id->label k345e@id))) (let ((k3462@b (k2ed4@label->binding k3460@lab k3453@r))) (let ((k3464@type (k2ed8@binding-type k3462@b))) (begin (if (not k3460@lab) (k2edc@raise-unbound-error k345e@id) (void)) (if (not (and (eq? k3464@type '$rtd) (list? (k2eda@binding-value k3462@b)))) (k31a3@syntax-violation '#f '"invalid type" k3452@e) (void)) (k30e5@chi-expr (cadr (k2eda@binding-value k3462@b)) k3453@r k3454@mr)))))) k345a@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3458@t)))))) (set! k4b6a@k3065@record-constructor-descriptor-transformer k3065@record-constructor-descriptor-transformer) (set! k3067@when-macro (lambda (k3466@e) (let ((k3468@t k3466@e)) (let ((k346a@ls/false (k30c3@syntax-dispatch k3468@t '(_ any any . each-any)))) (if k346a@ls/false (apply (lambda (k346c@test k346d@e k346e@e*) (k3079@bless (list 'if k346c@test (cons 'begin (cons k346d@e k346e@e*))))) k346a@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3468@t)))))) (set! k4b6b@k3067@when-macro k3067@when-macro) (set! k3069@unless-macro (lambda (k3472@e) (let ((k3474@t k3472@e)) (let ((k3476@ls/false (k30c3@syntax-dispatch k3474@t '(_ any any . each-any)))) (if k3476@ls/false (apply (lambda (k3478@test k3479@e k347a@e*) (k3079@bless (list 'if (list 'not k3478@test) (cons 'begin (cons k3479@e k347a@e*))))) k3476@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3474@t)))))) (set! k4b6c@k3069@unless-macro k3069@unless-macro) (set! k306b@if-transformer (lambda (k347e@e k347f@r k3480@mr) (let ((k3484@t k347e@e)) (let ((k3486@ls/false (k30c3@syntax-dispatch k3484@t '(_ any any any)))) (if k3486@ls/false (apply (lambda (k3488@e0 k3489@e1 k348a@e2) (list 'if (k30e5@chi-expr k3488@e0 k347f@r k3480@mr) (k30e5@chi-expr k3489@e1 k347f@r k3480@mr) (k30e5@chi-expr k348a@e2 k347f@r k3480@mr))) k3486@ls/false) (let ((k348e@t k3484@t)) (let ((k3490@ls/false (k30c3@syntax-dispatch k348e@t '(_ any any)))) (if k3490@ls/false (apply (lambda (k3492@e0 k3493@e1) (list 'if (k30e5@chi-expr k3492@e0 k347f@r k3480@mr) (k30e5@chi-expr k3493@e1 k347f@r k3480@mr) (k2e22@k2d83@build-void))) k3490@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k348e@t))))))))) (set! k4b6d@k306b@if-transformer k306b@if-transformer) (set! k306d@and-transformer (lambda (k3496@e k3497@r k3498@mr) (let ((k349c@t k3496@e)) (let ((k349e@ls/false (k30c3@syntax-dispatch k349c@t '(_ . each-any)))) (if k349e@ls/false (apply (lambda (k34a0@e*) (cons 'and (k30e1@chi-expr* k34a0@e* k3497@r k3498@mr))) k349e@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k349c@t)))))) (set! k4b6e@k306d@and-transformer k306d@and-transformer) (set! k306f@or-transformer (lambda (k34a2@e k34a3@r k34a4@mr) (let ((k34a8@t k34a2@e)) (let ((k34aa@ls/false (k30c3@syntax-dispatch k34a8@t '(_ . each-any)))) (if k34aa@ls/false (apply (lambda (k34ac@e*) (cons 'or (k30e1@chi-expr* k34ac@e* k34a3@r k34a4@mr))) k34aa@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k34a8@t)))))) (set! k4b6f@k306f@or-transformer k306f@or-transformer) (set! k3071@case-macro (lambda (k34ae@e) (letrec* ((k34b1@build-last (lambda (k34d8@cls) (let ((k34da@t k34d8@cls)) (let ((k34dc@ls/false (k30c3@syntax-dispatch k34da@t '(#(scheme-id else) any . each-any)))) (if k34dc@ls/false (apply (lambda (k34de@e k34df@e*) (cons 'begin (cons k34de@e k34df@e*))) k34dc@ls/false) (let ((k34e2@t k34da@t)) (let ((k34e4@ls/false (k30c3@syntax-dispatch k34e2@t '_))) (if k34e4@ls/false (apply (lambda () (k34b3@build-one k34d8@cls '(if #f #f))) k34e4@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k34e2@t))))))))) (k34b3@build-one (lambda (k34ca@cls k34cb@k) (let ((k34ce@t k34ca@cls)) (let ((k34d0@ls/false (k30c3@syntax-dispatch k34ce@t '(each-any any . each-any)))) (if k34d0@ls/false (apply (lambda (k34d2@d* k34d3@e k34d4@e*) (list 'if (list 'memv 't (list 'quote k34d2@d*)) (cons 'begin (cons k34d3@e k34d4@e*)) k34cb@k)) k34d0@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k34ce@t))))))) (let ((k34b4@t k34ae@e)) (let ((k34b6@ls/false (k30c3@syntax-dispatch k34b4@t '(_ any)))) (if k34b6@ls/false (apply (lambda (k34b8@expr) (k3079@bless (cons 'let (cons (list (list 't k34b8@expr)) '((if #f #f)))))) k34b6@ls/false) (let ((k34ba@t k34b4@t)) (let ((k34bc@ls/false (k30c3@syntax-dispatch k34ba@t '(_ any any . each-any)))) (if k34bc@ls/false (apply (lambda (k34be@expr k34bf@cls k34c0@cls*) (k3079@bless (list 'let (list (list 't k34be@expr)) (let k34c8@f ((k34c4@cls k34bf@cls) (k34c5@cls* k34c0@cls*)) (if (null? k34c5@cls*) (k34b1@build-last k34c4@cls) (k34b3@build-one k34c4@cls (k34c8@f (car k34c5@cls*) (cdr k34c5@cls*)))))))) k34bc@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k34ba@t)))))))))) (set! k4b70@k3071@case-macro k3071@case-macro) (set! k3073@quote-transformer (lambda (k34e6@e k34e7@r k34e8@mr) (let ((k34ec@t k34e6@e)) (let ((k34ee@ls/false (k30c3@syntax-dispatch k34ec@t '(_ any)))) (if k34ee@ls/false (apply (lambda (k34f0@datum) (list 'quote (k2ed0@stx->datum k34f0@datum))) k34ee@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k34ec@t)))))) (set! k4b71@k3073@quote-transformer k3073@quote-transformer) (set! k3075@case-lambda-transformer (lambda (k34f2@e k34f3@r k34f4@mr) (let ((k34f8@t k34f2@e)) (let ((k34fa@ls/false (k30c3@syntax-dispatch k34f8@t '(_ . #(each (any any . each-any)))))) (if k34fa@ls/false (apply (lambda (k34fc@fmls* k34fd@b* k34fe@b**) (call-with-values (lambda () (k30ed@chi-lambda-clause* k34f2@e k34fc@fmls* (map cons k34fd@b* k34fe@b**) k34f3@r k34f4@mr)) (lambda (k3506@k3503 k3507@k3505) (let ((k350a@body* k3507@k3505) (k350b@fmls* k3506@k3503)) (k2e20@k2d53@build-case-lambda '#f k350b@fmls* k350a@body*))))) k34fa@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k34f8@t)))))) (set! k4b72@k3075@case-lambda-transformer k3075@case-lambda-transformer) (set! k3077@lambda-transformer (lambda (k350e@e k350f@r k3510@mr) (let ((k3514@t k350e@e)) (let ((k3516@ls/false (k30c3@syntax-dispatch k3514@t '(_ any any . each-any)))) (if k3516@ls/false (apply (lambda (k3518@fmls k3519@b k351a@b*) (call-with-values (lambda () (k30eb@chi-lambda-clause k350e@e k3518@fmls (cons k3519@b k351a@b*) k350f@r k3510@mr)) (lambda (k3522@k351f k3523@k3521) (let ((k3526@body k3523@k3521) (k3527@fmls k3522@k351f)) (k2e1f@k2d51@build-lambda '#f k3527@fmls k3526@body))))) k3516@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3514@t)))))) (set! k4b73@k3077@lambda-transformer k3077@lambda-transformer) (set! k3079@bless (lambda (k352a@x) (k2ea4@mkstx (let k352e@f ((k352c@x k352a@x)) (if (k2e88@stx? k352c@x) k352c@x (if (pair? k352c@x) (cons (k352e@f (car k352c@x)) (k352e@f (cdr k352c@x))) (if (symbol? k352c@x) (k304b@scheme-stx k352c@x) (if (vector? k352c@x) (vector-map k352e@f k352c@x) k352c@x))))) '() '() '()))) (set! k4b74@k3079@bless k3079@bless) (set! k307b@with-syntax-macro (lambda (k3530@e) (let ((k3532@t k3530@e)) (let ((k3534@ls/false (k30c3@syntax-dispatch k3532@t '(_ #(each (any any)) any . each-any)))) (if k3534@ls/false (apply (lambda (k3536@pat* k3537@expr* k3538@b k3539@b*) (let ((k353e@idn* (let k3542@f ((k3540@pat* k3536@pat*)) (if (null? k3540@pat*) '() (call-with-values (lambda () (k30c1@convert-pattern (car k3540@pat*) '())) (lambda (k3548@k3545 k3549@k3547) (let ((k354c@idn* k3549@k3547) (k354d@pat k3548@k3545)) (append k354c@idn* (k3542@f (cdr k3540@pat*)))))))))) (begin (k30e9@verify-formals (map car k353e@idn*) k3530@e) (let ((k3550@t* (k3191@generate-temporaries k3537@expr*))) (k3079@bless (list 'let (map list k3550@t* k3537@expr*) (let k3556@f ((k3552@pat* k3536@pat*) (k3553@t* k3550@t*)) (if (null? k3552@pat*) (cons 'begin (cons '#f (cons k3538@b k3539@b*))) (list 'syntax-case (car k3553@t*) '() (list (car k3552@pat*) (k3556@f (cdr k3552@pat*) (cdr k3553@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car k3552@pat*)) (car k3553@t*)))))))))))) k3534@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3532@t)))))) (set! k4b75@k307b@with-syntax-macro k307b@with-syntax-macro) (set! k307d@invalid-fmls-error (lambda (k3558@stx k3559@fmls) (let ((k355c@t k3559@fmls)) (let ((k355e@ls/false (k30c3@syntax-dispatch k355c@t '#(each+ any () any)))) (if k355e@ls/false (apply (lambda (k3560@id* k3561@last) (let k3566@f ((k3564@id* (if (k2ebc@id? k3561@last) (cons k3561@last k3560@id*) (if (k2eb2@syntax-null? k3561@last) k3560@id* (k31a3@syntax-violation '#f '"not an identifier" k3558@stx k3561@last))))) (if (null? k3564@id*) (values) (if (not (k2ebc@id? (car k3564@id*))) (k31a3@syntax-violation '#f '"not an identifier" k3558@stx (car k3564@id*)) (begin (k3566@f (cdr k3564@id*)) (if (k2ec8@bound-id-member? (car k3564@id*) (cdr k3564@id*)) (k31a3@syntax-violation '#f '"duplicate binding" k3558@stx (car k3564@id*)) (void))))))) k355e@ls/false) (let ((k3568@t k355c@t)) (let ((k356a@ls/false (k30c3@syntax-dispatch k3568@t '_))) (if k356a@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"malformed binding form" k3558@stx k3559@fmls)) k356a@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3568@t))))))))) (set! k4b76@k307d@invalid-fmls-error k307d@invalid-fmls-error) (set! k307f@let-macro (lambda (k356c@stx) (let ((k356e@t k356c@stx)) (let ((k3570@ls/false (k30c3@syntax-dispatch k356e@t '(_ #(each (any any)) any . each-any)))) (if k3570@ls/false (apply (lambda (k3572@lhs* k3573@rhs* k3574@b k3575@b*) (if (k2ec4@valid-bound-ids? k3572@lhs*) (k3079@bless (cons (cons 'lambda (cons k3572@lhs* (cons k3574@b k3575@b*))) k3573@rhs*)) (k307d@invalid-fmls-error k356c@stx k3572@lhs*))) k3570@ls/false) (let ((k357a@t k356e@t)) (let ((k357c@ls/false (k30c3@syntax-dispatch k357a@t '(_ any #(each (any any)) any . each-any)))) (if (and k357c@ls/false (apply (lambda (k357e@f k357f@lhs* k3580@rhs* k3581@b k3582@b*) (k2ebc@id? k357e@f)) k357c@ls/false)) (apply (lambda (k3588@f k3589@lhs* k358a@rhs* k358b@b k358c@b*) (if (k2ec4@valid-bound-ids? k3589@lhs*) (k3079@bless (cons (list 'letrec (list (list k3588@f (cons 'lambda (cons k3589@lhs* (cons k358b@b k358c@b*))))) k3588@f) k358a@rhs*)) (k307d@invalid-fmls-error k356c@stx k3589@lhs*))) k357c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k357a@t))))))))) (set! k4b77@k307f@let-macro k307f@let-macro) (set! k3081@let-values-macro (lambda (k3592@stx) (letrec* ((k3595@rename (lambda (k35fa@x k35fb@old* k35fc@new*) (begin (if (not (k2ebc@id? k35fa@x)) (k31a3@syntax-violation '#f '"not an indentifier" k3592@stx k35fa@x) (void)) (if (k2ec8@bound-id-member? k35fa@x k35fb@old*) (k31a3@syntax-violation '#f '"duplicate binding" k3592@stx k35fa@x) (void)) (let ((k3600@y (gensym (k31a9@syntax->datum k35fa@x)))) (values k3600@y (cons k35fa@x k35fb@old*) (cons k3600@y k35fc@new*)))))) (k3597@rename* (lambda (k35e8@x* k35e9@old* k35ea@new*) (if (null? k35e8@x*) (values '() k35e9@old* k35ea@new*) (call-with-values (lambda () (k3595@rename (car k35e8@x*) k35e9@old* k35ea@new*)) (lambda (k35ee@x k35ef@old* k35f0@new*) (call-with-values (lambda () (k3597@rename* (cdr k35e8@x*) k35ef@old* k35f0@new*)) (lambda (k35f4@x* k35f5@old* k35f6@new*) (values (cons k35ee@x k35f4@x*) k35f5@old* k35f6@new*))))))))) (let ((k3598@t k3592@stx)) (let ((k359a@ls/false (k30c3@syntax-dispatch k3598@t '(_ () any . each-any)))) (if k359a@ls/false (apply (lambda (k359c@b k359d@b*) (cons* (k3079@bless 'let) '() k359c@b k359d@b*)) k359a@ls/false) (let ((k35a0@t k3598@t)) (let ((k35a2@ls/false (k30c3@syntax-dispatch k35a0@t '(_ #(each (any any)) any . each-any)))) (if k35a2@ls/false (apply (lambda (k35a4@lhs* k35a5@rhs* k35a6@b k35a7@b*) (k3079@bless (let k35b4@f ((k35ac@lhs* k35a4@lhs*) (k35ad@rhs* k35a5@rhs*) (k35ae@old* '()) (k35af@new* '())) (if (null? k35ac@lhs*) (cons 'let (cons (map list k35ae@old* k35af@new*) (cons k35a6@b k35a7@b*))) (let ((k35b6@t (car k35ac@lhs*))) (let ((k35b8@ls/false (k30c3@syntax-dispatch k35b6@t 'each-any))) (if k35b8@ls/false (apply (lambda (k35ba@x*) (call-with-values (lambda () (k3597@rename* k35ba@x* k35ae@old* k35af@new*)) (lambda (k35c2@k35bd k35c3@k35bf k35c4@k35c1) (let ((k35c8@new* k35c4@k35c1) (k35c9@old* k35c3@k35bf) (k35ca@y* k35c2@k35bd)) (list 'call-with-values (list 'lambda '() (car k35ad@rhs*)) (list 'lambda k35ca@y* (k35b4@f (cdr k35ac@lhs*) (cdr k35ad@rhs*) k35c9@old* k35c8@new*))))))) k35b8@ls/false) (let ((k35ce@t k35b6@t)) (let ((k35d0@ls/false (k30c3@syntax-dispatch k35ce@t '#(each+ any () any)))) (if k35d0@ls/false (apply (lambda (k35d2@x* k35d3@x) (call-with-values (lambda () (k3595@rename k35d3@x k35ae@old* k35af@new*)) (lambda (k35d6@y k35d7@old* k35d8@new*) (call-with-values (lambda () (k3597@rename* k35d2@x* k35d7@old* k35d8@new*)) (lambda (k35dc@y* k35dd@old* k35de@new*) (list 'call-with-values (list 'lambda '() (car k35ad@rhs*)) (list 'lambda (append k35dc@y* k35d6@y) (k35b4@f (cdr k35ac@lhs*) (cdr k35ad@rhs*) k35dd@old* k35de@new*)))))))) k35d0@ls/false) (let ((k35e2@t k35ce@t)) (let ((k35e4@ls/false (k30c3@syntax-dispatch k35e2@t 'any))) (if k35e4@ls/false (apply (lambda (k35e6@others) (k31a3@syntax-violation '#f '"malformed bindings" k3592@stx k35e6@others)) k35e4@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k35e2@t)))))))))))))) k35a2@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k35a0@t)))))))))) (set! k4b78@k3081@let-values-macro k3081@let-values-macro) (set! k3083@let*-values-macro (lambda (k3602@stx) (letrec* ((k3605@check (lambda (k3634@x*) (if (not (null? k3634@x*)) (let ((k3636@x (car k3634@x*))) (begin (if (not (k2ebc@id? k3636@x)) (k31a3@syntax-violation '#f '"not an identifier" k3602@stx k3636@x) (void)) (k3605@check (cdr k3634@x*)) (if (k2ec8@bound-id-member? k3636@x (cdr k3634@x*)) (k31a3@syntax-violation '#f '"duplicate identifier" k3602@stx k3636@x) (void)))) (void))))) (let ((k3606@t k3602@stx)) (let ((k3608@ls/false (k30c3@syntax-dispatch k3606@t '(_ () any . each-any)))) (if k3608@ls/false (apply (lambda (k360a@b k360b@b*) (cons* (k3079@bless 'let) '() k360a@b k360b@b*)) k3608@ls/false) (let ((k360e@t k3606@t)) (let ((k3610@ls/false (k30c3@syntax-dispatch k360e@t '(_ #(each (any any)) any . each-any)))) (if k3610@ls/false (apply (lambda (k3612@lhs* k3613@rhs* k3614@b k3615@b*) (k3079@bless (let k361e@f ((k361a@lhs* k3612@lhs*) (k361b@rhs* k3613@rhs*)) (if (null? k361a@lhs*) (cons 'begin (cons k3614@b k3615@b*)) (let ((k3620@t (car k361a@lhs*))) (let ((k3622@ls/false (k30c3@syntax-dispatch k3620@t 'each-any))) (if k3622@ls/false (apply (lambda (k3624@x*) (begin (k3605@check k3624@x*) (list 'call-with-values (list 'lambda '() (car k361b@rhs*)) (list 'lambda k3624@x* (k361e@f (cdr k361a@lhs*) (cdr k361b@rhs*)))))) k3622@ls/false) (let ((k3626@t k3620@t)) (let ((k3628@ls/false (k30c3@syntax-dispatch k3626@t '#(each+ any () any)))) (if k3628@ls/false (apply (lambda (k362a@x* k362b@x) (begin (k3605@check (cons k362b@x k362a@x*)) (list 'call-with-values (list 'lambda '() (car k361b@rhs*)) (list 'lambda (append k362a@x* k362b@x) (k361e@f (cdr k361a@lhs*) (cdr k361b@rhs*)))))) k3628@ls/false) (let ((k362e@t k3626@t)) (let ((k3630@ls/false (k30c3@syntax-dispatch k362e@t 'any))) (if k3630@ls/false (apply (lambda (k3632@others) (k31a3@syntax-violation '#f '"malformed bindings" k3602@stx k3632@others)) k3630@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k362e@t)))))))))))))) k3610@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k360e@t)))))))))) (set! k4b79@k3083@let*-values-macro k3083@let*-values-macro) (set! k3085@trace-lambda-macro (lambda (k3638@stx) (let ((k363a@t k3638@stx)) (let ((k363c@ls/false (k30c3@syntax-dispatch k363a@t '(_ any each-any any . each-any)))) (if k363c@ls/false (apply (lambda (k363e@who k363f@fmls k3640@b k3641@b*) (if (k2ec4@valid-bound-ids? k363f@fmls) (k3079@bless (list 'make-traced-procedure (list 'quote k363e@who) (cons 'lambda (cons k363f@fmls (cons k3640@b k3641@b*))))) (k307d@invalid-fmls-error k3638@stx k363f@fmls))) k363c@ls/false) (let ((k3646@t k363a@t)) (let ((k3648@ls/false (k30c3@syntax-dispatch k3646@t '(_ any #(each+ any () any) any . each-any)))) (if k3648@ls/false (apply (lambda (k364a@who k364b@fmls k364c@last k364d@b k364e@b*) (if (k2ec4@valid-bound-ids? (cons k364c@last k364b@fmls)) (k3079@bless (list 'make-traced-procedure (list 'quote k364a@who) (cons 'lambda (cons (append k364b@fmls k364c@last) (cons k364d@b k364e@b*))))) (k307d@invalid-fmls-error k3638@stx (append k364b@fmls k364c@last)))) k3648@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3646@t))))))))) (set! k4b7a@k3085@trace-lambda-macro k3085@trace-lambda-macro) (set! k3087@trace-define-macro (lambda (k3654@stx) (let ((k3656@t k3654@stx)) (let ((k3658@ls/false (k30c3@syntax-dispatch k3656@t '(_ (any . each-any) any . each-any)))) (if k3658@ls/false (apply (lambda (k365a@who k365b@fmls k365c@b k365d@b*) (if (k2ec4@valid-bound-ids? k365b@fmls) (k3079@bless (list 'define k365a@who (list 'make-traced-procedure (list 'quote k365a@who) (cons 'lambda (cons k365b@fmls (cons k365c@b k365d@b*)))))) (k307d@invalid-fmls-error k3654@stx k365b@fmls))) k3658@ls/false) (let ((k3662@t k3656@t)) (let ((k3664@ls/false (k30c3@syntax-dispatch k3662@t '(_ (any . #(each+ any () any)) any . each-any)))) (if k3664@ls/false (apply (lambda (k3666@who k3667@fmls k3668@last k3669@b k366a@b*) (if (k2ec4@valid-bound-ids? (cons k3668@last k3667@fmls)) (k3079@bless (list 'define k3666@who (list 'make-traced-procedure (list 'quote k3666@who) (cons 'lambda (cons (append k3667@fmls k3668@last) (cons k3669@b k366a@b*)))))) (k307d@invalid-fmls-error k3654@stx (append k3667@fmls k3668@last)))) k3664@ls/false) (let ((k3670@t k3662@t)) (let ((k3672@ls/false (k30c3@syntax-dispatch k3670@t '(_ any any)))) (if k3672@ls/false (apply (lambda (k3674@who k3675@expr) (if (k2ebc@id? k3674@who) (k3079@bless (list 'define k3674@who (list 'let (list (list 'v k3675@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote k3674@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (k31a3@syntax-violation '#f '"invalid name" k3654@stx))) k3672@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3670@t)))))))))))) (set! k4b7b@k3087@trace-define-macro k3087@trace-define-macro) (set! k3089@trace-define-syntax-macro (lambda (k3678@stx) (let ((k367a@t k3678@stx)) (let ((k367c@ls/false (k30c3@syntax-dispatch k367a@t '(_ any any)))) (if k367c@ls/false (apply (lambda (k367e@who k367f@expr) (if (k2ebc@id? k367e@who) (k3079@bless (list 'define-syntax k367e@who (list 'make-traced-macro (list 'quote k367e@who) k367f@expr))) (k31a3@syntax-violation '#f '"invalid name" k3678@stx))) k367c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k367a@t)))))) (set! k4b7c@k3089@trace-define-syntax-macro k3089@trace-define-syntax-macro) (set! k308b@trace-let/rec-syntax (lambda (k3682@who) (lambda (k3684@stx) (let ((k3686@t k3684@stx)) (let ((k3688@ls/false (k30c3@syntax-dispatch k3686@t '(_ #(each (any any)) any . each-any)))) (if k3688@ls/false (apply (lambda (k368a@lhs* k368b@rhs* k368c@b k368d@b*) (if (k2ec4@valid-bound-ids? k368a@lhs*) (let ((k3692@rhs* (map (lambda (k3694@lhs k3695@rhs) (list 'make-traced-macro (list 'quote k3694@lhs) k3695@rhs)) k368a@lhs* k368b@rhs*))) (k3079@bless (cons k3682@who (cons (map list k368a@lhs* k3692@rhs*) (cons k368c@b k368d@b*))))) (k307d@invalid-fmls-error k3684@stx k368a@lhs*))) k3688@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3686@t))))))) (set! k4b7d@k308b@trace-let/rec-syntax k308b@trace-let/rec-syntax) (set! k308d@trace-let-syntax-macro (k308b@trace-let/rec-syntax 'let-syntax)) (set! k4b7e@k308d@trace-let-syntax-macro k308d@trace-let-syntax-macro) (set! k308f@trace-letrec-syntax-macro (k308b@trace-let/rec-syntax 'letrec-syntax)) (set! k4b7f@k308f@trace-letrec-syntax-macro k308f@trace-letrec-syntax-macro) (set! k3091@guard-macro (lambda (k3698@x) (letrec* ((k369b@gen-clauses (lambda (k36b2@con k36b3@outerk k36b4@clause*) (letrec* ((k36b9@f (lambda (k36f2@x k36f3@k) (let ((k36f6@t k36f2@x)) (let ((k36f8@ls/false (k30c3@syntax-dispatch k36f6@t '(any #(scheme-id =>) any)))) (if k36f8@ls/false (apply (lambda (k36fa@e k36fb@p) (let ((k36fe@t (gensym))) (list 'let (list (list k36fe@t k36fa@e)) (list 'if k36fe@t (list k36fb@p k36fe@t) k36f3@k)))) k36f8@ls/false) (let ((k3700@t k36f6@t)) (let ((k3702@ls/false (k30c3@syntax-dispatch k3700@t '(any)))) (if k3702@ls/false (apply (lambda (k3704@e) (let ((k3706@t (gensym))) (list 'let (list (list k3706@t k3704@e)) (list 'if k3706@t k3706@t k36f3@k)))) k3702@ls/false) (let ((k3708@t k3700@t)) (let ((k370a@ls/false (k30c3@syntax-dispatch k3708@t '(any any . each-any)))) (if k370a@ls/false (apply (lambda (k370c@e k370d@v k370e@v*) (list 'if k370c@e (cons 'begin (cons k370d@v k370e@v*)) k36f3@k)) k370a@ls/false) (let ((k3712@t k3708@t)) (let ((k3714@ls/false (k30c3@syntax-dispatch k3712@t '_))) (if k3714@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid guard clause" k36f2@x)) k3714@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3712@t))))))))))))))) (k36bb@f* (lambda (k36c8@x*) (let ((k36ca@t k36c8@x*)) (let ((k36cc@ls/false (k30c3@syntax-dispatch k36ca@t '()))) (if k36cc@ls/false (apply (lambda () (let ((k36ce@g (gensym))) (values (list k36ce@g (list 'lambda '() (list 'raise-continuable k36b2@con))) k36ce@g))) k36cc@ls/false) (let ((k36d0@t k36ca@t)) (let ((k36d2@ls/false (k30c3@syntax-dispatch k36d0@t '((#(scheme-id else) any . each-any))))) (if k36d2@ls/false (apply (lambda (k36d4@e k36d5@e*) (values (cons 'begin (cons k36d4@e k36d5@e*)) '#f)) k36d2@ls/false) (let ((k36d8@t k36d0@t)) (let ((k36da@ls/false (k30c3@syntax-dispatch k36d8@t '(any . any)))) (if k36da@ls/false (apply (lambda (k36dc@cls k36dd@cls*) (call-with-values (lambda () (k36bb@f* k36dd@cls*)) (lambda (k36e4@k36e1 k36e5@k36e3) (let ((k36e8@g k36e5@k36e3) (k36e9@e k36e4@k36e1)) (values (k36b9@f k36dc@cls k36e9@e) k36e8@g))))) k36da@ls/false) (let ((k36ec@t k36d8@t)) (let ((k36ee@ls/false (k30c3@syntax-dispatch k36ec@t 'any))) (if k36ee@ls/false (apply (lambda (k36f0@others) (k31a3@syntax-violation '#f '"invalid guard clause" k36f0@others)) k36ee@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k36ec@t)))))))))))))))) (call-with-values (lambda () (k36bb@f* k36b4@clause*)) (lambda (k36c0@k36bd k36c1@k36bf) (let ((k36c4@raisek k36c1@k36bf) (k36c5@code k36c0@k36bd)) (if k36c4@raisek (list (list 'call/cc (list 'lambda (list k36c4@raisek) (list k36b3@outerk (list 'lambda '() k36c5@code))))) (list k36b3@outerk (list 'lambda '() k36c5@code)))))))))) (let ((k369c@t k3698@x)) (let ((k369e@ls/false (k30c3@syntax-dispatch k369c@t '(_ (any . each-any) any . each-any)))) (if (and k369e@ls/false (apply (lambda (k36a0@con k36a1@clause* k36a2@b k36a3@b*) (k2ebc@id? k36a0@con)) k369e@ls/false)) (apply (lambda (k36a8@con k36a9@clause* k36aa@b k36ab@b*) (let ((k36b0@outerk (gensym))) (k3079@bless (list (list 'call/cc (list 'lambda (list k36b0@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list k36a8@con) (k369b@gen-clauses k36a8@con k36b0@outerk k36a9@clause*)) (cons 'lambda (cons '() (cons k36aa@b k36ab@b*))))))))))) k369e@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k369c@t))))))) (set! k4b80@k3091@guard-macro k3091@guard-macro) (set! k3093@define-enumeration-macro (lambda (k3716@stx) (letrec* ((k3719@set? (lambda (k3732@x) (or (null? k3732@x) (and (not (memq (car k3732@x) (cdr k3732@x))) (k3719@set? (cdr k3732@x)))))) (k371b@remove-dups (lambda (k3730@ls) (if (null? k3730@ls) '() (cons (car k3730@ls) (k371b@remove-dups (remq (car k3730@ls) (cdr k3730@ls)))))))) (let ((k371c@t k3716@stx)) (let ((k371e@ls/false (k30c3@syntax-dispatch k371c@t '(_ any each-any any)))) (if (and k371e@ls/false (apply (lambda (k3720@name k3721@id* k3722@maker) (and (k2ebc@id? k3720@name) (k2ebc@id? k3722@maker) (for-all k2ebc@id? k3721@id*))) k371e@ls/false)) (apply (lambda (k3726@name k3727@id* k3728@maker) (let ((k372c@name* (k371b@remove-dups (k31a9@syntax->datum k3727@id*))) (k372d@mk (gensym))) (k3079@bless (list 'begin (list 'define k372d@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote k372c@name*)))) (list 'define-syntax k3726@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote k372c@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote k3726@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax k3728@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote k3728@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote k372c@name*)) (cons 'syntax-violation (cons (list 'quote k3728@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons k372d@mk '('(n* ...))))))))))))) k371e@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k371c@t))))))) (set! k4b81@k3093@define-enumeration-macro k3093@define-enumeration-macro) (set! k3095@time-macro (lambda (k3734@stx) (let ((k3736@t k3734@stx)) (let ((k3738@ls/false (k30c3@syntax-dispatch k3736@t '(_ any)))) (if k3738@ls/false (apply (lambda (k373a@expr) (k3079@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() k373a@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) k3738@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3736@t)))))) (set! k4b82@k3095@time-macro k3095@time-macro) (set! k3097@delay-macro (lambda (k373c@stx) (let ((k373e@t k373c@stx)) (let ((k3740@ls/false (k30c3@syntax-dispatch k373e@t '(_ any)))) (if k3740@ls/false (apply (lambda (k3742@expr) (k3079@bless (list 'make-promise (list 'lambda '() k3742@expr)))) k3740@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k373e@t)))))) (set! k4b83@k3097@delay-macro k3097@delay-macro) (set! k3099@assert-macro (lambda (k3744@stx) (let ((k3746@t k3744@stx)) (let ((k3748@ls/false (k30c3@syntax-dispatch k3746@t '(_ any)))) (if k3748@ls/false (apply (lambda (k374a@expr) (let ((k374c@pos (or (k319b@expression-position k3744@stx) (k319b@expression-position k374a@expr)))) (k3079@bless (list 'let (list (list 'x k374a@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote k374a@expr) (list 'quote k374c@pos))))))) k3748@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3746@t)))))) (set! k4b84@k3099@assert-macro k3099@assert-macro) (set! k309b@endianness-macro (lambda (k374e@stx) (let ((k3750@t k374e@stx)) (let ((k3752@ls/false (k30c3@syntax-dispatch k3750@t '(_ any)))) (if k3752@ls/false (apply (lambda (k3754@e) (let ((k3756@t (k31a9@syntax->datum k3754@e))) (if (memv k3756@t '(little)) (k3079@bless ''little) (if (memv k3756@t '(big)) (k3079@bless ''big) (k31a3@syntax-violation '#f '"endianness must be big or little" k374e@stx))))) k3752@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3750@t)))))) (set! k4b85@k309b@endianness-macro k309b@endianness-macro) (set! k309d@identifier-syntax-macro (lambda (k3758@stx) (let ((k375a@t k3758@stx)) (let ((k375c@ls/false (k30c3@syntax-dispatch k375a@t '(_ any)))) (if k375c@ls/false (apply (lambda (k375e@expr) (k3079@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax k375e@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax k375e@expr) '((syntax (e* ...)))))))))) k375c@ls/false) (let ((k3760@t k375a@t)) (let ((k3762@ls/false (k30c3@syntax-dispatch k3760@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and k3762@ls/false (apply (lambda (k3764@id1 k3765@expr1 k3766@id2 k3767@expr2 k3768@expr3) (and (k2ebc@id? k3764@id1) (k2ebc@id? k3766@id2) (k2ebc@id? k3767@expr2))) k3762@ls/false)) (apply (lambda (k376e@id1 k376f@expr1 k3770@id2 k3771@expr2 k3772@expr3) (k3079@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax k376f@expr1)) (list (list 'set! 'id k3771@expr2) (list 'syntax k3772@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons k376f@expr1 '(e* ...))))))))) k3762@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3760@t))))))))) (set! k4b86@k309d@identifier-syntax-macro k309d@identifier-syntax-macro) (set! k309f@do-macro (lambda (k3778@stx) (letrec* ((k377b@bind (lambda (k3792@x) (let ((k3794@t k3792@x)) (let ((k3796@ls/false (k30c3@syntax-dispatch k3794@t '(any any)))) (if k3796@ls/false (apply (lambda (k3798@x k3799@init) (list k3798@x k3799@init k3798@x)) k3796@ls/false) (let ((k379c@t k3794@t)) (let ((k379e@ls/false (k30c3@syntax-dispatch k379c@t '(any any any)))) (if k379e@ls/false (apply (lambda (k37a0@x k37a1@init k37a2@step) (list k37a0@x k37a1@init k37a2@step)) k379e@ls/false) (let ((k37a6@t k379c@t)) (let ((k37a8@ls/false (k30c3@syntax-dispatch k37a6@t '_))) (if k37a8@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid binding" k3778@stx)) k37a8@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k37a6@t))))))))))))) (let ((k377c@t k3778@stx)) (let ((k377e@ls/false (k30c3@syntax-dispatch k377c@t '(_ each-any (any . each-any) . each-any)))) (if k377e@ls/false (apply (lambda (k3780@binding* k3781@test k3782@expr* k3783@command*) (let ((k3788@t (map k377b@bind k3780@binding*))) (let ((k378a@ls/false (k30c3@syntax-dispatch k3788@t '#(each (any any any))))) (if k378a@ls/false (apply (lambda (k378c@x* k378d@init* k378e@step*) (if (k2ec4@valid-bound-ids? k378c@x*) (k3079@bless (list 'letrec (list (list 'loop (list 'lambda k378c@x* (list 'if k3781@test (cons 'begin (cons '(if #f #f) k3782@expr*)) (cons 'begin (append k3783@command* (list (cons 'loop k378e@step*)))))))) (cons 'loop k378d@init*))) (k31a3@syntax-violation '#f '"invalid bindings" k3778@stx))) k378a@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3788@t))))) k377e@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k377c@t))))))) (set! k4b87@k309f@do-macro k309f@do-macro) (set! k30a1@let*-macro (lambda (k37aa@stx) (let ((k37ac@t k37aa@stx)) (let ((k37ae@ls/false (k30c3@syntax-dispatch k37ac@t '(_ #(each (any any)) any . each-any)))) (if (and k37ae@ls/false (apply (lambda (k37b0@lhs* k37b1@rhs* k37b2@b k37b3@b*) (for-all k2ebc@id? k37b0@lhs*)) k37ae@ls/false)) (apply (lambda (k37b8@lhs* k37b9@rhs* k37ba@b k37bb@b*) (k3079@bless (let k37c2@f ((k37c0@x* (map list k37b8@lhs* k37b9@rhs*))) (if (null? k37c0@x*) (cons 'let (cons '() (cons k37ba@b k37bb@b*))) (list 'let (list (car k37c0@x*)) (k37c2@f (cdr k37c0@x*))))))) k37ae@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k37ac@t)))))) (set! k4b88@k30a1@let*-macro k30a1@let*-macro) (set! k30a3@or-macro (lambda (k37c4@stx) (let ((k37c6@t k37c4@stx)) (let ((k37c8@ls/false (k30c3@syntax-dispatch k37c6@t '(_)))) (if k37c8@ls/false (apply (lambda () '#f) k37c8@ls/false) (let ((k37ca@t k37c6@t)) (let ((k37cc@ls/false (k30c3@syntax-dispatch k37ca@t '(_ any . each-any)))) (if k37cc@ls/false (apply (lambda (k37ce@e k37cf@e*) (k3079@bless (let k37d6@f ((k37d2@e k37ce@e) (k37d3@e* k37cf@e*)) (if (null? k37d3@e*) (list 'begin '#f k37d2@e) (list 'let (list (list 't k37d2@e)) (list 'if 't 't (k37d6@f (car k37d3@e*) (cdr k37d3@e*)))))))) k37cc@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k37ca@t))))))))) (set! k4b89@k30a3@or-macro k30a3@or-macro) (set! k30a5@and-macro (lambda (k37d8@stx) (let ((k37da@t k37d8@stx)) (let ((k37dc@ls/false (k30c3@syntax-dispatch k37da@t '(_)))) (if k37dc@ls/false (apply (lambda () '#t) k37dc@ls/false) (let ((k37de@t k37da@t)) (let ((k37e0@ls/false (k30c3@syntax-dispatch k37de@t '(_ any . each-any)))) (if k37e0@ls/false (apply (lambda (k37e2@e k37e3@e*) (k3079@bless (let k37ea@f ((k37e6@e k37e2@e) (k37e7@e* k37e3@e*)) (if (null? k37e7@e*) (list 'begin '#f k37e6@e) (cons 'if (cons k37e6@e (cons (k37ea@f (car k37e7@e*) (cdr k37e7@e*)) '(#f)))))))) k37e0@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k37de@t))))))))) (set! k4b8a@k30a5@and-macro k30a5@and-macro) (set! k30a7@cond-macro (lambda (k37ec@stx) (let ((k37ee@t k37ec@stx)) (let ((k37f0@ls/false (k30c3@syntax-dispatch k37ee@t '(_ any . each-any)))) (if k37f0@ls/false (apply (lambda (k37f2@cls k37f3@cls*) (k3079@bless (let k37fa@f ((k37f6@cls k37f2@cls) (k37f7@cls* k37f3@cls*)) (if (null? k37f7@cls*) (let ((k37fc@t k37f6@cls)) (let ((k37fe@ls/false (k30c3@syntax-dispatch k37fc@t '(#(scheme-id else) any . each-any)))) (if k37fe@ls/false (apply (lambda (k3800@e k3801@e*) (cons 'begin (cons k3800@e k3801@e*))) k37fe@ls/false) (let ((k3804@t k37fc@t)) (let ((k3806@ls/false (k30c3@syntax-dispatch k3804@t '(any #(scheme-id =>) any)))) (if k3806@ls/false (apply (lambda (k3808@e k3809@p) (list 'let (list (list 't k3808@e)) (list 'if 't (cons k3809@p '(t))))) k3806@ls/false) (let ((k380c@t k3804@t)) (let ((k380e@ls/false (k30c3@syntax-dispatch k380c@t '(any)))) (if k380e@ls/false (apply (lambda (k3810@e) (cons 'or (cons k3810@e '((if #f #f))))) k380e@ls/false) (let ((k3812@t k380c@t)) (let ((k3814@ls/false (k30c3@syntax-dispatch k3812@t '(any . each-any)))) (if k3814@ls/false (apply (lambda (k3816@e k3817@e*) (list 'if k3816@e (cons 'begin k3817@e*))) k3814@ls/false) (let ((k381a@t k3812@t)) (let ((k381c@ls/false (k30c3@syntax-dispatch k381a@t '_))) (if k381c@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid last clause" k37ec@stx)) k381c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k381a@t)))))))))))))))) (let ((k381e@t k37f6@cls)) (let ((k3820@ls/false (k30c3@syntax-dispatch k381e@t '(#(scheme-id else) any . each-any)))) (if k3820@ls/false (apply (lambda (k3822@e k3823@e*) (k31a3@syntax-violation '#f '"incorrect position of keyword else" k37ec@stx)) k3820@ls/false) (let ((k3826@t k381e@t)) (let ((k3828@ls/false (k30c3@syntax-dispatch k3826@t '(any #(scheme-id =>) any)))) (if k3828@ls/false (apply (lambda (k382a@e k382b@p) (list 'let (list (list 't k382a@e)) (list 'if 't (cons k382b@p '(t)) (k37fa@f (car k37f7@cls*) (cdr k37f7@cls*))))) k3828@ls/false) (let ((k382e@t k3826@t)) (let ((k3830@ls/false (k30c3@syntax-dispatch k382e@t '(any)))) (if k3830@ls/false (apply (lambda (k3832@e) (list 'or k3832@e (k37fa@f (car k37f7@cls*) (cdr k37f7@cls*)))) k3830@ls/false) (let ((k3834@t k382e@t)) (let ((k3836@ls/false (k30c3@syntax-dispatch k3834@t '(any . each-any)))) (if k3836@ls/false (apply (lambda (k3838@e k3839@e*) (list 'if k3838@e (cons 'begin k3839@e*) (k37fa@f (car k37f7@cls*) (cdr k37f7@cls*)))) k3836@ls/false) (let ((k383c@t k3834@t)) (let ((k383e@ls/false (k30c3@syntax-dispatch k383c@t '_))) (if k383e@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid last clause" k37ec@stx)) k383e@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k383c@t)))))))))))))))))))) k37f0@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k37ee@t)))))) (set! k4b8b@k30a7@cond-macro k30a7@cond-macro) (set! k30a9@do-include (lambda (k3840@stx k3841@id k3842@filename) (let ((k3846@filename (k2ed0@stx->datum k3842@filename))) (begin (if (not (and (string? k3846@filename) (k2ebc@id? k3841@id))) (k31a3@syntax-violation '#f '"invalid syntax" k3840@stx) (void)) (cons (k3079@bless 'begin) (with-input-from-file k3846@filename (lambda () (let k384a@f ((k3848@ls '())) (let ((k384c@x (k29fe@k28ce@read-annotated))) (if (eof-object? k384c@x) (reverse k3848@ls) (k384a@f (cons (k2e9c@datum->stx k3841@id k384c@x) k3848@ls)))))))))))) (set! k4b8c@k30a9@do-include k30a9@do-include) (set! k30ab@include-macro (lambda (k384e@e) (let ((k3850@t k384e@e)) (let ((k3852@ls/false (k30c3@syntax-dispatch k3850@t '(any any)))) (if k3852@ls/false (apply (lambda (k3854@id k3855@filename) (k30a9@do-include k384e@e k3854@id k3855@filename)) k3852@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3850@t)))))) (set! k4b8d@k30ab@include-macro k30ab@include-macro) (set! k30ad@include-into-macro (lambda (k3858@e) (let ((k385a@t k3858@e)) (let ((k385c@ls/false (k30c3@syntax-dispatch k385a@t '(_ any any)))) (if k385c@ls/false (apply (lambda (k385e@id k385f@filename) (k30a9@do-include k3858@e k385e@id k385f@filename)) k385c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k385a@t)))))) (set! k4b8e@k30ad@include-into-macro k30ad@include-into-macro) (set! k30af@syntax-rules-macro (lambda (k3862@e) (let ((k3864@t k3862@e)) (let ((k3866@ls/false (k30c3@syntax-dispatch k3864@t '(_ each-any . #(each (any any)))))) (if k3866@ls/false (apply (lambda (k3868@lits k3869@pat* k386a@tmp*) (begin (k30c9@verify-literals k3868@lits k3862@e) (k3079@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons k3868@lits (map (lambda (k386e@pat k386f@tmp) (let ((k3872@t k386e@pat)) (let ((k3874@ls/false (k30c3@syntax-dispatch k3872@t '(_ . any)))) (if k3874@ls/false (apply (lambda (k3876@rest) (list (cons 'g k3876@rest) (list 'syntax k386f@tmp))) k3874@ls/false) (let ((k3878@t k3872@t)) (let ((k387a@ls/false (k30c3@syntax-dispatch k3878@t '_))) (if k387a@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid syntax-rules pattern" k3862@e k386e@pat)) k387a@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3878@t)))))))) k3869@pat* k386a@tmp*)))))))) k3866@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3864@t)))))) (set! k4b8f@k30af@syntax-rules-macro k30af@syntax-rules-macro) (set! k30b1@quasiquote-macro (letrec* ((k387d@datum (lambda (k397e@x) (list (k304b@scheme-stx 'quote) (k2ea4@mkstx k397e@x '() '() '())))) (k3899@quasicons* (lambda (k3976@x k3977@y) (let k397c@f ((k397a@x k3976@x)) (if (null? k397a@x) k3977@y (k389b@quasicons (car k397a@x) (k397c@f (cdr k397a@x))))))) (k389b@quasicons (lambda (k3950@x k3951@y) (let ((k3954@t k3951@y)) (let ((k3956@ls/false (k30c3@syntax-dispatch k3954@t '(#(scheme-id quote) any)))) (if k3956@ls/false (apply (lambda (k3958@dy) (let ((k395a@t k3950@x)) (let ((k395c@ls/false (k30c3@syntax-dispatch k395a@t '(#(scheme-id quote) any)))) (if k395c@ls/false (apply (lambda (k395e@dx) (list (k304b@scheme-stx 'quote) (cons k395e@dx k3958@dy))) k395c@ls/false) (let ((k3960@t k395a@t)) (let ((k3962@ls/false (k30c3@syntax-dispatch k3960@t '_))) (if k3962@ls/false (apply (lambda () (let ((k3964@t k3958@dy)) (let ((k3966@ls/false (k30c3@syntax-dispatch k3964@t '()))) (if k3966@ls/false (apply (lambda () (list (k304b@scheme-stx 'list) k3950@x)) k3966@ls/false) (let ((k3968@t k3964@t)) (let ((k396a@ls/false (k30c3@syntax-dispatch k3968@t '_))) (if k396a@ls/false (apply (lambda () (list (k304b@scheme-stx 'cons) k3950@x k3951@y)) k396a@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3968@t)))))))) k3962@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3960@t)))))))) k3956@ls/false) (let ((k396c@t k3954@t)) (let ((k396e@ls/false (k30c3@syntax-dispatch k396c@t '(#(scheme-id list) . each-any)))) (if k396e@ls/false (apply (lambda (k3970@stuff) (cons* (k304b@scheme-stx 'list) k3950@x k3970@stuff)) k396e@ls/false) (let ((k3972@t k396c@t)) (let ((k3974@ls/false (k30c3@syntax-dispatch k3972@t '_))) (if k3974@ls/false (apply (lambda () (list (k304b@scheme-stx 'cons) k3950@x k3951@y)) k3974@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3972@t)))))))))))) (k389d@quasiappend (lambda (k3936@x k3937@y) (let ((k393a@ls (let k393e@f ((k393c@x k3936@x)) (if (null? k393c@x) (let ((k3940@t k3937@y)) (let ((k3942@ls/false (k30c3@syntax-dispatch k3940@t '(#(scheme-id quote) ())))) (if k3942@ls/false (apply (lambda () '()) k3942@ls/false) (let ((k3944@t k3940@t)) (let ((k3946@ls/false (k30c3@syntax-dispatch k3944@t '_))) (if k3946@ls/false (apply (lambda () (list k3937@y)) k3946@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3944@t))))))) (let ((k3948@t (car k393c@x))) (let ((k394a@ls/false (k30c3@syntax-dispatch k3948@t '(#(scheme-id quote) ())))) (if k394a@ls/false (apply (lambda () (k393e@f (cdr k393c@x))) k394a@ls/false) (let ((k394c@t k3948@t)) (let ((k394e@ls/false (k30c3@syntax-dispatch k394c@t '_))) (if k394e@ls/false (apply (lambda () (cons (car k393c@x) (k393e@f (cdr k393c@x)))) k394e@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k394c@t))))))))))) (if (null? k393a@ls) (list (k304b@scheme-stx 'quote) '()) (if (null? (cdr k393a@ls)) (car k393a@ls) (cons* (k304b@scheme-stx 'append) k393a@ls)))))) (k389f@quasivector (lambda (k3904@x) (let ((k3906@pat-x k3904@x)) (let ((k3908@t k3906@pat-x)) (let ((k390a@ls/false (k30c3@syntax-dispatch k3908@t '(#(scheme-id quote) each-any)))) (if k390a@ls/false (apply (lambda (k390c@x*) (list (k304b@scheme-stx 'quote) (list->vector k390c@x*))) k390a@ls/false) (let ((k390e@t k3908@t)) (let ((k3910@ls/false (k30c3@syntax-dispatch k390e@t '_))) (if k3910@ls/false (apply (lambda () (let k3918@f ((k3912@x k3904@x) (k3913@k (lambda (k3916@ls) (cons* (k304b@scheme-stx 'vector) k3916@ls)))) (let ((k391a@t k3912@x)) (let ((k391c@ls/false (k30c3@syntax-dispatch k391a@t '(#(scheme-id quote) each-any)))) (if k391c@ls/false (apply (lambda (k391e@x*) (k3913@k (map (lambda (k3920@x) (list (k304b@scheme-stx 'quote) k3920@x)) k391e@x*))) k391c@ls/false) (let ((k3922@t k391a@t)) (let ((k3924@ls/false (k30c3@syntax-dispatch k3922@t '(#(scheme-id list) . each-any)))) (if k3924@ls/false (apply (lambda (k3926@x*) (k3913@k k3926@x*)) k3924@ls/false) (let ((k3928@t k3922@t)) (let ((k392a@ls/false (k30c3@syntax-dispatch k3928@t '(#(scheme-id cons) any any)))) (if k392a@ls/false (apply (lambda (k392c@x k392d@y) (k3918@f k392d@y (lambda (k3930@ls) (k3913@k (cons k392c@x k3930@ls))))) k392a@ls/false) (let ((k3932@t k3928@t)) (let ((k3934@ls/false (k30c3@syntax-dispatch k3932@t '_))) (if k3934@ls/false (apply (lambda () (list (k304b@scheme-stx 'list->vector) k3906@pat-x)) k3934@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3932@t))))))))))))))) k3910@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k390e@t)))))))))) (k38a1@vquasi (lambda (k38e2@p k38e3@lev) (let ((k38e6@t k38e2@p)) (let ((k38e8@ls/false (k30c3@syntax-dispatch k38e6@t '(any . any)))) (if k38e8@ls/false (apply (lambda (k38ea@p k38eb@q) (let ((k38ee@t k38ea@p)) (let ((k38f0@ls/false (k30c3@syntax-dispatch k38ee@t '(#(scheme-id unquote) . each-any)))) (if k38f0@ls/false (apply (lambda (k38f2@p) (if (= k38e3@lev '0) (k3899@quasicons* k38f2@p (k38a1@vquasi k38eb@q k38e3@lev)) (k389b@quasicons (k389b@quasicons (k387d@datum 'unquote) (k38a3@quasi k38f2@p (- k38e3@lev '1))) (k38a1@vquasi k38eb@q k38e3@lev)))) k38f0@ls/false) (let ((k38f4@t k38ee@t)) (let ((k38f6@ls/false (k30c3@syntax-dispatch k38f4@t '(#(scheme-id unquote-splicing) . each-any)))) (if k38f6@ls/false (apply (lambda (k38f8@p) (if (= k38e3@lev '0) (k389d@quasiappend k38f8@p (k38a1@vquasi k38eb@q k38e3@lev)) (k389b@quasicons (k389b@quasicons (k387d@datum 'unquote-splicing) (k38a3@quasi k38f8@p (- k38e3@lev '1))) (k38a1@vquasi k38eb@q k38e3@lev)))) k38f6@ls/false) (let ((k38fa@t k38f4@t)) (let ((k38fc@ls/false (k30c3@syntax-dispatch k38fa@t 'any))) (if k38fc@ls/false (apply (lambda (k38fe@p) (k389b@quasicons (k38a3@quasi k38fe@p k38e3@lev) (k38a1@vquasi k38eb@q k38e3@lev))) k38fc@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k38fa@t))))))))))) k38e8@ls/false) (let ((k3900@t k38e6@t)) (let ((k3902@ls/false (k30c3@syntax-dispatch k3900@t '()))) (if k3902@ls/false (apply (lambda () (list (k304b@scheme-stx 'quote) '())) k3902@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3900@t))))))))) (k38a3@quasi (lambda (k38ac@p k38ad@lev) (let ((k38b0@t k38ac@p)) (let ((k38b2@ls/false (k30c3@syntax-dispatch k38b0@t '(#(scheme-id unquote) any)))) (if k38b2@ls/false (apply (lambda (k38b4@p) (if (= k38ad@lev '0) k38b4@p (k389b@quasicons (k387d@datum 'unquote) (k38a3@quasi (list k38b4@p) (- k38ad@lev '1))))) k38b2@ls/false) (let ((k38b6@t k38b0@t)) (let ((k38b8@ls/false (k30c3@syntax-dispatch k38b6@t '((#(scheme-id unquote) . each-any) . any)))) (if k38b8@ls/false (apply (lambda (k38ba@p k38bb@q) (if (= k38ad@lev '0) (k3899@quasicons* k38ba@p (k38a3@quasi k38bb@q k38ad@lev)) (k389b@quasicons (k389b@quasicons (k387d@datum 'unquote) (k38a3@quasi k38ba@p (- k38ad@lev '1))) (k38a3@quasi k38bb@q k38ad@lev)))) k38b8@ls/false) (let ((k38be@t k38b6@t)) (let ((k38c0@ls/false (k30c3@syntax-dispatch k38be@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if k38c0@ls/false (apply (lambda (k38c2@p k38c3@q) (if (= k38ad@lev '0) (k389d@quasiappend k38c2@p (k38a3@quasi k38c3@q k38ad@lev)) (k389b@quasicons (k389b@quasicons (k387d@datum 'unquote-splicing) (k38a3@quasi k38c2@p (- k38ad@lev '1))) (k38a3@quasi k38c3@q k38ad@lev)))) k38c0@ls/false) (let ((k38c6@t k38be@t)) (let ((k38c8@ls/false (k30c3@syntax-dispatch k38c6@t '(#(scheme-id quasiquote) any)))) (if k38c8@ls/false (apply (lambda (k38ca@p) (k389b@quasicons (k387d@datum 'quasiquote) (k38a3@quasi (list k38ca@p) (+ k38ad@lev '1)))) k38c8@ls/false) (let ((k38cc@t k38c6@t)) (let ((k38ce@ls/false (k30c3@syntax-dispatch k38cc@t '(any . any)))) (if k38ce@ls/false (apply (lambda (k38d0@p k38d1@q) (k389b@quasicons (k38a3@quasi k38d0@p k38ad@lev) (k38a3@quasi k38d1@q k38ad@lev))) k38ce@ls/false) (let ((k38d4@t k38cc@t)) (let ((k38d6@ls/false (k30c3@syntax-dispatch k38d4@t '#(vector each-any)))) (if (and k38d6@ls/false (apply (lambda (k38d8@x) (not (k2e88@stx? k38d8@x))) k38d6@ls/false)) (apply (lambda (k38da@x) (k389f@quasivector (k38a1@vquasi k38da@x k38ad@lev))) k38d6@ls/false) (let ((k38dc@t k38d4@t)) (let ((k38de@ls/false (k30c3@syntax-dispatch k38dc@t 'any))) (if k38de@ls/false (apply (lambda (k38e0@p) (list (k304b@scheme-stx 'quote) k38e0@p)) k38de@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k38dc@t))))))))))))))))))))))))) (lambda (k38a4@x) (let ((k38a6@t k38a4@x)) (let ((k38a8@ls/false (k30c3@syntax-dispatch k38a6@t '(_ any)))) (if k38a8@ls/false (apply (lambda (k38aa@e) (k38a3@quasi k38aa@e '0)) k38a8@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k38a6@t))))))) (set! k4b90@k30b1@quasiquote-macro k30b1@quasiquote-macro) (set! k30b3@quasisyntax-macro (letrec* ((k3981@quasi (lambda (k399c@p k399d@lev) (let ((k39a0@t k399c@p)) (let ((k39a2@ls/false (k30c3@syntax-dispatch k39a0@t '(#(scheme-id unsyntax) any)))) (if k39a2@ls/false (apply (lambda (k39a4@p) (if (= k399d@lev '0) (let ((k39a6@g (gensym))) (values (list k39a6@g) (list k39a4@p) k39a6@g)) (call-with-values (lambda () (k3981@quasi k39a4@p (- k399d@lev '1))) (lambda (k39ae@k39a9 k39af@k39ab k39b0@k39ad) (let ((k39b4@p k39b0@k39ad) (k39b5@rhs* k39af@k39ab) (k39b6@lhs* k39ae@k39a9)) (values k39b6@lhs* k39b5@rhs* (list 'unsyntax k39b4@p))))))) k39a2@ls/false) (let ((k39ba@t k39a0@t)) (let ((k39bc@ls/false (k30c3@syntax-dispatch k39ba@t '#(scheme-id unsyntax)))) (if (and k39bc@ls/false (apply (lambda () (= k399d@lev '0)) k39bc@ls/false)) (apply (lambda () (k31a3@syntax-violation '#f '"incorrect use of unsyntax" k399c@p)) k39bc@ls/false) (let ((k39be@t k39ba@t)) (let ((k39c0@ls/false (k30c3@syntax-dispatch k39be@t '((#(scheme-id unsyntax) . each-any) . any)))) (if k39c0@ls/false (apply (lambda (k39c2@p* k39c3@q) (call-with-values (lambda () (k3981@quasi k39c3@q k399d@lev)) (lambda (k39cc@k39c7 k39cd@k39c9 k39ce@k39cb) (let ((k39d2@q k39ce@k39cb) (k39d3@rhs* k39cd@k39c9) (k39d4@lhs* k39cc@k39c7)) (if (= k399d@lev '0) (let ((k39d8@g* (map (lambda (k39da@x) (gensym)) k39c2@p*))) (values (append k39d8@g* k39d4@lhs*) (append k39c2@p* k39d3@rhs*) (append k39d8@g* k39d2@q))) (call-with-values (lambda () (k3981@quasi k39c2@p* (- k399d@lev '1))) (lambda (k39e2@k39dd k39e3@k39df k39e4@k39e1) (let ((k39e8@p* k39e4@k39e1) (k39e9@rhs2* k39e3@k39df) (k39ea@lhs2* k39e2@k39dd)) (values (append k39ea@lhs2* k39d4@lhs*) (append k39e9@rhs2* k39d3@rhs*) (cons (cons 'unsyntax k39e8@p*) k39d2@q)))))))))) k39c0@ls/false) (let ((k39ee@t k39be@t)) (let ((k39f0@ls/false (k30c3@syntax-dispatch k39ee@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if k39f0@ls/false (apply (lambda (k39f2@p* k39f3@q) (call-with-values (lambda () (k3981@quasi k39f3@q k399d@lev)) (lambda (k39fc@k39f7 k39fd@k39f9 k39fe@k39fb) (let ((k3a02@q k39fe@k39fb) (k3a03@rhs* k39fd@k39f9) (k3a04@lhs* k39fc@k39f7)) (if (= k399d@lev '0) (let ((k3a08@g* (map (lambda (k3a0a@x) (gensym)) k39f2@p*))) (values (append (map (lambda (k3a0c@g) (cons k3a0c@g '(...))) k3a08@g*) k3a04@lhs*) (append k39f2@p* k3a03@rhs*) (append (apply append (map (lambda (k3a0e@g) (cons k3a0e@g '(...))) k3a08@g*)) k3a02@q))) (call-with-values (lambda () (k3981@quasi k39f2@p* (- k399d@lev '1))) (lambda (k3a16@k3a11 k3a17@k3a13 k3a18@k3a15) (let ((k3a1c@p* k3a18@k3a15) (k3a1d@rhs2* k3a17@k3a13) (k3a1e@lhs2* k3a16@k3a11)) (values (append k3a1e@lhs2* k3a04@lhs*) (append k3a1d@rhs2* k3a03@rhs*) (cons (cons 'unsyntax-splicing k3a1c@p*) k3a02@q)))))))))) k39f0@ls/false) (let ((k3a22@t k39ee@t)) (let ((k3a24@ls/false (k30c3@syntax-dispatch k3a22@t '#(scheme-id unsyntax-splicing)))) (if (and k3a24@ls/false (apply (lambda () (= k399d@lev '0)) k3a24@ls/false)) (apply (lambda () (k31a3@syntax-violation '#f '"incorrect use of unsyntax-splicing" k399c@p)) k3a24@ls/false) (let ((k3a26@t k3a22@t)) (let ((k3a28@ls/false (k30c3@syntax-dispatch k3a26@t '(#(scheme-id quasisyntax) any)))) (if k3a28@ls/false (apply (lambda (k3a2a@p) (call-with-values (lambda () (k3981@quasi k3a2a@p (+ k399d@lev '1))) (lambda (k3a32@k3a2d k3a33@k3a2f k3a34@k3a31) (let ((k3a38@p k3a34@k3a31) (k3a39@rhs* k3a33@k3a2f) (k3a3a@lhs* k3a32@k3a2d)) (values k3a3a@lhs* k3a39@rhs* (list 'quasisyntax k3a38@p)))))) k3a28@ls/false) (let ((k3a3e@t k3a26@t)) (let ((k3a40@ls/false (k30c3@syntax-dispatch k3a3e@t '(any . any)))) (if k3a40@ls/false (apply (lambda (k3a42@p k3a43@q) (call-with-values (lambda () (k3981@quasi k3a42@p k399d@lev)) (lambda (k3a52@k3a47 k3a53@k3a49 k3a54@k3a4b) (call-with-values (lambda () (k3981@quasi k3a43@q k399d@lev)) (lambda (k3a58@k3a4d k3a59@k3a4f k3a5a@k3a51) (let ((k3a5e@q k3a5a@k3a51) (k3a5f@rhs2* k3a59@k3a4f) (k3a60@lhs2* k3a58@k3a4d) (k3a61@p k3a54@k3a4b) (k3a62@rhs* k3a53@k3a49) (k3a63@lhs* k3a52@k3a47)) (values (append k3a60@lhs2* k3a63@lhs*) (append k3a5f@rhs2* k3a62@rhs*) (cons k3a61@p k3a5e@q)))))))) k3a40@ls/false) (let ((k3a6a@t k3a3e@t)) (let ((k3a6c@ls/false (k30c3@syntax-dispatch k3a6a@t '#(vector each-any)))) (if k3a6c@ls/false (apply (lambda (k3a6e@x*) (call-with-values (lambda () (k3981@quasi k3a6e@x* k399d@lev)) (lambda (k3a76@k3a71 k3a77@k3a73 k3a78@k3a75) (let ((k3a7c@x* k3a78@k3a75) (k3a7d@rhs* k3a77@k3a73) (k3a7e@lhs* k3a76@k3a71)) (values k3a7e@lhs* k3a7d@rhs* (list->vector k3a7c@x*)))))) k3a6c@ls/false) (let ((k3a82@t k3a6a@t)) (let ((k3a84@ls/false (k30c3@syntax-dispatch k3a82@t '_))) (if k3a84@ls/false (apply (lambda () (values '() '() k399c@p)) k3a84@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3a82@t))))))))))))))))))))))))))))))) (lambda (k3982@x) (let ((k3984@t k3982@x)) (let ((k3986@ls/false (k30c3@syntax-dispatch k3984@t '(_ any)))) (if k3986@ls/false (apply (lambda (k3988@e) (call-with-values (lambda () (k3981@quasi k3988@e '0)) (lambda (k3990@k398b k3991@k398d k3992@k398f) (let ((k3996@v k3992@k398f) (k3997@rhs* k3991@k398d) (k3998@lhs* k3990@k398b)) (k3079@bless (list 'syntax-case (cons 'list k3997@rhs*) '() (list k3998@lhs* (list 'syntax k3996@v)))))))) k3986@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3984@t))))))) (set! k4b91@k30b3@quasisyntax-macro k30b3@quasisyntax-macro) (set! k30b5@define-struct-macro (lambda (k3a86@stx) (k31a3@syntax-violation '#f '"define-struct not supported" k3a86@stx))) (set! k4b92@k30b5@define-struct-macro k30b5@define-struct-macro) (set! k30b7@define-record-type-macro (lambda (k3a88@x) (letrec* ((k3a8b@id (lambda (k3c7e@ctxt . k3c80@str*) (k31a7@datum->syntax k3c7e@ctxt (string->symbol (apply string-append (map (lambda (k3c82@x) (if (symbol? k3c82@x) (symbol->string k3c82@x) (if (string? k3c82@x) k3c82@x (assertion-violation 'define-record-type '"BUG")))) k3c80@str*)))))) (k3a8d@get-record-name (lambda (k3c6c@spec) (let ((k3c6e@t k3c6c@spec)) (let ((k3c70@ls/false (k30c3@syntax-dispatch k3c6e@t '(any any any)))) (if k3c70@ls/false (apply (lambda (k3c72@foo k3c73@make-foo k3c74@foo?) k3c72@foo) k3c70@ls/false) (let ((k3c78@t k3c6e@t)) (let ((k3c7a@ls/false (k30c3@syntax-dispatch k3c78@t 'any))) (if k3c7a@ls/false (apply (lambda (k3c7c@foo) k3c7c@foo) k3c7a@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3c78@t))))))))) (k3a8f@get-record-constructor-name (lambda (k3c58@spec) (let ((k3c5a@t k3c58@spec)) (let ((k3c5c@ls/false (k30c3@syntax-dispatch k3c5a@t '(any any any)))) (if k3c5c@ls/false (apply (lambda (k3c5e@foo k3c5f@make-foo k3c60@foo?) k3c5f@make-foo) k3c5c@ls/false) (let ((k3c64@t k3c5a@t)) (let ((k3c66@ls/false (k30c3@syntax-dispatch k3c64@t 'any))) (if (and k3c66@ls/false (apply (lambda (k3c68@foo) (k2ebc@id? k3c68@foo)) k3c66@ls/false)) (apply (lambda (k3c6a@foo) (k3a8b@id k3c6a@foo '"make-" (k2ed0@stx->datum k3c6a@foo))) k3c66@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3c64@t))))))))) (k3a91@get-record-predicate-name (lambda (k3c44@spec) (let ((k3c46@t k3c44@spec)) (let ((k3c48@ls/false (k30c3@syntax-dispatch k3c46@t '(any any any)))) (if k3c48@ls/false (apply (lambda (k3c4a@foo k3c4b@make-foo k3c4c@foo?) k3c4c@foo?) k3c48@ls/false) (let ((k3c50@t k3c46@t)) (let ((k3c52@ls/false (k30c3@syntax-dispatch k3c50@t 'any))) (if (and k3c52@ls/false (apply (lambda (k3c54@foo) (k2ebc@id? k3c54@foo)) k3c52@ls/false)) (apply (lambda (k3c56@foo) (k3a8b@id k3c56@foo (k2ed0@stx->datum k3c56@foo) '"?")) k3c52@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3c50@t))))))))) (k3a93@get-clause (lambda (k3c32@id k3c33@ls) (let ((k3c36@t k3c33@ls)) (let ((k3c38@ls/false (k30c3@syntax-dispatch k3c36@t '()))) (if k3c38@ls/false (apply (lambda () '#f) k3c38@ls/false) (let ((k3c3a@t k3c36@t)) (let ((k3c3c@ls/false (k30c3@syntax-dispatch k3c3a@t '((any . any) . any)))) (if k3c3c@ls/false (apply (lambda (k3c3e@x k3c3f@rest k3c40@ls) (if (k2ec2@free-id=? (k3079@bless k3c32@id) k3c3e@x) (cons k3c3e@x k3c3f@rest) (k3a93@get-clause k3c32@id k3c40@ls))) k3c3c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3c3a@t))))))))) (k3a95@foo-rtd-code (lambda (k3be0@name k3be1@clause* k3be2@parent-rtd-code) (letrec* ((k3be7@convert-field-spec* (lambda (k3c18@ls) (list->vector (map (lambda (k3c1a@x) (let ((k3c1c@t k3c1a@x)) (let ((k3c1e@ls/false (k30c3@syntax-dispatch k3c1c@t '(#(scheme-id mutable) any . any)))) (if k3c1e@ls/false (apply (lambda (k3c20@name k3c21@rest) (list 'mutable k3c20@name)) k3c1e@ls/false) (let ((k3c24@t k3c1c@t)) (let ((k3c26@ls/false (k30c3@syntax-dispatch k3c24@t '(#(scheme-id immutable) any . any)))) (if k3c26@ls/false (apply (lambda (k3c28@name k3c29@rest) (list 'immutable k3c28@name)) k3c26@ls/false) (let ((k3c2c@t k3c24@t)) (let ((k3c2e@ls/false (k30c3@syntax-dispatch k3c2c@t 'any))) (if k3c2e@ls/false (apply (lambda (k3c30@name) (list 'immutable k3c30@name)) k3c2e@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3c2c@t))))))))))) k3c18@ls))))) (let ((k3be8@uid-code (let ((k3bf0@t (k3a93@get-clause 'nongenerative k3be1@clause*))) (let ((k3bf2@ls/false (k30c3@syntax-dispatch k3bf0@t '(_)))) (if k3bf2@ls/false (apply (lambda () (list 'quote (gensym))) k3bf2@ls/false) (let ((k3bf4@t k3bf0@t)) (let ((k3bf6@ls/false (k30c3@syntax-dispatch k3bf4@t '(_ any)))) (if k3bf6@ls/false (apply (lambda (k3bf8@uid) (list 'quote k3bf8@uid)) k3bf6@ls/false) (let ((k3bfa@t k3bf4@t)) (let ((k3bfc@ls/false (k30c3@syntax-dispatch k3bfa@t '_))) (if k3bfc@ls/false (apply (lambda () '#f) k3bfc@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3bfa@t))))))))))) (k3be9@sealed? (let ((k3bfe@t (k3a93@get-clause 'sealed k3be1@clause*))) (let ((k3c00@ls/false (k30c3@syntax-dispatch k3bfe@t '(_ #(atom #t))))) (if k3c00@ls/false (apply (lambda () '#t) k3c00@ls/false) (let ((k3c02@t k3bfe@t)) (let ((k3c04@ls/false (k30c3@syntax-dispatch k3c02@t '_))) (if k3c04@ls/false (apply (lambda () '#f) k3c04@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3c02@t)))))))) (k3bea@opaque? (let ((k3c06@t (k3a93@get-clause 'opaque k3be1@clause*))) (let ((k3c08@ls/false (k30c3@syntax-dispatch k3c06@t '(_ #(atom #t))))) (if k3c08@ls/false (apply (lambda () '#t) k3c08@ls/false) (let ((k3c0a@t k3c06@t)) (let ((k3c0c@ls/false (k30c3@syntax-dispatch k3c0a@t '_))) (if k3c0c@ls/false (apply (lambda () '#f) k3c0c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3c0a@t)))))))) (k3beb@fields (let ((k3c0e@t (k3a93@get-clause 'fields k3be1@clause*))) (let ((k3c10@ls/false (k30c3@syntax-dispatch k3c0e@t '(_ . each-any)))) (if k3c10@ls/false (apply (lambda (k3c12@field-spec*) (list 'quote (k3be7@convert-field-spec* k3c12@field-spec*))) k3c10@ls/false) (let ((k3c14@t k3c0e@t)) (let ((k3c16@ls/false (k30c3@syntax-dispatch k3c14@t '_))) (if k3c16@ls/false (apply (lambda () ''#()) k3c16@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3c14@t))))))))) (k3079@bless (list 'make-record-type-descriptor (list 'quote k3be0@name) k3be2@parent-rtd-code k3be8@uid-code k3be9@sealed? k3bea@opaque? k3beb@fields)))))) (k3a97@parent-rtd-code (lambda (k3bc8@clause*) (let ((k3bca@t (k3a93@get-clause 'parent k3bc8@clause*))) (let ((k3bcc@ls/false (k30c3@syntax-dispatch k3bca@t '(_ any)))) (if k3bcc@ls/false (apply (lambda (k3bce@name) (list 'record-type-descriptor k3bce@name)) k3bcc@ls/false) (let ((k3bd0@t k3bca@t)) (let ((k3bd2@ls/false (k30c3@syntax-dispatch k3bd0@t '#(atom #f)))) (if k3bd2@ls/false (apply (lambda () (let ((k3bd4@t (k3a93@get-clause 'parent-rtd k3bc8@clause*))) (let ((k3bd6@ls/false (k30c3@syntax-dispatch k3bd4@t '(_ any any)))) (if k3bd6@ls/false (apply (lambda (k3bd8@rtd k3bd9@rcd) k3bd8@rtd) k3bd6@ls/false) (let ((k3bdc@t k3bd4@t)) (let ((k3bde@ls/false (k30c3@syntax-dispatch k3bdc@t '#(atom #f)))) (if k3bde@ls/false (apply (lambda () '#f) k3bde@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3bdc@t)))))))) k3bd2@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3bd0@t))))))))) (k3a99@parent-rcd-code (lambda (k3bb0@clause*) (let ((k3bb2@t (k3a93@get-clause 'parent k3bb0@clause*))) (let ((k3bb4@ls/false (k30c3@syntax-dispatch k3bb2@t '(_ any)))) (if k3bb4@ls/false (apply (lambda (k3bb6@name) (list 'record-constructor-descriptor k3bb6@name)) k3bb4@ls/false) (let ((k3bb8@t k3bb2@t)) (let ((k3bba@ls/false (k30c3@syntax-dispatch k3bb8@t '#(atom #f)))) (if k3bba@ls/false (apply (lambda () (let ((k3bbc@t (k3a93@get-clause 'parent-rtd k3bb0@clause*))) (let ((k3bbe@ls/false (k30c3@syntax-dispatch k3bbc@t '(_ any any)))) (if k3bbe@ls/false (apply (lambda (k3bc0@rtd k3bc1@rcd) k3bc1@rcd) k3bbe@ls/false) (let ((k3bc4@t k3bbc@t)) (let ((k3bc6@ls/false (k30c3@syntax-dispatch k3bc4@t '#(atom #f)))) (if k3bc6@ls/false (apply (lambda () '#f) k3bc6@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3bc4@t)))))))) k3bba@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3bb8@t))))))))) (k3a9b@foo-rcd-code (lambda (k3ba8@clause* k3ba9@foo-rtd k3baa@protocol k3bab@parent-rcd-code) (list 'make-record-constructor-descriptor k3ba9@foo-rtd k3bab@parent-rcd-code k3baa@protocol))) (k3a9d@get-protocol-code (lambda (k3b9c@clause*) (let ((k3b9e@t (k3a93@get-clause 'protocol k3b9c@clause*))) (let ((k3ba0@ls/false (k30c3@syntax-dispatch k3b9e@t '(_ any)))) (if k3ba0@ls/false (apply (lambda (k3ba2@expr) k3ba2@expr) k3ba0@ls/false) (let ((k3ba4@t k3b9e@t)) (let ((k3ba6@ls/false (k30c3@syntax-dispatch k3ba4@t '_))) (if k3ba6@ls/false (apply (lambda () '#f) k3ba6@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3ba4@t))))))))) (k3a9f@get-fields (lambda (k3b8a@clause*) (let ((k3b8c@t k3b8a@clause*)) (let ((k3b8e@ls/false (k30c3@syntax-dispatch k3b8c@t '()))) (if k3b8e@ls/false (apply (lambda () '()) k3b8e@ls/false) (let ((k3b90@t k3b8c@t)) (let ((k3b92@ls/false (k30c3@syntax-dispatch k3b90@t '((#(scheme-id fields) . each-any) . _)))) (if k3b92@ls/false (apply (lambda (k3b94@f*) k3b94@f*) k3b92@ls/false) (let ((k3b96@t k3b90@t)) (let ((k3b98@ls/false (k30c3@syntax-dispatch k3b96@t '(_ . any)))) (if k3b98@ls/false (apply (lambda (k3b9a@rest) (k3a9f@get-fields k3b9a@rest)) k3b98@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3b96@t)))))))))))) (k3aa1@get-mutator-indices (lambda (k3b72@fields) (let k3b78@f ((k3b74@fields k3b72@fields) (k3b75@i '0)) (let ((k3b7a@t k3b74@fields)) (let ((k3b7c@ls/false (k30c3@syntax-dispatch k3b7a@t '()))) (if k3b7c@ls/false (apply (lambda () '()) k3b7c@ls/false) (let ((k3b7e@t k3b7a@t)) (let ((k3b80@ls/false (k30c3@syntax-dispatch k3b7e@t '((#(scheme-id mutable) . _) . any)))) (if k3b80@ls/false (apply (lambda (k3b82@rest) (cons k3b75@i (k3b78@f k3b82@rest (+ k3b75@i '1)))) k3b80@ls/false) (let ((k3b84@t k3b7e@t)) (let ((k3b86@ls/false (k30c3@syntax-dispatch k3b84@t '(_ . any)))) (if k3b86@ls/false (apply (lambda (k3b88@rest) (k3b78@f k3b88@rest (+ k3b75@i '1))) k3b86@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3b84@t))))))))))))) (k3aa3@get-mutators (lambda (k3b48@foo k3b49@fields) (letrec* ((k3b4d@gen-name (lambda (k3b70@x) (k31a7@datum->syntax k3b48@foo (string->symbol (string-append (symbol->string (k31a9@syntax->datum k3b48@foo)) '"-" (symbol->string (k31a9@syntax->datum k3b70@x)) '"-set!")))))) (let k3b50@f ((k3b4e@fields k3b49@fields)) (let ((k3b52@t k3b4e@fields)) (let ((k3b54@ls/false (k30c3@syntax-dispatch k3b52@t '()))) (if k3b54@ls/false (apply (lambda () '()) k3b54@ls/false) (let ((k3b56@t k3b52@t)) (let ((k3b58@ls/false (k30c3@syntax-dispatch k3b56@t '((#(scheme-id mutable) any any any) . any)))) (if k3b58@ls/false (apply (lambda (k3b5a@name k3b5b@accessor k3b5c@mutator k3b5d@rest) (cons k3b5c@mutator (k3b50@f k3b5d@rest))) k3b58@ls/false) (let ((k3b62@t k3b56@t)) (let ((k3b64@ls/false (k30c3@syntax-dispatch k3b62@t '((#(scheme-id mutable) any) . any)))) (if k3b64@ls/false (apply (lambda (k3b66@name k3b67@rest) (cons (k3b4d@gen-name k3b66@name) (k3b50@f k3b67@rest))) k3b64@ls/false) (let ((k3b6a@t k3b62@t)) (let ((k3b6c@ls/false (k30c3@syntax-dispatch k3b6a@t '(_ . any)))) (if k3b6c@ls/false (apply (lambda (k3b6e@rest) (k3b50@f k3b6e@rest)) k3b6c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3b6a@t))))))))))))))))) (k3aa5@get-accessors (lambda (k3b04@foo k3b05@fields) (letrec* ((k3b09@gen-name (lambda (k3b46@x) (k31a7@datum->syntax k3b04@foo (string->symbol (string-append (symbol->string (k31a9@syntax->datum k3b04@foo)) '"-" (symbol->string (k31a9@syntax->datum k3b46@x)))))))) (map (lambda (k3b0a@field) (let ((k3b0c@t k3b0a@field)) (let ((k3b0e@ls/false (k30c3@syntax-dispatch k3b0c@t '(#(scheme-id mutable) any any any)))) (if (and k3b0e@ls/false (apply (lambda (k3b10@name k3b11@accessor k3b12@mutator) (k2ebc@id? k3b11@accessor)) k3b0e@ls/false)) (apply (lambda (k3b16@name k3b17@accessor k3b18@mutator) k3b17@accessor) k3b0e@ls/false) (let ((k3b1c@t k3b0c@t)) (let ((k3b1e@ls/false (k30c3@syntax-dispatch k3b1c@t '(#(scheme-id immutable) any any)))) (if (and k3b1e@ls/false (apply (lambda (k3b20@name k3b21@accessor) (k2ebc@id? k3b21@accessor)) k3b1e@ls/false)) (apply (lambda (k3b24@name k3b25@accessor) k3b25@accessor) k3b1e@ls/false) (let ((k3b28@t k3b1c@t)) (let ((k3b2a@ls/false (k30c3@syntax-dispatch k3b28@t '(#(scheme-id mutable) any)))) (if (and k3b2a@ls/false (apply (lambda (k3b2c@name) (k2ebc@id? k3b2c@name)) k3b2a@ls/false)) (apply (lambda (k3b2e@name) (k3b09@gen-name k3b2e@name)) k3b2a@ls/false) (let ((k3b30@t k3b28@t)) (let ((k3b32@ls/false (k30c3@syntax-dispatch k3b30@t '(#(scheme-id immutable) any)))) (if (and k3b32@ls/false (apply (lambda (k3b34@name) (k2ebc@id? k3b34@name)) k3b32@ls/false)) (apply (lambda (k3b36@name) (k3b09@gen-name k3b36@name)) k3b32@ls/false) (let ((k3b38@t k3b30@t)) (let ((k3b3a@ls/false (k30c3@syntax-dispatch k3b38@t 'any))) (if (and k3b3a@ls/false (apply (lambda (k3b3c@name) (k2ebc@id? k3b3c@name)) k3b3a@ls/false)) (apply (lambda (k3b3e@name) (k3b09@gen-name k3b3e@name)) k3b3a@ls/false) (let ((k3b40@t k3b38@t)) (let ((k3b42@ls/false (k30c3@syntax-dispatch k3b40@t 'any))) (if k3b42@ls/false (apply (lambda (k3b44@others) (k31a3@syntax-violation '#f '"invalid field spec" k3b0a@field)) k3b42@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3b40@t)))))))))))))))))))) k3b05@fields)))) (k3aa7@enumerate (lambda (k3afc@ls) (let k3b02@f ((k3afe@ls k3afc@ls) (k3aff@i '0)) (if (null? k3afe@ls) '() (cons k3aff@i (k3b02@f (cdr k3afe@ls) (+ k3aff@i '1))))))) (k3aa9@do-define-record (lambda (k3ad4@namespec k3ad5@clause*) (let ((k3ad8@foo (k3a8d@get-record-name k3ad4@namespec))) (let ((k3ada@foo-rtd (gensym))) (let ((k3adc@foo-rcd (gensym))) (let ((k3ade@protocol (gensym))) (let ((k3ae0@make-foo (k3a8f@get-record-constructor-name k3ad4@namespec))) (let ((k3ae2@fields (k3a9f@get-fields k3ad5@clause*))) (let ((k3ae4@idx* (k3aa7@enumerate k3ae2@fields))) (let ((k3ae6@foo-x* (k3aa5@get-accessors k3ad8@foo k3ae2@fields))) (let ((k3ae8@set-foo-x!* (k3aa3@get-mutators k3ad8@foo k3ae2@fields))) (let ((k3aea@set-foo-idx* (k3aa1@get-mutator-indices k3ae2@fields))) (let ((k3aec@foo? (k3a91@get-record-predicate-name k3ad4@namespec))) (let ((k3aee@foo-rtd-code (k3a95@foo-rtd-code k3ad8@foo k3ad5@clause* (k3a97@parent-rtd-code k3ad5@clause*)))) (let ((k3af0@foo-rcd-code (k3a9b@foo-rcd-code k3ad5@clause* k3ada@foo-rtd k3ade@protocol (k3a99@parent-rcd-code k3ad5@clause*)))) (let ((k3af2@protocol-code (k3a9d@get-protocol-code k3ad5@clause*))) (k3079@bless (cons 'begin (cons (list 'define k3ada@foo-rtd k3aee@foo-rtd-code) (cons (list 'define k3ade@protocol k3af2@protocol-code) (cons (list 'define k3adc@foo-rcd k3af0@foo-rcd-code) (cons (list 'define-syntax k3ad8@foo (list 'list ''$rtd (list 'syntax k3ada@foo-rtd) (list 'syntax k3adc@foo-rcd))) (cons (list 'define k3aec@foo? (list 'record-predicate k3ada@foo-rtd)) (cons (list 'define k3ae0@make-foo (list 'record-constructor k3adc@foo-rcd)) (append (map (lambda (k3af4@foo-x k3af5@idx) (list 'define k3af4@foo-x (list 'record-accessor k3ada@foo-rtd k3af5@idx))) k3ae6@foo-x* k3ae4@idx*) (map (lambda (k3af8@set-foo-x! k3af9@idx) (list 'define k3af8@set-foo-x! (list 'record-mutator k3ada@foo-rtd k3af9@idx))) k3ae8@set-foo-x!* k3aea@set-foo-idx*)))))))))))))))))))))))))) (k3aab@verify-clauses (lambda (k3ab4@x k3ab5@cls*) (letrec* ((k3ab9@valid-kwds (map k3079@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (k3abb@free-id-member? (lambda (k3ad0@x k3ad1@ls) (and (pair? k3ad1@ls) (or (k2ec2@free-id=? k3ad0@x (car k3ad1@ls)) (k3abb@free-id-member? k3ad0@x (cdr k3ad1@ls))))))) (let k3ac0@f ((k3abc@cls* k3ab5@cls*) (k3abd@seen* '())) (if (not (null? k3abc@cls*)) (let ((k3ac2@t (car k3abc@cls*))) (let ((k3ac4@ls/false (k30c3@syntax-dispatch k3ac2@t '(any . any)))) (if k3ac4@ls/false (apply (lambda (k3ac6@kwd k3ac7@rest) (if (or (not (k2ebc@id? k3ac6@kwd)) (not (k3abb@free-id-member? k3ac6@kwd k3ab9@valid-kwds))) (k31a3@syntax-violation '#f '"not a valid define-record-type keyword" k3ac6@kwd) (if (k2ec8@bound-id-member? k3ac6@kwd k3abd@seen*) (k31a3@syntax-violation '#f '"duplicate use of keyword " k3ab4@x k3ac6@kwd) (k3ac0@f (cdr k3abc@cls*) (cons k3ac6@kwd k3abd@seen*))))) k3ac4@ls/false) (let ((k3aca@t k3ac2@t)) (let ((k3acc@ls/false (k30c3@syntax-dispatch k3aca@t 'any))) (if k3acc@ls/false (apply (lambda (k3ace@cls) (k31a3@syntax-violation '#f '"malformed define-record-type clause" k3ace@cls)) k3acc@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3aca@t))))))) (void))))))) (let ((k3aac@t k3a88@x)) (let ((k3aae@ls/false (k30c3@syntax-dispatch k3aac@t '(_ any . each-any)))) (if k3aae@ls/false (apply (lambda (k3ab0@namespec k3ab1@clause*) (begin (k3aab@verify-clauses k3a88@x k3ab1@clause*) (k3aa9@do-define-record k3ab0@namespec k3ab1@clause*))) k3aae@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3aac@t))))))) (set! k4b93@k30b7@define-record-type-macro k30b7@define-record-type-macro) (set! k30b9@define-condition-type-macro (lambda (k3c84@x) (letrec* ((k3c87@mkname (lambda (k3cb4@name k3cb5@suffix) (k31a7@datum->syntax k3cb4@name (string->symbol (string-append (symbol->string (k31a9@syntax->datum k3cb4@name)) k3cb5@suffix)))))) (let ((k3c88@t k3c84@x)) (let ((k3c8a@ls/false (k30c3@syntax-dispatch k3c88@t '(any any any any any . #(each (any any)))))) (if (and k3c8a@ls/false (apply (lambda (k3c8c@ctxt k3c8d@name k3c8e@super k3c8f@constructor k3c90@predicate k3c91@field* k3c92@accessor*) (and (k2ebc@id? k3c8d@name) (k2ebc@id? k3c8e@super) (k2ebc@id? k3c8f@constructor) (k2ebc@id? k3c90@predicate) (for-all k2ebc@id? k3c91@field*) (for-all k2ebc@id? k3c92@accessor*))) k3c8a@ls/false)) (apply (lambda (k3c9a@ctxt k3c9b@name k3c9c@super k3c9d@constructor k3c9e@predicate k3c9f@field* k3ca0@accessor*) (let ((k3ca8@aux-accessor* (map (lambda (k3caa@x) (gensym)) k3ca0@accessor*))) (k3079@bless (cons 'begin (cons (cons 'define-record-type (cons (list k3c9b@name k3c9d@constructor (gensym)) (cons (list 'parent k3c9c@super) (cons (cons 'fields (map (lambda (k3cac@field k3cad@aux) (list 'immutable k3cac@field k3cad@aux)) k3c9f@field* k3ca8@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define k3c9e@predicate (list 'condition-predicate (list 'record-type-descriptor k3c9b@name))) (map (lambda (k3cb0@accessor k3cb1@aux) (list 'define k3cb0@accessor (list 'condition-accessor (list 'record-type-descriptor k3c9b@name) k3cb1@aux))) k3ca0@accessor* k3ca8@aux-accessor*))))))) k3c8a@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3c88@t))))))) (set! k4b94@k30b9@define-condition-type-macro k30b9@define-condition-type-macro) (set! k30bb@incorrect-usage-macro (lambda (k3cb8@e) (k31a3@syntax-violation '#f '"incorrect usage of auxiliary keyword" k3cb8@e))) (set! k4b95@k30bb@incorrect-usage-macro k30bb@incorrect-usage-macro) (set! k30bd@parameterize-macro (lambda (k3cba@e) (let ((k3cbc@t k3cba@e)) (let ((k3cbe@ls/false (k30c3@syntax-dispatch k3cbc@t '(_ () any . each-any)))) (if k3cbe@ls/false (apply (lambda (k3cc0@b k3cc1@b*) (k3079@bless (cons 'let (cons '() (cons k3cc0@b k3cc1@b*))))) k3cbe@ls/false) (let ((k3cc4@t k3cbc@t)) (let ((k3cc6@ls/false (k30c3@syntax-dispatch k3cc4@t '(_ #(each (any any)) any . each-any)))) (if k3cc6@ls/false (apply (lambda (k3cc8@olhs* k3cc9@orhs* k3cca@b k3ccb@b*) (let ((k3cd0@lhs* (k3191@generate-temporaries k3cc8@olhs*)) (k3cd1@rhs* (k3191@generate-temporaries k3cc9@orhs*))) (k3079@bless (cons (list 'lambda (append k3cd0@lhs* k3cd1@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (k3cd4@lhs k3cd5@rhs) (list 'let (list (list 't (list k3cd4@lhs))) (list k3cd4@lhs k3cd5@rhs) (cons 'set! (cons k3cd5@rhs '(t))))) k3cd0@lhs* k3cd1@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons k3cca@b k3ccb@b*))) '(swap)))))) (append k3cc8@olhs* k3cc9@orhs*))))) k3cc6@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3cc4@t))))))))) (set! k4b96@k30bd@parameterize-macro k30bd@parameterize-macro) (set! k30bf@foreign-call-transformer (lambda (k3cd8@e k3cd9@r k3cda@mr) (let ((k3cde@t k3cd8@e)) (let ((k3ce0@ls/false (k30c3@syntax-dispatch k3cde@t '(_ any . each-any)))) (if k3ce0@ls/false (apply (lambda (k3ce2@name k3ce3@arg*) (cons 'foreign-call (cons (k30e5@chi-expr k3ce2@name k3cd9@r k3cda@mr) (k30e1@chi-expr* k3ce3@arg* k3cd9@r k3cda@mr)))) k3ce0@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3cde@t)))))) (set! k4b97@k30bf@foreign-call-transformer k30bf@foreign-call-transformer) (set! k30c1@convert-pattern (lambda (k3ce6@pattern k3ce7@keys) (letrec* ((k3ceb@cvt* (lambda (k3d8a@p* k3d8b@n k3d8c@ids) (if (null? k3d8a@p*) (values '() k3d8c@ids) (call-with-values (lambda () (k3ceb@cvt* (cdr k3d8a@p*) k3d8b@n k3d8c@ids)) (lambda (k3d94@k3d91 k3d95@k3d93) (let ((k3d98@ids k3d95@k3d93) (k3d99@y k3d94@k3d91)) (call-with-values (lambda () (k3ced@cvt (car k3d8a@p*) k3d8b@n k3d98@ids)) (lambda (k3da0@k3d9d k3da1@k3d9f) (let ((k3da4@ids k3da1@k3d9f) (k3da5@x k3da0@k3d9d)) (values (cons k3da5@x k3d99@y) k3da4@ids)))))))))) (k3ced@cvt (lambda (k3cee@p k3cef@n k3cf0@ids) (let ((k3cf4@t k3cee@p)) (let ((k3cf6@ls/false (k30c3@syntax-dispatch k3cf4@t 'any))) (if (and k3cf6@ls/false (apply (lambda (k3cf8@id) (k2ebc@id? k3cf8@id)) k3cf6@ls/false)) (apply (lambda (k3cfa@id) (if (k2ec8@bound-id-member? k3cee@p k3ce7@keys) (values (vector 'free-id k3cee@p) k3cf0@ids) (if (k2ec2@free-id=? k3cee@p (k304b@scheme-stx '_)) (values '_ k3cf0@ids) (values 'any (cons (cons k3cee@p k3cef@n) k3cf0@ids))))) k3cf6@ls/false) (let ((k3cfc@t k3cf4@t)) (let ((k3cfe@ls/false (k30c3@syntax-dispatch k3cfc@t '(any any)))) (if (and k3cfe@ls/false (apply (lambda (k3d00@p k3d01@dots) (k30c5@ellipsis? k3d01@dots)) k3cfe@ls/false)) (apply (lambda (k3d04@p k3d05@dots) (call-with-values (lambda () (k3ced@cvt k3d04@p (+ k3cef@n '1) k3cf0@ids)) (lambda (k3d0c@k3d09 k3d0d@k3d0b) (let ((k3d10@ids k3d0d@k3d0b) (k3d11@p k3d0c@k3d09)) (values (if (eq? k3d11@p 'any) 'each-any (vector 'each k3d11@p)) k3d10@ids))))) k3cfe@ls/false) (let ((k3d14@t k3cfc@t)) (let ((k3d16@ls/false (k30c3@syntax-dispatch k3d14@t '(any any . #(each+ any () any))))) (if (and k3d16@ls/false (apply (lambda (k3d18@x k3d19@dots k3d1a@ys k3d1b@z) (k30c5@ellipsis? k3d19@dots)) k3d16@ls/false)) (apply (lambda (k3d20@x k3d21@dots k3d22@ys k3d23@z) (call-with-values (lambda () (k3ced@cvt k3d23@z k3cef@n k3cf0@ids)) (lambda (k3d2c@k3d29 k3d2d@k3d2b) (let ((k3d30@ids k3d2d@k3d2b) (k3d31@z k3d2c@k3d29)) (call-with-values (lambda () (k3ceb@cvt* k3d22@ys k3cef@n k3d30@ids)) (lambda (k3d38@k3d35 k3d39@k3d37) (let ((k3d3c@ids k3d39@k3d37) (k3d3d@ys k3d38@k3d35)) (call-with-values (lambda () (k3ced@cvt k3d20@x (+ k3cef@n '1) k3d3c@ids)) (lambda (k3d44@k3d41 k3d45@k3d43) (let ((k3d48@ids k3d45@k3d43) (k3d49@x k3d44@k3d41)) (values (vector 'each+ k3d49@x (reverse k3d3d@ys) k3d31@z) k3d48@ids))))))))))) k3d16@ls/false) (let ((k3d4c@t k3d14@t)) (let ((k3d4e@ls/false (k30c3@syntax-dispatch k3d4c@t '(any . any)))) (if k3d4e@ls/false (apply (lambda (k3d50@x k3d51@y) (call-with-values (lambda () (k3ced@cvt k3d51@y k3cef@n k3cf0@ids)) (lambda (k3d58@k3d55 k3d59@k3d57) (let ((k3d5c@ids k3d59@k3d57) (k3d5d@y k3d58@k3d55)) (call-with-values (lambda () (k3ced@cvt k3d50@x k3cef@n k3d5c@ids)) (lambda (k3d64@k3d61 k3d65@k3d63) (let ((k3d68@ids k3d65@k3d63) (k3d69@x k3d64@k3d61)) (values (cons k3d69@x k3d5d@y) k3d68@ids)))))))) k3d4e@ls/false) (let ((k3d6c@t k3d4c@t)) (let ((k3d6e@ls/false (k30c3@syntax-dispatch k3d6c@t '()))) (if k3d6e@ls/false (apply (lambda () (values '() k3cf0@ids)) k3d6e@ls/false) (let ((k3d70@t k3d6c@t)) (let ((k3d72@ls/false (k30c3@syntax-dispatch k3d70@t '#(vector each-any)))) (if (and k3d72@ls/false (apply (lambda (k3d74@p) (not (k2e88@stx? k3d74@p))) k3d72@ls/false)) (apply (lambda (k3d76@p) (call-with-values (lambda () (k3ced@cvt k3d76@p k3cef@n k3cf0@ids)) (lambda (k3d7c@k3d79 k3d7d@k3d7b) (let ((k3d80@ids k3d7d@k3d7b) (k3d81@p k3d7c@k3d79)) (values (vector 'vector k3d81@p) k3d80@ids))))) k3d72@ls/false) (let ((k3d84@t k3d70@t)) (let ((k3d86@ls/false (k30c3@syntax-dispatch k3d84@t 'any))) (if k3d86@ls/false (apply (lambda (k3d88@datum) (values (vector 'atom (k2ed0@stx->datum k3d88@datum)) k3cf0@ids)) k3d86@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3d84@t))))))))))))))))))))))))) (k3ced@cvt k3ce6@pattern '0 '())))) (set! k4b98@k30c1@convert-pattern k30c1@convert-pattern) (set! k30c3@syntax-dispatch (letrec* ((k3da9@stx^ (lambda (k3e84@e k3e85@m* k3e86@s* k3e87@ae*) (if (and (null? k3e85@m*) (null? k3e86@s*) (null? k3e87@ae*)) k3e84@e (k2ea4@mkstx k3e84@e k3e85@m* k3e86@s* k3e87@ae*)))) (k3dab@match-each (lambda (k3e64@e k3e65@p k3e66@m* k3e67@s* k3e68@ae*) (if (pair? k3e64@e) (let ((k3e6e@first (k3db7@match (car k3e64@e) k3e65@p k3e66@m* k3e67@s* k3e68@ae* '()))) (and k3e6e@first (let ((k3e70@rest (k3dab@match-each (cdr k3e64@e) k3e65@p k3e66@m* k3e67@s* k3e68@ae*))) (and k3e70@rest (cons k3e6e@first k3e70@rest))))) (if (null? k3e64@e) '() (if (k2e88@stx? k3e64@e) (and (not (k2e42@top-marked? k3e66@m*)) (call-with-values (lambda () (join-wraps k3e66@m* k3e67@s* k3e68@ae* k3e64@e)) (lambda (k3e78@k3e73 k3e79@k3e75 k3e7a@k3e77) (let ((k3e7e@ae* k3e7a@k3e77) (k3e7f@s* k3e79@k3e75) (k3e80@m* k3e78@k3e73)) (k3dab@match-each (k2e8a@stx-expr k3e64@e) k3e65@p k3e80@m* k3e7f@s* k3e7e@ae*))))) (if (k2a00@k28d2@annotation? k3e64@e) (k3dab@match-each (k2a02@k28d6@annotation-expression k3e64@e) k3e65@p k3e66@m* k3e67@s* k3e68@ae*) '#f)))))) (k3dad@match-each+ (lambda (k3e24@e k3e25@x-pat k3e26@y-pat k3e27@z-pat k3e28@m* k3e29@s* k3e2a@ae* k3e2b@r) (let k3e3c@f ((k3e34@e k3e24@e) (k3e35@m* k3e28@m*) (k3e36@s* k3e29@s*) (k3e37@ae* k3e2a@ae*)) (if (pair? k3e34@e) (call-with-values (lambda () (k3e3c@f (cdr k3e34@e) k3e35@m* k3e36@s* k3e37@ae*)) (lambda (k3e44@k3e3f k3e45@k3e41 k3e46@k3e43) (let ((k3e4a@r k3e46@k3e43) (k3e4b@y-pat k3e45@k3e41) (k3e4c@xr* k3e44@k3e3f)) (if k3e4a@r (if (null? k3e4b@y-pat) (let ((k3e50@xr (k3db7@match (car k3e34@e) k3e25@x-pat k3e35@m* k3e36@s* k3e37@ae* '()))) (if k3e50@xr (values (cons k3e50@xr k3e4c@xr*) k3e4b@y-pat k3e4a@r) (values '#f '#f '#f))) (values '() (cdr k3e4b@y-pat) (k3db7@match (car k3e34@e) (car k3e4b@y-pat) k3e35@m* k3e36@s* k3e37@ae* k3e4a@r))) (values '#f '#f '#f))))) (if (k2e88@stx? k3e34@e) (if (k2e42@top-marked? k3e35@m*) (values '() k3e26@y-pat (k3db7@match k3e34@e k3e27@z-pat k3e35@m* k3e36@s* k3e37@ae* k3e2b@r)) (call-with-values (lambda () (join-wraps k3e35@m* k3e36@s* k3e37@ae* k3e34@e)) (lambda (k3e58@k3e53 k3e59@k3e55 k3e5a@k3e57) (let ((k3e5e@ae* k3e5a@k3e57) (k3e5f@s* k3e59@k3e55) (k3e60@m* k3e58@k3e53)) (k3e3c@f (k2e8a@stx-expr k3e34@e) k3e60@m* k3e5f@s* k3e5e@ae*))))) (if (k2a00@k28d2@annotation? k3e34@e) (k3e3c@f (k2a02@k28d6@annotation-expression k3e34@e) k3e35@m* k3e36@s* k3e37@ae*) (values '() k3e26@y-pat (k3db7@match k3e34@e k3e27@z-pat k3e35@m* k3e36@s* k3e37@ae* k3e2b@r)))))))) (k3daf@match-each-any (lambda (k3e08@e k3e09@m* k3e0a@s* k3e0b@ae*) (if (pair? k3e08@e) (let ((k3e10@l (k3daf@match-each-any (cdr k3e08@e) k3e09@m* k3e0a@s* k3e0b@ae*))) (and k3e10@l (cons (k3da9@stx^ (car k3e08@e) k3e09@m* k3e0a@s* k3e0b@ae*) k3e10@l))) (if (null? k3e08@e) '() (if (k2e88@stx? k3e08@e) (and (not (k2e42@top-marked? k3e09@m*)) (call-with-values (lambda () (join-wraps k3e09@m* k3e0a@s* k3e0b@ae* k3e08@e)) (lambda (k3e18@k3e13 k3e19@k3e15 k3e1a@k3e17) (let ((k3e1e@ae* k3e1a@k3e17) (k3e1f@s* k3e19@k3e15) (k3e20@m* k3e18@k3e13)) (k3daf@match-each-any (k2e8a@stx-expr k3e08@e) k3e20@m* k3e1f@s* k3e1e@ae*))))) (if (k2a00@k28d2@annotation? k3e08@e) (k3daf@match-each-any (k2a02@k28d6@annotation-expression k3e08@e) k3e09@m* k3e0a@s* k3e0b@ae*) '#f)))))) (k3db1@match-empty (lambda (k3e02@p k3e03@r) (if (null? k3e02@p) k3e03@r (if (eq? k3e02@p '_) k3e03@r (if (eq? k3e02@p 'any) (cons '() k3e03@r) (if (pair? k3e02@p) (k3db1@match-empty (car k3e02@p) (k3db1@match-empty (cdr k3e02@p) k3e03@r)) (if (eq? k3e02@p 'each-any) (cons '() k3e03@r) (let ((k3e06@t (vector-ref k3e02@p '0))) (if (memv k3e06@t '(each)) (k3db1@match-empty (vector-ref k3e02@p '1) k3e03@r) (if (memv k3e06@t '(each+)) (k3db1@match-empty (vector-ref k3e02@p '1) (k3db1@match-empty (reverse (vector-ref k3e02@p '2)) (k3db1@match-empty (vector-ref k3e02@p '3) k3e03@r))) (if (memv k3e06@t '(free-id atom)) k3e03@r (if (memv k3e06@t '(scheme-id atom)) k3e03@r (if (memv k3e06@t '(vector)) (k3db1@match-empty (vector-ref k3e02@p '1) k3e03@r) (assertion-violation 'syntax-dispatch '"invalid pattern" k3e02@p)))))))))))))) (k3db3@combine (lambda (k3dfe@r* k3dff@r) (if (null? (car k3dfe@r*)) k3dff@r (cons (map car k3dfe@r*) (k3db3@combine (map cdr k3dfe@r*) k3dff@r))))) (k3db5@match* (lambda (k3dda@e k3ddb@p k3ddc@m* k3ddd@s* k3dde@ae* k3ddf@r) (if (null? k3ddb@p) (and (null? k3dda@e) k3ddf@r) (if (pair? k3ddb@p) (and (pair? k3dda@e) (k3db7@match (car k3dda@e) (car k3ddb@p) k3ddc@m* k3ddd@s* k3dde@ae* (k3db7@match (cdr k3dda@e) (cdr k3ddb@p) k3ddc@m* k3ddd@s* k3dde@ae* k3ddf@r))) (if (eq? k3ddb@p 'each-any) (let ((k3de6@l (k3daf@match-each-any k3dda@e k3ddc@m* k3ddd@s* k3dde@ae*))) (and k3de6@l (cons k3de6@l k3ddf@r))) (let ((k3de8@t (vector-ref k3ddb@p '0))) (if (memv k3de8@t '(each)) (if (null? k3dda@e) (k3db1@match-empty (vector-ref k3ddb@p '1) k3ddf@r) (let ((k3dea@r* (k3dab@match-each k3dda@e (vector-ref k3ddb@p '1) k3ddc@m* k3ddd@s* k3dde@ae*))) (and k3dea@r* (k3db3@combine k3dea@r* k3ddf@r)))) (if (memv k3de8@t '(free-id)) (and (symbol? k3dda@e) (k2e42@top-marked? k3ddc@m*) (k2ec2@free-id=? (k3da9@stx^ k3dda@e k3ddc@m* k3ddd@s* k3dde@ae*) (vector-ref k3ddb@p '1)) k3ddf@r) (if (memv k3de8@t '(scheme-id)) (and (symbol? k3dda@e) (k2e42@top-marked? k3ddc@m*) (k2ec2@free-id=? (k3da9@stx^ k3dda@e k3ddc@m* k3ddd@s* k3dde@ae*) (k304b@scheme-stx (vector-ref k3ddb@p '1))) k3ddf@r) (if (memv k3de8@t '(each+)) (call-with-values (lambda () (k3dad@match-each+ k3dda@e (vector-ref k3ddb@p '1) (vector-ref k3ddb@p '2) (vector-ref k3ddb@p '3) k3ddc@m* k3ddd@s* k3dde@ae* k3ddf@r)) (lambda (k3df2@k3ded k3df3@k3def k3df4@k3df1) (let ((k3df8@r k3df4@k3df1) (k3df9@y-pat k3df3@k3def) (k3dfa@xr* k3df2@k3ded)) (and k3df8@r (null? k3df9@y-pat) (if (null? k3dfa@xr*) (k3db1@match-empty (vector-ref k3ddb@p '1) k3df8@r) (k3db3@combine k3dfa@xr* k3df8@r)))))) (if (memv k3de8@t '(atom)) (and (fast-equal? (vector-ref k3ddb@p '1) (k2ece@strip k3dda@e k3ddc@m*)) k3ddf@r) (if (memv k3de8@t '(vector)) (and (vector? k3dda@e) (k3db7@match (vector->list k3dda@e) (vector-ref k3ddb@p '1) k3ddc@m* k3ddd@s* k3dde@ae* k3ddf@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" k3ddb@p))))))))))))) (k3db7@match (lambda (k3dbc@e k3dbd@p k3dbe@m* k3dbf@s* k3dc0@ae* k3dc1@r) (if (not k3dc1@r) '#f (if (eq? k3dbd@p '_) k3dc1@r (if (eq? k3dbd@p 'any) (cons (k3da9@stx^ k3dbc@e k3dbe@m* k3dbf@s* k3dc0@ae*) k3dc1@r) (if (k2e88@stx? k3dbc@e) (and (not (k2e42@top-marked? k3dbe@m*)) (call-with-values (lambda () (join-wraps k3dbe@m* k3dbf@s* k3dc0@ae* k3dbc@e)) (lambda (k3dce@k3dc9 k3dcf@k3dcb k3dd0@k3dcd) (let ((k3dd4@ae* k3dd0@k3dcd) (k3dd5@s* k3dcf@k3dcb) (k3dd6@m* k3dce@k3dc9)) (k3db7@match (k2e8a@stx-expr k3dbc@e) k3dbd@p k3dd6@m* k3dd5@s* k3dd4@ae* k3dc1@r))))) (if (k2a00@k28d2@annotation? k3dbc@e) (k3db7@match (k2a02@k28d6@annotation-expression k3dbc@e) k3dbd@p k3dbe@m* k3dbf@s* k3dc0@ae* k3dc1@r) (k3db5@match* k3dbc@e k3dbd@p k3dbe@m* k3dbf@s* k3dc0@ae* k3dc1@r))))))))) (lambda (k3db8@e k3db9@p) (k3db7@match k3db8@e k3db9@p '() '() '() '())))) (set! k4b99@k30c3@syntax-dispatch k30c3@syntax-dispatch) (set! k30c5@ellipsis? (lambda (k3e8c@x) (and (k2ebc@id? k3e8c@x) (k2ec2@free-id=? k3e8c@x (k304b@scheme-stx '...))))) (set! k4b9a@k30c5@ellipsis? k30c5@ellipsis?) (set! k30c7@underscore? (lambda (k3e8e@x) (and (k2ebc@id? k3e8e@x) (k2ec2@free-id=? k3e8e@x (k304b@scheme-stx '_))))) (set! k4b9b@k30c7@underscore? k30c7@underscore?) (set! k30c9@verify-literals (lambda (k3e90@lits k3e91@expr) (for-each (lambda (k3e94@x) (if (or (not (k2ebc@id? k3e94@x)) (k30c5@ellipsis? k3e94@x) (k30c7@underscore? k3e94@x)) (k31a3@syntax-violation '#f '"invalid literal" k3e91@expr k3e94@x) (void))) k3e90@lits))) (set! k4b9c@k30c9@verify-literals k30c9@verify-literals) (set! k30cb@syntax-case-transformer (letrec* ((k3e97@build-dispatch-call (lambda (k3f08@pvars k3f09@expr k3f0a@y k3f0b@r k3f0c@mr) (let ((k3f12@ids (map car k3f08@pvars)) (k3f13@levels (map cdr k3f08@pvars))) (let ((k3f16@labels (map k2e48@gen-label k3f12@ids)) (k3f17@new-vars (map k2e44@gen-lexical k3f12@ids))) (let ((k3f1a@body (k30e5@chi-expr (k2ea8@add-subst (k2e7c@make-full-rib k3f12@ids k3f16@labels) k3f09@expr) (append (map (lambda (k3f1c@label k3f1d@var k3f1e@level) (cons k3f1c@label (k2ed6@make-binding 'syntax (cons k3f1d@var k3f1e@level)))) k3f16@labels k3f17@new-vars (map cdr k3f08@pvars)) k3f0b@r) k3f0c@mr))) (list '(primitive apply) (k2e1f@k2d51@build-lambda '#f k3f17@new-vars k3f1a@body) k3f0a@y)))))) (k3e99@invalid-ids-error (lambda (k3efc@id* k3efd@e k3efe@class) (let k3f06@find ((k3f02@id* k3efc@id*) (k3f03@ok* '())) (if (null? k3f02@id*) (k31a3@syntax-violation '#f '"invalid syntax" k3efd@e) (if (k2ebc@id? (car k3f02@id*)) (if (k2ec8@bound-id-member? (car k3f02@id*) k3f03@ok*) (k319f@syntax-error (car k3f02@id*) '"duplicate " k3efe@class) (k3f06@find (cdr k3f02@id*) (cons (car k3f02@id*) k3f03@ok*))) (k319f@syntax-error (car k3f02@id*) '"invalid " k3efe@class)))))) (k3e9b@gen-clause (lambda (k3ed4@x k3ed5@keys k3ed6@clauses k3ed7@r k3ed8@mr k3ed9@pat k3eda@fender k3edb@expr) (call-with-values (lambda () (k30c1@convert-pattern k3ed9@pat k3ed5@keys)) (lambda (k3ee8@k3ee5 k3ee9@k3ee7) (let ((k3eec@pvars k3ee9@k3ee7) (k3eed@p k3ee8@k3ee5)) (if (not (k2ec6@distinct-bound-ids? (map car k3eec@pvars))) (k3e99@invalid-ids-error (map car k3eec@pvars) k3ed9@pat '"pattern variable") (if (not (for-all (lambda (k3ef0@x) (not (k30c5@ellipsis? (car k3ef0@x)))) k3eec@pvars)) (k31a3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" k3ed9@pat) (let ((k3ef2@y (k2e44@gen-lexical 'tmp))) (let ((k3ef4@test (if (eq? k3eda@fender '#t) k3ef2@y (let ((k3ef6@call (k3e97@build-dispatch-call k3eec@pvars k3eda@fender k3ef2@y k3ed7@r k3ed8@mr))) (list 'if k3ef2@y k3ef6@call (list 'quote '#f)))))) (let ((k3ef8@conseq (k3e97@build-dispatch-call k3eec@pvars k3edb@expr k3ef2@y k3ed7@r k3ed8@mr))) (let ((k3efa@altern (k3e9d@gen-syntax-case k3ed4@x k3ed5@keys k3ed6@clauses k3ed7@r k3ed8@mr))) (list (k2e1f@k2d51@build-lambda '#f (list k3ef2@y) (list 'if k3ef4@test k3ef8@conseq k3efa@altern)) (list '(primitive syntax-dispatch) k3ed4@x (list 'quote k3eed@p)))))))))))))) (k3e9d@gen-syntax-case (lambda (k3eb2@x k3eb3@keys k3eb4@clauses k3eb5@r k3eb6@mr) (if (null? k3eb4@clauses) (list '(primitive syntax-error) k3eb2@x) (let ((k3ebc@t (car k3eb4@clauses))) (let ((k3ebe@ls/false (k30c3@syntax-dispatch k3ebc@t '(any any)))) (if k3ebe@ls/false (apply (lambda (k3ec0@pat k3ec1@expr) (if (and (k2ebc@id? k3ec0@pat) (not (k2ec8@bound-id-member? k3ec0@pat k3eb3@keys)) (not (k30c5@ellipsis? k3ec0@pat))) (if (k2ec2@free-id=? k3ec0@pat (k304b@scheme-stx '_)) (k30e5@chi-expr k3ec1@expr k3eb5@r k3eb6@mr) (let ((k3ec4@lab (k2e48@gen-label k3ec0@pat)) (k3ec5@lex (k2e44@gen-lexical k3ec0@pat))) (let ((k3ec8@body (k30e5@chi-expr (k2ea8@add-subst (k2e7c@make-full-rib (list k3ec0@pat) (list k3ec4@lab)) k3ec1@expr) (cons (cons k3ec4@lab (k2ed6@make-binding 'syntax (cons k3ec5@lex '0))) k3eb5@r) k3eb6@mr))) (list (k2e1f@k2d51@build-lambda '#f (list k3ec5@lex) k3ec8@body) k3eb2@x)))) (k3e9b@gen-clause k3eb2@x k3eb3@keys (cdr k3eb4@clauses) k3eb5@r k3eb6@mr k3ec0@pat '#t k3ec1@expr))) k3ebe@ls/false) (let ((k3eca@t k3ebc@t)) (let ((k3ecc@ls/false (k30c3@syntax-dispatch k3eca@t '(any any any)))) (if k3ecc@ls/false (apply (lambda (k3ece@pat k3ecf@fender k3ed0@expr) (k3e9b@gen-clause k3eb2@x k3eb3@keys (cdr k3eb4@clauses) k3eb5@r k3eb6@mr k3ece@pat k3ecf@fender k3ed0@expr)) k3ecc@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3eca@t))))))))))) (lambda (k3e9e@e k3e9f@r k3ea0@mr) (let ((k3ea4@t k3e9e@e)) (let ((k3ea6@ls/false (k30c3@syntax-dispatch k3ea4@t '(_ any each-any . each-any)))) (if k3ea6@ls/false (apply (lambda (k3ea8@expr k3ea9@keys k3eaa@clauses) (begin (k30c9@verify-literals k3ea9@keys k3e9e@e) (let ((k3eae@x (k2e44@gen-lexical 'tmp))) (let ((k3eb0@body (k3e9d@gen-syntax-case k3eae@x k3ea9@keys k3eaa@clauses k3e9f@r k3ea0@mr))) (list (k2e1f@k2d51@build-lambda '#f (list k3eae@x) k3eb0@body) (k30e5@chi-expr k3ea8@expr k3e9f@r k3ea0@mr)))))) k3ea6@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3ea4@t))))))) (set! k4b9d@k30cb@syntax-case-transformer k30cb@syntax-case-transformer) (set! k30cd@ellipsis-map (lambda (k3f22@proc k3f23@ls . k3f26@ls*) (letrec* ((k3f29@who '...)) (begin (if (not (list? k3f23@ls)) (assertion-violation k3f29@who '"not a list" k3f23@ls) (void)) (if (not (null? k3f26@ls*)) (let ((k3f2a@n (length k3f23@ls))) (for-each (lambda (k3f2c@x) (begin (if (not (list? k3f2c@x)) (assertion-violation k3f29@who '"not a list" k3f2c@x) (void)) (if (not (= (length k3f2c@x) k3f2a@n)) (assertion-violation k3f29@who '"length mismatch" k3f23@ls k3f2c@x) (void)))) k3f26@ls*)) (void)) (apply map k3f22@proc k3f23@ls k3f26@ls*))))) (set! k4b9e@k30cd@ellipsis-map k30cd@ellipsis-map) (set! k30cf@syntax-transformer (letrec* ((k3f2f@gen-syntax (lambda (k3fa6@src k3fa7@e k3fa8@r k3fa9@maps k3faa@ellipsis? k3fab@vec?) (let ((k3fb2@t k3fa7@e)) (let ((k3fb4@ls/false (k30c3@syntax-dispatch k3fb2@t 'any))) (if (and k3fb4@ls/false (apply (lambda (k3fb6@dots) (k3faa@ellipsis? k3fb6@dots)) k3fb4@ls/false)) (apply (lambda (k3fb8@dots) (k31a3@syntax-violation '#f '"misplaced ellipsis in syntax form" k3fa6@src)) k3fb4@ls/false) (let ((k3fba@t k3fb2@t)) (let ((k3fbc@ls/false (k30c3@syntax-dispatch k3fba@t 'any))) (if (and k3fbc@ls/false (apply (lambda (k3fbe@id) (k2ebc@id? k3fbe@id)) k3fbc@ls/false)) (apply (lambda (k3fc0@id) (let ((k3fc2@label (k2ed2@id->label k3fa7@e))) (let ((k3fc4@b (k2ed4@label->binding k3fc2@label k3fa8@r))) (if (eq? (k2ed8@binding-type k3fc4@b) 'syntax) (call-with-values (lambda () (let ((k3fca@var.lev (k2eda@binding-value k3fc4@b))) (k3f31@gen-ref k3fa6@src (car k3fca@var.lev) (cdr k3fca@var.lev) k3fa9@maps))) (lambda (k3fcc@k3fc7 k3fcd@k3fc9) (let ((k3fd0@maps k3fcd@k3fc9) (k3fd1@var k3fcc@k3fc7)) (values (list 'ref k3fd1@var) k3fd0@maps)))) (values (list 'quote k3fa7@e) k3fa9@maps))))) k3fbc@ls/false) (let ((k3fd4@t k3fba@t)) (let ((k3fd6@ls/false (k30c3@syntax-dispatch k3fd4@t '(any any)))) (if (and k3fd6@ls/false (apply (lambda (k3fd8@dots k3fd9@e) (k3faa@ellipsis? k3fd8@dots)) k3fd6@ls/false)) (apply (lambda (k3fdc@dots k3fdd@e) (if k3fab@vec? (k31a3@syntax-violation '#f '"misplaced ellipsis in syntax form" k3fa6@src) (k3f2f@gen-syntax k3fa6@src k3fdd@e k3fa8@r k3fa9@maps (lambda (k3fe0@x) '#f) '#f))) k3fd6@ls/false) (let ((k3fe2@t k3fd4@t)) (let ((k3fe4@ls/false (k30c3@syntax-dispatch k3fe2@t '(any any . any)))) (if (and k3fe4@ls/false (apply (lambda (k3fe6@x k3fe7@dots k3fe8@y) (k3faa@ellipsis? k3fe7@dots)) k3fe4@ls/false)) (apply (lambda (k3fec@x k3fed@dots k3fee@y) (let k4004@f ((k3ff2@y k3fee@y) (k3ff3@k (lambda (k3ff6@maps) (call-with-values (lambda () (k3f2f@gen-syntax k3fa6@src k3fec@x k3fa8@r (cons '() k3ff6@maps) k3faa@ellipsis? '#f)) (lambda (k3ffc@k3ff9 k3ffd@k3ffb) (let ((k4000@maps k3ffd@k3ffb) (k4001@x k3ffc@k3ff9)) (if (null? (car k4000@maps)) (k31a3@syntax-violation '#f '"extra ellipsis in syntax form" k3fa6@src) (values (k3f37@gen-map k4001@x (car k4000@maps)) (cdr k4000@maps))))))))) (let ((k4006@t k3ff2@y)) (let ((k4008@ls/false (k30c3@syntax-dispatch k4006@t '()))) (if k4008@ls/false (apply (lambda () (k3ff3@k k3fa9@maps)) k4008@ls/false) (let ((k400a@t k4006@t)) (let ((k400c@ls/false (k30c3@syntax-dispatch k400a@t '(any . any)))) (if (and k400c@ls/false (apply (lambda (k400e@dots k400f@y) (k3faa@ellipsis? k400e@dots)) k400c@ls/false)) (apply (lambda (k4012@dots k4013@y) (k4004@f k4013@y (lambda (k4016@maps) (call-with-values (lambda () (k3ff3@k (cons '() k4016@maps))) (lambda (k401c@k4019 k401d@k401b) (let ((k4020@maps k401d@k401b) (k4021@x k401c@k4019)) (if (null? (car k4020@maps)) (k31a3@syntax-violation '#f '"extra ellipsis in syntax form" k3fa6@src) (values (k3f35@gen-mappend k4021@x (car k4020@maps)) (cdr k4020@maps))))))))) k400c@ls/false) (let ((k4024@t k400a@t)) (let ((k4026@ls/false (k30c3@syntax-dispatch k4024@t '_))) (if k4026@ls/false (apply (lambda () (call-with-values (lambda () (k3f2f@gen-syntax k3fa6@src k3ff2@y k3fa8@r k3fa9@maps k3faa@ellipsis? k3fab@vec?)) (lambda (k402c@k4029 k402d@k402b) (let ((k4030@maps k402d@k402b) (k4031@y k402c@k4029)) (call-with-values (lambda () (k3ff3@k k4030@maps)) (lambda (k4038@k4035 k4039@k4037) (let ((k403c@maps k4039@k4037) (k403d@x k4038@k4035)) (values (k3f33@gen-append k403d@x k4031@y) k403c@maps)))))))) k4026@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4024@t)))))))))))) k3fe4@ls/false) (let ((k4040@t k3fe2@t)) (let ((k4042@ls/false (k30c3@syntax-dispatch k4040@t '(any . any)))) (if k4042@ls/false (apply (lambda (k4044@x k4045@y) (call-with-values (lambda () (k3f2f@gen-syntax k3fa6@src k4044@x k3fa8@r k3fa9@maps k3faa@ellipsis? '#f)) (lambda (k404c@k4049 k404d@k404b) (let ((k4050@maps k404d@k404b) (k4051@xnew k404c@k4049)) (call-with-values (lambda () (k3f2f@gen-syntax k3fa6@src k4045@y k3fa8@r k4050@maps k3faa@ellipsis? k3fab@vec?)) (lambda (k4058@k4055 k4059@k4057) (let ((k405c@maps k4059@k4057) (k405d@ynew k4058@k4055)) (values (k3f39@gen-cons k3fa7@e k4044@x k4045@y k4051@xnew k405d@ynew) k405c@maps)))))))) k4042@ls/false) (let ((k4060@t k4040@t)) (let ((k4062@ls/false (k30c3@syntax-dispatch k4060@t '#(vector each-any)))) (if k4062@ls/false (apply (lambda (k4064@ls) (call-with-values (lambda () (k3f2f@gen-syntax k3fa6@src k4064@ls k3fa8@r k3fa9@maps k3faa@ellipsis? '#t)) (lambda (k406a@k4067 k406b@k4069) (let ((k406e@maps k406b@k4069) (k406f@lsnew k406a@k4067)) (values (k3f3b@gen-vector k3fa7@e k4064@ls k406f@lsnew) k406e@maps))))) k4062@ls/false) (let ((k4072@t k4060@t)) (let ((k4074@ls/false (k30c3@syntax-dispatch k4072@t '_))) (if k4074@ls/false (apply (lambda () (values (list 'quote k3fa7@e) k3fa9@maps)) k4074@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4072@t)))))))))))))))))))))))) (k3f31@gen-ref (lambda (k3f8c@src k3f8d@var k3f8e@level k3f8f@maps) (if (= k3f8e@level '0) (values k3f8d@var k3f8f@maps) (if (null? k3f8f@maps) (k31a3@syntax-violation '#f '"missing ellipsis in syntax form" k3f8c@src) (call-with-values (lambda () (k3f31@gen-ref k3f8c@src k3f8d@var (- k3f8e@level '1) (cdr k3f8f@maps))) (lambda (k3f98@k3f95 k3f99@k3f97) (let ((k3f9c@outer-maps k3f99@k3f97) (k3f9d@outer-var k3f98@k3f95)) (let ((k3fa0@t (assq k3f9d@outer-var (car k3f8f@maps)))) (if k3fa0@t ((lambda (k3fa2@b) (values (cdr k3fa2@b) k3f8f@maps)) k3fa0@t) (let ((k3fa4@inner-var (k2e44@gen-lexical 'tmp))) (values k3fa4@inner-var (cons (cons (cons k3f9d@outer-var k3fa4@inner-var) (car k3f8f@maps)) k3f9c@outer-maps)))))))))))) (k3f33@gen-append (lambda (k3f88@x k3f89@y) (if (fast-equal? k3f89@y ''()) k3f88@x (list 'append k3f88@x k3f89@y)))) (k3f35@gen-mappend (lambda (k3f84@e k3f85@map-env) (list 'apply '(primitive append) (k3f37@gen-map k3f84@e k3f85@map-env)))) (k3f37@gen-map (lambda (k3f72@e k3f73@map-env) (let ((k3f76@formals (map cdr k3f73@map-env)) (k3f77@actuals (map (lambda (k3f7a@x) (list 'ref (car k3f7a@x))) k3f73@map-env))) (if (eq? (car k3f72@e) 'ref) (car k3f77@actuals) (if (for-all (lambda (k3f7c@x) (and (eq? (car k3f7c@x) 'ref) (memq (cadr k3f7c@x) k3f76@formals))) (cdr k3f72@e)) (let ((k3f7e@args (map (let ((k3f80@r (map cons k3f76@formals k3f77@actuals))) (lambda (k3f82@x) (cdr (assq (cadr k3f82@x) k3f80@r)))) (cdr k3f72@e)))) (cons 'map (cons (list 'primitive (car k3f72@e)) k3f7e@args))) (cons* 'map (list 'lambda k3f76@formals k3f72@e) k3f77@actuals)))))) (k3f39@gen-cons (lambda (k3f62@e k3f63@x k3f64@y k3f65@xnew k3f66@ynew) (let ((k3f6c@t (car k3f66@ynew))) (if (memv k3f6c@t '(quote)) (if (eq? (car k3f65@xnew) 'quote) (let ((k3f6e@xnew (cadr k3f65@xnew)) (k3f6f@ynew (cadr k3f66@ynew))) (if (and (eq? k3f6e@xnew k3f63@x) (eq? k3f6f@ynew k3f64@y)) (list 'quote k3f62@e) (list 'quote (cons k3f6e@xnew k3f6f@ynew)))) (if (null? (cadr k3f66@ynew)) (list 'list k3f65@xnew) (list 'cons k3f65@xnew k3f66@ynew))) (if (memv k3f6c@t '(list)) (cons 'list (cons k3f65@xnew (cdr k3f66@ynew))) (list 'cons k3f65@xnew k3f66@ynew)))))) (k3f3b@gen-vector (lambda (k3f5c@e k3f5d@ls k3f5e@lsnew) (if (eq? (car k3f5e@lsnew) 'quote) (if (eq? (cadr k3f5e@lsnew) k3f5d@ls) (list 'quote k3f5c@e) (list 'quote (list->vector (cadr k3f5e@lsnew)))) (if (eq? (car k3f5e@lsnew) 'list) (cons 'vector (cdr k3f5e@lsnew)) (list 'list->vector k3f5e@lsnew))))) (k3f3d@regen (lambda (k3f56@x) (let ((k3f58@t (car k3f56@x))) (if (memv k3f58@t '(ref)) (cadr k3f56@x) (if (memv k3f58@t '(primitive)) (list 'primitive (cadr k3f56@x)) (if (memv k3f58@t '(quote)) (list 'quote (cadr k3f56@x)) (if (memv k3f58@t '(lambda)) (k2e1f@k2d51@build-lambda '#f (cadr k3f56@x) (k3f3d@regen (caddr k3f56@x))) (if (memv k3f58@t '(map)) (let ((k3f5a@ls (map k3f3d@regen (cdr k3f56@x)))) (cons '(primitive ellipsis-map) k3f5a@ls)) (cons (list 'primitive (car k3f56@x)) (map k3f3d@regen (cdr k3f56@x)))))))))))) (lambda (k3f3e@e k3f3f@r k3f40@mr) (let ((k3f44@t k3f3e@e)) (let ((k3f46@ls/false (k30c3@syntax-dispatch k3f44@t '(_ any)))) (if k3f46@ls/false (apply (lambda (k3f48@x) (call-with-values (lambda () (k3f2f@gen-syntax k3f3e@e k3f48@x k3f3f@r '() k30c5@ellipsis? '#f)) (lambda (k3f4e@k3f4b k3f4f@k3f4d) (let ((k3f52@maps k3f4f@k3f4d) (k3f53@e k3f4e@k3f4b)) (k3f3d@regen k3f53@e))))) k3f46@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k3f44@t))))))) (set! k4b9f@k30cf@syntax-transformer k30cf@syntax-transformer) (set! k30d1@core-macro-transformer (lambda (k4076@name) (let ((k4078@t k4076@name)) (if (memv k4078@t '(quote)) k3073@quote-transformer (if (memv k4078@t '(lambda)) k3077@lambda-transformer (if (memv k4078@t '(case-lambda)) k3075@case-lambda-transformer (if (memv k4078@t '(letrec)) k305b@letrec-transformer (if (memv k4078@t '(letrec*)) k305d@letrec*-transformer (if (memv k4078@t '(let)) k3059@let-transformer (if (memv k4078@t '(if)) k306b@if-transformer (if (memv k4078@t '(and)) k306d@and-transformer (if (memv k4078@t '(or)) k306f@or-transformer (if (memv k4078@t '(foreign-call)) k30bf@foreign-call-transformer (if (memv k4078@t '(syntax-case)) k30cb@syntax-case-transformer (if (memv k4078@t '(syntax)) k30cf@syntax-transformer (if (memv k4078@t '(type-descriptor)) k3061@type-descriptor-transformer (if (memv k4078@t '(record-type-descriptor)) k3063@record-type-descriptor-transformer (if (memv k4078@t '(record-constructor-descriptor)) k3065@record-constructor-descriptor-transformer (if (memv k4078@t '(fluid-let-syntax)) k305f@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" k4076@name)))))))))))))))))))) (set! k4ba0@k30d1@core-macro-transformer k30d1@core-macro-transformer) (set! k30d3@symbol-macro (lambda (k407a@x k407b@set) (let ((k407e@t k407a@x)) (let ((k4080@ls/false (k30c3@syntax-dispatch k407e@t '(_ any)))) (if (and k4080@ls/false (apply (lambda (k4082@name) (and (k2ebc@id? k4082@name) (memq (k2ebe@id->sym k4082@name) k407b@set))) k4080@ls/false)) (apply (lambda (k4084@name) (k3079@bless (list 'quote k4084@name))) k4080@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k407e@t)))))) (set! k4ba1@k30d3@symbol-macro k30d3@symbol-macro) (set! k30d5@macro-transformer (lambda (k4086@x) (if (procedure? k4086@x) k4086@x (if (symbol? k4086@x) (let ((k4088@t k4086@x)) (if (memv k4088@t '(define-record-type)) k30b7@define-record-type-macro (if (memv k4088@t '(define-struct)) k30b5@define-struct-macro (if (memv k4088@t '(include)) k30ab@include-macro (if (memv k4088@t '(cond)) k30a7@cond-macro (if (memv k4088@t '(let)) k307f@let-macro (if (memv k4088@t '(do)) k309f@do-macro (if (memv k4088@t '(or)) k30a3@or-macro (if (memv k4088@t '(and)) k30a5@and-macro (if (memv k4088@t '(let*)) k30a1@let*-macro (if (memv k4088@t '(let-values)) k3081@let-values-macro (if (memv k4088@t '(let*-values)) k3083@let*-values-macro (if (memv k4088@t '(syntax-rules)) k30af@syntax-rules-macro (if (memv k4088@t '(quasiquote)) k30b1@quasiquote-macro (if (memv k4088@t '(quasisyntax)) k30b3@quasisyntax-macro (if (memv k4088@t '(with-syntax)) k307b@with-syntax-macro (if (memv k4088@t '(when)) k3067@when-macro (if (memv k4088@t '(unless)) k3069@unless-macro (if (memv k4088@t '(case)) k3071@case-macro (if (memv k4088@t '(identifier-syntax)) k309d@identifier-syntax-macro (if (memv k4088@t '(time)) k3095@time-macro (if (memv k4088@t '(delay)) k3097@delay-macro (if (memv k4088@t '(assert)) k3099@assert-macro (if (memv k4088@t '(endianness)) k309b@endianness-macro (if (memv k4088@t '(guard)) k3091@guard-macro (if (memv k4088@t '(define-enumeration)) k3093@define-enumeration-macro (if (memv k4088@t '(trace-lambda)) k3085@trace-lambda-macro (if (memv k4088@t '(trace-define)) k3087@trace-define-macro (if (memv k4088@t '(trace-define-syntax)) k3089@trace-define-syntax-macro (if (memv k4088@t '(trace-let-syntax)) k308d@trace-let-syntax-macro (if (memv k4088@t '(trace-letrec-syntax)) k308f@trace-letrec-syntax-macro (if (memv k4088@t '(define-condition-type)) k30b9@define-condition-type-macro (if (memv k4088@t '(parameterize)) k30bd@parameterize-macro (if (memv k4088@t '(include-into)) k30ad@include-into-macro (if (memv k4088@t '(eol-style)) (lambda (k408a@x) (k30d3@symbol-macro k408a@x '(none lf cr crlf nel crnel ls))) (if (memv k4088@t '(error-handling-mode)) (lambda (k408c@x) (k30d3@symbol-macro k408c@x '(ignore raise replace))) (if (memv k4088@t '(buffer-mode)) (lambda (k408e@x) (k30d3@symbol-macro k408e@x '(none line block))) (if (memv k4088@t '(file-options)) k2e37@file-options-macro (if (memv k4088@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) k30bb@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" k4086@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" k4086@x))))) (set! k4ba2@k30d5@macro-transformer k30d5@macro-transformer) (set! k30d7@local-macro-transformer (lambda (k4090@x) (car k4090@x))) (set! k4ba3@k30d7@local-macro-transformer k30d7@local-macro-transformer) (set! k30d9@do-macro-call (lambda (k4092@transformer k4093@expr) (let ((k4096@out (k4092@transformer (k2ea6@add-mark k2ea0@anti-mark k4093@expr '#f)))) (begin (let k409a@f ((k4098@x k4096@out)) (if (not (k2e88@stx? k4098@x)) (if (pair? k4098@x) (begin (k409a@f (car k4098@x)) (k409a@f (cdr k4098@x))) (if (vector? k4098@x) (vector-for-each k409a@f k4098@x) (if (symbol? k4098@x) (k31a3@syntax-violation '#f '"raw symbol encountered in output of macro" k4093@expr k4098@x) (void)))) (void))) (k2ea6@add-mark (k2e9e@gen-mark) k4096@out k4093@expr))))) (set! k4ba4@k30d9@do-macro-call k30d9@do-macro-call) (set! k30db@chi-macro (lambda (k409c@p k409d@e) (k30d9@do-macro-call (k30d5@macro-transformer k409c@p) k409d@e))) (set! k4ba5@k30db@chi-macro k30db@chi-macro) (set! k30dd@chi-local-macro (lambda (k40a0@p k40a1@e) (k30d9@do-macro-call (k30d7@local-macro-transformer k40a0@p) k40a1@e))) (set! k4ba6@k30dd@chi-local-macro k30dd@chi-local-macro) (set! k30df@chi-global-macro (lambda (k40a4@p k40a5@e) (let ((k40a8@lib (car k40a4@p)) (k40a9@loc (cdr k40a4@p))) (begin (k2cd9@k2b28@visit-library k40a8@lib) (let ((k40ac@x (symbol-value k40a9@loc))) (let ((k40ae@transformer (if (procedure? k40ac@x) k40ac@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" k40ac@x)))) (k30d9@do-macro-call k40ae@transformer k40a5@e))))))) (set! k4ba7@k30df@chi-global-macro k30df@chi-global-macro) (set! k30e1@chi-expr* (lambda (k40b0@e* k40b1@r k40b2@mr) (if (null? k40b0@e*) '() (let ((k40b6@e (k30e5@chi-expr (car k40b0@e*) k40b1@r k40b2@mr))) (cons k40b6@e (k30e1@chi-expr* (cdr k40b0@e*) k40b1@r k40b2@mr)))))) (set! k4ba8@k30e1@chi-expr* k30e1@chi-expr*) (set! k30e3@chi-application (lambda (k40b8@e k40b9@r k40ba@mr) (let ((k40be@t k40b8@e)) (let ((k40c0@ls/false (k30c3@syntax-dispatch k40be@t '(any . each-any)))) (if k40c0@ls/false (apply (lambda (k40c2@rator k40c3@rands) (let ((k40c6@rator (k30e5@chi-expr k40c2@rator k40b9@r k40ba@mr))) (cons k40c6@rator (k30e1@chi-expr* k40c3@rands k40b9@r k40ba@mr)))) k40c0@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k40be@t)))))) (set! k4ba9@k30e3@chi-application k30e3@chi-application) (set! k30e5@chi-expr (lambda (k40c8@e k40c9@r k40ca@mr) (call-with-values (lambda () (k2ede@syntax-type k40c8@e k40c9@r)) (lambda (k40d4@k40cf k40d5@k40d1 k40d6@k40d3) (let ((k40da@kwd k40d6@k40d3) (k40db@value k40d5@k40d1) (k40dc@type k40d4@k40cf)) (let ((k40e0@t k40dc@type)) (if (memv k40e0@t '(core-macro)) (let ((k40e2@transformer (k30d1@core-macro-transformer k40db@value))) (k40e2@transformer k40c8@e k40c9@r k40ca@mr)) (if (memv k40e0@t '(global)) (let ((k40e4@lib (car k40db@value))) (let ((k40e6@loc (cdr k40db@value))) (begin ((k312b@inv-collector) k40e4@lib) k40e6@loc))) (if (memv k40e0@t '(core-prim)) (let ((k40e8@name k40db@value)) (list 'primitive k40e8@name)) (if (memv k40e0@t '(call)) (k30e3@chi-application k40c8@e k40c9@r k40ca@mr) (if (memv k40e0@t '(lexical)) (let ((k40ea@lex (k304d@lexical-var k40db@value))) k40ea@lex) (if (memv k40e0@t '(global-macro global-macro!)) (k30e5@chi-expr (k30df@chi-global-macro k40db@value k40c8@e) k40c9@r k40ca@mr) (if (memv k40e0@t '(local-macro local-macro!)) (k30e5@chi-expr (k30dd@chi-local-macro k40db@value k40c8@e) k40c9@r k40ca@mr) (if (memv k40e0@t '(macro macro!)) (k30e5@chi-expr (k30db@chi-macro k40db@value k40c8@e) k40c9@r k40ca@mr) (if (memv k40e0@t '(constant)) (let ((k40ec@datum k40db@value)) (list 'quote k40ec@datum)) (if (memv k40e0@t '(set!)) (k30e7@chi-set! k40c8@e k40c9@r k40ca@mr) (if (memv k40e0@t '(begin)) (let ((k40ee@t k40c8@e)) (let ((k40f0@ls/false (k30c3@syntax-dispatch k40ee@t '(_ any . each-any)))) (if k40f0@ls/false (apply (lambda (k40f2@x k40f3@x*) (k2e21@k2d81@build-sequence '#f (k30e1@chi-expr* (cons k40f2@x k40f3@x*) k40c9@r k40ca@mr))) k40f0@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k40ee@t)))) (if (memv k40e0@t '(let-syntax letrec-syntax)) (let ((k40f6@t k40c8@e)) (let ((k40f8@ls/false (k30c3@syntax-dispatch k40f6@t '(_ #(each (any any)) any . each-any)))) (if (and k40f8@ls/false (apply (lambda (k40fa@xlhs* k40fb@xrhs* k40fc@xbody k40fd@xbody*) (if (not (k2ec4@valid-bound-ids? k40fa@xlhs*)) (k31a3@syntax-violation '#f '"invalid identifiers" k40c8@e) (void))) k40f8@ls/false)) (apply (lambda (k4102@xlhs* k4103@xrhs* k4104@xbody k4105@xbody*) (let ((k410a@xlab* (map k2e48@gen-label k4102@xlhs*))) (let ((k410c@xrib (k2e7c@make-full-rib k4102@xlhs* k410a@xlab*))) (let ((k410e@xb* (map (lambda (k4110@x) (k2ef4@make-eval-transformer (k311d@expand-transformer (if (eq? k40dc@type 'let-syntax) k4110@x (k2ea8@add-subst k410c@xrib k4110@x)) k40ca@mr))) k4103@xrhs*))) (k2e21@k2d81@build-sequence '#f (k30e1@chi-expr* (map (lambda (k4112@x) (k2ea8@add-subst k410c@xrib k4112@x)) (cons k4104@xbody k4105@xbody*)) (append (map cons k410a@xlab* k410e@xb*) k40c9@r) (append (map cons k410a@xlab* k410e@xb*) k40ca@mr))))))) k40f8@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k40f6@t)))) (if (memv k40e0@t '(displaced-lexical)) (k31a3@syntax-violation '#f '"identifier out of context" k40c8@e) (if (memv k40e0@t '(syntax)) (k31a3@syntax-violation '#f '"reference to pattern variable outside a syntax form" k40c8@e) (if (memv k40e0@t '(define define-syntax module import library)) (k31a3@syntax-violation '#f (string-append (let ((k4114@t k40dc@type)) (if (memv k4114@t '(define)) '"a definition" (if (memv k4114@t '(define-syntax)) '"a define-syntax" (if (memv k4114@t '(module)) '"a module definition" (if (memv k4114@t '(library)) '"a library definition" (if (memv k4114@t '(import)) '"an import declaration" (if (memv k4114@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") k40c8@e) (if (memv k40e0@t '(mutable)) (k31a3@syntax-violation '#f '"attempt to reference an unexportable variable" k40c8@e) (k31a3@syntax-violation '#f '"invalid expression" k40c8@e))))))))))))))))))))))) (set! k4baa@k30e5@chi-expr k30e5@chi-expr) (set! k30e7@chi-set! (lambda (k4116@e k4117@r k4118@mr) (let ((k411c@t k4116@e)) (let ((k411e@ls/false (k30c3@syntax-dispatch k411c@t '(_ any any)))) (if (and k411e@ls/false (apply (lambda (k4120@x k4121@v) (k2ebc@id? k4120@x)) k411e@ls/false)) (apply (lambda (k4124@x k4125@v) (call-with-values (lambda () (k2ede@syntax-type k4124@x k4117@r)) (lambda (k412e@k4129 k412f@k412b k4130@k412d) (let ((k4134@kwd k4130@k412d) (k4135@value k412f@k412b) (k4136@type k412e@k4129)) (let ((k413a@t k4136@type)) (if (memv k413a@t '(lexical)) (begin (k3051@set-lexical-mutable! k4135@value '#t) (list 'set! (k304d@lexical-var k4135@value) (k30e5@chi-expr k4125@v k4117@r k4118@mr))) (if (memv k413a@t '(core-prim)) (k31a3@syntax-violation '#f '"cannot modify imported core primitive" k4116@e) (if (memv k413a@t '(global)) (k31a3@syntax-violation '#f '"attempt to modify imported binding" k4116@e) (if (memv k413a@t '(global-macro!)) (k30e5@chi-expr (k30df@chi-global-macro k4135@value k4116@e) k4117@r k4118@mr) (if (memv k413a@t '(local-macro!)) (k30e5@chi-expr (k30dd@chi-local-macro k4135@value k4116@e) k4117@r k4118@mr) (if (memv k413a@t '(mutable)) (k31a3@syntax-violation '#f '"attempt to assign to an unexportable variable" k4116@e) (k31a3@syntax-violation '#f '"invalid syntax" k4116@e)))))))))))) k411e@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k411c@t)))))) (set! k4bab@k30e7@chi-set! k30e7@chi-set!) (set! k30e9@verify-formals (lambda (k413c@fmls k413d@stx) (let ((k4140@t k413c@fmls)) (let ((k4142@ls/false (k30c3@syntax-dispatch k4140@t 'each-any))) (if k4142@ls/false (apply (lambda (k4144@x*) (if (not (k2ec4@valid-bound-ids? k4144@x*)) (k307d@invalid-fmls-error k413d@stx k413c@fmls) (void))) k4142@ls/false) (let ((k4146@t k4140@t)) (let ((k4148@ls/false (k30c3@syntax-dispatch k4146@t '#(each+ any () any)))) (if k4148@ls/false (apply (lambda (k414a@x* k414b@x) (if (not (k2ec4@valid-bound-ids? (cons k414b@x k414a@x*))) (k307d@invalid-fmls-error k413d@stx k413c@fmls) (void))) k4148@ls/false) (let ((k414e@t k4146@t)) (let ((k4150@ls/false (k30c3@syntax-dispatch k414e@t '_))) (if k4150@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid syntax" k413d@stx)) k4150@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k414e@t)))))))))))) (set! k4bac@k30e9@verify-formals k30e9@verify-formals) (set! k30eb@chi-lambda-clause (lambda (k4152@stx k4153@fmls k4154@body* k4155@r k4156@mr) (let ((k415c@t k4153@fmls)) (let ((k415e@ls/false (k30c3@syntax-dispatch k415c@t 'each-any))) (if k415e@ls/false (apply (lambda (k4160@x*) (begin (k30e9@verify-formals k4153@fmls k4152@stx) (let ((k4162@lex* (map k2e44@gen-lexical k4160@x*)) (k4163@lab* (map k2e48@gen-label k4160@x*))) (values k4162@lex* (k30fb@chi-internal (k2ea8@add-subst (k2e7c@make-full-rib k4160@x* k4163@lab*) k4154@body*) (k3055@add-lexicals k4163@lab* k4162@lex* k4155@r) k4156@mr))))) k415e@ls/false) (let ((k4166@t k415c@t)) (let ((k4168@ls/false (k30c3@syntax-dispatch k4166@t '#(each+ any () any)))) (if k4168@ls/false (apply (lambda (k416a@x* k416b@x) (begin (k30e9@verify-formals k4153@fmls k4152@stx) (let ((k416e@lex* (map k2e44@gen-lexical k416a@x*)) (k416f@lab* (map k2e48@gen-label k416a@x*)) (k4170@lex (k2e44@gen-lexical k416b@x)) (k4171@lab (k2e48@gen-label k416b@x))) (values (append k416e@lex* k4170@lex) (k30fb@chi-internal (k2ea8@add-subst (k2e7c@make-full-rib (cons k416b@x k416a@x*) (cons k4171@lab k416f@lab*)) k4154@body*) (k3055@add-lexicals (cons k4171@lab k416f@lab*) (cons k4170@lex k416e@lex*) k4155@r) k4156@mr))))) k4168@ls/false) (let ((k4176@t k4166@t)) (let ((k4178@ls/false (k30c3@syntax-dispatch k4176@t '_))) (if k4178@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid syntax" k4153@fmls)) k4178@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4176@t)))))))))))) (set! k4bad@k30eb@chi-lambda-clause k30eb@chi-lambda-clause) (set! k30ed@chi-lambda-clause* (lambda (k417a@stx k417b@fmls* k417c@body** k417d@r k417e@mr) (if (null? k417b@fmls*) (values '() '()) (call-with-values (lambda () (k30eb@chi-lambda-clause k417a@stx (car k417b@fmls*) (car k417c@body**) k417d@r k417e@mr)) (lambda (k4188@k4185 k4189@k4187) (let ((k418c@b k4189@k4187) (k418d@a k4188@k4185)) (call-with-values (lambda () (k30ed@chi-lambda-clause* k417a@stx (cdr k417b@fmls*) (cdr k417c@body**) k417d@r k417e@mr)) (lambda (k4194@k4191 k4195@k4193) (let ((k4198@b* k4195@k4193) (k4199@a* k4194@k4191)) (values (cons k418d@a k4199@a*) (cons k418c@b k4198@b*))))))))))) (set! k4bae@k30ed@chi-lambda-clause* k30ed@chi-lambda-clause*) (set! k30ef@chi-defun (lambda (k419c@x k419d@r k419e@mr) (let ((k41a2@fmls (car k419c@x)) (k41a3@body* (cdr k419c@x))) (call-with-values (lambda () (k30eb@chi-lambda-clause k41a2@fmls k41a2@fmls k41a3@body* k419d@r k419e@mr)) (lambda (k41aa@k41a7 k41ab@k41a9) (let ((k41ae@body k41ab@k41a9) (k41af@fmls k41aa@k41a7)) (k2e1f@k2d51@build-lambda '#f k41af@fmls k41ae@body))))))) (set! k4baf@k30ef@chi-defun k30ef@chi-defun) (set! k30f1@chi-rhs (lambda (k41b2@rhs k41b3@r k41b4@mr) (let ((k41b8@t (car k41b2@rhs))) (if (memv k41b8@t '(defun)) (k30ef@chi-defun (cdr k41b2@rhs) k41b3@r k41b4@mr) (if (memv k41b8@t '(expr)) (let ((k41ba@expr (cdr k41b2@rhs))) (k30e5@chi-expr k41ba@expr k41b3@r k41b4@mr)) (if (memv k41b8@t '(top-expr)) (let ((k41bc@expr (cdr k41b2@rhs))) (k2e21@k2d81@build-sequence '#f (list (k30e5@chi-expr k41bc@expr k41b3@r k41b4@mr) (k2e22@k2d83@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" k41b2@rhs))))))) (set! k4bb0@k30f1@chi-rhs k30f1@chi-rhs) (set! k30f3@expand-interaction-rhs*/init* (lambda (k41be@lhs* k41bf@rhs* k41c0@init* k41c1@r k41c2@mr) (let k41cc@f ((k41c8@lhs* k41be@lhs*) (k41c9@rhs* k41bf@rhs*)) (if (null? k41c8@lhs*) (map (lambda (k41ce@x) (k30e5@chi-expr k41ce@x k41c1@r k41c2@mr)) k41c0@init*) (let ((k41d0@lhs (car k41c8@lhs*)) (k41d1@rhs (car k41c9@rhs*))) (let ((k41d4@t (car k41d1@rhs))) (if (memv k41d4@t '(defun)) (let ((k41d6@rhs (k30ef@chi-defun (cdr k41d1@rhs) k41c1@r k41c2@mr))) (cons (list 'set! k41d0@lhs k41d6@rhs) (k41cc@f (cdr k41c8@lhs*) (cdr k41c9@rhs*)))) (if (memv k41d4@t '(expr)) (let ((k41d8@rhs (k30e5@chi-expr (cdr k41d1@rhs) k41c1@r k41c2@mr))) (cons (list 'set! k41d0@lhs k41d8@rhs) (k41cc@f (cdr k41c8@lhs*) (cdr k41c9@rhs*)))) (if (memv k41d4@t '(top-expr)) (let ((k41da@e (k30e5@chi-expr (cdr k41d1@rhs) k41c1@r k41c2@mr))) (cons k41da@e (k41cc@f (cdr k41c8@lhs*) (cdr k41c9@rhs*)))) (error 'expand-interaction '"invallid" k41d1@rhs)))))))))) (set! k4bb1@k30f3@expand-interaction-rhs*/init* k30f3@expand-interaction-rhs*/init*) (set! k30f5@chi-rhs* (lambda (k41dc@rhs* k41dd@r k41de@mr) (let k41e4@f ((k41e2@ls k41dc@rhs*)) (if (null? k41e2@ls) '() (let ((k41e6@a (k30f1@chi-rhs (car k41e2@ls) k41dd@r k41de@mr))) (cons k41e6@a (k41e4@f (cdr k41e2@ls)))))))) (set! k4bb2@k30f5@chi-rhs* k30f5@chi-rhs*) (set! k30f7@find-bound=? (lambda (k41e8@x k41e9@lhs* k41ea@rhs*) (if (null? k41e9@lhs*) '#f (if (k2ec0@bound-id=? k41e8@x (car k41e9@lhs*)) (car k41ea@rhs*) (k30f7@find-bound=? k41e8@x (cdr k41e9@lhs*) (cdr k41ea@rhs*)))))) (set! k4bb3@k30f7@find-bound=? k30f7@find-bound=?) (set! k30f9@find-dups (lambda (k41ee@ls) (let k41f4@f ((k41f0@ls k41ee@ls) (k41f1@dups '())) (if (null? k41f0@ls) k41f1@dups (let ((k41f6@t (k30f7@find-bound=? (car k41f0@ls) (cdr k41f0@ls) (cdr k41f0@ls)))) (if k41f6@t ((lambda (k41f8@x) (k41f4@f (cdr k41f0@ls) (cons (list (car k41f0@ls) k41f8@x) k41f1@dups))) k41f6@t) (k41f4@f (cdr k41f0@ls) k41f1@dups))))))) (set! k4bb4@k30f9@find-dups k30f9@find-dups) (set! k30fb@chi-internal (lambda (k41fa@e* k41fb@r k41fc@mr) (let ((k4200@rib (k2e70@make-empty-rib))) (call-with-values (lambda () (k311b@chi-body* (map (lambda (k4212@x) (k2ea8@add-subst k4200@rib k4212@x)) (k2eba@syntax->list k41fa@e*)) k41fb@r k41fc@mr '() '() '() '() '() k4200@rib '#f)) (lambda (k4214@k4203 k4215@k4205 k4216@k4207 k4217@k4209 k4218@k420b k4219@k420d k421a@k420f k421b@k4211) (let ((k4224@_exp* k421b@k4211) (k4225@kwd* k421a@k420f) (k4226@mod** k4219@k420d) (k4227@rhs* k4218@k420b) (k4228@lex* k4217@k4209) (k4229@mr k4216@k4207) (k422a@r k4215@k4205) (k422b@e* k4214@k4203)) (begin (if (null? k422b@e*) (k31a3@syntax-violation '#f '"no expression in body" k422b@e*) (void)) (let ((k4234@init* (k30e1@chi-expr* (append (apply append (reverse k4226@mod**)) k422b@e*) k422a@r k4229@mr))) (let ((k4236@rhs* (k30f5@chi-rhs* k4227@rhs* k422a@r k4229@mr))) (k2e26@k2d8b@build-letrec* '#f (reverse k4228@lex*) (reverse k4236@rhs*) (k2e21@k2d81@build-sequence '#f k4234@init*))))))))))) (set! k4bb5@k30fb@chi-internal k30fb@chi-internal) (set! k30fd@parse-module (lambda (k4238@e) (let ((k423a@t k4238@e)) (let ((k423c@ls/false (k30c3@syntax-dispatch k423a@t '(_ each-any . each-any)))) (if k423c@ls/false (apply (lambda (k423e@export* k423f@b*) (begin (if (not (for-all k2ebc@id? k423e@export*)) (k31a3@syntax-violation '#f '"module exports must be identifiers" k4238@e) (void)) (values '#f (list->vector k423e@export*) k423f@b*))) k423c@ls/false) (let ((k4242@t k423a@t)) (let ((k4244@ls/false (k30c3@syntax-dispatch k4242@t '(_ any each-any . each-any)))) (if k4244@ls/false (apply (lambda (k4246@name k4247@export* k4248@b*) (begin (if (not (k2ebc@id? k4246@name)) (k31a3@syntax-violation '#f '"module name must be an identifier" k4238@e) (void)) (if (not (for-all k2ebc@id? k4247@export*)) (k31a3@syntax-violation '#f '"module exports must be identifiers" k4238@e) (void)) (values k4246@name (list->vector k4247@export*) k4248@b*))) k4244@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4242@t))))))))) (set! k4bb6@k30fd@parse-module k30fd@parse-module) (set! k3107@module-interface? (lambda (k424c@x) (and (simple-struct? k424c@x) (eq? (simple-struct-name k424c@x) 'module-interface)))) (set! k4bb7@k3107@module-interface? k3107@module-interface?) (set! k3109@module-interface-first-mark (lambda (k424e@x) (simple-struct-ref k424e@x '0))) (set! k4bb8@k3109@module-interface-first-mark k3109@module-interface-first-mark) (set! k310b@set-module-interface-first-mark! (lambda (k4250@x k4251@val) (simple-struct-set! k4250@x '0 k4251@val))) (set! k4bb9@k310b@set-module-interface-first-mark! k310b@set-module-interface-first-mark!) (set! k310d@module-interface-exp-id-vec (lambda (k4254@x) (simple-struct-ref k4254@x '1))) (set! k4bba@k310d@module-interface-exp-id-vec k310d@module-interface-exp-id-vec) (set! k310f@set-module-interface-exp-id-vec! (lambda (k4256@x k4257@val) (simple-struct-set! k4256@x '1 k4257@val))) (set! k4bbb@k310f@set-module-interface-exp-id-vec! k310f@set-module-interface-exp-id-vec!) (set! k3111@module-interface-exp-lab-vec (lambda (k425a@x) (simple-struct-ref k425a@x '2))) (set! k4bbc@k3111@module-interface-exp-lab-vec k3111@module-interface-exp-lab-vec) (set! k3113@set-module-interface-exp-lab-vec! (lambda (k425c@x k425d@val) (simple-struct-set! k425c@x '2 k425d@val))) (set! k4bbd@k3113@set-module-interface-exp-lab-vec! k3113@set-module-interface-exp-lab-vec!) (set! k3115@dummy '3) (set! k4bbe@k3115@dummy k3115@dummy) (set! k3117@module-interface-exp-id* (lambda (k4260@iface k4261@id) (letrec* ((k4265@diff-marks (lambda (k426c@ls k426d@x) (begin (if (null? k426c@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((k4270@a (car k426c@ls))) (if (eq? k4270@a k426d@x) '() (cons k4270@a (k4265@diff-marks (cdr k426c@ls) k426d@x)))))))) (let ((k4266@diff (k4265@diff-marks (k2e8e@stx-mark* k4261@id) (k3109@module-interface-first-mark k4260@iface))) (k4267@id-vec (k310d@module-interface-exp-id-vec k4260@iface))) (if (null? k4266@diff) k4267@id-vec (vector-map (lambda (k426a@x) (make-simple-struct 'stx '5 (list (k2e8a@stx-expr k426a@x) (append k4266@diff (k2e8e@stx-mark* k426a@x)) '() '()))) k4267@id-vec)))))) (set! k4bbf@k3117@module-interface-exp-id* k3117@module-interface-exp-id*) (set! k3119@chi-internal-module (lambda (k4272@e k4273@r k4274@mr k4275@lex* k4276@rhs* k4277@mod** k4278@kwd*) (call-with-values (lambda () (k30fd@parse-module k4272@e)) (lambda (k4286@k4281 k4287@k4283 k4288@k4285) (let ((k428c@e* k4288@k4285) (k428d@exp-id* k4287@k4283) (k428e@name k4286@k4281)) (let ((k4292@rib (k2e70@make-empty-rib))) (let ((k4294@e* (map (lambda (k4296@x) (k2ea8@add-subst k4292@rib k4296@x)) (k2eba@syntax->list k428c@e*)))) (call-with-values (lambda () (k311b@chi-body* k4294@e* k4273@r k4274@mr k4275@lex* k4276@rhs* k4277@mod** k4278@kwd* '() k4292@rib '#f)) (lambda (k42a8@k4299 k42a9@k429b k42aa@k429d k42ab@k429f k42ac@k42a1 k42ad@k42a3 k42ae@k42a5 k42af@k42a7) (let ((k42b8@_exp* k42af@k42a7) (k42b9@kwd* k42ae@k42a5) (k42ba@mod** k42ad@k42a3) (k42bb@rhs* k42ac@k42a1) (k42bc@lex* k42ab@k429f) (k42bd@mr k42aa@k429d) (k42be@r k42a9@k429b) (k42bf@e* k42a8@k4299)) (let ((k42c8@exp-lab* (vector-map (lambda (k42cc@x) (or (k2ed2@id->label (make-simple-struct 'stx '5 (list (k2ebe@id->sym k42cc@x) (k2e8e@stx-mark* k42cc@x) (list k4292@rib) '()))) (k31a3@syntax-violation '#f '"cannot find module export" k42cc@x))) k428d@exp-id*)) (k42c9@mod** (cons k42bf@e* k42ba@mod**))) (if (not k428e@name) (values k42bc@lex* k42bb@rhs* k428d@exp-id* k42c8@exp-lab* k42be@r k42bd@mr k42c9@mod** k42b9@kwd*) (let ((k42ce@lab (k2e48@gen-label 'module)) (k42cf@iface (make-simple-struct 'module-interface '4 (list (car (k2e8e@stx-mark* k428e@name)) (vector-map (lambda (k42d2@x) (make-simple-struct 'stx '5 (list (k2e8a@stx-expr k42d2@x) (k2e8e@stx-mark* k42d2@x) '() '()))) k428d@exp-id*) k42c8@exp-lab*)))) (values k42bc@lex* k42bb@rhs* (vector k428e@name) (vector k42ce@lab) (cons (cons k42ce@lab (cons '$module k42cf@iface)) k42be@r) (cons (cons k42ce@lab (cons '$module k42cf@iface)) k42bd@mr) k42c9@mod** k42b9@kwd*)))))))))))))) (set! k4bc0@k3119@chi-internal-module k3119@chi-internal-module) (set! k311b@chi-body* (lambda (k42d4@e* k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42da@kwd* k42db@exp* k42dc@rib k42dd@top?) (if (null? k42d4@e*) (values k42d4@e* k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42da@kwd* k42db@exp*) (let ((k42e8@e (car k42d4@e*))) (call-with-values (lambda () (k2ede@syntax-type k42e8@e k42d5@r)) (lambda (k42f0@k42eb k42f1@k42ed k42f2@k42ef) (let ((k42f6@kwd k42f2@k42ef) (k42f7@value k42f1@k42ed) (k42f8@type k42f0@k42eb)) (let ((k42fc@kwd* (if (k2ebc@id? k42f6@kwd) (cons k42f6@kwd k42da@kwd*) k42da@kwd*))) (let ((k42fe@t k42f8@type)) (if (memv k42fe@t '(define)) (call-with-values (lambda () (k3045@parse-define k42e8@e)) (lambda (k4304@k4301 k4305@k4303) (let ((k4308@rhs k4305@k4303) (k4309@id k4304@k4301)) (begin (if (k2ec8@bound-id-member? k4309@id k42fc@kwd*) (k31a3@syntax-violation '#f '"cannot redefine keyword" k42e8@e) (void)) (call-with-values (lambda () (k2e4c@gen-define-label+loc k4309@id k42dc@rib)) (lambda (k4310@k430d k4311@k430f) (let ((k4314@lex k4311@k430f) (k4315@lab k4310@k430d)) (begin (k2e72@extend-rib! k42dc@rib k4309@id k4315@lab) (k311b@chi-body* (cdr k42d4@e*) (k3053@add-lexical k4315@lab k4314@lex k42d5@r) k42d6@mr (cons k4314@lex k42d7@lex*) (cons k4308@rhs k42d8@rhs*) k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?))))))))) (if (memv k42fe@t '(define-syntax)) (call-with-values (lambda () (k3047@parse-define-syntax k42e8@e)) (lambda (k431c@k4319 k431d@k431b) (let ((k4320@rhs k431d@k431b) (k4321@id k431c@k4319)) (begin (if (k2ec8@bound-id-member? k4321@id k42fc@kwd*) (k31a3@syntax-violation '#f '"cannot redefine keyword" k42e8@e) (void)) (let ((k4324@lab (k2e4e@gen-define-label k4321@id k42dc@rib)) (k4325@expanded-rhs (k311d@expand-transformer k4320@rhs k42d6@mr))) (begin (k2e72@extend-rib! k42dc@rib k4321@id k4324@lab) (let ((k4328@b (k2ef4@make-eval-transformer k4325@expanded-rhs))) (k311b@chi-body* (cdr k42d4@e*) (cons (cons k4324@lab k4328@b) k42d5@r) (cons (cons k4324@lab k4328@b) k42d6@mr) k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?)))))))) (if (memv k42fe@t '(let-syntax letrec-syntax)) (let ((k432a@t k42e8@e)) (let ((k432c@ls/false (k30c3@syntax-dispatch k432a@t '(_ #(each (any any)) . each-any)))) (if (and k432c@ls/false (apply (lambda (k432e@xlhs* k432f@xrhs* k4330@xbody*) (if (not (k2ec4@valid-bound-ids? k432e@xlhs*)) (k31a3@syntax-violation '#f '"invalid identifiers" k42e8@e) (void))) k432c@ls/false)) (apply (lambda (k4334@xlhs* k4335@xrhs* k4336@xbody*) (let ((k433a@xlab* (map k2e48@gen-label k4334@xlhs*))) (let ((k433c@xrib (k2e7c@make-full-rib k4334@xlhs* k433a@xlab*))) (let ((k433e@xb* (map (lambda (k4340@x) (k2ef4@make-eval-transformer (k311d@expand-transformer (if (eq? k42f8@type 'let-syntax) k4340@x (k2ea8@add-subst k433c@xrib k4340@x)) k42d6@mr))) k4335@xrhs*))) (k311b@chi-body* (append (map (lambda (k4342@x) (k2ea8@add-subst k433c@xrib k4342@x)) k4336@xbody*) (cdr k42d4@e*)) (append (map cons k433a@xlab* k433e@xb*) k42d5@r) (append (map cons k433a@xlab* k433e@xb*) k42d6@mr) k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?))))) k432c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k432a@t)))) (if (memv k42fe@t '(begin)) (let ((k4344@t k42e8@e)) (let ((k4346@ls/false (k30c3@syntax-dispatch k4344@t '(_ . each-any)))) (if k4346@ls/false (apply (lambda (k4348@x*) (k311b@chi-body* (append k4348@x* (cdr k42d4@e*)) k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?)) k4346@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4344@t)))) (if (memv k42fe@t '(global-macro global-macro!)) (k311b@chi-body* (cons (k2ea8@add-subst k42dc@rib (k30df@chi-global-macro k42f7@value k42e8@e)) (cdr k42d4@e*)) k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?) (if (memv k42fe@t '(local-macro local-macro!)) (k311b@chi-body* (cons (k2ea8@add-subst k42dc@rib (k30dd@chi-local-macro k42f7@value k42e8@e)) (cdr k42d4@e*)) k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?) (if (memv k42fe@t '(macro macro!)) (k311b@chi-body* (cons (k2ea8@add-subst k42dc@rib (k30db@chi-macro k42f7@value k42e8@e)) (cdr k42d4@e*)) k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?) (if (memv k42fe@t '(module)) (call-with-values (lambda () (k3119@chi-internal-module k42e8@e k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd*)) (lambda (k435a@k434b k435b@k434d k435c@k434f k435d@k4351 k435e@k4353 k435f@k4355 k4360@k4357 k4361@k4359) (let ((k436a@kwd* k4361@k4359) (k436b@mod** k4360@k4357) (k436c@mr k435f@k4355) (k436d@r k435e@k4353) (k436e@m-exp-lab* k435d@k4351) (k436f@m-exp-id* k435c@k434f) (k4370@rhs* k435b@k434d) (k4371@lex* k435a@k434b)) (begin (vector-for-each (lambda (k437a@id k437b@lab) (k2e72@extend-rib! k42dc@rib k437a@id k437b@lab)) k436f@m-exp-id* k436e@m-exp-lab*) (k311b@chi-body* (cdr k42d4@e*) k436d@r k436c@mr k4371@lex* k4370@rhs* k436b@mod** k436a@kwd* k42db@exp* k42dc@rib k42dd@top?))))) (if (memv k42fe@t '(library)) (begin (k3185@library-expander (k2ed0@stx->datum k42e8@e)) (k311b@chi-body* (cdr k42d4@e*) k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?)) (if (memv k42fe@t '(export)) (let ((k437e@t k42e8@e)) (let ((k4380@ls/false (k30c3@syntax-dispatch k437e@t '(_ . each-any)))) (if k4380@ls/false (apply (lambda (k4382@exp-decl*) (k311b@chi-body* (cdr k42d4@e*) k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* (append k4382@exp-decl* k42db@exp*) k42dc@rib k42dd@top?)) k4380@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k437e@t)))) (if (memv k42fe@t '(import)) (letrec* ((k4385@module-import? (lambda (k43d8@e) (let ((k43da@t k43d8@e)) (let ((k43dc@ls/false (k30c3@syntax-dispatch k43da@t '(_ any)))) (if (and k43dc@ls/false (apply (lambda (k43de@id) (k2ebc@id? k43de@id)) k43dc@ls/false)) (apply (lambda (k43e0@id) '#t) k43dc@ls/false) (let ((k43e2@t k43da@t)) (let ((k43e4@ls/false (k30c3@syntax-dispatch k43e2@t '(_ . each-any)))) (if k43e4@ls/false (apply (lambda (k43e6@imp*) '#f) k43e4@ls/false) (let ((k43e8@t k43e2@t)) (let ((k43ea@ls/false (k30c3@syntax-dispatch k43e8@t '_))) (if k43ea@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"malformed import form" k43d8@e)) k43ea@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k43e8@t)))))))))))) (k4387@module-import (lambda (k43b6@e k43b7@r) (let ((k43ba@t k43b6@e)) (let ((k43bc@ls/false (k30c3@syntax-dispatch k43ba@t '(_ any)))) (if (and k43bc@ls/false (apply (lambda (k43be@id) (k2ebc@id? k43be@id)) k43bc@ls/false)) (apply (lambda (k43c0@id) (call-with-values (lambda () (k2ede@syntax-type k43c0@id k43b7@r)) (lambda (k43c8@k43c3 k43c9@k43c5 k43ca@k43c7) (let ((k43ce@kwd k43ca@k43c7) (k43cf@value k43c9@k43c5) (k43d0@type k43c8@k43c3)) (let ((k43d4@t k43d0@type)) (if (memv k43d4@t '($module)) (let ((k43d6@iface k43cf@value)) (values (k3117@module-interface-exp-id* k43d6@iface k43c0@id) (k3111@module-interface-exp-lab-vec k43d6@iface))) (k31a3@syntax-violation '#f '"invalid import" k43b6@e))))))) k43bc@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k43ba@t)))))) (k4389@library-import (lambda (k439a@e) (let ((k439c@t k439a@e)) (let ((k439e@ls/false (k30c3@syntax-dispatch k439c@t '(any . each-any)))) (if k439e@ls/false (apply (lambda (k43a0@ctxt k43a1@imp*) (call-with-values (lambda () (k3125@parse-import-spec* (k31a9@syntax->datum k43a1@imp*))) (lambda (k43a8@k43a5 k43a9@k43a7) (let ((k43ac@subst-labels k43a9@k43a7) (k43ad@subst-names k43a8@k43a5)) (values (vector-map (lambda (k43b0@name) (k2e9c@datum->stx k43a0@ctxt k43b0@name)) k43ad@subst-names) k43ac@subst-labels))))) k439e@ls/false) (let ((k43b2@t k439c@t)) (let ((k43b4@ls/false (k30c3@syntax-dispatch k43b2@t '_))) (if k43b4@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid import form" k439a@e)) k43b4@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k43b2@t)))))))))) (begin (call-with-values (lambda () (if (k4385@module-import? k42e8@e) (k4387@module-import k42e8@e k42d5@r) (k4389@library-import k42e8@e))) (lambda (k438e@k438b k438f@k438d) (let ((k4392@lab* k438f@k438d) (k4393@id* k438e@k438b)) (vector-for-each (lambda (k4396@id k4397@lab) (k2e72@extend-rib! k42dc@rib k4396@id k4397@lab)) k4393@id* k4392@lab*)))) (k311b@chi-body* (cdr k42d4@e*) k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?))) (if k42dd@top? (k311b@chi-body* (cdr k42d4@e*) k42d5@r k42d6@mr (cons (k2e44@gen-lexical 'dummy) k42d7@lex*) (cons (cons 'top-expr k42e8@e) k42d8@rhs*) k42d9@mod** k42fc@kwd* k42db@exp* k42dc@rib k42dd@top?) (values k42d4@e* k42d5@r k42d6@mr k42d7@lex* k42d8@rhs* k42d9@mod** k42fc@kwd* k42db@exp*)))))))))))))))))))))) (set! k4bc1@k311b@chi-body* k311b@chi-body*) (set! k311d@expand-transformer (lambda (k43ec@expr k43ed@r) (let ((k43f0@rtc (k3129@make-collector))) (let ((k43f2@expanded-rhs (let ((k43fc@k43f5 k312b@inv-collector) (k43fd@k43f7 k312d@vis-collector) (k43fe@k43f9 k43f0@rtc) (k43ff@k43fb (lambda (k4404@x) (values)))) (let ((k4406@swap (lambda () (begin (let ((k4408@t (k43fc@k43f5))) (begin (k43fc@k43f5 k43fe@k43f9) (set! k43fe@k43f9 k4408@t))) (let ((k440a@t (k43fd@k43f7))) (begin (k43fd@k43f7 k43ff@k43fb) (set! k43ff@k43fb k440a@t))))))) (dynamic-wind k4406@swap (lambda () (k30e5@chi-expr k43ec@expr k43ed@r k43ed@r)) k4406@swap))))) (begin (for-each (let ((k440c@mark-visit (k312d@vis-collector))) (lambda (k440e@x) (begin (k2cd8@k2b26@invoke-library k440e@x) (k440c@mark-visit k440e@x)))) (k43f0@rtc)) k43f2@expanded-rhs))))) (set! k4bc2@k311d@expand-transformer k311d@expand-transformer) (set! k311f@parse-exports (lambda (k4410@exp*) (let k4418@f ((k4412@exp* k4410@exp*) (k4413@int* '()) (k4414@ext* '())) (if (null? k4412@exp*) (begin (if (not (k2ec4@valid-bound-ids? k4414@ext*)) (k31a3@syntax-violation 'export '"invalid exports" (k30f9@find-dups k4414@ext*)) (void)) (values (map k31a9@syntax->datum k4414@ext*) k4413@int*)) (let ((k441a@t (car k4412@exp*))) (let ((k441c@ls/false (k30c3@syntax-dispatch k441a@t '(any . #(each (any any)))))) (if k441c@ls/false (apply (lambda (k441e@rename k441f@i* k4420@e*) (begin (if (not (and (eq? (k31a9@syntax->datum k441e@rename) 'rename) (for-all k2ebc@id? k441f@i*) (for-all k2ebc@id? k4420@e*))) (k31a3@syntax-violation 'export '"invalid export specifier" (car k4412@exp*)) (void)) (k4418@f (cdr k4412@exp*) (append k441f@i* k4413@int*) (append k4420@e* k4414@ext*)))) k441c@ls/false) (let ((k4424@t k441a@t)) (let ((k4426@ls/false (k30c3@syntax-dispatch k4424@t 'any))) (if k4426@ls/false (apply (lambda (k4428@ie) (begin (if (not (k2ebc@id? k4428@ie)) (k31a3@syntax-violation 'export '"invalid export" k4428@ie) (void)) (k4418@f (cdr k4412@exp*) (cons k4428@ie k4413@int*) (cons k4428@ie k4414@ext*)))) k4426@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4424@t))))))))))) (set! k4bc3@k311f@parse-exports k311f@parse-exports) (set! k3121@parse-library-name (lambda (k442a@spec) (letrec* ((k442d@parse (lambda (k443a@x) (let ((k443c@t k443a@x)) (let ((k443e@ls/false (k30c3@syntax-dispatch k443c@t '(each-any)))) (if (and k443e@ls/false (apply (lambda (k4440@v*) (for-all (lambda (k4442@x) (let ((k4444@x (k31a9@syntax->datum k4442@x))) (and (integer? k4444@x) (exact? k4444@x)))) k4440@v*)) k443e@ls/false)) (apply (lambda (k4446@v*) (values '() (map k31a9@syntax->datum k4446@v*))) k443e@ls/false) (let ((k4448@t k443c@t)) (let ((k444a@ls/false (k30c3@syntax-dispatch k4448@t '(any . any)))) (if (and k444a@ls/false (apply (lambda (k444c@x k444d@rest) (symbol? (k31a9@syntax->datum k444c@x))) k444a@ls/false)) (apply (lambda (k4450@x k4451@rest) (call-with-values (lambda () (k442d@parse k4451@rest)) (lambda (k4458@k4455 k4459@k4457) (let ((k445c@v* k4459@k4457) (k445d@x* k4458@k4455)) (values (cons (k31a9@syntax->datum k4450@x) k445d@x*) k445c@v*))))) k444a@ls/false) (let ((k4460@t k4448@t)) (let ((k4462@ls/false (k30c3@syntax-dispatch k4460@t '()))) (if k4462@ls/false (apply (lambda () (values '() '())) k4462@ls/false) (let ((k4464@t k4460@t)) (let ((k4466@ls/false (k30c3@syntax-dispatch k4464@t '_))) (if k4466@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid library name" k442a@spec)) k4466@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4464@t)))))))))))))))) (call-with-values (lambda () (k442d@parse k442a@spec)) (lambda (k4432@k442f k4433@k4431) (let ((k4436@ver* k4433@k4431) (k4437@name* k4432@k442f)) (begin (if (null? k4437@name*) (k31a3@syntax-violation '#f '"empty library name" k442a@spec) (void)) (values k4437@name* k4436@ver*)))))))) (set! k4bc4@k3121@parse-library-name k3121@parse-library-name) (set! k3123@parse-library (lambda (k4468@e) (let ((k446a@t k4468@e)) (let ((k446c@ls/false (k30c3@syntax-dispatch k446a@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and k446c@ls/false (apply (lambda (k446e@library k446f@name* k4470@export k4471@exp* k4472@import k4473@imp* k4474@b*) (and (eq? (k31a9@syntax->datum k4470@export) 'export) (eq? (k31a9@syntax->datum k4472@import) 'import) (eq? (k31a9@syntax->datum k446e@library) 'library))) k446c@ls/false)) (apply (lambda (k447c@library k447d@name* k447e@export k447f@exp* k4480@import k4481@imp* k4482@b*) (values k447d@name* k447f@exp* k4481@imp* k4482@b*)) k446c@ls/false) (let ((k448a@t k446a@t)) (let ((k448c@ls/false (k30c3@syntax-dispatch k448a@t '_))) (if k448c@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"malformed library" k4468@e)) k448c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k448a@t))))))))) (set! k4bc5@k3123@parse-library k3123@parse-library) (set! k3125@parse-import-spec* (letrec* ((k448f@idsyn? (lambda (k4698@x) (symbol? (k31a9@syntax->datum k4698@x)))) (k4491@dup-error (lambda (k4696@name) (k31a3@syntax-violation 'import '"two imports with different bindings" k4696@name))) (k4493@merge-substs (lambda (k4684@s k4685@subst) (letrec* ((k4689@insert-to-subst (lambda (k468a@a k468b@subst) (let ((k468e@name (car k468a@a)) (k468f@label (cdr k468a@a))) (let ((k4692@t (assq k468e@name k468b@subst))) (if k4692@t ((lambda (k4694@x) (if (eq? (cdr k4694@x) k468f@label) k468b@subst (k4491@dup-error k468e@name))) k4692@t) (cons k468a@a k468b@subst))))))) (if (null? k4684@s) k4685@subst (k4689@insert-to-subst (car k4684@s) (k4493@merge-substs (cdr k4684@s) k4685@subst)))))) (k4495@exclude* (lambda (k4654@sym* k4655@subst) (letrec* ((k4659@exclude (lambda (k4672@sym k4673@subst) (if (null? k4673@subst) (k31a3@syntax-violation 'import '"cannot rename unbound identifier" k4672@sym) (if (eq? k4672@sym (caar k4673@subst)) (values (cdar k4673@subst) (cdr k4673@subst)) (let ((k4676@a (car k4673@subst))) (call-with-values (lambda () (k4659@exclude k4672@sym (cdr k4673@subst))) (lambda (k467c@k4679 k467d@k467b) (let ((k4680@subst k467d@k467b) (k4681@old k467c@k4679)) (values k4681@old (cons k4676@a k4680@subst))))))))))) (if (null? k4654@sym*) (values '() k4655@subst) (call-with-values (lambda () (k4659@exclude (car k4654@sym*) k4655@subst)) (lambda (k465e@k465b k465f@k465d) (let ((k4662@subst k465f@k465d) (k4663@old k465e@k465b)) (call-with-values (lambda () (k4495@exclude* (cdr k4654@sym*) k4662@subst)) (lambda (k466a@k4667 k466b@k4669) (let ((k466e@subst k466b@k4669) (k466f@old* k466a@k4667)) (values (cons k4663@old k466f@old*) k466e@subst))))))))))) (k4497@find* (lambda (k464c@sym* k464d@subst) (map (lambda (k4650@x) (let ((k4652@t (assq k4650@x k464d@subst))) (if k4652@t (cdr k4652@t) (k31a3@syntax-violation 'import '"cannot find identifier" k4650@x)))) k464c@sym*))) (k4499@rem* (lambda (k4644@sym* k4645@subst) (let k464a@f ((k4648@subst k4645@subst)) (if (null? k4648@subst) '() (if (memq (caar k4648@subst) k4644@sym*) (k464a@f (cdr k4648@subst)) (cons (car k4648@subst) (k464a@f (cdr k4648@subst)))))))) (k449b@remove-dups (lambda (k4642@ls) (if (null? k4642@ls) '() (if (memq (car k4642@ls) (cdr k4642@ls)) (k449b@remove-dups (cdr k4642@ls)) (cons (car k4642@ls) (k449b@remove-dups (cdr k4642@ls))))))) (k449d@parse-library-name (lambda (k455a@spec) (letrec* ((k455d@subversion? (lambda (k463e@x) (let ((k4640@x (k31a9@syntax->datum k463e@x))) (and (integer? k4640@x) (exact? k4640@x) (>= k4640@x '0))))) (k455f@subversion-pred (lambda (k45de@x*) (let ((k45e0@t k45de@x*)) (let ((k45e2@ls/false (k30c3@syntax-dispatch k45e0@t 'any))) (if (and k45e2@ls/false (apply (lambda (k45e4@n) (k455d@subversion? k45e4@n)) k45e2@ls/false)) (apply (lambda (k45e6@n) (lambda (k45e8@x) (= k45e8@x (k31a9@syntax->datum k45e6@n)))) k45e2@ls/false) (let ((k45ea@t k45e0@t)) (let ((k45ec@ls/false (k30c3@syntax-dispatch k45ea@t '(any . each-any)))) (if (and k45ec@ls/false (apply (lambda (k45ee@p? k45ef@sub*) (eq? (k31a9@syntax->datum k45ee@p?) 'and)) k45ec@ls/false)) (apply (lambda (k45f2@p? k45f3@sub*) (let ((k45f6@p* (map k455f@subversion-pred k45f3@sub*))) (lambda (k45f8@x) (for-all (lambda (k45fa@p) (k45fa@p k45f8@x)) k45f6@p*)))) k45ec@ls/false) (let ((k45fc@t k45ea@t)) (let ((k45fe@ls/false (k30c3@syntax-dispatch k45fc@t '(any . each-any)))) (if (and k45fe@ls/false (apply (lambda (k4600@p? k4601@sub*) (eq? (k31a9@syntax->datum k4600@p?) 'or)) k45fe@ls/false)) (apply (lambda (k4604@p? k4605@sub*) (let ((k4608@p* (map k455f@subversion-pred k4605@sub*))) (lambda (k460a@x) (exists (lambda (k460c@p) (k460c@p k460a@x)) k4608@p*)))) k45fe@ls/false) (let ((k460e@t k45fc@t)) (let ((k4610@ls/false (k30c3@syntax-dispatch k460e@t '(any any)))) (if (and k4610@ls/false (apply (lambda (k4612@p? k4613@sub) (eq? (k31a9@syntax->datum k4612@p?) 'not)) k4610@ls/false)) (apply (lambda (k4616@p? k4617@sub) (let ((k461a@p (k455f@subversion-pred k4617@sub))) (lambda (k461c@x) (not (k461a@p k461c@x))))) k4610@ls/false) (let ((k461e@t k460e@t)) (let ((k4620@ls/false (k30c3@syntax-dispatch k461e@t '(any any)))) (if (and k4620@ls/false (apply (lambda (k4622@p? k4623@n) (and (eq? (k31a9@syntax->datum k4622@p?) '<=) (k455d@subversion? k4623@n))) k4620@ls/false)) (apply (lambda (k4626@p? k4627@n) (lambda (k462a@x) (<= k462a@x (k31a9@syntax->datum k4627@n)))) k4620@ls/false) (let ((k462c@t k461e@t)) (let ((k462e@ls/false (k30c3@syntax-dispatch k462c@t '(any any)))) (if (and k462e@ls/false (apply (lambda (k4630@p? k4631@n) (and (eq? (k31a9@syntax->datum k4630@p?) '>=) (k455d@subversion? k4631@n))) k462e@ls/false)) (apply (lambda (k4634@p? k4635@n) (lambda (k4638@x) (>= k4638@x (k31a9@syntax->datum k4635@n)))) k462e@ls/false) (let ((k463a@t k462c@t)) (let ((k463c@ls/false (k30c3@syntax-dispatch k463a@t '_))) (if k463c@ls/false (apply (lambda () (k31a3@syntax-violation 'import '"invalid sub-version spec" k455a@spec k45de@x*)) k463c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k463a@t)))))))))))))))))))))))) (k4561@version-pred (lambda (k458e@x*) (let ((k4590@t k458e@x*)) (let ((k4592@ls/false (k30c3@syntax-dispatch k4590@t '()))) (if k4592@ls/false (apply (lambda () (lambda (k4594@x) '#t)) k4592@ls/false) (let ((k4596@t k4590@t)) (let ((k4598@ls/false (k30c3@syntax-dispatch k4596@t '(any . each-any)))) (if (and k4598@ls/false (apply (lambda (k459a@c k459b@ver*) (eq? (k31a9@syntax->datum k459a@c) 'and)) k4598@ls/false)) (apply (lambda (k459e@c k459f@ver*) (let ((k45a2@p* (map k4561@version-pred k459f@ver*))) (lambda (k45a4@x) (for-all (lambda (k45a6@p) (k45a6@p k45a4@x)) k45a2@p*)))) k4598@ls/false) (let ((k45a8@t k4596@t)) (let ((k45aa@ls/false (k30c3@syntax-dispatch k45a8@t '(any . each-any)))) (if (and k45aa@ls/false (apply (lambda (k45ac@c k45ad@ver*) (eq? (k31a9@syntax->datum k45ac@c) 'or)) k45aa@ls/false)) (apply (lambda (k45b0@c k45b1@ver*) (let ((k45b4@p* (map k4561@version-pred k45b1@ver*))) (lambda (k45b6@x) (exists (lambda (k45b8@p) (k45b8@p k45b6@x)) k45b4@p*)))) k45aa@ls/false) (let ((k45ba@t k45a8@t)) (let ((k45bc@ls/false (k30c3@syntax-dispatch k45ba@t '(any any)))) (if (and k45bc@ls/false (apply (lambda (k45be@c k45bf@ver) (eq? (k31a9@syntax->datum k45be@c) 'not)) k45bc@ls/false)) (apply (lambda (k45c2@c k45c3@ver) (let ((k45c6@p (k4561@version-pred k45c3@ver))) (lambda (k45c8@x) (not (k45c6@p k45c8@x))))) k45bc@ls/false) (let ((k45ca@t k45ba@t)) (let ((k45cc@ls/false (k30c3@syntax-dispatch k45ca@t 'each-any))) (if k45cc@ls/false (apply (lambda (k45ce@sub*) (let ((k45d0@p* (map k455f@subversion-pred k45ce@sub*))) (lambda (k45d2@x) (let k45d8@f ((k45d4@p* k45d0@p*) (k45d5@x k45d2@x)) (if (null? k45d4@p*) '#t (if (null? k45d5@x) '#f (and ((car k45d4@p*) (car k45d5@x)) (k45d8@f (cdr k45d4@p*) (cdr k45d5@x))))))))) k45cc@ls/false) (let ((k45da@t k45ca@t)) (let ((k45dc@ls/false (k30c3@syntax-dispatch k45da@t '_))) (if k45dc@ls/false (apply (lambda () (k31a3@syntax-violation 'import '"invalid version spec" k455a@spec k458e@x*)) k45dc@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k45da@t)))))))))))))))))))))) (let k4564@f ((k4562@x k455a@spec)) (let ((k4566@t k4562@x)) (let ((k4568@ls/false (k30c3@syntax-dispatch k4566@t '(each-any)))) (if k4568@ls/false (apply (lambda (k456a@version-spec*) (values '() (k4561@version-pred k456a@version-spec*))) k4568@ls/false) (let ((k456c@t k4566@t)) (let ((k456e@ls/false (k30c3@syntax-dispatch k456c@t '(any . any)))) (if (and k456e@ls/false (apply (lambda (k4570@x k4571@x*) (k448f@idsyn? k4570@x)) k456e@ls/false)) (apply (lambda (k4574@x k4575@x*) (call-with-values (lambda () (k4564@f k4575@x*)) (lambda (k457c@k4579 k457d@k457b) (let ((k4580@pred k457d@k457b) (k4581@name k457c@k4579)) (values (cons (k31a9@syntax->datum k4574@x) k4581@name) k4580@pred))))) k456e@ls/false) (let ((k4584@t k456c@t)) (let ((k4586@ls/false (k30c3@syntax-dispatch k4584@t '()))) (if k4586@ls/false (apply (lambda () (values '() (lambda (k4588@x) '#t))) k4586@ls/false) (let ((k458a@t k4584@t)) (let ((k458c@ls/false (k30c3@syntax-dispatch k458a@t '_))) (if k458c@ls/false (apply (lambda () (k31a3@syntax-violation '#f '"invalid import spec" k455a@spec)) k458c@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k458a@t))))))))))))))))) (k449f@import-library (lambda (k454a@spec*) (call-with-values (lambda () (k449d@parse-library-name k454a@spec*)) (lambda (k4550@k454d k4551@k454f) (let ((k4554@pred k4551@k454f) (k4555@name k4550@k454d)) (begin (if (null? k4555@name) (k31a3@syntax-violation 'import '"empty library name" k454a@spec*) (void)) (let ((k4558@lib (k2cd1@k2b18@find-library-by-name k4555@name))) (begin (if (not k4558@lib) (k31a3@syntax-violation 'import '"cannot find library with required name" k4555@name) (void)) (if (not (k4554@pred (k2cab@k2acc@library-version k4558@lib))) (k31a3@syntax-violation 'import '"library does not satisfy version specification" k454a@spec* k4558@lib) (void)) ((k312f@imp-collector) k4558@lib) (k2cb3@k2adc@library-subst k4558@lib))))))))) (k44a1@get-import (lambda (k44bc@spec) (let ((k44be@t k44bc@spec)) (let ((k44c0@ls/false (k30c3@syntax-dispatch k44be@t '(any . each-any)))) (if (and k44c0@ls/false (apply (lambda (k44c2@x k44c3@x*) (not (memq (k31a9@syntax->datum k44c2@x) '(for rename except only prefix library)))) k44c0@ls/false)) (apply (lambda (k44c6@x k44c7@x*) (k449f@import-library (cons k44c6@x k44c7@x*))) k44c0@ls/false) (let ((k44ca@t k44be@t)) (let ((k44cc@ls/false (k30c3@syntax-dispatch k44ca@t '(any any . #(each (any any)))))) (if (and k44cc@ls/false (apply (lambda (k44ce@rename k44cf@isp k44d0@old* k44d1@new*) (and (eq? (k31a9@syntax->datum k44ce@rename) 'rename) (for-all k448f@idsyn? k44d0@old*) (for-all k448f@idsyn? k44d1@new*))) k44cc@ls/false)) (apply (lambda (k44d6@rename k44d7@isp k44d8@old* k44d9@new*) (let ((k44de@subst (k44a1@get-import k44d7@isp)) (k44df@old* (map k31a9@syntax->datum k44d8@old*)) (k44e0@new* (map k31a9@syntax->datum k44d9@new*))) (let ((k44e4@old-label* (k4497@find* k44df@old* k44de@subst))) (let ((k44e6@subst (k4499@rem* k44df@old* k44de@subst))) (k4493@merge-substs (map cons k44e0@new* k44e4@old-label*) k44e6@subst))))) k44cc@ls/false) (let ((k44e8@t k44ca@t)) (let ((k44ea@ls/false (k30c3@syntax-dispatch k44e8@t '(any any . each-any)))) (if (and k44ea@ls/false (apply (lambda (k44ec@except k44ed@isp k44ee@sym*) (and (eq? (k31a9@syntax->datum k44ec@except) 'except) (for-all k448f@idsyn? k44ee@sym*))) k44ea@ls/false)) (apply (lambda (k44f2@except k44f3@isp k44f4@sym*) (let ((k44f8@subst (k44a1@get-import k44f3@isp))) (k4499@rem* (map k31a9@syntax->datum k44f4@sym*) k44f8@subst))) k44ea@ls/false) (let ((k44fa@t k44e8@t)) (let ((k44fc@ls/false (k30c3@syntax-dispatch k44fa@t '(any any . each-any)))) (if (and k44fc@ls/false (apply (lambda (k44fe@only k44ff@isp k4500@sym*) (and (eq? (k31a9@syntax->datum k44fe@only) 'only) (for-all k448f@idsyn? k4500@sym*))) k44fc@ls/false)) (apply (lambda (k4504@only k4505@isp k4506@sym*) (let ((k450a@subst (k44a1@get-import k4505@isp)) (k450b@sym* (map k31a9@syntax->datum k4506@sym*))) (let ((k450e@sym* (k449b@remove-dups k450b@sym*))) (let ((k4510@lab* (k4497@find* k450e@sym* k450a@subst))) (map cons k450e@sym* k4510@lab*))))) k44fc@ls/false) (let ((k4512@t k44fa@t)) (let ((k4514@ls/false (k30c3@syntax-dispatch k4512@t '(any any any)))) (if (and k4514@ls/false (apply (lambda (k4516@prefix k4517@isp k4518@p) (and (eq? (k31a9@syntax->datum k4516@prefix) 'prefix) (k448f@idsyn? k4518@p))) k4514@ls/false)) (apply (lambda (k451c@prefix k451d@isp k451e@p) (let ((k4522@subst (k44a1@get-import k451d@isp)) (k4523@prefix (symbol->string (k31a9@syntax->datum k451e@p)))) (map (lambda (k4526@x) (cons (string->symbol (string-append k4523@prefix (symbol->string (car k4526@x)))) (cdr k4526@x))) k4522@subst))) k4514@ls/false) (let ((k4528@t k4512@t)) (let ((k452a@ls/false (k30c3@syntax-dispatch k4528@t '(any each-any)))) (if (and k452a@ls/false (apply (lambda (k452c@library k452d@spec*) (eq? (k31a9@syntax->datum k452c@library) 'library)) k452a@ls/false)) (apply (lambda (k4530@library k4531@spec*) (k449f@import-library k4531@spec*)) k452a@ls/false) (let ((k4534@t k4528@t)) (let ((k4536@ls/false (k30c3@syntax-dispatch k4534@t '(any any . any)))) (if (and k4536@ls/false (apply (lambda (k4538@for k4539@isp k453a@rest) (eq? (k31a9@syntax->datum k4538@for) 'for)) k4536@ls/false)) (apply (lambda (k453e@for k453f@isp k4540@rest) (k44a1@get-import k453f@isp)) k4536@ls/false) (let ((k4544@t k4534@t)) (let ((k4546@ls/false (k30c3@syntax-dispatch k4544@t 'any))) (if k4546@ls/false (apply (lambda (k4548@spec) (k31a3@syntax-violation 'import '"invalid import spec" k4548@spec)) k4546@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4544@t))))))))))))))))))))))))))) (k44a3@add-imports! (lambda (k44ac@imp k44ad@h) (let ((k44b0@subst (k44a1@get-import k44ac@imp))) (for-each (lambda (k44b2@x) (let ((k44b4@name (car k44b2@x)) (k44b5@label (cdr k44b2@x))) (let ((k44b8@t (hashtable-ref k44ad@h k44b4@name '#f))) (if k44b8@t ((lambda (k44ba@l) (if (not (eq? k44ba@l k44b5@label)) (k4491@dup-error k44b4@name) (void))) k44b8@t) (hashtable-set! k44ad@h k44b4@name k44b5@label))))) k44b0@subst))))) (lambda (k44a4@imp*) (let k44aa@f ((k44a6@imp* k44a4@imp*) (k44a7@h (make-eq-hashtable))) (if (null? k44a6@imp*) (hashtable-entries k44a7@h) (begin (k44a3@add-imports! (car k44a6@imp*) k44a7@h) (k44aa@f (cdr k44a6@imp*) k44a7@h))))))) (set! k4bc6@k3125@parse-import-spec* k3125@parse-import-spec*) (set! k3127@make-top-rib (lambda (k469a@names k469b@labels) (let ((k469e@rib (k2e70@make-empty-rib))) (begin (vector-for-each (lambda (k46a0@name k46a1@label) (begin (if (not (symbol? k46a0@name)) (error 'make-top-rib '"BUG: not a symbol" k46a0@name) (void)) (k2e74@extend-rib/nc! k469e@rib (make-simple-struct 'stx '5 (list k46a0@name k2e40@top-mark* '() '())) k46a1@label))) k469a@names k469b@labels) k469e@rib)))) (set! k4bc7@k3127@make-top-rib k3127@make-top-rib) (set! k3129@make-collector (lambda () (let ((k46a4@ls '())) (lambda k46a8 (let ((k46a9 (length k46a8))) (if (= k46a9 '0) (apply (lambda () k46a4@ls) k46a8) (if (= k46a9 '1) (apply (lambda (k46a6@x) (set! k46a4@ls (k2e39@set-cons k46a6@x k46a4@ls))) k46a8) (error 'apply '"invalid arg count")))))))) (set! k4bc8@k3129@make-collector k3129@make-collector) (set! k312b@inv-collector (k2a0c@k28ea@make-parameter (lambda k46aa@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (k46ac@x) (begin (if (not (procedure? k46ac@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" k46ac@x) (void)) k46ac@x)))) (set! k4bc9@k312b@inv-collector k312b@inv-collector) (set! k312d@vis-collector (k2a0c@k28ea@make-parameter (lambda k46ae@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (k46b0@x) (begin (if (not (procedure? k46b0@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" k46b0@x) (void)) k46b0@x)))) (set! k4bca@k312d@vis-collector k312d@vis-collector) (set! k312f@imp-collector (k2a0c@k28ea@make-parameter (lambda k46b2@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (k46b4@x) (begin (if (not (procedure? k46b4@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" k46b4@x) (void)) k46b4@x)))) (set! k4bcb@k312f@imp-collector k312f@imp-collector) (set! k3131@chi-library-internal (lambda (k46b6@e* k46b7@rib k46b8@top?) (call-with-values (lambda () (k311b@chi-body* k46b6@e* '() '() '() '() '() '() '() k46b7@rib k46b8@top?)) (lambda (k46cc@k46bd k46cd@k46bf k46ce@k46c1 k46cf@k46c3 k46d0@k46c5 k46d1@k46c7 k46d2@k46c9 k46d3@k46cb) (let ((k46dc@exp* k46d3@k46cb) (k46dd@_kwd* k46d2@k46c9) (k46de@mod** k46d1@k46c7) (k46df@rhs* k46d0@k46c5) (k46e0@lex* k46cf@k46c3) (k46e1@mr k46ce@k46c1) (k46e2@r k46cd@k46bf) (k46e3@e* k46cc@k46bd)) (values (append (apply append (reverse k46de@mod**)) k46e3@e*) k46e2@r k46e1@mr (reverse k46e0@lex*) (reverse k46df@rhs*) k46dc@exp*)))))) (set! k4bcc@k3131@chi-library-internal k3131@chi-library-internal) (set! k3133@chi-interaction-expr (lambda (k46ec@e k46ed@rib k46ee@r) (call-with-values (lambda () (k311b@chi-body* (list k46ec@e) k46ee@r k46ee@r '() '() '() '() '() k46ed@rib '#t)) (lambda (k4702@k46f3 k4703@k46f5 k4704@k46f7 k4705@k46f9 k4706@k46fb k4707@k46fd k4708@k46ff k4709@k4701) (let ((k4712@_exp* k4709@k4701) (k4713@_kwd* k4708@k46ff) (k4714@mod** k4707@k46fd) (k4715@rhs* k4706@k46fb) (k4716@lex* k4705@k46f9) (k4717@mr k4704@k46f7) (k4718@r k4703@k46f5) (k4719@e* k4702@k46f3)) (let ((k4722@e* (k30f3@expand-interaction-rhs*/init* (reverse k4716@lex*) (reverse k4715@rhs*) (append (apply append (reverse k4714@mod**)) k4719@e*) k4718@r k4717@mr))) (let ((k4724@e (if (null? k4722@e*) (k2e22@k2d83@build-void) (if (null? (cdr k4722@e*)) (car k4722@e*) (k2e21@k2d81@build-sequence '#f k4722@e*))))) (values k4724@e k4718@r)))))))) (set! k4bcd@k3133@chi-interaction-expr k3133@chi-interaction-expr) (set! k3135@library-body-expander (lambda (k4726@name k4727@main-exp* k4728@imp* k4729@b* k472a@top?) (letrec* ((k4731@itc (k3129@make-collector))) (let ((k473a@k4733 k312f@imp-collector) (k473b@k4735 k31b3@top-level-context) (k473c@k4737 k4731@itc) (k473d@k4739 '#f)) (let ((k4742@swap (lambda () (begin (let ((k4744@t (k473a@k4733))) (begin (k473a@k4733 k473c@k4737) (set! k473c@k4737 k4744@t))) (let ((k4746@t (k473b@k4735))) (begin (k473b@k4735 k473d@k4739) (set! k473d@k4739 k4746@t))))))) (dynamic-wind k4742@swap (lambda () (call-with-values (lambda () (k3125@parse-import-spec* k4728@imp*)) (lambda (k474c@k4749 k474d@k474b) (let ((k4750@subst-labels k474d@k474b) (k4751@subst-names k474c@k4749)) (let ((k4754@rib (k3127@make-top-rib k4751@subst-names k4750@subst-labels))) (letrec* ((k4757@wrap (lambda (k47d2@x) (make-simple-struct 'stx '5 (list k47d2@x k2e40@top-mark* (list k4754@rib) '()))))) (let ((k4758@b* (map k4757@wrap k4729@b*)) (k4759@main-exp* (map k4757@wrap k4727@main-exp*)) (k475a@rtc (k3129@make-collector)) (k475b@vtc (k3129@make-collector))) (let ((k4768@k4761 k312b@inv-collector) (k4769@k4763 k312d@vis-collector) (k476a@k4765 k475a@rtc) (k476b@k4767 k475b@vtc)) (let ((k4770@swap (lambda () (begin (let ((k4772@t (k4768@k4761))) (begin (k4768@k4761 k476a@k4765) (set! k476a@k4765 k4772@t))) (let ((k4774@t (k4769@k4763))) (begin (k4769@k4763 k476b@k4767) (set! k476b@k4767 k4774@t))))))) (dynamic-wind k4770@swap (lambda () (call-with-values (lambda () (k3131@chi-library-internal k4758@b* k4754@rib k472a@top?)) (lambda (k4782@k4777 k4783@k4779 k4784@k477b k4785@k477d k4786@k477f k4787@k4781) (let ((k478e@internal-exp* k4787@k4781) (k478f@rhs* k4786@k477f) (k4790@lex* k4785@k477d) (k4791@mr k4784@k477b) (k4792@r k4783@k4779) (k4793@init* k4782@k4777)) (call-with-values (lambda () (k311f@parse-exports (append k4759@main-exp* k478e@internal-exp*))) (lambda (k479e@k479b k479f@k479d) (let ((k47a2@exp-id* k479f@k479d) (k47a3@exp-name* k479e@k479b)) (begin (k2e78@seal-rib! k4754@rib) (let ((k47a6@init* (k30e1@chi-expr* k4793@init* k4792@r k4791@mr))) (let ((k47a8@rhs* (k30f5@chi-rhs* k478f@rhs* k4792@r k4791@mr))) (begin (k2e7a@unseal-rib! k4754@rib) (let ((k47aa@loc* (map k2e46@gen-global k4790@lex*)) (k47ab@export-subst (k318d@make-export-subst k47a3@exp-name* k47a2@exp-id*))) (letrec* ((k47af@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (k318f@make-export-env/macros k4790@lex* k47aa@loc* k4792@r)) (lambda (k47b6@k47b1 k47b7@k47b3 k47b8@k47b5) (let ((k47bc@macro* k47b8@k47b5) (k47bd@global* k47b7@k47b3) (k47be@export-env k47b6@k47b1)) (begin (for-each (lambda (k47c2@s) (let ((k47c4@name (car k47c2@s)) (k47c5@label (cdr k47c2@s))) (let ((k47c8@p (assq k47c5@label k47be@export-env))) (if k47c8@p (let ((k47ca@b (cdr k47c8@p))) (let ((k47cc@type (car k47ca@b))) (if (eq? k47cc@type 'mutable) (k31a3@syntax-violation 'export k47af@errstr k47c4@name) (void)))) (void))))) k47ab@export-subst) (let ((k47ce@invoke-body (k2e27@k2d8d@build-library-letrec* '#f k4726@name k4790@lex* k47aa@loc* k47a8@rhs* (if (null? k47a6@init*) (k2e22@k2d83@build-void) (k2e21@k2d81@build-sequence '#f k47a6@init*)))) (k47cf@invoke-definitions (map k2e1e@k2ce0@build-global-define (map cdr k47bd@global*)))) (values (k4731@itc) (k475a@rtc) (k475b@vtc) (k2e21@k2d81@build-sequence '#f (append k47cf@invoke-definitions (list k47ce@invoke-body))) k47bc@macro* k47ab@export-subst k47be@export-env))))))))))))))))))) k4770@swap)))))))))) k4742@swap)))))) (set! k4bce@k3135@library-body-expander k3135@library-body-expander) (set! k3137@core-library-expander (lambda (k47d4@e k47d5@verify-name) (call-with-values (lambda () (k3123@parse-library k47d4@e)) (lambda (k47e0@k47d9 k47e1@k47db k47e2@k47dd k47e3@k47df) (let ((k47e8@b* k47e3@k47df) (k47e9@imp* k47e2@k47dd) (k47ea@exp* k47e1@k47db) (k47eb@name* k47e0@k47d9)) (call-with-values (lambda () (k3121@parse-library-name k47eb@name*)) (lambda (k47f4@k47f1 k47f5@k47f3) (let ((k47f8@ver k47f5@k47f3) (k47f9@name k47f4@k47f1)) (begin (k47d5@verify-name k47f9@name) (call-with-values (lambda () (k3135@library-body-expander k47f9@name k47ea@exp* k47e9@imp* k47e8@b* '#f)) (lambda (k480a@k47fd k480b@k47ff k480c@k4801 k480d@k4803 k480e@k4805 k480f@k4807 k4810@k4809) (let ((k4818@export-env k4810@k4809) (k4819@export-subst k480f@k4807) (k481a@visit-code k480e@k4805) (k481b@invoke-code k480d@k4803) (k481c@visit-req* k480c@k4801) (k481d@invoke-req* k480b@k47ff) (k481e@imp* k480a@k47fd)) (values k47f9@name k47f8@ver k481e@imp* k481d@invoke-req* k481c@visit-req* k481b@invoke-code k481a@visit-code k4819@export-subst k4818@export-env))))))))))))) (set! k4bcf@k3137@core-library-expander k3137@core-library-expander) (set! k3139@parse-top-level-program (lambda (k4826@e*) (let ((k4828@t k4826@e*)) (let ((k482a@ls/false (k30c3@syntax-dispatch k4828@t '((any . each-any) . each-any)))) (if (and k482a@ls/false (apply (lambda (k482c@import k482d@imp* k482e@b*) (eq? (k31a9@syntax->datum k482c@import) 'import)) k482a@ls/false)) (apply (lambda (k4832@import k4833@imp* k4834@b*) (values k4833@imp* k4834@b*)) k482a@ls/false) (let ((k4838@t k4828@t)) (let ((k483a@ls/false (k30c3@syntax-dispatch k4838@t '((any . any) . any)))) (if (and k483a@ls/false (apply (lambda (k483c@import k483d@x k483e@y) (eq? (k31a9@syntax->datum k483c@import) 'import)) k483a@ls/false)) (apply (lambda (k4842@import k4843@x k4844@y) (k31a3@syntax-violation 'expander '"invalid syntax of top-level program" (k2eb6@syntax-car k4826@e*))) k483a@ls/false) (let ((k4848@t k4838@t)) (let ((k484a@ls/false (k30c3@syntax-dispatch k4848@t '_))) (if k484a@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) k484a@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4848@t)))))))))))) (set! k4bd0@k3139@parse-top-level-program k3139@parse-top-level-program) (set! k313b@top-level-expander (lambda (k484c@e*) (call-with-values (lambda () (k3139@parse-top-level-program k484c@e*)) (lambda (k4852@k484f k4853@k4851) (let ((k4856@b* k4853@k4851) (k4857@imp* k4852@k484f)) (call-with-values (lambda () (k3135@library-body-expander '() '() k4857@imp* k4856@b* '#t)) (lambda (k4868@k485b k4869@k485d k486a@k485f k486b@k4861 k486c@k4863 k486d@k4865 k486e@k4867) (let ((k4876@export-env k486e@k4867) (k4877@export-subst k486d@k4865) (k4878@visit-code k486c@k4863) (k4879@invoke-code k486b@k4861) (k487a@visit-req* k486a@k485f) (k487b@invoke-req* k4869@k485d) (k487c@imp* k4868@k485b)) (values k487b@invoke-req* k4879@invoke-code))))))))) (set! k4bd1@k313b@top-level-expander k313b@top-level-expander) (set! k313d@rp (k2a09@k28e4@make-record-printer 'env (lambda (k4884@x k4885@p k4886@wr) (display '"#<environment>" k4885@p)))) (set! k4bd2@k313d@rp k313d@rp) (set! k3147@env? (lambda (k488a@x) (and (simple-struct? k488a@x) (eq? (simple-struct-name k488a@x) 'env)))) (set! k4bd3@k3147@env? k3147@env?) (set! k3149@env-names (lambda (k488c@x) (simple-struct-ref k488c@x '0))) (set! k4bd4@k3149@env-names k3149@env-names) (set! k314b@set-env-names! (lambda (k488e@x k488f@val) (simple-struct-set! k488e@x '0 k488f@val))) (set! k4bd5@k314b@set-env-names! k314b@set-env-names!) (set! k314d@env-labels (lambda (k4892@x) (simple-struct-ref k4892@x '1))) (set! k4bd6@k314d@env-labels k314d@env-labels) (set! k314f@set-env-labels! (lambda (k4894@x k4895@val) (simple-struct-set! k4894@x '1 k4895@val))) (set! k4bd7@k314f@set-env-labels! k314f@set-env-labels!) (set! k3151@env-itc (lambda (k4898@x) (simple-struct-ref k4898@x '2))) (set! k4bd8@k3151@env-itc k3151@env-itc) (set! k3153@set-env-itc! (lambda (k489a@x k489b@val) (simple-struct-set! k489a@x '2 k489b@val))) (set! k4bd9@k3153@set-env-itc! k3153@set-env-itc!) (set! k3155@dummy '3) (set! k4bda@k3155@dummy k3155@dummy) (set! k3157@rp (k2a09@k28e4@make-record-printer 'interaction-env (lambda (k489e@x k489f@p k48a0@wr) (display '"#<environment>" k489f@p)))) (set! k4bdb@k3157@rp k3157@rp) (set! k3161@interaction-env? (lambda (k48a4@x) (and (simple-struct? k48a4@x) (eq? (simple-struct-name k48a4@x) 'interaction-env)))) (set! k4bdc@k3161@interaction-env? k3161@interaction-env?) (set! k3163@interaction-env-rib (lambda (k48a6@x) (simple-struct-ref k48a6@x '0))) (set! k4bdd@k3163@interaction-env-rib k3163@interaction-env-rib) (set! k3165@set-interaction-env-rib! (lambda (k48a8@x k48a9@val) (simple-struct-set! k48a8@x '0 k48a9@val))) (set! k4bde@k3165@set-interaction-env-rib! k3165@set-interaction-env-rib!) (set! k3167@interaction-env-r (lambda (k48ac@x) (simple-struct-ref k48ac@x '1))) (set! k4bdf@k3167@interaction-env-r k3167@interaction-env-r) (set! k3169@set-interaction-env-r! (lambda (k48ae@x k48af@val) (simple-struct-set! k48ae@x '1 k48af@val))) (set! k4be0@k3169@set-interaction-env-r! k3169@set-interaction-env-r!) (set! k316b@interaction-env-locs (lambda (k48b2@x) (simple-struct-ref k48b2@x '2))) (set! k4be1@k316b@interaction-env-locs k316b@interaction-env-locs) (set! k316d@set-interaction-env-locs! (lambda (k48b4@x k48b5@val) (simple-struct-set! k48b4@x '2 k48b5@val))) (set! k4be2@k316d@set-interaction-env-locs! k316d@set-interaction-env-locs!) (set! k316f@dummy '3) (set! k4be3@k316f@dummy k316f@dummy) (set! k3171@interaction-environment-symbols (lambda () (k3179@environment-symbols (k31b1@interaction-environment)))) (set! k4be4@k3171@interaction-environment-symbols k3171@interaction-environment-symbols) (set! k3173@environment-bindings (lambda (k48b8@e) (vector->list (vector-map (lambda (k48ba@name k48bb@label) (k3175@parse-binding (cons k48ba@name (k2cd7@k2b24@imported-label->binding k48bb@label)))) (k3149@env-names k48b8@e) (k314d@env-labels k48b8@e))))) (set! k4be5@k3173@environment-bindings k3173@environment-bindings) (set! k3175@parse-binding (lambda (k48be@b) (cons (car k48be@b) (let ((k48c0@t (cadr k48be@b))) (if (memv k48c0@t '(core-prim global)) 'procedure (if (memv k48c0@t '(core-macro macro global-macro)) 'syntax (if (memv k48c0@t '($core-rtd)) 'record (if (eq? (car k48be@b) (cadr k48be@b)) 'syntax 'unknown)))))))) (set! k4be6@k3175@parse-binding k3175@parse-binding) (set! k3177@environment? (lambda (k48c2@x) (or (k3147@env? k48c2@x) (k3161@interaction-env? k48c2@x)))) (set! k4be7@k3177@environment? k3177@environment?) (set! k3179@environment-symbols (lambda (k48c4@x) (if (k3147@env? k48c4@x) (vector->list (k3149@env-names k48c4@x)) (if (k3161@interaction-env? k48c4@x) (map values (k2e5a@rib-sym* (k3163@interaction-env-rib k48c4@x))) (assertion-violation 'environment-symbols '"not an environment" k48c4@x))))) (set! k4be8@k3179@environment-symbols k3179@environment-symbols) (set! k317b@environment (lambda k48c6@imp* (let ((k48c8@itc (k3129@make-collector))) (let ((k48ce@k48cb k312f@imp-collector) (k48cf@k48cd k48c8@itc)) (let ((k48d2@swap (lambda () (let ((k48d4@t (k48ce@k48cb))) (begin (k48ce@k48cb k48cf@k48cd) (set! k48cf@k48cd k48d4@t)))))) (dynamic-wind k48d2@swap (lambda () (call-with-values (lambda () (k3125@parse-import-spec* k48c6@imp*)) (lambda (k48da@k48d7 k48db@k48d9) (let ((k48de@subst-labels k48db@k48d9) (k48df@subst-names k48da@k48d7)) (make-simple-struct 'env '4 (list k48df@subst-names k48de@subst-labels k48c8@itc)))))) k48d2@swap)))))) (set! k4be9@k317b@environment k317b@environment) (set! k317d@null-environment (lambda (k48e2@n) (begin (if (not (eqv? k48e2@n '5)) (assertion-violation 'null-environment '"not 5" k48e2@n) (void)) (k317b@environment '(psyntax null-environment-5))))) (set! k4bea@k317d@null-environment k317d@null-environment) (set! k317f@scheme-report-environment (lambda (k48e4@n) (begin (if (not (eqv? k48e4@n '5)) (assertion-violation 'scheme-report-environment '"not 5" k48e4@n) (void)) (k317b@environment '(psyntax scheme-report-environment-5))))) (set! k4beb@k317f@scheme-report-environment k317f@scheme-report-environment) (set! k3181@expand (lambda (k48e6@x k48e7@env) (if (k3147@env? k48e7@env) (let ((k48ea@rib (k3127@make-top-rib (k3149@env-names k48e7@env) (k314d@env-labels k48e7@env)))) (let ((k48ec@x (make-simple-struct 'stx '5 (list k48e6@x k2e40@top-mark* (list k48ea@rib) '()))) (k48ed@itc (k3151@env-itc k48e7@env)) (k48ee@rtc (k3129@make-collector)) (k48ef@vtc (k3129@make-collector))) (let ((k48f4@x (let ((k4906@k48f7 k31b3@top-level-context) (k4907@k48f9 k312b@inv-collector) (k4908@k48fb k312d@vis-collector) (k4909@k48fd k312f@imp-collector) (k490a@k48ff '#f) (k490b@k4901 k48ee@rtc) (k490c@k4903 k48ef@vtc) (k490d@k4905 k48ed@itc)) (let ((k4916@swap (lambda () (begin (let ((k4918@t (k4906@k48f7))) (begin (k4906@k48f7 k490a@k48ff) (set! k490a@k48ff k4918@t))) (let ((k491a@t (k4907@k48f9))) (begin (k4907@k48f9 k490b@k4901) (set! k490b@k4901 k491a@t))) (let ((k491c@t (k4908@k48fb))) (begin (k4908@k48fb k490c@k4903) (set! k490c@k4903 k491c@t))) (let ((k491e@t (k4909@k48fd))) (begin (k4909@k48fd k490d@k4905) (set! k490d@k4905 k491e@t))))))) (dynamic-wind k4916@swap (lambda () (k30e5@chi-expr k48ec@x '() '())) k4916@swap))))) (begin (k2e78@seal-rib! k48ea@rib) (values k48f4@x (k48ee@rtc)))))) (if (k3161@interaction-env? k48e7@env) (let ((k4920@rib (k3163@interaction-env-rib k48e7@env)) (k4921@r (k3167@interaction-env-r k48e7@env)) (k4922@rtc (k3129@make-collector))) (let ((k4926@x (make-simple-struct 'stx '5 (list k48e6@x k2e40@top-mark* (list k4920@rib) '())))) (call-with-values (lambda () (let ((k493c@k492d k31b3@top-level-context) (k493d@k492f k312b@inv-collector) (k493e@k4931 k312d@vis-collector) (k493f@k4933 k312f@imp-collector) (k4940@k4935 k48e7@env) (k4941@k4937 k4922@rtc) (k4942@k4939 (k3129@make-collector)) (k4943@k493b (k3129@make-collector))) (let ((k494c@swap (lambda () (begin (let ((k494e@t (k493c@k492d))) (begin (k493c@k492d k4940@k4935) (set! k4940@k4935 k494e@t))) (let ((k4950@t (k493d@k492f))) (begin (k493d@k492f k4941@k4937) (set! k4941@k4937 k4950@t))) (let ((k4952@t (k493e@k4931))) (begin (k493e@k4931 k4942@k4939) (set! k4942@k4939 k4952@t))) (let ((k4954@t (k493f@k4933))) (begin (k493f@k4933 k4943@k493b) (set! k4943@k493b k4954@t))))))) (dynamic-wind k494c@swap (lambda () (k3133@chi-interaction-expr k4926@x k4920@rib k4921@r)) k494c@swap)))) (lambda (k4956@k4929 k4957@k492b) (let ((k495a@r^ k4957@k492b) (k495b@e k4956@k4929)) (begin (k3169@set-interaction-env-r! k48e7@env k495a@r^) (values k495b@e (k4922@rtc)))))))) (assertion-violation 'expand '"not an environment" k48e7@env))))) (set! k4bec@k3181@expand k3181@expand) (set! k3183@eval (lambda (k495e@x k495f@env) (begin (if (not (k3177@environment? k495f@env)) (error 'eval '"not an environment" k495f@env) (void)) (call-with-values (lambda () (k3181@expand k495e@x k495f@env)) (lambda (k4966@k4963 k4967@k4965) (let ((k496a@invoke-req* k4967@k4965) (k496b@x k4966@k4963)) (begin (for-each k2cd8@k2b26@invoke-library k496a@invoke-req*) (eval-core (k2a62@k2a1a@expanded->core k496b@x))))))))) (set! k4bed@k3183@eval k3183@eval) (set! k3185@library-expander (lambda k49dc (let ((k49dd (length k49dc))) (if (= k49dd '3) (apply (lambda (k496e@x k496f@filename k4970@verify-name) (letrec* ((k4975@build-visit-code (lambda (k49ca@macro*) (if (null? k49ca@macro*) (k2e22@k2d83@build-void) (k2e21@k2d81@build-sequence '#f (map (lambda (k49cc@x) (let ((k49ce@loc (car k49cc@x)) (k49cf@src (cddr k49cc@x))) (list 'set! k49ce@loc k49cf@src))) k49ca@macro*))))) (k4977@visit! (lambda (k49c2@macro*) (for-each (lambda (k49c4@x) (let ((k49c6@loc (car k49c4@x)) (k49c7@proc (cadr k49c4@x))) (set-symbol-value! k49c6@loc k49c7@proc))) k49c2@macro*)))) (call-with-values (lambda () (k3137@core-library-expander k496e@x k4970@verify-name)) (lambda (k498a@k4979 k498b@k497b k498c@k497d k498d@k497f k498e@k4981 k498f@k4983 k4990@k4985 k4991@k4987 k4992@k4989) (let ((k499c@export-env k4992@k4989) (k499d@export-subst k4991@k4987) (k499e@macro* k4990@k4985) (k499f@invoke-code k498f@k4983) (k49a0@vis* k498e@k4981) (k49a1@inv* k498d@k497f) (k49a2@imp* k498c@k497d) (k49a3@ver k498b@k497b) (k49a4@name k498a@k4979)) (let ((k49ae@id (gensym)) (k49af@name k49a4@name) (k49b0@ver k49a3@ver) (k49b1@imp* (map k2cdc@k2b2e@library-spec k49a2@imp*)) (k49b2@vis* (map k2cdc@k2b2e@library-spec k49a0@vis*)) (k49b3@inv* (map k2cdc@k2b2e@library-spec k49a1@inv*)) (k49b4@visit-proc (lambda () (k4977@visit! k499e@macro*))) (k49b5@invoke-proc (lambda () (eval-core (k2a62@k2a1a@expanded->core k499f@invoke-code)))) (k49b6@visit-code (k4975@build-visit-code k499e@macro*)) (k49b7@invoke-code k499f@invoke-code)) (begin (k2cd6@k2b22@install-library k49ae@id k49af@name k49b0@ver k49b1@imp* k49b2@vis* k49b3@inv* k499d@export-subst k499c@export-env k49b4@visit-proc k49b5@invoke-proc k49b6@visit-code k49b7@invoke-code '#t k496f@filename) (values k49ae@id k49af@name k49b0@ver k49b1@imp* k49b2@vis* k49b3@inv* k49b7@invoke-code k49b6@visit-code k499d@export-subst k499c@export-env)))))))) k49dc) (if (= k49dd '2) (apply (lambda (k49d2@x k49d3@filename) (k3185@library-expander k49d2@x k49d3@filename (lambda (k49d6@x) (values)))) k49dc) (if (= k49dd '1) (apply (lambda (k49d8@x) (k3185@library-expander k49d8@x '#f (lambda (k49da@x) (values)))) k49dc) (error 'apply '"invalid arg count"))))))) (set! k4bee@k3185@library-expander k3185@library-expander) (set! k3187@boot-library-expand (lambda (k49de@x) (call-with-values (lambda () (k3185@library-expander k49de@x)) (lambda (k49f4@k49e1 k49f5@k49e3 k49f6@k49e5 k49f7@k49e7 k49f8@k49e9 k49f9@k49eb k49fa@k49ed k49fb@k49ef k49fc@k49f1 k49fd@k49f3) (let ((k4a08@export-env k49fd@k49f3) (k4a09@export-subst k49fc@k49f1) (k4a0a@visit-code k49fb@k49ef) (k4a0b@invoke-code k49fa@k49ed) (k4a0c@inv* k49f9@k49eb) (k4a0d@vis* k49f8@k49e9) (k4a0e@imp* k49f7@k49e7) (k4a0f@ver k49f6@k49e5) (k4a10@name k49f5@k49e3) (k4a11@id k49f4@k49e1)) (values k4a10@name k4a0b@invoke-code k4a09@export-subst k4a08@export-env)))))) (set! k4bef@k3187@boot-library-expand k3187@boot-library-expand) (set! k3189@rev-map-append (lambda (k4a1c@f k4a1d@ls k4a1e@ac) (if (null? k4a1d@ls) k4a1e@ac (k3189@rev-map-append k4a1c@f (cdr k4a1d@ls) (cons (k4a1c@f (car k4a1d@ls)) k4a1e@ac))))) (set! k4bf0@k3189@rev-map-append k3189@rev-map-append) (set! k318b@build-exports (lambda (k4a22@lex*+loc* k4a23@init*) (k2e21@k2d81@build-sequence '#f (cons (k2e22@k2d83@build-void) (k3189@rev-map-append (lambda (k4a26@x) (list 'set! (cdr k4a26@x) (car k4a26@x))) k4a22@lex*+loc* k4a23@init*))))) (set! k4bf1@k318b@build-exports k318b@build-exports) (set! k318d@make-export-subst (lambda (k4a28@name* k4a29@id*) (map (lambda (k4a2c@name k4a2d@id) (let ((k4a30@label (k2ed2@id->label k4a2d@id))) (begin (if (not k4a30@label) (k31a3@syntax-violation '#f '"cannot export unbound identifier" k4a2d@id) (void)) (cons k4a2c@name k4a30@label)))) k4a28@name* k4a29@id*))) (set! k4bf2@k318d@make-export-subst k318d@make-export-subst) (set! k318f@make-export-env/macros (lambda (k4a32@lex* k4a33@loc* k4a34@r) (letrec* ((k4a39@lookup (lambda (k4a56@x) (let k4a5e@f ((k4a58@x k4a56@x) (k4a59@lex* k4a32@lex*) (k4a5a@loc* k4a33@loc*)) (if (pair? k4a59@lex*) (if (eq? k4a58@x (car k4a59@lex*)) (car k4a5a@loc*) (k4a5e@f k4a58@x (cdr k4a59@lex*) (cdr k4a5a@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let k4a42@f ((k4a3a@r k4a34@r) (k4a3b@env '()) (k4a3c@global* '()) (k4a3d@macro* '())) (if (null? k4a3a@r) (values k4a3b@env k4a3c@global* k4a3d@macro*) (let ((k4a44@x (car k4a3a@r))) (let ((k4a46@label (car k4a44@x)) (k4a47@b (cdr k4a44@x))) (let ((k4a4a@t (k2ed8@binding-type k4a47@b))) (if (memv k4a4a@t '(lexical)) (let ((k4a4c@v (k2eda@binding-value k4a47@b))) (let ((k4a4e@loc (k4a39@lookup (k304d@lexical-var k4a4c@v))) (k4a4f@type (if (k304f@lexical-mutable? k4a4c@v) 'mutable 'global))) (k4a42@f (cdr k4a3a@r) (cons (cons* k4a46@label k4a4f@type k4a4e@loc) k4a3b@env) (cons (cons (k304d@lexical-var k4a4c@v) k4a4e@loc) k4a3c@global*) k4a3d@macro*))) (if (memv k4a4a@t '(local-macro)) (let ((k4a52@loc (gensym))) (k4a42@f (cdr k4a3a@r) (cons (cons* k4a46@label 'global-macro k4a52@loc) k4a3b@env) k4a3c@global* (cons (cons k4a52@loc (k2eda@binding-value k4a47@b)) k4a3d@macro*))) (if (memv k4a4a@t '(local-macro!)) (let ((k4a54@loc (gensym))) (k4a42@f (cdr k4a3a@r) (cons (cons* k4a46@label 'global-macro! k4a54@loc) k4a3b@env) k4a3c@global* (cons (cons k4a54@loc (k2eda@binding-value k4a47@b)) k4a3d@macro*))) (if (memv k4a4a@t '($rtd $module)) (k4a42@f (cdr k4a3a@r) (cons k4a44@x k4a3b@env) k4a3c@global* k4a3d@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (k2ed8@binding-type k4a47@b) (k2eda@binding-value k4a47@b)))))))))))))) (set! k4bf3@k318f@make-export-env/macros k318f@make-export-env/macros) (set! k3191@generate-temporaries (lambda (k4a60@ls) (let ((k4a62@t k4a60@ls)) (let ((k4a64@ls/false (k30c3@syntax-dispatch k4a62@t 'each-any))) (if k4a64@ls/false (apply (lambda (k4a66@ls) (map (lambda (k4a68@x) (make-simple-struct 'stx '5 (list (let ((k4a6a@x (k31a9@syntax->datum k4a68@x))) (if (or (symbol? k4a6a@x) (string? k4a6a@x)) (gensym k4a6a@x) (gensym 't))) k2e40@top-mark* '() '()))) k4a66@ls)) k4a64@ls/false) (let ((k4a6c@t k4a62@t)) (let ((k4a6e@ls/false (k30c3@syntax-dispatch k4a6c@t '_))) (if k4a6e@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) k4a6e@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4a6c@t))))))))) (set! k4bf4@k3191@generate-temporaries k3191@generate-temporaries) (set! k3193@free-identifier=? (lambda (k4a70@x k4a71@y) (if (k2ebc@id? k4a70@x) (if (k2ebc@id? k4a71@y) (k2ec2@free-id=? k4a70@x k4a71@y) (assertion-violation 'free-identifier=? '"not an identifier" k4a71@y)) (assertion-violation 'free-identifier=? '"not an identifier" k4a70@x)))) (set! k4bf5@k3193@free-identifier=? k3193@free-identifier=?) (set! k3195@bound-identifier=? (lambda (k4a74@x k4a75@y) (if (k2ebc@id? k4a74@x) (if (k2ebc@id? k4a75@y) (k2ec0@bound-id=? k4a74@x k4a75@y) (assertion-violation 'bound-identifier=? '"not an identifier" k4a75@y)) (assertion-violation 'bound-identifier=? '"not an identifier" k4a74@x)))) (set! k4bf6@k3195@bound-identifier=? k3195@bound-identifier=?) (set! k3197@make-source-condition (lambda (k4a78@x) (letrec* ((k4a82@k4a7d (make-record-type-descriptor '&source-information &condition-rtd 'k4a80 '#f '#f '#((immutable file-name) (immutable line)))) (k4a84@k4a7f '#f) (k4a86@k4a7e (make-record-constructor-descriptor k4a82@k4a7d &condition-rcd k4a84@k4a7f)) (k4a89@k4a7c (record-predicate k4a82@k4a7d)) (k4a8b@make-source-condition (record-constructor k4a86@k4a7e)) (k4a8d@k4a7a (record-accessor k4a82@k4a7d '0)) (k4a8f@k4a7b (record-accessor k4a82@k4a7d '1)) (k4a91@source-condition? (condition-predicate k4a82@k4a7d)) (k4a93@source-filename (condition-accessor k4a82@k4a7d k4a8d@k4a7a)) (k4a95@source-character (condition-accessor k4a82@k4a7d k4a8f@k4a7b))) (if (and (pair? k4a78@x) (pair? (cdr k4a78@x))) (k4a8b@make-source-condition (car k4a78@x) (cadr k4a78@x)) (condition))))) (set! k4bf7@k3197@make-source-condition k3197@make-source-condition) (set! k3199@extract-position-condition (lambda (k4a96@x) (k3197@make-source-condition (k319b@expression-position k4a96@x)))) (set! k4bf8@k3199@extract-position-condition k3199@extract-position-condition) (set! k319b@expression-position (lambda (k4a98@x) (and (k2e88@stx? k4a98@x) (let ((k4a9a@x (k2e8a@stx-expr k4a98@x))) (and (k2a00@k28d2@annotation? k4a9a@x) (k2a01@k28d4@annotation-source k4a9a@x)))))) (set! k4bf9@k319b@expression-position k319b@expression-position) (set! k319d@assertion-error (lambda (k4a9c@expr k4a9d@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list k4a9c@expr)) (k3197@make-source-condition k4a9d@pos))))) (set! k4bfa@k319d@assertion-error k319d@assertion-error) (set! k319f@syntax-error (lambda (k4aa0@x . k4aa2@args) (begin (if (not (for-all string? k4aa2@args)) (assertion-violation 'syntax-error '"invalid argument" k4aa2@args) (void)) (raise (condition (make-message-condition (if (null? k4aa2@args) '"invalid syntax" (apply string-append k4aa2@args))) (make-syntax-violation (k31a9@syntax->datum k4aa0@x) '#f) (k3199@extract-position-condition k4aa0@x)))))) (set! k4bfb@k319f@syntax-error k319f@syntax-error) (set! k31a1@syntax-violation* (lambda (k4aa4@who k4aa5@msg k4aa6@form k4aa7@condition-object) (begin (if (not (string? k4aa5@msg)) (assertion-violation 'syntax-violation '"message is not a string" k4aa5@msg) (void)) (let ((k4aac@who (if (or (string? k4aa4@who) (symbol? k4aa4@who)) k4aa4@who (if (not k4aa4@who) (let ((k4aae@t k4aa6@form)) (let ((k4ab0@ls/false (k30c3@syntax-dispatch k4aae@t 'any))) (if (and k4ab0@ls/false (apply (lambda (k4ab2@id) (k2ebc@id? k4ab2@id)) k4ab0@ls/false)) (apply (lambda (k4ab4@id) (k31a9@syntax->datum k4ab4@id)) k4ab0@ls/false) (let ((k4ab6@t k4aae@t)) (let ((k4ab8@ls/false (k30c3@syntax-dispatch k4ab6@t '(any . any)))) (if (and k4ab8@ls/false (apply (lambda (k4aba@id k4abb@rest) (k2ebc@id? k4aba@id)) k4ab8@ls/false)) (apply (lambda (k4abe@id k4abf@rest) (k31a9@syntax->datum k4abe@id)) k4ab8@ls/false) (let ((k4ac2@t k4ab6@t)) (let ((k4ac4@ls/false (k30c3@syntax-dispatch k4ac2@t '_))) (if k4ac4@ls/false (apply (lambda () '#f) k4ac4@ls/false) (k31a3@syntax-violation '#f '"invalid syntax" k4ac2@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" k4aa4@who))))) (raise (condition (if k4aac@who (make-who-condition k4aac@who) (condition)) (make-message-condition k4aa5@msg) k4aa7@condition-object (k3199@extract-position-condition k4aa6@form))))))) (set! k4bfc@k31a1@syntax-violation* k31a1@syntax-violation*) (set! k31a3@syntax-violation (lambda k4ad4 (let ((k4ad5 (length k4ad4))) (if (= k4ad5 '3) (apply (lambda (k4ac6@who k4ac7@msg k4ac8@form) (k31a3@syntax-violation k4ac6@who k4ac7@msg k4ac8@form '#f)) k4ad4) (if (= k4ad5 '4) (apply (lambda (k4acc@who k4acd@msg k4ace@form k4acf@subform) (k31a1@syntax-violation* k4acc@who k4acd@msg k4ace@form (make-syntax-violation (k31a9@syntax->datum k4ace@form) (k31a9@syntax->datum k4acf@subform)))) k4ad4) (error 'apply '"invalid arg count")))))) (set! k4bfd@k31a3@syntax-violation k31a3@syntax-violation) (set! k31a5@identifier? (lambda (k4ad6@x) (k2ebc@id? k4ad6@x))) (set! k4bfe@k31a5@identifier? k31a5@identifier?) (set! k31a7@datum->syntax (lambda (k4ad8@id k4ad9@datum) (if (k2ebc@id? k4ad8@id) (k2e9c@datum->stx k4ad8@id k4ad9@datum) (assertion-violation 'datum->syntax '"not an identifier" k4ad8@id)))) (set! k4bff@k31a7@datum->syntax k31a7@datum->syntax) (set! k31a9@syntax->datum (lambda (k4adc@x) (k2ed0@stx->datum k4adc@x))) (set! k4c00@k31a9@syntax->datum k31a9@syntax->datum) (set! k31ab@ungensym-all (lambda (k4ade@code) (if (pair? k4ade@code) (cons (k31ab@ungensym-all (car k4ade@code)) (k31ab@ungensym-all (cdr k4ade@code))) (if (symbol? k4ade@code) (ungensym k4ade@code) k4ade@code)))) (set! k4c01@k31ab@ungensym-all k31ab@ungensym-all) (set! k31ad@compile-r6rs-top-level (lambda (k4ae0@x*) (call-with-values (lambda () (k313b@top-level-expander k4ae0@x*)) (lambda (k4ae6@k4ae3 k4ae7@k4ae5) (let ((k4aea@invoke-code k4ae7@k4ae5) (k4aeb@lib* k4ae6@k4ae3)) (lambda () (begin (for-each k2cd8@k2b26@invoke-library k4aeb@lib*) (let ((k4aee@expanded (k2a62@k2a1a@expanded->core k4aea@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (k31ab@ungensym-all k4aee@expanded)) (void)) (eval-core k4aee@expanded)))))))))) (set! k4c02@k31ad@compile-r6rs-top-level k31ad@compile-r6rs-top-level) (set! k31af@pre-compile-r6rs-top-level (lambda (k4af0@x*) (call-with-values (lambda () (k313b@top-level-expander k4af0@x*)) (lambda (k4af6@k4af3 k4af7@k4af5) (let ((k4afa@invoke-code k4af7@k4af5) (k4afb@lib* k4af6@k4af3)) (begin (for-each k2cd8@k2b26@invoke-library k4afb@lib*) (k2a0a@k28e6@compile-core (k2a62@k2a1a@expanded->core k4afa@invoke-code)))))))) (set! k4c03@k31af@pre-compile-r6rs-top-level k31af@pre-compile-r6rs-top-level) (set! k31b1@interaction-environment (let ((k4afe@the-env '#f)) (lambda () (or k4afe@the-env (let ((k4b00@lib (k2cd1@k2b18@find-library-by-name '(mosh interaction))) (k4b01@rib (k2e70@make-empty-rib))) (begin (let ((k4b04@subst (k2cb3@k2adc@library-subst k4b00@lib))) (begin (k2e5c@set-rib-sym*! k4b01@rib (map car k4b04@subst)) (k2e60@set-rib-mark**! k4b01@rib (map (lambda (k4b06@x) k2e40@top-mark*) k4b04@subst)) (k2e64@set-rib-label*! k4b01@rib (map cdr k4b04@subst)))) (let ((k4b08@env (make-simple-struct 'interaction-env '4 (list k4b01@rib '() '())))) (begin (set! k4afe@the-env k4b08@env) k4b08@env)))))))) (set! k4c04@k31b1@interaction-environment k31b1@interaction-environment) (set! k31b3@top-level-context (k2a0c@k28ea@make-parameter '#f)) (set! k4c05@k31b3@top-level-context k31b3@top-level-context) (k2cce@k2b12@current-library-expander k3185@library-expander))
(begin (begin (k2a5f@k2a14@current-primitive-locations (lambda (k515b@x) (let ((k515d@t (assq k515b@x '((syntax-error . k4bfb@k319f@syntax-error) (syntax-dispatch . k4b99@k30c3@syntax-dispatch) (load . k4d85@k4c2c@load) (interaction-environment . k4c04@k31b1@interaction-environment) (library-path . k2cc6@k2b02@library-path) (mosh-cache-dir . k2a0d@k28ec@mosh-cache-dir) (make-parameter . k2a0c@k28ea@make-parameter) (make-variable-transformer . k4b56@k2eee@make-variable-transformer) (identifier? . k4bfe@k31a5@identifier?) (generate-temporaries . k4bf4@k3191@generate-temporaries) (free-identifier=? . k4bf5@k3193@free-identifier=?) (syntax->datum . k4c00@k31a9@syntax->datum) (datum->syntax . k4bff@k31a7@datum->syntax) (bound-identifier=? . k4bf6@k3195@bound-identifier=?) (scheme-report-environment . k4beb@k317f@scheme-report-environment) (null-environment . k4bea@k317d@null-environment) (command-line . k4d82@k4c26@command-line) (eval . k4bed@k3183@eval) (environment . k4be9@k317b@environment) (syntax-violation . k4bfd@k31a3@syntax-violation) (assertion-error . k4bfa@k319d@assertion-error))))) (if k515d@t (cdr k515d@t) '#f)))) (k2cd6@k2b22@install-library 'k5138 '(mosh interaction) '() '() '() '() '((regexp? . k50f8) (alist->eq-hash-table . k50f4) (format . k50f1) (string-split . k50e1) (call-process . k50da) (set-current-directory! . k50d6) (expand-path . k50d5) (current-directory . k50d4) (%spawn . k50d3) (%waitpid . k50d2) (simple-struct-name . k50d1) (simple-struct-set! . k50d0) (simple-struct-ref . k50cf) (make-simple-struct . k50ce) (simple-struct? . k50cd) (pointer-ref-c-int64 . k50cc) (pointer-ref-c-int32 . k50cb) (pointer-ref-c-int16 . k50ca) (pointer-ref-c-int8 . k50c9) (pointer-ref-c-uint64 . k50c8) (pointer-ref-c-uint32 . k50c7) (pointer-ref-c-uint16 . k50c6) (pointer-ref-c-uint8 . k50c5) (pointer-set-c-uint64! . k50c4) (pointer-set-c-uint32! . k50c3) (pointer-set-c-uint16! . k50c2) (pointer-set-c-uint8! . k50c1) (pointer-set-c-int64! . k50c0) (pointer-set-c-int32! . k50bf) (pointer-set-c-int16! . k50be) (pointer-set-c-int8! . k50bd) (pointer-set-c-pointer! . k50bc) (pointer-set-c-double! . k50bb) (pointer-set-c-float! . k50ba) (pointer-set-c-long-long! . k50b9) (pointer-set-c-long! . k50b8) (pointer-set-c-int! . k50b7) (pointer-set-c-short! . k50b6) (pointer-set-c-char! . k50b5) (pointer-ref-c-pointer . k50b4) (pointer-ref-c-double . k50b3) (pointer-ref-c-float . k50b2) (pointer-ref-c-unsigned-long-long . k50b1) (pointer-ref-c-signed-long-long . k50b0) (pointer-ref-c-unsigned-long . k50af) (pointer-ref-c-signed-long . k50ae) (pointer-ref-c-unsigned-int . k50ad) (pointer-ref-c-signed-int . k50ac) (pointer-ref-c-unsigned-short . k50ab) (pointer-ref-c-signed-short . k50aa) (pointer-ref-c-unsigned-char . k50a9) (pointer-ref-c-signed-char . k50a8) (pointer->integer . k50a7) (integer->pointer . k50a6) (pointer? . k50a5) (shared-errno . k50a4) (%ffi-supported? . k509f) (%ffi-pointer->string . k509e) (%ffi-call . k509d) (%ffi-lookup . k509c) (%ffi-open . k509b) (null-terminated-utf8->string . k509a) (null-terminated-bytevector->string . k5099) (%exec . k5098) (%fork . k5097) (%pipe . k5096) (p . k5095) (whereis . k5079) (register . k5078) (vm-join! . k5077) (vm-set-value! . k5076) (vm? . k5075) (main-vm? . k5074) (vm-eval . k5073) (vm-self . k5072) (vm-start! . k5071) (make-vm . k5070) (mutex-try-lock! . k506f) (mutex-unlock! . k506e) (mutex-lock! . k506d) (mutex? . k506c) (make-mutex . k506b) (condition-variable-notify-all! . k506a) (condition-variable-notify! . k5069) (condition-variable-wait! . k5068) (make-condition-variable . k5067) (write/ss . k5066) (string-upcase . k504d) (string-titlecase . k504c) (string-normalize-nfkd . k504b) (string-normalize-nfkc . k504a) (string-normalize-nfd . k5049) (string-normalize-nfc . k5048) (string-foldcase . k5047) (string-downcase . k5046) (string-ci>? . k5045) (string-ci>=? . k5044) (string-ci=? . k5043) (string-ci<? . k5042) (string-ci<=? . k5041) (char-whitespace? . k5040) (char-upper-case? . k503f) (char-title-case? . k503e) (char-numeric? . k503d) (char-lower-case? . k503c) (char-general-category . k503b) (char-upcase . k503a) (char-titlecase . k5039) (char-foldcase . k5038) (char-downcase . k5037) (char-ci>? . k5036) (char-ci>=? . k5035) (char-ci=? . k5034) (char-ci<? . k5033) (char-ci<=? . k5032) (char-alphabetic? . k5031) (make-variable-transformer . k2eed) (identifier? . k31a4) (generate-temporaries . k3190) (free-identifier=? . k3192) (syntax->datum . k31a8) (datum->syntax . k31a6) (bound-identifier=? . k3194) (record-type-descriptor? . k5030) (record-predicate . k502f) (record-mutator . k502e) (record-constructor . k502d) (record-accessor . k502c) (make-record-type-descriptor . k502b) (make-record-constructor-descriptor . k502a) (record? . k5029) (record-type-uid . k5028) (record-type-sealed? . k5027) (record-type-parent . k5026) (record-type-opaque? . k5025) (record-type-name . k5024) (record-type-generative? . k5023) (record-type-field-names . k5022) (record-rtd . k5021) (record-field-mutable? . k5020) (delete-file . k501f) (file-exists? . k501e) (vector-sort! . k501d) (vector-sort . k501c) (list-sort . k501b) (symbol-hash . k501a) (string-ci-hash . k5019) (string-hash . k5018) (equal-hash . k5017) (hashtable-equivalence-function . k5016) (make-hashtable . k5015) (hashtable-hash-function . k5014) (make-eqv-hashtable . k5013) (make-eq-hashtable . k5012) (hashtable? . k5011) (hashtable-update! . k5010) (hashtable-size . k500f) (hashtable-set! . k500e) (hashtable-ref . k500d) (hashtable-mutable? . k500c) (hashtable-keys . k500b) (hashtable-entries . k500a) (hashtable-delete! . k5009) (hashtable-copy . k5008) (hashtable-contains? . k5007) (hashtable-clear! . k5006) (call-with-output-file . k5005) (call-with-input-file . k5004) (write-char . k5003) (write . k5002) (with-output-to-file . k5001) (with-input-from-file . k5000) (read-char . k4fff) (read . k4ffe) (peek-char . k4ffd) (open-output-file . k4ffc) (open-input-file . k4ffb) (newline . k4ffa) (display . k4ff9) (close-output-port . k4ff8) (close-input-port . k4ff7) (eof-object? . k4ff6) (eof-object . k4ff5) (current-error-port . k4ff4) (current-output-port . k4ff3) (current-input-port . k4ff2) (output-port? . k4ff1) (input-port? . k4ff0) (utf-8-codec . k4fef) (utf-16-codec . k4fee) (transcoder-error-handling-mode . k4fed) (transcoder-eol-style . k4fec) (transcoder-codec . k4feb) (transcoded-port . k4fea) (textual-port? . k4fe9) (string->bytevector . k4fe8) (standard-output-port . k4fe7) (standard-input-port . k4fe6) (standard-error-port . k4fe5) (set-port-position! . k4fe4) (put-u8 . k4fe3) (put-string . k4fe2) (put-datum . k4fe1) (put-char . k4fe0) (put-bytevector . k4fdf) (port? . k4fde) (port-transcoder . k4fdd) (port-position . k4fdc) (port-has-set-port-position!? . k4fdb) (port-has-port-position? . k4fda) (port-eof? . k4fd9) (output-port-buffer-mode . k4fd8) (open-string-output-port . k4fd7) (open-string-input-port . k4fd6) (open-file-output-port . k4fd5) (open-file-input/output-port . k4fd4) (open-file-input-port . k4fd3) (open-bytevector-output-port . k4fd2) (open-bytevector-input-port . k4fd1) (native-transcoder . k4fd0) (native-eol-style . k4fcf) (make-transcoder . k4fce) (latin-1-codec . k4fcd) (make-i/o-write-error . k4fcc) (make-i/o-read-error . k4fcb) (make-i/o-port-error . k4fca) (make-i/o-invalid-position-error . k4fc9) (make-i/o-filename-error . k4fc8) (make-i/o-file-protection-error . k4fc7) (make-i/o-file-is-read-only-error . k4fc6) (make-i/o-file-does-not-exist-error . k4fc5) (make-i/o-file-already-exists-error . k4fc4) (make-i/o-error . k4fc3) (make-i/o-encoding-error . k4fc2) (make-i/o-decoding-error . k4fc1) (make-custom-textual-output-port . k4fc0) (make-custom-textual-input/output-port . k4fbf) (make-custom-textual-input-port . k4fbe) (make-custom-binary-output-port . k4fbd) (make-custom-binary-input/output-port . k4fbc) (make-custom-binary-input-port . k4fbb) (make-bytevector . k4fba) (lookahead-u8 . k4fb9) (lookahead-char . k4fb8) (i/o-write-error? . k4fb7) (i/o-read-error? . k4fb6) (i/o-port-error? . k4fb5) (i/o-invalid-position-error? . k4fb4) (i/o-filename-error? . k4fb3) (i/o-file-protection-error? . k4fb2) (i/o-file-is-read-only-error? . k4fb1) (i/o-file-does-not-exist-error? . k4fb0) (i/o-file-already-exists-error? . k4faf) (i/o-error? . k4fae) (i/o-error-position . k4fad) (i/o-error-port . k4fac) (i/o-error-filename . k4fab) (i/o-encoding-error? . k4faa) (i/o-encoding-error-char . k4fa9) (i/o-decoding-error? . k4fa8) (get-u8 . k4fa7) (get-string-n! . k4fa6) (get-string-n . k4fa5) (get-string-all . k4fa4) (get-line . k4fa3) (get-datum . k4fa2) (get-char . k4fa1) (get-bytevector-some . k4fa0) (get-bytevector-n! . k4f9f) (get-bytevector-n . k4f9e) (get-bytevector-all . k4f9d) (flush-output-port . k4f9c) (close-port . k4f9b) (exit . k4f93) (command-line . k4c25) (string-fill! . k4f92) (string-set! . k4f91) (set-cdr! . k4f90) (set-car! . k4f8f) (remove . k4f8e) (remv . k4f8d) (remp . k4f8c) (remq . k4f8b) (partition . k4f8a) (memv . k4f89) (memq . k4f88) (memp . k4f87) (member . k4f86) (exists . k4f85) (for-all . k4f84) (fold-right . k4f83) (fold-left . k4f82) (find . k4f81) (filter . k4f80) (cons* . k4f7f) (assv . k4f7e) (assq . k4f7d) (assp . k4f7c) (assoc . k4f7b) (call-with-string-output-port . k4f7a) (call-with-port . k4f79) (call-with-bytevector-output-port . k4f78) (bytevector->string . k4f77) (buffer-mode? . k4f76) (binary-port? . k4f75) (with-exception-handler . k4f74) (raise-continuable . k4f73) (raise . k4f72) (eval . k3182) (environment . k317a) (make-enumeration . k4f71) (enum-set=? . k4f70) (enum-set-universe . k4f6f) (enum-set-union . k4f6e) (enum-set-subset? . k4f6d) (enum-set-projection . k4f6c) (enum-set-member? . k4f6b) (enum-set-intersection . k4f6a) (enum-set-indexer . k4f69) (enum-set-difference . k4f68) (enum-set-constructor . k4f67) (enum-set-complement . k4f66) (enum-set->list . k4f65) (who-condition? . k4f64) (warning? . k4f63) (violation? . k4f62) (undefined-violation? . k4f61) (syntax-violation? . k4f60) (syntax-violation-subform . k4f5f) (syntax-violation-form . k4f5e) (syntax-violation . k31a2) (simple-conditions . k4f5d) (serious-condition? . k4f5c) (non-continuable-violation? . k4f5b) (message-condition? . k4f5a) (make-who-condition . k4f59) (make-warning . k4f58) (make-violation . k4f57) (make-undefined-violation . k4f56) (make-syntax-violation . k4f55) (make-serious-condition . k4f54) (make-non-continuable-violation . k4f53) (make-message-condition . k4f52) (make-lexical-violation . k4f51) (make-irritants-condition . k4f50) (make-implementation-restriction-violation . k4f4f) (make-error . k4f4e) (make-assertion-violation . k4f4d) (lexical-violation? . k4f4c) (irritants-condition? . k4f4b) (implementation-restriction-violation? . k4f4a) (error? . k4f49) (condition-who . k4f48) (condition-predicate . k4f47) (condition-message . k4f46) (condition-irritants . k4f45) (condition-accessor . k4f44) (condition . k4f43) (assertion-violation? . k4f42) (condition? . k4f41) (utf32->string . k4f40) (utf16->string . k4f3f) (utf8->string . k4f3e) (uint-list->bytevector . k4f3d) (u8-list->bytevector . k4f3c) (string->utf8 . k4f3b) (string->utf32 . k4f3a) (string->utf16 . k4f39) (sint-list->bytevector . k4f38) (native-endianness . k4f37) (bytevector? . k4f36) (bytevector=? . k4f35) (bytevector-uint-set! . k4f34) (bytevector-uint-ref . k4f33) (bytevector-u8-set! . k4f32) (bytevector-u8-ref . k4f31) (bytevector-u64-set! . k4f30) (bytevector-u64-ref . k4f2f) (bytevector-u64-native-set! . k4f2e) (bytevector-u64-native-ref . k4f2d) (bytevector-u32-set! . k4f2c) (bytevector-u32-ref . k4f2b) (bytevector-u32-native-set! . k4f2a) (bytevector-u32-native-ref . k4f29) (bytevector-u16-set! . k4f28) (bytevector-u16-ref . k4f27) (bytevector-u16-native-set! . k4f26) (bytevector-u16-native-ref . k4f25) (bytevector-sint-set! . k4f24) (bytevector-sint-ref . k4f23) (bytevector-s8-set! . k4f22) (bytevector-s8-ref . k4f21) (bytevector-s64-set! . k4f20) (bytevector-s64-ref . k4f1f) (bytevector-s64-native-set! . k4f1e) (bytevector-s64-native-ref . k4f1d) (bytevector-s32-set! . k4f1c) (bytevector-s32-ref . k4f1b) (bytevector-s32-native-set! . k4f1a) (bytevector-s32-native-ref . k4f19) (bytevector-s16-set! . k4f18) (bytevector-s16-ref . k4f17) (bytevector-s16-native-set! . k4f16) (bytevector-s16-native-ref . k4f15) (bytevector-length . k4f14) (bytevector-ieee-single-ref . k4f13) (bytevector-ieee-single-set! . k4f12) (bytevector-ieee-single-native-set! . k4f11) (bytevector-ieee-single-native-ref . k4f10) (bytevector-ieee-double-set! . k4f0f) (bytevector-ieee-double-ref . k4f0e) (bytevector-ieee-double-native-set! . k4f0d) (bytevector-ieee-double-native-ref . k4f0c) (bytevector-fill! . k4f0b) (bytevector-copy! . k4f0a) (bytevector-copy . k4f09) (bytevector->uint-list . k4f08) (bytevector->u8-list . k4f07) (bytevector->sint-list . k4f06) (no-nans-violation? . k4f05) (no-infinities-violation? . k4f04) (make-no-nans-violation . k4f03) (make-no-infinities-violation . k4f02) (real->flonum . k4f01) (flzero? . k4f00) (fltruncate . k4eff) (fltan . k4efe) (flsqrt . k4efd) (flsin . k4efc) (flround . k4efb) (flpositive? . k4efa) (flonum? . k4ef9) (flodd? . k4ef8) (flnumerator . k4ef7) (flnegative? . k4ef6) (flnan? . k4ef5) (flmod0 . k4ef4) (flmod . k4ef3) (flmin . k4ef2) (flmax . k4ef1) (fllog . k4ef0) (flinteger? . k4eef) (flinfinite? . k4eee) (flfloor . k4eed) (flfinite? . k4eec) (flexpt . k4eeb) (flexp . k4eea) (fleven? . k4ee9) (fldiv0-and-mod0 . k4ee8) (fldiv0 . k4ee7) (fldiv-and-mod . k4ee6) (fldiv . k4ee5) (fldenominator . k4ee4) (flcos . k4ee3) (flceiling . k4ee2) (flatan . k4ee1) (flasin . k4ee0) (flacos . k4edf) (flabs . k4ede) (fl>? . k4edd) (fl>=? . k4edc) (fl=? . k4edb) (fl<? . k4eda) (fl<=? . k4ed9) (fl/ . k4ed8) (fl- . k4ed7) (fl+ . k4ed6) (fl* . k4ed5) (fixnum->flonum . k4ed4) (fxzero? . k4ed3) (fxxor . k4ed2) (fxrotate-bit-field . k4ed1) (fxreverse-bit-field . k4ed0) (fxpositive? . k4ecf) (fxodd? . k4ece) (fxnot . k4ecd) (fxnegative? . k4ecc) (fxmod0 . k4ecb) (fxmod . k4eca) (fxmin . k4ec9) (fxmax . k4ec8) (fxlength . k4ec7) (fxior . k4ec6) (fxif . k4ec5) (fxfirst-bit-set . k4ec4) (fxeven? . k4ec3) (fxdiv0-and-mod0 . k4ec2) (fxdiv0 . k4ec1) (fxdiv-and-mod . k4ec0) (fxdiv . k4ebf) (fxcopy-bit-field . k4ebe) (fxcopy-bit . k4ebd) (fxbit-set? . k4ebc) (fxbit-field . k4ebb) (fxbit-count . k4eba) (fxarithmetic-shift-right . k4eb9) (fxarithmetic-shift-left . k4eb8) (fxarithmetic-shift . k4eb7) (fxand . k4eb6) (fx>? . k4eb5) (fx>=? . k4eb4) (fx=? . k4eb3) (fx<? . k4eb2) (fx<=? . k4eb1) (fx-/carry . k4eb0) (fx- . k4eaf) (fx+/carry . k4eae) (fx+ . k4ead) (fx*/carry . k4eac) (fx* . k4eab) (greatest-fixnum . k4eaa) (least-fixnum . k4ea9) (fixnum-width . k4ea8) (fixnum? . k4ea7) (bitwise-rotate-bit-field . k4ea6) (bitwise-reverse-bit-field . k4ea5) (bitwise-length . k4ea4) (bitwise-if . k4ea3) (bitwise-first-bit-set . k4ea2) (bitwise-copy-bit-field . k4ea1) (bitwise-copy-bit . k4ea0) (bitwise-bit-set? . k4e9f) (bitwise-bit-field . k4e9e) (bitwise-bit-count . k4e9d) (bitwise-xor . k4e9c) (bitwise-ior . k4e9b) (bitwise-and . k4e9a) (bitwise-not . k4e99) (bitwise-arithmetic-shift-right . k4e98) (bitwise-arithmetic-shift-left . k4e97) (bitwise-arithmetic-shift . k4e96) (zero? . k4e95) (vector? . k4e94) (vector-set! . k4e93) (vector-ref . k4e92) (vector-map . k4e91) (vector-length . k4e90) (vector-for-each . k4e8f) (vector-fill! . k4e8e) (vector->list . k4e8d) (vector . k4e8c) (values . k4e8b) (truncate . k4e8a) (tan . k4e89) (symbol? . k4e88) (symbol=? . k4e87) (symbol->string . k4e86) (substring . k4e85) (string? . k4e84) (string>? . k4e83) (string>=? . k4e82) (string=? . k4e81) (string<? . k4e80) (string<=? . k4e7f) (string-ref . k4e7e) (string-length . k4e7d) (string-for-each . k4e7c) (string-copy . k4e7b) (string-append . k4e7a) (string->symbol . k4e79) (string->number . k4e78) (string->list . k4e77) (string . k4e76) (sqrt . k4e75) (sin . k4e74) (round . k4e73) (reverse . k4e72) (real? . k4e71) (real-valued? . k4e70) (real-part . k4e6f) (rationalize . k4e6e) (rational? . k4e6d) (rational-valued? . k4e6c) (procedure? . k4e6b) (positive? . k4e6a) (pair? . k4e69) (odd? . k4e68) (numerator . k4e67) (number? . k4e66) (number->string . k4e65) (null? . k4e64) (not . k4e63) (negative? . k4e62) (nan? . k4e61) (min . k4e60) (max . k4e5f) (map . k4e5e) (make-vector . k4e5d) (make-string . k4e5c) (make-rectangular . k4e5b) (make-polar . k4e5a) (magnitude . k4e59) (log . k4e58) (list? . k4e57) (list-tail . k4e56) (list-ref . k4e55) (list->vector . k4e54) (list->string . k4e53) (list . k4e52) (length . k4e51) (lcm . k4e50) (integer? . k4e4f) (integer-valued? . k4e4e) (integer->char . k4e4d) (infinite? . k4e4c) (inexact? . k4e4b) (inexact . k4e4a) (imag-part . k4e49) (gcd . k4e48) (for-each . k4e47) (floor . k4e46) (finite? . k4e45) (expt . k4e44) (exp . k4e43) (exact? . k4e42) (exact-integer-sqrt . k4e41) (exact . k4e40) (even? . k4e3f) (error . k4e3e) (eqv? . k4e3d) (equal? . k4e3c) (eq? . k4e3b) (dynamic-wind . k4e3a) (div0-and-mod0 . k4e39) (mod0 . k4e38) (div0 . k4e37) (div-and-mod . k4e36) (mod . k4e35) (div . k4e34) (denominator . k4e33) (cos . k4e32) (cons . k4e31) (complex? . k4e30) (char? . k4e2f) (char>? . k4e2e) (char>=? . k4e2d) (char=? . k4e2c) (char<? . k4e2b) (char<=? . k4e2a) (char->integer . k4e29) (ceiling . k4e28) (call-with-values . k4e27) (call/cc . k4e26) (call-with-current-continuation . k4e25) (cddddr . k4e24) (cdddar . k4e23) (cddadr . k4e22) (cddaar . k4e21) (cdaddr . k4e20) (cdadar . k4e1f) (cdaadr . k4e1e) (cdaaar . k4e1d) (cadddr . k4e1c) (caddar . k4e1b) (cadadr . k4e1a) (cadaar . k4e19) (caaddr . k4e18) (caadar . k4e17) (caaadr . k4e16) (caaaar . k4e15) (cdddr . k4e14) (cddar . k4e13) (cdadr . k4e12) (cdaar . k4e11) (caddr . k4e10) (cadar . k4e0f) (caadr . k4e0e) (caaar . k4e0d) (cddr . k4e0c) (cdar . k4e0b) (cadr . k4e0a) (caar . k4e09) (cdr . k4e08) (car . k4e07) (boolean? . k4e06) (boolean=? . k4e05) (atan . k4e04) (assertion-violation . k4e03) (asin . k4e02) (apply . k4e01) (append . k4e00) (angle . k4dff) (acos . k4dfe) (abs . k4dfd) (/ . k4dfc) (* . k4dfb) (- . k4dfa) (+ . k4df9) (>= . k4df8) (> . k4df7) (= . k4df6) (<= . k4df5) (< . k4df4) (library . k4df3) (&no-nans . k4df2) (&no-infinities . k4df1) (&i/o-encoding . k4df0) (&i/o-decoding . k4def) (&i/o-port . k4dee) (&i/o-file-does-not-exist . k4ded) (&i/o-file-already-exists . k4dec) (&i/o-file-is-read-only . k4deb) (&i/o-file-protection . k4dea) (&i/o-filename . k4de9) (&i/o-invalid-position . k4de8) (&i/o-write . k4de7) (&i/o-read . k4de6) (&i/o . k4de5) (&undefined . k4de4) (&syntax . k4de3) (&lexical . k4de2) (&implementation-restriction . k4de1) (&non-continuable . k4de0) (&who . k4ddf) (&irritants . k4dde) (&assertion . k4ddd) (&violation . k4ddc) (&error . k4ddb) (&serious . k4dda) (&warning . k4dd9) (&message . k4dd8) (&condition . k4dd7) (define-condition-type . k4dd6) (define-enumeration . k4dd5) (define-record-type . k4dd4) (parent-rtd . k4dd3) (nongenerative . k4dd2) (opaque . k4dd1) (sealed . k4dd0) (protocol . k4dcf) (parent . k4dce) (immutable . k4dcd) (mutable . k4dcc) (fields . k4dcb) (error-handling-mode . k4dca) (file-options . k4dc9) (buffer-mode . k4dc8) (eol-style . k4dc7) (guard . k4dc6) (unsyntax-splicing . k4dc3) (unsyntax . k4dc2) (unquote-splicing . k4dc1) (unquote . k4dc0) (_ . k4dbf) (else . k4dbe) (=> . k4dbd) (... . k4dbc) (assert . k4dbb) (endianness . k4dba) (time . k4db8) (do . k4db7) (cond . k4db6) (let* . k4db5) (let*-values . k4db4) (let-values . k4db3) (identifier-syntax . k4db2) (with-syntax . k4db1) (quasisyntax . k4db0) (quasiquote . k4daf) (syntax-rules . k4dae) (include . k4dad) (record-constructor-descriptor . k4dab) (record-type-descriptor . k4daa) (case . k4da9) (unless . k4da7) (when . k4da6) (or . k4da5) (and . k4da4) (if . k4da3) (let . k4da2) (letrec* . k4da1) (letrec . k4da0) (case-lambda . k4d9e) (lambda . k4d9d) (syntax . k4d9c) (syntax-case . k4d9b) (quote . k4d9a) (letrec-syntax . k4d98) (let-syntax . k4d97) (set! . k4d96) (import . k4d95) (begin . k4d94) (define-syntax . k4d92) (define . k4d91)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5139 '(psyntax null-environment-5) '() '() '() '() '((make-promise . k4f94) (unquote-splicing . k4dc1) (unquote . k4dc0) (_ . k4dbf) (else . k4dbe) (=> . k4dbd) (... . k4dbc) (delay . k4db9) (do . k4db7) (cond . k4db6) (let* . k4db5) (quasiquote . k4daf) (syntax-rules . k4dae) (case . k4da9) (or . k4da5) (and . k4da4) (if . k4da3) (let . k4da2) (letrec . k4da0) (lambda . k4d9d) (quote . k4d9a) (letrec-syntax . k4d98) (let-syntax . k4d97) (set! . k4d96) (begin . k4d94) (define-syntax . k4d92) (define . k4d91)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k513a '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . k5045) (string-ci>=? . k5044) (string-ci=? . k5043) (string-ci<? . k5042) (string-ci<=? . k5041) (char-whitespace? . k5040) (char-upper-case? . k503f) (char-numeric? . k503d) (char-lower-case? . k503c) (char-upcase . k503a) (char-downcase . k5037) (char-ci>? . k5036) (char-ci>=? . k5035) (char-ci=? . k5034) (char-ci<? . k5033) (char-ci<=? . k5032) (char-alphabetic? . k5031) (call-with-output-file . k5005) (call-with-input-file . k5004) (write-char . k5003) (write . k5002) (with-output-to-file . k5001) (with-input-from-file . k5000) (read-char . k4fff) (read . k4ffe) (peek-char . k4ffd) (open-output-file . k4ffc) (open-input-file . k4ffb) (newline . k4ffa) (display . k4ff9) (close-output-port . k4ff8) (close-input-port . k4ff7) (eof-object . k4ff5) (current-output-port . k4ff3) (current-input-port . k4ff2) (output-port? . k4ff1) (input-port? . k4ff0) (scheme-report-environment . k317e) (quotient . k4f9a) (null-environment . k317c) (remainder . k4f99) (modulo . k4f98) (inexact->exact . k4f97) (force . k4f96) (exact->inexact . k4f95) (make-promise . k4f94) (string-fill! . k4f92) (string-set! . k4f91) (set-cdr! . k4f90) (set-car! . k4f8f) (memv . k4f89) (memq . k4f88) (member . k4f86) (assv . k4f7e) (assq . k4f7d) (assoc . k4f7b) (eval . k3182) (zero? . k4e95) (vector? . k4e94) (vector-set! . k4e93) (vector-ref . k4e92) (vector-length . k4e90) (vector-fill! . k4e8e) (vector->list . k4e8d) (vector . k4e8c) (values . k4e8b) (truncate . k4e8a) (tan . k4e89) (symbol? . k4e88) (symbol->string . k4e86) (substring . k4e85) (string? . k4e84) (string>? . k4e83) (string>=? . k4e82) (string=? . k4e81) (string<? . k4e80) (string<=? . k4e7f) (string-ref . k4e7e) (string-length . k4e7d) (string-copy . k4e7b) (string-append . k4e7a) (string->symbol . k4e79) (string->number . k4e78) (string->list . k4e77) (string . k4e76) (sqrt . k4e75) (sin . k4e74) (round . k4e73) (reverse . k4e72) (real? . k4e71) (real-part . k4e6f) (rationalize . k4e6e) (rational? . k4e6d) (procedure? . k4e6b) (positive? . k4e6a) (pair? . k4e69) (odd? . k4e68) (numerator . k4e67) (number? . k4e66) (number->string . k4e65) (not . k4e63) (negative? . k4e62) (min . k4e60) (max . k4e5f) (map . k4e5e) (make-vector . k4e5d) (make-string . k4e5c) (make-rectangular . k4e5b) (make-polar . k4e5a) (magnitude . k4e59) (log . k4e58) (list? . k4e57) (list-tail . k4e56) (list-ref . k4e55) (list->vector . k4e54) (list->string . k4e53) (list . k4e52) (length . k4e51) (lcm . k4e50) (integer? . k4e4f) (integer->char . k4e4d) (inexact? . k4e4b) (imag-part . k4e49) (gcd . k4e48) (for-each . k4e47) (floor . k4e46) (expt . k4e44) (exp . k4e43) (exact? . k4e42) (even? . k4e3f) (eqv? . k4e3d) (equal? . k4e3c) (eq? . k4e3b) (dynamic-wind . k4e3a) (denominator . k4e33) (cos . k4e32) (cons . k4e31) (complex? . k4e30) (char? . k4e2f) (char>? . k4e2e) (char>=? . k4e2d) (char=? . k4e2c) (char<? . k4e2b) (char<=? . k4e2a) (char->integer . k4e29) (ceiling . k4e28) (call-with-values . k4e27) (call-with-current-continuation . k4e25) (cddddr . k4e24) (cdddar . k4e23) (cddadr . k4e22) (cddaar . k4e21) (cdaddr . k4e20) (cdadar . k4e1f) (cdaadr . k4e1e) (cdaaar . k4e1d) (cadddr . k4e1c) (caddar . k4e1b) (cadadr . k4e1a) (cadaar . k4e19) (caaddr . k4e18) (caadar . k4e17) (caaadr . k4e16) (caaaar . k4e15) (cdddr . k4e14) (cddar . k4e13) (cdadr . k4e12) (cdaar . k4e11) (caddr . k4e10) (cadar . k4e0f) (caadr . k4e0e) (caaar . k4e0d) (cddr . k4e0c) (cdar . k4e0b) (cadr . k4e0a) (caar . k4e09) (cdr . k4e08) (car . k4e07) (boolean? . k4e06) (atan . k4e04) (asin . k4e02) (apply . k4e01) (append . k4e00) (angle . k4dff) (acos . k4dfe) (abs . k4dfd) (/ . k4dfc) (* . k4dfb) (- . k4dfa) (+ . k4df9) (>= . k4df8) (> . k4df7) (= . k4df6) (<= . k4df5) (< . k4df4) (unquote-splicing . k4dc1) (unquote . k4dc0) (else . k4dbe) (=> . k4dbd) (... . k4dbc) (delay . k4db9) (do . k4db7) (cond . k4db6) (let* . k4db5) (quasiquote . k4daf) (syntax-rules . k4dae) (case . k4da9) (or . k4da5) (and . k4da4) (if . k4da3) (let . k4da2) (letrec . k4da0) (lambda . k4d9d) (quote . k4d9a) (letrec-syntax . k4d98) (let-syntax . k4d97) (set! . k4d96) (begin . k4d94) (define-syntax . k4d92) (define . k4d91)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k513b '(psyntax modules) '() '() '() '() '((module . k4d93)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k513c '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k513d '(rnrs) '(6) '() '() '() '((regexp? . k50f8) (string-upcase . k504d) (string-titlecase . k504c) (string-normalize-nfkd . k504b) (string-normalize-nfkc . k504a) (string-normalize-nfd . k5049) (string-normalize-nfc . k5048) (string-foldcase . k5047) (string-downcase . k5046) (string-ci>? . k5045) (string-ci>=? . k5044) (string-ci=? . k5043) (string-ci<? . k5042) (string-ci<=? . k5041) (char-whitespace? . k5040) (char-upper-case? . k503f) (char-title-case? . k503e) (char-numeric? . k503d) (char-lower-case? . k503c) (char-general-category . k503b) (char-upcase . k503a) (char-titlecase . k5039) (char-foldcase . k5038) (char-downcase . k5037) (char-ci>? . k5036) (char-ci>=? . k5035) (char-ci=? . k5034) (char-ci<? . k5033) (char-ci<=? . k5032) (char-alphabetic? . k5031) (make-variable-transformer . k2eed) (identifier? . k31a4) (generate-temporaries . k3190) (free-identifier=? . k3192) (syntax->datum . k31a8) (datum->syntax . k31a6) (bound-identifier=? . k3194) (record-type-descriptor? . k5030) (record-predicate . k502f) (record-mutator . k502e) (record-constructor . k502d) (record-accessor . k502c) (make-record-type-descriptor . k502b) (make-record-constructor-descriptor . k502a) (record? . k5029) (record-type-uid . k5028) (record-type-sealed? . k5027) (record-type-parent . k5026) (record-type-opaque? . k5025) (record-type-name . k5024) (record-type-generative? . k5023) (record-type-field-names . k5022) (record-rtd . k5021) (record-field-mutable? . k5020) (delete-file . k501f) (file-exists? . k501e) (vector-sort! . k501d) (vector-sort . k501c) (list-sort . k501b) (symbol-hash . k501a) (string-ci-hash . k5019) (string-hash . k5018) (equal-hash . k5017) (hashtable-equivalence-function . k5016) (make-hashtable . k5015) (hashtable-hash-function . k5014) (make-eqv-hashtable . k5013) (make-eq-hashtable . k5012) (hashtable? . k5011) (hashtable-update! . k5010) (hashtable-size . k500f) (hashtable-set! . k500e) (hashtable-ref . k500d) (hashtable-mutable? . k500c) (hashtable-keys . k500b) (hashtable-entries . k500a) (hashtable-delete! . k5009) (hashtable-copy . k5008) (hashtable-contains? . k5007) (hashtable-clear! . k5006) (call-with-output-file . k5005) (call-with-input-file . k5004) (write-char . k5003) (write . k5002) (with-output-to-file . k5001) (with-input-from-file . k5000) (read-char . k4fff) (read . k4ffe) (peek-char . k4ffd) (open-output-file . k4ffc) (open-input-file . k4ffb) (newline . k4ffa) (display . k4ff9) (close-output-port . k4ff8) (close-input-port . k4ff7) (eof-object? . k4ff6) (eof-object . k4ff5) (current-error-port . k4ff4) (current-output-port . k4ff3) (current-input-port . k4ff2) (output-port? . k4ff1) (input-port? . k4ff0) (utf-8-codec . k4fef) (utf-16-codec . k4fee) (transcoder-error-handling-mode . k4fed) (transcoder-eol-style . k4fec) (transcoder-codec . k4feb) (transcoded-port . k4fea) (textual-port? . k4fe9) (string->bytevector . k4fe8) (standard-output-port . k4fe7) (standard-input-port . k4fe6) (standard-error-port . k4fe5) (set-port-position! . k4fe4) (put-u8 . k4fe3) (put-string . k4fe2) (put-datum . k4fe1) (put-char . k4fe0) (put-bytevector . k4fdf) (port? . k4fde) (port-transcoder . k4fdd) (port-position . k4fdc) (port-has-set-port-position!? . k4fdb) (port-has-port-position? . k4fda) (port-eof? . k4fd9) (output-port-buffer-mode . k4fd8) (open-string-output-port . k4fd7) (open-string-input-port . k4fd6) (open-file-output-port . k4fd5) (open-file-input/output-port . k4fd4) (open-file-input-port . k4fd3) (open-bytevector-output-port . k4fd2) (open-bytevector-input-port . k4fd1) (native-transcoder . k4fd0) (native-eol-style . k4fcf) (make-transcoder . k4fce) (latin-1-codec . k4fcd) (make-i/o-write-error . k4fcc) (make-i/o-read-error . k4fcb) (make-i/o-port-error . k4fca) (make-i/o-invalid-position-error . k4fc9) (make-i/o-filename-error . k4fc8) (make-i/o-file-protection-error . k4fc7) (make-i/o-file-is-read-only-error . k4fc6) (make-i/o-file-does-not-exist-error . k4fc5) (make-i/o-file-already-exists-error . k4fc4) (make-i/o-error . k4fc3) (make-i/o-encoding-error . k4fc2) (make-i/o-decoding-error . k4fc1) (make-custom-textual-output-port . k4fc0) (make-custom-textual-input/output-port . k4fbf) (make-custom-textual-input-port . k4fbe) (make-custom-binary-output-port . k4fbd) (make-custom-binary-input/output-port . k4fbc) (make-custom-binary-input-port . k4fbb) (make-bytevector . k4fba) (lookahead-u8 . k4fb9) (lookahead-char . k4fb8) (i/o-write-error? . k4fb7) (i/o-read-error? . k4fb6) (i/o-port-error? . k4fb5) (i/o-invalid-position-error? . k4fb4) (i/o-filename-error? . k4fb3) (i/o-file-protection-error? . k4fb2) (i/o-file-is-read-only-error? . k4fb1) (i/o-file-does-not-exist-error? . k4fb0) (i/o-file-already-exists-error? . k4faf) (i/o-error? . k4fae) (i/o-error-position . k4fad) (i/o-error-port . k4fac) (i/o-error-filename . k4fab) (i/o-encoding-error? . k4faa) (i/o-encoding-error-char . k4fa9) (i/o-decoding-error? . k4fa8) (get-u8 . k4fa7) (get-string-n! . k4fa6) (get-string-n . k4fa5) (get-string-all . k4fa4) (get-line . k4fa3) (get-datum . k4fa2) (get-char . k4fa1) (get-bytevector-some . k4fa0) (get-bytevector-n! . k4f9f) (get-bytevector-n . k4f9e) (get-bytevector-all . k4f9d) (flush-output-port . k4f9c) (close-port . k4f9b) (exit . k4f93) (command-line . k4c25) (remove . k4f8e) (remv . k4f8d) (remp . k4f8c) (remq . k4f8b) (partition . k4f8a) (memv . k4f89) (memq . k4f88) (memp . k4f87) (member . k4f86) (exists . k4f85) (for-all . k4f84) (fold-right . k4f83) (fold-left . k4f82) (find . k4f81) (filter . k4f80) (cons* . k4f7f) (assv . k4f7e) (assq . k4f7d) (assp . k4f7c) (assoc . k4f7b) (call-with-string-output-port . k4f7a) (call-with-port . k4f79) (call-with-bytevector-output-port . k4f78) (bytevector->string . k4f77) (buffer-mode? . k4f76) (binary-port? . k4f75) (with-exception-handler . k4f74) (raise-continuable . k4f73) (raise . k4f72) (make-enumeration . k4f71) (enum-set=? . k4f70) (enum-set-universe . k4f6f) (enum-set-union . k4f6e) (enum-set-subset? . k4f6d) (enum-set-projection . k4f6c) (enum-set-member? . k4f6b) (enum-set-intersection . k4f6a) (enum-set-indexer . k4f69) (enum-set-difference . k4f68) (enum-set-constructor . k4f67) (enum-set-complement . k4f66) (enum-set->list . k4f65) (who-condition? . k4f64) (warning? . k4f63) (violation? . k4f62) (undefined-violation? . k4f61) (syntax-violation? . k4f60) (syntax-violation-subform . k4f5f) (syntax-violation-form . k4f5e) (syntax-violation . k31a2) (simple-conditions . k4f5d) (serious-condition? . k4f5c) (non-continuable-violation? . k4f5b) (message-condition? . k4f5a) (make-who-condition . k4f59) (make-warning . k4f58) (make-violation . k4f57) (make-undefined-violation . k4f56) (make-syntax-violation . k4f55) (make-serious-condition . k4f54) (make-non-continuable-violation . k4f53) (make-message-condition . k4f52) (make-lexical-violation . k4f51) (make-irritants-condition . k4f50) (make-implementation-restriction-violation . k4f4f) (make-error . k4f4e) (make-assertion-violation . k4f4d) (lexical-violation? . k4f4c) (irritants-condition? . k4f4b) (implementation-restriction-violation? . k4f4a) (error? . k4f49) (condition-who . k4f48) (condition-predicate . k4f47) (condition-message . k4f46) (condition-irritants . k4f45) (condition-accessor . k4f44) (condition . k4f43) (assertion-violation? . k4f42) (condition? . k4f41) (utf32->string . k4f40) (utf16->string . k4f3f) (utf8->string . k4f3e) (uint-list->bytevector . k4f3d) (u8-list->bytevector . k4f3c) (string->utf8 . k4f3b) (string->utf32 . k4f3a) (string->utf16 . k4f39) (sint-list->bytevector . k4f38) (native-endianness . k4f37) (bytevector? . k4f36) (bytevector=? . k4f35) (bytevector-uint-set! . k4f34) (bytevector-uint-ref . k4f33) (bytevector-u8-set! . k4f32) (bytevector-u8-ref . k4f31) (bytevector-u64-set! . k4f30) (bytevector-u64-ref . k4f2f) (bytevector-u64-native-set! . k4f2e) (bytevector-u64-native-ref . k4f2d) (bytevector-u32-set! . k4f2c) (bytevector-u32-ref . k4f2b) (bytevector-u32-native-set! . k4f2a) (bytevector-u32-native-ref . k4f29) (bytevector-u16-set! . k4f28) (bytevector-u16-ref . k4f27) (bytevector-u16-native-set! . k4f26) (bytevector-u16-native-ref . k4f25) (bytevector-sint-set! . k4f24) (bytevector-sint-ref . k4f23) (bytevector-s8-set! . k4f22) (bytevector-s8-ref . k4f21) (bytevector-s64-set! . k4f20) (bytevector-s64-ref . k4f1f) (bytevector-s64-native-set! . k4f1e) (bytevector-s64-native-ref . k4f1d) (bytevector-s32-set! . k4f1c) (bytevector-s32-ref . k4f1b) (bytevector-s32-native-set! . k4f1a) (bytevector-s32-native-ref . k4f19) (bytevector-s16-set! . k4f18) (bytevector-s16-ref . k4f17) (bytevector-s16-native-set! . k4f16) (bytevector-s16-native-ref . k4f15) (bytevector-length . k4f14) (bytevector-ieee-single-ref . k4f13) (bytevector-ieee-single-set! . k4f12) (bytevector-ieee-single-native-set! . k4f11) (bytevector-ieee-single-native-ref . k4f10) (bytevector-ieee-double-set! . k4f0f) (bytevector-ieee-double-ref . k4f0e) (bytevector-ieee-double-native-set! . k4f0d) (bytevector-ieee-double-native-ref . k4f0c) (bytevector-fill! . k4f0b) (bytevector-copy! . k4f0a) (bytevector-copy . k4f09) (bytevector->uint-list . k4f08) (bytevector->u8-list . k4f07) (bytevector->sint-list . k4f06) (no-nans-violation? . k4f05) (no-infinities-violation? . k4f04) (make-no-nans-violation . k4f03) (make-no-infinities-violation . k4f02) (real->flonum . k4f01) (flzero? . k4f00) (fltruncate . k4eff) (fltan . k4efe) (flsqrt . k4efd) (flsin . k4efc) (flround . k4efb) (flpositive? . k4efa) (flonum? . k4ef9) (flodd? . k4ef8) (flnumerator . k4ef7) (flnegative? . k4ef6) (flnan? . k4ef5) (flmod0 . k4ef4) (flmod . k4ef3) (flmin . k4ef2) (flmax . k4ef1) (fllog . k4ef0) (flinteger? . k4eef) (flinfinite? . k4eee) (flfloor . k4eed) (flfinite? . k4eec) (flexpt . k4eeb) (flexp . k4eea) (fleven? . k4ee9) (fldiv0-and-mod0 . k4ee8) (fldiv0 . k4ee7) (fldiv-and-mod . k4ee6) (fldiv . k4ee5) (fldenominator . k4ee4) (flcos . k4ee3) (flceiling . k4ee2) (flatan . k4ee1) (flasin . k4ee0) (flacos . k4edf) (flabs . k4ede) (fl>? . k4edd) (fl>=? . k4edc) (fl=? . k4edb) (fl<? . k4eda) (fl<=? . k4ed9) (fl/ . k4ed8) (fl- . k4ed7) (fl+ . k4ed6) (fl* . k4ed5) (fixnum->flonum . k4ed4) (fxzero? . k4ed3) (fxxor . k4ed2) (fxrotate-bit-field . k4ed1) (fxreverse-bit-field . k4ed0) (fxpositive? . k4ecf) (fxodd? . k4ece) (fxnot . k4ecd) (fxnegative? . k4ecc) (fxmod0 . k4ecb) (fxmod . k4eca) (fxmin . k4ec9) (fxmax . k4ec8) (fxlength . k4ec7) (fxior . k4ec6) (fxif . k4ec5) (fxfirst-bit-set . k4ec4) (fxeven? . k4ec3) (fxdiv0-and-mod0 . k4ec2) (fxdiv0 . k4ec1) (fxdiv-and-mod . k4ec0) (fxdiv . k4ebf) (fxcopy-bit-field . k4ebe) (fxcopy-bit . k4ebd) (fxbit-set? . k4ebc) (fxbit-field . k4ebb) (fxbit-count . k4eba) (fxarithmetic-shift-right . k4eb9) (fxarithmetic-shift-left . k4eb8) (fxarithmetic-shift . k4eb7) (fxand . k4eb6) (fx>? . k4eb5) (fx>=? . k4eb4) (fx=? . k4eb3) (fx<? . k4eb2) (fx<=? . k4eb1) (fx-/carry . k4eb0) (fx- . k4eaf) (fx+/carry . k4eae) (fx+ . k4ead) (fx*/carry . k4eac) (fx* . k4eab) (greatest-fixnum . k4eaa) (least-fixnum . k4ea9) (fixnum-width . k4ea8) (fixnum? . k4ea7) (bitwise-rotate-bit-field . k4ea6) (bitwise-reverse-bit-field . k4ea5) (bitwise-length . k4ea4) (bitwise-if . k4ea3) (bitwise-first-bit-set . k4ea2) (bitwise-copy-bit-field . k4ea1) (bitwise-copy-bit . k4ea0) (bitwise-bit-set? . k4e9f) (bitwise-bit-field . k4e9e) (bitwise-bit-count . k4e9d) (bitwise-xor . k4e9c) (bitwise-ior . k4e9b) (bitwise-and . k4e9a) (bitwise-not . k4e99) (bitwise-arithmetic-shift-right . k4e98) (bitwise-arithmetic-shift-left . k4e97) (bitwise-arithmetic-shift . k4e96) (zero? . k4e95) (vector? . k4e94) (vector-set! . k4e93) (vector-ref . k4e92) (vector-map . k4e91) (vector-length . k4e90) (vector-for-each . k4e8f) (vector-fill! . k4e8e) (vector->list . k4e8d) (vector . k4e8c) (values . k4e8b) (truncate . k4e8a) (tan . k4e89) (symbol? . k4e88) (symbol=? . k4e87) (symbol->string . k4e86) (substring . k4e85) (string? . k4e84) (string>? . k4e83) (string>=? . k4e82) (string=? . k4e81) (string<? . k4e80) (string<=? . k4e7f) (string-ref . k4e7e) (string-length . k4e7d) (string-for-each . k4e7c) (string-copy . k4e7b) (string-append . k4e7a) (string->symbol . k4e79) (string->number . k4e78) (string->list . k4e77) (string . k4e76) (sqrt . k4e75) (sin . k4e74) (round . k4e73) (reverse . k4e72) (real? . k4e71) (real-valued? . k4e70) (real-part . k4e6f) (rationalize . k4e6e) (rational? . k4e6d) (rational-valued? . k4e6c) (procedure? . k4e6b) (positive? . k4e6a) (pair? . k4e69) (odd? . k4e68) (numerator . k4e67) (number? . k4e66) (number->string . k4e65) (null? . k4e64) (not . k4e63) (negative? . k4e62) (nan? . k4e61) (min . k4e60) (max . k4e5f) (map . k4e5e) (make-vector . k4e5d) (make-string . k4e5c) (make-rectangular . k4e5b) (make-polar . k4e5a) (magnitude . k4e59) (log . k4e58) (list? . k4e57) (list-tail . k4e56) (list-ref . k4e55) (list->vector . k4e54) (list->string . k4e53) (list . k4e52) (length . k4e51) (lcm . k4e50) (integer? . k4e4f) (integer-valued? . k4e4e) (integer->char . k4e4d) (infinite? . k4e4c) (inexact? . k4e4b) (inexact . k4e4a) (imag-part . k4e49) (gcd . k4e48) (for-each . k4e47) (floor . k4e46) (finite? . k4e45) (expt . k4e44) (exp . k4e43) (exact? . k4e42) (exact-integer-sqrt . k4e41) (exact . k4e40) (even? . k4e3f) (error . k4e3e) (eqv? . k4e3d) (equal? . k4e3c) (eq? . k4e3b) (dynamic-wind . k4e3a) (div0-and-mod0 . k4e39) (mod0 . k4e38) (div0 . k4e37) (div-and-mod . k4e36) (mod . k4e35) (div . k4e34) (denominator . k4e33) (cos . k4e32) (cons . k4e31) (complex? . k4e30) (char? . k4e2f) (char>? . k4e2e) (char>=? . k4e2d) (char=? . k4e2c) (char<? . k4e2b) (char<=? . k4e2a) (char->integer . k4e29) (ceiling . k4e28) (call-with-values . k4e27) (call/cc . k4e26) (call-with-current-continuation . k4e25) (cddddr . k4e24) (cdddar . k4e23) (cddadr . k4e22) (cddaar . k4e21) (cdaddr . k4e20) (cdadar . k4e1f) (cdaadr . k4e1e) (cdaaar . k4e1d) (cadddr . k4e1c) (caddar . k4e1b) (cadadr . k4e1a) (cadaar . k4e19) (caaddr . k4e18) (caadar . k4e17) (caaadr . k4e16) (caaaar . k4e15) (cdddr . k4e14) (cddar . k4e13) (cdadr . k4e12) (cdaar . k4e11) (caddr . k4e10) (cadar . k4e0f) (caadr . k4e0e) (caaar . k4e0d) (cddr . k4e0c) (cdar . k4e0b) (cadr . k4e0a) (caar . k4e09) (cdr . k4e08) (car . k4e07) (boolean? . k4e06) (boolean=? . k4e05) (atan . k4e04) (assertion-violation . k4e03) (asin . k4e02) (apply . k4e01) (append . k4e00) (angle . k4dff) (acos . k4dfe) (abs . k4dfd) (/ . k4dfc) (* . k4dfb) (- . k4dfa) (+ . k4df9) (>= . k4df8) (> . k4df7) (= . k4df6) (<= . k4df5) (< . k4df4) (&no-nans . k4df2) (&no-infinities . k4df1) (&i/o-encoding . k4df0) (&i/o-decoding . k4def) (&i/o-port . k4dee) (&i/o-file-does-not-exist . k4ded) (&i/o-file-already-exists . k4dec) (&i/o-file-is-read-only . k4deb) (&i/o-file-protection . k4dea) (&i/o-filename . k4de9) (&i/o-invalid-position . k4de8) (&i/o-write . k4de7) (&i/o-read . k4de6) (&i/o . k4de5) (&undefined . k4de4) (&syntax . k4de3) (&lexical . k4de2) (&implementation-restriction . k4de1) (&non-continuable . k4de0) (&who . k4ddf) (&irritants . k4dde) (&assertion . k4ddd) (&violation . k4ddc) (&error . k4ddb) (&serious . k4dda) (&warning . k4dd9) (&message . k4dd8) (&condition . k4dd7) (define-condition-type . k4dd6) (define-enumeration . k4dd5) (define-record-type . k4dd4) (parent-rtd . k4dd3) (nongenerative . k4dd2) (opaque . k4dd1) (sealed . k4dd0) (protocol . k4dcf) (parent . k4dce) (immutable . k4dcd) (mutable . k4dcc) (fields . k4dcb) (error-handling-mode . k4dca) (file-options . k4dc9) (buffer-mode . k4dc8) (eol-style . k4dc7) (guard . k4dc6) (unsyntax-splicing . k4dc3) (unsyntax . k4dc2) (unquote-splicing . k4dc1) (unquote . k4dc0) (_ . k4dbf) (else . k4dbe) (=> . k4dbd) (... . k4dbc) (assert . k4dbb) (endianness . k4dba) (do . k4db7) (cond . k4db6) (let* . k4db5) (let*-values . k4db4) (let-values . k4db3) (identifier-syntax . k4db2) (with-syntax . k4db1) (quasisyntax . k4db0) (quasiquote . k4daf) (syntax-rules . k4dae) (record-constructor-descriptor . k4dab) (record-type-descriptor . k4daa) (case . k4da9) (unless . k4da7) (when . k4da6) (or . k4da5) (and . k4da4) (if . k4da3) (let . k4da2) (letrec* . k4da1) (letrec . k4da0) (case-lambda . k4d9e) (lambda . k4d9d) (syntax . k4d9c) (syntax-case . k4d9b) (quote . k4d9a) (letrec-syntax . k4d98) (let-syntax . k4d97) (set! . k4d96) (begin . k4d94) (define-syntax . k4d92) (define . k4d91)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k513e '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . k317e) (quotient . k4f9a) (null-environment . k317c) (remainder . k4f99) (modulo . k4f98) (inexact->exact . k4f97) (force . k4f96) (exact->inexact . k4f95) (make-promise . k4f94) (delay . k4db9)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k513f '(rnrs control) '(6) '() '() '() '((do . k4db7) (unless . k4da7) (when . k4da6) (case-lambda . k4d9e)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5140 '(rnrs eval) '(6) '() '() '() '((eval . k3182) (environment . k317a)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5141 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . k4f90) (set-car! . k4f8f)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5142 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . k4f92) (string-set! . k4f91)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5143 '(rnrs programs) '(6) '() '() '() '((exit . k4f93) (command-line . k4c25)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5144 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . k2eed) (identifier? . k31a4) (generate-temporaries . k3190) (free-identifier=? . k3192) (syntax->datum . k31a8) (datum->syntax . k31a6) (bound-identifier=? . k3194) (syntax-violation . k31a2) (unsyntax-splicing . k4dc3) (unsyntax . k4dc2) (_ . k4dbf) (... . k4dbc) (with-syntax . k4db1) (quasisyntax . k4db0) (syntax . k4d9c) (syntax-case . k4d9b)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5145 '(rnrs files) '(6) '() '() '() '((delete-file . k501f) (file-exists? . k501e) (make-i/o-write-error . k4fcc) (make-i/o-read-error . k4fcb) (make-i/o-port-error . k4fca) (make-i/o-invalid-position-error . k4fc9) (make-i/o-filename-error . k4fc8) (make-i/o-file-protection-error . k4fc7) (make-i/o-file-is-read-only-error . k4fc6) (make-i/o-file-does-not-exist-error . k4fc5) (make-i/o-file-already-exists-error . k4fc4) (make-i/o-error . k4fc3) (i/o-write-error? . k4fb7) (i/o-read-error? . k4fb6) (i/o-port-error? . k4fb5) (i/o-invalid-position-error? . k4fb4) (i/o-filename-error? . k4fb3) (i/o-file-protection-error? . k4fb2) (i/o-file-is-read-only-error? . k4fb1) (i/o-file-does-not-exist-error? . k4fb0) (i/o-file-already-exists-error? . k4faf) (i/o-error? . k4fae) (i/o-error-position . k4fad) (i/o-error-port . k4fac) (i/o-error-filename . k4fab) (&i/o-port . k4dee) (&i/o-file-does-not-exist . k4ded) (&i/o-file-already-exists . k4dec) (&i/o-file-is-read-only . k4deb) (&i/o-file-protection . k4dea) (&i/o-filename . k4de9) (&i/o-invalid-position . k4de8) (&i/o-write . k4de7) (&i/o-read . k4de6) (&i/o . k4de5)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5146 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . k501d) (vector-sort . k501c) (list-sort . k501b)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5147 '(rnrs base) '(6) '() '() '() '((zero? . k4e95) (vector? . k4e94) (vector-set! . k4e93) (vector-ref . k4e92) (vector-map . k4e91) (vector-length . k4e90) (vector-for-each . k4e8f) (vector-fill! . k4e8e) (vector->list . k4e8d) (vector . k4e8c) (values . k4e8b) (truncate . k4e8a) (tan . k4e89) (symbol? . k4e88) (symbol=? . k4e87) (symbol->string . k4e86) (substring . k4e85) (string? . k4e84) (string>? . k4e83) (string>=? . k4e82) (string=? . k4e81) (string<? . k4e80) (string<=? . k4e7f) (string-ref . k4e7e) (string-length . k4e7d) (string-for-each . k4e7c) (string-copy . k4e7b) (string-append . k4e7a) (string->symbol . k4e79) (string->number . k4e78) (string->list . k4e77) (string . k4e76) (sqrt . k4e75) (sin . k4e74) (round . k4e73) (reverse . k4e72) (real? . k4e71) (real-valued? . k4e70) (real-part . k4e6f) (rationalize . k4e6e) (rational? . k4e6d) (rational-valued? . k4e6c) (procedure? . k4e6b) (positive? . k4e6a) (pair? . k4e69) (odd? . k4e68) (numerator . k4e67) (number? . k4e66) (number->string . k4e65) (null? . k4e64) (not . k4e63) (negative? . k4e62) (nan? . k4e61) (min . k4e60) (max . k4e5f) (map . k4e5e) (make-vector . k4e5d) (make-string . k4e5c) (make-rectangular . k4e5b) (make-polar . k4e5a) (magnitude . k4e59) (log . k4e58) (list? . k4e57) (list-tail . k4e56) (list-ref . k4e55) (list->vector . k4e54) (list->string . k4e53) (list . k4e52) (length . k4e51) (lcm . k4e50) (integer? . k4e4f) (integer-valued? . k4e4e) (integer->char . k4e4d) (infinite? . k4e4c) (inexact? . k4e4b) (inexact . k4e4a) (imag-part . k4e49) (gcd . k4e48) (for-each . k4e47) (floor . k4e46) (finite? . k4e45) (expt . k4e44) (exp . k4e43) (exact? . k4e42) (exact-integer-sqrt . k4e41) (exact . k4e40) (even? . k4e3f) (error . k4e3e) (eqv? . k4e3d) (equal? . k4e3c) (eq? . k4e3b) (dynamic-wind . k4e3a) (div0-and-mod0 . k4e39) (mod0 . k4e38) (div0 . k4e37) (div-and-mod . k4e36) (mod . k4e35) (div . k4e34) (denominator . k4e33) (cos . k4e32) (cons . k4e31) (complex? . k4e30) (char? . k4e2f) (char>? . k4e2e) (char>=? . k4e2d) (char=? . k4e2c) (char<? . k4e2b) (char<=? . k4e2a) (char->integer . k4e29) (ceiling . k4e28) (call-with-values . k4e27) (call/cc . k4e26) (call-with-current-continuation . k4e25) (cddddr . k4e24) (cdddar . k4e23) (cddadr . k4e22) (cddaar . k4e21) (cdaddr . k4e20) (cdadar . k4e1f) (cdaadr . k4e1e) (cdaaar . k4e1d) (cadddr . k4e1c) (caddar . k4e1b) (cadadr . k4e1a) (cadaar . k4e19) (caaddr . k4e18) (caadar . k4e17) (caaadr . k4e16) (caaaar . k4e15) (cdddr . k4e14) (cddar . k4e13) (cdadr . k4e12) (cdaar . k4e11) (caddr . k4e10) (cadar . k4e0f) (caadr . k4e0e) (caaar . k4e0d) (cddr . k4e0c) (cdar . k4e0b) (cadr . k4e0a) (caar . k4e09) (cdr . k4e08) (car . k4e07) (boolean? . k4e06) (boolean=? . k4e05) (atan . k4e04) (assertion-violation . k4e03) (asin . k4e02) (apply . k4e01) (append . k4e00) (angle . k4dff) (acos . k4dfe) (abs . k4dfd) (/ . k4dfc) (* . k4dfb) (- . k4dfa) (+ . k4df9) (>= . k4df8) (> . k4df7) (= . k4df6) (<= . k4df5) (< . k4df4) (unquote-splicing . k4dc1) (unquote . k4dc0) (_ . k4dbf) (else . k4dbe) (=> . k4dbd) (... . k4dbc) (assert . k4dbb) (cond . k4db6) (let* . k4db5) (let*-values . k4db4) (let-values . k4db3) (identifier-syntax . k4db2) (quasiquote . k4daf) (syntax-rules . k4dae) (case . k4da9) (or . k4da5) (and . k4da4) (if . k4da3) (let . k4da2) (letrec* . k4da1) (letrec . k4da0) (lambda . k4d9d) (quote . k4d9a) (letrec-syntax . k4d98) (let-syntax . k4d97) (set! . k4d96) (begin . k4d94) (define-syntax . k4d92) (define . k4d91)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5148 '(rnrs lists) '(6) '() '() '() '((remove . k4f8e) (remv . k4f8d) (remp . k4f8c) (remq . k4f8b) (partition . k4f8a) (memv . k4f89) (memq . k4f88) (memp . k4f87) (member . k4f86) (exists . k4f85) (for-all . k4f84) (fold-right . k4f83) (fold-left . k4f82) (find . k4f81) (filter . k4f80) (cons* . k4f7f) (assv . k4f7e) (assq . k4f7d) (assp . k4f7c) (assoc . k4f7b)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5149 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . k5005) (call-with-input-file . k5004) (write-char . k5003) (write . k5002) (with-output-to-file . k5001) (with-input-from-file . k5000) (read-char . k4fff) (read . k4ffe) (peek-char . k4ffd) (open-output-file . k4ffc) (open-input-file . k4ffb) (newline . k4ffa) (display . k4ff9) (close-output-port . k4ff8) (close-input-port . k4ff7) (eof-object? . k4ff6) (eof-object . k4ff5) (current-error-port . k4ff4) (current-output-port . k4ff3) (current-input-port . k4ff2) (output-port? . k4ff1) (input-port? . k4ff0) (make-i/o-write-error . k4fcc) (make-i/o-read-error . k4fcb) (make-i/o-port-error . k4fca) (make-i/o-invalid-position-error . k4fc9) (make-i/o-filename-error . k4fc8) (make-i/o-file-protection-error . k4fc7) (make-i/o-file-is-read-only-error . k4fc6) (make-i/o-file-does-not-exist-error . k4fc5) (make-i/o-file-already-exists-error . k4fc4) (make-i/o-error . k4fc3) (i/o-write-error? . k4fb7) (i/o-read-error? . k4fb6) (i/o-port-error? . k4fb5) (i/o-invalid-position-error? . k4fb4) (i/o-filename-error? . k4fb3) (i/o-file-protection-error? . k4fb2) (i/o-file-is-read-only-error? . k4fb1) (i/o-file-does-not-exist-error? . k4fb0) (i/o-file-already-exists-error? . k4faf) (i/o-error? . k4fae) (i/o-error-position . k4fad) (i/o-error-port . k4fac) (i/o-error-filename . k4fab) (&i/o-port . k4dee) (&i/o-file-does-not-exist . k4ded) (&i/o-file-already-exists . k4dec) (&i/o-file-is-read-only . k4deb) (&i/o-file-protection . k4dea) (&i/o-filename . k4de9) (&i/o-invalid-position . k4de8) (&i/o-write . k4de7) (&i/o-read . k4de6) (&i/o . k4de5)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k514a '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . k4fba) (utf32->string . k4f40) (utf16->string . k4f3f) (utf8->string . k4f3e) (uint-list->bytevector . k4f3d) (u8-list->bytevector . k4f3c) (string->utf8 . k4f3b) (string->utf32 . k4f3a) (string->utf16 . k4f39) (sint-list->bytevector . k4f38) (native-endianness . k4f37) (bytevector? . k4f36) (bytevector=? . k4f35) (bytevector-uint-set! . k4f34) (bytevector-uint-ref . k4f33) (bytevector-u8-set! . k4f32) (bytevector-u8-ref . k4f31) (bytevector-u64-set! . k4f30) (bytevector-u64-ref . k4f2f) (bytevector-u64-native-set! . k4f2e) (bytevector-u64-native-ref . k4f2d) (bytevector-u32-set! . k4f2c) (bytevector-u32-ref . k4f2b) (bytevector-u32-native-set! . k4f2a) (bytevector-u32-native-ref . k4f29) (bytevector-u16-set! . k4f28) (bytevector-u16-ref . k4f27) (bytevector-u16-native-set! . k4f26) (bytevector-u16-native-ref . k4f25) (bytevector-sint-set! . k4f24) (bytevector-sint-ref . k4f23) (bytevector-s8-set! . k4f22) (bytevector-s8-ref . k4f21) (bytevector-s64-set! . k4f20) (bytevector-s64-ref . k4f1f) (bytevector-s64-native-set! . k4f1e) (bytevector-s64-native-ref . k4f1d) (bytevector-s32-set! . k4f1c) (bytevector-s32-ref . k4f1b) (bytevector-s32-native-set! . k4f1a) (bytevector-s32-native-ref . k4f19) (bytevector-s16-set! . k4f18) (bytevector-s16-ref . k4f17) (bytevector-s16-native-set! . k4f16) (bytevector-s16-native-ref . k4f15) (bytevector-length . k4f14) (bytevector-ieee-single-ref . k4f13) (bytevector-ieee-single-set! . k4f12) (bytevector-ieee-single-native-set! . k4f11) (bytevector-ieee-single-native-ref . k4f10) (bytevector-ieee-double-set! . k4f0f) (bytevector-ieee-double-ref . k4f0e) (bytevector-ieee-double-native-set! . k4f0d) (bytevector-ieee-double-native-ref . k4f0c) (bytevector-fill! . k4f0b) (bytevector-copy! . k4f0a) (bytevector-copy . k4f09) (bytevector->uint-list . k4f08) (bytevector->u8-list . k4f07) (bytevector->sint-list . k4f06) (endianness . k4dba)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k514b '(rnrs unicode) '(6) '() '() '() '((string-upcase . k504d) (string-titlecase . k504c) (string-normalize-nfkd . k504b) (string-normalize-nfkc . k504a) (string-normalize-nfd . k5049) (string-normalize-nfc . k5048) (string-foldcase . k5047) (string-downcase . k5046) (string-ci>? . k5045) (string-ci>=? . k5044) (string-ci=? . k5043) (string-ci<? . k5042) (string-ci<=? . k5041) (char-whitespace? . k5040) (char-upper-case? . k503f) (char-title-case? . k503e) (char-numeric? . k503d) (char-lower-case? . k503c) (char-general-category . k503b) (char-upcase . k503a) (char-titlecase . k5039) (char-foldcase . k5038) (char-downcase . k5037) (char-ci>? . k5036) (char-ci>=? . k5035) (char-ci=? . k5034) (char-ci<? . k5033) (char-ci<=? . k5032) (char-alphabetic? . k5031)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k514c '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . k4f74) (raise-continuable . k4f73) (raise . k4f72) (guard . k4dc6) (else . k4dbe) (=> . k4dbd)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k514d '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . k4ea6) (bitwise-reverse-bit-field . k4ea5) (bitwise-length . k4ea4) (bitwise-if . k4ea3) (bitwise-first-bit-set . k4ea2) (bitwise-copy-bit-field . k4ea1) (bitwise-copy-bit . k4ea0) (bitwise-bit-set? . k4e9f) (bitwise-bit-field . k4e9e) (bitwise-bit-count . k4e9d) (bitwise-xor . k4e9c) (bitwise-ior . k4e9b) (bitwise-and . k4e9a) (bitwise-not . k4e99) (bitwise-arithmetic-shift-right . k4e98) (bitwise-arithmetic-shift-left . k4e97) (bitwise-arithmetic-shift . k4e96)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k514e '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . k4ed3) (fxxor . k4ed2) (fxrotate-bit-field . k4ed1) (fxreverse-bit-field . k4ed0) (fxpositive? . k4ecf) (fxodd? . k4ece) (fxnot . k4ecd) (fxnegative? . k4ecc) (fxmod0 . k4ecb) (fxmod . k4eca) (fxmin . k4ec9) (fxmax . k4ec8) (fxlength . k4ec7) (fxior . k4ec6) (fxif . k4ec5) (fxfirst-bit-set . k4ec4) (fxeven? . k4ec3) (fxdiv0-and-mod0 . k4ec2) (fxdiv0 . k4ec1) (fxdiv-and-mod . k4ec0) (fxdiv . k4ebf) (fxcopy-bit-field . k4ebe) (fxcopy-bit . k4ebd) (fxbit-set? . k4ebc) (fxbit-field . k4ebb) (fxbit-count . k4eba) (fxarithmetic-shift-right . k4eb9) (fxarithmetic-shift-left . k4eb8) (fxarithmetic-shift . k4eb7) (fxand . k4eb6) (fx>? . k4eb5) (fx>=? . k4eb4) (fx=? . k4eb3) (fx<? . k4eb2) (fx<=? . k4eb1) (fx-/carry . k4eb0) (fx- . k4eaf) (fx+/carry . k4eae) (fx+ . k4ead) (fx*/carry . k4eac) (fx* . k4eab) (greatest-fixnum . k4eaa) (least-fixnum . k4ea9) (fixnum-width . k4ea8) (fixnum? . k4ea7)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k514f '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . k4f05) (no-infinities-violation? . k4f04) (make-no-nans-violation . k4f03) (make-no-infinities-violation . k4f02) (real->flonum . k4f01) (flzero? . k4f00) (fltruncate . k4eff) (fltan . k4efe) (flsqrt . k4efd) (flsin . k4efc) (flround . k4efb) (flpositive? . k4efa) (flonum? . k4ef9) (flodd? . k4ef8) (flnumerator . k4ef7) (flnegative? . k4ef6) (flnan? . k4ef5) (flmod0 . k4ef4) (flmod . k4ef3) (flmin . k4ef2) (flmax . k4ef1) (fllog . k4ef0) (flinteger? . k4eef) (flinfinite? . k4eee) (flfloor . k4eed) (flfinite? . k4eec) (flexpt . k4eeb) (flexp . k4eea) (fleven? . k4ee9) (fldiv0-and-mod0 . k4ee8) (fldiv0 . k4ee7) (fldiv-and-mod . k4ee6) (fldiv . k4ee5) (fldenominator . k4ee4) (flcos . k4ee3) (flceiling . k4ee2) (flatan . k4ee1) (flasin . k4ee0) (flacos . k4edf) (flabs . k4ede) (fl>? . k4edd) (fl>=? . k4edc) (fl=? . k4edb) (fl<? . k4eda) (fl<=? . k4ed9) (fl/ . k4ed8) (fl- . k4ed7) (fl+ . k4ed6) (fl* . k4ed5) (fixnum->flonum . k4ed4) (&no-nans . k4df2) (&no-infinities . k4df1)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5150 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . k501a) (string-ci-hash . k5019) (string-hash . k5018) (equal-hash . k5017) (hashtable-equivalence-function . k5016) (make-hashtable . k5015) (hashtable-hash-function . k5014) (make-eqv-hashtable . k5013) (make-eq-hashtable . k5012) (hashtable? . k5011) (hashtable-update! . k5010) (hashtable-size . k500f) (hashtable-set! . k500e) (hashtable-ref . k500d) (hashtable-mutable? . k500c) (hashtable-keys . k500b) (hashtable-entries . k500a) (hashtable-delete! . k5009) (hashtable-copy . k5008) (hashtable-contains? . k5007) (hashtable-clear! . k5006)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5151 '(rnrs io ports) '(6) '() '() '() '((eof-object? . k4ff6) (eof-object . k4ff5) (current-error-port . k4ff4) (current-output-port . k4ff3) (current-input-port . k4ff2) (output-port? . k4ff1) (input-port? . k4ff0) (utf-8-codec . k4fef) (utf-16-codec . k4fee) (transcoder-error-handling-mode . k4fed) (transcoder-eol-style . k4fec) (transcoder-codec . k4feb) (transcoded-port . k4fea) (textual-port? . k4fe9) (string->bytevector . k4fe8) (standard-output-port . k4fe7) (standard-input-port . k4fe6) (standard-error-port . k4fe5) (set-port-position! . k4fe4) (put-u8 . k4fe3) (put-string . k4fe2) (put-datum . k4fe1) (put-char . k4fe0) (put-bytevector . k4fdf) (port? . k4fde) (port-transcoder . k4fdd) (port-position . k4fdc) (port-has-set-port-position!? . k4fdb) (port-has-port-position? . k4fda) (port-eof? . k4fd9) (output-port-buffer-mode . k4fd8) (open-string-output-port . k4fd7) (open-string-input-port . k4fd6) (open-file-output-port . k4fd5) (open-file-input/output-port . k4fd4) (open-file-input-port . k4fd3) (open-bytevector-output-port . k4fd2) (open-bytevector-input-port . k4fd1) (native-transcoder . k4fd0) (native-eol-style . k4fcf) (make-transcoder . k4fce) (latin-1-codec . k4fcd) (make-i/o-write-error . k4fcc) (make-i/o-read-error . k4fcb) (make-i/o-port-error . k4fca) (make-i/o-invalid-position-error . k4fc9) (make-i/o-filename-error . k4fc8) (make-i/o-file-protection-error . k4fc7) (make-i/o-file-is-read-only-error . k4fc6) (make-i/o-file-does-not-exist-error . k4fc5) (make-i/o-file-already-exists-error . k4fc4) (make-i/o-error . k4fc3) (make-i/o-encoding-error . k4fc2) (make-i/o-decoding-error . k4fc1) (make-custom-textual-output-port . k4fc0) (make-custom-textual-input/output-port . k4fbf) (make-custom-textual-input-port . k4fbe) (make-custom-binary-output-port . k4fbd) (make-custom-binary-input/output-port . k4fbc) (make-custom-binary-input-port . k4fbb) (lookahead-u8 . k4fb9) (lookahead-char . k4fb8) (i/o-write-error? . k4fb7) (i/o-read-error? . k4fb6) (i/o-port-error? . k4fb5) (i/o-invalid-position-error? . k4fb4) (i/o-filename-error? . k4fb3) (i/o-file-protection-error? . k4fb2) (i/o-file-is-read-only-error? . k4fb1) (i/o-file-does-not-exist-error? . k4fb0) (i/o-file-already-exists-error? . k4faf) (i/o-error? . k4fae) (i/o-error-position . k4fad) (i/o-error-port . k4fac) (i/o-error-filename . k4fab) (i/o-encoding-error? . k4faa) (i/o-encoding-error-char . k4fa9) (i/o-decoding-error? . k4fa8) (get-u8 . k4fa7) (get-string-n! . k4fa6) (get-string-n . k4fa5) (get-string-all . k4fa4) (get-line . k4fa3) (get-datum . k4fa2) (get-char . k4fa1) (get-bytevector-some . k4fa0) (get-bytevector-n! . k4f9f) (get-bytevector-n . k4f9e) (get-bytevector-all . k4f9d) (flush-output-port . k4f9c) (close-port . k4f9b) (call-with-string-output-port . k4f7a) (call-with-port . k4f79) (call-with-bytevector-output-port . k4f78) (bytevector->string . k4f77) (buffer-mode? . k4f76) (binary-port? . k4f75) (&i/o-encoding . k4df0) (&i/o-decoding . k4def) (&i/o-port . k4dee) (&i/o-file-does-not-exist . k4ded) (&i/o-file-already-exists . k4dec) (&i/o-file-is-read-only . k4deb) (&i/o-file-protection . k4dea) (&i/o-filename . k4de9) (&i/o-invalid-position . k4de8) (&i/o-write . k4de7) (&i/o-read . k4de6) (&i/o . k4de5) (error-handling-mode . k4dca) (file-options . k4dc9) (buffer-mode . k4dc8) (eol-style . k4dc7)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5152 '(rnrs enums) '(6) '() '() '() '((make-enumeration . k4f71) (enum-set=? . k4f70) (enum-set-universe . k4f6f) (enum-set-union . k4f6e) (enum-set-subset? . k4f6d) (enum-set-projection . k4f6c) (enum-set-member? . k4f6b) (enum-set-intersection . k4f6a) (enum-set-indexer . k4f69) (enum-set-difference . k4f68) (enum-set-constructor . k4f67) (enum-set-complement . k4f66) (enum-set->list . k4f65) (define-enumeration . k4dd5)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5153 '(rnrs conditions) '(6) '() '() '() '((who-condition? . k4f64) (warning? . k4f63) (violation? . k4f62) (undefined-violation? . k4f61) (syntax-violation? . k4f60) (syntax-violation-subform . k4f5f) (syntax-violation-form . k4f5e) (syntax-violation . k31a2) (simple-conditions . k4f5d) (serious-condition? . k4f5c) (non-continuable-violation? . k4f5b) (message-condition? . k4f5a) (make-who-condition . k4f59) (make-warning . k4f58) (make-violation . k4f57) (make-undefined-violation . k4f56) (make-syntax-violation . k4f55) (make-serious-condition . k4f54) (make-non-continuable-violation . k4f53) (make-message-condition . k4f52) (make-lexical-violation . k4f51) (make-irritants-condition . k4f50) (make-implementation-restriction-violation . k4f4f) (make-error . k4f4e) (make-assertion-violation . k4f4d) (lexical-violation? . k4f4c) (irritants-condition? . k4f4b) (implementation-restriction-violation? . k4f4a) (error? . k4f49) (condition-who . k4f48) (condition-predicate . k4f47) (condition-message . k4f46) (condition-irritants . k4f45) (condition-accessor . k4f44) (condition . k4f43) (assertion-violation? . k4f42) (condition? . k4f41) (&undefined . k4de4) (&syntax . k4de3) (&lexical . k4de2) (&implementation-restriction . k4de1) (&non-continuable . k4de0) (&who . k4ddf) (&irritants . k4dde) (&assertion . k4ddd) (&violation . k4ddc) (&error . k4ddb) (&serious . k4dda) (&warning . k4dd9) (&message . k4dd8) (&condition . k4dd7) (define-condition-type . k4dd6)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5154 '(rnrs records inspection) '(6) '() '() '() '((record? . k5029) (record-type-uid . k5028) (record-type-sealed? . k5027) (record-type-parent . k5026) (record-type-opaque? . k5025) (record-type-name . k5024) (record-type-generative? . k5023) (record-type-field-names . k5022) (record-rtd . k5021) (record-field-mutable? . k5020)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5155 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . k5030) (record-predicate . k502f) (record-mutator . k502e) (record-constructor . k502d) (record-accessor . k502c) (make-record-type-descriptor . k502b) (make-record-constructor-descriptor . k502a)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5156 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . k4dd4) (parent-rtd . k4dd3) (nongenerative . k4dd2) (opaque . k4dd1) (sealed . k4dd0) (protocol . k4dcf) (parent . k4dce) (immutable . k4dcd) (mutable . k4dcc) (fields . k4dcb) (record-constructor-descriptor . k4dab) (record-type-descriptor . k4daa)) '() values values '#f '#f '#t '#f) (k2cd6@k2b22@install-library 'k5157 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . k5137) (&no-nans-rtd . k5136) (&no-infinities-rcd . k5135) (&no-infinities-rtd . k5134) (&i/o-encoding-rcd . k5133) (&i/o-encoding-rtd . k5132) (&i/o-decoding-rcd . k5131) (&i/o-decoding-rtd . k5130) (&i/o-port-rcd . k512f) (&i/o-port-rtd . k512e) (&i/o-file-does-not-exist-rcd . k512d) (&i/o-file-does-not-exist-rtd . k512c) (&i/o-file-already-exists-rcd . k512b) (&i/o-file-already-exists-rtd . k512a) (&i/o-file-is-read-only-rcd . k5129) (&i/o-file-is-read-only-rtd . k5128) (&i/o-file-protection-rcd . k5127) (&i/o-file-protection-rtd . k5126) (&i/o-filename-rcd . k5125) (&i/o-filename-rtd . k5124) (&i/o-invalid-position-rcd . k5123) (&i/o-invalid-position-rtd . k5122) (&i/o-write-rcd . k5121) (&i/o-write-rtd . k5120) (&i/o-read-rcd . k511f) (&i/o-read-rtd . k511e) (&i/o-rcd . k511d) (&i/o-rtd . k511c) (&undefined-rcd . k511b) (&undefined-rtd . k511a) (&syntax-rcd . k5119) (&syntax-rtd . k5118) (&lexical-rcd . k5117) (&lexical-rtd . k5116) (&implementation-restriction-rcd . k5115) (&implementation-restriction-rtd . k5114) (&non-continuable-rcd . k5113) (&non-continuable-rtd . k5112) (&who-rcd . k5111) (&who-rtd . k5110) (&irritants-rcd . k510f) (&irritants-rtd . k510e) (&assertion-rcd . k510d) (&assertion-rtd . k510c) (&violation-rcd . k510b) (&violation-rtd . k510a) (&error-rcd . k5109) (&error-rtd . k5108) (&serious-rcd . k5107) (&serious-rtd . k5106) (&warning-rcd . k5105) (&warning-rtd . k5104) (&message-rcd . k5103) (&message-rtd . k5102) (&condition-rcd . k5101) (&condition-rtd . k5100) (syntax-error . k319e) (syntax-dispatch . k30c2) (pretty-print . k50ff) (eval-core . k50fe) (set-symbol-value! . k50fd) (symbol-value . k50fc) (gensym . k50fb) (void . k50fa) (load . k4c2b) (interaction-environment . k31b0) (char-ready? . k50f9) (regexp? . k50f8) (read-line . k50f7) (gensym-prefix-set! . k50f6) (ungensym . k50f5) (alist->eq-hash-table . k50f4) (assoc-ref . k50f3) (print . k50f2) (format . k50f1) (host-os . k50f0) (library-path . k2b01) (standard-library-path . k50ef) (ssl-supported? . k50ee) (ssl-socket? . k50ed) (socket-sslize! . k50ec) (%monapi-name-whereis . k50eb) (%monapi-message-send . k50ea) (file-newer? . k50e9) (stat-mtime . k50e8) (write-to-file . k50e7) (file->list . k50e6) (file->string . k50e5) (digit->integer . k50e4) (call-with-string-input-port . k50e3) (call-with-string-io . k50e2) (string-split . k50e1) (bytevector-for-each . k50e0) (string->regexp . k50df) (rxmatch . k50de) (regexp-replace-all . k50dd) (hashtable-fold-left . k50dc) (hashtable-for-each . k50db) (mosh-cache-dir . k28eb) (call-process . k50da) (local-tz-offset . k50d9) (microseconds . k50d8) (directory-list . k50d7) (set-current-directory! . k50d6) (expand-path . k50d5) (current-directory . k50d4) (%spawn . k50d3) (%waitpid . k50d2) (simple-struct-name . k50d1) (simple-struct-set! . k50d0) (simple-struct-ref . k50cf) (make-simple-struct . k50ce) (simple-struct? . k50cd) (pointer-ref-c-int64 . k50cc) (pointer-ref-c-int32 . k50cb) (pointer-ref-c-int16 . k50ca) (pointer-ref-c-int8 . k50c9) (pointer-ref-c-uint64 . k50c8) (pointer-ref-c-uint32 . k50c7) (pointer-ref-c-uint16 . k50c6) (pointer-ref-c-uint8 . k50c5) (pointer-set-c-uint64! . k50c4) (pointer-set-c-uint32! . k50c3) (pointer-set-c-uint16! . k50c2) (pointer-set-c-uint8! . k50c1) (pointer-set-c-int64! . k50c0) (pointer-set-c-int32! . k50bf) (pointer-set-c-int16! . k50be) (pointer-set-c-int8! . k50bd) (pointer-set-c-pointer! . k50bc) (pointer-set-c-double! . k50bb) (pointer-set-c-float! . k50ba) (pointer-set-c-long-long! . k50b9) (pointer-set-c-long! . k50b8) (pointer-set-c-int! . k50b7) (pointer-set-c-short! . k50b6) (pointer-set-c-char! . k50b5) (pointer-ref-c-pointer . k50b4) (pointer-ref-c-double . k50b3) (pointer-ref-c-float . k50b2) (pointer-ref-c-unsigned-long-long . k50b1) (pointer-ref-c-signed-long-long . k50b0) (pointer-ref-c-unsigned-long . k50af) (pointer-ref-c-signed-long . k50ae) (pointer-ref-c-unsigned-int . k50ad) (pointer-ref-c-signed-int . k50ac) (pointer-ref-c-unsigned-short . k50ab) (pointer-ref-c-signed-short . k50aa) (pointer-ref-c-unsigned-char . k50a9) (pointer-ref-c-signed-char . k50a8) (pointer->integer . k50a7) (integer->pointer . k50a6) (pointer? . k50a5) (shared-errno . k50a4) (%ffi-free-c-callback-trampoline . k50a3) (%ffi-make-c-callback-trampoline . k50a2) (%ffi-free . k50a1) (%ffi-malloc . k50a0) (%ffi-supported? . k509f) (%ffi-pointer->string . k509e) (%ffi-call . k509d) (%ffi-lookup . k509c) (%ffi-open . k509b) (null-terminated-utf8->string . k509a) (null-terminated-bytevector->string . k5099) (%exec . k5098) (%fork . k5097) (%pipe . k5096) (p . k5095) (open-output-string . k5094) (get-output-string . k5093) (file-stat-ctime . k5092) (file-stat-atime . k5091) (file-stat-mtime . k5090) (file-size-in-bytes . k508f) (file-writable? . k508e) (file-executable? . k508d) (file-readable? . k508c) (file-regular? . k508b) (file-symbolic-link? . k508a) (file-directory? . k5089) (create-symbolic-link . k5088) (rename-file . k5087) (delete-directory . k5086) (create-directory . k5085) (create-mosh-cache-dir . k5084) (get-environment-variables . k5083) (current-exception-handler . k5082) (get-environment-variable . k5081) (join-wraps . k5080) (id->real-label . k507f) (same-marks? . k507e) (same-marks*? . k507d) (get-timeofday . k507c) (get-command-line . k507b) (sys-display . k507a) (whereis . k5079) (register . k5078) (vm-join! . k5077) (vm-set-value! . k5076) (vm? . k5075) (main-vm? . k5074) (vm-eval . k5073) (vm-self . k5072) (vm-start! . k5071) (make-vm . k5070) (mutex-try-lock! . k506f) (mutex-unlock! . k506e) (mutex-lock! . k506d) (mutex? . k506c) (make-mutex . k506b) (condition-variable-notify-all! . k506a) (condition-variable-notify! . k5069) (condition-variable-wait! . k5068) (make-condition-variable . k5067) (write/ss . k5066) (mosh-executable-path . k5065) (make-file-options . k5064) (source-info . k5063) (make-compiler-instruction . k5062) (make-instruction . k5061) (set-source-info! . k5060) (bignum? . k505f) (fast-equal? . k505e) (fasl-read . k505d) (fasl-write . k505c) (time-usage . k505b) (os-constant . k505a) (condition-printer . k5059) (disasm . k5058) (make-parameter . k28e9) (socket-port . k5057) (socket-shutdown . k5056) (socket-close . k5055) (socket-send . k5054) (socket-recv! . k5053) (socket-recv . k5052) (make-server-socket . k5051) (make-client-socket . k5050) (socket-accept . k504f) (socket? . k504e) (string-upcase . k504d) (string-titlecase . k504c) (string-normalize-nfkd . k504b) (string-normalize-nfkc . k504a) (string-normalize-nfd . k5049) (string-normalize-nfc . k5048) (string-foldcase . k5047) (string-downcase . k5046) (string-ci>? . k5045) (string-ci>=? . k5044) (string-ci=? . k5043) (string-ci<? . k5042) (string-ci<=? . k5041) (char-whitespace? . k5040) (char-upper-case? . k503f) (char-title-case? . k503e) (char-numeric? . k503d) (char-lower-case? . k503c) (char-general-category . k503b) (char-upcase . k503a) (char-titlecase . k5039) (char-foldcase . k5038) (char-downcase . k5037) (char-ci>? . k5036) (char-ci>=? . k5035) (char-ci=? . k5034) (char-ci<? . k5033) (char-ci<=? . k5032) (char-alphabetic? . k5031) (make-variable-transformer . k2eed) (identifier? . k31a4) (generate-temporaries . k3190) (free-identifier=? . k3192) (syntax->datum . k31a8) (datum->syntax . k31a6) (bound-identifier=? . k3194) (record-type-descriptor? . k5030) (record-predicate . k502f) (record-mutator . k502e) (record-constructor . k502d) (record-accessor . k502c) (make-record-type-descriptor . k502b) (make-record-constructor-descriptor . k502a) (record? . k5029) (record-type-uid . k5028) (record-type-sealed? . k5027) (record-type-parent . k5026) (record-type-opaque? . k5025) (record-type-name . k5024) (record-type-generative? . k5023) (record-type-field-names . k5022) (record-rtd . k5021) (record-field-mutable? . k5020) (delete-file . k501f) (file-exists? . k501e) (vector-sort! . k501d) (vector-sort . k501c) (list-sort . k501b) (symbol-hash . k501a) (string-ci-hash . k5019) (string-hash . k5018) (equal-hash . k5017) (hashtable-equivalence-function . k5016) (make-hashtable . k5015) (hashtable-hash-function . k5014) (make-eqv-hashtable . k5013) (make-eq-hashtable . k5012) (hashtable? . k5011) (hashtable-update! . k5010) (hashtable-size . k500f) (hashtable-set! . k500e) (hashtable-ref . k500d) (hashtable-mutable? . k500c) (hashtable-keys . k500b) (hashtable-entries . k500a) (hashtable-delete! . k5009) (hashtable-copy . k5008) (hashtable-contains? . k5007) (hashtable-clear! . k5006) (call-with-output-file . k5005) (call-with-input-file . k5004) (write-char . k5003) (write . k5002) (with-output-to-file . k5001) (with-input-from-file . k5000) (read-char . k4fff) (read . k4ffe) (peek-char . k4ffd) (open-output-file . k4ffc) (open-input-file . k4ffb) (newline . k4ffa) (display . k4ff9) (close-output-port . k4ff8) (close-input-port . k4ff7) (eof-object? . k4ff6) (eof-object . k4ff5) (current-error-port . k4ff4) (current-output-port . k4ff3) (current-input-port . k4ff2) (output-port? . k4ff1) (input-port? . k4ff0) (utf-8-codec . k4fef) (utf-16-codec . k4fee) (transcoder-error-handling-mode . k4fed) (transcoder-eol-style . k4fec) (transcoder-codec . k4feb) (transcoded-port . k4fea) (textual-port? . k4fe9) (string->bytevector . k4fe8) (standard-output-port . k4fe7) (standard-input-port . k4fe6) (standard-error-port . k4fe5) (set-port-position! . k4fe4) (put-u8 . k4fe3) (put-string . k4fe2) (put-datum . k4fe1) (put-char . k4fe0) (put-bytevector . k4fdf) (port? . k4fde) (port-transcoder . k4fdd) (port-position . k4fdc) (port-has-set-port-position!? . k4fdb) (port-has-port-position? . k4fda) (port-eof? . k4fd9) (output-port-buffer-mode . k4fd8) (open-string-output-port . k4fd7) (open-string-input-port . k4fd6) (open-file-output-port . k4fd5) (open-file-input/output-port . k4fd4) (open-file-input-port . k4fd3) (open-bytevector-output-port . k4fd2) (open-bytevector-input-port . k4fd1) (native-transcoder . k4fd0) (native-eol-style . k4fcf) (make-transcoder . k4fce) (latin-1-codec . k4fcd) (make-i/o-write-error . k4fcc) (make-i/o-read-error . k4fcb) (make-i/o-port-error . k4fca) (make-i/o-invalid-position-error . k4fc9) (make-i/o-filename-error . k4fc8) (make-i/o-file-protection-error . k4fc7) (make-i/o-file-is-read-only-error . k4fc6) (make-i/o-file-does-not-exist-error . k4fc5) (make-i/o-file-already-exists-error . k4fc4) (make-i/o-error . k4fc3) (make-i/o-encoding-error . k4fc2) (make-i/o-decoding-error . k4fc1) (make-custom-textual-output-port . k4fc0) (make-custom-textual-input/output-port . k4fbf) (make-custom-textual-input-port . k4fbe) (make-custom-binary-output-port . k4fbd) (make-custom-binary-input/output-port . k4fbc) (make-custom-binary-input-port . k4fbb) (make-bytevector . k4fba) (lookahead-u8 . k4fb9) (lookahead-char . k4fb8) (i/o-write-error? . k4fb7) (i/o-read-error? . k4fb6) (i/o-port-error? . k4fb5) (i/o-invalid-position-error? . k4fb4) (i/o-filename-error? . k4fb3) (i/o-file-protection-error? . k4fb2) (i/o-file-is-read-only-error? . k4fb1) (i/o-file-does-not-exist-error? . k4fb0) (i/o-file-already-exists-error? . k4faf) (i/o-error? . k4fae) (i/o-error-position . k4fad) (i/o-error-port . k4fac) (i/o-error-filename . k4fab) (i/o-encoding-error? . k4faa) (i/o-encoding-error-char . k4fa9) (i/o-decoding-error? . k4fa8) (get-u8 . k4fa7) (get-string-n! . k4fa6) (get-string-n . k4fa5) (get-string-all . k4fa4) (get-line . k4fa3) (get-datum . k4fa2) (get-char . k4fa1) (get-bytevector-some . k4fa0) (get-bytevector-n! . k4f9f) (get-bytevector-n . k4f9e) (get-bytevector-all . k4f9d) (flush-output-port . k4f9c) (close-port . k4f9b) (scheme-report-environment . k317e) (quotient . k4f9a) (null-environment . k317c) (remainder . k4f99) (modulo . k4f98) (inexact->exact . k4f97) (force . k4f96) (exact->inexact . k4f95) (make-promise . k4f94) (exit . k4f93) (command-line . k4c25) (string-fill! . k4f92) (string-set! . k4f91) (set-cdr! . k4f90) (set-car! . k4f8f) (remove . k4f8e) (remv . k4f8d) (remp . k4f8c) (remq . k4f8b) (partition . k4f8a) (memv . k4f89) (memq . k4f88) (memp . k4f87) (member . k4f86) (exists . k4f85) (for-all . k4f84) (fold-right . k4f83) (fold-left . k4f82) (find . k4f81) (filter . k4f80) (cons* . k4f7f) (assv . k4f7e) (assq . k4f7d) (assp . k4f7c) (assoc . k4f7b) (call-with-string-output-port . k4f7a) (call-with-port . k4f79) (call-with-bytevector-output-port . k4f78) (bytevector->string . k4f77) (buffer-mode? . k4f76) (binary-port? . k4f75) (with-exception-handler . k4f74) (raise-continuable . k4f73) (raise . k4f72) (eval . k3182) (environment . k317a) (make-enumeration . k4f71) (enum-set=? . k4f70) (enum-set-universe . k4f6f) (enum-set-union . k4f6e) (enum-set-subset? . k4f6d) (enum-set-projection . k4f6c) (enum-set-member? . k4f6b) (enum-set-intersection . k4f6a) (enum-set-indexer . k4f69) (enum-set-difference . k4f68) (enum-set-constructor . k4f67) (enum-set-complement . k4f66) (enum-set->list . k4f65) (who-condition? . k4f64) (warning? . k4f63) (violation? . k4f62) (undefined-violation? . k4f61) (syntax-violation? . k4f60) (syntax-violation-subform . k4f5f) (syntax-violation-form . k4f5e) (syntax-violation . k31a2) (simple-conditions . k4f5d) (serious-condition? . k4f5c) (non-continuable-violation? . k4f5b) (message-condition? . k4f5a) (make-who-condition . k4f59) (make-warning . k4f58) (make-violation . k4f57) (make-undefined-violation . k4f56) (make-syntax-violation . k4f55) (make-serious-condition . k4f54) (make-non-continuable-violation . k4f53) (make-message-condition . k4f52) (make-lexical-violation . k4f51) (make-irritants-condition . k4f50) (make-implementation-restriction-violation . k4f4f) (make-error . k4f4e) (make-assertion-violation . k4f4d) (lexical-violation? . k4f4c) (irritants-condition? . k4f4b) (implementation-restriction-violation? . k4f4a) (error? . k4f49) (condition-who . k4f48) (condition-predicate . k4f47) (condition-message . k4f46) (condition-irritants . k4f45) (condition-accessor . k4f44) (condition . k4f43) (assertion-violation? . k4f42) (condition? . k4f41) (utf32->string . k4f40) (utf16->string . k4f3f) (utf8->string . k4f3e) (uint-list->bytevector . k4f3d) (u8-list->bytevector . k4f3c) (string->utf8 . k4f3b) (string->utf32 . k4f3a) (string->utf16 . k4f39) (sint-list->bytevector . k4f38) (native-endianness . k4f37) (bytevector? . k4f36) (bytevector=? . k4f35) (bytevector-uint-set! . k4f34) (bytevector-uint-ref . k4f33) (bytevector-u8-set! . k4f32) (bytevector-u8-ref . k4f31) (bytevector-u64-set! . k4f30) (bytevector-u64-ref . k4f2f) (bytevector-u64-native-set! . k4f2e) (bytevector-u64-native-ref . k4f2d) (bytevector-u32-set! . k4f2c) (bytevector-u32-ref . k4f2b) (bytevector-u32-native-set! . k4f2a) (bytevector-u32-native-ref . k4f29) (bytevector-u16-set! . k4f28) (bytevector-u16-ref . k4f27) (bytevector-u16-native-set! . k4f26) (bytevector-u16-native-ref . k4f25) (bytevector-sint-set! . k4f24) (bytevector-sint-ref . k4f23) (bytevector-s8-set! . k4f22) (bytevector-s8-ref . k4f21) (bytevector-s64-set! . k4f20) (bytevector-s64-ref . k4f1f) (bytevector-s64-native-set! . k4f1e) (bytevector-s64-native-ref . k4f1d) (bytevector-s32-set! . k4f1c) (bytevector-s32-ref . k4f1b) (bytevector-s32-native-set! . k4f1a) (bytevector-s32-native-ref . k4f19) (bytevector-s16-set! . k4f18) (bytevector-s16-ref . k4f17) (bytevector-s16-native-set! . k4f16) (bytevector-s16-native-ref . k4f15) (bytevector-length . k4f14) (bytevector-ieee-single-ref . k4f13) (bytevector-ieee-single-set! . k4f12) (bytevector-ieee-single-native-set! . k4f11) (bytevector-ieee-single-native-ref . k4f10) (bytevector-ieee-double-set! . k4f0f) (bytevector-ieee-double-ref . k4f0e) (bytevector-ieee-double-native-set! . k4f0d) (bytevector-ieee-double-native-ref . k4f0c) (bytevector-fill! . k4f0b) (bytevector-copy! . k4f0a) (bytevector-copy . k4f09) (bytevector->uint-list . k4f08) (bytevector->u8-list . k4f07) (bytevector->sint-list . k4f06) (no-nans-violation? . k4f05) (no-infinities-violation? . k4f04) (make-no-nans-violation . k4f03) (make-no-infinities-violation . k4f02) (real->flonum . k4f01) (flzero? . k4f00) (fltruncate . k4eff) (fltan . k4efe) (flsqrt . k4efd) (flsin . k4efc) (flround . k4efb) (flpositive? . k4efa) (flonum? . k4ef9) (flodd? . k4ef8) (flnumerator . k4ef7) (flnegative? . k4ef6) (flnan? . k4ef5) (flmod0 . k4ef4) (flmod . k4ef3) (flmin . k4ef2) (flmax . k4ef1) (fllog . k4ef0) (flinteger? . k4eef) (flinfinite? . k4eee) (flfloor . k4eed) (flfinite? . k4eec) (flexpt . k4eeb) (flexp . k4eea) (fleven? . k4ee9) (fldiv0-and-mod0 . k4ee8) (fldiv0 . k4ee7) (fldiv-and-mod . k4ee6) (fldiv . k4ee5) (fldenominator . k4ee4) (flcos . k4ee3) (flceiling . k4ee2) (flatan . k4ee1) (flasin . k4ee0) (flacos . k4edf) (flabs . k4ede) (fl>? . k4edd) (fl>=? . k4edc) (fl=? . k4edb) (fl<? . k4eda) (fl<=? . k4ed9) (fl/ . k4ed8) (fl- . k4ed7) (fl+ . k4ed6) (fl* . k4ed5) (fixnum->flonum . k4ed4) (fxzero? . k4ed3) (fxxor . k4ed2) (fxrotate-bit-field . k4ed1) (fxreverse-bit-field . k4ed0) (fxpositive? . k4ecf) (fxodd? . k4ece) (fxnot . k4ecd) (fxnegative? . k4ecc) (fxmod0 . k4ecb) (fxmod . k4eca) (fxmin . k4ec9) (fxmax . k4ec8) (fxlength . k4ec7) (fxior . k4ec6) (fxif . k4ec5) (fxfirst-bit-set . k4ec4) (fxeven? . k4ec3) (fxdiv0-and-mod0 . k4ec2) (fxdiv0 . k4ec1) (fxdiv-and-mod . k4ec0) (fxdiv . k4ebf) (fxcopy-bit-field . k4ebe) (fxcopy-bit . k4ebd) (fxbit-set? . k4ebc) (fxbit-field . k4ebb) (fxbit-count . k4eba) (fxarithmetic-shift-right . k4eb9) (fxarithmetic-shift-left . k4eb8) (fxarithmetic-shift . k4eb7) (fxand . k4eb6) (fx>? . k4eb5) (fx>=? . k4eb4) (fx=? . k4eb3) (fx<? . k4eb2) (fx<=? . k4eb1) (fx-/carry . k4eb0) (fx- . k4eaf) (fx+/carry . k4eae) (fx+ . k4ead) (fx*/carry . k4eac) (fx* . k4eab) (greatest-fixnum . k4eaa) (least-fixnum . k4ea9) (fixnum-width . k4ea8) (fixnum? . k4ea7) (bitwise-rotate-bit-field . k4ea6) (bitwise-reverse-bit-field . k4ea5) (bitwise-length . k4ea4) (bitwise-if . k4ea3) (bitwise-first-bit-set . k4ea2) (bitwise-copy-bit-field . k4ea1) (bitwise-copy-bit . k4ea0) (bitwise-bit-set? . k4e9f) (bitwise-bit-field . k4e9e) (bitwise-bit-count . k4e9d) (bitwise-xor . k4e9c) (bitwise-ior . k4e9b) (bitwise-and . k4e9a) (bitwise-not . k4e99) (bitwise-arithmetic-shift-right . k4e98) (bitwise-arithmetic-shift-left . k4e97) (bitwise-arithmetic-shift . k4e96) (zero? . k4e95) (vector? . k4e94) (vector-set! . k4e93) (vector-ref . k4e92) (vector-map . k4e91) (vector-length . k4e90) (vector-for-each . k4e8f) (vector-fill! . k4e8e) (vector->list . k4e8d) (vector . k4e8c) (values . k4e8b) (truncate . k4e8a) (tan . k4e89) (symbol? . k4e88) (symbol=? . k4e87) (symbol->string . k4e86) (substring . k4e85) (string? . k4e84) (string>? . k4e83) (string>=? . k4e82) (string=? . k4e81) (string<? . k4e80) (string<=? . k4e7f) (string-ref . k4e7e) (string-length . k4e7d) (string-for-each . k4e7c) (string-copy . k4e7b) (string-append . k4e7a) (string->symbol . k4e79) (string->number . k4e78) (string->list . k4e77) (string . k4e76) (sqrt . k4e75) (sin . k4e74) (round . k4e73) (reverse . k4e72) (real? . k4e71) (real-valued? . k4e70) (real-part . k4e6f) (rationalize . k4e6e) (rational? . k4e6d) (rational-valued? . k4e6c) (procedure? . k4e6b) (positive? . k4e6a) (pair? . k4e69) (odd? . k4e68) (numerator . k4e67) (number? . k4e66) (number->string . k4e65) (null? . k4e64) (not . k4e63) (negative? . k4e62) (nan? . k4e61) (min . k4e60) (max . k4e5f) (map . k4e5e) (make-vector . k4e5d) (make-string . k4e5c) (make-rectangular . k4e5b) (make-polar . k4e5a) (magnitude . k4e59) (log . k4e58) (list? . k4e57) (list-tail . k4e56) (list-ref . k4e55) (list->vector . k4e54) (list->string . k4e53) (list . k4e52) (length . k4e51) (lcm . k4e50) (integer? . k4e4f) (integer-valued? . k4e4e) (integer->char . k4e4d) (infinite? . k4e4c) (inexact? . k4e4b) (inexact . k4e4a) (imag-part . k4e49) (gcd . k4e48) (for-each . k4e47) (floor . k4e46) (finite? . k4e45) (expt . k4e44) (exp . k4e43) (exact? . k4e42) (exact-integer-sqrt . k4e41) (exact . k4e40) (even? . k4e3f) (error . k4e3e) (eqv? . k4e3d) (equal? . k4e3c) (eq? . k4e3b) (dynamic-wind . k4e3a) (div0-and-mod0 . k4e39) (mod0 . k4e38) (div0 . k4e37) (div-and-mod . k4e36) (mod . k4e35) (div . k4e34) (denominator . k4e33) (cos . k4e32) (cons . k4e31) (complex? . k4e30) (char? . k4e2f) (char>? . k4e2e) (char>=? . k4e2d) (char=? . k4e2c) (char<? . k4e2b) (char<=? . k4e2a) (char->integer . k4e29) (ceiling . k4e28) (call-with-values . k4e27) (call/cc . k4e26) (call-with-current-continuation . k4e25) (cddddr . k4e24) (cdddar . k4e23) (cddadr . k4e22) (cddaar . k4e21) (cdaddr . k4e20) (cdadar . k4e1f) (cdaadr . k4e1e) (cdaaar . k4e1d) (cadddr . k4e1c) (caddar . k4e1b) (cadadr . k4e1a) (cadaar . k4e19) (caaddr . k4e18) (caadar . k4e17) (caaadr . k4e16) (caaaar . k4e15) (cdddr . k4e14) (cddar . k4e13) (cdadr . k4e12) (cdaar . k4e11) (caddr . k4e10) (cadar . k4e0f) (caadr . k4e0e) (caaar . k4e0d) (cddr . k4e0c) (cdar . k4e0b) (cadr . k4e0a) (caar . k4e09) (cdr . k4e08) (car . k4e07) (boolean? . k4e06) (boolean=? . k4e05) (atan . k4e04) (assertion-violation . k4e03) (assertion-error . k319c) (asin . k4e02) (apply . k4e01) (append . k4e00) (angle . k4dff) (acos . k4dfe) (abs . k4dfd) (/ . k4dfc) (* . k4dfb) (- . k4dfa) (+ . k4df9) (>= . k4df8) (> . k4df7) (= . k4df6) (<= . k4df5) (< . k4df4) (library . k4df3) (&no-nans . k4df2) (&no-infinities . k4df1) (&i/o-encoding . k4df0) (&i/o-decoding . k4def) (&i/o-port . k4dee) (&i/o-file-does-not-exist . k4ded) (&i/o-file-already-exists . k4dec) (&i/o-file-is-read-only . k4deb) (&i/o-file-protection . k4dea) (&i/o-filename . k4de9) (&i/o-invalid-position . k4de8) (&i/o-write . k4de7) (&i/o-read . k4de6) (&i/o . k4de5) (&undefined . k4de4) (&syntax . k4de3) (&lexical . k4de2) (&implementation-restriction . k4de1) (&non-continuable . k4de0) (&who . k4ddf) (&irritants . k4dde) (&assertion . k4ddd) (&violation . k4ddc) (&error . k4ddb) (&serious . k4dda) (&warning . k4dd9) (&message . k4dd8) (&condition . k4dd7) (define-condition-type . k4dd6) (define-enumeration . k4dd5) (define-record-type . k4dd4) (parent-rtd . k4dd3) (nongenerative . k4dd2) (opaque . k4dd1) (sealed . k4dd0) (protocol . k4dcf) (parent . k4dce) (immutable . k4dcd) (mutable . k4dcc) (fields . k4dcb) (error-handling-mode . k4dca) (file-options . k4dc9) (buffer-mode . k4dc8) (eol-style . k4dc7) (guard . k4dc6) (trace-define . k4dc5) (trace-lambda . k4dc4) (unsyntax-splicing . k4dc3) (unsyntax . k4dc2) (unquote-splicing . k4dc1) (unquote . k4dc0) (_ . k4dbf) (else . k4dbe) (=> . k4dbd) (... . k4dbc) (assert . k4dbb) (endianness . k4dba) (delay . k4db9) (time . k4db8) (do . k4db7) (cond . k4db6) (let* . k4db5) (let*-values . k4db4) (let-values . k4db3) (identifier-syntax . k4db2) (with-syntax . k4db1) (quasisyntax . k4db0) (quasiquote . k4daf) (syntax-rules . k4dae) (include . k4dad) (define-struct . k4dac) (record-constructor-descriptor . k4dab) (record-type-descriptor . k4daa) (case . k4da9) (parameterize . k4da8) (unless . k4da7) (when . k4da6) (or . k4da5) (and . k4da4) (if . k4da3) (let . k4da2) (letrec* . k4da1) (letrec . k4da0) (type-descriptor . k4d9f) (case-lambda . k4d9e) (lambda . k4d9d) (syntax . k4d9c) (syntax-case . k4d9b) (quote . k4d9a) (foreign-call . k4d99) (letrec-syntax . k4d98) (let-syntax . k4d97) (set! . k4d96) (import . k4d95) (begin . k4d94) (module . k4d93) (define-syntax . k4d92) (define . k4d91)) '((k5137 core-prim . &no-nans-rcd) (k5136 core-prim . &no-nans-rtd) (k5135 core-prim . &no-infinities-rcd) (k5134 core-prim . &no-infinities-rtd) (k5133 core-prim . &i/o-encoding-rcd) (k5132 core-prim . &i/o-encoding-rtd) (k5131 core-prim . &i/o-decoding-rcd) (k5130 core-prim . &i/o-decoding-rtd) (k512f core-prim . &i/o-port-rcd) (k512e core-prim . &i/o-port-rtd) (k512d core-prim . &i/o-file-does-not-exist-rcd) (k512c core-prim . &i/o-file-does-not-exist-rtd) (k512b core-prim . &i/o-file-already-exists-rcd) (k512a core-prim . &i/o-file-already-exists-rtd) (k5129 core-prim . &i/o-file-is-read-only-rcd) (k5128 core-prim . &i/o-file-is-read-only-rtd) (k5127 core-prim . &i/o-file-protection-rcd) (k5126 core-prim . &i/o-file-protection-rtd) (k5125 core-prim . &i/o-filename-rcd) (k5124 core-prim . &i/o-filename-rtd) (k5123 core-prim . &i/o-invalid-position-rcd) (k5122 core-prim . &i/o-invalid-position-rtd) (k5121 core-prim . &i/o-write-rcd) (k5120 core-prim . &i/o-write-rtd) (k511f core-prim . &i/o-read-rcd) (k511e core-prim . &i/o-read-rtd) (k511d core-prim . &i/o-rcd) (k511c core-prim . &i/o-rtd) (k511b core-prim . &undefined-rcd) (k511a core-prim . &undefined-rtd) (k5119 core-prim . &syntax-rcd) (k5118 core-prim . &syntax-rtd) (k5117 core-prim . &lexical-rcd) (k5116 core-prim . &lexical-rtd) (k5115 core-prim . &implementation-restriction-rcd) (k5114 core-prim . &implementation-restriction-rtd) (k5113 core-prim . &non-continuable-rcd) (k5112 core-prim . &non-continuable-rtd) (k5111 core-prim . &who-rcd) (k5110 core-prim . &who-rtd) (k510f core-prim . &irritants-rcd) (k510e core-prim . &irritants-rtd) (k510d core-prim . &assertion-rcd) (k510c core-prim . &assertion-rtd) (k510b core-prim . &violation-rcd) (k510a core-prim . &violation-rtd) (k5109 core-prim . &error-rcd) (k5108 core-prim . &error-rtd) (k5107 core-prim . &serious-rcd) (k5106 core-prim . &serious-rtd) (k5105 core-prim . &warning-rcd) (k5104 core-prim . &warning-rtd) (k5103 core-prim . &message-rcd) (k5102 core-prim . &message-rtd) (k5101 core-prim . &condition-rcd) (k5100 core-prim . &condition-rtd) (k319e core-prim . syntax-error) (k30c2 core-prim . syntax-dispatch) (k50ff core-prim . pretty-print) (k50fe core-prim . eval-core) (k50fd core-prim . set-symbol-value!) (k50fc core-prim . symbol-value) (k50fb core-prim . gensym) (k50fa core-prim . void) (k4c2b core-prim . load) (k31b0 core-prim . interaction-environment) (k50f9 core-prim . char-ready?) (k50f8 core-prim . regexp?) (k50f7 core-prim . read-line) (k50f6 core-prim . gensym-prefix-set!) (k50f5 core-prim . ungensym) (k50f4 core-prim . alist->eq-hash-table) (k50f3 core-prim . assoc-ref) (k50f2 core-prim . print) (k50f1 core-prim . format) (k50f0 core-prim . host-os) (k2b01 core-prim . library-path) (k50ef core-prim . standard-library-path) (k50ee core-prim . ssl-supported?) (k50ed core-prim . ssl-socket?) (k50ec core-prim . socket-sslize!) (k50eb core-prim . %monapi-name-whereis) (k50ea core-prim . %monapi-message-send) (k50e9 core-prim . file-newer?) (k50e8 core-prim . stat-mtime) (k50e7 core-prim . write-to-file) (k50e6 core-prim . file->list) (k50e5 core-prim . file->string) (k50e4 core-prim . digit->integer) (k50e3 core-prim . call-with-string-input-port) (k50e2 core-prim . call-with-string-io) (k50e1 core-prim . string-split) (k50e0 core-prim . bytevector-for-each) (k50df core-prim . string->regexp) (k50de core-prim . rxmatch) (k50dd core-prim . regexp-replace-all) (k50dc core-prim . hashtable-fold-left) (k50db core-prim . hashtable-for-each) (k28eb core-prim . mosh-cache-dir) (k50da core-prim . call-process) (k50d9 core-prim . local-tz-offset) (k50d8 core-prim . microseconds) (k50d7 core-prim . directory-list) (k50d6 core-prim . set-current-directory!) (k50d5 core-prim . expand-path) (k50d4 core-prim . current-directory) (k50d3 core-prim . %spawn) (k50d2 core-prim . %waitpid) (k50d1 core-prim . simple-struct-name) (k50d0 core-prim . simple-struct-set!) (k50cf core-prim . simple-struct-ref) (k50ce core-prim . make-simple-struct) (k50cd core-prim . simple-struct?) (k50cc core-prim . pointer-ref-c-int64) (k50cb core-prim . pointer-ref-c-int32) (k50ca core-prim . pointer-ref-c-int16) (k50c9 core-prim . pointer-ref-c-int8) (k50c8 core-prim . pointer-ref-c-uint64) (k50c7 core-prim . pointer-ref-c-uint32) (k50c6 core-prim . pointer-ref-c-uint16) (k50c5 core-prim . pointer-ref-c-uint8) (k50c4 core-prim . pointer-set-c-uint64!) (k50c3 core-prim . pointer-set-c-uint32!) (k50c2 core-prim . pointer-set-c-uint16!) (k50c1 core-prim . pointer-set-c-uint8!) (k50c0 core-prim . pointer-set-c-int64!) (k50bf core-prim . pointer-set-c-int32!) (k50be core-prim . pointer-set-c-int16!) (k50bd core-prim . pointer-set-c-int8!) (k50bc core-prim . pointer-set-c-pointer!) (k50bb core-prim . pointer-set-c-double!) (k50ba core-prim . pointer-set-c-float!) (k50b9 core-prim . pointer-set-c-long-long!) (k50b8 core-prim . pointer-set-c-long!) (k50b7 core-prim . pointer-set-c-int!) (k50b6 core-prim . pointer-set-c-short!) (k50b5 core-prim . pointer-set-c-char!) (k50b4 core-prim . pointer-ref-c-pointer) (k50b3 core-prim . pointer-ref-c-double) (k50b2 core-prim . pointer-ref-c-float) (k50b1 core-prim . pointer-ref-c-unsigned-long-long) (k50b0 core-prim . pointer-ref-c-signed-long-long) (k50af core-prim . pointer-ref-c-unsigned-long) (k50ae core-prim . pointer-ref-c-signed-long) (k50ad core-prim . pointer-ref-c-unsigned-int) (k50ac core-prim . pointer-ref-c-signed-int) (k50ab core-prim . pointer-ref-c-unsigned-short) (k50aa core-prim . pointer-ref-c-signed-short) (k50a9 core-prim . pointer-ref-c-unsigned-char) (k50a8 core-prim . pointer-ref-c-signed-char) (k50a7 core-prim . pointer->integer) (k50a6 core-prim . integer->pointer) (k50a5 core-prim . pointer?) (k50a4 core-prim . shared-errno) (k50a3 core-prim . %ffi-free-c-callback-trampoline) (k50a2 core-prim . %ffi-make-c-callback-trampoline) (k50a1 core-prim . %ffi-free) (k50a0 core-prim . %ffi-malloc) (k509f core-prim . %ffi-supported?) (k509e core-prim . %ffi-pointer->string) (k509d core-prim . %ffi-call) (k509c core-prim . %ffi-lookup) (k509b core-prim . %ffi-open) (k509a core-prim . null-terminated-utf8->string) (k5099 core-prim . null-terminated-bytevector->string) (k5098 core-prim . %exec) (k5097 core-prim . %fork) (k5096 core-prim . %pipe) (k5095 core-prim . p) (k5094 core-prim . open-output-string) (k5093 core-prim . get-output-string) (k5092 core-prim . file-stat-ctime) (k5091 core-prim . file-stat-atime) (k5090 core-prim . file-stat-mtime) (k508f core-prim . file-size-in-bytes) (k508e core-prim . file-writable?) (k508d core-prim . file-executable?) (k508c core-prim . file-readable?) (k508b core-prim . file-regular?) (k508a core-prim . file-symbolic-link?) (k5089 core-prim . file-directory?) (k5088 core-prim . create-symbolic-link) (k5087 core-prim . rename-file) (k5086 core-prim . delete-directory) (k5085 core-prim . create-directory) (k5084 core-prim . create-mosh-cache-dir) (k5083 core-prim . get-environment-variables) (k5082 core-prim . current-exception-handler) (k5081 core-prim . get-environment-variable) (k5080 core-prim . join-wraps) (k507f core-prim . id->real-label) (k507e core-prim . same-marks?) (k507d core-prim . same-marks*?) (k507c core-prim . get-timeofday) (k507b core-prim . get-command-line) (k507a core-prim . sys-display) (k5079 core-prim . whereis) (k5078 core-prim . register) (k5077 core-prim . vm-join!) (k5076 core-prim . vm-set-value!) (k5075 core-prim . vm?) (k5074 core-prim . main-vm?) (k5073 core-prim . vm-eval) (k5072 core-prim . vm-self) (k5071 core-prim . vm-start!) (k5070 core-prim . make-vm) (k506f core-prim . mutex-try-lock!) (k506e core-prim . mutex-unlock!) (k506d core-prim . mutex-lock!) (k506c core-prim . mutex?) (k506b core-prim . make-mutex) (k506a core-prim . condition-variable-notify-all!) (k5069 core-prim . condition-variable-notify!) (k5068 core-prim . condition-variable-wait!) (k5067 core-prim . make-condition-variable) (k5066 core-prim . write/ss) (k5065 core-prim . mosh-executable-path) (k5064 core-prim . make-file-options) (k5063 core-prim . source-info) (k5062 core-prim . make-compiler-instruction) (k5061 core-prim . make-instruction) (k5060 core-prim . set-source-info!) (k505f core-prim . bignum?) (k505e core-prim . fast-equal?) (k505d core-prim . fasl-read) (k505c core-prim . fasl-write) (k505b core-prim . time-usage) (k505a core-prim . os-constant) (k5059 core-prim . condition-printer) (k5058 core-prim . disasm) (k28e9 core-prim . make-parameter) (k5057 core-prim . socket-port) (k5056 core-prim . socket-shutdown) (k5055 core-prim . socket-close) (k5054 core-prim . socket-send) (k5053 core-prim . socket-recv!) (k5052 core-prim . socket-recv) (k5051 core-prim . make-server-socket) (k5050 core-prim . make-client-socket) (k504f core-prim . socket-accept) (k504e core-prim . socket?) (k504d core-prim . string-upcase) (k504c core-prim . string-titlecase) (k504b core-prim . string-normalize-nfkd) (k504a core-prim . string-normalize-nfkc) (k5049 core-prim . string-normalize-nfd) (k5048 core-prim . string-normalize-nfc) (k5047 core-prim . string-foldcase) (k5046 core-prim . string-downcase) (k5045 core-prim . string-ci>?) (k5044 core-prim . string-ci>=?) (k5043 core-prim . string-ci=?) (k5042 core-prim . string-ci<?) (k5041 core-prim . string-ci<=?) (k5040 core-prim . char-whitespace?) (k503f core-prim . char-upper-case?) (k503e core-prim . char-title-case?) (k503d core-prim . char-numeric?) (k503c core-prim . char-lower-case?) (k503b core-prim . char-general-category) (k503a core-prim . char-upcase) (k5039 core-prim . char-titlecase) (k5038 core-prim . char-foldcase) (k5037 core-prim . char-downcase) (k5036 core-prim . char-ci>?) (k5035 core-prim . char-ci>=?) (k5034 core-prim . char-ci=?) (k5033 core-prim . char-ci<?) (k5032 core-prim . char-ci<=?) (k5031 core-prim . char-alphabetic?) (k2eed core-prim . make-variable-transformer) (k31a4 core-prim . identifier?) (k3190 core-prim . generate-temporaries) (k3192 core-prim . free-identifier=?) (k31a8 core-prim . syntax->datum) (k31a6 core-prim . datum->syntax) (k3194 core-prim . bound-identifier=?) (k5030 core-prim . record-type-descriptor?) (k502f core-prim . record-predicate) (k502e core-prim . record-mutator) (k502d core-prim . record-constructor) (k502c core-prim . record-accessor) (k502b core-prim . make-record-type-descriptor) (k502a core-prim . make-record-constructor-descriptor) (k5029 core-prim . record?) (k5028 core-prim . record-type-uid) (k5027 core-prim . record-type-sealed?) (k5026 core-prim . record-type-parent) (k5025 core-prim . record-type-opaque?) (k5024 core-prim . record-type-name) (k5023 core-prim . record-type-generative?) (k5022 core-prim . record-type-field-names) (k5021 core-prim . record-rtd) (k5020 core-prim . record-field-mutable?) (k501f core-prim . delete-file) (k501e core-prim . file-exists?) (k501d core-prim . vector-sort!) (k501c core-prim . vector-sort) (k501b core-prim . list-sort) (k501a core-prim . symbol-hash) (k5019 core-prim . string-ci-hash) (k5018 core-prim . string-hash) (k5017 core-prim . equal-hash) (k5016 core-prim . hashtable-equivalence-function) (k5015 core-prim . make-hashtable) (k5014 core-prim . hashtable-hash-function) (k5013 core-prim . make-eqv-hashtable) (k5012 core-prim . make-eq-hashtable) (k5011 core-prim . hashtable?) (k5010 core-prim . hashtable-update!) (k500f core-prim . hashtable-size) (k500e core-prim . hashtable-set!) (k500d core-prim . hashtable-ref) (k500c core-prim . hashtable-mutable?) (k500b core-prim . hashtable-keys) (k500a core-prim . hashtable-entries) (k5009 core-prim . hashtable-delete!) (k5008 core-prim . hashtable-copy) (k5007 core-prim . hashtable-contains?) (k5006 core-prim . hashtable-clear!) (k5005 core-prim . call-with-output-file) (k5004 core-prim . call-with-input-file) (k5003 core-prim . write-char) (k5002 core-prim . write) (k5001 core-prim . with-output-to-file) (k5000 core-prim . with-input-from-file) (k4fff core-prim . read-char) (k4ffe core-prim . read) (k4ffd core-prim . peek-char) (k4ffc core-prim . open-output-file) (k4ffb core-prim . open-input-file) (k4ffa core-prim . newline) (k4ff9 core-prim . display) (k4ff8 core-prim . close-output-port) (k4ff7 core-prim . close-input-port) (k4ff6 core-prim . eof-object?) (k4ff5 core-prim . eof-object) (k4ff4 core-prim . current-error-port) (k4ff3 core-prim . current-output-port) (k4ff2 core-prim . current-input-port) (k4ff1 core-prim . output-port?) (k4ff0 core-prim . input-port?) (k4fef core-prim . utf-8-codec) (k4fee core-prim . utf-16-codec) (k4fed core-prim . transcoder-error-handling-mode) (k4fec core-prim . transcoder-eol-style) (k4feb core-prim . transcoder-codec) (k4fea core-prim . transcoded-port) (k4fe9 core-prim . textual-port?) (k4fe8 core-prim . string->bytevector) (k4fe7 core-prim . standard-output-port) (k4fe6 core-prim . standard-input-port) (k4fe5 core-prim . standard-error-port) (k4fe4 core-prim . set-port-position!) (k4fe3 core-prim . put-u8) (k4fe2 core-prim . put-string) (k4fe1 core-prim . put-datum) (k4fe0 core-prim . put-char) (k4fdf core-prim . put-bytevector) (k4fde core-prim . port?) (k4fdd core-prim . port-transcoder) (k4fdc core-prim . port-position) (k4fdb core-prim . port-has-set-port-position!?) (k4fda core-prim . port-has-port-position?) (k4fd9 core-prim . port-eof?) (k4fd8 core-prim . output-port-buffer-mode) (k4fd7 core-prim . open-string-output-port) (k4fd6 core-prim . open-string-input-port) (k4fd5 core-prim . open-file-output-port) (k4fd4 core-prim . open-file-input/output-port) (k4fd3 core-prim . open-file-input-port) (k4fd2 core-prim . open-bytevector-output-port) (k4fd1 core-prim . open-bytevector-input-port) (k4fd0 core-prim . native-transcoder) (k4fcf core-prim . native-eol-style) (k4fce core-prim . make-transcoder) (k4fcd core-prim . latin-1-codec) (k4fcc core-prim . make-i/o-write-error) (k4fcb core-prim . make-i/o-read-error) (k4fca core-prim . make-i/o-port-error) (k4fc9 core-prim . make-i/o-invalid-position-error) (k4fc8 core-prim . make-i/o-filename-error) (k4fc7 core-prim . make-i/o-file-protection-error) (k4fc6 core-prim . make-i/o-file-is-read-only-error) (k4fc5 core-prim . make-i/o-file-does-not-exist-error) (k4fc4 core-prim . make-i/o-file-already-exists-error) (k4fc3 core-prim . make-i/o-error) (k4fc2 core-prim . make-i/o-encoding-error) (k4fc1 core-prim . make-i/o-decoding-error) (k4fc0 core-prim . make-custom-textual-output-port) (k4fbf core-prim . make-custom-textual-input/output-port) (k4fbe core-prim . make-custom-textual-input-port) (k4fbd core-prim . make-custom-binary-output-port) (k4fbc core-prim . make-custom-binary-input/output-port) (k4fbb core-prim . make-custom-binary-input-port) (k4fba core-prim . make-bytevector) (k4fb9 core-prim . lookahead-u8) (k4fb8 core-prim . lookahead-char) (k4fb7 core-prim . i/o-write-error?) (k4fb6 core-prim . i/o-read-error?) (k4fb5 core-prim . i/o-port-error?) (k4fb4 core-prim . i/o-invalid-position-error?) (k4fb3 core-prim . i/o-filename-error?) (k4fb2 core-prim . i/o-file-protection-error?) (k4fb1 core-prim . i/o-file-is-read-only-error?) (k4fb0 core-prim . i/o-file-does-not-exist-error?) (k4faf core-prim . i/o-file-already-exists-error?) (k4fae core-prim . i/o-error?) (k4fad core-prim . i/o-error-position) (k4fac core-prim . i/o-error-port) (k4fab core-prim . i/o-error-filename) (k4faa core-prim . i/o-encoding-error?) (k4fa9 core-prim . i/o-encoding-error-char) (k4fa8 core-prim . i/o-decoding-error?) (k4fa7 core-prim . get-u8) (k4fa6 core-prim . get-string-n!) (k4fa5 core-prim . get-string-n) (k4fa4 core-prim . get-string-all) (k4fa3 core-prim . get-line) (k4fa2 core-prim . get-datum) (k4fa1 core-prim . get-char) (k4fa0 core-prim . get-bytevector-some) (k4f9f core-prim . get-bytevector-n!) (k4f9e core-prim . get-bytevector-n) (k4f9d core-prim . get-bytevector-all) (k4f9c core-prim . flush-output-port) (k4f9b core-prim . close-port) (k317e core-prim . scheme-report-environment) (k4f9a core-prim . quotient) (k317c core-prim . null-environment) (k4f99 core-prim . remainder) (k4f98 core-prim . modulo) (k4f97 core-prim . inexact->exact) (k4f96 core-prim . force) (k4f95 core-prim . exact->inexact) (k4f94 core-prim . make-promise) (k4f93 core-prim . exit) (k4c25 core-prim . command-line) (k4f92 core-prim . string-fill!) (k4f91 core-prim . string-set!) (k4f90 core-prim . set-cdr!) (k4f8f core-prim . set-car!) (k4f8e core-prim . remove) (k4f8d core-prim . remv) (k4f8c core-prim . remp) (k4f8b core-prim . remq) (k4f8a core-prim . partition) (k4f89 core-prim . memv) (k4f88 core-prim . memq) (k4f87 core-prim . memp) (k4f86 core-prim . member) (k4f85 core-prim . exists) (k4f84 core-prim . for-all) (k4f83 core-prim . fold-right) (k4f82 core-prim . fold-left) (k4f81 core-prim . find) (k4f80 core-prim . filter) (k4f7f core-prim . cons*) (k4f7e core-prim . assv) (k4f7d core-prim . assq) (k4f7c core-prim . assp) (k4f7b core-prim . assoc) (k4f7a core-prim . call-with-string-output-port) (k4f79 core-prim . call-with-port) (k4f78 core-prim . call-with-bytevector-output-port) (k4f77 core-prim . bytevector->string) (k4f76 core-prim . buffer-mode?) (k4f75 core-prim . binary-port?) (k4f74 core-prim . with-exception-handler) (k4f73 core-prim . raise-continuable) (k4f72 core-prim . raise) (k3182 core-prim . eval) (k317a core-prim . environment) (k4f71 core-prim . make-enumeration) (k4f70 core-prim . enum-set=?) (k4f6f core-prim . enum-set-universe) (k4f6e core-prim . enum-set-union) (k4f6d core-prim . enum-set-subset?) (k4f6c core-prim . enum-set-projection) (k4f6b core-prim . enum-set-member?) (k4f6a core-prim . enum-set-intersection) (k4f69 core-prim . enum-set-indexer) (k4f68 core-prim . enum-set-difference) (k4f67 core-prim . enum-set-constructor) (k4f66 core-prim . enum-set-complement) (k4f65 core-prim . enum-set->list) (k4f64 core-prim . who-condition?) (k4f63 core-prim . warning?) (k4f62 core-prim . violation?) (k4f61 core-prim . undefined-violation?) (k4f60 core-prim . syntax-violation?) (k4f5f core-prim . syntax-violation-subform) (k4f5e core-prim . syntax-violation-form) (k31a2 core-prim . syntax-violation) (k4f5d core-prim . simple-conditions) (k4f5c core-prim . serious-condition?) (k4f5b core-prim . non-continuable-violation?) (k4f5a core-prim . message-condition?) (k4f59 core-prim . make-who-condition) (k4f58 core-prim . make-warning) (k4f57 core-prim . make-violation) (k4f56 core-prim . make-undefined-violation) (k4f55 core-prim . make-syntax-violation) (k4f54 core-prim . make-serious-condition) (k4f53 core-prim . make-non-continuable-violation) (k4f52 core-prim . make-message-condition) (k4f51 core-prim . make-lexical-violation) (k4f50 core-prim . make-irritants-condition) (k4f4f core-prim . make-implementation-restriction-violation) (k4f4e core-prim . make-error) (k4f4d core-prim . make-assertion-violation) (k4f4c core-prim . lexical-violation?) (k4f4b core-prim . irritants-condition?) (k4f4a core-prim . implementation-restriction-violation?) (k4f49 core-prim . error?) (k4f48 core-prim . condition-who) (k4f47 core-prim . condition-predicate) (k4f46 core-prim . condition-message) (k4f45 core-prim . condition-irritants) (k4f44 core-prim . condition-accessor) (k4f43 core-prim . condition) (k4f42 core-prim . assertion-violation?) (k4f41 core-prim . condition?) (k4f40 core-prim . utf32->string) (k4f3f core-prim . utf16->string) (k4f3e core-prim . utf8->string) (k4f3d core-prim . uint-list->bytevector) (k4f3c core-prim . u8-list->bytevector) (k4f3b core-prim . string->utf8) (k4f3a core-prim . string->utf32) (k4f39 core-prim . string->utf16) (k4f38 core-prim . sint-list->bytevector) (k4f37 core-prim . native-endianness) (k4f36 core-prim . bytevector?) (k4f35 core-prim . bytevector=?) (k4f34 core-prim . bytevector-uint-set!) (k4f33 core-prim . bytevector-uint-ref) (k4f32 core-prim . bytevector-u8-set!) (k4f31 core-prim . bytevector-u8-ref) (k4f30 core-prim . bytevector-u64-set!) (k4f2f core-prim . bytevector-u64-ref) (k4f2e core-prim . bytevector-u64-native-set!) (k4f2d core-prim . bytevector-u64-native-ref) (k4f2c core-prim . bytevector-u32-set!) (k4f2b core-prim . bytevector-u32-ref) (k4f2a core-prim . bytevector-u32-native-set!) (k4f29 core-prim . bytevector-u32-native-ref) (k4f28 core-prim . bytevector-u16-set!) (k4f27 core-prim . bytevector-u16-ref) (k4f26 core-prim . bytevector-u16-native-set!) (k4f25 core-prim . bytevector-u16-native-ref) (k4f24 core-prim . bytevector-sint-set!) (k4f23 core-prim . bytevector-sint-ref) (k4f22 core-prim . bytevector-s8-set!) (k4f21 core-prim . bytevector-s8-ref) (k4f20 core-prim . bytevector-s64-set!) (k4f1f core-prim . bytevector-s64-ref) (k4f1e core-prim . bytevector-s64-native-set!) (k4f1d core-prim . bytevector-s64-native-ref) (k4f1c core-prim . bytevector-s32-set!) (k4f1b core-prim . bytevector-s32-ref) (k4f1a core-prim . bytevector-s32-native-set!) (k4f19 core-prim . bytevector-s32-native-ref) (k4f18 core-prim . bytevector-s16-set!) (k4f17 core-prim . bytevector-s16-ref) (k4f16 core-prim . bytevector-s16-native-set!) (k4f15 core-prim . bytevector-s16-native-ref) (k4f14 core-prim . bytevector-length) (k4f13 core-prim . bytevector-ieee-single-ref) (k4f12 core-prim . bytevector-ieee-single-set!) (k4f11 core-prim . bytevector-ieee-single-native-set!) (k4f10 core-prim . bytevector-ieee-single-native-ref) (k4f0f core-prim . bytevector-ieee-double-set!) (k4f0e core-prim . bytevector-ieee-double-ref) (k4f0d core-prim . bytevector-ieee-double-native-set!) (k4f0c core-prim . bytevector-ieee-double-native-ref) (k4f0b core-prim . bytevector-fill!) (k4f0a core-prim . bytevector-copy!) (k4f09 core-prim . bytevector-copy) (k4f08 core-prim . bytevector->uint-list) (k4f07 core-prim . bytevector->u8-list) (k4f06 core-prim . bytevector->sint-list) (k4f05 core-prim . no-nans-violation?) (k4f04 core-prim . no-infinities-violation?) (k4f03 core-prim . make-no-nans-violation) (k4f02 core-prim . make-no-infinities-violation) (k4f01 core-prim . real->flonum) (k4f00 core-prim . flzero?) (k4eff core-prim . fltruncate) (k4efe core-prim . fltan) (k4efd core-prim . flsqrt) (k4efc core-prim . flsin) (k4efb core-prim . flround) (k4efa core-prim . flpositive?) (k4ef9 core-prim . flonum?) (k4ef8 core-prim . flodd?) (k4ef7 core-prim . flnumerator) (k4ef6 core-prim . flnegative?) (k4ef5 core-prim . flnan?) (k4ef4 core-prim . flmod0) (k4ef3 core-prim . flmod) (k4ef2 core-prim . flmin) (k4ef1 core-prim . flmax) (k4ef0 core-prim . fllog) (k4eef core-prim . flinteger?) (k4eee core-prim . flinfinite?) (k4eed core-prim . flfloor) (k4eec core-prim . flfinite?) (k4eeb core-prim . flexpt) (k4eea core-prim . flexp) (k4ee9 core-prim . fleven?) (k4ee8 core-prim . fldiv0-and-mod0) (k4ee7 core-prim . fldiv0) (k4ee6 core-prim . fldiv-and-mod) (k4ee5 core-prim . fldiv) (k4ee4 core-prim . fldenominator) (k4ee3 core-prim . flcos) (k4ee2 core-prim . flceiling) (k4ee1 core-prim . flatan) (k4ee0 core-prim . flasin) (k4edf core-prim . flacos) (k4ede core-prim . flabs) (k4edd core-prim . fl>?) (k4edc core-prim . fl>=?) (k4edb core-prim . fl=?) (k4eda core-prim . fl<?) (k4ed9 core-prim . fl<=?) (k4ed8 core-prim . fl/) (k4ed7 core-prim . fl-) (k4ed6 core-prim . fl+) (k4ed5 core-prim . fl*) (k4ed4 core-prim . fixnum->flonum) (k4ed3 core-prim . fxzero?) (k4ed2 core-prim . fxxor) (k4ed1 core-prim . fxrotate-bit-field) (k4ed0 core-prim . fxreverse-bit-field) (k4ecf core-prim . fxpositive?) (k4ece core-prim . fxodd?) (k4ecd core-prim . fxnot) (k4ecc core-prim . fxnegative?) (k4ecb core-prim . fxmod0) (k4eca core-prim . fxmod) (k4ec9 core-prim . fxmin) (k4ec8 core-prim . fxmax) (k4ec7 core-prim . fxlength) (k4ec6 core-prim . fxior) (k4ec5 core-prim . fxif) (k4ec4 core-prim . fxfirst-bit-set) (k4ec3 core-prim . fxeven?) (k4ec2 core-prim . fxdiv0-and-mod0) (k4ec1 core-prim . fxdiv0) (k4ec0 core-prim . fxdiv-and-mod) (k4ebf core-prim . fxdiv) (k4ebe core-prim . fxcopy-bit-field) (k4ebd core-prim . fxcopy-bit) (k4ebc core-prim . fxbit-set?) (k4ebb core-prim . fxbit-field) (k4eba core-prim . fxbit-count) (k4eb9 core-prim . fxarithmetic-shift-right) (k4eb8 core-prim . fxarithmetic-shift-left) (k4eb7 core-prim . fxarithmetic-shift) (k4eb6 core-prim . fxand) (k4eb5 core-prim . fx>?) (k4eb4 core-prim . fx>=?) (k4eb3 core-prim . fx=?) (k4eb2 core-prim . fx<?) (k4eb1 core-prim . fx<=?) (k4eb0 core-prim . fx-/carry) (k4eaf core-prim . fx-) (k4eae core-prim . fx+/carry) (k4ead core-prim . fx+) (k4eac core-prim . fx*/carry) (k4eab core-prim . fx*) (k4eaa core-prim . greatest-fixnum) (k4ea9 core-prim . least-fixnum) (k4ea8 core-prim . fixnum-width) (k4ea7 core-prim . fixnum?) (k4ea6 core-prim . bitwise-rotate-bit-field) (k4ea5 core-prim . bitwise-reverse-bit-field) (k4ea4 core-prim . bitwise-length) (k4ea3 core-prim . bitwise-if) (k4ea2 core-prim . bitwise-first-bit-set) (k4ea1 core-prim . bitwise-copy-bit-field) (k4ea0 core-prim . bitwise-copy-bit) (k4e9f core-prim . bitwise-bit-set?) (k4e9e core-prim . bitwise-bit-field) (k4e9d core-prim . bitwise-bit-count) (k4e9c core-prim . bitwise-xor) (k4e9b core-prim . bitwise-ior) (k4e9a core-prim . bitwise-and) (k4e99 core-prim . bitwise-not) (k4e98 core-prim . bitwise-arithmetic-shift-right) (k4e97 core-prim . bitwise-arithmetic-shift-left) (k4e96 core-prim . bitwise-arithmetic-shift) (k4e95 core-prim . zero?) (k4e94 core-prim . vector?) (k4e93 core-prim . vector-set!) (k4e92 core-prim . vector-ref) (k4e91 core-prim . vector-map) (k4e90 core-prim . vector-length) (k4e8f core-prim . vector-for-each) (k4e8e core-prim . vector-fill!) (k4e8d core-prim . vector->list) (k4e8c core-prim . vector) (k4e8b core-prim . values) (k4e8a core-prim . truncate) (k4e89 core-prim . tan) (k4e88 core-prim . symbol?) (k4e87 core-prim . symbol=?) (k4e86 core-prim . symbol->string) (k4e85 core-prim . substring) (k4e84 core-prim . string?) (k4e83 core-prim . string>?) (k4e82 core-prim . string>=?) (k4e81 core-prim . string=?) (k4e80 core-prim . string<?) (k4e7f core-prim . string<=?) (k4e7e core-prim . string-ref) (k4e7d core-prim . string-length) (k4e7c core-prim . string-for-each) (k4e7b core-prim . string-copy) (k4e7a core-prim . string-append) (k4e79 core-prim . string->symbol) (k4e78 core-prim . string->number) (k4e77 core-prim . string->list) (k4e76 core-prim . string) (k4e75 core-prim . sqrt) (k4e74 core-prim . sin) (k4e73 core-prim . round) (k4e72 core-prim . reverse) (k4e71 core-prim . real?) (k4e70 core-prim . real-valued?) (k4e6f core-prim . real-part) (k4e6e core-prim . rationalize) (k4e6d core-prim . rational?) (k4e6c core-prim . rational-valued?) (k4e6b core-prim . procedure?) (k4e6a core-prim . positive?) (k4e69 core-prim . pair?) (k4e68 core-prim . odd?) (k4e67 core-prim . numerator) (k4e66 core-prim . number?) (k4e65 core-prim . number->string) (k4e64 core-prim . null?) (k4e63 core-prim . not) (k4e62 core-prim . negative?) (k4e61 core-prim . nan?) (k4e60 core-prim . min) (k4e5f core-prim . max) (k4e5e core-prim . map) (k4e5d core-prim . make-vector) (k4e5c core-prim . make-string) (k4e5b core-prim . make-rectangular) (k4e5a core-prim . make-polar) (k4e59 core-prim . magnitude) (k4e58 core-prim . log) (k4e57 core-prim . list?) (k4e56 core-prim . list-tail) (k4e55 core-prim . list-ref) (k4e54 core-prim . list->vector) (k4e53 core-prim . list->string) (k4e52 core-prim . list) (k4e51 core-prim . length) (k4e50 core-prim . lcm) (k4e4f core-prim . integer?) (k4e4e core-prim . integer-valued?) (k4e4d core-prim . integer->char) (k4e4c core-prim . infinite?) (k4e4b core-prim . inexact?) (k4e4a core-prim . inexact) (k4e49 core-prim . imag-part) (k4e48 core-prim . gcd) (k4e47 core-prim . for-each) (k4e46 core-prim . floor) (k4e45 core-prim . finite?) (k4e44 core-prim . expt) (k4e43 core-prim . exp) (k4e42 core-prim . exact?) (k4e41 core-prim . exact-integer-sqrt) (k4e40 core-prim . exact) (k4e3f core-prim . even?) (k4e3e core-prim . error) (k4e3d core-prim . eqv?) (k4e3c core-prim . equal?) (k4e3b core-prim . eq?) (k4e3a core-prim . dynamic-wind) (k4e39 core-prim . div0-and-mod0) (k4e38 core-prim . mod0) (k4e37 core-prim . div0) (k4e36 core-prim . div-and-mod) (k4e35 core-prim . mod) (k4e34 core-prim . div) (k4e33 core-prim . denominator) (k4e32 core-prim . cos) (k4e31 core-prim . cons) (k4e30 core-prim . complex?) (k4e2f core-prim . char?) (k4e2e core-prim . char>?) (k4e2d core-prim . char>=?) (k4e2c core-prim . char=?) (k4e2b core-prim . char<?) (k4e2a core-prim . char<=?) (k4e29 core-prim . char->integer) (k4e28 core-prim . ceiling) (k4e27 core-prim . call-with-values) (k4e26 core-prim . call/cc) (k4e25 core-prim . call-with-current-continuation) (k4e24 core-prim . cddddr) (k4e23 core-prim . cdddar) (k4e22 core-prim . cddadr) (k4e21 core-prim . cddaar) (k4e20 core-prim . cdaddr) (k4e1f core-prim . cdadar) (k4e1e core-prim . cdaadr) (k4e1d core-prim . cdaaar) (k4e1c core-prim . cadddr) (k4e1b core-prim . caddar) (k4e1a core-prim . cadadr) (k4e19 core-prim . cadaar) (k4e18 core-prim . caaddr) (k4e17 core-prim . caadar) (k4e16 core-prim . caaadr) (k4e15 core-prim . caaaar) (k4e14 core-prim . cdddr) (k4e13 core-prim . cddar) (k4e12 core-prim . cdadr) (k4e11 core-prim . cdaar) (k4e10 core-prim . caddr) (k4e0f core-prim . cadar) (k4e0e core-prim . caadr) (k4e0d core-prim . caaar) (k4e0c core-prim . cddr) (k4e0b core-prim . cdar) (k4e0a core-prim . cadr) (k4e09 core-prim . caar) (k4e08 core-prim . cdr) (k4e07 core-prim . car) (k4e06 core-prim . boolean?) (k4e05 core-prim . boolean=?) (k4e04 core-prim . atan) (k4e03 core-prim . assertion-violation) (k319c core-prim . assertion-error) (k4e02 core-prim . asin) (k4e01 core-prim . apply) (k4e00 core-prim . append) (k4dff core-prim . angle) (k4dfe core-prim . acos) (k4dfd core-prim . abs) (k4dfc core-prim . /) (k4dfb core-prim . *) (k4dfa core-prim . -) (k4df9 core-prim . +) (k4df8 core-prim . >=) (k4df7 core-prim . >) (k4df6 core-prim . =) (k4df5 core-prim . <=) (k4df4 core-prim . <) (k4df3 core-prim . library) (k4df2 $core-rtd &no-nans-rtd &no-nans-rcd) (k4df1 $core-rtd &no-infinities-rtd &no-infinities-rcd) (k4df0 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (k4def $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (k4dee $core-rtd &i/o-port-rtd &i/o-port-rcd) (k4ded $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (k4dec $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (k4deb $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (k4dea $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (k4de9 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (k4de8 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (k4de7 $core-rtd &i/o-write-rtd &i/o-write-rcd) (k4de6 $core-rtd &i/o-read-rtd &i/o-read-rcd) (k4de5 $core-rtd &i/o-rtd &i/o-rcd) (k4de4 $core-rtd &undefined-rtd &undefined-rcd) (k4de3 $core-rtd &syntax-rtd &syntax-rcd) (k4de2 $core-rtd &lexical-rtd &lexical-rcd) (k4de1 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (k4de0 $core-rtd &non-continuable-rtd &non-continuable-rcd) (k4ddf $core-rtd &who-rtd &who-rcd) (k4dde $core-rtd &irritants-rtd &irritants-rcd) (k4ddd $core-rtd &assertion-rtd &assertion-rcd) (k4ddc $core-rtd &violation-rtd &violation-rcd) (k4ddb $core-rtd &error-rtd &error-rcd) (k4dda $core-rtd &serious-rtd &serious-rcd) (k4dd9 $core-rtd &warning-rtd &warning-rcd) (k4dd8 $core-rtd &message-rtd &message-rcd) (k4dd7 $core-rtd &condition-rtd &condition-rcd) (k4dd6 macro . define-condition-type) (k4dd5 macro . define-enumeration) (k4dd4 macro . define-record-type) (k4dd3 macro . parent-rtd) (k4dd2 macro . nongenerative) (k4dd1 macro . opaque) (k4dd0 macro . sealed) (k4dcf macro . protocol) (k4dce macro . parent) (k4dcd macro . immutable) (k4dcc macro . mutable) (k4dcb macro . fields) (k4dca macro . error-handling-mode) (k4dc9 macro . file-options) (k4dc8 macro . buffer-mode) (k4dc7 macro . eol-style) (k4dc6 macro . guard) (k4dc5 macro . trace-define) (k4dc4 macro . trace-lambda) (k4dc3 macro . unsyntax-splicing) (k4dc2 macro . unsyntax) (k4dc1 macro . unquote-splicing) (k4dc0 macro . unquote) (k4dbf macro . _) (k4dbe macro . else) (k4dbd macro . =>) (k4dbc macro . ...) (k4dbb macro . assert) (k4dba macro . endianness) (k4db9 macro . delay) (k4db8 macro . time) (k4db7 macro . do) (k4db6 macro . cond) (k4db5 macro . let*) (k4db4 macro . let*-values) (k4db3 macro . let-values) (k4db2 macro . identifier-syntax) (k4db1 macro . with-syntax) (k4db0 macro . quasisyntax) (k4daf macro . quasiquote) (k4dae macro . syntax-rules) (k4dad macro . include) (k4dac macro . define-struct) (k4dab core-macro . record-constructor-descriptor) (k4daa core-macro . record-type-descriptor) (k4da9 macro . case) (k4da8 macro . parameterize) (k4da7 macro . unless) (k4da6 macro . when) (k4da5 core-macro . or) (k4da4 core-macro . and) (k4da3 core-macro . if) (k4da2 core-macro . let) (k4da1 core-macro . letrec*) (k4da0 core-macro . letrec) (k4d9f core-macro . type-descriptor) (k4d9e core-macro . case-lambda) (k4d9d core-macro . lambda) (k4d9c core-macro . syntax) (k4d9b core-macro . syntax-case) (k4d9a core-macro . quote) (k4d99 core-macro . foreign-call) (k4d98 letrec-syntax) (k4d97 let-syntax) (k4d96 set!) (k4d95 import) (k4d94 begin) (k4d93 module) (k4d92 define-syntax) (k4d91 define)) values values '#f '#f '#f '#f) (k2cd6@k2b22@install-library 'k5158 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . k50ff) (eval-core . k50fe) (set-symbol-value! . k50fd) (symbol-value . k50fc) (gensym . k50fb) (void . k50fa)) '() values values '#f '#f '#f '#f) (k2cd6@k2b22@install-library 'k5159 '(mosh) '() '() '() '() '((set-symbol-value! . k50fd) (symbol-value . k50fc) (regexp? . k50f8) (read-line . k50f7) (ungensym . k50f5) (alist->eq-hash-table . k50f4) (assoc-ref . k50f3) (print . k50f2) (format . k50f1) (host-os . k50f0) (library-path . k2b01) (standard-library-path . k50ef) (file-newer? . k50e9) (stat-mtime . k50e8) (digit->integer . k50e4) (call-with-string-input-port . k50e3) (call-with-string-io . k50e2) (string-split . k50e1) (bytevector-for-each . k50e0) (string->regexp . k50df) (rxmatch . k50de) (regexp-replace-all . k50dd) (hashtable-fold-left . k50dc) (hashtable-for-each . k50db) (set-current-directory! . k50d6) (expand-path . k50d5) (current-directory . k50d4) (p . k5095) (get-timeofday . k507c) (get-command-line . k507b) (sys-display . k507a) (whereis . k5079) (register . k5078) (vm-join! . k5077) (vm-set-value! . k5076) (vm? . k5075) (main-vm? . k5074) (vm-eval . k5073) (vm-self . k5072) (vm-start! . k5071) (make-vm . k5070) (mutex-try-lock! . k506f) (mutex-unlock! . k506e) (mutex-lock! . k506d) (mutex? . k506c) (make-mutex . k506b) (condition-variable-notify-all! . k506a) (condition-variable-notify! . k5069) (condition-variable-wait! . k5068) (make-condition-variable . k5067) (write/ss . k5066) (mosh-executable-path . k5065) (make-file-options . k5064) (source-info . k5063) (make-compiler-instruction . k5062) (make-instruction . k5061) (set-source-info! . k5060) (bignum? . k505f) (fast-equal? . k505e) (fasl-read . k505d) (fasl-write . k505c) (time-usage . k505b) (os-constant . k505a) (condition-printer . k5059) (time . k4db8) (include . k4dad)) '() values values '#f '#f '#f '#f) (k2cd6@k2b22@install-library 'k515a '(system) '() '() '() '() '((gensym-prefix-set! . k50f6) (ssl-supported? . k50ee) (ssl-socket? . k50ed) (socket-sslize! . k50ec) (%monapi-name-whereis . k50eb) (%monapi-message-send . k50ea) (write-to-file . k50e7) (file->list . k50e6) (file->string . k50e5) (mosh-cache-dir . k28eb) (call-process . k50da) (local-tz-offset . k50d9) (microseconds . k50d8) (directory-list . k50d7) (expand-path . k50d5) (%spawn . k50d3) (%waitpid . k50d2) (simple-struct-name . k50d1) (simple-struct-set! . k50d0) (simple-struct-ref . k50cf) (make-simple-struct . k50ce) (simple-struct? . k50cd) (pointer-ref-c-int64 . k50cc) (pointer-ref-c-int32 . k50cb) (pointer-ref-c-int16 . k50ca) (pointer-ref-c-int8 . k50c9) (pointer-ref-c-uint64 . k50c8) (pointer-ref-c-uint32 . k50c7) (pointer-ref-c-uint16 . k50c6) (pointer-ref-c-uint8 . k50c5) (pointer-set-c-uint64! . k50c4) (pointer-set-c-uint32! . k50c3) (pointer-set-c-uint16! . k50c2) (pointer-set-c-uint8! . k50c1) (pointer-set-c-int64! . k50c0) (pointer-set-c-int32! . k50bf) (pointer-set-c-int16! . k50be) (pointer-set-c-int8! . k50bd) (pointer-set-c-pointer! . k50bc) (pointer-set-c-double! . k50bb) (pointer-set-c-float! . k50ba) (pointer-set-c-long-long! . k50b9) (pointer-set-c-long! . k50b8) (pointer-set-c-int! . k50b7) (pointer-set-c-short! . k50b6) (pointer-set-c-char! . k50b5) (pointer-ref-c-pointer . k50b4) (pointer-ref-c-double . k50b3) (pointer-ref-c-float . k50b2) (pointer-ref-c-unsigned-long-long . k50b1) (pointer-ref-c-signed-long-long . k50b0) (pointer-ref-c-unsigned-long . k50af) (pointer-ref-c-signed-long . k50ae) (pointer-ref-c-unsigned-int . k50ad) (pointer-ref-c-signed-int . k50ac) (pointer-ref-c-unsigned-short . k50ab) (pointer-ref-c-signed-short . k50aa) (pointer-ref-c-unsigned-char . k50a9) (pointer-ref-c-signed-char . k50a8) (pointer->integer . k50a7) (integer->pointer . k50a6) (pointer? . k50a5) (shared-errno . k50a4) (%ffi-free-c-callback-trampoline . k50a3) (%ffi-make-c-callback-trampoline . k50a2) (%ffi-free . k50a1) (%ffi-malloc . k50a0) (%ffi-supported? . k509f) (%ffi-pointer->string . k509e) (%ffi-call . k509d) (%ffi-lookup . k509c) (%ffi-open . k509b) (null-terminated-utf8->string . k509a) (null-terminated-bytevector->string . k5099) (%exec . k5098) (%fork . k5097) (%pipe . k5096) (open-output-string . k5094) (get-output-string . k5093) (file-stat-ctime . k5092) (file-stat-atime . k5091) (file-stat-mtime . k5090) (file-size-in-bytes . k508f) (file-writable? . k508e) (file-executable? . k508d) (file-readable? . k508c) (file-regular? . k508b) (file-symbolic-link? . k508a) (file-directory? . k5089) (create-symbolic-link . k5088) (rename-file . k5087) (delete-directory . k5086) (create-directory . k5085) (create-mosh-cache-dir . k5084) (get-environment-variables . k5083) (current-exception-handler . k5082) (get-environment-variable . k5081) (join-wraps . k5080) (id->real-label . k507f) (same-marks? . k507e) (same-marks*? . k507d) (disasm . k5058) (make-parameter . k28e9) (socket-port . k5057) (socket-shutdown . k5056) (socket-close . k5055) (socket-send . k5054) (socket-recv! . k5053) (socket-recv . k5052) (make-server-socket . k5051) (make-client-socket . k5050) (socket-accept . k504f) (socket? . k504e) (parameterize . k4da8)) '() values values '#f '#f '#f '#f)))
(begin (set! k4c10@ref (unspecified)) (set! k4c12@x* (unspecified)) (set! k4c14@add-library-path! (unspecified)) (set! k4c16@parse-and-add-library-path (unspecified)) (set! k4c18@for-each-with-index (unspecified)) (set! k4c1a@rpad (unspecified)) (set! k4c1c@condition-printer/p (unspecified)) (set! k4c1e@record->field-alist (unspecified)) (set! k4c20@map-with-index (unspecified)) (set! k4c22@repl (unspecified)) (set! k4c24@trace-printer (unspecified)) (set! k4c26@command-line (unspecified)) (set! k4c28@local-library-path (unspecified)) (set! k4c2a@load/args (unspecified)) (set! k4c2c@load (unspecified)) (set! k4c2e@ironscheme-build (unspecified)) (set! k4c30@eval-top-level (unspecified)) (set! k4c32@compile-system-libraries (unspecified)) (set! k4c34@compile (unspecified)) (set! k4c36@compile->closure (unspecified)) (set! k4c38@pre-compile-r6rs-file (unspecified)) (set! k4c3a@load-r6rs-top-level (unspecified)) (set! k4c3c@load-r6rs-top-level-sexp (unspecified)) (set! k4c3e@prefix-inc (unspecified)) (set! k4c40@prefix-inc! (unspecified)) (set! k4c10@ref (lambda (k4c7b@rtd k4c7c@i k4c7d@x) (let ((k4c81@val ((record-accessor k4c7b@rtd k4c7c@i) k4c7d@x))) (if (symbol? k4c81@val) (ungensym k4c81@val) k4c81@val)))) (set! k4d77@k4c10@ref k4c10@ref) (set! k4c12@x* '()) (set! k4d78@k4c12@x* k4c12@x*) (set! k4c14@add-library-path! (lambda (k4c83@path) (k2cc6@k2b02@library-path (append (k2cc6@k2b02@library-path) (list k4c83@path))))) (set! k4d79@k4c14@add-library-path! k4c14@add-library-path!) (set! k4c16@parse-and-add-library-path (lambda (k4c85@paths k4c86@message) (letrec* ((k4c8a@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((k4c8b@t k4c85@paths)) (if k4c8b@t ((lambda (k4c8d@paths) (for-each (lambda (k4c8f@path) (if (file-exists? k4c8f@path) (k4c14@add-library-path! (expand-path k4c8f@path)) (format (current-error-port) k4c86@message k4c8f@path))) (string-split k4c8d@paths k4c8a@separator))) k4c8b@t) (void)))))) (set! k4d7a@k4c16@parse-and-add-library-path k4c16@parse-and-add-library-path) (set! k4c18@for-each-with-index (lambda (k4c91@proc k4c92@lst) (letrec ((k4c95@loop (lambda (k4c97@i k4c98@lst) (if (null? k4c98@lst) (if '#f '#f (void)) (begin (k4c91@proc k4c97@i (car k4c98@lst)) (k4c95@loop (+ k4c97@i '1) (cdr k4c98@lst))))))) (k4c95@loop '1 k4c92@lst)))) (set! k4d7b@k4c18@for-each-with-index k4c18@for-each-with-index) (set! k4c1a@rpad (lambda (k4c9b@str k4c9c@pad k4c9d@n) (let ((k4ca1@rest (- k4c9d@n (string-length (format '"~a" k4c9b@str))))) (let k4ca7@loop ((k4ca3@rest k4ca1@rest) (k4ca4@ret (format '"~a" k4c9b@str))) (if (<= k4ca3@rest '0) k4ca4@ret (k4ca7@loop (- k4ca3@rest '1) (string-append k4ca4@ret k4c9c@pad))))))) (set! k4d7c@k4c1a@rpad k4c1a@rpad) (set! k4c1c@condition-printer/p (lambda (k4ca9@e k4caa@port) (letrec* ((k4cae@max-condition-len (apply max (map (lambda (k4cbf@c) (string-length (symbol->string (record-type-name (record-rtd k4cbf@c))))) (simple-conditions k4ca9@e))))) (begin (display '" Condition components:\n" k4caa@port) (k4c18@for-each-with-index (lambda (k4caf@i k4cb0@x) (let ((k4cb3@rtd (record-rtd k4cb0@x)) (k4cb4@fields-alist (k4c1e@record->field-alist k4cb0@x))) (begin (format k4caa@port '" ~d. ~a" k4caf@i (k4c1a@rpad (symbol->string (record-type-name k4cb3@rtd)) '" " k4cae@max-condition-len)) (if (null? k4cb4@fields-alist) (newline k4caa@port) (void)) (let k4cbb@loop ((k4cb7@first '#t) (k4cb8@fields-alist k4cb4@fields-alist)) (if (null? k4cb8@fields-alist) '() (let ((k4cbd@field (car k4cb8@fields-alist))) (begin (if (not k4cb7@first) (display (k4c1a@rpad '"" '" " (+ '4 k4cae@max-condition-len)) k4caa@port) (void)) (display '"       " k4caa@port) (display (car k4cbd@field) k4caa@port) (display '": " k4caa@port) (write (cdr k4cbd@field) k4caa@port) (newline k4caa@port) (k4cbb@loop '#f (cdr k4cb8@fields-alist))))))))) (simple-conditions k4ca9@e)))))) (set! k4d7d@k4c1c@condition-printer/p k4c1c@condition-printer/p) (set! k4c1e@record->field-alist (lambda (k4cc1@r) (letrec* ((k4cc4@ref (lambda (k4ccf@rtd k4cd0@i k4cd1@x) (let ((k4cd5@val ((record-accessor k4ccf@rtd k4cd0@i) k4cd1@x))) (if (symbol? k4cd5@val) (ungensym k4cd5@val) k4cd5@val))))) (let k4cc9@loop ((k4cc5@ret '()) (k4cc6@rtd (record-rtd k4cc1@r))) (if k4cc6@rtd (k4cc9@loop (append k4cc5@ret (k4c20@map-with-index (lambda (k4ccb@i k4ccc@field) (cons k4ccc@field (k4cc4@ref k4cc6@rtd k4ccb@i k4cc1@r))) (vector->list (record-type-field-names k4cc6@rtd)))) (record-type-parent k4cc6@rtd)) k4cc5@ret))))) (set! k4d7e@k4c1e@record->field-alist k4c1e@record->field-alist) (set! k4c20@map-with-index (lambda (k4cd7@proc k4cd8@lst) (let k4ce1@loop ((k4cdb@i '0) (k4cdc@lst k4cd8@lst) (k4cdd@ret '())) (if (null? k4cdc@lst) (reverse k4cdd@ret) (k4ce1@loop (+ k4cdb@i '1) (cdr k4cdc@lst) (cons (k4cd7@proc k4cdb@i (car k4cdc@lst)) k4cdd@ret)))))) (set! k4d7f@k4c20@map-with-index k4c20@map-with-index) (set! k4c22@repl (lambda k4ce3@x (letrec* ((k4ce6@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (k4ce9@k4ce7) (lambda () (with-exception-handler (lambda (k4ceb@e) ((call/cc (lambda (k4ced@k4ce8) (k4ce9@k4ce7 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? k4ceb@e) (k4c1c@condition-printer/p k4ceb@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" k4ceb@e))) (k4ced@k4ce8 (lambda () (raise-continuable k4ceb@e)))))))))) (lambda () (let k4cf3@loop ((k4cef@line (get-line (current-input-port))) (k4cf0@accum '"")) (letrec* ((k4cf6@parentheses-ok? (lambda (k4d01@text) (let k4d09@loop ((k4d03@chars (string->list k4d01@text)) (k4d04@p0 '0) (k4d05@p1 '0)) (if (null? k4d03@chars) (= '0 k4d04@p0 k4d05@p1) (let ((k4d0b@t (car k4d03@chars))) (if (memv k4d0b@t '(#\()) (k4d09@loop (cdr k4d03@chars) (+ k4d04@p0 '1) k4d05@p1) (if (memv k4d0b@t '(#\))) (k4d09@loop (cdr k4d03@chars) (- k4d04@p0 '1) k4d05@p1) (if (memv k4d0b@t '(#\[)) (k4d09@loop (cdr k4d03@chars) k4d04@p0 (+ k4d05@p1 '1)) (if (memv k4d0b@t '(#\])) (k4d09@loop (cdr k4d03@chars) k4d04@p0 (- k4d05@p1 '1)) (k4d09@loop (cdr k4d03@chars) k4d04@p0 k4d05@p1)))))))))) (k4cf8@eval-string-print (lambda (k4cfb@text) (if (not (or (string=? '"\n" k4cfb@text) (= '0 (string-length k4cfb@text)))) (call-with-values (lambda () (k4c30@eval-top-level (call-with-port (open-string-input-port k4cfb@text) read))) (lambda k4cfd@out* (for-each (lambda (k4cff@out) (begin (write k4cff@out) (newline))) k4cfd@out*))) (void))))) (if (eof-object? k4cef@line) (begin (k4cf8@eval-string-print k4cf0@accum) (exit)) (let ((k4cf9@current (string-append k4cf0@accum k4cef@line))) (if (k4cf6@parentheses-ok? k4cf9@current) (k4cf8@eval-string-print k4cf9@current) (k4cf3@loop (get-line (current-input-port)) k4cf9@current)))))))))))) (newline) (k4ce6@rec))))) (k4ce6@rec)))) (set! k4d80@k4c22@repl k4c22@repl) (set! k4c24@trace-printer (k2a0c@k28ea@make-parameter write)) (set! k4d81@k4c24@trace-printer k4c24@trace-printer) (set! k4c26@command-line (k2a0c@k28ea@make-parameter (get-command-line))) (set! k4d82@k4c26@command-line k4c26@command-line) (set! k4c28@local-library-path (lambda (k4d0d@filename) (k2cc6@k2b02@library-path))) (set! k4d83@k4c28@local-library-path k4c28@local-library-path) (set! k4c2a@load/args (lambda (k4d0f@filename . k4d11@args) (begin (apply k4c3a@load-r6rs-top-level k4d0f@filename 'load k4d11@args) (void)))) (set! k4d84@k4c2a@load/args k4c2a@load/args) (set! k4c2c@load (lambda (k4d13@filename) (begin (apply k4c3a@load-r6rs-top-level k4d13@filename 'load (k4c26@command-line)) (void)))) (set! k4d85@k4c2c@load k4c2c@load) (set! k4c2e@ironscheme-build (lambda () (k4c2c@load '"ironscheme-buildscript.ss"))) (set! k4d86@k4c2e@ironscheme-build k4c2e@ironscheme-build) (set! k4c30@eval-top-level (lambda (k4d15@x) (k4bed@k3183@eval k4d15@x (k4c04@k31b1@interaction-environment)))) (set! k4d87@k4c30@eval-top-level k4c30@eval-top-level) (set! k4c32@compile-system-libraries (lambda () (k4c30@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! k4d88@k4c32@compile-system-libraries k4c32@compile-system-libraries) (set! k4c34@compile (lambda (k4d17@filename) (k4c3a@load-r6rs-top-level k4d17@filename 'compile))) (set! k4d89@k4c34@compile k4c34@compile) (set! k4c36@compile->closure (lambda (k4d19@filename) (k4c3a@load-r6rs-top-level k4d19@filename 'closure))) (set! k4d8a@k4c36@compile->closure k4c36@compile->closure) (set! k4c38@pre-compile-r6rs-file (lambda (k4d1b@filename) (k4c3a@load-r6rs-top-level k4d1b@filename 'compile))) (set! k4d8b@k4c38@pre-compile-r6rs-file k4c38@pre-compile-r6rs-file) (set! k4c3a@load-r6rs-top-level (lambda (k4d1d@filename k4d1e@how . k4d21@args) (begin (k2cc6@k2b02@library-path (k4c28@local-library-path k4d1d@filename)) (let ((k4d23@x* (with-input-from-file k4d1d@filename (lambda () (let k4d25@f () (let ((k4d27@x (k29fe@k28ce@read-annotated))) (if (eof-object? k4d27@x) '() (cons k4d27@x (k4d25@f))))))))) (let ((k4d29@t k4d1e@how)) (if (memv k4d29@t '(closure)) (k4c03@k31af@pre-compile-r6rs-top-level k4d23@x*) (if (memv k4d29@t '(load)) (begin (k4c26@command-line (cons k4d1d@filename (car k4d21@args))) (k2a0d@k28ec@mosh-cache-dir (create-mosh-cache-dir)) (if (k2a0d@k28ec@mosh-cache-dir) (gensym-prefix-set! (k4c40@prefix-inc! (string-append (k2a0d@k28ec@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (k4d2b@file) ((call/cc (lambda (k4d2f@k4d2d) (lambda () (with-exception-handler (lambda (k4d31@c) ((call/cc (lambda (k4d33@k4d2e) (k4d2f@k4d2d (lambda () (if '#t '#t (k4d33@k4d2e (lambda () (raise-continuable k4d31@c)))))))))) (lambda () (delete-file (string-append (k2a0d@k28ec@mosh-cache-dir) '"/" k4d2b@file))))))))) (directory-list (k2a0d@k28ec@mosh-cache-dir))) (void)) (let ((k4d35@compiled (k4c02@k31ad@compile-r6rs-top-level k4d23@x*))) (begin (if (and (k2a0d@k28ec@mosh-cache-dir) (not (symbol-value '%disable-acc))) (k2cca@k2b0a@serialize-all k2a07@k28e0@serialize-library k2a63@k2a1c@compile-core-expr) (void)) (k4d35@compiled)))) (if (memv k4d29@t '(compile)) (begin (k4c02@k31ad@compile-r6rs-top-level k4d23@x*) (k2cca@k2b0a@serialize-all k2a07@k28e0@serialize-library k2a63@k2a1c@compile-core-expr)) (if '#f '#f (void)))))))))) (set! k4d8c@k4c3a@load-r6rs-top-level k4c3a@load-r6rs-top-level) (set! k4c3c@load-r6rs-top-level-sexp (lambda (k4d37@import-spec k4d38@thunk) (let ((k4d43@k4d3c k2cc6@k2b02@library-path) (k4d44@k4d3e k2a0d@k28ec@mosh-cache-dir) (k4d45@k4d40 (k4c28@local-library-path '"")) (k4d46@k4d42 (create-mosh-cache-dir))) (let ((k4d4b@swap (lambda () (begin (let ((k4d4d@t (k4d43@k4d3c))) (begin (k4d43@k4d3c k4d45@k4d40) (set! k4d45@k4d40 k4d4d@t))) (let ((k4d4f@t (k4d44@k4d3e))) (begin (k4d44@k4d3e k4d46@k4d42) (set! k4d46@k4d42 k4d4f@t))))))) (dynamic-wind k4d4b@swap (lambda () (begin (if (k2a0d@k28ec@mosh-cache-dir) (gensym-prefix-set! (k4c40@prefix-inc! (string-append (k2a0d@k28ec@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((k4d55@k4d52 k4c26@command-line) (k4d56@k4d54 '())) (let ((k4d59@swap (lambda () (let ((k4d5b@t (k4d55@k4d52))) (begin (k4d55@k4d52 k4d56@k4d54) (set! k4d56@k4d54 k4d5b@t)))))) (dynamic-wind k4d59@swap (lambda () ((k4c02@k31ad@compile-r6rs-top-level (list (cons 'import k4d37@import-spec) (list k4d38@thunk))))) k4d59@swap))))) k4d4b@swap))))) (set! k4d8d@k4c3c@load-r6rs-top-level-sexp k4c3c@load-r6rs-top-level-sexp) (set! k4c3e@prefix-inc (lambda (k4d5d@prefix-string) (let ((k4d5f@prefix (symbol->string k4d5d@prefix-string))) (let ((k4d61@len (string-length k4d5f@prefix))) (let k4d69@loop ((k4d63@i (- k4d61@len '1)) (k4d64@carry? '#t) (k4d65@accum '())) (if (< k4d63@i '0) (string->symbol (list->string (if k4d64@carry? (cons '#\a k4d65@accum) k4d65@accum))) (if k4d64@carry? (let ((k4d6b@next-integer (+ '1 (char->integer (string-ref k4d5f@prefix k4d63@i))))) (if (= k4d6b@next-integer '123) (k4d69@loop (- k4d63@i '1) '#f (cons '#\A k4d65@accum)) (if (= k4d6b@next-integer '91) (k4d69@loop (- k4d63@i '1) '#t (cons '#\a k4d65@accum)) (k4d69@loop (- k4d63@i '1) '#f (cons (integer->char k4d6b@next-integer) k4d65@accum))))) (k4d69@loop (- k4d63@i '1) '#f (cons (string-ref k4d5f@prefix k4d63@i) k4d65@accum))))))))) (set! k4d8e@k4c3e@prefix-inc k4c3e@prefix-inc) (set! k4c40@prefix-inc! (lambda (k4d6d@file) (begin (if (not (file-exists? k4d6d@file)) (call-with-output-file k4d6d@file (lambda (k4d6f@port) (write 'd k4d6f@port))) (void)) (let ((k4d71@prefix (call-with-input-file k4d6d@file read))) (if (main-vm?) (let ((k4d73@next-prefix (k4c3e@prefix-inc k4d71@prefix))) (begin (call-with-port (open-file-output-port k4d6d@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (k4d75@port) (write k4d73@next-prefix k4d75@port))) k4d71@prefix)) k4d71@prefix))))) (set! k4d8f@k4c40@prefix-inc! k4c40@prefix-inc!) (begin (k2ccb@k2b0c@current-precompiled-library-loader k2a08@k28e2@load-serialized-library) (set-symbol-value! 'load k4c2c@load) (set-symbol-value! 'pre-compile-r6rs-file k4c38@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs k4c30@eval-top-level) (set-symbol-value! 'int-env-syms k4be4@k3171@interaction-environment-symbols) (set-symbol-value! 'expanded2core k2a62@k2a1a@expanded->core) (set-symbol-value! 'trace-printer k4c24@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (k4c41@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list k4c41@c))))) (k4c16@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (k4c16@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (k4c14@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (k4c14@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (k4c14@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((k4c43@prefix (lambda (k4c45@ext k4c46@ls) (append (map (lambda (k4c49@x) (string-append k4c45@ext k4c49@x)) k4c46@ls) k4c46@ls)))) (k2cc7@k2b04@library-extensions (k4c43@prefix '".mosh" (k2cc7@k2b04@library-extensions)))) (current-exception-handler (lambda (k4c4b@c) (begin (if (condition? k4c4b@c) (k4c1c@condition-printer/p k4c4b@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" k4c4b@c)) k4c4b@c))) (if ((call/cc (lambda (k4c4f@k4c4d) (lambda () (with-exception-handler (lambda (k4c51@c) ((call/cc (lambda (k4c53@k4c4e) (k4c4f@k4c4d (lambda () (if '#t '#f (k4c53@k4c4e (lambda () (raise-continuable k4c51@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (k4c3c@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (k4c26@command-line)) (let ((k4c5d@k4c56 k4c26@command-line) (k4c5e@k4c58 k2a0d@k28ec@mosh-cache-dir) (k4c5f@k4c5a '()) (k4c60@k4c5c (create-mosh-cache-dir))) (let ((k4c65@swap (lambda () (begin (let ((k4c67@t (k4c5d@k4c56))) (begin (k4c5d@k4c56 k4c5f@k4c5a) (set! k4c5f@k4c5a k4c67@t))) (let ((k4c69@t (k4c5e@k4c58))) (begin (k4c5e@k4c58 k4c60@k4c5c) (set! k4c60@k4c5c k4c69@t))))))) (dynamic-wind k4c65@swap (lambda () (begin (if (k2a0d@k28ec@mosh-cache-dir) (gensym-prefix-set! (k4c40@prefix-inc! (string-append (k2a0d@k28ec@mosh-cache-dir) '"/prefix.txt"))) (void)) (k4c22@repl))) k4c65@swap))) (begin (k2cc6@k2b02@library-path (k4c28@local-library-path (car (k4c26@command-line)))) (set! k4c12@x* (with-input-from-file (car (k4c26@command-line)) (lambda () (let k4c6b@f () (let ((k4c6d@x (k29fe@k28ce@read-annotated))) (if (eof-object? k4c6d@x) '() (cons k4c6d@x (k4c6b@f)))))))) (k4c26@command-line (cons (car (k4c26@command-line)) (cdr (k4c26@command-line)))) (k2a0d@k28ec@mosh-cache-dir (create-mosh-cache-dir)) (if (k2a0d@k28ec@mosh-cache-dir) (gensym-prefix-set! (k4c40@prefix-inc! (string-append (k2a0d@k28ec@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (k4c6f@file) ((call/cc (lambda (k4c73@k4c71) (lambda () (with-exception-handler (lambda (k4c75@c) ((call/cc (lambda (k4c77@k4c72) (k4c73@k4c71 (lambda () (if '#t '#t (k4c77@k4c72 (lambda () (raise-continuable k4c75@c)))))))))) (lambda () (delete-file (string-append (k2a0d@k28ec@mosh-cache-dir) '"/" k4c6f@file))))))))) (directory-list (k2a0d@k28ec@mosh-cache-dir))) (void)) (let ((k4c79@compiled (k4c02@k31ad@compile-r6rs-top-level k4c12@x*))) (begin (if (and (k2a0d@k28ec@mosh-cache-dir) (not (symbol-value '%disable-acc))) (k2cca@k2b0a@serialize-all k2a07@k28e0@serialize-library k2a63@k2a1c@compile-core-expr) (void)) (k4c79@compiled))))))))
