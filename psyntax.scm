;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! oR28e4@library-file-path->cache-path (unspecified)) (set! oR28e6@read-annotated (unspecified)) (set! oR28e8@annotation-stripped (unspecified)) (set! oR28ea@annotation? (unspecified)) (set! oR28ec@annotation-source (unspecified)) (set! oR28ee@annotation-expression (unspecified)) (set! oR28f0@scm->fasl (unspecified)) (set! oR28f2@fasl-save (unspecified)) (set! oR28f4@fasl-load (unspecified)) (set! oR28f6@verbose? (unspecified)) (set! oR28f8@serialize-library (unspecified)) (set! oR28fa@load-serialized-library (unspecified)) (set! oR28fc@make-record-printer (unspecified)) (set! oR28fe@compile-core (unspecified)) (set! oR2900@read-library-source-file (unspecified)) (set! oR2902@make-parameter (unspecified)) (set! oR2904@mosh-cache-dir (unspecified)) (set! oR299a@file-options-spec (unspecified)) (set! oR28e4@library-file-path->cache-path (lambda (oR299b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (oR29a1@oR299e oR29a2@oR29a0) (let ((oR29a5@extract oR29a2@oR29a0) (oR29a6@p oR29a1@oR299e)) (let ((oR29aa@display-hex '#f)) (begin (set! oR29aa@display-hex (lambda (oR29b3@n) (if (<= '0 oR29b3@n '9) (display oR29b3@n oR29a6@p) (display (integer->char (+ (char->integer '#\a) (- oR29b3@n '10))) oR29a6@p)))) (begin (let oR29ad@f ((oR29ab@ls (string-split oR299b@x '#\/))) (if (not (null? oR29ab@ls)) (begin (display '"_" oR29a6@p) (for-each (lambda (oR29af@c) (if (or (char<=? '#\a oR29af@c '#\z) (char<=? '#\A oR29af@c '#\Z) (char<=? '#\0 oR29af@c '#\9) (memv oR29af@c '(#\- #\. #\_ #\~))) (display oR29af@c oR29a6@p) (begin (display '"%" oR29a6@p) (let ((oR29b1@n (char->integer oR29af@c))) (begin (oR29aa@display-hex (quotient oR29b1@n '16)) (oR29aa@display-hex (remainder oR29b1@n '16))))))) (string->list (car oR29ab@ls))) (oR29ad@f (cdr oR29ab@ls))) (void))) (oR29a5@extract))))))))) (set! oR2a15@oR28e4@library-file-path->cache-path oR28e4@library-file-path->cache-path) (set! oR28e6@read-annotated read) (set! oR2a16@oR28e6@read-annotated oR28e6@read-annotated) (set! oR28e8@annotation-stripped (lambda (oR29b5@x) (oR28ee@annotation-expression oR29b5@x))) (set! oR2a17@oR28e8@annotation-stripped oR28e8@annotation-stripped) (set! oR28ea@annotation? (lambda (oR29b7@x) (source-info oR29b7@x))) (set! oR2a18@oR28ea@annotation? oR28ea@annotation?) (set! oR28ec@annotation-source (lambda (oR29b9@x) (source-info oR29b9@x))) (set! oR2a19@oR28ec@annotation-source oR28ec@annotation-source) (set! oR28ee@annotation-expression (lambda (oR29bb@x) (if (pair? oR29bb@x) (cons (car oR29bb@x) (cdr oR29bb@x)) (if (procedure? oR29bb@x) (set-source-info! oR29bb@x '#f) oR29bb@x)))) (set! oR2a1a@oR28ee@annotation-expression oR28ee@annotation-expression) (set! oR28f0@scm->fasl (lambda (oR29bd@filename) (string-append (oR2904@mosh-cache-dir) '"/" (oR28e4@library-file-path->cache-path oR29bd@filename) '".mosh-fasl"))) (set! oR2a1b@oR28f0@scm->fasl oR28f0@scm->fasl) (set! oR28f2@fasl-save (lambda (oR29bf@filename oR29c0@obj) (call-with-port (open-file-output-port oR29bf@filename) (lambda (oR29c3@port) ((symbol-value 'fasl-write!) oR29c0@obj oR29c3@port))))) (set! oR2a1c@oR28f2@fasl-save oR28f2@fasl-save) (set! oR28f4@fasl-load (lambda (oR29c5@filename) (call-with-port (open-file-input-port oR29c5@filename) (symbol-value 'fasl-read!)))) (set! oR2a1d@oR28f4@fasl-load oR28f4@fasl-load) (set! oR28f6@verbose? (symbol-value '%verbose)) (set! oR2a1e@oR28f6@verbose? oR28f6@verbose?) (set! oR28f8@serialize-library (lambda (oR29c7@filename oR29c8@obj) (begin (if oR28f6@verbose? (format (current-error-port) '"serialize-library ~a\n..." oR29c7@filename) (void)) (let ((oR29cb@expanded2core (symbol-value 'expanded2core))) (let ((oR29cd@compile (symbol-value 'compile-w/o-halt))) (let ((oR29cf@code oR29c8@obj)) (let ((oR29d1@pivot (cddddr (cddddr oR29cf@code)))) (let ((oR29d3@visit (oR29cd@compile (oR29cb@expanded2core (car oR29d1@pivot))))) (begin (set-car! oR29d1@pivot oR29d3@visit) (let ((oR29d5@pivot (cdr oR29d1@pivot))) (let ((oR29d7@invoke (oR29cd@compile (oR29cb@expanded2core (car oR29d5@pivot))))) (set-car! oR29d5@pivot oR29d7@invoke))))))))) (let ((oR29d9@fasl-file (oR28f0@scm->fasl oR29c7@filename))) (begin (if (file-exists? oR29d9@fasl-file) (delete-file oR29d9@fasl-file) (void)) ((call/cc (lambda (oR29dd@oR29db) (lambda () (with-exception-handler (lambda (oR29df@c) ((call/cc (lambda (oR29e1@oR29dc) (oR29dd@oR29db (lambda () (if '#t (begin (if oR28f6@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" oR29c7@filename) (void)) (if (file-exists? oR29d9@fasl-file) (delete-file oR29d9@fasl-file) (void)) '#f) (oR29e1@oR29dc (lambda () (raise-continuable oR29df@c)))))))))) (lambda () (oR28f2@fasl-save oR29d9@fasl-file oR29c8@obj)))))))))))) (set! oR2a1f@oR28f8@serialize-library oR28f8@serialize-library) (set! oR28fa@load-serialized-library (lambda (oR29e3@filename oR29e4@obj) (and (oR2904@mosh-cache-dir) (let ((oR29e7@fasl-file (oR28f0@scm->fasl oR29e3@filename))) (if (and (file-exists? oR29e7@fasl-file) ((symbol-value 'file-newer?) oR29e7@fasl-file oR29e3@filename)) (let ((oR29e9@expanded2core (symbol-value 'expanded2core))) (let ((oR29eb@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((oR29ed@code (oR28f4@fasl-load oR29e7@fasl-file))) (let ((oR29ef@pivot (cddddr (cddddr oR29ed@code)))) (let ((oR29f1@visit (car oR29ef@pivot))) (let ((oR29f3@visit-proc (lambda () (oR29eb@eval-compiled-core oR29f1@visit)))) (begin (set-car! oR29ef@pivot oR29f3@visit-proc) (let ((oR29f5@pivot (cdr oR29ef@pivot))) (let ((oR29f7@invoke (car oR29f5@pivot))) (begin (set-car! oR29f5@pivot (lambda () (oR29eb@eval-compiled-core oR29f7@invoke))) (apply oR29e4@obj oR29ed@code))))))))))) '#f))))) (set! oR2a20@oR28fa@load-serialized-library oR28fa@load-serialized-library) (set! oR28fc@make-record-printer (lambda (oR29f9@name oR29fa@printer) (lambda oR29fd@x (begin (display '"record printer") (for-each display oR29fd@x))))) (set! oR2a21@oR28fc@make-record-printer oR28fc@make-record-printer) (set! oR28fe@compile-core (lambda oR29ff@x (apply error 'comile-core '"not implementated" oR29ff@x))) (set! oR2a22@oR28fe@compile-core oR28fe@compile-core) (set! oR2900@read-library-source-file (lambda (oR2a01@file-name) (with-input-from-file oR2a01@file-name oR28e6@read-annotated))) (set! oR2a23@oR2900@read-library-source-file oR2900@read-library-source-file) (set! oR2902@make-parameter (lambda oR2a11 (let ((oR2a12 (length oR2a11))) (if (= oR2a12 '1) (apply (lambda (oR2a03@x) (oR2902@make-parameter oR2a03@x (lambda (oR2a05@x) oR2a05@x))) oR2a11) (if (= oR2a12 '2) (apply (lambda (oR2a07@x oR2a08@fender) (let ((oR2a0b@x (oR2a08@fender oR2a07@x))) (lambda oR2a0f (let ((oR2a10 (length oR2a0f))) (if (= oR2a10 '0) (apply (lambda () oR2a0b@x) oR2a0f) (if (= oR2a10 '1) (apply (lambda (oR2a0d@v) (set! oR2a0b@x (oR2a08@fender oR2a0d@v))) oR2a0f) (error 'apply '"invalid arg count"))))))) oR2a11) (error 'apply '"invalid arg count")))))) (set! oR2a24@oR2902@make-parameter oR2902@make-parameter) (set! oR2904@mosh-cache-dir (oR2902@make-parameter '#f)) (set! oR2a25@oR2904@mosh-cache-dir oR2904@mosh-cache-dir) (set! oR299a@file-options-spec (lambda (oR2a13@x) oR2a13@x)) (set! oR2a26@oR299a@file-options-spec oR299a@file-options-spec) (void))
(begin (set! oR2a2c@current-primitive-locations (unspecified)) (set! oR2a2e@mutable? (unspecified)) (set! oR2a30@rewriter (unspecified)) (set! oR2a32@expanded->core (unspecified)) (set! oR2a34@compile-core-expr (unspecified)) (set! oR2a36@pretty-print (unspecified)) (set! oR2a38@compile-core-expr-to-port (unspecified)) (set! oR2a2c@current-primitive-locations (oR2a24@oR2902@make-parameter (lambda (oR2a39@x) '#f) (lambda (oR2a3b@p) oR2a3b@p))) (set! oR2a77@oR2a2c@current-primitive-locations oR2a2c@current-primitive-locations) (set! oR2a2e@mutable? (lambda (oR2a3d@x) (or (pair? oR2a3d@x) (vector? oR2a3d@x) (hashtable? oR2a3d@x)))) (set! oR2a78@oR2a2e@mutable? oR2a2e@mutable?) (set! oR2a30@rewriter (lambda (oR2a3f@quote-hack?) (let ((oR2a42@f '#f)) (begin (set! oR2a42@f (lambda (oR2a43@x) (if (pair? oR2a43@x) (let ((oR2a45@t (car oR2a43@x))) (if (memv oR2a45@t '(quote)) (if (and oR2a3f@quote-hack? (oR2a2e@mutable? (cadr oR2a43@x))) (let ((oR2a47@g (gensym))) (begin (set-symbol-value! oR2a47@g (cadr oR2a43@x)) oR2a47@g)) oR2a43@x) (if (memv oR2a45@t '(case-lambda)) (cons 'case-lambda (map (lambda (oR2a49@x) (cons (car oR2a49@x) (map oR2a42@f (cdr oR2a49@x)))) (cdr oR2a43@x))) (if (memv oR2a45@t '(lambda)) (cons* 'lambda (cadr oR2a43@x) (map oR2a42@f (cddr oR2a43@x))) (if (memv oR2a45@t '(letrec)) (let ((oR2a4b@bindings (cadr oR2a43@x)) (oR2a4c@body* (cddr oR2a43@x))) (let ((oR2a4f@lhs* (map car oR2a4b@bindings)) (oR2a50@rhs* (map cadr oR2a4b@bindings))) (cons* 'letrec (map list oR2a4f@lhs* (map oR2a42@f oR2a50@rhs*)) (map oR2a42@f oR2a4c@body*)))) (if (memv oR2a45@t '(letrec*)) (let ((oR2a53@bindings (cadr oR2a43@x)) (oR2a54@body* (cddr oR2a43@x))) (let ((oR2a57@lhs* (map car oR2a53@bindings)) (oR2a58@rhs* (map cadr oR2a53@bindings))) (cons* 'letrec* (map list oR2a57@lhs* (map oR2a42@f oR2a58@rhs*)) (map oR2a42@f oR2a54@body*)))) (if (memv oR2a45@t '(library-letrec*)) (let ((oR2a5b@name (cadr oR2a43@x)) (oR2a5c@x (cdr oR2a43@x))) (let ((oR2a5f@bindings (cadr oR2a5c@x)) (oR2a60@body* (cddr oR2a5c@x))) (let ((oR2a63@lhs* (map car oR2a5f@bindings)) (oR2a64@lhs** (map cadr oR2a5f@bindings)) (oR2a65@rhs* (map caddr oR2a5f@bindings))) (cons* 'library-letrec* oR2a5b@name (map list oR2a63@lhs* oR2a64@lhs** (map oR2a42@f oR2a65@rhs*)) (map oR2a42@f oR2a60@body*))))) (if (memv oR2a45@t '(begin)) (cons 'begin (map oR2a42@f (cdr oR2a43@x))) (if (memv oR2a45@t '(set!)) (list 'set! (cadr oR2a43@x) (oR2a42@f (caddr oR2a43@x))) (if (memv oR2a45@t '(primitive)) (let ((oR2a69@op (cadr oR2a43@x))) (let ((oR2a6b@t ((oR2a2c@current-primitive-locations) oR2a69@op))) (if oR2a6b@t ((lambda (oR2a6d@loc) oR2a6d@loc) oR2a6b@t) oR2a69@op))) (if (memv oR2a45@t '(define)) oR2a43@x (if (list? oR2a43@x) (map oR2a42@f oR2a43@x) (error 'rewrite '"invalid form ~s ~s" oR2a43@x (list? oR2a43@x)))))))))))))) oR2a43@x))) oR2a42@f)))) (set! oR2a79@oR2a30@rewriter oR2a30@rewriter) (set! oR2a32@expanded->core (lambda (oR2a6f@x) ((oR2a30@rewriter '#f) oR2a6f@x))) (set! oR2a7a@oR2a32@expanded->core oR2a32@expanded->core) (set! oR2a34@compile-core-expr (lambda (oR2a71@x) ((oR2a30@rewriter '#f) oR2a71@x))) (set! oR2a7b@oR2a34@compile-core-expr oR2a34@compile-core-expr) (set! oR2a36@pretty-print write) (set! oR2a7c@oR2a36@pretty-print oR2a36@pretty-print) (set! oR2a38@compile-core-expr-to-port (lambda (oR2a73@x oR2a74@p) (oR2a36@pretty-print ((oR2a30@rewriter '#f) oR2a73@x) oR2a74@p))) (set! oR2a7d@oR2a38@compile-core-expr-to-port oR2a38@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! oR2acc@make-collection (unspecified)) (set! oR2ace@current-library-collection (unspecified)) (set! oR2ad0@rp (unspecified)) (set! oR2ada@library? (unspecified)) (set! oR2adc@library-id (unspecified)) (set! oR2ade@set-library-id! (unspecified)) (set! oR2ae0@library-name (unspecified)) (set! oR2ae2@set-library-name! (unspecified)) (set! oR2ae4@library-version (unspecified)) (set! oR2ae6@set-library-version! (unspecified)) (set! oR2ae8@library-imp* (unspecified)) (set! oR2aea@set-library-imp*! (unspecified)) (set! oR2aec@library-vis* (unspecified)) (set! oR2aee@set-library-vis*! (unspecified)) (set! oR2af0@library-inv* (unspecified)) (set! oR2af2@set-library-inv*! (unspecified)) (set! oR2af4@library-subst (unspecified)) (set! oR2af6@set-library-subst! (unspecified)) (set! oR2af8@library-env (unspecified)) (set! oR2afa@set-library-env! (unspecified)) (set! oR2afc@library-visit-state (unspecified)) (set! oR2afe@set-library-visit-state! (unspecified)) (set! oR2b00@library-invoke-state (unspecified)) (set! oR2b02@set-library-invoke-state! (unspecified)) (set! oR2b04@library-visit-code (unspecified)) (set! oR2b06@set-library-visit-code! (unspecified)) (set! oR2b08@library-invoke-code (unspecified)) (set! oR2b0a@set-library-invoke-code! (unspecified)) (set! oR2b0c@library-visible? (unspecified)) (set! oR2b0e@set-library-visible?! (unspecified)) (set! oR2b10@library-source-file-name (unspecified)) (set! oR2b12@set-library-source-file-name! (unspecified)) (set! oR2b14@dummy (unspecified)) (set! oR2b16@find-dependencies (unspecified)) (set! oR2b18@find-library-by (unspecified)) (set! oR2b1a@library-path (unspecified)) (set! oR2b1c@library-extensions (unspecified)) (set! oR2b1e@library-name->file-name (unspecified)) (set! oR2b20@file-locator (unspecified)) (set! oR2b22@serialize-all (unspecified)) (set! oR2b24@current-precompiled-library-loader (unspecified)) (set! oR2b26@try-load-from-file (unspecified)) (set! oR2b28@library-loader (unspecified)) (set! oR2b2a@current-library-expander (unspecified)) (set! oR2b2c@external-pending-libraries (unspecified)) (set! oR2b2e@find-external-library (unspecified)) (set! oR2b30@find-library-by-name (unspecified)) (set! oR2b32@library-exists? (unspecified)) (set! oR2b34@find-library-by-spec/die (unspecified)) (set! oR2b36@label->binding-table (unspecified)) (set! oR2b38@install-library-record (unspecified)) (set! oR2b3a@install-library (unspecified)) (set! oR2b3c@imported-label->binding (unspecified)) (set! oR2b3e@invoke-library (unspecified)) (set! oR2b40@visit-library (unspecified)) (set! oR2b42@invoke-library-by-spec (unspecified)) (set! oR2b44@invoke-library-by-name (unspecified)) (set! oR2b46@installed-libraries (unspecified)) (set! oR2b48@library-spec (unspecified)) (set! oR2acc@make-collection (lambda () (let ((oR2b49@set '())) (let ((oR2b4c@set-cons '#f)) (begin (set! oR2b4c@set-cons (lambda (oR2b51@x oR2b52@ls) (if (memq oR2b51@x oR2b52@ls) oR2b52@ls (cons oR2b51@x oR2b52@ls)))) (lambda oR2b4f (let ((oR2b50 (length oR2b4f))) (if (= oR2b50 '0) (apply (lambda () oR2b49@set) oR2b4f) (if (= oR2b50 '1) (apply (lambda (oR2b4d@x) (set! oR2b49@set (oR2b4c@set-cons oR2b4d@x oR2b49@set))) oR2b4f) (error 'apply '"invalid arg count")))))))))) (set! oR2ccb@oR2acc@make-collection oR2acc@make-collection) (set! oR2ace@current-library-collection (oR2a24@oR2902@make-parameter (oR2acc@make-collection) (lambda (oR2b55@x) (begin (if (not (procedure? oR2b55@x)) (assertion-violation 'current-library-collection '"not a procedure" oR2b55@x) (void)) oR2b55@x)))) (set! oR2ccc@oR2ace@current-library-collection oR2ace@current-library-collection) (set! oR2ad0@rp (oR2a21@oR28fc@make-record-printer 'library (lambda (oR2b57@x oR2b58@p oR2b59@wr) (begin (if (not (oR2ada@library? oR2b57@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (oR2ae4@library-version oR2b57@x)) (oR2ae0@library-name oR2b57@x) (append (oR2ae0@library-name oR2b57@x) (list (oR2ae4@library-version oR2b57@x))))) oR2b58@p))))) (set! oR2ccd@oR2ad0@rp oR2ad0@rp) (set! oR2ada@library? (lambda (oR2b5d@x) (and (simple-struct? oR2b5d@x) (eq? (simple-struct-name oR2b5d@x) 'library)))) (set! oR2cce@oR2ada@library? oR2ada@library?) (set! oR2adc@library-id (lambda (oR2b5f@x) (simple-struct-ref oR2b5f@x '0))) (set! oR2ccf@oR2adc@library-id oR2adc@library-id) (set! oR2ade@set-library-id! (lambda (oR2b61@x oR2b62@val) (simple-struct-set! oR2b61@x '0 oR2b62@val))) (set! oR2cd0@oR2ade@set-library-id! oR2ade@set-library-id!) (set! oR2ae0@library-name (lambda (oR2b65@x) (simple-struct-ref oR2b65@x '1))) (set! oR2cd1@oR2ae0@library-name oR2ae0@library-name) (set! oR2ae2@set-library-name! (lambda (oR2b67@x oR2b68@val) (simple-struct-set! oR2b67@x '1 oR2b68@val))) (set! oR2cd2@oR2ae2@set-library-name! oR2ae2@set-library-name!) (set! oR2ae4@library-version (lambda (oR2b6b@x) (simple-struct-ref oR2b6b@x '2))) (set! oR2cd3@oR2ae4@library-version oR2ae4@library-version) (set! oR2ae6@set-library-version! (lambda (oR2b6d@x oR2b6e@val) (simple-struct-set! oR2b6d@x '2 oR2b6e@val))) (set! oR2cd4@oR2ae6@set-library-version! oR2ae6@set-library-version!) (set! oR2ae8@library-imp* (lambda (oR2b71@x) (simple-struct-ref oR2b71@x '3))) (set! oR2cd5@oR2ae8@library-imp* oR2ae8@library-imp*) (set! oR2aea@set-library-imp*! (lambda (oR2b73@x oR2b74@val) (simple-struct-set! oR2b73@x '3 oR2b74@val))) (set! oR2cd6@oR2aea@set-library-imp*! oR2aea@set-library-imp*!) (set! oR2aec@library-vis* (lambda (oR2b77@x) (simple-struct-ref oR2b77@x '4))) (set! oR2cd7@oR2aec@library-vis* oR2aec@library-vis*) (set! oR2aee@set-library-vis*! (lambda (oR2b79@x oR2b7a@val) (simple-struct-set! oR2b79@x '4 oR2b7a@val))) (set! oR2cd8@oR2aee@set-library-vis*! oR2aee@set-library-vis*!) (set! oR2af0@library-inv* (lambda (oR2b7d@x) (simple-struct-ref oR2b7d@x '5))) (set! oR2cd9@oR2af0@library-inv* oR2af0@library-inv*) (set! oR2af2@set-library-inv*! (lambda (oR2b7f@x oR2b80@val) (simple-struct-set! oR2b7f@x '5 oR2b80@val))) (set! oR2cda@oR2af2@set-library-inv*! oR2af2@set-library-inv*!) (set! oR2af4@library-subst (lambda (oR2b83@x) (simple-struct-ref oR2b83@x '6))) (set! oR2cdb@oR2af4@library-subst oR2af4@library-subst) (set! oR2af6@set-library-subst! (lambda (oR2b85@x oR2b86@val) (simple-struct-set! oR2b85@x '6 oR2b86@val))) (set! oR2cdc@oR2af6@set-library-subst! oR2af6@set-library-subst!) (set! oR2af8@library-env (lambda (oR2b89@x) (simple-struct-ref oR2b89@x '7))) (set! oR2cdd@oR2af8@library-env oR2af8@library-env) (set! oR2afa@set-library-env! (lambda (oR2b8b@x oR2b8c@val) (simple-struct-set! oR2b8b@x '7 oR2b8c@val))) (set! oR2cde@oR2afa@set-library-env! oR2afa@set-library-env!) (set! oR2afc@library-visit-state (lambda (oR2b8f@x) (simple-struct-ref oR2b8f@x '8))) (set! oR2cdf@oR2afc@library-visit-state oR2afc@library-visit-state) (set! oR2afe@set-library-visit-state! (lambda (oR2b91@x oR2b92@val) (simple-struct-set! oR2b91@x '8 oR2b92@val))) (set! oR2ce0@oR2afe@set-library-visit-state! oR2afe@set-library-visit-state!) (set! oR2b00@library-invoke-state (lambda (oR2b95@x) (simple-struct-ref oR2b95@x '9))) (set! oR2ce1@oR2b00@library-invoke-state oR2b00@library-invoke-state) (set! oR2b02@set-library-invoke-state! (lambda (oR2b97@x oR2b98@val) (simple-struct-set! oR2b97@x '9 oR2b98@val))) (set! oR2ce2@oR2b02@set-library-invoke-state! oR2b02@set-library-invoke-state!) (set! oR2b04@library-visit-code (lambda (oR2b9b@x) (simple-struct-ref oR2b9b@x '10))) (set! oR2ce3@oR2b04@library-visit-code oR2b04@library-visit-code) (set! oR2b06@set-library-visit-code! (lambda (oR2b9d@x oR2b9e@val) (simple-struct-set! oR2b9d@x '10 oR2b9e@val))) (set! oR2ce4@oR2b06@set-library-visit-code! oR2b06@set-library-visit-code!) (set! oR2b08@library-invoke-code (lambda (oR2ba1@x) (simple-struct-ref oR2ba1@x '11))) (set! oR2ce5@oR2b08@library-invoke-code oR2b08@library-invoke-code) (set! oR2b0a@set-library-invoke-code! (lambda (oR2ba3@x oR2ba4@val) (simple-struct-set! oR2ba3@x '11 oR2ba4@val))) (set! oR2ce6@oR2b0a@set-library-invoke-code! oR2b0a@set-library-invoke-code!) (set! oR2b0c@library-visible? (lambda (oR2ba7@x) (simple-struct-ref oR2ba7@x '12))) (set! oR2ce7@oR2b0c@library-visible? oR2b0c@library-visible?) (set! oR2b0e@set-library-visible?! (lambda (oR2ba9@x oR2baa@val) (simple-struct-set! oR2ba9@x '12 oR2baa@val))) (set! oR2ce8@oR2b0e@set-library-visible?! oR2b0e@set-library-visible?!) (set! oR2b10@library-source-file-name (lambda (oR2bad@x) (simple-struct-ref oR2bad@x '13))) (set! oR2ce9@oR2b10@library-source-file-name oR2b10@library-source-file-name) (set! oR2b12@set-library-source-file-name! (lambda (oR2baf@x oR2bb0@val) (simple-struct-set! oR2baf@x '13 oR2bb0@val))) (set! oR2cea@oR2b12@set-library-source-file-name! oR2b12@set-library-source-file-name!) (set! oR2b14@dummy '3) (set! oR2ceb@oR2b14@dummy oR2b14@dummy) (set! oR2b16@find-dependencies (lambda (oR2bb3@ls) (if (null? oR2bb3@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! oR2cec@oR2b16@find-dependencies oR2b16@find-dependencies) (set! oR2b18@find-library-by (lambda (oR2bb5@pred) (let oR2bb9@f ((oR2bb7@ls ((oR2ace@current-library-collection)))) (if (null? oR2bb7@ls) '#f (if (oR2bb5@pred (car oR2bb7@ls)) (car oR2bb7@ls) (oR2bb9@f (cdr oR2bb7@ls))))))) (set! oR2ced@oR2b18@find-library-by oR2b18@find-library-by) (set! oR2b1a@library-path (oR2a24@oR2902@make-parameter '(".") (lambda (oR2bbb@x) (if (and (list? oR2bbb@x) (for-all string? oR2bbb@x)) (map (lambda (oR2bbd@x) oR2bbd@x) oR2bbb@x) (assertion-violation 'library-path '"not a list of strings" oR2bbb@x))))) (set! oR2cee@oR2b1a@library-path oR2b1a@library-path) (set! oR2b1c@library-extensions (oR2a24@oR2902@make-parameter '(".sls" ".ss" ".scm") (lambda (oR2bbf@x) (if (and (list? oR2bbf@x) (for-all string? oR2bbf@x)) (map (lambda (oR2bc1@x) oR2bc1@x) oR2bbf@x) (assertion-violation 'library-extensions '"not a list of strings" oR2bbf@x))))) (set! oR2cef@oR2b1c@library-extensions oR2b1c@library-extensions) (set! oR2b1e@library-name->file-name (lambda (oR2bc3@x) (call-with-values (lambda () (open-string-output-port)) (lambda (oR2bc9@oR2bc6 oR2bca@oR2bc8) (let ((oR2bcd@extract oR2bca@oR2bc8) (oR2bce@p oR2bc9@oR2bc6)) (let ((oR2bd2@display-hex '#f)) (begin (set! oR2bd2@display-hex (lambda (oR2bdb@n) (if (<= '0 oR2bdb@n '9) (display oR2bdb@n oR2bce@p) (display (integer->char (+ (char->integer '#\a) (- oR2bdb@n '10))) oR2bce@p)))) (begin (let oR2bd5@f ((oR2bd3@ls oR2bc3@x)) (if (not (null? oR2bd3@ls)) (begin (display '"/" oR2bce@p) (for-each (lambda (oR2bd7@c) (if (or (char<=? '#\a oR2bd7@c '#\z) (char<=? '#\A oR2bd7@c '#\Z) (char<=? '#\0 oR2bd7@c '#\9) (memv oR2bd7@c '(#\- #\. #\_ #\~))) (display oR2bd7@c oR2bce@p) (begin (display '"%" oR2bce@p) (let ((oR2bd9@n (char->integer oR2bd7@c))) (begin (oR2bd2@display-hex (quotient oR2bd9@n '16)) (oR2bd2@display-hex (remainder oR2bd9@n '16))))))) (string->list (symbol->string (car oR2bd3@ls)))) (oR2bd5@f (cdr oR2bd3@ls))) (void))) (oR2bcd@extract))))))))) (set! oR2cf0@oR2b1e@library-name->file-name oR2b1e@library-name->file-name) (set! oR2b20@file-locator (oR2a24@oR2902@make-parameter (lambda (oR2bdd@x) (let ((oR2bdf@str (oR2b1e@library-name->file-name oR2bdd@x))) (let oR2be7@f ((oR2be1@ls (oR2b1a@library-path)) (oR2be2@exts (oR2b1c@library-extensions)) (oR2be3@failed-list '())) (if (null? oR2be1@ls) (let ((oR2bf1@oR2bec '#f) (oR2bf3@oR2bee '#f) (oR2bf5@oR2bed '#f) (oR2bf8@oR2beb '#f) (oR2bfa@make-library-resolution-condition '#f) (oR2bfc@oR2be9 '#f) (oR2bfe@oR2bea '#f) (oR2c00@library-resolution-condition? '#f) (oR2c02@condition-library '#f) (oR2c04@condition-files '#f)) (begin (set! oR2bf1@oR2bec (make-record-type-descriptor '&library-resolution oR4f07@oR4c4e@&condition-rtd 'oR2bef '#f '#f '#((immutable library) (immutable files)))) (set! oR2bf3@oR2bee '#f) (set! oR2bf5@oR2bed (make-record-constructor-descriptor oR2bf1@oR2bec oR4f08@oR4c50@&condition-rcd oR2bf3@oR2bee)) (set! oR2bf8@oR2beb (record-predicate oR2bf1@oR2bec)) (set! oR2bfa@make-library-resolution-condition (record-constructor oR2bf5@oR2bed)) (set! oR2bfc@oR2be9 (record-accessor oR2bf1@oR2bec '0)) (set! oR2bfe@oR2bea (record-accessor oR2bf1@oR2bec '1)) (set! oR2c00@library-resolution-condition? (condition-predicate oR2bf1@oR2bec)) (set! oR2c02@condition-library (condition-accessor oR2bf1@oR2bec oR2bfc@oR2be9)) (set! oR2c04@condition-files (condition-accessor oR2bf1@oR2bec oR2bfe@oR2bea)) (raise (condition (oR4f27@oR4ce8@make-error) (oR4f49@oR4d44@make-who-condition 'expander) (oR4f0d@oR4ca5@make-message-condition '"cannot locate library in library-path") (oR2bfa@make-library-resolution-condition oR2bdd@x (reverse oR2be3@failed-list)))))) (if (null? oR2be2@exts) (oR2be7@f (cdr oR2be1@ls) (oR2b1c@library-extensions) oR2be3@failed-list) (let ((oR2c05@name (string-append (car oR2be1@ls) oR2bdf@str (car oR2be2@exts)))) (if (file-exists? oR2c05@name) oR2c05@name (oR2be7@f oR2be1@ls (cdr oR2be2@exts) (cons oR2c05@name oR2be3@failed-list))))))))) (lambda (oR2c07@f) (if (procedure? oR2c07@f) oR2c07@f (assertion-violation 'file-locator '"not a procedure" oR2c07@f))))) (set! oR2cf1@oR2b20@file-locator oR2b20@file-locator) (set! oR2b22@serialize-all (lambda (oR2c09@serialize oR2c0a@compile) (let ((oR2c0e@library-desc '#f)) (begin (set! oR2c0e@library-desc (lambda (oR2c11@x) (list (oR2adc@library-id oR2c11@x) (oR2ae0@library-name oR2c11@x)))) (for-each (lambda (oR2c0f@x) (if (oR2b10@library-source-file-name oR2c0f@x) (oR2c09@serialize (oR2b10@library-source-file-name oR2c0f@x) (list (oR2adc@library-id oR2c0f@x) (oR2ae0@library-name oR2c0f@x) (oR2ae4@library-version oR2c0f@x) (map oR2c0e@library-desc (oR2ae8@library-imp* oR2c0f@x)) (map oR2c0e@library-desc (oR2aec@library-vis* oR2c0f@x)) (map oR2c0e@library-desc (oR2af0@library-inv* oR2c0f@x)) (oR2af4@library-subst oR2c0f@x) (oR2af8@library-env oR2c0f@x) (oR2c0a@compile (oR2b04@library-visit-code oR2c0f@x)) (oR2c0a@compile (oR2b08@library-invoke-code oR2c0f@x)) (oR2b0c@library-visible? oR2c0f@x))) (void))) ((oR2ace@current-library-collection))))))) (set! oR2cf2@oR2b22@serialize-all oR2b22@serialize-all) (set! oR2b24@current-precompiled-library-loader (oR2a24@oR2902@make-parameter (lambda (oR2c13@filename oR2c14@sk) '#f))) (set! oR2cf3@oR2b24@current-precompiled-library-loader oR2b24@current-precompiled-library-loader) (set! oR2b26@try-load-from-file (lambda (oR2c17@filename) ((oR2b24@current-precompiled-library-loader) oR2c17@filename (lambda oR2c3d (let ((oR2c3e (length oR2c3d))) (if (= oR2c3e '11) (apply (lambda (oR2c19@id oR2c1a@name oR2c1b@ver oR2c1c@imp* oR2c1d@vis* oR2c1e@inv* oR2c1f@exp-subst oR2c20@exp-env oR2c21@visit-proc oR2c22@invoke-proc oR2c23@visible?) (let oR2c31@f ((oR2c2f@deps (append oR2c1c@imp* oR2c1d@vis* oR2c1e@inv*))) (if (null? oR2c2f@deps) (begin (oR2b3a@install-library oR2c19@id oR2c1a@name oR2c1b@ver oR2c1c@imp* oR2c1d@vis* oR2c1e@inv* oR2c1f@exp-subst oR2c20@exp-env oR2c21@visit-proc oR2c22@invoke-proc '#f '#f oR2c23@visible? '#f) '#t) (let ((oR2c33@d (car oR2c2f@deps))) (let ((oR2c35@label (car oR2c33@d)) (oR2c36@dname (cadr oR2c33@d))) (let ((oR2c39@l (oR2b30@find-library-by-name oR2c36@dname))) (if (and (oR2ada@library? oR2c39@l) (eq? oR2c35@label (oR2adc@library-id oR2c39@l))) (oR2c31@f (cdr oR2c2f@deps)) (begin (if oR2a1e@oR28f6@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" oR2c1a@name oR2c36@dname oR2c17@filename oR2c39@l oR2c35@label (oR2adc@library-id oR2c39@l)) (void)) '#f)))))))) oR2c3d) (if (>= oR2c3e '0) (apply (lambda oR2c3b@others '#f) oR2c3d) (error 'apply '"invalid arg count")))))))) (set! oR2cf4@oR2b26@try-load-from-file oR2b26@try-load-from-file) (set! oR2b28@library-loader (oR2a24@oR2902@make-parameter (lambda (oR2c3f@x) (let ((oR2c41@file-name ((oR2b20@file-locator) oR2c3f@x))) (if (not oR2c41@file-name) (assertion-violation '#f '"cannot file library" oR2c3f@x) (or (oR2b26@try-load-from-file oR2c41@file-name) ((oR2b2a@current-library-expander) (oR2a23@oR2900@read-library-source-file oR2c41@file-name) oR2c41@file-name (lambda (oR2c43@name) (if (not (fast-equal? oR2c43@name oR2c3f@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (oR2c49@oR2c46 oR2c4a@oR2c48) (let ((oR2c4d@e oR2c4a@oR2c48) (oR2c4e@p oR2c49@oR2c46)) (begin (display '"expected to find library " oR2c4e@p) (write oR2c3f@x oR2c4e@p) (display '" in file " oR2c4e@p) (display oR2c41@file-name oR2c4e@p) (display '", found " oR2c4e@p) (write oR2c43@name oR2c4e@p) (display '" instead" oR2c4e@p) (oR2c4d@e)))))) (void)))))))) (lambda (oR2c51@f) (if (procedure? oR2c51@f) oR2c51@f (assertion-violation 'library-locator '"not a procedure" oR2c51@f))))) (set! oR2cf5@oR2b28@library-loader oR2b28@library-loader) (set! oR2b2a@current-library-expander (oR2a24@oR2902@make-parameter (lambda (oR2c53@x) (assertion-violation 'library-expander '"not initialized")) (lambda (oR2c55@f) (if (procedure? oR2c55@f) oR2c55@f (assertion-violation 'library-expander '"not a procedure" oR2c55@f))))) (set! oR2cf6@oR2b2a@current-library-expander oR2b2a@current-library-expander) (set! oR2b2c@external-pending-libraries (oR2a24@oR2902@make-parameter '())) (set! oR2cf7@oR2b2c@external-pending-libraries oR2b2c@external-pending-libraries) (set! oR2b2e@find-external-library (lambda (oR2c57@name) (begin (if (member oR2c57@name (oR2b2c@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" oR2c57@name) (void)) (let ((oR2c5d@oR2c5a oR2b2c@external-pending-libraries) (oR2c5e@oR2c5c (cons oR2c57@name (oR2b2c@external-pending-libraries)))) (let ((oR2c61@swap (lambda () (let ((oR2c63@t (oR2c5d@oR2c5a))) (begin (oR2c5d@oR2c5a oR2c5e@oR2c5c) (set! oR2c5e@oR2c5c oR2c63@t)))))) (dynamic-wind oR2c61@swap (lambda () (begin ((oR2b28@library-loader) oR2c57@name) (or (oR2b18@find-library-by (lambda (oR2c65@x) (fast-equal? (oR2ae0@library-name oR2c65@x) oR2c57@name))) (assertion-violation '#f '"handling external library did not yield the correct library" oR2c57@name)))) oR2c61@swap)))))) (set! oR2cf8@oR2b2e@find-external-library oR2b2e@find-external-library) (set! oR2b30@find-library-by-name (lambda (oR2c67@name) (or (oR2b18@find-library-by (lambda (oR2c69@x) (fast-equal? (oR2ae0@library-name oR2c69@x) oR2c67@name))) (oR2b2e@find-external-library oR2c67@name)))) (set! oR2cf9@oR2b30@find-library-by-name oR2b30@find-library-by-name) (set! oR2b32@library-exists? (lambda (oR2c6b@name) (and (oR2b18@find-library-by (lambda (oR2c6d@x) (fast-equal? (oR2ae0@library-name oR2c6d@x) oR2c6b@name))) '#t))) (set! oR2cfa@oR2b32@library-exists? oR2b32@library-exists?) (set! oR2b34@find-library-by-spec/die (lambda (oR2c6f@spec) (let ((oR2c71@id (car oR2c6f@spec))) (or (oR2b18@find-library-by (lambda (oR2c73@x) (eq? oR2c71@id (oR2adc@library-id oR2c73@x)))) (assertion-violation '#f '"cannot find library with required spec" oR2c6f@spec))))) (set! oR2cfb@oR2b34@find-library-by-spec/die oR2b34@find-library-by-spec/die) (set! oR2b36@label->binding-table (make-eq-hashtable)) (set! oR2cfc@oR2b36@label->binding-table oR2b36@label->binding-table) (set! oR2b38@install-library-record (lambda (oR2c75@lib) (begin (let ((oR2c77@exp-env (oR2af8@library-env oR2c75@lib))) (for-each (lambda (oR2c79@x) (let ((oR2c7b@label (car oR2c79@x)) (oR2c7c@binding (cdr oR2c79@x))) (let ((oR2c7f@binding (let ((oR2c81@t (car oR2c7c@binding))) (if (memv oR2c81@t '(global)) (cons 'global (cons oR2c75@lib (cdr oR2c7c@binding))) (if (memv oR2c81@t '(global-macro)) (cons 'global-macro (cons oR2c75@lib (cdr oR2c7c@binding))) (if (memv oR2c81@t '(global-macro!)) (cons 'global-macro! (cons oR2c75@lib (cdr oR2c7c@binding))) oR2c7c@binding)))))) (begin (if (hashtable-ref oR2b36@label->binding-table oR2c7b@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" oR2c7b@label (hashtable-ref oR2b36@label->binding-table oR2c7b@label '#f) oR2c7f@binding) (exit)) (void)) (hashtable-set! oR2b36@label->binding-table oR2c7b@label oR2c7f@binding))))) oR2c77@exp-env)) ((oR2ace@current-library-collection) oR2c75@lib)))) (set! oR2cfd@oR2b38@install-library-record oR2b38@install-library-record) (set! oR2b3a@install-library (lambda (oR2c83@id oR2c84@name oR2c85@ver oR2c86@imp* oR2c87@vis* oR2c88@inv* oR2c89@exp-subst oR2c8a@exp-env oR2c8b@visit-proc oR2c8c@invoke-proc oR2c8d@visit-code oR2c8e@invoke-code oR2c8f@visible? oR2c90@source-file-name) (let ((oR2c9f@imp-lib* (map oR2b34@find-library-by-spec/die oR2c86@imp*)) (oR2ca0@vis-lib* (map oR2b34@find-library-by-spec/die oR2c87@vis*)) (oR2ca1@inv-lib* (map oR2b34@find-library-by-spec/die oR2c88@inv*))) (begin (if (not (and (symbol? oR2c83@id) (list? oR2c84@name) (list? oR2c85@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" oR2c83@id oR2c84@name oR2c85@ver) (void)) (if (oR2b32@library-exists? oR2c84@name) (assertion-violation 'install-library '"library is already installed" oR2c84@name) (void)) (let ((oR2ca5@lib (make-simple-struct 'library '15 (list oR2c83@id oR2c84@name oR2c85@ver oR2c9f@imp-lib* oR2ca0@vis-lib* oR2ca1@inv-lib* oR2c89@exp-subst oR2c8a@exp-env oR2c8b@visit-proc oR2c8c@invoke-proc oR2c8d@visit-code oR2c8e@invoke-code oR2c8f@visible? oR2c90@source-file-name)))) (oR2b38@install-library-record oR2ca5@lib)))))) (set! oR2cfe@oR2b3a@install-library oR2b3a@install-library) (set! oR2b3c@imported-label->binding (lambda (oR2ca7@lab) (hashtable-ref oR2b36@label->binding-table oR2ca7@lab '#f))) (set! oR2cff@oR2b3c@imported-label->binding oR2b3c@imported-label->binding) (set! oR2b3e@invoke-library (lambda (oR2ca9@lib) (let ((oR2cab@invoke (oR2b00@library-invoke-state oR2ca9@lib))) (if (procedure? oR2cab@invoke) (begin (oR2b02@set-library-invoke-state! oR2ca9@lib (lambda () (assertion-violation 'invoke '"circularity detected" oR2ca9@lib))) (for-each oR2b3e@invoke-library (oR2af0@library-inv* oR2ca9@lib)) (oR2b02@set-library-invoke-state! oR2ca9@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" oR2ca9@lib))) (oR2cab@invoke) (oR2b02@set-library-invoke-state! oR2ca9@lib '#t)) (void))))) (set! oR2d00@oR2b3e@invoke-library oR2b3e@invoke-library) (set! oR2b40@visit-library (lambda (oR2cad@lib) (let ((oR2caf@visit (oR2afc@library-visit-state oR2cad@lib))) (if (procedure? oR2caf@visit) (begin (oR2afe@set-library-visit-state! oR2cad@lib (lambda () (assertion-violation 'visit '"circularity detected" oR2cad@lib))) (for-each oR2b3e@invoke-library (oR2aec@library-vis* oR2cad@lib)) (oR2afe@set-library-visit-state! oR2cad@lib (lambda () (assertion-violation 'invoke '"first visit did not return" oR2cad@lib))) (oR2caf@visit) (oR2afe@set-library-visit-state! oR2cad@lib '#t)) (void))))) (set! oR2d01@oR2b40@visit-library oR2b40@visit-library) (set! oR2b42@invoke-library-by-spec (lambda (oR2cb1@spec) (oR2b3e@invoke-library (oR2b34@find-library-by-spec/die oR2cb1@spec)))) (set! oR2d02@oR2b42@invoke-library-by-spec oR2b42@invoke-library-by-spec) (set! oR2b44@invoke-library-by-name (lambda (oR2cb3@name) (let ((oR2cb9@oR2cb6 oR2a25@oR2904@mosh-cache-dir) (oR2cba@oR2cb8 (create-mosh-cache-dir))) (let ((oR2cbd@swap (lambda () (let ((oR2cbf@t (oR2cb9@oR2cb6))) (begin (oR2cb9@oR2cb6 oR2cba@oR2cb8) (set! oR2cba@oR2cb8 oR2cbf@t)))))) (dynamic-wind oR2cbd@swap (lambda () (oR2b3e@invoke-library (oR2b30@find-library-by-name oR2cb3@name))) oR2cbd@swap))))) (set! oR2d03@oR2b44@invoke-library-by-name oR2b44@invoke-library-by-name) (set! oR2b46@installed-libraries (lambda oR2cc7 (let ((oR2cc8 (length oR2cc7))) (if (= oR2cc8 '1) (apply (lambda (oR2cc1@all?) (let oR2cc5@f ((oR2cc3@ls ((oR2ace@current-library-collection)))) (if (null? oR2cc3@ls) '() (if (or oR2cc1@all? (oR2b0c@library-visible? (car oR2cc3@ls))) (cons (car oR2cc3@ls) (oR2cc5@f (cdr oR2cc3@ls))) (oR2cc5@f (cdr oR2cc3@ls)))))) oR2cc7) (if (= oR2cc8 '0) (apply (lambda () (oR2b46@installed-libraries '#f)) oR2cc7) (error 'apply '"invalid arg count")))))) (set! oR2d04@oR2b46@installed-libraries oR2b46@installed-libraries) (set! oR2b48@library-spec (lambda (oR2cc9@x) (begin (if (not (oR2ada@library? oR2cc9@x)) (assertion-violation 'library-spec '"not a library" oR2cc9@x) (void)) (list (oR2adc@library-id oR2cc9@x) (oR2ae0@library-name oR2cc9@x) (oR2ae4@library-version oR2cc9@x))))) (set! oR2d05@oR2b48@library-spec oR2b48@library-spec) (void))
(begin (set! oR2d09@build-global-define (unspecified)) (set! oR2d7a@build-lambda (unspecified)) (set! oR2d7c@build-case-lambda (unspecified)) (set! oR2daa@build-sequence (unspecified)) (set! oR2dac@build-void (unspecified)) (set! oR2dae@build-letrec (unspecified)) (set! oR2db0@build-let (unspecified)) (set! oR2db2@build-named-let (unspecified)) (set! oR2db4@build-letrec* (unspecified)) (set! oR2db6@build-library-letrec* (unspecified)) (set! oR2db8@build-receive (unspecified)) (set! oR2d09@build-global-define (lambda (oR2db9@x) (oR2dac@build-void))) (set! oR2e4d@oR2d09@build-global-define oR2d09@build-global-define) (set! oR2d7a@build-lambda (lambda (oR2dbb@ae oR2dbc@vars oR2dbd@exp) (list 'lambda oR2dbc@vars oR2dbd@exp))) (set! oR2e4e@oR2d7a@build-lambda oR2d7a@build-lambda) (set! oR2d7c@build-case-lambda (lambda (oR2dc1@ae oR2dc2@vars* oR2dc3@exp*) (let ((oR2dc8@build-error '#f) (oR2dca@build-pred '#f) (oR2dcc@build-apply '#f) (oR2dce@expand-case-lambda '#f)) (begin (set! oR2dc8@build-error (lambda (oR2dff@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! oR2dca@build-pred (lambda (oR2de7@ae oR2de8@n oR2de9@vars) (call-with-values (lambda () (let oR2df5@f ((oR2df1@vars oR2de9@vars) (oR2df2@count '0)) (if (pair? oR2df1@vars) (oR2df5@f (cdr oR2df1@vars) (+ oR2df2@count '1)) (if (null? oR2df1@vars) (values oR2df2@count '=) (values oR2df2@count '>=))))) (lambda (oR2df7@oR2dee oR2df8@oR2df0) (let ((oR2dfb@pred oR2df8@oR2df0) (oR2dfc@count oR2df7@oR2dee)) (list (list 'primitive oR2dfb@pred) oR2de8@n (list 'quote oR2dfc@count))))))) (set! oR2dcc@build-apply (lambda (oR2ddf@ae oR2de0@g oR2de1@vars oR2de2@exp) (list '(primitive apply) (oR2d7a@build-lambda oR2ddf@ae oR2de1@vars oR2de2@exp) oR2de0@g))) (set! oR2dce@expand-case-lambda (lambda (oR2dcf@ae oR2dd0@vars oR2dd1@exp*) (let ((oR2dd5@g (gensym)) (oR2dd6@n (gensym))) (list 'lambda oR2dd5@g (oR2db0@build-let oR2dcf@ae (list oR2dd6@n) (list (list '(primitive length) oR2dd5@g)) (let oR2ddd@f ((oR2dd9@vars* oR2dc2@vars*) (oR2dda@exp* oR2dd1@exp*)) (if (null? oR2dd9@vars*) (oR2dc8@build-error oR2dcf@ae) (list 'if (oR2dca@build-pred oR2dcf@ae oR2dd6@n (car oR2dd9@vars*)) (oR2dcc@build-apply oR2dcf@ae oR2dd5@g (car oR2dd9@vars*) (car oR2dda@exp*)) (oR2ddd@f (cdr oR2dd9@vars*) (cdr oR2dda@exp*)))))))))) (if (= (length oR2dc3@exp*) '1) (oR2d7a@build-lambda oR2dc1@ae (car oR2dc2@vars*) (car oR2dc3@exp*)) (oR2dce@expand-case-lambda oR2dc1@ae oR2dc2@vars* oR2dc3@exp*)))))) (set! oR2e4f@oR2d7c@build-case-lambda oR2d7c@build-case-lambda) (set! oR2daa@build-sequence (lambda (oR2e01@ae oR2e02@exps) (let oR2e07@loop ((oR2e05@exps oR2e02@exps)) (if (null? (cdr oR2e05@exps)) (car oR2e05@exps) (if (equal? (car oR2e05@exps) (oR2dac@build-void)) (oR2e07@loop (cdr oR2e05@exps)) (cons 'begin oR2e05@exps)))))) (set! oR2e50@oR2daa@build-sequence oR2daa@build-sequence) (set! oR2dac@build-void (lambda () '((primitive void)))) (set! oR2e51@oR2dac@build-void oR2dac@build-void) (set! oR2dae@build-letrec (lambda (oR2e09@ae oR2e0a@vars oR2e0b@val-exps oR2e0c@body-exp) (if (null? oR2e0a@vars) oR2e0c@body-exp (list 'letrec (map list oR2e0a@vars oR2e0b@val-exps) oR2e0c@body-exp)))) (set! oR2e52@oR2dae@build-letrec oR2dae@build-letrec) (set! oR2db0@build-let (lambda (oR2e11@ae oR2e12@vars oR2e13@val-exps oR2e14@body-exp) (if (null? oR2e12@vars) oR2e14@body-exp (list 'let (map list oR2e12@vars oR2e13@val-exps) oR2e14@body-exp)))) (set! oR2e53@oR2db0@build-let oR2db0@build-let) (set! oR2db2@build-named-let (lambda (oR2e19@ae oR2e1a@name oR2e1b@vars oR2e1c@val-exps oR2e1d@body-exp) (list 'let oR2e1a@name (map list oR2e1b@vars oR2e1c@val-exps) oR2e1d@body-exp))) (set! oR2e54@oR2db2@build-named-let oR2db2@build-named-let) (set! oR2db4@build-letrec* (lambda (oR2e23@ae oR2e24@vars oR2e25@val-exps oR2e26@body-exp) (if (null? oR2e24@vars) oR2e26@body-exp (oR2db0@build-let oR2e23@ae oR2e24@vars (map (lambda (oR2e2b@x) (list 'quote '#f)) oR2e24@vars) (oR2daa@build-sequence oR2e23@ae (append (map (lambda (oR2e2d@lhs oR2e2e@rhs) (list 'set! oR2e2d@lhs oR2e2e@rhs)) oR2e24@vars oR2e25@val-exps) (list oR2e26@body-exp))))))) (set! oR2e55@oR2db4@build-letrec* oR2db4@build-letrec*) (set! oR2db6@build-library-letrec* (lambda (oR2e31@ae oR2e32@name oR2e33@vars oR2e34@locs oR2e35@val-exps oR2e36@body-exp) (cons 'begin (append (map (lambda (oR2e3d@var) (cons 'set! (cons oR2e3d@var '((unspecified))))) oR2e33@vars) (append (apply append (map (lambda (oR2e3f@var oR2e40@loc oR2e41@val-exp) (list (list 'set! oR2e3f@var oR2e41@val-exp) (list 'set! oR2e40@loc oR2e3f@var))) oR2e33@vars oR2e34@locs oR2e35@val-exps)) (list oR2e36@body-exp)))))) (set! oR2e56@oR2db6@build-library-letrec* oR2db6@build-library-letrec*) (set! oR2db8@build-receive (lambda (oR2e45@ae oR2e46@vars oR2e47@producer oR2e48@body*) (begin (display '"************** in ") (cons 'receive (cons oR2e46@vars (cons oR2e47@producer oR2e48@body*)))))) (set! oR2e57@oR2db8@build-receive oR2db8@build-receive) (void))
(begin (set! oR2e66@file-options-macro (unspecified)) (set! oR2e68@set-cons (unspecified)) (set! oR2e6a@set-union (unspecified)) (set! oR2e6f@top-mark* (unspecified)) (set! oR2e71@top-marked? (unspecified)) (set! oR2e73@gen-lexical (unspecified)) (set! oR2e75@gen-global (unspecified)) (set! oR2e77@gen-label (unspecified)) (set! oR2e79@gen-top-level-label (unspecified)) (set! oR2e7b@gen-define-label+loc (unspecified)) (set! oR2e7d@gen-define-label (unspecified)) (set! oR2e87@rib? (unspecified)) (set! oR2e89@rib-sym* (unspecified)) (set! oR2e8b@set-rib-sym*! (unspecified)) (set! oR2e8d@rib-mark** (unspecified)) (set! oR2e8f@set-rib-mark**! (unspecified)) (set! oR2e91@rib-label* (unspecified)) (set! oR2e93@set-rib-label*! (unspecified)) (set! oR2e95@rib-sealed/freq (unspecified)) (set! oR2e97@set-rib-sealed/freq! (unspecified)) (set! oR2e99@rib-cache (unspecified)) (set! oR2e9b@set-rib-cache! (unspecified)) (set! oR2e9d@dummy (unspecified)) (set! oR2e9f@make-empty-rib (unspecified)) (set! oR2ea1@extend-rib! (unspecified)) (set! oR2ea3@extend-rib/nc! (unspecified)) (set! oR2ea5@make-rib-map (unspecified)) (set! oR2ea7@seal-rib! (unspecified)) (set! oR2ea9@unseal-rib! (unspecified)) (set! oR2eab@make-full-rib (unspecified)) (set! oR2ead@rp (unspecified)) (set! oR2eb7@stx? (unspecified)) (set! oR2eb9@stx-expr (unspecified)) (set! oR2ebb@set-stx-expr! (unspecified)) (set! oR2ebd@stx-mark* (unspecified)) (set! oR2ebf@set-stx-mark*! (unspecified)) (set! oR2ec1@stx-subst* (unspecified)) (set! oR2ec3@set-stx-subst*! (unspecified)) (set! oR2ec5@stx-ae* (unspecified)) (set! oR2ec7@set-stx-ae*! (unspecified)) (set! oR2ec9@dummy (unspecified)) (set! oR2ecb@datum->stx (unspecified)) (set! oR2ecd@gen-mark (unspecified)) (set! oR2ecf@anti-mark (unspecified)) (set! oR2ed1@anti-mark? (unspecified)) (set! oR2ed3@mkstx (unspecified)) (set! oR2ed5@add-mark (unspecified)) (set! oR2ed7@add-subst (unspecified)) (set! oR2ed9@syntax-kind? (unspecified)) (set! oR2edb@syntax-vector->list (unspecified)) (set! oR2edd@syntax-pair? (unspecified)) (set! oR2edf@syntax-vector? (unspecified)) (set! oR2ee1@syntax-null? (unspecified)) (set! oR2ee3@syntax-list? (unspecified)) (set! oR2ee5@syntax-car (unspecified)) (set! oR2ee7@syntax-cdr (unspecified)) (set! oR2ee9@syntax->list (unspecified)) (set! oR2eeb@id? (unspecified)) (set! oR2eed@id->sym (unspecified)) (set! oR2eef@bound-id=? (unspecified)) (set! oR2ef1@free-id=? (unspecified)) (set! oR2ef3@valid-bound-ids? (unspecified)) (set! oR2ef5@distinct-bound-ids? (unspecified)) (set! oR2ef7@bound-id-member? (unspecified)) (set! oR2ef9@self-evaluating? (unspecified)) (set! oR2efb@strip-annotations (unspecified)) (set! oR2efd@strip (unspecified)) (set! oR2eff@stx->datum (unspecified)) (set! oR2f01@id->label (unspecified)) (set! oR2f03@label->binding (unspecified)) (set! oR2f05@make-binding (unspecified)) (set! oR2f07@binding-type (unspecified)) (set! oR2f09@binding-value (unspecified)) (set! oR2f0b@raise-unbound-error (unspecified)) (set! oR2f0d@syntax-type (unspecified)) (set! oR2f1b@sanitize-binding (unspecified)) (set! oR2f1d@make-variable-transformer (unspecified)) (set! oR2f1f@variable-transformer? (unspecified)) (set! oR2f21@variable-transformer-procedure (unspecified)) (set! oR2f23@make-eval-transformer (unspecified)) (set! oR3074@parse-define (unspecified)) (set! oR3076@parse-define-syntax (unspecified)) (set! oR3078@scheme-stx-hashtable (unspecified)) (set! oR307a@scheme-stx (unspecified)) (set! oR307c@lexical-var (unspecified)) (set! oR307e@lexical-mutable? (unspecified)) (set! oR3080@set-lexical-mutable! (unspecified)) (set! oR3082@add-lexical (unspecified)) (set! oR3084@add-lexicals (unspecified)) (set! oR3086@letrec-helper (unspecified)) (set! oR3088@let-transformer (unspecified)) (set! oR308a@letrec-transformer (unspecified)) (set! oR308c@letrec*-transformer (unspecified)) (set! oR308e@fluid-let-syntax-transformer (unspecified)) (set! oR3090@type-descriptor-transformer (unspecified)) (set! oR3092@record-type-descriptor-transformer (unspecified)) (set! oR3094@record-constructor-descriptor-transformer (unspecified)) (set! oR3096@when-macro (unspecified)) (set! oR3098@unless-macro (unspecified)) (set! oR309a@if-transformer (unspecified)) (set! oR309c@and-transformer (unspecified)) (set! oR309e@or-transformer (unspecified)) (set! oR30a0@case-macro (unspecified)) (set! oR30a2@quote-transformer (unspecified)) (set! oR30a4@case-lambda-transformer (unspecified)) (set! oR30a6@lambda-transformer (unspecified)) (set! oR30a8@bless (unspecified)) (set! oR30aa@with-syntax-macro (unspecified)) (set! oR30ac@invalid-fmls-error (unspecified)) (set! oR30ae@let-macro (unspecified)) (set! oR30b0@let-values-macro (unspecified)) (set! oR30b2@let*-values-macro (unspecified)) (set! oR30b4@trace-lambda-macro (unspecified)) (set! oR30b6@trace-define-macro (unspecified)) (set! oR30b8@trace-define-syntax-macro (unspecified)) (set! oR30ba@trace-let/rec-syntax (unspecified)) (set! oR30bc@trace-let-syntax-macro (unspecified)) (set! oR30be@trace-letrec-syntax-macro (unspecified)) (set! oR30c0@guard-macro (unspecified)) (set! oR30c2@define-enumeration-macro (unspecified)) (set! oR30c4@time-macro (unspecified)) (set! oR30c6@delay-macro (unspecified)) (set! oR30c8@assert-macro (unspecified)) (set! oR30ca@endianness-macro (unspecified)) (set! oR30cc@identifier-syntax-macro (unspecified)) (set! oR30ce@do-macro (unspecified)) (set! oR30d0@let*-macro (unspecified)) (set! oR30d2@or-macro (unspecified)) (set! oR30d4@and-macro (unspecified)) (set! oR30d6@cond-macro (unspecified)) (set! oR30d8@do-include (unspecified)) (set! oR30da@include-macro (unspecified)) (set! oR30dc@include-into-macro (unspecified)) (set! oR30de@syntax-rules-macro (unspecified)) (set! oR30e0@quasiquote-macro (unspecified)) (set! oR30e2@quasisyntax-macro (unspecified)) (set! oR30e4@define-struct-macro (unspecified)) (set! oR30e6@define-record-type-macro (unspecified)) (set! oR30e8@define-condition-type-macro (unspecified)) (set! oR30ea@incorrect-usage-macro (unspecified)) (set! oR30ec@parameterize-macro (unspecified)) (set! oR30ee@foreign-call-transformer (unspecified)) (set! oR30f0@convert-pattern (unspecified)) (set! oR30f2@syntax-dispatch (unspecified)) (set! oR30f4@ellipsis? (unspecified)) (set! oR30f6@underscore? (unspecified)) (set! oR30f8@verify-literals (unspecified)) (set! oR30fa@syntax-case-transformer (unspecified)) (set! oR30fc@ellipsis-map (unspecified)) (set! oR30fe@syntax-transformer (unspecified)) (set! oR3100@core-macro-transformer (unspecified)) (set! oR3102@symbol-macro (unspecified)) (set! oR3104@macro-transformer (unspecified)) (set! oR3106@local-macro-transformer (unspecified)) (set! oR3108@do-macro-call (unspecified)) (set! oR310a@chi-macro (unspecified)) (set! oR310c@chi-local-macro (unspecified)) (set! oR310e@chi-global-macro (unspecified)) (set! oR3110@chi-expr* (unspecified)) (set! oR3112@chi-application (unspecified)) (set! oR3114@chi-expr (unspecified)) (set! oR3116@chi-set! (unspecified)) (set! oR3118@verify-formals (unspecified)) (set! oR311a@chi-lambda-clause (unspecified)) (set! oR311c@chi-lambda-clause* (unspecified)) (set! oR311e@chi-defun (unspecified)) (set! oR3120@chi-rhs (unspecified)) (set! oR3122@expand-interaction-rhs*/init* (unspecified)) (set! oR3124@chi-rhs* (unspecified)) (set! oR3126@find-bound=? (unspecified)) (set! oR3128@find-dups (unspecified)) (set! oR312a@chi-internal (unspecified)) (set! oR312c@parse-module (unspecified)) (set! oR3136@module-interface? (unspecified)) (set! oR3138@module-interface-first-mark (unspecified)) (set! oR313a@set-module-interface-first-mark! (unspecified)) (set! oR313c@module-interface-exp-id-vec (unspecified)) (set! oR313e@set-module-interface-exp-id-vec! (unspecified)) (set! oR3140@module-interface-exp-lab-vec (unspecified)) (set! oR3142@set-module-interface-exp-lab-vec! (unspecified)) (set! oR3144@dummy (unspecified)) (set! oR3146@module-interface-exp-id* (unspecified)) (set! oR3148@chi-internal-module (unspecified)) (set! oR314a@chi-body* (unspecified)) (set! oR314c@expand-transformer (unspecified)) (set! oR314e@parse-exports (unspecified)) (set! oR3150@parse-library-name (unspecified)) (set! oR3152@parse-library (unspecified)) (set! oR3154@parse-import-spec* (unspecified)) (set! oR3156@make-top-rib (unspecified)) (set! oR3158@make-collector (unspecified)) (set! oR315a@inv-collector (unspecified)) (set! oR315c@vis-collector (unspecified)) (set! oR315e@imp-collector (unspecified)) (set! oR3160@chi-library-internal (unspecified)) (set! oR3162@chi-interaction-expr (unspecified)) (set! oR3164@library-body-expander (unspecified)) (set! oR3166@core-library-expander (unspecified)) (set! oR3168@parse-top-level-program (unspecified)) (set! oR316a@top-level-expander (unspecified)) (set! oR316c@rp (unspecified)) (set! oR3176@env? (unspecified)) (set! oR3178@env-names (unspecified)) (set! oR317a@set-env-names! (unspecified)) (set! oR317c@env-labels (unspecified)) (set! oR317e@set-env-labels! (unspecified)) (set! oR3180@env-itc (unspecified)) (set! oR3182@set-env-itc! (unspecified)) (set! oR3184@dummy (unspecified)) (set! oR3186@rp (unspecified)) (set! oR3190@interaction-env? (unspecified)) (set! oR3192@interaction-env-rib (unspecified)) (set! oR3194@set-interaction-env-rib! (unspecified)) (set! oR3196@interaction-env-r (unspecified)) (set! oR3198@set-interaction-env-r! (unspecified)) (set! oR319a@interaction-env-locs (unspecified)) (set! oR319c@set-interaction-env-locs! (unspecified)) (set! oR319e@dummy (unspecified)) (set! oR31a0@interaction-environment-symbols (unspecified)) (set! oR31a2@environment-bindings (unspecified)) (set! oR31a4@parse-binding (unspecified)) (set! oR31a6@environment? (unspecified)) (set! oR31a8@environment-symbols (unspecified)) (set! oR31aa@environment (unspecified)) (set! oR31ac@null-environment (unspecified)) (set! oR31ae@scheme-report-environment (unspecified)) (set! oR31b0@expand (unspecified)) (set! oR31b2@eval (unspecified)) (set! oR31b4@library-expander (unspecified)) (set! oR31b6@boot-library-expand (unspecified)) (set! oR31b8@rev-map-append (unspecified)) (set! oR31ba@build-exports (unspecified)) (set! oR31bc@make-export-subst (unspecified)) (set! oR31be@make-export-env/macros (unspecified)) (set! oR31c0@generate-temporaries (unspecified)) (set! oR31c2@free-identifier=? (unspecified)) (set! oR31c4@bound-identifier=? (unspecified)) (set! oR31c6@make-source-condition (unspecified)) (set! oR31c8@extract-position-condition (unspecified)) (set! oR31ca@expression-position (unspecified)) (set! oR31cc@assertion-error (unspecified)) (set! oR31ce@syntax-error (unspecified)) (set! oR31d0@syntax-violation* (unspecified)) (set! oR31d2@syntax-violation (unspecified)) (set! oR31d4@identifier? (unspecified)) (set! oR31d6@datum->syntax (unspecified)) (set! oR31d8@syntax->datum (unspecified)) (set! oR31da@ungensym-all (unspecified)) (set! oR31dc@compile-r6rs-top-level (unspecified)) (set! oR31de@pre-compile-r6rs-top-level (unspecified)) (set! oR31e0@interaction-environment (unspecified)) (set! oR31e2@top-level-context (unspecified)) (set! oR2e66@file-options-macro (lambda (oR31e3@x) (let ((oR31e6@valid-option? '#f)) (begin (set! oR31e6@valid-option? (lambda (oR31ef@x) (and (oR2eeb@id? oR31ef@x) (memq (oR2eed@id->sym oR31ef@x) '(no-fail no-create no-truncate))))) (let ((oR31e7@t oR31e3@x)) (let ((oR31e9@ls/false (oR30f2@syntax-dispatch oR31e7@t '(_ . each-any)))) (if (and oR31e9@ls/false (apply (lambda (oR31eb@opt*) (for-all oR31e6@valid-option? oR31eb@opt*)) oR31e9@ls/false)) (apply (lambda (oR31ed@opt*) (oR30a8@bless (list 'make-file-options (list 'quote oR31ed@opt*)))) oR31e9@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR31e7@t)))))))) (set! oR4b39@oR2e66@file-options-macro oR2e66@file-options-macro) (set! oR2e68@set-cons (lambda (oR31f1@x oR31f2@ls) (if (memq oR31f1@x oR31f2@ls) oR31f2@ls (cons oR31f1@x oR31f2@ls)))) (set! oR4b3a@oR2e68@set-cons oR2e68@set-cons) (set! oR2e6a@set-union (lambda (oR31f5@ls1 oR31f6@ls2) (if (null? oR31f5@ls1) oR31f6@ls2 (if (memq (car oR31f5@ls1) oR31f6@ls2) (oR2e6a@set-union (cdr oR31f5@ls1) oR31f6@ls2) (cons (car oR31f5@ls1) (oR2e6a@set-union (cdr oR31f5@ls1) oR31f6@ls2)))))) (set! oR4b3b@oR2e6a@set-union oR2e6a@set-union) (set! oR2e6f@top-mark* '(top)) (set! oR4b3c@oR2e6f@top-mark* oR2e6f@top-mark*) (set! oR2e71@top-marked? (lambda (oR31f9@m*) (memq 'top oR31f9@m*))) (set! oR4b3d@oR2e71@top-marked? oR2e71@top-marked?) (set! oR2e73@gen-lexical (lambda (oR31fb@sym) (if (symbol? oR31fb@sym) (gensym oR31fb@sym) (if (oR2eb7@stx? oR31fb@sym) (oR2e73@gen-lexical (oR2eed@id->sym oR31fb@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" oR31fb@sym))))) (set! oR4b3e@oR2e73@gen-lexical oR2e73@gen-lexical) (set! oR2e75@gen-global (lambda (oR31fd@x) (oR2e73@gen-lexical oR31fd@x))) (set! oR4b3f@oR2e75@gen-global oR2e75@gen-global) (set! oR2e77@gen-label (lambda (oR31ff@_) (gensym))) (set! oR4b40@oR2e77@gen-label oR2e77@gen-label) (set! oR2e79@gen-top-level-label (lambda (oR3201@id oR3202@rib) (let ((oR3206@find '#f)) (begin (set! oR3206@find (lambda (oR3211@sym oR3212@mark* oR3213@sym* oR3214@mark** oR3215@label*) (and (pair? oR3213@sym*) (if (and (eq? oR3211@sym (car oR3213@sym*)) (same-marks? oR3212@mark* (car oR3214@mark**))) (car oR3215@label*) (oR3206@find oR3211@sym oR3212@mark* (cdr oR3213@sym*) (cdr oR3214@mark**) (cdr oR3215@label*)))))) (let ((oR3207@sym (oR2eed@id->sym oR3201@id)) (oR3208@mark* (oR2ebd@stx-mark* oR3201@id))) (let ((oR320b@sym* (oR2e89@rib-sym* oR3202@rib))) (let ((oR320d@t (and (memq oR3207@sym (oR2e89@rib-sym* oR3202@rib)) (oR3206@find oR3207@sym oR3208@mark* oR320b@sym* (oR2e8d@rib-mark** oR3202@rib) (oR2e91@rib-label* oR3202@rib))))) (if oR320d@t ((lambda (oR320f@label) (if (oR2cff@oR2b3c@imported-label->binding oR320f@label) (gensym) oR320f@label)) oR320d@t) (gensym))))))))) (set! oR4b41@oR2e79@gen-top-level-label oR2e79@gen-top-level-label) (set! oR2e7b@gen-define-label+loc (lambda (oR321b@id oR321c@rib) (let ((oR321f@t (oR31e2@top-level-context))) (if oR321f@t ((lambda (oR3221@env) (let ((oR3223@label (oR2e79@gen-top-level-label oR321b@id oR321c@rib)) (oR3224@locs (oR319a@interaction-env-locs oR3221@env))) (values oR3223@label (let ((oR3227@t (assq oR3223@label oR3224@locs))) (if oR3227@t (cdr oR3227@t) (let ((oR3229@loc (oR2e73@gen-lexical oR321b@id))) (begin (oR319c@set-interaction-env-locs! oR3221@env (cons (cons oR3223@label oR3229@loc) oR3224@locs)) oR3229@loc))))))) oR321f@t) (values (gensym) (oR2e73@gen-lexical oR321b@id)))))) (set! oR4b42@oR2e7b@gen-define-label+loc oR2e7b@gen-define-label+loc) (set! oR2e7d@gen-define-label (lambda (oR322b@id oR322c@rib) (if (oR31e2@top-level-context) (oR2e79@gen-top-level-label oR322b@id oR322c@rib) (gensym)))) (set! oR4b43@oR2e7d@gen-define-label oR2e7d@gen-define-label) (set! oR2e87@rib? (lambda (oR322f@x) (and (simple-struct? oR322f@x) (eq? (simple-struct-name oR322f@x) 'rib)))) (set! oR4b44@oR2e87@rib? oR2e87@rib?) (set! oR2e89@rib-sym* (lambda (oR3231@x) (simple-struct-ref oR3231@x '0))) (set! oR4b45@oR2e89@rib-sym* oR2e89@rib-sym*) (set! oR2e8b@set-rib-sym*! (lambda (oR3233@x oR3234@val) (simple-struct-set! oR3233@x '0 oR3234@val))) (set! oR4b46@oR2e8b@set-rib-sym*! oR2e8b@set-rib-sym*!) (set! oR2e8d@rib-mark** (lambda (oR3237@x) (simple-struct-ref oR3237@x '1))) (set! oR4b47@oR2e8d@rib-mark** oR2e8d@rib-mark**) (set! oR2e8f@set-rib-mark**! (lambda (oR3239@x oR323a@val) (simple-struct-set! oR3239@x '1 oR323a@val))) (set! oR4b48@oR2e8f@set-rib-mark**! oR2e8f@set-rib-mark**!) (set! oR2e91@rib-label* (lambda (oR323d@x) (simple-struct-ref oR323d@x '2))) (set! oR4b49@oR2e91@rib-label* oR2e91@rib-label*) (set! oR2e93@set-rib-label*! (lambda (oR323f@x oR3240@val) (simple-struct-set! oR323f@x '2 oR3240@val))) (set! oR4b4a@oR2e93@set-rib-label*! oR2e93@set-rib-label*!) (set! oR2e95@rib-sealed/freq (lambda (oR3243@x) (simple-struct-ref oR3243@x '3))) (set! oR4b4b@oR2e95@rib-sealed/freq oR2e95@rib-sealed/freq) (set! oR2e97@set-rib-sealed/freq! (lambda (oR3245@x oR3246@val) (simple-struct-set! oR3245@x '3 oR3246@val))) (set! oR4b4c@oR2e97@set-rib-sealed/freq! oR2e97@set-rib-sealed/freq!) (set! oR2e99@rib-cache (lambda (oR3249@x) (simple-struct-ref oR3249@x '4))) (set! oR4b4d@oR2e99@rib-cache oR2e99@rib-cache) (set! oR2e9b@set-rib-cache! (lambda (oR324b@x oR324c@val) (simple-struct-set! oR324b@x '4 oR324c@val))) (set! oR4b4e@oR2e9b@set-rib-cache! oR2e9b@set-rib-cache!) (set! oR2e9d@dummy '3) (set! oR4b4f@oR2e9d@dummy oR2e9d@dummy) (set! oR2e9f@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! oR4b50@oR2e9f@make-empty-rib oR2e9f@make-empty-rib) (set! oR2ea1@extend-rib! (lambda (oR324f@rib oR3250@id oR3251@label) (let ((oR3256@find '#f)) (begin (set! oR3256@find (lambda (oR3263@sym oR3264@mark* oR3265@sym* oR3266@mark** oR3267@label*) (and (pair? oR3265@sym*) (if (and (eq? oR3263@sym (car oR3265@sym*)) (same-marks? oR3264@mark* (car oR3266@mark**))) oR3267@label* (oR3256@find oR3263@sym oR3264@mark* (cdr oR3265@sym*) (cdr oR3266@mark**) (cdr oR3267@label*)))))) (begin (if (oR2e95@rib-sealed/freq oR324f@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" oR324f@rib) (void)) (let ((oR3257@sym (oR2eed@id->sym oR3250@id)) (oR3258@mark* (oR2ebd@stx-mark* oR3250@id))) (let ((oR325b@sym* (oR2e89@rib-sym* oR324f@rib))) (let ((oR325d@t (and (memq oR3257@sym (oR2e89@rib-sym* oR324f@rib)) (oR3256@find oR3257@sym oR3258@mark* oR325b@sym* (oR2e8d@rib-mark** oR324f@rib) (oR2e91@rib-label* oR324f@rib))))) (if oR325d@t ((lambda (oR325f@p) (if (not (eq? oR3251@label (car oR325f@p))) (if (oR31e2@top-level-context) (set-car! oR325f@p oR3251@label) (oR31d2@syntax-violation '#f '"multiple definitions of identifier" oR3250@id)) (void))) oR325d@t) (begin (if (oR2e99@rib-cache oR324f@rib) (hashtable-update! (oR2e99@rib-cache oR324f@rib) oR3257@sym (lambda (oR3261@e) (cons (cons oR3258@mark* oR3251@label) oR3261@e)) '()) (void)) (oR2e8b@set-rib-sym*! oR324f@rib (cons oR3257@sym oR325b@sym*)) (oR2e8f@set-rib-mark**! oR324f@rib (cons oR3258@mark* (oR2e8d@rib-mark** oR324f@rib))) (oR2e93@set-rib-label*! oR324f@rib (cons oR3251@label (oR2e91@rib-label* oR324f@rib))))))))))))) (set! oR4b51@oR2ea1@extend-rib! oR2ea1@extend-rib!) (set! oR2ea3@extend-rib/nc! (lambda (oR326d@rib oR326e@id oR326f@label) (let ((oR3273@sym (oR2eed@id->sym oR326e@id)) (oR3274@mark* (oR2ebd@stx-mark* oR326e@id))) (let ((oR3277@sym* (oR2e89@rib-sym* oR326d@rib))) (begin (if (oR2e99@rib-cache oR326d@rib) (hashtable-update! (oR2e99@rib-cache oR326d@rib) oR3273@sym (lambda (oR3279@e) (cons (cons oR3274@mark* oR326f@label) oR3279@e)) '()) (void)) (oR2e8b@set-rib-sym*! oR326d@rib (cons oR3273@sym oR3277@sym*)) (oR2e8f@set-rib-mark**! oR326d@rib (cons oR3274@mark* (oR2e8d@rib-mark** oR326d@rib))) (oR2e93@set-rib-label*! oR326d@rib (cons oR326f@label (oR2e91@rib-label* oR326d@rib)))))))) (set! oR4b52@oR2ea3@extend-rib/nc! oR2ea3@extend-rib/nc!) (set! oR2ea5@make-rib-map (lambda (oR327b@sym*) (let ((oR327d@ht (make-eq-hashtable))) (let oR3283@f ((oR327f@i '0) (oR3280@sym* oR327b@sym*)) (if (null? oR3280@sym*) oR327d@ht (begin (hashtable-update! oR327d@ht (car oR3280@sym*) (lambda (oR3285@x) (cons oR327f@i oR3285@x)) '()) (oR3283@f (+ oR327f@i '1) (cdr oR3280@sym*)))))))) (set! oR4b53@oR2ea5@make-rib-map oR2ea5@make-rib-map) (set! oR2ea7@seal-rib! (lambda (oR3287@rib) (let ((oR3289@sym* (oR2e89@rib-sym* oR3287@rib))) (if (not (null? oR3289@sym*)) (begin (oR2e8b@set-rib-sym*! oR3287@rib (list->vector oR3289@sym*)) (oR2e8f@set-rib-mark**! oR3287@rib (list->vector (oR2e8d@rib-mark** oR3287@rib))) (oR2e93@set-rib-label*! oR3287@rib (list->vector (oR2e91@rib-label* oR3287@rib))) (oR2e97@set-rib-sealed/freq! oR3287@rib (oR2ea5@make-rib-map oR3289@sym*))) (void))))) (set! oR4b54@oR2ea7@seal-rib! oR2ea7@seal-rib!) (set! oR2ea9@unseal-rib! (lambda (oR328b@rib) (if (oR2e95@rib-sealed/freq oR328b@rib) (begin (oR2e97@set-rib-sealed/freq! oR328b@rib '#f) (oR2e8b@set-rib-sym*! oR328b@rib (vector->list (oR2e89@rib-sym* oR328b@rib))) (oR2e8f@set-rib-mark**! oR328b@rib (vector->list (oR2e8d@rib-mark** oR328b@rib))) (oR2e93@set-rib-label*! oR328b@rib (vector->list (oR2e91@rib-label* oR328b@rib)))) (void)))) (set! oR4b55@oR2ea9@unseal-rib! oR2ea9@unseal-rib!) (set! oR2eab@make-full-rib (lambda (oR328d@id* oR328e@label*) (let ((oR3291@r (make-simple-struct 'rib '6 (list (map oR2eed@id->sym oR328d@id*) (map oR2ebd@stx-mark* oR328d@id*) oR328e@label* '#f '#f)))) (begin (oR2ea7@seal-rib! oR3291@r) oR3291@r)))) (set! oR4b56@oR2eab@make-full-rib oR2eab@make-full-rib) (set! oR2ead@rp (oR2a21@oR28fc@make-record-printer 'stx (lambda (oR3293@x oR3294@p oR3295@wr) (begin (display '"#<syntax " oR3294@p) (write (oR2eff@stx->datum oR3293@x) oR3294@p) (let ((oR3299@expr (oR2eb9@stx-expr oR3293@x))) (if (oR2a18@oR28ea@annotation? oR3299@expr) (let ((oR329b@src (oR2a19@oR28ec@annotation-source oR3299@expr))) (if (pair? oR329b@src) (begin (display '" [" oR3294@p) (display (cdr oR329b@src) oR3294@p) (display '" of " oR3294@p) (display (car oR329b@src) oR3294@p) (display '"]" oR3294@p)) (void))) (void))) (display '">" oR3294@p))))) (set! oR4b57@oR2ead@rp oR2ead@rp) (set! oR2eb7@stx? (lambda (oR329d@x) (and (simple-struct? oR329d@x) (eq? (simple-struct-name oR329d@x) 'stx)))) (set! oR4b58@oR2eb7@stx? oR2eb7@stx?) (set! oR2eb9@stx-expr (lambda (oR329f@x) (simple-struct-ref oR329f@x '0))) (set! oR4b59@oR2eb9@stx-expr oR2eb9@stx-expr) (set! oR2ebb@set-stx-expr! (lambda (oR32a1@x oR32a2@val) (simple-struct-set! oR32a1@x '0 oR32a2@val))) (set! oR4b5a@oR2ebb@set-stx-expr! oR2ebb@set-stx-expr!) (set! oR2ebd@stx-mark* (lambda (oR32a5@x) (simple-struct-ref oR32a5@x '1))) (set! oR4b5b@oR2ebd@stx-mark* oR2ebd@stx-mark*) (set! oR2ebf@set-stx-mark*! (lambda (oR32a7@x oR32a8@val) (simple-struct-set! oR32a7@x '1 oR32a8@val))) (set! oR4b5c@oR2ebf@set-stx-mark*! oR2ebf@set-stx-mark*!) (set! oR2ec1@stx-subst* (lambda (oR32ab@x) (simple-struct-ref oR32ab@x '2))) (set! oR4b5d@oR2ec1@stx-subst* oR2ec1@stx-subst*) (set! oR2ec3@set-stx-subst*! (lambda (oR32ad@x oR32ae@val) (simple-struct-set! oR32ad@x '2 oR32ae@val))) (set! oR4b5e@oR2ec3@set-stx-subst*! oR2ec3@set-stx-subst*!) (set! oR2ec5@stx-ae* (lambda (oR32b1@x) (simple-struct-ref oR32b1@x '3))) (set! oR4b5f@oR2ec5@stx-ae* oR2ec5@stx-ae*) (set! oR2ec7@set-stx-ae*! (lambda (oR32b3@x oR32b4@val) (simple-struct-set! oR32b3@x '3 oR32b4@val))) (set! oR4b60@oR2ec7@set-stx-ae*! oR2ec7@set-stx-ae*!) (set! oR2ec9@dummy '3) (set! oR4b61@oR2ec9@dummy oR2ec9@dummy) (set! oR2ecb@datum->stx (lambda (oR32b7@id oR32b8@datum) (make-simple-struct 'stx '5 (list oR32b8@datum (oR2ebd@stx-mark* oR32b7@id) (oR2ec1@stx-subst* oR32b7@id) (oR2ec5@stx-ae* oR32b7@id))))) (set! oR4b62@oR2ecb@datum->stx oR2ecb@datum->stx) (set! oR2ecd@gen-mark (lambda () (string '#\m))) (set! oR4b63@oR2ecd@gen-mark oR2ecd@gen-mark) (set! oR2ecf@anti-mark '#f) (set! oR4b64@oR2ecf@anti-mark oR2ecf@anti-mark) (set! oR2ed1@anti-mark? not) (set! oR4b65@oR2ed1@anti-mark? oR2ed1@anti-mark?) (set! oR2ed3@mkstx (lambda (oR32bb@e oR32bc@m* oR32bd@s* oR32be@ae*) (if (and (oR2eb7@stx? oR32bb@e) (not (oR2e71@top-marked? oR32bc@m*))) (call-with-values (lambda () (join-wraps oR32bc@m* oR32bd@s* oR32be@ae* oR32bb@e)) (lambda (oR32c9@oR32c4 oR32ca@oR32c6 oR32cb@oR32c8) (let ((oR32cf@ae* oR32cb@oR32c8) (oR32d0@s* oR32ca@oR32c6) (oR32d1@m* oR32c9@oR32c4)) (make-simple-struct 'stx '5 (list (oR2eb9@stx-expr oR32bb@e) oR32d1@m* oR32d0@s* oR32cf@ae*))))) (make-simple-struct 'stx '5 (list oR32bb@e oR32bc@m* oR32bd@s* oR32be@ae*))))) (set! oR4b66@oR2ed3@mkstx oR2ed3@mkstx) (set! oR2ed5@add-mark (lambda (oR32d5@m oR32d6@e oR32d7@ae) (oR2ed3@mkstx oR32d6@e (list oR32d5@m) '(shift) (list oR32d7@ae)))) (set! oR4b67@oR2ed5@add-mark oR2ed5@add-mark) (set! oR2ed7@add-subst (lambda (oR32db@subst oR32dc@e) (oR2ed3@mkstx oR32dc@e '() (list oR32db@subst) '()))) (set! oR4b68@oR2ed7@add-subst oR2ed7@add-subst) (set! oR2ed9@syntax-kind? (lambda (oR32df@x oR32e0@p?) (if (oR2eb7@stx? oR32df@x) (oR2ed9@syntax-kind? (oR2eb9@stx-expr oR32df@x) oR32e0@p?) (if (oR2a18@oR28ea@annotation? oR32df@x) (oR2ed9@syntax-kind? (oR2a1a@oR28ee@annotation-expression oR32df@x) oR32e0@p?) (oR32e0@p? oR32df@x))))) (set! oR4b69@oR2ed9@syntax-kind? oR2ed9@syntax-kind?) (set! oR2edb@syntax-vector->list (lambda (oR32e3@x) (if (oR2eb7@stx? oR32e3@x) (let ((oR32e5@ls (oR2edb@syntax-vector->list (oR2eb9@stx-expr oR32e3@x))) (oR32e6@m* (oR2ebd@stx-mark* oR32e3@x)) (oR32e7@s* (oR2ec1@stx-subst* oR32e3@x)) (oR32e8@ae* (oR2ec5@stx-ae* oR32e3@x))) (map (lambda (oR32ed@x) (oR2ed3@mkstx oR32ed@x oR32e6@m* oR32e7@s* oR32e8@ae*)) oR32e5@ls)) (if (oR2a18@oR28ea@annotation? oR32e3@x) (oR2edb@syntax-vector->list (oR2a1a@oR28ee@annotation-expression oR32e3@x)) (if (vector? oR32e3@x) (vector->list oR32e3@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" oR32e3@x)))))) (set! oR4b6a@oR2edb@syntax-vector->list oR2edb@syntax-vector->list) (set! oR2edd@syntax-pair? (lambda (oR32ef@x) (oR2ed9@syntax-kind? oR32ef@x pair?))) (set! oR4b6b@oR2edd@syntax-pair? oR2edd@syntax-pair?) (set! oR2edf@syntax-vector? (lambda (oR32f1@x) (oR2ed9@syntax-kind? oR32f1@x vector?))) (set! oR4b6c@oR2edf@syntax-vector? oR2edf@syntax-vector?) (set! oR2ee1@syntax-null? (lambda (oR32f3@x) (oR2ed9@syntax-kind? oR32f3@x null?))) (set! oR4b6d@oR2ee1@syntax-null? oR2ee1@syntax-null?) (set! oR2ee3@syntax-list? (lambda (oR32f5@x) (or (oR2ee1@syntax-null? oR32f5@x) (and (oR2edd@syntax-pair? oR32f5@x) (oR2ee3@syntax-list? (oR2ee7@syntax-cdr oR32f5@x)))))) (set! oR4b6e@oR2ee3@syntax-list? oR2ee3@syntax-list?) (set! oR2ee5@syntax-car (lambda (oR32f7@x) (if (oR2eb7@stx? oR32f7@x) (oR2ed3@mkstx (oR2ee5@syntax-car (oR2eb9@stx-expr oR32f7@x)) (oR2ebd@stx-mark* oR32f7@x) (oR2ec1@stx-subst* oR32f7@x) (oR2ec5@stx-ae* oR32f7@x)) (if (oR2a18@oR28ea@annotation? oR32f7@x) (oR2ee5@syntax-car (oR2a1a@oR28ee@annotation-expression oR32f7@x)) (if (pair? oR32f7@x) (car oR32f7@x) (assertion-violation 'syntax-car '"BUG: not a pair" oR32f7@x)))))) (set! oR4b6f@oR2ee5@syntax-car oR2ee5@syntax-car) (set! oR2ee7@syntax-cdr (lambda (oR32f9@x) (if (oR2eb7@stx? oR32f9@x) (oR2ed3@mkstx (oR2ee7@syntax-cdr (oR2eb9@stx-expr oR32f9@x)) (oR2ebd@stx-mark* oR32f9@x) (oR2ec1@stx-subst* oR32f9@x) (oR2ec5@stx-ae* oR32f9@x)) (if (oR2a18@oR28ea@annotation? oR32f9@x) (oR2ee7@syntax-cdr (oR2a1a@oR28ee@annotation-expression oR32f9@x)) (if (pair? oR32f9@x) (cdr oR32f9@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" oR32f9@x)))))) (set! oR4b70@oR2ee7@syntax-cdr oR2ee7@syntax-cdr) (set! oR2ee9@syntax->list (lambda (oR32fb@x) (if (oR2edd@syntax-pair? oR32fb@x) (cons (oR2ee5@syntax-car oR32fb@x) (oR2ee9@syntax->list (oR2ee7@syntax-cdr oR32fb@x))) (if (oR2ee1@syntax-null? oR32fb@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" oR32fb@x))))) (set! oR4b71@oR2ee9@syntax->list oR2ee9@syntax->list) (set! oR2eeb@id? (lambda (oR32fd@x) (and (oR2eb7@stx? oR32fd@x) (symbol? (oR2eb9@stx-expr oR32fd@x))))) (set! oR4b72@oR2eeb@id? oR2eeb@id?) (set! oR2eed@id->sym (lambda (oR32ff@x) (oR2eb9@stx-expr oR32ff@x))) (set! oR4b73@oR2eed@id->sym oR2eed@id->sym) (set! oR2eef@bound-id=? (lambda (oR3301@x oR3302@y) (and (eq? (oR2eed@id->sym oR3301@x) (oR2eed@id->sym oR3302@y)) (same-marks? (oR2ebd@stx-mark* oR3301@x) (oR2ebd@stx-mark* oR3302@y))))) (set! oR4b74@oR2eef@bound-id=? oR2eef@bound-id=?) (set! oR2ef1@free-id=? (lambda (oR3305@i oR3306@j) (let ((oR3309@t0 (id->real-label oR3305@i)) (oR330a@t1 (id->real-label oR3306@j))) (if (or oR3309@t0 oR330a@t1) (eq? oR3309@t0 oR330a@t1) (eq? (oR2eed@id->sym oR3305@i) (oR2eed@id->sym oR3306@j)))))) (set! oR4b75@oR2ef1@free-id=? oR2ef1@free-id=?) (set! oR2ef3@valid-bound-ids? (lambda (oR330d@id*) (and (for-all oR2eeb@id? oR330d@id*) (oR2ef5@distinct-bound-ids? oR330d@id*)))) (set! oR4b76@oR2ef3@valid-bound-ids? oR2ef3@valid-bound-ids?) (set! oR2ef5@distinct-bound-ids? (lambda (oR330f@id*) (or (null? oR330f@id*) (and (not (oR2ef7@bound-id-member? (car oR330f@id*) (cdr oR330f@id*))) (oR2ef5@distinct-bound-ids? (cdr oR330f@id*)))))) (set! oR4b77@oR2ef5@distinct-bound-ids? oR2ef5@distinct-bound-ids?) (set! oR2ef7@bound-id-member? (lambda (oR3311@id oR3312@id*) (and (pair? oR3312@id*) (or (oR2eef@bound-id=? oR3311@id (car oR3312@id*)) (oR2ef7@bound-id-member? oR3311@id (cdr oR3312@id*)))))) (set! oR4b78@oR2ef7@bound-id-member? oR2ef7@bound-id-member?) (set! oR2ef9@self-evaluating? (lambda (oR3315@x) (or (number? oR3315@x) (string? oR3315@x) (char? oR3315@x) (boolean? oR3315@x) (regexp? oR3315@x) (bytevector? oR3315@x)))) (set! oR4b79@oR2ef9@self-evaluating? oR2ef9@self-evaluating?) (set! oR2efb@strip-annotations (lambda (oR3317@x) (if (pair? oR3317@x) (cons (oR2efb@strip-annotations (car oR3317@x)) (oR2efb@strip-annotations (cdr oR3317@x))) (if (vector? oR3317@x) (vector-map oR2efb@strip-annotations oR3317@x) (if (oR2a18@oR28ea@annotation? oR3317@x) (oR2a17@oR28e8@annotation-stripped oR3317@x) oR3317@x))))) (set! oR4b7a@oR2efb@strip-annotations oR2efb@strip-annotations) (set! oR2efd@strip (lambda (oR3319@x oR331a@m*) (if (oR2e71@top-marked? oR331a@m*) (if (or (oR2a18@oR28ea@annotation? oR3319@x) (and (pair? oR3319@x) (oR2a18@oR28ea@annotation? (car oR3319@x))) (and (vector? oR3319@x) (> (vector-length oR3319@x) '0) (oR2a18@oR28ea@annotation? (vector-ref oR3319@x '0)))) (oR2efb@strip-annotations oR3319@x) oR3319@x) (let oR331f@f ((oR331d@x oR3319@x)) (if (oR2eb7@stx? oR331d@x) (oR2efd@strip (oR2eb9@stx-expr oR331d@x) (oR2ebd@stx-mark* oR331d@x)) (if (oR2a18@oR28ea@annotation? oR331d@x) (oR2a17@oR28e8@annotation-stripped oR331d@x) (if (pair? oR331d@x) (let ((oR3321@a (oR331f@f (car oR331d@x))) (oR3322@d (oR331f@f (cdr oR331d@x)))) (if (and (eq? oR3321@a (car oR331d@x)) (eq? oR3322@d (cdr oR331d@x))) oR331d@x (cons oR3321@a oR3322@d))) (if (vector? oR331d@x) (let ((oR3325@old (vector->list oR331d@x))) (let ((oR3327@new (map oR331f@f oR3325@old))) (if (for-all eq? oR3325@old oR3327@new) oR331d@x (list->vector oR3327@new)))) oR331d@x)))))))) (set! oR4b7b@oR2efd@strip oR2efd@strip) (set! oR2eff@stx->datum (lambda (oR3329@x) (oR2efd@strip oR3329@x '()))) (set! oR4b7c@oR2eff@stx->datum oR2eff@stx->datum) (set! oR2f01@id->label (lambda (oR332b@id) (or (id->real-label oR332b@id) (let ((oR332d@t (oR31e2@top-level-context))) (if oR332d@t ((lambda (oR332f@env) (let ((oR3331@rib (oR3192@interaction-env-rib oR332f@env))) (call-with-values (lambda () (oR2e7b@gen-define-label+loc oR332b@id oR3331@rib)) (lambda (oR3337@oR3334 oR3338@oR3336) (let ((oR333b@loc_ oR3338@oR3336) (oR333c@lab oR3337@oR3334)) (begin (oR2ea1@extend-rib! oR3331@rib oR332b@id oR333c@lab) oR333c@lab)))))) oR332d@t) '#f))))) (set! oR4b7d@oR2f01@id->label oR2f01@id->label) (set! oR2f03@label->binding (lambda (oR333f@x oR3340@r) (let ((oR3343@t (oR2cff@oR2b3c@imported-label->binding oR333f@x))) (if oR3343@t ((lambda (oR3345@b) (if (and (pair? oR3345@b) (eq? (car oR3345@b) '$core-rtd)) (cons '$rtd (map oR30a8@bless (cdr oR3345@b))) (if (and (pair? oR3345@b) (eq? (car oR3345@b) 'global-rtd)) (let ((oR3347@lib (cadr oR3345@b)) (oR3348@loc (cddr oR3345@b))) (cons '$rtd (symbol-value oR3348@loc))) oR3345@b))) oR3343@t) (let ((oR334b@t (assq oR333f@x oR3340@r))) (if oR334b@t (cdr oR334b@t) (let ((oR334d@t (oR31e2@top-level-context))) (if oR334d@t ((lambda (oR334f@env) (let ((oR3351@t (assq oR333f@x (oR319a@interaction-env-locs oR334f@env)))) (if oR3351@t ((lambda (oR3353@p) (cons* 'lexical (cdr oR3353@p) '#f)) oR3351@t) '(displaced-lexical . #f)))) oR334d@t) '(displaced-lexical . #f))))))))) (set! oR4b7e@oR2f03@label->binding oR2f03@label->binding) (set! oR2f05@make-binding cons) (set! oR4b7f@oR2f05@make-binding oR2f05@make-binding) (set! oR2f07@binding-type car) (set! oR4b80@oR2f07@binding-type oR2f07@binding-type) (set! oR2f09@binding-value cdr) (set! oR4b81@oR2f09@binding-value oR2f09@binding-value) (set! oR2f0b@raise-unbound-error (lambda (oR3355@id) (oR31d0@syntax-violation* '#f '"unbound identifier" oR3355@id (oR4f77@oR4dbd@make-undefined-violation)))) (set! oR4b82@oR2f0b@raise-unbound-error oR2f0b@raise-unbound-error) (set! oR2f0d@syntax-type (lambda (oR3357@e oR3358@r) (if (oR2eeb@id? oR3357@e) (let ((oR335b@id oR3357@e)) (let ((oR335d@label (oR2f01@id->label oR335b@id))) (let ((oR335f@b (oR2f03@label->binding oR335d@label oR3358@r))) (let ((oR3361@type (oR2f07@binding-type oR335f@b))) (begin (if (not oR335d@label) (oR2f0b@raise-unbound-error oR335b@id) (void)) (let ((oR3363@t oR3361@type)) (if (memv oR3363@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values oR3361@type (oR2f09@binding-value oR335f@b) oR335b@id) (values 'other '#f '#f)))))))) (if (oR2edd@syntax-pair? oR3357@e) (let ((oR3365@id (oR2ee5@syntax-car oR3357@e))) (if (oR2eeb@id? oR3365@id) (let ((oR3367@label (oR2f01@id->label oR3365@id))) (let ((oR3369@b (oR2f03@label->binding oR3367@label oR3358@r))) (let ((oR336b@type (oR2f07@binding-type oR3369@b))) (begin (if (not oR3367@label) (oR2f0b@raise-unbound-error oR3365@id) (void)) (let ((oR336d@t oR336b@type)) (if (memv oR336d@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values oR336b@type (oR2f09@binding-value oR3369@b) oR3365@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((oR336f@d (oR2eff@stx->datum oR3357@e))) (if (oR2ef9@self-evaluating? oR336f@d) (values 'constant oR336f@d '#f) (values 'other '#f '#f))))))) (set! oR4b83@oR2f0d@syntax-type oR2f0d@syntax-type) (set! oR2f1b@sanitize-binding (lambda (oR3371@x oR3372@src) (if (procedure? oR3371@x) (cons* 'local-macro oR3371@x oR3372@src) (if (and (pair? oR3371@x) (eq? (car oR3371@x) 'macro!) (procedure? (cdr oR3371@x))) (cons* 'local-macro! (cdr oR3371@x) oR3372@src) (if (and (pair? oR3371@x) (eq? (car oR3371@x) '$rtd)) oR3371@x (assertion-violation 'expand '"invalid transformer" oR3371@x)))))) (set! oR4b84@oR2f1b@sanitize-binding oR2f1b@sanitize-binding) (set! oR2f1d@make-variable-transformer (lambda (oR3375@x) (if (procedure? oR3375@x) (cons 'macro! oR3375@x) (assertion-violation 'make-variable-transformer '"not a procedure" oR3375@x)))) (set! oR4b85@oR2f1d@make-variable-transformer oR2f1d@make-variable-transformer) (set! oR2f1f@variable-transformer? (lambda (oR3377@x) (and (pair? oR3377@x) (eq? (car oR3377@x) 'macro!) (procedure? (cdr oR3377@x))))) (set! oR4b86@oR2f1f@variable-transformer? oR2f1f@variable-transformer?) (set! oR2f21@variable-transformer-procedure (lambda (oR3379@x) (if (oR2f1f@variable-transformer? oR3379@x) (cdr oR3379@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" oR3379@x)))) (set! oR4b87@oR2f21@variable-transformer-procedure oR2f21@variable-transformer-procedure) (set! oR2f23@make-eval-transformer (lambda (oR337b@x) (oR2f1b@sanitize-binding (eval-core (oR2a7a@oR2a32@expanded->core oR337b@x)) oR337b@x))) (set! oR4b88@oR2f23@make-eval-transformer oR2f23@make-eval-transformer) (set! oR3074@parse-define (lambda (oR337d@x) (let ((oR337f@t oR337d@x)) (let ((oR3381@ls/false (oR30f2@syntax-dispatch oR337f@t '(_ (any . any) any . each-any)))) (if (and oR3381@ls/false (apply (lambda (oR3383@id oR3384@fmls oR3385@b oR3386@b*) (oR2eeb@id? oR3383@id)) oR3381@ls/false)) (apply (lambda (oR338b@id oR338c@fmls oR338d@b oR338e@b*) (begin (oR3118@verify-formals oR338c@fmls oR337d@x) (values oR338b@id (cons 'defun (cons oR338c@fmls (cons oR338d@b oR338e@b*)))))) oR3381@ls/false) (let ((oR3393@t oR337f@t)) (let ((oR3395@ls/false (oR30f2@syntax-dispatch oR3393@t '(_ any any)))) (if (and oR3395@ls/false (apply (lambda (oR3397@id oR3398@val) (oR2eeb@id? oR3397@id)) oR3395@ls/false)) (apply (lambda (oR339b@id oR339c@val) (values oR339b@id (cons 'expr oR339c@val))) oR3395@ls/false) (let ((oR339f@t oR3393@t)) (let ((oR33a1@ls/false (oR30f2@syntax-dispatch oR339f@t '(_ any)))) (if (and oR33a1@ls/false (apply (lambda (oR33a3@id) (oR2eeb@id? oR33a3@id)) oR33a1@ls/false)) (apply (lambda (oR33a5@id) (values oR33a5@id (cons 'expr (oR30a8@bless '(void))))) oR33a1@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR339f@t)))))))))))) (set! oR4b89@oR3074@parse-define oR3074@parse-define) (set! oR3076@parse-define-syntax (lambda (oR33a7@x) (let ((oR33a9@t oR33a7@x)) (let ((oR33ab@ls/false (oR30f2@syntax-dispatch oR33a9@t '(_ any any)))) (if (and oR33ab@ls/false (apply (lambda (oR33ad@id oR33ae@val) (oR2eeb@id? oR33ad@id)) oR33ab@ls/false)) (apply (lambda (oR33b1@id oR33b2@val) (values oR33b1@id oR33b2@val)) oR33ab@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR33a9@t)))))) (set! oR4b8a@oR3076@parse-define-syntax oR3076@parse-define-syntax) (set! oR3078@scheme-stx-hashtable (make-eq-hashtable)) (set! oR4b8b@oR3078@scheme-stx-hashtable oR3078@scheme-stx-hashtable) (set! oR307a@scheme-stx (lambda (oR33b5@sym) (or (hashtable-ref oR3078@scheme-stx-hashtable oR33b5@sym '#f) (let ((oR33b7@subst (oR2cdb@oR2af4@library-subst (oR2cf9@oR2b30@find-library-by-name '(psyntax system $all))))) (let ((oR33b9@stx (make-simple-struct 'stx '5 (list oR33b5@sym oR2e6f@top-mark* '() '())))) (let ((oR33bb@stx (let ((oR33bd@t (assq oR33b5@sym oR33b7@subst))) (if oR33bd@t ((lambda (oR33bf@x) (let ((oR33c1@name (car oR33bf@x)) (oR33c2@label (cdr oR33bf@x))) (oR2ed7@add-subst (make-simple-struct 'rib '6 (list (list oR33c1@name) (list oR2e6f@top-mark*) (list oR33c2@label) '#f '#f)) oR33b9@stx))) oR33bd@t) oR33b9@stx)))) (begin (hashtable-set! oR3078@scheme-stx-hashtable oR33b5@sym oR33bb@stx) oR33bb@stx))))))) (set! oR4b8c@oR307a@scheme-stx oR307a@scheme-stx) (set! oR307c@lexical-var car) (set! oR4b8d@oR307c@lexical-var oR307c@lexical-var) (set! oR307e@lexical-mutable? cdr) (set! oR4b8e@oR307e@lexical-mutable? oR307e@lexical-mutable?) (set! oR3080@set-lexical-mutable! set-cdr!) (set! oR4b8f@oR3080@set-lexical-mutable! oR3080@set-lexical-mutable!) (set! oR3082@add-lexical (lambda (oR33c5@lab oR33c6@lex oR33c7@r) (cons (cons* oR33c5@lab 'lexical oR33c6@lex '#f) oR33c7@r))) (set! oR4b90@oR3082@add-lexical oR3082@add-lexical) (set! oR3084@add-lexicals (lambda (oR33cb@lab* oR33cc@lex* oR33cd@r) (if (null? oR33cb@lab*) oR33cd@r (oR3084@add-lexicals (cdr oR33cb@lab*) (cdr oR33cc@lex*) (oR3082@add-lexical (car oR33cb@lab*) (car oR33cc@lex*) oR33cd@r))))) (set! oR4b91@oR3084@add-lexicals oR3084@add-lexicals) (set! oR3086@letrec-helper (lambda (oR33d1@e oR33d2@r oR33d3@mr oR33d4@build) (let ((oR33d9@t oR33d1@e)) (let ((oR33db@ls/false (oR30f2@syntax-dispatch oR33d9@t '(_ #(each (any any)) any . each-any)))) (if oR33db@ls/false (apply (lambda (oR33dd@lhs* oR33de@rhs* oR33df@b oR33e0@b*) (if (not (oR2ef3@valid-bound-ids? oR33dd@lhs*)) (oR30ac@invalid-fmls-error oR33d1@e oR33dd@lhs*) (let ((oR33e5@lex* (map oR2e73@gen-lexical oR33dd@lhs*)) (oR33e6@lab* (map oR2e77@gen-label oR33dd@lhs*))) (let ((oR33e9@rib (oR2eab@make-full-rib oR33dd@lhs* oR33e6@lab*)) (oR33ea@r (oR3084@add-lexicals oR33e6@lab* oR33e5@lex* oR33d2@r))) (let ((oR33ed@body (oR312a@chi-internal (oR2ed7@add-subst oR33e9@rib (cons oR33df@b oR33e0@b*)) oR33ea@r oR33d3@mr)) (oR33ee@rhs* (oR3110@chi-expr* (map (lambda (oR33f1@x) (oR2ed7@add-subst oR33e9@rib oR33f1@x)) oR33de@rhs*) oR33ea@r oR33d3@mr))) (oR33d4@build '#f oR33e5@lex* oR33ee@rhs* oR33ed@body)))))) oR33db@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR33d9@t)))))) (set! oR4b92@oR3086@letrec-helper oR3086@letrec-helper) (set! oR3088@let-transformer (lambda (oR33f3@e oR33f4@r oR33f5@mr) (let ((oR33f9@t oR33f3@e)) (let ((oR33fb@ls/false (oR30f2@syntax-dispatch oR33f9@t '(_ #(each (any any)) any . each-any)))) (if oR33fb@ls/false (apply (lambda (oR33fd@lhs* oR33fe@rhs* oR33ff@b oR3400@b*) (if (not (oR2ef3@valid-bound-ids? oR33fd@lhs*)) (oR30ac@invalid-fmls-error oR33f3@e oR33fd@lhs*) (let ((oR3405@lex* (map oR2e73@gen-lexical oR33fd@lhs*)) (oR3406@lab* (map oR2e77@gen-label oR33fd@lhs*)) (oR3407@rhs* (oR3110@chi-expr* oR33fe@rhs* oR33f4@r oR33f5@mr))) (let ((oR340b@rib (oR2eab@make-full-rib oR33fd@lhs* oR3406@lab*)) (oR340c@r (oR3084@add-lexicals oR3406@lab* oR3405@lex* oR33f4@r))) (let ((oR340f@body (oR312a@chi-internal (oR2ed7@add-subst oR340b@rib (cons oR33ff@b oR3400@b*)) oR340c@r oR33f5@mr))) (oR2e53@oR2db0@build-let '#f oR3405@lex* oR3407@rhs* oR340f@body)))))) oR33fb@ls/false) (let ((oR3411@t oR33f9@t)) (let ((oR3413@ls/false (oR30f2@syntax-dispatch oR3411@t '(_ any #(each (any any)) any . each-any)))) (if oR3413@ls/false (apply (lambda (oR3415@loop oR3416@lhs* oR3417@rhs* oR3418@b oR3419@b*) (if (not (oR2ef3@valid-bound-ids? oR3416@lhs*)) (oR30ac@invalid-fmls-error oR33f3@e oR3416@lhs*) (let ((oR341f@lex* (map oR2e73@gen-lexical oR3416@lhs*)) (oR3420@lab* (map oR2e77@gen-label oR3416@lhs*)) (oR3421@rhs* (oR3110@chi-expr* oR3417@rhs* oR33f4@r oR33f5@mr)) (oR3422@loop-lex (oR2e73@gen-lexical oR3415@loop)) (oR3423@loop-lab (oR2e77@gen-label oR3415@loop))) (let ((oR3429@loop-rib (oR2eab@make-full-rib (list oR3415@loop) (list oR3423@loop-lab))) (oR342a@rib (oR2eab@make-full-rib oR3416@lhs* oR3420@lab*)) (oR342b@r (oR3084@add-lexicals (cons oR3423@loop-lab oR3420@lab*) (cons oR3422@loop-lex oR341f@lex*) oR33f4@r))) (let ((oR342f@body (oR312a@chi-internal (oR2ed7@add-subst oR3429@loop-rib (oR2ed7@add-subst oR342a@rib (cons oR3418@b oR3419@b*))) oR342b@r oR33f5@mr))) (oR2e54@oR2db2@build-named-let '#f oR3422@loop-lex oR341f@lex* oR3421@rhs* oR342f@body)))))) oR3413@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3411@t))))))))) (set! oR4b93@oR3088@let-transformer oR3088@let-transformer) (set! oR308a@letrec-transformer (lambda (oR3431@e oR3432@r oR3433@mr) (oR3086@letrec-helper oR3431@e oR3432@r oR3433@mr oR2e52@oR2dae@build-letrec))) (set! oR4b94@oR308a@letrec-transformer oR308a@letrec-transformer) (set! oR308c@letrec*-transformer (lambda (oR3437@e oR3438@r oR3439@mr) (oR3086@letrec-helper oR3437@e oR3438@r oR3439@mr oR2e55@oR2db4@build-letrec*))) (set! oR4b95@oR308c@letrec*-transformer oR308c@letrec*-transformer) (set! oR308e@fluid-let-syntax-transformer (lambda (oR343d@e oR343e@r oR343f@mr) (let ((oR3444@lookup '#f)) (begin (set! oR3444@lookup (lambda (oR3457@x) (or (oR2f01@id->label oR3457@x) (oR31d2@syntax-violation '#f '"unbound identifier" oR343d@e oR3457@x)))) (let ((oR3445@t oR343d@e)) (let ((oR3447@ls/false (oR30f2@syntax-dispatch oR3445@t '(_ #(each (any any)) any . each-any)))) (if oR3447@ls/false (apply (lambda (oR3449@lhs* oR344a@rhs* oR344b@b oR344c@b*) (if (not (oR2ef3@valid-bound-ids? oR3449@lhs*)) (oR30ac@invalid-fmls-error oR343d@e oR3449@lhs*) (let ((oR3451@lab* (map oR3444@lookup oR3449@lhs*)) (oR3452@rhs* (map (lambda (oR3455@x) (oR2f23@make-eval-transformer (oR314c@expand-transformer oR3455@x oR343f@mr))) oR344a@rhs*))) (oR312a@chi-internal (cons oR344b@b oR344c@b*) (append (map cons oR3451@lab* oR3452@rhs*) oR343e@r) (append (map cons oR3451@lab* oR3452@rhs*) oR343f@mr))))) oR3447@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3445@t)))))))) (set! oR4b96@oR308e@fluid-let-syntax-transformer oR308e@fluid-let-syntax-transformer) (set! oR3090@type-descriptor-transformer (lambda (oR3459@e oR345a@r oR345b@mr) (let ((oR345f@t oR3459@e)) (let ((oR3461@ls/false (oR30f2@syntax-dispatch oR345f@t '(_ any)))) (if (and oR3461@ls/false (apply (lambda (oR3463@id) (oR2eeb@id? oR3463@id)) oR3461@ls/false)) (apply (lambda (oR3465@id) (let ((oR3467@lab (oR2f01@id->label oR3465@id))) (let ((oR3469@b (oR2f03@label->binding oR3467@lab oR345a@r))) (let ((oR346b@type (oR2f07@binding-type oR3469@b))) (begin (if (not oR3467@lab) (oR2f0b@raise-unbound-error oR3465@id) (void)) (if (not (and (eq? oR346b@type '$rtd) (not (list? (oR2f09@binding-value oR3469@b))))) (oR31d2@syntax-violation '#f '"not a record type" oR3459@e) (void)) (list 'quote (oR2f09@binding-value oR3469@b))))))) oR3461@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR345f@t)))))) (set! oR4b97@oR3090@type-descriptor-transformer oR3090@type-descriptor-transformer) (set! oR3092@record-type-descriptor-transformer (lambda (oR346d@e oR346e@r oR346f@mr) (let ((oR3473@t oR346d@e)) (let ((oR3475@ls/false (oR30f2@syntax-dispatch oR3473@t '(_ any)))) (if (and oR3475@ls/false (apply (lambda (oR3477@id) (oR2eeb@id? oR3477@id)) oR3475@ls/false)) (apply (lambda (oR3479@id) (let ((oR347b@lab (oR2f01@id->label oR3479@id))) (let ((oR347d@b (oR2f03@label->binding oR347b@lab oR346e@r))) (let ((oR347f@type (oR2f07@binding-type oR347d@b))) (begin (if (not oR347b@lab) (oR2f0b@raise-unbound-error oR3479@id) (void)) (if (not (and (eq? oR347f@type '$rtd) (list? (oR2f09@binding-value oR347d@b)))) (oR31d2@syntax-violation '#f '"not a record type" oR346d@e) (void)) (oR3114@chi-expr (car (oR2f09@binding-value oR347d@b)) oR346e@r oR346f@mr)))))) oR3475@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3473@t)))))) (set! oR4b98@oR3092@record-type-descriptor-transformer oR3092@record-type-descriptor-transformer) (set! oR3094@record-constructor-descriptor-transformer (lambda (oR3481@e oR3482@r oR3483@mr) (let ((oR3487@t oR3481@e)) (let ((oR3489@ls/false (oR30f2@syntax-dispatch oR3487@t '(_ any)))) (if (and oR3489@ls/false (apply (lambda (oR348b@id) (oR2eeb@id? oR348b@id)) oR3489@ls/false)) (apply (lambda (oR348d@id) (let ((oR348f@lab (oR2f01@id->label oR348d@id))) (let ((oR3491@b (oR2f03@label->binding oR348f@lab oR3482@r))) (let ((oR3493@type (oR2f07@binding-type oR3491@b))) (begin (if (not oR348f@lab) (oR2f0b@raise-unbound-error oR348d@id) (void)) (if (not (and (eq? oR3493@type '$rtd) (list? (oR2f09@binding-value oR3491@b)))) (oR31d2@syntax-violation '#f '"invalid type" oR3481@e) (void)) (oR3114@chi-expr (cadr (oR2f09@binding-value oR3491@b)) oR3482@r oR3483@mr)))))) oR3489@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3487@t)))))) (set! oR4b99@oR3094@record-constructor-descriptor-transformer oR3094@record-constructor-descriptor-transformer) (set! oR3096@when-macro (lambda (oR3495@e) (let ((oR3497@t oR3495@e)) (let ((oR3499@ls/false (oR30f2@syntax-dispatch oR3497@t '(_ any any . each-any)))) (if oR3499@ls/false (apply (lambda (oR349b@test oR349c@e oR349d@e*) (oR30a8@bless (list 'if oR349b@test (cons 'begin (cons oR349c@e oR349d@e*))))) oR3499@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3497@t)))))) (set! oR4b9a@oR3096@when-macro oR3096@when-macro) (set! oR3098@unless-macro (lambda (oR34a1@e) (let ((oR34a3@t oR34a1@e)) (let ((oR34a5@ls/false (oR30f2@syntax-dispatch oR34a3@t '(_ any any . each-any)))) (if oR34a5@ls/false (apply (lambda (oR34a7@test oR34a8@e oR34a9@e*) (oR30a8@bless (list 'if (list 'not oR34a7@test) (cons 'begin (cons oR34a8@e oR34a9@e*))))) oR34a5@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR34a3@t)))))) (set! oR4b9b@oR3098@unless-macro oR3098@unless-macro) (set! oR309a@if-transformer (lambda (oR34ad@e oR34ae@r oR34af@mr) (let ((oR34b3@t oR34ad@e)) (let ((oR34b5@ls/false (oR30f2@syntax-dispatch oR34b3@t '(_ any any any)))) (if oR34b5@ls/false (apply (lambda (oR34b7@e0 oR34b8@e1 oR34b9@e2) (list 'if (oR3114@chi-expr oR34b7@e0 oR34ae@r oR34af@mr) (oR3114@chi-expr oR34b8@e1 oR34ae@r oR34af@mr) (oR3114@chi-expr oR34b9@e2 oR34ae@r oR34af@mr))) oR34b5@ls/false) (let ((oR34bd@t oR34b3@t)) (let ((oR34bf@ls/false (oR30f2@syntax-dispatch oR34bd@t '(_ any any)))) (if oR34bf@ls/false (apply (lambda (oR34c1@e0 oR34c2@e1) (list 'if (oR3114@chi-expr oR34c1@e0 oR34ae@r oR34af@mr) (oR3114@chi-expr oR34c2@e1 oR34ae@r oR34af@mr) (oR2e51@oR2dac@build-void))) oR34bf@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR34bd@t))))))))) (set! oR4b9c@oR309a@if-transformer oR309a@if-transformer) (set! oR309c@and-transformer (lambda (oR34c5@e oR34c6@r oR34c7@mr) (let ((oR34cb@t oR34c5@e)) (let ((oR34cd@ls/false (oR30f2@syntax-dispatch oR34cb@t '(_ . each-any)))) (if oR34cd@ls/false (apply (lambda (oR34cf@e*) (cons 'and (oR3110@chi-expr* oR34cf@e* oR34c6@r oR34c7@mr))) oR34cd@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR34cb@t)))))) (set! oR4b9d@oR309c@and-transformer oR309c@and-transformer) (set! oR309e@or-transformer (lambda (oR34d1@e oR34d2@r oR34d3@mr) (let ((oR34d7@t oR34d1@e)) (let ((oR34d9@ls/false (oR30f2@syntax-dispatch oR34d7@t '(_ . each-any)))) (if oR34d9@ls/false (apply (lambda (oR34db@e*) (cons 'or (oR3110@chi-expr* oR34db@e* oR34d2@r oR34d3@mr))) oR34d9@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR34d7@t)))))) (set! oR4b9e@oR309e@or-transformer oR309e@or-transformer) (set! oR30a0@case-macro (lambda (oR34dd@e) (let ((oR34e0@build-last '#f) (oR34e2@build-one '#f)) (begin (set! oR34e0@build-last (lambda (oR3507@cls) (let ((oR3509@t oR3507@cls)) (let ((oR350b@ls/false (oR30f2@syntax-dispatch oR3509@t '(#(scheme-id else) any . each-any)))) (if oR350b@ls/false (apply (lambda (oR350d@e oR350e@e*) (cons 'begin (cons oR350d@e oR350e@e*))) oR350b@ls/false) (let ((oR3511@t oR3509@t)) (let ((oR3513@ls/false (oR30f2@syntax-dispatch oR3511@t '_))) (if oR3513@ls/false (apply (lambda () (oR34e2@build-one oR3507@cls '(if #f #f))) oR3513@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3511@t))))))))) (set! oR34e2@build-one (lambda (oR34f9@cls oR34fa@k) (let ((oR34fd@t oR34f9@cls)) (let ((oR34ff@ls/false (oR30f2@syntax-dispatch oR34fd@t '(each-any any . each-any)))) (if oR34ff@ls/false (apply (lambda (oR3501@d* oR3502@e oR3503@e*) (list 'if (list 'memv 't (list 'quote oR3501@d*)) (cons 'begin (cons oR3502@e oR3503@e*)) oR34fa@k)) oR34ff@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR34fd@t)))))) (let ((oR34e3@t oR34dd@e)) (let ((oR34e5@ls/false (oR30f2@syntax-dispatch oR34e3@t '(_ any)))) (if oR34e5@ls/false (apply (lambda (oR34e7@expr) (oR30a8@bless (cons 'let (cons (list (list 't oR34e7@expr)) '((if #f #f)))))) oR34e5@ls/false) (let ((oR34e9@t oR34e3@t)) (let ((oR34eb@ls/false (oR30f2@syntax-dispatch oR34e9@t '(_ any any . each-any)))) (if oR34eb@ls/false (apply (lambda (oR34ed@expr oR34ee@cls oR34ef@cls*) (oR30a8@bless (list 'let (list (list 't oR34ed@expr)) (let oR34f7@f ((oR34f3@cls oR34ee@cls) (oR34f4@cls* oR34ef@cls*)) (if (null? oR34f4@cls*) (oR34e0@build-last oR34f3@cls) (oR34e2@build-one oR34f3@cls (oR34f7@f (car oR34f4@cls*) (cdr oR34f4@cls*)))))))) oR34eb@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR34e9@t))))))))))) (set! oR4b9f@oR30a0@case-macro oR30a0@case-macro) (set! oR30a2@quote-transformer (lambda (oR3515@e oR3516@r oR3517@mr) (let ((oR351b@t oR3515@e)) (let ((oR351d@ls/false (oR30f2@syntax-dispatch oR351b@t '(_ any)))) (if oR351d@ls/false (apply (lambda (oR351f@datum) (list 'quote (oR2eff@stx->datum oR351f@datum))) oR351d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR351b@t)))))) (set! oR4ba0@oR30a2@quote-transformer oR30a2@quote-transformer) (set! oR30a4@case-lambda-transformer (lambda (oR3521@e oR3522@r oR3523@mr) (let ((oR3527@t oR3521@e)) (let ((oR3529@ls/false (oR30f2@syntax-dispatch oR3527@t '(_ . #(each (any any . each-any)))))) (if oR3529@ls/false (apply (lambda (oR352b@fmls* oR352c@b* oR352d@b**) (call-with-values (lambda () (oR311c@chi-lambda-clause* oR3521@e oR352b@fmls* (map cons oR352c@b* oR352d@b**) oR3522@r oR3523@mr)) (lambda (oR3535@oR3532 oR3536@oR3534) (let ((oR3539@body* oR3536@oR3534) (oR353a@fmls* oR3535@oR3532)) (oR2e4f@oR2d7c@build-case-lambda '#f oR353a@fmls* oR3539@body*))))) oR3529@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3527@t)))))) (set! oR4ba1@oR30a4@case-lambda-transformer oR30a4@case-lambda-transformer) (set! oR30a6@lambda-transformer (lambda (oR353d@e oR353e@r oR353f@mr) (let ((oR3543@t oR353d@e)) (let ((oR3545@ls/false (oR30f2@syntax-dispatch oR3543@t '(_ any any . each-any)))) (if oR3545@ls/false (apply (lambda (oR3547@fmls oR3548@b oR3549@b*) (call-with-values (lambda () (oR311a@chi-lambda-clause oR353d@e oR3547@fmls (cons oR3548@b oR3549@b*) oR353e@r oR353f@mr)) (lambda (oR3551@oR354e oR3552@oR3550) (let ((oR3555@body oR3552@oR3550) (oR3556@fmls oR3551@oR354e)) (oR2e4e@oR2d7a@build-lambda '#f oR3556@fmls oR3555@body))))) oR3545@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3543@t)))))) (set! oR4ba2@oR30a6@lambda-transformer oR30a6@lambda-transformer) (set! oR30a8@bless (lambda (oR3559@x) (oR2ed3@mkstx (let oR355d@f ((oR355b@x oR3559@x)) (if (oR2eb7@stx? oR355b@x) oR355b@x (if (pair? oR355b@x) (cons (oR355d@f (car oR355b@x)) (oR355d@f (cdr oR355b@x))) (if (symbol? oR355b@x) (oR307a@scheme-stx oR355b@x) (if (vector? oR355b@x) (vector-map oR355d@f oR355b@x) oR355b@x))))) '() '() '()))) (set! oR4ba3@oR30a8@bless oR30a8@bless) (set! oR30aa@with-syntax-macro (lambda (oR355f@e) (let ((oR3561@t oR355f@e)) (let ((oR3563@ls/false (oR30f2@syntax-dispatch oR3561@t '(_ #(each (any any)) any . each-any)))) (if oR3563@ls/false (apply (lambda (oR3565@pat* oR3566@expr* oR3567@b oR3568@b*) (let ((oR356d@idn* (let oR3571@f ((oR356f@pat* oR3565@pat*)) (if (null? oR356f@pat*) '() (call-with-values (lambda () (oR30f0@convert-pattern (car oR356f@pat*) '())) (lambda (oR3577@oR3574 oR3578@oR3576) (let ((oR357b@idn* oR3578@oR3576) (oR357c@pat oR3577@oR3574)) (append oR357b@idn* (oR3571@f (cdr oR356f@pat*)))))))))) (begin (oR3118@verify-formals (map car oR356d@idn*) oR355f@e) (let ((oR357f@t* (oR31c0@generate-temporaries oR3566@expr*))) (oR30a8@bless (list 'let (map list oR357f@t* oR3566@expr*) (let oR3585@f ((oR3581@pat* oR3565@pat*) (oR3582@t* oR357f@t*)) (if (null? oR3581@pat*) (cons 'begin (cons '#f (cons oR3567@b oR3568@b*))) (list 'syntax-case (car oR3582@t*) '() (list (car oR3581@pat*) (oR3585@f (cdr oR3581@pat*) (cdr oR3582@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car oR3581@pat*)) (car oR3582@t*)))))))))))) oR3563@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3561@t)))))) (set! oR4ba4@oR30aa@with-syntax-macro oR30aa@with-syntax-macro) (set! oR30ac@invalid-fmls-error (lambda (oR3587@stx oR3588@fmls) (let ((oR358b@t oR3588@fmls)) (let ((oR358d@ls/false (oR30f2@syntax-dispatch oR358b@t '#(each+ any () any)))) (if oR358d@ls/false (apply (lambda (oR358f@id* oR3590@last) (let oR3595@f ((oR3593@id* (if (oR2eeb@id? oR3590@last) (cons oR3590@last oR358f@id*) (if (oR2ee1@syntax-null? oR3590@last) oR358f@id* (oR31d2@syntax-violation '#f '"not an identifier" oR3587@stx oR3590@last))))) (if (null? oR3593@id*) (values) (if (not (oR2eeb@id? (car oR3593@id*))) (oR31d2@syntax-violation '#f '"not an identifier" oR3587@stx (car oR3593@id*)) (begin (oR3595@f (cdr oR3593@id*)) (if (oR2ef7@bound-id-member? (car oR3593@id*) (cdr oR3593@id*)) (oR31d2@syntax-violation '#f '"duplicate binding" oR3587@stx (car oR3593@id*)) (void))))))) oR358d@ls/false) (let ((oR3597@t oR358b@t)) (let ((oR3599@ls/false (oR30f2@syntax-dispatch oR3597@t '_))) (if oR3599@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"malformed binding form" oR3587@stx oR3588@fmls)) oR3599@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3597@t))))))))) (set! oR4ba5@oR30ac@invalid-fmls-error oR30ac@invalid-fmls-error) (set! oR30ae@let-macro (lambda (oR359b@stx) (let ((oR359d@t oR359b@stx)) (let ((oR359f@ls/false (oR30f2@syntax-dispatch oR359d@t '(_ #(each (any any)) any . each-any)))) (if oR359f@ls/false (apply (lambda (oR35a1@lhs* oR35a2@rhs* oR35a3@b oR35a4@b*) (if (oR2ef3@valid-bound-ids? oR35a1@lhs*) (oR30a8@bless (cons (cons 'lambda (cons oR35a1@lhs* (cons oR35a3@b oR35a4@b*))) oR35a2@rhs*)) (oR30ac@invalid-fmls-error oR359b@stx oR35a1@lhs*))) oR359f@ls/false) (let ((oR35a9@t oR359d@t)) (let ((oR35ab@ls/false (oR30f2@syntax-dispatch oR35a9@t '(_ any #(each (any any)) any . each-any)))) (if (and oR35ab@ls/false (apply (lambda (oR35ad@f oR35ae@lhs* oR35af@rhs* oR35b0@b oR35b1@b*) (oR2eeb@id? oR35ad@f)) oR35ab@ls/false)) (apply (lambda (oR35b7@f oR35b8@lhs* oR35b9@rhs* oR35ba@b oR35bb@b*) (if (oR2ef3@valid-bound-ids? oR35b8@lhs*) (oR30a8@bless (cons (list 'letrec (list (list oR35b7@f (cons 'lambda (cons oR35b8@lhs* (cons oR35ba@b oR35bb@b*))))) oR35b7@f) oR35b9@rhs*)) (oR30ac@invalid-fmls-error oR359b@stx oR35b8@lhs*))) oR35ab@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR35a9@t))))))))) (set! oR4ba6@oR30ae@let-macro oR30ae@let-macro) (set! oR30b0@let-values-macro (lambda (oR35c1@stx) (let ((oR35c4@rename '#f) (oR35c6@rename* '#f)) (begin (set! oR35c4@rename (lambda (oR3629@x oR362a@old* oR362b@new*) (begin (if (not (oR2eeb@id? oR3629@x)) (oR31d2@syntax-violation '#f '"not an indentifier" oR35c1@stx oR3629@x) (void)) (if (oR2ef7@bound-id-member? oR3629@x oR362a@old*) (oR31d2@syntax-violation '#f '"duplicate binding" oR35c1@stx oR3629@x) (void)) (let ((oR362f@y (gensym (oR31d8@syntax->datum oR3629@x)))) (values oR362f@y (cons oR3629@x oR362a@old*) (cons oR362f@y oR362b@new*)))))) (set! oR35c6@rename* (lambda (oR3617@x* oR3618@old* oR3619@new*) (if (null? oR3617@x*) (values '() oR3618@old* oR3619@new*) (call-with-values (lambda () (oR35c4@rename (car oR3617@x*) oR3618@old* oR3619@new*)) (lambda (oR361d@x oR361e@old* oR361f@new*) (call-with-values (lambda () (oR35c6@rename* (cdr oR3617@x*) oR361e@old* oR361f@new*)) (lambda (oR3623@x* oR3624@old* oR3625@new*) (values (cons oR361d@x oR3623@x*) oR3624@old* oR3625@new*)))))))) (let ((oR35c7@t oR35c1@stx)) (let ((oR35c9@ls/false (oR30f2@syntax-dispatch oR35c7@t '(_ () any . each-any)))) (if oR35c9@ls/false (apply (lambda (oR35cb@b oR35cc@b*) (cons* (oR30a8@bless 'let) '() oR35cb@b oR35cc@b*)) oR35c9@ls/false) (let ((oR35cf@t oR35c7@t)) (let ((oR35d1@ls/false (oR30f2@syntax-dispatch oR35cf@t '(_ #(each (any any)) any . each-any)))) (if oR35d1@ls/false (apply (lambda (oR35d3@lhs* oR35d4@rhs* oR35d5@b oR35d6@b*) (oR30a8@bless (let oR35e3@f ((oR35db@lhs* oR35d3@lhs*) (oR35dc@rhs* oR35d4@rhs*) (oR35dd@old* '()) (oR35de@new* '())) (if (null? oR35db@lhs*) (cons 'let (cons (map list oR35dd@old* oR35de@new*) (cons oR35d5@b oR35d6@b*))) (let ((oR35e5@t (car oR35db@lhs*))) (let ((oR35e7@ls/false (oR30f2@syntax-dispatch oR35e5@t 'each-any))) (if oR35e7@ls/false (apply (lambda (oR35e9@x*) (call-with-values (lambda () (oR35c6@rename* oR35e9@x* oR35dd@old* oR35de@new*)) (lambda (oR35f1@oR35ec oR35f2@oR35ee oR35f3@oR35f0) (let ((oR35f7@new* oR35f3@oR35f0) (oR35f8@old* oR35f2@oR35ee) (oR35f9@y* oR35f1@oR35ec)) (list 'call-with-values (list 'lambda '() (car oR35dc@rhs*)) (list 'lambda oR35f9@y* (oR35e3@f (cdr oR35db@lhs*) (cdr oR35dc@rhs*) oR35f8@old* oR35f7@new*))))))) oR35e7@ls/false) (let ((oR35fd@t oR35e5@t)) (let ((oR35ff@ls/false (oR30f2@syntax-dispatch oR35fd@t '#(each+ any () any)))) (if oR35ff@ls/false (apply (lambda (oR3601@x* oR3602@x) (call-with-values (lambda () (oR35c4@rename oR3602@x oR35dd@old* oR35de@new*)) (lambda (oR3605@y oR3606@old* oR3607@new*) (call-with-values (lambda () (oR35c6@rename* oR3601@x* oR3606@old* oR3607@new*)) (lambda (oR360b@y* oR360c@old* oR360d@new*) (list 'call-with-values (list 'lambda '() (car oR35dc@rhs*)) (list 'lambda (append oR360b@y* oR3605@y) (oR35e3@f (cdr oR35db@lhs*) (cdr oR35dc@rhs*) oR360c@old* oR360d@new*)))))))) oR35ff@ls/false) (let ((oR3611@t oR35fd@t)) (let ((oR3613@ls/false (oR30f2@syntax-dispatch oR3611@t 'any))) (if oR3613@ls/false (apply (lambda (oR3615@others) (oR31d2@syntax-violation '#f '"malformed bindings" oR35c1@stx oR3615@others)) oR3613@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3611@t)))))))))))))) oR35d1@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR35cf@t))))))))))) (set! oR4ba7@oR30b0@let-values-macro oR30b0@let-values-macro) (set! oR30b2@let*-values-macro (lambda (oR3631@stx) (let ((oR3634@check '#f)) (begin (set! oR3634@check (lambda (oR3663@x*) (if (not (null? oR3663@x*)) (let ((oR3665@x (car oR3663@x*))) (begin (if (not (oR2eeb@id? oR3665@x)) (oR31d2@syntax-violation '#f '"not an identifier" oR3631@stx oR3665@x) (void)) (oR3634@check (cdr oR3663@x*)) (if (oR2ef7@bound-id-member? oR3665@x (cdr oR3663@x*)) (oR31d2@syntax-violation '#f '"duplicate identifier" oR3631@stx oR3665@x) (void)))) (void)))) (let ((oR3635@t oR3631@stx)) (let ((oR3637@ls/false (oR30f2@syntax-dispatch oR3635@t '(_ () any . each-any)))) (if oR3637@ls/false (apply (lambda (oR3639@b oR363a@b*) (cons* (oR30a8@bless 'let) '() oR3639@b oR363a@b*)) oR3637@ls/false) (let ((oR363d@t oR3635@t)) (let ((oR363f@ls/false (oR30f2@syntax-dispatch oR363d@t '(_ #(each (any any)) any . each-any)))) (if oR363f@ls/false (apply (lambda (oR3641@lhs* oR3642@rhs* oR3643@b oR3644@b*) (oR30a8@bless (let oR364d@f ((oR3649@lhs* oR3641@lhs*) (oR364a@rhs* oR3642@rhs*)) (if (null? oR3649@lhs*) (cons 'begin (cons oR3643@b oR3644@b*)) (let ((oR364f@t (car oR3649@lhs*))) (let ((oR3651@ls/false (oR30f2@syntax-dispatch oR364f@t 'each-any))) (if oR3651@ls/false (apply (lambda (oR3653@x*) (begin (oR3634@check oR3653@x*) (list 'call-with-values (list 'lambda '() (car oR364a@rhs*)) (list 'lambda oR3653@x* (oR364d@f (cdr oR3649@lhs*) (cdr oR364a@rhs*)))))) oR3651@ls/false) (let ((oR3655@t oR364f@t)) (let ((oR3657@ls/false (oR30f2@syntax-dispatch oR3655@t '#(each+ any () any)))) (if oR3657@ls/false (apply (lambda (oR3659@x* oR365a@x) (begin (oR3634@check (cons oR365a@x oR3659@x*)) (list 'call-with-values (list 'lambda '() (car oR364a@rhs*)) (list 'lambda (append oR3659@x* oR365a@x) (oR364d@f (cdr oR3649@lhs*) (cdr oR364a@rhs*)))))) oR3657@ls/false) (let ((oR365d@t oR3655@t)) (let ((oR365f@ls/false (oR30f2@syntax-dispatch oR365d@t 'any))) (if oR365f@ls/false (apply (lambda (oR3661@others) (oR31d2@syntax-violation '#f '"malformed bindings" oR3631@stx oR3661@others)) oR365f@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR365d@t)))))))))))))) oR363f@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR363d@t))))))))))) (set! oR4ba8@oR30b2@let*-values-macro oR30b2@let*-values-macro) (set! oR30b4@trace-lambda-macro (lambda (oR3667@stx) (let ((oR3669@t oR3667@stx)) (let ((oR366b@ls/false (oR30f2@syntax-dispatch oR3669@t '(_ any each-any any . each-any)))) (if oR366b@ls/false (apply (lambda (oR366d@who oR366e@fmls oR366f@b oR3670@b*) (if (oR2ef3@valid-bound-ids? oR366e@fmls) (oR30a8@bless (list 'make-traced-procedure (list 'quote oR366d@who) (cons 'lambda (cons oR366e@fmls (cons oR366f@b oR3670@b*))))) (oR30ac@invalid-fmls-error oR3667@stx oR366e@fmls))) oR366b@ls/false) (let ((oR3675@t oR3669@t)) (let ((oR3677@ls/false (oR30f2@syntax-dispatch oR3675@t '(_ any #(each+ any () any) any . each-any)))) (if oR3677@ls/false (apply (lambda (oR3679@who oR367a@fmls oR367b@last oR367c@b oR367d@b*) (if (oR2ef3@valid-bound-ids? (cons oR367b@last oR367a@fmls)) (oR30a8@bless (list 'make-traced-procedure (list 'quote oR3679@who) (cons 'lambda (cons (append oR367a@fmls oR367b@last) (cons oR367c@b oR367d@b*))))) (oR30ac@invalid-fmls-error oR3667@stx (append oR367a@fmls oR367b@last)))) oR3677@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3675@t))))))))) (set! oR4ba9@oR30b4@trace-lambda-macro oR30b4@trace-lambda-macro) (set! oR30b6@trace-define-macro (lambda (oR3683@stx) (let ((oR3685@t oR3683@stx)) (let ((oR3687@ls/false (oR30f2@syntax-dispatch oR3685@t '(_ (any . each-any) any . each-any)))) (if oR3687@ls/false (apply (lambda (oR3689@who oR368a@fmls oR368b@b oR368c@b*) (if (oR2ef3@valid-bound-ids? oR368a@fmls) (oR30a8@bless (list 'define oR3689@who (list 'make-traced-procedure (list 'quote oR3689@who) (cons 'lambda (cons oR368a@fmls (cons oR368b@b oR368c@b*)))))) (oR30ac@invalid-fmls-error oR3683@stx oR368a@fmls))) oR3687@ls/false) (let ((oR3691@t oR3685@t)) (let ((oR3693@ls/false (oR30f2@syntax-dispatch oR3691@t '(_ (any . #(each+ any () any)) any . each-any)))) (if oR3693@ls/false (apply (lambda (oR3695@who oR3696@fmls oR3697@last oR3698@b oR3699@b*) (if (oR2ef3@valid-bound-ids? (cons oR3697@last oR3696@fmls)) (oR30a8@bless (list 'define oR3695@who (list 'make-traced-procedure (list 'quote oR3695@who) (cons 'lambda (cons (append oR3696@fmls oR3697@last) (cons oR3698@b oR3699@b*)))))) (oR30ac@invalid-fmls-error oR3683@stx (append oR3696@fmls oR3697@last)))) oR3693@ls/false) (let ((oR369f@t oR3691@t)) (let ((oR36a1@ls/false (oR30f2@syntax-dispatch oR369f@t '(_ any any)))) (if oR36a1@ls/false (apply (lambda (oR36a3@who oR36a4@expr) (if (oR2eeb@id? oR36a3@who) (oR30a8@bless (list 'define oR36a3@who (list 'let (list (list 'v oR36a4@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote oR36a3@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (oR31d2@syntax-violation '#f '"invalid name" oR3683@stx))) oR36a1@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR369f@t)))))))))))) (set! oR4baa@oR30b6@trace-define-macro oR30b6@trace-define-macro) (set! oR30b8@trace-define-syntax-macro (lambda (oR36a7@stx) (let ((oR36a9@t oR36a7@stx)) (let ((oR36ab@ls/false (oR30f2@syntax-dispatch oR36a9@t '(_ any any)))) (if oR36ab@ls/false (apply (lambda (oR36ad@who oR36ae@expr) (if (oR2eeb@id? oR36ad@who) (oR30a8@bless (list 'define-syntax oR36ad@who (list 'make-traced-macro (list 'quote oR36ad@who) oR36ae@expr))) (oR31d2@syntax-violation '#f '"invalid name" oR36a7@stx))) oR36ab@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR36a9@t)))))) (set! oR4bab@oR30b8@trace-define-syntax-macro oR30b8@trace-define-syntax-macro) (set! oR30ba@trace-let/rec-syntax (lambda (oR36b1@who) (lambda (oR36b3@stx) (let ((oR36b5@t oR36b3@stx)) (let ((oR36b7@ls/false (oR30f2@syntax-dispatch oR36b5@t '(_ #(each (any any)) any . each-any)))) (if oR36b7@ls/false (apply (lambda (oR36b9@lhs* oR36ba@rhs* oR36bb@b oR36bc@b*) (if (oR2ef3@valid-bound-ids? oR36b9@lhs*) (let ((oR36c1@rhs* (map (lambda (oR36c3@lhs oR36c4@rhs) (list 'make-traced-macro (list 'quote oR36c3@lhs) oR36c4@rhs)) oR36b9@lhs* oR36ba@rhs*))) (oR30a8@bless (cons oR36b1@who (cons (map list oR36b9@lhs* oR36c1@rhs*) (cons oR36bb@b oR36bc@b*))))) (oR30ac@invalid-fmls-error oR36b3@stx oR36b9@lhs*))) oR36b7@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR36b5@t))))))) (set! oR4bac@oR30ba@trace-let/rec-syntax oR30ba@trace-let/rec-syntax) (set! oR30bc@trace-let-syntax-macro (oR30ba@trace-let/rec-syntax 'let-syntax)) (set! oR4bad@oR30bc@trace-let-syntax-macro oR30bc@trace-let-syntax-macro) (set! oR30be@trace-letrec-syntax-macro (oR30ba@trace-let/rec-syntax 'letrec-syntax)) (set! oR4bae@oR30be@trace-letrec-syntax-macro oR30be@trace-letrec-syntax-macro) (set! oR30c0@guard-macro (lambda (oR36c7@x) (let ((oR36ca@gen-clauses '#f)) (begin (set! oR36ca@gen-clauses (lambda (oR36e1@con oR36e2@outerk oR36e3@clause*) (let ((oR36e8@f '#f) (oR36ea@f* '#f)) (begin (set! oR36e8@f (lambda (oR3721@x oR3722@k) (let ((oR3725@t oR3721@x)) (let ((oR3727@ls/false (oR30f2@syntax-dispatch oR3725@t '(any #(scheme-id =>) any)))) (if oR3727@ls/false (apply (lambda (oR3729@e oR372a@p) (let ((oR372d@t (gensym))) (list 'let (list (list oR372d@t oR3729@e)) (list 'if oR372d@t (list oR372a@p oR372d@t) oR3722@k)))) oR3727@ls/false) (let ((oR372f@t oR3725@t)) (let ((oR3731@ls/false (oR30f2@syntax-dispatch oR372f@t '(any)))) (if oR3731@ls/false (apply (lambda (oR3733@e) (let ((oR3735@t (gensym))) (list 'let (list (list oR3735@t oR3733@e)) (list 'if oR3735@t oR3735@t oR3722@k)))) oR3731@ls/false) (let ((oR3737@t oR372f@t)) (let ((oR3739@ls/false (oR30f2@syntax-dispatch oR3737@t '(any any . each-any)))) (if oR3739@ls/false (apply (lambda (oR373b@e oR373c@v oR373d@v*) (list 'if oR373b@e (cons 'begin (cons oR373c@v oR373d@v*)) oR3722@k)) oR3739@ls/false) (let ((oR3741@t oR3737@t)) (let ((oR3743@ls/false (oR30f2@syntax-dispatch oR3741@t '_))) (if oR3743@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid guard clause" oR3721@x)) oR3743@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3741@t))))))))))))))) (set! oR36ea@f* (lambda (oR36f7@x*) (let ((oR36f9@t oR36f7@x*)) (let ((oR36fb@ls/false (oR30f2@syntax-dispatch oR36f9@t '()))) (if oR36fb@ls/false (apply (lambda () (let ((oR36fd@g (gensym))) (values (list oR36fd@g (list 'lambda '() (list 'raise-continuable oR36e1@con))) oR36fd@g))) oR36fb@ls/false) (let ((oR36ff@t oR36f9@t)) (let ((oR3701@ls/false (oR30f2@syntax-dispatch oR36ff@t '((#(scheme-id else) any . each-any))))) (if oR3701@ls/false (apply (lambda (oR3703@e oR3704@e*) (values (cons 'begin (cons oR3703@e oR3704@e*)) '#f)) oR3701@ls/false) (let ((oR3707@t oR36ff@t)) (let ((oR3709@ls/false (oR30f2@syntax-dispatch oR3707@t '(any . any)))) (if oR3709@ls/false (apply (lambda (oR370b@cls oR370c@cls*) (call-with-values (lambda () (oR36ea@f* oR370c@cls*)) (lambda (oR3713@oR3710 oR3714@oR3712) (let ((oR3717@g oR3714@oR3712) (oR3718@e oR3713@oR3710)) (values (oR36e8@f oR370b@cls oR3718@e) oR3717@g))))) oR3709@ls/false) (let ((oR371b@t oR3707@t)) (let ((oR371d@ls/false (oR30f2@syntax-dispatch oR371b@t 'any))) (if oR371d@ls/false (apply (lambda (oR371f@others) (oR31d2@syntax-violation '#f '"invalid guard clause" oR371f@others)) oR371d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR371b@t))))))))))))))) (call-with-values (lambda () (oR36ea@f* oR36e3@clause*)) (lambda (oR36ef@oR36ec oR36f0@oR36ee) (let ((oR36f3@raisek oR36f0@oR36ee) (oR36f4@code oR36ef@oR36ec)) (if oR36f3@raisek (list (list 'call/cc (list 'lambda (list oR36f3@raisek) (list oR36e2@outerk (list 'lambda '() oR36f4@code))))) (list oR36e2@outerk (list 'lambda '() oR36f4@code)))))))))) (let ((oR36cb@t oR36c7@x)) (let ((oR36cd@ls/false (oR30f2@syntax-dispatch oR36cb@t '(_ (any . each-any) any . each-any)))) (if (and oR36cd@ls/false (apply (lambda (oR36cf@con oR36d0@clause* oR36d1@b oR36d2@b*) (oR2eeb@id? oR36cf@con)) oR36cd@ls/false)) (apply (lambda (oR36d7@con oR36d8@clause* oR36d9@b oR36da@b*) (let ((oR36df@outerk (gensym))) (oR30a8@bless (list (list 'call/cc (list 'lambda (list oR36df@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list oR36d7@con) (oR36ca@gen-clauses oR36d7@con oR36df@outerk oR36d8@clause*)) (cons 'lambda (cons '() (cons oR36d9@b oR36da@b*))))))))))) oR36cd@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR36cb@t)))))))) (set! oR4baf@oR30c0@guard-macro oR30c0@guard-macro) (set! oR30c2@define-enumeration-macro (lambda (oR3745@stx) (let ((oR3748@set? '#f) (oR374a@remove-dups '#f)) (begin (set! oR3748@set? (lambda (oR3761@x) (or (null? oR3761@x) (and (not (memq (car oR3761@x) (cdr oR3761@x))) (oR3748@set? (cdr oR3761@x)))))) (set! oR374a@remove-dups (lambda (oR375f@ls) (if (null? oR375f@ls) '() (cons (car oR375f@ls) (oR374a@remove-dups (remq (car oR375f@ls) (cdr oR375f@ls))))))) (let ((oR374b@t oR3745@stx)) (let ((oR374d@ls/false (oR30f2@syntax-dispatch oR374b@t '(_ any each-any any)))) (if (and oR374d@ls/false (apply (lambda (oR374f@name oR3750@id* oR3751@maker) (and (oR2eeb@id? oR374f@name) (oR2eeb@id? oR3751@maker) (for-all oR2eeb@id? oR3750@id*))) oR374d@ls/false)) (apply (lambda (oR3755@name oR3756@id* oR3757@maker) (let ((oR375b@name* (oR374a@remove-dups (oR31d8@syntax->datum oR3756@id*))) (oR375c@mk (gensym))) (oR30a8@bless (list 'begin (list 'define oR375c@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote oR375b@name*)))) (list 'define-syntax oR3755@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote oR375b@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote oR3755@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax oR3757@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote oR3757@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote oR375b@name*)) (cons 'syntax-violation (cons (list 'quote oR3757@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons oR375c@mk '('(n* ...))))))))))))) oR374d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR374b@t)))))))) (set! oR4bb0@oR30c2@define-enumeration-macro oR30c2@define-enumeration-macro) (set! oR30c4@time-macro (lambda (oR3763@stx) (let ((oR3765@t oR3763@stx)) (let ((oR3767@ls/false (oR30f2@syntax-dispatch oR3765@t '(_ any)))) (if oR3767@ls/false (apply (lambda (oR3769@expr) (oR30a8@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() oR3769@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) oR3767@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3765@t)))))) (set! oR4bb1@oR30c4@time-macro oR30c4@time-macro) (set! oR30c6@delay-macro (lambda (oR376b@stx) (let ((oR376d@t oR376b@stx)) (let ((oR376f@ls/false (oR30f2@syntax-dispatch oR376d@t '(_ any)))) (if oR376f@ls/false (apply (lambda (oR3771@expr) (oR30a8@bless (list 'make-promise (list 'lambda '() oR3771@expr)))) oR376f@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR376d@t)))))) (set! oR4bb2@oR30c6@delay-macro oR30c6@delay-macro) (set! oR30c8@assert-macro (lambda (oR3773@stx) (let ((oR3775@t oR3773@stx)) (let ((oR3777@ls/false (oR30f2@syntax-dispatch oR3775@t '(_ any)))) (if oR3777@ls/false (apply (lambda (oR3779@expr) (let ((oR377b@pos (or (oR31ca@expression-position oR3773@stx) (oR31ca@expression-position oR3779@expr)))) (oR30a8@bless (list 'let (list (list 'x oR3779@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote oR3779@expr) (list 'quote oR377b@pos))))))) oR3777@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3775@t)))))) (set! oR4bb3@oR30c8@assert-macro oR30c8@assert-macro) (set! oR30ca@endianness-macro (lambda (oR377d@stx) (let ((oR377f@t oR377d@stx)) (let ((oR3781@ls/false (oR30f2@syntax-dispatch oR377f@t '(_ any)))) (if oR3781@ls/false (apply (lambda (oR3783@e) (let ((oR3785@t (oR31d8@syntax->datum oR3783@e))) (if (memv oR3785@t '(little)) (oR30a8@bless ''little) (if (memv oR3785@t '(big)) (oR30a8@bless ''big) (oR31d2@syntax-violation '#f '"endianness must be big or little" oR377d@stx))))) oR3781@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR377f@t)))))) (set! oR4bb4@oR30ca@endianness-macro oR30ca@endianness-macro) (set! oR30cc@identifier-syntax-macro (lambda (oR3787@stx) (let ((oR3789@t oR3787@stx)) (let ((oR378b@ls/false (oR30f2@syntax-dispatch oR3789@t '(_ any)))) (if oR378b@ls/false (apply (lambda (oR378d@expr) (oR30a8@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax oR378d@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax oR378d@expr) '((syntax (e* ...)))))))))) oR378b@ls/false) (let ((oR378f@t oR3789@t)) (let ((oR3791@ls/false (oR30f2@syntax-dispatch oR378f@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and oR3791@ls/false (apply (lambda (oR3793@id1 oR3794@expr1 oR3795@id2 oR3796@expr2 oR3797@expr3) (and (oR2eeb@id? oR3793@id1) (oR2eeb@id? oR3795@id2) (oR2eeb@id? oR3796@expr2))) oR3791@ls/false)) (apply (lambda (oR379d@id1 oR379e@expr1 oR379f@id2 oR37a0@expr2 oR37a1@expr3) (oR30a8@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax oR379e@expr1)) (list (list 'set! 'id oR37a0@expr2) (list 'syntax oR37a1@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons oR379e@expr1 '(e* ...))))))))) oR3791@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR378f@t))))))))) (set! oR4bb5@oR30cc@identifier-syntax-macro oR30cc@identifier-syntax-macro) (set! oR30ce@do-macro (lambda (oR37a7@stx) (let ((oR37aa@bind '#f)) (begin (set! oR37aa@bind (lambda (oR37c1@x) (let ((oR37c3@t oR37c1@x)) (let ((oR37c5@ls/false (oR30f2@syntax-dispatch oR37c3@t '(any any)))) (if oR37c5@ls/false (apply (lambda (oR37c7@x oR37c8@init) (list oR37c7@x oR37c8@init oR37c7@x)) oR37c5@ls/false) (let ((oR37cb@t oR37c3@t)) (let ((oR37cd@ls/false (oR30f2@syntax-dispatch oR37cb@t '(any any any)))) (if oR37cd@ls/false (apply (lambda (oR37cf@x oR37d0@init oR37d1@step) (list oR37cf@x oR37d0@init oR37d1@step)) oR37cd@ls/false) (let ((oR37d5@t oR37cb@t)) (let ((oR37d7@ls/false (oR30f2@syntax-dispatch oR37d5@t '_))) (if oR37d7@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid binding" oR37a7@stx)) oR37d7@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR37d5@t)))))))))))) (let ((oR37ab@t oR37a7@stx)) (let ((oR37ad@ls/false (oR30f2@syntax-dispatch oR37ab@t '(_ each-any (any . each-any) . each-any)))) (if oR37ad@ls/false (apply (lambda (oR37af@binding* oR37b0@test oR37b1@expr* oR37b2@command*) (let ((oR37b7@t (map oR37aa@bind oR37af@binding*))) (let ((oR37b9@ls/false (oR30f2@syntax-dispatch oR37b7@t '#(each (any any any))))) (if oR37b9@ls/false (apply (lambda (oR37bb@x* oR37bc@init* oR37bd@step*) (if (oR2ef3@valid-bound-ids? oR37bb@x*) (oR30a8@bless (list 'letrec (list (list 'loop (list 'lambda oR37bb@x* (list 'if oR37b0@test (cons 'begin (cons '(if #f #f) oR37b1@expr*)) (cons 'begin (append oR37b2@command* (list (cons 'loop oR37bd@step*)))))))) (cons 'loop oR37bc@init*))) (oR31d2@syntax-violation '#f '"invalid bindings" oR37a7@stx))) oR37b9@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR37b7@t))))) oR37ad@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR37ab@t)))))))) (set! oR4bb6@oR30ce@do-macro oR30ce@do-macro) (set! oR30d0@let*-macro (lambda (oR37d9@stx) (let ((oR37db@t oR37d9@stx)) (let ((oR37dd@ls/false (oR30f2@syntax-dispatch oR37db@t '(_ #(each (any any)) any . each-any)))) (if (and oR37dd@ls/false (apply (lambda (oR37df@lhs* oR37e0@rhs* oR37e1@b oR37e2@b*) (for-all oR2eeb@id? oR37df@lhs*)) oR37dd@ls/false)) (apply (lambda (oR37e7@lhs* oR37e8@rhs* oR37e9@b oR37ea@b*) (oR30a8@bless (let oR37f1@f ((oR37ef@x* (map list oR37e7@lhs* oR37e8@rhs*))) (if (null? oR37ef@x*) (cons 'let (cons '() (cons oR37e9@b oR37ea@b*))) (list 'let (list (car oR37ef@x*)) (oR37f1@f (cdr oR37ef@x*))))))) oR37dd@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR37db@t)))))) (set! oR4bb7@oR30d0@let*-macro oR30d0@let*-macro) (set! oR30d2@or-macro (lambda (oR37f3@stx) (let ((oR37f5@t oR37f3@stx)) (let ((oR37f7@ls/false (oR30f2@syntax-dispatch oR37f5@t '(_)))) (if oR37f7@ls/false (apply (lambda () '#f) oR37f7@ls/false) (let ((oR37f9@t oR37f5@t)) (let ((oR37fb@ls/false (oR30f2@syntax-dispatch oR37f9@t '(_ any . each-any)))) (if oR37fb@ls/false (apply (lambda (oR37fd@e oR37fe@e*) (oR30a8@bless (let oR3805@f ((oR3801@e oR37fd@e) (oR3802@e* oR37fe@e*)) (if (null? oR3802@e*) (list 'begin '#f oR3801@e) (list 'let (list (list 't oR3801@e)) (list 'if 't 't (oR3805@f (car oR3802@e*) (cdr oR3802@e*)))))))) oR37fb@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR37f9@t))))))))) (set! oR4bb8@oR30d2@or-macro oR30d2@or-macro) (set! oR30d4@and-macro (lambda (oR3807@stx) (let ((oR3809@t oR3807@stx)) (let ((oR380b@ls/false (oR30f2@syntax-dispatch oR3809@t '(_)))) (if oR380b@ls/false (apply (lambda () '#t) oR380b@ls/false) (let ((oR380d@t oR3809@t)) (let ((oR380f@ls/false (oR30f2@syntax-dispatch oR380d@t '(_ any . each-any)))) (if oR380f@ls/false (apply (lambda (oR3811@e oR3812@e*) (oR30a8@bless (let oR3819@f ((oR3815@e oR3811@e) (oR3816@e* oR3812@e*)) (if (null? oR3816@e*) (list 'begin '#f oR3815@e) (cons 'if (cons oR3815@e (cons (oR3819@f (car oR3816@e*) (cdr oR3816@e*)) '(#f)))))))) oR380f@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR380d@t))))))))) (set! oR4bb9@oR30d4@and-macro oR30d4@and-macro) (set! oR30d6@cond-macro (lambda (oR381b@stx) (let ((oR381d@t oR381b@stx)) (let ((oR381f@ls/false (oR30f2@syntax-dispatch oR381d@t '(_ any . each-any)))) (if oR381f@ls/false (apply (lambda (oR3821@cls oR3822@cls*) (oR30a8@bless (let oR3829@f ((oR3825@cls oR3821@cls) (oR3826@cls* oR3822@cls*)) (if (null? oR3826@cls*) (let ((oR382b@t oR3825@cls)) (let ((oR382d@ls/false (oR30f2@syntax-dispatch oR382b@t '(#(scheme-id else) any . each-any)))) (if oR382d@ls/false (apply (lambda (oR382f@e oR3830@e*) (cons 'begin (cons oR382f@e oR3830@e*))) oR382d@ls/false) (let ((oR3833@t oR382b@t)) (let ((oR3835@ls/false (oR30f2@syntax-dispatch oR3833@t '(any #(scheme-id =>) any)))) (if oR3835@ls/false (apply (lambda (oR3837@e oR3838@p) (list 'let (list (list 't oR3837@e)) (list 'if 't (cons oR3838@p '(t))))) oR3835@ls/false) (let ((oR383b@t oR3833@t)) (let ((oR383d@ls/false (oR30f2@syntax-dispatch oR383b@t '(any)))) (if oR383d@ls/false (apply (lambda (oR383f@e) (cons 'or (cons oR383f@e '((if #f #f))))) oR383d@ls/false) (let ((oR3841@t oR383b@t)) (let ((oR3843@ls/false (oR30f2@syntax-dispatch oR3841@t '(any . each-any)))) (if oR3843@ls/false (apply (lambda (oR3845@e oR3846@e*) (list 'if oR3845@e (cons 'begin oR3846@e*))) oR3843@ls/false) (let ((oR3849@t oR3841@t)) (let ((oR384b@ls/false (oR30f2@syntax-dispatch oR3849@t '_))) (if oR384b@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid last clause" oR381b@stx)) oR384b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3849@t)))))))))))))))) (let ((oR384d@t oR3825@cls)) (let ((oR384f@ls/false (oR30f2@syntax-dispatch oR384d@t '(#(scheme-id else) any . each-any)))) (if oR384f@ls/false (apply (lambda (oR3851@e oR3852@e*) (oR31d2@syntax-violation '#f '"incorrect position of keyword else" oR381b@stx)) oR384f@ls/false) (let ((oR3855@t oR384d@t)) (let ((oR3857@ls/false (oR30f2@syntax-dispatch oR3855@t '(any #(scheme-id =>) any)))) (if oR3857@ls/false (apply (lambda (oR3859@e oR385a@p) (list 'let (list (list 't oR3859@e)) (list 'if 't (cons oR385a@p '(t)) (oR3829@f (car oR3826@cls*) (cdr oR3826@cls*))))) oR3857@ls/false) (let ((oR385d@t oR3855@t)) (let ((oR385f@ls/false (oR30f2@syntax-dispatch oR385d@t '(any)))) (if oR385f@ls/false (apply (lambda (oR3861@e) (list 'or oR3861@e (oR3829@f (car oR3826@cls*) (cdr oR3826@cls*)))) oR385f@ls/false) (let ((oR3863@t oR385d@t)) (let ((oR3865@ls/false (oR30f2@syntax-dispatch oR3863@t '(any . each-any)))) (if oR3865@ls/false (apply (lambda (oR3867@e oR3868@e*) (list 'if oR3867@e (cons 'begin oR3868@e*) (oR3829@f (car oR3826@cls*) (cdr oR3826@cls*)))) oR3865@ls/false) (let ((oR386b@t oR3863@t)) (let ((oR386d@ls/false (oR30f2@syntax-dispatch oR386b@t '_))) (if oR386d@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid last clause" oR381b@stx)) oR386d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR386b@t)))))))))))))))))))) oR381f@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR381d@t)))))) (set! oR4bba@oR30d6@cond-macro oR30d6@cond-macro) (set! oR30d8@do-include (lambda (oR386f@stx oR3870@id oR3871@filename) (let ((oR3875@filename (oR2eff@stx->datum oR3871@filename))) (begin (if (not (and (string? oR3875@filename) (oR2eeb@id? oR3870@id))) (oR31d2@syntax-violation '#f '"invalid syntax" oR386f@stx) (void)) (cons (oR30a8@bless 'begin) (with-input-from-file oR3875@filename (lambda () (let oR3879@f ((oR3877@ls '())) (let ((oR387b@x (oR2a16@oR28e6@read-annotated))) (if (eof-object? oR387b@x) (reverse oR3877@ls) (oR3879@f (cons (oR2ecb@datum->stx oR3870@id oR387b@x) oR3877@ls)))))))))))) (set! oR4bbb@oR30d8@do-include oR30d8@do-include) (set! oR30da@include-macro (lambda (oR387d@e) (let ((oR387f@t oR387d@e)) (let ((oR3881@ls/false (oR30f2@syntax-dispatch oR387f@t '(any any)))) (if oR3881@ls/false (apply (lambda (oR3883@id oR3884@filename) (oR30d8@do-include oR387d@e oR3883@id oR3884@filename)) oR3881@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR387f@t)))))) (set! oR4bbc@oR30da@include-macro oR30da@include-macro) (set! oR30dc@include-into-macro (lambda (oR3887@e) (let ((oR3889@t oR3887@e)) (let ((oR388b@ls/false (oR30f2@syntax-dispatch oR3889@t '(_ any any)))) (if oR388b@ls/false (apply (lambda (oR388d@id oR388e@filename) (oR30d8@do-include oR3887@e oR388d@id oR388e@filename)) oR388b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3889@t)))))) (set! oR4bbd@oR30dc@include-into-macro oR30dc@include-into-macro) (set! oR30de@syntax-rules-macro (lambda (oR3891@e) (let ((oR3893@t oR3891@e)) (let ((oR3895@ls/false (oR30f2@syntax-dispatch oR3893@t '(_ each-any . #(each (any any)))))) (if oR3895@ls/false (apply (lambda (oR3897@lits oR3898@pat* oR3899@tmp*) (begin (oR30f8@verify-literals oR3897@lits oR3891@e) (oR30a8@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons oR3897@lits (map (lambda (oR389d@pat oR389e@tmp) (let ((oR38a1@t oR389d@pat)) (let ((oR38a3@ls/false (oR30f2@syntax-dispatch oR38a1@t '(_ . any)))) (if oR38a3@ls/false (apply (lambda (oR38a5@rest) (list (cons 'g oR38a5@rest) (list 'syntax oR389e@tmp))) oR38a3@ls/false) (let ((oR38a7@t oR38a1@t)) (let ((oR38a9@ls/false (oR30f2@syntax-dispatch oR38a7@t '_))) (if oR38a9@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid syntax-rules pattern" oR3891@e oR389d@pat)) oR38a9@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR38a7@t)))))))) oR3898@pat* oR3899@tmp*)))))))) oR3895@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3893@t)))))) (set! oR4bbe@oR30de@syntax-rules-macro oR30de@syntax-rules-macro) (set! oR30e0@quasiquote-macro (let ((oR38ac@datum '#f) (oR38c8@quasicons* '#f) (oR38ca@quasicons '#f) (oR38cc@quasiappend '#f) (oR38ce@quasivector '#f) (oR38d0@vquasi '#f) (oR38d2@quasi '#f)) (begin (set! oR38ac@datum (lambda (oR39ad@x) (list (oR307a@scheme-stx 'quote) (oR2ed3@mkstx oR39ad@x '() '() '())))) (set! oR38c8@quasicons* (lambda (oR39a5@x oR39a6@y) (let oR39ab@f ((oR39a9@x oR39a5@x)) (if (null? oR39a9@x) oR39a6@y (oR38ca@quasicons (car oR39a9@x) (oR39ab@f (cdr oR39a9@x))))))) (set! oR38ca@quasicons (lambda (oR397f@x oR3980@y) (let ((oR3983@t oR3980@y)) (let ((oR3985@ls/false (oR30f2@syntax-dispatch oR3983@t '(#(scheme-id quote) any)))) (if oR3985@ls/false (apply (lambda (oR3987@dy) (let ((oR3989@t oR397f@x)) (let ((oR398b@ls/false (oR30f2@syntax-dispatch oR3989@t '(#(scheme-id quote) any)))) (if oR398b@ls/false (apply (lambda (oR398d@dx) (list (oR307a@scheme-stx 'quote) (cons oR398d@dx oR3987@dy))) oR398b@ls/false) (let ((oR398f@t oR3989@t)) (let ((oR3991@ls/false (oR30f2@syntax-dispatch oR398f@t '_))) (if oR3991@ls/false (apply (lambda () (let ((oR3993@t oR3987@dy)) (let ((oR3995@ls/false (oR30f2@syntax-dispatch oR3993@t '()))) (if oR3995@ls/false (apply (lambda () (list (oR307a@scheme-stx 'list) oR397f@x)) oR3995@ls/false) (let ((oR3997@t oR3993@t)) (let ((oR3999@ls/false (oR30f2@syntax-dispatch oR3997@t '_))) (if oR3999@ls/false (apply (lambda () (list (oR307a@scheme-stx 'cons) oR397f@x oR3980@y)) oR3999@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3997@t)))))))) oR3991@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR398f@t)))))))) oR3985@ls/false) (let ((oR399b@t oR3983@t)) (let ((oR399d@ls/false (oR30f2@syntax-dispatch oR399b@t '(#(scheme-id list) . each-any)))) (if oR399d@ls/false (apply (lambda (oR399f@stuff) (cons* (oR307a@scheme-stx 'list) oR397f@x oR399f@stuff)) oR399d@ls/false) (let ((oR39a1@t oR399b@t)) (let ((oR39a3@ls/false (oR30f2@syntax-dispatch oR39a1@t '_))) (if oR39a3@ls/false (apply (lambda () (list (oR307a@scheme-stx 'cons) oR397f@x oR3980@y)) oR39a3@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR39a1@t)))))))))))) (set! oR38cc@quasiappend (lambda (oR3965@x oR3966@y) (let ((oR3969@ls (let oR396d@f ((oR396b@x oR3965@x)) (if (null? oR396b@x) (let ((oR396f@t oR3966@y)) (let ((oR3971@ls/false (oR30f2@syntax-dispatch oR396f@t '(#(scheme-id quote) ())))) (if oR3971@ls/false (apply (lambda () '()) oR3971@ls/false) (let ((oR3973@t oR396f@t)) (let ((oR3975@ls/false (oR30f2@syntax-dispatch oR3973@t '_))) (if oR3975@ls/false (apply (lambda () (list oR3966@y)) oR3975@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3973@t))))))) (let ((oR3977@t (car oR396b@x))) (let ((oR3979@ls/false (oR30f2@syntax-dispatch oR3977@t '(#(scheme-id quote) ())))) (if oR3979@ls/false (apply (lambda () (oR396d@f (cdr oR396b@x))) oR3979@ls/false) (let ((oR397b@t oR3977@t)) (let ((oR397d@ls/false (oR30f2@syntax-dispatch oR397b@t '_))) (if oR397d@ls/false (apply (lambda () (cons (car oR396b@x) (oR396d@f (cdr oR396b@x)))) oR397d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR397b@t))))))))))) (if (null? oR3969@ls) (list (oR307a@scheme-stx 'quote) '()) (if (null? (cdr oR3969@ls)) (car oR3969@ls) (cons* (oR307a@scheme-stx 'append) oR3969@ls)))))) (set! oR38ce@quasivector (lambda (oR3933@x) (let ((oR3935@pat-x oR3933@x)) (let ((oR3937@t oR3935@pat-x)) (let ((oR3939@ls/false (oR30f2@syntax-dispatch oR3937@t '(#(scheme-id quote) each-any)))) (if oR3939@ls/false (apply (lambda (oR393b@x*) (list (oR307a@scheme-stx 'quote) (list->vector oR393b@x*))) oR3939@ls/false) (let ((oR393d@t oR3937@t)) (let ((oR393f@ls/false (oR30f2@syntax-dispatch oR393d@t '_))) (if oR393f@ls/false (apply (lambda () (let oR3947@f ((oR3941@x oR3933@x) (oR3942@k (lambda (oR3945@ls) (cons* (oR307a@scheme-stx 'vector) oR3945@ls)))) (let ((oR3949@t oR3941@x)) (let ((oR394b@ls/false (oR30f2@syntax-dispatch oR3949@t '(#(scheme-id quote) each-any)))) (if oR394b@ls/false (apply (lambda (oR394d@x*) (oR3942@k (map (lambda (oR394f@x) (list (oR307a@scheme-stx 'quote) oR394f@x)) oR394d@x*))) oR394b@ls/false) (let ((oR3951@t oR3949@t)) (let ((oR3953@ls/false (oR30f2@syntax-dispatch oR3951@t '(#(scheme-id list) . each-any)))) (if oR3953@ls/false (apply (lambda (oR3955@x*) (oR3942@k oR3955@x*)) oR3953@ls/false) (let ((oR3957@t oR3951@t)) (let ((oR3959@ls/false (oR30f2@syntax-dispatch oR3957@t '(#(scheme-id cons) any any)))) (if oR3959@ls/false (apply (lambda (oR395b@x oR395c@y) (oR3947@f oR395c@y (lambda (oR395f@ls) (oR3942@k (cons oR395b@x oR395f@ls))))) oR3959@ls/false) (let ((oR3961@t oR3957@t)) (let ((oR3963@ls/false (oR30f2@syntax-dispatch oR3961@t '_))) (if oR3963@ls/false (apply (lambda () (list (oR307a@scheme-stx 'list->vector) oR3935@pat-x)) oR3963@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3961@t))))))))))))))) oR393f@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR393d@t)))))))))) (set! oR38d0@vquasi (lambda (oR3911@p oR3912@lev) (let ((oR3915@t oR3911@p)) (let ((oR3917@ls/false (oR30f2@syntax-dispatch oR3915@t '(any . any)))) (if oR3917@ls/false (apply (lambda (oR3919@p oR391a@q) (let ((oR391d@t oR3919@p)) (let ((oR391f@ls/false (oR30f2@syntax-dispatch oR391d@t '(#(scheme-id unquote) . each-any)))) (if oR391f@ls/false (apply (lambda (oR3921@p) (if (= oR3912@lev '0) (oR38c8@quasicons* oR3921@p (oR38d0@vquasi oR391a@q oR3912@lev)) (oR38ca@quasicons (oR38ca@quasicons (oR38ac@datum 'unquote) (oR38d2@quasi oR3921@p (- oR3912@lev '1))) (oR38d0@vquasi oR391a@q oR3912@lev)))) oR391f@ls/false) (let ((oR3923@t oR391d@t)) (let ((oR3925@ls/false (oR30f2@syntax-dispatch oR3923@t '(#(scheme-id unquote-splicing) . each-any)))) (if oR3925@ls/false (apply (lambda (oR3927@p) (if (= oR3912@lev '0) (oR38cc@quasiappend oR3927@p (oR38d0@vquasi oR391a@q oR3912@lev)) (oR38ca@quasicons (oR38ca@quasicons (oR38ac@datum 'unquote-splicing) (oR38d2@quasi oR3927@p (- oR3912@lev '1))) (oR38d0@vquasi oR391a@q oR3912@lev)))) oR3925@ls/false) (let ((oR3929@t oR3923@t)) (let ((oR392b@ls/false (oR30f2@syntax-dispatch oR3929@t 'any))) (if oR392b@ls/false (apply (lambda (oR392d@p) (oR38ca@quasicons (oR38d2@quasi oR392d@p oR3912@lev) (oR38d0@vquasi oR391a@q oR3912@lev))) oR392b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3929@t))))))))))) oR3917@ls/false) (let ((oR392f@t oR3915@t)) (let ((oR3931@ls/false (oR30f2@syntax-dispatch oR392f@t '()))) (if oR3931@ls/false (apply (lambda () (list (oR307a@scheme-stx 'quote) '())) oR3931@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR392f@t))))))))) (set! oR38d2@quasi (lambda (oR38db@p oR38dc@lev) (let ((oR38df@t oR38db@p)) (let ((oR38e1@ls/false (oR30f2@syntax-dispatch oR38df@t '(#(scheme-id unquote) any)))) (if oR38e1@ls/false (apply (lambda (oR38e3@p) (if (= oR38dc@lev '0) oR38e3@p (oR38ca@quasicons (oR38ac@datum 'unquote) (oR38d2@quasi (list oR38e3@p) (- oR38dc@lev '1))))) oR38e1@ls/false) (let ((oR38e5@t oR38df@t)) (let ((oR38e7@ls/false (oR30f2@syntax-dispatch oR38e5@t '((#(scheme-id unquote) . each-any) . any)))) (if oR38e7@ls/false (apply (lambda (oR38e9@p oR38ea@q) (if (= oR38dc@lev '0) (oR38c8@quasicons* oR38e9@p (oR38d2@quasi oR38ea@q oR38dc@lev)) (oR38ca@quasicons (oR38ca@quasicons (oR38ac@datum 'unquote) (oR38d2@quasi oR38e9@p (- oR38dc@lev '1))) (oR38d2@quasi oR38ea@q oR38dc@lev)))) oR38e7@ls/false) (let ((oR38ed@t oR38e5@t)) (let ((oR38ef@ls/false (oR30f2@syntax-dispatch oR38ed@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if oR38ef@ls/false (apply (lambda (oR38f1@p oR38f2@q) (if (= oR38dc@lev '0) (oR38cc@quasiappend oR38f1@p (oR38d2@quasi oR38f2@q oR38dc@lev)) (oR38ca@quasicons (oR38ca@quasicons (oR38ac@datum 'unquote-splicing) (oR38d2@quasi oR38f1@p (- oR38dc@lev '1))) (oR38d2@quasi oR38f2@q oR38dc@lev)))) oR38ef@ls/false) (let ((oR38f5@t oR38ed@t)) (let ((oR38f7@ls/false (oR30f2@syntax-dispatch oR38f5@t '(#(scheme-id quasiquote) any)))) (if oR38f7@ls/false (apply (lambda (oR38f9@p) (oR38ca@quasicons (oR38ac@datum 'quasiquote) (oR38d2@quasi (list oR38f9@p) (+ oR38dc@lev '1)))) oR38f7@ls/false) (let ((oR38fb@t oR38f5@t)) (let ((oR38fd@ls/false (oR30f2@syntax-dispatch oR38fb@t '(any . any)))) (if oR38fd@ls/false (apply (lambda (oR38ff@p oR3900@q) (oR38ca@quasicons (oR38d2@quasi oR38ff@p oR38dc@lev) (oR38d2@quasi oR3900@q oR38dc@lev))) oR38fd@ls/false) (let ((oR3903@t oR38fb@t)) (let ((oR3905@ls/false (oR30f2@syntax-dispatch oR3903@t '#(vector each-any)))) (if (and oR3905@ls/false (apply (lambda (oR3907@x) (not (oR2eb7@stx? oR3907@x))) oR3905@ls/false)) (apply (lambda (oR3909@x) (oR38ce@quasivector (oR38d0@vquasi oR3909@x oR38dc@lev))) oR3905@ls/false) (let ((oR390b@t oR3903@t)) (let ((oR390d@ls/false (oR30f2@syntax-dispatch oR390b@t 'any))) (if oR390d@ls/false (apply (lambda (oR390f@p) (list (oR307a@scheme-stx 'quote) oR390f@p)) oR390d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR390b@t)))))))))))))))))))))))) (lambda (oR38d3@x) (let ((oR38d5@t oR38d3@x)) (let ((oR38d7@ls/false (oR30f2@syntax-dispatch oR38d5@t '(_ any)))) (if oR38d7@ls/false (apply (lambda (oR38d9@e) (oR38d2@quasi oR38d9@e '0)) oR38d7@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR38d5@t)))))))) (set! oR4bbf@oR30e0@quasiquote-macro oR30e0@quasiquote-macro) (set! oR30e2@quasisyntax-macro (let ((oR39b0@quasi '#f)) (begin (set! oR39b0@quasi (lambda (oR39cb@p oR39cc@lev) (let ((oR39cf@t oR39cb@p)) (let ((oR39d1@ls/false (oR30f2@syntax-dispatch oR39cf@t '(#(scheme-id unsyntax) any)))) (if oR39d1@ls/false (apply (lambda (oR39d3@p) (if (= oR39cc@lev '0) (let ((oR39d5@g (gensym))) (values (list oR39d5@g) (list oR39d3@p) oR39d5@g)) (call-with-values (lambda () (oR39b0@quasi oR39d3@p (- oR39cc@lev '1))) (lambda (oR39dd@oR39d8 oR39de@oR39da oR39df@oR39dc) (let ((oR39e3@p oR39df@oR39dc) (oR39e4@rhs* oR39de@oR39da) (oR39e5@lhs* oR39dd@oR39d8)) (values oR39e5@lhs* oR39e4@rhs* (list 'unsyntax oR39e3@p))))))) oR39d1@ls/false) (let ((oR39e9@t oR39cf@t)) (let ((oR39eb@ls/false (oR30f2@syntax-dispatch oR39e9@t '#(scheme-id unsyntax)))) (if (and oR39eb@ls/false (apply (lambda () (= oR39cc@lev '0)) oR39eb@ls/false)) (apply (lambda () (oR31d2@syntax-violation '#f '"incorrect use of unsyntax" oR39cb@p)) oR39eb@ls/false) (let ((oR39ed@t oR39e9@t)) (let ((oR39ef@ls/false (oR30f2@syntax-dispatch oR39ed@t '((#(scheme-id unsyntax) . each-any) . any)))) (if oR39ef@ls/false (apply (lambda (oR39f1@p* oR39f2@q) (call-with-values (lambda () (oR39b0@quasi oR39f2@q oR39cc@lev)) (lambda (oR39fb@oR39f6 oR39fc@oR39f8 oR39fd@oR39fa) (let ((oR3a01@q oR39fd@oR39fa) (oR3a02@rhs* oR39fc@oR39f8) (oR3a03@lhs* oR39fb@oR39f6)) (if (= oR39cc@lev '0) (let ((oR3a07@g* (map (lambda (oR3a09@x) (gensym)) oR39f1@p*))) (values (append oR3a07@g* oR3a03@lhs*) (append oR39f1@p* oR3a02@rhs*) (append oR3a07@g* oR3a01@q))) (call-with-values (lambda () (oR39b0@quasi oR39f1@p* (- oR39cc@lev '1))) (lambda (oR3a11@oR3a0c oR3a12@oR3a0e oR3a13@oR3a10) (let ((oR3a17@p* oR3a13@oR3a10) (oR3a18@rhs2* oR3a12@oR3a0e) (oR3a19@lhs2* oR3a11@oR3a0c)) (values (append oR3a19@lhs2* oR3a03@lhs*) (append oR3a18@rhs2* oR3a02@rhs*) (cons (cons 'unsyntax oR3a17@p*) oR3a01@q)))))))))) oR39ef@ls/false) (let ((oR3a1d@t oR39ed@t)) (let ((oR3a1f@ls/false (oR30f2@syntax-dispatch oR3a1d@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if oR3a1f@ls/false (apply (lambda (oR3a21@p* oR3a22@q) (call-with-values (lambda () (oR39b0@quasi oR3a22@q oR39cc@lev)) (lambda (oR3a2b@oR3a26 oR3a2c@oR3a28 oR3a2d@oR3a2a) (let ((oR3a31@q oR3a2d@oR3a2a) (oR3a32@rhs* oR3a2c@oR3a28) (oR3a33@lhs* oR3a2b@oR3a26)) (if (= oR39cc@lev '0) (let ((oR3a37@g* (map (lambda (oR3a39@x) (gensym)) oR3a21@p*))) (values (append (map (lambda (oR3a3b@g) (cons oR3a3b@g '(...))) oR3a37@g*) oR3a33@lhs*) (append oR3a21@p* oR3a32@rhs*) (append (apply append (map (lambda (oR3a3d@g) (cons oR3a3d@g '(...))) oR3a37@g*)) oR3a31@q))) (call-with-values (lambda () (oR39b0@quasi oR3a21@p* (- oR39cc@lev '1))) (lambda (oR3a45@oR3a40 oR3a46@oR3a42 oR3a47@oR3a44) (let ((oR3a4b@p* oR3a47@oR3a44) (oR3a4c@rhs2* oR3a46@oR3a42) (oR3a4d@lhs2* oR3a45@oR3a40)) (values (append oR3a4d@lhs2* oR3a33@lhs*) (append oR3a4c@rhs2* oR3a32@rhs*) (cons (cons 'unsyntax-splicing oR3a4b@p*) oR3a31@q)))))))))) oR3a1f@ls/false) (let ((oR3a51@t oR3a1d@t)) (let ((oR3a53@ls/false (oR30f2@syntax-dispatch oR3a51@t '#(scheme-id unsyntax-splicing)))) (if (and oR3a53@ls/false (apply (lambda () (= oR39cc@lev '0)) oR3a53@ls/false)) (apply (lambda () (oR31d2@syntax-violation '#f '"incorrect use of unsyntax-splicing" oR39cb@p)) oR3a53@ls/false) (let ((oR3a55@t oR3a51@t)) (let ((oR3a57@ls/false (oR30f2@syntax-dispatch oR3a55@t '(#(scheme-id quasisyntax) any)))) (if oR3a57@ls/false (apply (lambda (oR3a59@p) (call-with-values (lambda () (oR39b0@quasi oR3a59@p (+ oR39cc@lev '1))) (lambda (oR3a61@oR3a5c oR3a62@oR3a5e oR3a63@oR3a60) (let ((oR3a67@p oR3a63@oR3a60) (oR3a68@rhs* oR3a62@oR3a5e) (oR3a69@lhs* oR3a61@oR3a5c)) (values oR3a69@lhs* oR3a68@rhs* (list 'quasisyntax oR3a67@p)))))) oR3a57@ls/false) (let ((oR3a6d@t oR3a55@t)) (let ((oR3a6f@ls/false (oR30f2@syntax-dispatch oR3a6d@t '(any . any)))) (if oR3a6f@ls/false (apply (lambda (oR3a71@p oR3a72@q) (call-with-values (lambda () (oR39b0@quasi oR3a71@p oR39cc@lev)) (lambda (oR3a81@oR3a76 oR3a82@oR3a78 oR3a83@oR3a7a) (call-with-values (lambda () (oR39b0@quasi oR3a72@q oR39cc@lev)) (lambda (oR3a87@oR3a7c oR3a88@oR3a7e oR3a89@oR3a80) (let ((oR3a8d@q oR3a89@oR3a80) (oR3a8e@rhs2* oR3a88@oR3a7e) (oR3a8f@lhs2* oR3a87@oR3a7c) (oR3a90@p oR3a83@oR3a7a) (oR3a91@rhs* oR3a82@oR3a78) (oR3a92@lhs* oR3a81@oR3a76)) (values (append oR3a8f@lhs2* oR3a92@lhs*) (append oR3a8e@rhs2* oR3a91@rhs*) (cons oR3a90@p oR3a8d@q)))))))) oR3a6f@ls/false) (let ((oR3a99@t oR3a6d@t)) (let ((oR3a9b@ls/false (oR30f2@syntax-dispatch oR3a99@t '#(vector each-any)))) (if oR3a9b@ls/false (apply (lambda (oR3a9d@x*) (call-with-values (lambda () (oR39b0@quasi oR3a9d@x* oR39cc@lev)) (lambda (oR3aa5@oR3aa0 oR3aa6@oR3aa2 oR3aa7@oR3aa4) (let ((oR3aab@x* oR3aa7@oR3aa4) (oR3aac@rhs* oR3aa6@oR3aa2) (oR3aad@lhs* oR3aa5@oR3aa0)) (values oR3aad@lhs* oR3aac@rhs* (list->vector oR3aab@x*)))))) oR3a9b@ls/false) (let ((oR3ab1@t oR3a99@t)) (let ((oR3ab3@ls/false (oR30f2@syntax-dispatch oR3ab1@t '_))) (if oR3ab3@ls/false (apply (lambda () (values '() '() oR39cb@p)) oR3ab3@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3ab1@t)))))))))))))))))))))))))))))) (lambda (oR39b1@x) (let ((oR39b3@t oR39b1@x)) (let ((oR39b5@ls/false (oR30f2@syntax-dispatch oR39b3@t '(_ any)))) (if oR39b5@ls/false (apply (lambda (oR39b7@e) (call-with-values (lambda () (oR39b0@quasi oR39b7@e '0)) (lambda (oR39bf@oR39ba oR39c0@oR39bc oR39c1@oR39be) (let ((oR39c5@v oR39c1@oR39be) (oR39c6@rhs* oR39c0@oR39bc) (oR39c7@lhs* oR39bf@oR39ba)) (oR30a8@bless (list 'syntax-case (cons 'list oR39c6@rhs*) '() (list oR39c7@lhs* (list 'syntax oR39c5@v)))))))) oR39b5@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR39b3@t)))))))) (set! oR4bc0@oR30e2@quasisyntax-macro oR30e2@quasisyntax-macro) (set! oR30e4@define-struct-macro (lambda (oR3ab5@stx) (oR31d2@syntax-violation '#f '"define-struct not supported" oR3ab5@stx))) (set! oR4bc1@oR30e4@define-struct-macro oR30e4@define-struct-macro) (set! oR30e6@define-record-type-macro (lambda (oR3ab7@x) (let ((oR3aba@id '#f) (oR3abc@get-record-name '#f) (oR3abe@get-record-constructor-name '#f) (oR3ac0@get-record-predicate-name '#f) (oR3ac2@get-clause '#f) (oR3ac4@foo-rtd-code '#f) (oR3ac6@parent-rtd-code '#f) (oR3ac8@parent-rcd-code '#f) (oR3aca@foo-rcd-code '#f) (oR3acc@get-protocol-code '#f) (oR3ace@get-fields '#f) (oR3ad0@get-mutator-indices '#f) (oR3ad2@get-mutators '#f) (oR3ad4@get-accessors '#f) (oR3ad6@enumerate '#f) (oR3ad8@do-define-record '#f) (oR3ada@verify-clauses '#f)) (begin (set! oR3aba@id (lambda (oR3cad@ctxt . oR3caf@str*) (oR31d6@datum->syntax oR3cad@ctxt (string->symbol (apply string-append (map (lambda (oR3cb1@x) (if (symbol? oR3cb1@x) (symbol->string oR3cb1@x) (if (string? oR3cb1@x) oR3cb1@x (assertion-violation 'define-record-type '"BUG")))) oR3caf@str*)))))) (set! oR3abc@get-record-name (lambda (oR3c9b@spec) (let ((oR3c9d@t oR3c9b@spec)) (let ((oR3c9f@ls/false (oR30f2@syntax-dispatch oR3c9d@t '(any any any)))) (if oR3c9f@ls/false (apply (lambda (oR3ca1@foo oR3ca2@make-foo oR3ca3@foo?) oR3ca1@foo) oR3c9f@ls/false) (let ((oR3ca7@t oR3c9d@t)) (let ((oR3ca9@ls/false (oR30f2@syntax-dispatch oR3ca7@t 'any))) (if oR3ca9@ls/false (apply (lambda (oR3cab@foo) oR3cab@foo) oR3ca9@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3ca7@t))))))))) (set! oR3abe@get-record-constructor-name (lambda (oR3c87@spec) (let ((oR3c89@t oR3c87@spec)) (let ((oR3c8b@ls/false (oR30f2@syntax-dispatch oR3c89@t '(any any any)))) (if oR3c8b@ls/false (apply (lambda (oR3c8d@foo oR3c8e@make-foo oR3c8f@foo?) oR3c8e@make-foo) oR3c8b@ls/false) (let ((oR3c93@t oR3c89@t)) (let ((oR3c95@ls/false (oR30f2@syntax-dispatch oR3c93@t 'any))) (if (and oR3c95@ls/false (apply (lambda (oR3c97@foo) (oR2eeb@id? oR3c97@foo)) oR3c95@ls/false)) (apply (lambda (oR3c99@foo) (oR3aba@id oR3c99@foo '"make-" (oR2eff@stx->datum oR3c99@foo))) oR3c95@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3c93@t))))))))) (set! oR3ac0@get-record-predicate-name (lambda (oR3c73@spec) (let ((oR3c75@t oR3c73@spec)) (let ((oR3c77@ls/false (oR30f2@syntax-dispatch oR3c75@t '(any any any)))) (if oR3c77@ls/false (apply (lambda (oR3c79@foo oR3c7a@make-foo oR3c7b@foo?) oR3c7b@foo?) oR3c77@ls/false) (let ((oR3c7f@t oR3c75@t)) (let ((oR3c81@ls/false (oR30f2@syntax-dispatch oR3c7f@t 'any))) (if (and oR3c81@ls/false (apply (lambda (oR3c83@foo) (oR2eeb@id? oR3c83@foo)) oR3c81@ls/false)) (apply (lambda (oR3c85@foo) (oR3aba@id oR3c85@foo (oR2eff@stx->datum oR3c85@foo) '"?")) oR3c81@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3c7f@t))))))))) (set! oR3ac2@get-clause (lambda (oR3c61@id oR3c62@ls) (let ((oR3c65@t oR3c62@ls)) (let ((oR3c67@ls/false (oR30f2@syntax-dispatch oR3c65@t '()))) (if oR3c67@ls/false (apply (lambda () '#f) oR3c67@ls/false) (let ((oR3c69@t oR3c65@t)) (let ((oR3c6b@ls/false (oR30f2@syntax-dispatch oR3c69@t '((any . any) . any)))) (if oR3c6b@ls/false (apply (lambda (oR3c6d@x oR3c6e@rest oR3c6f@ls) (if (oR2ef1@free-id=? (oR30a8@bless oR3c61@id) oR3c6d@x) (cons oR3c6d@x oR3c6e@rest) (oR3ac2@get-clause oR3c61@id oR3c6f@ls))) oR3c6b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3c69@t))))))))) (set! oR3ac4@foo-rtd-code (lambda (oR3c0f@name oR3c10@clause* oR3c11@parent-rtd-code) (let ((oR3c16@convert-field-spec* '#f)) (begin (set! oR3c16@convert-field-spec* (lambda (oR3c47@ls) (list->vector (map (lambda (oR3c49@x) (let ((oR3c4b@t oR3c49@x)) (let ((oR3c4d@ls/false (oR30f2@syntax-dispatch oR3c4b@t '(#(scheme-id mutable) any . any)))) (if oR3c4d@ls/false (apply (lambda (oR3c4f@name oR3c50@rest) (list 'mutable oR3c4f@name)) oR3c4d@ls/false) (let ((oR3c53@t oR3c4b@t)) (let ((oR3c55@ls/false (oR30f2@syntax-dispatch oR3c53@t '(#(scheme-id immutable) any . any)))) (if oR3c55@ls/false (apply (lambda (oR3c57@name oR3c58@rest) (list 'immutable oR3c57@name)) oR3c55@ls/false) (let ((oR3c5b@t oR3c53@t)) (let ((oR3c5d@ls/false (oR30f2@syntax-dispatch oR3c5b@t 'any))) (if oR3c5d@ls/false (apply (lambda (oR3c5f@name) (list 'immutable oR3c5f@name)) oR3c5d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3c5b@t))))))))))) oR3c47@ls)))) (let ((oR3c17@uid-code (let ((oR3c1f@t (oR3ac2@get-clause 'nongenerative oR3c10@clause*))) (let ((oR3c21@ls/false (oR30f2@syntax-dispatch oR3c1f@t '(_)))) (if oR3c21@ls/false (apply (lambda () (list 'quote (gensym))) oR3c21@ls/false) (let ((oR3c23@t oR3c1f@t)) (let ((oR3c25@ls/false (oR30f2@syntax-dispatch oR3c23@t '(_ any)))) (if oR3c25@ls/false (apply (lambda (oR3c27@uid) (list 'quote oR3c27@uid)) oR3c25@ls/false) (let ((oR3c29@t oR3c23@t)) (let ((oR3c2b@ls/false (oR30f2@syntax-dispatch oR3c29@t '_))) (if oR3c2b@ls/false (apply (lambda () '#f) oR3c2b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3c29@t))))))))))) (oR3c18@sealed? (let ((oR3c2d@t (oR3ac2@get-clause 'sealed oR3c10@clause*))) (let ((oR3c2f@ls/false (oR30f2@syntax-dispatch oR3c2d@t '(_ #(atom #t))))) (if oR3c2f@ls/false (apply (lambda () '#t) oR3c2f@ls/false) (let ((oR3c31@t oR3c2d@t)) (let ((oR3c33@ls/false (oR30f2@syntax-dispatch oR3c31@t '_))) (if oR3c33@ls/false (apply (lambda () '#f) oR3c33@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3c31@t)))))))) (oR3c19@opaque? (let ((oR3c35@t (oR3ac2@get-clause 'opaque oR3c10@clause*))) (let ((oR3c37@ls/false (oR30f2@syntax-dispatch oR3c35@t '(_ #(atom #t))))) (if oR3c37@ls/false (apply (lambda () '#t) oR3c37@ls/false) (let ((oR3c39@t oR3c35@t)) (let ((oR3c3b@ls/false (oR30f2@syntax-dispatch oR3c39@t '_))) (if oR3c3b@ls/false (apply (lambda () '#f) oR3c3b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3c39@t)))))))) (oR3c1a@fields (let ((oR3c3d@t (oR3ac2@get-clause 'fields oR3c10@clause*))) (let ((oR3c3f@ls/false (oR30f2@syntax-dispatch oR3c3d@t '(_ . each-any)))) (if oR3c3f@ls/false (apply (lambda (oR3c41@field-spec*) (list 'quote (oR3c16@convert-field-spec* oR3c41@field-spec*))) oR3c3f@ls/false) (let ((oR3c43@t oR3c3d@t)) (let ((oR3c45@ls/false (oR30f2@syntax-dispatch oR3c43@t '_))) (if oR3c45@ls/false (apply (lambda () ''#()) oR3c45@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3c43@t))))))))) (oR30a8@bless (list 'make-record-type-descriptor (list 'quote oR3c0f@name) oR3c11@parent-rtd-code oR3c17@uid-code oR3c18@sealed? oR3c19@opaque? oR3c1a@fields))))))) (set! oR3ac6@parent-rtd-code (lambda (oR3bf7@clause*) (let ((oR3bf9@t (oR3ac2@get-clause 'parent oR3bf7@clause*))) (let ((oR3bfb@ls/false (oR30f2@syntax-dispatch oR3bf9@t '(_ any)))) (if oR3bfb@ls/false (apply (lambda (oR3bfd@name) (list 'record-type-descriptor oR3bfd@name)) oR3bfb@ls/false) (let ((oR3bff@t oR3bf9@t)) (let ((oR3c01@ls/false (oR30f2@syntax-dispatch oR3bff@t '#(atom #f)))) (if oR3c01@ls/false (apply (lambda () (let ((oR3c03@t (oR3ac2@get-clause 'parent-rtd oR3bf7@clause*))) (let ((oR3c05@ls/false (oR30f2@syntax-dispatch oR3c03@t '(_ any any)))) (if oR3c05@ls/false (apply (lambda (oR3c07@rtd oR3c08@rcd) oR3c07@rtd) oR3c05@ls/false) (let ((oR3c0b@t oR3c03@t)) (let ((oR3c0d@ls/false (oR30f2@syntax-dispatch oR3c0b@t '#(atom #f)))) (if oR3c0d@ls/false (apply (lambda () '#f) oR3c0d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3c0b@t)))))))) oR3c01@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3bff@t))))))))) (set! oR3ac8@parent-rcd-code (lambda (oR3bdf@clause*) (let ((oR3be1@t (oR3ac2@get-clause 'parent oR3bdf@clause*))) (let ((oR3be3@ls/false (oR30f2@syntax-dispatch oR3be1@t '(_ any)))) (if oR3be3@ls/false (apply (lambda (oR3be5@name) (list 'record-constructor-descriptor oR3be5@name)) oR3be3@ls/false) (let ((oR3be7@t oR3be1@t)) (let ((oR3be9@ls/false (oR30f2@syntax-dispatch oR3be7@t '#(atom #f)))) (if oR3be9@ls/false (apply (lambda () (let ((oR3beb@t (oR3ac2@get-clause 'parent-rtd oR3bdf@clause*))) (let ((oR3bed@ls/false (oR30f2@syntax-dispatch oR3beb@t '(_ any any)))) (if oR3bed@ls/false (apply (lambda (oR3bef@rtd oR3bf0@rcd) oR3bf0@rcd) oR3bed@ls/false) (let ((oR3bf3@t oR3beb@t)) (let ((oR3bf5@ls/false (oR30f2@syntax-dispatch oR3bf3@t '#(atom #f)))) (if oR3bf5@ls/false (apply (lambda () '#f) oR3bf5@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3bf3@t)))))))) oR3be9@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3be7@t))))))))) (set! oR3aca@foo-rcd-code (lambda (oR3bd7@clause* oR3bd8@foo-rtd oR3bd9@protocol oR3bda@parent-rcd-code) (list 'make-record-constructor-descriptor oR3bd8@foo-rtd oR3bda@parent-rcd-code oR3bd9@protocol))) (set! oR3acc@get-protocol-code (lambda (oR3bcb@clause*) (let ((oR3bcd@t (oR3ac2@get-clause 'protocol oR3bcb@clause*))) (let ((oR3bcf@ls/false (oR30f2@syntax-dispatch oR3bcd@t '(_ any)))) (if oR3bcf@ls/false (apply (lambda (oR3bd1@expr) oR3bd1@expr) oR3bcf@ls/false) (let ((oR3bd3@t oR3bcd@t)) (let ((oR3bd5@ls/false (oR30f2@syntax-dispatch oR3bd3@t '_))) (if oR3bd5@ls/false (apply (lambda () '#f) oR3bd5@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3bd3@t))))))))) (set! oR3ace@get-fields (lambda (oR3bb9@clause*) (let ((oR3bbb@t oR3bb9@clause*)) (let ((oR3bbd@ls/false (oR30f2@syntax-dispatch oR3bbb@t '()))) (if oR3bbd@ls/false (apply (lambda () '()) oR3bbd@ls/false) (let ((oR3bbf@t oR3bbb@t)) (let ((oR3bc1@ls/false (oR30f2@syntax-dispatch oR3bbf@t '((#(scheme-id fields) . each-any) . _)))) (if oR3bc1@ls/false (apply (lambda (oR3bc3@f*) oR3bc3@f*) oR3bc1@ls/false) (let ((oR3bc5@t oR3bbf@t)) (let ((oR3bc7@ls/false (oR30f2@syntax-dispatch oR3bc5@t '(_ . any)))) (if oR3bc7@ls/false (apply (lambda (oR3bc9@rest) (oR3ace@get-fields oR3bc9@rest)) oR3bc7@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3bc5@t)))))))))))) (set! oR3ad0@get-mutator-indices (lambda (oR3ba1@fields) (let oR3ba7@f ((oR3ba3@fields oR3ba1@fields) (oR3ba4@i '0)) (let ((oR3ba9@t oR3ba3@fields)) (let ((oR3bab@ls/false (oR30f2@syntax-dispatch oR3ba9@t '()))) (if oR3bab@ls/false (apply (lambda () '()) oR3bab@ls/false) (let ((oR3bad@t oR3ba9@t)) (let ((oR3baf@ls/false (oR30f2@syntax-dispatch oR3bad@t '((#(scheme-id mutable) . _) . any)))) (if oR3baf@ls/false (apply (lambda (oR3bb1@rest) (cons oR3ba4@i (oR3ba7@f oR3bb1@rest (+ oR3ba4@i '1)))) oR3baf@ls/false) (let ((oR3bb3@t oR3bad@t)) (let ((oR3bb5@ls/false (oR30f2@syntax-dispatch oR3bb3@t '(_ . any)))) (if oR3bb5@ls/false (apply (lambda (oR3bb7@rest) (oR3ba7@f oR3bb7@rest (+ oR3ba4@i '1))) oR3bb5@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3bb3@t))))))))))))) (set! oR3ad2@get-mutators (lambda (oR3b77@foo oR3b78@fields) (let ((oR3b7c@gen-name '#f)) (begin (set! oR3b7c@gen-name (lambda (oR3b9f@x) (oR31d6@datum->syntax oR3b77@foo (string->symbol (string-append (symbol->string (oR31d8@syntax->datum oR3b77@foo)) '"-" (symbol->string (oR31d8@syntax->datum oR3b9f@x)) '"-set!"))))) (let oR3b7f@f ((oR3b7d@fields oR3b78@fields)) (let ((oR3b81@t oR3b7d@fields)) (let ((oR3b83@ls/false (oR30f2@syntax-dispatch oR3b81@t '()))) (if oR3b83@ls/false (apply (lambda () '()) oR3b83@ls/false) (let ((oR3b85@t oR3b81@t)) (let ((oR3b87@ls/false (oR30f2@syntax-dispatch oR3b85@t '((#(scheme-id mutable) any any any) . any)))) (if oR3b87@ls/false (apply (lambda (oR3b89@name oR3b8a@accessor oR3b8b@mutator oR3b8c@rest) (cons oR3b8b@mutator (oR3b7f@f oR3b8c@rest))) oR3b87@ls/false) (let ((oR3b91@t oR3b85@t)) (let ((oR3b93@ls/false (oR30f2@syntax-dispatch oR3b91@t '((#(scheme-id mutable) any) . any)))) (if oR3b93@ls/false (apply (lambda (oR3b95@name oR3b96@rest) (cons (oR3b7c@gen-name oR3b95@name) (oR3b7f@f oR3b96@rest))) oR3b93@ls/false) (let ((oR3b99@t oR3b91@t)) (let ((oR3b9b@ls/false (oR30f2@syntax-dispatch oR3b99@t '(_ . any)))) (if oR3b9b@ls/false (apply (lambda (oR3b9d@rest) (oR3b7f@f oR3b9d@rest)) oR3b9b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3b99@t)))))))))))))))))) (set! oR3ad4@get-accessors (lambda (oR3b33@foo oR3b34@fields) (let ((oR3b38@gen-name '#f)) (begin (set! oR3b38@gen-name (lambda (oR3b75@x) (oR31d6@datum->syntax oR3b33@foo (string->symbol (string-append (symbol->string (oR31d8@syntax->datum oR3b33@foo)) '"-" (symbol->string (oR31d8@syntax->datum oR3b75@x))))))) (map (lambda (oR3b39@field) (let ((oR3b3b@t oR3b39@field)) (let ((oR3b3d@ls/false (oR30f2@syntax-dispatch oR3b3b@t '(#(scheme-id mutable) any any any)))) (if (and oR3b3d@ls/false (apply (lambda (oR3b3f@name oR3b40@accessor oR3b41@mutator) (oR2eeb@id? oR3b40@accessor)) oR3b3d@ls/false)) (apply (lambda (oR3b45@name oR3b46@accessor oR3b47@mutator) oR3b46@accessor) oR3b3d@ls/false) (let ((oR3b4b@t oR3b3b@t)) (let ((oR3b4d@ls/false (oR30f2@syntax-dispatch oR3b4b@t '(#(scheme-id immutable) any any)))) (if (and oR3b4d@ls/false (apply (lambda (oR3b4f@name oR3b50@accessor) (oR2eeb@id? oR3b50@accessor)) oR3b4d@ls/false)) (apply (lambda (oR3b53@name oR3b54@accessor) oR3b54@accessor) oR3b4d@ls/false) (let ((oR3b57@t oR3b4b@t)) (let ((oR3b59@ls/false (oR30f2@syntax-dispatch oR3b57@t '(#(scheme-id mutable) any)))) (if (and oR3b59@ls/false (apply (lambda (oR3b5b@name) (oR2eeb@id? oR3b5b@name)) oR3b59@ls/false)) (apply (lambda (oR3b5d@name) (oR3b38@gen-name oR3b5d@name)) oR3b59@ls/false) (let ((oR3b5f@t oR3b57@t)) (let ((oR3b61@ls/false (oR30f2@syntax-dispatch oR3b5f@t '(#(scheme-id immutable) any)))) (if (and oR3b61@ls/false (apply (lambda (oR3b63@name) (oR2eeb@id? oR3b63@name)) oR3b61@ls/false)) (apply (lambda (oR3b65@name) (oR3b38@gen-name oR3b65@name)) oR3b61@ls/false) (let ((oR3b67@t oR3b5f@t)) (let ((oR3b69@ls/false (oR30f2@syntax-dispatch oR3b67@t 'any))) (if (and oR3b69@ls/false (apply (lambda (oR3b6b@name) (oR2eeb@id? oR3b6b@name)) oR3b69@ls/false)) (apply (lambda (oR3b6d@name) (oR3b38@gen-name oR3b6d@name)) oR3b69@ls/false) (let ((oR3b6f@t oR3b67@t)) (let ((oR3b71@ls/false (oR30f2@syntax-dispatch oR3b6f@t 'any))) (if oR3b71@ls/false (apply (lambda (oR3b73@others) (oR31d2@syntax-violation '#f '"invalid field spec" oR3b39@field)) oR3b71@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3b6f@t)))))))))))))))))))) oR3b34@fields))))) (set! oR3ad6@enumerate (lambda (oR3b2b@ls) (let oR3b31@f ((oR3b2d@ls oR3b2b@ls) (oR3b2e@i '0)) (if (null? oR3b2d@ls) '() (cons oR3b2e@i (oR3b31@f (cdr oR3b2d@ls) (+ oR3b2e@i '1))))))) (set! oR3ad8@do-define-record (lambda (oR3b03@namespec oR3b04@clause*) (let ((oR3b07@foo (oR3abc@get-record-name oR3b03@namespec))) (let ((oR3b09@foo-rtd (gensym))) (let ((oR3b0b@foo-rcd (gensym))) (let ((oR3b0d@protocol (gensym))) (let ((oR3b0f@make-foo (oR3abe@get-record-constructor-name oR3b03@namespec))) (let ((oR3b11@fields (oR3ace@get-fields oR3b04@clause*))) (let ((oR3b13@idx* (oR3ad6@enumerate oR3b11@fields))) (let ((oR3b15@foo-x* (oR3ad4@get-accessors oR3b07@foo oR3b11@fields))) (let ((oR3b17@set-foo-x!* (oR3ad2@get-mutators oR3b07@foo oR3b11@fields))) (let ((oR3b19@set-foo-idx* (oR3ad0@get-mutator-indices oR3b11@fields))) (let ((oR3b1b@foo? (oR3ac0@get-record-predicate-name oR3b03@namespec))) (let ((oR3b1d@foo-rtd-code (oR3ac4@foo-rtd-code oR3b07@foo oR3b04@clause* (oR3ac6@parent-rtd-code oR3b04@clause*)))) (let ((oR3b1f@foo-rcd-code (oR3aca@foo-rcd-code oR3b04@clause* oR3b09@foo-rtd oR3b0d@protocol (oR3ac8@parent-rcd-code oR3b04@clause*)))) (let ((oR3b21@protocol-code (oR3acc@get-protocol-code oR3b04@clause*))) (oR30a8@bless (cons 'begin (cons (list 'define oR3b09@foo-rtd oR3b1d@foo-rtd-code) (cons (list 'define oR3b0d@protocol oR3b21@protocol-code) (cons (list 'define oR3b0b@foo-rcd oR3b1f@foo-rcd-code) (cons (list 'define-syntax oR3b07@foo (list 'list ''$rtd (list 'syntax oR3b09@foo-rtd) (list 'syntax oR3b0b@foo-rcd))) (cons (list 'define oR3b1b@foo? (list 'record-predicate oR3b09@foo-rtd)) (cons (list 'define oR3b0f@make-foo (list 'record-constructor oR3b0b@foo-rcd)) (append (map (lambda (oR3b23@foo-x oR3b24@idx) (list 'define oR3b23@foo-x (list 'record-accessor oR3b09@foo-rtd oR3b24@idx))) oR3b15@foo-x* oR3b13@idx*) (map (lambda (oR3b27@set-foo-x! oR3b28@idx) (list 'define oR3b27@set-foo-x! (list 'record-mutator oR3b09@foo-rtd oR3b28@idx))) oR3b17@set-foo-x!* oR3b19@set-foo-idx*)))))))))))))))))))))))))) (set! oR3ada@verify-clauses (lambda (oR3ae3@x oR3ae4@cls*) (let ((oR3ae8@valid-kwds '#f) (oR3aea@free-id-member? '#f)) (begin (set! oR3ae8@valid-kwds (map oR30a8@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! oR3aea@free-id-member? (lambda (oR3aff@x oR3b00@ls) (and (pair? oR3b00@ls) (or (oR2ef1@free-id=? oR3aff@x (car oR3b00@ls)) (oR3aea@free-id-member? oR3aff@x (cdr oR3b00@ls)))))) (let oR3aef@f ((oR3aeb@cls* oR3ae4@cls*) (oR3aec@seen* '())) (if (not (null? oR3aeb@cls*)) (let ((oR3af1@t (car oR3aeb@cls*))) (let ((oR3af3@ls/false (oR30f2@syntax-dispatch oR3af1@t '(any . any)))) (if oR3af3@ls/false (apply (lambda (oR3af5@kwd oR3af6@rest) (if (or (not (oR2eeb@id? oR3af5@kwd)) (not (oR3aea@free-id-member? oR3af5@kwd oR3ae8@valid-kwds))) (oR31d2@syntax-violation '#f '"not a valid define-record-type keyword" oR3af5@kwd) (if (oR2ef7@bound-id-member? oR3af5@kwd oR3aec@seen*) (oR31d2@syntax-violation '#f '"duplicate use of keyword " oR3ae3@x oR3af5@kwd) (oR3aef@f (cdr oR3aeb@cls*) (cons oR3af5@kwd oR3aec@seen*))))) oR3af3@ls/false) (let ((oR3af9@t oR3af1@t)) (let ((oR3afb@ls/false (oR30f2@syntax-dispatch oR3af9@t 'any))) (if oR3afb@ls/false (apply (lambda (oR3afd@cls) (oR31d2@syntax-violation '#f '"malformed define-record-type clause" oR3afd@cls)) oR3afb@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3af9@t))))))) (void))))))) (let ((oR3adb@t oR3ab7@x)) (let ((oR3add@ls/false (oR30f2@syntax-dispatch oR3adb@t '(_ any . each-any)))) (if oR3add@ls/false (apply (lambda (oR3adf@namespec oR3ae0@clause*) (begin (oR3ada@verify-clauses oR3ab7@x oR3ae0@clause*) (oR3ad8@do-define-record oR3adf@namespec oR3ae0@clause*))) oR3add@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3adb@t)))))))) (set! oR4bc2@oR30e6@define-record-type-macro oR30e6@define-record-type-macro) (set! oR30e8@define-condition-type-macro (lambda (oR3cb3@x) (let ((oR3cb6@mkname '#f)) (begin (set! oR3cb6@mkname (lambda (oR3ce3@name oR3ce4@suffix) (oR31d6@datum->syntax oR3ce3@name (string->symbol (string-append (symbol->string (oR31d8@syntax->datum oR3ce3@name)) oR3ce4@suffix))))) (let ((oR3cb7@t oR3cb3@x)) (let ((oR3cb9@ls/false (oR30f2@syntax-dispatch oR3cb7@t '(any any any any any . #(each (any any)))))) (if (and oR3cb9@ls/false (apply (lambda (oR3cbb@ctxt oR3cbc@name oR3cbd@super oR3cbe@constructor oR3cbf@predicate oR3cc0@field* oR3cc1@accessor*) (and (oR2eeb@id? oR3cbc@name) (oR2eeb@id? oR3cbd@super) (oR2eeb@id? oR3cbe@constructor) (oR2eeb@id? oR3cbf@predicate) (for-all oR2eeb@id? oR3cc0@field*) (for-all oR2eeb@id? oR3cc1@accessor*))) oR3cb9@ls/false)) (apply (lambda (oR3cc9@ctxt oR3cca@name oR3ccb@super oR3ccc@constructor oR3ccd@predicate oR3cce@field* oR3ccf@accessor*) (let ((oR3cd7@aux-accessor* (map (lambda (oR3cd9@x) (gensym)) oR3ccf@accessor*))) (oR30a8@bless (cons 'begin (cons (cons 'define-record-type (cons (list oR3cca@name oR3ccc@constructor (gensym)) (cons (list 'parent oR3ccb@super) (cons (cons 'fields (map (lambda (oR3cdb@field oR3cdc@aux) (list 'immutable oR3cdb@field oR3cdc@aux)) oR3cce@field* oR3cd7@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define oR3ccd@predicate (list 'condition-predicate (list 'record-type-descriptor oR3cca@name))) (map (lambda (oR3cdf@accessor oR3ce0@aux) (list 'define oR3cdf@accessor (list 'condition-accessor (list 'record-type-descriptor oR3cca@name) oR3ce0@aux))) oR3ccf@accessor* oR3cd7@aux-accessor*))))))) oR3cb9@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3cb7@t)))))))) (set! oR4bc3@oR30e8@define-condition-type-macro oR30e8@define-condition-type-macro) (set! oR30ea@incorrect-usage-macro (lambda (oR3ce7@e) (oR31d2@syntax-violation '#f '"incorrect usage of auxiliary keyword" oR3ce7@e))) (set! oR4bc4@oR30ea@incorrect-usage-macro oR30ea@incorrect-usage-macro) (set! oR30ec@parameterize-macro (lambda (oR3ce9@e) (let ((oR3ceb@t oR3ce9@e)) (let ((oR3ced@ls/false (oR30f2@syntax-dispatch oR3ceb@t '(_ () any . each-any)))) (if oR3ced@ls/false (apply (lambda (oR3cef@b oR3cf0@b*) (oR30a8@bless (cons 'let (cons '() (cons oR3cef@b oR3cf0@b*))))) oR3ced@ls/false) (let ((oR3cf3@t oR3ceb@t)) (let ((oR3cf5@ls/false (oR30f2@syntax-dispatch oR3cf3@t '(_ #(each (any any)) any . each-any)))) (if oR3cf5@ls/false (apply (lambda (oR3cf7@olhs* oR3cf8@orhs* oR3cf9@b oR3cfa@b*) (let ((oR3cff@lhs* (oR31c0@generate-temporaries oR3cf7@olhs*)) (oR3d00@rhs* (oR31c0@generate-temporaries oR3cf8@orhs*))) (oR30a8@bless (cons (list 'lambda (append oR3cff@lhs* oR3d00@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (oR3d03@lhs oR3d04@rhs) (list 'let (list (list 't (list oR3d03@lhs))) (list oR3d03@lhs oR3d04@rhs) (cons 'set! (cons oR3d04@rhs '(t))))) oR3cff@lhs* oR3d00@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons oR3cf9@b oR3cfa@b*))) '(swap)))))) (append oR3cf7@olhs* oR3cf8@orhs*))))) oR3cf5@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3cf3@t))))))))) (set! oR4bc5@oR30ec@parameterize-macro oR30ec@parameterize-macro) (set! oR30ee@foreign-call-transformer (lambda (oR3d07@e oR3d08@r oR3d09@mr) (let ((oR3d0d@t oR3d07@e)) (let ((oR3d0f@ls/false (oR30f2@syntax-dispatch oR3d0d@t '(_ any . each-any)))) (if oR3d0f@ls/false (apply (lambda (oR3d11@name oR3d12@arg*) (cons 'foreign-call (cons (oR3114@chi-expr oR3d11@name oR3d08@r oR3d09@mr) (oR3110@chi-expr* oR3d12@arg* oR3d08@r oR3d09@mr)))) oR3d0f@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3d0d@t)))))) (set! oR4bc6@oR30ee@foreign-call-transformer oR30ee@foreign-call-transformer) (set! oR30f0@convert-pattern (lambda (oR3d15@pattern oR3d16@keys) (let ((oR3d1a@cvt* '#f) (oR3d1c@cvt '#f)) (begin (set! oR3d1a@cvt* (lambda (oR3db9@p* oR3dba@n oR3dbb@ids) (if (null? oR3db9@p*) (values '() oR3dbb@ids) (call-with-values (lambda () (oR3d1a@cvt* (cdr oR3db9@p*) oR3dba@n oR3dbb@ids)) (lambda (oR3dc3@oR3dc0 oR3dc4@oR3dc2) (let ((oR3dc7@ids oR3dc4@oR3dc2) (oR3dc8@y oR3dc3@oR3dc0)) (call-with-values (lambda () (oR3d1c@cvt (car oR3db9@p*) oR3dba@n oR3dc7@ids)) (lambda (oR3dcf@oR3dcc oR3dd0@oR3dce) (let ((oR3dd3@ids oR3dd0@oR3dce) (oR3dd4@x oR3dcf@oR3dcc)) (values (cons oR3dd4@x oR3dc8@y) oR3dd3@ids)))))))))) (set! oR3d1c@cvt (lambda (oR3d1d@p oR3d1e@n oR3d1f@ids) (let ((oR3d23@t oR3d1d@p)) (let ((oR3d25@ls/false (oR30f2@syntax-dispatch oR3d23@t 'any))) (if (and oR3d25@ls/false (apply (lambda (oR3d27@id) (oR2eeb@id? oR3d27@id)) oR3d25@ls/false)) (apply (lambda (oR3d29@id) (if (oR2ef7@bound-id-member? oR3d1d@p oR3d16@keys) (values (vector 'free-id oR3d1d@p) oR3d1f@ids) (if (oR2ef1@free-id=? oR3d1d@p (oR307a@scheme-stx '_)) (values '_ oR3d1f@ids) (values 'any (cons (cons oR3d1d@p oR3d1e@n) oR3d1f@ids))))) oR3d25@ls/false) (let ((oR3d2b@t oR3d23@t)) (let ((oR3d2d@ls/false (oR30f2@syntax-dispatch oR3d2b@t '(any any)))) (if (and oR3d2d@ls/false (apply (lambda (oR3d2f@p oR3d30@dots) (oR30f4@ellipsis? oR3d30@dots)) oR3d2d@ls/false)) (apply (lambda (oR3d33@p oR3d34@dots) (call-with-values (lambda () (oR3d1c@cvt oR3d33@p (+ oR3d1e@n '1) oR3d1f@ids)) (lambda (oR3d3b@oR3d38 oR3d3c@oR3d3a) (let ((oR3d3f@ids oR3d3c@oR3d3a) (oR3d40@p oR3d3b@oR3d38)) (values (if (eq? oR3d40@p 'any) 'each-any (vector 'each oR3d40@p)) oR3d3f@ids))))) oR3d2d@ls/false) (let ((oR3d43@t oR3d2b@t)) (let ((oR3d45@ls/false (oR30f2@syntax-dispatch oR3d43@t '(any any . #(each+ any () any))))) (if (and oR3d45@ls/false (apply (lambda (oR3d47@x oR3d48@dots oR3d49@ys oR3d4a@z) (oR30f4@ellipsis? oR3d48@dots)) oR3d45@ls/false)) (apply (lambda (oR3d4f@x oR3d50@dots oR3d51@ys oR3d52@z) (call-with-values (lambda () (oR3d1c@cvt oR3d52@z oR3d1e@n oR3d1f@ids)) (lambda (oR3d5b@oR3d58 oR3d5c@oR3d5a) (let ((oR3d5f@ids oR3d5c@oR3d5a) (oR3d60@z oR3d5b@oR3d58)) (call-with-values (lambda () (oR3d1a@cvt* oR3d51@ys oR3d1e@n oR3d5f@ids)) (lambda (oR3d67@oR3d64 oR3d68@oR3d66) (let ((oR3d6b@ids oR3d68@oR3d66) (oR3d6c@ys oR3d67@oR3d64)) (call-with-values (lambda () (oR3d1c@cvt oR3d4f@x (+ oR3d1e@n '1) oR3d6b@ids)) (lambda (oR3d73@oR3d70 oR3d74@oR3d72) (let ((oR3d77@ids oR3d74@oR3d72) (oR3d78@x oR3d73@oR3d70)) (values (vector 'each+ oR3d78@x (reverse oR3d6c@ys) oR3d60@z) oR3d77@ids))))))))))) oR3d45@ls/false) (let ((oR3d7b@t oR3d43@t)) (let ((oR3d7d@ls/false (oR30f2@syntax-dispatch oR3d7b@t '(any . any)))) (if oR3d7d@ls/false (apply (lambda (oR3d7f@x oR3d80@y) (call-with-values (lambda () (oR3d1c@cvt oR3d80@y oR3d1e@n oR3d1f@ids)) (lambda (oR3d87@oR3d84 oR3d88@oR3d86) (let ((oR3d8b@ids oR3d88@oR3d86) (oR3d8c@y oR3d87@oR3d84)) (call-with-values (lambda () (oR3d1c@cvt oR3d7f@x oR3d1e@n oR3d8b@ids)) (lambda (oR3d93@oR3d90 oR3d94@oR3d92) (let ((oR3d97@ids oR3d94@oR3d92) (oR3d98@x oR3d93@oR3d90)) (values (cons oR3d98@x oR3d8c@y) oR3d97@ids)))))))) oR3d7d@ls/false) (let ((oR3d9b@t oR3d7b@t)) (let ((oR3d9d@ls/false (oR30f2@syntax-dispatch oR3d9b@t '()))) (if oR3d9d@ls/false (apply (lambda () (values '() oR3d1f@ids)) oR3d9d@ls/false) (let ((oR3d9f@t oR3d9b@t)) (let ((oR3da1@ls/false (oR30f2@syntax-dispatch oR3d9f@t '#(vector each-any)))) (if (and oR3da1@ls/false (apply (lambda (oR3da3@p) (not (oR2eb7@stx? oR3da3@p))) oR3da1@ls/false)) (apply (lambda (oR3da5@p) (call-with-values (lambda () (oR3d1c@cvt oR3da5@p oR3d1e@n oR3d1f@ids)) (lambda (oR3dab@oR3da8 oR3dac@oR3daa) (let ((oR3daf@ids oR3dac@oR3daa) (oR3db0@p oR3dab@oR3da8)) (values (vector 'vector oR3db0@p) oR3daf@ids))))) oR3da1@ls/false) (let ((oR3db3@t oR3d9f@t)) (let ((oR3db5@ls/false (oR30f2@syntax-dispatch oR3db3@t 'any))) (if oR3db5@ls/false (apply (lambda (oR3db7@datum) (values (vector 'atom (oR2eff@stx->datum oR3db7@datum)) oR3d1f@ids)) oR3db5@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3db3@t)))))))))))))))))))))))) (oR3d1c@cvt oR3d15@pattern '0 '()))))) (set! oR4bc7@oR30f0@convert-pattern oR30f0@convert-pattern) (set! oR30f2@syntax-dispatch (let ((oR3dd8@stx^ '#f) (oR3dda@match-each '#f) (oR3ddc@match-each+ '#f) (oR3dde@match-each-any '#f) (oR3de0@match-empty '#f) (oR3de2@combine '#f) (oR3de4@match* '#f) (oR3de6@match '#f)) (begin (set! oR3dd8@stx^ (lambda (oR3eb3@e oR3eb4@m* oR3eb5@s* oR3eb6@ae*) (if (and (null? oR3eb4@m*) (null? oR3eb5@s*) (null? oR3eb6@ae*)) oR3eb3@e (oR2ed3@mkstx oR3eb3@e oR3eb4@m* oR3eb5@s* oR3eb6@ae*)))) (set! oR3dda@match-each (lambda (oR3e93@e oR3e94@p oR3e95@m* oR3e96@s* oR3e97@ae*) (if (pair? oR3e93@e) (let ((oR3e9d@first (oR3de6@match (car oR3e93@e) oR3e94@p oR3e95@m* oR3e96@s* oR3e97@ae* '()))) (and oR3e9d@first (let ((oR3e9f@rest (oR3dda@match-each (cdr oR3e93@e) oR3e94@p oR3e95@m* oR3e96@s* oR3e97@ae*))) (and oR3e9f@rest (cons oR3e9d@first oR3e9f@rest))))) (if (null? oR3e93@e) '() (if (oR2eb7@stx? oR3e93@e) (and (not (oR2e71@top-marked? oR3e95@m*)) (call-with-values (lambda () (join-wraps oR3e95@m* oR3e96@s* oR3e97@ae* oR3e93@e)) (lambda (oR3ea7@oR3ea2 oR3ea8@oR3ea4 oR3ea9@oR3ea6) (let ((oR3ead@ae* oR3ea9@oR3ea6) (oR3eae@s* oR3ea8@oR3ea4) (oR3eaf@m* oR3ea7@oR3ea2)) (oR3dda@match-each (oR2eb9@stx-expr oR3e93@e) oR3e94@p oR3eaf@m* oR3eae@s* oR3ead@ae*))))) (if (oR2a18@oR28ea@annotation? oR3e93@e) (oR3dda@match-each (oR2a1a@oR28ee@annotation-expression oR3e93@e) oR3e94@p oR3e95@m* oR3e96@s* oR3e97@ae*) '#f)))))) (set! oR3ddc@match-each+ (lambda (oR3e53@e oR3e54@x-pat oR3e55@y-pat oR3e56@z-pat oR3e57@m* oR3e58@s* oR3e59@ae* oR3e5a@r) (let oR3e6b@f ((oR3e63@e oR3e53@e) (oR3e64@m* oR3e57@m*) (oR3e65@s* oR3e58@s*) (oR3e66@ae* oR3e59@ae*)) (if (pair? oR3e63@e) (call-with-values (lambda () (oR3e6b@f (cdr oR3e63@e) oR3e64@m* oR3e65@s* oR3e66@ae*)) (lambda (oR3e73@oR3e6e oR3e74@oR3e70 oR3e75@oR3e72) (let ((oR3e79@r oR3e75@oR3e72) (oR3e7a@y-pat oR3e74@oR3e70) (oR3e7b@xr* oR3e73@oR3e6e)) (if oR3e79@r (if (null? oR3e7a@y-pat) (let ((oR3e7f@xr (oR3de6@match (car oR3e63@e) oR3e54@x-pat oR3e64@m* oR3e65@s* oR3e66@ae* '()))) (if oR3e7f@xr (values (cons oR3e7f@xr oR3e7b@xr*) oR3e7a@y-pat oR3e79@r) (values '#f '#f '#f))) (values '() (cdr oR3e7a@y-pat) (oR3de6@match (car oR3e63@e) (car oR3e7a@y-pat) oR3e64@m* oR3e65@s* oR3e66@ae* oR3e79@r))) (values '#f '#f '#f))))) (if (oR2eb7@stx? oR3e63@e) (if (oR2e71@top-marked? oR3e64@m*) (values '() oR3e55@y-pat (oR3de6@match oR3e63@e oR3e56@z-pat oR3e64@m* oR3e65@s* oR3e66@ae* oR3e5a@r)) (call-with-values (lambda () (join-wraps oR3e64@m* oR3e65@s* oR3e66@ae* oR3e63@e)) (lambda (oR3e87@oR3e82 oR3e88@oR3e84 oR3e89@oR3e86) (let ((oR3e8d@ae* oR3e89@oR3e86) (oR3e8e@s* oR3e88@oR3e84) (oR3e8f@m* oR3e87@oR3e82)) (oR3e6b@f (oR2eb9@stx-expr oR3e63@e) oR3e8f@m* oR3e8e@s* oR3e8d@ae*))))) (if (oR2a18@oR28ea@annotation? oR3e63@e) (oR3e6b@f (oR2a1a@oR28ee@annotation-expression oR3e63@e) oR3e64@m* oR3e65@s* oR3e66@ae*) (values '() oR3e55@y-pat (oR3de6@match oR3e63@e oR3e56@z-pat oR3e64@m* oR3e65@s* oR3e66@ae* oR3e5a@r)))))))) (set! oR3dde@match-each-any (lambda (oR3e37@e oR3e38@m* oR3e39@s* oR3e3a@ae*) (if (pair? oR3e37@e) (let ((oR3e3f@l (oR3dde@match-each-any (cdr oR3e37@e) oR3e38@m* oR3e39@s* oR3e3a@ae*))) (and oR3e3f@l (cons (oR3dd8@stx^ (car oR3e37@e) oR3e38@m* oR3e39@s* oR3e3a@ae*) oR3e3f@l))) (if (null? oR3e37@e) '() (if (oR2eb7@stx? oR3e37@e) (and (not (oR2e71@top-marked? oR3e38@m*)) (call-with-values (lambda () (join-wraps oR3e38@m* oR3e39@s* oR3e3a@ae* oR3e37@e)) (lambda (oR3e47@oR3e42 oR3e48@oR3e44 oR3e49@oR3e46) (let ((oR3e4d@ae* oR3e49@oR3e46) (oR3e4e@s* oR3e48@oR3e44) (oR3e4f@m* oR3e47@oR3e42)) (oR3dde@match-each-any (oR2eb9@stx-expr oR3e37@e) oR3e4f@m* oR3e4e@s* oR3e4d@ae*))))) (if (oR2a18@oR28ea@annotation? oR3e37@e) (oR3dde@match-each-any (oR2a1a@oR28ee@annotation-expression oR3e37@e) oR3e38@m* oR3e39@s* oR3e3a@ae*) '#f)))))) (set! oR3de0@match-empty (lambda (oR3e31@p oR3e32@r) (if (null? oR3e31@p) oR3e32@r (if (eq? oR3e31@p '_) oR3e32@r (if (eq? oR3e31@p 'any) (cons '() oR3e32@r) (if (pair? oR3e31@p) (oR3de0@match-empty (car oR3e31@p) (oR3de0@match-empty (cdr oR3e31@p) oR3e32@r)) (if (eq? oR3e31@p 'each-any) (cons '() oR3e32@r) (let ((oR3e35@t (vector-ref oR3e31@p '0))) (if (memv oR3e35@t '(each)) (oR3de0@match-empty (vector-ref oR3e31@p '1) oR3e32@r) (if (memv oR3e35@t '(each+)) (oR3de0@match-empty (vector-ref oR3e31@p '1) (oR3de0@match-empty (reverse (vector-ref oR3e31@p '2)) (oR3de0@match-empty (vector-ref oR3e31@p '3) oR3e32@r))) (if (memv oR3e35@t '(free-id atom)) oR3e32@r (if (memv oR3e35@t '(scheme-id atom)) oR3e32@r (if (memv oR3e35@t '(vector)) (oR3de0@match-empty (vector-ref oR3e31@p '1) oR3e32@r) (assertion-violation 'syntax-dispatch '"invalid pattern" oR3e31@p)))))))))))))) (set! oR3de2@combine (lambda (oR3e2d@r* oR3e2e@r) (if (null? (car oR3e2d@r*)) oR3e2e@r (cons (map car oR3e2d@r*) (oR3de2@combine (map cdr oR3e2d@r*) oR3e2e@r))))) (set! oR3de4@match* (lambda (oR3e09@e oR3e0a@p oR3e0b@m* oR3e0c@s* oR3e0d@ae* oR3e0e@r) (if (null? oR3e0a@p) (and (null? oR3e09@e) oR3e0e@r) (if (pair? oR3e0a@p) (and (pair? oR3e09@e) (oR3de6@match (car oR3e09@e) (car oR3e0a@p) oR3e0b@m* oR3e0c@s* oR3e0d@ae* (oR3de6@match (cdr oR3e09@e) (cdr oR3e0a@p) oR3e0b@m* oR3e0c@s* oR3e0d@ae* oR3e0e@r))) (if (eq? oR3e0a@p 'each-any) (let ((oR3e15@l (oR3dde@match-each-any oR3e09@e oR3e0b@m* oR3e0c@s* oR3e0d@ae*))) (and oR3e15@l (cons oR3e15@l oR3e0e@r))) (let ((oR3e17@t (vector-ref oR3e0a@p '0))) (if (memv oR3e17@t '(each)) (if (null? oR3e09@e) (oR3de0@match-empty (vector-ref oR3e0a@p '1) oR3e0e@r) (let ((oR3e19@r* (oR3dda@match-each oR3e09@e (vector-ref oR3e0a@p '1) oR3e0b@m* oR3e0c@s* oR3e0d@ae*))) (and oR3e19@r* (oR3de2@combine oR3e19@r* oR3e0e@r)))) (if (memv oR3e17@t '(free-id)) (and (symbol? oR3e09@e) (oR2e71@top-marked? oR3e0b@m*) (oR2ef1@free-id=? (oR3dd8@stx^ oR3e09@e oR3e0b@m* oR3e0c@s* oR3e0d@ae*) (vector-ref oR3e0a@p '1)) oR3e0e@r) (if (memv oR3e17@t '(scheme-id)) (and (symbol? oR3e09@e) (oR2e71@top-marked? oR3e0b@m*) (oR2ef1@free-id=? (oR3dd8@stx^ oR3e09@e oR3e0b@m* oR3e0c@s* oR3e0d@ae*) (oR307a@scheme-stx (vector-ref oR3e0a@p '1))) oR3e0e@r) (if (memv oR3e17@t '(each+)) (call-with-values (lambda () (oR3ddc@match-each+ oR3e09@e (vector-ref oR3e0a@p '1) (vector-ref oR3e0a@p '2) (vector-ref oR3e0a@p '3) oR3e0b@m* oR3e0c@s* oR3e0d@ae* oR3e0e@r)) (lambda (oR3e21@oR3e1c oR3e22@oR3e1e oR3e23@oR3e20) (let ((oR3e27@r oR3e23@oR3e20) (oR3e28@y-pat oR3e22@oR3e1e) (oR3e29@xr* oR3e21@oR3e1c)) (and oR3e27@r (null? oR3e28@y-pat) (if (null? oR3e29@xr*) (oR3de0@match-empty (vector-ref oR3e0a@p '1) oR3e27@r) (oR3de2@combine oR3e29@xr* oR3e27@r)))))) (if (memv oR3e17@t '(atom)) (and (fast-equal? (vector-ref oR3e0a@p '1) (oR2efd@strip oR3e09@e oR3e0b@m*)) oR3e0e@r) (if (memv oR3e17@t '(vector)) (and (vector? oR3e09@e) (oR3de6@match (vector->list oR3e09@e) (vector-ref oR3e0a@p '1) oR3e0b@m* oR3e0c@s* oR3e0d@ae* oR3e0e@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" oR3e0a@p))))))))))))) (set! oR3de6@match (lambda (oR3deb@e oR3dec@p oR3ded@m* oR3dee@s* oR3def@ae* oR3df0@r) (if (not oR3df0@r) '#f (if (eq? oR3dec@p '_) oR3df0@r (if (eq? oR3dec@p 'any) (cons (oR3dd8@stx^ oR3deb@e oR3ded@m* oR3dee@s* oR3def@ae*) oR3df0@r) (if (oR2eb7@stx? oR3deb@e) (and (not (oR2e71@top-marked? oR3ded@m*)) (call-with-values (lambda () (join-wraps oR3ded@m* oR3dee@s* oR3def@ae* oR3deb@e)) (lambda (oR3dfd@oR3df8 oR3dfe@oR3dfa oR3dff@oR3dfc) (let ((oR3e03@ae* oR3dff@oR3dfc) (oR3e04@s* oR3dfe@oR3dfa) (oR3e05@m* oR3dfd@oR3df8)) (oR3de6@match (oR2eb9@stx-expr oR3deb@e) oR3dec@p oR3e05@m* oR3e04@s* oR3e03@ae* oR3df0@r))))) (if (oR2a18@oR28ea@annotation? oR3deb@e) (oR3de6@match (oR2a1a@oR28ee@annotation-expression oR3deb@e) oR3dec@p oR3ded@m* oR3dee@s* oR3def@ae* oR3df0@r) (oR3de4@match* oR3deb@e oR3dec@p oR3ded@m* oR3dee@s* oR3def@ae* oR3df0@r)))))))) (lambda (oR3de7@e oR3de8@p) (oR3de6@match oR3de7@e oR3de8@p '() '() '() '()))))) (set! oR4bc8@oR30f2@syntax-dispatch oR30f2@syntax-dispatch) (set! oR30f4@ellipsis? (lambda (oR3ebb@x) (and (oR2eeb@id? oR3ebb@x) (oR2ef1@free-id=? oR3ebb@x (oR307a@scheme-stx '...))))) (set! oR4bc9@oR30f4@ellipsis? oR30f4@ellipsis?) (set! oR30f6@underscore? (lambda (oR3ebd@x) (and (oR2eeb@id? oR3ebd@x) (oR2ef1@free-id=? oR3ebd@x (oR307a@scheme-stx '_))))) (set! oR4bca@oR30f6@underscore? oR30f6@underscore?) (set! oR30f8@verify-literals (lambda (oR3ebf@lits oR3ec0@expr) (for-each (lambda (oR3ec3@x) (if (or (not (oR2eeb@id? oR3ec3@x)) (oR30f4@ellipsis? oR3ec3@x) (oR30f6@underscore? oR3ec3@x)) (oR31d2@syntax-violation '#f '"invalid literal" oR3ec0@expr oR3ec3@x) (void))) oR3ebf@lits))) (set! oR4bcb@oR30f8@verify-literals oR30f8@verify-literals) (set! oR30fa@syntax-case-transformer (let ((oR3ec6@build-dispatch-call '#f) (oR3ec8@invalid-ids-error '#f) (oR3eca@gen-clause '#f) (oR3ecc@gen-syntax-case '#f)) (begin (set! oR3ec6@build-dispatch-call (lambda (oR3f37@pvars oR3f38@expr oR3f39@y oR3f3a@r oR3f3b@mr) (let ((oR3f41@ids (map car oR3f37@pvars)) (oR3f42@levels (map cdr oR3f37@pvars))) (let ((oR3f45@labels (map oR2e77@gen-label oR3f41@ids)) (oR3f46@new-vars (map oR2e73@gen-lexical oR3f41@ids))) (let ((oR3f49@body (oR3114@chi-expr (oR2ed7@add-subst (oR2eab@make-full-rib oR3f41@ids oR3f45@labels) oR3f38@expr) (append (map (lambda (oR3f4b@label oR3f4c@var oR3f4d@level) (cons oR3f4b@label (oR2f05@make-binding 'syntax (cons oR3f4c@var oR3f4d@level)))) oR3f45@labels oR3f46@new-vars (map cdr oR3f37@pvars)) oR3f3a@r) oR3f3b@mr))) (list '(primitive apply) (oR2e4e@oR2d7a@build-lambda '#f oR3f46@new-vars oR3f49@body) oR3f39@y)))))) (set! oR3ec8@invalid-ids-error (lambda (oR3f2b@id* oR3f2c@e oR3f2d@class) (let oR3f35@find ((oR3f31@id* oR3f2b@id*) (oR3f32@ok* '())) (if (null? oR3f31@id*) (oR31d2@syntax-violation '#f '"invalid syntax" oR3f2c@e) (if (oR2eeb@id? (car oR3f31@id*)) (if (oR2ef7@bound-id-member? (car oR3f31@id*) oR3f32@ok*) (oR31ce@syntax-error (car oR3f31@id*) '"duplicate " oR3f2d@class) (oR3f35@find (cdr oR3f31@id*) (cons (car oR3f31@id*) oR3f32@ok*))) (oR31ce@syntax-error (car oR3f31@id*) '"invalid " oR3f2d@class)))))) (set! oR3eca@gen-clause (lambda (oR3f03@x oR3f04@keys oR3f05@clauses oR3f06@r oR3f07@mr oR3f08@pat oR3f09@fender oR3f0a@expr) (call-with-values (lambda () (oR30f0@convert-pattern oR3f08@pat oR3f04@keys)) (lambda (oR3f17@oR3f14 oR3f18@oR3f16) (let ((oR3f1b@pvars oR3f18@oR3f16) (oR3f1c@p oR3f17@oR3f14)) (if (not (oR2ef5@distinct-bound-ids? (map car oR3f1b@pvars))) (oR3ec8@invalid-ids-error (map car oR3f1b@pvars) oR3f08@pat '"pattern variable") (if (not (for-all (lambda (oR3f1f@x) (not (oR30f4@ellipsis? (car oR3f1f@x)))) oR3f1b@pvars)) (oR31d2@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" oR3f08@pat) (let ((oR3f21@y (oR2e73@gen-lexical 'tmp))) (let ((oR3f23@test (if (eq? oR3f09@fender '#t) oR3f21@y (let ((oR3f25@call (oR3ec6@build-dispatch-call oR3f1b@pvars oR3f09@fender oR3f21@y oR3f06@r oR3f07@mr))) (list 'if oR3f21@y oR3f25@call (list 'quote '#f)))))) (let ((oR3f27@conseq (oR3ec6@build-dispatch-call oR3f1b@pvars oR3f0a@expr oR3f21@y oR3f06@r oR3f07@mr))) (let ((oR3f29@altern (oR3ecc@gen-syntax-case oR3f03@x oR3f04@keys oR3f05@clauses oR3f06@r oR3f07@mr))) (list (oR2e4e@oR2d7a@build-lambda '#f (list oR3f21@y) (list 'if oR3f23@test oR3f27@conseq oR3f29@altern)) (list '(primitive syntax-dispatch) oR3f03@x (list 'quote oR3f1c@p)))))))))))))) (set! oR3ecc@gen-syntax-case (lambda (oR3ee1@x oR3ee2@keys oR3ee3@clauses oR3ee4@r oR3ee5@mr) (if (null? oR3ee3@clauses) (list '(primitive syntax-error) oR3ee1@x) (let ((oR3eeb@t (car oR3ee3@clauses))) (let ((oR3eed@ls/false (oR30f2@syntax-dispatch oR3eeb@t '(any any)))) (if oR3eed@ls/false (apply (lambda (oR3eef@pat oR3ef0@expr) (if (and (oR2eeb@id? oR3eef@pat) (not (oR2ef7@bound-id-member? oR3eef@pat oR3ee2@keys)) (not (oR30f4@ellipsis? oR3eef@pat))) (if (oR2ef1@free-id=? oR3eef@pat (oR307a@scheme-stx '_)) (oR3114@chi-expr oR3ef0@expr oR3ee4@r oR3ee5@mr) (let ((oR3ef3@lab (oR2e77@gen-label oR3eef@pat)) (oR3ef4@lex (oR2e73@gen-lexical oR3eef@pat))) (let ((oR3ef7@body (oR3114@chi-expr (oR2ed7@add-subst (oR2eab@make-full-rib (list oR3eef@pat) (list oR3ef3@lab)) oR3ef0@expr) (cons (cons oR3ef3@lab (oR2f05@make-binding 'syntax (cons oR3ef4@lex '0))) oR3ee4@r) oR3ee5@mr))) (list (oR2e4e@oR2d7a@build-lambda '#f (list oR3ef4@lex) oR3ef7@body) oR3ee1@x)))) (oR3eca@gen-clause oR3ee1@x oR3ee2@keys (cdr oR3ee3@clauses) oR3ee4@r oR3ee5@mr oR3eef@pat '#t oR3ef0@expr))) oR3eed@ls/false) (let ((oR3ef9@t oR3eeb@t)) (let ((oR3efb@ls/false (oR30f2@syntax-dispatch oR3ef9@t '(any any any)))) (if oR3efb@ls/false (apply (lambda (oR3efd@pat oR3efe@fender oR3eff@expr) (oR3eca@gen-clause oR3ee1@x oR3ee2@keys (cdr oR3ee3@clauses) oR3ee4@r oR3ee5@mr oR3efd@pat oR3efe@fender oR3eff@expr)) oR3efb@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3ef9@t)))))))))) (lambda (oR3ecd@e oR3ece@r oR3ecf@mr) (let ((oR3ed3@t oR3ecd@e)) (let ((oR3ed5@ls/false (oR30f2@syntax-dispatch oR3ed3@t '(_ any each-any . each-any)))) (if oR3ed5@ls/false (apply (lambda (oR3ed7@expr oR3ed8@keys oR3ed9@clauses) (begin (oR30f8@verify-literals oR3ed8@keys oR3ecd@e) (let ((oR3edd@x (oR2e73@gen-lexical 'tmp))) (let ((oR3edf@body (oR3ecc@gen-syntax-case oR3edd@x oR3ed8@keys oR3ed9@clauses oR3ece@r oR3ecf@mr))) (list (oR2e4e@oR2d7a@build-lambda '#f (list oR3edd@x) oR3edf@body) (oR3114@chi-expr oR3ed7@expr oR3ece@r oR3ecf@mr)))))) oR3ed5@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3ed3@t)))))))) (set! oR4bcc@oR30fa@syntax-case-transformer oR30fa@syntax-case-transformer) (set! oR30fc@ellipsis-map (lambda (oR3f51@proc oR3f52@ls . oR3f55@ls*) (let ((oR3f58@who '#f)) (begin (set! oR3f58@who '...) (begin (if (not (list? oR3f52@ls)) (assertion-violation oR3f58@who '"not a list" oR3f52@ls) (void)) (if (not (null? oR3f55@ls*)) (let ((oR3f59@n (length oR3f52@ls))) (for-each (lambda (oR3f5b@x) (begin (if (not (list? oR3f5b@x)) (assertion-violation oR3f58@who '"not a list" oR3f5b@x) (void)) (if (not (= (length oR3f5b@x) oR3f59@n)) (assertion-violation oR3f58@who '"length mismatch" oR3f52@ls oR3f5b@x) (void)))) oR3f55@ls*)) (void)) (apply map oR3f51@proc oR3f52@ls oR3f55@ls*)))))) (set! oR4bcd@oR30fc@ellipsis-map oR30fc@ellipsis-map) (set! oR30fe@syntax-transformer (let ((oR3f5e@gen-syntax '#f) (oR3f60@gen-ref '#f) (oR3f62@gen-append '#f) (oR3f64@gen-mappend '#f) (oR3f66@gen-map '#f) (oR3f68@gen-cons '#f) (oR3f6a@gen-vector '#f) (oR3f6c@regen '#f)) (begin (set! oR3f5e@gen-syntax (lambda (oR3fd5@src oR3fd6@e oR3fd7@r oR3fd8@maps oR3fd9@ellipsis? oR3fda@vec?) (let ((oR3fe1@t oR3fd6@e)) (let ((oR3fe3@ls/false (oR30f2@syntax-dispatch oR3fe1@t 'any))) (if (and oR3fe3@ls/false (apply (lambda (oR3fe5@dots) (oR3fd9@ellipsis? oR3fe5@dots)) oR3fe3@ls/false)) (apply (lambda (oR3fe7@dots) (oR31d2@syntax-violation '#f '"misplaced ellipsis in syntax form" oR3fd5@src)) oR3fe3@ls/false) (let ((oR3fe9@t oR3fe1@t)) (let ((oR3feb@ls/false (oR30f2@syntax-dispatch oR3fe9@t 'any))) (if (and oR3feb@ls/false (apply (lambda (oR3fed@id) (oR2eeb@id? oR3fed@id)) oR3feb@ls/false)) (apply (lambda (oR3fef@id) (let ((oR3ff1@label (oR2f01@id->label oR3fd6@e))) (let ((oR3ff3@b (oR2f03@label->binding oR3ff1@label oR3fd7@r))) (if (eq? (oR2f07@binding-type oR3ff3@b) 'syntax) (call-with-values (lambda () (let ((oR3ff9@var.lev (oR2f09@binding-value oR3ff3@b))) (oR3f60@gen-ref oR3fd5@src (car oR3ff9@var.lev) (cdr oR3ff9@var.lev) oR3fd8@maps))) (lambda (oR3ffb@oR3ff6 oR3ffc@oR3ff8) (let ((oR3fff@maps oR3ffc@oR3ff8) (oR4000@var oR3ffb@oR3ff6)) (values (list 'ref oR4000@var) oR3fff@maps)))) (values (list 'quote oR3fd6@e) oR3fd8@maps))))) oR3feb@ls/false) (let ((oR4003@t oR3fe9@t)) (let ((oR4005@ls/false (oR30f2@syntax-dispatch oR4003@t '(any any)))) (if (and oR4005@ls/false (apply (lambda (oR4007@dots oR4008@e) (oR3fd9@ellipsis? oR4007@dots)) oR4005@ls/false)) (apply (lambda (oR400b@dots oR400c@e) (if oR3fda@vec? (oR31d2@syntax-violation '#f '"misplaced ellipsis in syntax form" oR3fd5@src) (oR3f5e@gen-syntax oR3fd5@src oR400c@e oR3fd7@r oR3fd8@maps (lambda (oR400f@x) '#f) '#f))) oR4005@ls/false) (let ((oR4011@t oR4003@t)) (let ((oR4013@ls/false (oR30f2@syntax-dispatch oR4011@t '(any any . any)))) (if (and oR4013@ls/false (apply (lambda (oR4015@x oR4016@dots oR4017@y) (oR3fd9@ellipsis? oR4016@dots)) oR4013@ls/false)) (apply (lambda (oR401b@x oR401c@dots oR401d@y) (let oR4033@f ((oR4021@y oR401d@y) (oR4022@k (lambda (oR4025@maps) (call-with-values (lambda () (oR3f5e@gen-syntax oR3fd5@src oR401b@x oR3fd7@r (cons '() oR4025@maps) oR3fd9@ellipsis? '#f)) (lambda (oR402b@oR4028 oR402c@oR402a) (let ((oR402f@maps oR402c@oR402a) (oR4030@x oR402b@oR4028)) (if (null? (car oR402f@maps)) (oR31d2@syntax-violation '#f '"extra ellipsis in syntax form" oR3fd5@src) (values (oR3f66@gen-map oR4030@x (car oR402f@maps)) (cdr oR402f@maps))))))))) (let ((oR4035@t oR4021@y)) (let ((oR4037@ls/false (oR30f2@syntax-dispatch oR4035@t '()))) (if oR4037@ls/false (apply (lambda () (oR4022@k oR3fd8@maps)) oR4037@ls/false) (let ((oR4039@t oR4035@t)) (let ((oR403b@ls/false (oR30f2@syntax-dispatch oR4039@t '(any . any)))) (if (and oR403b@ls/false (apply (lambda (oR403d@dots oR403e@y) (oR3fd9@ellipsis? oR403d@dots)) oR403b@ls/false)) (apply (lambda (oR4041@dots oR4042@y) (oR4033@f oR4042@y (lambda (oR4045@maps) (call-with-values (lambda () (oR4022@k (cons '() oR4045@maps))) (lambda (oR404b@oR4048 oR404c@oR404a) (let ((oR404f@maps oR404c@oR404a) (oR4050@x oR404b@oR4048)) (if (null? (car oR404f@maps)) (oR31d2@syntax-violation '#f '"extra ellipsis in syntax form" oR3fd5@src) (values (oR3f64@gen-mappend oR4050@x (car oR404f@maps)) (cdr oR404f@maps))))))))) oR403b@ls/false) (let ((oR4053@t oR4039@t)) (let ((oR4055@ls/false (oR30f2@syntax-dispatch oR4053@t '_))) (if oR4055@ls/false (apply (lambda () (call-with-values (lambda () (oR3f5e@gen-syntax oR3fd5@src oR4021@y oR3fd7@r oR3fd8@maps oR3fd9@ellipsis? oR3fda@vec?)) (lambda (oR405b@oR4058 oR405c@oR405a) (let ((oR405f@maps oR405c@oR405a) (oR4060@y oR405b@oR4058)) (call-with-values (lambda () (oR4022@k oR405f@maps)) (lambda (oR4067@oR4064 oR4068@oR4066) (let ((oR406b@maps oR4068@oR4066) (oR406c@x oR4067@oR4064)) (values (oR3f62@gen-append oR406c@x oR4060@y) oR406b@maps)))))))) oR4055@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4053@t)))))))))))) oR4013@ls/false) (let ((oR406f@t oR4011@t)) (let ((oR4071@ls/false (oR30f2@syntax-dispatch oR406f@t '(any . any)))) (if oR4071@ls/false (apply (lambda (oR4073@x oR4074@y) (call-with-values (lambda () (oR3f5e@gen-syntax oR3fd5@src oR4073@x oR3fd7@r oR3fd8@maps oR3fd9@ellipsis? '#f)) (lambda (oR407b@oR4078 oR407c@oR407a) (let ((oR407f@maps oR407c@oR407a) (oR4080@xnew oR407b@oR4078)) (call-with-values (lambda () (oR3f5e@gen-syntax oR3fd5@src oR4074@y oR3fd7@r oR407f@maps oR3fd9@ellipsis? oR3fda@vec?)) (lambda (oR4087@oR4084 oR4088@oR4086) (let ((oR408b@maps oR4088@oR4086) (oR408c@ynew oR4087@oR4084)) (values (oR3f68@gen-cons oR3fd6@e oR4073@x oR4074@y oR4080@xnew oR408c@ynew) oR408b@maps)))))))) oR4071@ls/false) (let ((oR408f@t oR406f@t)) (let ((oR4091@ls/false (oR30f2@syntax-dispatch oR408f@t '#(vector each-any)))) (if oR4091@ls/false (apply (lambda (oR4093@ls) (call-with-values (lambda () (oR3f5e@gen-syntax oR3fd5@src oR4093@ls oR3fd7@r oR3fd8@maps oR3fd9@ellipsis? '#t)) (lambda (oR4099@oR4096 oR409a@oR4098) (let ((oR409d@maps oR409a@oR4098) (oR409e@lsnew oR4099@oR4096)) (values (oR3f6a@gen-vector oR3fd6@e oR4093@ls oR409e@lsnew) oR409d@maps))))) oR4091@ls/false) (let ((oR40a1@t oR408f@t)) (let ((oR40a3@ls/false (oR30f2@syntax-dispatch oR40a1@t '_))) (if oR40a3@ls/false (apply (lambda () (values (list 'quote oR3fd6@e) oR3fd8@maps)) oR40a3@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR40a1@t)))))))))))))))))))))))) (set! oR3f60@gen-ref (lambda (oR3fbb@src oR3fbc@var oR3fbd@level oR3fbe@maps) (if (= oR3fbd@level '0) (values oR3fbc@var oR3fbe@maps) (if (null? oR3fbe@maps) (oR31d2@syntax-violation '#f '"missing ellipsis in syntax form" oR3fbb@src) (call-with-values (lambda () (oR3f60@gen-ref oR3fbb@src oR3fbc@var (- oR3fbd@level '1) (cdr oR3fbe@maps))) (lambda (oR3fc7@oR3fc4 oR3fc8@oR3fc6) (let ((oR3fcb@outer-maps oR3fc8@oR3fc6) (oR3fcc@outer-var oR3fc7@oR3fc4)) (let ((oR3fcf@t (assq oR3fcc@outer-var (car oR3fbe@maps)))) (if oR3fcf@t ((lambda (oR3fd1@b) (values (cdr oR3fd1@b) oR3fbe@maps)) oR3fcf@t) (let ((oR3fd3@inner-var (oR2e73@gen-lexical 'tmp))) (values oR3fd3@inner-var (cons (cons (cons oR3fcc@outer-var oR3fd3@inner-var) (car oR3fbe@maps)) oR3fcb@outer-maps)))))))))))) (set! oR3f62@gen-append (lambda (oR3fb7@x oR3fb8@y) (if (fast-equal? oR3fb8@y ''()) oR3fb7@x (list 'append oR3fb7@x oR3fb8@y)))) (set! oR3f64@gen-mappend (lambda (oR3fb3@e oR3fb4@map-env) (list 'apply '(primitive append) (oR3f66@gen-map oR3fb3@e oR3fb4@map-env)))) (set! oR3f66@gen-map (lambda (oR3fa1@e oR3fa2@map-env) (let ((oR3fa5@formals (map cdr oR3fa2@map-env)) (oR3fa6@actuals (map (lambda (oR3fa9@x) (list 'ref (car oR3fa9@x))) oR3fa2@map-env))) (if (eq? (car oR3fa1@e) 'ref) (car oR3fa6@actuals) (if (for-all (lambda (oR3fab@x) (and (eq? (car oR3fab@x) 'ref) (memq (cadr oR3fab@x) oR3fa5@formals))) (cdr oR3fa1@e)) (let ((oR3fad@args (map (let ((oR3faf@r (map cons oR3fa5@formals oR3fa6@actuals))) (lambda (oR3fb1@x) (cdr (assq (cadr oR3fb1@x) oR3faf@r)))) (cdr oR3fa1@e)))) (cons 'map (cons (list 'primitive (car oR3fa1@e)) oR3fad@args))) (cons* 'map (list 'lambda oR3fa5@formals oR3fa1@e) oR3fa6@actuals)))))) (set! oR3f68@gen-cons (lambda (oR3f91@e oR3f92@x oR3f93@y oR3f94@xnew oR3f95@ynew) (let ((oR3f9b@t (car oR3f95@ynew))) (if (memv oR3f9b@t '(quote)) (if (eq? (car oR3f94@xnew) 'quote) (let ((oR3f9d@xnew (cadr oR3f94@xnew)) (oR3f9e@ynew (cadr oR3f95@ynew))) (if (and (eq? oR3f9d@xnew oR3f92@x) (eq? oR3f9e@ynew oR3f93@y)) (list 'quote oR3f91@e) (list 'quote (cons oR3f9d@xnew oR3f9e@ynew)))) (if (null? (cadr oR3f95@ynew)) (list 'list oR3f94@xnew) (list 'cons oR3f94@xnew oR3f95@ynew))) (if (memv oR3f9b@t '(list)) (cons 'list (cons oR3f94@xnew (cdr oR3f95@ynew))) (list 'cons oR3f94@xnew oR3f95@ynew)))))) (set! oR3f6a@gen-vector (lambda (oR3f8b@e oR3f8c@ls oR3f8d@lsnew) (if (eq? (car oR3f8d@lsnew) 'quote) (if (eq? (cadr oR3f8d@lsnew) oR3f8c@ls) (list 'quote oR3f8b@e) (list 'quote (list->vector (cadr oR3f8d@lsnew)))) (if (eq? (car oR3f8d@lsnew) 'list) (cons 'vector (cdr oR3f8d@lsnew)) (list 'list->vector oR3f8d@lsnew))))) (set! oR3f6c@regen (lambda (oR3f85@x) (let ((oR3f87@t (car oR3f85@x))) (if (memv oR3f87@t '(ref)) (cadr oR3f85@x) (if (memv oR3f87@t '(primitive)) (list 'primitive (cadr oR3f85@x)) (if (memv oR3f87@t '(quote)) (list 'quote (cadr oR3f85@x)) (if (memv oR3f87@t '(lambda)) (oR2e4e@oR2d7a@build-lambda '#f (cadr oR3f85@x) (oR3f6c@regen (caddr oR3f85@x))) (if (memv oR3f87@t '(map)) (let ((oR3f89@ls (map oR3f6c@regen (cdr oR3f85@x)))) (cons '(primitive ellipsis-map) oR3f89@ls)) (cons (list 'primitive (car oR3f85@x)) (map oR3f6c@regen (cdr oR3f85@x))))))))))) (lambda (oR3f6d@e oR3f6e@r oR3f6f@mr) (let ((oR3f73@t oR3f6d@e)) (let ((oR3f75@ls/false (oR30f2@syntax-dispatch oR3f73@t '(_ any)))) (if oR3f75@ls/false (apply (lambda (oR3f77@x) (call-with-values (lambda () (oR3f5e@gen-syntax oR3f6d@e oR3f77@x oR3f6e@r '() oR30f4@ellipsis? '#f)) (lambda (oR3f7d@oR3f7a oR3f7e@oR3f7c) (let ((oR3f81@maps oR3f7e@oR3f7c) (oR3f82@e oR3f7d@oR3f7a)) (oR3f6c@regen oR3f82@e))))) oR3f75@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR3f73@t)))))))) (set! oR4bce@oR30fe@syntax-transformer oR30fe@syntax-transformer) (set! oR3100@core-macro-transformer (lambda (oR40a5@name) (let ((oR40a7@t oR40a5@name)) (if (memv oR40a7@t '(quote)) oR30a2@quote-transformer (if (memv oR40a7@t '(lambda)) oR30a6@lambda-transformer (if (memv oR40a7@t '(case-lambda)) oR30a4@case-lambda-transformer (if (memv oR40a7@t '(letrec)) oR308a@letrec-transformer (if (memv oR40a7@t '(letrec*)) oR308c@letrec*-transformer (if (memv oR40a7@t '(let)) oR3088@let-transformer (if (memv oR40a7@t '(if)) oR309a@if-transformer (if (memv oR40a7@t '(and)) oR309c@and-transformer (if (memv oR40a7@t '(or)) oR309e@or-transformer (if (memv oR40a7@t '(foreign-call)) oR30ee@foreign-call-transformer (if (memv oR40a7@t '(syntax-case)) oR30fa@syntax-case-transformer (if (memv oR40a7@t '(syntax)) oR30fe@syntax-transformer (if (memv oR40a7@t '(type-descriptor)) oR3090@type-descriptor-transformer (if (memv oR40a7@t '(record-type-descriptor)) oR3092@record-type-descriptor-transformer (if (memv oR40a7@t '(record-constructor-descriptor)) oR3094@record-constructor-descriptor-transformer (if (memv oR40a7@t '(fluid-let-syntax)) oR308e@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" oR40a5@name)))))))))))))))))))) (set! oR4bcf@oR3100@core-macro-transformer oR3100@core-macro-transformer) (set! oR3102@symbol-macro (lambda (oR40a9@x oR40aa@set) (let ((oR40ad@t oR40a9@x)) (let ((oR40af@ls/false (oR30f2@syntax-dispatch oR40ad@t '(_ any)))) (if (and oR40af@ls/false (apply (lambda (oR40b1@name) (and (oR2eeb@id? oR40b1@name) (memq (oR2eed@id->sym oR40b1@name) oR40aa@set))) oR40af@ls/false)) (apply (lambda (oR40b3@name) (oR30a8@bless (list 'quote oR40b3@name))) oR40af@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR40ad@t)))))) (set! oR4bd0@oR3102@symbol-macro oR3102@symbol-macro) (set! oR3104@macro-transformer (lambda (oR40b5@x) (if (procedure? oR40b5@x) oR40b5@x (if (symbol? oR40b5@x) (let ((oR40b7@t oR40b5@x)) (if (memv oR40b7@t '(define-record-type)) oR30e6@define-record-type-macro (if (memv oR40b7@t '(define-struct)) oR30e4@define-struct-macro (if (memv oR40b7@t '(include)) oR30da@include-macro (if (memv oR40b7@t '(cond)) oR30d6@cond-macro (if (memv oR40b7@t '(let)) oR30ae@let-macro (if (memv oR40b7@t '(do)) oR30ce@do-macro (if (memv oR40b7@t '(or)) oR30d2@or-macro (if (memv oR40b7@t '(and)) oR30d4@and-macro (if (memv oR40b7@t '(let*)) oR30d0@let*-macro (if (memv oR40b7@t '(let-values)) oR30b0@let-values-macro (if (memv oR40b7@t '(let*-values)) oR30b2@let*-values-macro (if (memv oR40b7@t '(syntax-rules)) oR30de@syntax-rules-macro (if (memv oR40b7@t '(quasiquote)) oR30e0@quasiquote-macro (if (memv oR40b7@t '(quasisyntax)) oR30e2@quasisyntax-macro (if (memv oR40b7@t '(with-syntax)) oR30aa@with-syntax-macro (if (memv oR40b7@t '(when)) oR3096@when-macro (if (memv oR40b7@t '(unless)) oR3098@unless-macro (if (memv oR40b7@t '(case)) oR30a0@case-macro (if (memv oR40b7@t '(identifier-syntax)) oR30cc@identifier-syntax-macro (if (memv oR40b7@t '(time)) oR30c4@time-macro (if (memv oR40b7@t '(delay)) oR30c6@delay-macro (if (memv oR40b7@t '(assert)) oR30c8@assert-macro (if (memv oR40b7@t '(endianness)) oR30ca@endianness-macro (if (memv oR40b7@t '(guard)) oR30c0@guard-macro (if (memv oR40b7@t '(define-enumeration)) oR30c2@define-enumeration-macro (if (memv oR40b7@t '(trace-lambda)) oR30b4@trace-lambda-macro (if (memv oR40b7@t '(trace-define)) oR30b6@trace-define-macro (if (memv oR40b7@t '(trace-define-syntax)) oR30b8@trace-define-syntax-macro (if (memv oR40b7@t '(trace-let-syntax)) oR30bc@trace-let-syntax-macro (if (memv oR40b7@t '(trace-letrec-syntax)) oR30be@trace-letrec-syntax-macro (if (memv oR40b7@t '(define-condition-type)) oR30e8@define-condition-type-macro (if (memv oR40b7@t '(parameterize)) oR30ec@parameterize-macro (if (memv oR40b7@t '(include-into)) oR30dc@include-into-macro (if (memv oR40b7@t '(eol-style)) (lambda (oR40b9@x) (oR3102@symbol-macro oR40b9@x '(none lf cr crlf nel crnel ls))) (if (memv oR40b7@t '(error-handling-mode)) (lambda (oR40bb@x) (oR3102@symbol-macro oR40bb@x '(ignore raise replace))) (if (memv oR40b7@t '(buffer-mode)) (lambda (oR40bd@x) (oR3102@symbol-macro oR40bd@x '(none line block))) (if (memv oR40b7@t '(file-options)) oR2e66@file-options-macro (if (memv oR40b7@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) oR30ea@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" oR40b5@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" oR40b5@x))))) (set! oR4bd1@oR3104@macro-transformer oR3104@macro-transformer) (set! oR3106@local-macro-transformer (lambda (oR40bf@x) (car oR40bf@x))) (set! oR4bd2@oR3106@local-macro-transformer oR3106@local-macro-transformer) (set! oR3108@do-macro-call (lambda (oR40c1@transformer oR40c2@expr) (let ((oR40c5@out (oR40c1@transformer (oR2ed5@add-mark oR2ecf@anti-mark oR40c2@expr '#f)))) (begin (let oR40c9@f ((oR40c7@x oR40c5@out)) (if (not (oR2eb7@stx? oR40c7@x)) (if (pair? oR40c7@x) (begin (oR40c9@f (car oR40c7@x)) (oR40c9@f (cdr oR40c7@x))) (if (vector? oR40c7@x) (vector-for-each oR40c9@f oR40c7@x) (if (symbol? oR40c7@x) (oR31d2@syntax-violation '#f '"raw symbol encountered in output of macro" oR40c2@expr oR40c7@x) (void)))) (void))) (oR2ed5@add-mark (oR2ecd@gen-mark) oR40c5@out oR40c2@expr))))) (set! oR4bd3@oR3108@do-macro-call oR3108@do-macro-call) (set! oR310a@chi-macro (lambda (oR40cb@p oR40cc@e) (oR3108@do-macro-call (oR3104@macro-transformer oR40cb@p) oR40cc@e))) (set! oR4bd4@oR310a@chi-macro oR310a@chi-macro) (set! oR310c@chi-local-macro (lambda (oR40cf@p oR40d0@e) (oR3108@do-macro-call (oR3106@local-macro-transformer oR40cf@p) oR40d0@e))) (set! oR4bd5@oR310c@chi-local-macro oR310c@chi-local-macro) (set! oR310e@chi-global-macro (lambda (oR40d3@p oR40d4@e) (let ((oR40d7@lib (car oR40d3@p)) (oR40d8@loc (cdr oR40d3@p))) (begin (oR2d01@oR2b40@visit-library oR40d7@lib) (let ((oR40db@x (symbol-value oR40d8@loc))) (let ((oR40dd@transformer (if (procedure? oR40db@x) oR40db@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" oR40db@x)))) (oR3108@do-macro-call oR40dd@transformer oR40d4@e))))))) (set! oR4bd6@oR310e@chi-global-macro oR310e@chi-global-macro) (set! oR3110@chi-expr* (lambda (oR40df@e* oR40e0@r oR40e1@mr) (if (null? oR40df@e*) '() (let ((oR40e5@e (oR3114@chi-expr (car oR40df@e*) oR40e0@r oR40e1@mr))) (cons oR40e5@e (oR3110@chi-expr* (cdr oR40df@e*) oR40e0@r oR40e1@mr)))))) (set! oR4bd7@oR3110@chi-expr* oR3110@chi-expr*) (set! oR3112@chi-application (lambda (oR40e7@e oR40e8@r oR40e9@mr) (let ((oR40ed@t oR40e7@e)) (let ((oR40ef@ls/false (oR30f2@syntax-dispatch oR40ed@t '(any . each-any)))) (if oR40ef@ls/false (apply (lambda (oR40f1@rator oR40f2@rands) (let ((oR40f5@rator (oR3114@chi-expr oR40f1@rator oR40e8@r oR40e9@mr))) (cons oR40f5@rator (oR3110@chi-expr* oR40f2@rands oR40e8@r oR40e9@mr)))) oR40ef@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR40ed@t)))))) (set! oR4bd8@oR3112@chi-application oR3112@chi-application) (set! oR3114@chi-expr (lambda (oR40f7@e oR40f8@r oR40f9@mr) (call-with-values (lambda () (oR2f0d@syntax-type oR40f7@e oR40f8@r)) (lambda (oR4103@oR40fe oR4104@oR4100 oR4105@oR4102) (let ((oR4109@kwd oR4105@oR4102) (oR410a@value oR4104@oR4100) (oR410b@type oR4103@oR40fe)) (let ((oR410f@t oR410b@type)) (if (memv oR410f@t '(core-macro)) (let ((oR4111@transformer (oR3100@core-macro-transformer oR410a@value))) (oR4111@transformer oR40f7@e oR40f8@r oR40f9@mr)) (if (memv oR410f@t '(global)) (let ((oR4113@lib (car oR410a@value))) (let ((oR4115@loc (cdr oR410a@value))) (begin ((oR315a@inv-collector) oR4113@lib) oR4115@loc))) (if (memv oR410f@t '(core-prim)) (let ((oR4117@name oR410a@value)) (list 'primitive oR4117@name)) (if (memv oR410f@t '(call)) (oR3112@chi-application oR40f7@e oR40f8@r oR40f9@mr) (if (memv oR410f@t '(lexical)) (let ((oR4119@lex (oR307c@lexical-var oR410a@value))) oR4119@lex) (if (memv oR410f@t '(global-macro global-macro!)) (oR3114@chi-expr (oR310e@chi-global-macro oR410a@value oR40f7@e) oR40f8@r oR40f9@mr) (if (memv oR410f@t '(local-macro local-macro!)) (oR3114@chi-expr (oR310c@chi-local-macro oR410a@value oR40f7@e) oR40f8@r oR40f9@mr) (if (memv oR410f@t '(macro macro!)) (oR3114@chi-expr (oR310a@chi-macro oR410a@value oR40f7@e) oR40f8@r oR40f9@mr) (if (memv oR410f@t '(constant)) (let ((oR411b@datum oR410a@value)) (list 'quote oR411b@datum)) (if (memv oR410f@t '(set!)) (oR3116@chi-set! oR40f7@e oR40f8@r oR40f9@mr) (if (memv oR410f@t '(begin)) (let ((oR411d@t oR40f7@e)) (let ((oR411f@ls/false (oR30f2@syntax-dispatch oR411d@t '(_ any . each-any)))) (if oR411f@ls/false (apply (lambda (oR4121@x oR4122@x*) (oR2e50@oR2daa@build-sequence '#f (oR3110@chi-expr* (cons oR4121@x oR4122@x*) oR40f8@r oR40f9@mr))) oR411f@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR411d@t)))) (if (memv oR410f@t '(let-syntax letrec-syntax)) (let ((oR4125@t oR40f7@e)) (let ((oR4127@ls/false (oR30f2@syntax-dispatch oR4125@t '(_ #(each (any any)) any . each-any)))) (if (and oR4127@ls/false (apply (lambda (oR4129@xlhs* oR412a@xrhs* oR412b@xbody oR412c@xbody*) (if (not (oR2ef3@valid-bound-ids? oR4129@xlhs*)) (oR31d2@syntax-violation '#f '"invalid identifiers" oR40f7@e) (void))) oR4127@ls/false)) (apply (lambda (oR4131@xlhs* oR4132@xrhs* oR4133@xbody oR4134@xbody*) (let ((oR4139@xlab* (map oR2e77@gen-label oR4131@xlhs*))) (let ((oR413b@xrib (oR2eab@make-full-rib oR4131@xlhs* oR4139@xlab*))) (let ((oR413d@xb* (map (lambda (oR413f@x) (oR2f23@make-eval-transformer (oR314c@expand-transformer (if (eq? oR410b@type 'let-syntax) oR413f@x (oR2ed7@add-subst oR413b@xrib oR413f@x)) oR40f9@mr))) oR4132@xrhs*))) (oR2e50@oR2daa@build-sequence '#f (oR3110@chi-expr* (map (lambda (oR4141@x) (oR2ed7@add-subst oR413b@xrib oR4141@x)) (cons oR4133@xbody oR4134@xbody*)) (append (map cons oR4139@xlab* oR413d@xb*) oR40f8@r) (append (map cons oR4139@xlab* oR413d@xb*) oR40f9@mr))))))) oR4127@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4125@t)))) (if (memv oR410f@t '(displaced-lexical)) (oR31d2@syntax-violation '#f '"identifier out of context" oR40f7@e) (if (memv oR410f@t '(syntax)) (oR31d2@syntax-violation '#f '"reference to pattern variable outside a syntax form" oR40f7@e) (if (memv oR410f@t '(define define-syntax module import library)) (oR31d2@syntax-violation '#f (string-append (let ((oR4143@t oR410b@type)) (if (memv oR4143@t '(define)) '"a definition" (if (memv oR4143@t '(define-syntax)) '"a define-syntax" (if (memv oR4143@t '(module)) '"a module definition" (if (memv oR4143@t '(library)) '"a library definition" (if (memv oR4143@t '(import)) '"an import declaration" (if (memv oR4143@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") oR40f7@e) (if (memv oR410f@t '(mutable)) (oR31d2@syntax-violation '#f '"attempt to reference an unexportable variable" oR40f7@e) (oR31d2@syntax-violation '#f '"invalid expression" oR40f7@e))))))))))))))))))))))) (set! oR4bd9@oR3114@chi-expr oR3114@chi-expr) (set! oR3116@chi-set! (lambda (oR4145@e oR4146@r oR4147@mr) (let ((oR414b@t oR4145@e)) (let ((oR414d@ls/false (oR30f2@syntax-dispatch oR414b@t '(_ any any)))) (if (and oR414d@ls/false (apply (lambda (oR414f@x oR4150@v) (oR2eeb@id? oR414f@x)) oR414d@ls/false)) (apply (lambda (oR4153@x oR4154@v) (call-with-values (lambda () (oR2f0d@syntax-type oR4153@x oR4146@r)) (lambda (oR415d@oR4158 oR415e@oR415a oR415f@oR415c) (let ((oR4163@kwd oR415f@oR415c) (oR4164@value oR415e@oR415a) (oR4165@type oR415d@oR4158)) (let ((oR4169@t oR4165@type)) (if (memv oR4169@t '(lexical)) (begin (oR3080@set-lexical-mutable! oR4164@value '#t) (list 'set! (oR307c@lexical-var oR4164@value) (oR3114@chi-expr oR4154@v oR4146@r oR4147@mr))) (if (memv oR4169@t '(core-prim)) (oR31d2@syntax-violation '#f '"cannot modify imported core primitive" oR4145@e) (if (memv oR4169@t '(global)) (oR31d2@syntax-violation '#f '"attempt to modify imported binding" oR4145@e) (if (memv oR4169@t '(global-macro!)) (oR3114@chi-expr (oR310e@chi-global-macro oR4164@value oR4145@e) oR4146@r oR4147@mr) (if (memv oR4169@t '(local-macro!)) (oR3114@chi-expr (oR310c@chi-local-macro oR4164@value oR4145@e) oR4146@r oR4147@mr) (if (memv oR4169@t '(mutable)) (oR31d2@syntax-violation '#f '"attempt to assign to an unexportable variable" oR4145@e) (oR31d2@syntax-violation '#f '"invalid syntax" oR4145@e)))))))))))) oR414d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR414b@t)))))) (set! oR4bda@oR3116@chi-set! oR3116@chi-set!) (set! oR3118@verify-formals (lambda (oR416b@fmls oR416c@stx) (let ((oR416f@t oR416b@fmls)) (let ((oR4171@ls/false (oR30f2@syntax-dispatch oR416f@t 'each-any))) (if oR4171@ls/false (apply (lambda (oR4173@x*) (if (not (oR2ef3@valid-bound-ids? oR4173@x*)) (oR30ac@invalid-fmls-error oR416c@stx oR416b@fmls) (void))) oR4171@ls/false) (let ((oR4175@t oR416f@t)) (let ((oR4177@ls/false (oR30f2@syntax-dispatch oR4175@t '#(each+ any () any)))) (if oR4177@ls/false (apply (lambda (oR4179@x* oR417a@x) (if (not (oR2ef3@valid-bound-ids? (cons oR417a@x oR4179@x*))) (oR30ac@invalid-fmls-error oR416c@stx oR416b@fmls) (void))) oR4177@ls/false) (let ((oR417d@t oR4175@t)) (let ((oR417f@ls/false (oR30f2@syntax-dispatch oR417d@t '_))) (if oR417f@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid syntax" oR416c@stx)) oR417f@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR417d@t)))))))))))) (set! oR4bdb@oR3118@verify-formals oR3118@verify-formals) (set! oR311a@chi-lambda-clause (lambda (oR4181@stx oR4182@fmls oR4183@body* oR4184@r oR4185@mr) (let ((oR418b@t oR4182@fmls)) (let ((oR418d@ls/false (oR30f2@syntax-dispatch oR418b@t 'each-any))) (if oR418d@ls/false (apply (lambda (oR418f@x*) (begin (oR3118@verify-formals oR4182@fmls oR4181@stx) (let ((oR4191@lex* (map oR2e73@gen-lexical oR418f@x*)) (oR4192@lab* (map oR2e77@gen-label oR418f@x*))) (values oR4191@lex* (oR312a@chi-internal (oR2ed7@add-subst (oR2eab@make-full-rib oR418f@x* oR4192@lab*) oR4183@body*) (oR3084@add-lexicals oR4192@lab* oR4191@lex* oR4184@r) oR4185@mr))))) oR418d@ls/false) (let ((oR4195@t oR418b@t)) (let ((oR4197@ls/false (oR30f2@syntax-dispatch oR4195@t '#(each+ any () any)))) (if oR4197@ls/false (apply (lambda (oR4199@x* oR419a@x) (begin (oR3118@verify-formals oR4182@fmls oR4181@stx) (let ((oR419d@lex* (map oR2e73@gen-lexical oR4199@x*)) (oR419e@lab* (map oR2e77@gen-label oR4199@x*)) (oR419f@lex (oR2e73@gen-lexical oR419a@x)) (oR41a0@lab (oR2e77@gen-label oR419a@x))) (values (append oR419d@lex* oR419f@lex) (oR312a@chi-internal (oR2ed7@add-subst (oR2eab@make-full-rib (cons oR419a@x oR4199@x*) (cons oR41a0@lab oR419e@lab*)) oR4183@body*) (oR3084@add-lexicals (cons oR41a0@lab oR419e@lab*) (cons oR419f@lex oR419d@lex*) oR4184@r) oR4185@mr))))) oR4197@ls/false) (let ((oR41a5@t oR4195@t)) (let ((oR41a7@ls/false (oR30f2@syntax-dispatch oR41a5@t '_))) (if oR41a7@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid syntax" oR4182@fmls)) oR41a7@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR41a5@t)))))))))))) (set! oR4bdc@oR311a@chi-lambda-clause oR311a@chi-lambda-clause) (set! oR311c@chi-lambda-clause* (lambda (oR41a9@stx oR41aa@fmls* oR41ab@body** oR41ac@r oR41ad@mr) (if (null? oR41aa@fmls*) (values '() '()) (call-with-values (lambda () (oR311a@chi-lambda-clause oR41a9@stx (car oR41aa@fmls*) (car oR41ab@body**) oR41ac@r oR41ad@mr)) (lambda (oR41b7@oR41b4 oR41b8@oR41b6) (let ((oR41bb@b oR41b8@oR41b6) (oR41bc@a oR41b7@oR41b4)) (call-with-values (lambda () (oR311c@chi-lambda-clause* oR41a9@stx (cdr oR41aa@fmls*) (cdr oR41ab@body**) oR41ac@r oR41ad@mr)) (lambda (oR41c3@oR41c0 oR41c4@oR41c2) (let ((oR41c7@b* oR41c4@oR41c2) (oR41c8@a* oR41c3@oR41c0)) (values (cons oR41bc@a oR41c8@a*) (cons oR41bb@b oR41c7@b*))))))))))) (set! oR4bdd@oR311c@chi-lambda-clause* oR311c@chi-lambda-clause*) (set! oR311e@chi-defun (lambda (oR41cb@x oR41cc@r oR41cd@mr) (let ((oR41d1@fmls (car oR41cb@x)) (oR41d2@body* (cdr oR41cb@x))) (call-with-values (lambda () (oR311a@chi-lambda-clause oR41d1@fmls oR41d1@fmls oR41d2@body* oR41cc@r oR41cd@mr)) (lambda (oR41d9@oR41d6 oR41da@oR41d8) (let ((oR41dd@body oR41da@oR41d8) (oR41de@fmls oR41d9@oR41d6)) (oR2e4e@oR2d7a@build-lambda '#f oR41de@fmls oR41dd@body))))))) (set! oR4bde@oR311e@chi-defun oR311e@chi-defun) (set! oR3120@chi-rhs (lambda (oR41e1@rhs oR41e2@r oR41e3@mr) (let ((oR41e7@t (car oR41e1@rhs))) (if (memv oR41e7@t '(defun)) (oR311e@chi-defun (cdr oR41e1@rhs) oR41e2@r oR41e3@mr) (if (memv oR41e7@t '(expr)) (let ((oR41e9@expr (cdr oR41e1@rhs))) (oR3114@chi-expr oR41e9@expr oR41e2@r oR41e3@mr)) (if (memv oR41e7@t '(top-expr)) (let ((oR41eb@expr (cdr oR41e1@rhs))) (oR2e50@oR2daa@build-sequence '#f (list (oR3114@chi-expr oR41eb@expr oR41e2@r oR41e3@mr) (oR2e51@oR2dac@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" oR41e1@rhs))))))) (set! oR4bdf@oR3120@chi-rhs oR3120@chi-rhs) (set! oR3122@expand-interaction-rhs*/init* (lambda (oR41ed@lhs* oR41ee@rhs* oR41ef@init* oR41f0@r oR41f1@mr) (let oR41fb@f ((oR41f7@lhs* oR41ed@lhs*) (oR41f8@rhs* oR41ee@rhs*)) (if (null? oR41f7@lhs*) (map (lambda (oR41fd@x) (oR3114@chi-expr oR41fd@x oR41f0@r oR41f1@mr)) oR41ef@init*) (let ((oR41ff@lhs (car oR41f7@lhs*)) (oR4200@rhs (car oR41f8@rhs*))) (let ((oR4203@t (car oR4200@rhs))) (if (memv oR4203@t '(defun)) (let ((oR4205@rhs (oR311e@chi-defun (cdr oR4200@rhs) oR41f0@r oR41f1@mr))) (cons (list 'set! oR41ff@lhs oR4205@rhs) (oR41fb@f (cdr oR41f7@lhs*) (cdr oR41f8@rhs*)))) (if (memv oR4203@t '(expr)) (let ((oR4207@rhs (oR3114@chi-expr (cdr oR4200@rhs) oR41f0@r oR41f1@mr))) (cons (list 'set! oR41ff@lhs oR4207@rhs) (oR41fb@f (cdr oR41f7@lhs*) (cdr oR41f8@rhs*)))) (if (memv oR4203@t '(top-expr)) (let ((oR4209@e (oR3114@chi-expr (cdr oR4200@rhs) oR41f0@r oR41f1@mr))) (cons oR4209@e (oR41fb@f (cdr oR41f7@lhs*) (cdr oR41f8@rhs*)))) (error 'expand-interaction '"invallid" oR4200@rhs)))))))))) (set! oR4be0@oR3122@expand-interaction-rhs*/init* oR3122@expand-interaction-rhs*/init*) (set! oR3124@chi-rhs* (lambda (oR420b@rhs* oR420c@r oR420d@mr) (let oR4213@f ((oR4211@ls oR420b@rhs*)) (if (null? oR4211@ls) '() (let ((oR4215@a (oR3120@chi-rhs (car oR4211@ls) oR420c@r oR420d@mr))) (cons oR4215@a (oR4213@f (cdr oR4211@ls)))))))) (set! oR4be1@oR3124@chi-rhs* oR3124@chi-rhs*) (set! oR3126@find-bound=? (lambda (oR4217@x oR4218@lhs* oR4219@rhs*) (if (null? oR4218@lhs*) '#f (if (oR2eef@bound-id=? oR4217@x (car oR4218@lhs*)) (car oR4219@rhs*) (oR3126@find-bound=? oR4217@x (cdr oR4218@lhs*) (cdr oR4219@rhs*)))))) (set! oR4be2@oR3126@find-bound=? oR3126@find-bound=?) (set! oR3128@find-dups (lambda (oR421d@ls) (let oR4223@f ((oR421f@ls oR421d@ls) (oR4220@dups '())) (if (null? oR421f@ls) oR4220@dups (let ((oR4225@t (oR3126@find-bound=? (car oR421f@ls) (cdr oR421f@ls) (cdr oR421f@ls)))) (if oR4225@t ((lambda (oR4227@x) (oR4223@f (cdr oR421f@ls) (cons (list (car oR421f@ls) oR4227@x) oR4220@dups))) oR4225@t) (oR4223@f (cdr oR421f@ls) oR4220@dups))))))) (set! oR4be3@oR3128@find-dups oR3128@find-dups) (set! oR312a@chi-internal (lambda (oR4229@e* oR422a@r oR422b@mr) (let ((oR422f@rib (oR2e9f@make-empty-rib))) (call-with-values (lambda () (oR314a@chi-body* (map (lambda (oR4241@x) (oR2ed7@add-subst oR422f@rib oR4241@x)) (oR2ee9@syntax->list oR4229@e*)) oR422a@r oR422b@mr '() '() '() '() '() oR422f@rib '#f)) (lambda (oR4243@oR4232 oR4244@oR4234 oR4245@oR4236 oR4246@oR4238 oR4247@oR423a oR4248@oR423c oR4249@oR423e oR424a@oR4240) (let ((oR4253@_exp* oR424a@oR4240) (oR4254@kwd* oR4249@oR423e) (oR4255@mod** oR4248@oR423c) (oR4256@rhs* oR4247@oR423a) (oR4257@lex* oR4246@oR4238) (oR4258@mr oR4245@oR4236) (oR4259@r oR4244@oR4234) (oR425a@e* oR4243@oR4232)) (begin (if (null? oR425a@e*) (oR31d2@syntax-violation '#f '"no expression in body" oR425a@e*) (void)) (let ((oR4263@init* (oR3110@chi-expr* (append (apply append (reverse oR4255@mod**)) oR425a@e*) oR4259@r oR4258@mr))) (let ((oR4265@rhs* (oR3124@chi-rhs* oR4256@rhs* oR4259@r oR4258@mr))) (oR2e55@oR2db4@build-letrec* '#f (reverse oR4257@lex*) (reverse oR4265@rhs*) (oR2e50@oR2daa@build-sequence '#f oR4263@init*))))))))))) (set! oR4be4@oR312a@chi-internal oR312a@chi-internal) (set! oR312c@parse-module (lambda (oR4267@e) (let ((oR4269@t oR4267@e)) (let ((oR426b@ls/false (oR30f2@syntax-dispatch oR4269@t '(_ each-any . each-any)))) (if oR426b@ls/false (apply (lambda (oR426d@export* oR426e@b*) (begin (if (not (for-all oR2eeb@id? oR426d@export*)) (oR31d2@syntax-violation '#f '"module exports must be identifiers" oR4267@e) (void)) (values '#f (list->vector oR426d@export*) oR426e@b*))) oR426b@ls/false) (let ((oR4271@t oR4269@t)) (let ((oR4273@ls/false (oR30f2@syntax-dispatch oR4271@t '(_ any each-any . each-any)))) (if oR4273@ls/false (apply (lambda (oR4275@name oR4276@export* oR4277@b*) (begin (if (not (oR2eeb@id? oR4275@name)) (oR31d2@syntax-violation '#f '"module name must be an identifier" oR4267@e) (void)) (if (not (for-all oR2eeb@id? oR4276@export*)) (oR31d2@syntax-violation '#f '"module exports must be identifiers" oR4267@e) (void)) (values oR4275@name (list->vector oR4276@export*) oR4277@b*))) oR4273@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4271@t))))))))) (set! oR4be5@oR312c@parse-module oR312c@parse-module) (set! oR3136@module-interface? (lambda (oR427b@x) (and (simple-struct? oR427b@x) (eq? (simple-struct-name oR427b@x) 'module-interface)))) (set! oR4be6@oR3136@module-interface? oR3136@module-interface?) (set! oR3138@module-interface-first-mark (lambda (oR427d@x) (simple-struct-ref oR427d@x '0))) (set! oR4be7@oR3138@module-interface-first-mark oR3138@module-interface-first-mark) (set! oR313a@set-module-interface-first-mark! (lambda (oR427f@x oR4280@val) (simple-struct-set! oR427f@x '0 oR4280@val))) (set! oR4be8@oR313a@set-module-interface-first-mark! oR313a@set-module-interface-first-mark!) (set! oR313c@module-interface-exp-id-vec (lambda (oR4283@x) (simple-struct-ref oR4283@x '1))) (set! oR4be9@oR313c@module-interface-exp-id-vec oR313c@module-interface-exp-id-vec) (set! oR313e@set-module-interface-exp-id-vec! (lambda (oR4285@x oR4286@val) (simple-struct-set! oR4285@x '1 oR4286@val))) (set! oR4bea@oR313e@set-module-interface-exp-id-vec! oR313e@set-module-interface-exp-id-vec!) (set! oR3140@module-interface-exp-lab-vec (lambda (oR4289@x) (simple-struct-ref oR4289@x '2))) (set! oR4beb@oR3140@module-interface-exp-lab-vec oR3140@module-interface-exp-lab-vec) (set! oR3142@set-module-interface-exp-lab-vec! (lambda (oR428b@x oR428c@val) (simple-struct-set! oR428b@x '2 oR428c@val))) (set! oR4bec@oR3142@set-module-interface-exp-lab-vec! oR3142@set-module-interface-exp-lab-vec!) (set! oR3144@dummy '3) (set! oR4bed@oR3144@dummy oR3144@dummy) (set! oR3146@module-interface-exp-id* (lambda (oR428f@iface oR4290@id) (let ((oR4294@diff-marks '#f)) (begin (set! oR4294@diff-marks (lambda (oR429b@ls oR429c@x) (begin (if (null? oR429b@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((oR429f@a (car oR429b@ls))) (if (eq? oR429f@a oR429c@x) '() (cons oR429f@a (oR4294@diff-marks (cdr oR429b@ls) oR429c@x))))))) (let ((oR4295@diff (oR4294@diff-marks (oR2ebd@stx-mark* oR4290@id) (oR3138@module-interface-first-mark oR428f@iface))) (oR4296@id-vec (oR313c@module-interface-exp-id-vec oR428f@iface))) (if (null? oR4295@diff) oR4296@id-vec (vector-map (lambda (oR4299@x) (make-simple-struct 'stx '5 (list (oR2eb9@stx-expr oR4299@x) (append oR4295@diff (oR2ebd@stx-mark* oR4299@x)) '() '()))) oR4296@id-vec))))))) (set! oR4bee@oR3146@module-interface-exp-id* oR3146@module-interface-exp-id*) (set! oR3148@chi-internal-module (lambda (oR42a1@e oR42a2@r oR42a3@mr oR42a4@lex* oR42a5@rhs* oR42a6@mod** oR42a7@kwd*) (call-with-values (lambda () (oR312c@parse-module oR42a1@e)) (lambda (oR42b5@oR42b0 oR42b6@oR42b2 oR42b7@oR42b4) (let ((oR42bb@e* oR42b7@oR42b4) (oR42bc@exp-id* oR42b6@oR42b2) (oR42bd@name oR42b5@oR42b0)) (let ((oR42c1@rib (oR2e9f@make-empty-rib))) (let ((oR42c3@e* (map (lambda (oR42c5@x) (oR2ed7@add-subst oR42c1@rib oR42c5@x)) (oR2ee9@syntax->list oR42bb@e*)))) (call-with-values (lambda () (oR314a@chi-body* oR42c3@e* oR42a2@r oR42a3@mr oR42a4@lex* oR42a5@rhs* oR42a6@mod** oR42a7@kwd* '() oR42c1@rib '#f)) (lambda (oR42d7@oR42c8 oR42d8@oR42ca oR42d9@oR42cc oR42da@oR42ce oR42db@oR42d0 oR42dc@oR42d2 oR42dd@oR42d4 oR42de@oR42d6) (let ((oR42e7@_exp* oR42de@oR42d6) (oR42e8@kwd* oR42dd@oR42d4) (oR42e9@mod** oR42dc@oR42d2) (oR42ea@rhs* oR42db@oR42d0) (oR42eb@lex* oR42da@oR42ce) (oR42ec@mr oR42d9@oR42cc) (oR42ed@r oR42d8@oR42ca) (oR42ee@e* oR42d7@oR42c8)) (let ((oR42f7@exp-lab* (vector-map (lambda (oR42fb@x) (or (oR2f01@id->label (make-simple-struct 'stx '5 (list (oR2eed@id->sym oR42fb@x) (oR2ebd@stx-mark* oR42fb@x) (list oR42c1@rib) '()))) (oR31d2@syntax-violation '#f '"cannot find module export" oR42fb@x))) oR42bc@exp-id*)) (oR42f8@mod** (cons oR42ee@e* oR42e9@mod**))) (if (not oR42bd@name) (values oR42eb@lex* oR42ea@rhs* oR42bc@exp-id* oR42f7@exp-lab* oR42ed@r oR42ec@mr oR42f8@mod** oR42e8@kwd*) (let ((oR42fd@lab (oR2e77@gen-label 'module)) (oR42fe@iface (make-simple-struct 'module-interface '4 (list (car (oR2ebd@stx-mark* oR42bd@name)) (vector-map (lambda (oR4301@x) (make-simple-struct 'stx '5 (list (oR2eb9@stx-expr oR4301@x) (oR2ebd@stx-mark* oR4301@x) '() '()))) oR42bc@exp-id*) oR42f7@exp-lab*)))) (values oR42eb@lex* oR42ea@rhs* (vector oR42bd@name) (vector oR42fd@lab) (cons (cons oR42fd@lab (cons '$module oR42fe@iface)) oR42ed@r) (cons (cons oR42fd@lab (cons '$module oR42fe@iface)) oR42ec@mr) oR42f8@mod** oR42e8@kwd*)))))))))))))) (set! oR4bef@oR3148@chi-internal-module oR3148@chi-internal-module) (set! oR314a@chi-body* (lambda (oR4303@e* oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR4309@kwd* oR430a@exp* oR430b@rib oR430c@top?) (if (null? oR4303@e*) (values oR4303@e* oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR4309@kwd* oR430a@exp*) (let ((oR4317@e (car oR4303@e*))) (call-with-values (lambda () (oR2f0d@syntax-type oR4317@e oR4304@r)) (lambda (oR431f@oR431a oR4320@oR431c oR4321@oR431e) (let ((oR4325@kwd oR4321@oR431e) (oR4326@value oR4320@oR431c) (oR4327@type oR431f@oR431a)) (let ((oR432b@kwd* (if (oR2eeb@id? oR4325@kwd) (cons oR4325@kwd oR4309@kwd*) oR4309@kwd*))) (let ((oR432d@t oR4327@type)) (if (memv oR432d@t '(define)) (call-with-values (lambda () (oR3074@parse-define oR4317@e)) (lambda (oR4333@oR4330 oR4334@oR4332) (let ((oR4337@rhs oR4334@oR4332) (oR4338@id oR4333@oR4330)) (begin (if (oR2ef7@bound-id-member? oR4338@id oR432b@kwd*) (oR31d2@syntax-violation '#f '"cannot redefine keyword" oR4317@e) (void)) (call-with-values (lambda () (oR2e7b@gen-define-label+loc oR4338@id oR430b@rib)) (lambda (oR433f@oR433c oR4340@oR433e) (let ((oR4343@lex oR4340@oR433e) (oR4344@lab oR433f@oR433c)) (begin (oR2ea1@extend-rib! oR430b@rib oR4338@id oR4344@lab) (oR314a@chi-body* (cdr oR4303@e*) (oR3082@add-lexical oR4344@lab oR4343@lex oR4304@r) oR4305@mr (cons oR4343@lex oR4306@lex*) (cons oR4337@rhs oR4307@rhs*) oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?))))))))) (if (memv oR432d@t '(define-syntax)) (call-with-values (lambda () (oR3076@parse-define-syntax oR4317@e)) (lambda (oR434b@oR4348 oR434c@oR434a) (let ((oR434f@rhs oR434c@oR434a) (oR4350@id oR434b@oR4348)) (begin (if (oR2ef7@bound-id-member? oR4350@id oR432b@kwd*) (oR31d2@syntax-violation '#f '"cannot redefine keyword" oR4317@e) (void)) (let ((oR4353@lab (oR2e7d@gen-define-label oR4350@id oR430b@rib)) (oR4354@expanded-rhs (oR314c@expand-transformer oR434f@rhs oR4305@mr))) (begin (oR2ea1@extend-rib! oR430b@rib oR4350@id oR4353@lab) (let ((oR4357@b (oR2f23@make-eval-transformer oR4354@expanded-rhs))) (oR314a@chi-body* (cdr oR4303@e*) (cons (cons oR4353@lab oR4357@b) oR4304@r) (cons (cons oR4353@lab oR4357@b) oR4305@mr) oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?)))))))) (if (memv oR432d@t '(let-syntax letrec-syntax)) (let ((oR4359@t oR4317@e)) (let ((oR435b@ls/false (oR30f2@syntax-dispatch oR4359@t '(_ #(each (any any)) . each-any)))) (if (and oR435b@ls/false (apply (lambda (oR435d@xlhs* oR435e@xrhs* oR435f@xbody*) (if (not (oR2ef3@valid-bound-ids? oR435d@xlhs*)) (oR31d2@syntax-violation '#f '"invalid identifiers" oR4317@e) (void))) oR435b@ls/false)) (apply (lambda (oR4363@xlhs* oR4364@xrhs* oR4365@xbody*) (let ((oR4369@xlab* (map oR2e77@gen-label oR4363@xlhs*))) (let ((oR436b@xrib (oR2eab@make-full-rib oR4363@xlhs* oR4369@xlab*))) (let ((oR436d@xb* (map (lambda (oR436f@x) (oR2f23@make-eval-transformer (oR314c@expand-transformer (if (eq? oR4327@type 'let-syntax) oR436f@x (oR2ed7@add-subst oR436b@xrib oR436f@x)) oR4305@mr))) oR4364@xrhs*))) (oR314a@chi-body* (append (map (lambda (oR4371@x) (oR2ed7@add-subst oR436b@xrib oR4371@x)) oR4365@xbody*) (cdr oR4303@e*)) (append (map cons oR4369@xlab* oR436d@xb*) oR4304@r) (append (map cons oR4369@xlab* oR436d@xb*) oR4305@mr) oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?))))) oR435b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4359@t)))) (if (memv oR432d@t '(begin)) (let ((oR4373@t oR4317@e)) (let ((oR4375@ls/false (oR30f2@syntax-dispatch oR4373@t '(_ . each-any)))) (if oR4375@ls/false (apply (lambda (oR4377@x*) (oR314a@chi-body* (append oR4377@x* (cdr oR4303@e*)) oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?)) oR4375@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4373@t)))) (if (memv oR432d@t '(global-macro global-macro!)) (oR314a@chi-body* (cons (oR2ed7@add-subst oR430b@rib (oR310e@chi-global-macro oR4326@value oR4317@e)) (cdr oR4303@e*)) oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?) (if (memv oR432d@t '(local-macro local-macro!)) (oR314a@chi-body* (cons (oR2ed7@add-subst oR430b@rib (oR310c@chi-local-macro oR4326@value oR4317@e)) (cdr oR4303@e*)) oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?) (if (memv oR432d@t '(macro macro!)) (oR314a@chi-body* (cons (oR2ed7@add-subst oR430b@rib (oR310a@chi-macro oR4326@value oR4317@e)) (cdr oR4303@e*)) oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?) (if (memv oR432d@t '(module)) (call-with-values (lambda () (oR3148@chi-internal-module oR4317@e oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd*)) (lambda (oR4389@oR437a oR438a@oR437c oR438b@oR437e oR438c@oR4380 oR438d@oR4382 oR438e@oR4384 oR438f@oR4386 oR4390@oR4388) (let ((oR4399@kwd* oR4390@oR4388) (oR439a@mod** oR438f@oR4386) (oR439b@mr oR438e@oR4384) (oR439c@r oR438d@oR4382) (oR439d@m-exp-lab* oR438c@oR4380) (oR439e@m-exp-id* oR438b@oR437e) (oR439f@rhs* oR438a@oR437c) (oR43a0@lex* oR4389@oR437a)) (begin (vector-for-each (lambda (oR43a9@id oR43aa@lab) (oR2ea1@extend-rib! oR430b@rib oR43a9@id oR43aa@lab)) oR439e@m-exp-id* oR439d@m-exp-lab*) (oR314a@chi-body* (cdr oR4303@e*) oR439c@r oR439b@mr oR43a0@lex* oR439f@rhs* oR439a@mod** oR4399@kwd* oR430a@exp* oR430b@rib oR430c@top?))))) (if (memv oR432d@t '(library)) (begin (oR31b4@library-expander (oR2eff@stx->datum oR4317@e)) (oR314a@chi-body* (cdr oR4303@e*) oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?)) (if (memv oR432d@t '(export)) (let ((oR43ad@t oR4317@e)) (let ((oR43af@ls/false (oR30f2@syntax-dispatch oR43ad@t '(_ . each-any)))) (if oR43af@ls/false (apply (lambda (oR43b1@exp-decl*) (oR314a@chi-body* (cdr oR4303@e*) oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* (append oR43b1@exp-decl* oR430a@exp*) oR430b@rib oR430c@top?)) oR43af@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR43ad@t)))) (if (memv oR432d@t '(import)) (let ((oR43b4@module-import? '#f) (oR43b6@module-import '#f) (oR43b8@library-import '#f)) (begin (set! oR43b4@module-import? (lambda (oR4407@e) (let ((oR4409@t oR4407@e)) (let ((oR440b@ls/false (oR30f2@syntax-dispatch oR4409@t '(_ any)))) (if (and oR440b@ls/false (apply (lambda (oR440d@id) (oR2eeb@id? oR440d@id)) oR440b@ls/false)) (apply (lambda (oR440f@id) '#t) oR440b@ls/false) (let ((oR4411@t oR4409@t)) (let ((oR4413@ls/false (oR30f2@syntax-dispatch oR4411@t '(_ . each-any)))) (if oR4413@ls/false (apply (lambda (oR4415@imp*) '#f) oR4413@ls/false) (let ((oR4417@t oR4411@t)) (let ((oR4419@ls/false (oR30f2@syntax-dispatch oR4417@t '_))) (if oR4419@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"malformed import form" oR4407@e)) oR4419@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4417@t)))))))))))) (set! oR43b6@module-import (lambda (oR43e5@e oR43e6@r) (let ((oR43e9@t oR43e5@e)) (let ((oR43eb@ls/false (oR30f2@syntax-dispatch oR43e9@t '(_ any)))) (if (and oR43eb@ls/false (apply (lambda (oR43ed@id) (oR2eeb@id? oR43ed@id)) oR43eb@ls/false)) (apply (lambda (oR43ef@id) (call-with-values (lambda () (oR2f0d@syntax-type oR43ef@id oR43e6@r)) (lambda (oR43f7@oR43f2 oR43f8@oR43f4 oR43f9@oR43f6) (let ((oR43fd@kwd oR43f9@oR43f6) (oR43fe@value oR43f8@oR43f4) (oR43ff@type oR43f7@oR43f2)) (let ((oR4403@t oR43ff@type)) (if (memv oR4403@t '($module)) (let ((oR4405@iface oR43fe@value)) (values (oR3146@module-interface-exp-id* oR4405@iface oR43ef@id) (oR3140@module-interface-exp-lab-vec oR4405@iface))) (oR31d2@syntax-violation '#f '"invalid import" oR43e5@e))))))) oR43eb@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR43e9@t)))))) (set! oR43b8@library-import (lambda (oR43c9@e) (let ((oR43cb@t oR43c9@e)) (let ((oR43cd@ls/false (oR30f2@syntax-dispatch oR43cb@t '(any . each-any)))) (if oR43cd@ls/false (apply (lambda (oR43cf@ctxt oR43d0@imp*) (call-with-values (lambda () (oR3154@parse-import-spec* (oR31d8@syntax->datum oR43d0@imp*))) (lambda (oR43d7@oR43d4 oR43d8@oR43d6) (let ((oR43db@subst-labels oR43d8@oR43d6) (oR43dc@subst-names oR43d7@oR43d4)) (values (vector-map (lambda (oR43df@name) (oR2ecb@datum->stx oR43cf@ctxt oR43df@name)) oR43dc@subst-names) oR43db@subst-labels))))) oR43cd@ls/false) (let ((oR43e1@t oR43cb@t)) (let ((oR43e3@ls/false (oR30f2@syntax-dispatch oR43e1@t '_))) (if oR43e3@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid import form" oR43c9@e)) oR43e3@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR43e1@t))))))))) (begin (call-with-values (lambda () (if (oR43b4@module-import? oR4317@e) (oR43b6@module-import oR4317@e oR4304@r) (oR43b8@library-import oR4317@e))) (lambda (oR43bd@oR43ba oR43be@oR43bc) (let ((oR43c1@lab* oR43be@oR43bc) (oR43c2@id* oR43bd@oR43ba)) (vector-for-each (lambda (oR43c5@id oR43c6@lab) (oR2ea1@extend-rib! oR430b@rib oR43c5@id oR43c6@lab)) oR43c2@id* oR43c1@lab*)))) (oR314a@chi-body* (cdr oR4303@e*) oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?)))) (if oR430c@top? (oR314a@chi-body* (cdr oR4303@e*) oR4304@r oR4305@mr (cons (oR2e73@gen-lexical 'dummy) oR4306@lex*) (cons (cons 'top-expr oR4317@e) oR4307@rhs*) oR4308@mod** oR432b@kwd* oR430a@exp* oR430b@rib oR430c@top?) (values oR4303@e* oR4304@r oR4305@mr oR4306@lex* oR4307@rhs* oR4308@mod** oR432b@kwd* oR430a@exp*)))))))))))))))))))))) (set! oR4bf0@oR314a@chi-body* oR314a@chi-body*) (set! oR314c@expand-transformer (lambda (oR441b@expr oR441c@r) (let ((oR441f@rtc (oR3158@make-collector))) (let ((oR4421@expanded-rhs (let ((oR442b@oR4424 oR315a@inv-collector) (oR442c@oR4426 oR315c@vis-collector) (oR442d@oR4428 oR441f@rtc) (oR442e@oR442a (lambda (oR4433@x) (values)))) (let ((oR4435@swap (lambda () (begin (let ((oR4437@t (oR442b@oR4424))) (begin (oR442b@oR4424 oR442d@oR4428) (set! oR442d@oR4428 oR4437@t))) (let ((oR4439@t (oR442c@oR4426))) (begin (oR442c@oR4426 oR442e@oR442a) (set! oR442e@oR442a oR4439@t))))))) (dynamic-wind oR4435@swap (lambda () (oR3114@chi-expr oR441b@expr oR441c@r oR441c@r)) oR4435@swap))))) (begin (for-each (let ((oR443b@mark-visit (oR315c@vis-collector))) (lambda (oR443d@x) (begin (oR2d00@oR2b3e@invoke-library oR443d@x) (oR443b@mark-visit oR443d@x)))) (oR441f@rtc)) oR4421@expanded-rhs))))) (set! oR4bf1@oR314c@expand-transformer oR314c@expand-transformer) (set! oR314e@parse-exports (lambda (oR443f@exp*) (let oR4447@f ((oR4441@exp* oR443f@exp*) (oR4442@int* '()) (oR4443@ext* '())) (if (null? oR4441@exp*) (begin (if (not (oR2ef3@valid-bound-ids? oR4443@ext*)) (oR31d2@syntax-violation 'export '"invalid exports" (oR3128@find-dups oR4443@ext*)) (void)) (values (map oR31d8@syntax->datum oR4443@ext*) oR4442@int*)) (let ((oR4449@t (car oR4441@exp*))) (let ((oR444b@ls/false (oR30f2@syntax-dispatch oR4449@t '(any . #(each (any any)))))) (if oR444b@ls/false (apply (lambda (oR444d@rename oR444e@i* oR444f@e*) (begin (if (not (and (eq? (oR31d8@syntax->datum oR444d@rename) 'rename) (for-all oR2eeb@id? oR444e@i*) (for-all oR2eeb@id? oR444f@e*))) (oR31d2@syntax-violation 'export '"invalid export specifier" (car oR4441@exp*)) (void)) (oR4447@f (cdr oR4441@exp*) (append oR444e@i* oR4442@int*) (append oR444f@e* oR4443@ext*)))) oR444b@ls/false) (let ((oR4453@t oR4449@t)) (let ((oR4455@ls/false (oR30f2@syntax-dispatch oR4453@t 'any))) (if oR4455@ls/false (apply (lambda (oR4457@ie) (begin (if (not (oR2eeb@id? oR4457@ie)) (oR31d2@syntax-violation 'export '"invalid export" oR4457@ie) (void)) (oR4447@f (cdr oR4441@exp*) (cons oR4457@ie oR4442@int*) (cons oR4457@ie oR4443@ext*)))) oR4455@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4453@t))))))))))) (set! oR4bf2@oR314e@parse-exports oR314e@parse-exports) (set! oR3150@parse-library-name (lambda (oR4459@spec) (let ((oR445c@parse '#f)) (begin (set! oR445c@parse (lambda (oR4469@x) (let ((oR446b@t oR4469@x)) (let ((oR446d@ls/false (oR30f2@syntax-dispatch oR446b@t '(each-any)))) (if (and oR446d@ls/false (apply (lambda (oR446f@v*) (for-all (lambda (oR4471@x) (let ((oR4473@x (oR31d8@syntax->datum oR4471@x))) (and (integer? oR4473@x) (exact? oR4473@x)))) oR446f@v*)) oR446d@ls/false)) (apply (lambda (oR4475@v*) (values '() (map oR31d8@syntax->datum oR4475@v*))) oR446d@ls/false) (let ((oR4477@t oR446b@t)) (let ((oR4479@ls/false (oR30f2@syntax-dispatch oR4477@t '(any . any)))) (if (and oR4479@ls/false (apply (lambda (oR447b@x oR447c@rest) (symbol? (oR31d8@syntax->datum oR447b@x))) oR4479@ls/false)) (apply (lambda (oR447f@x oR4480@rest) (call-with-values (lambda () (oR445c@parse oR4480@rest)) (lambda (oR4487@oR4484 oR4488@oR4486) (let ((oR448b@v* oR4488@oR4486) (oR448c@x* oR4487@oR4484)) (values (cons (oR31d8@syntax->datum oR447f@x) oR448c@x*) oR448b@v*))))) oR4479@ls/false) (let ((oR448f@t oR4477@t)) (let ((oR4491@ls/false (oR30f2@syntax-dispatch oR448f@t '()))) (if oR4491@ls/false (apply (lambda () (values '() '())) oR4491@ls/false) (let ((oR4493@t oR448f@t)) (let ((oR4495@ls/false (oR30f2@syntax-dispatch oR4493@t '_))) (if oR4495@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid library name" oR4459@spec)) oR4495@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4493@t))))))))))))))) (call-with-values (lambda () (oR445c@parse oR4459@spec)) (lambda (oR4461@oR445e oR4462@oR4460) (let ((oR4465@ver* oR4462@oR4460) (oR4466@name* oR4461@oR445e)) (begin (if (null? oR4466@name*) (oR31d2@syntax-violation '#f '"empty library name" oR4459@spec) (void)) (values oR4466@name* oR4465@ver*))))))))) (set! oR4bf3@oR3150@parse-library-name oR3150@parse-library-name) (set! oR3152@parse-library (lambda (oR4497@e) (let ((oR4499@t oR4497@e)) (let ((oR449b@ls/false (oR30f2@syntax-dispatch oR4499@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and oR449b@ls/false (apply (lambda (oR449d@library oR449e@name* oR449f@export oR44a0@exp* oR44a1@import oR44a2@imp* oR44a3@b*) (and (eq? (oR31d8@syntax->datum oR449f@export) 'export) (eq? (oR31d8@syntax->datum oR44a1@import) 'import) (eq? (oR31d8@syntax->datum oR449d@library) 'library))) oR449b@ls/false)) (apply (lambda (oR44ab@library oR44ac@name* oR44ad@export oR44ae@exp* oR44af@import oR44b0@imp* oR44b1@b*) (values oR44ac@name* oR44ae@exp* oR44b0@imp* oR44b1@b*)) oR449b@ls/false) (let ((oR44b9@t oR4499@t)) (let ((oR44bb@ls/false (oR30f2@syntax-dispatch oR44b9@t '_))) (if oR44bb@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"malformed library" oR4497@e)) oR44bb@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR44b9@t))))))))) (set! oR4bf4@oR3152@parse-library oR3152@parse-library) (set! oR3154@parse-import-spec* (let ((oR44be@idsyn? '#f) (oR44c0@dup-error '#f) (oR44c2@merge-substs '#f) (oR44c4@exclude* '#f) (oR44c6@find* '#f) (oR44c8@rem* '#f) (oR44ca@remove-dups '#f) (oR44cc@parse-library-name '#f) (oR44ce@import-library '#f) (oR44d0@get-import '#f) (oR44d2@add-imports! '#f)) (begin (set! oR44be@idsyn? (lambda (oR46c7@x) (symbol? (oR31d8@syntax->datum oR46c7@x)))) (set! oR44c0@dup-error (lambda (oR46c5@name) (oR31d2@syntax-violation 'import '"two imports with different bindings" oR46c5@name))) (set! oR44c2@merge-substs (lambda (oR46b3@s oR46b4@subst) (let ((oR46b8@insert-to-subst '#f)) (begin (set! oR46b8@insert-to-subst (lambda (oR46b9@a oR46ba@subst) (let ((oR46bd@name (car oR46b9@a)) (oR46be@label (cdr oR46b9@a))) (let ((oR46c1@t (assq oR46bd@name oR46ba@subst))) (if oR46c1@t ((lambda (oR46c3@x) (if (eq? (cdr oR46c3@x) oR46be@label) oR46ba@subst (oR44c0@dup-error oR46bd@name))) oR46c1@t) (cons oR46b9@a oR46ba@subst)))))) (if (null? oR46b3@s) oR46b4@subst (oR46b8@insert-to-subst (car oR46b3@s) (oR44c2@merge-substs (cdr oR46b3@s) oR46b4@subst))))))) (set! oR44c4@exclude* (lambda (oR4683@sym* oR4684@subst) (let ((oR4688@exclude '#f)) (begin (set! oR4688@exclude (lambda (oR46a1@sym oR46a2@subst) (if (null? oR46a2@subst) (oR31d2@syntax-violation 'import '"cannot rename unbound identifier" oR46a1@sym) (if (eq? oR46a1@sym (caar oR46a2@subst)) (values (cdar oR46a2@subst) (cdr oR46a2@subst)) (let ((oR46a5@a (car oR46a2@subst))) (call-with-values (lambda () (oR4688@exclude oR46a1@sym (cdr oR46a2@subst))) (lambda (oR46ab@oR46a8 oR46ac@oR46aa) (let ((oR46af@subst oR46ac@oR46aa) (oR46b0@old oR46ab@oR46a8)) (values oR46b0@old (cons oR46a5@a oR46af@subst)))))))))) (if (null? oR4683@sym*) (values '() oR4684@subst) (call-with-values (lambda () (oR4688@exclude (car oR4683@sym*) oR4684@subst)) (lambda (oR468d@oR468a oR468e@oR468c) (let ((oR4691@subst oR468e@oR468c) (oR4692@old oR468d@oR468a)) (call-with-values (lambda () (oR44c4@exclude* (cdr oR4683@sym*) oR4691@subst)) (lambda (oR4699@oR4696 oR469a@oR4698) (let ((oR469d@subst oR469a@oR4698) (oR469e@old* oR4699@oR4696)) (values (cons oR4692@old oR469e@old*) oR469d@subst)))))))))))) (set! oR44c6@find* (lambda (oR467b@sym* oR467c@subst) (map (lambda (oR467f@x) (let ((oR4681@t (assq oR467f@x oR467c@subst))) (if oR4681@t (cdr oR4681@t) (oR31d2@syntax-violation 'import '"cannot find identifier" oR467f@x)))) oR467b@sym*))) (set! oR44c8@rem* (lambda (oR4673@sym* oR4674@subst) (let oR4679@f ((oR4677@subst oR4674@subst)) (if (null? oR4677@subst) '() (if (memq (caar oR4677@subst) oR4673@sym*) (oR4679@f (cdr oR4677@subst)) (cons (car oR4677@subst) (oR4679@f (cdr oR4677@subst)))))))) (set! oR44ca@remove-dups (lambda (oR4671@ls) (if (null? oR4671@ls) '() (if (memq (car oR4671@ls) (cdr oR4671@ls)) (oR44ca@remove-dups (cdr oR4671@ls)) (cons (car oR4671@ls) (oR44ca@remove-dups (cdr oR4671@ls))))))) (set! oR44cc@parse-library-name (lambda (oR4589@spec) (let ((oR458c@subversion? '#f) (oR458e@subversion-pred '#f) (oR4590@version-pred '#f)) (begin (set! oR458c@subversion? (lambda (oR466d@x) (let ((oR466f@x (oR31d8@syntax->datum oR466d@x))) (and (integer? oR466f@x) (exact? oR466f@x) (>= oR466f@x '0))))) (set! oR458e@subversion-pred (lambda (oR460d@x*) (let ((oR460f@t oR460d@x*)) (let ((oR4611@ls/false (oR30f2@syntax-dispatch oR460f@t 'any))) (if (and oR4611@ls/false (apply (lambda (oR4613@n) (oR458c@subversion? oR4613@n)) oR4611@ls/false)) (apply (lambda (oR4615@n) (lambda (oR4617@x) (= oR4617@x (oR31d8@syntax->datum oR4615@n)))) oR4611@ls/false) (let ((oR4619@t oR460f@t)) (let ((oR461b@ls/false (oR30f2@syntax-dispatch oR4619@t '(any . each-any)))) (if (and oR461b@ls/false (apply (lambda (oR461d@p? oR461e@sub*) (eq? (oR31d8@syntax->datum oR461d@p?) 'and)) oR461b@ls/false)) (apply (lambda (oR4621@p? oR4622@sub*) (let ((oR4625@p* (map oR458e@subversion-pred oR4622@sub*))) (lambda (oR4627@x) (for-all (lambda (oR4629@p) (oR4629@p oR4627@x)) oR4625@p*)))) oR461b@ls/false) (let ((oR462b@t oR4619@t)) (let ((oR462d@ls/false (oR30f2@syntax-dispatch oR462b@t '(any . each-any)))) (if (and oR462d@ls/false (apply (lambda (oR462f@p? oR4630@sub*) (eq? (oR31d8@syntax->datum oR462f@p?) 'or)) oR462d@ls/false)) (apply (lambda (oR4633@p? oR4634@sub*) (let ((oR4637@p* (map oR458e@subversion-pred oR4634@sub*))) (lambda (oR4639@x) (exists (lambda (oR463b@p) (oR463b@p oR4639@x)) oR4637@p*)))) oR462d@ls/false) (let ((oR463d@t oR462b@t)) (let ((oR463f@ls/false (oR30f2@syntax-dispatch oR463d@t '(any any)))) (if (and oR463f@ls/false (apply (lambda (oR4641@p? oR4642@sub) (eq? (oR31d8@syntax->datum oR4641@p?) 'not)) oR463f@ls/false)) (apply (lambda (oR4645@p? oR4646@sub) (let ((oR4649@p (oR458e@subversion-pred oR4646@sub))) (lambda (oR464b@x) (not (oR4649@p oR464b@x))))) oR463f@ls/false) (let ((oR464d@t oR463d@t)) (let ((oR464f@ls/false (oR30f2@syntax-dispatch oR464d@t '(any any)))) (if (and oR464f@ls/false (apply (lambda (oR4651@p? oR4652@n) (and (eq? (oR31d8@syntax->datum oR4651@p?) '<=) (oR458c@subversion? oR4652@n))) oR464f@ls/false)) (apply (lambda (oR4655@p? oR4656@n) (lambda (oR4659@x) (<= oR4659@x (oR31d8@syntax->datum oR4656@n)))) oR464f@ls/false) (let ((oR465b@t oR464d@t)) (let ((oR465d@ls/false (oR30f2@syntax-dispatch oR465b@t '(any any)))) (if (and oR465d@ls/false (apply (lambda (oR465f@p? oR4660@n) (and (eq? (oR31d8@syntax->datum oR465f@p?) '>=) (oR458c@subversion? oR4660@n))) oR465d@ls/false)) (apply (lambda (oR4663@p? oR4664@n) (lambda (oR4667@x) (>= oR4667@x (oR31d8@syntax->datum oR4664@n)))) oR465d@ls/false) (let ((oR4669@t oR465b@t)) (let ((oR466b@ls/false (oR30f2@syntax-dispatch oR4669@t '_))) (if oR466b@ls/false (apply (lambda () (oR31d2@syntax-violation 'import '"invalid sub-version spec" oR4589@spec oR460d@x*)) oR466b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4669@t)))))))))))))))))))))))) (set! oR4590@version-pred (lambda (oR45bd@x*) (let ((oR45bf@t oR45bd@x*)) (let ((oR45c1@ls/false (oR30f2@syntax-dispatch oR45bf@t '()))) (if oR45c1@ls/false (apply (lambda () (lambda (oR45c3@x) '#t)) oR45c1@ls/false) (let ((oR45c5@t oR45bf@t)) (let ((oR45c7@ls/false (oR30f2@syntax-dispatch oR45c5@t '(any . each-any)))) (if (and oR45c7@ls/false (apply (lambda (oR45c9@c oR45ca@ver*) (eq? (oR31d8@syntax->datum oR45c9@c) 'and)) oR45c7@ls/false)) (apply (lambda (oR45cd@c oR45ce@ver*) (let ((oR45d1@p* (map oR4590@version-pred oR45ce@ver*))) (lambda (oR45d3@x) (for-all (lambda (oR45d5@p) (oR45d5@p oR45d3@x)) oR45d1@p*)))) oR45c7@ls/false) (let ((oR45d7@t oR45c5@t)) (let ((oR45d9@ls/false (oR30f2@syntax-dispatch oR45d7@t '(any . each-any)))) (if (and oR45d9@ls/false (apply (lambda (oR45db@c oR45dc@ver*) (eq? (oR31d8@syntax->datum oR45db@c) 'or)) oR45d9@ls/false)) (apply (lambda (oR45df@c oR45e0@ver*) (let ((oR45e3@p* (map oR4590@version-pred oR45e0@ver*))) (lambda (oR45e5@x) (exists (lambda (oR45e7@p) (oR45e7@p oR45e5@x)) oR45e3@p*)))) oR45d9@ls/false) (let ((oR45e9@t oR45d7@t)) (let ((oR45eb@ls/false (oR30f2@syntax-dispatch oR45e9@t '(any any)))) (if (and oR45eb@ls/false (apply (lambda (oR45ed@c oR45ee@ver) (eq? (oR31d8@syntax->datum oR45ed@c) 'not)) oR45eb@ls/false)) (apply (lambda (oR45f1@c oR45f2@ver) (let ((oR45f5@p (oR4590@version-pred oR45f2@ver))) (lambda (oR45f7@x) (not (oR45f5@p oR45f7@x))))) oR45eb@ls/false) (let ((oR45f9@t oR45e9@t)) (let ((oR45fb@ls/false (oR30f2@syntax-dispatch oR45f9@t 'each-any))) (if oR45fb@ls/false (apply (lambda (oR45fd@sub*) (let ((oR45ff@p* (map oR458e@subversion-pred oR45fd@sub*))) (lambda (oR4601@x) (let oR4607@f ((oR4603@p* oR45ff@p*) (oR4604@x oR4601@x)) (if (null? oR4603@p*) '#t (if (null? oR4604@x) '#f (and ((car oR4603@p*) (car oR4604@x)) (oR4607@f (cdr oR4603@p*) (cdr oR4604@x))))))))) oR45fb@ls/false) (let ((oR4609@t oR45f9@t)) (let ((oR460b@ls/false (oR30f2@syntax-dispatch oR4609@t '_))) (if oR460b@ls/false (apply (lambda () (oR31d2@syntax-violation 'import '"invalid version spec" oR4589@spec oR45bd@x*)) oR460b@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4609@t))))))))))))))))))))) (let oR4593@f ((oR4591@x oR4589@spec)) (let ((oR4595@t oR4591@x)) (let ((oR4597@ls/false (oR30f2@syntax-dispatch oR4595@t '(each-any)))) (if oR4597@ls/false (apply (lambda (oR4599@version-spec*) (values '() (oR4590@version-pred oR4599@version-spec*))) oR4597@ls/false) (let ((oR459b@t oR4595@t)) (let ((oR459d@ls/false (oR30f2@syntax-dispatch oR459b@t '(any . any)))) (if (and oR459d@ls/false (apply (lambda (oR459f@x oR45a0@x*) (oR44be@idsyn? oR459f@x)) oR459d@ls/false)) (apply (lambda (oR45a3@x oR45a4@x*) (call-with-values (lambda () (oR4593@f oR45a4@x*)) (lambda (oR45ab@oR45a8 oR45ac@oR45aa) (let ((oR45af@pred oR45ac@oR45aa) (oR45b0@name oR45ab@oR45a8)) (values (cons (oR31d8@syntax->datum oR45a3@x) oR45b0@name) oR45af@pred))))) oR459d@ls/false) (let ((oR45b3@t oR459b@t)) (let ((oR45b5@ls/false (oR30f2@syntax-dispatch oR45b3@t '()))) (if oR45b5@ls/false (apply (lambda () (values '() (lambda (oR45b7@x) '#t))) oR45b5@ls/false) (let ((oR45b9@t oR45b3@t)) (let ((oR45bb@ls/false (oR30f2@syntax-dispatch oR45b9@t '_))) (if oR45bb@ls/false (apply (lambda () (oR31d2@syntax-violation '#f '"invalid import spec" oR4589@spec)) oR45bb@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR45b9@t)))))))))))))))))) (set! oR44ce@import-library (lambda (oR4579@spec*) (call-with-values (lambda () (oR44cc@parse-library-name oR4579@spec*)) (lambda (oR457f@oR457c oR4580@oR457e) (let ((oR4583@pred oR4580@oR457e) (oR4584@name oR457f@oR457c)) (begin (if (null? oR4584@name) (oR31d2@syntax-violation 'import '"empty library name" oR4579@spec*) (void)) (let ((oR4587@lib (oR2cf9@oR2b30@find-library-by-name oR4584@name))) (begin (if (not oR4587@lib) (oR31d2@syntax-violation 'import '"cannot find library with required name" oR4584@name) (void)) (if (not (oR4583@pred (oR2cd3@oR2ae4@library-version oR4587@lib))) (oR31d2@syntax-violation 'import '"library does not satisfy version specification" oR4579@spec* oR4587@lib) (void)) ((oR315e@imp-collector) oR4587@lib) (oR2cdb@oR2af4@library-subst oR4587@lib))))))))) (set! oR44d0@get-import (lambda (oR44eb@spec) (let ((oR44ed@t oR44eb@spec)) (let ((oR44ef@ls/false (oR30f2@syntax-dispatch oR44ed@t '(any . each-any)))) (if (and oR44ef@ls/false (apply (lambda (oR44f1@x oR44f2@x*) (not (memq (oR31d8@syntax->datum oR44f1@x) '(for rename except only prefix library)))) oR44ef@ls/false)) (apply (lambda (oR44f5@x oR44f6@x*) (oR44ce@import-library (cons oR44f5@x oR44f6@x*))) oR44ef@ls/false) (let ((oR44f9@t oR44ed@t)) (let ((oR44fb@ls/false (oR30f2@syntax-dispatch oR44f9@t '(any any . #(each (any any)))))) (if (and oR44fb@ls/false (apply (lambda (oR44fd@rename oR44fe@isp oR44ff@old* oR4500@new*) (and (eq? (oR31d8@syntax->datum oR44fd@rename) 'rename) (for-all oR44be@idsyn? oR44ff@old*) (for-all oR44be@idsyn? oR4500@new*))) oR44fb@ls/false)) (apply (lambda (oR4505@rename oR4506@isp oR4507@old* oR4508@new*) (let ((oR450d@subst (oR44d0@get-import oR4506@isp)) (oR450e@old* (map oR31d8@syntax->datum oR4507@old*)) (oR450f@new* (map oR31d8@syntax->datum oR4508@new*))) (let ((oR4513@old-label* (oR44c6@find* oR450e@old* oR450d@subst))) (let ((oR4515@subst (oR44c8@rem* oR450e@old* oR450d@subst))) (oR44c2@merge-substs (map cons oR450f@new* oR4513@old-label*) oR4515@subst))))) oR44fb@ls/false) (let ((oR4517@t oR44f9@t)) (let ((oR4519@ls/false (oR30f2@syntax-dispatch oR4517@t '(any any . each-any)))) (if (and oR4519@ls/false (apply (lambda (oR451b@except oR451c@isp oR451d@sym*) (and (eq? (oR31d8@syntax->datum oR451b@except) 'except) (for-all oR44be@idsyn? oR451d@sym*))) oR4519@ls/false)) (apply (lambda (oR4521@except oR4522@isp oR4523@sym*) (let ((oR4527@subst (oR44d0@get-import oR4522@isp))) (oR44c8@rem* (map oR31d8@syntax->datum oR4523@sym*) oR4527@subst))) oR4519@ls/false) (let ((oR4529@t oR4517@t)) (let ((oR452b@ls/false (oR30f2@syntax-dispatch oR4529@t '(any any . each-any)))) (if (and oR452b@ls/false (apply (lambda (oR452d@only oR452e@isp oR452f@sym*) (and (eq? (oR31d8@syntax->datum oR452d@only) 'only) (for-all oR44be@idsyn? oR452f@sym*))) oR452b@ls/false)) (apply (lambda (oR4533@only oR4534@isp oR4535@sym*) (let ((oR4539@subst (oR44d0@get-import oR4534@isp)) (oR453a@sym* (map oR31d8@syntax->datum oR4535@sym*))) (let ((oR453d@sym* (oR44ca@remove-dups oR453a@sym*))) (let ((oR453f@lab* (oR44c6@find* oR453d@sym* oR4539@subst))) (map cons oR453d@sym* oR453f@lab*))))) oR452b@ls/false) (let ((oR4541@t oR4529@t)) (let ((oR4543@ls/false (oR30f2@syntax-dispatch oR4541@t '(any any any)))) (if (and oR4543@ls/false (apply (lambda (oR4545@prefix oR4546@isp oR4547@p) (and (eq? (oR31d8@syntax->datum oR4545@prefix) 'prefix) (oR44be@idsyn? oR4547@p))) oR4543@ls/false)) (apply (lambda (oR454b@prefix oR454c@isp oR454d@p) (let ((oR4551@subst (oR44d0@get-import oR454c@isp)) (oR4552@prefix (symbol->string (oR31d8@syntax->datum oR454d@p)))) (map (lambda (oR4555@x) (cons (string->symbol (string-append oR4552@prefix (symbol->string (car oR4555@x)))) (cdr oR4555@x))) oR4551@subst))) oR4543@ls/false) (let ((oR4557@t oR4541@t)) (let ((oR4559@ls/false (oR30f2@syntax-dispatch oR4557@t '(any each-any)))) (if (and oR4559@ls/false (apply (lambda (oR455b@library oR455c@spec*) (eq? (oR31d8@syntax->datum oR455b@library) 'library)) oR4559@ls/false)) (apply (lambda (oR455f@library oR4560@spec*) (oR44ce@import-library oR4560@spec*)) oR4559@ls/false) (let ((oR4563@t oR4557@t)) (let ((oR4565@ls/false (oR30f2@syntax-dispatch oR4563@t '(any any . any)))) (if (and oR4565@ls/false (apply (lambda (oR4567@for oR4568@isp oR4569@rest) (eq? (oR31d8@syntax->datum oR4567@for) 'for)) oR4565@ls/false)) (apply (lambda (oR456d@for oR456e@isp oR456f@rest) (oR44d0@get-import oR456e@isp)) oR4565@ls/false) (let ((oR4573@t oR4563@t)) (let ((oR4575@ls/false (oR30f2@syntax-dispatch oR4573@t 'any))) (if oR4575@ls/false (apply (lambda (oR4577@spec) (oR31d2@syntax-violation 'import '"invalid import spec" oR4577@spec)) oR4575@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4573@t))))))))))))))))))))))))))) (set! oR44d2@add-imports! (lambda (oR44db@imp oR44dc@h) (let ((oR44df@subst (oR44d0@get-import oR44db@imp))) (for-each (lambda (oR44e1@x) (let ((oR44e3@name (car oR44e1@x)) (oR44e4@label (cdr oR44e1@x))) (let ((oR44e7@t (hashtable-ref oR44dc@h oR44e3@name '#f))) (if oR44e7@t ((lambda (oR44e9@l) (if (not (eq? oR44e9@l oR44e4@label)) (oR44c0@dup-error oR44e3@name) (void))) oR44e7@t) (hashtable-set! oR44dc@h oR44e3@name oR44e4@label))))) oR44df@subst)))) (lambda (oR44d3@imp*) (let oR44d9@f ((oR44d5@imp* oR44d3@imp*) (oR44d6@h (make-eq-hashtable))) (if (null? oR44d5@imp*) (hashtable-entries oR44d6@h) (begin (oR44d2@add-imports! (car oR44d5@imp*) oR44d6@h) (oR44d9@f (cdr oR44d5@imp*) oR44d6@h)))))))) (set! oR4bf5@oR3154@parse-import-spec* oR3154@parse-import-spec*) (set! oR3156@make-top-rib (lambda (oR46c9@names oR46ca@labels) (let ((oR46cd@rib (oR2e9f@make-empty-rib))) (begin (vector-for-each (lambda (oR46cf@name oR46d0@label) (begin (if (not (symbol? oR46cf@name)) (error 'make-top-rib '"BUG: not a symbol" oR46cf@name) (void)) (oR2ea3@extend-rib/nc! oR46cd@rib (make-simple-struct 'stx '5 (list oR46cf@name oR2e6f@top-mark* '() '())) oR46d0@label))) oR46c9@names oR46ca@labels) oR46cd@rib)))) (set! oR4bf6@oR3156@make-top-rib oR3156@make-top-rib) (set! oR3158@make-collector (lambda () (let ((oR46d3@ls '())) (lambda oR46d7 (let ((oR46d8 (length oR46d7))) (if (= oR46d8 '0) (apply (lambda () oR46d3@ls) oR46d7) (if (= oR46d8 '1) (apply (lambda (oR46d5@x) (set! oR46d3@ls (oR2e68@set-cons oR46d5@x oR46d3@ls))) oR46d7) (error 'apply '"invalid arg count")))))))) (set! oR4bf7@oR3158@make-collector oR3158@make-collector) (set! oR315a@inv-collector (oR2a24@oR2902@make-parameter (lambda oR46d9@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (oR46db@x) (begin (if (not (procedure? oR46db@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" oR46db@x) (void)) oR46db@x)))) (set! oR4bf8@oR315a@inv-collector oR315a@inv-collector) (set! oR315c@vis-collector (oR2a24@oR2902@make-parameter (lambda oR46dd@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (oR46df@x) (begin (if (not (procedure? oR46df@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" oR46df@x) (void)) oR46df@x)))) (set! oR4bf9@oR315c@vis-collector oR315c@vis-collector) (set! oR315e@imp-collector (oR2a24@oR2902@make-parameter (lambda oR46e1@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (oR46e3@x) (begin (if (not (procedure? oR46e3@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" oR46e3@x) (void)) oR46e3@x)))) (set! oR4bfa@oR315e@imp-collector oR315e@imp-collector) (set! oR3160@chi-library-internal (lambda (oR46e5@e* oR46e6@rib oR46e7@top?) (call-with-values (lambda () (oR314a@chi-body* oR46e5@e* '() '() '() '() '() '() '() oR46e6@rib oR46e7@top?)) (lambda (oR46fb@oR46ec oR46fc@oR46ee oR46fd@oR46f0 oR46fe@oR46f2 oR46ff@oR46f4 oR4700@oR46f6 oR4701@oR46f8 oR4702@oR46fa) (let ((oR470b@exp* oR4702@oR46fa) (oR470c@_kwd* oR4701@oR46f8) (oR470d@mod** oR4700@oR46f6) (oR470e@rhs* oR46ff@oR46f4) (oR470f@lex* oR46fe@oR46f2) (oR4710@mr oR46fd@oR46f0) (oR4711@r oR46fc@oR46ee) (oR4712@e* oR46fb@oR46ec)) (values (append (apply append (reverse oR470d@mod**)) oR4712@e*) oR4711@r oR4710@mr (reverse oR470f@lex*) (reverse oR470e@rhs*) oR470b@exp*)))))) (set! oR4bfb@oR3160@chi-library-internal oR3160@chi-library-internal) (set! oR3162@chi-interaction-expr (lambda (oR471b@e oR471c@rib oR471d@r) (call-with-values (lambda () (oR314a@chi-body* (list oR471b@e) oR471d@r oR471d@r '() '() '() '() '() oR471c@rib '#t)) (lambda (oR4731@oR4722 oR4732@oR4724 oR4733@oR4726 oR4734@oR4728 oR4735@oR472a oR4736@oR472c oR4737@oR472e oR4738@oR4730) (let ((oR4741@_exp* oR4738@oR4730) (oR4742@_kwd* oR4737@oR472e) (oR4743@mod** oR4736@oR472c) (oR4744@rhs* oR4735@oR472a) (oR4745@lex* oR4734@oR4728) (oR4746@mr oR4733@oR4726) (oR4747@r oR4732@oR4724) (oR4748@e* oR4731@oR4722)) (let ((oR4751@e* (oR3122@expand-interaction-rhs*/init* (reverse oR4745@lex*) (reverse oR4744@rhs*) (append (apply append (reverse oR4743@mod**)) oR4748@e*) oR4747@r oR4746@mr))) (let ((oR4753@e (if (null? oR4751@e*) (oR2e51@oR2dac@build-void) (if (null? (cdr oR4751@e*)) (car oR4751@e*) (oR2e50@oR2daa@build-sequence '#f oR4751@e*))))) (values oR4753@e oR4747@r)))))))) (set! oR4bfc@oR3162@chi-interaction-expr oR3162@chi-interaction-expr) (set! oR3164@library-body-expander (lambda (oR4755@name oR4756@main-exp* oR4757@imp* oR4758@b* oR4759@top?) (let ((oR4760@itc '#f)) (begin (set! oR4760@itc (oR3158@make-collector)) (let ((oR4769@oR4762 oR315e@imp-collector) (oR476a@oR4764 oR31e2@top-level-context) (oR476b@oR4766 oR4760@itc) (oR476c@oR4768 '#f)) (let ((oR4771@swap (lambda () (begin (let ((oR4773@t (oR4769@oR4762))) (begin (oR4769@oR4762 oR476b@oR4766) (set! oR476b@oR4766 oR4773@t))) (let ((oR4775@t (oR476a@oR4764))) (begin (oR476a@oR4764 oR476c@oR4768) (set! oR476c@oR4768 oR4775@t))))))) (dynamic-wind oR4771@swap (lambda () (call-with-values (lambda () (oR3154@parse-import-spec* oR4757@imp*)) (lambda (oR477b@oR4778 oR477c@oR477a) (let ((oR477f@subst-labels oR477c@oR477a) (oR4780@subst-names oR477b@oR4778)) (let ((oR4783@rib (oR3156@make-top-rib oR4780@subst-names oR477f@subst-labels))) (let ((oR4786@wrap '#f)) (begin (set! oR4786@wrap (lambda (oR4801@x) (make-simple-struct 'stx '5 (list oR4801@x oR2e6f@top-mark* (list oR4783@rib) '())))) (let ((oR4787@b* (map oR4786@wrap oR4758@b*)) (oR4788@main-exp* (map oR4786@wrap oR4756@main-exp*)) (oR4789@rtc (oR3158@make-collector)) (oR478a@vtc (oR3158@make-collector))) (let ((oR4797@oR4790 oR315a@inv-collector) (oR4798@oR4792 oR315c@vis-collector) (oR4799@oR4794 oR4789@rtc) (oR479a@oR4796 oR478a@vtc)) (let ((oR479f@swap (lambda () (begin (let ((oR47a1@t (oR4797@oR4790))) (begin (oR4797@oR4790 oR4799@oR4794) (set! oR4799@oR4794 oR47a1@t))) (let ((oR47a3@t (oR4798@oR4792))) (begin (oR4798@oR4792 oR479a@oR4796) (set! oR479a@oR4796 oR47a3@t))))))) (dynamic-wind oR479f@swap (lambda () (call-with-values (lambda () (oR3160@chi-library-internal oR4787@b* oR4783@rib oR4759@top?)) (lambda (oR47b1@oR47a6 oR47b2@oR47a8 oR47b3@oR47aa oR47b4@oR47ac oR47b5@oR47ae oR47b6@oR47b0) (let ((oR47bd@internal-exp* oR47b6@oR47b0) (oR47be@rhs* oR47b5@oR47ae) (oR47bf@lex* oR47b4@oR47ac) (oR47c0@mr oR47b3@oR47aa) (oR47c1@r oR47b2@oR47a8) (oR47c2@init* oR47b1@oR47a6)) (call-with-values (lambda () (oR314e@parse-exports (append oR4788@main-exp* oR47bd@internal-exp*))) (lambda (oR47cd@oR47ca oR47ce@oR47cc) (let ((oR47d1@exp-id* oR47ce@oR47cc) (oR47d2@exp-name* oR47cd@oR47ca)) (begin (oR2ea7@seal-rib! oR4783@rib) (let ((oR47d5@init* (oR3110@chi-expr* oR47c2@init* oR47c1@r oR47c0@mr))) (let ((oR47d7@rhs* (oR3124@chi-rhs* oR47be@rhs* oR47c1@r oR47c0@mr))) (begin (oR2ea9@unseal-rib! oR4783@rib) (let ((oR47d9@loc* (map oR2e75@gen-global oR47bf@lex*)) (oR47da@export-subst (oR31bc@make-export-subst oR47d2@exp-name* oR47d1@exp-id*))) (let ((oR47de@errstr '#f)) (begin (set! oR47de@errstr '"attempt to export mutated variable") (call-with-values (lambda () (oR31be@make-export-env/macros oR47bf@lex* oR47d9@loc* oR47c1@r)) (lambda (oR47e5@oR47e0 oR47e6@oR47e2 oR47e7@oR47e4) (let ((oR47eb@macro* oR47e7@oR47e4) (oR47ec@global* oR47e6@oR47e2) (oR47ed@export-env oR47e5@oR47e0)) (begin (for-each (lambda (oR47f1@s) (let ((oR47f3@name (car oR47f1@s)) (oR47f4@label (cdr oR47f1@s))) (let ((oR47f7@p (assq oR47f4@label oR47ed@export-env))) (if oR47f7@p (let ((oR47f9@b (cdr oR47f7@p))) (let ((oR47fb@type (car oR47f9@b))) (if (eq? oR47fb@type 'mutable) (oR31d2@syntax-violation 'export oR47de@errstr oR47f3@name) (void)))) (void))))) oR47da@export-subst) (let ((oR47fd@invoke-body (oR2e56@oR2db6@build-library-letrec* '#f oR4755@name oR47bf@lex* oR47d9@loc* oR47d7@rhs* (if (null? oR47d5@init*) (oR2e51@oR2dac@build-void) (oR2e50@oR2daa@build-sequence '#f oR47d5@init*)))) (oR47fe@invoke-definitions (map oR2e4d@oR2d09@build-global-define (map cdr oR47ec@global*)))) (values (oR4760@itc) (oR4789@rtc) (oR478a@vtc) (oR2e50@oR2daa@build-sequence '#f (append oR47fe@invoke-definitions (list oR47fd@invoke-body))) oR47eb@macro* oR47da@export-subst oR47ed@export-env)))))))))))))))))))) oR479f@swap))))))))))) oR4771@swap))))))) (set! oR4bfd@oR3164@library-body-expander oR3164@library-body-expander) (set! oR3166@core-library-expander (lambda (oR4803@e oR4804@verify-name) (call-with-values (lambda () (oR3152@parse-library oR4803@e)) (lambda (oR480f@oR4808 oR4810@oR480a oR4811@oR480c oR4812@oR480e) (let ((oR4817@b* oR4812@oR480e) (oR4818@imp* oR4811@oR480c) (oR4819@exp* oR4810@oR480a) (oR481a@name* oR480f@oR4808)) (call-with-values (lambda () (oR3150@parse-library-name oR481a@name*)) (lambda (oR4823@oR4820 oR4824@oR4822) (let ((oR4827@ver oR4824@oR4822) (oR4828@name oR4823@oR4820)) (begin (oR4804@verify-name oR4828@name) (call-with-values (lambda () (oR3164@library-body-expander oR4828@name oR4819@exp* oR4818@imp* oR4817@b* '#f)) (lambda (oR4839@oR482c oR483a@oR482e oR483b@oR4830 oR483c@oR4832 oR483d@oR4834 oR483e@oR4836 oR483f@oR4838) (let ((oR4847@export-env oR483f@oR4838) (oR4848@export-subst oR483e@oR4836) (oR4849@visit-code oR483d@oR4834) (oR484a@invoke-code oR483c@oR4832) (oR484b@visit-req* oR483b@oR4830) (oR484c@invoke-req* oR483a@oR482e) (oR484d@imp* oR4839@oR482c)) (values oR4828@name oR4827@ver oR484d@imp* oR484c@invoke-req* oR484b@visit-req* oR484a@invoke-code oR4849@visit-code oR4848@export-subst oR4847@export-env))))))))))))) (set! oR4bfe@oR3166@core-library-expander oR3166@core-library-expander) (set! oR3168@parse-top-level-program (lambda (oR4855@e*) (let ((oR4857@t oR4855@e*)) (let ((oR4859@ls/false (oR30f2@syntax-dispatch oR4857@t '((any . each-any) . each-any)))) (if (and oR4859@ls/false (apply (lambda (oR485b@import oR485c@imp* oR485d@b*) (eq? (oR31d8@syntax->datum oR485b@import) 'import)) oR4859@ls/false)) (apply (lambda (oR4861@import oR4862@imp* oR4863@b*) (values oR4862@imp* oR4863@b*)) oR4859@ls/false) (let ((oR4867@t oR4857@t)) (let ((oR4869@ls/false (oR30f2@syntax-dispatch oR4867@t '((any . any) . any)))) (if (and oR4869@ls/false (apply (lambda (oR486b@import oR486c@x oR486d@y) (eq? (oR31d8@syntax->datum oR486b@import) 'import)) oR4869@ls/false)) (apply (lambda (oR4871@import oR4872@x oR4873@y) (oR31d2@syntax-violation 'expander '"invalid syntax of top-level program" (oR2ee5@syntax-car oR4855@e*))) oR4869@ls/false) (let ((oR4877@t oR4867@t)) (let ((oR4879@ls/false (oR30f2@syntax-dispatch oR4877@t '_))) (if oR4879@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) oR4879@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4877@t)))))))))))) (set! oR4bff@oR3168@parse-top-level-program oR3168@parse-top-level-program) (set! oR316a@top-level-expander (lambda (oR487b@e*) (call-with-values (lambda () (oR3168@parse-top-level-program oR487b@e*)) (lambda (oR4881@oR487e oR4882@oR4880) (let ((oR4885@b* oR4882@oR4880) (oR4886@imp* oR4881@oR487e)) (call-with-values (lambda () (oR3164@library-body-expander '() '() oR4886@imp* oR4885@b* '#t)) (lambda (oR4897@oR488a oR4898@oR488c oR4899@oR488e oR489a@oR4890 oR489b@oR4892 oR489c@oR4894 oR489d@oR4896) (let ((oR48a5@export-env oR489d@oR4896) (oR48a6@export-subst oR489c@oR4894) (oR48a7@visit-code oR489b@oR4892) (oR48a8@invoke-code oR489a@oR4890) (oR48a9@visit-req* oR4899@oR488e) (oR48aa@invoke-req* oR4898@oR488c) (oR48ab@imp* oR4897@oR488a)) (values oR48aa@invoke-req* oR48a8@invoke-code))))))))) (set! oR4c00@oR316a@top-level-expander oR316a@top-level-expander) (set! oR316c@rp (oR2a21@oR28fc@make-record-printer 'env (lambda (oR48b3@x oR48b4@p oR48b5@wr) (display '"#<environment>" oR48b4@p)))) (set! oR4c01@oR316c@rp oR316c@rp) (set! oR3176@env? (lambda (oR48b9@x) (and (simple-struct? oR48b9@x) (eq? (simple-struct-name oR48b9@x) 'env)))) (set! oR4c02@oR3176@env? oR3176@env?) (set! oR3178@env-names (lambda (oR48bb@x) (simple-struct-ref oR48bb@x '0))) (set! oR4c03@oR3178@env-names oR3178@env-names) (set! oR317a@set-env-names! (lambda (oR48bd@x oR48be@val) (simple-struct-set! oR48bd@x '0 oR48be@val))) (set! oR4c04@oR317a@set-env-names! oR317a@set-env-names!) (set! oR317c@env-labels (lambda (oR48c1@x) (simple-struct-ref oR48c1@x '1))) (set! oR4c05@oR317c@env-labels oR317c@env-labels) (set! oR317e@set-env-labels! (lambda (oR48c3@x oR48c4@val) (simple-struct-set! oR48c3@x '1 oR48c4@val))) (set! oR4c06@oR317e@set-env-labels! oR317e@set-env-labels!) (set! oR3180@env-itc (lambda (oR48c7@x) (simple-struct-ref oR48c7@x '2))) (set! oR4c07@oR3180@env-itc oR3180@env-itc) (set! oR3182@set-env-itc! (lambda (oR48c9@x oR48ca@val) (simple-struct-set! oR48c9@x '2 oR48ca@val))) (set! oR4c08@oR3182@set-env-itc! oR3182@set-env-itc!) (set! oR3184@dummy '3) (set! oR4c09@oR3184@dummy oR3184@dummy) (set! oR3186@rp (oR2a21@oR28fc@make-record-printer 'interaction-env (lambda (oR48cd@x oR48ce@p oR48cf@wr) (display '"#<environment>" oR48ce@p)))) (set! oR4c0a@oR3186@rp oR3186@rp) (set! oR3190@interaction-env? (lambda (oR48d3@x) (and (simple-struct? oR48d3@x) (eq? (simple-struct-name oR48d3@x) 'interaction-env)))) (set! oR4c0b@oR3190@interaction-env? oR3190@interaction-env?) (set! oR3192@interaction-env-rib (lambda (oR48d5@x) (simple-struct-ref oR48d5@x '0))) (set! oR4c0c@oR3192@interaction-env-rib oR3192@interaction-env-rib) (set! oR3194@set-interaction-env-rib! (lambda (oR48d7@x oR48d8@val) (simple-struct-set! oR48d7@x '0 oR48d8@val))) (set! oR4c0d@oR3194@set-interaction-env-rib! oR3194@set-interaction-env-rib!) (set! oR3196@interaction-env-r (lambda (oR48db@x) (simple-struct-ref oR48db@x '1))) (set! oR4c0e@oR3196@interaction-env-r oR3196@interaction-env-r) (set! oR3198@set-interaction-env-r! (lambda (oR48dd@x oR48de@val) (simple-struct-set! oR48dd@x '1 oR48de@val))) (set! oR4c0f@oR3198@set-interaction-env-r! oR3198@set-interaction-env-r!) (set! oR319a@interaction-env-locs (lambda (oR48e1@x) (simple-struct-ref oR48e1@x '2))) (set! oR4c10@oR319a@interaction-env-locs oR319a@interaction-env-locs) (set! oR319c@set-interaction-env-locs! (lambda (oR48e3@x oR48e4@val) (simple-struct-set! oR48e3@x '2 oR48e4@val))) (set! oR4c11@oR319c@set-interaction-env-locs! oR319c@set-interaction-env-locs!) (set! oR319e@dummy '3) (set! oR4c12@oR319e@dummy oR319e@dummy) (set! oR31a0@interaction-environment-symbols (lambda () (oR31a8@environment-symbols (oR31e0@interaction-environment)))) (set! oR4c13@oR31a0@interaction-environment-symbols oR31a0@interaction-environment-symbols) (set! oR31a2@environment-bindings (lambda (oR48e7@e) (vector->list (vector-map (lambda (oR48e9@name oR48ea@label) (oR31a4@parse-binding (cons oR48e9@name (oR2cff@oR2b3c@imported-label->binding oR48ea@label)))) (oR3178@env-names oR48e7@e) (oR317c@env-labels oR48e7@e))))) (set! oR4c14@oR31a2@environment-bindings oR31a2@environment-bindings) (set! oR31a4@parse-binding (lambda (oR48ed@b) (cons (car oR48ed@b) (let ((oR48ef@t (cadr oR48ed@b))) (if (memv oR48ef@t '(core-prim global)) 'procedure (if (memv oR48ef@t '(core-macro macro global-macro)) 'syntax (if (memv oR48ef@t '($core-rtd)) 'record (if (eq? (car oR48ed@b) (cadr oR48ed@b)) 'syntax 'unknown)))))))) (set! oR4c15@oR31a4@parse-binding oR31a4@parse-binding) (set! oR31a6@environment? (lambda (oR48f1@x) (or (oR3176@env? oR48f1@x) (oR3190@interaction-env? oR48f1@x)))) (set! oR4c16@oR31a6@environment? oR31a6@environment?) (set! oR31a8@environment-symbols (lambda (oR48f3@x) (if (oR3176@env? oR48f3@x) (vector->list (oR3178@env-names oR48f3@x)) (if (oR3190@interaction-env? oR48f3@x) (map values (oR2e89@rib-sym* (oR3192@interaction-env-rib oR48f3@x))) (assertion-violation 'environment-symbols '"not an environment" oR48f3@x))))) (set! oR4c17@oR31a8@environment-symbols oR31a8@environment-symbols) (set! oR31aa@environment (lambda oR48f5@imp* (let ((oR48f7@itc (oR3158@make-collector))) (let ((oR48fd@oR48fa oR315e@imp-collector) (oR48fe@oR48fc oR48f7@itc)) (let ((oR4901@swap (lambda () (let ((oR4903@t (oR48fd@oR48fa))) (begin (oR48fd@oR48fa oR48fe@oR48fc) (set! oR48fe@oR48fc oR4903@t)))))) (dynamic-wind oR4901@swap (lambda () (call-with-values (lambda () (oR3154@parse-import-spec* oR48f5@imp*)) (lambda (oR4909@oR4906 oR490a@oR4908) (let ((oR490d@subst-labels oR490a@oR4908) (oR490e@subst-names oR4909@oR4906)) (make-simple-struct 'env '4 (list oR490e@subst-names oR490d@subst-labels oR48f7@itc)))))) oR4901@swap)))))) (set! oR4c18@oR31aa@environment oR31aa@environment) (set! oR31ac@null-environment (lambda (oR4911@n) (begin (if (not (eqv? oR4911@n '5)) (assertion-violation 'null-environment '"not 5" oR4911@n) (void)) (oR31aa@environment '(psyntax null-environment-5))))) (set! oR4c19@oR31ac@null-environment oR31ac@null-environment) (set! oR31ae@scheme-report-environment (lambda (oR4913@n) (begin (if (not (eqv? oR4913@n '5)) (assertion-violation 'scheme-report-environment '"not 5" oR4913@n) (void)) (oR31aa@environment '(psyntax scheme-report-environment-5))))) (set! oR4c1a@oR31ae@scheme-report-environment oR31ae@scheme-report-environment) (set! oR31b0@expand (lambda (oR4915@x oR4916@env) (if (oR3176@env? oR4916@env) (let ((oR4919@rib (oR3156@make-top-rib (oR3178@env-names oR4916@env) (oR317c@env-labels oR4916@env)))) (let ((oR491b@x (make-simple-struct 'stx '5 (list oR4915@x oR2e6f@top-mark* (list oR4919@rib) '()))) (oR491c@itc (oR3180@env-itc oR4916@env)) (oR491d@rtc (oR3158@make-collector)) (oR491e@vtc (oR3158@make-collector))) (let ((oR4923@x (let ((oR4935@oR4926 oR31e2@top-level-context) (oR4936@oR4928 oR315a@inv-collector) (oR4937@oR492a oR315c@vis-collector) (oR4938@oR492c oR315e@imp-collector) (oR4939@oR492e '#f) (oR493a@oR4930 oR491d@rtc) (oR493b@oR4932 oR491e@vtc) (oR493c@oR4934 oR491c@itc)) (let ((oR4945@swap (lambda () (begin (let ((oR4947@t (oR4935@oR4926))) (begin (oR4935@oR4926 oR4939@oR492e) (set! oR4939@oR492e oR4947@t))) (let ((oR4949@t (oR4936@oR4928))) (begin (oR4936@oR4928 oR493a@oR4930) (set! oR493a@oR4930 oR4949@t))) (let ((oR494b@t (oR4937@oR492a))) (begin (oR4937@oR492a oR493b@oR4932) (set! oR493b@oR4932 oR494b@t))) (let ((oR494d@t (oR4938@oR492c))) (begin (oR4938@oR492c oR493c@oR4934) (set! oR493c@oR4934 oR494d@t))))))) (dynamic-wind oR4945@swap (lambda () (oR3114@chi-expr oR491b@x '() '())) oR4945@swap))))) (begin (oR2ea7@seal-rib! oR4919@rib) (values oR4923@x (oR491d@rtc)))))) (if (oR3190@interaction-env? oR4916@env) (let ((oR494f@rib (oR3192@interaction-env-rib oR4916@env)) (oR4950@r (oR3196@interaction-env-r oR4916@env)) (oR4951@rtc (oR3158@make-collector))) (let ((oR4955@x (make-simple-struct 'stx '5 (list oR4915@x oR2e6f@top-mark* (list oR494f@rib) '())))) (call-with-values (lambda () (let ((oR496b@oR495c oR31e2@top-level-context) (oR496c@oR495e oR315a@inv-collector) (oR496d@oR4960 oR315c@vis-collector) (oR496e@oR4962 oR315e@imp-collector) (oR496f@oR4964 oR4916@env) (oR4970@oR4966 oR4951@rtc) (oR4971@oR4968 (oR3158@make-collector)) (oR4972@oR496a (oR3158@make-collector))) (let ((oR497b@swap (lambda () (begin (let ((oR497d@t (oR496b@oR495c))) (begin (oR496b@oR495c oR496f@oR4964) (set! oR496f@oR4964 oR497d@t))) (let ((oR497f@t (oR496c@oR495e))) (begin (oR496c@oR495e oR4970@oR4966) (set! oR4970@oR4966 oR497f@t))) (let ((oR4981@t (oR496d@oR4960))) (begin (oR496d@oR4960 oR4971@oR4968) (set! oR4971@oR4968 oR4981@t))) (let ((oR4983@t (oR496e@oR4962))) (begin (oR496e@oR4962 oR4972@oR496a) (set! oR4972@oR496a oR4983@t))))))) (dynamic-wind oR497b@swap (lambda () (oR3162@chi-interaction-expr oR4955@x oR494f@rib oR4950@r)) oR497b@swap)))) (lambda (oR4985@oR4958 oR4986@oR495a) (let ((oR4989@r^ oR4986@oR495a) (oR498a@e oR4985@oR4958)) (begin (oR3198@set-interaction-env-r! oR4916@env oR4989@r^) (values oR498a@e (oR4951@rtc)))))))) (assertion-violation 'expand '"not an environment" oR4916@env))))) (set! oR4c1b@oR31b0@expand oR31b0@expand) (set! oR31b2@eval (lambda (oR498d@x oR498e@env) (begin (if (not (oR31a6@environment? oR498e@env)) (error 'eval '"not an environment" oR498e@env) (void)) (call-with-values (lambda () (oR31b0@expand oR498d@x oR498e@env)) (lambda (oR4995@oR4992 oR4996@oR4994) (let ((oR4999@invoke-req* oR4996@oR4994) (oR499a@x oR4995@oR4992)) (begin (for-each oR2d00@oR2b3e@invoke-library oR4999@invoke-req*) (eval-core (oR2a7a@oR2a32@expanded->core oR499a@x))))))))) (set! oR4c1c@oR31b2@eval oR31b2@eval) (set! oR31b4@library-expander (lambda oR4a0b (let ((oR4a0c (length oR4a0b))) (if (= oR4a0c '3) (apply (lambda (oR499d@x oR499e@filename oR499f@verify-name) (let ((oR49a4@build-visit-code '#f) (oR49a6@visit! '#f)) (begin (set! oR49a4@build-visit-code (lambda (oR49f9@macro*) (if (null? oR49f9@macro*) (oR2e51@oR2dac@build-void) (oR2e50@oR2daa@build-sequence '#f (map (lambda (oR49fb@x) (let ((oR49fd@loc (car oR49fb@x)) (oR49fe@src (cddr oR49fb@x))) (list 'set! oR49fd@loc oR49fe@src))) oR49f9@macro*))))) (set! oR49a6@visit! (lambda (oR49f1@macro*) (for-each (lambda (oR49f3@x) (let ((oR49f5@loc (car oR49f3@x)) (oR49f6@proc (cadr oR49f3@x))) (set-symbol-value! oR49f5@loc oR49f6@proc))) oR49f1@macro*))) (call-with-values (lambda () (oR3166@core-library-expander oR499d@x oR499f@verify-name)) (lambda (oR49b9@oR49a8 oR49ba@oR49aa oR49bb@oR49ac oR49bc@oR49ae oR49bd@oR49b0 oR49be@oR49b2 oR49bf@oR49b4 oR49c0@oR49b6 oR49c1@oR49b8) (let ((oR49cb@export-env oR49c1@oR49b8) (oR49cc@export-subst oR49c0@oR49b6) (oR49cd@macro* oR49bf@oR49b4) (oR49ce@invoke-code oR49be@oR49b2) (oR49cf@vis* oR49bd@oR49b0) (oR49d0@inv* oR49bc@oR49ae) (oR49d1@imp* oR49bb@oR49ac) (oR49d2@ver oR49ba@oR49aa) (oR49d3@name oR49b9@oR49a8)) (let ((oR49dd@id (gensym)) (oR49de@name oR49d3@name) (oR49df@ver oR49d2@ver) (oR49e0@imp* (map oR2d05@oR2b48@library-spec oR49d1@imp*)) (oR49e1@vis* (map oR2d05@oR2b48@library-spec oR49cf@vis*)) (oR49e2@inv* (map oR2d05@oR2b48@library-spec oR49d0@inv*)) (oR49e3@visit-proc (lambda () (oR49a6@visit! oR49cd@macro*))) (oR49e4@invoke-proc (lambda () (eval-core (oR2a7a@oR2a32@expanded->core oR49ce@invoke-code)))) (oR49e5@visit-code (oR49a4@build-visit-code oR49cd@macro*)) (oR49e6@invoke-code oR49ce@invoke-code)) (begin (oR2cfe@oR2b3a@install-library oR49dd@id oR49de@name oR49df@ver oR49e0@imp* oR49e1@vis* oR49e2@inv* oR49cc@export-subst oR49cb@export-env oR49e3@visit-proc oR49e4@invoke-proc oR49e5@visit-code oR49e6@invoke-code '#t oR499e@filename) (values oR49dd@id oR49de@name oR49df@ver oR49e0@imp* oR49e1@vis* oR49e2@inv* oR49e6@invoke-code oR49e5@visit-code oR49cc@export-subst oR49cb@export-env))))))))) oR4a0b) (if (= oR4a0c '2) (apply (lambda (oR4a01@x oR4a02@filename) (oR31b4@library-expander oR4a01@x oR4a02@filename (lambda (oR4a05@x) (values)))) oR4a0b) (if (= oR4a0c '1) (apply (lambda (oR4a07@x) (oR31b4@library-expander oR4a07@x '#f (lambda (oR4a09@x) (values)))) oR4a0b) (error 'apply '"invalid arg count"))))))) (set! oR4c1d@oR31b4@library-expander oR31b4@library-expander) (set! oR31b6@boot-library-expand (lambda (oR4a0d@x) (call-with-values (lambda () (oR31b4@library-expander oR4a0d@x)) (lambda (oR4a23@oR4a10 oR4a24@oR4a12 oR4a25@oR4a14 oR4a26@oR4a16 oR4a27@oR4a18 oR4a28@oR4a1a oR4a29@oR4a1c oR4a2a@oR4a1e oR4a2b@oR4a20 oR4a2c@oR4a22) (let ((oR4a37@export-env oR4a2c@oR4a22) (oR4a38@export-subst oR4a2b@oR4a20) (oR4a39@visit-code oR4a2a@oR4a1e) (oR4a3a@invoke-code oR4a29@oR4a1c) (oR4a3b@inv* oR4a28@oR4a1a) (oR4a3c@vis* oR4a27@oR4a18) (oR4a3d@imp* oR4a26@oR4a16) (oR4a3e@ver oR4a25@oR4a14) (oR4a3f@name oR4a24@oR4a12) (oR4a40@id oR4a23@oR4a10)) (values oR4a3f@name oR4a3a@invoke-code oR4a38@export-subst oR4a37@export-env)))))) (set! oR4c1e@oR31b6@boot-library-expand oR31b6@boot-library-expand) (set! oR31b8@rev-map-append (lambda (oR4a4b@f oR4a4c@ls oR4a4d@ac) (if (null? oR4a4c@ls) oR4a4d@ac (oR31b8@rev-map-append oR4a4b@f (cdr oR4a4c@ls) (cons (oR4a4b@f (car oR4a4c@ls)) oR4a4d@ac))))) (set! oR4c1f@oR31b8@rev-map-append oR31b8@rev-map-append) (set! oR31ba@build-exports (lambda (oR4a51@lex*+loc* oR4a52@init*) (oR2e50@oR2daa@build-sequence '#f (cons (oR2e51@oR2dac@build-void) (oR31b8@rev-map-append (lambda (oR4a55@x) (list 'set! (cdr oR4a55@x) (car oR4a55@x))) oR4a51@lex*+loc* oR4a52@init*))))) (set! oR4c20@oR31ba@build-exports oR31ba@build-exports) (set! oR31bc@make-export-subst (lambda (oR4a57@name* oR4a58@id*) (map (lambda (oR4a5b@name oR4a5c@id) (let ((oR4a5f@label (oR2f01@id->label oR4a5c@id))) (begin (if (not oR4a5f@label) (oR31d2@syntax-violation '#f '"cannot export unbound identifier" oR4a5c@id) (void)) (cons oR4a5b@name oR4a5f@label)))) oR4a57@name* oR4a58@id*))) (set! oR4c21@oR31bc@make-export-subst oR31bc@make-export-subst) (set! oR31be@make-export-env/macros (lambda (oR4a61@lex* oR4a62@loc* oR4a63@r) (let ((oR4a68@lookup '#f)) (begin (set! oR4a68@lookup (lambda (oR4a85@x) (let oR4a8d@f ((oR4a87@x oR4a85@x) (oR4a88@lex* oR4a61@lex*) (oR4a89@loc* oR4a62@loc*)) (if (pair? oR4a88@lex*) (if (eq? oR4a87@x (car oR4a88@lex*)) (car oR4a89@loc*) (oR4a8d@f oR4a87@x (cdr oR4a88@lex*) (cdr oR4a89@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let oR4a71@f ((oR4a69@r oR4a63@r) (oR4a6a@env '()) (oR4a6b@global* '()) (oR4a6c@macro* '())) (if (null? oR4a69@r) (values oR4a6a@env oR4a6b@global* oR4a6c@macro*) (let ((oR4a73@x (car oR4a69@r))) (let ((oR4a75@label (car oR4a73@x)) (oR4a76@b (cdr oR4a73@x))) (let ((oR4a79@t (oR2f07@binding-type oR4a76@b))) (if (memv oR4a79@t '(lexical)) (let ((oR4a7b@v (oR2f09@binding-value oR4a76@b))) (let ((oR4a7d@loc (oR4a68@lookup (oR307c@lexical-var oR4a7b@v))) (oR4a7e@type (if (oR307e@lexical-mutable? oR4a7b@v) 'mutable 'global))) (oR4a71@f (cdr oR4a69@r) (cons (cons* oR4a75@label oR4a7e@type oR4a7d@loc) oR4a6a@env) (cons (cons (oR307c@lexical-var oR4a7b@v) oR4a7d@loc) oR4a6b@global*) oR4a6c@macro*))) (if (memv oR4a79@t '(local-macro)) (let ((oR4a81@loc (gensym))) (oR4a71@f (cdr oR4a69@r) (cons (cons* oR4a75@label 'global-macro oR4a81@loc) oR4a6a@env) oR4a6b@global* (cons (cons oR4a81@loc (oR2f09@binding-value oR4a76@b)) oR4a6c@macro*))) (if (memv oR4a79@t '(local-macro!)) (let ((oR4a83@loc (gensym))) (oR4a71@f (cdr oR4a69@r) (cons (cons* oR4a75@label 'global-macro! oR4a83@loc) oR4a6a@env) oR4a6b@global* (cons (cons oR4a83@loc (oR2f09@binding-value oR4a76@b)) oR4a6c@macro*))) (if (memv oR4a79@t '($rtd $module)) (oR4a71@f (cdr oR4a69@r) (cons oR4a73@x oR4a6a@env) oR4a6b@global* oR4a6c@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (oR2f07@binding-type oR4a76@b) (oR2f09@binding-value oR4a76@b))))))))))))))) (set! oR4c22@oR31be@make-export-env/macros oR31be@make-export-env/macros) (set! oR31c0@generate-temporaries (lambda (oR4a8f@ls) (let ((oR4a91@t oR4a8f@ls)) (let ((oR4a93@ls/false (oR30f2@syntax-dispatch oR4a91@t 'each-any))) (if oR4a93@ls/false (apply (lambda (oR4a95@ls) (map (lambda (oR4a97@x) (make-simple-struct 'stx '5 (list (let ((oR4a99@x (oR31d8@syntax->datum oR4a97@x))) (if (or (symbol? oR4a99@x) (string? oR4a99@x)) (gensym oR4a99@x) (gensym 't))) oR2e6f@top-mark* '() '()))) oR4a95@ls)) oR4a93@ls/false) (let ((oR4a9b@t oR4a91@t)) (let ((oR4a9d@ls/false (oR30f2@syntax-dispatch oR4a9b@t '_))) (if oR4a9d@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) oR4a9d@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4a9b@t))))))))) (set! oR4c23@oR31c0@generate-temporaries oR31c0@generate-temporaries) (set! oR31c2@free-identifier=? (lambda (oR4a9f@x oR4aa0@y) (if (oR2eeb@id? oR4a9f@x) (if (oR2eeb@id? oR4aa0@y) (oR2ef1@free-id=? oR4a9f@x oR4aa0@y) (assertion-violation 'free-identifier=? '"not an identifier" oR4aa0@y)) (assertion-violation 'free-identifier=? '"not an identifier" oR4a9f@x)))) (set! oR4c24@oR31c2@free-identifier=? oR31c2@free-identifier=?) (set! oR31c4@bound-identifier=? (lambda (oR4aa3@x oR4aa4@y) (if (oR2eeb@id? oR4aa3@x) (if (oR2eeb@id? oR4aa4@y) (oR2eef@bound-id=? oR4aa3@x oR4aa4@y) (assertion-violation 'bound-identifier=? '"not an identifier" oR4aa4@y)) (assertion-violation 'bound-identifier=? '"not an identifier" oR4aa3@x)))) (set! oR4c25@oR31c4@bound-identifier=? oR31c4@bound-identifier=?) (set! oR31c6@make-source-condition (lambda (oR4aa7@x) (let ((oR4ab1@oR4aac '#f) (oR4ab3@oR4aae '#f) (oR4ab5@oR4aad '#f) (oR4ab8@oR4aab '#f) (oR4aba@make-source-condition '#f) (oR4abc@oR4aa9 '#f) (oR4abe@oR4aaa '#f) (oR4ac0@source-condition? '#f) (oR4ac2@source-filename '#f) (oR4ac4@source-character '#f)) (begin (set! oR4ab1@oR4aac (make-record-type-descriptor '&source-information oR4f07@oR4c4e@&condition-rtd 'oR4aaf '#f '#f '#((immutable file-name) (immutable character)))) (set! oR4ab3@oR4aae '#f) (set! oR4ab5@oR4aad (make-record-constructor-descriptor oR4ab1@oR4aac oR4f08@oR4c50@&condition-rcd oR4ab3@oR4aae)) (set! oR4ab8@oR4aab (record-predicate oR4ab1@oR4aac)) (set! oR4aba@make-source-condition (record-constructor oR4ab5@oR4aad)) (set! oR4abc@oR4aa9 (record-accessor oR4ab1@oR4aac '0)) (set! oR4abe@oR4aaa (record-accessor oR4ab1@oR4aac '1)) (set! oR4ac0@source-condition? (condition-predicate oR4ab1@oR4aac)) (set! oR4ac2@source-filename (condition-accessor oR4ab1@oR4aac oR4abc@oR4aa9)) (set! oR4ac4@source-character (condition-accessor oR4ab1@oR4aac oR4abe@oR4aaa)) (if (pair? oR4aa7@x) (oR4aba@make-source-condition (car oR4aa7@x) (cdr oR4aa7@x)) (condition)))))) (set! oR4c26@oR31c6@make-source-condition oR31c6@make-source-condition) (set! oR31c8@extract-position-condition (lambda (oR4ac5@x) (oR31c6@make-source-condition (oR31ca@expression-position oR4ac5@x)))) (set! oR4c27@oR31c8@extract-position-condition oR31c8@extract-position-condition) (set! oR31ca@expression-position (lambda (oR4ac7@x) (and (oR2eb7@stx? oR4ac7@x) (let ((oR4ac9@x (oR2eb9@stx-expr oR4ac7@x))) (and (oR2a18@oR28ea@annotation? oR4ac9@x) (oR2a19@oR28ec@annotation-source oR4ac9@x)))))) (set! oR4c28@oR31ca@expression-position oR31ca@expression-position) (set! oR31cc@assertion-error (lambda (oR4acb@expr oR4acc@pos) (raise (condition (oR4f37@oR4d12@make-assertion-violation) (oR4f49@oR4d44@make-who-condition 'assert) (oR4f0d@oR4ca5@make-message-condition '"assertion failed") (oR4f3f@oR4d29@make-irritants-condition (list oR4acb@expr)) (oR31c6@make-source-condition oR4acc@pos))))) (set! oR4c29@oR31cc@assertion-error oR31cc@assertion-error) (set! oR31ce@syntax-error (lambda (oR4acf@x . oR4ad1@args) (begin (if (not (for-all string? oR4ad1@args)) (assertion-violation 'syntax-error '"invalid argument" oR4ad1@args) (void)) (raise (condition (oR4f0d@oR4ca5@make-message-condition (if (null? oR4ad1@args) '"invalid syntax" (apply string-append oR4ad1@args))) (oR4f6b@oR4da0@make-syntax-violation (oR31d8@syntax->datum oR4acf@x) '#f) (oR31c8@extract-position-condition oR4acf@x)))))) (set! oR4c2a@oR31ce@syntax-error oR31ce@syntax-error) (set! oR31d0@syntax-violation* (lambda (oR4ad3@who oR4ad4@msg oR4ad5@form oR4ad6@condition-object) (begin (if (not (string? oR4ad4@msg)) (assertion-violation 'syntax-violation '"message is not a string" oR4ad4@msg) (void)) (let ((oR4adb@who (if (or (string? oR4ad3@who) (symbol? oR4ad3@who)) oR4ad3@who (if (not oR4ad3@who) (let ((oR4add@t oR4ad5@form)) (let ((oR4adf@ls/false (oR30f2@syntax-dispatch oR4add@t 'any))) (if (and oR4adf@ls/false (apply (lambda (oR4ae1@id) (oR2eeb@id? oR4ae1@id)) oR4adf@ls/false)) (apply (lambda (oR4ae3@id) (oR31d8@syntax->datum oR4ae3@id)) oR4adf@ls/false) (let ((oR4ae5@t oR4add@t)) (let ((oR4ae7@ls/false (oR30f2@syntax-dispatch oR4ae5@t '(any . any)))) (if (and oR4ae7@ls/false (apply (lambda (oR4ae9@id oR4aea@rest) (oR2eeb@id? oR4ae9@id)) oR4ae7@ls/false)) (apply (lambda (oR4aed@id oR4aee@rest) (oR31d8@syntax->datum oR4aed@id)) oR4ae7@ls/false) (let ((oR4af1@t oR4ae5@t)) (let ((oR4af3@ls/false (oR30f2@syntax-dispatch oR4af1@t '_))) (if oR4af3@ls/false (apply (lambda () '#f) oR4af3@ls/false) (oR31d2@syntax-violation '#f '"invalid syntax" oR4af1@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" oR4ad3@who))))) (raise (condition (if oR4adb@who (oR4f49@oR4d44@make-who-condition oR4adb@who) (condition)) (oR4f0d@oR4ca5@make-message-condition oR4ad4@msg) oR4ad6@condition-object (oR31c8@extract-position-condition oR4ad5@form))))))) (set! oR4c2b@oR31d0@syntax-violation* oR31d0@syntax-violation*) (set! oR31d2@syntax-violation (lambda oR4b03 (let ((oR4b04 (length oR4b03))) (if (= oR4b04 '3) (apply (lambda (oR4af5@who oR4af6@msg oR4af7@form) (oR31d2@syntax-violation oR4af5@who oR4af6@msg oR4af7@form '#f)) oR4b03) (if (= oR4b04 '4) (apply (lambda (oR4afb@who oR4afc@msg oR4afd@form oR4afe@subform) (oR31d0@syntax-violation* oR4afb@who oR4afc@msg oR4afd@form (oR4f6b@oR4da0@make-syntax-violation (oR31d8@syntax->datum oR4afd@form) (oR31d8@syntax->datum oR4afe@subform)))) oR4b03) (error 'apply '"invalid arg count")))))) (set! oR4c2c@oR31d2@syntax-violation oR31d2@syntax-violation) (set! oR31d4@identifier? (lambda (oR4b05@x) (oR2eeb@id? oR4b05@x))) (set! oR4c2d@oR31d4@identifier? oR31d4@identifier?) (set! oR31d6@datum->syntax (lambda (oR4b07@id oR4b08@datum) (if (oR2eeb@id? oR4b07@id) (oR2ecb@datum->stx oR4b07@id oR4b08@datum) (assertion-violation 'datum->syntax '"not an identifier" oR4b07@id)))) (set! oR4c2e@oR31d6@datum->syntax oR31d6@datum->syntax) (set! oR31d8@syntax->datum (lambda (oR4b0b@x) (oR2eff@stx->datum oR4b0b@x))) (set! oR4c2f@oR31d8@syntax->datum oR31d8@syntax->datum) (set! oR31da@ungensym-all (lambda (oR4b0d@code) (if (pair? oR4b0d@code) (cons (oR31da@ungensym-all (car oR4b0d@code)) (oR31da@ungensym-all (cdr oR4b0d@code))) (if (symbol? oR4b0d@code) (ungensym oR4b0d@code) oR4b0d@code)))) (set! oR4c30@oR31da@ungensym-all oR31da@ungensym-all) (set! oR31dc@compile-r6rs-top-level (lambda (oR4b0f@x*) (call-with-values (lambda () (oR316a@top-level-expander oR4b0f@x*)) (lambda (oR4b15@oR4b12 oR4b16@oR4b14) (let ((oR4b19@invoke-code oR4b16@oR4b14) (oR4b1a@lib* oR4b15@oR4b12)) (lambda () (begin (for-each oR2d00@oR2b3e@invoke-library oR4b1a@lib*) (let ((oR4b1d@expanded (oR2a7a@oR2a32@expanded->core oR4b19@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (oR31da@ungensym-all oR4b1d@expanded)) (void)) (eval-core oR4b1d@expanded)))))))))) (set! oR4c31@oR31dc@compile-r6rs-top-level oR31dc@compile-r6rs-top-level) (set! oR31de@pre-compile-r6rs-top-level (lambda (oR4b1f@x*) (call-with-values (lambda () (oR316a@top-level-expander oR4b1f@x*)) (lambda (oR4b25@oR4b22 oR4b26@oR4b24) (let ((oR4b29@invoke-code oR4b26@oR4b24) (oR4b2a@lib* oR4b25@oR4b22)) (begin (for-each oR2d00@oR2b3e@invoke-library oR4b2a@lib*) (oR2a22@oR28fe@compile-core (oR2a7a@oR2a32@expanded->core oR4b29@invoke-code)))))))) (set! oR4c32@oR31de@pre-compile-r6rs-top-level oR31de@pre-compile-r6rs-top-level) (set! oR31e0@interaction-environment (let ((oR4b2d@the-env '#f)) (lambda () (or oR4b2d@the-env (let ((oR4b2f@lib (oR2cf9@oR2b30@find-library-by-name '(mosh interaction))) (oR4b30@rib (oR2e9f@make-empty-rib))) (begin (let ((oR4b33@subst (oR2cdb@oR2af4@library-subst oR4b2f@lib))) (begin (oR2e8b@set-rib-sym*! oR4b30@rib (map car oR4b33@subst)) (oR2e8f@set-rib-mark**! oR4b30@rib (map (lambda (oR4b35@x) oR2e6f@top-mark*) oR4b33@subst)) (oR2e93@set-rib-label*! oR4b30@rib (map cdr oR4b33@subst)))) (let ((oR4b37@env (make-simple-struct 'interaction-env '4 (list oR4b30@rib '() '())))) (begin (set! oR4b2d@the-env oR4b37@env) oR4b37@env)))))))) (set! oR4c33@oR31e0@interaction-environment oR31e0@interaction-environment) (set! oR31e2@top-level-context (oR2a24@oR2902@make-parameter '#f)) (set! oR4c34@oR31e2@top-level-context oR31e2@top-level-context) (oR2cf6@oR2b2a@current-library-expander oR31b4@library-expander))
(begin (set! oR4c43@oR4c3e (unspecified)) (set! oR4c45@oR4c40 (unspecified)) (set! oR4c47@oR4c3f (unspecified)) (set! oR4c4a@&condition? (unspecified)) (set! oR4c4c@make-&condition (unspecified)) (set! oR4c4e@&condition-rtd (unspecified)) (set! oR4c50@&condition-rcd (unspecified)) (set! oR4c9c@oR4c97 (unspecified)) (set! oR4c9e@oR4c99 (unspecified)) (set! oR4ca0@oR4c98 (unspecified)) (set! oR4ca3@p? (unspecified)) (set! oR4ca5@make-message-condition (unspecified)) (set! oR4ca7@oR4c96 (unspecified)) (set! oR4ca9@message-condition? (unspecified)) (set! oR4cab@condition-message (unspecified)) (set! oR4cad@&message-rtd (unspecified)) (set! oR4caf@&message-rcd (unspecified)) (set! oR4cb5@oR4cb0 (unspecified)) (set! oR4cb7@oR4cb2 (unspecified)) (set! oR4cb9@oR4cb1 (unspecified)) (set! oR4cbc@p? (unspecified)) (set! oR4cbe@make-warning (unspecified)) (set! oR4cc0@warning? (unspecified)) (set! oR4cc2@&warning-rtd (unspecified)) (set! oR4cc4@&warning-rcd (unspecified)) (set! oR4cca@oR4cc5 (unspecified)) (set! oR4ccc@oR4cc7 (unspecified)) (set! oR4cce@oR4cc6 (unspecified)) (set! oR4cd1@p? (unspecified)) (set! oR4cd3@make-serious-condition (unspecified)) (set! oR4cd5@serious-condition? (unspecified)) (set! oR4cd7@&serious-rtd (unspecified)) (set! oR4cd9@&serious-rcd (unspecified)) (set! oR4cdf@oR4cda (unspecified)) (set! oR4ce1@oR4cdc (unspecified)) (set! oR4ce3@oR4cdb (unspecified)) (set! oR4ce6@p? (unspecified)) (set! oR4ce8@make-error (unspecified)) (set! oR4cea@error? (unspecified)) (set! oR4cec@&error-rtd (unspecified)) (set! oR4cee@&error-rcd (unspecified)) (set! oR4cf4@oR4cef (unspecified)) (set! oR4cf6@oR4cf1 (unspecified)) (set! oR4cf8@oR4cf0 (unspecified)) (set! oR4cfb@p? (unspecified)) (set! oR4cfd@make-violation (unspecified)) (set! oR4cff@violation? (unspecified)) (set! oR4d01@&violation-rtd (unspecified)) (set! oR4d03@&violation-rcd (unspecified)) (set! oR4d09@oR4d04 (unspecified)) (set! oR4d0b@oR4d06 (unspecified)) (set! oR4d0d@oR4d05 (unspecified)) (set! oR4d10@p? (unspecified)) (set! oR4d12@make-assertion-violation (unspecified)) (set! oR4d14@assertion-violation? (unspecified)) (set! oR4d16@&assertion-rtd (unspecified)) (set! oR4d18@&assertion-rcd (unspecified)) (set! oR4d20@oR4d1b (unspecified)) (set! oR4d22@oR4d1d (unspecified)) (set! oR4d24@oR4d1c (unspecified)) (set! oR4d27@p? (unspecified)) (set! oR4d29@make-irritants-condition (unspecified)) (set! oR4d2b@oR4d1a (unspecified)) (set! oR4d2d@irritants-condition? (unspecified)) (set! oR4d2f@condition-irritants (unspecified)) (set! oR4d31@&irritants-rtd (unspecified)) (set! oR4d33@&irritants-rcd (unspecified)) (set! oR4d3b@oR4d36 (unspecified)) (set! oR4d3d@oR4d38 (unspecified)) (set! oR4d3f@oR4d37 (unspecified)) (set! oR4d42@p? (unspecified)) (set! oR4d44@make-who-condition (unspecified)) (set! oR4d46@oR4d35 (unspecified)) (set! oR4d48@who-condition? (unspecified)) (set! oR4d4a@condition-who (unspecified)) (set! oR4d4c@&who-rtd (unspecified)) (set! oR4d4e@&who-rcd (unspecified)) (set! oR4d54@oR4d4f (unspecified)) (set! oR4d56@oR4d51 (unspecified)) (set! oR4d58@oR4d50 (unspecified)) (set! oR4d5b@p? (unspecified)) (set! oR4d5d@make-non-continuable-violation (unspecified)) (set! oR4d5f@non-continuable-violation? (unspecified)) (set! oR4d61@&non-continuable-rtd (unspecified)) (set! oR4d63@&non-continuable-rcd (unspecified)) (set! oR4d69@oR4d64 (unspecified)) (set! oR4d6b@oR4d66 (unspecified)) (set! oR4d6d@oR4d65 (unspecified)) (set! oR4d70@p? (unspecified)) (set! oR4d72@make-implementation-restriction-violation (unspecified)) (set! oR4d74@implementation-restriction-violation? (unspecified)) (set! oR4d76@&implementation-restriction-rtd (unspecified)) (set! oR4d78@&implementation-restriction-rcd (unspecified)) (set! oR4d7e@oR4d79 (unspecified)) (set! oR4d80@oR4d7b (unspecified)) (set! oR4d82@oR4d7a (unspecified)) (set! oR4d85@p? (unspecified)) (set! oR4d87@make-lexical-violation (unspecified)) (set! oR4d89@lexical-violation? (unspecified)) (set! oR4d8b@&lexical-rtd (unspecified)) (set! oR4d8d@&lexical-rcd (unspecified)) (set! oR4d97@oR4d92 (unspecified)) (set! oR4d99@oR4d94 (unspecified)) (set! oR4d9b@oR4d93 (unspecified)) (set! oR4d9e@p? (unspecified)) (set! oR4da0@make-syntax-violation (unspecified)) (set! oR4da2@oR4d8f (unspecified)) (set! oR4da4@oR4d91 (unspecified)) (set! oR4da6@syntax-violation? (unspecified)) (set! oR4da8@syntax-violation-form (unspecified)) (set! oR4daa@syntax-violation-subform (unspecified)) (set! oR4dac@&syntax-rtd (unspecified)) (set! oR4dae@&syntax-rcd (unspecified)) (set! oR4db4@oR4daf (unspecified)) (set! oR4db6@oR4db1 (unspecified)) (set! oR4db8@oR4db0 (unspecified)) (set! oR4dbb@p? (unspecified)) (set! oR4dbd@make-undefined-violation (unspecified)) (set! oR4dbf@undefined-violation? (unspecified)) (set! oR4dc1@&undefined-rtd (unspecified)) (set! oR4dc3@&undefined-rcd (unspecified)) (set! oR4dc9@oR4dc4 (unspecified)) (set! oR4dcb@oR4dc6 (unspecified)) (set! oR4dcd@oR4dc5 (unspecified)) (set! oR4dd0@p? (unspecified)) (set! oR4dd2@make-i/o-error (unspecified)) (set! oR4dd4@i/o-error? (unspecified)) (set! oR4dd6@&i/o-rtd (unspecified)) (set! oR4dd8@&i/o-rcd (unspecified)) (set! oR4dde@oR4dd9 (unspecified)) (set! oR4de0@oR4ddb (unspecified)) (set! oR4de2@oR4dda (unspecified)) (set! oR4de5@p? (unspecified)) (set! oR4de7@make-i/o-read-error (unspecified)) (set! oR4de9@i/o-read-error? (unspecified)) (set! oR4deb@&i/o-read-rtd (unspecified)) (set! oR4ded@&i/o-read-rcd (unspecified)) (set! oR4df3@oR4dee (unspecified)) (set! oR4df5@oR4df0 (unspecified)) (set! oR4df7@oR4def (unspecified)) (set! oR4dfa@p? (unspecified)) (set! oR4dfc@make-i/o-write-error (unspecified)) (set! oR4dfe@i/o-write-error? (unspecified)) (set! oR4e00@&i/o-write-rtd (unspecified)) (set! oR4e02@&i/o-write-rcd (unspecified)) (set! oR4e0a@oR4e05 (unspecified)) (set! oR4e0c@oR4e07 (unspecified)) (set! oR4e0e@oR4e06 (unspecified)) (set! oR4e11@p? (unspecified)) (set! oR4e13@make-i/o-invalid-position-error (unspecified)) (set! oR4e15@oR4e04 (unspecified)) (set! oR4e17@i/o-invalid-position-error? (unspecified)) (set! oR4e19@i/o-error-position (unspecified)) (set! oR4e1b@&i/o-invalid-position-rtd (unspecified)) (set! oR4e1d@&i/o-invalid-position-rcd (unspecified)) (set! oR4e25@oR4e20 (unspecified)) (set! oR4e27@oR4e22 (unspecified)) (set! oR4e29@oR4e21 (unspecified)) (set! oR4e2c@p? (unspecified)) (set! oR4e2e@make-i/o-filename-error (unspecified)) (set! oR4e30@oR4e1f (unspecified)) (set! oR4e32@i/o-filename-error? (unspecified)) (set! oR4e34@i/o-error-filename (unspecified)) (set! oR4e36@&i/o-filename-rtd (unspecified)) (set! oR4e38@&i/o-filename-rcd (unspecified)) (set! oR4e3e@oR4e39 (unspecified)) (set! oR4e40@oR4e3b (unspecified)) (set! oR4e42@oR4e3a (unspecified)) (set! oR4e45@p? (unspecified)) (set! oR4e47@make-i/o-file-protection-error (unspecified)) (set! oR4e49@i/o-file-protection-error? (unspecified)) (set! oR4e4b@&i/o-file-protection-rtd (unspecified)) (set! oR4e4d@&i/o-file-protection-rcd (unspecified)) (set! oR4e53@oR4e4e (unspecified)) (set! oR4e55@oR4e50 (unspecified)) (set! oR4e57@oR4e4f (unspecified)) (set! oR4e5a@p? (unspecified)) (set! oR4e5c@make-i/o-file-is-read-only-error (unspecified)) (set! oR4e5e@i/o-file-is-read-only-error? (unspecified)) (set! oR4e60@&i/o-file-is-read-only-rtd (unspecified)) (set! oR4e62@&i/o-file-is-read-only-rcd (unspecified)) (set! oR4e68@oR4e63 (unspecified)) (set! oR4e6a@oR4e65 (unspecified)) (set! oR4e6c@oR4e64 (unspecified)) (set! oR4e6f@p? (unspecified)) (set! oR4e71@make-i/o-file-already-exists-error (unspecified)) (set! oR4e73@i/o-file-already-exists-error? (unspecified)) (set! oR4e75@&i/o-file-already-exists-rtd (unspecified)) (set! oR4e77@&i/o-file-already-exists-rcd (unspecified)) (set! oR4e7d@oR4e78 (unspecified)) (set! oR4e7f@oR4e7a (unspecified)) (set! oR4e81@oR4e79 (unspecified)) (set! oR4e84@p? (unspecified)) (set! oR4e86@make-i/o-file-does-not-exist-error (unspecified)) (set! oR4e88@i/o-file-does-not-exist-error? (unspecified)) (set! oR4e8a@&i/o-file-does-not-exist-rtd (unspecified)) (set! oR4e8c@&i/o-file-does-not-exist-rcd (unspecified)) (set! oR4e94@oR4e8f (unspecified)) (set! oR4e96@oR4e91 (unspecified)) (set! oR4e98@oR4e90 (unspecified)) (set! oR4e9b@p? (unspecified)) (set! oR4e9d@make-i/o-port-error (unspecified)) (set! oR4e9f@oR4e8e (unspecified)) (set! oR4ea1@i/o-port-error? (unspecified)) (set! oR4ea3@i/o-error-port (unspecified)) (set! oR4ea5@&i/o-port-rtd (unspecified)) (set! oR4ea7@&i/o-port-rcd (unspecified)) (set! oR4ead@oR4ea8 (unspecified)) (set! oR4eaf@oR4eaa (unspecified)) (set! oR4eb1@oR4ea9 (unspecified)) (set! oR4eb4@p? (unspecified)) (set! oR4eb6@make-i/o-decoding-error (unspecified)) (set! oR4eb8@i/o-decoding-error? (unspecified)) (set! oR4eba@&i/o-decoding-rtd (unspecified)) (set! oR4ebc@&i/o-decoding-rcd (unspecified)) (set! oR4ec4@oR4ebf (unspecified)) (set! oR4ec6@oR4ec1 (unspecified)) (set! oR4ec8@oR4ec0 (unspecified)) (set! oR4ecb@p? (unspecified)) (set! oR4ecd@make-i/o-encoding-error (unspecified)) (set! oR4ecf@oR4ebe (unspecified)) (set! oR4ed1@i/o-encoding-error? (unspecified)) (set! oR4ed3@i/o-encoding-error-char (unspecified)) (set! oR4ed5@&i/o-encoding-rtd (unspecified)) (set! oR4ed7@&i/o-encoding-rcd (unspecified)) (set! oR4edd@oR4ed8 (unspecified)) (set! oR4edf@oR4eda (unspecified)) (set! oR4ee1@oR4ed9 (unspecified)) (set! oR4ee4@p? (unspecified)) (set! oR4ee6@make-no-infinities-violation (unspecified)) (set! oR4ee8@no-infinities-violation? (unspecified)) (set! oR4eea@&no-infinities-rtd (unspecified)) (set! oR4eec@&no-infinities-rcd (unspecified)) (set! oR4ef2@oR4eed (unspecified)) (set! oR4ef4@oR4eef (unspecified)) (set! oR4ef6@oR4eee (unspecified)) (set! oR4ef9@p? (unspecified)) (set! oR4efb@make-no-nans-violation (unspecified)) (set! oR4efd@no-nans-violation? (unspecified)) (set! oR4eff@&no-nans-rtd (unspecified)) (set! oR4f01@&no-nans-rcd (unspecified)) (set! oR4c43@oR4c3e (make-record-type-descriptor '&condition '#f 'oR4c41 '#f '#f '#())) (set! oR4f02@oR4c43@oR4c3e oR4c43@oR4c3e) (set! oR4c45@oR4c40 '#f) (set! oR4f03@oR4c45@oR4c40 oR4c45@oR4c40) (set! oR4c47@oR4c3f (make-record-constructor-descriptor oR4c43@oR4c3e '#f oR4c45@oR4c40)) (set! oR4f04@oR4c47@oR4c3f oR4c47@oR4c3f) (set! oR4c4a@&condition? (record-predicate oR4c43@oR4c3e)) (set! oR4f05@oR4c4a@&condition? oR4c4a@&condition?) (set! oR4c4c@make-&condition (record-constructor oR4c47@oR4c3f)) (set! oR4f06@oR4c4c@make-&condition oR4c4c@make-&condition) (set! oR4c4e@&condition-rtd oR4c43@oR4c3e) (set! oR4f07@oR4c4e@&condition-rtd oR4c4e@&condition-rtd) (set! oR4c50@&condition-rcd oR4c47@oR4c3f) (set! oR4f08@oR4c50@&condition-rcd oR4c50@&condition-rcd) (set! oR4c9c@oR4c97 (make-record-type-descriptor '&message oR4c43@oR4c3e 'oR4c9a '#f '#f '#((immutable message)))) (set! oR4f09@oR4c9c@oR4c97 oR4c9c@oR4c97) (set! oR4c9e@oR4c99 '#f) (set! oR4f0a@oR4c9e@oR4c99 oR4c9e@oR4c99) (set! oR4ca0@oR4c98 (make-record-constructor-descriptor oR4c9c@oR4c97 oR4c47@oR4c3f oR4c9e@oR4c99)) (set! oR4f0b@oR4ca0@oR4c98 oR4ca0@oR4c98) (set! oR4ca3@p? (record-predicate oR4c9c@oR4c97)) (set! oR4f0c@oR4ca3@p? oR4ca3@p?) (set! oR4ca5@make-message-condition (record-constructor oR4ca0@oR4c98)) (set! oR4f0d@oR4ca5@make-message-condition oR4ca5@make-message-condition) (set! oR4ca7@oR4c96 (record-accessor oR4c9c@oR4c97 '0)) (set! oR4f0e@oR4ca7@oR4c96 oR4ca7@oR4c96) (set! oR4ca9@message-condition? (condition-predicate oR4c9c@oR4c97)) (set! oR4f0f@oR4ca9@message-condition? oR4ca9@message-condition?) (set! oR4cab@condition-message (condition-accessor oR4c9c@oR4c97 oR4ca7@oR4c96)) (set! oR4f10@oR4cab@condition-message oR4cab@condition-message) (set! oR4cad@&message-rtd oR4c9c@oR4c97) (set! oR4f11@oR4cad@&message-rtd oR4cad@&message-rtd) (set! oR4caf@&message-rcd oR4ca0@oR4c98) (set! oR4f12@oR4caf@&message-rcd oR4caf@&message-rcd) (set! oR4cb5@oR4cb0 (make-record-type-descriptor '&warning oR4c43@oR4c3e 'oR4cb3 '#f '#f '#())) (set! oR4f13@oR4cb5@oR4cb0 oR4cb5@oR4cb0) (set! oR4cb7@oR4cb2 '#f) (set! oR4f14@oR4cb7@oR4cb2 oR4cb7@oR4cb2) (set! oR4cb9@oR4cb1 (make-record-constructor-descriptor oR4cb5@oR4cb0 oR4c47@oR4c3f oR4cb7@oR4cb2)) (set! oR4f15@oR4cb9@oR4cb1 oR4cb9@oR4cb1) (set! oR4cbc@p? (record-predicate oR4cb5@oR4cb0)) (set! oR4f16@oR4cbc@p? oR4cbc@p?) (set! oR4cbe@make-warning (record-constructor oR4cb9@oR4cb1)) (set! oR4f17@oR4cbe@make-warning oR4cbe@make-warning) (set! oR4cc0@warning? (condition-predicate oR4cb5@oR4cb0)) (set! oR4f18@oR4cc0@warning? oR4cc0@warning?) (set! oR4cc2@&warning-rtd oR4cb5@oR4cb0) (set! oR4f19@oR4cc2@&warning-rtd oR4cc2@&warning-rtd) (set! oR4cc4@&warning-rcd oR4cb9@oR4cb1) (set! oR4f1a@oR4cc4@&warning-rcd oR4cc4@&warning-rcd) (set! oR4cca@oR4cc5 (make-record-type-descriptor '&serious oR4c43@oR4c3e 'oR4cc8 '#f '#f '#())) (set! oR4f1b@oR4cca@oR4cc5 oR4cca@oR4cc5) (set! oR4ccc@oR4cc7 '#f) (set! oR4f1c@oR4ccc@oR4cc7 oR4ccc@oR4cc7) (set! oR4cce@oR4cc6 (make-record-constructor-descriptor oR4cca@oR4cc5 oR4c47@oR4c3f oR4ccc@oR4cc7)) (set! oR4f1d@oR4cce@oR4cc6 oR4cce@oR4cc6) (set! oR4cd1@p? (record-predicate oR4cca@oR4cc5)) (set! oR4f1e@oR4cd1@p? oR4cd1@p?) (set! oR4cd3@make-serious-condition (record-constructor oR4cce@oR4cc6)) (set! oR4f1f@oR4cd3@make-serious-condition oR4cd3@make-serious-condition) (set! oR4cd5@serious-condition? (condition-predicate oR4cca@oR4cc5)) (set! oR4f20@oR4cd5@serious-condition? oR4cd5@serious-condition?) (set! oR4cd7@&serious-rtd oR4cca@oR4cc5) (set! oR4f21@oR4cd7@&serious-rtd oR4cd7@&serious-rtd) (set! oR4cd9@&serious-rcd oR4cce@oR4cc6) (set! oR4f22@oR4cd9@&serious-rcd oR4cd9@&serious-rcd) (set! oR4cdf@oR4cda (make-record-type-descriptor '&error oR4cca@oR4cc5 'oR4cdd '#f '#f '#())) (set! oR4f23@oR4cdf@oR4cda oR4cdf@oR4cda) (set! oR4ce1@oR4cdc '#f) (set! oR4f24@oR4ce1@oR4cdc oR4ce1@oR4cdc) (set! oR4ce3@oR4cdb (make-record-constructor-descriptor oR4cdf@oR4cda oR4cce@oR4cc6 oR4ce1@oR4cdc)) (set! oR4f25@oR4ce3@oR4cdb oR4ce3@oR4cdb) (set! oR4ce6@p? (record-predicate oR4cdf@oR4cda)) (set! oR4f26@oR4ce6@p? oR4ce6@p?) (set! oR4ce8@make-error (record-constructor oR4ce3@oR4cdb)) (set! oR4f27@oR4ce8@make-error oR4ce8@make-error) (set! oR4cea@error? (condition-predicate oR4cdf@oR4cda)) (set! oR4f28@oR4cea@error? oR4cea@error?) (set! oR4cec@&error-rtd oR4cdf@oR4cda) (set! oR4f29@oR4cec@&error-rtd oR4cec@&error-rtd) (set! oR4cee@&error-rcd oR4ce3@oR4cdb) (set! oR4f2a@oR4cee@&error-rcd oR4cee@&error-rcd) (set! oR4cf4@oR4cef (make-record-type-descriptor '&violation oR4cca@oR4cc5 'oR4cf2 '#f '#f '#())) (set! oR4f2b@oR4cf4@oR4cef oR4cf4@oR4cef) (set! oR4cf6@oR4cf1 '#f) (set! oR4f2c@oR4cf6@oR4cf1 oR4cf6@oR4cf1) (set! oR4cf8@oR4cf0 (make-record-constructor-descriptor oR4cf4@oR4cef oR4cce@oR4cc6 oR4cf6@oR4cf1)) (set! oR4f2d@oR4cf8@oR4cf0 oR4cf8@oR4cf0) (set! oR4cfb@p? (record-predicate oR4cf4@oR4cef)) (set! oR4f2e@oR4cfb@p? oR4cfb@p?) (set! oR4cfd@make-violation (record-constructor oR4cf8@oR4cf0)) (set! oR4f2f@oR4cfd@make-violation oR4cfd@make-violation) (set! oR4cff@violation? (condition-predicate oR4cf4@oR4cef)) (set! oR4f30@oR4cff@violation? oR4cff@violation?) (set! oR4d01@&violation-rtd oR4cf4@oR4cef) (set! oR4f31@oR4d01@&violation-rtd oR4d01@&violation-rtd) (set! oR4d03@&violation-rcd oR4cf8@oR4cf0) (set! oR4f32@oR4d03@&violation-rcd oR4d03@&violation-rcd) (set! oR4d09@oR4d04 (make-record-type-descriptor '&assertion oR4cf4@oR4cef 'oR4d07 '#f '#f '#())) (set! oR4f33@oR4d09@oR4d04 oR4d09@oR4d04) (set! oR4d0b@oR4d06 '#f) (set! oR4f34@oR4d0b@oR4d06 oR4d0b@oR4d06) (set! oR4d0d@oR4d05 (make-record-constructor-descriptor oR4d09@oR4d04 oR4cf8@oR4cf0 oR4d0b@oR4d06)) (set! oR4f35@oR4d0d@oR4d05 oR4d0d@oR4d05) (set! oR4d10@p? (record-predicate oR4d09@oR4d04)) (set! oR4f36@oR4d10@p? oR4d10@p?) (set! oR4d12@make-assertion-violation (record-constructor oR4d0d@oR4d05)) (set! oR4f37@oR4d12@make-assertion-violation oR4d12@make-assertion-violation) (set! oR4d14@assertion-violation? (condition-predicate oR4d09@oR4d04)) (set! oR4f38@oR4d14@assertion-violation? oR4d14@assertion-violation?) (set! oR4d16@&assertion-rtd oR4d09@oR4d04) (set! oR4f39@oR4d16@&assertion-rtd oR4d16@&assertion-rtd) (set! oR4d18@&assertion-rcd oR4d0d@oR4d05) (set! oR4f3a@oR4d18@&assertion-rcd oR4d18@&assertion-rcd) (set! oR4d20@oR4d1b (make-record-type-descriptor '&irritants oR4c43@oR4c3e 'oR4d1e '#f '#f '#((immutable irritants)))) (set! oR4f3b@oR4d20@oR4d1b oR4d20@oR4d1b) (set! oR4d22@oR4d1d '#f) (set! oR4f3c@oR4d22@oR4d1d oR4d22@oR4d1d) (set! oR4d24@oR4d1c (make-record-constructor-descriptor oR4d20@oR4d1b oR4c47@oR4c3f oR4d22@oR4d1d)) (set! oR4f3d@oR4d24@oR4d1c oR4d24@oR4d1c) (set! oR4d27@p? (record-predicate oR4d20@oR4d1b)) (set! oR4f3e@oR4d27@p? oR4d27@p?) (set! oR4d29@make-irritants-condition (record-constructor oR4d24@oR4d1c)) (set! oR4f3f@oR4d29@make-irritants-condition oR4d29@make-irritants-condition) (set! oR4d2b@oR4d1a (record-accessor oR4d20@oR4d1b '0)) (set! oR4f40@oR4d2b@oR4d1a oR4d2b@oR4d1a) (set! oR4d2d@irritants-condition? (condition-predicate oR4d20@oR4d1b)) (set! oR4f41@oR4d2d@irritants-condition? oR4d2d@irritants-condition?) (set! oR4d2f@condition-irritants (condition-accessor oR4d20@oR4d1b oR4d2b@oR4d1a)) (set! oR4f42@oR4d2f@condition-irritants oR4d2f@condition-irritants) (set! oR4d31@&irritants-rtd oR4d20@oR4d1b) (set! oR4f43@oR4d31@&irritants-rtd oR4d31@&irritants-rtd) (set! oR4d33@&irritants-rcd oR4d24@oR4d1c) (set! oR4f44@oR4d33@&irritants-rcd oR4d33@&irritants-rcd) (set! oR4d3b@oR4d36 (make-record-type-descriptor '&who oR4c43@oR4c3e 'oR4d39 '#f '#f '#((immutable who)))) (set! oR4f45@oR4d3b@oR4d36 oR4d3b@oR4d36) (set! oR4d3d@oR4d38 '#f) (set! oR4f46@oR4d3d@oR4d38 oR4d3d@oR4d38) (set! oR4d3f@oR4d37 (make-record-constructor-descriptor oR4d3b@oR4d36 oR4c47@oR4c3f oR4d3d@oR4d38)) (set! oR4f47@oR4d3f@oR4d37 oR4d3f@oR4d37) (set! oR4d42@p? (record-predicate oR4d3b@oR4d36)) (set! oR4f48@oR4d42@p? oR4d42@p?) (set! oR4d44@make-who-condition (record-constructor oR4d3f@oR4d37)) (set! oR4f49@oR4d44@make-who-condition oR4d44@make-who-condition) (set! oR4d46@oR4d35 (record-accessor oR4d3b@oR4d36 '0)) (set! oR4f4a@oR4d46@oR4d35 oR4d46@oR4d35) (set! oR4d48@who-condition? (condition-predicate oR4d3b@oR4d36)) (set! oR4f4b@oR4d48@who-condition? oR4d48@who-condition?) (set! oR4d4a@condition-who (condition-accessor oR4d3b@oR4d36 oR4d46@oR4d35)) (set! oR4f4c@oR4d4a@condition-who oR4d4a@condition-who) (set! oR4d4c@&who-rtd oR4d3b@oR4d36) (set! oR4f4d@oR4d4c@&who-rtd oR4d4c@&who-rtd) (set! oR4d4e@&who-rcd oR4d3f@oR4d37) (set! oR4f4e@oR4d4e@&who-rcd oR4d4e@&who-rcd) (set! oR4d54@oR4d4f (make-record-type-descriptor '&non-continuable oR4cf4@oR4cef 'oR4d52 '#f '#f '#())) (set! oR4f4f@oR4d54@oR4d4f oR4d54@oR4d4f) (set! oR4d56@oR4d51 '#f) (set! oR4f50@oR4d56@oR4d51 oR4d56@oR4d51) (set! oR4d58@oR4d50 (make-record-constructor-descriptor oR4d54@oR4d4f oR4cf8@oR4cf0 oR4d56@oR4d51)) (set! oR4f51@oR4d58@oR4d50 oR4d58@oR4d50) (set! oR4d5b@p? (record-predicate oR4d54@oR4d4f)) (set! oR4f52@oR4d5b@p? oR4d5b@p?) (set! oR4d5d@make-non-continuable-violation (record-constructor oR4d58@oR4d50)) (set! oR4f53@oR4d5d@make-non-continuable-violation oR4d5d@make-non-continuable-violation) (set! oR4d5f@non-continuable-violation? (condition-predicate oR4d54@oR4d4f)) (set! oR4f54@oR4d5f@non-continuable-violation? oR4d5f@non-continuable-violation?) (set! oR4d61@&non-continuable-rtd oR4d54@oR4d4f) (set! oR4f55@oR4d61@&non-continuable-rtd oR4d61@&non-continuable-rtd) (set! oR4d63@&non-continuable-rcd oR4d58@oR4d50) (set! oR4f56@oR4d63@&non-continuable-rcd oR4d63@&non-continuable-rcd) (set! oR4d69@oR4d64 (make-record-type-descriptor '&implementation-restriction oR4cf4@oR4cef 'oR4d67 '#f '#f '#())) (set! oR4f57@oR4d69@oR4d64 oR4d69@oR4d64) (set! oR4d6b@oR4d66 '#f) (set! oR4f58@oR4d6b@oR4d66 oR4d6b@oR4d66) (set! oR4d6d@oR4d65 (make-record-constructor-descriptor oR4d69@oR4d64 oR4cf8@oR4cf0 oR4d6b@oR4d66)) (set! oR4f59@oR4d6d@oR4d65 oR4d6d@oR4d65) (set! oR4d70@p? (record-predicate oR4d69@oR4d64)) (set! oR4f5a@oR4d70@p? oR4d70@p?) (set! oR4d72@make-implementation-restriction-violation (record-constructor oR4d6d@oR4d65)) (set! oR4f5b@oR4d72@make-implementation-restriction-violation oR4d72@make-implementation-restriction-violation) (set! oR4d74@implementation-restriction-violation? (condition-predicate oR4d69@oR4d64)) (set! oR4f5c@oR4d74@implementation-restriction-violation? oR4d74@implementation-restriction-violation?) (set! oR4d76@&implementation-restriction-rtd oR4d69@oR4d64) (set! oR4f5d@oR4d76@&implementation-restriction-rtd oR4d76@&implementation-restriction-rtd) (set! oR4d78@&implementation-restriction-rcd oR4d6d@oR4d65) (set! oR4f5e@oR4d78@&implementation-restriction-rcd oR4d78@&implementation-restriction-rcd) (set! oR4d7e@oR4d79 (make-record-type-descriptor '&lexical oR4cf4@oR4cef 'oR4d7c '#f '#f '#())) (set! oR4f5f@oR4d7e@oR4d79 oR4d7e@oR4d79) (set! oR4d80@oR4d7b '#f) (set! oR4f60@oR4d80@oR4d7b oR4d80@oR4d7b) (set! oR4d82@oR4d7a (make-record-constructor-descriptor oR4d7e@oR4d79 oR4cf8@oR4cf0 oR4d80@oR4d7b)) (set! oR4f61@oR4d82@oR4d7a oR4d82@oR4d7a) (set! oR4d85@p? (record-predicate oR4d7e@oR4d79)) (set! oR4f62@oR4d85@p? oR4d85@p?) (set! oR4d87@make-lexical-violation (record-constructor oR4d82@oR4d7a)) (set! oR4f63@oR4d87@make-lexical-violation oR4d87@make-lexical-violation) (set! oR4d89@lexical-violation? (condition-predicate oR4d7e@oR4d79)) (set! oR4f64@oR4d89@lexical-violation? oR4d89@lexical-violation?) (set! oR4d8b@&lexical-rtd oR4d7e@oR4d79) (set! oR4f65@oR4d8b@&lexical-rtd oR4d8b@&lexical-rtd) (set! oR4d8d@&lexical-rcd oR4d82@oR4d7a) (set! oR4f66@oR4d8d@&lexical-rcd oR4d8d@&lexical-rcd) (set! oR4d97@oR4d92 (make-record-type-descriptor '&syntax oR4cf4@oR4cef 'oR4d95 '#f '#f '#((immutable form) (immutable subform)))) (set! oR4f67@oR4d97@oR4d92 oR4d97@oR4d92) (set! oR4d99@oR4d94 '#f) (set! oR4f68@oR4d99@oR4d94 oR4d99@oR4d94) (set! oR4d9b@oR4d93 (make-record-constructor-descriptor oR4d97@oR4d92 oR4cf8@oR4cf0 oR4d99@oR4d94)) (set! oR4f69@oR4d9b@oR4d93 oR4d9b@oR4d93) (set! oR4d9e@p? (record-predicate oR4d97@oR4d92)) (set! oR4f6a@oR4d9e@p? oR4d9e@p?) (set! oR4da0@make-syntax-violation (record-constructor oR4d9b@oR4d93)) (set! oR4f6b@oR4da0@make-syntax-violation oR4da0@make-syntax-violation) (set! oR4da2@oR4d8f (record-accessor oR4d97@oR4d92 '0)) (set! oR4f6c@oR4da2@oR4d8f oR4da2@oR4d8f) (set! oR4da4@oR4d91 (record-accessor oR4d97@oR4d92 '1)) (set! oR4f6d@oR4da4@oR4d91 oR4da4@oR4d91) (set! oR4da6@syntax-violation? (condition-predicate oR4d97@oR4d92)) (set! oR4f6e@oR4da6@syntax-violation? oR4da6@syntax-violation?) (set! oR4da8@syntax-violation-form (condition-accessor oR4d97@oR4d92 oR4da2@oR4d8f)) (set! oR4f6f@oR4da8@syntax-violation-form oR4da8@syntax-violation-form) (set! oR4daa@syntax-violation-subform (condition-accessor oR4d97@oR4d92 oR4da4@oR4d91)) (set! oR4f70@oR4daa@syntax-violation-subform oR4daa@syntax-violation-subform) (set! oR4dac@&syntax-rtd oR4d97@oR4d92) (set! oR4f71@oR4dac@&syntax-rtd oR4dac@&syntax-rtd) (set! oR4dae@&syntax-rcd oR4d9b@oR4d93) (set! oR4f72@oR4dae@&syntax-rcd oR4dae@&syntax-rcd) (set! oR4db4@oR4daf (make-record-type-descriptor '&undefined oR4cf4@oR4cef 'oR4db2 '#f '#f '#())) (set! oR4f73@oR4db4@oR4daf oR4db4@oR4daf) (set! oR4db6@oR4db1 '#f) (set! oR4f74@oR4db6@oR4db1 oR4db6@oR4db1) (set! oR4db8@oR4db0 (make-record-constructor-descriptor oR4db4@oR4daf oR4cf8@oR4cf0 oR4db6@oR4db1)) (set! oR4f75@oR4db8@oR4db0 oR4db8@oR4db0) (set! oR4dbb@p? (record-predicate oR4db4@oR4daf)) (set! oR4f76@oR4dbb@p? oR4dbb@p?) (set! oR4dbd@make-undefined-violation (record-constructor oR4db8@oR4db0)) (set! oR4f77@oR4dbd@make-undefined-violation oR4dbd@make-undefined-violation) (set! oR4dbf@undefined-violation? (condition-predicate oR4db4@oR4daf)) (set! oR4f78@oR4dbf@undefined-violation? oR4dbf@undefined-violation?) (set! oR4dc1@&undefined-rtd oR4db4@oR4daf) (set! oR4f79@oR4dc1@&undefined-rtd oR4dc1@&undefined-rtd) (set! oR4dc3@&undefined-rcd oR4db8@oR4db0) (set! oR4f7a@oR4dc3@&undefined-rcd oR4dc3@&undefined-rcd) (set! oR4dc9@oR4dc4 (make-record-type-descriptor '&i/o oR4cdf@oR4cda 'oR4dc7 '#f '#f '#())) (set! oR4f7b@oR4dc9@oR4dc4 oR4dc9@oR4dc4) (set! oR4dcb@oR4dc6 '#f) (set! oR4f7c@oR4dcb@oR4dc6 oR4dcb@oR4dc6) (set! oR4dcd@oR4dc5 (make-record-constructor-descriptor oR4dc9@oR4dc4 oR4ce3@oR4cdb oR4dcb@oR4dc6)) (set! oR4f7d@oR4dcd@oR4dc5 oR4dcd@oR4dc5) (set! oR4dd0@p? (record-predicate oR4dc9@oR4dc4)) (set! oR4f7e@oR4dd0@p? oR4dd0@p?) (set! oR4dd2@make-i/o-error (record-constructor oR4dcd@oR4dc5)) (set! oR4f7f@oR4dd2@make-i/o-error oR4dd2@make-i/o-error) (set! oR4dd4@i/o-error? (condition-predicate oR4dc9@oR4dc4)) (set! oR4f80@oR4dd4@i/o-error? oR4dd4@i/o-error?) (set! oR4dd6@&i/o-rtd oR4dc9@oR4dc4) (set! oR4f81@oR4dd6@&i/o-rtd oR4dd6@&i/o-rtd) (set! oR4dd8@&i/o-rcd oR4dcd@oR4dc5) (set! oR4f82@oR4dd8@&i/o-rcd oR4dd8@&i/o-rcd) (set! oR4dde@oR4dd9 (make-record-type-descriptor '&i/o-read oR4dc9@oR4dc4 'oR4ddc '#f '#f '#())) (set! oR4f83@oR4dde@oR4dd9 oR4dde@oR4dd9) (set! oR4de0@oR4ddb '#f) (set! oR4f84@oR4de0@oR4ddb oR4de0@oR4ddb) (set! oR4de2@oR4dda (make-record-constructor-descriptor oR4dde@oR4dd9 oR4dcd@oR4dc5 oR4de0@oR4ddb)) (set! oR4f85@oR4de2@oR4dda oR4de2@oR4dda) (set! oR4de5@p? (record-predicate oR4dde@oR4dd9)) (set! oR4f86@oR4de5@p? oR4de5@p?) (set! oR4de7@make-i/o-read-error (record-constructor oR4de2@oR4dda)) (set! oR4f87@oR4de7@make-i/o-read-error oR4de7@make-i/o-read-error) (set! oR4de9@i/o-read-error? (condition-predicate oR4dde@oR4dd9)) (set! oR4f88@oR4de9@i/o-read-error? oR4de9@i/o-read-error?) (set! oR4deb@&i/o-read-rtd oR4dde@oR4dd9) (set! oR4f89@oR4deb@&i/o-read-rtd oR4deb@&i/o-read-rtd) (set! oR4ded@&i/o-read-rcd oR4de2@oR4dda) (set! oR4f8a@oR4ded@&i/o-read-rcd oR4ded@&i/o-read-rcd) (set! oR4df3@oR4dee (make-record-type-descriptor '&i/o-write oR4dc9@oR4dc4 'oR4df1 '#f '#f '#())) (set! oR4f8b@oR4df3@oR4dee oR4df3@oR4dee) (set! oR4df5@oR4df0 '#f) (set! oR4f8c@oR4df5@oR4df0 oR4df5@oR4df0) (set! oR4df7@oR4def (make-record-constructor-descriptor oR4df3@oR4dee oR4dcd@oR4dc5 oR4df5@oR4df0)) (set! oR4f8d@oR4df7@oR4def oR4df7@oR4def) (set! oR4dfa@p? (record-predicate oR4df3@oR4dee)) (set! oR4f8e@oR4dfa@p? oR4dfa@p?) (set! oR4dfc@make-i/o-write-error (record-constructor oR4df7@oR4def)) (set! oR4f8f@oR4dfc@make-i/o-write-error oR4dfc@make-i/o-write-error) (set! oR4dfe@i/o-write-error? (condition-predicate oR4df3@oR4dee)) (set! oR4f90@oR4dfe@i/o-write-error? oR4dfe@i/o-write-error?) (set! oR4e00@&i/o-write-rtd oR4df3@oR4dee) (set! oR4f91@oR4e00@&i/o-write-rtd oR4e00@&i/o-write-rtd) (set! oR4e02@&i/o-write-rcd oR4df7@oR4def) (set! oR4f92@oR4e02@&i/o-write-rcd oR4e02@&i/o-write-rcd) (set! oR4e0a@oR4e05 (make-record-type-descriptor '&i/o-invalid-position oR4dc9@oR4dc4 'oR4e08 '#f '#f '#((immutable position)))) (set! oR4f93@oR4e0a@oR4e05 oR4e0a@oR4e05) (set! oR4e0c@oR4e07 '#f) (set! oR4f94@oR4e0c@oR4e07 oR4e0c@oR4e07) (set! oR4e0e@oR4e06 (make-record-constructor-descriptor oR4e0a@oR4e05 oR4dcd@oR4dc5 oR4e0c@oR4e07)) (set! oR4f95@oR4e0e@oR4e06 oR4e0e@oR4e06) (set! oR4e11@p? (record-predicate oR4e0a@oR4e05)) (set! oR4f96@oR4e11@p? oR4e11@p?) (set! oR4e13@make-i/o-invalid-position-error (record-constructor oR4e0e@oR4e06)) (set! oR4f97@oR4e13@make-i/o-invalid-position-error oR4e13@make-i/o-invalid-position-error) (set! oR4e15@oR4e04 (record-accessor oR4e0a@oR4e05 '0)) (set! oR4f98@oR4e15@oR4e04 oR4e15@oR4e04) (set! oR4e17@i/o-invalid-position-error? (condition-predicate oR4e0a@oR4e05)) (set! oR4f99@oR4e17@i/o-invalid-position-error? oR4e17@i/o-invalid-position-error?) (set! oR4e19@i/o-error-position (condition-accessor oR4e0a@oR4e05 oR4e15@oR4e04)) (set! oR4f9a@oR4e19@i/o-error-position oR4e19@i/o-error-position) (set! oR4e1b@&i/o-invalid-position-rtd oR4e0a@oR4e05) (set! oR4f9b@oR4e1b@&i/o-invalid-position-rtd oR4e1b@&i/o-invalid-position-rtd) (set! oR4e1d@&i/o-invalid-position-rcd oR4e0e@oR4e06) (set! oR4f9c@oR4e1d@&i/o-invalid-position-rcd oR4e1d@&i/o-invalid-position-rcd) (set! oR4e25@oR4e20 (make-record-type-descriptor '&i/o-filename oR4dc9@oR4dc4 'oR4e23 '#f '#f '#((immutable filename)))) (set! oR4f9d@oR4e25@oR4e20 oR4e25@oR4e20) (set! oR4e27@oR4e22 '#f) (set! oR4f9e@oR4e27@oR4e22 oR4e27@oR4e22) (set! oR4e29@oR4e21 (make-record-constructor-descriptor oR4e25@oR4e20 oR4dcd@oR4dc5 oR4e27@oR4e22)) (set! oR4f9f@oR4e29@oR4e21 oR4e29@oR4e21) (set! oR4e2c@p? (record-predicate oR4e25@oR4e20)) (set! oR4fa0@oR4e2c@p? oR4e2c@p?) (set! oR4e2e@make-i/o-filename-error (record-constructor oR4e29@oR4e21)) (set! oR4fa1@oR4e2e@make-i/o-filename-error oR4e2e@make-i/o-filename-error) (set! oR4e30@oR4e1f (record-accessor oR4e25@oR4e20 '0)) (set! oR4fa2@oR4e30@oR4e1f oR4e30@oR4e1f) (set! oR4e32@i/o-filename-error? (condition-predicate oR4e25@oR4e20)) (set! oR4fa3@oR4e32@i/o-filename-error? oR4e32@i/o-filename-error?) (set! oR4e34@i/o-error-filename (condition-accessor oR4e25@oR4e20 oR4e30@oR4e1f)) (set! oR4fa4@oR4e34@i/o-error-filename oR4e34@i/o-error-filename) (set! oR4e36@&i/o-filename-rtd oR4e25@oR4e20) (set! oR4fa5@oR4e36@&i/o-filename-rtd oR4e36@&i/o-filename-rtd) (set! oR4e38@&i/o-filename-rcd oR4e29@oR4e21) (set! oR4fa6@oR4e38@&i/o-filename-rcd oR4e38@&i/o-filename-rcd) (set! oR4e3e@oR4e39 (make-record-type-descriptor '&i/o-file-protection oR4e25@oR4e20 'oR4e3c '#f '#f '#())) (set! oR4fa7@oR4e3e@oR4e39 oR4e3e@oR4e39) (set! oR4e40@oR4e3b '#f) (set! oR4fa8@oR4e40@oR4e3b oR4e40@oR4e3b) (set! oR4e42@oR4e3a (make-record-constructor-descriptor oR4e3e@oR4e39 oR4e29@oR4e21 oR4e40@oR4e3b)) (set! oR4fa9@oR4e42@oR4e3a oR4e42@oR4e3a) (set! oR4e45@p? (record-predicate oR4e3e@oR4e39)) (set! oR4faa@oR4e45@p? oR4e45@p?) (set! oR4e47@make-i/o-file-protection-error (record-constructor oR4e42@oR4e3a)) (set! oR4fab@oR4e47@make-i/o-file-protection-error oR4e47@make-i/o-file-protection-error) (set! oR4e49@i/o-file-protection-error? (condition-predicate oR4e3e@oR4e39)) (set! oR4fac@oR4e49@i/o-file-protection-error? oR4e49@i/o-file-protection-error?) (set! oR4e4b@&i/o-file-protection-rtd oR4e3e@oR4e39) (set! oR4fad@oR4e4b@&i/o-file-protection-rtd oR4e4b@&i/o-file-protection-rtd) (set! oR4e4d@&i/o-file-protection-rcd oR4e42@oR4e3a) (set! oR4fae@oR4e4d@&i/o-file-protection-rcd oR4e4d@&i/o-file-protection-rcd) (set! oR4e53@oR4e4e (make-record-type-descriptor '&i/o-file-is-read-only oR4e3e@oR4e39 'oR4e51 '#f '#f '#())) (set! oR4faf@oR4e53@oR4e4e oR4e53@oR4e4e) (set! oR4e55@oR4e50 '#f) (set! oR4fb0@oR4e55@oR4e50 oR4e55@oR4e50) (set! oR4e57@oR4e4f (make-record-constructor-descriptor oR4e53@oR4e4e oR4e42@oR4e3a oR4e55@oR4e50)) (set! oR4fb1@oR4e57@oR4e4f oR4e57@oR4e4f) (set! oR4e5a@p? (record-predicate oR4e53@oR4e4e)) (set! oR4fb2@oR4e5a@p? oR4e5a@p?) (set! oR4e5c@make-i/o-file-is-read-only-error (record-constructor oR4e57@oR4e4f)) (set! oR4fb3@oR4e5c@make-i/o-file-is-read-only-error oR4e5c@make-i/o-file-is-read-only-error) (set! oR4e5e@i/o-file-is-read-only-error? (condition-predicate oR4e53@oR4e4e)) (set! oR4fb4@oR4e5e@i/o-file-is-read-only-error? oR4e5e@i/o-file-is-read-only-error?) (set! oR4e60@&i/o-file-is-read-only-rtd oR4e53@oR4e4e) (set! oR4fb5@oR4e60@&i/o-file-is-read-only-rtd oR4e60@&i/o-file-is-read-only-rtd) (set! oR4e62@&i/o-file-is-read-only-rcd oR4e57@oR4e4f) (set! oR4fb6@oR4e62@&i/o-file-is-read-only-rcd oR4e62@&i/o-file-is-read-only-rcd) (set! oR4e68@oR4e63 (make-record-type-descriptor '&i/o-file-already-exists oR4e25@oR4e20 'oR4e66 '#f '#f '#())) (set! oR4fb7@oR4e68@oR4e63 oR4e68@oR4e63) (set! oR4e6a@oR4e65 '#f) (set! oR4fb8@oR4e6a@oR4e65 oR4e6a@oR4e65) (set! oR4e6c@oR4e64 (make-record-constructor-descriptor oR4e68@oR4e63 oR4e29@oR4e21 oR4e6a@oR4e65)) (set! oR4fb9@oR4e6c@oR4e64 oR4e6c@oR4e64) (set! oR4e6f@p? (record-predicate oR4e68@oR4e63)) (set! oR4fba@oR4e6f@p? oR4e6f@p?) (set! oR4e71@make-i/o-file-already-exists-error (record-constructor oR4e6c@oR4e64)) (set! oR4fbb@oR4e71@make-i/o-file-already-exists-error oR4e71@make-i/o-file-already-exists-error) (set! oR4e73@i/o-file-already-exists-error? (condition-predicate oR4e68@oR4e63)) (set! oR4fbc@oR4e73@i/o-file-already-exists-error? oR4e73@i/o-file-already-exists-error?) (set! oR4e75@&i/o-file-already-exists-rtd oR4e68@oR4e63) (set! oR4fbd@oR4e75@&i/o-file-already-exists-rtd oR4e75@&i/o-file-already-exists-rtd) (set! oR4e77@&i/o-file-already-exists-rcd oR4e6c@oR4e64) (set! oR4fbe@oR4e77@&i/o-file-already-exists-rcd oR4e77@&i/o-file-already-exists-rcd) (set! oR4e7d@oR4e78 (make-record-type-descriptor '&i/o-file-does-not-exist oR4e25@oR4e20 'oR4e7b '#f '#f '#())) (set! oR4fbf@oR4e7d@oR4e78 oR4e7d@oR4e78) (set! oR4e7f@oR4e7a '#f) (set! oR4fc0@oR4e7f@oR4e7a oR4e7f@oR4e7a) (set! oR4e81@oR4e79 (make-record-constructor-descriptor oR4e7d@oR4e78 oR4e29@oR4e21 oR4e7f@oR4e7a)) (set! oR4fc1@oR4e81@oR4e79 oR4e81@oR4e79) (set! oR4e84@p? (record-predicate oR4e7d@oR4e78)) (set! oR4fc2@oR4e84@p? oR4e84@p?) (set! oR4e86@make-i/o-file-does-not-exist-error (record-constructor oR4e81@oR4e79)) (set! oR4fc3@oR4e86@make-i/o-file-does-not-exist-error oR4e86@make-i/o-file-does-not-exist-error) (set! oR4e88@i/o-file-does-not-exist-error? (condition-predicate oR4e7d@oR4e78)) (set! oR4fc4@oR4e88@i/o-file-does-not-exist-error? oR4e88@i/o-file-does-not-exist-error?) (set! oR4e8a@&i/o-file-does-not-exist-rtd oR4e7d@oR4e78) (set! oR4fc5@oR4e8a@&i/o-file-does-not-exist-rtd oR4e8a@&i/o-file-does-not-exist-rtd) (set! oR4e8c@&i/o-file-does-not-exist-rcd oR4e81@oR4e79) (set! oR4fc6@oR4e8c@&i/o-file-does-not-exist-rcd oR4e8c@&i/o-file-does-not-exist-rcd) (set! oR4e94@oR4e8f (make-record-type-descriptor '&i/o-port oR4dc9@oR4dc4 'oR4e92 '#f '#f '#((immutable port)))) (set! oR4fc7@oR4e94@oR4e8f oR4e94@oR4e8f) (set! oR4e96@oR4e91 '#f) (set! oR4fc8@oR4e96@oR4e91 oR4e96@oR4e91) (set! oR4e98@oR4e90 (make-record-constructor-descriptor oR4e94@oR4e8f oR4dcd@oR4dc5 oR4e96@oR4e91)) (set! oR4fc9@oR4e98@oR4e90 oR4e98@oR4e90) (set! oR4e9b@p? (record-predicate oR4e94@oR4e8f)) (set! oR4fca@oR4e9b@p? oR4e9b@p?) (set! oR4e9d@make-i/o-port-error (record-constructor oR4e98@oR4e90)) (set! oR4fcb@oR4e9d@make-i/o-port-error oR4e9d@make-i/o-port-error) (set! oR4e9f@oR4e8e (record-accessor oR4e94@oR4e8f '0)) (set! oR4fcc@oR4e9f@oR4e8e oR4e9f@oR4e8e) (set! oR4ea1@i/o-port-error? (condition-predicate oR4e94@oR4e8f)) (set! oR4fcd@oR4ea1@i/o-port-error? oR4ea1@i/o-port-error?) (set! oR4ea3@i/o-error-port (condition-accessor oR4e94@oR4e8f oR4e9f@oR4e8e)) (set! oR4fce@oR4ea3@i/o-error-port oR4ea3@i/o-error-port) (set! oR4ea5@&i/o-port-rtd oR4e94@oR4e8f) (set! oR4fcf@oR4ea5@&i/o-port-rtd oR4ea5@&i/o-port-rtd) (set! oR4ea7@&i/o-port-rcd oR4e98@oR4e90) (set! oR4fd0@oR4ea7@&i/o-port-rcd oR4ea7@&i/o-port-rcd) (set! oR4ead@oR4ea8 (make-record-type-descriptor '&i/o-decoding oR4e94@oR4e8f 'oR4eab '#f '#f '#())) (set! oR4fd1@oR4ead@oR4ea8 oR4ead@oR4ea8) (set! oR4eaf@oR4eaa '#f) (set! oR4fd2@oR4eaf@oR4eaa oR4eaf@oR4eaa) (set! oR4eb1@oR4ea9 (make-record-constructor-descriptor oR4ead@oR4ea8 oR4e98@oR4e90 oR4eaf@oR4eaa)) (set! oR4fd3@oR4eb1@oR4ea9 oR4eb1@oR4ea9) (set! oR4eb4@p? (record-predicate oR4ead@oR4ea8)) (set! oR4fd4@oR4eb4@p? oR4eb4@p?) (set! oR4eb6@make-i/o-decoding-error (record-constructor oR4eb1@oR4ea9)) (set! oR4fd5@oR4eb6@make-i/o-decoding-error oR4eb6@make-i/o-decoding-error) (set! oR4eb8@i/o-decoding-error? (condition-predicate oR4ead@oR4ea8)) (set! oR4fd6@oR4eb8@i/o-decoding-error? oR4eb8@i/o-decoding-error?) (set! oR4eba@&i/o-decoding-rtd oR4ead@oR4ea8) (set! oR4fd7@oR4eba@&i/o-decoding-rtd oR4eba@&i/o-decoding-rtd) (set! oR4ebc@&i/o-decoding-rcd oR4eb1@oR4ea9) (set! oR4fd8@oR4ebc@&i/o-decoding-rcd oR4ebc@&i/o-decoding-rcd) (set! oR4ec4@oR4ebf (make-record-type-descriptor '&i/o-encoding oR4e94@oR4e8f 'oR4ec2 '#f '#f '#((immutable char)))) (set! oR4fd9@oR4ec4@oR4ebf oR4ec4@oR4ebf) (set! oR4ec6@oR4ec1 '#f) (set! oR4fda@oR4ec6@oR4ec1 oR4ec6@oR4ec1) (set! oR4ec8@oR4ec0 (make-record-constructor-descriptor oR4ec4@oR4ebf oR4e98@oR4e90 oR4ec6@oR4ec1)) (set! oR4fdb@oR4ec8@oR4ec0 oR4ec8@oR4ec0) (set! oR4ecb@p? (record-predicate oR4ec4@oR4ebf)) (set! oR4fdc@oR4ecb@p? oR4ecb@p?) (set! oR4ecd@make-i/o-encoding-error (record-constructor oR4ec8@oR4ec0)) (set! oR4fdd@oR4ecd@make-i/o-encoding-error oR4ecd@make-i/o-encoding-error) (set! oR4ecf@oR4ebe (record-accessor oR4ec4@oR4ebf '0)) (set! oR4fde@oR4ecf@oR4ebe oR4ecf@oR4ebe) (set! oR4ed1@i/o-encoding-error? (condition-predicate oR4ec4@oR4ebf)) (set! oR4fdf@oR4ed1@i/o-encoding-error? oR4ed1@i/o-encoding-error?) (set! oR4ed3@i/o-encoding-error-char (condition-accessor oR4ec4@oR4ebf oR4ecf@oR4ebe)) (set! oR4fe0@oR4ed3@i/o-encoding-error-char oR4ed3@i/o-encoding-error-char) (set! oR4ed5@&i/o-encoding-rtd oR4ec4@oR4ebf) (set! oR4fe1@oR4ed5@&i/o-encoding-rtd oR4ed5@&i/o-encoding-rtd) (set! oR4ed7@&i/o-encoding-rcd oR4ec8@oR4ec0) (set! oR4fe2@oR4ed7@&i/o-encoding-rcd oR4ed7@&i/o-encoding-rcd) (set! oR4edd@oR4ed8 (make-record-type-descriptor '&no-infinities oR4d69@oR4d64 'oR4edb '#f '#f '#())) (set! oR4fe3@oR4edd@oR4ed8 oR4edd@oR4ed8) (set! oR4edf@oR4eda '#f) (set! oR4fe4@oR4edf@oR4eda oR4edf@oR4eda) (set! oR4ee1@oR4ed9 (make-record-constructor-descriptor oR4edd@oR4ed8 oR4d6d@oR4d65 oR4edf@oR4eda)) (set! oR4fe5@oR4ee1@oR4ed9 oR4ee1@oR4ed9) (set! oR4ee4@p? (record-predicate oR4edd@oR4ed8)) (set! oR4fe6@oR4ee4@p? oR4ee4@p?) (set! oR4ee6@make-no-infinities-violation (record-constructor oR4ee1@oR4ed9)) (set! oR4fe7@oR4ee6@make-no-infinities-violation oR4ee6@make-no-infinities-violation) (set! oR4ee8@no-infinities-violation? (condition-predicate oR4edd@oR4ed8)) (set! oR4fe8@oR4ee8@no-infinities-violation? oR4ee8@no-infinities-violation?) (set! oR4eea@&no-infinities-rtd oR4edd@oR4ed8) (set! oR4fe9@oR4eea@&no-infinities-rtd oR4eea@&no-infinities-rtd) (set! oR4eec@&no-infinities-rcd oR4ee1@oR4ed9) (set! oR4fea@oR4eec@&no-infinities-rcd oR4eec@&no-infinities-rcd) (set! oR4ef2@oR4eed (make-record-type-descriptor '&no-nans oR4d69@oR4d64 'oR4ef0 '#f '#f '#())) (set! oR4feb@oR4ef2@oR4eed oR4ef2@oR4eed) (set! oR4ef4@oR4eef '#f) (set! oR4fec@oR4ef4@oR4eef oR4ef4@oR4eef) (set! oR4ef6@oR4eee (make-record-constructor-descriptor oR4ef2@oR4eed oR4d6d@oR4d65 oR4ef4@oR4eef)) (set! oR4fed@oR4ef6@oR4eee oR4ef6@oR4eee) (set! oR4ef9@p? (record-predicate oR4ef2@oR4eed)) (set! oR4fee@oR4ef9@p? oR4ef9@p?) (set! oR4efb@make-no-nans-violation (record-constructor oR4ef6@oR4eee)) (set! oR4fef@oR4efb@make-no-nans-violation oR4efb@make-no-nans-violation) (set! oR4efd@no-nans-violation? (condition-predicate oR4ef2@oR4eed)) (set! oR4ff0@oR4efd@no-nans-violation? oR4efd@no-nans-violation?) (set! oR4eff@&no-nans-rtd oR4ef2@oR4eed) (set! oR4ff1@oR4eff@&no-nans-rtd oR4eff@&no-nans-rtd) (set! oR4f01@&no-nans-rcd oR4ef6@oR4eee) (set! oR4ff2@oR4f01@&no-nans-rcd oR4f01@&no-nans-rcd) (void))
(begin (begin (oR2a77@oR2a2c@current-primitive-locations (lambda (oR54ba@x) (let ((oR54bc@t (assq oR54ba@x '((&no-nans-rcd . oR4ff2@oR4f01@&no-nans-rcd) (&no-nans-rtd . oR4ff1@oR4eff@&no-nans-rtd) (&no-infinities-rcd . oR4fea@oR4eec@&no-infinities-rcd) (&no-infinities-rtd . oR4fe9@oR4eea@&no-infinities-rtd) (&i/o-encoding-rcd . oR4fe2@oR4ed7@&i/o-encoding-rcd) (&i/o-encoding-rtd . oR4fe1@oR4ed5@&i/o-encoding-rtd) (&i/o-decoding-rcd . oR4fd8@oR4ebc@&i/o-decoding-rcd) (&i/o-decoding-rtd . oR4fd7@oR4eba@&i/o-decoding-rtd) (&i/o-port-rcd . oR4fd0@oR4ea7@&i/o-port-rcd) (&i/o-port-rtd . oR4fcf@oR4ea5@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . oR4fc6@oR4e8c@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . oR4fc5@oR4e8a@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . oR4fbe@oR4e77@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . oR4fbd@oR4e75@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . oR4fb6@oR4e62@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . oR4fb5@oR4e60@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . oR4fae@oR4e4d@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . oR4fad@oR4e4b@&i/o-file-protection-rtd) (&i/o-filename-rcd . oR4fa6@oR4e38@&i/o-filename-rcd) (&i/o-filename-rtd . oR4fa5@oR4e36@&i/o-filename-rtd) (&i/o-invalid-position-rcd . oR4f9c@oR4e1d@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . oR4f9b@oR4e1b@&i/o-invalid-position-rtd) (&i/o-write-rcd . oR4f92@oR4e02@&i/o-write-rcd) (&i/o-write-rtd . oR4f91@oR4e00@&i/o-write-rtd) (&i/o-read-rcd . oR4f8a@oR4ded@&i/o-read-rcd) (&i/o-read-rtd . oR4f89@oR4deb@&i/o-read-rtd) (&i/o-rcd . oR4f82@oR4dd8@&i/o-rcd) (&i/o-rtd . oR4f81@oR4dd6@&i/o-rtd) (&undefined-rcd . oR4f7a@oR4dc3@&undefined-rcd) (&undefined-rtd . oR4f79@oR4dc1@&undefined-rtd) (&syntax-rcd . oR4f72@oR4dae@&syntax-rcd) (&syntax-rtd . oR4f71@oR4dac@&syntax-rtd) (&lexical-rcd . oR4f66@oR4d8d@&lexical-rcd) (&lexical-rtd . oR4f65@oR4d8b@&lexical-rtd) (&implementation-restriction-rcd . oR4f5e@oR4d78@&implementation-restriction-rcd) (&implementation-restriction-rtd . oR4f5d@oR4d76@&implementation-restriction-rtd) (&non-continuable-rcd . oR4f56@oR4d63@&non-continuable-rcd) (&non-continuable-rtd . oR4f55@oR4d61@&non-continuable-rtd) (&who-rcd . oR4f4e@oR4d4e@&who-rcd) (&who-rtd . oR4f4d@oR4d4c@&who-rtd) (&irritants-rcd . oR4f44@oR4d33@&irritants-rcd) (&irritants-rtd . oR4f43@oR4d31@&irritants-rtd) (&assertion-rcd . oR4f3a@oR4d18@&assertion-rcd) (&assertion-rtd . oR4f39@oR4d16@&assertion-rtd) (&violation-rcd . oR4f32@oR4d03@&violation-rcd) (&violation-rtd . oR4f31@oR4d01@&violation-rtd) (&error-rcd . oR4f2a@oR4cee@&error-rcd) (&error-rtd . oR4f29@oR4cec@&error-rtd) (&serious-rcd . oR4f22@oR4cd9@&serious-rcd) (&serious-rtd . oR4f21@oR4cd7@&serious-rtd) (&warning-rcd . oR4f1a@oR4cc4@&warning-rcd) (&warning-rtd . oR4f19@oR4cc2@&warning-rtd) (&message-rcd . oR4f12@oR4caf@&message-rcd) (&message-rtd . oR4f11@oR4cad@&message-rtd) (&condition-rcd . oR4f08@oR4c50@&condition-rcd) (&condition-rtd . oR4f07@oR4c4e@&condition-rtd) (syntax-error . oR4c2a@oR31ce@syntax-error) (syntax-dispatch . oR4bc8@oR30f2@syntax-dispatch) (load . oR515a@oR5010@load) (interaction-environment . oR4c33@oR31e0@interaction-environment) (library-path . oR2cee@oR2b1a@library-path) (mosh-cache-dir . oR2a25@oR2904@mosh-cache-dir) (make-parameter . oR2a24@oR2902@make-parameter) (make-variable-transformer . oR4b85@oR2f1d@make-variable-transformer) (identifier? . oR4c2d@oR31d4@identifier?) (generate-temporaries . oR4c23@oR31c0@generate-temporaries) (free-identifier=? . oR4c24@oR31c2@free-identifier=?) (syntax->datum . oR4c2f@oR31d8@syntax->datum) (datum->syntax . oR4c2e@oR31d6@datum->syntax) (bound-identifier=? . oR4c25@oR31c4@bound-identifier=?) (make-i/o-write-error . oR4f8f@oR4dfc@make-i/o-write-error) (make-i/o-read-error . oR4f87@oR4de7@make-i/o-read-error) (make-i/o-port-error . oR4fcb@oR4e9d@make-i/o-port-error) (make-i/o-invalid-position-error . oR4f97@oR4e13@make-i/o-invalid-position-error) (make-i/o-filename-error . oR4fa1@oR4e2e@make-i/o-filename-error) (make-i/o-file-protection-error . oR4fab@oR4e47@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . oR4fb3@oR4e5c@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . oR4fc3@oR4e86@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . oR4fbb@oR4e71@make-i/o-file-already-exists-error) (make-i/o-error . oR4f7f@oR4dd2@make-i/o-error) (make-i/o-encoding-error . oR4fdd@oR4ecd@make-i/o-encoding-error) (make-i/o-decoding-error . oR4fd5@oR4eb6@make-i/o-decoding-error) (i/o-write-error? . oR4f90@oR4dfe@i/o-write-error?) (i/o-read-error? . oR4f88@oR4de9@i/o-read-error?) (i/o-port-error? . oR4fcd@oR4ea1@i/o-port-error?) (i/o-invalid-position-error? . oR4f99@oR4e17@i/o-invalid-position-error?) (i/o-filename-error? . oR4fa3@oR4e32@i/o-filename-error?) (i/o-file-protection-error? . oR4fac@oR4e49@i/o-file-protection-error?) (i/o-file-is-read-only-error? . oR4fb4@oR4e5e@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . oR4fc4@oR4e88@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . oR4fbc@oR4e73@i/o-file-already-exists-error?) (i/o-error? . oR4f80@oR4dd4@i/o-error?) (i/o-error-position . oR4f9a@oR4e19@i/o-error-position) (i/o-error-port . oR4fce@oR4ea3@i/o-error-port) (i/o-error-filename . oR4fa4@oR4e34@i/o-error-filename) (i/o-encoding-error? . oR4fdf@oR4ed1@i/o-encoding-error?) (i/o-encoding-error-char . oR4fe0@oR4ed3@i/o-encoding-error-char) (i/o-decoding-error? . oR4fd6@oR4eb8@i/o-decoding-error?) (scheme-report-environment . oR4c1a@oR31ae@scheme-report-environment) (null-environment . oR4c19@oR31ac@null-environment) (command-line . oR5157@oR500a@command-line) (eval . oR4c1c@oR31b2@eval) (environment . oR4c18@oR31aa@environment) (who-condition? . oR4f4b@oR4d48@who-condition?) (warning? . oR4f18@oR4cc0@warning?) (violation? . oR4f30@oR4cff@violation?) (undefined-violation? . oR4f78@oR4dbf@undefined-violation?) (syntax-violation? . oR4f6e@oR4da6@syntax-violation?) (syntax-violation-subform . oR4f70@oR4daa@syntax-violation-subform) (syntax-violation-form . oR4f6f@oR4da8@syntax-violation-form) (syntax-violation . oR4c2c@oR31d2@syntax-violation) (serious-condition? . oR4f20@oR4cd5@serious-condition?) (non-continuable-violation? . oR4f54@oR4d5f@non-continuable-violation?) (message-condition? . oR4f0f@oR4ca9@message-condition?) (make-who-condition . oR4f49@oR4d44@make-who-condition) (make-warning . oR4f17@oR4cbe@make-warning) (make-violation . oR4f2f@oR4cfd@make-violation) (make-undefined-violation . oR4f77@oR4dbd@make-undefined-violation) (make-syntax-violation . oR4f6b@oR4da0@make-syntax-violation) (make-serious-condition . oR4f1f@oR4cd3@make-serious-condition) (make-non-continuable-violation . oR4f53@oR4d5d@make-non-continuable-violation) (make-message-condition . oR4f0d@oR4ca5@make-message-condition) (make-lexical-violation . oR4f63@oR4d87@make-lexical-violation) (make-irritants-condition . oR4f3f@oR4d29@make-irritants-condition) (make-implementation-restriction-violation . oR4f5b@oR4d72@make-implementation-restriction-violation) (make-error . oR4f27@oR4ce8@make-error) (make-assertion-violation . oR4f37@oR4d12@make-assertion-violation) (lexical-violation? . oR4f64@oR4d89@lexical-violation?) (irritants-condition? . oR4f41@oR4d2d@irritants-condition?) (implementation-restriction-violation? . oR4f5c@oR4d74@implementation-restriction-violation?) (error? . oR4f28@oR4cea@error?) (condition-who . oR4f4c@oR4d4a@condition-who) (condition-message . oR4f10@oR4cab@condition-message) (condition-irritants . oR4f42@oR4d2f@condition-irritants) (assertion-violation? . oR4f38@oR4d14@assertion-violation?) (no-nans-violation? . oR4ff0@oR4efd@no-nans-violation?) (no-infinities-violation? . oR4fe8@oR4ee8@no-infinities-violation?) (make-no-nans-violation . oR4fef@oR4efb@make-no-nans-violation) (make-no-infinities-violation . oR4fe7@oR4ee6@make-no-infinities-violation) (assertion-error . oR4c29@oR31cc@assertion-error))))) (if oR54bc@t (cdr oR54bc@t) '#f)))) (oR2cfe@oR2b3a@install-library 'oR5497 '(mosh interaction) '() '() '() '() '((regexp? . oR548f) (alist->eq-hash-table . oR548b) (format . oR5488) (string-split . oR547c) (call-process . oR5476) (set-current-directory! . oR5472) (expand-path . oR5471) (current-directory . oR5470) (%spawn . oR546f) (%waitpid . oR546e) (simple-struct-name . oR546d) (simple-struct-set! . oR546c) (simple-struct-ref . oR546b) (make-simple-struct . oR546a) (simple-struct? . oR5469) (pointer-ref-c-int64 . oR5468) (pointer-ref-c-int32 . oR5467) (pointer-ref-c-int16 . oR5466) (pointer-ref-c-int8 . oR5465) (pointer-ref-c-uint64 . oR5464) (pointer-ref-c-uint32 . oR5463) (pointer-ref-c-uint16 . oR5462) (pointer-ref-c-uint8 . oR5461) (pointer-set-c-uint64! . oR5460) (pointer-set-c-uint32! . oR545f) (pointer-set-c-uint16! . oR545e) (pointer-set-c-uint8! . oR545d) (pointer-set-c-int64! . oR545c) (pointer-set-c-int32! . oR545b) (pointer-set-c-int16! . oR545a) (pointer-set-c-int8! . oR5459) (pointer-set-c-pointer! . oR5458) (pointer-set-c-double! . oR5457) (pointer-set-c-float! . oR5456) (pointer-set-c-long-long! . oR5455) (pointer-set-c-long! . oR5454) (pointer-set-c-int! . oR5453) (pointer-set-c-short! . oR5452) (pointer-set-c-char! . oR5451) (pointer-ref-c-pointer . oR5450) (pointer-ref-c-double . oR544f) (pointer-ref-c-float . oR544e) (pointer-ref-c-unsigned-long-long . oR544d) (pointer-ref-c-signed-long-long . oR544c) (pointer-ref-c-unsigned-long . oR544b) (pointer-ref-c-signed-long . oR544a) (pointer-ref-c-unsigned-int . oR5449) (pointer-ref-c-signed-int . oR5448) (pointer-ref-c-unsigned-short . oR5447) (pointer-ref-c-signed-short . oR5446) (pointer-ref-c-unsigned-char . oR5445) (pointer-ref-c-signed-char . oR5444) (pointer->integer . oR5443) (integer->pointer . oR5442) (pointer? . oR5441) (shared-errno . oR5440) (%ffi-supported? . oR5437) (%ffi-pointer->string . oR5436) (%ffi-call . oR5435) (%ffi-lookup . oR5434) (%ffi-open . oR5433) (null-terminated-utf8->string . oR5432) (null-terminated-bytevector->string . oR5431) (%fork . oR5430) (%pipe . oR542f) (p . oR542e) (whereis . oR5412) (register . oR5411) (vm-join! . oR5410) (vm-set-value! . oR540f) (vm? . oR540e) (main-vm? . oR540d) (vm-eval . oR540c) (vm-self . oR540b) (vm-start! . oR540a) (make-vm . oR5409) (mutex-try-lock! . oR5408) (mutex-unlock! . oR5407) (mutex-lock! . oR5406) (mutex? . oR5405) (make-mutex . oR5404) (condition-variable-notify-all! . oR5403) (condition-variable-notify! . oR5402) (condition-variable-wait! . oR5401) (make-condition-variable . oR5400) (string-upcase . oR53e3) (string-titlecase . oR53e2) (string-normalize-nfkd . oR53e1) (string-normalize-nfkc . oR53e0) (string-normalize-nfd . oR53df) (string-normalize-nfc . oR53de) (string-foldcase . oR53dd) (string-downcase . oR53dc) (string-ci>? . oR53db) (string-ci>=? . oR53da) (string-ci=? . oR53d9) (string-ci<? . oR53d8) (string-ci<=? . oR53d7) (char-whitespace? . oR53d6) (char-upper-case? . oR53d5) (char-title-case? . oR53d4) (char-numeric? . oR53d3) (char-lower-case? . oR53d2) (char-general-category . oR53d1) (char-upcase . oR53d0) (char-titlecase . oR53cf) (char-foldcase . oR53ce) (char-downcase . oR53cd) (char-ci>? . oR53cc) (char-ci>=? . oR53cb) (char-ci=? . oR53ca) (char-ci<? . oR53c9) (char-ci<=? . oR53c8) (char-alphabetic? . oR53c7) (make-variable-transformer . oR2f1c) (identifier? . oR31d3) (generate-temporaries . oR31bf) (free-identifier=? . oR31c1) (syntax->datum . oR31d7) (datum->syntax . oR31d5) (bound-identifier=? . oR31c3) (record-type-descriptor? . oR53c6) (record-predicate . oR53c5) (record-mutator . oR53c4) (record-constructor . oR53c3) (record-accessor . oR53c2) (make-record-type-descriptor . oR53c1) (make-record-constructor-descriptor . oR53c0) (record? . oR53bf) (record-type-uid . oR53be) (record-type-sealed? . oR53bd) (record-type-parent . oR53bc) (record-type-opaque? . oR53bb) (record-type-name . oR53ba) (record-type-generative? . oR53b9) (record-type-field-names . oR53b8) (record-rtd . oR53b7) (record-field-mutable? . oR53b6) (delete-file . oR53b5) (file-exists? . oR53b4) (vector-sort! . oR53b3) (vector-sort . oR53b2) (list-sort . oR53b1) (symbol-hash . oR53b0) (string-ci-hash . oR53af) (string-hash . oR53ae) (equal-hash . oR53ad) (hashtable-equivalence-function . oR53ac) (make-hashtable . oR53ab) (hashtable-hash-function . oR53aa) (make-eqv-hashtable . oR53a9) (make-eq-hashtable . oR53a8) (hashtable? . oR53a7) (hashtable-update! . oR53a6) (hashtable-size . oR53a5) (hashtable-set! . oR53a4) (hashtable-ref . oR53a3) (hashtable-mutable? . oR53a2) (hashtable-keys . oR53a1) (hashtable-entries . oR53a0) (hashtable-delete! . oR539f) (hashtable-copy . oR539e) (hashtable-contains? . oR539d) (hashtable-clear! . oR539c) (call-with-output-file . oR539b) (call-with-input-file . oR539a) (write-char . oR5399) (write . oR5398) (with-output-to-file . oR5397) (with-input-from-file . oR5396) (read-char . oR5395) (read . oR5394) (peek-char . oR5393) (open-output-file . oR5392) (open-input-file . oR5391) (newline . oR5390) (display . oR538f) (close-output-port . oR538e) (close-input-port . oR538d) (eof-object? . oR538c) (eof-object . oR538b) (current-error-port . oR538a) (current-output-port . oR5389) (current-input-port . oR5388) (output-port? . oR5387) (input-port? . oR5386) (utf-8-codec . oR5385) (utf-16-codec . oR5384) (transcoder-error-handling-mode . oR5383) (transcoder-eol-style . oR5382) (transcoder-codec . oR5381) (transcoded-port . oR5380) (textual-port? . oR537f) (string->bytevector . oR537e) (standard-output-port . oR537d) (standard-input-port . oR537c) (standard-error-port . oR537b) (set-port-position! . oR537a) (put-u8 . oR5379) (put-string . oR5378) (put-datum . oR5377) (put-char . oR5376) (put-bytevector . oR5375) (port? . oR5374) (port-transcoder . oR5373) (port-position . oR5372) (port-has-set-port-position!? . oR5371) (port-has-port-position? . oR5370) (port-eof? . oR536f) (output-port-buffer-mode . oR536e) (open-string-output-port . oR536d) (open-string-input-port . oR536c) (open-file-output-port . oR536b) (open-file-input/output-port . oR536a) (open-file-input-port . oR5369) (open-bytevector-output-port . oR5368) (open-bytevector-input-port . oR5367) (native-transcoder . oR5366) (native-eol-style . oR5365) (make-transcoder . oR5364) (latin-1-codec . oR5363) (make-i/o-write-error . oR4dfb) (make-i/o-read-error . oR4de6) (make-i/o-port-error . oR4e9c) (make-i/o-invalid-position-error . oR4e12) (make-i/o-filename-error . oR4e2d) (make-i/o-file-protection-error . oR4e46) (make-i/o-file-is-read-only-error . oR4e5b) (make-i/o-file-does-not-exist-error . oR4e85) (make-i/o-file-already-exists-error . oR4e70) (make-i/o-error . oR4dd1) (make-i/o-encoding-error . oR4ecc) (make-i/o-decoding-error . oR4eb5) (make-custom-textual-output-port . oR5362) (make-custom-textual-input/output-port . oR5361) (make-custom-textual-input-port . oR5360) (make-custom-binary-output-port . oR535f) (make-custom-binary-input/output-port . oR535e) (make-custom-binary-input-port . oR535d) (make-bytevector . oR535c) (lookahead-u8 . oR535b) (lookahead-char . oR535a) (i/o-write-error? . oR4dfd) (i/o-read-error? . oR4de8) (i/o-port-error? . oR4ea0) (i/o-invalid-position-error? . oR4e16) (i/o-filename-error? . oR4e31) (i/o-file-protection-error? . oR4e48) (i/o-file-is-read-only-error? . oR4e5d) (i/o-file-does-not-exist-error? . oR4e87) (i/o-file-already-exists-error? . oR4e72) (i/o-error? . oR4dd3) (i/o-error-position . oR4e18) (i/o-error-port . oR4ea2) (i/o-error-filename . oR4e33) (i/o-encoding-error? . oR4ed0) (i/o-encoding-error-char . oR4ed2) (i/o-decoding-error? . oR4eb7) (get-u8 . oR5359) (get-string-n! . oR5358) (get-string-n . oR5357) (get-string-all . oR5356) (get-line . oR5355) (get-datum . oR5354) (get-char . oR5353) (get-bytevector-some . oR5352) (get-bytevector-n! . oR5351) (get-bytevector-n . oR5350) (get-bytevector-all . oR534f) (flush-output-port . oR534e) (close-port . oR534d) (exit . oR5345) (command-line . oR5009) (string-fill! . oR5344) (string-set! . oR5343) (set-cdr! . oR5342) (set-car! . oR5341) (remove . oR5340) (remv . oR533f) (remp . oR533e) (remq . oR533d) (partition . oR533c) (memv . oR533b) (memq . oR533a) (memp . oR5339) (member . oR5338) (exists . oR5337) (for-all . oR5336) (fold-right . oR5335) (fold-left . oR5334) (find . oR5333) (filter . oR5332) (cons* . oR5331) (assv . oR5330) (assq . oR532f) (assp . oR532e) (assoc . oR532d) (call-with-string-output-port . oR532c) (call-with-port . oR532b) (call-with-bytevector-output-port . oR532a) (bytevector->string . oR5329) (buffer-mode? . oR5328) (binary-port? . oR5327) (with-exception-handler . oR5326) (raise-continuable . oR5325) (raise . oR5324) (eval . oR31b1) (environment . oR31a9) (make-enumeration . oR5323) (enum-set=? . oR5322) (enum-set-universe . oR5321) (enum-set-union . oR5320) (enum-set-subset? . oR531f) (enum-set-projection . oR531e) (enum-set-member? . oR531d) (enum-set-intersection . oR531c) (enum-set-indexer . oR531b) (enum-set-difference . oR531a) (enum-set-constructor . oR5319) (enum-set-complement . oR5318) (enum-set->list . oR5317) (who-condition? . oR4d47) (warning? . oR4cbf) (violation? . oR4cfe) (undefined-violation? . oR4dbe) (syntax-violation? . oR4da5) (syntax-violation-subform . oR4da9) (syntax-violation-form . oR4da7) (syntax-violation . oR31d1) (simple-conditions . oR5316) (serious-condition? . oR4cd4) (non-continuable-violation? . oR4d5e) (message-condition? . oR4ca8) (make-who-condition . oR4d43) (make-warning . oR4cbd) (make-violation . oR4cfc) (make-undefined-violation . oR4dbc) (make-syntax-violation . oR4d9f) (make-serious-condition . oR4cd2) (make-non-continuable-violation . oR4d5c) (make-message-condition . oR4ca4) (make-lexical-violation . oR4d86) (make-irritants-condition . oR4d28) (make-implementation-restriction-violation . oR4d71) (make-error . oR4ce7) (make-assertion-violation . oR4d11) (lexical-violation? . oR4d88) (irritants-condition? . oR4d2c) (implementation-restriction-violation? . oR4d73) (error? . oR4ce9) (condition-who . oR4d49) (condition-predicate . oR5315) (condition-message . oR4caa) (condition-irritants . oR4d2e) (condition-accessor . oR5314) (condition . oR5313) (assertion-violation? . oR4d13) (condition? . oR5312) (utf32->string . oR5311) (utf16->string . oR5310) (utf8->string . oR530f) (uint-list->bytevector . oR530e) (u8-list->bytevector . oR530d) (string->utf8 . oR530c) (string->utf32 . oR530b) (string->utf16 . oR530a) (sint-list->bytevector . oR5309) (native-endianness . oR5308) (bytevector? . oR5307) (bytevector=? . oR5306) (bytevector-uint-set! . oR5305) (bytevector-uint-ref . oR5304) (bytevector-u8-set! . oR5303) (bytevector-u8-ref . oR5302) (bytevector-u64-set! . oR5301) (bytevector-u64-ref . oR5300) (bytevector-u64-native-set! . oR52ff) (bytevector-u64-native-ref . oR52fe) (bytevector-u32-set! . oR52fd) (bytevector-u32-ref . oR52fc) (bytevector-u32-native-set! . oR52fb) (bytevector-u32-native-ref . oR52fa) (bytevector-u16-set! . oR52f9) (bytevector-u16-ref . oR52f8) (bytevector-u16-native-set! . oR52f7) (bytevector-u16-native-ref . oR52f6) (bytevector-sint-set! . oR52f5) (bytevector-sint-ref . oR52f4) (bytevector-s8-set! . oR52f3) (bytevector-s8-ref . oR52f2) (bytevector-s64-set! . oR52f1) (bytevector-s64-ref . oR52f0) (bytevector-s64-native-set! . oR52ef) (bytevector-s64-native-ref . oR52ee) (bytevector-s32-set! . oR52ed) (bytevector-s32-ref . oR52ec) (bytevector-s32-native-set! . oR52eb) (bytevector-s32-native-ref . oR52ea) (bytevector-s16-set! . oR52e9) (bytevector-s16-ref . oR52e8) (bytevector-s16-native-set! . oR52e7) (bytevector-s16-native-ref . oR52e6) (bytevector-length . oR52e5) (bytevector-ieee-single-ref . oR52e4) (bytevector-ieee-single-set! . oR52e3) (bytevector-ieee-single-native-set! . oR52e2) (bytevector-ieee-single-native-ref . oR52e1) (bytevector-ieee-double-set! . oR52e0) (bytevector-ieee-double-ref . oR52df) (bytevector-ieee-double-native-set! . oR52de) (bytevector-ieee-double-native-ref . oR52dd) (bytevector-fill! . oR52dc) (bytevector-copy! . oR52db) (bytevector-copy . oR52da) (bytevector->uint-list . oR52d9) (bytevector->u8-list . oR52d8) (bytevector->sint-list . oR52d7) (no-nans-violation? . oR4efc) (no-infinities-violation? . oR4ee7) (make-no-nans-violation . oR4efa) (make-no-infinities-violation . oR4ee5) (real->flonum . oR52d6) (flzero? . oR52d5) (fltruncate . oR52d4) (fltan . oR52d3) (flsqrt . oR52d2) (flsin . oR52d1) (flround . oR52d0) (flpositive? . oR52cf) (flonum? . oR52ce) (flodd? . oR52cd) (flnumerator . oR52cc) (flnegative? . oR52cb) (flnan? . oR52ca) (flmod0 . oR52c9) (flmod . oR52c8) (flmin . oR52c7) (flmax . oR52c6) (fllog . oR52c5) (flinteger? . oR52c4) (flinfinite? . oR52c3) (flfloor . oR52c2) (flfinite? . oR52c1) (flexpt . oR52c0) (flexp . oR52bf) (fleven? . oR52be) (fldiv0-and-mod0 . oR52bd) (fldiv0 . oR52bc) (fldiv-and-mod . oR52bb) (fldiv . oR52ba) (fldenominator . oR52b9) (flcos . oR52b8) (flceiling . oR52b7) (flatan . oR52b6) (flasin . oR52b5) (flacos . oR52b4) (flabs . oR52b3) (fl>? . oR52b2) (fl>=? . oR52b1) (fl=? . oR52b0) (fl<? . oR52af) (fl<=? . oR52ae) (fl/ . oR52ad) (fl- . oR52ac) (fl+ . oR52ab) (fl* . oR52aa) (fixnum->flonum . oR52a9) (fxzero? . oR52a8) (fxxor . oR52a7) (fxrotate-bit-field . oR52a6) (fxreverse-bit-field . oR52a5) (fxpositive? . oR52a4) (fxodd? . oR52a3) (fxnot . oR52a2) (fxnegative? . oR52a1) (fxmod0 . oR52a0) (fxmod . oR529f) (fxmin . oR529e) (fxmax . oR529d) (fxlength . oR529c) (fxior . oR529b) (fxif . oR529a) (fxfirst-bit-set . oR5299) (fxeven? . oR5298) (fxdiv0-and-mod0 . oR5297) (fxdiv0 . oR5296) (fxdiv-and-mod . oR5295) (fxdiv . oR5294) (fxcopy-bit-field . oR5293) (fxcopy-bit . oR5292) (fxbit-set? . oR5291) (fxbit-field . oR5290) (fxbit-count . oR528f) (fxarithmetic-shift-right . oR528e) (fxarithmetic-shift-left . oR528d) (fxarithmetic-shift . oR528c) (fxand . oR528b) (fx>? . oR528a) (fx>=? . oR5289) (fx=? . oR5288) (fx<? . oR5287) (fx<=? . oR5286) (fx-/carry . oR5285) (fx- . oR5284) (fx+/carry . oR5283) (fx+ . oR5282) (fx*/carry . oR5281) (fx* . oR5280) (greatest-fixnum . oR527f) (least-fixnum . oR527e) (fixnum-width . oR527d) (fixnum? . oR527c) (bitwise-rotate-bit-field . oR527b) (bitwise-reverse-bit-field . oR527a) (bitwise-length . oR5279) (bitwise-if . oR5278) (bitwise-first-bit-set . oR5277) (bitwise-copy-bit-field . oR5276) (bitwise-copy-bit . oR5275) (bitwise-bit-set? . oR5274) (bitwise-bit-field . oR5273) (bitwise-bit-count . oR5272) (bitwise-xor . oR5271) (bitwise-ior . oR5270) (bitwise-and . oR526f) (bitwise-not . oR526e) (bitwise-arithmetic-shift-right . oR526d) (bitwise-arithmetic-shift-left . oR526c) (bitwise-arithmetic-shift . oR526b) (zero? . oR526a) (vector? . oR5269) (vector-set! . oR5268) (vector-ref . oR5267) (vector-map . oR5266) (vector-length . oR5265) (vector-for-each . oR5264) (vector-fill! . oR5263) (vector->list . oR5262) (vector . oR5261) (values . oR5260) (truncate . oR525f) (tan . oR525e) (symbol? . oR525d) (symbol=? . oR525c) (symbol->string . oR525b) (substring . oR525a) (string? . oR5259) (string>? . oR5258) (string>=? . oR5257) (string=? . oR5256) (string<? . oR5255) (string<=? . oR5254) (string-ref . oR5253) (string-length . oR5252) (string-for-each . oR5251) (string-copy . oR5250) (string-append . oR524f) (string->symbol . oR524e) (string->number . oR524d) (string->list . oR524c) (string . oR524b) (sqrt . oR524a) (sin . oR5249) (round . oR5248) (reverse . oR5247) (real? . oR5246) (real-valued? . oR5245) (real-part . oR5244) (rationalize . oR5243) (rational? . oR5242) (rational-valued? . oR5241) (procedure? . oR5240) (positive? . oR523f) (pair? . oR523e) (odd? . oR523d) (numerator . oR523c) (number? . oR523b) (number->string . oR523a) (null? . oR5239) (not . oR5238) (negative? . oR5237) (nan? . oR5236) (min . oR5235) (max . oR5234) (map . oR5233) (make-vector . oR5232) (make-string . oR5231) (make-rectangular . oR5230) (make-polar . oR522f) (magnitude . oR522e) (log . oR522d) (list? . oR522c) (list-tail . oR522b) (list-ref . oR522a) (list->vector . oR5229) (list->string . oR5228) (list . oR5227) (length . oR5226) (lcm . oR5225) (integer? . oR5224) (integer-valued? . oR5223) (integer->char . oR5222) (infinite? . oR5221) (inexact? . oR5220) (inexact . oR521f) (imag-part . oR521e) (gcd . oR521d) (for-each . oR521c) (floor . oR521b) (finite? . oR521a) (expt . oR5219) (exp . oR5218) (exact? . oR5217) (exact-integer-sqrt . oR5216) (exact . oR5215) (even? . oR5214) (error . oR5213) (eqv? . oR5212) (equal? . oR5211) (eq? . oR5210) (dynamic-wind . oR520f) (div0-and-mod0 . oR520e) (mod0 . oR520d) (div0 . oR520c) (div-and-mod . oR520b) (mod . oR520a) (div . oR5209) (denominator . oR5208) (cos . oR5207) (cons . oR5206) (complex? . oR5205) (char? . oR5204) (char>? . oR5203) (char>=? . oR5202) (char=? . oR5201) (char<? . oR5200) (char<=? . oR51ff) (char->integer . oR51fe) (ceiling . oR51fd) (call-with-values . oR51fc) (call/cc . oR51fb) (call-with-current-continuation . oR51fa) (cddddr . oR51f9) (cdddar . oR51f8) (cddadr . oR51f7) (cddaar . oR51f6) (cdaddr . oR51f5) (cdadar . oR51f4) (cdaadr . oR51f3) (cdaaar . oR51f2) (cadddr . oR51f1) (caddar . oR51f0) (cadadr . oR51ef) (cadaar . oR51ee) (caaddr . oR51ed) (caadar . oR51ec) (caaadr . oR51eb) (caaaar . oR51ea) (cdddr . oR51e9) (cddar . oR51e8) (cdadr . oR51e7) (cdaar . oR51e6) (caddr . oR51e5) (cadar . oR51e4) (caadr . oR51e3) (caaar . oR51e2) (cddr . oR51e1) (cdar . oR51e0) (cadr . oR51df) (caar . oR51de) (cdr . oR51dd) (car . oR51dc) (boolean? . oR51db) (boolean=? . oR51da) (atan . oR51d9) (assertion-violation . oR51d8) (asin . oR51d7) (apply . oR51d6) (append . oR51d5) (angle . oR51d4) (acos . oR51d3) (abs . oR51d2) (/ . oR51d1) (* . oR51d0) (- . oR51cf) (+ . oR51ce) (>= . oR51cd) (> . oR51cc) (= . oR51cb) (<= . oR51ca) (< . oR51c9) (library . oR51c8) (&no-nans . oR51c7) (&no-infinities . oR51c6) (&i/o-encoding . oR51c5) (&i/o-decoding . oR51c4) (&i/o-port . oR51c3) (&i/o-file-does-not-exist . oR51c2) (&i/o-file-already-exists . oR51c1) (&i/o-file-is-read-only . oR51c0) (&i/o-file-protection . oR51bf) (&i/o-filename . oR51be) (&i/o-invalid-position . oR51bd) (&i/o-write . oR51bc) (&i/o-read . oR51bb) (&i/o . oR51ba) (&undefined . oR51b9) (&syntax . oR51b8) (&lexical . oR51b7) (&implementation-restriction . oR51b6) (&non-continuable . oR51b5) (&who . oR51b4) (&irritants . oR51b3) (&assertion . oR51b2) (&violation . oR51b1) (&error . oR51b0) (&serious . oR51af) (&warning . oR51ae) (&message . oR51ad) (&condition . oR51ac) (define-condition-type . oR51ab) (define-enumeration . oR51aa) (define-record-type . oR51a9) (parent-rtd . oR51a8) (nongenerative . oR51a7) (opaque . oR51a6) (sealed . oR51a5) (protocol . oR51a4) (parent . oR51a3) (immutable . oR51a2) (mutable . oR51a1) (fields . oR51a0) (error-handling-mode . oR519f) (file-options . oR519e) (buffer-mode . oR519d) (eol-style . oR519c) (guard . oR519b) (unsyntax-splicing . oR5198) (unsyntax . oR5197) (unquote-splicing . oR5196) (unquote . oR5195) (_ . oR5194) (else . oR5193) (=> . oR5192) (... . oR5191) (assert . oR5190) (endianness . oR518f) (time . oR518d) (do . oR518c) (cond . oR518b) (let* . oR518a) (let*-values . oR5189) (let-values . oR5188) (identifier-syntax . oR5187) (with-syntax . oR5186) (quasisyntax . oR5185) (quasiquote . oR5184) (syntax-rules . oR5183) (include . oR5182) (record-constructor-descriptor . oR5180) (record-type-descriptor . oR517f) (case . oR517e) (unless . oR517c) (when . oR517b) (or . oR517a) (and . oR5179) (if . oR5178) (let . oR5177) (letrec* . oR5176) (letrec . oR5175) (case-lambda . oR5173) (lambda . oR5172) (syntax . oR5171) (syntax-case . oR5170) (quote . oR516f) (letrec-syntax . oR516d) (let-syntax . oR516c) (set! . oR516b) (import . oR516a) (begin . oR5169) (define-syntax . oR5167) (define . oR5166)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR5498 '(psyntax null-environment-5) '() '() '() '() '((make-promise . oR5346) (unquote-splicing . oR5196) (unquote . oR5195) (_ . oR5194) (else . oR5193) (=> . oR5192) (... . oR5191) (delay . oR518e) (do . oR518c) (cond . oR518b) (let* . oR518a) (quasiquote . oR5184) (syntax-rules . oR5183) (case . oR517e) (or . oR517a) (and . oR5179) (if . oR5178) (let . oR5177) (letrec . oR5175) (lambda . oR5172) (quote . oR516f) (letrec-syntax . oR516d) (let-syntax . oR516c) (set! . oR516b) (begin . oR5169) (define-syntax . oR5167) (define . oR5166)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR5499 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . oR53db) (string-ci>=? . oR53da) (string-ci=? . oR53d9) (string-ci<? . oR53d8) (string-ci<=? . oR53d7) (char-whitespace? . oR53d6) (char-upper-case? . oR53d5) (char-numeric? . oR53d3) (char-lower-case? . oR53d2) (char-upcase . oR53d0) (char-downcase . oR53cd) (char-ci>? . oR53cc) (char-ci>=? . oR53cb) (char-ci=? . oR53ca) (char-ci<? . oR53c9) (char-ci<=? . oR53c8) (char-alphabetic? . oR53c7) (call-with-output-file . oR539b) (call-with-input-file . oR539a) (write-char . oR5399) (write . oR5398) (with-output-to-file . oR5397) (with-input-from-file . oR5396) (read-char . oR5395) (read . oR5394) (peek-char . oR5393) (open-output-file . oR5392) (open-input-file . oR5391) (newline . oR5390) (display . oR538f) (close-output-port . oR538e) (close-input-port . oR538d) (eof-object . oR538b) (current-output-port . oR5389) (current-input-port . oR5388) (output-port? . oR5387) (input-port? . oR5386) (scheme-report-environment . oR31ad) (quotient . oR534c) (null-environment . oR31ab) (remainder . oR534b) (modulo . oR534a) (inexact->exact . oR5349) (force . oR5348) (exact->inexact . oR5347) (make-promise . oR5346) (string-fill! . oR5344) (string-set! . oR5343) (set-cdr! . oR5342) (set-car! . oR5341) (memv . oR533b) (memq . oR533a) (member . oR5338) (assv . oR5330) (assq . oR532f) (assoc . oR532d) (eval . oR31b1) (zero? . oR526a) (vector? . oR5269) (vector-set! . oR5268) (vector-ref . oR5267) (vector-length . oR5265) (vector-fill! . oR5263) (vector->list . oR5262) (vector . oR5261) (values . oR5260) (truncate . oR525f) (tan . oR525e) (symbol? . oR525d) (symbol->string . oR525b) (substring . oR525a) (string? . oR5259) (string>? . oR5258) (string>=? . oR5257) (string=? . oR5256) (string<? . oR5255) (string<=? . oR5254) (string-ref . oR5253) (string-length . oR5252) (string-copy . oR5250) (string-append . oR524f) (string->symbol . oR524e) (string->number . oR524d) (string->list . oR524c) (string . oR524b) (sqrt . oR524a) (sin . oR5249) (round . oR5248) (reverse . oR5247) (real? . oR5246) (real-part . oR5244) (rationalize . oR5243) (rational? . oR5242) (procedure? . oR5240) (positive? . oR523f) (pair? . oR523e) (odd? . oR523d) (numerator . oR523c) (number? . oR523b) (number->string . oR523a) (not . oR5238) (negative? . oR5237) (min . oR5235) (max . oR5234) (map . oR5233) (make-vector . oR5232) (make-string . oR5231) (make-rectangular . oR5230) (make-polar . oR522f) (magnitude . oR522e) (log . oR522d) (list? . oR522c) (list-tail . oR522b) (list-ref . oR522a) (list->vector . oR5229) (list->string . oR5228) (list . oR5227) (length . oR5226) (lcm . oR5225) (integer? . oR5224) (integer->char . oR5222) (inexact? . oR5220) (imag-part . oR521e) (gcd . oR521d) (for-each . oR521c) (floor . oR521b) (expt . oR5219) (exp . oR5218) (exact? . oR5217) (even? . oR5214) (eqv? . oR5212) (equal? . oR5211) (eq? . oR5210) (dynamic-wind . oR520f) (denominator . oR5208) (cos . oR5207) (cons . oR5206) (complex? . oR5205) (char? . oR5204) (char>? . oR5203) (char>=? . oR5202) (char=? . oR5201) (char<? . oR5200) (char<=? . oR51ff) (char->integer . oR51fe) (ceiling . oR51fd) (call-with-values . oR51fc) (call-with-current-continuation . oR51fa) (cddddr . oR51f9) (cdddar . oR51f8) (cddadr . oR51f7) (cddaar . oR51f6) (cdaddr . oR51f5) (cdadar . oR51f4) (cdaadr . oR51f3) (cdaaar . oR51f2) (cadddr . oR51f1) (caddar . oR51f0) (cadadr . oR51ef) (cadaar . oR51ee) (caaddr . oR51ed) (caadar . oR51ec) (caaadr . oR51eb) (caaaar . oR51ea) (cdddr . oR51e9) (cddar . oR51e8) (cdadr . oR51e7) (cdaar . oR51e6) (caddr . oR51e5) (cadar . oR51e4) (caadr . oR51e3) (caaar . oR51e2) (cddr . oR51e1) (cdar . oR51e0) (cadr . oR51df) (caar . oR51de) (cdr . oR51dd) (car . oR51dc) (boolean? . oR51db) (atan . oR51d9) (asin . oR51d7) (apply . oR51d6) (append . oR51d5) (angle . oR51d4) (acos . oR51d3) (abs . oR51d2) (/ . oR51d1) (* . oR51d0) (- . oR51cf) (+ . oR51ce) (>= . oR51cd) (> . oR51cc) (= . oR51cb) (<= . oR51ca) (< . oR51c9) (unquote-splicing . oR5196) (unquote . oR5195) (else . oR5193) (=> . oR5192) (... . oR5191) (delay . oR518e) (do . oR518c) (cond . oR518b) (let* . oR518a) (quasiquote . oR5184) (syntax-rules . oR5183) (case . oR517e) (or . oR517a) (and . oR5179) (if . oR5178) (let . oR5177) (letrec . oR5175) (lambda . oR5172) (quote . oR516f) (letrec-syntax . oR516d) (let-syntax . oR516c) (set! . oR516b) (begin . oR5169) (define-syntax . oR5167) (define . oR5166)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR549a '(psyntax modules) '() '() '() '() '((module . oR5168)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR549b '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR549c '(rnrs) '(6) '() '() '() '((regexp? . oR548f) (string-upcase . oR53e3) (string-titlecase . oR53e2) (string-normalize-nfkd . oR53e1) (string-normalize-nfkc . oR53e0) (string-normalize-nfd . oR53df) (string-normalize-nfc . oR53de) (string-foldcase . oR53dd) (string-downcase . oR53dc) (string-ci>? . oR53db) (string-ci>=? . oR53da) (string-ci=? . oR53d9) (string-ci<? . oR53d8) (string-ci<=? . oR53d7) (char-whitespace? . oR53d6) (char-upper-case? . oR53d5) (char-title-case? . oR53d4) (char-numeric? . oR53d3) (char-lower-case? . oR53d2) (char-general-category . oR53d1) (char-upcase . oR53d0) (char-titlecase . oR53cf) (char-foldcase . oR53ce) (char-downcase . oR53cd) (char-ci>? . oR53cc) (char-ci>=? . oR53cb) (char-ci=? . oR53ca) (char-ci<? . oR53c9) (char-ci<=? . oR53c8) (char-alphabetic? . oR53c7) (make-variable-transformer . oR2f1c) (identifier? . oR31d3) (generate-temporaries . oR31bf) (free-identifier=? . oR31c1) (syntax->datum . oR31d7) (datum->syntax . oR31d5) (bound-identifier=? . oR31c3) (record-type-descriptor? . oR53c6) (record-predicate . oR53c5) (record-mutator . oR53c4) (record-constructor . oR53c3) (record-accessor . oR53c2) (make-record-type-descriptor . oR53c1) (make-record-constructor-descriptor . oR53c0) (record? . oR53bf) (record-type-uid . oR53be) (record-type-sealed? . oR53bd) (record-type-parent . oR53bc) (record-type-opaque? . oR53bb) (record-type-name . oR53ba) (record-type-generative? . oR53b9) (record-type-field-names . oR53b8) (record-rtd . oR53b7) (record-field-mutable? . oR53b6) (delete-file . oR53b5) (file-exists? . oR53b4) (vector-sort! . oR53b3) (vector-sort . oR53b2) (list-sort . oR53b1) (symbol-hash . oR53b0) (string-ci-hash . oR53af) (string-hash . oR53ae) (equal-hash . oR53ad) (hashtable-equivalence-function . oR53ac) (make-hashtable . oR53ab) (hashtable-hash-function . oR53aa) (make-eqv-hashtable . oR53a9) (make-eq-hashtable . oR53a8) (hashtable? . oR53a7) (hashtable-update! . oR53a6) (hashtable-size . oR53a5) (hashtable-set! . oR53a4) (hashtable-ref . oR53a3) (hashtable-mutable? . oR53a2) (hashtable-keys . oR53a1) (hashtable-entries . oR53a0) (hashtable-delete! . oR539f) (hashtable-copy . oR539e) (hashtable-contains? . oR539d) (hashtable-clear! . oR539c) (call-with-output-file . oR539b) (call-with-input-file . oR539a) (write-char . oR5399) (write . oR5398) (with-output-to-file . oR5397) (with-input-from-file . oR5396) (read-char . oR5395) (read . oR5394) (peek-char . oR5393) (open-output-file . oR5392) (open-input-file . oR5391) (newline . oR5390) (display . oR538f) (close-output-port . oR538e) (close-input-port . oR538d) (eof-object? . oR538c) (eof-object . oR538b) (current-error-port . oR538a) (current-output-port . oR5389) (current-input-port . oR5388) (output-port? . oR5387) (input-port? . oR5386) (utf-8-codec . oR5385) (utf-16-codec . oR5384) (transcoder-error-handling-mode . oR5383) (transcoder-eol-style . oR5382) (transcoder-codec . oR5381) (transcoded-port . oR5380) (textual-port? . oR537f) (string->bytevector . oR537e) (standard-output-port . oR537d) (standard-input-port . oR537c) (standard-error-port . oR537b) (set-port-position! . oR537a) (put-u8 . oR5379) (put-string . oR5378) (put-datum . oR5377) (put-char . oR5376) (put-bytevector . oR5375) (port? . oR5374) (port-transcoder . oR5373) (port-position . oR5372) (port-has-set-port-position!? . oR5371) (port-has-port-position? . oR5370) (port-eof? . oR536f) (output-port-buffer-mode . oR536e) (open-string-output-port . oR536d) (open-string-input-port . oR536c) (open-file-output-port . oR536b) (open-file-input/output-port . oR536a) (open-file-input-port . oR5369) (open-bytevector-output-port . oR5368) (open-bytevector-input-port . oR5367) (native-transcoder . oR5366) (native-eol-style . oR5365) (make-transcoder . oR5364) (latin-1-codec . oR5363) (make-i/o-write-error . oR4dfb) (make-i/o-read-error . oR4de6) (make-i/o-port-error . oR4e9c) (make-i/o-invalid-position-error . oR4e12) (make-i/o-filename-error . oR4e2d) (make-i/o-file-protection-error . oR4e46) (make-i/o-file-is-read-only-error . oR4e5b) (make-i/o-file-does-not-exist-error . oR4e85) (make-i/o-file-already-exists-error . oR4e70) (make-i/o-error . oR4dd1) (make-i/o-encoding-error . oR4ecc) (make-i/o-decoding-error . oR4eb5) (make-custom-textual-output-port . oR5362) (make-custom-textual-input/output-port . oR5361) (make-custom-textual-input-port . oR5360) (make-custom-binary-output-port . oR535f) (make-custom-binary-input/output-port . oR535e) (make-custom-binary-input-port . oR535d) (make-bytevector . oR535c) (lookahead-u8 . oR535b) (lookahead-char . oR535a) (i/o-write-error? . oR4dfd) (i/o-read-error? . oR4de8) (i/o-port-error? . oR4ea0) (i/o-invalid-position-error? . oR4e16) (i/o-filename-error? . oR4e31) (i/o-file-protection-error? . oR4e48) (i/o-file-is-read-only-error? . oR4e5d) (i/o-file-does-not-exist-error? . oR4e87) (i/o-file-already-exists-error? . oR4e72) (i/o-error? . oR4dd3) (i/o-error-position . oR4e18) (i/o-error-port . oR4ea2) (i/o-error-filename . oR4e33) (i/o-encoding-error? . oR4ed0) (i/o-encoding-error-char . oR4ed2) (i/o-decoding-error? . oR4eb7) (get-u8 . oR5359) (get-string-n! . oR5358) (get-string-n . oR5357) (get-string-all . oR5356) (get-line . oR5355) (get-datum . oR5354) (get-char . oR5353) (get-bytevector-some . oR5352) (get-bytevector-n! . oR5351) (get-bytevector-n . oR5350) (get-bytevector-all . oR534f) (flush-output-port . oR534e) (close-port . oR534d) (exit . oR5345) (command-line . oR5009) (remove . oR5340) (remv . oR533f) (remp . oR533e) (remq . oR533d) (partition . oR533c) (memv . oR533b) (memq . oR533a) (memp . oR5339) (member . oR5338) (exists . oR5337) (for-all . oR5336) (fold-right . oR5335) (fold-left . oR5334) (find . oR5333) (filter . oR5332) (cons* . oR5331) (assv . oR5330) (assq . oR532f) (assp . oR532e) (assoc . oR532d) (call-with-string-output-port . oR532c) (call-with-port . oR532b) (call-with-bytevector-output-port . oR532a) (bytevector->string . oR5329) (buffer-mode? . oR5328) (binary-port? . oR5327) (with-exception-handler . oR5326) (raise-continuable . oR5325) (raise . oR5324) (make-enumeration . oR5323) (enum-set=? . oR5322) (enum-set-universe . oR5321) (enum-set-union . oR5320) (enum-set-subset? . oR531f) (enum-set-projection . oR531e) (enum-set-member? . oR531d) (enum-set-intersection . oR531c) (enum-set-indexer . oR531b) (enum-set-difference . oR531a) (enum-set-constructor . oR5319) (enum-set-complement . oR5318) (enum-set->list . oR5317) (who-condition? . oR4d47) (warning? . oR4cbf) (violation? . oR4cfe) (undefined-violation? . oR4dbe) (syntax-violation? . oR4da5) (syntax-violation-subform . oR4da9) (syntax-violation-form . oR4da7) (syntax-violation . oR31d1) (simple-conditions . oR5316) (serious-condition? . oR4cd4) (non-continuable-violation? . oR4d5e) (message-condition? . oR4ca8) (make-who-condition . oR4d43) (make-warning . oR4cbd) (make-violation . oR4cfc) (make-undefined-violation . oR4dbc) (make-syntax-violation . oR4d9f) (make-serious-condition . oR4cd2) (make-non-continuable-violation . oR4d5c) (make-message-condition . oR4ca4) (make-lexical-violation . oR4d86) (make-irritants-condition . oR4d28) (make-implementation-restriction-violation . oR4d71) (make-error . oR4ce7) (make-assertion-violation . oR4d11) (lexical-violation? . oR4d88) (irritants-condition? . oR4d2c) (implementation-restriction-violation? . oR4d73) (error? . oR4ce9) (condition-who . oR4d49) (condition-predicate . oR5315) (condition-message . oR4caa) (condition-irritants . oR4d2e) (condition-accessor . oR5314) (condition . oR5313) (assertion-violation? . oR4d13) (condition? . oR5312) (utf32->string . oR5311) (utf16->string . oR5310) (utf8->string . oR530f) (uint-list->bytevector . oR530e) (u8-list->bytevector . oR530d) (string->utf8 . oR530c) (string->utf32 . oR530b) (string->utf16 . oR530a) (sint-list->bytevector . oR5309) (native-endianness . oR5308) (bytevector? . oR5307) (bytevector=? . oR5306) (bytevector-uint-set! . oR5305) (bytevector-uint-ref . oR5304) (bytevector-u8-set! . oR5303) (bytevector-u8-ref . oR5302) (bytevector-u64-set! . oR5301) (bytevector-u64-ref . oR5300) (bytevector-u64-native-set! . oR52ff) (bytevector-u64-native-ref . oR52fe) (bytevector-u32-set! . oR52fd) (bytevector-u32-ref . oR52fc) (bytevector-u32-native-set! . oR52fb) (bytevector-u32-native-ref . oR52fa) (bytevector-u16-set! . oR52f9) (bytevector-u16-ref . oR52f8) (bytevector-u16-native-set! . oR52f7) (bytevector-u16-native-ref . oR52f6) (bytevector-sint-set! . oR52f5) (bytevector-sint-ref . oR52f4) (bytevector-s8-set! . oR52f3) (bytevector-s8-ref . oR52f2) (bytevector-s64-set! . oR52f1) (bytevector-s64-ref . oR52f0) (bytevector-s64-native-set! . oR52ef) (bytevector-s64-native-ref . oR52ee) (bytevector-s32-set! . oR52ed) (bytevector-s32-ref . oR52ec) (bytevector-s32-native-set! . oR52eb) (bytevector-s32-native-ref . oR52ea) (bytevector-s16-set! . oR52e9) (bytevector-s16-ref . oR52e8) (bytevector-s16-native-set! . oR52e7) (bytevector-s16-native-ref . oR52e6) (bytevector-length . oR52e5) (bytevector-ieee-single-ref . oR52e4) (bytevector-ieee-single-set! . oR52e3) (bytevector-ieee-single-native-set! . oR52e2) (bytevector-ieee-single-native-ref . oR52e1) (bytevector-ieee-double-set! . oR52e0) (bytevector-ieee-double-ref . oR52df) (bytevector-ieee-double-native-set! . oR52de) (bytevector-ieee-double-native-ref . oR52dd) (bytevector-fill! . oR52dc) (bytevector-copy! . oR52db) (bytevector-copy . oR52da) (bytevector->uint-list . oR52d9) (bytevector->u8-list . oR52d8) (bytevector->sint-list . oR52d7) (no-nans-violation? . oR4efc) (no-infinities-violation? . oR4ee7) (make-no-nans-violation . oR4efa) (make-no-infinities-violation . oR4ee5) (real->flonum . oR52d6) (flzero? . oR52d5) (fltruncate . oR52d4) (fltan . oR52d3) (flsqrt . oR52d2) (flsin . oR52d1) (flround . oR52d0) (flpositive? . oR52cf) (flonum? . oR52ce) (flodd? . oR52cd) (flnumerator . oR52cc) (flnegative? . oR52cb) (flnan? . oR52ca) (flmod0 . oR52c9) (flmod . oR52c8) (flmin . oR52c7) (flmax . oR52c6) (fllog . oR52c5) (flinteger? . oR52c4) (flinfinite? . oR52c3) (flfloor . oR52c2) (flfinite? . oR52c1) (flexpt . oR52c0) (flexp . oR52bf) (fleven? . oR52be) (fldiv0-and-mod0 . oR52bd) (fldiv0 . oR52bc) (fldiv-and-mod . oR52bb) (fldiv . oR52ba) (fldenominator . oR52b9) (flcos . oR52b8) (flceiling . oR52b7) (flatan . oR52b6) (flasin . oR52b5) (flacos . oR52b4) (flabs . oR52b3) (fl>? . oR52b2) (fl>=? . oR52b1) (fl=? . oR52b0) (fl<? . oR52af) (fl<=? . oR52ae) (fl/ . oR52ad) (fl- . oR52ac) (fl+ . oR52ab) (fl* . oR52aa) (fixnum->flonum . oR52a9) (fxzero? . oR52a8) (fxxor . oR52a7) (fxrotate-bit-field . oR52a6) (fxreverse-bit-field . oR52a5) (fxpositive? . oR52a4) (fxodd? . oR52a3) (fxnot . oR52a2) (fxnegative? . oR52a1) (fxmod0 . oR52a0) (fxmod . oR529f) (fxmin . oR529e) (fxmax . oR529d) (fxlength . oR529c) (fxior . oR529b) (fxif . oR529a) (fxfirst-bit-set . oR5299) (fxeven? . oR5298) (fxdiv0-and-mod0 . oR5297) (fxdiv0 . oR5296) (fxdiv-and-mod . oR5295) (fxdiv . oR5294) (fxcopy-bit-field . oR5293) (fxcopy-bit . oR5292) (fxbit-set? . oR5291) (fxbit-field . oR5290) (fxbit-count . oR528f) (fxarithmetic-shift-right . oR528e) (fxarithmetic-shift-left . oR528d) (fxarithmetic-shift . oR528c) (fxand . oR528b) (fx>? . oR528a) (fx>=? . oR5289) (fx=? . oR5288) (fx<? . oR5287) (fx<=? . oR5286) (fx-/carry . oR5285) (fx- . oR5284) (fx+/carry . oR5283) (fx+ . oR5282) (fx*/carry . oR5281) (fx* . oR5280) (greatest-fixnum . oR527f) (least-fixnum . oR527e) (fixnum-width . oR527d) (fixnum? . oR527c) (bitwise-rotate-bit-field . oR527b) (bitwise-reverse-bit-field . oR527a) (bitwise-length . oR5279) (bitwise-if . oR5278) (bitwise-first-bit-set . oR5277) (bitwise-copy-bit-field . oR5276) (bitwise-copy-bit . oR5275) (bitwise-bit-set? . oR5274) (bitwise-bit-field . oR5273) (bitwise-bit-count . oR5272) (bitwise-xor . oR5271) (bitwise-ior . oR5270) (bitwise-and . oR526f) (bitwise-not . oR526e) (bitwise-arithmetic-shift-right . oR526d) (bitwise-arithmetic-shift-left . oR526c) (bitwise-arithmetic-shift . oR526b) (zero? . oR526a) (vector? . oR5269) (vector-set! . oR5268) (vector-ref . oR5267) (vector-map . oR5266) (vector-length . oR5265) (vector-for-each . oR5264) (vector-fill! . oR5263) (vector->list . oR5262) (vector . oR5261) (values . oR5260) (truncate . oR525f) (tan . oR525e) (symbol? . oR525d) (symbol=? . oR525c) (symbol->string . oR525b) (substring . oR525a) (string? . oR5259) (string>? . oR5258) (string>=? . oR5257) (string=? . oR5256) (string<? . oR5255) (string<=? . oR5254) (string-ref . oR5253) (string-length . oR5252) (string-for-each . oR5251) (string-copy . oR5250) (string-append . oR524f) (string->symbol . oR524e) (string->number . oR524d) (string->list . oR524c) (string . oR524b) (sqrt . oR524a) (sin . oR5249) (round . oR5248) (reverse . oR5247) (real? . oR5246) (real-valued? . oR5245) (real-part . oR5244) (rationalize . oR5243) (rational? . oR5242) (rational-valued? . oR5241) (procedure? . oR5240) (positive? . oR523f) (pair? . oR523e) (odd? . oR523d) (numerator . oR523c) (number? . oR523b) (number->string . oR523a) (null? . oR5239) (not . oR5238) (negative? . oR5237) (nan? . oR5236) (min . oR5235) (max . oR5234) (map . oR5233) (make-vector . oR5232) (make-string . oR5231) (make-rectangular . oR5230) (make-polar . oR522f) (magnitude . oR522e) (log . oR522d) (list? . oR522c) (list-tail . oR522b) (list-ref . oR522a) (list->vector . oR5229) (list->string . oR5228) (list . oR5227) (length . oR5226) (lcm . oR5225) (integer? . oR5224) (integer-valued? . oR5223) (integer->char . oR5222) (infinite? . oR5221) (inexact? . oR5220) (inexact . oR521f) (imag-part . oR521e) (gcd . oR521d) (for-each . oR521c) (floor . oR521b) (finite? . oR521a) (expt . oR5219) (exp . oR5218) (exact? . oR5217) (exact-integer-sqrt . oR5216) (exact . oR5215) (even? . oR5214) (error . oR5213) (eqv? . oR5212) (equal? . oR5211) (eq? . oR5210) (dynamic-wind . oR520f) (div0-and-mod0 . oR520e) (mod0 . oR520d) (div0 . oR520c) (div-and-mod . oR520b) (mod . oR520a) (div . oR5209) (denominator . oR5208) (cos . oR5207) (cons . oR5206) (complex? . oR5205) (char? . oR5204) (char>? . oR5203) (char>=? . oR5202) (char=? . oR5201) (char<? . oR5200) (char<=? . oR51ff) (char->integer . oR51fe) (ceiling . oR51fd) (call-with-values . oR51fc) (call/cc . oR51fb) (call-with-current-continuation . oR51fa) (cddddr . oR51f9) (cdddar . oR51f8) (cddadr . oR51f7) (cddaar . oR51f6) (cdaddr . oR51f5) (cdadar . oR51f4) (cdaadr . oR51f3) (cdaaar . oR51f2) (cadddr . oR51f1) (caddar . oR51f0) (cadadr . oR51ef) (cadaar . oR51ee) (caaddr . oR51ed) (caadar . oR51ec) (caaadr . oR51eb) (caaaar . oR51ea) (cdddr . oR51e9) (cddar . oR51e8) (cdadr . oR51e7) (cdaar . oR51e6) (caddr . oR51e5) (cadar . oR51e4) (caadr . oR51e3) (caaar . oR51e2) (cddr . oR51e1) (cdar . oR51e0) (cadr . oR51df) (caar . oR51de) (cdr . oR51dd) (car . oR51dc) (boolean? . oR51db) (boolean=? . oR51da) (atan . oR51d9) (assertion-violation . oR51d8) (asin . oR51d7) (apply . oR51d6) (append . oR51d5) (angle . oR51d4) (acos . oR51d3) (abs . oR51d2) (/ . oR51d1) (* . oR51d0) (- . oR51cf) (+ . oR51ce) (>= . oR51cd) (> . oR51cc) (= . oR51cb) (<= . oR51ca) (< . oR51c9) (&no-nans . oR51c7) (&no-infinities . oR51c6) (&i/o-encoding . oR51c5) (&i/o-decoding . oR51c4) (&i/o-port . oR51c3) (&i/o-file-does-not-exist . oR51c2) (&i/o-file-already-exists . oR51c1) (&i/o-file-is-read-only . oR51c0) (&i/o-file-protection . oR51bf) (&i/o-filename . oR51be) (&i/o-invalid-position . oR51bd) (&i/o-write . oR51bc) (&i/o-read . oR51bb) (&i/o . oR51ba) (&undefined . oR51b9) (&syntax . oR51b8) (&lexical . oR51b7) (&implementation-restriction . oR51b6) (&non-continuable . oR51b5) (&who . oR51b4) (&irritants . oR51b3) (&assertion . oR51b2) (&violation . oR51b1) (&error . oR51b0) (&serious . oR51af) (&warning . oR51ae) (&message . oR51ad) (&condition . oR51ac) (define-condition-type . oR51ab) (define-enumeration . oR51aa) (define-record-type . oR51a9) (parent-rtd . oR51a8) (nongenerative . oR51a7) (opaque . oR51a6) (sealed . oR51a5) (protocol . oR51a4) (parent . oR51a3) (immutable . oR51a2) (mutable . oR51a1) (fields . oR51a0) (error-handling-mode . oR519f) (file-options . oR519e) (buffer-mode . oR519d) (eol-style . oR519c) (guard . oR519b) (unsyntax-splicing . oR5198) (unsyntax . oR5197) (unquote-splicing . oR5196) (unquote . oR5195) (_ . oR5194) (else . oR5193) (=> . oR5192) (... . oR5191) (assert . oR5190) (endianness . oR518f) (do . oR518c) (cond . oR518b) (let* . oR518a) (let*-values . oR5189) (let-values . oR5188) (identifier-syntax . oR5187) (with-syntax . oR5186) (quasisyntax . oR5185) (quasiquote . oR5184) (syntax-rules . oR5183) (record-constructor-descriptor . oR5180) (record-type-descriptor . oR517f) (case . oR517e) (unless . oR517c) (when . oR517b) (or . oR517a) (and . oR5179) (if . oR5178) (let . oR5177) (letrec* . oR5176) (letrec . oR5175) (case-lambda . oR5173) (lambda . oR5172) (syntax . oR5171) (syntax-case . oR5170) (quote . oR516f) (letrec-syntax . oR516d) (let-syntax . oR516c) (set! . oR516b) (begin . oR5169) (define-syntax . oR5167) (define . oR5166)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR549d '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . oR31ad) (quotient . oR534c) (null-environment . oR31ab) (remainder . oR534b) (modulo . oR534a) (inexact->exact . oR5349) (force . oR5348) (exact->inexact . oR5347) (make-promise . oR5346) (delay . oR518e)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR549e '(rnrs control) '(6) '() '() '() '((do . oR518c) (unless . oR517c) (when . oR517b) (case-lambda . oR5173)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR549f '(rnrs eval) '(6) '() '() '() '((eval . oR31b1) (environment . oR31a9)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a0 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . oR5342) (set-car! . oR5341)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a1 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . oR5344) (string-set! . oR5343)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a2 '(rnrs programs) '(6) '() '() '() '((exit . oR5345) (command-line . oR5009)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a3 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . oR2f1c) (identifier? . oR31d3) (generate-temporaries . oR31bf) (free-identifier=? . oR31c1) (syntax->datum . oR31d7) (datum->syntax . oR31d5) (bound-identifier=? . oR31c3) (syntax-violation . oR31d1) (unsyntax-splicing . oR5198) (unsyntax . oR5197) (_ . oR5194) (... . oR5191) (with-syntax . oR5186) (quasisyntax . oR5185) (syntax . oR5171) (syntax-case . oR5170)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a4 '(rnrs files) '(6) '() '() '() '((delete-file . oR53b5) (file-exists? . oR53b4) (make-i/o-write-error . oR4dfb) (make-i/o-read-error . oR4de6) (make-i/o-port-error . oR4e9c) (make-i/o-invalid-position-error . oR4e12) (make-i/o-filename-error . oR4e2d) (make-i/o-file-protection-error . oR4e46) (make-i/o-file-is-read-only-error . oR4e5b) (make-i/o-file-does-not-exist-error . oR4e85) (make-i/o-file-already-exists-error . oR4e70) (make-i/o-error . oR4dd1) (i/o-write-error? . oR4dfd) (i/o-read-error? . oR4de8) (i/o-port-error? . oR4ea0) (i/o-invalid-position-error? . oR4e16) (i/o-filename-error? . oR4e31) (i/o-file-protection-error? . oR4e48) (i/o-file-is-read-only-error? . oR4e5d) (i/o-file-does-not-exist-error? . oR4e87) (i/o-file-already-exists-error? . oR4e72) (i/o-error? . oR4dd3) (i/o-error-position . oR4e18) (i/o-error-port . oR4ea2) (i/o-error-filename . oR4e33) (&i/o-port . oR51c3) (&i/o-file-does-not-exist . oR51c2) (&i/o-file-already-exists . oR51c1) (&i/o-file-is-read-only . oR51c0) (&i/o-file-protection . oR51bf) (&i/o-filename . oR51be) (&i/o-invalid-position . oR51bd) (&i/o-write . oR51bc) (&i/o-read . oR51bb) (&i/o . oR51ba)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a5 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . oR53b3) (vector-sort . oR53b2) (list-sort . oR53b1)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a6 '(rnrs base) '(6) '() '() '() '((zero? . oR526a) (vector? . oR5269) (vector-set! . oR5268) (vector-ref . oR5267) (vector-map . oR5266) (vector-length . oR5265) (vector-for-each . oR5264) (vector-fill! . oR5263) (vector->list . oR5262) (vector . oR5261) (values . oR5260) (truncate . oR525f) (tan . oR525e) (symbol? . oR525d) (symbol=? . oR525c) (symbol->string . oR525b) (substring . oR525a) (string? . oR5259) (string>? . oR5258) (string>=? . oR5257) (string=? . oR5256) (string<? . oR5255) (string<=? . oR5254) (string-ref . oR5253) (string-length . oR5252) (string-for-each . oR5251) (string-copy . oR5250) (string-append . oR524f) (string->symbol . oR524e) (string->number . oR524d) (string->list . oR524c) (string . oR524b) (sqrt . oR524a) (sin . oR5249) (round . oR5248) (reverse . oR5247) (real? . oR5246) (real-valued? . oR5245) (real-part . oR5244) (rationalize . oR5243) (rational? . oR5242) (rational-valued? . oR5241) (procedure? . oR5240) (positive? . oR523f) (pair? . oR523e) (odd? . oR523d) (numerator . oR523c) (number? . oR523b) (number->string . oR523a) (null? . oR5239) (not . oR5238) (negative? . oR5237) (nan? . oR5236) (min . oR5235) (max . oR5234) (map . oR5233) (make-vector . oR5232) (make-string . oR5231) (make-rectangular . oR5230) (make-polar . oR522f) (magnitude . oR522e) (log . oR522d) (list? . oR522c) (list-tail . oR522b) (list-ref . oR522a) (list->vector . oR5229) (list->string . oR5228) (list . oR5227) (length . oR5226) (lcm . oR5225) (integer? . oR5224) (integer-valued? . oR5223) (integer->char . oR5222) (infinite? . oR5221) (inexact? . oR5220) (inexact . oR521f) (imag-part . oR521e) (gcd . oR521d) (for-each . oR521c) (floor . oR521b) (finite? . oR521a) (expt . oR5219) (exp . oR5218) (exact? . oR5217) (exact-integer-sqrt . oR5216) (exact . oR5215) (even? . oR5214) (error . oR5213) (eqv? . oR5212) (equal? . oR5211) (eq? . oR5210) (dynamic-wind . oR520f) (div0-and-mod0 . oR520e) (mod0 . oR520d) (div0 . oR520c) (div-and-mod . oR520b) (mod . oR520a) (div . oR5209) (denominator . oR5208) (cos . oR5207) (cons . oR5206) (complex? . oR5205) (char? . oR5204) (char>? . oR5203) (char>=? . oR5202) (char=? . oR5201) (char<? . oR5200) (char<=? . oR51ff) (char->integer . oR51fe) (ceiling . oR51fd) (call-with-values . oR51fc) (call/cc . oR51fb) (call-with-current-continuation . oR51fa) (cddddr . oR51f9) (cdddar . oR51f8) (cddadr . oR51f7) (cddaar . oR51f6) (cdaddr . oR51f5) (cdadar . oR51f4) (cdaadr . oR51f3) (cdaaar . oR51f2) (cadddr . oR51f1) (caddar . oR51f0) (cadadr . oR51ef) (cadaar . oR51ee) (caaddr . oR51ed) (caadar . oR51ec) (caaadr . oR51eb) (caaaar . oR51ea) (cdddr . oR51e9) (cddar . oR51e8) (cdadr . oR51e7) (cdaar . oR51e6) (caddr . oR51e5) (cadar . oR51e4) (caadr . oR51e3) (caaar . oR51e2) (cddr . oR51e1) (cdar . oR51e0) (cadr . oR51df) (caar . oR51de) (cdr . oR51dd) (car . oR51dc) (boolean? . oR51db) (boolean=? . oR51da) (atan . oR51d9) (assertion-violation . oR51d8) (asin . oR51d7) (apply . oR51d6) (append . oR51d5) (angle . oR51d4) (acos . oR51d3) (abs . oR51d2) (/ . oR51d1) (* . oR51d0) (- . oR51cf) (+ . oR51ce) (>= . oR51cd) (> . oR51cc) (= . oR51cb) (<= . oR51ca) (< . oR51c9) (unquote-splicing . oR5196) (unquote . oR5195) (_ . oR5194) (else . oR5193) (=> . oR5192) (... . oR5191) (assert . oR5190) (cond . oR518b) (let* . oR518a) (let*-values . oR5189) (let-values . oR5188) (identifier-syntax . oR5187) (quasiquote . oR5184) (syntax-rules . oR5183) (case . oR517e) (or . oR517a) (and . oR5179) (if . oR5178) (let . oR5177) (letrec* . oR5176) (letrec . oR5175) (lambda . oR5172) (quote . oR516f) (letrec-syntax . oR516d) (let-syntax . oR516c) (set! . oR516b) (begin . oR5169) (define-syntax . oR5167) (define . oR5166)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a7 '(rnrs lists) '(6) '() '() '() '((remove . oR5340) (remv . oR533f) (remp . oR533e) (remq . oR533d) (partition . oR533c) (memv . oR533b) (memq . oR533a) (memp . oR5339) (member . oR5338) (exists . oR5337) (for-all . oR5336) (fold-right . oR5335) (fold-left . oR5334) (find . oR5333) (filter . oR5332) (cons* . oR5331) (assv . oR5330) (assq . oR532f) (assp . oR532e) (assoc . oR532d)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a8 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . oR539b) (call-with-input-file . oR539a) (write-char . oR5399) (write . oR5398) (with-output-to-file . oR5397) (with-input-from-file . oR5396) (read-char . oR5395) (read . oR5394) (peek-char . oR5393) (open-output-file . oR5392) (open-input-file . oR5391) (newline . oR5390) (display . oR538f) (close-output-port . oR538e) (close-input-port . oR538d) (eof-object? . oR538c) (eof-object . oR538b) (current-error-port . oR538a) (current-output-port . oR5389) (current-input-port . oR5388) (output-port? . oR5387) (input-port? . oR5386) (make-i/o-write-error . oR4dfb) (make-i/o-read-error . oR4de6) (make-i/o-port-error . oR4e9c) (make-i/o-invalid-position-error . oR4e12) (make-i/o-filename-error . oR4e2d) (make-i/o-file-protection-error . oR4e46) (make-i/o-file-is-read-only-error . oR4e5b) (make-i/o-file-does-not-exist-error . oR4e85) (make-i/o-file-already-exists-error . oR4e70) (make-i/o-error . oR4dd1) (i/o-write-error? . oR4dfd) (i/o-read-error? . oR4de8) (i/o-port-error? . oR4ea0) (i/o-invalid-position-error? . oR4e16) (i/o-filename-error? . oR4e31) (i/o-file-protection-error? . oR4e48) (i/o-file-is-read-only-error? . oR4e5d) (i/o-file-does-not-exist-error? . oR4e87) (i/o-file-already-exists-error? . oR4e72) (i/o-error? . oR4dd3) (i/o-error-position . oR4e18) (i/o-error-port . oR4ea2) (i/o-error-filename . oR4e33) (&i/o-port . oR51c3) (&i/o-file-does-not-exist . oR51c2) (&i/o-file-already-exists . oR51c1) (&i/o-file-is-read-only . oR51c0) (&i/o-file-protection . oR51bf) (&i/o-filename . oR51be) (&i/o-invalid-position . oR51bd) (&i/o-write . oR51bc) (&i/o-read . oR51bb) (&i/o . oR51ba)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54a9 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . oR535c) (utf32->string . oR5311) (utf16->string . oR5310) (utf8->string . oR530f) (uint-list->bytevector . oR530e) (u8-list->bytevector . oR530d) (string->utf8 . oR530c) (string->utf32 . oR530b) (string->utf16 . oR530a) (sint-list->bytevector . oR5309) (native-endianness . oR5308) (bytevector? . oR5307) (bytevector=? . oR5306) (bytevector-uint-set! . oR5305) (bytevector-uint-ref . oR5304) (bytevector-u8-set! . oR5303) (bytevector-u8-ref . oR5302) (bytevector-u64-set! . oR5301) (bytevector-u64-ref . oR5300) (bytevector-u64-native-set! . oR52ff) (bytevector-u64-native-ref . oR52fe) (bytevector-u32-set! . oR52fd) (bytevector-u32-ref . oR52fc) (bytevector-u32-native-set! . oR52fb) (bytevector-u32-native-ref . oR52fa) (bytevector-u16-set! . oR52f9) (bytevector-u16-ref . oR52f8) (bytevector-u16-native-set! . oR52f7) (bytevector-u16-native-ref . oR52f6) (bytevector-sint-set! . oR52f5) (bytevector-sint-ref . oR52f4) (bytevector-s8-set! . oR52f3) (bytevector-s8-ref . oR52f2) (bytevector-s64-set! . oR52f1) (bytevector-s64-ref . oR52f0) (bytevector-s64-native-set! . oR52ef) (bytevector-s64-native-ref . oR52ee) (bytevector-s32-set! . oR52ed) (bytevector-s32-ref . oR52ec) (bytevector-s32-native-set! . oR52eb) (bytevector-s32-native-ref . oR52ea) (bytevector-s16-set! . oR52e9) (bytevector-s16-ref . oR52e8) (bytevector-s16-native-set! . oR52e7) (bytevector-s16-native-ref . oR52e6) (bytevector-length . oR52e5) (bytevector-ieee-single-ref . oR52e4) (bytevector-ieee-single-set! . oR52e3) (bytevector-ieee-single-native-set! . oR52e2) (bytevector-ieee-single-native-ref . oR52e1) (bytevector-ieee-double-set! . oR52e0) (bytevector-ieee-double-ref . oR52df) (bytevector-ieee-double-native-set! . oR52de) (bytevector-ieee-double-native-ref . oR52dd) (bytevector-fill! . oR52dc) (bytevector-copy! . oR52db) (bytevector-copy . oR52da) (bytevector->uint-list . oR52d9) (bytevector->u8-list . oR52d8) (bytevector->sint-list . oR52d7) (endianness . oR518f)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54aa '(rnrs unicode) '(6) '() '() '() '((string-upcase . oR53e3) (string-titlecase . oR53e2) (string-normalize-nfkd . oR53e1) (string-normalize-nfkc . oR53e0) (string-normalize-nfd . oR53df) (string-normalize-nfc . oR53de) (string-foldcase . oR53dd) (string-downcase . oR53dc) (string-ci>? . oR53db) (string-ci>=? . oR53da) (string-ci=? . oR53d9) (string-ci<? . oR53d8) (string-ci<=? . oR53d7) (char-whitespace? . oR53d6) (char-upper-case? . oR53d5) (char-title-case? . oR53d4) (char-numeric? . oR53d3) (char-lower-case? . oR53d2) (char-general-category . oR53d1) (char-upcase . oR53d0) (char-titlecase . oR53cf) (char-foldcase . oR53ce) (char-downcase . oR53cd) (char-ci>? . oR53cc) (char-ci>=? . oR53cb) (char-ci=? . oR53ca) (char-ci<? . oR53c9) (char-ci<=? . oR53c8) (char-alphabetic? . oR53c7)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54ab '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . oR5326) (raise-continuable . oR5325) (raise . oR5324) (guard . oR519b) (else . oR5193) (=> . oR5192)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54ac '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . oR527b) (bitwise-reverse-bit-field . oR527a) (bitwise-length . oR5279) (bitwise-if . oR5278) (bitwise-first-bit-set . oR5277) (bitwise-copy-bit-field . oR5276) (bitwise-copy-bit . oR5275) (bitwise-bit-set? . oR5274) (bitwise-bit-field . oR5273) (bitwise-bit-count . oR5272) (bitwise-xor . oR5271) (bitwise-ior . oR5270) (bitwise-and . oR526f) (bitwise-not . oR526e) (bitwise-arithmetic-shift-right . oR526d) (bitwise-arithmetic-shift-left . oR526c) (bitwise-arithmetic-shift . oR526b)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54ad '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . oR52a8) (fxxor . oR52a7) (fxrotate-bit-field . oR52a6) (fxreverse-bit-field . oR52a5) (fxpositive? . oR52a4) (fxodd? . oR52a3) (fxnot . oR52a2) (fxnegative? . oR52a1) (fxmod0 . oR52a0) (fxmod . oR529f) (fxmin . oR529e) (fxmax . oR529d) (fxlength . oR529c) (fxior . oR529b) (fxif . oR529a) (fxfirst-bit-set . oR5299) (fxeven? . oR5298) (fxdiv0-and-mod0 . oR5297) (fxdiv0 . oR5296) (fxdiv-and-mod . oR5295) (fxdiv . oR5294) (fxcopy-bit-field . oR5293) (fxcopy-bit . oR5292) (fxbit-set? . oR5291) (fxbit-field . oR5290) (fxbit-count . oR528f) (fxarithmetic-shift-right . oR528e) (fxarithmetic-shift-left . oR528d) (fxarithmetic-shift . oR528c) (fxand . oR528b) (fx>? . oR528a) (fx>=? . oR5289) (fx=? . oR5288) (fx<? . oR5287) (fx<=? . oR5286) (fx-/carry . oR5285) (fx- . oR5284) (fx+/carry . oR5283) (fx+ . oR5282) (fx*/carry . oR5281) (fx* . oR5280) (greatest-fixnum . oR527f) (least-fixnum . oR527e) (fixnum-width . oR527d) (fixnum? . oR527c)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54ae '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . oR4efc) (no-infinities-violation? . oR4ee7) (make-no-nans-violation . oR4efa) (make-no-infinities-violation . oR4ee5) (real->flonum . oR52d6) (flzero? . oR52d5) (fltruncate . oR52d4) (fltan . oR52d3) (flsqrt . oR52d2) (flsin . oR52d1) (flround . oR52d0) (flpositive? . oR52cf) (flonum? . oR52ce) (flodd? . oR52cd) (flnumerator . oR52cc) (flnegative? . oR52cb) (flnan? . oR52ca) (flmod0 . oR52c9) (flmod . oR52c8) (flmin . oR52c7) (flmax . oR52c6) (fllog . oR52c5) (flinteger? . oR52c4) (flinfinite? . oR52c3) (flfloor . oR52c2) (flfinite? . oR52c1) (flexpt . oR52c0) (flexp . oR52bf) (fleven? . oR52be) (fldiv0-and-mod0 . oR52bd) (fldiv0 . oR52bc) (fldiv-and-mod . oR52bb) (fldiv . oR52ba) (fldenominator . oR52b9) (flcos . oR52b8) (flceiling . oR52b7) (flatan . oR52b6) (flasin . oR52b5) (flacos . oR52b4) (flabs . oR52b3) (fl>? . oR52b2) (fl>=? . oR52b1) (fl=? . oR52b0) (fl<? . oR52af) (fl<=? . oR52ae) (fl/ . oR52ad) (fl- . oR52ac) (fl+ . oR52ab) (fl* . oR52aa) (fixnum->flonum . oR52a9) (&no-nans . oR51c7) (&no-infinities . oR51c6)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54af '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . oR53b0) (string-ci-hash . oR53af) (string-hash . oR53ae) (equal-hash . oR53ad) (hashtable-equivalence-function . oR53ac) (make-hashtable . oR53ab) (hashtable-hash-function . oR53aa) (make-eqv-hashtable . oR53a9) (make-eq-hashtable . oR53a8) (hashtable? . oR53a7) (hashtable-update! . oR53a6) (hashtable-size . oR53a5) (hashtable-set! . oR53a4) (hashtable-ref . oR53a3) (hashtable-mutable? . oR53a2) (hashtable-keys . oR53a1) (hashtable-entries . oR53a0) (hashtable-delete! . oR539f) (hashtable-copy . oR539e) (hashtable-contains? . oR539d) (hashtable-clear! . oR539c)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54b0 '(rnrs io ports) '(6) '() '() '() '((eof-object? . oR538c) (eof-object . oR538b) (current-error-port . oR538a) (current-output-port . oR5389) (current-input-port . oR5388) (output-port? . oR5387) (input-port? . oR5386) (utf-8-codec . oR5385) (utf-16-codec . oR5384) (transcoder-error-handling-mode . oR5383) (transcoder-eol-style . oR5382) (transcoder-codec . oR5381) (transcoded-port . oR5380) (textual-port? . oR537f) (string->bytevector . oR537e) (standard-output-port . oR537d) (standard-input-port . oR537c) (standard-error-port . oR537b) (set-port-position! . oR537a) (put-u8 . oR5379) (put-string . oR5378) (put-datum . oR5377) (put-char . oR5376) (put-bytevector . oR5375) (port? . oR5374) (port-transcoder . oR5373) (port-position . oR5372) (port-has-set-port-position!? . oR5371) (port-has-port-position? . oR5370) (port-eof? . oR536f) (output-port-buffer-mode . oR536e) (open-string-output-port . oR536d) (open-string-input-port . oR536c) (open-file-output-port . oR536b) (open-file-input/output-port . oR536a) (open-file-input-port . oR5369) (open-bytevector-output-port . oR5368) (open-bytevector-input-port . oR5367) (native-transcoder . oR5366) (native-eol-style . oR5365) (make-transcoder . oR5364) (latin-1-codec . oR5363) (make-i/o-write-error . oR4dfb) (make-i/o-read-error . oR4de6) (make-i/o-port-error . oR4e9c) (make-i/o-invalid-position-error . oR4e12) (make-i/o-filename-error . oR4e2d) (make-i/o-file-protection-error . oR4e46) (make-i/o-file-is-read-only-error . oR4e5b) (make-i/o-file-does-not-exist-error . oR4e85) (make-i/o-file-already-exists-error . oR4e70) (make-i/o-error . oR4dd1) (make-i/o-encoding-error . oR4ecc) (make-i/o-decoding-error . oR4eb5) (make-custom-textual-output-port . oR5362) (make-custom-textual-input/output-port . oR5361) (make-custom-textual-input-port . oR5360) (make-custom-binary-output-port . oR535f) (make-custom-binary-input/output-port . oR535e) (make-custom-binary-input-port . oR535d) (lookahead-u8 . oR535b) (lookahead-char . oR535a) (i/o-write-error? . oR4dfd) (i/o-read-error? . oR4de8) (i/o-port-error? . oR4ea0) (i/o-invalid-position-error? . oR4e16) (i/o-filename-error? . oR4e31) (i/o-file-protection-error? . oR4e48) (i/o-file-is-read-only-error? . oR4e5d) (i/o-file-does-not-exist-error? . oR4e87) (i/o-file-already-exists-error? . oR4e72) (i/o-error? . oR4dd3) (i/o-error-position . oR4e18) (i/o-error-port . oR4ea2) (i/o-error-filename . oR4e33) (i/o-encoding-error? . oR4ed0) (i/o-encoding-error-char . oR4ed2) (i/o-decoding-error? . oR4eb7) (get-u8 . oR5359) (get-string-n! . oR5358) (get-string-n . oR5357) (get-string-all . oR5356) (get-line . oR5355) (get-datum . oR5354) (get-char . oR5353) (get-bytevector-some . oR5352) (get-bytevector-n! . oR5351) (get-bytevector-n . oR5350) (get-bytevector-all . oR534f) (flush-output-port . oR534e) (close-port . oR534d) (call-with-string-output-port . oR532c) (call-with-port . oR532b) (call-with-bytevector-output-port . oR532a) (bytevector->string . oR5329) (buffer-mode? . oR5328) (binary-port? . oR5327) (&i/o-encoding . oR51c5) (&i/o-decoding . oR51c4) (&i/o-port . oR51c3) (&i/o-file-does-not-exist . oR51c2) (&i/o-file-already-exists . oR51c1) (&i/o-file-is-read-only . oR51c0) (&i/o-file-protection . oR51bf) (&i/o-filename . oR51be) (&i/o-invalid-position . oR51bd) (&i/o-write . oR51bc) (&i/o-read . oR51bb) (&i/o . oR51ba) (error-handling-mode . oR519f) (file-options . oR519e) (buffer-mode . oR519d) (eol-style . oR519c)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54b1 '(rnrs enums) '(6) '() '() '() '((make-enumeration . oR5323) (enum-set=? . oR5322) (enum-set-universe . oR5321) (enum-set-union . oR5320) (enum-set-subset? . oR531f) (enum-set-projection . oR531e) (enum-set-member? . oR531d) (enum-set-intersection . oR531c) (enum-set-indexer . oR531b) (enum-set-difference . oR531a) (enum-set-constructor . oR5319) (enum-set-complement . oR5318) (enum-set->list . oR5317) (define-enumeration . oR51aa)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54b2 '(rnrs conditions) '(6) '() '() '() '((who-condition? . oR4d47) (warning? . oR4cbf) (violation? . oR4cfe) (undefined-violation? . oR4dbe) (syntax-violation? . oR4da5) (syntax-violation-subform . oR4da9) (syntax-violation-form . oR4da7) (syntax-violation . oR31d1) (simple-conditions . oR5316) (serious-condition? . oR4cd4) (non-continuable-violation? . oR4d5e) (message-condition? . oR4ca8) (make-who-condition . oR4d43) (make-warning . oR4cbd) (make-violation . oR4cfc) (make-undefined-violation . oR4dbc) (make-syntax-violation . oR4d9f) (make-serious-condition . oR4cd2) (make-non-continuable-violation . oR4d5c) (make-message-condition . oR4ca4) (make-lexical-violation . oR4d86) (make-irritants-condition . oR4d28) (make-implementation-restriction-violation . oR4d71) (make-error . oR4ce7) (make-assertion-violation . oR4d11) (lexical-violation? . oR4d88) (irritants-condition? . oR4d2c) (implementation-restriction-violation? . oR4d73) (error? . oR4ce9) (condition-who . oR4d49) (condition-predicate . oR5315) (condition-message . oR4caa) (condition-irritants . oR4d2e) (condition-accessor . oR5314) (condition . oR5313) (assertion-violation? . oR4d13) (condition? . oR5312) (&undefined . oR51b9) (&syntax . oR51b8) (&lexical . oR51b7) (&implementation-restriction . oR51b6) (&non-continuable . oR51b5) (&who . oR51b4) (&irritants . oR51b3) (&assertion . oR51b2) (&violation . oR51b1) (&error . oR51b0) (&serious . oR51af) (&warning . oR51ae) (&message . oR51ad) (&condition . oR51ac) (define-condition-type . oR51ab)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54b3 '(rnrs records inspection) '(6) '() '() '() '((record? . oR53bf) (record-type-uid . oR53be) (record-type-sealed? . oR53bd) (record-type-parent . oR53bc) (record-type-opaque? . oR53bb) (record-type-name . oR53ba) (record-type-generative? . oR53b9) (record-type-field-names . oR53b8) (record-rtd . oR53b7) (record-field-mutable? . oR53b6)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54b4 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . oR53c6) (record-predicate . oR53c5) (record-mutator . oR53c4) (record-constructor . oR53c3) (record-accessor . oR53c2) (make-record-type-descriptor . oR53c1) (make-record-constructor-descriptor . oR53c0)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54b5 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . oR51a9) (parent-rtd . oR51a8) (nongenerative . oR51a7) (opaque . oR51a6) (sealed . oR51a5) (protocol . oR51a4) (parent . oR51a3) (immutable . oR51a2) (mutable . oR51a1) (fields . oR51a0) (record-constructor-descriptor . oR5180) (record-type-descriptor . oR517f)) '() values values '#f '#f '#t '#f) (oR2cfe@oR2b3a@install-library 'oR54b6 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . oR4f00) (&no-nans-rtd . oR4efe) (&no-infinities-rcd . oR4eeb) (&no-infinities-rtd . oR4ee9) (&i/o-encoding-rcd . oR4ed6) (&i/o-encoding-rtd . oR4ed4) (&i/o-decoding-rcd . oR4ebb) (&i/o-decoding-rtd . oR4eb9) (&i/o-port-rcd . oR4ea6) (&i/o-port-rtd . oR4ea4) (&i/o-file-does-not-exist-rcd . oR4e8b) (&i/o-file-does-not-exist-rtd . oR4e89) (&i/o-file-already-exists-rcd . oR4e76) (&i/o-file-already-exists-rtd . oR4e74) (&i/o-file-is-read-only-rcd . oR4e61) (&i/o-file-is-read-only-rtd . oR4e5f) (&i/o-file-protection-rcd . oR4e4c) (&i/o-file-protection-rtd . oR4e4a) (&i/o-filename-rcd . oR4e37) (&i/o-filename-rtd . oR4e35) (&i/o-invalid-position-rcd . oR4e1c) (&i/o-invalid-position-rtd . oR4e1a) (&i/o-write-rcd . oR4e01) (&i/o-write-rtd . oR4dff) (&i/o-read-rcd . oR4dec) (&i/o-read-rtd . oR4dea) (&i/o-rcd . oR4dd7) (&i/o-rtd . oR4dd5) (&undefined-rcd . oR4dc2) (&undefined-rtd . oR4dc0) (&syntax-rcd . oR4dad) (&syntax-rtd . oR4dab) (&lexical-rcd . oR4d8c) (&lexical-rtd . oR4d8a) (&implementation-restriction-rcd . oR4d77) (&implementation-restriction-rtd . oR4d75) (&non-continuable-rcd . oR4d62) (&non-continuable-rtd . oR4d60) (&who-rcd . oR4d4d) (&who-rtd . oR4d4b) (&irritants-rcd . oR4d32) (&irritants-rtd . oR4d30) (&assertion-rcd . oR4d17) (&assertion-rtd . oR4d15) (&violation-rcd . oR4d02) (&violation-rtd . oR4d00) (&error-rcd . oR4ced) (&error-rtd . oR4ceb) (&serious-rcd . oR4cd8) (&serious-rtd . oR4cd6) (&warning-rcd . oR4cc3) (&warning-rtd . oR4cc1) (&message-rcd . oR4cae) (&message-rtd . oR4cac) (&condition-rcd . oR4c4f) (&condition-rtd . oR4c4d) (syntax-error . oR31cd) (syntax-dispatch . oR30f1) (pretty-print . oR5496) (eval-core . oR5495) (set-symbol-value! . oR5494) (symbol-value . oR5493) (gensym . oR5492) (void . oR5491) (load . oR500f) (interaction-environment . oR31df) (char-ready? . oR5490) (regexp? . oR548f) (read-line . oR548e) (gensym-prefix-set! . oR548d) (ungensym . oR548c) (alist->eq-hash-table . oR548b) (assoc-ref . oR548a) (print . oR5489) (format . oR5488) (host-os . oR5487) (library-path . oR2b19) (standard-library-path . oR5486) (file-newer? . oR5485) (stat-mtime . oR5484) (write-to-file . oR5483) (file->sexp-list . oR5482) (file->list . oR5481) (file->string . oR5480) (digit->integer . oR547f) (call-with-string-input-port . oR547e) (call-with-string-io . oR547d) (string-split . oR547c) (bytevector-for-each . oR547b) (string->regexp . oR547a) (rxmatch . oR5479) (regexp-replace-all . oR5478) (hashtable-for-each . oR5477) (mosh-cache-dir . oR2903) (call-process . oR5476) (local-tz-offset . oR5475) (microseconds . oR5474) (directory-list . oR5473) (set-current-directory! . oR5472) (expand-path . oR5471) (current-directory . oR5470) (%spawn . oR546f) (%waitpid . oR546e) (simple-struct-name . oR546d) (simple-struct-set! . oR546c) (simple-struct-ref . oR546b) (make-simple-struct . oR546a) (simple-struct? . oR5469) (pointer-ref-c-int64 . oR5468) (pointer-ref-c-int32 . oR5467) (pointer-ref-c-int16 . oR5466) (pointer-ref-c-int8 . oR5465) (pointer-ref-c-uint64 . oR5464) (pointer-ref-c-uint32 . oR5463) (pointer-ref-c-uint16 . oR5462) (pointer-ref-c-uint8 . oR5461) (pointer-set-c-uint64! . oR5460) (pointer-set-c-uint32! . oR545f) (pointer-set-c-uint16! . oR545e) (pointer-set-c-uint8! . oR545d) (pointer-set-c-int64! . oR545c) (pointer-set-c-int32! . oR545b) (pointer-set-c-int16! . oR545a) (pointer-set-c-int8! . oR5459) (pointer-set-c-pointer! . oR5458) (pointer-set-c-double! . oR5457) (pointer-set-c-float! . oR5456) (pointer-set-c-long-long! . oR5455) (pointer-set-c-long! . oR5454) (pointer-set-c-int! . oR5453) (pointer-set-c-short! . oR5452) (pointer-set-c-char! . oR5451) (pointer-ref-c-pointer . oR5450) (pointer-ref-c-double . oR544f) (pointer-ref-c-float . oR544e) (pointer-ref-c-unsigned-long-long . oR544d) (pointer-ref-c-signed-long-long . oR544c) (pointer-ref-c-unsigned-long . oR544b) (pointer-ref-c-signed-long . oR544a) (pointer-ref-c-unsigned-int . oR5449) (pointer-ref-c-signed-int . oR5448) (pointer-ref-c-unsigned-short . oR5447) (pointer-ref-c-signed-short . oR5446) (pointer-ref-c-unsigned-char . oR5445) (pointer-ref-c-signed-char . oR5444) (pointer->integer . oR5443) (integer->pointer . oR5442) (pointer? . oR5441) (shared-errno . oR5440) (get-c-address . oR543f) (jit-compiled? . oR543e) (obj->integer . oR543d) (u8-list->c-procedure . oR543c) (%ffi-free-c-callback-trampoline . oR543b) (%ffi-make-c-callback-trampoline . oR543a) (%ffi-free . oR5439) (%ffi-malloc . oR5438) (%ffi-supported? . oR5437) (%ffi-pointer->string . oR5436) (%ffi-call . oR5435) (%ffi-lookup . oR5434) (%ffi-open . oR5433) (null-terminated-utf8->string . oR5432) (null-terminated-bytevector->string . oR5431) (%fork . oR5430) (%pipe . oR542f) (p . oR542e) (open-output-string . oR542d) (get-output-string . oR542c) (file-stat-ctime . oR542b) (file-stat-atime . oR542a) (file-stat-mtime . oR5429) (file-size-in-bytes . oR5428) (file-writable? . oR5427) (file-executable? . oR5426) (file-readable? . oR5425) (file-regular? . oR5424) (file-symbolic-link? . oR5423) (file-directory? . oR5422) (create-symbolic-link . oR5421) (rename-file . oR5420) (delete-directory . oR541f) (create-directory . oR541e) (create-mosh-cache-dir . oR541d) (get-environment-variables . oR541c) (current-exception-handler . oR541b) (get-environment-variable . oR541a) (join-wraps . oR5419) (id->real-label . oR5418) (same-marks? . oR5417) (same-marks*? . oR5416) (get-timeofday . oR5415) (get-command-line . oR5414) (sys-display . oR5413) (whereis . oR5412) (register . oR5411) (vm-join! . oR5410) (vm-set-value! . oR540f) (vm? . oR540e) (main-vm? . oR540d) (vm-eval . oR540c) (vm-self . oR540b) (vm-start! . oR540a) (make-vm . oR5409) (mutex-try-lock! . oR5408) (mutex-unlock! . oR5407) (mutex-lock! . oR5406) (mutex? . oR5405) (make-mutex . oR5404) (condition-variable-notify-all! . oR5403) (condition-variable-notify! . oR5402) (condition-variable-wait! . oR5401) (make-condition-variable . oR5400) (mosh-executable-path . oR53ff) (make-file-options . oR53fe) (for-each-with-index . oR53fd) (source-info . oR53fc) (instruction? . oR53fb) (instruction->integer . oR53fa) (instruction->symbol . oR53f9) (closure->list . oR53f8) (make-compiler-instruction . oR53f7) (make-instruction . oR53f6) (set-source-info! . oR53f5) (bignum? . oR53f4) (fast-equal? . oR53f3) (fasl-read . oR53f2) (fasl-write . oR53f1) (time-usage . oR53f0) (os-constant . oR53ef) (disasm . oR53ee) (make-parameter . oR2901) (socket-port . oR53ed) (socket-shutdown . oR53ec) (socket-close . oR53eb) (socket-send . oR53ea) (socket-recv! . oR53e9) (socket-recv . oR53e8) (make-server-socket . oR53e7) (make-client-socket . oR53e6) (socket-accept . oR53e5) (socket? . oR53e4) (string-upcase . oR53e3) (string-titlecase . oR53e2) (string-normalize-nfkd . oR53e1) (string-normalize-nfkc . oR53e0) (string-normalize-nfd . oR53df) (string-normalize-nfc . oR53de) (string-foldcase . oR53dd) (string-downcase . oR53dc) (string-ci>? . oR53db) (string-ci>=? . oR53da) (string-ci=? . oR53d9) (string-ci<? . oR53d8) (string-ci<=? . oR53d7) (char-whitespace? . oR53d6) (char-upper-case? . oR53d5) (char-title-case? . oR53d4) (char-numeric? . oR53d3) (char-lower-case? . oR53d2) (char-general-category . oR53d1) (char-upcase . oR53d0) (char-titlecase . oR53cf) (char-foldcase . oR53ce) (char-downcase . oR53cd) (char-ci>? . oR53cc) (char-ci>=? . oR53cb) (char-ci=? . oR53ca) (char-ci<? . oR53c9) (char-ci<=? . oR53c8) (char-alphabetic? . oR53c7) (make-variable-transformer . oR2f1c) (identifier? . oR31d3) (generate-temporaries . oR31bf) (free-identifier=? . oR31c1) (syntax->datum . oR31d7) (datum->syntax . oR31d5) (bound-identifier=? . oR31c3) (record-type-descriptor? . oR53c6) (record-predicate . oR53c5) (record-mutator . oR53c4) (record-constructor . oR53c3) (record-accessor . oR53c2) (make-record-type-descriptor . oR53c1) (make-record-constructor-descriptor . oR53c0) (record? . oR53bf) (record-type-uid . oR53be) (record-type-sealed? . oR53bd) (record-type-parent . oR53bc) (record-type-opaque? . oR53bb) (record-type-name . oR53ba) (record-type-generative? . oR53b9) (record-type-field-names . oR53b8) (record-rtd . oR53b7) (record-field-mutable? . oR53b6) (delete-file . oR53b5) (file-exists? . oR53b4) (vector-sort! . oR53b3) (vector-sort . oR53b2) (list-sort . oR53b1) (symbol-hash . oR53b0) (string-ci-hash . oR53af) (string-hash . oR53ae) (equal-hash . oR53ad) (hashtable-equivalence-function . oR53ac) (make-hashtable . oR53ab) (hashtable-hash-function . oR53aa) (make-eqv-hashtable . oR53a9) (make-eq-hashtable . oR53a8) (hashtable? . oR53a7) (hashtable-update! . oR53a6) (hashtable-size . oR53a5) (hashtable-set! . oR53a4) (hashtable-ref . oR53a3) (hashtable-mutable? . oR53a2) (hashtable-keys . oR53a1) (hashtable-entries . oR53a0) (hashtable-delete! . oR539f) (hashtable-copy . oR539e) (hashtable-contains? . oR539d) (hashtable-clear! . oR539c) (call-with-output-file . oR539b) (call-with-input-file . oR539a) (write-char . oR5399) (write . oR5398) (with-output-to-file . oR5397) (with-input-from-file . oR5396) (read-char . oR5395) (read . oR5394) (peek-char . oR5393) (open-output-file . oR5392) (open-input-file . oR5391) (newline . oR5390) (display . oR538f) (close-output-port . oR538e) (close-input-port . oR538d) (eof-object? . oR538c) (eof-object . oR538b) (current-error-port . oR538a) (current-output-port . oR5389) (current-input-port . oR5388) (output-port? . oR5387) (input-port? . oR5386) (utf-8-codec . oR5385) (utf-16-codec . oR5384) (transcoder-error-handling-mode . oR5383) (transcoder-eol-style . oR5382) (transcoder-codec . oR5381) (transcoded-port . oR5380) (textual-port? . oR537f) (string->bytevector . oR537e) (standard-output-port . oR537d) (standard-input-port . oR537c) (standard-error-port . oR537b) (set-port-position! . oR537a) (put-u8 . oR5379) (put-string . oR5378) (put-datum . oR5377) (put-char . oR5376) (put-bytevector . oR5375) (port? . oR5374) (port-transcoder . oR5373) (port-position . oR5372) (port-has-set-port-position!? . oR5371) (port-has-port-position? . oR5370) (port-eof? . oR536f) (output-port-buffer-mode . oR536e) (open-string-output-port . oR536d) (open-string-input-port . oR536c) (open-file-output-port . oR536b) (open-file-input/output-port . oR536a) (open-file-input-port . oR5369) (open-bytevector-output-port . oR5368) (open-bytevector-input-port . oR5367) (native-transcoder . oR5366) (native-eol-style . oR5365) (make-transcoder . oR5364) (latin-1-codec . oR5363) (make-i/o-write-error . oR4dfb) (make-i/o-read-error . oR4de6) (make-i/o-port-error . oR4e9c) (make-i/o-invalid-position-error . oR4e12) (make-i/o-filename-error . oR4e2d) (make-i/o-file-protection-error . oR4e46) (make-i/o-file-is-read-only-error . oR4e5b) (make-i/o-file-does-not-exist-error . oR4e85) (make-i/o-file-already-exists-error . oR4e70) (make-i/o-error . oR4dd1) (make-i/o-encoding-error . oR4ecc) (make-i/o-decoding-error . oR4eb5) (make-custom-textual-output-port . oR5362) (make-custom-textual-input/output-port . oR5361) (make-custom-textual-input-port . oR5360) (make-custom-binary-output-port . oR535f) (make-custom-binary-input/output-port . oR535e) (make-custom-binary-input-port . oR535d) (make-bytevector . oR535c) (lookahead-u8 . oR535b) (lookahead-char . oR535a) (i/o-write-error? . oR4dfd) (i/o-read-error? . oR4de8) (i/o-port-error? . oR4ea0) (i/o-invalid-position-error? . oR4e16) (i/o-filename-error? . oR4e31) (i/o-file-protection-error? . oR4e48) (i/o-file-is-read-only-error? . oR4e5d) (i/o-file-does-not-exist-error? . oR4e87) (i/o-file-already-exists-error? . oR4e72) (i/o-error? . oR4dd3) (i/o-error-position . oR4e18) (i/o-error-port . oR4ea2) (i/o-error-filename . oR4e33) (i/o-encoding-error? . oR4ed0) (i/o-encoding-error-char . oR4ed2) (i/o-decoding-error? . oR4eb7) (get-u8 . oR5359) (get-string-n! . oR5358) (get-string-n . oR5357) (get-string-all . oR5356) (get-line . oR5355) (get-datum . oR5354) (get-char . oR5353) (get-bytevector-some . oR5352) (get-bytevector-n! . oR5351) (get-bytevector-n . oR5350) (get-bytevector-all . oR534f) (flush-output-port . oR534e) (close-port . oR534d) (scheme-report-environment . oR31ad) (quotient . oR534c) (null-environment . oR31ab) (remainder . oR534b) (modulo . oR534a) (inexact->exact . oR5349) (force . oR5348) (exact->inexact . oR5347) (make-promise . oR5346) (exit . oR5345) (command-line . oR5009) (string-fill! . oR5344) (string-set! . oR5343) (set-cdr! . oR5342) (set-car! . oR5341) (remove . oR5340) (remv . oR533f) (remp . oR533e) (remq . oR533d) (partition . oR533c) (memv . oR533b) (memq . oR533a) (memp . oR5339) (member . oR5338) (exists . oR5337) (for-all . oR5336) (fold-right . oR5335) (fold-left . oR5334) (find . oR5333) (filter . oR5332) (cons* . oR5331) (assv . oR5330) (assq . oR532f) (assp . oR532e) (assoc . oR532d) (call-with-string-output-port . oR532c) (call-with-port . oR532b) (call-with-bytevector-output-port . oR532a) (bytevector->string . oR5329) (buffer-mode? . oR5328) (binary-port? . oR5327) (with-exception-handler . oR5326) (raise-continuable . oR5325) (raise . oR5324) (eval . oR31b1) (environment . oR31a9) (make-enumeration . oR5323) (enum-set=? . oR5322) (enum-set-universe . oR5321) (enum-set-union . oR5320) (enum-set-subset? . oR531f) (enum-set-projection . oR531e) (enum-set-member? . oR531d) (enum-set-intersection . oR531c) (enum-set-indexer . oR531b) (enum-set-difference . oR531a) (enum-set-constructor . oR5319) (enum-set-complement . oR5318) (enum-set->list . oR5317) (who-condition? . oR4d47) (warning? . oR4cbf) (violation? . oR4cfe) (undefined-violation? . oR4dbe) (syntax-violation? . oR4da5) (syntax-violation-subform . oR4da9) (syntax-violation-form . oR4da7) (syntax-violation . oR31d1) (simple-conditions . oR5316) (serious-condition? . oR4cd4) (non-continuable-violation? . oR4d5e) (message-condition? . oR4ca8) (make-who-condition . oR4d43) (make-warning . oR4cbd) (make-violation . oR4cfc) (make-undefined-violation . oR4dbc) (make-syntax-violation . oR4d9f) (make-serious-condition . oR4cd2) (make-non-continuable-violation . oR4d5c) (make-message-condition . oR4ca4) (make-lexical-violation . oR4d86) (make-irritants-condition . oR4d28) (make-implementation-restriction-violation . oR4d71) (make-error . oR4ce7) (make-assertion-violation . oR4d11) (lexical-violation? . oR4d88) (irritants-condition? . oR4d2c) (implementation-restriction-violation? . oR4d73) (error? . oR4ce9) (condition-who . oR4d49) (condition-predicate . oR5315) (condition-message . oR4caa) (condition-irritants . oR4d2e) (condition-accessor . oR5314) (condition . oR5313) (assertion-violation? . oR4d13) (condition? . oR5312) (utf32->string . oR5311) (utf16->string . oR5310) (utf8->string . oR530f) (uint-list->bytevector . oR530e) (u8-list->bytevector . oR530d) (string->utf8 . oR530c) (string->utf32 . oR530b) (string->utf16 . oR530a) (sint-list->bytevector . oR5309) (native-endianness . oR5308) (bytevector? . oR5307) (bytevector=? . oR5306) (bytevector-uint-set! . oR5305) (bytevector-uint-ref . oR5304) (bytevector-u8-set! . oR5303) (bytevector-u8-ref . oR5302) (bytevector-u64-set! . oR5301) (bytevector-u64-ref . oR5300) (bytevector-u64-native-set! . oR52ff) (bytevector-u64-native-ref . oR52fe) (bytevector-u32-set! . oR52fd) (bytevector-u32-ref . oR52fc) (bytevector-u32-native-set! . oR52fb) (bytevector-u32-native-ref . oR52fa) (bytevector-u16-set! . oR52f9) (bytevector-u16-ref . oR52f8) (bytevector-u16-native-set! . oR52f7) (bytevector-u16-native-ref . oR52f6) (bytevector-sint-set! . oR52f5) (bytevector-sint-ref . oR52f4) (bytevector-s8-set! . oR52f3) (bytevector-s8-ref . oR52f2) (bytevector-s64-set! . oR52f1) (bytevector-s64-ref . oR52f0) (bytevector-s64-native-set! . oR52ef) (bytevector-s64-native-ref . oR52ee) (bytevector-s32-set! . oR52ed) (bytevector-s32-ref . oR52ec) (bytevector-s32-native-set! . oR52eb) (bytevector-s32-native-ref . oR52ea) (bytevector-s16-set! . oR52e9) (bytevector-s16-ref . oR52e8) (bytevector-s16-native-set! . oR52e7) (bytevector-s16-native-ref . oR52e6) (bytevector-length . oR52e5) (bytevector-ieee-single-ref . oR52e4) (bytevector-ieee-single-set! . oR52e3) (bytevector-ieee-single-native-set! . oR52e2) (bytevector-ieee-single-native-ref . oR52e1) (bytevector-ieee-double-set! . oR52e0) (bytevector-ieee-double-ref . oR52df) (bytevector-ieee-double-native-set! . oR52de) (bytevector-ieee-double-native-ref . oR52dd) (bytevector-fill! . oR52dc) (bytevector-copy! . oR52db) (bytevector-copy . oR52da) (bytevector->uint-list . oR52d9) (bytevector->u8-list . oR52d8) (bytevector->sint-list . oR52d7) (no-nans-violation? . oR4efc) (no-infinities-violation? . oR4ee7) (make-no-nans-violation . oR4efa) (make-no-infinities-violation . oR4ee5) (real->flonum . oR52d6) (flzero? . oR52d5) (fltruncate . oR52d4) (fltan . oR52d3) (flsqrt . oR52d2) (flsin . oR52d1) (flround . oR52d0) (flpositive? . oR52cf) (flonum? . oR52ce) (flodd? . oR52cd) (flnumerator . oR52cc) (flnegative? . oR52cb) (flnan? . oR52ca) (flmod0 . oR52c9) (flmod . oR52c8) (flmin . oR52c7) (flmax . oR52c6) (fllog . oR52c5) (flinteger? . oR52c4) (flinfinite? . oR52c3) (flfloor . oR52c2) (flfinite? . oR52c1) (flexpt . oR52c0) (flexp . oR52bf) (fleven? . oR52be) (fldiv0-and-mod0 . oR52bd) (fldiv0 . oR52bc) (fldiv-and-mod . oR52bb) (fldiv . oR52ba) (fldenominator . oR52b9) (flcos . oR52b8) (flceiling . oR52b7) (flatan . oR52b6) (flasin . oR52b5) (flacos . oR52b4) (flabs . oR52b3) (fl>? . oR52b2) (fl>=? . oR52b1) (fl=? . oR52b0) (fl<? . oR52af) (fl<=? . oR52ae) (fl/ . oR52ad) (fl- . oR52ac) (fl+ . oR52ab) (fl* . oR52aa) (fixnum->flonum . oR52a9) (fxzero? . oR52a8) (fxxor . oR52a7) (fxrotate-bit-field . oR52a6) (fxreverse-bit-field . oR52a5) (fxpositive? . oR52a4) (fxodd? . oR52a3) (fxnot . oR52a2) (fxnegative? . oR52a1) (fxmod0 . oR52a0) (fxmod . oR529f) (fxmin . oR529e) (fxmax . oR529d) (fxlength . oR529c) (fxior . oR529b) (fxif . oR529a) (fxfirst-bit-set . oR5299) (fxeven? . oR5298) (fxdiv0-and-mod0 . oR5297) (fxdiv0 . oR5296) (fxdiv-and-mod . oR5295) (fxdiv . oR5294) (fxcopy-bit-field . oR5293) (fxcopy-bit . oR5292) (fxbit-set? . oR5291) (fxbit-field . oR5290) (fxbit-count . oR528f) (fxarithmetic-shift-right . oR528e) (fxarithmetic-shift-left . oR528d) (fxarithmetic-shift . oR528c) (fxand . oR528b) (fx>? . oR528a) (fx>=? . oR5289) (fx=? . oR5288) (fx<? . oR5287) (fx<=? . oR5286) (fx-/carry . oR5285) (fx- . oR5284) (fx+/carry . oR5283) (fx+ . oR5282) (fx*/carry . oR5281) (fx* . oR5280) (greatest-fixnum . oR527f) (least-fixnum . oR527e) (fixnum-width . oR527d) (fixnum? . oR527c) (bitwise-rotate-bit-field . oR527b) (bitwise-reverse-bit-field . oR527a) (bitwise-length . oR5279) (bitwise-if . oR5278) (bitwise-first-bit-set . oR5277) (bitwise-copy-bit-field . oR5276) (bitwise-copy-bit . oR5275) (bitwise-bit-set? . oR5274) (bitwise-bit-field . oR5273) (bitwise-bit-count . oR5272) (bitwise-xor . oR5271) (bitwise-ior . oR5270) (bitwise-and . oR526f) (bitwise-not . oR526e) (bitwise-arithmetic-shift-right . oR526d) (bitwise-arithmetic-shift-left . oR526c) (bitwise-arithmetic-shift . oR526b) (zero? . oR526a) (vector? . oR5269) (vector-set! . oR5268) (vector-ref . oR5267) (vector-map . oR5266) (vector-length . oR5265) (vector-for-each . oR5264) (vector-fill! . oR5263) (vector->list . oR5262) (vector . oR5261) (values . oR5260) (truncate . oR525f) (tan . oR525e) (symbol? . oR525d) (symbol=? . oR525c) (symbol->string . oR525b) (substring . oR525a) (string? . oR5259) (string>? . oR5258) (string>=? . oR5257) (string=? . oR5256) (string<? . oR5255) (string<=? . oR5254) (string-ref . oR5253) (string-length . oR5252) (string-for-each . oR5251) (string-copy . oR5250) (string-append . oR524f) (string->symbol . oR524e) (string->number . oR524d) (string->list . oR524c) (string . oR524b) (sqrt . oR524a) (sin . oR5249) (round . oR5248) (reverse . oR5247) (real? . oR5246) (real-valued? . oR5245) (real-part . oR5244) (rationalize . oR5243) (rational? . oR5242) (rational-valued? . oR5241) (procedure? . oR5240) (positive? . oR523f) (pair? . oR523e) (odd? . oR523d) (numerator . oR523c) (number? . oR523b) (number->string . oR523a) (null? . oR5239) (not . oR5238) (negative? . oR5237) (nan? . oR5236) (min . oR5235) (max . oR5234) (map . oR5233) (make-vector . oR5232) (make-string . oR5231) (make-rectangular . oR5230) (make-polar . oR522f) (magnitude . oR522e) (log . oR522d) (list? . oR522c) (list-tail . oR522b) (list-ref . oR522a) (list->vector . oR5229) (list->string . oR5228) (list . oR5227) (length . oR5226) (lcm . oR5225) (integer? . oR5224) (integer-valued? . oR5223) (integer->char . oR5222) (infinite? . oR5221) (inexact? . oR5220) (inexact . oR521f) (imag-part . oR521e) (gcd . oR521d) (for-each . oR521c) (floor . oR521b) (finite? . oR521a) (expt . oR5219) (exp . oR5218) (exact? . oR5217) (exact-integer-sqrt . oR5216) (exact . oR5215) (even? . oR5214) (error . oR5213) (eqv? . oR5212) (equal? . oR5211) (eq? . oR5210) (dynamic-wind . oR520f) (div0-and-mod0 . oR520e) (mod0 . oR520d) (div0 . oR520c) (div-and-mod . oR520b) (mod . oR520a) (div . oR5209) (denominator . oR5208) (cos . oR5207) (cons . oR5206) (complex? . oR5205) (char? . oR5204) (char>? . oR5203) (char>=? . oR5202) (char=? . oR5201) (char<? . oR5200) (char<=? . oR51ff) (char->integer . oR51fe) (ceiling . oR51fd) (call-with-values . oR51fc) (call/cc . oR51fb) (call-with-current-continuation . oR51fa) (cddddr . oR51f9) (cdddar . oR51f8) (cddadr . oR51f7) (cddaar . oR51f6) (cdaddr . oR51f5) (cdadar . oR51f4) (cdaadr . oR51f3) (cdaaar . oR51f2) (cadddr . oR51f1) (caddar . oR51f0) (cadadr . oR51ef) (cadaar . oR51ee) (caaddr . oR51ed) (caadar . oR51ec) (caaadr . oR51eb) (caaaar . oR51ea) (cdddr . oR51e9) (cddar . oR51e8) (cdadr . oR51e7) (cdaar . oR51e6) (caddr . oR51e5) (cadar . oR51e4) (caadr . oR51e3) (caaar . oR51e2) (cddr . oR51e1) (cdar . oR51e0) (cadr . oR51df) (caar . oR51de) (cdr . oR51dd) (car . oR51dc) (boolean? . oR51db) (boolean=? . oR51da) (atan . oR51d9) (assertion-violation . oR51d8) (assertion-error . oR31cb) (asin . oR51d7) (apply . oR51d6) (append . oR51d5) (angle . oR51d4) (acos . oR51d3) (abs . oR51d2) (/ . oR51d1) (* . oR51d0) (- . oR51cf) (+ . oR51ce) (>= . oR51cd) (> . oR51cc) (= . oR51cb) (<= . oR51ca) (< . oR51c9) (library . oR51c8) (&no-nans . oR51c7) (&no-infinities . oR51c6) (&i/o-encoding . oR51c5) (&i/o-decoding . oR51c4) (&i/o-port . oR51c3) (&i/o-file-does-not-exist . oR51c2) (&i/o-file-already-exists . oR51c1) (&i/o-file-is-read-only . oR51c0) (&i/o-file-protection . oR51bf) (&i/o-filename . oR51be) (&i/o-invalid-position . oR51bd) (&i/o-write . oR51bc) (&i/o-read . oR51bb) (&i/o . oR51ba) (&undefined . oR51b9) (&syntax . oR51b8) (&lexical . oR51b7) (&implementation-restriction . oR51b6) (&non-continuable . oR51b5) (&who . oR51b4) (&irritants . oR51b3) (&assertion . oR51b2) (&violation . oR51b1) (&error . oR51b0) (&serious . oR51af) (&warning . oR51ae) (&message . oR51ad) (&condition . oR51ac) (define-condition-type . oR51ab) (define-enumeration . oR51aa) (define-record-type . oR51a9) (parent-rtd . oR51a8) (nongenerative . oR51a7) (opaque . oR51a6) (sealed . oR51a5) (protocol . oR51a4) (parent . oR51a3) (immutable . oR51a2) (mutable . oR51a1) (fields . oR51a0) (error-handling-mode . oR519f) (file-options . oR519e) (buffer-mode . oR519d) (eol-style . oR519c) (guard . oR519b) (trace-define . oR519a) (trace-lambda . oR5199) (unsyntax-splicing . oR5198) (unsyntax . oR5197) (unquote-splicing . oR5196) (unquote . oR5195) (_ . oR5194) (else . oR5193) (=> . oR5192) (... . oR5191) (assert . oR5190) (endianness . oR518f) (delay . oR518e) (time . oR518d) (do . oR518c) (cond . oR518b) (let* . oR518a) (let*-values . oR5189) (let-values . oR5188) (identifier-syntax . oR5187) (with-syntax . oR5186) (quasisyntax . oR5185) (quasiquote . oR5184) (syntax-rules . oR5183) (include . oR5182) (define-struct . oR5181) (record-constructor-descriptor . oR5180) (record-type-descriptor . oR517f) (case . oR517e) (parameterize . oR517d) (unless . oR517c) (when . oR517b) (or . oR517a) (and . oR5179) (if . oR5178) (let . oR5177) (letrec* . oR5176) (letrec . oR5175) (type-descriptor . oR5174) (case-lambda . oR5173) (lambda . oR5172) (syntax . oR5171) (syntax-case . oR5170) (quote . oR516f) (foreign-call . oR516e) (letrec-syntax . oR516d) (let-syntax . oR516c) (set! . oR516b) (import . oR516a) (begin . oR5169) (module . oR5168) (define-syntax . oR5167) (define . oR5166)) '((oR4f00 core-prim . &no-nans-rcd) (oR4efe core-prim . &no-nans-rtd) (oR4eeb core-prim . &no-infinities-rcd) (oR4ee9 core-prim . &no-infinities-rtd) (oR4ed6 core-prim . &i/o-encoding-rcd) (oR4ed4 core-prim . &i/o-encoding-rtd) (oR4ebb core-prim . &i/o-decoding-rcd) (oR4eb9 core-prim . &i/o-decoding-rtd) (oR4ea6 core-prim . &i/o-port-rcd) (oR4ea4 core-prim . &i/o-port-rtd) (oR4e8b core-prim . &i/o-file-does-not-exist-rcd) (oR4e89 core-prim . &i/o-file-does-not-exist-rtd) (oR4e76 core-prim . &i/o-file-already-exists-rcd) (oR4e74 core-prim . &i/o-file-already-exists-rtd) (oR4e61 core-prim . &i/o-file-is-read-only-rcd) (oR4e5f core-prim . &i/o-file-is-read-only-rtd) (oR4e4c core-prim . &i/o-file-protection-rcd) (oR4e4a core-prim . &i/o-file-protection-rtd) (oR4e37 core-prim . &i/o-filename-rcd) (oR4e35 core-prim . &i/o-filename-rtd) (oR4e1c core-prim . &i/o-invalid-position-rcd) (oR4e1a core-prim . &i/o-invalid-position-rtd) (oR4e01 core-prim . &i/o-write-rcd) (oR4dff core-prim . &i/o-write-rtd) (oR4dec core-prim . &i/o-read-rcd) (oR4dea core-prim . &i/o-read-rtd) (oR4dd7 core-prim . &i/o-rcd) (oR4dd5 core-prim . &i/o-rtd) (oR4dc2 core-prim . &undefined-rcd) (oR4dc0 core-prim . &undefined-rtd) (oR4dad core-prim . &syntax-rcd) (oR4dab core-prim . &syntax-rtd) (oR4d8c core-prim . &lexical-rcd) (oR4d8a core-prim . &lexical-rtd) (oR4d77 core-prim . &implementation-restriction-rcd) (oR4d75 core-prim . &implementation-restriction-rtd) (oR4d62 core-prim . &non-continuable-rcd) (oR4d60 core-prim . &non-continuable-rtd) (oR4d4d core-prim . &who-rcd) (oR4d4b core-prim . &who-rtd) (oR4d32 core-prim . &irritants-rcd) (oR4d30 core-prim . &irritants-rtd) (oR4d17 core-prim . &assertion-rcd) (oR4d15 core-prim . &assertion-rtd) (oR4d02 core-prim . &violation-rcd) (oR4d00 core-prim . &violation-rtd) (oR4ced core-prim . &error-rcd) (oR4ceb core-prim . &error-rtd) (oR4cd8 core-prim . &serious-rcd) (oR4cd6 core-prim . &serious-rtd) (oR4cc3 core-prim . &warning-rcd) (oR4cc1 core-prim . &warning-rtd) (oR4cae core-prim . &message-rcd) (oR4cac core-prim . &message-rtd) (oR4c4f core-prim . &condition-rcd) (oR4c4d core-prim . &condition-rtd) (oR31cd core-prim . syntax-error) (oR30f1 core-prim . syntax-dispatch) (oR5496 core-prim . pretty-print) (oR5495 core-prim . eval-core) (oR5494 core-prim . set-symbol-value!) (oR5493 core-prim . symbol-value) (oR5492 core-prim . gensym) (oR5491 core-prim . void) (oR500f core-prim . load) (oR31df core-prim . interaction-environment) (oR5490 core-prim . char-ready?) (oR548f core-prim . regexp?) (oR548e core-prim . read-line) (oR548d core-prim . gensym-prefix-set!) (oR548c core-prim . ungensym) (oR548b core-prim . alist->eq-hash-table) (oR548a core-prim . assoc-ref) (oR5489 core-prim . print) (oR5488 core-prim . format) (oR5487 core-prim . host-os) (oR2b19 core-prim . library-path) (oR5486 core-prim . standard-library-path) (oR5485 core-prim . file-newer?) (oR5484 core-prim . stat-mtime) (oR5483 core-prim . write-to-file) (oR5482 core-prim . file->sexp-list) (oR5481 core-prim . file->list) (oR5480 core-prim . file->string) (oR547f core-prim . digit->integer) (oR547e core-prim . call-with-string-input-port) (oR547d core-prim . call-with-string-io) (oR547c core-prim . string-split) (oR547b core-prim . bytevector-for-each) (oR547a core-prim . string->regexp) (oR5479 core-prim . rxmatch) (oR5478 core-prim . regexp-replace-all) (oR5477 core-prim . hashtable-for-each) (oR2903 core-prim . mosh-cache-dir) (oR5476 core-prim . call-process) (oR5475 core-prim . local-tz-offset) (oR5474 core-prim . microseconds) (oR5473 core-prim . directory-list) (oR5472 core-prim . set-current-directory!) (oR5471 core-prim . expand-path) (oR5470 core-prim . current-directory) (oR546f core-prim . %spawn) (oR546e core-prim . %waitpid) (oR546d core-prim . simple-struct-name) (oR546c core-prim . simple-struct-set!) (oR546b core-prim . simple-struct-ref) (oR546a core-prim . make-simple-struct) (oR5469 core-prim . simple-struct?) (oR5468 core-prim . pointer-ref-c-int64) (oR5467 core-prim . pointer-ref-c-int32) (oR5466 core-prim . pointer-ref-c-int16) (oR5465 core-prim . pointer-ref-c-int8) (oR5464 core-prim . pointer-ref-c-uint64) (oR5463 core-prim . pointer-ref-c-uint32) (oR5462 core-prim . pointer-ref-c-uint16) (oR5461 core-prim . pointer-ref-c-uint8) (oR5460 core-prim . pointer-set-c-uint64!) (oR545f core-prim . pointer-set-c-uint32!) (oR545e core-prim . pointer-set-c-uint16!) (oR545d core-prim . pointer-set-c-uint8!) (oR545c core-prim . pointer-set-c-int64!) (oR545b core-prim . pointer-set-c-int32!) (oR545a core-prim . pointer-set-c-int16!) (oR5459 core-prim . pointer-set-c-int8!) (oR5458 core-prim . pointer-set-c-pointer!) (oR5457 core-prim . pointer-set-c-double!) (oR5456 core-prim . pointer-set-c-float!) (oR5455 core-prim . pointer-set-c-long-long!) (oR5454 core-prim . pointer-set-c-long!) (oR5453 core-prim . pointer-set-c-int!) (oR5452 core-prim . pointer-set-c-short!) (oR5451 core-prim . pointer-set-c-char!) (oR5450 core-prim . pointer-ref-c-pointer) (oR544f core-prim . pointer-ref-c-double) (oR544e core-prim . pointer-ref-c-float) (oR544d core-prim . pointer-ref-c-unsigned-long-long) (oR544c core-prim . pointer-ref-c-signed-long-long) (oR544b core-prim . pointer-ref-c-unsigned-long) (oR544a core-prim . pointer-ref-c-signed-long) (oR5449 core-prim . pointer-ref-c-unsigned-int) (oR5448 core-prim . pointer-ref-c-signed-int) (oR5447 core-prim . pointer-ref-c-unsigned-short) (oR5446 core-prim . pointer-ref-c-signed-short) (oR5445 core-prim . pointer-ref-c-unsigned-char) (oR5444 core-prim . pointer-ref-c-signed-char) (oR5443 core-prim . pointer->integer) (oR5442 core-prim . integer->pointer) (oR5441 core-prim . pointer?) (oR5440 core-prim . shared-errno) (oR543f core-prim . get-c-address) (oR543e core-prim . jit-compiled?) (oR543d core-prim . obj->integer) (oR543c core-prim . u8-list->c-procedure) (oR543b core-prim . %ffi-free-c-callback-trampoline) (oR543a core-prim . %ffi-make-c-callback-trampoline) (oR5439 core-prim . %ffi-free) (oR5438 core-prim . %ffi-malloc) (oR5437 core-prim . %ffi-supported?) (oR5436 core-prim . %ffi-pointer->string) (oR5435 core-prim . %ffi-call) (oR5434 core-prim . %ffi-lookup) (oR5433 core-prim . %ffi-open) (oR5432 core-prim . null-terminated-utf8->string) (oR5431 core-prim . null-terminated-bytevector->string) (oR5430 core-prim . %fork) (oR542f core-prim . %pipe) (oR542e core-prim . p) (oR542d core-prim . open-output-string) (oR542c core-prim . get-output-string) (oR542b core-prim . file-stat-ctime) (oR542a core-prim . file-stat-atime) (oR5429 core-prim . file-stat-mtime) (oR5428 core-prim . file-size-in-bytes) (oR5427 core-prim . file-writable?) (oR5426 core-prim . file-executable?) (oR5425 core-prim . file-readable?) (oR5424 core-prim . file-regular?) (oR5423 core-prim . file-symbolic-link?) (oR5422 core-prim . file-directory?) (oR5421 core-prim . create-symbolic-link) (oR5420 core-prim . rename-file) (oR541f core-prim . delete-directory) (oR541e core-prim . create-directory) (oR541d core-prim . create-mosh-cache-dir) (oR541c core-prim . get-environment-variables) (oR541b core-prim . current-exception-handler) (oR541a core-prim . get-environment-variable) (oR5419 core-prim . join-wraps) (oR5418 core-prim . id->real-label) (oR5417 core-prim . same-marks?) (oR5416 core-prim . same-marks*?) (oR5415 core-prim . get-timeofday) (oR5414 core-prim . get-command-line) (oR5413 core-prim . sys-display) (oR5412 core-prim . whereis) (oR5411 core-prim . register) (oR5410 core-prim . vm-join!) (oR540f core-prim . vm-set-value!) (oR540e core-prim . vm?) (oR540d core-prim . main-vm?) (oR540c core-prim . vm-eval) (oR540b core-prim . vm-self) (oR540a core-prim . vm-start!) (oR5409 core-prim . make-vm) (oR5408 core-prim . mutex-try-lock!) (oR5407 core-prim . mutex-unlock!) (oR5406 core-prim . mutex-lock!) (oR5405 core-prim . mutex?) (oR5404 core-prim . make-mutex) (oR5403 core-prim . condition-variable-notify-all!) (oR5402 core-prim . condition-variable-notify!) (oR5401 core-prim . condition-variable-wait!) (oR5400 core-prim . make-condition-variable) (oR53ff core-prim . mosh-executable-path) (oR53fe core-prim . make-file-options) (oR53fd core-prim . for-each-with-index) (oR53fc core-prim . source-info) (oR53fb core-prim . instruction?) (oR53fa core-prim . instruction->integer) (oR53f9 core-prim . instruction->symbol) (oR53f8 core-prim . closure->list) (oR53f7 core-prim . make-compiler-instruction) (oR53f6 core-prim . make-instruction) (oR53f5 core-prim . set-source-info!) (oR53f4 core-prim . bignum?) (oR53f3 core-prim . fast-equal?) (oR53f2 core-prim . fasl-read) (oR53f1 core-prim . fasl-write) (oR53f0 core-prim . time-usage) (oR53ef core-prim . os-constant) (oR53ee core-prim . disasm) (oR2901 core-prim . make-parameter) (oR53ed core-prim . socket-port) (oR53ec core-prim . socket-shutdown) (oR53eb core-prim . socket-close) (oR53ea core-prim . socket-send) (oR53e9 core-prim . socket-recv!) (oR53e8 core-prim . socket-recv) (oR53e7 core-prim . make-server-socket) (oR53e6 core-prim . make-client-socket) (oR53e5 core-prim . socket-accept) (oR53e4 core-prim . socket?) (oR53e3 core-prim . string-upcase) (oR53e2 core-prim . string-titlecase) (oR53e1 core-prim . string-normalize-nfkd) (oR53e0 core-prim . string-normalize-nfkc) (oR53df core-prim . string-normalize-nfd) (oR53de core-prim . string-normalize-nfc) (oR53dd core-prim . string-foldcase) (oR53dc core-prim . string-downcase) (oR53db core-prim . string-ci>?) (oR53da core-prim . string-ci>=?) (oR53d9 core-prim . string-ci=?) (oR53d8 core-prim . string-ci<?) (oR53d7 core-prim . string-ci<=?) (oR53d6 core-prim . char-whitespace?) (oR53d5 core-prim . char-upper-case?) (oR53d4 core-prim . char-title-case?) (oR53d3 core-prim . char-numeric?) (oR53d2 core-prim . char-lower-case?) (oR53d1 core-prim . char-general-category) (oR53d0 core-prim . char-upcase) (oR53cf core-prim . char-titlecase) (oR53ce core-prim . char-foldcase) (oR53cd core-prim . char-downcase) (oR53cc core-prim . char-ci>?) (oR53cb core-prim . char-ci>=?) (oR53ca core-prim . char-ci=?) (oR53c9 core-prim . char-ci<?) (oR53c8 core-prim . char-ci<=?) (oR53c7 core-prim . char-alphabetic?) (oR2f1c core-prim . make-variable-transformer) (oR31d3 core-prim . identifier?) (oR31bf core-prim . generate-temporaries) (oR31c1 core-prim . free-identifier=?) (oR31d7 core-prim . syntax->datum) (oR31d5 core-prim . datum->syntax) (oR31c3 core-prim . bound-identifier=?) (oR53c6 core-prim . record-type-descriptor?) (oR53c5 core-prim . record-predicate) (oR53c4 core-prim . record-mutator) (oR53c3 core-prim . record-constructor) (oR53c2 core-prim . record-accessor) (oR53c1 core-prim . make-record-type-descriptor) (oR53c0 core-prim . make-record-constructor-descriptor) (oR53bf core-prim . record?) (oR53be core-prim . record-type-uid) (oR53bd core-prim . record-type-sealed?) (oR53bc core-prim . record-type-parent) (oR53bb core-prim . record-type-opaque?) (oR53ba core-prim . record-type-name) (oR53b9 core-prim . record-type-generative?) (oR53b8 core-prim . record-type-field-names) (oR53b7 core-prim . record-rtd) (oR53b6 core-prim . record-field-mutable?) (oR53b5 core-prim . delete-file) (oR53b4 core-prim . file-exists?) (oR53b3 core-prim . vector-sort!) (oR53b2 core-prim . vector-sort) (oR53b1 core-prim . list-sort) (oR53b0 core-prim . symbol-hash) (oR53af core-prim . string-ci-hash) (oR53ae core-prim . string-hash) (oR53ad core-prim . equal-hash) (oR53ac core-prim . hashtable-equivalence-function) (oR53ab core-prim . make-hashtable) (oR53aa core-prim . hashtable-hash-function) (oR53a9 core-prim . make-eqv-hashtable) (oR53a8 core-prim . make-eq-hashtable) (oR53a7 core-prim . hashtable?) (oR53a6 core-prim . hashtable-update!) (oR53a5 core-prim . hashtable-size) (oR53a4 core-prim . hashtable-set!) (oR53a3 core-prim . hashtable-ref) (oR53a2 core-prim . hashtable-mutable?) (oR53a1 core-prim . hashtable-keys) (oR53a0 core-prim . hashtable-entries) (oR539f core-prim . hashtable-delete!) (oR539e core-prim . hashtable-copy) (oR539d core-prim . hashtable-contains?) (oR539c core-prim . hashtable-clear!) (oR539b core-prim . call-with-output-file) (oR539a core-prim . call-with-input-file) (oR5399 core-prim . write-char) (oR5398 core-prim . write) (oR5397 core-prim . with-output-to-file) (oR5396 core-prim . with-input-from-file) (oR5395 core-prim . read-char) (oR5394 core-prim . read) (oR5393 core-prim . peek-char) (oR5392 core-prim . open-output-file) (oR5391 core-prim . open-input-file) (oR5390 core-prim . newline) (oR538f core-prim . display) (oR538e core-prim . close-output-port) (oR538d core-prim . close-input-port) (oR538c core-prim . eof-object?) (oR538b core-prim . eof-object) (oR538a core-prim . current-error-port) (oR5389 core-prim . current-output-port) (oR5388 core-prim . current-input-port) (oR5387 core-prim . output-port?) (oR5386 core-prim . input-port?) (oR5385 core-prim . utf-8-codec) (oR5384 core-prim . utf-16-codec) (oR5383 core-prim . transcoder-error-handling-mode) (oR5382 core-prim . transcoder-eol-style) (oR5381 core-prim . transcoder-codec) (oR5380 core-prim . transcoded-port) (oR537f core-prim . textual-port?) (oR537e core-prim . string->bytevector) (oR537d core-prim . standard-output-port) (oR537c core-prim . standard-input-port) (oR537b core-prim . standard-error-port) (oR537a core-prim . set-port-position!) (oR5379 core-prim . put-u8) (oR5378 core-prim . put-string) (oR5377 core-prim . put-datum) (oR5376 core-prim . put-char) (oR5375 core-prim . put-bytevector) (oR5374 core-prim . port?) (oR5373 core-prim . port-transcoder) (oR5372 core-prim . port-position) (oR5371 core-prim . port-has-set-port-position!?) (oR5370 core-prim . port-has-port-position?) (oR536f core-prim . port-eof?) (oR536e core-prim . output-port-buffer-mode) (oR536d core-prim . open-string-output-port) (oR536c core-prim . open-string-input-port) (oR536b core-prim . open-file-output-port) (oR536a core-prim . open-file-input/output-port) (oR5369 core-prim . open-file-input-port) (oR5368 core-prim . open-bytevector-output-port) (oR5367 core-prim . open-bytevector-input-port) (oR5366 core-prim . native-transcoder) (oR5365 core-prim . native-eol-style) (oR5364 core-prim . make-transcoder) (oR5363 core-prim . latin-1-codec) (oR4dfb core-prim . make-i/o-write-error) (oR4de6 core-prim . make-i/o-read-error) (oR4e9c core-prim . make-i/o-port-error) (oR4e12 core-prim . make-i/o-invalid-position-error) (oR4e2d core-prim . make-i/o-filename-error) (oR4e46 core-prim . make-i/o-file-protection-error) (oR4e5b core-prim . make-i/o-file-is-read-only-error) (oR4e85 core-prim . make-i/o-file-does-not-exist-error) (oR4e70 core-prim . make-i/o-file-already-exists-error) (oR4dd1 core-prim . make-i/o-error) (oR4ecc core-prim . make-i/o-encoding-error) (oR4eb5 core-prim . make-i/o-decoding-error) (oR5362 core-prim . make-custom-textual-output-port) (oR5361 core-prim . make-custom-textual-input/output-port) (oR5360 core-prim . make-custom-textual-input-port) (oR535f core-prim . make-custom-binary-output-port) (oR535e core-prim . make-custom-binary-input/output-port) (oR535d core-prim . make-custom-binary-input-port) (oR535c core-prim . make-bytevector) (oR535b core-prim . lookahead-u8) (oR535a core-prim . lookahead-char) (oR4dfd core-prim . i/o-write-error?) (oR4de8 core-prim . i/o-read-error?) (oR4ea0 core-prim . i/o-port-error?) (oR4e16 core-prim . i/o-invalid-position-error?) (oR4e31 core-prim . i/o-filename-error?) (oR4e48 core-prim . i/o-file-protection-error?) (oR4e5d core-prim . i/o-file-is-read-only-error?) (oR4e87 core-prim . i/o-file-does-not-exist-error?) (oR4e72 core-prim . i/o-file-already-exists-error?) (oR4dd3 core-prim . i/o-error?) (oR4e18 core-prim . i/o-error-position) (oR4ea2 core-prim . i/o-error-port) (oR4e33 core-prim . i/o-error-filename) (oR4ed0 core-prim . i/o-encoding-error?) (oR4ed2 core-prim . i/o-encoding-error-char) (oR4eb7 core-prim . i/o-decoding-error?) (oR5359 core-prim . get-u8) (oR5358 core-prim . get-string-n!) (oR5357 core-prim . get-string-n) (oR5356 core-prim . get-string-all) (oR5355 core-prim . get-line) (oR5354 core-prim . get-datum) (oR5353 core-prim . get-char) (oR5352 core-prim . get-bytevector-some) (oR5351 core-prim . get-bytevector-n!) (oR5350 core-prim . get-bytevector-n) (oR534f core-prim . get-bytevector-all) (oR534e core-prim . flush-output-port) (oR534d core-prim . close-port) (oR31ad core-prim . scheme-report-environment) (oR534c core-prim . quotient) (oR31ab core-prim . null-environment) (oR534b core-prim . remainder) (oR534a core-prim . modulo) (oR5349 core-prim . inexact->exact) (oR5348 core-prim . force) (oR5347 core-prim . exact->inexact) (oR5346 core-prim . make-promise) (oR5345 core-prim . exit) (oR5009 core-prim . command-line) (oR5344 core-prim . string-fill!) (oR5343 core-prim . string-set!) (oR5342 core-prim . set-cdr!) (oR5341 core-prim . set-car!) (oR5340 core-prim . remove) (oR533f core-prim . remv) (oR533e core-prim . remp) (oR533d core-prim . remq) (oR533c core-prim . partition) (oR533b core-prim . memv) (oR533a core-prim . memq) (oR5339 core-prim . memp) (oR5338 core-prim . member) (oR5337 core-prim . exists) (oR5336 core-prim . for-all) (oR5335 core-prim . fold-right) (oR5334 core-prim . fold-left) (oR5333 core-prim . find) (oR5332 core-prim . filter) (oR5331 core-prim . cons*) (oR5330 core-prim . assv) (oR532f core-prim . assq) (oR532e core-prim . assp) (oR532d core-prim . assoc) (oR532c core-prim . call-with-string-output-port) (oR532b core-prim . call-with-port) (oR532a core-prim . call-with-bytevector-output-port) (oR5329 core-prim . bytevector->string) (oR5328 core-prim . buffer-mode?) (oR5327 core-prim . binary-port?) (oR5326 core-prim . with-exception-handler) (oR5325 core-prim . raise-continuable) (oR5324 core-prim . raise) (oR31b1 core-prim . eval) (oR31a9 core-prim . environment) (oR5323 core-prim . make-enumeration) (oR5322 core-prim . enum-set=?) (oR5321 core-prim . enum-set-universe) (oR5320 core-prim . enum-set-union) (oR531f core-prim . enum-set-subset?) (oR531e core-prim . enum-set-projection) (oR531d core-prim . enum-set-member?) (oR531c core-prim . enum-set-intersection) (oR531b core-prim . enum-set-indexer) (oR531a core-prim . enum-set-difference) (oR5319 core-prim . enum-set-constructor) (oR5318 core-prim . enum-set-complement) (oR5317 core-prim . enum-set->list) (oR4d47 core-prim . who-condition?) (oR4cbf core-prim . warning?) (oR4cfe core-prim . violation?) (oR4dbe core-prim . undefined-violation?) (oR4da5 core-prim . syntax-violation?) (oR4da9 core-prim . syntax-violation-subform) (oR4da7 core-prim . syntax-violation-form) (oR31d1 core-prim . syntax-violation) (oR5316 core-prim . simple-conditions) (oR4cd4 core-prim . serious-condition?) (oR4d5e core-prim . non-continuable-violation?) (oR4ca8 core-prim . message-condition?) (oR4d43 core-prim . make-who-condition) (oR4cbd core-prim . make-warning) (oR4cfc core-prim . make-violation) (oR4dbc core-prim . make-undefined-violation) (oR4d9f core-prim . make-syntax-violation) (oR4cd2 core-prim . make-serious-condition) (oR4d5c core-prim . make-non-continuable-violation) (oR4ca4 core-prim . make-message-condition) (oR4d86 core-prim . make-lexical-violation) (oR4d28 core-prim . make-irritants-condition) (oR4d71 core-prim . make-implementation-restriction-violation) (oR4ce7 core-prim . make-error) (oR4d11 core-prim . make-assertion-violation) (oR4d88 core-prim . lexical-violation?) (oR4d2c core-prim . irritants-condition?) (oR4d73 core-prim . implementation-restriction-violation?) (oR4ce9 core-prim . error?) (oR4d49 core-prim . condition-who) (oR5315 core-prim . condition-predicate) (oR4caa core-prim . condition-message) (oR4d2e core-prim . condition-irritants) (oR5314 core-prim . condition-accessor) (oR5313 core-prim . condition) (oR4d13 core-prim . assertion-violation?) (oR5312 core-prim . condition?) (oR5311 core-prim . utf32->string) (oR5310 core-prim . utf16->string) (oR530f core-prim . utf8->string) (oR530e core-prim . uint-list->bytevector) (oR530d core-prim . u8-list->bytevector) (oR530c core-prim . string->utf8) (oR530b core-prim . string->utf32) (oR530a core-prim . string->utf16) (oR5309 core-prim . sint-list->bytevector) (oR5308 core-prim . native-endianness) (oR5307 core-prim . bytevector?) (oR5306 core-prim . bytevector=?) (oR5305 core-prim . bytevector-uint-set!) (oR5304 core-prim . bytevector-uint-ref) (oR5303 core-prim . bytevector-u8-set!) (oR5302 core-prim . bytevector-u8-ref) (oR5301 core-prim . bytevector-u64-set!) (oR5300 core-prim . bytevector-u64-ref) (oR52ff core-prim . bytevector-u64-native-set!) (oR52fe core-prim . bytevector-u64-native-ref) (oR52fd core-prim . bytevector-u32-set!) (oR52fc core-prim . bytevector-u32-ref) (oR52fb core-prim . bytevector-u32-native-set!) (oR52fa core-prim . bytevector-u32-native-ref) (oR52f9 core-prim . bytevector-u16-set!) (oR52f8 core-prim . bytevector-u16-ref) (oR52f7 core-prim . bytevector-u16-native-set!) (oR52f6 core-prim . bytevector-u16-native-ref) (oR52f5 core-prim . bytevector-sint-set!) (oR52f4 core-prim . bytevector-sint-ref) (oR52f3 core-prim . bytevector-s8-set!) (oR52f2 core-prim . bytevector-s8-ref) (oR52f1 core-prim . bytevector-s64-set!) (oR52f0 core-prim . bytevector-s64-ref) (oR52ef core-prim . bytevector-s64-native-set!) (oR52ee core-prim . bytevector-s64-native-ref) (oR52ed core-prim . bytevector-s32-set!) (oR52ec core-prim . bytevector-s32-ref) (oR52eb core-prim . bytevector-s32-native-set!) (oR52ea core-prim . bytevector-s32-native-ref) (oR52e9 core-prim . bytevector-s16-set!) (oR52e8 core-prim . bytevector-s16-ref) (oR52e7 core-prim . bytevector-s16-native-set!) (oR52e6 core-prim . bytevector-s16-native-ref) (oR52e5 core-prim . bytevector-length) (oR52e4 core-prim . bytevector-ieee-single-ref) (oR52e3 core-prim . bytevector-ieee-single-set!) (oR52e2 core-prim . bytevector-ieee-single-native-set!) (oR52e1 core-prim . bytevector-ieee-single-native-ref) (oR52e0 core-prim . bytevector-ieee-double-set!) (oR52df core-prim . bytevector-ieee-double-ref) (oR52de core-prim . bytevector-ieee-double-native-set!) (oR52dd core-prim . bytevector-ieee-double-native-ref) (oR52dc core-prim . bytevector-fill!) (oR52db core-prim . bytevector-copy!) (oR52da core-prim . bytevector-copy) (oR52d9 core-prim . bytevector->uint-list) (oR52d8 core-prim . bytevector->u8-list) (oR52d7 core-prim . bytevector->sint-list) (oR4efc core-prim . no-nans-violation?) (oR4ee7 core-prim . no-infinities-violation?) (oR4efa core-prim . make-no-nans-violation) (oR4ee5 core-prim . make-no-infinities-violation) (oR52d6 core-prim . real->flonum) (oR52d5 core-prim . flzero?) (oR52d4 core-prim . fltruncate) (oR52d3 core-prim . fltan) (oR52d2 core-prim . flsqrt) (oR52d1 core-prim . flsin) (oR52d0 core-prim . flround) (oR52cf core-prim . flpositive?) (oR52ce core-prim . flonum?) (oR52cd core-prim . flodd?) (oR52cc core-prim . flnumerator) (oR52cb core-prim . flnegative?) (oR52ca core-prim . flnan?) (oR52c9 core-prim . flmod0) (oR52c8 core-prim . flmod) (oR52c7 core-prim . flmin) (oR52c6 core-prim . flmax) (oR52c5 core-prim . fllog) (oR52c4 core-prim . flinteger?) (oR52c3 core-prim . flinfinite?) (oR52c2 core-prim . flfloor) (oR52c1 core-prim . flfinite?) (oR52c0 core-prim . flexpt) (oR52bf core-prim . flexp) (oR52be core-prim . fleven?) (oR52bd core-prim . fldiv0-and-mod0) (oR52bc core-prim . fldiv0) (oR52bb core-prim . fldiv-and-mod) (oR52ba core-prim . fldiv) (oR52b9 core-prim . fldenominator) (oR52b8 core-prim . flcos) (oR52b7 core-prim . flceiling) (oR52b6 core-prim . flatan) (oR52b5 core-prim . flasin) (oR52b4 core-prim . flacos) (oR52b3 core-prim . flabs) (oR52b2 core-prim . fl>?) (oR52b1 core-prim . fl>=?) (oR52b0 core-prim . fl=?) (oR52af core-prim . fl<?) (oR52ae core-prim . fl<=?) (oR52ad core-prim . fl/) (oR52ac core-prim . fl-) (oR52ab core-prim . fl+) (oR52aa core-prim . fl*) (oR52a9 core-prim . fixnum->flonum) (oR52a8 core-prim . fxzero?) (oR52a7 core-prim . fxxor) (oR52a6 core-prim . fxrotate-bit-field) (oR52a5 core-prim . fxreverse-bit-field) (oR52a4 core-prim . fxpositive?) (oR52a3 core-prim . fxodd?) (oR52a2 core-prim . fxnot) (oR52a1 core-prim . fxnegative?) (oR52a0 core-prim . fxmod0) (oR529f core-prim . fxmod) (oR529e core-prim . fxmin) (oR529d core-prim . fxmax) (oR529c core-prim . fxlength) (oR529b core-prim . fxior) (oR529a core-prim . fxif) (oR5299 core-prim . fxfirst-bit-set) (oR5298 core-prim . fxeven?) (oR5297 core-prim . fxdiv0-and-mod0) (oR5296 core-prim . fxdiv0) (oR5295 core-prim . fxdiv-and-mod) (oR5294 core-prim . fxdiv) (oR5293 core-prim . fxcopy-bit-field) (oR5292 core-prim . fxcopy-bit) (oR5291 core-prim . fxbit-set?) (oR5290 core-prim . fxbit-field) (oR528f core-prim . fxbit-count) (oR528e core-prim . fxarithmetic-shift-right) (oR528d core-prim . fxarithmetic-shift-left) (oR528c core-prim . fxarithmetic-shift) (oR528b core-prim . fxand) (oR528a core-prim . fx>?) (oR5289 core-prim . fx>=?) (oR5288 core-prim . fx=?) (oR5287 core-prim . fx<?) (oR5286 core-prim . fx<=?) (oR5285 core-prim . fx-/carry) (oR5284 core-prim . fx-) (oR5283 core-prim . fx+/carry) (oR5282 core-prim . fx+) (oR5281 core-prim . fx*/carry) (oR5280 core-prim . fx*) (oR527f core-prim . greatest-fixnum) (oR527e core-prim . least-fixnum) (oR527d core-prim . fixnum-width) (oR527c core-prim . fixnum?) (oR527b core-prim . bitwise-rotate-bit-field) (oR527a core-prim . bitwise-reverse-bit-field) (oR5279 core-prim . bitwise-length) (oR5278 core-prim . bitwise-if) (oR5277 core-prim . bitwise-first-bit-set) (oR5276 core-prim . bitwise-copy-bit-field) (oR5275 core-prim . bitwise-copy-bit) (oR5274 core-prim . bitwise-bit-set?) (oR5273 core-prim . bitwise-bit-field) (oR5272 core-prim . bitwise-bit-count) (oR5271 core-prim . bitwise-xor) (oR5270 core-prim . bitwise-ior) (oR526f core-prim . bitwise-and) (oR526e core-prim . bitwise-not) (oR526d core-prim . bitwise-arithmetic-shift-right) (oR526c core-prim . bitwise-arithmetic-shift-left) (oR526b core-prim . bitwise-arithmetic-shift) (oR526a core-prim . zero?) (oR5269 core-prim . vector?) (oR5268 core-prim . vector-set!) (oR5267 core-prim . vector-ref) (oR5266 core-prim . vector-map) (oR5265 core-prim . vector-length) (oR5264 core-prim . vector-for-each) (oR5263 core-prim . vector-fill!) (oR5262 core-prim . vector->list) (oR5261 core-prim . vector) (oR5260 core-prim . values) (oR525f core-prim . truncate) (oR525e core-prim . tan) (oR525d core-prim . symbol?) (oR525c core-prim . symbol=?) (oR525b core-prim . symbol->string) (oR525a core-prim . substring) (oR5259 core-prim . string?) (oR5258 core-prim . string>?) (oR5257 core-prim . string>=?) (oR5256 core-prim . string=?) (oR5255 core-prim . string<?) (oR5254 core-prim . string<=?) (oR5253 core-prim . string-ref) (oR5252 core-prim . string-length) (oR5251 core-prim . string-for-each) (oR5250 core-prim . string-copy) (oR524f core-prim . string-append) (oR524e core-prim . string->symbol) (oR524d core-prim . string->number) (oR524c core-prim . string->list) (oR524b core-prim . string) (oR524a core-prim . sqrt) (oR5249 core-prim . sin) (oR5248 core-prim . round) (oR5247 core-prim . reverse) (oR5246 core-prim . real?) (oR5245 core-prim . real-valued?) (oR5244 core-prim . real-part) (oR5243 core-prim . rationalize) (oR5242 core-prim . rational?) (oR5241 core-prim . rational-valued?) (oR5240 core-prim . procedure?) (oR523f core-prim . positive?) (oR523e core-prim . pair?) (oR523d core-prim . odd?) (oR523c core-prim . numerator) (oR523b core-prim . number?) (oR523a core-prim . number->string) (oR5239 core-prim . null?) (oR5238 core-prim . not) (oR5237 core-prim . negative?) (oR5236 core-prim . nan?) (oR5235 core-prim . min) (oR5234 core-prim . max) (oR5233 core-prim . map) (oR5232 core-prim . make-vector) (oR5231 core-prim . make-string) (oR5230 core-prim . make-rectangular) (oR522f core-prim . make-polar) (oR522e core-prim . magnitude) (oR522d core-prim . log) (oR522c core-prim . list?) (oR522b core-prim . list-tail) (oR522a core-prim . list-ref) (oR5229 core-prim . list->vector) (oR5228 core-prim . list->string) (oR5227 core-prim . list) (oR5226 core-prim . length) (oR5225 core-prim . lcm) (oR5224 core-prim . integer?) (oR5223 core-prim . integer-valued?) (oR5222 core-prim . integer->char) (oR5221 core-prim . infinite?) (oR5220 core-prim . inexact?) (oR521f core-prim . inexact) (oR521e core-prim . imag-part) (oR521d core-prim . gcd) (oR521c core-prim . for-each) (oR521b core-prim . floor) (oR521a core-prim . finite?) (oR5219 core-prim . expt) (oR5218 core-prim . exp) (oR5217 core-prim . exact?) (oR5216 core-prim . exact-integer-sqrt) (oR5215 core-prim . exact) (oR5214 core-prim . even?) (oR5213 core-prim . error) (oR5212 core-prim . eqv?) (oR5211 core-prim . equal?) (oR5210 core-prim . eq?) (oR520f core-prim . dynamic-wind) (oR520e core-prim . div0-and-mod0) (oR520d core-prim . mod0) (oR520c core-prim . div0) (oR520b core-prim . div-and-mod) (oR520a core-prim . mod) (oR5209 core-prim . div) (oR5208 core-prim . denominator) (oR5207 core-prim . cos) (oR5206 core-prim . cons) (oR5205 core-prim . complex?) (oR5204 core-prim . char?) (oR5203 core-prim . char>?) (oR5202 core-prim . char>=?) (oR5201 core-prim . char=?) (oR5200 core-prim . char<?) (oR51ff core-prim . char<=?) (oR51fe core-prim . char->integer) (oR51fd core-prim . ceiling) (oR51fc core-prim . call-with-values) (oR51fb core-prim . call/cc) (oR51fa core-prim . call-with-current-continuation) (oR51f9 core-prim . cddddr) (oR51f8 core-prim . cdddar) (oR51f7 core-prim . cddadr) (oR51f6 core-prim . cddaar) (oR51f5 core-prim . cdaddr) (oR51f4 core-prim . cdadar) (oR51f3 core-prim . cdaadr) (oR51f2 core-prim . cdaaar) (oR51f1 core-prim . cadddr) (oR51f0 core-prim . caddar) (oR51ef core-prim . cadadr) (oR51ee core-prim . cadaar) (oR51ed core-prim . caaddr) (oR51ec core-prim . caadar) (oR51eb core-prim . caaadr) (oR51ea core-prim . caaaar) (oR51e9 core-prim . cdddr) (oR51e8 core-prim . cddar) (oR51e7 core-prim . cdadr) (oR51e6 core-prim . cdaar) (oR51e5 core-prim . caddr) (oR51e4 core-prim . cadar) (oR51e3 core-prim . caadr) (oR51e2 core-prim . caaar) (oR51e1 core-prim . cddr) (oR51e0 core-prim . cdar) (oR51df core-prim . cadr) (oR51de core-prim . caar) (oR51dd core-prim . cdr) (oR51dc core-prim . car) (oR51db core-prim . boolean?) (oR51da core-prim . boolean=?) (oR51d9 core-prim . atan) (oR51d8 core-prim . assertion-violation) (oR31cb core-prim . assertion-error) (oR51d7 core-prim . asin) (oR51d6 core-prim . apply) (oR51d5 core-prim . append) (oR51d4 core-prim . angle) (oR51d3 core-prim . acos) (oR51d2 core-prim . abs) (oR51d1 core-prim . /) (oR51d0 core-prim . *) (oR51cf core-prim . -) (oR51ce core-prim . +) (oR51cd core-prim . >=) (oR51cc core-prim . >) (oR51cb core-prim . =) (oR51ca core-prim . <=) (oR51c9 core-prim . <) (oR51c8 core-prim . library) (oR51c7 $core-rtd &no-nans-rtd &no-nans-rcd) (oR51c6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (oR51c5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (oR51c4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (oR51c3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (oR51c2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (oR51c1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (oR51c0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (oR51bf $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (oR51be $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (oR51bd $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (oR51bc $core-rtd &i/o-write-rtd &i/o-write-rcd) (oR51bb $core-rtd &i/o-read-rtd &i/o-read-rcd) (oR51ba $core-rtd &i/o-rtd &i/o-rcd) (oR51b9 $core-rtd &undefined-rtd &undefined-rcd) (oR51b8 $core-rtd &syntax-rtd &syntax-rcd) (oR51b7 $core-rtd &lexical-rtd &lexical-rcd) (oR51b6 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (oR51b5 $core-rtd &non-continuable-rtd &non-continuable-rcd) (oR51b4 $core-rtd &who-rtd &who-rcd) (oR51b3 $core-rtd &irritants-rtd &irritants-rcd) (oR51b2 $core-rtd &assertion-rtd &assertion-rcd) (oR51b1 $core-rtd &violation-rtd &violation-rcd) (oR51b0 $core-rtd &error-rtd &error-rcd) (oR51af $core-rtd &serious-rtd &serious-rcd) (oR51ae $core-rtd &warning-rtd &warning-rcd) (oR51ad $core-rtd &message-rtd &message-rcd) (oR51ac $core-rtd &condition-rtd &condition-rcd) (oR51ab macro . define-condition-type) (oR51aa macro . define-enumeration) (oR51a9 macro . define-record-type) (oR51a8 macro . parent-rtd) (oR51a7 macro . nongenerative) (oR51a6 macro . opaque) (oR51a5 macro . sealed) (oR51a4 macro . protocol) (oR51a3 macro . parent) (oR51a2 macro . immutable) (oR51a1 macro . mutable) (oR51a0 macro . fields) (oR519f macro . error-handling-mode) (oR519e macro . file-options) (oR519d macro . buffer-mode) (oR519c macro . eol-style) (oR519b macro . guard) (oR519a macro . trace-define) (oR5199 macro . trace-lambda) (oR5198 macro . unsyntax-splicing) (oR5197 macro . unsyntax) (oR5196 macro . unquote-splicing) (oR5195 macro . unquote) (oR5194 macro . _) (oR5193 macro . else) (oR5192 macro . =>) (oR5191 macro . ...) (oR5190 macro . assert) (oR518f macro . endianness) (oR518e macro . delay) (oR518d macro . time) (oR518c macro . do) (oR518b macro . cond) (oR518a macro . let*) (oR5189 macro . let*-values) (oR5188 macro . let-values) (oR5187 macro . identifier-syntax) (oR5186 macro . with-syntax) (oR5185 macro . quasisyntax) (oR5184 macro . quasiquote) (oR5183 macro . syntax-rules) (oR5182 macro . include) (oR5181 macro . define-struct) (oR5180 core-macro . record-constructor-descriptor) (oR517f core-macro . record-type-descriptor) (oR517e macro . case) (oR517d macro . parameterize) (oR517c macro . unless) (oR517b macro . when) (oR517a core-macro . or) (oR5179 core-macro . and) (oR5178 core-macro . if) (oR5177 core-macro . let) (oR5176 core-macro . letrec*) (oR5175 core-macro . letrec) (oR5174 core-macro . type-descriptor) (oR5173 core-macro . case-lambda) (oR5172 core-macro . lambda) (oR5171 core-macro . syntax) (oR5170 core-macro . syntax-case) (oR516f core-macro . quote) (oR516e core-macro . foreign-call) (oR516d letrec-syntax) (oR516c let-syntax) (oR516b set!) (oR516a import) (oR5169 begin) (oR5168 module) (oR5167 define-syntax) (oR5166 define)) values values '#f '#f '#f '#f) (oR2cfe@oR2b3a@install-library 'oR54b7 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . oR5496) (eval-core . oR5495) (set-symbol-value! . oR5494) (symbol-value . oR5493) (gensym . oR5492) (void . oR5491)) '() values values '#f '#f '#f '#f) (oR2cfe@oR2b3a@install-library 'oR54b8 '(mosh) '() '() '() '() '((set-symbol-value! . oR5494) (symbol-value . oR5493) (gensym . oR5492) (regexp? . oR548f) (read-line . oR548e) (ungensym . oR548c) (alist->eq-hash-table . oR548b) (assoc-ref . oR548a) (print . oR5489) (format . oR5488) (host-os . oR5487) (library-path . oR2b19) (standard-library-path . oR5486) (file-newer? . oR5485) (stat-mtime . oR5484) (digit->integer . oR547f) (call-with-string-input-port . oR547e) (call-with-string-io . oR547d) (string-split . oR547c) (bytevector-for-each . oR547b) (string->regexp . oR547a) (rxmatch . oR5479) (regexp-replace-all . oR5478) (hashtable-for-each . oR5477) (set-current-directory! . oR5472) (expand-path . oR5471) (current-directory . oR5470) (p . oR542e) (get-timeofday . oR5415) (get-command-line . oR5414) (sys-display . oR5413) (whereis . oR5412) (register . oR5411) (vm-join! . oR5410) (vm-set-value! . oR540f) (vm? . oR540e) (main-vm? . oR540d) (vm-eval . oR540c) (vm-self . oR540b) (vm-start! . oR540a) (make-vm . oR5409) (mutex-try-lock! . oR5408) (mutex-unlock! . oR5407) (mutex-lock! . oR5406) (mutex? . oR5405) (make-mutex . oR5404) (condition-variable-notify-all! . oR5403) (condition-variable-notify! . oR5402) (condition-variable-wait! . oR5401) (make-condition-variable . oR5400) (mosh-executable-path . oR53ff) (make-file-options . oR53fe) (for-each-with-index . oR53fd) (source-info . oR53fc) (make-compiler-instruction . oR53f7) (make-instruction . oR53f6) (set-source-info! . oR53f5) (bignum? . oR53f4) (fast-equal? . oR53f3) (fasl-read . oR53f2) (fasl-write . oR53f1) (time-usage . oR53f0) (os-constant . oR53ef) (time . oR518d) (include . oR5182)) '() values values '#f '#f '#f '#f) (oR2cfe@oR2b3a@install-library 'oR54b9 '(system) '() '() '() '() '((gensym-prefix-set! . oR548d) (write-to-file . oR5483) (file->sexp-list . oR5482) (file->list . oR5481) (file->string . oR5480) (mosh-cache-dir . oR2903) (call-process . oR5476) (local-tz-offset . oR5475) (microseconds . oR5474) (directory-list . oR5473) (expand-path . oR5471) (%spawn . oR546f) (%waitpid . oR546e) (simple-struct-name . oR546d) (simple-struct-set! . oR546c) (simple-struct-ref . oR546b) (make-simple-struct . oR546a) (simple-struct? . oR5469) (pointer-ref-c-int64 . oR5468) (pointer-ref-c-int32 . oR5467) (pointer-ref-c-int16 . oR5466) (pointer-ref-c-int8 . oR5465) (pointer-ref-c-uint64 . oR5464) (pointer-ref-c-uint32 . oR5463) (pointer-ref-c-uint16 . oR5462) (pointer-ref-c-uint8 . oR5461) (pointer-set-c-uint64! . oR5460) (pointer-set-c-uint32! . oR545f) (pointer-set-c-uint16! . oR545e) (pointer-set-c-uint8! . oR545d) (pointer-set-c-int64! . oR545c) (pointer-set-c-int32! . oR545b) (pointer-set-c-int16! . oR545a) (pointer-set-c-int8! . oR5459) (pointer-set-c-pointer! . oR5458) (pointer-set-c-double! . oR5457) (pointer-set-c-float! . oR5456) (pointer-set-c-long-long! . oR5455) (pointer-set-c-long! . oR5454) (pointer-set-c-int! . oR5453) (pointer-set-c-short! . oR5452) (pointer-set-c-char! . oR5451) (pointer-ref-c-pointer . oR5450) (pointer-ref-c-double . oR544f) (pointer-ref-c-float . oR544e) (pointer-ref-c-unsigned-long-long . oR544d) (pointer-ref-c-signed-long-long . oR544c) (pointer-ref-c-unsigned-long . oR544b) (pointer-ref-c-signed-long . oR544a) (pointer-ref-c-unsigned-int . oR5449) (pointer-ref-c-signed-int . oR5448) (pointer-ref-c-unsigned-short . oR5447) (pointer-ref-c-signed-short . oR5446) (pointer-ref-c-unsigned-char . oR5445) (pointer-ref-c-signed-char . oR5444) (pointer->integer . oR5443) (integer->pointer . oR5442) (pointer? . oR5441) (shared-errno . oR5440) (get-c-address . oR543f) (jit-compiled? . oR543e) (obj->integer . oR543d) (u8-list->c-procedure . oR543c) (%ffi-free-c-callback-trampoline . oR543b) (%ffi-make-c-callback-trampoline . oR543a) (%ffi-free . oR5439) (%ffi-malloc . oR5438) (%ffi-supported? . oR5437) (%ffi-pointer->string . oR5436) (%ffi-call . oR5435) (%ffi-lookup . oR5434) (%ffi-open . oR5433) (null-terminated-utf8->string . oR5432) (null-terminated-bytevector->string . oR5431) (%fork . oR5430) (%pipe . oR542f) (open-output-string . oR542d) (get-output-string . oR542c) (file-stat-ctime . oR542b) (file-stat-atime . oR542a) (file-stat-mtime . oR5429) (file-size-in-bytes . oR5428) (file-writable? . oR5427) (file-executable? . oR5426) (file-readable? . oR5425) (file-regular? . oR5424) (file-symbolic-link? . oR5423) (file-directory? . oR5422) (create-symbolic-link . oR5421) (rename-file . oR5420) (delete-directory . oR541f) (create-directory . oR541e) (create-mosh-cache-dir . oR541d) (get-environment-variables . oR541c) (current-exception-handler . oR541b) (get-environment-variable . oR541a) (join-wraps . oR5419) (id->real-label . oR5418) (same-marks? . oR5417) (same-marks*? . oR5416) (instruction? . oR53fb) (instruction->integer . oR53fa) (instruction->symbol . oR53f9) (closure->list . oR53f8) (disasm . oR53ee) (make-parameter . oR2901) (socket-port . oR53ed) (socket-shutdown . oR53ec) (socket-close . oR53eb) (socket-send . oR53ea) (socket-recv! . oR53e9) (socket-recv . oR53e8) (make-server-socket . oR53e7) (make-client-socket . oR53e6) (socket-accept . oR53e5) (socket? . oR53e4) (parameterize . oR517d)) '() values values '#f '#f '#f '#f)))
(begin (set! oR4ff6@ref (unspecified)) (set! oR4ff8@x* (unspecified)) (set! oR4ffa@add-library-path! (unspecified)) (set! oR4ffc@parse-and-add-library-path (unspecified)) (set! oR4ffe@rpad (unspecified)) (set! oR5000@condition-printer (unspecified)) (set! oR5002@record->field-alist (unspecified)) (set! oR5004@map-with-index (unspecified)) (set! oR5006@repl (unspecified)) (set! oR5008@trace-printer (unspecified)) (set! oR500a@command-line (unspecified)) (set! oR500c@local-library-path (unspecified)) (set! oR500e@load/args (unspecified)) (set! oR5010@load (unspecified)) (set! oR5012@ironscheme-build (unspecified)) (set! oR5014@eval-top-level (unspecified)) (set! oR5016@compile-system-libraries (unspecified)) (set! oR5018@compile (unspecified)) (set! oR501a@compile->closure (unspecified)) (set! oR501c@pre-compile-r6rs-file (unspecified)) (set! oR501e@load-r6rs-top-level (unspecified)) (set! oR5020@load-r6rs-top-level-sexp (unspecified)) (set! oR5022@prefix-inc (unspecified)) (set! oR5024@prefix-inc! (unspecified)) (set! oR4ff6@ref (lambda (oR505f@rtd oR5060@i oR5061@x) (let ((oR5065@val ((record-accessor oR505f@rtd oR5060@i) oR5061@x))) (if (symbol? oR5065@val) (ungensym oR5065@val) oR5065@val)))) (set! oR514d@oR4ff6@ref oR4ff6@ref) (set! oR4ff8@x* '()) (set! oR514e@oR4ff8@x* oR4ff8@x*) (set! oR4ffa@add-library-path! (lambda (oR5067@path) (oR2cee@oR2b1a@library-path (append (oR2cee@oR2b1a@library-path) (list oR5067@path))))) (set! oR514f@oR4ffa@add-library-path! oR4ffa@add-library-path!) (set! oR4ffc@parse-and-add-library-path (lambda (oR5069@paths oR506a@message) (let ((oR506e@separator '#f)) (begin (set! oR506e@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((oR506f@t oR5069@paths)) (if oR506f@t ((lambda (oR5071@paths) (for-each (lambda (oR5073@path) (if (file-exists? oR5073@path) (oR4ffa@add-library-path! (expand-path oR5073@path)) (format (current-error-port) oR506a@message oR5073@path))) (string-split oR5071@paths oR506e@separator))) oR506f@t) (void))))))) (set! oR5150@oR4ffc@parse-and-add-library-path oR4ffc@parse-and-add-library-path) (set! oR4ffe@rpad (lambda (oR5075@str oR5076@pad oR5077@n) (let ((oR507b@rest (- oR5077@n (string-length (format '"~a" oR5075@str))))) (let oR5081@loop ((oR507d@rest oR507b@rest) (oR507e@ret (format '"~a" oR5075@str))) (if (<= oR507d@rest '0) oR507e@ret (oR5081@loop (- oR507d@rest '1) (string-append oR507e@ret oR5076@pad))))))) (set! oR5151@oR4ffe@rpad oR4ffe@rpad) (set! oR5000@condition-printer (lambda (oR5083@e oR5084@port) (let ((oR5088@max-condition-len '#f)) (begin (set! oR5088@max-condition-len (apply max (map (lambda (oR5099@c) (string-length (symbol->string (record-type-name (record-rtd oR5099@c))))) (simple-conditions oR5083@e)))) (begin (display '" Condition components:\n" oR5084@port) (for-each-with-index (lambda (oR5089@i oR508a@x) (let ((oR508d@rtd (record-rtd oR508a@x)) (oR508e@fields-alist (oR5002@record->field-alist oR508a@x))) (begin (format oR5084@port '" ~d. ~a" (+ oR5089@i '1) (oR4ffe@rpad (symbol->string (record-type-name oR508d@rtd)) '" " oR5088@max-condition-len)) (if (null? oR508e@fields-alist) (newline oR5084@port) (void)) (let oR5095@loop ((oR5091@first '#t) (oR5092@fields-alist oR508e@fields-alist)) (if (null? oR5092@fields-alist) '() (let ((oR5097@field (car oR5092@fields-alist))) (begin (if (not oR5091@first) (display (oR4ffe@rpad '"" '" " (+ '4 oR5088@max-condition-len)) oR5084@port) (void)) (display '"       " oR5084@port) (display (car oR5097@field) oR5084@port) (display '": " oR5084@port) (write (cdr oR5097@field) oR5084@port) (newline oR5084@port) (oR5095@loop '#f (cdr oR5092@fields-alist))))))))) (simple-conditions oR5083@e))))))) (set! oR5152@oR5000@condition-printer oR5000@condition-printer) (set! oR5002@record->field-alist (lambda (oR509b@r) (let ((oR509e@ref '#f)) (begin (set! oR509e@ref (lambda (oR50a9@rtd oR50aa@i oR50ab@x) (let ((oR50af@val ((record-accessor oR50a9@rtd oR50aa@i) oR50ab@x))) (if (symbol? oR50af@val) (ungensym oR50af@val) oR50af@val)))) (let oR50a3@loop ((oR509f@ret '()) (oR50a0@rtd (record-rtd oR509b@r))) (if oR50a0@rtd (oR50a3@loop (append oR509f@ret (oR5004@map-with-index (lambda (oR50a5@i oR50a6@field) (cons oR50a6@field (oR509e@ref oR50a0@rtd oR50a5@i oR509b@r))) (vector->list (record-type-field-names oR50a0@rtd)))) (record-type-parent oR50a0@rtd)) oR509f@ret)))))) (set! oR5153@oR5002@record->field-alist oR5002@record->field-alist) (set! oR5004@map-with-index (lambda (oR50b1@proc oR50b2@lst) (let oR50bb@loop ((oR50b5@i '0) (oR50b6@lst oR50b2@lst) (oR50b7@ret '())) (if (null? oR50b6@lst) (reverse oR50b7@ret) (oR50bb@loop (+ oR50b5@i '1) (cdr oR50b6@lst) (cons (oR50b1@proc oR50b5@i (car oR50b6@lst)) oR50b7@ret)))))) (set! oR5154@oR5004@map-with-index oR5004@map-with-index) (set! oR5006@repl (lambda oR50bd@x (let ((oR50c0@rec '#f)) (begin (set! oR50c0@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (oR50c3@oR50c1) (lambda () (with-exception-handler (lambda (oR50c5@e) ((call/cc (lambda (oR50c7@oR50c2) (oR50c3@oR50c1 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? oR50c5@e) (oR5000@condition-printer oR50c5@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" oR50c5@e))) (oR50c7@oR50c2 (lambda () (raise-continuable oR50c5@e)))))))))) (lambda () (let oR50cd@loop ((oR50c9@line (get-line (current-input-port))) (oR50ca@accum '"")) (let ((oR50d0@parentheses-ok? '#f) (oR50d2@eval-string-print '#f)) (begin (set! oR50d0@parentheses-ok? (lambda (oR50d7@text) (let oR50df@loop ((oR50d9@chars (string->list oR50d7@text)) (oR50da@p0 '0) (oR50db@p1 '0)) (if (null? oR50d9@chars) (= '0 oR50da@p0 oR50db@p1) (let ((oR50e1@t (car oR50d9@chars))) (if (memv oR50e1@t '(#\()) (oR50df@loop (cdr oR50d9@chars) (+ oR50da@p0 '1) oR50db@p1) (if (memv oR50e1@t '(#\))) (oR50df@loop (cdr oR50d9@chars) (- oR50da@p0 '1) oR50db@p1) (if (memv oR50e1@t '(#\[)) (oR50df@loop (cdr oR50d9@chars) oR50da@p0 (+ oR50db@p1 '1)) (if (memv oR50e1@t '(#\])) (oR50df@loop (cdr oR50d9@chars) oR50da@p0 (- oR50db@p1 '1)) (oR50df@loop (cdr oR50d9@chars) oR50da@p0 oR50db@p1)))))))))) (set! oR50d2@eval-string-print (lambda (oR50d5@text) (if (not (or (string=? '"\n" oR50d5@text) (= '0 (string-length oR50d5@text)))) (write (oR5014@eval-top-level (call-with-port (open-string-input-port oR50d5@text) read))) (void)))) (if (eof-object? oR50c9@line) (begin (oR50d2@eval-string-print oR50ca@accum) (exit)) (let ((oR50d3@current (string-append oR50ca@accum oR50c9@line))) (if (oR50d0@parentheses-ok? oR50d3@current) (oR50d2@eval-string-print oR50d3@current) (oR50cd@loop (get-line (current-input-port)) oR50d3@current))))))))))))) (newline) (oR50c0@rec)))) (oR50c0@rec))))) (set! oR5155@oR5006@repl oR5006@repl) (set! oR5008@trace-printer (oR2a24@oR2902@make-parameter write)) (set! oR5156@oR5008@trace-printer oR5008@trace-printer) (set! oR500a@command-line (oR2a24@oR2902@make-parameter (get-command-line))) (set! oR5157@oR500a@command-line oR500a@command-line) (set! oR500c@local-library-path (lambda (oR50e3@filename) (oR2cee@oR2b1a@library-path))) (set! oR5158@oR500c@local-library-path oR500c@local-library-path) (set! oR500e@load/args (lambda (oR50e5@filename . oR50e7@args) (begin (apply oR501e@load-r6rs-top-level oR50e5@filename 'load oR50e7@args) (void)))) (set! oR5159@oR500e@load/args oR500e@load/args) (set! oR5010@load (lambda (oR50e9@filename) (begin (apply oR501e@load-r6rs-top-level oR50e9@filename 'load (oR500a@command-line)) (void)))) (set! oR515a@oR5010@load oR5010@load) (set! oR5012@ironscheme-build (lambda () (oR5010@load '"ironscheme-buildscript.ss"))) (set! oR515b@oR5012@ironscheme-build oR5012@ironscheme-build) (set! oR5014@eval-top-level (lambda (oR50eb@x) (oR4c1c@oR31b2@eval oR50eb@x (oR4c33@oR31e0@interaction-environment)))) (set! oR515c@oR5014@eval-top-level oR5014@eval-top-level) (set! oR5016@compile-system-libraries (lambda () (oR5014@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! oR515d@oR5016@compile-system-libraries oR5016@compile-system-libraries) (set! oR5018@compile (lambda (oR50ed@filename) (oR501e@load-r6rs-top-level oR50ed@filename 'compile))) (set! oR515e@oR5018@compile oR5018@compile) (set! oR501a@compile->closure (lambda (oR50ef@filename) (oR501e@load-r6rs-top-level oR50ef@filename 'closure))) (set! oR515f@oR501a@compile->closure oR501a@compile->closure) (set! oR501c@pre-compile-r6rs-file (lambda (oR50f1@filename) (oR501e@load-r6rs-top-level oR50f1@filename 'compile))) (set! oR5160@oR501c@pre-compile-r6rs-file oR501c@pre-compile-r6rs-file) (set! oR501e@load-r6rs-top-level (lambda (oR50f3@filename oR50f4@how . oR50f7@args) (begin (oR2cee@oR2b1a@library-path (oR500c@local-library-path oR50f3@filename)) (let ((oR50f9@x* (with-input-from-file oR50f3@filename (lambda () (let oR50fb@f () (let ((oR50fd@x (oR2a16@oR28e6@read-annotated))) (if (eof-object? oR50fd@x) '() (cons oR50fd@x (oR50fb@f))))))))) (let ((oR50ff@t oR50f4@how)) (if (memv oR50ff@t '(closure)) (oR4c32@oR31de@pre-compile-r6rs-top-level oR50f9@x*) (if (memv oR50ff@t '(load)) (begin (oR500a@command-line (cons oR50f3@filename (car oR50f7@args))) (oR2a25@oR2904@mosh-cache-dir (create-mosh-cache-dir)) (if (oR2a25@oR2904@mosh-cache-dir) (gensym-prefix-set! (oR5024@prefix-inc! (string-append (oR2a25@oR2904@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (oR5101@file) ((call/cc (lambda (oR5105@oR5103) (lambda () (with-exception-handler (lambda (oR5107@c) ((call/cc (lambda (oR5109@oR5104) (oR5105@oR5103 (lambda () (if '#t '#t (oR5109@oR5104 (lambda () (raise-continuable oR5107@c)))))))))) (lambda () (delete-file (string-append (oR2a25@oR2904@mosh-cache-dir) '"/" oR5101@file))))))))) (directory-list (oR2a25@oR2904@mosh-cache-dir))) (void)) (let ((oR510b@compiled (oR4c31@oR31dc@compile-r6rs-top-level oR50f9@x*))) (begin (if (and (oR2a25@oR2904@mosh-cache-dir) (not (symbol-value '%disable-acc))) (oR2cf2@oR2b22@serialize-all oR2a1f@oR28f8@serialize-library oR2a7b@oR2a34@compile-core-expr) (void)) (oR510b@compiled)))) (if (memv oR50ff@t '(compile)) (begin (oR4c31@oR31dc@compile-r6rs-top-level oR50f9@x*) (oR2cf2@oR2b22@serialize-all oR2a1f@oR28f8@serialize-library oR2a7b@oR2a34@compile-core-expr)) (if '#f '#f (void)))))))))) (set! oR5161@oR501e@load-r6rs-top-level oR501e@load-r6rs-top-level) (set! oR5020@load-r6rs-top-level-sexp (lambda (oR510d@import-spec oR510e@thunk) (let ((oR5119@oR5112 oR2cee@oR2b1a@library-path) (oR511a@oR5114 oR2a25@oR2904@mosh-cache-dir) (oR511b@oR5116 (oR500c@local-library-path '"")) (oR511c@oR5118 (create-mosh-cache-dir))) (let ((oR5121@swap (lambda () (begin (let ((oR5123@t (oR5119@oR5112))) (begin (oR5119@oR5112 oR511b@oR5116) (set! oR511b@oR5116 oR5123@t))) (let ((oR5125@t (oR511a@oR5114))) (begin (oR511a@oR5114 oR511c@oR5118) (set! oR511c@oR5118 oR5125@t))))))) (dynamic-wind oR5121@swap (lambda () (begin (if (oR2a25@oR2904@mosh-cache-dir) (gensym-prefix-set! (oR5024@prefix-inc! (string-append (oR2a25@oR2904@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((oR512b@oR5128 oR500a@command-line) (oR512c@oR512a '())) (let ((oR512f@swap (lambda () (let ((oR5131@t (oR512b@oR5128))) (begin (oR512b@oR5128 oR512c@oR512a) (set! oR512c@oR512a oR5131@t)))))) (dynamic-wind oR512f@swap (lambda () ((oR4c31@oR31dc@compile-r6rs-top-level (list (cons 'import oR510d@import-spec) (list oR510e@thunk))))) oR512f@swap))))) oR5121@swap))))) (set! oR5162@oR5020@load-r6rs-top-level-sexp oR5020@load-r6rs-top-level-sexp) (set! oR5022@prefix-inc (lambda (oR5133@prefix-string) (let ((oR5135@prefix (symbol->string oR5133@prefix-string))) (let ((oR5137@len (string-length oR5135@prefix))) (let oR513f@loop ((oR5139@i (- oR5137@len '1)) (oR513a@carry? '#t) (oR513b@accum '())) (if (< oR5139@i '0) (string->symbol (list->string (if oR513a@carry? (cons '#\a oR513b@accum) oR513b@accum))) (if oR513a@carry? (let ((oR5141@next-integer (+ '1 (char->integer (string-ref oR5135@prefix oR5139@i))))) (if (= oR5141@next-integer '123) (oR513f@loop (- oR5139@i '1) '#f (cons '#\A oR513b@accum)) (if (= oR5141@next-integer '91) (oR513f@loop (- oR5139@i '1) '#t (cons '#\a oR513b@accum)) (oR513f@loop (- oR5139@i '1) '#f (cons (integer->char oR5141@next-integer) oR513b@accum))))) (oR513f@loop (- oR5139@i '1) '#f (cons (string-ref oR5135@prefix oR5139@i) oR513b@accum))))))))) (set! oR5163@oR5022@prefix-inc oR5022@prefix-inc) (set! oR5024@prefix-inc! (lambda (oR5143@file) (begin (if (not (file-exists? oR5143@file)) (call-with-output-file oR5143@file (lambda (oR5145@port) (write 'd oR5145@port))) (void)) (let ((oR5147@prefix (call-with-input-file oR5143@file read))) (if (main-vm?) (let ((oR5149@next-prefix (oR5022@prefix-inc oR5147@prefix))) (begin (call-with-port (open-file-output-port oR5143@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (oR514b@port) (write oR5149@next-prefix oR514b@port))) oR5147@prefix)) oR5147@prefix))))) (set! oR5164@oR5024@prefix-inc! oR5024@prefix-inc!) (begin (oR2cf3@oR2b24@current-precompiled-library-loader oR2a20@oR28fa@load-serialized-library) (set-symbol-value! 'load oR5010@load) (set-symbol-value! 'pre-compile-r6rs-file oR501c@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs oR5014@eval-top-level) (set-symbol-value! 'int-env-syms oR4c13@oR31a0@interaction-environment-symbols) (set-symbol-value! 'expanded2core oR2a7a@oR2a32@expanded->core) (set-symbol-value! 'trace-printer oR5008@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'invoke-library-by-name oR2d03@oR2b44@invoke-library-by-name) (set-symbol-value! 'create-non-continuable-violation (lambda (oR5025@c) (condition (oR4f53@oR4d5d@make-non-continuable-violation) (oR4f49@oR4d44@make-who-condition 'raise) (oR4f0d@oR4ca5@make-message-condition '"returned from non-continuable exception") (oR4f3f@oR4d29@make-irritants-condition (list oR5025@c))))) (oR4ffc@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (oR4ffc@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (oR4ffa@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (oR4ffa@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (oR4ffa@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((oR5027@prefix (lambda (oR5029@ext oR502a@ls) (append (map (lambda (oR502d@x) (string-append oR5029@ext oR502d@x)) oR502a@ls) oR502a@ls)))) (oR2cef@oR2b1c@library-extensions (oR5027@prefix '".mosh" (oR2cef@oR2b1c@library-extensions)))) (current-exception-handler (lambda (oR502f@c) (begin (if (condition? oR502f@c) (oR5000@condition-printer oR502f@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" oR502f@c)) oR502f@c))) (if ((call/cc (lambda (oR5033@oR5031) (lambda () (with-exception-handler (lambda (oR5035@c) ((call/cc (lambda (oR5037@oR5032) (oR5033@oR5031 (lambda () (if '#t '#f (oR5037@oR5032 (lambda () (raise-continuable oR5035@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (oR5020@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (oR500a@command-line)) (let ((oR5041@oR503a oR500a@command-line) (oR5042@oR503c oR2a25@oR2904@mosh-cache-dir) (oR5043@oR503e '()) (oR5044@oR5040 (create-mosh-cache-dir))) (let ((oR5049@swap (lambda () (begin (let ((oR504b@t (oR5041@oR503a))) (begin (oR5041@oR503a oR5043@oR503e) (set! oR5043@oR503e oR504b@t))) (let ((oR504d@t (oR5042@oR503c))) (begin (oR5042@oR503c oR5044@oR5040) (set! oR5044@oR5040 oR504d@t))))))) (dynamic-wind oR5049@swap (lambda () (begin (if (oR2a25@oR2904@mosh-cache-dir) (gensym-prefix-set! (oR5024@prefix-inc! (string-append (oR2a25@oR2904@mosh-cache-dir) '"/prefix.txt"))) (void)) (oR5006@repl))) oR5049@swap))) (begin (oR2cee@oR2b1a@library-path (oR500c@local-library-path (car (oR500a@command-line)))) (set! oR4ff8@x* (with-input-from-file (car (oR500a@command-line)) (lambda () (let oR504f@f () (let ((oR5051@x (oR2a16@oR28e6@read-annotated))) (if (eof-object? oR5051@x) '() (cons oR5051@x (oR504f@f)))))))) (oR500a@command-line (cons (car (oR500a@command-line)) (cdr (oR500a@command-line)))) (oR2a25@oR2904@mosh-cache-dir (create-mosh-cache-dir)) (if (oR2a25@oR2904@mosh-cache-dir) (gensym-prefix-set! (oR5024@prefix-inc! (string-append (oR2a25@oR2904@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (oR5053@file) ((call/cc (lambda (oR5057@oR5055) (lambda () (with-exception-handler (lambda (oR5059@c) ((call/cc (lambda (oR505b@oR5056) (oR5057@oR5055 (lambda () (if '#t '#t (oR505b@oR5056 (lambda () (raise-continuable oR5059@c)))))))))) (lambda () (delete-file (string-append (oR2a25@oR2904@mosh-cache-dir) '"/" oR5053@file))))))))) (directory-list (oR2a25@oR2904@mosh-cache-dir))) (void)) (let ((oR505d@compiled (oR4c31@oR31dc@compile-r6rs-top-level oR4ff8@x*))) (begin (if (and (oR2a25@oR2904@mosh-cache-dir) (not (symbol-value '%disable-acc))) (oR2cf2@oR2b22@serialize-all oR2a1f@oR28f8@serialize-library oR2a7b@oR2a34@compile-core-expr) (void)) (oR505d@compiled))))))))
