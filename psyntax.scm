;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! f587@library-file-path->cache-path (unspecified)) (set! f589@read-annotated (unspecified)) (set! f58b@annotation-stripped (unspecified)) (set! f58d@annotation? (unspecified)) (set! f58f@annotation-source (unspecified)) (set! f591@annotation-expression (unspecified)) (set! f593@scm->fasl (unspecified)) (set! f595@fasl-save (unspecified)) (set! f597@fasl-load (unspecified)) (set! f599@verbose? (unspecified)) (set! f59b@serialize-library (unspecified)) (set! f59d@load-serialized-library (unspecified)) (set! f59f@make-record-printer (unspecified)) (set! f5a1@compile-core (unspecified)) (set! f5a3@read-library-source-file (unspecified)) (set! f5a5@make-parameter (unspecified)) (set! f5a7@mosh-cache-dir (unspecified)) (set! f63d@file-options-spec (unspecified)) (set! f587@library-file-path->cache-path (lambda (f63e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (f644@f641 f645@f643) (let ((f648@extract f645@f643) (f649@p f644@f641)) (letrec* ((f64d@display-hex (lambda (f656@n) (if (<= '0 f656@n '9) (display f656@n f649@p) (display (integer->char (+ (char->integer '#\a) (- f656@n '10))) f649@p))))) (begin (let f650@f ((f64e@ls (string-split f63e@x '#\/))) (if (not (null? f64e@ls)) (begin (display '"_" f649@p) (for-each (lambda (f652@c) (if (or (char<=? '#\a f652@c '#\z) (char<=? '#\A f652@c '#\Z) (char<=? '#\0 f652@c '#\9) (memv f652@c '(#\- #\. #\_ #\~))) (display f652@c f649@p) (begin (display '"%" f649@p) (let ((f654@n (char->integer f652@c))) (begin (f64d@display-hex (quotient f654@n '16)) (f64d@display-hex (remainder f654@n '16))))))) (string->list (car f64e@ls))) (f650@f (cdr f64e@ls))) (void))) (f648@extract)))))))) (set! f6b8@f587@library-file-path->cache-path f587@library-file-path->cache-path) (set! f589@read-annotated read) (set! f6b9@f589@read-annotated f589@read-annotated) (set! f58b@annotation-stripped (lambda (f658@x) (f591@annotation-expression f658@x))) (set! f6ba@f58b@annotation-stripped f58b@annotation-stripped) (set! f58d@annotation? (lambda (f65a@x) (source-info f65a@x))) (set! f6bb@f58d@annotation? f58d@annotation?) (set! f58f@annotation-source (lambda (f65c@x) (source-info f65c@x))) (set! f6bc@f58f@annotation-source f58f@annotation-source) (set! f591@annotation-expression (lambda (f65e@x) (if (pair? f65e@x) (cons (car f65e@x) (cdr f65e@x)) (if (procedure? f65e@x) (set-source-info! f65e@x '#f) f65e@x)))) (set! f6bd@f591@annotation-expression f591@annotation-expression) (set! f593@scm->fasl (lambda (f660@filename) (string-append (f5a7@mosh-cache-dir) '"/" (f587@library-file-path->cache-path f660@filename) '".mosh-fasl"))) (set! f6be@f593@scm->fasl f593@scm->fasl) (set! f595@fasl-save (lambda (f662@filename f663@obj) (call-with-port (open-file-output-port f662@filename) (lambda (f666@port) ((symbol-value 'fasl-write!) f663@obj f666@port))))) (set! f6bf@f595@fasl-save f595@fasl-save) (set! f597@fasl-load (lambda (f668@filename) (call-with-port (open-file-input-port f668@filename) (symbol-value 'fasl-read!)))) (set! f6c0@f597@fasl-load f597@fasl-load) (set! f599@verbose? (symbol-value '%verbose)) (set! f6c1@f599@verbose? f599@verbose?) (set! f59b@serialize-library (lambda (f66a@filename f66b@obj) (begin (if f599@verbose? (format (current-error-port) '"serialize-library ~a\n..." f66a@filename) (void)) (let ((f66e@expanded2core (symbol-value 'expanded2core))) (let ((f670@compile (symbol-value 'compile-w/o-halt))) (let ((f672@code f66b@obj)) (let ((f674@pivot (cddddr (cddddr f672@code)))) (let ((f676@visit (f670@compile (f66e@expanded2core (car f674@pivot))))) (begin (set-car! f674@pivot f676@visit) (let ((f678@pivot (cdr f674@pivot))) (let ((f67a@invoke (f670@compile (f66e@expanded2core (car f678@pivot))))) (set-car! f678@pivot f67a@invoke))))))))) (let ((f67c@fasl-file (f593@scm->fasl f66a@filename))) (begin (if (file-exists? f67c@fasl-file) (delete-file f67c@fasl-file) (void)) ((call/cc (lambda (f680@f67e) (lambda () (with-exception-handler (lambda (f682@c) ((call/cc (lambda (f684@f67f) (f680@f67e (lambda () (if '#t (begin (if f599@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" f66a@filename) (void)) (if (file-exists? f67c@fasl-file) (delete-file f67c@fasl-file) (void)) '#f) (f684@f67f (lambda () (raise-continuable f682@c)))))))))) (lambda () (f595@fasl-save f67c@fasl-file f66b@obj)))))))))))) (set! f6c2@f59b@serialize-library f59b@serialize-library) (set! f59d@load-serialized-library (lambda (f686@filename f687@obj) (and (f5a7@mosh-cache-dir) (let ((f68a@fasl-file (f593@scm->fasl f686@filename))) (if (and (file-exists? f68a@fasl-file) ((symbol-value 'file-newer?) f68a@fasl-file f686@filename)) (let ((f68c@expanded2core (symbol-value 'expanded2core))) (let ((f68e@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((f690@code (f597@fasl-load f68a@fasl-file))) (let ((f692@pivot (cddddr (cddddr f690@code)))) (let ((f694@visit (car f692@pivot))) (let ((f696@visit-proc (lambda () (f68e@eval-compiled-core f694@visit)))) (begin (set-car! f692@pivot f696@visit-proc) (let ((f698@pivot (cdr f692@pivot))) (let ((f69a@invoke (car f698@pivot))) (begin (set-car! f698@pivot (lambda () (f68e@eval-compiled-core f69a@invoke))) (apply f687@obj f690@code))))))))))) '#f))))) (set! f6c3@f59d@load-serialized-library f59d@load-serialized-library) (set! f59f@make-record-printer (lambda (f69c@name f69d@printer) (lambda f6a0@x (begin (display '"record printer") (for-each display f6a0@x))))) (set! f6c4@f59f@make-record-printer f59f@make-record-printer) (set! f5a1@compile-core (lambda f6a2@x (apply error 'comile-core '"not implementated" f6a2@x))) (set! f6c5@f5a1@compile-core f5a1@compile-core) (set! f5a3@read-library-source-file (lambda (f6a4@file-name) (with-input-from-file f6a4@file-name f589@read-annotated))) (set! f6c6@f5a3@read-library-source-file f5a3@read-library-source-file) (set! f5a5@make-parameter (lambda f6b4 (let ((f6b5 (length f6b4))) (if (= f6b5 '1) (apply (lambda (f6a6@x) (f5a5@make-parameter f6a6@x (lambda (f6a8@x) f6a8@x))) f6b4) (if (= f6b5 '2) (apply (lambda (f6aa@x f6ab@fender) (let ((f6ae@x (f6ab@fender f6aa@x))) (lambda f6b2 (let ((f6b3 (length f6b2))) (if (= f6b3 '0) (apply (lambda () f6ae@x) f6b2) (if (= f6b3 '1) (apply (lambda (f6b0@v) (set! f6ae@x (f6ab@fender f6b0@v))) f6b2) (error 'apply '"invalid arg count"))))))) f6b4) (error 'apply '"invalid arg count")))))) (set! f6c7@f5a5@make-parameter f5a5@make-parameter) (set! f5a7@mosh-cache-dir (f5a5@make-parameter '#f)) (set! f6c8@f5a7@mosh-cache-dir f5a7@mosh-cache-dir) (set! f63d@file-options-spec (lambda (f6b6@x) f6b6@x)) (set! f6c9@f63d@file-options-spec f63d@file-options-spec) (void))
(begin (set! f6cf@current-primitive-locations (unspecified)) (set! f6d1@mutable? (unspecified)) (set! f6d3@rewriter (unspecified)) (set! f6d5@expanded->core (unspecified)) (set! f6d7@compile-core-expr (unspecified)) (set! f6d9@pretty-print (unspecified)) (set! f6db@compile-core-expr-to-port (unspecified)) (set! f6cf@current-primitive-locations (f6c7@f5a5@make-parameter (lambda (f6dc@x) '#f) (lambda (f6de@p) f6de@p))) (set! f71a@f6cf@current-primitive-locations f6cf@current-primitive-locations) (set! f6d1@mutable? (lambda (f6e0@x) (or (pair? f6e0@x) (vector? f6e0@x) (hashtable? f6e0@x)))) (set! f71b@f6d1@mutable? f6d1@mutable?) (set! f6d3@rewriter (lambda (f6e2@quote-hack?) (letrec* ((f6e5@f (lambda (f6e6@x) (if (pair? f6e6@x) (let ((f6e8@t (car f6e6@x))) (if (memv f6e8@t '(quote)) (if (and f6e2@quote-hack? (f6d1@mutable? (cadr f6e6@x))) (let ((f6ea@g (gensym))) (begin (set-symbol-value! f6ea@g (cadr f6e6@x)) f6ea@g)) f6e6@x) (if (memv f6e8@t '(case-lambda)) (cons 'case-lambda (map (lambda (f6ec@x) (cons (car f6ec@x) (map f6e5@f (cdr f6ec@x)))) (cdr f6e6@x))) (if (memv f6e8@t '(lambda)) (cons* 'lambda (cadr f6e6@x) (map f6e5@f (cddr f6e6@x))) (if (memv f6e8@t '(letrec)) (let ((f6ee@bindings (cadr f6e6@x)) (f6ef@body* (cddr f6e6@x))) (let ((f6f2@lhs* (map car f6ee@bindings)) (f6f3@rhs* (map cadr f6ee@bindings))) (cons* 'letrec (map list f6f2@lhs* (map f6e5@f f6f3@rhs*)) (map f6e5@f f6ef@body*)))) (if (memv f6e8@t '(letrec*)) (let ((f6f6@bindings (cadr f6e6@x)) (f6f7@body* (cddr f6e6@x))) (let ((f6fa@lhs* (map car f6f6@bindings)) (f6fb@rhs* (map cadr f6f6@bindings))) (cons* 'letrec* (map list f6fa@lhs* (map f6e5@f f6fb@rhs*)) (map f6e5@f f6f7@body*)))) (if (memv f6e8@t '(library-letrec*)) (let ((f6fe@name (cadr f6e6@x)) (f6ff@x (cdr f6e6@x))) (let ((f702@bindings (cadr f6ff@x)) (f703@body* (cddr f6ff@x))) (let ((f706@lhs* (map car f702@bindings)) (f707@lhs** (map cadr f702@bindings)) (f708@rhs* (map caddr f702@bindings))) (cons* 'library-letrec* f6fe@name (map list f706@lhs* f707@lhs** (map f6e5@f f708@rhs*)) (map f6e5@f f703@body*))))) (if (memv f6e8@t '(begin)) (cons 'begin (map f6e5@f (cdr f6e6@x))) (if (memv f6e8@t '(set!)) (list 'set! (cadr f6e6@x) (f6e5@f (caddr f6e6@x))) (if (memv f6e8@t '(primitive)) (let ((f70c@op (cadr f6e6@x))) (let ((f70e@t ((f6cf@current-primitive-locations) f70c@op))) (if f70e@t ((lambda (f710@loc) f710@loc) f70e@t) f70c@op))) (if (memv f6e8@t '(define)) f6e6@x (if (list? f6e6@x) (map f6e5@f f6e6@x) (error 'rewrite '"invalid form ~s ~s" f6e6@x (list? f6e6@x)))))))))))))) f6e6@x)))) f6e5@f))) (set! f71c@f6d3@rewriter f6d3@rewriter) (set! f6d5@expanded->core (lambda (f712@x) ((f6d3@rewriter '#f) f712@x))) (set! f71d@f6d5@expanded->core f6d5@expanded->core) (set! f6d7@compile-core-expr (lambda (f714@x) ((f6d3@rewriter '#f) f714@x))) (set! f71e@f6d7@compile-core-expr f6d7@compile-core-expr) (set! f6d9@pretty-print write) (set! f71f@f6d9@pretty-print f6d9@pretty-print) (set! f6db@compile-core-expr-to-port (lambda (f716@x f717@p) (f6d9@pretty-print ((f6d3@rewriter '#f) f716@x) f717@p))) (set! f720@f6db@compile-core-expr-to-port f6db@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! f76f@make-collection (unspecified)) (set! f771@current-library-collection (unspecified)) (set! f773@rp (unspecified)) (set! f77d@library? (unspecified)) (set! f77f@library-id (unspecified)) (set! f781@set-library-id! (unspecified)) (set! f783@library-name (unspecified)) (set! f785@set-library-name! (unspecified)) (set! f787@library-version (unspecified)) (set! f789@set-library-version! (unspecified)) (set! f78b@library-imp* (unspecified)) (set! f78d@set-library-imp*! (unspecified)) (set! f78f@library-vis* (unspecified)) (set! f791@set-library-vis*! (unspecified)) (set! f793@library-inv* (unspecified)) (set! f795@set-library-inv*! (unspecified)) (set! f797@library-subst (unspecified)) (set! f799@set-library-subst! (unspecified)) (set! f79b@library-env (unspecified)) (set! f79d@set-library-env! (unspecified)) (set! f79f@library-visit-state (unspecified)) (set! f7a1@set-library-visit-state! (unspecified)) (set! f7a3@library-invoke-state (unspecified)) (set! f7a5@set-library-invoke-state! (unspecified)) (set! f7a7@library-visit-code (unspecified)) (set! f7a9@set-library-visit-code! (unspecified)) (set! f7ab@library-invoke-code (unspecified)) (set! f7ad@set-library-invoke-code! (unspecified)) (set! f7af@library-visible? (unspecified)) (set! f7b1@set-library-visible?! (unspecified)) (set! f7b3@library-source-file-name (unspecified)) (set! f7b5@set-library-source-file-name! (unspecified)) (set! f7b7@dummy (unspecified)) (set! f7b9@find-dependencies (unspecified)) (set! f7bb@find-library-by (unspecified)) (set! f7bd@library-path (unspecified)) (set! f7bf@library-extensions (unspecified)) (set! f7c1@library-name->file-name (unspecified)) (set! f7c3@file-locator (unspecified)) (set! f7c5@serialize-all (unspecified)) (set! f7c7@current-precompiled-library-loader (unspecified)) (set! f7c9@try-load-from-file (unspecified)) (set! f7cb@library-loader (unspecified)) (set! f7cd@current-library-expander (unspecified)) (set! f7cf@external-pending-libraries (unspecified)) (set! f7d1@find-external-library (unspecified)) (set! f7d3@find-library-by-name (unspecified)) (set! f7d5@library-exists? (unspecified)) (set! f7d7@find-library-by-spec/die (unspecified)) (set! f7d9@label->binding-table (unspecified)) (set! f7db@install-library-record (unspecified)) (set! f7dd@install-library (unspecified)) (set! f7df@imported-label->binding (unspecified)) (set! f7e1@invoke-library (unspecified)) (set! f7e3@visit-library (unspecified)) (set! f7e5@invoke-library-by-spec (unspecified)) (set! f7e7@installed-libraries (unspecified)) (set! f7e9@library-spec (unspecified)) (set! f76f@make-collection (lambda () (let ((f7ea@set '())) (letrec* ((f7ed@set-cons (lambda (f7f2@x f7f3@ls) (if (memq f7f2@x f7f3@ls) f7f3@ls (cons f7f2@x f7f3@ls))))) (lambda f7f0 (let ((f7f1 (length f7f0))) (if (= f7f1 '0) (apply (lambda () f7ea@set) f7f0) (if (= f7f1 '1) (apply (lambda (f7ee@x) (set! f7ea@set (f7ed@set-cons f7ee@x f7ea@set))) f7f0) (error 'apply '"invalid arg count"))))))))) (set! f95e@f76f@make-collection f76f@make-collection) (set! f771@current-library-collection (f6c7@f5a5@make-parameter (f76f@make-collection) (lambda (f7f6@x) (begin (if (not (procedure? f7f6@x)) (assertion-violation 'current-library-collection '"not a procedure" f7f6@x) (void)) f7f6@x)))) (set! f95f@f771@current-library-collection f771@current-library-collection) (set! f773@rp (f6c4@f59f@make-record-printer 'library (lambda (f7f8@x f7f9@p f7fa@wr) (begin (if (not (f77d@library? f7f8@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (f787@library-version f7f8@x)) (f783@library-name f7f8@x) (append (f783@library-name f7f8@x) (list (f787@library-version f7f8@x))))) f7f9@p))))) (set! f960@f773@rp f773@rp) (set! f77d@library? (lambda (f7fe@x) (and (simple-struct? f7fe@x) (eq? (simple-struct-name f7fe@x) 'library)))) (set! f961@f77d@library? f77d@library?) (set! f77f@library-id (lambda (f800@x) (simple-struct-ref f800@x '0))) (set! f962@f77f@library-id f77f@library-id) (set! f781@set-library-id! (lambda (f802@x f803@val) (simple-struct-set! f802@x '0 f803@val))) (set! f963@f781@set-library-id! f781@set-library-id!) (set! f783@library-name (lambda (f806@x) (simple-struct-ref f806@x '1))) (set! f964@f783@library-name f783@library-name) (set! f785@set-library-name! (lambda (f808@x f809@val) (simple-struct-set! f808@x '1 f809@val))) (set! f965@f785@set-library-name! f785@set-library-name!) (set! f787@library-version (lambda (f80c@x) (simple-struct-ref f80c@x '2))) (set! f966@f787@library-version f787@library-version) (set! f789@set-library-version! (lambda (f80e@x f80f@val) (simple-struct-set! f80e@x '2 f80f@val))) (set! f967@f789@set-library-version! f789@set-library-version!) (set! f78b@library-imp* (lambda (f812@x) (simple-struct-ref f812@x '3))) (set! f968@f78b@library-imp* f78b@library-imp*) (set! f78d@set-library-imp*! (lambda (f814@x f815@val) (simple-struct-set! f814@x '3 f815@val))) (set! f969@f78d@set-library-imp*! f78d@set-library-imp*!) (set! f78f@library-vis* (lambda (f818@x) (simple-struct-ref f818@x '4))) (set! f96a@f78f@library-vis* f78f@library-vis*) (set! f791@set-library-vis*! (lambda (f81a@x f81b@val) (simple-struct-set! f81a@x '4 f81b@val))) (set! f96b@f791@set-library-vis*! f791@set-library-vis*!) (set! f793@library-inv* (lambda (f81e@x) (simple-struct-ref f81e@x '5))) (set! f96c@f793@library-inv* f793@library-inv*) (set! f795@set-library-inv*! (lambda (f820@x f821@val) (simple-struct-set! f820@x '5 f821@val))) (set! f96d@f795@set-library-inv*! f795@set-library-inv*!) (set! f797@library-subst (lambda (f824@x) (simple-struct-ref f824@x '6))) (set! f96e@f797@library-subst f797@library-subst) (set! f799@set-library-subst! (lambda (f826@x f827@val) (simple-struct-set! f826@x '6 f827@val))) (set! f96f@f799@set-library-subst! f799@set-library-subst!) (set! f79b@library-env (lambda (f82a@x) (simple-struct-ref f82a@x '7))) (set! f970@f79b@library-env f79b@library-env) (set! f79d@set-library-env! (lambda (f82c@x f82d@val) (simple-struct-set! f82c@x '7 f82d@val))) (set! f971@f79d@set-library-env! f79d@set-library-env!) (set! f79f@library-visit-state (lambda (f830@x) (simple-struct-ref f830@x '8))) (set! f972@f79f@library-visit-state f79f@library-visit-state) (set! f7a1@set-library-visit-state! (lambda (f832@x f833@val) (simple-struct-set! f832@x '8 f833@val))) (set! f973@f7a1@set-library-visit-state! f7a1@set-library-visit-state!) (set! f7a3@library-invoke-state (lambda (f836@x) (simple-struct-ref f836@x '9))) (set! f974@f7a3@library-invoke-state f7a3@library-invoke-state) (set! f7a5@set-library-invoke-state! (lambda (f838@x f839@val) (simple-struct-set! f838@x '9 f839@val))) (set! f975@f7a5@set-library-invoke-state! f7a5@set-library-invoke-state!) (set! f7a7@library-visit-code (lambda (f83c@x) (simple-struct-ref f83c@x '10))) (set! f976@f7a7@library-visit-code f7a7@library-visit-code) (set! f7a9@set-library-visit-code! (lambda (f83e@x f83f@val) (simple-struct-set! f83e@x '10 f83f@val))) (set! f977@f7a9@set-library-visit-code! f7a9@set-library-visit-code!) (set! f7ab@library-invoke-code (lambda (f842@x) (simple-struct-ref f842@x '11))) (set! f978@f7ab@library-invoke-code f7ab@library-invoke-code) (set! f7ad@set-library-invoke-code! (lambda (f844@x f845@val) (simple-struct-set! f844@x '11 f845@val))) (set! f979@f7ad@set-library-invoke-code! f7ad@set-library-invoke-code!) (set! f7af@library-visible? (lambda (f848@x) (simple-struct-ref f848@x '12))) (set! f97a@f7af@library-visible? f7af@library-visible?) (set! f7b1@set-library-visible?! (lambda (f84a@x f84b@val) (simple-struct-set! f84a@x '12 f84b@val))) (set! f97b@f7b1@set-library-visible?! f7b1@set-library-visible?!) (set! f7b3@library-source-file-name (lambda (f84e@x) (simple-struct-ref f84e@x '13))) (set! f97c@f7b3@library-source-file-name f7b3@library-source-file-name) (set! f7b5@set-library-source-file-name! (lambda (f850@x f851@val) (simple-struct-set! f850@x '13 f851@val))) (set! f97d@f7b5@set-library-source-file-name! f7b5@set-library-source-file-name!) (set! f7b7@dummy '3) (set! f97e@f7b7@dummy f7b7@dummy) (set! f7b9@find-dependencies (lambda (f854@ls) (if (null? f854@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! f97f@f7b9@find-dependencies f7b9@find-dependencies) (set! f7bb@find-library-by (lambda (f856@pred) (let f85a@f ((f858@ls ((f771@current-library-collection)))) (if (null? f858@ls) '#f (if (f856@pred (car f858@ls)) (car f858@ls) (f85a@f (cdr f858@ls))))))) (set! f980@f7bb@find-library-by f7bb@find-library-by) (set! f7bd@library-path (f6c7@f5a5@make-parameter '(".") (lambda (f85c@x) (if (and (list? f85c@x) (for-all string? f85c@x)) (map (lambda (f85e@x) f85e@x) f85c@x) (assertion-violation 'library-path '"not a list of strings" f85c@x))))) (set! f981@f7bd@library-path f7bd@library-path) (set! f7bf@library-extensions (f6c7@f5a5@make-parameter '(".sls" ".ss" ".scm") (lambda (f860@x) (if (and (list? f860@x) (for-all string? f860@x)) (map (lambda (f862@x) f862@x) f860@x) (assertion-violation 'library-extensions '"not a list of strings" f860@x))))) (set! f982@f7bf@library-extensions f7bf@library-extensions) (set! f7c1@library-name->file-name (lambda (f864@x) (call-with-values (lambda () (open-string-output-port)) (lambda (f86a@f867 f86b@f869) (let ((f86e@extract f86b@f869) (f86f@p f86a@f867)) (letrec* ((f873@display-hex (lambda (f87c@n) (if (<= '0 f87c@n '9) (display f87c@n f86f@p) (display (integer->char (+ (char->integer '#\a) (- f87c@n '10))) f86f@p))))) (begin (let f876@f ((f874@ls f864@x)) (if (not (null? f874@ls)) (begin (display '"/" f86f@p) (for-each (lambda (f878@c) (if (or (char<=? '#\a f878@c '#\z) (char<=? '#\A f878@c '#\Z) (char<=? '#\0 f878@c '#\9) (memv f878@c '(#\- #\. #\_ #\~))) (display f878@c f86f@p) (begin (display '"%" f86f@p) (let ((f87a@n (char->integer f878@c))) (begin (f873@display-hex (quotient f87a@n '16)) (f873@display-hex (remainder f87a@n '16))))))) (string->list (symbol->string (car f874@ls)))) (f876@f (cdr f874@ls))) (void))) (f86e@extract)))))))) (set! f983@f7c1@library-name->file-name f7c1@library-name->file-name) (set! f7c3@file-locator (f6c7@f5a5@make-parameter (lambda (f87e@x) (let ((f880@str (f7c1@library-name->file-name f87e@x))) (let f888@f ((f882@ls (f7bd@library-path)) (f883@exts (f7bf@library-extensions)) (f884@failed-list '())) (if (null? f882@ls) (letrec* ((f892@f88d (make-record-type-descriptor '&library-resolution &condition-rtd 'f890 '#f '#f '#((immutable library) (immutable files)))) (f894@f88f '#f) (f896@f88e (make-record-constructor-descriptor f892@f88d &condition-rcd f894@f88f)) (f899@f88c (record-predicate f892@f88d)) (f89b@make-library-resolution-condition (record-constructor f896@f88e)) (f89d@f88a (record-accessor f892@f88d '0)) (f89f@f88b (record-accessor f892@f88d '1)) (f8a1@library-resolution-condition? (condition-predicate f892@f88d)) (f8a3@condition-library (condition-accessor f892@f88d f89d@f88a)) (f8a5@condition-files (condition-accessor f892@f88d f89f@f88b))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (f89b@make-library-resolution-condition f87e@x (reverse f884@failed-list))))) (if (null? f883@exts) (f888@f (cdr f882@ls) (f7bf@library-extensions) f884@failed-list) (let ((f8a6@name (string-append (car f882@ls) f880@str (car f883@exts)))) (if (file-exists? f8a6@name) f8a6@name (f888@f f882@ls (cdr f883@exts) (cons f8a6@name f884@failed-list))))))))) (lambda (f8a8@f) (if (procedure? f8a8@f) f8a8@f (assertion-violation 'file-locator '"not a procedure" f8a8@f))))) (set! f984@f7c3@file-locator f7c3@file-locator) (set! f7c5@serialize-all (lambda (f8aa@serialize f8ab@compile) (letrec* ((f8af@library-desc (lambda (f8b2@x) (list (f77f@library-id f8b2@x) (f783@library-name f8b2@x))))) (for-each (lambda (f8b0@x) (if (f7b3@library-source-file-name f8b0@x) (f8aa@serialize (f7b3@library-source-file-name f8b0@x) (list (f77f@library-id f8b0@x) (f783@library-name f8b0@x) (f787@library-version f8b0@x) (map f8af@library-desc (f78b@library-imp* f8b0@x)) (map f8af@library-desc (f78f@library-vis* f8b0@x)) (map f8af@library-desc (f793@library-inv* f8b0@x)) (f797@library-subst f8b0@x) (f79b@library-env f8b0@x) (f8ab@compile (f7a7@library-visit-code f8b0@x)) (f8ab@compile (f7ab@library-invoke-code f8b0@x)) (f7af@library-visible? f8b0@x))) (void))) ((f771@current-library-collection)))))) (set! f985@f7c5@serialize-all f7c5@serialize-all) (set! f7c7@current-precompiled-library-loader (f6c7@f5a5@make-parameter (lambda (f8b4@filename f8b5@sk) '#f))) (set! f986@f7c7@current-precompiled-library-loader f7c7@current-precompiled-library-loader) (set! f7c9@try-load-from-file (lambda (f8b8@filename) ((f7c7@current-precompiled-library-loader) f8b8@filename (lambda f8de (let ((f8df (length f8de))) (if (= f8df '11) (apply (lambda (f8ba@id f8bb@name f8bc@ver f8bd@imp* f8be@vis* f8bf@inv* f8c0@exp-subst f8c1@exp-env f8c2@visit-proc f8c3@invoke-proc f8c4@visible?) (let f8d2@f ((f8d0@deps (append f8bd@imp* f8be@vis* f8bf@inv*))) (if (null? f8d0@deps) (begin (f7dd@install-library f8ba@id f8bb@name f8bc@ver f8bd@imp* f8be@vis* f8bf@inv* f8c0@exp-subst f8c1@exp-env f8c2@visit-proc f8c3@invoke-proc '#f '#f f8c4@visible? '#f) '#t) (let ((f8d4@d (car f8d0@deps))) (let ((f8d6@label (car f8d4@d)) (f8d7@dname (cadr f8d4@d))) (let ((f8da@l (f7d3@find-library-by-name f8d7@dname))) (if (and (f77d@library? f8da@l) (eq? f8d6@label (f77f@library-id f8da@l))) (f8d2@f (cdr f8d0@deps)) (begin (if f6c1@f599@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" f8bb@name f8d7@dname f8b8@filename) (void)) '#f)))))))) f8de) (if (>= f8df '0) (apply (lambda f8dc@others '#f) f8de) (error 'apply '"invalid arg count")))))))) (set! f987@f7c9@try-load-from-file f7c9@try-load-from-file) (set! f7cb@library-loader (f6c7@f5a5@make-parameter (lambda (f8e0@x) (let ((f8e2@file-name ((f7c3@file-locator) f8e0@x))) (if (not f8e2@file-name) (assertion-violation '#f '"cannot file library" f8e0@x) (or (f7c9@try-load-from-file f8e2@file-name) ((f7cd@current-library-expander) (f6c6@f5a3@read-library-source-file f8e2@file-name) f8e2@file-name (lambda (f8e4@name) (if (not (fast-equal? f8e4@name f8e0@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (f8ea@f8e7 f8eb@f8e9) (let ((f8ee@e f8eb@f8e9) (f8ef@p f8ea@f8e7)) (begin (display '"expected to find library " f8ef@p) (write f8e0@x f8ef@p) (display '" in file " f8ef@p) (display f8e2@file-name f8ef@p) (display '", found " f8ef@p) (write f8e4@name f8ef@p) (display '" instead" f8ef@p) (f8ee@e)))))) (void)))))))) (lambda (f8f2@f) (if (procedure? f8f2@f) f8f2@f (assertion-violation 'library-locator '"not a procedure" f8f2@f))))) (set! f988@f7cb@library-loader f7cb@library-loader) (set! f7cd@current-library-expander (f6c7@f5a5@make-parameter (lambda (f8f4@x) (assertion-violation 'library-expander '"not initialized")) (lambda (f8f6@f) (if (procedure? f8f6@f) f8f6@f (assertion-violation 'library-expander '"not a procedure" f8f6@f))))) (set! f989@f7cd@current-library-expander f7cd@current-library-expander) (set! f7cf@external-pending-libraries (f6c7@f5a5@make-parameter '())) (set! f98a@f7cf@external-pending-libraries f7cf@external-pending-libraries) (set! f7d1@find-external-library (lambda (f8f8@name) (begin (if (member f8f8@name (f7cf@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" f8f8@name) (void)) (let ((f8fe@f8fb f7cf@external-pending-libraries) (f8ff@f8fd (cons f8f8@name (f7cf@external-pending-libraries)))) (let ((f902@swap (lambda () (let ((f904@t (f8fe@f8fb))) (begin (f8fe@f8fb f8ff@f8fd) (set! f8ff@f8fd f904@t)))))) (dynamic-wind f902@swap (lambda () (begin ((f7cb@library-loader) f8f8@name) (or (f7bb@find-library-by (lambda (f906@x) (fast-equal? (f783@library-name f906@x) f8f8@name))) (assertion-violation '#f '"handling external library did not yield the correct library" f8f8@name)))) f902@swap)))))) (set! f98b@f7d1@find-external-library f7d1@find-external-library) (set! f7d3@find-library-by-name (lambda (f908@name) (or (f7bb@find-library-by (lambda (f90a@x) (fast-equal? (f783@library-name f90a@x) f908@name))) (f7d1@find-external-library f908@name)))) (set! f98c@f7d3@find-library-by-name f7d3@find-library-by-name) (set! f7d5@library-exists? (lambda (f90c@name) (and (f7bb@find-library-by (lambda (f90e@x) (fast-equal? (f783@library-name f90e@x) f90c@name))) '#t))) (set! f98d@f7d5@library-exists? f7d5@library-exists?) (set! f7d7@find-library-by-spec/die (lambda (f910@spec) (let ((f912@id (car f910@spec))) (or (f7bb@find-library-by (lambda (f914@x) (eq? f912@id (f77f@library-id f914@x)))) (assertion-violation '#f '"cannot find library with required spec" f910@spec))))) (set! f98e@f7d7@find-library-by-spec/die f7d7@find-library-by-spec/die) (set! f7d9@label->binding-table (make-eq-hashtable)) (set! f98f@f7d9@label->binding-table f7d9@label->binding-table) (set! f7db@install-library-record (lambda (f916@lib) (begin (let ((f918@exp-env (f79b@library-env f916@lib))) (for-each (lambda (f91a@x) (let ((f91c@label (car f91a@x)) (f91d@binding (cdr f91a@x))) (let ((f920@binding (let ((f922@t (car f91d@binding))) (if (memv f922@t '(global)) (cons 'global (cons f916@lib (cdr f91d@binding))) (if (memv f922@t '(global-macro)) (cons 'global-macro (cons f916@lib (cdr f91d@binding))) (if (memv f922@t '(global-macro!)) (cons 'global-macro! (cons f916@lib (cdr f91d@binding))) f91d@binding)))))) (begin (if (hashtable-ref f7d9@label->binding-table f91c@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" f91c@label (hashtable-ref f7d9@label->binding-table f91c@label '#f) f920@binding) (exit)) (void)) (hashtable-set! f7d9@label->binding-table f91c@label f920@binding))))) f918@exp-env)) ((f771@current-library-collection) f916@lib)))) (set! f990@f7db@install-library-record f7db@install-library-record) (set! f7dd@install-library (lambda (f924@id f925@name f926@ver f927@imp* f928@vis* f929@inv* f92a@exp-subst f92b@exp-env f92c@visit-proc f92d@invoke-proc f92e@visit-code f92f@invoke-code f930@visible? f931@source-file-name) (let ((f940@imp-lib* (map f7d7@find-library-by-spec/die f927@imp*)) (f941@vis-lib* (map f7d7@find-library-by-spec/die f928@vis*)) (f942@inv-lib* (map f7d7@find-library-by-spec/die f929@inv*))) (begin (if (not (and (symbol? f924@id) (list? f925@name) (list? f926@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" f924@id f925@name f926@ver) (void)) (if (f7d5@library-exists? f925@name) (assertion-violation 'install-library '"library is already installed" f925@name) (void)) (let ((f946@lib (make-simple-struct 'library '15 (list f924@id f925@name f926@ver f940@imp-lib* f941@vis-lib* f942@inv-lib* f92a@exp-subst f92b@exp-env f92c@visit-proc f92d@invoke-proc f92e@visit-code f92f@invoke-code f930@visible? f931@source-file-name)))) (f7db@install-library-record f946@lib)))))) (set! f991@f7dd@install-library f7dd@install-library) (set! f7df@imported-label->binding (lambda (f948@lab) (hashtable-ref f7d9@label->binding-table f948@lab '#f))) (set! f992@f7df@imported-label->binding f7df@imported-label->binding) (set! f7e1@invoke-library (lambda (f94a@lib) (let ((f94c@invoke (f7a3@library-invoke-state f94a@lib))) (if (procedure? f94c@invoke) (begin (f7a5@set-library-invoke-state! f94a@lib (lambda () (assertion-violation 'invoke '"circularity detected" f94a@lib))) (for-each f7e1@invoke-library (f793@library-inv* f94a@lib)) (f7a5@set-library-invoke-state! f94a@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" f94a@lib))) (f94c@invoke) (f7a5@set-library-invoke-state! f94a@lib '#t)) (void))))) (set! f993@f7e1@invoke-library f7e1@invoke-library) (set! f7e3@visit-library (lambda (f94e@lib) (let ((f950@visit (f79f@library-visit-state f94e@lib))) (if (procedure? f950@visit) (begin (f7a1@set-library-visit-state! f94e@lib (lambda () (assertion-violation 'visit '"circularity detected" f94e@lib))) (for-each f7e1@invoke-library (f78f@library-vis* f94e@lib)) (f7a1@set-library-visit-state! f94e@lib (lambda () (assertion-violation 'invoke '"first visit did not return" f94e@lib))) (f950@visit) (f7a1@set-library-visit-state! f94e@lib '#t)) (void))))) (set! f994@f7e3@visit-library f7e3@visit-library) (set! f7e5@invoke-library-by-spec (lambda (f952@spec) (f7e1@invoke-library (f7d7@find-library-by-spec/die f952@spec)))) (set! f995@f7e5@invoke-library-by-spec f7e5@invoke-library-by-spec) (set! f7e7@installed-libraries (lambda f95a (let ((f95b (length f95a))) (if (= f95b '1) (apply (lambda (f954@all?) (let f958@f ((f956@ls ((f771@current-library-collection)))) (if (null? f956@ls) '() (if (or f954@all? (f7af@library-visible? (car f956@ls))) (cons (car f956@ls) (f958@f (cdr f956@ls))) (f958@f (cdr f956@ls)))))) f95a) (if (= f95b '0) (apply (lambda () (f7e7@installed-libraries '#f)) f95a) (error 'apply '"invalid arg count")))))) (set! f996@f7e7@installed-libraries f7e7@installed-libraries) (set! f7e9@library-spec (lambda (f95c@x) (begin (if (not (f77d@library? f95c@x)) (assertion-violation 'library-spec '"not a library" f95c@x) (void)) (list (f77f@library-id f95c@x) (f783@library-name f95c@x) (f787@library-version f95c@x))))) (set! f997@f7e9@library-spec f7e9@library-spec) (void))
(begin (set! f99b@build-global-define (unspecified)) (set! fa0c@build-lambda (unspecified)) (set! fa0e@build-case-lambda (unspecified)) (set! fa3c@build-sequence (unspecified)) (set! fa3e@build-void (unspecified)) (set! fa40@build-letrec (unspecified)) (set! fa42@build-let (unspecified)) (set! fa44@build-named-let (unspecified)) (set! fa46@build-letrec* (unspecified)) (set! fa48@build-library-letrec* (unspecified)) (set! fa4a@build-receive (unspecified)) (set! f99b@build-global-define (lambda (fa4b@x) (fa3e@build-void))) (set! fad9@f99b@build-global-define f99b@build-global-define) (set! fa0c@build-lambda (lambda (fa4d@ae fa4e@vars fa4f@exp) (list 'lambda fa4e@vars fa4f@exp))) (set! fada@fa0c@build-lambda fa0c@build-lambda) (set! fa0e@build-case-lambda (lambda (fa53@ae fa54@vars* fa55@exp*) (letrec* ((fa5a@build-error (lambda (fa91@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (fa5c@build-pred (lambda (fa79@ae fa7a@n fa7b@vars) (call-with-values (lambda () (let fa87@f ((fa83@vars fa7b@vars) (fa84@count '0)) (if (pair? fa83@vars) (fa87@f (cdr fa83@vars) (+ fa84@count '1)) (if (null? fa83@vars) (values fa84@count '=) (values fa84@count '>=))))) (lambda (fa89@fa80 fa8a@fa82) (let ((fa8d@pred fa8a@fa82) (fa8e@count fa89@fa80)) (list (list 'primitive fa8d@pred) fa7a@n (list 'quote fa8e@count))))))) (fa5e@build-apply (lambda (fa71@ae fa72@g fa73@vars fa74@exp) (list '(primitive apply) (fa0c@build-lambda fa71@ae fa73@vars fa74@exp) fa72@g))) (fa60@expand-case-lambda (lambda (fa61@ae fa62@vars fa63@exp*) (let ((fa67@g (gensym)) (fa68@n (gensym))) (list 'lambda fa67@g (fa42@build-let fa61@ae (list fa68@n) (list (list '(primitive length) fa67@g)) (let fa6f@f ((fa6b@vars* fa54@vars*) (fa6c@exp* fa63@exp*)) (if (null? fa6b@vars*) (fa5a@build-error fa61@ae) (list 'if (fa5c@build-pred fa61@ae fa68@n (car fa6b@vars*)) (fa5e@build-apply fa61@ae fa67@g (car fa6b@vars*) (car fa6c@exp*)) (fa6f@f (cdr fa6b@vars*) (cdr fa6c@exp*))))))))))) (if (= (length fa55@exp*) '1) (fa0c@build-lambda fa53@ae (car fa54@vars*) (car fa55@exp*)) (fa60@expand-case-lambda fa53@ae fa54@vars* fa55@exp*))))) (set! fadb@fa0e@build-case-lambda fa0e@build-case-lambda) (set! fa3c@build-sequence (lambda (fa93@ae fa94@exps) (let fa99@loop ((fa97@exps fa94@exps)) (if (null? (cdr fa97@exps)) (car fa97@exps) (if (equal? (car fa97@exps) (fa3e@build-void)) (fa99@loop (cdr fa97@exps)) (cons 'begin fa97@exps)))))) (set! fadc@fa3c@build-sequence fa3c@build-sequence) (set! fa3e@build-void (lambda () '((primitive void)))) (set! fadd@fa3e@build-void fa3e@build-void) (set! fa40@build-letrec (lambda (fa9b@ae fa9c@vars fa9d@val-exps fa9e@body-exp) (if (null? fa9c@vars) fa9e@body-exp (list 'letrec (map list fa9c@vars fa9d@val-exps) fa9e@body-exp)))) (set! fade@fa40@build-letrec fa40@build-letrec) (set! fa42@build-let (lambda (faa3@ae faa4@vars faa5@val-exps faa6@body-exp) (if (null? faa4@vars) faa6@body-exp (list 'let (map list faa4@vars faa5@val-exps) faa6@body-exp)))) (set! fadf@fa42@build-let fa42@build-let) (set! fa44@build-named-let (lambda (faab@ae faac@name faad@vars faae@val-exps faaf@body-exp) (list 'let faac@name (map list faad@vars faae@val-exps) faaf@body-exp))) (set! fae0@fa44@build-named-let fa44@build-named-let) (set! fa46@build-letrec* (lambda (fab5@ae fab6@vars fab7@val-exps fab8@body-exp) (if (null? fab6@vars) fab8@body-exp (list 'letrec* (map list fab6@vars fab7@val-exps) fab8@body-exp)))) (set! fae1@fa46@build-letrec* fa46@build-letrec*) (set! fa48@build-library-letrec* (lambda (fabd@ae fabe@name fabf@vars fac0@locs fac1@val-exps fac2@body-exp) (cons 'begin (append (map (lambda (fac9@var) (cons 'set! (cons fac9@var '((unspecified))))) fabf@vars) (append (apply append (map (lambda (facb@var facc@loc facd@val-exp) (list (list 'set! facb@var facd@val-exp) (list 'set! facc@loc facb@var))) fabf@vars fac0@locs fac1@val-exps)) (list fac2@body-exp)))))) (set! fae2@fa48@build-library-letrec* fa48@build-library-letrec*) (set! fa4a@build-receive (lambda (fad1@ae fad2@vars fad3@producer fad4@body*) (begin (display '"************** in ") (cons 'receive (cons fad2@vars (cons fad3@producer fad4@body*)))))) (set! fae3@fa4a@build-receive fa4a@build-receive) (void))
(begin (set! faf2@file-options-macro (unspecified)) (set! faf4@set-cons (unspecified)) (set! faf6@set-union (unspecified)) (set! fafb@top-mark* (unspecified)) (set! fafd@top-marked? (unspecified)) (set! faff@gen-lexical (unspecified)) (set! fb01@gen-global (unspecified)) (set! fb03@gen-label (unspecified)) (set! fb05@gen-top-level-label (unspecified)) (set! fb07@gen-define-label+loc (unspecified)) (set! fb09@gen-define-label (unspecified)) (set! fb13@rib? (unspecified)) (set! fb15@rib-sym* (unspecified)) (set! fb17@set-rib-sym*! (unspecified)) (set! fb19@rib-mark** (unspecified)) (set! fb1b@set-rib-mark**! (unspecified)) (set! fb1d@rib-label* (unspecified)) (set! fb1f@set-rib-label*! (unspecified)) (set! fb21@rib-sealed/freq (unspecified)) (set! fb23@set-rib-sealed/freq! (unspecified)) (set! fb25@rib-cache (unspecified)) (set! fb27@set-rib-cache! (unspecified)) (set! fb29@dummy (unspecified)) (set! fb2b@make-empty-rib (unspecified)) (set! fb2d@extend-rib! (unspecified)) (set! fb2f@extend-rib/nc! (unspecified)) (set! fb31@make-rib-map (unspecified)) (set! fb33@seal-rib! (unspecified)) (set! fb35@unseal-rib! (unspecified)) (set! fb37@make-full-rib (unspecified)) (set! fb39@rp (unspecified)) (set! fb43@stx? (unspecified)) (set! fb45@stx-expr (unspecified)) (set! fb47@set-stx-expr! (unspecified)) (set! fb49@stx-mark* (unspecified)) (set! fb4b@set-stx-mark*! (unspecified)) (set! fb4d@stx-subst* (unspecified)) (set! fb4f@set-stx-subst*! (unspecified)) (set! fb51@stx-ae* (unspecified)) (set! fb53@set-stx-ae*! (unspecified)) (set! fb55@dummy (unspecified)) (set! fb57@datum->stx (unspecified)) (set! fb59@gen-mark (unspecified)) (set! fb5b@anti-mark (unspecified)) (set! fb5d@anti-mark? (unspecified)) (set! fb5f@mkstx (unspecified)) (set! fb61@add-mark (unspecified)) (set! fb63@add-subst (unspecified)) (set! fb65@syntax-kind? (unspecified)) (set! fb67@syntax-vector->list (unspecified)) (set! fb69@syntax-pair? (unspecified)) (set! fb6b@syntax-vector? (unspecified)) (set! fb6d@syntax-null? (unspecified)) (set! fb6f@syntax-list? (unspecified)) (set! fb71@syntax-car (unspecified)) (set! fb73@syntax-cdr (unspecified)) (set! fb75@syntax->list (unspecified)) (set! fb77@id? (unspecified)) (set! fb79@id->sym (unspecified)) (set! fb7b@bound-id=? (unspecified)) (set! fb7d@free-id=? (unspecified)) (set! fb7f@valid-bound-ids? (unspecified)) (set! fb81@distinct-bound-ids? (unspecified)) (set! fb83@bound-id-member? (unspecified)) (set! fb85@self-evaluating? (unspecified)) (set! fb87@strip-annotations (unspecified)) (set! fb89@strip (unspecified)) (set! fb8b@stx->datum (unspecified)) (set! fb8d@id->label (unspecified)) (set! fb8f@label->binding (unspecified)) (set! fb91@make-binding (unspecified)) (set! fb93@binding-type (unspecified)) (set! fb95@binding-value (unspecified)) (set! fb97@raise-unbound-error (unspecified)) (set! fb99@syntax-type (unspecified)) (set! fba7@sanitize-binding (unspecified)) (set! fba9@make-variable-transformer (unspecified)) (set! fbab@variable-transformer? (unspecified)) (set! fbad@variable-transformer-procedure (unspecified)) (set! fbaf@make-eval-transformer (unspecified)) (set! fd00@parse-define (unspecified)) (set! fd02@parse-define-syntax (unspecified)) (set! fd04@scheme-stx-hashtable (unspecified)) (set! fd06@scheme-stx (unspecified)) (set! fd08@lexical-var (unspecified)) (set! fd0a@lexical-mutable? (unspecified)) (set! fd0c@set-lexical-mutable! (unspecified)) (set! fd0e@add-lexical (unspecified)) (set! fd10@add-lexicals (unspecified)) (set! fd12@letrec-helper (unspecified)) (set! fd14@let-transformer (unspecified)) (set! fd16@letrec-transformer (unspecified)) (set! fd18@letrec*-transformer (unspecified)) (set! fd1a@fluid-let-syntax-transformer (unspecified)) (set! fd1c@type-descriptor-transformer (unspecified)) (set! fd1e@record-type-descriptor-transformer (unspecified)) (set! fd20@record-constructor-descriptor-transformer (unspecified)) (set! fd22@when-macro (unspecified)) (set! fd24@unless-macro (unspecified)) (set! fd26@if-transformer (unspecified)) (set! fd28@and-transformer (unspecified)) (set! fd2a@or-transformer (unspecified)) (set! fd2c@case-macro (unspecified)) (set! fd2e@quote-transformer (unspecified)) (set! fd30@case-lambda-transformer (unspecified)) (set! fd32@lambda-transformer (unspecified)) (set! fd34@bless (unspecified)) (set! fd36@with-syntax-macro (unspecified)) (set! fd38@invalid-fmls-error (unspecified)) (set! fd3a@let-macro (unspecified)) (set! fd3c@let-values-macro (unspecified)) (set! fd3e@let*-values-macro (unspecified)) (set! fd40@trace-lambda-macro (unspecified)) (set! fd42@trace-define-macro (unspecified)) (set! fd44@trace-define-syntax-macro (unspecified)) (set! fd46@trace-let/rec-syntax (unspecified)) (set! fd48@trace-let-syntax-macro (unspecified)) (set! fd4a@trace-letrec-syntax-macro (unspecified)) (set! fd4c@guard-macro (unspecified)) (set! fd4e@define-enumeration-macro (unspecified)) (set! fd50@time-macro (unspecified)) (set! fd52@delay-macro (unspecified)) (set! fd54@assert-macro (unspecified)) (set! fd56@endianness-macro (unspecified)) (set! fd58@identifier-syntax-macro (unspecified)) (set! fd5a@do-macro (unspecified)) (set! fd5c@let*-macro (unspecified)) (set! fd5e@or-macro (unspecified)) (set! fd60@and-macro (unspecified)) (set! fd62@cond-macro (unspecified)) (set! fd64@do-include (unspecified)) (set! fd66@include-macro (unspecified)) (set! fd68@include-into-macro (unspecified)) (set! fd6a@syntax-rules-macro (unspecified)) (set! fd6c@quasiquote-macro (unspecified)) (set! fd6e@quasisyntax-macro (unspecified)) (set! fd70@define-struct-macro (unspecified)) (set! fd72@define-record-type-macro (unspecified)) (set! fd74@define-condition-type-macro (unspecified)) (set! fd76@incorrect-usage-macro (unspecified)) (set! fd78@parameterize-macro (unspecified)) (set! fd7a@foreign-call-transformer (unspecified)) (set! fd7c@convert-pattern (unspecified)) (set! fd7e@syntax-dispatch (unspecified)) (set! fd80@ellipsis? (unspecified)) (set! fd82@underscore? (unspecified)) (set! fd84@verify-literals (unspecified)) (set! fd86@syntax-case-transformer (unspecified)) (set! fd88@ellipsis-map (unspecified)) (set! fd8a@syntax-transformer (unspecified)) (set! fd8c@core-macro-transformer (unspecified)) (set! fd8e@symbol-macro (unspecified)) (set! fd90@macro-transformer (unspecified)) (set! fd92@local-macro-transformer (unspecified)) (set! fd94@do-macro-call (unspecified)) (set! fd96@chi-macro (unspecified)) (set! fd98@chi-local-macro (unspecified)) (set! fd9a@chi-global-macro (unspecified)) (set! fd9c@chi-expr* (unspecified)) (set! fd9e@chi-application (unspecified)) (set! fda0@chi-expr (unspecified)) (set! fda2@chi-set! (unspecified)) (set! fda4@verify-formals (unspecified)) (set! fda6@chi-lambda-clause (unspecified)) (set! fda8@chi-lambda-clause* (unspecified)) (set! fdaa@chi-defun (unspecified)) (set! fdac@chi-rhs (unspecified)) (set! fdae@expand-interaction-rhs*/init* (unspecified)) (set! fdb0@chi-rhs* (unspecified)) (set! fdb2@find-bound=? (unspecified)) (set! fdb4@find-dups (unspecified)) (set! fdb6@chi-internal (unspecified)) (set! fdb8@parse-module (unspecified)) (set! fdc2@module-interface? (unspecified)) (set! fdc4@module-interface-first-mark (unspecified)) (set! fdc6@set-module-interface-first-mark! (unspecified)) (set! fdc8@module-interface-exp-id-vec (unspecified)) (set! fdca@set-module-interface-exp-id-vec! (unspecified)) (set! fdcc@module-interface-exp-lab-vec (unspecified)) (set! fdce@set-module-interface-exp-lab-vec! (unspecified)) (set! fdd0@dummy (unspecified)) (set! fdd2@module-interface-exp-id* (unspecified)) (set! fdd4@chi-internal-module (unspecified)) (set! fdd6@chi-body* (unspecified)) (set! fdd8@expand-transformer (unspecified)) (set! fdda@parse-exports (unspecified)) (set! fddc@parse-library-name (unspecified)) (set! fdde@parse-library (unspecified)) (set! fde0@parse-import-spec* (unspecified)) (set! fde2@make-top-rib (unspecified)) (set! fde4@make-collector (unspecified)) (set! fde6@inv-collector (unspecified)) (set! fde8@vis-collector (unspecified)) (set! fdea@imp-collector (unspecified)) (set! fdec@chi-library-internal (unspecified)) (set! fdee@chi-interaction-expr (unspecified)) (set! fdf0@library-body-expander (unspecified)) (set! fdf2@core-library-expander (unspecified)) (set! fdf4@parse-top-level-program (unspecified)) (set! fdf6@top-level-expander (unspecified)) (set! fdf8@rp (unspecified)) (set! fe02@env? (unspecified)) (set! fe04@env-names (unspecified)) (set! fe06@set-env-names! (unspecified)) (set! fe08@env-labels (unspecified)) (set! fe0a@set-env-labels! (unspecified)) (set! fe0c@env-itc (unspecified)) (set! fe0e@set-env-itc! (unspecified)) (set! fe10@dummy (unspecified)) (set! fe12@rp (unspecified)) (set! fe1c@interaction-env? (unspecified)) (set! fe1e@interaction-env-rib (unspecified)) (set! fe20@set-interaction-env-rib! (unspecified)) (set! fe22@interaction-env-r (unspecified)) (set! fe24@set-interaction-env-r! (unspecified)) (set! fe26@interaction-env-locs (unspecified)) (set! fe28@set-interaction-env-locs! (unspecified)) (set! fe2a@dummy (unspecified)) (set! fe2c@interaction-environment-symbols (unspecified)) (set! fe2e@environment-bindings (unspecified)) (set! fe30@parse-binding (unspecified)) (set! fe32@environment? (unspecified)) (set! fe34@environment-symbols (unspecified)) (set! fe36@environment (unspecified)) (set! fe38@null-environment (unspecified)) (set! fe3a@scheme-report-environment (unspecified)) (set! fe3c@expand (unspecified)) (set! fe3e@eval (unspecified)) (set! fe40@library-expander (unspecified)) (set! fe42@boot-library-expand (unspecified)) (set! fe44@rev-map-append (unspecified)) (set! fe46@build-exports (unspecified)) (set! fe48@make-export-subst (unspecified)) (set! fe4a@make-export-env/macros (unspecified)) (set! fe4c@generate-temporaries (unspecified)) (set! fe4e@free-identifier=? (unspecified)) (set! fe50@bound-identifier=? (unspecified)) (set! fe52@make-source-condition (unspecified)) (set! fe54@extract-position-condition (unspecified)) (set! fe56@expression-position (unspecified)) (set! fe58@assertion-error (unspecified)) (set! fe5a@syntax-error (unspecified)) (set! fe5c@syntax-violation* (unspecified)) (set! fe5e@syntax-violation (unspecified)) (set! fe60@identifier? (unspecified)) (set! fe62@datum->syntax (unspecified)) (set! fe64@syntax->datum (unspecified)) (set! fe66@ungensym-all (unspecified)) (set! fe68@compile-r6rs-top-level (unspecified)) (set! fe6a@pre-compile-r6rs-top-level (unspecified)) (set! fe6c@interaction-environment (unspecified)) (set! fe6e@top-level-context (unspecified)) (set! faf2@file-options-macro (lambda (fe6f@x) (letrec* ((fe72@valid-option? (lambda (fe7b@x) (and (fb77@id? fe7b@x) (memq (fb79@id->sym fe7b@x) '(no-fail no-create no-truncate)))))) (let ((fe73@t fe6f@x)) (let ((fe75@ls/false (fd7e@syntax-dispatch fe73@t '(_ . each-any)))) (if (and fe75@ls/false (apply (lambda (fe77@opt*) (for-all fe72@valid-option? fe77@opt*)) fe75@ls/false)) (apply (lambda (fe79@opt*) (fd34@bless (list 'make-file-options (list 'quote fe79@opt*)))) fe75@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" fe73@t))))))) (set! f27c5@faf2@file-options-macro faf2@file-options-macro) (set! faf4@set-cons (lambda (fe7d@x fe7e@ls) (if (memq fe7d@x fe7e@ls) fe7e@ls (cons fe7d@x fe7e@ls)))) (set! f27c6@faf4@set-cons faf4@set-cons) (set! faf6@set-union (lambda (fe81@ls1 fe82@ls2) (if (null? fe81@ls1) fe82@ls2 (if (memq (car fe81@ls1) fe82@ls2) (faf6@set-union (cdr fe81@ls1) fe82@ls2) (cons (car fe81@ls1) (faf6@set-union (cdr fe81@ls1) fe82@ls2)))))) (set! f27c7@faf6@set-union faf6@set-union) (set! fafb@top-mark* '(top)) (set! f27c8@fafb@top-mark* fafb@top-mark*) (set! fafd@top-marked? (lambda (fe85@m*) (memq 'top fe85@m*))) (set! f27c9@fafd@top-marked? fafd@top-marked?) (set! faff@gen-lexical (lambda (fe87@sym) (if (symbol? fe87@sym) (gensym fe87@sym) (if (fb43@stx? fe87@sym) (faff@gen-lexical (fb79@id->sym fe87@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" fe87@sym))))) (set! f27ca@faff@gen-lexical faff@gen-lexical) (set! fb01@gen-global (lambda (fe89@x) (faff@gen-lexical fe89@x))) (set! f27cb@fb01@gen-global fb01@gen-global) (set! fb03@gen-label (lambda (fe8b@_) (gensym))) (set! f27cc@fb03@gen-label fb03@gen-label) (set! fb05@gen-top-level-label (lambda (fe8d@id fe8e@rib) (letrec* ((fe92@find (lambda (fe9d@sym fe9e@mark* fe9f@sym* fea0@mark** fea1@label*) (and (pair? fe9f@sym*) (if (and (eq? fe9d@sym (car fe9f@sym*)) (same-marks? fe9e@mark* (car fea0@mark**))) (car fea1@label*) (fe92@find fe9d@sym fe9e@mark* (cdr fe9f@sym*) (cdr fea0@mark**) (cdr fea1@label*))))))) (let ((fe93@sym (fb79@id->sym fe8d@id)) (fe94@mark* (fb49@stx-mark* fe8d@id))) (let ((fe97@sym* (fb15@rib-sym* fe8e@rib))) (let ((fe99@t (and (memq fe93@sym (fb15@rib-sym* fe8e@rib)) (fe92@find fe93@sym fe94@mark* fe97@sym* (fb19@rib-mark** fe8e@rib) (fb1d@rib-label* fe8e@rib))))) (if fe99@t ((lambda (fe9b@label) (if (f992@f7df@imported-label->binding fe9b@label) (gensym) fe9b@label)) fe99@t) (gensym)))))))) (set! f27cd@fb05@gen-top-level-label fb05@gen-top-level-label) (set! fb07@gen-define-label+loc (lambda (fea7@id fea8@rib) (let ((feab@t (fe6e@top-level-context))) (if feab@t ((lambda (fead@env) (let ((feaf@label (fb05@gen-top-level-label fea7@id fea8@rib)) (feb0@locs (fe26@interaction-env-locs fead@env))) (values feaf@label (let ((feb3@t (assq feaf@label feb0@locs))) (if feb3@t (cdr feb3@t) (let ((feb5@loc (faff@gen-lexical fea7@id))) (begin (fe28@set-interaction-env-locs! fead@env (cons (cons feaf@label feb5@loc) feb0@locs)) feb5@loc))))))) feab@t) (values (gensym) (faff@gen-lexical fea7@id)))))) (set! f27ce@fb07@gen-define-label+loc fb07@gen-define-label+loc) (set! fb09@gen-define-label (lambda (feb7@id feb8@rib) (if (fe6e@top-level-context) (fb05@gen-top-level-label feb7@id feb8@rib) (gensym)))) (set! f27cf@fb09@gen-define-label fb09@gen-define-label) (set! fb13@rib? (lambda (febb@x) (and (simple-struct? febb@x) (eq? (simple-struct-name febb@x) 'rib)))) (set! f27d0@fb13@rib? fb13@rib?) (set! fb15@rib-sym* (lambda (febd@x) (simple-struct-ref febd@x '0))) (set! f27d1@fb15@rib-sym* fb15@rib-sym*) (set! fb17@set-rib-sym*! (lambda (febf@x fec0@val) (simple-struct-set! febf@x '0 fec0@val))) (set! f27d2@fb17@set-rib-sym*! fb17@set-rib-sym*!) (set! fb19@rib-mark** (lambda (fec3@x) (simple-struct-ref fec3@x '1))) (set! f27d3@fb19@rib-mark** fb19@rib-mark**) (set! fb1b@set-rib-mark**! (lambda (fec5@x fec6@val) (simple-struct-set! fec5@x '1 fec6@val))) (set! f27d4@fb1b@set-rib-mark**! fb1b@set-rib-mark**!) (set! fb1d@rib-label* (lambda (fec9@x) (simple-struct-ref fec9@x '2))) (set! f27d5@fb1d@rib-label* fb1d@rib-label*) (set! fb1f@set-rib-label*! (lambda (fecb@x fecc@val) (simple-struct-set! fecb@x '2 fecc@val))) (set! f27d6@fb1f@set-rib-label*! fb1f@set-rib-label*!) (set! fb21@rib-sealed/freq (lambda (fecf@x) (simple-struct-ref fecf@x '3))) (set! f27d7@fb21@rib-sealed/freq fb21@rib-sealed/freq) (set! fb23@set-rib-sealed/freq! (lambda (fed1@x fed2@val) (simple-struct-set! fed1@x '3 fed2@val))) (set! f27d8@fb23@set-rib-sealed/freq! fb23@set-rib-sealed/freq!) (set! fb25@rib-cache (lambda (fed5@x) (simple-struct-ref fed5@x '4))) (set! f27d9@fb25@rib-cache fb25@rib-cache) (set! fb27@set-rib-cache! (lambda (fed7@x fed8@val) (simple-struct-set! fed7@x '4 fed8@val))) (set! f27da@fb27@set-rib-cache! fb27@set-rib-cache!) (set! fb29@dummy '3) (set! f27db@fb29@dummy fb29@dummy) (set! fb2b@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! f27dc@fb2b@make-empty-rib fb2b@make-empty-rib) (set! fb2d@extend-rib! (lambda (fedb@rib fedc@id fedd@label) (letrec* ((fee2@find (lambda (feef@sym fef0@mark* fef1@sym* fef2@mark** fef3@label*) (and (pair? fef1@sym*) (if (and (eq? feef@sym (car fef1@sym*)) (same-marks? fef0@mark* (car fef2@mark**))) fef3@label* (fee2@find feef@sym fef0@mark* (cdr fef1@sym*) (cdr fef2@mark**) (cdr fef3@label*))))))) (begin (if (fb21@rib-sealed/freq fedb@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" fedb@rib) (void)) (let ((fee3@sym (fb79@id->sym fedc@id)) (fee4@mark* (fb49@stx-mark* fedc@id))) (let ((fee7@sym* (fb15@rib-sym* fedb@rib))) (let ((fee9@t (and (memq fee3@sym (fb15@rib-sym* fedb@rib)) (fee2@find fee3@sym fee4@mark* fee7@sym* (fb19@rib-mark** fedb@rib) (fb1d@rib-label* fedb@rib))))) (if fee9@t ((lambda (feeb@p) (if (not (eq? fedd@label (car feeb@p))) (if (fe6e@top-level-context) (set-car! feeb@p fedd@label) (fe5e@syntax-violation '#f '"multiple definitions of identifier" fedc@id)) (void))) fee9@t) (begin (if (fb25@rib-cache fedb@rib) (hashtable-update! (fb25@rib-cache fedb@rib) fee3@sym (lambda (feed@e) (cons (cons fee4@mark* fedd@label) feed@e)) '()) (void)) (fb17@set-rib-sym*! fedb@rib (cons fee3@sym fee7@sym*)) (fb1b@set-rib-mark**! fedb@rib (cons fee4@mark* (fb19@rib-mark** fedb@rib))) (fb1f@set-rib-label*! fedb@rib (cons fedd@label (fb1d@rib-label* fedb@rib)))))))))))) (set! f27dd@fb2d@extend-rib! fb2d@extend-rib!) (set! fb2f@extend-rib/nc! (lambda (fef9@rib fefa@id fefb@label) (let ((feff@sym (fb79@id->sym fefa@id)) (ff00@mark* (fb49@stx-mark* fefa@id))) (let ((ff03@sym* (fb15@rib-sym* fef9@rib))) (begin (if (fb25@rib-cache fef9@rib) (hashtable-update! (fb25@rib-cache fef9@rib) feff@sym (lambda (ff05@e) (cons (cons ff00@mark* fefb@label) ff05@e)) '()) (void)) (fb17@set-rib-sym*! fef9@rib (cons feff@sym ff03@sym*)) (fb1b@set-rib-mark**! fef9@rib (cons ff00@mark* (fb19@rib-mark** fef9@rib))) (fb1f@set-rib-label*! fef9@rib (cons fefb@label (fb1d@rib-label* fef9@rib)))))))) (set! f27de@fb2f@extend-rib/nc! fb2f@extend-rib/nc!) (set! fb31@make-rib-map (lambda (ff07@sym*) (let ((ff09@ht (make-eq-hashtable))) (let ff0f@f ((ff0b@i '0) (ff0c@sym* ff07@sym*)) (if (null? ff0c@sym*) ff09@ht (begin (hashtable-update! ff09@ht (car ff0c@sym*) (lambda (ff11@x) (cons ff0b@i ff11@x)) '()) (ff0f@f (+ ff0b@i '1) (cdr ff0c@sym*)))))))) (set! f27df@fb31@make-rib-map fb31@make-rib-map) (set! fb33@seal-rib! (lambda (ff13@rib) (let ((ff15@sym* (fb15@rib-sym* ff13@rib))) (if (not (null? ff15@sym*)) (begin (fb17@set-rib-sym*! ff13@rib (list->vector ff15@sym*)) (fb1b@set-rib-mark**! ff13@rib (list->vector (fb19@rib-mark** ff13@rib))) (fb1f@set-rib-label*! ff13@rib (list->vector (fb1d@rib-label* ff13@rib))) (fb23@set-rib-sealed/freq! ff13@rib (fb31@make-rib-map ff15@sym*))) (void))))) (set! f27e0@fb33@seal-rib! fb33@seal-rib!) (set! fb35@unseal-rib! (lambda (ff17@rib) (if (fb21@rib-sealed/freq ff17@rib) (begin (fb23@set-rib-sealed/freq! ff17@rib '#f) (fb17@set-rib-sym*! ff17@rib (vector->list (fb15@rib-sym* ff17@rib))) (fb1b@set-rib-mark**! ff17@rib (vector->list (fb19@rib-mark** ff17@rib))) (fb1f@set-rib-label*! ff17@rib (vector->list (fb1d@rib-label* ff17@rib)))) (void)))) (set! f27e1@fb35@unseal-rib! fb35@unseal-rib!) (set! fb37@make-full-rib (lambda (ff19@id* ff1a@label*) (let ((ff1d@r (make-simple-struct 'rib '6 (list (map fb79@id->sym ff19@id*) (map fb49@stx-mark* ff19@id*) ff1a@label* '#f '#f)))) (begin (fb33@seal-rib! ff1d@r) ff1d@r)))) (set! f27e2@fb37@make-full-rib fb37@make-full-rib) (set! fb39@rp (f6c4@f59f@make-record-printer 'stx (lambda (ff1f@x ff20@p ff21@wr) (begin (display '"#<syntax " ff20@p) (write (fb8b@stx->datum ff1f@x) ff20@p) (let ((ff25@expr (fb45@stx-expr ff1f@x))) (if (f6bb@f58d@annotation? ff25@expr) (let ((ff27@src (f6bc@f58f@annotation-source ff25@expr))) (if (pair? ff27@src) (begin (display '" [" ff20@p) (display (cdr ff27@src) ff20@p) (display '" of " ff20@p) (display (car ff27@src) ff20@p) (display '"]" ff20@p)) (void))) (void))) (display '">" ff20@p))))) (set! f27e3@fb39@rp fb39@rp) (set! fb43@stx? (lambda (ff29@x) (and (simple-struct? ff29@x) (eq? (simple-struct-name ff29@x) 'stx)))) (set! f27e4@fb43@stx? fb43@stx?) (set! fb45@stx-expr (lambda (ff2b@x) (simple-struct-ref ff2b@x '0))) (set! f27e5@fb45@stx-expr fb45@stx-expr) (set! fb47@set-stx-expr! (lambda (ff2d@x ff2e@val) (simple-struct-set! ff2d@x '0 ff2e@val))) (set! f27e6@fb47@set-stx-expr! fb47@set-stx-expr!) (set! fb49@stx-mark* (lambda (ff31@x) (simple-struct-ref ff31@x '1))) (set! f27e7@fb49@stx-mark* fb49@stx-mark*) (set! fb4b@set-stx-mark*! (lambda (ff33@x ff34@val) (simple-struct-set! ff33@x '1 ff34@val))) (set! f27e8@fb4b@set-stx-mark*! fb4b@set-stx-mark*!) (set! fb4d@stx-subst* (lambda (ff37@x) (simple-struct-ref ff37@x '2))) (set! f27e9@fb4d@stx-subst* fb4d@stx-subst*) (set! fb4f@set-stx-subst*! (lambda (ff39@x ff3a@val) (simple-struct-set! ff39@x '2 ff3a@val))) (set! f27ea@fb4f@set-stx-subst*! fb4f@set-stx-subst*!) (set! fb51@stx-ae* (lambda (ff3d@x) (simple-struct-ref ff3d@x '3))) (set! f27eb@fb51@stx-ae* fb51@stx-ae*) (set! fb53@set-stx-ae*! (lambda (ff3f@x ff40@val) (simple-struct-set! ff3f@x '3 ff40@val))) (set! f27ec@fb53@set-stx-ae*! fb53@set-stx-ae*!) (set! fb55@dummy '3) (set! f27ed@fb55@dummy fb55@dummy) (set! fb57@datum->stx (lambda (ff43@id ff44@datum) (make-simple-struct 'stx '5 (list ff44@datum (fb49@stx-mark* ff43@id) (fb4d@stx-subst* ff43@id) (fb51@stx-ae* ff43@id))))) (set! f27ee@fb57@datum->stx fb57@datum->stx) (set! fb59@gen-mark (lambda () (string '#\m))) (set! f27ef@fb59@gen-mark fb59@gen-mark) (set! fb5b@anti-mark '#f) (set! f27f0@fb5b@anti-mark fb5b@anti-mark) (set! fb5d@anti-mark? not) (set! f27f1@fb5d@anti-mark? fb5d@anti-mark?) (set! fb5f@mkstx (lambda (ff47@e ff48@m* ff49@s* ff4a@ae*) (if (and (fb43@stx? ff47@e) (not (fafd@top-marked? ff48@m*))) (call-with-values (lambda () (join-wraps ff48@m* ff49@s* ff4a@ae* ff47@e)) (lambda (ff55@ff50 ff56@ff52 ff57@ff54) (let ((ff5b@ae* ff57@ff54) (ff5c@s* ff56@ff52) (ff5d@m* ff55@ff50)) (make-simple-struct 'stx '5 (list (fb45@stx-expr ff47@e) ff5d@m* ff5c@s* ff5b@ae*))))) (make-simple-struct 'stx '5 (list ff47@e ff48@m* ff49@s* ff4a@ae*))))) (set! f27f2@fb5f@mkstx fb5f@mkstx) (set! fb61@add-mark (lambda (ff61@m ff62@e ff63@ae) (fb5f@mkstx ff62@e (list ff61@m) '(shift) (list ff63@ae)))) (set! f27f3@fb61@add-mark fb61@add-mark) (set! fb63@add-subst (lambda (ff67@subst ff68@e) (fb5f@mkstx ff68@e '() (list ff67@subst) '()))) (set! f27f4@fb63@add-subst fb63@add-subst) (set! fb65@syntax-kind? (lambda (ff6b@x ff6c@p?) (if (fb43@stx? ff6b@x) (fb65@syntax-kind? (fb45@stx-expr ff6b@x) ff6c@p?) (if (f6bb@f58d@annotation? ff6b@x) (fb65@syntax-kind? (f6bd@f591@annotation-expression ff6b@x) ff6c@p?) (ff6c@p? ff6b@x))))) (set! f27f5@fb65@syntax-kind? fb65@syntax-kind?) (set! fb67@syntax-vector->list (lambda (ff6f@x) (if (fb43@stx? ff6f@x) (let ((ff71@ls (fb67@syntax-vector->list (fb45@stx-expr ff6f@x))) (ff72@m* (fb49@stx-mark* ff6f@x)) (ff73@s* (fb4d@stx-subst* ff6f@x)) (ff74@ae* (fb51@stx-ae* ff6f@x))) (map (lambda (ff79@x) (fb5f@mkstx ff79@x ff72@m* ff73@s* ff74@ae*)) ff71@ls)) (if (f6bb@f58d@annotation? ff6f@x) (fb67@syntax-vector->list (f6bd@f591@annotation-expression ff6f@x)) (if (vector? ff6f@x) (vector->list ff6f@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" ff6f@x)))))) (set! f27f6@fb67@syntax-vector->list fb67@syntax-vector->list) (set! fb69@syntax-pair? (lambda (ff7b@x) (fb65@syntax-kind? ff7b@x pair?))) (set! f27f7@fb69@syntax-pair? fb69@syntax-pair?) (set! fb6b@syntax-vector? (lambda (ff7d@x) (fb65@syntax-kind? ff7d@x vector?))) (set! f27f8@fb6b@syntax-vector? fb6b@syntax-vector?) (set! fb6d@syntax-null? (lambda (ff7f@x) (fb65@syntax-kind? ff7f@x null?))) (set! f27f9@fb6d@syntax-null? fb6d@syntax-null?) (set! fb6f@syntax-list? (lambda (ff81@x) (or (fb6d@syntax-null? ff81@x) (and (fb69@syntax-pair? ff81@x) (fb6f@syntax-list? (fb73@syntax-cdr ff81@x)))))) (set! f27fa@fb6f@syntax-list? fb6f@syntax-list?) (set! fb71@syntax-car (lambda (ff83@x) (if (fb43@stx? ff83@x) (fb5f@mkstx (fb71@syntax-car (fb45@stx-expr ff83@x)) (fb49@stx-mark* ff83@x) (fb4d@stx-subst* ff83@x) (fb51@stx-ae* ff83@x)) (if (f6bb@f58d@annotation? ff83@x) (fb71@syntax-car (f6bd@f591@annotation-expression ff83@x)) (if (pair? ff83@x) (car ff83@x) (assertion-violation 'syntax-car '"BUG: not a pair" ff83@x)))))) (set! f27fb@fb71@syntax-car fb71@syntax-car) (set! fb73@syntax-cdr (lambda (ff85@x) (if (fb43@stx? ff85@x) (fb5f@mkstx (fb73@syntax-cdr (fb45@stx-expr ff85@x)) (fb49@stx-mark* ff85@x) (fb4d@stx-subst* ff85@x) (fb51@stx-ae* ff85@x)) (if (f6bb@f58d@annotation? ff85@x) (fb73@syntax-cdr (f6bd@f591@annotation-expression ff85@x)) (if (pair? ff85@x) (cdr ff85@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" ff85@x)))))) (set! f27fc@fb73@syntax-cdr fb73@syntax-cdr) (set! fb75@syntax->list (lambda (ff87@x) (if (fb69@syntax-pair? ff87@x) (cons (fb71@syntax-car ff87@x) (fb75@syntax->list (fb73@syntax-cdr ff87@x))) (if (fb6d@syntax-null? ff87@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" ff87@x))))) (set! f27fd@fb75@syntax->list fb75@syntax->list) (set! fb77@id? (lambda (ff89@x) (and (fb43@stx? ff89@x) (symbol? (fb45@stx-expr ff89@x))))) (set! f27fe@fb77@id? fb77@id?) (set! fb79@id->sym (lambda (ff8b@x) (fb45@stx-expr ff8b@x))) (set! f27ff@fb79@id->sym fb79@id->sym) (set! fb7b@bound-id=? (lambda (ff8d@x ff8e@y) (and (eq? (fb79@id->sym ff8d@x) (fb79@id->sym ff8e@y)) (same-marks? (fb49@stx-mark* ff8d@x) (fb49@stx-mark* ff8e@y))))) (set! f2800@fb7b@bound-id=? fb7b@bound-id=?) (set! fb7d@free-id=? (lambda (ff91@i ff92@j) (let ((ff95@t0 (id->real-label ff91@i)) (ff96@t1 (id->real-label ff92@j))) (if (or ff95@t0 ff96@t1) (eq? ff95@t0 ff96@t1) (eq? (fb79@id->sym ff91@i) (fb79@id->sym ff92@j)))))) (set! f2801@fb7d@free-id=? fb7d@free-id=?) (set! fb7f@valid-bound-ids? (lambda (ff99@id*) (and (for-all fb77@id? ff99@id*) (fb81@distinct-bound-ids? ff99@id*)))) (set! f2802@fb7f@valid-bound-ids? fb7f@valid-bound-ids?) (set! fb81@distinct-bound-ids? (lambda (ff9b@id*) (or (null? ff9b@id*) (and (not (fb83@bound-id-member? (car ff9b@id*) (cdr ff9b@id*))) (fb81@distinct-bound-ids? (cdr ff9b@id*)))))) (set! f2803@fb81@distinct-bound-ids? fb81@distinct-bound-ids?) (set! fb83@bound-id-member? (lambda (ff9d@id ff9e@id*) (and (pair? ff9e@id*) (or (fb7b@bound-id=? ff9d@id (car ff9e@id*)) (fb83@bound-id-member? ff9d@id (cdr ff9e@id*)))))) (set! f2804@fb83@bound-id-member? fb83@bound-id-member?) (set! fb85@self-evaluating? (lambda (ffa1@x) (or (number? ffa1@x) (string? ffa1@x) (char? ffa1@x) (boolean? ffa1@x) (regexp? ffa1@x) (bytevector? ffa1@x)))) (set! f2805@fb85@self-evaluating? fb85@self-evaluating?) (set! fb87@strip-annotations (lambda (ffa3@x) (if (pair? ffa3@x) (cons (fb87@strip-annotations (car ffa3@x)) (fb87@strip-annotations (cdr ffa3@x))) (if (vector? ffa3@x) (vector-map fb87@strip-annotations ffa3@x) (if (f6bb@f58d@annotation? ffa3@x) (f6ba@f58b@annotation-stripped ffa3@x) ffa3@x))))) (set! f2806@fb87@strip-annotations fb87@strip-annotations) (set! fb89@strip (lambda (ffa5@x ffa6@m*) (if (fafd@top-marked? ffa6@m*) (if (or (f6bb@f58d@annotation? ffa5@x) (and (pair? ffa5@x) (f6bb@f58d@annotation? (car ffa5@x))) (and (vector? ffa5@x) (> (vector-length ffa5@x) '0) (f6bb@f58d@annotation? (vector-ref ffa5@x '0)))) (fb87@strip-annotations ffa5@x) ffa5@x) (let ffab@f ((ffa9@x ffa5@x)) (if (fb43@stx? ffa9@x) (begin (if (pair? (fb45@stx-expr ffa9@x)) (begin (set-source-info! (fb45@stx-expr ffa9@x) '#f) (set-source-info! (cdr (fb45@stx-expr ffa9@x)) '#f) (set-source-info! (car (fb45@stx-expr ffa9@x)) '#f)) (void)) (fb89@strip (fb45@stx-expr ffa9@x) (fb49@stx-mark* ffa9@x))) (if (f6bb@f58d@annotation? ffa9@x) (f6ba@f58b@annotation-stripped ffa9@x) (if (pair? ffa9@x) (let ((ffad@a (ffab@f (car ffa9@x))) (ffae@d (ffab@f (cdr ffa9@x)))) (if (and (eq? ffad@a (car ffa9@x)) (eq? ffae@d (cdr ffa9@x))) ffa9@x (cons ffad@a ffae@d))) (if (vector? ffa9@x) (let ((ffb1@old (vector->list ffa9@x))) (let ((ffb3@new (map ffab@f ffb1@old))) (if (for-all eq? ffb1@old ffb3@new) ffa9@x (list->vector ffb3@new)))) ffa9@x)))))))) (set! f2807@fb89@strip fb89@strip) (set! fb8b@stx->datum (lambda (ffb5@x) (fb89@strip ffb5@x '()))) (set! f2808@fb8b@stx->datum fb8b@stx->datum) (set! fb8d@id->label (lambda (ffb7@id) (or (id->real-label ffb7@id) (let ((ffb9@t (fe6e@top-level-context))) (if ffb9@t ((lambda (ffbb@env) (let ((ffbd@rib (fe1e@interaction-env-rib ffbb@env))) (call-with-values (lambda () (fb07@gen-define-label+loc ffb7@id ffbd@rib)) (lambda (ffc3@ffc0 ffc4@ffc2) (let ((ffc7@loc_ ffc4@ffc2) (ffc8@lab ffc3@ffc0)) (begin (fb2d@extend-rib! ffbd@rib ffb7@id ffc8@lab) ffc8@lab)))))) ffb9@t) '#f))))) (set! f2809@fb8d@id->label fb8d@id->label) (set! fb8f@label->binding (lambda (ffcb@x ffcc@r) (let ((ffcf@t (f992@f7df@imported-label->binding ffcb@x))) (if ffcf@t ((lambda (ffd1@b) (if (and (pair? ffd1@b) (eq? (car ffd1@b) '$core-rtd)) (cons '$rtd (map fd34@bless (cdr ffd1@b))) (if (and (pair? ffd1@b) (eq? (car ffd1@b) 'global-rtd)) (let ((ffd3@lib (cadr ffd1@b)) (ffd4@loc (cddr ffd1@b))) (cons '$rtd (symbol-value ffd4@loc))) ffd1@b))) ffcf@t) (let ((ffd7@t (assq ffcb@x ffcc@r))) (if ffd7@t (cdr ffd7@t) (let ((ffd9@t (fe6e@top-level-context))) (if ffd9@t ((lambda (ffdb@env) (let ((ffdd@t (assq ffcb@x (fe26@interaction-env-locs ffdb@env)))) (if ffdd@t ((lambda (ffdf@p) (cons* 'lexical (cdr ffdf@p) '#f)) ffdd@t) '(displaced-lexical . #f)))) ffd9@t) '(displaced-lexical . #f))))))))) (set! f280a@fb8f@label->binding fb8f@label->binding) (set! fb91@make-binding cons) (set! f280b@fb91@make-binding fb91@make-binding) (set! fb93@binding-type car) (set! f280c@fb93@binding-type fb93@binding-type) (set! fb95@binding-value cdr) (set! f280d@fb95@binding-value fb95@binding-value) (set! fb97@raise-unbound-error (lambda (ffe1@id) (fe5c@syntax-violation* '#f '"unbound identifier" ffe1@id (make-undefined-violation)))) (set! f280e@fb97@raise-unbound-error fb97@raise-unbound-error) (set! fb99@syntax-type (lambda (ffe3@e ffe4@r) (if (fb77@id? ffe3@e) (let ((ffe7@id ffe3@e)) (let ((ffe9@label (fb8d@id->label ffe7@id))) (let ((ffeb@b (fb8f@label->binding ffe9@label ffe4@r))) (let ((ffed@type (fb93@binding-type ffeb@b))) (begin (if (not ffe9@label) (fb97@raise-unbound-error ffe7@id) (void)) (let ((ffef@t ffed@type)) (if (memv ffef@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values ffed@type (fb95@binding-value ffeb@b) ffe7@id) (values 'other '#f '#f)))))))) (if (fb69@syntax-pair? ffe3@e) (let ((fff1@id (fb71@syntax-car ffe3@e))) (if (fb77@id? fff1@id) (let ((fff3@label (fb8d@id->label fff1@id))) (let ((fff5@b (fb8f@label->binding fff3@label ffe4@r))) (let ((fff7@type (fb93@binding-type fff5@b))) (begin (if (not fff3@label) (fb97@raise-unbound-error fff1@id) (void)) (let ((fff9@t fff7@type)) (if (memv fff9@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values fff7@type (fb95@binding-value fff5@b) fff1@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((fffb@d (fb8b@stx->datum ffe3@e))) (if (fb85@self-evaluating? fffb@d) (values 'constant fffb@d '#f) (values 'other '#f '#f))))))) (set! f280f@fb99@syntax-type fb99@syntax-type) (set! fba7@sanitize-binding (lambda (fffd@x fffe@src) (if (procedure? fffd@x) (cons* 'local-macro fffd@x fffe@src) (if (and (pair? fffd@x) (eq? (car fffd@x) 'macro!) (procedure? (cdr fffd@x))) (cons* 'local-macro! (cdr fffd@x) fffe@src) (if (and (pair? fffd@x) (eq? (car fffd@x) '$rtd)) fffd@x (assertion-violation 'expand '"invalid transformer" fffd@x)))))) (set! f2810@fba7@sanitize-binding fba7@sanitize-binding) (set! fba9@make-variable-transformer (lambda (f1001@x) (if (procedure? f1001@x) (cons 'macro! f1001@x) (assertion-violation 'make-variable-transformer '"not a procedure" f1001@x)))) (set! f2811@fba9@make-variable-transformer fba9@make-variable-transformer) (set! fbab@variable-transformer? (lambda (f1003@x) (and (pair? f1003@x) (eq? (car f1003@x) 'macro!) (procedure? (cdr f1003@x))))) (set! f2812@fbab@variable-transformer? fbab@variable-transformer?) (set! fbad@variable-transformer-procedure (lambda (f1005@x) (if (fbab@variable-transformer? f1005@x) (cdr f1005@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" f1005@x)))) (set! f2813@fbad@variable-transformer-procedure fbad@variable-transformer-procedure) (set! fbaf@make-eval-transformer (lambda (f1007@x) (fba7@sanitize-binding (eval-core (f71d@f6d5@expanded->core f1007@x)) f1007@x))) (set! f2814@fbaf@make-eval-transformer fbaf@make-eval-transformer) (set! fd00@parse-define (lambda (f1009@x) (let ((f100b@t f1009@x)) (let ((f100d@ls/false (fd7e@syntax-dispatch f100b@t '(_ (any . any) any . each-any)))) (if (and f100d@ls/false (apply (lambda (f100f@id f1010@fmls f1011@b f1012@b*) (fb77@id? f100f@id)) f100d@ls/false)) (apply (lambda (f1017@id f1018@fmls f1019@b f101a@b*) (begin (fda4@verify-formals f1018@fmls f1009@x) (values f1017@id (cons 'defun (cons f1018@fmls (cons f1019@b f101a@b*)))))) f100d@ls/false) (let ((f101f@t f100b@t)) (let ((f1021@ls/false (fd7e@syntax-dispatch f101f@t '(_ any any)))) (if (and f1021@ls/false (apply (lambda (f1023@id f1024@val) (fb77@id? f1023@id)) f1021@ls/false)) (apply (lambda (f1027@id f1028@val) (values f1027@id (cons 'expr f1028@val))) f1021@ls/false) (let ((f102b@t f101f@t)) (let ((f102d@ls/false (fd7e@syntax-dispatch f102b@t '(_ any)))) (if (and f102d@ls/false (apply (lambda (f102f@id) (fb77@id? f102f@id)) f102d@ls/false)) (apply (lambda (f1031@id) (values f1031@id (cons 'expr (fd34@bless '(void))))) f102d@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f102b@t)))))))))))) (set! f2815@fd00@parse-define fd00@parse-define) (set! fd02@parse-define-syntax (lambda (f1033@x) (let ((f1035@t f1033@x)) (let ((f1037@ls/false (fd7e@syntax-dispatch f1035@t '(_ any any)))) (if (and f1037@ls/false (apply (lambda (f1039@id f103a@val) (fb77@id? f1039@id)) f1037@ls/false)) (apply (lambda (f103d@id f103e@val) (values f103d@id f103e@val)) f1037@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1035@t)))))) (set! f2816@fd02@parse-define-syntax fd02@parse-define-syntax) (set! fd04@scheme-stx-hashtable (make-eq-hashtable)) (set! f2817@fd04@scheme-stx-hashtable fd04@scheme-stx-hashtable) (set! fd06@scheme-stx (lambda (f1041@sym) (or (hashtable-ref fd04@scheme-stx-hashtable f1041@sym '#f) (let ((f1043@subst (f96e@f797@library-subst (f98c@f7d3@find-library-by-name '(psyntax system $all))))) (let ((f1045@stx (make-simple-struct 'stx '5 (list f1041@sym fafb@top-mark* '() '())))) (let ((f1047@stx (let ((f1049@t (assq f1041@sym f1043@subst))) (if f1049@t ((lambda (f104b@x) (let ((f104d@name (car f104b@x)) (f104e@label (cdr f104b@x))) (fb63@add-subst (make-simple-struct 'rib '6 (list (list f104d@name) (list fafb@top-mark*) (list f104e@label) '#f '#f)) f1045@stx))) f1049@t) f1045@stx)))) (begin (hashtable-set! fd04@scheme-stx-hashtable f1041@sym f1047@stx) f1047@stx))))))) (set! f2818@fd06@scheme-stx fd06@scheme-stx) (set! fd08@lexical-var car) (set! f2819@fd08@lexical-var fd08@lexical-var) (set! fd0a@lexical-mutable? cdr) (set! f281a@fd0a@lexical-mutable? fd0a@lexical-mutable?) (set! fd0c@set-lexical-mutable! set-cdr!) (set! f281b@fd0c@set-lexical-mutable! fd0c@set-lexical-mutable!) (set! fd0e@add-lexical (lambda (f1051@lab f1052@lex f1053@r) (cons (cons* f1051@lab 'lexical f1052@lex '#f) f1053@r))) (set! f281c@fd0e@add-lexical fd0e@add-lexical) (set! fd10@add-lexicals (lambda (f1057@lab* f1058@lex* f1059@r) (if (null? f1057@lab*) f1059@r (fd10@add-lexicals (cdr f1057@lab*) (cdr f1058@lex*) (fd0e@add-lexical (car f1057@lab*) (car f1058@lex*) f1059@r))))) (set! f281d@fd10@add-lexicals fd10@add-lexicals) (set! fd12@letrec-helper (lambda (f105d@e f105e@r f105f@mr f1060@build) (let ((f1065@t f105d@e)) (let ((f1067@ls/false (fd7e@syntax-dispatch f1065@t '(_ #(each (any any)) any . each-any)))) (if f1067@ls/false (apply (lambda (f1069@lhs* f106a@rhs* f106b@b f106c@b*) (if (not (fb7f@valid-bound-ids? f1069@lhs*)) (fd38@invalid-fmls-error f105d@e f1069@lhs*) (let ((f1071@lex* (map faff@gen-lexical f1069@lhs*)) (f1072@lab* (map fb03@gen-label f1069@lhs*))) (let ((f1075@rib (fb37@make-full-rib f1069@lhs* f1072@lab*)) (f1076@r (fd10@add-lexicals f1072@lab* f1071@lex* f105e@r))) (let ((f1079@body (fdb6@chi-internal (fb63@add-subst f1075@rib (cons f106b@b f106c@b*)) f1076@r f105f@mr)) (f107a@rhs* (fd9c@chi-expr* (map (lambda (f107d@x) (fb63@add-subst f1075@rib f107d@x)) f106a@rhs*) f1076@r f105f@mr))) (f1060@build '#f f1071@lex* f107a@rhs* f1079@body)))))) f1067@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1065@t)))))) (set! f281e@fd12@letrec-helper fd12@letrec-helper) (set! fd14@let-transformer (lambda (f107f@e f1080@r f1081@mr) (let ((f1085@t f107f@e)) (let ((f1087@ls/false (fd7e@syntax-dispatch f1085@t '(_ #(each (any any)) any . each-any)))) (if f1087@ls/false (apply (lambda (f1089@lhs* f108a@rhs* f108b@b f108c@b*) (if (not (fb7f@valid-bound-ids? f1089@lhs*)) (fd38@invalid-fmls-error f107f@e f1089@lhs*) (let ((f1091@lex* (map faff@gen-lexical f1089@lhs*)) (f1092@lab* (map fb03@gen-label f1089@lhs*)) (f1093@rhs* (fd9c@chi-expr* f108a@rhs* f1080@r f1081@mr))) (let ((f1097@rib (fb37@make-full-rib f1089@lhs* f1092@lab*)) (f1098@r (fd10@add-lexicals f1092@lab* f1091@lex* f1080@r))) (let ((f109b@body (fdb6@chi-internal (fb63@add-subst f1097@rib (cons f108b@b f108c@b*)) f1098@r f1081@mr))) (fadf@fa42@build-let '#f f1091@lex* f1093@rhs* f109b@body)))))) f1087@ls/false) (let ((f109d@t f1085@t)) (let ((f109f@ls/false (fd7e@syntax-dispatch f109d@t '(_ any #(each (any any)) any . each-any)))) (if f109f@ls/false (apply (lambda (f10a1@loop f10a2@lhs* f10a3@rhs* f10a4@b f10a5@b*) (if (not (fb7f@valid-bound-ids? f10a2@lhs*)) (fd38@invalid-fmls-error f107f@e f10a2@lhs*) (let ((f10ab@lex* (map faff@gen-lexical f10a2@lhs*)) (f10ac@lab* (map fb03@gen-label f10a2@lhs*)) (f10ad@rhs* (fd9c@chi-expr* f10a3@rhs* f1080@r f1081@mr)) (f10ae@loop-lex (faff@gen-lexical f10a1@loop)) (f10af@loop-lab (fb03@gen-label f10a1@loop))) (let ((f10b5@loop-rib (fb37@make-full-rib (list f10a1@loop) (list f10af@loop-lab))) (f10b6@rib (fb37@make-full-rib f10a2@lhs* f10ac@lab*)) (f10b7@r (fd10@add-lexicals (cons f10af@loop-lab f10ac@lab*) (cons f10ae@loop-lex f10ab@lex*) f1080@r))) (let ((f10bb@body (fdb6@chi-internal (fb63@add-subst f10b5@loop-rib (fb63@add-subst f10b6@rib (cons f10a4@b f10a5@b*))) f10b7@r f1081@mr))) (fae0@fa44@build-named-let '#f f10ae@loop-lex f10ab@lex* f10ad@rhs* f10bb@body)))))) f109f@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f109d@t))))))))) (set! f281f@fd14@let-transformer fd14@let-transformer) (set! fd16@letrec-transformer (lambda (f10bd@e f10be@r f10bf@mr) (fd12@letrec-helper f10bd@e f10be@r f10bf@mr fade@fa40@build-letrec))) (set! f2820@fd16@letrec-transformer fd16@letrec-transformer) (set! fd18@letrec*-transformer (lambda (f10c3@e f10c4@r f10c5@mr) (fd12@letrec-helper f10c3@e f10c4@r f10c5@mr fae1@fa46@build-letrec*))) (set! f2821@fd18@letrec*-transformer fd18@letrec*-transformer) (set! fd1a@fluid-let-syntax-transformer (lambda (f10c9@e f10ca@r f10cb@mr) (letrec* ((f10d0@lookup (lambda (f10e3@x) (or (fb8d@id->label f10e3@x) (fe5e@syntax-violation '#f '"unbound identifier" f10c9@e f10e3@x))))) (let ((f10d1@t f10c9@e)) (let ((f10d3@ls/false (fd7e@syntax-dispatch f10d1@t '(_ #(each (any any)) any . each-any)))) (if f10d3@ls/false (apply (lambda (f10d5@lhs* f10d6@rhs* f10d7@b f10d8@b*) (if (not (fb7f@valid-bound-ids? f10d5@lhs*)) (fd38@invalid-fmls-error f10c9@e f10d5@lhs*) (let ((f10dd@lab* (map f10d0@lookup f10d5@lhs*)) (f10de@rhs* (map (lambda (f10e1@x) (fbaf@make-eval-transformer (fdd8@expand-transformer f10e1@x f10cb@mr))) f10d6@rhs*))) (fdb6@chi-internal (cons f10d7@b f10d8@b*) (append (map cons f10dd@lab* f10de@rhs*) f10ca@r) (append (map cons f10dd@lab* f10de@rhs*) f10cb@mr))))) f10d3@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f10d1@t))))))) (set! f2822@fd1a@fluid-let-syntax-transformer fd1a@fluid-let-syntax-transformer) (set! fd1c@type-descriptor-transformer (lambda (f10e5@e f10e6@r f10e7@mr) (let ((f10eb@t f10e5@e)) (let ((f10ed@ls/false (fd7e@syntax-dispatch f10eb@t '(_ any)))) (if (and f10ed@ls/false (apply (lambda (f10ef@id) (fb77@id? f10ef@id)) f10ed@ls/false)) (apply (lambda (f10f1@id) (let ((f10f3@lab (fb8d@id->label f10f1@id))) (let ((f10f5@b (fb8f@label->binding f10f3@lab f10e6@r))) (let ((f10f7@type (fb93@binding-type f10f5@b))) (begin (if (not f10f3@lab) (fb97@raise-unbound-error f10f1@id) (void)) (if (not (and (eq? f10f7@type '$rtd) (not (list? (fb95@binding-value f10f5@b))))) (fe5e@syntax-violation '#f '"not a record type" f10e5@e) (void)) (list 'quote (fb95@binding-value f10f5@b))))))) f10ed@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f10eb@t)))))) (set! f2823@fd1c@type-descriptor-transformer fd1c@type-descriptor-transformer) (set! fd1e@record-type-descriptor-transformer (lambda (f10f9@e f10fa@r f10fb@mr) (let ((f10ff@t f10f9@e)) (let ((f1101@ls/false (fd7e@syntax-dispatch f10ff@t '(_ any)))) (if (and f1101@ls/false (apply (lambda (f1103@id) (fb77@id? f1103@id)) f1101@ls/false)) (apply (lambda (f1105@id) (let ((f1107@lab (fb8d@id->label f1105@id))) (let ((f1109@b (fb8f@label->binding f1107@lab f10fa@r))) (let ((f110b@type (fb93@binding-type f1109@b))) (begin (if (not f1107@lab) (fb97@raise-unbound-error f1105@id) (void)) (if (not (and (eq? f110b@type '$rtd) (list? (fb95@binding-value f1109@b)))) (fe5e@syntax-violation '#f '"not a record type" f10f9@e) (void)) (fda0@chi-expr (car (fb95@binding-value f1109@b)) f10fa@r f10fb@mr)))))) f1101@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f10ff@t)))))) (set! f2824@fd1e@record-type-descriptor-transformer fd1e@record-type-descriptor-transformer) (set! fd20@record-constructor-descriptor-transformer (lambda (f110d@e f110e@r f110f@mr) (let ((f1113@t f110d@e)) (let ((f1115@ls/false (fd7e@syntax-dispatch f1113@t '(_ any)))) (if (and f1115@ls/false (apply (lambda (f1117@id) (fb77@id? f1117@id)) f1115@ls/false)) (apply (lambda (f1119@id) (let ((f111b@lab (fb8d@id->label f1119@id))) (let ((f111d@b (fb8f@label->binding f111b@lab f110e@r))) (let ((f111f@type (fb93@binding-type f111d@b))) (begin (if (not f111b@lab) (fb97@raise-unbound-error f1119@id) (void)) (if (not (and (eq? f111f@type '$rtd) (list? (fb95@binding-value f111d@b)))) (fe5e@syntax-violation '#f '"invalid type" f110d@e) (void)) (fda0@chi-expr (cadr (fb95@binding-value f111d@b)) f110e@r f110f@mr)))))) f1115@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1113@t)))))) (set! f2825@fd20@record-constructor-descriptor-transformer fd20@record-constructor-descriptor-transformer) (set! fd22@when-macro (lambda (f1121@e) (let ((f1123@t f1121@e)) (let ((f1125@ls/false (fd7e@syntax-dispatch f1123@t '(_ any any . each-any)))) (if f1125@ls/false (apply (lambda (f1127@test f1128@e f1129@e*) (fd34@bless (list 'if f1127@test (cons 'begin (cons f1128@e f1129@e*))))) f1125@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1123@t)))))) (set! f2826@fd22@when-macro fd22@when-macro) (set! fd24@unless-macro (lambda (f112d@e) (let ((f112f@t f112d@e)) (let ((f1131@ls/false (fd7e@syntax-dispatch f112f@t '(_ any any . each-any)))) (if f1131@ls/false (apply (lambda (f1133@test f1134@e f1135@e*) (fd34@bless (list 'if (list 'not f1133@test) (cons 'begin (cons f1134@e f1135@e*))))) f1131@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f112f@t)))))) (set! f2827@fd24@unless-macro fd24@unless-macro) (set! fd26@if-transformer (lambda (f1139@e f113a@r f113b@mr) (let ((f113f@t f1139@e)) (let ((f1141@ls/false (fd7e@syntax-dispatch f113f@t '(_ any any any)))) (if f1141@ls/false (apply (lambda (f1143@e0 f1144@e1 f1145@e2) (list 'if (fda0@chi-expr f1143@e0 f113a@r f113b@mr) (fda0@chi-expr f1144@e1 f113a@r f113b@mr) (fda0@chi-expr f1145@e2 f113a@r f113b@mr))) f1141@ls/false) (let ((f1149@t f113f@t)) (let ((f114b@ls/false (fd7e@syntax-dispatch f1149@t '(_ any any)))) (if f114b@ls/false (apply (lambda (f114d@e0 f114e@e1) (list 'if (fda0@chi-expr f114d@e0 f113a@r f113b@mr) (fda0@chi-expr f114e@e1 f113a@r f113b@mr) (fadd@fa3e@build-void))) f114b@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1149@t))))))))) (set! f2828@fd26@if-transformer fd26@if-transformer) (set! fd28@and-transformer (lambda (f1151@e f1152@r f1153@mr) (let ((f1157@t f1151@e)) (let ((f1159@ls/false (fd7e@syntax-dispatch f1157@t '(_ . each-any)))) (if f1159@ls/false (apply (lambda (f115b@e*) (cons 'and (fd9c@chi-expr* f115b@e* f1152@r f1153@mr))) f1159@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1157@t)))))) (set! f2829@fd28@and-transformer fd28@and-transformer) (set! fd2a@or-transformer (lambda (f115d@e f115e@r f115f@mr) (let ((f1163@t f115d@e)) (let ((f1165@ls/false (fd7e@syntax-dispatch f1163@t '(_ . each-any)))) (if f1165@ls/false (apply (lambda (f1167@e*) (cons 'or (fd9c@chi-expr* f1167@e* f115e@r f115f@mr))) f1165@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1163@t)))))) (set! f282a@fd2a@or-transformer fd2a@or-transformer) (set! fd2c@case-macro (lambda (f1169@e) (letrec* ((f116c@build-last (lambda (f1193@cls) (let ((f1195@t f1193@cls)) (let ((f1197@ls/false (fd7e@syntax-dispatch f1195@t '(#(scheme-id else) any . each-any)))) (if f1197@ls/false (apply (lambda (f1199@e f119a@e*) (cons 'begin (cons f1199@e f119a@e*))) f1197@ls/false) (let ((f119d@t f1195@t)) (let ((f119f@ls/false (fd7e@syntax-dispatch f119d@t '_))) (if f119f@ls/false (apply (lambda () (f116e@build-one f1193@cls '(if #f #f))) f119f@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f119d@t))))))))) (f116e@build-one (lambda (f1185@cls f1186@k) (let ((f1189@t f1185@cls)) (let ((f118b@ls/false (fd7e@syntax-dispatch f1189@t '(each-any any . each-any)))) (if f118b@ls/false (apply (lambda (f118d@d* f118e@e f118f@e*) (list 'if (list 'memv 't (list 'quote f118d@d*)) (cons 'begin (cons f118e@e f118f@e*)) f1186@k)) f118b@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1189@t))))))) (let ((f116f@t f1169@e)) (let ((f1171@ls/false (fd7e@syntax-dispatch f116f@t '(_ any)))) (if f1171@ls/false (apply (lambda (f1173@expr) (fd34@bless (cons 'let (cons (list (list 't f1173@expr)) '((if #f #f)))))) f1171@ls/false) (let ((f1175@t f116f@t)) (let ((f1177@ls/false (fd7e@syntax-dispatch f1175@t '(_ any any . each-any)))) (if f1177@ls/false (apply (lambda (f1179@expr f117a@cls f117b@cls*) (fd34@bless (list 'let (list (list 't f1179@expr)) (let f1183@f ((f117f@cls f117a@cls) (f1180@cls* f117b@cls*)) (if (null? f1180@cls*) (f116c@build-last f117f@cls) (f116e@build-one f117f@cls (f1183@f (car f1180@cls*) (cdr f1180@cls*)))))))) f1177@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1175@t)))))))))) (set! f282b@fd2c@case-macro fd2c@case-macro) (set! fd2e@quote-transformer (lambda (f11a1@e f11a2@r f11a3@mr) (let ((f11a7@t f11a1@e)) (let ((f11a9@ls/false (fd7e@syntax-dispatch f11a7@t '(_ any)))) (if f11a9@ls/false (apply (lambda (f11ab@datum) (list 'quote (fb8b@stx->datum f11ab@datum))) f11a9@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f11a7@t)))))) (set! f282c@fd2e@quote-transformer fd2e@quote-transformer) (set! fd30@case-lambda-transformer (lambda (f11ad@e f11ae@r f11af@mr) (let ((f11b3@t f11ad@e)) (let ((f11b5@ls/false (fd7e@syntax-dispatch f11b3@t '(_ . #(each (any any . each-any)))))) (if f11b5@ls/false (apply (lambda (f11b7@fmls* f11b8@b* f11b9@b**) (call-with-values (lambda () (fda8@chi-lambda-clause* f11ad@e f11b7@fmls* (map cons f11b8@b* f11b9@b**) f11ae@r f11af@mr)) (lambda (f11c1@f11be f11c2@f11c0) (let ((f11c5@body* f11c2@f11c0) (f11c6@fmls* f11c1@f11be)) (fadb@fa0e@build-case-lambda '#f f11c6@fmls* f11c5@body*))))) f11b5@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f11b3@t)))))) (set! f282d@fd30@case-lambda-transformer fd30@case-lambda-transformer) (set! fd32@lambda-transformer (lambda (f11c9@e f11ca@r f11cb@mr) (let ((f11cf@t f11c9@e)) (let ((f11d1@ls/false (fd7e@syntax-dispatch f11cf@t '(_ any any . each-any)))) (if f11d1@ls/false (apply (lambda (f11d3@fmls f11d4@b f11d5@b*) (call-with-values (lambda () (fda6@chi-lambda-clause f11c9@e f11d3@fmls (cons f11d4@b f11d5@b*) f11ca@r f11cb@mr)) (lambda (f11dd@f11da f11de@f11dc) (let ((f11e1@body f11de@f11dc) (f11e2@fmls f11dd@f11da)) (fada@fa0c@build-lambda '#f f11e2@fmls f11e1@body))))) f11d1@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f11cf@t)))))) (set! f282e@fd32@lambda-transformer fd32@lambda-transformer) (set! fd34@bless (lambda (f11e5@x) (fb5f@mkstx (let f11e9@f ((f11e7@x f11e5@x)) (if (fb43@stx? f11e7@x) f11e7@x (if (pair? f11e7@x) (cons (f11e9@f (car f11e7@x)) (f11e9@f (cdr f11e7@x))) (if (symbol? f11e7@x) (fd06@scheme-stx f11e7@x) (if (vector? f11e7@x) (vector-map f11e9@f f11e7@x) f11e7@x))))) '() '() '()))) (set! f282f@fd34@bless fd34@bless) (set! fd36@with-syntax-macro (lambda (f11eb@e) (let ((f11ed@t f11eb@e)) (let ((f11ef@ls/false (fd7e@syntax-dispatch f11ed@t '(_ #(each (any any)) any . each-any)))) (if f11ef@ls/false (apply (lambda (f11f1@pat* f11f2@expr* f11f3@b f11f4@b*) (let ((f11f9@idn* (let f11fd@f ((f11fb@pat* f11f1@pat*)) (if (null? f11fb@pat*) '() (call-with-values (lambda () (fd7c@convert-pattern (car f11fb@pat*) '())) (lambda (f1203@f1200 f1204@f1202) (let ((f1207@idn* f1204@f1202) (f1208@pat f1203@f1200)) (append f1207@idn* (f11fd@f (cdr f11fb@pat*)))))))))) (begin (fda4@verify-formals (map car f11f9@idn*) f11eb@e) (let ((f120b@t* (fe4c@generate-temporaries f11f2@expr*))) (fd34@bless (list 'let (map list f120b@t* f11f2@expr*) (let f1211@f ((f120d@pat* f11f1@pat*) (f120e@t* f120b@t*)) (if (null? f120d@pat*) (cons 'begin (cons '#f (cons f11f3@b f11f4@b*))) (list 'syntax-case (car f120e@t*) '() (list (car f120d@pat*) (f1211@f (cdr f120d@pat*) (cdr f120e@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car f120d@pat*)) (car f120e@t*)))))))))))) f11ef@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f11ed@t)))))) (set! f2830@fd36@with-syntax-macro fd36@with-syntax-macro) (set! fd38@invalid-fmls-error (lambda (f1213@stx f1214@fmls) (let ((f1217@t f1214@fmls)) (let ((f1219@ls/false (fd7e@syntax-dispatch f1217@t '#(each+ any () any)))) (if f1219@ls/false (apply (lambda (f121b@id* f121c@last) (let f1221@f ((f121f@id* (if (fb77@id? f121c@last) (cons f121c@last f121b@id*) (if (fb6d@syntax-null? f121c@last) f121b@id* (fe5e@syntax-violation '#f '"not an identifier" f1213@stx f121c@last))))) (if (null? f121f@id*) (values) (if (not (fb77@id? (car f121f@id*))) (fe5e@syntax-violation '#f '"not an identifier" f1213@stx (car f121f@id*)) (begin (f1221@f (cdr f121f@id*)) (if (fb83@bound-id-member? (car f121f@id*) (cdr f121f@id*)) (fe5e@syntax-violation '#f '"duplicate binding" f1213@stx (car f121f@id*)) (void))))))) f1219@ls/false) (let ((f1223@t f1217@t)) (let ((f1225@ls/false (fd7e@syntax-dispatch f1223@t '_))) (if f1225@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"malformed binding form" f1213@stx f1214@fmls)) f1225@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1223@t))))))))) (set! f2831@fd38@invalid-fmls-error fd38@invalid-fmls-error) (set! fd3a@let-macro (lambda (f1227@stx) (let ((f1229@t f1227@stx)) (let ((f122b@ls/false (fd7e@syntax-dispatch f1229@t '(_ #(each (any any)) any . each-any)))) (if f122b@ls/false (apply (lambda (f122d@lhs* f122e@rhs* f122f@b f1230@b*) (if (fb7f@valid-bound-ids? f122d@lhs*) (fd34@bless (cons (cons 'lambda (cons f122d@lhs* (cons f122f@b f1230@b*))) f122e@rhs*)) (fd38@invalid-fmls-error f1227@stx f122d@lhs*))) f122b@ls/false) (let ((f1235@t f1229@t)) (let ((f1237@ls/false (fd7e@syntax-dispatch f1235@t '(_ any #(each (any any)) any . each-any)))) (if (and f1237@ls/false (apply (lambda (f1239@f f123a@lhs* f123b@rhs* f123c@b f123d@b*) (fb77@id? f1239@f)) f1237@ls/false)) (apply (lambda (f1243@f f1244@lhs* f1245@rhs* f1246@b f1247@b*) (if (fb7f@valid-bound-ids? f1244@lhs*) (fd34@bless (cons (list 'letrec (list (list f1243@f (cons 'lambda (cons f1244@lhs* (cons f1246@b f1247@b*))))) f1243@f) f1245@rhs*)) (fd38@invalid-fmls-error f1227@stx f1244@lhs*))) f1237@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1235@t))))))))) (set! f2832@fd3a@let-macro fd3a@let-macro) (set! fd3c@let-values-macro (lambda (f124d@stx) (letrec* ((f1250@rename (lambda (f12b5@x f12b6@old* f12b7@new*) (begin (if (not (fb77@id? f12b5@x)) (fe5e@syntax-violation '#f '"not an indentifier" f124d@stx f12b5@x) (void)) (if (fb83@bound-id-member? f12b5@x f12b6@old*) (fe5e@syntax-violation '#f '"duplicate binding" f124d@stx f12b5@x) (void)) (let ((f12bb@y (gensym (fe64@syntax->datum f12b5@x)))) (values f12bb@y (cons f12b5@x f12b6@old*) (cons f12bb@y f12b7@new*)))))) (f1252@rename* (lambda (f12a3@x* f12a4@old* f12a5@new*) (if (null? f12a3@x*) (values '() f12a4@old* f12a5@new*) (call-with-values (lambda () (f1250@rename (car f12a3@x*) f12a4@old* f12a5@new*)) (lambda (f12a9@x f12aa@old* f12ab@new*) (call-with-values (lambda () (f1252@rename* (cdr f12a3@x*) f12aa@old* f12ab@new*)) (lambda (f12af@x* f12b0@old* f12b1@new*) (values (cons f12a9@x f12af@x*) f12b0@old* f12b1@new*))))))))) (let ((f1253@t f124d@stx)) (let ((f1255@ls/false (fd7e@syntax-dispatch f1253@t '(_ () any . each-any)))) (if f1255@ls/false (apply (lambda (f1257@b f1258@b*) (cons* (fd34@bless 'let) '() f1257@b f1258@b*)) f1255@ls/false) (let ((f125b@t f1253@t)) (let ((f125d@ls/false (fd7e@syntax-dispatch f125b@t '(_ #(each (any any)) any . each-any)))) (if f125d@ls/false (apply (lambda (f125f@lhs* f1260@rhs* f1261@b f1262@b*) (fd34@bless (let f126f@f ((f1267@lhs* f125f@lhs*) (f1268@rhs* f1260@rhs*) (f1269@old* '()) (f126a@new* '())) (if (null? f1267@lhs*) (cons 'let (cons (map list f1269@old* f126a@new*) (cons f1261@b f1262@b*))) (let ((f1271@t (car f1267@lhs*))) (let ((f1273@ls/false (fd7e@syntax-dispatch f1271@t 'each-any))) (if f1273@ls/false (apply (lambda (f1275@x*) (call-with-values (lambda () (f1252@rename* f1275@x* f1269@old* f126a@new*)) (lambda (f127d@f1278 f127e@f127a f127f@f127c) (let ((f1283@new* f127f@f127c) (f1284@old* f127e@f127a) (f1285@y* f127d@f1278)) (list 'call-with-values (list 'lambda '() (car f1268@rhs*)) (list 'lambda f1285@y* (f126f@f (cdr f1267@lhs*) (cdr f1268@rhs*) f1284@old* f1283@new*))))))) f1273@ls/false) (let ((f1289@t f1271@t)) (let ((f128b@ls/false (fd7e@syntax-dispatch f1289@t '#(each+ any () any)))) (if f128b@ls/false (apply (lambda (f128d@x* f128e@x) (call-with-values (lambda () (f1250@rename f128e@x f1269@old* f126a@new*)) (lambda (f1291@y f1292@old* f1293@new*) (call-with-values (lambda () (f1252@rename* f128d@x* f1292@old* f1293@new*)) (lambda (f1297@y* f1298@old* f1299@new*) (list 'call-with-values (list 'lambda '() (car f1268@rhs*)) (list 'lambda (append f1297@y* f1291@y) (f126f@f (cdr f1267@lhs*) (cdr f1268@rhs*) f1298@old* f1299@new*)))))))) f128b@ls/false) (let ((f129d@t f1289@t)) (let ((f129f@ls/false (fd7e@syntax-dispatch f129d@t 'any))) (if f129f@ls/false (apply (lambda (f12a1@others) (fe5e@syntax-violation '#f '"malformed bindings" f124d@stx f12a1@others)) f129f@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f129d@t)))))))))))))) f125d@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f125b@t)))))))))) (set! f2833@fd3c@let-values-macro fd3c@let-values-macro) (set! fd3e@let*-values-macro (lambda (f12bd@stx) (letrec* ((f12c0@check (lambda (f12ef@x*) (if (not (null? f12ef@x*)) (let ((f12f1@x (car f12ef@x*))) (begin (if (not (fb77@id? f12f1@x)) (fe5e@syntax-violation '#f '"not an identifier" f12bd@stx f12f1@x) (void)) (f12c0@check (cdr f12ef@x*)) (if (fb83@bound-id-member? f12f1@x (cdr f12ef@x*)) (fe5e@syntax-violation '#f '"duplicate identifier" f12bd@stx f12f1@x) (void)))) (void))))) (let ((f12c1@t f12bd@stx)) (let ((f12c3@ls/false (fd7e@syntax-dispatch f12c1@t '(_ () any . each-any)))) (if f12c3@ls/false (apply (lambda (f12c5@b f12c6@b*) (cons* (fd34@bless 'let) '() f12c5@b f12c6@b*)) f12c3@ls/false) (let ((f12c9@t f12c1@t)) (let ((f12cb@ls/false (fd7e@syntax-dispatch f12c9@t '(_ #(each (any any)) any . each-any)))) (if f12cb@ls/false (apply (lambda (f12cd@lhs* f12ce@rhs* f12cf@b f12d0@b*) (fd34@bless (let f12d9@f ((f12d5@lhs* f12cd@lhs*) (f12d6@rhs* f12ce@rhs*)) (if (null? f12d5@lhs*) (cons 'begin (cons f12cf@b f12d0@b*)) (let ((f12db@t (car f12d5@lhs*))) (let ((f12dd@ls/false (fd7e@syntax-dispatch f12db@t 'each-any))) (if f12dd@ls/false (apply (lambda (f12df@x*) (begin (f12c0@check f12df@x*) (list 'call-with-values (list 'lambda '() (car f12d6@rhs*)) (list 'lambda f12df@x* (f12d9@f (cdr f12d5@lhs*) (cdr f12d6@rhs*)))))) f12dd@ls/false) (let ((f12e1@t f12db@t)) (let ((f12e3@ls/false (fd7e@syntax-dispatch f12e1@t '#(each+ any () any)))) (if f12e3@ls/false (apply (lambda (f12e5@x* f12e6@x) (begin (f12c0@check (cons f12e6@x f12e5@x*)) (list 'call-with-values (list 'lambda '() (car f12d6@rhs*)) (list 'lambda (append f12e5@x* f12e6@x) (f12d9@f (cdr f12d5@lhs*) (cdr f12d6@rhs*)))))) f12e3@ls/false) (let ((f12e9@t f12e1@t)) (let ((f12eb@ls/false (fd7e@syntax-dispatch f12e9@t 'any))) (if f12eb@ls/false (apply (lambda (f12ed@others) (fe5e@syntax-violation '#f '"malformed bindings" f12bd@stx f12ed@others)) f12eb@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f12e9@t)))))))))))))) f12cb@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f12c9@t)))))))))) (set! f2834@fd3e@let*-values-macro fd3e@let*-values-macro) (set! fd40@trace-lambda-macro (lambda (f12f3@stx) (let ((f12f5@t f12f3@stx)) (let ((f12f7@ls/false (fd7e@syntax-dispatch f12f5@t '(_ any each-any any . each-any)))) (if f12f7@ls/false (apply (lambda (f12f9@who f12fa@fmls f12fb@b f12fc@b*) (if (fb7f@valid-bound-ids? f12fa@fmls) (fd34@bless (list 'make-traced-procedure (list 'quote f12f9@who) (cons 'lambda (cons f12fa@fmls (cons f12fb@b f12fc@b*))))) (fd38@invalid-fmls-error f12f3@stx f12fa@fmls))) f12f7@ls/false) (let ((f1301@t f12f5@t)) (let ((f1303@ls/false (fd7e@syntax-dispatch f1301@t '(_ any #(each+ any () any) any . each-any)))) (if f1303@ls/false (apply (lambda (f1305@who f1306@fmls f1307@last f1308@b f1309@b*) (if (fb7f@valid-bound-ids? (cons f1307@last f1306@fmls)) (fd34@bless (list 'make-traced-procedure (list 'quote f1305@who) (cons 'lambda (cons (append f1306@fmls f1307@last) (cons f1308@b f1309@b*))))) (fd38@invalid-fmls-error f12f3@stx (append f1306@fmls f1307@last)))) f1303@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1301@t))))))))) (set! f2835@fd40@trace-lambda-macro fd40@trace-lambda-macro) (set! fd42@trace-define-macro (lambda (f130f@stx) (let ((f1311@t f130f@stx)) (let ((f1313@ls/false (fd7e@syntax-dispatch f1311@t '(_ (any . each-any) any . each-any)))) (if f1313@ls/false (apply (lambda (f1315@who f1316@fmls f1317@b f1318@b*) (if (fb7f@valid-bound-ids? f1316@fmls) (fd34@bless (list 'define f1315@who (list 'make-traced-procedure (list 'quote f1315@who) (cons 'lambda (cons f1316@fmls (cons f1317@b f1318@b*)))))) (fd38@invalid-fmls-error f130f@stx f1316@fmls))) f1313@ls/false) (let ((f131d@t f1311@t)) (let ((f131f@ls/false (fd7e@syntax-dispatch f131d@t '(_ (any . #(each+ any () any)) any . each-any)))) (if f131f@ls/false (apply (lambda (f1321@who f1322@fmls f1323@last f1324@b f1325@b*) (if (fb7f@valid-bound-ids? (cons f1323@last f1322@fmls)) (fd34@bless (list 'define f1321@who (list 'make-traced-procedure (list 'quote f1321@who) (cons 'lambda (cons (append f1322@fmls f1323@last) (cons f1324@b f1325@b*)))))) (fd38@invalid-fmls-error f130f@stx (append f1322@fmls f1323@last)))) f131f@ls/false) (let ((f132b@t f131d@t)) (let ((f132d@ls/false (fd7e@syntax-dispatch f132b@t '(_ any any)))) (if f132d@ls/false (apply (lambda (f132f@who f1330@expr) (if (fb77@id? f132f@who) (fd34@bless (list 'define f132f@who (list 'let (list (list 'v f1330@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote f132f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (fe5e@syntax-violation '#f '"invalid name" f130f@stx))) f132d@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f132b@t)))))))))))) (set! f2836@fd42@trace-define-macro fd42@trace-define-macro) (set! fd44@trace-define-syntax-macro (lambda (f1333@stx) (let ((f1335@t f1333@stx)) (let ((f1337@ls/false (fd7e@syntax-dispatch f1335@t '(_ any any)))) (if f1337@ls/false (apply (lambda (f1339@who f133a@expr) (if (fb77@id? f1339@who) (fd34@bless (list 'define-syntax f1339@who (list 'make-traced-macro (list 'quote f1339@who) f133a@expr))) (fe5e@syntax-violation '#f '"invalid name" f1333@stx))) f1337@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1335@t)))))) (set! f2837@fd44@trace-define-syntax-macro fd44@trace-define-syntax-macro) (set! fd46@trace-let/rec-syntax (lambda (f133d@who) (lambda (f133f@stx) (let ((f1341@t f133f@stx)) (let ((f1343@ls/false (fd7e@syntax-dispatch f1341@t '(_ #(each (any any)) any . each-any)))) (if f1343@ls/false (apply (lambda (f1345@lhs* f1346@rhs* f1347@b f1348@b*) (if (fb7f@valid-bound-ids? f1345@lhs*) (let ((f134d@rhs* (map (lambda (f134f@lhs f1350@rhs) (list 'make-traced-macro (list 'quote f134f@lhs) f1350@rhs)) f1345@lhs* f1346@rhs*))) (fd34@bless (cons f133d@who (cons (map list f1345@lhs* f134d@rhs*) (cons f1347@b f1348@b*))))) (fd38@invalid-fmls-error f133f@stx f1345@lhs*))) f1343@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1341@t))))))) (set! f2838@fd46@trace-let/rec-syntax fd46@trace-let/rec-syntax) (set! fd48@trace-let-syntax-macro (fd46@trace-let/rec-syntax 'let-syntax)) (set! f2839@fd48@trace-let-syntax-macro fd48@trace-let-syntax-macro) (set! fd4a@trace-letrec-syntax-macro (fd46@trace-let/rec-syntax 'letrec-syntax)) (set! f283a@fd4a@trace-letrec-syntax-macro fd4a@trace-letrec-syntax-macro) (set! fd4c@guard-macro (lambda (f1353@x) (letrec* ((f1356@gen-clauses (lambda (f136d@con f136e@outerk f136f@clause*) (letrec* ((f1374@f (lambda (f13ad@x f13ae@k) (let ((f13b1@t f13ad@x)) (let ((f13b3@ls/false (fd7e@syntax-dispatch f13b1@t '(any #(scheme-id =>) any)))) (if f13b3@ls/false (apply (lambda (f13b5@e f13b6@p) (let ((f13b9@t (gensym))) (list 'let (list (list f13b9@t f13b5@e)) (list 'if f13b9@t (list f13b6@p f13b9@t) f13ae@k)))) f13b3@ls/false) (let ((f13bb@t f13b1@t)) (let ((f13bd@ls/false (fd7e@syntax-dispatch f13bb@t '(any)))) (if f13bd@ls/false (apply (lambda (f13bf@e) (let ((f13c1@t (gensym))) (list 'let (list (list f13c1@t f13bf@e)) (list 'if f13c1@t f13c1@t f13ae@k)))) f13bd@ls/false) (let ((f13c3@t f13bb@t)) (let ((f13c5@ls/false (fd7e@syntax-dispatch f13c3@t '(any any . each-any)))) (if f13c5@ls/false (apply (lambda (f13c7@e f13c8@v f13c9@v*) (list 'if f13c7@e (cons 'begin (cons f13c8@v f13c9@v*)) f13ae@k)) f13c5@ls/false) (let ((f13cd@t f13c3@t)) (let ((f13cf@ls/false (fd7e@syntax-dispatch f13cd@t '_))) (if f13cf@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid guard clause" f13ad@x)) f13cf@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f13cd@t))))))))))))))) (f1376@f* (lambda (f1383@x*) (let ((f1385@t f1383@x*)) (let ((f1387@ls/false (fd7e@syntax-dispatch f1385@t '()))) (if f1387@ls/false (apply (lambda () (let ((f1389@g (gensym))) (values (list f1389@g (list 'lambda '() (list 'raise-continuable f136d@con))) f1389@g))) f1387@ls/false) (let ((f138b@t f1385@t)) (let ((f138d@ls/false (fd7e@syntax-dispatch f138b@t '((#(scheme-id else) any . each-any))))) (if f138d@ls/false (apply (lambda (f138f@e f1390@e*) (values (cons 'begin (cons f138f@e f1390@e*)) '#f)) f138d@ls/false) (let ((f1393@t f138b@t)) (let ((f1395@ls/false (fd7e@syntax-dispatch f1393@t '(any . any)))) (if f1395@ls/false (apply (lambda (f1397@cls f1398@cls*) (call-with-values (lambda () (f1376@f* f1398@cls*)) (lambda (f139f@f139c f13a0@f139e) (let ((f13a3@g f13a0@f139e) (f13a4@e f139f@f139c)) (values (f1374@f f1397@cls f13a4@e) f13a3@g))))) f1395@ls/false) (let ((f13a7@t f1393@t)) (let ((f13a9@ls/false (fd7e@syntax-dispatch f13a7@t 'any))) (if f13a9@ls/false (apply (lambda (f13ab@others) (fe5e@syntax-violation '#f '"invalid guard clause" f13ab@others)) f13a9@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f13a7@t)))))))))))))))) (call-with-values (lambda () (f1376@f* f136f@clause*)) (lambda (f137b@f1378 f137c@f137a) (let ((f137f@raisek f137c@f137a) (f1380@code f137b@f1378)) (if f137f@raisek (list (list 'call/cc (list 'lambda (list f137f@raisek) (list f136e@outerk (list 'lambda '() f1380@code))))) (list f136e@outerk (list 'lambda '() f1380@code)))))))))) (let ((f1357@t f1353@x)) (let ((f1359@ls/false (fd7e@syntax-dispatch f1357@t '(_ (any . each-any) any . each-any)))) (if (and f1359@ls/false (apply (lambda (f135b@con f135c@clause* f135d@b f135e@b*) (fb77@id? f135b@con)) f1359@ls/false)) (apply (lambda (f1363@con f1364@clause* f1365@b f1366@b*) (let ((f136b@outerk (gensym))) (fd34@bless (list (list 'call/cc (list 'lambda (list f136b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list f1363@con) (f1356@gen-clauses f1363@con f136b@outerk f1364@clause*)) (cons 'lambda (cons '() (cons f1365@b f1366@b*))))))))))) f1359@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1357@t))))))) (set! f283b@fd4c@guard-macro fd4c@guard-macro) (set! fd4e@define-enumeration-macro (lambda (f13d1@stx) (letrec* ((f13d4@set? (lambda (f13ed@x) (or (null? f13ed@x) (and (not (memq (car f13ed@x) (cdr f13ed@x))) (f13d4@set? (cdr f13ed@x)))))) (f13d6@remove-dups (lambda (f13eb@ls) (if (null? f13eb@ls) '() (cons (car f13eb@ls) (f13d6@remove-dups (remq (car f13eb@ls) (cdr f13eb@ls)))))))) (let ((f13d7@t f13d1@stx)) (let ((f13d9@ls/false (fd7e@syntax-dispatch f13d7@t '(_ any each-any any)))) (if (and f13d9@ls/false (apply (lambda (f13db@name f13dc@id* f13dd@maker) (and (fb77@id? f13db@name) (fb77@id? f13dd@maker) (for-all fb77@id? f13dc@id*))) f13d9@ls/false)) (apply (lambda (f13e1@name f13e2@id* f13e3@maker) (let ((f13e7@name* (f13d6@remove-dups (fe64@syntax->datum f13e2@id*))) (f13e8@mk (gensym))) (fd34@bless (list 'begin (list 'define f13e8@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote f13e7@name*)))) (list 'define-syntax f13e1@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote f13e7@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote f13e1@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax f13e3@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote f13e3@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote f13e7@name*)) (cons 'syntax-violation (cons (list 'quote f13e3@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons f13e8@mk '('(n* ...))))))))))))) f13d9@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f13d7@t))))))) (set! f283c@fd4e@define-enumeration-macro fd4e@define-enumeration-macro) (set! fd50@time-macro (lambda (f13ef@stx) (let ((f13f1@t f13ef@stx)) (let ((f13f3@ls/false (fd7e@syntax-dispatch f13f1@t '(_ any)))) (if f13f3@ls/false (apply (lambda (f13f5@expr) (fd34@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() f13f5@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) f13f3@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f13f1@t)))))) (set! f283d@fd50@time-macro fd50@time-macro) (set! fd52@delay-macro (lambda (f13f7@stx) (let ((f13f9@t f13f7@stx)) (let ((f13fb@ls/false (fd7e@syntax-dispatch f13f9@t '(_ any)))) (if f13fb@ls/false (apply (lambda (f13fd@expr) (fd34@bless (list 'make-promise (list 'lambda '() f13fd@expr)))) f13fb@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f13f9@t)))))) (set! f283e@fd52@delay-macro fd52@delay-macro) (set! fd54@assert-macro (lambda (f13ff@stx) (let ((f1401@t f13ff@stx)) (let ((f1403@ls/false (fd7e@syntax-dispatch f1401@t '(_ any)))) (if f1403@ls/false (apply (lambda (f1405@expr) (let ((f1407@pos (or (fe56@expression-position f13ff@stx) (fe56@expression-position f1405@expr)))) (fd34@bless (list 'let (list (list 'x f1405@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote f1405@expr) (list 'quote f1407@pos))))))) f1403@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1401@t)))))) (set! f283f@fd54@assert-macro fd54@assert-macro) (set! fd56@endianness-macro (lambda (f1409@stx) (let ((f140b@t f1409@stx)) (let ((f140d@ls/false (fd7e@syntax-dispatch f140b@t '(_ any)))) (if f140d@ls/false (apply (lambda (f140f@e) (let ((f1411@t (fe64@syntax->datum f140f@e))) (if (memv f1411@t '(little)) (fd34@bless ''little) (if (memv f1411@t '(big)) (fd34@bless ''big) (fe5e@syntax-violation '#f '"endianness must be big or little" f1409@stx))))) f140d@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f140b@t)))))) (set! f2840@fd56@endianness-macro fd56@endianness-macro) (set! fd58@identifier-syntax-macro (lambda (f1413@stx) (let ((f1415@t f1413@stx)) (let ((f1417@ls/false (fd7e@syntax-dispatch f1415@t '(_ any)))) (if f1417@ls/false (apply (lambda (f1419@expr) (fd34@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax f1419@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax f1419@expr) '((syntax (e* ...)))))))))) f1417@ls/false) (let ((f141b@t f1415@t)) (let ((f141d@ls/false (fd7e@syntax-dispatch f141b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and f141d@ls/false (apply (lambda (f141f@id1 f1420@expr1 f1421@id2 f1422@expr2 f1423@expr3) (and (fb77@id? f141f@id1) (fb77@id? f1421@id2) (fb77@id? f1422@expr2))) f141d@ls/false)) (apply (lambda (f1429@id1 f142a@expr1 f142b@id2 f142c@expr2 f142d@expr3) (fd34@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax f142a@expr1)) (list (list 'set! 'id f142c@expr2) (list 'syntax f142d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons f142a@expr1 '(e* ...))))))))) f141d@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f141b@t))))))))) (set! f2841@fd58@identifier-syntax-macro fd58@identifier-syntax-macro) (set! fd5a@do-macro (lambda (f1433@stx) (letrec* ((f1436@bind (lambda (f144d@x) (let ((f144f@t f144d@x)) (let ((f1451@ls/false (fd7e@syntax-dispatch f144f@t '(any any)))) (if f1451@ls/false (apply (lambda (f1453@x f1454@init) (list f1453@x f1454@init f1453@x)) f1451@ls/false) (let ((f1457@t f144f@t)) (let ((f1459@ls/false (fd7e@syntax-dispatch f1457@t '(any any any)))) (if f1459@ls/false (apply (lambda (f145b@x f145c@init f145d@step) (list f145b@x f145c@init f145d@step)) f1459@ls/false) (let ((f1461@t f1457@t)) (let ((f1463@ls/false (fd7e@syntax-dispatch f1461@t '_))) (if f1463@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid binding" f1433@stx)) f1463@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1461@t))))))))))))) (let ((f1437@t f1433@stx)) (let ((f1439@ls/false (fd7e@syntax-dispatch f1437@t '(_ each-any (any . each-any) . each-any)))) (if f1439@ls/false (apply (lambda (f143b@binding* f143c@test f143d@expr* f143e@command*) (let ((f1443@t (map f1436@bind f143b@binding*))) (let ((f1445@ls/false (fd7e@syntax-dispatch f1443@t '#(each (any any any))))) (if f1445@ls/false (apply (lambda (f1447@x* f1448@init* f1449@step*) (if (fb7f@valid-bound-ids? f1447@x*) (fd34@bless (list 'letrec (list (list 'loop (list 'lambda f1447@x* (list 'if f143c@test (cons 'begin (cons '(if #f #f) f143d@expr*)) (cons 'begin (append f143e@command* (list (cons 'loop f1449@step*)))))))) (cons 'loop f1448@init*))) (fe5e@syntax-violation '#f '"invalid bindings" f1433@stx))) f1445@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1443@t))))) f1439@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1437@t))))))) (set! f2842@fd5a@do-macro fd5a@do-macro) (set! fd5c@let*-macro (lambda (f1465@stx) (let ((f1467@t f1465@stx)) (let ((f1469@ls/false (fd7e@syntax-dispatch f1467@t '(_ #(each (any any)) any . each-any)))) (if (and f1469@ls/false (apply (lambda (f146b@lhs* f146c@rhs* f146d@b f146e@b*) (for-all fb77@id? f146b@lhs*)) f1469@ls/false)) (apply (lambda (f1473@lhs* f1474@rhs* f1475@b f1476@b*) (fd34@bless (let f147d@f ((f147b@x* (map list f1473@lhs* f1474@rhs*))) (if (null? f147b@x*) (cons 'let (cons '() (cons f1475@b f1476@b*))) (list 'let (list (car f147b@x*)) (f147d@f (cdr f147b@x*))))))) f1469@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1467@t)))))) (set! f2843@fd5c@let*-macro fd5c@let*-macro) (set! fd5e@or-macro (lambda (f147f@stx) (let ((f1481@t f147f@stx)) (let ((f1483@ls/false (fd7e@syntax-dispatch f1481@t '(_)))) (if f1483@ls/false (apply (lambda () '#f) f1483@ls/false) (let ((f1485@t f1481@t)) (let ((f1487@ls/false (fd7e@syntax-dispatch f1485@t '(_ any . each-any)))) (if f1487@ls/false (apply (lambda (f1489@e f148a@e*) (fd34@bless (let f1491@f ((f148d@e f1489@e) (f148e@e* f148a@e*)) (if (null? f148e@e*) (list 'begin '#f f148d@e) (list 'let (list (list 't f148d@e)) (list 'if 't 't (f1491@f (car f148e@e*) (cdr f148e@e*)))))))) f1487@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1485@t))))))))) (set! f2844@fd5e@or-macro fd5e@or-macro) (set! fd60@and-macro (lambda (f1493@stx) (let ((f1495@t f1493@stx)) (let ((f1497@ls/false (fd7e@syntax-dispatch f1495@t '(_)))) (if f1497@ls/false (apply (lambda () '#t) f1497@ls/false) (let ((f1499@t f1495@t)) (let ((f149b@ls/false (fd7e@syntax-dispatch f1499@t '(_ any . each-any)))) (if f149b@ls/false (apply (lambda (f149d@e f149e@e*) (fd34@bless (let f14a5@f ((f14a1@e f149d@e) (f14a2@e* f149e@e*)) (if (null? f14a2@e*) (list 'begin '#f f14a1@e) (cons 'if (cons f14a1@e (cons (f14a5@f (car f14a2@e*) (cdr f14a2@e*)) '(#f)))))))) f149b@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1499@t))))))))) (set! f2845@fd60@and-macro fd60@and-macro) (set! fd62@cond-macro (lambda (f14a7@stx) (let ((f14a9@t f14a7@stx)) (let ((f14ab@ls/false (fd7e@syntax-dispatch f14a9@t '(_ any . each-any)))) (if f14ab@ls/false (apply (lambda (f14ad@cls f14ae@cls*) (fd34@bless (let f14b5@f ((f14b1@cls f14ad@cls) (f14b2@cls* f14ae@cls*)) (if (null? f14b2@cls*) (let ((f14b7@t f14b1@cls)) (let ((f14b9@ls/false (fd7e@syntax-dispatch f14b7@t '(#(scheme-id else) any . each-any)))) (if f14b9@ls/false (apply (lambda (f14bb@e f14bc@e*) (cons 'begin (cons f14bb@e f14bc@e*))) f14b9@ls/false) (let ((f14bf@t f14b7@t)) (let ((f14c1@ls/false (fd7e@syntax-dispatch f14bf@t '(any #(scheme-id =>) any)))) (if f14c1@ls/false (apply (lambda (f14c3@e f14c4@p) (list 'let (list (list 't f14c3@e)) (list 'if 't (cons f14c4@p '(t))))) f14c1@ls/false) (let ((f14c7@t f14bf@t)) (let ((f14c9@ls/false (fd7e@syntax-dispatch f14c7@t '(any)))) (if f14c9@ls/false (apply (lambda (f14cb@e) (cons 'or (cons f14cb@e '((if #f #f))))) f14c9@ls/false) (let ((f14cd@t f14c7@t)) (let ((f14cf@ls/false (fd7e@syntax-dispatch f14cd@t '(any . each-any)))) (if f14cf@ls/false (apply (lambda (f14d1@e f14d2@e*) (list 'if f14d1@e (cons 'begin f14d2@e*))) f14cf@ls/false) (let ((f14d5@t f14cd@t)) (let ((f14d7@ls/false (fd7e@syntax-dispatch f14d5@t '_))) (if f14d7@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid last clause" f14a7@stx)) f14d7@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f14d5@t)))))))))))))))) (let ((f14d9@t f14b1@cls)) (let ((f14db@ls/false (fd7e@syntax-dispatch f14d9@t '(#(scheme-id else) any . each-any)))) (if f14db@ls/false (apply (lambda (f14dd@e f14de@e*) (fe5e@syntax-violation '#f '"incorrect position of keyword else" f14a7@stx)) f14db@ls/false) (let ((f14e1@t f14d9@t)) (let ((f14e3@ls/false (fd7e@syntax-dispatch f14e1@t '(any #(scheme-id =>) any)))) (if f14e3@ls/false (apply (lambda (f14e5@e f14e6@p) (list 'let (list (list 't f14e5@e)) (list 'if 't (cons f14e6@p '(t)) (f14b5@f (car f14b2@cls*) (cdr f14b2@cls*))))) f14e3@ls/false) (let ((f14e9@t f14e1@t)) (let ((f14eb@ls/false (fd7e@syntax-dispatch f14e9@t '(any)))) (if f14eb@ls/false (apply (lambda (f14ed@e) (list 'or f14ed@e (f14b5@f (car f14b2@cls*) (cdr f14b2@cls*)))) f14eb@ls/false) (let ((f14ef@t f14e9@t)) (let ((f14f1@ls/false (fd7e@syntax-dispatch f14ef@t '(any . each-any)))) (if f14f1@ls/false (apply (lambda (f14f3@e f14f4@e*) (list 'if f14f3@e (cons 'begin f14f4@e*) (f14b5@f (car f14b2@cls*) (cdr f14b2@cls*)))) f14f1@ls/false) (let ((f14f7@t f14ef@t)) (let ((f14f9@ls/false (fd7e@syntax-dispatch f14f7@t '_))) (if f14f9@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid last clause" f14a7@stx)) f14f9@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f14f7@t)))))))))))))))))))) f14ab@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f14a9@t)))))) (set! f2846@fd62@cond-macro fd62@cond-macro) (set! fd64@do-include (lambda (f14fb@stx f14fc@id f14fd@filename) (let ((f1501@filename (fb8b@stx->datum f14fd@filename))) (begin (if (not (and (string? f1501@filename) (fb77@id? f14fc@id))) (fe5e@syntax-violation '#f '"invalid syntax" f14fb@stx) (void)) (cons (fd34@bless 'begin) (with-input-from-file f1501@filename (lambda () (let f1505@f ((f1503@ls '())) (let ((f1507@x (f6b9@f589@read-annotated))) (if (eof-object? f1507@x) (reverse f1503@ls) (f1505@f (cons (fb57@datum->stx f14fc@id f1507@x) f1503@ls)))))))))))) (set! f2847@fd64@do-include fd64@do-include) (set! fd66@include-macro (lambda (f1509@e) (let ((f150b@t f1509@e)) (let ((f150d@ls/false (fd7e@syntax-dispatch f150b@t '(any any)))) (if f150d@ls/false (apply (lambda (f150f@id f1510@filename) (fd64@do-include f1509@e f150f@id f1510@filename)) f150d@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f150b@t)))))) (set! f2848@fd66@include-macro fd66@include-macro) (set! fd68@include-into-macro (lambda (f1513@e) (let ((f1515@t f1513@e)) (let ((f1517@ls/false (fd7e@syntax-dispatch f1515@t '(_ any any)))) (if f1517@ls/false (apply (lambda (f1519@id f151a@filename) (fd64@do-include f1513@e f1519@id f151a@filename)) f1517@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1515@t)))))) (set! f2849@fd68@include-into-macro fd68@include-into-macro) (set! fd6a@syntax-rules-macro (lambda (f151d@e) (let ((f151f@t f151d@e)) (let ((f1521@ls/false (fd7e@syntax-dispatch f151f@t '(_ each-any . #(each (any any)))))) (if f1521@ls/false (apply (lambda (f1523@lits f1524@pat* f1525@tmp*) (begin (fd84@verify-literals f1523@lits f151d@e) (fd34@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons f1523@lits (map (lambda (f1529@pat f152a@tmp) (let ((f152d@t f1529@pat)) (let ((f152f@ls/false (fd7e@syntax-dispatch f152d@t '(_ . any)))) (if f152f@ls/false (apply (lambda (f1531@rest) (list (cons 'g f1531@rest) (list 'syntax f152a@tmp))) f152f@ls/false) (let ((f1533@t f152d@t)) (let ((f1535@ls/false (fd7e@syntax-dispatch f1533@t '_))) (if f1535@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid syntax-rules pattern" f151d@e f1529@pat)) f1535@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1533@t)))))))) f1524@pat* f1525@tmp*)))))))) f1521@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f151f@t)))))) (set! f284a@fd6a@syntax-rules-macro fd6a@syntax-rules-macro) (set! fd6c@quasiquote-macro (letrec* ((f1538@datum (lambda (f1639@x) (list (fd06@scheme-stx 'quote) (fb5f@mkstx f1639@x '() '() '())))) (f1554@quasicons* (lambda (f1631@x f1632@y) (let f1637@f ((f1635@x f1631@x)) (if (null? f1635@x) f1632@y (f1556@quasicons (car f1635@x) (f1637@f (cdr f1635@x))))))) (f1556@quasicons (lambda (f160b@x f160c@y) (let ((f160f@t f160c@y)) (let ((f1611@ls/false (fd7e@syntax-dispatch f160f@t '(#(scheme-id quote) any)))) (if f1611@ls/false (apply (lambda (f1613@dy) (let ((f1615@t f160b@x)) (let ((f1617@ls/false (fd7e@syntax-dispatch f1615@t '(#(scheme-id quote) any)))) (if f1617@ls/false (apply (lambda (f1619@dx) (list (fd06@scheme-stx 'quote) (cons f1619@dx f1613@dy))) f1617@ls/false) (let ((f161b@t f1615@t)) (let ((f161d@ls/false (fd7e@syntax-dispatch f161b@t '_))) (if f161d@ls/false (apply (lambda () (let ((f161f@t f1613@dy)) (let ((f1621@ls/false (fd7e@syntax-dispatch f161f@t '()))) (if f1621@ls/false (apply (lambda () (list (fd06@scheme-stx 'list) f160b@x)) f1621@ls/false) (let ((f1623@t f161f@t)) (let ((f1625@ls/false (fd7e@syntax-dispatch f1623@t '_))) (if f1625@ls/false (apply (lambda () (list (fd06@scheme-stx 'cons) f160b@x f160c@y)) f1625@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1623@t)))))))) f161d@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f161b@t)))))))) f1611@ls/false) (let ((f1627@t f160f@t)) (let ((f1629@ls/false (fd7e@syntax-dispatch f1627@t '(#(scheme-id list) . each-any)))) (if f1629@ls/false (apply (lambda (f162b@stuff) (cons* (fd06@scheme-stx 'list) f160b@x f162b@stuff)) f1629@ls/false) (let ((f162d@t f1627@t)) (let ((f162f@ls/false (fd7e@syntax-dispatch f162d@t '_))) (if f162f@ls/false (apply (lambda () (list (fd06@scheme-stx 'cons) f160b@x f160c@y)) f162f@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f162d@t)))))))))))) (f1558@quasiappend (lambda (f15f1@x f15f2@y) (let ((f15f5@ls (let f15f9@f ((f15f7@x f15f1@x)) (if (null? f15f7@x) (let ((f15fb@t f15f2@y)) (let ((f15fd@ls/false (fd7e@syntax-dispatch f15fb@t '(#(scheme-id quote) ())))) (if f15fd@ls/false (apply (lambda () '()) f15fd@ls/false) (let ((f15ff@t f15fb@t)) (let ((f1601@ls/false (fd7e@syntax-dispatch f15ff@t '_))) (if f1601@ls/false (apply (lambda () (list f15f2@y)) f1601@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f15ff@t))))))) (let ((f1603@t (car f15f7@x))) (let ((f1605@ls/false (fd7e@syntax-dispatch f1603@t '(#(scheme-id quote) ())))) (if f1605@ls/false (apply (lambda () (f15f9@f (cdr f15f7@x))) f1605@ls/false) (let ((f1607@t f1603@t)) (let ((f1609@ls/false (fd7e@syntax-dispatch f1607@t '_))) (if f1609@ls/false (apply (lambda () (cons (car f15f7@x) (f15f9@f (cdr f15f7@x)))) f1609@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1607@t))))))))))) (if (null? f15f5@ls) (list (fd06@scheme-stx 'quote) '()) (if (null? (cdr f15f5@ls)) (car f15f5@ls) (cons* (fd06@scheme-stx 'append) f15f5@ls)))))) (f155a@quasivector (lambda (f15bf@x) (let ((f15c1@pat-x f15bf@x)) (let ((f15c3@t f15c1@pat-x)) (let ((f15c5@ls/false (fd7e@syntax-dispatch f15c3@t '(#(scheme-id quote) each-any)))) (if f15c5@ls/false (apply (lambda (f15c7@x*) (list (fd06@scheme-stx 'quote) (list->vector f15c7@x*))) f15c5@ls/false) (let ((f15c9@t f15c3@t)) (let ((f15cb@ls/false (fd7e@syntax-dispatch f15c9@t '_))) (if f15cb@ls/false (apply (lambda () (let f15d3@f ((f15cd@x f15bf@x) (f15ce@k (lambda (f15d1@ls) (cons* (fd06@scheme-stx 'vector) f15d1@ls)))) (let ((f15d5@t f15cd@x)) (let ((f15d7@ls/false (fd7e@syntax-dispatch f15d5@t '(#(scheme-id quote) each-any)))) (if f15d7@ls/false (apply (lambda (f15d9@x*) (f15ce@k (map (lambda (f15db@x) (list (fd06@scheme-stx 'quote) f15db@x)) f15d9@x*))) f15d7@ls/false) (let ((f15dd@t f15d5@t)) (let ((f15df@ls/false (fd7e@syntax-dispatch f15dd@t '(#(scheme-id list) . each-any)))) (if f15df@ls/false (apply (lambda (f15e1@x*) (f15ce@k f15e1@x*)) f15df@ls/false) (let ((f15e3@t f15dd@t)) (let ((f15e5@ls/false (fd7e@syntax-dispatch f15e3@t '(#(scheme-id cons) any any)))) (if f15e5@ls/false (apply (lambda (f15e7@x f15e8@y) (f15d3@f f15e8@y (lambda (f15eb@ls) (f15ce@k (cons f15e7@x f15eb@ls))))) f15e5@ls/false) (let ((f15ed@t f15e3@t)) (let ((f15ef@ls/false (fd7e@syntax-dispatch f15ed@t '_))) (if f15ef@ls/false (apply (lambda () (list (fd06@scheme-stx 'list->vector) f15c1@pat-x)) f15ef@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f15ed@t))))))))))))))) f15cb@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f15c9@t)))))))))) (f155c@vquasi (lambda (f159d@p f159e@lev) (let ((f15a1@t f159d@p)) (let ((f15a3@ls/false (fd7e@syntax-dispatch f15a1@t '(any . any)))) (if f15a3@ls/false (apply (lambda (f15a5@p f15a6@q) (let ((f15a9@t f15a5@p)) (let ((f15ab@ls/false (fd7e@syntax-dispatch f15a9@t '(#(scheme-id unquote) . each-any)))) (if f15ab@ls/false (apply (lambda (f15ad@p) (if (= f159e@lev '0) (f1554@quasicons* f15ad@p (f155c@vquasi f15a6@q f159e@lev)) (f1556@quasicons (f1556@quasicons (f1538@datum 'unquote) (f155e@quasi f15ad@p (- f159e@lev '1))) (f155c@vquasi f15a6@q f159e@lev)))) f15ab@ls/false) (let ((f15af@t f15a9@t)) (let ((f15b1@ls/false (fd7e@syntax-dispatch f15af@t '(#(scheme-id unquote-splicing) . each-any)))) (if f15b1@ls/false (apply (lambda (f15b3@p) (if (= f159e@lev '0) (f1558@quasiappend f15b3@p (f155c@vquasi f15a6@q f159e@lev)) (f1556@quasicons (f1556@quasicons (f1538@datum 'unquote-splicing) (f155e@quasi f15b3@p (- f159e@lev '1))) (f155c@vquasi f15a6@q f159e@lev)))) f15b1@ls/false) (let ((f15b5@t f15af@t)) (let ((f15b7@ls/false (fd7e@syntax-dispatch f15b5@t 'any))) (if f15b7@ls/false (apply (lambda (f15b9@p) (f1556@quasicons (f155e@quasi f15b9@p f159e@lev) (f155c@vquasi f15a6@q f159e@lev))) f15b7@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f15b5@t))))))))))) f15a3@ls/false) (let ((f15bb@t f15a1@t)) (let ((f15bd@ls/false (fd7e@syntax-dispatch f15bb@t '()))) (if f15bd@ls/false (apply (lambda () (list (fd06@scheme-stx 'quote) '())) f15bd@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f15bb@t))))))))) (f155e@quasi (lambda (f1567@p f1568@lev) (let ((f156b@t f1567@p)) (let ((f156d@ls/false (fd7e@syntax-dispatch f156b@t '(#(scheme-id unquote) any)))) (if f156d@ls/false (apply (lambda (f156f@p) (if (= f1568@lev '0) f156f@p (f1556@quasicons (f1538@datum 'unquote) (f155e@quasi (list f156f@p) (- f1568@lev '1))))) f156d@ls/false) (let ((f1571@t f156b@t)) (let ((f1573@ls/false (fd7e@syntax-dispatch f1571@t '((#(scheme-id unquote) . each-any) . any)))) (if f1573@ls/false (apply (lambda (f1575@p f1576@q) (if (= f1568@lev '0) (f1554@quasicons* f1575@p (f155e@quasi f1576@q f1568@lev)) (f1556@quasicons (f1556@quasicons (f1538@datum 'unquote) (f155e@quasi f1575@p (- f1568@lev '1))) (f155e@quasi f1576@q f1568@lev)))) f1573@ls/false) (let ((f1579@t f1571@t)) (let ((f157b@ls/false (fd7e@syntax-dispatch f1579@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if f157b@ls/false (apply (lambda (f157d@p f157e@q) (if (= f1568@lev '0) (f1558@quasiappend f157d@p (f155e@quasi f157e@q f1568@lev)) (f1556@quasicons (f1556@quasicons (f1538@datum 'unquote-splicing) (f155e@quasi f157d@p (- f1568@lev '1))) (f155e@quasi f157e@q f1568@lev)))) f157b@ls/false) (let ((f1581@t f1579@t)) (let ((f1583@ls/false (fd7e@syntax-dispatch f1581@t '(#(scheme-id quasiquote) any)))) (if f1583@ls/false (apply (lambda (f1585@p) (f1556@quasicons (f1538@datum 'quasiquote) (f155e@quasi (list f1585@p) (+ f1568@lev '1)))) f1583@ls/false) (let ((f1587@t f1581@t)) (let ((f1589@ls/false (fd7e@syntax-dispatch f1587@t '(any . any)))) (if f1589@ls/false (apply (lambda (f158b@p f158c@q) (f1556@quasicons (f155e@quasi f158b@p f1568@lev) (f155e@quasi f158c@q f1568@lev))) f1589@ls/false) (let ((f158f@t f1587@t)) (let ((f1591@ls/false (fd7e@syntax-dispatch f158f@t '#(vector each-any)))) (if (and f1591@ls/false (apply (lambda (f1593@x) (not (fb43@stx? f1593@x))) f1591@ls/false)) (apply (lambda (f1595@x) (f155a@quasivector (f155c@vquasi f1595@x f1568@lev))) f1591@ls/false) (let ((f1597@t f158f@t)) (let ((f1599@ls/false (fd7e@syntax-dispatch f1597@t 'any))) (if f1599@ls/false (apply (lambda (f159b@p) (list (fd06@scheme-stx 'quote) f159b@p)) f1599@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1597@t))))))))))))))))))))))))) (lambda (f155f@x) (let ((f1561@t f155f@x)) (let ((f1563@ls/false (fd7e@syntax-dispatch f1561@t '(_ any)))) (if f1563@ls/false (apply (lambda (f1565@e) (f155e@quasi f1565@e '0)) f1563@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1561@t))))))) (set! f284b@fd6c@quasiquote-macro fd6c@quasiquote-macro) (set! fd6e@quasisyntax-macro (letrec* ((f163c@quasi (lambda (f1657@p f1658@lev) (let ((f165b@t f1657@p)) (let ((f165d@ls/false (fd7e@syntax-dispatch f165b@t '(#(scheme-id unsyntax) any)))) (if f165d@ls/false (apply (lambda (f165f@p) (if (= f1658@lev '0) (let ((f1661@g (gensym))) (values (list f1661@g) (list f165f@p) f1661@g)) (call-with-values (lambda () (f163c@quasi f165f@p (- f1658@lev '1))) (lambda (f1669@f1664 f166a@f1666 f166b@f1668) (let ((f166f@p f166b@f1668) (f1670@rhs* f166a@f1666) (f1671@lhs* f1669@f1664)) (values f1671@lhs* f1670@rhs* (list 'unsyntax f166f@p))))))) f165d@ls/false) (let ((f1675@t f165b@t)) (let ((f1677@ls/false (fd7e@syntax-dispatch f1675@t '#(scheme-id unsyntax)))) (if (and f1677@ls/false (apply (lambda () (= f1658@lev '0)) f1677@ls/false)) (apply (lambda () (fe5e@syntax-violation '#f '"incorrect use of unsyntax" f1657@p)) f1677@ls/false) (let ((f1679@t f1675@t)) (let ((f167b@ls/false (fd7e@syntax-dispatch f1679@t '((#(scheme-id unsyntax) . each-any) . any)))) (if f167b@ls/false (apply (lambda (f167d@p* f167e@q) (call-with-values (lambda () (f163c@quasi f167e@q f1658@lev)) (lambda (f1687@f1682 f1688@f1684 f1689@f1686) (let ((f168d@q f1689@f1686) (f168e@rhs* f1688@f1684) (f168f@lhs* f1687@f1682)) (if (= f1658@lev '0) (let ((f1693@g* (map (lambda (f1695@x) (gensym)) f167d@p*))) (values (append f1693@g* f168f@lhs*) (append f167d@p* f168e@rhs*) (append f1693@g* f168d@q))) (call-with-values (lambda () (f163c@quasi f167d@p* (- f1658@lev '1))) (lambda (f169d@f1698 f169e@f169a f169f@f169c) (let ((f16a3@p* f169f@f169c) (f16a4@rhs2* f169e@f169a) (f16a5@lhs2* f169d@f1698)) (values (append f16a5@lhs2* f168f@lhs*) (append f16a4@rhs2* f168e@rhs*) (cons (cons 'unsyntax f16a3@p*) f168d@q)))))))))) f167b@ls/false) (let ((f16a9@t f1679@t)) (let ((f16ab@ls/false (fd7e@syntax-dispatch f16a9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if f16ab@ls/false (apply (lambda (f16ad@p* f16ae@q) (call-with-values (lambda () (f163c@quasi f16ae@q f1658@lev)) (lambda (f16b7@f16b2 f16b8@f16b4 f16b9@f16b6) (let ((f16bd@q f16b9@f16b6) (f16be@rhs* f16b8@f16b4) (f16bf@lhs* f16b7@f16b2)) (if (= f1658@lev '0) (let ((f16c3@g* (map (lambda (f16c5@x) (gensym)) f16ad@p*))) (values (append (map (lambda (f16c7@g) (cons f16c7@g '(...))) f16c3@g*) f16bf@lhs*) (append f16ad@p* f16be@rhs*) (append (apply append (map (lambda (f16c9@g) (cons f16c9@g '(...))) f16c3@g*)) f16bd@q))) (call-with-values (lambda () (f163c@quasi f16ad@p* (- f1658@lev '1))) (lambda (f16d1@f16cc f16d2@f16ce f16d3@f16d0) (let ((f16d7@p* f16d3@f16d0) (f16d8@rhs2* f16d2@f16ce) (f16d9@lhs2* f16d1@f16cc)) (values (append f16d9@lhs2* f16bf@lhs*) (append f16d8@rhs2* f16be@rhs*) (cons (cons 'unsyntax-splicing f16d7@p*) f16bd@q)))))))))) f16ab@ls/false) (let ((f16dd@t f16a9@t)) (let ((f16df@ls/false (fd7e@syntax-dispatch f16dd@t '#(scheme-id unsyntax-splicing)))) (if (and f16df@ls/false (apply (lambda () (= f1658@lev '0)) f16df@ls/false)) (apply (lambda () (fe5e@syntax-violation '#f '"incorrect use of unsyntax-splicing" f1657@p)) f16df@ls/false) (let ((f16e1@t f16dd@t)) (let ((f16e3@ls/false (fd7e@syntax-dispatch f16e1@t '(#(scheme-id quasisyntax) any)))) (if f16e3@ls/false (apply (lambda (f16e5@p) (call-with-values (lambda () (f163c@quasi f16e5@p (+ f1658@lev '1))) (lambda (f16ed@f16e8 f16ee@f16ea f16ef@f16ec) (let ((f16f3@p f16ef@f16ec) (f16f4@rhs* f16ee@f16ea) (f16f5@lhs* f16ed@f16e8)) (values f16f5@lhs* f16f4@rhs* (list 'quasisyntax f16f3@p)))))) f16e3@ls/false) (let ((f16f9@t f16e1@t)) (let ((f16fb@ls/false (fd7e@syntax-dispatch f16f9@t '(any . any)))) (if f16fb@ls/false (apply (lambda (f16fd@p f16fe@q) (call-with-values (lambda () (f163c@quasi f16fd@p f1658@lev)) (lambda (f170d@f1702 f170e@f1704 f170f@f1706) (call-with-values (lambda () (f163c@quasi f16fe@q f1658@lev)) (lambda (f1713@f1708 f1714@f170a f1715@f170c) (let ((f1719@q f1715@f170c) (f171a@rhs2* f1714@f170a) (f171b@lhs2* f1713@f1708) (f171c@p f170f@f1706) (f171d@rhs* f170e@f1704) (f171e@lhs* f170d@f1702)) (values (append f171b@lhs2* f171e@lhs*) (append f171a@rhs2* f171d@rhs*) (cons f171c@p f1719@q)))))))) f16fb@ls/false) (let ((f1725@t f16f9@t)) (let ((f1727@ls/false (fd7e@syntax-dispatch f1725@t '#(vector each-any)))) (if f1727@ls/false (apply (lambda (f1729@x*) (call-with-values (lambda () (f163c@quasi f1729@x* f1658@lev)) (lambda (f1731@f172c f1732@f172e f1733@f1730) (let ((f1737@x* f1733@f1730) (f1738@rhs* f1732@f172e) (f1739@lhs* f1731@f172c)) (values f1739@lhs* f1738@rhs* (list->vector f1737@x*)))))) f1727@ls/false) (let ((f173d@t f1725@t)) (let ((f173f@ls/false (fd7e@syntax-dispatch f173d@t '_))) (if f173f@ls/false (apply (lambda () (values '() '() f1657@p)) f173f@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f173d@t))))))))))))))))))))))))))))))) (lambda (f163d@x) (let ((f163f@t f163d@x)) (let ((f1641@ls/false (fd7e@syntax-dispatch f163f@t '(_ any)))) (if f1641@ls/false (apply (lambda (f1643@e) (call-with-values (lambda () (f163c@quasi f1643@e '0)) (lambda (f164b@f1646 f164c@f1648 f164d@f164a) (let ((f1651@v f164d@f164a) (f1652@rhs* f164c@f1648) (f1653@lhs* f164b@f1646)) (fd34@bless (list 'syntax-case (cons 'list f1652@rhs*) '() (list f1653@lhs* (list 'syntax f1651@v)))))))) f1641@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f163f@t))))))) (set! f284c@fd6e@quasisyntax-macro fd6e@quasisyntax-macro) (set! fd70@define-struct-macro (lambda (f1741@stx) (fe5e@syntax-violation '#f '"define-struct not supported" f1741@stx))) (set! f284d@fd70@define-struct-macro fd70@define-struct-macro) (set! fd72@define-record-type-macro (lambda (f1743@x) (letrec* ((f1746@id (lambda (f1939@ctxt . f193b@str*) (fe62@datum->syntax f1939@ctxt (string->symbol (apply string-append (map (lambda (f193d@x) (if (symbol? f193d@x) (symbol->string f193d@x) (if (string? f193d@x) f193d@x (assertion-violation 'define-record-type '"BUG")))) f193b@str*)))))) (f1748@get-record-name (lambda (f1927@spec) (let ((f1929@t f1927@spec)) (let ((f192b@ls/false (fd7e@syntax-dispatch f1929@t '(any any any)))) (if f192b@ls/false (apply (lambda (f192d@foo f192e@make-foo f192f@foo?) f192d@foo) f192b@ls/false) (let ((f1933@t f1929@t)) (let ((f1935@ls/false (fd7e@syntax-dispatch f1933@t 'any))) (if f1935@ls/false (apply (lambda (f1937@foo) f1937@foo) f1935@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1933@t))))))))) (f174a@get-record-constructor-name (lambda (f1913@spec) (let ((f1915@t f1913@spec)) (let ((f1917@ls/false (fd7e@syntax-dispatch f1915@t '(any any any)))) (if f1917@ls/false (apply (lambda (f1919@foo f191a@make-foo f191b@foo?) f191a@make-foo) f1917@ls/false) (let ((f191f@t f1915@t)) (let ((f1921@ls/false (fd7e@syntax-dispatch f191f@t 'any))) (if (and f1921@ls/false (apply (lambda (f1923@foo) (fb77@id? f1923@foo)) f1921@ls/false)) (apply (lambda (f1925@foo) (f1746@id f1925@foo '"make-" (fb8b@stx->datum f1925@foo))) f1921@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f191f@t))))))))) (f174c@get-record-predicate-name (lambda (f18ff@spec) (let ((f1901@t f18ff@spec)) (let ((f1903@ls/false (fd7e@syntax-dispatch f1901@t '(any any any)))) (if f1903@ls/false (apply (lambda (f1905@foo f1906@make-foo f1907@foo?) f1907@foo?) f1903@ls/false) (let ((f190b@t f1901@t)) (let ((f190d@ls/false (fd7e@syntax-dispatch f190b@t 'any))) (if (and f190d@ls/false (apply (lambda (f190f@foo) (fb77@id? f190f@foo)) f190d@ls/false)) (apply (lambda (f1911@foo) (f1746@id f1911@foo (fb8b@stx->datum f1911@foo) '"?")) f190d@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f190b@t))))))))) (f174e@get-clause (lambda (f18ed@id f18ee@ls) (let ((f18f1@t f18ee@ls)) (let ((f18f3@ls/false (fd7e@syntax-dispatch f18f1@t '()))) (if f18f3@ls/false (apply (lambda () '#f) f18f3@ls/false) (let ((f18f5@t f18f1@t)) (let ((f18f7@ls/false (fd7e@syntax-dispatch f18f5@t '((any . any) . any)))) (if f18f7@ls/false (apply (lambda (f18f9@x f18fa@rest f18fb@ls) (if (fb7d@free-id=? (fd34@bless f18ed@id) f18f9@x) (cons f18f9@x f18fa@rest) (f174e@get-clause f18ed@id f18fb@ls))) f18f7@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f18f5@t))))))))) (f1750@foo-rtd-code (lambda (f189b@name f189c@clause* f189d@parent-rtd-code) (letrec* ((f18a2@convert-field-spec* (lambda (f18d3@ls) (list->vector (map (lambda (f18d5@x) (let ((f18d7@t f18d5@x)) (let ((f18d9@ls/false (fd7e@syntax-dispatch f18d7@t '(#(scheme-id mutable) any . any)))) (if f18d9@ls/false (apply (lambda (f18db@name f18dc@rest) (list 'mutable f18db@name)) f18d9@ls/false) (let ((f18df@t f18d7@t)) (let ((f18e1@ls/false (fd7e@syntax-dispatch f18df@t '(#(scheme-id immutable) any . any)))) (if f18e1@ls/false (apply (lambda (f18e3@name f18e4@rest) (list 'immutable f18e3@name)) f18e1@ls/false) (let ((f18e7@t f18df@t)) (let ((f18e9@ls/false (fd7e@syntax-dispatch f18e7@t 'any))) (if f18e9@ls/false (apply (lambda (f18eb@name) (list 'immutable f18eb@name)) f18e9@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f18e7@t))))))))))) f18d3@ls))))) (let ((f18a3@uid-code (let ((f18ab@t (f174e@get-clause 'nongenerative f189c@clause*))) (let ((f18ad@ls/false (fd7e@syntax-dispatch f18ab@t '(_)))) (if f18ad@ls/false (apply (lambda () (list 'quote (gensym))) f18ad@ls/false) (let ((f18af@t f18ab@t)) (let ((f18b1@ls/false (fd7e@syntax-dispatch f18af@t '(_ any)))) (if f18b1@ls/false (apply (lambda (f18b3@uid) (list 'quote f18b3@uid)) f18b1@ls/false) (let ((f18b5@t f18af@t)) (let ((f18b7@ls/false (fd7e@syntax-dispatch f18b5@t '_))) (if f18b7@ls/false (apply (lambda () '#f) f18b7@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f18b5@t))))))))))) (f18a4@sealed? (let ((f18b9@t (f174e@get-clause 'sealed f189c@clause*))) (let ((f18bb@ls/false (fd7e@syntax-dispatch f18b9@t '(_ #(atom #t))))) (if f18bb@ls/false (apply (lambda () '#t) f18bb@ls/false) (let ((f18bd@t f18b9@t)) (let ((f18bf@ls/false (fd7e@syntax-dispatch f18bd@t '_))) (if f18bf@ls/false (apply (lambda () '#f) f18bf@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f18bd@t)))))))) (f18a5@opaque? (let ((f18c1@t (f174e@get-clause 'opaque f189c@clause*))) (let ((f18c3@ls/false (fd7e@syntax-dispatch f18c1@t '(_ #(atom #t))))) (if f18c3@ls/false (apply (lambda () '#t) f18c3@ls/false) (let ((f18c5@t f18c1@t)) (let ((f18c7@ls/false (fd7e@syntax-dispatch f18c5@t '_))) (if f18c7@ls/false (apply (lambda () '#f) f18c7@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f18c5@t)))))))) (f18a6@fields (let ((f18c9@t (f174e@get-clause 'fields f189c@clause*))) (let ((f18cb@ls/false (fd7e@syntax-dispatch f18c9@t '(_ . each-any)))) (if f18cb@ls/false (apply (lambda (f18cd@field-spec*) (list 'quote (f18a2@convert-field-spec* f18cd@field-spec*))) f18cb@ls/false) (let ((f18cf@t f18c9@t)) (let ((f18d1@ls/false (fd7e@syntax-dispatch f18cf@t '_))) (if f18d1@ls/false (apply (lambda () ''#()) f18d1@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f18cf@t))))))))) (fd34@bless (list 'make-record-type-descriptor (list 'quote f189b@name) f189d@parent-rtd-code f18a3@uid-code f18a4@sealed? f18a5@opaque? f18a6@fields)))))) (f1752@parent-rtd-code (lambda (f1883@clause*) (let ((f1885@t (f174e@get-clause 'parent f1883@clause*))) (let ((f1887@ls/false (fd7e@syntax-dispatch f1885@t '(_ any)))) (if f1887@ls/false (apply (lambda (f1889@name) (list 'record-type-descriptor f1889@name)) f1887@ls/false) (let ((f188b@t f1885@t)) (let ((f188d@ls/false (fd7e@syntax-dispatch f188b@t '#(atom #f)))) (if f188d@ls/false (apply (lambda () (let ((f188f@t (f174e@get-clause 'parent-rtd f1883@clause*))) (let ((f1891@ls/false (fd7e@syntax-dispatch f188f@t '(_ any any)))) (if f1891@ls/false (apply (lambda (f1893@rtd f1894@rcd) f1893@rtd) f1891@ls/false) (let ((f1897@t f188f@t)) (let ((f1899@ls/false (fd7e@syntax-dispatch f1897@t '#(atom #f)))) (if f1899@ls/false (apply (lambda () '#f) f1899@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1897@t)))))))) f188d@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f188b@t))))))))) (f1754@parent-rcd-code (lambda (f186b@clause*) (let ((f186d@t (f174e@get-clause 'parent f186b@clause*))) (let ((f186f@ls/false (fd7e@syntax-dispatch f186d@t '(_ any)))) (if f186f@ls/false (apply (lambda (f1871@name) (list 'record-constructor-descriptor f1871@name)) f186f@ls/false) (let ((f1873@t f186d@t)) (let ((f1875@ls/false (fd7e@syntax-dispatch f1873@t '#(atom #f)))) (if f1875@ls/false (apply (lambda () (let ((f1877@t (f174e@get-clause 'parent-rtd f186b@clause*))) (let ((f1879@ls/false (fd7e@syntax-dispatch f1877@t '(_ any any)))) (if f1879@ls/false (apply (lambda (f187b@rtd f187c@rcd) f187c@rcd) f1879@ls/false) (let ((f187f@t f1877@t)) (let ((f1881@ls/false (fd7e@syntax-dispatch f187f@t '#(atom #f)))) (if f1881@ls/false (apply (lambda () '#f) f1881@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f187f@t)))))))) f1875@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1873@t))))))))) (f1756@foo-rcd-code (lambda (f1863@clause* f1864@foo-rtd f1865@protocol f1866@parent-rcd-code) (list 'make-record-constructor-descriptor f1864@foo-rtd f1866@parent-rcd-code f1865@protocol))) (f1758@get-protocol-code (lambda (f1857@clause*) (let ((f1859@t (f174e@get-clause 'protocol f1857@clause*))) (let ((f185b@ls/false (fd7e@syntax-dispatch f1859@t '(_ any)))) (if f185b@ls/false (apply (lambda (f185d@expr) f185d@expr) f185b@ls/false) (let ((f185f@t f1859@t)) (let ((f1861@ls/false (fd7e@syntax-dispatch f185f@t '_))) (if f1861@ls/false (apply (lambda () '#f) f1861@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f185f@t))))))))) (f175a@get-fields (lambda (f1845@clause*) (let ((f1847@t f1845@clause*)) (let ((f1849@ls/false (fd7e@syntax-dispatch f1847@t '()))) (if f1849@ls/false (apply (lambda () '()) f1849@ls/false) (let ((f184b@t f1847@t)) (let ((f184d@ls/false (fd7e@syntax-dispatch f184b@t '((#(scheme-id fields) . each-any) . _)))) (if f184d@ls/false (apply (lambda (f184f@f*) f184f@f*) f184d@ls/false) (let ((f1851@t f184b@t)) (let ((f1853@ls/false (fd7e@syntax-dispatch f1851@t '(_ . any)))) (if f1853@ls/false (apply (lambda (f1855@rest) (f175a@get-fields f1855@rest)) f1853@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1851@t)))))))))))) (f175c@get-mutator-indices (lambda (f182d@fields) (let f1833@f ((f182f@fields f182d@fields) (f1830@i '0)) (let ((f1835@t f182f@fields)) (let ((f1837@ls/false (fd7e@syntax-dispatch f1835@t '()))) (if f1837@ls/false (apply (lambda () '()) f1837@ls/false) (let ((f1839@t f1835@t)) (let ((f183b@ls/false (fd7e@syntax-dispatch f1839@t '((#(scheme-id mutable) . _) . any)))) (if f183b@ls/false (apply (lambda (f183d@rest) (cons f1830@i (f1833@f f183d@rest (+ f1830@i '1)))) f183b@ls/false) (let ((f183f@t f1839@t)) (let ((f1841@ls/false (fd7e@syntax-dispatch f183f@t '(_ . any)))) (if f1841@ls/false (apply (lambda (f1843@rest) (f1833@f f1843@rest (+ f1830@i '1))) f1841@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f183f@t))))))))))))) (f175e@get-mutators (lambda (f1803@foo f1804@fields) (letrec* ((f1808@gen-name (lambda (f182b@x) (fe62@datum->syntax f1803@foo (string->symbol (string-append (symbol->string (fe64@syntax->datum f1803@foo)) '"-" (symbol->string (fe64@syntax->datum f182b@x)) '"-set!")))))) (let f180b@f ((f1809@fields f1804@fields)) (let ((f180d@t f1809@fields)) (let ((f180f@ls/false (fd7e@syntax-dispatch f180d@t '()))) (if f180f@ls/false (apply (lambda () '()) f180f@ls/false) (let ((f1811@t f180d@t)) (let ((f1813@ls/false (fd7e@syntax-dispatch f1811@t '((#(scheme-id mutable) any any any) . any)))) (if f1813@ls/false (apply (lambda (f1815@name f1816@accessor f1817@mutator f1818@rest) (cons f1817@mutator (f180b@f f1818@rest))) f1813@ls/false) (let ((f181d@t f1811@t)) (let ((f181f@ls/false (fd7e@syntax-dispatch f181d@t '((#(scheme-id mutable) any) . any)))) (if f181f@ls/false (apply (lambda (f1821@name f1822@rest) (cons (f1808@gen-name f1821@name) (f180b@f f1822@rest))) f181f@ls/false) (let ((f1825@t f181d@t)) (let ((f1827@ls/false (fd7e@syntax-dispatch f1825@t '(_ . any)))) (if f1827@ls/false (apply (lambda (f1829@rest) (f180b@f f1829@rest)) f1827@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1825@t))))))))))))))))) (f1760@get-accessors (lambda (f17bf@foo f17c0@fields) (letrec* ((f17c4@gen-name (lambda (f1801@x) (fe62@datum->syntax f17bf@foo (string->symbol (string-append (symbol->string (fe64@syntax->datum f17bf@foo)) '"-" (symbol->string (fe64@syntax->datum f1801@x)))))))) (map (lambda (f17c5@field) (let ((f17c7@t f17c5@field)) (let ((f17c9@ls/false (fd7e@syntax-dispatch f17c7@t '(#(scheme-id mutable) any any any)))) (if (and f17c9@ls/false (apply (lambda (f17cb@name f17cc@accessor f17cd@mutator) (fb77@id? f17cc@accessor)) f17c9@ls/false)) (apply (lambda (f17d1@name f17d2@accessor f17d3@mutator) f17d2@accessor) f17c9@ls/false) (let ((f17d7@t f17c7@t)) (let ((f17d9@ls/false (fd7e@syntax-dispatch f17d7@t '(#(scheme-id immutable) any any)))) (if (and f17d9@ls/false (apply (lambda (f17db@name f17dc@accessor) (fb77@id? f17dc@accessor)) f17d9@ls/false)) (apply (lambda (f17df@name f17e0@accessor) f17e0@accessor) f17d9@ls/false) (let ((f17e3@t f17d7@t)) (let ((f17e5@ls/false (fd7e@syntax-dispatch f17e3@t '(#(scheme-id mutable) any)))) (if (and f17e5@ls/false (apply (lambda (f17e7@name) (fb77@id? f17e7@name)) f17e5@ls/false)) (apply (lambda (f17e9@name) (f17c4@gen-name f17e9@name)) f17e5@ls/false) (let ((f17eb@t f17e3@t)) (let ((f17ed@ls/false (fd7e@syntax-dispatch f17eb@t '(#(scheme-id immutable) any)))) (if (and f17ed@ls/false (apply (lambda (f17ef@name) (fb77@id? f17ef@name)) f17ed@ls/false)) (apply (lambda (f17f1@name) (f17c4@gen-name f17f1@name)) f17ed@ls/false) (let ((f17f3@t f17eb@t)) (let ((f17f5@ls/false (fd7e@syntax-dispatch f17f3@t 'any))) (if (and f17f5@ls/false (apply (lambda (f17f7@name) (fb77@id? f17f7@name)) f17f5@ls/false)) (apply (lambda (f17f9@name) (f17c4@gen-name f17f9@name)) f17f5@ls/false) (let ((f17fb@t f17f3@t)) (let ((f17fd@ls/false (fd7e@syntax-dispatch f17fb@t 'any))) (if f17fd@ls/false (apply (lambda (f17ff@others) (fe5e@syntax-violation '#f '"invalid field spec" f17c5@field)) f17fd@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f17fb@t)))))))))))))))))))) f17c0@fields)))) (f1762@enumerate (lambda (f17b7@ls) (let f17bd@f ((f17b9@ls f17b7@ls) (f17ba@i '0)) (if (null? f17b9@ls) '() (cons f17ba@i (f17bd@f (cdr f17b9@ls) (+ f17ba@i '1))))))) (f1764@do-define-record (lambda (f178f@namespec f1790@clause*) (let ((f1793@foo (f1748@get-record-name f178f@namespec))) (let ((f1795@foo-rtd (gensym))) (let ((f1797@foo-rcd (gensym))) (let ((f1799@protocol (gensym))) (let ((f179b@make-foo (f174a@get-record-constructor-name f178f@namespec))) (let ((f179d@fields (f175a@get-fields f1790@clause*))) (let ((f179f@idx* (f1762@enumerate f179d@fields))) (let ((f17a1@foo-x* (f1760@get-accessors f1793@foo f179d@fields))) (let ((f17a3@set-foo-x!* (f175e@get-mutators f1793@foo f179d@fields))) (let ((f17a5@set-foo-idx* (f175c@get-mutator-indices f179d@fields))) (let ((f17a7@foo? (f174c@get-record-predicate-name f178f@namespec))) (let ((f17a9@foo-rtd-code (f1750@foo-rtd-code f1793@foo f1790@clause* (f1752@parent-rtd-code f1790@clause*)))) (let ((f17ab@foo-rcd-code (f1756@foo-rcd-code f1790@clause* f1795@foo-rtd f1799@protocol (f1754@parent-rcd-code f1790@clause*)))) (let ((f17ad@protocol-code (f1758@get-protocol-code f1790@clause*))) (fd34@bless (cons 'begin (cons (list 'define f1795@foo-rtd f17a9@foo-rtd-code) (cons (list 'define f1799@protocol f17ad@protocol-code) (cons (list 'define f1797@foo-rcd f17ab@foo-rcd-code) (cons (list 'define-syntax f1793@foo (list 'list ''$rtd (list 'syntax f1795@foo-rtd) (list 'syntax f1797@foo-rcd))) (cons (list 'define f17a7@foo? (list 'record-predicate f1795@foo-rtd)) (cons (list 'define f179b@make-foo (list 'record-constructor f1797@foo-rcd)) (append (map (lambda (f17af@foo-x f17b0@idx) (list 'define f17af@foo-x (list 'record-accessor f1795@foo-rtd f17b0@idx))) f17a1@foo-x* f179f@idx*) (map (lambda (f17b3@set-foo-x! f17b4@idx) (list 'define f17b3@set-foo-x! (list 'record-mutator f1795@foo-rtd f17b4@idx))) f17a3@set-foo-x!* f17a5@set-foo-idx*)))))))))))))))))))))))))) (f1766@verify-clauses (lambda (f176f@x f1770@cls*) (letrec* ((f1774@valid-kwds (map fd34@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (f1776@free-id-member? (lambda (f178b@x f178c@ls) (and (pair? f178c@ls) (or (fb7d@free-id=? f178b@x (car f178c@ls)) (f1776@free-id-member? f178b@x (cdr f178c@ls))))))) (let f177b@f ((f1777@cls* f1770@cls*) (f1778@seen* '())) (if (not (null? f1777@cls*)) (let ((f177d@t (car f1777@cls*))) (let ((f177f@ls/false (fd7e@syntax-dispatch f177d@t '(any . any)))) (if f177f@ls/false (apply (lambda (f1781@kwd f1782@rest) (if (or (not (fb77@id? f1781@kwd)) (not (f1776@free-id-member? f1781@kwd f1774@valid-kwds))) (fe5e@syntax-violation '#f '"not a valid define-record-type keyword" f1781@kwd) (if (fb83@bound-id-member? f1781@kwd f1778@seen*) (fe5e@syntax-violation '#f '"duplicate use of keyword " f176f@x f1781@kwd) (f177b@f (cdr f1777@cls*) (cons f1781@kwd f1778@seen*))))) f177f@ls/false) (let ((f1785@t f177d@t)) (let ((f1787@ls/false (fd7e@syntax-dispatch f1785@t 'any))) (if f1787@ls/false (apply (lambda (f1789@cls) (fe5e@syntax-violation '#f '"malformed define-record-type clause" f1789@cls)) f1787@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1785@t))))))) (void))))))) (let ((f1767@t f1743@x)) (let ((f1769@ls/false (fd7e@syntax-dispatch f1767@t '(_ any . each-any)))) (if f1769@ls/false (apply (lambda (f176b@namespec f176c@clause*) (begin (f1766@verify-clauses f1743@x f176c@clause*) (f1764@do-define-record f176b@namespec f176c@clause*))) f1769@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1767@t))))))) (set! f284e@fd72@define-record-type-macro fd72@define-record-type-macro) (set! fd74@define-condition-type-macro (lambda (f193f@x) (letrec* ((f1942@mkname (lambda (f196f@name f1970@suffix) (fe62@datum->syntax f196f@name (string->symbol (string-append (symbol->string (fe64@syntax->datum f196f@name)) f1970@suffix)))))) (let ((f1943@t f193f@x)) (let ((f1945@ls/false (fd7e@syntax-dispatch f1943@t '(any any any any any . #(each (any any)))))) (if (and f1945@ls/false (apply (lambda (f1947@ctxt f1948@name f1949@super f194a@constructor f194b@predicate f194c@field* f194d@accessor*) (and (fb77@id? f1948@name) (fb77@id? f1949@super) (fb77@id? f194a@constructor) (fb77@id? f194b@predicate) (for-all fb77@id? f194c@field*) (for-all fb77@id? f194d@accessor*))) f1945@ls/false)) (apply (lambda (f1955@ctxt f1956@name f1957@super f1958@constructor f1959@predicate f195a@field* f195b@accessor*) (let ((f1963@aux-accessor* (map (lambda (f1965@x) (gensym)) f195b@accessor*))) (fd34@bless (cons 'begin (cons (cons 'define-record-type (cons (list f1956@name f1958@constructor (gensym)) (cons (list 'parent f1957@super) (cons (cons 'fields (map (lambda (f1967@field f1968@aux) (list 'immutable f1967@field f1968@aux)) f195a@field* f1963@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define f1959@predicate (list 'condition-predicate (list 'record-type-descriptor f1956@name))) (map (lambda (f196b@accessor f196c@aux) (list 'define f196b@accessor (list 'condition-accessor (list 'record-type-descriptor f1956@name) f196c@aux))) f195b@accessor* f1963@aux-accessor*))))))) f1945@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1943@t))))))) (set! f284f@fd74@define-condition-type-macro fd74@define-condition-type-macro) (set! fd76@incorrect-usage-macro (lambda (f1973@e) (fe5e@syntax-violation '#f '"incorrect usage of auxiliary keyword" f1973@e))) (set! f2850@fd76@incorrect-usage-macro fd76@incorrect-usage-macro) (set! fd78@parameterize-macro (lambda (f1975@e) (let ((f1977@t f1975@e)) (let ((f1979@ls/false (fd7e@syntax-dispatch f1977@t '(_ () any . each-any)))) (if f1979@ls/false (apply (lambda (f197b@b f197c@b*) (fd34@bless (cons 'let (cons '() (cons f197b@b f197c@b*))))) f1979@ls/false) (let ((f197f@t f1977@t)) (let ((f1981@ls/false (fd7e@syntax-dispatch f197f@t '(_ #(each (any any)) any . each-any)))) (if f1981@ls/false (apply (lambda (f1983@olhs* f1984@orhs* f1985@b f1986@b*) (let ((f198b@lhs* (fe4c@generate-temporaries f1983@olhs*)) (f198c@rhs* (fe4c@generate-temporaries f1984@orhs*))) (fd34@bless (cons (list 'lambda (append f198b@lhs* f198c@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (f198f@lhs f1990@rhs) (list 'let (list (list 't (list f198f@lhs))) (list f198f@lhs f1990@rhs) (cons 'set! (cons f1990@rhs '(t))))) f198b@lhs* f198c@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons f1985@b f1986@b*))) '(swap)))))) (append f1983@olhs* f1984@orhs*))))) f1981@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f197f@t))))))))) (set! f2851@fd78@parameterize-macro fd78@parameterize-macro) (set! fd7a@foreign-call-transformer (lambda (f1993@e f1994@r f1995@mr) (let ((f1999@t f1993@e)) (let ((f199b@ls/false (fd7e@syntax-dispatch f1999@t '(_ any . each-any)))) (if f199b@ls/false (apply (lambda (f199d@name f199e@arg*) (cons 'foreign-call (cons (fda0@chi-expr f199d@name f1994@r f1995@mr) (fd9c@chi-expr* f199e@arg* f1994@r f1995@mr)))) f199b@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1999@t)))))) (set! f2852@fd7a@foreign-call-transformer fd7a@foreign-call-transformer) (set! fd7c@convert-pattern (lambda (f19a1@pattern f19a2@keys) (letrec* ((f19a6@cvt* (lambda (f1a45@p* f1a46@n f1a47@ids) (if (null? f1a45@p*) (values '() f1a47@ids) (call-with-values (lambda () (f19a6@cvt* (cdr f1a45@p*) f1a46@n f1a47@ids)) (lambda (f1a4f@f1a4c f1a50@f1a4e) (let ((f1a53@ids f1a50@f1a4e) (f1a54@y f1a4f@f1a4c)) (call-with-values (lambda () (f19a8@cvt (car f1a45@p*) f1a46@n f1a53@ids)) (lambda (f1a5b@f1a58 f1a5c@f1a5a) (let ((f1a5f@ids f1a5c@f1a5a) (f1a60@x f1a5b@f1a58)) (values (cons f1a60@x f1a54@y) f1a5f@ids)))))))))) (f19a8@cvt (lambda (f19a9@p f19aa@n f19ab@ids) (let ((f19af@t f19a9@p)) (let ((f19b1@ls/false (fd7e@syntax-dispatch f19af@t 'any))) (if (and f19b1@ls/false (apply (lambda (f19b3@id) (fb77@id? f19b3@id)) f19b1@ls/false)) (apply (lambda (f19b5@id) (if (fb83@bound-id-member? f19a9@p f19a2@keys) (values (vector 'free-id f19a9@p) f19ab@ids) (if (fb7d@free-id=? f19a9@p (fd06@scheme-stx '_)) (values '_ f19ab@ids) (values 'any (cons (cons f19a9@p f19aa@n) f19ab@ids))))) f19b1@ls/false) (let ((f19b7@t f19af@t)) (let ((f19b9@ls/false (fd7e@syntax-dispatch f19b7@t '(any any)))) (if (and f19b9@ls/false (apply (lambda (f19bb@p f19bc@dots) (fd80@ellipsis? f19bc@dots)) f19b9@ls/false)) (apply (lambda (f19bf@p f19c0@dots) (call-with-values (lambda () (f19a8@cvt f19bf@p (+ f19aa@n '1) f19ab@ids)) (lambda (f19c7@f19c4 f19c8@f19c6) (let ((f19cb@ids f19c8@f19c6) (f19cc@p f19c7@f19c4)) (values (if (eq? f19cc@p 'any) 'each-any (vector 'each f19cc@p)) f19cb@ids))))) f19b9@ls/false) (let ((f19cf@t f19b7@t)) (let ((f19d1@ls/false (fd7e@syntax-dispatch f19cf@t '(any any . #(each+ any () any))))) (if (and f19d1@ls/false (apply (lambda (f19d3@x f19d4@dots f19d5@ys f19d6@z) (fd80@ellipsis? f19d4@dots)) f19d1@ls/false)) (apply (lambda (f19db@x f19dc@dots f19dd@ys f19de@z) (call-with-values (lambda () (f19a8@cvt f19de@z f19aa@n f19ab@ids)) (lambda (f19e7@f19e4 f19e8@f19e6) (let ((f19eb@ids f19e8@f19e6) (f19ec@z f19e7@f19e4)) (call-with-values (lambda () (f19a6@cvt* f19dd@ys f19aa@n f19eb@ids)) (lambda (f19f3@f19f0 f19f4@f19f2) (let ((f19f7@ids f19f4@f19f2) (f19f8@ys f19f3@f19f0)) (call-with-values (lambda () (f19a8@cvt f19db@x (+ f19aa@n '1) f19f7@ids)) (lambda (f19ff@f19fc f1a00@f19fe) (let ((f1a03@ids f1a00@f19fe) (f1a04@x f19ff@f19fc)) (values (vector 'each+ f1a04@x (reverse f19f8@ys) f19ec@z) f1a03@ids))))))))))) f19d1@ls/false) (let ((f1a07@t f19cf@t)) (let ((f1a09@ls/false (fd7e@syntax-dispatch f1a07@t '(any . any)))) (if f1a09@ls/false (apply (lambda (f1a0b@x f1a0c@y) (call-with-values (lambda () (f19a8@cvt f1a0c@y f19aa@n f19ab@ids)) (lambda (f1a13@f1a10 f1a14@f1a12) (let ((f1a17@ids f1a14@f1a12) (f1a18@y f1a13@f1a10)) (call-with-values (lambda () (f19a8@cvt f1a0b@x f19aa@n f1a17@ids)) (lambda (f1a1f@f1a1c f1a20@f1a1e) (let ((f1a23@ids f1a20@f1a1e) (f1a24@x f1a1f@f1a1c)) (values (cons f1a24@x f1a18@y) f1a23@ids)))))))) f1a09@ls/false) (let ((f1a27@t f1a07@t)) (let ((f1a29@ls/false (fd7e@syntax-dispatch f1a27@t '()))) (if f1a29@ls/false (apply (lambda () (values '() f19ab@ids)) f1a29@ls/false) (let ((f1a2b@t f1a27@t)) (let ((f1a2d@ls/false (fd7e@syntax-dispatch f1a2b@t '#(vector each-any)))) (if (and f1a2d@ls/false (apply (lambda (f1a2f@p) (not (fb43@stx? f1a2f@p))) f1a2d@ls/false)) (apply (lambda (f1a31@p) (call-with-values (lambda () (f19a8@cvt f1a31@p f19aa@n f19ab@ids)) (lambda (f1a37@f1a34 f1a38@f1a36) (let ((f1a3b@ids f1a38@f1a36) (f1a3c@p f1a37@f1a34)) (values (vector 'vector f1a3c@p) f1a3b@ids))))) f1a2d@ls/false) (let ((f1a3f@t f1a2b@t)) (let ((f1a41@ls/false (fd7e@syntax-dispatch f1a3f@t 'any))) (if f1a41@ls/false (apply (lambda (f1a43@datum) (values (vector 'atom (fb8b@stx->datum f1a43@datum)) f19ab@ids)) f1a41@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1a3f@t))))))))))))))))))))))))) (f19a8@cvt f19a1@pattern '0 '())))) (set! f2853@fd7c@convert-pattern fd7c@convert-pattern) (set! fd7e@syntax-dispatch (letrec* ((f1a64@stx^ (lambda (f1b3f@e f1b40@m* f1b41@s* f1b42@ae*) (if (and (null? f1b40@m*) (null? f1b41@s*) (null? f1b42@ae*)) f1b3f@e (fb5f@mkstx f1b3f@e f1b40@m* f1b41@s* f1b42@ae*)))) (f1a66@match-each (lambda (f1b1f@e f1b20@p f1b21@m* f1b22@s* f1b23@ae*) (if (pair? f1b1f@e) (let ((f1b29@first (f1a72@match (car f1b1f@e) f1b20@p f1b21@m* f1b22@s* f1b23@ae* '()))) (and f1b29@first (let ((f1b2b@rest (f1a66@match-each (cdr f1b1f@e) f1b20@p f1b21@m* f1b22@s* f1b23@ae*))) (and f1b2b@rest (cons f1b29@first f1b2b@rest))))) (if (null? f1b1f@e) '() (if (fb43@stx? f1b1f@e) (and (not (fafd@top-marked? f1b21@m*)) (call-with-values (lambda () (join-wraps f1b21@m* f1b22@s* f1b23@ae* f1b1f@e)) (lambda (f1b33@f1b2e f1b34@f1b30 f1b35@f1b32) (let ((f1b39@ae* f1b35@f1b32) (f1b3a@s* f1b34@f1b30) (f1b3b@m* f1b33@f1b2e)) (f1a66@match-each (fb45@stx-expr f1b1f@e) f1b20@p f1b3b@m* f1b3a@s* f1b39@ae*))))) (if (f6bb@f58d@annotation? f1b1f@e) (f1a66@match-each (f6bd@f591@annotation-expression f1b1f@e) f1b20@p f1b21@m* f1b22@s* f1b23@ae*) '#f)))))) (f1a68@match-each+ (lambda (f1adf@e f1ae0@x-pat f1ae1@y-pat f1ae2@z-pat f1ae3@m* f1ae4@s* f1ae5@ae* f1ae6@r) (let f1af7@f ((f1aef@e f1adf@e) (f1af0@m* f1ae3@m*) (f1af1@s* f1ae4@s*) (f1af2@ae* f1ae5@ae*)) (if (pair? f1aef@e) (call-with-values (lambda () (f1af7@f (cdr f1aef@e) f1af0@m* f1af1@s* f1af2@ae*)) (lambda (f1aff@f1afa f1b00@f1afc f1b01@f1afe) (let ((f1b05@r f1b01@f1afe) (f1b06@y-pat f1b00@f1afc) (f1b07@xr* f1aff@f1afa)) (if f1b05@r (if (null? f1b06@y-pat) (let ((f1b0b@xr (f1a72@match (car f1aef@e) f1ae0@x-pat f1af0@m* f1af1@s* f1af2@ae* '()))) (if f1b0b@xr (values (cons f1b0b@xr f1b07@xr*) f1b06@y-pat f1b05@r) (values '#f '#f '#f))) (values '() (cdr f1b06@y-pat) (f1a72@match (car f1aef@e) (car f1b06@y-pat) f1af0@m* f1af1@s* f1af2@ae* f1b05@r))) (values '#f '#f '#f))))) (if (fb43@stx? f1aef@e) (if (fafd@top-marked? f1af0@m*) (values '() f1ae1@y-pat (f1a72@match f1aef@e f1ae2@z-pat f1af0@m* f1af1@s* f1af2@ae* f1ae6@r)) (call-with-values (lambda () (join-wraps f1af0@m* f1af1@s* f1af2@ae* f1aef@e)) (lambda (f1b13@f1b0e f1b14@f1b10 f1b15@f1b12) (let ((f1b19@ae* f1b15@f1b12) (f1b1a@s* f1b14@f1b10) (f1b1b@m* f1b13@f1b0e)) (f1af7@f (fb45@stx-expr f1aef@e) f1b1b@m* f1b1a@s* f1b19@ae*))))) (if (f6bb@f58d@annotation? f1aef@e) (f1af7@f (f6bd@f591@annotation-expression f1aef@e) f1af0@m* f1af1@s* f1af2@ae*) (values '() f1ae1@y-pat (f1a72@match f1aef@e f1ae2@z-pat f1af0@m* f1af1@s* f1af2@ae* f1ae6@r)))))))) (f1a6a@match-each-any (lambda (f1ac3@e f1ac4@m* f1ac5@s* f1ac6@ae*) (if (pair? f1ac3@e) (let ((f1acb@l (f1a6a@match-each-any (cdr f1ac3@e) f1ac4@m* f1ac5@s* f1ac6@ae*))) (and f1acb@l (cons (f1a64@stx^ (car f1ac3@e) f1ac4@m* f1ac5@s* f1ac6@ae*) f1acb@l))) (if (null? f1ac3@e) '() (if (fb43@stx? f1ac3@e) (and (not (fafd@top-marked? f1ac4@m*)) (call-with-values (lambda () (join-wraps f1ac4@m* f1ac5@s* f1ac6@ae* f1ac3@e)) (lambda (f1ad3@f1ace f1ad4@f1ad0 f1ad5@f1ad2) (let ((f1ad9@ae* f1ad5@f1ad2) (f1ada@s* f1ad4@f1ad0) (f1adb@m* f1ad3@f1ace)) (f1a6a@match-each-any (fb45@stx-expr f1ac3@e) f1adb@m* f1ada@s* f1ad9@ae*))))) (if (f6bb@f58d@annotation? f1ac3@e) (f1a6a@match-each-any (f6bd@f591@annotation-expression f1ac3@e) f1ac4@m* f1ac5@s* f1ac6@ae*) '#f)))))) (f1a6c@match-empty (lambda (f1abd@p f1abe@r) (if (null? f1abd@p) f1abe@r (if (eq? f1abd@p '_) f1abe@r (if (eq? f1abd@p 'any) (cons '() f1abe@r) (if (pair? f1abd@p) (f1a6c@match-empty (car f1abd@p) (f1a6c@match-empty (cdr f1abd@p) f1abe@r)) (if (eq? f1abd@p 'each-any) (cons '() f1abe@r) (let ((f1ac1@t (vector-ref f1abd@p '0))) (if (memv f1ac1@t '(each)) (f1a6c@match-empty (vector-ref f1abd@p '1) f1abe@r) (if (memv f1ac1@t '(each+)) (f1a6c@match-empty (vector-ref f1abd@p '1) (f1a6c@match-empty (reverse (vector-ref f1abd@p '2)) (f1a6c@match-empty (vector-ref f1abd@p '3) f1abe@r))) (if (memv f1ac1@t '(free-id atom)) f1abe@r (if (memv f1ac1@t '(scheme-id atom)) f1abe@r (if (memv f1ac1@t '(vector)) (f1a6c@match-empty (vector-ref f1abd@p '1) f1abe@r) (assertion-violation 'syntax-dispatch '"invalid pattern" f1abd@p)))))))))))))) (f1a6e@combine (lambda (f1ab9@r* f1aba@r) (if (null? (car f1ab9@r*)) f1aba@r (cons (map car f1ab9@r*) (f1a6e@combine (map cdr f1ab9@r*) f1aba@r))))) (f1a70@match* (lambda (f1a95@e f1a96@p f1a97@m* f1a98@s* f1a99@ae* f1a9a@r) (if (null? f1a96@p) (and (null? f1a95@e) f1a9a@r) (if (pair? f1a96@p) (and (pair? f1a95@e) (f1a72@match (car f1a95@e) (car f1a96@p) f1a97@m* f1a98@s* f1a99@ae* (f1a72@match (cdr f1a95@e) (cdr f1a96@p) f1a97@m* f1a98@s* f1a99@ae* f1a9a@r))) (if (eq? f1a96@p 'each-any) (let ((f1aa1@l (f1a6a@match-each-any f1a95@e f1a97@m* f1a98@s* f1a99@ae*))) (and f1aa1@l (cons f1aa1@l f1a9a@r))) (let ((f1aa3@t (vector-ref f1a96@p '0))) (if (memv f1aa3@t '(each)) (if (null? f1a95@e) (f1a6c@match-empty (vector-ref f1a96@p '1) f1a9a@r) (let ((f1aa5@r* (f1a66@match-each f1a95@e (vector-ref f1a96@p '1) f1a97@m* f1a98@s* f1a99@ae*))) (and f1aa5@r* (f1a6e@combine f1aa5@r* f1a9a@r)))) (if (memv f1aa3@t '(free-id)) (and (symbol? f1a95@e) (fafd@top-marked? f1a97@m*) (fb7d@free-id=? (f1a64@stx^ f1a95@e f1a97@m* f1a98@s* f1a99@ae*) (vector-ref f1a96@p '1)) f1a9a@r) (if (memv f1aa3@t '(scheme-id)) (and (symbol? f1a95@e) (fafd@top-marked? f1a97@m*) (fb7d@free-id=? (f1a64@stx^ f1a95@e f1a97@m* f1a98@s* f1a99@ae*) (fd06@scheme-stx (vector-ref f1a96@p '1))) f1a9a@r) (if (memv f1aa3@t '(each+)) (call-with-values (lambda () (f1a68@match-each+ f1a95@e (vector-ref f1a96@p '1) (vector-ref f1a96@p '2) (vector-ref f1a96@p '3) f1a97@m* f1a98@s* f1a99@ae* f1a9a@r)) (lambda (f1aad@f1aa8 f1aae@f1aaa f1aaf@f1aac) (let ((f1ab3@r f1aaf@f1aac) (f1ab4@y-pat f1aae@f1aaa) (f1ab5@xr* f1aad@f1aa8)) (and f1ab3@r (null? f1ab4@y-pat) (if (null? f1ab5@xr*) (f1a6c@match-empty (vector-ref f1a96@p '1) f1ab3@r) (f1a6e@combine f1ab5@xr* f1ab3@r)))))) (if (memv f1aa3@t '(atom)) (and (fast-equal? (vector-ref f1a96@p '1) (fb89@strip f1a95@e f1a97@m*)) f1a9a@r) (if (memv f1aa3@t '(vector)) (and (vector? f1a95@e) (f1a72@match (vector->list f1a95@e) (vector-ref f1a96@p '1) f1a97@m* f1a98@s* f1a99@ae* f1a9a@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" f1a96@p))))))))))))) (f1a72@match (lambda (f1a77@e f1a78@p f1a79@m* f1a7a@s* f1a7b@ae* f1a7c@r) (if (not f1a7c@r) '#f (if (eq? f1a78@p '_) f1a7c@r (if (eq? f1a78@p 'any) (cons (f1a64@stx^ f1a77@e f1a79@m* f1a7a@s* f1a7b@ae*) f1a7c@r) (if (fb43@stx? f1a77@e) (and (not (fafd@top-marked? f1a79@m*)) (call-with-values (lambda () (join-wraps f1a79@m* f1a7a@s* f1a7b@ae* f1a77@e)) (lambda (f1a89@f1a84 f1a8a@f1a86 f1a8b@f1a88) (let ((f1a8f@ae* f1a8b@f1a88) (f1a90@s* f1a8a@f1a86) (f1a91@m* f1a89@f1a84)) (f1a72@match (fb45@stx-expr f1a77@e) f1a78@p f1a91@m* f1a90@s* f1a8f@ae* f1a7c@r))))) (if (f6bb@f58d@annotation? f1a77@e) (f1a72@match (f6bd@f591@annotation-expression f1a77@e) f1a78@p f1a79@m* f1a7a@s* f1a7b@ae* f1a7c@r) (f1a70@match* f1a77@e f1a78@p f1a79@m* f1a7a@s* f1a7b@ae* f1a7c@r))))))))) (lambda (f1a73@e f1a74@p) (f1a72@match f1a73@e f1a74@p '() '() '() '())))) (set! f2854@fd7e@syntax-dispatch fd7e@syntax-dispatch) (set! fd80@ellipsis? (lambda (f1b47@x) (and (fb77@id? f1b47@x) (fb7d@free-id=? f1b47@x (fd06@scheme-stx '...))))) (set! f2855@fd80@ellipsis? fd80@ellipsis?) (set! fd82@underscore? (lambda (f1b49@x) (and (fb77@id? f1b49@x) (fb7d@free-id=? f1b49@x (fd06@scheme-stx '_))))) (set! f2856@fd82@underscore? fd82@underscore?) (set! fd84@verify-literals (lambda (f1b4b@lits f1b4c@expr) (for-each (lambda (f1b4f@x) (if (or (not (fb77@id? f1b4f@x)) (fd80@ellipsis? f1b4f@x) (fd82@underscore? f1b4f@x)) (fe5e@syntax-violation '#f '"invalid literal" f1b4c@expr f1b4f@x) (void))) f1b4b@lits))) (set! f2857@fd84@verify-literals fd84@verify-literals) (set! fd86@syntax-case-transformer (letrec* ((f1b52@build-dispatch-call (lambda (f1bc3@pvars f1bc4@expr f1bc5@y f1bc6@r f1bc7@mr) (let ((f1bcd@ids (map car f1bc3@pvars)) (f1bce@levels (map cdr f1bc3@pvars))) (let ((f1bd1@labels (map fb03@gen-label f1bcd@ids)) (f1bd2@new-vars (map faff@gen-lexical f1bcd@ids))) (let ((f1bd5@body (fda0@chi-expr (fb63@add-subst (fb37@make-full-rib f1bcd@ids f1bd1@labels) f1bc4@expr) (append (map (lambda (f1bd7@label f1bd8@var f1bd9@level) (cons f1bd7@label (fb91@make-binding 'syntax (cons f1bd8@var f1bd9@level)))) f1bd1@labels f1bd2@new-vars (map cdr f1bc3@pvars)) f1bc6@r) f1bc7@mr))) (list '(primitive apply) (fada@fa0c@build-lambda '#f f1bd2@new-vars f1bd5@body) f1bc5@y)))))) (f1b54@invalid-ids-error (lambda (f1bb7@id* f1bb8@e f1bb9@class) (let f1bc1@find ((f1bbd@id* f1bb7@id*) (f1bbe@ok* '())) (if (null? f1bbd@id*) (fe5e@syntax-violation '#f '"invalid syntax" f1bb8@e) (if (fb77@id? (car f1bbd@id*)) (if (fb83@bound-id-member? (car f1bbd@id*) f1bbe@ok*) (fe5a@syntax-error (car f1bbd@id*) '"duplicate " f1bb9@class) (f1bc1@find (cdr f1bbd@id*) (cons (car f1bbd@id*) f1bbe@ok*))) (fe5a@syntax-error (car f1bbd@id*) '"invalid " f1bb9@class)))))) (f1b56@gen-clause (lambda (f1b8f@x f1b90@keys f1b91@clauses f1b92@r f1b93@mr f1b94@pat f1b95@fender f1b96@expr) (call-with-values (lambda () (fd7c@convert-pattern f1b94@pat f1b90@keys)) (lambda (f1ba3@f1ba0 f1ba4@f1ba2) (let ((f1ba7@pvars f1ba4@f1ba2) (f1ba8@p f1ba3@f1ba0)) (if (not (fb81@distinct-bound-ids? (map car f1ba7@pvars))) (f1b54@invalid-ids-error (map car f1ba7@pvars) f1b94@pat '"pattern variable") (if (not (for-all (lambda (f1bab@x) (not (fd80@ellipsis? (car f1bab@x)))) f1ba7@pvars)) (fe5e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" f1b94@pat) (let ((f1bad@y (faff@gen-lexical 'tmp))) (let ((f1baf@test (if (eq? f1b95@fender '#t) f1bad@y (let ((f1bb1@call (f1b52@build-dispatch-call f1ba7@pvars f1b95@fender f1bad@y f1b92@r f1b93@mr))) (list 'if f1bad@y f1bb1@call (list 'quote '#f)))))) (let ((f1bb3@conseq (f1b52@build-dispatch-call f1ba7@pvars f1b96@expr f1bad@y f1b92@r f1b93@mr))) (let ((f1bb5@altern (f1b58@gen-syntax-case f1b8f@x f1b90@keys f1b91@clauses f1b92@r f1b93@mr))) (list (fada@fa0c@build-lambda '#f (list f1bad@y) (list 'if f1baf@test f1bb3@conseq f1bb5@altern)) (list '(primitive syntax-dispatch) f1b8f@x (list 'quote f1ba8@p)))))))))))))) (f1b58@gen-syntax-case (lambda (f1b6d@x f1b6e@keys f1b6f@clauses f1b70@r f1b71@mr) (if (null? f1b6f@clauses) (list '(primitive syntax-error) f1b6d@x) (let ((f1b77@t (car f1b6f@clauses))) (let ((f1b79@ls/false (fd7e@syntax-dispatch f1b77@t '(any any)))) (if f1b79@ls/false (apply (lambda (f1b7b@pat f1b7c@expr) (if (and (fb77@id? f1b7b@pat) (not (fb83@bound-id-member? f1b7b@pat f1b6e@keys)) (not (fd80@ellipsis? f1b7b@pat))) (if (fb7d@free-id=? f1b7b@pat (fd06@scheme-stx '_)) (fda0@chi-expr f1b7c@expr f1b70@r f1b71@mr) (let ((f1b7f@lab (fb03@gen-label f1b7b@pat)) (f1b80@lex (faff@gen-lexical f1b7b@pat))) (let ((f1b83@body (fda0@chi-expr (fb63@add-subst (fb37@make-full-rib (list f1b7b@pat) (list f1b7f@lab)) f1b7c@expr) (cons (cons f1b7f@lab (fb91@make-binding 'syntax (cons f1b80@lex '0))) f1b70@r) f1b71@mr))) (list (fada@fa0c@build-lambda '#f (list f1b80@lex) f1b83@body) f1b6d@x)))) (f1b56@gen-clause f1b6d@x f1b6e@keys (cdr f1b6f@clauses) f1b70@r f1b71@mr f1b7b@pat '#t f1b7c@expr))) f1b79@ls/false) (let ((f1b85@t f1b77@t)) (let ((f1b87@ls/false (fd7e@syntax-dispatch f1b85@t '(any any any)))) (if f1b87@ls/false (apply (lambda (f1b89@pat f1b8a@fender f1b8b@expr) (f1b56@gen-clause f1b6d@x f1b6e@keys (cdr f1b6f@clauses) f1b70@r f1b71@mr f1b89@pat f1b8a@fender f1b8b@expr)) f1b87@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1b85@t))))))))))) (lambda (f1b59@e f1b5a@r f1b5b@mr) (let ((f1b5f@t f1b59@e)) (let ((f1b61@ls/false (fd7e@syntax-dispatch f1b5f@t '(_ any each-any . each-any)))) (if f1b61@ls/false (apply (lambda (f1b63@expr f1b64@keys f1b65@clauses) (begin (fd84@verify-literals f1b64@keys f1b59@e) (let ((f1b69@x (faff@gen-lexical 'tmp))) (let ((f1b6b@body (f1b58@gen-syntax-case f1b69@x f1b64@keys f1b65@clauses f1b5a@r f1b5b@mr))) (list (fada@fa0c@build-lambda '#f (list f1b69@x) f1b6b@body) (fda0@chi-expr f1b63@expr f1b5a@r f1b5b@mr)))))) f1b61@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1b5f@t))))))) (set! f2858@fd86@syntax-case-transformer fd86@syntax-case-transformer) (set! fd88@ellipsis-map (lambda (f1bdd@proc f1bde@ls . f1be1@ls*) (letrec* ((f1be4@who '...)) (begin (if (not (list? f1bde@ls)) (assertion-violation f1be4@who '"not a list" f1bde@ls) (void)) (if (not (null? f1be1@ls*)) (let ((f1be5@n (length f1bde@ls))) (for-each (lambda (f1be7@x) (begin (if (not (list? f1be7@x)) (assertion-violation f1be4@who '"not a list" f1be7@x) (void)) (if (not (= (length f1be7@x) f1be5@n)) (assertion-violation f1be4@who '"length mismatch" f1bde@ls f1be7@x) (void)))) f1be1@ls*)) (void)) (apply map f1bdd@proc f1bde@ls f1be1@ls*))))) (set! f2859@fd88@ellipsis-map fd88@ellipsis-map) (set! fd8a@syntax-transformer (letrec* ((f1bea@gen-syntax (lambda (f1c61@src f1c62@e f1c63@r f1c64@maps f1c65@ellipsis? f1c66@vec?) (let ((f1c6d@t f1c62@e)) (let ((f1c6f@ls/false (fd7e@syntax-dispatch f1c6d@t 'any))) (if (and f1c6f@ls/false (apply (lambda (f1c71@dots) (f1c65@ellipsis? f1c71@dots)) f1c6f@ls/false)) (apply (lambda (f1c73@dots) (fe5e@syntax-violation '#f '"misplaced ellipsis in syntax form" f1c61@src)) f1c6f@ls/false) (let ((f1c75@t f1c6d@t)) (let ((f1c77@ls/false (fd7e@syntax-dispatch f1c75@t 'any))) (if (and f1c77@ls/false (apply (lambda (f1c79@id) (fb77@id? f1c79@id)) f1c77@ls/false)) (apply (lambda (f1c7b@id) (let ((f1c7d@label (fb8d@id->label f1c62@e))) (let ((f1c7f@b (fb8f@label->binding f1c7d@label f1c63@r))) (if (eq? (fb93@binding-type f1c7f@b) 'syntax) (call-with-values (lambda () (let ((f1c85@var.lev (fb95@binding-value f1c7f@b))) (f1bec@gen-ref f1c61@src (car f1c85@var.lev) (cdr f1c85@var.lev) f1c64@maps))) (lambda (f1c87@f1c82 f1c88@f1c84) (let ((f1c8b@maps f1c88@f1c84) (f1c8c@var f1c87@f1c82)) (values (list 'ref f1c8c@var) f1c8b@maps)))) (values (list 'quote f1c62@e) f1c64@maps))))) f1c77@ls/false) (let ((f1c8f@t f1c75@t)) (let ((f1c91@ls/false (fd7e@syntax-dispatch f1c8f@t '(any any)))) (if (and f1c91@ls/false (apply (lambda (f1c93@dots f1c94@e) (f1c65@ellipsis? f1c93@dots)) f1c91@ls/false)) (apply (lambda (f1c97@dots f1c98@e) (if f1c66@vec? (fe5e@syntax-violation '#f '"misplaced ellipsis in syntax form" f1c61@src) (f1bea@gen-syntax f1c61@src f1c98@e f1c63@r f1c64@maps (lambda (f1c9b@x) '#f) '#f))) f1c91@ls/false) (let ((f1c9d@t f1c8f@t)) (let ((f1c9f@ls/false (fd7e@syntax-dispatch f1c9d@t '(any any . any)))) (if (and f1c9f@ls/false (apply (lambda (f1ca1@x f1ca2@dots f1ca3@y) (f1c65@ellipsis? f1ca2@dots)) f1c9f@ls/false)) (apply (lambda (f1ca7@x f1ca8@dots f1ca9@y) (let f1cbf@f ((f1cad@y f1ca9@y) (f1cae@k (lambda (f1cb1@maps) (call-with-values (lambda () (f1bea@gen-syntax f1c61@src f1ca7@x f1c63@r (cons '() f1cb1@maps) f1c65@ellipsis? '#f)) (lambda (f1cb7@f1cb4 f1cb8@f1cb6) (let ((f1cbb@maps f1cb8@f1cb6) (f1cbc@x f1cb7@f1cb4)) (if (null? (car f1cbb@maps)) (fe5e@syntax-violation '#f '"extra ellipsis in syntax form" f1c61@src) (values (f1bf2@gen-map f1cbc@x (car f1cbb@maps)) (cdr f1cbb@maps))))))))) (let ((f1cc1@t f1cad@y)) (let ((f1cc3@ls/false (fd7e@syntax-dispatch f1cc1@t '()))) (if f1cc3@ls/false (apply (lambda () (f1cae@k f1c64@maps)) f1cc3@ls/false) (let ((f1cc5@t f1cc1@t)) (let ((f1cc7@ls/false (fd7e@syntax-dispatch f1cc5@t '(any . any)))) (if (and f1cc7@ls/false (apply (lambda (f1cc9@dots f1cca@y) (f1c65@ellipsis? f1cc9@dots)) f1cc7@ls/false)) (apply (lambda (f1ccd@dots f1cce@y) (f1cbf@f f1cce@y (lambda (f1cd1@maps) (call-with-values (lambda () (f1cae@k (cons '() f1cd1@maps))) (lambda (f1cd7@f1cd4 f1cd8@f1cd6) (let ((f1cdb@maps f1cd8@f1cd6) (f1cdc@x f1cd7@f1cd4)) (if (null? (car f1cdb@maps)) (fe5e@syntax-violation '#f '"extra ellipsis in syntax form" f1c61@src) (values (f1bf0@gen-mappend f1cdc@x (car f1cdb@maps)) (cdr f1cdb@maps))))))))) f1cc7@ls/false) (let ((f1cdf@t f1cc5@t)) (let ((f1ce1@ls/false (fd7e@syntax-dispatch f1cdf@t '_))) (if f1ce1@ls/false (apply (lambda () (call-with-values (lambda () (f1bea@gen-syntax f1c61@src f1cad@y f1c63@r f1c64@maps f1c65@ellipsis? f1c66@vec?)) (lambda (f1ce7@f1ce4 f1ce8@f1ce6) (let ((f1ceb@maps f1ce8@f1ce6) (f1cec@y f1ce7@f1ce4)) (call-with-values (lambda () (f1cae@k f1ceb@maps)) (lambda (f1cf3@f1cf0 f1cf4@f1cf2) (let ((f1cf7@maps f1cf4@f1cf2) (f1cf8@x f1cf3@f1cf0)) (values (f1bee@gen-append f1cf8@x f1cec@y) f1cf7@maps)))))))) f1ce1@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1cdf@t)))))))))))) f1c9f@ls/false) (let ((f1cfb@t f1c9d@t)) (let ((f1cfd@ls/false (fd7e@syntax-dispatch f1cfb@t '(any . any)))) (if f1cfd@ls/false (apply (lambda (f1cff@x f1d00@y) (call-with-values (lambda () (f1bea@gen-syntax f1c61@src f1cff@x f1c63@r f1c64@maps f1c65@ellipsis? '#f)) (lambda (f1d07@f1d04 f1d08@f1d06) (let ((f1d0b@maps f1d08@f1d06) (f1d0c@xnew f1d07@f1d04)) (call-with-values (lambda () (f1bea@gen-syntax f1c61@src f1d00@y f1c63@r f1d0b@maps f1c65@ellipsis? f1c66@vec?)) (lambda (f1d13@f1d10 f1d14@f1d12) (let ((f1d17@maps f1d14@f1d12) (f1d18@ynew f1d13@f1d10)) (values (f1bf4@gen-cons f1c62@e f1cff@x f1d00@y f1d0c@xnew f1d18@ynew) f1d17@maps)))))))) f1cfd@ls/false) (let ((f1d1b@t f1cfb@t)) (let ((f1d1d@ls/false (fd7e@syntax-dispatch f1d1b@t '#(vector each-any)))) (if f1d1d@ls/false (apply (lambda (f1d1f@ls) (call-with-values (lambda () (f1bea@gen-syntax f1c61@src f1d1f@ls f1c63@r f1c64@maps f1c65@ellipsis? '#t)) (lambda (f1d25@f1d22 f1d26@f1d24) (let ((f1d29@maps f1d26@f1d24) (f1d2a@lsnew f1d25@f1d22)) (values (f1bf6@gen-vector f1c62@e f1d1f@ls f1d2a@lsnew) f1d29@maps))))) f1d1d@ls/false) (let ((f1d2d@t f1d1b@t)) (let ((f1d2f@ls/false (fd7e@syntax-dispatch f1d2d@t '_))) (if f1d2f@ls/false (apply (lambda () (values (list 'quote f1c62@e) f1c64@maps)) f1d2f@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1d2d@t)))))))))))))))))))))))) (f1bec@gen-ref (lambda (f1c47@src f1c48@var f1c49@level f1c4a@maps) (if (= f1c49@level '0) (values f1c48@var f1c4a@maps) (if (null? f1c4a@maps) (fe5e@syntax-violation '#f '"missing ellipsis in syntax form" f1c47@src) (call-with-values (lambda () (f1bec@gen-ref f1c47@src f1c48@var (- f1c49@level '1) (cdr f1c4a@maps))) (lambda (f1c53@f1c50 f1c54@f1c52) (let ((f1c57@outer-maps f1c54@f1c52) (f1c58@outer-var f1c53@f1c50)) (let ((f1c5b@t (assq f1c58@outer-var (car f1c4a@maps)))) (if f1c5b@t ((lambda (f1c5d@b) (values (cdr f1c5d@b) f1c4a@maps)) f1c5b@t) (let ((f1c5f@inner-var (faff@gen-lexical 'tmp))) (values f1c5f@inner-var (cons (cons (cons f1c58@outer-var f1c5f@inner-var) (car f1c4a@maps)) f1c57@outer-maps)))))))))))) (f1bee@gen-append (lambda (f1c43@x f1c44@y) (if (fast-equal? f1c44@y ''()) f1c43@x (list 'append f1c43@x f1c44@y)))) (f1bf0@gen-mappend (lambda (f1c3f@e f1c40@map-env) (list 'apply '(primitive append) (f1bf2@gen-map f1c3f@e f1c40@map-env)))) (f1bf2@gen-map (lambda (f1c2d@e f1c2e@map-env) (let ((f1c31@formals (map cdr f1c2e@map-env)) (f1c32@actuals (map (lambda (f1c35@x) (list 'ref (car f1c35@x))) f1c2e@map-env))) (if (eq? (car f1c2d@e) 'ref) (car f1c32@actuals) (if (for-all (lambda (f1c37@x) (and (eq? (car f1c37@x) 'ref) (memq (cadr f1c37@x) f1c31@formals))) (cdr f1c2d@e)) (let ((f1c39@args (map (let ((f1c3b@r (map cons f1c31@formals f1c32@actuals))) (lambda (f1c3d@x) (cdr (assq (cadr f1c3d@x) f1c3b@r)))) (cdr f1c2d@e)))) (cons 'map (cons (list 'primitive (car f1c2d@e)) f1c39@args))) (cons* 'map (list 'lambda f1c31@formals f1c2d@e) f1c32@actuals)))))) (f1bf4@gen-cons (lambda (f1c1d@e f1c1e@x f1c1f@y f1c20@xnew f1c21@ynew) (let ((f1c27@t (car f1c21@ynew))) (if (memv f1c27@t '(quote)) (if (eq? (car f1c20@xnew) 'quote) (let ((f1c29@xnew (cadr f1c20@xnew)) (f1c2a@ynew (cadr f1c21@ynew))) (if (and (eq? f1c29@xnew f1c1e@x) (eq? f1c2a@ynew f1c1f@y)) (list 'quote f1c1d@e) (list 'quote (cons f1c29@xnew f1c2a@ynew)))) (if (null? (cadr f1c21@ynew)) (list 'list f1c20@xnew) (list 'cons f1c20@xnew f1c21@ynew))) (if (memv f1c27@t '(list)) (cons 'list (cons f1c20@xnew (cdr f1c21@ynew))) (list 'cons f1c20@xnew f1c21@ynew)))))) (f1bf6@gen-vector (lambda (f1c17@e f1c18@ls f1c19@lsnew) (if (eq? (car f1c19@lsnew) 'quote) (if (eq? (cadr f1c19@lsnew) f1c18@ls) (list 'quote f1c17@e) (list 'quote (list->vector (cadr f1c19@lsnew)))) (if (eq? (car f1c19@lsnew) 'list) (cons 'vector (cdr f1c19@lsnew)) (list 'list->vector f1c19@lsnew))))) (f1bf8@regen (lambda (f1c11@x) (let ((f1c13@t (car f1c11@x))) (if (memv f1c13@t '(ref)) (cadr f1c11@x) (if (memv f1c13@t '(primitive)) (list 'primitive (cadr f1c11@x)) (if (memv f1c13@t '(quote)) (list 'quote (cadr f1c11@x)) (if (memv f1c13@t '(lambda)) (fada@fa0c@build-lambda '#f (cadr f1c11@x) (f1bf8@regen (caddr f1c11@x))) (if (memv f1c13@t '(map)) (let ((f1c15@ls (map f1bf8@regen (cdr f1c11@x)))) (cons '(primitive ellipsis-map) f1c15@ls)) (cons (list 'primitive (car f1c11@x)) (map f1bf8@regen (cdr f1c11@x)))))))))))) (lambda (f1bf9@e f1bfa@r f1bfb@mr) (let ((f1bff@t f1bf9@e)) (let ((f1c01@ls/false (fd7e@syntax-dispatch f1bff@t '(_ any)))) (if f1c01@ls/false (apply (lambda (f1c03@x) (call-with-values (lambda () (f1bea@gen-syntax f1bf9@e f1c03@x f1bfa@r '() fd80@ellipsis? '#f)) (lambda (f1c09@f1c06 f1c0a@f1c08) (let ((f1c0d@maps f1c0a@f1c08) (f1c0e@e f1c09@f1c06)) (f1bf8@regen f1c0e@e))))) f1c01@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1bff@t))))))) (set! f285a@fd8a@syntax-transformer fd8a@syntax-transformer) (set! fd8c@core-macro-transformer (lambda (f1d31@name) (let ((f1d33@t f1d31@name)) (if (memv f1d33@t '(quote)) fd2e@quote-transformer (if (memv f1d33@t '(lambda)) fd32@lambda-transformer (if (memv f1d33@t '(case-lambda)) fd30@case-lambda-transformer (if (memv f1d33@t '(letrec)) fd16@letrec-transformer (if (memv f1d33@t '(letrec*)) fd18@letrec*-transformer (if (memv f1d33@t '(let)) fd14@let-transformer (if (memv f1d33@t '(if)) fd26@if-transformer (if (memv f1d33@t '(and)) fd28@and-transformer (if (memv f1d33@t '(or)) fd2a@or-transformer (if (memv f1d33@t '(foreign-call)) fd7a@foreign-call-transformer (if (memv f1d33@t '(syntax-case)) fd86@syntax-case-transformer (if (memv f1d33@t '(syntax)) fd8a@syntax-transformer (if (memv f1d33@t '(type-descriptor)) fd1c@type-descriptor-transformer (if (memv f1d33@t '(record-type-descriptor)) fd1e@record-type-descriptor-transformer (if (memv f1d33@t '(record-constructor-descriptor)) fd20@record-constructor-descriptor-transformer (if (memv f1d33@t '(fluid-let-syntax)) fd1a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" f1d31@name)))))))))))))))))))) (set! f285b@fd8c@core-macro-transformer fd8c@core-macro-transformer) (set! fd8e@symbol-macro (lambda (f1d35@x f1d36@set) (let ((f1d39@t f1d35@x)) (let ((f1d3b@ls/false (fd7e@syntax-dispatch f1d39@t '(_ any)))) (if (and f1d3b@ls/false (apply (lambda (f1d3d@name) (and (fb77@id? f1d3d@name) (memq (fb79@id->sym f1d3d@name) f1d36@set))) f1d3b@ls/false)) (apply (lambda (f1d3f@name) (fd34@bless (list 'quote f1d3f@name))) f1d3b@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1d39@t)))))) (set! f285c@fd8e@symbol-macro fd8e@symbol-macro) (set! fd90@macro-transformer (lambda (f1d41@x) (if (procedure? f1d41@x) f1d41@x (if (symbol? f1d41@x) (let ((f1d43@t f1d41@x)) (if (memv f1d43@t '(define-record-type)) fd72@define-record-type-macro (if (memv f1d43@t '(define-struct)) fd70@define-struct-macro (if (memv f1d43@t '(include)) fd66@include-macro (if (memv f1d43@t '(cond)) fd62@cond-macro (if (memv f1d43@t '(let)) fd3a@let-macro (if (memv f1d43@t '(do)) fd5a@do-macro (if (memv f1d43@t '(or)) fd5e@or-macro (if (memv f1d43@t '(and)) fd60@and-macro (if (memv f1d43@t '(let*)) fd5c@let*-macro (if (memv f1d43@t '(let-values)) fd3c@let-values-macro (if (memv f1d43@t '(let*-values)) fd3e@let*-values-macro (if (memv f1d43@t '(syntax-rules)) fd6a@syntax-rules-macro (if (memv f1d43@t '(quasiquote)) fd6c@quasiquote-macro (if (memv f1d43@t '(quasisyntax)) fd6e@quasisyntax-macro (if (memv f1d43@t '(with-syntax)) fd36@with-syntax-macro (if (memv f1d43@t '(when)) fd22@when-macro (if (memv f1d43@t '(unless)) fd24@unless-macro (if (memv f1d43@t '(case)) fd2c@case-macro (if (memv f1d43@t '(identifier-syntax)) fd58@identifier-syntax-macro (if (memv f1d43@t '(time)) fd50@time-macro (if (memv f1d43@t '(delay)) fd52@delay-macro (if (memv f1d43@t '(assert)) fd54@assert-macro (if (memv f1d43@t '(endianness)) fd56@endianness-macro (if (memv f1d43@t '(guard)) fd4c@guard-macro (if (memv f1d43@t '(define-enumeration)) fd4e@define-enumeration-macro (if (memv f1d43@t '(trace-lambda)) fd40@trace-lambda-macro (if (memv f1d43@t '(trace-define)) fd42@trace-define-macro (if (memv f1d43@t '(trace-define-syntax)) fd44@trace-define-syntax-macro (if (memv f1d43@t '(trace-let-syntax)) fd48@trace-let-syntax-macro (if (memv f1d43@t '(trace-letrec-syntax)) fd4a@trace-letrec-syntax-macro (if (memv f1d43@t '(define-condition-type)) fd74@define-condition-type-macro (if (memv f1d43@t '(parameterize)) fd78@parameterize-macro (if (memv f1d43@t '(include-into)) fd68@include-into-macro (if (memv f1d43@t '(eol-style)) (lambda (f1d45@x) (fd8e@symbol-macro f1d45@x '(none lf cr crlf nel crnel ls))) (if (memv f1d43@t '(error-handling-mode)) (lambda (f1d47@x) (fd8e@symbol-macro f1d47@x '(ignore raise replace))) (if (memv f1d43@t '(buffer-mode)) (lambda (f1d49@x) (fd8e@symbol-macro f1d49@x '(none line block))) (if (memv f1d43@t '(file-options)) faf2@file-options-macro (if (memv f1d43@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) fd76@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" f1d41@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" f1d41@x))))) (set! f285d@fd90@macro-transformer fd90@macro-transformer) (set! fd92@local-macro-transformer (lambda (f1d4b@x) (car f1d4b@x))) (set! f285e@fd92@local-macro-transformer fd92@local-macro-transformer) (set! fd94@do-macro-call (lambda (f1d4d@transformer f1d4e@expr) (let ((f1d51@out (f1d4d@transformer (fb61@add-mark fb5b@anti-mark f1d4e@expr '#f)))) (begin (let f1d55@f ((f1d53@x f1d51@out)) (if (not (fb43@stx? f1d53@x)) (if (pair? f1d53@x) (begin (f1d55@f (car f1d53@x)) (f1d55@f (cdr f1d53@x))) (if (vector? f1d53@x) (vector-for-each f1d55@f f1d53@x) (if (symbol? f1d53@x) (fe5e@syntax-violation '#f '"raw symbol encountered in output of macro" f1d4e@expr f1d53@x) (void)))) (void))) (fb61@add-mark (fb59@gen-mark) f1d51@out f1d4e@expr))))) (set! f285f@fd94@do-macro-call fd94@do-macro-call) (set! fd96@chi-macro (lambda (f1d57@p f1d58@e) (fd94@do-macro-call (fd90@macro-transformer f1d57@p) f1d58@e))) (set! f2860@fd96@chi-macro fd96@chi-macro) (set! fd98@chi-local-macro (lambda (f1d5b@p f1d5c@e) (fd94@do-macro-call (fd92@local-macro-transformer f1d5b@p) f1d5c@e))) (set! f2861@fd98@chi-local-macro fd98@chi-local-macro) (set! fd9a@chi-global-macro (lambda (f1d5f@p f1d60@e) (let ((f1d63@lib (car f1d5f@p)) (f1d64@loc (cdr f1d5f@p))) (begin (f994@f7e3@visit-library f1d63@lib) (let ((f1d67@x (symbol-value f1d64@loc))) (let ((f1d69@transformer (if (procedure? f1d67@x) f1d67@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" f1d67@x)))) (fd94@do-macro-call f1d69@transformer f1d60@e))))))) (set! f2862@fd9a@chi-global-macro fd9a@chi-global-macro) (set! fd9c@chi-expr* (lambda (f1d6b@e* f1d6c@r f1d6d@mr) (if (null? f1d6b@e*) '() (let ((f1d71@e (fda0@chi-expr (car f1d6b@e*) f1d6c@r f1d6d@mr))) (cons f1d71@e (fd9c@chi-expr* (cdr f1d6b@e*) f1d6c@r f1d6d@mr)))))) (set! f2863@fd9c@chi-expr* fd9c@chi-expr*) (set! fd9e@chi-application (lambda (f1d73@e f1d74@r f1d75@mr) (let ((f1d79@t f1d73@e)) (let ((f1d7b@ls/false (fd7e@syntax-dispatch f1d79@t '(any . each-any)))) (if f1d7b@ls/false (apply (lambda (f1d7d@rator f1d7e@rands) (let ((f1d81@rator (fda0@chi-expr f1d7d@rator f1d74@r f1d75@mr))) (cons f1d81@rator (fd9c@chi-expr* f1d7e@rands f1d74@r f1d75@mr)))) f1d7b@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1d79@t)))))) (set! f2864@fd9e@chi-application fd9e@chi-application) (set! fda0@chi-expr (lambda (f1d83@e f1d84@r f1d85@mr) (call-with-values (lambda () (fb99@syntax-type f1d83@e f1d84@r)) (lambda (f1d8f@f1d8a f1d90@f1d8c f1d91@f1d8e) (let ((f1d95@kwd f1d91@f1d8e) (f1d96@value f1d90@f1d8c) (f1d97@type f1d8f@f1d8a)) (let ((f1d9b@t f1d97@type)) (if (memv f1d9b@t '(core-macro)) (let ((f1d9d@transformer (fd8c@core-macro-transformer f1d96@value))) (f1d9d@transformer f1d83@e f1d84@r f1d85@mr)) (if (memv f1d9b@t '(global)) (let ((f1d9f@lib (car f1d96@value))) (let ((f1da1@loc (cdr f1d96@value))) (begin ((fde6@inv-collector) f1d9f@lib) f1da1@loc))) (if (memv f1d9b@t '(core-prim)) (let ((f1da3@name f1d96@value)) (list 'primitive f1da3@name)) (if (memv f1d9b@t '(call)) (fd9e@chi-application f1d83@e f1d84@r f1d85@mr) (if (memv f1d9b@t '(lexical)) (let ((f1da5@lex (fd08@lexical-var f1d96@value))) f1da5@lex) (if (memv f1d9b@t '(global-macro global-macro!)) (fda0@chi-expr (fd9a@chi-global-macro f1d96@value f1d83@e) f1d84@r f1d85@mr) (if (memv f1d9b@t '(local-macro local-macro!)) (fda0@chi-expr (fd98@chi-local-macro f1d96@value f1d83@e) f1d84@r f1d85@mr) (if (memv f1d9b@t '(macro macro!)) (fda0@chi-expr (fd96@chi-macro f1d96@value f1d83@e) f1d84@r f1d85@mr) (if (memv f1d9b@t '(constant)) (let ((f1da7@datum f1d96@value)) (list 'quote f1da7@datum)) (if (memv f1d9b@t '(set!)) (fda2@chi-set! f1d83@e f1d84@r f1d85@mr) (if (memv f1d9b@t '(begin)) (let ((f1da9@t f1d83@e)) (let ((f1dab@ls/false (fd7e@syntax-dispatch f1da9@t '(_ any . each-any)))) (if f1dab@ls/false (apply (lambda (f1dad@x f1dae@x*) (fadc@fa3c@build-sequence '#f (fd9c@chi-expr* (cons f1dad@x f1dae@x*) f1d84@r f1d85@mr))) f1dab@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1da9@t)))) (if (memv f1d9b@t '(let-syntax letrec-syntax)) (let ((f1db1@t f1d83@e)) (let ((f1db3@ls/false (fd7e@syntax-dispatch f1db1@t '(_ #(each (any any)) any . each-any)))) (if (and f1db3@ls/false (apply (lambda (f1db5@xlhs* f1db6@xrhs* f1db7@xbody f1db8@xbody*) (if (not (fb7f@valid-bound-ids? f1db5@xlhs*)) (fe5e@syntax-violation '#f '"invalid identifiers" f1d83@e) (void))) f1db3@ls/false)) (apply (lambda (f1dbd@xlhs* f1dbe@xrhs* f1dbf@xbody f1dc0@xbody*) (let ((f1dc5@xlab* (map fb03@gen-label f1dbd@xlhs*))) (let ((f1dc7@xrib (fb37@make-full-rib f1dbd@xlhs* f1dc5@xlab*))) (let ((f1dc9@xb* (map (lambda (f1dcb@x) (fbaf@make-eval-transformer (fdd8@expand-transformer (if (eq? f1d97@type 'let-syntax) f1dcb@x (fb63@add-subst f1dc7@xrib f1dcb@x)) f1d85@mr))) f1dbe@xrhs*))) (fadc@fa3c@build-sequence '#f (fd9c@chi-expr* (map (lambda (f1dcd@x) (fb63@add-subst f1dc7@xrib f1dcd@x)) (cons f1dbf@xbody f1dc0@xbody*)) (append (map cons f1dc5@xlab* f1dc9@xb*) f1d84@r) (append (map cons f1dc5@xlab* f1dc9@xb*) f1d85@mr))))))) f1db3@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1db1@t)))) (if (memv f1d9b@t '(displaced-lexical)) (fe5e@syntax-violation '#f '"identifier out of context" f1d83@e) (if (memv f1d9b@t '(syntax)) (fe5e@syntax-violation '#f '"reference to pattern variable outside a syntax form" f1d83@e) (if (memv f1d9b@t '(define define-syntax module import library)) (fe5e@syntax-violation '#f (string-append (let ((f1dcf@t f1d97@type)) (if (memv f1dcf@t '(define)) '"a definition" (if (memv f1dcf@t '(define-syntax)) '"a define-syntax" (if (memv f1dcf@t '(module)) '"a module definition" (if (memv f1dcf@t '(library)) '"a library definition" (if (memv f1dcf@t '(import)) '"an import declaration" (if (memv f1dcf@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") f1d83@e) (if (memv f1d9b@t '(mutable)) (fe5e@syntax-violation '#f '"attempt to reference an unexportable variable" f1d83@e) (fe5e@syntax-violation '#f '"invalid expression" f1d83@e))))))))))))))))))))))) (set! f2865@fda0@chi-expr fda0@chi-expr) (set! fda2@chi-set! (lambda (f1dd1@e f1dd2@r f1dd3@mr) (let ((f1dd7@t f1dd1@e)) (let ((f1dd9@ls/false (fd7e@syntax-dispatch f1dd7@t '(_ any any)))) (if (and f1dd9@ls/false (apply (lambda (f1ddb@x f1ddc@v) (fb77@id? f1ddb@x)) f1dd9@ls/false)) (apply (lambda (f1ddf@x f1de0@v) (call-with-values (lambda () (fb99@syntax-type f1ddf@x f1dd2@r)) (lambda (f1de9@f1de4 f1dea@f1de6 f1deb@f1de8) (let ((f1def@kwd f1deb@f1de8) (f1df0@value f1dea@f1de6) (f1df1@type f1de9@f1de4)) (let ((f1df5@t f1df1@type)) (if (memv f1df5@t '(lexical)) (begin (fd0c@set-lexical-mutable! f1df0@value '#t) (list 'set! (fd08@lexical-var f1df0@value) (fda0@chi-expr f1de0@v f1dd2@r f1dd3@mr))) (if (memv f1df5@t '(core-prim)) (fe5e@syntax-violation '#f '"cannot modify imported core primitive" f1dd1@e) (if (memv f1df5@t '(global)) (fe5e@syntax-violation '#f '"attempt to modify imported binding" f1dd1@e) (if (memv f1df5@t '(global-macro!)) (fda0@chi-expr (fd9a@chi-global-macro f1df0@value f1dd1@e) f1dd2@r f1dd3@mr) (if (memv f1df5@t '(local-macro!)) (fda0@chi-expr (fd98@chi-local-macro f1df0@value f1dd1@e) f1dd2@r f1dd3@mr) (if (memv f1df5@t '(mutable)) (fe5e@syntax-violation '#f '"attempt to assign to an unexportable variable" f1dd1@e) (fe5e@syntax-violation '#f '"invalid syntax" f1dd1@e)))))))))))) f1dd9@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1dd7@t)))))) (set! f2866@fda2@chi-set! fda2@chi-set!) (set! fda4@verify-formals (lambda (f1df7@fmls f1df8@stx) (let ((f1dfb@t f1df7@fmls)) (let ((f1dfd@ls/false (fd7e@syntax-dispatch f1dfb@t 'each-any))) (if f1dfd@ls/false (apply (lambda (f1dff@x*) (if (not (fb7f@valid-bound-ids? f1dff@x*)) (fd38@invalid-fmls-error f1df8@stx f1df7@fmls) (void))) f1dfd@ls/false) (let ((f1e01@t f1dfb@t)) (let ((f1e03@ls/false (fd7e@syntax-dispatch f1e01@t '#(each+ any () any)))) (if f1e03@ls/false (apply (lambda (f1e05@x* f1e06@x) (if (not (fb7f@valid-bound-ids? (cons f1e06@x f1e05@x*))) (fd38@invalid-fmls-error f1df8@stx f1df7@fmls) (void))) f1e03@ls/false) (let ((f1e09@t f1e01@t)) (let ((f1e0b@ls/false (fd7e@syntax-dispatch f1e09@t '_))) (if f1e0b@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid syntax" f1df8@stx)) f1e0b@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1e09@t)))))))))))) (set! f2867@fda4@verify-formals fda4@verify-formals) (set! fda6@chi-lambda-clause (lambda (f1e0d@stx f1e0e@fmls f1e0f@body* f1e10@r f1e11@mr) (let ((f1e17@t f1e0e@fmls)) (let ((f1e19@ls/false (fd7e@syntax-dispatch f1e17@t 'each-any))) (if f1e19@ls/false (apply (lambda (f1e1b@x*) (begin (fda4@verify-formals f1e0e@fmls f1e0d@stx) (let ((f1e1d@lex* (map faff@gen-lexical f1e1b@x*)) (f1e1e@lab* (map fb03@gen-label f1e1b@x*))) (values f1e1d@lex* (fdb6@chi-internal (fb63@add-subst (fb37@make-full-rib f1e1b@x* f1e1e@lab*) f1e0f@body*) (fd10@add-lexicals f1e1e@lab* f1e1d@lex* f1e10@r) f1e11@mr))))) f1e19@ls/false) (let ((f1e21@t f1e17@t)) (let ((f1e23@ls/false (fd7e@syntax-dispatch f1e21@t '#(each+ any () any)))) (if f1e23@ls/false (apply (lambda (f1e25@x* f1e26@x) (begin (fda4@verify-formals f1e0e@fmls f1e0d@stx) (let ((f1e29@lex* (map faff@gen-lexical f1e25@x*)) (f1e2a@lab* (map fb03@gen-label f1e25@x*)) (f1e2b@lex (faff@gen-lexical f1e26@x)) (f1e2c@lab (fb03@gen-label f1e26@x))) (values (append f1e29@lex* f1e2b@lex) (fdb6@chi-internal (fb63@add-subst (fb37@make-full-rib (cons f1e26@x f1e25@x*) (cons f1e2c@lab f1e2a@lab*)) f1e0f@body*) (fd10@add-lexicals (cons f1e2c@lab f1e2a@lab*) (cons f1e2b@lex f1e29@lex*) f1e10@r) f1e11@mr))))) f1e23@ls/false) (let ((f1e31@t f1e21@t)) (let ((f1e33@ls/false (fd7e@syntax-dispatch f1e31@t '_))) (if f1e33@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid syntax" f1e0e@fmls)) f1e33@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1e31@t)))))))))))) (set! f2868@fda6@chi-lambda-clause fda6@chi-lambda-clause) (set! fda8@chi-lambda-clause* (lambda (f1e35@stx f1e36@fmls* f1e37@body** f1e38@r f1e39@mr) (if (null? f1e36@fmls*) (values '() '()) (call-with-values (lambda () (fda6@chi-lambda-clause f1e35@stx (car f1e36@fmls*) (car f1e37@body**) f1e38@r f1e39@mr)) (lambda (f1e43@f1e40 f1e44@f1e42) (let ((f1e47@b f1e44@f1e42) (f1e48@a f1e43@f1e40)) (call-with-values (lambda () (fda8@chi-lambda-clause* f1e35@stx (cdr f1e36@fmls*) (cdr f1e37@body**) f1e38@r f1e39@mr)) (lambda (f1e4f@f1e4c f1e50@f1e4e) (let ((f1e53@b* f1e50@f1e4e) (f1e54@a* f1e4f@f1e4c)) (values (cons f1e48@a f1e54@a*) (cons f1e47@b f1e53@b*))))))))))) (set! f2869@fda8@chi-lambda-clause* fda8@chi-lambda-clause*) (set! fdaa@chi-defun (lambda (f1e57@x f1e58@r f1e59@mr) (let ((f1e5d@fmls (car f1e57@x)) (f1e5e@body* (cdr f1e57@x))) (call-with-values (lambda () (fda6@chi-lambda-clause f1e5d@fmls f1e5d@fmls f1e5e@body* f1e58@r f1e59@mr)) (lambda (f1e65@f1e62 f1e66@f1e64) (let ((f1e69@body f1e66@f1e64) (f1e6a@fmls f1e65@f1e62)) (fada@fa0c@build-lambda '#f f1e6a@fmls f1e69@body))))))) (set! f286a@fdaa@chi-defun fdaa@chi-defun) (set! fdac@chi-rhs (lambda (f1e6d@rhs f1e6e@r f1e6f@mr) (let ((f1e73@t (car f1e6d@rhs))) (if (memv f1e73@t '(defun)) (fdaa@chi-defun (cdr f1e6d@rhs) f1e6e@r f1e6f@mr) (if (memv f1e73@t '(expr)) (let ((f1e75@expr (cdr f1e6d@rhs))) (fda0@chi-expr f1e75@expr f1e6e@r f1e6f@mr)) (if (memv f1e73@t '(top-expr)) (let ((f1e77@expr (cdr f1e6d@rhs))) (fadc@fa3c@build-sequence '#f (list (fda0@chi-expr f1e77@expr f1e6e@r f1e6f@mr) (fadd@fa3e@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" f1e6d@rhs))))))) (set! f286b@fdac@chi-rhs fdac@chi-rhs) (set! fdae@expand-interaction-rhs*/init* (lambda (f1e79@lhs* f1e7a@rhs* f1e7b@init* f1e7c@r f1e7d@mr) (let f1e87@f ((f1e83@lhs* f1e79@lhs*) (f1e84@rhs* f1e7a@rhs*)) (if (null? f1e83@lhs*) (map (lambda (f1e89@x) (fda0@chi-expr f1e89@x f1e7c@r f1e7d@mr)) f1e7b@init*) (let ((f1e8b@lhs (car f1e83@lhs*)) (f1e8c@rhs (car f1e84@rhs*))) (let ((f1e8f@t (car f1e8c@rhs))) (if (memv f1e8f@t '(defun)) (let ((f1e91@rhs (fdaa@chi-defun (cdr f1e8c@rhs) f1e7c@r f1e7d@mr))) (cons (list 'set! f1e8b@lhs f1e91@rhs) (f1e87@f (cdr f1e83@lhs*) (cdr f1e84@rhs*)))) (if (memv f1e8f@t '(expr)) (let ((f1e93@rhs (fda0@chi-expr (cdr f1e8c@rhs) f1e7c@r f1e7d@mr))) (cons (list 'set! f1e8b@lhs f1e93@rhs) (f1e87@f (cdr f1e83@lhs*) (cdr f1e84@rhs*)))) (if (memv f1e8f@t '(top-expr)) (let ((f1e95@e (fda0@chi-expr (cdr f1e8c@rhs) f1e7c@r f1e7d@mr))) (cons f1e95@e (f1e87@f (cdr f1e83@lhs*) (cdr f1e84@rhs*)))) (error 'expand-interaction '"invallid" f1e8c@rhs)))))))))) (set! f286c@fdae@expand-interaction-rhs*/init* fdae@expand-interaction-rhs*/init*) (set! fdb0@chi-rhs* (lambda (f1e97@rhs* f1e98@r f1e99@mr) (let f1e9f@f ((f1e9d@ls f1e97@rhs*)) (if (null? f1e9d@ls) '() (let ((f1ea1@a (fdac@chi-rhs (car f1e9d@ls) f1e98@r f1e99@mr))) (cons f1ea1@a (f1e9f@f (cdr f1e9d@ls)))))))) (set! f286d@fdb0@chi-rhs* fdb0@chi-rhs*) (set! fdb2@find-bound=? (lambda (f1ea3@x f1ea4@lhs* f1ea5@rhs*) (if (null? f1ea4@lhs*) '#f (if (fb7b@bound-id=? f1ea3@x (car f1ea4@lhs*)) (car f1ea5@rhs*) (fdb2@find-bound=? f1ea3@x (cdr f1ea4@lhs*) (cdr f1ea5@rhs*)))))) (set! f286e@fdb2@find-bound=? fdb2@find-bound=?) (set! fdb4@find-dups (lambda (f1ea9@ls) (let f1eaf@f ((f1eab@ls f1ea9@ls) (f1eac@dups '())) (if (null? f1eab@ls) f1eac@dups (let ((f1eb1@t (fdb2@find-bound=? (car f1eab@ls) (cdr f1eab@ls) (cdr f1eab@ls)))) (if f1eb1@t ((lambda (f1eb3@x) (f1eaf@f (cdr f1eab@ls) (cons (list (car f1eab@ls) f1eb3@x) f1eac@dups))) f1eb1@t) (f1eaf@f (cdr f1eab@ls) f1eac@dups))))))) (set! f286f@fdb4@find-dups fdb4@find-dups) (set! fdb6@chi-internal (lambda (f1eb5@e* f1eb6@r f1eb7@mr) (let ((f1ebb@rib (fb2b@make-empty-rib))) (call-with-values (lambda () (fdd6@chi-body* (map (lambda (f1ecd@x) (fb63@add-subst f1ebb@rib f1ecd@x)) (fb75@syntax->list f1eb5@e*)) f1eb6@r f1eb7@mr '() '() '() '() '() f1ebb@rib '#f)) (lambda (f1ecf@f1ebe f1ed0@f1ec0 f1ed1@f1ec2 f1ed2@f1ec4 f1ed3@f1ec6 f1ed4@f1ec8 f1ed5@f1eca f1ed6@f1ecc) (let ((f1edf@_exp* f1ed6@f1ecc) (f1ee0@kwd* f1ed5@f1eca) (f1ee1@mod** f1ed4@f1ec8) (f1ee2@rhs* f1ed3@f1ec6) (f1ee3@lex* f1ed2@f1ec4) (f1ee4@mr f1ed1@f1ec2) (f1ee5@r f1ed0@f1ec0) (f1ee6@e* f1ecf@f1ebe)) (begin (if (null? f1ee6@e*) (fe5e@syntax-violation '#f '"no expression in body" f1ee6@e*) (void)) (let ((f1eef@init* (fd9c@chi-expr* (append (apply append (reverse f1ee1@mod**)) f1ee6@e*) f1ee5@r f1ee4@mr))) (let ((f1ef1@rhs* (fdb0@chi-rhs* f1ee2@rhs* f1ee5@r f1ee4@mr))) (fae1@fa46@build-letrec* '#f (reverse f1ee3@lex*) (reverse f1ef1@rhs*) (fadc@fa3c@build-sequence '#f f1eef@init*))))))))))) (set! f2870@fdb6@chi-internal fdb6@chi-internal) (set! fdb8@parse-module (lambda (f1ef3@e) (let ((f1ef5@t f1ef3@e)) (let ((f1ef7@ls/false (fd7e@syntax-dispatch f1ef5@t '(_ each-any . each-any)))) (if f1ef7@ls/false (apply (lambda (f1ef9@export* f1efa@b*) (begin (if (not (for-all fb77@id? f1ef9@export*)) (fe5e@syntax-violation '#f '"module exports must be identifiers" f1ef3@e) (void)) (values '#f (list->vector f1ef9@export*) f1efa@b*))) f1ef7@ls/false) (let ((f1efd@t f1ef5@t)) (let ((f1eff@ls/false (fd7e@syntax-dispatch f1efd@t '(_ any each-any . each-any)))) (if f1eff@ls/false (apply (lambda (f1f01@name f1f02@export* f1f03@b*) (begin (if (not (fb77@id? f1f01@name)) (fe5e@syntax-violation '#f '"module name must be an identifier" f1ef3@e) (void)) (if (not (for-all fb77@id? f1f02@export*)) (fe5e@syntax-violation '#f '"module exports must be identifiers" f1ef3@e) (void)) (values f1f01@name (list->vector f1f02@export*) f1f03@b*))) f1eff@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1efd@t))))))))) (set! f2871@fdb8@parse-module fdb8@parse-module) (set! fdc2@module-interface? (lambda (f1f07@x) (and (simple-struct? f1f07@x) (eq? (simple-struct-name f1f07@x) 'module-interface)))) (set! f2872@fdc2@module-interface? fdc2@module-interface?) (set! fdc4@module-interface-first-mark (lambda (f1f09@x) (simple-struct-ref f1f09@x '0))) (set! f2873@fdc4@module-interface-first-mark fdc4@module-interface-first-mark) (set! fdc6@set-module-interface-first-mark! (lambda (f1f0b@x f1f0c@val) (simple-struct-set! f1f0b@x '0 f1f0c@val))) (set! f2874@fdc6@set-module-interface-first-mark! fdc6@set-module-interface-first-mark!) (set! fdc8@module-interface-exp-id-vec (lambda (f1f0f@x) (simple-struct-ref f1f0f@x '1))) (set! f2875@fdc8@module-interface-exp-id-vec fdc8@module-interface-exp-id-vec) (set! fdca@set-module-interface-exp-id-vec! (lambda (f1f11@x f1f12@val) (simple-struct-set! f1f11@x '1 f1f12@val))) (set! f2876@fdca@set-module-interface-exp-id-vec! fdca@set-module-interface-exp-id-vec!) (set! fdcc@module-interface-exp-lab-vec (lambda (f1f15@x) (simple-struct-ref f1f15@x '2))) (set! f2877@fdcc@module-interface-exp-lab-vec fdcc@module-interface-exp-lab-vec) (set! fdce@set-module-interface-exp-lab-vec! (lambda (f1f17@x f1f18@val) (simple-struct-set! f1f17@x '2 f1f18@val))) (set! f2878@fdce@set-module-interface-exp-lab-vec! fdce@set-module-interface-exp-lab-vec!) (set! fdd0@dummy '3) (set! f2879@fdd0@dummy fdd0@dummy) (set! fdd2@module-interface-exp-id* (lambda (f1f1b@iface f1f1c@id) (letrec* ((f1f20@diff-marks (lambda (f1f27@ls f1f28@x) (begin (if (null? f1f27@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((f1f2b@a (car f1f27@ls))) (if (eq? f1f2b@a f1f28@x) '() (cons f1f2b@a (f1f20@diff-marks (cdr f1f27@ls) f1f28@x)))))))) (let ((f1f21@diff (f1f20@diff-marks (fb49@stx-mark* f1f1c@id) (fdc4@module-interface-first-mark f1f1b@iface))) (f1f22@id-vec (fdc8@module-interface-exp-id-vec f1f1b@iface))) (if (null? f1f21@diff) f1f22@id-vec (vector-map (lambda (f1f25@x) (make-simple-struct 'stx '5 (list (fb45@stx-expr f1f25@x) (append f1f21@diff (fb49@stx-mark* f1f25@x)) '() '()))) f1f22@id-vec)))))) (set! f287a@fdd2@module-interface-exp-id* fdd2@module-interface-exp-id*) (set! fdd4@chi-internal-module (lambda (f1f2d@e f1f2e@r f1f2f@mr f1f30@lex* f1f31@rhs* f1f32@mod** f1f33@kwd*) (call-with-values (lambda () (fdb8@parse-module f1f2d@e)) (lambda (f1f41@f1f3c f1f42@f1f3e f1f43@f1f40) (let ((f1f47@e* f1f43@f1f40) (f1f48@exp-id* f1f42@f1f3e) (f1f49@name f1f41@f1f3c)) (let ((f1f4d@rib (fb2b@make-empty-rib))) (let ((f1f4f@e* (map (lambda (f1f51@x) (fb63@add-subst f1f4d@rib f1f51@x)) (fb75@syntax->list f1f47@e*)))) (call-with-values (lambda () (fdd6@chi-body* f1f4f@e* f1f2e@r f1f2f@mr f1f30@lex* f1f31@rhs* f1f32@mod** f1f33@kwd* '() f1f4d@rib '#f)) (lambda (f1f63@f1f54 f1f64@f1f56 f1f65@f1f58 f1f66@f1f5a f1f67@f1f5c f1f68@f1f5e f1f69@f1f60 f1f6a@f1f62) (let ((f1f73@_exp* f1f6a@f1f62) (f1f74@kwd* f1f69@f1f60) (f1f75@mod** f1f68@f1f5e) (f1f76@rhs* f1f67@f1f5c) (f1f77@lex* f1f66@f1f5a) (f1f78@mr f1f65@f1f58) (f1f79@r f1f64@f1f56) (f1f7a@e* f1f63@f1f54)) (let ((f1f83@exp-lab* (vector-map (lambda (f1f87@x) (or (fb8d@id->label (make-simple-struct 'stx '5 (list (fb79@id->sym f1f87@x) (fb49@stx-mark* f1f87@x) (list f1f4d@rib) '()))) (fe5e@syntax-violation '#f '"cannot find module export" f1f87@x))) f1f48@exp-id*)) (f1f84@mod** (cons f1f7a@e* f1f75@mod**))) (if (not f1f49@name) (values f1f77@lex* f1f76@rhs* f1f48@exp-id* f1f83@exp-lab* f1f79@r f1f78@mr f1f84@mod** f1f74@kwd*) (let ((f1f89@lab (fb03@gen-label 'module)) (f1f8a@iface (make-simple-struct 'module-interface '4 (list (car (fb49@stx-mark* f1f49@name)) (vector-map (lambda (f1f8d@x) (make-simple-struct 'stx '5 (list (fb45@stx-expr f1f8d@x) (fb49@stx-mark* f1f8d@x) '() '()))) f1f48@exp-id*) f1f83@exp-lab*)))) (values f1f77@lex* f1f76@rhs* (vector f1f49@name) (vector f1f89@lab) (cons (cons f1f89@lab (cons '$module f1f8a@iface)) f1f79@r) (cons (cons f1f89@lab (cons '$module f1f8a@iface)) f1f78@mr) f1f84@mod** f1f74@kwd*)))))))))))))) (set! f287b@fdd4@chi-internal-module fdd4@chi-internal-module) (set! fdd6@chi-body* (lambda (f1f8f@e* f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1f95@kwd* f1f96@exp* f1f97@rib f1f98@top?) (if (null? f1f8f@e*) (values f1f8f@e* f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1f95@kwd* f1f96@exp*) (let ((f1fa3@e (car f1f8f@e*))) (call-with-values (lambda () (fb99@syntax-type f1fa3@e f1f90@r)) (lambda (f1fab@f1fa6 f1fac@f1fa8 f1fad@f1faa) (let ((f1fb1@kwd f1fad@f1faa) (f1fb2@value f1fac@f1fa8) (f1fb3@type f1fab@f1fa6)) (let ((f1fb7@kwd* (if (fb77@id? f1fb1@kwd) (cons f1fb1@kwd f1f95@kwd*) f1f95@kwd*))) (let ((f1fb9@t f1fb3@type)) (if (memv f1fb9@t '(define)) (call-with-values (lambda () (fd00@parse-define f1fa3@e)) (lambda (f1fbf@f1fbc f1fc0@f1fbe) (let ((f1fc3@rhs f1fc0@f1fbe) (f1fc4@id f1fbf@f1fbc)) (begin (if (fb83@bound-id-member? f1fc4@id f1fb7@kwd*) (fe5e@syntax-violation '#f '"cannot redefine keyword" f1fa3@e) (void)) (call-with-values (lambda () (fb07@gen-define-label+loc f1fc4@id f1f97@rib)) (lambda (f1fcb@f1fc8 f1fcc@f1fca) (let ((f1fcf@lex f1fcc@f1fca) (f1fd0@lab f1fcb@f1fc8)) (begin (fb2d@extend-rib! f1f97@rib f1fc4@id f1fd0@lab) (fdd6@chi-body* (cdr f1f8f@e*) (fd0e@add-lexical f1fd0@lab f1fcf@lex f1f90@r) f1f91@mr (cons f1fcf@lex f1f92@lex*) (cons f1fc3@rhs f1f93@rhs*) f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?))))))))) (if (memv f1fb9@t '(define-syntax)) (call-with-values (lambda () (fd02@parse-define-syntax f1fa3@e)) (lambda (f1fd7@f1fd4 f1fd8@f1fd6) (let ((f1fdb@rhs f1fd8@f1fd6) (f1fdc@id f1fd7@f1fd4)) (begin (if (fb83@bound-id-member? f1fdc@id f1fb7@kwd*) (fe5e@syntax-violation '#f '"cannot redefine keyword" f1fa3@e) (void)) (let ((f1fdf@lab (fb09@gen-define-label f1fdc@id f1f97@rib)) (f1fe0@expanded-rhs (fdd8@expand-transformer f1fdb@rhs f1f91@mr))) (begin (fb2d@extend-rib! f1f97@rib f1fdc@id f1fdf@lab) (let ((f1fe3@b (fbaf@make-eval-transformer f1fe0@expanded-rhs))) (fdd6@chi-body* (cdr f1f8f@e*) (cons (cons f1fdf@lab f1fe3@b) f1f90@r) (cons (cons f1fdf@lab f1fe3@b) f1f91@mr) f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?)))))))) (if (memv f1fb9@t '(let-syntax letrec-syntax)) (let ((f1fe5@t f1fa3@e)) (let ((f1fe7@ls/false (fd7e@syntax-dispatch f1fe5@t '(_ #(each (any any)) . each-any)))) (if (and f1fe7@ls/false (apply (lambda (f1fe9@xlhs* f1fea@xrhs* f1feb@xbody*) (if (not (fb7f@valid-bound-ids? f1fe9@xlhs*)) (fe5e@syntax-violation '#f '"invalid identifiers" f1fa3@e) (void))) f1fe7@ls/false)) (apply (lambda (f1fef@xlhs* f1ff0@xrhs* f1ff1@xbody*) (let ((f1ff5@xlab* (map fb03@gen-label f1fef@xlhs*))) (let ((f1ff7@xrib (fb37@make-full-rib f1fef@xlhs* f1ff5@xlab*))) (let ((f1ff9@xb* (map (lambda (f1ffb@x) (fbaf@make-eval-transformer (fdd8@expand-transformer (if (eq? f1fb3@type 'let-syntax) f1ffb@x (fb63@add-subst f1ff7@xrib f1ffb@x)) f1f91@mr))) f1ff0@xrhs*))) (fdd6@chi-body* (append (map (lambda (f1ffd@x) (fb63@add-subst f1ff7@xrib f1ffd@x)) f1ff1@xbody*) (cdr f1f8f@e*)) (append (map cons f1ff5@xlab* f1ff9@xb*) f1f90@r) (append (map cons f1ff5@xlab* f1ff9@xb*) f1f91@mr) f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?))))) f1fe7@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1fe5@t)))) (if (memv f1fb9@t '(begin)) (let ((f1fff@t f1fa3@e)) (let ((f2001@ls/false (fd7e@syntax-dispatch f1fff@t '(_ . each-any)))) (if f2001@ls/false (apply (lambda (f2003@x*) (fdd6@chi-body* (append f2003@x* (cdr f1f8f@e*)) f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?)) f2001@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f1fff@t)))) (if (memv f1fb9@t '(global-macro global-macro!)) (fdd6@chi-body* (cons (fb63@add-subst f1f97@rib (fd9a@chi-global-macro f1fb2@value f1fa3@e)) (cdr f1f8f@e*)) f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?) (if (memv f1fb9@t '(local-macro local-macro!)) (fdd6@chi-body* (cons (fb63@add-subst f1f97@rib (fd98@chi-local-macro f1fb2@value f1fa3@e)) (cdr f1f8f@e*)) f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?) (if (memv f1fb9@t '(macro macro!)) (fdd6@chi-body* (cons (fb63@add-subst f1f97@rib (fd96@chi-macro f1fb2@value f1fa3@e)) (cdr f1f8f@e*)) f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?) (if (memv f1fb9@t '(module)) (call-with-values (lambda () (fdd4@chi-internal-module f1fa3@e f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd*)) (lambda (f2015@f2006 f2016@f2008 f2017@f200a f2018@f200c f2019@f200e f201a@f2010 f201b@f2012 f201c@f2014) (let ((f2025@kwd* f201c@f2014) (f2026@mod** f201b@f2012) (f2027@mr f201a@f2010) (f2028@r f2019@f200e) (f2029@m-exp-lab* f2018@f200c) (f202a@m-exp-id* f2017@f200a) (f202b@rhs* f2016@f2008) (f202c@lex* f2015@f2006)) (begin (vector-for-each (lambda (f2035@id f2036@lab) (fb2d@extend-rib! f1f97@rib f2035@id f2036@lab)) f202a@m-exp-id* f2029@m-exp-lab*) (fdd6@chi-body* (cdr f1f8f@e*) f2028@r f2027@mr f202c@lex* f202b@rhs* f2026@mod** f2025@kwd* f1f96@exp* f1f97@rib f1f98@top?))))) (if (memv f1fb9@t '(library)) (begin (fe40@library-expander (fb8b@stx->datum f1fa3@e)) (fdd6@chi-body* (cdr f1f8f@e*) f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?)) (if (memv f1fb9@t '(export)) (let ((f2039@t f1fa3@e)) (let ((f203b@ls/false (fd7e@syntax-dispatch f2039@t '(_ . each-any)))) (if f203b@ls/false (apply (lambda (f203d@exp-decl*) (fdd6@chi-body* (cdr f1f8f@e*) f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* (append f203d@exp-decl* f1f96@exp*) f1f97@rib f1f98@top?)) f203b@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f2039@t)))) (if (memv f1fb9@t '(import)) (letrec* ((f2040@module-import? (lambda (f2093@e) (let ((f2095@t f2093@e)) (let ((f2097@ls/false (fd7e@syntax-dispatch f2095@t '(_ any)))) (if (and f2097@ls/false (apply (lambda (f2099@id) (fb77@id? f2099@id)) f2097@ls/false)) (apply (lambda (f209b@id) '#t) f2097@ls/false) (let ((f209d@t f2095@t)) (let ((f209f@ls/false (fd7e@syntax-dispatch f209d@t '(_ . each-any)))) (if f209f@ls/false (apply (lambda (f20a1@imp*) '#f) f209f@ls/false) (let ((f20a3@t f209d@t)) (let ((f20a5@ls/false (fd7e@syntax-dispatch f20a3@t '_))) (if f20a5@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"malformed import form" f2093@e)) f20a5@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f20a3@t)))))))))))) (f2042@module-import (lambda (f2071@e f2072@r) (let ((f2075@t f2071@e)) (let ((f2077@ls/false (fd7e@syntax-dispatch f2075@t '(_ any)))) (if (and f2077@ls/false (apply (lambda (f2079@id) (fb77@id? f2079@id)) f2077@ls/false)) (apply (lambda (f207b@id) (call-with-values (lambda () (fb99@syntax-type f207b@id f2072@r)) (lambda (f2083@f207e f2084@f2080 f2085@f2082) (let ((f2089@kwd f2085@f2082) (f208a@value f2084@f2080) (f208b@type f2083@f207e)) (let ((f208f@t f208b@type)) (if (memv f208f@t '($module)) (let ((f2091@iface f208a@value)) (values (fdd2@module-interface-exp-id* f2091@iface f207b@id) (fdcc@module-interface-exp-lab-vec f2091@iface))) (fe5e@syntax-violation '#f '"invalid import" f2071@e))))))) f2077@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f2075@t)))))) (f2044@library-import (lambda (f2055@e) (let ((f2057@t f2055@e)) (let ((f2059@ls/false (fd7e@syntax-dispatch f2057@t '(any . each-any)))) (if f2059@ls/false (apply (lambda (f205b@ctxt f205c@imp*) (call-with-values (lambda () (fde0@parse-import-spec* (fe64@syntax->datum f205c@imp*))) (lambda (f2063@f2060 f2064@f2062) (let ((f2067@subst-labels f2064@f2062) (f2068@subst-names f2063@f2060)) (values (vector-map (lambda (f206b@name) (fb57@datum->stx f205b@ctxt f206b@name)) f2068@subst-names) f2067@subst-labels))))) f2059@ls/false) (let ((f206d@t f2057@t)) (let ((f206f@ls/false (fd7e@syntax-dispatch f206d@t '_))) (if f206f@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid import form" f2055@e)) f206f@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f206d@t)))))))))) (begin (call-with-values (lambda () (if (f2040@module-import? f1fa3@e) (f2042@module-import f1fa3@e f1f90@r) (f2044@library-import f1fa3@e))) (lambda (f2049@f2046 f204a@f2048) (let ((f204d@lab* f204a@f2048) (f204e@id* f2049@f2046)) (vector-for-each (lambda (f2051@id f2052@lab) (fb2d@extend-rib! f1f97@rib f2051@id f2052@lab)) f204e@id* f204d@lab*)))) (fdd6@chi-body* (cdr f1f8f@e*) f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?))) (if f1f98@top? (fdd6@chi-body* (cdr f1f8f@e*) f1f90@r f1f91@mr (cons (faff@gen-lexical 'dummy) f1f92@lex*) (cons (cons 'top-expr f1fa3@e) f1f93@rhs*) f1f94@mod** f1fb7@kwd* f1f96@exp* f1f97@rib f1f98@top?) (values f1f8f@e* f1f90@r f1f91@mr f1f92@lex* f1f93@rhs* f1f94@mod** f1fb7@kwd* f1f96@exp*)))))))))))))))))))))) (set! f287c@fdd6@chi-body* fdd6@chi-body*) (set! fdd8@expand-transformer (lambda (f20a7@expr f20a8@r) (let ((f20ab@rtc (fde4@make-collector))) (let ((f20ad@expanded-rhs (let ((f20b7@f20b0 fde6@inv-collector) (f20b8@f20b2 fde8@vis-collector) (f20b9@f20b4 f20ab@rtc) (f20ba@f20b6 (lambda (f20bf@x) (values)))) (let ((f20c1@swap (lambda () (begin (let ((f20c3@t (f20b7@f20b0))) (begin (f20b7@f20b0 f20b9@f20b4) (set! f20b9@f20b4 f20c3@t))) (let ((f20c5@t (f20b8@f20b2))) (begin (f20b8@f20b2 f20ba@f20b6) (set! f20ba@f20b6 f20c5@t))))))) (dynamic-wind f20c1@swap (lambda () (fda0@chi-expr f20a7@expr f20a8@r f20a8@r)) f20c1@swap))))) (begin (for-each (let ((f20c7@mark-visit (fde8@vis-collector))) (lambda (f20c9@x) (begin (f993@f7e1@invoke-library f20c9@x) (f20c7@mark-visit f20c9@x)))) (f20ab@rtc)) f20ad@expanded-rhs))))) (set! f287d@fdd8@expand-transformer fdd8@expand-transformer) (set! fdda@parse-exports (lambda (f20cb@exp*) (let f20d3@f ((f20cd@exp* f20cb@exp*) (f20ce@int* '()) (f20cf@ext* '())) (if (null? f20cd@exp*) (begin (if (not (fb7f@valid-bound-ids? f20cf@ext*)) (fe5e@syntax-violation 'export '"invalid exports" (fdb4@find-dups f20cf@ext*)) (void)) (values (map fe64@syntax->datum f20cf@ext*) f20ce@int*)) (let ((f20d5@t (car f20cd@exp*))) (let ((f20d7@ls/false (fd7e@syntax-dispatch f20d5@t '(any . #(each (any any)))))) (if f20d7@ls/false (apply (lambda (f20d9@rename f20da@i* f20db@e*) (begin (if (not (and (eq? (fe64@syntax->datum f20d9@rename) 'rename) (for-all fb77@id? f20da@i*) (for-all fb77@id? f20db@e*))) (fe5e@syntax-violation 'export '"invalid export specifier" (car f20cd@exp*)) (void)) (f20d3@f (cdr f20cd@exp*) (append f20da@i* f20ce@int*) (append f20db@e* f20cf@ext*)))) f20d7@ls/false) (let ((f20df@t f20d5@t)) (let ((f20e1@ls/false (fd7e@syntax-dispatch f20df@t 'any))) (if f20e1@ls/false (apply (lambda (f20e3@ie) (begin (if (not (fb77@id? f20e3@ie)) (fe5e@syntax-violation 'export '"invalid export" f20e3@ie) (void)) (f20d3@f (cdr f20cd@exp*) (cons f20e3@ie f20ce@int*) (cons f20e3@ie f20cf@ext*)))) f20e1@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f20df@t))))))))))) (set! f287e@fdda@parse-exports fdda@parse-exports) (set! fddc@parse-library-name (lambda (f20e5@spec) (letrec* ((f20e8@parse (lambda (f20f5@x) (let ((f20f7@t f20f5@x)) (let ((f20f9@ls/false (fd7e@syntax-dispatch f20f7@t '(each-any)))) (if (and f20f9@ls/false (apply (lambda (f20fb@v*) (for-all (lambda (f20fd@x) (let ((f20ff@x (fe64@syntax->datum f20fd@x))) (and (integer? f20ff@x) (exact? f20ff@x)))) f20fb@v*)) f20f9@ls/false)) (apply (lambda (f2101@v*) (values '() (map fe64@syntax->datum f2101@v*))) f20f9@ls/false) (let ((f2103@t f20f7@t)) (let ((f2105@ls/false (fd7e@syntax-dispatch f2103@t '(any . any)))) (if (and f2105@ls/false (apply (lambda (f2107@x f2108@rest) (symbol? (fe64@syntax->datum f2107@x))) f2105@ls/false)) (apply (lambda (f210b@x f210c@rest) (call-with-values (lambda () (f20e8@parse f210c@rest)) (lambda (f2113@f2110 f2114@f2112) (let ((f2117@v* f2114@f2112) (f2118@x* f2113@f2110)) (values (cons (fe64@syntax->datum f210b@x) f2118@x*) f2117@v*))))) f2105@ls/false) (let ((f211b@t f2103@t)) (let ((f211d@ls/false (fd7e@syntax-dispatch f211b@t '()))) (if f211d@ls/false (apply (lambda () (values '() '())) f211d@ls/false) (let ((f211f@t f211b@t)) (let ((f2121@ls/false (fd7e@syntax-dispatch f211f@t '_))) (if f2121@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid library name" f20e5@spec)) f2121@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f211f@t)))))))))))))))) (call-with-values (lambda () (f20e8@parse f20e5@spec)) (lambda (f20ed@f20ea f20ee@f20ec) (let ((f20f1@ver* f20ee@f20ec) (f20f2@name* f20ed@f20ea)) (begin (if (null? f20f2@name*) (fe5e@syntax-violation '#f '"empty library name" f20e5@spec) (void)) (values f20f2@name* f20f1@ver*)))))))) (set! f287f@fddc@parse-library-name fddc@parse-library-name) (set! fdde@parse-library (lambda (f2123@e) (let ((f2125@t f2123@e)) (let ((f2127@ls/false (fd7e@syntax-dispatch f2125@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and f2127@ls/false (apply (lambda (f2129@library f212a@name* f212b@export f212c@exp* f212d@import f212e@imp* f212f@b*) (and (eq? (fe64@syntax->datum f212b@export) 'export) (eq? (fe64@syntax->datum f212d@import) 'import) (eq? (fe64@syntax->datum f2129@library) 'library))) f2127@ls/false)) (apply (lambda (f2137@library f2138@name* f2139@export f213a@exp* f213b@import f213c@imp* f213d@b*) (values f2138@name* f213a@exp* f213c@imp* f213d@b*)) f2127@ls/false) (let ((f2145@t f2125@t)) (let ((f2147@ls/false (fd7e@syntax-dispatch f2145@t '_))) (if f2147@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"malformed library" f2123@e)) f2147@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f2145@t))))))))) (set! f2880@fdde@parse-library fdde@parse-library) (set! fde0@parse-import-spec* (letrec* ((f214a@idsyn? (lambda (f2353@x) (symbol? (fe64@syntax->datum f2353@x)))) (f214c@dup-error (lambda (f2351@name) (fe5e@syntax-violation 'import '"two imports with different bindings" f2351@name))) (f214e@merge-substs (lambda (f233f@s f2340@subst) (letrec* ((f2344@insert-to-subst (lambda (f2345@a f2346@subst) (let ((f2349@name (car f2345@a)) (f234a@label (cdr f2345@a))) (let ((f234d@t (assq f2349@name f2346@subst))) (if f234d@t ((lambda (f234f@x) (if (eq? (cdr f234f@x) f234a@label) f2346@subst (f214c@dup-error f2349@name))) f234d@t) (cons f2345@a f2346@subst))))))) (if (null? f233f@s) f2340@subst (f2344@insert-to-subst (car f233f@s) (f214e@merge-substs (cdr f233f@s) f2340@subst)))))) (f2150@exclude* (lambda (f230f@sym* f2310@subst) (letrec* ((f2314@exclude (lambda (f232d@sym f232e@subst) (if (null? f232e@subst) (fe5e@syntax-violation 'import '"cannot rename unbound identifier" f232d@sym) (if (eq? f232d@sym (caar f232e@subst)) (values (cdar f232e@subst) (cdr f232e@subst)) (let ((f2331@a (car f232e@subst))) (call-with-values (lambda () (f2314@exclude f232d@sym (cdr f232e@subst))) (lambda (f2337@f2334 f2338@f2336) (let ((f233b@subst f2338@f2336) (f233c@old f2337@f2334)) (values f233c@old (cons f2331@a f233b@subst))))))))))) (if (null? f230f@sym*) (values '() f2310@subst) (call-with-values (lambda () (f2314@exclude (car f230f@sym*) f2310@subst)) (lambda (f2319@f2316 f231a@f2318) (let ((f231d@subst f231a@f2318) (f231e@old f2319@f2316)) (call-with-values (lambda () (f2150@exclude* (cdr f230f@sym*) f231d@subst)) (lambda (f2325@f2322 f2326@f2324) (let ((f2329@subst f2326@f2324) (f232a@old* f2325@f2322)) (values (cons f231e@old f232a@old*) f2329@subst))))))))))) (f2152@find* (lambda (f2307@sym* f2308@subst) (map (lambda (f230b@x) (let ((f230d@t (assq f230b@x f2308@subst))) (if f230d@t (cdr f230d@t) (fe5e@syntax-violation 'import '"cannot find identifier" f230b@x)))) f2307@sym*))) (f2154@rem* (lambda (f22ff@sym* f2300@subst) (let f2305@f ((f2303@subst f2300@subst)) (if (null? f2303@subst) '() (if (memq (caar f2303@subst) f22ff@sym*) (f2305@f (cdr f2303@subst)) (cons (car f2303@subst) (f2305@f (cdr f2303@subst)))))))) (f2156@remove-dups (lambda (f22fd@ls) (if (null? f22fd@ls) '() (if (memq (car f22fd@ls) (cdr f22fd@ls)) (f2156@remove-dups (cdr f22fd@ls)) (cons (car f22fd@ls) (f2156@remove-dups (cdr f22fd@ls))))))) (f2158@parse-library-name (lambda (f2215@spec) (letrec* ((f2218@subversion? (lambda (f22f9@x) (let ((f22fb@x (fe64@syntax->datum f22f9@x))) (and (integer? f22fb@x) (exact? f22fb@x) (>= f22fb@x '0))))) (f221a@subversion-pred (lambda (f2299@x*) (let ((f229b@t f2299@x*)) (let ((f229d@ls/false (fd7e@syntax-dispatch f229b@t 'any))) (if (and f229d@ls/false (apply (lambda (f229f@n) (f2218@subversion? f229f@n)) f229d@ls/false)) (apply (lambda (f22a1@n) (lambda (f22a3@x) (= f22a3@x (fe64@syntax->datum f22a1@n)))) f229d@ls/false) (let ((f22a5@t f229b@t)) (let ((f22a7@ls/false (fd7e@syntax-dispatch f22a5@t '(any . each-any)))) (if (and f22a7@ls/false (apply (lambda (f22a9@p? f22aa@sub*) (eq? (fe64@syntax->datum f22a9@p?) 'and)) f22a7@ls/false)) (apply (lambda (f22ad@p? f22ae@sub*) (let ((f22b1@p* (map f221a@subversion-pred f22ae@sub*))) (lambda (f22b3@x) (for-all (lambda (f22b5@p) (f22b5@p f22b3@x)) f22b1@p*)))) f22a7@ls/false) (let ((f22b7@t f22a5@t)) (let ((f22b9@ls/false (fd7e@syntax-dispatch f22b7@t '(any . each-any)))) (if (and f22b9@ls/false (apply (lambda (f22bb@p? f22bc@sub*) (eq? (fe64@syntax->datum f22bb@p?) 'or)) f22b9@ls/false)) (apply (lambda (f22bf@p? f22c0@sub*) (let ((f22c3@p* (map f221a@subversion-pred f22c0@sub*))) (lambda (f22c5@x) (exists (lambda (f22c7@p) (f22c7@p f22c5@x)) f22c3@p*)))) f22b9@ls/false) (let ((f22c9@t f22b7@t)) (let ((f22cb@ls/false (fd7e@syntax-dispatch f22c9@t '(any any)))) (if (and f22cb@ls/false (apply (lambda (f22cd@p? f22ce@sub) (eq? (fe64@syntax->datum f22cd@p?) 'not)) f22cb@ls/false)) (apply (lambda (f22d1@p? f22d2@sub) (let ((f22d5@p (f221a@subversion-pred f22d2@sub))) (lambda (f22d7@x) (not (f22d5@p f22d7@x))))) f22cb@ls/false) (let ((f22d9@t f22c9@t)) (let ((f22db@ls/false (fd7e@syntax-dispatch f22d9@t '(any any)))) (if (and f22db@ls/false (apply (lambda (f22dd@p? f22de@n) (and (eq? (fe64@syntax->datum f22dd@p?) '<=) (f2218@subversion? f22de@n))) f22db@ls/false)) (apply (lambda (f22e1@p? f22e2@n) (lambda (f22e5@x) (<= f22e5@x (fe64@syntax->datum f22e2@n)))) f22db@ls/false) (let ((f22e7@t f22d9@t)) (let ((f22e9@ls/false (fd7e@syntax-dispatch f22e7@t '(any any)))) (if (and f22e9@ls/false (apply (lambda (f22eb@p? f22ec@n) (and (eq? (fe64@syntax->datum f22eb@p?) '>=) (f2218@subversion? f22ec@n))) f22e9@ls/false)) (apply (lambda (f22ef@p? f22f0@n) (lambda (f22f3@x) (>= f22f3@x (fe64@syntax->datum f22f0@n)))) f22e9@ls/false) (let ((f22f5@t f22e7@t)) (let ((f22f7@ls/false (fd7e@syntax-dispatch f22f5@t '_))) (if f22f7@ls/false (apply (lambda () (fe5e@syntax-violation 'import '"invalid sub-version spec" f2215@spec f2299@x*)) f22f7@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f22f5@t)))))))))))))))))))))))) (f221c@version-pred (lambda (f2249@x*) (let ((f224b@t f2249@x*)) (let ((f224d@ls/false (fd7e@syntax-dispatch f224b@t '()))) (if f224d@ls/false (apply (lambda () (lambda (f224f@x) '#t)) f224d@ls/false) (let ((f2251@t f224b@t)) (let ((f2253@ls/false (fd7e@syntax-dispatch f2251@t '(any . each-any)))) (if (and f2253@ls/false (apply (lambda (f2255@c f2256@ver*) (eq? (fe64@syntax->datum f2255@c) 'and)) f2253@ls/false)) (apply (lambda (f2259@c f225a@ver*) (let ((f225d@p* (map f221c@version-pred f225a@ver*))) (lambda (f225f@x) (for-all (lambda (f2261@p) (f2261@p f225f@x)) f225d@p*)))) f2253@ls/false) (let ((f2263@t f2251@t)) (let ((f2265@ls/false (fd7e@syntax-dispatch f2263@t '(any . each-any)))) (if (and f2265@ls/false (apply (lambda (f2267@c f2268@ver*) (eq? (fe64@syntax->datum f2267@c) 'or)) f2265@ls/false)) (apply (lambda (f226b@c f226c@ver*) (let ((f226f@p* (map f221c@version-pred f226c@ver*))) (lambda (f2271@x) (exists (lambda (f2273@p) (f2273@p f2271@x)) f226f@p*)))) f2265@ls/false) (let ((f2275@t f2263@t)) (let ((f2277@ls/false (fd7e@syntax-dispatch f2275@t '(any any)))) (if (and f2277@ls/false (apply (lambda (f2279@c f227a@ver) (eq? (fe64@syntax->datum f2279@c) 'not)) f2277@ls/false)) (apply (lambda (f227d@c f227e@ver) (let ((f2281@p (f221c@version-pred f227e@ver))) (lambda (f2283@x) (not (f2281@p f2283@x))))) f2277@ls/false) (let ((f2285@t f2275@t)) (let ((f2287@ls/false (fd7e@syntax-dispatch f2285@t 'each-any))) (if f2287@ls/false (apply (lambda (f2289@sub*) (let ((f228b@p* (map f221a@subversion-pred f2289@sub*))) (lambda (f228d@x) (let f2293@f ((f228f@p* f228b@p*) (f2290@x f228d@x)) (if (null? f228f@p*) '#t (if (null? f2290@x) '#f (and ((car f228f@p*) (car f2290@x)) (f2293@f (cdr f228f@p*) (cdr f2290@x))))))))) f2287@ls/false) (let ((f2295@t f2285@t)) (let ((f2297@ls/false (fd7e@syntax-dispatch f2295@t '_))) (if f2297@ls/false (apply (lambda () (fe5e@syntax-violation 'import '"invalid version spec" f2215@spec f2249@x*)) f2297@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f2295@t)))))))))))))))))))))) (let f221f@f ((f221d@x f2215@spec)) (let ((f2221@t f221d@x)) (let ((f2223@ls/false (fd7e@syntax-dispatch f2221@t '(each-any)))) (if f2223@ls/false (apply (lambda (f2225@version-spec*) (values '() (f221c@version-pred f2225@version-spec*))) f2223@ls/false) (let ((f2227@t f2221@t)) (let ((f2229@ls/false (fd7e@syntax-dispatch f2227@t '(any . any)))) (if (and f2229@ls/false (apply (lambda (f222b@x f222c@x*) (f214a@idsyn? f222b@x)) f2229@ls/false)) (apply (lambda (f222f@x f2230@x*) (call-with-values (lambda () (f221f@f f2230@x*)) (lambda (f2237@f2234 f2238@f2236) (let ((f223b@pred f2238@f2236) (f223c@name f2237@f2234)) (values (cons (fe64@syntax->datum f222f@x) f223c@name) f223b@pred))))) f2229@ls/false) (let ((f223f@t f2227@t)) (let ((f2241@ls/false (fd7e@syntax-dispatch f223f@t '()))) (if f2241@ls/false (apply (lambda () (values '() (lambda (f2243@x) '#t))) f2241@ls/false) (let ((f2245@t f223f@t)) (let ((f2247@ls/false (fd7e@syntax-dispatch f2245@t '_))) (if f2247@ls/false (apply (lambda () (fe5e@syntax-violation '#f '"invalid import spec" f2215@spec)) f2247@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f2245@t))))))))))))))))) (f215a@import-library (lambda (f2205@spec*) (call-with-values (lambda () (f2158@parse-library-name f2205@spec*)) (lambda (f220b@f2208 f220c@f220a) (let ((f220f@pred f220c@f220a) (f2210@name f220b@f2208)) (begin (if (null? f2210@name) (fe5e@syntax-violation 'import '"empty library name" f2205@spec*) (void)) (let ((f2213@lib (f98c@f7d3@find-library-by-name f2210@name))) (begin (if (not f2213@lib) (fe5e@syntax-violation 'import '"cannot find library with required name" f2210@name) (void)) (if (not (f220f@pred (f966@f787@library-version f2213@lib))) (fe5e@syntax-violation 'import '"library does not satisfy version specification" f2205@spec* f2213@lib) (void)) ((fdea@imp-collector) f2213@lib) (f96e@f797@library-subst f2213@lib))))))))) (f215c@get-import (lambda (f2177@spec) (let ((f2179@t f2177@spec)) (let ((f217b@ls/false (fd7e@syntax-dispatch f2179@t '(any . each-any)))) (if (and f217b@ls/false (apply (lambda (f217d@x f217e@x*) (not (memq (fe64@syntax->datum f217d@x) '(for rename except only prefix library)))) f217b@ls/false)) (apply (lambda (f2181@x f2182@x*) (f215a@import-library (cons f2181@x f2182@x*))) f217b@ls/false) (let ((f2185@t f2179@t)) (let ((f2187@ls/false (fd7e@syntax-dispatch f2185@t '(any any . #(each (any any)))))) (if (and f2187@ls/false (apply (lambda (f2189@rename f218a@isp f218b@old* f218c@new*) (and (eq? (fe64@syntax->datum f2189@rename) 'rename) (for-all f214a@idsyn? f218b@old*) (for-all f214a@idsyn? f218c@new*))) f2187@ls/false)) (apply (lambda (f2191@rename f2192@isp f2193@old* f2194@new*) (let ((f2199@subst (f215c@get-import f2192@isp)) (f219a@old* (map fe64@syntax->datum f2193@old*)) (f219b@new* (map fe64@syntax->datum f2194@new*))) (let ((f219f@old-label* (f2152@find* f219a@old* f2199@subst))) (let ((f21a1@subst (f2154@rem* f219a@old* f2199@subst))) (f214e@merge-substs (map cons f219b@new* f219f@old-label*) f21a1@subst))))) f2187@ls/false) (let ((f21a3@t f2185@t)) (let ((f21a5@ls/false (fd7e@syntax-dispatch f21a3@t '(any any . each-any)))) (if (and f21a5@ls/false (apply (lambda (f21a7@except f21a8@isp f21a9@sym*) (and (eq? (fe64@syntax->datum f21a7@except) 'except) (for-all f214a@idsyn? f21a9@sym*))) f21a5@ls/false)) (apply (lambda (f21ad@except f21ae@isp f21af@sym*) (let ((f21b3@subst (f215c@get-import f21ae@isp))) (f2154@rem* (map fe64@syntax->datum f21af@sym*) f21b3@subst))) f21a5@ls/false) (let ((f21b5@t f21a3@t)) (let ((f21b7@ls/false (fd7e@syntax-dispatch f21b5@t '(any any . each-any)))) (if (and f21b7@ls/false (apply (lambda (f21b9@only f21ba@isp f21bb@sym*) (and (eq? (fe64@syntax->datum f21b9@only) 'only) (for-all f214a@idsyn? f21bb@sym*))) f21b7@ls/false)) (apply (lambda (f21bf@only f21c0@isp f21c1@sym*) (let ((f21c5@subst (f215c@get-import f21c0@isp)) (f21c6@sym* (map fe64@syntax->datum f21c1@sym*))) (let ((f21c9@sym* (f2156@remove-dups f21c6@sym*))) (let ((f21cb@lab* (f2152@find* f21c9@sym* f21c5@subst))) (map cons f21c9@sym* f21cb@lab*))))) f21b7@ls/false) (let ((f21cd@t f21b5@t)) (let ((f21cf@ls/false (fd7e@syntax-dispatch f21cd@t '(any any any)))) (if (and f21cf@ls/false (apply (lambda (f21d1@prefix f21d2@isp f21d3@p) (and (eq? (fe64@syntax->datum f21d1@prefix) 'prefix) (f214a@idsyn? f21d3@p))) f21cf@ls/false)) (apply (lambda (f21d7@prefix f21d8@isp f21d9@p) (let ((f21dd@subst (f215c@get-import f21d8@isp)) (f21de@prefix (symbol->string (fe64@syntax->datum f21d9@p)))) (map (lambda (f21e1@x) (cons (string->symbol (string-append f21de@prefix (symbol->string (car f21e1@x)))) (cdr f21e1@x))) f21dd@subst))) f21cf@ls/false) (let ((f21e3@t f21cd@t)) (let ((f21e5@ls/false (fd7e@syntax-dispatch f21e3@t '(any each-any)))) (if (and f21e5@ls/false (apply (lambda (f21e7@library f21e8@spec*) (eq? (fe64@syntax->datum f21e7@library) 'library)) f21e5@ls/false)) (apply (lambda (f21eb@library f21ec@spec*) (f215a@import-library f21ec@spec*)) f21e5@ls/false) (let ((f21ef@t f21e3@t)) (let ((f21f1@ls/false (fd7e@syntax-dispatch f21ef@t '(any any . any)))) (if (and f21f1@ls/false (apply (lambda (f21f3@for f21f4@isp f21f5@rest) (eq? (fe64@syntax->datum f21f3@for) 'for)) f21f1@ls/false)) (apply (lambda (f21f9@for f21fa@isp f21fb@rest) (f215c@get-import f21fa@isp)) f21f1@ls/false) (let ((f21ff@t f21ef@t)) (let ((f2201@ls/false (fd7e@syntax-dispatch f21ff@t 'any))) (if f2201@ls/false (apply (lambda (f2203@spec) (fe5e@syntax-violation 'import '"invalid import spec" f2203@spec)) f2201@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f21ff@t))))))))))))))))))))))))))) (f215e@add-imports! (lambda (f2167@imp f2168@h) (let ((f216b@subst (f215c@get-import f2167@imp))) (for-each (lambda (f216d@x) (let ((f216f@name (car f216d@x)) (f2170@label (cdr f216d@x))) (let ((f2173@t (hashtable-ref f2168@h f216f@name '#f))) (if f2173@t ((lambda (f2175@l) (if (not (eq? f2175@l f2170@label)) (f214c@dup-error f216f@name) (void))) f2173@t) (hashtable-set! f2168@h f216f@name f2170@label))))) f216b@subst))))) (lambda (f215f@imp*) (let f2165@f ((f2161@imp* f215f@imp*) (f2162@h (make-eq-hashtable))) (if (null? f2161@imp*) (hashtable-entries f2162@h) (begin (f215e@add-imports! (car f2161@imp*) f2162@h) (f2165@f (cdr f2161@imp*) f2162@h))))))) (set! f2881@fde0@parse-import-spec* fde0@parse-import-spec*) (set! fde2@make-top-rib (lambda (f2355@names f2356@labels) (let ((f2359@rib (fb2b@make-empty-rib))) (begin (vector-for-each (lambda (f235b@name f235c@label) (begin (if (not (symbol? f235b@name)) (error 'make-top-rib '"BUG: not a symbol" f235b@name) (void)) (fb2f@extend-rib/nc! f2359@rib (make-simple-struct 'stx '5 (list f235b@name fafb@top-mark* '() '())) f235c@label))) f2355@names f2356@labels) f2359@rib)))) (set! f2882@fde2@make-top-rib fde2@make-top-rib) (set! fde4@make-collector (lambda () (let ((f235f@ls '())) (lambda f2363 (let ((f2364 (length f2363))) (if (= f2364 '0) (apply (lambda () f235f@ls) f2363) (if (= f2364 '1) (apply (lambda (f2361@x) (set! f235f@ls (faf4@set-cons f2361@x f235f@ls))) f2363) (error 'apply '"invalid arg count")))))))) (set! f2883@fde4@make-collector fde4@make-collector) (set! fde6@inv-collector (f6c7@f5a5@make-parameter (lambda f2365@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (f2367@x) (begin (if (not (procedure? f2367@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" f2367@x) (void)) f2367@x)))) (set! f2884@fde6@inv-collector fde6@inv-collector) (set! fde8@vis-collector (f6c7@f5a5@make-parameter (lambda f2369@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (f236b@x) (begin (if (not (procedure? f236b@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" f236b@x) (void)) f236b@x)))) (set! f2885@fde8@vis-collector fde8@vis-collector) (set! fdea@imp-collector (f6c7@f5a5@make-parameter (lambda f236d@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (f236f@x) (begin (if (not (procedure? f236f@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" f236f@x) (void)) f236f@x)))) (set! f2886@fdea@imp-collector fdea@imp-collector) (set! fdec@chi-library-internal (lambda (f2371@e* f2372@rib f2373@top?) (call-with-values (lambda () (fdd6@chi-body* f2371@e* '() '() '() '() '() '() '() f2372@rib f2373@top?)) (lambda (f2387@f2378 f2388@f237a f2389@f237c f238a@f237e f238b@f2380 f238c@f2382 f238d@f2384 f238e@f2386) (let ((f2397@exp* f238e@f2386) (f2398@_kwd* f238d@f2384) (f2399@mod** f238c@f2382) (f239a@rhs* f238b@f2380) (f239b@lex* f238a@f237e) (f239c@mr f2389@f237c) (f239d@r f2388@f237a) (f239e@e* f2387@f2378)) (values (append (apply append (reverse f2399@mod**)) f239e@e*) f239d@r f239c@mr (reverse f239b@lex*) (reverse f239a@rhs*) f2397@exp*)))))) (set! f2887@fdec@chi-library-internal fdec@chi-library-internal) (set! fdee@chi-interaction-expr (lambda (f23a7@e f23a8@rib f23a9@r) (call-with-values (lambda () (fdd6@chi-body* (list f23a7@e) f23a9@r f23a9@r '() '() '() '() '() f23a8@rib '#t)) (lambda (f23bd@f23ae f23be@f23b0 f23bf@f23b2 f23c0@f23b4 f23c1@f23b6 f23c2@f23b8 f23c3@f23ba f23c4@f23bc) (let ((f23cd@_exp* f23c4@f23bc) (f23ce@_kwd* f23c3@f23ba) (f23cf@mod** f23c2@f23b8) (f23d0@rhs* f23c1@f23b6) (f23d1@lex* f23c0@f23b4) (f23d2@mr f23bf@f23b2) (f23d3@r f23be@f23b0) (f23d4@e* f23bd@f23ae)) (let ((f23dd@e* (fdae@expand-interaction-rhs*/init* (reverse f23d1@lex*) (reverse f23d0@rhs*) (append (apply append (reverse f23cf@mod**)) f23d4@e*) f23d3@r f23d2@mr))) (let ((f23df@e (if (null? f23dd@e*) (fadd@fa3e@build-void) (if (null? (cdr f23dd@e*)) (car f23dd@e*) (fadc@fa3c@build-sequence '#f f23dd@e*))))) (values f23df@e f23d3@r)))))))) (set! f2888@fdee@chi-interaction-expr fdee@chi-interaction-expr) (set! fdf0@library-body-expander (lambda (f23e1@name f23e2@main-exp* f23e3@imp* f23e4@b* f23e5@top?) (letrec* ((f23ec@itc (fde4@make-collector))) (let ((f23f5@f23ee fdea@imp-collector) (f23f6@f23f0 fe6e@top-level-context) (f23f7@f23f2 f23ec@itc) (f23f8@f23f4 '#f)) (let ((f23fd@swap (lambda () (begin (let ((f23ff@t (f23f5@f23ee))) (begin (f23f5@f23ee f23f7@f23f2) (set! f23f7@f23f2 f23ff@t))) (let ((f2401@t (f23f6@f23f0))) (begin (f23f6@f23f0 f23f8@f23f4) (set! f23f8@f23f4 f2401@t))))))) (dynamic-wind f23fd@swap (lambda () (call-with-values (lambda () (fde0@parse-import-spec* f23e3@imp*)) (lambda (f2407@f2404 f2408@f2406) (let ((f240b@subst-labels f2408@f2406) (f240c@subst-names f2407@f2404)) (let ((f240f@rib (fde2@make-top-rib f240c@subst-names f240b@subst-labels))) (letrec* ((f2412@wrap (lambda (f248d@x) (make-simple-struct 'stx '5 (list f248d@x fafb@top-mark* (list f240f@rib) '()))))) (let ((f2413@b* (map f2412@wrap f23e4@b*)) (f2414@main-exp* (map f2412@wrap f23e2@main-exp*)) (f2415@rtc (fde4@make-collector)) (f2416@vtc (fde4@make-collector))) (let ((f2423@f241c fde6@inv-collector) (f2424@f241e fde8@vis-collector) (f2425@f2420 f2415@rtc) (f2426@f2422 f2416@vtc)) (let ((f242b@swap (lambda () (begin (let ((f242d@t (f2423@f241c))) (begin (f2423@f241c f2425@f2420) (set! f2425@f2420 f242d@t))) (let ((f242f@t (f2424@f241e))) (begin (f2424@f241e f2426@f2422) (set! f2426@f2422 f242f@t))))))) (dynamic-wind f242b@swap (lambda () (call-with-values (lambda () (fdec@chi-library-internal f2413@b* f240f@rib f23e5@top?)) (lambda (f243d@f2432 f243e@f2434 f243f@f2436 f2440@f2438 f2441@f243a f2442@f243c) (let ((f2449@internal-exp* f2442@f243c) (f244a@rhs* f2441@f243a) (f244b@lex* f2440@f2438) (f244c@mr f243f@f2436) (f244d@r f243e@f2434) (f244e@init* f243d@f2432)) (call-with-values (lambda () (fdda@parse-exports (append f2414@main-exp* f2449@internal-exp*))) (lambda (f2459@f2456 f245a@f2458) (let ((f245d@exp-id* f245a@f2458) (f245e@exp-name* f2459@f2456)) (begin (fb33@seal-rib! f240f@rib) (let ((f2461@init* (fd9c@chi-expr* f244e@init* f244d@r f244c@mr))) (let ((f2463@rhs* (fdb0@chi-rhs* f244a@rhs* f244d@r f244c@mr))) (begin (fb35@unseal-rib! f240f@rib) (let ((f2465@loc* (map fb01@gen-global f244b@lex*)) (f2466@export-subst (fe48@make-export-subst f245e@exp-name* f245d@exp-id*))) (letrec* ((f246a@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (fe4a@make-export-env/macros f244b@lex* f2465@loc* f244d@r)) (lambda (f2471@f246c f2472@f246e f2473@f2470) (let ((f2477@macro* f2473@f2470) (f2478@global* f2472@f246e) (f2479@export-env f2471@f246c)) (begin (for-each (lambda (f247d@s) (let ((f247f@name (car f247d@s)) (f2480@label (cdr f247d@s))) (let ((f2483@p (assq f2480@label f2479@export-env))) (if f2483@p (let ((f2485@b (cdr f2483@p))) (let ((f2487@type (car f2485@b))) (if (eq? f2487@type 'mutable) (fe5e@syntax-violation 'export f246a@errstr f247f@name) (void)))) (void))))) f2466@export-subst) (let ((f2489@invoke-body (fae2@fa48@build-library-letrec* '#f f23e1@name f244b@lex* f2465@loc* f2463@rhs* (if (null? f2461@init*) (fadd@fa3e@build-void) (fadc@fa3c@build-sequence '#f f2461@init*)))) (f248a@invoke-definitions (map fad9@f99b@build-global-define (map cdr f2478@global*)))) (values (f23ec@itc) (f2415@rtc) (f2416@vtc) (fadc@fa3c@build-sequence '#f (append f248a@invoke-definitions (list f2489@invoke-body))) f2477@macro* f2466@export-subst f2479@export-env))))))))))))))))))) f242b@swap)))))))))) f23fd@swap)))))) (set! f2889@fdf0@library-body-expander fdf0@library-body-expander) (set! fdf2@core-library-expander (lambda (f248f@e f2490@verify-name) (call-with-values (lambda () (fdde@parse-library f248f@e)) (lambda (f249b@f2494 f249c@f2496 f249d@f2498 f249e@f249a) (let ((f24a3@b* f249e@f249a) (f24a4@imp* f249d@f2498) (f24a5@exp* f249c@f2496) (f24a6@name* f249b@f2494)) (call-with-values (lambda () (fddc@parse-library-name f24a6@name*)) (lambda (f24af@f24ac f24b0@f24ae) (let ((f24b3@ver f24b0@f24ae) (f24b4@name f24af@f24ac)) (begin (f2490@verify-name f24b4@name) (call-with-values (lambda () (fdf0@library-body-expander f24b4@name f24a5@exp* f24a4@imp* f24a3@b* '#f)) (lambda (f24c5@f24b8 f24c6@f24ba f24c7@f24bc f24c8@f24be f24c9@f24c0 f24ca@f24c2 f24cb@f24c4) (let ((f24d3@export-env f24cb@f24c4) (f24d4@export-subst f24ca@f24c2) (f24d5@visit-code f24c9@f24c0) (f24d6@invoke-code f24c8@f24be) (f24d7@visit-req* f24c7@f24bc) (f24d8@invoke-req* f24c6@f24ba) (f24d9@imp* f24c5@f24b8)) (values f24b4@name f24b3@ver f24d9@imp* f24d8@invoke-req* f24d7@visit-req* f24d6@invoke-code f24d5@visit-code f24d4@export-subst f24d3@export-env))))))))))))) (set! f288a@fdf2@core-library-expander fdf2@core-library-expander) (set! fdf4@parse-top-level-program (lambda (f24e1@e*) (let ((f24e3@t f24e1@e*)) (let ((f24e5@ls/false (fd7e@syntax-dispatch f24e3@t '((any . each-any) . each-any)))) (if (and f24e5@ls/false (apply (lambda (f24e7@import f24e8@imp* f24e9@b*) (eq? (fe64@syntax->datum f24e7@import) 'import)) f24e5@ls/false)) (apply (lambda (f24ed@import f24ee@imp* f24ef@b*) (values f24ee@imp* f24ef@b*)) f24e5@ls/false) (let ((f24f3@t f24e3@t)) (let ((f24f5@ls/false (fd7e@syntax-dispatch f24f3@t '((any . any) . any)))) (if (and f24f5@ls/false (apply (lambda (f24f7@import f24f8@x f24f9@y) (eq? (fe64@syntax->datum f24f7@import) 'import)) f24f5@ls/false)) (apply (lambda (f24fd@import f24fe@x f24ff@y) (fe5e@syntax-violation 'expander '"invalid syntax of top-level program" (fb71@syntax-car f24e1@e*))) f24f5@ls/false) (let ((f2503@t f24f3@t)) (let ((f2505@ls/false (fd7e@syntax-dispatch f2503@t '_))) (if f2505@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) f2505@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f2503@t)))))))))))) (set! f288b@fdf4@parse-top-level-program fdf4@parse-top-level-program) (set! fdf6@top-level-expander (lambda (f2507@e*) (call-with-values (lambda () (fdf4@parse-top-level-program f2507@e*)) (lambda (f250d@f250a f250e@f250c) (let ((f2511@b* f250e@f250c) (f2512@imp* f250d@f250a)) (call-with-values (lambda () (fdf0@library-body-expander '() '() f2512@imp* f2511@b* '#t)) (lambda (f2523@f2516 f2524@f2518 f2525@f251a f2526@f251c f2527@f251e f2528@f2520 f2529@f2522) (let ((f2531@export-env f2529@f2522) (f2532@export-subst f2528@f2520) (f2533@visit-code f2527@f251e) (f2534@invoke-code f2526@f251c) (f2535@visit-req* f2525@f251a) (f2536@invoke-req* f2524@f2518) (f2537@imp* f2523@f2516)) (values f2536@invoke-req* f2534@invoke-code))))))))) (set! f288c@fdf6@top-level-expander fdf6@top-level-expander) (set! fdf8@rp (f6c4@f59f@make-record-printer 'env (lambda (f253f@x f2540@p f2541@wr) (display '"#<environment>" f2540@p)))) (set! f288d@fdf8@rp fdf8@rp) (set! fe02@env? (lambda (f2545@x) (and (simple-struct? f2545@x) (eq? (simple-struct-name f2545@x) 'env)))) (set! f288e@fe02@env? fe02@env?) (set! fe04@env-names (lambda (f2547@x) (simple-struct-ref f2547@x '0))) (set! f288f@fe04@env-names fe04@env-names) (set! fe06@set-env-names! (lambda (f2549@x f254a@val) (simple-struct-set! f2549@x '0 f254a@val))) (set! f2890@fe06@set-env-names! fe06@set-env-names!) (set! fe08@env-labels (lambda (f254d@x) (simple-struct-ref f254d@x '1))) (set! f2891@fe08@env-labels fe08@env-labels) (set! fe0a@set-env-labels! (lambda (f254f@x f2550@val) (simple-struct-set! f254f@x '1 f2550@val))) (set! f2892@fe0a@set-env-labels! fe0a@set-env-labels!) (set! fe0c@env-itc (lambda (f2553@x) (simple-struct-ref f2553@x '2))) (set! f2893@fe0c@env-itc fe0c@env-itc) (set! fe0e@set-env-itc! (lambda (f2555@x f2556@val) (simple-struct-set! f2555@x '2 f2556@val))) (set! f2894@fe0e@set-env-itc! fe0e@set-env-itc!) (set! fe10@dummy '3) (set! f2895@fe10@dummy fe10@dummy) (set! fe12@rp (f6c4@f59f@make-record-printer 'interaction-env (lambda (f2559@x f255a@p f255b@wr) (display '"#<environment>" f255a@p)))) (set! f2896@fe12@rp fe12@rp) (set! fe1c@interaction-env? (lambda (f255f@x) (and (simple-struct? f255f@x) (eq? (simple-struct-name f255f@x) 'interaction-env)))) (set! f2897@fe1c@interaction-env? fe1c@interaction-env?) (set! fe1e@interaction-env-rib (lambda (f2561@x) (simple-struct-ref f2561@x '0))) (set! f2898@fe1e@interaction-env-rib fe1e@interaction-env-rib) (set! fe20@set-interaction-env-rib! (lambda (f2563@x f2564@val) (simple-struct-set! f2563@x '0 f2564@val))) (set! f2899@fe20@set-interaction-env-rib! fe20@set-interaction-env-rib!) (set! fe22@interaction-env-r (lambda (f2567@x) (simple-struct-ref f2567@x '1))) (set! f289a@fe22@interaction-env-r fe22@interaction-env-r) (set! fe24@set-interaction-env-r! (lambda (f2569@x f256a@val) (simple-struct-set! f2569@x '1 f256a@val))) (set! f289b@fe24@set-interaction-env-r! fe24@set-interaction-env-r!) (set! fe26@interaction-env-locs (lambda (f256d@x) (simple-struct-ref f256d@x '2))) (set! f289c@fe26@interaction-env-locs fe26@interaction-env-locs) (set! fe28@set-interaction-env-locs! (lambda (f256f@x f2570@val) (simple-struct-set! f256f@x '2 f2570@val))) (set! f289d@fe28@set-interaction-env-locs! fe28@set-interaction-env-locs!) (set! fe2a@dummy '3) (set! f289e@fe2a@dummy fe2a@dummy) (set! fe2c@interaction-environment-symbols (lambda () (fe34@environment-symbols (fe6c@interaction-environment)))) (set! f289f@fe2c@interaction-environment-symbols fe2c@interaction-environment-symbols) (set! fe2e@environment-bindings (lambda (f2573@e) (vector->list (vector-map (lambda (f2575@name f2576@label) (fe30@parse-binding (cons f2575@name (f992@f7df@imported-label->binding f2576@label)))) (fe04@env-names f2573@e) (fe08@env-labels f2573@e))))) (set! f28a0@fe2e@environment-bindings fe2e@environment-bindings) (set! fe30@parse-binding (lambda (f2579@b) (cons (car f2579@b) (let ((f257b@t (cadr f2579@b))) (if (memv f257b@t '(core-prim global)) 'procedure (if (memv f257b@t '(core-macro macro global-macro)) 'syntax (if (memv f257b@t '($core-rtd)) 'record (if (eq? (car f2579@b) (cadr f2579@b)) 'syntax 'unknown)))))))) (set! f28a1@fe30@parse-binding fe30@parse-binding) (set! fe32@environment? (lambda (f257d@x) (or (fe02@env? f257d@x) (fe1c@interaction-env? f257d@x)))) (set! f28a2@fe32@environment? fe32@environment?) (set! fe34@environment-symbols (lambda (f257f@x) (if (fe02@env? f257f@x) (vector->list (fe04@env-names f257f@x)) (if (fe1c@interaction-env? f257f@x) (map values (fb15@rib-sym* (fe1e@interaction-env-rib f257f@x))) (assertion-violation 'environment-symbols '"not an environment" f257f@x))))) (set! f28a3@fe34@environment-symbols fe34@environment-symbols) (set! fe36@environment (lambda f2581@imp* (let ((f2583@itc (fde4@make-collector))) (let ((f2589@f2586 fdea@imp-collector) (f258a@f2588 f2583@itc)) (let ((f258d@swap (lambda () (let ((f258f@t (f2589@f2586))) (begin (f2589@f2586 f258a@f2588) (set! f258a@f2588 f258f@t)))))) (dynamic-wind f258d@swap (lambda () (call-with-values (lambda () (fde0@parse-import-spec* f2581@imp*)) (lambda (f2595@f2592 f2596@f2594) (let ((f2599@subst-labels f2596@f2594) (f259a@subst-names f2595@f2592)) (make-simple-struct 'env '4 (list f259a@subst-names f2599@subst-labels f2583@itc)))))) f258d@swap)))))) (set! f28a4@fe36@environment fe36@environment) (set! fe38@null-environment (lambda (f259d@n) (begin (if (not (eqv? f259d@n '5)) (assertion-violation 'null-environment '"not 5" f259d@n) (void)) (fe36@environment '(psyntax null-environment-5))))) (set! f28a5@fe38@null-environment fe38@null-environment) (set! fe3a@scheme-report-environment (lambda (f259f@n) (begin (if (not (eqv? f259f@n '5)) (assertion-violation 'scheme-report-environment '"not 5" f259f@n) (void)) (fe36@environment '(psyntax scheme-report-environment-5))))) (set! f28a6@fe3a@scheme-report-environment fe3a@scheme-report-environment) (set! fe3c@expand (lambda (f25a1@x f25a2@env) (if (fe02@env? f25a2@env) (let ((f25a5@rib (fde2@make-top-rib (fe04@env-names f25a2@env) (fe08@env-labels f25a2@env)))) (let ((f25a7@x (make-simple-struct 'stx '5 (list f25a1@x fafb@top-mark* (list f25a5@rib) '()))) (f25a8@itc (fe0c@env-itc f25a2@env)) (f25a9@rtc (fde4@make-collector)) (f25aa@vtc (fde4@make-collector))) (let ((f25af@x (let ((f25c1@f25b2 fe6e@top-level-context) (f25c2@f25b4 fde6@inv-collector) (f25c3@f25b6 fde8@vis-collector) (f25c4@f25b8 fdea@imp-collector) (f25c5@f25ba '#f) (f25c6@f25bc f25a9@rtc) (f25c7@f25be f25aa@vtc) (f25c8@f25c0 f25a8@itc)) (let ((f25d1@swap (lambda () (begin (let ((f25d3@t (f25c1@f25b2))) (begin (f25c1@f25b2 f25c5@f25ba) (set! f25c5@f25ba f25d3@t))) (let ((f25d5@t (f25c2@f25b4))) (begin (f25c2@f25b4 f25c6@f25bc) (set! f25c6@f25bc f25d5@t))) (let ((f25d7@t (f25c3@f25b6))) (begin (f25c3@f25b6 f25c7@f25be) (set! f25c7@f25be f25d7@t))) (let ((f25d9@t (f25c4@f25b8))) (begin (f25c4@f25b8 f25c8@f25c0) (set! f25c8@f25c0 f25d9@t))))))) (dynamic-wind f25d1@swap (lambda () (fda0@chi-expr f25a7@x '() '())) f25d1@swap))))) (begin (fb33@seal-rib! f25a5@rib) (values f25af@x (f25a9@rtc)))))) (if (fe1c@interaction-env? f25a2@env) (let ((f25db@rib (fe1e@interaction-env-rib f25a2@env)) (f25dc@r (fe22@interaction-env-r f25a2@env)) (f25dd@rtc (fde4@make-collector))) (let ((f25e1@x (make-simple-struct 'stx '5 (list f25a1@x fafb@top-mark* (list f25db@rib) '())))) (call-with-values (lambda () (let ((f25f7@f25e8 fe6e@top-level-context) (f25f8@f25ea fde6@inv-collector) (f25f9@f25ec fde8@vis-collector) (f25fa@f25ee fdea@imp-collector) (f25fb@f25f0 f25a2@env) (f25fc@f25f2 f25dd@rtc) (f25fd@f25f4 (fde4@make-collector)) (f25fe@f25f6 (fde4@make-collector))) (let ((f2607@swap (lambda () (begin (let ((f2609@t (f25f7@f25e8))) (begin (f25f7@f25e8 f25fb@f25f0) (set! f25fb@f25f0 f2609@t))) (let ((f260b@t (f25f8@f25ea))) (begin (f25f8@f25ea f25fc@f25f2) (set! f25fc@f25f2 f260b@t))) (let ((f260d@t (f25f9@f25ec))) (begin (f25f9@f25ec f25fd@f25f4) (set! f25fd@f25f4 f260d@t))) (let ((f260f@t (f25fa@f25ee))) (begin (f25fa@f25ee f25fe@f25f6) (set! f25fe@f25f6 f260f@t))))))) (dynamic-wind f2607@swap (lambda () (fdee@chi-interaction-expr f25e1@x f25db@rib f25dc@r)) f2607@swap)))) (lambda (f2611@f25e4 f2612@f25e6) (let ((f2615@r^ f2612@f25e6) (f2616@e f2611@f25e4)) (begin (fe24@set-interaction-env-r! f25a2@env f2615@r^) (values f2616@e (f25dd@rtc)))))))) (assertion-violation 'expand '"not an environment" f25a2@env))))) (set! f28a7@fe3c@expand fe3c@expand) (set! fe3e@eval (lambda (f2619@x f261a@env) (begin (if (not (fe32@environment? f261a@env)) (error 'eval '"not an environment" f261a@env) (void)) (call-with-values (lambda () (fe3c@expand f2619@x f261a@env)) (lambda (f2621@f261e f2622@f2620) (let ((f2625@invoke-req* f2622@f2620) (f2626@x f2621@f261e)) (begin (for-each f993@f7e1@invoke-library f2625@invoke-req*) (eval-core (f71d@f6d5@expanded->core f2626@x))))))))) (set! f28a8@fe3e@eval fe3e@eval) (set! fe40@library-expander (lambda f2697 (let ((f2698 (length f2697))) (if (= f2698 '3) (apply (lambda (f2629@x f262a@filename f262b@verify-name) (letrec* ((f2630@build-visit-code (lambda (f2685@macro*) (if (null? f2685@macro*) (fadd@fa3e@build-void) (fadc@fa3c@build-sequence '#f (map (lambda (f2687@x) (let ((f2689@loc (car f2687@x)) (f268a@src (cddr f2687@x))) (list 'set! f2689@loc f268a@src))) f2685@macro*))))) (f2632@visit! (lambda (f267d@macro*) (for-each (lambda (f267f@x) (let ((f2681@loc (car f267f@x)) (f2682@proc (cadr f267f@x))) (set-symbol-value! f2681@loc f2682@proc))) f267d@macro*)))) (call-with-values (lambda () (fdf2@core-library-expander f2629@x f262b@verify-name)) (lambda (f2645@f2634 f2646@f2636 f2647@f2638 f2648@f263a f2649@f263c f264a@f263e f264b@f2640 f264c@f2642 f264d@f2644) (let ((f2657@export-env f264d@f2644) (f2658@export-subst f264c@f2642) (f2659@macro* f264b@f2640) (f265a@invoke-code f264a@f263e) (f265b@vis* f2649@f263c) (f265c@inv* f2648@f263a) (f265d@imp* f2647@f2638) (f265e@ver f2646@f2636) (f265f@name f2645@f2634)) (let ((f2669@id (gensym)) (f266a@name f265f@name) (f266b@ver f265e@ver) (f266c@imp* (map f997@f7e9@library-spec f265d@imp*)) (f266d@vis* (map f997@f7e9@library-spec f265b@vis*)) (f266e@inv* (map f997@f7e9@library-spec f265c@inv*)) (f266f@visit-proc (lambda () (f2632@visit! f2659@macro*))) (f2670@invoke-proc (lambda () (eval-core (f71d@f6d5@expanded->core f265a@invoke-code)))) (f2671@visit-code (f2630@build-visit-code f2659@macro*)) (f2672@invoke-code f265a@invoke-code)) (begin (f991@f7dd@install-library f2669@id f266a@name f266b@ver f266c@imp* f266d@vis* f266e@inv* f2658@export-subst f2657@export-env f266f@visit-proc f2670@invoke-proc f2671@visit-code f2672@invoke-code '#t f262a@filename) (values f2669@id f266a@name f266b@ver f266c@imp* f266d@vis* f266e@inv* f2672@invoke-code f2671@visit-code f2658@export-subst f2657@export-env)))))))) f2697) (if (= f2698 '2) (apply (lambda (f268d@x f268e@filename) (fe40@library-expander f268d@x f268e@filename (lambda (f2691@x) (values)))) f2697) (if (= f2698 '1) (apply (lambda (f2693@x) (fe40@library-expander f2693@x '#f (lambda (f2695@x) (values)))) f2697) (error 'apply '"invalid arg count"))))))) (set! f28a9@fe40@library-expander fe40@library-expander) (set! fe42@boot-library-expand (lambda (f2699@x) (call-with-values (lambda () (fe40@library-expander f2699@x)) (lambda (f26af@f269c f26b0@f269e f26b1@f26a0 f26b2@f26a2 f26b3@f26a4 f26b4@f26a6 f26b5@f26a8 f26b6@f26aa f26b7@f26ac f26b8@f26ae) (let ((f26c3@export-env f26b8@f26ae) (f26c4@export-subst f26b7@f26ac) (f26c5@visit-code f26b6@f26aa) (f26c6@invoke-code f26b5@f26a8) (f26c7@inv* f26b4@f26a6) (f26c8@vis* f26b3@f26a4) (f26c9@imp* f26b2@f26a2) (f26ca@ver f26b1@f26a0) (f26cb@name f26b0@f269e) (f26cc@id f26af@f269c)) (values f26cb@name f26c6@invoke-code f26c4@export-subst f26c3@export-env)))))) (set! f28aa@fe42@boot-library-expand fe42@boot-library-expand) (set! fe44@rev-map-append (lambda (f26d7@f f26d8@ls f26d9@ac) (if (null? f26d8@ls) f26d9@ac (fe44@rev-map-append f26d7@f (cdr f26d8@ls) (cons (f26d7@f (car f26d8@ls)) f26d9@ac))))) (set! f28ab@fe44@rev-map-append fe44@rev-map-append) (set! fe46@build-exports (lambda (f26dd@lex*+loc* f26de@init*) (fadc@fa3c@build-sequence '#f (cons (fadd@fa3e@build-void) (fe44@rev-map-append (lambda (f26e1@x) (list 'set! (cdr f26e1@x) (car f26e1@x))) f26dd@lex*+loc* f26de@init*))))) (set! f28ac@fe46@build-exports fe46@build-exports) (set! fe48@make-export-subst (lambda (f26e3@name* f26e4@id*) (map (lambda (f26e7@name f26e8@id) (let ((f26eb@label (fb8d@id->label f26e8@id))) (begin (if (not f26eb@label) (fe5e@syntax-violation '#f '"cannot export unbound identifier" f26e8@id) (void)) (cons f26e7@name f26eb@label)))) f26e3@name* f26e4@id*))) (set! f28ad@fe48@make-export-subst fe48@make-export-subst) (set! fe4a@make-export-env/macros (lambda (f26ed@lex* f26ee@loc* f26ef@r) (letrec* ((f26f4@lookup (lambda (f2711@x) (let f2719@f ((f2713@x f2711@x) (f2714@lex* f26ed@lex*) (f2715@loc* f26ee@loc*)) (if (pair? f2714@lex*) (if (eq? f2713@x (car f2714@lex*)) (car f2715@loc*) (f2719@f f2713@x (cdr f2714@lex*) (cdr f2715@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let f26fd@f ((f26f5@r f26ef@r) (f26f6@env '()) (f26f7@global* '()) (f26f8@macro* '())) (if (null? f26f5@r) (values f26f6@env f26f7@global* f26f8@macro*) (let ((f26ff@x (car f26f5@r))) (let ((f2701@label (car f26ff@x)) (f2702@b (cdr f26ff@x))) (let ((f2705@t (fb93@binding-type f2702@b))) (if (memv f2705@t '(lexical)) (let ((f2707@v (fb95@binding-value f2702@b))) (let ((f2709@loc (f26f4@lookup (fd08@lexical-var f2707@v))) (f270a@type (if (fd0a@lexical-mutable? f2707@v) 'mutable 'global))) (f26fd@f (cdr f26f5@r) (cons (cons* f2701@label f270a@type f2709@loc) f26f6@env) (cons (cons (fd08@lexical-var f2707@v) f2709@loc) f26f7@global*) f26f8@macro*))) (if (memv f2705@t '(local-macro)) (let ((f270d@loc (gensym))) (f26fd@f (cdr f26f5@r) (cons (cons* f2701@label 'global-macro f270d@loc) f26f6@env) f26f7@global* (cons (cons f270d@loc (fb95@binding-value f2702@b)) f26f8@macro*))) (if (memv f2705@t '(local-macro!)) (let ((f270f@loc (gensym))) (f26fd@f (cdr f26f5@r) (cons (cons* f2701@label 'global-macro! f270f@loc) f26f6@env) f26f7@global* (cons (cons f270f@loc (fb95@binding-value f2702@b)) f26f8@macro*))) (if (memv f2705@t '($rtd $module)) (f26fd@f (cdr f26f5@r) (cons f26ff@x f26f6@env) f26f7@global* f26f8@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (fb93@binding-type f2702@b) (fb95@binding-value f2702@b)))))))))))))) (set! f28ae@fe4a@make-export-env/macros fe4a@make-export-env/macros) (set! fe4c@generate-temporaries (lambda (f271b@ls) (let ((f271d@t f271b@ls)) (let ((f271f@ls/false (fd7e@syntax-dispatch f271d@t 'each-any))) (if f271f@ls/false (apply (lambda (f2721@ls) (map (lambda (f2723@x) (make-simple-struct 'stx '5 (list (let ((f2725@x (fe64@syntax->datum f2723@x))) (if (or (symbol? f2725@x) (string? f2725@x)) (gensym f2725@x) (gensym 't))) fafb@top-mark* '() '()))) f2721@ls)) f271f@ls/false) (let ((f2727@t f271d@t)) (let ((f2729@ls/false (fd7e@syntax-dispatch f2727@t '_))) (if f2729@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) f2729@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f2727@t))))))))) (set! f28af@fe4c@generate-temporaries fe4c@generate-temporaries) (set! fe4e@free-identifier=? (lambda (f272b@x f272c@y) (if (fb77@id? f272b@x) (if (fb77@id? f272c@y) (fb7d@free-id=? f272b@x f272c@y) (assertion-violation 'free-identifier=? '"not an identifier" f272c@y)) (assertion-violation 'free-identifier=? '"not an identifier" f272b@x)))) (set! f28b0@fe4e@free-identifier=? fe4e@free-identifier=?) (set! fe50@bound-identifier=? (lambda (f272f@x f2730@y) (if (fb77@id? f272f@x) (if (fb77@id? f2730@y) (fb7b@bound-id=? f272f@x f2730@y) (assertion-violation 'bound-identifier=? '"not an identifier" f2730@y)) (assertion-violation 'bound-identifier=? '"not an identifier" f272f@x)))) (set! f28b1@fe50@bound-identifier=? fe50@bound-identifier=?) (set! fe52@make-source-condition (lambda (f2733@x) (letrec* ((f273d@f2738 (make-record-type-descriptor '&source-information &condition-rtd 'f273b '#f '#f '#((immutable file-name) (immutable line)))) (f273f@f273a '#f) (f2741@f2739 (make-record-constructor-descriptor f273d@f2738 &condition-rcd f273f@f273a)) (f2744@f2737 (record-predicate f273d@f2738)) (f2746@make-source-condition (record-constructor f2741@f2739)) (f2748@f2735 (record-accessor f273d@f2738 '0)) (f274a@f2736 (record-accessor f273d@f2738 '1)) (f274c@source-condition? (condition-predicate f273d@f2738)) (f274e@source-filename (condition-accessor f273d@f2738 f2748@f2735)) (f2750@source-character (condition-accessor f273d@f2738 f274a@f2736))) (if (and (pair? f2733@x) (pair? (cdr f2733@x))) (f2746@make-source-condition (car f2733@x) (cadr f2733@x)) (condition))))) (set! f28b2@fe52@make-source-condition fe52@make-source-condition) (set! fe54@extract-position-condition (lambda (f2751@x) (fe52@make-source-condition (fe56@expression-position f2751@x)))) (set! f28b3@fe54@extract-position-condition fe54@extract-position-condition) (set! fe56@expression-position (lambda (f2753@x) (and (fb43@stx? f2753@x) (let ((f2755@x (fb45@stx-expr f2753@x))) (and (f6bb@f58d@annotation? f2755@x) (f6bc@f58f@annotation-source f2755@x)))))) (set! f28b4@fe56@expression-position fe56@expression-position) (set! fe58@assertion-error (lambda (f2757@expr f2758@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list f2757@expr)) (fe52@make-source-condition f2758@pos))))) (set! f28b5@fe58@assertion-error fe58@assertion-error) (set! fe5a@syntax-error (lambda (f275b@x . f275d@args) (begin (if (not (for-all string? f275d@args)) (assertion-violation 'syntax-error '"invalid argument" f275d@args) (void)) (raise (condition (make-message-condition (if (null? f275d@args) '"invalid syntax" (apply string-append f275d@args))) (make-syntax-violation (fe64@syntax->datum f275b@x) '#f) (fe54@extract-position-condition f275b@x)))))) (set! f28b6@fe5a@syntax-error fe5a@syntax-error) (set! fe5c@syntax-violation* (lambda (f275f@who f2760@msg f2761@form f2762@condition-object) (begin (if (not (string? f2760@msg)) (assertion-violation 'syntax-violation '"message is not a string" f2760@msg) (void)) (let ((f2767@who (if (or (string? f275f@who) (symbol? f275f@who)) f275f@who (if (not f275f@who) (let ((f2769@t f2761@form)) (let ((f276b@ls/false (fd7e@syntax-dispatch f2769@t 'any))) (if (and f276b@ls/false (apply (lambda (f276d@id) (fb77@id? f276d@id)) f276b@ls/false)) (apply (lambda (f276f@id) (fe64@syntax->datum f276f@id)) f276b@ls/false) (let ((f2771@t f2769@t)) (let ((f2773@ls/false (fd7e@syntax-dispatch f2771@t '(any . any)))) (if (and f2773@ls/false (apply (lambda (f2775@id f2776@rest) (fb77@id? f2775@id)) f2773@ls/false)) (apply (lambda (f2779@id f277a@rest) (fe64@syntax->datum f2779@id)) f2773@ls/false) (let ((f277d@t f2771@t)) (let ((f277f@ls/false (fd7e@syntax-dispatch f277d@t '_))) (if f277f@ls/false (apply (lambda () '#f) f277f@ls/false) (fe5e@syntax-violation '#f '"invalid syntax" f277d@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" f275f@who))))) (raise (condition (if f2767@who (make-who-condition f2767@who) (condition)) (make-message-condition f2760@msg) f2762@condition-object (fe54@extract-position-condition f2761@form))))))) (set! f28b7@fe5c@syntax-violation* fe5c@syntax-violation*) (set! fe5e@syntax-violation (lambda f278f (let ((f2790 (length f278f))) (if (= f2790 '3) (apply (lambda (f2781@who f2782@msg f2783@form) (fe5e@syntax-violation f2781@who f2782@msg f2783@form '#f)) f278f) (if (= f2790 '4) (apply (lambda (f2787@who f2788@msg f2789@form f278a@subform) (fe5c@syntax-violation* f2787@who f2788@msg f2789@form (make-syntax-violation (fe64@syntax->datum f2789@form) (fe64@syntax->datum f278a@subform)))) f278f) (error 'apply '"invalid arg count")))))) (set! f28b8@fe5e@syntax-violation fe5e@syntax-violation) (set! fe60@identifier? (lambda (f2791@x) (fb77@id? f2791@x))) (set! f28b9@fe60@identifier? fe60@identifier?) (set! fe62@datum->syntax (lambda (f2793@id f2794@datum) (if (fb77@id? f2793@id) (fb57@datum->stx f2793@id f2794@datum) (assertion-violation 'datum->syntax '"not an identifier" f2793@id)))) (set! f28ba@fe62@datum->syntax fe62@datum->syntax) (set! fe64@syntax->datum (lambda (f2797@x) (fb8b@stx->datum f2797@x))) (set! f28bb@fe64@syntax->datum fe64@syntax->datum) (set! fe66@ungensym-all (lambda (f2799@code) (if (pair? f2799@code) (cons (fe66@ungensym-all (car f2799@code)) (fe66@ungensym-all (cdr f2799@code))) (if (symbol? f2799@code) (ungensym f2799@code) f2799@code)))) (set! f28bc@fe66@ungensym-all fe66@ungensym-all) (set! fe68@compile-r6rs-top-level (lambda (f279b@x*) (call-with-values (lambda () (fdf6@top-level-expander f279b@x*)) (lambda (f27a1@f279e f27a2@f27a0) (let ((f27a5@invoke-code f27a2@f27a0) (f27a6@lib* f27a1@f279e)) (lambda () (begin (for-each f993@f7e1@invoke-library f27a6@lib*) (let ((f27a9@expanded (f71d@f6d5@expanded->core f27a5@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (fe66@ungensym-all f27a9@expanded)) (void)) (eval-core f27a9@expanded)))))))))) (set! f28bd@fe68@compile-r6rs-top-level fe68@compile-r6rs-top-level) (set! fe6a@pre-compile-r6rs-top-level (lambda (f27ab@x*) (call-with-values (lambda () (fdf6@top-level-expander f27ab@x*)) (lambda (f27b1@f27ae f27b2@f27b0) (let ((f27b5@invoke-code f27b2@f27b0) (f27b6@lib* f27b1@f27ae)) (begin (for-each f993@f7e1@invoke-library f27b6@lib*) (f6c5@f5a1@compile-core (f71d@f6d5@expanded->core f27b5@invoke-code)))))))) (set! f28be@fe6a@pre-compile-r6rs-top-level fe6a@pre-compile-r6rs-top-level) (set! fe6c@interaction-environment (let ((f27b9@the-env '#f)) (lambda () (or f27b9@the-env (let ((f27bb@lib (f98c@f7d3@find-library-by-name '(mosh interaction))) (f27bc@rib (fb2b@make-empty-rib))) (begin (let ((f27bf@subst (f96e@f797@library-subst f27bb@lib))) (begin (fb17@set-rib-sym*! f27bc@rib (map car f27bf@subst)) (fb1b@set-rib-mark**! f27bc@rib (map (lambda (f27c1@x) fafb@top-mark*) f27bf@subst)) (fb1f@set-rib-label*! f27bc@rib (map cdr f27bf@subst)))) (let ((f27c3@env (make-simple-struct 'interaction-env '4 (list f27bc@rib '() '())))) (begin (set! f27b9@the-env f27c3@env) f27c3@env)))))))) (set! f28bf@fe6c@interaction-environment fe6c@interaction-environment) (set! fe6e@top-level-context (f6c7@f5a5@make-parameter '#f)) (set! f28c0@fe6e@top-level-context fe6e@top-level-context) (f989@f7cd@current-library-expander fe40@library-expander))
(begin (begin (f71a@f6cf@current-primitive-locations (lambda (f2e15@x) (let ((f2e17@t (assq f2e15@x '((syntax-error . f28b6@fe5a@syntax-error) (syntax-dispatch . f2854@fd7e@syntax-dispatch) (load . f2a40@f28e7@load) (interaction-environment . f28bf@fe6c@interaction-environment) (library-path . f981@f7bd@library-path) (mosh-cache-dir . f6c8@f5a7@mosh-cache-dir) (make-parameter . f6c7@f5a5@make-parameter) (make-variable-transformer . f2811@fba9@make-variable-transformer) (identifier? . f28b9@fe60@identifier?) (generate-temporaries . f28af@fe4c@generate-temporaries) (free-identifier=? . f28b0@fe4e@free-identifier=?) (syntax->datum . f28bb@fe64@syntax->datum) (datum->syntax . f28ba@fe62@datum->syntax) (bound-identifier=? . f28b1@fe50@bound-identifier=?) (scheme-report-environment . f28a6@fe3a@scheme-report-environment) (null-environment . f28a5@fe38@null-environment) (command-line . f2a3d@f28e1@command-line) (eval . f28a8@fe3e@eval) (environment . f28a4@fe36@environment) (syntax-violation . f28b8@fe5e@syntax-violation) (assertion-error . f28b5@fe58@assertion-error))))) (if f2e17@t (cdr f2e17@t) '#f)))) (f991@f7dd@install-library 'f2df2 '(mosh interaction) '() '() '() '() '((regexp? . f2db2) (alist->eq-hash-table . f2dae) (format . f2dab) (string-split . f2d9b) (call-process . f2d95) (set-current-directory! . f2d91) (expand-path . f2d90) (current-directory . f2d8f) (%spawn . f2d8e) (%waitpid . f2d8d) (simple-struct-name . f2d8c) (simple-struct-set! . f2d8b) (simple-struct-ref . f2d8a) (make-simple-struct . f2d89) (simple-struct? . f2d88) (pointer-ref-c-int64 . f2d87) (pointer-ref-c-int32 . f2d86) (pointer-ref-c-int16 . f2d85) (pointer-ref-c-int8 . f2d84) (pointer-ref-c-uint64 . f2d83) (pointer-ref-c-uint32 . f2d82) (pointer-ref-c-uint16 . f2d81) (pointer-ref-c-uint8 . f2d80) (pointer-set-c-uint64! . f2d7f) (pointer-set-c-uint32! . f2d7e) (pointer-set-c-uint16! . f2d7d) (pointer-set-c-uint8! . f2d7c) (pointer-set-c-int64! . f2d7b) (pointer-set-c-int32! . f2d7a) (pointer-set-c-int16! . f2d79) (pointer-set-c-int8! . f2d78) (pointer-set-c-pointer! . f2d77) (pointer-set-c-double! . f2d76) (pointer-set-c-float! . f2d75) (pointer-set-c-long-long! . f2d74) (pointer-set-c-long! . f2d73) (pointer-set-c-int! . f2d72) (pointer-set-c-short! . f2d71) (pointer-set-c-char! . f2d70) (pointer-ref-c-pointer . f2d6f) (pointer-ref-c-double . f2d6e) (pointer-ref-c-float . f2d6d) (pointer-ref-c-unsigned-long-long . f2d6c) (pointer-ref-c-signed-long-long . f2d6b) (pointer-ref-c-unsigned-long . f2d6a) (pointer-ref-c-signed-long . f2d69) (pointer-ref-c-unsigned-int . f2d68) (pointer-ref-c-signed-int . f2d67) (pointer-ref-c-unsigned-short . f2d66) (pointer-ref-c-signed-short . f2d65) (pointer-ref-c-unsigned-char . f2d64) (pointer-ref-c-signed-char . f2d63) (pointer->integer . f2d62) (integer->pointer . f2d61) (pointer? . f2d60) (shared-errno . f2d5f) (%ffi-supported? . f2d5a) (%ffi-pointer->string . f2d59) (%ffi-call . f2d58) (%ffi-lookup . f2d57) (%ffi-open . f2d56) (null-terminated-utf8->string . f2d55) (null-terminated-bytevector->string . f2d54) (%exec . f2d53) (%fork . f2d52) (%pipe . f2d51) (p . f2d50) (whereis . f2d34) (register . f2d33) (vm-join! . f2d32) (vm-set-value! . f2d31) (vm? . f2d30) (main-vm? . f2d2f) (vm-eval . f2d2e) (vm-self . f2d2d) (vm-start! . f2d2c) (make-vm . f2d2b) (mutex-try-lock! . f2d2a) (mutex-unlock! . f2d29) (mutex-lock! . f2d28) (mutex? . f2d27) (make-mutex . f2d26) (condition-variable-notify-all! . f2d25) (condition-variable-notify! . f2d24) (condition-variable-wait! . f2d23) (make-condition-variable . f2d22) (write/ss . f2d21) (string-upcase . f2d08) (string-titlecase . f2d07) (string-normalize-nfkd . f2d06) (string-normalize-nfkc . f2d05) (string-normalize-nfd . f2d04) (string-normalize-nfc . f2d03) (string-foldcase . f2d02) (string-downcase . f2d01) (string-ci>? . f2d00) (string-ci>=? . f2cff) (string-ci=? . f2cfe) (string-ci<? . f2cfd) (string-ci<=? . f2cfc) (char-whitespace? . f2cfb) (char-upper-case? . f2cfa) (char-title-case? . f2cf9) (char-numeric? . f2cf8) (char-lower-case? . f2cf7) (char-general-category . f2cf6) (char-upcase . f2cf5) (char-titlecase . f2cf4) (char-foldcase . f2cf3) (char-downcase . f2cf2) (char-ci>? . f2cf1) (char-ci>=? . f2cf0) (char-ci=? . f2cef) (char-ci<? . f2cee) (char-ci<=? . f2ced) (char-alphabetic? . f2cec) (make-variable-transformer . fba8) (identifier? . fe5f) (generate-temporaries . fe4b) (free-identifier=? . fe4d) (syntax->datum . fe63) (datum->syntax . fe61) (bound-identifier=? . fe4f) (record-type-descriptor? . f2ceb) (record-predicate . f2cea) (record-mutator . f2ce9) (record-constructor . f2ce8) (record-accessor . f2ce7) (make-record-type-descriptor . f2ce6) (make-record-constructor-descriptor . f2ce5) (record? . f2ce4) (record-type-uid . f2ce3) (record-type-sealed? . f2ce2) (record-type-parent . f2ce1) (record-type-opaque? . f2ce0) (record-type-name . f2cdf) (record-type-generative? . f2cde) (record-type-field-names . f2cdd) (record-rtd . f2cdc) (record-field-mutable? . f2cdb) (delete-file . f2cda) (file-exists? . f2cd9) (vector-sort! . f2cd8) (vector-sort . f2cd7) (list-sort . f2cd6) (symbol-hash . f2cd5) (string-ci-hash . f2cd4) (string-hash . f2cd3) (equal-hash . f2cd2) (hashtable-equivalence-function . f2cd1) (make-hashtable . f2cd0) (hashtable-hash-function . f2ccf) (make-eqv-hashtable . f2cce) (make-eq-hashtable . f2ccd) (hashtable? . f2ccc) (hashtable-update! . f2ccb) (hashtable-size . f2cca) (hashtable-set! . f2cc9) (hashtable-ref . f2cc8) (hashtable-mutable? . f2cc7) (hashtable-keys . f2cc6) (hashtable-entries . f2cc5) (hashtable-delete! . f2cc4) (hashtable-copy . f2cc3) (hashtable-contains? . f2cc2) (hashtable-clear! . f2cc1) (call-with-output-file . f2cc0) (call-with-input-file . f2cbf) (write-char . f2cbe) (write . f2cbd) (with-output-to-file . f2cbc) (with-input-from-file . f2cbb) (read-char . f2cba) (read . f2cb9) (peek-char . f2cb8) (open-output-file . f2cb7) (open-input-file . f2cb6) (newline . f2cb5) (display . f2cb4) (close-output-port . f2cb3) (close-input-port . f2cb2) (eof-object? . f2cb1) (eof-object . f2cb0) (current-error-port . f2caf) (current-output-port . f2cae) (current-input-port . f2cad) (output-port? . f2cac) (input-port? . f2cab) (utf-8-codec . f2caa) (utf-16-codec . f2ca9) (transcoder-error-handling-mode . f2ca8) (transcoder-eol-style . f2ca7) (transcoder-codec . f2ca6) (transcoded-port . f2ca5) (textual-port? . f2ca4) (string->bytevector . f2ca3) (standard-output-port . f2ca2) (standard-input-port . f2ca1) (standard-error-port . f2ca0) (set-port-position! . f2c9f) (put-u8 . f2c9e) (put-string . f2c9d) (put-datum . f2c9c) (put-char . f2c9b) (put-bytevector . f2c9a) (port? . f2c99) (port-transcoder . f2c98) (port-position . f2c97) (port-has-set-port-position!? . f2c96) (port-has-port-position? . f2c95) (port-eof? . f2c94) (output-port-buffer-mode . f2c93) (open-string-output-port . f2c92) (open-string-input-port . f2c91) (open-file-output-port . f2c90) (open-file-input/output-port . f2c8f) (open-file-input-port . f2c8e) (open-bytevector-output-port . f2c8d) (open-bytevector-input-port . f2c8c) (native-transcoder . f2c8b) (native-eol-style . f2c8a) (make-transcoder . f2c89) (latin-1-codec . f2c88) (make-i/o-write-error . f2c87) (make-i/o-read-error . f2c86) (make-i/o-port-error . f2c85) (make-i/o-invalid-position-error . f2c84) (make-i/o-filename-error . f2c83) (make-i/o-file-protection-error . f2c82) (make-i/o-file-is-read-only-error . f2c81) (make-i/o-file-does-not-exist-error . f2c80) (make-i/o-file-already-exists-error . f2c7f) (make-i/o-error . f2c7e) (make-i/o-encoding-error . f2c7d) (make-i/o-decoding-error . f2c7c) (make-custom-textual-output-port . f2c7b) (make-custom-textual-input/output-port . f2c7a) (make-custom-textual-input-port . f2c79) (make-custom-binary-output-port . f2c78) (make-custom-binary-input/output-port . f2c77) (make-custom-binary-input-port . f2c76) (make-bytevector . f2c75) (lookahead-u8 . f2c74) (lookahead-char . f2c73) (i/o-write-error? . f2c72) (i/o-read-error? . f2c71) (i/o-port-error? . f2c70) (i/o-invalid-position-error? . f2c6f) (i/o-filename-error? . f2c6e) (i/o-file-protection-error? . f2c6d) (i/o-file-is-read-only-error? . f2c6c) (i/o-file-does-not-exist-error? . f2c6b) (i/o-file-already-exists-error? . f2c6a) (i/o-error? . f2c69) (i/o-error-position . f2c68) (i/o-error-port . f2c67) (i/o-error-filename . f2c66) (i/o-encoding-error? . f2c65) (i/o-encoding-error-char . f2c64) (i/o-decoding-error? . f2c63) (get-u8 . f2c62) (get-string-n! . f2c61) (get-string-n . f2c60) (get-string-all . f2c5f) (get-line . f2c5e) (get-datum . f2c5d) (get-char . f2c5c) (get-bytevector-some . f2c5b) (get-bytevector-n! . f2c5a) (get-bytevector-n . f2c59) (get-bytevector-all . f2c58) (flush-output-port . f2c57) (close-port . f2c56) (exit . f2c4e) (command-line . f28e0) (string-fill! . f2c4d) (string-set! . f2c4c) (set-cdr! . f2c4b) (set-car! . f2c4a) (remove . f2c49) (remv . f2c48) (remp . f2c47) (remq . f2c46) (partition . f2c45) (memv . f2c44) (memq . f2c43) (memp . f2c42) (member . f2c41) (exists . f2c40) (for-all . f2c3f) (fold-right . f2c3e) (fold-left . f2c3d) (find . f2c3c) (filter . f2c3b) (cons* . f2c3a) (assv . f2c39) (assq . f2c38) (assp . f2c37) (assoc . f2c36) (call-with-string-output-port . f2c35) (call-with-port . f2c34) (call-with-bytevector-output-port . f2c33) (bytevector->string . f2c32) (buffer-mode? . f2c31) (binary-port? . f2c30) (with-exception-handler . f2c2f) (raise-continuable . f2c2e) (raise . f2c2d) (eval . fe3d) (environment . fe35) (make-enumeration . f2c2c) (enum-set=? . f2c2b) (enum-set-universe . f2c2a) (enum-set-union . f2c29) (enum-set-subset? . f2c28) (enum-set-projection . f2c27) (enum-set-member? . f2c26) (enum-set-intersection . f2c25) (enum-set-indexer . f2c24) (enum-set-difference . f2c23) (enum-set-constructor . f2c22) (enum-set-complement . f2c21) (enum-set->list . f2c20) (who-condition? . f2c1f) (warning? . f2c1e) (violation? . f2c1d) (undefined-violation? . f2c1c) (syntax-violation? . f2c1b) (syntax-violation-subform . f2c1a) (syntax-violation-form . f2c19) (syntax-violation . fe5d) (simple-conditions . f2c18) (serious-condition? . f2c17) (non-continuable-violation? . f2c16) (message-condition? . f2c15) (make-who-condition . f2c14) (make-warning . f2c13) (make-violation . f2c12) (make-undefined-violation . f2c11) (make-syntax-violation . f2c10) (make-serious-condition . f2c0f) (make-non-continuable-violation . f2c0e) (make-message-condition . f2c0d) (make-lexical-violation . f2c0c) (make-irritants-condition . f2c0b) (make-implementation-restriction-violation . f2c0a) (make-error . f2c09) (make-assertion-violation . f2c08) (lexical-violation? . f2c07) (irritants-condition? . f2c06) (implementation-restriction-violation? . f2c05) (error? . f2c04) (condition-who . f2c03) (condition-predicate . f2c02) (condition-message . f2c01) (condition-irritants . f2c00) (condition-accessor . f2bff) (condition . f2bfe) (assertion-violation? . f2bfd) (condition? . f2bfc) (utf32->string . f2bfb) (utf16->string . f2bfa) (utf8->string . f2bf9) (uint-list->bytevector . f2bf8) (u8-list->bytevector . f2bf7) (string->utf8 . f2bf6) (string->utf32 . f2bf5) (string->utf16 . f2bf4) (sint-list->bytevector . f2bf3) (native-endianness . f2bf2) (bytevector? . f2bf1) (bytevector=? . f2bf0) (bytevector-uint-set! . f2bef) (bytevector-uint-ref . f2bee) (bytevector-u8-set! . f2bed) (bytevector-u8-ref . f2bec) (bytevector-u64-set! . f2beb) (bytevector-u64-ref . f2bea) (bytevector-u64-native-set! . f2be9) (bytevector-u64-native-ref . f2be8) (bytevector-u32-set! . f2be7) (bytevector-u32-ref . f2be6) (bytevector-u32-native-set! . f2be5) (bytevector-u32-native-ref . f2be4) (bytevector-u16-set! . f2be3) (bytevector-u16-ref . f2be2) (bytevector-u16-native-set! . f2be1) (bytevector-u16-native-ref . f2be0) (bytevector-sint-set! . f2bdf) (bytevector-sint-ref . f2bde) (bytevector-s8-set! . f2bdd) (bytevector-s8-ref . f2bdc) (bytevector-s64-set! . f2bdb) (bytevector-s64-ref . f2bda) (bytevector-s64-native-set! . f2bd9) (bytevector-s64-native-ref . f2bd8) (bytevector-s32-set! . f2bd7) (bytevector-s32-ref . f2bd6) (bytevector-s32-native-set! . f2bd5) (bytevector-s32-native-ref . f2bd4) (bytevector-s16-set! . f2bd3) (bytevector-s16-ref . f2bd2) (bytevector-s16-native-set! . f2bd1) (bytevector-s16-native-ref . f2bd0) (bytevector-length . f2bcf) (bytevector-ieee-single-ref . f2bce) (bytevector-ieee-single-set! . f2bcd) (bytevector-ieee-single-native-set! . f2bcc) (bytevector-ieee-single-native-ref . f2bcb) (bytevector-ieee-double-set! . f2bca) (bytevector-ieee-double-ref . f2bc9) (bytevector-ieee-double-native-set! . f2bc8) (bytevector-ieee-double-native-ref . f2bc7) (bytevector-fill! . f2bc6) (bytevector-copy! . f2bc5) (bytevector-copy . f2bc4) (bytevector->uint-list . f2bc3) (bytevector->u8-list . f2bc2) (bytevector->sint-list . f2bc1) (no-nans-violation? . f2bc0) (no-infinities-violation? . f2bbf) (make-no-nans-violation . f2bbe) (make-no-infinities-violation . f2bbd) (real->flonum . f2bbc) (flzero? . f2bbb) (fltruncate . f2bba) (fltan . f2bb9) (flsqrt . f2bb8) (flsin . f2bb7) (flround . f2bb6) (flpositive? . f2bb5) (flonum? . f2bb4) (flodd? . f2bb3) (flnumerator . f2bb2) (flnegative? . f2bb1) (flnan? . f2bb0) (flmod0 . f2baf) (flmod . f2bae) (flmin . f2bad) (flmax . f2bac) (fllog . f2bab) (flinteger? . f2baa) (flinfinite? . f2ba9) (flfloor . f2ba8) (flfinite? . f2ba7) (flexpt . f2ba6) (flexp . f2ba5) (fleven? . f2ba4) (fldiv0-and-mod0 . f2ba3) (fldiv0 . f2ba2) (fldiv-and-mod . f2ba1) (fldiv . f2ba0) (fldenominator . f2b9f) (flcos . f2b9e) (flceiling . f2b9d) (flatan . f2b9c) (flasin . f2b9b) (flacos . f2b9a) (flabs . f2b99) (fl>? . f2b98) (fl>=? . f2b97) (fl=? . f2b96) (fl<? . f2b95) (fl<=? . f2b94) (fl/ . f2b93) (fl- . f2b92) (fl+ . f2b91) (fl* . f2b90) (fixnum->flonum . f2b8f) (fxzero? . f2b8e) (fxxor . f2b8d) (fxrotate-bit-field . f2b8c) (fxreverse-bit-field . f2b8b) (fxpositive? . f2b8a) (fxodd? . f2b89) (fxnot . f2b88) (fxnegative? . f2b87) (fxmod0 . f2b86) (fxmod . f2b85) (fxmin . f2b84) (fxmax . f2b83) (fxlength . f2b82) (fxior . f2b81) (fxif . f2b80) (fxfirst-bit-set . f2b7f) (fxeven? . f2b7e) (fxdiv0-and-mod0 . f2b7d) (fxdiv0 . f2b7c) (fxdiv-and-mod . f2b7b) (fxdiv . f2b7a) (fxcopy-bit-field . f2b79) (fxcopy-bit . f2b78) (fxbit-set? . f2b77) (fxbit-field . f2b76) (fxbit-count . f2b75) (fxarithmetic-shift-right . f2b74) (fxarithmetic-shift-left . f2b73) (fxarithmetic-shift . f2b72) (fxand . f2b71) (fx>? . f2b70) (fx>=? . f2b6f) (fx=? . f2b6e) (fx<? . f2b6d) (fx<=? . f2b6c) (fx-/carry . f2b6b) (fx- . f2b6a) (fx+/carry . f2b69) (fx+ . f2b68) (fx*/carry . f2b67) (fx* . f2b66) (greatest-fixnum . f2b65) (least-fixnum . f2b64) (fixnum-width . f2b63) (fixnum? . f2b62) (bitwise-rotate-bit-field . f2b61) (bitwise-reverse-bit-field . f2b60) (bitwise-length . f2b5f) (bitwise-if . f2b5e) (bitwise-first-bit-set . f2b5d) (bitwise-copy-bit-field . f2b5c) (bitwise-copy-bit . f2b5b) (bitwise-bit-set? . f2b5a) (bitwise-bit-field . f2b59) (bitwise-bit-count . f2b58) (bitwise-xor . f2b57) (bitwise-ior . f2b56) (bitwise-and . f2b55) (bitwise-not . f2b54) (bitwise-arithmetic-shift-right . f2b53) (bitwise-arithmetic-shift-left . f2b52) (bitwise-arithmetic-shift . f2b51) (zero? . f2b50) (vector? . f2b4f) (vector-set! . f2b4e) (vector-ref . f2b4d) (vector-map . f2b4c) (vector-length . f2b4b) (vector-for-each . f2b4a) (vector-fill! . f2b49) (vector->list . f2b48) (vector . f2b47) (values . f2b46) (truncate . f2b45) (tan . f2b44) (symbol? . f2b43) (symbol=? . f2b42) (symbol->string . f2b41) (substring . f2b40) (string? . f2b3f) (string>? . f2b3e) (string>=? . f2b3d) (string=? . f2b3c) (string<? . f2b3b) (string<=? . f2b3a) (string-ref . f2b39) (string-length . f2b38) (string-for-each . f2b37) (string-copy . f2b36) (string-append . f2b35) (string->symbol . f2b34) (string->number . f2b33) (string->list . f2b32) (string . f2b31) (sqrt . f2b30) (sin . f2b2f) (round . f2b2e) (reverse . f2b2d) (real? . f2b2c) (real-valued? . f2b2b) (real-part . f2b2a) (rationalize . f2b29) (rational? . f2b28) (rational-valued? . f2b27) (procedure? . f2b26) (positive? . f2b25) (pair? . f2b24) (odd? . f2b23) (numerator . f2b22) (number? . f2b21) (number->string . f2b20) (null? . f2b1f) (not . f2b1e) (negative? . f2b1d) (nan? . f2b1c) (min . f2b1b) (max . f2b1a) (map . f2b19) (make-vector . f2b18) (make-string . f2b17) (make-rectangular . f2b16) (make-polar . f2b15) (magnitude . f2b14) (log . f2b13) (list? . f2b12) (list-tail . f2b11) (list-ref . f2b10) (list->vector . f2b0f) (list->string . f2b0e) (list . f2b0d) (length . f2b0c) (lcm . f2b0b) (integer? . f2b0a) (integer-valued? . f2b09) (integer->char . f2b08) (infinite? . f2b07) (inexact? . f2b06) (inexact . f2b05) (imag-part . f2b04) (gcd . f2b03) (for-each . f2b02) (floor . f2b01) (finite? . f2b00) (expt . f2aff) (exp . f2afe) (exact? . f2afd) (exact-integer-sqrt . f2afc) (exact . f2afb) (even? . f2afa) (error . f2af9) (eqv? . f2af8) (equal? . f2af7) (eq? . f2af6) (dynamic-wind . f2af5) (div0-and-mod0 . f2af4) (mod0 . f2af3) (div0 . f2af2) (div-and-mod . f2af1) (mod . f2af0) (div . f2aef) (denominator . f2aee) (cos . f2aed) (cons . f2aec) (complex? . f2aeb) (char? . f2aea) (char>? . f2ae9) (char>=? . f2ae8) (char=? . f2ae7) (char<? . f2ae6) (char<=? . f2ae5) (char->integer . f2ae4) (ceiling . f2ae3) (call-with-values . f2ae2) (call/cc . f2ae1) (call-with-current-continuation . f2ae0) (cddddr . f2adf) (cdddar . f2ade) (cddadr . f2add) (cddaar . f2adc) (cdaddr . f2adb) (cdadar . f2ada) (cdaadr . f2ad9) (cdaaar . f2ad8) (cadddr . f2ad7) (caddar . f2ad6) (cadadr . f2ad5) (cadaar . f2ad4) (caaddr . f2ad3) (caadar . f2ad2) (caaadr . f2ad1) (caaaar . f2ad0) (cdddr . f2acf) (cddar . f2ace) (cdadr . f2acd) (cdaar . f2acc) (caddr . f2acb) (cadar . f2aca) (caadr . f2ac9) (caaar . f2ac8) (cddr . f2ac7) (cdar . f2ac6) (cadr . f2ac5) (caar . f2ac4) (cdr . f2ac3) (car . f2ac2) (boolean? . f2ac1) (boolean=? . f2ac0) (atan . f2abf) (assertion-violation . f2abe) (asin . f2abd) (apply . f2abc) (append . f2abb) (angle . f2aba) (acos . f2ab9) (abs . f2ab8) (/ . f2ab7) (* . f2ab6) (- . f2ab5) (+ . f2ab4) (>= . f2ab3) (> . f2ab2) (= . f2ab1) (<= . f2ab0) (< . f2aaf) (library . f2aae) (&no-nans . f2aad) (&no-infinities . f2aac) (&i/o-encoding . f2aab) (&i/o-decoding . f2aaa) (&i/o-port . f2aa9) (&i/o-file-does-not-exist . f2aa8) (&i/o-file-already-exists . f2aa7) (&i/o-file-is-read-only . f2aa6) (&i/o-file-protection . f2aa5) (&i/o-filename . f2aa4) (&i/o-invalid-position . f2aa3) (&i/o-write . f2aa2) (&i/o-read . f2aa1) (&i/o . f2aa0) (&undefined . f2a9f) (&syntax . f2a9e) (&lexical . f2a9d) (&implementation-restriction . f2a9c) (&non-continuable . f2a9b) (&who . f2a9a) (&irritants . f2a99) (&assertion . f2a98) (&violation . f2a97) (&error . f2a96) (&serious . f2a95) (&warning . f2a94) (&message . f2a93) (&condition . f2a92) (define-condition-type . f2a91) (define-enumeration . f2a90) (define-record-type . f2a8f) (parent-rtd . f2a8e) (nongenerative . f2a8d) (opaque . f2a8c) (sealed . f2a8b) (protocol . f2a8a) (parent . f2a89) (immutable . f2a88) (mutable . f2a87) (fields . f2a86) (error-handling-mode . f2a85) (file-options . f2a84) (buffer-mode . f2a83) (eol-style . f2a82) (guard . f2a81) (unsyntax-splicing . f2a7e) (unsyntax . f2a7d) (unquote-splicing . f2a7c) (unquote . f2a7b) (_ . f2a7a) (else . f2a79) (=> . f2a78) (... . f2a77) (assert . f2a76) (endianness . f2a75) (time . f2a73) (do . f2a72) (cond . f2a71) (let* . f2a70) (let*-values . f2a6f) (let-values . f2a6e) (identifier-syntax . f2a6d) (with-syntax . f2a6c) (quasisyntax . f2a6b) (quasiquote . f2a6a) (syntax-rules . f2a69) (include . f2a68) (record-constructor-descriptor . f2a66) (record-type-descriptor . f2a65) (case . f2a64) (unless . f2a62) (when . f2a61) (or . f2a60) (and . f2a5f) (if . f2a5e) (let . f2a5d) (letrec* . f2a5c) (letrec . f2a5b) (case-lambda . f2a59) (lambda . f2a58) (syntax . f2a57) (syntax-case . f2a56) (quote . f2a55) (letrec-syntax . f2a53) (let-syntax . f2a52) (set! . f2a51) (import . f2a50) (begin . f2a4f) (define-syntax . f2a4d) (define . f2a4c)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2df3 '(psyntax null-environment-5) '() '() '() '() '((make-promise . f2c4f) (unquote-splicing . f2a7c) (unquote . f2a7b) (_ . f2a7a) (else . f2a79) (=> . f2a78) (... . f2a77) (delay . f2a74) (do . f2a72) (cond . f2a71) (let* . f2a70) (quasiquote . f2a6a) (syntax-rules . f2a69) (case . f2a64) (or . f2a60) (and . f2a5f) (if . f2a5e) (let . f2a5d) (letrec . f2a5b) (lambda . f2a58) (quote . f2a55) (letrec-syntax . f2a53) (let-syntax . f2a52) (set! . f2a51) (begin . f2a4f) (define-syntax . f2a4d) (define . f2a4c)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2df4 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . f2d00) (string-ci>=? . f2cff) (string-ci=? . f2cfe) (string-ci<? . f2cfd) (string-ci<=? . f2cfc) (char-whitespace? . f2cfb) (char-upper-case? . f2cfa) (char-numeric? . f2cf8) (char-lower-case? . f2cf7) (char-upcase . f2cf5) (char-downcase . f2cf2) (char-ci>? . f2cf1) (char-ci>=? . f2cf0) (char-ci=? . f2cef) (char-ci<? . f2cee) (char-ci<=? . f2ced) (char-alphabetic? . f2cec) (call-with-output-file . f2cc0) (call-with-input-file . f2cbf) (write-char . f2cbe) (write . f2cbd) (with-output-to-file . f2cbc) (with-input-from-file . f2cbb) (read-char . f2cba) (read . f2cb9) (peek-char . f2cb8) (open-output-file . f2cb7) (open-input-file . f2cb6) (newline . f2cb5) (display . f2cb4) (close-output-port . f2cb3) (close-input-port . f2cb2) (eof-object . f2cb0) (current-output-port . f2cae) (current-input-port . f2cad) (output-port? . f2cac) (input-port? . f2cab) (scheme-report-environment . fe39) (quotient . f2c55) (null-environment . fe37) (remainder . f2c54) (modulo . f2c53) (inexact->exact . f2c52) (force . f2c51) (exact->inexact . f2c50) (make-promise . f2c4f) (string-fill! . f2c4d) (string-set! . f2c4c) (set-cdr! . f2c4b) (set-car! . f2c4a) (memv . f2c44) (memq . f2c43) (member . f2c41) (assv . f2c39) (assq . f2c38) (assoc . f2c36) (eval . fe3d) (zero? . f2b50) (vector? . f2b4f) (vector-set! . f2b4e) (vector-ref . f2b4d) (vector-length . f2b4b) (vector-fill! . f2b49) (vector->list . f2b48) (vector . f2b47) (values . f2b46) (truncate . f2b45) (tan . f2b44) (symbol? . f2b43) (symbol->string . f2b41) (substring . f2b40) (string? . f2b3f) (string>? . f2b3e) (string>=? . f2b3d) (string=? . f2b3c) (string<? . f2b3b) (string<=? . f2b3a) (string-ref . f2b39) (string-length . f2b38) (string-copy . f2b36) (string-append . f2b35) (string->symbol . f2b34) (string->number . f2b33) (string->list . f2b32) (string . f2b31) (sqrt . f2b30) (sin . f2b2f) (round . f2b2e) (reverse . f2b2d) (real? . f2b2c) (real-part . f2b2a) (rationalize . f2b29) (rational? . f2b28) (procedure? . f2b26) (positive? . f2b25) (pair? . f2b24) (odd? . f2b23) (numerator . f2b22) (number? . f2b21) (number->string . f2b20) (not . f2b1e) (negative? . f2b1d) (min . f2b1b) (max . f2b1a) (map . f2b19) (make-vector . f2b18) (make-string . f2b17) (make-rectangular . f2b16) (make-polar . f2b15) (magnitude . f2b14) (log . f2b13) (list? . f2b12) (list-tail . f2b11) (list-ref . f2b10) (list->vector . f2b0f) (list->string . f2b0e) (list . f2b0d) (length . f2b0c) (lcm . f2b0b) (integer? . f2b0a) (integer->char . f2b08) (inexact? . f2b06) (imag-part . f2b04) (gcd . f2b03) (for-each . f2b02) (floor . f2b01) (expt . f2aff) (exp . f2afe) (exact? . f2afd) (even? . f2afa) (eqv? . f2af8) (equal? . f2af7) (eq? . f2af6) (dynamic-wind . f2af5) (denominator . f2aee) (cos . f2aed) (cons . f2aec) (complex? . f2aeb) (char? . f2aea) (char>? . f2ae9) (char>=? . f2ae8) (char=? . f2ae7) (char<? . f2ae6) (char<=? . f2ae5) (char->integer . f2ae4) (ceiling . f2ae3) (call-with-values . f2ae2) (call-with-current-continuation . f2ae0) (cddddr . f2adf) (cdddar . f2ade) (cddadr . f2add) (cddaar . f2adc) (cdaddr . f2adb) (cdadar . f2ada) (cdaadr . f2ad9) (cdaaar . f2ad8) (cadddr . f2ad7) (caddar . f2ad6) (cadadr . f2ad5) (cadaar . f2ad4) (caaddr . f2ad3) (caadar . f2ad2) (caaadr . f2ad1) (caaaar . f2ad0) (cdddr . f2acf) (cddar . f2ace) (cdadr . f2acd) (cdaar . f2acc) (caddr . f2acb) (cadar . f2aca) (caadr . f2ac9) (caaar . f2ac8) (cddr . f2ac7) (cdar . f2ac6) (cadr . f2ac5) (caar . f2ac4) (cdr . f2ac3) (car . f2ac2) (boolean? . f2ac1) (atan . f2abf) (asin . f2abd) (apply . f2abc) (append . f2abb) (angle . f2aba) (acos . f2ab9) (abs . f2ab8) (/ . f2ab7) (* . f2ab6) (- . f2ab5) (+ . f2ab4) (>= . f2ab3) (> . f2ab2) (= . f2ab1) (<= . f2ab0) (< . f2aaf) (unquote-splicing . f2a7c) (unquote . f2a7b) (else . f2a79) (=> . f2a78) (... . f2a77) (delay . f2a74) (do . f2a72) (cond . f2a71) (let* . f2a70) (quasiquote . f2a6a) (syntax-rules . f2a69) (case . f2a64) (or . f2a60) (and . f2a5f) (if . f2a5e) (let . f2a5d) (letrec . f2a5b) (lambda . f2a58) (quote . f2a55) (letrec-syntax . f2a53) (let-syntax . f2a52) (set! . f2a51) (begin . f2a4f) (define-syntax . f2a4d) (define . f2a4c)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2df5 '(psyntax modules) '() '() '() '() '((module . f2a4e)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2df6 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2df7 '(rnrs) '(6) '() '() '() '((regexp? . f2db2) (string-upcase . f2d08) (string-titlecase . f2d07) (string-normalize-nfkd . f2d06) (string-normalize-nfkc . f2d05) (string-normalize-nfd . f2d04) (string-normalize-nfc . f2d03) (string-foldcase . f2d02) (string-downcase . f2d01) (string-ci>? . f2d00) (string-ci>=? . f2cff) (string-ci=? . f2cfe) (string-ci<? . f2cfd) (string-ci<=? . f2cfc) (char-whitespace? . f2cfb) (char-upper-case? . f2cfa) (char-title-case? . f2cf9) (char-numeric? . f2cf8) (char-lower-case? . f2cf7) (char-general-category . f2cf6) (char-upcase . f2cf5) (char-titlecase . f2cf4) (char-foldcase . f2cf3) (char-downcase . f2cf2) (char-ci>? . f2cf1) (char-ci>=? . f2cf0) (char-ci=? . f2cef) (char-ci<? . f2cee) (char-ci<=? . f2ced) (char-alphabetic? . f2cec) (make-variable-transformer . fba8) (identifier? . fe5f) (generate-temporaries . fe4b) (free-identifier=? . fe4d) (syntax->datum . fe63) (datum->syntax . fe61) (bound-identifier=? . fe4f) (record-type-descriptor? . f2ceb) (record-predicate . f2cea) (record-mutator . f2ce9) (record-constructor . f2ce8) (record-accessor . f2ce7) (make-record-type-descriptor . f2ce6) (make-record-constructor-descriptor . f2ce5) (record? . f2ce4) (record-type-uid . f2ce3) (record-type-sealed? . f2ce2) (record-type-parent . f2ce1) (record-type-opaque? . f2ce0) (record-type-name . f2cdf) (record-type-generative? . f2cde) (record-type-field-names . f2cdd) (record-rtd . f2cdc) (record-field-mutable? . f2cdb) (delete-file . f2cda) (file-exists? . f2cd9) (vector-sort! . f2cd8) (vector-sort . f2cd7) (list-sort . f2cd6) (symbol-hash . f2cd5) (string-ci-hash . f2cd4) (string-hash . f2cd3) (equal-hash . f2cd2) (hashtable-equivalence-function . f2cd1) (make-hashtable . f2cd0) (hashtable-hash-function . f2ccf) (make-eqv-hashtable . f2cce) (make-eq-hashtable . f2ccd) (hashtable? . f2ccc) (hashtable-update! . f2ccb) (hashtable-size . f2cca) (hashtable-set! . f2cc9) (hashtable-ref . f2cc8) (hashtable-mutable? . f2cc7) (hashtable-keys . f2cc6) (hashtable-entries . f2cc5) (hashtable-delete! . f2cc4) (hashtable-copy . f2cc3) (hashtable-contains? . f2cc2) (hashtable-clear! . f2cc1) (call-with-output-file . f2cc0) (call-with-input-file . f2cbf) (write-char . f2cbe) (write . f2cbd) (with-output-to-file . f2cbc) (with-input-from-file . f2cbb) (read-char . f2cba) (read . f2cb9) (peek-char . f2cb8) (open-output-file . f2cb7) (open-input-file . f2cb6) (newline . f2cb5) (display . f2cb4) (close-output-port . f2cb3) (close-input-port . f2cb2) (eof-object? . f2cb1) (eof-object . f2cb0) (current-error-port . f2caf) (current-output-port . f2cae) (current-input-port . f2cad) (output-port? . f2cac) (input-port? . f2cab) (utf-8-codec . f2caa) (utf-16-codec . f2ca9) (transcoder-error-handling-mode . f2ca8) (transcoder-eol-style . f2ca7) (transcoder-codec . f2ca6) (transcoded-port . f2ca5) (textual-port? . f2ca4) (string->bytevector . f2ca3) (standard-output-port . f2ca2) (standard-input-port . f2ca1) (standard-error-port . f2ca0) (set-port-position! . f2c9f) (put-u8 . f2c9e) (put-string . f2c9d) (put-datum . f2c9c) (put-char . f2c9b) (put-bytevector . f2c9a) (port? . f2c99) (port-transcoder . f2c98) (port-position . f2c97) (port-has-set-port-position!? . f2c96) (port-has-port-position? . f2c95) (port-eof? . f2c94) (output-port-buffer-mode . f2c93) (open-string-output-port . f2c92) (open-string-input-port . f2c91) (open-file-output-port . f2c90) (open-file-input/output-port . f2c8f) (open-file-input-port . f2c8e) (open-bytevector-output-port . f2c8d) (open-bytevector-input-port . f2c8c) (native-transcoder . f2c8b) (native-eol-style . f2c8a) (make-transcoder . f2c89) (latin-1-codec . f2c88) (make-i/o-write-error . f2c87) (make-i/o-read-error . f2c86) (make-i/o-port-error . f2c85) (make-i/o-invalid-position-error . f2c84) (make-i/o-filename-error . f2c83) (make-i/o-file-protection-error . f2c82) (make-i/o-file-is-read-only-error . f2c81) (make-i/o-file-does-not-exist-error . f2c80) (make-i/o-file-already-exists-error . f2c7f) (make-i/o-error . f2c7e) (make-i/o-encoding-error . f2c7d) (make-i/o-decoding-error . f2c7c) (make-custom-textual-output-port . f2c7b) (make-custom-textual-input/output-port . f2c7a) (make-custom-textual-input-port . f2c79) (make-custom-binary-output-port . f2c78) (make-custom-binary-input/output-port . f2c77) (make-custom-binary-input-port . f2c76) (make-bytevector . f2c75) (lookahead-u8 . f2c74) (lookahead-char . f2c73) (i/o-write-error? . f2c72) (i/o-read-error? . f2c71) (i/o-port-error? . f2c70) (i/o-invalid-position-error? . f2c6f) (i/o-filename-error? . f2c6e) (i/o-file-protection-error? . f2c6d) (i/o-file-is-read-only-error? . f2c6c) (i/o-file-does-not-exist-error? . f2c6b) (i/o-file-already-exists-error? . f2c6a) (i/o-error? . f2c69) (i/o-error-position . f2c68) (i/o-error-port . f2c67) (i/o-error-filename . f2c66) (i/o-encoding-error? . f2c65) (i/o-encoding-error-char . f2c64) (i/o-decoding-error? . f2c63) (get-u8 . f2c62) (get-string-n! . f2c61) (get-string-n . f2c60) (get-string-all . f2c5f) (get-line . f2c5e) (get-datum . f2c5d) (get-char . f2c5c) (get-bytevector-some . f2c5b) (get-bytevector-n! . f2c5a) (get-bytevector-n . f2c59) (get-bytevector-all . f2c58) (flush-output-port . f2c57) (close-port . f2c56) (exit . f2c4e) (command-line . f28e0) (remove . f2c49) (remv . f2c48) (remp . f2c47) (remq . f2c46) (partition . f2c45) (memv . f2c44) (memq . f2c43) (memp . f2c42) (member . f2c41) (exists . f2c40) (for-all . f2c3f) (fold-right . f2c3e) (fold-left . f2c3d) (find . f2c3c) (filter . f2c3b) (cons* . f2c3a) (assv . f2c39) (assq . f2c38) (assp . f2c37) (assoc . f2c36) (call-with-string-output-port . f2c35) (call-with-port . f2c34) (call-with-bytevector-output-port . f2c33) (bytevector->string . f2c32) (buffer-mode? . f2c31) (binary-port? . f2c30) (with-exception-handler . f2c2f) (raise-continuable . f2c2e) (raise . f2c2d) (make-enumeration . f2c2c) (enum-set=? . f2c2b) (enum-set-universe . f2c2a) (enum-set-union . f2c29) (enum-set-subset? . f2c28) (enum-set-projection . f2c27) (enum-set-member? . f2c26) (enum-set-intersection . f2c25) (enum-set-indexer . f2c24) (enum-set-difference . f2c23) (enum-set-constructor . f2c22) (enum-set-complement . f2c21) (enum-set->list . f2c20) (who-condition? . f2c1f) (warning? . f2c1e) (violation? . f2c1d) (undefined-violation? . f2c1c) (syntax-violation? . f2c1b) (syntax-violation-subform . f2c1a) (syntax-violation-form . f2c19) (syntax-violation . fe5d) (simple-conditions . f2c18) (serious-condition? . f2c17) (non-continuable-violation? . f2c16) (message-condition? . f2c15) (make-who-condition . f2c14) (make-warning . f2c13) (make-violation . f2c12) (make-undefined-violation . f2c11) (make-syntax-violation . f2c10) (make-serious-condition . f2c0f) (make-non-continuable-violation . f2c0e) (make-message-condition . f2c0d) (make-lexical-violation . f2c0c) (make-irritants-condition . f2c0b) (make-implementation-restriction-violation . f2c0a) (make-error . f2c09) (make-assertion-violation . f2c08) (lexical-violation? . f2c07) (irritants-condition? . f2c06) (implementation-restriction-violation? . f2c05) (error? . f2c04) (condition-who . f2c03) (condition-predicate . f2c02) (condition-message . f2c01) (condition-irritants . f2c00) (condition-accessor . f2bff) (condition . f2bfe) (assertion-violation? . f2bfd) (condition? . f2bfc) (utf32->string . f2bfb) (utf16->string . f2bfa) (utf8->string . f2bf9) (uint-list->bytevector . f2bf8) (u8-list->bytevector . f2bf7) (string->utf8 . f2bf6) (string->utf32 . f2bf5) (string->utf16 . f2bf4) (sint-list->bytevector . f2bf3) (native-endianness . f2bf2) (bytevector? . f2bf1) (bytevector=? . f2bf0) (bytevector-uint-set! . f2bef) (bytevector-uint-ref . f2bee) (bytevector-u8-set! . f2bed) (bytevector-u8-ref . f2bec) (bytevector-u64-set! . f2beb) (bytevector-u64-ref . f2bea) (bytevector-u64-native-set! . f2be9) (bytevector-u64-native-ref . f2be8) (bytevector-u32-set! . f2be7) (bytevector-u32-ref . f2be6) (bytevector-u32-native-set! . f2be5) (bytevector-u32-native-ref . f2be4) (bytevector-u16-set! . f2be3) (bytevector-u16-ref . f2be2) (bytevector-u16-native-set! . f2be1) (bytevector-u16-native-ref . f2be0) (bytevector-sint-set! . f2bdf) (bytevector-sint-ref . f2bde) (bytevector-s8-set! . f2bdd) (bytevector-s8-ref . f2bdc) (bytevector-s64-set! . f2bdb) (bytevector-s64-ref . f2bda) (bytevector-s64-native-set! . f2bd9) (bytevector-s64-native-ref . f2bd8) (bytevector-s32-set! . f2bd7) (bytevector-s32-ref . f2bd6) (bytevector-s32-native-set! . f2bd5) (bytevector-s32-native-ref . f2bd4) (bytevector-s16-set! . f2bd3) (bytevector-s16-ref . f2bd2) (bytevector-s16-native-set! . f2bd1) (bytevector-s16-native-ref . f2bd0) (bytevector-length . f2bcf) (bytevector-ieee-single-ref . f2bce) (bytevector-ieee-single-set! . f2bcd) (bytevector-ieee-single-native-set! . f2bcc) (bytevector-ieee-single-native-ref . f2bcb) (bytevector-ieee-double-set! . f2bca) (bytevector-ieee-double-ref . f2bc9) (bytevector-ieee-double-native-set! . f2bc8) (bytevector-ieee-double-native-ref . f2bc7) (bytevector-fill! . f2bc6) (bytevector-copy! . f2bc5) (bytevector-copy . f2bc4) (bytevector->uint-list . f2bc3) (bytevector->u8-list . f2bc2) (bytevector->sint-list . f2bc1) (no-nans-violation? . f2bc0) (no-infinities-violation? . f2bbf) (make-no-nans-violation . f2bbe) (make-no-infinities-violation . f2bbd) (real->flonum . f2bbc) (flzero? . f2bbb) (fltruncate . f2bba) (fltan . f2bb9) (flsqrt . f2bb8) (flsin . f2bb7) (flround . f2bb6) (flpositive? . f2bb5) (flonum? . f2bb4) (flodd? . f2bb3) (flnumerator . f2bb2) (flnegative? . f2bb1) (flnan? . f2bb0) (flmod0 . f2baf) (flmod . f2bae) (flmin . f2bad) (flmax . f2bac) (fllog . f2bab) (flinteger? . f2baa) (flinfinite? . f2ba9) (flfloor . f2ba8) (flfinite? . f2ba7) (flexpt . f2ba6) (flexp . f2ba5) (fleven? . f2ba4) (fldiv0-and-mod0 . f2ba3) (fldiv0 . f2ba2) (fldiv-and-mod . f2ba1) (fldiv . f2ba0) (fldenominator . f2b9f) (flcos . f2b9e) (flceiling . f2b9d) (flatan . f2b9c) (flasin . f2b9b) (flacos . f2b9a) (flabs . f2b99) (fl>? . f2b98) (fl>=? . f2b97) (fl=? . f2b96) (fl<? . f2b95) (fl<=? . f2b94) (fl/ . f2b93) (fl- . f2b92) (fl+ . f2b91) (fl* . f2b90) (fixnum->flonum . f2b8f) (fxzero? . f2b8e) (fxxor . f2b8d) (fxrotate-bit-field . f2b8c) (fxreverse-bit-field . f2b8b) (fxpositive? . f2b8a) (fxodd? . f2b89) (fxnot . f2b88) (fxnegative? . f2b87) (fxmod0 . f2b86) (fxmod . f2b85) (fxmin . f2b84) (fxmax . f2b83) (fxlength . f2b82) (fxior . f2b81) (fxif . f2b80) (fxfirst-bit-set . f2b7f) (fxeven? . f2b7e) (fxdiv0-and-mod0 . f2b7d) (fxdiv0 . f2b7c) (fxdiv-and-mod . f2b7b) (fxdiv . f2b7a) (fxcopy-bit-field . f2b79) (fxcopy-bit . f2b78) (fxbit-set? . f2b77) (fxbit-field . f2b76) (fxbit-count . f2b75) (fxarithmetic-shift-right . f2b74) (fxarithmetic-shift-left . f2b73) (fxarithmetic-shift . f2b72) (fxand . f2b71) (fx>? . f2b70) (fx>=? . f2b6f) (fx=? . f2b6e) (fx<? . f2b6d) (fx<=? . f2b6c) (fx-/carry . f2b6b) (fx- . f2b6a) (fx+/carry . f2b69) (fx+ . f2b68) (fx*/carry . f2b67) (fx* . f2b66) (greatest-fixnum . f2b65) (least-fixnum . f2b64) (fixnum-width . f2b63) (fixnum? . f2b62) (bitwise-rotate-bit-field . f2b61) (bitwise-reverse-bit-field . f2b60) (bitwise-length . f2b5f) (bitwise-if . f2b5e) (bitwise-first-bit-set . f2b5d) (bitwise-copy-bit-field . f2b5c) (bitwise-copy-bit . f2b5b) (bitwise-bit-set? . f2b5a) (bitwise-bit-field . f2b59) (bitwise-bit-count . f2b58) (bitwise-xor . f2b57) (bitwise-ior . f2b56) (bitwise-and . f2b55) (bitwise-not . f2b54) (bitwise-arithmetic-shift-right . f2b53) (bitwise-arithmetic-shift-left . f2b52) (bitwise-arithmetic-shift . f2b51) (zero? . f2b50) (vector? . f2b4f) (vector-set! . f2b4e) (vector-ref . f2b4d) (vector-map . f2b4c) (vector-length . f2b4b) (vector-for-each . f2b4a) (vector-fill! . f2b49) (vector->list . f2b48) (vector . f2b47) (values . f2b46) (truncate . f2b45) (tan . f2b44) (symbol? . f2b43) (symbol=? . f2b42) (symbol->string . f2b41) (substring . f2b40) (string? . f2b3f) (string>? . f2b3e) (string>=? . f2b3d) (string=? . f2b3c) (string<? . f2b3b) (string<=? . f2b3a) (string-ref . f2b39) (string-length . f2b38) (string-for-each . f2b37) (string-copy . f2b36) (string-append . f2b35) (string->symbol . f2b34) (string->number . f2b33) (string->list . f2b32) (string . f2b31) (sqrt . f2b30) (sin . f2b2f) (round . f2b2e) (reverse . f2b2d) (real? . f2b2c) (real-valued? . f2b2b) (real-part . f2b2a) (rationalize . f2b29) (rational? . f2b28) (rational-valued? . f2b27) (procedure? . f2b26) (positive? . f2b25) (pair? . f2b24) (odd? . f2b23) (numerator . f2b22) (number? . f2b21) (number->string . f2b20) (null? . f2b1f) (not . f2b1e) (negative? . f2b1d) (nan? . f2b1c) (min . f2b1b) (max . f2b1a) (map . f2b19) (make-vector . f2b18) (make-string . f2b17) (make-rectangular . f2b16) (make-polar . f2b15) (magnitude . f2b14) (log . f2b13) (list? . f2b12) (list-tail . f2b11) (list-ref . f2b10) (list->vector . f2b0f) (list->string . f2b0e) (list . f2b0d) (length . f2b0c) (lcm . f2b0b) (integer? . f2b0a) (integer-valued? . f2b09) (integer->char . f2b08) (infinite? . f2b07) (inexact? . f2b06) (inexact . f2b05) (imag-part . f2b04) (gcd . f2b03) (for-each . f2b02) (floor . f2b01) (finite? . f2b00) (expt . f2aff) (exp . f2afe) (exact? . f2afd) (exact-integer-sqrt . f2afc) (exact . f2afb) (even? . f2afa) (error . f2af9) (eqv? . f2af8) (equal? . f2af7) (eq? . f2af6) (dynamic-wind . f2af5) (div0-and-mod0 . f2af4) (mod0 . f2af3) (div0 . f2af2) (div-and-mod . f2af1) (mod . f2af0) (div . f2aef) (denominator . f2aee) (cos . f2aed) (cons . f2aec) (complex? . f2aeb) (char? . f2aea) (char>? . f2ae9) (char>=? . f2ae8) (char=? . f2ae7) (char<? . f2ae6) (char<=? . f2ae5) (char->integer . f2ae4) (ceiling . f2ae3) (call-with-values . f2ae2) (call/cc . f2ae1) (call-with-current-continuation . f2ae0) (cddddr . f2adf) (cdddar . f2ade) (cddadr . f2add) (cddaar . f2adc) (cdaddr . f2adb) (cdadar . f2ada) (cdaadr . f2ad9) (cdaaar . f2ad8) (cadddr . f2ad7) (caddar . f2ad6) (cadadr . f2ad5) (cadaar . f2ad4) (caaddr . f2ad3) (caadar . f2ad2) (caaadr . f2ad1) (caaaar . f2ad0) (cdddr . f2acf) (cddar . f2ace) (cdadr . f2acd) (cdaar . f2acc) (caddr . f2acb) (cadar . f2aca) (caadr . f2ac9) (caaar . f2ac8) (cddr . f2ac7) (cdar . f2ac6) (cadr . f2ac5) (caar . f2ac4) (cdr . f2ac3) (car . f2ac2) (boolean? . f2ac1) (boolean=? . f2ac0) (atan . f2abf) (assertion-violation . f2abe) (asin . f2abd) (apply . f2abc) (append . f2abb) (angle . f2aba) (acos . f2ab9) (abs . f2ab8) (/ . f2ab7) (* . f2ab6) (- . f2ab5) (+ . f2ab4) (>= . f2ab3) (> . f2ab2) (= . f2ab1) (<= . f2ab0) (< . f2aaf) (&no-nans . f2aad) (&no-infinities . f2aac) (&i/o-encoding . f2aab) (&i/o-decoding . f2aaa) (&i/o-port . f2aa9) (&i/o-file-does-not-exist . f2aa8) (&i/o-file-already-exists . f2aa7) (&i/o-file-is-read-only . f2aa6) (&i/o-file-protection . f2aa5) (&i/o-filename . f2aa4) (&i/o-invalid-position . f2aa3) (&i/o-write . f2aa2) (&i/o-read . f2aa1) (&i/o . f2aa0) (&undefined . f2a9f) (&syntax . f2a9e) (&lexical . f2a9d) (&implementation-restriction . f2a9c) (&non-continuable . f2a9b) (&who . f2a9a) (&irritants . f2a99) (&assertion . f2a98) (&violation . f2a97) (&error . f2a96) (&serious . f2a95) (&warning . f2a94) (&message . f2a93) (&condition . f2a92) (define-condition-type . f2a91) (define-enumeration . f2a90) (define-record-type . f2a8f) (parent-rtd . f2a8e) (nongenerative . f2a8d) (opaque . f2a8c) (sealed . f2a8b) (protocol . f2a8a) (parent . f2a89) (immutable . f2a88) (mutable . f2a87) (fields . f2a86) (error-handling-mode . f2a85) (file-options . f2a84) (buffer-mode . f2a83) (eol-style . f2a82) (guard . f2a81) (unsyntax-splicing . f2a7e) (unsyntax . f2a7d) (unquote-splicing . f2a7c) (unquote . f2a7b) (_ . f2a7a) (else . f2a79) (=> . f2a78) (... . f2a77) (assert . f2a76) (endianness . f2a75) (do . f2a72) (cond . f2a71) (let* . f2a70) (let*-values . f2a6f) (let-values . f2a6e) (identifier-syntax . f2a6d) (with-syntax . f2a6c) (quasisyntax . f2a6b) (quasiquote . f2a6a) (syntax-rules . f2a69) (record-constructor-descriptor . f2a66) (record-type-descriptor . f2a65) (case . f2a64) (unless . f2a62) (when . f2a61) (or . f2a60) (and . f2a5f) (if . f2a5e) (let . f2a5d) (letrec* . f2a5c) (letrec . f2a5b) (case-lambda . f2a59) (lambda . f2a58) (syntax . f2a57) (syntax-case . f2a56) (quote . f2a55) (letrec-syntax . f2a53) (let-syntax . f2a52) (set! . f2a51) (begin . f2a4f) (define-syntax . f2a4d) (define . f2a4c)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2df8 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . fe39) (quotient . f2c55) (null-environment . fe37) (remainder . f2c54) (modulo . f2c53) (inexact->exact . f2c52) (force . f2c51) (exact->inexact . f2c50) (make-promise . f2c4f) (delay . f2a74)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2df9 '(rnrs control) '(6) '() '() '() '((do . f2a72) (unless . f2a62) (when . f2a61) (case-lambda . f2a59)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2dfa '(rnrs eval) '(6) '() '() '() '((eval . fe3d) (environment . fe35)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2dfb '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . f2c4b) (set-car! . f2c4a)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2dfc '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . f2c4d) (string-set! . f2c4c)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2dfd '(rnrs programs) '(6) '() '() '() '((exit . f2c4e) (command-line . f28e0)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2dfe '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . fba8) (identifier? . fe5f) (generate-temporaries . fe4b) (free-identifier=? . fe4d) (syntax->datum . fe63) (datum->syntax . fe61) (bound-identifier=? . fe4f) (syntax-violation . fe5d) (unsyntax-splicing . f2a7e) (unsyntax . f2a7d) (_ . f2a7a) (... . f2a77) (with-syntax . f2a6c) (quasisyntax . f2a6b) (syntax . f2a57) (syntax-case . f2a56)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2dff '(rnrs files) '(6) '() '() '() '((delete-file . f2cda) (file-exists? . f2cd9) (make-i/o-write-error . f2c87) (make-i/o-read-error . f2c86) (make-i/o-port-error . f2c85) (make-i/o-invalid-position-error . f2c84) (make-i/o-filename-error . f2c83) (make-i/o-file-protection-error . f2c82) (make-i/o-file-is-read-only-error . f2c81) (make-i/o-file-does-not-exist-error . f2c80) (make-i/o-file-already-exists-error . f2c7f) (make-i/o-error . f2c7e) (i/o-write-error? . f2c72) (i/o-read-error? . f2c71) (i/o-port-error? . f2c70) (i/o-invalid-position-error? . f2c6f) (i/o-filename-error? . f2c6e) (i/o-file-protection-error? . f2c6d) (i/o-file-is-read-only-error? . f2c6c) (i/o-file-does-not-exist-error? . f2c6b) (i/o-file-already-exists-error? . f2c6a) (i/o-error? . f2c69) (i/o-error-position . f2c68) (i/o-error-port . f2c67) (i/o-error-filename . f2c66) (&i/o-port . f2aa9) (&i/o-file-does-not-exist . f2aa8) (&i/o-file-already-exists . f2aa7) (&i/o-file-is-read-only . f2aa6) (&i/o-file-protection . f2aa5) (&i/o-filename . f2aa4) (&i/o-invalid-position . f2aa3) (&i/o-write . f2aa2) (&i/o-read . f2aa1) (&i/o . f2aa0)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e00 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . f2cd8) (vector-sort . f2cd7) (list-sort . f2cd6)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e01 '(rnrs base) '(6) '() '() '() '((zero? . f2b50) (vector? . f2b4f) (vector-set! . f2b4e) (vector-ref . f2b4d) (vector-map . f2b4c) (vector-length . f2b4b) (vector-for-each . f2b4a) (vector-fill! . f2b49) (vector->list . f2b48) (vector . f2b47) (values . f2b46) (truncate . f2b45) (tan . f2b44) (symbol? . f2b43) (symbol=? . f2b42) (symbol->string . f2b41) (substring . f2b40) (string? . f2b3f) (string>? . f2b3e) (string>=? . f2b3d) (string=? . f2b3c) (string<? . f2b3b) (string<=? . f2b3a) (string-ref . f2b39) (string-length . f2b38) (string-for-each . f2b37) (string-copy . f2b36) (string-append . f2b35) (string->symbol . f2b34) (string->number . f2b33) (string->list . f2b32) (string . f2b31) (sqrt . f2b30) (sin . f2b2f) (round . f2b2e) (reverse . f2b2d) (real? . f2b2c) (real-valued? . f2b2b) (real-part . f2b2a) (rationalize . f2b29) (rational? . f2b28) (rational-valued? . f2b27) (procedure? . f2b26) (positive? . f2b25) (pair? . f2b24) (odd? . f2b23) (numerator . f2b22) (number? . f2b21) (number->string . f2b20) (null? . f2b1f) (not . f2b1e) (negative? . f2b1d) (nan? . f2b1c) (min . f2b1b) (max . f2b1a) (map . f2b19) (make-vector . f2b18) (make-string . f2b17) (make-rectangular . f2b16) (make-polar . f2b15) (magnitude . f2b14) (log . f2b13) (list? . f2b12) (list-tail . f2b11) (list-ref . f2b10) (list->vector . f2b0f) (list->string . f2b0e) (list . f2b0d) (length . f2b0c) (lcm . f2b0b) (integer? . f2b0a) (integer-valued? . f2b09) (integer->char . f2b08) (infinite? . f2b07) (inexact? . f2b06) (inexact . f2b05) (imag-part . f2b04) (gcd . f2b03) (for-each . f2b02) (floor . f2b01) (finite? . f2b00) (expt . f2aff) (exp . f2afe) (exact? . f2afd) (exact-integer-sqrt . f2afc) (exact . f2afb) (even? . f2afa) (error . f2af9) (eqv? . f2af8) (equal? . f2af7) (eq? . f2af6) (dynamic-wind . f2af5) (div0-and-mod0 . f2af4) (mod0 . f2af3) (div0 . f2af2) (div-and-mod . f2af1) (mod . f2af0) (div . f2aef) (denominator . f2aee) (cos . f2aed) (cons . f2aec) (complex? . f2aeb) (char? . f2aea) (char>? . f2ae9) (char>=? . f2ae8) (char=? . f2ae7) (char<? . f2ae6) (char<=? . f2ae5) (char->integer . f2ae4) (ceiling . f2ae3) (call-with-values . f2ae2) (call/cc . f2ae1) (call-with-current-continuation . f2ae0) (cddddr . f2adf) (cdddar . f2ade) (cddadr . f2add) (cddaar . f2adc) (cdaddr . f2adb) (cdadar . f2ada) (cdaadr . f2ad9) (cdaaar . f2ad8) (cadddr . f2ad7) (caddar . f2ad6) (cadadr . f2ad5) (cadaar . f2ad4) (caaddr . f2ad3) (caadar . f2ad2) (caaadr . f2ad1) (caaaar . f2ad0) (cdddr . f2acf) (cddar . f2ace) (cdadr . f2acd) (cdaar . f2acc) (caddr . f2acb) (cadar . f2aca) (caadr . f2ac9) (caaar . f2ac8) (cddr . f2ac7) (cdar . f2ac6) (cadr . f2ac5) (caar . f2ac4) (cdr . f2ac3) (car . f2ac2) (boolean? . f2ac1) (boolean=? . f2ac0) (atan . f2abf) (assertion-violation . f2abe) (asin . f2abd) (apply . f2abc) (append . f2abb) (angle . f2aba) (acos . f2ab9) (abs . f2ab8) (/ . f2ab7) (* . f2ab6) (- . f2ab5) (+ . f2ab4) (>= . f2ab3) (> . f2ab2) (= . f2ab1) (<= . f2ab0) (< . f2aaf) (unquote-splicing . f2a7c) (unquote . f2a7b) (_ . f2a7a) (else . f2a79) (=> . f2a78) (... . f2a77) (assert . f2a76) (cond . f2a71) (let* . f2a70) (let*-values . f2a6f) (let-values . f2a6e) (identifier-syntax . f2a6d) (quasiquote . f2a6a) (syntax-rules . f2a69) (case . f2a64) (or . f2a60) (and . f2a5f) (if . f2a5e) (let . f2a5d) (letrec* . f2a5c) (letrec . f2a5b) (lambda . f2a58) (quote . f2a55) (letrec-syntax . f2a53) (let-syntax . f2a52) (set! . f2a51) (begin . f2a4f) (define-syntax . f2a4d) (define . f2a4c)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e02 '(rnrs lists) '(6) '() '() '() '((remove . f2c49) (remv . f2c48) (remp . f2c47) (remq . f2c46) (partition . f2c45) (memv . f2c44) (memq . f2c43) (memp . f2c42) (member . f2c41) (exists . f2c40) (for-all . f2c3f) (fold-right . f2c3e) (fold-left . f2c3d) (find . f2c3c) (filter . f2c3b) (cons* . f2c3a) (assv . f2c39) (assq . f2c38) (assp . f2c37) (assoc . f2c36)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e03 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . f2cc0) (call-with-input-file . f2cbf) (write-char . f2cbe) (write . f2cbd) (with-output-to-file . f2cbc) (with-input-from-file . f2cbb) (read-char . f2cba) (read . f2cb9) (peek-char . f2cb8) (open-output-file . f2cb7) (open-input-file . f2cb6) (newline . f2cb5) (display . f2cb4) (close-output-port . f2cb3) (close-input-port . f2cb2) (eof-object? . f2cb1) (eof-object . f2cb0) (current-error-port . f2caf) (current-output-port . f2cae) (current-input-port . f2cad) (output-port? . f2cac) (input-port? . f2cab) (make-i/o-write-error . f2c87) (make-i/o-read-error . f2c86) (make-i/o-port-error . f2c85) (make-i/o-invalid-position-error . f2c84) (make-i/o-filename-error . f2c83) (make-i/o-file-protection-error . f2c82) (make-i/o-file-is-read-only-error . f2c81) (make-i/o-file-does-not-exist-error . f2c80) (make-i/o-file-already-exists-error . f2c7f) (make-i/o-error . f2c7e) (i/o-write-error? . f2c72) (i/o-read-error? . f2c71) (i/o-port-error? . f2c70) (i/o-invalid-position-error? . f2c6f) (i/o-filename-error? . f2c6e) (i/o-file-protection-error? . f2c6d) (i/o-file-is-read-only-error? . f2c6c) (i/o-file-does-not-exist-error? . f2c6b) (i/o-file-already-exists-error? . f2c6a) (i/o-error? . f2c69) (i/o-error-position . f2c68) (i/o-error-port . f2c67) (i/o-error-filename . f2c66) (&i/o-port . f2aa9) (&i/o-file-does-not-exist . f2aa8) (&i/o-file-already-exists . f2aa7) (&i/o-file-is-read-only . f2aa6) (&i/o-file-protection . f2aa5) (&i/o-filename . f2aa4) (&i/o-invalid-position . f2aa3) (&i/o-write . f2aa2) (&i/o-read . f2aa1) (&i/o . f2aa0)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e04 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . f2c75) (utf32->string . f2bfb) (utf16->string . f2bfa) (utf8->string . f2bf9) (uint-list->bytevector . f2bf8) (u8-list->bytevector . f2bf7) (string->utf8 . f2bf6) (string->utf32 . f2bf5) (string->utf16 . f2bf4) (sint-list->bytevector . f2bf3) (native-endianness . f2bf2) (bytevector? . f2bf1) (bytevector=? . f2bf0) (bytevector-uint-set! . f2bef) (bytevector-uint-ref . f2bee) (bytevector-u8-set! . f2bed) (bytevector-u8-ref . f2bec) (bytevector-u64-set! . f2beb) (bytevector-u64-ref . f2bea) (bytevector-u64-native-set! . f2be9) (bytevector-u64-native-ref . f2be8) (bytevector-u32-set! . f2be7) (bytevector-u32-ref . f2be6) (bytevector-u32-native-set! . f2be5) (bytevector-u32-native-ref . f2be4) (bytevector-u16-set! . f2be3) (bytevector-u16-ref . f2be2) (bytevector-u16-native-set! . f2be1) (bytevector-u16-native-ref . f2be0) (bytevector-sint-set! . f2bdf) (bytevector-sint-ref . f2bde) (bytevector-s8-set! . f2bdd) (bytevector-s8-ref . f2bdc) (bytevector-s64-set! . f2bdb) (bytevector-s64-ref . f2bda) (bytevector-s64-native-set! . f2bd9) (bytevector-s64-native-ref . f2bd8) (bytevector-s32-set! . f2bd7) (bytevector-s32-ref . f2bd6) (bytevector-s32-native-set! . f2bd5) (bytevector-s32-native-ref . f2bd4) (bytevector-s16-set! . f2bd3) (bytevector-s16-ref . f2bd2) (bytevector-s16-native-set! . f2bd1) (bytevector-s16-native-ref . f2bd0) (bytevector-length . f2bcf) (bytevector-ieee-single-ref . f2bce) (bytevector-ieee-single-set! . f2bcd) (bytevector-ieee-single-native-set! . f2bcc) (bytevector-ieee-single-native-ref . f2bcb) (bytevector-ieee-double-set! . f2bca) (bytevector-ieee-double-ref . f2bc9) (bytevector-ieee-double-native-set! . f2bc8) (bytevector-ieee-double-native-ref . f2bc7) (bytevector-fill! . f2bc6) (bytevector-copy! . f2bc5) (bytevector-copy . f2bc4) (bytevector->uint-list . f2bc3) (bytevector->u8-list . f2bc2) (bytevector->sint-list . f2bc1) (endianness . f2a75)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e05 '(rnrs unicode) '(6) '() '() '() '((string-upcase . f2d08) (string-titlecase . f2d07) (string-normalize-nfkd . f2d06) (string-normalize-nfkc . f2d05) (string-normalize-nfd . f2d04) (string-normalize-nfc . f2d03) (string-foldcase . f2d02) (string-downcase . f2d01) (string-ci>? . f2d00) (string-ci>=? . f2cff) (string-ci=? . f2cfe) (string-ci<? . f2cfd) (string-ci<=? . f2cfc) (char-whitespace? . f2cfb) (char-upper-case? . f2cfa) (char-title-case? . f2cf9) (char-numeric? . f2cf8) (char-lower-case? . f2cf7) (char-general-category . f2cf6) (char-upcase . f2cf5) (char-titlecase . f2cf4) (char-foldcase . f2cf3) (char-downcase . f2cf2) (char-ci>? . f2cf1) (char-ci>=? . f2cf0) (char-ci=? . f2cef) (char-ci<? . f2cee) (char-ci<=? . f2ced) (char-alphabetic? . f2cec)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e06 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . f2c2f) (raise-continuable . f2c2e) (raise . f2c2d) (guard . f2a81) (else . f2a79) (=> . f2a78)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e07 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . f2b61) (bitwise-reverse-bit-field . f2b60) (bitwise-length . f2b5f) (bitwise-if . f2b5e) (bitwise-first-bit-set . f2b5d) (bitwise-copy-bit-field . f2b5c) (bitwise-copy-bit . f2b5b) (bitwise-bit-set? . f2b5a) (bitwise-bit-field . f2b59) (bitwise-bit-count . f2b58) (bitwise-xor . f2b57) (bitwise-ior . f2b56) (bitwise-and . f2b55) (bitwise-not . f2b54) (bitwise-arithmetic-shift-right . f2b53) (bitwise-arithmetic-shift-left . f2b52) (bitwise-arithmetic-shift . f2b51)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e08 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . f2b8e) (fxxor . f2b8d) (fxrotate-bit-field . f2b8c) (fxreverse-bit-field . f2b8b) (fxpositive? . f2b8a) (fxodd? . f2b89) (fxnot . f2b88) (fxnegative? . f2b87) (fxmod0 . f2b86) (fxmod . f2b85) (fxmin . f2b84) (fxmax . f2b83) (fxlength . f2b82) (fxior . f2b81) (fxif . f2b80) (fxfirst-bit-set . f2b7f) (fxeven? . f2b7e) (fxdiv0-and-mod0 . f2b7d) (fxdiv0 . f2b7c) (fxdiv-and-mod . f2b7b) (fxdiv . f2b7a) (fxcopy-bit-field . f2b79) (fxcopy-bit . f2b78) (fxbit-set? . f2b77) (fxbit-field . f2b76) (fxbit-count . f2b75) (fxarithmetic-shift-right . f2b74) (fxarithmetic-shift-left . f2b73) (fxarithmetic-shift . f2b72) (fxand . f2b71) (fx>? . f2b70) (fx>=? . f2b6f) (fx=? . f2b6e) (fx<? . f2b6d) (fx<=? . f2b6c) (fx-/carry . f2b6b) (fx- . f2b6a) (fx+/carry . f2b69) (fx+ . f2b68) (fx*/carry . f2b67) (fx* . f2b66) (greatest-fixnum . f2b65) (least-fixnum . f2b64) (fixnum-width . f2b63) (fixnum? . f2b62)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e09 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . f2bc0) (no-infinities-violation? . f2bbf) (make-no-nans-violation . f2bbe) (make-no-infinities-violation . f2bbd) (real->flonum . f2bbc) (flzero? . f2bbb) (fltruncate . f2bba) (fltan . f2bb9) (flsqrt . f2bb8) (flsin . f2bb7) (flround . f2bb6) (flpositive? . f2bb5) (flonum? . f2bb4) (flodd? . f2bb3) (flnumerator . f2bb2) (flnegative? . f2bb1) (flnan? . f2bb0) (flmod0 . f2baf) (flmod . f2bae) (flmin . f2bad) (flmax . f2bac) (fllog . f2bab) (flinteger? . f2baa) (flinfinite? . f2ba9) (flfloor . f2ba8) (flfinite? . f2ba7) (flexpt . f2ba6) (flexp . f2ba5) (fleven? . f2ba4) (fldiv0-and-mod0 . f2ba3) (fldiv0 . f2ba2) (fldiv-and-mod . f2ba1) (fldiv . f2ba0) (fldenominator . f2b9f) (flcos . f2b9e) (flceiling . f2b9d) (flatan . f2b9c) (flasin . f2b9b) (flacos . f2b9a) (flabs . f2b99) (fl>? . f2b98) (fl>=? . f2b97) (fl=? . f2b96) (fl<? . f2b95) (fl<=? . f2b94) (fl/ . f2b93) (fl- . f2b92) (fl+ . f2b91) (fl* . f2b90) (fixnum->flonum . f2b8f) (&no-nans . f2aad) (&no-infinities . f2aac)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e0a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . f2cd5) (string-ci-hash . f2cd4) (string-hash . f2cd3) (equal-hash . f2cd2) (hashtable-equivalence-function . f2cd1) (make-hashtable . f2cd0) (hashtable-hash-function . f2ccf) (make-eqv-hashtable . f2cce) (make-eq-hashtable . f2ccd) (hashtable? . f2ccc) (hashtable-update! . f2ccb) (hashtable-size . f2cca) (hashtable-set! . f2cc9) (hashtable-ref . f2cc8) (hashtable-mutable? . f2cc7) (hashtable-keys . f2cc6) (hashtable-entries . f2cc5) (hashtable-delete! . f2cc4) (hashtable-copy . f2cc3) (hashtable-contains? . f2cc2) (hashtable-clear! . f2cc1)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e0b '(rnrs io ports) '(6) '() '() '() '((eof-object? . f2cb1) (eof-object . f2cb0) (current-error-port . f2caf) (current-output-port . f2cae) (current-input-port . f2cad) (output-port? . f2cac) (input-port? . f2cab) (utf-8-codec . f2caa) (utf-16-codec . f2ca9) (transcoder-error-handling-mode . f2ca8) (transcoder-eol-style . f2ca7) (transcoder-codec . f2ca6) (transcoded-port . f2ca5) (textual-port? . f2ca4) (string->bytevector . f2ca3) (standard-output-port . f2ca2) (standard-input-port . f2ca1) (standard-error-port . f2ca0) (set-port-position! . f2c9f) (put-u8 . f2c9e) (put-string . f2c9d) (put-datum . f2c9c) (put-char . f2c9b) (put-bytevector . f2c9a) (port? . f2c99) (port-transcoder . f2c98) (port-position . f2c97) (port-has-set-port-position!? . f2c96) (port-has-port-position? . f2c95) (port-eof? . f2c94) (output-port-buffer-mode . f2c93) (open-string-output-port . f2c92) (open-string-input-port . f2c91) (open-file-output-port . f2c90) (open-file-input/output-port . f2c8f) (open-file-input-port . f2c8e) (open-bytevector-output-port . f2c8d) (open-bytevector-input-port . f2c8c) (native-transcoder . f2c8b) (native-eol-style . f2c8a) (make-transcoder . f2c89) (latin-1-codec . f2c88) (make-i/o-write-error . f2c87) (make-i/o-read-error . f2c86) (make-i/o-port-error . f2c85) (make-i/o-invalid-position-error . f2c84) (make-i/o-filename-error . f2c83) (make-i/o-file-protection-error . f2c82) (make-i/o-file-is-read-only-error . f2c81) (make-i/o-file-does-not-exist-error . f2c80) (make-i/o-file-already-exists-error . f2c7f) (make-i/o-error . f2c7e) (make-i/o-encoding-error . f2c7d) (make-i/o-decoding-error . f2c7c) (make-custom-textual-output-port . f2c7b) (make-custom-textual-input/output-port . f2c7a) (make-custom-textual-input-port . f2c79) (make-custom-binary-output-port . f2c78) (make-custom-binary-input/output-port . f2c77) (make-custom-binary-input-port . f2c76) (lookahead-u8 . f2c74) (lookahead-char . f2c73) (i/o-write-error? . f2c72) (i/o-read-error? . f2c71) (i/o-port-error? . f2c70) (i/o-invalid-position-error? . f2c6f) (i/o-filename-error? . f2c6e) (i/o-file-protection-error? . f2c6d) (i/o-file-is-read-only-error? . f2c6c) (i/o-file-does-not-exist-error? . f2c6b) (i/o-file-already-exists-error? . f2c6a) (i/o-error? . f2c69) (i/o-error-position . f2c68) (i/o-error-port . f2c67) (i/o-error-filename . f2c66) (i/o-encoding-error? . f2c65) (i/o-encoding-error-char . f2c64) (i/o-decoding-error? . f2c63) (get-u8 . f2c62) (get-string-n! . f2c61) (get-string-n . f2c60) (get-string-all . f2c5f) (get-line . f2c5e) (get-datum . f2c5d) (get-char . f2c5c) (get-bytevector-some . f2c5b) (get-bytevector-n! . f2c5a) (get-bytevector-n . f2c59) (get-bytevector-all . f2c58) (flush-output-port . f2c57) (close-port . f2c56) (call-with-string-output-port . f2c35) (call-with-port . f2c34) (call-with-bytevector-output-port . f2c33) (bytevector->string . f2c32) (buffer-mode? . f2c31) (binary-port? . f2c30) (&i/o-encoding . f2aab) (&i/o-decoding . f2aaa) (&i/o-port . f2aa9) (&i/o-file-does-not-exist . f2aa8) (&i/o-file-already-exists . f2aa7) (&i/o-file-is-read-only . f2aa6) (&i/o-file-protection . f2aa5) (&i/o-filename . f2aa4) (&i/o-invalid-position . f2aa3) (&i/o-write . f2aa2) (&i/o-read . f2aa1) (&i/o . f2aa0) (error-handling-mode . f2a85) (file-options . f2a84) (buffer-mode . f2a83) (eol-style . f2a82)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e0c '(rnrs enums) '(6) '() '() '() '((make-enumeration . f2c2c) (enum-set=? . f2c2b) (enum-set-universe . f2c2a) (enum-set-union . f2c29) (enum-set-subset? . f2c28) (enum-set-projection . f2c27) (enum-set-member? . f2c26) (enum-set-intersection . f2c25) (enum-set-indexer . f2c24) (enum-set-difference . f2c23) (enum-set-constructor . f2c22) (enum-set-complement . f2c21) (enum-set->list . f2c20) (define-enumeration . f2a90)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e0d '(rnrs conditions) '(6) '() '() '() '((who-condition? . f2c1f) (warning? . f2c1e) (violation? . f2c1d) (undefined-violation? . f2c1c) (syntax-violation? . f2c1b) (syntax-violation-subform . f2c1a) (syntax-violation-form . f2c19) (syntax-violation . fe5d) (simple-conditions . f2c18) (serious-condition? . f2c17) (non-continuable-violation? . f2c16) (message-condition? . f2c15) (make-who-condition . f2c14) (make-warning . f2c13) (make-violation . f2c12) (make-undefined-violation . f2c11) (make-syntax-violation . f2c10) (make-serious-condition . f2c0f) (make-non-continuable-violation . f2c0e) (make-message-condition . f2c0d) (make-lexical-violation . f2c0c) (make-irritants-condition . f2c0b) (make-implementation-restriction-violation . f2c0a) (make-error . f2c09) (make-assertion-violation . f2c08) (lexical-violation? . f2c07) (irritants-condition? . f2c06) (implementation-restriction-violation? . f2c05) (error? . f2c04) (condition-who . f2c03) (condition-predicate . f2c02) (condition-message . f2c01) (condition-irritants . f2c00) (condition-accessor . f2bff) (condition . f2bfe) (assertion-violation? . f2bfd) (condition? . f2bfc) (&undefined . f2a9f) (&syntax . f2a9e) (&lexical . f2a9d) (&implementation-restriction . f2a9c) (&non-continuable . f2a9b) (&who . f2a9a) (&irritants . f2a99) (&assertion . f2a98) (&violation . f2a97) (&error . f2a96) (&serious . f2a95) (&warning . f2a94) (&message . f2a93) (&condition . f2a92) (define-condition-type . f2a91)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e0e '(rnrs records inspection) '(6) '() '() '() '((record? . f2ce4) (record-type-uid . f2ce3) (record-type-sealed? . f2ce2) (record-type-parent . f2ce1) (record-type-opaque? . f2ce0) (record-type-name . f2cdf) (record-type-generative? . f2cde) (record-type-field-names . f2cdd) (record-rtd . f2cdc) (record-field-mutable? . f2cdb)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e0f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . f2ceb) (record-predicate . f2cea) (record-mutator . f2ce9) (record-constructor . f2ce8) (record-accessor . f2ce7) (make-record-type-descriptor . f2ce6) (make-record-constructor-descriptor . f2ce5)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e10 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . f2a8f) (parent-rtd . f2a8e) (nongenerative . f2a8d) (opaque . f2a8c) (sealed . f2a8b) (protocol . f2a8a) (parent . f2a89) (immutable . f2a88) (mutable . f2a87) (fields . f2a86) (record-constructor-descriptor . f2a66) (record-type-descriptor . f2a65)) '() values values '#f '#f '#t '#f) (f991@f7dd@install-library 'f2e11 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . f2df1) (&no-nans-rtd . f2df0) (&no-infinities-rcd . f2def) (&no-infinities-rtd . f2dee) (&i/o-encoding-rcd . f2ded) (&i/o-encoding-rtd . f2dec) (&i/o-decoding-rcd . f2deb) (&i/o-decoding-rtd . f2dea) (&i/o-port-rcd . f2de9) (&i/o-port-rtd . f2de8) (&i/o-file-does-not-exist-rcd . f2de7) (&i/o-file-does-not-exist-rtd . f2de6) (&i/o-file-already-exists-rcd . f2de5) (&i/o-file-already-exists-rtd . f2de4) (&i/o-file-is-read-only-rcd . f2de3) (&i/o-file-is-read-only-rtd . f2de2) (&i/o-file-protection-rcd . f2de1) (&i/o-file-protection-rtd . f2de0) (&i/o-filename-rcd . f2ddf) (&i/o-filename-rtd . f2dde) (&i/o-invalid-position-rcd . f2ddd) (&i/o-invalid-position-rtd . f2ddc) (&i/o-write-rcd . f2ddb) (&i/o-write-rtd . f2dda) (&i/o-read-rcd . f2dd9) (&i/o-read-rtd . f2dd8) (&i/o-rcd . f2dd7) (&i/o-rtd . f2dd6) (&undefined-rcd . f2dd5) (&undefined-rtd . f2dd4) (&syntax-rcd . f2dd3) (&syntax-rtd . f2dd2) (&lexical-rcd . f2dd1) (&lexical-rtd . f2dd0) (&implementation-restriction-rcd . f2dcf) (&implementation-restriction-rtd . f2dce) (&non-continuable-rcd . f2dcd) (&non-continuable-rtd . f2dcc) (&who-rcd . f2dcb) (&who-rtd . f2dca) (&irritants-rcd . f2dc9) (&irritants-rtd . f2dc8) (&assertion-rcd . f2dc7) (&assertion-rtd . f2dc6) (&violation-rcd . f2dc5) (&violation-rtd . f2dc4) (&error-rcd . f2dc3) (&error-rtd . f2dc2) (&serious-rcd . f2dc1) (&serious-rtd . f2dc0) (&warning-rcd . f2dbf) (&warning-rtd . f2dbe) (&message-rcd . f2dbd) (&message-rtd . f2dbc) (&condition-rcd . f2dbb) (&condition-rtd . f2dba) (syntax-error . fe59) (syntax-dispatch . fd7d) (pretty-print . f2db9) (eval-core . f2db8) (set-symbol-value! . f2db7) (symbol-value . f2db6) (gensym . f2db5) (void . f2db4) (load . f28e6) (interaction-environment . fe6b) (char-ready? . f2db3) (regexp? . f2db2) (read-line . f2db1) (gensym-prefix-set! . f2db0) (ungensym . f2daf) (alist->eq-hash-table . f2dae) (assoc-ref . f2dad) (print . f2dac) (format . f2dab) (host-os . f2daa) (library-path . f7bc) (standard-library-path . f2da9) (ssl-supported? . f2da8) (ssl-socket? . f2da7) (socket-sslize! . f2da6) (%monapi-name-whereis . f2da5) (%monapi-message-send . f2da4) (file-newer? . f2da3) (stat-mtime . f2da2) (write-to-file . f2da1) (file->list . f2da0) (file->string . f2d9f) (digit->integer . f2d9e) (call-with-string-input-port . f2d9d) (call-with-string-io . f2d9c) (string-split . f2d9b) (bytevector-for-each . f2d9a) (string->regexp . f2d99) (rxmatch . f2d98) (regexp-replace-all . f2d97) (hashtable-for-each . f2d96) (mosh-cache-dir . f5a6) (call-process . f2d95) (local-tz-offset . f2d94) (microseconds . f2d93) (directory-list . f2d92) (set-current-directory! . f2d91) (expand-path . f2d90) (current-directory . f2d8f) (%spawn . f2d8e) (%waitpid . f2d8d) (simple-struct-name . f2d8c) (simple-struct-set! . f2d8b) (simple-struct-ref . f2d8a) (make-simple-struct . f2d89) (simple-struct? . f2d88) (pointer-ref-c-int64 . f2d87) (pointer-ref-c-int32 . f2d86) (pointer-ref-c-int16 . f2d85) (pointer-ref-c-int8 . f2d84) (pointer-ref-c-uint64 . f2d83) (pointer-ref-c-uint32 . f2d82) (pointer-ref-c-uint16 . f2d81) (pointer-ref-c-uint8 . f2d80) (pointer-set-c-uint64! . f2d7f) (pointer-set-c-uint32! . f2d7e) (pointer-set-c-uint16! . f2d7d) (pointer-set-c-uint8! . f2d7c) (pointer-set-c-int64! . f2d7b) (pointer-set-c-int32! . f2d7a) (pointer-set-c-int16! . f2d79) (pointer-set-c-int8! . f2d78) (pointer-set-c-pointer! . f2d77) (pointer-set-c-double! . f2d76) (pointer-set-c-float! . f2d75) (pointer-set-c-long-long! . f2d74) (pointer-set-c-long! . f2d73) (pointer-set-c-int! . f2d72) (pointer-set-c-short! . f2d71) (pointer-set-c-char! . f2d70) (pointer-ref-c-pointer . f2d6f) (pointer-ref-c-double . f2d6e) (pointer-ref-c-float . f2d6d) (pointer-ref-c-unsigned-long-long . f2d6c) (pointer-ref-c-signed-long-long . f2d6b) (pointer-ref-c-unsigned-long . f2d6a) (pointer-ref-c-signed-long . f2d69) (pointer-ref-c-unsigned-int . f2d68) (pointer-ref-c-signed-int . f2d67) (pointer-ref-c-unsigned-short . f2d66) (pointer-ref-c-signed-short . f2d65) (pointer-ref-c-unsigned-char . f2d64) (pointer-ref-c-signed-char . f2d63) (pointer->integer . f2d62) (integer->pointer . f2d61) (pointer? . f2d60) (shared-errno . f2d5f) (%ffi-free-c-callback-trampoline . f2d5e) (%ffi-make-c-callback-trampoline . f2d5d) (%ffi-free . f2d5c) (%ffi-malloc . f2d5b) (%ffi-supported? . f2d5a) (%ffi-pointer->string . f2d59) (%ffi-call . f2d58) (%ffi-lookup . f2d57) (%ffi-open . f2d56) (null-terminated-utf8->string . f2d55) (null-terminated-bytevector->string . f2d54) (%exec . f2d53) (%fork . f2d52) (%pipe . f2d51) (p . f2d50) (open-output-string . f2d4f) (get-output-string . f2d4e) (file-stat-ctime . f2d4d) (file-stat-atime . f2d4c) (file-stat-mtime . f2d4b) (file-size-in-bytes . f2d4a) (file-writable? . f2d49) (file-executable? . f2d48) (file-readable? . f2d47) (file-regular? . f2d46) (file-symbolic-link? . f2d45) (file-directory? . f2d44) (create-symbolic-link . f2d43) (rename-file . f2d42) (delete-directory . f2d41) (create-directory . f2d40) (create-mosh-cache-dir . f2d3f) (get-environment-variables . f2d3e) (current-exception-handler . f2d3d) (get-environment-variable . f2d3c) (join-wraps . f2d3b) (id->real-label . f2d3a) (same-marks? . f2d39) (same-marks*? . f2d38) (get-timeofday . f2d37) (get-command-line . f2d36) (sys-display . f2d35) (whereis . f2d34) (register . f2d33) (vm-join! . f2d32) (vm-set-value! . f2d31) (vm? . f2d30) (main-vm? . f2d2f) (vm-eval . f2d2e) (vm-self . f2d2d) (vm-start! . f2d2c) (make-vm . f2d2b) (mutex-try-lock! . f2d2a) (mutex-unlock! . f2d29) (mutex-lock! . f2d28) (mutex? . f2d27) (make-mutex . f2d26) (condition-variable-notify-all! . f2d25) (condition-variable-notify! . f2d24) (condition-variable-wait! . f2d23) (make-condition-variable . f2d22) (write/ss . f2d21) (mosh-executable-path . f2d20) (make-file-options . f2d1f) (source-info . f2d1e) (make-compiler-instruction . f2d1d) (make-instruction . f2d1c) (set-source-info! . f2d1b) (bignum? . f2d1a) (fast-equal? . f2d19) (fasl-read . f2d18) (fasl-write . f2d17) (time-usage . f2d16) (os-constant . f2d15) (condition-printer . f2d14) (disasm . f2d13) (make-parameter . f5a4) (socket-port . f2d12) (socket-shutdown . f2d11) (socket-close . f2d10) (socket-send . f2d0f) (socket-recv! . f2d0e) (socket-recv . f2d0d) (make-server-socket . f2d0c) (make-client-socket . f2d0b) (socket-accept . f2d0a) (socket? . f2d09) (string-upcase . f2d08) (string-titlecase . f2d07) (string-normalize-nfkd . f2d06) (string-normalize-nfkc . f2d05) (string-normalize-nfd . f2d04) (string-normalize-nfc . f2d03) (string-foldcase . f2d02) (string-downcase . f2d01) (string-ci>? . f2d00) (string-ci>=? . f2cff) (string-ci=? . f2cfe) (string-ci<? . f2cfd) (string-ci<=? . f2cfc) (char-whitespace? . f2cfb) (char-upper-case? . f2cfa) (char-title-case? . f2cf9) (char-numeric? . f2cf8) (char-lower-case? . f2cf7) (char-general-category . f2cf6) (char-upcase . f2cf5) (char-titlecase . f2cf4) (char-foldcase . f2cf3) (char-downcase . f2cf2) (char-ci>? . f2cf1) (char-ci>=? . f2cf0) (char-ci=? . f2cef) (char-ci<? . f2cee) (char-ci<=? . f2ced) (char-alphabetic? . f2cec) (make-variable-transformer . fba8) (identifier? . fe5f) (generate-temporaries . fe4b) (free-identifier=? . fe4d) (syntax->datum . fe63) (datum->syntax . fe61) (bound-identifier=? . fe4f) (record-type-descriptor? . f2ceb) (record-predicate . f2cea) (record-mutator . f2ce9) (record-constructor . f2ce8) (record-accessor . f2ce7) (make-record-type-descriptor . f2ce6) (make-record-constructor-descriptor . f2ce5) (record? . f2ce4) (record-type-uid . f2ce3) (record-type-sealed? . f2ce2) (record-type-parent . f2ce1) (record-type-opaque? . f2ce0) (record-type-name . f2cdf) (record-type-generative? . f2cde) (record-type-field-names . f2cdd) (record-rtd . f2cdc) (record-field-mutable? . f2cdb) (delete-file . f2cda) (file-exists? . f2cd9) (vector-sort! . f2cd8) (vector-sort . f2cd7) (list-sort . f2cd6) (symbol-hash . f2cd5) (string-ci-hash . f2cd4) (string-hash . f2cd3) (equal-hash . f2cd2) (hashtable-equivalence-function . f2cd1) (make-hashtable . f2cd0) (hashtable-hash-function . f2ccf) (make-eqv-hashtable . f2cce) (make-eq-hashtable . f2ccd) (hashtable? . f2ccc) (hashtable-update! . f2ccb) (hashtable-size . f2cca) (hashtable-set! . f2cc9) (hashtable-ref . f2cc8) (hashtable-mutable? . f2cc7) (hashtable-keys . f2cc6) (hashtable-entries . f2cc5) (hashtable-delete! . f2cc4) (hashtable-copy . f2cc3) (hashtable-contains? . f2cc2) (hashtable-clear! . f2cc1) (call-with-output-file . f2cc0) (call-with-input-file . f2cbf) (write-char . f2cbe) (write . f2cbd) (with-output-to-file . f2cbc) (with-input-from-file . f2cbb) (read-char . f2cba) (read . f2cb9) (peek-char . f2cb8) (open-output-file . f2cb7) (open-input-file . f2cb6) (newline . f2cb5) (display . f2cb4) (close-output-port . f2cb3) (close-input-port . f2cb2) (eof-object? . f2cb1) (eof-object . f2cb0) (current-error-port . f2caf) (current-output-port . f2cae) (current-input-port . f2cad) (output-port? . f2cac) (input-port? . f2cab) (utf-8-codec . f2caa) (utf-16-codec . f2ca9) (transcoder-error-handling-mode . f2ca8) (transcoder-eol-style . f2ca7) (transcoder-codec . f2ca6) (transcoded-port . f2ca5) (textual-port? . f2ca4) (string->bytevector . f2ca3) (standard-output-port . f2ca2) (standard-input-port . f2ca1) (standard-error-port . f2ca0) (set-port-position! . f2c9f) (put-u8 . f2c9e) (put-string . f2c9d) (put-datum . f2c9c) (put-char . f2c9b) (put-bytevector . f2c9a) (port? . f2c99) (port-transcoder . f2c98) (port-position . f2c97) (port-has-set-port-position!? . f2c96) (port-has-port-position? . f2c95) (port-eof? . f2c94) (output-port-buffer-mode . f2c93) (open-string-output-port . f2c92) (open-string-input-port . f2c91) (open-file-output-port . f2c90) (open-file-input/output-port . f2c8f) (open-file-input-port . f2c8e) (open-bytevector-output-port . f2c8d) (open-bytevector-input-port . f2c8c) (native-transcoder . f2c8b) (native-eol-style . f2c8a) (make-transcoder . f2c89) (latin-1-codec . f2c88) (make-i/o-write-error . f2c87) (make-i/o-read-error . f2c86) (make-i/o-port-error . f2c85) (make-i/o-invalid-position-error . f2c84) (make-i/o-filename-error . f2c83) (make-i/o-file-protection-error . f2c82) (make-i/o-file-is-read-only-error . f2c81) (make-i/o-file-does-not-exist-error . f2c80) (make-i/o-file-already-exists-error . f2c7f) (make-i/o-error . f2c7e) (make-i/o-encoding-error . f2c7d) (make-i/o-decoding-error . f2c7c) (make-custom-textual-output-port . f2c7b) (make-custom-textual-input/output-port . f2c7a) (make-custom-textual-input-port . f2c79) (make-custom-binary-output-port . f2c78) (make-custom-binary-input/output-port . f2c77) (make-custom-binary-input-port . f2c76) (make-bytevector . f2c75) (lookahead-u8 . f2c74) (lookahead-char . f2c73) (i/o-write-error? . f2c72) (i/o-read-error? . f2c71) (i/o-port-error? . f2c70) (i/o-invalid-position-error? . f2c6f) (i/o-filename-error? . f2c6e) (i/o-file-protection-error? . f2c6d) (i/o-file-is-read-only-error? . f2c6c) (i/o-file-does-not-exist-error? . f2c6b) (i/o-file-already-exists-error? . f2c6a) (i/o-error? . f2c69) (i/o-error-position . f2c68) (i/o-error-port . f2c67) (i/o-error-filename . f2c66) (i/o-encoding-error? . f2c65) (i/o-encoding-error-char . f2c64) (i/o-decoding-error? . f2c63) (get-u8 . f2c62) (get-string-n! . f2c61) (get-string-n . f2c60) (get-string-all . f2c5f) (get-line . f2c5e) (get-datum . f2c5d) (get-char . f2c5c) (get-bytevector-some . f2c5b) (get-bytevector-n! . f2c5a) (get-bytevector-n . f2c59) (get-bytevector-all . f2c58) (flush-output-port . f2c57) (close-port . f2c56) (scheme-report-environment . fe39) (quotient . f2c55) (null-environment . fe37) (remainder . f2c54) (modulo . f2c53) (inexact->exact . f2c52) (force . f2c51) (exact->inexact . f2c50) (make-promise . f2c4f) (exit . f2c4e) (command-line . f28e0) (string-fill! . f2c4d) (string-set! . f2c4c) (set-cdr! . f2c4b) (set-car! . f2c4a) (remove . f2c49) (remv . f2c48) (remp . f2c47) (remq . f2c46) (partition . f2c45) (memv . f2c44) (memq . f2c43) (memp . f2c42) (member . f2c41) (exists . f2c40) (for-all . f2c3f) (fold-right . f2c3e) (fold-left . f2c3d) (find . f2c3c) (filter . f2c3b) (cons* . f2c3a) (assv . f2c39) (assq . f2c38) (assp . f2c37) (assoc . f2c36) (call-with-string-output-port . f2c35) (call-with-port . f2c34) (call-with-bytevector-output-port . f2c33) (bytevector->string . f2c32) (buffer-mode? . f2c31) (binary-port? . f2c30) (with-exception-handler . f2c2f) (raise-continuable . f2c2e) (raise . f2c2d) (eval . fe3d) (environment . fe35) (make-enumeration . f2c2c) (enum-set=? . f2c2b) (enum-set-universe . f2c2a) (enum-set-union . f2c29) (enum-set-subset? . f2c28) (enum-set-projection . f2c27) (enum-set-member? . f2c26) (enum-set-intersection . f2c25) (enum-set-indexer . f2c24) (enum-set-difference . f2c23) (enum-set-constructor . f2c22) (enum-set-complement . f2c21) (enum-set->list . f2c20) (who-condition? . f2c1f) (warning? . f2c1e) (violation? . f2c1d) (undefined-violation? . f2c1c) (syntax-violation? . f2c1b) (syntax-violation-subform . f2c1a) (syntax-violation-form . f2c19) (syntax-violation . fe5d) (simple-conditions . f2c18) (serious-condition? . f2c17) (non-continuable-violation? . f2c16) (message-condition? . f2c15) (make-who-condition . f2c14) (make-warning . f2c13) (make-violation . f2c12) (make-undefined-violation . f2c11) (make-syntax-violation . f2c10) (make-serious-condition . f2c0f) (make-non-continuable-violation . f2c0e) (make-message-condition . f2c0d) (make-lexical-violation . f2c0c) (make-irritants-condition . f2c0b) (make-implementation-restriction-violation . f2c0a) (make-error . f2c09) (make-assertion-violation . f2c08) (lexical-violation? . f2c07) (irritants-condition? . f2c06) (implementation-restriction-violation? . f2c05) (error? . f2c04) (condition-who . f2c03) (condition-predicate . f2c02) (condition-message . f2c01) (condition-irritants . f2c00) (condition-accessor . f2bff) (condition . f2bfe) (assertion-violation? . f2bfd) (condition? . f2bfc) (utf32->string . f2bfb) (utf16->string . f2bfa) (utf8->string . f2bf9) (uint-list->bytevector . f2bf8) (u8-list->bytevector . f2bf7) (string->utf8 . f2bf6) (string->utf32 . f2bf5) (string->utf16 . f2bf4) (sint-list->bytevector . f2bf3) (native-endianness . f2bf2) (bytevector? . f2bf1) (bytevector=? . f2bf0) (bytevector-uint-set! . f2bef) (bytevector-uint-ref . f2bee) (bytevector-u8-set! . f2bed) (bytevector-u8-ref . f2bec) (bytevector-u64-set! . f2beb) (bytevector-u64-ref . f2bea) (bytevector-u64-native-set! . f2be9) (bytevector-u64-native-ref . f2be8) (bytevector-u32-set! . f2be7) (bytevector-u32-ref . f2be6) (bytevector-u32-native-set! . f2be5) (bytevector-u32-native-ref . f2be4) (bytevector-u16-set! . f2be3) (bytevector-u16-ref . f2be2) (bytevector-u16-native-set! . f2be1) (bytevector-u16-native-ref . f2be0) (bytevector-sint-set! . f2bdf) (bytevector-sint-ref . f2bde) (bytevector-s8-set! . f2bdd) (bytevector-s8-ref . f2bdc) (bytevector-s64-set! . f2bdb) (bytevector-s64-ref . f2bda) (bytevector-s64-native-set! . f2bd9) (bytevector-s64-native-ref . f2bd8) (bytevector-s32-set! . f2bd7) (bytevector-s32-ref . f2bd6) (bytevector-s32-native-set! . f2bd5) (bytevector-s32-native-ref . f2bd4) (bytevector-s16-set! . f2bd3) (bytevector-s16-ref . f2bd2) (bytevector-s16-native-set! . f2bd1) (bytevector-s16-native-ref . f2bd0) (bytevector-length . f2bcf) (bytevector-ieee-single-ref . f2bce) (bytevector-ieee-single-set! . f2bcd) (bytevector-ieee-single-native-set! . f2bcc) (bytevector-ieee-single-native-ref . f2bcb) (bytevector-ieee-double-set! . f2bca) (bytevector-ieee-double-ref . f2bc9) (bytevector-ieee-double-native-set! . f2bc8) (bytevector-ieee-double-native-ref . f2bc7) (bytevector-fill! . f2bc6) (bytevector-copy! . f2bc5) (bytevector-copy . f2bc4) (bytevector->uint-list . f2bc3) (bytevector->u8-list . f2bc2) (bytevector->sint-list . f2bc1) (no-nans-violation? . f2bc0) (no-infinities-violation? . f2bbf) (make-no-nans-violation . f2bbe) (make-no-infinities-violation . f2bbd) (real->flonum . f2bbc) (flzero? . f2bbb) (fltruncate . f2bba) (fltan . f2bb9) (flsqrt . f2bb8) (flsin . f2bb7) (flround . f2bb6) (flpositive? . f2bb5) (flonum? . f2bb4) (flodd? . f2bb3) (flnumerator . f2bb2) (flnegative? . f2bb1) (flnan? . f2bb0) (flmod0 . f2baf) (flmod . f2bae) (flmin . f2bad) (flmax . f2bac) (fllog . f2bab) (flinteger? . f2baa) (flinfinite? . f2ba9) (flfloor . f2ba8) (flfinite? . f2ba7) (flexpt . f2ba6) (flexp . f2ba5) (fleven? . f2ba4) (fldiv0-and-mod0 . f2ba3) (fldiv0 . f2ba2) (fldiv-and-mod . f2ba1) (fldiv . f2ba0) (fldenominator . f2b9f) (flcos . f2b9e) (flceiling . f2b9d) (flatan . f2b9c) (flasin . f2b9b) (flacos . f2b9a) (flabs . f2b99) (fl>? . f2b98) (fl>=? . f2b97) (fl=? . f2b96) (fl<? . f2b95) (fl<=? . f2b94) (fl/ . f2b93) (fl- . f2b92) (fl+ . f2b91) (fl* . f2b90) (fixnum->flonum . f2b8f) (fxzero? . f2b8e) (fxxor . f2b8d) (fxrotate-bit-field . f2b8c) (fxreverse-bit-field . f2b8b) (fxpositive? . f2b8a) (fxodd? . f2b89) (fxnot . f2b88) (fxnegative? . f2b87) (fxmod0 . f2b86) (fxmod . f2b85) (fxmin . f2b84) (fxmax . f2b83) (fxlength . f2b82) (fxior . f2b81) (fxif . f2b80) (fxfirst-bit-set . f2b7f) (fxeven? . f2b7e) (fxdiv0-and-mod0 . f2b7d) (fxdiv0 . f2b7c) (fxdiv-and-mod . f2b7b) (fxdiv . f2b7a) (fxcopy-bit-field . f2b79) (fxcopy-bit . f2b78) (fxbit-set? . f2b77) (fxbit-field . f2b76) (fxbit-count . f2b75) (fxarithmetic-shift-right . f2b74) (fxarithmetic-shift-left . f2b73) (fxarithmetic-shift . f2b72) (fxand . f2b71) (fx>? . f2b70) (fx>=? . f2b6f) (fx=? . f2b6e) (fx<? . f2b6d) (fx<=? . f2b6c) (fx-/carry . f2b6b) (fx- . f2b6a) (fx+/carry . f2b69) (fx+ . f2b68) (fx*/carry . f2b67) (fx* . f2b66) (greatest-fixnum . f2b65) (least-fixnum . f2b64) (fixnum-width . f2b63) (fixnum? . f2b62) (bitwise-rotate-bit-field . f2b61) (bitwise-reverse-bit-field . f2b60) (bitwise-length . f2b5f) (bitwise-if . f2b5e) (bitwise-first-bit-set . f2b5d) (bitwise-copy-bit-field . f2b5c) (bitwise-copy-bit . f2b5b) (bitwise-bit-set? . f2b5a) (bitwise-bit-field . f2b59) (bitwise-bit-count . f2b58) (bitwise-xor . f2b57) (bitwise-ior . f2b56) (bitwise-and . f2b55) (bitwise-not . f2b54) (bitwise-arithmetic-shift-right . f2b53) (bitwise-arithmetic-shift-left . f2b52) (bitwise-arithmetic-shift . f2b51) (zero? . f2b50) (vector? . f2b4f) (vector-set! . f2b4e) (vector-ref . f2b4d) (vector-map . f2b4c) (vector-length . f2b4b) (vector-for-each . f2b4a) (vector-fill! . f2b49) (vector->list . f2b48) (vector . f2b47) (values . f2b46) (truncate . f2b45) (tan . f2b44) (symbol? . f2b43) (symbol=? . f2b42) (symbol->string . f2b41) (substring . f2b40) (string? . f2b3f) (string>? . f2b3e) (string>=? . f2b3d) (string=? . f2b3c) (string<? . f2b3b) (string<=? . f2b3a) (string-ref . f2b39) (string-length . f2b38) (string-for-each . f2b37) (string-copy . f2b36) (string-append . f2b35) (string->symbol . f2b34) (string->number . f2b33) (string->list . f2b32) (string . f2b31) (sqrt . f2b30) (sin . f2b2f) (round . f2b2e) (reverse . f2b2d) (real? . f2b2c) (real-valued? . f2b2b) (real-part . f2b2a) (rationalize . f2b29) (rational? . f2b28) (rational-valued? . f2b27) (procedure? . f2b26) (positive? . f2b25) (pair? . f2b24) (odd? . f2b23) (numerator . f2b22) (number? . f2b21) (number->string . f2b20) (null? . f2b1f) (not . f2b1e) (negative? . f2b1d) (nan? . f2b1c) (min . f2b1b) (max . f2b1a) (map . f2b19) (make-vector . f2b18) (make-string . f2b17) (make-rectangular . f2b16) (make-polar . f2b15) (magnitude . f2b14) (log . f2b13) (list? . f2b12) (list-tail . f2b11) (list-ref . f2b10) (list->vector . f2b0f) (list->string . f2b0e) (list . f2b0d) (length . f2b0c) (lcm . f2b0b) (integer? . f2b0a) (integer-valued? . f2b09) (integer->char . f2b08) (infinite? . f2b07) (inexact? . f2b06) (inexact . f2b05) (imag-part . f2b04) (gcd . f2b03) (for-each . f2b02) (floor . f2b01) (finite? . f2b00) (expt . f2aff) (exp . f2afe) (exact? . f2afd) (exact-integer-sqrt . f2afc) (exact . f2afb) (even? . f2afa) (error . f2af9) (eqv? . f2af8) (equal? . f2af7) (eq? . f2af6) (dynamic-wind . f2af5) (div0-and-mod0 . f2af4) (mod0 . f2af3) (div0 . f2af2) (div-and-mod . f2af1) (mod . f2af0) (div . f2aef) (denominator . f2aee) (cos . f2aed) (cons . f2aec) (complex? . f2aeb) (char? . f2aea) (char>? . f2ae9) (char>=? . f2ae8) (char=? . f2ae7) (char<? . f2ae6) (char<=? . f2ae5) (char->integer . f2ae4) (ceiling . f2ae3) (call-with-values . f2ae2) (call/cc . f2ae1) (call-with-current-continuation . f2ae0) (cddddr . f2adf) (cdddar . f2ade) (cddadr . f2add) (cddaar . f2adc) (cdaddr . f2adb) (cdadar . f2ada) (cdaadr . f2ad9) (cdaaar . f2ad8) (cadddr . f2ad7) (caddar . f2ad6) (cadadr . f2ad5) (cadaar . f2ad4) (caaddr . f2ad3) (caadar . f2ad2) (caaadr . f2ad1) (caaaar . f2ad0) (cdddr . f2acf) (cddar . f2ace) (cdadr . f2acd) (cdaar . f2acc) (caddr . f2acb) (cadar . f2aca) (caadr . f2ac9) (caaar . f2ac8) (cddr . f2ac7) (cdar . f2ac6) (cadr . f2ac5) (caar . f2ac4) (cdr . f2ac3) (car . f2ac2) (boolean? . f2ac1) (boolean=? . f2ac0) (atan . f2abf) (assertion-violation . f2abe) (assertion-error . fe57) (asin . f2abd) (apply . f2abc) (append . f2abb) (angle . f2aba) (acos . f2ab9) (abs . f2ab8) (/ . f2ab7) (* . f2ab6) (- . f2ab5) (+ . f2ab4) (>= . f2ab3) (> . f2ab2) (= . f2ab1) (<= . f2ab0) (< . f2aaf) (library . f2aae) (&no-nans . f2aad) (&no-infinities . f2aac) (&i/o-encoding . f2aab) (&i/o-decoding . f2aaa) (&i/o-port . f2aa9) (&i/o-file-does-not-exist . f2aa8) (&i/o-file-already-exists . f2aa7) (&i/o-file-is-read-only . f2aa6) (&i/o-file-protection . f2aa5) (&i/o-filename . f2aa4) (&i/o-invalid-position . f2aa3) (&i/o-write . f2aa2) (&i/o-read . f2aa1) (&i/o . f2aa0) (&undefined . f2a9f) (&syntax . f2a9e) (&lexical . f2a9d) (&implementation-restriction . f2a9c) (&non-continuable . f2a9b) (&who . f2a9a) (&irritants . f2a99) (&assertion . f2a98) (&violation . f2a97) (&error . f2a96) (&serious . f2a95) (&warning . f2a94) (&message . f2a93) (&condition . f2a92) (define-condition-type . f2a91) (define-enumeration . f2a90) (define-record-type . f2a8f) (parent-rtd . f2a8e) (nongenerative . f2a8d) (opaque . f2a8c) (sealed . f2a8b) (protocol . f2a8a) (parent . f2a89) (immutable . f2a88) (mutable . f2a87) (fields . f2a86) (error-handling-mode . f2a85) (file-options . f2a84) (buffer-mode . f2a83) (eol-style . f2a82) (guard . f2a81) (trace-define . f2a80) (trace-lambda . f2a7f) (unsyntax-splicing . f2a7e) (unsyntax . f2a7d) (unquote-splicing . f2a7c) (unquote . f2a7b) (_ . f2a7a) (else . f2a79) (=> . f2a78) (... . f2a77) (assert . f2a76) (endianness . f2a75) (delay . f2a74) (time . f2a73) (do . f2a72) (cond . f2a71) (let* . f2a70) (let*-values . f2a6f) (let-values . f2a6e) (identifier-syntax . f2a6d) (with-syntax . f2a6c) (quasisyntax . f2a6b) (quasiquote . f2a6a) (syntax-rules . f2a69) (include . f2a68) (define-struct . f2a67) (record-constructor-descriptor . f2a66) (record-type-descriptor . f2a65) (case . f2a64) (parameterize . f2a63) (unless . f2a62) (when . f2a61) (or . f2a60) (and . f2a5f) (if . f2a5e) (let . f2a5d) (letrec* . f2a5c) (letrec . f2a5b) (type-descriptor . f2a5a) (case-lambda . f2a59) (lambda . f2a58) (syntax . f2a57) (syntax-case . f2a56) (quote . f2a55) (foreign-call . f2a54) (letrec-syntax . f2a53) (let-syntax . f2a52) (set! . f2a51) (import . f2a50) (begin . f2a4f) (module . f2a4e) (define-syntax . f2a4d) (define . f2a4c)) '((f2df1 core-prim . &no-nans-rcd) (f2df0 core-prim . &no-nans-rtd) (f2def core-prim . &no-infinities-rcd) (f2dee core-prim . &no-infinities-rtd) (f2ded core-prim . &i/o-encoding-rcd) (f2dec core-prim . &i/o-encoding-rtd) (f2deb core-prim . &i/o-decoding-rcd) (f2dea core-prim . &i/o-decoding-rtd) (f2de9 core-prim . &i/o-port-rcd) (f2de8 core-prim . &i/o-port-rtd) (f2de7 core-prim . &i/o-file-does-not-exist-rcd) (f2de6 core-prim . &i/o-file-does-not-exist-rtd) (f2de5 core-prim . &i/o-file-already-exists-rcd) (f2de4 core-prim . &i/o-file-already-exists-rtd) (f2de3 core-prim . &i/o-file-is-read-only-rcd) (f2de2 core-prim . &i/o-file-is-read-only-rtd) (f2de1 core-prim . &i/o-file-protection-rcd) (f2de0 core-prim . &i/o-file-protection-rtd) (f2ddf core-prim . &i/o-filename-rcd) (f2dde core-prim . &i/o-filename-rtd) (f2ddd core-prim . &i/o-invalid-position-rcd) (f2ddc core-prim . &i/o-invalid-position-rtd) (f2ddb core-prim . &i/o-write-rcd) (f2dda core-prim . &i/o-write-rtd) (f2dd9 core-prim . &i/o-read-rcd) (f2dd8 core-prim . &i/o-read-rtd) (f2dd7 core-prim . &i/o-rcd) (f2dd6 core-prim . &i/o-rtd) (f2dd5 core-prim . &undefined-rcd) (f2dd4 core-prim . &undefined-rtd) (f2dd3 core-prim . &syntax-rcd) (f2dd2 core-prim . &syntax-rtd) (f2dd1 core-prim . &lexical-rcd) (f2dd0 core-prim . &lexical-rtd) (f2dcf core-prim . &implementation-restriction-rcd) (f2dce core-prim . &implementation-restriction-rtd) (f2dcd core-prim . &non-continuable-rcd) (f2dcc core-prim . &non-continuable-rtd) (f2dcb core-prim . &who-rcd) (f2dca core-prim . &who-rtd) (f2dc9 core-prim . &irritants-rcd) (f2dc8 core-prim . &irritants-rtd) (f2dc7 core-prim . &assertion-rcd) (f2dc6 core-prim . &assertion-rtd) (f2dc5 core-prim . &violation-rcd) (f2dc4 core-prim . &violation-rtd) (f2dc3 core-prim . &error-rcd) (f2dc2 core-prim . &error-rtd) (f2dc1 core-prim . &serious-rcd) (f2dc0 core-prim . &serious-rtd) (f2dbf core-prim . &warning-rcd) (f2dbe core-prim . &warning-rtd) (f2dbd core-prim . &message-rcd) (f2dbc core-prim . &message-rtd) (f2dbb core-prim . &condition-rcd) (f2dba core-prim . &condition-rtd) (fe59 core-prim . syntax-error) (fd7d core-prim . syntax-dispatch) (f2db9 core-prim . pretty-print) (f2db8 core-prim . eval-core) (f2db7 core-prim . set-symbol-value!) (f2db6 core-prim . symbol-value) (f2db5 core-prim . gensym) (f2db4 core-prim . void) (f28e6 core-prim . load) (fe6b core-prim . interaction-environment) (f2db3 core-prim . char-ready?) (f2db2 core-prim . regexp?) (f2db1 core-prim . read-line) (f2db0 core-prim . gensym-prefix-set!) (f2daf core-prim . ungensym) (f2dae core-prim . alist->eq-hash-table) (f2dad core-prim . assoc-ref) (f2dac core-prim . print) (f2dab core-prim . format) (f2daa core-prim . host-os) (f7bc core-prim . library-path) (f2da9 core-prim . standard-library-path) (f2da8 core-prim . ssl-supported?) (f2da7 core-prim . ssl-socket?) (f2da6 core-prim . socket-sslize!) (f2da5 core-prim . %monapi-name-whereis) (f2da4 core-prim . %monapi-message-send) (f2da3 core-prim . file-newer?) (f2da2 core-prim . stat-mtime) (f2da1 core-prim . write-to-file) (f2da0 core-prim . file->list) (f2d9f core-prim . file->string) (f2d9e core-prim . digit->integer) (f2d9d core-prim . call-with-string-input-port) (f2d9c core-prim . call-with-string-io) (f2d9b core-prim . string-split) (f2d9a core-prim . bytevector-for-each) (f2d99 core-prim . string->regexp) (f2d98 core-prim . rxmatch) (f2d97 core-prim . regexp-replace-all) (f2d96 core-prim . hashtable-for-each) (f5a6 core-prim . mosh-cache-dir) (f2d95 core-prim . call-process) (f2d94 core-prim . local-tz-offset) (f2d93 core-prim . microseconds) (f2d92 core-prim . directory-list) (f2d91 core-prim . set-current-directory!) (f2d90 core-prim . expand-path) (f2d8f core-prim . current-directory) (f2d8e core-prim . %spawn) (f2d8d core-prim . %waitpid) (f2d8c core-prim . simple-struct-name) (f2d8b core-prim . simple-struct-set!) (f2d8a core-prim . simple-struct-ref) (f2d89 core-prim . make-simple-struct) (f2d88 core-prim . simple-struct?) (f2d87 core-prim . pointer-ref-c-int64) (f2d86 core-prim . pointer-ref-c-int32) (f2d85 core-prim . pointer-ref-c-int16) (f2d84 core-prim . pointer-ref-c-int8) (f2d83 core-prim . pointer-ref-c-uint64) (f2d82 core-prim . pointer-ref-c-uint32) (f2d81 core-prim . pointer-ref-c-uint16) (f2d80 core-prim . pointer-ref-c-uint8) (f2d7f core-prim . pointer-set-c-uint64!) (f2d7e core-prim . pointer-set-c-uint32!) (f2d7d core-prim . pointer-set-c-uint16!) (f2d7c core-prim . pointer-set-c-uint8!) (f2d7b core-prim . pointer-set-c-int64!) (f2d7a core-prim . pointer-set-c-int32!) (f2d79 core-prim . pointer-set-c-int16!) (f2d78 core-prim . pointer-set-c-int8!) (f2d77 core-prim . pointer-set-c-pointer!) (f2d76 core-prim . pointer-set-c-double!) (f2d75 core-prim . pointer-set-c-float!) (f2d74 core-prim . pointer-set-c-long-long!) (f2d73 core-prim . pointer-set-c-long!) (f2d72 core-prim . pointer-set-c-int!) (f2d71 core-prim . pointer-set-c-short!) (f2d70 core-prim . pointer-set-c-char!) (f2d6f core-prim . pointer-ref-c-pointer) (f2d6e core-prim . pointer-ref-c-double) (f2d6d core-prim . pointer-ref-c-float) (f2d6c core-prim . pointer-ref-c-unsigned-long-long) (f2d6b core-prim . pointer-ref-c-signed-long-long) (f2d6a core-prim . pointer-ref-c-unsigned-long) (f2d69 core-prim . pointer-ref-c-signed-long) (f2d68 core-prim . pointer-ref-c-unsigned-int) (f2d67 core-prim . pointer-ref-c-signed-int) (f2d66 core-prim . pointer-ref-c-unsigned-short) (f2d65 core-prim . pointer-ref-c-signed-short) (f2d64 core-prim . pointer-ref-c-unsigned-char) (f2d63 core-prim . pointer-ref-c-signed-char) (f2d62 core-prim . pointer->integer) (f2d61 core-prim . integer->pointer) (f2d60 core-prim . pointer?) (f2d5f core-prim . shared-errno) (f2d5e core-prim . %ffi-free-c-callback-trampoline) (f2d5d core-prim . %ffi-make-c-callback-trampoline) (f2d5c core-prim . %ffi-free) (f2d5b core-prim . %ffi-malloc) (f2d5a core-prim . %ffi-supported?) (f2d59 core-prim . %ffi-pointer->string) (f2d58 core-prim . %ffi-call) (f2d57 core-prim . %ffi-lookup) (f2d56 core-prim . %ffi-open) (f2d55 core-prim . null-terminated-utf8->string) (f2d54 core-prim . null-terminated-bytevector->string) (f2d53 core-prim . %exec) (f2d52 core-prim . %fork) (f2d51 core-prim . %pipe) (f2d50 core-prim . p) (f2d4f core-prim . open-output-string) (f2d4e core-prim . get-output-string) (f2d4d core-prim . file-stat-ctime) (f2d4c core-prim . file-stat-atime) (f2d4b core-prim . file-stat-mtime) (f2d4a core-prim . file-size-in-bytes) (f2d49 core-prim . file-writable?) (f2d48 core-prim . file-executable?) (f2d47 core-prim . file-readable?) (f2d46 core-prim . file-regular?) (f2d45 core-prim . file-symbolic-link?) (f2d44 core-prim . file-directory?) (f2d43 core-prim . create-symbolic-link) (f2d42 core-prim . rename-file) (f2d41 core-prim . delete-directory) (f2d40 core-prim . create-directory) (f2d3f core-prim . create-mosh-cache-dir) (f2d3e core-prim . get-environment-variables) (f2d3d core-prim . current-exception-handler) (f2d3c core-prim . get-environment-variable) (f2d3b core-prim . join-wraps) (f2d3a core-prim . id->real-label) (f2d39 core-prim . same-marks?) (f2d38 core-prim . same-marks*?) (f2d37 core-prim . get-timeofday) (f2d36 core-prim . get-command-line) (f2d35 core-prim . sys-display) (f2d34 core-prim . whereis) (f2d33 core-prim . register) (f2d32 core-prim . vm-join!) (f2d31 core-prim . vm-set-value!) (f2d30 core-prim . vm?) (f2d2f core-prim . main-vm?) (f2d2e core-prim . vm-eval) (f2d2d core-prim . vm-self) (f2d2c core-prim . vm-start!) (f2d2b core-prim . make-vm) (f2d2a core-prim . mutex-try-lock!) (f2d29 core-prim . mutex-unlock!) (f2d28 core-prim . mutex-lock!) (f2d27 core-prim . mutex?) (f2d26 core-prim . make-mutex) (f2d25 core-prim . condition-variable-notify-all!) (f2d24 core-prim . condition-variable-notify!) (f2d23 core-prim . condition-variable-wait!) (f2d22 core-prim . make-condition-variable) (f2d21 core-prim . write/ss) (f2d20 core-prim . mosh-executable-path) (f2d1f core-prim . make-file-options) (f2d1e core-prim . source-info) (f2d1d core-prim . make-compiler-instruction) (f2d1c core-prim . make-instruction) (f2d1b core-prim . set-source-info!) (f2d1a core-prim . bignum?) (f2d19 core-prim . fast-equal?) (f2d18 core-prim . fasl-read) (f2d17 core-prim . fasl-write) (f2d16 core-prim . time-usage) (f2d15 core-prim . os-constant) (f2d14 core-prim . condition-printer) (f2d13 core-prim . disasm) (f5a4 core-prim . make-parameter) (f2d12 core-prim . socket-port) (f2d11 core-prim . socket-shutdown) (f2d10 core-prim . socket-close) (f2d0f core-prim . socket-send) (f2d0e core-prim . socket-recv!) (f2d0d core-prim . socket-recv) (f2d0c core-prim . make-server-socket) (f2d0b core-prim . make-client-socket) (f2d0a core-prim . socket-accept) (f2d09 core-prim . socket?) (f2d08 core-prim . string-upcase) (f2d07 core-prim . string-titlecase) (f2d06 core-prim . string-normalize-nfkd) (f2d05 core-prim . string-normalize-nfkc) (f2d04 core-prim . string-normalize-nfd) (f2d03 core-prim . string-normalize-nfc) (f2d02 core-prim . string-foldcase) (f2d01 core-prim . string-downcase) (f2d00 core-prim . string-ci>?) (f2cff core-prim . string-ci>=?) (f2cfe core-prim . string-ci=?) (f2cfd core-prim . string-ci<?) (f2cfc core-prim . string-ci<=?) (f2cfb core-prim . char-whitespace?) (f2cfa core-prim . char-upper-case?) (f2cf9 core-prim . char-title-case?) (f2cf8 core-prim . char-numeric?) (f2cf7 core-prim . char-lower-case?) (f2cf6 core-prim . char-general-category) (f2cf5 core-prim . char-upcase) (f2cf4 core-prim . char-titlecase) (f2cf3 core-prim . char-foldcase) (f2cf2 core-prim . char-downcase) (f2cf1 core-prim . char-ci>?) (f2cf0 core-prim . char-ci>=?) (f2cef core-prim . char-ci=?) (f2cee core-prim . char-ci<?) (f2ced core-prim . char-ci<=?) (f2cec core-prim . char-alphabetic?) (fba8 core-prim . make-variable-transformer) (fe5f core-prim . identifier?) (fe4b core-prim . generate-temporaries) (fe4d core-prim . free-identifier=?) (fe63 core-prim . syntax->datum) (fe61 core-prim . datum->syntax) (fe4f core-prim . bound-identifier=?) (f2ceb core-prim . record-type-descriptor?) (f2cea core-prim . record-predicate) (f2ce9 core-prim . record-mutator) (f2ce8 core-prim . record-constructor) (f2ce7 core-prim . record-accessor) (f2ce6 core-prim . make-record-type-descriptor) (f2ce5 core-prim . make-record-constructor-descriptor) (f2ce4 core-prim . record?) (f2ce3 core-prim . record-type-uid) (f2ce2 core-prim . record-type-sealed?) (f2ce1 core-prim . record-type-parent) (f2ce0 core-prim . record-type-opaque?) (f2cdf core-prim . record-type-name) (f2cde core-prim . record-type-generative?) (f2cdd core-prim . record-type-field-names) (f2cdc core-prim . record-rtd) (f2cdb core-prim . record-field-mutable?) (f2cda core-prim . delete-file) (f2cd9 core-prim . file-exists?) (f2cd8 core-prim . vector-sort!) (f2cd7 core-prim . vector-sort) (f2cd6 core-prim . list-sort) (f2cd5 core-prim . symbol-hash) (f2cd4 core-prim . string-ci-hash) (f2cd3 core-prim . string-hash) (f2cd2 core-prim . equal-hash) (f2cd1 core-prim . hashtable-equivalence-function) (f2cd0 core-prim . make-hashtable) (f2ccf core-prim . hashtable-hash-function) (f2cce core-prim . make-eqv-hashtable) (f2ccd core-prim . make-eq-hashtable) (f2ccc core-prim . hashtable?) (f2ccb core-prim . hashtable-update!) (f2cca core-prim . hashtable-size) (f2cc9 core-prim . hashtable-set!) (f2cc8 core-prim . hashtable-ref) (f2cc7 core-prim . hashtable-mutable?) (f2cc6 core-prim . hashtable-keys) (f2cc5 core-prim . hashtable-entries) (f2cc4 core-prim . hashtable-delete!) (f2cc3 core-prim . hashtable-copy) (f2cc2 core-prim . hashtable-contains?) (f2cc1 core-prim . hashtable-clear!) (f2cc0 core-prim . call-with-output-file) (f2cbf core-prim . call-with-input-file) (f2cbe core-prim . write-char) (f2cbd core-prim . write) (f2cbc core-prim . with-output-to-file) (f2cbb core-prim . with-input-from-file) (f2cba core-prim . read-char) (f2cb9 core-prim . read) (f2cb8 core-prim . peek-char) (f2cb7 core-prim . open-output-file) (f2cb6 core-prim . open-input-file) (f2cb5 core-prim . newline) (f2cb4 core-prim . display) (f2cb3 core-prim . close-output-port) (f2cb2 core-prim . close-input-port) (f2cb1 core-prim . eof-object?) (f2cb0 core-prim . eof-object) (f2caf core-prim . current-error-port) (f2cae core-prim . current-output-port) (f2cad core-prim . current-input-port) (f2cac core-prim . output-port?) (f2cab core-prim . input-port?) (f2caa core-prim . utf-8-codec) (f2ca9 core-prim . utf-16-codec) (f2ca8 core-prim . transcoder-error-handling-mode) (f2ca7 core-prim . transcoder-eol-style) (f2ca6 core-prim . transcoder-codec) (f2ca5 core-prim . transcoded-port) (f2ca4 core-prim . textual-port?) (f2ca3 core-prim . string->bytevector) (f2ca2 core-prim . standard-output-port) (f2ca1 core-prim . standard-input-port) (f2ca0 core-prim . standard-error-port) (f2c9f core-prim . set-port-position!) (f2c9e core-prim . put-u8) (f2c9d core-prim . put-string) (f2c9c core-prim . put-datum) (f2c9b core-prim . put-char) (f2c9a core-prim . put-bytevector) (f2c99 core-prim . port?) (f2c98 core-prim . port-transcoder) (f2c97 core-prim . port-position) (f2c96 core-prim . port-has-set-port-position!?) (f2c95 core-prim . port-has-port-position?) (f2c94 core-prim . port-eof?) (f2c93 core-prim . output-port-buffer-mode) (f2c92 core-prim . open-string-output-port) (f2c91 core-prim . open-string-input-port) (f2c90 core-prim . open-file-output-port) (f2c8f core-prim . open-file-input/output-port) (f2c8e core-prim . open-file-input-port) (f2c8d core-prim . open-bytevector-output-port) (f2c8c core-prim . open-bytevector-input-port) (f2c8b core-prim . native-transcoder) (f2c8a core-prim . native-eol-style) (f2c89 core-prim . make-transcoder) (f2c88 core-prim . latin-1-codec) (f2c87 core-prim . make-i/o-write-error) (f2c86 core-prim . make-i/o-read-error) (f2c85 core-prim . make-i/o-port-error) (f2c84 core-prim . make-i/o-invalid-position-error) (f2c83 core-prim . make-i/o-filename-error) (f2c82 core-prim . make-i/o-file-protection-error) (f2c81 core-prim . make-i/o-file-is-read-only-error) (f2c80 core-prim . make-i/o-file-does-not-exist-error) (f2c7f core-prim . make-i/o-file-already-exists-error) (f2c7e core-prim . make-i/o-error) (f2c7d core-prim . make-i/o-encoding-error) (f2c7c core-prim . make-i/o-decoding-error) (f2c7b core-prim . make-custom-textual-output-port) (f2c7a core-prim . make-custom-textual-input/output-port) (f2c79 core-prim . make-custom-textual-input-port) (f2c78 core-prim . make-custom-binary-output-port) (f2c77 core-prim . make-custom-binary-input/output-port) (f2c76 core-prim . make-custom-binary-input-port) (f2c75 core-prim . make-bytevector) (f2c74 core-prim . lookahead-u8) (f2c73 core-prim . lookahead-char) (f2c72 core-prim . i/o-write-error?) (f2c71 core-prim . i/o-read-error?) (f2c70 core-prim . i/o-port-error?) (f2c6f core-prim . i/o-invalid-position-error?) (f2c6e core-prim . i/o-filename-error?) (f2c6d core-prim . i/o-file-protection-error?) (f2c6c core-prim . i/o-file-is-read-only-error?) (f2c6b core-prim . i/o-file-does-not-exist-error?) (f2c6a core-prim . i/o-file-already-exists-error?) (f2c69 core-prim . i/o-error?) (f2c68 core-prim . i/o-error-position) (f2c67 core-prim . i/o-error-port) (f2c66 core-prim . i/o-error-filename) (f2c65 core-prim . i/o-encoding-error?) (f2c64 core-prim . i/o-encoding-error-char) (f2c63 core-prim . i/o-decoding-error?) (f2c62 core-prim . get-u8) (f2c61 core-prim . get-string-n!) (f2c60 core-prim . get-string-n) (f2c5f core-prim . get-string-all) (f2c5e core-prim . get-line) (f2c5d core-prim . get-datum) (f2c5c core-prim . get-char) (f2c5b core-prim . get-bytevector-some) (f2c5a core-prim . get-bytevector-n!) (f2c59 core-prim . get-bytevector-n) (f2c58 core-prim . get-bytevector-all) (f2c57 core-prim . flush-output-port) (f2c56 core-prim . close-port) (fe39 core-prim . scheme-report-environment) (f2c55 core-prim . quotient) (fe37 core-prim . null-environment) (f2c54 core-prim . remainder) (f2c53 core-prim . modulo) (f2c52 core-prim . inexact->exact) (f2c51 core-prim . force) (f2c50 core-prim . exact->inexact) (f2c4f core-prim . make-promise) (f2c4e core-prim . exit) (f28e0 core-prim . command-line) (f2c4d core-prim . string-fill!) (f2c4c core-prim . string-set!) (f2c4b core-prim . set-cdr!) (f2c4a core-prim . set-car!) (f2c49 core-prim . remove) (f2c48 core-prim . remv) (f2c47 core-prim . remp) (f2c46 core-prim . remq) (f2c45 core-prim . partition) (f2c44 core-prim . memv) (f2c43 core-prim . memq) (f2c42 core-prim . memp) (f2c41 core-prim . member) (f2c40 core-prim . exists) (f2c3f core-prim . for-all) (f2c3e core-prim . fold-right) (f2c3d core-prim . fold-left) (f2c3c core-prim . find) (f2c3b core-prim . filter) (f2c3a core-prim . cons*) (f2c39 core-prim . assv) (f2c38 core-prim . assq) (f2c37 core-prim . assp) (f2c36 core-prim . assoc) (f2c35 core-prim . call-with-string-output-port) (f2c34 core-prim . call-with-port) (f2c33 core-prim . call-with-bytevector-output-port) (f2c32 core-prim . bytevector->string) (f2c31 core-prim . buffer-mode?) (f2c30 core-prim . binary-port?) (f2c2f core-prim . with-exception-handler) (f2c2e core-prim . raise-continuable) (f2c2d core-prim . raise) (fe3d core-prim . eval) (fe35 core-prim . environment) (f2c2c core-prim . make-enumeration) (f2c2b core-prim . enum-set=?) (f2c2a core-prim . enum-set-universe) (f2c29 core-prim . enum-set-union) (f2c28 core-prim . enum-set-subset?) (f2c27 core-prim . enum-set-projection) (f2c26 core-prim . enum-set-member?) (f2c25 core-prim . enum-set-intersection) (f2c24 core-prim . enum-set-indexer) (f2c23 core-prim . enum-set-difference) (f2c22 core-prim . enum-set-constructor) (f2c21 core-prim . enum-set-complement) (f2c20 core-prim . enum-set->list) (f2c1f core-prim . who-condition?) (f2c1e core-prim . warning?) (f2c1d core-prim . violation?) (f2c1c core-prim . undefined-violation?) (f2c1b core-prim . syntax-violation?) (f2c1a core-prim . syntax-violation-subform) (f2c19 core-prim . syntax-violation-form) (fe5d core-prim . syntax-violation) (f2c18 core-prim . simple-conditions) (f2c17 core-prim . serious-condition?) (f2c16 core-prim . non-continuable-violation?) (f2c15 core-prim . message-condition?) (f2c14 core-prim . make-who-condition) (f2c13 core-prim . make-warning) (f2c12 core-prim . make-violation) (f2c11 core-prim . make-undefined-violation) (f2c10 core-prim . make-syntax-violation) (f2c0f core-prim . make-serious-condition) (f2c0e core-prim . make-non-continuable-violation) (f2c0d core-prim . make-message-condition) (f2c0c core-prim . make-lexical-violation) (f2c0b core-prim . make-irritants-condition) (f2c0a core-prim . make-implementation-restriction-violation) (f2c09 core-prim . make-error) (f2c08 core-prim . make-assertion-violation) (f2c07 core-prim . lexical-violation?) (f2c06 core-prim . irritants-condition?) (f2c05 core-prim . implementation-restriction-violation?) (f2c04 core-prim . error?) (f2c03 core-prim . condition-who) (f2c02 core-prim . condition-predicate) (f2c01 core-prim . condition-message) (f2c00 core-prim . condition-irritants) (f2bff core-prim . condition-accessor) (f2bfe core-prim . condition) (f2bfd core-prim . assertion-violation?) (f2bfc core-prim . condition?) (f2bfb core-prim . utf32->string) (f2bfa core-prim . utf16->string) (f2bf9 core-prim . utf8->string) (f2bf8 core-prim . uint-list->bytevector) (f2bf7 core-prim . u8-list->bytevector) (f2bf6 core-prim . string->utf8) (f2bf5 core-prim . string->utf32) (f2bf4 core-prim . string->utf16) (f2bf3 core-prim . sint-list->bytevector) (f2bf2 core-prim . native-endianness) (f2bf1 core-prim . bytevector?) (f2bf0 core-prim . bytevector=?) (f2bef core-prim . bytevector-uint-set!) (f2bee core-prim . bytevector-uint-ref) (f2bed core-prim . bytevector-u8-set!) (f2bec core-prim . bytevector-u8-ref) (f2beb core-prim . bytevector-u64-set!) (f2bea core-prim . bytevector-u64-ref) (f2be9 core-prim . bytevector-u64-native-set!) (f2be8 core-prim . bytevector-u64-native-ref) (f2be7 core-prim . bytevector-u32-set!) (f2be6 core-prim . bytevector-u32-ref) (f2be5 core-prim . bytevector-u32-native-set!) (f2be4 core-prim . bytevector-u32-native-ref) (f2be3 core-prim . bytevector-u16-set!) (f2be2 core-prim . bytevector-u16-ref) (f2be1 core-prim . bytevector-u16-native-set!) (f2be0 core-prim . bytevector-u16-native-ref) (f2bdf core-prim . bytevector-sint-set!) (f2bde core-prim . bytevector-sint-ref) (f2bdd core-prim . bytevector-s8-set!) (f2bdc core-prim . bytevector-s8-ref) (f2bdb core-prim . bytevector-s64-set!) (f2bda core-prim . bytevector-s64-ref) (f2bd9 core-prim . bytevector-s64-native-set!) (f2bd8 core-prim . bytevector-s64-native-ref) (f2bd7 core-prim . bytevector-s32-set!) (f2bd6 core-prim . bytevector-s32-ref) (f2bd5 core-prim . bytevector-s32-native-set!) (f2bd4 core-prim . bytevector-s32-native-ref) (f2bd3 core-prim . bytevector-s16-set!) (f2bd2 core-prim . bytevector-s16-ref) (f2bd1 core-prim . bytevector-s16-native-set!) (f2bd0 core-prim . bytevector-s16-native-ref) (f2bcf core-prim . bytevector-length) (f2bce core-prim . bytevector-ieee-single-ref) (f2bcd core-prim . bytevector-ieee-single-set!) (f2bcc core-prim . bytevector-ieee-single-native-set!) (f2bcb core-prim . bytevector-ieee-single-native-ref) (f2bca core-prim . bytevector-ieee-double-set!) (f2bc9 core-prim . bytevector-ieee-double-ref) (f2bc8 core-prim . bytevector-ieee-double-native-set!) (f2bc7 core-prim . bytevector-ieee-double-native-ref) (f2bc6 core-prim . bytevector-fill!) (f2bc5 core-prim . bytevector-copy!) (f2bc4 core-prim . bytevector-copy) (f2bc3 core-prim . bytevector->uint-list) (f2bc2 core-prim . bytevector->u8-list) (f2bc1 core-prim . bytevector->sint-list) (f2bc0 core-prim . no-nans-violation?) (f2bbf core-prim . no-infinities-violation?) (f2bbe core-prim . make-no-nans-violation) (f2bbd core-prim . make-no-infinities-violation) (f2bbc core-prim . real->flonum) (f2bbb core-prim . flzero?) (f2bba core-prim . fltruncate) (f2bb9 core-prim . fltan) (f2bb8 core-prim . flsqrt) (f2bb7 core-prim . flsin) (f2bb6 core-prim . flround) (f2bb5 core-prim . flpositive?) (f2bb4 core-prim . flonum?) (f2bb3 core-prim . flodd?) (f2bb2 core-prim . flnumerator) (f2bb1 core-prim . flnegative?) (f2bb0 core-prim . flnan?) (f2baf core-prim . flmod0) (f2bae core-prim . flmod) (f2bad core-prim . flmin) (f2bac core-prim . flmax) (f2bab core-prim . fllog) (f2baa core-prim . flinteger?) (f2ba9 core-prim . flinfinite?) (f2ba8 core-prim . flfloor) (f2ba7 core-prim . flfinite?) (f2ba6 core-prim . flexpt) (f2ba5 core-prim . flexp) (f2ba4 core-prim . fleven?) (f2ba3 core-prim . fldiv0-and-mod0) (f2ba2 core-prim . fldiv0) (f2ba1 core-prim . fldiv-and-mod) (f2ba0 core-prim . fldiv) (f2b9f core-prim . fldenominator) (f2b9e core-prim . flcos) (f2b9d core-prim . flceiling) (f2b9c core-prim . flatan) (f2b9b core-prim . flasin) (f2b9a core-prim . flacos) (f2b99 core-prim . flabs) (f2b98 core-prim . fl>?) (f2b97 core-prim . fl>=?) (f2b96 core-prim . fl=?) (f2b95 core-prim . fl<?) (f2b94 core-prim . fl<=?) (f2b93 core-prim . fl/) (f2b92 core-prim . fl-) (f2b91 core-prim . fl+) (f2b90 core-prim . fl*) (f2b8f core-prim . fixnum->flonum) (f2b8e core-prim . fxzero?) (f2b8d core-prim . fxxor) (f2b8c core-prim . fxrotate-bit-field) (f2b8b core-prim . fxreverse-bit-field) (f2b8a core-prim . fxpositive?) (f2b89 core-prim . fxodd?) (f2b88 core-prim . fxnot) (f2b87 core-prim . fxnegative?) (f2b86 core-prim . fxmod0) (f2b85 core-prim . fxmod) (f2b84 core-prim . fxmin) (f2b83 core-prim . fxmax) (f2b82 core-prim . fxlength) (f2b81 core-prim . fxior) (f2b80 core-prim . fxif) (f2b7f core-prim . fxfirst-bit-set) (f2b7e core-prim . fxeven?) (f2b7d core-prim . fxdiv0-and-mod0) (f2b7c core-prim . fxdiv0) (f2b7b core-prim . fxdiv-and-mod) (f2b7a core-prim . fxdiv) (f2b79 core-prim . fxcopy-bit-field) (f2b78 core-prim . fxcopy-bit) (f2b77 core-prim . fxbit-set?) (f2b76 core-prim . fxbit-field) (f2b75 core-prim . fxbit-count) (f2b74 core-prim . fxarithmetic-shift-right) (f2b73 core-prim . fxarithmetic-shift-left) (f2b72 core-prim . fxarithmetic-shift) (f2b71 core-prim . fxand) (f2b70 core-prim . fx>?) (f2b6f core-prim . fx>=?) (f2b6e core-prim . fx=?) (f2b6d core-prim . fx<?) (f2b6c core-prim . fx<=?) (f2b6b core-prim . fx-/carry) (f2b6a core-prim . fx-) (f2b69 core-prim . fx+/carry) (f2b68 core-prim . fx+) (f2b67 core-prim . fx*/carry) (f2b66 core-prim . fx*) (f2b65 core-prim . greatest-fixnum) (f2b64 core-prim . least-fixnum) (f2b63 core-prim . fixnum-width) (f2b62 core-prim . fixnum?) (f2b61 core-prim . bitwise-rotate-bit-field) (f2b60 core-prim . bitwise-reverse-bit-field) (f2b5f core-prim . bitwise-length) (f2b5e core-prim . bitwise-if) (f2b5d core-prim . bitwise-first-bit-set) (f2b5c core-prim . bitwise-copy-bit-field) (f2b5b core-prim . bitwise-copy-bit) (f2b5a core-prim . bitwise-bit-set?) (f2b59 core-prim . bitwise-bit-field) (f2b58 core-prim . bitwise-bit-count) (f2b57 core-prim . bitwise-xor) (f2b56 core-prim . bitwise-ior) (f2b55 core-prim . bitwise-and) (f2b54 core-prim . bitwise-not) (f2b53 core-prim . bitwise-arithmetic-shift-right) (f2b52 core-prim . bitwise-arithmetic-shift-left) (f2b51 core-prim . bitwise-arithmetic-shift) (f2b50 core-prim . zero?) (f2b4f core-prim . vector?) (f2b4e core-prim . vector-set!) (f2b4d core-prim . vector-ref) (f2b4c core-prim . vector-map) (f2b4b core-prim . vector-length) (f2b4a core-prim . vector-for-each) (f2b49 core-prim . vector-fill!) (f2b48 core-prim . vector->list) (f2b47 core-prim . vector) (f2b46 core-prim . values) (f2b45 core-prim . truncate) (f2b44 core-prim . tan) (f2b43 core-prim . symbol?) (f2b42 core-prim . symbol=?) (f2b41 core-prim . symbol->string) (f2b40 core-prim . substring) (f2b3f core-prim . string?) (f2b3e core-prim . string>?) (f2b3d core-prim . string>=?) (f2b3c core-prim . string=?) (f2b3b core-prim . string<?) (f2b3a core-prim . string<=?) (f2b39 core-prim . string-ref) (f2b38 core-prim . string-length) (f2b37 core-prim . string-for-each) (f2b36 core-prim . string-copy) (f2b35 core-prim . string-append) (f2b34 core-prim . string->symbol) (f2b33 core-prim . string->number) (f2b32 core-prim . string->list) (f2b31 core-prim . string) (f2b30 core-prim . sqrt) (f2b2f core-prim . sin) (f2b2e core-prim . round) (f2b2d core-prim . reverse) (f2b2c core-prim . real?) (f2b2b core-prim . real-valued?) (f2b2a core-prim . real-part) (f2b29 core-prim . rationalize) (f2b28 core-prim . rational?) (f2b27 core-prim . rational-valued?) (f2b26 core-prim . procedure?) (f2b25 core-prim . positive?) (f2b24 core-prim . pair?) (f2b23 core-prim . odd?) (f2b22 core-prim . numerator) (f2b21 core-prim . number?) (f2b20 core-prim . number->string) (f2b1f core-prim . null?) (f2b1e core-prim . not) (f2b1d core-prim . negative?) (f2b1c core-prim . nan?) (f2b1b core-prim . min) (f2b1a core-prim . max) (f2b19 core-prim . map) (f2b18 core-prim . make-vector) (f2b17 core-prim . make-string) (f2b16 core-prim . make-rectangular) (f2b15 core-prim . make-polar) (f2b14 core-prim . magnitude) (f2b13 core-prim . log) (f2b12 core-prim . list?) (f2b11 core-prim . list-tail) (f2b10 core-prim . list-ref) (f2b0f core-prim . list->vector) (f2b0e core-prim . list->string) (f2b0d core-prim . list) (f2b0c core-prim . length) (f2b0b core-prim . lcm) (f2b0a core-prim . integer?) (f2b09 core-prim . integer-valued?) (f2b08 core-prim . integer->char) (f2b07 core-prim . infinite?) (f2b06 core-prim . inexact?) (f2b05 core-prim . inexact) (f2b04 core-prim . imag-part) (f2b03 core-prim . gcd) (f2b02 core-prim . for-each) (f2b01 core-prim . floor) (f2b00 core-prim . finite?) (f2aff core-prim . expt) (f2afe core-prim . exp) (f2afd core-prim . exact?) (f2afc core-prim . exact-integer-sqrt) (f2afb core-prim . exact) (f2afa core-prim . even?) (f2af9 core-prim . error) (f2af8 core-prim . eqv?) (f2af7 core-prim . equal?) (f2af6 core-prim . eq?) (f2af5 core-prim . dynamic-wind) (f2af4 core-prim . div0-and-mod0) (f2af3 core-prim . mod0) (f2af2 core-prim . div0) (f2af1 core-prim . div-and-mod) (f2af0 core-prim . mod) (f2aef core-prim . div) (f2aee core-prim . denominator) (f2aed core-prim . cos) (f2aec core-prim . cons) (f2aeb core-prim . complex?) (f2aea core-prim . char?) (f2ae9 core-prim . char>?) (f2ae8 core-prim . char>=?) (f2ae7 core-prim . char=?) (f2ae6 core-prim . char<?) (f2ae5 core-prim . char<=?) (f2ae4 core-prim . char->integer) (f2ae3 core-prim . ceiling) (f2ae2 core-prim . call-with-values) (f2ae1 core-prim . call/cc) (f2ae0 core-prim . call-with-current-continuation) (f2adf core-prim . cddddr) (f2ade core-prim . cdddar) (f2add core-prim . cddadr) (f2adc core-prim . cddaar) (f2adb core-prim . cdaddr) (f2ada core-prim . cdadar) (f2ad9 core-prim . cdaadr) (f2ad8 core-prim . cdaaar) (f2ad7 core-prim . cadddr) (f2ad6 core-prim . caddar) (f2ad5 core-prim . cadadr) (f2ad4 core-prim . cadaar) (f2ad3 core-prim . caaddr) (f2ad2 core-prim . caadar) (f2ad1 core-prim . caaadr) (f2ad0 core-prim . caaaar) (f2acf core-prim . cdddr) (f2ace core-prim . cddar) (f2acd core-prim . cdadr) (f2acc core-prim . cdaar) (f2acb core-prim . caddr) (f2aca core-prim . cadar) (f2ac9 core-prim . caadr) (f2ac8 core-prim . caaar) (f2ac7 core-prim . cddr) (f2ac6 core-prim . cdar) (f2ac5 core-prim . cadr) (f2ac4 core-prim . caar) (f2ac3 core-prim . cdr) (f2ac2 core-prim . car) (f2ac1 core-prim . boolean?) (f2ac0 core-prim . boolean=?) (f2abf core-prim . atan) (f2abe core-prim . assertion-violation) (fe57 core-prim . assertion-error) (f2abd core-prim . asin) (f2abc core-prim . apply) (f2abb core-prim . append) (f2aba core-prim . angle) (f2ab9 core-prim . acos) (f2ab8 core-prim . abs) (f2ab7 core-prim . /) (f2ab6 core-prim . *) (f2ab5 core-prim . -) (f2ab4 core-prim . +) (f2ab3 core-prim . >=) (f2ab2 core-prim . >) (f2ab1 core-prim . =) (f2ab0 core-prim . <=) (f2aaf core-prim . <) (f2aae core-prim . library) (f2aad $core-rtd &no-nans-rtd &no-nans-rcd) (f2aac $core-rtd &no-infinities-rtd &no-infinities-rcd) (f2aab $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (f2aaa $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (f2aa9 $core-rtd &i/o-port-rtd &i/o-port-rcd) (f2aa8 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (f2aa7 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (f2aa6 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (f2aa5 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (f2aa4 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (f2aa3 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (f2aa2 $core-rtd &i/o-write-rtd &i/o-write-rcd) (f2aa1 $core-rtd &i/o-read-rtd &i/o-read-rcd) (f2aa0 $core-rtd &i/o-rtd &i/o-rcd) (f2a9f $core-rtd &undefined-rtd &undefined-rcd) (f2a9e $core-rtd &syntax-rtd &syntax-rcd) (f2a9d $core-rtd &lexical-rtd &lexical-rcd) (f2a9c $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (f2a9b $core-rtd &non-continuable-rtd &non-continuable-rcd) (f2a9a $core-rtd &who-rtd &who-rcd) (f2a99 $core-rtd &irritants-rtd &irritants-rcd) (f2a98 $core-rtd &assertion-rtd &assertion-rcd) (f2a97 $core-rtd &violation-rtd &violation-rcd) (f2a96 $core-rtd &error-rtd &error-rcd) (f2a95 $core-rtd &serious-rtd &serious-rcd) (f2a94 $core-rtd &warning-rtd &warning-rcd) (f2a93 $core-rtd &message-rtd &message-rcd) (f2a92 $core-rtd &condition-rtd &condition-rcd) (f2a91 macro . define-condition-type) (f2a90 macro . define-enumeration) (f2a8f macro . define-record-type) (f2a8e macro . parent-rtd) (f2a8d macro . nongenerative) (f2a8c macro . opaque) (f2a8b macro . sealed) (f2a8a macro . protocol) (f2a89 macro . parent) (f2a88 macro . immutable) (f2a87 macro . mutable) (f2a86 macro . fields) (f2a85 macro . error-handling-mode) (f2a84 macro . file-options) (f2a83 macro . buffer-mode) (f2a82 macro . eol-style) (f2a81 macro . guard) (f2a80 macro . trace-define) (f2a7f macro . trace-lambda) (f2a7e macro . unsyntax-splicing) (f2a7d macro . unsyntax) (f2a7c macro . unquote-splicing) (f2a7b macro . unquote) (f2a7a macro . _) (f2a79 macro . else) (f2a78 macro . =>) (f2a77 macro . ...) (f2a76 macro . assert) (f2a75 macro . endianness) (f2a74 macro . delay) (f2a73 macro . time) (f2a72 macro . do) (f2a71 macro . cond) (f2a70 macro . let*) (f2a6f macro . let*-values) (f2a6e macro . let-values) (f2a6d macro . identifier-syntax) (f2a6c macro . with-syntax) (f2a6b macro . quasisyntax) (f2a6a macro . quasiquote) (f2a69 macro . syntax-rules) (f2a68 macro . include) (f2a67 macro . define-struct) (f2a66 core-macro . record-constructor-descriptor) (f2a65 core-macro . record-type-descriptor) (f2a64 macro . case) (f2a63 macro . parameterize) (f2a62 macro . unless) (f2a61 macro . when) (f2a60 core-macro . or) (f2a5f core-macro . and) (f2a5e core-macro . if) (f2a5d core-macro . let) (f2a5c core-macro . letrec*) (f2a5b core-macro . letrec) (f2a5a core-macro . type-descriptor) (f2a59 core-macro . case-lambda) (f2a58 core-macro . lambda) (f2a57 core-macro . syntax) (f2a56 core-macro . syntax-case) (f2a55 core-macro . quote) (f2a54 core-macro . foreign-call) (f2a53 letrec-syntax) (f2a52 let-syntax) (f2a51 set!) (f2a50 import) (f2a4f begin) (f2a4e module) (f2a4d define-syntax) (f2a4c define)) values values '#f '#f '#f '#f) (f991@f7dd@install-library 'f2e12 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . f2db9) (eval-core . f2db8) (set-symbol-value! . f2db7) (symbol-value . f2db6) (gensym . f2db5) (void . f2db4)) '() values values '#f '#f '#f '#f) (f991@f7dd@install-library 'f2e13 '(mosh) '() '() '() '() '((set-symbol-value! . f2db7) (symbol-value . f2db6) (regexp? . f2db2) (read-line . f2db1) (ungensym . f2daf) (alist->eq-hash-table . f2dae) (assoc-ref . f2dad) (print . f2dac) (format . f2dab) (host-os . f2daa) (library-path . f7bc) (standard-library-path . f2da9) (file-newer? . f2da3) (stat-mtime . f2da2) (digit->integer . f2d9e) (call-with-string-input-port . f2d9d) (call-with-string-io . f2d9c) (string-split . f2d9b) (bytevector-for-each . f2d9a) (string->regexp . f2d99) (rxmatch . f2d98) (regexp-replace-all . f2d97) (hashtable-for-each . f2d96) (set-current-directory! . f2d91) (expand-path . f2d90) (current-directory . f2d8f) (p . f2d50) (get-timeofday . f2d37) (get-command-line . f2d36) (sys-display . f2d35) (whereis . f2d34) (register . f2d33) (vm-join! . f2d32) (vm-set-value! . f2d31) (vm? . f2d30) (main-vm? . f2d2f) (vm-eval . f2d2e) (vm-self . f2d2d) (vm-start! . f2d2c) (make-vm . f2d2b) (mutex-try-lock! . f2d2a) (mutex-unlock! . f2d29) (mutex-lock! . f2d28) (mutex? . f2d27) (make-mutex . f2d26) (condition-variable-notify-all! . f2d25) (condition-variable-notify! . f2d24) (condition-variable-wait! . f2d23) (make-condition-variable . f2d22) (write/ss . f2d21) (mosh-executable-path . f2d20) (make-file-options . f2d1f) (source-info . f2d1e) (make-compiler-instruction . f2d1d) (make-instruction . f2d1c) (set-source-info! . f2d1b) (bignum? . f2d1a) (fast-equal? . f2d19) (fasl-read . f2d18) (fasl-write . f2d17) (time-usage . f2d16) (os-constant . f2d15) (condition-printer . f2d14) (time . f2a73) (include . f2a68)) '() values values '#f '#f '#f '#f) (f991@f7dd@install-library 'f2e14 '(system) '() '() '() '() '((gensym-prefix-set! . f2db0) (ssl-supported? . f2da8) (ssl-socket? . f2da7) (socket-sslize! . f2da6) (%monapi-name-whereis . f2da5) (%monapi-message-send . f2da4) (write-to-file . f2da1) (file->list . f2da0) (file->string . f2d9f) (mosh-cache-dir . f5a6) (call-process . f2d95) (local-tz-offset . f2d94) (microseconds . f2d93) (directory-list . f2d92) (expand-path . f2d90) (%spawn . f2d8e) (%waitpid . f2d8d) (simple-struct-name . f2d8c) (simple-struct-set! . f2d8b) (simple-struct-ref . f2d8a) (make-simple-struct . f2d89) (simple-struct? . f2d88) (pointer-ref-c-int64 . f2d87) (pointer-ref-c-int32 . f2d86) (pointer-ref-c-int16 . f2d85) (pointer-ref-c-int8 . f2d84) (pointer-ref-c-uint64 . f2d83) (pointer-ref-c-uint32 . f2d82) (pointer-ref-c-uint16 . f2d81) (pointer-ref-c-uint8 . f2d80) (pointer-set-c-uint64! . f2d7f) (pointer-set-c-uint32! . f2d7e) (pointer-set-c-uint16! . f2d7d) (pointer-set-c-uint8! . f2d7c) (pointer-set-c-int64! . f2d7b) (pointer-set-c-int32! . f2d7a) (pointer-set-c-int16! . f2d79) (pointer-set-c-int8! . f2d78) (pointer-set-c-pointer! . f2d77) (pointer-set-c-double! . f2d76) (pointer-set-c-float! . f2d75) (pointer-set-c-long-long! . f2d74) (pointer-set-c-long! . f2d73) (pointer-set-c-int! . f2d72) (pointer-set-c-short! . f2d71) (pointer-set-c-char! . f2d70) (pointer-ref-c-pointer . f2d6f) (pointer-ref-c-double . f2d6e) (pointer-ref-c-float . f2d6d) (pointer-ref-c-unsigned-long-long . f2d6c) (pointer-ref-c-signed-long-long . f2d6b) (pointer-ref-c-unsigned-long . f2d6a) (pointer-ref-c-signed-long . f2d69) (pointer-ref-c-unsigned-int . f2d68) (pointer-ref-c-signed-int . f2d67) (pointer-ref-c-unsigned-short . f2d66) (pointer-ref-c-signed-short . f2d65) (pointer-ref-c-unsigned-char . f2d64) (pointer-ref-c-signed-char . f2d63) (pointer->integer . f2d62) (integer->pointer . f2d61) (pointer? . f2d60) (shared-errno . f2d5f) (%ffi-free-c-callback-trampoline . f2d5e) (%ffi-make-c-callback-trampoline . f2d5d) (%ffi-free . f2d5c) (%ffi-malloc . f2d5b) (%ffi-supported? . f2d5a) (%ffi-pointer->string . f2d59) (%ffi-call . f2d58) (%ffi-lookup . f2d57) (%ffi-open . f2d56) (null-terminated-utf8->string . f2d55) (null-terminated-bytevector->string . f2d54) (%exec . f2d53) (%fork . f2d52) (%pipe . f2d51) (open-output-string . f2d4f) (get-output-string . f2d4e) (file-stat-ctime . f2d4d) (file-stat-atime . f2d4c) (file-stat-mtime . f2d4b) (file-size-in-bytes . f2d4a) (file-writable? . f2d49) (file-executable? . f2d48) (file-readable? . f2d47) (file-regular? . f2d46) (file-symbolic-link? . f2d45) (file-directory? . f2d44) (create-symbolic-link . f2d43) (rename-file . f2d42) (delete-directory . f2d41) (create-directory . f2d40) (create-mosh-cache-dir . f2d3f) (get-environment-variables . f2d3e) (current-exception-handler . f2d3d) (get-environment-variable . f2d3c) (join-wraps . f2d3b) (id->real-label . f2d3a) (same-marks? . f2d39) (same-marks*? . f2d38) (disasm . f2d13) (make-parameter . f5a4) (socket-port . f2d12) (socket-shutdown . f2d11) (socket-close . f2d10) (socket-send . f2d0f) (socket-recv! . f2d0e) (socket-recv . f2d0d) (make-server-socket . f2d0c) (make-client-socket . f2d0b) (socket-accept . f2d0a) (socket? . f2d09) (parameterize . f2a63)) '() values values '#f '#f '#f '#f)))
(begin (set! f28cb@ref (unspecified)) (set! f28cd@x* (unspecified)) (set! f28cf@add-library-path! (unspecified)) (set! f28d1@parse-and-add-library-path (unspecified)) (set! f28d3@for-each-with-index (unspecified)) (set! f28d5@rpad (unspecified)) (set! f28d7@condition-printer/p (unspecified)) (set! f28d9@record->field-alist (unspecified)) (set! f28db@map-with-index (unspecified)) (set! f28dd@repl (unspecified)) (set! f28df@trace-printer (unspecified)) (set! f28e1@command-line (unspecified)) (set! f28e3@local-library-path (unspecified)) (set! f28e5@load/args (unspecified)) (set! f28e7@load (unspecified)) (set! f28e9@ironscheme-build (unspecified)) (set! f28eb@eval-top-level (unspecified)) (set! f28ed@compile-system-libraries (unspecified)) (set! f28ef@compile (unspecified)) (set! f28f1@compile->closure (unspecified)) (set! f28f3@pre-compile-r6rs-file (unspecified)) (set! f28f5@load-r6rs-top-level (unspecified)) (set! f28f7@load-r6rs-top-level-sexp (unspecified)) (set! f28f9@prefix-inc (unspecified)) (set! f28fb@prefix-inc! (unspecified)) (set! f28cb@ref (lambda (f2936@rtd f2937@i f2938@x) (let ((f293c@val ((record-accessor f2936@rtd f2937@i) f2938@x))) (if (symbol? f293c@val) (ungensym f293c@val) f293c@val)))) (set! f2a32@f28cb@ref f28cb@ref) (set! f28cd@x* '()) (set! f2a33@f28cd@x* f28cd@x*) (set! f28cf@add-library-path! (lambda (f293e@path) (f981@f7bd@library-path (append (f981@f7bd@library-path) (list f293e@path))))) (set! f2a34@f28cf@add-library-path! f28cf@add-library-path!) (set! f28d1@parse-and-add-library-path (lambda (f2940@paths f2941@message) (letrec* ((f2945@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((f2946@t f2940@paths)) (if f2946@t ((lambda (f2948@paths) (for-each (lambda (f294a@path) (if (file-exists? f294a@path) (f28cf@add-library-path! (expand-path f294a@path)) (format (current-error-port) f2941@message f294a@path))) (string-split f2948@paths f2945@separator))) f2946@t) (void)))))) (set! f2a35@f28d1@parse-and-add-library-path f28d1@parse-and-add-library-path) (set! f28d3@for-each-with-index (lambda (f294c@proc f294d@lst) (letrec ((f2950@loop (lambda (f2952@i f2953@lst) (if (null? f2953@lst) (if '#f '#f (void)) (begin (f294c@proc f2952@i (car f2953@lst)) (f2950@loop (+ f2952@i '1) (cdr f2953@lst))))))) (f2950@loop '1 f294d@lst)))) (set! f2a36@f28d3@for-each-with-index f28d3@for-each-with-index) (set! f28d5@rpad (lambda (f2956@str f2957@pad f2958@n) (let ((f295c@rest (- f2958@n (string-length (format '"~a" f2956@str))))) (let f2962@loop ((f295e@rest f295c@rest) (f295f@ret (format '"~a" f2956@str))) (if (<= f295e@rest '0) f295f@ret (f2962@loop (- f295e@rest '1) (string-append f295f@ret f2957@pad))))))) (set! f2a37@f28d5@rpad f28d5@rpad) (set! f28d7@condition-printer/p (lambda (f2964@e f2965@port) (letrec* ((f2969@max-condition-len (apply max (map (lambda (f297a@c) (string-length (symbol->string (record-type-name (record-rtd f297a@c))))) (simple-conditions f2964@e))))) (begin (display '" Condition components:\n" f2965@port) (f28d3@for-each-with-index (lambda (f296a@i f296b@x) (let ((f296e@rtd (record-rtd f296b@x)) (f296f@fields-alist (f28d9@record->field-alist f296b@x))) (begin (format f2965@port '" ~d. ~a" f296a@i (f28d5@rpad (symbol->string (record-type-name f296e@rtd)) '" " f2969@max-condition-len)) (if (null? f296f@fields-alist) (newline f2965@port) (void)) (let f2976@loop ((f2972@first '#t) (f2973@fields-alist f296f@fields-alist)) (if (null? f2973@fields-alist) '() (let ((f2978@field (car f2973@fields-alist))) (begin (if (not f2972@first) (display (f28d5@rpad '"" '" " (+ '4 f2969@max-condition-len)) f2965@port) (void)) (display '"       " f2965@port) (display (car f2978@field) f2965@port) (display '": " f2965@port) (write (cdr f2978@field) f2965@port) (newline f2965@port) (f2976@loop '#f (cdr f2973@fields-alist))))))))) (simple-conditions f2964@e)))))) (set! f2a38@f28d7@condition-printer/p f28d7@condition-printer/p) (set! f28d9@record->field-alist (lambda (f297c@r) (letrec* ((f297f@ref (lambda (f298a@rtd f298b@i f298c@x) (let ((f2990@val ((record-accessor f298a@rtd f298b@i) f298c@x))) (if (symbol? f2990@val) (ungensym f2990@val) f2990@val))))) (let f2984@loop ((f2980@ret '()) (f2981@rtd (record-rtd f297c@r))) (if f2981@rtd (f2984@loop (append f2980@ret (f28db@map-with-index (lambda (f2986@i f2987@field) (cons f2987@field (f297f@ref f2981@rtd f2986@i f297c@r))) (vector->list (record-type-field-names f2981@rtd)))) (record-type-parent f2981@rtd)) f2980@ret))))) (set! f2a39@f28d9@record->field-alist f28d9@record->field-alist) (set! f28db@map-with-index (lambda (f2992@proc f2993@lst) (let f299c@loop ((f2996@i '0) (f2997@lst f2993@lst) (f2998@ret '())) (if (null? f2997@lst) (reverse f2998@ret) (f299c@loop (+ f2996@i '1) (cdr f2997@lst) (cons (f2992@proc f2996@i (car f2997@lst)) f2998@ret)))))) (set! f2a3a@f28db@map-with-index f28db@map-with-index) (set! f28dd@repl (lambda f299e@x (letrec* ((f29a1@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (f29a4@f29a2) (lambda () (with-exception-handler (lambda (f29a6@e) ((call/cc (lambda (f29a8@f29a3) (f29a4@f29a2 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? f29a6@e) (f28d7@condition-printer/p f29a6@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" f29a6@e))) (f29a8@f29a3 (lambda () (raise-continuable f29a6@e)))))))))) (lambda () (let f29ae@loop ((f29aa@line (get-line (current-input-port))) (f29ab@accum '"")) (letrec* ((f29b1@parentheses-ok? (lambda (f29bc@text) (let f29c4@loop ((f29be@chars (string->list f29bc@text)) (f29bf@p0 '0) (f29c0@p1 '0)) (if (null? f29be@chars) (= '0 f29bf@p0 f29c0@p1) (let ((f29c6@t (car f29be@chars))) (if (memv f29c6@t '(#\()) (f29c4@loop (cdr f29be@chars) (+ f29bf@p0 '1) f29c0@p1) (if (memv f29c6@t '(#\))) (f29c4@loop (cdr f29be@chars) (- f29bf@p0 '1) f29c0@p1) (if (memv f29c6@t '(#\[)) (f29c4@loop (cdr f29be@chars) f29bf@p0 (+ f29c0@p1 '1)) (if (memv f29c6@t '(#\])) (f29c4@loop (cdr f29be@chars) f29bf@p0 (- f29c0@p1 '1)) (f29c4@loop (cdr f29be@chars) f29bf@p0 f29c0@p1)))))))))) (f29b3@eval-string-print (lambda (f29b6@text) (if (not (or (string=? '"\n" f29b6@text) (= '0 (string-length f29b6@text)))) (call-with-values (lambda () (f28eb@eval-top-level (call-with-port (open-string-input-port f29b6@text) read))) (lambda f29b8@out* (for-each (lambda (f29ba@out) (begin (write f29ba@out) (newline))) f29b8@out*))) (void))))) (if (eof-object? f29aa@line) (begin (f29b3@eval-string-print f29ab@accum) (exit)) (let ((f29b4@current (string-append f29ab@accum f29aa@line))) (if (f29b1@parentheses-ok? f29b4@current) (f29b3@eval-string-print f29b4@current) (f29ae@loop (get-line (current-input-port)) f29b4@current)))))))))))) (newline) (f29a1@rec))))) (f29a1@rec)))) (set! f2a3b@f28dd@repl f28dd@repl) (set! f28df@trace-printer (f6c7@f5a5@make-parameter write)) (set! f2a3c@f28df@trace-printer f28df@trace-printer) (set! f28e1@command-line (f6c7@f5a5@make-parameter (get-command-line))) (set! f2a3d@f28e1@command-line f28e1@command-line) (set! f28e3@local-library-path (lambda (f29c8@filename) (f981@f7bd@library-path))) (set! f2a3e@f28e3@local-library-path f28e3@local-library-path) (set! f28e5@load/args (lambda (f29ca@filename . f29cc@args) (begin (apply f28f5@load-r6rs-top-level f29ca@filename 'load f29cc@args) (void)))) (set! f2a3f@f28e5@load/args f28e5@load/args) (set! f28e7@load (lambda (f29ce@filename) (begin (apply f28f5@load-r6rs-top-level f29ce@filename 'load (f28e1@command-line)) (void)))) (set! f2a40@f28e7@load f28e7@load) (set! f28e9@ironscheme-build (lambda () (f28e7@load '"ironscheme-buildscript.ss"))) (set! f2a41@f28e9@ironscheme-build f28e9@ironscheme-build) (set! f28eb@eval-top-level (lambda (f29d0@x) (f28a8@fe3e@eval f29d0@x (f28bf@fe6c@interaction-environment)))) (set! f2a42@f28eb@eval-top-level f28eb@eval-top-level) (set! f28ed@compile-system-libraries (lambda () (f28eb@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! f2a43@f28ed@compile-system-libraries f28ed@compile-system-libraries) (set! f28ef@compile (lambda (f29d2@filename) (f28f5@load-r6rs-top-level f29d2@filename 'compile))) (set! f2a44@f28ef@compile f28ef@compile) (set! f28f1@compile->closure (lambda (f29d4@filename) (f28f5@load-r6rs-top-level f29d4@filename 'closure))) (set! f2a45@f28f1@compile->closure f28f1@compile->closure) (set! f28f3@pre-compile-r6rs-file (lambda (f29d6@filename) (f28f5@load-r6rs-top-level f29d6@filename 'compile))) (set! f2a46@f28f3@pre-compile-r6rs-file f28f3@pre-compile-r6rs-file) (set! f28f5@load-r6rs-top-level (lambda (f29d8@filename f29d9@how . f29dc@args) (begin (f981@f7bd@library-path (f28e3@local-library-path f29d8@filename)) (let ((f29de@x* (with-input-from-file f29d8@filename (lambda () (let f29e0@f () (let ((f29e2@x (f6b9@f589@read-annotated))) (if (eof-object? f29e2@x) '() (cons f29e2@x (f29e0@f))))))))) (let ((f29e4@t f29d9@how)) (if (memv f29e4@t '(closure)) (f28be@fe6a@pre-compile-r6rs-top-level f29de@x*) (if (memv f29e4@t '(load)) (begin (f28e1@command-line (cons f29d8@filename (car f29dc@args))) (f6c8@f5a7@mosh-cache-dir (create-mosh-cache-dir)) (if (f6c8@f5a7@mosh-cache-dir) (gensym-prefix-set! (f28fb@prefix-inc! (string-append (f6c8@f5a7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (f29e6@file) ((call/cc (lambda (f29ea@f29e8) (lambda () (with-exception-handler (lambda (f29ec@c) ((call/cc (lambda (f29ee@f29e9) (f29ea@f29e8 (lambda () (if '#t '#t (f29ee@f29e9 (lambda () (raise-continuable f29ec@c)))))))))) (lambda () (delete-file (string-append (f6c8@f5a7@mosh-cache-dir) '"/" f29e6@file))))))))) (directory-list (f6c8@f5a7@mosh-cache-dir))) (void)) (let ((f29f0@compiled (f28bd@fe68@compile-r6rs-top-level f29de@x*))) (begin (if (and (f6c8@f5a7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (f985@f7c5@serialize-all f6c2@f59b@serialize-library f71e@f6d7@compile-core-expr) (void)) (f29f0@compiled)))) (if (memv f29e4@t '(compile)) (begin (f28bd@fe68@compile-r6rs-top-level f29de@x*) (f985@f7c5@serialize-all f6c2@f59b@serialize-library f71e@f6d7@compile-core-expr)) (if '#f '#f (void)))))))))) (set! f2a47@f28f5@load-r6rs-top-level f28f5@load-r6rs-top-level) (set! f28f7@load-r6rs-top-level-sexp (lambda (f29f2@import-spec f29f3@thunk) (let ((f29fe@f29f7 f981@f7bd@library-path) (f29ff@f29f9 f6c8@f5a7@mosh-cache-dir) (f2a00@f29fb (f28e3@local-library-path '"")) (f2a01@f29fd (create-mosh-cache-dir))) (let ((f2a06@swap (lambda () (begin (let ((f2a08@t (f29fe@f29f7))) (begin (f29fe@f29f7 f2a00@f29fb) (set! f2a00@f29fb f2a08@t))) (let ((f2a0a@t (f29ff@f29f9))) (begin (f29ff@f29f9 f2a01@f29fd) (set! f2a01@f29fd f2a0a@t))))))) (dynamic-wind f2a06@swap (lambda () (begin (if (f6c8@f5a7@mosh-cache-dir) (gensym-prefix-set! (f28fb@prefix-inc! (string-append (f6c8@f5a7@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((f2a10@f2a0d f28e1@command-line) (f2a11@f2a0f '())) (let ((f2a14@swap (lambda () (let ((f2a16@t (f2a10@f2a0d))) (begin (f2a10@f2a0d f2a11@f2a0f) (set! f2a11@f2a0f f2a16@t)))))) (dynamic-wind f2a14@swap (lambda () ((f28bd@fe68@compile-r6rs-top-level (list (cons 'import f29f2@import-spec) (list f29f3@thunk))))) f2a14@swap))))) f2a06@swap))))) (set! f2a48@f28f7@load-r6rs-top-level-sexp f28f7@load-r6rs-top-level-sexp) (set! f28f9@prefix-inc (lambda (f2a18@prefix-string) (let ((f2a1a@prefix (symbol->string f2a18@prefix-string))) (let ((f2a1c@len (string-length f2a1a@prefix))) (let f2a24@loop ((f2a1e@i (- f2a1c@len '1)) (f2a1f@carry? '#t) (f2a20@accum '())) (if (< f2a1e@i '0) (string->symbol (list->string (if f2a1f@carry? (cons '#\a f2a20@accum) f2a20@accum))) (if f2a1f@carry? (let ((f2a26@next-integer (+ '1 (char->integer (string-ref f2a1a@prefix f2a1e@i))))) (if (= f2a26@next-integer '123) (f2a24@loop (- f2a1e@i '1) '#f (cons '#\A f2a20@accum)) (if (= f2a26@next-integer '91) (f2a24@loop (- f2a1e@i '1) '#t (cons '#\a f2a20@accum)) (f2a24@loop (- f2a1e@i '1) '#f (cons (integer->char f2a26@next-integer) f2a20@accum))))) (f2a24@loop (- f2a1e@i '1) '#f (cons (string-ref f2a1a@prefix f2a1e@i) f2a20@accum))))))))) (set! f2a49@f28f9@prefix-inc f28f9@prefix-inc) (set! f28fb@prefix-inc! (lambda (f2a28@file) (begin (if (not (file-exists? f2a28@file)) (call-with-output-file f2a28@file (lambda (f2a2a@port) (write 'd f2a2a@port))) (void)) (let ((f2a2c@prefix (call-with-input-file f2a28@file read))) (if (main-vm?) (let ((f2a2e@next-prefix (f28f9@prefix-inc f2a2c@prefix))) (begin (call-with-port (open-file-output-port f2a28@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (f2a30@port) (write f2a2e@next-prefix f2a30@port))) f2a2c@prefix)) f2a2c@prefix))))) (set! f2a4a@f28fb@prefix-inc! f28fb@prefix-inc!) (begin (f986@f7c7@current-precompiled-library-loader f6c3@f59d@load-serialized-library) (set-symbol-value! 'load f28e7@load) (set-symbol-value! 'pre-compile-r6rs-file f28f3@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs f28eb@eval-top-level) (set-symbol-value! 'int-env-syms f289f@fe2c@interaction-environment-symbols) (set-symbol-value! 'expanded2core f71d@f6d5@expanded->core) (set-symbol-value! 'trace-printer f28df@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (f28fc@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list f28fc@c))))) (f28d1@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (f28d1@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (f28cf@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (f28cf@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (f28cf@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((f28fe@prefix (lambda (f2900@ext f2901@ls) (append (map (lambda (f2904@x) (string-append f2900@ext f2904@x)) f2901@ls) f2901@ls)))) (f982@f7bf@library-extensions (f28fe@prefix '".mosh" (f982@f7bf@library-extensions)))) (current-exception-handler (lambda (f2906@c) (begin (if (condition? f2906@c) (f28d7@condition-printer/p f2906@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" f2906@c)) f2906@c))) (if ((call/cc (lambda (f290a@f2908) (lambda () (with-exception-handler (lambda (f290c@c) ((call/cc (lambda (f290e@f2909) (f290a@f2908 (lambda () (if '#t '#f (f290e@f2909 (lambda () (raise-continuable f290c@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (f28f7@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (f28e1@command-line)) (let ((f2918@f2911 f28e1@command-line) (f2919@f2913 f6c8@f5a7@mosh-cache-dir) (f291a@f2915 '()) (f291b@f2917 (create-mosh-cache-dir))) (let ((f2920@swap (lambda () (begin (let ((f2922@t (f2918@f2911))) (begin (f2918@f2911 f291a@f2915) (set! f291a@f2915 f2922@t))) (let ((f2924@t (f2919@f2913))) (begin (f2919@f2913 f291b@f2917) (set! f291b@f2917 f2924@t))))))) (dynamic-wind f2920@swap (lambda () (begin (if (f6c8@f5a7@mosh-cache-dir) (gensym-prefix-set! (f28fb@prefix-inc! (string-append (f6c8@f5a7@mosh-cache-dir) '"/prefix.txt"))) (void)) (f28dd@repl))) f2920@swap))) (begin (f981@f7bd@library-path (f28e3@local-library-path (car (f28e1@command-line)))) (set! f28cd@x* (with-input-from-file (car (f28e1@command-line)) (lambda () (let f2926@f () (let ((f2928@x (f6b9@f589@read-annotated))) (if (eof-object? f2928@x) '() (cons f2928@x (f2926@f)))))))) (f28e1@command-line (cons (car (f28e1@command-line)) (cdr (f28e1@command-line)))) (f6c8@f5a7@mosh-cache-dir (create-mosh-cache-dir)) (if (f6c8@f5a7@mosh-cache-dir) (gensym-prefix-set! (f28fb@prefix-inc! (string-append (f6c8@f5a7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (f292a@file) ((call/cc (lambda (f292e@f292c) (lambda () (with-exception-handler (lambda (f2930@c) ((call/cc (lambda (f2932@f292d) (f292e@f292c (lambda () (if '#t '#t (f2932@f292d (lambda () (raise-continuable f2930@c)))))))))) (lambda () (delete-file (string-append (f6c8@f5a7@mosh-cache-dir) '"/" f292a@file))))))))) (directory-list (f6c8@f5a7@mosh-cache-dir))) (void)) (let ((f2934@compiled (f28bd@fe68@compile-r6rs-top-level f28cd@x*))) (begin (if (and (f6c8@f5a7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (f985@f7c5@serialize-all f6c2@f59b@serialize-library f71e@f6d7@compile-core-expr) (void)) (f2934@compiled))))))))
