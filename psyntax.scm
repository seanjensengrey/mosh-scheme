;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! Z582@library-file-path->cache-path (unspecified)) (set! Z584@read-annotated (unspecified)) (set! Z586@annotation-stripped (unspecified)) (set! Z588@annotation? (unspecified)) (set! Z58a@annotation-source (unspecified)) (set! Z58c@annotation-expression (unspecified)) (set! Z58e@scm->fasl (unspecified)) (set! Z590@fasl-save (unspecified)) (set! Z592@fasl-load (unspecified)) (set! Z594@verbose? (unspecified)) (set! Z596@serialize-library (unspecified)) (set! Z598@load-serialized-library (unspecified)) (set! Z59a@make-record-printer (unspecified)) (set! Z59c@compile-core (unspecified)) (set! Z59e@read-library-source-file (unspecified)) (set! Z5a0@make-parameter (unspecified)) (set! Z5a2@mosh-cache-dir (unspecified)) (set! Z638@file-options-spec (unspecified)) (set! Z582@library-file-path->cache-path (lambda (Z639@x) (call-with-values (lambda () (open-string-output-port)) (lambda (Z63f@Z63c Z640@Z63e) (let ((Z643@extract Z640@Z63e) (Z644@p Z63f@Z63c)) (letrec* ((Z648@display-hex (lambda (Z651@n) (if (<= '0 Z651@n '9) (display Z651@n Z644@p) (display (integer->char (+ (char->integer '#\a) (- Z651@n '10))) Z644@p))))) (begin (let Z64b@f ((Z649@ls (string-split Z639@x '#\/))) (if (not (null? Z649@ls)) (begin (display '"_" Z644@p) (for-each (lambda (Z64d@c) (if (or (char<=? '#\a Z64d@c '#\z) (char<=? '#\A Z64d@c '#\Z) (char<=? '#\0 Z64d@c '#\9) (memv Z64d@c '(#\- #\. #\_ #\~))) (display Z64d@c Z644@p) (begin (display '"%" Z644@p) (let ((Z64f@n (char->integer Z64d@c))) (begin (Z648@display-hex (quotient Z64f@n '16)) (Z648@display-hex (remainder Z64f@n '16))))))) (string->list (car Z649@ls))) (Z64b@f (cdr Z649@ls))) (void))) (Z643@extract)))))))) (set! Z6b3@Z582@library-file-path->cache-path Z582@library-file-path->cache-path) (set! Z584@read-annotated read) (set! Z6b4@Z584@read-annotated Z584@read-annotated) (set! Z586@annotation-stripped (lambda (Z653@x) (Z58c@annotation-expression Z653@x))) (set! Z6b5@Z586@annotation-stripped Z586@annotation-stripped) (set! Z588@annotation? (lambda (Z655@x) (source-info Z655@x))) (set! Z6b6@Z588@annotation? Z588@annotation?) (set! Z58a@annotation-source (lambda (Z657@x) (source-info Z657@x))) (set! Z6b7@Z58a@annotation-source Z58a@annotation-source) (set! Z58c@annotation-expression (lambda (Z659@x) (if (pair? Z659@x) (cons (car Z659@x) (cdr Z659@x)) (if (procedure? Z659@x) (set-source-info! Z659@x '#f) Z659@x)))) (set! Z6b8@Z58c@annotation-expression Z58c@annotation-expression) (set! Z58e@scm->fasl (lambda (Z65b@filename) (string-append (Z5a2@mosh-cache-dir) '"/" (Z582@library-file-path->cache-path Z65b@filename) '".mosh-fasl"))) (set! Z6b9@Z58e@scm->fasl Z58e@scm->fasl) (set! Z590@fasl-save (lambda (Z65d@filename Z65e@obj) (call-with-port (open-file-output-port Z65d@filename) (lambda (Z661@port) ((symbol-value 'fasl-write!) Z65e@obj Z661@port))))) (set! Z6ba@Z590@fasl-save Z590@fasl-save) (set! Z592@fasl-load (lambda (Z663@filename) (call-with-port (open-file-input-port Z663@filename) (symbol-value 'fasl-read!)))) (set! Z6bb@Z592@fasl-load Z592@fasl-load) (set! Z594@verbose? (symbol-value '%verbose)) (set! Z6bc@Z594@verbose? Z594@verbose?) (set! Z596@serialize-library (lambda (Z665@filename Z666@obj) (begin (if Z594@verbose? (format (current-error-port) '"serialize-library ~a\n..." Z665@filename) (void)) (let ((Z669@expanded2core (symbol-value 'expanded2core))) (let ((Z66b@compile (symbol-value 'compile-w/o-halt))) (let ((Z66d@code Z666@obj)) (let ((Z66f@pivot (cddddr (cddddr Z66d@code)))) (let ((Z671@visit (Z66b@compile (Z669@expanded2core (car Z66f@pivot))))) (begin (set-car! Z66f@pivot Z671@visit) (let ((Z673@pivot (cdr Z66f@pivot))) (let ((Z675@invoke (Z66b@compile (Z669@expanded2core (car Z673@pivot))))) (set-car! Z673@pivot Z675@invoke))))))))) (let ((Z677@fasl-file (Z58e@scm->fasl Z665@filename))) (begin (if (file-exists? Z677@fasl-file) (delete-file Z677@fasl-file) (void)) ((call/cc (lambda (Z67b@Z679) (lambda () (with-exception-handler (lambda (Z67d@c) ((call/cc (lambda (Z67f@Z67a) (Z67b@Z679 (lambda () (if '#t (begin (if Z594@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" Z665@filename) (void)) (if (file-exists? Z677@fasl-file) (delete-file Z677@fasl-file) (void)) '#f) (Z67f@Z67a (lambda () (raise-continuable Z67d@c)))))))))) (lambda () (Z590@fasl-save Z677@fasl-file Z666@obj)))))))))))) (set! Z6bd@Z596@serialize-library Z596@serialize-library) (set! Z598@load-serialized-library (lambda (Z681@filename Z682@obj) (and (Z5a2@mosh-cache-dir) (let ((Z685@fasl-file (Z58e@scm->fasl Z681@filename))) (if (and (file-exists? Z685@fasl-file) ((symbol-value 'file-newer?) Z685@fasl-file Z681@filename)) (let ((Z687@expanded2core (symbol-value 'expanded2core))) (let ((Z689@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((Z68b@code (Z592@fasl-load Z685@fasl-file))) (let ((Z68d@pivot (cddddr (cddddr Z68b@code)))) (let ((Z68f@visit (car Z68d@pivot))) (let ((Z691@visit-proc (lambda () (Z689@eval-compiled-core Z68f@visit)))) (begin (set-car! Z68d@pivot Z691@visit-proc) (let ((Z693@pivot (cdr Z68d@pivot))) (let ((Z695@invoke (car Z693@pivot))) (begin (set-car! Z693@pivot (lambda () (Z689@eval-compiled-core Z695@invoke))) (apply Z682@obj Z68b@code))))))))))) '#f))))) (set! Z6be@Z598@load-serialized-library Z598@load-serialized-library) (set! Z59a@make-record-printer (lambda (Z697@name Z698@printer) (lambda Z69b@x (begin (display '"record printer") (for-each display Z69b@x))))) (set! Z6bf@Z59a@make-record-printer Z59a@make-record-printer) (set! Z59c@compile-core (lambda Z69d@x (apply error 'comile-core '"not implementated" Z69d@x))) (set! Z6c0@Z59c@compile-core Z59c@compile-core) (set! Z59e@read-library-source-file (lambda (Z69f@file-name) (with-input-from-file Z69f@file-name Z584@read-annotated))) (set! Z6c1@Z59e@read-library-source-file Z59e@read-library-source-file) (set! Z5a0@make-parameter (lambda Z6af (let ((Z6b0 (length Z6af))) (if (= Z6b0 '1) (apply (lambda (Z6a1@x) (Z5a0@make-parameter Z6a1@x (lambda (Z6a3@x) Z6a3@x))) Z6af) (if (= Z6b0 '2) (apply (lambda (Z6a5@x Z6a6@fender) (let ((Z6a9@x (Z6a6@fender Z6a5@x))) (lambda Z6ad (let ((Z6ae (length Z6ad))) (if (= Z6ae '0) (apply (lambda () Z6a9@x) Z6ad) (if (= Z6ae '1) (apply (lambda (Z6ab@v) (set! Z6a9@x (Z6a6@fender Z6ab@v))) Z6ad) (error 'apply '"invalid arg count"))))))) Z6af) (error 'apply '"invalid arg count")))))) (set! Z6c2@Z5a0@make-parameter Z5a0@make-parameter) (set! Z5a2@mosh-cache-dir (Z5a0@make-parameter '#f)) (set! Z6c3@Z5a2@mosh-cache-dir Z5a2@mosh-cache-dir) (set! Z638@file-options-spec (lambda (Z6b1@x) Z6b1@x)) (set! Z6c4@Z638@file-options-spec Z638@file-options-spec) (void))
(begin (set! Z6ca@current-primitive-locations (unspecified)) (set! Z6cc@mutable? (unspecified)) (set! Z6ce@rewriter (unspecified)) (set! Z6d0@expanded->core (unspecified)) (set! Z6d2@compile-core-expr (unspecified)) (set! Z6d4@pretty-print (unspecified)) (set! Z6d6@compile-core-expr-to-port (unspecified)) (set! Z6ca@current-primitive-locations (Z6c2@Z5a0@make-parameter (lambda (Z6d7@x) '#f) (lambda (Z6d9@p) Z6d9@p))) (set! Z715@Z6ca@current-primitive-locations Z6ca@current-primitive-locations) (set! Z6cc@mutable? (lambda (Z6db@x) (or (pair? Z6db@x) (vector? Z6db@x) (hashtable? Z6db@x)))) (set! Z716@Z6cc@mutable? Z6cc@mutable?) (set! Z6ce@rewriter (lambda (Z6dd@quote-hack?) (letrec* ((Z6e0@f (lambda (Z6e1@x) (if (pair? Z6e1@x) (let ((Z6e3@t (car Z6e1@x))) (if (memv Z6e3@t '(quote)) (if (and Z6dd@quote-hack? (Z6cc@mutable? (cadr Z6e1@x))) (let ((Z6e5@g (gensym))) (begin (set-symbol-value! Z6e5@g (cadr Z6e1@x)) Z6e5@g)) Z6e1@x) (if (memv Z6e3@t '(case-lambda)) (cons 'case-lambda (map (lambda (Z6e7@x) (cons (car Z6e7@x) (map Z6e0@f (cdr Z6e7@x)))) (cdr Z6e1@x))) (if (memv Z6e3@t '(lambda)) (cons* 'lambda (cadr Z6e1@x) (map Z6e0@f (cddr Z6e1@x))) (if (memv Z6e3@t '(letrec)) (let ((Z6e9@bindings (cadr Z6e1@x)) (Z6ea@body* (cddr Z6e1@x))) (let ((Z6ed@lhs* (map car Z6e9@bindings)) (Z6ee@rhs* (map cadr Z6e9@bindings))) (cons* 'letrec (map list Z6ed@lhs* (map Z6e0@f Z6ee@rhs*)) (map Z6e0@f Z6ea@body*)))) (if (memv Z6e3@t '(letrec*)) (let ((Z6f1@bindings (cadr Z6e1@x)) (Z6f2@body* (cddr Z6e1@x))) (let ((Z6f5@lhs* (map car Z6f1@bindings)) (Z6f6@rhs* (map cadr Z6f1@bindings))) (cons* 'letrec* (map list Z6f5@lhs* (map Z6e0@f Z6f6@rhs*)) (map Z6e0@f Z6f2@body*)))) (if (memv Z6e3@t '(library-letrec*)) (let ((Z6f9@name (cadr Z6e1@x)) (Z6fa@x (cdr Z6e1@x))) (let ((Z6fd@bindings (cadr Z6fa@x)) (Z6fe@body* (cddr Z6fa@x))) (let ((Z701@lhs* (map car Z6fd@bindings)) (Z702@lhs** (map cadr Z6fd@bindings)) (Z703@rhs* (map caddr Z6fd@bindings))) (cons* 'library-letrec* Z6f9@name (map list Z701@lhs* Z702@lhs** (map Z6e0@f Z703@rhs*)) (map Z6e0@f Z6fe@body*))))) (if (memv Z6e3@t '(begin)) (cons 'begin (map Z6e0@f (cdr Z6e1@x))) (if (memv Z6e3@t '(set!)) (list 'set! (cadr Z6e1@x) (Z6e0@f (caddr Z6e1@x))) (if (memv Z6e3@t '(primitive)) (let ((Z707@op (cadr Z6e1@x))) (let ((Z709@t ((Z6ca@current-primitive-locations) Z707@op))) (if Z709@t ((lambda (Z70b@loc) Z70b@loc) Z709@t) Z707@op))) (if (memv Z6e3@t '(define)) Z6e1@x (if (list? Z6e1@x) (map Z6e0@f Z6e1@x) (error 'rewrite '"invalid form ~s ~s" Z6e1@x (list? Z6e1@x)))))))))))))) Z6e1@x)))) Z6e0@f))) (set! Z717@Z6ce@rewriter Z6ce@rewriter) (set! Z6d0@expanded->core (lambda (Z70d@x) ((Z6ce@rewriter '#f) Z70d@x))) (set! Z718@Z6d0@expanded->core Z6d0@expanded->core) (set! Z6d2@compile-core-expr (lambda (Z70f@x) ((Z6ce@rewriter '#f) Z70f@x))) (set! Z719@Z6d2@compile-core-expr Z6d2@compile-core-expr) (set! Z6d4@pretty-print write) (set! Z71a@Z6d4@pretty-print Z6d4@pretty-print) (set! Z6d6@compile-core-expr-to-port (lambda (Z711@x Z712@p) (Z6d4@pretty-print ((Z6ce@rewriter '#f) Z711@x) Z712@p))) (set! Z71b@Z6d6@compile-core-expr-to-port Z6d6@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! Z76a@make-collection (unspecified)) (set! Z76c@current-library-collection (unspecified)) (set! Z76e@rp (unspecified)) (set! Z778@library? (unspecified)) (set! Z77a@library-id (unspecified)) (set! Z77c@set-library-id! (unspecified)) (set! Z77e@library-name (unspecified)) (set! Z780@set-library-name! (unspecified)) (set! Z782@library-version (unspecified)) (set! Z784@set-library-version! (unspecified)) (set! Z786@library-imp* (unspecified)) (set! Z788@set-library-imp*! (unspecified)) (set! Z78a@library-vis* (unspecified)) (set! Z78c@set-library-vis*! (unspecified)) (set! Z78e@library-inv* (unspecified)) (set! Z790@set-library-inv*! (unspecified)) (set! Z792@library-subst (unspecified)) (set! Z794@set-library-subst! (unspecified)) (set! Z796@library-env (unspecified)) (set! Z798@set-library-env! (unspecified)) (set! Z79a@library-visit-state (unspecified)) (set! Z79c@set-library-visit-state! (unspecified)) (set! Z79e@library-invoke-state (unspecified)) (set! Z7a0@set-library-invoke-state! (unspecified)) (set! Z7a2@library-visit-code (unspecified)) (set! Z7a4@set-library-visit-code! (unspecified)) (set! Z7a6@library-invoke-code (unspecified)) (set! Z7a8@set-library-invoke-code! (unspecified)) (set! Z7aa@library-visible? (unspecified)) (set! Z7ac@set-library-visible?! (unspecified)) (set! Z7ae@library-source-file-name (unspecified)) (set! Z7b0@set-library-source-file-name! (unspecified)) (set! Z7b2@dummy (unspecified)) (set! Z7b4@find-dependencies (unspecified)) (set! Z7b6@find-library-by (unspecified)) (set! Z7b8@library-path (unspecified)) (set! Z7ba@library-extensions (unspecified)) (set! Z7bc@library-name->file-name (unspecified)) (set! Z7be@file-locator (unspecified)) (set! Z7c0@serialize-all (unspecified)) (set! Z7c2@current-precompiled-library-loader (unspecified)) (set! Z7c4@try-load-from-file (unspecified)) (set! Z7c6@library-loader (unspecified)) (set! Z7c8@current-library-expander (unspecified)) (set! Z7ca@external-pending-libraries (unspecified)) (set! Z7cc@find-external-library (unspecified)) (set! Z7ce@find-library-by-name (unspecified)) (set! Z7d0@library-exists? (unspecified)) (set! Z7d2@find-library-by-spec/die (unspecified)) (set! Z7d4@label->binding-table (unspecified)) (set! Z7d6@install-library-record (unspecified)) (set! Z7d8@install-library (unspecified)) (set! Z7da@imported-label->binding (unspecified)) (set! Z7dc@invoke-library (unspecified)) (set! Z7de@visit-library (unspecified)) (set! Z7e0@invoke-library-by-spec (unspecified)) (set! Z7e2@installed-libraries (unspecified)) (set! Z7e4@library-spec (unspecified)) (set! Z76a@make-collection (lambda () (let ((Z7e5@set '())) (letrec* ((Z7e8@set-cons (lambda (Z7ed@x Z7ee@ls) (if (memq Z7ed@x Z7ee@ls) Z7ee@ls (cons Z7ed@x Z7ee@ls))))) (lambda Z7eb (let ((Z7ec (length Z7eb))) (if (= Z7ec '0) (apply (lambda () Z7e5@set) Z7eb) (if (= Z7ec '1) (apply (lambda (Z7e9@x) (set! Z7e5@set (Z7e8@set-cons Z7e9@x Z7e5@set))) Z7eb) (error 'apply '"invalid arg count"))))))))) (set! Z959@Z76a@make-collection Z76a@make-collection) (set! Z76c@current-library-collection (Z6c2@Z5a0@make-parameter (Z76a@make-collection) (lambda (Z7f1@x) (begin (if (not (procedure? Z7f1@x)) (assertion-violation 'current-library-collection '"not a procedure" Z7f1@x) (void)) Z7f1@x)))) (set! Z95a@Z76c@current-library-collection Z76c@current-library-collection) (set! Z76e@rp (Z6bf@Z59a@make-record-printer 'library (lambda (Z7f3@x Z7f4@p Z7f5@wr) (begin (if (not (Z778@library? Z7f3@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (Z782@library-version Z7f3@x)) (Z77e@library-name Z7f3@x) (append (Z77e@library-name Z7f3@x) (list (Z782@library-version Z7f3@x))))) Z7f4@p))))) (set! Z95b@Z76e@rp Z76e@rp) (set! Z778@library? (lambda (Z7f9@x) (and (simple-struct? Z7f9@x) (eq? (simple-struct-name Z7f9@x) 'library)))) (set! Z95c@Z778@library? Z778@library?) (set! Z77a@library-id (lambda (Z7fb@x) (simple-struct-ref Z7fb@x '0))) (set! Z95d@Z77a@library-id Z77a@library-id) (set! Z77c@set-library-id! (lambda (Z7fd@x Z7fe@val) (simple-struct-set! Z7fd@x '0 Z7fe@val))) (set! Z95e@Z77c@set-library-id! Z77c@set-library-id!) (set! Z77e@library-name (lambda (Z801@x) (simple-struct-ref Z801@x '1))) (set! Z95f@Z77e@library-name Z77e@library-name) (set! Z780@set-library-name! (lambda (Z803@x Z804@val) (simple-struct-set! Z803@x '1 Z804@val))) (set! Z960@Z780@set-library-name! Z780@set-library-name!) (set! Z782@library-version (lambda (Z807@x) (simple-struct-ref Z807@x '2))) (set! Z961@Z782@library-version Z782@library-version) (set! Z784@set-library-version! (lambda (Z809@x Z80a@val) (simple-struct-set! Z809@x '2 Z80a@val))) (set! Z962@Z784@set-library-version! Z784@set-library-version!) (set! Z786@library-imp* (lambda (Z80d@x) (simple-struct-ref Z80d@x '3))) (set! Z963@Z786@library-imp* Z786@library-imp*) (set! Z788@set-library-imp*! (lambda (Z80f@x Z810@val) (simple-struct-set! Z80f@x '3 Z810@val))) (set! Z964@Z788@set-library-imp*! Z788@set-library-imp*!) (set! Z78a@library-vis* (lambda (Z813@x) (simple-struct-ref Z813@x '4))) (set! Z965@Z78a@library-vis* Z78a@library-vis*) (set! Z78c@set-library-vis*! (lambda (Z815@x Z816@val) (simple-struct-set! Z815@x '4 Z816@val))) (set! Z966@Z78c@set-library-vis*! Z78c@set-library-vis*!) (set! Z78e@library-inv* (lambda (Z819@x) (simple-struct-ref Z819@x '5))) (set! Z967@Z78e@library-inv* Z78e@library-inv*) (set! Z790@set-library-inv*! (lambda (Z81b@x Z81c@val) (simple-struct-set! Z81b@x '5 Z81c@val))) (set! Z968@Z790@set-library-inv*! Z790@set-library-inv*!) (set! Z792@library-subst (lambda (Z81f@x) (simple-struct-ref Z81f@x '6))) (set! Z969@Z792@library-subst Z792@library-subst) (set! Z794@set-library-subst! (lambda (Z821@x Z822@val) (simple-struct-set! Z821@x '6 Z822@val))) (set! Z96a@Z794@set-library-subst! Z794@set-library-subst!) (set! Z796@library-env (lambda (Z825@x) (simple-struct-ref Z825@x '7))) (set! Z96b@Z796@library-env Z796@library-env) (set! Z798@set-library-env! (lambda (Z827@x Z828@val) (simple-struct-set! Z827@x '7 Z828@val))) (set! Z96c@Z798@set-library-env! Z798@set-library-env!) (set! Z79a@library-visit-state (lambda (Z82b@x) (simple-struct-ref Z82b@x '8))) (set! Z96d@Z79a@library-visit-state Z79a@library-visit-state) (set! Z79c@set-library-visit-state! (lambda (Z82d@x Z82e@val) (simple-struct-set! Z82d@x '8 Z82e@val))) (set! Z96e@Z79c@set-library-visit-state! Z79c@set-library-visit-state!) (set! Z79e@library-invoke-state (lambda (Z831@x) (simple-struct-ref Z831@x '9))) (set! Z96f@Z79e@library-invoke-state Z79e@library-invoke-state) (set! Z7a0@set-library-invoke-state! (lambda (Z833@x Z834@val) (simple-struct-set! Z833@x '9 Z834@val))) (set! Z970@Z7a0@set-library-invoke-state! Z7a0@set-library-invoke-state!) (set! Z7a2@library-visit-code (lambda (Z837@x) (simple-struct-ref Z837@x '10))) (set! Z971@Z7a2@library-visit-code Z7a2@library-visit-code) (set! Z7a4@set-library-visit-code! (lambda (Z839@x Z83a@val) (simple-struct-set! Z839@x '10 Z83a@val))) (set! Z972@Z7a4@set-library-visit-code! Z7a4@set-library-visit-code!) (set! Z7a6@library-invoke-code (lambda (Z83d@x) (simple-struct-ref Z83d@x '11))) (set! Z973@Z7a6@library-invoke-code Z7a6@library-invoke-code) (set! Z7a8@set-library-invoke-code! (lambda (Z83f@x Z840@val) (simple-struct-set! Z83f@x '11 Z840@val))) (set! Z974@Z7a8@set-library-invoke-code! Z7a8@set-library-invoke-code!) (set! Z7aa@library-visible? (lambda (Z843@x) (simple-struct-ref Z843@x '12))) (set! Z975@Z7aa@library-visible? Z7aa@library-visible?) (set! Z7ac@set-library-visible?! (lambda (Z845@x Z846@val) (simple-struct-set! Z845@x '12 Z846@val))) (set! Z976@Z7ac@set-library-visible?! Z7ac@set-library-visible?!) (set! Z7ae@library-source-file-name (lambda (Z849@x) (simple-struct-ref Z849@x '13))) (set! Z977@Z7ae@library-source-file-name Z7ae@library-source-file-name) (set! Z7b0@set-library-source-file-name! (lambda (Z84b@x Z84c@val) (simple-struct-set! Z84b@x '13 Z84c@val))) (set! Z978@Z7b0@set-library-source-file-name! Z7b0@set-library-source-file-name!) (set! Z7b2@dummy '3) (set! Z979@Z7b2@dummy Z7b2@dummy) (set! Z7b4@find-dependencies (lambda (Z84f@ls) (if (null? Z84f@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! Z97a@Z7b4@find-dependencies Z7b4@find-dependencies) (set! Z7b6@find-library-by (lambda (Z851@pred) (let Z855@f ((Z853@ls ((Z76c@current-library-collection)))) (if (null? Z853@ls) '#f (if (Z851@pred (car Z853@ls)) (car Z853@ls) (Z855@f (cdr Z853@ls))))))) (set! Z97b@Z7b6@find-library-by Z7b6@find-library-by) (set! Z7b8@library-path (Z6c2@Z5a0@make-parameter '(".") (lambda (Z857@x) (if (and (list? Z857@x) (for-all string? Z857@x)) (map (lambda (Z859@x) Z859@x) Z857@x) (assertion-violation 'library-path '"not a list of strings" Z857@x))))) (set! Z97c@Z7b8@library-path Z7b8@library-path) (set! Z7ba@library-extensions (Z6c2@Z5a0@make-parameter '(".sls" ".ss" ".scm") (lambda (Z85b@x) (if (and (list? Z85b@x) (for-all string? Z85b@x)) (map (lambda (Z85d@x) Z85d@x) Z85b@x) (assertion-violation 'library-extensions '"not a list of strings" Z85b@x))))) (set! Z97d@Z7ba@library-extensions Z7ba@library-extensions) (set! Z7bc@library-name->file-name (lambda (Z85f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (Z865@Z862 Z866@Z864) (let ((Z869@extract Z866@Z864) (Z86a@p Z865@Z862)) (letrec* ((Z86e@display-hex (lambda (Z877@n) (if (<= '0 Z877@n '9) (display Z877@n Z86a@p) (display (integer->char (+ (char->integer '#\a) (- Z877@n '10))) Z86a@p))))) (begin (let Z871@f ((Z86f@ls Z85f@x)) (if (not (null? Z86f@ls)) (begin (display '"/" Z86a@p) (for-each (lambda (Z873@c) (if (or (char<=? '#\a Z873@c '#\z) (char<=? '#\A Z873@c '#\Z) (char<=? '#\0 Z873@c '#\9) (memv Z873@c '(#\- #\. #\_ #\~))) (display Z873@c Z86a@p) (begin (display '"%" Z86a@p) (let ((Z875@n (char->integer Z873@c))) (begin (Z86e@display-hex (quotient Z875@n '16)) (Z86e@display-hex (remainder Z875@n '16))))))) (string->list (symbol->string (car Z86f@ls)))) (Z871@f (cdr Z86f@ls))) (void))) (Z869@extract)))))))) (set! Z97e@Z7bc@library-name->file-name Z7bc@library-name->file-name) (set! Z7be@file-locator (Z6c2@Z5a0@make-parameter (lambda (Z879@x) (let ((Z87b@str (Z7bc@library-name->file-name Z879@x))) (let Z883@f ((Z87d@ls (Z7b8@library-path)) (Z87e@exts (Z7ba@library-extensions)) (Z87f@failed-list '())) (if (null? Z87d@ls) (letrec* ((Z88d@Z888 (make-record-type-descriptor '&library-resolution &condition-rtd 'Z88b '#f '#f '#((immutable library) (immutable files)))) (Z88f@Z88a '#f) (Z891@Z889 (make-record-constructor-descriptor Z88d@Z888 &condition-rcd Z88f@Z88a)) (Z894@Z887 (record-predicate Z88d@Z888)) (Z896@make-library-resolution-condition (record-constructor Z891@Z889)) (Z898@Z885 (record-accessor Z88d@Z888 '0)) (Z89a@Z886 (record-accessor Z88d@Z888 '1)) (Z89c@library-resolution-condition? (condition-predicate Z88d@Z888)) (Z89e@condition-library (condition-accessor Z88d@Z888 Z898@Z885)) (Z8a0@condition-files (condition-accessor Z88d@Z888 Z89a@Z886))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (Z896@make-library-resolution-condition Z879@x (reverse Z87f@failed-list))))) (if (null? Z87e@exts) (Z883@f (cdr Z87d@ls) (Z7ba@library-extensions) Z87f@failed-list) (let ((Z8a1@name (string-append (car Z87d@ls) Z87b@str (car Z87e@exts)))) (if (file-exists? Z8a1@name) Z8a1@name (Z883@f Z87d@ls (cdr Z87e@exts) (cons Z8a1@name Z87f@failed-list))))))))) (lambda (Z8a3@f) (if (procedure? Z8a3@f) Z8a3@f (assertion-violation 'file-locator '"not a procedure" Z8a3@f))))) (set! Z97f@Z7be@file-locator Z7be@file-locator) (set! Z7c0@serialize-all (lambda (Z8a5@serialize Z8a6@compile) (letrec* ((Z8aa@library-desc (lambda (Z8ad@x) (list (Z77a@library-id Z8ad@x) (Z77e@library-name Z8ad@x))))) (for-each (lambda (Z8ab@x) (if (Z7ae@library-source-file-name Z8ab@x) (Z8a5@serialize (Z7ae@library-source-file-name Z8ab@x) (list (Z77a@library-id Z8ab@x) (Z77e@library-name Z8ab@x) (Z782@library-version Z8ab@x) (map Z8aa@library-desc (Z786@library-imp* Z8ab@x)) (map Z8aa@library-desc (Z78a@library-vis* Z8ab@x)) (map Z8aa@library-desc (Z78e@library-inv* Z8ab@x)) (Z792@library-subst Z8ab@x) (Z796@library-env Z8ab@x) (Z8a6@compile (Z7a2@library-visit-code Z8ab@x)) (Z8a6@compile (Z7a6@library-invoke-code Z8ab@x)) (Z7aa@library-visible? Z8ab@x))) (void))) ((Z76c@current-library-collection)))))) (set! Z980@Z7c0@serialize-all Z7c0@serialize-all) (set! Z7c2@current-precompiled-library-loader (Z6c2@Z5a0@make-parameter (lambda (Z8af@filename Z8b0@sk) '#f))) (set! Z981@Z7c2@current-precompiled-library-loader Z7c2@current-precompiled-library-loader) (set! Z7c4@try-load-from-file (lambda (Z8b3@filename) ((Z7c2@current-precompiled-library-loader) Z8b3@filename (lambda Z8d9 (let ((Z8da (length Z8d9))) (if (= Z8da '11) (apply (lambda (Z8b5@id Z8b6@name Z8b7@ver Z8b8@imp* Z8b9@vis* Z8ba@inv* Z8bb@exp-subst Z8bc@exp-env Z8bd@visit-proc Z8be@invoke-proc Z8bf@visible?) (let Z8cd@f ((Z8cb@deps (append Z8b8@imp* Z8b9@vis* Z8ba@inv*))) (if (null? Z8cb@deps) (begin (Z7d8@install-library Z8b5@id Z8b6@name Z8b7@ver Z8b8@imp* Z8b9@vis* Z8ba@inv* Z8bb@exp-subst Z8bc@exp-env Z8bd@visit-proc Z8be@invoke-proc '#f '#f Z8bf@visible? '#f) '#t) (let ((Z8cf@d (car Z8cb@deps))) (let ((Z8d1@label (car Z8cf@d)) (Z8d2@dname (cadr Z8cf@d))) (let ((Z8d5@l (Z7ce@find-library-by-name Z8d2@dname))) (if (and (Z778@library? Z8d5@l) (eq? Z8d1@label (Z77a@library-id Z8d5@l))) (Z8cd@f (cdr Z8cb@deps)) (begin (if Z6bc@Z594@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" Z8b6@name Z8d2@dname Z8b3@filename Z8d5@l Z8d1@label (Z77a@library-id Z8d5@l)) (void)) '#f)))))))) Z8d9) (if (>= Z8da '0) (apply (lambda Z8d7@others '#f) Z8d9) (error 'apply '"invalid arg count")))))))) (set! Z982@Z7c4@try-load-from-file Z7c4@try-load-from-file) (set! Z7c6@library-loader (Z6c2@Z5a0@make-parameter (lambda (Z8db@x) (let ((Z8dd@file-name ((Z7be@file-locator) Z8db@x))) (if (not Z8dd@file-name) (assertion-violation '#f '"cannot file library" Z8db@x) (or (Z7c4@try-load-from-file Z8dd@file-name) ((Z7c8@current-library-expander) (Z6c1@Z59e@read-library-source-file Z8dd@file-name) Z8dd@file-name (lambda (Z8df@name) (if (not (fast-equal? Z8df@name Z8db@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (Z8e5@Z8e2 Z8e6@Z8e4) (let ((Z8e9@e Z8e6@Z8e4) (Z8ea@p Z8e5@Z8e2)) (begin (display '"expected to find library " Z8ea@p) (write Z8db@x Z8ea@p) (display '" in file " Z8ea@p) (display Z8dd@file-name Z8ea@p) (display '", found " Z8ea@p) (write Z8df@name Z8ea@p) (display '" instead" Z8ea@p) (Z8e9@e)))))) (void)))))))) (lambda (Z8ed@f) (if (procedure? Z8ed@f) Z8ed@f (assertion-violation 'library-locator '"not a procedure" Z8ed@f))))) (set! Z983@Z7c6@library-loader Z7c6@library-loader) (set! Z7c8@current-library-expander (Z6c2@Z5a0@make-parameter (lambda (Z8ef@x) (assertion-violation 'library-expander '"not initialized")) (lambda (Z8f1@f) (if (procedure? Z8f1@f) Z8f1@f (assertion-violation 'library-expander '"not a procedure" Z8f1@f))))) (set! Z984@Z7c8@current-library-expander Z7c8@current-library-expander) (set! Z7ca@external-pending-libraries (Z6c2@Z5a0@make-parameter '())) (set! Z985@Z7ca@external-pending-libraries Z7ca@external-pending-libraries) (set! Z7cc@find-external-library (lambda (Z8f3@name) (begin (if (member Z8f3@name (Z7ca@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" Z8f3@name) (void)) (let ((Z8f9@Z8f6 Z7ca@external-pending-libraries) (Z8fa@Z8f8 (cons Z8f3@name (Z7ca@external-pending-libraries)))) (let ((Z8fd@swap (lambda () (let ((Z8ff@t (Z8f9@Z8f6))) (begin (Z8f9@Z8f6 Z8fa@Z8f8) (set! Z8fa@Z8f8 Z8ff@t)))))) (dynamic-wind Z8fd@swap (lambda () (begin ((Z7c6@library-loader) Z8f3@name) (or (Z7b6@find-library-by (lambda (Z901@x) (fast-equal? (Z77e@library-name Z901@x) Z8f3@name))) (assertion-violation '#f '"handling external library did not yield the correct library" Z8f3@name)))) Z8fd@swap)))))) (set! Z986@Z7cc@find-external-library Z7cc@find-external-library) (set! Z7ce@find-library-by-name (lambda (Z903@name) (or (Z7b6@find-library-by (lambda (Z905@x) (fast-equal? (Z77e@library-name Z905@x) Z903@name))) (Z7cc@find-external-library Z903@name)))) (set! Z987@Z7ce@find-library-by-name Z7ce@find-library-by-name) (set! Z7d0@library-exists? (lambda (Z907@name) (and (Z7b6@find-library-by (lambda (Z909@x) (fast-equal? (Z77e@library-name Z909@x) Z907@name))) '#t))) (set! Z988@Z7d0@library-exists? Z7d0@library-exists?) (set! Z7d2@find-library-by-spec/die (lambda (Z90b@spec) (let ((Z90d@id (car Z90b@spec))) (or (Z7b6@find-library-by (lambda (Z90f@x) (eq? Z90d@id (Z77a@library-id Z90f@x)))) (assertion-violation '#f '"cannot find library with required spec" Z90b@spec))))) (set! Z989@Z7d2@find-library-by-spec/die Z7d2@find-library-by-spec/die) (set! Z7d4@label->binding-table (make-eq-hashtable)) (set! Z98a@Z7d4@label->binding-table Z7d4@label->binding-table) (set! Z7d6@install-library-record (lambda (Z911@lib) (begin (let ((Z913@exp-env (Z796@library-env Z911@lib))) (for-each (lambda (Z915@x) (let ((Z917@label (car Z915@x)) (Z918@binding (cdr Z915@x))) (let ((Z91b@binding (let ((Z91d@t (car Z918@binding))) (if (memv Z91d@t '(global)) (cons 'global (cons Z911@lib (cdr Z918@binding))) (if (memv Z91d@t '(global-macro)) (cons 'global-macro (cons Z911@lib (cdr Z918@binding))) (if (memv Z91d@t '(global-macro!)) (cons 'global-macro! (cons Z911@lib (cdr Z918@binding))) Z918@binding)))))) (begin (if (hashtable-ref Z7d4@label->binding-table Z917@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" Z917@label (hashtable-ref Z7d4@label->binding-table Z917@label '#f) Z91b@binding) (exit)) (void)) (hashtable-set! Z7d4@label->binding-table Z917@label Z91b@binding))))) Z913@exp-env)) ((Z76c@current-library-collection) Z911@lib)))) (set! Z98b@Z7d6@install-library-record Z7d6@install-library-record) (set! Z7d8@install-library (lambda (Z91f@id Z920@name Z921@ver Z922@imp* Z923@vis* Z924@inv* Z925@exp-subst Z926@exp-env Z927@visit-proc Z928@invoke-proc Z929@visit-code Z92a@invoke-code Z92b@visible? Z92c@source-file-name) (let ((Z93b@imp-lib* (map Z7d2@find-library-by-spec/die Z922@imp*)) (Z93c@vis-lib* (map Z7d2@find-library-by-spec/die Z923@vis*)) (Z93d@inv-lib* (map Z7d2@find-library-by-spec/die Z924@inv*))) (begin (if (not (and (symbol? Z91f@id) (list? Z920@name) (list? Z921@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" Z91f@id Z920@name Z921@ver) (void)) (if (Z7d0@library-exists? Z920@name) (assertion-violation 'install-library '"library is already installed" Z920@name) (void)) (let ((Z941@lib (make-simple-struct 'library '15 (list Z91f@id Z920@name Z921@ver Z93b@imp-lib* Z93c@vis-lib* Z93d@inv-lib* Z925@exp-subst Z926@exp-env Z927@visit-proc Z928@invoke-proc Z929@visit-code Z92a@invoke-code Z92b@visible? Z92c@source-file-name)))) (Z7d6@install-library-record Z941@lib)))))) (set! Z98c@Z7d8@install-library Z7d8@install-library) (set! Z7da@imported-label->binding (lambda (Z943@lab) (hashtable-ref Z7d4@label->binding-table Z943@lab '#f))) (set! Z98d@Z7da@imported-label->binding Z7da@imported-label->binding) (set! Z7dc@invoke-library (lambda (Z945@lib) (let ((Z947@invoke (Z79e@library-invoke-state Z945@lib))) (if (procedure? Z947@invoke) (begin (Z7a0@set-library-invoke-state! Z945@lib (lambda () (assertion-violation 'invoke '"circularity detected" Z945@lib))) (for-each Z7dc@invoke-library (Z78e@library-inv* Z945@lib)) (Z7a0@set-library-invoke-state! Z945@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" Z945@lib))) (Z947@invoke) (Z7a0@set-library-invoke-state! Z945@lib '#t)) (void))))) (set! Z98e@Z7dc@invoke-library Z7dc@invoke-library) (set! Z7de@visit-library (lambda (Z949@lib) (let ((Z94b@visit (Z79a@library-visit-state Z949@lib))) (if (procedure? Z94b@visit) (begin (Z79c@set-library-visit-state! Z949@lib (lambda () (assertion-violation 'visit '"circularity detected" Z949@lib))) (for-each Z7dc@invoke-library (Z78a@library-vis* Z949@lib)) (Z79c@set-library-visit-state! Z949@lib (lambda () (assertion-violation 'invoke '"first visit did not return" Z949@lib))) (Z94b@visit) (Z79c@set-library-visit-state! Z949@lib '#t)) (void))))) (set! Z98f@Z7de@visit-library Z7de@visit-library) (set! Z7e0@invoke-library-by-spec (lambda (Z94d@spec) (Z7dc@invoke-library (Z7d2@find-library-by-spec/die Z94d@spec)))) (set! Z990@Z7e0@invoke-library-by-spec Z7e0@invoke-library-by-spec) (set! Z7e2@installed-libraries (lambda Z955 (let ((Z956 (length Z955))) (if (= Z956 '1) (apply (lambda (Z94f@all?) (let Z953@f ((Z951@ls ((Z76c@current-library-collection)))) (if (null? Z951@ls) '() (if (or Z94f@all? (Z7aa@library-visible? (car Z951@ls))) (cons (car Z951@ls) (Z953@f (cdr Z951@ls))) (Z953@f (cdr Z951@ls)))))) Z955) (if (= Z956 '0) (apply (lambda () (Z7e2@installed-libraries '#f)) Z955) (error 'apply '"invalid arg count")))))) (set! Z991@Z7e2@installed-libraries Z7e2@installed-libraries) (set! Z7e4@library-spec (lambda (Z957@x) (begin (if (not (Z778@library? Z957@x)) (assertion-violation 'library-spec '"not a library" Z957@x) (void)) (list (Z77a@library-id Z957@x) (Z77e@library-name Z957@x) (Z782@library-version Z957@x))))) (set! Z992@Z7e4@library-spec Z7e4@library-spec) (void))
(begin (set! Z996@build-global-define (unspecified)) (set! Za07@build-lambda (unspecified)) (set! Za09@build-case-lambda (unspecified)) (set! Za37@build-sequence (unspecified)) (set! Za39@build-void (unspecified)) (set! Za3b@build-letrec (unspecified)) (set! Za3d@build-let (unspecified)) (set! Za3f@build-named-let (unspecified)) (set! Za41@build-letrec* (unspecified)) (set! Za43@build-library-letrec* (unspecified)) (set! Za45@build-receive (unspecified)) (set! Z996@build-global-define (lambda (Za46@x) (Za39@build-void))) (set! Zad4@Z996@build-global-define Z996@build-global-define) (set! Za07@build-lambda (lambda (Za48@ae Za49@vars Za4a@exp) (list 'lambda Za49@vars Za4a@exp))) (set! Zad5@Za07@build-lambda Za07@build-lambda) (set! Za09@build-case-lambda (lambda (Za4e@ae Za4f@vars* Za50@exp*) (letrec* ((Za55@build-error (lambda (Za8c@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (Za57@build-pred (lambda (Za74@ae Za75@n Za76@vars) (call-with-values (lambda () (let Za82@f ((Za7e@vars Za76@vars) (Za7f@count '0)) (if (pair? Za7e@vars) (Za82@f (cdr Za7e@vars) (+ Za7f@count '1)) (if (null? Za7e@vars) (values Za7f@count '=) (values Za7f@count '>=))))) (lambda (Za84@Za7b Za85@Za7d) (let ((Za88@pred Za85@Za7d) (Za89@count Za84@Za7b)) (list (list 'primitive Za88@pred) Za75@n (list 'quote Za89@count))))))) (Za59@build-apply (lambda (Za6c@ae Za6d@g Za6e@vars Za6f@exp) (list '(primitive apply) (Za07@build-lambda Za6c@ae Za6e@vars Za6f@exp) Za6d@g))) (Za5b@expand-case-lambda (lambda (Za5c@ae Za5d@vars Za5e@exp*) (let ((Za62@g (gensym)) (Za63@n (gensym))) (list 'lambda Za62@g (Za3d@build-let Za5c@ae (list Za63@n) (list (list '(primitive length) Za62@g)) (let Za6a@f ((Za66@vars* Za4f@vars*) (Za67@exp* Za5e@exp*)) (if (null? Za66@vars*) (Za55@build-error Za5c@ae) (list 'if (Za57@build-pred Za5c@ae Za63@n (car Za66@vars*)) (Za59@build-apply Za5c@ae Za62@g (car Za66@vars*) (car Za67@exp*)) (Za6a@f (cdr Za66@vars*) (cdr Za67@exp*))))))))))) (if (= (length Za50@exp*) '1) (Za07@build-lambda Za4e@ae (car Za4f@vars*) (car Za50@exp*)) (Za5b@expand-case-lambda Za4e@ae Za4f@vars* Za50@exp*))))) (set! Zad6@Za09@build-case-lambda Za09@build-case-lambda) (set! Za37@build-sequence (lambda (Za8e@ae Za8f@exps) (let Za94@loop ((Za92@exps Za8f@exps)) (if (null? (cdr Za92@exps)) (car Za92@exps) (if (equal? (car Za92@exps) (Za39@build-void)) (Za94@loop (cdr Za92@exps)) (cons 'begin Za92@exps)))))) (set! Zad7@Za37@build-sequence Za37@build-sequence) (set! Za39@build-void (lambda () '((primitive void)))) (set! Zad8@Za39@build-void Za39@build-void) (set! Za3b@build-letrec (lambda (Za96@ae Za97@vars Za98@val-exps Za99@body-exp) (if (null? Za97@vars) Za99@body-exp (list 'letrec (map list Za97@vars Za98@val-exps) Za99@body-exp)))) (set! Zad9@Za3b@build-letrec Za3b@build-letrec) (set! Za3d@build-let (lambda (Za9e@ae Za9f@vars Zaa0@val-exps Zaa1@body-exp) (if (null? Za9f@vars) Zaa1@body-exp (list 'let (map list Za9f@vars Zaa0@val-exps) Zaa1@body-exp)))) (set! Zada@Za3d@build-let Za3d@build-let) (set! Za3f@build-named-let (lambda (Zaa6@ae Zaa7@name Zaa8@vars Zaa9@val-exps Zaaa@body-exp) (list 'let Zaa7@name (map list Zaa8@vars Zaa9@val-exps) Zaaa@body-exp))) (set! Zadb@Za3f@build-named-let Za3f@build-named-let) (set! Za41@build-letrec* (lambda (Zab0@ae Zab1@vars Zab2@val-exps Zab3@body-exp) (if (null? Zab1@vars) Zab3@body-exp (list 'letrec* (map list Zab1@vars Zab2@val-exps) Zab3@body-exp)))) (set! Zadc@Za41@build-letrec* Za41@build-letrec*) (set! Za43@build-library-letrec* (lambda (Zab8@ae Zab9@name Zaba@vars Zabb@locs Zabc@val-exps Zabd@body-exp) (cons 'begin (append (map (lambda (Zac4@var) (cons 'set! (cons Zac4@var '((unspecified))))) Zaba@vars) (append (apply append (map (lambda (Zac6@var Zac7@loc Zac8@val-exp) (list (list 'set! Zac6@var Zac8@val-exp) (list 'set! Zac7@loc Zac6@var))) Zaba@vars Zabb@locs Zabc@val-exps)) (list Zabd@body-exp)))))) (set! Zadd@Za43@build-library-letrec* Za43@build-library-letrec*) (set! Za45@build-receive (lambda (Zacc@ae Zacd@vars Zace@producer Zacf@body*) (begin (display '"************** in ") (cons 'receive (cons Zacd@vars (cons Zace@producer Zacf@body*)))))) (set! Zade@Za45@build-receive Za45@build-receive) (void))
(begin (set! Zaed@file-options-macro (unspecified)) (set! Zaef@set-cons (unspecified)) (set! Zaf1@set-union (unspecified)) (set! Zaf6@top-mark* (unspecified)) (set! Zaf8@top-marked? (unspecified)) (set! Zafa@gen-lexical (unspecified)) (set! Zafc@gen-global (unspecified)) (set! Zafe@gen-label (unspecified)) (set! Zb00@gen-top-level-label (unspecified)) (set! Zb02@gen-define-label+loc (unspecified)) (set! Zb04@gen-define-label (unspecified)) (set! Zb0e@rib? (unspecified)) (set! Zb10@rib-sym* (unspecified)) (set! Zb12@set-rib-sym*! (unspecified)) (set! Zb14@rib-mark** (unspecified)) (set! Zb16@set-rib-mark**! (unspecified)) (set! Zb18@rib-label* (unspecified)) (set! Zb1a@set-rib-label*! (unspecified)) (set! Zb1c@rib-sealed/freq (unspecified)) (set! Zb1e@set-rib-sealed/freq! (unspecified)) (set! Zb20@rib-cache (unspecified)) (set! Zb22@set-rib-cache! (unspecified)) (set! Zb24@dummy (unspecified)) (set! Zb26@make-empty-rib (unspecified)) (set! Zb28@extend-rib! (unspecified)) (set! Zb2a@extend-rib/nc! (unspecified)) (set! Zb2c@make-rib-map (unspecified)) (set! Zb2e@seal-rib! (unspecified)) (set! Zb30@unseal-rib! (unspecified)) (set! Zb32@make-full-rib (unspecified)) (set! Zb34@rp (unspecified)) (set! Zb3e@stx? (unspecified)) (set! Zb40@stx-expr (unspecified)) (set! Zb42@set-stx-expr! (unspecified)) (set! Zb44@stx-mark* (unspecified)) (set! Zb46@set-stx-mark*! (unspecified)) (set! Zb48@stx-subst* (unspecified)) (set! Zb4a@set-stx-subst*! (unspecified)) (set! Zb4c@stx-ae* (unspecified)) (set! Zb4e@set-stx-ae*! (unspecified)) (set! Zb50@dummy (unspecified)) (set! Zb52@datum->stx (unspecified)) (set! Zb54@gen-mark (unspecified)) (set! Zb56@anti-mark (unspecified)) (set! Zb58@anti-mark? (unspecified)) (set! Zb5a@mkstx (unspecified)) (set! Zb5c@add-mark (unspecified)) (set! Zb5e@add-subst (unspecified)) (set! Zb60@syntax-kind? (unspecified)) (set! Zb62@syntax-vector->list (unspecified)) (set! Zb64@syntax-pair? (unspecified)) (set! Zb66@syntax-vector? (unspecified)) (set! Zb68@syntax-null? (unspecified)) (set! Zb6a@syntax-list? (unspecified)) (set! Zb6c@syntax-car (unspecified)) (set! Zb6e@syntax-cdr (unspecified)) (set! Zb70@syntax->list (unspecified)) (set! Zb72@id? (unspecified)) (set! Zb74@id->sym (unspecified)) (set! Zb76@bound-id=? (unspecified)) (set! Zb78@free-id=? (unspecified)) (set! Zb7a@valid-bound-ids? (unspecified)) (set! Zb7c@distinct-bound-ids? (unspecified)) (set! Zb7e@bound-id-member? (unspecified)) (set! Zb80@self-evaluating? (unspecified)) (set! Zb82@strip-annotations (unspecified)) (set! Zb84@strip (unspecified)) (set! Zb86@stx->datum (unspecified)) (set! Zb88@id->label (unspecified)) (set! Zb8a@label->binding (unspecified)) (set! Zb8c@make-binding (unspecified)) (set! Zb8e@binding-type (unspecified)) (set! Zb90@binding-value (unspecified)) (set! Zb92@raise-unbound-error (unspecified)) (set! Zb94@syntax-type (unspecified)) (set! Zba2@sanitize-binding (unspecified)) (set! Zba4@make-variable-transformer (unspecified)) (set! Zba6@variable-transformer? (unspecified)) (set! Zba8@variable-transformer-procedure (unspecified)) (set! Zbaa@make-eval-transformer (unspecified)) (set! Zcfb@parse-define (unspecified)) (set! Zcfd@parse-define-syntax (unspecified)) (set! Zcff@scheme-stx-hashtable (unspecified)) (set! Zd01@scheme-stx (unspecified)) (set! Zd03@lexical-var (unspecified)) (set! Zd05@lexical-mutable? (unspecified)) (set! Zd07@set-lexical-mutable! (unspecified)) (set! Zd09@add-lexical (unspecified)) (set! Zd0b@add-lexicals (unspecified)) (set! Zd0d@letrec-helper (unspecified)) (set! Zd0f@let-transformer (unspecified)) (set! Zd11@letrec-transformer (unspecified)) (set! Zd13@letrec*-transformer (unspecified)) (set! Zd15@fluid-let-syntax-transformer (unspecified)) (set! Zd17@type-descriptor-transformer (unspecified)) (set! Zd19@record-type-descriptor-transformer (unspecified)) (set! Zd1b@record-constructor-descriptor-transformer (unspecified)) (set! Zd1d@when-macro (unspecified)) (set! Zd1f@unless-macro (unspecified)) (set! Zd21@if-transformer (unspecified)) (set! Zd23@and-transformer (unspecified)) (set! Zd25@or-transformer (unspecified)) (set! Zd27@case-macro (unspecified)) (set! Zd29@quote-transformer (unspecified)) (set! Zd2b@case-lambda-transformer (unspecified)) (set! Zd2d@lambda-transformer (unspecified)) (set! Zd2f@bless (unspecified)) (set! Zd31@with-syntax-macro (unspecified)) (set! Zd33@invalid-fmls-error (unspecified)) (set! Zd35@let-macro (unspecified)) (set! Zd37@let-values-macro (unspecified)) (set! Zd39@let*-values-macro (unspecified)) (set! Zd3b@trace-lambda-macro (unspecified)) (set! Zd3d@trace-define-macro (unspecified)) (set! Zd3f@trace-define-syntax-macro (unspecified)) (set! Zd41@trace-let/rec-syntax (unspecified)) (set! Zd43@trace-let-syntax-macro (unspecified)) (set! Zd45@trace-letrec-syntax-macro (unspecified)) (set! Zd47@guard-macro (unspecified)) (set! Zd49@define-enumeration-macro (unspecified)) (set! Zd4b@time-macro (unspecified)) (set! Zd4d@delay-macro (unspecified)) (set! Zd4f@assert-macro (unspecified)) (set! Zd51@endianness-macro (unspecified)) (set! Zd53@identifier-syntax-macro (unspecified)) (set! Zd55@do-macro (unspecified)) (set! Zd57@let*-macro (unspecified)) (set! Zd59@or-macro (unspecified)) (set! Zd5b@and-macro (unspecified)) (set! Zd5d@cond-macro (unspecified)) (set! Zd5f@do-include (unspecified)) (set! Zd61@include-macro (unspecified)) (set! Zd63@include-into-macro (unspecified)) (set! Zd65@syntax-rules-macro (unspecified)) (set! Zd67@quasiquote-macro (unspecified)) (set! Zd69@quasisyntax-macro (unspecified)) (set! Zd6b@define-struct-macro (unspecified)) (set! Zd6d@define-record-type-macro (unspecified)) (set! Zd6f@define-condition-type-macro (unspecified)) (set! Zd71@incorrect-usage-macro (unspecified)) (set! Zd73@parameterize-macro (unspecified)) (set! Zd75@foreign-call-transformer (unspecified)) (set! Zd77@convert-pattern (unspecified)) (set! Zd79@syntax-dispatch (unspecified)) (set! Zd7b@ellipsis? (unspecified)) (set! Zd7d@underscore? (unspecified)) (set! Zd7f@verify-literals (unspecified)) (set! Zd81@syntax-case-transformer (unspecified)) (set! Zd83@ellipsis-map (unspecified)) (set! Zd85@syntax-transformer (unspecified)) (set! Zd87@core-macro-transformer (unspecified)) (set! Zd89@symbol-macro (unspecified)) (set! Zd8b@macro-transformer (unspecified)) (set! Zd8d@local-macro-transformer (unspecified)) (set! Zd8f@do-macro-call (unspecified)) (set! Zd91@chi-macro (unspecified)) (set! Zd93@chi-local-macro (unspecified)) (set! Zd95@chi-global-macro (unspecified)) (set! Zd97@chi-expr* (unspecified)) (set! Zd99@chi-application (unspecified)) (set! Zd9b@chi-expr (unspecified)) (set! Zd9d@chi-set! (unspecified)) (set! Zd9f@verify-formals (unspecified)) (set! Zda1@chi-lambda-clause (unspecified)) (set! Zda3@chi-lambda-clause* (unspecified)) (set! Zda5@chi-defun (unspecified)) (set! Zda7@chi-rhs (unspecified)) (set! Zda9@expand-interaction-rhs*/init* (unspecified)) (set! Zdab@chi-rhs* (unspecified)) (set! Zdad@find-bound=? (unspecified)) (set! Zdaf@find-dups (unspecified)) (set! Zdb1@chi-internal (unspecified)) (set! Zdb3@parse-module (unspecified)) (set! Zdbd@module-interface? (unspecified)) (set! Zdbf@module-interface-first-mark (unspecified)) (set! Zdc1@set-module-interface-first-mark! (unspecified)) (set! Zdc3@module-interface-exp-id-vec (unspecified)) (set! Zdc5@set-module-interface-exp-id-vec! (unspecified)) (set! Zdc7@module-interface-exp-lab-vec (unspecified)) (set! Zdc9@set-module-interface-exp-lab-vec! (unspecified)) (set! Zdcb@dummy (unspecified)) (set! Zdcd@module-interface-exp-id* (unspecified)) (set! Zdcf@chi-internal-module (unspecified)) (set! Zdd1@chi-body* (unspecified)) (set! Zdd3@expand-transformer (unspecified)) (set! Zdd5@parse-exports (unspecified)) (set! Zdd7@parse-library-name (unspecified)) (set! Zdd9@parse-library (unspecified)) (set! Zddb@parse-import-spec* (unspecified)) (set! Zddd@make-top-rib (unspecified)) (set! Zddf@make-collector (unspecified)) (set! Zde1@inv-collector (unspecified)) (set! Zde3@vis-collector (unspecified)) (set! Zde5@imp-collector (unspecified)) (set! Zde7@chi-library-internal (unspecified)) (set! Zde9@chi-interaction-expr (unspecified)) (set! Zdeb@library-body-expander (unspecified)) (set! Zded@core-library-expander (unspecified)) (set! Zdef@parse-top-level-program (unspecified)) (set! Zdf1@top-level-expander (unspecified)) (set! Zdf3@rp (unspecified)) (set! Zdfd@env? (unspecified)) (set! Zdff@env-names (unspecified)) (set! Ze01@set-env-names! (unspecified)) (set! Ze03@env-labels (unspecified)) (set! Ze05@set-env-labels! (unspecified)) (set! Ze07@env-itc (unspecified)) (set! Ze09@set-env-itc! (unspecified)) (set! Ze0b@dummy (unspecified)) (set! Ze0d@rp (unspecified)) (set! Ze17@interaction-env? (unspecified)) (set! Ze19@interaction-env-rib (unspecified)) (set! Ze1b@set-interaction-env-rib! (unspecified)) (set! Ze1d@interaction-env-r (unspecified)) (set! Ze1f@set-interaction-env-r! (unspecified)) (set! Ze21@interaction-env-locs (unspecified)) (set! Ze23@set-interaction-env-locs! (unspecified)) (set! Ze25@dummy (unspecified)) (set! Ze27@interaction-environment-symbols (unspecified)) (set! Ze29@environment-bindings (unspecified)) (set! Ze2b@parse-binding (unspecified)) (set! Ze2d@environment? (unspecified)) (set! Ze2f@environment-symbols (unspecified)) (set! Ze31@environment (unspecified)) (set! Ze33@null-environment (unspecified)) (set! Ze35@scheme-report-environment (unspecified)) (set! Ze37@expand (unspecified)) (set! Ze39@eval (unspecified)) (set! Ze3b@library-expander (unspecified)) (set! Ze3d@boot-library-expand (unspecified)) (set! Ze3f@rev-map-append (unspecified)) (set! Ze41@build-exports (unspecified)) (set! Ze43@make-export-subst (unspecified)) (set! Ze45@make-export-env/macros (unspecified)) (set! Ze47@generate-temporaries (unspecified)) (set! Ze49@free-identifier=? (unspecified)) (set! Ze4b@bound-identifier=? (unspecified)) (set! Ze4d@make-source-condition (unspecified)) (set! Ze4f@extract-position-condition (unspecified)) (set! Ze51@expression-position (unspecified)) (set! Ze53@assertion-error (unspecified)) (set! Ze55@syntax-error (unspecified)) (set! Ze57@syntax-violation* (unspecified)) (set! Ze59@syntax-violation (unspecified)) (set! Ze5b@identifier? (unspecified)) (set! Ze5d@datum->syntax (unspecified)) (set! Ze5f@syntax->datum (unspecified)) (set! Ze61@ungensym-all (unspecified)) (set! Ze63@compile-r6rs-top-level (unspecified)) (set! Ze65@pre-compile-r6rs-top-level (unspecified)) (set! Ze67@interaction-environment (unspecified)) (set! Ze69@top-level-context (unspecified)) (set! Zaed@file-options-macro (lambda (Ze6a@x) (letrec* ((Ze6d@valid-option? (lambda (Ze76@x) (and (Zb72@id? Ze76@x) (memq (Zb74@id->sym Ze76@x) '(no-fail no-create no-truncate)))))) (let ((Ze6e@t Ze6a@x)) (let ((Ze70@ls/false (Zd79@syntax-dispatch Ze6e@t '(_ . each-any)))) (if (and Ze70@ls/false (apply (lambda (Ze72@opt*) (for-all Ze6d@valid-option? Ze72@opt*)) Ze70@ls/false)) (apply (lambda (Ze74@opt*) (Zd2f@bless (list 'make-file-options (list 'quote Ze74@opt*)))) Ze70@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Ze6e@t))))))) (set! Z27c0@Zaed@file-options-macro Zaed@file-options-macro) (set! Zaef@set-cons (lambda (Ze78@x Ze79@ls) (if (memq Ze78@x Ze79@ls) Ze79@ls (cons Ze78@x Ze79@ls)))) (set! Z27c1@Zaef@set-cons Zaef@set-cons) (set! Zaf1@set-union (lambda (Ze7c@ls1 Ze7d@ls2) (if (null? Ze7c@ls1) Ze7d@ls2 (if (memq (car Ze7c@ls1) Ze7d@ls2) (Zaf1@set-union (cdr Ze7c@ls1) Ze7d@ls2) (cons (car Ze7c@ls1) (Zaf1@set-union (cdr Ze7c@ls1) Ze7d@ls2)))))) (set! Z27c2@Zaf1@set-union Zaf1@set-union) (set! Zaf6@top-mark* '(top)) (set! Z27c3@Zaf6@top-mark* Zaf6@top-mark*) (set! Zaf8@top-marked? (lambda (Ze80@m*) (memq 'top Ze80@m*))) (set! Z27c4@Zaf8@top-marked? Zaf8@top-marked?) (set! Zafa@gen-lexical (lambda (Ze82@sym) (if (symbol? Ze82@sym) (gensym Ze82@sym) (if (Zb3e@stx? Ze82@sym) (Zafa@gen-lexical (Zb74@id->sym Ze82@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" Ze82@sym))))) (set! Z27c5@Zafa@gen-lexical Zafa@gen-lexical) (set! Zafc@gen-global (lambda (Ze84@x) (Zafa@gen-lexical Ze84@x))) (set! Z27c6@Zafc@gen-global Zafc@gen-global) (set! Zafe@gen-label (lambda (Ze86@_) (gensym))) (set! Z27c7@Zafe@gen-label Zafe@gen-label) (set! Zb00@gen-top-level-label (lambda (Ze88@id Ze89@rib) (letrec* ((Ze8d@find (lambda (Ze98@sym Ze99@mark* Ze9a@sym* Ze9b@mark** Ze9c@label*) (and (pair? Ze9a@sym*) (if (and (eq? Ze98@sym (car Ze9a@sym*)) (same-marks? Ze99@mark* (car Ze9b@mark**))) (car Ze9c@label*) (Ze8d@find Ze98@sym Ze99@mark* (cdr Ze9a@sym*) (cdr Ze9b@mark**) (cdr Ze9c@label*))))))) (let ((Ze8e@sym (Zb74@id->sym Ze88@id)) (Ze8f@mark* (Zb44@stx-mark* Ze88@id))) (let ((Ze92@sym* (Zb10@rib-sym* Ze89@rib))) (let ((Ze94@t (and (memq Ze8e@sym (Zb10@rib-sym* Ze89@rib)) (Ze8d@find Ze8e@sym Ze8f@mark* Ze92@sym* (Zb14@rib-mark** Ze89@rib) (Zb18@rib-label* Ze89@rib))))) (if Ze94@t ((lambda (Ze96@label) (if (Z98d@Z7da@imported-label->binding Ze96@label) (gensym) Ze96@label)) Ze94@t) (gensym)))))))) (set! Z27c8@Zb00@gen-top-level-label Zb00@gen-top-level-label) (set! Zb02@gen-define-label+loc (lambda (Zea2@id Zea3@rib) (let ((Zea6@t (Ze69@top-level-context))) (if Zea6@t ((lambda (Zea8@env) (let ((Zeaa@label (Zb00@gen-top-level-label Zea2@id Zea3@rib)) (Zeab@locs (Ze21@interaction-env-locs Zea8@env))) (values Zeaa@label (let ((Zeae@t (assq Zeaa@label Zeab@locs))) (if Zeae@t (cdr Zeae@t) (let ((Zeb0@loc (Zafa@gen-lexical Zea2@id))) (begin (Ze23@set-interaction-env-locs! Zea8@env (cons (cons Zeaa@label Zeb0@loc) Zeab@locs)) Zeb0@loc))))))) Zea6@t) (values (gensym) (Zafa@gen-lexical Zea2@id)))))) (set! Z27c9@Zb02@gen-define-label+loc Zb02@gen-define-label+loc) (set! Zb04@gen-define-label (lambda (Zeb2@id Zeb3@rib) (if (Ze69@top-level-context) (Zb00@gen-top-level-label Zeb2@id Zeb3@rib) (gensym)))) (set! Z27ca@Zb04@gen-define-label Zb04@gen-define-label) (set! Zb0e@rib? (lambda (Zeb6@x) (and (simple-struct? Zeb6@x) (eq? (simple-struct-name Zeb6@x) 'rib)))) (set! Z27cb@Zb0e@rib? Zb0e@rib?) (set! Zb10@rib-sym* (lambda (Zeb8@x) (simple-struct-ref Zeb8@x '0))) (set! Z27cc@Zb10@rib-sym* Zb10@rib-sym*) (set! Zb12@set-rib-sym*! (lambda (Zeba@x Zebb@val) (simple-struct-set! Zeba@x '0 Zebb@val))) (set! Z27cd@Zb12@set-rib-sym*! Zb12@set-rib-sym*!) (set! Zb14@rib-mark** (lambda (Zebe@x) (simple-struct-ref Zebe@x '1))) (set! Z27ce@Zb14@rib-mark** Zb14@rib-mark**) (set! Zb16@set-rib-mark**! (lambda (Zec0@x Zec1@val) (simple-struct-set! Zec0@x '1 Zec1@val))) (set! Z27cf@Zb16@set-rib-mark**! Zb16@set-rib-mark**!) (set! Zb18@rib-label* (lambda (Zec4@x) (simple-struct-ref Zec4@x '2))) (set! Z27d0@Zb18@rib-label* Zb18@rib-label*) (set! Zb1a@set-rib-label*! (lambda (Zec6@x Zec7@val) (simple-struct-set! Zec6@x '2 Zec7@val))) (set! Z27d1@Zb1a@set-rib-label*! Zb1a@set-rib-label*!) (set! Zb1c@rib-sealed/freq (lambda (Zeca@x) (simple-struct-ref Zeca@x '3))) (set! Z27d2@Zb1c@rib-sealed/freq Zb1c@rib-sealed/freq) (set! Zb1e@set-rib-sealed/freq! (lambda (Zecc@x Zecd@val) (simple-struct-set! Zecc@x '3 Zecd@val))) (set! Z27d3@Zb1e@set-rib-sealed/freq! Zb1e@set-rib-sealed/freq!) (set! Zb20@rib-cache (lambda (Zed0@x) (simple-struct-ref Zed0@x '4))) (set! Z27d4@Zb20@rib-cache Zb20@rib-cache) (set! Zb22@set-rib-cache! (lambda (Zed2@x Zed3@val) (simple-struct-set! Zed2@x '4 Zed3@val))) (set! Z27d5@Zb22@set-rib-cache! Zb22@set-rib-cache!) (set! Zb24@dummy '3) (set! Z27d6@Zb24@dummy Zb24@dummy) (set! Zb26@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! Z27d7@Zb26@make-empty-rib Zb26@make-empty-rib) (set! Zb28@extend-rib! (lambda (Zed6@rib Zed7@id Zed8@label) (letrec* ((Zedd@find (lambda (Zeea@sym Zeeb@mark* Zeec@sym* Zeed@mark** Zeee@label*) (and (pair? Zeec@sym*) (if (and (eq? Zeea@sym (car Zeec@sym*)) (same-marks? Zeeb@mark* (car Zeed@mark**))) Zeee@label* (Zedd@find Zeea@sym Zeeb@mark* (cdr Zeec@sym*) (cdr Zeed@mark**) (cdr Zeee@label*))))))) (begin (if (Zb1c@rib-sealed/freq Zed6@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" Zed6@rib) (void)) (let ((Zede@sym (Zb74@id->sym Zed7@id)) (Zedf@mark* (Zb44@stx-mark* Zed7@id))) (let ((Zee2@sym* (Zb10@rib-sym* Zed6@rib))) (let ((Zee4@t (and (memq Zede@sym (Zb10@rib-sym* Zed6@rib)) (Zedd@find Zede@sym Zedf@mark* Zee2@sym* (Zb14@rib-mark** Zed6@rib) (Zb18@rib-label* Zed6@rib))))) (if Zee4@t ((lambda (Zee6@p) (if (not (eq? Zed8@label (car Zee6@p))) (if (Ze69@top-level-context) (set-car! Zee6@p Zed8@label) (Ze59@syntax-violation '#f '"multiple definitions of identifier" Zed7@id)) (void))) Zee4@t) (begin (if (Zb20@rib-cache Zed6@rib) (hashtable-update! (Zb20@rib-cache Zed6@rib) Zede@sym (lambda (Zee8@e) (cons (cons Zedf@mark* Zed8@label) Zee8@e)) '()) (void)) (Zb12@set-rib-sym*! Zed6@rib (cons Zede@sym Zee2@sym*)) (Zb16@set-rib-mark**! Zed6@rib (cons Zedf@mark* (Zb14@rib-mark** Zed6@rib))) (Zb1a@set-rib-label*! Zed6@rib (cons Zed8@label (Zb18@rib-label* Zed6@rib)))))))))))) (set! Z27d8@Zb28@extend-rib! Zb28@extend-rib!) (set! Zb2a@extend-rib/nc! (lambda (Zef4@rib Zef5@id Zef6@label) (let ((Zefa@sym (Zb74@id->sym Zef5@id)) (Zefb@mark* (Zb44@stx-mark* Zef5@id))) (let ((Zefe@sym* (Zb10@rib-sym* Zef4@rib))) (begin (if (Zb20@rib-cache Zef4@rib) (hashtable-update! (Zb20@rib-cache Zef4@rib) Zefa@sym (lambda (Zf00@e) (cons (cons Zefb@mark* Zef6@label) Zf00@e)) '()) (void)) (Zb12@set-rib-sym*! Zef4@rib (cons Zefa@sym Zefe@sym*)) (Zb16@set-rib-mark**! Zef4@rib (cons Zefb@mark* (Zb14@rib-mark** Zef4@rib))) (Zb1a@set-rib-label*! Zef4@rib (cons Zef6@label (Zb18@rib-label* Zef4@rib)))))))) (set! Z27d9@Zb2a@extend-rib/nc! Zb2a@extend-rib/nc!) (set! Zb2c@make-rib-map (lambda (Zf02@sym*) (let ((Zf04@ht (make-eq-hashtable))) (let Zf0a@f ((Zf06@i '0) (Zf07@sym* Zf02@sym*)) (if (null? Zf07@sym*) Zf04@ht (begin (hashtable-update! Zf04@ht (car Zf07@sym*) (lambda (Zf0c@x) (cons Zf06@i Zf0c@x)) '()) (Zf0a@f (+ Zf06@i '1) (cdr Zf07@sym*)))))))) (set! Z27da@Zb2c@make-rib-map Zb2c@make-rib-map) (set! Zb2e@seal-rib! (lambda (Zf0e@rib) (let ((Zf10@sym* (Zb10@rib-sym* Zf0e@rib))) (if (not (null? Zf10@sym*)) (begin (Zb12@set-rib-sym*! Zf0e@rib (list->vector Zf10@sym*)) (Zb16@set-rib-mark**! Zf0e@rib (list->vector (Zb14@rib-mark** Zf0e@rib))) (Zb1a@set-rib-label*! Zf0e@rib (list->vector (Zb18@rib-label* Zf0e@rib))) (Zb1e@set-rib-sealed/freq! Zf0e@rib (Zb2c@make-rib-map Zf10@sym*))) (void))))) (set! Z27db@Zb2e@seal-rib! Zb2e@seal-rib!) (set! Zb30@unseal-rib! (lambda (Zf12@rib) (if (Zb1c@rib-sealed/freq Zf12@rib) (begin (Zb1e@set-rib-sealed/freq! Zf12@rib '#f) (Zb12@set-rib-sym*! Zf12@rib (vector->list (Zb10@rib-sym* Zf12@rib))) (Zb16@set-rib-mark**! Zf12@rib (vector->list (Zb14@rib-mark** Zf12@rib))) (Zb1a@set-rib-label*! Zf12@rib (vector->list (Zb18@rib-label* Zf12@rib)))) (void)))) (set! Z27dc@Zb30@unseal-rib! Zb30@unseal-rib!) (set! Zb32@make-full-rib (lambda (Zf14@id* Zf15@label*) (let ((Zf18@r (make-simple-struct 'rib '6 (list (map Zb74@id->sym Zf14@id*) (map Zb44@stx-mark* Zf14@id*) Zf15@label* '#f '#f)))) (begin (Zb2e@seal-rib! Zf18@r) Zf18@r)))) (set! Z27dd@Zb32@make-full-rib Zb32@make-full-rib) (set! Zb34@rp (Z6bf@Z59a@make-record-printer 'stx (lambda (Zf1a@x Zf1b@p Zf1c@wr) (begin (display '"#<syntax " Zf1b@p) (write (Zb86@stx->datum Zf1a@x) Zf1b@p) (let ((Zf20@expr (Zb40@stx-expr Zf1a@x))) (if (Z6b6@Z588@annotation? Zf20@expr) (let ((Zf22@src (Z6b7@Z58a@annotation-source Zf20@expr))) (if (pair? Zf22@src) (begin (display '" [" Zf1b@p) (display (cdr Zf22@src) Zf1b@p) (display '" of " Zf1b@p) (display (car Zf22@src) Zf1b@p) (display '"]" Zf1b@p)) (void))) (void))) (display '">" Zf1b@p))))) (set! Z27de@Zb34@rp Zb34@rp) (set! Zb3e@stx? (lambda (Zf24@x) (and (simple-struct? Zf24@x) (eq? (simple-struct-name Zf24@x) 'stx)))) (set! Z27df@Zb3e@stx? Zb3e@stx?) (set! Zb40@stx-expr (lambda (Zf26@x) (simple-struct-ref Zf26@x '0))) (set! Z27e0@Zb40@stx-expr Zb40@stx-expr) (set! Zb42@set-stx-expr! (lambda (Zf28@x Zf29@val) (simple-struct-set! Zf28@x '0 Zf29@val))) (set! Z27e1@Zb42@set-stx-expr! Zb42@set-stx-expr!) (set! Zb44@stx-mark* (lambda (Zf2c@x) (simple-struct-ref Zf2c@x '1))) (set! Z27e2@Zb44@stx-mark* Zb44@stx-mark*) (set! Zb46@set-stx-mark*! (lambda (Zf2e@x Zf2f@val) (simple-struct-set! Zf2e@x '1 Zf2f@val))) (set! Z27e3@Zb46@set-stx-mark*! Zb46@set-stx-mark*!) (set! Zb48@stx-subst* (lambda (Zf32@x) (simple-struct-ref Zf32@x '2))) (set! Z27e4@Zb48@stx-subst* Zb48@stx-subst*) (set! Zb4a@set-stx-subst*! (lambda (Zf34@x Zf35@val) (simple-struct-set! Zf34@x '2 Zf35@val))) (set! Z27e5@Zb4a@set-stx-subst*! Zb4a@set-stx-subst*!) (set! Zb4c@stx-ae* (lambda (Zf38@x) (simple-struct-ref Zf38@x '3))) (set! Z27e6@Zb4c@stx-ae* Zb4c@stx-ae*) (set! Zb4e@set-stx-ae*! (lambda (Zf3a@x Zf3b@val) (simple-struct-set! Zf3a@x '3 Zf3b@val))) (set! Z27e7@Zb4e@set-stx-ae*! Zb4e@set-stx-ae*!) (set! Zb50@dummy '3) (set! Z27e8@Zb50@dummy Zb50@dummy) (set! Zb52@datum->stx (lambda (Zf3e@id Zf3f@datum) (make-simple-struct 'stx '5 (list Zf3f@datum (Zb44@stx-mark* Zf3e@id) (Zb48@stx-subst* Zf3e@id) (Zb4c@stx-ae* Zf3e@id))))) (set! Z27e9@Zb52@datum->stx Zb52@datum->stx) (set! Zb54@gen-mark (lambda () (string '#\m))) (set! Z27ea@Zb54@gen-mark Zb54@gen-mark) (set! Zb56@anti-mark '#f) (set! Z27eb@Zb56@anti-mark Zb56@anti-mark) (set! Zb58@anti-mark? not) (set! Z27ec@Zb58@anti-mark? Zb58@anti-mark?) (set! Zb5a@mkstx (lambda (Zf42@e Zf43@m* Zf44@s* Zf45@ae*) (if (and (Zb3e@stx? Zf42@e) (not (Zaf8@top-marked? Zf43@m*))) (call-with-values (lambda () (join-wraps Zf43@m* Zf44@s* Zf45@ae* Zf42@e)) (lambda (Zf50@Zf4b Zf51@Zf4d Zf52@Zf4f) (let ((Zf56@ae* Zf52@Zf4f) (Zf57@s* Zf51@Zf4d) (Zf58@m* Zf50@Zf4b)) (make-simple-struct 'stx '5 (list (Zb40@stx-expr Zf42@e) Zf58@m* Zf57@s* Zf56@ae*))))) (make-simple-struct 'stx '5 (list Zf42@e Zf43@m* Zf44@s* Zf45@ae*))))) (set! Z27ed@Zb5a@mkstx Zb5a@mkstx) (set! Zb5c@add-mark (lambda (Zf5c@m Zf5d@e Zf5e@ae) (Zb5a@mkstx Zf5d@e (list Zf5c@m) '(shift) (list Zf5e@ae)))) (set! Z27ee@Zb5c@add-mark Zb5c@add-mark) (set! Zb5e@add-subst (lambda (Zf62@subst Zf63@e) (Zb5a@mkstx Zf63@e '() (list Zf62@subst) '()))) (set! Z27ef@Zb5e@add-subst Zb5e@add-subst) (set! Zb60@syntax-kind? (lambda (Zf66@x Zf67@p?) (if (Zb3e@stx? Zf66@x) (Zb60@syntax-kind? (Zb40@stx-expr Zf66@x) Zf67@p?) (if (Z6b6@Z588@annotation? Zf66@x) (Zb60@syntax-kind? (Z6b8@Z58c@annotation-expression Zf66@x) Zf67@p?) (Zf67@p? Zf66@x))))) (set! Z27f0@Zb60@syntax-kind? Zb60@syntax-kind?) (set! Zb62@syntax-vector->list (lambda (Zf6a@x) (if (Zb3e@stx? Zf6a@x) (let ((Zf6c@ls (Zb62@syntax-vector->list (Zb40@stx-expr Zf6a@x))) (Zf6d@m* (Zb44@stx-mark* Zf6a@x)) (Zf6e@s* (Zb48@stx-subst* Zf6a@x)) (Zf6f@ae* (Zb4c@stx-ae* Zf6a@x))) (map (lambda (Zf74@x) (Zb5a@mkstx Zf74@x Zf6d@m* Zf6e@s* Zf6f@ae*)) Zf6c@ls)) (if (Z6b6@Z588@annotation? Zf6a@x) (Zb62@syntax-vector->list (Z6b8@Z58c@annotation-expression Zf6a@x)) (if (vector? Zf6a@x) (vector->list Zf6a@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" Zf6a@x)))))) (set! Z27f1@Zb62@syntax-vector->list Zb62@syntax-vector->list) (set! Zb64@syntax-pair? (lambda (Zf76@x) (Zb60@syntax-kind? Zf76@x pair?))) (set! Z27f2@Zb64@syntax-pair? Zb64@syntax-pair?) (set! Zb66@syntax-vector? (lambda (Zf78@x) (Zb60@syntax-kind? Zf78@x vector?))) (set! Z27f3@Zb66@syntax-vector? Zb66@syntax-vector?) (set! Zb68@syntax-null? (lambda (Zf7a@x) (Zb60@syntax-kind? Zf7a@x null?))) (set! Z27f4@Zb68@syntax-null? Zb68@syntax-null?) (set! Zb6a@syntax-list? (lambda (Zf7c@x) (or (Zb68@syntax-null? Zf7c@x) (and (Zb64@syntax-pair? Zf7c@x) (Zb6a@syntax-list? (Zb6e@syntax-cdr Zf7c@x)))))) (set! Z27f5@Zb6a@syntax-list? Zb6a@syntax-list?) (set! Zb6c@syntax-car (lambda (Zf7e@x) (if (Zb3e@stx? Zf7e@x) (Zb5a@mkstx (Zb6c@syntax-car (Zb40@stx-expr Zf7e@x)) (Zb44@stx-mark* Zf7e@x) (Zb48@stx-subst* Zf7e@x) (Zb4c@stx-ae* Zf7e@x)) (if (Z6b6@Z588@annotation? Zf7e@x) (Zb6c@syntax-car (Z6b8@Z58c@annotation-expression Zf7e@x)) (if (pair? Zf7e@x) (car Zf7e@x) (assertion-violation 'syntax-car '"BUG: not a pair" Zf7e@x)))))) (set! Z27f6@Zb6c@syntax-car Zb6c@syntax-car) (set! Zb6e@syntax-cdr (lambda (Zf80@x) (if (Zb3e@stx? Zf80@x) (Zb5a@mkstx (Zb6e@syntax-cdr (Zb40@stx-expr Zf80@x)) (Zb44@stx-mark* Zf80@x) (Zb48@stx-subst* Zf80@x) (Zb4c@stx-ae* Zf80@x)) (if (Z6b6@Z588@annotation? Zf80@x) (Zb6e@syntax-cdr (Z6b8@Z58c@annotation-expression Zf80@x)) (if (pair? Zf80@x) (cdr Zf80@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" Zf80@x)))))) (set! Z27f7@Zb6e@syntax-cdr Zb6e@syntax-cdr) (set! Zb70@syntax->list (lambda (Zf82@x) (if (Zb64@syntax-pair? Zf82@x) (cons (Zb6c@syntax-car Zf82@x) (Zb70@syntax->list (Zb6e@syntax-cdr Zf82@x))) (if (Zb68@syntax-null? Zf82@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" Zf82@x))))) (set! Z27f8@Zb70@syntax->list Zb70@syntax->list) (set! Zb72@id? (lambda (Zf84@x) (and (Zb3e@stx? Zf84@x) (symbol? (Zb40@stx-expr Zf84@x))))) (set! Z27f9@Zb72@id? Zb72@id?) (set! Zb74@id->sym (lambda (Zf86@x) (Zb40@stx-expr Zf86@x))) (set! Z27fa@Zb74@id->sym Zb74@id->sym) (set! Zb76@bound-id=? (lambda (Zf88@x Zf89@y) (and (eq? (Zb74@id->sym Zf88@x) (Zb74@id->sym Zf89@y)) (same-marks? (Zb44@stx-mark* Zf88@x) (Zb44@stx-mark* Zf89@y))))) (set! Z27fb@Zb76@bound-id=? Zb76@bound-id=?) (set! Zb78@free-id=? (lambda (Zf8c@i Zf8d@j) (let ((Zf90@t0 (id->real-label Zf8c@i)) (Zf91@t1 (id->real-label Zf8d@j))) (if (or Zf90@t0 Zf91@t1) (eq? Zf90@t0 Zf91@t1) (eq? (Zb74@id->sym Zf8c@i) (Zb74@id->sym Zf8d@j)))))) (set! Z27fc@Zb78@free-id=? Zb78@free-id=?) (set! Zb7a@valid-bound-ids? (lambda (Zf94@id*) (and (for-all Zb72@id? Zf94@id*) (Zb7c@distinct-bound-ids? Zf94@id*)))) (set! Z27fd@Zb7a@valid-bound-ids? Zb7a@valid-bound-ids?) (set! Zb7c@distinct-bound-ids? (lambda (Zf96@id*) (or (null? Zf96@id*) (and (not (Zb7e@bound-id-member? (car Zf96@id*) (cdr Zf96@id*))) (Zb7c@distinct-bound-ids? (cdr Zf96@id*)))))) (set! Z27fe@Zb7c@distinct-bound-ids? Zb7c@distinct-bound-ids?) (set! Zb7e@bound-id-member? (lambda (Zf98@id Zf99@id*) (and (pair? Zf99@id*) (or (Zb76@bound-id=? Zf98@id (car Zf99@id*)) (Zb7e@bound-id-member? Zf98@id (cdr Zf99@id*)))))) (set! Z27ff@Zb7e@bound-id-member? Zb7e@bound-id-member?) (set! Zb80@self-evaluating? (lambda (Zf9c@x) (or (number? Zf9c@x) (string? Zf9c@x) (char? Zf9c@x) (boolean? Zf9c@x) (regexp? Zf9c@x) (bytevector? Zf9c@x)))) (set! Z2800@Zb80@self-evaluating? Zb80@self-evaluating?) (set! Zb82@strip-annotations (lambda (Zf9e@x) (if (pair? Zf9e@x) (cons (Zb82@strip-annotations (car Zf9e@x)) (Zb82@strip-annotations (cdr Zf9e@x))) (if (vector? Zf9e@x) (vector-map Zb82@strip-annotations Zf9e@x) (if (Z6b6@Z588@annotation? Zf9e@x) (Z6b5@Z586@annotation-stripped Zf9e@x) Zf9e@x))))) (set! Z2801@Zb82@strip-annotations Zb82@strip-annotations) (set! Zb84@strip (lambda (Zfa0@x Zfa1@m*) (if (Zaf8@top-marked? Zfa1@m*) (if (or (Z6b6@Z588@annotation? Zfa0@x) (and (pair? Zfa0@x) (Z6b6@Z588@annotation? (car Zfa0@x))) (and (vector? Zfa0@x) (> (vector-length Zfa0@x) '0) (Z6b6@Z588@annotation? (vector-ref Zfa0@x '0)))) (Zb82@strip-annotations Zfa0@x) Zfa0@x) (let Zfa6@f ((Zfa4@x Zfa0@x)) (if (Zb3e@stx? Zfa4@x) (begin (if (pair? (Zb40@stx-expr Zfa4@x)) (begin (set-source-info! (Zb40@stx-expr Zfa4@x) '#f) (set-source-info! (cdr (Zb40@stx-expr Zfa4@x)) '#f) (set-source-info! (car (Zb40@stx-expr Zfa4@x)) '#f)) (void)) (Zb84@strip (Zb40@stx-expr Zfa4@x) (Zb44@stx-mark* Zfa4@x))) (if (Z6b6@Z588@annotation? Zfa4@x) (Z6b5@Z586@annotation-stripped Zfa4@x) (if (pair? Zfa4@x) (let ((Zfa8@a (Zfa6@f (car Zfa4@x))) (Zfa9@d (Zfa6@f (cdr Zfa4@x)))) (if (and (eq? Zfa8@a (car Zfa4@x)) (eq? Zfa9@d (cdr Zfa4@x))) Zfa4@x (cons Zfa8@a Zfa9@d))) (if (vector? Zfa4@x) (let ((Zfac@old (vector->list Zfa4@x))) (let ((Zfae@new (map Zfa6@f Zfac@old))) (if (for-all eq? Zfac@old Zfae@new) Zfa4@x (list->vector Zfae@new)))) Zfa4@x)))))))) (set! Z2802@Zb84@strip Zb84@strip) (set! Zb86@stx->datum (lambda (Zfb0@x) (Zb84@strip Zfb0@x '()))) (set! Z2803@Zb86@stx->datum Zb86@stx->datum) (set! Zb88@id->label (lambda (Zfb2@id) (or (id->real-label Zfb2@id) (let ((Zfb4@t (Ze69@top-level-context))) (if Zfb4@t ((lambda (Zfb6@env) (let ((Zfb8@rib (Ze19@interaction-env-rib Zfb6@env))) (call-with-values (lambda () (Zb02@gen-define-label+loc Zfb2@id Zfb8@rib)) (lambda (Zfbe@Zfbb Zfbf@Zfbd) (let ((Zfc2@loc_ Zfbf@Zfbd) (Zfc3@lab Zfbe@Zfbb)) (begin (Zb28@extend-rib! Zfb8@rib Zfb2@id Zfc3@lab) Zfc3@lab)))))) Zfb4@t) '#f))))) (set! Z2804@Zb88@id->label Zb88@id->label) (set! Zb8a@label->binding (lambda (Zfc6@x Zfc7@r) (let ((Zfca@t (Z98d@Z7da@imported-label->binding Zfc6@x))) (if Zfca@t ((lambda (Zfcc@b) (if (and (pair? Zfcc@b) (eq? (car Zfcc@b) '$core-rtd)) (cons '$rtd (map Zd2f@bless (cdr Zfcc@b))) (if (and (pair? Zfcc@b) (eq? (car Zfcc@b) 'global-rtd)) (let ((Zfce@lib (cadr Zfcc@b)) (Zfcf@loc (cddr Zfcc@b))) (cons '$rtd (symbol-value Zfcf@loc))) Zfcc@b))) Zfca@t) (let ((Zfd2@t (assq Zfc6@x Zfc7@r))) (if Zfd2@t (cdr Zfd2@t) (let ((Zfd4@t (Ze69@top-level-context))) (if Zfd4@t ((lambda (Zfd6@env) (let ((Zfd8@t (assq Zfc6@x (Ze21@interaction-env-locs Zfd6@env)))) (if Zfd8@t ((lambda (Zfda@p) (cons* 'lexical (cdr Zfda@p) '#f)) Zfd8@t) '(displaced-lexical . #f)))) Zfd4@t) '(displaced-lexical . #f))))))))) (set! Z2805@Zb8a@label->binding Zb8a@label->binding) (set! Zb8c@make-binding cons) (set! Z2806@Zb8c@make-binding Zb8c@make-binding) (set! Zb8e@binding-type car) (set! Z2807@Zb8e@binding-type Zb8e@binding-type) (set! Zb90@binding-value cdr) (set! Z2808@Zb90@binding-value Zb90@binding-value) (set! Zb92@raise-unbound-error (lambda (Zfdc@id) (Ze57@syntax-violation* '#f '"unbound identifier" Zfdc@id (make-undefined-violation)))) (set! Z2809@Zb92@raise-unbound-error Zb92@raise-unbound-error) (set! Zb94@syntax-type (lambda (Zfde@e Zfdf@r) (if (Zb72@id? Zfde@e) (let ((Zfe2@id Zfde@e)) (let ((Zfe4@label (Zb88@id->label Zfe2@id))) (let ((Zfe6@b (Zb8a@label->binding Zfe4@label Zfdf@r))) (let ((Zfe8@type (Zb8e@binding-type Zfe6@b))) (begin (if (not Zfe4@label) (Zb92@raise-unbound-error Zfe2@id) (void)) (let ((Zfea@t Zfe8@type)) (if (memv Zfea@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values Zfe8@type (Zb90@binding-value Zfe6@b) Zfe2@id) (values 'other '#f '#f)))))))) (if (Zb64@syntax-pair? Zfde@e) (let ((Zfec@id (Zb6c@syntax-car Zfde@e))) (if (Zb72@id? Zfec@id) (let ((Zfee@label (Zb88@id->label Zfec@id))) (let ((Zff0@b (Zb8a@label->binding Zfee@label Zfdf@r))) (let ((Zff2@type (Zb8e@binding-type Zff0@b))) (begin (if (not Zfee@label) (Zb92@raise-unbound-error Zfec@id) (void)) (let ((Zff4@t Zff2@type)) (if (memv Zff4@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values Zff2@type (Zb90@binding-value Zff0@b) Zfec@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((Zff6@d (Zb86@stx->datum Zfde@e))) (if (Zb80@self-evaluating? Zff6@d) (values 'constant Zff6@d '#f) (values 'other '#f '#f))))))) (set! Z280a@Zb94@syntax-type Zb94@syntax-type) (set! Zba2@sanitize-binding (lambda (Zff8@x Zff9@src) (if (procedure? Zff8@x) (cons* 'local-macro Zff8@x Zff9@src) (if (and (pair? Zff8@x) (eq? (car Zff8@x) 'macro!) (procedure? (cdr Zff8@x))) (cons* 'local-macro! (cdr Zff8@x) Zff9@src) (if (and (pair? Zff8@x) (eq? (car Zff8@x) '$rtd)) Zff8@x (assertion-violation 'expand '"invalid transformer" Zff8@x)))))) (set! Z280b@Zba2@sanitize-binding Zba2@sanitize-binding) (set! Zba4@make-variable-transformer (lambda (Zffc@x) (if (procedure? Zffc@x) (cons 'macro! Zffc@x) (assertion-violation 'make-variable-transformer '"not a procedure" Zffc@x)))) (set! Z280c@Zba4@make-variable-transformer Zba4@make-variable-transformer) (set! Zba6@variable-transformer? (lambda (Zffe@x) (and (pair? Zffe@x) (eq? (car Zffe@x) 'macro!) (procedure? (cdr Zffe@x))))) (set! Z280d@Zba6@variable-transformer? Zba6@variable-transformer?) (set! Zba8@variable-transformer-procedure (lambda (Z1000@x) (if (Zba6@variable-transformer? Z1000@x) (cdr Z1000@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" Z1000@x)))) (set! Z280e@Zba8@variable-transformer-procedure Zba8@variable-transformer-procedure) (set! Zbaa@make-eval-transformer (lambda (Z1002@x) (Zba2@sanitize-binding (eval-core (Z718@Z6d0@expanded->core Z1002@x)) Z1002@x))) (set! Z280f@Zbaa@make-eval-transformer Zbaa@make-eval-transformer) (set! Zcfb@parse-define (lambda (Z1004@x) (let ((Z1006@t Z1004@x)) (let ((Z1008@ls/false (Zd79@syntax-dispatch Z1006@t '(_ (any . any) any . each-any)))) (if (and Z1008@ls/false (apply (lambda (Z100a@id Z100b@fmls Z100c@b Z100d@b*) (Zb72@id? Z100a@id)) Z1008@ls/false)) (apply (lambda (Z1012@id Z1013@fmls Z1014@b Z1015@b*) (begin (Zd9f@verify-formals Z1013@fmls Z1004@x) (values Z1012@id (cons 'defun (cons Z1013@fmls (cons Z1014@b Z1015@b*)))))) Z1008@ls/false) (let ((Z101a@t Z1006@t)) (let ((Z101c@ls/false (Zd79@syntax-dispatch Z101a@t '(_ any any)))) (if (and Z101c@ls/false (apply (lambda (Z101e@id Z101f@val) (Zb72@id? Z101e@id)) Z101c@ls/false)) (apply (lambda (Z1022@id Z1023@val) (values Z1022@id (cons 'expr Z1023@val))) Z101c@ls/false) (let ((Z1026@t Z101a@t)) (let ((Z1028@ls/false (Zd79@syntax-dispatch Z1026@t '(_ any)))) (if (and Z1028@ls/false (apply (lambda (Z102a@id) (Zb72@id? Z102a@id)) Z1028@ls/false)) (apply (lambda (Z102c@id) (values Z102c@id (cons 'expr (Zd2f@bless '(void))))) Z1028@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1026@t)))))))))))) (set! Z2810@Zcfb@parse-define Zcfb@parse-define) (set! Zcfd@parse-define-syntax (lambda (Z102e@x) (let ((Z1030@t Z102e@x)) (let ((Z1032@ls/false (Zd79@syntax-dispatch Z1030@t '(_ any any)))) (if (and Z1032@ls/false (apply (lambda (Z1034@id Z1035@val) (Zb72@id? Z1034@id)) Z1032@ls/false)) (apply (lambda (Z1038@id Z1039@val) (values Z1038@id Z1039@val)) Z1032@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1030@t)))))) (set! Z2811@Zcfd@parse-define-syntax Zcfd@parse-define-syntax) (set! Zcff@scheme-stx-hashtable (make-eq-hashtable)) (set! Z2812@Zcff@scheme-stx-hashtable Zcff@scheme-stx-hashtable) (set! Zd01@scheme-stx (lambda (Z103c@sym) (or (hashtable-ref Zcff@scheme-stx-hashtable Z103c@sym '#f) (let ((Z103e@subst (Z969@Z792@library-subst (Z987@Z7ce@find-library-by-name '(psyntax system $all))))) (let ((Z1040@stx (make-simple-struct 'stx '5 (list Z103c@sym Zaf6@top-mark* '() '())))) (let ((Z1042@stx (let ((Z1044@t (assq Z103c@sym Z103e@subst))) (if Z1044@t ((lambda (Z1046@x) (let ((Z1048@name (car Z1046@x)) (Z1049@label (cdr Z1046@x))) (Zb5e@add-subst (make-simple-struct 'rib '6 (list (list Z1048@name) (list Zaf6@top-mark*) (list Z1049@label) '#f '#f)) Z1040@stx))) Z1044@t) Z1040@stx)))) (begin (hashtable-set! Zcff@scheme-stx-hashtable Z103c@sym Z1042@stx) Z1042@stx))))))) (set! Z2813@Zd01@scheme-stx Zd01@scheme-stx) (set! Zd03@lexical-var car) (set! Z2814@Zd03@lexical-var Zd03@lexical-var) (set! Zd05@lexical-mutable? cdr) (set! Z2815@Zd05@lexical-mutable? Zd05@lexical-mutable?) (set! Zd07@set-lexical-mutable! set-cdr!) (set! Z2816@Zd07@set-lexical-mutable! Zd07@set-lexical-mutable!) (set! Zd09@add-lexical (lambda (Z104c@lab Z104d@lex Z104e@r) (cons (cons* Z104c@lab 'lexical Z104d@lex '#f) Z104e@r))) (set! Z2817@Zd09@add-lexical Zd09@add-lexical) (set! Zd0b@add-lexicals (lambda (Z1052@lab* Z1053@lex* Z1054@r) (if (null? Z1052@lab*) Z1054@r (Zd0b@add-lexicals (cdr Z1052@lab*) (cdr Z1053@lex*) (Zd09@add-lexical (car Z1052@lab*) (car Z1053@lex*) Z1054@r))))) (set! Z2818@Zd0b@add-lexicals Zd0b@add-lexicals) (set! Zd0d@letrec-helper (lambda (Z1058@e Z1059@r Z105a@mr Z105b@build) (let ((Z1060@t Z1058@e)) (let ((Z1062@ls/false (Zd79@syntax-dispatch Z1060@t '(_ #(each (any any)) any . each-any)))) (if Z1062@ls/false (apply (lambda (Z1064@lhs* Z1065@rhs* Z1066@b Z1067@b*) (if (not (Zb7a@valid-bound-ids? Z1064@lhs*)) (Zd33@invalid-fmls-error Z1058@e Z1064@lhs*) (let ((Z106c@lex* (map Zafa@gen-lexical Z1064@lhs*)) (Z106d@lab* (map Zafe@gen-label Z1064@lhs*))) (let ((Z1070@rib (Zb32@make-full-rib Z1064@lhs* Z106d@lab*)) (Z1071@r (Zd0b@add-lexicals Z106d@lab* Z106c@lex* Z1059@r))) (let ((Z1074@body (Zdb1@chi-internal (Zb5e@add-subst Z1070@rib (cons Z1066@b Z1067@b*)) Z1071@r Z105a@mr)) (Z1075@rhs* (Zd97@chi-expr* (map (lambda (Z1078@x) (Zb5e@add-subst Z1070@rib Z1078@x)) Z1065@rhs*) Z1071@r Z105a@mr))) (Z105b@build '#f Z106c@lex* Z1075@rhs* Z1074@body)))))) Z1062@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1060@t)))))) (set! Z2819@Zd0d@letrec-helper Zd0d@letrec-helper) (set! Zd0f@let-transformer (lambda (Z107a@e Z107b@r Z107c@mr) (let ((Z1080@t Z107a@e)) (let ((Z1082@ls/false (Zd79@syntax-dispatch Z1080@t '(_ #(each (any any)) any . each-any)))) (if Z1082@ls/false (apply (lambda (Z1084@lhs* Z1085@rhs* Z1086@b Z1087@b*) (if (not (Zb7a@valid-bound-ids? Z1084@lhs*)) (Zd33@invalid-fmls-error Z107a@e Z1084@lhs*) (let ((Z108c@lex* (map Zafa@gen-lexical Z1084@lhs*)) (Z108d@lab* (map Zafe@gen-label Z1084@lhs*)) (Z108e@rhs* (Zd97@chi-expr* Z1085@rhs* Z107b@r Z107c@mr))) (let ((Z1092@rib (Zb32@make-full-rib Z1084@lhs* Z108d@lab*)) (Z1093@r (Zd0b@add-lexicals Z108d@lab* Z108c@lex* Z107b@r))) (let ((Z1096@body (Zdb1@chi-internal (Zb5e@add-subst Z1092@rib (cons Z1086@b Z1087@b*)) Z1093@r Z107c@mr))) (Zada@Za3d@build-let '#f Z108c@lex* Z108e@rhs* Z1096@body)))))) Z1082@ls/false) (let ((Z1098@t Z1080@t)) (let ((Z109a@ls/false (Zd79@syntax-dispatch Z1098@t '(_ any #(each (any any)) any . each-any)))) (if Z109a@ls/false (apply (lambda (Z109c@loop Z109d@lhs* Z109e@rhs* Z109f@b Z10a0@b*) (if (not (Zb7a@valid-bound-ids? Z109d@lhs*)) (Zd33@invalid-fmls-error Z107a@e Z109d@lhs*) (let ((Z10a6@lex* (map Zafa@gen-lexical Z109d@lhs*)) (Z10a7@lab* (map Zafe@gen-label Z109d@lhs*)) (Z10a8@rhs* (Zd97@chi-expr* Z109e@rhs* Z107b@r Z107c@mr)) (Z10a9@loop-lex (Zafa@gen-lexical Z109c@loop)) (Z10aa@loop-lab (Zafe@gen-label Z109c@loop))) (let ((Z10b0@loop-rib (Zb32@make-full-rib (list Z109c@loop) (list Z10aa@loop-lab))) (Z10b1@rib (Zb32@make-full-rib Z109d@lhs* Z10a7@lab*)) (Z10b2@r (Zd0b@add-lexicals (cons Z10aa@loop-lab Z10a7@lab*) (cons Z10a9@loop-lex Z10a6@lex*) Z107b@r))) (let ((Z10b6@body (Zdb1@chi-internal (Zb5e@add-subst Z10b0@loop-rib (Zb5e@add-subst Z10b1@rib (cons Z109f@b Z10a0@b*))) Z10b2@r Z107c@mr))) (Zadb@Za3f@build-named-let '#f Z10a9@loop-lex Z10a6@lex* Z10a8@rhs* Z10b6@body)))))) Z109a@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1098@t))))))))) (set! Z281a@Zd0f@let-transformer Zd0f@let-transformer) (set! Zd11@letrec-transformer (lambda (Z10b8@e Z10b9@r Z10ba@mr) (Zd0d@letrec-helper Z10b8@e Z10b9@r Z10ba@mr Zad9@Za3b@build-letrec))) (set! Z281b@Zd11@letrec-transformer Zd11@letrec-transformer) (set! Zd13@letrec*-transformer (lambda (Z10be@e Z10bf@r Z10c0@mr) (Zd0d@letrec-helper Z10be@e Z10bf@r Z10c0@mr Zadc@Za41@build-letrec*))) (set! Z281c@Zd13@letrec*-transformer Zd13@letrec*-transformer) (set! Zd15@fluid-let-syntax-transformer (lambda (Z10c4@e Z10c5@r Z10c6@mr) (letrec* ((Z10cb@lookup (lambda (Z10de@x) (or (Zb88@id->label Z10de@x) (Ze59@syntax-violation '#f '"unbound identifier" Z10c4@e Z10de@x))))) (let ((Z10cc@t Z10c4@e)) (let ((Z10ce@ls/false (Zd79@syntax-dispatch Z10cc@t '(_ #(each (any any)) any . each-any)))) (if Z10ce@ls/false (apply (lambda (Z10d0@lhs* Z10d1@rhs* Z10d2@b Z10d3@b*) (if (not (Zb7a@valid-bound-ids? Z10d0@lhs*)) (Zd33@invalid-fmls-error Z10c4@e Z10d0@lhs*) (let ((Z10d8@lab* (map Z10cb@lookup Z10d0@lhs*)) (Z10d9@rhs* (map (lambda (Z10dc@x) (Zbaa@make-eval-transformer (Zdd3@expand-transformer Z10dc@x Z10c6@mr))) Z10d1@rhs*))) (Zdb1@chi-internal (cons Z10d2@b Z10d3@b*) (append (map cons Z10d8@lab* Z10d9@rhs*) Z10c5@r) (append (map cons Z10d8@lab* Z10d9@rhs*) Z10c6@mr))))) Z10ce@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z10cc@t))))))) (set! Z281d@Zd15@fluid-let-syntax-transformer Zd15@fluid-let-syntax-transformer) (set! Zd17@type-descriptor-transformer (lambda (Z10e0@e Z10e1@r Z10e2@mr) (let ((Z10e6@t Z10e0@e)) (let ((Z10e8@ls/false (Zd79@syntax-dispatch Z10e6@t '(_ any)))) (if (and Z10e8@ls/false (apply (lambda (Z10ea@id) (Zb72@id? Z10ea@id)) Z10e8@ls/false)) (apply (lambda (Z10ec@id) (let ((Z10ee@lab (Zb88@id->label Z10ec@id))) (let ((Z10f0@b (Zb8a@label->binding Z10ee@lab Z10e1@r))) (let ((Z10f2@type (Zb8e@binding-type Z10f0@b))) (begin (if (not Z10ee@lab) (Zb92@raise-unbound-error Z10ec@id) (void)) (if (not (and (eq? Z10f2@type '$rtd) (not (list? (Zb90@binding-value Z10f0@b))))) (Ze59@syntax-violation '#f '"not a record type" Z10e0@e) (void)) (list 'quote (Zb90@binding-value Z10f0@b))))))) Z10e8@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z10e6@t)))))) (set! Z281e@Zd17@type-descriptor-transformer Zd17@type-descriptor-transformer) (set! Zd19@record-type-descriptor-transformer (lambda (Z10f4@e Z10f5@r Z10f6@mr) (let ((Z10fa@t Z10f4@e)) (let ((Z10fc@ls/false (Zd79@syntax-dispatch Z10fa@t '(_ any)))) (if (and Z10fc@ls/false (apply (lambda (Z10fe@id) (Zb72@id? Z10fe@id)) Z10fc@ls/false)) (apply (lambda (Z1100@id) (let ((Z1102@lab (Zb88@id->label Z1100@id))) (let ((Z1104@b (Zb8a@label->binding Z1102@lab Z10f5@r))) (let ((Z1106@type (Zb8e@binding-type Z1104@b))) (begin (if (not Z1102@lab) (Zb92@raise-unbound-error Z1100@id) (void)) (if (not (and (eq? Z1106@type '$rtd) (list? (Zb90@binding-value Z1104@b)))) (Ze59@syntax-violation '#f '"not a record type" Z10f4@e) (void)) (Zd9b@chi-expr (car (Zb90@binding-value Z1104@b)) Z10f5@r Z10f6@mr)))))) Z10fc@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z10fa@t)))))) (set! Z281f@Zd19@record-type-descriptor-transformer Zd19@record-type-descriptor-transformer) (set! Zd1b@record-constructor-descriptor-transformer (lambda (Z1108@e Z1109@r Z110a@mr) (let ((Z110e@t Z1108@e)) (let ((Z1110@ls/false (Zd79@syntax-dispatch Z110e@t '(_ any)))) (if (and Z1110@ls/false (apply (lambda (Z1112@id) (Zb72@id? Z1112@id)) Z1110@ls/false)) (apply (lambda (Z1114@id) (let ((Z1116@lab (Zb88@id->label Z1114@id))) (let ((Z1118@b (Zb8a@label->binding Z1116@lab Z1109@r))) (let ((Z111a@type (Zb8e@binding-type Z1118@b))) (begin (if (not Z1116@lab) (Zb92@raise-unbound-error Z1114@id) (void)) (if (not (and (eq? Z111a@type '$rtd) (list? (Zb90@binding-value Z1118@b)))) (Ze59@syntax-violation '#f '"invalid type" Z1108@e) (void)) (Zd9b@chi-expr (cadr (Zb90@binding-value Z1118@b)) Z1109@r Z110a@mr)))))) Z1110@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z110e@t)))))) (set! Z2820@Zd1b@record-constructor-descriptor-transformer Zd1b@record-constructor-descriptor-transformer) (set! Zd1d@when-macro (lambda (Z111c@e) (let ((Z111e@t Z111c@e)) (let ((Z1120@ls/false (Zd79@syntax-dispatch Z111e@t '(_ any any . each-any)))) (if Z1120@ls/false (apply (lambda (Z1122@test Z1123@e Z1124@e*) (Zd2f@bless (list 'if Z1122@test (cons 'begin (cons Z1123@e Z1124@e*))))) Z1120@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z111e@t)))))) (set! Z2821@Zd1d@when-macro Zd1d@when-macro) (set! Zd1f@unless-macro (lambda (Z1128@e) (let ((Z112a@t Z1128@e)) (let ((Z112c@ls/false (Zd79@syntax-dispatch Z112a@t '(_ any any . each-any)))) (if Z112c@ls/false (apply (lambda (Z112e@test Z112f@e Z1130@e*) (Zd2f@bless (list 'if (list 'not Z112e@test) (cons 'begin (cons Z112f@e Z1130@e*))))) Z112c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z112a@t)))))) (set! Z2822@Zd1f@unless-macro Zd1f@unless-macro) (set! Zd21@if-transformer (lambda (Z1134@e Z1135@r Z1136@mr) (let ((Z113a@t Z1134@e)) (let ((Z113c@ls/false (Zd79@syntax-dispatch Z113a@t '(_ any any any)))) (if Z113c@ls/false (apply (lambda (Z113e@e0 Z113f@e1 Z1140@e2) (list 'if (Zd9b@chi-expr Z113e@e0 Z1135@r Z1136@mr) (Zd9b@chi-expr Z113f@e1 Z1135@r Z1136@mr) (Zd9b@chi-expr Z1140@e2 Z1135@r Z1136@mr))) Z113c@ls/false) (let ((Z1144@t Z113a@t)) (let ((Z1146@ls/false (Zd79@syntax-dispatch Z1144@t '(_ any any)))) (if Z1146@ls/false (apply (lambda (Z1148@e0 Z1149@e1) (list 'if (Zd9b@chi-expr Z1148@e0 Z1135@r Z1136@mr) (Zd9b@chi-expr Z1149@e1 Z1135@r Z1136@mr) (Zad8@Za39@build-void))) Z1146@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1144@t))))))))) (set! Z2823@Zd21@if-transformer Zd21@if-transformer) (set! Zd23@and-transformer (lambda (Z114c@e Z114d@r Z114e@mr) (let ((Z1152@t Z114c@e)) (let ((Z1154@ls/false (Zd79@syntax-dispatch Z1152@t '(_ . each-any)))) (if Z1154@ls/false (apply (lambda (Z1156@e*) (cons 'and (Zd97@chi-expr* Z1156@e* Z114d@r Z114e@mr))) Z1154@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1152@t)))))) (set! Z2824@Zd23@and-transformer Zd23@and-transformer) (set! Zd25@or-transformer (lambda (Z1158@e Z1159@r Z115a@mr) (let ((Z115e@t Z1158@e)) (let ((Z1160@ls/false (Zd79@syntax-dispatch Z115e@t '(_ . each-any)))) (if Z1160@ls/false (apply (lambda (Z1162@e*) (cons 'or (Zd97@chi-expr* Z1162@e* Z1159@r Z115a@mr))) Z1160@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z115e@t)))))) (set! Z2825@Zd25@or-transformer Zd25@or-transformer) (set! Zd27@case-macro (lambda (Z1164@e) (letrec* ((Z1167@build-last (lambda (Z118e@cls) (let ((Z1190@t Z118e@cls)) (let ((Z1192@ls/false (Zd79@syntax-dispatch Z1190@t '(#(scheme-id else) any . each-any)))) (if Z1192@ls/false (apply (lambda (Z1194@e Z1195@e*) (cons 'begin (cons Z1194@e Z1195@e*))) Z1192@ls/false) (let ((Z1198@t Z1190@t)) (let ((Z119a@ls/false (Zd79@syntax-dispatch Z1198@t '_))) (if Z119a@ls/false (apply (lambda () (Z1169@build-one Z118e@cls '(if #f #f))) Z119a@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1198@t))))))))) (Z1169@build-one (lambda (Z1180@cls Z1181@k) (let ((Z1184@t Z1180@cls)) (let ((Z1186@ls/false (Zd79@syntax-dispatch Z1184@t '(each-any any . each-any)))) (if Z1186@ls/false (apply (lambda (Z1188@d* Z1189@e Z118a@e*) (list 'if (list 'memv 't (list 'quote Z1188@d*)) (cons 'begin (cons Z1189@e Z118a@e*)) Z1181@k)) Z1186@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1184@t))))))) (let ((Z116a@t Z1164@e)) (let ((Z116c@ls/false (Zd79@syntax-dispatch Z116a@t '(_ any)))) (if Z116c@ls/false (apply (lambda (Z116e@expr) (Zd2f@bless (cons 'let (cons (list (list 't Z116e@expr)) '((if #f #f)))))) Z116c@ls/false) (let ((Z1170@t Z116a@t)) (let ((Z1172@ls/false (Zd79@syntax-dispatch Z1170@t '(_ any any . each-any)))) (if Z1172@ls/false (apply (lambda (Z1174@expr Z1175@cls Z1176@cls*) (Zd2f@bless (list 'let (list (list 't Z1174@expr)) (let Z117e@f ((Z117a@cls Z1175@cls) (Z117b@cls* Z1176@cls*)) (if (null? Z117b@cls*) (Z1167@build-last Z117a@cls) (Z1169@build-one Z117a@cls (Z117e@f (car Z117b@cls*) (cdr Z117b@cls*)))))))) Z1172@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1170@t)))))))))) (set! Z2826@Zd27@case-macro Zd27@case-macro) (set! Zd29@quote-transformer (lambda (Z119c@e Z119d@r Z119e@mr) (let ((Z11a2@t Z119c@e)) (let ((Z11a4@ls/false (Zd79@syntax-dispatch Z11a2@t '(_ any)))) (if Z11a4@ls/false (apply (lambda (Z11a6@datum) (list 'quote (Zb86@stx->datum Z11a6@datum))) Z11a4@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z11a2@t)))))) (set! Z2827@Zd29@quote-transformer Zd29@quote-transformer) (set! Zd2b@case-lambda-transformer (lambda (Z11a8@e Z11a9@r Z11aa@mr) (let ((Z11ae@t Z11a8@e)) (let ((Z11b0@ls/false (Zd79@syntax-dispatch Z11ae@t '(_ . #(each (any any . each-any)))))) (if Z11b0@ls/false (apply (lambda (Z11b2@fmls* Z11b3@b* Z11b4@b**) (call-with-values (lambda () (Zda3@chi-lambda-clause* Z11a8@e Z11b2@fmls* (map cons Z11b3@b* Z11b4@b**) Z11a9@r Z11aa@mr)) (lambda (Z11bc@Z11b9 Z11bd@Z11bb) (let ((Z11c0@body* Z11bd@Z11bb) (Z11c1@fmls* Z11bc@Z11b9)) (Zad6@Za09@build-case-lambda '#f Z11c1@fmls* Z11c0@body*))))) Z11b0@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z11ae@t)))))) (set! Z2828@Zd2b@case-lambda-transformer Zd2b@case-lambda-transformer) (set! Zd2d@lambda-transformer (lambda (Z11c4@e Z11c5@r Z11c6@mr) (let ((Z11ca@t Z11c4@e)) (let ((Z11cc@ls/false (Zd79@syntax-dispatch Z11ca@t '(_ any any . each-any)))) (if Z11cc@ls/false (apply (lambda (Z11ce@fmls Z11cf@b Z11d0@b*) (call-with-values (lambda () (Zda1@chi-lambda-clause Z11c4@e Z11ce@fmls (cons Z11cf@b Z11d0@b*) Z11c5@r Z11c6@mr)) (lambda (Z11d8@Z11d5 Z11d9@Z11d7) (let ((Z11dc@body Z11d9@Z11d7) (Z11dd@fmls Z11d8@Z11d5)) (Zad5@Za07@build-lambda '#f Z11dd@fmls Z11dc@body))))) Z11cc@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z11ca@t)))))) (set! Z2829@Zd2d@lambda-transformer Zd2d@lambda-transformer) (set! Zd2f@bless (lambda (Z11e0@x) (Zb5a@mkstx (let Z11e4@f ((Z11e2@x Z11e0@x)) (if (Zb3e@stx? Z11e2@x) Z11e2@x (if (pair? Z11e2@x) (cons (Z11e4@f (car Z11e2@x)) (Z11e4@f (cdr Z11e2@x))) (if (symbol? Z11e2@x) (Zd01@scheme-stx Z11e2@x) (if (vector? Z11e2@x) (vector-map Z11e4@f Z11e2@x) Z11e2@x))))) '() '() '()))) (set! Z282a@Zd2f@bless Zd2f@bless) (set! Zd31@with-syntax-macro (lambda (Z11e6@e) (let ((Z11e8@t Z11e6@e)) (let ((Z11ea@ls/false (Zd79@syntax-dispatch Z11e8@t '(_ #(each (any any)) any . each-any)))) (if Z11ea@ls/false (apply (lambda (Z11ec@pat* Z11ed@expr* Z11ee@b Z11ef@b*) (let ((Z11f4@idn* (let Z11f8@f ((Z11f6@pat* Z11ec@pat*)) (if (null? Z11f6@pat*) '() (call-with-values (lambda () (Zd77@convert-pattern (car Z11f6@pat*) '())) (lambda (Z11fe@Z11fb Z11ff@Z11fd) (let ((Z1202@idn* Z11ff@Z11fd) (Z1203@pat Z11fe@Z11fb)) (append Z1202@idn* (Z11f8@f (cdr Z11f6@pat*)))))))))) (begin (Zd9f@verify-formals (map car Z11f4@idn*) Z11e6@e) (let ((Z1206@t* (Ze47@generate-temporaries Z11ed@expr*))) (Zd2f@bless (list 'let (map list Z1206@t* Z11ed@expr*) (let Z120c@f ((Z1208@pat* Z11ec@pat*) (Z1209@t* Z1206@t*)) (if (null? Z1208@pat*) (cons 'begin (cons '#f (cons Z11ee@b Z11ef@b*))) (list 'syntax-case (car Z1209@t*) '() (list (car Z1208@pat*) (Z120c@f (cdr Z1208@pat*) (cdr Z1209@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car Z1208@pat*)) (car Z1209@t*)))))))))))) Z11ea@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z11e8@t)))))) (set! Z282b@Zd31@with-syntax-macro Zd31@with-syntax-macro) (set! Zd33@invalid-fmls-error (lambda (Z120e@stx Z120f@fmls) (let ((Z1212@t Z120f@fmls)) (let ((Z1214@ls/false (Zd79@syntax-dispatch Z1212@t '#(each+ any () any)))) (if Z1214@ls/false (apply (lambda (Z1216@id* Z1217@last) (let Z121c@f ((Z121a@id* (if (Zb72@id? Z1217@last) (cons Z1217@last Z1216@id*) (if (Zb68@syntax-null? Z1217@last) Z1216@id* (Ze59@syntax-violation '#f '"not an identifier" Z120e@stx Z1217@last))))) (if (null? Z121a@id*) (values) (if (not (Zb72@id? (car Z121a@id*))) (Ze59@syntax-violation '#f '"not an identifier" Z120e@stx (car Z121a@id*)) (begin (Z121c@f (cdr Z121a@id*)) (if (Zb7e@bound-id-member? (car Z121a@id*) (cdr Z121a@id*)) (Ze59@syntax-violation '#f '"duplicate binding" Z120e@stx (car Z121a@id*)) (void))))))) Z1214@ls/false) (let ((Z121e@t Z1212@t)) (let ((Z1220@ls/false (Zd79@syntax-dispatch Z121e@t '_))) (if Z1220@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"malformed binding form" Z120e@stx Z120f@fmls)) Z1220@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z121e@t))))))))) (set! Z282c@Zd33@invalid-fmls-error Zd33@invalid-fmls-error) (set! Zd35@let-macro (lambda (Z1222@stx) (let ((Z1224@t Z1222@stx)) (let ((Z1226@ls/false (Zd79@syntax-dispatch Z1224@t '(_ #(each (any any)) any . each-any)))) (if Z1226@ls/false (apply (lambda (Z1228@lhs* Z1229@rhs* Z122a@b Z122b@b*) (if (Zb7a@valid-bound-ids? Z1228@lhs*) (Zd2f@bless (cons (cons 'lambda (cons Z1228@lhs* (cons Z122a@b Z122b@b*))) Z1229@rhs*)) (Zd33@invalid-fmls-error Z1222@stx Z1228@lhs*))) Z1226@ls/false) (let ((Z1230@t Z1224@t)) (let ((Z1232@ls/false (Zd79@syntax-dispatch Z1230@t '(_ any #(each (any any)) any . each-any)))) (if (and Z1232@ls/false (apply (lambda (Z1234@f Z1235@lhs* Z1236@rhs* Z1237@b Z1238@b*) (Zb72@id? Z1234@f)) Z1232@ls/false)) (apply (lambda (Z123e@f Z123f@lhs* Z1240@rhs* Z1241@b Z1242@b*) (if (Zb7a@valid-bound-ids? Z123f@lhs*) (Zd2f@bless (cons (list 'letrec (list (list Z123e@f (cons 'lambda (cons Z123f@lhs* (cons Z1241@b Z1242@b*))))) Z123e@f) Z1240@rhs*)) (Zd33@invalid-fmls-error Z1222@stx Z123f@lhs*))) Z1232@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1230@t))))))))) (set! Z282d@Zd35@let-macro Zd35@let-macro) (set! Zd37@let-values-macro (lambda (Z1248@stx) (letrec* ((Z124b@rename (lambda (Z12b0@x Z12b1@old* Z12b2@new*) (begin (if (not (Zb72@id? Z12b0@x)) (Ze59@syntax-violation '#f '"not an indentifier" Z1248@stx Z12b0@x) (void)) (if (Zb7e@bound-id-member? Z12b0@x Z12b1@old*) (Ze59@syntax-violation '#f '"duplicate binding" Z1248@stx Z12b0@x) (void)) (let ((Z12b6@y (gensym (Ze5f@syntax->datum Z12b0@x)))) (values Z12b6@y (cons Z12b0@x Z12b1@old*) (cons Z12b6@y Z12b2@new*)))))) (Z124d@rename* (lambda (Z129e@x* Z129f@old* Z12a0@new*) (if (null? Z129e@x*) (values '() Z129f@old* Z12a0@new*) (call-with-values (lambda () (Z124b@rename (car Z129e@x*) Z129f@old* Z12a0@new*)) (lambda (Z12a4@x Z12a5@old* Z12a6@new*) (call-with-values (lambda () (Z124d@rename* (cdr Z129e@x*) Z12a5@old* Z12a6@new*)) (lambda (Z12aa@x* Z12ab@old* Z12ac@new*) (values (cons Z12a4@x Z12aa@x*) Z12ab@old* Z12ac@new*))))))))) (let ((Z124e@t Z1248@stx)) (let ((Z1250@ls/false (Zd79@syntax-dispatch Z124e@t '(_ () any . each-any)))) (if Z1250@ls/false (apply (lambda (Z1252@b Z1253@b*) (cons* (Zd2f@bless 'let) '() Z1252@b Z1253@b*)) Z1250@ls/false) (let ((Z1256@t Z124e@t)) (let ((Z1258@ls/false (Zd79@syntax-dispatch Z1256@t '(_ #(each (any any)) any . each-any)))) (if Z1258@ls/false (apply (lambda (Z125a@lhs* Z125b@rhs* Z125c@b Z125d@b*) (Zd2f@bless (let Z126a@f ((Z1262@lhs* Z125a@lhs*) (Z1263@rhs* Z125b@rhs*) (Z1264@old* '()) (Z1265@new* '())) (if (null? Z1262@lhs*) (cons 'let (cons (map list Z1264@old* Z1265@new*) (cons Z125c@b Z125d@b*))) (let ((Z126c@t (car Z1262@lhs*))) (let ((Z126e@ls/false (Zd79@syntax-dispatch Z126c@t 'each-any))) (if Z126e@ls/false (apply (lambda (Z1270@x*) (call-with-values (lambda () (Z124d@rename* Z1270@x* Z1264@old* Z1265@new*)) (lambda (Z1278@Z1273 Z1279@Z1275 Z127a@Z1277) (let ((Z127e@new* Z127a@Z1277) (Z127f@old* Z1279@Z1275) (Z1280@y* Z1278@Z1273)) (list 'call-with-values (list 'lambda '() (car Z1263@rhs*)) (list 'lambda Z1280@y* (Z126a@f (cdr Z1262@lhs*) (cdr Z1263@rhs*) Z127f@old* Z127e@new*))))))) Z126e@ls/false) (let ((Z1284@t Z126c@t)) (let ((Z1286@ls/false (Zd79@syntax-dispatch Z1284@t '#(each+ any () any)))) (if Z1286@ls/false (apply (lambda (Z1288@x* Z1289@x) (call-with-values (lambda () (Z124b@rename Z1289@x Z1264@old* Z1265@new*)) (lambda (Z128c@y Z128d@old* Z128e@new*) (call-with-values (lambda () (Z124d@rename* Z1288@x* Z128d@old* Z128e@new*)) (lambda (Z1292@y* Z1293@old* Z1294@new*) (list 'call-with-values (list 'lambda '() (car Z1263@rhs*)) (list 'lambda (append Z1292@y* Z128c@y) (Z126a@f (cdr Z1262@lhs*) (cdr Z1263@rhs*) Z1293@old* Z1294@new*)))))))) Z1286@ls/false) (let ((Z1298@t Z1284@t)) (let ((Z129a@ls/false (Zd79@syntax-dispatch Z1298@t 'any))) (if Z129a@ls/false (apply (lambda (Z129c@others) (Ze59@syntax-violation '#f '"malformed bindings" Z1248@stx Z129c@others)) Z129a@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1298@t)))))))))))))) Z1258@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1256@t)))))))))) (set! Z282e@Zd37@let-values-macro Zd37@let-values-macro) (set! Zd39@let*-values-macro (lambda (Z12b8@stx) (letrec* ((Z12bb@check (lambda (Z12ea@x*) (if (not (null? Z12ea@x*)) (let ((Z12ec@x (car Z12ea@x*))) (begin (if (not (Zb72@id? Z12ec@x)) (Ze59@syntax-violation '#f '"not an identifier" Z12b8@stx Z12ec@x) (void)) (Z12bb@check (cdr Z12ea@x*)) (if (Zb7e@bound-id-member? Z12ec@x (cdr Z12ea@x*)) (Ze59@syntax-violation '#f '"duplicate identifier" Z12b8@stx Z12ec@x) (void)))) (void))))) (let ((Z12bc@t Z12b8@stx)) (let ((Z12be@ls/false (Zd79@syntax-dispatch Z12bc@t '(_ () any . each-any)))) (if Z12be@ls/false (apply (lambda (Z12c0@b Z12c1@b*) (cons* (Zd2f@bless 'let) '() Z12c0@b Z12c1@b*)) Z12be@ls/false) (let ((Z12c4@t Z12bc@t)) (let ((Z12c6@ls/false (Zd79@syntax-dispatch Z12c4@t '(_ #(each (any any)) any . each-any)))) (if Z12c6@ls/false (apply (lambda (Z12c8@lhs* Z12c9@rhs* Z12ca@b Z12cb@b*) (Zd2f@bless (let Z12d4@f ((Z12d0@lhs* Z12c8@lhs*) (Z12d1@rhs* Z12c9@rhs*)) (if (null? Z12d0@lhs*) (cons 'begin (cons Z12ca@b Z12cb@b*)) (let ((Z12d6@t (car Z12d0@lhs*))) (let ((Z12d8@ls/false (Zd79@syntax-dispatch Z12d6@t 'each-any))) (if Z12d8@ls/false (apply (lambda (Z12da@x*) (begin (Z12bb@check Z12da@x*) (list 'call-with-values (list 'lambda '() (car Z12d1@rhs*)) (list 'lambda Z12da@x* (Z12d4@f (cdr Z12d0@lhs*) (cdr Z12d1@rhs*)))))) Z12d8@ls/false) (let ((Z12dc@t Z12d6@t)) (let ((Z12de@ls/false (Zd79@syntax-dispatch Z12dc@t '#(each+ any () any)))) (if Z12de@ls/false (apply (lambda (Z12e0@x* Z12e1@x) (begin (Z12bb@check (cons Z12e1@x Z12e0@x*)) (list 'call-with-values (list 'lambda '() (car Z12d1@rhs*)) (list 'lambda (append Z12e0@x* Z12e1@x) (Z12d4@f (cdr Z12d0@lhs*) (cdr Z12d1@rhs*)))))) Z12de@ls/false) (let ((Z12e4@t Z12dc@t)) (let ((Z12e6@ls/false (Zd79@syntax-dispatch Z12e4@t 'any))) (if Z12e6@ls/false (apply (lambda (Z12e8@others) (Ze59@syntax-violation '#f '"malformed bindings" Z12b8@stx Z12e8@others)) Z12e6@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z12e4@t)))))))))))))) Z12c6@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z12c4@t)))))))))) (set! Z282f@Zd39@let*-values-macro Zd39@let*-values-macro) (set! Zd3b@trace-lambda-macro (lambda (Z12ee@stx) (let ((Z12f0@t Z12ee@stx)) (let ((Z12f2@ls/false (Zd79@syntax-dispatch Z12f0@t '(_ any each-any any . each-any)))) (if Z12f2@ls/false (apply (lambda (Z12f4@who Z12f5@fmls Z12f6@b Z12f7@b*) (if (Zb7a@valid-bound-ids? Z12f5@fmls) (Zd2f@bless (list 'make-traced-procedure (list 'quote Z12f4@who) (cons 'lambda (cons Z12f5@fmls (cons Z12f6@b Z12f7@b*))))) (Zd33@invalid-fmls-error Z12ee@stx Z12f5@fmls))) Z12f2@ls/false) (let ((Z12fc@t Z12f0@t)) (let ((Z12fe@ls/false (Zd79@syntax-dispatch Z12fc@t '(_ any #(each+ any () any) any . each-any)))) (if Z12fe@ls/false (apply (lambda (Z1300@who Z1301@fmls Z1302@last Z1303@b Z1304@b*) (if (Zb7a@valid-bound-ids? (cons Z1302@last Z1301@fmls)) (Zd2f@bless (list 'make-traced-procedure (list 'quote Z1300@who) (cons 'lambda (cons (append Z1301@fmls Z1302@last) (cons Z1303@b Z1304@b*))))) (Zd33@invalid-fmls-error Z12ee@stx (append Z1301@fmls Z1302@last)))) Z12fe@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z12fc@t))))))))) (set! Z2830@Zd3b@trace-lambda-macro Zd3b@trace-lambda-macro) (set! Zd3d@trace-define-macro (lambda (Z130a@stx) (let ((Z130c@t Z130a@stx)) (let ((Z130e@ls/false (Zd79@syntax-dispatch Z130c@t '(_ (any . each-any) any . each-any)))) (if Z130e@ls/false (apply (lambda (Z1310@who Z1311@fmls Z1312@b Z1313@b*) (if (Zb7a@valid-bound-ids? Z1311@fmls) (Zd2f@bless (list 'define Z1310@who (list 'make-traced-procedure (list 'quote Z1310@who) (cons 'lambda (cons Z1311@fmls (cons Z1312@b Z1313@b*)))))) (Zd33@invalid-fmls-error Z130a@stx Z1311@fmls))) Z130e@ls/false) (let ((Z1318@t Z130c@t)) (let ((Z131a@ls/false (Zd79@syntax-dispatch Z1318@t '(_ (any . #(each+ any () any)) any . each-any)))) (if Z131a@ls/false (apply (lambda (Z131c@who Z131d@fmls Z131e@last Z131f@b Z1320@b*) (if (Zb7a@valid-bound-ids? (cons Z131e@last Z131d@fmls)) (Zd2f@bless (list 'define Z131c@who (list 'make-traced-procedure (list 'quote Z131c@who) (cons 'lambda (cons (append Z131d@fmls Z131e@last) (cons Z131f@b Z1320@b*)))))) (Zd33@invalid-fmls-error Z130a@stx (append Z131d@fmls Z131e@last)))) Z131a@ls/false) (let ((Z1326@t Z1318@t)) (let ((Z1328@ls/false (Zd79@syntax-dispatch Z1326@t '(_ any any)))) (if Z1328@ls/false (apply (lambda (Z132a@who Z132b@expr) (if (Zb72@id? Z132a@who) (Zd2f@bless (list 'define Z132a@who (list 'let (list (list 'v Z132b@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote Z132a@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (Ze59@syntax-violation '#f '"invalid name" Z130a@stx))) Z1328@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1326@t)))))))))))) (set! Z2831@Zd3d@trace-define-macro Zd3d@trace-define-macro) (set! Zd3f@trace-define-syntax-macro (lambda (Z132e@stx) (let ((Z1330@t Z132e@stx)) (let ((Z1332@ls/false (Zd79@syntax-dispatch Z1330@t '(_ any any)))) (if Z1332@ls/false (apply (lambda (Z1334@who Z1335@expr) (if (Zb72@id? Z1334@who) (Zd2f@bless (list 'define-syntax Z1334@who (list 'make-traced-macro (list 'quote Z1334@who) Z1335@expr))) (Ze59@syntax-violation '#f '"invalid name" Z132e@stx))) Z1332@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1330@t)))))) (set! Z2832@Zd3f@trace-define-syntax-macro Zd3f@trace-define-syntax-macro) (set! Zd41@trace-let/rec-syntax (lambda (Z1338@who) (lambda (Z133a@stx) (let ((Z133c@t Z133a@stx)) (let ((Z133e@ls/false (Zd79@syntax-dispatch Z133c@t '(_ #(each (any any)) any . each-any)))) (if Z133e@ls/false (apply (lambda (Z1340@lhs* Z1341@rhs* Z1342@b Z1343@b*) (if (Zb7a@valid-bound-ids? Z1340@lhs*) (let ((Z1348@rhs* (map (lambda (Z134a@lhs Z134b@rhs) (list 'make-traced-macro (list 'quote Z134a@lhs) Z134b@rhs)) Z1340@lhs* Z1341@rhs*))) (Zd2f@bless (cons Z1338@who (cons (map list Z1340@lhs* Z1348@rhs*) (cons Z1342@b Z1343@b*))))) (Zd33@invalid-fmls-error Z133a@stx Z1340@lhs*))) Z133e@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z133c@t))))))) (set! Z2833@Zd41@trace-let/rec-syntax Zd41@trace-let/rec-syntax) (set! Zd43@trace-let-syntax-macro (Zd41@trace-let/rec-syntax 'let-syntax)) (set! Z2834@Zd43@trace-let-syntax-macro Zd43@trace-let-syntax-macro) (set! Zd45@trace-letrec-syntax-macro (Zd41@trace-let/rec-syntax 'letrec-syntax)) (set! Z2835@Zd45@trace-letrec-syntax-macro Zd45@trace-letrec-syntax-macro) (set! Zd47@guard-macro (lambda (Z134e@x) (letrec* ((Z1351@gen-clauses (lambda (Z1368@con Z1369@outerk Z136a@clause*) (letrec* ((Z136f@f (lambda (Z13a8@x Z13a9@k) (let ((Z13ac@t Z13a8@x)) (let ((Z13ae@ls/false (Zd79@syntax-dispatch Z13ac@t '(any #(scheme-id =>) any)))) (if Z13ae@ls/false (apply (lambda (Z13b0@e Z13b1@p) (let ((Z13b4@t (gensym))) (list 'let (list (list Z13b4@t Z13b0@e)) (list 'if Z13b4@t (list Z13b1@p Z13b4@t) Z13a9@k)))) Z13ae@ls/false) (let ((Z13b6@t Z13ac@t)) (let ((Z13b8@ls/false (Zd79@syntax-dispatch Z13b6@t '(any)))) (if Z13b8@ls/false (apply (lambda (Z13ba@e) (let ((Z13bc@t (gensym))) (list 'let (list (list Z13bc@t Z13ba@e)) (list 'if Z13bc@t Z13bc@t Z13a9@k)))) Z13b8@ls/false) (let ((Z13be@t Z13b6@t)) (let ((Z13c0@ls/false (Zd79@syntax-dispatch Z13be@t '(any any . each-any)))) (if Z13c0@ls/false (apply (lambda (Z13c2@e Z13c3@v Z13c4@v*) (list 'if Z13c2@e (cons 'begin (cons Z13c3@v Z13c4@v*)) Z13a9@k)) Z13c0@ls/false) (let ((Z13c8@t Z13be@t)) (let ((Z13ca@ls/false (Zd79@syntax-dispatch Z13c8@t '_))) (if Z13ca@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid guard clause" Z13a8@x)) Z13ca@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z13c8@t))))))))))))))) (Z1371@f* (lambda (Z137e@x*) (let ((Z1380@t Z137e@x*)) (let ((Z1382@ls/false (Zd79@syntax-dispatch Z1380@t '()))) (if Z1382@ls/false (apply (lambda () (let ((Z1384@g (gensym))) (values (list Z1384@g (list 'lambda '() (list 'raise-continuable Z1368@con))) Z1384@g))) Z1382@ls/false) (let ((Z1386@t Z1380@t)) (let ((Z1388@ls/false (Zd79@syntax-dispatch Z1386@t '((#(scheme-id else) any . each-any))))) (if Z1388@ls/false (apply (lambda (Z138a@e Z138b@e*) (values (cons 'begin (cons Z138a@e Z138b@e*)) '#f)) Z1388@ls/false) (let ((Z138e@t Z1386@t)) (let ((Z1390@ls/false (Zd79@syntax-dispatch Z138e@t '(any . any)))) (if Z1390@ls/false (apply (lambda (Z1392@cls Z1393@cls*) (call-with-values (lambda () (Z1371@f* Z1393@cls*)) (lambda (Z139a@Z1397 Z139b@Z1399) (let ((Z139e@g Z139b@Z1399) (Z139f@e Z139a@Z1397)) (values (Z136f@f Z1392@cls Z139f@e) Z139e@g))))) Z1390@ls/false) (let ((Z13a2@t Z138e@t)) (let ((Z13a4@ls/false (Zd79@syntax-dispatch Z13a2@t 'any))) (if Z13a4@ls/false (apply (lambda (Z13a6@others) (Ze59@syntax-violation '#f '"invalid guard clause" Z13a6@others)) Z13a4@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z13a2@t)))))))))))))))) (call-with-values (lambda () (Z1371@f* Z136a@clause*)) (lambda (Z1376@Z1373 Z1377@Z1375) (let ((Z137a@raisek Z1377@Z1375) (Z137b@code Z1376@Z1373)) (if Z137a@raisek (list (list 'call/cc (list 'lambda (list Z137a@raisek) (list Z1369@outerk (list 'lambda '() Z137b@code))))) (list Z1369@outerk (list 'lambda '() Z137b@code)))))))))) (let ((Z1352@t Z134e@x)) (let ((Z1354@ls/false (Zd79@syntax-dispatch Z1352@t '(_ (any . each-any) any . each-any)))) (if (and Z1354@ls/false (apply (lambda (Z1356@con Z1357@clause* Z1358@b Z1359@b*) (Zb72@id? Z1356@con)) Z1354@ls/false)) (apply (lambda (Z135e@con Z135f@clause* Z1360@b Z1361@b*) (let ((Z1366@outerk (gensym))) (Zd2f@bless (list (list 'call/cc (list 'lambda (list Z1366@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list Z135e@con) (Z1351@gen-clauses Z135e@con Z1366@outerk Z135f@clause*)) (cons 'lambda (cons '() (cons Z1360@b Z1361@b*))))))))))) Z1354@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1352@t))))))) (set! Z2836@Zd47@guard-macro Zd47@guard-macro) (set! Zd49@define-enumeration-macro (lambda (Z13cc@stx) (letrec* ((Z13cf@set? (lambda (Z13e8@x) (or (null? Z13e8@x) (and (not (memq (car Z13e8@x) (cdr Z13e8@x))) (Z13cf@set? (cdr Z13e8@x)))))) (Z13d1@remove-dups (lambda (Z13e6@ls) (if (null? Z13e6@ls) '() (cons (car Z13e6@ls) (Z13d1@remove-dups (remq (car Z13e6@ls) (cdr Z13e6@ls)))))))) (let ((Z13d2@t Z13cc@stx)) (let ((Z13d4@ls/false (Zd79@syntax-dispatch Z13d2@t '(_ any each-any any)))) (if (and Z13d4@ls/false (apply (lambda (Z13d6@name Z13d7@id* Z13d8@maker) (and (Zb72@id? Z13d6@name) (Zb72@id? Z13d8@maker) (for-all Zb72@id? Z13d7@id*))) Z13d4@ls/false)) (apply (lambda (Z13dc@name Z13dd@id* Z13de@maker) (let ((Z13e2@name* (Z13d1@remove-dups (Ze5f@syntax->datum Z13dd@id*))) (Z13e3@mk (gensym))) (Zd2f@bless (list 'begin (list 'define Z13e3@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote Z13e2@name*)))) (list 'define-syntax Z13dc@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote Z13e2@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote Z13dc@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax Z13de@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote Z13de@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote Z13e2@name*)) (cons 'syntax-violation (cons (list 'quote Z13de@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons Z13e3@mk '('(n* ...))))))))))))) Z13d4@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z13d2@t))))))) (set! Z2837@Zd49@define-enumeration-macro Zd49@define-enumeration-macro) (set! Zd4b@time-macro (lambda (Z13ea@stx) (let ((Z13ec@t Z13ea@stx)) (let ((Z13ee@ls/false (Zd79@syntax-dispatch Z13ec@t '(_ any)))) (if Z13ee@ls/false (apply (lambda (Z13f0@expr) (Zd2f@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() Z13f0@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) Z13ee@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z13ec@t)))))) (set! Z2838@Zd4b@time-macro Zd4b@time-macro) (set! Zd4d@delay-macro (lambda (Z13f2@stx) (let ((Z13f4@t Z13f2@stx)) (let ((Z13f6@ls/false (Zd79@syntax-dispatch Z13f4@t '(_ any)))) (if Z13f6@ls/false (apply (lambda (Z13f8@expr) (Zd2f@bless (list 'make-promise (list 'lambda '() Z13f8@expr)))) Z13f6@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z13f4@t)))))) (set! Z2839@Zd4d@delay-macro Zd4d@delay-macro) (set! Zd4f@assert-macro (lambda (Z13fa@stx) (let ((Z13fc@t Z13fa@stx)) (let ((Z13fe@ls/false (Zd79@syntax-dispatch Z13fc@t '(_ any)))) (if Z13fe@ls/false (apply (lambda (Z1400@expr) (let ((Z1402@pos (or (Ze51@expression-position Z13fa@stx) (Ze51@expression-position Z1400@expr)))) (Zd2f@bless (list 'let (list (list 'x Z1400@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote Z1400@expr) (list 'quote Z1402@pos))))))) Z13fe@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z13fc@t)))))) (set! Z283a@Zd4f@assert-macro Zd4f@assert-macro) (set! Zd51@endianness-macro (lambda (Z1404@stx) (let ((Z1406@t Z1404@stx)) (let ((Z1408@ls/false (Zd79@syntax-dispatch Z1406@t '(_ any)))) (if Z1408@ls/false (apply (lambda (Z140a@e) (let ((Z140c@t (Ze5f@syntax->datum Z140a@e))) (if (memv Z140c@t '(little)) (Zd2f@bless ''little) (if (memv Z140c@t '(big)) (Zd2f@bless ''big) (Ze59@syntax-violation '#f '"endianness must be big or little" Z1404@stx))))) Z1408@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1406@t)))))) (set! Z283b@Zd51@endianness-macro Zd51@endianness-macro) (set! Zd53@identifier-syntax-macro (lambda (Z140e@stx) (let ((Z1410@t Z140e@stx)) (let ((Z1412@ls/false (Zd79@syntax-dispatch Z1410@t '(_ any)))) (if Z1412@ls/false (apply (lambda (Z1414@expr) (Zd2f@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax Z1414@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax Z1414@expr) '((syntax (e* ...)))))))))) Z1412@ls/false) (let ((Z1416@t Z1410@t)) (let ((Z1418@ls/false (Zd79@syntax-dispatch Z1416@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and Z1418@ls/false (apply (lambda (Z141a@id1 Z141b@expr1 Z141c@id2 Z141d@expr2 Z141e@expr3) (and (Zb72@id? Z141a@id1) (Zb72@id? Z141c@id2) (Zb72@id? Z141d@expr2))) Z1418@ls/false)) (apply (lambda (Z1424@id1 Z1425@expr1 Z1426@id2 Z1427@expr2 Z1428@expr3) (Zd2f@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax Z1425@expr1)) (list (list 'set! 'id Z1427@expr2) (list 'syntax Z1428@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons Z1425@expr1 '(e* ...))))))))) Z1418@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1416@t))))))))) (set! Z283c@Zd53@identifier-syntax-macro Zd53@identifier-syntax-macro) (set! Zd55@do-macro (lambda (Z142e@stx) (letrec* ((Z1431@bind (lambda (Z1448@x) (let ((Z144a@t Z1448@x)) (let ((Z144c@ls/false (Zd79@syntax-dispatch Z144a@t '(any any)))) (if Z144c@ls/false (apply (lambda (Z144e@x Z144f@init) (list Z144e@x Z144f@init Z144e@x)) Z144c@ls/false) (let ((Z1452@t Z144a@t)) (let ((Z1454@ls/false (Zd79@syntax-dispatch Z1452@t '(any any any)))) (if Z1454@ls/false (apply (lambda (Z1456@x Z1457@init Z1458@step) (list Z1456@x Z1457@init Z1458@step)) Z1454@ls/false) (let ((Z145c@t Z1452@t)) (let ((Z145e@ls/false (Zd79@syntax-dispatch Z145c@t '_))) (if Z145e@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid binding" Z142e@stx)) Z145e@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z145c@t))))))))))))) (let ((Z1432@t Z142e@stx)) (let ((Z1434@ls/false (Zd79@syntax-dispatch Z1432@t '(_ each-any (any . each-any) . each-any)))) (if Z1434@ls/false (apply (lambda (Z1436@binding* Z1437@test Z1438@expr* Z1439@command*) (let ((Z143e@t (map Z1431@bind Z1436@binding*))) (let ((Z1440@ls/false (Zd79@syntax-dispatch Z143e@t '#(each (any any any))))) (if Z1440@ls/false (apply (lambda (Z1442@x* Z1443@init* Z1444@step*) (if (Zb7a@valid-bound-ids? Z1442@x*) (Zd2f@bless (list 'letrec (list (list 'loop (list 'lambda Z1442@x* (list 'if Z1437@test (cons 'begin (cons '(if #f #f) Z1438@expr*)) (cons 'begin (append Z1439@command* (list (cons 'loop Z1444@step*)))))))) (cons 'loop Z1443@init*))) (Ze59@syntax-violation '#f '"invalid bindings" Z142e@stx))) Z1440@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z143e@t))))) Z1434@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1432@t))))))) (set! Z283d@Zd55@do-macro Zd55@do-macro) (set! Zd57@let*-macro (lambda (Z1460@stx) (let ((Z1462@t Z1460@stx)) (let ((Z1464@ls/false (Zd79@syntax-dispatch Z1462@t '(_ #(each (any any)) any . each-any)))) (if (and Z1464@ls/false (apply (lambda (Z1466@lhs* Z1467@rhs* Z1468@b Z1469@b*) (for-all Zb72@id? Z1466@lhs*)) Z1464@ls/false)) (apply (lambda (Z146e@lhs* Z146f@rhs* Z1470@b Z1471@b*) (Zd2f@bless (let Z1478@f ((Z1476@x* (map list Z146e@lhs* Z146f@rhs*))) (if (null? Z1476@x*) (cons 'let (cons '() (cons Z1470@b Z1471@b*))) (list 'let (list (car Z1476@x*)) (Z1478@f (cdr Z1476@x*))))))) Z1464@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1462@t)))))) (set! Z283e@Zd57@let*-macro Zd57@let*-macro) (set! Zd59@or-macro (lambda (Z147a@stx) (let ((Z147c@t Z147a@stx)) (let ((Z147e@ls/false (Zd79@syntax-dispatch Z147c@t '(_)))) (if Z147e@ls/false (apply (lambda () '#f) Z147e@ls/false) (let ((Z1480@t Z147c@t)) (let ((Z1482@ls/false (Zd79@syntax-dispatch Z1480@t '(_ any . each-any)))) (if Z1482@ls/false (apply (lambda (Z1484@e Z1485@e*) (Zd2f@bless (let Z148c@f ((Z1488@e Z1484@e) (Z1489@e* Z1485@e*)) (if (null? Z1489@e*) (list 'begin '#f Z1488@e) (list 'let (list (list 't Z1488@e)) (list 'if 't 't (Z148c@f (car Z1489@e*) (cdr Z1489@e*)))))))) Z1482@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1480@t))))))))) (set! Z283f@Zd59@or-macro Zd59@or-macro) (set! Zd5b@and-macro (lambda (Z148e@stx) (let ((Z1490@t Z148e@stx)) (let ((Z1492@ls/false (Zd79@syntax-dispatch Z1490@t '(_)))) (if Z1492@ls/false (apply (lambda () '#t) Z1492@ls/false) (let ((Z1494@t Z1490@t)) (let ((Z1496@ls/false (Zd79@syntax-dispatch Z1494@t '(_ any . each-any)))) (if Z1496@ls/false (apply (lambda (Z1498@e Z1499@e*) (Zd2f@bless (let Z14a0@f ((Z149c@e Z1498@e) (Z149d@e* Z1499@e*)) (if (null? Z149d@e*) (list 'begin '#f Z149c@e) (cons 'if (cons Z149c@e (cons (Z14a0@f (car Z149d@e*) (cdr Z149d@e*)) '(#f)))))))) Z1496@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1494@t))))))))) (set! Z2840@Zd5b@and-macro Zd5b@and-macro) (set! Zd5d@cond-macro (lambda (Z14a2@stx) (let ((Z14a4@t Z14a2@stx)) (let ((Z14a6@ls/false (Zd79@syntax-dispatch Z14a4@t '(_ any . each-any)))) (if Z14a6@ls/false (apply (lambda (Z14a8@cls Z14a9@cls*) (Zd2f@bless (let Z14b0@f ((Z14ac@cls Z14a8@cls) (Z14ad@cls* Z14a9@cls*)) (if (null? Z14ad@cls*) (let ((Z14b2@t Z14ac@cls)) (let ((Z14b4@ls/false (Zd79@syntax-dispatch Z14b2@t '(#(scheme-id else) any . each-any)))) (if Z14b4@ls/false (apply (lambda (Z14b6@e Z14b7@e*) (cons 'begin (cons Z14b6@e Z14b7@e*))) Z14b4@ls/false) (let ((Z14ba@t Z14b2@t)) (let ((Z14bc@ls/false (Zd79@syntax-dispatch Z14ba@t '(any #(scheme-id =>) any)))) (if Z14bc@ls/false (apply (lambda (Z14be@e Z14bf@p) (list 'let (list (list 't Z14be@e)) (list 'if 't (cons Z14bf@p '(t))))) Z14bc@ls/false) (let ((Z14c2@t Z14ba@t)) (let ((Z14c4@ls/false (Zd79@syntax-dispatch Z14c2@t '(any)))) (if Z14c4@ls/false (apply (lambda (Z14c6@e) (cons 'or (cons Z14c6@e '((if #f #f))))) Z14c4@ls/false) (let ((Z14c8@t Z14c2@t)) (let ((Z14ca@ls/false (Zd79@syntax-dispatch Z14c8@t '(any . each-any)))) (if Z14ca@ls/false (apply (lambda (Z14cc@e Z14cd@e*) (list 'if Z14cc@e (cons 'begin Z14cd@e*))) Z14ca@ls/false) (let ((Z14d0@t Z14c8@t)) (let ((Z14d2@ls/false (Zd79@syntax-dispatch Z14d0@t '_))) (if Z14d2@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid last clause" Z14a2@stx)) Z14d2@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z14d0@t)))))))))))))))) (let ((Z14d4@t Z14ac@cls)) (let ((Z14d6@ls/false (Zd79@syntax-dispatch Z14d4@t '(#(scheme-id else) any . each-any)))) (if Z14d6@ls/false (apply (lambda (Z14d8@e Z14d9@e*) (Ze59@syntax-violation '#f '"incorrect position of keyword else" Z14a2@stx)) Z14d6@ls/false) (let ((Z14dc@t Z14d4@t)) (let ((Z14de@ls/false (Zd79@syntax-dispatch Z14dc@t '(any #(scheme-id =>) any)))) (if Z14de@ls/false (apply (lambda (Z14e0@e Z14e1@p) (list 'let (list (list 't Z14e0@e)) (list 'if 't (cons Z14e1@p '(t)) (Z14b0@f (car Z14ad@cls*) (cdr Z14ad@cls*))))) Z14de@ls/false) (let ((Z14e4@t Z14dc@t)) (let ((Z14e6@ls/false (Zd79@syntax-dispatch Z14e4@t '(any)))) (if Z14e6@ls/false (apply (lambda (Z14e8@e) (list 'or Z14e8@e (Z14b0@f (car Z14ad@cls*) (cdr Z14ad@cls*)))) Z14e6@ls/false) (let ((Z14ea@t Z14e4@t)) (let ((Z14ec@ls/false (Zd79@syntax-dispatch Z14ea@t '(any . each-any)))) (if Z14ec@ls/false (apply (lambda (Z14ee@e Z14ef@e*) (list 'if Z14ee@e (cons 'begin Z14ef@e*) (Z14b0@f (car Z14ad@cls*) (cdr Z14ad@cls*)))) Z14ec@ls/false) (let ((Z14f2@t Z14ea@t)) (let ((Z14f4@ls/false (Zd79@syntax-dispatch Z14f2@t '_))) (if Z14f4@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid last clause" Z14a2@stx)) Z14f4@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z14f2@t)))))))))))))))))))) Z14a6@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z14a4@t)))))) (set! Z2841@Zd5d@cond-macro Zd5d@cond-macro) (set! Zd5f@do-include (lambda (Z14f6@stx Z14f7@id Z14f8@filename) (let ((Z14fc@filename (Zb86@stx->datum Z14f8@filename))) (begin (if (not (and (string? Z14fc@filename) (Zb72@id? Z14f7@id))) (Ze59@syntax-violation '#f '"invalid syntax" Z14f6@stx) (void)) (cons (Zd2f@bless 'begin) (with-input-from-file Z14fc@filename (lambda () (let Z1500@f ((Z14fe@ls '())) (let ((Z1502@x (Z6b4@Z584@read-annotated))) (if (eof-object? Z1502@x) (reverse Z14fe@ls) (Z1500@f (cons (Zb52@datum->stx Z14f7@id Z1502@x) Z14fe@ls)))))))))))) (set! Z2842@Zd5f@do-include Zd5f@do-include) (set! Zd61@include-macro (lambda (Z1504@e) (let ((Z1506@t Z1504@e)) (let ((Z1508@ls/false (Zd79@syntax-dispatch Z1506@t '(any any)))) (if Z1508@ls/false (apply (lambda (Z150a@id Z150b@filename) (Zd5f@do-include Z1504@e Z150a@id Z150b@filename)) Z1508@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1506@t)))))) (set! Z2843@Zd61@include-macro Zd61@include-macro) (set! Zd63@include-into-macro (lambda (Z150e@e) (let ((Z1510@t Z150e@e)) (let ((Z1512@ls/false (Zd79@syntax-dispatch Z1510@t '(_ any any)))) (if Z1512@ls/false (apply (lambda (Z1514@id Z1515@filename) (Zd5f@do-include Z150e@e Z1514@id Z1515@filename)) Z1512@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1510@t)))))) (set! Z2844@Zd63@include-into-macro Zd63@include-into-macro) (set! Zd65@syntax-rules-macro (lambda (Z1518@e) (let ((Z151a@t Z1518@e)) (let ((Z151c@ls/false (Zd79@syntax-dispatch Z151a@t '(_ each-any . #(each (any any)))))) (if Z151c@ls/false (apply (lambda (Z151e@lits Z151f@pat* Z1520@tmp*) (begin (Zd7f@verify-literals Z151e@lits Z1518@e) (Zd2f@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons Z151e@lits (map (lambda (Z1524@pat Z1525@tmp) (let ((Z1528@t Z1524@pat)) (let ((Z152a@ls/false (Zd79@syntax-dispatch Z1528@t '(_ . any)))) (if Z152a@ls/false (apply (lambda (Z152c@rest) (list (cons 'g Z152c@rest) (list 'syntax Z1525@tmp))) Z152a@ls/false) (let ((Z152e@t Z1528@t)) (let ((Z1530@ls/false (Zd79@syntax-dispatch Z152e@t '_))) (if Z1530@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid syntax-rules pattern" Z1518@e Z1524@pat)) Z1530@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z152e@t)))))))) Z151f@pat* Z1520@tmp*)))))))) Z151c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z151a@t)))))) (set! Z2845@Zd65@syntax-rules-macro Zd65@syntax-rules-macro) (set! Zd67@quasiquote-macro (letrec* ((Z1533@datum (lambda (Z1634@x) (list (Zd01@scheme-stx 'quote) (Zb5a@mkstx Z1634@x '() '() '())))) (Z154f@quasicons* (lambda (Z162c@x Z162d@y) (let Z1632@f ((Z1630@x Z162c@x)) (if (null? Z1630@x) Z162d@y (Z1551@quasicons (car Z1630@x) (Z1632@f (cdr Z1630@x))))))) (Z1551@quasicons (lambda (Z1606@x Z1607@y) (let ((Z160a@t Z1607@y)) (let ((Z160c@ls/false (Zd79@syntax-dispatch Z160a@t '(#(scheme-id quote) any)))) (if Z160c@ls/false (apply (lambda (Z160e@dy) (let ((Z1610@t Z1606@x)) (let ((Z1612@ls/false (Zd79@syntax-dispatch Z1610@t '(#(scheme-id quote) any)))) (if Z1612@ls/false (apply (lambda (Z1614@dx) (list (Zd01@scheme-stx 'quote) (cons Z1614@dx Z160e@dy))) Z1612@ls/false) (let ((Z1616@t Z1610@t)) (let ((Z1618@ls/false (Zd79@syntax-dispatch Z1616@t '_))) (if Z1618@ls/false (apply (lambda () (let ((Z161a@t Z160e@dy)) (let ((Z161c@ls/false (Zd79@syntax-dispatch Z161a@t '()))) (if Z161c@ls/false (apply (lambda () (list (Zd01@scheme-stx 'list) Z1606@x)) Z161c@ls/false) (let ((Z161e@t Z161a@t)) (let ((Z1620@ls/false (Zd79@syntax-dispatch Z161e@t '_))) (if Z1620@ls/false (apply (lambda () (list (Zd01@scheme-stx 'cons) Z1606@x Z1607@y)) Z1620@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z161e@t)))))))) Z1618@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1616@t)))))))) Z160c@ls/false) (let ((Z1622@t Z160a@t)) (let ((Z1624@ls/false (Zd79@syntax-dispatch Z1622@t '(#(scheme-id list) . each-any)))) (if Z1624@ls/false (apply (lambda (Z1626@stuff) (cons* (Zd01@scheme-stx 'list) Z1606@x Z1626@stuff)) Z1624@ls/false) (let ((Z1628@t Z1622@t)) (let ((Z162a@ls/false (Zd79@syntax-dispatch Z1628@t '_))) (if Z162a@ls/false (apply (lambda () (list (Zd01@scheme-stx 'cons) Z1606@x Z1607@y)) Z162a@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1628@t)))))))))))) (Z1553@quasiappend (lambda (Z15ec@x Z15ed@y) (let ((Z15f0@ls (let Z15f4@f ((Z15f2@x Z15ec@x)) (if (null? Z15f2@x) (let ((Z15f6@t Z15ed@y)) (let ((Z15f8@ls/false (Zd79@syntax-dispatch Z15f6@t '(#(scheme-id quote) ())))) (if Z15f8@ls/false (apply (lambda () '()) Z15f8@ls/false) (let ((Z15fa@t Z15f6@t)) (let ((Z15fc@ls/false (Zd79@syntax-dispatch Z15fa@t '_))) (if Z15fc@ls/false (apply (lambda () (list Z15ed@y)) Z15fc@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z15fa@t))))))) (let ((Z15fe@t (car Z15f2@x))) (let ((Z1600@ls/false (Zd79@syntax-dispatch Z15fe@t '(#(scheme-id quote) ())))) (if Z1600@ls/false (apply (lambda () (Z15f4@f (cdr Z15f2@x))) Z1600@ls/false) (let ((Z1602@t Z15fe@t)) (let ((Z1604@ls/false (Zd79@syntax-dispatch Z1602@t '_))) (if Z1604@ls/false (apply (lambda () (cons (car Z15f2@x) (Z15f4@f (cdr Z15f2@x)))) Z1604@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1602@t))))))))))) (if (null? Z15f0@ls) (list (Zd01@scheme-stx 'quote) '()) (if (null? (cdr Z15f0@ls)) (car Z15f0@ls) (cons* (Zd01@scheme-stx 'append) Z15f0@ls)))))) (Z1555@quasivector (lambda (Z15ba@x) (let ((Z15bc@pat-x Z15ba@x)) (let ((Z15be@t Z15bc@pat-x)) (let ((Z15c0@ls/false (Zd79@syntax-dispatch Z15be@t '(#(scheme-id quote) each-any)))) (if Z15c0@ls/false (apply (lambda (Z15c2@x*) (list (Zd01@scheme-stx 'quote) (list->vector Z15c2@x*))) Z15c0@ls/false) (let ((Z15c4@t Z15be@t)) (let ((Z15c6@ls/false (Zd79@syntax-dispatch Z15c4@t '_))) (if Z15c6@ls/false (apply (lambda () (let Z15ce@f ((Z15c8@x Z15ba@x) (Z15c9@k (lambda (Z15cc@ls) (cons* (Zd01@scheme-stx 'vector) Z15cc@ls)))) (let ((Z15d0@t Z15c8@x)) (let ((Z15d2@ls/false (Zd79@syntax-dispatch Z15d0@t '(#(scheme-id quote) each-any)))) (if Z15d2@ls/false (apply (lambda (Z15d4@x*) (Z15c9@k (map (lambda (Z15d6@x) (list (Zd01@scheme-stx 'quote) Z15d6@x)) Z15d4@x*))) Z15d2@ls/false) (let ((Z15d8@t Z15d0@t)) (let ((Z15da@ls/false (Zd79@syntax-dispatch Z15d8@t '(#(scheme-id list) . each-any)))) (if Z15da@ls/false (apply (lambda (Z15dc@x*) (Z15c9@k Z15dc@x*)) Z15da@ls/false) (let ((Z15de@t Z15d8@t)) (let ((Z15e0@ls/false (Zd79@syntax-dispatch Z15de@t '(#(scheme-id cons) any any)))) (if Z15e0@ls/false (apply (lambda (Z15e2@x Z15e3@y) (Z15ce@f Z15e3@y (lambda (Z15e6@ls) (Z15c9@k (cons Z15e2@x Z15e6@ls))))) Z15e0@ls/false) (let ((Z15e8@t Z15de@t)) (let ((Z15ea@ls/false (Zd79@syntax-dispatch Z15e8@t '_))) (if Z15ea@ls/false (apply (lambda () (list (Zd01@scheme-stx 'list->vector) Z15bc@pat-x)) Z15ea@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z15e8@t))))))))))))))) Z15c6@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z15c4@t)))))))))) (Z1557@vquasi (lambda (Z1598@p Z1599@lev) (let ((Z159c@t Z1598@p)) (let ((Z159e@ls/false (Zd79@syntax-dispatch Z159c@t '(any . any)))) (if Z159e@ls/false (apply (lambda (Z15a0@p Z15a1@q) (let ((Z15a4@t Z15a0@p)) (let ((Z15a6@ls/false (Zd79@syntax-dispatch Z15a4@t '(#(scheme-id unquote) . each-any)))) (if Z15a6@ls/false (apply (lambda (Z15a8@p) (if (= Z1599@lev '0) (Z154f@quasicons* Z15a8@p (Z1557@vquasi Z15a1@q Z1599@lev)) (Z1551@quasicons (Z1551@quasicons (Z1533@datum 'unquote) (Z1559@quasi Z15a8@p (- Z1599@lev '1))) (Z1557@vquasi Z15a1@q Z1599@lev)))) Z15a6@ls/false) (let ((Z15aa@t Z15a4@t)) (let ((Z15ac@ls/false (Zd79@syntax-dispatch Z15aa@t '(#(scheme-id unquote-splicing) . each-any)))) (if Z15ac@ls/false (apply (lambda (Z15ae@p) (if (= Z1599@lev '0) (Z1553@quasiappend Z15ae@p (Z1557@vquasi Z15a1@q Z1599@lev)) (Z1551@quasicons (Z1551@quasicons (Z1533@datum 'unquote-splicing) (Z1559@quasi Z15ae@p (- Z1599@lev '1))) (Z1557@vquasi Z15a1@q Z1599@lev)))) Z15ac@ls/false) (let ((Z15b0@t Z15aa@t)) (let ((Z15b2@ls/false (Zd79@syntax-dispatch Z15b0@t 'any))) (if Z15b2@ls/false (apply (lambda (Z15b4@p) (Z1551@quasicons (Z1559@quasi Z15b4@p Z1599@lev) (Z1557@vquasi Z15a1@q Z1599@lev))) Z15b2@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z15b0@t))))))))))) Z159e@ls/false) (let ((Z15b6@t Z159c@t)) (let ((Z15b8@ls/false (Zd79@syntax-dispatch Z15b6@t '()))) (if Z15b8@ls/false (apply (lambda () (list (Zd01@scheme-stx 'quote) '())) Z15b8@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z15b6@t))))))))) (Z1559@quasi (lambda (Z1562@p Z1563@lev) (let ((Z1566@t Z1562@p)) (let ((Z1568@ls/false (Zd79@syntax-dispatch Z1566@t '(#(scheme-id unquote) any)))) (if Z1568@ls/false (apply (lambda (Z156a@p) (if (= Z1563@lev '0) Z156a@p (Z1551@quasicons (Z1533@datum 'unquote) (Z1559@quasi (list Z156a@p) (- Z1563@lev '1))))) Z1568@ls/false) (let ((Z156c@t Z1566@t)) (let ((Z156e@ls/false (Zd79@syntax-dispatch Z156c@t '((#(scheme-id unquote) . each-any) . any)))) (if Z156e@ls/false (apply (lambda (Z1570@p Z1571@q) (if (= Z1563@lev '0) (Z154f@quasicons* Z1570@p (Z1559@quasi Z1571@q Z1563@lev)) (Z1551@quasicons (Z1551@quasicons (Z1533@datum 'unquote) (Z1559@quasi Z1570@p (- Z1563@lev '1))) (Z1559@quasi Z1571@q Z1563@lev)))) Z156e@ls/false) (let ((Z1574@t Z156c@t)) (let ((Z1576@ls/false (Zd79@syntax-dispatch Z1574@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if Z1576@ls/false (apply (lambda (Z1578@p Z1579@q) (if (= Z1563@lev '0) (Z1553@quasiappend Z1578@p (Z1559@quasi Z1579@q Z1563@lev)) (Z1551@quasicons (Z1551@quasicons (Z1533@datum 'unquote-splicing) (Z1559@quasi Z1578@p (- Z1563@lev '1))) (Z1559@quasi Z1579@q Z1563@lev)))) Z1576@ls/false) (let ((Z157c@t Z1574@t)) (let ((Z157e@ls/false (Zd79@syntax-dispatch Z157c@t '(#(scheme-id quasiquote) any)))) (if Z157e@ls/false (apply (lambda (Z1580@p) (Z1551@quasicons (Z1533@datum 'quasiquote) (Z1559@quasi (list Z1580@p) (+ Z1563@lev '1)))) Z157e@ls/false) (let ((Z1582@t Z157c@t)) (let ((Z1584@ls/false (Zd79@syntax-dispatch Z1582@t '(any . any)))) (if Z1584@ls/false (apply (lambda (Z1586@p Z1587@q) (Z1551@quasicons (Z1559@quasi Z1586@p Z1563@lev) (Z1559@quasi Z1587@q Z1563@lev))) Z1584@ls/false) (let ((Z158a@t Z1582@t)) (let ((Z158c@ls/false (Zd79@syntax-dispatch Z158a@t '#(vector each-any)))) (if (and Z158c@ls/false (apply (lambda (Z158e@x) (not (Zb3e@stx? Z158e@x))) Z158c@ls/false)) (apply (lambda (Z1590@x) (Z1555@quasivector (Z1557@vquasi Z1590@x Z1563@lev))) Z158c@ls/false) (let ((Z1592@t Z158a@t)) (let ((Z1594@ls/false (Zd79@syntax-dispatch Z1592@t 'any))) (if Z1594@ls/false (apply (lambda (Z1596@p) (list (Zd01@scheme-stx 'quote) Z1596@p)) Z1594@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1592@t))))))))))))))))))))))))) (lambda (Z155a@x) (let ((Z155c@t Z155a@x)) (let ((Z155e@ls/false (Zd79@syntax-dispatch Z155c@t '(_ any)))) (if Z155e@ls/false (apply (lambda (Z1560@e) (Z1559@quasi Z1560@e '0)) Z155e@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z155c@t))))))) (set! Z2846@Zd67@quasiquote-macro Zd67@quasiquote-macro) (set! Zd69@quasisyntax-macro (letrec* ((Z1637@quasi (lambda (Z1652@p Z1653@lev) (let ((Z1656@t Z1652@p)) (let ((Z1658@ls/false (Zd79@syntax-dispatch Z1656@t '(#(scheme-id unsyntax) any)))) (if Z1658@ls/false (apply (lambda (Z165a@p) (if (= Z1653@lev '0) (let ((Z165c@g (gensym))) (values (list Z165c@g) (list Z165a@p) Z165c@g)) (call-with-values (lambda () (Z1637@quasi Z165a@p (- Z1653@lev '1))) (lambda (Z1664@Z165f Z1665@Z1661 Z1666@Z1663) (let ((Z166a@p Z1666@Z1663) (Z166b@rhs* Z1665@Z1661) (Z166c@lhs* Z1664@Z165f)) (values Z166c@lhs* Z166b@rhs* (list 'unsyntax Z166a@p))))))) Z1658@ls/false) (let ((Z1670@t Z1656@t)) (let ((Z1672@ls/false (Zd79@syntax-dispatch Z1670@t '#(scheme-id unsyntax)))) (if (and Z1672@ls/false (apply (lambda () (= Z1653@lev '0)) Z1672@ls/false)) (apply (lambda () (Ze59@syntax-violation '#f '"incorrect use of unsyntax" Z1652@p)) Z1672@ls/false) (let ((Z1674@t Z1670@t)) (let ((Z1676@ls/false (Zd79@syntax-dispatch Z1674@t '((#(scheme-id unsyntax) . each-any) . any)))) (if Z1676@ls/false (apply (lambda (Z1678@p* Z1679@q) (call-with-values (lambda () (Z1637@quasi Z1679@q Z1653@lev)) (lambda (Z1682@Z167d Z1683@Z167f Z1684@Z1681) (let ((Z1688@q Z1684@Z1681) (Z1689@rhs* Z1683@Z167f) (Z168a@lhs* Z1682@Z167d)) (if (= Z1653@lev '0) (let ((Z168e@g* (map (lambda (Z1690@x) (gensym)) Z1678@p*))) (values (append Z168e@g* Z168a@lhs*) (append Z1678@p* Z1689@rhs*) (append Z168e@g* Z1688@q))) (call-with-values (lambda () (Z1637@quasi Z1678@p* (- Z1653@lev '1))) (lambda (Z1698@Z1693 Z1699@Z1695 Z169a@Z1697) (let ((Z169e@p* Z169a@Z1697) (Z169f@rhs2* Z1699@Z1695) (Z16a0@lhs2* Z1698@Z1693)) (values (append Z16a0@lhs2* Z168a@lhs*) (append Z169f@rhs2* Z1689@rhs*) (cons (cons 'unsyntax Z169e@p*) Z1688@q)))))))))) Z1676@ls/false) (let ((Z16a4@t Z1674@t)) (let ((Z16a6@ls/false (Zd79@syntax-dispatch Z16a4@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if Z16a6@ls/false (apply (lambda (Z16a8@p* Z16a9@q) (call-with-values (lambda () (Z1637@quasi Z16a9@q Z1653@lev)) (lambda (Z16b2@Z16ad Z16b3@Z16af Z16b4@Z16b1) (let ((Z16b8@q Z16b4@Z16b1) (Z16b9@rhs* Z16b3@Z16af) (Z16ba@lhs* Z16b2@Z16ad)) (if (= Z1653@lev '0) (let ((Z16be@g* (map (lambda (Z16c0@x) (gensym)) Z16a8@p*))) (values (append (map (lambda (Z16c2@g) (cons Z16c2@g '(...))) Z16be@g*) Z16ba@lhs*) (append Z16a8@p* Z16b9@rhs*) (append (apply append (map (lambda (Z16c4@g) (cons Z16c4@g '(...))) Z16be@g*)) Z16b8@q))) (call-with-values (lambda () (Z1637@quasi Z16a8@p* (- Z1653@lev '1))) (lambda (Z16cc@Z16c7 Z16cd@Z16c9 Z16ce@Z16cb) (let ((Z16d2@p* Z16ce@Z16cb) (Z16d3@rhs2* Z16cd@Z16c9) (Z16d4@lhs2* Z16cc@Z16c7)) (values (append Z16d4@lhs2* Z16ba@lhs*) (append Z16d3@rhs2* Z16b9@rhs*) (cons (cons 'unsyntax-splicing Z16d2@p*) Z16b8@q)))))))))) Z16a6@ls/false) (let ((Z16d8@t Z16a4@t)) (let ((Z16da@ls/false (Zd79@syntax-dispatch Z16d8@t '#(scheme-id unsyntax-splicing)))) (if (and Z16da@ls/false (apply (lambda () (= Z1653@lev '0)) Z16da@ls/false)) (apply (lambda () (Ze59@syntax-violation '#f '"incorrect use of unsyntax-splicing" Z1652@p)) Z16da@ls/false) (let ((Z16dc@t Z16d8@t)) (let ((Z16de@ls/false (Zd79@syntax-dispatch Z16dc@t '(#(scheme-id quasisyntax) any)))) (if Z16de@ls/false (apply (lambda (Z16e0@p) (call-with-values (lambda () (Z1637@quasi Z16e0@p (+ Z1653@lev '1))) (lambda (Z16e8@Z16e3 Z16e9@Z16e5 Z16ea@Z16e7) (let ((Z16ee@p Z16ea@Z16e7) (Z16ef@rhs* Z16e9@Z16e5) (Z16f0@lhs* Z16e8@Z16e3)) (values Z16f0@lhs* Z16ef@rhs* (list 'quasisyntax Z16ee@p)))))) Z16de@ls/false) (let ((Z16f4@t Z16dc@t)) (let ((Z16f6@ls/false (Zd79@syntax-dispatch Z16f4@t '(any . any)))) (if Z16f6@ls/false (apply (lambda (Z16f8@p Z16f9@q) (call-with-values (lambda () (Z1637@quasi Z16f8@p Z1653@lev)) (lambda (Z1708@Z16fd Z1709@Z16ff Z170a@Z1701) (call-with-values (lambda () (Z1637@quasi Z16f9@q Z1653@lev)) (lambda (Z170e@Z1703 Z170f@Z1705 Z1710@Z1707) (let ((Z1714@q Z1710@Z1707) (Z1715@rhs2* Z170f@Z1705) (Z1716@lhs2* Z170e@Z1703) (Z1717@p Z170a@Z1701) (Z1718@rhs* Z1709@Z16ff) (Z1719@lhs* Z1708@Z16fd)) (values (append Z1716@lhs2* Z1719@lhs*) (append Z1715@rhs2* Z1718@rhs*) (cons Z1717@p Z1714@q)))))))) Z16f6@ls/false) (let ((Z1720@t Z16f4@t)) (let ((Z1722@ls/false (Zd79@syntax-dispatch Z1720@t '#(vector each-any)))) (if Z1722@ls/false (apply (lambda (Z1724@x*) (call-with-values (lambda () (Z1637@quasi Z1724@x* Z1653@lev)) (lambda (Z172c@Z1727 Z172d@Z1729 Z172e@Z172b) (let ((Z1732@x* Z172e@Z172b) (Z1733@rhs* Z172d@Z1729) (Z1734@lhs* Z172c@Z1727)) (values Z1734@lhs* Z1733@rhs* (list->vector Z1732@x*)))))) Z1722@ls/false) (let ((Z1738@t Z1720@t)) (let ((Z173a@ls/false (Zd79@syntax-dispatch Z1738@t '_))) (if Z173a@ls/false (apply (lambda () (values '() '() Z1652@p)) Z173a@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1738@t))))))))))))))))))))))))))))))) (lambda (Z1638@x) (let ((Z163a@t Z1638@x)) (let ((Z163c@ls/false (Zd79@syntax-dispatch Z163a@t '(_ any)))) (if Z163c@ls/false (apply (lambda (Z163e@e) (call-with-values (lambda () (Z1637@quasi Z163e@e '0)) (lambda (Z1646@Z1641 Z1647@Z1643 Z1648@Z1645) (let ((Z164c@v Z1648@Z1645) (Z164d@rhs* Z1647@Z1643) (Z164e@lhs* Z1646@Z1641)) (Zd2f@bless (list 'syntax-case (cons 'list Z164d@rhs*) '() (list Z164e@lhs* (list 'syntax Z164c@v)))))))) Z163c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z163a@t))))))) (set! Z2847@Zd69@quasisyntax-macro Zd69@quasisyntax-macro) (set! Zd6b@define-struct-macro (lambda (Z173c@stx) (Ze59@syntax-violation '#f '"define-struct not supported" Z173c@stx))) (set! Z2848@Zd6b@define-struct-macro Zd6b@define-struct-macro) (set! Zd6d@define-record-type-macro (lambda (Z173e@x) (letrec* ((Z1741@id (lambda (Z1934@ctxt . Z1936@str*) (Ze5d@datum->syntax Z1934@ctxt (string->symbol (apply string-append (map (lambda (Z1938@x) (if (symbol? Z1938@x) (symbol->string Z1938@x) (if (string? Z1938@x) Z1938@x (assertion-violation 'define-record-type '"BUG")))) Z1936@str*)))))) (Z1743@get-record-name (lambda (Z1922@spec) (let ((Z1924@t Z1922@spec)) (let ((Z1926@ls/false (Zd79@syntax-dispatch Z1924@t '(any any any)))) (if Z1926@ls/false (apply (lambda (Z1928@foo Z1929@make-foo Z192a@foo?) Z1928@foo) Z1926@ls/false) (let ((Z192e@t Z1924@t)) (let ((Z1930@ls/false (Zd79@syntax-dispatch Z192e@t 'any))) (if Z1930@ls/false (apply (lambda (Z1932@foo) Z1932@foo) Z1930@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z192e@t))))))))) (Z1745@get-record-constructor-name (lambda (Z190e@spec) (let ((Z1910@t Z190e@spec)) (let ((Z1912@ls/false (Zd79@syntax-dispatch Z1910@t '(any any any)))) (if Z1912@ls/false (apply (lambda (Z1914@foo Z1915@make-foo Z1916@foo?) Z1915@make-foo) Z1912@ls/false) (let ((Z191a@t Z1910@t)) (let ((Z191c@ls/false (Zd79@syntax-dispatch Z191a@t 'any))) (if (and Z191c@ls/false (apply (lambda (Z191e@foo) (Zb72@id? Z191e@foo)) Z191c@ls/false)) (apply (lambda (Z1920@foo) (Z1741@id Z1920@foo '"make-" (Zb86@stx->datum Z1920@foo))) Z191c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z191a@t))))))))) (Z1747@get-record-predicate-name (lambda (Z18fa@spec) (let ((Z18fc@t Z18fa@spec)) (let ((Z18fe@ls/false (Zd79@syntax-dispatch Z18fc@t '(any any any)))) (if Z18fe@ls/false (apply (lambda (Z1900@foo Z1901@make-foo Z1902@foo?) Z1902@foo?) Z18fe@ls/false) (let ((Z1906@t Z18fc@t)) (let ((Z1908@ls/false (Zd79@syntax-dispatch Z1906@t 'any))) (if (and Z1908@ls/false (apply (lambda (Z190a@foo) (Zb72@id? Z190a@foo)) Z1908@ls/false)) (apply (lambda (Z190c@foo) (Z1741@id Z190c@foo (Zb86@stx->datum Z190c@foo) '"?")) Z1908@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1906@t))))))))) (Z1749@get-clause (lambda (Z18e8@id Z18e9@ls) (let ((Z18ec@t Z18e9@ls)) (let ((Z18ee@ls/false (Zd79@syntax-dispatch Z18ec@t '()))) (if Z18ee@ls/false (apply (lambda () '#f) Z18ee@ls/false) (let ((Z18f0@t Z18ec@t)) (let ((Z18f2@ls/false (Zd79@syntax-dispatch Z18f0@t '((any . any) . any)))) (if Z18f2@ls/false (apply (lambda (Z18f4@x Z18f5@rest Z18f6@ls) (if (Zb78@free-id=? (Zd2f@bless Z18e8@id) Z18f4@x) (cons Z18f4@x Z18f5@rest) (Z1749@get-clause Z18e8@id Z18f6@ls))) Z18f2@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z18f0@t))))))))) (Z174b@foo-rtd-code (lambda (Z1896@name Z1897@clause* Z1898@parent-rtd-code) (letrec* ((Z189d@convert-field-spec* (lambda (Z18ce@ls) (list->vector (map (lambda (Z18d0@x) (let ((Z18d2@t Z18d0@x)) (let ((Z18d4@ls/false (Zd79@syntax-dispatch Z18d2@t '(#(scheme-id mutable) any . any)))) (if Z18d4@ls/false (apply (lambda (Z18d6@name Z18d7@rest) (list 'mutable Z18d6@name)) Z18d4@ls/false) (let ((Z18da@t Z18d2@t)) (let ((Z18dc@ls/false (Zd79@syntax-dispatch Z18da@t '(#(scheme-id immutable) any . any)))) (if Z18dc@ls/false (apply (lambda (Z18de@name Z18df@rest) (list 'immutable Z18de@name)) Z18dc@ls/false) (let ((Z18e2@t Z18da@t)) (let ((Z18e4@ls/false (Zd79@syntax-dispatch Z18e2@t 'any))) (if Z18e4@ls/false (apply (lambda (Z18e6@name) (list 'immutable Z18e6@name)) Z18e4@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z18e2@t))))))))))) Z18ce@ls))))) (let ((Z189e@uid-code (let ((Z18a6@t (Z1749@get-clause 'nongenerative Z1897@clause*))) (let ((Z18a8@ls/false (Zd79@syntax-dispatch Z18a6@t '(_)))) (if Z18a8@ls/false (apply (lambda () (list 'quote (gensym))) Z18a8@ls/false) (let ((Z18aa@t Z18a6@t)) (let ((Z18ac@ls/false (Zd79@syntax-dispatch Z18aa@t '(_ any)))) (if Z18ac@ls/false (apply (lambda (Z18ae@uid) (list 'quote Z18ae@uid)) Z18ac@ls/false) (let ((Z18b0@t Z18aa@t)) (let ((Z18b2@ls/false (Zd79@syntax-dispatch Z18b0@t '_))) (if Z18b2@ls/false (apply (lambda () '#f) Z18b2@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z18b0@t))))))))))) (Z189f@sealed? (let ((Z18b4@t (Z1749@get-clause 'sealed Z1897@clause*))) (let ((Z18b6@ls/false (Zd79@syntax-dispatch Z18b4@t '(_ #(atom #t))))) (if Z18b6@ls/false (apply (lambda () '#t) Z18b6@ls/false) (let ((Z18b8@t Z18b4@t)) (let ((Z18ba@ls/false (Zd79@syntax-dispatch Z18b8@t '_))) (if Z18ba@ls/false (apply (lambda () '#f) Z18ba@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z18b8@t)))))))) (Z18a0@opaque? (let ((Z18bc@t (Z1749@get-clause 'opaque Z1897@clause*))) (let ((Z18be@ls/false (Zd79@syntax-dispatch Z18bc@t '(_ #(atom #t))))) (if Z18be@ls/false (apply (lambda () '#t) Z18be@ls/false) (let ((Z18c0@t Z18bc@t)) (let ((Z18c2@ls/false (Zd79@syntax-dispatch Z18c0@t '_))) (if Z18c2@ls/false (apply (lambda () '#f) Z18c2@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z18c0@t)))))))) (Z18a1@fields (let ((Z18c4@t (Z1749@get-clause 'fields Z1897@clause*))) (let ((Z18c6@ls/false (Zd79@syntax-dispatch Z18c4@t '(_ . each-any)))) (if Z18c6@ls/false (apply (lambda (Z18c8@field-spec*) (list 'quote (Z189d@convert-field-spec* Z18c8@field-spec*))) Z18c6@ls/false) (let ((Z18ca@t Z18c4@t)) (let ((Z18cc@ls/false (Zd79@syntax-dispatch Z18ca@t '_))) (if Z18cc@ls/false (apply (lambda () ''#()) Z18cc@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z18ca@t))))))))) (Zd2f@bless (list 'make-record-type-descriptor (list 'quote Z1896@name) Z1898@parent-rtd-code Z189e@uid-code Z189f@sealed? Z18a0@opaque? Z18a1@fields)))))) (Z174d@parent-rtd-code (lambda (Z187e@clause*) (let ((Z1880@t (Z1749@get-clause 'parent Z187e@clause*))) (let ((Z1882@ls/false (Zd79@syntax-dispatch Z1880@t '(_ any)))) (if Z1882@ls/false (apply (lambda (Z1884@name) (list 'record-type-descriptor Z1884@name)) Z1882@ls/false) (let ((Z1886@t Z1880@t)) (let ((Z1888@ls/false (Zd79@syntax-dispatch Z1886@t '#(atom #f)))) (if Z1888@ls/false (apply (lambda () (let ((Z188a@t (Z1749@get-clause 'parent-rtd Z187e@clause*))) (let ((Z188c@ls/false (Zd79@syntax-dispatch Z188a@t '(_ any any)))) (if Z188c@ls/false (apply (lambda (Z188e@rtd Z188f@rcd) Z188e@rtd) Z188c@ls/false) (let ((Z1892@t Z188a@t)) (let ((Z1894@ls/false (Zd79@syntax-dispatch Z1892@t '#(atom #f)))) (if Z1894@ls/false (apply (lambda () '#f) Z1894@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1892@t)))))))) Z1888@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1886@t))))))))) (Z174f@parent-rcd-code (lambda (Z1866@clause*) (let ((Z1868@t (Z1749@get-clause 'parent Z1866@clause*))) (let ((Z186a@ls/false (Zd79@syntax-dispatch Z1868@t '(_ any)))) (if Z186a@ls/false (apply (lambda (Z186c@name) (list 'record-constructor-descriptor Z186c@name)) Z186a@ls/false) (let ((Z186e@t Z1868@t)) (let ((Z1870@ls/false (Zd79@syntax-dispatch Z186e@t '#(atom #f)))) (if Z1870@ls/false (apply (lambda () (let ((Z1872@t (Z1749@get-clause 'parent-rtd Z1866@clause*))) (let ((Z1874@ls/false (Zd79@syntax-dispatch Z1872@t '(_ any any)))) (if Z1874@ls/false (apply (lambda (Z1876@rtd Z1877@rcd) Z1877@rcd) Z1874@ls/false) (let ((Z187a@t Z1872@t)) (let ((Z187c@ls/false (Zd79@syntax-dispatch Z187a@t '#(atom #f)))) (if Z187c@ls/false (apply (lambda () '#f) Z187c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z187a@t)))))))) Z1870@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z186e@t))))))))) (Z1751@foo-rcd-code (lambda (Z185e@clause* Z185f@foo-rtd Z1860@protocol Z1861@parent-rcd-code) (list 'make-record-constructor-descriptor Z185f@foo-rtd Z1861@parent-rcd-code Z1860@protocol))) (Z1753@get-protocol-code (lambda (Z1852@clause*) (let ((Z1854@t (Z1749@get-clause 'protocol Z1852@clause*))) (let ((Z1856@ls/false (Zd79@syntax-dispatch Z1854@t '(_ any)))) (if Z1856@ls/false (apply (lambda (Z1858@expr) Z1858@expr) Z1856@ls/false) (let ((Z185a@t Z1854@t)) (let ((Z185c@ls/false (Zd79@syntax-dispatch Z185a@t '_))) (if Z185c@ls/false (apply (lambda () '#f) Z185c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z185a@t))))))))) (Z1755@get-fields (lambda (Z1840@clause*) (let ((Z1842@t Z1840@clause*)) (let ((Z1844@ls/false (Zd79@syntax-dispatch Z1842@t '()))) (if Z1844@ls/false (apply (lambda () '()) Z1844@ls/false) (let ((Z1846@t Z1842@t)) (let ((Z1848@ls/false (Zd79@syntax-dispatch Z1846@t '((#(scheme-id fields) . each-any) . _)))) (if Z1848@ls/false (apply (lambda (Z184a@f*) Z184a@f*) Z1848@ls/false) (let ((Z184c@t Z1846@t)) (let ((Z184e@ls/false (Zd79@syntax-dispatch Z184c@t '(_ . any)))) (if Z184e@ls/false (apply (lambda (Z1850@rest) (Z1755@get-fields Z1850@rest)) Z184e@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z184c@t)))))))))))) (Z1757@get-mutator-indices (lambda (Z1828@fields) (let Z182e@f ((Z182a@fields Z1828@fields) (Z182b@i '0)) (let ((Z1830@t Z182a@fields)) (let ((Z1832@ls/false (Zd79@syntax-dispatch Z1830@t '()))) (if Z1832@ls/false (apply (lambda () '()) Z1832@ls/false) (let ((Z1834@t Z1830@t)) (let ((Z1836@ls/false (Zd79@syntax-dispatch Z1834@t '((#(scheme-id mutable) . _) . any)))) (if Z1836@ls/false (apply (lambda (Z1838@rest) (cons Z182b@i (Z182e@f Z1838@rest (+ Z182b@i '1)))) Z1836@ls/false) (let ((Z183a@t Z1834@t)) (let ((Z183c@ls/false (Zd79@syntax-dispatch Z183a@t '(_ . any)))) (if Z183c@ls/false (apply (lambda (Z183e@rest) (Z182e@f Z183e@rest (+ Z182b@i '1))) Z183c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z183a@t))))))))))))) (Z1759@get-mutators (lambda (Z17fe@foo Z17ff@fields) (letrec* ((Z1803@gen-name (lambda (Z1826@x) (Ze5d@datum->syntax Z17fe@foo (string->symbol (string-append (symbol->string (Ze5f@syntax->datum Z17fe@foo)) '"-" (symbol->string (Ze5f@syntax->datum Z1826@x)) '"-set!")))))) (let Z1806@f ((Z1804@fields Z17ff@fields)) (let ((Z1808@t Z1804@fields)) (let ((Z180a@ls/false (Zd79@syntax-dispatch Z1808@t '()))) (if Z180a@ls/false (apply (lambda () '()) Z180a@ls/false) (let ((Z180c@t Z1808@t)) (let ((Z180e@ls/false (Zd79@syntax-dispatch Z180c@t '((#(scheme-id mutable) any any any) . any)))) (if Z180e@ls/false (apply (lambda (Z1810@name Z1811@accessor Z1812@mutator Z1813@rest) (cons Z1812@mutator (Z1806@f Z1813@rest))) Z180e@ls/false) (let ((Z1818@t Z180c@t)) (let ((Z181a@ls/false (Zd79@syntax-dispatch Z1818@t '((#(scheme-id mutable) any) . any)))) (if Z181a@ls/false (apply (lambda (Z181c@name Z181d@rest) (cons (Z1803@gen-name Z181c@name) (Z1806@f Z181d@rest))) Z181a@ls/false) (let ((Z1820@t Z1818@t)) (let ((Z1822@ls/false (Zd79@syntax-dispatch Z1820@t '(_ . any)))) (if Z1822@ls/false (apply (lambda (Z1824@rest) (Z1806@f Z1824@rest)) Z1822@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1820@t))))))))))))))))) (Z175b@get-accessors (lambda (Z17ba@foo Z17bb@fields) (letrec* ((Z17bf@gen-name (lambda (Z17fc@x) (Ze5d@datum->syntax Z17ba@foo (string->symbol (string-append (symbol->string (Ze5f@syntax->datum Z17ba@foo)) '"-" (symbol->string (Ze5f@syntax->datum Z17fc@x)))))))) (map (lambda (Z17c0@field) (let ((Z17c2@t Z17c0@field)) (let ((Z17c4@ls/false (Zd79@syntax-dispatch Z17c2@t '(#(scheme-id mutable) any any any)))) (if (and Z17c4@ls/false (apply (lambda (Z17c6@name Z17c7@accessor Z17c8@mutator) (Zb72@id? Z17c7@accessor)) Z17c4@ls/false)) (apply (lambda (Z17cc@name Z17cd@accessor Z17ce@mutator) Z17cd@accessor) Z17c4@ls/false) (let ((Z17d2@t Z17c2@t)) (let ((Z17d4@ls/false (Zd79@syntax-dispatch Z17d2@t '(#(scheme-id immutable) any any)))) (if (and Z17d4@ls/false (apply (lambda (Z17d6@name Z17d7@accessor) (Zb72@id? Z17d7@accessor)) Z17d4@ls/false)) (apply (lambda (Z17da@name Z17db@accessor) Z17db@accessor) Z17d4@ls/false) (let ((Z17de@t Z17d2@t)) (let ((Z17e0@ls/false (Zd79@syntax-dispatch Z17de@t '(#(scheme-id mutable) any)))) (if (and Z17e0@ls/false (apply (lambda (Z17e2@name) (Zb72@id? Z17e2@name)) Z17e0@ls/false)) (apply (lambda (Z17e4@name) (Z17bf@gen-name Z17e4@name)) Z17e0@ls/false) (let ((Z17e6@t Z17de@t)) (let ((Z17e8@ls/false (Zd79@syntax-dispatch Z17e6@t '(#(scheme-id immutable) any)))) (if (and Z17e8@ls/false (apply (lambda (Z17ea@name) (Zb72@id? Z17ea@name)) Z17e8@ls/false)) (apply (lambda (Z17ec@name) (Z17bf@gen-name Z17ec@name)) Z17e8@ls/false) (let ((Z17ee@t Z17e6@t)) (let ((Z17f0@ls/false (Zd79@syntax-dispatch Z17ee@t 'any))) (if (and Z17f0@ls/false (apply (lambda (Z17f2@name) (Zb72@id? Z17f2@name)) Z17f0@ls/false)) (apply (lambda (Z17f4@name) (Z17bf@gen-name Z17f4@name)) Z17f0@ls/false) (let ((Z17f6@t Z17ee@t)) (let ((Z17f8@ls/false (Zd79@syntax-dispatch Z17f6@t 'any))) (if Z17f8@ls/false (apply (lambda (Z17fa@others) (Ze59@syntax-violation '#f '"invalid field spec" Z17c0@field)) Z17f8@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z17f6@t)))))))))))))))))))) Z17bb@fields)))) (Z175d@enumerate (lambda (Z17b2@ls) (let Z17b8@f ((Z17b4@ls Z17b2@ls) (Z17b5@i '0)) (if (null? Z17b4@ls) '() (cons Z17b5@i (Z17b8@f (cdr Z17b4@ls) (+ Z17b5@i '1))))))) (Z175f@do-define-record (lambda (Z178a@namespec Z178b@clause*) (let ((Z178e@foo (Z1743@get-record-name Z178a@namespec))) (let ((Z1790@foo-rtd (gensym))) (let ((Z1792@foo-rcd (gensym))) (let ((Z1794@protocol (gensym))) (let ((Z1796@make-foo (Z1745@get-record-constructor-name Z178a@namespec))) (let ((Z1798@fields (Z1755@get-fields Z178b@clause*))) (let ((Z179a@idx* (Z175d@enumerate Z1798@fields))) (let ((Z179c@foo-x* (Z175b@get-accessors Z178e@foo Z1798@fields))) (let ((Z179e@set-foo-x!* (Z1759@get-mutators Z178e@foo Z1798@fields))) (let ((Z17a0@set-foo-idx* (Z1757@get-mutator-indices Z1798@fields))) (let ((Z17a2@foo? (Z1747@get-record-predicate-name Z178a@namespec))) (let ((Z17a4@foo-rtd-code (Z174b@foo-rtd-code Z178e@foo Z178b@clause* (Z174d@parent-rtd-code Z178b@clause*)))) (let ((Z17a6@foo-rcd-code (Z1751@foo-rcd-code Z178b@clause* Z1790@foo-rtd Z1794@protocol (Z174f@parent-rcd-code Z178b@clause*)))) (let ((Z17a8@protocol-code (Z1753@get-protocol-code Z178b@clause*))) (Zd2f@bless (cons 'begin (cons (list 'define Z1790@foo-rtd Z17a4@foo-rtd-code) (cons (list 'define Z1794@protocol Z17a8@protocol-code) (cons (list 'define Z1792@foo-rcd Z17a6@foo-rcd-code) (cons (list 'define-syntax Z178e@foo (list 'list ''$rtd (list 'syntax Z1790@foo-rtd) (list 'syntax Z1792@foo-rcd))) (cons (list 'define Z17a2@foo? (list 'record-predicate Z1790@foo-rtd)) (cons (list 'define Z1796@make-foo (list 'record-constructor Z1792@foo-rcd)) (append (map (lambda (Z17aa@foo-x Z17ab@idx) (list 'define Z17aa@foo-x (list 'record-accessor Z1790@foo-rtd Z17ab@idx))) Z179c@foo-x* Z179a@idx*) (map (lambda (Z17ae@set-foo-x! Z17af@idx) (list 'define Z17ae@set-foo-x! (list 'record-mutator Z1790@foo-rtd Z17af@idx))) Z179e@set-foo-x!* Z17a0@set-foo-idx*)))))))))))))))))))))))))) (Z1761@verify-clauses (lambda (Z176a@x Z176b@cls*) (letrec* ((Z176f@valid-kwds (map Zd2f@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (Z1771@free-id-member? (lambda (Z1786@x Z1787@ls) (and (pair? Z1787@ls) (or (Zb78@free-id=? Z1786@x (car Z1787@ls)) (Z1771@free-id-member? Z1786@x (cdr Z1787@ls))))))) (let Z1776@f ((Z1772@cls* Z176b@cls*) (Z1773@seen* '())) (if (not (null? Z1772@cls*)) (let ((Z1778@t (car Z1772@cls*))) (let ((Z177a@ls/false (Zd79@syntax-dispatch Z1778@t '(any . any)))) (if Z177a@ls/false (apply (lambda (Z177c@kwd Z177d@rest) (if (or (not (Zb72@id? Z177c@kwd)) (not (Z1771@free-id-member? Z177c@kwd Z176f@valid-kwds))) (Ze59@syntax-violation '#f '"not a valid define-record-type keyword" Z177c@kwd) (if (Zb7e@bound-id-member? Z177c@kwd Z1773@seen*) (Ze59@syntax-violation '#f '"duplicate use of keyword " Z176a@x Z177c@kwd) (Z1776@f (cdr Z1772@cls*) (cons Z177c@kwd Z1773@seen*))))) Z177a@ls/false) (let ((Z1780@t Z1778@t)) (let ((Z1782@ls/false (Zd79@syntax-dispatch Z1780@t 'any))) (if Z1782@ls/false (apply (lambda (Z1784@cls) (Ze59@syntax-violation '#f '"malformed define-record-type clause" Z1784@cls)) Z1782@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1780@t))))))) (void))))))) (let ((Z1762@t Z173e@x)) (let ((Z1764@ls/false (Zd79@syntax-dispatch Z1762@t '(_ any . each-any)))) (if Z1764@ls/false (apply (lambda (Z1766@namespec Z1767@clause*) (begin (Z1761@verify-clauses Z173e@x Z1767@clause*) (Z175f@do-define-record Z1766@namespec Z1767@clause*))) Z1764@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1762@t))))))) (set! Z2849@Zd6d@define-record-type-macro Zd6d@define-record-type-macro) (set! Zd6f@define-condition-type-macro (lambda (Z193a@x) (letrec* ((Z193d@mkname (lambda (Z196a@name Z196b@suffix) (Ze5d@datum->syntax Z196a@name (string->symbol (string-append (symbol->string (Ze5f@syntax->datum Z196a@name)) Z196b@suffix)))))) (let ((Z193e@t Z193a@x)) (let ((Z1940@ls/false (Zd79@syntax-dispatch Z193e@t '(any any any any any . #(each (any any)))))) (if (and Z1940@ls/false (apply (lambda (Z1942@ctxt Z1943@name Z1944@super Z1945@constructor Z1946@predicate Z1947@field* Z1948@accessor*) (and (Zb72@id? Z1943@name) (Zb72@id? Z1944@super) (Zb72@id? Z1945@constructor) (Zb72@id? Z1946@predicate) (for-all Zb72@id? Z1947@field*) (for-all Zb72@id? Z1948@accessor*))) Z1940@ls/false)) (apply (lambda (Z1950@ctxt Z1951@name Z1952@super Z1953@constructor Z1954@predicate Z1955@field* Z1956@accessor*) (let ((Z195e@aux-accessor* (map (lambda (Z1960@x) (gensym)) Z1956@accessor*))) (Zd2f@bless (cons 'begin (cons (cons 'define-record-type (cons (list Z1951@name Z1953@constructor (gensym)) (cons (list 'parent Z1952@super) (cons (cons 'fields (map (lambda (Z1962@field Z1963@aux) (list 'immutable Z1962@field Z1963@aux)) Z1955@field* Z195e@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define Z1954@predicate (list 'condition-predicate (list 'record-type-descriptor Z1951@name))) (map (lambda (Z1966@accessor Z1967@aux) (list 'define Z1966@accessor (list 'condition-accessor (list 'record-type-descriptor Z1951@name) Z1967@aux))) Z1956@accessor* Z195e@aux-accessor*))))))) Z1940@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z193e@t))))))) (set! Z284a@Zd6f@define-condition-type-macro Zd6f@define-condition-type-macro) (set! Zd71@incorrect-usage-macro (lambda (Z196e@e) (Ze59@syntax-violation '#f '"incorrect usage of auxiliary keyword" Z196e@e))) (set! Z284b@Zd71@incorrect-usage-macro Zd71@incorrect-usage-macro) (set! Zd73@parameterize-macro (lambda (Z1970@e) (let ((Z1972@t Z1970@e)) (let ((Z1974@ls/false (Zd79@syntax-dispatch Z1972@t '(_ () any . each-any)))) (if Z1974@ls/false (apply (lambda (Z1976@b Z1977@b*) (Zd2f@bless (cons 'let (cons '() (cons Z1976@b Z1977@b*))))) Z1974@ls/false) (let ((Z197a@t Z1972@t)) (let ((Z197c@ls/false (Zd79@syntax-dispatch Z197a@t '(_ #(each (any any)) any . each-any)))) (if Z197c@ls/false (apply (lambda (Z197e@olhs* Z197f@orhs* Z1980@b Z1981@b*) (let ((Z1986@lhs* (Ze47@generate-temporaries Z197e@olhs*)) (Z1987@rhs* (Ze47@generate-temporaries Z197f@orhs*))) (Zd2f@bless (cons (list 'lambda (append Z1986@lhs* Z1987@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (Z198a@lhs Z198b@rhs) (list 'let (list (list 't (list Z198a@lhs))) (list Z198a@lhs Z198b@rhs) (cons 'set! (cons Z198b@rhs '(t))))) Z1986@lhs* Z1987@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons Z1980@b Z1981@b*))) '(swap)))))) (append Z197e@olhs* Z197f@orhs*))))) Z197c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z197a@t))))))))) (set! Z284c@Zd73@parameterize-macro Zd73@parameterize-macro) (set! Zd75@foreign-call-transformer (lambda (Z198e@e Z198f@r Z1990@mr) (let ((Z1994@t Z198e@e)) (let ((Z1996@ls/false (Zd79@syntax-dispatch Z1994@t '(_ any . each-any)))) (if Z1996@ls/false (apply (lambda (Z1998@name Z1999@arg*) (cons 'foreign-call (cons (Zd9b@chi-expr Z1998@name Z198f@r Z1990@mr) (Zd97@chi-expr* Z1999@arg* Z198f@r Z1990@mr)))) Z1996@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1994@t)))))) (set! Z284d@Zd75@foreign-call-transformer Zd75@foreign-call-transformer) (set! Zd77@convert-pattern (lambda (Z199c@pattern Z199d@keys) (letrec* ((Z19a1@cvt* (lambda (Z1a40@p* Z1a41@n Z1a42@ids) (if (null? Z1a40@p*) (values '() Z1a42@ids) (call-with-values (lambda () (Z19a1@cvt* (cdr Z1a40@p*) Z1a41@n Z1a42@ids)) (lambda (Z1a4a@Z1a47 Z1a4b@Z1a49) (let ((Z1a4e@ids Z1a4b@Z1a49) (Z1a4f@y Z1a4a@Z1a47)) (call-with-values (lambda () (Z19a3@cvt (car Z1a40@p*) Z1a41@n Z1a4e@ids)) (lambda (Z1a56@Z1a53 Z1a57@Z1a55) (let ((Z1a5a@ids Z1a57@Z1a55) (Z1a5b@x Z1a56@Z1a53)) (values (cons Z1a5b@x Z1a4f@y) Z1a5a@ids)))))))))) (Z19a3@cvt (lambda (Z19a4@p Z19a5@n Z19a6@ids) (let ((Z19aa@t Z19a4@p)) (let ((Z19ac@ls/false (Zd79@syntax-dispatch Z19aa@t 'any))) (if (and Z19ac@ls/false (apply (lambda (Z19ae@id) (Zb72@id? Z19ae@id)) Z19ac@ls/false)) (apply (lambda (Z19b0@id) (if (Zb7e@bound-id-member? Z19a4@p Z199d@keys) (values (vector 'free-id Z19a4@p) Z19a6@ids) (if (Zb78@free-id=? Z19a4@p (Zd01@scheme-stx '_)) (values '_ Z19a6@ids) (values 'any (cons (cons Z19a4@p Z19a5@n) Z19a6@ids))))) Z19ac@ls/false) (let ((Z19b2@t Z19aa@t)) (let ((Z19b4@ls/false (Zd79@syntax-dispatch Z19b2@t '(any any)))) (if (and Z19b4@ls/false (apply (lambda (Z19b6@p Z19b7@dots) (Zd7b@ellipsis? Z19b7@dots)) Z19b4@ls/false)) (apply (lambda (Z19ba@p Z19bb@dots) (call-with-values (lambda () (Z19a3@cvt Z19ba@p (+ Z19a5@n '1) Z19a6@ids)) (lambda (Z19c2@Z19bf Z19c3@Z19c1) (let ((Z19c6@ids Z19c3@Z19c1) (Z19c7@p Z19c2@Z19bf)) (values (if (eq? Z19c7@p 'any) 'each-any (vector 'each Z19c7@p)) Z19c6@ids))))) Z19b4@ls/false) (let ((Z19ca@t Z19b2@t)) (let ((Z19cc@ls/false (Zd79@syntax-dispatch Z19ca@t '(any any . #(each+ any () any))))) (if (and Z19cc@ls/false (apply (lambda (Z19ce@x Z19cf@dots Z19d0@ys Z19d1@z) (Zd7b@ellipsis? Z19cf@dots)) Z19cc@ls/false)) (apply (lambda (Z19d6@x Z19d7@dots Z19d8@ys Z19d9@z) (call-with-values (lambda () (Z19a3@cvt Z19d9@z Z19a5@n Z19a6@ids)) (lambda (Z19e2@Z19df Z19e3@Z19e1) (let ((Z19e6@ids Z19e3@Z19e1) (Z19e7@z Z19e2@Z19df)) (call-with-values (lambda () (Z19a1@cvt* Z19d8@ys Z19a5@n Z19e6@ids)) (lambda (Z19ee@Z19eb Z19ef@Z19ed) (let ((Z19f2@ids Z19ef@Z19ed) (Z19f3@ys Z19ee@Z19eb)) (call-with-values (lambda () (Z19a3@cvt Z19d6@x (+ Z19a5@n '1) Z19f2@ids)) (lambda (Z19fa@Z19f7 Z19fb@Z19f9) (let ((Z19fe@ids Z19fb@Z19f9) (Z19ff@x Z19fa@Z19f7)) (values (vector 'each+ Z19ff@x (reverse Z19f3@ys) Z19e7@z) Z19fe@ids))))))))))) Z19cc@ls/false) (let ((Z1a02@t Z19ca@t)) (let ((Z1a04@ls/false (Zd79@syntax-dispatch Z1a02@t '(any . any)))) (if Z1a04@ls/false (apply (lambda (Z1a06@x Z1a07@y) (call-with-values (lambda () (Z19a3@cvt Z1a07@y Z19a5@n Z19a6@ids)) (lambda (Z1a0e@Z1a0b Z1a0f@Z1a0d) (let ((Z1a12@ids Z1a0f@Z1a0d) (Z1a13@y Z1a0e@Z1a0b)) (call-with-values (lambda () (Z19a3@cvt Z1a06@x Z19a5@n Z1a12@ids)) (lambda (Z1a1a@Z1a17 Z1a1b@Z1a19) (let ((Z1a1e@ids Z1a1b@Z1a19) (Z1a1f@x Z1a1a@Z1a17)) (values (cons Z1a1f@x Z1a13@y) Z1a1e@ids)))))))) Z1a04@ls/false) (let ((Z1a22@t Z1a02@t)) (let ((Z1a24@ls/false (Zd79@syntax-dispatch Z1a22@t '()))) (if Z1a24@ls/false (apply (lambda () (values '() Z19a6@ids)) Z1a24@ls/false) (let ((Z1a26@t Z1a22@t)) (let ((Z1a28@ls/false (Zd79@syntax-dispatch Z1a26@t '#(vector each-any)))) (if (and Z1a28@ls/false (apply (lambda (Z1a2a@p) (not (Zb3e@stx? Z1a2a@p))) Z1a28@ls/false)) (apply (lambda (Z1a2c@p) (call-with-values (lambda () (Z19a3@cvt Z1a2c@p Z19a5@n Z19a6@ids)) (lambda (Z1a32@Z1a2f Z1a33@Z1a31) (let ((Z1a36@ids Z1a33@Z1a31) (Z1a37@p Z1a32@Z1a2f)) (values (vector 'vector Z1a37@p) Z1a36@ids))))) Z1a28@ls/false) (let ((Z1a3a@t Z1a26@t)) (let ((Z1a3c@ls/false (Zd79@syntax-dispatch Z1a3a@t 'any))) (if Z1a3c@ls/false (apply (lambda (Z1a3e@datum) (values (vector 'atom (Zb86@stx->datum Z1a3e@datum)) Z19a6@ids)) Z1a3c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1a3a@t))))))))))))))))))))))))) (Z19a3@cvt Z199c@pattern '0 '())))) (set! Z284e@Zd77@convert-pattern Zd77@convert-pattern) (set! Zd79@syntax-dispatch (letrec* ((Z1a5f@stx^ (lambda (Z1b3a@e Z1b3b@m* Z1b3c@s* Z1b3d@ae*) (if (and (null? Z1b3b@m*) (null? Z1b3c@s*) (null? Z1b3d@ae*)) Z1b3a@e (Zb5a@mkstx Z1b3a@e Z1b3b@m* Z1b3c@s* Z1b3d@ae*)))) (Z1a61@match-each (lambda (Z1b1a@e Z1b1b@p Z1b1c@m* Z1b1d@s* Z1b1e@ae*) (if (pair? Z1b1a@e) (let ((Z1b24@first (Z1a6d@match (car Z1b1a@e) Z1b1b@p Z1b1c@m* Z1b1d@s* Z1b1e@ae* '()))) (and Z1b24@first (let ((Z1b26@rest (Z1a61@match-each (cdr Z1b1a@e) Z1b1b@p Z1b1c@m* Z1b1d@s* Z1b1e@ae*))) (and Z1b26@rest (cons Z1b24@first Z1b26@rest))))) (if (null? Z1b1a@e) '() (if (Zb3e@stx? Z1b1a@e) (and (not (Zaf8@top-marked? Z1b1c@m*)) (call-with-values (lambda () (join-wraps Z1b1c@m* Z1b1d@s* Z1b1e@ae* Z1b1a@e)) (lambda (Z1b2e@Z1b29 Z1b2f@Z1b2b Z1b30@Z1b2d) (let ((Z1b34@ae* Z1b30@Z1b2d) (Z1b35@s* Z1b2f@Z1b2b) (Z1b36@m* Z1b2e@Z1b29)) (Z1a61@match-each (Zb40@stx-expr Z1b1a@e) Z1b1b@p Z1b36@m* Z1b35@s* Z1b34@ae*))))) (if (Z6b6@Z588@annotation? Z1b1a@e) (Z1a61@match-each (Z6b8@Z58c@annotation-expression Z1b1a@e) Z1b1b@p Z1b1c@m* Z1b1d@s* Z1b1e@ae*) '#f)))))) (Z1a63@match-each+ (lambda (Z1ada@e Z1adb@x-pat Z1adc@y-pat Z1add@z-pat Z1ade@m* Z1adf@s* Z1ae0@ae* Z1ae1@r) (let Z1af2@f ((Z1aea@e Z1ada@e) (Z1aeb@m* Z1ade@m*) (Z1aec@s* Z1adf@s*) (Z1aed@ae* Z1ae0@ae*)) (if (pair? Z1aea@e) (call-with-values (lambda () (Z1af2@f (cdr Z1aea@e) Z1aeb@m* Z1aec@s* Z1aed@ae*)) (lambda (Z1afa@Z1af5 Z1afb@Z1af7 Z1afc@Z1af9) (let ((Z1b00@r Z1afc@Z1af9) (Z1b01@y-pat Z1afb@Z1af7) (Z1b02@xr* Z1afa@Z1af5)) (if Z1b00@r (if (null? Z1b01@y-pat) (let ((Z1b06@xr (Z1a6d@match (car Z1aea@e) Z1adb@x-pat Z1aeb@m* Z1aec@s* Z1aed@ae* '()))) (if Z1b06@xr (values (cons Z1b06@xr Z1b02@xr*) Z1b01@y-pat Z1b00@r) (values '#f '#f '#f))) (values '() (cdr Z1b01@y-pat) (Z1a6d@match (car Z1aea@e) (car Z1b01@y-pat) Z1aeb@m* Z1aec@s* Z1aed@ae* Z1b00@r))) (values '#f '#f '#f))))) (if (Zb3e@stx? Z1aea@e) (if (Zaf8@top-marked? Z1aeb@m*) (values '() Z1adc@y-pat (Z1a6d@match Z1aea@e Z1add@z-pat Z1aeb@m* Z1aec@s* Z1aed@ae* Z1ae1@r)) (call-with-values (lambda () (join-wraps Z1aeb@m* Z1aec@s* Z1aed@ae* Z1aea@e)) (lambda (Z1b0e@Z1b09 Z1b0f@Z1b0b Z1b10@Z1b0d) (let ((Z1b14@ae* Z1b10@Z1b0d) (Z1b15@s* Z1b0f@Z1b0b) (Z1b16@m* Z1b0e@Z1b09)) (Z1af2@f (Zb40@stx-expr Z1aea@e) Z1b16@m* Z1b15@s* Z1b14@ae*))))) (if (Z6b6@Z588@annotation? Z1aea@e) (Z1af2@f (Z6b8@Z58c@annotation-expression Z1aea@e) Z1aeb@m* Z1aec@s* Z1aed@ae*) (values '() Z1adc@y-pat (Z1a6d@match Z1aea@e Z1add@z-pat Z1aeb@m* Z1aec@s* Z1aed@ae* Z1ae1@r)))))))) (Z1a65@match-each-any (lambda (Z1abe@e Z1abf@m* Z1ac0@s* Z1ac1@ae*) (if (pair? Z1abe@e) (let ((Z1ac6@l (Z1a65@match-each-any (cdr Z1abe@e) Z1abf@m* Z1ac0@s* Z1ac1@ae*))) (and Z1ac6@l (cons (Z1a5f@stx^ (car Z1abe@e) Z1abf@m* Z1ac0@s* Z1ac1@ae*) Z1ac6@l))) (if (null? Z1abe@e) '() (if (Zb3e@stx? Z1abe@e) (and (not (Zaf8@top-marked? Z1abf@m*)) (call-with-values (lambda () (join-wraps Z1abf@m* Z1ac0@s* Z1ac1@ae* Z1abe@e)) (lambda (Z1ace@Z1ac9 Z1acf@Z1acb Z1ad0@Z1acd) (let ((Z1ad4@ae* Z1ad0@Z1acd) (Z1ad5@s* Z1acf@Z1acb) (Z1ad6@m* Z1ace@Z1ac9)) (Z1a65@match-each-any (Zb40@stx-expr Z1abe@e) Z1ad6@m* Z1ad5@s* Z1ad4@ae*))))) (if (Z6b6@Z588@annotation? Z1abe@e) (Z1a65@match-each-any (Z6b8@Z58c@annotation-expression Z1abe@e) Z1abf@m* Z1ac0@s* Z1ac1@ae*) '#f)))))) (Z1a67@match-empty (lambda (Z1ab8@p Z1ab9@r) (if (null? Z1ab8@p) Z1ab9@r (if (eq? Z1ab8@p '_) Z1ab9@r (if (eq? Z1ab8@p 'any) (cons '() Z1ab9@r) (if (pair? Z1ab8@p) (Z1a67@match-empty (car Z1ab8@p) (Z1a67@match-empty (cdr Z1ab8@p) Z1ab9@r)) (if (eq? Z1ab8@p 'each-any) (cons '() Z1ab9@r) (let ((Z1abc@t (vector-ref Z1ab8@p '0))) (if (memv Z1abc@t '(each)) (Z1a67@match-empty (vector-ref Z1ab8@p '1) Z1ab9@r) (if (memv Z1abc@t '(each+)) (Z1a67@match-empty (vector-ref Z1ab8@p '1) (Z1a67@match-empty (reverse (vector-ref Z1ab8@p '2)) (Z1a67@match-empty (vector-ref Z1ab8@p '3) Z1ab9@r))) (if (memv Z1abc@t '(free-id atom)) Z1ab9@r (if (memv Z1abc@t '(scheme-id atom)) Z1ab9@r (if (memv Z1abc@t '(vector)) (Z1a67@match-empty (vector-ref Z1ab8@p '1) Z1ab9@r) (assertion-violation 'syntax-dispatch '"invalid pattern" Z1ab8@p)))))))))))))) (Z1a69@combine (lambda (Z1ab4@r* Z1ab5@r) (if (null? (car Z1ab4@r*)) Z1ab5@r (cons (map car Z1ab4@r*) (Z1a69@combine (map cdr Z1ab4@r*) Z1ab5@r))))) (Z1a6b@match* (lambda (Z1a90@e Z1a91@p Z1a92@m* Z1a93@s* Z1a94@ae* Z1a95@r) (if (null? Z1a91@p) (and (null? Z1a90@e) Z1a95@r) (if (pair? Z1a91@p) (and (pair? Z1a90@e) (Z1a6d@match (car Z1a90@e) (car Z1a91@p) Z1a92@m* Z1a93@s* Z1a94@ae* (Z1a6d@match (cdr Z1a90@e) (cdr Z1a91@p) Z1a92@m* Z1a93@s* Z1a94@ae* Z1a95@r))) (if (eq? Z1a91@p 'each-any) (let ((Z1a9c@l (Z1a65@match-each-any Z1a90@e Z1a92@m* Z1a93@s* Z1a94@ae*))) (and Z1a9c@l (cons Z1a9c@l Z1a95@r))) (let ((Z1a9e@t (vector-ref Z1a91@p '0))) (if (memv Z1a9e@t '(each)) (if (null? Z1a90@e) (Z1a67@match-empty (vector-ref Z1a91@p '1) Z1a95@r) (let ((Z1aa0@r* (Z1a61@match-each Z1a90@e (vector-ref Z1a91@p '1) Z1a92@m* Z1a93@s* Z1a94@ae*))) (and Z1aa0@r* (Z1a69@combine Z1aa0@r* Z1a95@r)))) (if (memv Z1a9e@t '(free-id)) (and (symbol? Z1a90@e) (Zaf8@top-marked? Z1a92@m*) (Zb78@free-id=? (Z1a5f@stx^ Z1a90@e Z1a92@m* Z1a93@s* Z1a94@ae*) (vector-ref Z1a91@p '1)) Z1a95@r) (if (memv Z1a9e@t '(scheme-id)) (and (symbol? Z1a90@e) (Zaf8@top-marked? Z1a92@m*) (Zb78@free-id=? (Z1a5f@stx^ Z1a90@e Z1a92@m* Z1a93@s* Z1a94@ae*) (Zd01@scheme-stx (vector-ref Z1a91@p '1))) Z1a95@r) (if (memv Z1a9e@t '(each+)) (call-with-values (lambda () (Z1a63@match-each+ Z1a90@e (vector-ref Z1a91@p '1) (vector-ref Z1a91@p '2) (vector-ref Z1a91@p '3) Z1a92@m* Z1a93@s* Z1a94@ae* Z1a95@r)) (lambda (Z1aa8@Z1aa3 Z1aa9@Z1aa5 Z1aaa@Z1aa7) (let ((Z1aae@r Z1aaa@Z1aa7) (Z1aaf@y-pat Z1aa9@Z1aa5) (Z1ab0@xr* Z1aa8@Z1aa3)) (and Z1aae@r (null? Z1aaf@y-pat) (if (null? Z1ab0@xr*) (Z1a67@match-empty (vector-ref Z1a91@p '1) Z1aae@r) (Z1a69@combine Z1ab0@xr* Z1aae@r)))))) (if (memv Z1a9e@t '(atom)) (and (fast-equal? (vector-ref Z1a91@p '1) (Zb84@strip Z1a90@e Z1a92@m*)) Z1a95@r) (if (memv Z1a9e@t '(vector)) (and (vector? Z1a90@e) (Z1a6d@match (vector->list Z1a90@e) (vector-ref Z1a91@p '1) Z1a92@m* Z1a93@s* Z1a94@ae* Z1a95@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" Z1a91@p))))))))))))) (Z1a6d@match (lambda (Z1a72@e Z1a73@p Z1a74@m* Z1a75@s* Z1a76@ae* Z1a77@r) (if (not Z1a77@r) '#f (if (eq? Z1a73@p '_) Z1a77@r (if (eq? Z1a73@p 'any) (cons (Z1a5f@stx^ Z1a72@e Z1a74@m* Z1a75@s* Z1a76@ae*) Z1a77@r) (if (Zb3e@stx? Z1a72@e) (and (not (Zaf8@top-marked? Z1a74@m*)) (call-with-values (lambda () (join-wraps Z1a74@m* Z1a75@s* Z1a76@ae* Z1a72@e)) (lambda (Z1a84@Z1a7f Z1a85@Z1a81 Z1a86@Z1a83) (let ((Z1a8a@ae* Z1a86@Z1a83) (Z1a8b@s* Z1a85@Z1a81) (Z1a8c@m* Z1a84@Z1a7f)) (Z1a6d@match (Zb40@stx-expr Z1a72@e) Z1a73@p Z1a8c@m* Z1a8b@s* Z1a8a@ae* Z1a77@r))))) (if (Z6b6@Z588@annotation? Z1a72@e) (Z1a6d@match (Z6b8@Z58c@annotation-expression Z1a72@e) Z1a73@p Z1a74@m* Z1a75@s* Z1a76@ae* Z1a77@r) (Z1a6b@match* Z1a72@e Z1a73@p Z1a74@m* Z1a75@s* Z1a76@ae* Z1a77@r))))))))) (lambda (Z1a6e@e Z1a6f@p) (Z1a6d@match Z1a6e@e Z1a6f@p '() '() '() '())))) (set! Z284f@Zd79@syntax-dispatch Zd79@syntax-dispatch) (set! Zd7b@ellipsis? (lambda (Z1b42@x) (and (Zb72@id? Z1b42@x) (Zb78@free-id=? Z1b42@x (Zd01@scheme-stx '...))))) (set! Z2850@Zd7b@ellipsis? Zd7b@ellipsis?) (set! Zd7d@underscore? (lambda (Z1b44@x) (and (Zb72@id? Z1b44@x) (Zb78@free-id=? Z1b44@x (Zd01@scheme-stx '_))))) (set! Z2851@Zd7d@underscore? Zd7d@underscore?) (set! Zd7f@verify-literals (lambda (Z1b46@lits Z1b47@expr) (for-each (lambda (Z1b4a@x) (if (or (not (Zb72@id? Z1b4a@x)) (Zd7b@ellipsis? Z1b4a@x) (Zd7d@underscore? Z1b4a@x)) (Ze59@syntax-violation '#f '"invalid literal" Z1b47@expr Z1b4a@x) (void))) Z1b46@lits))) (set! Z2852@Zd7f@verify-literals Zd7f@verify-literals) (set! Zd81@syntax-case-transformer (letrec* ((Z1b4d@build-dispatch-call (lambda (Z1bbe@pvars Z1bbf@expr Z1bc0@y Z1bc1@r Z1bc2@mr) (let ((Z1bc8@ids (map car Z1bbe@pvars)) (Z1bc9@levels (map cdr Z1bbe@pvars))) (let ((Z1bcc@labels (map Zafe@gen-label Z1bc8@ids)) (Z1bcd@new-vars (map Zafa@gen-lexical Z1bc8@ids))) (let ((Z1bd0@body (Zd9b@chi-expr (Zb5e@add-subst (Zb32@make-full-rib Z1bc8@ids Z1bcc@labels) Z1bbf@expr) (append (map (lambda (Z1bd2@label Z1bd3@var Z1bd4@level) (cons Z1bd2@label (Zb8c@make-binding 'syntax (cons Z1bd3@var Z1bd4@level)))) Z1bcc@labels Z1bcd@new-vars (map cdr Z1bbe@pvars)) Z1bc1@r) Z1bc2@mr))) (list '(primitive apply) (Zad5@Za07@build-lambda '#f Z1bcd@new-vars Z1bd0@body) Z1bc0@y)))))) (Z1b4f@invalid-ids-error (lambda (Z1bb2@id* Z1bb3@e Z1bb4@class) (let Z1bbc@find ((Z1bb8@id* Z1bb2@id*) (Z1bb9@ok* '())) (if (null? Z1bb8@id*) (Ze59@syntax-violation '#f '"invalid syntax" Z1bb3@e) (if (Zb72@id? (car Z1bb8@id*)) (if (Zb7e@bound-id-member? (car Z1bb8@id*) Z1bb9@ok*) (Ze55@syntax-error (car Z1bb8@id*) '"duplicate " Z1bb4@class) (Z1bbc@find (cdr Z1bb8@id*) (cons (car Z1bb8@id*) Z1bb9@ok*))) (Ze55@syntax-error (car Z1bb8@id*) '"invalid " Z1bb4@class)))))) (Z1b51@gen-clause (lambda (Z1b8a@x Z1b8b@keys Z1b8c@clauses Z1b8d@r Z1b8e@mr Z1b8f@pat Z1b90@fender Z1b91@expr) (call-with-values (lambda () (Zd77@convert-pattern Z1b8f@pat Z1b8b@keys)) (lambda (Z1b9e@Z1b9b Z1b9f@Z1b9d) (let ((Z1ba2@pvars Z1b9f@Z1b9d) (Z1ba3@p Z1b9e@Z1b9b)) (if (not (Zb7c@distinct-bound-ids? (map car Z1ba2@pvars))) (Z1b4f@invalid-ids-error (map car Z1ba2@pvars) Z1b8f@pat '"pattern variable") (if (not (for-all (lambda (Z1ba6@x) (not (Zd7b@ellipsis? (car Z1ba6@x)))) Z1ba2@pvars)) (Ze59@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" Z1b8f@pat) (let ((Z1ba8@y (Zafa@gen-lexical 'tmp))) (let ((Z1baa@test (if (eq? Z1b90@fender '#t) Z1ba8@y (let ((Z1bac@call (Z1b4d@build-dispatch-call Z1ba2@pvars Z1b90@fender Z1ba8@y Z1b8d@r Z1b8e@mr))) (list 'if Z1ba8@y Z1bac@call (list 'quote '#f)))))) (let ((Z1bae@conseq (Z1b4d@build-dispatch-call Z1ba2@pvars Z1b91@expr Z1ba8@y Z1b8d@r Z1b8e@mr))) (let ((Z1bb0@altern (Z1b53@gen-syntax-case Z1b8a@x Z1b8b@keys Z1b8c@clauses Z1b8d@r Z1b8e@mr))) (list (Zad5@Za07@build-lambda '#f (list Z1ba8@y) (list 'if Z1baa@test Z1bae@conseq Z1bb0@altern)) (list '(primitive syntax-dispatch) Z1b8a@x (list 'quote Z1ba3@p)))))))))))))) (Z1b53@gen-syntax-case (lambda (Z1b68@x Z1b69@keys Z1b6a@clauses Z1b6b@r Z1b6c@mr) (if (null? Z1b6a@clauses) (list '(primitive syntax-error) Z1b68@x) (let ((Z1b72@t (car Z1b6a@clauses))) (let ((Z1b74@ls/false (Zd79@syntax-dispatch Z1b72@t '(any any)))) (if Z1b74@ls/false (apply (lambda (Z1b76@pat Z1b77@expr) (if (and (Zb72@id? Z1b76@pat) (not (Zb7e@bound-id-member? Z1b76@pat Z1b69@keys)) (not (Zd7b@ellipsis? Z1b76@pat))) (if (Zb78@free-id=? Z1b76@pat (Zd01@scheme-stx '_)) (Zd9b@chi-expr Z1b77@expr Z1b6b@r Z1b6c@mr) (let ((Z1b7a@lab (Zafe@gen-label Z1b76@pat)) (Z1b7b@lex (Zafa@gen-lexical Z1b76@pat))) (let ((Z1b7e@body (Zd9b@chi-expr (Zb5e@add-subst (Zb32@make-full-rib (list Z1b76@pat) (list Z1b7a@lab)) Z1b77@expr) (cons (cons Z1b7a@lab (Zb8c@make-binding 'syntax (cons Z1b7b@lex '0))) Z1b6b@r) Z1b6c@mr))) (list (Zad5@Za07@build-lambda '#f (list Z1b7b@lex) Z1b7e@body) Z1b68@x)))) (Z1b51@gen-clause Z1b68@x Z1b69@keys (cdr Z1b6a@clauses) Z1b6b@r Z1b6c@mr Z1b76@pat '#t Z1b77@expr))) Z1b74@ls/false) (let ((Z1b80@t Z1b72@t)) (let ((Z1b82@ls/false (Zd79@syntax-dispatch Z1b80@t '(any any any)))) (if Z1b82@ls/false (apply (lambda (Z1b84@pat Z1b85@fender Z1b86@expr) (Z1b51@gen-clause Z1b68@x Z1b69@keys (cdr Z1b6a@clauses) Z1b6b@r Z1b6c@mr Z1b84@pat Z1b85@fender Z1b86@expr)) Z1b82@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1b80@t))))))))))) (lambda (Z1b54@e Z1b55@r Z1b56@mr) (let ((Z1b5a@t Z1b54@e)) (let ((Z1b5c@ls/false (Zd79@syntax-dispatch Z1b5a@t '(_ any each-any . each-any)))) (if Z1b5c@ls/false (apply (lambda (Z1b5e@expr Z1b5f@keys Z1b60@clauses) (begin (Zd7f@verify-literals Z1b5f@keys Z1b54@e) (let ((Z1b64@x (Zafa@gen-lexical 'tmp))) (let ((Z1b66@body (Z1b53@gen-syntax-case Z1b64@x Z1b5f@keys Z1b60@clauses Z1b55@r Z1b56@mr))) (list (Zad5@Za07@build-lambda '#f (list Z1b64@x) Z1b66@body) (Zd9b@chi-expr Z1b5e@expr Z1b55@r Z1b56@mr)))))) Z1b5c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1b5a@t))))))) (set! Z2853@Zd81@syntax-case-transformer Zd81@syntax-case-transformer) (set! Zd83@ellipsis-map (lambda (Z1bd8@proc Z1bd9@ls . Z1bdc@ls*) (letrec* ((Z1bdf@who '...)) (begin (if (not (list? Z1bd9@ls)) (assertion-violation Z1bdf@who '"not a list" Z1bd9@ls) (void)) (if (not (null? Z1bdc@ls*)) (let ((Z1be0@n (length Z1bd9@ls))) (for-each (lambda (Z1be2@x) (begin (if (not (list? Z1be2@x)) (assertion-violation Z1bdf@who '"not a list" Z1be2@x) (void)) (if (not (= (length Z1be2@x) Z1be0@n)) (assertion-violation Z1bdf@who '"length mismatch" Z1bd9@ls Z1be2@x) (void)))) Z1bdc@ls*)) (void)) (apply map Z1bd8@proc Z1bd9@ls Z1bdc@ls*))))) (set! Z2854@Zd83@ellipsis-map Zd83@ellipsis-map) (set! Zd85@syntax-transformer (letrec* ((Z1be5@gen-syntax (lambda (Z1c5c@src Z1c5d@e Z1c5e@r Z1c5f@maps Z1c60@ellipsis? Z1c61@vec?) (let ((Z1c68@t Z1c5d@e)) (let ((Z1c6a@ls/false (Zd79@syntax-dispatch Z1c68@t 'any))) (if (and Z1c6a@ls/false (apply (lambda (Z1c6c@dots) (Z1c60@ellipsis? Z1c6c@dots)) Z1c6a@ls/false)) (apply (lambda (Z1c6e@dots) (Ze59@syntax-violation '#f '"misplaced ellipsis in syntax form" Z1c5c@src)) Z1c6a@ls/false) (let ((Z1c70@t Z1c68@t)) (let ((Z1c72@ls/false (Zd79@syntax-dispatch Z1c70@t 'any))) (if (and Z1c72@ls/false (apply (lambda (Z1c74@id) (Zb72@id? Z1c74@id)) Z1c72@ls/false)) (apply (lambda (Z1c76@id) (let ((Z1c78@label (Zb88@id->label Z1c5d@e))) (let ((Z1c7a@b (Zb8a@label->binding Z1c78@label Z1c5e@r))) (if (eq? (Zb8e@binding-type Z1c7a@b) 'syntax) (call-with-values (lambda () (let ((Z1c80@var.lev (Zb90@binding-value Z1c7a@b))) (Z1be7@gen-ref Z1c5c@src (car Z1c80@var.lev) (cdr Z1c80@var.lev) Z1c5f@maps))) (lambda (Z1c82@Z1c7d Z1c83@Z1c7f) (let ((Z1c86@maps Z1c83@Z1c7f) (Z1c87@var Z1c82@Z1c7d)) (values (list 'ref Z1c87@var) Z1c86@maps)))) (values (list 'quote Z1c5d@e) Z1c5f@maps))))) Z1c72@ls/false) (let ((Z1c8a@t Z1c70@t)) (let ((Z1c8c@ls/false (Zd79@syntax-dispatch Z1c8a@t '(any any)))) (if (and Z1c8c@ls/false (apply (lambda (Z1c8e@dots Z1c8f@e) (Z1c60@ellipsis? Z1c8e@dots)) Z1c8c@ls/false)) (apply (lambda (Z1c92@dots Z1c93@e) (if Z1c61@vec? (Ze59@syntax-violation '#f '"misplaced ellipsis in syntax form" Z1c5c@src) (Z1be5@gen-syntax Z1c5c@src Z1c93@e Z1c5e@r Z1c5f@maps (lambda (Z1c96@x) '#f) '#f))) Z1c8c@ls/false) (let ((Z1c98@t Z1c8a@t)) (let ((Z1c9a@ls/false (Zd79@syntax-dispatch Z1c98@t '(any any . any)))) (if (and Z1c9a@ls/false (apply (lambda (Z1c9c@x Z1c9d@dots Z1c9e@y) (Z1c60@ellipsis? Z1c9d@dots)) Z1c9a@ls/false)) (apply (lambda (Z1ca2@x Z1ca3@dots Z1ca4@y) (let Z1cba@f ((Z1ca8@y Z1ca4@y) (Z1ca9@k (lambda (Z1cac@maps) (call-with-values (lambda () (Z1be5@gen-syntax Z1c5c@src Z1ca2@x Z1c5e@r (cons '() Z1cac@maps) Z1c60@ellipsis? '#f)) (lambda (Z1cb2@Z1caf Z1cb3@Z1cb1) (let ((Z1cb6@maps Z1cb3@Z1cb1) (Z1cb7@x Z1cb2@Z1caf)) (if (null? (car Z1cb6@maps)) (Ze59@syntax-violation '#f '"extra ellipsis in syntax form" Z1c5c@src) (values (Z1bed@gen-map Z1cb7@x (car Z1cb6@maps)) (cdr Z1cb6@maps))))))))) (let ((Z1cbc@t Z1ca8@y)) (let ((Z1cbe@ls/false (Zd79@syntax-dispatch Z1cbc@t '()))) (if Z1cbe@ls/false (apply (lambda () (Z1ca9@k Z1c5f@maps)) Z1cbe@ls/false) (let ((Z1cc0@t Z1cbc@t)) (let ((Z1cc2@ls/false (Zd79@syntax-dispatch Z1cc0@t '(any . any)))) (if (and Z1cc2@ls/false (apply (lambda (Z1cc4@dots Z1cc5@y) (Z1c60@ellipsis? Z1cc4@dots)) Z1cc2@ls/false)) (apply (lambda (Z1cc8@dots Z1cc9@y) (Z1cba@f Z1cc9@y (lambda (Z1ccc@maps) (call-with-values (lambda () (Z1ca9@k (cons '() Z1ccc@maps))) (lambda (Z1cd2@Z1ccf Z1cd3@Z1cd1) (let ((Z1cd6@maps Z1cd3@Z1cd1) (Z1cd7@x Z1cd2@Z1ccf)) (if (null? (car Z1cd6@maps)) (Ze59@syntax-violation '#f '"extra ellipsis in syntax form" Z1c5c@src) (values (Z1beb@gen-mappend Z1cd7@x (car Z1cd6@maps)) (cdr Z1cd6@maps))))))))) Z1cc2@ls/false) (let ((Z1cda@t Z1cc0@t)) (let ((Z1cdc@ls/false (Zd79@syntax-dispatch Z1cda@t '_))) (if Z1cdc@ls/false (apply (lambda () (call-with-values (lambda () (Z1be5@gen-syntax Z1c5c@src Z1ca8@y Z1c5e@r Z1c5f@maps Z1c60@ellipsis? Z1c61@vec?)) (lambda (Z1ce2@Z1cdf Z1ce3@Z1ce1) (let ((Z1ce6@maps Z1ce3@Z1ce1) (Z1ce7@y Z1ce2@Z1cdf)) (call-with-values (lambda () (Z1ca9@k Z1ce6@maps)) (lambda (Z1cee@Z1ceb Z1cef@Z1ced) (let ((Z1cf2@maps Z1cef@Z1ced) (Z1cf3@x Z1cee@Z1ceb)) (values (Z1be9@gen-append Z1cf3@x Z1ce7@y) Z1cf2@maps)))))))) Z1cdc@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1cda@t)))))))))))) Z1c9a@ls/false) (let ((Z1cf6@t Z1c98@t)) (let ((Z1cf8@ls/false (Zd79@syntax-dispatch Z1cf6@t '(any . any)))) (if Z1cf8@ls/false (apply (lambda (Z1cfa@x Z1cfb@y) (call-with-values (lambda () (Z1be5@gen-syntax Z1c5c@src Z1cfa@x Z1c5e@r Z1c5f@maps Z1c60@ellipsis? '#f)) (lambda (Z1d02@Z1cff Z1d03@Z1d01) (let ((Z1d06@maps Z1d03@Z1d01) (Z1d07@xnew Z1d02@Z1cff)) (call-with-values (lambda () (Z1be5@gen-syntax Z1c5c@src Z1cfb@y Z1c5e@r Z1d06@maps Z1c60@ellipsis? Z1c61@vec?)) (lambda (Z1d0e@Z1d0b Z1d0f@Z1d0d) (let ((Z1d12@maps Z1d0f@Z1d0d) (Z1d13@ynew Z1d0e@Z1d0b)) (values (Z1bef@gen-cons Z1c5d@e Z1cfa@x Z1cfb@y Z1d07@xnew Z1d13@ynew) Z1d12@maps)))))))) Z1cf8@ls/false) (let ((Z1d16@t Z1cf6@t)) (let ((Z1d18@ls/false (Zd79@syntax-dispatch Z1d16@t '#(vector each-any)))) (if Z1d18@ls/false (apply (lambda (Z1d1a@ls) (call-with-values (lambda () (Z1be5@gen-syntax Z1c5c@src Z1d1a@ls Z1c5e@r Z1c5f@maps Z1c60@ellipsis? '#t)) (lambda (Z1d20@Z1d1d Z1d21@Z1d1f) (let ((Z1d24@maps Z1d21@Z1d1f) (Z1d25@lsnew Z1d20@Z1d1d)) (values (Z1bf1@gen-vector Z1c5d@e Z1d1a@ls Z1d25@lsnew) Z1d24@maps))))) Z1d18@ls/false) (let ((Z1d28@t Z1d16@t)) (let ((Z1d2a@ls/false (Zd79@syntax-dispatch Z1d28@t '_))) (if Z1d2a@ls/false (apply (lambda () (values (list 'quote Z1c5d@e) Z1c5f@maps)) Z1d2a@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1d28@t)))))))))))))))))))))))) (Z1be7@gen-ref (lambda (Z1c42@src Z1c43@var Z1c44@level Z1c45@maps) (if (= Z1c44@level '0) (values Z1c43@var Z1c45@maps) (if (null? Z1c45@maps) (Ze59@syntax-violation '#f '"missing ellipsis in syntax form" Z1c42@src) (call-with-values (lambda () (Z1be7@gen-ref Z1c42@src Z1c43@var (- Z1c44@level '1) (cdr Z1c45@maps))) (lambda (Z1c4e@Z1c4b Z1c4f@Z1c4d) (let ((Z1c52@outer-maps Z1c4f@Z1c4d) (Z1c53@outer-var Z1c4e@Z1c4b)) (let ((Z1c56@t (assq Z1c53@outer-var (car Z1c45@maps)))) (if Z1c56@t ((lambda (Z1c58@b) (values (cdr Z1c58@b) Z1c45@maps)) Z1c56@t) (let ((Z1c5a@inner-var (Zafa@gen-lexical 'tmp))) (values Z1c5a@inner-var (cons (cons (cons Z1c53@outer-var Z1c5a@inner-var) (car Z1c45@maps)) Z1c52@outer-maps)))))))))))) (Z1be9@gen-append (lambda (Z1c3e@x Z1c3f@y) (if (fast-equal? Z1c3f@y ''()) Z1c3e@x (list 'append Z1c3e@x Z1c3f@y)))) (Z1beb@gen-mappend (lambda (Z1c3a@e Z1c3b@map-env) (list 'apply '(primitive append) (Z1bed@gen-map Z1c3a@e Z1c3b@map-env)))) (Z1bed@gen-map (lambda (Z1c28@e Z1c29@map-env) (let ((Z1c2c@formals (map cdr Z1c29@map-env)) (Z1c2d@actuals (map (lambda (Z1c30@x) (list 'ref (car Z1c30@x))) Z1c29@map-env))) (if (eq? (car Z1c28@e) 'ref) (car Z1c2d@actuals) (if (for-all (lambda (Z1c32@x) (and (eq? (car Z1c32@x) 'ref) (memq (cadr Z1c32@x) Z1c2c@formals))) (cdr Z1c28@e)) (let ((Z1c34@args (map (let ((Z1c36@r (map cons Z1c2c@formals Z1c2d@actuals))) (lambda (Z1c38@x) (cdr (assq (cadr Z1c38@x) Z1c36@r)))) (cdr Z1c28@e)))) (cons 'map (cons (list 'primitive (car Z1c28@e)) Z1c34@args))) (cons* 'map (list 'lambda Z1c2c@formals Z1c28@e) Z1c2d@actuals)))))) (Z1bef@gen-cons (lambda (Z1c18@e Z1c19@x Z1c1a@y Z1c1b@xnew Z1c1c@ynew) (let ((Z1c22@t (car Z1c1c@ynew))) (if (memv Z1c22@t '(quote)) (if (eq? (car Z1c1b@xnew) 'quote) (let ((Z1c24@xnew (cadr Z1c1b@xnew)) (Z1c25@ynew (cadr Z1c1c@ynew))) (if (and (eq? Z1c24@xnew Z1c19@x) (eq? Z1c25@ynew Z1c1a@y)) (list 'quote Z1c18@e) (list 'quote (cons Z1c24@xnew Z1c25@ynew)))) (if (null? (cadr Z1c1c@ynew)) (list 'list Z1c1b@xnew) (list 'cons Z1c1b@xnew Z1c1c@ynew))) (if (memv Z1c22@t '(list)) (cons 'list (cons Z1c1b@xnew (cdr Z1c1c@ynew))) (list 'cons Z1c1b@xnew Z1c1c@ynew)))))) (Z1bf1@gen-vector (lambda (Z1c12@e Z1c13@ls Z1c14@lsnew) (if (eq? (car Z1c14@lsnew) 'quote) (if (eq? (cadr Z1c14@lsnew) Z1c13@ls) (list 'quote Z1c12@e) (list 'quote (list->vector (cadr Z1c14@lsnew)))) (if (eq? (car Z1c14@lsnew) 'list) (cons 'vector (cdr Z1c14@lsnew)) (list 'list->vector Z1c14@lsnew))))) (Z1bf3@regen (lambda (Z1c0c@x) (let ((Z1c0e@t (car Z1c0c@x))) (if (memv Z1c0e@t '(ref)) (cadr Z1c0c@x) (if (memv Z1c0e@t '(primitive)) (list 'primitive (cadr Z1c0c@x)) (if (memv Z1c0e@t '(quote)) (list 'quote (cadr Z1c0c@x)) (if (memv Z1c0e@t '(lambda)) (Zad5@Za07@build-lambda '#f (cadr Z1c0c@x) (Z1bf3@regen (caddr Z1c0c@x))) (if (memv Z1c0e@t '(map)) (let ((Z1c10@ls (map Z1bf3@regen (cdr Z1c0c@x)))) (cons '(primitive ellipsis-map) Z1c10@ls)) (cons (list 'primitive (car Z1c0c@x)) (map Z1bf3@regen (cdr Z1c0c@x)))))))))))) (lambda (Z1bf4@e Z1bf5@r Z1bf6@mr) (let ((Z1bfa@t Z1bf4@e)) (let ((Z1bfc@ls/false (Zd79@syntax-dispatch Z1bfa@t '(_ any)))) (if Z1bfc@ls/false (apply (lambda (Z1bfe@x) (call-with-values (lambda () (Z1be5@gen-syntax Z1bf4@e Z1bfe@x Z1bf5@r '() Zd7b@ellipsis? '#f)) (lambda (Z1c04@Z1c01 Z1c05@Z1c03) (let ((Z1c08@maps Z1c05@Z1c03) (Z1c09@e Z1c04@Z1c01)) (Z1bf3@regen Z1c09@e))))) Z1bfc@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1bfa@t))))))) (set! Z2855@Zd85@syntax-transformer Zd85@syntax-transformer) (set! Zd87@core-macro-transformer (lambda (Z1d2c@name) (let ((Z1d2e@t Z1d2c@name)) (if (memv Z1d2e@t '(quote)) Zd29@quote-transformer (if (memv Z1d2e@t '(lambda)) Zd2d@lambda-transformer (if (memv Z1d2e@t '(case-lambda)) Zd2b@case-lambda-transformer (if (memv Z1d2e@t '(letrec)) Zd11@letrec-transformer (if (memv Z1d2e@t '(letrec*)) Zd13@letrec*-transformer (if (memv Z1d2e@t '(let)) Zd0f@let-transformer (if (memv Z1d2e@t '(if)) Zd21@if-transformer (if (memv Z1d2e@t '(and)) Zd23@and-transformer (if (memv Z1d2e@t '(or)) Zd25@or-transformer (if (memv Z1d2e@t '(foreign-call)) Zd75@foreign-call-transformer (if (memv Z1d2e@t '(syntax-case)) Zd81@syntax-case-transformer (if (memv Z1d2e@t '(syntax)) Zd85@syntax-transformer (if (memv Z1d2e@t '(type-descriptor)) Zd17@type-descriptor-transformer (if (memv Z1d2e@t '(record-type-descriptor)) Zd19@record-type-descriptor-transformer (if (memv Z1d2e@t '(record-constructor-descriptor)) Zd1b@record-constructor-descriptor-transformer (if (memv Z1d2e@t '(fluid-let-syntax)) Zd15@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" Z1d2c@name)))))))))))))))))))) (set! Z2856@Zd87@core-macro-transformer Zd87@core-macro-transformer) (set! Zd89@symbol-macro (lambda (Z1d30@x Z1d31@set) (let ((Z1d34@t Z1d30@x)) (let ((Z1d36@ls/false (Zd79@syntax-dispatch Z1d34@t '(_ any)))) (if (and Z1d36@ls/false (apply (lambda (Z1d38@name) (and (Zb72@id? Z1d38@name) (memq (Zb74@id->sym Z1d38@name) Z1d31@set))) Z1d36@ls/false)) (apply (lambda (Z1d3a@name) (Zd2f@bless (list 'quote Z1d3a@name))) Z1d36@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1d34@t)))))) (set! Z2857@Zd89@symbol-macro Zd89@symbol-macro) (set! Zd8b@macro-transformer (lambda (Z1d3c@x) (if (procedure? Z1d3c@x) Z1d3c@x (if (symbol? Z1d3c@x) (let ((Z1d3e@t Z1d3c@x)) (if (memv Z1d3e@t '(define-record-type)) Zd6d@define-record-type-macro (if (memv Z1d3e@t '(define-struct)) Zd6b@define-struct-macro (if (memv Z1d3e@t '(include)) Zd61@include-macro (if (memv Z1d3e@t '(cond)) Zd5d@cond-macro (if (memv Z1d3e@t '(let)) Zd35@let-macro (if (memv Z1d3e@t '(do)) Zd55@do-macro (if (memv Z1d3e@t '(or)) Zd59@or-macro (if (memv Z1d3e@t '(and)) Zd5b@and-macro (if (memv Z1d3e@t '(let*)) Zd57@let*-macro (if (memv Z1d3e@t '(let-values)) Zd37@let-values-macro (if (memv Z1d3e@t '(let*-values)) Zd39@let*-values-macro (if (memv Z1d3e@t '(syntax-rules)) Zd65@syntax-rules-macro (if (memv Z1d3e@t '(quasiquote)) Zd67@quasiquote-macro (if (memv Z1d3e@t '(quasisyntax)) Zd69@quasisyntax-macro (if (memv Z1d3e@t '(with-syntax)) Zd31@with-syntax-macro (if (memv Z1d3e@t '(when)) Zd1d@when-macro (if (memv Z1d3e@t '(unless)) Zd1f@unless-macro (if (memv Z1d3e@t '(case)) Zd27@case-macro (if (memv Z1d3e@t '(identifier-syntax)) Zd53@identifier-syntax-macro (if (memv Z1d3e@t '(time)) Zd4b@time-macro (if (memv Z1d3e@t '(delay)) Zd4d@delay-macro (if (memv Z1d3e@t '(assert)) Zd4f@assert-macro (if (memv Z1d3e@t '(endianness)) Zd51@endianness-macro (if (memv Z1d3e@t '(guard)) Zd47@guard-macro (if (memv Z1d3e@t '(define-enumeration)) Zd49@define-enumeration-macro (if (memv Z1d3e@t '(trace-lambda)) Zd3b@trace-lambda-macro (if (memv Z1d3e@t '(trace-define)) Zd3d@trace-define-macro (if (memv Z1d3e@t '(trace-define-syntax)) Zd3f@trace-define-syntax-macro (if (memv Z1d3e@t '(trace-let-syntax)) Zd43@trace-let-syntax-macro (if (memv Z1d3e@t '(trace-letrec-syntax)) Zd45@trace-letrec-syntax-macro (if (memv Z1d3e@t '(define-condition-type)) Zd6f@define-condition-type-macro (if (memv Z1d3e@t '(parameterize)) Zd73@parameterize-macro (if (memv Z1d3e@t '(include-into)) Zd63@include-into-macro (if (memv Z1d3e@t '(eol-style)) (lambda (Z1d40@x) (Zd89@symbol-macro Z1d40@x '(none lf cr crlf nel crnel ls))) (if (memv Z1d3e@t '(error-handling-mode)) (lambda (Z1d42@x) (Zd89@symbol-macro Z1d42@x '(ignore raise replace))) (if (memv Z1d3e@t '(buffer-mode)) (lambda (Z1d44@x) (Zd89@symbol-macro Z1d44@x '(none line block))) (if (memv Z1d3e@t '(file-options)) Zaed@file-options-macro (if (memv Z1d3e@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) Zd71@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" Z1d3c@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" Z1d3c@x))))) (set! Z2858@Zd8b@macro-transformer Zd8b@macro-transformer) (set! Zd8d@local-macro-transformer (lambda (Z1d46@x) (car Z1d46@x))) (set! Z2859@Zd8d@local-macro-transformer Zd8d@local-macro-transformer) (set! Zd8f@do-macro-call (lambda (Z1d48@transformer Z1d49@expr) (let ((Z1d4c@out (Z1d48@transformer (Zb5c@add-mark Zb56@anti-mark Z1d49@expr '#f)))) (begin (let Z1d50@f ((Z1d4e@x Z1d4c@out)) (if (not (Zb3e@stx? Z1d4e@x)) (if (pair? Z1d4e@x) (begin (Z1d50@f (car Z1d4e@x)) (Z1d50@f (cdr Z1d4e@x))) (if (vector? Z1d4e@x) (vector-for-each Z1d50@f Z1d4e@x) (if (symbol? Z1d4e@x) (Ze59@syntax-violation '#f '"raw symbol encountered in output of macro" Z1d49@expr Z1d4e@x) (void)))) (void))) (Zb5c@add-mark (Zb54@gen-mark) Z1d4c@out Z1d49@expr))))) (set! Z285a@Zd8f@do-macro-call Zd8f@do-macro-call) (set! Zd91@chi-macro (lambda (Z1d52@p Z1d53@e) (Zd8f@do-macro-call (Zd8b@macro-transformer Z1d52@p) Z1d53@e))) (set! Z285b@Zd91@chi-macro Zd91@chi-macro) (set! Zd93@chi-local-macro (lambda (Z1d56@p Z1d57@e) (Zd8f@do-macro-call (Zd8d@local-macro-transformer Z1d56@p) Z1d57@e))) (set! Z285c@Zd93@chi-local-macro Zd93@chi-local-macro) (set! Zd95@chi-global-macro (lambda (Z1d5a@p Z1d5b@e) (let ((Z1d5e@lib (car Z1d5a@p)) (Z1d5f@loc (cdr Z1d5a@p))) (begin (Z98f@Z7de@visit-library Z1d5e@lib) (let ((Z1d62@x (symbol-value Z1d5f@loc))) (let ((Z1d64@transformer (if (procedure? Z1d62@x) Z1d62@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" Z1d62@x)))) (Zd8f@do-macro-call Z1d64@transformer Z1d5b@e))))))) (set! Z285d@Zd95@chi-global-macro Zd95@chi-global-macro) (set! Zd97@chi-expr* (lambda (Z1d66@e* Z1d67@r Z1d68@mr) (if (null? Z1d66@e*) '() (let ((Z1d6c@e (Zd9b@chi-expr (car Z1d66@e*) Z1d67@r Z1d68@mr))) (cons Z1d6c@e (Zd97@chi-expr* (cdr Z1d66@e*) Z1d67@r Z1d68@mr)))))) (set! Z285e@Zd97@chi-expr* Zd97@chi-expr*) (set! Zd99@chi-application (lambda (Z1d6e@e Z1d6f@r Z1d70@mr) (let ((Z1d74@t Z1d6e@e)) (let ((Z1d76@ls/false (Zd79@syntax-dispatch Z1d74@t '(any . each-any)))) (if Z1d76@ls/false (apply (lambda (Z1d78@rator Z1d79@rands) (let ((Z1d7c@rator (Zd9b@chi-expr Z1d78@rator Z1d6f@r Z1d70@mr))) (cons Z1d7c@rator (Zd97@chi-expr* Z1d79@rands Z1d6f@r Z1d70@mr)))) Z1d76@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1d74@t)))))) (set! Z285f@Zd99@chi-application Zd99@chi-application) (set! Zd9b@chi-expr (lambda (Z1d7e@e Z1d7f@r Z1d80@mr) (call-with-values (lambda () (Zb94@syntax-type Z1d7e@e Z1d7f@r)) (lambda (Z1d8a@Z1d85 Z1d8b@Z1d87 Z1d8c@Z1d89) (let ((Z1d90@kwd Z1d8c@Z1d89) (Z1d91@value Z1d8b@Z1d87) (Z1d92@type Z1d8a@Z1d85)) (let ((Z1d96@t Z1d92@type)) (if (memv Z1d96@t '(core-macro)) (let ((Z1d98@transformer (Zd87@core-macro-transformer Z1d91@value))) (Z1d98@transformer Z1d7e@e Z1d7f@r Z1d80@mr)) (if (memv Z1d96@t '(global)) (let ((Z1d9a@lib (car Z1d91@value))) (let ((Z1d9c@loc (cdr Z1d91@value))) (begin ((Zde1@inv-collector) Z1d9a@lib) Z1d9c@loc))) (if (memv Z1d96@t '(core-prim)) (let ((Z1d9e@name Z1d91@value)) (list 'primitive Z1d9e@name)) (if (memv Z1d96@t '(call)) (Zd99@chi-application Z1d7e@e Z1d7f@r Z1d80@mr) (if (memv Z1d96@t '(lexical)) (let ((Z1da0@lex (Zd03@lexical-var Z1d91@value))) Z1da0@lex) (if (memv Z1d96@t '(global-macro global-macro!)) (Zd9b@chi-expr (Zd95@chi-global-macro Z1d91@value Z1d7e@e) Z1d7f@r Z1d80@mr) (if (memv Z1d96@t '(local-macro local-macro!)) (Zd9b@chi-expr (Zd93@chi-local-macro Z1d91@value Z1d7e@e) Z1d7f@r Z1d80@mr) (if (memv Z1d96@t '(macro macro!)) (Zd9b@chi-expr (Zd91@chi-macro Z1d91@value Z1d7e@e) Z1d7f@r Z1d80@mr) (if (memv Z1d96@t '(constant)) (let ((Z1da2@datum Z1d91@value)) (list 'quote Z1da2@datum)) (if (memv Z1d96@t '(set!)) (Zd9d@chi-set! Z1d7e@e Z1d7f@r Z1d80@mr) (if (memv Z1d96@t '(begin)) (let ((Z1da4@t Z1d7e@e)) (let ((Z1da6@ls/false (Zd79@syntax-dispatch Z1da4@t '(_ any . each-any)))) (if Z1da6@ls/false (apply (lambda (Z1da8@x Z1da9@x*) (Zad7@Za37@build-sequence '#f (Zd97@chi-expr* (cons Z1da8@x Z1da9@x*) Z1d7f@r Z1d80@mr))) Z1da6@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1da4@t)))) (if (memv Z1d96@t '(let-syntax letrec-syntax)) (let ((Z1dac@t Z1d7e@e)) (let ((Z1dae@ls/false (Zd79@syntax-dispatch Z1dac@t '(_ #(each (any any)) any . each-any)))) (if (and Z1dae@ls/false (apply (lambda (Z1db0@xlhs* Z1db1@xrhs* Z1db2@xbody Z1db3@xbody*) (if (not (Zb7a@valid-bound-ids? Z1db0@xlhs*)) (Ze59@syntax-violation '#f '"invalid identifiers" Z1d7e@e) (void))) Z1dae@ls/false)) (apply (lambda (Z1db8@xlhs* Z1db9@xrhs* Z1dba@xbody Z1dbb@xbody*) (let ((Z1dc0@xlab* (map Zafe@gen-label Z1db8@xlhs*))) (let ((Z1dc2@xrib (Zb32@make-full-rib Z1db8@xlhs* Z1dc0@xlab*))) (let ((Z1dc4@xb* (map (lambda (Z1dc6@x) (Zbaa@make-eval-transformer (Zdd3@expand-transformer (if (eq? Z1d92@type 'let-syntax) Z1dc6@x (Zb5e@add-subst Z1dc2@xrib Z1dc6@x)) Z1d80@mr))) Z1db9@xrhs*))) (Zad7@Za37@build-sequence '#f (Zd97@chi-expr* (map (lambda (Z1dc8@x) (Zb5e@add-subst Z1dc2@xrib Z1dc8@x)) (cons Z1dba@xbody Z1dbb@xbody*)) (append (map cons Z1dc0@xlab* Z1dc4@xb*) Z1d7f@r) (append (map cons Z1dc0@xlab* Z1dc4@xb*) Z1d80@mr))))))) Z1dae@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1dac@t)))) (if (memv Z1d96@t '(displaced-lexical)) (Ze59@syntax-violation '#f '"identifier out of context" Z1d7e@e) (if (memv Z1d96@t '(syntax)) (Ze59@syntax-violation '#f '"reference to pattern variable outside a syntax form" Z1d7e@e) (if (memv Z1d96@t '(define define-syntax module import library)) (Ze59@syntax-violation '#f (string-append (let ((Z1dca@t Z1d92@type)) (if (memv Z1dca@t '(define)) '"a definition" (if (memv Z1dca@t '(define-syntax)) '"a define-syntax" (if (memv Z1dca@t '(module)) '"a module definition" (if (memv Z1dca@t '(library)) '"a library definition" (if (memv Z1dca@t '(import)) '"an import declaration" (if (memv Z1dca@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") Z1d7e@e) (if (memv Z1d96@t '(mutable)) (Ze59@syntax-violation '#f '"attempt to reference an unexportable variable" Z1d7e@e) (Ze59@syntax-violation '#f '"invalid expression" Z1d7e@e))))))))))))))))))))))) (set! Z2860@Zd9b@chi-expr Zd9b@chi-expr) (set! Zd9d@chi-set! (lambda (Z1dcc@e Z1dcd@r Z1dce@mr) (let ((Z1dd2@t Z1dcc@e)) (let ((Z1dd4@ls/false (Zd79@syntax-dispatch Z1dd2@t '(_ any any)))) (if (and Z1dd4@ls/false (apply (lambda (Z1dd6@x Z1dd7@v) (Zb72@id? Z1dd6@x)) Z1dd4@ls/false)) (apply (lambda (Z1dda@x Z1ddb@v) (call-with-values (lambda () (Zb94@syntax-type Z1dda@x Z1dcd@r)) (lambda (Z1de4@Z1ddf Z1de5@Z1de1 Z1de6@Z1de3) (let ((Z1dea@kwd Z1de6@Z1de3) (Z1deb@value Z1de5@Z1de1) (Z1dec@type Z1de4@Z1ddf)) (let ((Z1df0@t Z1dec@type)) (if (memv Z1df0@t '(lexical)) (begin (Zd07@set-lexical-mutable! Z1deb@value '#t) (list 'set! (Zd03@lexical-var Z1deb@value) (Zd9b@chi-expr Z1ddb@v Z1dcd@r Z1dce@mr))) (if (memv Z1df0@t '(core-prim)) (Ze59@syntax-violation '#f '"cannot modify imported core primitive" Z1dcc@e) (if (memv Z1df0@t '(global)) (Ze59@syntax-violation '#f '"attempt to modify imported binding" Z1dcc@e) (if (memv Z1df0@t '(global-macro!)) (Zd9b@chi-expr (Zd95@chi-global-macro Z1deb@value Z1dcc@e) Z1dcd@r Z1dce@mr) (if (memv Z1df0@t '(local-macro!)) (Zd9b@chi-expr (Zd93@chi-local-macro Z1deb@value Z1dcc@e) Z1dcd@r Z1dce@mr) (if (memv Z1df0@t '(mutable)) (Ze59@syntax-violation '#f '"attempt to assign to an unexportable variable" Z1dcc@e) (Ze59@syntax-violation '#f '"invalid syntax" Z1dcc@e)))))))))))) Z1dd4@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1dd2@t)))))) (set! Z2861@Zd9d@chi-set! Zd9d@chi-set!) (set! Zd9f@verify-formals (lambda (Z1df2@fmls Z1df3@stx) (let ((Z1df6@t Z1df2@fmls)) (let ((Z1df8@ls/false (Zd79@syntax-dispatch Z1df6@t 'each-any))) (if Z1df8@ls/false (apply (lambda (Z1dfa@x*) (if (not (Zb7a@valid-bound-ids? Z1dfa@x*)) (Zd33@invalid-fmls-error Z1df3@stx Z1df2@fmls) (void))) Z1df8@ls/false) (let ((Z1dfc@t Z1df6@t)) (let ((Z1dfe@ls/false (Zd79@syntax-dispatch Z1dfc@t '#(each+ any () any)))) (if Z1dfe@ls/false (apply (lambda (Z1e00@x* Z1e01@x) (if (not (Zb7a@valid-bound-ids? (cons Z1e01@x Z1e00@x*))) (Zd33@invalid-fmls-error Z1df3@stx Z1df2@fmls) (void))) Z1dfe@ls/false) (let ((Z1e04@t Z1dfc@t)) (let ((Z1e06@ls/false (Zd79@syntax-dispatch Z1e04@t '_))) (if Z1e06@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid syntax" Z1df3@stx)) Z1e06@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1e04@t)))))))))))) (set! Z2862@Zd9f@verify-formals Zd9f@verify-formals) (set! Zda1@chi-lambda-clause (lambda (Z1e08@stx Z1e09@fmls Z1e0a@body* Z1e0b@r Z1e0c@mr) (let ((Z1e12@t Z1e09@fmls)) (let ((Z1e14@ls/false (Zd79@syntax-dispatch Z1e12@t 'each-any))) (if Z1e14@ls/false (apply (lambda (Z1e16@x*) (begin (Zd9f@verify-formals Z1e09@fmls Z1e08@stx) (let ((Z1e18@lex* (map Zafa@gen-lexical Z1e16@x*)) (Z1e19@lab* (map Zafe@gen-label Z1e16@x*))) (values Z1e18@lex* (Zdb1@chi-internal (Zb5e@add-subst (Zb32@make-full-rib Z1e16@x* Z1e19@lab*) Z1e0a@body*) (Zd0b@add-lexicals Z1e19@lab* Z1e18@lex* Z1e0b@r) Z1e0c@mr))))) Z1e14@ls/false) (let ((Z1e1c@t Z1e12@t)) (let ((Z1e1e@ls/false (Zd79@syntax-dispatch Z1e1c@t '#(each+ any () any)))) (if Z1e1e@ls/false (apply (lambda (Z1e20@x* Z1e21@x) (begin (Zd9f@verify-formals Z1e09@fmls Z1e08@stx) (let ((Z1e24@lex* (map Zafa@gen-lexical Z1e20@x*)) (Z1e25@lab* (map Zafe@gen-label Z1e20@x*)) (Z1e26@lex (Zafa@gen-lexical Z1e21@x)) (Z1e27@lab (Zafe@gen-label Z1e21@x))) (values (append Z1e24@lex* Z1e26@lex) (Zdb1@chi-internal (Zb5e@add-subst (Zb32@make-full-rib (cons Z1e21@x Z1e20@x*) (cons Z1e27@lab Z1e25@lab*)) Z1e0a@body*) (Zd0b@add-lexicals (cons Z1e27@lab Z1e25@lab*) (cons Z1e26@lex Z1e24@lex*) Z1e0b@r) Z1e0c@mr))))) Z1e1e@ls/false) (let ((Z1e2c@t Z1e1c@t)) (let ((Z1e2e@ls/false (Zd79@syntax-dispatch Z1e2c@t '_))) (if Z1e2e@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid syntax" Z1e09@fmls)) Z1e2e@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1e2c@t)))))))))))) (set! Z2863@Zda1@chi-lambda-clause Zda1@chi-lambda-clause) (set! Zda3@chi-lambda-clause* (lambda (Z1e30@stx Z1e31@fmls* Z1e32@body** Z1e33@r Z1e34@mr) (if (null? Z1e31@fmls*) (values '() '()) (call-with-values (lambda () (Zda1@chi-lambda-clause Z1e30@stx (car Z1e31@fmls*) (car Z1e32@body**) Z1e33@r Z1e34@mr)) (lambda (Z1e3e@Z1e3b Z1e3f@Z1e3d) (let ((Z1e42@b Z1e3f@Z1e3d) (Z1e43@a Z1e3e@Z1e3b)) (call-with-values (lambda () (Zda3@chi-lambda-clause* Z1e30@stx (cdr Z1e31@fmls*) (cdr Z1e32@body**) Z1e33@r Z1e34@mr)) (lambda (Z1e4a@Z1e47 Z1e4b@Z1e49) (let ((Z1e4e@b* Z1e4b@Z1e49) (Z1e4f@a* Z1e4a@Z1e47)) (values (cons Z1e43@a Z1e4f@a*) (cons Z1e42@b Z1e4e@b*))))))))))) (set! Z2864@Zda3@chi-lambda-clause* Zda3@chi-lambda-clause*) (set! Zda5@chi-defun (lambda (Z1e52@x Z1e53@r Z1e54@mr) (let ((Z1e58@fmls (car Z1e52@x)) (Z1e59@body* (cdr Z1e52@x))) (call-with-values (lambda () (Zda1@chi-lambda-clause Z1e58@fmls Z1e58@fmls Z1e59@body* Z1e53@r Z1e54@mr)) (lambda (Z1e60@Z1e5d Z1e61@Z1e5f) (let ((Z1e64@body Z1e61@Z1e5f) (Z1e65@fmls Z1e60@Z1e5d)) (Zad5@Za07@build-lambda '#f Z1e65@fmls Z1e64@body))))))) (set! Z2865@Zda5@chi-defun Zda5@chi-defun) (set! Zda7@chi-rhs (lambda (Z1e68@rhs Z1e69@r Z1e6a@mr) (let ((Z1e6e@t (car Z1e68@rhs))) (if (memv Z1e6e@t '(defun)) (Zda5@chi-defun (cdr Z1e68@rhs) Z1e69@r Z1e6a@mr) (if (memv Z1e6e@t '(expr)) (let ((Z1e70@expr (cdr Z1e68@rhs))) (Zd9b@chi-expr Z1e70@expr Z1e69@r Z1e6a@mr)) (if (memv Z1e6e@t '(top-expr)) (let ((Z1e72@expr (cdr Z1e68@rhs))) (Zad7@Za37@build-sequence '#f (list (Zd9b@chi-expr Z1e72@expr Z1e69@r Z1e6a@mr) (Zad8@Za39@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" Z1e68@rhs))))))) (set! Z2866@Zda7@chi-rhs Zda7@chi-rhs) (set! Zda9@expand-interaction-rhs*/init* (lambda (Z1e74@lhs* Z1e75@rhs* Z1e76@init* Z1e77@r Z1e78@mr) (let Z1e82@f ((Z1e7e@lhs* Z1e74@lhs*) (Z1e7f@rhs* Z1e75@rhs*)) (if (null? Z1e7e@lhs*) (map (lambda (Z1e84@x) (Zd9b@chi-expr Z1e84@x Z1e77@r Z1e78@mr)) Z1e76@init*) (let ((Z1e86@lhs (car Z1e7e@lhs*)) (Z1e87@rhs (car Z1e7f@rhs*))) (let ((Z1e8a@t (car Z1e87@rhs))) (if (memv Z1e8a@t '(defun)) (let ((Z1e8c@rhs (Zda5@chi-defun (cdr Z1e87@rhs) Z1e77@r Z1e78@mr))) (cons (list 'set! Z1e86@lhs Z1e8c@rhs) (Z1e82@f (cdr Z1e7e@lhs*) (cdr Z1e7f@rhs*)))) (if (memv Z1e8a@t '(expr)) (let ((Z1e8e@rhs (Zd9b@chi-expr (cdr Z1e87@rhs) Z1e77@r Z1e78@mr))) (cons (list 'set! Z1e86@lhs Z1e8e@rhs) (Z1e82@f (cdr Z1e7e@lhs*) (cdr Z1e7f@rhs*)))) (if (memv Z1e8a@t '(top-expr)) (let ((Z1e90@e (Zd9b@chi-expr (cdr Z1e87@rhs) Z1e77@r Z1e78@mr))) (cons Z1e90@e (Z1e82@f (cdr Z1e7e@lhs*) (cdr Z1e7f@rhs*)))) (error 'expand-interaction '"invallid" Z1e87@rhs)))))))))) (set! Z2867@Zda9@expand-interaction-rhs*/init* Zda9@expand-interaction-rhs*/init*) (set! Zdab@chi-rhs* (lambda (Z1e92@rhs* Z1e93@r Z1e94@mr) (let Z1e9a@f ((Z1e98@ls Z1e92@rhs*)) (if (null? Z1e98@ls) '() (let ((Z1e9c@a (Zda7@chi-rhs (car Z1e98@ls) Z1e93@r Z1e94@mr))) (cons Z1e9c@a (Z1e9a@f (cdr Z1e98@ls)))))))) (set! Z2868@Zdab@chi-rhs* Zdab@chi-rhs*) (set! Zdad@find-bound=? (lambda (Z1e9e@x Z1e9f@lhs* Z1ea0@rhs*) (if (null? Z1e9f@lhs*) '#f (if (Zb76@bound-id=? Z1e9e@x (car Z1e9f@lhs*)) (car Z1ea0@rhs*) (Zdad@find-bound=? Z1e9e@x (cdr Z1e9f@lhs*) (cdr Z1ea0@rhs*)))))) (set! Z2869@Zdad@find-bound=? Zdad@find-bound=?) (set! Zdaf@find-dups (lambda (Z1ea4@ls) (let Z1eaa@f ((Z1ea6@ls Z1ea4@ls) (Z1ea7@dups '())) (if (null? Z1ea6@ls) Z1ea7@dups (let ((Z1eac@t (Zdad@find-bound=? (car Z1ea6@ls) (cdr Z1ea6@ls) (cdr Z1ea6@ls)))) (if Z1eac@t ((lambda (Z1eae@x) (Z1eaa@f (cdr Z1ea6@ls) (cons (list (car Z1ea6@ls) Z1eae@x) Z1ea7@dups))) Z1eac@t) (Z1eaa@f (cdr Z1ea6@ls) Z1ea7@dups))))))) (set! Z286a@Zdaf@find-dups Zdaf@find-dups) (set! Zdb1@chi-internal (lambda (Z1eb0@e* Z1eb1@r Z1eb2@mr) (let ((Z1eb6@rib (Zb26@make-empty-rib))) (call-with-values (lambda () (Zdd1@chi-body* (map (lambda (Z1ec8@x) (Zb5e@add-subst Z1eb6@rib Z1ec8@x)) (Zb70@syntax->list Z1eb0@e*)) Z1eb1@r Z1eb2@mr '() '() '() '() '() Z1eb6@rib '#f)) (lambda (Z1eca@Z1eb9 Z1ecb@Z1ebb Z1ecc@Z1ebd Z1ecd@Z1ebf Z1ece@Z1ec1 Z1ecf@Z1ec3 Z1ed0@Z1ec5 Z1ed1@Z1ec7) (let ((Z1eda@_exp* Z1ed1@Z1ec7) (Z1edb@kwd* Z1ed0@Z1ec5) (Z1edc@mod** Z1ecf@Z1ec3) (Z1edd@rhs* Z1ece@Z1ec1) (Z1ede@lex* Z1ecd@Z1ebf) (Z1edf@mr Z1ecc@Z1ebd) (Z1ee0@r Z1ecb@Z1ebb) (Z1ee1@e* Z1eca@Z1eb9)) (begin (if (null? Z1ee1@e*) (Ze59@syntax-violation '#f '"no expression in body" Z1ee1@e*) (void)) (let ((Z1eea@init* (Zd97@chi-expr* (append (apply append (reverse Z1edc@mod**)) Z1ee1@e*) Z1ee0@r Z1edf@mr))) (let ((Z1eec@rhs* (Zdab@chi-rhs* Z1edd@rhs* Z1ee0@r Z1edf@mr))) (Zadc@Za41@build-letrec* '#f (reverse Z1ede@lex*) (reverse Z1eec@rhs*) (Zad7@Za37@build-sequence '#f Z1eea@init*))))))))))) (set! Z286b@Zdb1@chi-internal Zdb1@chi-internal) (set! Zdb3@parse-module (lambda (Z1eee@e) (let ((Z1ef0@t Z1eee@e)) (let ((Z1ef2@ls/false (Zd79@syntax-dispatch Z1ef0@t '(_ each-any . each-any)))) (if Z1ef2@ls/false (apply (lambda (Z1ef4@export* Z1ef5@b*) (begin (if (not (for-all Zb72@id? Z1ef4@export*)) (Ze59@syntax-violation '#f '"module exports must be identifiers" Z1eee@e) (void)) (values '#f (list->vector Z1ef4@export*) Z1ef5@b*))) Z1ef2@ls/false) (let ((Z1ef8@t Z1ef0@t)) (let ((Z1efa@ls/false (Zd79@syntax-dispatch Z1ef8@t '(_ any each-any . each-any)))) (if Z1efa@ls/false (apply (lambda (Z1efc@name Z1efd@export* Z1efe@b*) (begin (if (not (Zb72@id? Z1efc@name)) (Ze59@syntax-violation '#f '"module name must be an identifier" Z1eee@e) (void)) (if (not (for-all Zb72@id? Z1efd@export*)) (Ze59@syntax-violation '#f '"module exports must be identifiers" Z1eee@e) (void)) (values Z1efc@name (list->vector Z1efd@export*) Z1efe@b*))) Z1efa@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1ef8@t))))))))) (set! Z286c@Zdb3@parse-module Zdb3@parse-module) (set! Zdbd@module-interface? (lambda (Z1f02@x) (and (simple-struct? Z1f02@x) (eq? (simple-struct-name Z1f02@x) 'module-interface)))) (set! Z286d@Zdbd@module-interface? Zdbd@module-interface?) (set! Zdbf@module-interface-first-mark (lambda (Z1f04@x) (simple-struct-ref Z1f04@x '0))) (set! Z286e@Zdbf@module-interface-first-mark Zdbf@module-interface-first-mark) (set! Zdc1@set-module-interface-first-mark! (lambda (Z1f06@x Z1f07@val) (simple-struct-set! Z1f06@x '0 Z1f07@val))) (set! Z286f@Zdc1@set-module-interface-first-mark! Zdc1@set-module-interface-first-mark!) (set! Zdc3@module-interface-exp-id-vec (lambda (Z1f0a@x) (simple-struct-ref Z1f0a@x '1))) (set! Z2870@Zdc3@module-interface-exp-id-vec Zdc3@module-interface-exp-id-vec) (set! Zdc5@set-module-interface-exp-id-vec! (lambda (Z1f0c@x Z1f0d@val) (simple-struct-set! Z1f0c@x '1 Z1f0d@val))) (set! Z2871@Zdc5@set-module-interface-exp-id-vec! Zdc5@set-module-interface-exp-id-vec!) (set! Zdc7@module-interface-exp-lab-vec (lambda (Z1f10@x) (simple-struct-ref Z1f10@x '2))) (set! Z2872@Zdc7@module-interface-exp-lab-vec Zdc7@module-interface-exp-lab-vec) (set! Zdc9@set-module-interface-exp-lab-vec! (lambda (Z1f12@x Z1f13@val) (simple-struct-set! Z1f12@x '2 Z1f13@val))) (set! Z2873@Zdc9@set-module-interface-exp-lab-vec! Zdc9@set-module-interface-exp-lab-vec!) (set! Zdcb@dummy '3) (set! Z2874@Zdcb@dummy Zdcb@dummy) (set! Zdcd@module-interface-exp-id* (lambda (Z1f16@iface Z1f17@id) (letrec* ((Z1f1b@diff-marks (lambda (Z1f22@ls Z1f23@x) (begin (if (null? Z1f22@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((Z1f26@a (car Z1f22@ls))) (if (eq? Z1f26@a Z1f23@x) '() (cons Z1f26@a (Z1f1b@diff-marks (cdr Z1f22@ls) Z1f23@x)))))))) (let ((Z1f1c@diff (Z1f1b@diff-marks (Zb44@stx-mark* Z1f17@id) (Zdbf@module-interface-first-mark Z1f16@iface))) (Z1f1d@id-vec (Zdc3@module-interface-exp-id-vec Z1f16@iface))) (if (null? Z1f1c@diff) Z1f1d@id-vec (vector-map (lambda (Z1f20@x) (make-simple-struct 'stx '5 (list (Zb40@stx-expr Z1f20@x) (append Z1f1c@diff (Zb44@stx-mark* Z1f20@x)) '() '()))) Z1f1d@id-vec)))))) (set! Z2875@Zdcd@module-interface-exp-id* Zdcd@module-interface-exp-id*) (set! Zdcf@chi-internal-module (lambda (Z1f28@e Z1f29@r Z1f2a@mr Z1f2b@lex* Z1f2c@rhs* Z1f2d@mod** Z1f2e@kwd*) (call-with-values (lambda () (Zdb3@parse-module Z1f28@e)) (lambda (Z1f3c@Z1f37 Z1f3d@Z1f39 Z1f3e@Z1f3b) (let ((Z1f42@e* Z1f3e@Z1f3b) (Z1f43@exp-id* Z1f3d@Z1f39) (Z1f44@name Z1f3c@Z1f37)) (let ((Z1f48@rib (Zb26@make-empty-rib))) (let ((Z1f4a@e* (map (lambda (Z1f4c@x) (Zb5e@add-subst Z1f48@rib Z1f4c@x)) (Zb70@syntax->list Z1f42@e*)))) (call-with-values (lambda () (Zdd1@chi-body* Z1f4a@e* Z1f29@r Z1f2a@mr Z1f2b@lex* Z1f2c@rhs* Z1f2d@mod** Z1f2e@kwd* '() Z1f48@rib '#f)) (lambda (Z1f5e@Z1f4f Z1f5f@Z1f51 Z1f60@Z1f53 Z1f61@Z1f55 Z1f62@Z1f57 Z1f63@Z1f59 Z1f64@Z1f5b Z1f65@Z1f5d) (let ((Z1f6e@_exp* Z1f65@Z1f5d) (Z1f6f@kwd* Z1f64@Z1f5b) (Z1f70@mod** Z1f63@Z1f59) (Z1f71@rhs* Z1f62@Z1f57) (Z1f72@lex* Z1f61@Z1f55) (Z1f73@mr Z1f60@Z1f53) (Z1f74@r Z1f5f@Z1f51) (Z1f75@e* Z1f5e@Z1f4f)) (let ((Z1f7e@exp-lab* (vector-map (lambda (Z1f82@x) (or (Zb88@id->label (make-simple-struct 'stx '5 (list (Zb74@id->sym Z1f82@x) (Zb44@stx-mark* Z1f82@x) (list Z1f48@rib) '()))) (Ze59@syntax-violation '#f '"cannot find module export" Z1f82@x))) Z1f43@exp-id*)) (Z1f7f@mod** (cons Z1f75@e* Z1f70@mod**))) (if (not Z1f44@name) (values Z1f72@lex* Z1f71@rhs* Z1f43@exp-id* Z1f7e@exp-lab* Z1f74@r Z1f73@mr Z1f7f@mod** Z1f6f@kwd*) (let ((Z1f84@lab (Zafe@gen-label 'module)) (Z1f85@iface (make-simple-struct 'module-interface '4 (list (car (Zb44@stx-mark* Z1f44@name)) (vector-map (lambda (Z1f88@x) (make-simple-struct 'stx '5 (list (Zb40@stx-expr Z1f88@x) (Zb44@stx-mark* Z1f88@x) '() '()))) Z1f43@exp-id*) Z1f7e@exp-lab*)))) (values Z1f72@lex* Z1f71@rhs* (vector Z1f44@name) (vector Z1f84@lab) (cons (cons Z1f84@lab (cons '$module Z1f85@iface)) Z1f74@r) (cons (cons Z1f84@lab (cons '$module Z1f85@iface)) Z1f73@mr) Z1f7f@mod** Z1f6f@kwd*)))))))))))))) (set! Z2876@Zdcf@chi-internal-module Zdcf@chi-internal-module) (set! Zdd1@chi-body* (lambda (Z1f8a@e* Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1f90@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?) (if (null? Z1f8a@e*) (values Z1f8a@e* Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1f90@kwd* Z1f91@exp*) (let ((Z1f9e@e (car Z1f8a@e*))) (call-with-values (lambda () (Zb94@syntax-type Z1f9e@e Z1f8b@r)) (lambda (Z1fa6@Z1fa1 Z1fa7@Z1fa3 Z1fa8@Z1fa5) (let ((Z1fac@kwd Z1fa8@Z1fa5) (Z1fad@value Z1fa7@Z1fa3) (Z1fae@type Z1fa6@Z1fa1)) (let ((Z1fb2@kwd* (if (Zb72@id? Z1fac@kwd) (cons Z1fac@kwd Z1f90@kwd*) Z1f90@kwd*))) (let ((Z1fb4@t Z1fae@type)) (if (memv Z1fb4@t '(define)) (call-with-values (lambda () (Zcfb@parse-define Z1f9e@e)) (lambda (Z1fba@Z1fb7 Z1fbb@Z1fb9) (let ((Z1fbe@rhs Z1fbb@Z1fb9) (Z1fbf@id Z1fba@Z1fb7)) (begin (if (Zb7e@bound-id-member? Z1fbf@id Z1fb2@kwd*) (Ze59@syntax-violation '#f '"cannot redefine keyword" Z1f9e@e) (void)) (call-with-values (lambda () (Zb02@gen-define-label+loc Z1fbf@id Z1f92@rib)) (lambda (Z1fc6@Z1fc3 Z1fc7@Z1fc5) (let ((Z1fca@lex Z1fc7@Z1fc5) (Z1fcb@lab Z1fc6@Z1fc3)) (begin (Zb28@extend-rib! Z1f92@rib Z1fbf@id Z1fcb@lab) (Zdd1@chi-body* (cdr Z1f8a@e*) (Zd09@add-lexical Z1fcb@lab Z1fca@lex Z1f8b@r) Z1f8c@mr (cons Z1fca@lex Z1f8d@lex*) (cons Z1fbe@rhs Z1f8e@rhs*) Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?))))))))) (if (memv Z1fb4@t '(define-syntax)) (call-with-values (lambda () (Zcfd@parse-define-syntax Z1f9e@e)) (lambda (Z1fd2@Z1fcf Z1fd3@Z1fd1) (let ((Z1fd6@rhs Z1fd3@Z1fd1) (Z1fd7@id Z1fd2@Z1fcf)) (begin (if (Zb7e@bound-id-member? Z1fd7@id Z1fb2@kwd*) (Ze59@syntax-violation '#f '"cannot redefine keyword" Z1f9e@e) (void)) (let ((Z1fda@lab (Zb04@gen-define-label Z1fd7@id Z1f92@rib)) (Z1fdb@expanded-rhs (Zdd3@expand-transformer Z1fd6@rhs Z1f8c@mr))) (begin (Zb28@extend-rib! Z1f92@rib Z1fd7@id Z1fda@lab) (let ((Z1fde@b (Zbaa@make-eval-transformer Z1fdb@expanded-rhs))) (Zdd1@chi-body* (cdr Z1f8a@e*) (cons (cons Z1fda@lab Z1fde@b) Z1f8b@r) (cons (cons Z1fda@lab Z1fde@b) Z1f8c@mr) Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?)))))))) (if (memv Z1fb4@t '(let-syntax letrec-syntax)) (let ((Z1fe0@t Z1f9e@e)) (let ((Z1fe2@ls/false (Zd79@syntax-dispatch Z1fe0@t '(_ #(each (any any)) . each-any)))) (if (and Z1fe2@ls/false (apply (lambda (Z1fe4@xlhs* Z1fe5@xrhs* Z1fe6@xbody*) (if (not (Zb7a@valid-bound-ids? Z1fe4@xlhs*)) (Ze59@syntax-violation '#f '"invalid identifiers" Z1f9e@e) (void))) Z1fe2@ls/false)) (apply (lambda (Z1fea@xlhs* Z1feb@xrhs* Z1fec@xbody*) (let ((Z1ff0@xlab* (map Zafe@gen-label Z1fea@xlhs*))) (let ((Z1ff2@xrib (Zb32@make-full-rib Z1fea@xlhs* Z1ff0@xlab*))) (let ((Z1ff4@xb* (map (lambda (Z1ff6@x) (Zbaa@make-eval-transformer (Zdd3@expand-transformer (if (eq? Z1fae@type 'let-syntax) Z1ff6@x (Zb5e@add-subst Z1ff2@xrib Z1ff6@x)) Z1f8c@mr))) Z1feb@xrhs*))) (Zdd1@chi-body* (append (map (lambda (Z1ff8@x) (Zb5e@add-subst Z1ff2@xrib Z1ff8@x)) Z1fec@xbody*) (cdr Z1f8a@e*)) (append (map cons Z1ff0@xlab* Z1ff4@xb*) Z1f8b@r) (append (map cons Z1ff0@xlab* Z1ff4@xb*) Z1f8c@mr) Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?))))) Z1fe2@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1fe0@t)))) (if (memv Z1fb4@t '(begin)) (let ((Z1ffa@t Z1f9e@e)) (let ((Z1ffc@ls/false (Zd79@syntax-dispatch Z1ffa@t '(_ . each-any)))) (if Z1ffc@ls/false (apply (lambda (Z1ffe@x*) (Zdd1@chi-body* (append Z1ffe@x* (cdr Z1f8a@e*)) Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?)) Z1ffc@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z1ffa@t)))) (if (memv Z1fb4@t '(global-macro global-macro!)) (Zdd1@chi-body* (cons (Zb5e@add-subst Z1f92@rib (Zd95@chi-global-macro Z1fad@value Z1f9e@e)) (cdr Z1f8a@e*)) Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?) (if (memv Z1fb4@t '(local-macro local-macro!)) (Zdd1@chi-body* (cons (Zb5e@add-subst Z1f92@rib (Zd93@chi-local-macro Z1fad@value Z1f9e@e)) (cdr Z1f8a@e*)) Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?) (if (memv Z1fb4@t '(macro macro!)) (Zdd1@chi-body* (cons (Zb5e@add-subst Z1f92@rib (Zd91@chi-macro Z1fad@value Z1f9e@e)) (cdr Z1f8a@e*)) Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?) (if (memv Z1fb4@t '(module)) (call-with-values (lambda () (Zdcf@chi-internal-module Z1f9e@e Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd*)) (lambda (Z2010@Z2001 Z2011@Z2003 Z2012@Z2005 Z2013@Z2007 Z2014@Z2009 Z2015@Z200b Z2016@Z200d Z2017@Z200f) (let ((Z2020@kwd* Z2017@Z200f) (Z2021@mod** Z2016@Z200d) (Z2022@mr Z2015@Z200b) (Z2023@r Z2014@Z2009) (Z2024@m-exp-lab* Z2013@Z2007) (Z2025@m-exp-id* Z2012@Z2005) (Z2026@rhs* Z2011@Z2003) (Z2027@lex* Z2010@Z2001)) (begin (vector-for-each (lambda (Z2030@id Z2031@lab) (Zb28@extend-rib! Z1f92@rib Z2030@id Z2031@lab)) Z2025@m-exp-id* Z2024@m-exp-lab*) (Zdd1@chi-body* (cdr Z1f8a@e*) Z2023@r Z2022@mr Z2027@lex* Z2026@rhs* Z2021@mod** Z2020@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?))))) (if (memv Z1fb4@t '(library)) (begin (Ze3b@library-expander (Zb86@stx->datum Z1f9e@e)) (Zdd1@chi-body* (cdr Z1f8a@e*) Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?)) (if (memv Z1fb4@t '(export)) (let ((Z2034@t Z1f9e@e)) (let ((Z2036@ls/false (Zd79@syntax-dispatch Z2034@t '(_ . each-any)))) (if Z2036@ls/false (apply (lambda (Z2038@exp-decl*) (Zdd1@chi-body* (cdr Z1f8a@e*) Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* (append Z2038@exp-decl* Z1f91@exp*) Z1f92@rib Z1f93@top?)) Z2036@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z2034@t)))) (if (memv Z1fb4@t '(import)) (letrec* ((Z203b@module-import? (lambda (Z208e@e) (let ((Z2090@t Z208e@e)) (let ((Z2092@ls/false (Zd79@syntax-dispatch Z2090@t '(_ any)))) (if (and Z2092@ls/false (apply (lambda (Z2094@id) (Zb72@id? Z2094@id)) Z2092@ls/false)) (apply (lambda (Z2096@id) '#t) Z2092@ls/false) (let ((Z2098@t Z2090@t)) (let ((Z209a@ls/false (Zd79@syntax-dispatch Z2098@t '(_ . each-any)))) (if Z209a@ls/false (apply (lambda (Z209c@imp*) '#f) Z209a@ls/false) (let ((Z209e@t Z2098@t)) (let ((Z20a0@ls/false (Zd79@syntax-dispatch Z209e@t '_))) (if Z20a0@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"malformed import form" Z208e@e)) Z20a0@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z209e@t)))))))))))) (Z203d@module-import (lambda (Z206c@e Z206d@r) (let ((Z2070@t Z206c@e)) (let ((Z2072@ls/false (Zd79@syntax-dispatch Z2070@t '(_ any)))) (if (and Z2072@ls/false (apply (lambda (Z2074@id) (Zb72@id? Z2074@id)) Z2072@ls/false)) (apply (lambda (Z2076@id) (call-with-values (lambda () (Zb94@syntax-type Z2076@id Z206d@r)) (lambda (Z207e@Z2079 Z207f@Z207b Z2080@Z207d) (let ((Z2084@kwd Z2080@Z207d) (Z2085@value Z207f@Z207b) (Z2086@type Z207e@Z2079)) (let ((Z208a@t Z2086@type)) (if (memv Z208a@t '($module)) (let ((Z208c@iface Z2085@value)) (values (Zdcd@module-interface-exp-id* Z208c@iface Z2076@id) (Zdc7@module-interface-exp-lab-vec Z208c@iface))) (Ze59@syntax-violation '#f '"invalid import" Z206c@e))))))) Z2072@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z2070@t)))))) (Z203f@library-import (lambda (Z2050@e) (let ((Z2052@t Z2050@e)) (let ((Z2054@ls/false (Zd79@syntax-dispatch Z2052@t '(any . each-any)))) (if Z2054@ls/false (apply (lambda (Z2056@ctxt Z2057@imp*) (call-with-values (lambda () (Zddb@parse-import-spec* (Ze5f@syntax->datum Z2057@imp*))) (lambda (Z205e@Z205b Z205f@Z205d) (let ((Z2062@subst-labels Z205f@Z205d) (Z2063@subst-names Z205e@Z205b)) (values (vector-map (lambda (Z2066@name) (Zb52@datum->stx Z2056@ctxt Z2066@name)) Z2063@subst-names) Z2062@subst-labels))))) Z2054@ls/false) (let ((Z2068@t Z2052@t)) (let ((Z206a@ls/false (Zd79@syntax-dispatch Z2068@t '_))) (if Z206a@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid import form" Z2050@e)) Z206a@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z2068@t)))))))))) (begin (call-with-values (lambda () (if (Z203b@module-import? Z1f9e@e) (Z203d@module-import Z1f9e@e Z1f8b@r) (Z203f@library-import Z1f9e@e))) (lambda (Z2044@Z2041 Z2045@Z2043) (let ((Z2048@lab* Z2045@Z2043) (Z2049@id* Z2044@Z2041)) (vector-for-each (lambda (Z204c@id Z204d@lab) (Zb28@extend-rib! Z1f92@rib Z204c@id Z204d@lab)) Z2049@id* Z2048@lab*)))) (Zdd1@chi-body* (cdr Z1f8a@e*) Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?))) (if Z1f93@top? (Zdd1@chi-body* (cdr Z1f8a@e*) Z1f8b@r Z1f8c@mr (cons (Zafa@gen-lexical 'dummy) Z1f8d@lex*) (cons (cons 'top-expr Z1f9e@e) Z1f8e@rhs*) Z1f8f@mod** Z1fb2@kwd* Z1f91@exp* Z1f92@rib Z1f93@top?) (values Z1f8a@e* Z1f8b@r Z1f8c@mr Z1f8d@lex* Z1f8e@rhs* Z1f8f@mod** Z1fb2@kwd* Z1f91@exp*)))))))))))))))))))))) (set! Z2877@Zdd1@chi-body* Zdd1@chi-body*) (set! Zdd3@expand-transformer (lambda (Z20a2@expr Z20a3@r) (let ((Z20a6@rtc (Zddf@make-collector))) (let ((Z20a8@expanded-rhs (let ((Z20b2@Z20ab Zde1@inv-collector) (Z20b3@Z20ad Zde3@vis-collector) (Z20b4@Z20af Z20a6@rtc) (Z20b5@Z20b1 (lambda (Z20ba@x) (values)))) (let ((Z20bc@swap (lambda () (begin (let ((Z20be@t (Z20b2@Z20ab))) (begin (Z20b2@Z20ab Z20b4@Z20af) (set! Z20b4@Z20af Z20be@t))) (let ((Z20c0@t (Z20b3@Z20ad))) (begin (Z20b3@Z20ad Z20b5@Z20b1) (set! Z20b5@Z20b1 Z20c0@t))))))) (dynamic-wind Z20bc@swap (lambda () (Zd9b@chi-expr Z20a2@expr Z20a3@r Z20a3@r)) Z20bc@swap))))) (begin (for-each (let ((Z20c2@mark-visit (Zde3@vis-collector))) (lambda (Z20c4@x) (begin (Z98e@Z7dc@invoke-library Z20c4@x) (Z20c2@mark-visit Z20c4@x)))) (Z20a6@rtc)) Z20a8@expanded-rhs))))) (set! Z2878@Zdd3@expand-transformer Zdd3@expand-transformer) (set! Zdd5@parse-exports (lambda (Z20c6@exp*) (let Z20ce@f ((Z20c8@exp* Z20c6@exp*) (Z20c9@int* '()) (Z20ca@ext* '())) (if (null? Z20c8@exp*) (begin (if (not (Zb7a@valid-bound-ids? Z20ca@ext*)) (Ze59@syntax-violation 'export '"invalid exports" (Zdaf@find-dups Z20ca@ext*)) (void)) (values (map Ze5f@syntax->datum Z20ca@ext*) Z20c9@int*)) (let ((Z20d0@t (car Z20c8@exp*))) (let ((Z20d2@ls/false (Zd79@syntax-dispatch Z20d0@t '(any . #(each (any any)))))) (if Z20d2@ls/false (apply (lambda (Z20d4@rename Z20d5@i* Z20d6@e*) (begin (if (not (and (eq? (Ze5f@syntax->datum Z20d4@rename) 'rename) (for-all Zb72@id? Z20d5@i*) (for-all Zb72@id? Z20d6@e*))) (Ze59@syntax-violation 'export '"invalid export specifier" (car Z20c8@exp*)) (void)) (Z20ce@f (cdr Z20c8@exp*) (append Z20d5@i* Z20c9@int*) (append Z20d6@e* Z20ca@ext*)))) Z20d2@ls/false) (let ((Z20da@t Z20d0@t)) (let ((Z20dc@ls/false (Zd79@syntax-dispatch Z20da@t 'any))) (if Z20dc@ls/false (apply (lambda (Z20de@ie) (begin (if (not (Zb72@id? Z20de@ie)) (Ze59@syntax-violation 'export '"invalid export" Z20de@ie) (void)) (Z20ce@f (cdr Z20c8@exp*) (cons Z20de@ie Z20c9@int*) (cons Z20de@ie Z20ca@ext*)))) Z20dc@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z20da@t))))))))))) (set! Z2879@Zdd5@parse-exports Zdd5@parse-exports) (set! Zdd7@parse-library-name (lambda (Z20e0@spec) (letrec* ((Z20e3@parse (lambda (Z20f0@x) (let ((Z20f2@t Z20f0@x)) (let ((Z20f4@ls/false (Zd79@syntax-dispatch Z20f2@t '(each-any)))) (if (and Z20f4@ls/false (apply (lambda (Z20f6@v*) (for-all (lambda (Z20f8@x) (let ((Z20fa@x (Ze5f@syntax->datum Z20f8@x))) (and (integer? Z20fa@x) (exact? Z20fa@x)))) Z20f6@v*)) Z20f4@ls/false)) (apply (lambda (Z20fc@v*) (values '() (map Ze5f@syntax->datum Z20fc@v*))) Z20f4@ls/false) (let ((Z20fe@t Z20f2@t)) (let ((Z2100@ls/false (Zd79@syntax-dispatch Z20fe@t '(any . any)))) (if (and Z2100@ls/false (apply (lambda (Z2102@x Z2103@rest) (symbol? (Ze5f@syntax->datum Z2102@x))) Z2100@ls/false)) (apply (lambda (Z2106@x Z2107@rest) (call-with-values (lambda () (Z20e3@parse Z2107@rest)) (lambda (Z210e@Z210b Z210f@Z210d) (let ((Z2112@v* Z210f@Z210d) (Z2113@x* Z210e@Z210b)) (values (cons (Ze5f@syntax->datum Z2106@x) Z2113@x*) Z2112@v*))))) Z2100@ls/false) (let ((Z2116@t Z20fe@t)) (let ((Z2118@ls/false (Zd79@syntax-dispatch Z2116@t '()))) (if Z2118@ls/false (apply (lambda () (values '() '())) Z2118@ls/false) (let ((Z211a@t Z2116@t)) (let ((Z211c@ls/false (Zd79@syntax-dispatch Z211a@t '_))) (if Z211c@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid library name" Z20e0@spec)) Z211c@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z211a@t)))))))))))))))) (call-with-values (lambda () (Z20e3@parse Z20e0@spec)) (lambda (Z20e8@Z20e5 Z20e9@Z20e7) (let ((Z20ec@ver* Z20e9@Z20e7) (Z20ed@name* Z20e8@Z20e5)) (begin (if (null? Z20ed@name*) (Ze59@syntax-violation '#f '"empty library name" Z20e0@spec) (void)) (values Z20ed@name* Z20ec@ver*)))))))) (set! Z287a@Zdd7@parse-library-name Zdd7@parse-library-name) (set! Zdd9@parse-library (lambda (Z211e@e) (let ((Z2120@t Z211e@e)) (let ((Z2122@ls/false (Zd79@syntax-dispatch Z2120@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and Z2122@ls/false (apply (lambda (Z2124@library Z2125@name* Z2126@export Z2127@exp* Z2128@import Z2129@imp* Z212a@b*) (and (eq? (Ze5f@syntax->datum Z2126@export) 'export) (eq? (Ze5f@syntax->datum Z2128@import) 'import) (eq? (Ze5f@syntax->datum Z2124@library) 'library))) Z2122@ls/false)) (apply (lambda (Z2132@library Z2133@name* Z2134@export Z2135@exp* Z2136@import Z2137@imp* Z2138@b*) (values Z2133@name* Z2135@exp* Z2137@imp* Z2138@b*)) Z2122@ls/false) (let ((Z2140@t Z2120@t)) (let ((Z2142@ls/false (Zd79@syntax-dispatch Z2140@t '_))) (if Z2142@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"malformed library" Z211e@e)) Z2142@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z2140@t))))))))) (set! Z287b@Zdd9@parse-library Zdd9@parse-library) (set! Zddb@parse-import-spec* (letrec* ((Z2145@idsyn? (lambda (Z234e@x) (symbol? (Ze5f@syntax->datum Z234e@x)))) (Z2147@dup-error (lambda (Z234c@name) (Ze59@syntax-violation 'import '"two imports with different bindings" Z234c@name))) (Z2149@merge-substs (lambda (Z233a@s Z233b@subst) (letrec* ((Z233f@insert-to-subst (lambda (Z2340@a Z2341@subst) (let ((Z2344@name (car Z2340@a)) (Z2345@label (cdr Z2340@a))) (let ((Z2348@t (assq Z2344@name Z2341@subst))) (if Z2348@t ((lambda (Z234a@x) (if (eq? (cdr Z234a@x) Z2345@label) Z2341@subst (Z2147@dup-error Z2344@name))) Z2348@t) (cons Z2340@a Z2341@subst))))))) (if (null? Z233a@s) Z233b@subst (Z233f@insert-to-subst (car Z233a@s) (Z2149@merge-substs (cdr Z233a@s) Z233b@subst)))))) (Z214b@exclude* (lambda (Z230a@sym* Z230b@subst) (letrec* ((Z230f@exclude (lambda (Z2328@sym Z2329@subst) (if (null? Z2329@subst) (Ze59@syntax-violation 'import '"cannot rename unbound identifier" Z2328@sym) (if (eq? Z2328@sym (caar Z2329@subst)) (values (cdar Z2329@subst) (cdr Z2329@subst)) (let ((Z232c@a (car Z2329@subst))) (call-with-values (lambda () (Z230f@exclude Z2328@sym (cdr Z2329@subst))) (lambda (Z2332@Z232f Z2333@Z2331) (let ((Z2336@subst Z2333@Z2331) (Z2337@old Z2332@Z232f)) (values Z2337@old (cons Z232c@a Z2336@subst))))))))))) (if (null? Z230a@sym*) (values '() Z230b@subst) (call-with-values (lambda () (Z230f@exclude (car Z230a@sym*) Z230b@subst)) (lambda (Z2314@Z2311 Z2315@Z2313) (let ((Z2318@subst Z2315@Z2313) (Z2319@old Z2314@Z2311)) (call-with-values (lambda () (Z214b@exclude* (cdr Z230a@sym*) Z2318@subst)) (lambda (Z2320@Z231d Z2321@Z231f) (let ((Z2324@subst Z2321@Z231f) (Z2325@old* Z2320@Z231d)) (values (cons Z2319@old Z2325@old*) Z2324@subst))))))))))) (Z214d@find* (lambda (Z2302@sym* Z2303@subst) (map (lambda (Z2306@x) (let ((Z2308@t (assq Z2306@x Z2303@subst))) (if Z2308@t (cdr Z2308@t) (Ze59@syntax-violation 'import '"cannot find identifier" Z2306@x)))) Z2302@sym*))) (Z214f@rem* (lambda (Z22fa@sym* Z22fb@subst) (let Z2300@f ((Z22fe@subst Z22fb@subst)) (if (null? Z22fe@subst) '() (if (memq (caar Z22fe@subst) Z22fa@sym*) (Z2300@f (cdr Z22fe@subst)) (cons (car Z22fe@subst) (Z2300@f (cdr Z22fe@subst)))))))) (Z2151@remove-dups (lambda (Z22f8@ls) (if (null? Z22f8@ls) '() (if (memq (car Z22f8@ls) (cdr Z22f8@ls)) (Z2151@remove-dups (cdr Z22f8@ls)) (cons (car Z22f8@ls) (Z2151@remove-dups (cdr Z22f8@ls))))))) (Z2153@parse-library-name (lambda (Z2210@spec) (letrec* ((Z2213@subversion? (lambda (Z22f4@x) (let ((Z22f6@x (Ze5f@syntax->datum Z22f4@x))) (and (integer? Z22f6@x) (exact? Z22f6@x) (>= Z22f6@x '0))))) (Z2215@subversion-pred (lambda (Z2294@x*) (let ((Z2296@t Z2294@x*)) (let ((Z2298@ls/false (Zd79@syntax-dispatch Z2296@t 'any))) (if (and Z2298@ls/false (apply (lambda (Z229a@n) (Z2213@subversion? Z229a@n)) Z2298@ls/false)) (apply (lambda (Z229c@n) (lambda (Z229e@x) (= Z229e@x (Ze5f@syntax->datum Z229c@n)))) Z2298@ls/false) (let ((Z22a0@t Z2296@t)) (let ((Z22a2@ls/false (Zd79@syntax-dispatch Z22a0@t '(any . each-any)))) (if (and Z22a2@ls/false (apply (lambda (Z22a4@p? Z22a5@sub*) (eq? (Ze5f@syntax->datum Z22a4@p?) 'and)) Z22a2@ls/false)) (apply (lambda (Z22a8@p? Z22a9@sub*) (let ((Z22ac@p* (map Z2215@subversion-pred Z22a9@sub*))) (lambda (Z22ae@x) (for-all (lambda (Z22b0@p) (Z22b0@p Z22ae@x)) Z22ac@p*)))) Z22a2@ls/false) (let ((Z22b2@t Z22a0@t)) (let ((Z22b4@ls/false (Zd79@syntax-dispatch Z22b2@t '(any . each-any)))) (if (and Z22b4@ls/false (apply (lambda (Z22b6@p? Z22b7@sub*) (eq? (Ze5f@syntax->datum Z22b6@p?) 'or)) Z22b4@ls/false)) (apply (lambda (Z22ba@p? Z22bb@sub*) (let ((Z22be@p* (map Z2215@subversion-pred Z22bb@sub*))) (lambda (Z22c0@x) (exists (lambda (Z22c2@p) (Z22c2@p Z22c0@x)) Z22be@p*)))) Z22b4@ls/false) (let ((Z22c4@t Z22b2@t)) (let ((Z22c6@ls/false (Zd79@syntax-dispatch Z22c4@t '(any any)))) (if (and Z22c6@ls/false (apply (lambda (Z22c8@p? Z22c9@sub) (eq? (Ze5f@syntax->datum Z22c8@p?) 'not)) Z22c6@ls/false)) (apply (lambda (Z22cc@p? Z22cd@sub) (let ((Z22d0@p (Z2215@subversion-pred Z22cd@sub))) (lambda (Z22d2@x) (not (Z22d0@p Z22d2@x))))) Z22c6@ls/false) (let ((Z22d4@t Z22c4@t)) (let ((Z22d6@ls/false (Zd79@syntax-dispatch Z22d4@t '(any any)))) (if (and Z22d6@ls/false (apply (lambda (Z22d8@p? Z22d9@n) (and (eq? (Ze5f@syntax->datum Z22d8@p?) '<=) (Z2213@subversion? Z22d9@n))) Z22d6@ls/false)) (apply (lambda (Z22dc@p? Z22dd@n) (lambda (Z22e0@x) (<= Z22e0@x (Ze5f@syntax->datum Z22dd@n)))) Z22d6@ls/false) (let ((Z22e2@t Z22d4@t)) (let ((Z22e4@ls/false (Zd79@syntax-dispatch Z22e2@t '(any any)))) (if (and Z22e4@ls/false (apply (lambda (Z22e6@p? Z22e7@n) (and (eq? (Ze5f@syntax->datum Z22e6@p?) '>=) (Z2213@subversion? Z22e7@n))) Z22e4@ls/false)) (apply (lambda (Z22ea@p? Z22eb@n) (lambda (Z22ee@x) (>= Z22ee@x (Ze5f@syntax->datum Z22eb@n)))) Z22e4@ls/false) (let ((Z22f0@t Z22e2@t)) (let ((Z22f2@ls/false (Zd79@syntax-dispatch Z22f0@t '_))) (if Z22f2@ls/false (apply (lambda () (Ze59@syntax-violation 'import '"invalid sub-version spec" Z2210@spec Z2294@x*)) Z22f2@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z22f0@t)))))))))))))))))))))))) (Z2217@version-pred (lambda (Z2244@x*) (let ((Z2246@t Z2244@x*)) (let ((Z2248@ls/false (Zd79@syntax-dispatch Z2246@t '()))) (if Z2248@ls/false (apply (lambda () (lambda (Z224a@x) '#t)) Z2248@ls/false) (let ((Z224c@t Z2246@t)) (let ((Z224e@ls/false (Zd79@syntax-dispatch Z224c@t '(any . each-any)))) (if (and Z224e@ls/false (apply (lambda (Z2250@c Z2251@ver*) (eq? (Ze5f@syntax->datum Z2250@c) 'and)) Z224e@ls/false)) (apply (lambda (Z2254@c Z2255@ver*) (let ((Z2258@p* (map Z2217@version-pred Z2255@ver*))) (lambda (Z225a@x) (for-all (lambda (Z225c@p) (Z225c@p Z225a@x)) Z2258@p*)))) Z224e@ls/false) (let ((Z225e@t Z224c@t)) (let ((Z2260@ls/false (Zd79@syntax-dispatch Z225e@t '(any . each-any)))) (if (and Z2260@ls/false (apply (lambda (Z2262@c Z2263@ver*) (eq? (Ze5f@syntax->datum Z2262@c) 'or)) Z2260@ls/false)) (apply (lambda (Z2266@c Z2267@ver*) (let ((Z226a@p* (map Z2217@version-pred Z2267@ver*))) (lambda (Z226c@x) (exists (lambda (Z226e@p) (Z226e@p Z226c@x)) Z226a@p*)))) Z2260@ls/false) (let ((Z2270@t Z225e@t)) (let ((Z2272@ls/false (Zd79@syntax-dispatch Z2270@t '(any any)))) (if (and Z2272@ls/false (apply (lambda (Z2274@c Z2275@ver) (eq? (Ze5f@syntax->datum Z2274@c) 'not)) Z2272@ls/false)) (apply (lambda (Z2278@c Z2279@ver) (let ((Z227c@p (Z2217@version-pred Z2279@ver))) (lambda (Z227e@x) (not (Z227c@p Z227e@x))))) Z2272@ls/false) (let ((Z2280@t Z2270@t)) (let ((Z2282@ls/false (Zd79@syntax-dispatch Z2280@t 'each-any))) (if Z2282@ls/false (apply (lambda (Z2284@sub*) (let ((Z2286@p* (map Z2215@subversion-pred Z2284@sub*))) (lambda (Z2288@x) (let Z228e@f ((Z228a@p* Z2286@p*) (Z228b@x Z2288@x)) (if (null? Z228a@p*) '#t (if (null? Z228b@x) '#f (and ((car Z228a@p*) (car Z228b@x)) (Z228e@f (cdr Z228a@p*) (cdr Z228b@x))))))))) Z2282@ls/false) (let ((Z2290@t Z2280@t)) (let ((Z2292@ls/false (Zd79@syntax-dispatch Z2290@t '_))) (if Z2292@ls/false (apply (lambda () (Ze59@syntax-violation 'import '"invalid version spec" Z2210@spec Z2244@x*)) Z2292@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z2290@t)))))))))))))))))))))) (let Z221a@f ((Z2218@x Z2210@spec)) (let ((Z221c@t Z2218@x)) (let ((Z221e@ls/false (Zd79@syntax-dispatch Z221c@t '(each-any)))) (if Z221e@ls/false (apply (lambda (Z2220@version-spec*) (values '() (Z2217@version-pred Z2220@version-spec*))) Z221e@ls/false) (let ((Z2222@t Z221c@t)) (let ((Z2224@ls/false (Zd79@syntax-dispatch Z2222@t '(any . any)))) (if (and Z2224@ls/false (apply (lambda (Z2226@x Z2227@x*) (Z2145@idsyn? Z2226@x)) Z2224@ls/false)) (apply (lambda (Z222a@x Z222b@x*) (call-with-values (lambda () (Z221a@f Z222b@x*)) (lambda (Z2232@Z222f Z2233@Z2231) (let ((Z2236@pred Z2233@Z2231) (Z2237@name Z2232@Z222f)) (values (cons (Ze5f@syntax->datum Z222a@x) Z2237@name) Z2236@pred))))) Z2224@ls/false) (let ((Z223a@t Z2222@t)) (let ((Z223c@ls/false (Zd79@syntax-dispatch Z223a@t '()))) (if Z223c@ls/false (apply (lambda () (values '() (lambda (Z223e@x) '#t))) Z223c@ls/false) (let ((Z2240@t Z223a@t)) (let ((Z2242@ls/false (Zd79@syntax-dispatch Z2240@t '_))) (if Z2242@ls/false (apply (lambda () (Ze59@syntax-violation '#f '"invalid import spec" Z2210@spec)) Z2242@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z2240@t))))))))))))))))) (Z2155@import-library (lambda (Z2200@spec*) (call-with-values (lambda () (Z2153@parse-library-name Z2200@spec*)) (lambda (Z2206@Z2203 Z2207@Z2205) (let ((Z220a@pred Z2207@Z2205) (Z220b@name Z2206@Z2203)) (begin (if (null? Z220b@name) (Ze59@syntax-violation 'import '"empty library name" Z2200@spec*) (void)) (let ((Z220e@lib (Z987@Z7ce@find-library-by-name Z220b@name))) (begin (if (not Z220e@lib) (Ze59@syntax-violation 'import '"cannot find library with required name" Z220b@name) (void)) (if (not (Z220a@pred (Z961@Z782@library-version Z220e@lib))) (Ze59@syntax-violation 'import '"library does not satisfy version specification" Z2200@spec* Z220e@lib) (void)) ((Zde5@imp-collector) Z220e@lib) (Z969@Z792@library-subst Z220e@lib))))))))) (Z2157@get-import (lambda (Z2172@spec) (let ((Z2174@t Z2172@spec)) (let ((Z2176@ls/false (Zd79@syntax-dispatch Z2174@t '(any . each-any)))) (if (and Z2176@ls/false (apply (lambda (Z2178@x Z2179@x*) (not (memq (Ze5f@syntax->datum Z2178@x) '(for rename except only prefix library)))) Z2176@ls/false)) (apply (lambda (Z217c@x Z217d@x*) (Z2155@import-library (cons Z217c@x Z217d@x*))) Z2176@ls/false) (let ((Z2180@t Z2174@t)) (let ((Z2182@ls/false (Zd79@syntax-dispatch Z2180@t '(any any . #(each (any any)))))) (if (and Z2182@ls/false (apply (lambda (Z2184@rename Z2185@isp Z2186@old* Z2187@new*) (and (eq? (Ze5f@syntax->datum Z2184@rename) 'rename) (for-all Z2145@idsyn? Z2186@old*) (for-all Z2145@idsyn? Z2187@new*))) Z2182@ls/false)) (apply (lambda (Z218c@rename Z218d@isp Z218e@old* Z218f@new*) (let ((Z2194@subst (Z2157@get-import Z218d@isp)) (Z2195@old* (map Ze5f@syntax->datum Z218e@old*)) (Z2196@new* (map Ze5f@syntax->datum Z218f@new*))) (let ((Z219a@old-label* (Z214d@find* Z2195@old* Z2194@subst))) (let ((Z219c@subst (Z214f@rem* Z2195@old* Z2194@subst))) (Z2149@merge-substs (map cons Z2196@new* Z219a@old-label*) Z219c@subst))))) Z2182@ls/false) (let ((Z219e@t Z2180@t)) (let ((Z21a0@ls/false (Zd79@syntax-dispatch Z219e@t '(any any . each-any)))) (if (and Z21a0@ls/false (apply (lambda (Z21a2@except Z21a3@isp Z21a4@sym*) (and (eq? (Ze5f@syntax->datum Z21a2@except) 'except) (for-all Z2145@idsyn? Z21a4@sym*))) Z21a0@ls/false)) (apply (lambda (Z21a8@except Z21a9@isp Z21aa@sym*) (let ((Z21ae@subst (Z2157@get-import Z21a9@isp))) (Z214f@rem* (map Ze5f@syntax->datum Z21aa@sym*) Z21ae@subst))) Z21a0@ls/false) (let ((Z21b0@t Z219e@t)) (let ((Z21b2@ls/false (Zd79@syntax-dispatch Z21b0@t '(any any . each-any)))) (if (and Z21b2@ls/false (apply (lambda (Z21b4@only Z21b5@isp Z21b6@sym*) (and (eq? (Ze5f@syntax->datum Z21b4@only) 'only) (for-all Z2145@idsyn? Z21b6@sym*))) Z21b2@ls/false)) (apply (lambda (Z21ba@only Z21bb@isp Z21bc@sym*) (let ((Z21c0@subst (Z2157@get-import Z21bb@isp)) (Z21c1@sym* (map Ze5f@syntax->datum Z21bc@sym*))) (let ((Z21c4@sym* (Z2151@remove-dups Z21c1@sym*))) (let ((Z21c6@lab* (Z214d@find* Z21c4@sym* Z21c0@subst))) (map cons Z21c4@sym* Z21c6@lab*))))) Z21b2@ls/false) (let ((Z21c8@t Z21b0@t)) (let ((Z21ca@ls/false (Zd79@syntax-dispatch Z21c8@t '(any any any)))) (if (and Z21ca@ls/false (apply (lambda (Z21cc@prefix Z21cd@isp Z21ce@p) (and (eq? (Ze5f@syntax->datum Z21cc@prefix) 'prefix) (Z2145@idsyn? Z21ce@p))) Z21ca@ls/false)) (apply (lambda (Z21d2@prefix Z21d3@isp Z21d4@p) (let ((Z21d8@subst (Z2157@get-import Z21d3@isp)) (Z21d9@prefix (symbol->string (Ze5f@syntax->datum Z21d4@p)))) (map (lambda (Z21dc@x) (cons (string->symbol (string-append Z21d9@prefix (symbol->string (car Z21dc@x)))) (cdr Z21dc@x))) Z21d8@subst))) Z21ca@ls/false) (let ((Z21de@t Z21c8@t)) (let ((Z21e0@ls/false (Zd79@syntax-dispatch Z21de@t '(any each-any)))) (if (and Z21e0@ls/false (apply (lambda (Z21e2@library Z21e3@spec*) (eq? (Ze5f@syntax->datum Z21e2@library) 'library)) Z21e0@ls/false)) (apply (lambda (Z21e6@library Z21e7@spec*) (Z2155@import-library Z21e7@spec*)) Z21e0@ls/false) (let ((Z21ea@t Z21de@t)) (let ((Z21ec@ls/false (Zd79@syntax-dispatch Z21ea@t '(any any . any)))) (if (and Z21ec@ls/false (apply (lambda (Z21ee@for Z21ef@isp Z21f0@rest) (eq? (Ze5f@syntax->datum Z21ee@for) 'for)) Z21ec@ls/false)) (apply (lambda (Z21f4@for Z21f5@isp Z21f6@rest) (Z2157@get-import Z21f5@isp)) Z21ec@ls/false) (let ((Z21fa@t Z21ea@t)) (let ((Z21fc@ls/false (Zd79@syntax-dispatch Z21fa@t 'any))) (if Z21fc@ls/false (apply (lambda (Z21fe@spec) (Ze59@syntax-violation 'import '"invalid import spec" Z21fe@spec)) Z21fc@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z21fa@t))))))))))))))))))))))))))) (Z2159@add-imports! (lambda (Z2162@imp Z2163@h) (let ((Z2166@subst (Z2157@get-import Z2162@imp))) (for-each (lambda (Z2168@x) (let ((Z216a@name (car Z2168@x)) (Z216b@label (cdr Z2168@x))) (let ((Z216e@t (hashtable-ref Z2163@h Z216a@name '#f))) (if Z216e@t ((lambda (Z2170@l) (if (not (eq? Z2170@l Z216b@label)) (Z2147@dup-error Z216a@name) (void))) Z216e@t) (hashtable-set! Z2163@h Z216a@name Z216b@label))))) Z2166@subst))))) (lambda (Z215a@imp*) (let Z2160@f ((Z215c@imp* Z215a@imp*) (Z215d@h (make-eq-hashtable))) (if (null? Z215c@imp*) (hashtable-entries Z215d@h) (begin (Z2159@add-imports! (car Z215c@imp*) Z215d@h) (Z2160@f (cdr Z215c@imp*) Z215d@h))))))) (set! Z287c@Zddb@parse-import-spec* Zddb@parse-import-spec*) (set! Zddd@make-top-rib (lambda (Z2350@names Z2351@labels) (let ((Z2354@rib (Zb26@make-empty-rib))) (begin (vector-for-each (lambda (Z2356@name Z2357@label) (begin (if (not (symbol? Z2356@name)) (error 'make-top-rib '"BUG: not a symbol" Z2356@name) (void)) (Zb2a@extend-rib/nc! Z2354@rib (make-simple-struct 'stx '5 (list Z2356@name Zaf6@top-mark* '() '())) Z2357@label))) Z2350@names Z2351@labels) Z2354@rib)))) (set! Z287d@Zddd@make-top-rib Zddd@make-top-rib) (set! Zddf@make-collector (lambda () (let ((Z235a@ls '())) (lambda Z235e (let ((Z235f (length Z235e))) (if (= Z235f '0) (apply (lambda () Z235a@ls) Z235e) (if (= Z235f '1) (apply (lambda (Z235c@x) (set! Z235a@ls (Zaef@set-cons Z235c@x Z235a@ls))) Z235e) (error 'apply '"invalid arg count")))))))) (set! Z287e@Zddf@make-collector Zddf@make-collector) (set! Zde1@inv-collector (Z6c2@Z5a0@make-parameter (lambda Z2360@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (Z2362@x) (begin (if (not (procedure? Z2362@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" Z2362@x) (void)) Z2362@x)))) (set! Z287f@Zde1@inv-collector Zde1@inv-collector) (set! Zde3@vis-collector (Z6c2@Z5a0@make-parameter (lambda Z2364@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (Z2366@x) (begin (if (not (procedure? Z2366@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" Z2366@x) (void)) Z2366@x)))) (set! Z2880@Zde3@vis-collector Zde3@vis-collector) (set! Zde5@imp-collector (Z6c2@Z5a0@make-parameter (lambda Z2368@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (Z236a@x) (begin (if (not (procedure? Z236a@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" Z236a@x) (void)) Z236a@x)))) (set! Z2881@Zde5@imp-collector Zde5@imp-collector) (set! Zde7@chi-library-internal (lambda (Z236c@e* Z236d@rib Z236e@top?) (call-with-values (lambda () (Zdd1@chi-body* Z236c@e* '() '() '() '() '() '() '() Z236d@rib Z236e@top?)) (lambda (Z2382@Z2373 Z2383@Z2375 Z2384@Z2377 Z2385@Z2379 Z2386@Z237b Z2387@Z237d Z2388@Z237f Z2389@Z2381) (let ((Z2392@exp* Z2389@Z2381) (Z2393@_kwd* Z2388@Z237f) (Z2394@mod** Z2387@Z237d) (Z2395@rhs* Z2386@Z237b) (Z2396@lex* Z2385@Z2379) (Z2397@mr Z2384@Z2377) (Z2398@r Z2383@Z2375) (Z2399@e* Z2382@Z2373)) (values (append (apply append (reverse Z2394@mod**)) Z2399@e*) Z2398@r Z2397@mr (reverse Z2396@lex*) (reverse Z2395@rhs*) Z2392@exp*)))))) (set! Z2882@Zde7@chi-library-internal Zde7@chi-library-internal) (set! Zde9@chi-interaction-expr (lambda (Z23a2@e Z23a3@rib Z23a4@r) (call-with-values (lambda () (Zdd1@chi-body* (list Z23a2@e) Z23a4@r Z23a4@r '() '() '() '() '() Z23a3@rib '#t)) (lambda (Z23b8@Z23a9 Z23b9@Z23ab Z23ba@Z23ad Z23bb@Z23af Z23bc@Z23b1 Z23bd@Z23b3 Z23be@Z23b5 Z23bf@Z23b7) (let ((Z23c8@_exp* Z23bf@Z23b7) (Z23c9@_kwd* Z23be@Z23b5) (Z23ca@mod** Z23bd@Z23b3) (Z23cb@rhs* Z23bc@Z23b1) (Z23cc@lex* Z23bb@Z23af) (Z23cd@mr Z23ba@Z23ad) (Z23ce@r Z23b9@Z23ab) (Z23cf@e* Z23b8@Z23a9)) (let ((Z23d8@e* (Zda9@expand-interaction-rhs*/init* (reverse Z23cc@lex*) (reverse Z23cb@rhs*) (append (apply append (reverse Z23ca@mod**)) Z23cf@e*) Z23ce@r Z23cd@mr))) (let ((Z23da@e (if (null? Z23d8@e*) (Zad8@Za39@build-void) (if (null? (cdr Z23d8@e*)) (car Z23d8@e*) (Zad7@Za37@build-sequence '#f Z23d8@e*))))) (values Z23da@e Z23ce@r)))))))) (set! Z2883@Zde9@chi-interaction-expr Zde9@chi-interaction-expr) (set! Zdeb@library-body-expander (lambda (Z23dc@name Z23dd@main-exp* Z23de@imp* Z23df@b* Z23e0@top?) (letrec* ((Z23e7@itc (Zddf@make-collector))) (let ((Z23f0@Z23e9 Zde5@imp-collector) (Z23f1@Z23eb Ze69@top-level-context) (Z23f2@Z23ed Z23e7@itc) (Z23f3@Z23ef '#f)) (let ((Z23f8@swap (lambda () (begin (let ((Z23fa@t (Z23f0@Z23e9))) (begin (Z23f0@Z23e9 Z23f2@Z23ed) (set! Z23f2@Z23ed Z23fa@t))) (let ((Z23fc@t (Z23f1@Z23eb))) (begin (Z23f1@Z23eb Z23f3@Z23ef) (set! Z23f3@Z23ef Z23fc@t))))))) (dynamic-wind Z23f8@swap (lambda () (call-with-values (lambda () (Zddb@parse-import-spec* Z23de@imp*)) (lambda (Z2402@Z23ff Z2403@Z2401) (let ((Z2406@subst-labels Z2403@Z2401) (Z2407@subst-names Z2402@Z23ff)) (let ((Z240a@rib (Zddd@make-top-rib Z2407@subst-names Z2406@subst-labels))) (letrec* ((Z240d@wrap (lambda (Z2488@x) (make-simple-struct 'stx '5 (list Z2488@x Zaf6@top-mark* (list Z240a@rib) '()))))) (let ((Z240e@b* (map Z240d@wrap Z23df@b*)) (Z240f@main-exp* (map Z240d@wrap Z23dd@main-exp*)) (Z2410@rtc (Zddf@make-collector)) (Z2411@vtc (Zddf@make-collector))) (let ((Z241e@Z2417 Zde1@inv-collector) (Z241f@Z2419 Zde3@vis-collector) (Z2420@Z241b Z2410@rtc) (Z2421@Z241d Z2411@vtc)) (let ((Z2426@swap (lambda () (begin (let ((Z2428@t (Z241e@Z2417))) (begin (Z241e@Z2417 Z2420@Z241b) (set! Z2420@Z241b Z2428@t))) (let ((Z242a@t (Z241f@Z2419))) (begin (Z241f@Z2419 Z2421@Z241d) (set! Z2421@Z241d Z242a@t))))))) (dynamic-wind Z2426@swap (lambda () (call-with-values (lambda () (Zde7@chi-library-internal Z240e@b* Z240a@rib Z23e0@top?)) (lambda (Z2438@Z242d Z2439@Z242f Z243a@Z2431 Z243b@Z2433 Z243c@Z2435 Z243d@Z2437) (let ((Z2444@internal-exp* Z243d@Z2437) (Z2445@rhs* Z243c@Z2435) (Z2446@lex* Z243b@Z2433) (Z2447@mr Z243a@Z2431) (Z2448@r Z2439@Z242f) (Z2449@init* Z2438@Z242d)) (call-with-values (lambda () (Zdd5@parse-exports (append Z240f@main-exp* Z2444@internal-exp*))) (lambda (Z2454@Z2451 Z2455@Z2453) (let ((Z2458@exp-id* Z2455@Z2453) (Z2459@exp-name* Z2454@Z2451)) (begin (Zb2e@seal-rib! Z240a@rib) (let ((Z245c@init* (Zd97@chi-expr* Z2449@init* Z2448@r Z2447@mr))) (let ((Z245e@rhs* (Zdab@chi-rhs* Z2445@rhs* Z2448@r Z2447@mr))) (begin (Zb30@unseal-rib! Z240a@rib) (let ((Z2460@loc* (map Zafc@gen-global Z2446@lex*)) (Z2461@export-subst (Ze43@make-export-subst Z2459@exp-name* Z2458@exp-id*))) (letrec* ((Z2465@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (Ze45@make-export-env/macros Z2446@lex* Z2460@loc* Z2448@r)) (lambda (Z246c@Z2467 Z246d@Z2469 Z246e@Z246b) (let ((Z2472@macro* Z246e@Z246b) (Z2473@global* Z246d@Z2469) (Z2474@export-env Z246c@Z2467)) (begin (for-each (lambda (Z2478@s) (let ((Z247a@name (car Z2478@s)) (Z247b@label (cdr Z2478@s))) (let ((Z247e@p (assq Z247b@label Z2474@export-env))) (if Z247e@p (let ((Z2480@b (cdr Z247e@p))) (let ((Z2482@type (car Z2480@b))) (if (eq? Z2482@type 'mutable) (Ze59@syntax-violation 'export Z2465@errstr Z247a@name) (void)))) (void))))) Z2461@export-subst) (let ((Z2484@invoke-body (Zadd@Za43@build-library-letrec* '#f Z23dc@name Z2446@lex* Z2460@loc* Z245e@rhs* (if (null? Z245c@init*) (Zad8@Za39@build-void) (Zad7@Za37@build-sequence '#f Z245c@init*)))) (Z2485@invoke-definitions (map Zad4@Z996@build-global-define (map cdr Z2473@global*)))) (values (Z23e7@itc) (Z2410@rtc) (Z2411@vtc) (Zad7@Za37@build-sequence '#f (append Z2485@invoke-definitions (list Z2484@invoke-body))) Z2472@macro* Z2461@export-subst Z2474@export-env))))))))))))))))))) Z2426@swap)))))))))) Z23f8@swap)))))) (set! Z2884@Zdeb@library-body-expander Zdeb@library-body-expander) (set! Zded@core-library-expander (lambda (Z248a@e Z248b@verify-name) (call-with-values (lambda () (Zdd9@parse-library Z248a@e)) (lambda (Z2496@Z248f Z2497@Z2491 Z2498@Z2493 Z2499@Z2495) (let ((Z249e@b* Z2499@Z2495) (Z249f@imp* Z2498@Z2493) (Z24a0@exp* Z2497@Z2491) (Z24a1@name* Z2496@Z248f)) (call-with-values (lambda () (Zdd7@parse-library-name Z24a1@name*)) (lambda (Z24aa@Z24a7 Z24ab@Z24a9) (let ((Z24ae@ver Z24ab@Z24a9) (Z24af@name Z24aa@Z24a7)) (begin (Z248b@verify-name Z24af@name) (call-with-values (lambda () (Zdeb@library-body-expander Z24af@name Z24a0@exp* Z249f@imp* Z249e@b* '#f)) (lambda (Z24c0@Z24b3 Z24c1@Z24b5 Z24c2@Z24b7 Z24c3@Z24b9 Z24c4@Z24bb Z24c5@Z24bd Z24c6@Z24bf) (let ((Z24ce@export-env Z24c6@Z24bf) (Z24cf@export-subst Z24c5@Z24bd) (Z24d0@visit-code Z24c4@Z24bb) (Z24d1@invoke-code Z24c3@Z24b9) (Z24d2@visit-req* Z24c2@Z24b7) (Z24d3@invoke-req* Z24c1@Z24b5) (Z24d4@imp* Z24c0@Z24b3)) (values Z24af@name Z24ae@ver Z24d4@imp* Z24d3@invoke-req* Z24d2@visit-req* Z24d1@invoke-code Z24d0@visit-code Z24cf@export-subst Z24ce@export-env))))))))))))) (set! Z2885@Zded@core-library-expander Zded@core-library-expander) (set! Zdef@parse-top-level-program (lambda (Z24dc@e*) (let ((Z24de@t Z24dc@e*)) (let ((Z24e0@ls/false (Zd79@syntax-dispatch Z24de@t '((any . each-any) . each-any)))) (if (and Z24e0@ls/false (apply (lambda (Z24e2@import Z24e3@imp* Z24e4@b*) (eq? (Ze5f@syntax->datum Z24e2@import) 'import)) Z24e0@ls/false)) (apply (lambda (Z24e8@import Z24e9@imp* Z24ea@b*) (values Z24e9@imp* Z24ea@b*)) Z24e0@ls/false) (let ((Z24ee@t Z24de@t)) (let ((Z24f0@ls/false (Zd79@syntax-dispatch Z24ee@t '((any . any) . any)))) (if (and Z24f0@ls/false (apply (lambda (Z24f2@import Z24f3@x Z24f4@y) (eq? (Ze5f@syntax->datum Z24f2@import) 'import)) Z24f0@ls/false)) (apply (lambda (Z24f8@import Z24f9@x Z24fa@y) (Ze59@syntax-violation 'expander '"invalid syntax of top-level program" (Zb6c@syntax-car Z24dc@e*))) Z24f0@ls/false) (let ((Z24fe@t Z24ee@t)) (let ((Z2500@ls/false (Zd79@syntax-dispatch Z24fe@t '_))) (if Z2500@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) Z2500@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z24fe@t)))))))))))) (set! Z2886@Zdef@parse-top-level-program Zdef@parse-top-level-program) (set! Zdf1@top-level-expander (lambda (Z2502@e*) (call-with-values (lambda () (Zdef@parse-top-level-program Z2502@e*)) (lambda (Z2508@Z2505 Z2509@Z2507) (let ((Z250c@b* Z2509@Z2507) (Z250d@imp* Z2508@Z2505)) (call-with-values (lambda () (Zdeb@library-body-expander '() '() Z250d@imp* Z250c@b* '#t)) (lambda (Z251e@Z2511 Z251f@Z2513 Z2520@Z2515 Z2521@Z2517 Z2522@Z2519 Z2523@Z251b Z2524@Z251d) (let ((Z252c@export-env Z2524@Z251d) (Z252d@export-subst Z2523@Z251b) (Z252e@visit-code Z2522@Z2519) (Z252f@invoke-code Z2521@Z2517) (Z2530@visit-req* Z2520@Z2515) (Z2531@invoke-req* Z251f@Z2513) (Z2532@imp* Z251e@Z2511)) (values Z2531@invoke-req* Z252f@invoke-code))))))))) (set! Z2887@Zdf1@top-level-expander Zdf1@top-level-expander) (set! Zdf3@rp (Z6bf@Z59a@make-record-printer 'env (lambda (Z253a@x Z253b@p Z253c@wr) (display '"#<environment>" Z253b@p)))) (set! Z2888@Zdf3@rp Zdf3@rp) (set! Zdfd@env? (lambda (Z2540@x) (and (simple-struct? Z2540@x) (eq? (simple-struct-name Z2540@x) 'env)))) (set! Z2889@Zdfd@env? Zdfd@env?) (set! Zdff@env-names (lambda (Z2542@x) (simple-struct-ref Z2542@x '0))) (set! Z288a@Zdff@env-names Zdff@env-names) (set! Ze01@set-env-names! (lambda (Z2544@x Z2545@val) (simple-struct-set! Z2544@x '0 Z2545@val))) (set! Z288b@Ze01@set-env-names! Ze01@set-env-names!) (set! Ze03@env-labels (lambda (Z2548@x) (simple-struct-ref Z2548@x '1))) (set! Z288c@Ze03@env-labels Ze03@env-labels) (set! Ze05@set-env-labels! (lambda (Z254a@x Z254b@val) (simple-struct-set! Z254a@x '1 Z254b@val))) (set! Z288d@Ze05@set-env-labels! Ze05@set-env-labels!) (set! Ze07@env-itc (lambda (Z254e@x) (simple-struct-ref Z254e@x '2))) (set! Z288e@Ze07@env-itc Ze07@env-itc) (set! Ze09@set-env-itc! (lambda (Z2550@x Z2551@val) (simple-struct-set! Z2550@x '2 Z2551@val))) (set! Z288f@Ze09@set-env-itc! Ze09@set-env-itc!) (set! Ze0b@dummy '3) (set! Z2890@Ze0b@dummy Ze0b@dummy) (set! Ze0d@rp (Z6bf@Z59a@make-record-printer 'interaction-env (lambda (Z2554@x Z2555@p Z2556@wr) (display '"#<environment>" Z2555@p)))) (set! Z2891@Ze0d@rp Ze0d@rp) (set! Ze17@interaction-env? (lambda (Z255a@x) (and (simple-struct? Z255a@x) (eq? (simple-struct-name Z255a@x) 'interaction-env)))) (set! Z2892@Ze17@interaction-env? Ze17@interaction-env?) (set! Ze19@interaction-env-rib (lambda (Z255c@x) (simple-struct-ref Z255c@x '0))) (set! Z2893@Ze19@interaction-env-rib Ze19@interaction-env-rib) (set! Ze1b@set-interaction-env-rib! (lambda (Z255e@x Z255f@val) (simple-struct-set! Z255e@x '0 Z255f@val))) (set! Z2894@Ze1b@set-interaction-env-rib! Ze1b@set-interaction-env-rib!) (set! Ze1d@interaction-env-r (lambda (Z2562@x) (simple-struct-ref Z2562@x '1))) (set! Z2895@Ze1d@interaction-env-r Ze1d@interaction-env-r) (set! Ze1f@set-interaction-env-r! (lambda (Z2564@x Z2565@val) (simple-struct-set! Z2564@x '1 Z2565@val))) (set! Z2896@Ze1f@set-interaction-env-r! Ze1f@set-interaction-env-r!) (set! Ze21@interaction-env-locs (lambda (Z2568@x) (simple-struct-ref Z2568@x '2))) (set! Z2897@Ze21@interaction-env-locs Ze21@interaction-env-locs) (set! Ze23@set-interaction-env-locs! (lambda (Z256a@x Z256b@val) (simple-struct-set! Z256a@x '2 Z256b@val))) (set! Z2898@Ze23@set-interaction-env-locs! Ze23@set-interaction-env-locs!) (set! Ze25@dummy '3) (set! Z2899@Ze25@dummy Ze25@dummy) (set! Ze27@interaction-environment-symbols (lambda () (Ze2f@environment-symbols (Ze67@interaction-environment)))) (set! Z289a@Ze27@interaction-environment-symbols Ze27@interaction-environment-symbols) (set! Ze29@environment-bindings (lambda (Z256e@e) (vector->list (vector-map (lambda (Z2570@name Z2571@label) (Ze2b@parse-binding (cons Z2570@name (Z98d@Z7da@imported-label->binding Z2571@label)))) (Zdff@env-names Z256e@e) (Ze03@env-labels Z256e@e))))) (set! Z289b@Ze29@environment-bindings Ze29@environment-bindings) (set! Ze2b@parse-binding (lambda (Z2574@b) (cons (car Z2574@b) (let ((Z2576@t (cadr Z2574@b))) (if (memv Z2576@t '(core-prim global)) 'procedure (if (memv Z2576@t '(core-macro macro global-macro)) 'syntax (if (memv Z2576@t '($core-rtd)) 'record (if (eq? (car Z2574@b) (cadr Z2574@b)) 'syntax 'unknown)))))))) (set! Z289c@Ze2b@parse-binding Ze2b@parse-binding) (set! Ze2d@environment? (lambda (Z2578@x) (or (Zdfd@env? Z2578@x) (Ze17@interaction-env? Z2578@x)))) (set! Z289d@Ze2d@environment? Ze2d@environment?) (set! Ze2f@environment-symbols (lambda (Z257a@x) (if (Zdfd@env? Z257a@x) (vector->list (Zdff@env-names Z257a@x)) (if (Ze17@interaction-env? Z257a@x) (map values (Zb10@rib-sym* (Ze19@interaction-env-rib Z257a@x))) (assertion-violation 'environment-symbols '"not an environment" Z257a@x))))) (set! Z289e@Ze2f@environment-symbols Ze2f@environment-symbols) (set! Ze31@environment (lambda Z257c@imp* (let ((Z257e@itc (Zddf@make-collector))) (let ((Z2584@Z2581 Zde5@imp-collector) (Z2585@Z2583 Z257e@itc)) (let ((Z2588@swap (lambda () (let ((Z258a@t (Z2584@Z2581))) (begin (Z2584@Z2581 Z2585@Z2583) (set! Z2585@Z2583 Z258a@t)))))) (dynamic-wind Z2588@swap (lambda () (call-with-values (lambda () (Zddb@parse-import-spec* Z257c@imp*)) (lambda (Z2590@Z258d Z2591@Z258f) (let ((Z2594@subst-labels Z2591@Z258f) (Z2595@subst-names Z2590@Z258d)) (make-simple-struct 'env '4 (list Z2595@subst-names Z2594@subst-labels Z257e@itc)))))) Z2588@swap)))))) (set! Z289f@Ze31@environment Ze31@environment) (set! Ze33@null-environment (lambda (Z2598@n) (begin (if (not (eqv? Z2598@n '5)) (assertion-violation 'null-environment '"not 5" Z2598@n) (void)) (Ze31@environment '(psyntax null-environment-5))))) (set! Z28a0@Ze33@null-environment Ze33@null-environment) (set! Ze35@scheme-report-environment (lambda (Z259a@n) (begin (if (not (eqv? Z259a@n '5)) (assertion-violation 'scheme-report-environment '"not 5" Z259a@n) (void)) (Ze31@environment '(psyntax scheme-report-environment-5))))) (set! Z28a1@Ze35@scheme-report-environment Ze35@scheme-report-environment) (set! Ze37@expand (lambda (Z259c@x Z259d@env) (if (Zdfd@env? Z259d@env) (let ((Z25a0@rib (Zddd@make-top-rib (Zdff@env-names Z259d@env) (Ze03@env-labels Z259d@env)))) (let ((Z25a2@x (make-simple-struct 'stx '5 (list Z259c@x Zaf6@top-mark* (list Z25a0@rib) '()))) (Z25a3@itc (Ze07@env-itc Z259d@env)) (Z25a4@rtc (Zddf@make-collector)) (Z25a5@vtc (Zddf@make-collector))) (let ((Z25aa@x (let ((Z25bc@Z25ad Ze69@top-level-context) (Z25bd@Z25af Zde1@inv-collector) (Z25be@Z25b1 Zde3@vis-collector) (Z25bf@Z25b3 Zde5@imp-collector) (Z25c0@Z25b5 '#f) (Z25c1@Z25b7 Z25a4@rtc) (Z25c2@Z25b9 Z25a5@vtc) (Z25c3@Z25bb Z25a3@itc)) (let ((Z25cc@swap (lambda () (begin (let ((Z25ce@t (Z25bc@Z25ad))) (begin (Z25bc@Z25ad Z25c0@Z25b5) (set! Z25c0@Z25b5 Z25ce@t))) (let ((Z25d0@t (Z25bd@Z25af))) (begin (Z25bd@Z25af Z25c1@Z25b7) (set! Z25c1@Z25b7 Z25d0@t))) (let ((Z25d2@t (Z25be@Z25b1))) (begin (Z25be@Z25b1 Z25c2@Z25b9) (set! Z25c2@Z25b9 Z25d2@t))) (let ((Z25d4@t (Z25bf@Z25b3))) (begin (Z25bf@Z25b3 Z25c3@Z25bb) (set! Z25c3@Z25bb Z25d4@t))))))) (dynamic-wind Z25cc@swap (lambda () (Zd9b@chi-expr Z25a2@x '() '())) Z25cc@swap))))) (begin (Zb2e@seal-rib! Z25a0@rib) (values Z25aa@x (Z25a4@rtc)))))) (if (Ze17@interaction-env? Z259d@env) (let ((Z25d6@rib (Ze19@interaction-env-rib Z259d@env)) (Z25d7@r (Ze1d@interaction-env-r Z259d@env)) (Z25d8@rtc (Zddf@make-collector))) (let ((Z25dc@x (make-simple-struct 'stx '5 (list Z259c@x Zaf6@top-mark* (list Z25d6@rib) '())))) (call-with-values (lambda () (let ((Z25f2@Z25e3 Ze69@top-level-context) (Z25f3@Z25e5 Zde1@inv-collector) (Z25f4@Z25e7 Zde3@vis-collector) (Z25f5@Z25e9 Zde5@imp-collector) (Z25f6@Z25eb Z259d@env) (Z25f7@Z25ed Z25d8@rtc) (Z25f8@Z25ef (Zddf@make-collector)) (Z25f9@Z25f1 (Zddf@make-collector))) (let ((Z2602@swap (lambda () (begin (let ((Z2604@t (Z25f2@Z25e3))) (begin (Z25f2@Z25e3 Z25f6@Z25eb) (set! Z25f6@Z25eb Z2604@t))) (let ((Z2606@t (Z25f3@Z25e5))) (begin (Z25f3@Z25e5 Z25f7@Z25ed) (set! Z25f7@Z25ed Z2606@t))) (let ((Z2608@t (Z25f4@Z25e7))) (begin (Z25f4@Z25e7 Z25f8@Z25ef) (set! Z25f8@Z25ef Z2608@t))) (let ((Z260a@t (Z25f5@Z25e9))) (begin (Z25f5@Z25e9 Z25f9@Z25f1) (set! Z25f9@Z25f1 Z260a@t))))))) (dynamic-wind Z2602@swap (lambda () (Zde9@chi-interaction-expr Z25dc@x Z25d6@rib Z25d7@r)) Z2602@swap)))) (lambda (Z260c@Z25df Z260d@Z25e1) (let ((Z2610@r^ Z260d@Z25e1) (Z2611@e Z260c@Z25df)) (begin (Ze1f@set-interaction-env-r! Z259d@env Z2610@r^) (values Z2611@e (Z25d8@rtc)))))))) (assertion-violation 'expand '"not an environment" Z259d@env))))) (set! Z28a2@Ze37@expand Ze37@expand) (set! Ze39@eval (lambda (Z2614@x Z2615@env) (begin (if (not (Ze2d@environment? Z2615@env)) (error 'eval '"not an environment" Z2615@env) (void)) (call-with-values (lambda () (Ze37@expand Z2614@x Z2615@env)) (lambda (Z261c@Z2619 Z261d@Z261b) (let ((Z2620@invoke-req* Z261d@Z261b) (Z2621@x Z261c@Z2619)) (begin (for-each Z98e@Z7dc@invoke-library Z2620@invoke-req*) (eval-core (Z718@Z6d0@expanded->core Z2621@x))))))))) (set! Z28a3@Ze39@eval Ze39@eval) (set! Ze3b@library-expander (lambda Z2692 (let ((Z2693 (length Z2692))) (if (= Z2693 '3) (apply (lambda (Z2624@x Z2625@filename Z2626@verify-name) (letrec* ((Z262b@build-visit-code (lambda (Z2680@macro*) (if (null? Z2680@macro*) (Zad8@Za39@build-void) (Zad7@Za37@build-sequence '#f (map (lambda (Z2682@x) (let ((Z2684@loc (car Z2682@x)) (Z2685@src (cddr Z2682@x))) (list 'set! Z2684@loc Z2685@src))) Z2680@macro*))))) (Z262d@visit! (lambda (Z2678@macro*) (for-each (lambda (Z267a@x) (let ((Z267c@loc (car Z267a@x)) (Z267d@proc (cadr Z267a@x))) (set-symbol-value! Z267c@loc Z267d@proc))) Z2678@macro*)))) (call-with-values (lambda () (Zded@core-library-expander Z2624@x Z2626@verify-name)) (lambda (Z2640@Z262f Z2641@Z2631 Z2642@Z2633 Z2643@Z2635 Z2644@Z2637 Z2645@Z2639 Z2646@Z263b Z2647@Z263d Z2648@Z263f) (let ((Z2652@export-env Z2648@Z263f) (Z2653@export-subst Z2647@Z263d) (Z2654@macro* Z2646@Z263b) (Z2655@invoke-code Z2645@Z2639) (Z2656@vis* Z2644@Z2637) (Z2657@inv* Z2643@Z2635) (Z2658@imp* Z2642@Z2633) (Z2659@ver Z2641@Z2631) (Z265a@name Z2640@Z262f)) (let ((Z2664@id (gensym)) (Z2665@name Z265a@name) (Z2666@ver Z2659@ver) (Z2667@imp* (map Z992@Z7e4@library-spec Z2658@imp*)) (Z2668@vis* (map Z992@Z7e4@library-spec Z2656@vis*)) (Z2669@inv* (map Z992@Z7e4@library-spec Z2657@inv*)) (Z266a@visit-proc (lambda () (Z262d@visit! Z2654@macro*))) (Z266b@invoke-proc (lambda () (eval-core (Z718@Z6d0@expanded->core Z2655@invoke-code)))) (Z266c@visit-code (Z262b@build-visit-code Z2654@macro*)) (Z266d@invoke-code Z2655@invoke-code)) (begin (Z98c@Z7d8@install-library Z2664@id Z2665@name Z2666@ver Z2667@imp* Z2668@vis* Z2669@inv* Z2653@export-subst Z2652@export-env Z266a@visit-proc Z266b@invoke-proc Z266c@visit-code Z266d@invoke-code '#t Z2625@filename) (values Z2664@id Z2665@name Z2666@ver Z2667@imp* Z2668@vis* Z2669@inv* Z266d@invoke-code Z266c@visit-code Z2653@export-subst Z2652@export-env)))))))) Z2692) (if (= Z2693 '2) (apply (lambda (Z2688@x Z2689@filename) (Ze3b@library-expander Z2688@x Z2689@filename (lambda (Z268c@x) (values)))) Z2692) (if (= Z2693 '1) (apply (lambda (Z268e@x) (Ze3b@library-expander Z268e@x '#f (lambda (Z2690@x) (values)))) Z2692) (error 'apply '"invalid arg count"))))))) (set! Z28a4@Ze3b@library-expander Ze3b@library-expander) (set! Ze3d@boot-library-expand (lambda (Z2694@x) (call-with-values (lambda () (Ze3b@library-expander Z2694@x)) (lambda (Z26aa@Z2697 Z26ab@Z2699 Z26ac@Z269b Z26ad@Z269d Z26ae@Z269f Z26af@Z26a1 Z26b0@Z26a3 Z26b1@Z26a5 Z26b2@Z26a7 Z26b3@Z26a9) (let ((Z26be@export-env Z26b3@Z26a9) (Z26bf@export-subst Z26b2@Z26a7) (Z26c0@visit-code Z26b1@Z26a5) (Z26c1@invoke-code Z26b0@Z26a3) (Z26c2@inv* Z26af@Z26a1) (Z26c3@vis* Z26ae@Z269f) (Z26c4@imp* Z26ad@Z269d) (Z26c5@ver Z26ac@Z269b) (Z26c6@name Z26ab@Z2699) (Z26c7@id Z26aa@Z2697)) (values Z26c6@name Z26c1@invoke-code Z26bf@export-subst Z26be@export-env)))))) (set! Z28a5@Ze3d@boot-library-expand Ze3d@boot-library-expand) (set! Ze3f@rev-map-append (lambda (Z26d2@f Z26d3@ls Z26d4@ac) (if (null? Z26d3@ls) Z26d4@ac (Ze3f@rev-map-append Z26d2@f (cdr Z26d3@ls) (cons (Z26d2@f (car Z26d3@ls)) Z26d4@ac))))) (set! Z28a6@Ze3f@rev-map-append Ze3f@rev-map-append) (set! Ze41@build-exports (lambda (Z26d8@lex*+loc* Z26d9@init*) (Zad7@Za37@build-sequence '#f (cons (Zad8@Za39@build-void) (Ze3f@rev-map-append (lambda (Z26dc@x) (list 'set! (cdr Z26dc@x) (car Z26dc@x))) Z26d8@lex*+loc* Z26d9@init*))))) (set! Z28a7@Ze41@build-exports Ze41@build-exports) (set! Ze43@make-export-subst (lambda (Z26de@name* Z26df@id*) (map (lambda (Z26e2@name Z26e3@id) (let ((Z26e6@label (Zb88@id->label Z26e3@id))) (begin (if (not Z26e6@label) (Ze59@syntax-violation '#f '"cannot export unbound identifier" Z26e3@id) (void)) (cons Z26e2@name Z26e6@label)))) Z26de@name* Z26df@id*))) (set! Z28a8@Ze43@make-export-subst Ze43@make-export-subst) (set! Ze45@make-export-env/macros (lambda (Z26e8@lex* Z26e9@loc* Z26ea@r) (letrec* ((Z26ef@lookup (lambda (Z270c@x) (let Z2714@f ((Z270e@x Z270c@x) (Z270f@lex* Z26e8@lex*) (Z2710@loc* Z26e9@loc*)) (if (pair? Z270f@lex*) (if (eq? Z270e@x (car Z270f@lex*)) (car Z2710@loc*) (Z2714@f Z270e@x (cdr Z270f@lex*) (cdr Z2710@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let Z26f8@f ((Z26f0@r Z26ea@r) (Z26f1@env '()) (Z26f2@global* '()) (Z26f3@macro* '())) (if (null? Z26f0@r) (values Z26f1@env Z26f2@global* Z26f3@macro*) (let ((Z26fa@x (car Z26f0@r))) (let ((Z26fc@label (car Z26fa@x)) (Z26fd@b (cdr Z26fa@x))) (let ((Z2700@t (Zb8e@binding-type Z26fd@b))) (if (memv Z2700@t '(lexical)) (let ((Z2702@v (Zb90@binding-value Z26fd@b))) (let ((Z2704@loc (Z26ef@lookup (Zd03@lexical-var Z2702@v))) (Z2705@type (if (Zd05@lexical-mutable? Z2702@v) 'mutable 'global))) (Z26f8@f (cdr Z26f0@r) (cons (cons* Z26fc@label Z2705@type Z2704@loc) Z26f1@env) (cons (cons (Zd03@lexical-var Z2702@v) Z2704@loc) Z26f2@global*) Z26f3@macro*))) (if (memv Z2700@t '(local-macro)) (let ((Z2708@loc (gensym))) (Z26f8@f (cdr Z26f0@r) (cons (cons* Z26fc@label 'global-macro Z2708@loc) Z26f1@env) Z26f2@global* (cons (cons Z2708@loc (Zb90@binding-value Z26fd@b)) Z26f3@macro*))) (if (memv Z2700@t '(local-macro!)) (let ((Z270a@loc (gensym))) (Z26f8@f (cdr Z26f0@r) (cons (cons* Z26fc@label 'global-macro! Z270a@loc) Z26f1@env) Z26f2@global* (cons (cons Z270a@loc (Zb90@binding-value Z26fd@b)) Z26f3@macro*))) (if (memv Z2700@t '($rtd $module)) (Z26f8@f (cdr Z26f0@r) (cons Z26fa@x Z26f1@env) Z26f2@global* Z26f3@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (Zb8e@binding-type Z26fd@b) (Zb90@binding-value Z26fd@b)))))))))))))) (set! Z28a9@Ze45@make-export-env/macros Ze45@make-export-env/macros) (set! Ze47@generate-temporaries (lambda (Z2716@ls) (let ((Z2718@t Z2716@ls)) (let ((Z271a@ls/false (Zd79@syntax-dispatch Z2718@t 'each-any))) (if Z271a@ls/false (apply (lambda (Z271c@ls) (map (lambda (Z271e@x) (make-simple-struct 'stx '5 (list (let ((Z2720@x (Ze5f@syntax->datum Z271e@x))) (if (or (symbol? Z2720@x) (string? Z2720@x)) (gensym Z2720@x) (gensym 't))) Zaf6@top-mark* '() '()))) Z271c@ls)) Z271a@ls/false) (let ((Z2722@t Z2718@t)) (let ((Z2724@ls/false (Zd79@syntax-dispatch Z2722@t '_))) (if Z2724@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) Z2724@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z2722@t))))))))) (set! Z28aa@Ze47@generate-temporaries Ze47@generate-temporaries) (set! Ze49@free-identifier=? (lambda (Z2726@x Z2727@y) (if (Zb72@id? Z2726@x) (if (Zb72@id? Z2727@y) (Zb78@free-id=? Z2726@x Z2727@y) (assertion-violation 'free-identifier=? '"not an identifier" Z2727@y)) (assertion-violation 'free-identifier=? '"not an identifier" Z2726@x)))) (set! Z28ab@Ze49@free-identifier=? Ze49@free-identifier=?) (set! Ze4b@bound-identifier=? (lambda (Z272a@x Z272b@y) (if (Zb72@id? Z272a@x) (if (Zb72@id? Z272b@y) (Zb76@bound-id=? Z272a@x Z272b@y) (assertion-violation 'bound-identifier=? '"not an identifier" Z272b@y)) (assertion-violation 'bound-identifier=? '"not an identifier" Z272a@x)))) (set! Z28ac@Ze4b@bound-identifier=? Ze4b@bound-identifier=?) (set! Ze4d@make-source-condition (lambda (Z272e@x) (letrec* ((Z2738@Z2733 (make-record-type-descriptor '&source-information &condition-rtd 'Z2736 '#f '#f '#((immutable file-name) (immutable line)))) (Z273a@Z2735 '#f) (Z273c@Z2734 (make-record-constructor-descriptor Z2738@Z2733 &condition-rcd Z273a@Z2735)) (Z273f@Z2732 (record-predicate Z2738@Z2733)) (Z2741@make-source-condition (record-constructor Z273c@Z2734)) (Z2743@Z2730 (record-accessor Z2738@Z2733 '0)) (Z2745@Z2731 (record-accessor Z2738@Z2733 '1)) (Z2747@source-condition? (condition-predicate Z2738@Z2733)) (Z2749@source-filename (condition-accessor Z2738@Z2733 Z2743@Z2730)) (Z274b@source-character (condition-accessor Z2738@Z2733 Z2745@Z2731))) (if (and (pair? Z272e@x) (pair? (cdr Z272e@x))) (Z2741@make-source-condition (car Z272e@x) (cadr Z272e@x)) (condition))))) (set! Z28ad@Ze4d@make-source-condition Ze4d@make-source-condition) (set! Ze4f@extract-position-condition (lambda (Z274c@x) (Ze4d@make-source-condition (Ze51@expression-position Z274c@x)))) (set! Z28ae@Ze4f@extract-position-condition Ze4f@extract-position-condition) (set! Ze51@expression-position (lambda (Z274e@x) (and (Zb3e@stx? Z274e@x) (let ((Z2750@x (Zb40@stx-expr Z274e@x))) (and (Z6b6@Z588@annotation? Z2750@x) (Z6b7@Z58a@annotation-source Z2750@x)))))) (set! Z28af@Ze51@expression-position Ze51@expression-position) (set! Ze53@assertion-error (lambda (Z2752@expr Z2753@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list Z2752@expr)) (Ze4d@make-source-condition Z2753@pos))))) (set! Z28b0@Ze53@assertion-error Ze53@assertion-error) (set! Ze55@syntax-error (lambda (Z2756@x . Z2758@args) (begin (if (not (for-all string? Z2758@args)) (assertion-violation 'syntax-error '"invalid argument" Z2758@args) (void)) (raise (condition (make-message-condition (if (null? Z2758@args) '"invalid syntax" (apply string-append Z2758@args))) (make-syntax-violation (Ze5f@syntax->datum Z2756@x) '#f) (Ze4f@extract-position-condition Z2756@x)))))) (set! Z28b1@Ze55@syntax-error Ze55@syntax-error) (set! Ze57@syntax-violation* (lambda (Z275a@who Z275b@msg Z275c@form Z275d@condition-object) (begin (if (not (string? Z275b@msg)) (assertion-violation 'syntax-violation '"message is not a string" Z275b@msg) (void)) (let ((Z2762@who (if (or (string? Z275a@who) (symbol? Z275a@who)) Z275a@who (if (not Z275a@who) (let ((Z2764@t Z275c@form)) (let ((Z2766@ls/false (Zd79@syntax-dispatch Z2764@t 'any))) (if (and Z2766@ls/false (apply (lambda (Z2768@id) (Zb72@id? Z2768@id)) Z2766@ls/false)) (apply (lambda (Z276a@id) (Ze5f@syntax->datum Z276a@id)) Z2766@ls/false) (let ((Z276c@t Z2764@t)) (let ((Z276e@ls/false (Zd79@syntax-dispatch Z276c@t '(any . any)))) (if (and Z276e@ls/false (apply (lambda (Z2770@id Z2771@rest) (Zb72@id? Z2770@id)) Z276e@ls/false)) (apply (lambda (Z2774@id Z2775@rest) (Ze5f@syntax->datum Z2774@id)) Z276e@ls/false) (let ((Z2778@t Z276c@t)) (let ((Z277a@ls/false (Zd79@syntax-dispatch Z2778@t '_))) (if Z277a@ls/false (apply (lambda () '#f) Z277a@ls/false) (Ze59@syntax-violation '#f '"invalid syntax" Z2778@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" Z275a@who))))) (raise (condition (if Z2762@who (make-who-condition Z2762@who) (condition)) (make-message-condition Z275b@msg) Z275d@condition-object (Ze4f@extract-position-condition Z275c@form))))))) (set! Z28b2@Ze57@syntax-violation* Ze57@syntax-violation*) (set! Ze59@syntax-violation (lambda Z278a (let ((Z278b (length Z278a))) (if (= Z278b '3) (apply (lambda (Z277c@who Z277d@msg Z277e@form) (Ze59@syntax-violation Z277c@who Z277d@msg Z277e@form '#f)) Z278a) (if (= Z278b '4) (apply (lambda (Z2782@who Z2783@msg Z2784@form Z2785@subform) (Ze57@syntax-violation* Z2782@who Z2783@msg Z2784@form (make-syntax-violation (Ze5f@syntax->datum Z2784@form) (Ze5f@syntax->datum Z2785@subform)))) Z278a) (error 'apply '"invalid arg count")))))) (set! Z28b3@Ze59@syntax-violation Ze59@syntax-violation) (set! Ze5b@identifier? (lambda (Z278c@x) (Zb72@id? Z278c@x))) (set! Z28b4@Ze5b@identifier? Ze5b@identifier?) (set! Ze5d@datum->syntax (lambda (Z278e@id Z278f@datum) (if (Zb72@id? Z278e@id) (Zb52@datum->stx Z278e@id Z278f@datum) (assertion-violation 'datum->syntax '"not an identifier" Z278e@id)))) (set! Z28b5@Ze5d@datum->syntax Ze5d@datum->syntax) (set! Ze5f@syntax->datum (lambda (Z2792@x) (Zb86@stx->datum Z2792@x))) (set! Z28b6@Ze5f@syntax->datum Ze5f@syntax->datum) (set! Ze61@ungensym-all (lambda (Z2794@code) (if (pair? Z2794@code) (cons (Ze61@ungensym-all (car Z2794@code)) (Ze61@ungensym-all (cdr Z2794@code))) (if (symbol? Z2794@code) (ungensym Z2794@code) Z2794@code)))) (set! Z28b7@Ze61@ungensym-all Ze61@ungensym-all) (set! Ze63@compile-r6rs-top-level (lambda (Z2796@x*) (call-with-values (lambda () (Zdf1@top-level-expander Z2796@x*)) (lambda (Z279c@Z2799 Z279d@Z279b) (let ((Z27a0@invoke-code Z279d@Z279b) (Z27a1@lib* Z279c@Z2799)) (lambda () (begin (for-each Z98e@Z7dc@invoke-library Z27a1@lib*) (let ((Z27a4@expanded (Z718@Z6d0@expanded->core Z27a0@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (Ze61@ungensym-all Z27a4@expanded)) (void)) (eval-core Z27a4@expanded)))))))))) (set! Z28b8@Ze63@compile-r6rs-top-level Ze63@compile-r6rs-top-level) (set! Ze65@pre-compile-r6rs-top-level (lambda (Z27a6@x*) (call-with-values (lambda () (Zdf1@top-level-expander Z27a6@x*)) (lambda (Z27ac@Z27a9 Z27ad@Z27ab) (let ((Z27b0@invoke-code Z27ad@Z27ab) (Z27b1@lib* Z27ac@Z27a9)) (begin (for-each Z98e@Z7dc@invoke-library Z27b1@lib*) (Z6c0@Z59c@compile-core (Z718@Z6d0@expanded->core Z27b0@invoke-code)))))))) (set! Z28b9@Ze65@pre-compile-r6rs-top-level Ze65@pre-compile-r6rs-top-level) (set! Ze67@interaction-environment (let ((Z27b4@the-env '#f)) (lambda () (or Z27b4@the-env (let ((Z27b6@lib (Z987@Z7ce@find-library-by-name '(mosh interaction))) (Z27b7@rib (Zb26@make-empty-rib))) (begin (let ((Z27ba@subst (Z969@Z792@library-subst Z27b6@lib))) (begin (Zb12@set-rib-sym*! Z27b7@rib (map car Z27ba@subst)) (Zb16@set-rib-mark**! Z27b7@rib (map (lambda (Z27bc@x) Zaf6@top-mark*) Z27ba@subst)) (Zb1a@set-rib-label*! Z27b7@rib (map cdr Z27ba@subst)))) (let ((Z27be@env (make-simple-struct 'interaction-env '4 (list Z27b7@rib '() '())))) (begin (set! Z27b4@the-env Z27be@env) Z27be@env)))))))) (set! Z28ba@Ze67@interaction-environment Ze67@interaction-environment) (set! Ze69@top-level-context (Z6c2@Z5a0@make-parameter '#f)) (set! Z28bb@Ze69@top-level-context Ze69@top-level-context) (Z984@Z7c8@current-library-expander Ze3b@library-expander))
(begin (begin (Z715@Z6ca@current-primitive-locations (lambda (Z2e0b@x) (let ((Z2e0d@t (assq Z2e0b@x '((syntax-error . Z28b1@Ze55@syntax-error) (syntax-dispatch . Z284f@Zd79@syntax-dispatch) (load . Z2a3b@Z28e2@load) (interaction-environment . Z28ba@Ze67@interaction-environment) (library-path . Z97c@Z7b8@library-path) (mosh-cache-dir . Z6c3@Z5a2@mosh-cache-dir) (make-parameter . Z6c2@Z5a0@make-parameter) (make-variable-transformer . Z280c@Zba4@make-variable-transformer) (identifier? . Z28b4@Ze5b@identifier?) (generate-temporaries . Z28aa@Ze47@generate-temporaries) (free-identifier=? . Z28ab@Ze49@free-identifier=?) (syntax->datum . Z28b6@Ze5f@syntax->datum) (datum->syntax . Z28b5@Ze5d@datum->syntax) (bound-identifier=? . Z28ac@Ze4b@bound-identifier=?) (scheme-report-environment . Z28a1@Ze35@scheme-report-environment) (null-environment . Z28a0@Ze33@null-environment) (command-line . Z2a38@Z28dc@command-line) (eval . Z28a3@Ze39@eval) (environment . Z289f@Ze31@environment) (syntax-violation . Z28b3@Ze59@syntax-violation) (assertion-error . Z28b0@Ze53@assertion-error))))) (if Z2e0d@t (cdr Z2e0d@t) '#f)))) (Z98c@Z7d8@install-library 'Z2de8 '(mosh interaction) '() '() '() '() '((regexp? . Z2da8) (alist->eq-hash-table . Z2da4) (format . Z2da1) (string-split . Z2d95) (call-process . Z2d8f) (set-current-directory! . Z2d8b) (expand-path . Z2d8a) (current-directory . Z2d89) (%spawn . Z2d88) (%waitpid . Z2d87) (simple-struct-name . Z2d86) (simple-struct-set! . Z2d85) (simple-struct-ref . Z2d84) (make-simple-struct . Z2d83) (simple-struct? . Z2d82) (pointer-ref-c-int64 . Z2d81) (pointer-ref-c-int32 . Z2d80) (pointer-ref-c-int16 . Z2d7f) (pointer-ref-c-int8 . Z2d7e) (pointer-ref-c-uint64 . Z2d7d) (pointer-ref-c-uint32 . Z2d7c) (pointer-ref-c-uint16 . Z2d7b) (pointer-ref-c-uint8 . Z2d7a) (pointer-set-c-uint64! . Z2d79) (pointer-set-c-uint32! . Z2d78) (pointer-set-c-uint16! . Z2d77) (pointer-set-c-uint8! . Z2d76) (pointer-set-c-int64! . Z2d75) (pointer-set-c-int32! . Z2d74) (pointer-set-c-int16! . Z2d73) (pointer-set-c-int8! . Z2d72) (pointer-set-c-pointer! . Z2d71) (pointer-set-c-double! . Z2d70) (pointer-set-c-float! . Z2d6f) (pointer-set-c-long-long! . Z2d6e) (pointer-set-c-long! . Z2d6d) (pointer-set-c-int! . Z2d6c) (pointer-set-c-short! . Z2d6b) (pointer-set-c-char! . Z2d6a) (pointer-ref-c-pointer . Z2d69) (pointer-ref-c-double . Z2d68) (pointer-ref-c-float . Z2d67) (pointer-ref-c-unsigned-long-long . Z2d66) (pointer-ref-c-signed-long-long . Z2d65) (pointer-ref-c-unsigned-long . Z2d64) (pointer-ref-c-signed-long . Z2d63) (pointer-ref-c-unsigned-int . Z2d62) (pointer-ref-c-signed-int . Z2d61) (pointer-ref-c-unsigned-short . Z2d60) (pointer-ref-c-signed-short . Z2d5f) (pointer-ref-c-unsigned-char . Z2d5e) (pointer-ref-c-signed-char . Z2d5d) (pointer->integer . Z2d5c) (integer->pointer . Z2d5b) (pointer? . Z2d5a) (shared-errno . Z2d59) (%ffi-supported? . Z2d54) (%ffi-pointer->string . Z2d53) (%ffi-call . Z2d52) (%ffi-lookup . Z2d51) (%ffi-open . Z2d50) (null-terminated-utf8->string . Z2d4f) (null-terminated-bytevector->string . Z2d4e) (%exec . Z2d4d) (%fork . Z2d4c) (%pipe . Z2d4b) (p . Z2d4a) (whereis . Z2d2e) (register . Z2d2d) (vm-join! . Z2d2c) (vm-set-value! . Z2d2b) (vm? . Z2d2a) (main-vm? . Z2d29) (vm-eval . Z2d28) (vm-self . Z2d27) (vm-start! . Z2d26) (make-vm . Z2d25) (mutex-try-lock! . Z2d24) (mutex-unlock! . Z2d23) (mutex-lock! . Z2d22) (mutex? . Z2d21) (make-mutex . Z2d20) (condition-variable-notify-all! . Z2d1f) (condition-variable-notify! . Z2d1e) (condition-variable-wait! . Z2d1d) (make-condition-variable . Z2d1c) (write/ss . Z2d1b) (string-upcase . Z2d03) (string-titlecase . Z2d02) (string-normalize-nfkd . Z2d01) (string-normalize-nfkc . Z2d00) (string-normalize-nfd . Z2cff) (string-normalize-nfc . Z2cfe) (string-foldcase . Z2cfd) (string-downcase . Z2cfc) (string-ci>? . Z2cfb) (string-ci>=? . Z2cfa) (string-ci=? . Z2cf9) (string-ci<? . Z2cf8) (string-ci<=? . Z2cf7) (char-whitespace? . Z2cf6) (char-upper-case? . Z2cf5) (char-title-case? . Z2cf4) (char-numeric? . Z2cf3) (char-lower-case? . Z2cf2) (char-general-category . Z2cf1) (char-upcase . Z2cf0) (char-titlecase . Z2cef) (char-foldcase . Z2cee) (char-downcase . Z2ced) (char-ci>? . Z2cec) (char-ci>=? . Z2ceb) (char-ci=? . Z2cea) (char-ci<? . Z2ce9) (char-ci<=? . Z2ce8) (char-alphabetic? . Z2ce7) (make-variable-transformer . Zba3) (identifier? . Ze5a) (generate-temporaries . Ze46) (free-identifier=? . Ze48) (syntax->datum . Ze5e) (datum->syntax . Ze5c) (bound-identifier=? . Ze4a) (record-type-descriptor? . Z2ce6) (record-predicate . Z2ce5) (record-mutator . Z2ce4) (record-constructor . Z2ce3) (record-accessor . Z2ce2) (make-record-type-descriptor . Z2ce1) (make-record-constructor-descriptor . Z2ce0) (record? . Z2cdf) (record-type-uid . Z2cde) (record-type-sealed? . Z2cdd) (record-type-parent . Z2cdc) (record-type-opaque? . Z2cdb) (record-type-name . Z2cda) (record-type-generative? . Z2cd9) (record-type-field-names . Z2cd8) (record-rtd . Z2cd7) (record-field-mutable? . Z2cd6) (delete-file . Z2cd5) (file-exists? . Z2cd4) (vector-sort! . Z2cd3) (vector-sort . Z2cd2) (list-sort . Z2cd1) (symbol-hash . Z2cd0) (string-ci-hash . Z2ccf) (string-hash . Z2cce) (equal-hash . Z2ccd) (hashtable-equivalence-function . Z2ccc) (make-hashtable . Z2ccb) (hashtable-hash-function . Z2cca) (make-eqv-hashtable . Z2cc9) (make-eq-hashtable . Z2cc8) (hashtable? . Z2cc7) (hashtable-update! . Z2cc6) (hashtable-size . Z2cc5) (hashtable-set! . Z2cc4) (hashtable-ref . Z2cc3) (hashtable-mutable? . Z2cc2) (hashtable-keys . Z2cc1) (hashtable-entries . Z2cc0) (hashtable-delete! . Z2cbf) (hashtable-copy . Z2cbe) (hashtable-contains? . Z2cbd) (hashtable-clear! . Z2cbc) (call-with-output-file . Z2cbb) (call-with-input-file . Z2cba) (write-char . Z2cb9) (write . Z2cb8) (with-output-to-file . Z2cb7) (with-input-from-file . Z2cb6) (read-char . Z2cb5) (read . Z2cb4) (peek-char . Z2cb3) (open-output-file . Z2cb2) (open-input-file . Z2cb1) (newline . Z2cb0) (display . Z2caf) (close-output-port . Z2cae) (close-input-port . Z2cad) (eof-object? . Z2cac) (eof-object . Z2cab) (current-error-port . Z2caa) (current-output-port . Z2ca9) (current-input-port . Z2ca8) (output-port? . Z2ca7) (input-port? . Z2ca6) (utf-8-codec . Z2ca5) (utf-16-codec . Z2ca4) (transcoder-error-handling-mode . Z2ca3) (transcoder-eol-style . Z2ca2) (transcoder-codec . Z2ca1) (transcoded-port . Z2ca0) (textual-port? . Z2c9f) (string->bytevector . Z2c9e) (standard-output-port . Z2c9d) (standard-input-port . Z2c9c) (standard-error-port . Z2c9b) (set-port-position! . Z2c9a) (put-u8 . Z2c99) (put-string . Z2c98) (put-datum . Z2c97) (put-char . Z2c96) (put-bytevector . Z2c95) (port? . Z2c94) (port-transcoder . Z2c93) (port-position . Z2c92) (port-has-set-port-position!? . Z2c91) (port-has-port-position? . Z2c90) (port-eof? . Z2c8f) (output-port-buffer-mode . Z2c8e) (open-string-output-port . Z2c8d) (open-string-input-port . Z2c8c) (open-file-output-port . Z2c8b) (open-file-input/output-port . Z2c8a) (open-file-input-port . Z2c89) (open-bytevector-output-port . Z2c88) (open-bytevector-input-port . Z2c87) (native-transcoder . Z2c86) (native-eol-style . Z2c85) (make-transcoder . Z2c84) (latin-1-codec . Z2c83) (make-i/o-write-error . Z2c82) (make-i/o-read-error . Z2c81) (make-i/o-port-error . Z2c80) (make-i/o-invalid-position-error . Z2c7f) (make-i/o-filename-error . Z2c7e) (make-i/o-file-protection-error . Z2c7d) (make-i/o-file-is-read-only-error . Z2c7c) (make-i/o-file-does-not-exist-error . Z2c7b) (make-i/o-file-already-exists-error . Z2c7a) (make-i/o-error . Z2c79) (make-i/o-encoding-error . Z2c78) (make-i/o-decoding-error . Z2c77) (make-custom-textual-output-port . Z2c76) (make-custom-textual-input/output-port . Z2c75) (make-custom-textual-input-port . Z2c74) (make-custom-binary-output-port . Z2c73) (make-custom-binary-input/output-port . Z2c72) (make-custom-binary-input-port . Z2c71) (make-bytevector . Z2c70) (lookahead-u8 . Z2c6f) (lookahead-char . Z2c6e) (i/o-write-error? . Z2c6d) (i/o-read-error? . Z2c6c) (i/o-port-error? . Z2c6b) (i/o-invalid-position-error? . Z2c6a) (i/o-filename-error? . Z2c69) (i/o-file-protection-error? . Z2c68) (i/o-file-is-read-only-error? . Z2c67) (i/o-file-does-not-exist-error? . Z2c66) (i/o-file-already-exists-error? . Z2c65) (i/o-error? . Z2c64) (i/o-error-position . Z2c63) (i/o-error-port . Z2c62) (i/o-error-filename . Z2c61) (i/o-encoding-error? . Z2c60) (i/o-encoding-error-char . Z2c5f) (i/o-decoding-error? . Z2c5e) (get-u8 . Z2c5d) (get-string-n! . Z2c5c) (get-string-n . Z2c5b) (get-string-all . Z2c5a) (get-line . Z2c59) (get-datum . Z2c58) (get-char . Z2c57) (get-bytevector-some . Z2c56) (get-bytevector-n! . Z2c55) (get-bytevector-n . Z2c54) (get-bytevector-all . Z2c53) (flush-output-port . Z2c52) (close-port . Z2c51) (exit . Z2c49) (command-line . Z28db) (string-fill! . Z2c48) (string-set! . Z2c47) (set-cdr! . Z2c46) (set-car! . Z2c45) (remove . Z2c44) (remv . Z2c43) (remp . Z2c42) (remq . Z2c41) (partition . Z2c40) (memv . Z2c3f) (memq . Z2c3e) (memp . Z2c3d) (member . Z2c3c) (exists . Z2c3b) (for-all . Z2c3a) (fold-right . Z2c39) (fold-left . Z2c38) (find . Z2c37) (filter . Z2c36) (cons* . Z2c35) (assv . Z2c34) (assq . Z2c33) (assp . Z2c32) (assoc . Z2c31) (call-with-string-output-port . Z2c30) (call-with-port . Z2c2f) (call-with-bytevector-output-port . Z2c2e) (bytevector->string . Z2c2d) (buffer-mode? . Z2c2c) (binary-port? . Z2c2b) (with-exception-handler . Z2c2a) (raise-continuable . Z2c29) (raise . Z2c28) (eval . Ze38) (environment . Ze30) (make-enumeration . Z2c27) (enum-set=? . Z2c26) (enum-set-universe . Z2c25) (enum-set-union . Z2c24) (enum-set-subset? . Z2c23) (enum-set-projection . Z2c22) (enum-set-member? . Z2c21) (enum-set-intersection . Z2c20) (enum-set-indexer . Z2c1f) (enum-set-difference . Z2c1e) (enum-set-constructor . Z2c1d) (enum-set-complement . Z2c1c) (enum-set->list . Z2c1b) (who-condition? . Z2c1a) (warning? . Z2c19) (violation? . Z2c18) (undefined-violation? . Z2c17) (syntax-violation? . Z2c16) (syntax-violation-subform . Z2c15) (syntax-violation-form . Z2c14) (syntax-violation . Ze58) (simple-conditions . Z2c13) (serious-condition? . Z2c12) (non-continuable-violation? . Z2c11) (message-condition? . Z2c10) (make-who-condition . Z2c0f) (make-warning . Z2c0e) (make-violation . Z2c0d) (make-undefined-violation . Z2c0c) (make-syntax-violation . Z2c0b) (make-serious-condition . Z2c0a) (make-non-continuable-violation . Z2c09) (make-message-condition . Z2c08) (make-lexical-violation . Z2c07) (make-irritants-condition . Z2c06) (make-implementation-restriction-violation . Z2c05) (make-error . Z2c04) (make-assertion-violation . Z2c03) (lexical-violation? . Z2c02) (irritants-condition? . Z2c01) (implementation-restriction-violation? . Z2c00) (error? . Z2bff) (condition-who . Z2bfe) (condition-predicate . Z2bfd) (condition-message . Z2bfc) (condition-irritants . Z2bfb) (condition-accessor . Z2bfa) (condition . Z2bf9) (assertion-violation? . Z2bf8) (condition? . Z2bf7) (utf32->string . Z2bf6) (utf16->string . Z2bf5) (utf8->string . Z2bf4) (uint-list->bytevector . Z2bf3) (u8-list->bytevector . Z2bf2) (string->utf8 . Z2bf1) (string->utf32 . Z2bf0) (string->utf16 . Z2bef) (sint-list->bytevector . Z2bee) (native-endianness . Z2bed) (bytevector? . Z2bec) (bytevector=? . Z2beb) (bytevector-uint-set! . Z2bea) (bytevector-uint-ref . Z2be9) (bytevector-u8-set! . Z2be8) (bytevector-u8-ref . Z2be7) (bytevector-u64-set! . Z2be6) (bytevector-u64-ref . Z2be5) (bytevector-u64-native-set! . Z2be4) (bytevector-u64-native-ref . Z2be3) (bytevector-u32-set! . Z2be2) (bytevector-u32-ref . Z2be1) (bytevector-u32-native-set! . Z2be0) (bytevector-u32-native-ref . Z2bdf) (bytevector-u16-set! . Z2bde) (bytevector-u16-ref . Z2bdd) (bytevector-u16-native-set! . Z2bdc) (bytevector-u16-native-ref . Z2bdb) (bytevector-sint-set! . Z2bda) (bytevector-sint-ref . Z2bd9) (bytevector-s8-set! . Z2bd8) (bytevector-s8-ref . Z2bd7) (bytevector-s64-set! . Z2bd6) (bytevector-s64-ref . Z2bd5) (bytevector-s64-native-set! . Z2bd4) (bytevector-s64-native-ref . Z2bd3) (bytevector-s32-set! . Z2bd2) (bytevector-s32-ref . Z2bd1) (bytevector-s32-native-set! . Z2bd0) (bytevector-s32-native-ref . Z2bcf) (bytevector-s16-set! . Z2bce) (bytevector-s16-ref . Z2bcd) (bytevector-s16-native-set! . Z2bcc) (bytevector-s16-native-ref . Z2bcb) (bytevector-length . Z2bca) (bytevector-ieee-single-ref . Z2bc9) (bytevector-ieee-single-set! . Z2bc8) (bytevector-ieee-single-native-set! . Z2bc7) (bytevector-ieee-single-native-ref . Z2bc6) (bytevector-ieee-double-set! . Z2bc5) (bytevector-ieee-double-ref . Z2bc4) (bytevector-ieee-double-native-set! . Z2bc3) (bytevector-ieee-double-native-ref . Z2bc2) (bytevector-fill! . Z2bc1) (bytevector-copy! . Z2bc0) (bytevector-copy . Z2bbf) (bytevector->uint-list . Z2bbe) (bytevector->u8-list . Z2bbd) (bytevector->sint-list . Z2bbc) (no-nans-violation? . Z2bbb) (no-infinities-violation? . Z2bba) (make-no-nans-violation . Z2bb9) (make-no-infinities-violation . Z2bb8) (real->flonum . Z2bb7) (flzero? . Z2bb6) (fltruncate . Z2bb5) (fltan . Z2bb4) (flsqrt . Z2bb3) (flsin . Z2bb2) (flround . Z2bb1) (flpositive? . Z2bb0) (flonum? . Z2baf) (flodd? . Z2bae) (flnumerator . Z2bad) (flnegative? . Z2bac) (flnan? . Z2bab) (flmod0 . Z2baa) (flmod . Z2ba9) (flmin . Z2ba8) (flmax . Z2ba7) (fllog . Z2ba6) (flinteger? . Z2ba5) (flinfinite? . Z2ba4) (flfloor . Z2ba3) (flfinite? . Z2ba2) (flexpt . Z2ba1) (flexp . Z2ba0) (fleven? . Z2b9f) (fldiv0-and-mod0 . Z2b9e) (fldiv0 . Z2b9d) (fldiv-and-mod . Z2b9c) (fldiv . Z2b9b) (fldenominator . Z2b9a) (flcos . Z2b99) (flceiling . Z2b98) (flatan . Z2b97) (flasin . Z2b96) (flacos . Z2b95) (flabs . Z2b94) (fl>? . Z2b93) (fl>=? . Z2b92) (fl=? . Z2b91) (fl<? . Z2b90) (fl<=? . Z2b8f) (fl/ . Z2b8e) (fl- . Z2b8d) (fl+ . Z2b8c) (fl* . Z2b8b) (fixnum->flonum . Z2b8a) (fxzero? . Z2b89) (fxxor . Z2b88) (fxrotate-bit-field . Z2b87) (fxreverse-bit-field . Z2b86) (fxpositive? . Z2b85) (fxodd? . Z2b84) (fxnot . Z2b83) (fxnegative? . Z2b82) (fxmod0 . Z2b81) (fxmod . Z2b80) (fxmin . Z2b7f) (fxmax . Z2b7e) (fxlength . Z2b7d) (fxior . Z2b7c) (fxif . Z2b7b) (fxfirst-bit-set . Z2b7a) (fxeven? . Z2b79) (fxdiv0-and-mod0 . Z2b78) (fxdiv0 . Z2b77) (fxdiv-and-mod . Z2b76) (fxdiv . Z2b75) (fxcopy-bit-field . Z2b74) (fxcopy-bit . Z2b73) (fxbit-set? . Z2b72) (fxbit-field . Z2b71) (fxbit-count . Z2b70) (fxarithmetic-shift-right . Z2b6f) (fxarithmetic-shift-left . Z2b6e) (fxarithmetic-shift . Z2b6d) (fxand . Z2b6c) (fx>? . Z2b6b) (fx>=? . Z2b6a) (fx=? . Z2b69) (fx<? . Z2b68) (fx<=? . Z2b67) (fx-/carry . Z2b66) (fx- . Z2b65) (fx+/carry . Z2b64) (fx+ . Z2b63) (fx*/carry . Z2b62) (fx* . Z2b61) (greatest-fixnum . Z2b60) (least-fixnum . Z2b5f) (fixnum-width . Z2b5e) (fixnum? . Z2b5d) (bitwise-rotate-bit-field . Z2b5c) (bitwise-reverse-bit-field . Z2b5b) (bitwise-length . Z2b5a) (bitwise-if . Z2b59) (bitwise-first-bit-set . Z2b58) (bitwise-copy-bit-field . Z2b57) (bitwise-copy-bit . Z2b56) (bitwise-bit-set? . Z2b55) (bitwise-bit-field . Z2b54) (bitwise-bit-count . Z2b53) (bitwise-xor . Z2b52) (bitwise-ior . Z2b51) (bitwise-and . Z2b50) (bitwise-not . Z2b4f) (bitwise-arithmetic-shift-right . Z2b4e) (bitwise-arithmetic-shift-left . Z2b4d) (bitwise-arithmetic-shift . Z2b4c) (zero? . Z2b4b) (vector? . Z2b4a) (vector-set! . Z2b49) (vector-ref . Z2b48) (vector-map . Z2b47) (vector-length . Z2b46) (vector-for-each . Z2b45) (vector-fill! . Z2b44) (vector->list . Z2b43) (vector . Z2b42) (values . Z2b41) (truncate . Z2b40) (tan . Z2b3f) (symbol? . Z2b3e) (symbol=? . Z2b3d) (symbol->string . Z2b3c) (substring . Z2b3b) (string? . Z2b3a) (string>? . Z2b39) (string>=? . Z2b38) (string=? . Z2b37) (string<? . Z2b36) (string<=? . Z2b35) (string-ref . Z2b34) (string-length . Z2b33) (string-for-each . Z2b32) (string-copy . Z2b31) (string-append . Z2b30) (string->symbol . Z2b2f) (string->number . Z2b2e) (string->list . Z2b2d) (string . Z2b2c) (sqrt . Z2b2b) (sin . Z2b2a) (round . Z2b29) (reverse . Z2b28) (real? . Z2b27) (real-valued? . Z2b26) (real-part . Z2b25) (rationalize . Z2b24) (rational? . Z2b23) (rational-valued? . Z2b22) (procedure? . Z2b21) (positive? . Z2b20) (pair? . Z2b1f) (odd? . Z2b1e) (numerator . Z2b1d) (number? . Z2b1c) (number->string . Z2b1b) (null? . Z2b1a) (not . Z2b19) (negative? . Z2b18) (nan? . Z2b17) (min . Z2b16) (max . Z2b15) (map . Z2b14) (make-vector . Z2b13) (make-string . Z2b12) (make-rectangular . Z2b11) (make-polar . Z2b10) (magnitude . Z2b0f) (log . Z2b0e) (list? . Z2b0d) (list-tail . Z2b0c) (list-ref . Z2b0b) (list->vector . Z2b0a) (list->string . Z2b09) (list . Z2b08) (length . Z2b07) (lcm . Z2b06) (integer? . Z2b05) (integer-valued? . Z2b04) (integer->char . Z2b03) (infinite? . Z2b02) (inexact? . Z2b01) (inexact . Z2b00) (imag-part . Z2aff) (gcd . Z2afe) (for-each . Z2afd) (floor . Z2afc) (finite? . Z2afb) (expt . Z2afa) (exp . Z2af9) (exact? . Z2af8) (exact-integer-sqrt . Z2af7) (exact . Z2af6) (even? . Z2af5) (error . Z2af4) (eqv? . Z2af3) (equal? . Z2af2) (eq? . Z2af1) (dynamic-wind . Z2af0) (div0-and-mod0 . Z2aef) (mod0 . Z2aee) (div0 . Z2aed) (div-and-mod . Z2aec) (mod . Z2aeb) (div . Z2aea) (denominator . Z2ae9) (cos . Z2ae8) (cons . Z2ae7) (complex? . Z2ae6) (char? . Z2ae5) (char>? . Z2ae4) (char>=? . Z2ae3) (char=? . Z2ae2) (char<? . Z2ae1) (char<=? . Z2ae0) (char->integer . Z2adf) (ceiling . Z2ade) (call-with-values . Z2add) (call/cc . Z2adc) (call-with-current-continuation . Z2adb) (cddddr . Z2ada) (cdddar . Z2ad9) (cddadr . Z2ad8) (cddaar . Z2ad7) (cdaddr . Z2ad6) (cdadar . Z2ad5) (cdaadr . Z2ad4) (cdaaar . Z2ad3) (cadddr . Z2ad2) (caddar . Z2ad1) (cadadr . Z2ad0) (cadaar . Z2acf) (caaddr . Z2ace) (caadar . Z2acd) (caaadr . Z2acc) (caaaar . Z2acb) (cdddr . Z2aca) (cddar . Z2ac9) (cdadr . Z2ac8) (cdaar . Z2ac7) (caddr . Z2ac6) (cadar . Z2ac5) (caadr . Z2ac4) (caaar . Z2ac3) (cddr . Z2ac2) (cdar . Z2ac1) (cadr . Z2ac0) (caar . Z2abf) (cdr . Z2abe) (car . Z2abd) (boolean? . Z2abc) (boolean=? . Z2abb) (atan . Z2aba) (assertion-violation . Z2ab9) (asin . Z2ab8) (apply . Z2ab7) (append . Z2ab6) (angle . Z2ab5) (acos . Z2ab4) (abs . Z2ab3) (/ . Z2ab2) (* . Z2ab1) (- . Z2ab0) (+ . Z2aaf) (>= . Z2aae) (> . Z2aad) (= . Z2aac) (<= . Z2aab) (< . Z2aaa) (library . Z2aa9) (&no-nans . Z2aa8) (&no-infinities . Z2aa7) (&i/o-encoding . Z2aa6) (&i/o-decoding . Z2aa5) (&i/o-port . Z2aa4) (&i/o-file-does-not-exist . Z2aa3) (&i/o-file-already-exists . Z2aa2) (&i/o-file-is-read-only . Z2aa1) (&i/o-file-protection . Z2aa0) (&i/o-filename . Z2a9f) (&i/o-invalid-position . Z2a9e) (&i/o-write . Z2a9d) (&i/o-read . Z2a9c) (&i/o . Z2a9b) (&undefined . Z2a9a) (&syntax . Z2a99) (&lexical . Z2a98) (&implementation-restriction . Z2a97) (&non-continuable . Z2a96) (&who . Z2a95) (&irritants . Z2a94) (&assertion . Z2a93) (&violation . Z2a92) (&error . Z2a91) (&serious . Z2a90) (&warning . Z2a8f) (&message . Z2a8e) (&condition . Z2a8d) (define-condition-type . Z2a8c) (define-enumeration . Z2a8b) (define-record-type . Z2a8a) (parent-rtd . Z2a89) (nongenerative . Z2a88) (opaque . Z2a87) (sealed . Z2a86) (protocol . Z2a85) (parent . Z2a84) (immutable . Z2a83) (mutable . Z2a82) (fields . Z2a81) (error-handling-mode . Z2a80) (file-options . Z2a7f) (buffer-mode . Z2a7e) (eol-style . Z2a7d) (guard . Z2a7c) (unsyntax-splicing . Z2a79) (unsyntax . Z2a78) (unquote-splicing . Z2a77) (unquote . Z2a76) (_ . Z2a75) (else . Z2a74) (=> . Z2a73) (... . Z2a72) (assert . Z2a71) (endianness . Z2a70) (time . Z2a6e) (do . Z2a6d) (cond . Z2a6c) (let* . Z2a6b) (let*-values . Z2a6a) (let-values . Z2a69) (identifier-syntax . Z2a68) (with-syntax . Z2a67) (quasisyntax . Z2a66) (quasiquote . Z2a65) (syntax-rules . Z2a64) (include . Z2a63) (record-constructor-descriptor . Z2a61) (record-type-descriptor . Z2a60) (case . Z2a5f) (unless . Z2a5d) (when . Z2a5c) (or . Z2a5b) (and . Z2a5a) (if . Z2a59) (let . Z2a58) (letrec* . Z2a57) (letrec . Z2a56) (case-lambda . Z2a54) (lambda . Z2a53) (syntax . Z2a52) (syntax-case . Z2a51) (quote . Z2a50) (letrec-syntax . Z2a4e) (let-syntax . Z2a4d) (set! . Z2a4c) (import . Z2a4b) (begin . Z2a4a) (define-syntax . Z2a48) (define . Z2a47)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2de9 '(psyntax null-environment-5) '() '() '() '() '((make-promise . Z2c4a) (unquote-splicing . Z2a77) (unquote . Z2a76) (_ . Z2a75) (else . Z2a74) (=> . Z2a73) (... . Z2a72) (delay . Z2a6f) (do . Z2a6d) (cond . Z2a6c) (let* . Z2a6b) (quasiquote . Z2a65) (syntax-rules . Z2a64) (case . Z2a5f) (or . Z2a5b) (and . Z2a5a) (if . Z2a59) (let . Z2a58) (letrec . Z2a56) (lambda . Z2a53) (quote . Z2a50) (letrec-syntax . Z2a4e) (let-syntax . Z2a4d) (set! . Z2a4c) (begin . Z2a4a) (define-syntax . Z2a48) (define . Z2a47)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2dea '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . Z2cfb) (string-ci>=? . Z2cfa) (string-ci=? . Z2cf9) (string-ci<? . Z2cf8) (string-ci<=? . Z2cf7) (char-whitespace? . Z2cf6) (char-upper-case? . Z2cf5) (char-numeric? . Z2cf3) (char-lower-case? . Z2cf2) (char-upcase . Z2cf0) (char-downcase . Z2ced) (char-ci>? . Z2cec) (char-ci>=? . Z2ceb) (char-ci=? . Z2cea) (char-ci<? . Z2ce9) (char-ci<=? . Z2ce8) (char-alphabetic? . Z2ce7) (call-with-output-file . Z2cbb) (call-with-input-file . Z2cba) (write-char . Z2cb9) (write . Z2cb8) (with-output-to-file . Z2cb7) (with-input-from-file . Z2cb6) (read-char . Z2cb5) (read . Z2cb4) (peek-char . Z2cb3) (open-output-file . Z2cb2) (open-input-file . Z2cb1) (newline . Z2cb0) (display . Z2caf) (close-output-port . Z2cae) (close-input-port . Z2cad) (eof-object . Z2cab) (current-output-port . Z2ca9) (current-input-port . Z2ca8) (output-port? . Z2ca7) (input-port? . Z2ca6) (scheme-report-environment . Ze34) (quotient . Z2c50) (null-environment . Ze32) (remainder . Z2c4f) (modulo . Z2c4e) (inexact->exact . Z2c4d) (force . Z2c4c) (exact->inexact . Z2c4b) (make-promise . Z2c4a) (string-fill! . Z2c48) (string-set! . Z2c47) (set-cdr! . Z2c46) (set-car! . Z2c45) (memv . Z2c3f) (memq . Z2c3e) (member . Z2c3c) (assv . Z2c34) (assq . Z2c33) (assoc . Z2c31) (eval . Ze38) (zero? . Z2b4b) (vector? . Z2b4a) (vector-set! . Z2b49) (vector-ref . Z2b48) (vector-length . Z2b46) (vector-fill! . Z2b44) (vector->list . Z2b43) (vector . Z2b42) (values . Z2b41) (truncate . Z2b40) (tan . Z2b3f) (symbol? . Z2b3e) (symbol->string . Z2b3c) (substring . Z2b3b) (string? . Z2b3a) (string>? . Z2b39) (string>=? . Z2b38) (string=? . Z2b37) (string<? . Z2b36) (string<=? . Z2b35) (string-ref . Z2b34) (string-length . Z2b33) (string-copy . Z2b31) (string-append . Z2b30) (string->symbol . Z2b2f) (string->number . Z2b2e) (string->list . Z2b2d) (string . Z2b2c) (sqrt . Z2b2b) (sin . Z2b2a) (round . Z2b29) (reverse . Z2b28) (real? . Z2b27) (real-part . Z2b25) (rationalize . Z2b24) (rational? . Z2b23) (procedure? . Z2b21) (positive? . Z2b20) (pair? . Z2b1f) (odd? . Z2b1e) (numerator . Z2b1d) (number? . Z2b1c) (number->string . Z2b1b) (not . Z2b19) (negative? . Z2b18) (min . Z2b16) (max . Z2b15) (map . Z2b14) (make-vector . Z2b13) (make-string . Z2b12) (make-rectangular . Z2b11) (make-polar . Z2b10) (magnitude . Z2b0f) (log . Z2b0e) (list? . Z2b0d) (list-tail . Z2b0c) (list-ref . Z2b0b) (list->vector . Z2b0a) (list->string . Z2b09) (list . Z2b08) (length . Z2b07) (lcm . Z2b06) (integer? . Z2b05) (integer->char . Z2b03) (inexact? . Z2b01) (imag-part . Z2aff) (gcd . Z2afe) (for-each . Z2afd) (floor . Z2afc) (expt . Z2afa) (exp . Z2af9) (exact? . Z2af8) (even? . Z2af5) (eqv? . Z2af3) (equal? . Z2af2) (eq? . Z2af1) (dynamic-wind . Z2af0) (denominator . Z2ae9) (cos . Z2ae8) (cons . Z2ae7) (complex? . Z2ae6) (char? . Z2ae5) (char>? . Z2ae4) (char>=? . Z2ae3) (char=? . Z2ae2) (char<? . Z2ae1) (char<=? . Z2ae0) (char->integer . Z2adf) (ceiling . Z2ade) (call-with-values . Z2add) (call-with-current-continuation . Z2adb) (cddddr . Z2ada) (cdddar . Z2ad9) (cddadr . Z2ad8) (cddaar . Z2ad7) (cdaddr . Z2ad6) (cdadar . Z2ad5) (cdaadr . Z2ad4) (cdaaar . Z2ad3) (cadddr . Z2ad2) (caddar . Z2ad1) (cadadr . Z2ad0) (cadaar . Z2acf) (caaddr . Z2ace) (caadar . Z2acd) (caaadr . Z2acc) (caaaar . Z2acb) (cdddr . Z2aca) (cddar . Z2ac9) (cdadr . Z2ac8) (cdaar . Z2ac7) (caddr . Z2ac6) (cadar . Z2ac5) (caadr . Z2ac4) (caaar . Z2ac3) (cddr . Z2ac2) (cdar . Z2ac1) (cadr . Z2ac0) (caar . Z2abf) (cdr . Z2abe) (car . Z2abd) (boolean? . Z2abc) (atan . Z2aba) (asin . Z2ab8) (apply . Z2ab7) (append . Z2ab6) (angle . Z2ab5) (acos . Z2ab4) (abs . Z2ab3) (/ . Z2ab2) (* . Z2ab1) (- . Z2ab0) (+ . Z2aaf) (>= . Z2aae) (> . Z2aad) (= . Z2aac) (<= . Z2aab) (< . Z2aaa) (unquote-splicing . Z2a77) (unquote . Z2a76) (else . Z2a74) (=> . Z2a73) (... . Z2a72) (delay . Z2a6f) (do . Z2a6d) (cond . Z2a6c) (let* . Z2a6b) (quasiquote . Z2a65) (syntax-rules . Z2a64) (case . Z2a5f) (or . Z2a5b) (and . Z2a5a) (if . Z2a59) (let . Z2a58) (letrec . Z2a56) (lambda . Z2a53) (quote . Z2a50) (letrec-syntax . Z2a4e) (let-syntax . Z2a4d) (set! . Z2a4c) (begin . Z2a4a) (define-syntax . Z2a48) (define . Z2a47)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2deb '(psyntax modules) '() '() '() '() '((module . Z2a49)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2dec '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2ded '(rnrs) '(6) '() '() '() '((regexp? . Z2da8) (string-upcase . Z2d03) (string-titlecase . Z2d02) (string-normalize-nfkd . Z2d01) (string-normalize-nfkc . Z2d00) (string-normalize-nfd . Z2cff) (string-normalize-nfc . Z2cfe) (string-foldcase . Z2cfd) (string-downcase . Z2cfc) (string-ci>? . Z2cfb) (string-ci>=? . Z2cfa) (string-ci=? . Z2cf9) (string-ci<? . Z2cf8) (string-ci<=? . Z2cf7) (char-whitespace? . Z2cf6) (char-upper-case? . Z2cf5) (char-title-case? . Z2cf4) (char-numeric? . Z2cf3) (char-lower-case? . Z2cf2) (char-general-category . Z2cf1) (char-upcase . Z2cf0) (char-titlecase . Z2cef) (char-foldcase . Z2cee) (char-downcase . Z2ced) (char-ci>? . Z2cec) (char-ci>=? . Z2ceb) (char-ci=? . Z2cea) (char-ci<? . Z2ce9) (char-ci<=? . Z2ce8) (char-alphabetic? . Z2ce7) (make-variable-transformer . Zba3) (identifier? . Ze5a) (generate-temporaries . Ze46) (free-identifier=? . Ze48) (syntax->datum . Ze5e) (datum->syntax . Ze5c) (bound-identifier=? . Ze4a) (record-type-descriptor? . Z2ce6) (record-predicate . Z2ce5) (record-mutator . Z2ce4) (record-constructor . Z2ce3) (record-accessor . Z2ce2) (make-record-type-descriptor . Z2ce1) (make-record-constructor-descriptor . Z2ce0) (record? . Z2cdf) (record-type-uid . Z2cde) (record-type-sealed? . Z2cdd) (record-type-parent . Z2cdc) (record-type-opaque? . Z2cdb) (record-type-name . Z2cda) (record-type-generative? . Z2cd9) (record-type-field-names . Z2cd8) (record-rtd . Z2cd7) (record-field-mutable? . Z2cd6) (delete-file . Z2cd5) (file-exists? . Z2cd4) (vector-sort! . Z2cd3) (vector-sort . Z2cd2) (list-sort . Z2cd1) (symbol-hash . Z2cd0) (string-ci-hash . Z2ccf) (string-hash . Z2cce) (equal-hash . Z2ccd) (hashtable-equivalence-function . Z2ccc) (make-hashtable . Z2ccb) (hashtable-hash-function . Z2cca) (make-eqv-hashtable . Z2cc9) (make-eq-hashtable . Z2cc8) (hashtable? . Z2cc7) (hashtable-update! . Z2cc6) (hashtable-size . Z2cc5) (hashtable-set! . Z2cc4) (hashtable-ref . Z2cc3) (hashtable-mutable? . Z2cc2) (hashtable-keys . Z2cc1) (hashtable-entries . Z2cc0) (hashtable-delete! . Z2cbf) (hashtable-copy . Z2cbe) (hashtable-contains? . Z2cbd) (hashtable-clear! . Z2cbc) (call-with-output-file . Z2cbb) (call-with-input-file . Z2cba) (write-char . Z2cb9) (write . Z2cb8) (with-output-to-file . Z2cb7) (with-input-from-file . Z2cb6) (read-char . Z2cb5) (read . Z2cb4) (peek-char . Z2cb3) (open-output-file . Z2cb2) (open-input-file . Z2cb1) (newline . Z2cb0) (display . Z2caf) (close-output-port . Z2cae) (close-input-port . Z2cad) (eof-object? . Z2cac) (eof-object . Z2cab) (current-error-port . Z2caa) (current-output-port . Z2ca9) (current-input-port . Z2ca8) (output-port? . Z2ca7) (input-port? . Z2ca6) (utf-8-codec . Z2ca5) (utf-16-codec . Z2ca4) (transcoder-error-handling-mode . Z2ca3) (transcoder-eol-style . Z2ca2) (transcoder-codec . Z2ca1) (transcoded-port . Z2ca0) (textual-port? . Z2c9f) (string->bytevector . Z2c9e) (standard-output-port . Z2c9d) (standard-input-port . Z2c9c) (standard-error-port . Z2c9b) (set-port-position! . Z2c9a) (put-u8 . Z2c99) (put-string . Z2c98) (put-datum . Z2c97) (put-char . Z2c96) (put-bytevector . Z2c95) (port? . Z2c94) (port-transcoder . Z2c93) (port-position . Z2c92) (port-has-set-port-position!? . Z2c91) (port-has-port-position? . Z2c90) (port-eof? . Z2c8f) (output-port-buffer-mode . Z2c8e) (open-string-output-port . Z2c8d) (open-string-input-port . Z2c8c) (open-file-output-port . Z2c8b) (open-file-input/output-port . Z2c8a) (open-file-input-port . Z2c89) (open-bytevector-output-port . Z2c88) (open-bytevector-input-port . Z2c87) (native-transcoder . Z2c86) (native-eol-style . Z2c85) (make-transcoder . Z2c84) (latin-1-codec . Z2c83) (make-i/o-write-error . Z2c82) (make-i/o-read-error . Z2c81) (make-i/o-port-error . Z2c80) (make-i/o-invalid-position-error . Z2c7f) (make-i/o-filename-error . Z2c7e) (make-i/o-file-protection-error . Z2c7d) (make-i/o-file-is-read-only-error . Z2c7c) (make-i/o-file-does-not-exist-error . Z2c7b) (make-i/o-file-already-exists-error . Z2c7a) (make-i/o-error . Z2c79) (make-i/o-encoding-error . Z2c78) (make-i/o-decoding-error . Z2c77) (make-custom-textual-output-port . Z2c76) (make-custom-textual-input/output-port . Z2c75) (make-custom-textual-input-port . Z2c74) (make-custom-binary-output-port . Z2c73) (make-custom-binary-input/output-port . Z2c72) (make-custom-binary-input-port . Z2c71) (make-bytevector . Z2c70) (lookahead-u8 . Z2c6f) (lookahead-char . Z2c6e) (i/o-write-error? . Z2c6d) (i/o-read-error? . Z2c6c) (i/o-port-error? . Z2c6b) (i/o-invalid-position-error? . Z2c6a) (i/o-filename-error? . Z2c69) (i/o-file-protection-error? . Z2c68) (i/o-file-is-read-only-error? . Z2c67) (i/o-file-does-not-exist-error? . Z2c66) (i/o-file-already-exists-error? . Z2c65) (i/o-error? . Z2c64) (i/o-error-position . Z2c63) (i/o-error-port . Z2c62) (i/o-error-filename . Z2c61) (i/o-encoding-error? . Z2c60) (i/o-encoding-error-char . Z2c5f) (i/o-decoding-error? . Z2c5e) (get-u8 . Z2c5d) (get-string-n! . Z2c5c) (get-string-n . Z2c5b) (get-string-all . Z2c5a) (get-line . Z2c59) (get-datum . Z2c58) (get-char . Z2c57) (get-bytevector-some . Z2c56) (get-bytevector-n! . Z2c55) (get-bytevector-n . Z2c54) (get-bytevector-all . Z2c53) (flush-output-port . Z2c52) (close-port . Z2c51) (exit . Z2c49) (command-line . Z28db) (remove . Z2c44) (remv . Z2c43) (remp . Z2c42) (remq . Z2c41) (partition . Z2c40) (memv . Z2c3f) (memq . Z2c3e) (memp . Z2c3d) (member . Z2c3c) (exists . Z2c3b) (for-all . Z2c3a) (fold-right . Z2c39) (fold-left . Z2c38) (find . Z2c37) (filter . Z2c36) (cons* . Z2c35) (assv . Z2c34) (assq . Z2c33) (assp . Z2c32) (assoc . Z2c31) (call-with-string-output-port . Z2c30) (call-with-port . Z2c2f) (call-with-bytevector-output-port . Z2c2e) (bytevector->string . Z2c2d) (buffer-mode? . Z2c2c) (binary-port? . Z2c2b) (with-exception-handler . Z2c2a) (raise-continuable . Z2c29) (raise . Z2c28) (make-enumeration . Z2c27) (enum-set=? . Z2c26) (enum-set-universe . Z2c25) (enum-set-union . Z2c24) (enum-set-subset? . Z2c23) (enum-set-projection . Z2c22) (enum-set-member? . Z2c21) (enum-set-intersection . Z2c20) (enum-set-indexer . Z2c1f) (enum-set-difference . Z2c1e) (enum-set-constructor . Z2c1d) (enum-set-complement . Z2c1c) (enum-set->list . Z2c1b) (who-condition? . Z2c1a) (warning? . Z2c19) (violation? . Z2c18) (undefined-violation? . Z2c17) (syntax-violation? . Z2c16) (syntax-violation-subform . Z2c15) (syntax-violation-form . Z2c14) (syntax-violation . Ze58) (simple-conditions . Z2c13) (serious-condition? . Z2c12) (non-continuable-violation? . Z2c11) (message-condition? . Z2c10) (make-who-condition . Z2c0f) (make-warning . Z2c0e) (make-violation . Z2c0d) (make-undefined-violation . Z2c0c) (make-syntax-violation . Z2c0b) (make-serious-condition . Z2c0a) (make-non-continuable-violation . Z2c09) (make-message-condition . Z2c08) (make-lexical-violation . Z2c07) (make-irritants-condition . Z2c06) (make-implementation-restriction-violation . Z2c05) (make-error . Z2c04) (make-assertion-violation . Z2c03) (lexical-violation? . Z2c02) (irritants-condition? . Z2c01) (implementation-restriction-violation? . Z2c00) (error? . Z2bff) (condition-who . Z2bfe) (condition-predicate . Z2bfd) (condition-message . Z2bfc) (condition-irritants . Z2bfb) (condition-accessor . Z2bfa) (condition . Z2bf9) (assertion-violation? . Z2bf8) (condition? . Z2bf7) (utf32->string . Z2bf6) (utf16->string . Z2bf5) (utf8->string . Z2bf4) (uint-list->bytevector . Z2bf3) (u8-list->bytevector . Z2bf2) (string->utf8 . Z2bf1) (string->utf32 . Z2bf0) (string->utf16 . Z2bef) (sint-list->bytevector . Z2bee) (native-endianness . Z2bed) (bytevector? . Z2bec) (bytevector=? . Z2beb) (bytevector-uint-set! . Z2bea) (bytevector-uint-ref . Z2be9) (bytevector-u8-set! . Z2be8) (bytevector-u8-ref . Z2be7) (bytevector-u64-set! . Z2be6) (bytevector-u64-ref . Z2be5) (bytevector-u64-native-set! . Z2be4) (bytevector-u64-native-ref . Z2be3) (bytevector-u32-set! . Z2be2) (bytevector-u32-ref . Z2be1) (bytevector-u32-native-set! . Z2be0) (bytevector-u32-native-ref . Z2bdf) (bytevector-u16-set! . Z2bde) (bytevector-u16-ref . Z2bdd) (bytevector-u16-native-set! . Z2bdc) (bytevector-u16-native-ref . Z2bdb) (bytevector-sint-set! . Z2bda) (bytevector-sint-ref . Z2bd9) (bytevector-s8-set! . Z2bd8) (bytevector-s8-ref . Z2bd7) (bytevector-s64-set! . Z2bd6) (bytevector-s64-ref . Z2bd5) (bytevector-s64-native-set! . Z2bd4) (bytevector-s64-native-ref . Z2bd3) (bytevector-s32-set! . Z2bd2) (bytevector-s32-ref . Z2bd1) (bytevector-s32-native-set! . Z2bd0) (bytevector-s32-native-ref . Z2bcf) (bytevector-s16-set! . Z2bce) (bytevector-s16-ref . Z2bcd) (bytevector-s16-native-set! . Z2bcc) (bytevector-s16-native-ref . Z2bcb) (bytevector-length . Z2bca) (bytevector-ieee-single-ref . Z2bc9) (bytevector-ieee-single-set! . Z2bc8) (bytevector-ieee-single-native-set! . Z2bc7) (bytevector-ieee-single-native-ref . Z2bc6) (bytevector-ieee-double-set! . Z2bc5) (bytevector-ieee-double-ref . Z2bc4) (bytevector-ieee-double-native-set! . Z2bc3) (bytevector-ieee-double-native-ref . Z2bc2) (bytevector-fill! . Z2bc1) (bytevector-copy! . Z2bc0) (bytevector-copy . Z2bbf) (bytevector->uint-list . Z2bbe) (bytevector->u8-list . Z2bbd) (bytevector->sint-list . Z2bbc) (no-nans-violation? . Z2bbb) (no-infinities-violation? . Z2bba) (make-no-nans-violation . Z2bb9) (make-no-infinities-violation . Z2bb8) (real->flonum . Z2bb7) (flzero? . Z2bb6) (fltruncate . Z2bb5) (fltan . Z2bb4) (flsqrt . Z2bb3) (flsin . Z2bb2) (flround . Z2bb1) (flpositive? . Z2bb0) (flonum? . Z2baf) (flodd? . Z2bae) (flnumerator . Z2bad) (flnegative? . Z2bac) (flnan? . Z2bab) (flmod0 . Z2baa) (flmod . Z2ba9) (flmin . Z2ba8) (flmax . Z2ba7) (fllog . Z2ba6) (flinteger? . Z2ba5) (flinfinite? . Z2ba4) (flfloor . Z2ba3) (flfinite? . Z2ba2) (flexpt . Z2ba1) (flexp . Z2ba0) (fleven? . Z2b9f) (fldiv0-and-mod0 . Z2b9e) (fldiv0 . Z2b9d) (fldiv-and-mod . Z2b9c) (fldiv . Z2b9b) (fldenominator . Z2b9a) (flcos . Z2b99) (flceiling . Z2b98) (flatan . Z2b97) (flasin . Z2b96) (flacos . Z2b95) (flabs . Z2b94) (fl>? . Z2b93) (fl>=? . Z2b92) (fl=? . Z2b91) (fl<? . Z2b90) (fl<=? . Z2b8f) (fl/ . Z2b8e) (fl- . Z2b8d) (fl+ . Z2b8c) (fl* . Z2b8b) (fixnum->flonum . Z2b8a) (fxzero? . Z2b89) (fxxor . Z2b88) (fxrotate-bit-field . Z2b87) (fxreverse-bit-field . Z2b86) (fxpositive? . Z2b85) (fxodd? . Z2b84) (fxnot . Z2b83) (fxnegative? . Z2b82) (fxmod0 . Z2b81) (fxmod . Z2b80) (fxmin . Z2b7f) (fxmax . Z2b7e) (fxlength . Z2b7d) (fxior . Z2b7c) (fxif . Z2b7b) (fxfirst-bit-set . Z2b7a) (fxeven? . Z2b79) (fxdiv0-and-mod0 . Z2b78) (fxdiv0 . Z2b77) (fxdiv-and-mod . Z2b76) (fxdiv . Z2b75) (fxcopy-bit-field . Z2b74) (fxcopy-bit . Z2b73) (fxbit-set? . Z2b72) (fxbit-field . Z2b71) (fxbit-count . Z2b70) (fxarithmetic-shift-right . Z2b6f) (fxarithmetic-shift-left . Z2b6e) (fxarithmetic-shift . Z2b6d) (fxand . Z2b6c) (fx>? . Z2b6b) (fx>=? . Z2b6a) (fx=? . Z2b69) (fx<? . Z2b68) (fx<=? . Z2b67) (fx-/carry . Z2b66) (fx- . Z2b65) (fx+/carry . Z2b64) (fx+ . Z2b63) (fx*/carry . Z2b62) (fx* . Z2b61) (greatest-fixnum . Z2b60) (least-fixnum . Z2b5f) (fixnum-width . Z2b5e) (fixnum? . Z2b5d) (bitwise-rotate-bit-field . Z2b5c) (bitwise-reverse-bit-field . Z2b5b) (bitwise-length . Z2b5a) (bitwise-if . Z2b59) (bitwise-first-bit-set . Z2b58) (bitwise-copy-bit-field . Z2b57) (bitwise-copy-bit . Z2b56) (bitwise-bit-set? . Z2b55) (bitwise-bit-field . Z2b54) (bitwise-bit-count . Z2b53) (bitwise-xor . Z2b52) (bitwise-ior . Z2b51) (bitwise-and . Z2b50) (bitwise-not . Z2b4f) (bitwise-arithmetic-shift-right . Z2b4e) (bitwise-arithmetic-shift-left . Z2b4d) (bitwise-arithmetic-shift . Z2b4c) (zero? . Z2b4b) (vector? . Z2b4a) (vector-set! . Z2b49) (vector-ref . Z2b48) (vector-map . Z2b47) (vector-length . Z2b46) (vector-for-each . Z2b45) (vector-fill! . Z2b44) (vector->list . Z2b43) (vector . Z2b42) (values . Z2b41) (truncate . Z2b40) (tan . Z2b3f) (symbol? . Z2b3e) (symbol=? . Z2b3d) (symbol->string . Z2b3c) (substring . Z2b3b) (string? . Z2b3a) (string>? . Z2b39) (string>=? . Z2b38) (string=? . Z2b37) (string<? . Z2b36) (string<=? . Z2b35) (string-ref . Z2b34) (string-length . Z2b33) (string-for-each . Z2b32) (string-copy . Z2b31) (string-append . Z2b30) (string->symbol . Z2b2f) (string->number . Z2b2e) (string->list . Z2b2d) (string . Z2b2c) (sqrt . Z2b2b) (sin . Z2b2a) (round . Z2b29) (reverse . Z2b28) (real? . Z2b27) (real-valued? . Z2b26) (real-part . Z2b25) (rationalize . Z2b24) (rational? . Z2b23) (rational-valued? . Z2b22) (procedure? . Z2b21) (positive? . Z2b20) (pair? . Z2b1f) (odd? . Z2b1e) (numerator . Z2b1d) (number? . Z2b1c) (number->string . Z2b1b) (null? . Z2b1a) (not . Z2b19) (negative? . Z2b18) (nan? . Z2b17) (min . Z2b16) (max . Z2b15) (map . Z2b14) (make-vector . Z2b13) (make-string . Z2b12) (make-rectangular . Z2b11) (make-polar . Z2b10) (magnitude . Z2b0f) (log . Z2b0e) (list? . Z2b0d) (list-tail . Z2b0c) (list-ref . Z2b0b) (list->vector . Z2b0a) (list->string . Z2b09) (list . Z2b08) (length . Z2b07) (lcm . Z2b06) (integer? . Z2b05) (integer-valued? . Z2b04) (integer->char . Z2b03) (infinite? . Z2b02) (inexact? . Z2b01) (inexact . Z2b00) (imag-part . Z2aff) (gcd . Z2afe) (for-each . Z2afd) (floor . Z2afc) (finite? . Z2afb) (expt . Z2afa) (exp . Z2af9) (exact? . Z2af8) (exact-integer-sqrt . Z2af7) (exact . Z2af6) (even? . Z2af5) (error . Z2af4) (eqv? . Z2af3) (equal? . Z2af2) (eq? . Z2af1) (dynamic-wind . Z2af0) (div0-and-mod0 . Z2aef) (mod0 . Z2aee) (div0 . Z2aed) (div-and-mod . Z2aec) (mod . Z2aeb) (div . Z2aea) (denominator . Z2ae9) (cos . Z2ae8) (cons . Z2ae7) (complex? . Z2ae6) (char? . Z2ae5) (char>? . Z2ae4) (char>=? . Z2ae3) (char=? . Z2ae2) (char<? . Z2ae1) (char<=? . Z2ae0) (char->integer . Z2adf) (ceiling . Z2ade) (call-with-values . Z2add) (call/cc . Z2adc) (call-with-current-continuation . Z2adb) (cddddr . Z2ada) (cdddar . Z2ad9) (cddadr . Z2ad8) (cddaar . Z2ad7) (cdaddr . Z2ad6) (cdadar . Z2ad5) (cdaadr . Z2ad4) (cdaaar . Z2ad3) (cadddr . Z2ad2) (caddar . Z2ad1) (cadadr . Z2ad0) (cadaar . Z2acf) (caaddr . Z2ace) (caadar . Z2acd) (caaadr . Z2acc) (caaaar . Z2acb) (cdddr . Z2aca) (cddar . Z2ac9) (cdadr . Z2ac8) (cdaar . Z2ac7) (caddr . Z2ac6) (cadar . Z2ac5) (caadr . Z2ac4) (caaar . Z2ac3) (cddr . Z2ac2) (cdar . Z2ac1) (cadr . Z2ac0) (caar . Z2abf) (cdr . Z2abe) (car . Z2abd) (boolean? . Z2abc) (boolean=? . Z2abb) (atan . Z2aba) (assertion-violation . Z2ab9) (asin . Z2ab8) (apply . Z2ab7) (append . Z2ab6) (angle . Z2ab5) (acos . Z2ab4) (abs . Z2ab3) (/ . Z2ab2) (* . Z2ab1) (- . Z2ab0) (+ . Z2aaf) (>= . Z2aae) (> . Z2aad) (= . Z2aac) (<= . Z2aab) (< . Z2aaa) (&no-nans . Z2aa8) (&no-infinities . Z2aa7) (&i/o-encoding . Z2aa6) (&i/o-decoding . Z2aa5) (&i/o-port . Z2aa4) (&i/o-file-does-not-exist . Z2aa3) (&i/o-file-already-exists . Z2aa2) (&i/o-file-is-read-only . Z2aa1) (&i/o-file-protection . Z2aa0) (&i/o-filename . Z2a9f) (&i/o-invalid-position . Z2a9e) (&i/o-write . Z2a9d) (&i/o-read . Z2a9c) (&i/o . Z2a9b) (&undefined . Z2a9a) (&syntax . Z2a99) (&lexical . Z2a98) (&implementation-restriction . Z2a97) (&non-continuable . Z2a96) (&who . Z2a95) (&irritants . Z2a94) (&assertion . Z2a93) (&violation . Z2a92) (&error . Z2a91) (&serious . Z2a90) (&warning . Z2a8f) (&message . Z2a8e) (&condition . Z2a8d) (define-condition-type . Z2a8c) (define-enumeration . Z2a8b) (define-record-type . Z2a8a) (parent-rtd . Z2a89) (nongenerative . Z2a88) (opaque . Z2a87) (sealed . Z2a86) (protocol . Z2a85) (parent . Z2a84) (immutable . Z2a83) (mutable . Z2a82) (fields . Z2a81) (error-handling-mode . Z2a80) (file-options . Z2a7f) (buffer-mode . Z2a7e) (eol-style . Z2a7d) (guard . Z2a7c) (unsyntax-splicing . Z2a79) (unsyntax . Z2a78) (unquote-splicing . Z2a77) (unquote . Z2a76) (_ . Z2a75) (else . Z2a74) (=> . Z2a73) (... . Z2a72) (assert . Z2a71) (endianness . Z2a70) (do . Z2a6d) (cond . Z2a6c) (let* . Z2a6b) (let*-values . Z2a6a) (let-values . Z2a69) (identifier-syntax . Z2a68) (with-syntax . Z2a67) (quasisyntax . Z2a66) (quasiquote . Z2a65) (syntax-rules . Z2a64) (record-constructor-descriptor . Z2a61) (record-type-descriptor . Z2a60) (case . Z2a5f) (unless . Z2a5d) (when . Z2a5c) (or . Z2a5b) (and . Z2a5a) (if . Z2a59) (let . Z2a58) (letrec* . Z2a57) (letrec . Z2a56) (case-lambda . Z2a54) (lambda . Z2a53) (syntax . Z2a52) (syntax-case . Z2a51) (quote . Z2a50) (letrec-syntax . Z2a4e) (let-syntax . Z2a4d) (set! . Z2a4c) (begin . Z2a4a) (define-syntax . Z2a48) (define . Z2a47)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2dee '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . Ze34) (quotient . Z2c50) (null-environment . Ze32) (remainder . Z2c4f) (modulo . Z2c4e) (inexact->exact . Z2c4d) (force . Z2c4c) (exact->inexact . Z2c4b) (make-promise . Z2c4a) (delay . Z2a6f)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2def '(rnrs control) '(6) '() '() '() '((do . Z2a6d) (unless . Z2a5d) (when . Z2a5c) (case-lambda . Z2a54)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df0 '(rnrs eval) '(6) '() '() '() '((eval . Ze38) (environment . Ze30)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df1 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . Z2c46) (set-car! . Z2c45)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df2 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . Z2c48) (string-set! . Z2c47)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df3 '(rnrs programs) '(6) '() '() '() '((exit . Z2c49) (command-line . Z28db)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df4 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . Zba3) (identifier? . Ze5a) (generate-temporaries . Ze46) (free-identifier=? . Ze48) (syntax->datum . Ze5e) (datum->syntax . Ze5c) (bound-identifier=? . Ze4a) (syntax-violation . Ze58) (unsyntax-splicing . Z2a79) (unsyntax . Z2a78) (_ . Z2a75) (... . Z2a72) (with-syntax . Z2a67) (quasisyntax . Z2a66) (syntax . Z2a52) (syntax-case . Z2a51)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df5 '(rnrs files) '(6) '() '() '() '((delete-file . Z2cd5) (file-exists? . Z2cd4) (make-i/o-write-error . Z2c82) (make-i/o-read-error . Z2c81) (make-i/o-port-error . Z2c80) (make-i/o-invalid-position-error . Z2c7f) (make-i/o-filename-error . Z2c7e) (make-i/o-file-protection-error . Z2c7d) (make-i/o-file-is-read-only-error . Z2c7c) (make-i/o-file-does-not-exist-error . Z2c7b) (make-i/o-file-already-exists-error . Z2c7a) (make-i/o-error . Z2c79) (i/o-write-error? . Z2c6d) (i/o-read-error? . Z2c6c) (i/o-port-error? . Z2c6b) (i/o-invalid-position-error? . Z2c6a) (i/o-filename-error? . Z2c69) (i/o-file-protection-error? . Z2c68) (i/o-file-is-read-only-error? . Z2c67) (i/o-file-does-not-exist-error? . Z2c66) (i/o-file-already-exists-error? . Z2c65) (i/o-error? . Z2c64) (i/o-error-position . Z2c63) (i/o-error-port . Z2c62) (i/o-error-filename . Z2c61) (&i/o-port . Z2aa4) (&i/o-file-does-not-exist . Z2aa3) (&i/o-file-already-exists . Z2aa2) (&i/o-file-is-read-only . Z2aa1) (&i/o-file-protection . Z2aa0) (&i/o-filename . Z2a9f) (&i/o-invalid-position . Z2a9e) (&i/o-write . Z2a9d) (&i/o-read . Z2a9c) (&i/o . Z2a9b)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df6 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . Z2cd3) (vector-sort . Z2cd2) (list-sort . Z2cd1)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df7 '(rnrs base) '(6) '() '() '() '((zero? . Z2b4b) (vector? . Z2b4a) (vector-set! . Z2b49) (vector-ref . Z2b48) (vector-map . Z2b47) (vector-length . Z2b46) (vector-for-each . Z2b45) (vector-fill! . Z2b44) (vector->list . Z2b43) (vector . Z2b42) (values . Z2b41) (truncate . Z2b40) (tan . Z2b3f) (symbol? . Z2b3e) (symbol=? . Z2b3d) (symbol->string . Z2b3c) (substring . Z2b3b) (string? . Z2b3a) (string>? . Z2b39) (string>=? . Z2b38) (string=? . Z2b37) (string<? . Z2b36) (string<=? . Z2b35) (string-ref . Z2b34) (string-length . Z2b33) (string-for-each . Z2b32) (string-copy . Z2b31) (string-append . Z2b30) (string->symbol . Z2b2f) (string->number . Z2b2e) (string->list . Z2b2d) (string . Z2b2c) (sqrt . Z2b2b) (sin . Z2b2a) (round . Z2b29) (reverse . Z2b28) (real? . Z2b27) (real-valued? . Z2b26) (real-part . Z2b25) (rationalize . Z2b24) (rational? . Z2b23) (rational-valued? . Z2b22) (procedure? . Z2b21) (positive? . Z2b20) (pair? . Z2b1f) (odd? . Z2b1e) (numerator . Z2b1d) (number? . Z2b1c) (number->string . Z2b1b) (null? . Z2b1a) (not . Z2b19) (negative? . Z2b18) (nan? . Z2b17) (min . Z2b16) (max . Z2b15) (map . Z2b14) (make-vector . Z2b13) (make-string . Z2b12) (make-rectangular . Z2b11) (make-polar . Z2b10) (magnitude . Z2b0f) (log . Z2b0e) (list? . Z2b0d) (list-tail . Z2b0c) (list-ref . Z2b0b) (list->vector . Z2b0a) (list->string . Z2b09) (list . Z2b08) (length . Z2b07) (lcm . Z2b06) (integer? . Z2b05) (integer-valued? . Z2b04) (integer->char . Z2b03) (infinite? . Z2b02) (inexact? . Z2b01) (inexact . Z2b00) (imag-part . Z2aff) (gcd . Z2afe) (for-each . Z2afd) (floor . Z2afc) (finite? . Z2afb) (expt . Z2afa) (exp . Z2af9) (exact? . Z2af8) (exact-integer-sqrt . Z2af7) (exact . Z2af6) (even? . Z2af5) (error . Z2af4) (eqv? . Z2af3) (equal? . Z2af2) (eq? . Z2af1) (dynamic-wind . Z2af0) (div0-and-mod0 . Z2aef) (mod0 . Z2aee) (div0 . Z2aed) (div-and-mod . Z2aec) (mod . Z2aeb) (div . Z2aea) (denominator . Z2ae9) (cos . Z2ae8) (cons . Z2ae7) (complex? . Z2ae6) (char? . Z2ae5) (char>? . Z2ae4) (char>=? . Z2ae3) (char=? . Z2ae2) (char<? . Z2ae1) (char<=? . Z2ae0) (char->integer . Z2adf) (ceiling . Z2ade) (call-with-values . Z2add) (call/cc . Z2adc) (call-with-current-continuation . Z2adb) (cddddr . Z2ada) (cdddar . Z2ad9) (cddadr . Z2ad8) (cddaar . Z2ad7) (cdaddr . Z2ad6) (cdadar . Z2ad5) (cdaadr . Z2ad4) (cdaaar . Z2ad3) (cadddr . Z2ad2) (caddar . Z2ad1) (cadadr . Z2ad0) (cadaar . Z2acf) (caaddr . Z2ace) (caadar . Z2acd) (caaadr . Z2acc) (caaaar . Z2acb) (cdddr . Z2aca) (cddar . Z2ac9) (cdadr . Z2ac8) (cdaar . Z2ac7) (caddr . Z2ac6) (cadar . Z2ac5) (caadr . Z2ac4) (caaar . Z2ac3) (cddr . Z2ac2) (cdar . Z2ac1) (cadr . Z2ac0) (caar . Z2abf) (cdr . Z2abe) (car . Z2abd) (boolean? . Z2abc) (boolean=? . Z2abb) (atan . Z2aba) (assertion-violation . Z2ab9) (asin . Z2ab8) (apply . Z2ab7) (append . Z2ab6) (angle . Z2ab5) (acos . Z2ab4) (abs . Z2ab3) (/ . Z2ab2) (* . Z2ab1) (- . Z2ab0) (+ . Z2aaf) (>= . Z2aae) (> . Z2aad) (= . Z2aac) (<= . Z2aab) (< . Z2aaa) (unquote-splicing . Z2a77) (unquote . Z2a76) (_ . Z2a75) (else . Z2a74) (=> . Z2a73) (... . Z2a72) (assert . Z2a71) (cond . Z2a6c) (let* . Z2a6b) (let*-values . Z2a6a) (let-values . Z2a69) (identifier-syntax . Z2a68) (quasiquote . Z2a65) (syntax-rules . Z2a64) (case . Z2a5f) (or . Z2a5b) (and . Z2a5a) (if . Z2a59) (let . Z2a58) (letrec* . Z2a57) (letrec . Z2a56) (lambda . Z2a53) (quote . Z2a50) (letrec-syntax . Z2a4e) (let-syntax . Z2a4d) (set! . Z2a4c) (begin . Z2a4a) (define-syntax . Z2a48) (define . Z2a47)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df8 '(rnrs lists) '(6) '() '() '() '((remove . Z2c44) (remv . Z2c43) (remp . Z2c42) (remq . Z2c41) (partition . Z2c40) (memv . Z2c3f) (memq . Z2c3e) (memp . Z2c3d) (member . Z2c3c) (exists . Z2c3b) (for-all . Z2c3a) (fold-right . Z2c39) (fold-left . Z2c38) (find . Z2c37) (filter . Z2c36) (cons* . Z2c35) (assv . Z2c34) (assq . Z2c33) (assp . Z2c32) (assoc . Z2c31)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2df9 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . Z2cbb) (call-with-input-file . Z2cba) (write-char . Z2cb9) (write . Z2cb8) (with-output-to-file . Z2cb7) (with-input-from-file . Z2cb6) (read-char . Z2cb5) (read . Z2cb4) (peek-char . Z2cb3) (open-output-file . Z2cb2) (open-input-file . Z2cb1) (newline . Z2cb0) (display . Z2caf) (close-output-port . Z2cae) (close-input-port . Z2cad) (eof-object? . Z2cac) (eof-object . Z2cab) (current-error-port . Z2caa) (current-output-port . Z2ca9) (current-input-port . Z2ca8) (output-port? . Z2ca7) (input-port? . Z2ca6) (make-i/o-write-error . Z2c82) (make-i/o-read-error . Z2c81) (make-i/o-port-error . Z2c80) (make-i/o-invalid-position-error . Z2c7f) (make-i/o-filename-error . Z2c7e) (make-i/o-file-protection-error . Z2c7d) (make-i/o-file-is-read-only-error . Z2c7c) (make-i/o-file-does-not-exist-error . Z2c7b) (make-i/o-file-already-exists-error . Z2c7a) (make-i/o-error . Z2c79) (i/o-write-error? . Z2c6d) (i/o-read-error? . Z2c6c) (i/o-port-error? . Z2c6b) (i/o-invalid-position-error? . Z2c6a) (i/o-filename-error? . Z2c69) (i/o-file-protection-error? . Z2c68) (i/o-file-is-read-only-error? . Z2c67) (i/o-file-does-not-exist-error? . Z2c66) (i/o-file-already-exists-error? . Z2c65) (i/o-error? . Z2c64) (i/o-error-position . Z2c63) (i/o-error-port . Z2c62) (i/o-error-filename . Z2c61) (&i/o-port . Z2aa4) (&i/o-file-does-not-exist . Z2aa3) (&i/o-file-already-exists . Z2aa2) (&i/o-file-is-read-only . Z2aa1) (&i/o-file-protection . Z2aa0) (&i/o-filename . Z2a9f) (&i/o-invalid-position . Z2a9e) (&i/o-write . Z2a9d) (&i/o-read . Z2a9c) (&i/o . Z2a9b)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2dfa '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . Z2c70) (utf32->string . Z2bf6) (utf16->string . Z2bf5) (utf8->string . Z2bf4) (uint-list->bytevector . Z2bf3) (u8-list->bytevector . Z2bf2) (string->utf8 . Z2bf1) (string->utf32 . Z2bf0) (string->utf16 . Z2bef) (sint-list->bytevector . Z2bee) (native-endianness . Z2bed) (bytevector? . Z2bec) (bytevector=? . Z2beb) (bytevector-uint-set! . Z2bea) (bytevector-uint-ref . Z2be9) (bytevector-u8-set! . Z2be8) (bytevector-u8-ref . Z2be7) (bytevector-u64-set! . Z2be6) (bytevector-u64-ref . Z2be5) (bytevector-u64-native-set! . Z2be4) (bytevector-u64-native-ref . Z2be3) (bytevector-u32-set! . Z2be2) (bytevector-u32-ref . Z2be1) (bytevector-u32-native-set! . Z2be0) (bytevector-u32-native-ref . Z2bdf) (bytevector-u16-set! . Z2bde) (bytevector-u16-ref . Z2bdd) (bytevector-u16-native-set! . Z2bdc) (bytevector-u16-native-ref . Z2bdb) (bytevector-sint-set! . Z2bda) (bytevector-sint-ref . Z2bd9) (bytevector-s8-set! . Z2bd8) (bytevector-s8-ref . Z2bd7) (bytevector-s64-set! . Z2bd6) (bytevector-s64-ref . Z2bd5) (bytevector-s64-native-set! . Z2bd4) (bytevector-s64-native-ref . Z2bd3) (bytevector-s32-set! . Z2bd2) (bytevector-s32-ref . Z2bd1) (bytevector-s32-native-set! . Z2bd0) (bytevector-s32-native-ref . Z2bcf) (bytevector-s16-set! . Z2bce) (bytevector-s16-ref . Z2bcd) (bytevector-s16-native-set! . Z2bcc) (bytevector-s16-native-ref . Z2bcb) (bytevector-length . Z2bca) (bytevector-ieee-single-ref . Z2bc9) (bytevector-ieee-single-set! . Z2bc8) (bytevector-ieee-single-native-set! . Z2bc7) (bytevector-ieee-single-native-ref . Z2bc6) (bytevector-ieee-double-set! . Z2bc5) (bytevector-ieee-double-ref . Z2bc4) (bytevector-ieee-double-native-set! . Z2bc3) (bytevector-ieee-double-native-ref . Z2bc2) (bytevector-fill! . Z2bc1) (bytevector-copy! . Z2bc0) (bytevector-copy . Z2bbf) (bytevector->uint-list . Z2bbe) (bytevector->u8-list . Z2bbd) (bytevector->sint-list . Z2bbc) (endianness . Z2a70)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2dfb '(rnrs unicode) '(6) '() '() '() '((string-upcase . Z2d03) (string-titlecase . Z2d02) (string-normalize-nfkd . Z2d01) (string-normalize-nfkc . Z2d00) (string-normalize-nfd . Z2cff) (string-normalize-nfc . Z2cfe) (string-foldcase . Z2cfd) (string-downcase . Z2cfc) (string-ci>? . Z2cfb) (string-ci>=? . Z2cfa) (string-ci=? . Z2cf9) (string-ci<? . Z2cf8) (string-ci<=? . Z2cf7) (char-whitespace? . Z2cf6) (char-upper-case? . Z2cf5) (char-title-case? . Z2cf4) (char-numeric? . Z2cf3) (char-lower-case? . Z2cf2) (char-general-category . Z2cf1) (char-upcase . Z2cf0) (char-titlecase . Z2cef) (char-foldcase . Z2cee) (char-downcase . Z2ced) (char-ci>? . Z2cec) (char-ci>=? . Z2ceb) (char-ci=? . Z2cea) (char-ci<? . Z2ce9) (char-ci<=? . Z2ce8) (char-alphabetic? . Z2ce7)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2dfc '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . Z2c2a) (raise-continuable . Z2c29) (raise . Z2c28) (guard . Z2a7c) (else . Z2a74) (=> . Z2a73)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2dfd '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . Z2b5c) (bitwise-reverse-bit-field . Z2b5b) (bitwise-length . Z2b5a) (bitwise-if . Z2b59) (bitwise-first-bit-set . Z2b58) (bitwise-copy-bit-field . Z2b57) (bitwise-copy-bit . Z2b56) (bitwise-bit-set? . Z2b55) (bitwise-bit-field . Z2b54) (bitwise-bit-count . Z2b53) (bitwise-xor . Z2b52) (bitwise-ior . Z2b51) (bitwise-and . Z2b50) (bitwise-not . Z2b4f) (bitwise-arithmetic-shift-right . Z2b4e) (bitwise-arithmetic-shift-left . Z2b4d) (bitwise-arithmetic-shift . Z2b4c)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2dfe '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . Z2b89) (fxxor . Z2b88) (fxrotate-bit-field . Z2b87) (fxreverse-bit-field . Z2b86) (fxpositive? . Z2b85) (fxodd? . Z2b84) (fxnot . Z2b83) (fxnegative? . Z2b82) (fxmod0 . Z2b81) (fxmod . Z2b80) (fxmin . Z2b7f) (fxmax . Z2b7e) (fxlength . Z2b7d) (fxior . Z2b7c) (fxif . Z2b7b) (fxfirst-bit-set . Z2b7a) (fxeven? . Z2b79) (fxdiv0-and-mod0 . Z2b78) (fxdiv0 . Z2b77) (fxdiv-and-mod . Z2b76) (fxdiv . Z2b75) (fxcopy-bit-field . Z2b74) (fxcopy-bit . Z2b73) (fxbit-set? . Z2b72) (fxbit-field . Z2b71) (fxbit-count . Z2b70) (fxarithmetic-shift-right . Z2b6f) (fxarithmetic-shift-left . Z2b6e) (fxarithmetic-shift . Z2b6d) (fxand . Z2b6c) (fx>? . Z2b6b) (fx>=? . Z2b6a) (fx=? . Z2b69) (fx<? . Z2b68) (fx<=? . Z2b67) (fx-/carry . Z2b66) (fx- . Z2b65) (fx+/carry . Z2b64) (fx+ . Z2b63) (fx*/carry . Z2b62) (fx* . Z2b61) (greatest-fixnum . Z2b60) (least-fixnum . Z2b5f) (fixnum-width . Z2b5e) (fixnum? . Z2b5d)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2dff '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . Z2bbb) (no-infinities-violation? . Z2bba) (make-no-nans-violation . Z2bb9) (make-no-infinities-violation . Z2bb8) (real->flonum . Z2bb7) (flzero? . Z2bb6) (fltruncate . Z2bb5) (fltan . Z2bb4) (flsqrt . Z2bb3) (flsin . Z2bb2) (flround . Z2bb1) (flpositive? . Z2bb0) (flonum? . Z2baf) (flodd? . Z2bae) (flnumerator . Z2bad) (flnegative? . Z2bac) (flnan? . Z2bab) (flmod0 . Z2baa) (flmod . Z2ba9) (flmin . Z2ba8) (flmax . Z2ba7) (fllog . Z2ba6) (flinteger? . Z2ba5) (flinfinite? . Z2ba4) (flfloor . Z2ba3) (flfinite? . Z2ba2) (flexpt . Z2ba1) (flexp . Z2ba0) (fleven? . Z2b9f) (fldiv0-and-mod0 . Z2b9e) (fldiv0 . Z2b9d) (fldiv-and-mod . Z2b9c) (fldiv . Z2b9b) (fldenominator . Z2b9a) (flcos . Z2b99) (flceiling . Z2b98) (flatan . Z2b97) (flasin . Z2b96) (flacos . Z2b95) (flabs . Z2b94) (fl>? . Z2b93) (fl>=? . Z2b92) (fl=? . Z2b91) (fl<? . Z2b90) (fl<=? . Z2b8f) (fl/ . Z2b8e) (fl- . Z2b8d) (fl+ . Z2b8c) (fl* . Z2b8b) (fixnum->flonum . Z2b8a) (&no-nans . Z2aa8) (&no-infinities . Z2aa7)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2e00 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . Z2cd0) (string-ci-hash . Z2ccf) (string-hash . Z2cce) (equal-hash . Z2ccd) (hashtable-equivalence-function . Z2ccc) (make-hashtable . Z2ccb) (hashtable-hash-function . Z2cca) (make-eqv-hashtable . Z2cc9) (make-eq-hashtable . Z2cc8) (hashtable? . Z2cc7) (hashtable-update! . Z2cc6) (hashtable-size . Z2cc5) (hashtable-set! . Z2cc4) (hashtable-ref . Z2cc3) (hashtable-mutable? . Z2cc2) (hashtable-keys . Z2cc1) (hashtable-entries . Z2cc0) (hashtable-delete! . Z2cbf) (hashtable-copy . Z2cbe) (hashtable-contains? . Z2cbd) (hashtable-clear! . Z2cbc)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2e01 '(rnrs io ports) '(6) '() '() '() '((eof-object? . Z2cac) (eof-object . Z2cab) (current-error-port . Z2caa) (current-output-port . Z2ca9) (current-input-port . Z2ca8) (output-port? . Z2ca7) (input-port? . Z2ca6) (utf-8-codec . Z2ca5) (utf-16-codec . Z2ca4) (transcoder-error-handling-mode . Z2ca3) (transcoder-eol-style . Z2ca2) (transcoder-codec . Z2ca1) (transcoded-port . Z2ca0) (textual-port? . Z2c9f) (string->bytevector . Z2c9e) (standard-output-port . Z2c9d) (standard-input-port . Z2c9c) (standard-error-port . Z2c9b) (set-port-position! . Z2c9a) (put-u8 . Z2c99) (put-string . Z2c98) (put-datum . Z2c97) (put-char . Z2c96) (put-bytevector . Z2c95) (port? . Z2c94) (port-transcoder . Z2c93) (port-position . Z2c92) (port-has-set-port-position!? . Z2c91) (port-has-port-position? . Z2c90) (port-eof? . Z2c8f) (output-port-buffer-mode . Z2c8e) (open-string-output-port . Z2c8d) (open-string-input-port . Z2c8c) (open-file-output-port . Z2c8b) (open-file-input/output-port . Z2c8a) (open-file-input-port . Z2c89) (open-bytevector-output-port . Z2c88) (open-bytevector-input-port . Z2c87) (native-transcoder . Z2c86) (native-eol-style . Z2c85) (make-transcoder . Z2c84) (latin-1-codec . Z2c83) (make-i/o-write-error . Z2c82) (make-i/o-read-error . Z2c81) (make-i/o-port-error . Z2c80) (make-i/o-invalid-position-error . Z2c7f) (make-i/o-filename-error . Z2c7e) (make-i/o-file-protection-error . Z2c7d) (make-i/o-file-is-read-only-error . Z2c7c) (make-i/o-file-does-not-exist-error . Z2c7b) (make-i/o-file-already-exists-error . Z2c7a) (make-i/o-error . Z2c79) (make-i/o-encoding-error . Z2c78) (make-i/o-decoding-error . Z2c77) (make-custom-textual-output-port . Z2c76) (make-custom-textual-input/output-port . Z2c75) (make-custom-textual-input-port . Z2c74) (make-custom-binary-output-port . Z2c73) (make-custom-binary-input/output-port . Z2c72) (make-custom-binary-input-port . Z2c71) (lookahead-u8 . Z2c6f) (lookahead-char . Z2c6e) (i/o-write-error? . Z2c6d) (i/o-read-error? . Z2c6c) (i/o-port-error? . Z2c6b) (i/o-invalid-position-error? . Z2c6a) (i/o-filename-error? . Z2c69) (i/o-file-protection-error? . Z2c68) (i/o-file-is-read-only-error? . Z2c67) (i/o-file-does-not-exist-error? . Z2c66) (i/o-file-already-exists-error? . Z2c65) (i/o-error? . Z2c64) (i/o-error-position . Z2c63) (i/o-error-port . Z2c62) (i/o-error-filename . Z2c61) (i/o-encoding-error? . Z2c60) (i/o-encoding-error-char . Z2c5f) (i/o-decoding-error? . Z2c5e) (get-u8 . Z2c5d) (get-string-n! . Z2c5c) (get-string-n . Z2c5b) (get-string-all . Z2c5a) (get-line . Z2c59) (get-datum . Z2c58) (get-char . Z2c57) (get-bytevector-some . Z2c56) (get-bytevector-n! . Z2c55) (get-bytevector-n . Z2c54) (get-bytevector-all . Z2c53) (flush-output-port . Z2c52) (close-port . Z2c51) (call-with-string-output-port . Z2c30) (call-with-port . Z2c2f) (call-with-bytevector-output-port . Z2c2e) (bytevector->string . Z2c2d) (buffer-mode? . Z2c2c) (binary-port? . Z2c2b) (&i/o-encoding . Z2aa6) (&i/o-decoding . Z2aa5) (&i/o-port . Z2aa4) (&i/o-file-does-not-exist . Z2aa3) (&i/o-file-already-exists . Z2aa2) (&i/o-file-is-read-only . Z2aa1) (&i/o-file-protection . Z2aa0) (&i/o-filename . Z2a9f) (&i/o-invalid-position . Z2a9e) (&i/o-write . Z2a9d) (&i/o-read . Z2a9c) (&i/o . Z2a9b) (error-handling-mode . Z2a80) (file-options . Z2a7f) (buffer-mode . Z2a7e) (eol-style . Z2a7d)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2e02 '(rnrs enums) '(6) '() '() '() '((make-enumeration . Z2c27) (enum-set=? . Z2c26) (enum-set-universe . Z2c25) (enum-set-union . Z2c24) (enum-set-subset? . Z2c23) (enum-set-projection . Z2c22) (enum-set-member? . Z2c21) (enum-set-intersection . Z2c20) (enum-set-indexer . Z2c1f) (enum-set-difference . Z2c1e) (enum-set-constructor . Z2c1d) (enum-set-complement . Z2c1c) (enum-set->list . Z2c1b) (define-enumeration . Z2a8b)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2e03 '(rnrs conditions) '(6) '() '() '() '((who-condition? . Z2c1a) (warning? . Z2c19) (violation? . Z2c18) (undefined-violation? . Z2c17) (syntax-violation? . Z2c16) (syntax-violation-subform . Z2c15) (syntax-violation-form . Z2c14) (syntax-violation . Ze58) (simple-conditions . Z2c13) (serious-condition? . Z2c12) (non-continuable-violation? . Z2c11) (message-condition? . Z2c10) (make-who-condition . Z2c0f) (make-warning . Z2c0e) (make-violation . Z2c0d) (make-undefined-violation . Z2c0c) (make-syntax-violation . Z2c0b) (make-serious-condition . Z2c0a) (make-non-continuable-violation . Z2c09) (make-message-condition . Z2c08) (make-lexical-violation . Z2c07) (make-irritants-condition . Z2c06) (make-implementation-restriction-violation . Z2c05) (make-error . Z2c04) (make-assertion-violation . Z2c03) (lexical-violation? . Z2c02) (irritants-condition? . Z2c01) (implementation-restriction-violation? . Z2c00) (error? . Z2bff) (condition-who . Z2bfe) (condition-predicate . Z2bfd) (condition-message . Z2bfc) (condition-irritants . Z2bfb) (condition-accessor . Z2bfa) (condition . Z2bf9) (assertion-violation? . Z2bf8) (condition? . Z2bf7) (&undefined . Z2a9a) (&syntax . Z2a99) (&lexical . Z2a98) (&implementation-restriction . Z2a97) (&non-continuable . Z2a96) (&who . Z2a95) (&irritants . Z2a94) (&assertion . Z2a93) (&violation . Z2a92) (&error . Z2a91) (&serious . Z2a90) (&warning . Z2a8f) (&message . Z2a8e) (&condition . Z2a8d) (define-condition-type . Z2a8c)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2e04 '(rnrs records inspection) '(6) '() '() '() '((record? . Z2cdf) (record-type-uid . Z2cde) (record-type-sealed? . Z2cdd) (record-type-parent . Z2cdc) (record-type-opaque? . Z2cdb) (record-type-name . Z2cda) (record-type-generative? . Z2cd9) (record-type-field-names . Z2cd8) (record-rtd . Z2cd7) (record-field-mutable? . Z2cd6)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2e05 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . Z2ce6) (record-predicate . Z2ce5) (record-mutator . Z2ce4) (record-constructor . Z2ce3) (record-accessor . Z2ce2) (make-record-type-descriptor . Z2ce1) (make-record-constructor-descriptor . Z2ce0)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2e06 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . Z2a8a) (parent-rtd . Z2a89) (nongenerative . Z2a88) (opaque . Z2a87) (sealed . Z2a86) (protocol . Z2a85) (parent . Z2a84) (immutable . Z2a83) (mutable . Z2a82) (fields . Z2a81) (record-constructor-descriptor . Z2a61) (record-type-descriptor . Z2a60)) '() values values '#f '#f '#t '#f) (Z98c@Z7d8@install-library 'Z2e07 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . Z2de7) (&no-nans-rtd . Z2de6) (&no-infinities-rcd . Z2de5) (&no-infinities-rtd . Z2de4) (&i/o-encoding-rcd . Z2de3) (&i/o-encoding-rtd . Z2de2) (&i/o-decoding-rcd . Z2de1) (&i/o-decoding-rtd . Z2de0) (&i/o-port-rcd . Z2ddf) (&i/o-port-rtd . Z2dde) (&i/o-file-does-not-exist-rcd . Z2ddd) (&i/o-file-does-not-exist-rtd . Z2ddc) (&i/o-file-already-exists-rcd . Z2ddb) (&i/o-file-already-exists-rtd . Z2dda) (&i/o-file-is-read-only-rcd . Z2dd9) (&i/o-file-is-read-only-rtd . Z2dd8) (&i/o-file-protection-rcd . Z2dd7) (&i/o-file-protection-rtd . Z2dd6) (&i/o-filename-rcd . Z2dd5) (&i/o-filename-rtd . Z2dd4) (&i/o-invalid-position-rcd . Z2dd3) (&i/o-invalid-position-rtd . Z2dd2) (&i/o-write-rcd . Z2dd1) (&i/o-write-rtd . Z2dd0) (&i/o-read-rcd . Z2dcf) (&i/o-read-rtd . Z2dce) (&i/o-rcd . Z2dcd) (&i/o-rtd . Z2dcc) (&undefined-rcd . Z2dcb) (&undefined-rtd . Z2dca) (&syntax-rcd . Z2dc9) (&syntax-rtd . Z2dc8) (&lexical-rcd . Z2dc7) (&lexical-rtd . Z2dc6) (&implementation-restriction-rcd . Z2dc5) (&implementation-restriction-rtd . Z2dc4) (&non-continuable-rcd . Z2dc3) (&non-continuable-rtd . Z2dc2) (&who-rcd . Z2dc1) (&who-rtd . Z2dc0) (&irritants-rcd . Z2dbf) (&irritants-rtd . Z2dbe) (&assertion-rcd . Z2dbd) (&assertion-rtd . Z2dbc) (&violation-rcd . Z2dbb) (&violation-rtd . Z2dba) (&error-rcd . Z2db9) (&error-rtd . Z2db8) (&serious-rcd . Z2db7) (&serious-rtd . Z2db6) (&warning-rcd . Z2db5) (&warning-rtd . Z2db4) (&message-rcd . Z2db3) (&message-rtd . Z2db2) (&condition-rcd . Z2db1) (&condition-rtd . Z2db0) (syntax-error . Ze54) (syntax-dispatch . Zd78) (pretty-print . Z2daf) (eval-core . Z2dae) (set-symbol-value! . Z2dad) (symbol-value . Z2dac) (gensym . Z2dab) (void . Z2daa) (load . Z28e1) (interaction-environment . Ze66) (char-ready? . Z2da9) (regexp? . Z2da8) (read-line . Z2da7) (gensym-prefix-set! . Z2da6) (ungensym . Z2da5) (alist->eq-hash-table . Z2da4) (assoc-ref . Z2da3) (print . Z2da2) (format . Z2da1) (host-os . Z2da0) (library-path . Z7b7) (standard-library-path . Z2d9f) (%monapi-message-send . Z2d9e) (file-newer? . Z2d9d) (stat-mtime . Z2d9c) (write-to-file . Z2d9b) (file->list . Z2d9a) (file->string . Z2d99) (digit->integer . Z2d98) (call-with-string-input-port . Z2d97) (call-with-string-io . Z2d96) (string-split . Z2d95) (bytevector-for-each . Z2d94) (string->regexp . Z2d93) (rxmatch . Z2d92) (regexp-replace-all . Z2d91) (hashtable-for-each . Z2d90) (mosh-cache-dir . Z5a1) (call-process . Z2d8f) (local-tz-offset . Z2d8e) (microseconds . Z2d8d) (directory-list . Z2d8c) (set-current-directory! . Z2d8b) (expand-path . Z2d8a) (current-directory . Z2d89) (%spawn . Z2d88) (%waitpid . Z2d87) (simple-struct-name . Z2d86) (simple-struct-set! . Z2d85) (simple-struct-ref . Z2d84) (make-simple-struct . Z2d83) (simple-struct? . Z2d82) (pointer-ref-c-int64 . Z2d81) (pointer-ref-c-int32 . Z2d80) (pointer-ref-c-int16 . Z2d7f) (pointer-ref-c-int8 . Z2d7e) (pointer-ref-c-uint64 . Z2d7d) (pointer-ref-c-uint32 . Z2d7c) (pointer-ref-c-uint16 . Z2d7b) (pointer-ref-c-uint8 . Z2d7a) (pointer-set-c-uint64! . Z2d79) (pointer-set-c-uint32! . Z2d78) (pointer-set-c-uint16! . Z2d77) (pointer-set-c-uint8! . Z2d76) (pointer-set-c-int64! . Z2d75) (pointer-set-c-int32! . Z2d74) (pointer-set-c-int16! . Z2d73) (pointer-set-c-int8! . Z2d72) (pointer-set-c-pointer! . Z2d71) (pointer-set-c-double! . Z2d70) (pointer-set-c-float! . Z2d6f) (pointer-set-c-long-long! . Z2d6e) (pointer-set-c-long! . Z2d6d) (pointer-set-c-int! . Z2d6c) (pointer-set-c-short! . Z2d6b) (pointer-set-c-char! . Z2d6a) (pointer-ref-c-pointer . Z2d69) (pointer-ref-c-double . Z2d68) (pointer-ref-c-float . Z2d67) (pointer-ref-c-unsigned-long-long . Z2d66) (pointer-ref-c-signed-long-long . Z2d65) (pointer-ref-c-unsigned-long . Z2d64) (pointer-ref-c-signed-long . Z2d63) (pointer-ref-c-unsigned-int . Z2d62) (pointer-ref-c-signed-int . Z2d61) (pointer-ref-c-unsigned-short . Z2d60) (pointer-ref-c-signed-short . Z2d5f) (pointer-ref-c-unsigned-char . Z2d5e) (pointer-ref-c-signed-char . Z2d5d) (pointer->integer . Z2d5c) (integer->pointer . Z2d5b) (pointer? . Z2d5a) (shared-errno . Z2d59) (%ffi-free-c-callback-trampoline . Z2d58) (%ffi-make-c-callback-trampoline . Z2d57) (%ffi-free . Z2d56) (%ffi-malloc . Z2d55) (%ffi-supported? . Z2d54) (%ffi-pointer->string . Z2d53) (%ffi-call . Z2d52) (%ffi-lookup . Z2d51) (%ffi-open . Z2d50) (null-terminated-utf8->string . Z2d4f) (null-terminated-bytevector->string . Z2d4e) (%exec . Z2d4d) (%fork . Z2d4c) (%pipe . Z2d4b) (p . Z2d4a) (open-output-string . Z2d49) (get-output-string . Z2d48) (file-stat-ctime . Z2d47) (file-stat-atime . Z2d46) (file-stat-mtime . Z2d45) (file-size-in-bytes . Z2d44) (file-writable? . Z2d43) (file-executable? . Z2d42) (file-readable? . Z2d41) (file-regular? . Z2d40) (file-symbolic-link? . Z2d3f) (file-directory? . Z2d3e) (create-symbolic-link . Z2d3d) (rename-file . Z2d3c) (delete-directory . Z2d3b) (create-directory . Z2d3a) (create-mosh-cache-dir . Z2d39) (get-environment-variables . Z2d38) (current-exception-handler . Z2d37) (get-environment-variable . Z2d36) (join-wraps . Z2d35) (id->real-label . Z2d34) (same-marks? . Z2d33) (same-marks*? . Z2d32) (get-timeofday . Z2d31) (get-command-line . Z2d30) (sys-display . Z2d2f) (whereis . Z2d2e) (register . Z2d2d) (vm-join! . Z2d2c) (vm-set-value! . Z2d2b) (vm? . Z2d2a) (main-vm? . Z2d29) (vm-eval . Z2d28) (vm-self . Z2d27) (vm-start! . Z2d26) (make-vm . Z2d25) (mutex-try-lock! . Z2d24) (mutex-unlock! . Z2d23) (mutex-lock! . Z2d22) (mutex? . Z2d21) (make-mutex . Z2d20) (condition-variable-notify-all! . Z2d1f) (condition-variable-notify! . Z2d1e) (condition-variable-wait! . Z2d1d) (make-condition-variable . Z2d1c) (write/ss . Z2d1b) (mosh-executable-path . Z2d1a) (make-file-options . Z2d19) (source-info . Z2d18) (make-compiler-instruction . Z2d17) (make-instruction . Z2d16) (set-source-info! . Z2d15) (bignum? . Z2d14) (fast-equal? . Z2d13) (fasl-read . Z2d12) (fasl-write . Z2d11) (time-usage . Z2d10) (os-constant . Z2d0f) (disasm . Z2d0e) (make-parameter . Z59f) (socket-port . Z2d0d) (socket-shutdown . Z2d0c) (socket-close . Z2d0b) (socket-send . Z2d0a) (socket-recv! . Z2d09) (socket-recv . Z2d08) (make-server-socket . Z2d07) (make-client-socket . Z2d06) (socket-accept . Z2d05) (socket? . Z2d04) (string-upcase . Z2d03) (string-titlecase . Z2d02) (string-normalize-nfkd . Z2d01) (string-normalize-nfkc . Z2d00) (string-normalize-nfd . Z2cff) (string-normalize-nfc . Z2cfe) (string-foldcase . Z2cfd) (string-downcase . Z2cfc) (string-ci>? . Z2cfb) (string-ci>=? . Z2cfa) (string-ci=? . Z2cf9) (string-ci<? . Z2cf8) (string-ci<=? . Z2cf7) (char-whitespace? . Z2cf6) (char-upper-case? . Z2cf5) (char-title-case? . Z2cf4) (char-numeric? . Z2cf3) (char-lower-case? . Z2cf2) (char-general-category . Z2cf1) (char-upcase . Z2cf0) (char-titlecase . Z2cef) (char-foldcase . Z2cee) (char-downcase . Z2ced) (char-ci>? . Z2cec) (char-ci>=? . Z2ceb) (char-ci=? . Z2cea) (char-ci<? . Z2ce9) (char-ci<=? . Z2ce8) (char-alphabetic? . Z2ce7) (make-variable-transformer . Zba3) (identifier? . Ze5a) (generate-temporaries . Ze46) (free-identifier=? . Ze48) (syntax->datum . Ze5e) (datum->syntax . Ze5c) (bound-identifier=? . Ze4a) (record-type-descriptor? . Z2ce6) (record-predicate . Z2ce5) (record-mutator . Z2ce4) (record-constructor . Z2ce3) (record-accessor . Z2ce2) (make-record-type-descriptor . Z2ce1) (make-record-constructor-descriptor . Z2ce0) (record? . Z2cdf) (record-type-uid . Z2cde) (record-type-sealed? . Z2cdd) (record-type-parent . Z2cdc) (record-type-opaque? . Z2cdb) (record-type-name . Z2cda) (record-type-generative? . Z2cd9) (record-type-field-names . Z2cd8) (record-rtd . Z2cd7) (record-field-mutable? . Z2cd6) (delete-file . Z2cd5) (file-exists? . Z2cd4) (vector-sort! . Z2cd3) (vector-sort . Z2cd2) (list-sort . Z2cd1) (symbol-hash . Z2cd0) (string-ci-hash . Z2ccf) (string-hash . Z2cce) (equal-hash . Z2ccd) (hashtable-equivalence-function . Z2ccc) (make-hashtable . Z2ccb) (hashtable-hash-function . Z2cca) (make-eqv-hashtable . Z2cc9) (make-eq-hashtable . Z2cc8) (hashtable? . Z2cc7) (hashtable-update! . Z2cc6) (hashtable-size . Z2cc5) (hashtable-set! . Z2cc4) (hashtable-ref . Z2cc3) (hashtable-mutable? . Z2cc2) (hashtable-keys . Z2cc1) (hashtable-entries . Z2cc0) (hashtable-delete! . Z2cbf) (hashtable-copy . Z2cbe) (hashtable-contains? . Z2cbd) (hashtable-clear! . Z2cbc) (call-with-output-file . Z2cbb) (call-with-input-file . Z2cba) (write-char . Z2cb9) (write . Z2cb8) (with-output-to-file . Z2cb7) (with-input-from-file . Z2cb6) (read-char . Z2cb5) (read . Z2cb4) (peek-char . Z2cb3) (open-output-file . Z2cb2) (open-input-file . Z2cb1) (newline . Z2cb0) (display . Z2caf) (close-output-port . Z2cae) (close-input-port . Z2cad) (eof-object? . Z2cac) (eof-object . Z2cab) (current-error-port . Z2caa) (current-output-port . Z2ca9) (current-input-port . Z2ca8) (output-port? . Z2ca7) (input-port? . Z2ca6) (utf-8-codec . Z2ca5) (utf-16-codec . Z2ca4) (transcoder-error-handling-mode . Z2ca3) (transcoder-eol-style . Z2ca2) (transcoder-codec . Z2ca1) (transcoded-port . Z2ca0) (textual-port? . Z2c9f) (string->bytevector . Z2c9e) (standard-output-port . Z2c9d) (standard-input-port . Z2c9c) (standard-error-port . Z2c9b) (set-port-position! . Z2c9a) (put-u8 . Z2c99) (put-string . Z2c98) (put-datum . Z2c97) (put-char . Z2c96) (put-bytevector . Z2c95) (port? . Z2c94) (port-transcoder . Z2c93) (port-position . Z2c92) (port-has-set-port-position!? . Z2c91) (port-has-port-position? . Z2c90) (port-eof? . Z2c8f) (output-port-buffer-mode . Z2c8e) (open-string-output-port . Z2c8d) (open-string-input-port . Z2c8c) (open-file-output-port . Z2c8b) (open-file-input/output-port . Z2c8a) (open-file-input-port . Z2c89) (open-bytevector-output-port . Z2c88) (open-bytevector-input-port . Z2c87) (native-transcoder . Z2c86) (native-eol-style . Z2c85) (make-transcoder . Z2c84) (latin-1-codec . Z2c83) (make-i/o-write-error . Z2c82) (make-i/o-read-error . Z2c81) (make-i/o-port-error . Z2c80) (make-i/o-invalid-position-error . Z2c7f) (make-i/o-filename-error . Z2c7e) (make-i/o-file-protection-error . Z2c7d) (make-i/o-file-is-read-only-error . Z2c7c) (make-i/o-file-does-not-exist-error . Z2c7b) (make-i/o-file-already-exists-error . Z2c7a) (make-i/o-error . Z2c79) (make-i/o-encoding-error . Z2c78) (make-i/o-decoding-error . Z2c77) (make-custom-textual-output-port . Z2c76) (make-custom-textual-input/output-port . Z2c75) (make-custom-textual-input-port . Z2c74) (make-custom-binary-output-port . Z2c73) (make-custom-binary-input/output-port . Z2c72) (make-custom-binary-input-port . Z2c71) (make-bytevector . Z2c70) (lookahead-u8 . Z2c6f) (lookahead-char . Z2c6e) (i/o-write-error? . Z2c6d) (i/o-read-error? . Z2c6c) (i/o-port-error? . Z2c6b) (i/o-invalid-position-error? . Z2c6a) (i/o-filename-error? . Z2c69) (i/o-file-protection-error? . Z2c68) (i/o-file-is-read-only-error? . Z2c67) (i/o-file-does-not-exist-error? . Z2c66) (i/o-file-already-exists-error? . Z2c65) (i/o-error? . Z2c64) (i/o-error-position . Z2c63) (i/o-error-port . Z2c62) (i/o-error-filename . Z2c61) (i/o-encoding-error? . Z2c60) (i/o-encoding-error-char . Z2c5f) (i/o-decoding-error? . Z2c5e) (get-u8 . Z2c5d) (get-string-n! . Z2c5c) (get-string-n . Z2c5b) (get-string-all . Z2c5a) (get-line . Z2c59) (get-datum . Z2c58) (get-char . Z2c57) (get-bytevector-some . Z2c56) (get-bytevector-n! . Z2c55) (get-bytevector-n . Z2c54) (get-bytevector-all . Z2c53) (flush-output-port . Z2c52) (close-port . Z2c51) (scheme-report-environment . Ze34) (quotient . Z2c50) (null-environment . Ze32) (remainder . Z2c4f) (modulo . Z2c4e) (inexact->exact . Z2c4d) (force . Z2c4c) (exact->inexact . Z2c4b) (make-promise . Z2c4a) (exit . Z2c49) (command-line . Z28db) (string-fill! . Z2c48) (string-set! . Z2c47) (set-cdr! . Z2c46) (set-car! . Z2c45) (remove . Z2c44) (remv . Z2c43) (remp . Z2c42) (remq . Z2c41) (partition . Z2c40) (memv . Z2c3f) (memq . Z2c3e) (memp . Z2c3d) (member . Z2c3c) (exists . Z2c3b) (for-all . Z2c3a) (fold-right . Z2c39) (fold-left . Z2c38) (find . Z2c37) (filter . Z2c36) (cons* . Z2c35) (assv . Z2c34) (assq . Z2c33) (assp . Z2c32) (assoc . Z2c31) (call-with-string-output-port . Z2c30) (call-with-port . Z2c2f) (call-with-bytevector-output-port . Z2c2e) (bytevector->string . Z2c2d) (buffer-mode? . Z2c2c) (binary-port? . Z2c2b) (with-exception-handler . Z2c2a) (raise-continuable . Z2c29) (raise . Z2c28) (eval . Ze38) (environment . Ze30) (make-enumeration . Z2c27) (enum-set=? . Z2c26) (enum-set-universe . Z2c25) (enum-set-union . Z2c24) (enum-set-subset? . Z2c23) (enum-set-projection . Z2c22) (enum-set-member? . Z2c21) (enum-set-intersection . Z2c20) (enum-set-indexer . Z2c1f) (enum-set-difference . Z2c1e) (enum-set-constructor . Z2c1d) (enum-set-complement . Z2c1c) (enum-set->list . Z2c1b) (who-condition? . Z2c1a) (warning? . Z2c19) (violation? . Z2c18) (undefined-violation? . Z2c17) (syntax-violation? . Z2c16) (syntax-violation-subform . Z2c15) (syntax-violation-form . Z2c14) (syntax-violation . Ze58) (simple-conditions . Z2c13) (serious-condition? . Z2c12) (non-continuable-violation? . Z2c11) (message-condition? . Z2c10) (make-who-condition . Z2c0f) (make-warning . Z2c0e) (make-violation . Z2c0d) (make-undefined-violation . Z2c0c) (make-syntax-violation . Z2c0b) (make-serious-condition . Z2c0a) (make-non-continuable-violation . Z2c09) (make-message-condition . Z2c08) (make-lexical-violation . Z2c07) (make-irritants-condition . Z2c06) (make-implementation-restriction-violation . Z2c05) (make-error . Z2c04) (make-assertion-violation . Z2c03) (lexical-violation? . Z2c02) (irritants-condition? . Z2c01) (implementation-restriction-violation? . Z2c00) (error? . Z2bff) (condition-who . Z2bfe) (condition-predicate . Z2bfd) (condition-message . Z2bfc) (condition-irritants . Z2bfb) (condition-accessor . Z2bfa) (condition . Z2bf9) (assertion-violation? . Z2bf8) (condition? . Z2bf7) (utf32->string . Z2bf6) (utf16->string . Z2bf5) (utf8->string . Z2bf4) (uint-list->bytevector . Z2bf3) (u8-list->bytevector . Z2bf2) (string->utf8 . Z2bf1) (string->utf32 . Z2bf0) (string->utf16 . Z2bef) (sint-list->bytevector . Z2bee) (native-endianness . Z2bed) (bytevector? . Z2bec) (bytevector=? . Z2beb) (bytevector-uint-set! . Z2bea) (bytevector-uint-ref . Z2be9) (bytevector-u8-set! . Z2be8) (bytevector-u8-ref . Z2be7) (bytevector-u64-set! . Z2be6) (bytevector-u64-ref . Z2be5) (bytevector-u64-native-set! . Z2be4) (bytevector-u64-native-ref . Z2be3) (bytevector-u32-set! . Z2be2) (bytevector-u32-ref . Z2be1) (bytevector-u32-native-set! . Z2be0) (bytevector-u32-native-ref . Z2bdf) (bytevector-u16-set! . Z2bde) (bytevector-u16-ref . Z2bdd) (bytevector-u16-native-set! . Z2bdc) (bytevector-u16-native-ref . Z2bdb) (bytevector-sint-set! . Z2bda) (bytevector-sint-ref . Z2bd9) (bytevector-s8-set! . Z2bd8) (bytevector-s8-ref . Z2bd7) (bytevector-s64-set! . Z2bd6) (bytevector-s64-ref . Z2bd5) (bytevector-s64-native-set! . Z2bd4) (bytevector-s64-native-ref . Z2bd3) (bytevector-s32-set! . Z2bd2) (bytevector-s32-ref . Z2bd1) (bytevector-s32-native-set! . Z2bd0) (bytevector-s32-native-ref . Z2bcf) (bytevector-s16-set! . Z2bce) (bytevector-s16-ref . Z2bcd) (bytevector-s16-native-set! . Z2bcc) (bytevector-s16-native-ref . Z2bcb) (bytevector-length . Z2bca) (bytevector-ieee-single-ref . Z2bc9) (bytevector-ieee-single-set! . Z2bc8) (bytevector-ieee-single-native-set! . Z2bc7) (bytevector-ieee-single-native-ref . Z2bc6) (bytevector-ieee-double-set! . Z2bc5) (bytevector-ieee-double-ref . Z2bc4) (bytevector-ieee-double-native-set! . Z2bc3) (bytevector-ieee-double-native-ref . Z2bc2) (bytevector-fill! . Z2bc1) (bytevector-copy! . Z2bc0) (bytevector-copy . Z2bbf) (bytevector->uint-list . Z2bbe) (bytevector->u8-list . Z2bbd) (bytevector->sint-list . Z2bbc) (no-nans-violation? . Z2bbb) (no-infinities-violation? . Z2bba) (make-no-nans-violation . Z2bb9) (make-no-infinities-violation . Z2bb8) (real->flonum . Z2bb7) (flzero? . Z2bb6) (fltruncate . Z2bb5) (fltan . Z2bb4) (flsqrt . Z2bb3) (flsin . Z2bb2) (flround . Z2bb1) (flpositive? . Z2bb0) (flonum? . Z2baf) (flodd? . Z2bae) (flnumerator . Z2bad) (flnegative? . Z2bac) (flnan? . Z2bab) (flmod0 . Z2baa) (flmod . Z2ba9) (flmin . Z2ba8) (flmax . Z2ba7) (fllog . Z2ba6) (flinteger? . Z2ba5) (flinfinite? . Z2ba4) (flfloor . Z2ba3) (flfinite? . Z2ba2) (flexpt . Z2ba1) (flexp . Z2ba0) (fleven? . Z2b9f) (fldiv0-and-mod0 . Z2b9e) (fldiv0 . Z2b9d) (fldiv-and-mod . Z2b9c) (fldiv . Z2b9b) (fldenominator . Z2b9a) (flcos . Z2b99) (flceiling . Z2b98) (flatan . Z2b97) (flasin . Z2b96) (flacos . Z2b95) (flabs . Z2b94) (fl>? . Z2b93) (fl>=? . Z2b92) (fl=? . Z2b91) (fl<? . Z2b90) (fl<=? . Z2b8f) (fl/ . Z2b8e) (fl- . Z2b8d) (fl+ . Z2b8c) (fl* . Z2b8b) (fixnum->flonum . Z2b8a) (fxzero? . Z2b89) (fxxor . Z2b88) (fxrotate-bit-field . Z2b87) (fxreverse-bit-field . Z2b86) (fxpositive? . Z2b85) (fxodd? . Z2b84) (fxnot . Z2b83) (fxnegative? . Z2b82) (fxmod0 . Z2b81) (fxmod . Z2b80) (fxmin . Z2b7f) (fxmax . Z2b7e) (fxlength . Z2b7d) (fxior . Z2b7c) (fxif . Z2b7b) (fxfirst-bit-set . Z2b7a) (fxeven? . Z2b79) (fxdiv0-and-mod0 . Z2b78) (fxdiv0 . Z2b77) (fxdiv-and-mod . Z2b76) (fxdiv . Z2b75) (fxcopy-bit-field . Z2b74) (fxcopy-bit . Z2b73) (fxbit-set? . Z2b72) (fxbit-field . Z2b71) (fxbit-count . Z2b70) (fxarithmetic-shift-right . Z2b6f) (fxarithmetic-shift-left . Z2b6e) (fxarithmetic-shift . Z2b6d) (fxand . Z2b6c) (fx>? . Z2b6b) (fx>=? . Z2b6a) (fx=? . Z2b69) (fx<? . Z2b68) (fx<=? . Z2b67) (fx-/carry . Z2b66) (fx- . Z2b65) (fx+/carry . Z2b64) (fx+ . Z2b63) (fx*/carry . Z2b62) (fx* . Z2b61) (greatest-fixnum . Z2b60) (least-fixnum . Z2b5f) (fixnum-width . Z2b5e) (fixnum? . Z2b5d) (bitwise-rotate-bit-field . Z2b5c) (bitwise-reverse-bit-field . Z2b5b) (bitwise-length . Z2b5a) (bitwise-if . Z2b59) (bitwise-first-bit-set . Z2b58) (bitwise-copy-bit-field . Z2b57) (bitwise-copy-bit . Z2b56) (bitwise-bit-set? . Z2b55) (bitwise-bit-field . Z2b54) (bitwise-bit-count . Z2b53) (bitwise-xor . Z2b52) (bitwise-ior . Z2b51) (bitwise-and . Z2b50) (bitwise-not . Z2b4f) (bitwise-arithmetic-shift-right . Z2b4e) (bitwise-arithmetic-shift-left . Z2b4d) (bitwise-arithmetic-shift . Z2b4c) (zero? . Z2b4b) (vector? . Z2b4a) (vector-set! . Z2b49) (vector-ref . Z2b48) (vector-map . Z2b47) (vector-length . Z2b46) (vector-for-each . Z2b45) (vector-fill! . Z2b44) (vector->list . Z2b43) (vector . Z2b42) (values . Z2b41) (truncate . Z2b40) (tan . Z2b3f) (symbol? . Z2b3e) (symbol=? . Z2b3d) (symbol->string . Z2b3c) (substring . Z2b3b) (string? . Z2b3a) (string>? . Z2b39) (string>=? . Z2b38) (string=? . Z2b37) (string<? . Z2b36) (string<=? . Z2b35) (string-ref . Z2b34) (string-length . Z2b33) (string-for-each . Z2b32) (string-copy . Z2b31) (string-append . Z2b30) (string->symbol . Z2b2f) (string->number . Z2b2e) (string->list . Z2b2d) (string . Z2b2c) (sqrt . Z2b2b) (sin . Z2b2a) (round . Z2b29) (reverse . Z2b28) (real? . Z2b27) (real-valued? . Z2b26) (real-part . Z2b25) (rationalize . Z2b24) (rational? . Z2b23) (rational-valued? . Z2b22) (procedure? . Z2b21) (positive? . Z2b20) (pair? . Z2b1f) (odd? . Z2b1e) (numerator . Z2b1d) (number? . Z2b1c) (number->string . Z2b1b) (null? . Z2b1a) (not . Z2b19) (negative? . Z2b18) (nan? . Z2b17) (min . Z2b16) (max . Z2b15) (map . Z2b14) (make-vector . Z2b13) (make-string . Z2b12) (make-rectangular . Z2b11) (make-polar . Z2b10) (magnitude . Z2b0f) (log . Z2b0e) (list? . Z2b0d) (list-tail . Z2b0c) (list-ref . Z2b0b) (list->vector . Z2b0a) (list->string . Z2b09) (list . Z2b08) (length . Z2b07) (lcm . Z2b06) (integer? . Z2b05) (integer-valued? . Z2b04) (integer->char . Z2b03) (infinite? . Z2b02) (inexact? . Z2b01) (inexact . Z2b00) (imag-part . Z2aff) (gcd . Z2afe) (for-each . Z2afd) (floor . Z2afc) (finite? . Z2afb) (expt . Z2afa) (exp . Z2af9) (exact? . Z2af8) (exact-integer-sqrt . Z2af7) (exact . Z2af6) (even? . Z2af5) (error . Z2af4) (eqv? . Z2af3) (equal? . Z2af2) (eq? . Z2af1) (dynamic-wind . Z2af0) (div0-and-mod0 . Z2aef) (mod0 . Z2aee) (div0 . Z2aed) (div-and-mod . Z2aec) (mod . Z2aeb) (div . Z2aea) (denominator . Z2ae9) (cos . Z2ae8) (cons . Z2ae7) (complex? . Z2ae6) (char? . Z2ae5) (char>? . Z2ae4) (char>=? . Z2ae3) (char=? . Z2ae2) (char<? . Z2ae1) (char<=? . Z2ae0) (char->integer . Z2adf) (ceiling . Z2ade) (call-with-values . Z2add) (call/cc . Z2adc) (call-with-current-continuation . Z2adb) (cddddr . Z2ada) (cdddar . Z2ad9) (cddadr . Z2ad8) (cddaar . Z2ad7) (cdaddr . Z2ad6) (cdadar . Z2ad5) (cdaadr . Z2ad4) (cdaaar . Z2ad3) (cadddr . Z2ad2) (caddar . Z2ad1) (cadadr . Z2ad0) (cadaar . Z2acf) (caaddr . Z2ace) (caadar . Z2acd) (caaadr . Z2acc) (caaaar . Z2acb) (cdddr . Z2aca) (cddar . Z2ac9) (cdadr . Z2ac8) (cdaar . Z2ac7) (caddr . Z2ac6) (cadar . Z2ac5) (caadr . Z2ac4) (caaar . Z2ac3) (cddr . Z2ac2) (cdar . Z2ac1) (cadr . Z2ac0) (caar . Z2abf) (cdr . Z2abe) (car . Z2abd) (boolean? . Z2abc) (boolean=? . Z2abb) (atan . Z2aba) (assertion-violation . Z2ab9) (assertion-error . Ze52) (asin . Z2ab8) (apply . Z2ab7) (append . Z2ab6) (angle . Z2ab5) (acos . Z2ab4) (abs . Z2ab3) (/ . Z2ab2) (* . Z2ab1) (- . Z2ab0) (+ . Z2aaf) (>= . Z2aae) (> . Z2aad) (= . Z2aac) (<= . Z2aab) (< . Z2aaa) (library . Z2aa9) (&no-nans . Z2aa8) (&no-infinities . Z2aa7) (&i/o-encoding . Z2aa6) (&i/o-decoding . Z2aa5) (&i/o-port . Z2aa4) (&i/o-file-does-not-exist . Z2aa3) (&i/o-file-already-exists . Z2aa2) (&i/o-file-is-read-only . Z2aa1) (&i/o-file-protection . Z2aa0) (&i/o-filename . Z2a9f) (&i/o-invalid-position . Z2a9e) (&i/o-write . Z2a9d) (&i/o-read . Z2a9c) (&i/o . Z2a9b) (&undefined . Z2a9a) (&syntax . Z2a99) (&lexical . Z2a98) (&implementation-restriction . Z2a97) (&non-continuable . Z2a96) (&who . Z2a95) (&irritants . Z2a94) (&assertion . Z2a93) (&violation . Z2a92) (&error . Z2a91) (&serious . Z2a90) (&warning . Z2a8f) (&message . Z2a8e) (&condition . Z2a8d) (define-condition-type . Z2a8c) (define-enumeration . Z2a8b) (define-record-type . Z2a8a) (parent-rtd . Z2a89) (nongenerative . Z2a88) (opaque . Z2a87) (sealed . Z2a86) (protocol . Z2a85) (parent . Z2a84) (immutable . Z2a83) (mutable . Z2a82) (fields . Z2a81) (error-handling-mode . Z2a80) (file-options . Z2a7f) (buffer-mode . Z2a7e) (eol-style . Z2a7d) (guard . Z2a7c) (trace-define . Z2a7b) (trace-lambda . Z2a7a) (unsyntax-splicing . Z2a79) (unsyntax . Z2a78) (unquote-splicing . Z2a77) (unquote . Z2a76) (_ . Z2a75) (else . Z2a74) (=> . Z2a73) (... . Z2a72) (assert . Z2a71) (endianness . Z2a70) (delay . Z2a6f) (time . Z2a6e) (do . Z2a6d) (cond . Z2a6c) (let* . Z2a6b) (let*-values . Z2a6a) (let-values . Z2a69) (identifier-syntax . Z2a68) (with-syntax . Z2a67) (quasisyntax . Z2a66) (quasiquote . Z2a65) (syntax-rules . Z2a64) (include . Z2a63) (define-struct . Z2a62) (record-constructor-descriptor . Z2a61) (record-type-descriptor . Z2a60) (case . Z2a5f) (parameterize . Z2a5e) (unless . Z2a5d) (when . Z2a5c) (or . Z2a5b) (and . Z2a5a) (if . Z2a59) (let . Z2a58) (letrec* . Z2a57) (letrec . Z2a56) (type-descriptor . Z2a55) (case-lambda . Z2a54) (lambda . Z2a53) (syntax . Z2a52) (syntax-case . Z2a51) (quote . Z2a50) (foreign-call . Z2a4f) (letrec-syntax . Z2a4e) (let-syntax . Z2a4d) (set! . Z2a4c) (import . Z2a4b) (begin . Z2a4a) (module . Z2a49) (define-syntax . Z2a48) (define . Z2a47)) '((Z2de7 core-prim . &no-nans-rcd) (Z2de6 core-prim . &no-nans-rtd) (Z2de5 core-prim . &no-infinities-rcd) (Z2de4 core-prim . &no-infinities-rtd) (Z2de3 core-prim . &i/o-encoding-rcd) (Z2de2 core-prim . &i/o-encoding-rtd) (Z2de1 core-prim . &i/o-decoding-rcd) (Z2de0 core-prim . &i/o-decoding-rtd) (Z2ddf core-prim . &i/o-port-rcd) (Z2dde core-prim . &i/o-port-rtd) (Z2ddd core-prim . &i/o-file-does-not-exist-rcd) (Z2ddc core-prim . &i/o-file-does-not-exist-rtd) (Z2ddb core-prim . &i/o-file-already-exists-rcd) (Z2dda core-prim . &i/o-file-already-exists-rtd) (Z2dd9 core-prim . &i/o-file-is-read-only-rcd) (Z2dd8 core-prim . &i/o-file-is-read-only-rtd) (Z2dd7 core-prim . &i/o-file-protection-rcd) (Z2dd6 core-prim . &i/o-file-protection-rtd) (Z2dd5 core-prim . &i/o-filename-rcd) (Z2dd4 core-prim . &i/o-filename-rtd) (Z2dd3 core-prim . &i/o-invalid-position-rcd) (Z2dd2 core-prim . &i/o-invalid-position-rtd) (Z2dd1 core-prim . &i/o-write-rcd) (Z2dd0 core-prim . &i/o-write-rtd) (Z2dcf core-prim . &i/o-read-rcd) (Z2dce core-prim . &i/o-read-rtd) (Z2dcd core-prim . &i/o-rcd) (Z2dcc core-prim . &i/o-rtd) (Z2dcb core-prim . &undefined-rcd) (Z2dca core-prim . &undefined-rtd) (Z2dc9 core-prim . &syntax-rcd) (Z2dc8 core-prim . &syntax-rtd) (Z2dc7 core-prim . &lexical-rcd) (Z2dc6 core-prim . &lexical-rtd) (Z2dc5 core-prim . &implementation-restriction-rcd) (Z2dc4 core-prim . &implementation-restriction-rtd) (Z2dc3 core-prim . &non-continuable-rcd) (Z2dc2 core-prim . &non-continuable-rtd) (Z2dc1 core-prim . &who-rcd) (Z2dc0 core-prim . &who-rtd) (Z2dbf core-prim . &irritants-rcd) (Z2dbe core-prim . &irritants-rtd) (Z2dbd core-prim . &assertion-rcd) (Z2dbc core-prim . &assertion-rtd) (Z2dbb core-prim . &violation-rcd) (Z2dba core-prim . &violation-rtd) (Z2db9 core-prim . &error-rcd) (Z2db8 core-prim . &error-rtd) (Z2db7 core-prim . &serious-rcd) (Z2db6 core-prim . &serious-rtd) (Z2db5 core-prim . &warning-rcd) (Z2db4 core-prim . &warning-rtd) (Z2db3 core-prim . &message-rcd) (Z2db2 core-prim . &message-rtd) (Z2db1 core-prim . &condition-rcd) (Z2db0 core-prim . &condition-rtd) (Ze54 core-prim . syntax-error) (Zd78 core-prim . syntax-dispatch) (Z2daf core-prim . pretty-print) (Z2dae core-prim . eval-core) (Z2dad core-prim . set-symbol-value!) (Z2dac core-prim . symbol-value) (Z2dab core-prim . gensym) (Z2daa core-prim . void) (Z28e1 core-prim . load) (Ze66 core-prim . interaction-environment) (Z2da9 core-prim . char-ready?) (Z2da8 core-prim . regexp?) (Z2da7 core-prim . read-line) (Z2da6 core-prim . gensym-prefix-set!) (Z2da5 core-prim . ungensym) (Z2da4 core-prim . alist->eq-hash-table) (Z2da3 core-prim . assoc-ref) (Z2da2 core-prim . print) (Z2da1 core-prim . format) (Z2da0 core-prim . host-os) (Z7b7 core-prim . library-path) (Z2d9f core-prim . standard-library-path) (Z2d9e core-prim . %monapi-message-send) (Z2d9d core-prim . file-newer?) (Z2d9c core-prim . stat-mtime) (Z2d9b core-prim . write-to-file) (Z2d9a core-prim . file->list) (Z2d99 core-prim . file->string) (Z2d98 core-prim . digit->integer) (Z2d97 core-prim . call-with-string-input-port) (Z2d96 core-prim . call-with-string-io) (Z2d95 core-prim . string-split) (Z2d94 core-prim . bytevector-for-each) (Z2d93 core-prim . string->regexp) (Z2d92 core-prim . rxmatch) (Z2d91 core-prim . regexp-replace-all) (Z2d90 core-prim . hashtable-for-each) (Z5a1 core-prim . mosh-cache-dir) (Z2d8f core-prim . call-process) (Z2d8e core-prim . local-tz-offset) (Z2d8d core-prim . microseconds) (Z2d8c core-prim . directory-list) (Z2d8b core-prim . set-current-directory!) (Z2d8a core-prim . expand-path) (Z2d89 core-prim . current-directory) (Z2d88 core-prim . %spawn) (Z2d87 core-prim . %waitpid) (Z2d86 core-prim . simple-struct-name) (Z2d85 core-prim . simple-struct-set!) (Z2d84 core-prim . simple-struct-ref) (Z2d83 core-prim . make-simple-struct) (Z2d82 core-prim . simple-struct?) (Z2d81 core-prim . pointer-ref-c-int64) (Z2d80 core-prim . pointer-ref-c-int32) (Z2d7f core-prim . pointer-ref-c-int16) (Z2d7e core-prim . pointer-ref-c-int8) (Z2d7d core-prim . pointer-ref-c-uint64) (Z2d7c core-prim . pointer-ref-c-uint32) (Z2d7b core-prim . pointer-ref-c-uint16) (Z2d7a core-prim . pointer-ref-c-uint8) (Z2d79 core-prim . pointer-set-c-uint64!) (Z2d78 core-prim . pointer-set-c-uint32!) (Z2d77 core-prim . pointer-set-c-uint16!) (Z2d76 core-prim . pointer-set-c-uint8!) (Z2d75 core-prim . pointer-set-c-int64!) (Z2d74 core-prim . pointer-set-c-int32!) (Z2d73 core-prim . pointer-set-c-int16!) (Z2d72 core-prim . pointer-set-c-int8!) (Z2d71 core-prim . pointer-set-c-pointer!) (Z2d70 core-prim . pointer-set-c-double!) (Z2d6f core-prim . pointer-set-c-float!) (Z2d6e core-prim . pointer-set-c-long-long!) (Z2d6d core-prim . pointer-set-c-long!) (Z2d6c core-prim . pointer-set-c-int!) (Z2d6b core-prim . pointer-set-c-short!) (Z2d6a core-prim . pointer-set-c-char!) (Z2d69 core-prim . pointer-ref-c-pointer) (Z2d68 core-prim . pointer-ref-c-double) (Z2d67 core-prim . pointer-ref-c-float) (Z2d66 core-prim . pointer-ref-c-unsigned-long-long) (Z2d65 core-prim . pointer-ref-c-signed-long-long) (Z2d64 core-prim . pointer-ref-c-unsigned-long) (Z2d63 core-prim . pointer-ref-c-signed-long) (Z2d62 core-prim . pointer-ref-c-unsigned-int) (Z2d61 core-prim . pointer-ref-c-signed-int) (Z2d60 core-prim . pointer-ref-c-unsigned-short) (Z2d5f core-prim . pointer-ref-c-signed-short) (Z2d5e core-prim . pointer-ref-c-unsigned-char) (Z2d5d core-prim . pointer-ref-c-signed-char) (Z2d5c core-prim . pointer->integer) (Z2d5b core-prim . integer->pointer) (Z2d5a core-prim . pointer?) (Z2d59 core-prim . shared-errno) (Z2d58 core-prim . %ffi-free-c-callback-trampoline) (Z2d57 core-prim . %ffi-make-c-callback-trampoline) (Z2d56 core-prim . %ffi-free) (Z2d55 core-prim . %ffi-malloc) (Z2d54 core-prim . %ffi-supported?) (Z2d53 core-prim . %ffi-pointer->string) (Z2d52 core-prim . %ffi-call) (Z2d51 core-prim . %ffi-lookup) (Z2d50 core-prim . %ffi-open) (Z2d4f core-prim . null-terminated-utf8->string) (Z2d4e core-prim . null-terminated-bytevector->string) (Z2d4d core-prim . %exec) (Z2d4c core-prim . %fork) (Z2d4b core-prim . %pipe) (Z2d4a core-prim . p) (Z2d49 core-prim . open-output-string) (Z2d48 core-prim . get-output-string) (Z2d47 core-prim . file-stat-ctime) (Z2d46 core-prim . file-stat-atime) (Z2d45 core-prim . file-stat-mtime) (Z2d44 core-prim . file-size-in-bytes) (Z2d43 core-prim . file-writable?) (Z2d42 core-prim . file-executable?) (Z2d41 core-prim . file-readable?) (Z2d40 core-prim . file-regular?) (Z2d3f core-prim . file-symbolic-link?) (Z2d3e core-prim . file-directory?) (Z2d3d core-prim . create-symbolic-link) (Z2d3c core-prim . rename-file) (Z2d3b core-prim . delete-directory) (Z2d3a core-prim . create-directory) (Z2d39 core-prim . create-mosh-cache-dir) (Z2d38 core-prim . get-environment-variables) (Z2d37 core-prim . current-exception-handler) (Z2d36 core-prim . get-environment-variable) (Z2d35 core-prim . join-wraps) (Z2d34 core-prim . id->real-label) (Z2d33 core-prim . same-marks?) (Z2d32 core-prim . same-marks*?) (Z2d31 core-prim . get-timeofday) (Z2d30 core-prim . get-command-line) (Z2d2f core-prim . sys-display) (Z2d2e core-prim . whereis) (Z2d2d core-prim . register) (Z2d2c core-prim . vm-join!) (Z2d2b core-prim . vm-set-value!) (Z2d2a core-prim . vm?) (Z2d29 core-prim . main-vm?) (Z2d28 core-prim . vm-eval) (Z2d27 core-prim . vm-self) (Z2d26 core-prim . vm-start!) (Z2d25 core-prim . make-vm) (Z2d24 core-prim . mutex-try-lock!) (Z2d23 core-prim . mutex-unlock!) (Z2d22 core-prim . mutex-lock!) (Z2d21 core-prim . mutex?) (Z2d20 core-prim . make-mutex) (Z2d1f core-prim . condition-variable-notify-all!) (Z2d1e core-prim . condition-variable-notify!) (Z2d1d core-prim . condition-variable-wait!) (Z2d1c core-prim . make-condition-variable) (Z2d1b core-prim . write/ss) (Z2d1a core-prim . mosh-executable-path) (Z2d19 core-prim . make-file-options) (Z2d18 core-prim . source-info) (Z2d17 core-prim . make-compiler-instruction) (Z2d16 core-prim . make-instruction) (Z2d15 core-prim . set-source-info!) (Z2d14 core-prim . bignum?) (Z2d13 core-prim . fast-equal?) (Z2d12 core-prim . fasl-read) (Z2d11 core-prim . fasl-write) (Z2d10 core-prim . time-usage) (Z2d0f core-prim . os-constant) (Z2d0e core-prim . disasm) (Z59f core-prim . make-parameter) (Z2d0d core-prim . socket-port) (Z2d0c core-prim . socket-shutdown) (Z2d0b core-prim . socket-close) (Z2d0a core-prim . socket-send) (Z2d09 core-prim . socket-recv!) (Z2d08 core-prim . socket-recv) (Z2d07 core-prim . make-server-socket) (Z2d06 core-prim . make-client-socket) (Z2d05 core-prim . socket-accept) (Z2d04 core-prim . socket?) (Z2d03 core-prim . string-upcase) (Z2d02 core-prim . string-titlecase) (Z2d01 core-prim . string-normalize-nfkd) (Z2d00 core-prim . string-normalize-nfkc) (Z2cff core-prim . string-normalize-nfd) (Z2cfe core-prim . string-normalize-nfc) (Z2cfd core-prim . string-foldcase) (Z2cfc core-prim . string-downcase) (Z2cfb core-prim . string-ci>?) (Z2cfa core-prim . string-ci>=?) (Z2cf9 core-prim . string-ci=?) (Z2cf8 core-prim . string-ci<?) (Z2cf7 core-prim . string-ci<=?) (Z2cf6 core-prim . char-whitespace?) (Z2cf5 core-prim . char-upper-case?) (Z2cf4 core-prim . char-title-case?) (Z2cf3 core-prim . char-numeric?) (Z2cf2 core-prim . char-lower-case?) (Z2cf1 core-prim . char-general-category) (Z2cf0 core-prim . char-upcase) (Z2cef core-prim . char-titlecase) (Z2cee core-prim . char-foldcase) (Z2ced core-prim . char-downcase) (Z2cec core-prim . char-ci>?) (Z2ceb core-prim . char-ci>=?) (Z2cea core-prim . char-ci=?) (Z2ce9 core-prim . char-ci<?) (Z2ce8 core-prim . char-ci<=?) (Z2ce7 core-prim . char-alphabetic?) (Zba3 core-prim . make-variable-transformer) (Ze5a core-prim . identifier?) (Ze46 core-prim . generate-temporaries) (Ze48 core-prim . free-identifier=?) (Ze5e core-prim . syntax->datum) (Ze5c core-prim . datum->syntax) (Ze4a core-prim . bound-identifier=?) (Z2ce6 core-prim . record-type-descriptor?) (Z2ce5 core-prim . record-predicate) (Z2ce4 core-prim . record-mutator) (Z2ce3 core-prim . record-constructor) (Z2ce2 core-prim . record-accessor) (Z2ce1 core-prim . make-record-type-descriptor) (Z2ce0 core-prim . make-record-constructor-descriptor) (Z2cdf core-prim . record?) (Z2cde core-prim . record-type-uid) (Z2cdd core-prim . record-type-sealed?) (Z2cdc core-prim . record-type-parent) (Z2cdb core-prim . record-type-opaque?) (Z2cda core-prim . record-type-name) (Z2cd9 core-prim . record-type-generative?) (Z2cd8 core-prim . record-type-field-names) (Z2cd7 core-prim . record-rtd) (Z2cd6 core-prim . record-field-mutable?) (Z2cd5 core-prim . delete-file) (Z2cd4 core-prim . file-exists?) (Z2cd3 core-prim . vector-sort!) (Z2cd2 core-prim . vector-sort) (Z2cd1 core-prim . list-sort) (Z2cd0 core-prim . symbol-hash) (Z2ccf core-prim . string-ci-hash) (Z2cce core-prim . string-hash) (Z2ccd core-prim . equal-hash) (Z2ccc core-prim . hashtable-equivalence-function) (Z2ccb core-prim . make-hashtable) (Z2cca core-prim . hashtable-hash-function) (Z2cc9 core-prim . make-eqv-hashtable) (Z2cc8 core-prim . make-eq-hashtable) (Z2cc7 core-prim . hashtable?) (Z2cc6 core-prim . hashtable-update!) (Z2cc5 core-prim . hashtable-size) (Z2cc4 core-prim . hashtable-set!) (Z2cc3 core-prim . hashtable-ref) (Z2cc2 core-prim . hashtable-mutable?) (Z2cc1 core-prim . hashtable-keys) (Z2cc0 core-prim . hashtable-entries) (Z2cbf core-prim . hashtable-delete!) (Z2cbe core-prim . hashtable-copy) (Z2cbd core-prim . hashtable-contains?) (Z2cbc core-prim . hashtable-clear!) (Z2cbb core-prim . call-with-output-file) (Z2cba core-prim . call-with-input-file) (Z2cb9 core-prim . write-char) (Z2cb8 core-prim . write) (Z2cb7 core-prim . with-output-to-file) (Z2cb6 core-prim . with-input-from-file) (Z2cb5 core-prim . read-char) (Z2cb4 core-prim . read) (Z2cb3 core-prim . peek-char) (Z2cb2 core-prim . open-output-file) (Z2cb1 core-prim . open-input-file) (Z2cb0 core-prim . newline) (Z2caf core-prim . display) (Z2cae core-prim . close-output-port) (Z2cad core-prim . close-input-port) (Z2cac core-prim . eof-object?) (Z2cab core-prim . eof-object) (Z2caa core-prim . current-error-port) (Z2ca9 core-prim . current-output-port) (Z2ca8 core-prim . current-input-port) (Z2ca7 core-prim . output-port?) (Z2ca6 core-prim . input-port?) (Z2ca5 core-prim . utf-8-codec) (Z2ca4 core-prim . utf-16-codec) (Z2ca3 core-prim . transcoder-error-handling-mode) (Z2ca2 core-prim . transcoder-eol-style) (Z2ca1 core-prim . transcoder-codec) (Z2ca0 core-prim . transcoded-port) (Z2c9f core-prim . textual-port?) (Z2c9e core-prim . string->bytevector) (Z2c9d core-prim . standard-output-port) (Z2c9c core-prim . standard-input-port) (Z2c9b core-prim . standard-error-port) (Z2c9a core-prim . set-port-position!) (Z2c99 core-prim . put-u8) (Z2c98 core-prim . put-string) (Z2c97 core-prim . put-datum) (Z2c96 core-prim . put-char) (Z2c95 core-prim . put-bytevector) (Z2c94 core-prim . port?) (Z2c93 core-prim . port-transcoder) (Z2c92 core-prim . port-position) (Z2c91 core-prim . port-has-set-port-position!?) (Z2c90 core-prim . port-has-port-position?) (Z2c8f core-prim . port-eof?) (Z2c8e core-prim . output-port-buffer-mode) (Z2c8d core-prim . open-string-output-port) (Z2c8c core-prim . open-string-input-port) (Z2c8b core-prim . open-file-output-port) (Z2c8a core-prim . open-file-input/output-port) (Z2c89 core-prim . open-file-input-port) (Z2c88 core-prim . open-bytevector-output-port) (Z2c87 core-prim . open-bytevector-input-port) (Z2c86 core-prim . native-transcoder) (Z2c85 core-prim . native-eol-style) (Z2c84 core-prim . make-transcoder) (Z2c83 core-prim . latin-1-codec) (Z2c82 core-prim . make-i/o-write-error) (Z2c81 core-prim . make-i/o-read-error) (Z2c80 core-prim . make-i/o-port-error) (Z2c7f core-prim . make-i/o-invalid-position-error) (Z2c7e core-prim . make-i/o-filename-error) (Z2c7d core-prim . make-i/o-file-protection-error) (Z2c7c core-prim . make-i/o-file-is-read-only-error) (Z2c7b core-prim . make-i/o-file-does-not-exist-error) (Z2c7a core-prim . make-i/o-file-already-exists-error) (Z2c79 core-prim . make-i/o-error) (Z2c78 core-prim . make-i/o-encoding-error) (Z2c77 core-prim . make-i/o-decoding-error) (Z2c76 core-prim . make-custom-textual-output-port) (Z2c75 core-prim . make-custom-textual-input/output-port) (Z2c74 core-prim . make-custom-textual-input-port) (Z2c73 core-prim . make-custom-binary-output-port) (Z2c72 core-prim . make-custom-binary-input/output-port) (Z2c71 core-prim . make-custom-binary-input-port) (Z2c70 core-prim . make-bytevector) (Z2c6f core-prim . lookahead-u8) (Z2c6e core-prim . lookahead-char) (Z2c6d core-prim . i/o-write-error?) (Z2c6c core-prim . i/o-read-error?) (Z2c6b core-prim . i/o-port-error?) (Z2c6a core-prim . i/o-invalid-position-error?) (Z2c69 core-prim . i/o-filename-error?) (Z2c68 core-prim . i/o-file-protection-error?) (Z2c67 core-prim . i/o-file-is-read-only-error?) (Z2c66 core-prim . i/o-file-does-not-exist-error?) (Z2c65 core-prim . i/o-file-already-exists-error?) (Z2c64 core-prim . i/o-error?) (Z2c63 core-prim . i/o-error-position) (Z2c62 core-prim . i/o-error-port) (Z2c61 core-prim . i/o-error-filename) (Z2c60 core-prim . i/o-encoding-error?) (Z2c5f core-prim . i/o-encoding-error-char) (Z2c5e core-prim . i/o-decoding-error?) (Z2c5d core-prim . get-u8) (Z2c5c core-prim . get-string-n!) (Z2c5b core-prim . get-string-n) (Z2c5a core-prim . get-string-all) (Z2c59 core-prim . get-line) (Z2c58 core-prim . get-datum) (Z2c57 core-prim . get-char) (Z2c56 core-prim . get-bytevector-some) (Z2c55 core-prim . get-bytevector-n!) (Z2c54 core-prim . get-bytevector-n) (Z2c53 core-prim . get-bytevector-all) (Z2c52 core-prim . flush-output-port) (Z2c51 core-prim . close-port) (Ze34 core-prim . scheme-report-environment) (Z2c50 core-prim . quotient) (Ze32 core-prim . null-environment) (Z2c4f core-prim . remainder) (Z2c4e core-prim . modulo) (Z2c4d core-prim . inexact->exact) (Z2c4c core-prim . force) (Z2c4b core-prim . exact->inexact) (Z2c4a core-prim . make-promise) (Z2c49 core-prim . exit) (Z28db core-prim . command-line) (Z2c48 core-prim . string-fill!) (Z2c47 core-prim . string-set!) (Z2c46 core-prim . set-cdr!) (Z2c45 core-prim . set-car!) (Z2c44 core-prim . remove) (Z2c43 core-prim . remv) (Z2c42 core-prim . remp) (Z2c41 core-prim . remq) (Z2c40 core-prim . partition) (Z2c3f core-prim . memv) (Z2c3e core-prim . memq) (Z2c3d core-prim . memp) (Z2c3c core-prim . member) (Z2c3b core-prim . exists) (Z2c3a core-prim . for-all) (Z2c39 core-prim . fold-right) (Z2c38 core-prim . fold-left) (Z2c37 core-prim . find) (Z2c36 core-prim . filter) (Z2c35 core-prim . cons*) (Z2c34 core-prim . assv) (Z2c33 core-prim . assq) (Z2c32 core-prim . assp) (Z2c31 core-prim . assoc) (Z2c30 core-prim . call-with-string-output-port) (Z2c2f core-prim . call-with-port) (Z2c2e core-prim . call-with-bytevector-output-port) (Z2c2d core-prim . bytevector->string) (Z2c2c core-prim . buffer-mode?) (Z2c2b core-prim . binary-port?) (Z2c2a core-prim . with-exception-handler) (Z2c29 core-prim . raise-continuable) (Z2c28 core-prim . raise) (Ze38 core-prim . eval) (Ze30 core-prim . environment) (Z2c27 core-prim . make-enumeration) (Z2c26 core-prim . enum-set=?) (Z2c25 core-prim . enum-set-universe) (Z2c24 core-prim . enum-set-union) (Z2c23 core-prim . enum-set-subset?) (Z2c22 core-prim . enum-set-projection) (Z2c21 core-prim . enum-set-member?) (Z2c20 core-prim . enum-set-intersection) (Z2c1f core-prim . enum-set-indexer) (Z2c1e core-prim . enum-set-difference) (Z2c1d core-prim . enum-set-constructor) (Z2c1c core-prim . enum-set-complement) (Z2c1b core-prim . enum-set->list) (Z2c1a core-prim . who-condition?) (Z2c19 core-prim . warning?) (Z2c18 core-prim . violation?) (Z2c17 core-prim . undefined-violation?) (Z2c16 core-prim . syntax-violation?) (Z2c15 core-prim . syntax-violation-subform) (Z2c14 core-prim . syntax-violation-form) (Ze58 core-prim . syntax-violation) (Z2c13 core-prim . simple-conditions) (Z2c12 core-prim . serious-condition?) (Z2c11 core-prim . non-continuable-violation?) (Z2c10 core-prim . message-condition?) (Z2c0f core-prim . make-who-condition) (Z2c0e core-prim . make-warning) (Z2c0d core-prim . make-violation) (Z2c0c core-prim . make-undefined-violation) (Z2c0b core-prim . make-syntax-violation) (Z2c0a core-prim . make-serious-condition) (Z2c09 core-prim . make-non-continuable-violation) (Z2c08 core-prim . make-message-condition) (Z2c07 core-prim . make-lexical-violation) (Z2c06 core-prim . make-irritants-condition) (Z2c05 core-prim . make-implementation-restriction-violation) (Z2c04 core-prim . make-error) (Z2c03 core-prim . make-assertion-violation) (Z2c02 core-prim . lexical-violation?) (Z2c01 core-prim . irritants-condition?) (Z2c00 core-prim . implementation-restriction-violation?) (Z2bff core-prim . error?) (Z2bfe core-prim . condition-who) (Z2bfd core-prim . condition-predicate) (Z2bfc core-prim . condition-message) (Z2bfb core-prim . condition-irritants) (Z2bfa core-prim . condition-accessor) (Z2bf9 core-prim . condition) (Z2bf8 core-prim . assertion-violation?) (Z2bf7 core-prim . condition?) (Z2bf6 core-prim . utf32->string) (Z2bf5 core-prim . utf16->string) (Z2bf4 core-prim . utf8->string) (Z2bf3 core-prim . uint-list->bytevector) (Z2bf2 core-prim . u8-list->bytevector) (Z2bf1 core-prim . string->utf8) (Z2bf0 core-prim . string->utf32) (Z2bef core-prim . string->utf16) (Z2bee core-prim . sint-list->bytevector) (Z2bed core-prim . native-endianness) (Z2bec core-prim . bytevector?) (Z2beb core-prim . bytevector=?) (Z2bea core-prim . bytevector-uint-set!) (Z2be9 core-prim . bytevector-uint-ref) (Z2be8 core-prim . bytevector-u8-set!) (Z2be7 core-prim . bytevector-u8-ref) (Z2be6 core-prim . bytevector-u64-set!) (Z2be5 core-prim . bytevector-u64-ref) (Z2be4 core-prim . bytevector-u64-native-set!) (Z2be3 core-prim . bytevector-u64-native-ref) (Z2be2 core-prim . bytevector-u32-set!) (Z2be1 core-prim . bytevector-u32-ref) (Z2be0 core-prim . bytevector-u32-native-set!) (Z2bdf core-prim . bytevector-u32-native-ref) (Z2bde core-prim . bytevector-u16-set!) (Z2bdd core-prim . bytevector-u16-ref) (Z2bdc core-prim . bytevector-u16-native-set!) (Z2bdb core-prim . bytevector-u16-native-ref) (Z2bda core-prim . bytevector-sint-set!) (Z2bd9 core-prim . bytevector-sint-ref) (Z2bd8 core-prim . bytevector-s8-set!) (Z2bd7 core-prim . bytevector-s8-ref) (Z2bd6 core-prim . bytevector-s64-set!) (Z2bd5 core-prim . bytevector-s64-ref) (Z2bd4 core-prim . bytevector-s64-native-set!) (Z2bd3 core-prim . bytevector-s64-native-ref) (Z2bd2 core-prim . bytevector-s32-set!) (Z2bd1 core-prim . bytevector-s32-ref) (Z2bd0 core-prim . bytevector-s32-native-set!) (Z2bcf core-prim . bytevector-s32-native-ref) (Z2bce core-prim . bytevector-s16-set!) (Z2bcd core-prim . bytevector-s16-ref) (Z2bcc core-prim . bytevector-s16-native-set!) (Z2bcb core-prim . bytevector-s16-native-ref) (Z2bca core-prim . bytevector-length) (Z2bc9 core-prim . bytevector-ieee-single-ref) (Z2bc8 core-prim . bytevector-ieee-single-set!) (Z2bc7 core-prim . bytevector-ieee-single-native-set!) (Z2bc6 core-prim . bytevector-ieee-single-native-ref) (Z2bc5 core-prim . bytevector-ieee-double-set!) (Z2bc4 core-prim . bytevector-ieee-double-ref) (Z2bc3 core-prim . bytevector-ieee-double-native-set!) (Z2bc2 core-prim . bytevector-ieee-double-native-ref) (Z2bc1 core-prim . bytevector-fill!) (Z2bc0 core-prim . bytevector-copy!) (Z2bbf core-prim . bytevector-copy) (Z2bbe core-prim . bytevector->uint-list) (Z2bbd core-prim . bytevector->u8-list) (Z2bbc core-prim . bytevector->sint-list) (Z2bbb core-prim . no-nans-violation?) (Z2bba core-prim . no-infinities-violation?) (Z2bb9 core-prim . make-no-nans-violation) (Z2bb8 core-prim . make-no-infinities-violation) (Z2bb7 core-prim . real->flonum) (Z2bb6 core-prim . flzero?) (Z2bb5 core-prim . fltruncate) (Z2bb4 core-prim . fltan) (Z2bb3 core-prim . flsqrt) (Z2bb2 core-prim . flsin) (Z2bb1 core-prim . flround) (Z2bb0 core-prim . flpositive?) (Z2baf core-prim . flonum?) (Z2bae core-prim . flodd?) (Z2bad core-prim . flnumerator) (Z2bac core-prim . flnegative?) (Z2bab core-prim . flnan?) (Z2baa core-prim . flmod0) (Z2ba9 core-prim . flmod) (Z2ba8 core-prim . flmin) (Z2ba7 core-prim . flmax) (Z2ba6 core-prim . fllog) (Z2ba5 core-prim . flinteger?) (Z2ba4 core-prim . flinfinite?) (Z2ba3 core-prim . flfloor) (Z2ba2 core-prim . flfinite?) (Z2ba1 core-prim . flexpt) (Z2ba0 core-prim . flexp) (Z2b9f core-prim . fleven?) (Z2b9e core-prim . fldiv0-and-mod0) (Z2b9d core-prim . fldiv0) (Z2b9c core-prim . fldiv-and-mod) (Z2b9b core-prim . fldiv) (Z2b9a core-prim . fldenominator) (Z2b99 core-prim . flcos) (Z2b98 core-prim . flceiling) (Z2b97 core-prim . flatan) (Z2b96 core-prim . flasin) (Z2b95 core-prim . flacos) (Z2b94 core-prim . flabs) (Z2b93 core-prim . fl>?) (Z2b92 core-prim . fl>=?) (Z2b91 core-prim . fl=?) (Z2b90 core-prim . fl<?) (Z2b8f core-prim . fl<=?) (Z2b8e core-prim . fl/) (Z2b8d core-prim . fl-) (Z2b8c core-prim . fl+) (Z2b8b core-prim . fl*) (Z2b8a core-prim . fixnum->flonum) (Z2b89 core-prim . fxzero?) (Z2b88 core-prim . fxxor) (Z2b87 core-prim . fxrotate-bit-field) (Z2b86 core-prim . fxreverse-bit-field) (Z2b85 core-prim . fxpositive?) (Z2b84 core-prim . fxodd?) (Z2b83 core-prim . fxnot) (Z2b82 core-prim . fxnegative?) (Z2b81 core-prim . fxmod0) (Z2b80 core-prim . fxmod) (Z2b7f core-prim . fxmin) (Z2b7e core-prim . fxmax) (Z2b7d core-prim . fxlength) (Z2b7c core-prim . fxior) (Z2b7b core-prim . fxif) (Z2b7a core-prim . fxfirst-bit-set) (Z2b79 core-prim . fxeven?) (Z2b78 core-prim . fxdiv0-and-mod0) (Z2b77 core-prim . fxdiv0) (Z2b76 core-prim . fxdiv-and-mod) (Z2b75 core-prim . fxdiv) (Z2b74 core-prim . fxcopy-bit-field) (Z2b73 core-prim . fxcopy-bit) (Z2b72 core-prim . fxbit-set?) (Z2b71 core-prim . fxbit-field) (Z2b70 core-prim . fxbit-count) (Z2b6f core-prim . fxarithmetic-shift-right) (Z2b6e core-prim . fxarithmetic-shift-left) (Z2b6d core-prim . fxarithmetic-shift) (Z2b6c core-prim . fxand) (Z2b6b core-prim . fx>?) (Z2b6a core-prim . fx>=?) (Z2b69 core-prim . fx=?) (Z2b68 core-prim . fx<?) (Z2b67 core-prim . fx<=?) (Z2b66 core-prim . fx-/carry) (Z2b65 core-prim . fx-) (Z2b64 core-prim . fx+/carry) (Z2b63 core-prim . fx+) (Z2b62 core-prim . fx*/carry) (Z2b61 core-prim . fx*) (Z2b60 core-prim . greatest-fixnum) (Z2b5f core-prim . least-fixnum) (Z2b5e core-prim . fixnum-width) (Z2b5d core-prim . fixnum?) (Z2b5c core-prim . bitwise-rotate-bit-field) (Z2b5b core-prim . bitwise-reverse-bit-field) (Z2b5a core-prim . bitwise-length) (Z2b59 core-prim . bitwise-if) (Z2b58 core-prim . bitwise-first-bit-set) (Z2b57 core-prim . bitwise-copy-bit-field) (Z2b56 core-prim . bitwise-copy-bit) (Z2b55 core-prim . bitwise-bit-set?) (Z2b54 core-prim . bitwise-bit-field) (Z2b53 core-prim . bitwise-bit-count) (Z2b52 core-prim . bitwise-xor) (Z2b51 core-prim . bitwise-ior) (Z2b50 core-prim . bitwise-and) (Z2b4f core-prim . bitwise-not) (Z2b4e core-prim . bitwise-arithmetic-shift-right) (Z2b4d core-prim . bitwise-arithmetic-shift-left) (Z2b4c core-prim . bitwise-arithmetic-shift) (Z2b4b core-prim . zero?) (Z2b4a core-prim . vector?) (Z2b49 core-prim . vector-set!) (Z2b48 core-prim . vector-ref) (Z2b47 core-prim . vector-map) (Z2b46 core-prim . vector-length) (Z2b45 core-prim . vector-for-each) (Z2b44 core-prim . vector-fill!) (Z2b43 core-prim . vector->list) (Z2b42 core-prim . vector) (Z2b41 core-prim . values) (Z2b40 core-prim . truncate) (Z2b3f core-prim . tan) (Z2b3e core-prim . symbol?) (Z2b3d core-prim . symbol=?) (Z2b3c core-prim . symbol->string) (Z2b3b core-prim . substring) (Z2b3a core-prim . string?) (Z2b39 core-prim . string>?) (Z2b38 core-prim . string>=?) (Z2b37 core-prim . string=?) (Z2b36 core-prim . string<?) (Z2b35 core-prim . string<=?) (Z2b34 core-prim . string-ref) (Z2b33 core-prim . string-length) (Z2b32 core-prim . string-for-each) (Z2b31 core-prim . string-copy) (Z2b30 core-prim . string-append) (Z2b2f core-prim . string->symbol) (Z2b2e core-prim . string->number) (Z2b2d core-prim . string->list) (Z2b2c core-prim . string) (Z2b2b core-prim . sqrt) (Z2b2a core-prim . sin) (Z2b29 core-prim . round) (Z2b28 core-prim . reverse) (Z2b27 core-prim . real?) (Z2b26 core-prim . real-valued?) (Z2b25 core-prim . real-part) (Z2b24 core-prim . rationalize) (Z2b23 core-prim . rational?) (Z2b22 core-prim . rational-valued?) (Z2b21 core-prim . procedure?) (Z2b20 core-prim . positive?) (Z2b1f core-prim . pair?) (Z2b1e core-prim . odd?) (Z2b1d core-prim . numerator) (Z2b1c core-prim . number?) (Z2b1b core-prim . number->string) (Z2b1a core-prim . null?) (Z2b19 core-prim . not) (Z2b18 core-prim . negative?) (Z2b17 core-prim . nan?) (Z2b16 core-prim . min) (Z2b15 core-prim . max) (Z2b14 core-prim . map) (Z2b13 core-prim . make-vector) (Z2b12 core-prim . make-string) (Z2b11 core-prim . make-rectangular) (Z2b10 core-prim . make-polar) (Z2b0f core-prim . magnitude) (Z2b0e core-prim . log) (Z2b0d core-prim . list?) (Z2b0c core-prim . list-tail) (Z2b0b core-prim . list-ref) (Z2b0a core-prim . list->vector) (Z2b09 core-prim . list->string) (Z2b08 core-prim . list) (Z2b07 core-prim . length) (Z2b06 core-prim . lcm) (Z2b05 core-prim . integer?) (Z2b04 core-prim . integer-valued?) (Z2b03 core-prim . integer->char) (Z2b02 core-prim . infinite?) (Z2b01 core-prim . inexact?) (Z2b00 core-prim . inexact) (Z2aff core-prim . imag-part) (Z2afe core-prim . gcd) (Z2afd core-prim . for-each) (Z2afc core-prim . floor) (Z2afb core-prim . finite?) (Z2afa core-prim . expt) (Z2af9 core-prim . exp) (Z2af8 core-prim . exact?) (Z2af7 core-prim . exact-integer-sqrt) (Z2af6 core-prim . exact) (Z2af5 core-prim . even?) (Z2af4 core-prim . error) (Z2af3 core-prim . eqv?) (Z2af2 core-prim . equal?) (Z2af1 core-prim . eq?) (Z2af0 core-prim . dynamic-wind) (Z2aef core-prim . div0-and-mod0) (Z2aee core-prim . mod0) (Z2aed core-prim . div0) (Z2aec core-prim . div-and-mod) (Z2aeb core-prim . mod) (Z2aea core-prim . div) (Z2ae9 core-prim . denominator) (Z2ae8 core-prim . cos) (Z2ae7 core-prim . cons) (Z2ae6 core-prim . complex?) (Z2ae5 core-prim . char?) (Z2ae4 core-prim . char>?) (Z2ae3 core-prim . char>=?) (Z2ae2 core-prim . char=?) (Z2ae1 core-prim . char<?) (Z2ae0 core-prim . char<=?) (Z2adf core-prim . char->integer) (Z2ade core-prim . ceiling) (Z2add core-prim . call-with-values) (Z2adc core-prim . call/cc) (Z2adb core-prim . call-with-current-continuation) (Z2ada core-prim . cddddr) (Z2ad9 core-prim . cdddar) (Z2ad8 core-prim . cddadr) (Z2ad7 core-prim . cddaar) (Z2ad6 core-prim . cdaddr) (Z2ad5 core-prim . cdadar) (Z2ad4 core-prim . cdaadr) (Z2ad3 core-prim . cdaaar) (Z2ad2 core-prim . cadddr) (Z2ad1 core-prim . caddar) (Z2ad0 core-prim . cadadr) (Z2acf core-prim . cadaar) (Z2ace core-prim . caaddr) (Z2acd core-prim . caadar) (Z2acc core-prim . caaadr) (Z2acb core-prim . caaaar) (Z2aca core-prim . cdddr) (Z2ac9 core-prim . cddar) (Z2ac8 core-prim . cdadr) (Z2ac7 core-prim . cdaar) (Z2ac6 core-prim . caddr) (Z2ac5 core-prim . cadar) (Z2ac4 core-prim . caadr) (Z2ac3 core-prim . caaar) (Z2ac2 core-prim . cddr) (Z2ac1 core-prim . cdar) (Z2ac0 core-prim . cadr) (Z2abf core-prim . caar) (Z2abe core-prim . cdr) (Z2abd core-prim . car) (Z2abc core-prim . boolean?) (Z2abb core-prim . boolean=?) (Z2aba core-prim . atan) (Z2ab9 core-prim . assertion-violation) (Ze52 core-prim . assertion-error) (Z2ab8 core-prim . asin) (Z2ab7 core-prim . apply) (Z2ab6 core-prim . append) (Z2ab5 core-prim . angle) (Z2ab4 core-prim . acos) (Z2ab3 core-prim . abs) (Z2ab2 core-prim . /) (Z2ab1 core-prim . *) (Z2ab0 core-prim . -) (Z2aaf core-prim . +) (Z2aae core-prim . >=) (Z2aad core-prim . >) (Z2aac core-prim . =) (Z2aab core-prim . <=) (Z2aaa core-prim . <) (Z2aa9 core-prim . library) (Z2aa8 $core-rtd &no-nans-rtd &no-nans-rcd) (Z2aa7 $core-rtd &no-infinities-rtd &no-infinities-rcd) (Z2aa6 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (Z2aa5 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (Z2aa4 $core-rtd &i/o-port-rtd &i/o-port-rcd) (Z2aa3 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (Z2aa2 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (Z2aa1 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (Z2aa0 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (Z2a9f $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (Z2a9e $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (Z2a9d $core-rtd &i/o-write-rtd &i/o-write-rcd) (Z2a9c $core-rtd &i/o-read-rtd &i/o-read-rcd) (Z2a9b $core-rtd &i/o-rtd &i/o-rcd) (Z2a9a $core-rtd &undefined-rtd &undefined-rcd) (Z2a99 $core-rtd &syntax-rtd &syntax-rcd) (Z2a98 $core-rtd &lexical-rtd &lexical-rcd) (Z2a97 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (Z2a96 $core-rtd &non-continuable-rtd &non-continuable-rcd) (Z2a95 $core-rtd &who-rtd &who-rcd) (Z2a94 $core-rtd &irritants-rtd &irritants-rcd) (Z2a93 $core-rtd &assertion-rtd &assertion-rcd) (Z2a92 $core-rtd &violation-rtd &violation-rcd) (Z2a91 $core-rtd &error-rtd &error-rcd) (Z2a90 $core-rtd &serious-rtd &serious-rcd) (Z2a8f $core-rtd &warning-rtd &warning-rcd) (Z2a8e $core-rtd &message-rtd &message-rcd) (Z2a8d $core-rtd &condition-rtd &condition-rcd) (Z2a8c macro . define-condition-type) (Z2a8b macro . define-enumeration) (Z2a8a macro . define-record-type) (Z2a89 macro . parent-rtd) (Z2a88 macro . nongenerative) (Z2a87 macro . opaque) (Z2a86 macro . sealed) (Z2a85 macro . protocol) (Z2a84 macro . parent) (Z2a83 macro . immutable) (Z2a82 macro . mutable) (Z2a81 macro . fields) (Z2a80 macro . error-handling-mode) (Z2a7f macro . file-options) (Z2a7e macro . buffer-mode) (Z2a7d macro . eol-style) (Z2a7c macro . guard) (Z2a7b macro . trace-define) (Z2a7a macro . trace-lambda) (Z2a79 macro . unsyntax-splicing) (Z2a78 macro . unsyntax) (Z2a77 macro . unquote-splicing) (Z2a76 macro . unquote) (Z2a75 macro . _) (Z2a74 macro . else) (Z2a73 macro . =>) (Z2a72 macro . ...) (Z2a71 macro . assert) (Z2a70 macro . endianness) (Z2a6f macro . delay) (Z2a6e macro . time) (Z2a6d macro . do) (Z2a6c macro . cond) (Z2a6b macro . let*) (Z2a6a macro . let*-values) (Z2a69 macro . let-values) (Z2a68 macro . identifier-syntax) (Z2a67 macro . with-syntax) (Z2a66 macro . quasisyntax) (Z2a65 macro . quasiquote) (Z2a64 macro . syntax-rules) (Z2a63 macro . include) (Z2a62 macro . define-struct) (Z2a61 core-macro . record-constructor-descriptor) (Z2a60 core-macro . record-type-descriptor) (Z2a5f macro . case) (Z2a5e macro . parameterize) (Z2a5d macro . unless) (Z2a5c macro . when) (Z2a5b core-macro . or) (Z2a5a core-macro . and) (Z2a59 core-macro . if) (Z2a58 core-macro . let) (Z2a57 core-macro . letrec*) (Z2a56 core-macro . letrec) (Z2a55 core-macro . type-descriptor) (Z2a54 core-macro . case-lambda) (Z2a53 core-macro . lambda) (Z2a52 core-macro . syntax) (Z2a51 core-macro . syntax-case) (Z2a50 core-macro . quote) (Z2a4f core-macro . foreign-call) (Z2a4e letrec-syntax) (Z2a4d let-syntax) (Z2a4c set!) (Z2a4b import) (Z2a4a begin) (Z2a49 module) (Z2a48 define-syntax) (Z2a47 define)) values values '#f '#f '#f '#f) (Z98c@Z7d8@install-library 'Z2e08 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . Z2daf) (eval-core . Z2dae) (set-symbol-value! . Z2dad) (symbol-value . Z2dac) (gensym . Z2dab) (void . Z2daa)) '() values values '#f '#f '#f '#f) (Z98c@Z7d8@install-library 'Z2e09 '(mosh) '() '() '() '() '((set-symbol-value! . Z2dad) (symbol-value . Z2dac) (regexp? . Z2da8) (read-line . Z2da7) (ungensym . Z2da5) (alist->eq-hash-table . Z2da4) (assoc-ref . Z2da3) (print . Z2da2) (format . Z2da1) (host-os . Z2da0) (library-path . Z7b7) (standard-library-path . Z2d9f) (file-newer? . Z2d9d) (stat-mtime . Z2d9c) (digit->integer . Z2d98) (call-with-string-input-port . Z2d97) (call-with-string-io . Z2d96) (string-split . Z2d95) (bytevector-for-each . Z2d94) (string->regexp . Z2d93) (rxmatch . Z2d92) (regexp-replace-all . Z2d91) (hashtable-for-each . Z2d90) (set-current-directory! . Z2d8b) (expand-path . Z2d8a) (current-directory . Z2d89) (p . Z2d4a) (get-timeofday . Z2d31) (get-command-line . Z2d30) (sys-display . Z2d2f) (whereis . Z2d2e) (register . Z2d2d) (vm-join! . Z2d2c) (vm-set-value! . Z2d2b) (vm? . Z2d2a) (main-vm? . Z2d29) (vm-eval . Z2d28) (vm-self . Z2d27) (vm-start! . Z2d26) (make-vm . Z2d25) (mutex-try-lock! . Z2d24) (mutex-unlock! . Z2d23) (mutex-lock! . Z2d22) (mutex? . Z2d21) (make-mutex . Z2d20) (condition-variable-notify-all! . Z2d1f) (condition-variable-notify! . Z2d1e) (condition-variable-wait! . Z2d1d) (make-condition-variable . Z2d1c) (write/ss . Z2d1b) (mosh-executable-path . Z2d1a) (make-file-options . Z2d19) (source-info . Z2d18) (make-compiler-instruction . Z2d17) (make-instruction . Z2d16) (set-source-info! . Z2d15) (bignum? . Z2d14) (fast-equal? . Z2d13) (fasl-read . Z2d12) (fasl-write . Z2d11) (time-usage . Z2d10) (os-constant . Z2d0f) (time . Z2a6e) (include . Z2a63)) '() values values '#f '#f '#f '#f) (Z98c@Z7d8@install-library 'Z2e0a '(system) '() '() '() '() '((gensym-prefix-set! . Z2da6) (%monapi-message-send . Z2d9e) (write-to-file . Z2d9b) (file->list . Z2d9a) (file->string . Z2d99) (mosh-cache-dir . Z5a1) (call-process . Z2d8f) (local-tz-offset . Z2d8e) (microseconds . Z2d8d) (directory-list . Z2d8c) (expand-path . Z2d8a) (%spawn . Z2d88) (%waitpid . Z2d87) (simple-struct-name . Z2d86) (simple-struct-set! . Z2d85) (simple-struct-ref . Z2d84) (make-simple-struct . Z2d83) (simple-struct? . Z2d82) (pointer-ref-c-int64 . Z2d81) (pointer-ref-c-int32 . Z2d80) (pointer-ref-c-int16 . Z2d7f) (pointer-ref-c-int8 . Z2d7e) (pointer-ref-c-uint64 . Z2d7d) (pointer-ref-c-uint32 . Z2d7c) (pointer-ref-c-uint16 . Z2d7b) (pointer-ref-c-uint8 . Z2d7a) (pointer-set-c-uint64! . Z2d79) (pointer-set-c-uint32! . Z2d78) (pointer-set-c-uint16! . Z2d77) (pointer-set-c-uint8! . Z2d76) (pointer-set-c-int64! . Z2d75) (pointer-set-c-int32! . Z2d74) (pointer-set-c-int16! . Z2d73) (pointer-set-c-int8! . Z2d72) (pointer-set-c-pointer! . Z2d71) (pointer-set-c-double! . Z2d70) (pointer-set-c-float! . Z2d6f) (pointer-set-c-long-long! . Z2d6e) (pointer-set-c-long! . Z2d6d) (pointer-set-c-int! . Z2d6c) (pointer-set-c-short! . Z2d6b) (pointer-set-c-char! . Z2d6a) (pointer-ref-c-pointer . Z2d69) (pointer-ref-c-double . Z2d68) (pointer-ref-c-float . Z2d67) (pointer-ref-c-unsigned-long-long . Z2d66) (pointer-ref-c-signed-long-long . Z2d65) (pointer-ref-c-unsigned-long . Z2d64) (pointer-ref-c-signed-long . Z2d63) (pointer-ref-c-unsigned-int . Z2d62) (pointer-ref-c-signed-int . Z2d61) (pointer-ref-c-unsigned-short . Z2d60) (pointer-ref-c-signed-short . Z2d5f) (pointer-ref-c-unsigned-char . Z2d5e) (pointer-ref-c-signed-char . Z2d5d) (pointer->integer . Z2d5c) (integer->pointer . Z2d5b) (pointer? . Z2d5a) (shared-errno . Z2d59) (%ffi-free-c-callback-trampoline . Z2d58) (%ffi-make-c-callback-trampoline . Z2d57) (%ffi-free . Z2d56) (%ffi-malloc . Z2d55) (%ffi-supported? . Z2d54) (%ffi-pointer->string . Z2d53) (%ffi-call . Z2d52) (%ffi-lookup . Z2d51) (%ffi-open . Z2d50) (null-terminated-utf8->string . Z2d4f) (null-terminated-bytevector->string . Z2d4e) (%exec . Z2d4d) (%fork . Z2d4c) (%pipe . Z2d4b) (open-output-string . Z2d49) (get-output-string . Z2d48) (file-stat-ctime . Z2d47) (file-stat-atime . Z2d46) (file-stat-mtime . Z2d45) (file-size-in-bytes . Z2d44) (file-writable? . Z2d43) (file-executable? . Z2d42) (file-readable? . Z2d41) (file-regular? . Z2d40) (file-symbolic-link? . Z2d3f) (file-directory? . Z2d3e) (create-symbolic-link . Z2d3d) (rename-file . Z2d3c) (delete-directory . Z2d3b) (create-directory . Z2d3a) (create-mosh-cache-dir . Z2d39) (get-environment-variables . Z2d38) (current-exception-handler . Z2d37) (get-environment-variable . Z2d36) (join-wraps . Z2d35) (id->real-label . Z2d34) (same-marks? . Z2d33) (same-marks*? . Z2d32) (disasm . Z2d0e) (make-parameter . Z59f) (socket-port . Z2d0d) (socket-shutdown . Z2d0c) (socket-close . Z2d0b) (socket-send . Z2d0a) (socket-recv! . Z2d09) (socket-recv . Z2d08) (make-server-socket . Z2d07) (make-client-socket . Z2d06) (socket-accept . Z2d05) (socket? . Z2d04) (parameterize . Z2a5e)) '() values values '#f '#f '#f '#f)))
(begin (set! Z28c6@ref (unspecified)) (set! Z28c8@x* (unspecified)) (set! Z28ca@add-library-path! (unspecified)) (set! Z28cc@parse-and-add-library-path (unspecified)) (set! Z28ce@for-each-with-index (unspecified)) (set! Z28d0@rpad (unspecified)) (set! Z28d2@condition-printer (unspecified)) (set! Z28d4@record->field-alist (unspecified)) (set! Z28d6@map-with-index (unspecified)) (set! Z28d8@repl (unspecified)) (set! Z28da@trace-printer (unspecified)) (set! Z28dc@command-line (unspecified)) (set! Z28de@local-library-path (unspecified)) (set! Z28e0@load/args (unspecified)) (set! Z28e2@load (unspecified)) (set! Z28e4@ironscheme-build (unspecified)) (set! Z28e6@eval-top-level (unspecified)) (set! Z28e8@compile-system-libraries (unspecified)) (set! Z28ea@compile (unspecified)) (set! Z28ec@compile->closure (unspecified)) (set! Z28ee@pre-compile-r6rs-file (unspecified)) (set! Z28f0@load-r6rs-top-level (unspecified)) (set! Z28f2@load-r6rs-top-level-sexp (unspecified)) (set! Z28f4@prefix-inc (unspecified)) (set! Z28f6@prefix-inc! (unspecified)) (set! Z28c6@ref (lambda (Z2931@rtd Z2932@i Z2933@x) (let ((Z2937@val ((record-accessor Z2931@rtd Z2932@i) Z2933@x))) (if (symbol? Z2937@val) (ungensym Z2937@val) Z2937@val)))) (set! Z2a2d@Z28c6@ref Z28c6@ref) (set! Z28c8@x* '()) (set! Z2a2e@Z28c8@x* Z28c8@x*) (set! Z28ca@add-library-path! (lambda (Z2939@path) (Z97c@Z7b8@library-path (append (Z97c@Z7b8@library-path) (list Z2939@path))))) (set! Z2a2f@Z28ca@add-library-path! Z28ca@add-library-path!) (set! Z28cc@parse-and-add-library-path (lambda (Z293b@paths Z293c@message) (letrec* ((Z2940@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((Z2941@t Z293b@paths)) (if Z2941@t ((lambda (Z2943@paths) (for-each (lambda (Z2945@path) (if (file-exists? Z2945@path) (Z28ca@add-library-path! (expand-path Z2945@path)) (format (current-error-port) Z293c@message Z2945@path))) (string-split Z2943@paths Z2940@separator))) Z2941@t) (void)))))) (set! Z2a30@Z28cc@parse-and-add-library-path Z28cc@parse-and-add-library-path) (set! Z28ce@for-each-with-index (lambda (Z2947@proc Z2948@lst) (letrec ((Z294b@loop (lambda (Z294d@i Z294e@lst) (if (null? Z294e@lst) (if '#f '#f (void)) (begin (Z2947@proc Z294d@i (car Z294e@lst)) (Z294b@loop (+ Z294d@i '1) (cdr Z294e@lst))))))) (Z294b@loop '1 Z2948@lst)))) (set! Z2a31@Z28ce@for-each-with-index Z28ce@for-each-with-index) (set! Z28d0@rpad (lambda (Z2951@str Z2952@pad Z2953@n) (let ((Z2957@rest (- Z2953@n (string-length (format '"~a" Z2951@str))))) (let Z295d@loop ((Z2959@rest Z2957@rest) (Z295a@ret (format '"~a" Z2951@str))) (if (<= Z2959@rest '0) Z295a@ret (Z295d@loop (- Z2959@rest '1) (string-append Z295a@ret Z2952@pad))))))) (set! Z2a32@Z28d0@rpad Z28d0@rpad) (set! Z28d2@condition-printer (lambda (Z295f@e Z2960@port) (letrec* ((Z2964@max-condition-len (apply max (map (lambda (Z2975@c) (string-length (symbol->string (record-type-name (record-rtd Z2975@c))))) (simple-conditions Z295f@e))))) (begin (display '" Condition components:\n" Z2960@port) (Z28ce@for-each-with-index (lambda (Z2965@i Z2966@x) (let ((Z2969@rtd (record-rtd Z2966@x)) (Z296a@fields-alist (Z28d4@record->field-alist Z2966@x))) (begin (format Z2960@port '" ~d. ~a" Z2965@i (Z28d0@rpad (symbol->string (record-type-name Z2969@rtd)) '" " Z2964@max-condition-len)) (if (null? Z296a@fields-alist) (newline Z2960@port) (void)) (let Z2971@loop ((Z296d@first '#t) (Z296e@fields-alist Z296a@fields-alist)) (if (null? Z296e@fields-alist) '() (let ((Z2973@field (car Z296e@fields-alist))) (begin (if (not Z296d@first) (display (Z28d0@rpad '"" '" " (+ '4 Z2964@max-condition-len)) Z2960@port) (void)) (display '"       " Z2960@port) (display (car Z2973@field) Z2960@port) (display '": " Z2960@port) (write (cdr Z2973@field) Z2960@port) (newline Z2960@port) (Z2971@loop '#f (cdr Z296e@fields-alist))))))))) (simple-conditions Z295f@e)))))) (set! Z2a33@Z28d2@condition-printer Z28d2@condition-printer) (set! Z28d4@record->field-alist (lambda (Z2977@r) (letrec* ((Z297a@ref (lambda (Z2985@rtd Z2986@i Z2987@x) (let ((Z298b@val ((record-accessor Z2985@rtd Z2986@i) Z2987@x))) (if (symbol? Z298b@val) (ungensym Z298b@val) Z298b@val))))) (let Z297f@loop ((Z297b@ret '()) (Z297c@rtd (record-rtd Z2977@r))) (if Z297c@rtd (Z297f@loop (append Z297b@ret (Z28d6@map-with-index (lambda (Z2981@i Z2982@field) (cons Z2982@field (Z297a@ref Z297c@rtd Z2981@i Z2977@r))) (vector->list (record-type-field-names Z297c@rtd)))) (record-type-parent Z297c@rtd)) Z297b@ret))))) (set! Z2a34@Z28d4@record->field-alist Z28d4@record->field-alist) (set! Z28d6@map-with-index (lambda (Z298d@proc Z298e@lst) (let Z2997@loop ((Z2991@i '0) (Z2992@lst Z298e@lst) (Z2993@ret '())) (if (null? Z2992@lst) (reverse Z2993@ret) (Z2997@loop (+ Z2991@i '1) (cdr Z2992@lst) (cons (Z298d@proc Z2991@i (car Z2992@lst)) Z2993@ret)))))) (set! Z2a35@Z28d6@map-with-index Z28d6@map-with-index) (set! Z28d8@repl (lambda Z2999@x (letrec* ((Z299c@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (Z299f@Z299d) (lambda () (with-exception-handler (lambda (Z29a1@e) ((call/cc (lambda (Z29a3@Z299e) (Z299f@Z299d (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? Z29a1@e) (Z28d2@condition-printer Z29a1@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" Z29a1@e))) (Z29a3@Z299e (lambda () (raise-continuable Z29a1@e)))))))))) (lambda () (let Z29a9@loop ((Z29a5@line (get-line (current-input-port))) (Z29a6@accum '"")) (letrec* ((Z29ac@parentheses-ok? (lambda (Z29b7@text) (let Z29bf@loop ((Z29b9@chars (string->list Z29b7@text)) (Z29ba@p0 '0) (Z29bb@p1 '0)) (if (null? Z29b9@chars) (= '0 Z29ba@p0 Z29bb@p1) (let ((Z29c1@t (car Z29b9@chars))) (if (memv Z29c1@t '(#\()) (Z29bf@loop (cdr Z29b9@chars) (+ Z29ba@p0 '1) Z29bb@p1) (if (memv Z29c1@t '(#\))) (Z29bf@loop (cdr Z29b9@chars) (- Z29ba@p0 '1) Z29bb@p1) (if (memv Z29c1@t '(#\[)) (Z29bf@loop (cdr Z29b9@chars) Z29ba@p0 (+ Z29bb@p1 '1)) (if (memv Z29c1@t '(#\])) (Z29bf@loop (cdr Z29b9@chars) Z29ba@p0 (- Z29bb@p1 '1)) (Z29bf@loop (cdr Z29b9@chars) Z29ba@p0 Z29bb@p1)))))))))) (Z29ae@eval-string-print (lambda (Z29b1@text) (if (not (or (string=? '"\n" Z29b1@text) (= '0 (string-length Z29b1@text)))) (call-with-values (lambda () (Z28e6@eval-top-level (call-with-port (open-string-input-port Z29b1@text) read))) (lambda Z29b3@out* (for-each (lambda (Z29b5@out) (begin (write Z29b5@out) (newline))) Z29b3@out*))) (void))))) (if (eof-object? Z29a5@line) (begin (Z29ae@eval-string-print Z29a6@accum) (exit)) (let ((Z29af@current (string-append Z29a6@accum Z29a5@line))) (if (Z29ac@parentheses-ok? Z29af@current) (Z29ae@eval-string-print Z29af@current) (Z29a9@loop (get-line (current-input-port)) Z29af@current)))))))))))) (newline) (Z299c@rec))))) (Z299c@rec)))) (set! Z2a36@Z28d8@repl Z28d8@repl) (set! Z28da@trace-printer (Z6c2@Z5a0@make-parameter write)) (set! Z2a37@Z28da@trace-printer Z28da@trace-printer) (set! Z28dc@command-line (Z6c2@Z5a0@make-parameter (get-command-line))) (set! Z2a38@Z28dc@command-line Z28dc@command-line) (set! Z28de@local-library-path (lambda (Z29c3@filename) (Z97c@Z7b8@library-path))) (set! Z2a39@Z28de@local-library-path Z28de@local-library-path) (set! Z28e0@load/args (lambda (Z29c5@filename . Z29c7@args) (begin (apply Z28f0@load-r6rs-top-level Z29c5@filename 'load Z29c7@args) (void)))) (set! Z2a3a@Z28e0@load/args Z28e0@load/args) (set! Z28e2@load (lambda (Z29c9@filename) (begin (apply Z28f0@load-r6rs-top-level Z29c9@filename 'load (Z28dc@command-line)) (void)))) (set! Z2a3b@Z28e2@load Z28e2@load) (set! Z28e4@ironscheme-build (lambda () (Z28e2@load '"ironscheme-buildscript.ss"))) (set! Z2a3c@Z28e4@ironscheme-build Z28e4@ironscheme-build) (set! Z28e6@eval-top-level (lambda (Z29cb@x) (Z28a3@Ze39@eval Z29cb@x (Z28ba@Ze67@interaction-environment)))) (set! Z2a3d@Z28e6@eval-top-level Z28e6@eval-top-level) (set! Z28e8@compile-system-libraries (lambda () (Z28e6@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! Z2a3e@Z28e8@compile-system-libraries Z28e8@compile-system-libraries) (set! Z28ea@compile (lambda (Z29cd@filename) (Z28f0@load-r6rs-top-level Z29cd@filename 'compile))) (set! Z2a3f@Z28ea@compile Z28ea@compile) (set! Z28ec@compile->closure (lambda (Z29cf@filename) (Z28f0@load-r6rs-top-level Z29cf@filename 'closure))) (set! Z2a40@Z28ec@compile->closure Z28ec@compile->closure) (set! Z28ee@pre-compile-r6rs-file (lambda (Z29d1@filename) (Z28f0@load-r6rs-top-level Z29d1@filename 'compile))) (set! Z2a41@Z28ee@pre-compile-r6rs-file Z28ee@pre-compile-r6rs-file) (set! Z28f0@load-r6rs-top-level (lambda (Z29d3@filename Z29d4@how . Z29d7@args) (begin (Z97c@Z7b8@library-path (Z28de@local-library-path Z29d3@filename)) (let ((Z29d9@x* (with-input-from-file Z29d3@filename (lambda () (let Z29db@f () (let ((Z29dd@x (Z6b4@Z584@read-annotated))) (if (eof-object? Z29dd@x) '() (cons Z29dd@x (Z29db@f))))))))) (let ((Z29df@t Z29d4@how)) (if (memv Z29df@t '(closure)) (Z28b9@Ze65@pre-compile-r6rs-top-level Z29d9@x*) (if (memv Z29df@t '(load)) (begin (Z28dc@command-line (cons Z29d3@filename (car Z29d7@args))) (Z6c3@Z5a2@mosh-cache-dir (create-mosh-cache-dir)) (if (Z6c3@Z5a2@mosh-cache-dir) (gensym-prefix-set! (Z28f6@prefix-inc! (string-append (Z6c3@Z5a2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (Z29e1@file) ((call/cc (lambda (Z29e5@Z29e3) (lambda () (with-exception-handler (lambda (Z29e7@c) ((call/cc (lambda (Z29e9@Z29e4) (Z29e5@Z29e3 (lambda () (if '#t '#t (Z29e9@Z29e4 (lambda () (raise-continuable Z29e7@c)))))))))) (lambda () (delete-file (string-append (Z6c3@Z5a2@mosh-cache-dir) '"/" Z29e1@file))))))))) (directory-list (Z6c3@Z5a2@mosh-cache-dir))) (void)) (let ((Z29eb@compiled (Z28b8@Ze63@compile-r6rs-top-level Z29d9@x*))) (begin (if (and (Z6c3@Z5a2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (Z980@Z7c0@serialize-all Z6bd@Z596@serialize-library Z719@Z6d2@compile-core-expr) (void)) (Z29eb@compiled)))) (if (memv Z29df@t '(compile)) (begin (Z28b8@Ze63@compile-r6rs-top-level Z29d9@x*) (Z980@Z7c0@serialize-all Z6bd@Z596@serialize-library Z719@Z6d2@compile-core-expr)) (if '#f '#f (void)))))))))) (set! Z2a42@Z28f0@load-r6rs-top-level Z28f0@load-r6rs-top-level) (set! Z28f2@load-r6rs-top-level-sexp (lambda (Z29ed@import-spec Z29ee@thunk) (let ((Z29f9@Z29f2 Z97c@Z7b8@library-path) (Z29fa@Z29f4 Z6c3@Z5a2@mosh-cache-dir) (Z29fb@Z29f6 (Z28de@local-library-path '"")) (Z29fc@Z29f8 (create-mosh-cache-dir))) (let ((Z2a01@swap (lambda () (begin (let ((Z2a03@t (Z29f9@Z29f2))) (begin (Z29f9@Z29f2 Z29fb@Z29f6) (set! Z29fb@Z29f6 Z2a03@t))) (let ((Z2a05@t (Z29fa@Z29f4))) (begin (Z29fa@Z29f4 Z29fc@Z29f8) (set! Z29fc@Z29f8 Z2a05@t))))))) (dynamic-wind Z2a01@swap (lambda () (begin (if (Z6c3@Z5a2@mosh-cache-dir) (gensym-prefix-set! (Z28f6@prefix-inc! (string-append (Z6c3@Z5a2@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((Z2a0b@Z2a08 Z28dc@command-line) (Z2a0c@Z2a0a '())) (let ((Z2a0f@swap (lambda () (let ((Z2a11@t (Z2a0b@Z2a08))) (begin (Z2a0b@Z2a08 Z2a0c@Z2a0a) (set! Z2a0c@Z2a0a Z2a11@t)))))) (dynamic-wind Z2a0f@swap (lambda () ((Z28b8@Ze63@compile-r6rs-top-level (list (cons 'import Z29ed@import-spec) (list Z29ee@thunk))))) Z2a0f@swap))))) Z2a01@swap))))) (set! Z2a43@Z28f2@load-r6rs-top-level-sexp Z28f2@load-r6rs-top-level-sexp) (set! Z28f4@prefix-inc (lambda (Z2a13@prefix-string) (let ((Z2a15@prefix (symbol->string Z2a13@prefix-string))) (let ((Z2a17@len (string-length Z2a15@prefix))) (let Z2a1f@loop ((Z2a19@i (- Z2a17@len '1)) (Z2a1a@carry? '#t) (Z2a1b@accum '())) (if (< Z2a19@i '0) (string->symbol (list->string (if Z2a1a@carry? (cons '#\a Z2a1b@accum) Z2a1b@accum))) (if Z2a1a@carry? (let ((Z2a21@next-integer (+ '1 (char->integer (string-ref Z2a15@prefix Z2a19@i))))) (if (= Z2a21@next-integer '123) (Z2a1f@loop (- Z2a19@i '1) '#f (cons '#\A Z2a1b@accum)) (if (= Z2a21@next-integer '91) (Z2a1f@loop (- Z2a19@i '1) '#t (cons '#\a Z2a1b@accum)) (Z2a1f@loop (- Z2a19@i '1) '#f (cons (integer->char Z2a21@next-integer) Z2a1b@accum))))) (Z2a1f@loop (- Z2a19@i '1) '#f (cons (string-ref Z2a15@prefix Z2a19@i) Z2a1b@accum))))))))) (set! Z2a44@Z28f4@prefix-inc Z28f4@prefix-inc) (set! Z28f6@prefix-inc! (lambda (Z2a23@file) (begin (if (not (file-exists? Z2a23@file)) (call-with-output-file Z2a23@file (lambda (Z2a25@port) (write 'd Z2a25@port))) (void)) (let ((Z2a27@prefix (call-with-input-file Z2a23@file read))) (if (main-vm?) (let ((Z2a29@next-prefix (Z28f4@prefix-inc Z2a27@prefix))) (begin (call-with-port (open-file-output-port Z2a23@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (Z2a2b@port) (write Z2a29@next-prefix Z2a2b@port))) Z2a27@prefix)) Z2a27@prefix))))) (set! Z2a45@Z28f6@prefix-inc! Z28f6@prefix-inc!) (begin (Z981@Z7c2@current-precompiled-library-loader Z6be@Z598@load-serialized-library) (set-symbol-value! 'load Z28e2@load) (set-symbol-value! 'pre-compile-r6rs-file Z28ee@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs Z28e6@eval-top-level) (set-symbol-value! 'int-env-syms Z289a@Ze27@interaction-environment-symbols) (set-symbol-value! 'expanded2core Z718@Z6d0@expanded->core) (set-symbol-value! 'trace-printer Z28da@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (Z28f7@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list Z28f7@c))))) (Z28cc@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (Z28cc@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (Z28ca@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (Z28ca@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (Z28ca@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((Z28f9@prefix (lambda (Z28fb@ext Z28fc@ls) (append (map (lambda (Z28ff@x) (string-append Z28fb@ext Z28ff@x)) Z28fc@ls) Z28fc@ls)))) (Z97d@Z7ba@library-extensions (Z28f9@prefix '".mosh" (Z97d@Z7ba@library-extensions)))) (current-exception-handler (lambda (Z2901@c) (begin (if (condition? Z2901@c) (Z28d2@condition-printer Z2901@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" Z2901@c)) Z2901@c))) (if ((call/cc (lambda (Z2905@Z2903) (lambda () (with-exception-handler (lambda (Z2907@c) ((call/cc (lambda (Z2909@Z2904) (Z2905@Z2903 (lambda () (if '#t '#f (Z2909@Z2904 (lambda () (raise-continuable Z2907@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (Z28f2@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (Z28dc@command-line)) (let ((Z2913@Z290c Z28dc@command-line) (Z2914@Z290e Z6c3@Z5a2@mosh-cache-dir) (Z2915@Z2910 '()) (Z2916@Z2912 (create-mosh-cache-dir))) (let ((Z291b@swap (lambda () (begin (let ((Z291d@t (Z2913@Z290c))) (begin (Z2913@Z290c Z2915@Z2910) (set! Z2915@Z2910 Z291d@t))) (let ((Z291f@t (Z2914@Z290e))) (begin (Z2914@Z290e Z2916@Z2912) (set! Z2916@Z2912 Z291f@t))))))) (dynamic-wind Z291b@swap (lambda () (begin (if (Z6c3@Z5a2@mosh-cache-dir) (gensym-prefix-set! (Z28f6@prefix-inc! (string-append (Z6c3@Z5a2@mosh-cache-dir) '"/prefix.txt"))) (void)) (Z28d8@repl))) Z291b@swap))) (begin (Z97c@Z7b8@library-path (Z28de@local-library-path (car (Z28dc@command-line)))) (set! Z28c8@x* (with-input-from-file (car (Z28dc@command-line)) (lambda () (let Z2921@f () (let ((Z2923@x (Z6b4@Z584@read-annotated))) (if (eof-object? Z2923@x) '() (cons Z2923@x (Z2921@f)))))))) (Z28dc@command-line (cons (car (Z28dc@command-line)) (cdr (Z28dc@command-line)))) (Z6c3@Z5a2@mosh-cache-dir (create-mosh-cache-dir)) (if (Z6c3@Z5a2@mosh-cache-dir) (gensym-prefix-set! (Z28f6@prefix-inc! (string-append (Z6c3@Z5a2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (Z2925@file) ((call/cc (lambda (Z2929@Z2927) (lambda () (with-exception-handler (lambda (Z292b@c) ((call/cc (lambda (Z292d@Z2928) (Z2929@Z2927 (lambda () (if '#t '#t (Z292d@Z2928 (lambda () (raise-continuable Z292b@c)))))))))) (lambda () (delete-file (string-append (Z6c3@Z5a2@mosh-cache-dir) '"/" Z2925@file))))))))) (directory-list (Z6c3@Z5a2@mosh-cache-dir))) (void)) (let ((Z292f@compiled (Z28b8@Ze63@compile-r6rs-top-level Z28c8@x*))) (begin (if (and (Z6c3@Z5a2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (Z980@Z7c0@serialize-all Z6bd@Z596@serialize-library Z719@Z6d2@compile-core-expr) (void)) (Z292f@compiled))))))))
