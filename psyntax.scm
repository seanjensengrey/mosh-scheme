;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! as28c5@library-file-path->cache-path (unspecified)) (set! as28c7@read-annotated (unspecified)) (set! as28c9@annotation-stripped (unspecified)) (set! as28cb@annotation? (unspecified)) (set! as28cd@annotation-source (unspecified)) (set! as28cf@annotation-expression (unspecified)) (set! as28d1@scm->fasl (unspecified)) (set! as28d3@fasl-save (unspecified)) (set! as28d5@fasl-load (unspecified)) (set! as28d7@verbose? (unspecified)) (set! as28d9@serialize-library (unspecified)) (set! as28db@load-serialized-library (unspecified)) (set! as28dd@make-record-printer (unspecified)) (set! as28df@compile-core (unspecified)) (set! as28e1@read-library-source-file (unspecified)) (set! as28e3@make-parameter (unspecified)) (set! as28e5@mosh-cache-dir (unspecified)) (set! as297b@file-options-spec (unspecified)) (set! as28c5@library-file-path->cache-path (lambda (as297c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (as2982@as297f as2983@as2981) (let ((as2986@extract as2983@as2981) (as2987@p as2982@as297f)) (letrec* ((as298b@display-hex (lambda (as2994@n) (if (<= '0 as2994@n '9) (display as2994@n as2987@p) (display (integer->char (+ (char->integer '#\a) (- as2994@n '10))) as2987@p))))) (begin (let as298e@f ((as298c@ls (string-split as297c@x '#\/))) (if (not (null? as298c@ls)) (begin (display '"_" as2987@p) (for-each (lambda (as2990@c) (if (or (char<=? '#\a as2990@c '#\z) (char<=? '#\A as2990@c '#\Z) (char<=? '#\0 as2990@c '#\9) (memv as2990@c '(#\- #\. #\_ #\~))) (display as2990@c as2987@p) (begin (display '"%" as2987@p) (let ((as2992@n (char->integer as2990@c))) (begin (as298b@display-hex (quotient as2992@n '16)) (as298b@display-hex (remainder as2992@n '16))))))) (string->list (car as298c@ls))) (as298e@f (cdr as298c@ls))) (void))) (as2986@extract)))))))) (set! as29f6@as28c5@library-file-path->cache-path as28c5@library-file-path->cache-path) (set! as28c7@read-annotated read) (set! as29f7@as28c7@read-annotated as28c7@read-annotated) (set! as28c9@annotation-stripped (lambda (as2996@x) (as28cf@annotation-expression as2996@x))) (set! as29f8@as28c9@annotation-stripped as28c9@annotation-stripped) (set! as28cb@annotation? (lambda (as2998@x) (source-info as2998@x))) (set! as29f9@as28cb@annotation? as28cb@annotation?) (set! as28cd@annotation-source (lambda (as299a@x) (source-info as299a@x))) (set! as29fa@as28cd@annotation-source as28cd@annotation-source) (set! as28cf@annotation-expression (lambda (as299c@x) (if (pair? as299c@x) (cons (car as299c@x) (cdr as299c@x)) (if (procedure? as299c@x) (set-source-info! as299c@x '#f) as299c@x)))) (set! as29fb@as28cf@annotation-expression as28cf@annotation-expression) (set! as28d1@scm->fasl (lambda (as299e@filename) (string-append (as28e5@mosh-cache-dir) '"/" (as28c5@library-file-path->cache-path as299e@filename) '".mosh-fasl"))) (set! as29fc@as28d1@scm->fasl as28d1@scm->fasl) (set! as28d3@fasl-save (lambda (as29a0@filename as29a1@obj) (call-with-port (open-file-output-port as29a0@filename) (lambda (as29a4@port) ((symbol-value 'fasl-write!) as29a1@obj as29a4@port))))) (set! as29fd@as28d3@fasl-save as28d3@fasl-save) (set! as28d5@fasl-load (lambda (as29a6@filename) (call-with-port (open-file-input-port as29a6@filename) (symbol-value 'fasl-read!)))) (set! as29fe@as28d5@fasl-load as28d5@fasl-load) (set! as28d7@verbose? (symbol-value '%verbose)) (set! as29ff@as28d7@verbose? as28d7@verbose?) (set! as28d9@serialize-library (lambda (as29a8@filename as29a9@obj) (begin (if as28d7@verbose? (format (current-error-port) '"serialize-library ~a\n..." as29a8@filename) (void)) (let ((as29ac@expanded2core (symbol-value 'expanded2core))) (let ((as29ae@compile (symbol-value 'compile-w/o-halt))) (let ((as29b0@code as29a9@obj)) (let ((as29b2@pivot (cddddr (cddddr as29b0@code)))) (let ((as29b4@visit (as29ae@compile (as29ac@expanded2core (car as29b2@pivot))))) (begin (set-car! as29b2@pivot as29b4@visit) (let ((as29b6@pivot (cdr as29b2@pivot))) (let ((as29b8@invoke (as29ae@compile (as29ac@expanded2core (car as29b6@pivot))))) (set-car! as29b6@pivot as29b8@invoke))))))))) (let ((as29ba@fasl-file (as28d1@scm->fasl as29a8@filename))) (begin (if (file-exists? as29ba@fasl-file) (delete-file as29ba@fasl-file) (void)) ((call/cc (lambda (as29be@as29bc) (lambda () (with-exception-handler (lambda (as29c0@c) ((call/cc (lambda (as29c2@as29bd) (as29be@as29bc (lambda () (if '#t (begin (if as28d7@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" as29a8@filename) (void)) (if (file-exists? as29ba@fasl-file) (delete-file as29ba@fasl-file) (void)) '#f) (as29c2@as29bd (lambda () (raise-continuable as29c0@c)))))))))) (lambda () (as28d3@fasl-save as29ba@fasl-file as29a9@obj)))))))))))) (set! as2a00@as28d9@serialize-library as28d9@serialize-library) (set! as28db@load-serialized-library (lambda (as29c4@filename as29c5@obj) (and (as28e5@mosh-cache-dir) (let ((as29c8@fasl-file (as28d1@scm->fasl as29c4@filename))) (if (and (file-exists? as29c8@fasl-file) ((symbol-value 'file-newer?) as29c8@fasl-file as29c4@filename)) (let ((as29ca@expanded2core (symbol-value 'expanded2core))) (let ((as29cc@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((as29ce@code (as28d5@fasl-load as29c8@fasl-file))) (let ((as29d0@pivot (cddddr (cddddr as29ce@code)))) (let ((as29d2@visit (car as29d0@pivot))) (let ((as29d4@visit-proc (lambda () (as29cc@eval-compiled-core as29d2@visit)))) (begin (set-car! as29d0@pivot as29d4@visit-proc) (let ((as29d6@pivot (cdr as29d0@pivot))) (let ((as29d8@invoke (car as29d6@pivot))) (begin (set-car! as29d6@pivot (lambda () (as29cc@eval-compiled-core as29d8@invoke))) (apply as29c5@obj as29ce@code))))))))))) '#f))))) (set! as2a01@as28db@load-serialized-library as28db@load-serialized-library) (set! as28dd@make-record-printer (lambda (as29da@name as29db@printer) (lambda as29de@x (begin (display '"record printer") (for-each display as29de@x))))) (set! as2a02@as28dd@make-record-printer as28dd@make-record-printer) (set! as28df@compile-core (lambda as29e0@x (apply error 'comile-core '"not implementated" as29e0@x))) (set! as2a03@as28df@compile-core as28df@compile-core) (set! as28e1@read-library-source-file (lambda (as29e2@file-name) (with-input-from-file as29e2@file-name as28c7@read-annotated))) (set! as2a04@as28e1@read-library-source-file as28e1@read-library-source-file) (set! as28e3@make-parameter (lambda as29f2 (let ((as29f3 (length as29f2))) (if (= as29f3 '1) (apply (lambda (as29e4@x) (as28e3@make-parameter as29e4@x (lambda (as29e6@x) as29e6@x))) as29f2) (if (= as29f3 '2) (apply (lambda (as29e8@x as29e9@fender) (let ((as29ec@x (as29e9@fender as29e8@x))) (lambda as29f0 (let ((as29f1 (length as29f0))) (if (= as29f1 '0) (apply (lambda () as29ec@x) as29f0) (if (= as29f1 '1) (apply (lambda (as29ee@v) (set! as29ec@x (as29e9@fender as29ee@v))) as29f0) (error 'apply '"invalid arg count"))))))) as29f2) (error 'apply '"invalid arg count")))))) (set! as2a05@as28e3@make-parameter as28e3@make-parameter) (set! as28e5@mosh-cache-dir (as28e3@make-parameter '#f)) (set! as2a06@as28e5@mosh-cache-dir as28e5@mosh-cache-dir) (set! as297b@file-options-spec (lambda (as29f4@x) as29f4@x)) (set! as2a07@as297b@file-options-spec as297b@file-options-spec) (void))
(begin (set! as2a0d@current-primitive-locations (unspecified)) (set! as2a0f@mutable? (unspecified)) (set! as2a11@rewriter (unspecified)) (set! as2a13@expanded->core (unspecified)) (set! as2a15@compile-core-expr (unspecified)) (set! as2a17@pretty-print (unspecified)) (set! as2a19@compile-core-expr-to-port (unspecified)) (set! as2a0d@current-primitive-locations (as2a05@as28e3@make-parameter (lambda (as2a1a@x) '#f) (lambda (as2a1c@p) as2a1c@p))) (set! as2a58@as2a0d@current-primitive-locations as2a0d@current-primitive-locations) (set! as2a0f@mutable? (lambda (as2a1e@x) (or (pair? as2a1e@x) (vector? as2a1e@x) (hashtable? as2a1e@x)))) (set! as2a59@as2a0f@mutable? as2a0f@mutable?) (set! as2a11@rewriter (lambda (as2a20@quote-hack?) (letrec* ((as2a23@f (lambda (as2a24@x) (if (pair? as2a24@x) (let ((as2a26@t (car as2a24@x))) (if (memv as2a26@t '(quote)) (if (and as2a20@quote-hack? (as2a0f@mutable? (cadr as2a24@x))) (let ((as2a28@g (gensym))) (begin (set-symbol-value! as2a28@g (cadr as2a24@x)) as2a28@g)) as2a24@x) (if (memv as2a26@t '(case-lambda)) (cons 'case-lambda (map (lambda (as2a2a@x) (cons (car as2a2a@x) (map as2a23@f (cdr as2a2a@x)))) (cdr as2a24@x))) (if (memv as2a26@t '(lambda)) (cons* 'lambda (cadr as2a24@x) (map as2a23@f (cddr as2a24@x))) (if (memv as2a26@t '(letrec)) (let ((as2a2c@bindings (cadr as2a24@x)) (as2a2d@body* (cddr as2a24@x))) (let ((as2a30@lhs* (map car as2a2c@bindings)) (as2a31@rhs* (map cadr as2a2c@bindings))) (cons* 'letrec (map list as2a30@lhs* (map as2a23@f as2a31@rhs*)) (map as2a23@f as2a2d@body*)))) (if (memv as2a26@t '(letrec*)) (let ((as2a34@bindings (cadr as2a24@x)) (as2a35@body* (cddr as2a24@x))) (let ((as2a38@lhs* (map car as2a34@bindings)) (as2a39@rhs* (map cadr as2a34@bindings))) (cons* 'letrec* (map list as2a38@lhs* (map as2a23@f as2a39@rhs*)) (map as2a23@f as2a35@body*)))) (if (memv as2a26@t '(library-letrec*)) (let ((as2a3c@name (cadr as2a24@x)) (as2a3d@x (cdr as2a24@x))) (let ((as2a40@bindings (cadr as2a3d@x)) (as2a41@body* (cddr as2a3d@x))) (let ((as2a44@lhs* (map car as2a40@bindings)) (as2a45@lhs** (map cadr as2a40@bindings)) (as2a46@rhs* (map caddr as2a40@bindings))) (cons* 'library-letrec* as2a3c@name (map list as2a44@lhs* as2a45@lhs** (map as2a23@f as2a46@rhs*)) (map as2a23@f as2a41@body*))))) (if (memv as2a26@t '(begin)) (cons 'begin (map as2a23@f (cdr as2a24@x))) (if (memv as2a26@t '(set!)) (list 'set! (cadr as2a24@x) (as2a23@f (caddr as2a24@x))) (if (memv as2a26@t '(primitive)) (let ((as2a4a@op (cadr as2a24@x))) (let ((as2a4c@t ((as2a0d@current-primitive-locations) as2a4a@op))) (if as2a4c@t ((lambda (as2a4e@loc) as2a4e@loc) as2a4c@t) as2a4a@op))) (if (memv as2a26@t '(define)) as2a24@x (if (list? as2a24@x) (map as2a23@f as2a24@x) (error 'rewrite '"invalid form ~s ~s" as2a24@x (list? as2a24@x)))))))))))))) as2a24@x)))) as2a23@f))) (set! as2a5a@as2a11@rewriter as2a11@rewriter) (set! as2a13@expanded->core (lambda (as2a50@x) ((as2a11@rewriter '#f) as2a50@x))) (set! as2a5b@as2a13@expanded->core as2a13@expanded->core) (set! as2a15@compile-core-expr (lambda (as2a52@x) ((as2a11@rewriter '#f) as2a52@x))) (set! as2a5c@as2a15@compile-core-expr as2a15@compile-core-expr) (set! as2a17@pretty-print write) (set! as2a5d@as2a17@pretty-print as2a17@pretty-print) (set! as2a19@compile-core-expr-to-port (lambda (as2a54@x as2a55@p) (as2a17@pretty-print ((as2a11@rewriter '#f) as2a54@x) as2a55@p))) (set! as2a5e@as2a19@compile-core-expr-to-port as2a19@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! as2aad@make-collection (unspecified)) (set! as2aaf@current-library-collection (unspecified)) (set! as2ab1@rp (unspecified)) (set! as2abb@library? (unspecified)) (set! as2abd@library-id (unspecified)) (set! as2abf@set-library-id! (unspecified)) (set! as2ac1@library-name (unspecified)) (set! as2ac3@set-library-name! (unspecified)) (set! as2ac5@library-version (unspecified)) (set! as2ac7@set-library-version! (unspecified)) (set! as2ac9@library-imp* (unspecified)) (set! as2acb@set-library-imp*! (unspecified)) (set! as2acd@library-vis* (unspecified)) (set! as2acf@set-library-vis*! (unspecified)) (set! as2ad1@library-inv* (unspecified)) (set! as2ad3@set-library-inv*! (unspecified)) (set! as2ad5@library-subst (unspecified)) (set! as2ad7@set-library-subst! (unspecified)) (set! as2ad9@library-env (unspecified)) (set! as2adb@set-library-env! (unspecified)) (set! as2add@library-visit-state (unspecified)) (set! as2adf@set-library-visit-state! (unspecified)) (set! as2ae1@library-invoke-state (unspecified)) (set! as2ae3@set-library-invoke-state! (unspecified)) (set! as2ae5@library-visit-code (unspecified)) (set! as2ae7@set-library-visit-code! (unspecified)) (set! as2ae9@library-invoke-code (unspecified)) (set! as2aeb@set-library-invoke-code! (unspecified)) (set! as2aed@library-visible? (unspecified)) (set! as2aef@set-library-visible?! (unspecified)) (set! as2af1@library-source-file-name (unspecified)) (set! as2af3@set-library-source-file-name! (unspecified)) (set! as2af5@dummy (unspecified)) (set! as2af7@find-dependencies (unspecified)) (set! as2af9@find-library-by (unspecified)) (set! as2afb@library-path (unspecified)) (set! as2afd@library-extensions (unspecified)) (set! as2aff@library-name->file-name (unspecified)) (set! as2b01@file-locator (unspecified)) (set! as2b03@serialize-all (unspecified)) (set! as2b05@current-precompiled-library-loader (unspecified)) (set! as2b07@try-load-from-file (unspecified)) (set! as2b09@library-loader (unspecified)) (set! as2b0b@current-library-expander (unspecified)) (set! as2b0d@external-pending-libraries (unspecified)) (set! as2b0f@find-external-library (unspecified)) (set! as2b11@find-library-by-name (unspecified)) (set! as2b13@library-exists? (unspecified)) (set! as2b15@find-library-by-spec/die (unspecified)) (set! as2b17@label->binding-table (unspecified)) (set! as2b19@install-library-record (unspecified)) (set! as2b1b@install-library (unspecified)) (set! as2b1d@imported-label->binding (unspecified)) (set! as2b1f@invoke-library (unspecified)) (set! as2b21@visit-library (unspecified)) (set! as2b23@invoke-library-by-spec (unspecified)) (set! as2b25@installed-libraries (unspecified)) (set! as2b27@library-spec (unspecified)) (set! as2aad@make-collection (lambda () (let ((as2b28@set '())) (letrec* ((as2b2b@set-cons (lambda (as2b30@x as2b31@ls) (if (memq as2b30@x as2b31@ls) as2b31@ls (cons as2b30@x as2b31@ls))))) (lambda as2b2e (let ((as2b2f (length as2b2e))) (if (= as2b2f '0) (apply (lambda () as2b28@set) as2b2e) (if (= as2b2f '1) (apply (lambda (as2b2c@x) (set! as2b28@set (as2b2b@set-cons as2b2c@x as2b28@set))) as2b2e) (error 'apply '"invalid arg count"))))))))) (set! as2c9c@as2aad@make-collection as2aad@make-collection) (set! as2aaf@current-library-collection (as2a05@as28e3@make-parameter (as2aad@make-collection) (lambda (as2b34@x) (begin (if (not (procedure? as2b34@x)) (assertion-violation 'current-library-collection '"not a procedure" as2b34@x) (void)) as2b34@x)))) (set! as2c9d@as2aaf@current-library-collection as2aaf@current-library-collection) (set! as2ab1@rp (as2a02@as28dd@make-record-printer 'library (lambda (as2b36@x as2b37@p as2b38@wr) (begin (if (not (as2abb@library? as2b36@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (as2ac5@library-version as2b36@x)) (as2ac1@library-name as2b36@x) (append (as2ac1@library-name as2b36@x) (list (as2ac5@library-version as2b36@x))))) as2b37@p))))) (set! as2c9e@as2ab1@rp as2ab1@rp) (set! as2abb@library? (lambda (as2b3c@x) (and (simple-struct? as2b3c@x) (eq? (simple-struct-name as2b3c@x) 'library)))) (set! as2c9f@as2abb@library? as2abb@library?) (set! as2abd@library-id (lambda (as2b3e@x) (simple-struct-ref as2b3e@x '0))) (set! as2ca0@as2abd@library-id as2abd@library-id) (set! as2abf@set-library-id! (lambda (as2b40@x as2b41@val) (simple-struct-set! as2b40@x '0 as2b41@val))) (set! as2ca1@as2abf@set-library-id! as2abf@set-library-id!) (set! as2ac1@library-name (lambda (as2b44@x) (simple-struct-ref as2b44@x '1))) (set! as2ca2@as2ac1@library-name as2ac1@library-name) (set! as2ac3@set-library-name! (lambda (as2b46@x as2b47@val) (simple-struct-set! as2b46@x '1 as2b47@val))) (set! as2ca3@as2ac3@set-library-name! as2ac3@set-library-name!) (set! as2ac5@library-version (lambda (as2b4a@x) (simple-struct-ref as2b4a@x '2))) (set! as2ca4@as2ac5@library-version as2ac5@library-version) (set! as2ac7@set-library-version! (lambda (as2b4c@x as2b4d@val) (simple-struct-set! as2b4c@x '2 as2b4d@val))) (set! as2ca5@as2ac7@set-library-version! as2ac7@set-library-version!) (set! as2ac9@library-imp* (lambda (as2b50@x) (simple-struct-ref as2b50@x '3))) (set! as2ca6@as2ac9@library-imp* as2ac9@library-imp*) (set! as2acb@set-library-imp*! (lambda (as2b52@x as2b53@val) (simple-struct-set! as2b52@x '3 as2b53@val))) (set! as2ca7@as2acb@set-library-imp*! as2acb@set-library-imp*!) (set! as2acd@library-vis* (lambda (as2b56@x) (simple-struct-ref as2b56@x '4))) (set! as2ca8@as2acd@library-vis* as2acd@library-vis*) (set! as2acf@set-library-vis*! (lambda (as2b58@x as2b59@val) (simple-struct-set! as2b58@x '4 as2b59@val))) (set! as2ca9@as2acf@set-library-vis*! as2acf@set-library-vis*!) (set! as2ad1@library-inv* (lambda (as2b5c@x) (simple-struct-ref as2b5c@x '5))) (set! as2caa@as2ad1@library-inv* as2ad1@library-inv*) (set! as2ad3@set-library-inv*! (lambda (as2b5e@x as2b5f@val) (simple-struct-set! as2b5e@x '5 as2b5f@val))) (set! as2cab@as2ad3@set-library-inv*! as2ad3@set-library-inv*!) (set! as2ad5@library-subst (lambda (as2b62@x) (simple-struct-ref as2b62@x '6))) (set! as2cac@as2ad5@library-subst as2ad5@library-subst) (set! as2ad7@set-library-subst! (lambda (as2b64@x as2b65@val) (simple-struct-set! as2b64@x '6 as2b65@val))) (set! as2cad@as2ad7@set-library-subst! as2ad7@set-library-subst!) (set! as2ad9@library-env (lambda (as2b68@x) (simple-struct-ref as2b68@x '7))) (set! as2cae@as2ad9@library-env as2ad9@library-env) (set! as2adb@set-library-env! (lambda (as2b6a@x as2b6b@val) (simple-struct-set! as2b6a@x '7 as2b6b@val))) (set! as2caf@as2adb@set-library-env! as2adb@set-library-env!) (set! as2add@library-visit-state (lambda (as2b6e@x) (simple-struct-ref as2b6e@x '8))) (set! as2cb0@as2add@library-visit-state as2add@library-visit-state) (set! as2adf@set-library-visit-state! (lambda (as2b70@x as2b71@val) (simple-struct-set! as2b70@x '8 as2b71@val))) (set! as2cb1@as2adf@set-library-visit-state! as2adf@set-library-visit-state!) (set! as2ae1@library-invoke-state (lambda (as2b74@x) (simple-struct-ref as2b74@x '9))) (set! as2cb2@as2ae1@library-invoke-state as2ae1@library-invoke-state) (set! as2ae3@set-library-invoke-state! (lambda (as2b76@x as2b77@val) (simple-struct-set! as2b76@x '9 as2b77@val))) (set! as2cb3@as2ae3@set-library-invoke-state! as2ae3@set-library-invoke-state!) (set! as2ae5@library-visit-code (lambda (as2b7a@x) (simple-struct-ref as2b7a@x '10))) (set! as2cb4@as2ae5@library-visit-code as2ae5@library-visit-code) (set! as2ae7@set-library-visit-code! (lambda (as2b7c@x as2b7d@val) (simple-struct-set! as2b7c@x '10 as2b7d@val))) (set! as2cb5@as2ae7@set-library-visit-code! as2ae7@set-library-visit-code!) (set! as2ae9@library-invoke-code (lambda (as2b80@x) (simple-struct-ref as2b80@x '11))) (set! as2cb6@as2ae9@library-invoke-code as2ae9@library-invoke-code) (set! as2aeb@set-library-invoke-code! (lambda (as2b82@x as2b83@val) (simple-struct-set! as2b82@x '11 as2b83@val))) (set! as2cb7@as2aeb@set-library-invoke-code! as2aeb@set-library-invoke-code!) (set! as2aed@library-visible? (lambda (as2b86@x) (simple-struct-ref as2b86@x '12))) (set! as2cb8@as2aed@library-visible? as2aed@library-visible?) (set! as2aef@set-library-visible?! (lambda (as2b88@x as2b89@val) (simple-struct-set! as2b88@x '12 as2b89@val))) (set! as2cb9@as2aef@set-library-visible?! as2aef@set-library-visible?!) (set! as2af1@library-source-file-name (lambda (as2b8c@x) (simple-struct-ref as2b8c@x '13))) (set! as2cba@as2af1@library-source-file-name as2af1@library-source-file-name) (set! as2af3@set-library-source-file-name! (lambda (as2b8e@x as2b8f@val) (simple-struct-set! as2b8e@x '13 as2b8f@val))) (set! as2cbb@as2af3@set-library-source-file-name! as2af3@set-library-source-file-name!) (set! as2af5@dummy '3) (set! as2cbc@as2af5@dummy as2af5@dummy) (set! as2af7@find-dependencies (lambda (as2b92@ls) (if (null? as2b92@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! as2cbd@as2af7@find-dependencies as2af7@find-dependencies) (set! as2af9@find-library-by (lambda (as2b94@pred) (let as2b98@f ((as2b96@ls ((as2aaf@current-library-collection)))) (if (null? as2b96@ls) '#f (if (as2b94@pred (car as2b96@ls)) (car as2b96@ls) (as2b98@f (cdr as2b96@ls))))))) (set! as2cbe@as2af9@find-library-by as2af9@find-library-by) (set! as2afb@library-path (as2a05@as28e3@make-parameter '(".") (lambda (as2b9a@x) (if (and (list? as2b9a@x) (for-all string? as2b9a@x)) (map (lambda (as2b9c@x) as2b9c@x) as2b9a@x) (assertion-violation 'library-path '"not a list of strings" as2b9a@x))))) (set! as2cbf@as2afb@library-path as2afb@library-path) (set! as2afd@library-extensions (as2a05@as28e3@make-parameter '(".sls" ".ss" ".scm") (lambda (as2b9e@x) (if (and (list? as2b9e@x) (for-all string? as2b9e@x)) (map (lambda (as2ba0@x) as2ba0@x) as2b9e@x) (assertion-violation 'library-extensions '"not a list of strings" as2b9e@x))))) (set! as2cc0@as2afd@library-extensions as2afd@library-extensions) (set! as2aff@library-name->file-name (lambda (as2ba2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (as2ba8@as2ba5 as2ba9@as2ba7) (let ((as2bac@extract as2ba9@as2ba7) (as2bad@p as2ba8@as2ba5)) (letrec* ((as2bb1@display-hex (lambda (as2bba@n) (if (<= '0 as2bba@n '9) (display as2bba@n as2bad@p) (display (integer->char (+ (char->integer '#\a) (- as2bba@n '10))) as2bad@p))))) (begin (let as2bb4@f ((as2bb2@ls as2ba2@x)) (if (not (null? as2bb2@ls)) (begin (display '"/" as2bad@p) (for-each (lambda (as2bb6@c) (if (or (char<=? '#\a as2bb6@c '#\z) (char<=? '#\A as2bb6@c '#\Z) (char<=? '#\0 as2bb6@c '#\9) (memv as2bb6@c '(#\- #\. #\_ #\~))) (display as2bb6@c as2bad@p) (begin (display '"%" as2bad@p) (let ((as2bb8@n (char->integer as2bb6@c))) (begin (as2bb1@display-hex (quotient as2bb8@n '16)) (as2bb1@display-hex (remainder as2bb8@n '16))))))) (string->list (symbol->string (car as2bb2@ls)))) (as2bb4@f (cdr as2bb2@ls))) (void))) (as2bac@extract)))))))) (set! as2cc1@as2aff@library-name->file-name as2aff@library-name->file-name) (set! as2b01@file-locator (as2a05@as28e3@make-parameter (lambda (as2bbc@x) (let ((as2bbe@str (as2aff@library-name->file-name as2bbc@x))) (let as2bc6@f ((as2bc0@ls (as2afb@library-path)) (as2bc1@exts (as2afd@library-extensions)) (as2bc2@failed-list '())) (if (null? as2bc0@ls) (letrec* ((as2bd0@as2bcb (make-record-type-descriptor '&library-resolution &condition-rtd 'as2bce '#f '#f '#((immutable library) (immutable files)))) (as2bd2@as2bcd '#f) (as2bd4@as2bcc (make-record-constructor-descriptor as2bd0@as2bcb &condition-rcd as2bd2@as2bcd)) (as2bd7@as2bca (record-predicate as2bd0@as2bcb)) (as2bd9@make-library-resolution-condition (record-constructor as2bd4@as2bcc)) (as2bdb@as2bc8 (record-accessor as2bd0@as2bcb '0)) (as2bdd@as2bc9 (record-accessor as2bd0@as2bcb '1)) (as2bdf@library-resolution-condition? (condition-predicate as2bd0@as2bcb)) (as2be1@condition-library (condition-accessor as2bd0@as2bcb as2bdb@as2bc8)) (as2be3@condition-files (condition-accessor as2bd0@as2bcb as2bdd@as2bc9))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (as2bd9@make-library-resolution-condition as2bbc@x (reverse as2bc2@failed-list))))) (if (null? as2bc1@exts) (as2bc6@f (cdr as2bc0@ls) (as2afd@library-extensions) as2bc2@failed-list) (let ((as2be4@name (string-append (car as2bc0@ls) as2bbe@str (car as2bc1@exts)))) (if (file-exists? as2be4@name) as2be4@name (as2bc6@f as2bc0@ls (cdr as2bc1@exts) (cons as2be4@name as2bc2@failed-list))))))))) (lambda (as2be6@f) (if (procedure? as2be6@f) as2be6@f (assertion-violation 'file-locator '"not a procedure" as2be6@f))))) (set! as2cc2@as2b01@file-locator as2b01@file-locator) (set! as2b03@serialize-all (lambda (as2be8@serialize as2be9@compile) (letrec* ((as2bed@library-desc (lambda (as2bf0@x) (list (as2abd@library-id as2bf0@x) (as2ac1@library-name as2bf0@x))))) (for-each (lambda (as2bee@x) (if (as2af1@library-source-file-name as2bee@x) (as2be8@serialize (as2af1@library-source-file-name as2bee@x) (list (as2abd@library-id as2bee@x) (as2ac1@library-name as2bee@x) (as2ac5@library-version as2bee@x) (map as2bed@library-desc (as2ac9@library-imp* as2bee@x)) (map as2bed@library-desc (as2acd@library-vis* as2bee@x)) (map as2bed@library-desc (as2ad1@library-inv* as2bee@x)) (as2ad5@library-subst as2bee@x) (as2ad9@library-env as2bee@x) (as2be9@compile (as2ae5@library-visit-code as2bee@x)) (as2be9@compile (as2ae9@library-invoke-code as2bee@x)) (as2aed@library-visible? as2bee@x))) (void))) ((as2aaf@current-library-collection)))))) (set! as2cc3@as2b03@serialize-all as2b03@serialize-all) (set! as2b05@current-precompiled-library-loader (as2a05@as28e3@make-parameter (lambda (as2bf2@filename as2bf3@sk) '#f))) (set! as2cc4@as2b05@current-precompiled-library-loader as2b05@current-precompiled-library-loader) (set! as2b07@try-load-from-file (lambda (as2bf6@filename) ((as2b05@current-precompiled-library-loader) as2bf6@filename (lambda as2c1c (let ((as2c1d (length as2c1c))) (if (= as2c1d '11) (apply (lambda (as2bf8@id as2bf9@name as2bfa@ver as2bfb@imp* as2bfc@vis* as2bfd@inv* as2bfe@exp-subst as2bff@exp-env as2c00@visit-proc as2c01@invoke-proc as2c02@visible?) (let as2c10@f ((as2c0e@deps (append as2bfb@imp* as2bfc@vis* as2bfd@inv*))) (if (null? as2c0e@deps) (begin (as2b1b@install-library as2bf8@id as2bf9@name as2bfa@ver as2bfb@imp* as2bfc@vis* as2bfd@inv* as2bfe@exp-subst as2bff@exp-env as2c00@visit-proc as2c01@invoke-proc '#f '#f as2c02@visible? '#f) '#t) (let ((as2c12@d (car as2c0e@deps))) (let ((as2c14@label (car as2c12@d)) (as2c15@dname (cadr as2c12@d))) (let ((as2c18@l (as2b11@find-library-by-name as2c15@dname))) (if (and (as2abb@library? as2c18@l) (eq? as2c14@label (as2abd@library-id as2c18@l))) (as2c10@f (cdr as2c0e@deps)) (begin (if as29ff@as28d7@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" as2bf9@name as2c15@dname as2bf6@filename as2c18@l as2c14@label (as2abd@library-id as2c18@l)) (void)) '#f)))))))) as2c1c) (if (>= as2c1d '0) (apply (lambda as2c1a@others '#f) as2c1c) (error 'apply '"invalid arg count")))))))) (set! as2cc5@as2b07@try-load-from-file as2b07@try-load-from-file) (set! as2b09@library-loader (as2a05@as28e3@make-parameter (lambda (as2c1e@x) (let ((as2c20@file-name ((as2b01@file-locator) as2c1e@x))) (if (not as2c20@file-name) (assertion-violation '#f '"cannot file library" as2c1e@x) (or (as2b07@try-load-from-file as2c20@file-name) ((as2b0b@current-library-expander) (as2a04@as28e1@read-library-source-file as2c20@file-name) as2c20@file-name (lambda (as2c22@name) (if (not (fast-equal? as2c22@name as2c1e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (as2c28@as2c25 as2c29@as2c27) (let ((as2c2c@e as2c29@as2c27) (as2c2d@p as2c28@as2c25)) (begin (display '"expected to find library " as2c2d@p) (write as2c1e@x as2c2d@p) (display '" in file " as2c2d@p) (display as2c20@file-name as2c2d@p) (display '", found " as2c2d@p) (write as2c22@name as2c2d@p) (display '" instead" as2c2d@p) (as2c2c@e)))))) (void)))))))) (lambda (as2c30@f) (if (procedure? as2c30@f) as2c30@f (assertion-violation 'library-locator '"not a procedure" as2c30@f))))) (set! as2cc6@as2b09@library-loader as2b09@library-loader) (set! as2b0b@current-library-expander (as2a05@as28e3@make-parameter (lambda (as2c32@x) (assertion-violation 'library-expander '"not initialized")) (lambda (as2c34@f) (if (procedure? as2c34@f) as2c34@f (assertion-violation 'library-expander '"not a procedure" as2c34@f))))) (set! as2cc7@as2b0b@current-library-expander as2b0b@current-library-expander) (set! as2b0d@external-pending-libraries (as2a05@as28e3@make-parameter '())) (set! as2cc8@as2b0d@external-pending-libraries as2b0d@external-pending-libraries) (set! as2b0f@find-external-library (lambda (as2c36@name) (begin (if (member as2c36@name (as2b0d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" as2c36@name) (void)) (let ((as2c3c@as2c39 as2b0d@external-pending-libraries) (as2c3d@as2c3b (cons as2c36@name (as2b0d@external-pending-libraries)))) (let ((as2c40@swap (lambda () (let ((as2c42@t (as2c3c@as2c39))) (begin (as2c3c@as2c39 as2c3d@as2c3b) (set! as2c3d@as2c3b as2c42@t)))))) (dynamic-wind as2c40@swap (lambda () (begin ((as2b09@library-loader) as2c36@name) (or (as2af9@find-library-by (lambda (as2c44@x) (fast-equal? (as2ac1@library-name as2c44@x) as2c36@name))) (assertion-violation '#f '"handling external library did not yield the correct library" as2c36@name)))) as2c40@swap)))))) (set! as2cc9@as2b0f@find-external-library as2b0f@find-external-library) (set! as2b11@find-library-by-name (lambda (as2c46@name) (or (as2af9@find-library-by (lambda (as2c48@x) (fast-equal? (as2ac1@library-name as2c48@x) as2c46@name))) (as2b0f@find-external-library as2c46@name)))) (set! as2cca@as2b11@find-library-by-name as2b11@find-library-by-name) (set! as2b13@library-exists? (lambda (as2c4a@name) (and (as2af9@find-library-by (lambda (as2c4c@x) (fast-equal? (as2ac1@library-name as2c4c@x) as2c4a@name))) '#t))) (set! as2ccb@as2b13@library-exists? as2b13@library-exists?) (set! as2b15@find-library-by-spec/die (lambda (as2c4e@spec) (let ((as2c50@id (car as2c4e@spec))) (or (as2af9@find-library-by (lambda (as2c52@x) (eq? as2c50@id (as2abd@library-id as2c52@x)))) (assertion-violation '#f '"cannot find library with required spec" as2c4e@spec))))) (set! as2ccc@as2b15@find-library-by-spec/die as2b15@find-library-by-spec/die) (set! as2b17@label->binding-table (make-eq-hashtable)) (set! as2ccd@as2b17@label->binding-table as2b17@label->binding-table) (set! as2b19@install-library-record (lambda (as2c54@lib) (begin (let ((as2c56@exp-env (as2ad9@library-env as2c54@lib))) (for-each (lambda (as2c58@x) (let ((as2c5a@label (car as2c58@x)) (as2c5b@binding (cdr as2c58@x))) (let ((as2c5e@binding (let ((as2c60@t (car as2c5b@binding))) (if (memv as2c60@t '(global)) (cons 'global (cons as2c54@lib (cdr as2c5b@binding))) (if (memv as2c60@t '(global-macro)) (cons 'global-macro (cons as2c54@lib (cdr as2c5b@binding))) (if (memv as2c60@t '(global-macro!)) (cons 'global-macro! (cons as2c54@lib (cdr as2c5b@binding))) as2c5b@binding)))))) (begin (if (hashtable-ref as2b17@label->binding-table as2c5a@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" as2c5a@label (hashtable-ref as2b17@label->binding-table as2c5a@label '#f) as2c5e@binding) (exit)) (void)) (hashtable-set! as2b17@label->binding-table as2c5a@label as2c5e@binding))))) as2c56@exp-env)) ((as2aaf@current-library-collection) as2c54@lib)))) (set! as2cce@as2b19@install-library-record as2b19@install-library-record) (set! as2b1b@install-library (lambda (as2c62@id as2c63@name as2c64@ver as2c65@imp* as2c66@vis* as2c67@inv* as2c68@exp-subst as2c69@exp-env as2c6a@visit-proc as2c6b@invoke-proc as2c6c@visit-code as2c6d@invoke-code as2c6e@visible? as2c6f@source-file-name) (let ((as2c7e@imp-lib* (map as2b15@find-library-by-spec/die as2c65@imp*)) (as2c7f@vis-lib* (map as2b15@find-library-by-spec/die as2c66@vis*)) (as2c80@inv-lib* (map as2b15@find-library-by-spec/die as2c67@inv*))) (begin (if (not (and (symbol? as2c62@id) (list? as2c63@name) (list? as2c64@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" as2c62@id as2c63@name as2c64@ver) (void)) (if (as2b13@library-exists? as2c63@name) (assertion-violation 'install-library '"library is already installed" as2c63@name) (void)) (let ((as2c84@lib (make-simple-struct 'library '15 (list as2c62@id as2c63@name as2c64@ver as2c7e@imp-lib* as2c7f@vis-lib* as2c80@inv-lib* as2c68@exp-subst as2c69@exp-env as2c6a@visit-proc as2c6b@invoke-proc as2c6c@visit-code as2c6d@invoke-code as2c6e@visible? as2c6f@source-file-name)))) (as2b19@install-library-record as2c84@lib)))))) (set! as2ccf@as2b1b@install-library as2b1b@install-library) (set! as2b1d@imported-label->binding (lambda (as2c86@lab) (hashtable-ref as2b17@label->binding-table as2c86@lab '#f))) (set! as2cd0@as2b1d@imported-label->binding as2b1d@imported-label->binding) (set! as2b1f@invoke-library (lambda (as2c88@lib) (let ((as2c8a@invoke (as2ae1@library-invoke-state as2c88@lib))) (if (procedure? as2c8a@invoke) (begin (as2ae3@set-library-invoke-state! as2c88@lib (lambda () (assertion-violation 'invoke '"circularity detected" as2c88@lib))) (for-each as2b1f@invoke-library (as2ad1@library-inv* as2c88@lib)) (as2ae3@set-library-invoke-state! as2c88@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" as2c88@lib))) (as2c8a@invoke) (as2ae3@set-library-invoke-state! as2c88@lib '#t)) (void))))) (set! as2cd1@as2b1f@invoke-library as2b1f@invoke-library) (set! as2b21@visit-library (lambda (as2c8c@lib) (let ((as2c8e@visit (as2add@library-visit-state as2c8c@lib))) (if (procedure? as2c8e@visit) (begin (as2adf@set-library-visit-state! as2c8c@lib (lambda () (assertion-violation 'visit '"circularity detected" as2c8c@lib))) (for-each as2b1f@invoke-library (as2acd@library-vis* as2c8c@lib)) (as2adf@set-library-visit-state! as2c8c@lib (lambda () (assertion-violation 'invoke '"first visit did not return" as2c8c@lib))) (as2c8e@visit) (as2adf@set-library-visit-state! as2c8c@lib '#t)) (void))))) (set! as2cd2@as2b21@visit-library as2b21@visit-library) (set! as2b23@invoke-library-by-spec (lambda (as2c90@spec) (as2b1f@invoke-library (as2b15@find-library-by-spec/die as2c90@spec)))) (set! as2cd3@as2b23@invoke-library-by-spec as2b23@invoke-library-by-spec) (set! as2b25@installed-libraries (lambda as2c98 (let ((as2c99 (length as2c98))) (if (= as2c99 '1) (apply (lambda (as2c92@all?) (let as2c96@f ((as2c94@ls ((as2aaf@current-library-collection)))) (if (null? as2c94@ls) '() (if (or as2c92@all? (as2aed@library-visible? (car as2c94@ls))) (cons (car as2c94@ls) (as2c96@f (cdr as2c94@ls))) (as2c96@f (cdr as2c94@ls)))))) as2c98) (if (= as2c99 '0) (apply (lambda () (as2b25@installed-libraries '#f)) as2c98) (error 'apply '"invalid arg count")))))) (set! as2cd4@as2b25@installed-libraries as2b25@installed-libraries) (set! as2b27@library-spec (lambda (as2c9a@x) (begin (if (not (as2abb@library? as2c9a@x)) (assertion-violation 'library-spec '"not a library" as2c9a@x) (void)) (list (as2abd@library-id as2c9a@x) (as2ac1@library-name as2c9a@x) (as2ac5@library-version as2c9a@x))))) (set! as2cd5@as2b27@library-spec as2b27@library-spec) (void))
(begin (set! as2cd9@build-global-define (unspecified)) (set! as2d4a@build-lambda (unspecified)) (set! as2d4c@build-case-lambda (unspecified)) (set! as2d7a@build-sequence (unspecified)) (set! as2d7c@build-void (unspecified)) (set! as2d7e@build-letrec (unspecified)) (set! as2d80@build-let (unspecified)) (set! as2d82@build-named-let (unspecified)) (set! as2d84@build-letrec* (unspecified)) (set! as2d86@build-library-letrec* (unspecified)) (set! as2d88@build-receive (unspecified)) (set! as2cd9@build-global-define (lambda (as2d89@x) (as2d7c@build-void))) (set! as2e17@as2cd9@build-global-define as2cd9@build-global-define) (set! as2d4a@build-lambda (lambda (as2d8b@ae as2d8c@vars as2d8d@exp) (list 'lambda as2d8c@vars as2d8d@exp))) (set! as2e18@as2d4a@build-lambda as2d4a@build-lambda) (set! as2d4c@build-case-lambda (lambda (as2d91@ae as2d92@vars* as2d93@exp*) (letrec* ((as2d98@build-error (lambda (as2dcf@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (as2d9a@build-pred (lambda (as2db7@ae as2db8@n as2db9@vars) (call-with-values (lambda () (let as2dc5@f ((as2dc1@vars as2db9@vars) (as2dc2@count '0)) (if (pair? as2dc1@vars) (as2dc5@f (cdr as2dc1@vars) (+ as2dc2@count '1)) (if (null? as2dc1@vars) (values as2dc2@count '=) (values as2dc2@count '>=))))) (lambda (as2dc7@as2dbe as2dc8@as2dc0) (let ((as2dcb@pred as2dc8@as2dc0) (as2dcc@count as2dc7@as2dbe)) (list (list 'primitive as2dcb@pred) as2db8@n (list 'quote as2dcc@count))))))) (as2d9c@build-apply (lambda (as2daf@ae as2db0@g as2db1@vars as2db2@exp) (list '(primitive apply) (as2d4a@build-lambda as2daf@ae as2db1@vars as2db2@exp) as2db0@g))) (as2d9e@expand-case-lambda (lambda (as2d9f@ae as2da0@vars as2da1@exp*) (let ((as2da5@g (gensym)) (as2da6@n (gensym))) (list 'lambda as2da5@g (as2d80@build-let as2d9f@ae (list as2da6@n) (list (list '(primitive length) as2da5@g)) (let as2dad@f ((as2da9@vars* as2d92@vars*) (as2daa@exp* as2da1@exp*)) (if (null? as2da9@vars*) (as2d98@build-error as2d9f@ae) (list 'if (as2d9a@build-pred as2d9f@ae as2da6@n (car as2da9@vars*)) (as2d9c@build-apply as2d9f@ae as2da5@g (car as2da9@vars*) (car as2daa@exp*)) (as2dad@f (cdr as2da9@vars*) (cdr as2daa@exp*))))))))))) (if (= (length as2d93@exp*) '1) (as2d4a@build-lambda as2d91@ae (car as2d92@vars*) (car as2d93@exp*)) (as2d9e@expand-case-lambda as2d91@ae as2d92@vars* as2d93@exp*))))) (set! as2e19@as2d4c@build-case-lambda as2d4c@build-case-lambda) (set! as2d7a@build-sequence (lambda (as2dd1@ae as2dd2@exps) (let as2dd7@loop ((as2dd5@exps as2dd2@exps)) (if (null? (cdr as2dd5@exps)) (car as2dd5@exps) (if (equal? (car as2dd5@exps) (as2d7c@build-void)) (as2dd7@loop (cdr as2dd5@exps)) (cons 'begin as2dd5@exps)))))) (set! as2e1a@as2d7a@build-sequence as2d7a@build-sequence) (set! as2d7c@build-void (lambda () '((primitive void)))) (set! as2e1b@as2d7c@build-void as2d7c@build-void) (set! as2d7e@build-letrec (lambda (as2dd9@ae as2dda@vars as2ddb@val-exps as2ddc@body-exp) (if (null? as2dda@vars) as2ddc@body-exp (list 'letrec (map list as2dda@vars as2ddb@val-exps) as2ddc@body-exp)))) (set! as2e1c@as2d7e@build-letrec as2d7e@build-letrec) (set! as2d80@build-let (lambda (as2de1@ae as2de2@vars as2de3@val-exps as2de4@body-exp) (if (null? as2de2@vars) as2de4@body-exp (list 'let (map list as2de2@vars as2de3@val-exps) as2de4@body-exp)))) (set! as2e1d@as2d80@build-let as2d80@build-let) (set! as2d82@build-named-let (lambda (as2de9@ae as2dea@name as2deb@vars as2dec@val-exps as2ded@body-exp) (list 'let as2dea@name (map list as2deb@vars as2dec@val-exps) as2ded@body-exp))) (set! as2e1e@as2d82@build-named-let as2d82@build-named-let) (set! as2d84@build-letrec* (lambda (as2df3@ae as2df4@vars as2df5@val-exps as2df6@body-exp) (if (null? as2df4@vars) as2df6@body-exp (list 'letrec* (map list as2df4@vars as2df5@val-exps) as2df6@body-exp)))) (set! as2e1f@as2d84@build-letrec* as2d84@build-letrec*) (set! as2d86@build-library-letrec* (lambda (as2dfb@ae as2dfc@name as2dfd@vars as2dfe@locs as2dff@val-exps as2e00@body-exp) (cons 'begin (append (map (lambda (as2e07@var) (cons 'set! (cons as2e07@var '((unspecified))))) as2dfd@vars) (append (apply append (map (lambda (as2e09@var as2e0a@loc as2e0b@val-exp) (list (list 'set! as2e09@var as2e0b@val-exp) (list 'set! as2e0a@loc as2e09@var))) as2dfd@vars as2dfe@locs as2dff@val-exps)) (list as2e00@body-exp)))))) (set! as2e20@as2d86@build-library-letrec* as2d86@build-library-letrec*) (set! as2d88@build-receive (lambda (as2e0f@ae as2e10@vars as2e11@producer as2e12@body*) (begin (display '"************** in ") (cons 'receive (cons as2e10@vars (cons as2e11@producer as2e12@body*)))))) (set! as2e21@as2d88@build-receive as2d88@build-receive) (void))
(begin (set! as2e30@file-options-macro (unspecified)) (set! as2e32@set-cons (unspecified)) (set! as2e34@set-union (unspecified)) (set! as2e39@top-mark* (unspecified)) (set! as2e3b@top-marked? (unspecified)) (set! as2e3d@gen-lexical (unspecified)) (set! as2e3f@gen-global (unspecified)) (set! as2e41@gen-label (unspecified)) (set! as2e43@gen-top-level-label (unspecified)) (set! as2e45@gen-define-label+loc (unspecified)) (set! as2e47@gen-define-label (unspecified)) (set! as2e51@rib? (unspecified)) (set! as2e53@rib-sym* (unspecified)) (set! as2e55@set-rib-sym*! (unspecified)) (set! as2e57@rib-mark** (unspecified)) (set! as2e59@set-rib-mark**! (unspecified)) (set! as2e5b@rib-label* (unspecified)) (set! as2e5d@set-rib-label*! (unspecified)) (set! as2e5f@rib-sealed/freq (unspecified)) (set! as2e61@set-rib-sealed/freq! (unspecified)) (set! as2e63@rib-cache (unspecified)) (set! as2e65@set-rib-cache! (unspecified)) (set! as2e67@dummy (unspecified)) (set! as2e69@make-empty-rib (unspecified)) (set! as2e6b@extend-rib! (unspecified)) (set! as2e6d@extend-rib/nc! (unspecified)) (set! as2e6f@make-rib-map (unspecified)) (set! as2e71@seal-rib! (unspecified)) (set! as2e73@unseal-rib! (unspecified)) (set! as2e75@make-full-rib (unspecified)) (set! as2e77@rp (unspecified)) (set! as2e81@stx? (unspecified)) (set! as2e83@stx-expr (unspecified)) (set! as2e85@set-stx-expr! (unspecified)) (set! as2e87@stx-mark* (unspecified)) (set! as2e89@set-stx-mark*! (unspecified)) (set! as2e8b@stx-subst* (unspecified)) (set! as2e8d@set-stx-subst*! (unspecified)) (set! as2e8f@stx-ae* (unspecified)) (set! as2e91@set-stx-ae*! (unspecified)) (set! as2e93@dummy (unspecified)) (set! as2e95@datum->stx (unspecified)) (set! as2e97@gen-mark (unspecified)) (set! as2e99@anti-mark (unspecified)) (set! as2e9b@anti-mark? (unspecified)) (set! as2e9d@mkstx (unspecified)) (set! as2e9f@add-mark (unspecified)) (set! as2ea1@add-subst (unspecified)) (set! as2ea3@syntax-kind? (unspecified)) (set! as2ea5@syntax-vector->list (unspecified)) (set! as2ea7@syntax-pair? (unspecified)) (set! as2ea9@syntax-vector? (unspecified)) (set! as2eab@syntax-null? (unspecified)) (set! as2ead@syntax-list? (unspecified)) (set! as2eaf@syntax-car (unspecified)) (set! as2eb1@syntax-cdr (unspecified)) (set! as2eb3@syntax->list (unspecified)) (set! as2eb5@id? (unspecified)) (set! as2eb7@id->sym (unspecified)) (set! as2eb9@bound-id=? (unspecified)) (set! as2ebb@free-id=? (unspecified)) (set! as2ebd@valid-bound-ids? (unspecified)) (set! as2ebf@distinct-bound-ids? (unspecified)) (set! as2ec1@bound-id-member? (unspecified)) (set! as2ec3@self-evaluating? (unspecified)) (set! as2ec5@strip-annotations (unspecified)) (set! as2ec7@strip (unspecified)) (set! as2ec9@stx->datum (unspecified)) (set! as2ecb@id->label (unspecified)) (set! as2ecd@label->binding (unspecified)) (set! as2ecf@make-binding (unspecified)) (set! as2ed1@binding-type (unspecified)) (set! as2ed3@binding-value (unspecified)) (set! as2ed5@raise-unbound-error (unspecified)) (set! as2ed7@syntax-type (unspecified)) (set! as2ee5@sanitize-binding (unspecified)) (set! as2ee7@make-variable-transformer (unspecified)) (set! as2ee9@variable-transformer? (unspecified)) (set! as2eeb@variable-transformer-procedure (unspecified)) (set! as2eed@make-eval-transformer (unspecified)) (set! as303e@parse-define (unspecified)) (set! as3040@parse-define-syntax (unspecified)) (set! as3042@scheme-stx-hashtable (unspecified)) (set! as3044@scheme-stx (unspecified)) (set! as3046@lexical-var (unspecified)) (set! as3048@lexical-mutable? (unspecified)) (set! as304a@set-lexical-mutable! (unspecified)) (set! as304c@add-lexical (unspecified)) (set! as304e@add-lexicals (unspecified)) (set! as3050@letrec-helper (unspecified)) (set! as3052@let-transformer (unspecified)) (set! as3054@letrec-transformer (unspecified)) (set! as3056@letrec*-transformer (unspecified)) (set! as3058@fluid-let-syntax-transformer (unspecified)) (set! as305a@type-descriptor-transformer (unspecified)) (set! as305c@record-type-descriptor-transformer (unspecified)) (set! as305e@record-constructor-descriptor-transformer (unspecified)) (set! as3060@when-macro (unspecified)) (set! as3062@unless-macro (unspecified)) (set! as3064@if-transformer (unspecified)) (set! as3066@and-transformer (unspecified)) (set! as3068@or-transformer (unspecified)) (set! as306a@case-macro (unspecified)) (set! as306c@quote-transformer (unspecified)) (set! as306e@case-lambda-transformer (unspecified)) (set! as3070@lambda-transformer (unspecified)) (set! as3072@bless (unspecified)) (set! as3074@with-syntax-macro (unspecified)) (set! as3076@invalid-fmls-error (unspecified)) (set! as3078@let-macro (unspecified)) (set! as307a@let-values-macro (unspecified)) (set! as307c@let*-values-macro (unspecified)) (set! as307e@trace-lambda-macro (unspecified)) (set! as3080@trace-define-macro (unspecified)) (set! as3082@trace-define-syntax-macro (unspecified)) (set! as3084@trace-let/rec-syntax (unspecified)) (set! as3086@trace-let-syntax-macro (unspecified)) (set! as3088@trace-letrec-syntax-macro (unspecified)) (set! as308a@guard-macro (unspecified)) (set! as308c@define-enumeration-macro (unspecified)) (set! as308e@time-macro (unspecified)) (set! as3090@delay-macro (unspecified)) (set! as3092@assert-macro (unspecified)) (set! as3094@endianness-macro (unspecified)) (set! as3096@identifier-syntax-macro (unspecified)) (set! as3098@do-macro (unspecified)) (set! as309a@let*-macro (unspecified)) (set! as309c@or-macro (unspecified)) (set! as309e@and-macro (unspecified)) (set! as30a0@cond-macro (unspecified)) (set! as30a2@do-include (unspecified)) (set! as30a4@include-macro (unspecified)) (set! as30a6@include-into-macro (unspecified)) (set! as30a8@syntax-rules-macro (unspecified)) (set! as30aa@quasiquote-macro (unspecified)) (set! as30ac@quasisyntax-macro (unspecified)) (set! as30ae@define-struct-macro (unspecified)) (set! as30b0@define-record-type-macro (unspecified)) (set! as30b2@define-condition-type-macro (unspecified)) (set! as30b4@incorrect-usage-macro (unspecified)) (set! as30b6@parameterize-macro (unspecified)) (set! as30b8@foreign-call-transformer (unspecified)) (set! as30ba@convert-pattern (unspecified)) (set! as30bc@syntax-dispatch (unspecified)) (set! as30be@ellipsis? (unspecified)) (set! as30c0@underscore? (unspecified)) (set! as30c2@verify-literals (unspecified)) (set! as30c4@syntax-case-transformer (unspecified)) (set! as30c6@ellipsis-map (unspecified)) (set! as30c8@syntax-transformer (unspecified)) (set! as30ca@core-macro-transformer (unspecified)) (set! as30cc@symbol-macro (unspecified)) (set! as30ce@macro-transformer (unspecified)) (set! as30d0@local-macro-transformer (unspecified)) (set! as30d2@do-macro-call (unspecified)) (set! as30d4@chi-macro (unspecified)) (set! as30d6@chi-local-macro (unspecified)) (set! as30d8@chi-global-macro (unspecified)) (set! as30da@chi-expr* (unspecified)) (set! as30dc@chi-application (unspecified)) (set! as30de@chi-expr (unspecified)) (set! as30e0@chi-set! (unspecified)) (set! as30e2@verify-formals (unspecified)) (set! as30e4@chi-lambda-clause (unspecified)) (set! as30e6@chi-lambda-clause* (unspecified)) (set! as30e8@chi-defun (unspecified)) (set! as30ea@chi-rhs (unspecified)) (set! as30ec@expand-interaction-rhs*/init* (unspecified)) (set! as30ee@chi-rhs* (unspecified)) (set! as30f0@find-bound=? (unspecified)) (set! as30f2@find-dups (unspecified)) (set! as30f4@chi-internal (unspecified)) (set! as30f6@parse-module (unspecified)) (set! as3100@module-interface? (unspecified)) (set! as3102@module-interface-first-mark (unspecified)) (set! as3104@set-module-interface-first-mark! (unspecified)) (set! as3106@module-interface-exp-id-vec (unspecified)) (set! as3108@set-module-interface-exp-id-vec! (unspecified)) (set! as310a@module-interface-exp-lab-vec (unspecified)) (set! as310c@set-module-interface-exp-lab-vec! (unspecified)) (set! as310e@dummy (unspecified)) (set! as3110@module-interface-exp-id* (unspecified)) (set! as3112@chi-internal-module (unspecified)) (set! as3114@chi-body* (unspecified)) (set! as3116@expand-transformer (unspecified)) (set! as3118@parse-exports (unspecified)) (set! as311a@parse-library-name (unspecified)) (set! as311c@parse-library (unspecified)) (set! as311e@parse-import-spec* (unspecified)) (set! as3120@make-top-rib (unspecified)) (set! as3122@make-collector (unspecified)) (set! as3124@inv-collector (unspecified)) (set! as3126@vis-collector (unspecified)) (set! as3128@imp-collector (unspecified)) (set! as312a@chi-library-internal (unspecified)) (set! as312c@chi-interaction-expr (unspecified)) (set! as312e@library-body-expander (unspecified)) (set! as3130@core-library-expander (unspecified)) (set! as3132@parse-top-level-program (unspecified)) (set! as3134@top-level-expander (unspecified)) (set! as3136@rp (unspecified)) (set! as3140@env? (unspecified)) (set! as3142@env-names (unspecified)) (set! as3144@set-env-names! (unspecified)) (set! as3146@env-labels (unspecified)) (set! as3148@set-env-labels! (unspecified)) (set! as314a@env-itc (unspecified)) (set! as314c@set-env-itc! (unspecified)) (set! as314e@dummy (unspecified)) (set! as3150@rp (unspecified)) (set! as315a@interaction-env? (unspecified)) (set! as315c@interaction-env-rib (unspecified)) (set! as315e@set-interaction-env-rib! (unspecified)) (set! as3160@interaction-env-r (unspecified)) (set! as3162@set-interaction-env-r! (unspecified)) (set! as3164@interaction-env-locs (unspecified)) (set! as3166@set-interaction-env-locs! (unspecified)) (set! as3168@dummy (unspecified)) (set! as316a@interaction-environment-symbols (unspecified)) (set! as316c@environment-bindings (unspecified)) (set! as316e@parse-binding (unspecified)) (set! as3170@environment? (unspecified)) (set! as3172@environment-symbols (unspecified)) (set! as3174@environment (unspecified)) (set! as3176@null-environment (unspecified)) (set! as3178@scheme-report-environment (unspecified)) (set! as317a@expand (unspecified)) (set! as317c@eval (unspecified)) (set! as317e@library-expander (unspecified)) (set! as3180@boot-library-expand (unspecified)) (set! as3182@rev-map-append (unspecified)) (set! as3184@build-exports (unspecified)) (set! as3186@make-export-subst (unspecified)) (set! as3188@make-export-env/macros (unspecified)) (set! as318a@generate-temporaries (unspecified)) (set! as318c@free-identifier=? (unspecified)) (set! as318e@bound-identifier=? (unspecified)) (set! as3190@make-source-condition (unspecified)) (set! as3192@extract-position-condition (unspecified)) (set! as3194@expression-position (unspecified)) (set! as3196@assertion-error (unspecified)) (set! as3198@syntax-error (unspecified)) (set! as319a@syntax-violation* (unspecified)) (set! as319c@syntax-violation (unspecified)) (set! as319e@identifier? (unspecified)) (set! as31a0@datum->syntax (unspecified)) (set! as31a2@syntax->datum (unspecified)) (set! as31a4@ungensym-all (unspecified)) (set! as31a6@compile-r6rs-top-level (unspecified)) (set! as31a8@pre-compile-r6rs-top-level (unspecified)) (set! as31aa@interaction-environment (unspecified)) (set! as31ac@top-level-context (unspecified)) (set! as2e30@file-options-macro (lambda (as31ad@x) (letrec* ((as31b0@valid-option? (lambda (as31b9@x) (and (as2eb5@id? as31b9@x) (memq (as2eb7@id->sym as31b9@x) '(no-fail no-create no-truncate)))))) (let ((as31b1@t as31ad@x)) (let ((as31b3@ls/false (as30bc@syntax-dispatch as31b1@t '(_ . each-any)))) (if (and as31b3@ls/false (apply (lambda (as31b5@opt*) (for-all as31b0@valid-option? as31b5@opt*)) as31b3@ls/false)) (apply (lambda (as31b7@opt*) (as3072@bless (list 'make-file-options (list 'quote as31b7@opt*)))) as31b3@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as31b1@t))))))) (set! as4b03@as2e30@file-options-macro as2e30@file-options-macro) (set! as2e32@set-cons (lambda (as31bb@x as31bc@ls) (if (memq as31bb@x as31bc@ls) as31bc@ls (cons as31bb@x as31bc@ls)))) (set! as4b04@as2e32@set-cons as2e32@set-cons) (set! as2e34@set-union (lambda (as31bf@ls1 as31c0@ls2) (if (null? as31bf@ls1) as31c0@ls2 (if (memq (car as31bf@ls1) as31c0@ls2) (as2e34@set-union (cdr as31bf@ls1) as31c0@ls2) (cons (car as31bf@ls1) (as2e34@set-union (cdr as31bf@ls1) as31c0@ls2)))))) (set! as4b05@as2e34@set-union as2e34@set-union) (set! as2e39@top-mark* '(top)) (set! as4b06@as2e39@top-mark* as2e39@top-mark*) (set! as2e3b@top-marked? (lambda (as31c3@m*) (memq 'top as31c3@m*))) (set! as4b07@as2e3b@top-marked? as2e3b@top-marked?) (set! as2e3d@gen-lexical (lambda (as31c5@sym) (if (symbol? as31c5@sym) (gensym as31c5@sym) (if (as2e81@stx? as31c5@sym) (as2e3d@gen-lexical (as2eb7@id->sym as31c5@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" as31c5@sym))))) (set! as4b08@as2e3d@gen-lexical as2e3d@gen-lexical) (set! as2e3f@gen-global (lambda (as31c7@x) (as2e3d@gen-lexical as31c7@x))) (set! as4b09@as2e3f@gen-global as2e3f@gen-global) (set! as2e41@gen-label (lambda (as31c9@_) (gensym))) (set! as4b0a@as2e41@gen-label as2e41@gen-label) (set! as2e43@gen-top-level-label (lambda (as31cb@id as31cc@rib) (letrec* ((as31d0@find (lambda (as31db@sym as31dc@mark* as31dd@sym* as31de@mark** as31df@label*) (and (pair? as31dd@sym*) (if (and (eq? as31db@sym (car as31dd@sym*)) (same-marks? as31dc@mark* (car as31de@mark**))) (car as31df@label*) (as31d0@find as31db@sym as31dc@mark* (cdr as31dd@sym*) (cdr as31de@mark**) (cdr as31df@label*))))))) (let ((as31d1@sym (as2eb7@id->sym as31cb@id)) (as31d2@mark* (as2e87@stx-mark* as31cb@id))) (let ((as31d5@sym* (as2e53@rib-sym* as31cc@rib))) (let ((as31d7@t (and (memq as31d1@sym (as2e53@rib-sym* as31cc@rib)) (as31d0@find as31d1@sym as31d2@mark* as31d5@sym* (as2e57@rib-mark** as31cc@rib) (as2e5b@rib-label* as31cc@rib))))) (if as31d7@t ((lambda (as31d9@label) (if (as2cd0@as2b1d@imported-label->binding as31d9@label) (gensym) as31d9@label)) as31d7@t) (gensym)))))))) (set! as4b0b@as2e43@gen-top-level-label as2e43@gen-top-level-label) (set! as2e45@gen-define-label+loc (lambda (as31e5@id as31e6@rib) (let ((as31e9@t (as31ac@top-level-context))) (if as31e9@t ((lambda (as31eb@env) (let ((as31ed@label (as2e43@gen-top-level-label as31e5@id as31e6@rib)) (as31ee@locs (as3164@interaction-env-locs as31eb@env))) (values as31ed@label (let ((as31f1@t (assq as31ed@label as31ee@locs))) (if as31f1@t (cdr as31f1@t) (let ((as31f3@loc (as2e3d@gen-lexical as31e5@id))) (begin (as3166@set-interaction-env-locs! as31eb@env (cons (cons as31ed@label as31f3@loc) as31ee@locs)) as31f3@loc))))))) as31e9@t) (values (gensym) (as2e3d@gen-lexical as31e5@id)))))) (set! as4b0c@as2e45@gen-define-label+loc as2e45@gen-define-label+loc) (set! as2e47@gen-define-label (lambda (as31f5@id as31f6@rib) (if (as31ac@top-level-context) (as2e43@gen-top-level-label as31f5@id as31f6@rib) (gensym)))) (set! as4b0d@as2e47@gen-define-label as2e47@gen-define-label) (set! as2e51@rib? (lambda (as31f9@x) (and (simple-struct? as31f9@x) (eq? (simple-struct-name as31f9@x) 'rib)))) (set! as4b0e@as2e51@rib? as2e51@rib?) (set! as2e53@rib-sym* (lambda (as31fb@x) (simple-struct-ref as31fb@x '0))) (set! as4b0f@as2e53@rib-sym* as2e53@rib-sym*) (set! as2e55@set-rib-sym*! (lambda (as31fd@x as31fe@val) (simple-struct-set! as31fd@x '0 as31fe@val))) (set! as4b10@as2e55@set-rib-sym*! as2e55@set-rib-sym*!) (set! as2e57@rib-mark** (lambda (as3201@x) (simple-struct-ref as3201@x '1))) (set! as4b11@as2e57@rib-mark** as2e57@rib-mark**) (set! as2e59@set-rib-mark**! (lambda (as3203@x as3204@val) (simple-struct-set! as3203@x '1 as3204@val))) (set! as4b12@as2e59@set-rib-mark**! as2e59@set-rib-mark**!) (set! as2e5b@rib-label* (lambda (as3207@x) (simple-struct-ref as3207@x '2))) (set! as4b13@as2e5b@rib-label* as2e5b@rib-label*) (set! as2e5d@set-rib-label*! (lambda (as3209@x as320a@val) (simple-struct-set! as3209@x '2 as320a@val))) (set! as4b14@as2e5d@set-rib-label*! as2e5d@set-rib-label*!) (set! as2e5f@rib-sealed/freq (lambda (as320d@x) (simple-struct-ref as320d@x '3))) (set! as4b15@as2e5f@rib-sealed/freq as2e5f@rib-sealed/freq) (set! as2e61@set-rib-sealed/freq! (lambda (as320f@x as3210@val) (simple-struct-set! as320f@x '3 as3210@val))) (set! as4b16@as2e61@set-rib-sealed/freq! as2e61@set-rib-sealed/freq!) (set! as2e63@rib-cache (lambda (as3213@x) (simple-struct-ref as3213@x '4))) (set! as4b17@as2e63@rib-cache as2e63@rib-cache) (set! as2e65@set-rib-cache! (lambda (as3215@x as3216@val) (simple-struct-set! as3215@x '4 as3216@val))) (set! as4b18@as2e65@set-rib-cache! as2e65@set-rib-cache!) (set! as2e67@dummy '3) (set! as4b19@as2e67@dummy as2e67@dummy) (set! as2e69@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! as4b1a@as2e69@make-empty-rib as2e69@make-empty-rib) (set! as2e6b@extend-rib! (lambda (as3219@rib as321a@id as321b@label) (letrec* ((as3220@find (lambda (as322d@sym as322e@mark* as322f@sym* as3230@mark** as3231@label*) (and (pair? as322f@sym*) (if (and (eq? as322d@sym (car as322f@sym*)) (same-marks? as322e@mark* (car as3230@mark**))) as3231@label* (as3220@find as322d@sym as322e@mark* (cdr as322f@sym*) (cdr as3230@mark**) (cdr as3231@label*))))))) (begin (if (as2e5f@rib-sealed/freq as3219@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" as3219@rib) (void)) (let ((as3221@sym (as2eb7@id->sym as321a@id)) (as3222@mark* (as2e87@stx-mark* as321a@id))) (let ((as3225@sym* (as2e53@rib-sym* as3219@rib))) (let ((as3227@t (and (memq as3221@sym (as2e53@rib-sym* as3219@rib)) (as3220@find as3221@sym as3222@mark* as3225@sym* (as2e57@rib-mark** as3219@rib) (as2e5b@rib-label* as3219@rib))))) (if as3227@t ((lambda (as3229@p) (if (not (eq? as321b@label (car as3229@p))) (if (as31ac@top-level-context) (set-car! as3229@p as321b@label) (as319c@syntax-violation '#f '"multiple definitions of identifier" as321a@id)) (void))) as3227@t) (begin (if (as2e63@rib-cache as3219@rib) (hashtable-update! (as2e63@rib-cache as3219@rib) as3221@sym (lambda (as322b@e) (cons (cons as3222@mark* as321b@label) as322b@e)) '()) (void)) (as2e55@set-rib-sym*! as3219@rib (cons as3221@sym as3225@sym*)) (as2e59@set-rib-mark**! as3219@rib (cons as3222@mark* (as2e57@rib-mark** as3219@rib))) (as2e5d@set-rib-label*! as3219@rib (cons as321b@label (as2e5b@rib-label* as3219@rib)))))))))))) (set! as4b1b@as2e6b@extend-rib! as2e6b@extend-rib!) (set! as2e6d@extend-rib/nc! (lambda (as3237@rib as3238@id as3239@label) (let ((as323d@sym (as2eb7@id->sym as3238@id)) (as323e@mark* (as2e87@stx-mark* as3238@id))) (let ((as3241@sym* (as2e53@rib-sym* as3237@rib))) (begin (if (as2e63@rib-cache as3237@rib) (hashtable-update! (as2e63@rib-cache as3237@rib) as323d@sym (lambda (as3243@e) (cons (cons as323e@mark* as3239@label) as3243@e)) '()) (void)) (as2e55@set-rib-sym*! as3237@rib (cons as323d@sym as3241@sym*)) (as2e59@set-rib-mark**! as3237@rib (cons as323e@mark* (as2e57@rib-mark** as3237@rib))) (as2e5d@set-rib-label*! as3237@rib (cons as3239@label (as2e5b@rib-label* as3237@rib)))))))) (set! as4b1c@as2e6d@extend-rib/nc! as2e6d@extend-rib/nc!) (set! as2e6f@make-rib-map (lambda (as3245@sym*) (let ((as3247@ht (make-eq-hashtable))) (let as324d@f ((as3249@i '0) (as324a@sym* as3245@sym*)) (if (null? as324a@sym*) as3247@ht (begin (hashtable-update! as3247@ht (car as324a@sym*) (lambda (as324f@x) (cons as3249@i as324f@x)) '()) (as324d@f (+ as3249@i '1) (cdr as324a@sym*)))))))) (set! as4b1d@as2e6f@make-rib-map as2e6f@make-rib-map) (set! as2e71@seal-rib! (lambda (as3251@rib) (let ((as3253@sym* (as2e53@rib-sym* as3251@rib))) (if (not (null? as3253@sym*)) (begin (as2e55@set-rib-sym*! as3251@rib (list->vector as3253@sym*)) (as2e59@set-rib-mark**! as3251@rib (list->vector (as2e57@rib-mark** as3251@rib))) (as2e5d@set-rib-label*! as3251@rib (list->vector (as2e5b@rib-label* as3251@rib))) (as2e61@set-rib-sealed/freq! as3251@rib (as2e6f@make-rib-map as3253@sym*))) (void))))) (set! as4b1e@as2e71@seal-rib! as2e71@seal-rib!) (set! as2e73@unseal-rib! (lambda (as3255@rib) (if (as2e5f@rib-sealed/freq as3255@rib) (begin (as2e61@set-rib-sealed/freq! as3255@rib '#f) (as2e55@set-rib-sym*! as3255@rib (vector->list (as2e53@rib-sym* as3255@rib))) (as2e59@set-rib-mark**! as3255@rib (vector->list (as2e57@rib-mark** as3255@rib))) (as2e5d@set-rib-label*! as3255@rib (vector->list (as2e5b@rib-label* as3255@rib)))) (void)))) (set! as4b1f@as2e73@unseal-rib! as2e73@unseal-rib!) (set! as2e75@make-full-rib (lambda (as3257@id* as3258@label*) (let ((as325b@r (make-simple-struct 'rib '6 (list (map as2eb7@id->sym as3257@id*) (map as2e87@stx-mark* as3257@id*) as3258@label* '#f '#f)))) (begin (as2e71@seal-rib! as325b@r) as325b@r)))) (set! as4b20@as2e75@make-full-rib as2e75@make-full-rib) (set! as2e77@rp (as2a02@as28dd@make-record-printer 'stx (lambda (as325d@x as325e@p as325f@wr) (begin (display '"#<syntax " as325e@p) (write (as2ec9@stx->datum as325d@x) as325e@p) (let ((as3263@expr (as2e83@stx-expr as325d@x))) (if (as29f9@as28cb@annotation? as3263@expr) (let ((as3265@src (as29fa@as28cd@annotation-source as3263@expr))) (if (pair? as3265@src) (begin (display '" [" as325e@p) (display (cdr as3265@src) as325e@p) (display '" of " as325e@p) (display (car as3265@src) as325e@p) (display '"]" as325e@p)) (void))) (void))) (display '">" as325e@p))))) (set! as4b21@as2e77@rp as2e77@rp) (set! as2e81@stx? (lambda (as3267@x) (and (simple-struct? as3267@x) (eq? (simple-struct-name as3267@x) 'stx)))) (set! as4b22@as2e81@stx? as2e81@stx?) (set! as2e83@stx-expr (lambda (as3269@x) (simple-struct-ref as3269@x '0))) (set! as4b23@as2e83@stx-expr as2e83@stx-expr) (set! as2e85@set-stx-expr! (lambda (as326b@x as326c@val) (simple-struct-set! as326b@x '0 as326c@val))) (set! as4b24@as2e85@set-stx-expr! as2e85@set-stx-expr!) (set! as2e87@stx-mark* (lambda (as326f@x) (simple-struct-ref as326f@x '1))) (set! as4b25@as2e87@stx-mark* as2e87@stx-mark*) (set! as2e89@set-stx-mark*! (lambda (as3271@x as3272@val) (simple-struct-set! as3271@x '1 as3272@val))) (set! as4b26@as2e89@set-stx-mark*! as2e89@set-stx-mark*!) (set! as2e8b@stx-subst* (lambda (as3275@x) (simple-struct-ref as3275@x '2))) (set! as4b27@as2e8b@stx-subst* as2e8b@stx-subst*) (set! as2e8d@set-stx-subst*! (lambda (as3277@x as3278@val) (simple-struct-set! as3277@x '2 as3278@val))) (set! as4b28@as2e8d@set-stx-subst*! as2e8d@set-stx-subst*!) (set! as2e8f@stx-ae* (lambda (as327b@x) (simple-struct-ref as327b@x '3))) (set! as4b29@as2e8f@stx-ae* as2e8f@stx-ae*) (set! as2e91@set-stx-ae*! (lambda (as327d@x as327e@val) (simple-struct-set! as327d@x '3 as327e@val))) (set! as4b2a@as2e91@set-stx-ae*! as2e91@set-stx-ae*!) (set! as2e93@dummy '3) (set! as4b2b@as2e93@dummy as2e93@dummy) (set! as2e95@datum->stx (lambda (as3281@id as3282@datum) (make-simple-struct 'stx '5 (list as3282@datum (as2e87@stx-mark* as3281@id) (as2e8b@stx-subst* as3281@id) (as2e8f@stx-ae* as3281@id))))) (set! as4b2c@as2e95@datum->stx as2e95@datum->stx) (set! as2e97@gen-mark (lambda () (string '#\m))) (set! as4b2d@as2e97@gen-mark as2e97@gen-mark) (set! as2e99@anti-mark '#f) (set! as4b2e@as2e99@anti-mark as2e99@anti-mark) (set! as2e9b@anti-mark? not) (set! as4b2f@as2e9b@anti-mark? as2e9b@anti-mark?) (set! as2e9d@mkstx (lambda (as3285@e as3286@m* as3287@s* as3288@ae*) (if (and (as2e81@stx? as3285@e) (not (as2e3b@top-marked? as3286@m*))) (call-with-values (lambda () (join-wraps as3286@m* as3287@s* as3288@ae* as3285@e)) (lambda (as3293@as328e as3294@as3290 as3295@as3292) (let ((as3299@ae* as3295@as3292) (as329a@s* as3294@as3290) (as329b@m* as3293@as328e)) (make-simple-struct 'stx '5 (list (as2e83@stx-expr as3285@e) as329b@m* as329a@s* as3299@ae*))))) (make-simple-struct 'stx '5 (list as3285@e as3286@m* as3287@s* as3288@ae*))))) (set! as4b30@as2e9d@mkstx as2e9d@mkstx) (set! as2e9f@add-mark (lambda (as329f@m as32a0@e as32a1@ae) (as2e9d@mkstx as32a0@e (list as329f@m) '(shift) (list as32a1@ae)))) (set! as4b31@as2e9f@add-mark as2e9f@add-mark) (set! as2ea1@add-subst (lambda (as32a5@subst as32a6@e) (as2e9d@mkstx as32a6@e '() (list as32a5@subst) '()))) (set! as4b32@as2ea1@add-subst as2ea1@add-subst) (set! as2ea3@syntax-kind? (lambda (as32a9@x as32aa@p?) (if (as2e81@stx? as32a9@x) (as2ea3@syntax-kind? (as2e83@stx-expr as32a9@x) as32aa@p?) (if (as29f9@as28cb@annotation? as32a9@x) (as2ea3@syntax-kind? (as29fb@as28cf@annotation-expression as32a9@x) as32aa@p?) (as32aa@p? as32a9@x))))) (set! as4b33@as2ea3@syntax-kind? as2ea3@syntax-kind?) (set! as2ea5@syntax-vector->list (lambda (as32ad@x) (if (as2e81@stx? as32ad@x) (let ((as32af@ls (as2ea5@syntax-vector->list (as2e83@stx-expr as32ad@x))) (as32b0@m* (as2e87@stx-mark* as32ad@x)) (as32b1@s* (as2e8b@stx-subst* as32ad@x)) (as32b2@ae* (as2e8f@stx-ae* as32ad@x))) (map (lambda (as32b7@x) (as2e9d@mkstx as32b7@x as32b0@m* as32b1@s* as32b2@ae*)) as32af@ls)) (if (as29f9@as28cb@annotation? as32ad@x) (as2ea5@syntax-vector->list (as29fb@as28cf@annotation-expression as32ad@x)) (if (vector? as32ad@x) (vector->list as32ad@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" as32ad@x)))))) (set! as4b34@as2ea5@syntax-vector->list as2ea5@syntax-vector->list) (set! as2ea7@syntax-pair? (lambda (as32b9@x) (as2ea3@syntax-kind? as32b9@x pair?))) (set! as4b35@as2ea7@syntax-pair? as2ea7@syntax-pair?) (set! as2ea9@syntax-vector? (lambda (as32bb@x) (as2ea3@syntax-kind? as32bb@x vector?))) (set! as4b36@as2ea9@syntax-vector? as2ea9@syntax-vector?) (set! as2eab@syntax-null? (lambda (as32bd@x) (as2ea3@syntax-kind? as32bd@x null?))) (set! as4b37@as2eab@syntax-null? as2eab@syntax-null?) (set! as2ead@syntax-list? (lambda (as32bf@x) (or (as2eab@syntax-null? as32bf@x) (and (as2ea7@syntax-pair? as32bf@x) (as2ead@syntax-list? (as2eb1@syntax-cdr as32bf@x)))))) (set! as4b38@as2ead@syntax-list? as2ead@syntax-list?) (set! as2eaf@syntax-car (lambda (as32c1@x) (if (as2e81@stx? as32c1@x) (as2e9d@mkstx (as2eaf@syntax-car (as2e83@stx-expr as32c1@x)) (as2e87@stx-mark* as32c1@x) (as2e8b@stx-subst* as32c1@x) (as2e8f@stx-ae* as32c1@x)) (if (as29f9@as28cb@annotation? as32c1@x) (as2eaf@syntax-car (as29fb@as28cf@annotation-expression as32c1@x)) (if (pair? as32c1@x) (car as32c1@x) (assertion-violation 'syntax-car '"BUG: not a pair" as32c1@x)))))) (set! as4b39@as2eaf@syntax-car as2eaf@syntax-car) (set! as2eb1@syntax-cdr (lambda (as32c3@x) (if (as2e81@stx? as32c3@x) (as2e9d@mkstx (as2eb1@syntax-cdr (as2e83@stx-expr as32c3@x)) (as2e87@stx-mark* as32c3@x) (as2e8b@stx-subst* as32c3@x) (as2e8f@stx-ae* as32c3@x)) (if (as29f9@as28cb@annotation? as32c3@x) (as2eb1@syntax-cdr (as29fb@as28cf@annotation-expression as32c3@x)) (if (pair? as32c3@x) (cdr as32c3@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" as32c3@x)))))) (set! as4b3a@as2eb1@syntax-cdr as2eb1@syntax-cdr) (set! as2eb3@syntax->list (lambda (as32c5@x) (if (as2ea7@syntax-pair? as32c5@x) (cons (as2eaf@syntax-car as32c5@x) (as2eb3@syntax->list (as2eb1@syntax-cdr as32c5@x))) (if (as2eab@syntax-null? as32c5@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" as32c5@x))))) (set! as4b3b@as2eb3@syntax->list as2eb3@syntax->list) (set! as2eb5@id? (lambda (as32c7@x) (and (as2e81@stx? as32c7@x) (symbol? (as2e83@stx-expr as32c7@x))))) (set! as4b3c@as2eb5@id? as2eb5@id?) (set! as2eb7@id->sym (lambda (as32c9@x) (as2e83@stx-expr as32c9@x))) (set! as4b3d@as2eb7@id->sym as2eb7@id->sym) (set! as2eb9@bound-id=? (lambda (as32cb@x as32cc@y) (and (eq? (as2eb7@id->sym as32cb@x) (as2eb7@id->sym as32cc@y)) (same-marks? (as2e87@stx-mark* as32cb@x) (as2e87@stx-mark* as32cc@y))))) (set! as4b3e@as2eb9@bound-id=? as2eb9@bound-id=?) (set! as2ebb@free-id=? (lambda (as32cf@i as32d0@j) (let ((as32d3@t0 (id->real-label as32cf@i)) (as32d4@t1 (id->real-label as32d0@j))) (if (or as32d3@t0 as32d4@t1) (eq? as32d3@t0 as32d4@t1) (eq? (as2eb7@id->sym as32cf@i) (as2eb7@id->sym as32d0@j)))))) (set! as4b3f@as2ebb@free-id=? as2ebb@free-id=?) (set! as2ebd@valid-bound-ids? (lambda (as32d7@id*) (and (for-all as2eb5@id? as32d7@id*) (as2ebf@distinct-bound-ids? as32d7@id*)))) (set! as4b40@as2ebd@valid-bound-ids? as2ebd@valid-bound-ids?) (set! as2ebf@distinct-bound-ids? (lambda (as32d9@id*) (or (null? as32d9@id*) (and (not (as2ec1@bound-id-member? (car as32d9@id*) (cdr as32d9@id*))) (as2ebf@distinct-bound-ids? (cdr as32d9@id*)))))) (set! as4b41@as2ebf@distinct-bound-ids? as2ebf@distinct-bound-ids?) (set! as2ec1@bound-id-member? (lambda (as32db@id as32dc@id*) (and (pair? as32dc@id*) (or (as2eb9@bound-id=? as32db@id (car as32dc@id*)) (as2ec1@bound-id-member? as32db@id (cdr as32dc@id*)))))) (set! as4b42@as2ec1@bound-id-member? as2ec1@bound-id-member?) (set! as2ec3@self-evaluating? (lambda (as32df@x) (or (number? as32df@x) (string? as32df@x) (char? as32df@x) (boolean? as32df@x) (regexp? as32df@x) (bytevector? as32df@x)))) (set! as4b43@as2ec3@self-evaluating? as2ec3@self-evaluating?) (set! as2ec5@strip-annotations (lambda (as32e1@x) (if (pair? as32e1@x) (cons (as2ec5@strip-annotations (car as32e1@x)) (as2ec5@strip-annotations (cdr as32e1@x))) (if (vector? as32e1@x) (vector-map as2ec5@strip-annotations as32e1@x) (if (as29f9@as28cb@annotation? as32e1@x) (as29f8@as28c9@annotation-stripped as32e1@x) as32e1@x))))) (set! as4b44@as2ec5@strip-annotations as2ec5@strip-annotations) (set! as2ec7@strip (lambda (as32e3@x as32e4@m*) (if (as2e3b@top-marked? as32e4@m*) (if (or (as29f9@as28cb@annotation? as32e3@x) (and (pair? as32e3@x) (as29f9@as28cb@annotation? (car as32e3@x))) (and (vector? as32e3@x) (> (vector-length as32e3@x) '0) (as29f9@as28cb@annotation? (vector-ref as32e3@x '0)))) (as2ec5@strip-annotations as32e3@x) as32e3@x) (let as32e9@f ((as32e7@x as32e3@x)) (if (as2e81@stx? as32e7@x) (begin (if (pair? (as2e83@stx-expr as32e7@x)) (begin (set-source-info! (as2e83@stx-expr as32e7@x) '#f) (set-source-info! (cdr (as2e83@stx-expr as32e7@x)) '#f) (set-source-info! (car (as2e83@stx-expr as32e7@x)) '#f)) (void)) (as2ec7@strip (as2e83@stx-expr as32e7@x) (as2e87@stx-mark* as32e7@x))) (if (as29f9@as28cb@annotation? as32e7@x) (as29f8@as28c9@annotation-stripped as32e7@x) (if (pair? as32e7@x) (let ((as32eb@a (as32e9@f (car as32e7@x))) (as32ec@d (as32e9@f (cdr as32e7@x)))) (if (and (eq? as32eb@a (car as32e7@x)) (eq? as32ec@d (cdr as32e7@x))) as32e7@x (cons as32eb@a as32ec@d))) (if (vector? as32e7@x) (let ((as32ef@old (vector->list as32e7@x))) (let ((as32f1@new (map as32e9@f as32ef@old))) (if (for-all eq? as32ef@old as32f1@new) as32e7@x (list->vector as32f1@new)))) as32e7@x)))))))) (set! as4b45@as2ec7@strip as2ec7@strip) (set! as2ec9@stx->datum (lambda (as32f3@x) (as2ec7@strip as32f3@x '()))) (set! as4b46@as2ec9@stx->datum as2ec9@stx->datum) (set! as2ecb@id->label (lambda (as32f5@id) (or (id->real-label as32f5@id) (let ((as32f7@t (as31ac@top-level-context))) (if as32f7@t ((lambda (as32f9@env) (let ((as32fb@rib (as315c@interaction-env-rib as32f9@env))) (call-with-values (lambda () (as2e45@gen-define-label+loc as32f5@id as32fb@rib)) (lambda (as3301@as32fe as3302@as3300) (let ((as3305@loc_ as3302@as3300) (as3306@lab as3301@as32fe)) (begin (as2e6b@extend-rib! as32fb@rib as32f5@id as3306@lab) as3306@lab)))))) as32f7@t) '#f))))) (set! as4b47@as2ecb@id->label as2ecb@id->label) (set! as2ecd@label->binding (lambda (as3309@x as330a@r) (let ((as330d@t (as2cd0@as2b1d@imported-label->binding as3309@x))) (if as330d@t ((lambda (as330f@b) (if (and (pair? as330f@b) (eq? (car as330f@b) '$core-rtd)) (cons '$rtd (map as3072@bless (cdr as330f@b))) (if (and (pair? as330f@b) (eq? (car as330f@b) 'global-rtd)) (let ((as3311@lib (cadr as330f@b)) (as3312@loc (cddr as330f@b))) (cons '$rtd (symbol-value as3312@loc))) as330f@b))) as330d@t) (let ((as3315@t (assq as3309@x as330a@r))) (if as3315@t (cdr as3315@t) (let ((as3317@t (as31ac@top-level-context))) (if as3317@t ((lambda (as3319@env) (let ((as331b@t (assq as3309@x (as3164@interaction-env-locs as3319@env)))) (if as331b@t ((lambda (as331d@p) (cons* 'lexical (cdr as331d@p) '#f)) as331b@t) '(displaced-lexical . #f)))) as3317@t) '(displaced-lexical . #f))))))))) (set! as4b48@as2ecd@label->binding as2ecd@label->binding) (set! as2ecf@make-binding cons) (set! as4b49@as2ecf@make-binding as2ecf@make-binding) (set! as2ed1@binding-type car) (set! as4b4a@as2ed1@binding-type as2ed1@binding-type) (set! as2ed3@binding-value cdr) (set! as4b4b@as2ed3@binding-value as2ed3@binding-value) (set! as2ed5@raise-unbound-error (lambda (as331f@id) (as319a@syntax-violation* '#f '"unbound identifier" as331f@id (make-undefined-violation)))) (set! as4b4c@as2ed5@raise-unbound-error as2ed5@raise-unbound-error) (set! as2ed7@syntax-type (lambda (as3321@e as3322@r) (if (as2eb5@id? as3321@e) (let ((as3325@id as3321@e)) (let ((as3327@label (as2ecb@id->label as3325@id))) (let ((as3329@b (as2ecd@label->binding as3327@label as3322@r))) (let ((as332b@type (as2ed1@binding-type as3329@b))) (begin (if (not as3327@label) (as2ed5@raise-unbound-error as3325@id) (void)) (let ((as332d@t as332b@type)) (if (memv as332d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values as332b@type (as2ed3@binding-value as3329@b) as3325@id) (values 'other '#f '#f)))))))) (if (as2ea7@syntax-pair? as3321@e) (let ((as332f@id (as2eaf@syntax-car as3321@e))) (if (as2eb5@id? as332f@id) (let ((as3331@label (as2ecb@id->label as332f@id))) (let ((as3333@b (as2ecd@label->binding as3331@label as3322@r))) (let ((as3335@type (as2ed1@binding-type as3333@b))) (begin (if (not as3331@label) (as2ed5@raise-unbound-error as332f@id) (void)) (let ((as3337@t as3335@type)) (if (memv as3337@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values as3335@type (as2ed3@binding-value as3333@b) as332f@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((as3339@d (as2ec9@stx->datum as3321@e))) (if (as2ec3@self-evaluating? as3339@d) (values 'constant as3339@d '#f) (values 'other '#f '#f))))))) (set! as4b4d@as2ed7@syntax-type as2ed7@syntax-type) (set! as2ee5@sanitize-binding (lambda (as333b@x as333c@src) (if (procedure? as333b@x) (cons* 'local-macro as333b@x as333c@src) (if (and (pair? as333b@x) (eq? (car as333b@x) 'macro!) (procedure? (cdr as333b@x))) (cons* 'local-macro! (cdr as333b@x) as333c@src) (if (and (pair? as333b@x) (eq? (car as333b@x) '$rtd)) as333b@x (assertion-violation 'expand '"invalid transformer" as333b@x)))))) (set! as4b4e@as2ee5@sanitize-binding as2ee5@sanitize-binding) (set! as2ee7@make-variable-transformer (lambda (as333f@x) (if (procedure? as333f@x) (cons 'macro! as333f@x) (assertion-violation 'make-variable-transformer '"not a procedure" as333f@x)))) (set! as4b4f@as2ee7@make-variable-transformer as2ee7@make-variable-transformer) (set! as2ee9@variable-transformer? (lambda (as3341@x) (and (pair? as3341@x) (eq? (car as3341@x) 'macro!) (procedure? (cdr as3341@x))))) (set! as4b50@as2ee9@variable-transformer? as2ee9@variable-transformer?) (set! as2eeb@variable-transformer-procedure (lambda (as3343@x) (if (as2ee9@variable-transformer? as3343@x) (cdr as3343@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" as3343@x)))) (set! as4b51@as2eeb@variable-transformer-procedure as2eeb@variable-transformer-procedure) (set! as2eed@make-eval-transformer (lambda (as3345@x) (as2ee5@sanitize-binding (eval-core (as2a5b@as2a13@expanded->core as3345@x)) as3345@x))) (set! as4b52@as2eed@make-eval-transformer as2eed@make-eval-transformer) (set! as303e@parse-define (lambda (as3347@x) (let ((as3349@t as3347@x)) (let ((as334b@ls/false (as30bc@syntax-dispatch as3349@t '(_ (any . any) any . each-any)))) (if (and as334b@ls/false (apply (lambda (as334d@id as334e@fmls as334f@b as3350@b*) (as2eb5@id? as334d@id)) as334b@ls/false)) (apply (lambda (as3355@id as3356@fmls as3357@b as3358@b*) (begin (as30e2@verify-formals as3356@fmls as3347@x) (values as3355@id (cons 'defun (cons as3356@fmls (cons as3357@b as3358@b*)))))) as334b@ls/false) (let ((as335d@t as3349@t)) (let ((as335f@ls/false (as30bc@syntax-dispatch as335d@t '(_ any any)))) (if (and as335f@ls/false (apply (lambda (as3361@id as3362@val) (as2eb5@id? as3361@id)) as335f@ls/false)) (apply (lambda (as3365@id as3366@val) (values as3365@id (cons 'expr as3366@val))) as335f@ls/false) (let ((as3369@t as335d@t)) (let ((as336b@ls/false (as30bc@syntax-dispatch as3369@t '(_ any)))) (if (and as336b@ls/false (apply (lambda (as336d@id) (as2eb5@id? as336d@id)) as336b@ls/false)) (apply (lambda (as336f@id) (values as336f@id (cons 'expr (as3072@bless '(void))))) as336b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3369@t)))))))))))) (set! as4b53@as303e@parse-define as303e@parse-define) (set! as3040@parse-define-syntax (lambda (as3371@x) (let ((as3373@t as3371@x)) (let ((as3375@ls/false (as30bc@syntax-dispatch as3373@t '(_ any any)))) (if (and as3375@ls/false (apply (lambda (as3377@id as3378@val) (as2eb5@id? as3377@id)) as3375@ls/false)) (apply (lambda (as337b@id as337c@val) (values as337b@id as337c@val)) as3375@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3373@t)))))) (set! as4b54@as3040@parse-define-syntax as3040@parse-define-syntax) (set! as3042@scheme-stx-hashtable (make-eq-hashtable)) (set! as4b55@as3042@scheme-stx-hashtable as3042@scheme-stx-hashtable) (set! as3044@scheme-stx (lambda (as337f@sym) (or (hashtable-ref as3042@scheme-stx-hashtable as337f@sym '#f) (let ((as3381@subst (as2cac@as2ad5@library-subst (as2cca@as2b11@find-library-by-name '(psyntax system $all))))) (let ((as3383@stx (make-simple-struct 'stx '5 (list as337f@sym as2e39@top-mark* '() '())))) (let ((as3385@stx (let ((as3387@t (assq as337f@sym as3381@subst))) (if as3387@t ((lambda (as3389@x) (let ((as338b@name (car as3389@x)) (as338c@label (cdr as3389@x))) (as2ea1@add-subst (make-simple-struct 'rib '6 (list (list as338b@name) (list as2e39@top-mark*) (list as338c@label) '#f '#f)) as3383@stx))) as3387@t) as3383@stx)))) (begin (hashtable-set! as3042@scheme-stx-hashtable as337f@sym as3385@stx) as3385@stx))))))) (set! as4b56@as3044@scheme-stx as3044@scheme-stx) (set! as3046@lexical-var car) (set! as4b57@as3046@lexical-var as3046@lexical-var) (set! as3048@lexical-mutable? cdr) (set! as4b58@as3048@lexical-mutable? as3048@lexical-mutable?) (set! as304a@set-lexical-mutable! set-cdr!) (set! as4b59@as304a@set-lexical-mutable! as304a@set-lexical-mutable!) (set! as304c@add-lexical (lambda (as338f@lab as3390@lex as3391@r) (cons (cons* as338f@lab 'lexical as3390@lex '#f) as3391@r))) (set! as4b5a@as304c@add-lexical as304c@add-lexical) (set! as304e@add-lexicals (lambda (as3395@lab* as3396@lex* as3397@r) (if (null? as3395@lab*) as3397@r (as304e@add-lexicals (cdr as3395@lab*) (cdr as3396@lex*) (as304c@add-lexical (car as3395@lab*) (car as3396@lex*) as3397@r))))) (set! as4b5b@as304e@add-lexicals as304e@add-lexicals) (set! as3050@letrec-helper (lambda (as339b@e as339c@r as339d@mr as339e@build) (let ((as33a3@t as339b@e)) (let ((as33a5@ls/false (as30bc@syntax-dispatch as33a3@t '(_ #(each (any any)) any . each-any)))) (if as33a5@ls/false (apply (lambda (as33a7@lhs* as33a8@rhs* as33a9@b as33aa@b*) (if (not (as2ebd@valid-bound-ids? as33a7@lhs*)) (as3076@invalid-fmls-error as339b@e as33a7@lhs*) (let ((as33af@lex* (map as2e3d@gen-lexical as33a7@lhs*)) (as33b0@lab* (map as2e41@gen-label as33a7@lhs*))) (let ((as33b3@rib (as2e75@make-full-rib as33a7@lhs* as33b0@lab*)) (as33b4@r (as304e@add-lexicals as33b0@lab* as33af@lex* as339c@r))) (let ((as33b7@body (as30f4@chi-internal (as2ea1@add-subst as33b3@rib (cons as33a9@b as33aa@b*)) as33b4@r as339d@mr)) (as33b8@rhs* (as30da@chi-expr* (map (lambda (as33bb@x) (as2ea1@add-subst as33b3@rib as33bb@x)) as33a8@rhs*) as33b4@r as339d@mr))) (as339e@build '#f as33af@lex* as33b8@rhs* as33b7@body)))))) as33a5@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as33a3@t)))))) (set! as4b5c@as3050@letrec-helper as3050@letrec-helper) (set! as3052@let-transformer (lambda (as33bd@e as33be@r as33bf@mr) (let ((as33c3@t as33bd@e)) (let ((as33c5@ls/false (as30bc@syntax-dispatch as33c3@t '(_ #(each (any any)) any . each-any)))) (if as33c5@ls/false (apply (lambda (as33c7@lhs* as33c8@rhs* as33c9@b as33ca@b*) (if (not (as2ebd@valid-bound-ids? as33c7@lhs*)) (as3076@invalid-fmls-error as33bd@e as33c7@lhs*) (let ((as33cf@lex* (map as2e3d@gen-lexical as33c7@lhs*)) (as33d0@lab* (map as2e41@gen-label as33c7@lhs*)) (as33d1@rhs* (as30da@chi-expr* as33c8@rhs* as33be@r as33bf@mr))) (let ((as33d5@rib (as2e75@make-full-rib as33c7@lhs* as33d0@lab*)) (as33d6@r (as304e@add-lexicals as33d0@lab* as33cf@lex* as33be@r))) (let ((as33d9@body (as30f4@chi-internal (as2ea1@add-subst as33d5@rib (cons as33c9@b as33ca@b*)) as33d6@r as33bf@mr))) (as2e1d@as2d80@build-let '#f as33cf@lex* as33d1@rhs* as33d9@body)))))) as33c5@ls/false) (let ((as33db@t as33c3@t)) (let ((as33dd@ls/false (as30bc@syntax-dispatch as33db@t '(_ any #(each (any any)) any . each-any)))) (if as33dd@ls/false (apply (lambda (as33df@loop as33e0@lhs* as33e1@rhs* as33e2@b as33e3@b*) (if (not (as2ebd@valid-bound-ids? as33e0@lhs*)) (as3076@invalid-fmls-error as33bd@e as33e0@lhs*) (let ((as33e9@lex* (map as2e3d@gen-lexical as33e0@lhs*)) (as33ea@lab* (map as2e41@gen-label as33e0@lhs*)) (as33eb@rhs* (as30da@chi-expr* as33e1@rhs* as33be@r as33bf@mr)) (as33ec@loop-lex (as2e3d@gen-lexical as33df@loop)) (as33ed@loop-lab (as2e41@gen-label as33df@loop))) (let ((as33f3@loop-rib (as2e75@make-full-rib (list as33df@loop) (list as33ed@loop-lab))) (as33f4@rib (as2e75@make-full-rib as33e0@lhs* as33ea@lab*)) (as33f5@r (as304e@add-lexicals (cons as33ed@loop-lab as33ea@lab*) (cons as33ec@loop-lex as33e9@lex*) as33be@r))) (let ((as33f9@body (as30f4@chi-internal (as2ea1@add-subst as33f3@loop-rib (as2ea1@add-subst as33f4@rib (cons as33e2@b as33e3@b*))) as33f5@r as33bf@mr))) (as2e1e@as2d82@build-named-let '#f as33ec@loop-lex as33e9@lex* as33eb@rhs* as33f9@body)))))) as33dd@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as33db@t))))))))) (set! as4b5d@as3052@let-transformer as3052@let-transformer) (set! as3054@letrec-transformer (lambda (as33fb@e as33fc@r as33fd@mr) (as3050@letrec-helper as33fb@e as33fc@r as33fd@mr as2e1c@as2d7e@build-letrec))) (set! as4b5e@as3054@letrec-transformer as3054@letrec-transformer) (set! as3056@letrec*-transformer (lambda (as3401@e as3402@r as3403@mr) (as3050@letrec-helper as3401@e as3402@r as3403@mr as2e1f@as2d84@build-letrec*))) (set! as4b5f@as3056@letrec*-transformer as3056@letrec*-transformer) (set! as3058@fluid-let-syntax-transformer (lambda (as3407@e as3408@r as3409@mr) (letrec* ((as340e@lookup (lambda (as3421@x) (or (as2ecb@id->label as3421@x) (as319c@syntax-violation '#f '"unbound identifier" as3407@e as3421@x))))) (let ((as340f@t as3407@e)) (let ((as3411@ls/false (as30bc@syntax-dispatch as340f@t '(_ #(each (any any)) any . each-any)))) (if as3411@ls/false (apply (lambda (as3413@lhs* as3414@rhs* as3415@b as3416@b*) (if (not (as2ebd@valid-bound-ids? as3413@lhs*)) (as3076@invalid-fmls-error as3407@e as3413@lhs*) (let ((as341b@lab* (map as340e@lookup as3413@lhs*)) (as341c@rhs* (map (lambda (as341f@x) (as2eed@make-eval-transformer (as3116@expand-transformer as341f@x as3409@mr))) as3414@rhs*))) (as30f4@chi-internal (cons as3415@b as3416@b*) (append (map cons as341b@lab* as341c@rhs*) as3408@r) (append (map cons as341b@lab* as341c@rhs*) as3409@mr))))) as3411@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as340f@t))))))) (set! as4b60@as3058@fluid-let-syntax-transformer as3058@fluid-let-syntax-transformer) (set! as305a@type-descriptor-transformer (lambda (as3423@e as3424@r as3425@mr) (let ((as3429@t as3423@e)) (let ((as342b@ls/false (as30bc@syntax-dispatch as3429@t '(_ any)))) (if (and as342b@ls/false (apply (lambda (as342d@id) (as2eb5@id? as342d@id)) as342b@ls/false)) (apply (lambda (as342f@id) (let ((as3431@lab (as2ecb@id->label as342f@id))) (let ((as3433@b (as2ecd@label->binding as3431@lab as3424@r))) (let ((as3435@type (as2ed1@binding-type as3433@b))) (begin (if (not as3431@lab) (as2ed5@raise-unbound-error as342f@id) (void)) (if (not (and (eq? as3435@type '$rtd) (not (list? (as2ed3@binding-value as3433@b))))) (as319c@syntax-violation '#f '"not a record type" as3423@e) (void)) (list 'quote (as2ed3@binding-value as3433@b))))))) as342b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3429@t)))))) (set! as4b61@as305a@type-descriptor-transformer as305a@type-descriptor-transformer) (set! as305c@record-type-descriptor-transformer (lambda (as3437@e as3438@r as3439@mr) (let ((as343d@t as3437@e)) (let ((as343f@ls/false (as30bc@syntax-dispatch as343d@t '(_ any)))) (if (and as343f@ls/false (apply (lambda (as3441@id) (as2eb5@id? as3441@id)) as343f@ls/false)) (apply (lambda (as3443@id) (let ((as3445@lab (as2ecb@id->label as3443@id))) (let ((as3447@b (as2ecd@label->binding as3445@lab as3438@r))) (let ((as3449@type (as2ed1@binding-type as3447@b))) (begin (if (not as3445@lab) (as2ed5@raise-unbound-error as3443@id) (void)) (if (not (and (eq? as3449@type '$rtd) (list? (as2ed3@binding-value as3447@b)))) (as319c@syntax-violation '#f '"not a record type" as3437@e) (void)) (as30de@chi-expr (car (as2ed3@binding-value as3447@b)) as3438@r as3439@mr)))))) as343f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as343d@t)))))) (set! as4b62@as305c@record-type-descriptor-transformer as305c@record-type-descriptor-transformer) (set! as305e@record-constructor-descriptor-transformer (lambda (as344b@e as344c@r as344d@mr) (let ((as3451@t as344b@e)) (let ((as3453@ls/false (as30bc@syntax-dispatch as3451@t '(_ any)))) (if (and as3453@ls/false (apply (lambda (as3455@id) (as2eb5@id? as3455@id)) as3453@ls/false)) (apply (lambda (as3457@id) (let ((as3459@lab (as2ecb@id->label as3457@id))) (let ((as345b@b (as2ecd@label->binding as3459@lab as344c@r))) (let ((as345d@type (as2ed1@binding-type as345b@b))) (begin (if (not as3459@lab) (as2ed5@raise-unbound-error as3457@id) (void)) (if (not (and (eq? as345d@type '$rtd) (list? (as2ed3@binding-value as345b@b)))) (as319c@syntax-violation '#f '"invalid type" as344b@e) (void)) (as30de@chi-expr (cadr (as2ed3@binding-value as345b@b)) as344c@r as344d@mr)))))) as3453@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3451@t)))))) (set! as4b63@as305e@record-constructor-descriptor-transformer as305e@record-constructor-descriptor-transformer) (set! as3060@when-macro (lambda (as345f@e) (let ((as3461@t as345f@e)) (let ((as3463@ls/false (as30bc@syntax-dispatch as3461@t '(_ any any . each-any)))) (if as3463@ls/false (apply (lambda (as3465@test as3466@e as3467@e*) (as3072@bless (list 'if as3465@test (cons 'begin (cons as3466@e as3467@e*))))) as3463@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3461@t)))))) (set! as4b64@as3060@when-macro as3060@when-macro) (set! as3062@unless-macro (lambda (as346b@e) (let ((as346d@t as346b@e)) (let ((as346f@ls/false (as30bc@syntax-dispatch as346d@t '(_ any any . each-any)))) (if as346f@ls/false (apply (lambda (as3471@test as3472@e as3473@e*) (as3072@bless (list 'if (list 'not as3471@test) (cons 'begin (cons as3472@e as3473@e*))))) as346f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as346d@t)))))) (set! as4b65@as3062@unless-macro as3062@unless-macro) (set! as3064@if-transformer (lambda (as3477@e as3478@r as3479@mr) (let ((as347d@t as3477@e)) (let ((as347f@ls/false (as30bc@syntax-dispatch as347d@t '(_ any any any)))) (if as347f@ls/false (apply (lambda (as3481@e0 as3482@e1 as3483@e2) (list 'if (as30de@chi-expr as3481@e0 as3478@r as3479@mr) (as30de@chi-expr as3482@e1 as3478@r as3479@mr) (as30de@chi-expr as3483@e2 as3478@r as3479@mr))) as347f@ls/false) (let ((as3487@t as347d@t)) (let ((as3489@ls/false (as30bc@syntax-dispatch as3487@t '(_ any any)))) (if as3489@ls/false (apply (lambda (as348b@e0 as348c@e1) (list 'if (as30de@chi-expr as348b@e0 as3478@r as3479@mr) (as30de@chi-expr as348c@e1 as3478@r as3479@mr) (as2e1b@as2d7c@build-void))) as3489@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3487@t))))))))) (set! as4b66@as3064@if-transformer as3064@if-transformer) (set! as3066@and-transformer (lambda (as348f@e as3490@r as3491@mr) (let ((as3495@t as348f@e)) (let ((as3497@ls/false (as30bc@syntax-dispatch as3495@t '(_ . each-any)))) (if as3497@ls/false (apply (lambda (as3499@e*) (cons 'and (as30da@chi-expr* as3499@e* as3490@r as3491@mr))) as3497@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3495@t)))))) (set! as4b67@as3066@and-transformer as3066@and-transformer) (set! as3068@or-transformer (lambda (as349b@e as349c@r as349d@mr) (let ((as34a1@t as349b@e)) (let ((as34a3@ls/false (as30bc@syntax-dispatch as34a1@t '(_ . each-any)))) (if as34a3@ls/false (apply (lambda (as34a5@e*) (cons 'or (as30da@chi-expr* as34a5@e* as349c@r as349d@mr))) as34a3@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as34a1@t)))))) (set! as4b68@as3068@or-transformer as3068@or-transformer) (set! as306a@case-macro (lambda (as34a7@e) (letrec* ((as34aa@build-last (lambda (as34d1@cls) (let ((as34d3@t as34d1@cls)) (let ((as34d5@ls/false (as30bc@syntax-dispatch as34d3@t '(#(scheme-id else) any . each-any)))) (if as34d5@ls/false (apply (lambda (as34d7@e as34d8@e*) (cons 'begin (cons as34d7@e as34d8@e*))) as34d5@ls/false) (let ((as34db@t as34d3@t)) (let ((as34dd@ls/false (as30bc@syntax-dispatch as34db@t '_))) (if as34dd@ls/false (apply (lambda () (as34ac@build-one as34d1@cls '(if #f #f))) as34dd@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as34db@t))))))))) (as34ac@build-one (lambda (as34c3@cls as34c4@k) (let ((as34c7@t as34c3@cls)) (let ((as34c9@ls/false (as30bc@syntax-dispatch as34c7@t '(each-any any . each-any)))) (if as34c9@ls/false (apply (lambda (as34cb@d* as34cc@e as34cd@e*) (list 'if (list 'memv 't (list 'quote as34cb@d*)) (cons 'begin (cons as34cc@e as34cd@e*)) as34c4@k)) as34c9@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as34c7@t))))))) (let ((as34ad@t as34a7@e)) (let ((as34af@ls/false (as30bc@syntax-dispatch as34ad@t '(_ any)))) (if as34af@ls/false (apply (lambda (as34b1@expr) (as3072@bless (cons 'let (cons (list (list 't as34b1@expr)) '((if #f #f)))))) as34af@ls/false) (let ((as34b3@t as34ad@t)) (let ((as34b5@ls/false (as30bc@syntax-dispatch as34b3@t '(_ any any . each-any)))) (if as34b5@ls/false (apply (lambda (as34b7@expr as34b8@cls as34b9@cls*) (as3072@bless (list 'let (list (list 't as34b7@expr)) (let as34c1@f ((as34bd@cls as34b8@cls) (as34be@cls* as34b9@cls*)) (if (null? as34be@cls*) (as34aa@build-last as34bd@cls) (as34ac@build-one as34bd@cls (as34c1@f (car as34be@cls*) (cdr as34be@cls*)))))))) as34b5@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as34b3@t)))))))))) (set! as4b69@as306a@case-macro as306a@case-macro) (set! as306c@quote-transformer (lambda (as34df@e as34e0@r as34e1@mr) (let ((as34e5@t as34df@e)) (let ((as34e7@ls/false (as30bc@syntax-dispatch as34e5@t '(_ any)))) (if as34e7@ls/false (apply (lambda (as34e9@datum) (list 'quote (as2ec9@stx->datum as34e9@datum))) as34e7@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as34e5@t)))))) (set! as4b6a@as306c@quote-transformer as306c@quote-transformer) (set! as306e@case-lambda-transformer (lambda (as34eb@e as34ec@r as34ed@mr) (let ((as34f1@t as34eb@e)) (let ((as34f3@ls/false (as30bc@syntax-dispatch as34f1@t '(_ . #(each (any any . each-any)))))) (if as34f3@ls/false (apply (lambda (as34f5@fmls* as34f6@b* as34f7@b**) (call-with-values (lambda () (as30e6@chi-lambda-clause* as34eb@e as34f5@fmls* (map cons as34f6@b* as34f7@b**) as34ec@r as34ed@mr)) (lambda (as34ff@as34fc as3500@as34fe) (let ((as3503@body* as3500@as34fe) (as3504@fmls* as34ff@as34fc)) (as2e19@as2d4c@build-case-lambda '#f as3504@fmls* as3503@body*))))) as34f3@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as34f1@t)))))) (set! as4b6b@as306e@case-lambda-transformer as306e@case-lambda-transformer) (set! as3070@lambda-transformer (lambda (as3507@e as3508@r as3509@mr) (let ((as350d@t as3507@e)) (let ((as350f@ls/false (as30bc@syntax-dispatch as350d@t '(_ any any . each-any)))) (if as350f@ls/false (apply (lambda (as3511@fmls as3512@b as3513@b*) (call-with-values (lambda () (as30e4@chi-lambda-clause as3507@e as3511@fmls (cons as3512@b as3513@b*) as3508@r as3509@mr)) (lambda (as351b@as3518 as351c@as351a) (let ((as351f@body as351c@as351a) (as3520@fmls as351b@as3518)) (as2e18@as2d4a@build-lambda '#f as3520@fmls as351f@body))))) as350f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as350d@t)))))) (set! as4b6c@as3070@lambda-transformer as3070@lambda-transformer) (set! as3072@bless (lambda (as3523@x) (as2e9d@mkstx (let as3527@f ((as3525@x as3523@x)) (if (as2e81@stx? as3525@x) as3525@x (if (pair? as3525@x) (cons (as3527@f (car as3525@x)) (as3527@f (cdr as3525@x))) (if (symbol? as3525@x) (as3044@scheme-stx as3525@x) (if (vector? as3525@x) (vector-map as3527@f as3525@x) as3525@x))))) '() '() '()))) (set! as4b6d@as3072@bless as3072@bless) (set! as3074@with-syntax-macro (lambda (as3529@e) (let ((as352b@t as3529@e)) (let ((as352d@ls/false (as30bc@syntax-dispatch as352b@t '(_ #(each (any any)) any . each-any)))) (if as352d@ls/false (apply (lambda (as352f@pat* as3530@expr* as3531@b as3532@b*) (let ((as3537@idn* (let as353b@f ((as3539@pat* as352f@pat*)) (if (null? as3539@pat*) '() (call-with-values (lambda () (as30ba@convert-pattern (car as3539@pat*) '())) (lambda (as3541@as353e as3542@as3540) (let ((as3545@idn* as3542@as3540) (as3546@pat as3541@as353e)) (append as3545@idn* (as353b@f (cdr as3539@pat*)))))))))) (begin (as30e2@verify-formals (map car as3537@idn*) as3529@e) (let ((as3549@t* (as318a@generate-temporaries as3530@expr*))) (as3072@bless (list 'let (map list as3549@t* as3530@expr*) (let as354f@f ((as354b@pat* as352f@pat*) (as354c@t* as3549@t*)) (if (null? as354b@pat*) (cons 'begin (cons '#f (cons as3531@b as3532@b*))) (list 'syntax-case (car as354c@t*) '() (list (car as354b@pat*) (as354f@f (cdr as354b@pat*) (cdr as354c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car as354b@pat*)) (car as354c@t*)))))))))))) as352d@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as352b@t)))))) (set! as4b6e@as3074@with-syntax-macro as3074@with-syntax-macro) (set! as3076@invalid-fmls-error (lambda (as3551@stx as3552@fmls) (let ((as3555@t as3552@fmls)) (let ((as3557@ls/false (as30bc@syntax-dispatch as3555@t '#(each+ any () any)))) (if as3557@ls/false (apply (lambda (as3559@id* as355a@last) (let as355f@f ((as355d@id* (if (as2eb5@id? as355a@last) (cons as355a@last as3559@id*) (if (as2eab@syntax-null? as355a@last) as3559@id* (as319c@syntax-violation '#f '"not an identifier" as3551@stx as355a@last))))) (if (null? as355d@id*) (values) (if (not (as2eb5@id? (car as355d@id*))) (as319c@syntax-violation '#f '"not an identifier" as3551@stx (car as355d@id*)) (begin (as355f@f (cdr as355d@id*)) (if (as2ec1@bound-id-member? (car as355d@id*) (cdr as355d@id*)) (as319c@syntax-violation '#f '"duplicate binding" as3551@stx (car as355d@id*)) (void))))))) as3557@ls/false) (let ((as3561@t as3555@t)) (let ((as3563@ls/false (as30bc@syntax-dispatch as3561@t '_))) (if as3563@ls/false (apply (lambda () (as319c@syntax-violation '#f '"malformed binding form" as3551@stx as3552@fmls)) as3563@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3561@t))))))))) (set! as4b6f@as3076@invalid-fmls-error as3076@invalid-fmls-error) (set! as3078@let-macro (lambda (as3565@stx) (let ((as3567@t as3565@stx)) (let ((as3569@ls/false (as30bc@syntax-dispatch as3567@t '(_ #(each (any any)) any . each-any)))) (if as3569@ls/false (apply (lambda (as356b@lhs* as356c@rhs* as356d@b as356e@b*) (if (as2ebd@valid-bound-ids? as356b@lhs*) (as3072@bless (cons (cons 'lambda (cons as356b@lhs* (cons as356d@b as356e@b*))) as356c@rhs*)) (as3076@invalid-fmls-error as3565@stx as356b@lhs*))) as3569@ls/false) (let ((as3573@t as3567@t)) (let ((as3575@ls/false (as30bc@syntax-dispatch as3573@t '(_ any #(each (any any)) any . each-any)))) (if (and as3575@ls/false (apply (lambda (as3577@f as3578@lhs* as3579@rhs* as357a@b as357b@b*) (as2eb5@id? as3577@f)) as3575@ls/false)) (apply (lambda (as3581@f as3582@lhs* as3583@rhs* as3584@b as3585@b*) (if (as2ebd@valid-bound-ids? as3582@lhs*) (as3072@bless (cons (list 'letrec (list (list as3581@f (cons 'lambda (cons as3582@lhs* (cons as3584@b as3585@b*))))) as3581@f) as3583@rhs*)) (as3076@invalid-fmls-error as3565@stx as3582@lhs*))) as3575@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3573@t))))))))) (set! as4b70@as3078@let-macro as3078@let-macro) (set! as307a@let-values-macro (lambda (as358b@stx) (letrec* ((as358e@rename (lambda (as35f3@x as35f4@old* as35f5@new*) (begin (if (not (as2eb5@id? as35f3@x)) (as319c@syntax-violation '#f '"not an indentifier" as358b@stx as35f3@x) (void)) (if (as2ec1@bound-id-member? as35f3@x as35f4@old*) (as319c@syntax-violation '#f '"duplicate binding" as358b@stx as35f3@x) (void)) (let ((as35f9@y (gensym (as31a2@syntax->datum as35f3@x)))) (values as35f9@y (cons as35f3@x as35f4@old*) (cons as35f9@y as35f5@new*)))))) (as3590@rename* (lambda (as35e1@x* as35e2@old* as35e3@new*) (if (null? as35e1@x*) (values '() as35e2@old* as35e3@new*) (call-with-values (lambda () (as358e@rename (car as35e1@x*) as35e2@old* as35e3@new*)) (lambda (as35e7@x as35e8@old* as35e9@new*) (call-with-values (lambda () (as3590@rename* (cdr as35e1@x*) as35e8@old* as35e9@new*)) (lambda (as35ed@x* as35ee@old* as35ef@new*) (values (cons as35e7@x as35ed@x*) as35ee@old* as35ef@new*))))))))) (let ((as3591@t as358b@stx)) (let ((as3593@ls/false (as30bc@syntax-dispatch as3591@t '(_ () any . each-any)))) (if as3593@ls/false (apply (lambda (as3595@b as3596@b*) (cons* (as3072@bless 'let) '() as3595@b as3596@b*)) as3593@ls/false) (let ((as3599@t as3591@t)) (let ((as359b@ls/false (as30bc@syntax-dispatch as3599@t '(_ #(each (any any)) any . each-any)))) (if as359b@ls/false (apply (lambda (as359d@lhs* as359e@rhs* as359f@b as35a0@b*) (as3072@bless (let as35ad@f ((as35a5@lhs* as359d@lhs*) (as35a6@rhs* as359e@rhs*) (as35a7@old* '()) (as35a8@new* '())) (if (null? as35a5@lhs*) (cons 'let (cons (map list as35a7@old* as35a8@new*) (cons as359f@b as35a0@b*))) (let ((as35af@t (car as35a5@lhs*))) (let ((as35b1@ls/false (as30bc@syntax-dispatch as35af@t 'each-any))) (if as35b1@ls/false (apply (lambda (as35b3@x*) (call-with-values (lambda () (as3590@rename* as35b3@x* as35a7@old* as35a8@new*)) (lambda (as35bb@as35b6 as35bc@as35b8 as35bd@as35ba) (let ((as35c1@new* as35bd@as35ba) (as35c2@old* as35bc@as35b8) (as35c3@y* as35bb@as35b6)) (list 'call-with-values (list 'lambda '() (car as35a6@rhs*)) (list 'lambda as35c3@y* (as35ad@f (cdr as35a5@lhs*) (cdr as35a6@rhs*) as35c2@old* as35c1@new*))))))) as35b1@ls/false) (let ((as35c7@t as35af@t)) (let ((as35c9@ls/false (as30bc@syntax-dispatch as35c7@t '#(each+ any () any)))) (if as35c9@ls/false (apply (lambda (as35cb@x* as35cc@x) (call-with-values (lambda () (as358e@rename as35cc@x as35a7@old* as35a8@new*)) (lambda (as35cf@y as35d0@old* as35d1@new*) (call-with-values (lambda () (as3590@rename* as35cb@x* as35d0@old* as35d1@new*)) (lambda (as35d5@y* as35d6@old* as35d7@new*) (list 'call-with-values (list 'lambda '() (car as35a6@rhs*)) (list 'lambda (append as35d5@y* as35cf@y) (as35ad@f (cdr as35a5@lhs*) (cdr as35a6@rhs*) as35d6@old* as35d7@new*)))))))) as35c9@ls/false) (let ((as35db@t as35c7@t)) (let ((as35dd@ls/false (as30bc@syntax-dispatch as35db@t 'any))) (if as35dd@ls/false (apply (lambda (as35df@others) (as319c@syntax-violation '#f '"malformed bindings" as358b@stx as35df@others)) as35dd@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as35db@t)))))))))))))) as359b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3599@t)))))))))) (set! as4b71@as307a@let-values-macro as307a@let-values-macro) (set! as307c@let*-values-macro (lambda (as35fb@stx) (letrec* ((as35fe@check (lambda (as362d@x*) (if (not (null? as362d@x*)) (let ((as362f@x (car as362d@x*))) (begin (if (not (as2eb5@id? as362f@x)) (as319c@syntax-violation '#f '"not an identifier" as35fb@stx as362f@x) (void)) (as35fe@check (cdr as362d@x*)) (if (as2ec1@bound-id-member? as362f@x (cdr as362d@x*)) (as319c@syntax-violation '#f '"duplicate identifier" as35fb@stx as362f@x) (void)))) (void))))) (let ((as35ff@t as35fb@stx)) (let ((as3601@ls/false (as30bc@syntax-dispatch as35ff@t '(_ () any . each-any)))) (if as3601@ls/false (apply (lambda (as3603@b as3604@b*) (cons* (as3072@bless 'let) '() as3603@b as3604@b*)) as3601@ls/false) (let ((as3607@t as35ff@t)) (let ((as3609@ls/false (as30bc@syntax-dispatch as3607@t '(_ #(each (any any)) any . each-any)))) (if as3609@ls/false (apply (lambda (as360b@lhs* as360c@rhs* as360d@b as360e@b*) (as3072@bless (let as3617@f ((as3613@lhs* as360b@lhs*) (as3614@rhs* as360c@rhs*)) (if (null? as3613@lhs*) (cons 'begin (cons as360d@b as360e@b*)) (let ((as3619@t (car as3613@lhs*))) (let ((as361b@ls/false (as30bc@syntax-dispatch as3619@t 'each-any))) (if as361b@ls/false (apply (lambda (as361d@x*) (begin (as35fe@check as361d@x*) (list 'call-with-values (list 'lambda '() (car as3614@rhs*)) (list 'lambda as361d@x* (as3617@f (cdr as3613@lhs*) (cdr as3614@rhs*)))))) as361b@ls/false) (let ((as361f@t as3619@t)) (let ((as3621@ls/false (as30bc@syntax-dispatch as361f@t '#(each+ any () any)))) (if as3621@ls/false (apply (lambda (as3623@x* as3624@x) (begin (as35fe@check (cons as3624@x as3623@x*)) (list 'call-with-values (list 'lambda '() (car as3614@rhs*)) (list 'lambda (append as3623@x* as3624@x) (as3617@f (cdr as3613@lhs*) (cdr as3614@rhs*)))))) as3621@ls/false) (let ((as3627@t as361f@t)) (let ((as3629@ls/false (as30bc@syntax-dispatch as3627@t 'any))) (if as3629@ls/false (apply (lambda (as362b@others) (as319c@syntax-violation '#f '"malformed bindings" as35fb@stx as362b@others)) as3629@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3627@t)))))))))))))) as3609@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3607@t)))))))))) (set! as4b72@as307c@let*-values-macro as307c@let*-values-macro) (set! as307e@trace-lambda-macro (lambda (as3631@stx) (let ((as3633@t as3631@stx)) (let ((as3635@ls/false (as30bc@syntax-dispatch as3633@t '(_ any each-any any . each-any)))) (if as3635@ls/false (apply (lambda (as3637@who as3638@fmls as3639@b as363a@b*) (if (as2ebd@valid-bound-ids? as3638@fmls) (as3072@bless (list 'make-traced-procedure (list 'quote as3637@who) (cons 'lambda (cons as3638@fmls (cons as3639@b as363a@b*))))) (as3076@invalid-fmls-error as3631@stx as3638@fmls))) as3635@ls/false) (let ((as363f@t as3633@t)) (let ((as3641@ls/false (as30bc@syntax-dispatch as363f@t '(_ any #(each+ any () any) any . each-any)))) (if as3641@ls/false (apply (lambda (as3643@who as3644@fmls as3645@last as3646@b as3647@b*) (if (as2ebd@valid-bound-ids? (cons as3645@last as3644@fmls)) (as3072@bless (list 'make-traced-procedure (list 'quote as3643@who) (cons 'lambda (cons (append as3644@fmls as3645@last) (cons as3646@b as3647@b*))))) (as3076@invalid-fmls-error as3631@stx (append as3644@fmls as3645@last)))) as3641@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as363f@t))))))))) (set! as4b73@as307e@trace-lambda-macro as307e@trace-lambda-macro) (set! as3080@trace-define-macro (lambda (as364d@stx) (let ((as364f@t as364d@stx)) (let ((as3651@ls/false (as30bc@syntax-dispatch as364f@t '(_ (any . each-any) any . each-any)))) (if as3651@ls/false (apply (lambda (as3653@who as3654@fmls as3655@b as3656@b*) (if (as2ebd@valid-bound-ids? as3654@fmls) (as3072@bless (list 'define as3653@who (list 'make-traced-procedure (list 'quote as3653@who) (cons 'lambda (cons as3654@fmls (cons as3655@b as3656@b*)))))) (as3076@invalid-fmls-error as364d@stx as3654@fmls))) as3651@ls/false) (let ((as365b@t as364f@t)) (let ((as365d@ls/false (as30bc@syntax-dispatch as365b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if as365d@ls/false (apply (lambda (as365f@who as3660@fmls as3661@last as3662@b as3663@b*) (if (as2ebd@valid-bound-ids? (cons as3661@last as3660@fmls)) (as3072@bless (list 'define as365f@who (list 'make-traced-procedure (list 'quote as365f@who) (cons 'lambda (cons (append as3660@fmls as3661@last) (cons as3662@b as3663@b*)))))) (as3076@invalid-fmls-error as364d@stx (append as3660@fmls as3661@last)))) as365d@ls/false) (let ((as3669@t as365b@t)) (let ((as366b@ls/false (as30bc@syntax-dispatch as3669@t '(_ any any)))) (if as366b@ls/false (apply (lambda (as366d@who as366e@expr) (if (as2eb5@id? as366d@who) (as3072@bless (list 'define as366d@who (list 'let (list (list 'v as366e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote as366d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (as319c@syntax-violation '#f '"invalid name" as364d@stx))) as366b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3669@t)))))))))))) (set! as4b74@as3080@trace-define-macro as3080@trace-define-macro) (set! as3082@trace-define-syntax-macro (lambda (as3671@stx) (let ((as3673@t as3671@stx)) (let ((as3675@ls/false (as30bc@syntax-dispatch as3673@t '(_ any any)))) (if as3675@ls/false (apply (lambda (as3677@who as3678@expr) (if (as2eb5@id? as3677@who) (as3072@bless (list 'define-syntax as3677@who (list 'make-traced-macro (list 'quote as3677@who) as3678@expr))) (as319c@syntax-violation '#f '"invalid name" as3671@stx))) as3675@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3673@t)))))) (set! as4b75@as3082@trace-define-syntax-macro as3082@trace-define-syntax-macro) (set! as3084@trace-let/rec-syntax (lambda (as367b@who) (lambda (as367d@stx) (let ((as367f@t as367d@stx)) (let ((as3681@ls/false (as30bc@syntax-dispatch as367f@t '(_ #(each (any any)) any . each-any)))) (if as3681@ls/false (apply (lambda (as3683@lhs* as3684@rhs* as3685@b as3686@b*) (if (as2ebd@valid-bound-ids? as3683@lhs*) (let ((as368b@rhs* (map (lambda (as368d@lhs as368e@rhs) (list 'make-traced-macro (list 'quote as368d@lhs) as368e@rhs)) as3683@lhs* as3684@rhs*))) (as3072@bless (cons as367b@who (cons (map list as3683@lhs* as368b@rhs*) (cons as3685@b as3686@b*))))) (as3076@invalid-fmls-error as367d@stx as3683@lhs*))) as3681@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as367f@t))))))) (set! as4b76@as3084@trace-let/rec-syntax as3084@trace-let/rec-syntax) (set! as3086@trace-let-syntax-macro (as3084@trace-let/rec-syntax 'let-syntax)) (set! as4b77@as3086@trace-let-syntax-macro as3086@trace-let-syntax-macro) (set! as3088@trace-letrec-syntax-macro (as3084@trace-let/rec-syntax 'letrec-syntax)) (set! as4b78@as3088@trace-letrec-syntax-macro as3088@trace-letrec-syntax-macro) (set! as308a@guard-macro (lambda (as3691@x) (letrec* ((as3694@gen-clauses (lambda (as36ab@con as36ac@outerk as36ad@clause*) (letrec* ((as36b2@f (lambda (as36eb@x as36ec@k) (let ((as36ef@t as36eb@x)) (let ((as36f1@ls/false (as30bc@syntax-dispatch as36ef@t '(any #(scheme-id =>) any)))) (if as36f1@ls/false (apply (lambda (as36f3@e as36f4@p) (let ((as36f7@t (gensym))) (list 'let (list (list as36f7@t as36f3@e)) (list 'if as36f7@t (list as36f4@p as36f7@t) as36ec@k)))) as36f1@ls/false) (let ((as36f9@t as36ef@t)) (let ((as36fb@ls/false (as30bc@syntax-dispatch as36f9@t '(any)))) (if as36fb@ls/false (apply (lambda (as36fd@e) (let ((as36ff@t (gensym))) (list 'let (list (list as36ff@t as36fd@e)) (list 'if as36ff@t as36ff@t as36ec@k)))) as36fb@ls/false) (let ((as3701@t as36f9@t)) (let ((as3703@ls/false (as30bc@syntax-dispatch as3701@t '(any any . each-any)))) (if as3703@ls/false (apply (lambda (as3705@e as3706@v as3707@v*) (list 'if as3705@e (cons 'begin (cons as3706@v as3707@v*)) as36ec@k)) as3703@ls/false) (let ((as370b@t as3701@t)) (let ((as370d@ls/false (as30bc@syntax-dispatch as370b@t '_))) (if as370d@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid guard clause" as36eb@x)) as370d@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as370b@t))))))))))))))) (as36b4@f* (lambda (as36c1@x*) (let ((as36c3@t as36c1@x*)) (let ((as36c5@ls/false (as30bc@syntax-dispatch as36c3@t '()))) (if as36c5@ls/false (apply (lambda () (let ((as36c7@g (gensym))) (values (list as36c7@g (list 'lambda '() (list 'raise-continuable as36ab@con))) as36c7@g))) as36c5@ls/false) (let ((as36c9@t as36c3@t)) (let ((as36cb@ls/false (as30bc@syntax-dispatch as36c9@t '((#(scheme-id else) any . each-any))))) (if as36cb@ls/false (apply (lambda (as36cd@e as36ce@e*) (values (cons 'begin (cons as36cd@e as36ce@e*)) '#f)) as36cb@ls/false) (let ((as36d1@t as36c9@t)) (let ((as36d3@ls/false (as30bc@syntax-dispatch as36d1@t '(any . any)))) (if as36d3@ls/false (apply (lambda (as36d5@cls as36d6@cls*) (call-with-values (lambda () (as36b4@f* as36d6@cls*)) (lambda (as36dd@as36da as36de@as36dc) (let ((as36e1@g as36de@as36dc) (as36e2@e as36dd@as36da)) (values (as36b2@f as36d5@cls as36e2@e) as36e1@g))))) as36d3@ls/false) (let ((as36e5@t as36d1@t)) (let ((as36e7@ls/false (as30bc@syntax-dispatch as36e5@t 'any))) (if as36e7@ls/false (apply (lambda (as36e9@others) (as319c@syntax-violation '#f '"invalid guard clause" as36e9@others)) as36e7@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as36e5@t)))))))))))))))) (call-with-values (lambda () (as36b4@f* as36ad@clause*)) (lambda (as36b9@as36b6 as36ba@as36b8) (let ((as36bd@raisek as36ba@as36b8) (as36be@code as36b9@as36b6)) (if as36bd@raisek (list (list 'call/cc (list 'lambda (list as36bd@raisek) (list as36ac@outerk (list 'lambda '() as36be@code))))) (list as36ac@outerk (list 'lambda '() as36be@code)))))))))) (let ((as3695@t as3691@x)) (let ((as3697@ls/false (as30bc@syntax-dispatch as3695@t '(_ (any . each-any) any . each-any)))) (if (and as3697@ls/false (apply (lambda (as3699@con as369a@clause* as369b@b as369c@b*) (as2eb5@id? as3699@con)) as3697@ls/false)) (apply (lambda (as36a1@con as36a2@clause* as36a3@b as36a4@b*) (let ((as36a9@outerk (gensym))) (as3072@bless (list (list 'call/cc (list 'lambda (list as36a9@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list as36a1@con) (as3694@gen-clauses as36a1@con as36a9@outerk as36a2@clause*)) (cons 'lambda (cons '() (cons as36a3@b as36a4@b*))))))))))) as3697@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3695@t))))))) (set! as4b79@as308a@guard-macro as308a@guard-macro) (set! as308c@define-enumeration-macro (lambda (as370f@stx) (letrec* ((as3712@set? (lambda (as372b@x) (or (null? as372b@x) (and (not (memq (car as372b@x) (cdr as372b@x))) (as3712@set? (cdr as372b@x)))))) (as3714@remove-dups (lambda (as3729@ls) (if (null? as3729@ls) '() (cons (car as3729@ls) (as3714@remove-dups (remq (car as3729@ls) (cdr as3729@ls)))))))) (let ((as3715@t as370f@stx)) (let ((as3717@ls/false (as30bc@syntax-dispatch as3715@t '(_ any each-any any)))) (if (and as3717@ls/false (apply (lambda (as3719@name as371a@id* as371b@maker) (and (as2eb5@id? as3719@name) (as2eb5@id? as371b@maker) (for-all as2eb5@id? as371a@id*))) as3717@ls/false)) (apply (lambda (as371f@name as3720@id* as3721@maker) (let ((as3725@name* (as3714@remove-dups (as31a2@syntax->datum as3720@id*))) (as3726@mk (gensym))) (as3072@bless (list 'begin (list 'define as3726@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote as3725@name*)))) (list 'define-syntax as371f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote as3725@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote as371f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax as3721@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote as3721@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote as3725@name*)) (cons 'syntax-violation (cons (list 'quote as3721@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons as3726@mk '('(n* ...))))))))))))) as3717@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3715@t))))))) (set! as4b7a@as308c@define-enumeration-macro as308c@define-enumeration-macro) (set! as308e@time-macro (lambda (as372d@stx) (let ((as372f@t as372d@stx)) (let ((as3731@ls/false (as30bc@syntax-dispatch as372f@t '(_ any)))) (if as3731@ls/false (apply (lambda (as3733@expr) (as3072@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() as3733@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) as3731@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as372f@t)))))) (set! as4b7b@as308e@time-macro as308e@time-macro) (set! as3090@delay-macro (lambda (as3735@stx) (let ((as3737@t as3735@stx)) (let ((as3739@ls/false (as30bc@syntax-dispatch as3737@t '(_ any)))) (if as3739@ls/false (apply (lambda (as373b@expr) (as3072@bless (list 'make-promise (list 'lambda '() as373b@expr)))) as3739@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3737@t)))))) (set! as4b7c@as3090@delay-macro as3090@delay-macro) (set! as3092@assert-macro (lambda (as373d@stx) (let ((as373f@t as373d@stx)) (let ((as3741@ls/false (as30bc@syntax-dispatch as373f@t '(_ any)))) (if as3741@ls/false (apply (lambda (as3743@expr) (let ((as3745@pos (or (as3194@expression-position as373d@stx) (as3194@expression-position as3743@expr)))) (as3072@bless (list 'let (list (list 'x as3743@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote as3743@expr) (list 'quote as3745@pos))))))) as3741@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as373f@t)))))) (set! as4b7d@as3092@assert-macro as3092@assert-macro) (set! as3094@endianness-macro (lambda (as3747@stx) (let ((as3749@t as3747@stx)) (let ((as374b@ls/false (as30bc@syntax-dispatch as3749@t '(_ any)))) (if as374b@ls/false (apply (lambda (as374d@e) (let ((as374f@t (as31a2@syntax->datum as374d@e))) (if (memv as374f@t '(little)) (as3072@bless ''little) (if (memv as374f@t '(big)) (as3072@bless ''big) (as319c@syntax-violation '#f '"endianness must be big or little" as3747@stx))))) as374b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3749@t)))))) (set! as4b7e@as3094@endianness-macro as3094@endianness-macro) (set! as3096@identifier-syntax-macro (lambda (as3751@stx) (let ((as3753@t as3751@stx)) (let ((as3755@ls/false (as30bc@syntax-dispatch as3753@t '(_ any)))) (if as3755@ls/false (apply (lambda (as3757@expr) (as3072@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax as3757@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax as3757@expr) '((syntax (e* ...)))))))))) as3755@ls/false) (let ((as3759@t as3753@t)) (let ((as375b@ls/false (as30bc@syntax-dispatch as3759@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and as375b@ls/false (apply (lambda (as375d@id1 as375e@expr1 as375f@id2 as3760@expr2 as3761@expr3) (and (as2eb5@id? as375d@id1) (as2eb5@id? as375f@id2) (as2eb5@id? as3760@expr2))) as375b@ls/false)) (apply (lambda (as3767@id1 as3768@expr1 as3769@id2 as376a@expr2 as376b@expr3) (as3072@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax as3768@expr1)) (list (list 'set! 'id as376a@expr2) (list 'syntax as376b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons as3768@expr1 '(e* ...))))))))) as375b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3759@t))))))))) (set! as4b7f@as3096@identifier-syntax-macro as3096@identifier-syntax-macro) (set! as3098@do-macro (lambda (as3771@stx) (letrec* ((as3774@bind (lambda (as378b@x) (let ((as378d@t as378b@x)) (let ((as378f@ls/false (as30bc@syntax-dispatch as378d@t '(any any)))) (if as378f@ls/false (apply (lambda (as3791@x as3792@init) (list as3791@x as3792@init as3791@x)) as378f@ls/false) (let ((as3795@t as378d@t)) (let ((as3797@ls/false (as30bc@syntax-dispatch as3795@t '(any any any)))) (if as3797@ls/false (apply (lambda (as3799@x as379a@init as379b@step) (list as3799@x as379a@init as379b@step)) as3797@ls/false) (let ((as379f@t as3795@t)) (let ((as37a1@ls/false (as30bc@syntax-dispatch as379f@t '_))) (if as37a1@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid binding" as3771@stx)) as37a1@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as379f@t))))))))))))) (let ((as3775@t as3771@stx)) (let ((as3777@ls/false (as30bc@syntax-dispatch as3775@t '(_ each-any (any . each-any) . each-any)))) (if as3777@ls/false (apply (lambda (as3779@binding* as377a@test as377b@expr* as377c@command*) (let ((as3781@t (map as3774@bind as3779@binding*))) (let ((as3783@ls/false (as30bc@syntax-dispatch as3781@t '#(each (any any any))))) (if as3783@ls/false (apply (lambda (as3785@x* as3786@init* as3787@step*) (if (as2ebd@valid-bound-ids? as3785@x*) (as3072@bless (list 'letrec (list (list 'loop (list 'lambda as3785@x* (list 'if as377a@test (cons 'begin (cons '(if #f #f) as377b@expr*)) (cons 'begin (append as377c@command* (list (cons 'loop as3787@step*)))))))) (cons 'loop as3786@init*))) (as319c@syntax-violation '#f '"invalid bindings" as3771@stx))) as3783@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3781@t))))) as3777@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3775@t))))))) (set! as4b80@as3098@do-macro as3098@do-macro) (set! as309a@let*-macro (lambda (as37a3@stx) (let ((as37a5@t as37a3@stx)) (let ((as37a7@ls/false (as30bc@syntax-dispatch as37a5@t '(_ #(each (any any)) any . each-any)))) (if (and as37a7@ls/false (apply (lambda (as37a9@lhs* as37aa@rhs* as37ab@b as37ac@b*) (for-all as2eb5@id? as37a9@lhs*)) as37a7@ls/false)) (apply (lambda (as37b1@lhs* as37b2@rhs* as37b3@b as37b4@b*) (as3072@bless (let as37bb@f ((as37b9@x* (map list as37b1@lhs* as37b2@rhs*))) (if (null? as37b9@x*) (cons 'let (cons '() (cons as37b3@b as37b4@b*))) (list 'let (list (car as37b9@x*)) (as37bb@f (cdr as37b9@x*))))))) as37a7@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as37a5@t)))))) (set! as4b81@as309a@let*-macro as309a@let*-macro) (set! as309c@or-macro (lambda (as37bd@stx) (let ((as37bf@t as37bd@stx)) (let ((as37c1@ls/false (as30bc@syntax-dispatch as37bf@t '(_)))) (if as37c1@ls/false (apply (lambda () '#f) as37c1@ls/false) (let ((as37c3@t as37bf@t)) (let ((as37c5@ls/false (as30bc@syntax-dispatch as37c3@t '(_ any . each-any)))) (if as37c5@ls/false (apply (lambda (as37c7@e as37c8@e*) (as3072@bless (let as37cf@f ((as37cb@e as37c7@e) (as37cc@e* as37c8@e*)) (if (null? as37cc@e*) (list 'begin '#f as37cb@e) (list 'let (list (list 't as37cb@e)) (list 'if 't 't (as37cf@f (car as37cc@e*) (cdr as37cc@e*)))))))) as37c5@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as37c3@t))))))))) (set! as4b82@as309c@or-macro as309c@or-macro) (set! as309e@and-macro (lambda (as37d1@stx) (let ((as37d3@t as37d1@stx)) (let ((as37d5@ls/false (as30bc@syntax-dispatch as37d3@t '(_)))) (if as37d5@ls/false (apply (lambda () '#t) as37d5@ls/false) (let ((as37d7@t as37d3@t)) (let ((as37d9@ls/false (as30bc@syntax-dispatch as37d7@t '(_ any . each-any)))) (if as37d9@ls/false (apply (lambda (as37db@e as37dc@e*) (as3072@bless (let as37e3@f ((as37df@e as37db@e) (as37e0@e* as37dc@e*)) (if (null? as37e0@e*) (list 'begin '#f as37df@e) (cons 'if (cons as37df@e (cons (as37e3@f (car as37e0@e*) (cdr as37e0@e*)) '(#f)))))))) as37d9@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as37d7@t))))))))) (set! as4b83@as309e@and-macro as309e@and-macro) (set! as30a0@cond-macro (lambda (as37e5@stx) (let ((as37e7@t as37e5@stx)) (let ((as37e9@ls/false (as30bc@syntax-dispatch as37e7@t '(_ any . each-any)))) (if as37e9@ls/false (apply (lambda (as37eb@cls as37ec@cls*) (as3072@bless (let as37f3@f ((as37ef@cls as37eb@cls) (as37f0@cls* as37ec@cls*)) (if (null? as37f0@cls*) (let ((as37f5@t as37ef@cls)) (let ((as37f7@ls/false (as30bc@syntax-dispatch as37f5@t '(#(scheme-id else) any . each-any)))) (if as37f7@ls/false (apply (lambda (as37f9@e as37fa@e*) (cons 'begin (cons as37f9@e as37fa@e*))) as37f7@ls/false) (let ((as37fd@t as37f5@t)) (let ((as37ff@ls/false (as30bc@syntax-dispatch as37fd@t '(any #(scheme-id =>) any)))) (if as37ff@ls/false (apply (lambda (as3801@e as3802@p) (list 'let (list (list 't as3801@e)) (list 'if 't (cons as3802@p '(t))))) as37ff@ls/false) (let ((as3805@t as37fd@t)) (let ((as3807@ls/false (as30bc@syntax-dispatch as3805@t '(any)))) (if as3807@ls/false (apply (lambda (as3809@e) (cons 'or (cons as3809@e '((if #f #f))))) as3807@ls/false) (let ((as380b@t as3805@t)) (let ((as380d@ls/false (as30bc@syntax-dispatch as380b@t '(any . each-any)))) (if as380d@ls/false (apply (lambda (as380f@e as3810@e*) (list 'if as380f@e (cons 'begin as3810@e*))) as380d@ls/false) (let ((as3813@t as380b@t)) (let ((as3815@ls/false (as30bc@syntax-dispatch as3813@t '_))) (if as3815@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid last clause" as37e5@stx)) as3815@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3813@t)))))))))))))))) (let ((as3817@t as37ef@cls)) (let ((as3819@ls/false (as30bc@syntax-dispatch as3817@t '(#(scheme-id else) any . each-any)))) (if as3819@ls/false (apply (lambda (as381b@e as381c@e*) (as319c@syntax-violation '#f '"incorrect position of keyword else" as37e5@stx)) as3819@ls/false) (let ((as381f@t as3817@t)) (let ((as3821@ls/false (as30bc@syntax-dispatch as381f@t '(any #(scheme-id =>) any)))) (if as3821@ls/false (apply (lambda (as3823@e as3824@p) (list 'let (list (list 't as3823@e)) (list 'if 't (cons as3824@p '(t)) (as37f3@f (car as37f0@cls*) (cdr as37f0@cls*))))) as3821@ls/false) (let ((as3827@t as381f@t)) (let ((as3829@ls/false (as30bc@syntax-dispatch as3827@t '(any)))) (if as3829@ls/false (apply (lambda (as382b@e) (list 'or as382b@e (as37f3@f (car as37f0@cls*) (cdr as37f0@cls*)))) as3829@ls/false) (let ((as382d@t as3827@t)) (let ((as382f@ls/false (as30bc@syntax-dispatch as382d@t '(any . each-any)))) (if as382f@ls/false (apply (lambda (as3831@e as3832@e*) (list 'if as3831@e (cons 'begin as3832@e*) (as37f3@f (car as37f0@cls*) (cdr as37f0@cls*)))) as382f@ls/false) (let ((as3835@t as382d@t)) (let ((as3837@ls/false (as30bc@syntax-dispatch as3835@t '_))) (if as3837@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid last clause" as37e5@stx)) as3837@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3835@t)))))))))))))))))))) as37e9@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as37e7@t)))))) (set! as4b84@as30a0@cond-macro as30a0@cond-macro) (set! as30a2@do-include (lambda (as3839@stx as383a@id as383b@filename) (let ((as383f@filename (as2ec9@stx->datum as383b@filename))) (begin (if (not (and (string? as383f@filename) (as2eb5@id? as383a@id))) (as319c@syntax-violation '#f '"invalid syntax" as3839@stx) (void)) (cons (as3072@bless 'begin) (with-input-from-file as383f@filename (lambda () (let as3843@f ((as3841@ls '())) (let ((as3845@x (as29f7@as28c7@read-annotated))) (if (eof-object? as3845@x) (reverse as3841@ls) (as3843@f (cons (as2e95@datum->stx as383a@id as3845@x) as3841@ls)))))))))))) (set! as4b85@as30a2@do-include as30a2@do-include) (set! as30a4@include-macro (lambda (as3847@e) (let ((as3849@t as3847@e)) (let ((as384b@ls/false (as30bc@syntax-dispatch as3849@t '(any any)))) (if as384b@ls/false (apply (lambda (as384d@id as384e@filename) (as30a2@do-include as3847@e as384d@id as384e@filename)) as384b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3849@t)))))) (set! as4b86@as30a4@include-macro as30a4@include-macro) (set! as30a6@include-into-macro (lambda (as3851@e) (let ((as3853@t as3851@e)) (let ((as3855@ls/false (as30bc@syntax-dispatch as3853@t '(_ any any)))) (if as3855@ls/false (apply (lambda (as3857@id as3858@filename) (as30a2@do-include as3851@e as3857@id as3858@filename)) as3855@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3853@t)))))) (set! as4b87@as30a6@include-into-macro as30a6@include-into-macro) (set! as30a8@syntax-rules-macro (lambda (as385b@e) (let ((as385d@t as385b@e)) (let ((as385f@ls/false (as30bc@syntax-dispatch as385d@t '(_ each-any . #(each (any any)))))) (if as385f@ls/false (apply (lambda (as3861@lits as3862@pat* as3863@tmp*) (begin (as30c2@verify-literals as3861@lits as385b@e) (as3072@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons as3861@lits (map (lambda (as3867@pat as3868@tmp) (let ((as386b@t as3867@pat)) (let ((as386d@ls/false (as30bc@syntax-dispatch as386b@t '(_ . any)))) (if as386d@ls/false (apply (lambda (as386f@rest) (list (cons 'g as386f@rest) (list 'syntax as3868@tmp))) as386d@ls/false) (let ((as3871@t as386b@t)) (let ((as3873@ls/false (as30bc@syntax-dispatch as3871@t '_))) (if as3873@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid syntax-rules pattern" as385b@e as3867@pat)) as3873@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3871@t)))))))) as3862@pat* as3863@tmp*)))))))) as385f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as385d@t)))))) (set! as4b88@as30a8@syntax-rules-macro as30a8@syntax-rules-macro) (set! as30aa@quasiquote-macro (letrec* ((as3876@datum (lambda (as3977@x) (list (as3044@scheme-stx 'quote) (as2e9d@mkstx as3977@x '() '() '())))) (as3892@quasicons* (lambda (as396f@x as3970@y) (let as3975@f ((as3973@x as396f@x)) (if (null? as3973@x) as3970@y (as3894@quasicons (car as3973@x) (as3975@f (cdr as3973@x))))))) (as3894@quasicons (lambda (as3949@x as394a@y) (let ((as394d@t as394a@y)) (let ((as394f@ls/false (as30bc@syntax-dispatch as394d@t '(#(scheme-id quote) any)))) (if as394f@ls/false (apply (lambda (as3951@dy) (let ((as3953@t as3949@x)) (let ((as3955@ls/false (as30bc@syntax-dispatch as3953@t '(#(scheme-id quote) any)))) (if as3955@ls/false (apply (lambda (as3957@dx) (list (as3044@scheme-stx 'quote) (cons as3957@dx as3951@dy))) as3955@ls/false) (let ((as3959@t as3953@t)) (let ((as395b@ls/false (as30bc@syntax-dispatch as3959@t '_))) (if as395b@ls/false (apply (lambda () (let ((as395d@t as3951@dy)) (let ((as395f@ls/false (as30bc@syntax-dispatch as395d@t '()))) (if as395f@ls/false (apply (lambda () (list (as3044@scheme-stx 'list) as3949@x)) as395f@ls/false) (let ((as3961@t as395d@t)) (let ((as3963@ls/false (as30bc@syntax-dispatch as3961@t '_))) (if as3963@ls/false (apply (lambda () (list (as3044@scheme-stx 'cons) as3949@x as394a@y)) as3963@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3961@t)))))))) as395b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3959@t)))))))) as394f@ls/false) (let ((as3965@t as394d@t)) (let ((as3967@ls/false (as30bc@syntax-dispatch as3965@t '(#(scheme-id list) . each-any)))) (if as3967@ls/false (apply (lambda (as3969@stuff) (cons* (as3044@scheme-stx 'list) as3949@x as3969@stuff)) as3967@ls/false) (let ((as396b@t as3965@t)) (let ((as396d@ls/false (as30bc@syntax-dispatch as396b@t '_))) (if as396d@ls/false (apply (lambda () (list (as3044@scheme-stx 'cons) as3949@x as394a@y)) as396d@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as396b@t)))))))))))) (as3896@quasiappend (lambda (as392f@x as3930@y) (let ((as3933@ls (let as3937@f ((as3935@x as392f@x)) (if (null? as3935@x) (let ((as3939@t as3930@y)) (let ((as393b@ls/false (as30bc@syntax-dispatch as3939@t '(#(scheme-id quote) ())))) (if as393b@ls/false (apply (lambda () '()) as393b@ls/false) (let ((as393d@t as3939@t)) (let ((as393f@ls/false (as30bc@syntax-dispatch as393d@t '_))) (if as393f@ls/false (apply (lambda () (list as3930@y)) as393f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as393d@t))))))) (let ((as3941@t (car as3935@x))) (let ((as3943@ls/false (as30bc@syntax-dispatch as3941@t '(#(scheme-id quote) ())))) (if as3943@ls/false (apply (lambda () (as3937@f (cdr as3935@x))) as3943@ls/false) (let ((as3945@t as3941@t)) (let ((as3947@ls/false (as30bc@syntax-dispatch as3945@t '_))) (if as3947@ls/false (apply (lambda () (cons (car as3935@x) (as3937@f (cdr as3935@x)))) as3947@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3945@t))))))))))) (if (null? as3933@ls) (list (as3044@scheme-stx 'quote) '()) (if (null? (cdr as3933@ls)) (car as3933@ls) (cons* (as3044@scheme-stx 'append) as3933@ls)))))) (as3898@quasivector (lambda (as38fd@x) (let ((as38ff@pat-x as38fd@x)) (let ((as3901@t as38ff@pat-x)) (let ((as3903@ls/false (as30bc@syntax-dispatch as3901@t '(#(scheme-id quote) each-any)))) (if as3903@ls/false (apply (lambda (as3905@x*) (list (as3044@scheme-stx 'quote) (list->vector as3905@x*))) as3903@ls/false) (let ((as3907@t as3901@t)) (let ((as3909@ls/false (as30bc@syntax-dispatch as3907@t '_))) (if as3909@ls/false (apply (lambda () (let as3911@f ((as390b@x as38fd@x) (as390c@k (lambda (as390f@ls) (cons* (as3044@scheme-stx 'vector) as390f@ls)))) (let ((as3913@t as390b@x)) (let ((as3915@ls/false (as30bc@syntax-dispatch as3913@t '(#(scheme-id quote) each-any)))) (if as3915@ls/false (apply (lambda (as3917@x*) (as390c@k (map (lambda (as3919@x) (list (as3044@scheme-stx 'quote) as3919@x)) as3917@x*))) as3915@ls/false) (let ((as391b@t as3913@t)) (let ((as391d@ls/false (as30bc@syntax-dispatch as391b@t '(#(scheme-id list) . each-any)))) (if as391d@ls/false (apply (lambda (as391f@x*) (as390c@k as391f@x*)) as391d@ls/false) (let ((as3921@t as391b@t)) (let ((as3923@ls/false (as30bc@syntax-dispatch as3921@t '(#(scheme-id cons) any any)))) (if as3923@ls/false (apply (lambda (as3925@x as3926@y) (as3911@f as3926@y (lambda (as3929@ls) (as390c@k (cons as3925@x as3929@ls))))) as3923@ls/false) (let ((as392b@t as3921@t)) (let ((as392d@ls/false (as30bc@syntax-dispatch as392b@t '_))) (if as392d@ls/false (apply (lambda () (list (as3044@scheme-stx 'list->vector) as38ff@pat-x)) as392d@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as392b@t))))))))))))))) as3909@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3907@t)))))))))) (as389a@vquasi (lambda (as38db@p as38dc@lev) (let ((as38df@t as38db@p)) (let ((as38e1@ls/false (as30bc@syntax-dispatch as38df@t '(any . any)))) (if as38e1@ls/false (apply (lambda (as38e3@p as38e4@q) (let ((as38e7@t as38e3@p)) (let ((as38e9@ls/false (as30bc@syntax-dispatch as38e7@t '(#(scheme-id unquote) . each-any)))) (if as38e9@ls/false (apply (lambda (as38eb@p) (if (= as38dc@lev '0) (as3892@quasicons* as38eb@p (as389a@vquasi as38e4@q as38dc@lev)) (as3894@quasicons (as3894@quasicons (as3876@datum 'unquote) (as389c@quasi as38eb@p (- as38dc@lev '1))) (as389a@vquasi as38e4@q as38dc@lev)))) as38e9@ls/false) (let ((as38ed@t as38e7@t)) (let ((as38ef@ls/false (as30bc@syntax-dispatch as38ed@t '(#(scheme-id unquote-splicing) . each-any)))) (if as38ef@ls/false (apply (lambda (as38f1@p) (if (= as38dc@lev '0) (as3896@quasiappend as38f1@p (as389a@vquasi as38e4@q as38dc@lev)) (as3894@quasicons (as3894@quasicons (as3876@datum 'unquote-splicing) (as389c@quasi as38f1@p (- as38dc@lev '1))) (as389a@vquasi as38e4@q as38dc@lev)))) as38ef@ls/false) (let ((as38f3@t as38ed@t)) (let ((as38f5@ls/false (as30bc@syntax-dispatch as38f3@t 'any))) (if as38f5@ls/false (apply (lambda (as38f7@p) (as3894@quasicons (as389c@quasi as38f7@p as38dc@lev) (as389a@vquasi as38e4@q as38dc@lev))) as38f5@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as38f3@t))))))))))) as38e1@ls/false) (let ((as38f9@t as38df@t)) (let ((as38fb@ls/false (as30bc@syntax-dispatch as38f9@t '()))) (if as38fb@ls/false (apply (lambda () (list (as3044@scheme-stx 'quote) '())) as38fb@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as38f9@t))))))))) (as389c@quasi (lambda (as38a5@p as38a6@lev) (let ((as38a9@t as38a5@p)) (let ((as38ab@ls/false (as30bc@syntax-dispatch as38a9@t '(#(scheme-id unquote) any)))) (if as38ab@ls/false (apply (lambda (as38ad@p) (if (= as38a6@lev '0) as38ad@p (as3894@quasicons (as3876@datum 'unquote) (as389c@quasi (list as38ad@p) (- as38a6@lev '1))))) as38ab@ls/false) (let ((as38af@t as38a9@t)) (let ((as38b1@ls/false (as30bc@syntax-dispatch as38af@t '((#(scheme-id unquote) . each-any) . any)))) (if as38b1@ls/false (apply (lambda (as38b3@p as38b4@q) (if (= as38a6@lev '0) (as3892@quasicons* as38b3@p (as389c@quasi as38b4@q as38a6@lev)) (as3894@quasicons (as3894@quasicons (as3876@datum 'unquote) (as389c@quasi as38b3@p (- as38a6@lev '1))) (as389c@quasi as38b4@q as38a6@lev)))) as38b1@ls/false) (let ((as38b7@t as38af@t)) (let ((as38b9@ls/false (as30bc@syntax-dispatch as38b7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if as38b9@ls/false (apply (lambda (as38bb@p as38bc@q) (if (= as38a6@lev '0) (as3896@quasiappend as38bb@p (as389c@quasi as38bc@q as38a6@lev)) (as3894@quasicons (as3894@quasicons (as3876@datum 'unquote-splicing) (as389c@quasi as38bb@p (- as38a6@lev '1))) (as389c@quasi as38bc@q as38a6@lev)))) as38b9@ls/false) (let ((as38bf@t as38b7@t)) (let ((as38c1@ls/false (as30bc@syntax-dispatch as38bf@t '(#(scheme-id quasiquote) any)))) (if as38c1@ls/false (apply (lambda (as38c3@p) (as3894@quasicons (as3876@datum 'quasiquote) (as389c@quasi (list as38c3@p) (+ as38a6@lev '1)))) as38c1@ls/false) (let ((as38c5@t as38bf@t)) (let ((as38c7@ls/false (as30bc@syntax-dispatch as38c5@t '(any . any)))) (if as38c7@ls/false (apply (lambda (as38c9@p as38ca@q) (as3894@quasicons (as389c@quasi as38c9@p as38a6@lev) (as389c@quasi as38ca@q as38a6@lev))) as38c7@ls/false) (let ((as38cd@t as38c5@t)) (let ((as38cf@ls/false (as30bc@syntax-dispatch as38cd@t '#(vector each-any)))) (if (and as38cf@ls/false (apply (lambda (as38d1@x) (not (as2e81@stx? as38d1@x))) as38cf@ls/false)) (apply (lambda (as38d3@x) (as3898@quasivector (as389a@vquasi as38d3@x as38a6@lev))) as38cf@ls/false) (let ((as38d5@t as38cd@t)) (let ((as38d7@ls/false (as30bc@syntax-dispatch as38d5@t 'any))) (if as38d7@ls/false (apply (lambda (as38d9@p) (list (as3044@scheme-stx 'quote) as38d9@p)) as38d7@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as38d5@t))))))))))))))))))))))))) (lambda (as389d@x) (let ((as389f@t as389d@x)) (let ((as38a1@ls/false (as30bc@syntax-dispatch as389f@t '(_ any)))) (if as38a1@ls/false (apply (lambda (as38a3@e) (as389c@quasi as38a3@e '0)) as38a1@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as389f@t))))))) (set! as4b89@as30aa@quasiquote-macro as30aa@quasiquote-macro) (set! as30ac@quasisyntax-macro (letrec* ((as397a@quasi (lambda (as3995@p as3996@lev) (let ((as3999@t as3995@p)) (let ((as399b@ls/false (as30bc@syntax-dispatch as3999@t '(#(scheme-id unsyntax) any)))) (if as399b@ls/false (apply (lambda (as399d@p) (if (= as3996@lev '0) (let ((as399f@g (gensym))) (values (list as399f@g) (list as399d@p) as399f@g)) (call-with-values (lambda () (as397a@quasi as399d@p (- as3996@lev '1))) (lambda (as39a7@as39a2 as39a8@as39a4 as39a9@as39a6) (let ((as39ad@p as39a9@as39a6) (as39ae@rhs* as39a8@as39a4) (as39af@lhs* as39a7@as39a2)) (values as39af@lhs* as39ae@rhs* (list 'unsyntax as39ad@p))))))) as399b@ls/false) (let ((as39b3@t as3999@t)) (let ((as39b5@ls/false (as30bc@syntax-dispatch as39b3@t '#(scheme-id unsyntax)))) (if (and as39b5@ls/false (apply (lambda () (= as3996@lev '0)) as39b5@ls/false)) (apply (lambda () (as319c@syntax-violation '#f '"incorrect use of unsyntax" as3995@p)) as39b5@ls/false) (let ((as39b7@t as39b3@t)) (let ((as39b9@ls/false (as30bc@syntax-dispatch as39b7@t '((#(scheme-id unsyntax) . each-any) . any)))) (if as39b9@ls/false (apply (lambda (as39bb@p* as39bc@q) (call-with-values (lambda () (as397a@quasi as39bc@q as3996@lev)) (lambda (as39c5@as39c0 as39c6@as39c2 as39c7@as39c4) (let ((as39cb@q as39c7@as39c4) (as39cc@rhs* as39c6@as39c2) (as39cd@lhs* as39c5@as39c0)) (if (= as3996@lev '0) (let ((as39d1@g* (map (lambda (as39d3@x) (gensym)) as39bb@p*))) (values (append as39d1@g* as39cd@lhs*) (append as39bb@p* as39cc@rhs*) (append as39d1@g* as39cb@q))) (call-with-values (lambda () (as397a@quasi as39bb@p* (- as3996@lev '1))) (lambda (as39db@as39d6 as39dc@as39d8 as39dd@as39da) (let ((as39e1@p* as39dd@as39da) (as39e2@rhs2* as39dc@as39d8) (as39e3@lhs2* as39db@as39d6)) (values (append as39e3@lhs2* as39cd@lhs*) (append as39e2@rhs2* as39cc@rhs*) (cons (cons 'unsyntax as39e1@p*) as39cb@q)))))))))) as39b9@ls/false) (let ((as39e7@t as39b7@t)) (let ((as39e9@ls/false (as30bc@syntax-dispatch as39e7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if as39e9@ls/false (apply (lambda (as39eb@p* as39ec@q) (call-with-values (lambda () (as397a@quasi as39ec@q as3996@lev)) (lambda (as39f5@as39f0 as39f6@as39f2 as39f7@as39f4) (let ((as39fb@q as39f7@as39f4) (as39fc@rhs* as39f6@as39f2) (as39fd@lhs* as39f5@as39f0)) (if (= as3996@lev '0) (let ((as3a01@g* (map (lambda (as3a03@x) (gensym)) as39eb@p*))) (values (append (map (lambda (as3a05@g) (cons as3a05@g '(...))) as3a01@g*) as39fd@lhs*) (append as39eb@p* as39fc@rhs*) (append (apply append (map (lambda (as3a07@g) (cons as3a07@g '(...))) as3a01@g*)) as39fb@q))) (call-with-values (lambda () (as397a@quasi as39eb@p* (- as3996@lev '1))) (lambda (as3a0f@as3a0a as3a10@as3a0c as3a11@as3a0e) (let ((as3a15@p* as3a11@as3a0e) (as3a16@rhs2* as3a10@as3a0c) (as3a17@lhs2* as3a0f@as3a0a)) (values (append as3a17@lhs2* as39fd@lhs*) (append as3a16@rhs2* as39fc@rhs*) (cons (cons 'unsyntax-splicing as3a15@p*) as39fb@q)))))))))) as39e9@ls/false) (let ((as3a1b@t as39e7@t)) (let ((as3a1d@ls/false (as30bc@syntax-dispatch as3a1b@t '#(scheme-id unsyntax-splicing)))) (if (and as3a1d@ls/false (apply (lambda () (= as3996@lev '0)) as3a1d@ls/false)) (apply (lambda () (as319c@syntax-violation '#f '"incorrect use of unsyntax-splicing" as3995@p)) as3a1d@ls/false) (let ((as3a1f@t as3a1b@t)) (let ((as3a21@ls/false (as30bc@syntax-dispatch as3a1f@t '(#(scheme-id quasisyntax) any)))) (if as3a21@ls/false (apply (lambda (as3a23@p) (call-with-values (lambda () (as397a@quasi as3a23@p (+ as3996@lev '1))) (lambda (as3a2b@as3a26 as3a2c@as3a28 as3a2d@as3a2a) (let ((as3a31@p as3a2d@as3a2a) (as3a32@rhs* as3a2c@as3a28) (as3a33@lhs* as3a2b@as3a26)) (values as3a33@lhs* as3a32@rhs* (list 'quasisyntax as3a31@p)))))) as3a21@ls/false) (let ((as3a37@t as3a1f@t)) (let ((as3a39@ls/false (as30bc@syntax-dispatch as3a37@t '(any . any)))) (if as3a39@ls/false (apply (lambda (as3a3b@p as3a3c@q) (call-with-values (lambda () (as397a@quasi as3a3b@p as3996@lev)) (lambda (as3a4b@as3a40 as3a4c@as3a42 as3a4d@as3a44) (call-with-values (lambda () (as397a@quasi as3a3c@q as3996@lev)) (lambda (as3a51@as3a46 as3a52@as3a48 as3a53@as3a4a) (let ((as3a57@q as3a53@as3a4a) (as3a58@rhs2* as3a52@as3a48) (as3a59@lhs2* as3a51@as3a46) (as3a5a@p as3a4d@as3a44) (as3a5b@rhs* as3a4c@as3a42) (as3a5c@lhs* as3a4b@as3a40)) (values (append as3a59@lhs2* as3a5c@lhs*) (append as3a58@rhs2* as3a5b@rhs*) (cons as3a5a@p as3a57@q)))))))) as3a39@ls/false) (let ((as3a63@t as3a37@t)) (let ((as3a65@ls/false (as30bc@syntax-dispatch as3a63@t '#(vector each-any)))) (if as3a65@ls/false (apply (lambda (as3a67@x*) (call-with-values (lambda () (as397a@quasi as3a67@x* as3996@lev)) (lambda (as3a6f@as3a6a as3a70@as3a6c as3a71@as3a6e) (let ((as3a75@x* as3a71@as3a6e) (as3a76@rhs* as3a70@as3a6c) (as3a77@lhs* as3a6f@as3a6a)) (values as3a77@lhs* as3a76@rhs* (list->vector as3a75@x*)))))) as3a65@ls/false) (let ((as3a7b@t as3a63@t)) (let ((as3a7d@ls/false (as30bc@syntax-dispatch as3a7b@t '_))) (if as3a7d@ls/false (apply (lambda () (values '() '() as3995@p)) as3a7d@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3a7b@t))))))))))))))))))))))))))))))) (lambda (as397b@x) (let ((as397d@t as397b@x)) (let ((as397f@ls/false (as30bc@syntax-dispatch as397d@t '(_ any)))) (if as397f@ls/false (apply (lambda (as3981@e) (call-with-values (lambda () (as397a@quasi as3981@e '0)) (lambda (as3989@as3984 as398a@as3986 as398b@as3988) (let ((as398f@v as398b@as3988) (as3990@rhs* as398a@as3986) (as3991@lhs* as3989@as3984)) (as3072@bless (list 'syntax-case (cons 'list as3990@rhs*) '() (list as3991@lhs* (list 'syntax as398f@v)))))))) as397f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as397d@t))))))) (set! as4b8a@as30ac@quasisyntax-macro as30ac@quasisyntax-macro) (set! as30ae@define-struct-macro (lambda (as3a7f@stx) (as319c@syntax-violation '#f '"define-struct not supported" as3a7f@stx))) (set! as4b8b@as30ae@define-struct-macro as30ae@define-struct-macro) (set! as30b0@define-record-type-macro (lambda (as3a81@x) (letrec* ((as3a84@id (lambda (as3c77@ctxt . as3c79@str*) (as31a0@datum->syntax as3c77@ctxt (string->symbol (apply string-append (map (lambda (as3c7b@x) (if (symbol? as3c7b@x) (symbol->string as3c7b@x) (if (string? as3c7b@x) as3c7b@x (assertion-violation 'define-record-type '"BUG")))) as3c79@str*)))))) (as3a86@get-record-name (lambda (as3c65@spec) (let ((as3c67@t as3c65@spec)) (let ((as3c69@ls/false (as30bc@syntax-dispatch as3c67@t '(any any any)))) (if as3c69@ls/false (apply (lambda (as3c6b@foo as3c6c@make-foo as3c6d@foo?) as3c6b@foo) as3c69@ls/false) (let ((as3c71@t as3c67@t)) (let ((as3c73@ls/false (as30bc@syntax-dispatch as3c71@t 'any))) (if as3c73@ls/false (apply (lambda (as3c75@foo) as3c75@foo) as3c73@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3c71@t))))))))) (as3a88@get-record-constructor-name (lambda (as3c51@spec) (let ((as3c53@t as3c51@spec)) (let ((as3c55@ls/false (as30bc@syntax-dispatch as3c53@t '(any any any)))) (if as3c55@ls/false (apply (lambda (as3c57@foo as3c58@make-foo as3c59@foo?) as3c58@make-foo) as3c55@ls/false) (let ((as3c5d@t as3c53@t)) (let ((as3c5f@ls/false (as30bc@syntax-dispatch as3c5d@t 'any))) (if (and as3c5f@ls/false (apply (lambda (as3c61@foo) (as2eb5@id? as3c61@foo)) as3c5f@ls/false)) (apply (lambda (as3c63@foo) (as3a84@id as3c63@foo '"make-" (as2ec9@stx->datum as3c63@foo))) as3c5f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3c5d@t))))))))) (as3a8a@get-record-predicate-name (lambda (as3c3d@spec) (let ((as3c3f@t as3c3d@spec)) (let ((as3c41@ls/false (as30bc@syntax-dispatch as3c3f@t '(any any any)))) (if as3c41@ls/false (apply (lambda (as3c43@foo as3c44@make-foo as3c45@foo?) as3c45@foo?) as3c41@ls/false) (let ((as3c49@t as3c3f@t)) (let ((as3c4b@ls/false (as30bc@syntax-dispatch as3c49@t 'any))) (if (and as3c4b@ls/false (apply (lambda (as3c4d@foo) (as2eb5@id? as3c4d@foo)) as3c4b@ls/false)) (apply (lambda (as3c4f@foo) (as3a84@id as3c4f@foo (as2ec9@stx->datum as3c4f@foo) '"?")) as3c4b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3c49@t))))))))) (as3a8c@get-clause (lambda (as3c2b@id as3c2c@ls) (let ((as3c2f@t as3c2c@ls)) (let ((as3c31@ls/false (as30bc@syntax-dispatch as3c2f@t '()))) (if as3c31@ls/false (apply (lambda () '#f) as3c31@ls/false) (let ((as3c33@t as3c2f@t)) (let ((as3c35@ls/false (as30bc@syntax-dispatch as3c33@t '((any . any) . any)))) (if as3c35@ls/false (apply (lambda (as3c37@x as3c38@rest as3c39@ls) (if (as2ebb@free-id=? (as3072@bless as3c2b@id) as3c37@x) (cons as3c37@x as3c38@rest) (as3a8c@get-clause as3c2b@id as3c39@ls))) as3c35@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3c33@t))))))))) (as3a8e@foo-rtd-code (lambda (as3bd9@name as3bda@clause* as3bdb@parent-rtd-code) (letrec* ((as3be0@convert-field-spec* (lambda (as3c11@ls) (list->vector (map (lambda (as3c13@x) (let ((as3c15@t as3c13@x)) (let ((as3c17@ls/false (as30bc@syntax-dispatch as3c15@t '(#(scheme-id mutable) any . any)))) (if as3c17@ls/false (apply (lambda (as3c19@name as3c1a@rest) (list 'mutable as3c19@name)) as3c17@ls/false) (let ((as3c1d@t as3c15@t)) (let ((as3c1f@ls/false (as30bc@syntax-dispatch as3c1d@t '(#(scheme-id immutable) any . any)))) (if as3c1f@ls/false (apply (lambda (as3c21@name as3c22@rest) (list 'immutable as3c21@name)) as3c1f@ls/false) (let ((as3c25@t as3c1d@t)) (let ((as3c27@ls/false (as30bc@syntax-dispatch as3c25@t 'any))) (if as3c27@ls/false (apply (lambda (as3c29@name) (list 'immutable as3c29@name)) as3c27@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3c25@t))))))))))) as3c11@ls))))) (let ((as3be1@uid-code (let ((as3be9@t (as3a8c@get-clause 'nongenerative as3bda@clause*))) (let ((as3beb@ls/false (as30bc@syntax-dispatch as3be9@t '(_)))) (if as3beb@ls/false (apply (lambda () (list 'quote (gensym))) as3beb@ls/false) (let ((as3bed@t as3be9@t)) (let ((as3bef@ls/false (as30bc@syntax-dispatch as3bed@t '(_ any)))) (if as3bef@ls/false (apply (lambda (as3bf1@uid) (list 'quote as3bf1@uid)) as3bef@ls/false) (let ((as3bf3@t as3bed@t)) (let ((as3bf5@ls/false (as30bc@syntax-dispatch as3bf3@t '_))) (if as3bf5@ls/false (apply (lambda () '#f) as3bf5@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3bf3@t))))))))))) (as3be2@sealed? (let ((as3bf7@t (as3a8c@get-clause 'sealed as3bda@clause*))) (let ((as3bf9@ls/false (as30bc@syntax-dispatch as3bf7@t '(_ #(atom #t))))) (if as3bf9@ls/false (apply (lambda () '#t) as3bf9@ls/false) (let ((as3bfb@t as3bf7@t)) (let ((as3bfd@ls/false (as30bc@syntax-dispatch as3bfb@t '_))) (if as3bfd@ls/false (apply (lambda () '#f) as3bfd@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3bfb@t)))))))) (as3be3@opaque? (let ((as3bff@t (as3a8c@get-clause 'opaque as3bda@clause*))) (let ((as3c01@ls/false (as30bc@syntax-dispatch as3bff@t '(_ #(atom #t))))) (if as3c01@ls/false (apply (lambda () '#t) as3c01@ls/false) (let ((as3c03@t as3bff@t)) (let ((as3c05@ls/false (as30bc@syntax-dispatch as3c03@t '_))) (if as3c05@ls/false (apply (lambda () '#f) as3c05@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3c03@t)))))))) (as3be4@fields (let ((as3c07@t (as3a8c@get-clause 'fields as3bda@clause*))) (let ((as3c09@ls/false (as30bc@syntax-dispatch as3c07@t '(_ . each-any)))) (if as3c09@ls/false (apply (lambda (as3c0b@field-spec*) (list 'quote (as3be0@convert-field-spec* as3c0b@field-spec*))) as3c09@ls/false) (let ((as3c0d@t as3c07@t)) (let ((as3c0f@ls/false (as30bc@syntax-dispatch as3c0d@t '_))) (if as3c0f@ls/false (apply (lambda () ''#()) as3c0f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3c0d@t))))))))) (as3072@bless (list 'make-record-type-descriptor (list 'quote as3bd9@name) as3bdb@parent-rtd-code as3be1@uid-code as3be2@sealed? as3be3@opaque? as3be4@fields)))))) (as3a90@parent-rtd-code (lambda (as3bc1@clause*) (let ((as3bc3@t (as3a8c@get-clause 'parent as3bc1@clause*))) (let ((as3bc5@ls/false (as30bc@syntax-dispatch as3bc3@t '(_ any)))) (if as3bc5@ls/false (apply (lambda (as3bc7@name) (list 'record-type-descriptor as3bc7@name)) as3bc5@ls/false) (let ((as3bc9@t as3bc3@t)) (let ((as3bcb@ls/false (as30bc@syntax-dispatch as3bc9@t '#(atom #f)))) (if as3bcb@ls/false (apply (lambda () (let ((as3bcd@t (as3a8c@get-clause 'parent-rtd as3bc1@clause*))) (let ((as3bcf@ls/false (as30bc@syntax-dispatch as3bcd@t '(_ any any)))) (if as3bcf@ls/false (apply (lambda (as3bd1@rtd as3bd2@rcd) as3bd1@rtd) as3bcf@ls/false) (let ((as3bd5@t as3bcd@t)) (let ((as3bd7@ls/false (as30bc@syntax-dispatch as3bd5@t '#(atom #f)))) (if as3bd7@ls/false (apply (lambda () '#f) as3bd7@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3bd5@t)))))))) as3bcb@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3bc9@t))))))))) (as3a92@parent-rcd-code (lambda (as3ba9@clause*) (let ((as3bab@t (as3a8c@get-clause 'parent as3ba9@clause*))) (let ((as3bad@ls/false (as30bc@syntax-dispatch as3bab@t '(_ any)))) (if as3bad@ls/false (apply (lambda (as3baf@name) (list 'record-constructor-descriptor as3baf@name)) as3bad@ls/false) (let ((as3bb1@t as3bab@t)) (let ((as3bb3@ls/false (as30bc@syntax-dispatch as3bb1@t '#(atom #f)))) (if as3bb3@ls/false (apply (lambda () (let ((as3bb5@t (as3a8c@get-clause 'parent-rtd as3ba9@clause*))) (let ((as3bb7@ls/false (as30bc@syntax-dispatch as3bb5@t '(_ any any)))) (if as3bb7@ls/false (apply (lambda (as3bb9@rtd as3bba@rcd) as3bba@rcd) as3bb7@ls/false) (let ((as3bbd@t as3bb5@t)) (let ((as3bbf@ls/false (as30bc@syntax-dispatch as3bbd@t '#(atom #f)))) (if as3bbf@ls/false (apply (lambda () '#f) as3bbf@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3bbd@t)))))))) as3bb3@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3bb1@t))))))))) (as3a94@foo-rcd-code (lambda (as3ba1@clause* as3ba2@foo-rtd as3ba3@protocol as3ba4@parent-rcd-code) (list 'make-record-constructor-descriptor as3ba2@foo-rtd as3ba4@parent-rcd-code as3ba3@protocol))) (as3a96@get-protocol-code (lambda (as3b95@clause*) (let ((as3b97@t (as3a8c@get-clause 'protocol as3b95@clause*))) (let ((as3b99@ls/false (as30bc@syntax-dispatch as3b97@t '(_ any)))) (if as3b99@ls/false (apply (lambda (as3b9b@expr) as3b9b@expr) as3b99@ls/false) (let ((as3b9d@t as3b97@t)) (let ((as3b9f@ls/false (as30bc@syntax-dispatch as3b9d@t '_))) (if as3b9f@ls/false (apply (lambda () '#f) as3b9f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3b9d@t))))))))) (as3a98@get-fields (lambda (as3b83@clause*) (let ((as3b85@t as3b83@clause*)) (let ((as3b87@ls/false (as30bc@syntax-dispatch as3b85@t '()))) (if as3b87@ls/false (apply (lambda () '()) as3b87@ls/false) (let ((as3b89@t as3b85@t)) (let ((as3b8b@ls/false (as30bc@syntax-dispatch as3b89@t '((#(scheme-id fields) . each-any) . _)))) (if as3b8b@ls/false (apply (lambda (as3b8d@f*) as3b8d@f*) as3b8b@ls/false) (let ((as3b8f@t as3b89@t)) (let ((as3b91@ls/false (as30bc@syntax-dispatch as3b8f@t '(_ . any)))) (if as3b91@ls/false (apply (lambda (as3b93@rest) (as3a98@get-fields as3b93@rest)) as3b91@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3b8f@t)))))))))))) (as3a9a@get-mutator-indices (lambda (as3b6b@fields) (let as3b71@f ((as3b6d@fields as3b6b@fields) (as3b6e@i '0)) (let ((as3b73@t as3b6d@fields)) (let ((as3b75@ls/false (as30bc@syntax-dispatch as3b73@t '()))) (if as3b75@ls/false (apply (lambda () '()) as3b75@ls/false) (let ((as3b77@t as3b73@t)) (let ((as3b79@ls/false (as30bc@syntax-dispatch as3b77@t '((#(scheme-id mutable) . _) . any)))) (if as3b79@ls/false (apply (lambda (as3b7b@rest) (cons as3b6e@i (as3b71@f as3b7b@rest (+ as3b6e@i '1)))) as3b79@ls/false) (let ((as3b7d@t as3b77@t)) (let ((as3b7f@ls/false (as30bc@syntax-dispatch as3b7d@t '(_ . any)))) (if as3b7f@ls/false (apply (lambda (as3b81@rest) (as3b71@f as3b81@rest (+ as3b6e@i '1))) as3b7f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3b7d@t))))))))))))) (as3a9c@get-mutators (lambda (as3b41@foo as3b42@fields) (letrec* ((as3b46@gen-name (lambda (as3b69@x) (as31a0@datum->syntax as3b41@foo (string->symbol (string-append (symbol->string (as31a2@syntax->datum as3b41@foo)) '"-" (symbol->string (as31a2@syntax->datum as3b69@x)) '"-set!")))))) (let as3b49@f ((as3b47@fields as3b42@fields)) (let ((as3b4b@t as3b47@fields)) (let ((as3b4d@ls/false (as30bc@syntax-dispatch as3b4b@t '()))) (if as3b4d@ls/false (apply (lambda () '()) as3b4d@ls/false) (let ((as3b4f@t as3b4b@t)) (let ((as3b51@ls/false (as30bc@syntax-dispatch as3b4f@t '((#(scheme-id mutable) any any any) . any)))) (if as3b51@ls/false (apply (lambda (as3b53@name as3b54@accessor as3b55@mutator as3b56@rest) (cons as3b55@mutator (as3b49@f as3b56@rest))) as3b51@ls/false) (let ((as3b5b@t as3b4f@t)) (let ((as3b5d@ls/false (as30bc@syntax-dispatch as3b5b@t '((#(scheme-id mutable) any) . any)))) (if as3b5d@ls/false (apply (lambda (as3b5f@name as3b60@rest) (cons (as3b46@gen-name as3b5f@name) (as3b49@f as3b60@rest))) as3b5d@ls/false) (let ((as3b63@t as3b5b@t)) (let ((as3b65@ls/false (as30bc@syntax-dispatch as3b63@t '(_ . any)))) (if as3b65@ls/false (apply (lambda (as3b67@rest) (as3b49@f as3b67@rest)) as3b65@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3b63@t))))))))))))))))) (as3a9e@get-accessors (lambda (as3afd@foo as3afe@fields) (letrec* ((as3b02@gen-name (lambda (as3b3f@x) (as31a0@datum->syntax as3afd@foo (string->symbol (string-append (symbol->string (as31a2@syntax->datum as3afd@foo)) '"-" (symbol->string (as31a2@syntax->datum as3b3f@x)))))))) (map (lambda (as3b03@field) (let ((as3b05@t as3b03@field)) (let ((as3b07@ls/false (as30bc@syntax-dispatch as3b05@t '(#(scheme-id mutable) any any any)))) (if (and as3b07@ls/false (apply (lambda (as3b09@name as3b0a@accessor as3b0b@mutator) (as2eb5@id? as3b0a@accessor)) as3b07@ls/false)) (apply (lambda (as3b0f@name as3b10@accessor as3b11@mutator) as3b10@accessor) as3b07@ls/false) (let ((as3b15@t as3b05@t)) (let ((as3b17@ls/false (as30bc@syntax-dispatch as3b15@t '(#(scheme-id immutable) any any)))) (if (and as3b17@ls/false (apply (lambda (as3b19@name as3b1a@accessor) (as2eb5@id? as3b1a@accessor)) as3b17@ls/false)) (apply (lambda (as3b1d@name as3b1e@accessor) as3b1e@accessor) as3b17@ls/false) (let ((as3b21@t as3b15@t)) (let ((as3b23@ls/false (as30bc@syntax-dispatch as3b21@t '(#(scheme-id mutable) any)))) (if (and as3b23@ls/false (apply (lambda (as3b25@name) (as2eb5@id? as3b25@name)) as3b23@ls/false)) (apply (lambda (as3b27@name) (as3b02@gen-name as3b27@name)) as3b23@ls/false) (let ((as3b29@t as3b21@t)) (let ((as3b2b@ls/false (as30bc@syntax-dispatch as3b29@t '(#(scheme-id immutable) any)))) (if (and as3b2b@ls/false (apply (lambda (as3b2d@name) (as2eb5@id? as3b2d@name)) as3b2b@ls/false)) (apply (lambda (as3b2f@name) (as3b02@gen-name as3b2f@name)) as3b2b@ls/false) (let ((as3b31@t as3b29@t)) (let ((as3b33@ls/false (as30bc@syntax-dispatch as3b31@t 'any))) (if (and as3b33@ls/false (apply (lambda (as3b35@name) (as2eb5@id? as3b35@name)) as3b33@ls/false)) (apply (lambda (as3b37@name) (as3b02@gen-name as3b37@name)) as3b33@ls/false) (let ((as3b39@t as3b31@t)) (let ((as3b3b@ls/false (as30bc@syntax-dispatch as3b39@t 'any))) (if as3b3b@ls/false (apply (lambda (as3b3d@others) (as319c@syntax-violation '#f '"invalid field spec" as3b03@field)) as3b3b@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3b39@t)))))))))))))))))))) as3afe@fields)))) (as3aa0@enumerate (lambda (as3af5@ls) (let as3afb@f ((as3af7@ls as3af5@ls) (as3af8@i '0)) (if (null? as3af7@ls) '() (cons as3af8@i (as3afb@f (cdr as3af7@ls) (+ as3af8@i '1))))))) (as3aa2@do-define-record (lambda (as3acd@namespec as3ace@clause*) (let ((as3ad1@foo (as3a86@get-record-name as3acd@namespec))) (let ((as3ad3@foo-rtd (gensym))) (let ((as3ad5@foo-rcd (gensym))) (let ((as3ad7@protocol (gensym))) (let ((as3ad9@make-foo (as3a88@get-record-constructor-name as3acd@namespec))) (let ((as3adb@fields (as3a98@get-fields as3ace@clause*))) (let ((as3add@idx* (as3aa0@enumerate as3adb@fields))) (let ((as3adf@foo-x* (as3a9e@get-accessors as3ad1@foo as3adb@fields))) (let ((as3ae1@set-foo-x!* (as3a9c@get-mutators as3ad1@foo as3adb@fields))) (let ((as3ae3@set-foo-idx* (as3a9a@get-mutator-indices as3adb@fields))) (let ((as3ae5@foo? (as3a8a@get-record-predicate-name as3acd@namespec))) (let ((as3ae7@foo-rtd-code (as3a8e@foo-rtd-code as3ad1@foo as3ace@clause* (as3a90@parent-rtd-code as3ace@clause*)))) (let ((as3ae9@foo-rcd-code (as3a94@foo-rcd-code as3ace@clause* as3ad3@foo-rtd as3ad7@protocol (as3a92@parent-rcd-code as3ace@clause*)))) (let ((as3aeb@protocol-code (as3a96@get-protocol-code as3ace@clause*))) (as3072@bless (cons 'begin (cons (list 'define as3ad3@foo-rtd as3ae7@foo-rtd-code) (cons (list 'define as3ad7@protocol as3aeb@protocol-code) (cons (list 'define as3ad5@foo-rcd as3ae9@foo-rcd-code) (cons (list 'define-syntax as3ad1@foo (list 'list ''$rtd (list 'syntax as3ad3@foo-rtd) (list 'syntax as3ad5@foo-rcd))) (cons (list 'define as3ae5@foo? (list 'record-predicate as3ad3@foo-rtd)) (cons (list 'define as3ad9@make-foo (list 'record-constructor as3ad5@foo-rcd)) (append (map (lambda (as3aed@foo-x as3aee@idx) (list 'define as3aed@foo-x (list 'record-accessor as3ad3@foo-rtd as3aee@idx))) as3adf@foo-x* as3add@idx*) (map (lambda (as3af1@set-foo-x! as3af2@idx) (list 'define as3af1@set-foo-x! (list 'record-mutator as3ad3@foo-rtd as3af2@idx))) as3ae1@set-foo-x!* as3ae3@set-foo-idx*)))))))))))))))))))))))))) (as3aa4@verify-clauses (lambda (as3aad@x as3aae@cls*) (letrec* ((as3ab2@valid-kwds (map as3072@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (as3ab4@free-id-member? (lambda (as3ac9@x as3aca@ls) (and (pair? as3aca@ls) (or (as2ebb@free-id=? as3ac9@x (car as3aca@ls)) (as3ab4@free-id-member? as3ac9@x (cdr as3aca@ls))))))) (let as3ab9@f ((as3ab5@cls* as3aae@cls*) (as3ab6@seen* '())) (if (not (null? as3ab5@cls*)) (let ((as3abb@t (car as3ab5@cls*))) (let ((as3abd@ls/false (as30bc@syntax-dispatch as3abb@t '(any . any)))) (if as3abd@ls/false (apply (lambda (as3abf@kwd as3ac0@rest) (if (or (not (as2eb5@id? as3abf@kwd)) (not (as3ab4@free-id-member? as3abf@kwd as3ab2@valid-kwds))) (as319c@syntax-violation '#f '"not a valid define-record-type keyword" as3abf@kwd) (if (as2ec1@bound-id-member? as3abf@kwd as3ab6@seen*) (as319c@syntax-violation '#f '"duplicate use of keyword " as3aad@x as3abf@kwd) (as3ab9@f (cdr as3ab5@cls*) (cons as3abf@kwd as3ab6@seen*))))) as3abd@ls/false) (let ((as3ac3@t as3abb@t)) (let ((as3ac5@ls/false (as30bc@syntax-dispatch as3ac3@t 'any))) (if as3ac5@ls/false (apply (lambda (as3ac7@cls) (as319c@syntax-violation '#f '"malformed define-record-type clause" as3ac7@cls)) as3ac5@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3ac3@t))))))) (void))))))) (let ((as3aa5@t as3a81@x)) (let ((as3aa7@ls/false (as30bc@syntax-dispatch as3aa5@t '(_ any . each-any)))) (if as3aa7@ls/false (apply (lambda (as3aa9@namespec as3aaa@clause*) (begin (as3aa4@verify-clauses as3a81@x as3aaa@clause*) (as3aa2@do-define-record as3aa9@namespec as3aaa@clause*))) as3aa7@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3aa5@t))))))) (set! as4b8c@as30b0@define-record-type-macro as30b0@define-record-type-macro) (set! as30b2@define-condition-type-macro (lambda (as3c7d@x) (letrec* ((as3c80@mkname (lambda (as3cad@name as3cae@suffix) (as31a0@datum->syntax as3cad@name (string->symbol (string-append (symbol->string (as31a2@syntax->datum as3cad@name)) as3cae@suffix)))))) (let ((as3c81@t as3c7d@x)) (let ((as3c83@ls/false (as30bc@syntax-dispatch as3c81@t '(any any any any any . #(each (any any)))))) (if (and as3c83@ls/false (apply (lambda (as3c85@ctxt as3c86@name as3c87@super as3c88@constructor as3c89@predicate as3c8a@field* as3c8b@accessor*) (and (as2eb5@id? as3c86@name) (as2eb5@id? as3c87@super) (as2eb5@id? as3c88@constructor) (as2eb5@id? as3c89@predicate) (for-all as2eb5@id? as3c8a@field*) (for-all as2eb5@id? as3c8b@accessor*))) as3c83@ls/false)) (apply (lambda (as3c93@ctxt as3c94@name as3c95@super as3c96@constructor as3c97@predicate as3c98@field* as3c99@accessor*) (let ((as3ca1@aux-accessor* (map (lambda (as3ca3@x) (gensym)) as3c99@accessor*))) (as3072@bless (cons 'begin (cons (cons 'define-record-type (cons (list as3c94@name as3c96@constructor (gensym)) (cons (list 'parent as3c95@super) (cons (cons 'fields (map (lambda (as3ca5@field as3ca6@aux) (list 'immutable as3ca5@field as3ca6@aux)) as3c98@field* as3ca1@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define as3c97@predicate (list 'condition-predicate (list 'record-type-descriptor as3c94@name))) (map (lambda (as3ca9@accessor as3caa@aux) (list 'define as3ca9@accessor (list 'condition-accessor (list 'record-type-descriptor as3c94@name) as3caa@aux))) as3c99@accessor* as3ca1@aux-accessor*))))))) as3c83@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3c81@t))))))) (set! as4b8d@as30b2@define-condition-type-macro as30b2@define-condition-type-macro) (set! as30b4@incorrect-usage-macro (lambda (as3cb1@e) (as319c@syntax-violation '#f '"incorrect usage of auxiliary keyword" as3cb1@e))) (set! as4b8e@as30b4@incorrect-usage-macro as30b4@incorrect-usage-macro) (set! as30b6@parameterize-macro (lambda (as3cb3@e) (let ((as3cb5@t as3cb3@e)) (let ((as3cb7@ls/false (as30bc@syntax-dispatch as3cb5@t '(_ () any . each-any)))) (if as3cb7@ls/false (apply (lambda (as3cb9@b as3cba@b*) (as3072@bless (cons 'let (cons '() (cons as3cb9@b as3cba@b*))))) as3cb7@ls/false) (let ((as3cbd@t as3cb5@t)) (let ((as3cbf@ls/false (as30bc@syntax-dispatch as3cbd@t '(_ #(each (any any)) any . each-any)))) (if as3cbf@ls/false (apply (lambda (as3cc1@olhs* as3cc2@orhs* as3cc3@b as3cc4@b*) (let ((as3cc9@lhs* (as318a@generate-temporaries as3cc1@olhs*)) (as3cca@rhs* (as318a@generate-temporaries as3cc2@orhs*))) (as3072@bless (cons (list 'lambda (append as3cc9@lhs* as3cca@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (as3ccd@lhs as3cce@rhs) (list 'let (list (list 't (list as3ccd@lhs))) (list as3ccd@lhs as3cce@rhs) (cons 'set! (cons as3cce@rhs '(t))))) as3cc9@lhs* as3cca@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons as3cc3@b as3cc4@b*))) '(swap)))))) (append as3cc1@olhs* as3cc2@orhs*))))) as3cbf@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3cbd@t))))))))) (set! as4b8f@as30b6@parameterize-macro as30b6@parameterize-macro) (set! as30b8@foreign-call-transformer (lambda (as3cd1@e as3cd2@r as3cd3@mr) (let ((as3cd7@t as3cd1@e)) (let ((as3cd9@ls/false (as30bc@syntax-dispatch as3cd7@t '(_ any . each-any)))) (if as3cd9@ls/false (apply (lambda (as3cdb@name as3cdc@arg*) (cons 'foreign-call (cons (as30de@chi-expr as3cdb@name as3cd2@r as3cd3@mr) (as30da@chi-expr* as3cdc@arg* as3cd2@r as3cd3@mr)))) as3cd9@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3cd7@t)))))) (set! as4b90@as30b8@foreign-call-transformer as30b8@foreign-call-transformer) (set! as30ba@convert-pattern (lambda (as3cdf@pattern as3ce0@keys) (letrec* ((as3ce4@cvt* (lambda (as3d83@p* as3d84@n as3d85@ids) (if (null? as3d83@p*) (values '() as3d85@ids) (call-with-values (lambda () (as3ce4@cvt* (cdr as3d83@p*) as3d84@n as3d85@ids)) (lambda (as3d8d@as3d8a as3d8e@as3d8c) (let ((as3d91@ids as3d8e@as3d8c) (as3d92@y as3d8d@as3d8a)) (call-with-values (lambda () (as3ce6@cvt (car as3d83@p*) as3d84@n as3d91@ids)) (lambda (as3d99@as3d96 as3d9a@as3d98) (let ((as3d9d@ids as3d9a@as3d98) (as3d9e@x as3d99@as3d96)) (values (cons as3d9e@x as3d92@y) as3d9d@ids)))))))))) (as3ce6@cvt (lambda (as3ce7@p as3ce8@n as3ce9@ids) (let ((as3ced@t as3ce7@p)) (let ((as3cef@ls/false (as30bc@syntax-dispatch as3ced@t 'any))) (if (and as3cef@ls/false (apply (lambda (as3cf1@id) (as2eb5@id? as3cf1@id)) as3cef@ls/false)) (apply (lambda (as3cf3@id) (if (as2ec1@bound-id-member? as3ce7@p as3ce0@keys) (values (vector 'free-id as3ce7@p) as3ce9@ids) (if (as2ebb@free-id=? as3ce7@p (as3044@scheme-stx '_)) (values '_ as3ce9@ids) (values 'any (cons (cons as3ce7@p as3ce8@n) as3ce9@ids))))) as3cef@ls/false) (let ((as3cf5@t as3ced@t)) (let ((as3cf7@ls/false (as30bc@syntax-dispatch as3cf5@t '(any any)))) (if (and as3cf7@ls/false (apply (lambda (as3cf9@p as3cfa@dots) (as30be@ellipsis? as3cfa@dots)) as3cf7@ls/false)) (apply (lambda (as3cfd@p as3cfe@dots) (call-with-values (lambda () (as3ce6@cvt as3cfd@p (+ as3ce8@n '1) as3ce9@ids)) (lambda (as3d05@as3d02 as3d06@as3d04) (let ((as3d09@ids as3d06@as3d04) (as3d0a@p as3d05@as3d02)) (values (if (eq? as3d0a@p 'any) 'each-any (vector 'each as3d0a@p)) as3d09@ids))))) as3cf7@ls/false) (let ((as3d0d@t as3cf5@t)) (let ((as3d0f@ls/false (as30bc@syntax-dispatch as3d0d@t '(any any . #(each+ any () any))))) (if (and as3d0f@ls/false (apply (lambda (as3d11@x as3d12@dots as3d13@ys as3d14@z) (as30be@ellipsis? as3d12@dots)) as3d0f@ls/false)) (apply (lambda (as3d19@x as3d1a@dots as3d1b@ys as3d1c@z) (call-with-values (lambda () (as3ce6@cvt as3d1c@z as3ce8@n as3ce9@ids)) (lambda (as3d25@as3d22 as3d26@as3d24) (let ((as3d29@ids as3d26@as3d24) (as3d2a@z as3d25@as3d22)) (call-with-values (lambda () (as3ce4@cvt* as3d1b@ys as3ce8@n as3d29@ids)) (lambda (as3d31@as3d2e as3d32@as3d30) (let ((as3d35@ids as3d32@as3d30) (as3d36@ys as3d31@as3d2e)) (call-with-values (lambda () (as3ce6@cvt as3d19@x (+ as3ce8@n '1) as3d35@ids)) (lambda (as3d3d@as3d3a as3d3e@as3d3c) (let ((as3d41@ids as3d3e@as3d3c) (as3d42@x as3d3d@as3d3a)) (values (vector 'each+ as3d42@x (reverse as3d36@ys) as3d2a@z) as3d41@ids))))))))))) as3d0f@ls/false) (let ((as3d45@t as3d0d@t)) (let ((as3d47@ls/false (as30bc@syntax-dispatch as3d45@t '(any . any)))) (if as3d47@ls/false (apply (lambda (as3d49@x as3d4a@y) (call-with-values (lambda () (as3ce6@cvt as3d4a@y as3ce8@n as3ce9@ids)) (lambda (as3d51@as3d4e as3d52@as3d50) (let ((as3d55@ids as3d52@as3d50) (as3d56@y as3d51@as3d4e)) (call-with-values (lambda () (as3ce6@cvt as3d49@x as3ce8@n as3d55@ids)) (lambda (as3d5d@as3d5a as3d5e@as3d5c) (let ((as3d61@ids as3d5e@as3d5c) (as3d62@x as3d5d@as3d5a)) (values (cons as3d62@x as3d56@y) as3d61@ids)))))))) as3d47@ls/false) (let ((as3d65@t as3d45@t)) (let ((as3d67@ls/false (as30bc@syntax-dispatch as3d65@t '()))) (if as3d67@ls/false (apply (lambda () (values '() as3ce9@ids)) as3d67@ls/false) (let ((as3d69@t as3d65@t)) (let ((as3d6b@ls/false (as30bc@syntax-dispatch as3d69@t '#(vector each-any)))) (if (and as3d6b@ls/false (apply (lambda (as3d6d@p) (not (as2e81@stx? as3d6d@p))) as3d6b@ls/false)) (apply (lambda (as3d6f@p) (call-with-values (lambda () (as3ce6@cvt as3d6f@p as3ce8@n as3ce9@ids)) (lambda (as3d75@as3d72 as3d76@as3d74) (let ((as3d79@ids as3d76@as3d74) (as3d7a@p as3d75@as3d72)) (values (vector 'vector as3d7a@p) as3d79@ids))))) as3d6b@ls/false) (let ((as3d7d@t as3d69@t)) (let ((as3d7f@ls/false (as30bc@syntax-dispatch as3d7d@t 'any))) (if as3d7f@ls/false (apply (lambda (as3d81@datum) (values (vector 'atom (as2ec9@stx->datum as3d81@datum)) as3ce9@ids)) as3d7f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3d7d@t))))))))))))))))))))))))) (as3ce6@cvt as3cdf@pattern '0 '())))) (set! as4b91@as30ba@convert-pattern as30ba@convert-pattern) (set! as30bc@syntax-dispatch (letrec* ((as3da2@stx^ (lambda (as3e7d@e as3e7e@m* as3e7f@s* as3e80@ae*) (if (and (null? as3e7e@m*) (null? as3e7f@s*) (null? as3e80@ae*)) as3e7d@e (as2e9d@mkstx as3e7d@e as3e7e@m* as3e7f@s* as3e80@ae*)))) (as3da4@match-each (lambda (as3e5d@e as3e5e@p as3e5f@m* as3e60@s* as3e61@ae*) (if (pair? as3e5d@e) (let ((as3e67@first (as3db0@match (car as3e5d@e) as3e5e@p as3e5f@m* as3e60@s* as3e61@ae* '()))) (and as3e67@first (let ((as3e69@rest (as3da4@match-each (cdr as3e5d@e) as3e5e@p as3e5f@m* as3e60@s* as3e61@ae*))) (and as3e69@rest (cons as3e67@first as3e69@rest))))) (if (null? as3e5d@e) '() (if (as2e81@stx? as3e5d@e) (and (not (as2e3b@top-marked? as3e5f@m*)) (call-with-values (lambda () (join-wraps as3e5f@m* as3e60@s* as3e61@ae* as3e5d@e)) (lambda (as3e71@as3e6c as3e72@as3e6e as3e73@as3e70) (let ((as3e77@ae* as3e73@as3e70) (as3e78@s* as3e72@as3e6e) (as3e79@m* as3e71@as3e6c)) (as3da4@match-each (as2e83@stx-expr as3e5d@e) as3e5e@p as3e79@m* as3e78@s* as3e77@ae*))))) (if (as29f9@as28cb@annotation? as3e5d@e) (as3da4@match-each (as29fb@as28cf@annotation-expression as3e5d@e) as3e5e@p as3e5f@m* as3e60@s* as3e61@ae*) '#f)))))) (as3da6@match-each+ (lambda (as3e1d@e as3e1e@x-pat as3e1f@y-pat as3e20@z-pat as3e21@m* as3e22@s* as3e23@ae* as3e24@r) (let as3e35@f ((as3e2d@e as3e1d@e) (as3e2e@m* as3e21@m*) (as3e2f@s* as3e22@s*) (as3e30@ae* as3e23@ae*)) (if (pair? as3e2d@e) (call-with-values (lambda () (as3e35@f (cdr as3e2d@e) as3e2e@m* as3e2f@s* as3e30@ae*)) (lambda (as3e3d@as3e38 as3e3e@as3e3a as3e3f@as3e3c) (let ((as3e43@r as3e3f@as3e3c) (as3e44@y-pat as3e3e@as3e3a) (as3e45@xr* as3e3d@as3e38)) (if as3e43@r (if (null? as3e44@y-pat) (let ((as3e49@xr (as3db0@match (car as3e2d@e) as3e1e@x-pat as3e2e@m* as3e2f@s* as3e30@ae* '()))) (if as3e49@xr (values (cons as3e49@xr as3e45@xr*) as3e44@y-pat as3e43@r) (values '#f '#f '#f))) (values '() (cdr as3e44@y-pat) (as3db0@match (car as3e2d@e) (car as3e44@y-pat) as3e2e@m* as3e2f@s* as3e30@ae* as3e43@r))) (values '#f '#f '#f))))) (if (as2e81@stx? as3e2d@e) (if (as2e3b@top-marked? as3e2e@m*) (values '() as3e1f@y-pat (as3db0@match as3e2d@e as3e20@z-pat as3e2e@m* as3e2f@s* as3e30@ae* as3e24@r)) (call-with-values (lambda () (join-wraps as3e2e@m* as3e2f@s* as3e30@ae* as3e2d@e)) (lambda (as3e51@as3e4c as3e52@as3e4e as3e53@as3e50) (let ((as3e57@ae* as3e53@as3e50) (as3e58@s* as3e52@as3e4e) (as3e59@m* as3e51@as3e4c)) (as3e35@f (as2e83@stx-expr as3e2d@e) as3e59@m* as3e58@s* as3e57@ae*))))) (if (as29f9@as28cb@annotation? as3e2d@e) (as3e35@f (as29fb@as28cf@annotation-expression as3e2d@e) as3e2e@m* as3e2f@s* as3e30@ae*) (values '() as3e1f@y-pat (as3db0@match as3e2d@e as3e20@z-pat as3e2e@m* as3e2f@s* as3e30@ae* as3e24@r)))))))) (as3da8@match-each-any (lambda (as3e01@e as3e02@m* as3e03@s* as3e04@ae*) (if (pair? as3e01@e) (let ((as3e09@l (as3da8@match-each-any (cdr as3e01@e) as3e02@m* as3e03@s* as3e04@ae*))) (and as3e09@l (cons (as3da2@stx^ (car as3e01@e) as3e02@m* as3e03@s* as3e04@ae*) as3e09@l))) (if (null? as3e01@e) '() (if (as2e81@stx? as3e01@e) (and (not (as2e3b@top-marked? as3e02@m*)) (call-with-values (lambda () (join-wraps as3e02@m* as3e03@s* as3e04@ae* as3e01@e)) (lambda (as3e11@as3e0c as3e12@as3e0e as3e13@as3e10) (let ((as3e17@ae* as3e13@as3e10) (as3e18@s* as3e12@as3e0e) (as3e19@m* as3e11@as3e0c)) (as3da8@match-each-any (as2e83@stx-expr as3e01@e) as3e19@m* as3e18@s* as3e17@ae*))))) (if (as29f9@as28cb@annotation? as3e01@e) (as3da8@match-each-any (as29fb@as28cf@annotation-expression as3e01@e) as3e02@m* as3e03@s* as3e04@ae*) '#f)))))) (as3daa@match-empty (lambda (as3dfb@p as3dfc@r) (if (null? as3dfb@p) as3dfc@r (if (eq? as3dfb@p '_) as3dfc@r (if (eq? as3dfb@p 'any) (cons '() as3dfc@r) (if (pair? as3dfb@p) (as3daa@match-empty (car as3dfb@p) (as3daa@match-empty (cdr as3dfb@p) as3dfc@r)) (if (eq? as3dfb@p 'each-any) (cons '() as3dfc@r) (let ((as3dff@t (vector-ref as3dfb@p '0))) (if (memv as3dff@t '(each)) (as3daa@match-empty (vector-ref as3dfb@p '1) as3dfc@r) (if (memv as3dff@t '(each+)) (as3daa@match-empty (vector-ref as3dfb@p '1) (as3daa@match-empty (reverse (vector-ref as3dfb@p '2)) (as3daa@match-empty (vector-ref as3dfb@p '3) as3dfc@r))) (if (memv as3dff@t '(free-id atom)) as3dfc@r (if (memv as3dff@t '(scheme-id atom)) as3dfc@r (if (memv as3dff@t '(vector)) (as3daa@match-empty (vector-ref as3dfb@p '1) as3dfc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" as3dfb@p)))))))))))))) (as3dac@combine (lambda (as3df7@r* as3df8@r) (if (null? (car as3df7@r*)) as3df8@r (cons (map car as3df7@r*) (as3dac@combine (map cdr as3df7@r*) as3df8@r))))) (as3dae@match* (lambda (as3dd3@e as3dd4@p as3dd5@m* as3dd6@s* as3dd7@ae* as3dd8@r) (if (null? as3dd4@p) (and (null? as3dd3@e) as3dd8@r) (if (pair? as3dd4@p) (and (pair? as3dd3@e) (as3db0@match (car as3dd3@e) (car as3dd4@p) as3dd5@m* as3dd6@s* as3dd7@ae* (as3db0@match (cdr as3dd3@e) (cdr as3dd4@p) as3dd5@m* as3dd6@s* as3dd7@ae* as3dd8@r))) (if (eq? as3dd4@p 'each-any) (let ((as3ddf@l (as3da8@match-each-any as3dd3@e as3dd5@m* as3dd6@s* as3dd7@ae*))) (and as3ddf@l (cons as3ddf@l as3dd8@r))) (let ((as3de1@t (vector-ref as3dd4@p '0))) (if (memv as3de1@t '(each)) (if (null? as3dd3@e) (as3daa@match-empty (vector-ref as3dd4@p '1) as3dd8@r) (let ((as3de3@r* (as3da4@match-each as3dd3@e (vector-ref as3dd4@p '1) as3dd5@m* as3dd6@s* as3dd7@ae*))) (and as3de3@r* (as3dac@combine as3de3@r* as3dd8@r)))) (if (memv as3de1@t '(free-id)) (and (symbol? as3dd3@e) (as2e3b@top-marked? as3dd5@m*) (as2ebb@free-id=? (as3da2@stx^ as3dd3@e as3dd5@m* as3dd6@s* as3dd7@ae*) (vector-ref as3dd4@p '1)) as3dd8@r) (if (memv as3de1@t '(scheme-id)) (and (symbol? as3dd3@e) (as2e3b@top-marked? as3dd5@m*) (as2ebb@free-id=? (as3da2@stx^ as3dd3@e as3dd5@m* as3dd6@s* as3dd7@ae*) (as3044@scheme-stx (vector-ref as3dd4@p '1))) as3dd8@r) (if (memv as3de1@t '(each+)) (call-with-values (lambda () (as3da6@match-each+ as3dd3@e (vector-ref as3dd4@p '1) (vector-ref as3dd4@p '2) (vector-ref as3dd4@p '3) as3dd5@m* as3dd6@s* as3dd7@ae* as3dd8@r)) (lambda (as3deb@as3de6 as3dec@as3de8 as3ded@as3dea) (let ((as3df1@r as3ded@as3dea) (as3df2@y-pat as3dec@as3de8) (as3df3@xr* as3deb@as3de6)) (and as3df1@r (null? as3df2@y-pat) (if (null? as3df3@xr*) (as3daa@match-empty (vector-ref as3dd4@p '1) as3df1@r) (as3dac@combine as3df3@xr* as3df1@r)))))) (if (memv as3de1@t '(atom)) (and (fast-equal? (vector-ref as3dd4@p '1) (as2ec7@strip as3dd3@e as3dd5@m*)) as3dd8@r) (if (memv as3de1@t '(vector)) (and (vector? as3dd3@e) (as3db0@match (vector->list as3dd3@e) (vector-ref as3dd4@p '1) as3dd5@m* as3dd6@s* as3dd7@ae* as3dd8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" as3dd4@p))))))))))))) (as3db0@match (lambda (as3db5@e as3db6@p as3db7@m* as3db8@s* as3db9@ae* as3dba@r) (if (not as3dba@r) '#f (if (eq? as3db6@p '_) as3dba@r (if (eq? as3db6@p 'any) (cons (as3da2@stx^ as3db5@e as3db7@m* as3db8@s* as3db9@ae*) as3dba@r) (if (as2e81@stx? as3db5@e) (and (not (as2e3b@top-marked? as3db7@m*)) (call-with-values (lambda () (join-wraps as3db7@m* as3db8@s* as3db9@ae* as3db5@e)) (lambda (as3dc7@as3dc2 as3dc8@as3dc4 as3dc9@as3dc6) (let ((as3dcd@ae* as3dc9@as3dc6) (as3dce@s* as3dc8@as3dc4) (as3dcf@m* as3dc7@as3dc2)) (as3db0@match (as2e83@stx-expr as3db5@e) as3db6@p as3dcf@m* as3dce@s* as3dcd@ae* as3dba@r))))) (if (as29f9@as28cb@annotation? as3db5@e) (as3db0@match (as29fb@as28cf@annotation-expression as3db5@e) as3db6@p as3db7@m* as3db8@s* as3db9@ae* as3dba@r) (as3dae@match* as3db5@e as3db6@p as3db7@m* as3db8@s* as3db9@ae* as3dba@r))))))))) (lambda (as3db1@e as3db2@p) (as3db0@match as3db1@e as3db2@p '() '() '() '())))) (set! as4b92@as30bc@syntax-dispatch as30bc@syntax-dispatch) (set! as30be@ellipsis? (lambda (as3e85@x) (and (as2eb5@id? as3e85@x) (as2ebb@free-id=? as3e85@x (as3044@scheme-stx '...))))) (set! as4b93@as30be@ellipsis? as30be@ellipsis?) (set! as30c0@underscore? (lambda (as3e87@x) (and (as2eb5@id? as3e87@x) (as2ebb@free-id=? as3e87@x (as3044@scheme-stx '_))))) (set! as4b94@as30c0@underscore? as30c0@underscore?) (set! as30c2@verify-literals (lambda (as3e89@lits as3e8a@expr) (for-each (lambda (as3e8d@x) (if (or (not (as2eb5@id? as3e8d@x)) (as30be@ellipsis? as3e8d@x) (as30c0@underscore? as3e8d@x)) (as319c@syntax-violation '#f '"invalid literal" as3e8a@expr as3e8d@x) (void))) as3e89@lits))) (set! as4b95@as30c2@verify-literals as30c2@verify-literals) (set! as30c4@syntax-case-transformer (letrec* ((as3e90@build-dispatch-call (lambda (as3f01@pvars as3f02@expr as3f03@y as3f04@r as3f05@mr) (let ((as3f0b@ids (map car as3f01@pvars)) (as3f0c@levels (map cdr as3f01@pvars))) (let ((as3f0f@labels (map as2e41@gen-label as3f0b@ids)) (as3f10@new-vars (map as2e3d@gen-lexical as3f0b@ids))) (let ((as3f13@body (as30de@chi-expr (as2ea1@add-subst (as2e75@make-full-rib as3f0b@ids as3f0f@labels) as3f02@expr) (append (map (lambda (as3f15@label as3f16@var as3f17@level) (cons as3f15@label (as2ecf@make-binding 'syntax (cons as3f16@var as3f17@level)))) as3f0f@labels as3f10@new-vars (map cdr as3f01@pvars)) as3f04@r) as3f05@mr))) (list '(primitive apply) (as2e18@as2d4a@build-lambda '#f as3f10@new-vars as3f13@body) as3f03@y)))))) (as3e92@invalid-ids-error (lambda (as3ef5@id* as3ef6@e as3ef7@class) (let as3eff@find ((as3efb@id* as3ef5@id*) (as3efc@ok* '())) (if (null? as3efb@id*) (as319c@syntax-violation '#f '"invalid syntax" as3ef6@e) (if (as2eb5@id? (car as3efb@id*)) (if (as2ec1@bound-id-member? (car as3efb@id*) as3efc@ok*) (as3198@syntax-error (car as3efb@id*) '"duplicate " as3ef7@class) (as3eff@find (cdr as3efb@id*) (cons (car as3efb@id*) as3efc@ok*))) (as3198@syntax-error (car as3efb@id*) '"invalid " as3ef7@class)))))) (as3e94@gen-clause (lambda (as3ecd@x as3ece@keys as3ecf@clauses as3ed0@r as3ed1@mr as3ed2@pat as3ed3@fender as3ed4@expr) (call-with-values (lambda () (as30ba@convert-pattern as3ed2@pat as3ece@keys)) (lambda (as3ee1@as3ede as3ee2@as3ee0) (let ((as3ee5@pvars as3ee2@as3ee0) (as3ee6@p as3ee1@as3ede)) (if (not (as2ebf@distinct-bound-ids? (map car as3ee5@pvars))) (as3e92@invalid-ids-error (map car as3ee5@pvars) as3ed2@pat '"pattern variable") (if (not (for-all (lambda (as3ee9@x) (not (as30be@ellipsis? (car as3ee9@x)))) as3ee5@pvars)) (as319c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" as3ed2@pat) (let ((as3eeb@y (as2e3d@gen-lexical 'tmp))) (let ((as3eed@test (if (eq? as3ed3@fender '#t) as3eeb@y (let ((as3eef@call (as3e90@build-dispatch-call as3ee5@pvars as3ed3@fender as3eeb@y as3ed0@r as3ed1@mr))) (list 'if as3eeb@y as3eef@call (list 'quote '#f)))))) (let ((as3ef1@conseq (as3e90@build-dispatch-call as3ee5@pvars as3ed4@expr as3eeb@y as3ed0@r as3ed1@mr))) (let ((as3ef3@altern (as3e96@gen-syntax-case as3ecd@x as3ece@keys as3ecf@clauses as3ed0@r as3ed1@mr))) (list (as2e18@as2d4a@build-lambda '#f (list as3eeb@y) (list 'if as3eed@test as3ef1@conseq as3ef3@altern)) (list '(primitive syntax-dispatch) as3ecd@x (list 'quote as3ee6@p)))))))))))))) (as3e96@gen-syntax-case (lambda (as3eab@x as3eac@keys as3ead@clauses as3eae@r as3eaf@mr) (if (null? as3ead@clauses) (list '(primitive syntax-error) as3eab@x) (let ((as3eb5@t (car as3ead@clauses))) (let ((as3eb7@ls/false (as30bc@syntax-dispatch as3eb5@t '(any any)))) (if as3eb7@ls/false (apply (lambda (as3eb9@pat as3eba@expr) (if (and (as2eb5@id? as3eb9@pat) (not (as2ec1@bound-id-member? as3eb9@pat as3eac@keys)) (not (as30be@ellipsis? as3eb9@pat))) (if (as2ebb@free-id=? as3eb9@pat (as3044@scheme-stx '_)) (as30de@chi-expr as3eba@expr as3eae@r as3eaf@mr) (let ((as3ebd@lab (as2e41@gen-label as3eb9@pat)) (as3ebe@lex (as2e3d@gen-lexical as3eb9@pat))) (let ((as3ec1@body (as30de@chi-expr (as2ea1@add-subst (as2e75@make-full-rib (list as3eb9@pat) (list as3ebd@lab)) as3eba@expr) (cons (cons as3ebd@lab (as2ecf@make-binding 'syntax (cons as3ebe@lex '0))) as3eae@r) as3eaf@mr))) (list (as2e18@as2d4a@build-lambda '#f (list as3ebe@lex) as3ec1@body) as3eab@x)))) (as3e94@gen-clause as3eab@x as3eac@keys (cdr as3ead@clauses) as3eae@r as3eaf@mr as3eb9@pat '#t as3eba@expr))) as3eb7@ls/false) (let ((as3ec3@t as3eb5@t)) (let ((as3ec5@ls/false (as30bc@syntax-dispatch as3ec3@t '(any any any)))) (if as3ec5@ls/false (apply (lambda (as3ec7@pat as3ec8@fender as3ec9@expr) (as3e94@gen-clause as3eab@x as3eac@keys (cdr as3ead@clauses) as3eae@r as3eaf@mr as3ec7@pat as3ec8@fender as3ec9@expr)) as3ec5@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3ec3@t))))))))))) (lambda (as3e97@e as3e98@r as3e99@mr) (let ((as3e9d@t as3e97@e)) (let ((as3e9f@ls/false (as30bc@syntax-dispatch as3e9d@t '(_ any each-any . each-any)))) (if as3e9f@ls/false (apply (lambda (as3ea1@expr as3ea2@keys as3ea3@clauses) (begin (as30c2@verify-literals as3ea2@keys as3e97@e) (let ((as3ea7@x (as2e3d@gen-lexical 'tmp))) (let ((as3ea9@body (as3e96@gen-syntax-case as3ea7@x as3ea2@keys as3ea3@clauses as3e98@r as3e99@mr))) (list (as2e18@as2d4a@build-lambda '#f (list as3ea7@x) as3ea9@body) (as30de@chi-expr as3ea1@expr as3e98@r as3e99@mr)))))) as3e9f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3e9d@t))))))) (set! as4b96@as30c4@syntax-case-transformer as30c4@syntax-case-transformer) (set! as30c6@ellipsis-map (lambda (as3f1b@proc as3f1c@ls . as3f1f@ls*) (letrec* ((as3f22@who '...)) (begin (if (not (list? as3f1c@ls)) (assertion-violation as3f22@who '"not a list" as3f1c@ls) (void)) (if (not (null? as3f1f@ls*)) (let ((as3f23@n (length as3f1c@ls))) (for-each (lambda (as3f25@x) (begin (if (not (list? as3f25@x)) (assertion-violation as3f22@who '"not a list" as3f25@x) (void)) (if (not (= (length as3f25@x) as3f23@n)) (assertion-violation as3f22@who '"length mismatch" as3f1c@ls as3f25@x) (void)))) as3f1f@ls*)) (void)) (apply map as3f1b@proc as3f1c@ls as3f1f@ls*))))) (set! as4b97@as30c6@ellipsis-map as30c6@ellipsis-map) (set! as30c8@syntax-transformer (letrec* ((as3f28@gen-syntax (lambda (as3f9f@src as3fa0@e as3fa1@r as3fa2@maps as3fa3@ellipsis? as3fa4@vec?) (let ((as3fab@t as3fa0@e)) (let ((as3fad@ls/false (as30bc@syntax-dispatch as3fab@t 'any))) (if (and as3fad@ls/false (apply (lambda (as3faf@dots) (as3fa3@ellipsis? as3faf@dots)) as3fad@ls/false)) (apply (lambda (as3fb1@dots) (as319c@syntax-violation '#f '"misplaced ellipsis in syntax form" as3f9f@src)) as3fad@ls/false) (let ((as3fb3@t as3fab@t)) (let ((as3fb5@ls/false (as30bc@syntax-dispatch as3fb3@t 'any))) (if (and as3fb5@ls/false (apply (lambda (as3fb7@id) (as2eb5@id? as3fb7@id)) as3fb5@ls/false)) (apply (lambda (as3fb9@id) (let ((as3fbb@label (as2ecb@id->label as3fa0@e))) (let ((as3fbd@b (as2ecd@label->binding as3fbb@label as3fa1@r))) (if (eq? (as2ed1@binding-type as3fbd@b) 'syntax) (call-with-values (lambda () (let ((as3fc3@var.lev (as2ed3@binding-value as3fbd@b))) (as3f2a@gen-ref as3f9f@src (car as3fc3@var.lev) (cdr as3fc3@var.lev) as3fa2@maps))) (lambda (as3fc5@as3fc0 as3fc6@as3fc2) (let ((as3fc9@maps as3fc6@as3fc2) (as3fca@var as3fc5@as3fc0)) (values (list 'ref as3fca@var) as3fc9@maps)))) (values (list 'quote as3fa0@e) as3fa2@maps))))) as3fb5@ls/false) (let ((as3fcd@t as3fb3@t)) (let ((as3fcf@ls/false (as30bc@syntax-dispatch as3fcd@t '(any any)))) (if (and as3fcf@ls/false (apply (lambda (as3fd1@dots as3fd2@e) (as3fa3@ellipsis? as3fd1@dots)) as3fcf@ls/false)) (apply (lambda (as3fd5@dots as3fd6@e) (if as3fa4@vec? (as319c@syntax-violation '#f '"misplaced ellipsis in syntax form" as3f9f@src) (as3f28@gen-syntax as3f9f@src as3fd6@e as3fa1@r as3fa2@maps (lambda (as3fd9@x) '#f) '#f))) as3fcf@ls/false) (let ((as3fdb@t as3fcd@t)) (let ((as3fdd@ls/false (as30bc@syntax-dispatch as3fdb@t '(any any . any)))) (if (and as3fdd@ls/false (apply (lambda (as3fdf@x as3fe0@dots as3fe1@y) (as3fa3@ellipsis? as3fe0@dots)) as3fdd@ls/false)) (apply (lambda (as3fe5@x as3fe6@dots as3fe7@y) (let as3ffd@f ((as3feb@y as3fe7@y) (as3fec@k (lambda (as3fef@maps) (call-with-values (lambda () (as3f28@gen-syntax as3f9f@src as3fe5@x as3fa1@r (cons '() as3fef@maps) as3fa3@ellipsis? '#f)) (lambda (as3ff5@as3ff2 as3ff6@as3ff4) (let ((as3ff9@maps as3ff6@as3ff4) (as3ffa@x as3ff5@as3ff2)) (if (null? (car as3ff9@maps)) (as319c@syntax-violation '#f '"extra ellipsis in syntax form" as3f9f@src) (values (as3f30@gen-map as3ffa@x (car as3ff9@maps)) (cdr as3ff9@maps))))))))) (let ((as3fff@t as3feb@y)) (let ((as4001@ls/false (as30bc@syntax-dispatch as3fff@t '()))) (if as4001@ls/false (apply (lambda () (as3fec@k as3fa2@maps)) as4001@ls/false) (let ((as4003@t as3fff@t)) (let ((as4005@ls/false (as30bc@syntax-dispatch as4003@t '(any . any)))) (if (and as4005@ls/false (apply (lambda (as4007@dots as4008@y) (as3fa3@ellipsis? as4007@dots)) as4005@ls/false)) (apply (lambda (as400b@dots as400c@y) (as3ffd@f as400c@y (lambda (as400f@maps) (call-with-values (lambda () (as3fec@k (cons '() as400f@maps))) (lambda (as4015@as4012 as4016@as4014) (let ((as4019@maps as4016@as4014) (as401a@x as4015@as4012)) (if (null? (car as4019@maps)) (as319c@syntax-violation '#f '"extra ellipsis in syntax form" as3f9f@src) (values (as3f2e@gen-mappend as401a@x (car as4019@maps)) (cdr as4019@maps))))))))) as4005@ls/false) (let ((as401d@t as4003@t)) (let ((as401f@ls/false (as30bc@syntax-dispatch as401d@t '_))) (if as401f@ls/false (apply (lambda () (call-with-values (lambda () (as3f28@gen-syntax as3f9f@src as3feb@y as3fa1@r as3fa2@maps as3fa3@ellipsis? as3fa4@vec?)) (lambda (as4025@as4022 as4026@as4024) (let ((as4029@maps as4026@as4024) (as402a@y as4025@as4022)) (call-with-values (lambda () (as3fec@k as4029@maps)) (lambda (as4031@as402e as4032@as4030) (let ((as4035@maps as4032@as4030) (as4036@x as4031@as402e)) (values (as3f2c@gen-append as4036@x as402a@y) as4035@maps)))))))) as401f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as401d@t)))))))))))) as3fdd@ls/false) (let ((as4039@t as3fdb@t)) (let ((as403b@ls/false (as30bc@syntax-dispatch as4039@t '(any . any)))) (if as403b@ls/false (apply (lambda (as403d@x as403e@y) (call-with-values (lambda () (as3f28@gen-syntax as3f9f@src as403d@x as3fa1@r as3fa2@maps as3fa3@ellipsis? '#f)) (lambda (as4045@as4042 as4046@as4044) (let ((as4049@maps as4046@as4044) (as404a@xnew as4045@as4042)) (call-with-values (lambda () (as3f28@gen-syntax as3f9f@src as403e@y as3fa1@r as4049@maps as3fa3@ellipsis? as3fa4@vec?)) (lambda (as4051@as404e as4052@as4050) (let ((as4055@maps as4052@as4050) (as4056@ynew as4051@as404e)) (values (as3f32@gen-cons as3fa0@e as403d@x as403e@y as404a@xnew as4056@ynew) as4055@maps)))))))) as403b@ls/false) (let ((as4059@t as4039@t)) (let ((as405b@ls/false (as30bc@syntax-dispatch as4059@t '#(vector each-any)))) (if as405b@ls/false (apply (lambda (as405d@ls) (call-with-values (lambda () (as3f28@gen-syntax as3f9f@src as405d@ls as3fa1@r as3fa2@maps as3fa3@ellipsis? '#t)) (lambda (as4063@as4060 as4064@as4062) (let ((as4067@maps as4064@as4062) (as4068@lsnew as4063@as4060)) (values (as3f34@gen-vector as3fa0@e as405d@ls as4068@lsnew) as4067@maps))))) as405b@ls/false) (let ((as406b@t as4059@t)) (let ((as406d@ls/false (as30bc@syntax-dispatch as406b@t '_))) (if as406d@ls/false (apply (lambda () (values (list 'quote as3fa0@e) as3fa2@maps)) as406d@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as406b@t)))))))))))))))))))))))) (as3f2a@gen-ref (lambda (as3f85@src as3f86@var as3f87@level as3f88@maps) (if (= as3f87@level '0) (values as3f86@var as3f88@maps) (if (null? as3f88@maps) (as319c@syntax-violation '#f '"missing ellipsis in syntax form" as3f85@src) (call-with-values (lambda () (as3f2a@gen-ref as3f85@src as3f86@var (- as3f87@level '1) (cdr as3f88@maps))) (lambda (as3f91@as3f8e as3f92@as3f90) (let ((as3f95@outer-maps as3f92@as3f90) (as3f96@outer-var as3f91@as3f8e)) (let ((as3f99@t (assq as3f96@outer-var (car as3f88@maps)))) (if as3f99@t ((lambda (as3f9b@b) (values (cdr as3f9b@b) as3f88@maps)) as3f99@t) (let ((as3f9d@inner-var (as2e3d@gen-lexical 'tmp))) (values as3f9d@inner-var (cons (cons (cons as3f96@outer-var as3f9d@inner-var) (car as3f88@maps)) as3f95@outer-maps)))))))))))) (as3f2c@gen-append (lambda (as3f81@x as3f82@y) (if (fast-equal? as3f82@y ''()) as3f81@x (list 'append as3f81@x as3f82@y)))) (as3f2e@gen-mappend (lambda (as3f7d@e as3f7e@map-env) (list 'apply '(primitive append) (as3f30@gen-map as3f7d@e as3f7e@map-env)))) (as3f30@gen-map (lambda (as3f6b@e as3f6c@map-env) (let ((as3f6f@formals (map cdr as3f6c@map-env)) (as3f70@actuals (map (lambda (as3f73@x) (list 'ref (car as3f73@x))) as3f6c@map-env))) (if (eq? (car as3f6b@e) 'ref) (car as3f70@actuals) (if (for-all (lambda (as3f75@x) (and (eq? (car as3f75@x) 'ref) (memq (cadr as3f75@x) as3f6f@formals))) (cdr as3f6b@e)) (let ((as3f77@args (map (let ((as3f79@r (map cons as3f6f@formals as3f70@actuals))) (lambda (as3f7b@x) (cdr (assq (cadr as3f7b@x) as3f79@r)))) (cdr as3f6b@e)))) (cons 'map (cons (list 'primitive (car as3f6b@e)) as3f77@args))) (cons* 'map (list 'lambda as3f6f@formals as3f6b@e) as3f70@actuals)))))) (as3f32@gen-cons (lambda (as3f5b@e as3f5c@x as3f5d@y as3f5e@xnew as3f5f@ynew) (let ((as3f65@t (car as3f5f@ynew))) (if (memv as3f65@t '(quote)) (if (eq? (car as3f5e@xnew) 'quote) (let ((as3f67@xnew (cadr as3f5e@xnew)) (as3f68@ynew (cadr as3f5f@ynew))) (if (and (eq? as3f67@xnew as3f5c@x) (eq? as3f68@ynew as3f5d@y)) (list 'quote as3f5b@e) (list 'quote (cons as3f67@xnew as3f68@ynew)))) (if (null? (cadr as3f5f@ynew)) (list 'list as3f5e@xnew) (list 'cons as3f5e@xnew as3f5f@ynew))) (if (memv as3f65@t '(list)) (cons 'list (cons as3f5e@xnew (cdr as3f5f@ynew))) (list 'cons as3f5e@xnew as3f5f@ynew)))))) (as3f34@gen-vector (lambda (as3f55@e as3f56@ls as3f57@lsnew) (if (eq? (car as3f57@lsnew) 'quote) (if (eq? (cadr as3f57@lsnew) as3f56@ls) (list 'quote as3f55@e) (list 'quote (list->vector (cadr as3f57@lsnew)))) (if (eq? (car as3f57@lsnew) 'list) (cons 'vector (cdr as3f57@lsnew)) (list 'list->vector as3f57@lsnew))))) (as3f36@regen (lambda (as3f4f@x) (let ((as3f51@t (car as3f4f@x))) (if (memv as3f51@t '(ref)) (cadr as3f4f@x) (if (memv as3f51@t '(primitive)) (list 'primitive (cadr as3f4f@x)) (if (memv as3f51@t '(quote)) (list 'quote (cadr as3f4f@x)) (if (memv as3f51@t '(lambda)) (as2e18@as2d4a@build-lambda '#f (cadr as3f4f@x) (as3f36@regen (caddr as3f4f@x))) (if (memv as3f51@t '(map)) (let ((as3f53@ls (map as3f36@regen (cdr as3f4f@x)))) (cons '(primitive ellipsis-map) as3f53@ls)) (cons (list 'primitive (car as3f4f@x)) (map as3f36@regen (cdr as3f4f@x)))))))))))) (lambda (as3f37@e as3f38@r as3f39@mr) (let ((as3f3d@t as3f37@e)) (let ((as3f3f@ls/false (as30bc@syntax-dispatch as3f3d@t '(_ any)))) (if as3f3f@ls/false (apply (lambda (as3f41@x) (call-with-values (lambda () (as3f28@gen-syntax as3f37@e as3f41@x as3f38@r '() as30be@ellipsis? '#f)) (lambda (as3f47@as3f44 as3f48@as3f46) (let ((as3f4b@maps as3f48@as3f46) (as3f4c@e as3f47@as3f44)) (as3f36@regen as3f4c@e))))) as3f3f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as3f3d@t))))))) (set! as4b98@as30c8@syntax-transformer as30c8@syntax-transformer) (set! as30ca@core-macro-transformer (lambda (as406f@name) (let ((as4071@t as406f@name)) (if (memv as4071@t '(quote)) as306c@quote-transformer (if (memv as4071@t '(lambda)) as3070@lambda-transformer (if (memv as4071@t '(case-lambda)) as306e@case-lambda-transformer (if (memv as4071@t '(letrec)) as3054@letrec-transformer (if (memv as4071@t '(letrec*)) as3056@letrec*-transformer (if (memv as4071@t '(let)) as3052@let-transformer (if (memv as4071@t '(if)) as3064@if-transformer (if (memv as4071@t '(and)) as3066@and-transformer (if (memv as4071@t '(or)) as3068@or-transformer (if (memv as4071@t '(foreign-call)) as30b8@foreign-call-transformer (if (memv as4071@t '(syntax-case)) as30c4@syntax-case-transformer (if (memv as4071@t '(syntax)) as30c8@syntax-transformer (if (memv as4071@t '(type-descriptor)) as305a@type-descriptor-transformer (if (memv as4071@t '(record-type-descriptor)) as305c@record-type-descriptor-transformer (if (memv as4071@t '(record-constructor-descriptor)) as305e@record-constructor-descriptor-transformer (if (memv as4071@t '(fluid-let-syntax)) as3058@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" as406f@name)))))))))))))))))))) (set! as4b99@as30ca@core-macro-transformer as30ca@core-macro-transformer) (set! as30cc@symbol-macro (lambda (as4073@x as4074@set) (let ((as4077@t as4073@x)) (let ((as4079@ls/false (as30bc@syntax-dispatch as4077@t '(_ any)))) (if (and as4079@ls/false (apply (lambda (as407b@name) (and (as2eb5@id? as407b@name) (memq (as2eb7@id->sym as407b@name) as4074@set))) as4079@ls/false)) (apply (lambda (as407d@name) (as3072@bless (list 'quote as407d@name))) as4079@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4077@t)))))) (set! as4b9a@as30cc@symbol-macro as30cc@symbol-macro) (set! as30ce@macro-transformer (lambda (as407f@x) (if (procedure? as407f@x) as407f@x (if (symbol? as407f@x) (let ((as4081@t as407f@x)) (if (memv as4081@t '(define-record-type)) as30b0@define-record-type-macro (if (memv as4081@t '(define-struct)) as30ae@define-struct-macro (if (memv as4081@t '(include)) as30a4@include-macro (if (memv as4081@t '(cond)) as30a0@cond-macro (if (memv as4081@t '(let)) as3078@let-macro (if (memv as4081@t '(do)) as3098@do-macro (if (memv as4081@t '(or)) as309c@or-macro (if (memv as4081@t '(and)) as309e@and-macro (if (memv as4081@t '(let*)) as309a@let*-macro (if (memv as4081@t '(let-values)) as307a@let-values-macro (if (memv as4081@t '(let*-values)) as307c@let*-values-macro (if (memv as4081@t '(syntax-rules)) as30a8@syntax-rules-macro (if (memv as4081@t '(quasiquote)) as30aa@quasiquote-macro (if (memv as4081@t '(quasisyntax)) as30ac@quasisyntax-macro (if (memv as4081@t '(with-syntax)) as3074@with-syntax-macro (if (memv as4081@t '(when)) as3060@when-macro (if (memv as4081@t '(unless)) as3062@unless-macro (if (memv as4081@t '(case)) as306a@case-macro (if (memv as4081@t '(identifier-syntax)) as3096@identifier-syntax-macro (if (memv as4081@t '(time)) as308e@time-macro (if (memv as4081@t '(delay)) as3090@delay-macro (if (memv as4081@t '(assert)) as3092@assert-macro (if (memv as4081@t '(endianness)) as3094@endianness-macro (if (memv as4081@t '(guard)) as308a@guard-macro (if (memv as4081@t '(define-enumeration)) as308c@define-enumeration-macro (if (memv as4081@t '(trace-lambda)) as307e@trace-lambda-macro (if (memv as4081@t '(trace-define)) as3080@trace-define-macro (if (memv as4081@t '(trace-define-syntax)) as3082@trace-define-syntax-macro (if (memv as4081@t '(trace-let-syntax)) as3086@trace-let-syntax-macro (if (memv as4081@t '(trace-letrec-syntax)) as3088@trace-letrec-syntax-macro (if (memv as4081@t '(define-condition-type)) as30b2@define-condition-type-macro (if (memv as4081@t '(parameterize)) as30b6@parameterize-macro (if (memv as4081@t '(include-into)) as30a6@include-into-macro (if (memv as4081@t '(eol-style)) (lambda (as4083@x) (as30cc@symbol-macro as4083@x '(none lf cr crlf nel crnel ls))) (if (memv as4081@t '(error-handling-mode)) (lambda (as4085@x) (as30cc@symbol-macro as4085@x '(ignore raise replace))) (if (memv as4081@t '(buffer-mode)) (lambda (as4087@x) (as30cc@symbol-macro as4087@x '(none line block))) (if (memv as4081@t '(file-options)) as2e30@file-options-macro (if (memv as4081@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) as30b4@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" as407f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" as407f@x))))) (set! as4b9b@as30ce@macro-transformer as30ce@macro-transformer) (set! as30d0@local-macro-transformer (lambda (as4089@x) (car as4089@x))) (set! as4b9c@as30d0@local-macro-transformer as30d0@local-macro-transformer) (set! as30d2@do-macro-call (lambda (as408b@transformer as408c@expr) (let ((as408f@out (as408b@transformer (as2e9f@add-mark as2e99@anti-mark as408c@expr '#f)))) (begin (let as4093@f ((as4091@x as408f@out)) (if (not (as2e81@stx? as4091@x)) (if (pair? as4091@x) (begin (as4093@f (car as4091@x)) (as4093@f (cdr as4091@x))) (if (vector? as4091@x) (vector-for-each as4093@f as4091@x) (if (symbol? as4091@x) (as319c@syntax-violation '#f '"raw symbol encountered in output of macro" as408c@expr as4091@x) (void)))) (void))) (as2e9f@add-mark (as2e97@gen-mark) as408f@out as408c@expr))))) (set! as4b9d@as30d2@do-macro-call as30d2@do-macro-call) (set! as30d4@chi-macro (lambda (as4095@p as4096@e) (as30d2@do-macro-call (as30ce@macro-transformer as4095@p) as4096@e))) (set! as4b9e@as30d4@chi-macro as30d4@chi-macro) (set! as30d6@chi-local-macro (lambda (as4099@p as409a@e) (as30d2@do-macro-call (as30d0@local-macro-transformer as4099@p) as409a@e))) (set! as4b9f@as30d6@chi-local-macro as30d6@chi-local-macro) (set! as30d8@chi-global-macro (lambda (as409d@p as409e@e) (let ((as40a1@lib (car as409d@p)) (as40a2@loc (cdr as409d@p))) (begin (as2cd2@as2b21@visit-library as40a1@lib) (let ((as40a5@x (symbol-value as40a2@loc))) (let ((as40a7@transformer (if (procedure? as40a5@x) as40a5@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" as40a5@x)))) (as30d2@do-macro-call as40a7@transformer as409e@e))))))) (set! as4ba0@as30d8@chi-global-macro as30d8@chi-global-macro) (set! as30da@chi-expr* (lambda (as40a9@e* as40aa@r as40ab@mr) (if (null? as40a9@e*) '() (let ((as40af@e (as30de@chi-expr (car as40a9@e*) as40aa@r as40ab@mr))) (cons as40af@e (as30da@chi-expr* (cdr as40a9@e*) as40aa@r as40ab@mr)))))) (set! as4ba1@as30da@chi-expr* as30da@chi-expr*) (set! as30dc@chi-application (lambda (as40b1@e as40b2@r as40b3@mr) (let ((as40b7@t as40b1@e)) (let ((as40b9@ls/false (as30bc@syntax-dispatch as40b7@t '(any . each-any)))) (if as40b9@ls/false (apply (lambda (as40bb@rator as40bc@rands) (let ((as40bf@rator (as30de@chi-expr as40bb@rator as40b2@r as40b3@mr))) (cons as40bf@rator (as30da@chi-expr* as40bc@rands as40b2@r as40b3@mr)))) as40b9@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as40b7@t)))))) (set! as4ba2@as30dc@chi-application as30dc@chi-application) (set! as30de@chi-expr (lambda (as40c1@e as40c2@r as40c3@mr) (call-with-values (lambda () (as2ed7@syntax-type as40c1@e as40c2@r)) (lambda (as40cd@as40c8 as40ce@as40ca as40cf@as40cc) (let ((as40d3@kwd as40cf@as40cc) (as40d4@value as40ce@as40ca) (as40d5@type as40cd@as40c8)) (let ((as40d9@t as40d5@type)) (if (memv as40d9@t '(core-macro)) (let ((as40db@transformer (as30ca@core-macro-transformer as40d4@value))) (as40db@transformer as40c1@e as40c2@r as40c3@mr)) (if (memv as40d9@t '(global)) (let ((as40dd@lib (car as40d4@value))) (let ((as40df@loc (cdr as40d4@value))) (begin ((as3124@inv-collector) as40dd@lib) as40df@loc))) (if (memv as40d9@t '(core-prim)) (let ((as40e1@name as40d4@value)) (list 'primitive as40e1@name)) (if (memv as40d9@t '(call)) (as30dc@chi-application as40c1@e as40c2@r as40c3@mr) (if (memv as40d9@t '(lexical)) (let ((as40e3@lex (as3046@lexical-var as40d4@value))) as40e3@lex) (if (memv as40d9@t '(global-macro global-macro!)) (as30de@chi-expr (as30d8@chi-global-macro as40d4@value as40c1@e) as40c2@r as40c3@mr) (if (memv as40d9@t '(local-macro local-macro!)) (as30de@chi-expr (as30d6@chi-local-macro as40d4@value as40c1@e) as40c2@r as40c3@mr) (if (memv as40d9@t '(macro macro!)) (as30de@chi-expr (as30d4@chi-macro as40d4@value as40c1@e) as40c2@r as40c3@mr) (if (memv as40d9@t '(constant)) (let ((as40e5@datum as40d4@value)) (list 'quote as40e5@datum)) (if (memv as40d9@t '(set!)) (as30e0@chi-set! as40c1@e as40c2@r as40c3@mr) (if (memv as40d9@t '(begin)) (let ((as40e7@t as40c1@e)) (let ((as40e9@ls/false (as30bc@syntax-dispatch as40e7@t '(_ any . each-any)))) (if as40e9@ls/false (apply (lambda (as40eb@x as40ec@x*) (as2e1a@as2d7a@build-sequence '#f (as30da@chi-expr* (cons as40eb@x as40ec@x*) as40c2@r as40c3@mr))) as40e9@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as40e7@t)))) (if (memv as40d9@t '(let-syntax letrec-syntax)) (let ((as40ef@t as40c1@e)) (let ((as40f1@ls/false (as30bc@syntax-dispatch as40ef@t '(_ #(each (any any)) any . each-any)))) (if (and as40f1@ls/false (apply (lambda (as40f3@xlhs* as40f4@xrhs* as40f5@xbody as40f6@xbody*) (if (not (as2ebd@valid-bound-ids? as40f3@xlhs*)) (as319c@syntax-violation '#f '"invalid identifiers" as40c1@e) (void))) as40f1@ls/false)) (apply (lambda (as40fb@xlhs* as40fc@xrhs* as40fd@xbody as40fe@xbody*) (let ((as4103@xlab* (map as2e41@gen-label as40fb@xlhs*))) (let ((as4105@xrib (as2e75@make-full-rib as40fb@xlhs* as4103@xlab*))) (let ((as4107@xb* (map (lambda (as4109@x) (as2eed@make-eval-transformer (as3116@expand-transformer (if (eq? as40d5@type 'let-syntax) as4109@x (as2ea1@add-subst as4105@xrib as4109@x)) as40c3@mr))) as40fc@xrhs*))) (as2e1a@as2d7a@build-sequence '#f (as30da@chi-expr* (map (lambda (as410b@x) (as2ea1@add-subst as4105@xrib as410b@x)) (cons as40fd@xbody as40fe@xbody*)) (append (map cons as4103@xlab* as4107@xb*) as40c2@r) (append (map cons as4103@xlab* as4107@xb*) as40c3@mr))))))) as40f1@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as40ef@t)))) (if (memv as40d9@t '(displaced-lexical)) (as319c@syntax-violation '#f '"identifier out of context" as40c1@e) (if (memv as40d9@t '(syntax)) (as319c@syntax-violation '#f '"reference to pattern variable outside a syntax form" as40c1@e) (if (memv as40d9@t '(define define-syntax module import library)) (as319c@syntax-violation '#f (string-append (let ((as410d@t as40d5@type)) (if (memv as410d@t '(define)) '"a definition" (if (memv as410d@t '(define-syntax)) '"a define-syntax" (if (memv as410d@t '(module)) '"a module definition" (if (memv as410d@t '(library)) '"a library definition" (if (memv as410d@t '(import)) '"an import declaration" (if (memv as410d@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") as40c1@e) (if (memv as40d9@t '(mutable)) (as319c@syntax-violation '#f '"attempt to reference an unexportable variable" as40c1@e) (as319c@syntax-violation '#f '"invalid expression" as40c1@e))))))))))))))))))))))) (set! as4ba3@as30de@chi-expr as30de@chi-expr) (set! as30e0@chi-set! (lambda (as410f@e as4110@r as4111@mr) (let ((as4115@t as410f@e)) (let ((as4117@ls/false (as30bc@syntax-dispatch as4115@t '(_ any any)))) (if (and as4117@ls/false (apply (lambda (as4119@x as411a@v) (as2eb5@id? as4119@x)) as4117@ls/false)) (apply (lambda (as411d@x as411e@v) (call-with-values (lambda () (as2ed7@syntax-type as411d@x as4110@r)) (lambda (as4127@as4122 as4128@as4124 as4129@as4126) (let ((as412d@kwd as4129@as4126) (as412e@value as4128@as4124) (as412f@type as4127@as4122)) (let ((as4133@t as412f@type)) (if (memv as4133@t '(lexical)) (begin (as304a@set-lexical-mutable! as412e@value '#t) (list 'set! (as3046@lexical-var as412e@value) (as30de@chi-expr as411e@v as4110@r as4111@mr))) (if (memv as4133@t '(core-prim)) (as319c@syntax-violation '#f '"cannot modify imported core primitive" as410f@e) (if (memv as4133@t '(global)) (as319c@syntax-violation '#f '"attempt to modify imported binding" as410f@e) (if (memv as4133@t '(global-macro!)) (as30de@chi-expr (as30d8@chi-global-macro as412e@value as410f@e) as4110@r as4111@mr) (if (memv as4133@t '(local-macro!)) (as30de@chi-expr (as30d6@chi-local-macro as412e@value as410f@e) as4110@r as4111@mr) (if (memv as4133@t '(mutable)) (as319c@syntax-violation '#f '"attempt to assign to an unexportable variable" as410f@e) (as319c@syntax-violation '#f '"invalid syntax" as410f@e)))))))))))) as4117@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4115@t)))))) (set! as4ba4@as30e0@chi-set! as30e0@chi-set!) (set! as30e2@verify-formals (lambda (as4135@fmls as4136@stx) (let ((as4139@t as4135@fmls)) (let ((as413b@ls/false (as30bc@syntax-dispatch as4139@t 'each-any))) (if as413b@ls/false (apply (lambda (as413d@x*) (if (not (as2ebd@valid-bound-ids? as413d@x*)) (as3076@invalid-fmls-error as4136@stx as4135@fmls) (void))) as413b@ls/false) (let ((as413f@t as4139@t)) (let ((as4141@ls/false (as30bc@syntax-dispatch as413f@t '#(each+ any () any)))) (if as4141@ls/false (apply (lambda (as4143@x* as4144@x) (if (not (as2ebd@valid-bound-ids? (cons as4144@x as4143@x*))) (as3076@invalid-fmls-error as4136@stx as4135@fmls) (void))) as4141@ls/false) (let ((as4147@t as413f@t)) (let ((as4149@ls/false (as30bc@syntax-dispatch as4147@t '_))) (if as4149@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid syntax" as4136@stx)) as4149@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4147@t)))))))))))) (set! as4ba5@as30e2@verify-formals as30e2@verify-formals) (set! as30e4@chi-lambda-clause (lambda (as414b@stx as414c@fmls as414d@body* as414e@r as414f@mr) (let ((as4155@t as414c@fmls)) (let ((as4157@ls/false (as30bc@syntax-dispatch as4155@t 'each-any))) (if as4157@ls/false (apply (lambda (as4159@x*) (begin (as30e2@verify-formals as414c@fmls as414b@stx) (let ((as415b@lex* (map as2e3d@gen-lexical as4159@x*)) (as415c@lab* (map as2e41@gen-label as4159@x*))) (values as415b@lex* (as30f4@chi-internal (as2ea1@add-subst (as2e75@make-full-rib as4159@x* as415c@lab*) as414d@body*) (as304e@add-lexicals as415c@lab* as415b@lex* as414e@r) as414f@mr))))) as4157@ls/false) (let ((as415f@t as4155@t)) (let ((as4161@ls/false (as30bc@syntax-dispatch as415f@t '#(each+ any () any)))) (if as4161@ls/false (apply (lambda (as4163@x* as4164@x) (begin (as30e2@verify-formals as414c@fmls as414b@stx) (let ((as4167@lex* (map as2e3d@gen-lexical as4163@x*)) (as4168@lab* (map as2e41@gen-label as4163@x*)) (as4169@lex (as2e3d@gen-lexical as4164@x)) (as416a@lab (as2e41@gen-label as4164@x))) (values (append as4167@lex* as4169@lex) (as30f4@chi-internal (as2ea1@add-subst (as2e75@make-full-rib (cons as4164@x as4163@x*) (cons as416a@lab as4168@lab*)) as414d@body*) (as304e@add-lexicals (cons as416a@lab as4168@lab*) (cons as4169@lex as4167@lex*) as414e@r) as414f@mr))))) as4161@ls/false) (let ((as416f@t as415f@t)) (let ((as4171@ls/false (as30bc@syntax-dispatch as416f@t '_))) (if as4171@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid syntax" as414c@fmls)) as4171@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as416f@t)))))))))))) (set! as4ba6@as30e4@chi-lambda-clause as30e4@chi-lambda-clause) (set! as30e6@chi-lambda-clause* (lambda (as4173@stx as4174@fmls* as4175@body** as4176@r as4177@mr) (if (null? as4174@fmls*) (values '() '()) (call-with-values (lambda () (as30e4@chi-lambda-clause as4173@stx (car as4174@fmls*) (car as4175@body**) as4176@r as4177@mr)) (lambda (as4181@as417e as4182@as4180) (let ((as4185@b as4182@as4180) (as4186@a as4181@as417e)) (call-with-values (lambda () (as30e6@chi-lambda-clause* as4173@stx (cdr as4174@fmls*) (cdr as4175@body**) as4176@r as4177@mr)) (lambda (as418d@as418a as418e@as418c) (let ((as4191@b* as418e@as418c) (as4192@a* as418d@as418a)) (values (cons as4186@a as4192@a*) (cons as4185@b as4191@b*))))))))))) (set! as4ba7@as30e6@chi-lambda-clause* as30e6@chi-lambda-clause*) (set! as30e8@chi-defun (lambda (as4195@x as4196@r as4197@mr) (let ((as419b@fmls (car as4195@x)) (as419c@body* (cdr as4195@x))) (call-with-values (lambda () (as30e4@chi-lambda-clause as419b@fmls as419b@fmls as419c@body* as4196@r as4197@mr)) (lambda (as41a3@as41a0 as41a4@as41a2) (let ((as41a7@body as41a4@as41a2) (as41a8@fmls as41a3@as41a0)) (as2e18@as2d4a@build-lambda '#f as41a8@fmls as41a7@body))))))) (set! as4ba8@as30e8@chi-defun as30e8@chi-defun) (set! as30ea@chi-rhs (lambda (as41ab@rhs as41ac@r as41ad@mr) (let ((as41b1@t (car as41ab@rhs))) (if (memv as41b1@t '(defun)) (as30e8@chi-defun (cdr as41ab@rhs) as41ac@r as41ad@mr) (if (memv as41b1@t '(expr)) (let ((as41b3@expr (cdr as41ab@rhs))) (as30de@chi-expr as41b3@expr as41ac@r as41ad@mr)) (if (memv as41b1@t '(top-expr)) (let ((as41b5@expr (cdr as41ab@rhs))) (as2e1a@as2d7a@build-sequence '#f (list (as30de@chi-expr as41b5@expr as41ac@r as41ad@mr) (as2e1b@as2d7c@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" as41ab@rhs))))))) (set! as4ba9@as30ea@chi-rhs as30ea@chi-rhs) (set! as30ec@expand-interaction-rhs*/init* (lambda (as41b7@lhs* as41b8@rhs* as41b9@init* as41ba@r as41bb@mr) (let as41c5@f ((as41c1@lhs* as41b7@lhs*) (as41c2@rhs* as41b8@rhs*)) (if (null? as41c1@lhs*) (map (lambda (as41c7@x) (as30de@chi-expr as41c7@x as41ba@r as41bb@mr)) as41b9@init*) (let ((as41c9@lhs (car as41c1@lhs*)) (as41ca@rhs (car as41c2@rhs*))) (let ((as41cd@t (car as41ca@rhs))) (if (memv as41cd@t '(defun)) (let ((as41cf@rhs (as30e8@chi-defun (cdr as41ca@rhs) as41ba@r as41bb@mr))) (cons (list 'set! as41c9@lhs as41cf@rhs) (as41c5@f (cdr as41c1@lhs*) (cdr as41c2@rhs*)))) (if (memv as41cd@t '(expr)) (let ((as41d1@rhs (as30de@chi-expr (cdr as41ca@rhs) as41ba@r as41bb@mr))) (cons (list 'set! as41c9@lhs as41d1@rhs) (as41c5@f (cdr as41c1@lhs*) (cdr as41c2@rhs*)))) (if (memv as41cd@t '(top-expr)) (let ((as41d3@e (as30de@chi-expr (cdr as41ca@rhs) as41ba@r as41bb@mr))) (cons as41d3@e (as41c5@f (cdr as41c1@lhs*) (cdr as41c2@rhs*)))) (error 'expand-interaction '"invallid" as41ca@rhs)))))))))) (set! as4baa@as30ec@expand-interaction-rhs*/init* as30ec@expand-interaction-rhs*/init*) (set! as30ee@chi-rhs* (lambda (as41d5@rhs* as41d6@r as41d7@mr) (let as41dd@f ((as41db@ls as41d5@rhs*)) (if (null? as41db@ls) '() (let ((as41df@a (as30ea@chi-rhs (car as41db@ls) as41d6@r as41d7@mr))) (cons as41df@a (as41dd@f (cdr as41db@ls)))))))) (set! as4bab@as30ee@chi-rhs* as30ee@chi-rhs*) (set! as30f0@find-bound=? (lambda (as41e1@x as41e2@lhs* as41e3@rhs*) (if (null? as41e2@lhs*) '#f (if (as2eb9@bound-id=? as41e1@x (car as41e2@lhs*)) (car as41e3@rhs*) (as30f0@find-bound=? as41e1@x (cdr as41e2@lhs*) (cdr as41e3@rhs*)))))) (set! as4bac@as30f0@find-bound=? as30f0@find-bound=?) (set! as30f2@find-dups (lambda (as41e7@ls) (let as41ed@f ((as41e9@ls as41e7@ls) (as41ea@dups '())) (if (null? as41e9@ls) as41ea@dups (let ((as41ef@t (as30f0@find-bound=? (car as41e9@ls) (cdr as41e9@ls) (cdr as41e9@ls)))) (if as41ef@t ((lambda (as41f1@x) (as41ed@f (cdr as41e9@ls) (cons (list (car as41e9@ls) as41f1@x) as41ea@dups))) as41ef@t) (as41ed@f (cdr as41e9@ls) as41ea@dups))))))) (set! as4bad@as30f2@find-dups as30f2@find-dups) (set! as30f4@chi-internal (lambda (as41f3@e* as41f4@r as41f5@mr) (let ((as41f9@rib (as2e69@make-empty-rib))) (call-with-values (lambda () (as3114@chi-body* (map (lambda (as420b@x) (as2ea1@add-subst as41f9@rib as420b@x)) (as2eb3@syntax->list as41f3@e*)) as41f4@r as41f5@mr '() '() '() '() '() as41f9@rib '#f)) (lambda (as420d@as41fc as420e@as41fe as420f@as4200 as4210@as4202 as4211@as4204 as4212@as4206 as4213@as4208 as4214@as420a) (let ((as421d@_exp* as4214@as420a) (as421e@kwd* as4213@as4208) (as421f@mod** as4212@as4206) (as4220@rhs* as4211@as4204) (as4221@lex* as4210@as4202) (as4222@mr as420f@as4200) (as4223@r as420e@as41fe) (as4224@e* as420d@as41fc)) (begin (if (null? as4224@e*) (as319c@syntax-violation '#f '"no expression in body" as4224@e*) (void)) (let ((as422d@init* (as30da@chi-expr* (append (apply append (reverse as421f@mod**)) as4224@e*) as4223@r as4222@mr))) (let ((as422f@rhs* (as30ee@chi-rhs* as4220@rhs* as4223@r as4222@mr))) (as2e1f@as2d84@build-letrec* '#f (reverse as4221@lex*) (reverse as422f@rhs*) (as2e1a@as2d7a@build-sequence '#f as422d@init*))))))))))) (set! as4bae@as30f4@chi-internal as30f4@chi-internal) (set! as30f6@parse-module (lambda (as4231@e) (let ((as4233@t as4231@e)) (let ((as4235@ls/false (as30bc@syntax-dispatch as4233@t '(_ each-any . each-any)))) (if as4235@ls/false (apply (lambda (as4237@export* as4238@b*) (begin (if (not (for-all as2eb5@id? as4237@export*)) (as319c@syntax-violation '#f '"module exports must be identifiers" as4231@e) (void)) (values '#f (list->vector as4237@export*) as4238@b*))) as4235@ls/false) (let ((as423b@t as4233@t)) (let ((as423d@ls/false (as30bc@syntax-dispatch as423b@t '(_ any each-any . each-any)))) (if as423d@ls/false (apply (lambda (as423f@name as4240@export* as4241@b*) (begin (if (not (as2eb5@id? as423f@name)) (as319c@syntax-violation '#f '"module name must be an identifier" as4231@e) (void)) (if (not (for-all as2eb5@id? as4240@export*)) (as319c@syntax-violation '#f '"module exports must be identifiers" as4231@e) (void)) (values as423f@name (list->vector as4240@export*) as4241@b*))) as423d@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as423b@t))))))))) (set! as4baf@as30f6@parse-module as30f6@parse-module) (set! as3100@module-interface? (lambda (as4245@x) (and (simple-struct? as4245@x) (eq? (simple-struct-name as4245@x) 'module-interface)))) (set! as4bb0@as3100@module-interface? as3100@module-interface?) (set! as3102@module-interface-first-mark (lambda (as4247@x) (simple-struct-ref as4247@x '0))) (set! as4bb1@as3102@module-interface-first-mark as3102@module-interface-first-mark) (set! as3104@set-module-interface-first-mark! (lambda (as4249@x as424a@val) (simple-struct-set! as4249@x '0 as424a@val))) (set! as4bb2@as3104@set-module-interface-first-mark! as3104@set-module-interface-first-mark!) (set! as3106@module-interface-exp-id-vec (lambda (as424d@x) (simple-struct-ref as424d@x '1))) (set! as4bb3@as3106@module-interface-exp-id-vec as3106@module-interface-exp-id-vec) (set! as3108@set-module-interface-exp-id-vec! (lambda (as424f@x as4250@val) (simple-struct-set! as424f@x '1 as4250@val))) (set! as4bb4@as3108@set-module-interface-exp-id-vec! as3108@set-module-interface-exp-id-vec!) (set! as310a@module-interface-exp-lab-vec (lambda (as4253@x) (simple-struct-ref as4253@x '2))) (set! as4bb5@as310a@module-interface-exp-lab-vec as310a@module-interface-exp-lab-vec) (set! as310c@set-module-interface-exp-lab-vec! (lambda (as4255@x as4256@val) (simple-struct-set! as4255@x '2 as4256@val))) (set! as4bb6@as310c@set-module-interface-exp-lab-vec! as310c@set-module-interface-exp-lab-vec!) (set! as310e@dummy '3) (set! as4bb7@as310e@dummy as310e@dummy) (set! as3110@module-interface-exp-id* (lambda (as4259@iface as425a@id) (letrec* ((as425e@diff-marks (lambda (as4265@ls as4266@x) (begin (if (null? as4265@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((as4269@a (car as4265@ls))) (if (eq? as4269@a as4266@x) '() (cons as4269@a (as425e@diff-marks (cdr as4265@ls) as4266@x)))))))) (let ((as425f@diff (as425e@diff-marks (as2e87@stx-mark* as425a@id) (as3102@module-interface-first-mark as4259@iface))) (as4260@id-vec (as3106@module-interface-exp-id-vec as4259@iface))) (if (null? as425f@diff) as4260@id-vec (vector-map (lambda (as4263@x) (make-simple-struct 'stx '5 (list (as2e83@stx-expr as4263@x) (append as425f@diff (as2e87@stx-mark* as4263@x)) '() '()))) as4260@id-vec)))))) (set! as4bb8@as3110@module-interface-exp-id* as3110@module-interface-exp-id*) (set! as3112@chi-internal-module (lambda (as426b@e as426c@r as426d@mr as426e@lex* as426f@rhs* as4270@mod** as4271@kwd*) (call-with-values (lambda () (as30f6@parse-module as426b@e)) (lambda (as427f@as427a as4280@as427c as4281@as427e) (let ((as4285@e* as4281@as427e) (as4286@exp-id* as4280@as427c) (as4287@name as427f@as427a)) (let ((as428b@rib (as2e69@make-empty-rib))) (let ((as428d@e* (map (lambda (as428f@x) (as2ea1@add-subst as428b@rib as428f@x)) (as2eb3@syntax->list as4285@e*)))) (call-with-values (lambda () (as3114@chi-body* as428d@e* as426c@r as426d@mr as426e@lex* as426f@rhs* as4270@mod** as4271@kwd* '() as428b@rib '#f)) (lambda (as42a1@as4292 as42a2@as4294 as42a3@as4296 as42a4@as4298 as42a5@as429a as42a6@as429c as42a7@as429e as42a8@as42a0) (let ((as42b1@_exp* as42a8@as42a0) (as42b2@kwd* as42a7@as429e) (as42b3@mod** as42a6@as429c) (as42b4@rhs* as42a5@as429a) (as42b5@lex* as42a4@as4298) (as42b6@mr as42a3@as4296) (as42b7@r as42a2@as4294) (as42b8@e* as42a1@as4292)) (let ((as42c1@exp-lab* (vector-map (lambda (as42c5@x) (or (as2ecb@id->label (make-simple-struct 'stx '5 (list (as2eb7@id->sym as42c5@x) (as2e87@stx-mark* as42c5@x) (list as428b@rib) '()))) (as319c@syntax-violation '#f '"cannot find module export" as42c5@x))) as4286@exp-id*)) (as42c2@mod** (cons as42b8@e* as42b3@mod**))) (if (not as4287@name) (values as42b5@lex* as42b4@rhs* as4286@exp-id* as42c1@exp-lab* as42b7@r as42b6@mr as42c2@mod** as42b2@kwd*) (let ((as42c7@lab (as2e41@gen-label 'module)) (as42c8@iface (make-simple-struct 'module-interface '4 (list (car (as2e87@stx-mark* as4287@name)) (vector-map (lambda (as42cb@x) (make-simple-struct 'stx '5 (list (as2e83@stx-expr as42cb@x) (as2e87@stx-mark* as42cb@x) '() '()))) as4286@exp-id*) as42c1@exp-lab*)))) (values as42b5@lex* as42b4@rhs* (vector as4287@name) (vector as42c7@lab) (cons (cons as42c7@lab (cons '$module as42c8@iface)) as42b7@r) (cons (cons as42c7@lab (cons '$module as42c8@iface)) as42b6@mr) as42c2@mod** as42b2@kwd*)))))))))))))) (set! as4bb9@as3112@chi-internal-module as3112@chi-internal-module) (set! as3114@chi-body* (lambda (as42cd@e* as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42d3@kwd* as42d4@exp* as42d5@rib as42d6@top?) (if (null? as42cd@e*) (values as42cd@e* as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42d3@kwd* as42d4@exp*) (let ((as42e1@e (car as42cd@e*))) (call-with-values (lambda () (as2ed7@syntax-type as42e1@e as42ce@r)) (lambda (as42e9@as42e4 as42ea@as42e6 as42eb@as42e8) (let ((as42ef@kwd as42eb@as42e8) (as42f0@value as42ea@as42e6) (as42f1@type as42e9@as42e4)) (let ((as42f5@kwd* (if (as2eb5@id? as42ef@kwd) (cons as42ef@kwd as42d3@kwd*) as42d3@kwd*))) (let ((as42f7@t as42f1@type)) (if (memv as42f7@t '(define)) (call-with-values (lambda () (as303e@parse-define as42e1@e)) (lambda (as42fd@as42fa as42fe@as42fc) (let ((as4301@rhs as42fe@as42fc) (as4302@id as42fd@as42fa)) (begin (if (as2ec1@bound-id-member? as4302@id as42f5@kwd*) (as319c@syntax-violation '#f '"cannot redefine keyword" as42e1@e) (void)) (call-with-values (lambda () (as2e45@gen-define-label+loc as4302@id as42d5@rib)) (lambda (as4309@as4306 as430a@as4308) (let ((as430d@lex as430a@as4308) (as430e@lab as4309@as4306)) (begin (as2e6b@extend-rib! as42d5@rib as4302@id as430e@lab) (as3114@chi-body* (cdr as42cd@e*) (as304c@add-lexical as430e@lab as430d@lex as42ce@r) as42cf@mr (cons as430d@lex as42d0@lex*) (cons as4301@rhs as42d1@rhs*) as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?))))))))) (if (memv as42f7@t '(define-syntax)) (call-with-values (lambda () (as3040@parse-define-syntax as42e1@e)) (lambda (as4315@as4312 as4316@as4314) (let ((as4319@rhs as4316@as4314) (as431a@id as4315@as4312)) (begin (if (as2ec1@bound-id-member? as431a@id as42f5@kwd*) (as319c@syntax-violation '#f '"cannot redefine keyword" as42e1@e) (void)) (let ((as431d@lab (as2e47@gen-define-label as431a@id as42d5@rib)) (as431e@expanded-rhs (as3116@expand-transformer as4319@rhs as42cf@mr))) (begin (as2e6b@extend-rib! as42d5@rib as431a@id as431d@lab) (let ((as4321@b (as2eed@make-eval-transformer as431e@expanded-rhs))) (as3114@chi-body* (cdr as42cd@e*) (cons (cons as431d@lab as4321@b) as42ce@r) (cons (cons as431d@lab as4321@b) as42cf@mr) as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?)))))))) (if (memv as42f7@t '(let-syntax letrec-syntax)) (let ((as4323@t as42e1@e)) (let ((as4325@ls/false (as30bc@syntax-dispatch as4323@t '(_ #(each (any any)) . each-any)))) (if (and as4325@ls/false (apply (lambda (as4327@xlhs* as4328@xrhs* as4329@xbody*) (if (not (as2ebd@valid-bound-ids? as4327@xlhs*)) (as319c@syntax-violation '#f '"invalid identifiers" as42e1@e) (void))) as4325@ls/false)) (apply (lambda (as432d@xlhs* as432e@xrhs* as432f@xbody*) (let ((as4333@xlab* (map as2e41@gen-label as432d@xlhs*))) (let ((as4335@xrib (as2e75@make-full-rib as432d@xlhs* as4333@xlab*))) (let ((as4337@xb* (map (lambda (as4339@x) (as2eed@make-eval-transformer (as3116@expand-transformer (if (eq? as42f1@type 'let-syntax) as4339@x (as2ea1@add-subst as4335@xrib as4339@x)) as42cf@mr))) as432e@xrhs*))) (as3114@chi-body* (append (map (lambda (as433b@x) (as2ea1@add-subst as4335@xrib as433b@x)) as432f@xbody*) (cdr as42cd@e*)) (append (map cons as4333@xlab* as4337@xb*) as42ce@r) (append (map cons as4333@xlab* as4337@xb*) as42cf@mr) as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?))))) as4325@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4323@t)))) (if (memv as42f7@t '(begin)) (let ((as433d@t as42e1@e)) (let ((as433f@ls/false (as30bc@syntax-dispatch as433d@t '(_ . each-any)))) (if as433f@ls/false (apply (lambda (as4341@x*) (as3114@chi-body* (append as4341@x* (cdr as42cd@e*)) as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?)) as433f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as433d@t)))) (if (memv as42f7@t '(global-macro global-macro!)) (as3114@chi-body* (cons (as2ea1@add-subst as42d5@rib (as30d8@chi-global-macro as42f0@value as42e1@e)) (cdr as42cd@e*)) as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?) (if (memv as42f7@t '(local-macro local-macro!)) (as3114@chi-body* (cons (as2ea1@add-subst as42d5@rib (as30d6@chi-local-macro as42f0@value as42e1@e)) (cdr as42cd@e*)) as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?) (if (memv as42f7@t '(macro macro!)) (as3114@chi-body* (cons (as2ea1@add-subst as42d5@rib (as30d4@chi-macro as42f0@value as42e1@e)) (cdr as42cd@e*)) as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?) (if (memv as42f7@t '(module)) (call-with-values (lambda () (as3112@chi-internal-module as42e1@e as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd*)) (lambda (as4353@as4344 as4354@as4346 as4355@as4348 as4356@as434a as4357@as434c as4358@as434e as4359@as4350 as435a@as4352) (let ((as4363@kwd* as435a@as4352) (as4364@mod** as4359@as4350) (as4365@mr as4358@as434e) (as4366@r as4357@as434c) (as4367@m-exp-lab* as4356@as434a) (as4368@m-exp-id* as4355@as4348) (as4369@rhs* as4354@as4346) (as436a@lex* as4353@as4344)) (begin (vector-for-each (lambda (as4373@id as4374@lab) (as2e6b@extend-rib! as42d5@rib as4373@id as4374@lab)) as4368@m-exp-id* as4367@m-exp-lab*) (as3114@chi-body* (cdr as42cd@e*) as4366@r as4365@mr as436a@lex* as4369@rhs* as4364@mod** as4363@kwd* as42d4@exp* as42d5@rib as42d6@top?))))) (if (memv as42f7@t '(library)) (begin (as317e@library-expander (as2ec9@stx->datum as42e1@e)) (as3114@chi-body* (cdr as42cd@e*) as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?)) (if (memv as42f7@t '(export)) (let ((as4377@t as42e1@e)) (let ((as4379@ls/false (as30bc@syntax-dispatch as4377@t '(_ . each-any)))) (if as4379@ls/false (apply (lambda (as437b@exp-decl*) (as3114@chi-body* (cdr as42cd@e*) as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* (append as437b@exp-decl* as42d4@exp*) as42d5@rib as42d6@top?)) as4379@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4377@t)))) (if (memv as42f7@t '(import)) (letrec* ((as437e@module-import? (lambda (as43d1@e) (let ((as43d3@t as43d1@e)) (let ((as43d5@ls/false (as30bc@syntax-dispatch as43d3@t '(_ any)))) (if (and as43d5@ls/false (apply (lambda (as43d7@id) (as2eb5@id? as43d7@id)) as43d5@ls/false)) (apply (lambda (as43d9@id) '#t) as43d5@ls/false) (let ((as43db@t as43d3@t)) (let ((as43dd@ls/false (as30bc@syntax-dispatch as43db@t '(_ . each-any)))) (if as43dd@ls/false (apply (lambda (as43df@imp*) '#f) as43dd@ls/false) (let ((as43e1@t as43db@t)) (let ((as43e3@ls/false (as30bc@syntax-dispatch as43e1@t '_))) (if as43e3@ls/false (apply (lambda () (as319c@syntax-violation '#f '"malformed import form" as43d1@e)) as43e3@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as43e1@t)))))))))))) (as4380@module-import (lambda (as43af@e as43b0@r) (let ((as43b3@t as43af@e)) (let ((as43b5@ls/false (as30bc@syntax-dispatch as43b3@t '(_ any)))) (if (and as43b5@ls/false (apply (lambda (as43b7@id) (as2eb5@id? as43b7@id)) as43b5@ls/false)) (apply (lambda (as43b9@id) (call-with-values (lambda () (as2ed7@syntax-type as43b9@id as43b0@r)) (lambda (as43c1@as43bc as43c2@as43be as43c3@as43c0) (let ((as43c7@kwd as43c3@as43c0) (as43c8@value as43c2@as43be) (as43c9@type as43c1@as43bc)) (let ((as43cd@t as43c9@type)) (if (memv as43cd@t '($module)) (let ((as43cf@iface as43c8@value)) (values (as3110@module-interface-exp-id* as43cf@iface as43b9@id) (as310a@module-interface-exp-lab-vec as43cf@iface))) (as319c@syntax-violation '#f '"invalid import" as43af@e))))))) as43b5@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as43b3@t)))))) (as4382@library-import (lambda (as4393@e) (let ((as4395@t as4393@e)) (let ((as4397@ls/false (as30bc@syntax-dispatch as4395@t '(any . each-any)))) (if as4397@ls/false (apply (lambda (as4399@ctxt as439a@imp*) (call-with-values (lambda () (as311e@parse-import-spec* (as31a2@syntax->datum as439a@imp*))) (lambda (as43a1@as439e as43a2@as43a0) (let ((as43a5@subst-labels as43a2@as43a0) (as43a6@subst-names as43a1@as439e)) (values (vector-map (lambda (as43a9@name) (as2e95@datum->stx as4399@ctxt as43a9@name)) as43a6@subst-names) as43a5@subst-labels))))) as4397@ls/false) (let ((as43ab@t as4395@t)) (let ((as43ad@ls/false (as30bc@syntax-dispatch as43ab@t '_))) (if as43ad@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid import form" as4393@e)) as43ad@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as43ab@t)))))))))) (begin (call-with-values (lambda () (if (as437e@module-import? as42e1@e) (as4380@module-import as42e1@e as42ce@r) (as4382@library-import as42e1@e))) (lambda (as4387@as4384 as4388@as4386) (let ((as438b@lab* as4388@as4386) (as438c@id* as4387@as4384)) (vector-for-each (lambda (as438f@id as4390@lab) (as2e6b@extend-rib! as42d5@rib as438f@id as4390@lab)) as438c@id* as438b@lab*)))) (as3114@chi-body* (cdr as42cd@e*) as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?))) (if as42d6@top? (as3114@chi-body* (cdr as42cd@e*) as42ce@r as42cf@mr (cons (as2e3d@gen-lexical 'dummy) as42d0@lex*) (cons (cons 'top-expr as42e1@e) as42d1@rhs*) as42d2@mod** as42f5@kwd* as42d4@exp* as42d5@rib as42d6@top?) (values as42cd@e* as42ce@r as42cf@mr as42d0@lex* as42d1@rhs* as42d2@mod** as42f5@kwd* as42d4@exp*)))))))))))))))))))))) (set! as4bba@as3114@chi-body* as3114@chi-body*) (set! as3116@expand-transformer (lambda (as43e5@expr as43e6@r) (let ((as43e9@rtc (as3122@make-collector))) (let ((as43eb@expanded-rhs (let ((as43f5@as43ee as3124@inv-collector) (as43f6@as43f0 as3126@vis-collector) (as43f7@as43f2 as43e9@rtc) (as43f8@as43f4 (lambda (as43fd@x) (values)))) (let ((as43ff@swap (lambda () (begin (let ((as4401@t (as43f5@as43ee))) (begin (as43f5@as43ee as43f7@as43f2) (set! as43f7@as43f2 as4401@t))) (let ((as4403@t (as43f6@as43f0))) (begin (as43f6@as43f0 as43f8@as43f4) (set! as43f8@as43f4 as4403@t))))))) (dynamic-wind as43ff@swap (lambda () (as30de@chi-expr as43e5@expr as43e6@r as43e6@r)) as43ff@swap))))) (begin (for-each (let ((as4405@mark-visit (as3126@vis-collector))) (lambda (as4407@x) (begin (as2cd1@as2b1f@invoke-library as4407@x) (as4405@mark-visit as4407@x)))) (as43e9@rtc)) as43eb@expanded-rhs))))) (set! as4bbb@as3116@expand-transformer as3116@expand-transformer) (set! as3118@parse-exports (lambda (as4409@exp*) (let as4411@f ((as440b@exp* as4409@exp*) (as440c@int* '()) (as440d@ext* '())) (if (null? as440b@exp*) (begin (if (not (as2ebd@valid-bound-ids? as440d@ext*)) (as319c@syntax-violation 'export '"invalid exports" (as30f2@find-dups as440d@ext*)) (void)) (values (map as31a2@syntax->datum as440d@ext*) as440c@int*)) (let ((as4413@t (car as440b@exp*))) (let ((as4415@ls/false (as30bc@syntax-dispatch as4413@t '(any . #(each (any any)))))) (if as4415@ls/false (apply (lambda (as4417@rename as4418@i* as4419@e*) (begin (if (not (and (eq? (as31a2@syntax->datum as4417@rename) 'rename) (for-all as2eb5@id? as4418@i*) (for-all as2eb5@id? as4419@e*))) (as319c@syntax-violation 'export '"invalid export specifier" (car as440b@exp*)) (void)) (as4411@f (cdr as440b@exp*) (append as4418@i* as440c@int*) (append as4419@e* as440d@ext*)))) as4415@ls/false) (let ((as441d@t as4413@t)) (let ((as441f@ls/false (as30bc@syntax-dispatch as441d@t 'any))) (if as441f@ls/false (apply (lambda (as4421@ie) (begin (if (not (as2eb5@id? as4421@ie)) (as319c@syntax-violation 'export '"invalid export" as4421@ie) (void)) (as4411@f (cdr as440b@exp*) (cons as4421@ie as440c@int*) (cons as4421@ie as440d@ext*)))) as441f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as441d@t))))))))))) (set! as4bbc@as3118@parse-exports as3118@parse-exports) (set! as311a@parse-library-name (lambda (as4423@spec) (letrec* ((as4426@parse (lambda (as4433@x) (let ((as4435@t as4433@x)) (let ((as4437@ls/false (as30bc@syntax-dispatch as4435@t '(each-any)))) (if (and as4437@ls/false (apply (lambda (as4439@v*) (for-all (lambda (as443b@x) (let ((as443d@x (as31a2@syntax->datum as443b@x))) (and (integer? as443d@x) (exact? as443d@x)))) as4439@v*)) as4437@ls/false)) (apply (lambda (as443f@v*) (values '() (map as31a2@syntax->datum as443f@v*))) as4437@ls/false) (let ((as4441@t as4435@t)) (let ((as4443@ls/false (as30bc@syntax-dispatch as4441@t '(any . any)))) (if (and as4443@ls/false (apply (lambda (as4445@x as4446@rest) (symbol? (as31a2@syntax->datum as4445@x))) as4443@ls/false)) (apply (lambda (as4449@x as444a@rest) (call-with-values (lambda () (as4426@parse as444a@rest)) (lambda (as4451@as444e as4452@as4450) (let ((as4455@v* as4452@as4450) (as4456@x* as4451@as444e)) (values (cons (as31a2@syntax->datum as4449@x) as4456@x*) as4455@v*))))) as4443@ls/false) (let ((as4459@t as4441@t)) (let ((as445b@ls/false (as30bc@syntax-dispatch as4459@t '()))) (if as445b@ls/false (apply (lambda () (values '() '())) as445b@ls/false) (let ((as445d@t as4459@t)) (let ((as445f@ls/false (as30bc@syntax-dispatch as445d@t '_))) (if as445f@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid library name" as4423@spec)) as445f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as445d@t)))))))))))))))) (call-with-values (lambda () (as4426@parse as4423@spec)) (lambda (as442b@as4428 as442c@as442a) (let ((as442f@ver* as442c@as442a) (as4430@name* as442b@as4428)) (begin (if (null? as4430@name*) (as319c@syntax-violation '#f '"empty library name" as4423@spec) (void)) (values as4430@name* as442f@ver*)))))))) (set! as4bbd@as311a@parse-library-name as311a@parse-library-name) (set! as311c@parse-library (lambda (as4461@e) (let ((as4463@t as4461@e)) (let ((as4465@ls/false (as30bc@syntax-dispatch as4463@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and as4465@ls/false (apply (lambda (as4467@library as4468@name* as4469@export as446a@exp* as446b@import as446c@imp* as446d@b*) (and (eq? (as31a2@syntax->datum as4469@export) 'export) (eq? (as31a2@syntax->datum as446b@import) 'import) (eq? (as31a2@syntax->datum as4467@library) 'library))) as4465@ls/false)) (apply (lambda (as4475@library as4476@name* as4477@export as4478@exp* as4479@import as447a@imp* as447b@b*) (values as4476@name* as4478@exp* as447a@imp* as447b@b*)) as4465@ls/false) (let ((as4483@t as4463@t)) (let ((as4485@ls/false (as30bc@syntax-dispatch as4483@t '_))) (if as4485@ls/false (apply (lambda () (as319c@syntax-violation '#f '"malformed library" as4461@e)) as4485@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4483@t))))))))) (set! as4bbe@as311c@parse-library as311c@parse-library) (set! as311e@parse-import-spec* (letrec* ((as4488@idsyn? (lambda (as4691@x) (symbol? (as31a2@syntax->datum as4691@x)))) (as448a@dup-error (lambda (as468f@name) (as319c@syntax-violation 'import '"two imports with different bindings" as468f@name))) (as448c@merge-substs (lambda (as467d@s as467e@subst) (letrec* ((as4682@insert-to-subst (lambda (as4683@a as4684@subst) (let ((as4687@name (car as4683@a)) (as4688@label (cdr as4683@a))) (let ((as468b@t (assq as4687@name as4684@subst))) (if as468b@t ((lambda (as468d@x) (if (eq? (cdr as468d@x) as4688@label) as4684@subst (as448a@dup-error as4687@name))) as468b@t) (cons as4683@a as4684@subst))))))) (if (null? as467d@s) as467e@subst (as4682@insert-to-subst (car as467d@s) (as448c@merge-substs (cdr as467d@s) as467e@subst)))))) (as448e@exclude* (lambda (as464d@sym* as464e@subst) (letrec* ((as4652@exclude (lambda (as466b@sym as466c@subst) (if (null? as466c@subst) (as319c@syntax-violation 'import '"cannot rename unbound identifier" as466b@sym) (if (eq? as466b@sym (caar as466c@subst)) (values (cdar as466c@subst) (cdr as466c@subst)) (let ((as466f@a (car as466c@subst))) (call-with-values (lambda () (as4652@exclude as466b@sym (cdr as466c@subst))) (lambda (as4675@as4672 as4676@as4674) (let ((as4679@subst as4676@as4674) (as467a@old as4675@as4672)) (values as467a@old (cons as466f@a as4679@subst))))))))))) (if (null? as464d@sym*) (values '() as464e@subst) (call-with-values (lambda () (as4652@exclude (car as464d@sym*) as464e@subst)) (lambda (as4657@as4654 as4658@as4656) (let ((as465b@subst as4658@as4656) (as465c@old as4657@as4654)) (call-with-values (lambda () (as448e@exclude* (cdr as464d@sym*) as465b@subst)) (lambda (as4663@as4660 as4664@as4662) (let ((as4667@subst as4664@as4662) (as4668@old* as4663@as4660)) (values (cons as465c@old as4668@old*) as4667@subst))))))))))) (as4490@find* (lambda (as4645@sym* as4646@subst) (map (lambda (as4649@x) (let ((as464b@t (assq as4649@x as4646@subst))) (if as464b@t (cdr as464b@t) (as319c@syntax-violation 'import '"cannot find identifier" as4649@x)))) as4645@sym*))) (as4492@rem* (lambda (as463d@sym* as463e@subst) (let as4643@f ((as4641@subst as463e@subst)) (if (null? as4641@subst) '() (if (memq (caar as4641@subst) as463d@sym*) (as4643@f (cdr as4641@subst)) (cons (car as4641@subst) (as4643@f (cdr as4641@subst)))))))) (as4494@remove-dups (lambda (as463b@ls) (if (null? as463b@ls) '() (if (memq (car as463b@ls) (cdr as463b@ls)) (as4494@remove-dups (cdr as463b@ls)) (cons (car as463b@ls) (as4494@remove-dups (cdr as463b@ls))))))) (as4496@parse-library-name (lambda (as4553@spec) (letrec* ((as4556@subversion? (lambda (as4637@x) (let ((as4639@x (as31a2@syntax->datum as4637@x))) (and (integer? as4639@x) (exact? as4639@x) (>= as4639@x '0))))) (as4558@subversion-pred (lambda (as45d7@x*) (let ((as45d9@t as45d7@x*)) (let ((as45db@ls/false (as30bc@syntax-dispatch as45d9@t 'any))) (if (and as45db@ls/false (apply (lambda (as45dd@n) (as4556@subversion? as45dd@n)) as45db@ls/false)) (apply (lambda (as45df@n) (lambda (as45e1@x) (= as45e1@x (as31a2@syntax->datum as45df@n)))) as45db@ls/false) (let ((as45e3@t as45d9@t)) (let ((as45e5@ls/false (as30bc@syntax-dispatch as45e3@t '(any . each-any)))) (if (and as45e5@ls/false (apply (lambda (as45e7@p? as45e8@sub*) (eq? (as31a2@syntax->datum as45e7@p?) 'and)) as45e5@ls/false)) (apply (lambda (as45eb@p? as45ec@sub*) (let ((as45ef@p* (map as4558@subversion-pred as45ec@sub*))) (lambda (as45f1@x) (for-all (lambda (as45f3@p) (as45f3@p as45f1@x)) as45ef@p*)))) as45e5@ls/false) (let ((as45f5@t as45e3@t)) (let ((as45f7@ls/false (as30bc@syntax-dispatch as45f5@t '(any . each-any)))) (if (and as45f7@ls/false (apply (lambda (as45f9@p? as45fa@sub*) (eq? (as31a2@syntax->datum as45f9@p?) 'or)) as45f7@ls/false)) (apply (lambda (as45fd@p? as45fe@sub*) (let ((as4601@p* (map as4558@subversion-pred as45fe@sub*))) (lambda (as4603@x) (exists (lambda (as4605@p) (as4605@p as4603@x)) as4601@p*)))) as45f7@ls/false) (let ((as4607@t as45f5@t)) (let ((as4609@ls/false (as30bc@syntax-dispatch as4607@t '(any any)))) (if (and as4609@ls/false (apply (lambda (as460b@p? as460c@sub) (eq? (as31a2@syntax->datum as460b@p?) 'not)) as4609@ls/false)) (apply (lambda (as460f@p? as4610@sub) (let ((as4613@p (as4558@subversion-pred as4610@sub))) (lambda (as4615@x) (not (as4613@p as4615@x))))) as4609@ls/false) (let ((as4617@t as4607@t)) (let ((as4619@ls/false (as30bc@syntax-dispatch as4617@t '(any any)))) (if (and as4619@ls/false (apply (lambda (as461b@p? as461c@n) (and (eq? (as31a2@syntax->datum as461b@p?) '<=) (as4556@subversion? as461c@n))) as4619@ls/false)) (apply (lambda (as461f@p? as4620@n) (lambda (as4623@x) (<= as4623@x (as31a2@syntax->datum as4620@n)))) as4619@ls/false) (let ((as4625@t as4617@t)) (let ((as4627@ls/false (as30bc@syntax-dispatch as4625@t '(any any)))) (if (and as4627@ls/false (apply (lambda (as4629@p? as462a@n) (and (eq? (as31a2@syntax->datum as4629@p?) '>=) (as4556@subversion? as462a@n))) as4627@ls/false)) (apply (lambda (as462d@p? as462e@n) (lambda (as4631@x) (>= as4631@x (as31a2@syntax->datum as462e@n)))) as4627@ls/false) (let ((as4633@t as4625@t)) (let ((as4635@ls/false (as30bc@syntax-dispatch as4633@t '_))) (if as4635@ls/false (apply (lambda () (as319c@syntax-violation 'import '"invalid sub-version spec" as4553@spec as45d7@x*)) as4635@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4633@t)))))))))))))))))))))))) (as455a@version-pred (lambda (as4587@x*) (let ((as4589@t as4587@x*)) (let ((as458b@ls/false (as30bc@syntax-dispatch as4589@t '()))) (if as458b@ls/false (apply (lambda () (lambda (as458d@x) '#t)) as458b@ls/false) (let ((as458f@t as4589@t)) (let ((as4591@ls/false (as30bc@syntax-dispatch as458f@t '(any . each-any)))) (if (and as4591@ls/false (apply (lambda (as4593@c as4594@ver*) (eq? (as31a2@syntax->datum as4593@c) 'and)) as4591@ls/false)) (apply (lambda (as4597@c as4598@ver*) (let ((as459b@p* (map as455a@version-pred as4598@ver*))) (lambda (as459d@x) (for-all (lambda (as459f@p) (as459f@p as459d@x)) as459b@p*)))) as4591@ls/false) (let ((as45a1@t as458f@t)) (let ((as45a3@ls/false (as30bc@syntax-dispatch as45a1@t '(any . each-any)))) (if (and as45a3@ls/false (apply (lambda (as45a5@c as45a6@ver*) (eq? (as31a2@syntax->datum as45a5@c) 'or)) as45a3@ls/false)) (apply (lambda (as45a9@c as45aa@ver*) (let ((as45ad@p* (map as455a@version-pred as45aa@ver*))) (lambda (as45af@x) (exists (lambda (as45b1@p) (as45b1@p as45af@x)) as45ad@p*)))) as45a3@ls/false) (let ((as45b3@t as45a1@t)) (let ((as45b5@ls/false (as30bc@syntax-dispatch as45b3@t '(any any)))) (if (and as45b5@ls/false (apply (lambda (as45b7@c as45b8@ver) (eq? (as31a2@syntax->datum as45b7@c) 'not)) as45b5@ls/false)) (apply (lambda (as45bb@c as45bc@ver) (let ((as45bf@p (as455a@version-pred as45bc@ver))) (lambda (as45c1@x) (not (as45bf@p as45c1@x))))) as45b5@ls/false) (let ((as45c3@t as45b3@t)) (let ((as45c5@ls/false (as30bc@syntax-dispatch as45c3@t 'each-any))) (if as45c5@ls/false (apply (lambda (as45c7@sub*) (let ((as45c9@p* (map as4558@subversion-pred as45c7@sub*))) (lambda (as45cb@x) (let as45d1@f ((as45cd@p* as45c9@p*) (as45ce@x as45cb@x)) (if (null? as45cd@p*) '#t (if (null? as45ce@x) '#f (and ((car as45cd@p*) (car as45ce@x)) (as45d1@f (cdr as45cd@p*) (cdr as45ce@x))))))))) as45c5@ls/false) (let ((as45d3@t as45c3@t)) (let ((as45d5@ls/false (as30bc@syntax-dispatch as45d3@t '_))) (if as45d5@ls/false (apply (lambda () (as319c@syntax-violation 'import '"invalid version spec" as4553@spec as4587@x*)) as45d5@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as45d3@t)))))))))))))))))))))) (let as455d@f ((as455b@x as4553@spec)) (let ((as455f@t as455b@x)) (let ((as4561@ls/false (as30bc@syntax-dispatch as455f@t '(each-any)))) (if as4561@ls/false (apply (lambda (as4563@version-spec*) (values '() (as455a@version-pred as4563@version-spec*))) as4561@ls/false) (let ((as4565@t as455f@t)) (let ((as4567@ls/false (as30bc@syntax-dispatch as4565@t '(any . any)))) (if (and as4567@ls/false (apply (lambda (as4569@x as456a@x*) (as4488@idsyn? as4569@x)) as4567@ls/false)) (apply (lambda (as456d@x as456e@x*) (call-with-values (lambda () (as455d@f as456e@x*)) (lambda (as4575@as4572 as4576@as4574) (let ((as4579@pred as4576@as4574) (as457a@name as4575@as4572)) (values (cons (as31a2@syntax->datum as456d@x) as457a@name) as4579@pred))))) as4567@ls/false) (let ((as457d@t as4565@t)) (let ((as457f@ls/false (as30bc@syntax-dispatch as457d@t '()))) (if as457f@ls/false (apply (lambda () (values '() (lambda (as4581@x) '#t))) as457f@ls/false) (let ((as4583@t as457d@t)) (let ((as4585@ls/false (as30bc@syntax-dispatch as4583@t '_))) (if as4585@ls/false (apply (lambda () (as319c@syntax-violation '#f '"invalid import spec" as4553@spec)) as4585@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4583@t))))))))))))))))) (as4498@import-library (lambda (as4543@spec*) (call-with-values (lambda () (as4496@parse-library-name as4543@spec*)) (lambda (as4549@as4546 as454a@as4548) (let ((as454d@pred as454a@as4548) (as454e@name as4549@as4546)) (begin (if (null? as454e@name) (as319c@syntax-violation 'import '"empty library name" as4543@spec*) (void)) (let ((as4551@lib (as2cca@as2b11@find-library-by-name as454e@name))) (begin (if (not as4551@lib) (as319c@syntax-violation 'import '"cannot find library with required name" as454e@name) (void)) (if (not (as454d@pred (as2ca4@as2ac5@library-version as4551@lib))) (as319c@syntax-violation 'import '"library does not satisfy version specification" as4543@spec* as4551@lib) (void)) ((as3128@imp-collector) as4551@lib) (as2cac@as2ad5@library-subst as4551@lib))))))))) (as449a@get-import (lambda (as44b5@spec) (let ((as44b7@t as44b5@spec)) (let ((as44b9@ls/false (as30bc@syntax-dispatch as44b7@t '(any . each-any)))) (if (and as44b9@ls/false (apply (lambda (as44bb@x as44bc@x*) (not (memq (as31a2@syntax->datum as44bb@x) '(for rename except only prefix library)))) as44b9@ls/false)) (apply (lambda (as44bf@x as44c0@x*) (as4498@import-library (cons as44bf@x as44c0@x*))) as44b9@ls/false) (let ((as44c3@t as44b7@t)) (let ((as44c5@ls/false (as30bc@syntax-dispatch as44c3@t '(any any . #(each (any any)))))) (if (and as44c5@ls/false (apply (lambda (as44c7@rename as44c8@isp as44c9@old* as44ca@new*) (and (eq? (as31a2@syntax->datum as44c7@rename) 'rename) (for-all as4488@idsyn? as44c9@old*) (for-all as4488@idsyn? as44ca@new*))) as44c5@ls/false)) (apply (lambda (as44cf@rename as44d0@isp as44d1@old* as44d2@new*) (let ((as44d7@subst (as449a@get-import as44d0@isp)) (as44d8@old* (map as31a2@syntax->datum as44d1@old*)) (as44d9@new* (map as31a2@syntax->datum as44d2@new*))) (let ((as44dd@old-label* (as4490@find* as44d8@old* as44d7@subst))) (let ((as44df@subst (as4492@rem* as44d8@old* as44d7@subst))) (as448c@merge-substs (map cons as44d9@new* as44dd@old-label*) as44df@subst))))) as44c5@ls/false) (let ((as44e1@t as44c3@t)) (let ((as44e3@ls/false (as30bc@syntax-dispatch as44e1@t '(any any . each-any)))) (if (and as44e3@ls/false (apply (lambda (as44e5@except as44e6@isp as44e7@sym*) (and (eq? (as31a2@syntax->datum as44e5@except) 'except) (for-all as4488@idsyn? as44e7@sym*))) as44e3@ls/false)) (apply (lambda (as44eb@except as44ec@isp as44ed@sym*) (let ((as44f1@subst (as449a@get-import as44ec@isp))) (as4492@rem* (map as31a2@syntax->datum as44ed@sym*) as44f1@subst))) as44e3@ls/false) (let ((as44f3@t as44e1@t)) (let ((as44f5@ls/false (as30bc@syntax-dispatch as44f3@t '(any any . each-any)))) (if (and as44f5@ls/false (apply (lambda (as44f7@only as44f8@isp as44f9@sym*) (and (eq? (as31a2@syntax->datum as44f7@only) 'only) (for-all as4488@idsyn? as44f9@sym*))) as44f5@ls/false)) (apply (lambda (as44fd@only as44fe@isp as44ff@sym*) (let ((as4503@subst (as449a@get-import as44fe@isp)) (as4504@sym* (map as31a2@syntax->datum as44ff@sym*))) (let ((as4507@sym* (as4494@remove-dups as4504@sym*))) (let ((as4509@lab* (as4490@find* as4507@sym* as4503@subst))) (map cons as4507@sym* as4509@lab*))))) as44f5@ls/false) (let ((as450b@t as44f3@t)) (let ((as450d@ls/false (as30bc@syntax-dispatch as450b@t '(any any any)))) (if (and as450d@ls/false (apply (lambda (as450f@prefix as4510@isp as4511@p) (and (eq? (as31a2@syntax->datum as450f@prefix) 'prefix) (as4488@idsyn? as4511@p))) as450d@ls/false)) (apply (lambda (as4515@prefix as4516@isp as4517@p) (let ((as451b@subst (as449a@get-import as4516@isp)) (as451c@prefix (symbol->string (as31a2@syntax->datum as4517@p)))) (map (lambda (as451f@x) (cons (string->symbol (string-append as451c@prefix (symbol->string (car as451f@x)))) (cdr as451f@x))) as451b@subst))) as450d@ls/false) (let ((as4521@t as450b@t)) (let ((as4523@ls/false (as30bc@syntax-dispatch as4521@t '(any each-any)))) (if (and as4523@ls/false (apply (lambda (as4525@library as4526@spec*) (eq? (as31a2@syntax->datum as4525@library) 'library)) as4523@ls/false)) (apply (lambda (as4529@library as452a@spec*) (as4498@import-library as452a@spec*)) as4523@ls/false) (let ((as452d@t as4521@t)) (let ((as452f@ls/false (as30bc@syntax-dispatch as452d@t '(any any . any)))) (if (and as452f@ls/false (apply (lambda (as4531@for as4532@isp as4533@rest) (eq? (as31a2@syntax->datum as4531@for) 'for)) as452f@ls/false)) (apply (lambda (as4537@for as4538@isp as4539@rest) (as449a@get-import as4538@isp)) as452f@ls/false) (let ((as453d@t as452d@t)) (let ((as453f@ls/false (as30bc@syntax-dispatch as453d@t 'any))) (if as453f@ls/false (apply (lambda (as4541@spec) (as319c@syntax-violation 'import '"invalid import spec" as4541@spec)) as453f@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as453d@t))))))))))))))))))))))))))) (as449c@add-imports! (lambda (as44a5@imp as44a6@h) (let ((as44a9@subst (as449a@get-import as44a5@imp))) (for-each (lambda (as44ab@x) (let ((as44ad@name (car as44ab@x)) (as44ae@label (cdr as44ab@x))) (let ((as44b1@t (hashtable-ref as44a6@h as44ad@name '#f))) (if as44b1@t ((lambda (as44b3@l) (if (not (eq? as44b3@l as44ae@label)) (as448a@dup-error as44ad@name) (void))) as44b1@t) (hashtable-set! as44a6@h as44ad@name as44ae@label))))) as44a9@subst))))) (lambda (as449d@imp*) (let as44a3@f ((as449f@imp* as449d@imp*) (as44a0@h (make-eq-hashtable))) (if (null? as449f@imp*) (hashtable-entries as44a0@h) (begin (as449c@add-imports! (car as449f@imp*) as44a0@h) (as44a3@f (cdr as449f@imp*) as44a0@h))))))) (set! as4bbf@as311e@parse-import-spec* as311e@parse-import-spec*) (set! as3120@make-top-rib (lambda (as4693@names as4694@labels) (let ((as4697@rib (as2e69@make-empty-rib))) (begin (vector-for-each (lambda (as4699@name as469a@label) (begin (if (not (symbol? as4699@name)) (error 'make-top-rib '"BUG: not a symbol" as4699@name) (void)) (as2e6d@extend-rib/nc! as4697@rib (make-simple-struct 'stx '5 (list as4699@name as2e39@top-mark* '() '())) as469a@label))) as4693@names as4694@labels) as4697@rib)))) (set! as4bc0@as3120@make-top-rib as3120@make-top-rib) (set! as3122@make-collector (lambda () (let ((as469d@ls '())) (lambda as46a1 (let ((as46a2 (length as46a1))) (if (= as46a2 '0) (apply (lambda () as469d@ls) as46a1) (if (= as46a2 '1) (apply (lambda (as469f@x) (set! as469d@ls (as2e32@set-cons as469f@x as469d@ls))) as46a1) (error 'apply '"invalid arg count")))))))) (set! as4bc1@as3122@make-collector as3122@make-collector) (set! as3124@inv-collector (as2a05@as28e3@make-parameter (lambda as46a3@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (as46a5@x) (begin (if (not (procedure? as46a5@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" as46a5@x) (void)) as46a5@x)))) (set! as4bc2@as3124@inv-collector as3124@inv-collector) (set! as3126@vis-collector (as2a05@as28e3@make-parameter (lambda as46a7@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (as46a9@x) (begin (if (not (procedure? as46a9@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" as46a9@x) (void)) as46a9@x)))) (set! as4bc3@as3126@vis-collector as3126@vis-collector) (set! as3128@imp-collector (as2a05@as28e3@make-parameter (lambda as46ab@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (as46ad@x) (begin (if (not (procedure? as46ad@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" as46ad@x) (void)) as46ad@x)))) (set! as4bc4@as3128@imp-collector as3128@imp-collector) (set! as312a@chi-library-internal (lambda (as46af@e* as46b0@rib as46b1@top?) (call-with-values (lambda () (as3114@chi-body* as46af@e* '() '() '() '() '() '() '() as46b0@rib as46b1@top?)) (lambda (as46c5@as46b6 as46c6@as46b8 as46c7@as46ba as46c8@as46bc as46c9@as46be as46ca@as46c0 as46cb@as46c2 as46cc@as46c4) (let ((as46d5@exp* as46cc@as46c4) (as46d6@_kwd* as46cb@as46c2) (as46d7@mod** as46ca@as46c0) (as46d8@rhs* as46c9@as46be) (as46d9@lex* as46c8@as46bc) (as46da@mr as46c7@as46ba) (as46db@r as46c6@as46b8) (as46dc@e* as46c5@as46b6)) (values (append (apply append (reverse as46d7@mod**)) as46dc@e*) as46db@r as46da@mr (reverse as46d9@lex*) (reverse as46d8@rhs*) as46d5@exp*)))))) (set! as4bc5@as312a@chi-library-internal as312a@chi-library-internal) (set! as312c@chi-interaction-expr (lambda (as46e5@e as46e6@rib as46e7@r) (call-with-values (lambda () (as3114@chi-body* (list as46e5@e) as46e7@r as46e7@r '() '() '() '() '() as46e6@rib '#t)) (lambda (as46fb@as46ec as46fc@as46ee as46fd@as46f0 as46fe@as46f2 as46ff@as46f4 as4700@as46f6 as4701@as46f8 as4702@as46fa) (let ((as470b@_exp* as4702@as46fa) (as470c@_kwd* as4701@as46f8) (as470d@mod** as4700@as46f6) (as470e@rhs* as46ff@as46f4) (as470f@lex* as46fe@as46f2) (as4710@mr as46fd@as46f0) (as4711@r as46fc@as46ee) (as4712@e* as46fb@as46ec)) (let ((as471b@e* (as30ec@expand-interaction-rhs*/init* (reverse as470f@lex*) (reverse as470e@rhs*) (append (apply append (reverse as470d@mod**)) as4712@e*) as4711@r as4710@mr))) (let ((as471d@e (if (null? as471b@e*) (as2e1b@as2d7c@build-void) (if (null? (cdr as471b@e*)) (car as471b@e*) (as2e1a@as2d7a@build-sequence '#f as471b@e*))))) (values as471d@e as4711@r)))))))) (set! as4bc6@as312c@chi-interaction-expr as312c@chi-interaction-expr) (set! as312e@library-body-expander (lambda (as471f@name as4720@main-exp* as4721@imp* as4722@b* as4723@top?) (letrec* ((as472a@itc (as3122@make-collector))) (let ((as4733@as472c as3128@imp-collector) (as4734@as472e as31ac@top-level-context) (as4735@as4730 as472a@itc) (as4736@as4732 '#f)) (let ((as473b@swap (lambda () (begin (let ((as473d@t (as4733@as472c))) (begin (as4733@as472c as4735@as4730) (set! as4735@as4730 as473d@t))) (let ((as473f@t (as4734@as472e))) (begin (as4734@as472e as4736@as4732) (set! as4736@as4732 as473f@t))))))) (dynamic-wind as473b@swap (lambda () (call-with-values (lambda () (as311e@parse-import-spec* as4721@imp*)) (lambda (as4745@as4742 as4746@as4744) (let ((as4749@subst-labels as4746@as4744) (as474a@subst-names as4745@as4742)) (let ((as474d@rib (as3120@make-top-rib as474a@subst-names as4749@subst-labels))) (letrec* ((as4750@wrap (lambda (as47cb@x) (make-simple-struct 'stx '5 (list as47cb@x as2e39@top-mark* (list as474d@rib) '()))))) (let ((as4751@b* (map as4750@wrap as4722@b*)) (as4752@main-exp* (map as4750@wrap as4720@main-exp*)) (as4753@rtc (as3122@make-collector)) (as4754@vtc (as3122@make-collector))) (let ((as4761@as475a as3124@inv-collector) (as4762@as475c as3126@vis-collector) (as4763@as475e as4753@rtc) (as4764@as4760 as4754@vtc)) (let ((as4769@swap (lambda () (begin (let ((as476b@t (as4761@as475a))) (begin (as4761@as475a as4763@as475e) (set! as4763@as475e as476b@t))) (let ((as476d@t (as4762@as475c))) (begin (as4762@as475c as4764@as4760) (set! as4764@as4760 as476d@t))))))) (dynamic-wind as4769@swap (lambda () (call-with-values (lambda () (as312a@chi-library-internal as4751@b* as474d@rib as4723@top?)) (lambda (as477b@as4770 as477c@as4772 as477d@as4774 as477e@as4776 as477f@as4778 as4780@as477a) (let ((as4787@internal-exp* as4780@as477a) (as4788@rhs* as477f@as4778) (as4789@lex* as477e@as4776) (as478a@mr as477d@as4774) (as478b@r as477c@as4772) (as478c@init* as477b@as4770)) (call-with-values (lambda () (as3118@parse-exports (append as4752@main-exp* as4787@internal-exp*))) (lambda (as4797@as4794 as4798@as4796) (let ((as479b@exp-id* as4798@as4796) (as479c@exp-name* as4797@as4794)) (begin (as2e71@seal-rib! as474d@rib) (let ((as479f@init* (as30da@chi-expr* as478c@init* as478b@r as478a@mr))) (let ((as47a1@rhs* (as30ee@chi-rhs* as4788@rhs* as478b@r as478a@mr))) (begin (as2e73@unseal-rib! as474d@rib) (let ((as47a3@loc* (map as2e3f@gen-global as4789@lex*)) (as47a4@export-subst (as3186@make-export-subst as479c@exp-name* as479b@exp-id*))) (letrec* ((as47a8@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (as3188@make-export-env/macros as4789@lex* as47a3@loc* as478b@r)) (lambda (as47af@as47aa as47b0@as47ac as47b1@as47ae) (let ((as47b5@macro* as47b1@as47ae) (as47b6@global* as47b0@as47ac) (as47b7@export-env as47af@as47aa)) (begin (for-each (lambda (as47bb@s) (let ((as47bd@name (car as47bb@s)) (as47be@label (cdr as47bb@s))) (let ((as47c1@p (assq as47be@label as47b7@export-env))) (if as47c1@p (let ((as47c3@b (cdr as47c1@p))) (let ((as47c5@type (car as47c3@b))) (if (eq? as47c5@type 'mutable) (as319c@syntax-violation 'export as47a8@errstr as47bd@name) (void)))) (void))))) as47a4@export-subst) (let ((as47c7@invoke-body (as2e20@as2d86@build-library-letrec* '#f as471f@name as4789@lex* as47a3@loc* as47a1@rhs* (if (null? as479f@init*) (as2e1b@as2d7c@build-void) (as2e1a@as2d7a@build-sequence '#f as479f@init*)))) (as47c8@invoke-definitions (map as2e17@as2cd9@build-global-define (map cdr as47b6@global*)))) (values (as472a@itc) (as4753@rtc) (as4754@vtc) (as2e1a@as2d7a@build-sequence '#f (append as47c8@invoke-definitions (list as47c7@invoke-body))) as47b5@macro* as47a4@export-subst as47b7@export-env))))))))))))))))))) as4769@swap)))))))))) as473b@swap)))))) (set! as4bc7@as312e@library-body-expander as312e@library-body-expander) (set! as3130@core-library-expander (lambda (as47cd@e as47ce@verify-name) (call-with-values (lambda () (as311c@parse-library as47cd@e)) (lambda (as47d9@as47d2 as47da@as47d4 as47db@as47d6 as47dc@as47d8) (let ((as47e1@b* as47dc@as47d8) (as47e2@imp* as47db@as47d6) (as47e3@exp* as47da@as47d4) (as47e4@name* as47d9@as47d2)) (call-with-values (lambda () (as311a@parse-library-name as47e4@name*)) (lambda (as47ed@as47ea as47ee@as47ec) (let ((as47f1@ver as47ee@as47ec) (as47f2@name as47ed@as47ea)) (begin (as47ce@verify-name as47f2@name) (call-with-values (lambda () (as312e@library-body-expander as47f2@name as47e3@exp* as47e2@imp* as47e1@b* '#f)) (lambda (as4803@as47f6 as4804@as47f8 as4805@as47fa as4806@as47fc as4807@as47fe as4808@as4800 as4809@as4802) (let ((as4811@export-env as4809@as4802) (as4812@export-subst as4808@as4800) (as4813@visit-code as4807@as47fe) (as4814@invoke-code as4806@as47fc) (as4815@visit-req* as4805@as47fa) (as4816@invoke-req* as4804@as47f8) (as4817@imp* as4803@as47f6)) (values as47f2@name as47f1@ver as4817@imp* as4816@invoke-req* as4815@visit-req* as4814@invoke-code as4813@visit-code as4812@export-subst as4811@export-env))))))))))))) (set! as4bc8@as3130@core-library-expander as3130@core-library-expander) (set! as3132@parse-top-level-program (lambda (as481f@e*) (let ((as4821@t as481f@e*)) (let ((as4823@ls/false (as30bc@syntax-dispatch as4821@t '((any . each-any) . each-any)))) (if (and as4823@ls/false (apply (lambda (as4825@import as4826@imp* as4827@b*) (eq? (as31a2@syntax->datum as4825@import) 'import)) as4823@ls/false)) (apply (lambda (as482b@import as482c@imp* as482d@b*) (values as482c@imp* as482d@b*)) as4823@ls/false) (let ((as4831@t as4821@t)) (let ((as4833@ls/false (as30bc@syntax-dispatch as4831@t '((any . any) . any)))) (if (and as4833@ls/false (apply (lambda (as4835@import as4836@x as4837@y) (eq? (as31a2@syntax->datum as4835@import) 'import)) as4833@ls/false)) (apply (lambda (as483b@import as483c@x as483d@y) (as319c@syntax-violation 'expander '"invalid syntax of top-level program" (as2eaf@syntax-car as481f@e*))) as4833@ls/false) (let ((as4841@t as4831@t)) (let ((as4843@ls/false (as30bc@syntax-dispatch as4841@t '_))) (if as4843@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) as4843@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4841@t)))))))))))) (set! as4bc9@as3132@parse-top-level-program as3132@parse-top-level-program) (set! as3134@top-level-expander (lambda (as4845@e*) (call-with-values (lambda () (as3132@parse-top-level-program as4845@e*)) (lambda (as484b@as4848 as484c@as484a) (let ((as484f@b* as484c@as484a) (as4850@imp* as484b@as4848)) (call-with-values (lambda () (as312e@library-body-expander '() '() as4850@imp* as484f@b* '#t)) (lambda (as4861@as4854 as4862@as4856 as4863@as4858 as4864@as485a as4865@as485c as4866@as485e as4867@as4860) (let ((as486f@export-env as4867@as4860) (as4870@export-subst as4866@as485e) (as4871@visit-code as4865@as485c) (as4872@invoke-code as4864@as485a) (as4873@visit-req* as4863@as4858) (as4874@invoke-req* as4862@as4856) (as4875@imp* as4861@as4854)) (values as4874@invoke-req* as4872@invoke-code))))))))) (set! as4bca@as3134@top-level-expander as3134@top-level-expander) (set! as3136@rp (as2a02@as28dd@make-record-printer 'env (lambda (as487d@x as487e@p as487f@wr) (display '"#<environment>" as487e@p)))) (set! as4bcb@as3136@rp as3136@rp) (set! as3140@env? (lambda (as4883@x) (and (simple-struct? as4883@x) (eq? (simple-struct-name as4883@x) 'env)))) (set! as4bcc@as3140@env? as3140@env?) (set! as3142@env-names (lambda (as4885@x) (simple-struct-ref as4885@x '0))) (set! as4bcd@as3142@env-names as3142@env-names) (set! as3144@set-env-names! (lambda (as4887@x as4888@val) (simple-struct-set! as4887@x '0 as4888@val))) (set! as4bce@as3144@set-env-names! as3144@set-env-names!) (set! as3146@env-labels (lambda (as488b@x) (simple-struct-ref as488b@x '1))) (set! as4bcf@as3146@env-labels as3146@env-labels) (set! as3148@set-env-labels! (lambda (as488d@x as488e@val) (simple-struct-set! as488d@x '1 as488e@val))) (set! as4bd0@as3148@set-env-labels! as3148@set-env-labels!) (set! as314a@env-itc (lambda (as4891@x) (simple-struct-ref as4891@x '2))) (set! as4bd1@as314a@env-itc as314a@env-itc) (set! as314c@set-env-itc! (lambda (as4893@x as4894@val) (simple-struct-set! as4893@x '2 as4894@val))) (set! as4bd2@as314c@set-env-itc! as314c@set-env-itc!) (set! as314e@dummy '3) (set! as4bd3@as314e@dummy as314e@dummy) (set! as3150@rp (as2a02@as28dd@make-record-printer 'interaction-env (lambda (as4897@x as4898@p as4899@wr) (display '"#<environment>" as4898@p)))) (set! as4bd4@as3150@rp as3150@rp) (set! as315a@interaction-env? (lambda (as489d@x) (and (simple-struct? as489d@x) (eq? (simple-struct-name as489d@x) 'interaction-env)))) (set! as4bd5@as315a@interaction-env? as315a@interaction-env?) (set! as315c@interaction-env-rib (lambda (as489f@x) (simple-struct-ref as489f@x '0))) (set! as4bd6@as315c@interaction-env-rib as315c@interaction-env-rib) (set! as315e@set-interaction-env-rib! (lambda (as48a1@x as48a2@val) (simple-struct-set! as48a1@x '0 as48a2@val))) (set! as4bd7@as315e@set-interaction-env-rib! as315e@set-interaction-env-rib!) (set! as3160@interaction-env-r (lambda (as48a5@x) (simple-struct-ref as48a5@x '1))) (set! as4bd8@as3160@interaction-env-r as3160@interaction-env-r) (set! as3162@set-interaction-env-r! (lambda (as48a7@x as48a8@val) (simple-struct-set! as48a7@x '1 as48a8@val))) (set! as4bd9@as3162@set-interaction-env-r! as3162@set-interaction-env-r!) (set! as3164@interaction-env-locs (lambda (as48ab@x) (simple-struct-ref as48ab@x '2))) (set! as4bda@as3164@interaction-env-locs as3164@interaction-env-locs) (set! as3166@set-interaction-env-locs! (lambda (as48ad@x as48ae@val) (simple-struct-set! as48ad@x '2 as48ae@val))) (set! as4bdb@as3166@set-interaction-env-locs! as3166@set-interaction-env-locs!) (set! as3168@dummy '3) (set! as4bdc@as3168@dummy as3168@dummy) (set! as316a@interaction-environment-symbols (lambda () (as3172@environment-symbols (as31aa@interaction-environment)))) (set! as4bdd@as316a@interaction-environment-symbols as316a@interaction-environment-symbols) (set! as316c@environment-bindings (lambda (as48b1@e) (vector->list (vector-map (lambda (as48b3@name as48b4@label) (as316e@parse-binding (cons as48b3@name (as2cd0@as2b1d@imported-label->binding as48b4@label)))) (as3142@env-names as48b1@e) (as3146@env-labels as48b1@e))))) (set! as4bde@as316c@environment-bindings as316c@environment-bindings) (set! as316e@parse-binding (lambda (as48b7@b) (cons (car as48b7@b) (let ((as48b9@t (cadr as48b7@b))) (if (memv as48b9@t '(core-prim global)) 'procedure (if (memv as48b9@t '(core-macro macro global-macro)) 'syntax (if (memv as48b9@t '($core-rtd)) 'record (if (eq? (car as48b7@b) (cadr as48b7@b)) 'syntax 'unknown)))))))) (set! as4bdf@as316e@parse-binding as316e@parse-binding) (set! as3170@environment? (lambda (as48bb@x) (or (as3140@env? as48bb@x) (as315a@interaction-env? as48bb@x)))) (set! as4be0@as3170@environment? as3170@environment?) (set! as3172@environment-symbols (lambda (as48bd@x) (if (as3140@env? as48bd@x) (vector->list (as3142@env-names as48bd@x)) (if (as315a@interaction-env? as48bd@x) (map values (as2e53@rib-sym* (as315c@interaction-env-rib as48bd@x))) (assertion-violation 'environment-symbols '"not an environment" as48bd@x))))) (set! as4be1@as3172@environment-symbols as3172@environment-symbols) (set! as3174@environment (lambda as48bf@imp* (let ((as48c1@itc (as3122@make-collector))) (let ((as48c7@as48c4 as3128@imp-collector) (as48c8@as48c6 as48c1@itc)) (let ((as48cb@swap (lambda () (let ((as48cd@t (as48c7@as48c4))) (begin (as48c7@as48c4 as48c8@as48c6) (set! as48c8@as48c6 as48cd@t)))))) (dynamic-wind as48cb@swap (lambda () (call-with-values (lambda () (as311e@parse-import-spec* as48bf@imp*)) (lambda (as48d3@as48d0 as48d4@as48d2) (let ((as48d7@subst-labels as48d4@as48d2) (as48d8@subst-names as48d3@as48d0)) (make-simple-struct 'env '4 (list as48d8@subst-names as48d7@subst-labels as48c1@itc)))))) as48cb@swap)))))) (set! as4be2@as3174@environment as3174@environment) (set! as3176@null-environment (lambda (as48db@n) (begin (if (not (eqv? as48db@n '5)) (assertion-violation 'null-environment '"not 5" as48db@n) (void)) (as3174@environment '(psyntax null-environment-5))))) (set! as4be3@as3176@null-environment as3176@null-environment) (set! as3178@scheme-report-environment (lambda (as48dd@n) (begin (if (not (eqv? as48dd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" as48dd@n) (void)) (as3174@environment '(psyntax scheme-report-environment-5))))) (set! as4be4@as3178@scheme-report-environment as3178@scheme-report-environment) (set! as317a@expand (lambda (as48df@x as48e0@env) (if (as3140@env? as48e0@env) (let ((as48e3@rib (as3120@make-top-rib (as3142@env-names as48e0@env) (as3146@env-labels as48e0@env)))) (let ((as48e5@x (make-simple-struct 'stx '5 (list as48df@x as2e39@top-mark* (list as48e3@rib) '()))) (as48e6@itc (as314a@env-itc as48e0@env)) (as48e7@rtc (as3122@make-collector)) (as48e8@vtc (as3122@make-collector))) (let ((as48ed@x (let ((as48ff@as48f0 as31ac@top-level-context) (as4900@as48f2 as3124@inv-collector) (as4901@as48f4 as3126@vis-collector) (as4902@as48f6 as3128@imp-collector) (as4903@as48f8 '#f) (as4904@as48fa as48e7@rtc) (as4905@as48fc as48e8@vtc) (as4906@as48fe as48e6@itc)) (let ((as490f@swap (lambda () (begin (let ((as4911@t (as48ff@as48f0))) (begin (as48ff@as48f0 as4903@as48f8) (set! as4903@as48f8 as4911@t))) (let ((as4913@t (as4900@as48f2))) (begin (as4900@as48f2 as4904@as48fa) (set! as4904@as48fa as4913@t))) (let ((as4915@t (as4901@as48f4))) (begin (as4901@as48f4 as4905@as48fc) (set! as4905@as48fc as4915@t))) (let ((as4917@t (as4902@as48f6))) (begin (as4902@as48f6 as4906@as48fe) (set! as4906@as48fe as4917@t))))))) (dynamic-wind as490f@swap (lambda () (as30de@chi-expr as48e5@x '() '())) as490f@swap))))) (begin (as2e71@seal-rib! as48e3@rib) (values as48ed@x (as48e7@rtc)))))) (if (as315a@interaction-env? as48e0@env) (let ((as4919@rib (as315c@interaction-env-rib as48e0@env)) (as491a@r (as3160@interaction-env-r as48e0@env)) (as491b@rtc (as3122@make-collector))) (let ((as491f@x (make-simple-struct 'stx '5 (list as48df@x as2e39@top-mark* (list as4919@rib) '())))) (call-with-values (lambda () (let ((as4935@as4926 as31ac@top-level-context) (as4936@as4928 as3124@inv-collector) (as4937@as492a as3126@vis-collector) (as4938@as492c as3128@imp-collector) (as4939@as492e as48e0@env) (as493a@as4930 as491b@rtc) (as493b@as4932 (as3122@make-collector)) (as493c@as4934 (as3122@make-collector))) (let ((as4945@swap (lambda () (begin (let ((as4947@t (as4935@as4926))) (begin (as4935@as4926 as4939@as492e) (set! as4939@as492e as4947@t))) (let ((as4949@t (as4936@as4928))) (begin (as4936@as4928 as493a@as4930) (set! as493a@as4930 as4949@t))) (let ((as494b@t (as4937@as492a))) (begin (as4937@as492a as493b@as4932) (set! as493b@as4932 as494b@t))) (let ((as494d@t (as4938@as492c))) (begin (as4938@as492c as493c@as4934) (set! as493c@as4934 as494d@t))))))) (dynamic-wind as4945@swap (lambda () (as312c@chi-interaction-expr as491f@x as4919@rib as491a@r)) as4945@swap)))) (lambda (as494f@as4922 as4950@as4924) (let ((as4953@r^ as4950@as4924) (as4954@e as494f@as4922)) (begin (as3162@set-interaction-env-r! as48e0@env as4953@r^) (values as4954@e (as491b@rtc)))))))) (assertion-violation 'expand '"not an environment" as48e0@env))))) (set! as4be5@as317a@expand as317a@expand) (set! as317c@eval (lambda (as4957@x as4958@env) (begin (if (not (as3170@environment? as4958@env)) (error 'eval '"not an environment" as4958@env) (void)) (call-with-values (lambda () (as317a@expand as4957@x as4958@env)) (lambda (as495f@as495c as4960@as495e) (let ((as4963@invoke-req* as4960@as495e) (as4964@x as495f@as495c)) (begin (for-each as2cd1@as2b1f@invoke-library as4963@invoke-req*) (eval-core (as2a5b@as2a13@expanded->core as4964@x))))))))) (set! as4be6@as317c@eval as317c@eval) (set! as317e@library-expander (lambda as49d5 (let ((as49d6 (length as49d5))) (if (= as49d6 '3) (apply (lambda (as4967@x as4968@filename as4969@verify-name) (letrec* ((as496e@build-visit-code (lambda (as49c3@macro*) (if (null? as49c3@macro*) (as2e1b@as2d7c@build-void) (as2e1a@as2d7a@build-sequence '#f (map (lambda (as49c5@x) (let ((as49c7@loc (car as49c5@x)) (as49c8@src (cddr as49c5@x))) (list 'set! as49c7@loc as49c8@src))) as49c3@macro*))))) (as4970@visit! (lambda (as49bb@macro*) (for-each (lambda (as49bd@x) (let ((as49bf@loc (car as49bd@x)) (as49c0@proc (cadr as49bd@x))) (set-symbol-value! as49bf@loc as49c0@proc))) as49bb@macro*)))) (call-with-values (lambda () (as3130@core-library-expander as4967@x as4969@verify-name)) (lambda (as4983@as4972 as4984@as4974 as4985@as4976 as4986@as4978 as4987@as497a as4988@as497c as4989@as497e as498a@as4980 as498b@as4982) (let ((as4995@export-env as498b@as4982) (as4996@export-subst as498a@as4980) (as4997@macro* as4989@as497e) (as4998@invoke-code as4988@as497c) (as4999@vis* as4987@as497a) (as499a@inv* as4986@as4978) (as499b@imp* as4985@as4976) (as499c@ver as4984@as4974) (as499d@name as4983@as4972)) (let ((as49a7@id (gensym)) (as49a8@name as499d@name) (as49a9@ver as499c@ver) (as49aa@imp* (map as2cd5@as2b27@library-spec as499b@imp*)) (as49ab@vis* (map as2cd5@as2b27@library-spec as4999@vis*)) (as49ac@inv* (map as2cd5@as2b27@library-spec as499a@inv*)) (as49ad@visit-proc (lambda () (as4970@visit! as4997@macro*))) (as49ae@invoke-proc (lambda () (eval-core (as2a5b@as2a13@expanded->core as4998@invoke-code)))) (as49af@visit-code (as496e@build-visit-code as4997@macro*)) (as49b0@invoke-code as4998@invoke-code)) (begin (as2ccf@as2b1b@install-library as49a7@id as49a8@name as49a9@ver as49aa@imp* as49ab@vis* as49ac@inv* as4996@export-subst as4995@export-env as49ad@visit-proc as49ae@invoke-proc as49af@visit-code as49b0@invoke-code '#t as4968@filename) (values as49a7@id as49a8@name as49a9@ver as49aa@imp* as49ab@vis* as49ac@inv* as49b0@invoke-code as49af@visit-code as4996@export-subst as4995@export-env)))))))) as49d5) (if (= as49d6 '2) (apply (lambda (as49cb@x as49cc@filename) (as317e@library-expander as49cb@x as49cc@filename (lambda (as49cf@x) (values)))) as49d5) (if (= as49d6 '1) (apply (lambda (as49d1@x) (as317e@library-expander as49d1@x '#f (lambda (as49d3@x) (values)))) as49d5) (error 'apply '"invalid arg count"))))))) (set! as4be7@as317e@library-expander as317e@library-expander) (set! as3180@boot-library-expand (lambda (as49d7@x) (call-with-values (lambda () (as317e@library-expander as49d7@x)) (lambda (as49ed@as49da as49ee@as49dc as49ef@as49de as49f0@as49e0 as49f1@as49e2 as49f2@as49e4 as49f3@as49e6 as49f4@as49e8 as49f5@as49ea as49f6@as49ec) (let ((as4a01@export-env as49f6@as49ec) (as4a02@export-subst as49f5@as49ea) (as4a03@visit-code as49f4@as49e8) (as4a04@invoke-code as49f3@as49e6) (as4a05@inv* as49f2@as49e4) (as4a06@vis* as49f1@as49e2) (as4a07@imp* as49f0@as49e0) (as4a08@ver as49ef@as49de) (as4a09@name as49ee@as49dc) (as4a0a@id as49ed@as49da)) (values as4a09@name as4a04@invoke-code as4a02@export-subst as4a01@export-env)))))) (set! as4be8@as3180@boot-library-expand as3180@boot-library-expand) (set! as3182@rev-map-append (lambda (as4a15@f as4a16@ls as4a17@ac) (if (null? as4a16@ls) as4a17@ac (as3182@rev-map-append as4a15@f (cdr as4a16@ls) (cons (as4a15@f (car as4a16@ls)) as4a17@ac))))) (set! as4be9@as3182@rev-map-append as3182@rev-map-append) (set! as3184@build-exports (lambda (as4a1b@lex*+loc* as4a1c@init*) (as2e1a@as2d7a@build-sequence '#f (cons (as2e1b@as2d7c@build-void) (as3182@rev-map-append (lambda (as4a1f@x) (list 'set! (cdr as4a1f@x) (car as4a1f@x))) as4a1b@lex*+loc* as4a1c@init*))))) (set! as4bea@as3184@build-exports as3184@build-exports) (set! as3186@make-export-subst (lambda (as4a21@name* as4a22@id*) (map (lambda (as4a25@name as4a26@id) (let ((as4a29@label (as2ecb@id->label as4a26@id))) (begin (if (not as4a29@label) (as319c@syntax-violation '#f '"cannot export unbound identifier" as4a26@id) (void)) (cons as4a25@name as4a29@label)))) as4a21@name* as4a22@id*))) (set! as4beb@as3186@make-export-subst as3186@make-export-subst) (set! as3188@make-export-env/macros (lambda (as4a2b@lex* as4a2c@loc* as4a2d@r) (letrec* ((as4a32@lookup (lambda (as4a4f@x) (let as4a57@f ((as4a51@x as4a4f@x) (as4a52@lex* as4a2b@lex*) (as4a53@loc* as4a2c@loc*)) (if (pair? as4a52@lex*) (if (eq? as4a51@x (car as4a52@lex*)) (car as4a53@loc*) (as4a57@f as4a51@x (cdr as4a52@lex*) (cdr as4a53@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let as4a3b@f ((as4a33@r as4a2d@r) (as4a34@env '()) (as4a35@global* '()) (as4a36@macro* '())) (if (null? as4a33@r) (values as4a34@env as4a35@global* as4a36@macro*) (let ((as4a3d@x (car as4a33@r))) (let ((as4a3f@label (car as4a3d@x)) (as4a40@b (cdr as4a3d@x))) (let ((as4a43@t (as2ed1@binding-type as4a40@b))) (if (memv as4a43@t '(lexical)) (let ((as4a45@v (as2ed3@binding-value as4a40@b))) (let ((as4a47@loc (as4a32@lookup (as3046@lexical-var as4a45@v))) (as4a48@type (if (as3048@lexical-mutable? as4a45@v) 'mutable 'global))) (as4a3b@f (cdr as4a33@r) (cons (cons* as4a3f@label as4a48@type as4a47@loc) as4a34@env) (cons (cons (as3046@lexical-var as4a45@v) as4a47@loc) as4a35@global*) as4a36@macro*))) (if (memv as4a43@t '(local-macro)) (let ((as4a4b@loc (gensym))) (as4a3b@f (cdr as4a33@r) (cons (cons* as4a3f@label 'global-macro as4a4b@loc) as4a34@env) as4a35@global* (cons (cons as4a4b@loc (as2ed3@binding-value as4a40@b)) as4a36@macro*))) (if (memv as4a43@t '(local-macro!)) (let ((as4a4d@loc (gensym))) (as4a3b@f (cdr as4a33@r) (cons (cons* as4a3f@label 'global-macro! as4a4d@loc) as4a34@env) as4a35@global* (cons (cons as4a4d@loc (as2ed3@binding-value as4a40@b)) as4a36@macro*))) (if (memv as4a43@t '($rtd $module)) (as4a3b@f (cdr as4a33@r) (cons as4a3d@x as4a34@env) as4a35@global* as4a36@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (as2ed1@binding-type as4a40@b) (as2ed3@binding-value as4a40@b)))))))))))))) (set! as4bec@as3188@make-export-env/macros as3188@make-export-env/macros) (set! as318a@generate-temporaries (lambda (as4a59@ls) (let ((as4a5b@t as4a59@ls)) (let ((as4a5d@ls/false (as30bc@syntax-dispatch as4a5b@t 'each-any))) (if as4a5d@ls/false (apply (lambda (as4a5f@ls) (map (lambda (as4a61@x) (make-simple-struct 'stx '5 (list (let ((as4a63@x (as31a2@syntax->datum as4a61@x))) (if (or (symbol? as4a63@x) (string? as4a63@x)) (gensym as4a63@x) (gensym 't))) as2e39@top-mark* '() '()))) as4a5f@ls)) as4a5d@ls/false) (let ((as4a65@t as4a5b@t)) (let ((as4a67@ls/false (as30bc@syntax-dispatch as4a65@t '_))) (if as4a67@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) as4a67@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4a65@t))))))))) (set! as4bed@as318a@generate-temporaries as318a@generate-temporaries) (set! as318c@free-identifier=? (lambda (as4a69@x as4a6a@y) (if (as2eb5@id? as4a69@x) (if (as2eb5@id? as4a6a@y) (as2ebb@free-id=? as4a69@x as4a6a@y) (assertion-violation 'free-identifier=? '"not an identifier" as4a6a@y)) (assertion-violation 'free-identifier=? '"not an identifier" as4a69@x)))) (set! as4bee@as318c@free-identifier=? as318c@free-identifier=?) (set! as318e@bound-identifier=? (lambda (as4a6d@x as4a6e@y) (if (as2eb5@id? as4a6d@x) (if (as2eb5@id? as4a6e@y) (as2eb9@bound-id=? as4a6d@x as4a6e@y) (assertion-violation 'bound-identifier=? '"not an identifier" as4a6e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" as4a6d@x)))) (set! as4bef@as318e@bound-identifier=? as318e@bound-identifier=?) (set! as3190@make-source-condition (lambda (as4a71@x) (letrec* ((as4a7b@as4a76 (make-record-type-descriptor '&source-information &condition-rtd 'as4a79 '#f '#f '#((immutable file-name) (immutable line)))) (as4a7d@as4a78 '#f) (as4a7f@as4a77 (make-record-constructor-descriptor as4a7b@as4a76 &condition-rcd as4a7d@as4a78)) (as4a82@as4a75 (record-predicate as4a7b@as4a76)) (as4a84@make-source-condition (record-constructor as4a7f@as4a77)) (as4a86@as4a73 (record-accessor as4a7b@as4a76 '0)) (as4a88@as4a74 (record-accessor as4a7b@as4a76 '1)) (as4a8a@source-condition? (condition-predicate as4a7b@as4a76)) (as4a8c@source-filename (condition-accessor as4a7b@as4a76 as4a86@as4a73)) (as4a8e@source-character (condition-accessor as4a7b@as4a76 as4a88@as4a74))) (if (and (pair? as4a71@x) (pair? (cdr as4a71@x))) (as4a84@make-source-condition (car as4a71@x) (cadr as4a71@x)) (condition))))) (set! as4bf0@as3190@make-source-condition as3190@make-source-condition) (set! as3192@extract-position-condition (lambda (as4a8f@x) (as3190@make-source-condition (as3194@expression-position as4a8f@x)))) (set! as4bf1@as3192@extract-position-condition as3192@extract-position-condition) (set! as3194@expression-position (lambda (as4a91@x) (and (as2e81@stx? as4a91@x) (let ((as4a93@x (as2e83@stx-expr as4a91@x))) (and (as29f9@as28cb@annotation? as4a93@x) (as29fa@as28cd@annotation-source as4a93@x)))))) (set! as4bf2@as3194@expression-position as3194@expression-position) (set! as3196@assertion-error (lambda (as4a95@expr as4a96@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list as4a95@expr)) (as3190@make-source-condition as4a96@pos))))) (set! as4bf3@as3196@assertion-error as3196@assertion-error) (set! as3198@syntax-error (lambda (as4a99@x . as4a9b@args) (begin (if (not (for-all string? as4a9b@args)) (assertion-violation 'syntax-error '"invalid argument" as4a9b@args) (void)) (raise (condition (make-message-condition (if (null? as4a9b@args) '"invalid syntax" (apply string-append as4a9b@args))) (make-syntax-violation (as31a2@syntax->datum as4a99@x) '#f) (as3192@extract-position-condition as4a99@x)))))) (set! as4bf4@as3198@syntax-error as3198@syntax-error) (set! as319a@syntax-violation* (lambda (as4a9d@who as4a9e@msg as4a9f@form as4aa0@condition-object) (begin (if (not (string? as4a9e@msg)) (assertion-violation 'syntax-violation '"message is not a string" as4a9e@msg) (void)) (let ((as4aa5@who (if (or (string? as4a9d@who) (symbol? as4a9d@who)) as4a9d@who (if (not as4a9d@who) (let ((as4aa7@t as4a9f@form)) (let ((as4aa9@ls/false (as30bc@syntax-dispatch as4aa7@t 'any))) (if (and as4aa9@ls/false (apply (lambda (as4aab@id) (as2eb5@id? as4aab@id)) as4aa9@ls/false)) (apply (lambda (as4aad@id) (as31a2@syntax->datum as4aad@id)) as4aa9@ls/false) (let ((as4aaf@t as4aa7@t)) (let ((as4ab1@ls/false (as30bc@syntax-dispatch as4aaf@t '(any . any)))) (if (and as4ab1@ls/false (apply (lambda (as4ab3@id as4ab4@rest) (as2eb5@id? as4ab3@id)) as4ab1@ls/false)) (apply (lambda (as4ab7@id as4ab8@rest) (as31a2@syntax->datum as4ab7@id)) as4ab1@ls/false) (let ((as4abb@t as4aaf@t)) (let ((as4abd@ls/false (as30bc@syntax-dispatch as4abb@t '_))) (if as4abd@ls/false (apply (lambda () '#f) as4abd@ls/false) (as319c@syntax-violation '#f '"invalid syntax" as4abb@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" as4a9d@who))))) (raise (condition (if as4aa5@who (make-who-condition as4aa5@who) (condition)) (make-message-condition as4a9e@msg) as4aa0@condition-object (as3192@extract-position-condition as4a9f@form))))))) (set! as4bf5@as319a@syntax-violation* as319a@syntax-violation*) (set! as319c@syntax-violation (lambda as4acd (let ((as4ace (length as4acd))) (if (= as4ace '3) (apply (lambda (as4abf@who as4ac0@msg as4ac1@form) (as319c@syntax-violation as4abf@who as4ac0@msg as4ac1@form '#f)) as4acd) (if (= as4ace '4) (apply (lambda (as4ac5@who as4ac6@msg as4ac7@form as4ac8@subform) (as319a@syntax-violation* as4ac5@who as4ac6@msg as4ac7@form (make-syntax-violation (as31a2@syntax->datum as4ac7@form) (as31a2@syntax->datum as4ac8@subform)))) as4acd) (error 'apply '"invalid arg count")))))) (set! as4bf6@as319c@syntax-violation as319c@syntax-violation) (set! as319e@identifier? (lambda (as4acf@x) (as2eb5@id? as4acf@x))) (set! as4bf7@as319e@identifier? as319e@identifier?) (set! as31a0@datum->syntax (lambda (as4ad1@id as4ad2@datum) (if (as2eb5@id? as4ad1@id) (as2e95@datum->stx as4ad1@id as4ad2@datum) (assertion-violation 'datum->syntax '"not an identifier" as4ad1@id)))) (set! as4bf8@as31a0@datum->syntax as31a0@datum->syntax) (set! as31a2@syntax->datum (lambda (as4ad5@x) (as2ec9@stx->datum as4ad5@x))) (set! as4bf9@as31a2@syntax->datum as31a2@syntax->datum) (set! as31a4@ungensym-all (lambda (as4ad7@code) (if (pair? as4ad7@code) (cons (as31a4@ungensym-all (car as4ad7@code)) (as31a4@ungensym-all (cdr as4ad7@code))) (if (symbol? as4ad7@code) (ungensym as4ad7@code) as4ad7@code)))) (set! as4bfa@as31a4@ungensym-all as31a4@ungensym-all) (set! as31a6@compile-r6rs-top-level (lambda (as4ad9@x*) (call-with-values (lambda () (as3134@top-level-expander as4ad9@x*)) (lambda (as4adf@as4adc as4ae0@as4ade) (let ((as4ae3@invoke-code as4ae0@as4ade) (as4ae4@lib* as4adf@as4adc)) (lambda () (begin (for-each as2cd1@as2b1f@invoke-library as4ae4@lib*) (let ((as4ae7@expanded (as2a5b@as2a13@expanded->core as4ae3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (as31a4@ungensym-all as4ae7@expanded)) (void)) (eval-core as4ae7@expanded)))))))))) (set! as4bfb@as31a6@compile-r6rs-top-level as31a6@compile-r6rs-top-level) (set! as31a8@pre-compile-r6rs-top-level (lambda (as4ae9@x*) (call-with-values (lambda () (as3134@top-level-expander as4ae9@x*)) (lambda (as4aef@as4aec as4af0@as4aee) (let ((as4af3@invoke-code as4af0@as4aee) (as4af4@lib* as4aef@as4aec)) (begin (for-each as2cd1@as2b1f@invoke-library as4af4@lib*) (as2a03@as28df@compile-core (as2a5b@as2a13@expanded->core as4af3@invoke-code)))))))) (set! as4bfc@as31a8@pre-compile-r6rs-top-level as31a8@pre-compile-r6rs-top-level) (set! as31aa@interaction-environment (let ((as4af7@the-env '#f)) (lambda () (or as4af7@the-env (let ((as4af9@lib (as2cca@as2b11@find-library-by-name '(mosh interaction))) (as4afa@rib (as2e69@make-empty-rib))) (begin (let ((as4afd@subst (as2cac@as2ad5@library-subst as4af9@lib))) (begin (as2e55@set-rib-sym*! as4afa@rib (map car as4afd@subst)) (as2e59@set-rib-mark**! as4afa@rib (map (lambda (as4aff@x) as2e39@top-mark*) as4afd@subst)) (as2e5d@set-rib-label*! as4afa@rib (map cdr as4afd@subst)))) (let ((as4b01@env (make-simple-struct 'interaction-env '4 (list as4afa@rib '() '())))) (begin (set! as4af7@the-env as4b01@env) as4b01@env)))))))) (set! as4bfd@as31aa@interaction-environment as31aa@interaction-environment) (set! as31ac@top-level-context (as2a05@as28e3@make-parameter '#f)) (set! as4bfe@as31ac@top-level-context as31ac@top-level-context) (as2cc7@as2b0b@current-library-expander as317e@library-expander))
(begin (begin (as2a58@as2a0d@current-primitive-locations (lambda (as5149@x) (let ((as514b@t (assq as5149@x '((syntax-error . as4bf4@as3198@syntax-error) (syntax-dispatch . as4b92@as30bc@syntax-dispatch) (load . as4d7a@as4c25@load) (interaction-environment . as4bfd@as31aa@interaction-environment) (library-path . as2cbf@as2afb@library-path) (mosh-cache-dir . as2a06@as28e5@mosh-cache-dir) (make-parameter . as2a05@as28e3@make-parameter) (make-variable-transformer . as4b4f@as2ee7@make-variable-transformer) (identifier? . as4bf7@as319e@identifier?) (generate-temporaries . as4bed@as318a@generate-temporaries) (free-identifier=? . as4bee@as318c@free-identifier=?) (syntax->datum . as4bf9@as31a2@syntax->datum) (datum->syntax . as4bf8@as31a0@datum->syntax) (bound-identifier=? . as4bef@as318e@bound-identifier=?) (scheme-report-environment . as4be4@as3178@scheme-report-environment) (null-environment . as4be3@as3176@null-environment) (command-line . as4d77@as4c1f@command-line) (eval . as4be6@as317c@eval) (environment . as4be2@as3174@environment) (syntax-violation . as4bf6@as319c@syntax-violation) (assertion-error . as4bf3@as3196@assertion-error))))) (if as514b@t (cdr as514b@t) '#f)))) (as2ccf@as2b1b@install-library 'as5126 '(mosh interaction) '() '() '() '() '((regexp? . as50e6) (alist->eq-hash-table . as50e2) (format . as50df) (string-split . as50d4) (call-process . as50ce) (set-current-directory! . as50ca) (expand-path . as50c9) (current-directory . as50c8) (%spawn . as50c7) (%waitpid . as50c6) (simple-struct-name . as50c5) (simple-struct-set! . as50c4) (simple-struct-ref . as50c3) (make-simple-struct . as50c2) (simple-struct? . as50c1) (pointer-ref-c-int64 . as50c0) (pointer-ref-c-int32 . as50bf) (pointer-ref-c-int16 . as50be) (pointer-ref-c-int8 . as50bd) (pointer-ref-c-uint64 . as50bc) (pointer-ref-c-uint32 . as50bb) (pointer-ref-c-uint16 . as50ba) (pointer-ref-c-uint8 . as50b9) (pointer-set-c-uint64! . as50b8) (pointer-set-c-uint32! . as50b7) (pointer-set-c-uint16! . as50b6) (pointer-set-c-uint8! . as50b5) (pointer-set-c-int64! . as50b4) (pointer-set-c-int32! . as50b3) (pointer-set-c-int16! . as50b2) (pointer-set-c-int8! . as50b1) (pointer-set-c-pointer! . as50b0) (pointer-set-c-double! . as50af) (pointer-set-c-float! . as50ae) (pointer-set-c-long-long! . as50ad) (pointer-set-c-long! . as50ac) (pointer-set-c-int! . as50ab) (pointer-set-c-short! . as50aa) (pointer-set-c-char! . as50a9) (pointer-ref-c-pointer . as50a8) (pointer-ref-c-double . as50a7) (pointer-ref-c-float . as50a6) (pointer-ref-c-unsigned-long-long . as50a5) (pointer-ref-c-signed-long-long . as50a4) (pointer-ref-c-unsigned-long . as50a3) (pointer-ref-c-signed-long . as50a2) (pointer-ref-c-unsigned-int . as50a1) (pointer-ref-c-signed-int . as50a0) (pointer-ref-c-unsigned-short . as509f) (pointer-ref-c-signed-short . as509e) (pointer-ref-c-unsigned-char . as509d) (pointer-ref-c-signed-char . as509c) (pointer->integer . as509b) (integer->pointer . as509a) (pointer? . as5099) (shared-errno . as5098) (%ffi-supported? . as5093) (%ffi-pointer->string . as5092) (%ffi-call . as5091) (%ffi-lookup . as5090) (%ffi-open . as508f) (null-terminated-utf8->string . as508e) (null-terminated-bytevector->string . as508d) (%exec . as508c) (%fork . as508b) (%pipe . as508a) (p . as5089) (whereis . as506d) (register . as506c) (vm-join! . as506b) (vm-set-value! . as506a) (vm? . as5069) (main-vm? . as5068) (vm-eval . as5067) (vm-self . as5066) (vm-start! . as5065) (make-vm . as5064) (mutex-try-lock! . as5063) (mutex-unlock! . as5062) (mutex-lock! . as5061) (mutex? . as5060) (make-mutex . as505f) (condition-variable-notify-all! . as505e) (condition-variable-notify! . as505d) (condition-variable-wait! . as505c) (make-condition-variable . as505b) (write/ss . as505a) (string-upcase . as5042) (string-titlecase . as5041) (string-normalize-nfkd . as5040) (string-normalize-nfkc . as503f) (string-normalize-nfd . as503e) (string-normalize-nfc . as503d) (string-foldcase . as503c) (string-downcase . as503b) (string-ci>? . as503a) (string-ci>=? . as5039) (string-ci=? . as5038) (string-ci<? . as5037) (string-ci<=? . as5036) (char-whitespace? . as5035) (char-upper-case? . as5034) (char-title-case? . as5033) (char-numeric? . as5032) (char-lower-case? . as5031) (char-general-category . as5030) (char-upcase . as502f) (char-titlecase . as502e) (char-foldcase . as502d) (char-downcase . as502c) (char-ci>? . as502b) (char-ci>=? . as502a) (char-ci=? . as5029) (char-ci<? . as5028) (char-ci<=? . as5027) (char-alphabetic? . as5026) (make-variable-transformer . as2ee6) (identifier? . as319d) (generate-temporaries . as3189) (free-identifier=? . as318b) (syntax->datum . as31a1) (datum->syntax . as319f) (bound-identifier=? . as318d) (record-type-descriptor? . as5025) (record-predicate . as5024) (record-mutator . as5023) (record-constructor . as5022) (record-accessor . as5021) (make-record-type-descriptor . as5020) (make-record-constructor-descriptor . as501f) (record? . as501e) (record-type-uid . as501d) (record-type-sealed? . as501c) (record-type-parent . as501b) (record-type-opaque? . as501a) (record-type-name . as5019) (record-type-generative? . as5018) (record-type-field-names . as5017) (record-rtd . as5016) (record-field-mutable? . as5015) (delete-file . as5014) (file-exists? . as5013) (vector-sort! . as5012) (vector-sort . as5011) (list-sort . as5010) (symbol-hash . as500f) (string-ci-hash . as500e) (string-hash . as500d) (equal-hash . as500c) (hashtable-equivalence-function . as500b) (make-hashtable . as500a) (hashtable-hash-function . as5009) (make-eqv-hashtable . as5008) (make-eq-hashtable . as5007) (hashtable? . as5006) (hashtable-update! . as5005) (hashtable-size . as5004) (hashtable-set! . as5003) (hashtable-ref . as5002) (hashtable-mutable? . as5001) (hashtable-keys . as5000) (hashtable-entries . as4fff) (hashtable-delete! . as4ffe) (hashtable-copy . as4ffd) (hashtable-contains? . as4ffc) (hashtable-clear! . as4ffb) (call-with-output-file . as4ffa) (call-with-input-file . as4ff9) (write-char . as4ff8) (write . as4ff7) (with-output-to-file . as4ff6) (with-input-from-file . as4ff5) (read-char . as4ff4) (read . as4ff3) (peek-char . as4ff2) (open-output-file . as4ff1) (open-input-file . as4ff0) (newline . as4fef) (display . as4fee) (close-output-port . as4fed) (close-input-port . as4fec) (eof-object? . as4feb) (eof-object . as4fea) (current-error-port . as4fe9) (current-output-port . as4fe8) (current-input-port . as4fe7) (output-port? . as4fe6) (input-port? . as4fe5) (utf-8-codec . as4fe4) (utf-16-codec . as4fe3) (transcoder-error-handling-mode . as4fe2) (transcoder-eol-style . as4fe1) (transcoder-codec . as4fe0) (transcoded-port . as4fdf) (textual-port? . as4fde) (string->bytevector . as4fdd) (standard-output-port . as4fdc) (standard-input-port . as4fdb) (standard-error-port . as4fda) (set-port-position! . as4fd9) (put-u8 . as4fd8) (put-string . as4fd7) (put-datum . as4fd6) (put-char . as4fd5) (put-bytevector . as4fd4) (port? . as4fd3) (port-transcoder . as4fd2) (port-position . as4fd1) (port-has-set-port-position!? . as4fd0) (port-has-port-position? . as4fcf) (port-eof? . as4fce) (output-port-buffer-mode . as4fcd) (open-string-output-port . as4fcc) (open-string-input-port . as4fcb) (open-file-output-port . as4fca) (open-file-input/output-port . as4fc9) (open-file-input-port . as4fc8) (open-bytevector-output-port . as4fc7) (open-bytevector-input-port . as4fc6) (native-transcoder . as4fc5) (native-eol-style . as4fc4) (make-transcoder . as4fc3) (latin-1-codec . as4fc2) (make-i/o-write-error . as4fc1) (make-i/o-read-error . as4fc0) (make-i/o-port-error . as4fbf) (make-i/o-invalid-position-error . as4fbe) (make-i/o-filename-error . as4fbd) (make-i/o-file-protection-error . as4fbc) (make-i/o-file-is-read-only-error . as4fbb) (make-i/o-file-does-not-exist-error . as4fba) (make-i/o-file-already-exists-error . as4fb9) (make-i/o-error . as4fb8) (make-i/o-encoding-error . as4fb7) (make-i/o-decoding-error . as4fb6) (make-custom-textual-output-port . as4fb5) (make-custom-textual-input/output-port . as4fb4) (make-custom-textual-input-port . as4fb3) (make-custom-binary-output-port . as4fb2) (make-custom-binary-input/output-port . as4fb1) (make-custom-binary-input-port . as4fb0) (make-bytevector . as4faf) (lookahead-u8 . as4fae) (lookahead-char . as4fad) (i/o-write-error? . as4fac) (i/o-read-error? . as4fab) (i/o-port-error? . as4faa) (i/o-invalid-position-error? . as4fa9) (i/o-filename-error? . as4fa8) (i/o-file-protection-error? . as4fa7) (i/o-file-is-read-only-error? . as4fa6) (i/o-file-does-not-exist-error? . as4fa5) (i/o-file-already-exists-error? . as4fa4) (i/o-error? . as4fa3) (i/o-error-position . as4fa2) (i/o-error-port . as4fa1) (i/o-error-filename . as4fa0) (i/o-encoding-error? . as4f9f) (i/o-encoding-error-char . as4f9e) (i/o-decoding-error? . as4f9d) (get-u8 . as4f9c) (get-string-n! . as4f9b) (get-string-n . as4f9a) (get-string-all . as4f99) (get-line . as4f98) (get-datum . as4f97) (get-char . as4f96) (get-bytevector-some . as4f95) (get-bytevector-n! . as4f94) (get-bytevector-n . as4f93) (get-bytevector-all . as4f92) (flush-output-port . as4f91) (close-port . as4f90) (exit . as4f88) (command-line . as4c1e) (string-fill! . as4f87) (string-set! . as4f86) (set-cdr! . as4f85) (set-car! . as4f84) (remove . as4f83) (remv . as4f82) (remp . as4f81) (remq . as4f80) (partition . as4f7f) (memv . as4f7e) (memq . as4f7d) (memp . as4f7c) (member . as4f7b) (exists . as4f7a) (for-all . as4f79) (fold-right . as4f78) (fold-left . as4f77) (find . as4f76) (filter . as4f75) (cons* . as4f74) (assv . as4f73) (assq . as4f72) (assp . as4f71) (assoc . as4f70) (call-with-string-output-port . as4f6f) (call-with-port . as4f6e) (call-with-bytevector-output-port . as4f6d) (bytevector->string . as4f6c) (buffer-mode? . as4f6b) (binary-port? . as4f6a) (with-exception-handler . as4f69) (raise-continuable . as4f68) (raise . as4f67) (eval . as317b) (environment . as3173) (make-enumeration . as4f66) (enum-set=? . as4f65) (enum-set-universe . as4f64) (enum-set-union . as4f63) (enum-set-subset? . as4f62) (enum-set-projection . as4f61) (enum-set-member? . as4f60) (enum-set-intersection . as4f5f) (enum-set-indexer . as4f5e) (enum-set-difference . as4f5d) (enum-set-constructor . as4f5c) (enum-set-complement . as4f5b) (enum-set->list . as4f5a) (who-condition? . as4f59) (warning? . as4f58) (violation? . as4f57) (undefined-violation? . as4f56) (syntax-violation? . as4f55) (syntax-violation-subform . as4f54) (syntax-violation-form . as4f53) (syntax-violation . as319b) (simple-conditions . as4f52) (serious-condition? . as4f51) (non-continuable-violation? . as4f50) (message-condition? . as4f4f) (make-who-condition . as4f4e) (make-warning . as4f4d) (make-violation . as4f4c) (make-undefined-violation . as4f4b) (make-syntax-violation . as4f4a) (make-serious-condition . as4f49) (make-non-continuable-violation . as4f48) (make-message-condition . as4f47) (make-lexical-violation . as4f46) (make-irritants-condition . as4f45) (make-implementation-restriction-violation . as4f44) (make-error . as4f43) (make-assertion-violation . as4f42) (lexical-violation? . as4f41) (irritants-condition? . as4f40) (implementation-restriction-violation? . as4f3f) (error? . as4f3e) (condition-who . as4f3d) (condition-predicate . as4f3c) (condition-message . as4f3b) (condition-irritants . as4f3a) (condition-accessor . as4f39) (condition . as4f38) (assertion-violation? . as4f37) (condition? . as4f36) (utf32->string . as4f35) (utf16->string . as4f34) (utf8->string . as4f33) (uint-list->bytevector . as4f32) (u8-list->bytevector . as4f31) (string->utf8 . as4f30) (string->utf32 . as4f2f) (string->utf16 . as4f2e) (sint-list->bytevector . as4f2d) (native-endianness . as4f2c) (bytevector? . as4f2b) (bytevector=? . as4f2a) (bytevector-uint-set! . as4f29) (bytevector-uint-ref . as4f28) (bytevector-u8-set! . as4f27) (bytevector-u8-ref . as4f26) (bytevector-u64-set! . as4f25) (bytevector-u64-ref . as4f24) (bytevector-u64-native-set! . as4f23) (bytevector-u64-native-ref . as4f22) (bytevector-u32-set! . as4f21) (bytevector-u32-ref . as4f20) (bytevector-u32-native-set! . as4f1f) (bytevector-u32-native-ref . as4f1e) (bytevector-u16-set! . as4f1d) (bytevector-u16-ref . as4f1c) (bytevector-u16-native-set! . as4f1b) (bytevector-u16-native-ref . as4f1a) (bytevector-sint-set! . as4f19) (bytevector-sint-ref . as4f18) (bytevector-s8-set! . as4f17) (bytevector-s8-ref . as4f16) (bytevector-s64-set! . as4f15) (bytevector-s64-ref . as4f14) (bytevector-s64-native-set! . as4f13) (bytevector-s64-native-ref . as4f12) (bytevector-s32-set! . as4f11) (bytevector-s32-ref . as4f10) (bytevector-s32-native-set! . as4f0f) (bytevector-s32-native-ref . as4f0e) (bytevector-s16-set! . as4f0d) (bytevector-s16-ref . as4f0c) (bytevector-s16-native-set! . as4f0b) (bytevector-s16-native-ref . as4f0a) (bytevector-length . as4f09) (bytevector-ieee-single-ref . as4f08) (bytevector-ieee-single-set! . as4f07) (bytevector-ieee-single-native-set! . as4f06) (bytevector-ieee-single-native-ref . as4f05) (bytevector-ieee-double-set! . as4f04) (bytevector-ieee-double-ref . as4f03) (bytevector-ieee-double-native-set! . as4f02) (bytevector-ieee-double-native-ref . as4f01) (bytevector-fill! . as4f00) (bytevector-copy! . as4eff) (bytevector-copy . as4efe) (bytevector->uint-list . as4efd) (bytevector->u8-list . as4efc) (bytevector->sint-list . as4efb) (no-nans-violation? . as4efa) (no-infinities-violation? . as4ef9) (make-no-nans-violation . as4ef8) (make-no-infinities-violation . as4ef7) (real->flonum . as4ef6) (flzero? . as4ef5) (fltruncate . as4ef4) (fltan . as4ef3) (flsqrt . as4ef2) (flsin . as4ef1) (flround . as4ef0) (flpositive? . as4eef) (flonum? . as4eee) (flodd? . as4eed) (flnumerator . as4eec) (flnegative? . as4eeb) (flnan? . as4eea) (flmod0 . as4ee9) (flmod . as4ee8) (flmin . as4ee7) (flmax . as4ee6) (fllog . as4ee5) (flinteger? . as4ee4) (flinfinite? . as4ee3) (flfloor . as4ee2) (flfinite? . as4ee1) (flexpt . as4ee0) (flexp . as4edf) (fleven? . as4ede) (fldiv0-and-mod0 . as4edd) (fldiv0 . as4edc) (fldiv-and-mod . as4edb) (fldiv . as4eda) (fldenominator . as4ed9) (flcos . as4ed8) (flceiling . as4ed7) (flatan . as4ed6) (flasin . as4ed5) (flacos . as4ed4) (flabs . as4ed3) (fl>? . as4ed2) (fl>=? . as4ed1) (fl=? . as4ed0) (fl<? . as4ecf) (fl<=? . as4ece) (fl/ . as4ecd) (fl- . as4ecc) (fl+ . as4ecb) (fl* . as4eca) (fixnum->flonum . as4ec9) (fxzero? . as4ec8) (fxxor . as4ec7) (fxrotate-bit-field . as4ec6) (fxreverse-bit-field . as4ec5) (fxpositive? . as4ec4) (fxodd? . as4ec3) (fxnot . as4ec2) (fxnegative? . as4ec1) (fxmod0 . as4ec0) (fxmod . as4ebf) (fxmin . as4ebe) (fxmax . as4ebd) (fxlength . as4ebc) (fxior . as4ebb) (fxif . as4eba) (fxfirst-bit-set . as4eb9) (fxeven? . as4eb8) (fxdiv0-and-mod0 . as4eb7) (fxdiv0 . as4eb6) (fxdiv-and-mod . as4eb5) (fxdiv . as4eb4) (fxcopy-bit-field . as4eb3) (fxcopy-bit . as4eb2) (fxbit-set? . as4eb1) (fxbit-field . as4eb0) (fxbit-count . as4eaf) (fxarithmetic-shift-right . as4eae) (fxarithmetic-shift-left . as4ead) (fxarithmetic-shift . as4eac) (fxand . as4eab) (fx>? . as4eaa) (fx>=? . as4ea9) (fx=? . as4ea8) (fx<? . as4ea7) (fx<=? . as4ea6) (fx-/carry . as4ea5) (fx- . as4ea4) (fx+/carry . as4ea3) (fx+ . as4ea2) (fx*/carry . as4ea1) (fx* . as4ea0) (greatest-fixnum . as4e9f) (least-fixnum . as4e9e) (fixnum-width . as4e9d) (fixnum? . as4e9c) (bitwise-rotate-bit-field . as4e9b) (bitwise-reverse-bit-field . as4e9a) (bitwise-length . as4e99) (bitwise-if . as4e98) (bitwise-first-bit-set . as4e97) (bitwise-copy-bit-field . as4e96) (bitwise-copy-bit . as4e95) (bitwise-bit-set? . as4e94) (bitwise-bit-field . as4e93) (bitwise-bit-count . as4e92) (bitwise-xor . as4e91) (bitwise-ior . as4e90) (bitwise-and . as4e8f) (bitwise-not . as4e8e) (bitwise-arithmetic-shift-right . as4e8d) (bitwise-arithmetic-shift-left . as4e8c) (bitwise-arithmetic-shift . as4e8b) (zero? . as4e8a) (vector? . as4e89) (vector-set! . as4e88) (vector-ref . as4e87) (vector-map . as4e86) (vector-length . as4e85) (vector-for-each . as4e84) (vector-fill! . as4e83) (vector->list . as4e82) (vector . as4e81) (values . as4e80) (truncate . as4e7f) (tan . as4e7e) (symbol? . as4e7d) (symbol=? . as4e7c) (symbol->string . as4e7b) (substring . as4e7a) (string? . as4e79) (string>? . as4e78) (string>=? . as4e77) (string=? . as4e76) (string<? . as4e75) (string<=? . as4e74) (string-ref . as4e73) (string-length . as4e72) (string-for-each . as4e71) (string-copy . as4e70) (string-append . as4e6f) (string->symbol . as4e6e) (string->number . as4e6d) (string->list . as4e6c) (string . as4e6b) (sqrt . as4e6a) (sin . as4e69) (round . as4e68) (reverse . as4e67) (real? . as4e66) (real-valued? . as4e65) (real-part . as4e64) (rationalize . as4e63) (rational? . as4e62) (rational-valued? . as4e61) (procedure? . as4e60) (positive? . as4e5f) (pair? . as4e5e) (odd? . as4e5d) (numerator . as4e5c) (number? . as4e5b) (number->string . as4e5a) (null? . as4e59) (not . as4e58) (negative? . as4e57) (nan? . as4e56) (min . as4e55) (max . as4e54) (map . as4e53) (make-vector . as4e52) (make-string . as4e51) (make-rectangular . as4e50) (make-polar . as4e4f) (magnitude . as4e4e) (log . as4e4d) (list? . as4e4c) (list-tail . as4e4b) (list-ref . as4e4a) (list->vector . as4e49) (list->string . as4e48) (list . as4e47) (length . as4e46) (lcm . as4e45) (integer? . as4e44) (integer-valued? . as4e43) (integer->char . as4e42) (infinite? . as4e41) (inexact? . as4e40) (inexact . as4e3f) (imag-part . as4e3e) (gcd . as4e3d) (for-each . as4e3c) (floor . as4e3b) (finite? . as4e3a) (expt . as4e39) (exp . as4e38) (exact? . as4e37) (exact-integer-sqrt . as4e36) (exact . as4e35) (even? . as4e34) (error . as4e33) (eqv? . as4e32) (equal? . as4e31) (eq? . as4e30) (dynamic-wind . as4e2f) (div0-and-mod0 . as4e2e) (mod0 . as4e2d) (div0 . as4e2c) (div-and-mod . as4e2b) (mod . as4e2a) (div . as4e29) (denominator . as4e28) (cos . as4e27) (cons . as4e26) (complex? . as4e25) (char? . as4e24) (char>? . as4e23) (char>=? . as4e22) (char=? . as4e21) (char<? . as4e20) (char<=? . as4e1f) (char->integer . as4e1e) (ceiling . as4e1d) (call-with-values . as4e1c) (call/cc . as4e1b) (call-with-current-continuation . as4e1a) (cddddr . as4e19) (cdddar . as4e18) (cddadr . as4e17) (cddaar . as4e16) (cdaddr . as4e15) (cdadar . as4e14) (cdaadr . as4e13) (cdaaar . as4e12) (cadddr . as4e11) (caddar . as4e10) (cadadr . as4e0f) (cadaar . as4e0e) (caaddr . as4e0d) (caadar . as4e0c) (caaadr . as4e0b) (caaaar . as4e0a) (cdddr . as4e09) (cddar . as4e08) (cdadr . as4e07) (cdaar . as4e06) (caddr . as4e05) (cadar . as4e04) (caadr . as4e03) (caaar . as4e02) (cddr . as4e01) (cdar . as4e00) (cadr . as4dff) (caar . as4dfe) (cdr . as4dfd) (car . as4dfc) (boolean? . as4dfb) (boolean=? . as4dfa) (atan . as4df9) (assertion-violation . as4df8) (asin . as4df7) (apply . as4df6) (append . as4df5) (angle . as4df4) (acos . as4df3) (abs . as4df2) (/ . as4df1) (* . as4df0) (- . as4def) (+ . as4dee) (>= . as4ded) (> . as4dec) (= . as4deb) (<= . as4dea) (< . as4de9) (library . as4de8) (&no-nans . as4de7) (&no-infinities . as4de6) (&i/o-encoding . as4de5) (&i/o-decoding . as4de4) (&i/o-port . as4de3) (&i/o-file-does-not-exist . as4de2) (&i/o-file-already-exists . as4de1) (&i/o-file-is-read-only . as4de0) (&i/o-file-protection . as4ddf) (&i/o-filename . as4dde) (&i/o-invalid-position . as4ddd) (&i/o-write . as4ddc) (&i/o-read . as4ddb) (&i/o . as4dda) (&undefined . as4dd9) (&syntax . as4dd8) (&lexical . as4dd7) (&implementation-restriction . as4dd6) (&non-continuable . as4dd5) (&who . as4dd4) (&irritants . as4dd3) (&assertion . as4dd2) (&violation . as4dd1) (&error . as4dd0) (&serious . as4dcf) (&warning . as4dce) (&message . as4dcd) (&condition . as4dcc) (define-condition-type . as4dcb) (define-enumeration . as4dca) (define-record-type . as4dc9) (parent-rtd . as4dc8) (nongenerative . as4dc7) (opaque . as4dc6) (sealed . as4dc5) (protocol . as4dc4) (parent . as4dc3) (immutable . as4dc2) (mutable . as4dc1) (fields . as4dc0) (error-handling-mode . as4dbf) (file-options . as4dbe) (buffer-mode . as4dbd) (eol-style . as4dbc) (guard . as4dbb) (unsyntax-splicing . as4db8) (unsyntax . as4db7) (unquote-splicing . as4db6) (unquote . as4db5) (_ . as4db4) (else . as4db3) (=> . as4db2) (... . as4db1) (assert . as4db0) (endianness . as4daf) (time . as4dad) (do . as4dac) (cond . as4dab) (let* . as4daa) (let*-values . as4da9) (let-values . as4da8) (identifier-syntax . as4da7) (with-syntax . as4da6) (quasisyntax . as4da5) (quasiquote . as4da4) (syntax-rules . as4da3) (include . as4da2) (record-constructor-descriptor . as4da0) (record-type-descriptor . as4d9f) (case . as4d9e) (unless . as4d9c) (when . as4d9b) (or . as4d9a) (and . as4d99) (if . as4d98) (let . as4d97) (letrec* . as4d96) (letrec . as4d95) (case-lambda . as4d93) (lambda . as4d92) (syntax . as4d91) (syntax-case . as4d90) (quote . as4d8f) (letrec-syntax . as4d8d) (let-syntax . as4d8c) (set! . as4d8b) (import . as4d8a) (begin . as4d89) (define-syntax . as4d87) (define . as4d86)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5127 '(psyntax null-environment-5) '() '() '() '() '((make-promise . as4f89) (unquote-splicing . as4db6) (unquote . as4db5) (_ . as4db4) (else . as4db3) (=> . as4db2) (... . as4db1) (delay . as4dae) (do . as4dac) (cond . as4dab) (let* . as4daa) (quasiquote . as4da4) (syntax-rules . as4da3) (case . as4d9e) (or . as4d9a) (and . as4d99) (if . as4d98) (let . as4d97) (letrec . as4d95) (lambda . as4d92) (quote . as4d8f) (letrec-syntax . as4d8d) (let-syntax . as4d8c) (set! . as4d8b) (begin . as4d89) (define-syntax . as4d87) (define . as4d86)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5128 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . as503a) (string-ci>=? . as5039) (string-ci=? . as5038) (string-ci<? . as5037) (string-ci<=? . as5036) (char-whitespace? . as5035) (char-upper-case? . as5034) (char-numeric? . as5032) (char-lower-case? . as5031) (char-upcase . as502f) (char-downcase . as502c) (char-ci>? . as502b) (char-ci>=? . as502a) (char-ci=? . as5029) (char-ci<? . as5028) (char-ci<=? . as5027) (char-alphabetic? . as5026) (call-with-output-file . as4ffa) (call-with-input-file . as4ff9) (write-char . as4ff8) (write . as4ff7) (with-output-to-file . as4ff6) (with-input-from-file . as4ff5) (read-char . as4ff4) (read . as4ff3) (peek-char . as4ff2) (open-output-file . as4ff1) (open-input-file . as4ff0) (newline . as4fef) (display . as4fee) (close-output-port . as4fed) (close-input-port . as4fec) (eof-object . as4fea) (current-output-port . as4fe8) (current-input-port . as4fe7) (output-port? . as4fe6) (input-port? . as4fe5) (scheme-report-environment . as3177) (quotient . as4f8f) (null-environment . as3175) (remainder . as4f8e) (modulo . as4f8d) (inexact->exact . as4f8c) (force . as4f8b) (exact->inexact . as4f8a) (make-promise . as4f89) (string-fill! . as4f87) (string-set! . as4f86) (set-cdr! . as4f85) (set-car! . as4f84) (memv . as4f7e) (memq . as4f7d) (member . as4f7b) (assv . as4f73) (assq . as4f72) (assoc . as4f70) (eval . as317b) (zero? . as4e8a) (vector? . as4e89) (vector-set! . as4e88) (vector-ref . as4e87) (vector-length . as4e85) (vector-fill! . as4e83) (vector->list . as4e82) (vector . as4e81) (values . as4e80) (truncate . as4e7f) (tan . as4e7e) (symbol? . as4e7d) (symbol->string . as4e7b) (substring . as4e7a) (string? . as4e79) (string>? . as4e78) (string>=? . as4e77) (string=? . as4e76) (string<? . as4e75) (string<=? . as4e74) (string-ref . as4e73) (string-length . as4e72) (string-copy . as4e70) (string-append . as4e6f) (string->symbol . as4e6e) (string->number . as4e6d) (string->list . as4e6c) (string . as4e6b) (sqrt . as4e6a) (sin . as4e69) (round . as4e68) (reverse . as4e67) (real? . as4e66) (real-part . as4e64) (rationalize . as4e63) (rational? . as4e62) (procedure? . as4e60) (positive? . as4e5f) (pair? . as4e5e) (odd? . as4e5d) (numerator . as4e5c) (number? . as4e5b) (number->string . as4e5a) (not . as4e58) (negative? . as4e57) (min . as4e55) (max . as4e54) (map . as4e53) (make-vector . as4e52) (make-string . as4e51) (make-rectangular . as4e50) (make-polar . as4e4f) (magnitude . as4e4e) (log . as4e4d) (list? . as4e4c) (list-tail . as4e4b) (list-ref . as4e4a) (list->vector . as4e49) (list->string . as4e48) (list . as4e47) (length . as4e46) (lcm . as4e45) (integer? . as4e44) (integer->char . as4e42) (inexact? . as4e40) (imag-part . as4e3e) (gcd . as4e3d) (for-each . as4e3c) (floor . as4e3b) (expt . as4e39) (exp . as4e38) (exact? . as4e37) (even? . as4e34) (eqv? . as4e32) (equal? . as4e31) (eq? . as4e30) (dynamic-wind . as4e2f) (denominator . as4e28) (cos . as4e27) (cons . as4e26) (complex? . as4e25) (char? . as4e24) (char>? . as4e23) (char>=? . as4e22) (char=? . as4e21) (char<? . as4e20) (char<=? . as4e1f) (char->integer . as4e1e) (ceiling . as4e1d) (call-with-values . as4e1c) (call-with-current-continuation . as4e1a) (cddddr . as4e19) (cdddar . as4e18) (cddadr . as4e17) (cddaar . as4e16) (cdaddr . as4e15) (cdadar . as4e14) (cdaadr . as4e13) (cdaaar . as4e12) (cadddr . as4e11) (caddar . as4e10) (cadadr . as4e0f) (cadaar . as4e0e) (caaddr . as4e0d) (caadar . as4e0c) (caaadr . as4e0b) (caaaar . as4e0a) (cdddr . as4e09) (cddar . as4e08) (cdadr . as4e07) (cdaar . as4e06) (caddr . as4e05) (cadar . as4e04) (caadr . as4e03) (caaar . as4e02) (cddr . as4e01) (cdar . as4e00) (cadr . as4dff) (caar . as4dfe) (cdr . as4dfd) (car . as4dfc) (boolean? . as4dfb) (atan . as4df9) (asin . as4df7) (apply . as4df6) (append . as4df5) (angle . as4df4) (acos . as4df3) (abs . as4df2) (/ . as4df1) (* . as4df0) (- . as4def) (+ . as4dee) (>= . as4ded) (> . as4dec) (= . as4deb) (<= . as4dea) (< . as4de9) (unquote-splicing . as4db6) (unquote . as4db5) (else . as4db3) (=> . as4db2) (... . as4db1) (delay . as4dae) (do . as4dac) (cond . as4dab) (let* . as4daa) (quasiquote . as4da4) (syntax-rules . as4da3) (case . as4d9e) (or . as4d9a) (and . as4d99) (if . as4d98) (let . as4d97) (letrec . as4d95) (lambda . as4d92) (quote . as4d8f) (letrec-syntax . as4d8d) (let-syntax . as4d8c) (set! . as4d8b) (begin . as4d89) (define-syntax . as4d87) (define . as4d86)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5129 '(psyntax modules) '() '() '() '() '((module . as4d88)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as512a '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as512b '(rnrs) '(6) '() '() '() '((regexp? . as50e6) (string-upcase . as5042) (string-titlecase . as5041) (string-normalize-nfkd . as5040) (string-normalize-nfkc . as503f) (string-normalize-nfd . as503e) (string-normalize-nfc . as503d) (string-foldcase . as503c) (string-downcase . as503b) (string-ci>? . as503a) (string-ci>=? . as5039) (string-ci=? . as5038) (string-ci<? . as5037) (string-ci<=? . as5036) (char-whitespace? . as5035) (char-upper-case? . as5034) (char-title-case? . as5033) (char-numeric? . as5032) (char-lower-case? . as5031) (char-general-category . as5030) (char-upcase . as502f) (char-titlecase . as502e) (char-foldcase . as502d) (char-downcase . as502c) (char-ci>? . as502b) (char-ci>=? . as502a) (char-ci=? . as5029) (char-ci<? . as5028) (char-ci<=? . as5027) (char-alphabetic? . as5026) (make-variable-transformer . as2ee6) (identifier? . as319d) (generate-temporaries . as3189) (free-identifier=? . as318b) (syntax->datum . as31a1) (datum->syntax . as319f) (bound-identifier=? . as318d) (record-type-descriptor? . as5025) (record-predicate . as5024) (record-mutator . as5023) (record-constructor . as5022) (record-accessor . as5021) (make-record-type-descriptor . as5020) (make-record-constructor-descriptor . as501f) (record? . as501e) (record-type-uid . as501d) (record-type-sealed? . as501c) (record-type-parent . as501b) (record-type-opaque? . as501a) (record-type-name . as5019) (record-type-generative? . as5018) (record-type-field-names . as5017) (record-rtd . as5016) (record-field-mutable? . as5015) (delete-file . as5014) (file-exists? . as5013) (vector-sort! . as5012) (vector-sort . as5011) (list-sort . as5010) (symbol-hash . as500f) (string-ci-hash . as500e) (string-hash . as500d) (equal-hash . as500c) (hashtable-equivalence-function . as500b) (make-hashtable . as500a) (hashtable-hash-function . as5009) (make-eqv-hashtable . as5008) (make-eq-hashtable . as5007) (hashtable? . as5006) (hashtable-update! . as5005) (hashtable-size . as5004) (hashtable-set! . as5003) (hashtable-ref . as5002) (hashtable-mutable? . as5001) (hashtable-keys . as5000) (hashtable-entries . as4fff) (hashtable-delete! . as4ffe) (hashtable-copy . as4ffd) (hashtable-contains? . as4ffc) (hashtable-clear! . as4ffb) (call-with-output-file . as4ffa) (call-with-input-file . as4ff9) (write-char . as4ff8) (write . as4ff7) (with-output-to-file . as4ff6) (with-input-from-file . as4ff5) (read-char . as4ff4) (read . as4ff3) (peek-char . as4ff2) (open-output-file . as4ff1) (open-input-file . as4ff0) (newline . as4fef) (display . as4fee) (close-output-port . as4fed) (close-input-port . as4fec) (eof-object? . as4feb) (eof-object . as4fea) (current-error-port . as4fe9) (current-output-port . as4fe8) (current-input-port . as4fe7) (output-port? . as4fe6) (input-port? . as4fe5) (utf-8-codec . as4fe4) (utf-16-codec . as4fe3) (transcoder-error-handling-mode . as4fe2) (transcoder-eol-style . as4fe1) (transcoder-codec . as4fe0) (transcoded-port . as4fdf) (textual-port? . as4fde) (string->bytevector . as4fdd) (standard-output-port . as4fdc) (standard-input-port . as4fdb) (standard-error-port . as4fda) (set-port-position! . as4fd9) (put-u8 . as4fd8) (put-string . as4fd7) (put-datum . as4fd6) (put-char . as4fd5) (put-bytevector . as4fd4) (port? . as4fd3) (port-transcoder . as4fd2) (port-position . as4fd1) (port-has-set-port-position!? . as4fd0) (port-has-port-position? . as4fcf) (port-eof? . as4fce) (output-port-buffer-mode . as4fcd) (open-string-output-port . as4fcc) (open-string-input-port . as4fcb) (open-file-output-port . as4fca) (open-file-input/output-port . as4fc9) (open-file-input-port . as4fc8) (open-bytevector-output-port . as4fc7) (open-bytevector-input-port . as4fc6) (native-transcoder . as4fc5) (native-eol-style . as4fc4) (make-transcoder . as4fc3) (latin-1-codec . as4fc2) (make-i/o-write-error . as4fc1) (make-i/o-read-error . as4fc0) (make-i/o-port-error . as4fbf) (make-i/o-invalid-position-error . as4fbe) (make-i/o-filename-error . as4fbd) (make-i/o-file-protection-error . as4fbc) (make-i/o-file-is-read-only-error . as4fbb) (make-i/o-file-does-not-exist-error . as4fba) (make-i/o-file-already-exists-error . as4fb9) (make-i/o-error . as4fb8) (make-i/o-encoding-error . as4fb7) (make-i/o-decoding-error . as4fb6) (make-custom-textual-output-port . as4fb5) (make-custom-textual-input/output-port . as4fb4) (make-custom-textual-input-port . as4fb3) (make-custom-binary-output-port . as4fb2) (make-custom-binary-input/output-port . as4fb1) (make-custom-binary-input-port . as4fb0) (make-bytevector . as4faf) (lookahead-u8 . as4fae) (lookahead-char . as4fad) (i/o-write-error? . as4fac) (i/o-read-error? . as4fab) (i/o-port-error? . as4faa) (i/o-invalid-position-error? . as4fa9) (i/o-filename-error? . as4fa8) (i/o-file-protection-error? . as4fa7) (i/o-file-is-read-only-error? . as4fa6) (i/o-file-does-not-exist-error? . as4fa5) (i/o-file-already-exists-error? . as4fa4) (i/o-error? . as4fa3) (i/o-error-position . as4fa2) (i/o-error-port . as4fa1) (i/o-error-filename . as4fa0) (i/o-encoding-error? . as4f9f) (i/o-encoding-error-char . as4f9e) (i/o-decoding-error? . as4f9d) (get-u8 . as4f9c) (get-string-n! . as4f9b) (get-string-n . as4f9a) (get-string-all . as4f99) (get-line . as4f98) (get-datum . as4f97) (get-char . as4f96) (get-bytevector-some . as4f95) (get-bytevector-n! . as4f94) (get-bytevector-n . as4f93) (get-bytevector-all . as4f92) (flush-output-port . as4f91) (close-port . as4f90) (exit . as4f88) (command-line . as4c1e) (remove . as4f83) (remv . as4f82) (remp . as4f81) (remq . as4f80) (partition . as4f7f) (memv . as4f7e) (memq . as4f7d) (memp . as4f7c) (member . as4f7b) (exists . as4f7a) (for-all . as4f79) (fold-right . as4f78) (fold-left . as4f77) (find . as4f76) (filter . as4f75) (cons* . as4f74) (assv . as4f73) (assq . as4f72) (assp . as4f71) (assoc . as4f70) (call-with-string-output-port . as4f6f) (call-with-port . as4f6e) (call-with-bytevector-output-port . as4f6d) (bytevector->string . as4f6c) (buffer-mode? . as4f6b) (binary-port? . as4f6a) (with-exception-handler . as4f69) (raise-continuable . as4f68) (raise . as4f67) (make-enumeration . as4f66) (enum-set=? . as4f65) (enum-set-universe . as4f64) (enum-set-union . as4f63) (enum-set-subset? . as4f62) (enum-set-projection . as4f61) (enum-set-member? . as4f60) (enum-set-intersection . as4f5f) (enum-set-indexer . as4f5e) (enum-set-difference . as4f5d) (enum-set-constructor . as4f5c) (enum-set-complement . as4f5b) (enum-set->list . as4f5a) (who-condition? . as4f59) (warning? . as4f58) (violation? . as4f57) (undefined-violation? . as4f56) (syntax-violation? . as4f55) (syntax-violation-subform . as4f54) (syntax-violation-form . as4f53) (syntax-violation . as319b) (simple-conditions . as4f52) (serious-condition? . as4f51) (non-continuable-violation? . as4f50) (message-condition? . as4f4f) (make-who-condition . as4f4e) (make-warning . as4f4d) (make-violation . as4f4c) (make-undefined-violation . as4f4b) (make-syntax-violation . as4f4a) (make-serious-condition . as4f49) (make-non-continuable-violation . as4f48) (make-message-condition . as4f47) (make-lexical-violation . as4f46) (make-irritants-condition . as4f45) (make-implementation-restriction-violation . as4f44) (make-error . as4f43) (make-assertion-violation . as4f42) (lexical-violation? . as4f41) (irritants-condition? . as4f40) (implementation-restriction-violation? . as4f3f) (error? . as4f3e) (condition-who . as4f3d) (condition-predicate . as4f3c) (condition-message . as4f3b) (condition-irritants . as4f3a) (condition-accessor . as4f39) (condition . as4f38) (assertion-violation? . as4f37) (condition? . as4f36) (utf32->string . as4f35) (utf16->string . as4f34) (utf8->string . as4f33) (uint-list->bytevector . as4f32) (u8-list->bytevector . as4f31) (string->utf8 . as4f30) (string->utf32 . as4f2f) (string->utf16 . as4f2e) (sint-list->bytevector . as4f2d) (native-endianness . as4f2c) (bytevector? . as4f2b) (bytevector=? . as4f2a) (bytevector-uint-set! . as4f29) (bytevector-uint-ref . as4f28) (bytevector-u8-set! . as4f27) (bytevector-u8-ref . as4f26) (bytevector-u64-set! . as4f25) (bytevector-u64-ref . as4f24) (bytevector-u64-native-set! . as4f23) (bytevector-u64-native-ref . as4f22) (bytevector-u32-set! . as4f21) (bytevector-u32-ref . as4f20) (bytevector-u32-native-set! . as4f1f) (bytevector-u32-native-ref . as4f1e) (bytevector-u16-set! . as4f1d) (bytevector-u16-ref . as4f1c) (bytevector-u16-native-set! . as4f1b) (bytevector-u16-native-ref . as4f1a) (bytevector-sint-set! . as4f19) (bytevector-sint-ref . as4f18) (bytevector-s8-set! . as4f17) (bytevector-s8-ref . as4f16) (bytevector-s64-set! . as4f15) (bytevector-s64-ref . as4f14) (bytevector-s64-native-set! . as4f13) (bytevector-s64-native-ref . as4f12) (bytevector-s32-set! . as4f11) (bytevector-s32-ref . as4f10) (bytevector-s32-native-set! . as4f0f) (bytevector-s32-native-ref . as4f0e) (bytevector-s16-set! . as4f0d) (bytevector-s16-ref . as4f0c) (bytevector-s16-native-set! . as4f0b) (bytevector-s16-native-ref . as4f0a) (bytevector-length . as4f09) (bytevector-ieee-single-ref . as4f08) (bytevector-ieee-single-set! . as4f07) (bytevector-ieee-single-native-set! . as4f06) (bytevector-ieee-single-native-ref . as4f05) (bytevector-ieee-double-set! . as4f04) (bytevector-ieee-double-ref . as4f03) (bytevector-ieee-double-native-set! . as4f02) (bytevector-ieee-double-native-ref . as4f01) (bytevector-fill! . as4f00) (bytevector-copy! . as4eff) (bytevector-copy . as4efe) (bytevector->uint-list . as4efd) (bytevector->u8-list . as4efc) (bytevector->sint-list . as4efb) (no-nans-violation? . as4efa) (no-infinities-violation? . as4ef9) (make-no-nans-violation . as4ef8) (make-no-infinities-violation . as4ef7) (real->flonum . as4ef6) (flzero? . as4ef5) (fltruncate . as4ef4) (fltan . as4ef3) (flsqrt . as4ef2) (flsin . as4ef1) (flround . as4ef0) (flpositive? . as4eef) (flonum? . as4eee) (flodd? . as4eed) (flnumerator . as4eec) (flnegative? . as4eeb) (flnan? . as4eea) (flmod0 . as4ee9) (flmod . as4ee8) (flmin . as4ee7) (flmax . as4ee6) (fllog . as4ee5) (flinteger? . as4ee4) (flinfinite? . as4ee3) (flfloor . as4ee2) (flfinite? . as4ee1) (flexpt . as4ee0) (flexp . as4edf) (fleven? . as4ede) (fldiv0-and-mod0 . as4edd) (fldiv0 . as4edc) (fldiv-and-mod . as4edb) (fldiv . as4eda) (fldenominator . as4ed9) (flcos . as4ed8) (flceiling . as4ed7) (flatan . as4ed6) (flasin . as4ed5) (flacos . as4ed4) (flabs . as4ed3) (fl>? . as4ed2) (fl>=? . as4ed1) (fl=? . as4ed0) (fl<? . as4ecf) (fl<=? . as4ece) (fl/ . as4ecd) (fl- . as4ecc) (fl+ . as4ecb) (fl* . as4eca) (fixnum->flonum . as4ec9) (fxzero? . as4ec8) (fxxor . as4ec7) (fxrotate-bit-field . as4ec6) (fxreverse-bit-field . as4ec5) (fxpositive? . as4ec4) (fxodd? . as4ec3) (fxnot . as4ec2) (fxnegative? . as4ec1) (fxmod0 . as4ec0) (fxmod . as4ebf) (fxmin . as4ebe) (fxmax . as4ebd) (fxlength . as4ebc) (fxior . as4ebb) (fxif . as4eba) (fxfirst-bit-set . as4eb9) (fxeven? . as4eb8) (fxdiv0-and-mod0 . as4eb7) (fxdiv0 . as4eb6) (fxdiv-and-mod . as4eb5) (fxdiv . as4eb4) (fxcopy-bit-field . as4eb3) (fxcopy-bit . as4eb2) (fxbit-set? . as4eb1) (fxbit-field . as4eb0) (fxbit-count . as4eaf) (fxarithmetic-shift-right . as4eae) (fxarithmetic-shift-left . as4ead) (fxarithmetic-shift . as4eac) (fxand . as4eab) (fx>? . as4eaa) (fx>=? . as4ea9) (fx=? . as4ea8) (fx<? . as4ea7) (fx<=? . as4ea6) (fx-/carry . as4ea5) (fx- . as4ea4) (fx+/carry . as4ea3) (fx+ . as4ea2) (fx*/carry . as4ea1) (fx* . as4ea0) (greatest-fixnum . as4e9f) (least-fixnum . as4e9e) (fixnum-width . as4e9d) (fixnum? . as4e9c) (bitwise-rotate-bit-field . as4e9b) (bitwise-reverse-bit-field . as4e9a) (bitwise-length . as4e99) (bitwise-if . as4e98) (bitwise-first-bit-set . as4e97) (bitwise-copy-bit-field . as4e96) (bitwise-copy-bit . as4e95) (bitwise-bit-set? . as4e94) (bitwise-bit-field . as4e93) (bitwise-bit-count . as4e92) (bitwise-xor . as4e91) (bitwise-ior . as4e90) (bitwise-and . as4e8f) (bitwise-not . as4e8e) (bitwise-arithmetic-shift-right . as4e8d) (bitwise-arithmetic-shift-left . as4e8c) (bitwise-arithmetic-shift . as4e8b) (zero? . as4e8a) (vector? . as4e89) (vector-set! . as4e88) (vector-ref . as4e87) (vector-map . as4e86) (vector-length . as4e85) (vector-for-each . as4e84) (vector-fill! . as4e83) (vector->list . as4e82) (vector . as4e81) (values . as4e80) (truncate . as4e7f) (tan . as4e7e) (symbol? . as4e7d) (symbol=? . as4e7c) (symbol->string . as4e7b) (substring . as4e7a) (string? . as4e79) (string>? . as4e78) (string>=? . as4e77) (string=? . as4e76) (string<? . as4e75) (string<=? . as4e74) (string-ref . as4e73) (string-length . as4e72) (string-for-each . as4e71) (string-copy . as4e70) (string-append . as4e6f) (string->symbol . as4e6e) (string->number . as4e6d) (string->list . as4e6c) (string . as4e6b) (sqrt . as4e6a) (sin . as4e69) (round . as4e68) (reverse . as4e67) (real? . as4e66) (real-valued? . as4e65) (real-part . as4e64) (rationalize . as4e63) (rational? . as4e62) (rational-valued? . as4e61) (procedure? . as4e60) (positive? . as4e5f) (pair? . as4e5e) (odd? . as4e5d) (numerator . as4e5c) (number? . as4e5b) (number->string . as4e5a) (null? . as4e59) (not . as4e58) (negative? . as4e57) (nan? . as4e56) (min . as4e55) (max . as4e54) (map . as4e53) (make-vector . as4e52) (make-string . as4e51) (make-rectangular . as4e50) (make-polar . as4e4f) (magnitude . as4e4e) (log . as4e4d) (list? . as4e4c) (list-tail . as4e4b) (list-ref . as4e4a) (list->vector . as4e49) (list->string . as4e48) (list . as4e47) (length . as4e46) (lcm . as4e45) (integer? . as4e44) (integer-valued? . as4e43) (integer->char . as4e42) (infinite? . as4e41) (inexact? . as4e40) (inexact . as4e3f) (imag-part . as4e3e) (gcd . as4e3d) (for-each . as4e3c) (floor . as4e3b) (finite? . as4e3a) (expt . as4e39) (exp . as4e38) (exact? . as4e37) (exact-integer-sqrt . as4e36) (exact . as4e35) (even? . as4e34) (error . as4e33) (eqv? . as4e32) (equal? . as4e31) (eq? . as4e30) (dynamic-wind . as4e2f) (div0-and-mod0 . as4e2e) (mod0 . as4e2d) (div0 . as4e2c) (div-and-mod . as4e2b) (mod . as4e2a) (div . as4e29) (denominator . as4e28) (cos . as4e27) (cons . as4e26) (complex? . as4e25) (char? . as4e24) (char>? . as4e23) (char>=? . as4e22) (char=? . as4e21) (char<? . as4e20) (char<=? . as4e1f) (char->integer . as4e1e) (ceiling . as4e1d) (call-with-values . as4e1c) (call/cc . as4e1b) (call-with-current-continuation . as4e1a) (cddddr . as4e19) (cdddar . as4e18) (cddadr . as4e17) (cddaar . as4e16) (cdaddr . as4e15) (cdadar . as4e14) (cdaadr . as4e13) (cdaaar . as4e12) (cadddr . as4e11) (caddar . as4e10) (cadadr . as4e0f) (cadaar . as4e0e) (caaddr . as4e0d) (caadar . as4e0c) (caaadr . as4e0b) (caaaar . as4e0a) (cdddr . as4e09) (cddar . as4e08) (cdadr . as4e07) (cdaar . as4e06) (caddr . as4e05) (cadar . as4e04) (caadr . as4e03) (caaar . as4e02) (cddr . as4e01) (cdar . as4e00) (cadr . as4dff) (caar . as4dfe) (cdr . as4dfd) (car . as4dfc) (boolean? . as4dfb) (boolean=? . as4dfa) (atan . as4df9) (assertion-violation . as4df8) (asin . as4df7) (apply . as4df6) (append . as4df5) (angle . as4df4) (acos . as4df3) (abs . as4df2) (/ . as4df1) (* . as4df0) (- . as4def) (+ . as4dee) (>= . as4ded) (> . as4dec) (= . as4deb) (<= . as4dea) (< . as4de9) (&no-nans . as4de7) (&no-infinities . as4de6) (&i/o-encoding . as4de5) (&i/o-decoding . as4de4) (&i/o-port . as4de3) (&i/o-file-does-not-exist . as4de2) (&i/o-file-already-exists . as4de1) (&i/o-file-is-read-only . as4de0) (&i/o-file-protection . as4ddf) (&i/o-filename . as4dde) (&i/o-invalid-position . as4ddd) (&i/o-write . as4ddc) (&i/o-read . as4ddb) (&i/o . as4dda) (&undefined . as4dd9) (&syntax . as4dd8) (&lexical . as4dd7) (&implementation-restriction . as4dd6) (&non-continuable . as4dd5) (&who . as4dd4) (&irritants . as4dd3) (&assertion . as4dd2) (&violation . as4dd1) (&error . as4dd0) (&serious . as4dcf) (&warning . as4dce) (&message . as4dcd) (&condition . as4dcc) (define-condition-type . as4dcb) (define-enumeration . as4dca) (define-record-type . as4dc9) (parent-rtd . as4dc8) (nongenerative . as4dc7) (opaque . as4dc6) (sealed . as4dc5) (protocol . as4dc4) (parent . as4dc3) (immutable . as4dc2) (mutable . as4dc1) (fields . as4dc0) (error-handling-mode . as4dbf) (file-options . as4dbe) (buffer-mode . as4dbd) (eol-style . as4dbc) (guard . as4dbb) (unsyntax-splicing . as4db8) (unsyntax . as4db7) (unquote-splicing . as4db6) (unquote . as4db5) (_ . as4db4) (else . as4db3) (=> . as4db2) (... . as4db1) (assert . as4db0) (endianness . as4daf) (do . as4dac) (cond . as4dab) (let* . as4daa) (let*-values . as4da9) (let-values . as4da8) (identifier-syntax . as4da7) (with-syntax . as4da6) (quasisyntax . as4da5) (quasiquote . as4da4) (syntax-rules . as4da3) (record-constructor-descriptor . as4da0) (record-type-descriptor . as4d9f) (case . as4d9e) (unless . as4d9c) (when . as4d9b) (or . as4d9a) (and . as4d99) (if . as4d98) (let . as4d97) (letrec* . as4d96) (letrec . as4d95) (case-lambda . as4d93) (lambda . as4d92) (syntax . as4d91) (syntax-case . as4d90) (quote . as4d8f) (letrec-syntax . as4d8d) (let-syntax . as4d8c) (set! . as4d8b) (begin . as4d89) (define-syntax . as4d87) (define . as4d86)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as512c '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . as3177) (quotient . as4f8f) (null-environment . as3175) (remainder . as4f8e) (modulo . as4f8d) (inexact->exact . as4f8c) (force . as4f8b) (exact->inexact . as4f8a) (make-promise . as4f89) (delay . as4dae)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as512d '(rnrs control) '(6) '() '() '() '((do . as4dac) (unless . as4d9c) (when . as4d9b) (case-lambda . as4d93)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as512e '(rnrs eval) '(6) '() '() '() '((eval . as317b) (environment . as3173)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as512f '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . as4f85) (set-car! . as4f84)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5130 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . as4f87) (string-set! . as4f86)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5131 '(rnrs programs) '(6) '() '() '() '((exit . as4f88) (command-line . as4c1e)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5132 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . as2ee6) (identifier? . as319d) (generate-temporaries . as3189) (free-identifier=? . as318b) (syntax->datum . as31a1) (datum->syntax . as319f) (bound-identifier=? . as318d) (syntax-violation . as319b) (unsyntax-splicing . as4db8) (unsyntax . as4db7) (_ . as4db4) (... . as4db1) (with-syntax . as4da6) (quasisyntax . as4da5) (syntax . as4d91) (syntax-case . as4d90)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5133 '(rnrs files) '(6) '() '() '() '((delete-file . as5014) (file-exists? . as5013) (make-i/o-write-error . as4fc1) (make-i/o-read-error . as4fc0) (make-i/o-port-error . as4fbf) (make-i/o-invalid-position-error . as4fbe) (make-i/o-filename-error . as4fbd) (make-i/o-file-protection-error . as4fbc) (make-i/o-file-is-read-only-error . as4fbb) (make-i/o-file-does-not-exist-error . as4fba) (make-i/o-file-already-exists-error . as4fb9) (make-i/o-error . as4fb8) (i/o-write-error? . as4fac) (i/o-read-error? . as4fab) (i/o-port-error? . as4faa) (i/o-invalid-position-error? . as4fa9) (i/o-filename-error? . as4fa8) (i/o-file-protection-error? . as4fa7) (i/o-file-is-read-only-error? . as4fa6) (i/o-file-does-not-exist-error? . as4fa5) (i/o-file-already-exists-error? . as4fa4) (i/o-error? . as4fa3) (i/o-error-position . as4fa2) (i/o-error-port . as4fa1) (i/o-error-filename . as4fa0) (&i/o-port . as4de3) (&i/o-file-does-not-exist . as4de2) (&i/o-file-already-exists . as4de1) (&i/o-file-is-read-only . as4de0) (&i/o-file-protection . as4ddf) (&i/o-filename . as4dde) (&i/o-invalid-position . as4ddd) (&i/o-write . as4ddc) (&i/o-read . as4ddb) (&i/o . as4dda)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5134 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . as5012) (vector-sort . as5011) (list-sort . as5010)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5135 '(rnrs base) '(6) '() '() '() '((zero? . as4e8a) (vector? . as4e89) (vector-set! . as4e88) (vector-ref . as4e87) (vector-map . as4e86) (vector-length . as4e85) (vector-for-each . as4e84) (vector-fill! . as4e83) (vector->list . as4e82) (vector . as4e81) (values . as4e80) (truncate . as4e7f) (tan . as4e7e) (symbol? . as4e7d) (symbol=? . as4e7c) (symbol->string . as4e7b) (substring . as4e7a) (string? . as4e79) (string>? . as4e78) (string>=? . as4e77) (string=? . as4e76) (string<? . as4e75) (string<=? . as4e74) (string-ref . as4e73) (string-length . as4e72) (string-for-each . as4e71) (string-copy . as4e70) (string-append . as4e6f) (string->symbol . as4e6e) (string->number . as4e6d) (string->list . as4e6c) (string . as4e6b) (sqrt . as4e6a) (sin . as4e69) (round . as4e68) (reverse . as4e67) (real? . as4e66) (real-valued? . as4e65) (real-part . as4e64) (rationalize . as4e63) (rational? . as4e62) (rational-valued? . as4e61) (procedure? . as4e60) (positive? . as4e5f) (pair? . as4e5e) (odd? . as4e5d) (numerator . as4e5c) (number? . as4e5b) (number->string . as4e5a) (null? . as4e59) (not . as4e58) (negative? . as4e57) (nan? . as4e56) (min . as4e55) (max . as4e54) (map . as4e53) (make-vector . as4e52) (make-string . as4e51) (make-rectangular . as4e50) (make-polar . as4e4f) (magnitude . as4e4e) (log . as4e4d) (list? . as4e4c) (list-tail . as4e4b) (list-ref . as4e4a) (list->vector . as4e49) (list->string . as4e48) (list . as4e47) (length . as4e46) (lcm . as4e45) (integer? . as4e44) (integer-valued? . as4e43) (integer->char . as4e42) (infinite? . as4e41) (inexact? . as4e40) (inexact . as4e3f) (imag-part . as4e3e) (gcd . as4e3d) (for-each . as4e3c) (floor . as4e3b) (finite? . as4e3a) (expt . as4e39) (exp . as4e38) (exact? . as4e37) (exact-integer-sqrt . as4e36) (exact . as4e35) (even? . as4e34) (error . as4e33) (eqv? . as4e32) (equal? . as4e31) (eq? . as4e30) (dynamic-wind . as4e2f) (div0-and-mod0 . as4e2e) (mod0 . as4e2d) (div0 . as4e2c) (div-and-mod . as4e2b) (mod . as4e2a) (div . as4e29) (denominator . as4e28) (cos . as4e27) (cons . as4e26) (complex? . as4e25) (char? . as4e24) (char>? . as4e23) (char>=? . as4e22) (char=? . as4e21) (char<? . as4e20) (char<=? . as4e1f) (char->integer . as4e1e) (ceiling . as4e1d) (call-with-values . as4e1c) (call/cc . as4e1b) (call-with-current-continuation . as4e1a) (cddddr . as4e19) (cdddar . as4e18) (cddadr . as4e17) (cddaar . as4e16) (cdaddr . as4e15) (cdadar . as4e14) (cdaadr . as4e13) (cdaaar . as4e12) (cadddr . as4e11) (caddar . as4e10) (cadadr . as4e0f) (cadaar . as4e0e) (caaddr . as4e0d) (caadar . as4e0c) (caaadr . as4e0b) (caaaar . as4e0a) (cdddr . as4e09) (cddar . as4e08) (cdadr . as4e07) (cdaar . as4e06) (caddr . as4e05) (cadar . as4e04) (caadr . as4e03) (caaar . as4e02) (cddr . as4e01) (cdar . as4e00) (cadr . as4dff) (caar . as4dfe) (cdr . as4dfd) (car . as4dfc) (boolean? . as4dfb) (boolean=? . as4dfa) (atan . as4df9) (assertion-violation . as4df8) (asin . as4df7) (apply . as4df6) (append . as4df5) (angle . as4df4) (acos . as4df3) (abs . as4df2) (/ . as4df1) (* . as4df0) (- . as4def) (+ . as4dee) (>= . as4ded) (> . as4dec) (= . as4deb) (<= . as4dea) (< . as4de9) (unquote-splicing . as4db6) (unquote . as4db5) (_ . as4db4) (else . as4db3) (=> . as4db2) (... . as4db1) (assert . as4db0) (cond . as4dab) (let* . as4daa) (let*-values . as4da9) (let-values . as4da8) (identifier-syntax . as4da7) (quasiquote . as4da4) (syntax-rules . as4da3) (case . as4d9e) (or . as4d9a) (and . as4d99) (if . as4d98) (let . as4d97) (letrec* . as4d96) (letrec . as4d95) (lambda . as4d92) (quote . as4d8f) (letrec-syntax . as4d8d) (let-syntax . as4d8c) (set! . as4d8b) (begin . as4d89) (define-syntax . as4d87) (define . as4d86)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5136 '(rnrs lists) '(6) '() '() '() '((remove . as4f83) (remv . as4f82) (remp . as4f81) (remq . as4f80) (partition . as4f7f) (memv . as4f7e) (memq . as4f7d) (memp . as4f7c) (member . as4f7b) (exists . as4f7a) (for-all . as4f79) (fold-right . as4f78) (fold-left . as4f77) (find . as4f76) (filter . as4f75) (cons* . as4f74) (assv . as4f73) (assq . as4f72) (assp . as4f71) (assoc . as4f70)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5137 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . as4ffa) (call-with-input-file . as4ff9) (write-char . as4ff8) (write . as4ff7) (with-output-to-file . as4ff6) (with-input-from-file . as4ff5) (read-char . as4ff4) (read . as4ff3) (peek-char . as4ff2) (open-output-file . as4ff1) (open-input-file . as4ff0) (newline . as4fef) (display . as4fee) (close-output-port . as4fed) (close-input-port . as4fec) (eof-object? . as4feb) (eof-object . as4fea) (current-error-port . as4fe9) (current-output-port . as4fe8) (current-input-port . as4fe7) (output-port? . as4fe6) (input-port? . as4fe5) (make-i/o-write-error . as4fc1) (make-i/o-read-error . as4fc0) (make-i/o-port-error . as4fbf) (make-i/o-invalid-position-error . as4fbe) (make-i/o-filename-error . as4fbd) (make-i/o-file-protection-error . as4fbc) (make-i/o-file-is-read-only-error . as4fbb) (make-i/o-file-does-not-exist-error . as4fba) (make-i/o-file-already-exists-error . as4fb9) (make-i/o-error . as4fb8) (i/o-write-error? . as4fac) (i/o-read-error? . as4fab) (i/o-port-error? . as4faa) (i/o-invalid-position-error? . as4fa9) (i/o-filename-error? . as4fa8) (i/o-file-protection-error? . as4fa7) (i/o-file-is-read-only-error? . as4fa6) (i/o-file-does-not-exist-error? . as4fa5) (i/o-file-already-exists-error? . as4fa4) (i/o-error? . as4fa3) (i/o-error-position . as4fa2) (i/o-error-port . as4fa1) (i/o-error-filename . as4fa0) (&i/o-port . as4de3) (&i/o-file-does-not-exist . as4de2) (&i/o-file-already-exists . as4de1) (&i/o-file-is-read-only . as4de0) (&i/o-file-protection . as4ddf) (&i/o-filename . as4dde) (&i/o-invalid-position . as4ddd) (&i/o-write . as4ddc) (&i/o-read . as4ddb) (&i/o . as4dda)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5138 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . as4faf) (utf32->string . as4f35) (utf16->string . as4f34) (utf8->string . as4f33) (uint-list->bytevector . as4f32) (u8-list->bytevector . as4f31) (string->utf8 . as4f30) (string->utf32 . as4f2f) (string->utf16 . as4f2e) (sint-list->bytevector . as4f2d) (native-endianness . as4f2c) (bytevector? . as4f2b) (bytevector=? . as4f2a) (bytevector-uint-set! . as4f29) (bytevector-uint-ref . as4f28) (bytevector-u8-set! . as4f27) (bytevector-u8-ref . as4f26) (bytevector-u64-set! . as4f25) (bytevector-u64-ref . as4f24) (bytevector-u64-native-set! . as4f23) (bytevector-u64-native-ref . as4f22) (bytevector-u32-set! . as4f21) (bytevector-u32-ref . as4f20) (bytevector-u32-native-set! . as4f1f) (bytevector-u32-native-ref . as4f1e) (bytevector-u16-set! . as4f1d) (bytevector-u16-ref . as4f1c) (bytevector-u16-native-set! . as4f1b) (bytevector-u16-native-ref . as4f1a) (bytevector-sint-set! . as4f19) (bytevector-sint-ref . as4f18) (bytevector-s8-set! . as4f17) (bytevector-s8-ref . as4f16) (bytevector-s64-set! . as4f15) (bytevector-s64-ref . as4f14) (bytevector-s64-native-set! . as4f13) (bytevector-s64-native-ref . as4f12) (bytevector-s32-set! . as4f11) (bytevector-s32-ref . as4f10) (bytevector-s32-native-set! . as4f0f) (bytevector-s32-native-ref . as4f0e) (bytevector-s16-set! . as4f0d) (bytevector-s16-ref . as4f0c) (bytevector-s16-native-set! . as4f0b) (bytevector-s16-native-ref . as4f0a) (bytevector-length . as4f09) (bytevector-ieee-single-ref . as4f08) (bytevector-ieee-single-set! . as4f07) (bytevector-ieee-single-native-set! . as4f06) (bytevector-ieee-single-native-ref . as4f05) (bytevector-ieee-double-set! . as4f04) (bytevector-ieee-double-ref . as4f03) (bytevector-ieee-double-native-set! . as4f02) (bytevector-ieee-double-native-ref . as4f01) (bytevector-fill! . as4f00) (bytevector-copy! . as4eff) (bytevector-copy . as4efe) (bytevector->uint-list . as4efd) (bytevector->u8-list . as4efc) (bytevector->sint-list . as4efb) (endianness . as4daf)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5139 '(rnrs unicode) '(6) '() '() '() '((string-upcase . as5042) (string-titlecase . as5041) (string-normalize-nfkd . as5040) (string-normalize-nfkc . as503f) (string-normalize-nfd . as503e) (string-normalize-nfc . as503d) (string-foldcase . as503c) (string-downcase . as503b) (string-ci>? . as503a) (string-ci>=? . as5039) (string-ci=? . as5038) (string-ci<? . as5037) (string-ci<=? . as5036) (char-whitespace? . as5035) (char-upper-case? . as5034) (char-title-case? . as5033) (char-numeric? . as5032) (char-lower-case? . as5031) (char-general-category . as5030) (char-upcase . as502f) (char-titlecase . as502e) (char-foldcase . as502d) (char-downcase . as502c) (char-ci>? . as502b) (char-ci>=? . as502a) (char-ci=? . as5029) (char-ci<? . as5028) (char-ci<=? . as5027) (char-alphabetic? . as5026)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as513a '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . as4f69) (raise-continuable . as4f68) (raise . as4f67) (guard . as4dbb) (else . as4db3) (=> . as4db2)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as513b '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . as4e9b) (bitwise-reverse-bit-field . as4e9a) (bitwise-length . as4e99) (bitwise-if . as4e98) (bitwise-first-bit-set . as4e97) (bitwise-copy-bit-field . as4e96) (bitwise-copy-bit . as4e95) (bitwise-bit-set? . as4e94) (bitwise-bit-field . as4e93) (bitwise-bit-count . as4e92) (bitwise-xor . as4e91) (bitwise-ior . as4e90) (bitwise-and . as4e8f) (bitwise-not . as4e8e) (bitwise-arithmetic-shift-right . as4e8d) (bitwise-arithmetic-shift-left . as4e8c) (bitwise-arithmetic-shift . as4e8b)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as513c '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . as4ec8) (fxxor . as4ec7) (fxrotate-bit-field . as4ec6) (fxreverse-bit-field . as4ec5) (fxpositive? . as4ec4) (fxodd? . as4ec3) (fxnot . as4ec2) (fxnegative? . as4ec1) (fxmod0 . as4ec0) (fxmod . as4ebf) (fxmin . as4ebe) (fxmax . as4ebd) (fxlength . as4ebc) (fxior . as4ebb) (fxif . as4eba) (fxfirst-bit-set . as4eb9) (fxeven? . as4eb8) (fxdiv0-and-mod0 . as4eb7) (fxdiv0 . as4eb6) (fxdiv-and-mod . as4eb5) (fxdiv . as4eb4) (fxcopy-bit-field . as4eb3) (fxcopy-bit . as4eb2) (fxbit-set? . as4eb1) (fxbit-field . as4eb0) (fxbit-count . as4eaf) (fxarithmetic-shift-right . as4eae) (fxarithmetic-shift-left . as4ead) (fxarithmetic-shift . as4eac) (fxand . as4eab) (fx>? . as4eaa) (fx>=? . as4ea9) (fx=? . as4ea8) (fx<? . as4ea7) (fx<=? . as4ea6) (fx-/carry . as4ea5) (fx- . as4ea4) (fx+/carry . as4ea3) (fx+ . as4ea2) (fx*/carry . as4ea1) (fx* . as4ea0) (greatest-fixnum . as4e9f) (least-fixnum . as4e9e) (fixnum-width . as4e9d) (fixnum? . as4e9c)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as513d '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . as4efa) (no-infinities-violation? . as4ef9) (make-no-nans-violation . as4ef8) (make-no-infinities-violation . as4ef7) (real->flonum . as4ef6) (flzero? . as4ef5) (fltruncate . as4ef4) (fltan . as4ef3) (flsqrt . as4ef2) (flsin . as4ef1) (flround . as4ef0) (flpositive? . as4eef) (flonum? . as4eee) (flodd? . as4eed) (flnumerator . as4eec) (flnegative? . as4eeb) (flnan? . as4eea) (flmod0 . as4ee9) (flmod . as4ee8) (flmin . as4ee7) (flmax . as4ee6) (fllog . as4ee5) (flinteger? . as4ee4) (flinfinite? . as4ee3) (flfloor . as4ee2) (flfinite? . as4ee1) (flexpt . as4ee0) (flexp . as4edf) (fleven? . as4ede) (fldiv0-and-mod0 . as4edd) (fldiv0 . as4edc) (fldiv-and-mod . as4edb) (fldiv . as4eda) (fldenominator . as4ed9) (flcos . as4ed8) (flceiling . as4ed7) (flatan . as4ed6) (flasin . as4ed5) (flacos . as4ed4) (flabs . as4ed3) (fl>? . as4ed2) (fl>=? . as4ed1) (fl=? . as4ed0) (fl<? . as4ecf) (fl<=? . as4ece) (fl/ . as4ecd) (fl- . as4ecc) (fl+ . as4ecb) (fl* . as4eca) (fixnum->flonum . as4ec9) (&no-nans . as4de7) (&no-infinities . as4de6)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as513e '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . as500f) (string-ci-hash . as500e) (string-hash . as500d) (equal-hash . as500c) (hashtable-equivalence-function . as500b) (make-hashtable . as500a) (hashtable-hash-function . as5009) (make-eqv-hashtable . as5008) (make-eq-hashtable . as5007) (hashtable? . as5006) (hashtable-update! . as5005) (hashtable-size . as5004) (hashtable-set! . as5003) (hashtable-ref . as5002) (hashtable-mutable? . as5001) (hashtable-keys . as5000) (hashtable-entries . as4fff) (hashtable-delete! . as4ffe) (hashtable-copy . as4ffd) (hashtable-contains? . as4ffc) (hashtable-clear! . as4ffb)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as513f '(rnrs io ports) '(6) '() '() '() '((eof-object? . as4feb) (eof-object . as4fea) (current-error-port . as4fe9) (current-output-port . as4fe8) (current-input-port . as4fe7) (output-port? . as4fe6) (input-port? . as4fe5) (utf-8-codec . as4fe4) (utf-16-codec . as4fe3) (transcoder-error-handling-mode . as4fe2) (transcoder-eol-style . as4fe1) (transcoder-codec . as4fe0) (transcoded-port . as4fdf) (textual-port? . as4fde) (string->bytevector . as4fdd) (standard-output-port . as4fdc) (standard-input-port . as4fdb) (standard-error-port . as4fda) (set-port-position! . as4fd9) (put-u8 . as4fd8) (put-string . as4fd7) (put-datum . as4fd6) (put-char . as4fd5) (put-bytevector . as4fd4) (port? . as4fd3) (port-transcoder . as4fd2) (port-position . as4fd1) (port-has-set-port-position!? . as4fd0) (port-has-port-position? . as4fcf) (port-eof? . as4fce) (output-port-buffer-mode . as4fcd) (open-string-output-port . as4fcc) (open-string-input-port . as4fcb) (open-file-output-port . as4fca) (open-file-input/output-port . as4fc9) (open-file-input-port . as4fc8) (open-bytevector-output-port . as4fc7) (open-bytevector-input-port . as4fc6) (native-transcoder . as4fc5) (native-eol-style . as4fc4) (make-transcoder . as4fc3) (latin-1-codec . as4fc2) (make-i/o-write-error . as4fc1) (make-i/o-read-error . as4fc0) (make-i/o-port-error . as4fbf) (make-i/o-invalid-position-error . as4fbe) (make-i/o-filename-error . as4fbd) (make-i/o-file-protection-error . as4fbc) (make-i/o-file-is-read-only-error . as4fbb) (make-i/o-file-does-not-exist-error . as4fba) (make-i/o-file-already-exists-error . as4fb9) (make-i/o-error . as4fb8) (make-i/o-encoding-error . as4fb7) (make-i/o-decoding-error . as4fb6) (make-custom-textual-output-port . as4fb5) (make-custom-textual-input/output-port . as4fb4) (make-custom-textual-input-port . as4fb3) (make-custom-binary-output-port . as4fb2) (make-custom-binary-input/output-port . as4fb1) (make-custom-binary-input-port . as4fb0) (lookahead-u8 . as4fae) (lookahead-char . as4fad) (i/o-write-error? . as4fac) (i/o-read-error? . as4fab) (i/o-port-error? . as4faa) (i/o-invalid-position-error? . as4fa9) (i/o-filename-error? . as4fa8) (i/o-file-protection-error? . as4fa7) (i/o-file-is-read-only-error? . as4fa6) (i/o-file-does-not-exist-error? . as4fa5) (i/o-file-already-exists-error? . as4fa4) (i/o-error? . as4fa3) (i/o-error-position . as4fa2) (i/o-error-port . as4fa1) (i/o-error-filename . as4fa0) (i/o-encoding-error? . as4f9f) (i/o-encoding-error-char . as4f9e) (i/o-decoding-error? . as4f9d) (get-u8 . as4f9c) (get-string-n! . as4f9b) (get-string-n . as4f9a) (get-string-all . as4f99) (get-line . as4f98) (get-datum . as4f97) (get-char . as4f96) (get-bytevector-some . as4f95) (get-bytevector-n! . as4f94) (get-bytevector-n . as4f93) (get-bytevector-all . as4f92) (flush-output-port . as4f91) (close-port . as4f90) (call-with-string-output-port . as4f6f) (call-with-port . as4f6e) (call-with-bytevector-output-port . as4f6d) (bytevector->string . as4f6c) (buffer-mode? . as4f6b) (binary-port? . as4f6a) (&i/o-encoding . as4de5) (&i/o-decoding . as4de4) (&i/o-port . as4de3) (&i/o-file-does-not-exist . as4de2) (&i/o-file-already-exists . as4de1) (&i/o-file-is-read-only . as4de0) (&i/o-file-protection . as4ddf) (&i/o-filename . as4dde) (&i/o-invalid-position . as4ddd) (&i/o-write . as4ddc) (&i/o-read . as4ddb) (&i/o . as4dda) (error-handling-mode . as4dbf) (file-options . as4dbe) (buffer-mode . as4dbd) (eol-style . as4dbc)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5140 '(rnrs enums) '(6) '() '() '() '((make-enumeration . as4f66) (enum-set=? . as4f65) (enum-set-universe . as4f64) (enum-set-union . as4f63) (enum-set-subset? . as4f62) (enum-set-projection . as4f61) (enum-set-member? . as4f60) (enum-set-intersection . as4f5f) (enum-set-indexer . as4f5e) (enum-set-difference . as4f5d) (enum-set-constructor . as4f5c) (enum-set-complement . as4f5b) (enum-set->list . as4f5a) (define-enumeration . as4dca)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5141 '(rnrs conditions) '(6) '() '() '() '((who-condition? . as4f59) (warning? . as4f58) (violation? . as4f57) (undefined-violation? . as4f56) (syntax-violation? . as4f55) (syntax-violation-subform . as4f54) (syntax-violation-form . as4f53) (syntax-violation . as319b) (simple-conditions . as4f52) (serious-condition? . as4f51) (non-continuable-violation? . as4f50) (message-condition? . as4f4f) (make-who-condition . as4f4e) (make-warning . as4f4d) (make-violation . as4f4c) (make-undefined-violation . as4f4b) (make-syntax-violation . as4f4a) (make-serious-condition . as4f49) (make-non-continuable-violation . as4f48) (make-message-condition . as4f47) (make-lexical-violation . as4f46) (make-irritants-condition . as4f45) (make-implementation-restriction-violation . as4f44) (make-error . as4f43) (make-assertion-violation . as4f42) (lexical-violation? . as4f41) (irritants-condition? . as4f40) (implementation-restriction-violation? . as4f3f) (error? . as4f3e) (condition-who . as4f3d) (condition-predicate . as4f3c) (condition-message . as4f3b) (condition-irritants . as4f3a) (condition-accessor . as4f39) (condition . as4f38) (assertion-violation? . as4f37) (condition? . as4f36) (&undefined . as4dd9) (&syntax . as4dd8) (&lexical . as4dd7) (&implementation-restriction . as4dd6) (&non-continuable . as4dd5) (&who . as4dd4) (&irritants . as4dd3) (&assertion . as4dd2) (&violation . as4dd1) (&error . as4dd0) (&serious . as4dcf) (&warning . as4dce) (&message . as4dcd) (&condition . as4dcc) (define-condition-type . as4dcb)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5142 '(rnrs records inspection) '(6) '() '() '() '((record? . as501e) (record-type-uid . as501d) (record-type-sealed? . as501c) (record-type-parent . as501b) (record-type-opaque? . as501a) (record-type-name . as5019) (record-type-generative? . as5018) (record-type-field-names . as5017) (record-rtd . as5016) (record-field-mutable? . as5015)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5143 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . as5025) (record-predicate . as5024) (record-mutator . as5023) (record-constructor . as5022) (record-accessor . as5021) (make-record-type-descriptor . as5020) (make-record-constructor-descriptor . as501f)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5144 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . as4dc9) (parent-rtd . as4dc8) (nongenerative . as4dc7) (opaque . as4dc6) (sealed . as4dc5) (protocol . as4dc4) (parent . as4dc3) (immutable . as4dc2) (mutable . as4dc1) (fields . as4dc0) (record-constructor-descriptor . as4da0) (record-type-descriptor . as4d9f)) '() values values '#f '#f '#t '#f) (as2ccf@as2b1b@install-library 'as5145 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . as5125) (&no-nans-rtd . as5124) (&no-infinities-rcd . as5123) (&no-infinities-rtd . as5122) (&i/o-encoding-rcd . as5121) (&i/o-encoding-rtd . as5120) (&i/o-decoding-rcd . as511f) (&i/o-decoding-rtd . as511e) (&i/o-port-rcd . as511d) (&i/o-port-rtd . as511c) (&i/o-file-does-not-exist-rcd . as511b) (&i/o-file-does-not-exist-rtd . as511a) (&i/o-file-already-exists-rcd . as5119) (&i/o-file-already-exists-rtd . as5118) (&i/o-file-is-read-only-rcd . as5117) (&i/o-file-is-read-only-rtd . as5116) (&i/o-file-protection-rcd . as5115) (&i/o-file-protection-rtd . as5114) (&i/o-filename-rcd . as5113) (&i/o-filename-rtd . as5112) (&i/o-invalid-position-rcd . as5111) (&i/o-invalid-position-rtd . as5110) (&i/o-write-rcd . as510f) (&i/o-write-rtd . as510e) (&i/o-read-rcd . as510d) (&i/o-read-rtd . as510c) (&i/o-rcd . as510b) (&i/o-rtd . as510a) (&undefined-rcd . as5109) (&undefined-rtd . as5108) (&syntax-rcd . as5107) (&syntax-rtd . as5106) (&lexical-rcd . as5105) (&lexical-rtd . as5104) (&implementation-restriction-rcd . as5103) (&implementation-restriction-rtd . as5102) (&non-continuable-rcd . as5101) (&non-continuable-rtd . as5100) (&who-rcd . as50ff) (&who-rtd . as50fe) (&irritants-rcd . as50fd) (&irritants-rtd . as50fc) (&assertion-rcd . as50fb) (&assertion-rtd . as50fa) (&violation-rcd . as50f9) (&violation-rtd . as50f8) (&error-rcd . as50f7) (&error-rtd . as50f6) (&serious-rcd . as50f5) (&serious-rtd . as50f4) (&warning-rcd . as50f3) (&warning-rtd . as50f2) (&message-rcd . as50f1) (&message-rtd . as50f0) (&condition-rcd . as50ef) (&condition-rtd . as50ee) (syntax-error . as3197) (syntax-dispatch . as30bb) (pretty-print . as50ed) (eval-core . as50ec) (set-symbol-value! . as50eb) (symbol-value . as50ea) (gensym . as50e9) (void . as50e8) (load . as4c24) (interaction-environment . as31a9) (char-ready? . as50e7) (regexp? . as50e6) (read-line . as50e5) (gensym-prefix-set! . as50e4) (ungensym . as50e3) (alist->eq-hash-table . as50e2) (assoc-ref . as50e1) (print . as50e0) (format . as50df) (host-os . as50de) (library-path . as2afa) (standard-library-path . as50dd) (file-newer? . as50dc) (stat-mtime . as50db) (write-to-file . as50da) (file->list . as50d9) (file->string . as50d8) (digit->integer . as50d7) (call-with-string-input-port . as50d6) (call-with-string-io . as50d5) (string-split . as50d4) (bytevector-for-each . as50d3) (string->regexp . as50d2) (rxmatch . as50d1) (regexp-replace-all . as50d0) (hashtable-for-each . as50cf) (mosh-cache-dir . as28e4) (call-process . as50ce) (local-tz-offset . as50cd) (microseconds . as50cc) (directory-list . as50cb) (set-current-directory! . as50ca) (expand-path . as50c9) (current-directory . as50c8) (%spawn . as50c7) (%waitpid . as50c6) (simple-struct-name . as50c5) (simple-struct-set! . as50c4) (simple-struct-ref . as50c3) (make-simple-struct . as50c2) (simple-struct? . as50c1) (pointer-ref-c-int64 . as50c0) (pointer-ref-c-int32 . as50bf) (pointer-ref-c-int16 . as50be) (pointer-ref-c-int8 . as50bd) (pointer-ref-c-uint64 . as50bc) (pointer-ref-c-uint32 . as50bb) (pointer-ref-c-uint16 . as50ba) (pointer-ref-c-uint8 . as50b9) (pointer-set-c-uint64! . as50b8) (pointer-set-c-uint32! . as50b7) (pointer-set-c-uint16! . as50b6) (pointer-set-c-uint8! . as50b5) (pointer-set-c-int64! . as50b4) (pointer-set-c-int32! . as50b3) (pointer-set-c-int16! . as50b2) (pointer-set-c-int8! . as50b1) (pointer-set-c-pointer! . as50b0) (pointer-set-c-double! . as50af) (pointer-set-c-float! . as50ae) (pointer-set-c-long-long! . as50ad) (pointer-set-c-long! . as50ac) (pointer-set-c-int! . as50ab) (pointer-set-c-short! . as50aa) (pointer-set-c-char! . as50a9) (pointer-ref-c-pointer . as50a8) (pointer-ref-c-double . as50a7) (pointer-ref-c-float . as50a6) (pointer-ref-c-unsigned-long-long . as50a5) (pointer-ref-c-signed-long-long . as50a4) (pointer-ref-c-unsigned-long . as50a3) (pointer-ref-c-signed-long . as50a2) (pointer-ref-c-unsigned-int . as50a1) (pointer-ref-c-signed-int . as50a0) (pointer-ref-c-unsigned-short . as509f) (pointer-ref-c-signed-short . as509e) (pointer-ref-c-unsigned-char . as509d) (pointer-ref-c-signed-char . as509c) (pointer->integer . as509b) (integer->pointer . as509a) (pointer? . as5099) (shared-errno . as5098) (%ffi-free-c-callback-trampoline . as5097) (%ffi-make-c-callback-trampoline . as5096) (%ffi-free . as5095) (%ffi-malloc . as5094) (%ffi-supported? . as5093) (%ffi-pointer->string . as5092) (%ffi-call . as5091) (%ffi-lookup . as5090) (%ffi-open . as508f) (null-terminated-utf8->string . as508e) (null-terminated-bytevector->string . as508d) (%exec . as508c) (%fork . as508b) (%pipe . as508a) (p . as5089) (open-output-string . as5088) (get-output-string . as5087) (file-stat-ctime . as5086) (file-stat-atime . as5085) (file-stat-mtime . as5084) (file-size-in-bytes . as5083) (file-writable? . as5082) (file-executable? . as5081) (file-readable? . as5080) (file-regular? . as507f) (file-symbolic-link? . as507e) (file-directory? . as507d) (create-symbolic-link . as507c) (rename-file . as507b) (delete-directory . as507a) (create-directory . as5079) (create-mosh-cache-dir . as5078) (get-environment-variables . as5077) (current-exception-handler . as5076) (get-environment-variable . as5075) (join-wraps . as5074) (id->real-label . as5073) (same-marks? . as5072) (same-marks*? . as5071) (get-timeofday . as5070) (get-command-line . as506f) (sys-display . as506e) (whereis . as506d) (register . as506c) (vm-join! . as506b) (vm-set-value! . as506a) (vm? . as5069) (main-vm? . as5068) (vm-eval . as5067) (vm-self . as5066) (vm-start! . as5065) (make-vm . as5064) (mutex-try-lock! . as5063) (mutex-unlock! . as5062) (mutex-lock! . as5061) (mutex? . as5060) (make-mutex . as505f) (condition-variable-notify-all! . as505e) (condition-variable-notify! . as505d) (condition-variable-wait! . as505c) (make-condition-variable . as505b) (write/ss . as505a) (mosh-executable-path . as5059) (make-file-options . as5058) (source-info . as5057) (make-compiler-instruction . as5056) (make-instruction . as5055) (set-source-info! . as5054) (bignum? . as5053) (fast-equal? . as5052) (fasl-read . as5051) (fasl-write . as5050) (time-usage . as504f) (os-constant . as504e) (disasm . as504d) (make-parameter . as28e2) (socket-port . as504c) (socket-shutdown . as504b) (socket-close . as504a) (socket-send . as5049) (socket-recv! . as5048) (socket-recv . as5047) (make-server-socket . as5046) (make-client-socket . as5045) (socket-accept . as5044) (socket? . as5043) (string-upcase . as5042) (string-titlecase . as5041) (string-normalize-nfkd . as5040) (string-normalize-nfkc . as503f) (string-normalize-nfd . as503e) (string-normalize-nfc . as503d) (string-foldcase . as503c) (string-downcase . as503b) (string-ci>? . as503a) (string-ci>=? . as5039) (string-ci=? . as5038) (string-ci<? . as5037) (string-ci<=? . as5036) (char-whitespace? . as5035) (char-upper-case? . as5034) (char-title-case? . as5033) (char-numeric? . as5032) (char-lower-case? . as5031) (char-general-category . as5030) (char-upcase . as502f) (char-titlecase . as502e) (char-foldcase . as502d) (char-downcase . as502c) (char-ci>? . as502b) (char-ci>=? . as502a) (char-ci=? . as5029) (char-ci<? . as5028) (char-ci<=? . as5027) (char-alphabetic? . as5026) (make-variable-transformer . as2ee6) (identifier? . as319d) (generate-temporaries . as3189) (free-identifier=? . as318b) (syntax->datum . as31a1) (datum->syntax . as319f) (bound-identifier=? . as318d) (record-type-descriptor? . as5025) (record-predicate . as5024) (record-mutator . as5023) (record-constructor . as5022) (record-accessor . as5021) (make-record-type-descriptor . as5020) (make-record-constructor-descriptor . as501f) (record? . as501e) (record-type-uid . as501d) (record-type-sealed? . as501c) (record-type-parent . as501b) (record-type-opaque? . as501a) (record-type-name . as5019) (record-type-generative? . as5018) (record-type-field-names . as5017) (record-rtd . as5016) (record-field-mutable? . as5015) (delete-file . as5014) (file-exists? . as5013) (vector-sort! . as5012) (vector-sort . as5011) (list-sort . as5010) (symbol-hash . as500f) (string-ci-hash . as500e) (string-hash . as500d) (equal-hash . as500c) (hashtable-equivalence-function . as500b) (make-hashtable . as500a) (hashtable-hash-function . as5009) (make-eqv-hashtable . as5008) (make-eq-hashtable . as5007) (hashtable? . as5006) (hashtable-update! . as5005) (hashtable-size . as5004) (hashtable-set! . as5003) (hashtable-ref . as5002) (hashtable-mutable? . as5001) (hashtable-keys . as5000) (hashtable-entries . as4fff) (hashtable-delete! . as4ffe) (hashtable-copy . as4ffd) (hashtable-contains? . as4ffc) (hashtable-clear! . as4ffb) (call-with-output-file . as4ffa) (call-with-input-file . as4ff9) (write-char . as4ff8) (write . as4ff7) (with-output-to-file . as4ff6) (with-input-from-file . as4ff5) (read-char . as4ff4) (read . as4ff3) (peek-char . as4ff2) (open-output-file . as4ff1) (open-input-file . as4ff0) (newline . as4fef) (display . as4fee) (close-output-port . as4fed) (close-input-port . as4fec) (eof-object? . as4feb) (eof-object . as4fea) (current-error-port . as4fe9) (current-output-port . as4fe8) (current-input-port . as4fe7) (output-port? . as4fe6) (input-port? . as4fe5) (utf-8-codec . as4fe4) (utf-16-codec . as4fe3) (transcoder-error-handling-mode . as4fe2) (transcoder-eol-style . as4fe1) (transcoder-codec . as4fe0) (transcoded-port . as4fdf) (textual-port? . as4fde) (string->bytevector . as4fdd) (standard-output-port . as4fdc) (standard-input-port . as4fdb) (standard-error-port . as4fda) (set-port-position! . as4fd9) (put-u8 . as4fd8) (put-string . as4fd7) (put-datum . as4fd6) (put-char . as4fd5) (put-bytevector . as4fd4) (port? . as4fd3) (port-transcoder . as4fd2) (port-position . as4fd1) (port-has-set-port-position!? . as4fd0) (port-has-port-position? . as4fcf) (port-eof? . as4fce) (output-port-buffer-mode . as4fcd) (open-string-output-port . as4fcc) (open-string-input-port . as4fcb) (open-file-output-port . as4fca) (open-file-input/output-port . as4fc9) (open-file-input-port . as4fc8) (open-bytevector-output-port . as4fc7) (open-bytevector-input-port . as4fc6) (native-transcoder . as4fc5) (native-eol-style . as4fc4) (make-transcoder . as4fc3) (latin-1-codec . as4fc2) (make-i/o-write-error . as4fc1) (make-i/o-read-error . as4fc0) (make-i/o-port-error . as4fbf) (make-i/o-invalid-position-error . as4fbe) (make-i/o-filename-error . as4fbd) (make-i/o-file-protection-error . as4fbc) (make-i/o-file-is-read-only-error . as4fbb) (make-i/o-file-does-not-exist-error . as4fba) (make-i/o-file-already-exists-error . as4fb9) (make-i/o-error . as4fb8) (make-i/o-encoding-error . as4fb7) (make-i/o-decoding-error . as4fb6) (make-custom-textual-output-port . as4fb5) (make-custom-textual-input/output-port . as4fb4) (make-custom-textual-input-port . as4fb3) (make-custom-binary-output-port . as4fb2) (make-custom-binary-input/output-port . as4fb1) (make-custom-binary-input-port . as4fb0) (make-bytevector . as4faf) (lookahead-u8 . as4fae) (lookahead-char . as4fad) (i/o-write-error? . as4fac) (i/o-read-error? . as4fab) (i/o-port-error? . as4faa) (i/o-invalid-position-error? . as4fa9) (i/o-filename-error? . as4fa8) (i/o-file-protection-error? . as4fa7) (i/o-file-is-read-only-error? . as4fa6) (i/o-file-does-not-exist-error? . as4fa5) (i/o-file-already-exists-error? . as4fa4) (i/o-error? . as4fa3) (i/o-error-position . as4fa2) (i/o-error-port . as4fa1) (i/o-error-filename . as4fa0) (i/o-encoding-error? . as4f9f) (i/o-encoding-error-char . as4f9e) (i/o-decoding-error? . as4f9d) (get-u8 . as4f9c) (get-string-n! . as4f9b) (get-string-n . as4f9a) (get-string-all . as4f99) (get-line . as4f98) (get-datum . as4f97) (get-char . as4f96) (get-bytevector-some . as4f95) (get-bytevector-n! . as4f94) (get-bytevector-n . as4f93) (get-bytevector-all . as4f92) (flush-output-port . as4f91) (close-port . as4f90) (scheme-report-environment . as3177) (quotient . as4f8f) (null-environment . as3175) (remainder . as4f8e) (modulo . as4f8d) (inexact->exact . as4f8c) (force . as4f8b) (exact->inexact . as4f8a) (make-promise . as4f89) (exit . as4f88) (command-line . as4c1e) (string-fill! . as4f87) (string-set! . as4f86) (set-cdr! . as4f85) (set-car! . as4f84) (remove . as4f83) (remv . as4f82) (remp . as4f81) (remq . as4f80) (partition . as4f7f) (memv . as4f7e) (memq . as4f7d) (memp . as4f7c) (member . as4f7b) (exists . as4f7a) (for-all . as4f79) (fold-right . as4f78) (fold-left . as4f77) (find . as4f76) (filter . as4f75) (cons* . as4f74) (assv . as4f73) (assq . as4f72) (assp . as4f71) (assoc . as4f70) (call-with-string-output-port . as4f6f) (call-with-port . as4f6e) (call-with-bytevector-output-port . as4f6d) (bytevector->string . as4f6c) (buffer-mode? . as4f6b) (binary-port? . as4f6a) (with-exception-handler . as4f69) (raise-continuable . as4f68) (raise . as4f67) (eval . as317b) (environment . as3173) (make-enumeration . as4f66) (enum-set=? . as4f65) (enum-set-universe . as4f64) (enum-set-union . as4f63) (enum-set-subset? . as4f62) (enum-set-projection . as4f61) (enum-set-member? . as4f60) (enum-set-intersection . as4f5f) (enum-set-indexer . as4f5e) (enum-set-difference . as4f5d) (enum-set-constructor . as4f5c) (enum-set-complement . as4f5b) (enum-set->list . as4f5a) (who-condition? . as4f59) (warning? . as4f58) (violation? . as4f57) (undefined-violation? . as4f56) (syntax-violation? . as4f55) (syntax-violation-subform . as4f54) (syntax-violation-form . as4f53) (syntax-violation . as319b) (simple-conditions . as4f52) (serious-condition? . as4f51) (non-continuable-violation? . as4f50) (message-condition? . as4f4f) (make-who-condition . as4f4e) (make-warning . as4f4d) (make-violation . as4f4c) (make-undefined-violation . as4f4b) (make-syntax-violation . as4f4a) (make-serious-condition . as4f49) (make-non-continuable-violation . as4f48) (make-message-condition . as4f47) (make-lexical-violation . as4f46) (make-irritants-condition . as4f45) (make-implementation-restriction-violation . as4f44) (make-error . as4f43) (make-assertion-violation . as4f42) (lexical-violation? . as4f41) (irritants-condition? . as4f40) (implementation-restriction-violation? . as4f3f) (error? . as4f3e) (condition-who . as4f3d) (condition-predicate . as4f3c) (condition-message . as4f3b) (condition-irritants . as4f3a) (condition-accessor . as4f39) (condition . as4f38) (assertion-violation? . as4f37) (condition? . as4f36) (utf32->string . as4f35) (utf16->string . as4f34) (utf8->string . as4f33) (uint-list->bytevector . as4f32) (u8-list->bytevector . as4f31) (string->utf8 . as4f30) (string->utf32 . as4f2f) (string->utf16 . as4f2e) (sint-list->bytevector . as4f2d) (native-endianness . as4f2c) (bytevector? . as4f2b) (bytevector=? . as4f2a) (bytevector-uint-set! . as4f29) (bytevector-uint-ref . as4f28) (bytevector-u8-set! . as4f27) (bytevector-u8-ref . as4f26) (bytevector-u64-set! . as4f25) (bytevector-u64-ref . as4f24) (bytevector-u64-native-set! . as4f23) (bytevector-u64-native-ref . as4f22) (bytevector-u32-set! . as4f21) (bytevector-u32-ref . as4f20) (bytevector-u32-native-set! . as4f1f) (bytevector-u32-native-ref . as4f1e) (bytevector-u16-set! . as4f1d) (bytevector-u16-ref . as4f1c) (bytevector-u16-native-set! . as4f1b) (bytevector-u16-native-ref . as4f1a) (bytevector-sint-set! . as4f19) (bytevector-sint-ref . as4f18) (bytevector-s8-set! . as4f17) (bytevector-s8-ref . as4f16) (bytevector-s64-set! . as4f15) (bytevector-s64-ref . as4f14) (bytevector-s64-native-set! . as4f13) (bytevector-s64-native-ref . as4f12) (bytevector-s32-set! . as4f11) (bytevector-s32-ref . as4f10) (bytevector-s32-native-set! . as4f0f) (bytevector-s32-native-ref . as4f0e) (bytevector-s16-set! . as4f0d) (bytevector-s16-ref . as4f0c) (bytevector-s16-native-set! . as4f0b) (bytevector-s16-native-ref . as4f0a) (bytevector-length . as4f09) (bytevector-ieee-single-ref . as4f08) (bytevector-ieee-single-set! . as4f07) (bytevector-ieee-single-native-set! . as4f06) (bytevector-ieee-single-native-ref . as4f05) (bytevector-ieee-double-set! . as4f04) (bytevector-ieee-double-ref . as4f03) (bytevector-ieee-double-native-set! . as4f02) (bytevector-ieee-double-native-ref . as4f01) (bytevector-fill! . as4f00) (bytevector-copy! . as4eff) (bytevector-copy . as4efe) (bytevector->uint-list . as4efd) (bytevector->u8-list . as4efc) (bytevector->sint-list . as4efb) (no-nans-violation? . as4efa) (no-infinities-violation? . as4ef9) (make-no-nans-violation . as4ef8) (make-no-infinities-violation . as4ef7) (real->flonum . as4ef6) (flzero? . as4ef5) (fltruncate . as4ef4) (fltan . as4ef3) (flsqrt . as4ef2) (flsin . as4ef1) (flround . as4ef0) (flpositive? . as4eef) (flonum? . as4eee) (flodd? . as4eed) (flnumerator . as4eec) (flnegative? . as4eeb) (flnan? . as4eea) (flmod0 . as4ee9) (flmod . as4ee8) (flmin . as4ee7) (flmax . as4ee6) (fllog . as4ee5) (flinteger? . as4ee4) (flinfinite? . as4ee3) (flfloor . as4ee2) (flfinite? . as4ee1) (flexpt . as4ee0) (flexp . as4edf) (fleven? . as4ede) (fldiv0-and-mod0 . as4edd) (fldiv0 . as4edc) (fldiv-and-mod . as4edb) (fldiv . as4eda) (fldenominator . as4ed9) (flcos . as4ed8) (flceiling . as4ed7) (flatan . as4ed6) (flasin . as4ed5) (flacos . as4ed4) (flabs . as4ed3) (fl>? . as4ed2) (fl>=? . as4ed1) (fl=? . as4ed0) (fl<? . as4ecf) (fl<=? . as4ece) (fl/ . as4ecd) (fl- . as4ecc) (fl+ . as4ecb) (fl* . as4eca) (fixnum->flonum . as4ec9) (fxzero? . as4ec8) (fxxor . as4ec7) (fxrotate-bit-field . as4ec6) (fxreverse-bit-field . as4ec5) (fxpositive? . as4ec4) (fxodd? . as4ec3) (fxnot . as4ec2) (fxnegative? . as4ec1) (fxmod0 . as4ec0) (fxmod . as4ebf) (fxmin . as4ebe) (fxmax . as4ebd) (fxlength . as4ebc) (fxior . as4ebb) (fxif . as4eba) (fxfirst-bit-set . as4eb9) (fxeven? . as4eb8) (fxdiv0-and-mod0 . as4eb7) (fxdiv0 . as4eb6) (fxdiv-and-mod . as4eb5) (fxdiv . as4eb4) (fxcopy-bit-field . as4eb3) (fxcopy-bit . as4eb2) (fxbit-set? . as4eb1) (fxbit-field . as4eb0) (fxbit-count . as4eaf) (fxarithmetic-shift-right . as4eae) (fxarithmetic-shift-left . as4ead) (fxarithmetic-shift . as4eac) (fxand . as4eab) (fx>? . as4eaa) (fx>=? . as4ea9) (fx=? . as4ea8) (fx<? . as4ea7) (fx<=? . as4ea6) (fx-/carry . as4ea5) (fx- . as4ea4) (fx+/carry . as4ea3) (fx+ . as4ea2) (fx*/carry . as4ea1) (fx* . as4ea0) (greatest-fixnum . as4e9f) (least-fixnum . as4e9e) (fixnum-width . as4e9d) (fixnum? . as4e9c) (bitwise-rotate-bit-field . as4e9b) (bitwise-reverse-bit-field . as4e9a) (bitwise-length . as4e99) (bitwise-if . as4e98) (bitwise-first-bit-set . as4e97) (bitwise-copy-bit-field . as4e96) (bitwise-copy-bit . as4e95) (bitwise-bit-set? . as4e94) (bitwise-bit-field . as4e93) (bitwise-bit-count . as4e92) (bitwise-xor . as4e91) (bitwise-ior . as4e90) (bitwise-and . as4e8f) (bitwise-not . as4e8e) (bitwise-arithmetic-shift-right . as4e8d) (bitwise-arithmetic-shift-left . as4e8c) (bitwise-arithmetic-shift . as4e8b) (zero? . as4e8a) (vector? . as4e89) (vector-set! . as4e88) (vector-ref . as4e87) (vector-map . as4e86) (vector-length . as4e85) (vector-for-each . as4e84) (vector-fill! . as4e83) (vector->list . as4e82) (vector . as4e81) (values . as4e80) (truncate . as4e7f) (tan . as4e7e) (symbol? . as4e7d) (symbol=? . as4e7c) (symbol->string . as4e7b) (substring . as4e7a) (string? . as4e79) (string>? . as4e78) (string>=? . as4e77) (string=? . as4e76) (string<? . as4e75) (string<=? . as4e74) (string-ref . as4e73) (string-length . as4e72) (string-for-each . as4e71) (string-copy . as4e70) (string-append . as4e6f) (string->symbol . as4e6e) (string->number . as4e6d) (string->list . as4e6c) (string . as4e6b) (sqrt . as4e6a) (sin . as4e69) (round . as4e68) (reverse . as4e67) (real? . as4e66) (real-valued? . as4e65) (real-part . as4e64) (rationalize . as4e63) (rational? . as4e62) (rational-valued? . as4e61) (procedure? . as4e60) (positive? . as4e5f) (pair? . as4e5e) (odd? . as4e5d) (numerator . as4e5c) (number? . as4e5b) (number->string . as4e5a) (null? . as4e59) (not . as4e58) (negative? . as4e57) (nan? . as4e56) (min . as4e55) (max . as4e54) (map . as4e53) (make-vector . as4e52) (make-string . as4e51) (make-rectangular . as4e50) (make-polar . as4e4f) (magnitude . as4e4e) (log . as4e4d) (list? . as4e4c) (list-tail . as4e4b) (list-ref . as4e4a) (list->vector . as4e49) (list->string . as4e48) (list . as4e47) (length . as4e46) (lcm . as4e45) (integer? . as4e44) (integer-valued? . as4e43) (integer->char . as4e42) (infinite? . as4e41) (inexact? . as4e40) (inexact . as4e3f) (imag-part . as4e3e) (gcd . as4e3d) (for-each . as4e3c) (floor . as4e3b) (finite? . as4e3a) (expt . as4e39) (exp . as4e38) (exact? . as4e37) (exact-integer-sqrt . as4e36) (exact . as4e35) (even? . as4e34) (error . as4e33) (eqv? . as4e32) (equal? . as4e31) (eq? . as4e30) (dynamic-wind . as4e2f) (div0-and-mod0 . as4e2e) (mod0 . as4e2d) (div0 . as4e2c) (div-and-mod . as4e2b) (mod . as4e2a) (div . as4e29) (denominator . as4e28) (cos . as4e27) (cons . as4e26) (complex? . as4e25) (char? . as4e24) (char>? . as4e23) (char>=? . as4e22) (char=? . as4e21) (char<? . as4e20) (char<=? . as4e1f) (char->integer . as4e1e) (ceiling . as4e1d) (call-with-values . as4e1c) (call/cc . as4e1b) (call-with-current-continuation . as4e1a) (cddddr . as4e19) (cdddar . as4e18) (cddadr . as4e17) (cddaar . as4e16) (cdaddr . as4e15) (cdadar . as4e14) (cdaadr . as4e13) (cdaaar . as4e12) (cadddr . as4e11) (caddar . as4e10) (cadadr . as4e0f) (cadaar . as4e0e) (caaddr . as4e0d) (caadar . as4e0c) (caaadr . as4e0b) (caaaar . as4e0a) (cdddr . as4e09) (cddar . as4e08) (cdadr . as4e07) (cdaar . as4e06) (caddr . as4e05) (cadar . as4e04) (caadr . as4e03) (caaar . as4e02) (cddr . as4e01) (cdar . as4e00) (cadr . as4dff) (caar . as4dfe) (cdr . as4dfd) (car . as4dfc) (boolean? . as4dfb) (boolean=? . as4dfa) (atan . as4df9) (assertion-violation . as4df8) (assertion-error . as3195) (asin . as4df7) (apply . as4df6) (append . as4df5) (angle . as4df4) (acos . as4df3) (abs . as4df2) (/ . as4df1) (* . as4df0) (- . as4def) (+ . as4dee) (>= . as4ded) (> . as4dec) (= . as4deb) (<= . as4dea) (< . as4de9) (library . as4de8) (&no-nans . as4de7) (&no-infinities . as4de6) (&i/o-encoding . as4de5) (&i/o-decoding . as4de4) (&i/o-port . as4de3) (&i/o-file-does-not-exist . as4de2) (&i/o-file-already-exists . as4de1) (&i/o-file-is-read-only . as4de0) (&i/o-file-protection . as4ddf) (&i/o-filename . as4dde) (&i/o-invalid-position . as4ddd) (&i/o-write . as4ddc) (&i/o-read . as4ddb) (&i/o . as4dda) (&undefined . as4dd9) (&syntax . as4dd8) (&lexical . as4dd7) (&implementation-restriction . as4dd6) (&non-continuable . as4dd5) (&who . as4dd4) (&irritants . as4dd3) (&assertion . as4dd2) (&violation . as4dd1) (&error . as4dd0) (&serious . as4dcf) (&warning . as4dce) (&message . as4dcd) (&condition . as4dcc) (define-condition-type . as4dcb) (define-enumeration . as4dca) (define-record-type . as4dc9) (parent-rtd . as4dc8) (nongenerative . as4dc7) (opaque . as4dc6) (sealed . as4dc5) (protocol . as4dc4) (parent . as4dc3) (immutable . as4dc2) (mutable . as4dc1) (fields . as4dc0) (error-handling-mode . as4dbf) (file-options . as4dbe) (buffer-mode . as4dbd) (eol-style . as4dbc) (guard . as4dbb) (trace-define . as4dba) (trace-lambda . as4db9) (unsyntax-splicing . as4db8) (unsyntax . as4db7) (unquote-splicing . as4db6) (unquote . as4db5) (_ . as4db4) (else . as4db3) (=> . as4db2) (... . as4db1) (assert . as4db0) (endianness . as4daf) (delay . as4dae) (time . as4dad) (do . as4dac) (cond . as4dab) (let* . as4daa) (let*-values . as4da9) (let-values . as4da8) (identifier-syntax . as4da7) (with-syntax . as4da6) (quasisyntax . as4da5) (quasiquote . as4da4) (syntax-rules . as4da3) (include . as4da2) (define-struct . as4da1) (record-constructor-descriptor . as4da0) (record-type-descriptor . as4d9f) (case . as4d9e) (parameterize . as4d9d) (unless . as4d9c) (when . as4d9b) (or . as4d9a) (and . as4d99) (if . as4d98) (let . as4d97) (letrec* . as4d96) (letrec . as4d95) (type-descriptor . as4d94) (case-lambda . as4d93) (lambda . as4d92) (syntax . as4d91) (syntax-case . as4d90) (quote . as4d8f) (foreign-call . as4d8e) (letrec-syntax . as4d8d) (let-syntax . as4d8c) (set! . as4d8b) (import . as4d8a) (begin . as4d89) (module . as4d88) (define-syntax . as4d87) (define . as4d86)) '((as5125 core-prim . &no-nans-rcd) (as5124 core-prim . &no-nans-rtd) (as5123 core-prim . &no-infinities-rcd) (as5122 core-prim . &no-infinities-rtd) (as5121 core-prim . &i/o-encoding-rcd) (as5120 core-prim . &i/o-encoding-rtd) (as511f core-prim . &i/o-decoding-rcd) (as511e core-prim . &i/o-decoding-rtd) (as511d core-prim . &i/o-port-rcd) (as511c core-prim . &i/o-port-rtd) (as511b core-prim . &i/o-file-does-not-exist-rcd) (as511a core-prim . &i/o-file-does-not-exist-rtd) (as5119 core-prim . &i/o-file-already-exists-rcd) (as5118 core-prim . &i/o-file-already-exists-rtd) (as5117 core-prim . &i/o-file-is-read-only-rcd) (as5116 core-prim . &i/o-file-is-read-only-rtd) (as5115 core-prim . &i/o-file-protection-rcd) (as5114 core-prim . &i/o-file-protection-rtd) (as5113 core-prim . &i/o-filename-rcd) (as5112 core-prim . &i/o-filename-rtd) (as5111 core-prim . &i/o-invalid-position-rcd) (as5110 core-prim . &i/o-invalid-position-rtd) (as510f core-prim . &i/o-write-rcd) (as510e core-prim . &i/o-write-rtd) (as510d core-prim . &i/o-read-rcd) (as510c core-prim . &i/o-read-rtd) (as510b core-prim . &i/o-rcd) (as510a core-prim . &i/o-rtd) (as5109 core-prim . &undefined-rcd) (as5108 core-prim . &undefined-rtd) (as5107 core-prim . &syntax-rcd) (as5106 core-prim . &syntax-rtd) (as5105 core-prim . &lexical-rcd) (as5104 core-prim . &lexical-rtd) (as5103 core-prim . &implementation-restriction-rcd) (as5102 core-prim . &implementation-restriction-rtd) (as5101 core-prim . &non-continuable-rcd) (as5100 core-prim . &non-continuable-rtd) (as50ff core-prim . &who-rcd) (as50fe core-prim . &who-rtd) (as50fd core-prim . &irritants-rcd) (as50fc core-prim . &irritants-rtd) (as50fb core-prim . &assertion-rcd) (as50fa core-prim . &assertion-rtd) (as50f9 core-prim . &violation-rcd) (as50f8 core-prim . &violation-rtd) (as50f7 core-prim . &error-rcd) (as50f6 core-prim . &error-rtd) (as50f5 core-prim . &serious-rcd) (as50f4 core-prim . &serious-rtd) (as50f3 core-prim . &warning-rcd) (as50f2 core-prim . &warning-rtd) (as50f1 core-prim . &message-rcd) (as50f0 core-prim . &message-rtd) (as50ef core-prim . &condition-rcd) (as50ee core-prim . &condition-rtd) (as3197 core-prim . syntax-error) (as30bb core-prim . syntax-dispatch) (as50ed core-prim . pretty-print) (as50ec core-prim . eval-core) (as50eb core-prim . set-symbol-value!) (as50ea core-prim . symbol-value) (as50e9 core-prim . gensym) (as50e8 core-prim . void) (as4c24 core-prim . load) (as31a9 core-prim . interaction-environment) (as50e7 core-prim . char-ready?) (as50e6 core-prim . regexp?) (as50e5 core-prim . read-line) (as50e4 core-prim . gensym-prefix-set!) (as50e3 core-prim . ungensym) (as50e2 core-prim . alist->eq-hash-table) (as50e1 core-prim . assoc-ref) (as50e0 core-prim . print) (as50df core-prim . format) (as50de core-prim . host-os) (as2afa core-prim . library-path) (as50dd core-prim . standard-library-path) (as50dc core-prim . file-newer?) (as50db core-prim . stat-mtime) (as50da core-prim . write-to-file) (as50d9 core-prim . file->list) (as50d8 core-prim . file->string) (as50d7 core-prim . digit->integer) (as50d6 core-prim . call-with-string-input-port) (as50d5 core-prim . call-with-string-io) (as50d4 core-prim . string-split) (as50d3 core-prim . bytevector-for-each) (as50d2 core-prim . string->regexp) (as50d1 core-prim . rxmatch) (as50d0 core-prim . regexp-replace-all) (as50cf core-prim . hashtable-for-each) (as28e4 core-prim . mosh-cache-dir) (as50ce core-prim . call-process) (as50cd core-prim . local-tz-offset) (as50cc core-prim . microseconds) (as50cb core-prim . directory-list) (as50ca core-prim . set-current-directory!) (as50c9 core-prim . expand-path) (as50c8 core-prim . current-directory) (as50c7 core-prim . %spawn) (as50c6 core-prim . %waitpid) (as50c5 core-prim . simple-struct-name) (as50c4 core-prim . simple-struct-set!) (as50c3 core-prim . simple-struct-ref) (as50c2 core-prim . make-simple-struct) (as50c1 core-prim . simple-struct?) (as50c0 core-prim . pointer-ref-c-int64) (as50bf core-prim . pointer-ref-c-int32) (as50be core-prim . pointer-ref-c-int16) (as50bd core-prim . pointer-ref-c-int8) (as50bc core-prim . pointer-ref-c-uint64) (as50bb core-prim . pointer-ref-c-uint32) (as50ba core-prim . pointer-ref-c-uint16) (as50b9 core-prim . pointer-ref-c-uint8) (as50b8 core-prim . pointer-set-c-uint64!) (as50b7 core-prim . pointer-set-c-uint32!) (as50b6 core-prim . pointer-set-c-uint16!) (as50b5 core-prim . pointer-set-c-uint8!) (as50b4 core-prim . pointer-set-c-int64!) (as50b3 core-prim . pointer-set-c-int32!) (as50b2 core-prim . pointer-set-c-int16!) (as50b1 core-prim . pointer-set-c-int8!) (as50b0 core-prim . pointer-set-c-pointer!) (as50af core-prim . pointer-set-c-double!) (as50ae core-prim . pointer-set-c-float!) (as50ad core-prim . pointer-set-c-long-long!) (as50ac core-prim . pointer-set-c-long!) (as50ab core-prim . pointer-set-c-int!) (as50aa core-prim . pointer-set-c-short!) (as50a9 core-prim . pointer-set-c-char!) (as50a8 core-prim . pointer-ref-c-pointer) (as50a7 core-prim . pointer-ref-c-double) (as50a6 core-prim . pointer-ref-c-float) (as50a5 core-prim . pointer-ref-c-unsigned-long-long) (as50a4 core-prim . pointer-ref-c-signed-long-long) (as50a3 core-prim . pointer-ref-c-unsigned-long) (as50a2 core-prim . pointer-ref-c-signed-long) (as50a1 core-prim . pointer-ref-c-unsigned-int) (as50a0 core-prim . pointer-ref-c-signed-int) (as509f core-prim . pointer-ref-c-unsigned-short) (as509e core-prim . pointer-ref-c-signed-short) (as509d core-prim . pointer-ref-c-unsigned-char) (as509c core-prim . pointer-ref-c-signed-char) (as509b core-prim . pointer->integer) (as509a core-prim . integer->pointer) (as5099 core-prim . pointer?) (as5098 core-prim . shared-errno) (as5097 core-prim . %ffi-free-c-callback-trampoline) (as5096 core-prim . %ffi-make-c-callback-trampoline) (as5095 core-prim . %ffi-free) (as5094 core-prim . %ffi-malloc) (as5093 core-prim . %ffi-supported?) (as5092 core-prim . %ffi-pointer->string) (as5091 core-prim . %ffi-call) (as5090 core-prim . %ffi-lookup) (as508f core-prim . %ffi-open) (as508e core-prim . null-terminated-utf8->string) (as508d core-prim . null-terminated-bytevector->string) (as508c core-prim . %exec) (as508b core-prim . %fork) (as508a core-prim . %pipe) (as5089 core-prim . p) (as5088 core-prim . open-output-string) (as5087 core-prim . get-output-string) (as5086 core-prim . file-stat-ctime) (as5085 core-prim . file-stat-atime) (as5084 core-prim . file-stat-mtime) (as5083 core-prim . file-size-in-bytes) (as5082 core-prim . file-writable?) (as5081 core-prim . file-executable?) (as5080 core-prim . file-readable?) (as507f core-prim . file-regular?) (as507e core-prim . file-symbolic-link?) (as507d core-prim . file-directory?) (as507c core-prim . create-symbolic-link) (as507b core-prim . rename-file) (as507a core-prim . delete-directory) (as5079 core-prim . create-directory) (as5078 core-prim . create-mosh-cache-dir) (as5077 core-prim . get-environment-variables) (as5076 core-prim . current-exception-handler) (as5075 core-prim . get-environment-variable) (as5074 core-prim . join-wraps) (as5073 core-prim . id->real-label) (as5072 core-prim . same-marks?) (as5071 core-prim . same-marks*?) (as5070 core-prim . get-timeofday) (as506f core-prim . get-command-line) (as506e core-prim . sys-display) (as506d core-prim . whereis) (as506c core-prim . register) (as506b core-prim . vm-join!) (as506a core-prim . vm-set-value!) (as5069 core-prim . vm?) (as5068 core-prim . main-vm?) (as5067 core-prim . vm-eval) (as5066 core-prim . vm-self) (as5065 core-prim . vm-start!) (as5064 core-prim . make-vm) (as5063 core-prim . mutex-try-lock!) (as5062 core-prim . mutex-unlock!) (as5061 core-prim . mutex-lock!) (as5060 core-prim . mutex?) (as505f core-prim . make-mutex) (as505e core-prim . condition-variable-notify-all!) (as505d core-prim . condition-variable-notify!) (as505c core-prim . condition-variable-wait!) (as505b core-prim . make-condition-variable) (as505a core-prim . write/ss) (as5059 core-prim . mosh-executable-path) (as5058 core-prim . make-file-options) (as5057 core-prim . source-info) (as5056 core-prim . make-compiler-instruction) (as5055 core-prim . make-instruction) (as5054 core-prim . set-source-info!) (as5053 core-prim . bignum?) (as5052 core-prim . fast-equal?) (as5051 core-prim . fasl-read) (as5050 core-prim . fasl-write) (as504f core-prim . time-usage) (as504e core-prim . os-constant) (as504d core-prim . disasm) (as28e2 core-prim . make-parameter) (as504c core-prim . socket-port) (as504b core-prim . socket-shutdown) (as504a core-prim . socket-close) (as5049 core-prim . socket-send) (as5048 core-prim . socket-recv!) (as5047 core-prim . socket-recv) (as5046 core-prim . make-server-socket) (as5045 core-prim . make-client-socket) (as5044 core-prim . socket-accept) (as5043 core-prim . socket?) (as5042 core-prim . string-upcase) (as5041 core-prim . string-titlecase) (as5040 core-prim . string-normalize-nfkd) (as503f core-prim . string-normalize-nfkc) (as503e core-prim . string-normalize-nfd) (as503d core-prim . string-normalize-nfc) (as503c core-prim . string-foldcase) (as503b core-prim . string-downcase) (as503a core-prim . string-ci>?) (as5039 core-prim . string-ci>=?) (as5038 core-prim . string-ci=?) (as5037 core-prim . string-ci<?) (as5036 core-prim . string-ci<=?) (as5035 core-prim . char-whitespace?) (as5034 core-prim . char-upper-case?) (as5033 core-prim . char-title-case?) (as5032 core-prim . char-numeric?) (as5031 core-prim . char-lower-case?) (as5030 core-prim . char-general-category) (as502f core-prim . char-upcase) (as502e core-prim . char-titlecase) (as502d core-prim . char-foldcase) (as502c core-prim . char-downcase) (as502b core-prim . char-ci>?) (as502a core-prim . char-ci>=?) (as5029 core-prim . char-ci=?) (as5028 core-prim . char-ci<?) (as5027 core-prim . char-ci<=?) (as5026 core-prim . char-alphabetic?) (as2ee6 core-prim . make-variable-transformer) (as319d core-prim . identifier?) (as3189 core-prim . generate-temporaries) (as318b core-prim . free-identifier=?) (as31a1 core-prim . syntax->datum) (as319f core-prim . datum->syntax) (as318d core-prim . bound-identifier=?) (as5025 core-prim . record-type-descriptor?) (as5024 core-prim . record-predicate) (as5023 core-prim . record-mutator) (as5022 core-prim . record-constructor) (as5021 core-prim . record-accessor) (as5020 core-prim . make-record-type-descriptor) (as501f core-prim . make-record-constructor-descriptor) (as501e core-prim . record?) (as501d core-prim . record-type-uid) (as501c core-prim . record-type-sealed?) (as501b core-prim . record-type-parent) (as501a core-prim . record-type-opaque?) (as5019 core-prim . record-type-name) (as5018 core-prim . record-type-generative?) (as5017 core-prim . record-type-field-names) (as5016 core-prim . record-rtd) (as5015 core-prim . record-field-mutable?) (as5014 core-prim . delete-file) (as5013 core-prim . file-exists?) (as5012 core-prim . vector-sort!) (as5011 core-prim . vector-sort) (as5010 core-prim . list-sort) (as500f core-prim . symbol-hash) (as500e core-prim . string-ci-hash) (as500d core-prim . string-hash) (as500c core-prim . equal-hash) (as500b core-prim . hashtable-equivalence-function) (as500a core-prim . make-hashtable) (as5009 core-prim . hashtable-hash-function) (as5008 core-prim . make-eqv-hashtable) (as5007 core-prim . make-eq-hashtable) (as5006 core-prim . hashtable?) (as5005 core-prim . hashtable-update!) (as5004 core-prim . hashtable-size) (as5003 core-prim . hashtable-set!) (as5002 core-prim . hashtable-ref) (as5001 core-prim . hashtable-mutable?) (as5000 core-prim . hashtable-keys) (as4fff core-prim . hashtable-entries) (as4ffe core-prim . hashtable-delete!) (as4ffd core-prim . hashtable-copy) (as4ffc core-prim . hashtable-contains?) (as4ffb core-prim . hashtable-clear!) (as4ffa core-prim . call-with-output-file) (as4ff9 core-prim . call-with-input-file) (as4ff8 core-prim . write-char) (as4ff7 core-prim . write) (as4ff6 core-prim . with-output-to-file) (as4ff5 core-prim . with-input-from-file) (as4ff4 core-prim . read-char) (as4ff3 core-prim . read) (as4ff2 core-prim . peek-char) (as4ff1 core-prim . open-output-file) (as4ff0 core-prim . open-input-file) (as4fef core-prim . newline) (as4fee core-prim . display) (as4fed core-prim . close-output-port) (as4fec core-prim . close-input-port) (as4feb core-prim . eof-object?) (as4fea core-prim . eof-object) (as4fe9 core-prim . current-error-port) (as4fe8 core-prim . current-output-port) (as4fe7 core-prim . current-input-port) (as4fe6 core-prim . output-port?) (as4fe5 core-prim . input-port?) (as4fe4 core-prim . utf-8-codec) (as4fe3 core-prim . utf-16-codec) (as4fe2 core-prim . transcoder-error-handling-mode) (as4fe1 core-prim . transcoder-eol-style) (as4fe0 core-prim . transcoder-codec) (as4fdf core-prim . transcoded-port) (as4fde core-prim . textual-port?) (as4fdd core-prim . string->bytevector) (as4fdc core-prim . standard-output-port) (as4fdb core-prim . standard-input-port) (as4fda core-prim . standard-error-port) (as4fd9 core-prim . set-port-position!) (as4fd8 core-prim . put-u8) (as4fd7 core-prim . put-string) (as4fd6 core-prim . put-datum) (as4fd5 core-prim . put-char) (as4fd4 core-prim . put-bytevector) (as4fd3 core-prim . port?) (as4fd2 core-prim . port-transcoder) (as4fd1 core-prim . port-position) (as4fd0 core-prim . port-has-set-port-position!?) (as4fcf core-prim . port-has-port-position?) (as4fce core-prim . port-eof?) (as4fcd core-prim . output-port-buffer-mode) (as4fcc core-prim . open-string-output-port) (as4fcb core-prim . open-string-input-port) (as4fca core-prim . open-file-output-port) (as4fc9 core-prim . open-file-input/output-port) (as4fc8 core-prim . open-file-input-port) (as4fc7 core-prim . open-bytevector-output-port) (as4fc6 core-prim . open-bytevector-input-port) (as4fc5 core-prim . native-transcoder) (as4fc4 core-prim . native-eol-style) (as4fc3 core-prim . make-transcoder) (as4fc2 core-prim . latin-1-codec) (as4fc1 core-prim . make-i/o-write-error) (as4fc0 core-prim . make-i/o-read-error) (as4fbf core-prim . make-i/o-port-error) (as4fbe core-prim . make-i/o-invalid-position-error) (as4fbd core-prim . make-i/o-filename-error) (as4fbc core-prim . make-i/o-file-protection-error) (as4fbb core-prim . make-i/o-file-is-read-only-error) (as4fba core-prim . make-i/o-file-does-not-exist-error) (as4fb9 core-prim . make-i/o-file-already-exists-error) (as4fb8 core-prim . make-i/o-error) (as4fb7 core-prim . make-i/o-encoding-error) (as4fb6 core-prim . make-i/o-decoding-error) (as4fb5 core-prim . make-custom-textual-output-port) (as4fb4 core-prim . make-custom-textual-input/output-port) (as4fb3 core-prim . make-custom-textual-input-port) (as4fb2 core-prim . make-custom-binary-output-port) (as4fb1 core-prim . make-custom-binary-input/output-port) (as4fb0 core-prim . make-custom-binary-input-port) (as4faf core-prim . make-bytevector) (as4fae core-prim . lookahead-u8) (as4fad core-prim . lookahead-char) (as4fac core-prim . i/o-write-error?) (as4fab core-prim . i/o-read-error?) (as4faa core-prim . i/o-port-error?) (as4fa9 core-prim . i/o-invalid-position-error?) (as4fa8 core-prim . i/o-filename-error?) (as4fa7 core-prim . i/o-file-protection-error?) (as4fa6 core-prim . i/o-file-is-read-only-error?) (as4fa5 core-prim . i/o-file-does-not-exist-error?) (as4fa4 core-prim . i/o-file-already-exists-error?) (as4fa3 core-prim . i/o-error?) (as4fa2 core-prim . i/o-error-position) (as4fa1 core-prim . i/o-error-port) (as4fa0 core-prim . i/o-error-filename) (as4f9f core-prim . i/o-encoding-error?) (as4f9e core-prim . i/o-encoding-error-char) (as4f9d core-prim . i/o-decoding-error?) (as4f9c core-prim . get-u8) (as4f9b core-prim . get-string-n!) (as4f9a core-prim . get-string-n) (as4f99 core-prim . get-string-all) (as4f98 core-prim . get-line) (as4f97 core-prim . get-datum) (as4f96 core-prim . get-char) (as4f95 core-prim . get-bytevector-some) (as4f94 core-prim . get-bytevector-n!) (as4f93 core-prim . get-bytevector-n) (as4f92 core-prim . get-bytevector-all) (as4f91 core-prim . flush-output-port) (as4f90 core-prim . close-port) (as3177 core-prim . scheme-report-environment) (as4f8f core-prim . quotient) (as3175 core-prim . null-environment) (as4f8e core-prim . remainder) (as4f8d core-prim . modulo) (as4f8c core-prim . inexact->exact) (as4f8b core-prim . force) (as4f8a core-prim . exact->inexact) (as4f89 core-prim . make-promise) (as4f88 core-prim . exit) (as4c1e core-prim . command-line) (as4f87 core-prim . string-fill!) (as4f86 core-prim . string-set!) (as4f85 core-prim . set-cdr!) (as4f84 core-prim . set-car!) (as4f83 core-prim . remove) (as4f82 core-prim . remv) (as4f81 core-prim . remp) (as4f80 core-prim . remq) (as4f7f core-prim . partition) (as4f7e core-prim . memv) (as4f7d core-prim . memq) (as4f7c core-prim . memp) (as4f7b core-prim . member) (as4f7a core-prim . exists) (as4f79 core-prim . for-all) (as4f78 core-prim . fold-right) (as4f77 core-prim . fold-left) (as4f76 core-prim . find) (as4f75 core-prim . filter) (as4f74 core-prim . cons*) (as4f73 core-prim . assv) (as4f72 core-prim . assq) (as4f71 core-prim . assp) (as4f70 core-prim . assoc) (as4f6f core-prim . call-with-string-output-port) (as4f6e core-prim . call-with-port) (as4f6d core-prim . call-with-bytevector-output-port) (as4f6c core-prim . bytevector->string) (as4f6b core-prim . buffer-mode?) (as4f6a core-prim . binary-port?) (as4f69 core-prim . with-exception-handler) (as4f68 core-prim . raise-continuable) (as4f67 core-prim . raise) (as317b core-prim . eval) (as3173 core-prim . environment) (as4f66 core-prim . make-enumeration) (as4f65 core-prim . enum-set=?) (as4f64 core-prim . enum-set-universe) (as4f63 core-prim . enum-set-union) (as4f62 core-prim . enum-set-subset?) (as4f61 core-prim . enum-set-projection) (as4f60 core-prim . enum-set-member?) (as4f5f core-prim . enum-set-intersection) (as4f5e core-prim . enum-set-indexer) (as4f5d core-prim . enum-set-difference) (as4f5c core-prim . enum-set-constructor) (as4f5b core-prim . enum-set-complement) (as4f5a core-prim . enum-set->list) (as4f59 core-prim . who-condition?) (as4f58 core-prim . warning?) (as4f57 core-prim . violation?) (as4f56 core-prim . undefined-violation?) (as4f55 core-prim . syntax-violation?) (as4f54 core-prim . syntax-violation-subform) (as4f53 core-prim . syntax-violation-form) (as319b core-prim . syntax-violation) (as4f52 core-prim . simple-conditions) (as4f51 core-prim . serious-condition?) (as4f50 core-prim . non-continuable-violation?) (as4f4f core-prim . message-condition?) (as4f4e core-prim . make-who-condition) (as4f4d core-prim . make-warning) (as4f4c core-prim . make-violation) (as4f4b core-prim . make-undefined-violation) (as4f4a core-prim . make-syntax-violation) (as4f49 core-prim . make-serious-condition) (as4f48 core-prim . make-non-continuable-violation) (as4f47 core-prim . make-message-condition) (as4f46 core-prim . make-lexical-violation) (as4f45 core-prim . make-irritants-condition) (as4f44 core-prim . make-implementation-restriction-violation) (as4f43 core-prim . make-error) (as4f42 core-prim . make-assertion-violation) (as4f41 core-prim . lexical-violation?) (as4f40 core-prim . irritants-condition?) (as4f3f core-prim . implementation-restriction-violation?) (as4f3e core-prim . error?) (as4f3d core-prim . condition-who) (as4f3c core-prim . condition-predicate) (as4f3b core-prim . condition-message) (as4f3a core-prim . condition-irritants) (as4f39 core-prim . condition-accessor) (as4f38 core-prim . condition) (as4f37 core-prim . assertion-violation?) (as4f36 core-prim . condition?) (as4f35 core-prim . utf32->string) (as4f34 core-prim . utf16->string) (as4f33 core-prim . utf8->string) (as4f32 core-prim . uint-list->bytevector) (as4f31 core-prim . u8-list->bytevector) (as4f30 core-prim . string->utf8) (as4f2f core-prim . string->utf32) (as4f2e core-prim . string->utf16) (as4f2d core-prim . sint-list->bytevector) (as4f2c core-prim . native-endianness) (as4f2b core-prim . bytevector?) (as4f2a core-prim . bytevector=?) (as4f29 core-prim . bytevector-uint-set!) (as4f28 core-prim . bytevector-uint-ref) (as4f27 core-prim . bytevector-u8-set!) (as4f26 core-prim . bytevector-u8-ref) (as4f25 core-prim . bytevector-u64-set!) (as4f24 core-prim . bytevector-u64-ref) (as4f23 core-prim . bytevector-u64-native-set!) (as4f22 core-prim . bytevector-u64-native-ref) (as4f21 core-prim . bytevector-u32-set!) (as4f20 core-prim . bytevector-u32-ref) (as4f1f core-prim . bytevector-u32-native-set!) (as4f1e core-prim . bytevector-u32-native-ref) (as4f1d core-prim . bytevector-u16-set!) (as4f1c core-prim . bytevector-u16-ref) (as4f1b core-prim . bytevector-u16-native-set!) (as4f1a core-prim . bytevector-u16-native-ref) (as4f19 core-prim . bytevector-sint-set!) (as4f18 core-prim . bytevector-sint-ref) (as4f17 core-prim . bytevector-s8-set!) (as4f16 core-prim . bytevector-s8-ref) (as4f15 core-prim . bytevector-s64-set!) (as4f14 core-prim . bytevector-s64-ref) (as4f13 core-prim . bytevector-s64-native-set!) (as4f12 core-prim . bytevector-s64-native-ref) (as4f11 core-prim . bytevector-s32-set!) (as4f10 core-prim . bytevector-s32-ref) (as4f0f core-prim . bytevector-s32-native-set!) (as4f0e core-prim . bytevector-s32-native-ref) (as4f0d core-prim . bytevector-s16-set!) (as4f0c core-prim . bytevector-s16-ref) (as4f0b core-prim . bytevector-s16-native-set!) (as4f0a core-prim . bytevector-s16-native-ref) (as4f09 core-prim . bytevector-length) (as4f08 core-prim . bytevector-ieee-single-ref) (as4f07 core-prim . bytevector-ieee-single-set!) (as4f06 core-prim . bytevector-ieee-single-native-set!) (as4f05 core-prim . bytevector-ieee-single-native-ref) (as4f04 core-prim . bytevector-ieee-double-set!) (as4f03 core-prim . bytevector-ieee-double-ref) (as4f02 core-prim . bytevector-ieee-double-native-set!) (as4f01 core-prim . bytevector-ieee-double-native-ref) (as4f00 core-prim . bytevector-fill!) (as4eff core-prim . bytevector-copy!) (as4efe core-prim . bytevector-copy) (as4efd core-prim . bytevector->uint-list) (as4efc core-prim . bytevector->u8-list) (as4efb core-prim . bytevector->sint-list) (as4efa core-prim . no-nans-violation?) (as4ef9 core-prim . no-infinities-violation?) (as4ef8 core-prim . make-no-nans-violation) (as4ef7 core-prim . make-no-infinities-violation) (as4ef6 core-prim . real->flonum) (as4ef5 core-prim . flzero?) (as4ef4 core-prim . fltruncate) (as4ef3 core-prim . fltan) (as4ef2 core-prim . flsqrt) (as4ef1 core-prim . flsin) (as4ef0 core-prim . flround) (as4eef core-prim . flpositive?) (as4eee core-prim . flonum?) (as4eed core-prim . flodd?) (as4eec core-prim . flnumerator) (as4eeb core-prim . flnegative?) (as4eea core-prim . flnan?) (as4ee9 core-prim . flmod0) (as4ee8 core-prim . flmod) (as4ee7 core-prim . flmin) (as4ee6 core-prim . flmax) (as4ee5 core-prim . fllog) (as4ee4 core-prim . flinteger?) (as4ee3 core-prim . flinfinite?) (as4ee2 core-prim . flfloor) (as4ee1 core-prim . flfinite?) (as4ee0 core-prim . flexpt) (as4edf core-prim . flexp) (as4ede core-prim . fleven?) (as4edd core-prim . fldiv0-and-mod0) (as4edc core-prim . fldiv0) (as4edb core-prim . fldiv-and-mod) (as4eda core-prim . fldiv) (as4ed9 core-prim . fldenominator) (as4ed8 core-prim . flcos) (as4ed7 core-prim . flceiling) (as4ed6 core-prim . flatan) (as4ed5 core-prim . flasin) (as4ed4 core-prim . flacos) (as4ed3 core-prim . flabs) (as4ed2 core-prim . fl>?) (as4ed1 core-prim . fl>=?) (as4ed0 core-prim . fl=?) (as4ecf core-prim . fl<?) (as4ece core-prim . fl<=?) (as4ecd core-prim . fl/) (as4ecc core-prim . fl-) (as4ecb core-prim . fl+) (as4eca core-prim . fl*) (as4ec9 core-prim . fixnum->flonum) (as4ec8 core-prim . fxzero?) (as4ec7 core-prim . fxxor) (as4ec6 core-prim . fxrotate-bit-field) (as4ec5 core-prim . fxreverse-bit-field) (as4ec4 core-prim . fxpositive?) (as4ec3 core-prim . fxodd?) (as4ec2 core-prim . fxnot) (as4ec1 core-prim . fxnegative?) (as4ec0 core-prim . fxmod0) (as4ebf core-prim . fxmod) (as4ebe core-prim . fxmin) (as4ebd core-prim . fxmax) (as4ebc core-prim . fxlength) (as4ebb core-prim . fxior) (as4eba core-prim . fxif) (as4eb9 core-prim . fxfirst-bit-set) (as4eb8 core-prim . fxeven?) (as4eb7 core-prim . fxdiv0-and-mod0) (as4eb6 core-prim . fxdiv0) (as4eb5 core-prim . fxdiv-and-mod) (as4eb4 core-prim . fxdiv) (as4eb3 core-prim . fxcopy-bit-field) (as4eb2 core-prim . fxcopy-bit) (as4eb1 core-prim . fxbit-set?) (as4eb0 core-prim . fxbit-field) (as4eaf core-prim . fxbit-count) (as4eae core-prim . fxarithmetic-shift-right) (as4ead core-prim . fxarithmetic-shift-left) (as4eac core-prim . fxarithmetic-shift) (as4eab core-prim . fxand) (as4eaa core-prim . fx>?) (as4ea9 core-prim . fx>=?) (as4ea8 core-prim . fx=?) (as4ea7 core-prim . fx<?) (as4ea6 core-prim . fx<=?) (as4ea5 core-prim . fx-/carry) (as4ea4 core-prim . fx-) (as4ea3 core-prim . fx+/carry) (as4ea2 core-prim . fx+) (as4ea1 core-prim . fx*/carry) (as4ea0 core-prim . fx*) (as4e9f core-prim . greatest-fixnum) (as4e9e core-prim . least-fixnum) (as4e9d core-prim . fixnum-width) (as4e9c core-prim . fixnum?) (as4e9b core-prim . bitwise-rotate-bit-field) (as4e9a core-prim . bitwise-reverse-bit-field) (as4e99 core-prim . bitwise-length) (as4e98 core-prim . bitwise-if) (as4e97 core-prim . bitwise-first-bit-set) (as4e96 core-prim . bitwise-copy-bit-field) (as4e95 core-prim . bitwise-copy-bit) (as4e94 core-prim . bitwise-bit-set?) (as4e93 core-prim . bitwise-bit-field) (as4e92 core-prim . bitwise-bit-count) (as4e91 core-prim . bitwise-xor) (as4e90 core-prim . bitwise-ior) (as4e8f core-prim . bitwise-and) (as4e8e core-prim . bitwise-not) (as4e8d core-prim . bitwise-arithmetic-shift-right) (as4e8c core-prim . bitwise-arithmetic-shift-left) (as4e8b core-prim . bitwise-arithmetic-shift) (as4e8a core-prim . zero?) (as4e89 core-prim . vector?) (as4e88 core-prim . vector-set!) (as4e87 core-prim . vector-ref) (as4e86 core-prim . vector-map) (as4e85 core-prim . vector-length) (as4e84 core-prim . vector-for-each) (as4e83 core-prim . vector-fill!) (as4e82 core-prim . vector->list) (as4e81 core-prim . vector) (as4e80 core-prim . values) (as4e7f core-prim . truncate) (as4e7e core-prim . tan) (as4e7d core-prim . symbol?) (as4e7c core-prim . symbol=?) (as4e7b core-prim . symbol->string) (as4e7a core-prim . substring) (as4e79 core-prim . string?) (as4e78 core-prim . string>?) (as4e77 core-prim . string>=?) (as4e76 core-prim . string=?) (as4e75 core-prim . string<?) (as4e74 core-prim . string<=?) (as4e73 core-prim . string-ref) (as4e72 core-prim . string-length) (as4e71 core-prim . string-for-each) (as4e70 core-prim . string-copy) (as4e6f core-prim . string-append) (as4e6e core-prim . string->symbol) (as4e6d core-prim . string->number) (as4e6c core-prim . string->list) (as4e6b core-prim . string) (as4e6a core-prim . sqrt) (as4e69 core-prim . sin) (as4e68 core-prim . round) (as4e67 core-prim . reverse) (as4e66 core-prim . real?) (as4e65 core-prim . real-valued?) (as4e64 core-prim . real-part) (as4e63 core-prim . rationalize) (as4e62 core-prim . rational?) (as4e61 core-prim . rational-valued?) (as4e60 core-prim . procedure?) (as4e5f core-prim . positive?) (as4e5e core-prim . pair?) (as4e5d core-prim . odd?) (as4e5c core-prim . numerator) (as4e5b core-prim . number?) (as4e5a core-prim . number->string) (as4e59 core-prim . null?) (as4e58 core-prim . not) (as4e57 core-prim . negative?) (as4e56 core-prim . nan?) (as4e55 core-prim . min) (as4e54 core-prim . max) (as4e53 core-prim . map) (as4e52 core-prim . make-vector) (as4e51 core-prim . make-string) (as4e50 core-prim . make-rectangular) (as4e4f core-prim . make-polar) (as4e4e core-prim . magnitude) (as4e4d core-prim . log) (as4e4c core-prim . list?) (as4e4b core-prim . list-tail) (as4e4a core-prim . list-ref) (as4e49 core-prim . list->vector) (as4e48 core-prim . list->string) (as4e47 core-prim . list) (as4e46 core-prim . length) (as4e45 core-prim . lcm) (as4e44 core-prim . integer?) (as4e43 core-prim . integer-valued?) (as4e42 core-prim . integer->char) (as4e41 core-prim . infinite?) (as4e40 core-prim . inexact?) (as4e3f core-prim . inexact) (as4e3e core-prim . imag-part) (as4e3d core-prim . gcd) (as4e3c core-prim . for-each) (as4e3b core-prim . floor) (as4e3a core-prim . finite?) (as4e39 core-prim . expt) (as4e38 core-prim . exp) (as4e37 core-prim . exact?) (as4e36 core-prim . exact-integer-sqrt) (as4e35 core-prim . exact) (as4e34 core-prim . even?) (as4e33 core-prim . error) (as4e32 core-prim . eqv?) (as4e31 core-prim . equal?) (as4e30 core-prim . eq?) (as4e2f core-prim . dynamic-wind) (as4e2e core-prim . div0-and-mod0) (as4e2d core-prim . mod0) (as4e2c core-prim . div0) (as4e2b core-prim . div-and-mod) (as4e2a core-prim . mod) (as4e29 core-prim . div) (as4e28 core-prim . denominator) (as4e27 core-prim . cos) (as4e26 core-prim . cons) (as4e25 core-prim . complex?) (as4e24 core-prim . char?) (as4e23 core-prim . char>?) (as4e22 core-prim . char>=?) (as4e21 core-prim . char=?) (as4e20 core-prim . char<?) (as4e1f core-prim . char<=?) (as4e1e core-prim . char->integer) (as4e1d core-prim . ceiling) (as4e1c core-prim . call-with-values) (as4e1b core-prim . call/cc) (as4e1a core-prim . call-with-current-continuation) (as4e19 core-prim . cddddr) (as4e18 core-prim . cdddar) (as4e17 core-prim . cddadr) (as4e16 core-prim . cddaar) (as4e15 core-prim . cdaddr) (as4e14 core-prim . cdadar) (as4e13 core-prim . cdaadr) (as4e12 core-prim . cdaaar) (as4e11 core-prim . cadddr) (as4e10 core-prim . caddar) (as4e0f core-prim . cadadr) (as4e0e core-prim . cadaar) (as4e0d core-prim . caaddr) (as4e0c core-prim . caadar) (as4e0b core-prim . caaadr) (as4e0a core-prim . caaaar) (as4e09 core-prim . cdddr) (as4e08 core-prim . cddar) (as4e07 core-prim . cdadr) (as4e06 core-prim . cdaar) (as4e05 core-prim . caddr) (as4e04 core-prim . cadar) (as4e03 core-prim . caadr) (as4e02 core-prim . caaar) (as4e01 core-prim . cddr) (as4e00 core-prim . cdar) (as4dff core-prim . cadr) (as4dfe core-prim . caar) (as4dfd core-prim . cdr) (as4dfc core-prim . car) (as4dfb core-prim . boolean?) (as4dfa core-prim . boolean=?) (as4df9 core-prim . atan) (as4df8 core-prim . assertion-violation) (as3195 core-prim . assertion-error) (as4df7 core-prim . asin) (as4df6 core-prim . apply) (as4df5 core-prim . append) (as4df4 core-prim . angle) (as4df3 core-prim . acos) (as4df2 core-prim . abs) (as4df1 core-prim . /) (as4df0 core-prim . *) (as4def core-prim . -) (as4dee core-prim . +) (as4ded core-prim . >=) (as4dec core-prim . >) (as4deb core-prim . =) (as4dea core-prim . <=) (as4de9 core-prim . <) (as4de8 core-prim . library) (as4de7 $core-rtd &no-nans-rtd &no-nans-rcd) (as4de6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (as4de5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (as4de4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (as4de3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (as4de2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (as4de1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (as4de0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (as4ddf $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (as4dde $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (as4ddd $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (as4ddc $core-rtd &i/o-write-rtd &i/o-write-rcd) (as4ddb $core-rtd &i/o-read-rtd &i/o-read-rcd) (as4dda $core-rtd &i/o-rtd &i/o-rcd) (as4dd9 $core-rtd &undefined-rtd &undefined-rcd) (as4dd8 $core-rtd &syntax-rtd &syntax-rcd) (as4dd7 $core-rtd &lexical-rtd &lexical-rcd) (as4dd6 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (as4dd5 $core-rtd &non-continuable-rtd &non-continuable-rcd) (as4dd4 $core-rtd &who-rtd &who-rcd) (as4dd3 $core-rtd &irritants-rtd &irritants-rcd) (as4dd2 $core-rtd &assertion-rtd &assertion-rcd) (as4dd1 $core-rtd &violation-rtd &violation-rcd) (as4dd0 $core-rtd &error-rtd &error-rcd) (as4dcf $core-rtd &serious-rtd &serious-rcd) (as4dce $core-rtd &warning-rtd &warning-rcd) (as4dcd $core-rtd &message-rtd &message-rcd) (as4dcc $core-rtd &condition-rtd &condition-rcd) (as4dcb macro . define-condition-type) (as4dca macro . define-enumeration) (as4dc9 macro . define-record-type) (as4dc8 macro . parent-rtd) (as4dc7 macro . nongenerative) (as4dc6 macro . opaque) (as4dc5 macro . sealed) (as4dc4 macro . protocol) (as4dc3 macro . parent) (as4dc2 macro . immutable) (as4dc1 macro . mutable) (as4dc0 macro . fields) (as4dbf macro . error-handling-mode) (as4dbe macro . file-options) (as4dbd macro . buffer-mode) (as4dbc macro . eol-style) (as4dbb macro . guard) (as4dba macro . trace-define) (as4db9 macro . trace-lambda) (as4db8 macro . unsyntax-splicing) (as4db7 macro . unsyntax) (as4db6 macro . unquote-splicing) (as4db5 macro . unquote) (as4db4 macro . _) (as4db3 macro . else) (as4db2 macro . =>) (as4db1 macro . ...) (as4db0 macro . assert) (as4daf macro . endianness) (as4dae macro . delay) (as4dad macro . time) (as4dac macro . do) (as4dab macro . cond) (as4daa macro . let*) (as4da9 macro . let*-values) (as4da8 macro . let-values) (as4da7 macro . identifier-syntax) (as4da6 macro . with-syntax) (as4da5 macro . quasisyntax) (as4da4 macro . quasiquote) (as4da3 macro . syntax-rules) (as4da2 macro . include) (as4da1 macro . define-struct) (as4da0 core-macro . record-constructor-descriptor) (as4d9f core-macro . record-type-descriptor) (as4d9e macro . case) (as4d9d macro . parameterize) (as4d9c macro . unless) (as4d9b macro . when) (as4d9a core-macro . or) (as4d99 core-macro . and) (as4d98 core-macro . if) (as4d97 core-macro . let) (as4d96 core-macro . letrec*) (as4d95 core-macro . letrec) (as4d94 core-macro . type-descriptor) (as4d93 core-macro . case-lambda) (as4d92 core-macro . lambda) (as4d91 core-macro . syntax) (as4d90 core-macro . syntax-case) (as4d8f core-macro . quote) (as4d8e core-macro . foreign-call) (as4d8d letrec-syntax) (as4d8c let-syntax) (as4d8b set!) (as4d8a import) (as4d89 begin) (as4d88 module) (as4d87 define-syntax) (as4d86 define)) values values '#f '#f '#f '#f) (as2ccf@as2b1b@install-library 'as5146 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . as50ed) (eval-core . as50ec) (set-symbol-value! . as50eb) (symbol-value . as50ea) (gensym . as50e9) (void . as50e8)) '() values values '#f '#f '#f '#f) (as2ccf@as2b1b@install-library 'as5147 '(mosh) '() '() '() '() '((set-symbol-value! . as50eb) (symbol-value . as50ea) (regexp? . as50e6) (read-line . as50e5) (ungensym . as50e3) (alist->eq-hash-table . as50e2) (assoc-ref . as50e1) (print . as50e0) (format . as50df) (host-os . as50de) (library-path . as2afa) (standard-library-path . as50dd) (file-newer? . as50dc) (stat-mtime . as50db) (digit->integer . as50d7) (call-with-string-input-port . as50d6) (call-with-string-io . as50d5) (string-split . as50d4) (bytevector-for-each . as50d3) (string->regexp . as50d2) (rxmatch . as50d1) (regexp-replace-all . as50d0) (hashtable-for-each . as50cf) (set-current-directory! . as50ca) (expand-path . as50c9) (current-directory . as50c8) (p . as5089) (get-timeofday . as5070) (get-command-line . as506f) (sys-display . as506e) (whereis . as506d) (register . as506c) (vm-join! . as506b) (vm-set-value! . as506a) (vm? . as5069) (main-vm? . as5068) (vm-eval . as5067) (vm-self . as5066) (vm-start! . as5065) (make-vm . as5064) (mutex-try-lock! . as5063) (mutex-unlock! . as5062) (mutex-lock! . as5061) (mutex? . as5060) (make-mutex . as505f) (condition-variable-notify-all! . as505e) (condition-variable-notify! . as505d) (condition-variable-wait! . as505c) (make-condition-variable . as505b) (write/ss . as505a) (mosh-executable-path . as5059) (make-file-options . as5058) (source-info . as5057) (make-compiler-instruction . as5056) (make-instruction . as5055) (set-source-info! . as5054) (bignum? . as5053) (fast-equal? . as5052) (fasl-read . as5051) (fasl-write . as5050) (time-usage . as504f) (os-constant . as504e) (time . as4dad) (include . as4da2)) '() values values '#f '#f '#f '#f) (as2ccf@as2b1b@install-library 'as5148 '(system) '() '() '() '() '((gensym-prefix-set! . as50e4) (write-to-file . as50da) (file->list . as50d9) (file->string . as50d8) (mosh-cache-dir . as28e4) (call-process . as50ce) (local-tz-offset . as50cd) (microseconds . as50cc) (directory-list . as50cb) (expand-path . as50c9) (%spawn . as50c7) (%waitpid . as50c6) (simple-struct-name . as50c5) (simple-struct-set! . as50c4) (simple-struct-ref . as50c3) (make-simple-struct . as50c2) (simple-struct? . as50c1) (pointer-ref-c-int64 . as50c0) (pointer-ref-c-int32 . as50bf) (pointer-ref-c-int16 . as50be) (pointer-ref-c-int8 . as50bd) (pointer-ref-c-uint64 . as50bc) (pointer-ref-c-uint32 . as50bb) (pointer-ref-c-uint16 . as50ba) (pointer-ref-c-uint8 . as50b9) (pointer-set-c-uint64! . as50b8) (pointer-set-c-uint32! . as50b7) (pointer-set-c-uint16! . as50b6) (pointer-set-c-uint8! . as50b5) (pointer-set-c-int64! . as50b4) (pointer-set-c-int32! . as50b3) (pointer-set-c-int16! . as50b2) (pointer-set-c-int8! . as50b1) (pointer-set-c-pointer! . as50b0) (pointer-set-c-double! . as50af) (pointer-set-c-float! . as50ae) (pointer-set-c-long-long! . as50ad) (pointer-set-c-long! . as50ac) (pointer-set-c-int! . as50ab) (pointer-set-c-short! . as50aa) (pointer-set-c-char! . as50a9) (pointer-ref-c-pointer . as50a8) (pointer-ref-c-double . as50a7) (pointer-ref-c-float . as50a6) (pointer-ref-c-unsigned-long-long . as50a5) (pointer-ref-c-signed-long-long . as50a4) (pointer-ref-c-unsigned-long . as50a3) (pointer-ref-c-signed-long . as50a2) (pointer-ref-c-unsigned-int . as50a1) (pointer-ref-c-signed-int . as50a0) (pointer-ref-c-unsigned-short . as509f) (pointer-ref-c-signed-short . as509e) (pointer-ref-c-unsigned-char . as509d) (pointer-ref-c-signed-char . as509c) (pointer->integer . as509b) (integer->pointer . as509a) (pointer? . as5099) (shared-errno . as5098) (%ffi-free-c-callback-trampoline . as5097) (%ffi-make-c-callback-trampoline . as5096) (%ffi-free . as5095) (%ffi-malloc . as5094) (%ffi-supported? . as5093) (%ffi-pointer->string . as5092) (%ffi-call . as5091) (%ffi-lookup . as5090) (%ffi-open . as508f) (null-terminated-utf8->string . as508e) (null-terminated-bytevector->string . as508d) (%exec . as508c) (%fork . as508b) (%pipe . as508a) (open-output-string . as5088) (get-output-string . as5087) (file-stat-ctime . as5086) (file-stat-atime . as5085) (file-stat-mtime . as5084) (file-size-in-bytes . as5083) (file-writable? . as5082) (file-executable? . as5081) (file-readable? . as5080) (file-regular? . as507f) (file-symbolic-link? . as507e) (file-directory? . as507d) (create-symbolic-link . as507c) (rename-file . as507b) (delete-directory . as507a) (create-directory . as5079) (create-mosh-cache-dir . as5078) (get-environment-variables . as5077) (current-exception-handler . as5076) (get-environment-variable . as5075) (join-wraps . as5074) (id->real-label . as5073) (same-marks? . as5072) (same-marks*? . as5071) (disasm . as504d) (make-parameter . as28e2) (socket-port . as504c) (socket-shutdown . as504b) (socket-close . as504a) (socket-send . as5049) (socket-recv! . as5048) (socket-recv . as5047) (make-server-socket . as5046) (make-client-socket . as5045) (socket-accept . as5044) (socket? . as5043) (parameterize . as4d9d)) '() values values '#f '#f '#f '#f)))
(begin (set! as4c09@ref (unspecified)) (set! as4c0b@x* (unspecified)) (set! as4c0d@add-library-path! (unspecified)) (set! as4c0f@parse-and-add-library-path (unspecified)) (set! as4c11@for-each-with-index (unspecified)) (set! as4c13@rpad (unspecified)) (set! as4c15@condition-printer (unspecified)) (set! as4c17@record->field-alist (unspecified)) (set! as4c19@map-with-index (unspecified)) (set! as4c1b@repl (unspecified)) (set! as4c1d@trace-printer (unspecified)) (set! as4c1f@command-line (unspecified)) (set! as4c21@local-library-path (unspecified)) (set! as4c23@load/args (unspecified)) (set! as4c25@load (unspecified)) (set! as4c27@ironscheme-build (unspecified)) (set! as4c29@eval-top-level (unspecified)) (set! as4c2b@compile-system-libraries (unspecified)) (set! as4c2d@compile (unspecified)) (set! as4c2f@compile->closure (unspecified)) (set! as4c31@pre-compile-r6rs-file (unspecified)) (set! as4c33@load-r6rs-top-level (unspecified)) (set! as4c35@load-r6rs-top-level-sexp (unspecified)) (set! as4c37@prefix-inc (unspecified)) (set! as4c39@prefix-inc! (unspecified)) (set! as4c09@ref (lambda (as4c74@rtd as4c75@i as4c76@x) (let ((as4c7a@val ((record-accessor as4c74@rtd as4c75@i) as4c76@x))) (if (symbol? as4c7a@val) (ungensym as4c7a@val) as4c7a@val)))) (set! as4d6c@as4c09@ref as4c09@ref) (set! as4c0b@x* '()) (set! as4d6d@as4c0b@x* as4c0b@x*) (set! as4c0d@add-library-path! (lambda (as4c7c@path) (as2cbf@as2afb@library-path (append (as2cbf@as2afb@library-path) (list as4c7c@path))))) (set! as4d6e@as4c0d@add-library-path! as4c0d@add-library-path!) (set! as4c0f@parse-and-add-library-path (lambda (as4c7e@paths as4c7f@message) (letrec* ((as4c83@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((as4c84@t as4c7e@paths)) (if as4c84@t ((lambda (as4c86@paths) (for-each (lambda (as4c88@path) (if (file-exists? as4c88@path) (as4c0d@add-library-path! (expand-path as4c88@path)) (format (current-error-port) as4c7f@message as4c88@path))) (string-split as4c86@paths as4c83@separator))) as4c84@t) (void)))))) (set! as4d6f@as4c0f@parse-and-add-library-path as4c0f@parse-and-add-library-path) (set! as4c11@for-each-with-index (lambda (as4c8a@proc as4c8b@lst) (letrec ((as4c8e@loop (lambda (as4c90@i as4c91@lst) (if (null? as4c91@lst) (if '#f '#f (void)) (begin (as4c8a@proc as4c90@i (car as4c91@lst)) (as4c8e@loop (+ as4c90@i '1) (cdr as4c91@lst))))))) (as4c8e@loop '1 as4c8b@lst)))) (set! as4d70@as4c11@for-each-with-index as4c11@for-each-with-index) (set! as4c13@rpad (lambda (as4c94@str as4c95@pad as4c96@n) (let ((as4c9a@rest (- as4c96@n (string-length (format '"~a" as4c94@str))))) (let as4ca0@loop ((as4c9c@rest as4c9a@rest) (as4c9d@ret (format '"~a" as4c94@str))) (if (<= as4c9c@rest '0) as4c9d@ret (as4ca0@loop (- as4c9c@rest '1) (string-append as4c9d@ret as4c95@pad))))))) (set! as4d71@as4c13@rpad as4c13@rpad) (set! as4c15@condition-printer (lambda (as4ca2@e as4ca3@port) (letrec* ((as4ca7@max-condition-len (apply max (map (lambda (as4cb8@c) (string-length (symbol->string (record-type-name (record-rtd as4cb8@c))))) (simple-conditions as4ca2@e))))) (begin (display '" Condition components:\n" as4ca3@port) (as4c11@for-each-with-index (lambda (as4ca8@i as4ca9@x) (let ((as4cac@rtd (record-rtd as4ca9@x)) (as4cad@fields-alist (as4c17@record->field-alist as4ca9@x))) (begin (format as4ca3@port '" ~d. ~a" as4ca8@i (as4c13@rpad (symbol->string (record-type-name as4cac@rtd)) '" " as4ca7@max-condition-len)) (if (null? as4cad@fields-alist) (newline as4ca3@port) (void)) (let as4cb4@loop ((as4cb0@first '#t) (as4cb1@fields-alist as4cad@fields-alist)) (if (null? as4cb1@fields-alist) '() (let ((as4cb6@field (car as4cb1@fields-alist))) (begin (if (not as4cb0@first) (display (as4c13@rpad '"" '" " (+ '4 as4ca7@max-condition-len)) as4ca3@port) (void)) (display '"       " as4ca3@port) (display (car as4cb6@field) as4ca3@port) (display '": " as4ca3@port) (write (cdr as4cb6@field) as4ca3@port) (newline as4ca3@port) (as4cb4@loop '#f (cdr as4cb1@fields-alist))))))))) (simple-conditions as4ca2@e)))))) (set! as4d72@as4c15@condition-printer as4c15@condition-printer) (set! as4c17@record->field-alist (lambda (as4cba@r) (letrec* ((as4cbd@ref (lambda (as4cc8@rtd as4cc9@i as4cca@x) (let ((as4cce@val ((record-accessor as4cc8@rtd as4cc9@i) as4cca@x))) (if (symbol? as4cce@val) (ungensym as4cce@val) as4cce@val))))) (let as4cc2@loop ((as4cbe@ret '()) (as4cbf@rtd (record-rtd as4cba@r))) (if as4cbf@rtd (as4cc2@loop (append as4cbe@ret (as4c19@map-with-index (lambda (as4cc4@i as4cc5@field) (cons as4cc5@field (as4cbd@ref as4cbf@rtd as4cc4@i as4cba@r))) (vector->list (record-type-field-names as4cbf@rtd)))) (record-type-parent as4cbf@rtd)) as4cbe@ret))))) (set! as4d73@as4c17@record->field-alist as4c17@record->field-alist) (set! as4c19@map-with-index (lambda (as4cd0@proc as4cd1@lst) (let as4cda@loop ((as4cd4@i '0) (as4cd5@lst as4cd1@lst) (as4cd6@ret '())) (if (null? as4cd5@lst) (reverse as4cd6@ret) (as4cda@loop (+ as4cd4@i '1) (cdr as4cd5@lst) (cons (as4cd0@proc as4cd4@i (car as4cd5@lst)) as4cd6@ret)))))) (set! as4d74@as4c19@map-with-index as4c19@map-with-index) (set! as4c1b@repl (lambda as4cdc@x (letrec* ((as4cdf@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (as4ce2@as4ce0) (lambda () (with-exception-handler (lambda (as4ce4@e) ((call/cc (lambda (as4ce6@as4ce1) (as4ce2@as4ce0 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? as4ce4@e) (as4c15@condition-printer as4ce4@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" as4ce4@e))) (as4ce6@as4ce1 (lambda () (raise-continuable as4ce4@e)))))))))) (lambda () (let as4cec@loop ((as4ce8@line (get-line (current-input-port))) (as4ce9@accum '"")) (letrec* ((as4cef@parentheses-ok? (lambda (as4cf6@text) (let as4cfe@loop ((as4cf8@chars (string->list as4cf6@text)) (as4cf9@p0 '0) (as4cfa@p1 '0)) (if (null? as4cf8@chars) (= '0 as4cf9@p0 as4cfa@p1) (let ((as4d00@t (car as4cf8@chars))) (if (memv as4d00@t '(#\()) (as4cfe@loop (cdr as4cf8@chars) (+ as4cf9@p0 '1) as4cfa@p1) (if (memv as4d00@t '(#\))) (as4cfe@loop (cdr as4cf8@chars) (- as4cf9@p0 '1) as4cfa@p1) (if (memv as4d00@t '(#\[)) (as4cfe@loop (cdr as4cf8@chars) as4cf9@p0 (+ as4cfa@p1 '1)) (if (memv as4d00@t '(#\])) (as4cfe@loop (cdr as4cf8@chars) as4cf9@p0 (- as4cfa@p1 '1)) (as4cfe@loop (cdr as4cf8@chars) as4cf9@p0 as4cfa@p1)))))))))) (as4cf1@eval-string-print (lambda (as4cf4@text) (if (not (or (string=? '"\n" as4cf4@text) (= '0 (string-length as4cf4@text)))) (write (as4c29@eval-top-level (call-with-port (open-string-input-port as4cf4@text) read))) (void))))) (if (eof-object? as4ce8@line) (begin (as4cf1@eval-string-print as4ce9@accum) (exit)) (let ((as4cf2@current (string-append as4ce9@accum as4ce8@line))) (if (as4cef@parentheses-ok? as4cf2@current) (as4cf1@eval-string-print as4cf2@current) (as4cec@loop (get-line (current-input-port)) as4cf2@current)))))))))))) (newline) (as4cdf@rec))))) (as4cdf@rec)))) (set! as4d75@as4c1b@repl as4c1b@repl) (set! as4c1d@trace-printer (as2a05@as28e3@make-parameter write)) (set! as4d76@as4c1d@trace-printer as4c1d@trace-printer) (set! as4c1f@command-line (as2a05@as28e3@make-parameter (get-command-line))) (set! as4d77@as4c1f@command-line as4c1f@command-line) (set! as4c21@local-library-path (lambda (as4d02@filename) (as2cbf@as2afb@library-path))) (set! as4d78@as4c21@local-library-path as4c21@local-library-path) (set! as4c23@load/args (lambda (as4d04@filename . as4d06@args) (begin (apply as4c33@load-r6rs-top-level as4d04@filename 'load as4d06@args) (void)))) (set! as4d79@as4c23@load/args as4c23@load/args) (set! as4c25@load (lambda (as4d08@filename) (begin (apply as4c33@load-r6rs-top-level as4d08@filename 'load (as4c1f@command-line)) (void)))) (set! as4d7a@as4c25@load as4c25@load) (set! as4c27@ironscheme-build (lambda () (as4c25@load '"ironscheme-buildscript.ss"))) (set! as4d7b@as4c27@ironscheme-build as4c27@ironscheme-build) (set! as4c29@eval-top-level (lambda (as4d0a@x) (as4be6@as317c@eval as4d0a@x (as4bfd@as31aa@interaction-environment)))) (set! as4d7c@as4c29@eval-top-level as4c29@eval-top-level) (set! as4c2b@compile-system-libraries (lambda () (as4c29@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! as4d7d@as4c2b@compile-system-libraries as4c2b@compile-system-libraries) (set! as4c2d@compile (lambda (as4d0c@filename) (as4c33@load-r6rs-top-level as4d0c@filename 'compile))) (set! as4d7e@as4c2d@compile as4c2d@compile) (set! as4c2f@compile->closure (lambda (as4d0e@filename) (as4c33@load-r6rs-top-level as4d0e@filename 'closure))) (set! as4d7f@as4c2f@compile->closure as4c2f@compile->closure) (set! as4c31@pre-compile-r6rs-file (lambda (as4d10@filename) (as4c33@load-r6rs-top-level as4d10@filename 'compile))) (set! as4d80@as4c31@pre-compile-r6rs-file as4c31@pre-compile-r6rs-file) (set! as4c33@load-r6rs-top-level (lambda (as4d12@filename as4d13@how . as4d16@args) (begin (as2cbf@as2afb@library-path (as4c21@local-library-path as4d12@filename)) (let ((as4d18@x* (with-input-from-file as4d12@filename (lambda () (let as4d1a@f () (let ((as4d1c@x (as29f7@as28c7@read-annotated))) (if (eof-object? as4d1c@x) '() (cons as4d1c@x (as4d1a@f))))))))) (let ((as4d1e@t as4d13@how)) (if (memv as4d1e@t '(closure)) (as4bfc@as31a8@pre-compile-r6rs-top-level as4d18@x*) (if (memv as4d1e@t '(load)) (begin (as4c1f@command-line (cons as4d12@filename (car as4d16@args))) (as2a06@as28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (as2a06@as28e5@mosh-cache-dir) (gensym-prefix-set! (as4c39@prefix-inc! (string-append (as2a06@as28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (as4d20@file) ((call/cc (lambda (as4d24@as4d22) (lambda () (with-exception-handler (lambda (as4d26@c) ((call/cc (lambda (as4d28@as4d23) (as4d24@as4d22 (lambda () (if '#t '#t (as4d28@as4d23 (lambda () (raise-continuable as4d26@c)))))))))) (lambda () (delete-file (string-append (as2a06@as28e5@mosh-cache-dir) '"/" as4d20@file))))))))) (directory-list (as2a06@as28e5@mosh-cache-dir))) (void)) (let ((as4d2a@compiled (as4bfb@as31a6@compile-r6rs-top-level as4d18@x*))) (begin (if (and (as2a06@as28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (as2cc3@as2b03@serialize-all as2a00@as28d9@serialize-library as2a5c@as2a15@compile-core-expr) (void)) (as4d2a@compiled)))) (if (memv as4d1e@t '(compile)) (begin (as4bfb@as31a6@compile-r6rs-top-level as4d18@x*) (as2cc3@as2b03@serialize-all as2a00@as28d9@serialize-library as2a5c@as2a15@compile-core-expr)) (if '#f '#f (void)))))))))) (set! as4d81@as4c33@load-r6rs-top-level as4c33@load-r6rs-top-level) (set! as4c35@load-r6rs-top-level-sexp (lambda (as4d2c@import-spec as4d2d@thunk) (let ((as4d38@as4d31 as2cbf@as2afb@library-path) (as4d39@as4d33 as2a06@as28e5@mosh-cache-dir) (as4d3a@as4d35 (as4c21@local-library-path '"")) (as4d3b@as4d37 (create-mosh-cache-dir))) (let ((as4d40@swap (lambda () (begin (let ((as4d42@t (as4d38@as4d31))) (begin (as4d38@as4d31 as4d3a@as4d35) (set! as4d3a@as4d35 as4d42@t))) (let ((as4d44@t (as4d39@as4d33))) (begin (as4d39@as4d33 as4d3b@as4d37) (set! as4d3b@as4d37 as4d44@t))))))) (dynamic-wind as4d40@swap (lambda () (begin (if (as2a06@as28e5@mosh-cache-dir) (gensym-prefix-set! (as4c39@prefix-inc! (string-append (as2a06@as28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((as4d4a@as4d47 as4c1f@command-line) (as4d4b@as4d49 '())) (let ((as4d4e@swap (lambda () (let ((as4d50@t (as4d4a@as4d47))) (begin (as4d4a@as4d47 as4d4b@as4d49) (set! as4d4b@as4d49 as4d50@t)))))) (dynamic-wind as4d4e@swap (lambda () ((as4bfb@as31a6@compile-r6rs-top-level (list (cons 'import as4d2c@import-spec) (list as4d2d@thunk))))) as4d4e@swap))))) as4d40@swap))))) (set! as4d82@as4c35@load-r6rs-top-level-sexp as4c35@load-r6rs-top-level-sexp) (set! as4c37@prefix-inc (lambda (as4d52@prefix-string) (let ((as4d54@prefix (symbol->string as4d52@prefix-string))) (let ((as4d56@len (string-length as4d54@prefix))) (let as4d5e@loop ((as4d58@i (- as4d56@len '1)) (as4d59@carry? '#t) (as4d5a@accum '())) (if (< as4d58@i '0) (string->symbol (list->string (if as4d59@carry? (cons '#\a as4d5a@accum) as4d5a@accum))) (if as4d59@carry? (let ((as4d60@next-integer (+ '1 (char->integer (string-ref as4d54@prefix as4d58@i))))) (if (= as4d60@next-integer '123) (as4d5e@loop (- as4d58@i '1) '#f (cons '#\A as4d5a@accum)) (if (= as4d60@next-integer '91) (as4d5e@loop (- as4d58@i '1) '#t (cons '#\a as4d5a@accum)) (as4d5e@loop (- as4d58@i '1) '#f (cons (integer->char as4d60@next-integer) as4d5a@accum))))) (as4d5e@loop (- as4d58@i '1) '#f (cons (string-ref as4d54@prefix as4d58@i) as4d5a@accum))))))))) (set! as4d83@as4c37@prefix-inc as4c37@prefix-inc) (set! as4c39@prefix-inc! (lambda (as4d62@file) (begin (if (not (file-exists? as4d62@file)) (call-with-output-file as4d62@file (lambda (as4d64@port) (write 'd as4d64@port))) (void)) (let ((as4d66@prefix (call-with-input-file as4d62@file read))) (if (main-vm?) (let ((as4d68@next-prefix (as4c37@prefix-inc as4d66@prefix))) (begin (call-with-port (open-file-output-port as4d62@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (as4d6a@port) (write as4d68@next-prefix as4d6a@port))) as4d66@prefix)) as4d66@prefix))))) (set! as4d84@as4c39@prefix-inc! as4c39@prefix-inc!) (begin (as2cc4@as2b05@current-precompiled-library-loader as2a01@as28db@load-serialized-library) (set-symbol-value! 'load as4c25@load) (set-symbol-value! 'pre-compile-r6rs-file as4c31@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs as4c29@eval-top-level) (set-symbol-value! 'int-env-syms as4bdd@as316a@interaction-environment-symbols) (set-symbol-value! 'expanded2core as2a5b@as2a13@expanded->core) (set-symbol-value! 'trace-printer as4c1d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (as4c3a@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list as4c3a@c))))) (as4c0f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (as4c0f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (as4c0d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (as4c0d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (as4c0d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((as4c3c@prefix (lambda (as4c3e@ext as4c3f@ls) (append (map (lambda (as4c42@x) (string-append as4c3e@ext as4c42@x)) as4c3f@ls) as4c3f@ls)))) (as2cc0@as2afd@library-extensions (as4c3c@prefix '".mosh" (as2cc0@as2afd@library-extensions)))) (current-exception-handler (lambda (as4c44@c) (begin (if (condition? as4c44@c) (as4c15@condition-printer as4c44@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" as4c44@c)) as4c44@c))) (if ((call/cc (lambda (as4c48@as4c46) (lambda () (with-exception-handler (lambda (as4c4a@c) ((call/cc (lambda (as4c4c@as4c47) (as4c48@as4c46 (lambda () (if '#t '#f (as4c4c@as4c47 (lambda () (raise-continuable as4c4a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (as4c35@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (as4c1f@command-line)) (let ((as4c56@as4c4f as4c1f@command-line) (as4c57@as4c51 as2a06@as28e5@mosh-cache-dir) (as4c58@as4c53 '()) (as4c59@as4c55 (create-mosh-cache-dir))) (let ((as4c5e@swap (lambda () (begin (let ((as4c60@t (as4c56@as4c4f))) (begin (as4c56@as4c4f as4c58@as4c53) (set! as4c58@as4c53 as4c60@t))) (let ((as4c62@t (as4c57@as4c51))) (begin (as4c57@as4c51 as4c59@as4c55) (set! as4c59@as4c55 as4c62@t))))))) (dynamic-wind as4c5e@swap (lambda () (begin (if (as2a06@as28e5@mosh-cache-dir) (gensym-prefix-set! (as4c39@prefix-inc! (string-append (as2a06@as28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (as4c1b@repl))) as4c5e@swap))) (begin (as2cbf@as2afb@library-path (as4c21@local-library-path (car (as4c1f@command-line)))) (set! as4c0b@x* (with-input-from-file (car (as4c1f@command-line)) (lambda () (let as4c64@f () (let ((as4c66@x (as29f7@as28c7@read-annotated))) (if (eof-object? as4c66@x) '() (cons as4c66@x (as4c64@f)))))))) (as4c1f@command-line (cons (car (as4c1f@command-line)) (cdr (as4c1f@command-line)))) (as2a06@as28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (as2a06@as28e5@mosh-cache-dir) (gensym-prefix-set! (as4c39@prefix-inc! (string-append (as2a06@as28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (as4c68@file) ((call/cc (lambda (as4c6c@as4c6a) (lambda () (with-exception-handler (lambda (as4c6e@c) ((call/cc (lambda (as4c70@as4c6b) (as4c6c@as4c6a (lambda () (if '#t '#t (as4c70@as4c6b (lambda () (raise-continuable as4c6e@c)))))))))) (lambda () (delete-file (string-append (as2a06@as28e5@mosh-cache-dir) '"/" as4c68@file))))))))) (directory-list (as2a06@as28e5@mosh-cache-dir))) (void)) (let ((as4c72@compiled (as4bfb@as31a6@compile-r6rs-top-level as4c0b@x*))) (begin (if (and (as2a06@as28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (as2cc3@as2b03@serialize-all as2a00@as28d9@serialize-library as2a5c@as2a15@compile-core-expr) (void)) (as4c72@compiled))))))))
