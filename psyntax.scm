;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! aZ57f@library-file-path->cache-path (unspecified)) (set! aZ581@read-annotated (unspecified)) (set! aZ583@annotation-stripped (unspecified)) (set! aZ585@annotation? (unspecified)) (set! aZ587@annotation-source (unspecified)) (set! aZ589@annotation-expression (unspecified)) (set! aZ58b@scm->fasl (unspecified)) (set! aZ58d@fasl-save (unspecified)) (set! aZ58f@fasl-load (unspecified)) (set! aZ591@verbose? (unspecified)) (set! aZ593@serialize-library (unspecified)) (set! aZ595@load-serialized-library (unspecified)) (set! aZ597@make-record-printer (unspecified)) (set! aZ599@compile-core (unspecified)) (set! aZ59b@read-library-source-file (unspecified)) (set! aZ59d@make-parameter (unspecified)) (set! aZ59f@mosh-cache-dir (unspecified)) (set! aZ635@file-options-spec (unspecified)) (set! aZ57f@library-file-path->cache-path (lambda (aZ636@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aZ63c@aZ639 aZ63d@aZ63b) (let ((aZ640@extract aZ63d@aZ63b) (aZ641@p aZ63c@aZ639)) (let ((aZ645@display-hex '#f)) (begin (set! aZ645@display-hex (lambda (aZ64e@n) (if (<= '0 aZ64e@n '9) (display aZ64e@n aZ641@p) (display (integer->char (+ (char->integer '#\a) (- aZ64e@n '10))) aZ641@p)))) (begin (let aZ648@f ((aZ646@ls (string-split aZ636@x '#\/))) (if (not (null? aZ646@ls)) (begin (display '"_" aZ641@p) (for-each (lambda (aZ64a@c) (if (or (char<=? '#\a aZ64a@c '#\z) (char<=? '#\A aZ64a@c '#\Z) (char<=? '#\0 aZ64a@c '#\9) (memv aZ64a@c '(#\- #\. #\_ #\~))) (display aZ64a@c aZ641@p) (begin (display '"%" aZ641@p) (let ((aZ64c@n (char->integer aZ64a@c))) (begin (aZ645@display-hex (quotient aZ64c@n '16)) (aZ645@display-hex (remainder aZ64c@n '16))))))) (string->list (car aZ646@ls))) (aZ648@f (cdr aZ646@ls))) (void))) (aZ640@extract))))))))) (set! aZ6b0@aZ57f@library-file-path->cache-path aZ57f@library-file-path->cache-path) (set! aZ581@read-annotated read) (set! aZ6b1@aZ581@read-annotated aZ581@read-annotated) (set! aZ583@annotation-stripped (lambda (aZ650@x) (aZ589@annotation-expression aZ650@x))) (set! aZ6b2@aZ583@annotation-stripped aZ583@annotation-stripped) (set! aZ585@annotation? (lambda (aZ652@x) (source-info aZ652@x))) (set! aZ6b3@aZ585@annotation? aZ585@annotation?) (set! aZ587@annotation-source (lambda (aZ654@x) (source-info aZ654@x))) (set! aZ6b4@aZ587@annotation-source aZ587@annotation-source) (set! aZ589@annotation-expression (lambda (aZ656@x) (if (pair? aZ656@x) (cons (car aZ656@x) (cdr aZ656@x)) (if (procedure? aZ656@x) (set-source-info! aZ656@x '#f) aZ656@x)))) (set! aZ6b5@aZ589@annotation-expression aZ589@annotation-expression) (set! aZ58b@scm->fasl (lambda (aZ658@filename) (string-append (aZ59f@mosh-cache-dir) '"/" (aZ57f@library-file-path->cache-path aZ658@filename) '".mosh-fasl"))) (set! aZ6b6@aZ58b@scm->fasl aZ58b@scm->fasl) (set! aZ58d@fasl-save (lambda (aZ65a@filename aZ65b@obj) (call-with-port (open-file-output-port aZ65a@filename) (lambda (aZ65e@port) ((symbol-value 'fasl-write!) aZ65b@obj aZ65e@port))))) (set! aZ6b7@aZ58d@fasl-save aZ58d@fasl-save) (set! aZ58f@fasl-load (lambda (aZ660@filename) (call-with-port (open-file-input-port aZ660@filename) (symbol-value 'fasl-read!)))) (set! aZ6b8@aZ58f@fasl-load aZ58f@fasl-load) (set! aZ591@verbose? (symbol-value '%verbose)) (set! aZ6b9@aZ591@verbose? aZ591@verbose?) (set! aZ593@serialize-library (lambda (aZ662@filename aZ663@obj) (begin (if aZ591@verbose? (format (current-error-port) '"serialize-library ~a\n..." aZ662@filename) (void)) (let ((aZ666@expanded2core (symbol-value 'expanded2core))) (let ((aZ668@compile (symbol-value 'compile-w/o-halt))) (let ((aZ66a@code aZ663@obj)) (let ((aZ66c@pivot (cddddr (cddddr aZ66a@code)))) (let ((aZ66e@visit (aZ668@compile (aZ666@expanded2core (car aZ66c@pivot))))) (begin (set-car! aZ66c@pivot aZ66e@visit) (let ((aZ670@pivot (cdr aZ66c@pivot))) (let ((aZ672@invoke (aZ668@compile (aZ666@expanded2core (car aZ670@pivot))))) (set-car! aZ670@pivot aZ672@invoke))))))))) (let ((aZ674@fasl-file (aZ58b@scm->fasl aZ662@filename))) (begin (if (file-exists? aZ674@fasl-file) (delete-file aZ674@fasl-file) (void)) ((call/cc (lambda (aZ678@aZ676) (lambda () (with-exception-handler (lambda (aZ67a@c) ((call/cc (lambda (aZ67c@aZ677) (aZ678@aZ676 (lambda () (if '#t (begin (if aZ591@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" aZ662@filename) (void)) (if (file-exists? aZ674@fasl-file) (delete-file aZ674@fasl-file) (void)) '#f) (aZ67c@aZ677 (lambda () (raise-continuable aZ67a@c)))))))))) (lambda () (aZ58d@fasl-save aZ674@fasl-file aZ663@obj)))))))))))) (set! aZ6ba@aZ593@serialize-library aZ593@serialize-library) (set! aZ595@load-serialized-library (lambda (aZ67e@filename aZ67f@obj) (and (aZ59f@mosh-cache-dir) (let ((aZ682@fasl-file (aZ58b@scm->fasl aZ67e@filename))) (if (and (file-exists? aZ682@fasl-file) ((symbol-value 'file-newer?) aZ682@fasl-file aZ67e@filename)) (let ((aZ684@expanded2core (symbol-value 'expanded2core))) (let ((aZ686@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((aZ688@code (aZ58f@fasl-load aZ682@fasl-file))) (let ((aZ68a@pivot (cddddr (cddddr aZ688@code)))) (let ((aZ68c@visit (car aZ68a@pivot))) (let ((aZ68e@visit-proc (lambda () (aZ686@eval-compiled-core aZ68c@visit)))) (begin (set-car! aZ68a@pivot aZ68e@visit-proc) (let ((aZ690@pivot (cdr aZ68a@pivot))) (let ((aZ692@invoke (car aZ690@pivot))) (begin (set-car! aZ690@pivot (lambda () (aZ686@eval-compiled-core aZ692@invoke))) (apply aZ67f@obj aZ688@code))))))))))) '#f))))) (set! aZ6bb@aZ595@load-serialized-library aZ595@load-serialized-library) (set! aZ597@make-record-printer (lambda (aZ694@name aZ695@printer) (lambda aZ698@x (begin (display '"record printer") (for-each display aZ698@x))))) (set! aZ6bc@aZ597@make-record-printer aZ597@make-record-printer) (set! aZ599@compile-core (lambda aZ69a@x (apply error 'comile-core '"not implementated" aZ69a@x))) (set! aZ6bd@aZ599@compile-core aZ599@compile-core) (set! aZ59b@read-library-source-file (lambda (aZ69c@file-name) (with-input-from-file aZ69c@file-name aZ581@read-annotated))) (set! aZ6be@aZ59b@read-library-source-file aZ59b@read-library-source-file) (set! aZ59d@make-parameter (lambda aZ6ac (let ((aZ6ad (length aZ6ac))) (if (= aZ6ad '1) (apply (lambda (aZ69e@x) (aZ59d@make-parameter aZ69e@x (lambda (aZ6a0@x) aZ6a0@x))) aZ6ac) (if (= aZ6ad '2) (apply (lambda (aZ6a2@x aZ6a3@fender) (let ((aZ6a6@x (aZ6a3@fender aZ6a2@x))) (lambda aZ6aa (let ((aZ6ab (length aZ6aa))) (if (= aZ6ab '0) (apply (lambda () aZ6a6@x) aZ6aa) (if (= aZ6ab '1) (apply (lambda (aZ6a8@v) (set! aZ6a6@x (aZ6a3@fender aZ6a8@v))) aZ6aa) (error 'apply '"invalid arg count"))))))) aZ6ac) (error 'apply '"invalid arg count")))))) (set! aZ6bf@aZ59d@make-parameter aZ59d@make-parameter) (set! aZ59f@mosh-cache-dir (aZ59d@make-parameter '#f)) (set! aZ6c0@aZ59f@mosh-cache-dir aZ59f@mosh-cache-dir) (set! aZ635@file-options-spec (lambda (aZ6ae@x) aZ6ae@x)) (set! aZ6c1@aZ635@file-options-spec aZ635@file-options-spec) (void))
(begin (set! aZ6c7@current-primitive-locations (unspecified)) (set! aZ6c9@mutable? (unspecified)) (set! aZ6cb@rewriter (unspecified)) (set! aZ6cd@expanded->core (unspecified)) (set! aZ6cf@compile-core-expr (unspecified)) (set! aZ6d1@pretty-print (unspecified)) (set! aZ6d3@compile-core-expr-to-port (unspecified)) (set! aZ6c7@current-primitive-locations (aZ6bf@aZ59d@make-parameter (lambda (aZ6d4@x) '#f) (lambda (aZ6d6@p) aZ6d6@p))) (set! aZ712@aZ6c7@current-primitive-locations aZ6c7@current-primitive-locations) (set! aZ6c9@mutable? (lambda (aZ6d8@x) (or (pair? aZ6d8@x) (vector? aZ6d8@x) (hashtable? aZ6d8@x)))) (set! aZ713@aZ6c9@mutable? aZ6c9@mutable?) (set! aZ6cb@rewriter (lambda (aZ6da@quote-hack?) (let ((aZ6dd@f '#f)) (begin (set! aZ6dd@f (lambda (aZ6de@x) (if (pair? aZ6de@x) (let ((aZ6e0@t (car aZ6de@x))) (if (memv aZ6e0@t '(quote)) (if (and aZ6da@quote-hack? (aZ6c9@mutable? (cadr aZ6de@x))) (let ((aZ6e2@g (gensym))) (begin (set-symbol-value! aZ6e2@g (cadr aZ6de@x)) aZ6e2@g)) aZ6de@x) (if (memv aZ6e0@t '(case-lambda)) (cons 'case-lambda (map (lambda (aZ6e4@x) (cons (car aZ6e4@x) (map aZ6dd@f (cdr aZ6e4@x)))) (cdr aZ6de@x))) (if (memv aZ6e0@t '(lambda)) (cons* 'lambda (cadr aZ6de@x) (map aZ6dd@f (cddr aZ6de@x))) (if (memv aZ6e0@t '(letrec)) (let ((aZ6e6@bindings (cadr aZ6de@x)) (aZ6e7@body* (cddr aZ6de@x))) (let ((aZ6ea@lhs* (map car aZ6e6@bindings)) (aZ6eb@rhs* (map cadr aZ6e6@bindings))) (cons* 'letrec (map list aZ6ea@lhs* (map aZ6dd@f aZ6eb@rhs*)) (map aZ6dd@f aZ6e7@body*)))) (if (memv aZ6e0@t '(letrec*)) (let ((aZ6ee@bindings (cadr aZ6de@x)) (aZ6ef@body* (cddr aZ6de@x))) (let ((aZ6f2@lhs* (map car aZ6ee@bindings)) (aZ6f3@rhs* (map cadr aZ6ee@bindings))) (cons* 'letrec* (map list aZ6f2@lhs* (map aZ6dd@f aZ6f3@rhs*)) (map aZ6dd@f aZ6ef@body*)))) (if (memv aZ6e0@t '(library-letrec*)) (let ((aZ6f6@name (cadr aZ6de@x)) (aZ6f7@x (cdr aZ6de@x))) (let ((aZ6fa@bindings (cadr aZ6f7@x)) (aZ6fb@body* (cddr aZ6f7@x))) (let ((aZ6fe@lhs* (map car aZ6fa@bindings)) (aZ6ff@lhs** (map cadr aZ6fa@bindings)) (aZ700@rhs* (map caddr aZ6fa@bindings))) (cons* 'library-letrec* aZ6f6@name (map list aZ6fe@lhs* aZ6ff@lhs** (map aZ6dd@f aZ700@rhs*)) (map aZ6dd@f aZ6fb@body*))))) (if (memv aZ6e0@t '(begin)) (cons 'begin (map aZ6dd@f (cdr aZ6de@x))) (if (memv aZ6e0@t '(set!)) (list 'set! (cadr aZ6de@x) (aZ6dd@f (caddr aZ6de@x))) (if (memv aZ6e0@t '(primitive)) (let ((aZ704@op (cadr aZ6de@x))) (let ((aZ706@t ((aZ6c7@current-primitive-locations) aZ704@op))) (if aZ706@t ((lambda (aZ708@loc) aZ708@loc) aZ706@t) aZ704@op))) (if (memv aZ6e0@t '(define)) aZ6de@x (if (list? aZ6de@x) (map aZ6dd@f aZ6de@x) (error 'rewrite '"invalid form ~s ~s" aZ6de@x (list? aZ6de@x)))))))))))))) aZ6de@x))) aZ6dd@f)))) (set! aZ714@aZ6cb@rewriter aZ6cb@rewriter) (set! aZ6cd@expanded->core (lambda (aZ70a@x) ((aZ6cb@rewriter '#f) aZ70a@x))) (set! aZ715@aZ6cd@expanded->core aZ6cd@expanded->core) (set! aZ6cf@compile-core-expr (lambda (aZ70c@x) ((aZ6cb@rewriter '#f) aZ70c@x))) (set! aZ716@aZ6cf@compile-core-expr aZ6cf@compile-core-expr) (set! aZ6d1@pretty-print write) (set! aZ717@aZ6d1@pretty-print aZ6d1@pretty-print) (set! aZ6d3@compile-core-expr-to-port (lambda (aZ70e@x aZ70f@p) (aZ6d1@pretty-print ((aZ6cb@rewriter '#f) aZ70e@x) aZ70f@p))) (set! aZ718@aZ6d3@compile-core-expr-to-port aZ6d3@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! aZ767@make-collection (unspecified)) (set! aZ769@current-library-collection (unspecified)) (set! aZ76b@rp (unspecified)) (set! aZ775@library? (unspecified)) (set! aZ777@library-id (unspecified)) (set! aZ779@set-library-id! (unspecified)) (set! aZ77b@library-name (unspecified)) (set! aZ77d@set-library-name! (unspecified)) (set! aZ77f@library-version (unspecified)) (set! aZ781@set-library-version! (unspecified)) (set! aZ783@library-imp* (unspecified)) (set! aZ785@set-library-imp*! (unspecified)) (set! aZ787@library-vis* (unspecified)) (set! aZ789@set-library-vis*! (unspecified)) (set! aZ78b@library-inv* (unspecified)) (set! aZ78d@set-library-inv*! (unspecified)) (set! aZ78f@library-subst (unspecified)) (set! aZ791@set-library-subst! (unspecified)) (set! aZ793@library-env (unspecified)) (set! aZ795@set-library-env! (unspecified)) (set! aZ797@library-visit-state (unspecified)) (set! aZ799@set-library-visit-state! (unspecified)) (set! aZ79b@library-invoke-state (unspecified)) (set! aZ79d@set-library-invoke-state! (unspecified)) (set! aZ79f@library-visit-code (unspecified)) (set! aZ7a1@set-library-visit-code! (unspecified)) (set! aZ7a3@library-invoke-code (unspecified)) (set! aZ7a5@set-library-invoke-code! (unspecified)) (set! aZ7a7@library-visible? (unspecified)) (set! aZ7a9@set-library-visible?! (unspecified)) (set! aZ7ab@library-source-file-name (unspecified)) (set! aZ7ad@set-library-source-file-name! (unspecified)) (set! aZ7af@dummy (unspecified)) (set! aZ7b1@find-dependencies (unspecified)) (set! aZ7b3@find-library-by (unspecified)) (set! aZ7b5@library-path (unspecified)) (set! aZ7b7@library-extensions (unspecified)) (set! aZ7b9@library-name->file-name (unspecified)) (set! aZ7bb@file-locator (unspecified)) (set! aZ7bd@serialize-all (unspecified)) (set! aZ7bf@current-precompiled-library-loader (unspecified)) (set! aZ7c1@try-load-from-file (unspecified)) (set! aZ7c3@library-loader (unspecified)) (set! aZ7c5@current-library-expander (unspecified)) (set! aZ7c7@external-pending-libraries (unspecified)) (set! aZ7c9@find-external-library (unspecified)) (set! aZ7cb@find-library-by-name (unspecified)) (set! aZ7cd@library-exists? (unspecified)) (set! aZ7cf@find-library-by-spec/die (unspecified)) (set! aZ7d1@label->binding-table (unspecified)) (set! aZ7d3@install-library-record (unspecified)) (set! aZ7d5@install-library (unspecified)) (set! aZ7d7@imported-label->binding (unspecified)) (set! aZ7d9@invoke-library (unspecified)) (set! aZ7db@visit-library (unspecified)) (set! aZ7dd@invoke-library-by-spec (unspecified)) (set! aZ7df@installed-libraries (unspecified)) (set! aZ7e1@library-spec (unspecified)) (set! aZ767@make-collection (lambda () (let ((aZ7e2@set '())) (let ((aZ7e5@set-cons '#f)) (begin (set! aZ7e5@set-cons (lambda (aZ7ea@x aZ7eb@ls) (if (memq aZ7ea@x aZ7eb@ls) aZ7eb@ls (cons aZ7ea@x aZ7eb@ls)))) (lambda aZ7e8 (let ((aZ7e9 (length aZ7e8))) (if (= aZ7e9 '0) (apply (lambda () aZ7e2@set) aZ7e8) (if (= aZ7e9 '1) (apply (lambda (aZ7e6@x) (set! aZ7e2@set (aZ7e5@set-cons aZ7e6@x aZ7e2@set))) aZ7e8) (error 'apply '"invalid arg count")))))))))) (set! aZ956@aZ767@make-collection aZ767@make-collection) (set! aZ769@current-library-collection (aZ6bf@aZ59d@make-parameter (aZ767@make-collection) (lambda (aZ7ee@x) (begin (if (not (procedure? aZ7ee@x)) (assertion-violation 'current-library-collection '"not a procedure" aZ7ee@x) (void)) aZ7ee@x)))) (set! aZ957@aZ769@current-library-collection aZ769@current-library-collection) (set! aZ76b@rp (aZ6bc@aZ597@make-record-printer 'library (lambda (aZ7f0@x aZ7f1@p aZ7f2@wr) (begin (if (not (aZ775@library? aZ7f0@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (aZ77f@library-version aZ7f0@x)) (aZ77b@library-name aZ7f0@x) (append (aZ77b@library-name aZ7f0@x) (list (aZ77f@library-version aZ7f0@x))))) aZ7f1@p))))) (set! aZ958@aZ76b@rp aZ76b@rp) (set! aZ775@library? (lambda (aZ7f6@x) (and (simple-struct? aZ7f6@x) (eq? (simple-struct-name aZ7f6@x) 'library)))) (set! aZ959@aZ775@library? aZ775@library?) (set! aZ777@library-id (lambda (aZ7f8@x) (simple-struct-ref aZ7f8@x '0))) (set! aZ95a@aZ777@library-id aZ777@library-id) (set! aZ779@set-library-id! (lambda (aZ7fa@x aZ7fb@val) (simple-struct-set! aZ7fa@x '0 aZ7fb@val))) (set! aZ95b@aZ779@set-library-id! aZ779@set-library-id!) (set! aZ77b@library-name (lambda (aZ7fe@x) (simple-struct-ref aZ7fe@x '1))) (set! aZ95c@aZ77b@library-name aZ77b@library-name) (set! aZ77d@set-library-name! (lambda (aZ800@x aZ801@val) (simple-struct-set! aZ800@x '1 aZ801@val))) (set! aZ95d@aZ77d@set-library-name! aZ77d@set-library-name!) (set! aZ77f@library-version (lambda (aZ804@x) (simple-struct-ref aZ804@x '2))) (set! aZ95e@aZ77f@library-version aZ77f@library-version) (set! aZ781@set-library-version! (lambda (aZ806@x aZ807@val) (simple-struct-set! aZ806@x '2 aZ807@val))) (set! aZ95f@aZ781@set-library-version! aZ781@set-library-version!) (set! aZ783@library-imp* (lambda (aZ80a@x) (simple-struct-ref aZ80a@x '3))) (set! aZ960@aZ783@library-imp* aZ783@library-imp*) (set! aZ785@set-library-imp*! (lambda (aZ80c@x aZ80d@val) (simple-struct-set! aZ80c@x '3 aZ80d@val))) (set! aZ961@aZ785@set-library-imp*! aZ785@set-library-imp*!) (set! aZ787@library-vis* (lambda (aZ810@x) (simple-struct-ref aZ810@x '4))) (set! aZ962@aZ787@library-vis* aZ787@library-vis*) (set! aZ789@set-library-vis*! (lambda (aZ812@x aZ813@val) (simple-struct-set! aZ812@x '4 aZ813@val))) (set! aZ963@aZ789@set-library-vis*! aZ789@set-library-vis*!) (set! aZ78b@library-inv* (lambda (aZ816@x) (simple-struct-ref aZ816@x '5))) (set! aZ964@aZ78b@library-inv* aZ78b@library-inv*) (set! aZ78d@set-library-inv*! (lambda (aZ818@x aZ819@val) (simple-struct-set! aZ818@x '5 aZ819@val))) (set! aZ965@aZ78d@set-library-inv*! aZ78d@set-library-inv*!) (set! aZ78f@library-subst (lambda (aZ81c@x) (simple-struct-ref aZ81c@x '6))) (set! aZ966@aZ78f@library-subst aZ78f@library-subst) (set! aZ791@set-library-subst! (lambda (aZ81e@x aZ81f@val) (simple-struct-set! aZ81e@x '6 aZ81f@val))) (set! aZ967@aZ791@set-library-subst! aZ791@set-library-subst!) (set! aZ793@library-env (lambda (aZ822@x) (simple-struct-ref aZ822@x '7))) (set! aZ968@aZ793@library-env aZ793@library-env) (set! aZ795@set-library-env! (lambda (aZ824@x aZ825@val) (simple-struct-set! aZ824@x '7 aZ825@val))) (set! aZ969@aZ795@set-library-env! aZ795@set-library-env!) (set! aZ797@library-visit-state (lambda (aZ828@x) (simple-struct-ref aZ828@x '8))) (set! aZ96a@aZ797@library-visit-state aZ797@library-visit-state) (set! aZ799@set-library-visit-state! (lambda (aZ82a@x aZ82b@val) (simple-struct-set! aZ82a@x '8 aZ82b@val))) (set! aZ96b@aZ799@set-library-visit-state! aZ799@set-library-visit-state!) (set! aZ79b@library-invoke-state (lambda (aZ82e@x) (simple-struct-ref aZ82e@x '9))) (set! aZ96c@aZ79b@library-invoke-state aZ79b@library-invoke-state) (set! aZ79d@set-library-invoke-state! (lambda (aZ830@x aZ831@val) (simple-struct-set! aZ830@x '9 aZ831@val))) (set! aZ96d@aZ79d@set-library-invoke-state! aZ79d@set-library-invoke-state!) (set! aZ79f@library-visit-code (lambda (aZ834@x) (simple-struct-ref aZ834@x '10))) (set! aZ96e@aZ79f@library-visit-code aZ79f@library-visit-code) (set! aZ7a1@set-library-visit-code! (lambda (aZ836@x aZ837@val) (simple-struct-set! aZ836@x '10 aZ837@val))) (set! aZ96f@aZ7a1@set-library-visit-code! aZ7a1@set-library-visit-code!) (set! aZ7a3@library-invoke-code (lambda (aZ83a@x) (simple-struct-ref aZ83a@x '11))) (set! aZ970@aZ7a3@library-invoke-code aZ7a3@library-invoke-code) (set! aZ7a5@set-library-invoke-code! (lambda (aZ83c@x aZ83d@val) (simple-struct-set! aZ83c@x '11 aZ83d@val))) (set! aZ971@aZ7a5@set-library-invoke-code! aZ7a5@set-library-invoke-code!) (set! aZ7a7@library-visible? (lambda (aZ840@x) (simple-struct-ref aZ840@x '12))) (set! aZ972@aZ7a7@library-visible? aZ7a7@library-visible?) (set! aZ7a9@set-library-visible?! (lambda (aZ842@x aZ843@val) (simple-struct-set! aZ842@x '12 aZ843@val))) (set! aZ973@aZ7a9@set-library-visible?! aZ7a9@set-library-visible?!) (set! aZ7ab@library-source-file-name (lambda (aZ846@x) (simple-struct-ref aZ846@x '13))) (set! aZ974@aZ7ab@library-source-file-name aZ7ab@library-source-file-name) (set! aZ7ad@set-library-source-file-name! (lambda (aZ848@x aZ849@val) (simple-struct-set! aZ848@x '13 aZ849@val))) (set! aZ975@aZ7ad@set-library-source-file-name! aZ7ad@set-library-source-file-name!) (set! aZ7af@dummy '3) (set! aZ976@aZ7af@dummy aZ7af@dummy) (set! aZ7b1@find-dependencies (lambda (aZ84c@ls) (if (null? aZ84c@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! aZ977@aZ7b1@find-dependencies aZ7b1@find-dependencies) (set! aZ7b3@find-library-by (lambda (aZ84e@pred) (let aZ852@f ((aZ850@ls ((aZ769@current-library-collection)))) (if (null? aZ850@ls) '#f (if (aZ84e@pred (car aZ850@ls)) (car aZ850@ls) (aZ852@f (cdr aZ850@ls))))))) (set! aZ978@aZ7b3@find-library-by aZ7b3@find-library-by) (set! aZ7b5@library-path (aZ6bf@aZ59d@make-parameter '(".") (lambda (aZ854@x) (if (and (list? aZ854@x) (for-all string? aZ854@x)) (map (lambda (aZ856@x) aZ856@x) aZ854@x) (assertion-violation 'library-path '"not a list of strings" aZ854@x))))) (set! aZ979@aZ7b5@library-path aZ7b5@library-path) (set! aZ7b7@library-extensions (aZ6bf@aZ59d@make-parameter '(".sls" ".ss" ".scm") (lambda (aZ858@x) (if (and (list? aZ858@x) (for-all string? aZ858@x)) (map (lambda (aZ85a@x) aZ85a@x) aZ858@x) (assertion-violation 'library-extensions '"not a list of strings" aZ858@x))))) (set! aZ97a@aZ7b7@library-extensions aZ7b7@library-extensions) (set! aZ7b9@library-name->file-name (lambda (aZ85c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aZ862@aZ85f aZ863@aZ861) (let ((aZ866@extract aZ863@aZ861) (aZ867@p aZ862@aZ85f)) (let ((aZ86b@display-hex '#f)) (begin (set! aZ86b@display-hex (lambda (aZ874@n) (if (<= '0 aZ874@n '9) (display aZ874@n aZ867@p) (display (integer->char (+ (char->integer '#\a) (- aZ874@n '10))) aZ867@p)))) (begin (let aZ86e@f ((aZ86c@ls aZ85c@x)) (if (not (null? aZ86c@ls)) (begin (display '"/" aZ867@p) (for-each (lambda (aZ870@c) (if (or (char<=? '#\a aZ870@c '#\z) (char<=? '#\A aZ870@c '#\Z) (char<=? '#\0 aZ870@c '#\9) (memv aZ870@c '(#\- #\. #\_ #\~))) (display aZ870@c aZ867@p) (begin (display '"%" aZ867@p) (let ((aZ872@n (char->integer aZ870@c))) (begin (aZ86b@display-hex (quotient aZ872@n '16)) (aZ86b@display-hex (remainder aZ872@n '16))))))) (string->list (symbol->string (car aZ86c@ls)))) (aZ86e@f (cdr aZ86c@ls))) (void))) (aZ866@extract))))))))) (set! aZ97b@aZ7b9@library-name->file-name aZ7b9@library-name->file-name) (set! aZ7bb@file-locator (aZ6bf@aZ59d@make-parameter (lambda (aZ876@x) (let ((aZ878@str (aZ7b9@library-name->file-name aZ876@x))) (let aZ880@f ((aZ87a@ls (aZ7b5@library-path)) (aZ87b@exts (aZ7b7@library-extensions)) (aZ87c@failed-list '())) (if (null? aZ87a@ls) (let ((aZ88a@aZ885 '#f) (aZ88c@aZ887 '#f) (aZ88e@aZ886 '#f) (aZ891@aZ884 '#f) (aZ893@make-library-resolution-condition '#f) (aZ895@aZ882 '#f) (aZ897@aZ883 '#f) (aZ899@library-resolution-condition? '#f) (aZ89b@condition-library '#f) (aZ89d@condition-files '#f)) (begin (set! aZ88a@aZ885 (make-record-type-descriptor '&library-resolution aZ2b91@aZ28d8@&condition-rtd 'aZ888 '#f '#f '#((immutable library) (immutable files)))) (set! aZ88c@aZ887 '#f) (set! aZ88e@aZ886 (make-record-constructor-descriptor aZ88a@aZ885 aZ2b92@aZ28da@&condition-rcd aZ88c@aZ887)) (set! aZ891@aZ884 (record-predicate aZ88a@aZ885)) (set! aZ893@make-library-resolution-condition (record-constructor aZ88e@aZ886)) (set! aZ895@aZ882 (record-accessor aZ88a@aZ885 '0)) (set! aZ897@aZ883 (record-accessor aZ88a@aZ885 '1)) (set! aZ899@library-resolution-condition? (condition-predicate aZ88a@aZ885)) (set! aZ89b@condition-library (condition-accessor aZ88a@aZ885 aZ895@aZ882)) (set! aZ89d@condition-files (condition-accessor aZ88a@aZ885 aZ897@aZ883)) (raise (condition (aZ2bb1@aZ2972@make-error) (aZ2bd3@aZ29ce@make-who-condition 'expander) (aZ2b97@aZ292f@make-message-condition '"cannot locate library in library-path") (aZ893@make-library-resolution-condition aZ876@x (reverse aZ87c@failed-list)))))) (if (null? aZ87b@exts) (aZ880@f (cdr aZ87a@ls) (aZ7b7@library-extensions) aZ87c@failed-list) (let ((aZ89e@name (string-append (car aZ87a@ls) aZ878@str (car aZ87b@exts)))) (if (file-exists? aZ89e@name) aZ89e@name (aZ880@f aZ87a@ls (cdr aZ87b@exts) (cons aZ89e@name aZ87c@failed-list))))))))) (lambda (aZ8a0@f) (if (procedure? aZ8a0@f) aZ8a0@f (assertion-violation 'file-locator '"not a procedure" aZ8a0@f))))) (set! aZ97c@aZ7bb@file-locator aZ7bb@file-locator) (set! aZ7bd@serialize-all (lambda (aZ8a2@serialize aZ8a3@compile) (let ((aZ8a7@library-desc '#f)) (begin (set! aZ8a7@library-desc (lambda (aZ8aa@x) (list (aZ777@library-id aZ8aa@x) (aZ77b@library-name aZ8aa@x)))) (for-each (lambda (aZ8a8@x) (if (aZ7ab@library-source-file-name aZ8a8@x) (aZ8a2@serialize (aZ7ab@library-source-file-name aZ8a8@x) (list (aZ777@library-id aZ8a8@x) (aZ77b@library-name aZ8a8@x) (aZ77f@library-version aZ8a8@x) (map aZ8a7@library-desc (aZ783@library-imp* aZ8a8@x)) (map aZ8a7@library-desc (aZ787@library-vis* aZ8a8@x)) (map aZ8a7@library-desc (aZ78b@library-inv* aZ8a8@x)) (aZ78f@library-subst aZ8a8@x) (aZ793@library-env aZ8a8@x) (aZ8a3@compile (aZ79f@library-visit-code aZ8a8@x)) (aZ8a3@compile (aZ7a3@library-invoke-code aZ8a8@x)) (aZ7a7@library-visible? aZ8a8@x))) (void))) ((aZ769@current-library-collection))))))) (set! aZ97d@aZ7bd@serialize-all aZ7bd@serialize-all) (set! aZ7bf@current-precompiled-library-loader (aZ6bf@aZ59d@make-parameter (lambda (aZ8ac@filename aZ8ad@sk) '#f))) (set! aZ97e@aZ7bf@current-precompiled-library-loader aZ7bf@current-precompiled-library-loader) (set! aZ7c1@try-load-from-file (lambda (aZ8b0@filename) ((aZ7bf@current-precompiled-library-loader) aZ8b0@filename (lambda aZ8d6 (let ((aZ8d7 (length aZ8d6))) (if (= aZ8d7 '11) (apply (lambda (aZ8b2@id aZ8b3@name aZ8b4@ver aZ8b5@imp* aZ8b6@vis* aZ8b7@inv* aZ8b8@exp-subst aZ8b9@exp-env aZ8ba@visit-proc aZ8bb@invoke-proc aZ8bc@visible?) (let aZ8ca@f ((aZ8c8@deps (append aZ8b5@imp* aZ8b6@vis* aZ8b7@inv*))) (if (null? aZ8c8@deps) (begin (aZ7d5@install-library aZ8b2@id aZ8b3@name aZ8b4@ver aZ8b5@imp* aZ8b6@vis* aZ8b7@inv* aZ8b8@exp-subst aZ8b9@exp-env aZ8ba@visit-proc aZ8bb@invoke-proc '#f '#f aZ8bc@visible? '#f) '#t) (let ((aZ8cc@d (car aZ8c8@deps))) (let ((aZ8ce@label (car aZ8cc@d)) (aZ8cf@dname (cadr aZ8cc@d))) (let ((aZ8d2@l (aZ7cb@find-library-by-name aZ8cf@dname))) (if (and (aZ775@library? aZ8d2@l) (eq? aZ8ce@label (aZ777@library-id aZ8d2@l))) (aZ8ca@f (cdr aZ8c8@deps)) (begin (if aZ6b9@aZ591@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" aZ8b3@name aZ8cf@dname aZ8b0@filename aZ8d2@l aZ8ce@label (aZ777@library-id aZ8d2@l)) (void)) '#f)))))))) aZ8d6) (if (>= aZ8d7 '0) (apply (lambda aZ8d4@others '#f) aZ8d6) (error 'apply '"invalid arg count")))))))) (set! aZ97f@aZ7c1@try-load-from-file aZ7c1@try-load-from-file) (set! aZ7c3@library-loader (aZ6bf@aZ59d@make-parameter (lambda (aZ8d8@x) (let ((aZ8da@file-name ((aZ7bb@file-locator) aZ8d8@x))) (if (not aZ8da@file-name) (assertion-violation '#f '"cannot file library" aZ8d8@x) (or (aZ7c1@try-load-from-file aZ8da@file-name) ((aZ7c5@current-library-expander) (aZ6be@aZ59b@read-library-source-file aZ8da@file-name) aZ8da@file-name (lambda (aZ8dc@name) (if (not (fast-equal? aZ8dc@name aZ8d8@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (aZ8e2@aZ8df aZ8e3@aZ8e1) (let ((aZ8e6@e aZ8e3@aZ8e1) (aZ8e7@p aZ8e2@aZ8df)) (begin (display '"expected to find library " aZ8e7@p) (write aZ8d8@x aZ8e7@p) (display '" in file " aZ8e7@p) (display aZ8da@file-name aZ8e7@p) (display '", found " aZ8e7@p) (write aZ8dc@name aZ8e7@p) (display '" instead" aZ8e7@p) (aZ8e6@e)))))) (void)))))))) (lambda (aZ8ea@f) (if (procedure? aZ8ea@f) aZ8ea@f (assertion-violation 'library-locator '"not a procedure" aZ8ea@f))))) (set! aZ980@aZ7c3@library-loader aZ7c3@library-loader) (set! aZ7c5@current-library-expander (aZ6bf@aZ59d@make-parameter (lambda (aZ8ec@x) (assertion-violation 'library-expander '"not initialized")) (lambda (aZ8ee@f) (if (procedure? aZ8ee@f) aZ8ee@f (assertion-violation 'library-expander '"not a procedure" aZ8ee@f))))) (set! aZ981@aZ7c5@current-library-expander aZ7c5@current-library-expander) (set! aZ7c7@external-pending-libraries (aZ6bf@aZ59d@make-parameter '())) (set! aZ982@aZ7c7@external-pending-libraries aZ7c7@external-pending-libraries) (set! aZ7c9@find-external-library (lambda (aZ8f0@name) (begin (if (member aZ8f0@name (aZ7c7@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" aZ8f0@name) (void)) (let ((aZ8f6@aZ8f3 aZ7c7@external-pending-libraries) (aZ8f7@aZ8f5 (cons aZ8f0@name (aZ7c7@external-pending-libraries)))) (let ((aZ8fa@swap (lambda () (let ((aZ8fc@t (aZ8f6@aZ8f3))) (begin (aZ8f6@aZ8f3 aZ8f7@aZ8f5) (set! aZ8f7@aZ8f5 aZ8fc@t)))))) (dynamic-wind aZ8fa@swap (lambda () (begin ((aZ7c3@library-loader) aZ8f0@name) (or (aZ7b3@find-library-by (lambda (aZ8fe@x) (fast-equal? (aZ77b@library-name aZ8fe@x) aZ8f0@name))) (assertion-violation '#f '"handling external library did not yield the correct library" aZ8f0@name)))) aZ8fa@swap)))))) (set! aZ983@aZ7c9@find-external-library aZ7c9@find-external-library) (set! aZ7cb@find-library-by-name (lambda (aZ900@name) (or (aZ7b3@find-library-by (lambda (aZ902@x) (fast-equal? (aZ77b@library-name aZ902@x) aZ900@name))) (aZ7c9@find-external-library aZ900@name)))) (set! aZ984@aZ7cb@find-library-by-name aZ7cb@find-library-by-name) (set! aZ7cd@library-exists? (lambda (aZ904@name) (and (aZ7b3@find-library-by (lambda (aZ906@x) (fast-equal? (aZ77b@library-name aZ906@x) aZ904@name))) '#t))) (set! aZ985@aZ7cd@library-exists? aZ7cd@library-exists?) (set! aZ7cf@find-library-by-spec/die (lambda (aZ908@spec) (let ((aZ90a@id (car aZ908@spec))) (or (aZ7b3@find-library-by (lambda (aZ90c@x) (eq? aZ90a@id (aZ777@library-id aZ90c@x)))) (assertion-violation '#f '"cannot find library with required spec" aZ908@spec))))) (set! aZ986@aZ7cf@find-library-by-spec/die aZ7cf@find-library-by-spec/die) (set! aZ7d1@label->binding-table (make-eq-hashtable)) (set! aZ987@aZ7d1@label->binding-table aZ7d1@label->binding-table) (set! aZ7d3@install-library-record (lambda (aZ90e@lib) (begin (let ((aZ910@exp-env (aZ793@library-env aZ90e@lib))) (for-each (lambda (aZ912@x) (let ((aZ914@label (car aZ912@x)) (aZ915@binding (cdr aZ912@x))) (let ((aZ918@binding (let ((aZ91a@t (car aZ915@binding))) (if (memv aZ91a@t '(global)) (cons 'global (cons aZ90e@lib (cdr aZ915@binding))) (if (memv aZ91a@t '(global-macro)) (cons 'global-macro (cons aZ90e@lib (cdr aZ915@binding))) (if (memv aZ91a@t '(global-macro!)) (cons 'global-macro! (cons aZ90e@lib (cdr aZ915@binding))) aZ915@binding)))))) (begin (if (hashtable-ref aZ7d1@label->binding-table aZ914@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" aZ914@label (hashtable-ref aZ7d1@label->binding-table aZ914@label '#f) aZ918@binding) (exit)) (void)) (hashtable-set! aZ7d1@label->binding-table aZ914@label aZ918@binding))))) aZ910@exp-env)) ((aZ769@current-library-collection) aZ90e@lib)))) (set! aZ988@aZ7d3@install-library-record aZ7d3@install-library-record) (set! aZ7d5@install-library (lambda (aZ91c@id aZ91d@name aZ91e@ver aZ91f@imp* aZ920@vis* aZ921@inv* aZ922@exp-subst aZ923@exp-env aZ924@visit-proc aZ925@invoke-proc aZ926@visit-code aZ927@invoke-code aZ928@visible? aZ929@source-file-name) (let ((aZ938@imp-lib* (map aZ7cf@find-library-by-spec/die aZ91f@imp*)) (aZ939@vis-lib* (map aZ7cf@find-library-by-spec/die aZ920@vis*)) (aZ93a@inv-lib* (map aZ7cf@find-library-by-spec/die aZ921@inv*))) (begin (if (not (and (symbol? aZ91c@id) (list? aZ91d@name) (list? aZ91e@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" aZ91c@id aZ91d@name aZ91e@ver) (void)) (if (aZ7cd@library-exists? aZ91d@name) (assertion-violation 'install-library '"library is already installed" aZ91d@name) (void)) (let ((aZ93e@lib (make-simple-struct 'library '15 (list aZ91c@id aZ91d@name aZ91e@ver aZ938@imp-lib* aZ939@vis-lib* aZ93a@inv-lib* aZ922@exp-subst aZ923@exp-env aZ924@visit-proc aZ925@invoke-proc aZ926@visit-code aZ927@invoke-code aZ928@visible? aZ929@source-file-name)))) (aZ7d3@install-library-record aZ93e@lib)))))) (set! aZ989@aZ7d5@install-library aZ7d5@install-library) (set! aZ7d7@imported-label->binding (lambda (aZ940@lab) (hashtable-ref aZ7d1@label->binding-table aZ940@lab '#f))) (set! aZ98a@aZ7d7@imported-label->binding aZ7d7@imported-label->binding) (set! aZ7d9@invoke-library (lambda (aZ942@lib) (let ((aZ944@invoke (aZ79b@library-invoke-state aZ942@lib))) (if (procedure? aZ944@invoke) (begin (aZ79d@set-library-invoke-state! aZ942@lib (lambda () (assertion-violation 'invoke '"circularity detected" aZ942@lib))) (for-each aZ7d9@invoke-library (aZ78b@library-inv* aZ942@lib)) (aZ79d@set-library-invoke-state! aZ942@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" aZ942@lib))) (aZ944@invoke) (aZ79d@set-library-invoke-state! aZ942@lib '#t)) (void))))) (set! aZ98b@aZ7d9@invoke-library aZ7d9@invoke-library) (set! aZ7db@visit-library (lambda (aZ946@lib) (let ((aZ948@visit (aZ797@library-visit-state aZ946@lib))) (if (procedure? aZ948@visit) (begin (aZ799@set-library-visit-state! aZ946@lib (lambda () (assertion-violation 'visit '"circularity detected" aZ946@lib))) (for-each aZ7d9@invoke-library (aZ787@library-vis* aZ946@lib)) (aZ799@set-library-visit-state! aZ946@lib (lambda () (assertion-violation 'invoke '"first visit did not return" aZ946@lib))) (aZ948@visit) (aZ799@set-library-visit-state! aZ946@lib '#t)) (void))))) (set! aZ98c@aZ7db@visit-library aZ7db@visit-library) (set! aZ7dd@invoke-library-by-spec (lambda (aZ94a@spec) (aZ7d9@invoke-library (aZ7cf@find-library-by-spec/die aZ94a@spec)))) (set! aZ98d@aZ7dd@invoke-library-by-spec aZ7dd@invoke-library-by-spec) (set! aZ7df@installed-libraries (lambda aZ952 (let ((aZ953 (length aZ952))) (if (= aZ953 '1) (apply (lambda (aZ94c@all?) (let aZ950@f ((aZ94e@ls ((aZ769@current-library-collection)))) (if (null? aZ94e@ls) '() (if (or aZ94c@all? (aZ7a7@library-visible? (car aZ94e@ls))) (cons (car aZ94e@ls) (aZ950@f (cdr aZ94e@ls))) (aZ950@f (cdr aZ94e@ls)))))) aZ952) (if (= aZ953 '0) (apply (lambda () (aZ7df@installed-libraries '#f)) aZ952) (error 'apply '"invalid arg count")))))) (set! aZ98e@aZ7df@installed-libraries aZ7df@installed-libraries) (set! aZ7e1@library-spec (lambda (aZ954@x) (begin (if (not (aZ775@library? aZ954@x)) (assertion-violation 'library-spec '"not a library" aZ954@x) (void)) (list (aZ777@library-id aZ954@x) (aZ77b@library-name aZ954@x) (aZ77f@library-version aZ954@x))))) (set! aZ98f@aZ7e1@library-spec aZ7e1@library-spec) (void))
(begin (set! aZ993@build-global-define (unspecified)) (set! aZa04@build-lambda (unspecified)) (set! aZa06@build-case-lambda (unspecified)) (set! aZa34@build-sequence (unspecified)) (set! aZa36@build-void (unspecified)) (set! aZa38@build-letrec (unspecified)) (set! aZa3a@build-let (unspecified)) (set! aZa3c@build-named-let (unspecified)) (set! aZa3e@build-letrec* (unspecified)) (set! aZa40@build-library-letrec* (unspecified)) (set! aZa42@build-receive (unspecified)) (set! aZ993@build-global-define (lambda (aZa43@x) (aZa36@build-void))) (set! aZad7@aZ993@build-global-define aZ993@build-global-define) (set! aZa04@build-lambda (lambda (aZa45@ae aZa46@vars aZa47@exp) (list 'lambda aZa46@vars aZa47@exp))) (set! aZad8@aZa04@build-lambda aZa04@build-lambda) (set! aZa06@build-case-lambda (lambda (aZa4b@ae aZa4c@vars* aZa4d@exp*) (let ((aZa52@build-error '#f) (aZa54@build-pred '#f) (aZa56@build-apply '#f) (aZa58@expand-case-lambda '#f)) (begin (set! aZa52@build-error (lambda (aZa89@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! aZa54@build-pred (lambda (aZa71@ae aZa72@n aZa73@vars) (call-with-values (lambda () (let aZa7f@f ((aZa7b@vars aZa73@vars) (aZa7c@count '0)) (if (pair? aZa7b@vars) (aZa7f@f (cdr aZa7b@vars) (+ aZa7c@count '1)) (if (null? aZa7b@vars) (values aZa7c@count '=) (values aZa7c@count '>=))))) (lambda (aZa81@aZa78 aZa82@aZa7a) (let ((aZa85@pred aZa82@aZa7a) (aZa86@count aZa81@aZa78)) (list (list 'primitive aZa85@pred) aZa72@n (list 'quote aZa86@count))))))) (set! aZa56@build-apply (lambda (aZa69@ae aZa6a@g aZa6b@vars aZa6c@exp) (list '(primitive apply) (aZa04@build-lambda aZa69@ae aZa6b@vars aZa6c@exp) aZa6a@g))) (set! aZa58@expand-case-lambda (lambda (aZa59@ae aZa5a@vars aZa5b@exp*) (let ((aZa5f@g (gensym)) (aZa60@n (gensym))) (list 'lambda aZa5f@g (aZa3a@build-let aZa59@ae (list aZa60@n) (list (list '(primitive length) aZa5f@g)) (let aZa67@f ((aZa63@vars* aZa4c@vars*) (aZa64@exp* aZa5b@exp*)) (if (null? aZa63@vars*) (aZa52@build-error aZa59@ae) (list 'if (aZa54@build-pred aZa59@ae aZa60@n (car aZa63@vars*)) (aZa56@build-apply aZa59@ae aZa5f@g (car aZa63@vars*) (car aZa64@exp*)) (aZa67@f (cdr aZa63@vars*) (cdr aZa64@exp*)))))))))) (if (= (length aZa4d@exp*) '1) (aZa04@build-lambda aZa4b@ae (car aZa4c@vars*) (car aZa4d@exp*)) (aZa58@expand-case-lambda aZa4b@ae aZa4c@vars* aZa4d@exp*)))))) (set! aZad9@aZa06@build-case-lambda aZa06@build-case-lambda) (set! aZa34@build-sequence (lambda (aZa8b@ae aZa8c@exps) (let aZa91@loop ((aZa8f@exps aZa8c@exps)) (if (null? (cdr aZa8f@exps)) (car aZa8f@exps) (if (equal? (car aZa8f@exps) (aZa36@build-void)) (aZa91@loop (cdr aZa8f@exps)) (cons 'begin aZa8f@exps)))))) (set! aZada@aZa34@build-sequence aZa34@build-sequence) (set! aZa36@build-void (lambda () '((primitive void)))) (set! aZadb@aZa36@build-void aZa36@build-void) (set! aZa38@build-letrec (lambda (aZa93@ae aZa94@vars aZa95@val-exps aZa96@body-exp) (if (null? aZa94@vars) aZa96@body-exp (list 'letrec (map list aZa94@vars aZa95@val-exps) aZa96@body-exp)))) (set! aZadc@aZa38@build-letrec aZa38@build-letrec) (set! aZa3a@build-let (lambda (aZa9b@ae aZa9c@vars aZa9d@val-exps aZa9e@body-exp) (if (null? aZa9c@vars) aZa9e@body-exp (list 'let (map list aZa9c@vars aZa9d@val-exps) aZa9e@body-exp)))) (set! aZadd@aZa3a@build-let aZa3a@build-let) (set! aZa3c@build-named-let (lambda (aZaa3@ae aZaa4@name aZaa5@vars aZaa6@val-exps aZaa7@body-exp) (list 'let aZaa4@name (map list aZaa5@vars aZaa6@val-exps) aZaa7@body-exp))) (set! aZade@aZa3c@build-named-let aZa3c@build-named-let) (set! aZa3e@build-letrec* (lambda (aZaad@ae aZaae@vars aZaaf@val-exps aZab0@body-exp) (if (null? aZaae@vars) aZab0@body-exp (aZa3a@build-let aZaad@ae aZaae@vars (map (lambda (aZab5@x) (list 'quote '#f)) aZaae@vars) (aZa34@build-sequence aZaad@ae (append (map (lambda (aZab7@lhs aZab8@rhs) (list 'set! aZab7@lhs aZab8@rhs)) aZaae@vars aZaaf@val-exps) (list aZab0@body-exp))))))) (set! aZadf@aZa3e@build-letrec* aZa3e@build-letrec*) (set! aZa40@build-library-letrec* (lambda (aZabb@ae aZabc@name aZabd@vars aZabe@locs aZabf@val-exps aZac0@body-exp) (cons 'begin (append (map (lambda (aZac7@var) (cons 'set! (cons aZac7@var '((unspecified))))) aZabd@vars) (append (apply append (map (lambda (aZac9@var aZaca@loc aZacb@val-exp) (list (list 'set! aZac9@var aZacb@val-exp) (list 'set! aZaca@loc aZac9@var))) aZabd@vars aZabe@locs aZabf@val-exps)) (list aZac0@body-exp)))))) (set! aZae0@aZa40@build-library-letrec* aZa40@build-library-letrec*) (set! aZa42@build-receive (lambda (aZacf@ae aZad0@vars aZad1@producer aZad2@body*) (begin (display '"************** in ") (cons 'receive (cons aZad0@vars (cons aZad1@producer aZad2@body*)))))) (set! aZae1@aZa42@build-receive aZa42@build-receive) (void))
(begin (set! aZaf0@file-options-macro (unspecified)) (set! aZaf2@set-cons (unspecified)) (set! aZaf4@set-union (unspecified)) (set! aZaf9@top-mark* (unspecified)) (set! aZafb@top-marked? (unspecified)) (set! aZafd@gen-lexical (unspecified)) (set! aZaff@gen-global (unspecified)) (set! aZb01@gen-label (unspecified)) (set! aZb03@gen-top-level-label (unspecified)) (set! aZb05@gen-define-label+loc (unspecified)) (set! aZb07@gen-define-label (unspecified)) (set! aZb11@rib? (unspecified)) (set! aZb13@rib-sym* (unspecified)) (set! aZb15@set-rib-sym*! (unspecified)) (set! aZb17@rib-mark** (unspecified)) (set! aZb19@set-rib-mark**! (unspecified)) (set! aZb1b@rib-label* (unspecified)) (set! aZb1d@set-rib-label*! (unspecified)) (set! aZb1f@rib-sealed/freq (unspecified)) (set! aZb21@set-rib-sealed/freq! (unspecified)) (set! aZb23@rib-cache (unspecified)) (set! aZb25@set-rib-cache! (unspecified)) (set! aZb27@dummy (unspecified)) (set! aZb29@make-empty-rib (unspecified)) (set! aZb2b@extend-rib! (unspecified)) (set! aZb2d@extend-rib/nc! (unspecified)) (set! aZb2f@make-rib-map (unspecified)) (set! aZb31@seal-rib! (unspecified)) (set! aZb33@unseal-rib! (unspecified)) (set! aZb35@make-full-rib (unspecified)) (set! aZb37@rp (unspecified)) (set! aZb41@stx? (unspecified)) (set! aZb43@stx-expr (unspecified)) (set! aZb45@set-stx-expr! (unspecified)) (set! aZb47@stx-mark* (unspecified)) (set! aZb49@set-stx-mark*! (unspecified)) (set! aZb4b@stx-subst* (unspecified)) (set! aZb4d@set-stx-subst*! (unspecified)) (set! aZb4f@stx-ae* (unspecified)) (set! aZb51@set-stx-ae*! (unspecified)) (set! aZb53@dummy (unspecified)) (set! aZb55@datum->stx (unspecified)) (set! aZb57@gen-mark (unspecified)) (set! aZb59@anti-mark (unspecified)) (set! aZb5b@anti-mark? (unspecified)) (set! aZb5d@mkstx (unspecified)) (set! aZb5f@add-mark (unspecified)) (set! aZb61@add-subst (unspecified)) (set! aZb63@syntax-kind? (unspecified)) (set! aZb65@syntax-vector->list (unspecified)) (set! aZb67@syntax-pair? (unspecified)) (set! aZb69@syntax-vector? (unspecified)) (set! aZb6b@syntax-null? (unspecified)) (set! aZb6d@syntax-list? (unspecified)) (set! aZb6f@syntax-car (unspecified)) (set! aZb71@syntax-cdr (unspecified)) (set! aZb73@syntax->list (unspecified)) (set! aZb75@id? (unspecified)) (set! aZb77@id->sym (unspecified)) (set! aZb79@bound-id=? (unspecified)) (set! aZb7b@free-id=? (unspecified)) (set! aZb7d@valid-bound-ids? (unspecified)) (set! aZb7f@distinct-bound-ids? (unspecified)) (set! aZb81@bound-id-member? (unspecified)) (set! aZb83@self-evaluating? (unspecified)) (set! aZb85@strip-annotations (unspecified)) (set! aZb87@strip (unspecified)) (set! aZb89@stx->datum (unspecified)) (set! aZb8b@id->label (unspecified)) (set! aZb8d@label->binding (unspecified)) (set! aZb8f@make-binding (unspecified)) (set! aZb91@binding-type (unspecified)) (set! aZb93@binding-value (unspecified)) (set! aZb95@raise-unbound-error (unspecified)) (set! aZb97@syntax-type (unspecified)) (set! aZba5@sanitize-binding (unspecified)) (set! aZba7@make-variable-transformer (unspecified)) (set! aZba9@variable-transformer? (unspecified)) (set! aZbab@variable-transformer-procedure (unspecified)) (set! aZbad@make-eval-transformer (unspecified)) (set! aZcfe@parse-define (unspecified)) (set! aZd00@parse-define-syntax (unspecified)) (set! aZd02@scheme-stx-hashtable (unspecified)) (set! aZd04@scheme-stx (unspecified)) (set! aZd06@lexical-var (unspecified)) (set! aZd08@lexical-mutable? (unspecified)) (set! aZd0a@set-lexical-mutable! (unspecified)) (set! aZd0c@add-lexical (unspecified)) (set! aZd0e@add-lexicals (unspecified)) (set! aZd10@letrec-helper (unspecified)) (set! aZd12@let-transformer (unspecified)) (set! aZd14@letrec-transformer (unspecified)) (set! aZd16@letrec*-transformer (unspecified)) (set! aZd18@fluid-let-syntax-transformer (unspecified)) (set! aZd1a@type-descriptor-transformer (unspecified)) (set! aZd1c@record-type-descriptor-transformer (unspecified)) (set! aZd1e@record-constructor-descriptor-transformer (unspecified)) (set! aZd20@when-macro (unspecified)) (set! aZd22@unless-macro (unspecified)) (set! aZd24@if-transformer (unspecified)) (set! aZd26@and-transformer (unspecified)) (set! aZd28@or-transformer (unspecified)) (set! aZd2a@case-macro (unspecified)) (set! aZd2c@quote-transformer (unspecified)) (set! aZd2e@case-lambda-transformer (unspecified)) (set! aZd30@lambda-transformer (unspecified)) (set! aZd32@bless (unspecified)) (set! aZd34@with-syntax-macro (unspecified)) (set! aZd36@invalid-fmls-error (unspecified)) (set! aZd38@let-macro (unspecified)) (set! aZd3a@let-values-macro (unspecified)) (set! aZd3c@let*-values-macro (unspecified)) (set! aZd3e@trace-lambda-macro (unspecified)) (set! aZd40@trace-define-macro (unspecified)) (set! aZd42@trace-define-syntax-macro (unspecified)) (set! aZd44@trace-let/rec-syntax (unspecified)) (set! aZd46@trace-let-syntax-macro (unspecified)) (set! aZd48@trace-letrec-syntax-macro (unspecified)) (set! aZd4a@guard-macro (unspecified)) (set! aZd4c@define-enumeration-macro (unspecified)) (set! aZd4e@time-macro (unspecified)) (set! aZd50@delay-macro (unspecified)) (set! aZd52@assert-macro (unspecified)) (set! aZd54@endianness-macro (unspecified)) (set! aZd56@identifier-syntax-macro (unspecified)) (set! aZd58@do-macro (unspecified)) (set! aZd5a@let*-macro (unspecified)) (set! aZd5c@or-macro (unspecified)) (set! aZd5e@and-macro (unspecified)) (set! aZd60@cond-macro (unspecified)) (set! aZd62@do-include (unspecified)) (set! aZd64@include-macro (unspecified)) (set! aZd66@include-into-macro (unspecified)) (set! aZd68@syntax-rules-macro (unspecified)) (set! aZd6a@quasiquote-macro (unspecified)) (set! aZd6c@quasisyntax-macro (unspecified)) (set! aZd6e@define-struct-macro (unspecified)) (set! aZd70@define-record-type-macro (unspecified)) (set! aZd72@define-condition-type-macro (unspecified)) (set! aZd74@incorrect-usage-macro (unspecified)) (set! aZd76@parameterize-macro (unspecified)) (set! aZd78@foreign-call-transformer (unspecified)) (set! aZd7a@convert-pattern (unspecified)) (set! aZd7c@syntax-dispatch (unspecified)) (set! aZd7e@ellipsis? (unspecified)) (set! aZd80@underscore? (unspecified)) (set! aZd82@verify-literals (unspecified)) (set! aZd84@syntax-case-transformer (unspecified)) (set! aZd86@ellipsis-map (unspecified)) (set! aZd88@syntax-transformer (unspecified)) (set! aZd8a@core-macro-transformer (unspecified)) (set! aZd8c@symbol-macro (unspecified)) (set! aZd8e@macro-transformer (unspecified)) (set! aZd90@local-macro-transformer (unspecified)) (set! aZd92@do-macro-call (unspecified)) (set! aZd94@chi-macro (unspecified)) (set! aZd96@chi-local-macro (unspecified)) (set! aZd98@chi-global-macro (unspecified)) (set! aZd9a@chi-expr* (unspecified)) (set! aZd9c@chi-application (unspecified)) (set! aZd9e@chi-expr (unspecified)) (set! aZda0@chi-set! (unspecified)) (set! aZda2@verify-formals (unspecified)) (set! aZda4@chi-lambda-clause (unspecified)) (set! aZda6@chi-lambda-clause* (unspecified)) (set! aZda8@chi-defun (unspecified)) (set! aZdaa@chi-rhs (unspecified)) (set! aZdac@expand-interaction-rhs*/init* (unspecified)) (set! aZdae@chi-rhs* (unspecified)) (set! aZdb0@find-bound=? (unspecified)) (set! aZdb2@find-dups (unspecified)) (set! aZdb4@chi-internal (unspecified)) (set! aZdb6@parse-module (unspecified)) (set! aZdc0@module-interface? (unspecified)) (set! aZdc2@module-interface-first-mark (unspecified)) (set! aZdc4@set-module-interface-first-mark! (unspecified)) (set! aZdc6@module-interface-exp-id-vec (unspecified)) (set! aZdc8@set-module-interface-exp-id-vec! (unspecified)) (set! aZdca@module-interface-exp-lab-vec (unspecified)) (set! aZdcc@set-module-interface-exp-lab-vec! (unspecified)) (set! aZdce@dummy (unspecified)) (set! aZdd0@module-interface-exp-id* (unspecified)) (set! aZdd2@chi-internal-module (unspecified)) (set! aZdd4@chi-body* (unspecified)) (set! aZdd6@expand-transformer (unspecified)) (set! aZdd8@parse-exports (unspecified)) (set! aZdda@parse-library-name (unspecified)) (set! aZddc@parse-library (unspecified)) (set! aZdde@parse-import-spec* (unspecified)) (set! aZde0@make-top-rib (unspecified)) (set! aZde2@make-collector (unspecified)) (set! aZde4@inv-collector (unspecified)) (set! aZde6@vis-collector (unspecified)) (set! aZde8@imp-collector (unspecified)) (set! aZdea@chi-library-internal (unspecified)) (set! aZdec@chi-interaction-expr (unspecified)) (set! aZdee@library-body-expander (unspecified)) (set! aZdf0@core-library-expander (unspecified)) (set! aZdf2@parse-top-level-program (unspecified)) (set! aZdf4@top-level-expander (unspecified)) (set! aZdf6@rp (unspecified)) (set! aZe00@env? (unspecified)) (set! aZe02@env-names (unspecified)) (set! aZe04@set-env-names! (unspecified)) (set! aZe06@env-labels (unspecified)) (set! aZe08@set-env-labels! (unspecified)) (set! aZe0a@env-itc (unspecified)) (set! aZe0c@set-env-itc! (unspecified)) (set! aZe0e@dummy (unspecified)) (set! aZe10@rp (unspecified)) (set! aZe1a@interaction-env? (unspecified)) (set! aZe1c@interaction-env-rib (unspecified)) (set! aZe1e@set-interaction-env-rib! (unspecified)) (set! aZe20@interaction-env-r (unspecified)) (set! aZe22@set-interaction-env-r! (unspecified)) (set! aZe24@interaction-env-locs (unspecified)) (set! aZe26@set-interaction-env-locs! (unspecified)) (set! aZe28@dummy (unspecified)) (set! aZe2a@interaction-environment-symbols (unspecified)) (set! aZe2c@environment-bindings (unspecified)) (set! aZe2e@parse-binding (unspecified)) (set! aZe30@environment? (unspecified)) (set! aZe32@environment-symbols (unspecified)) (set! aZe34@environment (unspecified)) (set! aZe36@null-environment (unspecified)) (set! aZe38@scheme-report-environment (unspecified)) (set! aZe3a@expand (unspecified)) (set! aZe3c@eval (unspecified)) (set! aZe3e@library-expander (unspecified)) (set! aZe40@boot-library-expand (unspecified)) (set! aZe42@rev-map-append (unspecified)) (set! aZe44@build-exports (unspecified)) (set! aZe46@make-export-subst (unspecified)) (set! aZe48@make-export-env/macros (unspecified)) (set! aZe4a@generate-temporaries (unspecified)) (set! aZe4c@free-identifier=? (unspecified)) (set! aZe4e@bound-identifier=? (unspecified)) (set! aZe50@make-source-condition (unspecified)) (set! aZe52@extract-position-condition (unspecified)) (set! aZe54@expression-position (unspecified)) (set! aZe56@assertion-error (unspecified)) (set! aZe58@syntax-error (unspecified)) (set! aZe5a@syntax-violation* (unspecified)) (set! aZe5c@syntax-violation (unspecified)) (set! aZe5e@identifier? (unspecified)) (set! aZe60@datum->syntax (unspecified)) (set! aZe62@syntax->datum (unspecified)) (set! aZe64@ungensym-all (unspecified)) (set! aZe66@compile-r6rs-top-level (unspecified)) (set! aZe68@pre-compile-r6rs-top-level (unspecified)) (set! aZe6a@interaction-environment (unspecified)) (set! aZe6c@top-level-context (unspecified)) (set! aZaf0@file-options-macro (lambda (aZe6d@x) (let ((aZe70@valid-option? '#f)) (begin (set! aZe70@valid-option? (lambda (aZe79@x) (and (aZb75@id? aZe79@x) (memq (aZb77@id->sym aZe79@x) '(no-fail no-create no-truncate))))) (let ((aZe71@t aZe6d@x)) (let ((aZe73@ls/false (aZd7c@syntax-dispatch aZe71@t '(_ . each-any)))) (if (and aZe73@ls/false (apply (lambda (aZe75@opt*) (for-all aZe70@valid-option? aZe75@opt*)) aZe73@ls/false)) (apply (lambda (aZe77@opt*) (aZd32@bless (list 'make-file-options (list 'quote aZe77@opt*)))) aZe73@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZe71@t)))))))) (set! aZ27c3@aZaf0@file-options-macro aZaf0@file-options-macro) (set! aZaf2@set-cons (lambda (aZe7b@x aZe7c@ls) (if (memq aZe7b@x aZe7c@ls) aZe7c@ls (cons aZe7b@x aZe7c@ls)))) (set! aZ27c4@aZaf2@set-cons aZaf2@set-cons) (set! aZaf4@set-union (lambda (aZe7f@ls1 aZe80@ls2) (if (null? aZe7f@ls1) aZe80@ls2 (if (memq (car aZe7f@ls1) aZe80@ls2) (aZaf4@set-union (cdr aZe7f@ls1) aZe80@ls2) (cons (car aZe7f@ls1) (aZaf4@set-union (cdr aZe7f@ls1) aZe80@ls2)))))) (set! aZ27c5@aZaf4@set-union aZaf4@set-union) (set! aZaf9@top-mark* '(top)) (set! aZ27c6@aZaf9@top-mark* aZaf9@top-mark*) (set! aZafb@top-marked? (lambda (aZe83@m*) (memq 'top aZe83@m*))) (set! aZ27c7@aZafb@top-marked? aZafb@top-marked?) (set! aZafd@gen-lexical (lambda (aZe85@sym) (if (symbol? aZe85@sym) (gensym aZe85@sym) (if (aZb41@stx? aZe85@sym) (aZafd@gen-lexical (aZb77@id->sym aZe85@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" aZe85@sym))))) (set! aZ27c8@aZafd@gen-lexical aZafd@gen-lexical) (set! aZaff@gen-global (lambda (aZe87@x) (aZafd@gen-lexical aZe87@x))) (set! aZ27c9@aZaff@gen-global aZaff@gen-global) (set! aZb01@gen-label (lambda (aZe89@_) (gensym))) (set! aZ27ca@aZb01@gen-label aZb01@gen-label) (set! aZb03@gen-top-level-label (lambda (aZe8b@id aZe8c@rib) (let ((aZe90@find '#f)) (begin (set! aZe90@find (lambda (aZe9b@sym aZe9c@mark* aZe9d@sym* aZe9e@mark** aZe9f@label*) (and (pair? aZe9d@sym*) (if (and (eq? aZe9b@sym (car aZe9d@sym*)) (same-marks? aZe9c@mark* (car aZe9e@mark**))) (car aZe9f@label*) (aZe90@find aZe9b@sym aZe9c@mark* (cdr aZe9d@sym*) (cdr aZe9e@mark**) (cdr aZe9f@label*)))))) (let ((aZe91@sym (aZb77@id->sym aZe8b@id)) (aZe92@mark* (aZb47@stx-mark* aZe8b@id))) (let ((aZe95@sym* (aZb13@rib-sym* aZe8c@rib))) (let ((aZe97@t (and (memq aZe91@sym (aZb13@rib-sym* aZe8c@rib)) (aZe90@find aZe91@sym aZe92@mark* aZe95@sym* (aZb17@rib-mark** aZe8c@rib) (aZb1b@rib-label* aZe8c@rib))))) (if aZe97@t ((lambda (aZe99@label) (if (aZ98a@aZ7d7@imported-label->binding aZe99@label) (gensym) aZe99@label)) aZe97@t) (gensym))))))))) (set! aZ27cb@aZb03@gen-top-level-label aZb03@gen-top-level-label) (set! aZb05@gen-define-label+loc (lambda (aZea5@id aZea6@rib) (let ((aZea9@t (aZe6c@top-level-context))) (if aZea9@t ((lambda (aZeab@env) (let ((aZead@label (aZb03@gen-top-level-label aZea5@id aZea6@rib)) (aZeae@locs (aZe24@interaction-env-locs aZeab@env))) (values aZead@label (let ((aZeb1@t (assq aZead@label aZeae@locs))) (if aZeb1@t (cdr aZeb1@t) (let ((aZeb3@loc (aZafd@gen-lexical aZea5@id))) (begin (aZe26@set-interaction-env-locs! aZeab@env (cons (cons aZead@label aZeb3@loc) aZeae@locs)) aZeb3@loc))))))) aZea9@t) (values (gensym) (aZafd@gen-lexical aZea5@id)))))) (set! aZ27cc@aZb05@gen-define-label+loc aZb05@gen-define-label+loc) (set! aZb07@gen-define-label (lambda (aZeb5@id aZeb6@rib) (if (aZe6c@top-level-context) (aZb03@gen-top-level-label aZeb5@id aZeb6@rib) (gensym)))) (set! aZ27cd@aZb07@gen-define-label aZb07@gen-define-label) (set! aZb11@rib? (lambda (aZeb9@x) (and (simple-struct? aZeb9@x) (eq? (simple-struct-name aZeb9@x) 'rib)))) (set! aZ27ce@aZb11@rib? aZb11@rib?) (set! aZb13@rib-sym* (lambda (aZebb@x) (simple-struct-ref aZebb@x '0))) (set! aZ27cf@aZb13@rib-sym* aZb13@rib-sym*) (set! aZb15@set-rib-sym*! (lambda (aZebd@x aZebe@val) (simple-struct-set! aZebd@x '0 aZebe@val))) (set! aZ27d0@aZb15@set-rib-sym*! aZb15@set-rib-sym*!) (set! aZb17@rib-mark** (lambda (aZec1@x) (simple-struct-ref aZec1@x '1))) (set! aZ27d1@aZb17@rib-mark** aZb17@rib-mark**) (set! aZb19@set-rib-mark**! (lambda (aZec3@x aZec4@val) (simple-struct-set! aZec3@x '1 aZec4@val))) (set! aZ27d2@aZb19@set-rib-mark**! aZb19@set-rib-mark**!) (set! aZb1b@rib-label* (lambda (aZec7@x) (simple-struct-ref aZec7@x '2))) (set! aZ27d3@aZb1b@rib-label* aZb1b@rib-label*) (set! aZb1d@set-rib-label*! (lambda (aZec9@x aZeca@val) (simple-struct-set! aZec9@x '2 aZeca@val))) (set! aZ27d4@aZb1d@set-rib-label*! aZb1d@set-rib-label*!) (set! aZb1f@rib-sealed/freq (lambda (aZecd@x) (simple-struct-ref aZecd@x '3))) (set! aZ27d5@aZb1f@rib-sealed/freq aZb1f@rib-sealed/freq) (set! aZb21@set-rib-sealed/freq! (lambda (aZecf@x aZed0@val) (simple-struct-set! aZecf@x '3 aZed0@val))) (set! aZ27d6@aZb21@set-rib-sealed/freq! aZb21@set-rib-sealed/freq!) (set! aZb23@rib-cache (lambda (aZed3@x) (simple-struct-ref aZed3@x '4))) (set! aZ27d7@aZb23@rib-cache aZb23@rib-cache) (set! aZb25@set-rib-cache! (lambda (aZed5@x aZed6@val) (simple-struct-set! aZed5@x '4 aZed6@val))) (set! aZ27d8@aZb25@set-rib-cache! aZb25@set-rib-cache!) (set! aZb27@dummy '3) (set! aZ27d9@aZb27@dummy aZb27@dummy) (set! aZb29@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! aZ27da@aZb29@make-empty-rib aZb29@make-empty-rib) (set! aZb2b@extend-rib! (lambda (aZed9@rib aZeda@id aZedb@label) (let ((aZee0@find '#f)) (begin (set! aZee0@find (lambda (aZeed@sym aZeee@mark* aZeef@sym* aZef0@mark** aZef1@label*) (and (pair? aZeef@sym*) (if (and (eq? aZeed@sym (car aZeef@sym*)) (same-marks? aZeee@mark* (car aZef0@mark**))) aZef1@label* (aZee0@find aZeed@sym aZeee@mark* (cdr aZeef@sym*) (cdr aZef0@mark**) (cdr aZef1@label*)))))) (begin (if (aZb1f@rib-sealed/freq aZed9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" aZed9@rib) (void)) (let ((aZee1@sym (aZb77@id->sym aZeda@id)) (aZee2@mark* (aZb47@stx-mark* aZeda@id))) (let ((aZee5@sym* (aZb13@rib-sym* aZed9@rib))) (let ((aZee7@t (and (memq aZee1@sym (aZb13@rib-sym* aZed9@rib)) (aZee0@find aZee1@sym aZee2@mark* aZee5@sym* (aZb17@rib-mark** aZed9@rib) (aZb1b@rib-label* aZed9@rib))))) (if aZee7@t ((lambda (aZee9@p) (if (not (eq? aZedb@label (car aZee9@p))) (if (aZe6c@top-level-context) (set-car! aZee9@p aZedb@label) (aZe5c@syntax-violation '#f '"multiple definitions of identifier" aZeda@id)) (void))) aZee7@t) (begin (if (aZb23@rib-cache aZed9@rib) (hashtable-update! (aZb23@rib-cache aZed9@rib) aZee1@sym (lambda (aZeeb@e) (cons (cons aZee2@mark* aZedb@label) aZeeb@e)) '()) (void)) (aZb15@set-rib-sym*! aZed9@rib (cons aZee1@sym aZee5@sym*)) (aZb19@set-rib-mark**! aZed9@rib (cons aZee2@mark* (aZb17@rib-mark** aZed9@rib))) (aZb1d@set-rib-label*! aZed9@rib (cons aZedb@label (aZb1b@rib-label* aZed9@rib))))))))))))) (set! aZ27db@aZb2b@extend-rib! aZb2b@extend-rib!) (set! aZb2d@extend-rib/nc! (lambda (aZef7@rib aZef8@id aZef9@label) (let ((aZefd@sym (aZb77@id->sym aZef8@id)) (aZefe@mark* (aZb47@stx-mark* aZef8@id))) (let ((aZf01@sym* (aZb13@rib-sym* aZef7@rib))) (begin (if (aZb23@rib-cache aZef7@rib) (hashtable-update! (aZb23@rib-cache aZef7@rib) aZefd@sym (lambda (aZf03@e) (cons (cons aZefe@mark* aZef9@label) aZf03@e)) '()) (void)) (aZb15@set-rib-sym*! aZef7@rib (cons aZefd@sym aZf01@sym*)) (aZb19@set-rib-mark**! aZef7@rib (cons aZefe@mark* (aZb17@rib-mark** aZef7@rib))) (aZb1d@set-rib-label*! aZef7@rib (cons aZef9@label (aZb1b@rib-label* aZef7@rib)))))))) (set! aZ27dc@aZb2d@extend-rib/nc! aZb2d@extend-rib/nc!) (set! aZb2f@make-rib-map (lambda (aZf05@sym*) (let ((aZf07@ht (make-eq-hashtable))) (let aZf0d@f ((aZf09@i '0) (aZf0a@sym* aZf05@sym*)) (if (null? aZf0a@sym*) aZf07@ht (begin (hashtable-update! aZf07@ht (car aZf0a@sym*) (lambda (aZf0f@x) (cons aZf09@i aZf0f@x)) '()) (aZf0d@f (+ aZf09@i '1) (cdr aZf0a@sym*)))))))) (set! aZ27dd@aZb2f@make-rib-map aZb2f@make-rib-map) (set! aZb31@seal-rib! (lambda (aZf11@rib) (let ((aZf13@sym* (aZb13@rib-sym* aZf11@rib))) (if (not (null? aZf13@sym*)) (begin (aZb15@set-rib-sym*! aZf11@rib (list->vector aZf13@sym*)) (aZb19@set-rib-mark**! aZf11@rib (list->vector (aZb17@rib-mark** aZf11@rib))) (aZb1d@set-rib-label*! aZf11@rib (list->vector (aZb1b@rib-label* aZf11@rib))) (aZb21@set-rib-sealed/freq! aZf11@rib (aZb2f@make-rib-map aZf13@sym*))) (void))))) (set! aZ27de@aZb31@seal-rib! aZb31@seal-rib!) (set! aZb33@unseal-rib! (lambda (aZf15@rib) (if (aZb1f@rib-sealed/freq aZf15@rib) (begin (aZb21@set-rib-sealed/freq! aZf15@rib '#f) (aZb15@set-rib-sym*! aZf15@rib (vector->list (aZb13@rib-sym* aZf15@rib))) (aZb19@set-rib-mark**! aZf15@rib (vector->list (aZb17@rib-mark** aZf15@rib))) (aZb1d@set-rib-label*! aZf15@rib (vector->list (aZb1b@rib-label* aZf15@rib)))) (void)))) (set! aZ27df@aZb33@unseal-rib! aZb33@unseal-rib!) (set! aZb35@make-full-rib (lambda (aZf17@id* aZf18@label*) (let ((aZf1b@r (make-simple-struct 'rib '6 (list (map aZb77@id->sym aZf17@id*) (map aZb47@stx-mark* aZf17@id*) aZf18@label* '#f '#f)))) (begin (aZb31@seal-rib! aZf1b@r) aZf1b@r)))) (set! aZ27e0@aZb35@make-full-rib aZb35@make-full-rib) (set! aZb37@rp (aZ6bc@aZ597@make-record-printer 'stx (lambda (aZf1d@x aZf1e@p aZf1f@wr) (begin (display '"#<syntax " aZf1e@p) (write (aZb89@stx->datum aZf1d@x) aZf1e@p) (let ((aZf23@expr (aZb43@stx-expr aZf1d@x))) (if (aZ6b3@aZ585@annotation? aZf23@expr) (let ((aZf25@src (aZ6b4@aZ587@annotation-source aZf23@expr))) (if (pair? aZf25@src) (begin (display '" [" aZf1e@p) (display (cdr aZf25@src) aZf1e@p) (display '" of " aZf1e@p) (display (car aZf25@src) aZf1e@p) (display '"]" aZf1e@p)) (void))) (void))) (display '">" aZf1e@p))))) (set! aZ27e1@aZb37@rp aZb37@rp) (set! aZb41@stx? (lambda (aZf27@x) (and (simple-struct? aZf27@x) (eq? (simple-struct-name aZf27@x) 'stx)))) (set! aZ27e2@aZb41@stx? aZb41@stx?) (set! aZb43@stx-expr (lambda (aZf29@x) (simple-struct-ref aZf29@x '0))) (set! aZ27e3@aZb43@stx-expr aZb43@stx-expr) (set! aZb45@set-stx-expr! (lambda (aZf2b@x aZf2c@val) (simple-struct-set! aZf2b@x '0 aZf2c@val))) (set! aZ27e4@aZb45@set-stx-expr! aZb45@set-stx-expr!) (set! aZb47@stx-mark* (lambda (aZf2f@x) (simple-struct-ref aZf2f@x '1))) (set! aZ27e5@aZb47@stx-mark* aZb47@stx-mark*) (set! aZb49@set-stx-mark*! (lambda (aZf31@x aZf32@val) (simple-struct-set! aZf31@x '1 aZf32@val))) (set! aZ27e6@aZb49@set-stx-mark*! aZb49@set-stx-mark*!) (set! aZb4b@stx-subst* (lambda (aZf35@x) (simple-struct-ref aZf35@x '2))) (set! aZ27e7@aZb4b@stx-subst* aZb4b@stx-subst*) (set! aZb4d@set-stx-subst*! (lambda (aZf37@x aZf38@val) (simple-struct-set! aZf37@x '2 aZf38@val))) (set! aZ27e8@aZb4d@set-stx-subst*! aZb4d@set-stx-subst*!) (set! aZb4f@stx-ae* (lambda (aZf3b@x) (simple-struct-ref aZf3b@x '3))) (set! aZ27e9@aZb4f@stx-ae* aZb4f@stx-ae*) (set! aZb51@set-stx-ae*! (lambda (aZf3d@x aZf3e@val) (simple-struct-set! aZf3d@x '3 aZf3e@val))) (set! aZ27ea@aZb51@set-stx-ae*! aZb51@set-stx-ae*!) (set! aZb53@dummy '3) (set! aZ27eb@aZb53@dummy aZb53@dummy) (set! aZb55@datum->stx (lambda (aZf41@id aZf42@datum) (make-simple-struct 'stx '5 (list aZf42@datum (aZb47@stx-mark* aZf41@id) (aZb4b@stx-subst* aZf41@id) (aZb4f@stx-ae* aZf41@id))))) (set! aZ27ec@aZb55@datum->stx aZb55@datum->stx) (set! aZb57@gen-mark (lambda () (string '#\m))) (set! aZ27ed@aZb57@gen-mark aZb57@gen-mark) (set! aZb59@anti-mark '#f) (set! aZ27ee@aZb59@anti-mark aZb59@anti-mark) (set! aZb5b@anti-mark? not) (set! aZ27ef@aZb5b@anti-mark? aZb5b@anti-mark?) (set! aZb5d@mkstx (lambda (aZf45@e aZf46@m* aZf47@s* aZf48@ae*) (if (and (aZb41@stx? aZf45@e) (not (aZafb@top-marked? aZf46@m*))) (call-with-values (lambda () (join-wraps aZf46@m* aZf47@s* aZf48@ae* aZf45@e)) (lambda (aZf53@aZf4e aZf54@aZf50 aZf55@aZf52) (let ((aZf59@ae* aZf55@aZf52) (aZf5a@s* aZf54@aZf50) (aZf5b@m* aZf53@aZf4e)) (make-simple-struct 'stx '5 (list (aZb43@stx-expr aZf45@e) aZf5b@m* aZf5a@s* aZf59@ae*))))) (make-simple-struct 'stx '5 (list aZf45@e aZf46@m* aZf47@s* aZf48@ae*))))) (set! aZ27f0@aZb5d@mkstx aZb5d@mkstx) (set! aZb5f@add-mark (lambda (aZf5f@m aZf60@e aZf61@ae) (aZb5d@mkstx aZf60@e (list aZf5f@m) '(shift) (list aZf61@ae)))) (set! aZ27f1@aZb5f@add-mark aZb5f@add-mark) (set! aZb61@add-subst (lambda (aZf65@subst aZf66@e) (aZb5d@mkstx aZf66@e '() (list aZf65@subst) '()))) (set! aZ27f2@aZb61@add-subst aZb61@add-subst) (set! aZb63@syntax-kind? (lambda (aZf69@x aZf6a@p?) (if (aZb41@stx? aZf69@x) (aZb63@syntax-kind? (aZb43@stx-expr aZf69@x) aZf6a@p?) (if (aZ6b3@aZ585@annotation? aZf69@x) (aZb63@syntax-kind? (aZ6b5@aZ589@annotation-expression aZf69@x) aZf6a@p?) (aZf6a@p? aZf69@x))))) (set! aZ27f3@aZb63@syntax-kind? aZb63@syntax-kind?) (set! aZb65@syntax-vector->list (lambda (aZf6d@x) (if (aZb41@stx? aZf6d@x) (let ((aZf6f@ls (aZb65@syntax-vector->list (aZb43@stx-expr aZf6d@x))) (aZf70@m* (aZb47@stx-mark* aZf6d@x)) (aZf71@s* (aZb4b@stx-subst* aZf6d@x)) (aZf72@ae* (aZb4f@stx-ae* aZf6d@x))) (map (lambda (aZf77@x) (aZb5d@mkstx aZf77@x aZf70@m* aZf71@s* aZf72@ae*)) aZf6f@ls)) (if (aZ6b3@aZ585@annotation? aZf6d@x) (aZb65@syntax-vector->list (aZ6b5@aZ589@annotation-expression aZf6d@x)) (if (vector? aZf6d@x) (vector->list aZf6d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" aZf6d@x)))))) (set! aZ27f4@aZb65@syntax-vector->list aZb65@syntax-vector->list) (set! aZb67@syntax-pair? (lambda (aZf79@x) (aZb63@syntax-kind? aZf79@x pair?))) (set! aZ27f5@aZb67@syntax-pair? aZb67@syntax-pair?) (set! aZb69@syntax-vector? (lambda (aZf7b@x) (aZb63@syntax-kind? aZf7b@x vector?))) (set! aZ27f6@aZb69@syntax-vector? aZb69@syntax-vector?) (set! aZb6b@syntax-null? (lambda (aZf7d@x) (aZb63@syntax-kind? aZf7d@x null?))) (set! aZ27f7@aZb6b@syntax-null? aZb6b@syntax-null?) (set! aZb6d@syntax-list? (lambda (aZf7f@x) (or (aZb6b@syntax-null? aZf7f@x) (and (aZb67@syntax-pair? aZf7f@x) (aZb6d@syntax-list? (aZb71@syntax-cdr aZf7f@x)))))) (set! aZ27f8@aZb6d@syntax-list? aZb6d@syntax-list?) (set! aZb6f@syntax-car (lambda (aZf81@x) (if (aZb41@stx? aZf81@x) (aZb5d@mkstx (aZb6f@syntax-car (aZb43@stx-expr aZf81@x)) (aZb47@stx-mark* aZf81@x) (aZb4b@stx-subst* aZf81@x) (aZb4f@stx-ae* aZf81@x)) (if (aZ6b3@aZ585@annotation? aZf81@x) (aZb6f@syntax-car (aZ6b5@aZ589@annotation-expression aZf81@x)) (if (pair? aZf81@x) (car aZf81@x) (assertion-violation 'syntax-car '"BUG: not a pair" aZf81@x)))))) (set! aZ27f9@aZb6f@syntax-car aZb6f@syntax-car) (set! aZb71@syntax-cdr (lambda (aZf83@x) (if (aZb41@stx? aZf83@x) (aZb5d@mkstx (aZb71@syntax-cdr (aZb43@stx-expr aZf83@x)) (aZb47@stx-mark* aZf83@x) (aZb4b@stx-subst* aZf83@x) (aZb4f@stx-ae* aZf83@x)) (if (aZ6b3@aZ585@annotation? aZf83@x) (aZb71@syntax-cdr (aZ6b5@aZ589@annotation-expression aZf83@x)) (if (pair? aZf83@x) (cdr aZf83@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" aZf83@x)))))) (set! aZ27fa@aZb71@syntax-cdr aZb71@syntax-cdr) (set! aZb73@syntax->list (lambda (aZf85@x) (if (aZb67@syntax-pair? aZf85@x) (cons (aZb6f@syntax-car aZf85@x) (aZb73@syntax->list (aZb71@syntax-cdr aZf85@x))) (if (aZb6b@syntax-null? aZf85@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" aZf85@x))))) (set! aZ27fb@aZb73@syntax->list aZb73@syntax->list) (set! aZb75@id? (lambda (aZf87@x) (and (aZb41@stx? aZf87@x) (symbol? (aZb43@stx-expr aZf87@x))))) (set! aZ27fc@aZb75@id? aZb75@id?) (set! aZb77@id->sym (lambda (aZf89@x) (aZb43@stx-expr aZf89@x))) (set! aZ27fd@aZb77@id->sym aZb77@id->sym) (set! aZb79@bound-id=? (lambda (aZf8b@x aZf8c@y) (and (eq? (aZb77@id->sym aZf8b@x) (aZb77@id->sym aZf8c@y)) (same-marks? (aZb47@stx-mark* aZf8b@x) (aZb47@stx-mark* aZf8c@y))))) (set! aZ27fe@aZb79@bound-id=? aZb79@bound-id=?) (set! aZb7b@free-id=? (lambda (aZf8f@i aZf90@j) (let ((aZf93@t0 (id->real-label aZf8f@i)) (aZf94@t1 (id->real-label aZf90@j))) (if (or aZf93@t0 aZf94@t1) (eq? aZf93@t0 aZf94@t1) (eq? (aZb77@id->sym aZf8f@i) (aZb77@id->sym aZf90@j)))))) (set! aZ27ff@aZb7b@free-id=? aZb7b@free-id=?) (set! aZb7d@valid-bound-ids? (lambda (aZf97@id*) (and (for-all aZb75@id? aZf97@id*) (aZb7f@distinct-bound-ids? aZf97@id*)))) (set! aZ2800@aZb7d@valid-bound-ids? aZb7d@valid-bound-ids?) (set! aZb7f@distinct-bound-ids? (lambda (aZf99@id*) (or (null? aZf99@id*) (and (not (aZb81@bound-id-member? (car aZf99@id*) (cdr aZf99@id*))) (aZb7f@distinct-bound-ids? (cdr aZf99@id*)))))) (set! aZ2801@aZb7f@distinct-bound-ids? aZb7f@distinct-bound-ids?) (set! aZb81@bound-id-member? (lambda (aZf9b@id aZf9c@id*) (and (pair? aZf9c@id*) (or (aZb79@bound-id=? aZf9b@id (car aZf9c@id*)) (aZb81@bound-id-member? aZf9b@id (cdr aZf9c@id*)))))) (set! aZ2802@aZb81@bound-id-member? aZb81@bound-id-member?) (set! aZb83@self-evaluating? (lambda (aZf9f@x) (or (number? aZf9f@x) (string? aZf9f@x) (char? aZf9f@x) (boolean? aZf9f@x) (regexp? aZf9f@x) (bytevector? aZf9f@x)))) (set! aZ2803@aZb83@self-evaluating? aZb83@self-evaluating?) (set! aZb85@strip-annotations (lambda (aZfa1@x) (if (pair? aZfa1@x) (cons (aZb85@strip-annotations (car aZfa1@x)) (aZb85@strip-annotations (cdr aZfa1@x))) (if (vector? aZfa1@x) (vector-map aZb85@strip-annotations aZfa1@x) (if (aZ6b3@aZ585@annotation? aZfa1@x) (aZ6b2@aZ583@annotation-stripped aZfa1@x) aZfa1@x))))) (set! aZ2804@aZb85@strip-annotations aZb85@strip-annotations) (set! aZb87@strip (lambda (aZfa3@x aZfa4@m*) (if (aZafb@top-marked? aZfa4@m*) (if (or (aZ6b3@aZ585@annotation? aZfa3@x) (and (pair? aZfa3@x) (aZ6b3@aZ585@annotation? (car aZfa3@x))) (and (vector? aZfa3@x) (> (vector-length aZfa3@x) '0) (aZ6b3@aZ585@annotation? (vector-ref aZfa3@x '0)))) (aZb85@strip-annotations aZfa3@x) aZfa3@x) (let aZfa9@f ((aZfa7@x aZfa3@x)) (if (aZb41@stx? aZfa7@x) (aZb87@strip (aZb43@stx-expr aZfa7@x) (aZb47@stx-mark* aZfa7@x)) (if (aZ6b3@aZ585@annotation? aZfa7@x) (aZ6b2@aZ583@annotation-stripped aZfa7@x) (if (pair? aZfa7@x) (let ((aZfab@a (aZfa9@f (car aZfa7@x))) (aZfac@d (aZfa9@f (cdr aZfa7@x)))) (if (and (eq? aZfab@a (car aZfa7@x)) (eq? aZfac@d (cdr aZfa7@x))) aZfa7@x (cons aZfab@a aZfac@d))) (if (vector? aZfa7@x) (let ((aZfaf@old (vector->list aZfa7@x))) (let ((aZfb1@new (map aZfa9@f aZfaf@old))) (if (for-all eq? aZfaf@old aZfb1@new) aZfa7@x (list->vector aZfb1@new)))) aZfa7@x)))))))) (set! aZ2805@aZb87@strip aZb87@strip) (set! aZb89@stx->datum (lambda (aZfb3@x) (aZb87@strip aZfb3@x '()))) (set! aZ2806@aZb89@stx->datum aZb89@stx->datum) (set! aZb8b@id->label (lambda (aZfb5@id) (or (id->real-label aZfb5@id) (let ((aZfb7@t (aZe6c@top-level-context))) (if aZfb7@t ((lambda (aZfb9@env) (let ((aZfbb@rib (aZe1c@interaction-env-rib aZfb9@env))) (call-with-values (lambda () (aZb05@gen-define-label+loc aZfb5@id aZfbb@rib)) (lambda (aZfc1@aZfbe aZfc2@aZfc0) (let ((aZfc5@loc_ aZfc2@aZfc0) (aZfc6@lab aZfc1@aZfbe)) (begin (aZb2b@extend-rib! aZfbb@rib aZfb5@id aZfc6@lab) aZfc6@lab)))))) aZfb7@t) '#f))))) (set! aZ2807@aZb8b@id->label aZb8b@id->label) (set! aZb8d@label->binding (lambda (aZfc9@x aZfca@r) (let ((aZfcd@t (aZ98a@aZ7d7@imported-label->binding aZfc9@x))) (if aZfcd@t ((lambda (aZfcf@b) (if (and (pair? aZfcf@b) (eq? (car aZfcf@b) '$core-rtd)) (cons '$rtd (map aZd32@bless (cdr aZfcf@b))) (if (and (pair? aZfcf@b) (eq? (car aZfcf@b) 'global-rtd)) (let ((aZfd1@lib (cadr aZfcf@b)) (aZfd2@loc (cddr aZfcf@b))) (cons '$rtd (symbol-value aZfd2@loc))) aZfcf@b))) aZfcd@t) (let ((aZfd5@t (assq aZfc9@x aZfca@r))) (if aZfd5@t (cdr aZfd5@t) (let ((aZfd7@t (aZe6c@top-level-context))) (if aZfd7@t ((lambda (aZfd9@env) (let ((aZfdb@t (assq aZfc9@x (aZe24@interaction-env-locs aZfd9@env)))) (if aZfdb@t ((lambda (aZfdd@p) (cons* 'lexical (cdr aZfdd@p) '#f)) aZfdb@t) '(displaced-lexical . #f)))) aZfd7@t) '(displaced-lexical . #f))))))))) (set! aZ2808@aZb8d@label->binding aZb8d@label->binding) (set! aZb8f@make-binding cons) (set! aZ2809@aZb8f@make-binding aZb8f@make-binding) (set! aZb91@binding-type car) (set! aZ280a@aZb91@binding-type aZb91@binding-type) (set! aZb93@binding-value cdr) (set! aZ280b@aZb93@binding-value aZb93@binding-value) (set! aZb95@raise-unbound-error (lambda (aZfdf@id) (aZe5a@syntax-violation* '#f '"unbound identifier" aZfdf@id (aZ2c01@aZ2a47@make-undefined-violation)))) (set! aZ280c@aZb95@raise-unbound-error aZb95@raise-unbound-error) (set! aZb97@syntax-type (lambda (aZfe1@e aZfe2@r) (if (aZb75@id? aZfe1@e) (let ((aZfe5@id aZfe1@e)) (let ((aZfe7@label (aZb8b@id->label aZfe5@id))) (let ((aZfe9@b (aZb8d@label->binding aZfe7@label aZfe2@r))) (let ((aZfeb@type (aZb91@binding-type aZfe9@b))) (begin (if (not aZfe7@label) (aZb95@raise-unbound-error aZfe5@id) (void)) (let ((aZfed@t aZfeb@type)) (if (memv aZfed@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values aZfeb@type (aZb93@binding-value aZfe9@b) aZfe5@id) (values 'other '#f '#f)))))))) (if (aZb67@syntax-pair? aZfe1@e) (let ((aZfef@id (aZb6f@syntax-car aZfe1@e))) (if (aZb75@id? aZfef@id) (let ((aZff1@label (aZb8b@id->label aZfef@id))) (let ((aZff3@b (aZb8d@label->binding aZff1@label aZfe2@r))) (let ((aZff5@type (aZb91@binding-type aZff3@b))) (begin (if (not aZff1@label) (aZb95@raise-unbound-error aZfef@id) (void)) (let ((aZff7@t aZff5@type)) (if (memv aZff7@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values aZff5@type (aZb93@binding-value aZff3@b) aZfef@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((aZff9@d (aZb89@stx->datum aZfe1@e))) (if (aZb83@self-evaluating? aZff9@d) (values 'constant aZff9@d '#f) (values 'other '#f '#f))))))) (set! aZ280d@aZb97@syntax-type aZb97@syntax-type) (set! aZba5@sanitize-binding (lambda (aZffb@x aZffc@src) (if (procedure? aZffb@x) (cons* 'local-macro aZffb@x aZffc@src) (if (and (pair? aZffb@x) (eq? (car aZffb@x) 'macro!) (procedure? (cdr aZffb@x))) (cons* 'local-macro! (cdr aZffb@x) aZffc@src) (if (and (pair? aZffb@x) (eq? (car aZffb@x) '$rtd)) aZffb@x (assertion-violation 'expand '"invalid transformer" aZffb@x)))))) (set! aZ280e@aZba5@sanitize-binding aZba5@sanitize-binding) (set! aZba7@make-variable-transformer (lambda (aZfff@x) (if (procedure? aZfff@x) (cons 'macro! aZfff@x) (assertion-violation 'make-variable-transformer '"not a procedure" aZfff@x)))) (set! aZ280f@aZba7@make-variable-transformer aZba7@make-variable-transformer) (set! aZba9@variable-transformer? (lambda (aZ1001@x) (and (pair? aZ1001@x) (eq? (car aZ1001@x) 'macro!) (procedure? (cdr aZ1001@x))))) (set! aZ2810@aZba9@variable-transformer? aZba9@variable-transformer?) (set! aZbab@variable-transformer-procedure (lambda (aZ1003@x) (if (aZba9@variable-transformer? aZ1003@x) (cdr aZ1003@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" aZ1003@x)))) (set! aZ2811@aZbab@variable-transformer-procedure aZbab@variable-transformer-procedure) (set! aZbad@make-eval-transformer (lambda (aZ1005@x) (aZba5@sanitize-binding (eval-core (aZ715@aZ6cd@expanded->core aZ1005@x)) aZ1005@x))) (set! aZ2812@aZbad@make-eval-transformer aZbad@make-eval-transformer) (set! aZcfe@parse-define (lambda (aZ1007@x) (let ((aZ1009@t aZ1007@x)) (let ((aZ100b@ls/false (aZd7c@syntax-dispatch aZ1009@t '(_ (any . any) any . each-any)))) (if (and aZ100b@ls/false (apply (lambda (aZ100d@id aZ100e@fmls aZ100f@b aZ1010@b*) (aZb75@id? aZ100d@id)) aZ100b@ls/false)) (apply (lambda (aZ1015@id aZ1016@fmls aZ1017@b aZ1018@b*) (begin (aZda2@verify-formals aZ1016@fmls aZ1007@x) (values aZ1015@id (cons 'defun (cons aZ1016@fmls (cons aZ1017@b aZ1018@b*)))))) aZ100b@ls/false) (let ((aZ101d@t aZ1009@t)) (let ((aZ101f@ls/false (aZd7c@syntax-dispatch aZ101d@t '(_ any any)))) (if (and aZ101f@ls/false (apply (lambda (aZ1021@id aZ1022@val) (aZb75@id? aZ1021@id)) aZ101f@ls/false)) (apply (lambda (aZ1025@id aZ1026@val) (values aZ1025@id (cons 'expr aZ1026@val))) aZ101f@ls/false) (let ((aZ1029@t aZ101d@t)) (let ((aZ102b@ls/false (aZd7c@syntax-dispatch aZ1029@t '(_ any)))) (if (and aZ102b@ls/false (apply (lambda (aZ102d@id) (aZb75@id? aZ102d@id)) aZ102b@ls/false)) (apply (lambda (aZ102f@id) (values aZ102f@id (cons 'expr (aZd32@bless '(void))))) aZ102b@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1029@t)))))))))))) (set! aZ2813@aZcfe@parse-define aZcfe@parse-define) (set! aZd00@parse-define-syntax (lambda (aZ1031@x) (let ((aZ1033@t aZ1031@x)) (let ((aZ1035@ls/false (aZd7c@syntax-dispatch aZ1033@t '(_ any any)))) (if (and aZ1035@ls/false (apply (lambda (aZ1037@id aZ1038@val) (aZb75@id? aZ1037@id)) aZ1035@ls/false)) (apply (lambda (aZ103b@id aZ103c@val) (values aZ103b@id aZ103c@val)) aZ1035@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1033@t)))))) (set! aZ2814@aZd00@parse-define-syntax aZd00@parse-define-syntax) (set! aZd02@scheme-stx-hashtable (make-eq-hashtable)) (set! aZ2815@aZd02@scheme-stx-hashtable aZd02@scheme-stx-hashtable) (set! aZd04@scheme-stx (lambda (aZ103f@sym) (or (hashtable-ref aZd02@scheme-stx-hashtable aZ103f@sym '#f) (let ((aZ1041@subst (aZ966@aZ78f@library-subst (aZ984@aZ7cb@find-library-by-name '(psyntax system $all))))) (let ((aZ1043@stx (make-simple-struct 'stx '5 (list aZ103f@sym aZaf9@top-mark* '() '())))) (let ((aZ1045@stx (let ((aZ1047@t (assq aZ103f@sym aZ1041@subst))) (if aZ1047@t ((lambda (aZ1049@x) (let ((aZ104b@name (car aZ1049@x)) (aZ104c@label (cdr aZ1049@x))) (aZb61@add-subst (make-simple-struct 'rib '6 (list (list aZ104b@name) (list aZaf9@top-mark*) (list aZ104c@label) '#f '#f)) aZ1043@stx))) aZ1047@t) aZ1043@stx)))) (begin (hashtable-set! aZd02@scheme-stx-hashtable aZ103f@sym aZ1045@stx) aZ1045@stx))))))) (set! aZ2816@aZd04@scheme-stx aZd04@scheme-stx) (set! aZd06@lexical-var car) (set! aZ2817@aZd06@lexical-var aZd06@lexical-var) (set! aZd08@lexical-mutable? cdr) (set! aZ2818@aZd08@lexical-mutable? aZd08@lexical-mutable?) (set! aZd0a@set-lexical-mutable! set-cdr!) (set! aZ2819@aZd0a@set-lexical-mutable! aZd0a@set-lexical-mutable!) (set! aZd0c@add-lexical (lambda (aZ104f@lab aZ1050@lex aZ1051@r) (cons (cons* aZ104f@lab 'lexical aZ1050@lex '#f) aZ1051@r))) (set! aZ281a@aZd0c@add-lexical aZd0c@add-lexical) (set! aZd0e@add-lexicals (lambda (aZ1055@lab* aZ1056@lex* aZ1057@r) (if (null? aZ1055@lab*) aZ1057@r (aZd0e@add-lexicals (cdr aZ1055@lab*) (cdr aZ1056@lex*) (aZd0c@add-lexical (car aZ1055@lab*) (car aZ1056@lex*) aZ1057@r))))) (set! aZ281b@aZd0e@add-lexicals aZd0e@add-lexicals) (set! aZd10@letrec-helper (lambda (aZ105b@e aZ105c@r aZ105d@mr aZ105e@build) (let ((aZ1063@t aZ105b@e)) (let ((aZ1065@ls/false (aZd7c@syntax-dispatch aZ1063@t '(_ #(each (any any)) any . each-any)))) (if aZ1065@ls/false (apply (lambda (aZ1067@lhs* aZ1068@rhs* aZ1069@b aZ106a@b*) (if (not (aZb7d@valid-bound-ids? aZ1067@lhs*)) (aZd36@invalid-fmls-error aZ105b@e aZ1067@lhs*) (let ((aZ106f@lex* (map aZafd@gen-lexical aZ1067@lhs*)) (aZ1070@lab* (map aZb01@gen-label aZ1067@lhs*))) (let ((aZ1073@rib (aZb35@make-full-rib aZ1067@lhs* aZ1070@lab*)) (aZ1074@r (aZd0e@add-lexicals aZ1070@lab* aZ106f@lex* aZ105c@r))) (let ((aZ1077@body (aZdb4@chi-internal (aZb61@add-subst aZ1073@rib (cons aZ1069@b aZ106a@b*)) aZ1074@r aZ105d@mr)) (aZ1078@rhs* (aZd9a@chi-expr* (map (lambda (aZ107b@x) (aZb61@add-subst aZ1073@rib aZ107b@x)) aZ1068@rhs*) aZ1074@r aZ105d@mr))) (aZ105e@build '#f aZ106f@lex* aZ1078@rhs* aZ1077@body)))))) aZ1065@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1063@t)))))) (set! aZ281c@aZd10@letrec-helper aZd10@letrec-helper) (set! aZd12@let-transformer (lambda (aZ107d@e aZ107e@r aZ107f@mr) (let ((aZ1083@t aZ107d@e)) (let ((aZ1085@ls/false (aZd7c@syntax-dispatch aZ1083@t '(_ #(each (any any)) any . each-any)))) (if aZ1085@ls/false (apply (lambda (aZ1087@lhs* aZ1088@rhs* aZ1089@b aZ108a@b*) (if (not (aZb7d@valid-bound-ids? aZ1087@lhs*)) (aZd36@invalid-fmls-error aZ107d@e aZ1087@lhs*) (let ((aZ108f@lex* (map aZafd@gen-lexical aZ1087@lhs*)) (aZ1090@lab* (map aZb01@gen-label aZ1087@lhs*)) (aZ1091@rhs* (aZd9a@chi-expr* aZ1088@rhs* aZ107e@r aZ107f@mr))) (let ((aZ1095@rib (aZb35@make-full-rib aZ1087@lhs* aZ1090@lab*)) (aZ1096@r (aZd0e@add-lexicals aZ1090@lab* aZ108f@lex* aZ107e@r))) (let ((aZ1099@body (aZdb4@chi-internal (aZb61@add-subst aZ1095@rib (cons aZ1089@b aZ108a@b*)) aZ1096@r aZ107f@mr))) (aZadd@aZa3a@build-let '#f aZ108f@lex* aZ1091@rhs* aZ1099@body)))))) aZ1085@ls/false) (let ((aZ109b@t aZ1083@t)) (let ((aZ109d@ls/false (aZd7c@syntax-dispatch aZ109b@t '(_ any #(each (any any)) any . each-any)))) (if aZ109d@ls/false (apply (lambda (aZ109f@loop aZ10a0@lhs* aZ10a1@rhs* aZ10a2@b aZ10a3@b*) (if (not (aZb7d@valid-bound-ids? aZ10a0@lhs*)) (aZd36@invalid-fmls-error aZ107d@e aZ10a0@lhs*) (let ((aZ10a9@lex* (map aZafd@gen-lexical aZ10a0@lhs*)) (aZ10aa@lab* (map aZb01@gen-label aZ10a0@lhs*)) (aZ10ab@rhs* (aZd9a@chi-expr* aZ10a1@rhs* aZ107e@r aZ107f@mr)) (aZ10ac@loop-lex (aZafd@gen-lexical aZ109f@loop)) (aZ10ad@loop-lab (aZb01@gen-label aZ109f@loop))) (let ((aZ10b3@loop-rib (aZb35@make-full-rib (list aZ109f@loop) (list aZ10ad@loop-lab))) (aZ10b4@rib (aZb35@make-full-rib aZ10a0@lhs* aZ10aa@lab*)) (aZ10b5@r (aZd0e@add-lexicals (cons aZ10ad@loop-lab aZ10aa@lab*) (cons aZ10ac@loop-lex aZ10a9@lex*) aZ107e@r))) (let ((aZ10b9@body (aZdb4@chi-internal (aZb61@add-subst aZ10b3@loop-rib (aZb61@add-subst aZ10b4@rib (cons aZ10a2@b aZ10a3@b*))) aZ10b5@r aZ107f@mr))) (aZade@aZa3c@build-named-let '#f aZ10ac@loop-lex aZ10a9@lex* aZ10ab@rhs* aZ10b9@body)))))) aZ109d@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ109b@t))))))))) (set! aZ281d@aZd12@let-transformer aZd12@let-transformer) (set! aZd14@letrec-transformer (lambda (aZ10bb@e aZ10bc@r aZ10bd@mr) (aZd10@letrec-helper aZ10bb@e aZ10bc@r aZ10bd@mr aZadc@aZa38@build-letrec))) (set! aZ281e@aZd14@letrec-transformer aZd14@letrec-transformer) (set! aZd16@letrec*-transformer (lambda (aZ10c1@e aZ10c2@r aZ10c3@mr) (aZd10@letrec-helper aZ10c1@e aZ10c2@r aZ10c3@mr aZadf@aZa3e@build-letrec*))) (set! aZ281f@aZd16@letrec*-transformer aZd16@letrec*-transformer) (set! aZd18@fluid-let-syntax-transformer (lambda (aZ10c7@e aZ10c8@r aZ10c9@mr) (let ((aZ10ce@lookup '#f)) (begin (set! aZ10ce@lookup (lambda (aZ10e1@x) (or (aZb8b@id->label aZ10e1@x) (aZe5c@syntax-violation '#f '"unbound identifier" aZ10c7@e aZ10e1@x)))) (let ((aZ10cf@t aZ10c7@e)) (let ((aZ10d1@ls/false (aZd7c@syntax-dispatch aZ10cf@t '(_ #(each (any any)) any . each-any)))) (if aZ10d1@ls/false (apply (lambda (aZ10d3@lhs* aZ10d4@rhs* aZ10d5@b aZ10d6@b*) (if (not (aZb7d@valid-bound-ids? aZ10d3@lhs*)) (aZd36@invalid-fmls-error aZ10c7@e aZ10d3@lhs*) (let ((aZ10db@lab* (map aZ10ce@lookup aZ10d3@lhs*)) (aZ10dc@rhs* (map (lambda (aZ10df@x) (aZbad@make-eval-transformer (aZdd6@expand-transformer aZ10df@x aZ10c9@mr))) aZ10d4@rhs*))) (aZdb4@chi-internal (cons aZ10d5@b aZ10d6@b*) (append (map cons aZ10db@lab* aZ10dc@rhs*) aZ10c8@r) (append (map cons aZ10db@lab* aZ10dc@rhs*) aZ10c9@mr))))) aZ10d1@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ10cf@t)))))))) (set! aZ2820@aZd18@fluid-let-syntax-transformer aZd18@fluid-let-syntax-transformer) (set! aZd1a@type-descriptor-transformer (lambda (aZ10e3@e aZ10e4@r aZ10e5@mr) (let ((aZ10e9@t aZ10e3@e)) (let ((aZ10eb@ls/false (aZd7c@syntax-dispatch aZ10e9@t '(_ any)))) (if (and aZ10eb@ls/false (apply (lambda (aZ10ed@id) (aZb75@id? aZ10ed@id)) aZ10eb@ls/false)) (apply (lambda (aZ10ef@id) (let ((aZ10f1@lab (aZb8b@id->label aZ10ef@id))) (let ((aZ10f3@b (aZb8d@label->binding aZ10f1@lab aZ10e4@r))) (let ((aZ10f5@type (aZb91@binding-type aZ10f3@b))) (begin (if (not aZ10f1@lab) (aZb95@raise-unbound-error aZ10ef@id) (void)) (if (not (and (eq? aZ10f5@type '$rtd) (not (list? (aZb93@binding-value aZ10f3@b))))) (aZe5c@syntax-violation '#f '"not a record type" aZ10e3@e) (void)) (list 'quote (aZb93@binding-value aZ10f3@b))))))) aZ10eb@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ10e9@t)))))) (set! aZ2821@aZd1a@type-descriptor-transformer aZd1a@type-descriptor-transformer) (set! aZd1c@record-type-descriptor-transformer (lambda (aZ10f7@e aZ10f8@r aZ10f9@mr) (let ((aZ10fd@t aZ10f7@e)) (let ((aZ10ff@ls/false (aZd7c@syntax-dispatch aZ10fd@t '(_ any)))) (if (and aZ10ff@ls/false (apply (lambda (aZ1101@id) (aZb75@id? aZ1101@id)) aZ10ff@ls/false)) (apply (lambda (aZ1103@id) (let ((aZ1105@lab (aZb8b@id->label aZ1103@id))) (let ((aZ1107@b (aZb8d@label->binding aZ1105@lab aZ10f8@r))) (let ((aZ1109@type (aZb91@binding-type aZ1107@b))) (begin (if (not aZ1105@lab) (aZb95@raise-unbound-error aZ1103@id) (void)) (if (not (and (eq? aZ1109@type '$rtd) (list? (aZb93@binding-value aZ1107@b)))) (aZe5c@syntax-violation '#f '"not a record type" aZ10f7@e) (void)) (aZd9e@chi-expr (car (aZb93@binding-value aZ1107@b)) aZ10f8@r aZ10f9@mr)))))) aZ10ff@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ10fd@t)))))) (set! aZ2822@aZd1c@record-type-descriptor-transformer aZd1c@record-type-descriptor-transformer) (set! aZd1e@record-constructor-descriptor-transformer (lambda (aZ110b@e aZ110c@r aZ110d@mr) (let ((aZ1111@t aZ110b@e)) (let ((aZ1113@ls/false (aZd7c@syntax-dispatch aZ1111@t '(_ any)))) (if (and aZ1113@ls/false (apply (lambda (aZ1115@id) (aZb75@id? aZ1115@id)) aZ1113@ls/false)) (apply (lambda (aZ1117@id) (let ((aZ1119@lab (aZb8b@id->label aZ1117@id))) (let ((aZ111b@b (aZb8d@label->binding aZ1119@lab aZ110c@r))) (let ((aZ111d@type (aZb91@binding-type aZ111b@b))) (begin (if (not aZ1119@lab) (aZb95@raise-unbound-error aZ1117@id) (void)) (if (not (and (eq? aZ111d@type '$rtd) (list? (aZb93@binding-value aZ111b@b)))) (aZe5c@syntax-violation '#f '"invalid type" aZ110b@e) (void)) (aZd9e@chi-expr (cadr (aZb93@binding-value aZ111b@b)) aZ110c@r aZ110d@mr)))))) aZ1113@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1111@t)))))) (set! aZ2823@aZd1e@record-constructor-descriptor-transformer aZd1e@record-constructor-descriptor-transformer) (set! aZd20@when-macro (lambda (aZ111f@e) (let ((aZ1121@t aZ111f@e)) (let ((aZ1123@ls/false (aZd7c@syntax-dispatch aZ1121@t '(_ any any . each-any)))) (if aZ1123@ls/false (apply (lambda (aZ1125@test aZ1126@e aZ1127@e*) (aZd32@bless (list 'if aZ1125@test (cons 'begin (cons aZ1126@e aZ1127@e*))))) aZ1123@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1121@t)))))) (set! aZ2824@aZd20@when-macro aZd20@when-macro) (set! aZd22@unless-macro (lambda (aZ112b@e) (let ((aZ112d@t aZ112b@e)) (let ((aZ112f@ls/false (aZd7c@syntax-dispatch aZ112d@t '(_ any any . each-any)))) (if aZ112f@ls/false (apply (lambda (aZ1131@test aZ1132@e aZ1133@e*) (aZd32@bless (list 'if (list 'not aZ1131@test) (cons 'begin (cons aZ1132@e aZ1133@e*))))) aZ112f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ112d@t)))))) (set! aZ2825@aZd22@unless-macro aZd22@unless-macro) (set! aZd24@if-transformer (lambda (aZ1137@e aZ1138@r aZ1139@mr) (let ((aZ113d@t aZ1137@e)) (let ((aZ113f@ls/false (aZd7c@syntax-dispatch aZ113d@t '(_ any any any)))) (if aZ113f@ls/false (apply (lambda (aZ1141@e0 aZ1142@e1 aZ1143@e2) (list 'if (aZd9e@chi-expr aZ1141@e0 aZ1138@r aZ1139@mr) (aZd9e@chi-expr aZ1142@e1 aZ1138@r aZ1139@mr) (aZd9e@chi-expr aZ1143@e2 aZ1138@r aZ1139@mr))) aZ113f@ls/false) (let ((aZ1147@t aZ113d@t)) (let ((aZ1149@ls/false (aZd7c@syntax-dispatch aZ1147@t '(_ any any)))) (if aZ1149@ls/false (apply (lambda (aZ114b@e0 aZ114c@e1) (list 'if (aZd9e@chi-expr aZ114b@e0 aZ1138@r aZ1139@mr) (aZd9e@chi-expr aZ114c@e1 aZ1138@r aZ1139@mr) (aZadb@aZa36@build-void))) aZ1149@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1147@t))))))))) (set! aZ2826@aZd24@if-transformer aZd24@if-transformer) (set! aZd26@and-transformer (lambda (aZ114f@e aZ1150@r aZ1151@mr) (let ((aZ1155@t aZ114f@e)) (let ((aZ1157@ls/false (aZd7c@syntax-dispatch aZ1155@t '(_ . each-any)))) (if aZ1157@ls/false (apply (lambda (aZ1159@e*) (cons 'and (aZd9a@chi-expr* aZ1159@e* aZ1150@r aZ1151@mr))) aZ1157@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1155@t)))))) (set! aZ2827@aZd26@and-transformer aZd26@and-transformer) (set! aZd28@or-transformer (lambda (aZ115b@e aZ115c@r aZ115d@mr) (let ((aZ1161@t aZ115b@e)) (let ((aZ1163@ls/false (aZd7c@syntax-dispatch aZ1161@t '(_ . each-any)))) (if aZ1163@ls/false (apply (lambda (aZ1165@e*) (cons 'or (aZd9a@chi-expr* aZ1165@e* aZ115c@r aZ115d@mr))) aZ1163@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1161@t)))))) (set! aZ2828@aZd28@or-transformer aZd28@or-transformer) (set! aZd2a@case-macro (lambda (aZ1167@e) (let ((aZ116a@build-last '#f) (aZ116c@build-one '#f)) (begin (set! aZ116a@build-last (lambda (aZ1191@cls) (let ((aZ1193@t aZ1191@cls)) (let ((aZ1195@ls/false (aZd7c@syntax-dispatch aZ1193@t '(#(scheme-id else) any . each-any)))) (if aZ1195@ls/false (apply (lambda (aZ1197@e aZ1198@e*) (cons 'begin (cons aZ1197@e aZ1198@e*))) aZ1195@ls/false) (let ((aZ119b@t aZ1193@t)) (let ((aZ119d@ls/false (aZd7c@syntax-dispatch aZ119b@t '_))) (if aZ119d@ls/false (apply (lambda () (aZ116c@build-one aZ1191@cls '(if #f #f))) aZ119d@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ119b@t))))))))) (set! aZ116c@build-one (lambda (aZ1183@cls aZ1184@k) (let ((aZ1187@t aZ1183@cls)) (let ((aZ1189@ls/false (aZd7c@syntax-dispatch aZ1187@t '(each-any any . each-any)))) (if aZ1189@ls/false (apply (lambda (aZ118b@d* aZ118c@e aZ118d@e*) (list 'if (list 'memv 't (list 'quote aZ118b@d*)) (cons 'begin (cons aZ118c@e aZ118d@e*)) aZ1184@k)) aZ1189@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1187@t)))))) (let ((aZ116d@t aZ1167@e)) (let ((aZ116f@ls/false (aZd7c@syntax-dispatch aZ116d@t '(_ any)))) (if aZ116f@ls/false (apply (lambda (aZ1171@expr) (aZd32@bless (cons 'let (cons (list (list 't aZ1171@expr)) '((if #f #f)))))) aZ116f@ls/false) (let ((aZ1173@t aZ116d@t)) (let ((aZ1175@ls/false (aZd7c@syntax-dispatch aZ1173@t '(_ any any . each-any)))) (if aZ1175@ls/false (apply (lambda (aZ1177@expr aZ1178@cls aZ1179@cls*) (aZd32@bless (list 'let (list (list 't aZ1177@expr)) (let aZ1181@f ((aZ117d@cls aZ1178@cls) (aZ117e@cls* aZ1179@cls*)) (if (null? aZ117e@cls*) (aZ116a@build-last aZ117d@cls) (aZ116c@build-one aZ117d@cls (aZ1181@f (car aZ117e@cls*) (cdr aZ117e@cls*)))))))) aZ1175@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1173@t))))))))))) (set! aZ2829@aZd2a@case-macro aZd2a@case-macro) (set! aZd2c@quote-transformer (lambda (aZ119f@e aZ11a0@r aZ11a1@mr) (let ((aZ11a5@t aZ119f@e)) (let ((aZ11a7@ls/false (aZd7c@syntax-dispatch aZ11a5@t '(_ any)))) (if aZ11a7@ls/false (apply (lambda (aZ11a9@datum) (list 'quote (aZb89@stx->datum aZ11a9@datum))) aZ11a7@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ11a5@t)))))) (set! aZ282a@aZd2c@quote-transformer aZd2c@quote-transformer) (set! aZd2e@case-lambda-transformer (lambda (aZ11ab@e aZ11ac@r aZ11ad@mr) (let ((aZ11b1@t aZ11ab@e)) (let ((aZ11b3@ls/false (aZd7c@syntax-dispatch aZ11b1@t '(_ . #(each (any any . each-any)))))) (if aZ11b3@ls/false (apply (lambda (aZ11b5@fmls* aZ11b6@b* aZ11b7@b**) (call-with-values (lambda () (aZda6@chi-lambda-clause* aZ11ab@e aZ11b5@fmls* (map cons aZ11b6@b* aZ11b7@b**) aZ11ac@r aZ11ad@mr)) (lambda (aZ11bf@aZ11bc aZ11c0@aZ11be) (let ((aZ11c3@body* aZ11c0@aZ11be) (aZ11c4@fmls* aZ11bf@aZ11bc)) (aZad9@aZa06@build-case-lambda '#f aZ11c4@fmls* aZ11c3@body*))))) aZ11b3@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ11b1@t)))))) (set! aZ282b@aZd2e@case-lambda-transformer aZd2e@case-lambda-transformer) (set! aZd30@lambda-transformer (lambda (aZ11c7@e aZ11c8@r aZ11c9@mr) (let ((aZ11cd@t aZ11c7@e)) (let ((aZ11cf@ls/false (aZd7c@syntax-dispatch aZ11cd@t '(_ any any . each-any)))) (if aZ11cf@ls/false (apply (lambda (aZ11d1@fmls aZ11d2@b aZ11d3@b*) (call-with-values (lambda () (aZda4@chi-lambda-clause aZ11c7@e aZ11d1@fmls (cons aZ11d2@b aZ11d3@b*) aZ11c8@r aZ11c9@mr)) (lambda (aZ11db@aZ11d8 aZ11dc@aZ11da) (let ((aZ11df@body aZ11dc@aZ11da) (aZ11e0@fmls aZ11db@aZ11d8)) (aZad8@aZa04@build-lambda '#f aZ11e0@fmls aZ11df@body))))) aZ11cf@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ11cd@t)))))) (set! aZ282c@aZd30@lambda-transformer aZd30@lambda-transformer) (set! aZd32@bless (lambda (aZ11e3@x) (aZb5d@mkstx (let aZ11e7@f ((aZ11e5@x aZ11e3@x)) (if (aZb41@stx? aZ11e5@x) aZ11e5@x (if (pair? aZ11e5@x) (cons (aZ11e7@f (car aZ11e5@x)) (aZ11e7@f (cdr aZ11e5@x))) (if (symbol? aZ11e5@x) (aZd04@scheme-stx aZ11e5@x) (if (vector? aZ11e5@x) (vector-map aZ11e7@f aZ11e5@x) aZ11e5@x))))) '() '() '()))) (set! aZ282d@aZd32@bless aZd32@bless) (set! aZd34@with-syntax-macro (lambda (aZ11e9@e) (let ((aZ11eb@t aZ11e9@e)) (let ((aZ11ed@ls/false (aZd7c@syntax-dispatch aZ11eb@t '(_ #(each (any any)) any . each-any)))) (if aZ11ed@ls/false (apply (lambda (aZ11ef@pat* aZ11f0@expr* aZ11f1@b aZ11f2@b*) (let ((aZ11f7@idn* (let aZ11fb@f ((aZ11f9@pat* aZ11ef@pat*)) (if (null? aZ11f9@pat*) '() (call-with-values (lambda () (aZd7a@convert-pattern (car aZ11f9@pat*) '())) (lambda (aZ1201@aZ11fe aZ1202@aZ1200) (let ((aZ1205@idn* aZ1202@aZ1200) (aZ1206@pat aZ1201@aZ11fe)) (append aZ1205@idn* (aZ11fb@f (cdr aZ11f9@pat*)))))))))) (begin (aZda2@verify-formals (map car aZ11f7@idn*) aZ11e9@e) (let ((aZ1209@t* (aZe4a@generate-temporaries aZ11f0@expr*))) (aZd32@bless (list 'let (map list aZ1209@t* aZ11f0@expr*) (let aZ120f@f ((aZ120b@pat* aZ11ef@pat*) (aZ120c@t* aZ1209@t*)) (if (null? aZ120b@pat*) (cons 'begin (cons '#f (cons aZ11f1@b aZ11f2@b*))) (list 'syntax-case (car aZ120c@t*) '() (list (car aZ120b@pat*) (aZ120f@f (cdr aZ120b@pat*) (cdr aZ120c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car aZ120b@pat*)) (car aZ120c@t*)))))))))))) aZ11ed@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ11eb@t)))))) (set! aZ282e@aZd34@with-syntax-macro aZd34@with-syntax-macro) (set! aZd36@invalid-fmls-error (lambda (aZ1211@stx aZ1212@fmls) (let ((aZ1215@t aZ1212@fmls)) (let ((aZ1217@ls/false (aZd7c@syntax-dispatch aZ1215@t '#(each+ any () any)))) (if aZ1217@ls/false (apply (lambda (aZ1219@id* aZ121a@last) (let aZ121f@f ((aZ121d@id* (if (aZb75@id? aZ121a@last) (cons aZ121a@last aZ1219@id*) (if (aZb6b@syntax-null? aZ121a@last) aZ1219@id* (aZe5c@syntax-violation '#f '"not an identifier" aZ1211@stx aZ121a@last))))) (if (null? aZ121d@id*) (values) (if (not (aZb75@id? (car aZ121d@id*))) (aZe5c@syntax-violation '#f '"not an identifier" aZ1211@stx (car aZ121d@id*)) (begin (aZ121f@f (cdr aZ121d@id*)) (if (aZb81@bound-id-member? (car aZ121d@id*) (cdr aZ121d@id*)) (aZe5c@syntax-violation '#f '"duplicate binding" aZ1211@stx (car aZ121d@id*)) (void))))))) aZ1217@ls/false) (let ((aZ1221@t aZ1215@t)) (let ((aZ1223@ls/false (aZd7c@syntax-dispatch aZ1221@t '_))) (if aZ1223@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"malformed binding form" aZ1211@stx aZ1212@fmls)) aZ1223@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1221@t))))))))) (set! aZ282f@aZd36@invalid-fmls-error aZd36@invalid-fmls-error) (set! aZd38@let-macro (lambda (aZ1225@stx) (let ((aZ1227@t aZ1225@stx)) (let ((aZ1229@ls/false (aZd7c@syntax-dispatch aZ1227@t '(_ #(each (any any)) any . each-any)))) (if aZ1229@ls/false (apply (lambda (aZ122b@lhs* aZ122c@rhs* aZ122d@b aZ122e@b*) (if (aZb7d@valid-bound-ids? aZ122b@lhs*) (aZd32@bless (cons (cons 'lambda (cons aZ122b@lhs* (cons aZ122d@b aZ122e@b*))) aZ122c@rhs*)) (aZd36@invalid-fmls-error aZ1225@stx aZ122b@lhs*))) aZ1229@ls/false) (let ((aZ1233@t aZ1227@t)) (let ((aZ1235@ls/false (aZd7c@syntax-dispatch aZ1233@t '(_ any #(each (any any)) any . each-any)))) (if (and aZ1235@ls/false (apply (lambda (aZ1237@f aZ1238@lhs* aZ1239@rhs* aZ123a@b aZ123b@b*) (aZb75@id? aZ1237@f)) aZ1235@ls/false)) (apply (lambda (aZ1241@f aZ1242@lhs* aZ1243@rhs* aZ1244@b aZ1245@b*) (if (aZb7d@valid-bound-ids? aZ1242@lhs*) (aZd32@bless (cons (list 'letrec (list (list aZ1241@f (cons 'lambda (cons aZ1242@lhs* (cons aZ1244@b aZ1245@b*))))) aZ1241@f) aZ1243@rhs*)) (aZd36@invalid-fmls-error aZ1225@stx aZ1242@lhs*))) aZ1235@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1233@t))))))))) (set! aZ2830@aZd38@let-macro aZd38@let-macro) (set! aZd3a@let-values-macro (lambda (aZ124b@stx) (let ((aZ124e@rename '#f) (aZ1250@rename* '#f)) (begin (set! aZ124e@rename (lambda (aZ12b3@x aZ12b4@old* aZ12b5@new*) (begin (if (not (aZb75@id? aZ12b3@x)) (aZe5c@syntax-violation '#f '"not an indentifier" aZ124b@stx aZ12b3@x) (void)) (if (aZb81@bound-id-member? aZ12b3@x aZ12b4@old*) (aZe5c@syntax-violation '#f '"duplicate binding" aZ124b@stx aZ12b3@x) (void)) (let ((aZ12b9@y (gensym (aZe62@syntax->datum aZ12b3@x)))) (values aZ12b9@y (cons aZ12b3@x aZ12b4@old*) (cons aZ12b9@y aZ12b5@new*)))))) (set! aZ1250@rename* (lambda (aZ12a1@x* aZ12a2@old* aZ12a3@new*) (if (null? aZ12a1@x*) (values '() aZ12a2@old* aZ12a3@new*) (call-with-values (lambda () (aZ124e@rename (car aZ12a1@x*) aZ12a2@old* aZ12a3@new*)) (lambda (aZ12a7@x aZ12a8@old* aZ12a9@new*) (call-with-values (lambda () (aZ1250@rename* (cdr aZ12a1@x*) aZ12a8@old* aZ12a9@new*)) (lambda (aZ12ad@x* aZ12ae@old* aZ12af@new*) (values (cons aZ12a7@x aZ12ad@x*) aZ12ae@old* aZ12af@new*)))))))) (let ((aZ1251@t aZ124b@stx)) (let ((aZ1253@ls/false (aZd7c@syntax-dispatch aZ1251@t '(_ () any . each-any)))) (if aZ1253@ls/false (apply (lambda (aZ1255@b aZ1256@b*) (cons* (aZd32@bless 'let) '() aZ1255@b aZ1256@b*)) aZ1253@ls/false) (let ((aZ1259@t aZ1251@t)) (let ((aZ125b@ls/false (aZd7c@syntax-dispatch aZ1259@t '(_ #(each (any any)) any . each-any)))) (if aZ125b@ls/false (apply (lambda (aZ125d@lhs* aZ125e@rhs* aZ125f@b aZ1260@b*) (aZd32@bless (let aZ126d@f ((aZ1265@lhs* aZ125d@lhs*) (aZ1266@rhs* aZ125e@rhs*) (aZ1267@old* '()) (aZ1268@new* '())) (if (null? aZ1265@lhs*) (cons 'let (cons (map list aZ1267@old* aZ1268@new*) (cons aZ125f@b aZ1260@b*))) (let ((aZ126f@t (car aZ1265@lhs*))) (let ((aZ1271@ls/false (aZd7c@syntax-dispatch aZ126f@t 'each-any))) (if aZ1271@ls/false (apply (lambda (aZ1273@x*) (call-with-values (lambda () (aZ1250@rename* aZ1273@x* aZ1267@old* aZ1268@new*)) (lambda (aZ127b@aZ1276 aZ127c@aZ1278 aZ127d@aZ127a) (let ((aZ1281@new* aZ127d@aZ127a) (aZ1282@old* aZ127c@aZ1278) (aZ1283@y* aZ127b@aZ1276)) (list 'call-with-values (list 'lambda '() (car aZ1266@rhs*)) (list 'lambda aZ1283@y* (aZ126d@f (cdr aZ1265@lhs*) (cdr aZ1266@rhs*) aZ1282@old* aZ1281@new*))))))) aZ1271@ls/false) (let ((aZ1287@t aZ126f@t)) (let ((aZ1289@ls/false (aZd7c@syntax-dispatch aZ1287@t '#(each+ any () any)))) (if aZ1289@ls/false (apply (lambda (aZ128b@x* aZ128c@x) (call-with-values (lambda () (aZ124e@rename aZ128c@x aZ1267@old* aZ1268@new*)) (lambda (aZ128f@y aZ1290@old* aZ1291@new*) (call-with-values (lambda () (aZ1250@rename* aZ128b@x* aZ1290@old* aZ1291@new*)) (lambda (aZ1295@y* aZ1296@old* aZ1297@new*) (list 'call-with-values (list 'lambda '() (car aZ1266@rhs*)) (list 'lambda (append aZ1295@y* aZ128f@y) (aZ126d@f (cdr aZ1265@lhs*) (cdr aZ1266@rhs*) aZ1296@old* aZ1297@new*)))))))) aZ1289@ls/false) (let ((aZ129b@t aZ1287@t)) (let ((aZ129d@ls/false (aZd7c@syntax-dispatch aZ129b@t 'any))) (if aZ129d@ls/false (apply (lambda (aZ129f@others) (aZe5c@syntax-violation '#f '"malformed bindings" aZ124b@stx aZ129f@others)) aZ129d@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ129b@t)))))))))))))) aZ125b@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1259@t))))))))))) (set! aZ2831@aZd3a@let-values-macro aZd3a@let-values-macro) (set! aZd3c@let*-values-macro (lambda (aZ12bb@stx) (let ((aZ12be@check '#f)) (begin (set! aZ12be@check (lambda (aZ12ed@x*) (if (not (null? aZ12ed@x*)) (let ((aZ12ef@x (car aZ12ed@x*))) (begin (if (not (aZb75@id? aZ12ef@x)) (aZe5c@syntax-violation '#f '"not an identifier" aZ12bb@stx aZ12ef@x) (void)) (aZ12be@check (cdr aZ12ed@x*)) (if (aZb81@bound-id-member? aZ12ef@x (cdr aZ12ed@x*)) (aZe5c@syntax-violation '#f '"duplicate identifier" aZ12bb@stx aZ12ef@x) (void)))) (void)))) (let ((aZ12bf@t aZ12bb@stx)) (let ((aZ12c1@ls/false (aZd7c@syntax-dispatch aZ12bf@t '(_ () any . each-any)))) (if aZ12c1@ls/false (apply (lambda (aZ12c3@b aZ12c4@b*) (cons* (aZd32@bless 'let) '() aZ12c3@b aZ12c4@b*)) aZ12c1@ls/false) (let ((aZ12c7@t aZ12bf@t)) (let ((aZ12c9@ls/false (aZd7c@syntax-dispatch aZ12c7@t '(_ #(each (any any)) any . each-any)))) (if aZ12c9@ls/false (apply (lambda (aZ12cb@lhs* aZ12cc@rhs* aZ12cd@b aZ12ce@b*) (aZd32@bless (let aZ12d7@f ((aZ12d3@lhs* aZ12cb@lhs*) (aZ12d4@rhs* aZ12cc@rhs*)) (if (null? aZ12d3@lhs*) (cons 'begin (cons aZ12cd@b aZ12ce@b*)) (let ((aZ12d9@t (car aZ12d3@lhs*))) (let ((aZ12db@ls/false (aZd7c@syntax-dispatch aZ12d9@t 'each-any))) (if aZ12db@ls/false (apply (lambda (aZ12dd@x*) (begin (aZ12be@check aZ12dd@x*) (list 'call-with-values (list 'lambda '() (car aZ12d4@rhs*)) (list 'lambda aZ12dd@x* (aZ12d7@f (cdr aZ12d3@lhs*) (cdr aZ12d4@rhs*)))))) aZ12db@ls/false) (let ((aZ12df@t aZ12d9@t)) (let ((aZ12e1@ls/false (aZd7c@syntax-dispatch aZ12df@t '#(each+ any () any)))) (if aZ12e1@ls/false (apply (lambda (aZ12e3@x* aZ12e4@x) (begin (aZ12be@check (cons aZ12e4@x aZ12e3@x*)) (list 'call-with-values (list 'lambda '() (car aZ12d4@rhs*)) (list 'lambda (append aZ12e3@x* aZ12e4@x) (aZ12d7@f (cdr aZ12d3@lhs*) (cdr aZ12d4@rhs*)))))) aZ12e1@ls/false) (let ((aZ12e7@t aZ12df@t)) (let ((aZ12e9@ls/false (aZd7c@syntax-dispatch aZ12e7@t 'any))) (if aZ12e9@ls/false (apply (lambda (aZ12eb@others) (aZe5c@syntax-violation '#f '"malformed bindings" aZ12bb@stx aZ12eb@others)) aZ12e9@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ12e7@t)))))))))))))) aZ12c9@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ12c7@t))))))))))) (set! aZ2832@aZd3c@let*-values-macro aZd3c@let*-values-macro) (set! aZd3e@trace-lambda-macro (lambda (aZ12f1@stx) (let ((aZ12f3@t aZ12f1@stx)) (let ((aZ12f5@ls/false (aZd7c@syntax-dispatch aZ12f3@t '(_ any each-any any . each-any)))) (if aZ12f5@ls/false (apply (lambda (aZ12f7@who aZ12f8@fmls aZ12f9@b aZ12fa@b*) (if (aZb7d@valid-bound-ids? aZ12f8@fmls) (aZd32@bless (list 'make-traced-procedure (list 'quote aZ12f7@who) (cons 'lambda (cons aZ12f8@fmls (cons aZ12f9@b aZ12fa@b*))))) (aZd36@invalid-fmls-error aZ12f1@stx aZ12f8@fmls))) aZ12f5@ls/false) (let ((aZ12ff@t aZ12f3@t)) (let ((aZ1301@ls/false (aZd7c@syntax-dispatch aZ12ff@t '(_ any #(each+ any () any) any . each-any)))) (if aZ1301@ls/false (apply (lambda (aZ1303@who aZ1304@fmls aZ1305@last aZ1306@b aZ1307@b*) (if (aZb7d@valid-bound-ids? (cons aZ1305@last aZ1304@fmls)) (aZd32@bless (list 'make-traced-procedure (list 'quote aZ1303@who) (cons 'lambda (cons (append aZ1304@fmls aZ1305@last) (cons aZ1306@b aZ1307@b*))))) (aZd36@invalid-fmls-error aZ12f1@stx (append aZ1304@fmls aZ1305@last)))) aZ1301@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ12ff@t))))))))) (set! aZ2833@aZd3e@trace-lambda-macro aZd3e@trace-lambda-macro) (set! aZd40@trace-define-macro (lambda (aZ130d@stx) (let ((aZ130f@t aZ130d@stx)) (let ((aZ1311@ls/false (aZd7c@syntax-dispatch aZ130f@t '(_ (any . each-any) any . each-any)))) (if aZ1311@ls/false (apply (lambda (aZ1313@who aZ1314@fmls aZ1315@b aZ1316@b*) (if (aZb7d@valid-bound-ids? aZ1314@fmls) (aZd32@bless (list 'define aZ1313@who (list 'make-traced-procedure (list 'quote aZ1313@who) (cons 'lambda (cons aZ1314@fmls (cons aZ1315@b aZ1316@b*)))))) (aZd36@invalid-fmls-error aZ130d@stx aZ1314@fmls))) aZ1311@ls/false) (let ((aZ131b@t aZ130f@t)) (let ((aZ131d@ls/false (aZd7c@syntax-dispatch aZ131b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if aZ131d@ls/false (apply (lambda (aZ131f@who aZ1320@fmls aZ1321@last aZ1322@b aZ1323@b*) (if (aZb7d@valid-bound-ids? (cons aZ1321@last aZ1320@fmls)) (aZd32@bless (list 'define aZ131f@who (list 'make-traced-procedure (list 'quote aZ131f@who) (cons 'lambda (cons (append aZ1320@fmls aZ1321@last) (cons aZ1322@b aZ1323@b*)))))) (aZd36@invalid-fmls-error aZ130d@stx (append aZ1320@fmls aZ1321@last)))) aZ131d@ls/false) (let ((aZ1329@t aZ131b@t)) (let ((aZ132b@ls/false (aZd7c@syntax-dispatch aZ1329@t '(_ any any)))) (if aZ132b@ls/false (apply (lambda (aZ132d@who aZ132e@expr) (if (aZb75@id? aZ132d@who) (aZd32@bless (list 'define aZ132d@who (list 'let (list (list 'v aZ132e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote aZ132d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (aZe5c@syntax-violation '#f '"invalid name" aZ130d@stx))) aZ132b@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1329@t)))))))))))) (set! aZ2834@aZd40@trace-define-macro aZd40@trace-define-macro) (set! aZd42@trace-define-syntax-macro (lambda (aZ1331@stx) (let ((aZ1333@t aZ1331@stx)) (let ((aZ1335@ls/false (aZd7c@syntax-dispatch aZ1333@t '(_ any any)))) (if aZ1335@ls/false (apply (lambda (aZ1337@who aZ1338@expr) (if (aZb75@id? aZ1337@who) (aZd32@bless (list 'define-syntax aZ1337@who (list 'make-traced-macro (list 'quote aZ1337@who) aZ1338@expr))) (aZe5c@syntax-violation '#f '"invalid name" aZ1331@stx))) aZ1335@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1333@t)))))) (set! aZ2835@aZd42@trace-define-syntax-macro aZd42@trace-define-syntax-macro) (set! aZd44@trace-let/rec-syntax (lambda (aZ133b@who) (lambda (aZ133d@stx) (let ((aZ133f@t aZ133d@stx)) (let ((aZ1341@ls/false (aZd7c@syntax-dispatch aZ133f@t '(_ #(each (any any)) any . each-any)))) (if aZ1341@ls/false (apply (lambda (aZ1343@lhs* aZ1344@rhs* aZ1345@b aZ1346@b*) (if (aZb7d@valid-bound-ids? aZ1343@lhs*) (let ((aZ134b@rhs* (map (lambda (aZ134d@lhs aZ134e@rhs) (list 'make-traced-macro (list 'quote aZ134d@lhs) aZ134e@rhs)) aZ1343@lhs* aZ1344@rhs*))) (aZd32@bless (cons aZ133b@who (cons (map list aZ1343@lhs* aZ134b@rhs*) (cons aZ1345@b aZ1346@b*))))) (aZd36@invalid-fmls-error aZ133d@stx aZ1343@lhs*))) aZ1341@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ133f@t))))))) (set! aZ2836@aZd44@trace-let/rec-syntax aZd44@trace-let/rec-syntax) (set! aZd46@trace-let-syntax-macro (aZd44@trace-let/rec-syntax 'let-syntax)) (set! aZ2837@aZd46@trace-let-syntax-macro aZd46@trace-let-syntax-macro) (set! aZd48@trace-letrec-syntax-macro (aZd44@trace-let/rec-syntax 'letrec-syntax)) (set! aZ2838@aZd48@trace-letrec-syntax-macro aZd48@trace-letrec-syntax-macro) (set! aZd4a@guard-macro (lambda (aZ1351@x) (let ((aZ1354@gen-clauses '#f)) (begin (set! aZ1354@gen-clauses (lambda (aZ136b@con aZ136c@outerk aZ136d@clause*) (let ((aZ1372@f '#f) (aZ1374@f* '#f)) (begin (set! aZ1372@f (lambda (aZ13ab@x aZ13ac@k) (let ((aZ13af@t aZ13ab@x)) (let ((aZ13b1@ls/false (aZd7c@syntax-dispatch aZ13af@t '(any #(scheme-id =>) any)))) (if aZ13b1@ls/false (apply (lambda (aZ13b3@e aZ13b4@p) (let ((aZ13b7@t (gensym))) (list 'let (list (list aZ13b7@t aZ13b3@e)) (list 'if aZ13b7@t (list aZ13b4@p aZ13b7@t) aZ13ac@k)))) aZ13b1@ls/false) (let ((aZ13b9@t aZ13af@t)) (let ((aZ13bb@ls/false (aZd7c@syntax-dispatch aZ13b9@t '(any)))) (if aZ13bb@ls/false (apply (lambda (aZ13bd@e) (let ((aZ13bf@t (gensym))) (list 'let (list (list aZ13bf@t aZ13bd@e)) (list 'if aZ13bf@t aZ13bf@t aZ13ac@k)))) aZ13bb@ls/false) (let ((aZ13c1@t aZ13b9@t)) (let ((aZ13c3@ls/false (aZd7c@syntax-dispatch aZ13c1@t '(any any . each-any)))) (if aZ13c3@ls/false (apply (lambda (aZ13c5@e aZ13c6@v aZ13c7@v*) (list 'if aZ13c5@e (cons 'begin (cons aZ13c6@v aZ13c7@v*)) aZ13ac@k)) aZ13c3@ls/false) (let ((aZ13cb@t aZ13c1@t)) (let ((aZ13cd@ls/false (aZd7c@syntax-dispatch aZ13cb@t '_))) (if aZ13cd@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid guard clause" aZ13ab@x)) aZ13cd@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ13cb@t))))))))))))))) (set! aZ1374@f* (lambda (aZ1381@x*) (let ((aZ1383@t aZ1381@x*)) (let ((aZ1385@ls/false (aZd7c@syntax-dispatch aZ1383@t '()))) (if aZ1385@ls/false (apply (lambda () (let ((aZ1387@g (gensym))) (values (list aZ1387@g (list 'lambda '() (list 'raise-continuable aZ136b@con))) aZ1387@g))) aZ1385@ls/false) (let ((aZ1389@t aZ1383@t)) (let ((aZ138b@ls/false (aZd7c@syntax-dispatch aZ1389@t '((#(scheme-id else) any . each-any))))) (if aZ138b@ls/false (apply (lambda (aZ138d@e aZ138e@e*) (values (cons 'begin (cons aZ138d@e aZ138e@e*)) '#f)) aZ138b@ls/false) (let ((aZ1391@t aZ1389@t)) (let ((aZ1393@ls/false (aZd7c@syntax-dispatch aZ1391@t '(any . any)))) (if aZ1393@ls/false (apply (lambda (aZ1395@cls aZ1396@cls*) (call-with-values (lambda () (aZ1374@f* aZ1396@cls*)) (lambda (aZ139d@aZ139a aZ139e@aZ139c) (let ((aZ13a1@g aZ139e@aZ139c) (aZ13a2@e aZ139d@aZ139a)) (values (aZ1372@f aZ1395@cls aZ13a2@e) aZ13a1@g))))) aZ1393@ls/false) (let ((aZ13a5@t aZ1391@t)) (let ((aZ13a7@ls/false (aZd7c@syntax-dispatch aZ13a5@t 'any))) (if aZ13a7@ls/false (apply (lambda (aZ13a9@others) (aZe5c@syntax-violation '#f '"invalid guard clause" aZ13a9@others)) aZ13a7@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ13a5@t))))))))))))))) (call-with-values (lambda () (aZ1374@f* aZ136d@clause*)) (lambda (aZ1379@aZ1376 aZ137a@aZ1378) (let ((aZ137d@raisek aZ137a@aZ1378) (aZ137e@code aZ1379@aZ1376)) (if aZ137d@raisek (list (list 'call/cc (list 'lambda (list aZ137d@raisek) (list aZ136c@outerk (list 'lambda '() aZ137e@code))))) (list aZ136c@outerk (list 'lambda '() aZ137e@code)))))))))) (let ((aZ1355@t aZ1351@x)) (let ((aZ1357@ls/false (aZd7c@syntax-dispatch aZ1355@t '(_ (any . each-any) any . each-any)))) (if (and aZ1357@ls/false (apply (lambda (aZ1359@con aZ135a@clause* aZ135b@b aZ135c@b*) (aZb75@id? aZ1359@con)) aZ1357@ls/false)) (apply (lambda (aZ1361@con aZ1362@clause* aZ1363@b aZ1364@b*) (let ((aZ1369@outerk (gensym))) (aZd32@bless (list (list 'call/cc (list 'lambda (list aZ1369@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list aZ1361@con) (aZ1354@gen-clauses aZ1361@con aZ1369@outerk aZ1362@clause*)) (cons 'lambda (cons '() (cons aZ1363@b aZ1364@b*))))))))))) aZ1357@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1355@t)))))))) (set! aZ2839@aZd4a@guard-macro aZd4a@guard-macro) (set! aZd4c@define-enumeration-macro (lambda (aZ13cf@stx) (let ((aZ13d2@set? '#f) (aZ13d4@remove-dups '#f)) (begin (set! aZ13d2@set? (lambda (aZ13eb@x) (or (null? aZ13eb@x) (and (not (memq (car aZ13eb@x) (cdr aZ13eb@x))) (aZ13d2@set? (cdr aZ13eb@x)))))) (set! aZ13d4@remove-dups (lambda (aZ13e9@ls) (if (null? aZ13e9@ls) '() (cons (car aZ13e9@ls) (aZ13d4@remove-dups (remq (car aZ13e9@ls) (cdr aZ13e9@ls))))))) (let ((aZ13d5@t aZ13cf@stx)) (let ((aZ13d7@ls/false (aZd7c@syntax-dispatch aZ13d5@t '(_ any each-any any)))) (if (and aZ13d7@ls/false (apply (lambda (aZ13d9@name aZ13da@id* aZ13db@maker) (and (aZb75@id? aZ13d9@name) (aZb75@id? aZ13db@maker) (for-all aZb75@id? aZ13da@id*))) aZ13d7@ls/false)) (apply (lambda (aZ13df@name aZ13e0@id* aZ13e1@maker) (let ((aZ13e5@name* (aZ13d4@remove-dups (aZe62@syntax->datum aZ13e0@id*))) (aZ13e6@mk (gensym))) (aZd32@bless (list 'begin (list 'define aZ13e6@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote aZ13e5@name*)))) (list 'define-syntax aZ13df@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote aZ13e5@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote aZ13df@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax aZ13e1@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote aZ13e1@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote aZ13e5@name*)) (cons 'syntax-violation (cons (list 'quote aZ13e1@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons aZ13e6@mk '('(n* ...))))))))))))) aZ13d7@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ13d5@t)))))))) (set! aZ283a@aZd4c@define-enumeration-macro aZd4c@define-enumeration-macro) (set! aZd4e@time-macro (lambda (aZ13ed@stx) (let ((aZ13ef@t aZ13ed@stx)) (let ((aZ13f1@ls/false (aZd7c@syntax-dispatch aZ13ef@t '(_ any)))) (if aZ13f1@ls/false (apply (lambda (aZ13f3@expr) (aZd32@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() aZ13f3@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) aZ13f1@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ13ef@t)))))) (set! aZ283b@aZd4e@time-macro aZd4e@time-macro) (set! aZd50@delay-macro (lambda (aZ13f5@stx) (let ((aZ13f7@t aZ13f5@stx)) (let ((aZ13f9@ls/false (aZd7c@syntax-dispatch aZ13f7@t '(_ any)))) (if aZ13f9@ls/false (apply (lambda (aZ13fb@expr) (aZd32@bless (list 'make-promise (list 'lambda '() aZ13fb@expr)))) aZ13f9@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ13f7@t)))))) (set! aZ283c@aZd50@delay-macro aZd50@delay-macro) (set! aZd52@assert-macro (lambda (aZ13fd@stx) (let ((aZ13ff@t aZ13fd@stx)) (let ((aZ1401@ls/false (aZd7c@syntax-dispatch aZ13ff@t '(_ any)))) (if aZ1401@ls/false (apply (lambda (aZ1403@expr) (let ((aZ1405@pos (or (aZe54@expression-position aZ13fd@stx) (aZe54@expression-position aZ1403@expr)))) (aZd32@bless (list 'let (list (list 'x aZ1403@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote aZ1403@expr) (list 'quote aZ1405@pos))))))) aZ1401@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ13ff@t)))))) (set! aZ283d@aZd52@assert-macro aZd52@assert-macro) (set! aZd54@endianness-macro (lambda (aZ1407@stx) (let ((aZ1409@t aZ1407@stx)) (let ((aZ140b@ls/false (aZd7c@syntax-dispatch aZ1409@t '(_ any)))) (if aZ140b@ls/false (apply (lambda (aZ140d@e) (let ((aZ140f@t (aZe62@syntax->datum aZ140d@e))) (if (memv aZ140f@t '(little)) (aZd32@bless ''little) (if (memv aZ140f@t '(big)) (aZd32@bless ''big) (aZe5c@syntax-violation '#f '"endianness must be big or little" aZ1407@stx))))) aZ140b@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1409@t)))))) (set! aZ283e@aZd54@endianness-macro aZd54@endianness-macro) (set! aZd56@identifier-syntax-macro (lambda (aZ1411@stx) (let ((aZ1413@t aZ1411@stx)) (let ((aZ1415@ls/false (aZd7c@syntax-dispatch aZ1413@t '(_ any)))) (if aZ1415@ls/false (apply (lambda (aZ1417@expr) (aZd32@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax aZ1417@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax aZ1417@expr) '((syntax (e* ...)))))))))) aZ1415@ls/false) (let ((aZ1419@t aZ1413@t)) (let ((aZ141b@ls/false (aZd7c@syntax-dispatch aZ1419@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and aZ141b@ls/false (apply (lambda (aZ141d@id1 aZ141e@expr1 aZ141f@id2 aZ1420@expr2 aZ1421@expr3) (and (aZb75@id? aZ141d@id1) (aZb75@id? aZ141f@id2) (aZb75@id? aZ1420@expr2))) aZ141b@ls/false)) (apply (lambda (aZ1427@id1 aZ1428@expr1 aZ1429@id2 aZ142a@expr2 aZ142b@expr3) (aZd32@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax aZ1428@expr1)) (list (list 'set! 'id aZ142a@expr2) (list 'syntax aZ142b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons aZ1428@expr1 '(e* ...))))))))) aZ141b@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1419@t))))))))) (set! aZ283f@aZd56@identifier-syntax-macro aZd56@identifier-syntax-macro) (set! aZd58@do-macro (lambda (aZ1431@stx) (let ((aZ1434@bind '#f)) (begin (set! aZ1434@bind (lambda (aZ144b@x) (let ((aZ144d@t aZ144b@x)) (let ((aZ144f@ls/false (aZd7c@syntax-dispatch aZ144d@t '(any any)))) (if aZ144f@ls/false (apply (lambda (aZ1451@x aZ1452@init) (list aZ1451@x aZ1452@init aZ1451@x)) aZ144f@ls/false) (let ((aZ1455@t aZ144d@t)) (let ((aZ1457@ls/false (aZd7c@syntax-dispatch aZ1455@t '(any any any)))) (if aZ1457@ls/false (apply (lambda (aZ1459@x aZ145a@init aZ145b@step) (list aZ1459@x aZ145a@init aZ145b@step)) aZ1457@ls/false) (let ((aZ145f@t aZ1455@t)) (let ((aZ1461@ls/false (aZd7c@syntax-dispatch aZ145f@t '_))) (if aZ1461@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid binding" aZ1431@stx)) aZ1461@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ145f@t)))))))))))) (let ((aZ1435@t aZ1431@stx)) (let ((aZ1437@ls/false (aZd7c@syntax-dispatch aZ1435@t '(_ each-any (any . each-any) . each-any)))) (if aZ1437@ls/false (apply (lambda (aZ1439@binding* aZ143a@test aZ143b@expr* aZ143c@command*) (let ((aZ1441@t (map aZ1434@bind aZ1439@binding*))) (let ((aZ1443@ls/false (aZd7c@syntax-dispatch aZ1441@t '#(each (any any any))))) (if aZ1443@ls/false (apply (lambda (aZ1445@x* aZ1446@init* aZ1447@step*) (if (aZb7d@valid-bound-ids? aZ1445@x*) (aZd32@bless (list 'letrec (list (list 'loop (list 'lambda aZ1445@x* (list 'if aZ143a@test (cons 'begin (cons '(if #f #f) aZ143b@expr*)) (cons 'begin (append aZ143c@command* (list (cons 'loop aZ1447@step*)))))))) (cons 'loop aZ1446@init*))) (aZe5c@syntax-violation '#f '"invalid bindings" aZ1431@stx))) aZ1443@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1441@t))))) aZ1437@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1435@t)))))))) (set! aZ2840@aZd58@do-macro aZd58@do-macro) (set! aZd5a@let*-macro (lambda (aZ1463@stx) (let ((aZ1465@t aZ1463@stx)) (let ((aZ1467@ls/false (aZd7c@syntax-dispatch aZ1465@t '(_ #(each (any any)) any . each-any)))) (if (and aZ1467@ls/false (apply (lambda (aZ1469@lhs* aZ146a@rhs* aZ146b@b aZ146c@b*) (for-all aZb75@id? aZ1469@lhs*)) aZ1467@ls/false)) (apply (lambda (aZ1471@lhs* aZ1472@rhs* aZ1473@b aZ1474@b*) (aZd32@bless (let aZ147b@f ((aZ1479@x* (map list aZ1471@lhs* aZ1472@rhs*))) (if (null? aZ1479@x*) (cons 'let (cons '() (cons aZ1473@b aZ1474@b*))) (list 'let (list (car aZ1479@x*)) (aZ147b@f (cdr aZ1479@x*))))))) aZ1467@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1465@t)))))) (set! aZ2841@aZd5a@let*-macro aZd5a@let*-macro) (set! aZd5c@or-macro (lambda (aZ147d@stx) (let ((aZ147f@t aZ147d@stx)) (let ((aZ1481@ls/false (aZd7c@syntax-dispatch aZ147f@t '(_)))) (if aZ1481@ls/false (apply (lambda () '#f) aZ1481@ls/false) (let ((aZ1483@t aZ147f@t)) (let ((aZ1485@ls/false (aZd7c@syntax-dispatch aZ1483@t '(_ any . each-any)))) (if aZ1485@ls/false (apply (lambda (aZ1487@e aZ1488@e*) (aZd32@bless (let aZ148f@f ((aZ148b@e aZ1487@e) (aZ148c@e* aZ1488@e*)) (if (null? aZ148c@e*) (list 'begin '#f aZ148b@e) (list 'let (list (list 't aZ148b@e)) (list 'if 't 't (aZ148f@f (car aZ148c@e*) (cdr aZ148c@e*)))))))) aZ1485@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1483@t))))))))) (set! aZ2842@aZd5c@or-macro aZd5c@or-macro) (set! aZd5e@and-macro (lambda (aZ1491@stx) (let ((aZ1493@t aZ1491@stx)) (let ((aZ1495@ls/false (aZd7c@syntax-dispatch aZ1493@t '(_)))) (if aZ1495@ls/false (apply (lambda () '#t) aZ1495@ls/false) (let ((aZ1497@t aZ1493@t)) (let ((aZ1499@ls/false (aZd7c@syntax-dispatch aZ1497@t '(_ any . each-any)))) (if aZ1499@ls/false (apply (lambda (aZ149b@e aZ149c@e*) (aZd32@bless (let aZ14a3@f ((aZ149f@e aZ149b@e) (aZ14a0@e* aZ149c@e*)) (if (null? aZ14a0@e*) (list 'begin '#f aZ149f@e) (cons 'if (cons aZ149f@e (cons (aZ14a3@f (car aZ14a0@e*) (cdr aZ14a0@e*)) '(#f)))))))) aZ1499@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1497@t))))))))) (set! aZ2843@aZd5e@and-macro aZd5e@and-macro) (set! aZd60@cond-macro (lambda (aZ14a5@stx) (let ((aZ14a7@t aZ14a5@stx)) (let ((aZ14a9@ls/false (aZd7c@syntax-dispatch aZ14a7@t '(_ any . each-any)))) (if aZ14a9@ls/false (apply (lambda (aZ14ab@cls aZ14ac@cls*) (aZd32@bless (let aZ14b3@f ((aZ14af@cls aZ14ab@cls) (aZ14b0@cls* aZ14ac@cls*)) (if (null? aZ14b0@cls*) (let ((aZ14b5@t aZ14af@cls)) (let ((aZ14b7@ls/false (aZd7c@syntax-dispatch aZ14b5@t '(#(scheme-id else) any . each-any)))) (if aZ14b7@ls/false (apply (lambda (aZ14b9@e aZ14ba@e*) (cons 'begin (cons aZ14b9@e aZ14ba@e*))) aZ14b7@ls/false) (let ((aZ14bd@t aZ14b5@t)) (let ((aZ14bf@ls/false (aZd7c@syntax-dispatch aZ14bd@t '(any #(scheme-id =>) any)))) (if aZ14bf@ls/false (apply (lambda (aZ14c1@e aZ14c2@p) (list 'let (list (list 't aZ14c1@e)) (list 'if 't (cons aZ14c2@p '(t))))) aZ14bf@ls/false) (let ((aZ14c5@t aZ14bd@t)) (let ((aZ14c7@ls/false (aZd7c@syntax-dispatch aZ14c5@t '(any)))) (if aZ14c7@ls/false (apply (lambda (aZ14c9@e) (cons 'or (cons aZ14c9@e '((if #f #f))))) aZ14c7@ls/false) (let ((aZ14cb@t aZ14c5@t)) (let ((aZ14cd@ls/false (aZd7c@syntax-dispatch aZ14cb@t '(any . each-any)))) (if aZ14cd@ls/false (apply (lambda (aZ14cf@e aZ14d0@e*) (list 'if aZ14cf@e (cons 'begin aZ14d0@e*))) aZ14cd@ls/false) (let ((aZ14d3@t aZ14cb@t)) (let ((aZ14d5@ls/false (aZd7c@syntax-dispatch aZ14d3@t '_))) (if aZ14d5@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid last clause" aZ14a5@stx)) aZ14d5@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ14d3@t)))))))))))))))) (let ((aZ14d7@t aZ14af@cls)) (let ((aZ14d9@ls/false (aZd7c@syntax-dispatch aZ14d7@t '(#(scheme-id else) any . each-any)))) (if aZ14d9@ls/false (apply (lambda (aZ14db@e aZ14dc@e*) (aZe5c@syntax-violation '#f '"incorrect position of keyword else" aZ14a5@stx)) aZ14d9@ls/false) (let ((aZ14df@t aZ14d7@t)) (let ((aZ14e1@ls/false (aZd7c@syntax-dispatch aZ14df@t '(any #(scheme-id =>) any)))) (if aZ14e1@ls/false (apply (lambda (aZ14e3@e aZ14e4@p) (list 'let (list (list 't aZ14e3@e)) (list 'if 't (cons aZ14e4@p '(t)) (aZ14b3@f (car aZ14b0@cls*) (cdr aZ14b0@cls*))))) aZ14e1@ls/false) (let ((aZ14e7@t aZ14df@t)) (let ((aZ14e9@ls/false (aZd7c@syntax-dispatch aZ14e7@t '(any)))) (if aZ14e9@ls/false (apply (lambda (aZ14eb@e) (list 'or aZ14eb@e (aZ14b3@f (car aZ14b0@cls*) (cdr aZ14b0@cls*)))) aZ14e9@ls/false) (let ((aZ14ed@t aZ14e7@t)) (let ((aZ14ef@ls/false (aZd7c@syntax-dispatch aZ14ed@t '(any . each-any)))) (if aZ14ef@ls/false (apply (lambda (aZ14f1@e aZ14f2@e*) (list 'if aZ14f1@e (cons 'begin aZ14f2@e*) (aZ14b3@f (car aZ14b0@cls*) (cdr aZ14b0@cls*)))) aZ14ef@ls/false) (let ((aZ14f5@t aZ14ed@t)) (let ((aZ14f7@ls/false (aZd7c@syntax-dispatch aZ14f5@t '_))) (if aZ14f7@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid last clause" aZ14a5@stx)) aZ14f7@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ14f5@t)))))))))))))))))))) aZ14a9@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ14a7@t)))))) (set! aZ2844@aZd60@cond-macro aZd60@cond-macro) (set! aZd62@do-include (lambda (aZ14f9@stx aZ14fa@id aZ14fb@filename) (let ((aZ14ff@filename (aZb89@stx->datum aZ14fb@filename))) (begin (if (not (and (string? aZ14ff@filename) (aZb75@id? aZ14fa@id))) (aZe5c@syntax-violation '#f '"invalid syntax" aZ14f9@stx) (void)) (cons (aZd32@bless 'begin) (with-input-from-file aZ14ff@filename (lambda () (let aZ1503@f ((aZ1501@ls '())) (let ((aZ1505@x (aZ6b1@aZ581@read-annotated))) (if (eof-object? aZ1505@x) (reverse aZ1501@ls) (aZ1503@f (cons (aZb55@datum->stx aZ14fa@id aZ1505@x) aZ1501@ls)))))))))))) (set! aZ2845@aZd62@do-include aZd62@do-include) (set! aZd64@include-macro (lambda (aZ1507@e) (let ((aZ1509@t aZ1507@e)) (let ((aZ150b@ls/false (aZd7c@syntax-dispatch aZ1509@t '(any any)))) (if aZ150b@ls/false (apply (lambda (aZ150d@id aZ150e@filename) (aZd62@do-include aZ1507@e aZ150d@id aZ150e@filename)) aZ150b@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1509@t)))))) (set! aZ2846@aZd64@include-macro aZd64@include-macro) (set! aZd66@include-into-macro (lambda (aZ1511@e) (let ((aZ1513@t aZ1511@e)) (let ((aZ1515@ls/false (aZd7c@syntax-dispatch aZ1513@t '(_ any any)))) (if aZ1515@ls/false (apply (lambda (aZ1517@id aZ1518@filename) (aZd62@do-include aZ1511@e aZ1517@id aZ1518@filename)) aZ1515@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1513@t)))))) (set! aZ2847@aZd66@include-into-macro aZd66@include-into-macro) (set! aZd68@syntax-rules-macro (lambda (aZ151b@e) (let ((aZ151d@t aZ151b@e)) (let ((aZ151f@ls/false (aZd7c@syntax-dispatch aZ151d@t '(_ each-any . #(each (any any)))))) (if aZ151f@ls/false (apply (lambda (aZ1521@lits aZ1522@pat* aZ1523@tmp*) (begin (aZd82@verify-literals aZ1521@lits aZ151b@e) (aZd32@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons aZ1521@lits (map (lambda (aZ1527@pat aZ1528@tmp) (let ((aZ152b@t aZ1527@pat)) (let ((aZ152d@ls/false (aZd7c@syntax-dispatch aZ152b@t '(_ . any)))) (if aZ152d@ls/false (apply (lambda (aZ152f@rest) (list (cons 'g aZ152f@rest) (list 'syntax aZ1528@tmp))) aZ152d@ls/false) (let ((aZ1531@t aZ152b@t)) (let ((aZ1533@ls/false (aZd7c@syntax-dispatch aZ1531@t '_))) (if aZ1533@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid syntax-rules pattern" aZ151b@e aZ1527@pat)) aZ1533@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1531@t)))))))) aZ1522@pat* aZ1523@tmp*)))))))) aZ151f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ151d@t)))))) (set! aZ2848@aZd68@syntax-rules-macro aZd68@syntax-rules-macro) (set! aZd6a@quasiquote-macro (let ((aZ1536@datum '#f) (aZ1552@quasicons* '#f) (aZ1554@quasicons '#f) (aZ1556@quasiappend '#f) (aZ1558@quasivector '#f) (aZ155a@vquasi '#f) (aZ155c@quasi '#f)) (begin (set! aZ1536@datum (lambda (aZ1637@x) (list (aZd04@scheme-stx 'quote) (aZb5d@mkstx aZ1637@x '() '() '())))) (set! aZ1552@quasicons* (lambda (aZ162f@x aZ1630@y) (let aZ1635@f ((aZ1633@x aZ162f@x)) (if (null? aZ1633@x) aZ1630@y (aZ1554@quasicons (car aZ1633@x) (aZ1635@f (cdr aZ1633@x))))))) (set! aZ1554@quasicons (lambda (aZ1609@x aZ160a@y) (let ((aZ160d@t aZ160a@y)) (let ((aZ160f@ls/false (aZd7c@syntax-dispatch aZ160d@t '(#(scheme-id quote) any)))) (if aZ160f@ls/false (apply (lambda (aZ1611@dy) (let ((aZ1613@t aZ1609@x)) (let ((aZ1615@ls/false (aZd7c@syntax-dispatch aZ1613@t '(#(scheme-id quote) any)))) (if aZ1615@ls/false (apply (lambda (aZ1617@dx) (list (aZd04@scheme-stx 'quote) (cons aZ1617@dx aZ1611@dy))) aZ1615@ls/false) (let ((aZ1619@t aZ1613@t)) (let ((aZ161b@ls/false (aZd7c@syntax-dispatch aZ1619@t '_))) (if aZ161b@ls/false (apply (lambda () (let ((aZ161d@t aZ1611@dy)) (let ((aZ161f@ls/false (aZd7c@syntax-dispatch aZ161d@t '()))) (if aZ161f@ls/false (apply (lambda () (list (aZd04@scheme-stx 'list) aZ1609@x)) aZ161f@ls/false) (let ((aZ1621@t aZ161d@t)) (let ((aZ1623@ls/false (aZd7c@syntax-dispatch aZ1621@t '_))) (if aZ1623@ls/false (apply (lambda () (list (aZd04@scheme-stx 'cons) aZ1609@x aZ160a@y)) aZ1623@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1621@t)))))))) aZ161b@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1619@t)))))))) aZ160f@ls/false) (let ((aZ1625@t aZ160d@t)) (let ((aZ1627@ls/false (aZd7c@syntax-dispatch aZ1625@t '(#(scheme-id list) . each-any)))) (if aZ1627@ls/false (apply (lambda (aZ1629@stuff) (cons* (aZd04@scheme-stx 'list) aZ1609@x aZ1629@stuff)) aZ1627@ls/false) (let ((aZ162b@t aZ1625@t)) (let ((aZ162d@ls/false (aZd7c@syntax-dispatch aZ162b@t '_))) (if aZ162d@ls/false (apply (lambda () (list (aZd04@scheme-stx 'cons) aZ1609@x aZ160a@y)) aZ162d@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ162b@t)))))))))))) (set! aZ1556@quasiappend (lambda (aZ15ef@x aZ15f0@y) (let ((aZ15f3@ls (let aZ15f7@f ((aZ15f5@x aZ15ef@x)) (if (null? aZ15f5@x) (let ((aZ15f9@t aZ15f0@y)) (let ((aZ15fb@ls/false (aZd7c@syntax-dispatch aZ15f9@t '(#(scheme-id quote) ())))) (if aZ15fb@ls/false (apply (lambda () '()) aZ15fb@ls/false) (let ((aZ15fd@t aZ15f9@t)) (let ((aZ15ff@ls/false (aZd7c@syntax-dispatch aZ15fd@t '_))) (if aZ15ff@ls/false (apply (lambda () (list aZ15f0@y)) aZ15ff@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ15fd@t))))))) (let ((aZ1601@t (car aZ15f5@x))) (let ((aZ1603@ls/false (aZd7c@syntax-dispatch aZ1601@t '(#(scheme-id quote) ())))) (if aZ1603@ls/false (apply (lambda () (aZ15f7@f (cdr aZ15f5@x))) aZ1603@ls/false) (let ((aZ1605@t aZ1601@t)) (let ((aZ1607@ls/false (aZd7c@syntax-dispatch aZ1605@t '_))) (if aZ1607@ls/false (apply (lambda () (cons (car aZ15f5@x) (aZ15f7@f (cdr aZ15f5@x)))) aZ1607@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1605@t))))))))))) (if (null? aZ15f3@ls) (list (aZd04@scheme-stx 'quote) '()) (if (null? (cdr aZ15f3@ls)) (car aZ15f3@ls) (cons* (aZd04@scheme-stx 'append) aZ15f3@ls)))))) (set! aZ1558@quasivector (lambda (aZ15bd@x) (let ((aZ15bf@pat-x aZ15bd@x)) (let ((aZ15c1@t aZ15bf@pat-x)) (let ((aZ15c3@ls/false (aZd7c@syntax-dispatch aZ15c1@t '(#(scheme-id quote) each-any)))) (if aZ15c3@ls/false (apply (lambda (aZ15c5@x*) (list (aZd04@scheme-stx 'quote) (list->vector aZ15c5@x*))) aZ15c3@ls/false) (let ((aZ15c7@t aZ15c1@t)) (let ((aZ15c9@ls/false (aZd7c@syntax-dispatch aZ15c7@t '_))) (if aZ15c9@ls/false (apply (lambda () (let aZ15d1@f ((aZ15cb@x aZ15bd@x) (aZ15cc@k (lambda (aZ15cf@ls) (cons* (aZd04@scheme-stx 'vector) aZ15cf@ls)))) (let ((aZ15d3@t aZ15cb@x)) (let ((aZ15d5@ls/false (aZd7c@syntax-dispatch aZ15d3@t '(#(scheme-id quote) each-any)))) (if aZ15d5@ls/false (apply (lambda (aZ15d7@x*) (aZ15cc@k (map (lambda (aZ15d9@x) (list (aZd04@scheme-stx 'quote) aZ15d9@x)) aZ15d7@x*))) aZ15d5@ls/false) (let ((aZ15db@t aZ15d3@t)) (let ((aZ15dd@ls/false (aZd7c@syntax-dispatch aZ15db@t '(#(scheme-id list) . each-any)))) (if aZ15dd@ls/false (apply (lambda (aZ15df@x*) (aZ15cc@k aZ15df@x*)) aZ15dd@ls/false) (let ((aZ15e1@t aZ15db@t)) (let ((aZ15e3@ls/false (aZd7c@syntax-dispatch aZ15e1@t '(#(scheme-id cons) any any)))) (if aZ15e3@ls/false (apply (lambda (aZ15e5@x aZ15e6@y) (aZ15d1@f aZ15e6@y (lambda (aZ15e9@ls) (aZ15cc@k (cons aZ15e5@x aZ15e9@ls))))) aZ15e3@ls/false) (let ((aZ15eb@t aZ15e1@t)) (let ((aZ15ed@ls/false (aZd7c@syntax-dispatch aZ15eb@t '_))) (if aZ15ed@ls/false (apply (lambda () (list (aZd04@scheme-stx 'list->vector) aZ15bf@pat-x)) aZ15ed@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ15eb@t))))))))))))))) aZ15c9@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ15c7@t)))))))))) (set! aZ155a@vquasi (lambda (aZ159b@p aZ159c@lev) (let ((aZ159f@t aZ159b@p)) (let ((aZ15a1@ls/false (aZd7c@syntax-dispatch aZ159f@t '(any . any)))) (if aZ15a1@ls/false (apply (lambda (aZ15a3@p aZ15a4@q) (let ((aZ15a7@t aZ15a3@p)) (let ((aZ15a9@ls/false (aZd7c@syntax-dispatch aZ15a7@t '(#(scheme-id unquote) . each-any)))) (if aZ15a9@ls/false (apply (lambda (aZ15ab@p) (if (= aZ159c@lev '0) (aZ1552@quasicons* aZ15ab@p (aZ155a@vquasi aZ15a4@q aZ159c@lev)) (aZ1554@quasicons (aZ1554@quasicons (aZ1536@datum 'unquote) (aZ155c@quasi aZ15ab@p (- aZ159c@lev '1))) (aZ155a@vquasi aZ15a4@q aZ159c@lev)))) aZ15a9@ls/false) (let ((aZ15ad@t aZ15a7@t)) (let ((aZ15af@ls/false (aZd7c@syntax-dispatch aZ15ad@t '(#(scheme-id unquote-splicing) . each-any)))) (if aZ15af@ls/false (apply (lambda (aZ15b1@p) (if (= aZ159c@lev '0) (aZ1556@quasiappend aZ15b1@p (aZ155a@vquasi aZ15a4@q aZ159c@lev)) (aZ1554@quasicons (aZ1554@quasicons (aZ1536@datum 'unquote-splicing) (aZ155c@quasi aZ15b1@p (- aZ159c@lev '1))) (aZ155a@vquasi aZ15a4@q aZ159c@lev)))) aZ15af@ls/false) (let ((aZ15b3@t aZ15ad@t)) (let ((aZ15b5@ls/false (aZd7c@syntax-dispatch aZ15b3@t 'any))) (if aZ15b5@ls/false (apply (lambda (aZ15b7@p) (aZ1554@quasicons (aZ155c@quasi aZ15b7@p aZ159c@lev) (aZ155a@vquasi aZ15a4@q aZ159c@lev))) aZ15b5@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ15b3@t))))))))))) aZ15a1@ls/false) (let ((aZ15b9@t aZ159f@t)) (let ((aZ15bb@ls/false (aZd7c@syntax-dispatch aZ15b9@t '()))) (if aZ15bb@ls/false (apply (lambda () (list (aZd04@scheme-stx 'quote) '())) aZ15bb@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ15b9@t))))))))) (set! aZ155c@quasi (lambda (aZ1565@p aZ1566@lev) (let ((aZ1569@t aZ1565@p)) (let ((aZ156b@ls/false (aZd7c@syntax-dispatch aZ1569@t '(#(scheme-id unquote) any)))) (if aZ156b@ls/false (apply (lambda (aZ156d@p) (if (= aZ1566@lev '0) aZ156d@p (aZ1554@quasicons (aZ1536@datum 'unquote) (aZ155c@quasi (list aZ156d@p) (- aZ1566@lev '1))))) aZ156b@ls/false) (let ((aZ156f@t aZ1569@t)) (let ((aZ1571@ls/false (aZd7c@syntax-dispatch aZ156f@t '((#(scheme-id unquote) . each-any) . any)))) (if aZ1571@ls/false (apply (lambda (aZ1573@p aZ1574@q) (if (= aZ1566@lev '0) (aZ1552@quasicons* aZ1573@p (aZ155c@quasi aZ1574@q aZ1566@lev)) (aZ1554@quasicons (aZ1554@quasicons (aZ1536@datum 'unquote) (aZ155c@quasi aZ1573@p (- aZ1566@lev '1))) (aZ155c@quasi aZ1574@q aZ1566@lev)))) aZ1571@ls/false) (let ((aZ1577@t aZ156f@t)) (let ((aZ1579@ls/false (aZd7c@syntax-dispatch aZ1577@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if aZ1579@ls/false (apply (lambda (aZ157b@p aZ157c@q) (if (= aZ1566@lev '0) (aZ1556@quasiappend aZ157b@p (aZ155c@quasi aZ157c@q aZ1566@lev)) (aZ1554@quasicons (aZ1554@quasicons (aZ1536@datum 'unquote-splicing) (aZ155c@quasi aZ157b@p (- aZ1566@lev '1))) (aZ155c@quasi aZ157c@q aZ1566@lev)))) aZ1579@ls/false) (let ((aZ157f@t aZ1577@t)) (let ((aZ1581@ls/false (aZd7c@syntax-dispatch aZ157f@t '(#(scheme-id quasiquote) any)))) (if aZ1581@ls/false (apply (lambda (aZ1583@p) (aZ1554@quasicons (aZ1536@datum 'quasiquote) (aZ155c@quasi (list aZ1583@p) (+ aZ1566@lev '1)))) aZ1581@ls/false) (let ((aZ1585@t aZ157f@t)) (let ((aZ1587@ls/false (aZd7c@syntax-dispatch aZ1585@t '(any . any)))) (if aZ1587@ls/false (apply (lambda (aZ1589@p aZ158a@q) (aZ1554@quasicons (aZ155c@quasi aZ1589@p aZ1566@lev) (aZ155c@quasi aZ158a@q aZ1566@lev))) aZ1587@ls/false) (let ((aZ158d@t aZ1585@t)) (let ((aZ158f@ls/false (aZd7c@syntax-dispatch aZ158d@t '#(vector each-any)))) (if (and aZ158f@ls/false (apply (lambda (aZ1591@x) (not (aZb41@stx? aZ1591@x))) aZ158f@ls/false)) (apply (lambda (aZ1593@x) (aZ1558@quasivector (aZ155a@vquasi aZ1593@x aZ1566@lev))) aZ158f@ls/false) (let ((aZ1595@t aZ158d@t)) (let ((aZ1597@ls/false (aZd7c@syntax-dispatch aZ1595@t 'any))) (if aZ1597@ls/false (apply (lambda (aZ1599@p) (list (aZd04@scheme-stx 'quote) aZ1599@p)) aZ1597@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1595@t)))))))))))))))))))))))) (lambda (aZ155d@x) (let ((aZ155f@t aZ155d@x)) (let ((aZ1561@ls/false (aZd7c@syntax-dispatch aZ155f@t '(_ any)))) (if aZ1561@ls/false (apply (lambda (aZ1563@e) (aZ155c@quasi aZ1563@e '0)) aZ1561@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ155f@t)))))))) (set! aZ2849@aZd6a@quasiquote-macro aZd6a@quasiquote-macro) (set! aZd6c@quasisyntax-macro (let ((aZ163a@quasi '#f)) (begin (set! aZ163a@quasi (lambda (aZ1655@p aZ1656@lev) (let ((aZ1659@t aZ1655@p)) (let ((aZ165b@ls/false (aZd7c@syntax-dispatch aZ1659@t '(#(scheme-id unsyntax) any)))) (if aZ165b@ls/false (apply (lambda (aZ165d@p) (if (= aZ1656@lev '0) (let ((aZ165f@g (gensym))) (values (list aZ165f@g) (list aZ165d@p) aZ165f@g)) (call-with-values (lambda () (aZ163a@quasi aZ165d@p (- aZ1656@lev '1))) (lambda (aZ1667@aZ1662 aZ1668@aZ1664 aZ1669@aZ1666) (let ((aZ166d@p aZ1669@aZ1666) (aZ166e@rhs* aZ1668@aZ1664) (aZ166f@lhs* aZ1667@aZ1662)) (values aZ166f@lhs* aZ166e@rhs* (list 'unsyntax aZ166d@p))))))) aZ165b@ls/false) (let ((aZ1673@t aZ1659@t)) (let ((aZ1675@ls/false (aZd7c@syntax-dispatch aZ1673@t '#(scheme-id unsyntax)))) (if (and aZ1675@ls/false (apply (lambda () (= aZ1656@lev '0)) aZ1675@ls/false)) (apply (lambda () (aZe5c@syntax-violation '#f '"incorrect use of unsyntax" aZ1655@p)) aZ1675@ls/false) (let ((aZ1677@t aZ1673@t)) (let ((aZ1679@ls/false (aZd7c@syntax-dispatch aZ1677@t '((#(scheme-id unsyntax) . each-any) . any)))) (if aZ1679@ls/false (apply (lambda (aZ167b@p* aZ167c@q) (call-with-values (lambda () (aZ163a@quasi aZ167c@q aZ1656@lev)) (lambda (aZ1685@aZ1680 aZ1686@aZ1682 aZ1687@aZ1684) (let ((aZ168b@q aZ1687@aZ1684) (aZ168c@rhs* aZ1686@aZ1682) (aZ168d@lhs* aZ1685@aZ1680)) (if (= aZ1656@lev '0) (let ((aZ1691@g* (map (lambda (aZ1693@x) (gensym)) aZ167b@p*))) (values (append aZ1691@g* aZ168d@lhs*) (append aZ167b@p* aZ168c@rhs*) (append aZ1691@g* aZ168b@q))) (call-with-values (lambda () (aZ163a@quasi aZ167b@p* (- aZ1656@lev '1))) (lambda (aZ169b@aZ1696 aZ169c@aZ1698 aZ169d@aZ169a) (let ((aZ16a1@p* aZ169d@aZ169a) (aZ16a2@rhs2* aZ169c@aZ1698) (aZ16a3@lhs2* aZ169b@aZ1696)) (values (append aZ16a3@lhs2* aZ168d@lhs*) (append aZ16a2@rhs2* aZ168c@rhs*) (cons (cons 'unsyntax aZ16a1@p*) aZ168b@q)))))))))) aZ1679@ls/false) (let ((aZ16a7@t aZ1677@t)) (let ((aZ16a9@ls/false (aZd7c@syntax-dispatch aZ16a7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if aZ16a9@ls/false (apply (lambda (aZ16ab@p* aZ16ac@q) (call-with-values (lambda () (aZ163a@quasi aZ16ac@q aZ1656@lev)) (lambda (aZ16b5@aZ16b0 aZ16b6@aZ16b2 aZ16b7@aZ16b4) (let ((aZ16bb@q aZ16b7@aZ16b4) (aZ16bc@rhs* aZ16b6@aZ16b2) (aZ16bd@lhs* aZ16b5@aZ16b0)) (if (= aZ1656@lev '0) (let ((aZ16c1@g* (map (lambda (aZ16c3@x) (gensym)) aZ16ab@p*))) (values (append (map (lambda (aZ16c5@g) (cons aZ16c5@g '(...))) aZ16c1@g*) aZ16bd@lhs*) (append aZ16ab@p* aZ16bc@rhs*) (append (apply append (map (lambda (aZ16c7@g) (cons aZ16c7@g '(...))) aZ16c1@g*)) aZ16bb@q))) (call-with-values (lambda () (aZ163a@quasi aZ16ab@p* (- aZ1656@lev '1))) (lambda (aZ16cf@aZ16ca aZ16d0@aZ16cc aZ16d1@aZ16ce) (let ((aZ16d5@p* aZ16d1@aZ16ce) (aZ16d6@rhs2* aZ16d0@aZ16cc) (aZ16d7@lhs2* aZ16cf@aZ16ca)) (values (append aZ16d7@lhs2* aZ16bd@lhs*) (append aZ16d6@rhs2* aZ16bc@rhs*) (cons (cons 'unsyntax-splicing aZ16d5@p*) aZ16bb@q)))))))))) aZ16a9@ls/false) (let ((aZ16db@t aZ16a7@t)) (let ((aZ16dd@ls/false (aZd7c@syntax-dispatch aZ16db@t '#(scheme-id unsyntax-splicing)))) (if (and aZ16dd@ls/false (apply (lambda () (= aZ1656@lev '0)) aZ16dd@ls/false)) (apply (lambda () (aZe5c@syntax-violation '#f '"incorrect use of unsyntax-splicing" aZ1655@p)) aZ16dd@ls/false) (let ((aZ16df@t aZ16db@t)) (let ((aZ16e1@ls/false (aZd7c@syntax-dispatch aZ16df@t '(#(scheme-id quasisyntax) any)))) (if aZ16e1@ls/false (apply (lambda (aZ16e3@p) (call-with-values (lambda () (aZ163a@quasi aZ16e3@p (+ aZ1656@lev '1))) (lambda (aZ16eb@aZ16e6 aZ16ec@aZ16e8 aZ16ed@aZ16ea) (let ((aZ16f1@p aZ16ed@aZ16ea) (aZ16f2@rhs* aZ16ec@aZ16e8) (aZ16f3@lhs* aZ16eb@aZ16e6)) (values aZ16f3@lhs* aZ16f2@rhs* (list 'quasisyntax aZ16f1@p)))))) aZ16e1@ls/false) (let ((aZ16f7@t aZ16df@t)) (let ((aZ16f9@ls/false (aZd7c@syntax-dispatch aZ16f7@t '(any . any)))) (if aZ16f9@ls/false (apply (lambda (aZ16fb@p aZ16fc@q) (call-with-values (lambda () (aZ163a@quasi aZ16fb@p aZ1656@lev)) (lambda (aZ170b@aZ1700 aZ170c@aZ1702 aZ170d@aZ1704) (call-with-values (lambda () (aZ163a@quasi aZ16fc@q aZ1656@lev)) (lambda (aZ1711@aZ1706 aZ1712@aZ1708 aZ1713@aZ170a) (let ((aZ1717@q aZ1713@aZ170a) (aZ1718@rhs2* aZ1712@aZ1708) (aZ1719@lhs2* aZ1711@aZ1706) (aZ171a@p aZ170d@aZ1704) (aZ171b@rhs* aZ170c@aZ1702) (aZ171c@lhs* aZ170b@aZ1700)) (values (append aZ1719@lhs2* aZ171c@lhs*) (append aZ1718@rhs2* aZ171b@rhs*) (cons aZ171a@p aZ1717@q)))))))) aZ16f9@ls/false) (let ((aZ1723@t aZ16f7@t)) (let ((aZ1725@ls/false (aZd7c@syntax-dispatch aZ1723@t '#(vector each-any)))) (if aZ1725@ls/false (apply (lambda (aZ1727@x*) (call-with-values (lambda () (aZ163a@quasi aZ1727@x* aZ1656@lev)) (lambda (aZ172f@aZ172a aZ1730@aZ172c aZ1731@aZ172e) (let ((aZ1735@x* aZ1731@aZ172e) (aZ1736@rhs* aZ1730@aZ172c) (aZ1737@lhs* aZ172f@aZ172a)) (values aZ1737@lhs* aZ1736@rhs* (list->vector aZ1735@x*)))))) aZ1725@ls/false) (let ((aZ173b@t aZ1723@t)) (let ((aZ173d@ls/false (aZd7c@syntax-dispatch aZ173b@t '_))) (if aZ173d@ls/false (apply (lambda () (values '() '() aZ1655@p)) aZ173d@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ173b@t)))))))))))))))))))))))))))))) (lambda (aZ163b@x) (let ((aZ163d@t aZ163b@x)) (let ((aZ163f@ls/false (aZd7c@syntax-dispatch aZ163d@t '(_ any)))) (if aZ163f@ls/false (apply (lambda (aZ1641@e) (call-with-values (lambda () (aZ163a@quasi aZ1641@e '0)) (lambda (aZ1649@aZ1644 aZ164a@aZ1646 aZ164b@aZ1648) (let ((aZ164f@v aZ164b@aZ1648) (aZ1650@rhs* aZ164a@aZ1646) (aZ1651@lhs* aZ1649@aZ1644)) (aZd32@bless (list 'syntax-case (cons 'list aZ1650@rhs*) '() (list aZ1651@lhs* (list 'syntax aZ164f@v)))))))) aZ163f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ163d@t)))))))) (set! aZ284a@aZd6c@quasisyntax-macro aZd6c@quasisyntax-macro) (set! aZd6e@define-struct-macro (lambda (aZ173f@stx) (aZe5c@syntax-violation '#f '"define-struct not supported" aZ173f@stx))) (set! aZ284b@aZd6e@define-struct-macro aZd6e@define-struct-macro) (set! aZd70@define-record-type-macro (lambda (aZ1741@x) (let ((aZ1744@id '#f) (aZ1746@get-record-name '#f) (aZ1748@get-record-constructor-name '#f) (aZ174a@get-record-predicate-name '#f) (aZ174c@get-clause '#f) (aZ174e@foo-rtd-code '#f) (aZ1750@parent-rtd-code '#f) (aZ1752@parent-rcd-code '#f) (aZ1754@foo-rcd-code '#f) (aZ1756@get-protocol-code '#f) (aZ1758@get-fields '#f) (aZ175a@get-mutator-indices '#f) (aZ175c@get-mutators '#f) (aZ175e@get-accessors '#f) (aZ1760@enumerate '#f) (aZ1762@do-define-record '#f) (aZ1764@verify-clauses '#f)) (begin (set! aZ1744@id (lambda (aZ1937@ctxt . aZ1939@str*) (aZe60@datum->syntax aZ1937@ctxt (string->symbol (apply string-append (map (lambda (aZ193b@x) (if (symbol? aZ193b@x) (symbol->string aZ193b@x) (if (string? aZ193b@x) aZ193b@x (assertion-violation 'define-record-type '"BUG")))) aZ1939@str*)))))) (set! aZ1746@get-record-name (lambda (aZ1925@spec) (let ((aZ1927@t aZ1925@spec)) (let ((aZ1929@ls/false (aZd7c@syntax-dispatch aZ1927@t '(any any any)))) (if aZ1929@ls/false (apply (lambda (aZ192b@foo aZ192c@make-foo aZ192d@foo?) aZ192b@foo) aZ1929@ls/false) (let ((aZ1931@t aZ1927@t)) (let ((aZ1933@ls/false (aZd7c@syntax-dispatch aZ1931@t 'any))) (if aZ1933@ls/false (apply (lambda (aZ1935@foo) aZ1935@foo) aZ1933@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1931@t))))))))) (set! aZ1748@get-record-constructor-name (lambda (aZ1911@spec) (let ((aZ1913@t aZ1911@spec)) (let ((aZ1915@ls/false (aZd7c@syntax-dispatch aZ1913@t '(any any any)))) (if aZ1915@ls/false (apply (lambda (aZ1917@foo aZ1918@make-foo aZ1919@foo?) aZ1918@make-foo) aZ1915@ls/false) (let ((aZ191d@t aZ1913@t)) (let ((aZ191f@ls/false (aZd7c@syntax-dispatch aZ191d@t 'any))) (if (and aZ191f@ls/false (apply (lambda (aZ1921@foo) (aZb75@id? aZ1921@foo)) aZ191f@ls/false)) (apply (lambda (aZ1923@foo) (aZ1744@id aZ1923@foo '"make-" (aZb89@stx->datum aZ1923@foo))) aZ191f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ191d@t))))))))) (set! aZ174a@get-record-predicate-name (lambda (aZ18fd@spec) (let ((aZ18ff@t aZ18fd@spec)) (let ((aZ1901@ls/false (aZd7c@syntax-dispatch aZ18ff@t '(any any any)))) (if aZ1901@ls/false (apply (lambda (aZ1903@foo aZ1904@make-foo aZ1905@foo?) aZ1905@foo?) aZ1901@ls/false) (let ((aZ1909@t aZ18ff@t)) (let ((aZ190b@ls/false (aZd7c@syntax-dispatch aZ1909@t 'any))) (if (and aZ190b@ls/false (apply (lambda (aZ190d@foo) (aZb75@id? aZ190d@foo)) aZ190b@ls/false)) (apply (lambda (aZ190f@foo) (aZ1744@id aZ190f@foo (aZb89@stx->datum aZ190f@foo) '"?")) aZ190b@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1909@t))))))))) (set! aZ174c@get-clause (lambda (aZ18eb@id aZ18ec@ls) (let ((aZ18ef@t aZ18ec@ls)) (let ((aZ18f1@ls/false (aZd7c@syntax-dispatch aZ18ef@t '()))) (if aZ18f1@ls/false (apply (lambda () '#f) aZ18f1@ls/false) (let ((aZ18f3@t aZ18ef@t)) (let ((aZ18f5@ls/false (aZd7c@syntax-dispatch aZ18f3@t '((any . any) . any)))) (if aZ18f5@ls/false (apply (lambda (aZ18f7@x aZ18f8@rest aZ18f9@ls) (if (aZb7b@free-id=? (aZd32@bless aZ18eb@id) aZ18f7@x) (cons aZ18f7@x aZ18f8@rest) (aZ174c@get-clause aZ18eb@id aZ18f9@ls))) aZ18f5@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ18f3@t))))))))) (set! aZ174e@foo-rtd-code (lambda (aZ1899@name aZ189a@clause* aZ189b@parent-rtd-code) (let ((aZ18a0@convert-field-spec* '#f)) (begin (set! aZ18a0@convert-field-spec* (lambda (aZ18d1@ls) (list->vector (map (lambda (aZ18d3@x) (let ((aZ18d5@t aZ18d3@x)) (let ((aZ18d7@ls/false (aZd7c@syntax-dispatch aZ18d5@t '(#(scheme-id mutable) any . any)))) (if aZ18d7@ls/false (apply (lambda (aZ18d9@name aZ18da@rest) (list 'mutable aZ18d9@name)) aZ18d7@ls/false) (let ((aZ18dd@t aZ18d5@t)) (let ((aZ18df@ls/false (aZd7c@syntax-dispatch aZ18dd@t '(#(scheme-id immutable) any . any)))) (if aZ18df@ls/false (apply (lambda (aZ18e1@name aZ18e2@rest) (list 'immutable aZ18e1@name)) aZ18df@ls/false) (let ((aZ18e5@t aZ18dd@t)) (let ((aZ18e7@ls/false (aZd7c@syntax-dispatch aZ18e5@t 'any))) (if aZ18e7@ls/false (apply (lambda (aZ18e9@name) (list 'immutable aZ18e9@name)) aZ18e7@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ18e5@t))))))))))) aZ18d1@ls)))) (let ((aZ18a1@uid-code (let ((aZ18a9@t (aZ174c@get-clause 'nongenerative aZ189a@clause*))) (let ((aZ18ab@ls/false (aZd7c@syntax-dispatch aZ18a9@t '(_)))) (if aZ18ab@ls/false (apply (lambda () (list 'quote (gensym))) aZ18ab@ls/false) (let ((aZ18ad@t aZ18a9@t)) (let ((aZ18af@ls/false (aZd7c@syntax-dispatch aZ18ad@t '(_ any)))) (if aZ18af@ls/false (apply (lambda (aZ18b1@uid) (list 'quote aZ18b1@uid)) aZ18af@ls/false) (let ((aZ18b3@t aZ18ad@t)) (let ((aZ18b5@ls/false (aZd7c@syntax-dispatch aZ18b3@t '_))) (if aZ18b5@ls/false (apply (lambda () '#f) aZ18b5@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ18b3@t))))))))))) (aZ18a2@sealed? (let ((aZ18b7@t (aZ174c@get-clause 'sealed aZ189a@clause*))) (let ((aZ18b9@ls/false (aZd7c@syntax-dispatch aZ18b7@t '(_ #(atom #t))))) (if aZ18b9@ls/false (apply (lambda () '#t) aZ18b9@ls/false) (let ((aZ18bb@t aZ18b7@t)) (let ((aZ18bd@ls/false (aZd7c@syntax-dispatch aZ18bb@t '_))) (if aZ18bd@ls/false (apply (lambda () '#f) aZ18bd@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ18bb@t)))))))) (aZ18a3@opaque? (let ((aZ18bf@t (aZ174c@get-clause 'opaque aZ189a@clause*))) (let ((aZ18c1@ls/false (aZd7c@syntax-dispatch aZ18bf@t '(_ #(atom #t))))) (if aZ18c1@ls/false (apply (lambda () '#t) aZ18c1@ls/false) (let ((aZ18c3@t aZ18bf@t)) (let ((aZ18c5@ls/false (aZd7c@syntax-dispatch aZ18c3@t '_))) (if aZ18c5@ls/false (apply (lambda () '#f) aZ18c5@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ18c3@t)))))))) (aZ18a4@fields (let ((aZ18c7@t (aZ174c@get-clause 'fields aZ189a@clause*))) (let ((aZ18c9@ls/false (aZd7c@syntax-dispatch aZ18c7@t '(_ . each-any)))) (if aZ18c9@ls/false (apply (lambda (aZ18cb@field-spec*) (list 'quote (aZ18a0@convert-field-spec* aZ18cb@field-spec*))) aZ18c9@ls/false) (let ((aZ18cd@t aZ18c7@t)) (let ((aZ18cf@ls/false (aZd7c@syntax-dispatch aZ18cd@t '_))) (if aZ18cf@ls/false (apply (lambda () ''#()) aZ18cf@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ18cd@t))))))))) (aZd32@bless (list 'make-record-type-descriptor (list 'quote aZ1899@name) aZ189b@parent-rtd-code aZ18a1@uid-code aZ18a2@sealed? aZ18a3@opaque? aZ18a4@fields))))))) (set! aZ1750@parent-rtd-code (lambda (aZ1881@clause*) (let ((aZ1883@t (aZ174c@get-clause 'parent aZ1881@clause*))) (let ((aZ1885@ls/false (aZd7c@syntax-dispatch aZ1883@t '(_ any)))) (if aZ1885@ls/false (apply (lambda (aZ1887@name) (list 'record-type-descriptor aZ1887@name)) aZ1885@ls/false) (let ((aZ1889@t aZ1883@t)) (let ((aZ188b@ls/false (aZd7c@syntax-dispatch aZ1889@t '#(atom #f)))) (if aZ188b@ls/false (apply (lambda () (let ((aZ188d@t (aZ174c@get-clause 'parent-rtd aZ1881@clause*))) (let ((aZ188f@ls/false (aZd7c@syntax-dispatch aZ188d@t '(_ any any)))) (if aZ188f@ls/false (apply (lambda (aZ1891@rtd aZ1892@rcd) aZ1891@rtd) aZ188f@ls/false) (let ((aZ1895@t aZ188d@t)) (let ((aZ1897@ls/false (aZd7c@syntax-dispatch aZ1895@t '#(atom #f)))) (if aZ1897@ls/false (apply (lambda () '#f) aZ1897@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1895@t)))))))) aZ188b@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1889@t))))))))) (set! aZ1752@parent-rcd-code (lambda (aZ1869@clause*) (let ((aZ186b@t (aZ174c@get-clause 'parent aZ1869@clause*))) (let ((aZ186d@ls/false (aZd7c@syntax-dispatch aZ186b@t '(_ any)))) (if aZ186d@ls/false (apply (lambda (aZ186f@name) (list 'record-constructor-descriptor aZ186f@name)) aZ186d@ls/false) (let ((aZ1871@t aZ186b@t)) (let ((aZ1873@ls/false (aZd7c@syntax-dispatch aZ1871@t '#(atom #f)))) (if aZ1873@ls/false (apply (lambda () (let ((aZ1875@t (aZ174c@get-clause 'parent-rtd aZ1869@clause*))) (let ((aZ1877@ls/false (aZd7c@syntax-dispatch aZ1875@t '(_ any any)))) (if aZ1877@ls/false (apply (lambda (aZ1879@rtd aZ187a@rcd) aZ187a@rcd) aZ1877@ls/false) (let ((aZ187d@t aZ1875@t)) (let ((aZ187f@ls/false (aZd7c@syntax-dispatch aZ187d@t '#(atom #f)))) (if aZ187f@ls/false (apply (lambda () '#f) aZ187f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ187d@t)))))))) aZ1873@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1871@t))))))))) (set! aZ1754@foo-rcd-code (lambda (aZ1861@clause* aZ1862@foo-rtd aZ1863@protocol aZ1864@parent-rcd-code) (list 'make-record-constructor-descriptor aZ1862@foo-rtd aZ1864@parent-rcd-code aZ1863@protocol))) (set! aZ1756@get-protocol-code (lambda (aZ1855@clause*) (let ((aZ1857@t (aZ174c@get-clause 'protocol aZ1855@clause*))) (let ((aZ1859@ls/false (aZd7c@syntax-dispatch aZ1857@t '(_ any)))) (if aZ1859@ls/false (apply (lambda (aZ185b@expr) aZ185b@expr) aZ1859@ls/false) (let ((aZ185d@t aZ1857@t)) (let ((aZ185f@ls/false (aZd7c@syntax-dispatch aZ185d@t '_))) (if aZ185f@ls/false (apply (lambda () '#f) aZ185f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ185d@t))))))))) (set! aZ1758@get-fields (lambda (aZ1843@clause*) (let ((aZ1845@t aZ1843@clause*)) (let ((aZ1847@ls/false (aZd7c@syntax-dispatch aZ1845@t '()))) (if aZ1847@ls/false (apply (lambda () '()) aZ1847@ls/false) (let ((aZ1849@t aZ1845@t)) (let ((aZ184b@ls/false (aZd7c@syntax-dispatch aZ1849@t '((#(scheme-id fields) . each-any) . _)))) (if aZ184b@ls/false (apply (lambda (aZ184d@f*) aZ184d@f*) aZ184b@ls/false) (let ((aZ184f@t aZ1849@t)) (let ((aZ1851@ls/false (aZd7c@syntax-dispatch aZ184f@t '(_ . any)))) (if aZ1851@ls/false (apply (lambda (aZ1853@rest) (aZ1758@get-fields aZ1853@rest)) aZ1851@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ184f@t)))))))))))) (set! aZ175a@get-mutator-indices (lambda (aZ182b@fields) (let aZ1831@f ((aZ182d@fields aZ182b@fields) (aZ182e@i '0)) (let ((aZ1833@t aZ182d@fields)) (let ((aZ1835@ls/false (aZd7c@syntax-dispatch aZ1833@t '()))) (if aZ1835@ls/false (apply (lambda () '()) aZ1835@ls/false) (let ((aZ1837@t aZ1833@t)) (let ((aZ1839@ls/false (aZd7c@syntax-dispatch aZ1837@t '((#(scheme-id mutable) . _) . any)))) (if aZ1839@ls/false (apply (lambda (aZ183b@rest) (cons aZ182e@i (aZ1831@f aZ183b@rest (+ aZ182e@i '1)))) aZ1839@ls/false) (let ((aZ183d@t aZ1837@t)) (let ((aZ183f@ls/false (aZd7c@syntax-dispatch aZ183d@t '(_ . any)))) (if aZ183f@ls/false (apply (lambda (aZ1841@rest) (aZ1831@f aZ1841@rest (+ aZ182e@i '1))) aZ183f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ183d@t))))))))))))) (set! aZ175c@get-mutators (lambda (aZ1801@foo aZ1802@fields) (let ((aZ1806@gen-name '#f)) (begin (set! aZ1806@gen-name (lambda (aZ1829@x) (aZe60@datum->syntax aZ1801@foo (string->symbol (string-append (symbol->string (aZe62@syntax->datum aZ1801@foo)) '"-" (symbol->string (aZe62@syntax->datum aZ1829@x)) '"-set!"))))) (let aZ1809@f ((aZ1807@fields aZ1802@fields)) (let ((aZ180b@t aZ1807@fields)) (let ((aZ180d@ls/false (aZd7c@syntax-dispatch aZ180b@t '()))) (if aZ180d@ls/false (apply (lambda () '()) aZ180d@ls/false) (let ((aZ180f@t aZ180b@t)) (let ((aZ1811@ls/false (aZd7c@syntax-dispatch aZ180f@t '((#(scheme-id mutable) any any any) . any)))) (if aZ1811@ls/false (apply (lambda (aZ1813@name aZ1814@accessor aZ1815@mutator aZ1816@rest) (cons aZ1815@mutator (aZ1809@f aZ1816@rest))) aZ1811@ls/false) (let ((aZ181b@t aZ180f@t)) (let ((aZ181d@ls/false (aZd7c@syntax-dispatch aZ181b@t '((#(scheme-id mutable) any) . any)))) (if aZ181d@ls/false (apply (lambda (aZ181f@name aZ1820@rest) (cons (aZ1806@gen-name aZ181f@name) (aZ1809@f aZ1820@rest))) aZ181d@ls/false) (let ((aZ1823@t aZ181b@t)) (let ((aZ1825@ls/false (aZd7c@syntax-dispatch aZ1823@t '(_ . any)))) (if aZ1825@ls/false (apply (lambda (aZ1827@rest) (aZ1809@f aZ1827@rest)) aZ1825@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1823@t)))))))))))))))))) (set! aZ175e@get-accessors (lambda (aZ17bd@foo aZ17be@fields) (let ((aZ17c2@gen-name '#f)) (begin (set! aZ17c2@gen-name (lambda (aZ17ff@x) (aZe60@datum->syntax aZ17bd@foo (string->symbol (string-append (symbol->string (aZe62@syntax->datum aZ17bd@foo)) '"-" (symbol->string (aZe62@syntax->datum aZ17ff@x))))))) (map (lambda (aZ17c3@field) (let ((aZ17c5@t aZ17c3@field)) (let ((aZ17c7@ls/false (aZd7c@syntax-dispatch aZ17c5@t '(#(scheme-id mutable) any any any)))) (if (and aZ17c7@ls/false (apply (lambda (aZ17c9@name aZ17ca@accessor aZ17cb@mutator) (aZb75@id? aZ17ca@accessor)) aZ17c7@ls/false)) (apply (lambda (aZ17cf@name aZ17d0@accessor aZ17d1@mutator) aZ17d0@accessor) aZ17c7@ls/false) (let ((aZ17d5@t aZ17c5@t)) (let ((aZ17d7@ls/false (aZd7c@syntax-dispatch aZ17d5@t '(#(scheme-id immutable) any any)))) (if (and aZ17d7@ls/false (apply (lambda (aZ17d9@name aZ17da@accessor) (aZb75@id? aZ17da@accessor)) aZ17d7@ls/false)) (apply (lambda (aZ17dd@name aZ17de@accessor) aZ17de@accessor) aZ17d7@ls/false) (let ((aZ17e1@t aZ17d5@t)) (let ((aZ17e3@ls/false (aZd7c@syntax-dispatch aZ17e1@t '(#(scheme-id mutable) any)))) (if (and aZ17e3@ls/false (apply (lambda (aZ17e5@name) (aZb75@id? aZ17e5@name)) aZ17e3@ls/false)) (apply (lambda (aZ17e7@name) (aZ17c2@gen-name aZ17e7@name)) aZ17e3@ls/false) (let ((aZ17e9@t aZ17e1@t)) (let ((aZ17eb@ls/false (aZd7c@syntax-dispatch aZ17e9@t '(#(scheme-id immutable) any)))) (if (and aZ17eb@ls/false (apply (lambda (aZ17ed@name) (aZb75@id? aZ17ed@name)) aZ17eb@ls/false)) (apply (lambda (aZ17ef@name) (aZ17c2@gen-name aZ17ef@name)) aZ17eb@ls/false) (let ((aZ17f1@t aZ17e9@t)) (let ((aZ17f3@ls/false (aZd7c@syntax-dispatch aZ17f1@t 'any))) (if (and aZ17f3@ls/false (apply (lambda (aZ17f5@name) (aZb75@id? aZ17f5@name)) aZ17f3@ls/false)) (apply (lambda (aZ17f7@name) (aZ17c2@gen-name aZ17f7@name)) aZ17f3@ls/false) (let ((aZ17f9@t aZ17f1@t)) (let ((aZ17fb@ls/false (aZd7c@syntax-dispatch aZ17f9@t 'any))) (if aZ17fb@ls/false (apply (lambda (aZ17fd@others) (aZe5c@syntax-violation '#f '"invalid field spec" aZ17c3@field)) aZ17fb@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ17f9@t)))))))))))))))))))) aZ17be@fields))))) (set! aZ1760@enumerate (lambda (aZ17b5@ls) (let aZ17bb@f ((aZ17b7@ls aZ17b5@ls) (aZ17b8@i '0)) (if (null? aZ17b7@ls) '() (cons aZ17b8@i (aZ17bb@f (cdr aZ17b7@ls) (+ aZ17b8@i '1))))))) (set! aZ1762@do-define-record (lambda (aZ178d@namespec aZ178e@clause*) (let ((aZ1791@foo (aZ1746@get-record-name aZ178d@namespec))) (let ((aZ1793@foo-rtd (gensym))) (let ((aZ1795@foo-rcd (gensym))) (let ((aZ1797@protocol (gensym))) (let ((aZ1799@make-foo (aZ1748@get-record-constructor-name aZ178d@namespec))) (let ((aZ179b@fields (aZ1758@get-fields aZ178e@clause*))) (let ((aZ179d@idx* (aZ1760@enumerate aZ179b@fields))) (let ((aZ179f@foo-x* (aZ175e@get-accessors aZ1791@foo aZ179b@fields))) (let ((aZ17a1@set-foo-x!* (aZ175c@get-mutators aZ1791@foo aZ179b@fields))) (let ((aZ17a3@set-foo-idx* (aZ175a@get-mutator-indices aZ179b@fields))) (let ((aZ17a5@foo? (aZ174a@get-record-predicate-name aZ178d@namespec))) (let ((aZ17a7@foo-rtd-code (aZ174e@foo-rtd-code aZ1791@foo aZ178e@clause* (aZ1750@parent-rtd-code aZ178e@clause*)))) (let ((aZ17a9@foo-rcd-code (aZ1754@foo-rcd-code aZ178e@clause* aZ1793@foo-rtd aZ1797@protocol (aZ1752@parent-rcd-code aZ178e@clause*)))) (let ((aZ17ab@protocol-code (aZ1756@get-protocol-code aZ178e@clause*))) (aZd32@bless (cons 'begin (cons (list 'define aZ1793@foo-rtd aZ17a7@foo-rtd-code) (cons (list 'define aZ1797@protocol aZ17ab@protocol-code) (cons (list 'define aZ1795@foo-rcd aZ17a9@foo-rcd-code) (cons (list 'define-syntax aZ1791@foo (list 'list ''$rtd (list 'syntax aZ1793@foo-rtd) (list 'syntax aZ1795@foo-rcd))) (cons (list 'define aZ17a5@foo? (list 'record-predicate aZ1793@foo-rtd)) (cons (list 'define aZ1799@make-foo (list 'record-constructor aZ1795@foo-rcd)) (append (map (lambda (aZ17ad@foo-x aZ17ae@idx) (list 'define aZ17ad@foo-x (list 'record-accessor aZ1793@foo-rtd aZ17ae@idx))) aZ179f@foo-x* aZ179d@idx*) (map (lambda (aZ17b1@set-foo-x! aZ17b2@idx) (list 'define aZ17b1@set-foo-x! (list 'record-mutator aZ1793@foo-rtd aZ17b2@idx))) aZ17a1@set-foo-x!* aZ17a3@set-foo-idx*)))))))))))))))))))))))))) (set! aZ1764@verify-clauses (lambda (aZ176d@x aZ176e@cls*) (let ((aZ1772@valid-kwds '#f) (aZ1774@free-id-member? '#f)) (begin (set! aZ1772@valid-kwds (map aZd32@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! aZ1774@free-id-member? (lambda (aZ1789@x aZ178a@ls) (and (pair? aZ178a@ls) (or (aZb7b@free-id=? aZ1789@x (car aZ178a@ls)) (aZ1774@free-id-member? aZ1789@x (cdr aZ178a@ls)))))) (let aZ1779@f ((aZ1775@cls* aZ176e@cls*) (aZ1776@seen* '())) (if (not (null? aZ1775@cls*)) (let ((aZ177b@t (car aZ1775@cls*))) (let ((aZ177d@ls/false (aZd7c@syntax-dispatch aZ177b@t '(any . any)))) (if aZ177d@ls/false (apply (lambda (aZ177f@kwd aZ1780@rest) (if (or (not (aZb75@id? aZ177f@kwd)) (not (aZ1774@free-id-member? aZ177f@kwd aZ1772@valid-kwds))) (aZe5c@syntax-violation '#f '"not a valid define-record-type keyword" aZ177f@kwd) (if (aZb81@bound-id-member? aZ177f@kwd aZ1776@seen*) (aZe5c@syntax-violation '#f '"duplicate use of keyword " aZ176d@x aZ177f@kwd) (aZ1779@f (cdr aZ1775@cls*) (cons aZ177f@kwd aZ1776@seen*))))) aZ177d@ls/false) (let ((aZ1783@t aZ177b@t)) (let ((aZ1785@ls/false (aZd7c@syntax-dispatch aZ1783@t 'any))) (if aZ1785@ls/false (apply (lambda (aZ1787@cls) (aZe5c@syntax-violation '#f '"malformed define-record-type clause" aZ1787@cls)) aZ1785@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1783@t))))))) (void))))))) (let ((aZ1765@t aZ1741@x)) (let ((aZ1767@ls/false (aZd7c@syntax-dispatch aZ1765@t '(_ any . each-any)))) (if aZ1767@ls/false (apply (lambda (aZ1769@namespec aZ176a@clause*) (begin (aZ1764@verify-clauses aZ1741@x aZ176a@clause*) (aZ1762@do-define-record aZ1769@namespec aZ176a@clause*))) aZ1767@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1765@t)))))))) (set! aZ284c@aZd70@define-record-type-macro aZd70@define-record-type-macro) (set! aZd72@define-condition-type-macro (lambda (aZ193d@x) (let ((aZ1940@mkname '#f)) (begin (set! aZ1940@mkname (lambda (aZ196d@name aZ196e@suffix) (aZe60@datum->syntax aZ196d@name (string->symbol (string-append (symbol->string (aZe62@syntax->datum aZ196d@name)) aZ196e@suffix))))) (let ((aZ1941@t aZ193d@x)) (let ((aZ1943@ls/false (aZd7c@syntax-dispatch aZ1941@t '(any any any any any . #(each (any any)))))) (if (and aZ1943@ls/false (apply (lambda (aZ1945@ctxt aZ1946@name aZ1947@super aZ1948@constructor aZ1949@predicate aZ194a@field* aZ194b@accessor*) (and (aZb75@id? aZ1946@name) (aZb75@id? aZ1947@super) (aZb75@id? aZ1948@constructor) (aZb75@id? aZ1949@predicate) (for-all aZb75@id? aZ194a@field*) (for-all aZb75@id? aZ194b@accessor*))) aZ1943@ls/false)) (apply (lambda (aZ1953@ctxt aZ1954@name aZ1955@super aZ1956@constructor aZ1957@predicate aZ1958@field* aZ1959@accessor*) (let ((aZ1961@aux-accessor* (map (lambda (aZ1963@x) (gensym)) aZ1959@accessor*))) (aZd32@bless (cons 'begin (cons (cons 'define-record-type (cons (list aZ1954@name aZ1956@constructor (gensym)) (cons (list 'parent aZ1955@super) (cons (cons 'fields (map (lambda (aZ1965@field aZ1966@aux) (list 'immutable aZ1965@field aZ1966@aux)) aZ1958@field* aZ1961@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define aZ1957@predicate (list 'condition-predicate (list 'record-type-descriptor aZ1954@name))) (map (lambda (aZ1969@accessor aZ196a@aux) (list 'define aZ1969@accessor (list 'condition-accessor (list 'record-type-descriptor aZ1954@name) aZ196a@aux))) aZ1959@accessor* aZ1961@aux-accessor*))))))) aZ1943@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1941@t)))))))) (set! aZ284d@aZd72@define-condition-type-macro aZd72@define-condition-type-macro) (set! aZd74@incorrect-usage-macro (lambda (aZ1971@e) (aZe5c@syntax-violation '#f '"incorrect usage of auxiliary keyword" aZ1971@e))) (set! aZ284e@aZd74@incorrect-usage-macro aZd74@incorrect-usage-macro) (set! aZd76@parameterize-macro (lambda (aZ1973@e) (let ((aZ1975@t aZ1973@e)) (let ((aZ1977@ls/false (aZd7c@syntax-dispatch aZ1975@t '(_ () any . each-any)))) (if aZ1977@ls/false (apply (lambda (aZ1979@b aZ197a@b*) (aZd32@bless (cons 'let (cons '() (cons aZ1979@b aZ197a@b*))))) aZ1977@ls/false) (let ((aZ197d@t aZ1975@t)) (let ((aZ197f@ls/false (aZd7c@syntax-dispatch aZ197d@t '(_ #(each (any any)) any . each-any)))) (if aZ197f@ls/false (apply (lambda (aZ1981@olhs* aZ1982@orhs* aZ1983@b aZ1984@b*) (let ((aZ1989@lhs* (aZe4a@generate-temporaries aZ1981@olhs*)) (aZ198a@rhs* (aZe4a@generate-temporaries aZ1982@orhs*))) (aZd32@bless (cons (list 'lambda (append aZ1989@lhs* aZ198a@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (aZ198d@lhs aZ198e@rhs) (list 'let (list (list 't (list aZ198d@lhs))) (list aZ198d@lhs aZ198e@rhs) (cons 'set! (cons aZ198e@rhs '(t))))) aZ1989@lhs* aZ198a@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons aZ1983@b aZ1984@b*))) '(swap)))))) (append aZ1981@olhs* aZ1982@orhs*))))) aZ197f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ197d@t))))))))) (set! aZ284f@aZd76@parameterize-macro aZd76@parameterize-macro) (set! aZd78@foreign-call-transformer (lambda (aZ1991@e aZ1992@r aZ1993@mr) (let ((aZ1997@t aZ1991@e)) (let ((aZ1999@ls/false (aZd7c@syntax-dispatch aZ1997@t '(_ any . each-any)))) (if aZ1999@ls/false (apply (lambda (aZ199b@name aZ199c@arg*) (cons 'foreign-call (cons (aZd9e@chi-expr aZ199b@name aZ1992@r aZ1993@mr) (aZd9a@chi-expr* aZ199c@arg* aZ1992@r aZ1993@mr)))) aZ1999@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1997@t)))))) (set! aZ2850@aZd78@foreign-call-transformer aZd78@foreign-call-transformer) (set! aZd7a@convert-pattern (lambda (aZ199f@pattern aZ19a0@keys) (let ((aZ19a4@cvt* '#f) (aZ19a6@cvt '#f)) (begin (set! aZ19a4@cvt* (lambda (aZ1a43@p* aZ1a44@n aZ1a45@ids) (if (null? aZ1a43@p*) (values '() aZ1a45@ids) (call-with-values (lambda () (aZ19a4@cvt* (cdr aZ1a43@p*) aZ1a44@n aZ1a45@ids)) (lambda (aZ1a4d@aZ1a4a aZ1a4e@aZ1a4c) (let ((aZ1a51@ids aZ1a4e@aZ1a4c) (aZ1a52@y aZ1a4d@aZ1a4a)) (call-with-values (lambda () (aZ19a6@cvt (car aZ1a43@p*) aZ1a44@n aZ1a51@ids)) (lambda (aZ1a59@aZ1a56 aZ1a5a@aZ1a58) (let ((aZ1a5d@ids aZ1a5a@aZ1a58) (aZ1a5e@x aZ1a59@aZ1a56)) (values (cons aZ1a5e@x aZ1a52@y) aZ1a5d@ids)))))))))) (set! aZ19a6@cvt (lambda (aZ19a7@p aZ19a8@n aZ19a9@ids) (let ((aZ19ad@t aZ19a7@p)) (let ((aZ19af@ls/false (aZd7c@syntax-dispatch aZ19ad@t 'any))) (if (and aZ19af@ls/false (apply (lambda (aZ19b1@id) (aZb75@id? aZ19b1@id)) aZ19af@ls/false)) (apply (lambda (aZ19b3@id) (if (aZb81@bound-id-member? aZ19a7@p aZ19a0@keys) (values (vector 'free-id aZ19a7@p) aZ19a9@ids) (if (aZb7b@free-id=? aZ19a7@p (aZd04@scheme-stx '_)) (values '_ aZ19a9@ids) (values 'any (cons (cons aZ19a7@p aZ19a8@n) aZ19a9@ids))))) aZ19af@ls/false) (let ((aZ19b5@t aZ19ad@t)) (let ((aZ19b7@ls/false (aZd7c@syntax-dispatch aZ19b5@t '(any any)))) (if (and aZ19b7@ls/false (apply (lambda (aZ19b9@p aZ19ba@dots) (aZd7e@ellipsis? aZ19ba@dots)) aZ19b7@ls/false)) (apply (lambda (aZ19bd@p aZ19be@dots) (call-with-values (lambda () (aZ19a6@cvt aZ19bd@p (+ aZ19a8@n '1) aZ19a9@ids)) (lambda (aZ19c5@aZ19c2 aZ19c6@aZ19c4) (let ((aZ19c9@ids aZ19c6@aZ19c4) (aZ19ca@p aZ19c5@aZ19c2)) (values (if (eq? aZ19ca@p 'any) 'each-any (vector 'each aZ19ca@p)) aZ19c9@ids))))) aZ19b7@ls/false) (let ((aZ19cd@t aZ19b5@t)) (let ((aZ19cf@ls/false (aZd7c@syntax-dispatch aZ19cd@t '(any any . #(each+ any () any))))) (if (and aZ19cf@ls/false (apply (lambda (aZ19d1@x aZ19d2@dots aZ19d3@ys aZ19d4@z) (aZd7e@ellipsis? aZ19d2@dots)) aZ19cf@ls/false)) (apply (lambda (aZ19d9@x aZ19da@dots aZ19db@ys aZ19dc@z) (call-with-values (lambda () (aZ19a6@cvt aZ19dc@z aZ19a8@n aZ19a9@ids)) (lambda (aZ19e5@aZ19e2 aZ19e6@aZ19e4) (let ((aZ19e9@ids aZ19e6@aZ19e4) (aZ19ea@z aZ19e5@aZ19e2)) (call-with-values (lambda () (aZ19a4@cvt* aZ19db@ys aZ19a8@n aZ19e9@ids)) (lambda (aZ19f1@aZ19ee aZ19f2@aZ19f0) (let ((aZ19f5@ids aZ19f2@aZ19f0) (aZ19f6@ys aZ19f1@aZ19ee)) (call-with-values (lambda () (aZ19a6@cvt aZ19d9@x (+ aZ19a8@n '1) aZ19f5@ids)) (lambda (aZ19fd@aZ19fa aZ19fe@aZ19fc) (let ((aZ1a01@ids aZ19fe@aZ19fc) (aZ1a02@x aZ19fd@aZ19fa)) (values (vector 'each+ aZ1a02@x (reverse aZ19f6@ys) aZ19ea@z) aZ1a01@ids))))))))))) aZ19cf@ls/false) (let ((aZ1a05@t aZ19cd@t)) (let ((aZ1a07@ls/false (aZd7c@syntax-dispatch aZ1a05@t '(any . any)))) (if aZ1a07@ls/false (apply (lambda (aZ1a09@x aZ1a0a@y) (call-with-values (lambda () (aZ19a6@cvt aZ1a0a@y aZ19a8@n aZ19a9@ids)) (lambda (aZ1a11@aZ1a0e aZ1a12@aZ1a10) (let ((aZ1a15@ids aZ1a12@aZ1a10) (aZ1a16@y aZ1a11@aZ1a0e)) (call-with-values (lambda () (aZ19a6@cvt aZ1a09@x aZ19a8@n aZ1a15@ids)) (lambda (aZ1a1d@aZ1a1a aZ1a1e@aZ1a1c) (let ((aZ1a21@ids aZ1a1e@aZ1a1c) (aZ1a22@x aZ1a1d@aZ1a1a)) (values (cons aZ1a22@x aZ1a16@y) aZ1a21@ids)))))))) aZ1a07@ls/false) (let ((aZ1a25@t aZ1a05@t)) (let ((aZ1a27@ls/false (aZd7c@syntax-dispatch aZ1a25@t '()))) (if aZ1a27@ls/false (apply (lambda () (values '() aZ19a9@ids)) aZ1a27@ls/false) (let ((aZ1a29@t aZ1a25@t)) (let ((aZ1a2b@ls/false (aZd7c@syntax-dispatch aZ1a29@t '#(vector each-any)))) (if (and aZ1a2b@ls/false (apply (lambda (aZ1a2d@p) (not (aZb41@stx? aZ1a2d@p))) aZ1a2b@ls/false)) (apply (lambda (aZ1a2f@p) (call-with-values (lambda () (aZ19a6@cvt aZ1a2f@p aZ19a8@n aZ19a9@ids)) (lambda (aZ1a35@aZ1a32 aZ1a36@aZ1a34) (let ((aZ1a39@ids aZ1a36@aZ1a34) (aZ1a3a@p aZ1a35@aZ1a32)) (values (vector 'vector aZ1a3a@p) aZ1a39@ids))))) aZ1a2b@ls/false) (let ((aZ1a3d@t aZ1a29@t)) (let ((aZ1a3f@ls/false (aZd7c@syntax-dispatch aZ1a3d@t 'any))) (if aZ1a3f@ls/false (apply (lambda (aZ1a41@datum) (values (vector 'atom (aZb89@stx->datum aZ1a41@datum)) aZ19a9@ids)) aZ1a3f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1a3d@t)))))))))))))))))))))))) (aZ19a6@cvt aZ199f@pattern '0 '()))))) (set! aZ2851@aZd7a@convert-pattern aZd7a@convert-pattern) (set! aZd7c@syntax-dispatch (let ((aZ1a62@stx^ '#f) (aZ1a64@match-each '#f) (aZ1a66@match-each+ '#f) (aZ1a68@match-each-any '#f) (aZ1a6a@match-empty '#f) (aZ1a6c@combine '#f) (aZ1a6e@match* '#f) (aZ1a70@match '#f)) (begin (set! aZ1a62@stx^ (lambda (aZ1b3d@e aZ1b3e@m* aZ1b3f@s* aZ1b40@ae*) (if (and (null? aZ1b3e@m*) (null? aZ1b3f@s*) (null? aZ1b40@ae*)) aZ1b3d@e (aZb5d@mkstx aZ1b3d@e aZ1b3e@m* aZ1b3f@s* aZ1b40@ae*)))) (set! aZ1a64@match-each (lambda (aZ1b1d@e aZ1b1e@p aZ1b1f@m* aZ1b20@s* aZ1b21@ae*) (if (pair? aZ1b1d@e) (let ((aZ1b27@first (aZ1a70@match (car aZ1b1d@e) aZ1b1e@p aZ1b1f@m* aZ1b20@s* aZ1b21@ae* '()))) (and aZ1b27@first (let ((aZ1b29@rest (aZ1a64@match-each (cdr aZ1b1d@e) aZ1b1e@p aZ1b1f@m* aZ1b20@s* aZ1b21@ae*))) (and aZ1b29@rest (cons aZ1b27@first aZ1b29@rest))))) (if (null? aZ1b1d@e) '() (if (aZb41@stx? aZ1b1d@e) (and (not (aZafb@top-marked? aZ1b1f@m*)) (call-with-values (lambda () (join-wraps aZ1b1f@m* aZ1b20@s* aZ1b21@ae* aZ1b1d@e)) (lambda (aZ1b31@aZ1b2c aZ1b32@aZ1b2e aZ1b33@aZ1b30) (let ((aZ1b37@ae* aZ1b33@aZ1b30) (aZ1b38@s* aZ1b32@aZ1b2e) (aZ1b39@m* aZ1b31@aZ1b2c)) (aZ1a64@match-each (aZb43@stx-expr aZ1b1d@e) aZ1b1e@p aZ1b39@m* aZ1b38@s* aZ1b37@ae*))))) (if (aZ6b3@aZ585@annotation? aZ1b1d@e) (aZ1a64@match-each (aZ6b5@aZ589@annotation-expression aZ1b1d@e) aZ1b1e@p aZ1b1f@m* aZ1b20@s* aZ1b21@ae*) '#f)))))) (set! aZ1a66@match-each+ (lambda (aZ1add@e aZ1ade@x-pat aZ1adf@y-pat aZ1ae0@z-pat aZ1ae1@m* aZ1ae2@s* aZ1ae3@ae* aZ1ae4@r) (let aZ1af5@f ((aZ1aed@e aZ1add@e) (aZ1aee@m* aZ1ae1@m*) (aZ1aef@s* aZ1ae2@s*) (aZ1af0@ae* aZ1ae3@ae*)) (if (pair? aZ1aed@e) (call-with-values (lambda () (aZ1af5@f (cdr aZ1aed@e) aZ1aee@m* aZ1aef@s* aZ1af0@ae*)) (lambda (aZ1afd@aZ1af8 aZ1afe@aZ1afa aZ1aff@aZ1afc) (let ((aZ1b03@r aZ1aff@aZ1afc) (aZ1b04@y-pat aZ1afe@aZ1afa) (aZ1b05@xr* aZ1afd@aZ1af8)) (if aZ1b03@r (if (null? aZ1b04@y-pat) (let ((aZ1b09@xr (aZ1a70@match (car aZ1aed@e) aZ1ade@x-pat aZ1aee@m* aZ1aef@s* aZ1af0@ae* '()))) (if aZ1b09@xr (values (cons aZ1b09@xr aZ1b05@xr*) aZ1b04@y-pat aZ1b03@r) (values '#f '#f '#f))) (values '() (cdr aZ1b04@y-pat) (aZ1a70@match (car aZ1aed@e) (car aZ1b04@y-pat) aZ1aee@m* aZ1aef@s* aZ1af0@ae* aZ1b03@r))) (values '#f '#f '#f))))) (if (aZb41@stx? aZ1aed@e) (if (aZafb@top-marked? aZ1aee@m*) (values '() aZ1adf@y-pat (aZ1a70@match aZ1aed@e aZ1ae0@z-pat aZ1aee@m* aZ1aef@s* aZ1af0@ae* aZ1ae4@r)) (call-with-values (lambda () (join-wraps aZ1aee@m* aZ1aef@s* aZ1af0@ae* aZ1aed@e)) (lambda (aZ1b11@aZ1b0c aZ1b12@aZ1b0e aZ1b13@aZ1b10) (let ((aZ1b17@ae* aZ1b13@aZ1b10) (aZ1b18@s* aZ1b12@aZ1b0e) (aZ1b19@m* aZ1b11@aZ1b0c)) (aZ1af5@f (aZb43@stx-expr aZ1aed@e) aZ1b19@m* aZ1b18@s* aZ1b17@ae*))))) (if (aZ6b3@aZ585@annotation? aZ1aed@e) (aZ1af5@f (aZ6b5@aZ589@annotation-expression aZ1aed@e) aZ1aee@m* aZ1aef@s* aZ1af0@ae*) (values '() aZ1adf@y-pat (aZ1a70@match aZ1aed@e aZ1ae0@z-pat aZ1aee@m* aZ1aef@s* aZ1af0@ae* aZ1ae4@r)))))))) (set! aZ1a68@match-each-any (lambda (aZ1ac1@e aZ1ac2@m* aZ1ac3@s* aZ1ac4@ae*) (if (pair? aZ1ac1@e) (let ((aZ1ac9@l (aZ1a68@match-each-any (cdr aZ1ac1@e) aZ1ac2@m* aZ1ac3@s* aZ1ac4@ae*))) (and aZ1ac9@l (cons (aZ1a62@stx^ (car aZ1ac1@e) aZ1ac2@m* aZ1ac3@s* aZ1ac4@ae*) aZ1ac9@l))) (if (null? aZ1ac1@e) '() (if (aZb41@stx? aZ1ac1@e) (and (not (aZafb@top-marked? aZ1ac2@m*)) (call-with-values (lambda () (join-wraps aZ1ac2@m* aZ1ac3@s* aZ1ac4@ae* aZ1ac1@e)) (lambda (aZ1ad1@aZ1acc aZ1ad2@aZ1ace aZ1ad3@aZ1ad0) (let ((aZ1ad7@ae* aZ1ad3@aZ1ad0) (aZ1ad8@s* aZ1ad2@aZ1ace) (aZ1ad9@m* aZ1ad1@aZ1acc)) (aZ1a68@match-each-any (aZb43@stx-expr aZ1ac1@e) aZ1ad9@m* aZ1ad8@s* aZ1ad7@ae*))))) (if (aZ6b3@aZ585@annotation? aZ1ac1@e) (aZ1a68@match-each-any (aZ6b5@aZ589@annotation-expression aZ1ac1@e) aZ1ac2@m* aZ1ac3@s* aZ1ac4@ae*) '#f)))))) (set! aZ1a6a@match-empty (lambda (aZ1abb@p aZ1abc@r) (if (null? aZ1abb@p) aZ1abc@r (if (eq? aZ1abb@p '_) aZ1abc@r (if (eq? aZ1abb@p 'any) (cons '() aZ1abc@r) (if (pair? aZ1abb@p) (aZ1a6a@match-empty (car aZ1abb@p) (aZ1a6a@match-empty (cdr aZ1abb@p) aZ1abc@r)) (if (eq? aZ1abb@p 'each-any) (cons '() aZ1abc@r) (let ((aZ1abf@t (vector-ref aZ1abb@p '0))) (if (memv aZ1abf@t '(each)) (aZ1a6a@match-empty (vector-ref aZ1abb@p '1) aZ1abc@r) (if (memv aZ1abf@t '(each+)) (aZ1a6a@match-empty (vector-ref aZ1abb@p '1) (aZ1a6a@match-empty (reverse (vector-ref aZ1abb@p '2)) (aZ1a6a@match-empty (vector-ref aZ1abb@p '3) aZ1abc@r))) (if (memv aZ1abf@t '(free-id atom)) aZ1abc@r (if (memv aZ1abf@t '(scheme-id atom)) aZ1abc@r (if (memv aZ1abf@t '(vector)) (aZ1a6a@match-empty (vector-ref aZ1abb@p '1) aZ1abc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" aZ1abb@p)))))))))))))) (set! aZ1a6c@combine (lambda (aZ1ab7@r* aZ1ab8@r) (if (null? (car aZ1ab7@r*)) aZ1ab8@r (cons (map car aZ1ab7@r*) (aZ1a6c@combine (map cdr aZ1ab7@r*) aZ1ab8@r))))) (set! aZ1a6e@match* (lambda (aZ1a93@e aZ1a94@p aZ1a95@m* aZ1a96@s* aZ1a97@ae* aZ1a98@r) (if (null? aZ1a94@p) (and (null? aZ1a93@e) aZ1a98@r) (if (pair? aZ1a94@p) (and (pair? aZ1a93@e) (aZ1a70@match (car aZ1a93@e) (car aZ1a94@p) aZ1a95@m* aZ1a96@s* aZ1a97@ae* (aZ1a70@match (cdr aZ1a93@e) (cdr aZ1a94@p) aZ1a95@m* aZ1a96@s* aZ1a97@ae* aZ1a98@r))) (if (eq? aZ1a94@p 'each-any) (let ((aZ1a9f@l (aZ1a68@match-each-any aZ1a93@e aZ1a95@m* aZ1a96@s* aZ1a97@ae*))) (and aZ1a9f@l (cons aZ1a9f@l aZ1a98@r))) (let ((aZ1aa1@t (vector-ref aZ1a94@p '0))) (if (memv aZ1aa1@t '(each)) (if (null? aZ1a93@e) (aZ1a6a@match-empty (vector-ref aZ1a94@p '1) aZ1a98@r) (let ((aZ1aa3@r* (aZ1a64@match-each aZ1a93@e (vector-ref aZ1a94@p '1) aZ1a95@m* aZ1a96@s* aZ1a97@ae*))) (and aZ1aa3@r* (aZ1a6c@combine aZ1aa3@r* aZ1a98@r)))) (if (memv aZ1aa1@t '(free-id)) (and (symbol? aZ1a93@e) (aZafb@top-marked? aZ1a95@m*) (aZb7b@free-id=? (aZ1a62@stx^ aZ1a93@e aZ1a95@m* aZ1a96@s* aZ1a97@ae*) (vector-ref aZ1a94@p '1)) aZ1a98@r) (if (memv aZ1aa1@t '(scheme-id)) (and (symbol? aZ1a93@e) (aZafb@top-marked? aZ1a95@m*) (aZb7b@free-id=? (aZ1a62@stx^ aZ1a93@e aZ1a95@m* aZ1a96@s* aZ1a97@ae*) (aZd04@scheme-stx (vector-ref aZ1a94@p '1))) aZ1a98@r) (if (memv aZ1aa1@t '(each+)) (call-with-values (lambda () (aZ1a66@match-each+ aZ1a93@e (vector-ref aZ1a94@p '1) (vector-ref aZ1a94@p '2) (vector-ref aZ1a94@p '3) aZ1a95@m* aZ1a96@s* aZ1a97@ae* aZ1a98@r)) (lambda (aZ1aab@aZ1aa6 aZ1aac@aZ1aa8 aZ1aad@aZ1aaa) (let ((aZ1ab1@r aZ1aad@aZ1aaa) (aZ1ab2@y-pat aZ1aac@aZ1aa8) (aZ1ab3@xr* aZ1aab@aZ1aa6)) (and aZ1ab1@r (null? aZ1ab2@y-pat) (if (null? aZ1ab3@xr*) (aZ1a6a@match-empty (vector-ref aZ1a94@p '1) aZ1ab1@r) (aZ1a6c@combine aZ1ab3@xr* aZ1ab1@r)))))) (if (memv aZ1aa1@t '(atom)) (and (fast-equal? (vector-ref aZ1a94@p '1) (aZb87@strip aZ1a93@e aZ1a95@m*)) aZ1a98@r) (if (memv aZ1aa1@t '(vector)) (and (vector? aZ1a93@e) (aZ1a70@match (vector->list aZ1a93@e) (vector-ref aZ1a94@p '1) aZ1a95@m* aZ1a96@s* aZ1a97@ae* aZ1a98@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" aZ1a94@p))))))))))))) (set! aZ1a70@match (lambda (aZ1a75@e aZ1a76@p aZ1a77@m* aZ1a78@s* aZ1a79@ae* aZ1a7a@r) (if (not aZ1a7a@r) '#f (if (eq? aZ1a76@p '_) aZ1a7a@r (if (eq? aZ1a76@p 'any) (cons (aZ1a62@stx^ aZ1a75@e aZ1a77@m* aZ1a78@s* aZ1a79@ae*) aZ1a7a@r) (if (aZb41@stx? aZ1a75@e) (and (not (aZafb@top-marked? aZ1a77@m*)) (call-with-values (lambda () (join-wraps aZ1a77@m* aZ1a78@s* aZ1a79@ae* aZ1a75@e)) (lambda (aZ1a87@aZ1a82 aZ1a88@aZ1a84 aZ1a89@aZ1a86) (let ((aZ1a8d@ae* aZ1a89@aZ1a86) (aZ1a8e@s* aZ1a88@aZ1a84) (aZ1a8f@m* aZ1a87@aZ1a82)) (aZ1a70@match (aZb43@stx-expr aZ1a75@e) aZ1a76@p aZ1a8f@m* aZ1a8e@s* aZ1a8d@ae* aZ1a7a@r))))) (if (aZ6b3@aZ585@annotation? aZ1a75@e) (aZ1a70@match (aZ6b5@aZ589@annotation-expression aZ1a75@e) aZ1a76@p aZ1a77@m* aZ1a78@s* aZ1a79@ae* aZ1a7a@r) (aZ1a6e@match* aZ1a75@e aZ1a76@p aZ1a77@m* aZ1a78@s* aZ1a79@ae* aZ1a7a@r)))))))) (lambda (aZ1a71@e aZ1a72@p) (aZ1a70@match aZ1a71@e aZ1a72@p '() '() '() '()))))) (set! aZ2852@aZd7c@syntax-dispatch aZd7c@syntax-dispatch) (set! aZd7e@ellipsis? (lambda (aZ1b45@x) (and (aZb75@id? aZ1b45@x) (aZb7b@free-id=? aZ1b45@x (aZd04@scheme-stx '...))))) (set! aZ2853@aZd7e@ellipsis? aZd7e@ellipsis?) (set! aZd80@underscore? (lambda (aZ1b47@x) (and (aZb75@id? aZ1b47@x) (aZb7b@free-id=? aZ1b47@x (aZd04@scheme-stx '_))))) (set! aZ2854@aZd80@underscore? aZd80@underscore?) (set! aZd82@verify-literals (lambda (aZ1b49@lits aZ1b4a@expr) (for-each (lambda (aZ1b4d@x) (if (or (not (aZb75@id? aZ1b4d@x)) (aZd7e@ellipsis? aZ1b4d@x) (aZd80@underscore? aZ1b4d@x)) (aZe5c@syntax-violation '#f '"invalid literal" aZ1b4a@expr aZ1b4d@x) (void))) aZ1b49@lits))) (set! aZ2855@aZd82@verify-literals aZd82@verify-literals) (set! aZd84@syntax-case-transformer (let ((aZ1b50@build-dispatch-call '#f) (aZ1b52@invalid-ids-error '#f) (aZ1b54@gen-clause '#f) (aZ1b56@gen-syntax-case '#f)) (begin (set! aZ1b50@build-dispatch-call (lambda (aZ1bc1@pvars aZ1bc2@expr aZ1bc3@y aZ1bc4@r aZ1bc5@mr) (let ((aZ1bcb@ids (map car aZ1bc1@pvars)) (aZ1bcc@levels (map cdr aZ1bc1@pvars))) (let ((aZ1bcf@labels (map aZb01@gen-label aZ1bcb@ids)) (aZ1bd0@new-vars (map aZafd@gen-lexical aZ1bcb@ids))) (let ((aZ1bd3@body (aZd9e@chi-expr (aZb61@add-subst (aZb35@make-full-rib aZ1bcb@ids aZ1bcf@labels) aZ1bc2@expr) (append (map (lambda (aZ1bd5@label aZ1bd6@var aZ1bd7@level) (cons aZ1bd5@label (aZb8f@make-binding 'syntax (cons aZ1bd6@var aZ1bd7@level)))) aZ1bcf@labels aZ1bd0@new-vars (map cdr aZ1bc1@pvars)) aZ1bc4@r) aZ1bc5@mr))) (list '(primitive apply) (aZad8@aZa04@build-lambda '#f aZ1bd0@new-vars aZ1bd3@body) aZ1bc3@y)))))) (set! aZ1b52@invalid-ids-error (lambda (aZ1bb5@id* aZ1bb6@e aZ1bb7@class) (let aZ1bbf@find ((aZ1bbb@id* aZ1bb5@id*) (aZ1bbc@ok* '())) (if (null? aZ1bbb@id*) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1bb6@e) (if (aZb75@id? (car aZ1bbb@id*)) (if (aZb81@bound-id-member? (car aZ1bbb@id*) aZ1bbc@ok*) (aZe58@syntax-error (car aZ1bbb@id*) '"duplicate " aZ1bb7@class) (aZ1bbf@find (cdr aZ1bbb@id*) (cons (car aZ1bbb@id*) aZ1bbc@ok*))) (aZe58@syntax-error (car aZ1bbb@id*) '"invalid " aZ1bb7@class)))))) (set! aZ1b54@gen-clause (lambda (aZ1b8d@x aZ1b8e@keys aZ1b8f@clauses aZ1b90@r aZ1b91@mr aZ1b92@pat aZ1b93@fender aZ1b94@expr) (call-with-values (lambda () (aZd7a@convert-pattern aZ1b92@pat aZ1b8e@keys)) (lambda (aZ1ba1@aZ1b9e aZ1ba2@aZ1ba0) (let ((aZ1ba5@pvars aZ1ba2@aZ1ba0) (aZ1ba6@p aZ1ba1@aZ1b9e)) (if (not (aZb7f@distinct-bound-ids? (map car aZ1ba5@pvars))) (aZ1b52@invalid-ids-error (map car aZ1ba5@pvars) aZ1b92@pat '"pattern variable") (if (not (for-all (lambda (aZ1ba9@x) (not (aZd7e@ellipsis? (car aZ1ba9@x)))) aZ1ba5@pvars)) (aZe5c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" aZ1b92@pat) (let ((aZ1bab@y (aZafd@gen-lexical 'tmp))) (let ((aZ1bad@test (if (eq? aZ1b93@fender '#t) aZ1bab@y (let ((aZ1baf@call (aZ1b50@build-dispatch-call aZ1ba5@pvars aZ1b93@fender aZ1bab@y aZ1b90@r aZ1b91@mr))) (list 'if aZ1bab@y aZ1baf@call (list 'quote '#f)))))) (let ((aZ1bb1@conseq (aZ1b50@build-dispatch-call aZ1ba5@pvars aZ1b94@expr aZ1bab@y aZ1b90@r aZ1b91@mr))) (let ((aZ1bb3@altern (aZ1b56@gen-syntax-case aZ1b8d@x aZ1b8e@keys aZ1b8f@clauses aZ1b90@r aZ1b91@mr))) (list (aZad8@aZa04@build-lambda '#f (list aZ1bab@y) (list 'if aZ1bad@test aZ1bb1@conseq aZ1bb3@altern)) (list '(primitive syntax-dispatch) aZ1b8d@x (list 'quote aZ1ba6@p)))))))))))))) (set! aZ1b56@gen-syntax-case (lambda (aZ1b6b@x aZ1b6c@keys aZ1b6d@clauses aZ1b6e@r aZ1b6f@mr) (if (null? aZ1b6d@clauses) (list '(primitive syntax-error) aZ1b6b@x) (let ((aZ1b75@t (car aZ1b6d@clauses))) (let ((aZ1b77@ls/false (aZd7c@syntax-dispatch aZ1b75@t '(any any)))) (if aZ1b77@ls/false (apply (lambda (aZ1b79@pat aZ1b7a@expr) (if (and (aZb75@id? aZ1b79@pat) (not (aZb81@bound-id-member? aZ1b79@pat aZ1b6c@keys)) (not (aZd7e@ellipsis? aZ1b79@pat))) (if (aZb7b@free-id=? aZ1b79@pat (aZd04@scheme-stx '_)) (aZd9e@chi-expr aZ1b7a@expr aZ1b6e@r aZ1b6f@mr) (let ((aZ1b7d@lab (aZb01@gen-label aZ1b79@pat)) (aZ1b7e@lex (aZafd@gen-lexical aZ1b79@pat))) (let ((aZ1b81@body (aZd9e@chi-expr (aZb61@add-subst (aZb35@make-full-rib (list aZ1b79@pat) (list aZ1b7d@lab)) aZ1b7a@expr) (cons (cons aZ1b7d@lab (aZb8f@make-binding 'syntax (cons aZ1b7e@lex '0))) aZ1b6e@r) aZ1b6f@mr))) (list (aZad8@aZa04@build-lambda '#f (list aZ1b7e@lex) aZ1b81@body) aZ1b6b@x)))) (aZ1b54@gen-clause aZ1b6b@x aZ1b6c@keys (cdr aZ1b6d@clauses) aZ1b6e@r aZ1b6f@mr aZ1b79@pat '#t aZ1b7a@expr))) aZ1b77@ls/false) (let ((aZ1b83@t aZ1b75@t)) (let ((aZ1b85@ls/false (aZd7c@syntax-dispatch aZ1b83@t '(any any any)))) (if aZ1b85@ls/false (apply (lambda (aZ1b87@pat aZ1b88@fender aZ1b89@expr) (aZ1b54@gen-clause aZ1b6b@x aZ1b6c@keys (cdr aZ1b6d@clauses) aZ1b6e@r aZ1b6f@mr aZ1b87@pat aZ1b88@fender aZ1b89@expr)) aZ1b85@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1b83@t)))))))))) (lambda (aZ1b57@e aZ1b58@r aZ1b59@mr) (let ((aZ1b5d@t aZ1b57@e)) (let ((aZ1b5f@ls/false (aZd7c@syntax-dispatch aZ1b5d@t '(_ any each-any . each-any)))) (if aZ1b5f@ls/false (apply (lambda (aZ1b61@expr aZ1b62@keys aZ1b63@clauses) (begin (aZd82@verify-literals aZ1b62@keys aZ1b57@e) (let ((aZ1b67@x (aZafd@gen-lexical 'tmp))) (let ((aZ1b69@body (aZ1b56@gen-syntax-case aZ1b67@x aZ1b62@keys aZ1b63@clauses aZ1b58@r aZ1b59@mr))) (list (aZad8@aZa04@build-lambda '#f (list aZ1b67@x) aZ1b69@body) (aZd9e@chi-expr aZ1b61@expr aZ1b58@r aZ1b59@mr)))))) aZ1b5f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1b5d@t)))))))) (set! aZ2856@aZd84@syntax-case-transformer aZd84@syntax-case-transformer) (set! aZd86@ellipsis-map (lambda (aZ1bdb@proc aZ1bdc@ls . aZ1bdf@ls*) (let ((aZ1be2@who '#f)) (begin (set! aZ1be2@who '...) (begin (if (not (list? aZ1bdc@ls)) (assertion-violation aZ1be2@who '"not a list" aZ1bdc@ls) (void)) (if (not (null? aZ1bdf@ls*)) (let ((aZ1be3@n (length aZ1bdc@ls))) (for-each (lambda (aZ1be5@x) (begin (if (not (list? aZ1be5@x)) (assertion-violation aZ1be2@who '"not a list" aZ1be5@x) (void)) (if (not (= (length aZ1be5@x) aZ1be3@n)) (assertion-violation aZ1be2@who '"length mismatch" aZ1bdc@ls aZ1be5@x) (void)))) aZ1bdf@ls*)) (void)) (apply map aZ1bdb@proc aZ1bdc@ls aZ1bdf@ls*)))))) (set! aZ2857@aZd86@ellipsis-map aZd86@ellipsis-map) (set! aZd88@syntax-transformer (let ((aZ1be8@gen-syntax '#f) (aZ1bea@gen-ref '#f) (aZ1bec@gen-append '#f) (aZ1bee@gen-mappend '#f) (aZ1bf0@gen-map '#f) (aZ1bf2@gen-cons '#f) (aZ1bf4@gen-vector '#f) (aZ1bf6@regen '#f)) (begin (set! aZ1be8@gen-syntax (lambda (aZ1c5f@src aZ1c60@e aZ1c61@r aZ1c62@maps aZ1c63@ellipsis? aZ1c64@vec?) (let ((aZ1c6b@t aZ1c60@e)) (let ((aZ1c6d@ls/false (aZd7c@syntax-dispatch aZ1c6b@t 'any))) (if (and aZ1c6d@ls/false (apply (lambda (aZ1c6f@dots) (aZ1c63@ellipsis? aZ1c6f@dots)) aZ1c6d@ls/false)) (apply (lambda (aZ1c71@dots) (aZe5c@syntax-violation '#f '"misplaced ellipsis in syntax form" aZ1c5f@src)) aZ1c6d@ls/false) (let ((aZ1c73@t aZ1c6b@t)) (let ((aZ1c75@ls/false (aZd7c@syntax-dispatch aZ1c73@t 'any))) (if (and aZ1c75@ls/false (apply (lambda (aZ1c77@id) (aZb75@id? aZ1c77@id)) aZ1c75@ls/false)) (apply (lambda (aZ1c79@id) (let ((aZ1c7b@label (aZb8b@id->label aZ1c60@e))) (let ((aZ1c7d@b (aZb8d@label->binding aZ1c7b@label aZ1c61@r))) (if (eq? (aZb91@binding-type aZ1c7d@b) 'syntax) (call-with-values (lambda () (let ((aZ1c83@var.lev (aZb93@binding-value aZ1c7d@b))) (aZ1bea@gen-ref aZ1c5f@src (car aZ1c83@var.lev) (cdr aZ1c83@var.lev) aZ1c62@maps))) (lambda (aZ1c85@aZ1c80 aZ1c86@aZ1c82) (let ((aZ1c89@maps aZ1c86@aZ1c82) (aZ1c8a@var aZ1c85@aZ1c80)) (values (list 'ref aZ1c8a@var) aZ1c89@maps)))) (values (list 'quote aZ1c60@e) aZ1c62@maps))))) aZ1c75@ls/false) (let ((aZ1c8d@t aZ1c73@t)) (let ((aZ1c8f@ls/false (aZd7c@syntax-dispatch aZ1c8d@t '(any any)))) (if (and aZ1c8f@ls/false (apply (lambda (aZ1c91@dots aZ1c92@e) (aZ1c63@ellipsis? aZ1c91@dots)) aZ1c8f@ls/false)) (apply (lambda (aZ1c95@dots aZ1c96@e) (if aZ1c64@vec? (aZe5c@syntax-violation '#f '"misplaced ellipsis in syntax form" aZ1c5f@src) (aZ1be8@gen-syntax aZ1c5f@src aZ1c96@e aZ1c61@r aZ1c62@maps (lambda (aZ1c99@x) '#f) '#f))) aZ1c8f@ls/false) (let ((aZ1c9b@t aZ1c8d@t)) (let ((aZ1c9d@ls/false (aZd7c@syntax-dispatch aZ1c9b@t '(any any . any)))) (if (and aZ1c9d@ls/false (apply (lambda (aZ1c9f@x aZ1ca0@dots aZ1ca1@y) (aZ1c63@ellipsis? aZ1ca0@dots)) aZ1c9d@ls/false)) (apply (lambda (aZ1ca5@x aZ1ca6@dots aZ1ca7@y) (let aZ1cbd@f ((aZ1cab@y aZ1ca7@y) (aZ1cac@k (lambda (aZ1caf@maps) (call-with-values (lambda () (aZ1be8@gen-syntax aZ1c5f@src aZ1ca5@x aZ1c61@r (cons '() aZ1caf@maps) aZ1c63@ellipsis? '#f)) (lambda (aZ1cb5@aZ1cb2 aZ1cb6@aZ1cb4) (let ((aZ1cb9@maps aZ1cb6@aZ1cb4) (aZ1cba@x aZ1cb5@aZ1cb2)) (if (null? (car aZ1cb9@maps)) (aZe5c@syntax-violation '#f '"extra ellipsis in syntax form" aZ1c5f@src) (values (aZ1bf0@gen-map aZ1cba@x (car aZ1cb9@maps)) (cdr aZ1cb9@maps))))))))) (let ((aZ1cbf@t aZ1cab@y)) (let ((aZ1cc1@ls/false (aZd7c@syntax-dispatch aZ1cbf@t '()))) (if aZ1cc1@ls/false (apply (lambda () (aZ1cac@k aZ1c62@maps)) aZ1cc1@ls/false) (let ((aZ1cc3@t aZ1cbf@t)) (let ((aZ1cc5@ls/false (aZd7c@syntax-dispatch aZ1cc3@t '(any . any)))) (if (and aZ1cc5@ls/false (apply (lambda (aZ1cc7@dots aZ1cc8@y) (aZ1c63@ellipsis? aZ1cc7@dots)) aZ1cc5@ls/false)) (apply (lambda (aZ1ccb@dots aZ1ccc@y) (aZ1cbd@f aZ1ccc@y (lambda (aZ1ccf@maps) (call-with-values (lambda () (aZ1cac@k (cons '() aZ1ccf@maps))) (lambda (aZ1cd5@aZ1cd2 aZ1cd6@aZ1cd4) (let ((aZ1cd9@maps aZ1cd6@aZ1cd4) (aZ1cda@x aZ1cd5@aZ1cd2)) (if (null? (car aZ1cd9@maps)) (aZe5c@syntax-violation '#f '"extra ellipsis in syntax form" aZ1c5f@src) (values (aZ1bee@gen-mappend aZ1cda@x (car aZ1cd9@maps)) (cdr aZ1cd9@maps))))))))) aZ1cc5@ls/false) (let ((aZ1cdd@t aZ1cc3@t)) (let ((aZ1cdf@ls/false (aZd7c@syntax-dispatch aZ1cdd@t '_))) (if aZ1cdf@ls/false (apply (lambda () (call-with-values (lambda () (aZ1be8@gen-syntax aZ1c5f@src aZ1cab@y aZ1c61@r aZ1c62@maps aZ1c63@ellipsis? aZ1c64@vec?)) (lambda (aZ1ce5@aZ1ce2 aZ1ce6@aZ1ce4) (let ((aZ1ce9@maps aZ1ce6@aZ1ce4) (aZ1cea@y aZ1ce5@aZ1ce2)) (call-with-values (lambda () (aZ1cac@k aZ1ce9@maps)) (lambda (aZ1cf1@aZ1cee aZ1cf2@aZ1cf0) (let ((aZ1cf5@maps aZ1cf2@aZ1cf0) (aZ1cf6@x aZ1cf1@aZ1cee)) (values (aZ1bec@gen-append aZ1cf6@x aZ1cea@y) aZ1cf5@maps)))))))) aZ1cdf@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1cdd@t)))))))))))) aZ1c9d@ls/false) (let ((aZ1cf9@t aZ1c9b@t)) (let ((aZ1cfb@ls/false (aZd7c@syntax-dispatch aZ1cf9@t '(any . any)))) (if aZ1cfb@ls/false (apply (lambda (aZ1cfd@x aZ1cfe@y) (call-with-values (lambda () (aZ1be8@gen-syntax aZ1c5f@src aZ1cfd@x aZ1c61@r aZ1c62@maps aZ1c63@ellipsis? '#f)) (lambda (aZ1d05@aZ1d02 aZ1d06@aZ1d04) (let ((aZ1d09@maps aZ1d06@aZ1d04) (aZ1d0a@xnew aZ1d05@aZ1d02)) (call-with-values (lambda () (aZ1be8@gen-syntax aZ1c5f@src aZ1cfe@y aZ1c61@r aZ1d09@maps aZ1c63@ellipsis? aZ1c64@vec?)) (lambda (aZ1d11@aZ1d0e aZ1d12@aZ1d10) (let ((aZ1d15@maps aZ1d12@aZ1d10) (aZ1d16@ynew aZ1d11@aZ1d0e)) (values (aZ1bf2@gen-cons aZ1c60@e aZ1cfd@x aZ1cfe@y aZ1d0a@xnew aZ1d16@ynew) aZ1d15@maps)))))))) aZ1cfb@ls/false) (let ((aZ1d19@t aZ1cf9@t)) (let ((aZ1d1b@ls/false (aZd7c@syntax-dispatch aZ1d19@t '#(vector each-any)))) (if aZ1d1b@ls/false (apply (lambda (aZ1d1d@ls) (call-with-values (lambda () (aZ1be8@gen-syntax aZ1c5f@src aZ1d1d@ls aZ1c61@r aZ1c62@maps aZ1c63@ellipsis? '#t)) (lambda (aZ1d23@aZ1d20 aZ1d24@aZ1d22) (let ((aZ1d27@maps aZ1d24@aZ1d22) (aZ1d28@lsnew aZ1d23@aZ1d20)) (values (aZ1bf4@gen-vector aZ1c60@e aZ1d1d@ls aZ1d28@lsnew) aZ1d27@maps))))) aZ1d1b@ls/false) (let ((aZ1d2b@t aZ1d19@t)) (let ((aZ1d2d@ls/false (aZd7c@syntax-dispatch aZ1d2b@t '_))) (if aZ1d2d@ls/false (apply (lambda () (values (list 'quote aZ1c60@e) aZ1c62@maps)) aZ1d2d@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1d2b@t)))))))))))))))))))))))) (set! aZ1bea@gen-ref (lambda (aZ1c45@src aZ1c46@var aZ1c47@level aZ1c48@maps) (if (= aZ1c47@level '0) (values aZ1c46@var aZ1c48@maps) (if (null? aZ1c48@maps) (aZe5c@syntax-violation '#f '"missing ellipsis in syntax form" aZ1c45@src) (call-with-values (lambda () (aZ1bea@gen-ref aZ1c45@src aZ1c46@var (- aZ1c47@level '1) (cdr aZ1c48@maps))) (lambda (aZ1c51@aZ1c4e aZ1c52@aZ1c50) (let ((aZ1c55@outer-maps aZ1c52@aZ1c50) (aZ1c56@outer-var aZ1c51@aZ1c4e)) (let ((aZ1c59@t (assq aZ1c56@outer-var (car aZ1c48@maps)))) (if aZ1c59@t ((lambda (aZ1c5b@b) (values (cdr aZ1c5b@b) aZ1c48@maps)) aZ1c59@t) (let ((aZ1c5d@inner-var (aZafd@gen-lexical 'tmp))) (values aZ1c5d@inner-var (cons (cons (cons aZ1c56@outer-var aZ1c5d@inner-var) (car aZ1c48@maps)) aZ1c55@outer-maps)))))))))))) (set! aZ1bec@gen-append (lambda (aZ1c41@x aZ1c42@y) (if (fast-equal? aZ1c42@y ''()) aZ1c41@x (list 'append aZ1c41@x aZ1c42@y)))) (set! aZ1bee@gen-mappend (lambda (aZ1c3d@e aZ1c3e@map-env) (list 'apply '(primitive append) (aZ1bf0@gen-map aZ1c3d@e aZ1c3e@map-env)))) (set! aZ1bf0@gen-map (lambda (aZ1c2b@e aZ1c2c@map-env) (let ((aZ1c2f@formals (map cdr aZ1c2c@map-env)) (aZ1c30@actuals (map (lambda (aZ1c33@x) (list 'ref (car aZ1c33@x))) aZ1c2c@map-env))) (if (eq? (car aZ1c2b@e) 'ref) (car aZ1c30@actuals) (if (for-all (lambda (aZ1c35@x) (and (eq? (car aZ1c35@x) 'ref) (memq (cadr aZ1c35@x) aZ1c2f@formals))) (cdr aZ1c2b@e)) (let ((aZ1c37@args (map (let ((aZ1c39@r (map cons aZ1c2f@formals aZ1c30@actuals))) (lambda (aZ1c3b@x) (cdr (assq (cadr aZ1c3b@x) aZ1c39@r)))) (cdr aZ1c2b@e)))) (cons 'map (cons (list 'primitive (car aZ1c2b@e)) aZ1c37@args))) (cons* 'map (list 'lambda aZ1c2f@formals aZ1c2b@e) aZ1c30@actuals)))))) (set! aZ1bf2@gen-cons (lambda (aZ1c1b@e aZ1c1c@x aZ1c1d@y aZ1c1e@xnew aZ1c1f@ynew) (let ((aZ1c25@t (car aZ1c1f@ynew))) (if (memv aZ1c25@t '(quote)) (if (eq? (car aZ1c1e@xnew) 'quote) (let ((aZ1c27@xnew (cadr aZ1c1e@xnew)) (aZ1c28@ynew (cadr aZ1c1f@ynew))) (if (and (eq? aZ1c27@xnew aZ1c1c@x) (eq? aZ1c28@ynew aZ1c1d@y)) (list 'quote aZ1c1b@e) (list 'quote (cons aZ1c27@xnew aZ1c28@ynew)))) (if (null? (cadr aZ1c1f@ynew)) (list 'list aZ1c1e@xnew) (list 'cons aZ1c1e@xnew aZ1c1f@ynew))) (if (memv aZ1c25@t '(list)) (cons 'list (cons aZ1c1e@xnew (cdr aZ1c1f@ynew))) (list 'cons aZ1c1e@xnew aZ1c1f@ynew)))))) (set! aZ1bf4@gen-vector (lambda (aZ1c15@e aZ1c16@ls aZ1c17@lsnew) (if (eq? (car aZ1c17@lsnew) 'quote) (if (eq? (cadr aZ1c17@lsnew) aZ1c16@ls) (list 'quote aZ1c15@e) (list 'quote (list->vector (cadr aZ1c17@lsnew)))) (if (eq? (car aZ1c17@lsnew) 'list) (cons 'vector (cdr aZ1c17@lsnew)) (list 'list->vector aZ1c17@lsnew))))) (set! aZ1bf6@regen (lambda (aZ1c0f@x) (let ((aZ1c11@t (car aZ1c0f@x))) (if (memv aZ1c11@t '(ref)) (cadr aZ1c0f@x) (if (memv aZ1c11@t '(primitive)) (list 'primitive (cadr aZ1c0f@x)) (if (memv aZ1c11@t '(quote)) (list 'quote (cadr aZ1c0f@x)) (if (memv aZ1c11@t '(lambda)) (aZad8@aZa04@build-lambda '#f (cadr aZ1c0f@x) (aZ1bf6@regen (caddr aZ1c0f@x))) (if (memv aZ1c11@t '(map)) (let ((aZ1c13@ls (map aZ1bf6@regen (cdr aZ1c0f@x)))) (cons '(primitive ellipsis-map) aZ1c13@ls)) (cons (list 'primitive (car aZ1c0f@x)) (map aZ1bf6@regen (cdr aZ1c0f@x))))))))))) (lambda (aZ1bf7@e aZ1bf8@r aZ1bf9@mr) (let ((aZ1bfd@t aZ1bf7@e)) (let ((aZ1bff@ls/false (aZd7c@syntax-dispatch aZ1bfd@t '(_ any)))) (if aZ1bff@ls/false (apply (lambda (aZ1c01@x) (call-with-values (lambda () (aZ1be8@gen-syntax aZ1bf7@e aZ1c01@x aZ1bf8@r '() aZd7e@ellipsis? '#f)) (lambda (aZ1c07@aZ1c04 aZ1c08@aZ1c06) (let ((aZ1c0b@maps aZ1c08@aZ1c06) (aZ1c0c@e aZ1c07@aZ1c04)) (aZ1bf6@regen aZ1c0c@e))))) aZ1bff@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1bfd@t)))))))) (set! aZ2858@aZd88@syntax-transformer aZd88@syntax-transformer) (set! aZd8a@core-macro-transformer (lambda (aZ1d2f@name) (let ((aZ1d31@t aZ1d2f@name)) (if (memv aZ1d31@t '(quote)) aZd2c@quote-transformer (if (memv aZ1d31@t '(lambda)) aZd30@lambda-transformer (if (memv aZ1d31@t '(case-lambda)) aZd2e@case-lambda-transformer (if (memv aZ1d31@t '(letrec)) aZd14@letrec-transformer (if (memv aZ1d31@t '(letrec*)) aZd16@letrec*-transformer (if (memv aZ1d31@t '(let)) aZd12@let-transformer (if (memv aZ1d31@t '(if)) aZd24@if-transformer (if (memv aZ1d31@t '(and)) aZd26@and-transformer (if (memv aZ1d31@t '(or)) aZd28@or-transformer (if (memv aZ1d31@t '(foreign-call)) aZd78@foreign-call-transformer (if (memv aZ1d31@t '(syntax-case)) aZd84@syntax-case-transformer (if (memv aZ1d31@t '(syntax)) aZd88@syntax-transformer (if (memv aZ1d31@t '(type-descriptor)) aZd1a@type-descriptor-transformer (if (memv aZ1d31@t '(record-type-descriptor)) aZd1c@record-type-descriptor-transformer (if (memv aZ1d31@t '(record-constructor-descriptor)) aZd1e@record-constructor-descriptor-transformer (if (memv aZ1d31@t '(fluid-let-syntax)) aZd18@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" aZ1d2f@name)))))))))))))))))))) (set! aZ2859@aZd8a@core-macro-transformer aZd8a@core-macro-transformer) (set! aZd8c@symbol-macro (lambda (aZ1d33@x aZ1d34@set) (let ((aZ1d37@t aZ1d33@x)) (let ((aZ1d39@ls/false (aZd7c@syntax-dispatch aZ1d37@t '(_ any)))) (if (and aZ1d39@ls/false (apply (lambda (aZ1d3b@name) (and (aZb75@id? aZ1d3b@name) (memq (aZb77@id->sym aZ1d3b@name) aZ1d34@set))) aZ1d39@ls/false)) (apply (lambda (aZ1d3d@name) (aZd32@bless (list 'quote aZ1d3d@name))) aZ1d39@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1d37@t)))))) (set! aZ285a@aZd8c@symbol-macro aZd8c@symbol-macro) (set! aZd8e@macro-transformer (lambda (aZ1d3f@x) (if (procedure? aZ1d3f@x) aZ1d3f@x (if (symbol? aZ1d3f@x) (let ((aZ1d41@t aZ1d3f@x)) (if (memv aZ1d41@t '(define-record-type)) aZd70@define-record-type-macro (if (memv aZ1d41@t '(define-struct)) aZd6e@define-struct-macro (if (memv aZ1d41@t '(include)) aZd64@include-macro (if (memv aZ1d41@t '(cond)) aZd60@cond-macro (if (memv aZ1d41@t '(let)) aZd38@let-macro (if (memv aZ1d41@t '(do)) aZd58@do-macro (if (memv aZ1d41@t '(or)) aZd5c@or-macro (if (memv aZ1d41@t '(and)) aZd5e@and-macro (if (memv aZ1d41@t '(let*)) aZd5a@let*-macro (if (memv aZ1d41@t '(let-values)) aZd3a@let-values-macro (if (memv aZ1d41@t '(let*-values)) aZd3c@let*-values-macro (if (memv aZ1d41@t '(syntax-rules)) aZd68@syntax-rules-macro (if (memv aZ1d41@t '(quasiquote)) aZd6a@quasiquote-macro (if (memv aZ1d41@t '(quasisyntax)) aZd6c@quasisyntax-macro (if (memv aZ1d41@t '(with-syntax)) aZd34@with-syntax-macro (if (memv aZ1d41@t '(when)) aZd20@when-macro (if (memv aZ1d41@t '(unless)) aZd22@unless-macro (if (memv aZ1d41@t '(case)) aZd2a@case-macro (if (memv aZ1d41@t '(identifier-syntax)) aZd56@identifier-syntax-macro (if (memv aZ1d41@t '(time)) aZd4e@time-macro (if (memv aZ1d41@t '(delay)) aZd50@delay-macro (if (memv aZ1d41@t '(assert)) aZd52@assert-macro (if (memv aZ1d41@t '(endianness)) aZd54@endianness-macro (if (memv aZ1d41@t '(guard)) aZd4a@guard-macro (if (memv aZ1d41@t '(define-enumeration)) aZd4c@define-enumeration-macro (if (memv aZ1d41@t '(trace-lambda)) aZd3e@trace-lambda-macro (if (memv aZ1d41@t '(trace-define)) aZd40@trace-define-macro (if (memv aZ1d41@t '(trace-define-syntax)) aZd42@trace-define-syntax-macro (if (memv aZ1d41@t '(trace-let-syntax)) aZd46@trace-let-syntax-macro (if (memv aZ1d41@t '(trace-letrec-syntax)) aZd48@trace-letrec-syntax-macro (if (memv aZ1d41@t '(define-condition-type)) aZd72@define-condition-type-macro (if (memv aZ1d41@t '(parameterize)) aZd76@parameterize-macro (if (memv aZ1d41@t '(include-into)) aZd66@include-into-macro (if (memv aZ1d41@t '(eol-style)) (lambda (aZ1d43@x) (aZd8c@symbol-macro aZ1d43@x '(none lf cr crlf nel crnel ls))) (if (memv aZ1d41@t '(error-handling-mode)) (lambda (aZ1d45@x) (aZd8c@symbol-macro aZ1d45@x '(ignore raise replace))) (if (memv aZ1d41@t '(buffer-mode)) (lambda (aZ1d47@x) (aZd8c@symbol-macro aZ1d47@x '(none line block))) (if (memv aZ1d41@t '(file-options)) aZaf0@file-options-macro (if (memv aZ1d41@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) aZd74@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" aZ1d3f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" aZ1d3f@x))))) (set! aZ285b@aZd8e@macro-transformer aZd8e@macro-transformer) (set! aZd90@local-macro-transformer (lambda (aZ1d49@x) (car aZ1d49@x))) (set! aZ285c@aZd90@local-macro-transformer aZd90@local-macro-transformer) (set! aZd92@do-macro-call (lambda (aZ1d4b@transformer aZ1d4c@expr) (let ((aZ1d4f@out (aZ1d4b@transformer (aZb5f@add-mark aZb59@anti-mark aZ1d4c@expr '#f)))) (begin (let aZ1d53@f ((aZ1d51@x aZ1d4f@out)) (if (not (aZb41@stx? aZ1d51@x)) (if (pair? aZ1d51@x) (begin (aZ1d53@f (car aZ1d51@x)) (aZ1d53@f (cdr aZ1d51@x))) (if (vector? aZ1d51@x) (vector-for-each aZ1d53@f aZ1d51@x) (if (symbol? aZ1d51@x) (aZe5c@syntax-violation '#f '"raw symbol encountered in output of macro" aZ1d4c@expr aZ1d51@x) (void)))) (void))) (aZb5f@add-mark (aZb57@gen-mark) aZ1d4f@out aZ1d4c@expr))))) (set! aZ285d@aZd92@do-macro-call aZd92@do-macro-call) (set! aZd94@chi-macro (lambda (aZ1d55@p aZ1d56@e) (aZd92@do-macro-call (aZd8e@macro-transformer aZ1d55@p) aZ1d56@e))) (set! aZ285e@aZd94@chi-macro aZd94@chi-macro) (set! aZd96@chi-local-macro (lambda (aZ1d59@p aZ1d5a@e) (aZd92@do-macro-call (aZd90@local-macro-transformer aZ1d59@p) aZ1d5a@e))) (set! aZ285f@aZd96@chi-local-macro aZd96@chi-local-macro) (set! aZd98@chi-global-macro (lambda (aZ1d5d@p aZ1d5e@e) (let ((aZ1d61@lib (car aZ1d5d@p)) (aZ1d62@loc (cdr aZ1d5d@p))) (begin (aZ98c@aZ7db@visit-library aZ1d61@lib) (let ((aZ1d65@x (symbol-value aZ1d62@loc))) (let ((aZ1d67@transformer (if (procedure? aZ1d65@x) aZ1d65@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" aZ1d65@x)))) (aZd92@do-macro-call aZ1d67@transformer aZ1d5e@e))))))) (set! aZ2860@aZd98@chi-global-macro aZd98@chi-global-macro) (set! aZd9a@chi-expr* (lambda (aZ1d69@e* aZ1d6a@r aZ1d6b@mr) (if (null? aZ1d69@e*) '() (let ((aZ1d6f@e (aZd9e@chi-expr (car aZ1d69@e*) aZ1d6a@r aZ1d6b@mr))) (cons aZ1d6f@e (aZd9a@chi-expr* (cdr aZ1d69@e*) aZ1d6a@r aZ1d6b@mr)))))) (set! aZ2861@aZd9a@chi-expr* aZd9a@chi-expr*) (set! aZd9c@chi-application (lambda (aZ1d71@e aZ1d72@r aZ1d73@mr) (let ((aZ1d77@t aZ1d71@e)) (let ((aZ1d79@ls/false (aZd7c@syntax-dispatch aZ1d77@t '(any . each-any)))) (if aZ1d79@ls/false (apply (lambda (aZ1d7b@rator aZ1d7c@rands) (let ((aZ1d7f@rator (aZd9e@chi-expr aZ1d7b@rator aZ1d72@r aZ1d73@mr))) (cons aZ1d7f@rator (aZd9a@chi-expr* aZ1d7c@rands aZ1d72@r aZ1d73@mr)))) aZ1d79@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1d77@t)))))) (set! aZ2862@aZd9c@chi-application aZd9c@chi-application) (set! aZd9e@chi-expr (lambda (aZ1d81@e aZ1d82@r aZ1d83@mr) (call-with-values (lambda () (aZb97@syntax-type aZ1d81@e aZ1d82@r)) (lambda (aZ1d8d@aZ1d88 aZ1d8e@aZ1d8a aZ1d8f@aZ1d8c) (let ((aZ1d93@kwd aZ1d8f@aZ1d8c) (aZ1d94@value aZ1d8e@aZ1d8a) (aZ1d95@type aZ1d8d@aZ1d88)) (let ((aZ1d99@t aZ1d95@type)) (if (memv aZ1d99@t '(core-macro)) (let ((aZ1d9b@transformer (aZd8a@core-macro-transformer aZ1d94@value))) (aZ1d9b@transformer aZ1d81@e aZ1d82@r aZ1d83@mr)) (if (memv aZ1d99@t '(global)) (let ((aZ1d9d@lib (car aZ1d94@value))) (let ((aZ1d9f@loc (cdr aZ1d94@value))) (begin ((aZde4@inv-collector) aZ1d9d@lib) aZ1d9f@loc))) (if (memv aZ1d99@t '(core-prim)) (let ((aZ1da1@name aZ1d94@value)) (list 'primitive aZ1da1@name)) (if (memv aZ1d99@t '(call)) (aZd9c@chi-application aZ1d81@e aZ1d82@r aZ1d83@mr) (if (memv aZ1d99@t '(lexical)) (let ((aZ1da3@lex (aZd06@lexical-var aZ1d94@value))) aZ1da3@lex) (if (memv aZ1d99@t '(global-macro global-macro!)) (aZd9e@chi-expr (aZd98@chi-global-macro aZ1d94@value aZ1d81@e) aZ1d82@r aZ1d83@mr) (if (memv aZ1d99@t '(local-macro local-macro!)) (aZd9e@chi-expr (aZd96@chi-local-macro aZ1d94@value aZ1d81@e) aZ1d82@r aZ1d83@mr) (if (memv aZ1d99@t '(macro macro!)) (aZd9e@chi-expr (aZd94@chi-macro aZ1d94@value aZ1d81@e) aZ1d82@r aZ1d83@mr) (if (memv aZ1d99@t '(constant)) (let ((aZ1da5@datum aZ1d94@value)) (list 'quote aZ1da5@datum)) (if (memv aZ1d99@t '(set!)) (aZda0@chi-set! aZ1d81@e aZ1d82@r aZ1d83@mr) (if (memv aZ1d99@t '(begin)) (let ((aZ1da7@t aZ1d81@e)) (let ((aZ1da9@ls/false (aZd7c@syntax-dispatch aZ1da7@t '(_ any . each-any)))) (if aZ1da9@ls/false (apply (lambda (aZ1dab@x aZ1dac@x*) (aZada@aZa34@build-sequence '#f (aZd9a@chi-expr* (cons aZ1dab@x aZ1dac@x*) aZ1d82@r aZ1d83@mr))) aZ1da9@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1da7@t)))) (if (memv aZ1d99@t '(let-syntax letrec-syntax)) (let ((aZ1daf@t aZ1d81@e)) (let ((aZ1db1@ls/false (aZd7c@syntax-dispatch aZ1daf@t '(_ #(each (any any)) any . each-any)))) (if (and aZ1db1@ls/false (apply (lambda (aZ1db3@xlhs* aZ1db4@xrhs* aZ1db5@xbody aZ1db6@xbody*) (if (not (aZb7d@valid-bound-ids? aZ1db3@xlhs*)) (aZe5c@syntax-violation '#f '"invalid identifiers" aZ1d81@e) (void))) aZ1db1@ls/false)) (apply (lambda (aZ1dbb@xlhs* aZ1dbc@xrhs* aZ1dbd@xbody aZ1dbe@xbody*) (let ((aZ1dc3@xlab* (map aZb01@gen-label aZ1dbb@xlhs*))) (let ((aZ1dc5@xrib (aZb35@make-full-rib aZ1dbb@xlhs* aZ1dc3@xlab*))) (let ((aZ1dc7@xb* (map (lambda (aZ1dc9@x) (aZbad@make-eval-transformer (aZdd6@expand-transformer (if (eq? aZ1d95@type 'let-syntax) aZ1dc9@x (aZb61@add-subst aZ1dc5@xrib aZ1dc9@x)) aZ1d83@mr))) aZ1dbc@xrhs*))) (aZada@aZa34@build-sequence '#f (aZd9a@chi-expr* (map (lambda (aZ1dcb@x) (aZb61@add-subst aZ1dc5@xrib aZ1dcb@x)) (cons aZ1dbd@xbody aZ1dbe@xbody*)) (append (map cons aZ1dc3@xlab* aZ1dc7@xb*) aZ1d82@r) (append (map cons aZ1dc3@xlab* aZ1dc7@xb*) aZ1d83@mr))))))) aZ1db1@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1daf@t)))) (if (memv aZ1d99@t '(displaced-lexical)) (aZe5c@syntax-violation '#f '"identifier out of context" aZ1d81@e) (if (memv aZ1d99@t '(syntax)) (aZe5c@syntax-violation '#f '"reference to pattern variable outside a syntax form" aZ1d81@e) (if (memv aZ1d99@t '(define define-syntax module import library)) (aZe5c@syntax-violation '#f (string-append (let ((aZ1dcd@t aZ1d95@type)) (if (memv aZ1dcd@t '(define)) '"a definition" (if (memv aZ1dcd@t '(define-syntax)) '"a define-syntax" (if (memv aZ1dcd@t '(module)) '"a module definition" (if (memv aZ1dcd@t '(library)) '"a library definition" (if (memv aZ1dcd@t '(import)) '"an import declaration" (if (memv aZ1dcd@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") aZ1d81@e) (if (memv aZ1d99@t '(mutable)) (aZe5c@syntax-violation '#f '"attempt to reference an unexportable variable" aZ1d81@e) (aZe5c@syntax-violation '#f '"invalid expression" aZ1d81@e))))))))))))))))))))))) (set! aZ2863@aZd9e@chi-expr aZd9e@chi-expr) (set! aZda0@chi-set! (lambda (aZ1dcf@e aZ1dd0@r aZ1dd1@mr) (let ((aZ1dd5@t aZ1dcf@e)) (let ((aZ1dd7@ls/false (aZd7c@syntax-dispatch aZ1dd5@t '(_ any any)))) (if (and aZ1dd7@ls/false (apply (lambda (aZ1dd9@x aZ1dda@v) (aZb75@id? aZ1dd9@x)) aZ1dd7@ls/false)) (apply (lambda (aZ1ddd@x aZ1dde@v) (call-with-values (lambda () (aZb97@syntax-type aZ1ddd@x aZ1dd0@r)) (lambda (aZ1de7@aZ1de2 aZ1de8@aZ1de4 aZ1de9@aZ1de6) (let ((aZ1ded@kwd aZ1de9@aZ1de6) (aZ1dee@value aZ1de8@aZ1de4) (aZ1def@type aZ1de7@aZ1de2)) (let ((aZ1df3@t aZ1def@type)) (if (memv aZ1df3@t '(lexical)) (begin (aZd0a@set-lexical-mutable! aZ1dee@value '#t) (list 'set! (aZd06@lexical-var aZ1dee@value) (aZd9e@chi-expr aZ1dde@v aZ1dd0@r aZ1dd1@mr))) (if (memv aZ1df3@t '(core-prim)) (aZe5c@syntax-violation '#f '"cannot modify imported core primitive" aZ1dcf@e) (if (memv aZ1df3@t '(global)) (aZe5c@syntax-violation '#f '"attempt to modify imported binding" aZ1dcf@e) (if (memv aZ1df3@t '(global-macro!)) (aZd9e@chi-expr (aZd98@chi-global-macro aZ1dee@value aZ1dcf@e) aZ1dd0@r aZ1dd1@mr) (if (memv aZ1df3@t '(local-macro!)) (aZd9e@chi-expr (aZd96@chi-local-macro aZ1dee@value aZ1dcf@e) aZ1dd0@r aZ1dd1@mr) (if (memv aZ1df3@t '(mutable)) (aZe5c@syntax-violation '#f '"attempt to assign to an unexportable variable" aZ1dcf@e) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1dcf@e)))))))))))) aZ1dd7@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1dd5@t)))))) (set! aZ2864@aZda0@chi-set! aZda0@chi-set!) (set! aZda2@verify-formals (lambda (aZ1df5@fmls aZ1df6@stx) (let ((aZ1df9@t aZ1df5@fmls)) (let ((aZ1dfb@ls/false (aZd7c@syntax-dispatch aZ1df9@t 'each-any))) (if aZ1dfb@ls/false (apply (lambda (aZ1dfd@x*) (if (not (aZb7d@valid-bound-ids? aZ1dfd@x*)) (aZd36@invalid-fmls-error aZ1df6@stx aZ1df5@fmls) (void))) aZ1dfb@ls/false) (let ((aZ1dff@t aZ1df9@t)) (let ((aZ1e01@ls/false (aZd7c@syntax-dispatch aZ1dff@t '#(each+ any () any)))) (if aZ1e01@ls/false (apply (lambda (aZ1e03@x* aZ1e04@x) (if (not (aZb7d@valid-bound-ids? (cons aZ1e04@x aZ1e03@x*))) (aZd36@invalid-fmls-error aZ1df6@stx aZ1df5@fmls) (void))) aZ1e01@ls/false) (let ((aZ1e07@t aZ1dff@t)) (let ((aZ1e09@ls/false (aZd7c@syntax-dispatch aZ1e07@t '_))) (if aZ1e09@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid syntax" aZ1df6@stx)) aZ1e09@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1e07@t)))))))))))) (set! aZ2865@aZda2@verify-formals aZda2@verify-formals) (set! aZda4@chi-lambda-clause (lambda (aZ1e0b@stx aZ1e0c@fmls aZ1e0d@body* aZ1e0e@r aZ1e0f@mr) (let ((aZ1e15@t aZ1e0c@fmls)) (let ((aZ1e17@ls/false (aZd7c@syntax-dispatch aZ1e15@t 'each-any))) (if aZ1e17@ls/false (apply (lambda (aZ1e19@x*) (begin (aZda2@verify-formals aZ1e0c@fmls aZ1e0b@stx) (let ((aZ1e1b@lex* (map aZafd@gen-lexical aZ1e19@x*)) (aZ1e1c@lab* (map aZb01@gen-label aZ1e19@x*))) (values aZ1e1b@lex* (aZdb4@chi-internal (aZb61@add-subst (aZb35@make-full-rib aZ1e19@x* aZ1e1c@lab*) aZ1e0d@body*) (aZd0e@add-lexicals aZ1e1c@lab* aZ1e1b@lex* aZ1e0e@r) aZ1e0f@mr))))) aZ1e17@ls/false) (let ((aZ1e1f@t aZ1e15@t)) (let ((aZ1e21@ls/false (aZd7c@syntax-dispatch aZ1e1f@t '#(each+ any () any)))) (if aZ1e21@ls/false (apply (lambda (aZ1e23@x* aZ1e24@x) (begin (aZda2@verify-formals aZ1e0c@fmls aZ1e0b@stx) (let ((aZ1e27@lex* (map aZafd@gen-lexical aZ1e23@x*)) (aZ1e28@lab* (map aZb01@gen-label aZ1e23@x*)) (aZ1e29@lex (aZafd@gen-lexical aZ1e24@x)) (aZ1e2a@lab (aZb01@gen-label aZ1e24@x))) (values (append aZ1e27@lex* aZ1e29@lex) (aZdb4@chi-internal (aZb61@add-subst (aZb35@make-full-rib (cons aZ1e24@x aZ1e23@x*) (cons aZ1e2a@lab aZ1e28@lab*)) aZ1e0d@body*) (aZd0e@add-lexicals (cons aZ1e2a@lab aZ1e28@lab*) (cons aZ1e29@lex aZ1e27@lex*) aZ1e0e@r) aZ1e0f@mr))))) aZ1e21@ls/false) (let ((aZ1e2f@t aZ1e1f@t)) (let ((aZ1e31@ls/false (aZd7c@syntax-dispatch aZ1e2f@t '_))) (if aZ1e31@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid syntax" aZ1e0c@fmls)) aZ1e31@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1e2f@t)))))))))))) (set! aZ2866@aZda4@chi-lambda-clause aZda4@chi-lambda-clause) (set! aZda6@chi-lambda-clause* (lambda (aZ1e33@stx aZ1e34@fmls* aZ1e35@body** aZ1e36@r aZ1e37@mr) (if (null? aZ1e34@fmls*) (values '() '()) (call-with-values (lambda () (aZda4@chi-lambda-clause aZ1e33@stx (car aZ1e34@fmls*) (car aZ1e35@body**) aZ1e36@r aZ1e37@mr)) (lambda (aZ1e41@aZ1e3e aZ1e42@aZ1e40) (let ((aZ1e45@b aZ1e42@aZ1e40) (aZ1e46@a aZ1e41@aZ1e3e)) (call-with-values (lambda () (aZda6@chi-lambda-clause* aZ1e33@stx (cdr aZ1e34@fmls*) (cdr aZ1e35@body**) aZ1e36@r aZ1e37@mr)) (lambda (aZ1e4d@aZ1e4a aZ1e4e@aZ1e4c) (let ((aZ1e51@b* aZ1e4e@aZ1e4c) (aZ1e52@a* aZ1e4d@aZ1e4a)) (values (cons aZ1e46@a aZ1e52@a*) (cons aZ1e45@b aZ1e51@b*))))))))))) (set! aZ2867@aZda6@chi-lambda-clause* aZda6@chi-lambda-clause*) (set! aZda8@chi-defun (lambda (aZ1e55@x aZ1e56@r aZ1e57@mr) (let ((aZ1e5b@fmls (car aZ1e55@x)) (aZ1e5c@body* (cdr aZ1e55@x))) (call-with-values (lambda () (aZda4@chi-lambda-clause aZ1e5b@fmls aZ1e5b@fmls aZ1e5c@body* aZ1e56@r aZ1e57@mr)) (lambda (aZ1e63@aZ1e60 aZ1e64@aZ1e62) (let ((aZ1e67@body aZ1e64@aZ1e62) (aZ1e68@fmls aZ1e63@aZ1e60)) (aZad8@aZa04@build-lambda '#f aZ1e68@fmls aZ1e67@body))))))) (set! aZ2868@aZda8@chi-defun aZda8@chi-defun) (set! aZdaa@chi-rhs (lambda (aZ1e6b@rhs aZ1e6c@r aZ1e6d@mr) (let ((aZ1e71@t (car aZ1e6b@rhs))) (if (memv aZ1e71@t '(defun)) (aZda8@chi-defun (cdr aZ1e6b@rhs) aZ1e6c@r aZ1e6d@mr) (if (memv aZ1e71@t '(expr)) (let ((aZ1e73@expr (cdr aZ1e6b@rhs))) (aZd9e@chi-expr aZ1e73@expr aZ1e6c@r aZ1e6d@mr)) (if (memv aZ1e71@t '(top-expr)) (let ((aZ1e75@expr (cdr aZ1e6b@rhs))) (aZada@aZa34@build-sequence '#f (list (aZd9e@chi-expr aZ1e75@expr aZ1e6c@r aZ1e6d@mr) (aZadb@aZa36@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" aZ1e6b@rhs))))))) (set! aZ2869@aZdaa@chi-rhs aZdaa@chi-rhs) (set! aZdac@expand-interaction-rhs*/init* (lambda (aZ1e77@lhs* aZ1e78@rhs* aZ1e79@init* aZ1e7a@r aZ1e7b@mr) (let aZ1e85@f ((aZ1e81@lhs* aZ1e77@lhs*) (aZ1e82@rhs* aZ1e78@rhs*)) (if (null? aZ1e81@lhs*) (map (lambda (aZ1e87@x) (aZd9e@chi-expr aZ1e87@x aZ1e7a@r aZ1e7b@mr)) aZ1e79@init*) (let ((aZ1e89@lhs (car aZ1e81@lhs*)) (aZ1e8a@rhs (car aZ1e82@rhs*))) (let ((aZ1e8d@t (car aZ1e8a@rhs))) (if (memv aZ1e8d@t '(defun)) (let ((aZ1e8f@rhs (aZda8@chi-defun (cdr aZ1e8a@rhs) aZ1e7a@r aZ1e7b@mr))) (cons (list 'set! aZ1e89@lhs aZ1e8f@rhs) (aZ1e85@f (cdr aZ1e81@lhs*) (cdr aZ1e82@rhs*)))) (if (memv aZ1e8d@t '(expr)) (let ((aZ1e91@rhs (aZd9e@chi-expr (cdr aZ1e8a@rhs) aZ1e7a@r aZ1e7b@mr))) (cons (list 'set! aZ1e89@lhs aZ1e91@rhs) (aZ1e85@f (cdr aZ1e81@lhs*) (cdr aZ1e82@rhs*)))) (if (memv aZ1e8d@t '(top-expr)) (let ((aZ1e93@e (aZd9e@chi-expr (cdr aZ1e8a@rhs) aZ1e7a@r aZ1e7b@mr))) (cons aZ1e93@e (aZ1e85@f (cdr aZ1e81@lhs*) (cdr aZ1e82@rhs*)))) (error 'expand-interaction '"invallid" aZ1e8a@rhs)))))))))) (set! aZ286a@aZdac@expand-interaction-rhs*/init* aZdac@expand-interaction-rhs*/init*) (set! aZdae@chi-rhs* (lambda (aZ1e95@rhs* aZ1e96@r aZ1e97@mr) (let aZ1e9d@f ((aZ1e9b@ls aZ1e95@rhs*)) (if (null? aZ1e9b@ls) '() (let ((aZ1e9f@a (aZdaa@chi-rhs (car aZ1e9b@ls) aZ1e96@r aZ1e97@mr))) (cons aZ1e9f@a (aZ1e9d@f (cdr aZ1e9b@ls)))))))) (set! aZ286b@aZdae@chi-rhs* aZdae@chi-rhs*) (set! aZdb0@find-bound=? (lambda (aZ1ea1@x aZ1ea2@lhs* aZ1ea3@rhs*) (if (null? aZ1ea2@lhs*) '#f (if (aZb79@bound-id=? aZ1ea1@x (car aZ1ea2@lhs*)) (car aZ1ea3@rhs*) (aZdb0@find-bound=? aZ1ea1@x (cdr aZ1ea2@lhs*) (cdr aZ1ea3@rhs*)))))) (set! aZ286c@aZdb0@find-bound=? aZdb0@find-bound=?) (set! aZdb2@find-dups (lambda (aZ1ea7@ls) (let aZ1ead@f ((aZ1ea9@ls aZ1ea7@ls) (aZ1eaa@dups '())) (if (null? aZ1ea9@ls) aZ1eaa@dups (let ((aZ1eaf@t (aZdb0@find-bound=? (car aZ1ea9@ls) (cdr aZ1ea9@ls) (cdr aZ1ea9@ls)))) (if aZ1eaf@t ((lambda (aZ1eb1@x) (aZ1ead@f (cdr aZ1ea9@ls) (cons (list (car aZ1ea9@ls) aZ1eb1@x) aZ1eaa@dups))) aZ1eaf@t) (aZ1ead@f (cdr aZ1ea9@ls) aZ1eaa@dups))))))) (set! aZ286d@aZdb2@find-dups aZdb2@find-dups) (set! aZdb4@chi-internal (lambda (aZ1eb3@e* aZ1eb4@r aZ1eb5@mr) (let ((aZ1eb9@rib (aZb29@make-empty-rib))) (call-with-values (lambda () (aZdd4@chi-body* (map (lambda (aZ1ecb@x) (aZb61@add-subst aZ1eb9@rib aZ1ecb@x)) (aZb73@syntax->list aZ1eb3@e*)) aZ1eb4@r aZ1eb5@mr '() '() '() '() '() aZ1eb9@rib '#f)) (lambda (aZ1ecd@aZ1ebc aZ1ece@aZ1ebe aZ1ecf@aZ1ec0 aZ1ed0@aZ1ec2 aZ1ed1@aZ1ec4 aZ1ed2@aZ1ec6 aZ1ed3@aZ1ec8 aZ1ed4@aZ1eca) (let ((aZ1edd@_exp* aZ1ed4@aZ1eca) (aZ1ede@kwd* aZ1ed3@aZ1ec8) (aZ1edf@mod** aZ1ed2@aZ1ec6) (aZ1ee0@rhs* aZ1ed1@aZ1ec4) (aZ1ee1@lex* aZ1ed0@aZ1ec2) (aZ1ee2@mr aZ1ecf@aZ1ec0) (aZ1ee3@r aZ1ece@aZ1ebe) (aZ1ee4@e* aZ1ecd@aZ1ebc)) (begin (if (null? aZ1ee4@e*) (aZe5c@syntax-violation '#f '"no expression in body" aZ1ee4@e*) (void)) (let ((aZ1eed@init* (aZd9a@chi-expr* (append (apply append (reverse aZ1edf@mod**)) aZ1ee4@e*) aZ1ee3@r aZ1ee2@mr))) (let ((aZ1eef@rhs* (aZdae@chi-rhs* aZ1ee0@rhs* aZ1ee3@r aZ1ee2@mr))) (aZadf@aZa3e@build-letrec* '#f (reverse aZ1ee1@lex*) (reverse aZ1eef@rhs*) (aZada@aZa34@build-sequence '#f aZ1eed@init*))))))))))) (set! aZ286e@aZdb4@chi-internal aZdb4@chi-internal) (set! aZdb6@parse-module (lambda (aZ1ef1@e) (let ((aZ1ef3@t aZ1ef1@e)) (let ((aZ1ef5@ls/false (aZd7c@syntax-dispatch aZ1ef3@t '(_ each-any . each-any)))) (if aZ1ef5@ls/false (apply (lambda (aZ1ef7@export* aZ1ef8@b*) (begin (if (not (for-all aZb75@id? aZ1ef7@export*)) (aZe5c@syntax-violation '#f '"module exports must be identifiers" aZ1ef1@e) (void)) (values '#f (list->vector aZ1ef7@export*) aZ1ef8@b*))) aZ1ef5@ls/false) (let ((aZ1efb@t aZ1ef3@t)) (let ((aZ1efd@ls/false (aZd7c@syntax-dispatch aZ1efb@t '(_ any each-any . each-any)))) (if aZ1efd@ls/false (apply (lambda (aZ1eff@name aZ1f00@export* aZ1f01@b*) (begin (if (not (aZb75@id? aZ1eff@name)) (aZe5c@syntax-violation '#f '"module name must be an identifier" aZ1ef1@e) (void)) (if (not (for-all aZb75@id? aZ1f00@export*)) (aZe5c@syntax-violation '#f '"module exports must be identifiers" aZ1ef1@e) (void)) (values aZ1eff@name (list->vector aZ1f00@export*) aZ1f01@b*))) aZ1efd@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1efb@t))))))))) (set! aZ286f@aZdb6@parse-module aZdb6@parse-module) (set! aZdc0@module-interface? (lambda (aZ1f05@x) (and (simple-struct? aZ1f05@x) (eq? (simple-struct-name aZ1f05@x) 'module-interface)))) (set! aZ2870@aZdc0@module-interface? aZdc0@module-interface?) (set! aZdc2@module-interface-first-mark (lambda (aZ1f07@x) (simple-struct-ref aZ1f07@x '0))) (set! aZ2871@aZdc2@module-interface-first-mark aZdc2@module-interface-first-mark) (set! aZdc4@set-module-interface-first-mark! (lambda (aZ1f09@x aZ1f0a@val) (simple-struct-set! aZ1f09@x '0 aZ1f0a@val))) (set! aZ2872@aZdc4@set-module-interface-first-mark! aZdc4@set-module-interface-first-mark!) (set! aZdc6@module-interface-exp-id-vec (lambda (aZ1f0d@x) (simple-struct-ref aZ1f0d@x '1))) (set! aZ2873@aZdc6@module-interface-exp-id-vec aZdc6@module-interface-exp-id-vec) (set! aZdc8@set-module-interface-exp-id-vec! (lambda (aZ1f0f@x aZ1f10@val) (simple-struct-set! aZ1f0f@x '1 aZ1f10@val))) (set! aZ2874@aZdc8@set-module-interface-exp-id-vec! aZdc8@set-module-interface-exp-id-vec!) (set! aZdca@module-interface-exp-lab-vec (lambda (aZ1f13@x) (simple-struct-ref aZ1f13@x '2))) (set! aZ2875@aZdca@module-interface-exp-lab-vec aZdca@module-interface-exp-lab-vec) (set! aZdcc@set-module-interface-exp-lab-vec! (lambda (aZ1f15@x aZ1f16@val) (simple-struct-set! aZ1f15@x '2 aZ1f16@val))) (set! aZ2876@aZdcc@set-module-interface-exp-lab-vec! aZdcc@set-module-interface-exp-lab-vec!) (set! aZdce@dummy '3) (set! aZ2877@aZdce@dummy aZdce@dummy) (set! aZdd0@module-interface-exp-id* (lambda (aZ1f19@iface aZ1f1a@id) (let ((aZ1f1e@diff-marks '#f)) (begin (set! aZ1f1e@diff-marks (lambda (aZ1f25@ls aZ1f26@x) (begin (if (null? aZ1f25@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((aZ1f29@a (car aZ1f25@ls))) (if (eq? aZ1f29@a aZ1f26@x) '() (cons aZ1f29@a (aZ1f1e@diff-marks (cdr aZ1f25@ls) aZ1f26@x))))))) (let ((aZ1f1f@diff (aZ1f1e@diff-marks (aZb47@stx-mark* aZ1f1a@id) (aZdc2@module-interface-first-mark aZ1f19@iface))) (aZ1f20@id-vec (aZdc6@module-interface-exp-id-vec aZ1f19@iface))) (if (null? aZ1f1f@diff) aZ1f20@id-vec (vector-map (lambda (aZ1f23@x) (make-simple-struct 'stx '5 (list (aZb43@stx-expr aZ1f23@x) (append aZ1f1f@diff (aZb47@stx-mark* aZ1f23@x)) '() '()))) aZ1f20@id-vec))))))) (set! aZ2878@aZdd0@module-interface-exp-id* aZdd0@module-interface-exp-id*) (set! aZdd2@chi-internal-module (lambda (aZ1f2b@e aZ1f2c@r aZ1f2d@mr aZ1f2e@lex* aZ1f2f@rhs* aZ1f30@mod** aZ1f31@kwd*) (call-with-values (lambda () (aZdb6@parse-module aZ1f2b@e)) (lambda (aZ1f3f@aZ1f3a aZ1f40@aZ1f3c aZ1f41@aZ1f3e) (let ((aZ1f45@e* aZ1f41@aZ1f3e) (aZ1f46@exp-id* aZ1f40@aZ1f3c) (aZ1f47@name aZ1f3f@aZ1f3a)) (let ((aZ1f4b@rib (aZb29@make-empty-rib))) (let ((aZ1f4d@e* (map (lambda (aZ1f4f@x) (aZb61@add-subst aZ1f4b@rib aZ1f4f@x)) (aZb73@syntax->list aZ1f45@e*)))) (call-with-values (lambda () (aZdd4@chi-body* aZ1f4d@e* aZ1f2c@r aZ1f2d@mr aZ1f2e@lex* aZ1f2f@rhs* aZ1f30@mod** aZ1f31@kwd* '() aZ1f4b@rib '#f)) (lambda (aZ1f61@aZ1f52 aZ1f62@aZ1f54 aZ1f63@aZ1f56 aZ1f64@aZ1f58 aZ1f65@aZ1f5a aZ1f66@aZ1f5c aZ1f67@aZ1f5e aZ1f68@aZ1f60) (let ((aZ1f71@_exp* aZ1f68@aZ1f60) (aZ1f72@kwd* aZ1f67@aZ1f5e) (aZ1f73@mod** aZ1f66@aZ1f5c) (aZ1f74@rhs* aZ1f65@aZ1f5a) (aZ1f75@lex* aZ1f64@aZ1f58) (aZ1f76@mr aZ1f63@aZ1f56) (aZ1f77@r aZ1f62@aZ1f54) (aZ1f78@e* aZ1f61@aZ1f52)) (let ((aZ1f81@exp-lab* (vector-map (lambda (aZ1f85@x) (or (aZb8b@id->label (make-simple-struct 'stx '5 (list (aZb77@id->sym aZ1f85@x) (aZb47@stx-mark* aZ1f85@x) (list aZ1f4b@rib) '()))) (aZe5c@syntax-violation '#f '"cannot find module export" aZ1f85@x))) aZ1f46@exp-id*)) (aZ1f82@mod** (cons aZ1f78@e* aZ1f73@mod**))) (if (not aZ1f47@name) (values aZ1f75@lex* aZ1f74@rhs* aZ1f46@exp-id* aZ1f81@exp-lab* aZ1f77@r aZ1f76@mr aZ1f82@mod** aZ1f72@kwd*) (let ((aZ1f87@lab (aZb01@gen-label 'module)) (aZ1f88@iface (make-simple-struct 'module-interface '4 (list (car (aZb47@stx-mark* aZ1f47@name)) (vector-map (lambda (aZ1f8b@x) (make-simple-struct 'stx '5 (list (aZb43@stx-expr aZ1f8b@x) (aZb47@stx-mark* aZ1f8b@x) '() '()))) aZ1f46@exp-id*) aZ1f81@exp-lab*)))) (values aZ1f75@lex* aZ1f74@rhs* (vector aZ1f47@name) (vector aZ1f87@lab) (cons (cons aZ1f87@lab (cons '$module aZ1f88@iface)) aZ1f77@r) (cons (cons aZ1f87@lab (cons '$module aZ1f88@iface)) aZ1f76@mr) aZ1f82@mod** aZ1f72@kwd*)))))))))))))) (set! aZ2879@aZdd2@chi-internal-module aZdd2@chi-internal-module) (set! aZdd4@chi-body* (lambda (aZ1f8d@e* aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1f93@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?) (if (null? aZ1f8d@e*) (values aZ1f8d@e* aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1f93@kwd* aZ1f94@exp*) (let ((aZ1fa1@e (car aZ1f8d@e*))) (call-with-values (lambda () (aZb97@syntax-type aZ1fa1@e aZ1f8e@r)) (lambda (aZ1fa9@aZ1fa4 aZ1faa@aZ1fa6 aZ1fab@aZ1fa8) (let ((aZ1faf@kwd aZ1fab@aZ1fa8) (aZ1fb0@value aZ1faa@aZ1fa6) (aZ1fb1@type aZ1fa9@aZ1fa4)) (let ((aZ1fb5@kwd* (if (aZb75@id? aZ1faf@kwd) (cons aZ1faf@kwd aZ1f93@kwd*) aZ1f93@kwd*))) (let ((aZ1fb7@t aZ1fb1@type)) (if (memv aZ1fb7@t '(define)) (call-with-values (lambda () (aZcfe@parse-define aZ1fa1@e)) (lambda (aZ1fbd@aZ1fba aZ1fbe@aZ1fbc) (let ((aZ1fc1@rhs aZ1fbe@aZ1fbc) (aZ1fc2@id aZ1fbd@aZ1fba)) (begin (if (aZb81@bound-id-member? aZ1fc2@id aZ1fb5@kwd*) (aZe5c@syntax-violation '#f '"cannot redefine keyword" aZ1fa1@e) (void)) (call-with-values (lambda () (aZb05@gen-define-label+loc aZ1fc2@id aZ1f95@rib)) (lambda (aZ1fc9@aZ1fc6 aZ1fca@aZ1fc8) (let ((aZ1fcd@lex aZ1fca@aZ1fc8) (aZ1fce@lab aZ1fc9@aZ1fc6)) (begin (aZb2b@extend-rib! aZ1f95@rib aZ1fc2@id aZ1fce@lab) (aZdd4@chi-body* (cdr aZ1f8d@e*) (aZd0c@add-lexical aZ1fce@lab aZ1fcd@lex aZ1f8e@r) aZ1f8f@mr (cons aZ1fcd@lex aZ1f90@lex*) (cons aZ1fc1@rhs aZ1f91@rhs*) aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?))))))))) (if (memv aZ1fb7@t '(define-syntax)) (call-with-values (lambda () (aZd00@parse-define-syntax aZ1fa1@e)) (lambda (aZ1fd5@aZ1fd2 aZ1fd6@aZ1fd4) (let ((aZ1fd9@rhs aZ1fd6@aZ1fd4) (aZ1fda@id aZ1fd5@aZ1fd2)) (begin (if (aZb81@bound-id-member? aZ1fda@id aZ1fb5@kwd*) (aZe5c@syntax-violation '#f '"cannot redefine keyword" aZ1fa1@e) (void)) (let ((aZ1fdd@lab (aZb07@gen-define-label aZ1fda@id aZ1f95@rib)) (aZ1fde@expanded-rhs (aZdd6@expand-transformer aZ1fd9@rhs aZ1f8f@mr))) (begin (aZb2b@extend-rib! aZ1f95@rib aZ1fda@id aZ1fdd@lab) (let ((aZ1fe1@b (aZbad@make-eval-transformer aZ1fde@expanded-rhs))) (aZdd4@chi-body* (cdr aZ1f8d@e*) (cons (cons aZ1fdd@lab aZ1fe1@b) aZ1f8e@r) (cons (cons aZ1fdd@lab aZ1fe1@b) aZ1f8f@mr) aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?)))))))) (if (memv aZ1fb7@t '(let-syntax letrec-syntax)) (let ((aZ1fe3@t aZ1fa1@e)) (let ((aZ1fe5@ls/false (aZd7c@syntax-dispatch aZ1fe3@t '(_ #(each (any any)) . each-any)))) (if (and aZ1fe5@ls/false (apply (lambda (aZ1fe7@xlhs* aZ1fe8@xrhs* aZ1fe9@xbody*) (if (not (aZb7d@valid-bound-ids? aZ1fe7@xlhs*)) (aZe5c@syntax-violation '#f '"invalid identifiers" aZ1fa1@e) (void))) aZ1fe5@ls/false)) (apply (lambda (aZ1fed@xlhs* aZ1fee@xrhs* aZ1fef@xbody*) (let ((aZ1ff3@xlab* (map aZb01@gen-label aZ1fed@xlhs*))) (let ((aZ1ff5@xrib (aZb35@make-full-rib aZ1fed@xlhs* aZ1ff3@xlab*))) (let ((aZ1ff7@xb* (map (lambda (aZ1ff9@x) (aZbad@make-eval-transformer (aZdd6@expand-transformer (if (eq? aZ1fb1@type 'let-syntax) aZ1ff9@x (aZb61@add-subst aZ1ff5@xrib aZ1ff9@x)) aZ1f8f@mr))) aZ1fee@xrhs*))) (aZdd4@chi-body* (append (map (lambda (aZ1ffb@x) (aZb61@add-subst aZ1ff5@xrib aZ1ffb@x)) aZ1fef@xbody*) (cdr aZ1f8d@e*)) (append (map cons aZ1ff3@xlab* aZ1ff7@xb*) aZ1f8e@r) (append (map cons aZ1ff3@xlab* aZ1ff7@xb*) aZ1f8f@mr) aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?))))) aZ1fe5@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1fe3@t)))) (if (memv aZ1fb7@t '(begin)) (let ((aZ1ffd@t aZ1fa1@e)) (let ((aZ1fff@ls/false (aZd7c@syntax-dispatch aZ1ffd@t '(_ . each-any)))) (if aZ1fff@ls/false (apply (lambda (aZ2001@x*) (aZdd4@chi-body* (append aZ2001@x* (cdr aZ1f8d@e*)) aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?)) aZ1fff@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ1ffd@t)))) (if (memv aZ1fb7@t '(global-macro global-macro!)) (aZdd4@chi-body* (cons (aZb61@add-subst aZ1f95@rib (aZd98@chi-global-macro aZ1fb0@value aZ1fa1@e)) (cdr aZ1f8d@e*)) aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?) (if (memv aZ1fb7@t '(local-macro local-macro!)) (aZdd4@chi-body* (cons (aZb61@add-subst aZ1f95@rib (aZd96@chi-local-macro aZ1fb0@value aZ1fa1@e)) (cdr aZ1f8d@e*)) aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?) (if (memv aZ1fb7@t '(macro macro!)) (aZdd4@chi-body* (cons (aZb61@add-subst aZ1f95@rib (aZd94@chi-macro aZ1fb0@value aZ1fa1@e)) (cdr aZ1f8d@e*)) aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?) (if (memv aZ1fb7@t '(module)) (call-with-values (lambda () (aZdd2@chi-internal-module aZ1fa1@e aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd*)) (lambda (aZ2013@aZ2004 aZ2014@aZ2006 aZ2015@aZ2008 aZ2016@aZ200a aZ2017@aZ200c aZ2018@aZ200e aZ2019@aZ2010 aZ201a@aZ2012) (let ((aZ2023@kwd* aZ201a@aZ2012) (aZ2024@mod** aZ2019@aZ2010) (aZ2025@mr aZ2018@aZ200e) (aZ2026@r aZ2017@aZ200c) (aZ2027@m-exp-lab* aZ2016@aZ200a) (aZ2028@m-exp-id* aZ2015@aZ2008) (aZ2029@rhs* aZ2014@aZ2006) (aZ202a@lex* aZ2013@aZ2004)) (begin (vector-for-each (lambda (aZ2033@id aZ2034@lab) (aZb2b@extend-rib! aZ1f95@rib aZ2033@id aZ2034@lab)) aZ2028@m-exp-id* aZ2027@m-exp-lab*) (aZdd4@chi-body* (cdr aZ1f8d@e*) aZ2026@r aZ2025@mr aZ202a@lex* aZ2029@rhs* aZ2024@mod** aZ2023@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?))))) (if (memv aZ1fb7@t '(library)) (begin (aZe3e@library-expander (aZb89@stx->datum aZ1fa1@e)) (aZdd4@chi-body* (cdr aZ1f8d@e*) aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?)) (if (memv aZ1fb7@t '(export)) (let ((aZ2037@t aZ1fa1@e)) (let ((aZ2039@ls/false (aZd7c@syntax-dispatch aZ2037@t '(_ . each-any)))) (if aZ2039@ls/false (apply (lambda (aZ203b@exp-decl*) (aZdd4@chi-body* (cdr aZ1f8d@e*) aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* (append aZ203b@exp-decl* aZ1f94@exp*) aZ1f95@rib aZ1f96@top?)) aZ2039@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ2037@t)))) (if (memv aZ1fb7@t '(import)) (let ((aZ203e@module-import? '#f) (aZ2040@module-import '#f) (aZ2042@library-import '#f)) (begin (set! aZ203e@module-import? (lambda (aZ2091@e) (let ((aZ2093@t aZ2091@e)) (let ((aZ2095@ls/false (aZd7c@syntax-dispatch aZ2093@t '(_ any)))) (if (and aZ2095@ls/false (apply (lambda (aZ2097@id) (aZb75@id? aZ2097@id)) aZ2095@ls/false)) (apply (lambda (aZ2099@id) '#t) aZ2095@ls/false) (let ((aZ209b@t aZ2093@t)) (let ((aZ209d@ls/false (aZd7c@syntax-dispatch aZ209b@t '(_ . each-any)))) (if aZ209d@ls/false (apply (lambda (aZ209f@imp*) '#f) aZ209d@ls/false) (let ((aZ20a1@t aZ209b@t)) (let ((aZ20a3@ls/false (aZd7c@syntax-dispatch aZ20a1@t '_))) (if aZ20a3@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"malformed import form" aZ2091@e)) aZ20a3@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ20a1@t)))))))))))) (set! aZ2040@module-import (lambda (aZ206f@e aZ2070@r) (let ((aZ2073@t aZ206f@e)) (let ((aZ2075@ls/false (aZd7c@syntax-dispatch aZ2073@t '(_ any)))) (if (and aZ2075@ls/false (apply (lambda (aZ2077@id) (aZb75@id? aZ2077@id)) aZ2075@ls/false)) (apply (lambda (aZ2079@id) (call-with-values (lambda () (aZb97@syntax-type aZ2079@id aZ2070@r)) (lambda (aZ2081@aZ207c aZ2082@aZ207e aZ2083@aZ2080) (let ((aZ2087@kwd aZ2083@aZ2080) (aZ2088@value aZ2082@aZ207e) (aZ2089@type aZ2081@aZ207c)) (let ((aZ208d@t aZ2089@type)) (if (memv aZ208d@t '($module)) (let ((aZ208f@iface aZ2088@value)) (values (aZdd0@module-interface-exp-id* aZ208f@iface aZ2079@id) (aZdca@module-interface-exp-lab-vec aZ208f@iface))) (aZe5c@syntax-violation '#f '"invalid import" aZ206f@e))))))) aZ2075@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ2073@t)))))) (set! aZ2042@library-import (lambda (aZ2053@e) (let ((aZ2055@t aZ2053@e)) (let ((aZ2057@ls/false (aZd7c@syntax-dispatch aZ2055@t '(any . each-any)))) (if aZ2057@ls/false (apply (lambda (aZ2059@ctxt aZ205a@imp*) (call-with-values (lambda () (aZdde@parse-import-spec* (aZe62@syntax->datum aZ205a@imp*))) (lambda (aZ2061@aZ205e aZ2062@aZ2060) (let ((aZ2065@subst-labels aZ2062@aZ2060) (aZ2066@subst-names aZ2061@aZ205e)) (values (vector-map (lambda (aZ2069@name) (aZb55@datum->stx aZ2059@ctxt aZ2069@name)) aZ2066@subst-names) aZ2065@subst-labels))))) aZ2057@ls/false) (let ((aZ206b@t aZ2055@t)) (let ((aZ206d@ls/false (aZd7c@syntax-dispatch aZ206b@t '_))) (if aZ206d@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid import form" aZ2053@e)) aZ206d@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ206b@t))))))))) (begin (call-with-values (lambda () (if (aZ203e@module-import? aZ1fa1@e) (aZ2040@module-import aZ1fa1@e aZ1f8e@r) (aZ2042@library-import aZ1fa1@e))) (lambda (aZ2047@aZ2044 aZ2048@aZ2046) (let ((aZ204b@lab* aZ2048@aZ2046) (aZ204c@id* aZ2047@aZ2044)) (vector-for-each (lambda (aZ204f@id aZ2050@lab) (aZb2b@extend-rib! aZ1f95@rib aZ204f@id aZ2050@lab)) aZ204c@id* aZ204b@lab*)))) (aZdd4@chi-body* (cdr aZ1f8d@e*) aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?)))) (if aZ1f96@top? (aZdd4@chi-body* (cdr aZ1f8d@e*) aZ1f8e@r aZ1f8f@mr (cons (aZafd@gen-lexical 'dummy) aZ1f90@lex*) (cons (cons 'top-expr aZ1fa1@e) aZ1f91@rhs*) aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp* aZ1f95@rib aZ1f96@top?) (values aZ1f8d@e* aZ1f8e@r aZ1f8f@mr aZ1f90@lex* aZ1f91@rhs* aZ1f92@mod** aZ1fb5@kwd* aZ1f94@exp*)))))))))))))))))))))) (set! aZ287a@aZdd4@chi-body* aZdd4@chi-body*) (set! aZdd6@expand-transformer (lambda (aZ20a5@expr aZ20a6@r) (let ((aZ20a9@rtc (aZde2@make-collector))) (let ((aZ20ab@expanded-rhs (let ((aZ20b5@aZ20ae aZde4@inv-collector) (aZ20b6@aZ20b0 aZde6@vis-collector) (aZ20b7@aZ20b2 aZ20a9@rtc) (aZ20b8@aZ20b4 (lambda (aZ20bd@x) (values)))) (let ((aZ20bf@swap (lambda () (begin (let ((aZ20c1@t (aZ20b5@aZ20ae))) (begin (aZ20b5@aZ20ae aZ20b7@aZ20b2) (set! aZ20b7@aZ20b2 aZ20c1@t))) (let ((aZ20c3@t (aZ20b6@aZ20b0))) (begin (aZ20b6@aZ20b0 aZ20b8@aZ20b4) (set! aZ20b8@aZ20b4 aZ20c3@t))))))) (dynamic-wind aZ20bf@swap (lambda () (aZd9e@chi-expr aZ20a5@expr aZ20a6@r aZ20a6@r)) aZ20bf@swap))))) (begin (for-each (let ((aZ20c5@mark-visit (aZde6@vis-collector))) (lambda (aZ20c7@x) (begin (aZ98b@aZ7d9@invoke-library aZ20c7@x) (aZ20c5@mark-visit aZ20c7@x)))) (aZ20a9@rtc)) aZ20ab@expanded-rhs))))) (set! aZ287b@aZdd6@expand-transformer aZdd6@expand-transformer) (set! aZdd8@parse-exports (lambda (aZ20c9@exp*) (let aZ20d1@f ((aZ20cb@exp* aZ20c9@exp*) (aZ20cc@int* '()) (aZ20cd@ext* '())) (if (null? aZ20cb@exp*) (begin (if (not (aZb7d@valid-bound-ids? aZ20cd@ext*)) (aZe5c@syntax-violation 'export '"invalid exports" (aZdb2@find-dups aZ20cd@ext*)) (void)) (values (map aZe62@syntax->datum aZ20cd@ext*) aZ20cc@int*)) (let ((aZ20d3@t (car aZ20cb@exp*))) (let ((aZ20d5@ls/false (aZd7c@syntax-dispatch aZ20d3@t '(any . #(each (any any)))))) (if aZ20d5@ls/false (apply (lambda (aZ20d7@rename aZ20d8@i* aZ20d9@e*) (begin (if (not (and (eq? (aZe62@syntax->datum aZ20d7@rename) 'rename) (for-all aZb75@id? aZ20d8@i*) (for-all aZb75@id? aZ20d9@e*))) (aZe5c@syntax-violation 'export '"invalid export specifier" (car aZ20cb@exp*)) (void)) (aZ20d1@f (cdr aZ20cb@exp*) (append aZ20d8@i* aZ20cc@int*) (append aZ20d9@e* aZ20cd@ext*)))) aZ20d5@ls/false) (let ((aZ20dd@t aZ20d3@t)) (let ((aZ20df@ls/false (aZd7c@syntax-dispatch aZ20dd@t 'any))) (if aZ20df@ls/false (apply (lambda (aZ20e1@ie) (begin (if (not (aZb75@id? aZ20e1@ie)) (aZe5c@syntax-violation 'export '"invalid export" aZ20e1@ie) (void)) (aZ20d1@f (cdr aZ20cb@exp*) (cons aZ20e1@ie aZ20cc@int*) (cons aZ20e1@ie aZ20cd@ext*)))) aZ20df@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ20dd@t))))))))))) (set! aZ287c@aZdd8@parse-exports aZdd8@parse-exports) (set! aZdda@parse-library-name (lambda (aZ20e3@spec) (let ((aZ20e6@parse '#f)) (begin (set! aZ20e6@parse (lambda (aZ20f3@x) (let ((aZ20f5@t aZ20f3@x)) (let ((aZ20f7@ls/false (aZd7c@syntax-dispatch aZ20f5@t '(each-any)))) (if (and aZ20f7@ls/false (apply (lambda (aZ20f9@v*) (for-all (lambda (aZ20fb@x) (let ((aZ20fd@x (aZe62@syntax->datum aZ20fb@x))) (and (integer? aZ20fd@x) (exact? aZ20fd@x)))) aZ20f9@v*)) aZ20f7@ls/false)) (apply (lambda (aZ20ff@v*) (values '() (map aZe62@syntax->datum aZ20ff@v*))) aZ20f7@ls/false) (let ((aZ2101@t aZ20f5@t)) (let ((aZ2103@ls/false (aZd7c@syntax-dispatch aZ2101@t '(any . any)))) (if (and aZ2103@ls/false (apply (lambda (aZ2105@x aZ2106@rest) (symbol? (aZe62@syntax->datum aZ2105@x))) aZ2103@ls/false)) (apply (lambda (aZ2109@x aZ210a@rest) (call-with-values (lambda () (aZ20e6@parse aZ210a@rest)) (lambda (aZ2111@aZ210e aZ2112@aZ2110) (let ((aZ2115@v* aZ2112@aZ2110) (aZ2116@x* aZ2111@aZ210e)) (values (cons (aZe62@syntax->datum aZ2109@x) aZ2116@x*) aZ2115@v*))))) aZ2103@ls/false) (let ((aZ2119@t aZ2101@t)) (let ((aZ211b@ls/false (aZd7c@syntax-dispatch aZ2119@t '()))) (if aZ211b@ls/false (apply (lambda () (values '() '())) aZ211b@ls/false) (let ((aZ211d@t aZ2119@t)) (let ((aZ211f@ls/false (aZd7c@syntax-dispatch aZ211d@t '_))) (if aZ211f@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid library name" aZ20e3@spec)) aZ211f@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ211d@t))))))))))))))) (call-with-values (lambda () (aZ20e6@parse aZ20e3@spec)) (lambda (aZ20eb@aZ20e8 aZ20ec@aZ20ea) (let ((aZ20ef@ver* aZ20ec@aZ20ea) (aZ20f0@name* aZ20eb@aZ20e8)) (begin (if (null? aZ20f0@name*) (aZe5c@syntax-violation '#f '"empty library name" aZ20e3@spec) (void)) (values aZ20f0@name* aZ20ef@ver*))))))))) (set! aZ287d@aZdda@parse-library-name aZdda@parse-library-name) (set! aZddc@parse-library (lambda (aZ2121@e) (let ((aZ2123@t aZ2121@e)) (let ((aZ2125@ls/false (aZd7c@syntax-dispatch aZ2123@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and aZ2125@ls/false (apply (lambda (aZ2127@library aZ2128@name* aZ2129@export aZ212a@exp* aZ212b@import aZ212c@imp* aZ212d@b*) (and (eq? (aZe62@syntax->datum aZ2129@export) 'export) (eq? (aZe62@syntax->datum aZ212b@import) 'import) (eq? (aZe62@syntax->datum aZ2127@library) 'library))) aZ2125@ls/false)) (apply (lambda (aZ2135@library aZ2136@name* aZ2137@export aZ2138@exp* aZ2139@import aZ213a@imp* aZ213b@b*) (values aZ2136@name* aZ2138@exp* aZ213a@imp* aZ213b@b*)) aZ2125@ls/false) (let ((aZ2143@t aZ2123@t)) (let ((aZ2145@ls/false (aZd7c@syntax-dispatch aZ2143@t '_))) (if aZ2145@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"malformed library" aZ2121@e)) aZ2145@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ2143@t))))))))) (set! aZ287e@aZddc@parse-library aZddc@parse-library) (set! aZdde@parse-import-spec* (let ((aZ2148@idsyn? '#f) (aZ214a@dup-error '#f) (aZ214c@merge-substs '#f) (aZ214e@exclude* '#f) (aZ2150@find* '#f) (aZ2152@rem* '#f) (aZ2154@remove-dups '#f) (aZ2156@parse-library-name '#f) (aZ2158@import-library '#f) (aZ215a@get-import '#f) (aZ215c@add-imports! '#f)) (begin (set! aZ2148@idsyn? (lambda (aZ2351@x) (symbol? (aZe62@syntax->datum aZ2351@x)))) (set! aZ214a@dup-error (lambda (aZ234f@name) (aZe5c@syntax-violation 'import '"two imports with different bindings" aZ234f@name))) (set! aZ214c@merge-substs (lambda (aZ233d@s aZ233e@subst) (let ((aZ2342@insert-to-subst '#f)) (begin (set! aZ2342@insert-to-subst (lambda (aZ2343@a aZ2344@subst) (let ((aZ2347@name (car aZ2343@a)) (aZ2348@label (cdr aZ2343@a))) (let ((aZ234b@t (assq aZ2347@name aZ2344@subst))) (if aZ234b@t ((lambda (aZ234d@x) (if (eq? (cdr aZ234d@x) aZ2348@label) aZ2344@subst (aZ214a@dup-error aZ2347@name))) aZ234b@t) (cons aZ2343@a aZ2344@subst)))))) (if (null? aZ233d@s) aZ233e@subst (aZ2342@insert-to-subst (car aZ233d@s) (aZ214c@merge-substs (cdr aZ233d@s) aZ233e@subst))))))) (set! aZ214e@exclude* (lambda (aZ230d@sym* aZ230e@subst) (let ((aZ2312@exclude '#f)) (begin (set! aZ2312@exclude (lambda (aZ232b@sym aZ232c@subst) (if (null? aZ232c@subst) (aZe5c@syntax-violation 'import '"cannot rename unbound identifier" aZ232b@sym) (if (eq? aZ232b@sym (caar aZ232c@subst)) (values (cdar aZ232c@subst) (cdr aZ232c@subst)) (let ((aZ232f@a (car aZ232c@subst))) (call-with-values (lambda () (aZ2312@exclude aZ232b@sym (cdr aZ232c@subst))) (lambda (aZ2335@aZ2332 aZ2336@aZ2334) (let ((aZ2339@subst aZ2336@aZ2334) (aZ233a@old aZ2335@aZ2332)) (values aZ233a@old (cons aZ232f@a aZ2339@subst)))))))))) (if (null? aZ230d@sym*) (values '() aZ230e@subst) (call-with-values (lambda () (aZ2312@exclude (car aZ230d@sym*) aZ230e@subst)) (lambda (aZ2317@aZ2314 aZ2318@aZ2316) (let ((aZ231b@subst aZ2318@aZ2316) (aZ231c@old aZ2317@aZ2314)) (call-with-values (lambda () (aZ214e@exclude* (cdr aZ230d@sym*) aZ231b@subst)) (lambda (aZ2323@aZ2320 aZ2324@aZ2322) (let ((aZ2327@subst aZ2324@aZ2322) (aZ2328@old* aZ2323@aZ2320)) (values (cons aZ231c@old aZ2328@old*) aZ2327@subst)))))))))))) (set! aZ2150@find* (lambda (aZ2305@sym* aZ2306@subst) (map (lambda (aZ2309@x) (let ((aZ230b@t (assq aZ2309@x aZ2306@subst))) (if aZ230b@t (cdr aZ230b@t) (aZe5c@syntax-violation 'import '"cannot find identifier" aZ2309@x)))) aZ2305@sym*))) (set! aZ2152@rem* (lambda (aZ22fd@sym* aZ22fe@subst) (let aZ2303@f ((aZ2301@subst aZ22fe@subst)) (if (null? aZ2301@subst) '() (if (memq (caar aZ2301@subst) aZ22fd@sym*) (aZ2303@f (cdr aZ2301@subst)) (cons (car aZ2301@subst) (aZ2303@f (cdr aZ2301@subst)))))))) (set! aZ2154@remove-dups (lambda (aZ22fb@ls) (if (null? aZ22fb@ls) '() (if (memq (car aZ22fb@ls) (cdr aZ22fb@ls)) (aZ2154@remove-dups (cdr aZ22fb@ls)) (cons (car aZ22fb@ls) (aZ2154@remove-dups (cdr aZ22fb@ls))))))) (set! aZ2156@parse-library-name (lambda (aZ2213@spec) (let ((aZ2216@subversion? '#f) (aZ2218@subversion-pred '#f) (aZ221a@version-pred '#f)) (begin (set! aZ2216@subversion? (lambda (aZ22f7@x) (let ((aZ22f9@x (aZe62@syntax->datum aZ22f7@x))) (and (integer? aZ22f9@x) (exact? aZ22f9@x) (>= aZ22f9@x '0))))) (set! aZ2218@subversion-pred (lambda (aZ2297@x*) (let ((aZ2299@t aZ2297@x*)) (let ((aZ229b@ls/false (aZd7c@syntax-dispatch aZ2299@t 'any))) (if (and aZ229b@ls/false (apply (lambda (aZ229d@n) (aZ2216@subversion? aZ229d@n)) aZ229b@ls/false)) (apply (lambda (aZ229f@n) (lambda (aZ22a1@x) (= aZ22a1@x (aZe62@syntax->datum aZ229f@n)))) aZ229b@ls/false) (let ((aZ22a3@t aZ2299@t)) (let ((aZ22a5@ls/false (aZd7c@syntax-dispatch aZ22a3@t '(any . each-any)))) (if (and aZ22a5@ls/false (apply (lambda (aZ22a7@p? aZ22a8@sub*) (eq? (aZe62@syntax->datum aZ22a7@p?) 'and)) aZ22a5@ls/false)) (apply (lambda (aZ22ab@p? aZ22ac@sub*) (let ((aZ22af@p* (map aZ2218@subversion-pred aZ22ac@sub*))) (lambda (aZ22b1@x) (for-all (lambda (aZ22b3@p) (aZ22b3@p aZ22b1@x)) aZ22af@p*)))) aZ22a5@ls/false) (let ((aZ22b5@t aZ22a3@t)) (let ((aZ22b7@ls/false (aZd7c@syntax-dispatch aZ22b5@t '(any . each-any)))) (if (and aZ22b7@ls/false (apply (lambda (aZ22b9@p? aZ22ba@sub*) (eq? (aZe62@syntax->datum aZ22b9@p?) 'or)) aZ22b7@ls/false)) (apply (lambda (aZ22bd@p? aZ22be@sub*) (let ((aZ22c1@p* (map aZ2218@subversion-pred aZ22be@sub*))) (lambda (aZ22c3@x) (exists (lambda (aZ22c5@p) (aZ22c5@p aZ22c3@x)) aZ22c1@p*)))) aZ22b7@ls/false) (let ((aZ22c7@t aZ22b5@t)) (let ((aZ22c9@ls/false (aZd7c@syntax-dispatch aZ22c7@t '(any any)))) (if (and aZ22c9@ls/false (apply (lambda (aZ22cb@p? aZ22cc@sub) (eq? (aZe62@syntax->datum aZ22cb@p?) 'not)) aZ22c9@ls/false)) (apply (lambda (aZ22cf@p? aZ22d0@sub) (let ((aZ22d3@p (aZ2218@subversion-pred aZ22d0@sub))) (lambda (aZ22d5@x) (not (aZ22d3@p aZ22d5@x))))) aZ22c9@ls/false) (let ((aZ22d7@t aZ22c7@t)) (let ((aZ22d9@ls/false (aZd7c@syntax-dispatch aZ22d7@t '(any any)))) (if (and aZ22d9@ls/false (apply (lambda (aZ22db@p? aZ22dc@n) (and (eq? (aZe62@syntax->datum aZ22db@p?) '<=) (aZ2216@subversion? aZ22dc@n))) aZ22d9@ls/false)) (apply (lambda (aZ22df@p? aZ22e0@n) (lambda (aZ22e3@x) (<= aZ22e3@x (aZe62@syntax->datum aZ22e0@n)))) aZ22d9@ls/false) (let ((aZ22e5@t aZ22d7@t)) (let ((aZ22e7@ls/false (aZd7c@syntax-dispatch aZ22e5@t '(any any)))) (if (and aZ22e7@ls/false (apply (lambda (aZ22e9@p? aZ22ea@n) (and (eq? (aZe62@syntax->datum aZ22e9@p?) '>=) (aZ2216@subversion? aZ22ea@n))) aZ22e7@ls/false)) (apply (lambda (aZ22ed@p? aZ22ee@n) (lambda (aZ22f1@x) (>= aZ22f1@x (aZe62@syntax->datum aZ22ee@n)))) aZ22e7@ls/false) (let ((aZ22f3@t aZ22e5@t)) (let ((aZ22f5@ls/false (aZd7c@syntax-dispatch aZ22f3@t '_))) (if aZ22f5@ls/false (apply (lambda () (aZe5c@syntax-violation 'import '"invalid sub-version spec" aZ2213@spec aZ2297@x*)) aZ22f5@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ22f3@t)))))))))))))))))))))))) (set! aZ221a@version-pred (lambda (aZ2247@x*) (let ((aZ2249@t aZ2247@x*)) (let ((aZ224b@ls/false (aZd7c@syntax-dispatch aZ2249@t '()))) (if aZ224b@ls/false (apply (lambda () (lambda (aZ224d@x) '#t)) aZ224b@ls/false) (let ((aZ224f@t aZ2249@t)) (let ((aZ2251@ls/false (aZd7c@syntax-dispatch aZ224f@t '(any . each-any)))) (if (and aZ2251@ls/false (apply (lambda (aZ2253@c aZ2254@ver*) (eq? (aZe62@syntax->datum aZ2253@c) 'and)) aZ2251@ls/false)) (apply (lambda (aZ2257@c aZ2258@ver*) (let ((aZ225b@p* (map aZ221a@version-pred aZ2258@ver*))) (lambda (aZ225d@x) (for-all (lambda (aZ225f@p) (aZ225f@p aZ225d@x)) aZ225b@p*)))) aZ2251@ls/false) (let ((aZ2261@t aZ224f@t)) (let ((aZ2263@ls/false (aZd7c@syntax-dispatch aZ2261@t '(any . each-any)))) (if (and aZ2263@ls/false (apply (lambda (aZ2265@c aZ2266@ver*) (eq? (aZe62@syntax->datum aZ2265@c) 'or)) aZ2263@ls/false)) (apply (lambda (aZ2269@c aZ226a@ver*) (let ((aZ226d@p* (map aZ221a@version-pred aZ226a@ver*))) (lambda (aZ226f@x) (exists (lambda (aZ2271@p) (aZ2271@p aZ226f@x)) aZ226d@p*)))) aZ2263@ls/false) (let ((aZ2273@t aZ2261@t)) (let ((aZ2275@ls/false (aZd7c@syntax-dispatch aZ2273@t '(any any)))) (if (and aZ2275@ls/false (apply (lambda (aZ2277@c aZ2278@ver) (eq? (aZe62@syntax->datum aZ2277@c) 'not)) aZ2275@ls/false)) (apply (lambda (aZ227b@c aZ227c@ver) (let ((aZ227f@p (aZ221a@version-pred aZ227c@ver))) (lambda (aZ2281@x) (not (aZ227f@p aZ2281@x))))) aZ2275@ls/false) (let ((aZ2283@t aZ2273@t)) (let ((aZ2285@ls/false (aZd7c@syntax-dispatch aZ2283@t 'each-any))) (if aZ2285@ls/false (apply (lambda (aZ2287@sub*) (let ((aZ2289@p* (map aZ2218@subversion-pred aZ2287@sub*))) (lambda (aZ228b@x) (let aZ2291@f ((aZ228d@p* aZ2289@p*) (aZ228e@x aZ228b@x)) (if (null? aZ228d@p*) '#t (if (null? aZ228e@x) '#f (and ((car aZ228d@p*) (car aZ228e@x)) (aZ2291@f (cdr aZ228d@p*) (cdr aZ228e@x))))))))) aZ2285@ls/false) (let ((aZ2293@t aZ2283@t)) (let ((aZ2295@ls/false (aZd7c@syntax-dispatch aZ2293@t '_))) (if aZ2295@ls/false (apply (lambda () (aZe5c@syntax-violation 'import '"invalid version spec" aZ2213@spec aZ2247@x*)) aZ2295@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ2293@t))))))))))))))))))))) (let aZ221d@f ((aZ221b@x aZ2213@spec)) (let ((aZ221f@t aZ221b@x)) (let ((aZ2221@ls/false (aZd7c@syntax-dispatch aZ221f@t '(each-any)))) (if aZ2221@ls/false (apply (lambda (aZ2223@version-spec*) (values '() (aZ221a@version-pred aZ2223@version-spec*))) aZ2221@ls/false) (let ((aZ2225@t aZ221f@t)) (let ((aZ2227@ls/false (aZd7c@syntax-dispatch aZ2225@t '(any . any)))) (if (and aZ2227@ls/false (apply (lambda (aZ2229@x aZ222a@x*) (aZ2148@idsyn? aZ2229@x)) aZ2227@ls/false)) (apply (lambda (aZ222d@x aZ222e@x*) (call-with-values (lambda () (aZ221d@f aZ222e@x*)) (lambda (aZ2235@aZ2232 aZ2236@aZ2234) (let ((aZ2239@pred aZ2236@aZ2234) (aZ223a@name aZ2235@aZ2232)) (values (cons (aZe62@syntax->datum aZ222d@x) aZ223a@name) aZ2239@pred))))) aZ2227@ls/false) (let ((aZ223d@t aZ2225@t)) (let ((aZ223f@ls/false (aZd7c@syntax-dispatch aZ223d@t '()))) (if aZ223f@ls/false (apply (lambda () (values '() (lambda (aZ2241@x) '#t))) aZ223f@ls/false) (let ((aZ2243@t aZ223d@t)) (let ((aZ2245@ls/false (aZd7c@syntax-dispatch aZ2243@t '_))) (if aZ2245@ls/false (apply (lambda () (aZe5c@syntax-violation '#f '"invalid import spec" aZ2213@spec)) aZ2245@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ2243@t)))))))))))))))))) (set! aZ2158@import-library (lambda (aZ2203@spec*) (call-with-values (lambda () (aZ2156@parse-library-name aZ2203@spec*)) (lambda (aZ2209@aZ2206 aZ220a@aZ2208) (let ((aZ220d@pred aZ220a@aZ2208) (aZ220e@name aZ2209@aZ2206)) (begin (if (null? aZ220e@name) (aZe5c@syntax-violation 'import '"empty library name" aZ2203@spec*) (void)) (let ((aZ2211@lib (aZ984@aZ7cb@find-library-by-name aZ220e@name))) (begin (if (not aZ2211@lib) (aZe5c@syntax-violation 'import '"cannot find library with required name" aZ220e@name) (void)) (if (not (aZ220d@pred (aZ95e@aZ77f@library-version aZ2211@lib))) (aZe5c@syntax-violation 'import '"library does not satisfy version specification" aZ2203@spec* aZ2211@lib) (void)) ((aZde8@imp-collector) aZ2211@lib) (aZ966@aZ78f@library-subst aZ2211@lib))))))))) (set! aZ215a@get-import (lambda (aZ2175@spec) (let ((aZ2177@t aZ2175@spec)) (let ((aZ2179@ls/false (aZd7c@syntax-dispatch aZ2177@t '(any . each-any)))) (if (and aZ2179@ls/false (apply (lambda (aZ217b@x aZ217c@x*) (not (memq (aZe62@syntax->datum aZ217b@x) '(for rename except only prefix library)))) aZ2179@ls/false)) (apply (lambda (aZ217f@x aZ2180@x*) (aZ2158@import-library (cons aZ217f@x aZ2180@x*))) aZ2179@ls/false) (let ((aZ2183@t aZ2177@t)) (let ((aZ2185@ls/false (aZd7c@syntax-dispatch aZ2183@t '(any any . #(each (any any)))))) (if (and aZ2185@ls/false (apply (lambda (aZ2187@rename aZ2188@isp aZ2189@old* aZ218a@new*) (and (eq? (aZe62@syntax->datum aZ2187@rename) 'rename) (for-all aZ2148@idsyn? aZ2189@old*) (for-all aZ2148@idsyn? aZ218a@new*))) aZ2185@ls/false)) (apply (lambda (aZ218f@rename aZ2190@isp aZ2191@old* aZ2192@new*) (let ((aZ2197@subst (aZ215a@get-import aZ2190@isp)) (aZ2198@old* (map aZe62@syntax->datum aZ2191@old*)) (aZ2199@new* (map aZe62@syntax->datum aZ2192@new*))) (let ((aZ219d@old-label* (aZ2150@find* aZ2198@old* aZ2197@subst))) (let ((aZ219f@subst (aZ2152@rem* aZ2198@old* aZ2197@subst))) (aZ214c@merge-substs (map cons aZ2199@new* aZ219d@old-label*) aZ219f@subst))))) aZ2185@ls/false) (let ((aZ21a1@t aZ2183@t)) (let ((aZ21a3@ls/false (aZd7c@syntax-dispatch aZ21a1@t '(any any . each-any)))) (if (and aZ21a3@ls/false (apply (lambda (aZ21a5@except aZ21a6@isp aZ21a7@sym*) (and (eq? (aZe62@syntax->datum aZ21a5@except) 'except) (for-all aZ2148@idsyn? aZ21a7@sym*))) aZ21a3@ls/false)) (apply (lambda (aZ21ab@except aZ21ac@isp aZ21ad@sym*) (let ((aZ21b1@subst (aZ215a@get-import aZ21ac@isp))) (aZ2152@rem* (map aZe62@syntax->datum aZ21ad@sym*) aZ21b1@subst))) aZ21a3@ls/false) (let ((aZ21b3@t aZ21a1@t)) (let ((aZ21b5@ls/false (aZd7c@syntax-dispatch aZ21b3@t '(any any . each-any)))) (if (and aZ21b5@ls/false (apply (lambda (aZ21b7@only aZ21b8@isp aZ21b9@sym*) (and (eq? (aZe62@syntax->datum aZ21b7@only) 'only) (for-all aZ2148@idsyn? aZ21b9@sym*))) aZ21b5@ls/false)) (apply (lambda (aZ21bd@only aZ21be@isp aZ21bf@sym*) (let ((aZ21c3@subst (aZ215a@get-import aZ21be@isp)) (aZ21c4@sym* (map aZe62@syntax->datum aZ21bf@sym*))) (let ((aZ21c7@sym* (aZ2154@remove-dups aZ21c4@sym*))) (let ((aZ21c9@lab* (aZ2150@find* aZ21c7@sym* aZ21c3@subst))) (map cons aZ21c7@sym* aZ21c9@lab*))))) aZ21b5@ls/false) (let ((aZ21cb@t aZ21b3@t)) (let ((aZ21cd@ls/false (aZd7c@syntax-dispatch aZ21cb@t '(any any any)))) (if (and aZ21cd@ls/false (apply (lambda (aZ21cf@prefix aZ21d0@isp aZ21d1@p) (and (eq? (aZe62@syntax->datum aZ21cf@prefix) 'prefix) (aZ2148@idsyn? aZ21d1@p))) aZ21cd@ls/false)) (apply (lambda (aZ21d5@prefix aZ21d6@isp aZ21d7@p) (let ((aZ21db@subst (aZ215a@get-import aZ21d6@isp)) (aZ21dc@prefix (symbol->string (aZe62@syntax->datum aZ21d7@p)))) (map (lambda (aZ21df@x) (cons (string->symbol (string-append aZ21dc@prefix (symbol->string (car aZ21df@x)))) (cdr aZ21df@x))) aZ21db@subst))) aZ21cd@ls/false) (let ((aZ21e1@t aZ21cb@t)) (let ((aZ21e3@ls/false (aZd7c@syntax-dispatch aZ21e1@t '(any each-any)))) (if (and aZ21e3@ls/false (apply (lambda (aZ21e5@library aZ21e6@spec*) (eq? (aZe62@syntax->datum aZ21e5@library) 'library)) aZ21e3@ls/false)) (apply (lambda (aZ21e9@library aZ21ea@spec*) (aZ2158@import-library aZ21ea@spec*)) aZ21e3@ls/false) (let ((aZ21ed@t aZ21e1@t)) (let ((aZ21ef@ls/false (aZd7c@syntax-dispatch aZ21ed@t '(any any . any)))) (if (and aZ21ef@ls/false (apply (lambda (aZ21f1@for aZ21f2@isp aZ21f3@rest) (eq? (aZe62@syntax->datum aZ21f1@for) 'for)) aZ21ef@ls/false)) (apply (lambda (aZ21f7@for aZ21f8@isp aZ21f9@rest) (aZ215a@get-import aZ21f8@isp)) aZ21ef@ls/false) (let ((aZ21fd@t aZ21ed@t)) (let ((aZ21ff@ls/false (aZd7c@syntax-dispatch aZ21fd@t 'any))) (if aZ21ff@ls/false (apply (lambda (aZ2201@spec) (aZe5c@syntax-violation 'import '"invalid import spec" aZ2201@spec)) aZ21ff@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ21fd@t))))))))))))))))))))))))))) (set! aZ215c@add-imports! (lambda (aZ2165@imp aZ2166@h) (let ((aZ2169@subst (aZ215a@get-import aZ2165@imp))) (for-each (lambda (aZ216b@x) (let ((aZ216d@name (car aZ216b@x)) (aZ216e@label (cdr aZ216b@x))) (let ((aZ2171@t (hashtable-ref aZ2166@h aZ216d@name '#f))) (if aZ2171@t ((lambda (aZ2173@l) (if (not (eq? aZ2173@l aZ216e@label)) (aZ214a@dup-error aZ216d@name) (void))) aZ2171@t) (hashtable-set! aZ2166@h aZ216d@name aZ216e@label))))) aZ2169@subst)))) (lambda (aZ215d@imp*) (let aZ2163@f ((aZ215f@imp* aZ215d@imp*) (aZ2160@h (make-eq-hashtable))) (if (null? aZ215f@imp*) (hashtable-entries aZ2160@h) (begin (aZ215c@add-imports! (car aZ215f@imp*) aZ2160@h) (aZ2163@f (cdr aZ215f@imp*) aZ2160@h)))))))) (set! aZ287f@aZdde@parse-import-spec* aZdde@parse-import-spec*) (set! aZde0@make-top-rib (lambda (aZ2353@names aZ2354@labels) (let ((aZ2357@rib (aZb29@make-empty-rib))) (begin (vector-for-each (lambda (aZ2359@name aZ235a@label) (begin (if (not (symbol? aZ2359@name)) (error 'make-top-rib '"BUG: not a symbol" aZ2359@name) (void)) (aZb2d@extend-rib/nc! aZ2357@rib (make-simple-struct 'stx '5 (list aZ2359@name aZaf9@top-mark* '() '())) aZ235a@label))) aZ2353@names aZ2354@labels) aZ2357@rib)))) (set! aZ2880@aZde0@make-top-rib aZde0@make-top-rib) (set! aZde2@make-collector (lambda () (let ((aZ235d@ls '())) (lambda aZ2361 (let ((aZ2362 (length aZ2361))) (if (= aZ2362 '0) (apply (lambda () aZ235d@ls) aZ2361) (if (= aZ2362 '1) (apply (lambda (aZ235f@x) (set! aZ235d@ls (aZaf2@set-cons aZ235f@x aZ235d@ls))) aZ2361) (error 'apply '"invalid arg count")))))))) (set! aZ2881@aZde2@make-collector aZde2@make-collector) (set! aZde4@inv-collector (aZ6bf@aZ59d@make-parameter (lambda aZ2363@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (aZ2365@x) (begin (if (not (procedure? aZ2365@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" aZ2365@x) (void)) aZ2365@x)))) (set! aZ2882@aZde4@inv-collector aZde4@inv-collector) (set! aZde6@vis-collector (aZ6bf@aZ59d@make-parameter (lambda aZ2367@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (aZ2369@x) (begin (if (not (procedure? aZ2369@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" aZ2369@x) (void)) aZ2369@x)))) (set! aZ2883@aZde6@vis-collector aZde6@vis-collector) (set! aZde8@imp-collector (aZ6bf@aZ59d@make-parameter (lambda aZ236b@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (aZ236d@x) (begin (if (not (procedure? aZ236d@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" aZ236d@x) (void)) aZ236d@x)))) (set! aZ2884@aZde8@imp-collector aZde8@imp-collector) (set! aZdea@chi-library-internal (lambda (aZ236f@e* aZ2370@rib aZ2371@top?) (call-with-values (lambda () (aZdd4@chi-body* aZ236f@e* '() '() '() '() '() '() '() aZ2370@rib aZ2371@top?)) (lambda (aZ2385@aZ2376 aZ2386@aZ2378 aZ2387@aZ237a aZ2388@aZ237c aZ2389@aZ237e aZ238a@aZ2380 aZ238b@aZ2382 aZ238c@aZ2384) (let ((aZ2395@exp* aZ238c@aZ2384) (aZ2396@_kwd* aZ238b@aZ2382) (aZ2397@mod** aZ238a@aZ2380) (aZ2398@rhs* aZ2389@aZ237e) (aZ2399@lex* aZ2388@aZ237c) (aZ239a@mr aZ2387@aZ237a) (aZ239b@r aZ2386@aZ2378) (aZ239c@e* aZ2385@aZ2376)) (values (append (apply append (reverse aZ2397@mod**)) aZ239c@e*) aZ239b@r aZ239a@mr (reverse aZ2399@lex*) (reverse aZ2398@rhs*) aZ2395@exp*)))))) (set! aZ2885@aZdea@chi-library-internal aZdea@chi-library-internal) (set! aZdec@chi-interaction-expr (lambda (aZ23a5@e aZ23a6@rib aZ23a7@r) (call-with-values (lambda () (aZdd4@chi-body* (list aZ23a5@e) aZ23a7@r aZ23a7@r '() '() '() '() '() aZ23a6@rib '#t)) (lambda (aZ23bb@aZ23ac aZ23bc@aZ23ae aZ23bd@aZ23b0 aZ23be@aZ23b2 aZ23bf@aZ23b4 aZ23c0@aZ23b6 aZ23c1@aZ23b8 aZ23c2@aZ23ba) (let ((aZ23cb@_exp* aZ23c2@aZ23ba) (aZ23cc@_kwd* aZ23c1@aZ23b8) (aZ23cd@mod** aZ23c0@aZ23b6) (aZ23ce@rhs* aZ23bf@aZ23b4) (aZ23cf@lex* aZ23be@aZ23b2) (aZ23d0@mr aZ23bd@aZ23b0) (aZ23d1@r aZ23bc@aZ23ae) (aZ23d2@e* aZ23bb@aZ23ac)) (let ((aZ23db@e* (aZdac@expand-interaction-rhs*/init* (reverse aZ23cf@lex*) (reverse aZ23ce@rhs*) (append (apply append (reverse aZ23cd@mod**)) aZ23d2@e*) aZ23d1@r aZ23d0@mr))) (let ((aZ23dd@e (if (null? aZ23db@e*) (aZadb@aZa36@build-void) (if (null? (cdr aZ23db@e*)) (car aZ23db@e*) (aZada@aZa34@build-sequence '#f aZ23db@e*))))) (values aZ23dd@e aZ23d1@r)))))))) (set! aZ2886@aZdec@chi-interaction-expr aZdec@chi-interaction-expr) (set! aZdee@library-body-expander (lambda (aZ23df@name aZ23e0@main-exp* aZ23e1@imp* aZ23e2@b* aZ23e3@top?) (let ((aZ23ea@itc '#f)) (begin (set! aZ23ea@itc (aZde2@make-collector)) (let ((aZ23f3@aZ23ec aZde8@imp-collector) (aZ23f4@aZ23ee aZe6c@top-level-context) (aZ23f5@aZ23f0 aZ23ea@itc) (aZ23f6@aZ23f2 '#f)) (let ((aZ23fb@swap (lambda () (begin (let ((aZ23fd@t (aZ23f3@aZ23ec))) (begin (aZ23f3@aZ23ec aZ23f5@aZ23f0) (set! aZ23f5@aZ23f0 aZ23fd@t))) (let ((aZ23ff@t (aZ23f4@aZ23ee))) (begin (aZ23f4@aZ23ee aZ23f6@aZ23f2) (set! aZ23f6@aZ23f2 aZ23ff@t))))))) (dynamic-wind aZ23fb@swap (lambda () (call-with-values (lambda () (aZdde@parse-import-spec* aZ23e1@imp*)) (lambda (aZ2405@aZ2402 aZ2406@aZ2404) (let ((aZ2409@subst-labels aZ2406@aZ2404) (aZ240a@subst-names aZ2405@aZ2402)) (let ((aZ240d@rib (aZde0@make-top-rib aZ240a@subst-names aZ2409@subst-labels))) (let ((aZ2410@wrap '#f)) (begin (set! aZ2410@wrap (lambda (aZ248b@x) (make-simple-struct 'stx '5 (list aZ248b@x aZaf9@top-mark* (list aZ240d@rib) '())))) (let ((aZ2411@b* (map aZ2410@wrap aZ23e2@b*)) (aZ2412@main-exp* (map aZ2410@wrap aZ23e0@main-exp*)) (aZ2413@rtc (aZde2@make-collector)) (aZ2414@vtc (aZde2@make-collector))) (let ((aZ2421@aZ241a aZde4@inv-collector) (aZ2422@aZ241c aZde6@vis-collector) (aZ2423@aZ241e aZ2413@rtc) (aZ2424@aZ2420 aZ2414@vtc)) (let ((aZ2429@swap (lambda () (begin (let ((aZ242b@t (aZ2421@aZ241a))) (begin (aZ2421@aZ241a aZ2423@aZ241e) (set! aZ2423@aZ241e aZ242b@t))) (let ((aZ242d@t (aZ2422@aZ241c))) (begin (aZ2422@aZ241c aZ2424@aZ2420) (set! aZ2424@aZ2420 aZ242d@t))))))) (dynamic-wind aZ2429@swap (lambda () (call-with-values (lambda () (aZdea@chi-library-internal aZ2411@b* aZ240d@rib aZ23e3@top?)) (lambda (aZ243b@aZ2430 aZ243c@aZ2432 aZ243d@aZ2434 aZ243e@aZ2436 aZ243f@aZ2438 aZ2440@aZ243a) (let ((aZ2447@internal-exp* aZ2440@aZ243a) (aZ2448@rhs* aZ243f@aZ2438) (aZ2449@lex* aZ243e@aZ2436) (aZ244a@mr aZ243d@aZ2434) (aZ244b@r aZ243c@aZ2432) (aZ244c@init* aZ243b@aZ2430)) (call-with-values (lambda () (aZdd8@parse-exports (append aZ2412@main-exp* aZ2447@internal-exp*))) (lambda (aZ2457@aZ2454 aZ2458@aZ2456) (let ((aZ245b@exp-id* aZ2458@aZ2456) (aZ245c@exp-name* aZ2457@aZ2454)) (begin (aZb31@seal-rib! aZ240d@rib) (let ((aZ245f@init* (aZd9a@chi-expr* aZ244c@init* aZ244b@r aZ244a@mr))) (let ((aZ2461@rhs* (aZdae@chi-rhs* aZ2448@rhs* aZ244b@r aZ244a@mr))) (begin (aZb33@unseal-rib! aZ240d@rib) (let ((aZ2463@loc* (map aZaff@gen-global aZ2449@lex*)) (aZ2464@export-subst (aZe46@make-export-subst aZ245c@exp-name* aZ245b@exp-id*))) (let ((aZ2468@errstr '#f)) (begin (set! aZ2468@errstr '"attempt to export mutated variable") (call-with-values (lambda () (aZe48@make-export-env/macros aZ2449@lex* aZ2463@loc* aZ244b@r)) (lambda (aZ246f@aZ246a aZ2470@aZ246c aZ2471@aZ246e) (let ((aZ2475@macro* aZ2471@aZ246e) (aZ2476@global* aZ2470@aZ246c) (aZ2477@export-env aZ246f@aZ246a)) (begin (for-each (lambda (aZ247b@s) (let ((aZ247d@name (car aZ247b@s)) (aZ247e@label (cdr aZ247b@s))) (let ((aZ2481@p (assq aZ247e@label aZ2477@export-env))) (if aZ2481@p (let ((aZ2483@b (cdr aZ2481@p))) (let ((aZ2485@type (car aZ2483@b))) (if (eq? aZ2485@type 'mutable) (aZe5c@syntax-violation 'export aZ2468@errstr aZ247d@name) (void)))) (void))))) aZ2464@export-subst) (let ((aZ2487@invoke-body (aZae0@aZa40@build-library-letrec* '#f aZ23df@name aZ2449@lex* aZ2463@loc* aZ2461@rhs* (if (null? aZ245f@init*) (aZadb@aZa36@build-void) (aZada@aZa34@build-sequence '#f aZ245f@init*)))) (aZ2488@invoke-definitions (map aZad7@aZ993@build-global-define (map cdr aZ2476@global*)))) (values (aZ23ea@itc) (aZ2413@rtc) (aZ2414@vtc) (aZada@aZa34@build-sequence '#f (append aZ2488@invoke-definitions (list aZ2487@invoke-body))) aZ2475@macro* aZ2464@export-subst aZ2477@export-env)))))))))))))))))))) aZ2429@swap))))))))))) aZ23fb@swap))))))) (set! aZ2887@aZdee@library-body-expander aZdee@library-body-expander) (set! aZdf0@core-library-expander (lambda (aZ248d@e aZ248e@verify-name) (call-with-values (lambda () (aZddc@parse-library aZ248d@e)) (lambda (aZ2499@aZ2492 aZ249a@aZ2494 aZ249b@aZ2496 aZ249c@aZ2498) (let ((aZ24a1@b* aZ249c@aZ2498) (aZ24a2@imp* aZ249b@aZ2496) (aZ24a3@exp* aZ249a@aZ2494) (aZ24a4@name* aZ2499@aZ2492)) (call-with-values (lambda () (aZdda@parse-library-name aZ24a4@name*)) (lambda (aZ24ad@aZ24aa aZ24ae@aZ24ac) (let ((aZ24b1@ver aZ24ae@aZ24ac) (aZ24b2@name aZ24ad@aZ24aa)) (begin (aZ248e@verify-name aZ24b2@name) (call-with-values (lambda () (aZdee@library-body-expander aZ24b2@name aZ24a3@exp* aZ24a2@imp* aZ24a1@b* '#f)) (lambda (aZ24c3@aZ24b6 aZ24c4@aZ24b8 aZ24c5@aZ24ba aZ24c6@aZ24bc aZ24c7@aZ24be aZ24c8@aZ24c0 aZ24c9@aZ24c2) (let ((aZ24d1@export-env aZ24c9@aZ24c2) (aZ24d2@export-subst aZ24c8@aZ24c0) (aZ24d3@visit-code aZ24c7@aZ24be) (aZ24d4@invoke-code aZ24c6@aZ24bc) (aZ24d5@visit-req* aZ24c5@aZ24ba) (aZ24d6@invoke-req* aZ24c4@aZ24b8) (aZ24d7@imp* aZ24c3@aZ24b6)) (values aZ24b2@name aZ24b1@ver aZ24d7@imp* aZ24d6@invoke-req* aZ24d5@visit-req* aZ24d4@invoke-code aZ24d3@visit-code aZ24d2@export-subst aZ24d1@export-env))))))))))))) (set! aZ2888@aZdf0@core-library-expander aZdf0@core-library-expander) (set! aZdf2@parse-top-level-program (lambda (aZ24df@e*) (let ((aZ24e1@t aZ24df@e*)) (let ((aZ24e3@ls/false (aZd7c@syntax-dispatch aZ24e1@t '((any . each-any) . each-any)))) (if (and aZ24e3@ls/false (apply (lambda (aZ24e5@import aZ24e6@imp* aZ24e7@b*) (eq? (aZe62@syntax->datum aZ24e5@import) 'import)) aZ24e3@ls/false)) (apply (lambda (aZ24eb@import aZ24ec@imp* aZ24ed@b*) (values aZ24ec@imp* aZ24ed@b*)) aZ24e3@ls/false) (let ((aZ24f1@t aZ24e1@t)) (let ((aZ24f3@ls/false (aZd7c@syntax-dispatch aZ24f1@t '((any . any) . any)))) (if (and aZ24f3@ls/false (apply (lambda (aZ24f5@import aZ24f6@x aZ24f7@y) (eq? (aZe62@syntax->datum aZ24f5@import) 'import)) aZ24f3@ls/false)) (apply (lambda (aZ24fb@import aZ24fc@x aZ24fd@y) (aZe5c@syntax-violation 'expander '"invalid syntax of top-level program" (aZb6f@syntax-car aZ24df@e*))) aZ24f3@ls/false) (let ((aZ2501@t aZ24f1@t)) (let ((aZ2503@ls/false (aZd7c@syntax-dispatch aZ2501@t '_))) (if aZ2503@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) aZ2503@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ2501@t)))))))))))) (set! aZ2889@aZdf2@parse-top-level-program aZdf2@parse-top-level-program) (set! aZdf4@top-level-expander (lambda (aZ2505@e*) (call-with-values (lambda () (aZdf2@parse-top-level-program aZ2505@e*)) (lambda (aZ250b@aZ2508 aZ250c@aZ250a) (let ((aZ250f@b* aZ250c@aZ250a) (aZ2510@imp* aZ250b@aZ2508)) (call-with-values (lambda () (aZdee@library-body-expander '() '() aZ2510@imp* aZ250f@b* '#t)) (lambda (aZ2521@aZ2514 aZ2522@aZ2516 aZ2523@aZ2518 aZ2524@aZ251a aZ2525@aZ251c aZ2526@aZ251e aZ2527@aZ2520) (let ((aZ252f@export-env aZ2527@aZ2520) (aZ2530@export-subst aZ2526@aZ251e) (aZ2531@visit-code aZ2525@aZ251c) (aZ2532@invoke-code aZ2524@aZ251a) (aZ2533@visit-req* aZ2523@aZ2518) (aZ2534@invoke-req* aZ2522@aZ2516) (aZ2535@imp* aZ2521@aZ2514)) (values aZ2534@invoke-req* aZ2532@invoke-code))))))))) (set! aZ288a@aZdf4@top-level-expander aZdf4@top-level-expander) (set! aZdf6@rp (aZ6bc@aZ597@make-record-printer 'env (lambda (aZ253d@x aZ253e@p aZ253f@wr) (display '"#<environment>" aZ253e@p)))) (set! aZ288b@aZdf6@rp aZdf6@rp) (set! aZe00@env? (lambda (aZ2543@x) (and (simple-struct? aZ2543@x) (eq? (simple-struct-name aZ2543@x) 'env)))) (set! aZ288c@aZe00@env? aZe00@env?) (set! aZe02@env-names (lambda (aZ2545@x) (simple-struct-ref aZ2545@x '0))) (set! aZ288d@aZe02@env-names aZe02@env-names) (set! aZe04@set-env-names! (lambda (aZ2547@x aZ2548@val) (simple-struct-set! aZ2547@x '0 aZ2548@val))) (set! aZ288e@aZe04@set-env-names! aZe04@set-env-names!) (set! aZe06@env-labels (lambda (aZ254b@x) (simple-struct-ref aZ254b@x '1))) (set! aZ288f@aZe06@env-labels aZe06@env-labels) (set! aZe08@set-env-labels! (lambda (aZ254d@x aZ254e@val) (simple-struct-set! aZ254d@x '1 aZ254e@val))) (set! aZ2890@aZe08@set-env-labels! aZe08@set-env-labels!) (set! aZe0a@env-itc (lambda (aZ2551@x) (simple-struct-ref aZ2551@x '2))) (set! aZ2891@aZe0a@env-itc aZe0a@env-itc) (set! aZe0c@set-env-itc! (lambda (aZ2553@x aZ2554@val) (simple-struct-set! aZ2553@x '2 aZ2554@val))) (set! aZ2892@aZe0c@set-env-itc! aZe0c@set-env-itc!) (set! aZe0e@dummy '3) (set! aZ2893@aZe0e@dummy aZe0e@dummy) (set! aZe10@rp (aZ6bc@aZ597@make-record-printer 'interaction-env (lambda (aZ2557@x aZ2558@p aZ2559@wr) (display '"#<environment>" aZ2558@p)))) (set! aZ2894@aZe10@rp aZe10@rp) (set! aZe1a@interaction-env? (lambda (aZ255d@x) (and (simple-struct? aZ255d@x) (eq? (simple-struct-name aZ255d@x) 'interaction-env)))) (set! aZ2895@aZe1a@interaction-env? aZe1a@interaction-env?) (set! aZe1c@interaction-env-rib (lambda (aZ255f@x) (simple-struct-ref aZ255f@x '0))) (set! aZ2896@aZe1c@interaction-env-rib aZe1c@interaction-env-rib) (set! aZe1e@set-interaction-env-rib! (lambda (aZ2561@x aZ2562@val) (simple-struct-set! aZ2561@x '0 aZ2562@val))) (set! aZ2897@aZe1e@set-interaction-env-rib! aZe1e@set-interaction-env-rib!) (set! aZe20@interaction-env-r (lambda (aZ2565@x) (simple-struct-ref aZ2565@x '1))) (set! aZ2898@aZe20@interaction-env-r aZe20@interaction-env-r) (set! aZe22@set-interaction-env-r! (lambda (aZ2567@x aZ2568@val) (simple-struct-set! aZ2567@x '1 aZ2568@val))) (set! aZ2899@aZe22@set-interaction-env-r! aZe22@set-interaction-env-r!) (set! aZe24@interaction-env-locs (lambda (aZ256b@x) (simple-struct-ref aZ256b@x '2))) (set! aZ289a@aZe24@interaction-env-locs aZe24@interaction-env-locs) (set! aZe26@set-interaction-env-locs! (lambda (aZ256d@x aZ256e@val) (simple-struct-set! aZ256d@x '2 aZ256e@val))) (set! aZ289b@aZe26@set-interaction-env-locs! aZe26@set-interaction-env-locs!) (set! aZe28@dummy '3) (set! aZ289c@aZe28@dummy aZe28@dummy) (set! aZe2a@interaction-environment-symbols (lambda () (aZe32@environment-symbols (aZe6a@interaction-environment)))) (set! aZ289d@aZe2a@interaction-environment-symbols aZe2a@interaction-environment-symbols) (set! aZe2c@environment-bindings (lambda (aZ2571@e) (vector->list (vector-map (lambda (aZ2573@name aZ2574@label) (aZe2e@parse-binding (cons aZ2573@name (aZ98a@aZ7d7@imported-label->binding aZ2574@label)))) (aZe02@env-names aZ2571@e) (aZe06@env-labels aZ2571@e))))) (set! aZ289e@aZe2c@environment-bindings aZe2c@environment-bindings) (set! aZe2e@parse-binding (lambda (aZ2577@b) (cons (car aZ2577@b) (let ((aZ2579@t (cadr aZ2577@b))) (if (memv aZ2579@t '(core-prim global)) 'procedure (if (memv aZ2579@t '(core-macro macro global-macro)) 'syntax (if (memv aZ2579@t '($core-rtd)) 'record (if (eq? (car aZ2577@b) (cadr aZ2577@b)) 'syntax 'unknown)))))))) (set! aZ289f@aZe2e@parse-binding aZe2e@parse-binding) (set! aZe30@environment? (lambda (aZ257b@x) (or (aZe00@env? aZ257b@x) (aZe1a@interaction-env? aZ257b@x)))) (set! aZ28a0@aZe30@environment? aZe30@environment?) (set! aZe32@environment-symbols (lambda (aZ257d@x) (if (aZe00@env? aZ257d@x) (vector->list (aZe02@env-names aZ257d@x)) (if (aZe1a@interaction-env? aZ257d@x) (map values (aZb13@rib-sym* (aZe1c@interaction-env-rib aZ257d@x))) (assertion-violation 'environment-symbols '"not an environment" aZ257d@x))))) (set! aZ28a1@aZe32@environment-symbols aZe32@environment-symbols) (set! aZe34@environment (lambda aZ257f@imp* (let ((aZ2581@itc (aZde2@make-collector))) (let ((aZ2587@aZ2584 aZde8@imp-collector) (aZ2588@aZ2586 aZ2581@itc)) (let ((aZ258b@swap (lambda () (let ((aZ258d@t (aZ2587@aZ2584))) (begin (aZ2587@aZ2584 aZ2588@aZ2586) (set! aZ2588@aZ2586 aZ258d@t)))))) (dynamic-wind aZ258b@swap (lambda () (call-with-values (lambda () (aZdde@parse-import-spec* aZ257f@imp*)) (lambda (aZ2593@aZ2590 aZ2594@aZ2592) (let ((aZ2597@subst-labels aZ2594@aZ2592) (aZ2598@subst-names aZ2593@aZ2590)) (make-simple-struct 'env '4 (list aZ2598@subst-names aZ2597@subst-labels aZ2581@itc)))))) aZ258b@swap)))))) (set! aZ28a2@aZe34@environment aZe34@environment) (set! aZe36@null-environment (lambda (aZ259b@n) (begin (if (not (eqv? aZ259b@n '5)) (assertion-violation 'null-environment '"not 5" aZ259b@n) (void)) (aZe34@environment '(psyntax null-environment-5))))) (set! aZ28a3@aZe36@null-environment aZe36@null-environment) (set! aZe38@scheme-report-environment (lambda (aZ259d@n) (begin (if (not (eqv? aZ259d@n '5)) (assertion-violation 'scheme-report-environment '"not 5" aZ259d@n) (void)) (aZe34@environment '(psyntax scheme-report-environment-5))))) (set! aZ28a4@aZe38@scheme-report-environment aZe38@scheme-report-environment) (set! aZe3a@expand (lambda (aZ259f@x aZ25a0@env) (if (aZe00@env? aZ25a0@env) (let ((aZ25a3@rib (aZde0@make-top-rib (aZe02@env-names aZ25a0@env) (aZe06@env-labels aZ25a0@env)))) (let ((aZ25a5@x (make-simple-struct 'stx '5 (list aZ259f@x aZaf9@top-mark* (list aZ25a3@rib) '()))) (aZ25a6@itc (aZe0a@env-itc aZ25a0@env)) (aZ25a7@rtc (aZde2@make-collector)) (aZ25a8@vtc (aZde2@make-collector))) (let ((aZ25ad@x (let ((aZ25bf@aZ25b0 aZe6c@top-level-context) (aZ25c0@aZ25b2 aZde4@inv-collector) (aZ25c1@aZ25b4 aZde6@vis-collector) (aZ25c2@aZ25b6 aZde8@imp-collector) (aZ25c3@aZ25b8 '#f) (aZ25c4@aZ25ba aZ25a7@rtc) (aZ25c5@aZ25bc aZ25a8@vtc) (aZ25c6@aZ25be aZ25a6@itc)) (let ((aZ25cf@swap (lambda () (begin (let ((aZ25d1@t (aZ25bf@aZ25b0))) (begin (aZ25bf@aZ25b0 aZ25c3@aZ25b8) (set! aZ25c3@aZ25b8 aZ25d1@t))) (let ((aZ25d3@t (aZ25c0@aZ25b2))) (begin (aZ25c0@aZ25b2 aZ25c4@aZ25ba) (set! aZ25c4@aZ25ba aZ25d3@t))) (let ((aZ25d5@t (aZ25c1@aZ25b4))) (begin (aZ25c1@aZ25b4 aZ25c5@aZ25bc) (set! aZ25c5@aZ25bc aZ25d5@t))) (let ((aZ25d7@t (aZ25c2@aZ25b6))) (begin (aZ25c2@aZ25b6 aZ25c6@aZ25be) (set! aZ25c6@aZ25be aZ25d7@t))))))) (dynamic-wind aZ25cf@swap (lambda () (aZd9e@chi-expr aZ25a5@x '() '())) aZ25cf@swap))))) (begin (aZb31@seal-rib! aZ25a3@rib) (values aZ25ad@x (aZ25a7@rtc)))))) (if (aZe1a@interaction-env? aZ25a0@env) (let ((aZ25d9@rib (aZe1c@interaction-env-rib aZ25a0@env)) (aZ25da@r (aZe20@interaction-env-r aZ25a0@env)) (aZ25db@rtc (aZde2@make-collector))) (let ((aZ25df@x (make-simple-struct 'stx '5 (list aZ259f@x aZaf9@top-mark* (list aZ25d9@rib) '())))) (call-with-values (lambda () (let ((aZ25f5@aZ25e6 aZe6c@top-level-context) (aZ25f6@aZ25e8 aZde4@inv-collector) (aZ25f7@aZ25ea aZde6@vis-collector) (aZ25f8@aZ25ec aZde8@imp-collector) (aZ25f9@aZ25ee aZ25a0@env) (aZ25fa@aZ25f0 aZ25db@rtc) (aZ25fb@aZ25f2 (aZde2@make-collector)) (aZ25fc@aZ25f4 (aZde2@make-collector))) (let ((aZ2605@swap (lambda () (begin (let ((aZ2607@t (aZ25f5@aZ25e6))) (begin (aZ25f5@aZ25e6 aZ25f9@aZ25ee) (set! aZ25f9@aZ25ee aZ2607@t))) (let ((aZ2609@t (aZ25f6@aZ25e8))) (begin (aZ25f6@aZ25e8 aZ25fa@aZ25f0) (set! aZ25fa@aZ25f0 aZ2609@t))) (let ((aZ260b@t (aZ25f7@aZ25ea))) (begin (aZ25f7@aZ25ea aZ25fb@aZ25f2) (set! aZ25fb@aZ25f2 aZ260b@t))) (let ((aZ260d@t (aZ25f8@aZ25ec))) (begin (aZ25f8@aZ25ec aZ25fc@aZ25f4) (set! aZ25fc@aZ25f4 aZ260d@t))))))) (dynamic-wind aZ2605@swap (lambda () (aZdec@chi-interaction-expr aZ25df@x aZ25d9@rib aZ25da@r)) aZ2605@swap)))) (lambda (aZ260f@aZ25e2 aZ2610@aZ25e4) (let ((aZ2613@r^ aZ2610@aZ25e4) (aZ2614@e aZ260f@aZ25e2)) (begin (aZe22@set-interaction-env-r! aZ25a0@env aZ2613@r^) (values aZ2614@e (aZ25db@rtc)))))))) (assertion-violation 'expand '"not an environment" aZ25a0@env))))) (set! aZ28a5@aZe3a@expand aZe3a@expand) (set! aZe3c@eval (lambda (aZ2617@x aZ2618@env) (begin (if (not (aZe30@environment? aZ2618@env)) (error 'eval '"not an environment" aZ2618@env) (void)) (call-with-values (lambda () (aZe3a@expand aZ2617@x aZ2618@env)) (lambda (aZ261f@aZ261c aZ2620@aZ261e) (let ((aZ2623@invoke-req* aZ2620@aZ261e) (aZ2624@x aZ261f@aZ261c)) (begin (for-each aZ98b@aZ7d9@invoke-library aZ2623@invoke-req*) (eval-core (aZ715@aZ6cd@expanded->core aZ2624@x))))))))) (set! aZ28a6@aZe3c@eval aZe3c@eval) (set! aZe3e@library-expander (lambda aZ2695 (let ((aZ2696 (length aZ2695))) (if (= aZ2696 '3) (apply (lambda (aZ2627@x aZ2628@filename aZ2629@verify-name) (let ((aZ262e@build-visit-code '#f) (aZ2630@visit! '#f)) (begin (set! aZ262e@build-visit-code (lambda (aZ2683@macro*) (if (null? aZ2683@macro*) (aZadb@aZa36@build-void) (aZada@aZa34@build-sequence '#f (map (lambda (aZ2685@x) (let ((aZ2687@loc (car aZ2685@x)) (aZ2688@src (cddr aZ2685@x))) (list 'set! aZ2687@loc aZ2688@src))) aZ2683@macro*))))) (set! aZ2630@visit! (lambda (aZ267b@macro*) (for-each (lambda (aZ267d@x) (let ((aZ267f@loc (car aZ267d@x)) (aZ2680@proc (cadr aZ267d@x))) (set-symbol-value! aZ267f@loc aZ2680@proc))) aZ267b@macro*))) (call-with-values (lambda () (aZdf0@core-library-expander aZ2627@x aZ2629@verify-name)) (lambda (aZ2643@aZ2632 aZ2644@aZ2634 aZ2645@aZ2636 aZ2646@aZ2638 aZ2647@aZ263a aZ2648@aZ263c aZ2649@aZ263e aZ264a@aZ2640 aZ264b@aZ2642) (let ((aZ2655@export-env aZ264b@aZ2642) (aZ2656@export-subst aZ264a@aZ2640) (aZ2657@macro* aZ2649@aZ263e) (aZ2658@invoke-code aZ2648@aZ263c) (aZ2659@vis* aZ2647@aZ263a) (aZ265a@inv* aZ2646@aZ2638) (aZ265b@imp* aZ2645@aZ2636) (aZ265c@ver aZ2644@aZ2634) (aZ265d@name aZ2643@aZ2632)) (let ((aZ2667@id (gensym)) (aZ2668@name aZ265d@name) (aZ2669@ver aZ265c@ver) (aZ266a@imp* (map aZ98f@aZ7e1@library-spec aZ265b@imp*)) (aZ266b@vis* (map aZ98f@aZ7e1@library-spec aZ2659@vis*)) (aZ266c@inv* (map aZ98f@aZ7e1@library-spec aZ265a@inv*)) (aZ266d@visit-proc (lambda () (aZ2630@visit! aZ2657@macro*))) (aZ266e@invoke-proc (lambda () (eval-core (aZ715@aZ6cd@expanded->core aZ2658@invoke-code)))) (aZ266f@visit-code (aZ262e@build-visit-code aZ2657@macro*)) (aZ2670@invoke-code aZ2658@invoke-code)) (begin (aZ989@aZ7d5@install-library aZ2667@id aZ2668@name aZ2669@ver aZ266a@imp* aZ266b@vis* aZ266c@inv* aZ2656@export-subst aZ2655@export-env aZ266d@visit-proc aZ266e@invoke-proc aZ266f@visit-code aZ2670@invoke-code '#t aZ2628@filename) (values aZ2667@id aZ2668@name aZ2669@ver aZ266a@imp* aZ266b@vis* aZ266c@inv* aZ2670@invoke-code aZ266f@visit-code aZ2656@export-subst aZ2655@export-env))))))))) aZ2695) (if (= aZ2696 '2) (apply (lambda (aZ268b@x aZ268c@filename) (aZe3e@library-expander aZ268b@x aZ268c@filename (lambda (aZ268f@x) (values)))) aZ2695) (if (= aZ2696 '1) (apply (lambda (aZ2691@x) (aZe3e@library-expander aZ2691@x '#f (lambda (aZ2693@x) (values)))) aZ2695) (error 'apply '"invalid arg count"))))))) (set! aZ28a7@aZe3e@library-expander aZe3e@library-expander) (set! aZe40@boot-library-expand (lambda (aZ2697@x) (call-with-values (lambda () (aZe3e@library-expander aZ2697@x)) (lambda (aZ26ad@aZ269a aZ26ae@aZ269c aZ26af@aZ269e aZ26b0@aZ26a0 aZ26b1@aZ26a2 aZ26b2@aZ26a4 aZ26b3@aZ26a6 aZ26b4@aZ26a8 aZ26b5@aZ26aa aZ26b6@aZ26ac) (let ((aZ26c1@export-env aZ26b6@aZ26ac) (aZ26c2@export-subst aZ26b5@aZ26aa) (aZ26c3@visit-code aZ26b4@aZ26a8) (aZ26c4@invoke-code aZ26b3@aZ26a6) (aZ26c5@inv* aZ26b2@aZ26a4) (aZ26c6@vis* aZ26b1@aZ26a2) (aZ26c7@imp* aZ26b0@aZ26a0) (aZ26c8@ver aZ26af@aZ269e) (aZ26c9@name aZ26ae@aZ269c) (aZ26ca@id aZ26ad@aZ269a)) (values aZ26c9@name aZ26c4@invoke-code aZ26c2@export-subst aZ26c1@export-env)))))) (set! aZ28a8@aZe40@boot-library-expand aZe40@boot-library-expand) (set! aZe42@rev-map-append (lambda (aZ26d5@f aZ26d6@ls aZ26d7@ac) (if (null? aZ26d6@ls) aZ26d7@ac (aZe42@rev-map-append aZ26d5@f (cdr aZ26d6@ls) (cons (aZ26d5@f (car aZ26d6@ls)) aZ26d7@ac))))) (set! aZ28a9@aZe42@rev-map-append aZe42@rev-map-append) (set! aZe44@build-exports (lambda (aZ26db@lex*+loc* aZ26dc@init*) (aZada@aZa34@build-sequence '#f (cons (aZadb@aZa36@build-void) (aZe42@rev-map-append (lambda (aZ26df@x) (list 'set! (cdr aZ26df@x) (car aZ26df@x))) aZ26db@lex*+loc* aZ26dc@init*))))) (set! aZ28aa@aZe44@build-exports aZe44@build-exports) (set! aZe46@make-export-subst (lambda (aZ26e1@name* aZ26e2@id*) (map (lambda (aZ26e5@name aZ26e6@id) (let ((aZ26e9@label (aZb8b@id->label aZ26e6@id))) (begin (if (not aZ26e9@label) (aZe5c@syntax-violation '#f '"cannot export unbound identifier" aZ26e6@id) (void)) (cons aZ26e5@name aZ26e9@label)))) aZ26e1@name* aZ26e2@id*))) (set! aZ28ab@aZe46@make-export-subst aZe46@make-export-subst) (set! aZe48@make-export-env/macros (lambda (aZ26eb@lex* aZ26ec@loc* aZ26ed@r) (let ((aZ26f2@lookup '#f)) (begin (set! aZ26f2@lookup (lambda (aZ270f@x) (let aZ2717@f ((aZ2711@x aZ270f@x) (aZ2712@lex* aZ26eb@lex*) (aZ2713@loc* aZ26ec@loc*)) (if (pair? aZ2712@lex*) (if (eq? aZ2711@x (car aZ2712@lex*)) (car aZ2713@loc*) (aZ2717@f aZ2711@x (cdr aZ2712@lex*) (cdr aZ2713@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let aZ26fb@f ((aZ26f3@r aZ26ed@r) (aZ26f4@env '()) (aZ26f5@global* '()) (aZ26f6@macro* '())) (if (null? aZ26f3@r) (values aZ26f4@env aZ26f5@global* aZ26f6@macro*) (let ((aZ26fd@x (car aZ26f3@r))) (let ((aZ26ff@label (car aZ26fd@x)) (aZ2700@b (cdr aZ26fd@x))) (let ((aZ2703@t (aZb91@binding-type aZ2700@b))) (if (memv aZ2703@t '(lexical)) (let ((aZ2705@v (aZb93@binding-value aZ2700@b))) (let ((aZ2707@loc (aZ26f2@lookup (aZd06@lexical-var aZ2705@v))) (aZ2708@type (if (aZd08@lexical-mutable? aZ2705@v) 'mutable 'global))) (aZ26fb@f (cdr aZ26f3@r) (cons (cons* aZ26ff@label aZ2708@type aZ2707@loc) aZ26f4@env) (cons (cons (aZd06@lexical-var aZ2705@v) aZ2707@loc) aZ26f5@global*) aZ26f6@macro*))) (if (memv aZ2703@t '(local-macro)) (let ((aZ270b@loc (gensym))) (aZ26fb@f (cdr aZ26f3@r) (cons (cons* aZ26ff@label 'global-macro aZ270b@loc) aZ26f4@env) aZ26f5@global* (cons (cons aZ270b@loc (aZb93@binding-value aZ2700@b)) aZ26f6@macro*))) (if (memv aZ2703@t '(local-macro!)) (let ((aZ270d@loc (gensym))) (aZ26fb@f (cdr aZ26f3@r) (cons (cons* aZ26ff@label 'global-macro! aZ270d@loc) aZ26f4@env) aZ26f5@global* (cons (cons aZ270d@loc (aZb93@binding-value aZ2700@b)) aZ26f6@macro*))) (if (memv aZ2703@t '($rtd $module)) (aZ26fb@f (cdr aZ26f3@r) (cons aZ26fd@x aZ26f4@env) aZ26f5@global* aZ26f6@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (aZb91@binding-type aZ2700@b) (aZb93@binding-value aZ2700@b))))))))))))))) (set! aZ28ac@aZe48@make-export-env/macros aZe48@make-export-env/macros) (set! aZe4a@generate-temporaries (lambda (aZ2719@ls) (let ((aZ271b@t aZ2719@ls)) (let ((aZ271d@ls/false (aZd7c@syntax-dispatch aZ271b@t 'each-any))) (if aZ271d@ls/false (apply (lambda (aZ271f@ls) (map (lambda (aZ2721@x) (make-simple-struct 'stx '5 (list (let ((aZ2723@x (aZe62@syntax->datum aZ2721@x))) (if (or (symbol? aZ2723@x) (string? aZ2723@x)) (gensym aZ2723@x) (gensym 't))) aZaf9@top-mark* '() '()))) aZ271f@ls)) aZ271d@ls/false) (let ((aZ2725@t aZ271b@t)) (let ((aZ2727@ls/false (aZd7c@syntax-dispatch aZ2725@t '_))) (if aZ2727@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) aZ2727@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ2725@t))))))))) (set! aZ28ad@aZe4a@generate-temporaries aZe4a@generate-temporaries) (set! aZe4c@free-identifier=? (lambda (aZ2729@x aZ272a@y) (if (aZb75@id? aZ2729@x) (if (aZb75@id? aZ272a@y) (aZb7b@free-id=? aZ2729@x aZ272a@y) (assertion-violation 'free-identifier=? '"not an identifier" aZ272a@y)) (assertion-violation 'free-identifier=? '"not an identifier" aZ2729@x)))) (set! aZ28ae@aZe4c@free-identifier=? aZe4c@free-identifier=?) (set! aZe4e@bound-identifier=? (lambda (aZ272d@x aZ272e@y) (if (aZb75@id? aZ272d@x) (if (aZb75@id? aZ272e@y) (aZb79@bound-id=? aZ272d@x aZ272e@y) (assertion-violation 'bound-identifier=? '"not an identifier" aZ272e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" aZ272d@x)))) (set! aZ28af@aZe4e@bound-identifier=? aZe4e@bound-identifier=?) (set! aZe50@make-source-condition (lambda (aZ2731@x) (let ((aZ273b@aZ2736 '#f) (aZ273d@aZ2738 '#f) (aZ273f@aZ2737 '#f) (aZ2742@aZ2735 '#f) (aZ2744@make-source-condition '#f) (aZ2746@aZ2733 '#f) (aZ2748@aZ2734 '#f) (aZ274a@source-condition? '#f) (aZ274c@source-filename '#f) (aZ274e@source-character '#f)) (begin (set! aZ273b@aZ2736 (make-record-type-descriptor '&source-information aZ2b91@aZ28d8@&condition-rtd 'aZ2739 '#f '#f '#((immutable file-name) (immutable character)))) (set! aZ273d@aZ2738 '#f) (set! aZ273f@aZ2737 (make-record-constructor-descriptor aZ273b@aZ2736 aZ2b92@aZ28da@&condition-rcd aZ273d@aZ2738)) (set! aZ2742@aZ2735 (record-predicate aZ273b@aZ2736)) (set! aZ2744@make-source-condition (record-constructor aZ273f@aZ2737)) (set! aZ2746@aZ2733 (record-accessor aZ273b@aZ2736 '0)) (set! aZ2748@aZ2734 (record-accessor aZ273b@aZ2736 '1)) (set! aZ274a@source-condition? (condition-predicate aZ273b@aZ2736)) (set! aZ274c@source-filename (condition-accessor aZ273b@aZ2736 aZ2746@aZ2733)) (set! aZ274e@source-character (condition-accessor aZ273b@aZ2736 aZ2748@aZ2734)) (if (pair? aZ2731@x) (aZ2744@make-source-condition (car aZ2731@x) (cdr aZ2731@x)) (condition)))))) (set! aZ28b0@aZe50@make-source-condition aZe50@make-source-condition) (set! aZe52@extract-position-condition (lambda (aZ274f@x) (aZe50@make-source-condition (aZe54@expression-position aZ274f@x)))) (set! aZ28b1@aZe52@extract-position-condition aZe52@extract-position-condition) (set! aZe54@expression-position (lambda (aZ2751@x) (and (aZb41@stx? aZ2751@x) (let ((aZ2753@x (aZb43@stx-expr aZ2751@x))) (and (aZ6b3@aZ585@annotation? aZ2753@x) (aZ6b4@aZ587@annotation-source aZ2753@x)))))) (set! aZ28b2@aZe54@expression-position aZe54@expression-position) (set! aZe56@assertion-error (lambda (aZ2755@expr aZ2756@pos) (raise (condition (aZ2bc1@aZ299c@make-assertion-violation) (aZ2bd3@aZ29ce@make-who-condition 'assert) (aZ2b97@aZ292f@make-message-condition '"assertion failed") (aZ2bc9@aZ29b3@make-irritants-condition (list aZ2755@expr)) (aZe50@make-source-condition aZ2756@pos))))) (set! aZ28b3@aZe56@assertion-error aZe56@assertion-error) (set! aZe58@syntax-error (lambda (aZ2759@x . aZ275b@args) (begin (if (not (for-all string? aZ275b@args)) (assertion-violation 'syntax-error '"invalid argument" aZ275b@args) (void)) (raise (condition (aZ2b97@aZ292f@make-message-condition (if (null? aZ275b@args) '"invalid syntax" (apply string-append aZ275b@args))) (aZ2bf5@aZ2a2a@make-syntax-violation (aZe62@syntax->datum aZ2759@x) '#f) (aZe52@extract-position-condition aZ2759@x)))))) (set! aZ28b4@aZe58@syntax-error aZe58@syntax-error) (set! aZe5a@syntax-violation* (lambda (aZ275d@who aZ275e@msg aZ275f@form aZ2760@condition-object) (begin (if (not (string? aZ275e@msg)) (assertion-violation 'syntax-violation '"message is not a string" aZ275e@msg) (void)) (let ((aZ2765@who (if (or (string? aZ275d@who) (symbol? aZ275d@who)) aZ275d@who (if (not aZ275d@who) (let ((aZ2767@t aZ275f@form)) (let ((aZ2769@ls/false (aZd7c@syntax-dispatch aZ2767@t 'any))) (if (and aZ2769@ls/false (apply (lambda (aZ276b@id) (aZb75@id? aZ276b@id)) aZ2769@ls/false)) (apply (lambda (aZ276d@id) (aZe62@syntax->datum aZ276d@id)) aZ2769@ls/false) (let ((aZ276f@t aZ2767@t)) (let ((aZ2771@ls/false (aZd7c@syntax-dispatch aZ276f@t '(any . any)))) (if (and aZ2771@ls/false (apply (lambda (aZ2773@id aZ2774@rest) (aZb75@id? aZ2773@id)) aZ2771@ls/false)) (apply (lambda (aZ2777@id aZ2778@rest) (aZe62@syntax->datum aZ2777@id)) aZ2771@ls/false) (let ((aZ277b@t aZ276f@t)) (let ((aZ277d@ls/false (aZd7c@syntax-dispatch aZ277b@t '_))) (if aZ277d@ls/false (apply (lambda () '#f) aZ277d@ls/false) (aZe5c@syntax-violation '#f '"invalid syntax" aZ277b@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" aZ275d@who))))) (raise (condition (if aZ2765@who (aZ2bd3@aZ29ce@make-who-condition aZ2765@who) (condition)) (aZ2b97@aZ292f@make-message-condition aZ275e@msg) aZ2760@condition-object (aZe52@extract-position-condition aZ275f@form))))))) (set! aZ28b5@aZe5a@syntax-violation* aZe5a@syntax-violation*) (set! aZe5c@syntax-violation (lambda aZ278d (let ((aZ278e (length aZ278d))) (if (= aZ278e '3) (apply (lambda (aZ277f@who aZ2780@msg aZ2781@form) (aZe5c@syntax-violation aZ277f@who aZ2780@msg aZ2781@form '#f)) aZ278d) (if (= aZ278e '4) (apply (lambda (aZ2785@who aZ2786@msg aZ2787@form aZ2788@subform) (aZe5a@syntax-violation* aZ2785@who aZ2786@msg aZ2787@form (aZ2bf5@aZ2a2a@make-syntax-violation (aZe62@syntax->datum aZ2787@form) (aZe62@syntax->datum aZ2788@subform)))) aZ278d) (error 'apply '"invalid arg count")))))) (set! aZ28b6@aZe5c@syntax-violation aZe5c@syntax-violation) (set! aZe5e@identifier? (lambda (aZ278f@x) (aZb75@id? aZ278f@x))) (set! aZ28b7@aZe5e@identifier? aZe5e@identifier?) (set! aZe60@datum->syntax (lambda (aZ2791@id aZ2792@datum) (if (aZb75@id? aZ2791@id) (aZb55@datum->stx aZ2791@id aZ2792@datum) (assertion-violation 'datum->syntax '"not an identifier" aZ2791@id)))) (set! aZ28b8@aZe60@datum->syntax aZe60@datum->syntax) (set! aZe62@syntax->datum (lambda (aZ2795@x) (aZb89@stx->datum aZ2795@x))) (set! aZ28b9@aZe62@syntax->datum aZe62@syntax->datum) (set! aZe64@ungensym-all (lambda (aZ2797@code) (if (pair? aZ2797@code) (cons (aZe64@ungensym-all (car aZ2797@code)) (aZe64@ungensym-all (cdr aZ2797@code))) (if (symbol? aZ2797@code) (ungensym aZ2797@code) aZ2797@code)))) (set! aZ28ba@aZe64@ungensym-all aZe64@ungensym-all) (set! aZe66@compile-r6rs-top-level (lambda (aZ2799@x*) (call-with-values (lambda () (aZdf4@top-level-expander aZ2799@x*)) (lambda (aZ279f@aZ279c aZ27a0@aZ279e) (let ((aZ27a3@invoke-code aZ27a0@aZ279e) (aZ27a4@lib* aZ279f@aZ279c)) (lambda () (begin (for-each aZ98b@aZ7d9@invoke-library aZ27a4@lib*) (let ((aZ27a7@expanded (aZ715@aZ6cd@expanded->core aZ27a3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (aZe64@ungensym-all aZ27a7@expanded)) (void)) (eval-core aZ27a7@expanded)))))))))) (set! aZ28bb@aZe66@compile-r6rs-top-level aZe66@compile-r6rs-top-level) (set! aZe68@pre-compile-r6rs-top-level (lambda (aZ27a9@x*) (call-with-values (lambda () (aZdf4@top-level-expander aZ27a9@x*)) (lambda (aZ27af@aZ27ac aZ27b0@aZ27ae) (let ((aZ27b3@invoke-code aZ27b0@aZ27ae) (aZ27b4@lib* aZ27af@aZ27ac)) (begin (for-each aZ98b@aZ7d9@invoke-library aZ27b4@lib*) (aZ6bd@aZ599@compile-core (aZ715@aZ6cd@expanded->core aZ27b3@invoke-code)))))))) (set! aZ28bc@aZe68@pre-compile-r6rs-top-level aZe68@pre-compile-r6rs-top-level) (set! aZe6a@interaction-environment (let ((aZ27b7@the-env '#f)) (lambda () (or aZ27b7@the-env (let ((aZ27b9@lib (aZ984@aZ7cb@find-library-by-name '(mosh interaction))) (aZ27ba@rib (aZb29@make-empty-rib))) (begin (let ((aZ27bd@subst (aZ966@aZ78f@library-subst aZ27b9@lib))) (begin (aZb15@set-rib-sym*! aZ27ba@rib (map car aZ27bd@subst)) (aZb19@set-rib-mark**! aZ27ba@rib (map (lambda (aZ27bf@x) aZaf9@top-mark*) aZ27bd@subst)) (aZb1d@set-rib-label*! aZ27ba@rib (map cdr aZ27bd@subst)))) (let ((aZ27c1@env (make-simple-struct 'interaction-env '4 (list aZ27ba@rib '() '())))) (begin (set! aZ27b7@the-env aZ27c1@env) aZ27c1@env)))))))) (set! aZ28bd@aZe6a@interaction-environment aZe6a@interaction-environment) (set! aZe6c@top-level-context (aZ6bf@aZ59d@make-parameter '#f)) (set! aZ28be@aZe6c@top-level-context aZe6c@top-level-context) (aZ981@aZ7c5@current-library-expander aZe3e@library-expander))
(begin (set! aZ28cd@aZ28c8 (unspecified)) (set! aZ28cf@aZ28ca (unspecified)) (set! aZ28d1@aZ28c9 (unspecified)) (set! aZ28d4@&condition? (unspecified)) (set! aZ28d6@make-&condition (unspecified)) (set! aZ28d8@&condition-rtd (unspecified)) (set! aZ28da@&condition-rcd (unspecified)) (set! aZ2926@aZ2921 (unspecified)) (set! aZ2928@aZ2923 (unspecified)) (set! aZ292a@aZ2922 (unspecified)) (set! aZ292d@p? (unspecified)) (set! aZ292f@make-message-condition (unspecified)) (set! aZ2931@aZ2920 (unspecified)) (set! aZ2933@message-condition? (unspecified)) (set! aZ2935@condition-message (unspecified)) (set! aZ2937@&message-rtd (unspecified)) (set! aZ2939@&message-rcd (unspecified)) (set! aZ293f@aZ293a (unspecified)) (set! aZ2941@aZ293c (unspecified)) (set! aZ2943@aZ293b (unspecified)) (set! aZ2946@p? (unspecified)) (set! aZ2948@make-warning (unspecified)) (set! aZ294a@warning? (unspecified)) (set! aZ294c@&warning-rtd (unspecified)) (set! aZ294e@&warning-rcd (unspecified)) (set! aZ2954@aZ294f (unspecified)) (set! aZ2956@aZ2951 (unspecified)) (set! aZ2958@aZ2950 (unspecified)) (set! aZ295b@p? (unspecified)) (set! aZ295d@make-serious-condition (unspecified)) (set! aZ295f@serious-condition? (unspecified)) (set! aZ2961@&serious-rtd (unspecified)) (set! aZ2963@&serious-rcd (unspecified)) (set! aZ2969@aZ2964 (unspecified)) (set! aZ296b@aZ2966 (unspecified)) (set! aZ296d@aZ2965 (unspecified)) (set! aZ2970@p? (unspecified)) (set! aZ2972@make-error (unspecified)) (set! aZ2974@error? (unspecified)) (set! aZ2976@&error-rtd (unspecified)) (set! aZ2978@&error-rcd (unspecified)) (set! aZ297e@aZ2979 (unspecified)) (set! aZ2980@aZ297b (unspecified)) (set! aZ2982@aZ297a (unspecified)) (set! aZ2985@p? (unspecified)) (set! aZ2987@make-violation (unspecified)) (set! aZ2989@violation? (unspecified)) (set! aZ298b@&violation-rtd (unspecified)) (set! aZ298d@&violation-rcd (unspecified)) (set! aZ2993@aZ298e (unspecified)) (set! aZ2995@aZ2990 (unspecified)) (set! aZ2997@aZ298f (unspecified)) (set! aZ299a@p? (unspecified)) (set! aZ299c@make-assertion-violation (unspecified)) (set! aZ299e@assertion-violation? (unspecified)) (set! aZ29a0@&assertion-rtd (unspecified)) (set! aZ29a2@&assertion-rcd (unspecified)) (set! aZ29aa@aZ29a5 (unspecified)) (set! aZ29ac@aZ29a7 (unspecified)) (set! aZ29ae@aZ29a6 (unspecified)) (set! aZ29b1@p? (unspecified)) (set! aZ29b3@make-irritants-condition (unspecified)) (set! aZ29b5@aZ29a4 (unspecified)) (set! aZ29b7@irritants-condition? (unspecified)) (set! aZ29b9@condition-irritants (unspecified)) (set! aZ29bb@&irritants-rtd (unspecified)) (set! aZ29bd@&irritants-rcd (unspecified)) (set! aZ29c5@aZ29c0 (unspecified)) (set! aZ29c7@aZ29c2 (unspecified)) (set! aZ29c9@aZ29c1 (unspecified)) (set! aZ29cc@p? (unspecified)) (set! aZ29ce@make-who-condition (unspecified)) (set! aZ29d0@aZ29bf (unspecified)) (set! aZ29d2@who-condition? (unspecified)) (set! aZ29d4@condition-who (unspecified)) (set! aZ29d6@&who-rtd (unspecified)) (set! aZ29d8@&who-rcd (unspecified)) (set! aZ29de@aZ29d9 (unspecified)) (set! aZ29e0@aZ29db (unspecified)) (set! aZ29e2@aZ29da (unspecified)) (set! aZ29e5@p? (unspecified)) (set! aZ29e7@make-non-continuable-violation (unspecified)) (set! aZ29e9@non-continuable-violation? (unspecified)) (set! aZ29eb@&non-continuable-rtd (unspecified)) (set! aZ29ed@&non-continuable-rcd (unspecified)) (set! aZ29f3@aZ29ee (unspecified)) (set! aZ29f5@aZ29f0 (unspecified)) (set! aZ29f7@aZ29ef (unspecified)) (set! aZ29fa@p? (unspecified)) (set! aZ29fc@make-implementation-restriction-violation (unspecified)) (set! aZ29fe@implementation-restriction-violation? (unspecified)) (set! aZ2a00@&implementation-restriction-rtd (unspecified)) (set! aZ2a02@&implementation-restriction-rcd (unspecified)) (set! aZ2a08@aZ2a03 (unspecified)) (set! aZ2a0a@aZ2a05 (unspecified)) (set! aZ2a0c@aZ2a04 (unspecified)) (set! aZ2a0f@p? (unspecified)) (set! aZ2a11@make-lexical-violation (unspecified)) (set! aZ2a13@lexical-violation? (unspecified)) (set! aZ2a15@&lexical-rtd (unspecified)) (set! aZ2a17@&lexical-rcd (unspecified)) (set! aZ2a21@aZ2a1c (unspecified)) (set! aZ2a23@aZ2a1e (unspecified)) (set! aZ2a25@aZ2a1d (unspecified)) (set! aZ2a28@p? (unspecified)) (set! aZ2a2a@make-syntax-violation (unspecified)) (set! aZ2a2c@aZ2a19 (unspecified)) (set! aZ2a2e@aZ2a1b (unspecified)) (set! aZ2a30@syntax-violation? (unspecified)) (set! aZ2a32@syntax-violation-form (unspecified)) (set! aZ2a34@syntax-violation-subform (unspecified)) (set! aZ2a36@&syntax-rtd (unspecified)) (set! aZ2a38@&syntax-rcd (unspecified)) (set! aZ2a3e@aZ2a39 (unspecified)) (set! aZ2a40@aZ2a3b (unspecified)) (set! aZ2a42@aZ2a3a (unspecified)) (set! aZ2a45@p? (unspecified)) (set! aZ2a47@make-undefined-violation (unspecified)) (set! aZ2a49@undefined-violation? (unspecified)) (set! aZ2a4b@&undefined-rtd (unspecified)) (set! aZ2a4d@&undefined-rcd (unspecified)) (set! aZ2a53@aZ2a4e (unspecified)) (set! aZ2a55@aZ2a50 (unspecified)) (set! aZ2a57@aZ2a4f (unspecified)) (set! aZ2a5a@p? (unspecified)) (set! aZ2a5c@make-i/o-error (unspecified)) (set! aZ2a5e@i/o-error? (unspecified)) (set! aZ2a60@&i/o-rtd (unspecified)) (set! aZ2a62@&i/o-rcd (unspecified)) (set! aZ2a68@aZ2a63 (unspecified)) (set! aZ2a6a@aZ2a65 (unspecified)) (set! aZ2a6c@aZ2a64 (unspecified)) (set! aZ2a6f@p? (unspecified)) (set! aZ2a71@make-i/o-read-error (unspecified)) (set! aZ2a73@i/o-read-error? (unspecified)) (set! aZ2a75@&i/o-read-rtd (unspecified)) (set! aZ2a77@&i/o-read-rcd (unspecified)) (set! aZ2a7d@aZ2a78 (unspecified)) (set! aZ2a7f@aZ2a7a (unspecified)) (set! aZ2a81@aZ2a79 (unspecified)) (set! aZ2a84@p? (unspecified)) (set! aZ2a86@make-i/o-write-error (unspecified)) (set! aZ2a88@i/o-write-error? (unspecified)) (set! aZ2a8a@&i/o-write-rtd (unspecified)) (set! aZ2a8c@&i/o-write-rcd (unspecified)) (set! aZ2a94@aZ2a8f (unspecified)) (set! aZ2a96@aZ2a91 (unspecified)) (set! aZ2a98@aZ2a90 (unspecified)) (set! aZ2a9b@p? (unspecified)) (set! aZ2a9d@make-i/o-invalid-position-error (unspecified)) (set! aZ2a9f@aZ2a8e (unspecified)) (set! aZ2aa1@i/o-invalid-position-error? (unspecified)) (set! aZ2aa3@i/o-error-position (unspecified)) (set! aZ2aa5@&i/o-invalid-position-rtd (unspecified)) (set! aZ2aa7@&i/o-invalid-position-rcd (unspecified)) (set! aZ2aaf@aZ2aaa (unspecified)) (set! aZ2ab1@aZ2aac (unspecified)) (set! aZ2ab3@aZ2aab (unspecified)) (set! aZ2ab6@p? (unspecified)) (set! aZ2ab8@make-i/o-filename-error (unspecified)) (set! aZ2aba@aZ2aa9 (unspecified)) (set! aZ2abc@i/o-filename-error? (unspecified)) (set! aZ2abe@i/o-error-filename (unspecified)) (set! aZ2ac0@&i/o-filename-rtd (unspecified)) (set! aZ2ac2@&i/o-filename-rcd (unspecified)) (set! aZ2ac8@aZ2ac3 (unspecified)) (set! aZ2aca@aZ2ac5 (unspecified)) (set! aZ2acc@aZ2ac4 (unspecified)) (set! aZ2acf@p? (unspecified)) (set! aZ2ad1@make-i/o-file-protection-error (unspecified)) (set! aZ2ad3@i/o-file-protection-error? (unspecified)) (set! aZ2ad5@&i/o-file-protection-rtd (unspecified)) (set! aZ2ad7@&i/o-file-protection-rcd (unspecified)) (set! aZ2add@aZ2ad8 (unspecified)) (set! aZ2adf@aZ2ada (unspecified)) (set! aZ2ae1@aZ2ad9 (unspecified)) (set! aZ2ae4@p? (unspecified)) (set! aZ2ae6@make-i/o-file-is-read-only-error (unspecified)) (set! aZ2ae8@i/o-file-is-read-only-error? (unspecified)) (set! aZ2aea@&i/o-file-is-read-only-rtd (unspecified)) (set! aZ2aec@&i/o-file-is-read-only-rcd (unspecified)) (set! aZ2af2@aZ2aed (unspecified)) (set! aZ2af4@aZ2aef (unspecified)) (set! aZ2af6@aZ2aee (unspecified)) (set! aZ2af9@p? (unspecified)) (set! aZ2afb@make-i/o-file-already-exists-error (unspecified)) (set! aZ2afd@i/o-file-already-exists-error? (unspecified)) (set! aZ2aff@&i/o-file-already-exists-rtd (unspecified)) (set! aZ2b01@&i/o-file-already-exists-rcd (unspecified)) (set! aZ2b07@aZ2b02 (unspecified)) (set! aZ2b09@aZ2b04 (unspecified)) (set! aZ2b0b@aZ2b03 (unspecified)) (set! aZ2b0e@p? (unspecified)) (set! aZ2b10@make-i/o-file-does-not-exist-error (unspecified)) (set! aZ2b12@i/o-file-does-not-exist-error? (unspecified)) (set! aZ2b14@&i/o-file-does-not-exist-rtd (unspecified)) (set! aZ2b16@&i/o-file-does-not-exist-rcd (unspecified)) (set! aZ2b1e@aZ2b19 (unspecified)) (set! aZ2b20@aZ2b1b (unspecified)) (set! aZ2b22@aZ2b1a (unspecified)) (set! aZ2b25@p? (unspecified)) (set! aZ2b27@make-i/o-port-error (unspecified)) (set! aZ2b29@aZ2b18 (unspecified)) (set! aZ2b2b@i/o-port-error? (unspecified)) (set! aZ2b2d@i/o-error-port (unspecified)) (set! aZ2b2f@&i/o-port-rtd (unspecified)) (set! aZ2b31@&i/o-port-rcd (unspecified)) (set! aZ2b37@aZ2b32 (unspecified)) (set! aZ2b39@aZ2b34 (unspecified)) (set! aZ2b3b@aZ2b33 (unspecified)) (set! aZ2b3e@p? (unspecified)) (set! aZ2b40@make-i/o-decoding-error (unspecified)) (set! aZ2b42@i/o-decoding-error? (unspecified)) (set! aZ2b44@&i/o-decoding-rtd (unspecified)) (set! aZ2b46@&i/o-decoding-rcd (unspecified)) (set! aZ2b4e@aZ2b49 (unspecified)) (set! aZ2b50@aZ2b4b (unspecified)) (set! aZ2b52@aZ2b4a (unspecified)) (set! aZ2b55@p? (unspecified)) (set! aZ2b57@make-i/o-encoding-error (unspecified)) (set! aZ2b59@aZ2b48 (unspecified)) (set! aZ2b5b@i/o-encoding-error? (unspecified)) (set! aZ2b5d@i/o-encoding-error-char (unspecified)) (set! aZ2b5f@&i/o-encoding-rtd (unspecified)) (set! aZ2b61@&i/o-encoding-rcd (unspecified)) (set! aZ2b67@aZ2b62 (unspecified)) (set! aZ2b69@aZ2b64 (unspecified)) (set! aZ2b6b@aZ2b63 (unspecified)) (set! aZ2b6e@p? (unspecified)) (set! aZ2b70@make-no-infinities-violation (unspecified)) (set! aZ2b72@no-infinities-violation? (unspecified)) (set! aZ2b74@&no-infinities-rtd (unspecified)) (set! aZ2b76@&no-infinities-rcd (unspecified)) (set! aZ2b7c@aZ2b77 (unspecified)) (set! aZ2b7e@aZ2b79 (unspecified)) (set! aZ2b80@aZ2b78 (unspecified)) (set! aZ2b83@p? (unspecified)) (set! aZ2b85@make-no-nans-violation (unspecified)) (set! aZ2b87@no-nans-violation? (unspecified)) (set! aZ2b89@&no-nans-rtd (unspecified)) (set! aZ2b8b@&no-nans-rcd (unspecified)) (set! aZ28cd@aZ28c8 (make-record-type-descriptor '&condition '#f 'aZ28cb '#f '#f '#())) (set! aZ2b8c@aZ28cd@aZ28c8 aZ28cd@aZ28c8) (set! aZ28cf@aZ28ca '#f) (set! aZ2b8d@aZ28cf@aZ28ca aZ28cf@aZ28ca) (set! aZ28d1@aZ28c9 (make-record-constructor-descriptor aZ28cd@aZ28c8 '#f aZ28cf@aZ28ca)) (set! aZ2b8e@aZ28d1@aZ28c9 aZ28d1@aZ28c9) (set! aZ28d4@&condition? (record-predicate aZ28cd@aZ28c8)) (set! aZ2b8f@aZ28d4@&condition? aZ28d4@&condition?) (set! aZ28d6@make-&condition (record-constructor aZ28d1@aZ28c9)) (set! aZ2b90@aZ28d6@make-&condition aZ28d6@make-&condition) (set! aZ28d8@&condition-rtd aZ28cd@aZ28c8) (set! aZ2b91@aZ28d8@&condition-rtd aZ28d8@&condition-rtd) (set! aZ28da@&condition-rcd aZ28d1@aZ28c9) (set! aZ2b92@aZ28da@&condition-rcd aZ28da@&condition-rcd) (set! aZ2926@aZ2921 (make-record-type-descriptor '&message aZ28cd@aZ28c8 'aZ2924 '#f '#f '#((immutable message)))) (set! aZ2b93@aZ2926@aZ2921 aZ2926@aZ2921) (set! aZ2928@aZ2923 '#f) (set! aZ2b94@aZ2928@aZ2923 aZ2928@aZ2923) (set! aZ292a@aZ2922 (make-record-constructor-descriptor aZ2926@aZ2921 aZ28d1@aZ28c9 aZ2928@aZ2923)) (set! aZ2b95@aZ292a@aZ2922 aZ292a@aZ2922) (set! aZ292d@p? (record-predicate aZ2926@aZ2921)) (set! aZ2b96@aZ292d@p? aZ292d@p?) (set! aZ292f@make-message-condition (record-constructor aZ292a@aZ2922)) (set! aZ2b97@aZ292f@make-message-condition aZ292f@make-message-condition) (set! aZ2931@aZ2920 (record-accessor aZ2926@aZ2921 '0)) (set! aZ2b98@aZ2931@aZ2920 aZ2931@aZ2920) (set! aZ2933@message-condition? (condition-predicate aZ2926@aZ2921)) (set! aZ2b99@aZ2933@message-condition? aZ2933@message-condition?) (set! aZ2935@condition-message (condition-accessor aZ2926@aZ2921 aZ2931@aZ2920)) (set! aZ2b9a@aZ2935@condition-message aZ2935@condition-message) (set! aZ2937@&message-rtd aZ2926@aZ2921) (set! aZ2b9b@aZ2937@&message-rtd aZ2937@&message-rtd) (set! aZ2939@&message-rcd aZ292a@aZ2922) (set! aZ2b9c@aZ2939@&message-rcd aZ2939@&message-rcd) (set! aZ293f@aZ293a (make-record-type-descriptor '&warning aZ28cd@aZ28c8 'aZ293d '#f '#f '#())) (set! aZ2b9d@aZ293f@aZ293a aZ293f@aZ293a) (set! aZ2941@aZ293c '#f) (set! aZ2b9e@aZ2941@aZ293c aZ2941@aZ293c) (set! aZ2943@aZ293b (make-record-constructor-descriptor aZ293f@aZ293a aZ28d1@aZ28c9 aZ2941@aZ293c)) (set! aZ2b9f@aZ2943@aZ293b aZ2943@aZ293b) (set! aZ2946@p? (record-predicate aZ293f@aZ293a)) (set! aZ2ba0@aZ2946@p? aZ2946@p?) (set! aZ2948@make-warning (record-constructor aZ2943@aZ293b)) (set! aZ2ba1@aZ2948@make-warning aZ2948@make-warning) (set! aZ294a@warning? (condition-predicate aZ293f@aZ293a)) (set! aZ2ba2@aZ294a@warning? aZ294a@warning?) (set! aZ294c@&warning-rtd aZ293f@aZ293a) (set! aZ2ba3@aZ294c@&warning-rtd aZ294c@&warning-rtd) (set! aZ294e@&warning-rcd aZ2943@aZ293b) (set! aZ2ba4@aZ294e@&warning-rcd aZ294e@&warning-rcd) (set! aZ2954@aZ294f (make-record-type-descriptor '&serious aZ28cd@aZ28c8 'aZ2952 '#f '#f '#())) (set! aZ2ba5@aZ2954@aZ294f aZ2954@aZ294f) (set! aZ2956@aZ2951 '#f) (set! aZ2ba6@aZ2956@aZ2951 aZ2956@aZ2951) (set! aZ2958@aZ2950 (make-record-constructor-descriptor aZ2954@aZ294f aZ28d1@aZ28c9 aZ2956@aZ2951)) (set! aZ2ba7@aZ2958@aZ2950 aZ2958@aZ2950) (set! aZ295b@p? (record-predicate aZ2954@aZ294f)) (set! aZ2ba8@aZ295b@p? aZ295b@p?) (set! aZ295d@make-serious-condition (record-constructor aZ2958@aZ2950)) (set! aZ2ba9@aZ295d@make-serious-condition aZ295d@make-serious-condition) (set! aZ295f@serious-condition? (condition-predicate aZ2954@aZ294f)) (set! aZ2baa@aZ295f@serious-condition? aZ295f@serious-condition?) (set! aZ2961@&serious-rtd aZ2954@aZ294f) (set! aZ2bab@aZ2961@&serious-rtd aZ2961@&serious-rtd) (set! aZ2963@&serious-rcd aZ2958@aZ2950) (set! aZ2bac@aZ2963@&serious-rcd aZ2963@&serious-rcd) (set! aZ2969@aZ2964 (make-record-type-descriptor '&error aZ2954@aZ294f 'aZ2967 '#f '#f '#())) (set! aZ2bad@aZ2969@aZ2964 aZ2969@aZ2964) (set! aZ296b@aZ2966 '#f) (set! aZ2bae@aZ296b@aZ2966 aZ296b@aZ2966) (set! aZ296d@aZ2965 (make-record-constructor-descriptor aZ2969@aZ2964 aZ2958@aZ2950 aZ296b@aZ2966)) (set! aZ2baf@aZ296d@aZ2965 aZ296d@aZ2965) (set! aZ2970@p? (record-predicate aZ2969@aZ2964)) (set! aZ2bb0@aZ2970@p? aZ2970@p?) (set! aZ2972@make-error (record-constructor aZ296d@aZ2965)) (set! aZ2bb1@aZ2972@make-error aZ2972@make-error) (set! aZ2974@error? (condition-predicate aZ2969@aZ2964)) (set! aZ2bb2@aZ2974@error? aZ2974@error?) (set! aZ2976@&error-rtd aZ2969@aZ2964) (set! aZ2bb3@aZ2976@&error-rtd aZ2976@&error-rtd) (set! aZ2978@&error-rcd aZ296d@aZ2965) (set! aZ2bb4@aZ2978@&error-rcd aZ2978@&error-rcd) (set! aZ297e@aZ2979 (make-record-type-descriptor '&violation aZ2954@aZ294f 'aZ297c '#f '#f '#())) (set! aZ2bb5@aZ297e@aZ2979 aZ297e@aZ2979) (set! aZ2980@aZ297b '#f) (set! aZ2bb6@aZ2980@aZ297b aZ2980@aZ297b) (set! aZ2982@aZ297a (make-record-constructor-descriptor aZ297e@aZ2979 aZ2958@aZ2950 aZ2980@aZ297b)) (set! aZ2bb7@aZ2982@aZ297a aZ2982@aZ297a) (set! aZ2985@p? (record-predicate aZ297e@aZ2979)) (set! aZ2bb8@aZ2985@p? aZ2985@p?) (set! aZ2987@make-violation (record-constructor aZ2982@aZ297a)) (set! aZ2bb9@aZ2987@make-violation aZ2987@make-violation) (set! aZ2989@violation? (condition-predicate aZ297e@aZ2979)) (set! aZ2bba@aZ2989@violation? aZ2989@violation?) (set! aZ298b@&violation-rtd aZ297e@aZ2979) (set! aZ2bbb@aZ298b@&violation-rtd aZ298b@&violation-rtd) (set! aZ298d@&violation-rcd aZ2982@aZ297a) (set! aZ2bbc@aZ298d@&violation-rcd aZ298d@&violation-rcd) (set! aZ2993@aZ298e (make-record-type-descriptor '&assertion aZ297e@aZ2979 'aZ2991 '#f '#f '#())) (set! aZ2bbd@aZ2993@aZ298e aZ2993@aZ298e) (set! aZ2995@aZ2990 '#f) (set! aZ2bbe@aZ2995@aZ2990 aZ2995@aZ2990) (set! aZ2997@aZ298f (make-record-constructor-descriptor aZ2993@aZ298e aZ2982@aZ297a aZ2995@aZ2990)) (set! aZ2bbf@aZ2997@aZ298f aZ2997@aZ298f) (set! aZ299a@p? (record-predicate aZ2993@aZ298e)) (set! aZ2bc0@aZ299a@p? aZ299a@p?) (set! aZ299c@make-assertion-violation (record-constructor aZ2997@aZ298f)) (set! aZ2bc1@aZ299c@make-assertion-violation aZ299c@make-assertion-violation) (set! aZ299e@assertion-violation? (condition-predicate aZ2993@aZ298e)) (set! aZ2bc2@aZ299e@assertion-violation? aZ299e@assertion-violation?) (set! aZ29a0@&assertion-rtd aZ2993@aZ298e) (set! aZ2bc3@aZ29a0@&assertion-rtd aZ29a0@&assertion-rtd) (set! aZ29a2@&assertion-rcd aZ2997@aZ298f) (set! aZ2bc4@aZ29a2@&assertion-rcd aZ29a2@&assertion-rcd) (set! aZ29aa@aZ29a5 (make-record-type-descriptor '&irritants aZ28cd@aZ28c8 'aZ29a8 '#f '#f '#((immutable irritants)))) (set! aZ2bc5@aZ29aa@aZ29a5 aZ29aa@aZ29a5) (set! aZ29ac@aZ29a7 '#f) (set! aZ2bc6@aZ29ac@aZ29a7 aZ29ac@aZ29a7) (set! aZ29ae@aZ29a6 (make-record-constructor-descriptor aZ29aa@aZ29a5 aZ28d1@aZ28c9 aZ29ac@aZ29a7)) (set! aZ2bc7@aZ29ae@aZ29a6 aZ29ae@aZ29a6) (set! aZ29b1@p? (record-predicate aZ29aa@aZ29a5)) (set! aZ2bc8@aZ29b1@p? aZ29b1@p?) (set! aZ29b3@make-irritants-condition (record-constructor aZ29ae@aZ29a6)) (set! aZ2bc9@aZ29b3@make-irritants-condition aZ29b3@make-irritants-condition) (set! aZ29b5@aZ29a4 (record-accessor aZ29aa@aZ29a5 '0)) (set! aZ2bca@aZ29b5@aZ29a4 aZ29b5@aZ29a4) (set! aZ29b7@irritants-condition? (condition-predicate aZ29aa@aZ29a5)) (set! aZ2bcb@aZ29b7@irritants-condition? aZ29b7@irritants-condition?) (set! aZ29b9@condition-irritants (condition-accessor aZ29aa@aZ29a5 aZ29b5@aZ29a4)) (set! aZ2bcc@aZ29b9@condition-irritants aZ29b9@condition-irritants) (set! aZ29bb@&irritants-rtd aZ29aa@aZ29a5) (set! aZ2bcd@aZ29bb@&irritants-rtd aZ29bb@&irritants-rtd) (set! aZ29bd@&irritants-rcd aZ29ae@aZ29a6) (set! aZ2bce@aZ29bd@&irritants-rcd aZ29bd@&irritants-rcd) (set! aZ29c5@aZ29c0 (make-record-type-descriptor '&who aZ28cd@aZ28c8 'aZ29c3 '#f '#f '#((immutable who)))) (set! aZ2bcf@aZ29c5@aZ29c0 aZ29c5@aZ29c0) (set! aZ29c7@aZ29c2 '#f) (set! aZ2bd0@aZ29c7@aZ29c2 aZ29c7@aZ29c2) (set! aZ29c9@aZ29c1 (make-record-constructor-descriptor aZ29c5@aZ29c0 aZ28d1@aZ28c9 aZ29c7@aZ29c2)) (set! aZ2bd1@aZ29c9@aZ29c1 aZ29c9@aZ29c1) (set! aZ29cc@p? (record-predicate aZ29c5@aZ29c0)) (set! aZ2bd2@aZ29cc@p? aZ29cc@p?) (set! aZ29ce@make-who-condition (record-constructor aZ29c9@aZ29c1)) (set! aZ2bd3@aZ29ce@make-who-condition aZ29ce@make-who-condition) (set! aZ29d0@aZ29bf (record-accessor aZ29c5@aZ29c0 '0)) (set! aZ2bd4@aZ29d0@aZ29bf aZ29d0@aZ29bf) (set! aZ29d2@who-condition? (condition-predicate aZ29c5@aZ29c0)) (set! aZ2bd5@aZ29d2@who-condition? aZ29d2@who-condition?) (set! aZ29d4@condition-who (condition-accessor aZ29c5@aZ29c0 aZ29d0@aZ29bf)) (set! aZ2bd6@aZ29d4@condition-who aZ29d4@condition-who) (set! aZ29d6@&who-rtd aZ29c5@aZ29c0) (set! aZ2bd7@aZ29d6@&who-rtd aZ29d6@&who-rtd) (set! aZ29d8@&who-rcd aZ29c9@aZ29c1) (set! aZ2bd8@aZ29d8@&who-rcd aZ29d8@&who-rcd) (set! aZ29de@aZ29d9 (make-record-type-descriptor '&non-continuable aZ297e@aZ2979 'aZ29dc '#f '#f '#())) (set! aZ2bd9@aZ29de@aZ29d9 aZ29de@aZ29d9) (set! aZ29e0@aZ29db '#f) (set! aZ2bda@aZ29e0@aZ29db aZ29e0@aZ29db) (set! aZ29e2@aZ29da (make-record-constructor-descriptor aZ29de@aZ29d9 aZ2982@aZ297a aZ29e0@aZ29db)) (set! aZ2bdb@aZ29e2@aZ29da aZ29e2@aZ29da) (set! aZ29e5@p? (record-predicate aZ29de@aZ29d9)) (set! aZ2bdc@aZ29e5@p? aZ29e5@p?) (set! aZ29e7@make-non-continuable-violation (record-constructor aZ29e2@aZ29da)) (set! aZ2bdd@aZ29e7@make-non-continuable-violation aZ29e7@make-non-continuable-violation) (set! aZ29e9@non-continuable-violation? (condition-predicate aZ29de@aZ29d9)) (set! aZ2bde@aZ29e9@non-continuable-violation? aZ29e9@non-continuable-violation?) (set! aZ29eb@&non-continuable-rtd aZ29de@aZ29d9) (set! aZ2bdf@aZ29eb@&non-continuable-rtd aZ29eb@&non-continuable-rtd) (set! aZ29ed@&non-continuable-rcd aZ29e2@aZ29da) (set! aZ2be0@aZ29ed@&non-continuable-rcd aZ29ed@&non-continuable-rcd) (set! aZ29f3@aZ29ee (make-record-type-descriptor '&implementation-restriction aZ297e@aZ2979 'aZ29f1 '#f '#f '#())) (set! aZ2be1@aZ29f3@aZ29ee aZ29f3@aZ29ee) (set! aZ29f5@aZ29f0 '#f) (set! aZ2be2@aZ29f5@aZ29f0 aZ29f5@aZ29f0) (set! aZ29f7@aZ29ef (make-record-constructor-descriptor aZ29f3@aZ29ee aZ2982@aZ297a aZ29f5@aZ29f0)) (set! aZ2be3@aZ29f7@aZ29ef aZ29f7@aZ29ef) (set! aZ29fa@p? (record-predicate aZ29f3@aZ29ee)) (set! aZ2be4@aZ29fa@p? aZ29fa@p?) (set! aZ29fc@make-implementation-restriction-violation (record-constructor aZ29f7@aZ29ef)) (set! aZ2be5@aZ29fc@make-implementation-restriction-violation aZ29fc@make-implementation-restriction-violation) (set! aZ29fe@implementation-restriction-violation? (condition-predicate aZ29f3@aZ29ee)) (set! aZ2be6@aZ29fe@implementation-restriction-violation? aZ29fe@implementation-restriction-violation?) (set! aZ2a00@&implementation-restriction-rtd aZ29f3@aZ29ee) (set! aZ2be7@aZ2a00@&implementation-restriction-rtd aZ2a00@&implementation-restriction-rtd) (set! aZ2a02@&implementation-restriction-rcd aZ29f7@aZ29ef) (set! aZ2be8@aZ2a02@&implementation-restriction-rcd aZ2a02@&implementation-restriction-rcd) (set! aZ2a08@aZ2a03 (make-record-type-descriptor '&lexical aZ297e@aZ2979 'aZ2a06 '#f '#f '#())) (set! aZ2be9@aZ2a08@aZ2a03 aZ2a08@aZ2a03) (set! aZ2a0a@aZ2a05 '#f) (set! aZ2bea@aZ2a0a@aZ2a05 aZ2a0a@aZ2a05) (set! aZ2a0c@aZ2a04 (make-record-constructor-descriptor aZ2a08@aZ2a03 aZ2982@aZ297a aZ2a0a@aZ2a05)) (set! aZ2beb@aZ2a0c@aZ2a04 aZ2a0c@aZ2a04) (set! aZ2a0f@p? (record-predicate aZ2a08@aZ2a03)) (set! aZ2bec@aZ2a0f@p? aZ2a0f@p?) (set! aZ2a11@make-lexical-violation (record-constructor aZ2a0c@aZ2a04)) (set! aZ2bed@aZ2a11@make-lexical-violation aZ2a11@make-lexical-violation) (set! aZ2a13@lexical-violation? (condition-predicate aZ2a08@aZ2a03)) (set! aZ2bee@aZ2a13@lexical-violation? aZ2a13@lexical-violation?) (set! aZ2a15@&lexical-rtd aZ2a08@aZ2a03) (set! aZ2bef@aZ2a15@&lexical-rtd aZ2a15@&lexical-rtd) (set! aZ2a17@&lexical-rcd aZ2a0c@aZ2a04) (set! aZ2bf0@aZ2a17@&lexical-rcd aZ2a17@&lexical-rcd) (set! aZ2a21@aZ2a1c (make-record-type-descriptor '&syntax aZ297e@aZ2979 'aZ2a1f '#f '#f '#((immutable form) (immutable subform)))) (set! aZ2bf1@aZ2a21@aZ2a1c aZ2a21@aZ2a1c) (set! aZ2a23@aZ2a1e '#f) (set! aZ2bf2@aZ2a23@aZ2a1e aZ2a23@aZ2a1e) (set! aZ2a25@aZ2a1d (make-record-constructor-descriptor aZ2a21@aZ2a1c aZ2982@aZ297a aZ2a23@aZ2a1e)) (set! aZ2bf3@aZ2a25@aZ2a1d aZ2a25@aZ2a1d) (set! aZ2a28@p? (record-predicate aZ2a21@aZ2a1c)) (set! aZ2bf4@aZ2a28@p? aZ2a28@p?) (set! aZ2a2a@make-syntax-violation (record-constructor aZ2a25@aZ2a1d)) (set! aZ2bf5@aZ2a2a@make-syntax-violation aZ2a2a@make-syntax-violation) (set! aZ2a2c@aZ2a19 (record-accessor aZ2a21@aZ2a1c '0)) (set! aZ2bf6@aZ2a2c@aZ2a19 aZ2a2c@aZ2a19) (set! aZ2a2e@aZ2a1b (record-accessor aZ2a21@aZ2a1c '1)) (set! aZ2bf7@aZ2a2e@aZ2a1b aZ2a2e@aZ2a1b) (set! aZ2a30@syntax-violation? (condition-predicate aZ2a21@aZ2a1c)) (set! aZ2bf8@aZ2a30@syntax-violation? aZ2a30@syntax-violation?) (set! aZ2a32@syntax-violation-form (condition-accessor aZ2a21@aZ2a1c aZ2a2c@aZ2a19)) (set! aZ2bf9@aZ2a32@syntax-violation-form aZ2a32@syntax-violation-form) (set! aZ2a34@syntax-violation-subform (condition-accessor aZ2a21@aZ2a1c aZ2a2e@aZ2a1b)) (set! aZ2bfa@aZ2a34@syntax-violation-subform aZ2a34@syntax-violation-subform) (set! aZ2a36@&syntax-rtd aZ2a21@aZ2a1c) (set! aZ2bfb@aZ2a36@&syntax-rtd aZ2a36@&syntax-rtd) (set! aZ2a38@&syntax-rcd aZ2a25@aZ2a1d) (set! aZ2bfc@aZ2a38@&syntax-rcd aZ2a38@&syntax-rcd) (set! aZ2a3e@aZ2a39 (make-record-type-descriptor '&undefined aZ297e@aZ2979 'aZ2a3c '#f '#f '#())) (set! aZ2bfd@aZ2a3e@aZ2a39 aZ2a3e@aZ2a39) (set! aZ2a40@aZ2a3b '#f) (set! aZ2bfe@aZ2a40@aZ2a3b aZ2a40@aZ2a3b) (set! aZ2a42@aZ2a3a (make-record-constructor-descriptor aZ2a3e@aZ2a39 aZ2982@aZ297a aZ2a40@aZ2a3b)) (set! aZ2bff@aZ2a42@aZ2a3a aZ2a42@aZ2a3a) (set! aZ2a45@p? (record-predicate aZ2a3e@aZ2a39)) (set! aZ2c00@aZ2a45@p? aZ2a45@p?) (set! aZ2a47@make-undefined-violation (record-constructor aZ2a42@aZ2a3a)) (set! aZ2c01@aZ2a47@make-undefined-violation aZ2a47@make-undefined-violation) (set! aZ2a49@undefined-violation? (condition-predicate aZ2a3e@aZ2a39)) (set! aZ2c02@aZ2a49@undefined-violation? aZ2a49@undefined-violation?) (set! aZ2a4b@&undefined-rtd aZ2a3e@aZ2a39) (set! aZ2c03@aZ2a4b@&undefined-rtd aZ2a4b@&undefined-rtd) (set! aZ2a4d@&undefined-rcd aZ2a42@aZ2a3a) (set! aZ2c04@aZ2a4d@&undefined-rcd aZ2a4d@&undefined-rcd) (set! aZ2a53@aZ2a4e (make-record-type-descriptor '&i/o aZ2969@aZ2964 'aZ2a51 '#f '#f '#())) (set! aZ2c05@aZ2a53@aZ2a4e aZ2a53@aZ2a4e) (set! aZ2a55@aZ2a50 '#f) (set! aZ2c06@aZ2a55@aZ2a50 aZ2a55@aZ2a50) (set! aZ2a57@aZ2a4f (make-record-constructor-descriptor aZ2a53@aZ2a4e aZ296d@aZ2965 aZ2a55@aZ2a50)) (set! aZ2c07@aZ2a57@aZ2a4f aZ2a57@aZ2a4f) (set! aZ2a5a@p? (record-predicate aZ2a53@aZ2a4e)) (set! aZ2c08@aZ2a5a@p? aZ2a5a@p?) (set! aZ2a5c@make-i/o-error (record-constructor aZ2a57@aZ2a4f)) (set! aZ2c09@aZ2a5c@make-i/o-error aZ2a5c@make-i/o-error) (set! aZ2a5e@i/o-error? (condition-predicate aZ2a53@aZ2a4e)) (set! aZ2c0a@aZ2a5e@i/o-error? aZ2a5e@i/o-error?) (set! aZ2a60@&i/o-rtd aZ2a53@aZ2a4e) (set! aZ2c0b@aZ2a60@&i/o-rtd aZ2a60@&i/o-rtd) (set! aZ2a62@&i/o-rcd aZ2a57@aZ2a4f) (set! aZ2c0c@aZ2a62@&i/o-rcd aZ2a62@&i/o-rcd) (set! aZ2a68@aZ2a63 (make-record-type-descriptor '&i/o-read aZ2a53@aZ2a4e 'aZ2a66 '#f '#f '#())) (set! aZ2c0d@aZ2a68@aZ2a63 aZ2a68@aZ2a63) (set! aZ2a6a@aZ2a65 '#f) (set! aZ2c0e@aZ2a6a@aZ2a65 aZ2a6a@aZ2a65) (set! aZ2a6c@aZ2a64 (make-record-constructor-descriptor aZ2a68@aZ2a63 aZ2a57@aZ2a4f aZ2a6a@aZ2a65)) (set! aZ2c0f@aZ2a6c@aZ2a64 aZ2a6c@aZ2a64) (set! aZ2a6f@p? (record-predicate aZ2a68@aZ2a63)) (set! aZ2c10@aZ2a6f@p? aZ2a6f@p?) (set! aZ2a71@make-i/o-read-error (record-constructor aZ2a6c@aZ2a64)) (set! aZ2c11@aZ2a71@make-i/o-read-error aZ2a71@make-i/o-read-error) (set! aZ2a73@i/o-read-error? (condition-predicate aZ2a68@aZ2a63)) (set! aZ2c12@aZ2a73@i/o-read-error? aZ2a73@i/o-read-error?) (set! aZ2a75@&i/o-read-rtd aZ2a68@aZ2a63) (set! aZ2c13@aZ2a75@&i/o-read-rtd aZ2a75@&i/o-read-rtd) (set! aZ2a77@&i/o-read-rcd aZ2a6c@aZ2a64) (set! aZ2c14@aZ2a77@&i/o-read-rcd aZ2a77@&i/o-read-rcd) (set! aZ2a7d@aZ2a78 (make-record-type-descriptor '&i/o-write aZ2a53@aZ2a4e 'aZ2a7b '#f '#f '#())) (set! aZ2c15@aZ2a7d@aZ2a78 aZ2a7d@aZ2a78) (set! aZ2a7f@aZ2a7a '#f) (set! aZ2c16@aZ2a7f@aZ2a7a aZ2a7f@aZ2a7a) (set! aZ2a81@aZ2a79 (make-record-constructor-descriptor aZ2a7d@aZ2a78 aZ2a57@aZ2a4f aZ2a7f@aZ2a7a)) (set! aZ2c17@aZ2a81@aZ2a79 aZ2a81@aZ2a79) (set! aZ2a84@p? (record-predicate aZ2a7d@aZ2a78)) (set! aZ2c18@aZ2a84@p? aZ2a84@p?) (set! aZ2a86@make-i/o-write-error (record-constructor aZ2a81@aZ2a79)) (set! aZ2c19@aZ2a86@make-i/o-write-error aZ2a86@make-i/o-write-error) (set! aZ2a88@i/o-write-error? (condition-predicate aZ2a7d@aZ2a78)) (set! aZ2c1a@aZ2a88@i/o-write-error? aZ2a88@i/o-write-error?) (set! aZ2a8a@&i/o-write-rtd aZ2a7d@aZ2a78) (set! aZ2c1b@aZ2a8a@&i/o-write-rtd aZ2a8a@&i/o-write-rtd) (set! aZ2a8c@&i/o-write-rcd aZ2a81@aZ2a79) (set! aZ2c1c@aZ2a8c@&i/o-write-rcd aZ2a8c@&i/o-write-rcd) (set! aZ2a94@aZ2a8f (make-record-type-descriptor '&i/o-invalid-position aZ2a53@aZ2a4e 'aZ2a92 '#f '#f '#((immutable position)))) (set! aZ2c1d@aZ2a94@aZ2a8f aZ2a94@aZ2a8f) (set! aZ2a96@aZ2a91 '#f) (set! aZ2c1e@aZ2a96@aZ2a91 aZ2a96@aZ2a91) (set! aZ2a98@aZ2a90 (make-record-constructor-descriptor aZ2a94@aZ2a8f aZ2a57@aZ2a4f aZ2a96@aZ2a91)) (set! aZ2c1f@aZ2a98@aZ2a90 aZ2a98@aZ2a90) (set! aZ2a9b@p? (record-predicate aZ2a94@aZ2a8f)) (set! aZ2c20@aZ2a9b@p? aZ2a9b@p?) (set! aZ2a9d@make-i/o-invalid-position-error (record-constructor aZ2a98@aZ2a90)) (set! aZ2c21@aZ2a9d@make-i/o-invalid-position-error aZ2a9d@make-i/o-invalid-position-error) (set! aZ2a9f@aZ2a8e (record-accessor aZ2a94@aZ2a8f '0)) (set! aZ2c22@aZ2a9f@aZ2a8e aZ2a9f@aZ2a8e) (set! aZ2aa1@i/o-invalid-position-error? (condition-predicate aZ2a94@aZ2a8f)) (set! aZ2c23@aZ2aa1@i/o-invalid-position-error? aZ2aa1@i/o-invalid-position-error?) (set! aZ2aa3@i/o-error-position (condition-accessor aZ2a94@aZ2a8f aZ2a9f@aZ2a8e)) (set! aZ2c24@aZ2aa3@i/o-error-position aZ2aa3@i/o-error-position) (set! aZ2aa5@&i/o-invalid-position-rtd aZ2a94@aZ2a8f) (set! aZ2c25@aZ2aa5@&i/o-invalid-position-rtd aZ2aa5@&i/o-invalid-position-rtd) (set! aZ2aa7@&i/o-invalid-position-rcd aZ2a98@aZ2a90) (set! aZ2c26@aZ2aa7@&i/o-invalid-position-rcd aZ2aa7@&i/o-invalid-position-rcd) (set! aZ2aaf@aZ2aaa (make-record-type-descriptor '&i/o-filename aZ2a53@aZ2a4e 'aZ2aad '#f '#f '#((immutable filename)))) (set! aZ2c27@aZ2aaf@aZ2aaa aZ2aaf@aZ2aaa) (set! aZ2ab1@aZ2aac '#f) (set! aZ2c28@aZ2ab1@aZ2aac aZ2ab1@aZ2aac) (set! aZ2ab3@aZ2aab (make-record-constructor-descriptor aZ2aaf@aZ2aaa aZ2a57@aZ2a4f aZ2ab1@aZ2aac)) (set! aZ2c29@aZ2ab3@aZ2aab aZ2ab3@aZ2aab) (set! aZ2ab6@p? (record-predicate aZ2aaf@aZ2aaa)) (set! aZ2c2a@aZ2ab6@p? aZ2ab6@p?) (set! aZ2ab8@make-i/o-filename-error (record-constructor aZ2ab3@aZ2aab)) (set! aZ2c2b@aZ2ab8@make-i/o-filename-error aZ2ab8@make-i/o-filename-error) (set! aZ2aba@aZ2aa9 (record-accessor aZ2aaf@aZ2aaa '0)) (set! aZ2c2c@aZ2aba@aZ2aa9 aZ2aba@aZ2aa9) (set! aZ2abc@i/o-filename-error? (condition-predicate aZ2aaf@aZ2aaa)) (set! aZ2c2d@aZ2abc@i/o-filename-error? aZ2abc@i/o-filename-error?) (set! aZ2abe@i/o-error-filename (condition-accessor aZ2aaf@aZ2aaa aZ2aba@aZ2aa9)) (set! aZ2c2e@aZ2abe@i/o-error-filename aZ2abe@i/o-error-filename) (set! aZ2ac0@&i/o-filename-rtd aZ2aaf@aZ2aaa) (set! aZ2c2f@aZ2ac0@&i/o-filename-rtd aZ2ac0@&i/o-filename-rtd) (set! aZ2ac2@&i/o-filename-rcd aZ2ab3@aZ2aab) (set! aZ2c30@aZ2ac2@&i/o-filename-rcd aZ2ac2@&i/o-filename-rcd) (set! aZ2ac8@aZ2ac3 (make-record-type-descriptor '&i/o-file-protection aZ2aaf@aZ2aaa 'aZ2ac6 '#f '#f '#())) (set! aZ2c31@aZ2ac8@aZ2ac3 aZ2ac8@aZ2ac3) (set! aZ2aca@aZ2ac5 '#f) (set! aZ2c32@aZ2aca@aZ2ac5 aZ2aca@aZ2ac5) (set! aZ2acc@aZ2ac4 (make-record-constructor-descriptor aZ2ac8@aZ2ac3 aZ2ab3@aZ2aab aZ2aca@aZ2ac5)) (set! aZ2c33@aZ2acc@aZ2ac4 aZ2acc@aZ2ac4) (set! aZ2acf@p? (record-predicate aZ2ac8@aZ2ac3)) (set! aZ2c34@aZ2acf@p? aZ2acf@p?) (set! aZ2ad1@make-i/o-file-protection-error (record-constructor aZ2acc@aZ2ac4)) (set! aZ2c35@aZ2ad1@make-i/o-file-protection-error aZ2ad1@make-i/o-file-protection-error) (set! aZ2ad3@i/o-file-protection-error? (condition-predicate aZ2ac8@aZ2ac3)) (set! aZ2c36@aZ2ad3@i/o-file-protection-error? aZ2ad3@i/o-file-protection-error?) (set! aZ2ad5@&i/o-file-protection-rtd aZ2ac8@aZ2ac3) (set! aZ2c37@aZ2ad5@&i/o-file-protection-rtd aZ2ad5@&i/o-file-protection-rtd) (set! aZ2ad7@&i/o-file-protection-rcd aZ2acc@aZ2ac4) (set! aZ2c38@aZ2ad7@&i/o-file-protection-rcd aZ2ad7@&i/o-file-protection-rcd) (set! aZ2add@aZ2ad8 (make-record-type-descriptor '&i/o-file-is-read-only aZ2ac8@aZ2ac3 'aZ2adb '#f '#f '#())) (set! aZ2c39@aZ2add@aZ2ad8 aZ2add@aZ2ad8) (set! aZ2adf@aZ2ada '#f) (set! aZ2c3a@aZ2adf@aZ2ada aZ2adf@aZ2ada) (set! aZ2ae1@aZ2ad9 (make-record-constructor-descriptor aZ2add@aZ2ad8 aZ2acc@aZ2ac4 aZ2adf@aZ2ada)) (set! aZ2c3b@aZ2ae1@aZ2ad9 aZ2ae1@aZ2ad9) (set! aZ2ae4@p? (record-predicate aZ2add@aZ2ad8)) (set! aZ2c3c@aZ2ae4@p? aZ2ae4@p?) (set! aZ2ae6@make-i/o-file-is-read-only-error (record-constructor aZ2ae1@aZ2ad9)) (set! aZ2c3d@aZ2ae6@make-i/o-file-is-read-only-error aZ2ae6@make-i/o-file-is-read-only-error) (set! aZ2ae8@i/o-file-is-read-only-error? (condition-predicate aZ2add@aZ2ad8)) (set! aZ2c3e@aZ2ae8@i/o-file-is-read-only-error? aZ2ae8@i/o-file-is-read-only-error?) (set! aZ2aea@&i/o-file-is-read-only-rtd aZ2add@aZ2ad8) (set! aZ2c3f@aZ2aea@&i/o-file-is-read-only-rtd aZ2aea@&i/o-file-is-read-only-rtd) (set! aZ2aec@&i/o-file-is-read-only-rcd aZ2ae1@aZ2ad9) (set! aZ2c40@aZ2aec@&i/o-file-is-read-only-rcd aZ2aec@&i/o-file-is-read-only-rcd) (set! aZ2af2@aZ2aed (make-record-type-descriptor '&i/o-file-already-exists aZ2aaf@aZ2aaa 'aZ2af0 '#f '#f '#())) (set! aZ2c41@aZ2af2@aZ2aed aZ2af2@aZ2aed) (set! aZ2af4@aZ2aef '#f) (set! aZ2c42@aZ2af4@aZ2aef aZ2af4@aZ2aef) (set! aZ2af6@aZ2aee (make-record-constructor-descriptor aZ2af2@aZ2aed aZ2ab3@aZ2aab aZ2af4@aZ2aef)) (set! aZ2c43@aZ2af6@aZ2aee aZ2af6@aZ2aee) (set! aZ2af9@p? (record-predicate aZ2af2@aZ2aed)) (set! aZ2c44@aZ2af9@p? aZ2af9@p?) (set! aZ2afb@make-i/o-file-already-exists-error (record-constructor aZ2af6@aZ2aee)) (set! aZ2c45@aZ2afb@make-i/o-file-already-exists-error aZ2afb@make-i/o-file-already-exists-error) (set! aZ2afd@i/o-file-already-exists-error? (condition-predicate aZ2af2@aZ2aed)) (set! aZ2c46@aZ2afd@i/o-file-already-exists-error? aZ2afd@i/o-file-already-exists-error?) (set! aZ2aff@&i/o-file-already-exists-rtd aZ2af2@aZ2aed) (set! aZ2c47@aZ2aff@&i/o-file-already-exists-rtd aZ2aff@&i/o-file-already-exists-rtd) (set! aZ2b01@&i/o-file-already-exists-rcd aZ2af6@aZ2aee) (set! aZ2c48@aZ2b01@&i/o-file-already-exists-rcd aZ2b01@&i/o-file-already-exists-rcd) (set! aZ2b07@aZ2b02 (make-record-type-descriptor '&i/o-file-does-not-exist aZ2aaf@aZ2aaa 'aZ2b05 '#f '#f '#())) (set! aZ2c49@aZ2b07@aZ2b02 aZ2b07@aZ2b02) (set! aZ2b09@aZ2b04 '#f) (set! aZ2c4a@aZ2b09@aZ2b04 aZ2b09@aZ2b04) (set! aZ2b0b@aZ2b03 (make-record-constructor-descriptor aZ2b07@aZ2b02 aZ2ab3@aZ2aab aZ2b09@aZ2b04)) (set! aZ2c4b@aZ2b0b@aZ2b03 aZ2b0b@aZ2b03) (set! aZ2b0e@p? (record-predicate aZ2b07@aZ2b02)) (set! aZ2c4c@aZ2b0e@p? aZ2b0e@p?) (set! aZ2b10@make-i/o-file-does-not-exist-error (record-constructor aZ2b0b@aZ2b03)) (set! aZ2c4d@aZ2b10@make-i/o-file-does-not-exist-error aZ2b10@make-i/o-file-does-not-exist-error) (set! aZ2b12@i/o-file-does-not-exist-error? (condition-predicate aZ2b07@aZ2b02)) (set! aZ2c4e@aZ2b12@i/o-file-does-not-exist-error? aZ2b12@i/o-file-does-not-exist-error?) (set! aZ2b14@&i/o-file-does-not-exist-rtd aZ2b07@aZ2b02) (set! aZ2c4f@aZ2b14@&i/o-file-does-not-exist-rtd aZ2b14@&i/o-file-does-not-exist-rtd) (set! aZ2b16@&i/o-file-does-not-exist-rcd aZ2b0b@aZ2b03) (set! aZ2c50@aZ2b16@&i/o-file-does-not-exist-rcd aZ2b16@&i/o-file-does-not-exist-rcd) (set! aZ2b1e@aZ2b19 (make-record-type-descriptor '&i/o-port aZ2a53@aZ2a4e 'aZ2b1c '#f '#f '#((immutable port)))) (set! aZ2c51@aZ2b1e@aZ2b19 aZ2b1e@aZ2b19) (set! aZ2b20@aZ2b1b '#f) (set! aZ2c52@aZ2b20@aZ2b1b aZ2b20@aZ2b1b) (set! aZ2b22@aZ2b1a (make-record-constructor-descriptor aZ2b1e@aZ2b19 aZ2a57@aZ2a4f aZ2b20@aZ2b1b)) (set! aZ2c53@aZ2b22@aZ2b1a aZ2b22@aZ2b1a) (set! aZ2b25@p? (record-predicate aZ2b1e@aZ2b19)) (set! aZ2c54@aZ2b25@p? aZ2b25@p?) (set! aZ2b27@make-i/o-port-error (record-constructor aZ2b22@aZ2b1a)) (set! aZ2c55@aZ2b27@make-i/o-port-error aZ2b27@make-i/o-port-error) (set! aZ2b29@aZ2b18 (record-accessor aZ2b1e@aZ2b19 '0)) (set! aZ2c56@aZ2b29@aZ2b18 aZ2b29@aZ2b18) (set! aZ2b2b@i/o-port-error? (condition-predicate aZ2b1e@aZ2b19)) (set! aZ2c57@aZ2b2b@i/o-port-error? aZ2b2b@i/o-port-error?) (set! aZ2b2d@i/o-error-port (condition-accessor aZ2b1e@aZ2b19 aZ2b29@aZ2b18)) (set! aZ2c58@aZ2b2d@i/o-error-port aZ2b2d@i/o-error-port) (set! aZ2b2f@&i/o-port-rtd aZ2b1e@aZ2b19) (set! aZ2c59@aZ2b2f@&i/o-port-rtd aZ2b2f@&i/o-port-rtd) (set! aZ2b31@&i/o-port-rcd aZ2b22@aZ2b1a) (set! aZ2c5a@aZ2b31@&i/o-port-rcd aZ2b31@&i/o-port-rcd) (set! aZ2b37@aZ2b32 (make-record-type-descriptor '&i/o-decoding aZ2b1e@aZ2b19 'aZ2b35 '#f '#f '#())) (set! aZ2c5b@aZ2b37@aZ2b32 aZ2b37@aZ2b32) (set! aZ2b39@aZ2b34 '#f) (set! aZ2c5c@aZ2b39@aZ2b34 aZ2b39@aZ2b34) (set! aZ2b3b@aZ2b33 (make-record-constructor-descriptor aZ2b37@aZ2b32 aZ2b22@aZ2b1a aZ2b39@aZ2b34)) (set! aZ2c5d@aZ2b3b@aZ2b33 aZ2b3b@aZ2b33) (set! aZ2b3e@p? (record-predicate aZ2b37@aZ2b32)) (set! aZ2c5e@aZ2b3e@p? aZ2b3e@p?) (set! aZ2b40@make-i/o-decoding-error (record-constructor aZ2b3b@aZ2b33)) (set! aZ2c5f@aZ2b40@make-i/o-decoding-error aZ2b40@make-i/o-decoding-error) (set! aZ2b42@i/o-decoding-error? (condition-predicate aZ2b37@aZ2b32)) (set! aZ2c60@aZ2b42@i/o-decoding-error? aZ2b42@i/o-decoding-error?) (set! aZ2b44@&i/o-decoding-rtd aZ2b37@aZ2b32) (set! aZ2c61@aZ2b44@&i/o-decoding-rtd aZ2b44@&i/o-decoding-rtd) (set! aZ2b46@&i/o-decoding-rcd aZ2b3b@aZ2b33) (set! aZ2c62@aZ2b46@&i/o-decoding-rcd aZ2b46@&i/o-decoding-rcd) (set! aZ2b4e@aZ2b49 (make-record-type-descriptor '&i/o-encoding aZ2b1e@aZ2b19 'aZ2b4c '#f '#f '#((immutable char)))) (set! aZ2c63@aZ2b4e@aZ2b49 aZ2b4e@aZ2b49) (set! aZ2b50@aZ2b4b '#f) (set! aZ2c64@aZ2b50@aZ2b4b aZ2b50@aZ2b4b) (set! aZ2b52@aZ2b4a (make-record-constructor-descriptor aZ2b4e@aZ2b49 aZ2b22@aZ2b1a aZ2b50@aZ2b4b)) (set! aZ2c65@aZ2b52@aZ2b4a aZ2b52@aZ2b4a) (set! aZ2b55@p? (record-predicate aZ2b4e@aZ2b49)) (set! aZ2c66@aZ2b55@p? aZ2b55@p?) (set! aZ2b57@make-i/o-encoding-error (record-constructor aZ2b52@aZ2b4a)) (set! aZ2c67@aZ2b57@make-i/o-encoding-error aZ2b57@make-i/o-encoding-error) (set! aZ2b59@aZ2b48 (record-accessor aZ2b4e@aZ2b49 '0)) (set! aZ2c68@aZ2b59@aZ2b48 aZ2b59@aZ2b48) (set! aZ2b5b@i/o-encoding-error? (condition-predicate aZ2b4e@aZ2b49)) (set! aZ2c69@aZ2b5b@i/o-encoding-error? aZ2b5b@i/o-encoding-error?) (set! aZ2b5d@i/o-encoding-error-char (condition-accessor aZ2b4e@aZ2b49 aZ2b59@aZ2b48)) (set! aZ2c6a@aZ2b5d@i/o-encoding-error-char aZ2b5d@i/o-encoding-error-char) (set! aZ2b5f@&i/o-encoding-rtd aZ2b4e@aZ2b49) (set! aZ2c6b@aZ2b5f@&i/o-encoding-rtd aZ2b5f@&i/o-encoding-rtd) (set! aZ2b61@&i/o-encoding-rcd aZ2b52@aZ2b4a) (set! aZ2c6c@aZ2b61@&i/o-encoding-rcd aZ2b61@&i/o-encoding-rcd) (set! aZ2b67@aZ2b62 (make-record-type-descriptor '&no-infinities aZ29f3@aZ29ee 'aZ2b65 '#f '#f '#())) (set! aZ2c6d@aZ2b67@aZ2b62 aZ2b67@aZ2b62) (set! aZ2b69@aZ2b64 '#f) (set! aZ2c6e@aZ2b69@aZ2b64 aZ2b69@aZ2b64) (set! aZ2b6b@aZ2b63 (make-record-constructor-descriptor aZ2b67@aZ2b62 aZ29f7@aZ29ef aZ2b69@aZ2b64)) (set! aZ2c6f@aZ2b6b@aZ2b63 aZ2b6b@aZ2b63) (set! aZ2b6e@p? (record-predicate aZ2b67@aZ2b62)) (set! aZ2c70@aZ2b6e@p? aZ2b6e@p?) (set! aZ2b70@make-no-infinities-violation (record-constructor aZ2b6b@aZ2b63)) (set! aZ2c71@aZ2b70@make-no-infinities-violation aZ2b70@make-no-infinities-violation) (set! aZ2b72@no-infinities-violation? (condition-predicate aZ2b67@aZ2b62)) (set! aZ2c72@aZ2b72@no-infinities-violation? aZ2b72@no-infinities-violation?) (set! aZ2b74@&no-infinities-rtd aZ2b67@aZ2b62) (set! aZ2c73@aZ2b74@&no-infinities-rtd aZ2b74@&no-infinities-rtd) (set! aZ2b76@&no-infinities-rcd aZ2b6b@aZ2b63) (set! aZ2c74@aZ2b76@&no-infinities-rcd aZ2b76@&no-infinities-rcd) (set! aZ2b7c@aZ2b77 (make-record-type-descriptor '&no-nans aZ29f3@aZ29ee 'aZ2b7a '#f '#f '#())) (set! aZ2c75@aZ2b7c@aZ2b77 aZ2b7c@aZ2b77) (set! aZ2b7e@aZ2b79 '#f) (set! aZ2c76@aZ2b7e@aZ2b79 aZ2b7e@aZ2b79) (set! aZ2b80@aZ2b78 (make-record-constructor-descriptor aZ2b7c@aZ2b77 aZ29f7@aZ29ef aZ2b7e@aZ2b79)) (set! aZ2c77@aZ2b80@aZ2b78 aZ2b80@aZ2b78) (set! aZ2b83@p? (record-predicate aZ2b7c@aZ2b77)) (set! aZ2c78@aZ2b83@p? aZ2b83@p?) (set! aZ2b85@make-no-nans-violation (record-constructor aZ2b80@aZ2b78)) (set! aZ2c79@aZ2b85@make-no-nans-violation aZ2b85@make-no-nans-violation) (set! aZ2b87@no-nans-violation? (condition-predicate aZ2b7c@aZ2b77)) (set! aZ2c7a@aZ2b87@no-nans-violation? aZ2b87@no-nans-violation?) (set! aZ2b89@&no-nans-rtd aZ2b7c@aZ2b77) (set! aZ2c7b@aZ2b89@&no-nans-rtd aZ2b89@&no-nans-rtd) (set! aZ2b8b@&no-nans-rcd aZ2b80@aZ2b78) (set! aZ2c7c@aZ2b8b@&no-nans-rcd aZ2b8b@&no-nans-rcd) (void))
(begin (begin (aZ712@aZ6c7@current-primitive-locations (lambda (aZ3147@x) (let ((aZ3149@t (assq aZ3147@x '((&no-nans-rcd . aZ2c7c@aZ2b8b@&no-nans-rcd) (&no-nans-rtd . aZ2c7b@aZ2b89@&no-nans-rtd) (&no-infinities-rcd . aZ2c74@aZ2b76@&no-infinities-rcd) (&no-infinities-rtd . aZ2c73@aZ2b74@&no-infinities-rtd) (&i/o-encoding-rcd . aZ2c6c@aZ2b61@&i/o-encoding-rcd) (&i/o-encoding-rtd . aZ2c6b@aZ2b5f@&i/o-encoding-rtd) (&i/o-decoding-rcd . aZ2c62@aZ2b46@&i/o-decoding-rcd) (&i/o-decoding-rtd . aZ2c61@aZ2b44@&i/o-decoding-rtd) (&i/o-port-rcd . aZ2c5a@aZ2b31@&i/o-port-rcd) (&i/o-port-rtd . aZ2c59@aZ2b2f@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . aZ2c50@aZ2b16@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . aZ2c4f@aZ2b14@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . aZ2c48@aZ2b01@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . aZ2c47@aZ2aff@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . aZ2c40@aZ2aec@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . aZ2c3f@aZ2aea@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . aZ2c38@aZ2ad7@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . aZ2c37@aZ2ad5@&i/o-file-protection-rtd) (&i/o-filename-rcd . aZ2c30@aZ2ac2@&i/o-filename-rcd) (&i/o-filename-rtd . aZ2c2f@aZ2ac0@&i/o-filename-rtd) (&i/o-invalid-position-rcd . aZ2c26@aZ2aa7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . aZ2c25@aZ2aa5@&i/o-invalid-position-rtd) (&i/o-write-rcd . aZ2c1c@aZ2a8c@&i/o-write-rcd) (&i/o-write-rtd . aZ2c1b@aZ2a8a@&i/o-write-rtd) (&i/o-read-rcd . aZ2c14@aZ2a77@&i/o-read-rcd) (&i/o-read-rtd . aZ2c13@aZ2a75@&i/o-read-rtd) (&i/o-rcd . aZ2c0c@aZ2a62@&i/o-rcd) (&i/o-rtd . aZ2c0b@aZ2a60@&i/o-rtd) (&undefined-rcd . aZ2c04@aZ2a4d@&undefined-rcd) (&undefined-rtd . aZ2c03@aZ2a4b@&undefined-rtd) (&syntax-rcd . aZ2bfc@aZ2a38@&syntax-rcd) (&syntax-rtd . aZ2bfb@aZ2a36@&syntax-rtd) (&lexical-rcd . aZ2bf0@aZ2a17@&lexical-rcd) (&lexical-rtd . aZ2bef@aZ2a15@&lexical-rtd) (&implementation-restriction-rcd . aZ2be8@aZ2a02@&implementation-restriction-rcd) (&implementation-restriction-rtd . aZ2be7@aZ2a00@&implementation-restriction-rtd) (&non-continuable-rcd . aZ2be0@aZ29ed@&non-continuable-rcd) (&non-continuable-rtd . aZ2bdf@aZ29eb@&non-continuable-rtd) (&who-rcd . aZ2bd8@aZ29d8@&who-rcd) (&who-rtd . aZ2bd7@aZ29d6@&who-rtd) (&irritants-rcd . aZ2bce@aZ29bd@&irritants-rcd) (&irritants-rtd . aZ2bcd@aZ29bb@&irritants-rtd) (&assertion-rcd . aZ2bc4@aZ29a2@&assertion-rcd) (&assertion-rtd . aZ2bc3@aZ29a0@&assertion-rtd) (&violation-rcd . aZ2bbc@aZ298d@&violation-rcd) (&violation-rtd . aZ2bbb@aZ298b@&violation-rtd) (&error-rcd . aZ2bb4@aZ2978@&error-rcd) (&error-rtd . aZ2bb3@aZ2976@&error-rtd) (&serious-rcd . aZ2bac@aZ2963@&serious-rcd) (&serious-rtd . aZ2bab@aZ2961@&serious-rtd) (&warning-rcd . aZ2ba4@aZ294e@&warning-rcd) (&warning-rtd . aZ2ba3@aZ294c@&warning-rtd) (&message-rcd . aZ2b9c@aZ2939@&message-rcd) (&message-rtd . aZ2b9b@aZ2937@&message-rtd) (&condition-rcd . aZ2b92@aZ28da@&condition-rcd) (&condition-rtd . aZ2b91@aZ28d8@&condition-rtd) (syntax-error . aZ28b4@aZe58@syntax-error) (syntax-dispatch . aZ2852@aZd7c@syntax-dispatch) (load . aZ2df1@aZ2c9c@load) (interaction-environment . aZ28bd@aZe6a@interaction-environment) (library-path . aZ979@aZ7b5@library-path) (mosh-cache-dir . aZ6c0@aZ59f@mosh-cache-dir) (make-parameter . aZ6bf@aZ59d@make-parameter) (make-variable-transformer . aZ280f@aZba7@make-variable-transformer) (identifier? . aZ28b7@aZe5e@identifier?) (generate-temporaries . aZ28ad@aZe4a@generate-temporaries) (free-identifier=? . aZ28ae@aZe4c@free-identifier=?) (syntax->datum . aZ28b9@aZe62@syntax->datum) (datum->syntax . aZ28b8@aZe60@datum->syntax) (bound-identifier=? . aZ28af@aZe4e@bound-identifier=?) (make-i/o-write-error . aZ2c19@aZ2a86@make-i/o-write-error) (make-i/o-read-error . aZ2c11@aZ2a71@make-i/o-read-error) (make-i/o-port-error . aZ2c55@aZ2b27@make-i/o-port-error) (make-i/o-invalid-position-error . aZ2c21@aZ2a9d@make-i/o-invalid-position-error) (make-i/o-filename-error . aZ2c2b@aZ2ab8@make-i/o-filename-error) (make-i/o-file-protection-error . aZ2c35@aZ2ad1@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . aZ2c3d@aZ2ae6@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . aZ2c4d@aZ2b10@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . aZ2c45@aZ2afb@make-i/o-file-already-exists-error) (make-i/o-error . aZ2c09@aZ2a5c@make-i/o-error) (make-i/o-encoding-error . aZ2c67@aZ2b57@make-i/o-encoding-error) (make-i/o-decoding-error . aZ2c5f@aZ2b40@make-i/o-decoding-error) (i/o-write-error? . aZ2c1a@aZ2a88@i/o-write-error?) (i/o-read-error? . aZ2c12@aZ2a73@i/o-read-error?) (i/o-port-error? . aZ2c57@aZ2b2b@i/o-port-error?) (i/o-invalid-position-error? . aZ2c23@aZ2aa1@i/o-invalid-position-error?) (i/o-filename-error? . aZ2c2d@aZ2abc@i/o-filename-error?) (i/o-file-protection-error? . aZ2c36@aZ2ad3@i/o-file-protection-error?) (i/o-file-is-read-only-error? . aZ2c3e@aZ2ae8@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . aZ2c4e@aZ2b12@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . aZ2c46@aZ2afd@i/o-file-already-exists-error?) (i/o-error? . aZ2c0a@aZ2a5e@i/o-error?) (i/o-error-position . aZ2c24@aZ2aa3@i/o-error-position) (i/o-error-port . aZ2c58@aZ2b2d@i/o-error-port) (i/o-error-filename . aZ2c2e@aZ2abe@i/o-error-filename) (i/o-encoding-error? . aZ2c69@aZ2b5b@i/o-encoding-error?) (i/o-encoding-error-char . aZ2c6a@aZ2b5d@i/o-encoding-error-char) (i/o-decoding-error? . aZ2c60@aZ2b42@i/o-decoding-error?) (scheme-report-environment . aZ28a4@aZe38@scheme-report-environment) (null-environment . aZ28a3@aZe36@null-environment) (command-line . aZ2dee@aZ2c96@command-line) (eval . aZ28a6@aZe3c@eval) (environment . aZ28a2@aZe34@environment) (who-condition? . aZ2bd5@aZ29d2@who-condition?) (warning? . aZ2ba2@aZ294a@warning?) (violation? . aZ2bba@aZ2989@violation?) (undefined-violation? . aZ2c02@aZ2a49@undefined-violation?) (syntax-violation? . aZ2bf8@aZ2a30@syntax-violation?) (syntax-violation-subform . aZ2bfa@aZ2a34@syntax-violation-subform) (syntax-violation-form . aZ2bf9@aZ2a32@syntax-violation-form) (syntax-violation . aZ28b6@aZe5c@syntax-violation) (serious-condition? . aZ2baa@aZ295f@serious-condition?) (non-continuable-violation? . aZ2bde@aZ29e9@non-continuable-violation?) (message-condition? . aZ2b99@aZ2933@message-condition?) (make-who-condition . aZ2bd3@aZ29ce@make-who-condition) (make-warning . aZ2ba1@aZ2948@make-warning) (make-violation . aZ2bb9@aZ2987@make-violation) (make-undefined-violation . aZ2c01@aZ2a47@make-undefined-violation) (make-syntax-violation . aZ2bf5@aZ2a2a@make-syntax-violation) (make-serious-condition . aZ2ba9@aZ295d@make-serious-condition) (make-non-continuable-violation . aZ2bdd@aZ29e7@make-non-continuable-violation) (make-message-condition . aZ2b97@aZ292f@make-message-condition) (make-lexical-violation . aZ2bed@aZ2a11@make-lexical-violation) (make-irritants-condition . aZ2bc9@aZ29b3@make-irritants-condition) (make-implementation-restriction-violation . aZ2be5@aZ29fc@make-implementation-restriction-violation) (make-error . aZ2bb1@aZ2972@make-error) (make-assertion-violation . aZ2bc1@aZ299c@make-assertion-violation) (lexical-violation? . aZ2bee@aZ2a13@lexical-violation?) (irritants-condition? . aZ2bcb@aZ29b7@irritants-condition?) (implementation-restriction-violation? . aZ2be6@aZ29fe@implementation-restriction-violation?) (error? . aZ2bb2@aZ2974@error?) (condition-who . aZ2bd6@aZ29d4@condition-who) (condition-message . aZ2b9a@aZ2935@condition-message) (condition-irritants . aZ2bcc@aZ29b9@condition-irritants) (assertion-violation? . aZ2bc2@aZ299e@assertion-violation?) (no-nans-violation? . aZ2c7a@aZ2b87@no-nans-violation?) (no-infinities-violation? . aZ2c72@aZ2b72@no-infinities-violation?) (make-no-nans-violation . aZ2c79@aZ2b85@make-no-nans-violation) (make-no-infinities-violation . aZ2c71@aZ2b70@make-no-infinities-violation) (assertion-error . aZ28b3@aZe56@assertion-error))))) (if aZ3149@t (cdr aZ3149@t) '#f)))) (aZ989@aZ7d5@install-library 'aZ3124 '(mosh interaction) '() '() '() '() '((regexp? . aZ311c) (alist->eq-hash-table . aZ3118) (format . aZ3115) (string-split . aZ310a) (call-process . aZ3104) (set-current-directory! . aZ3100) (expand-path . aZ30ff) (current-directory . aZ30fe) (%spawn . aZ30fd) (%waitpid . aZ30fc) (simple-struct-name . aZ30fb) (simple-struct-set! . aZ30fa) (simple-struct-ref . aZ30f9) (make-simple-struct . aZ30f8) (simple-struct? . aZ30f7) (pointer-ref-c-int64 . aZ30f6) (pointer-ref-c-int32 . aZ30f5) (pointer-ref-c-int16 . aZ30f4) (pointer-ref-c-int8 . aZ30f3) (pointer-ref-c-uint64 . aZ30f2) (pointer-ref-c-uint32 . aZ30f1) (pointer-ref-c-uint16 . aZ30f0) (pointer-ref-c-uint8 . aZ30ef) (pointer-set-c-uint64! . aZ30ee) (pointer-set-c-uint32! . aZ30ed) (pointer-set-c-uint16! . aZ30ec) (pointer-set-c-uint8! . aZ30eb) (pointer-set-c-int64! . aZ30ea) (pointer-set-c-int32! . aZ30e9) (pointer-set-c-int16! . aZ30e8) (pointer-set-c-int8! . aZ30e7) (pointer-set-c-pointer! . aZ30e6) (pointer-set-c-double! . aZ30e5) (pointer-set-c-float! . aZ30e4) (pointer-set-c-long-long! . aZ30e3) (pointer-set-c-long! . aZ30e2) (pointer-set-c-int! . aZ30e1) (pointer-set-c-short! . aZ30e0) (pointer-set-c-char! . aZ30df) (pointer-ref-c-pointer . aZ30de) (pointer-ref-c-double . aZ30dd) (pointer-ref-c-float . aZ30dc) (pointer-ref-c-unsigned-long-long . aZ30db) (pointer-ref-c-signed-long-long . aZ30da) (pointer-ref-c-unsigned-long . aZ30d9) (pointer-ref-c-signed-long . aZ30d8) (pointer-ref-c-unsigned-int . aZ30d7) (pointer-ref-c-signed-int . aZ30d6) (pointer-ref-c-unsigned-short . aZ30d5) (pointer-ref-c-signed-short . aZ30d4) (pointer-ref-c-unsigned-char . aZ30d3) (pointer-ref-c-signed-char . aZ30d2) (pointer->integer . aZ30d1) (integer->pointer . aZ30d0) (pointer? . aZ30cf) (shared-errno . aZ30ce) (%ffi-supported? . aZ30c9) (%ffi-pointer->string . aZ30c8) (%ffi-call . aZ30c7) (%ffi-lookup . aZ30c6) (%ffi-open . aZ30c5) (null-terminated-utf8->string . aZ30c4) (null-terminated-bytevector->string . aZ30c3) (%fork . aZ30c2) (%pipe . aZ30c1) (p . aZ30c0) (whereis . aZ30a4) (register . aZ30a3) (vm-join! . aZ30a2) (vm-set-value! . aZ30a1) (vm? . aZ30a0) (main-vm? . aZ309f) (vm-eval . aZ309e) (vm-self . aZ309d) (vm-start! . aZ309c) (make-vm . aZ309b) (mutex-try-lock! . aZ309a) (mutex-unlock! . aZ3099) (mutex-lock! . aZ3098) (mutex? . aZ3097) (make-mutex . aZ3096) (condition-variable-notify-all! . aZ3095) (condition-variable-notify! . aZ3094) (condition-variable-wait! . aZ3093) (make-condition-variable . aZ3092) (string-upcase . aZ307a) (string-titlecase . aZ3079) (string-normalize-nfkd . aZ3078) (string-normalize-nfkc . aZ3077) (string-normalize-nfd . aZ3076) (string-normalize-nfc . aZ3075) (string-foldcase . aZ3074) (string-downcase . aZ3073) (string-ci>? . aZ3072) (string-ci>=? . aZ3071) (string-ci=? . aZ3070) (string-ci<? . aZ306f) (string-ci<=? . aZ306e) (char-whitespace? . aZ306d) (char-upper-case? . aZ306c) (char-title-case? . aZ306b) (char-numeric? . aZ306a) (char-lower-case? . aZ3069) (char-general-category . aZ3068) (char-upcase . aZ3067) (char-titlecase . aZ3066) (char-foldcase . aZ3065) (char-downcase . aZ3064) (char-ci>? . aZ3063) (char-ci>=? . aZ3062) (char-ci=? . aZ3061) (char-ci<? . aZ3060) (char-ci<=? . aZ305f) (char-alphabetic? . aZ305e) (make-variable-transformer . aZba6) (identifier? . aZe5d) (generate-temporaries . aZe49) (free-identifier=? . aZe4b) (syntax->datum . aZe61) (datum->syntax . aZe5f) (bound-identifier=? . aZe4d) (record-type-descriptor? . aZ305d) (record-predicate . aZ305c) (record-mutator . aZ305b) (record-constructor . aZ305a) (record-accessor . aZ3059) (make-record-type-descriptor . aZ3058) (make-record-constructor-descriptor . aZ3057) (record? . aZ3056) (record-type-uid . aZ3055) (record-type-sealed? . aZ3054) (record-type-parent . aZ3053) (record-type-opaque? . aZ3052) (record-type-name . aZ3051) (record-type-generative? . aZ3050) (record-type-field-names . aZ304f) (record-rtd . aZ304e) (record-field-mutable? . aZ304d) (delete-file . aZ304c) (file-exists? . aZ304b) (vector-sort! . aZ304a) (vector-sort . aZ3049) (list-sort . aZ3048) (symbol-hash . aZ3047) (string-ci-hash . aZ3046) (string-hash . aZ3045) (equal-hash . aZ3044) (hashtable-equivalence-function . aZ3043) (make-hashtable . aZ3042) (hashtable-hash-function . aZ3041) (make-eqv-hashtable . aZ3040) (make-eq-hashtable . aZ303f) (hashtable? . aZ303e) (hashtable-update! . aZ303d) (hashtable-size . aZ303c) (hashtable-set! . aZ303b) (hashtable-ref . aZ303a) (hashtable-mutable? . aZ3039) (hashtable-keys . aZ3038) (hashtable-entries . aZ3037) (hashtable-delete! . aZ3036) (hashtable-copy . aZ3035) (hashtable-contains? . aZ3034) (hashtable-clear! . aZ3033) (call-with-output-file . aZ3032) (call-with-input-file . aZ3031) (write-char . aZ3030) (write . aZ302f) (with-output-to-file . aZ302e) (with-input-from-file . aZ302d) (read-char . aZ302c) (read . aZ302b) (peek-char . aZ302a) (open-output-file . aZ3029) (open-input-file . aZ3028) (newline . aZ3027) (display . aZ3026) (close-output-port . aZ3025) (close-input-port . aZ3024) (eof-object? . aZ3023) (eof-object . aZ3022) (current-error-port . aZ3021) (current-output-port . aZ3020) (current-input-port . aZ301f) (output-port? . aZ301e) (input-port? . aZ301d) (utf-8-codec . aZ301c) (utf-16-codec . aZ301b) (transcoder-error-handling-mode . aZ301a) (transcoder-eol-style . aZ3019) (transcoder-codec . aZ3018) (transcoded-port . aZ3017) (textual-port? . aZ3016) (string->bytevector . aZ3015) (standard-output-port . aZ3014) (standard-input-port . aZ3013) (standard-error-port . aZ3012) (set-port-position! . aZ3011) (put-u8 . aZ3010) (put-string . aZ300f) (put-datum . aZ300e) (put-char . aZ300d) (put-bytevector . aZ300c) (port? . aZ300b) (port-transcoder . aZ300a) (port-position . aZ3009) (port-has-set-port-position!? . aZ3008) (port-has-port-position? . aZ3007) (port-eof? . aZ3006) (output-port-buffer-mode . aZ3005) (open-string-output-port . aZ3004) (open-string-input-port . aZ3003) (open-file-output-port . aZ3002) (open-file-input/output-port . aZ3001) (open-file-input-port . aZ3000) (open-bytevector-output-port . aZ2fff) (open-bytevector-input-port . aZ2ffe) (native-transcoder . aZ2ffd) (native-eol-style . aZ2ffc) (make-transcoder . aZ2ffb) (latin-1-codec . aZ2ffa) (make-i/o-write-error . aZ2a85) (make-i/o-read-error . aZ2a70) (make-i/o-port-error . aZ2b26) (make-i/o-invalid-position-error . aZ2a9c) (make-i/o-filename-error . aZ2ab7) (make-i/o-file-protection-error . aZ2ad0) (make-i/o-file-is-read-only-error . aZ2ae5) (make-i/o-file-does-not-exist-error . aZ2b0f) (make-i/o-file-already-exists-error . aZ2afa) (make-i/o-error . aZ2a5b) (make-i/o-encoding-error . aZ2b56) (make-i/o-decoding-error . aZ2b3f) (make-custom-textual-output-port . aZ2ff9) (make-custom-textual-input/output-port . aZ2ff8) (make-custom-textual-input-port . aZ2ff7) (make-custom-binary-output-port . aZ2ff6) (make-custom-binary-input/output-port . aZ2ff5) (make-custom-binary-input-port . aZ2ff4) (make-bytevector . aZ2ff3) (lookahead-u8 . aZ2ff2) (lookahead-char . aZ2ff1) (i/o-write-error? . aZ2a87) (i/o-read-error? . aZ2a72) (i/o-port-error? . aZ2b2a) (i/o-invalid-position-error? . aZ2aa0) (i/o-filename-error? . aZ2abb) (i/o-file-protection-error? . aZ2ad2) (i/o-file-is-read-only-error? . aZ2ae7) (i/o-file-does-not-exist-error? . aZ2b11) (i/o-file-already-exists-error? . aZ2afc) (i/o-error? . aZ2a5d) (i/o-error-position . aZ2aa2) (i/o-error-port . aZ2b2c) (i/o-error-filename . aZ2abd) (i/o-encoding-error? . aZ2b5a) (i/o-encoding-error-char . aZ2b5c) (i/o-decoding-error? . aZ2b41) (get-u8 . aZ2ff0) (get-string-n! . aZ2fef) (get-string-n . aZ2fee) (get-string-all . aZ2fed) (get-line . aZ2fec) (get-datum . aZ2feb) (get-char . aZ2fea) (get-bytevector-some . aZ2fe9) (get-bytevector-n! . aZ2fe8) (get-bytevector-n . aZ2fe7) (get-bytevector-all . aZ2fe6) (flush-output-port . aZ2fe5) (close-port . aZ2fe4) (exit . aZ2fdc) (command-line . aZ2c95) (string-fill! . aZ2fdb) (string-set! . aZ2fda) (set-cdr! . aZ2fd9) (set-car! . aZ2fd8) (remove . aZ2fd7) (remv . aZ2fd6) (remp . aZ2fd5) (remq . aZ2fd4) (partition . aZ2fd3) (memv . aZ2fd2) (memq . aZ2fd1) (memp . aZ2fd0) (member . aZ2fcf) (exists . aZ2fce) (for-all . aZ2fcd) (fold-right . aZ2fcc) (fold-left . aZ2fcb) (find . aZ2fca) (filter . aZ2fc9) (cons* . aZ2fc8) (assv . aZ2fc7) (assq . aZ2fc6) (assp . aZ2fc5) (assoc . aZ2fc4) (call-with-string-output-port . aZ2fc3) (call-with-port . aZ2fc2) (call-with-bytevector-output-port . aZ2fc1) (bytevector->string . aZ2fc0) (buffer-mode? . aZ2fbf) (binary-port? . aZ2fbe) (with-exception-handler . aZ2fbd) (raise-continuable . aZ2fbc) (raise . aZ2fbb) (eval . aZe3b) (environment . aZe33) (make-enumeration . aZ2fba) (enum-set=? . aZ2fb9) (enum-set-universe . aZ2fb8) (enum-set-union . aZ2fb7) (enum-set-subset? . aZ2fb6) (enum-set-projection . aZ2fb5) (enum-set-member? . aZ2fb4) (enum-set-intersection . aZ2fb3) (enum-set-indexer . aZ2fb2) (enum-set-difference . aZ2fb1) (enum-set-constructor . aZ2fb0) (enum-set-complement . aZ2faf) (enum-set->list . aZ2fae) (who-condition? . aZ29d1) (warning? . aZ2949) (violation? . aZ2988) (undefined-violation? . aZ2a48) (syntax-violation? . aZ2a2f) (syntax-violation-subform . aZ2a33) (syntax-violation-form . aZ2a31) (syntax-violation . aZe5b) (simple-conditions . aZ2fad) (serious-condition? . aZ295e) (non-continuable-violation? . aZ29e8) (message-condition? . aZ2932) (make-who-condition . aZ29cd) (make-warning . aZ2947) (make-violation . aZ2986) (make-undefined-violation . aZ2a46) (make-syntax-violation . aZ2a29) (make-serious-condition . aZ295c) (make-non-continuable-violation . aZ29e6) (make-message-condition . aZ292e) (make-lexical-violation . aZ2a10) (make-irritants-condition . aZ29b2) (make-implementation-restriction-violation . aZ29fb) (make-error . aZ2971) (make-assertion-violation . aZ299b) (lexical-violation? . aZ2a12) (irritants-condition? . aZ29b6) (implementation-restriction-violation? . aZ29fd) (error? . aZ2973) (condition-who . aZ29d3) (condition-predicate . aZ2fac) (condition-message . aZ2934) (condition-irritants . aZ29b8) (condition-accessor . aZ2fab) (condition . aZ2faa) (assertion-violation? . aZ299d) (condition? . aZ2fa9) (utf32->string . aZ2fa8) (utf16->string . aZ2fa7) (utf8->string . aZ2fa6) (uint-list->bytevector . aZ2fa5) (u8-list->bytevector . aZ2fa4) (string->utf8 . aZ2fa3) (string->utf32 . aZ2fa2) (string->utf16 . aZ2fa1) (sint-list->bytevector . aZ2fa0) (native-endianness . aZ2f9f) (bytevector? . aZ2f9e) (bytevector=? . aZ2f9d) (bytevector-uint-set! . aZ2f9c) (bytevector-uint-ref . aZ2f9b) (bytevector-u8-set! . aZ2f9a) (bytevector-u8-ref . aZ2f99) (bytevector-u64-set! . aZ2f98) (bytevector-u64-ref . aZ2f97) (bytevector-u64-native-set! . aZ2f96) (bytevector-u64-native-ref . aZ2f95) (bytevector-u32-set! . aZ2f94) (bytevector-u32-ref . aZ2f93) (bytevector-u32-native-set! . aZ2f92) (bytevector-u32-native-ref . aZ2f91) (bytevector-u16-set! . aZ2f90) (bytevector-u16-ref . aZ2f8f) (bytevector-u16-native-set! . aZ2f8e) (bytevector-u16-native-ref . aZ2f8d) (bytevector-sint-set! . aZ2f8c) (bytevector-sint-ref . aZ2f8b) (bytevector-s8-set! . aZ2f8a) (bytevector-s8-ref . aZ2f89) (bytevector-s64-set! . aZ2f88) (bytevector-s64-ref . aZ2f87) (bytevector-s64-native-set! . aZ2f86) (bytevector-s64-native-ref . aZ2f85) (bytevector-s32-set! . aZ2f84) (bytevector-s32-ref . aZ2f83) (bytevector-s32-native-set! . aZ2f82) (bytevector-s32-native-ref . aZ2f81) (bytevector-s16-set! . aZ2f80) (bytevector-s16-ref . aZ2f7f) (bytevector-s16-native-set! . aZ2f7e) (bytevector-s16-native-ref . aZ2f7d) (bytevector-length . aZ2f7c) (bytevector-ieee-single-ref . aZ2f7b) (bytevector-ieee-single-set! . aZ2f7a) (bytevector-ieee-single-native-set! . aZ2f79) (bytevector-ieee-single-native-ref . aZ2f78) (bytevector-ieee-double-set! . aZ2f77) (bytevector-ieee-double-ref . aZ2f76) (bytevector-ieee-double-native-set! . aZ2f75) (bytevector-ieee-double-native-ref . aZ2f74) (bytevector-fill! . aZ2f73) (bytevector-copy! . aZ2f72) (bytevector-copy . aZ2f71) (bytevector->uint-list . aZ2f70) (bytevector->u8-list . aZ2f6f) (bytevector->sint-list . aZ2f6e) (no-nans-violation? . aZ2b86) (no-infinities-violation? . aZ2b71) (make-no-nans-violation . aZ2b84) (make-no-infinities-violation . aZ2b6f) (real->flonum . aZ2f6d) (flzero? . aZ2f6c) (fltruncate . aZ2f6b) (fltan . aZ2f6a) (flsqrt . aZ2f69) (flsin . aZ2f68) (flround . aZ2f67) (flpositive? . aZ2f66) (flonum? . aZ2f65) (flodd? . aZ2f64) (flnumerator . aZ2f63) (flnegative? . aZ2f62) (flnan? . aZ2f61) (flmod0 . aZ2f60) (flmod . aZ2f5f) (flmin . aZ2f5e) (flmax . aZ2f5d) (fllog . aZ2f5c) (flinteger? . aZ2f5b) (flinfinite? . aZ2f5a) (flfloor . aZ2f59) (flfinite? . aZ2f58) (flexpt . aZ2f57) (flexp . aZ2f56) (fleven? . aZ2f55) (fldiv0-and-mod0 . aZ2f54) (fldiv0 . aZ2f53) (fldiv-and-mod . aZ2f52) (fldiv . aZ2f51) (fldenominator . aZ2f50) (flcos . aZ2f4f) (flceiling . aZ2f4e) (flatan . aZ2f4d) (flasin . aZ2f4c) (flacos . aZ2f4b) (flabs . aZ2f4a) (fl>? . aZ2f49) (fl>=? . aZ2f48) (fl=? . aZ2f47) (fl<? . aZ2f46) (fl<=? . aZ2f45) (fl/ . aZ2f44) (fl- . aZ2f43) (fl+ . aZ2f42) (fl* . aZ2f41) (fixnum->flonum . aZ2f40) (fxzero? . aZ2f3f) (fxxor . aZ2f3e) (fxrotate-bit-field . aZ2f3d) (fxreverse-bit-field . aZ2f3c) (fxpositive? . aZ2f3b) (fxodd? . aZ2f3a) (fxnot . aZ2f39) (fxnegative? . aZ2f38) (fxmod0 . aZ2f37) (fxmod . aZ2f36) (fxmin . aZ2f35) (fxmax . aZ2f34) (fxlength . aZ2f33) (fxior . aZ2f32) (fxif . aZ2f31) (fxfirst-bit-set . aZ2f30) (fxeven? . aZ2f2f) (fxdiv0-and-mod0 . aZ2f2e) (fxdiv0 . aZ2f2d) (fxdiv-and-mod . aZ2f2c) (fxdiv . aZ2f2b) (fxcopy-bit-field . aZ2f2a) (fxcopy-bit . aZ2f29) (fxbit-set? . aZ2f28) (fxbit-field . aZ2f27) (fxbit-count . aZ2f26) (fxarithmetic-shift-right . aZ2f25) (fxarithmetic-shift-left . aZ2f24) (fxarithmetic-shift . aZ2f23) (fxand . aZ2f22) (fx>? . aZ2f21) (fx>=? . aZ2f20) (fx=? . aZ2f1f) (fx<? . aZ2f1e) (fx<=? . aZ2f1d) (fx-/carry . aZ2f1c) (fx- . aZ2f1b) (fx+/carry . aZ2f1a) (fx+ . aZ2f19) (fx*/carry . aZ2f18) (fx* . aZ2f17) (greatest-fixnum . aZ2f16) (least-fixnum . aZ2f15) (fixnum-width . aZ2f14) (fixnum? . aZ2f13) (bitwise-rotate-bit-field . aZ2f12) (bitwise-reverse-bit-field . aZ2f11) (bitwise-length . aZ2f10) (bitwise-if . aZ2f0f) (bitwise-first-bit-set . aZ2f0e) (bitwise-copy-bit-field . aZ2f0d) (bitwise-copy-bit . aZ2f0c) (bitwise-bit-set? . aZ2f0b) (bitwise-bit-field . aZ2f0a) (bitwise-bit-count . aZ2f09) (bitwise-xor . aZ2f08) (bitwise-ior . aZ2f07) (bitwise-and . aZ2f06) (bitwise-not . aZ2f05) (bitwise-arithmetic-shift-right . aZ2f04) (bitwise-arithmetic-shift-left . aZ2f03) (bitwise-arithmetic-shift . aZ2f02) (zero? . aZ2f01) (vector? . aZ2f00) (vector-set! . aZ2eff) (vector-ref . aZ2efe) (vector-map . aZ2efd) (vector-length . aZ2efc) (vector-for-each . aZ2efb) (vector-fill! . aZ2efa) (vector->list . aZ2ef9) (vector . aZ2ef8) (values . aZ2ef7) (truncate . aZ2ef6) (tan . aZ2ef5) (symbol? . aZ2ef4) (symbol=? . aZ2ef3) (symbol->string . aZ2ef2) (substring . aZ2ef1) (string? . aZ2ef0) (string>? . aZ2eef) (string>=? . aZ2eee) (string=? . aZ2eed) (string<? . aZ2eec) (string<=? . aZ2eeb) (string-ref . aZ2eea) (string-length . aZ2ee9) (string-for-each . aZ2ee8) (string-copy . aZ2ee7) (string-append . aZ2ee6) (string->symbol . aZ2ee5) (string->number . aZ2ee4) (string->list . aZ2ee3) (string . aZ2ee2) (sqrt . aZ2ee1) (sin . aZ2ee0) (round . aZ2edf) (reverse . aZ2ede) (real? . aZ2edd) (real-valued? . aZ2edc) (real-part . aZ2edb) (rationalize . aZ2eda) (rational? . aZ2ed9) (rational-valued? . aZ2ed8) (procedure? . aZ2ed7) (positive? . aZ2ed6) (pair? . aZ2ed5) (odd? . aZ2ed4) (numerator . aZ2ed3) (number? . aZ2ed2) (number->string . aZ2ed1) (null? . aZ2ed0) (not . aZ2ecf) (negative? . aZ2ece) (nan? . aZ2ecd) (min . aZ2ecc) (max . aZ2ecb) (map . aZ2eca) (make-vector . aZ2ec9) (make-string . aZ2ec8) (make-rectangular . aZ2ec7) (make-polar . aZ2ec6) (magnitude . aZ2ec5) (log . aZ2ec4) (list? . aZ2ec3) (list-tail . aZ2ec2) (list-ref . aZ2ec1) (list->vector . aZ2ec0) (list->string . aZ2ebf) (list . aZ2ebe) (length . aZ2ebd) (lcm . aZ2ebc) (integer? . aZ2ebb) (integer-valued? . aZ2eba) (integer->char . aZ2eb9) (infinite? . aZ2eb8) (inexact? . aZ2eb7) (inexact . aZ2eb6) (imag-part . aZ2eb5) (gcd . aZ2eb4) (for-each . aZ2eb3) (floor . aZ2eb2) (finite? . aZ2eb1) (expt . aZ2eb0) (exp . aZ2eaf) (exact? . aZ2eae) (exact-integer-sqrt . aZ2ead) (exact . aZ2eac) (even? . aZ2eab) (error . aZ2eaa) (eqv? . aZ2ea9) (equal? . aZ2ea8) (eq? . aZ2ea7) (dynamic-wind . aZ2ea6) (div0-and-mod0 . aZ2ea5) (mod0 . aZ2ea4) (div0 . aZ2ea3) (div-and-mod . aZ2ea2) (mod . aZ2ea1) (div . aZ2ea0) (denominator . aZ2e9f) (cos . aZ2e9e) (cons . aZ2e9d) (complex? . aZ2e9c) (char? . aZ2e9b) (char>? . aZ2e9a) (char>=? . aZ2e99) (char=? . aZ2e98) (char<? . aZ2e97) (char<=? . aZ2e96) (char->integer . aZ2e95) (ceiling . aZ2e94) (call-with-values . aZ2e93) (call/cc . aZ2e92) (call-with-current-continuation . aZ2e91) (cddddr . aZ2e90) (cdddar . aZ2e8f) (cddadr . aZ2e8e) (cddaar . aZ2e8d) (cdaddr . aZ2e8c) (cdadar . aZ2e8b) (cdaadr . aZ2e8a) (cdaaar . aZ2e89) (cadddr . aZ2e88) (caddar . aZ2e87) (cadadr . aZ2e86) (cadaar . aZ2e85) (caaddr . aZ2e84) (caadar . aZ2e83) (caaadr . aZ2e82) (caaaar . aZ2e81) (cdddr . aZ2e80) (cddar . aZ2e7f) (cdadr . aZ2e7e) (cdaar . aZ2e7d) (caddr . aZ2e7c) (cadar . aZ2e7b) (caadr . aZ2e7a) (caaar . aZ2e79) (cddr . aZ2e78) (cdar . aZ2e77) (cadr . aZ2e76) (caar . aZ2e75) (cdr . aZ2e74) (car . aZ2e73) (boolean? . aZ2e72) (boolean=? . aZ2e71) (atan . aZ2e70) (assertion-violation . aZ2e6f) (asin . aZ2e6e) (apply . aZ2e6d) (append . aZ2e6c) (angle . aZ2e6b) (acos . aZ2e6a) (abs . aZ2e69) (/ . aZ2e68) (* . aZ2e67) (- . aZ2e66) (+ . aZ2e65) (>= . aZ2e64) (> . aZ2e63) (= . aZ2e62) (<= . aZ2e61) (< . aZ2e60) (library . aZ2e5f) (&no-nans . aZ2e5e) (&no-infinities . aZ2e5d) (&i/o-encoding . aZ2e5c) (&i/o-decoding . aZ2e5b) (&i/o-port . aZ2e5a) (&i/o-file-does-not-exist . aZ2e59) (&i/o-file-already-exists . aZ2e58) (&i/o-file-is-read-only . aZ2e57) (&i/o-file-protection . aZ2e56) (&i/o-filename . aZ2e55) (&i/o-invalid-position . aZ2e54) (&i/o-write . aZ2e53) (&i/o-read . aZ2e52) (&i/o . aZ2e51) (&undefined . aZ2e50) (&syntax . aZ2e4f) (&lexical . aZ2e4e) (&implementation-restriction . aZ2e4d) (&non-continuable . aZ2e4c) (&who . aZ2e4b) (&irritants . aZ2e4a) (&assertion . aZ2e49) (&violation . aZ2e48) (&error . aZ2e47) (&serious . aZ2e46) (&warning . aZ2e45) (&message . aZ2e44) (&condition . aZ2e43) (define-condition-type . aZ2e42) (define-enumeration . aZ2e41) (define-record-type . aZ2e40) (parent-rtd . aZ2e3f) (nongenerative . aZ2e3e) (opaque . aZ2e3d) (sealed . aZ2e3c) (protocol . aZ2e3b) (parent . aZ2e3a) (immutable . aZ2e39) (mutable . aZ2e38) (fields . aZ2e37) (error-handling-mode . aZ2e36) (file-options . aZ2e35) (buffer-mode . aZ2e34) (eol-style . aZ2e33) (guard . aZ2e32) (unsyntax-splicing . aZ2e2f) (unsyntax . aZ2e2e) (unquote-splicing . aZ2e2d) (unquote . aZ2e2c) (_ . aZ2e2b) (else . aZ2e2a) (=> . aZ2e29) (... . aZ2e28) (assert . aZ2e27) (endianness . aZ2e26) (time . aZ2e24) (do . aZ2e23) (cond . aZ2e22) (let* . aZ2e21) (let*-values . aZ2e20) (let-values . aZ2e1f) (identifier-syntax . aZ2e1e) (with-syntax . aZ2e1d) (quasisyntax . aZ2e1c) (quasiquote . aZ2e1b) (syntax-rules . aZ2e1a) (include . aZ2e19) (record-constructor-descriptor . aZ2e17) (record-type-descriptor . aZ2e16) (case . aZ2e15) (unless . aZ2e13) (when . aZ2e12) (or . aZ2e11) (and . aZ2e10) (if . aZ2e0f) (let . aZ2e0e) (letrec* . aZ2e0d) (letrec . aZ2e0c) (case-lambda . aZ2e0a) (lambda . aZ2e09) (syntax . aZ2e08) (syntax-case . aZ2e07) (quote . aZ2e06) (letrec-syntax . aZ2e04) (let-syntax . aZ2e03) (set! . aZ2e02) (import . aZ2e01) (begin . aZ2e00) (define-syntax . aZ2dfe) (define . aZ2dfd)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3125 '(psyntax null-environment-5) '() '() '() '() '((make-promise . aZ2fdd) (unquote-splicing . aZ2e2d) (unquote . aZ2e2c) (_ . aZ2e2b) (else . aZ2e2a) (=> . aZ2e29) (... . aZ2e28) (delay . aZ2e25) (do . aZ2e23) (cond . aZ2e22) (let* . aZ2e21) (quasiquote . aZ2e1b) (syntax-rules . aZ2e1a) (case . aZ2e15) (or . aZ2e11) (and . aZ2e10) (if . aZ2e0f) (let . aZ2e0e) (letrec . aZ2e0c) (lambda . aZ2e09) (quote . aZ2e06) (letrec-syntax . aZ2e04) (let-syntax . aZ2e03) (set! . aZ2e02) (begin . aZ2e00) (define-syntax . aZ2dfe) (define . aZ2dfd)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3126 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . aZ3072) (string-ci>=? . aZ3071) (string-ci=? . aZ3070) (string-ci<? . aZ306f) (string-ci<=? . aZ306e) (char-whitespace? . aZ306d) (char-upper-case? . aZ306c) (char-numeric? . aZ306a) (char-lower-case? . aZ3069) (char-upcase . aZ3067) (char-downcase . aZ3064) (char-ci>? . aZ3063) (char-ci>=? . aZ3062) (char-ci=? . aZ3061) (char-ci<? . aZ3060) (char-ci<=? . aZ305f) (char-alphabetic? . aZ305e) (call-with-output-file . aZ3032) (call-with-input-file . aZ3031) (write-char . aZ3030) (write . aZ302f) (with-output-to-file . aZ302e) (with-input-from-file . aZ302d) (read-char . aZ302c) (read . aZ302b) (peek-char . aZ302a) (open-output-file . aZ3029) (open-input-file . aZ3028) (newline . aZ3027) (display . aZ3026) (close-output-port . aZ3025) (close-input-port . aZ3024) (eof-object . aZ3022) (current-output-port . aZ3020) (current-input-port . aZ301f) (output-port? . aZ301e) (input-port? . aZ301d) (scheme-report-environment . aZe37) (quotient . aZ2fe3) (null-environment . aZe35) (remainder . aZ2fe2) (modulo . aZ2fe1) (inexact->exact . aZ2fe0) (force . aZ2fdf) (exact->inexact . aZ2fde) (make-promise . aZ2fdd) (string-fill! . aZ2fdb) (string-set! . aZ2fda) (set-cdr! . aZ2fd9) (set-car! . aZ2fd8) (memv . aZ2fd2) (memq . aZ2fd1) (member . aZ2fcf) (assv . aZ2fc7) (assq . aZ2fc6) (assoc . aZ2fc4) (eval . aZe3b) (zero? . aZ2f01) (vector? . aZ2f00) (vector-set! . aZ2eff) (vector-ref . aZ2efe) (vector-length . aZ2efc) (vector-fill! . aZ2efa) (vector->list . aZ2ef9) (vector . aZ2ef8) (values . aZ2ef7) (truncate . aZ2ef6) (tan . aZ2ef5) (symbol? . aZ2ef4) (symbol->string . aZ2ef2) (substring . aZ2ef1) (string? . aZ2ef0) (string>? . aZ2eef) (string>=? . aZ2eee) (string=? . aZ2eed) (string<? . aZ2eec) (string<=? . aZ2eeb) (string-ref . aZ2eea) (string-length . aZ2ee9) (string-copy . aZ2ee7) (string-append . aZ2ee6) (string->symbol . aZ2ee5) (string->number . aZ2ee4) (string->list . aZ2ee3) (string . aZ2ee2) (sqrt . aZ2ee1) (sin . aZ2ee0) (round . aZ2edf) (reverse . aZ2ede) (real? . aZ2edd) (real-part . aZ2edb) (rationalize . aZ2eda) (rational? . aZ2ed9) (procedure? . aZ2ed7) (positive? . aZ2ed6) (pair? . aZ2ed5) (odd? . aZ2ed4) (numerator . aZ2ed3) (number? . aZ2ed2) (number->string . aZ2ed1) (not . aZ2ecf) (negative? . aZ2ece) (min . aZ2ecc) (max . aZ2ecb) (map . aZ2eca) (make-vector . aZ2ec9) (make-string . aZ2ec8) (make-rectangular . aZ2ec7) (make-polar . aZ2ec6) (magnitude . aZ2ec5) (log . aZ2ec4) (list? . aZ2ec3) (list-tail . aZ2ec2) (list-ref . aZ2ec1) (list->vector . aZ2ec0) (list->string . aZ2ebf) (list . aZ2ebe) (length . aZ2ebd) (lcm . aZ2ebc) (integer? . aZ2ebb) (integer->char . aZ2eb9) (inexact? . aZ2eb7) (imag-part . aZ2eb5) (gcd . aZ2eb4) (for-each . aZ2eb3) (floor . aZ2eb2) (expt . aZ2eb0) (exp . aZ2eaf) (exact? . aZ2eae) (even? . aZ2eab) (eqv? . aZ2ea9) (equal? . aZ2ea8) (eq? . aZ2ea7) (dynamic-wind . aZ2ea6) (denominator . aZ2e9f) (cos . aZ2e9e) (cons . aZ2e9d) (complex? . aZ2e9c) (char? . aZ2e9b) (char>? . aZ2e9a) (char>=? . aZ2e99) (char=? . aZ2e98) (char<? . aZ2e97) (char<=? . aZ2e96) (char->integer . aZ2e95) (ceiling . aZ2e94) (call-with-values . aZ2e93) (call-with-current-continuation . aZ2e91) (cddddr . aZ2e90) (cdddar . aZ2e8f) (cddadr . aZ2e8e) (cddaar . aZ2e8d) (cdaddr . aZ2e8c) (cdadar . aZ2e8b) (cdaadr . aZ2e8a) (cdaaar . aZ2e89) (cadddr . aZ2e88) (caddar . aZ2e87) (cadadr . aZ2e86) (cadaar . aZ2e85) (caaddr . aZ2e84) (caadar . aZ2e83) (caaadr . aZ2e82) (caaaar . aZ2e81) (cdddr . aZ2e80) (cddar . aZ2e7f) (cdadr . aZ2e7e) (cdaar . aZ2e7d) (caddr . aZ2e7c) (cadar . aZ2e7b) (caadr . aZ2e7a) (caaar . aZ2e79) (cddr . aZ2e78) (cdar . aZ2e77) (cadr . aZ2e76) (caar . aZ2e75) (cdr . aZ2e74) (car . aZ2e73) (boolean? . aZ2e72) (atan . aZ2e70) (asin . aZ2e6e) (apply . aZ2e6d) (append . aZ2e6c) (angle . aZ2e6b) (acos . aZ2e6a) (abs . aZ2e69) (/ . aZ2e68) (* . aZ2e67) (- . aZ2e66) (+ . aZ2e65) (>= . aZ2e64) (> . aZ2e63) (= . aZ2e62) (<= . aZ2e61) (< . aZ2e60) (unquote-splicing . aZ2e2d) (unquote . aZ2e2c) (else . aZ2e2a) (=> . aZ2e29) (... . aZ2e28) (delay . aZ2e25) (do . aZ2e23) (cond . aZ2e22) (let* . aZ2e21) (quasiquote . aZ2e1b) (syntax-rules . aZ2e1a) (case . aZ2e15) (or . aZ2e11) (and . aZ2e10) (if . aZ2e0f) (let . aZ2e0e) (letrec . aZ2e0c) (lambda . aZ2e09) (quote . aZ2e06) (letrec-syntax . aZ2e04) (let-syntax . aZ2e03) (set! . aZ2e02) (begin . aZ2e00) (define-syntax . aZ2dfe) (define . aZ2dfd)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3127 '(psyntax modules) '() '() '() '() '((module . aZ2dff)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3128 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3129 '(rnrs) '(6) '() '() '() '((regexp? . aZ311c) (string-upcase . aZ307a) (string-titlecase . aZ3079) (string-normalize-nfkd . aZ3078) (string-normalize-nfkc . aZ3077) (string-normalize-nfd . aZ3076) (string-normalize-nfc . aZ3075) (string-foldcase . aZ3074) (string-downcase . aZ3073) (string-ci>? . aZ3072) (string-ci>=? . aZ3071) (string-ci=? . aZ3070) (string-ci<? . aZ306f) (string-ci<=? . aZ306e) (char-whitespace? . aZ306d) (char-upper-case? . aZ306c) (char-title-case? . aZ306b) (char-numeric? . aZ306a) (char-lower-case? . aZ3069) (char-general-category . aZ3068) (char-upcase . aZ3067) (char-titlecase . aZ3066) (char-foldcase . aZ3065) (char-downcase . aZ3064) (char-ci>? . aZ3063) (char-ci>=? . aZ3062) (char-ci=? . aZ3061) (char-ci<? . aZ3060) (char-ci<=? . aZ305f) (char-alphabetic? . aZ305e) (make-variable-transformer . aZba6) (identifier? . aZe5d) (generate-temporaries . aZe49) (free-identifier=? . aZe4b) (syntax->datum . aZe61) (datum->syntax . aZe5f) (bound-identifier=? . aZe4d) (record-type-descriptor? . aZ305d) (record-predicate . aZ305c) (record-mutator . aZ305b) (record-constructor . aZ305a) (record-accessor . aZ3059) (make-record-type-descriptor . aZ3058) (make-record-constructor-descriptor . aZ3057) (record? . aZ3056) (record-type-uid . aZ3055) (record-type-sealed? . aZ3054) (record-type-parent . aZ3053) (record-type-opaque? . aZ3052) (record-type-name . aZ3051) (record-type-generative? . aZ3050) (record-type-field-names . aZ304f) (record-rtd . aZ304e) (record-field-mutable? . aZ304d) (delete-file . aZ304c) (file-exists? . aZ304b) (vector-sort! . aZ304a) (vector-sort . aZ3049) (list-sort . aZ3048) (symbol-hash . aZ3047) (string-ci-hash . aZ3046) (string-hash . aZ3045) (equal-hash . aZ3044) (hashtable-equivalence-function . aZ3043) (make-hashtable . aZ3042) (hashtable-hash-function . aZ3041) (make-eqv-hashtable . aZ3040) (make-eq-hashtable . aZ303f) (hashtable? . aZ303e) (hashtable-update! . aZ303d) (hashtable-size . aZ303c) (hashtable-set! . aZ303b) (hashtable-ref . aZ303a) (hashtable-mutable? . aZ3039) (hashtable-keys . aZ3038) (hashtable-entries . aZ3037) (hashtable-delete! . aZ3036) (hashtable-copy . aZ3035) (hashtable-contains? . aZ3034) (hashtable-clear! . aZ3033) (call-with-output-file . aZ3032) (call-with-input-file . aZ3031) (write-char . aZ3030) (write . aZ302f) (with-output-to-file . aZ302e) (with-input-from-file . aZ302d) (read-char . aZ302c) (read . aZ302b) (peek-char . aZ302a) (open-output-file . aZ3029) (open-input-file . aZ3028) (newline . aZ3027) (display . aZ3026) (close-output-port . aZ3025) (close-input-port . aZ3024) (eof-object? . aZ3023) (eof-object . aZ3022) (current-error-port . aZ3021) (current-output-port . aZ3020) (current-input-port . aZ301f) (output-port? . aZ301e) (input-port? . aZ301d) (utf-8-codec . aZ301c) (utf-16-codec . aZ301b) (transcoder-error-handling-mode . aZ301a) (transcoder-eol-style . aZ3019) (transcoder-codec . aZ3018) (transcoded-port . aZ3017) (textual-port? . aZ3016) (string->bytevector . aZ3015) (standard-output-port . aZ3014) (standard-input-port . aZ3013) (standard-error-port . aZ3012) (set-port-position! . aZ3011) (put-u8 . aZ3010) (put-string . aZ300f) (put-datum . aZ300e) (put-char . aZ300d) (put-bytevector . aZ300c) (port? . aZ300b) (port-transcoder . aZ300a) (port-position . aZ3009) (port-has-set-port-position!? . aZ3008) (port-has-port-position? . aZ3007) (port-eof? . aZ3006) (output-port-buffer-mode . aZ3005) (open-string-output-port . aZ3004) (open-string-input-port . aZ3003) (open-file-output-port . aZ3002) (open-file-input/output-port . aZ3001) (open-file-input-port . aZ3000) (open-bytevector-output-port . aZ2fff) (open-bytevector-input-port . aZ2ffe) (native-transcoder . aZ2ffd) (native-eol-style . aZ2ffc) (make-transcoder . aZ2ffb) (latin-1-codec . aZ2ffa) (make-i/o-write-error . aZ2a85) (make-i/o-read-error . aZ2a70) (make-i/o-port-error . aZ2b26) (make-i/o-invalid-position-error . aZ2a9c) (make-i/o-filename-error . aZ2ab7) (make-i/o-file-protection-error . aZ2ad0) (make-i/o-file-is-read-only-error . aZ2ae5) (make-i/o-file-does-not-exist-error . aZ2b0f) (make-i/o-file-already-exists-error . aZ2afa) (make-i/o-error . aZ2a5b) (make-i/o-encoding-error . aZ2b56) (make-i/o-decoding-error . aZ2b3f) (make-custom-textual-output-port . aZ2ff9) (make-custom-textual-input/output-port . aZ2ff8) (make-custom-textual-input-port . aZ2ff7) (make-custom-binary-output-port . aZ2ff6) (make-custom-binary-input/output-port . aZ2ff5) (make-custom-binary-input-port . aZ2ff4) (make-bytevector . aZ2ff3) (lookahead-u8 . aZ2ff2) (lookahead-char . aZ2ff1) (i/o-write-error? . aZ2a87) (i/o-read-error? . aZ2a72) (i/o-port-error? . aZ2b2a) (i/o-invalid-position-error? . aZ2aa0) (i/o-filename-error? . aZ2abb) (i/o-file-protection-error? . aZ2ad2) (i/o-file-is-read-only-error? . aZ2ae7) (i/o-file-does-not-exist-error? . aZ2b11) (i/o-file-already-exists-error? . aZ2afc) (i/o-error? . aZ2a5d) (i/o-error-position . aZ2aa2) (i/o-error-port . aZ2b2c) (i/o-error-filename . aZ2abd) (i/o-encoding-error? . aZ2b5a) (i/o-encoding-error-char . aZ2b5c) (i/o-decoding-error? . aZ2b41) (get-u8 . aZ2ff0) (get-string-n! . aZ2fef) (get-string-n . aZ2fee) (get-string-all . aZ2fed) (get-line . aZ2fec) (get-datum . aZ2feb) (get-char . aZ2fea) (get-bytevector-some . aZ2fe9) (get-bytevector-n! . aZ2fe8) (get-bytevector-n . aZ2fe7) (get-bytevector-all . aZ2fe6) (flush-output-port . aZ2fe5) (close-port . aZ2fe4) (exit . aZ2fdc) (command-line . aZ2c95) (remove . aZ2fd7) (remv . aZ2fd6) (remp . aZ2fd5) (remq . aZ2fd4) (partition . aZ2fd3) (memv . aZ2fd2) (memq . aZ2fd1) (memp . aZ2fd0) (member . aZ2fcf) (exists . aZ2fce) (for-all . aZ2fcd) (fold-right . aZ2fcc) (fold-left . aZ2fcb) (find . aZ2fca) (filter . aZ2fc9) (cons* . aZ2fc8) (assv . aZ2fc7) (assq . aZ2fc6) (assp . aZ2fc5) (assoc . aZ2fc4) (call-with-string-output-port . aZ2fc3) (call-with-port . aZ2fc2) (call-with-bytevector-output-port . aZ2fc1) (bytevector->string . aZ2fc0) (buffer-mode? . aZ2fbf) (binary-port? . aZ2fbe) (with-exception-handler . aZ2fbd) (raise-continuable . aZ2fbc) (raise . aZ2fbb) (make-enumeration . aZ2fba) (enum-set=? . aZ2fb9) (enum-set-universe . aZ2fb8) (enum-set-union . aZ2fb7) (enum-set-subset? . aZ2fb6) (enum-set-projection . aZ2fb5) (enum-set-member? . aZ2fb4) (enum-set-intersection . aZ2fb3) (enum-set-indexer . aZ2fb2) (enum-set-difference . aZ2fb1) (enum-set-constructor . aZ2fb0) (enum-set-complement . aZ2faf) (enum-set->list . aZ2fae) (who-condition? . aZ29d1) (warning? . aZ2949) (violation? . aZ2988) (undefined-violation? . aZ2a48) (syntax-violation? . aZ2a2f) (syntax-violation-subform . aZ2a33) (syntax-violation-form . aZ2a31) (syntax-violation . aZe5b) (simple-conditions . aZ2fad) (serious-condition? . aZ295e) (non-continuable-violation? . aZ29e8) (message-condition? . aZ2932) (make-who-condition . aZ29cd) (make-warning . aZ2947) (make-violation . aZ2986) (make-undefined-violation . aZ2a46) (make-syntax-violation . aZ2a29) (make-serious-condition . aZ295c) (make-non-continuable-violation . aZ29e6) (make-message-condition . aZ292e) (make-lexical-violation . aZ2a10) (make-irritants-condition . aZ29b2) (make-implementation-restriction-violation . aZ29fb) (make-error . aZ2971) (make-assertion-violation . aZ299b) (lexical-violation? . aZ2a12) (irritants-condition? . aZ29b6) (implementation-restriction-violation? . aZ29fd) (error? . aZ2973) (condition-who . aZ29d3) (condition-predicate . aZ2fac) (condition-message . aZ2934) (condition-irritants . aZ29b8) (condition-accessor . aZ2fab) (condition . aZ2faa) (assertion-violation? . aZ299d) (condition? . aZ2fa9) (utf32->string . aZ2fa8) (utf16->string . aZ2fa7) (utf8->string . aZ2fa6) (uint-list->bytevector . aZ2fa5) (u8-list->bytevector . aZ2fa4) (string->utf8 . aZ2fa3) (string->utf32 . aZ2fa2) (string->utf16 . aZ2fa1) (sint-list->bytevector . aZ2fa0) (native-endianness . aZ2f9f) (bytevector? . aZ2f9e) (bytevector=? . aZ2f9d) (bytevector-uint-set! . aZ2f9c) (bytevector-uint-ref . aZ2f9b) (bytevector-u8-set! . aZ2f9a) (bytevector-u8-ref . aZ2f99) (bytevector-u64-set! . aZ2f98) (bytevector-u64-ref . aZ2f97) (bytevector-u64-native-set! . aZ2f96) (bytevector-u64-native-ref . aZ2f95) (bytevector-u32-set! . aZ2f94) (bytevector-u32-ref . aZ2f93) (bytevector-u32-native-set! . aZ2f92) (bytevector-u32-native-ref . aZ2f91) (bytevector-u16-set! . aZ2f90) (bytevector-u16-ref . aZ2f8f) (bytevector-u16-native-set! . aZ2f8e) (bytevector-u16-native-ref . aZ2f8d) (bytevector-sint-set! . aZ2f8c) (bytevector-sint-ref . aZ2f8b) (bytevector-s8-set! . aZ2f8a) (bytevector-s8-ref . aZ2f89) (bytevector-s64-set! . aZ2f88) (bytevector-s64-ref . aZ2f87) (bytevector-s64-native-set! . aZ2f86) (bytevector-s64-native-ref . aZ2f85) (bytevector-s32-set! . aZ2f84) (bytevector-s32-ref . aZ2f83) (bytevector-s32-native-set! . aZ2f82) (bytevector-s32-native-ref . aZ2f81) (bytevector-s16-set! . aZ2f80) (bytevector-s16-ref . aZ2f7f) (bytevector-s16-native-set! . aZ2f7e) (bytevector-s16-native-ref . aZ2f7d) (bytevector-length . aZ2f7c) (bytevector-ieee-single-ref . aZ2f7b) (bytevector-ieee-single-set! . aZ2f7a) (bytevector-ieee-single-native-set! . aZ2f79) (bytevector-ieee-single-native-ref . aZ2f78) (bytevector-ieee-double-set! . aZ2f77) (bytevector-ieee-double-ref . aZ2f76) (bytevector-ieee-double-native-set! . aZ2f75) (bytevector-ieee-double-native-ref . aZ2f74) (bytevector-fill! . aZ2f73) (bytevector-copy! . aZ2f72) (bytevector-copy . aZ2f71) (bytevector->uint-list . aZ2f70) (bytevector->u8-list . aZ2f6f) (bytevector->sint-list . aZ2f6e) (no-nans-violation? . aZ2b86) (no-infinities-violation? . aZ2b71) (make-no-nans-violation . aZ2b84) (make-no-infinities-violation . aZ2b6f) (real->flonum . aZ2f6d) (flzero? . aZ2f6c) (fltruncate . aZ2f6b) (fltan . aZ2f6a) (flsqrt . aZ2f69) (flsin . aZ2f68) (flround . aZ2f67) (flpositive? . aZ2f66) (flonum? . aZ2f65) (flodd? . aZ2f64) (flnumerator . aZ2f63) (flnegative? . aZ2f62) (flnan? . aZ2f61) (flmod0 . aZ2f60) (flmod . aZ2f5f) (flmin . aZ2f5e) (flmax . aZ2f5d) (fllog . aZ2f5c) (flinteger? . aZ2f5b) (flinfinite? . aZ2f5a) (flfloor . aZ2f59) (flfinite? . aZ2f58) (flexpt . aZ2f57) (flexp . aZ2f56) (fleven? . aZ2f55) (fldiv0-and-mod0 . aZ2f54) (fldiv0 . aZ2f53) (fldiv-and-mod . aZ2f52) (fldiv . aZ2f51) (fldenominator . aZ2f50) (flcos . aZ2f4f) (flceiling . aZ2f4e) (flatan . aZ2f4d) (flasin . aZ2f4c) (flacos . aZ2f4b) (flabs . aZ2f4a) (fl>? . aZ2f49) (fl>=? . aZ2f48) (fl=? . aZ2f47) (fl<? . aZ2f46) (fl<=? . aZ2f45) (fl/ . aZ2f44) (fl- . aZ2f43) (fl+ . aZ2f42) (fl* . aZ2f41) (fixnum->flonum . aZ2f40) (fxzero? . aZ2f3f) (fxxor . aZ2f3e) (fxrotate-bit-field . aZ2f3d) (fxreverse-bit-field . aZ2f3c) (fxpositive? . aZ2f3b) (fxodd? . aZ2f3a) (fxnot . aZ2f39) (fxnegative? . aZ2f38) (fxmod0 . aZ2f37) (fxmod . aZ2f36) (fxmin . aZ2f35) (fxmax . aZ2f34) (fxlength . aZ2f33) (fxior . aZ2f32) (fxif . aZ2f31) (fxfirst-bit-set . aZ2f30) (fxeven? . aZ2f2f) (fxdiv0-and-mod0 . aZ2f2e) (fxdiv0 . aZ2f2d) (fxdiv-and-mod . aZ2f2c) (fxdiv . aZ2f2b) (fxcopy-bit-field . aZ2f2a) (fxcopy-bit . aZ2f29) (fxbit-set? . aZ2f28) (fxbit-field . aZ2f27) (fxbit-count . aZ2f26) (fxarithmetic-shift-right . aZ2f25) (fxarithmetic-shift-left . aZ2f24) (fxarithmetic-shift . aZ2f23) (fxand . aZ2f22) (fx>? . aZ2f21) (fx>=? . aZ2f20) (fx=? . aZ2f1f) (fx<? . aZ2f1e) (fx<=? . aZ2f1d) (fx-/carry . aZ2f1c) (fx- . aZ2f1b) (fx+/carry . aZ2f1a) (fx+ . aZ2f19) (fx*/carry . aZ2f18) (fx* . aZ2f17) (greatest-fixnum . aZ2f16) (least-fixnum . aZ2f15) (fixnum-width . aZ2f14) (fixnum? . aZ2f13) (bitwise-rotate-bit-field . aZ2f12) (bitwise-reverse-bit-field . aZ2f11) (bitwise-length . aZ2f10) (bitwise-if . aZ2f0f) (bitwise-first-bit-set . aZ2f0e) (bitwise-copy-bit-field . aZ2f0d) (bitwise-copy-bit . aZ2f0c) (bitwise-bit-set? . aZ2f0b) (bitwise-bit-field . aZ2f0a) (bitwise-bit-count . aZ2f09) (bitwise-xor . aZ2f08) (bitwise-ior . aZ2f07) (bitwise-and . aZ2f06) (bitwise-not . aZ2f05) (bitwise-arithmetic-shift-right . aZ2f04) (bitwise-arithmetic-shift-left . aZ2f03) (bitwise-arithmetic-shift . aZ2f02) (zero? . aZ2f01) (vector? . aZ2f00) (vector-set! . aZ2eff) (vector-ref . aZ2efe) (vector-map . aZ2efd) (vector-length . aZ2efc) (vector-for-each . aZ2efb) (vector-fill! . aZ2efa) (vector->list . aZ2ef9) (vector . aZ2ef8) (values . aZ2ef7) (truncate . aZ2ef6) (tan . aZ2ef5) (symbol? . aZ2ef4) (symbol=? . aZ2ef3) (symbol->string . aZ2ef2) (substring . aZ2ef1) (string? . aZ2ef0) (string>? . aZ2eef) (string>=? . aZ2eee) (string=? . aZ2eed) (string<? . aZ2eec) (string<=? . aZ2eeb) (string-ref . aZ2eea) (string-length . aZ2ee9) (string-for-each . aZ2ee8) (string-copy . aZ2ee7) (string-append . aZ2ee6) (string->symbol . aZ2ee5) (string->number . aZ2ee4) (string->list . aZ2ee3) (string . aZ2ee2) (sqrt . aZ2ee1) (sin . aZ2ee0) (round . aZ2edf) (reverse . aZ2ede) (real? . aZ2edd) (real-valued? . aZ2edc) (real-part . aZ2edb) (rationalize . aZ2eda) (rational? . aZ2ed9) (rational-valued? . aZ2ed8) (procedure? . aZ2ed7) (positive? . aZ2ed6) (pair? . aZ2ed5) (odd? . aZ2ed4) (numerator . aZ2ed3) (number? . aZ2ed2) (number->string . aZ2ed1) (null? . aZ2ed0) (not . aZ2ecf) (negative? . aZ2ece) (nan? . aZ2ecd) (min . aZ2ecc) (max . aZ2ecb) (map . aZ2eca) (make-vector . aZ2ec9) (make-string . aZ2ec8) (make-rectangular . aZ2ec7) (make-polar . aZ2ec6) (magnitude . aZ2ec5) (log . aZ2ec4) (list? . aZ2ec3) (list-tail . aZ2ec2) (list-ref . aZ2ec1) (list->vector . aZ2ec0) (list->string . aZ2ebf) (list . aZ2ebe) (length . aZ2ebd) (lcm . aZ2ebc) (integer? . aZ2ebb) (integer-valued? . aZ2eba) (integer->char . aZ2eb9) (infinite? . aZ2eb8) (inexact? . aZ2eb7) (inexact . aZ2eb6) (imag-part . aZ2eb5) (gcd . aZ2eb4) (for-each . aZ2eb3) (floor . aZ2eb2) (finite? . aZ2eb1) (expt . aZ2eb0) (exp . aZ2eaf) (exact? . aZ2eae) (exact-integer-sqrt . aZ2ead) (exact . aZ2eac) (even? . aZ2eab) (error . aZ2eaa) (eqv? . aZ2ea9) (equal? . aZ2ea8) (eq? . aZ2ea7) (dynamic-wind . aZ2ea6) (div0-and-mod0 . aZ2ea5) (mod0 . aZ2ea4) (div0 . aZ2ea3) (div-and-mod . aZ2ea2) (mod . aZ2ea1) (div . aZ2ea0) (denominator . aZ2e9f) (cos . aZ2e9e) (cons . aZ2e9d) (complex? . aZ2e9c) (char? . aZ2e9b) (char>? . aZ2e9a) (char>=? . aZ2e99) (char=? . aZ2e98) (char<? . aZ2e97) (char<=? . aZ2e96) (char->integer . aZ2e95) (ceiling . aZ2e94) (call-with-values . aZ2e93) (call/cc . aZ2e92) (call-with-current-continuation . aZ2e91) (cddddr . aZ2e90) (cdddar . aZ2e8f) (cddadr . aZ2e8e) (cddaar . aZ2e8d) (cdaddr . aZ2e8c) (cdadar . aZ2e8b) (cdaadr . aZ2e8a) (cdaaar . aZ2e89) (cadddr . aZ2e88) (caddar . aZ2e87) (cadadr . aZ2e86) (cadaar . aZ2e85) (caaddr . aZ2e84) (caadar . aZ2e83) (caaadr . aZ2e82) (caaaar . aZ2e81) (cdddr . aZ2e80) (cddar . aZ2e7f) (cdadr . aZ2e7e) (cdaar . aZ2e7d) (caddr . aZ2e7c) (cadar . aZ2e7b) (caadr . aZ2e7a) (caaar . aZ2e79) (cddr . aZ2e78) (cdar . aZ2e77) (cadr . aZ2e76) (caar . aZ2e75) (cdr . aZ2e74) (car . aZ2e73) (boolean? . aZ2e72) (boolean=? . aZ2e71) (atan . aZ2e70) (assertion-violation . aZ2e6f) (asin . aZ2e6e) (apply . aZ2e6d) (append . aZ2e6c) (angle . aZ2e6b) (acos . aZ2e6a) (abs . aZ2e69) (/ . aZ2e68) (* . aZ2e67) (- . aZ2e66) (+ . aZ2e65) (>= . aZ2e64) (> . aZ2e63) (= . aZ2e62) (<= . aZ2e61) (< . aZ2e60) (&no-nans . aZ2e5e) (&no-infinities . aZ2e5d) (&i/o-encoding . aZ2e5c) (&i/o-decoding . aZ2e5b) (&i/o-port . aZ2e5a) (&i/o-file-does-not-exist . aZ2e59) (&i/o-file-already-exists . aZ2e58) (&i/o-file-is-read-only . aZ2e57) (&i/o-file-protection . aZ2e56) (&i/o-filename . aZ2e55) (&i/o-invalid-position . aZ2e54) (&i/o-write . aZ2e53) (&i/o-read . aZ2e52) (&i/o . aZ2e51) (&undefined . aZ2e50) (&syntax . aZ2e4f) (&lexical . aZ2e4e) (&implementation-restriction . aZ2e4d) (&non-continuable . aZ2e4c) (&who . aZ2e4b) (&irritants . aZ2e4a) (&assertion . aZ2e49) (&violation . aZ2e48) (&error . aZ2e47) (&serious . aZ2e46) (&warning . aZ2e45) (&message . aZ2e44) (&condition . aZ2e43) (define-condition-type . aZ2e42) (define-enumeration . aZ2e41) (define-record-type . aZ2e40) (parent-rtd . aZ2e3f) (nongenerative . aZ2e3e) (opaque . aZ2e3d) (sealed . aZ2e3c) (protocol . aZ2e3b) (parent . aZ2e3a) (immutable . aZ2e39) (mutable . aZ2e38) (fields . aZ2e37) (error-handling-mode . aZ2e36) (file-options . aZ2e35) (buffer-mode . aZ2e34) (eol-style . aZ2e33) (guard . aZ2e32) (unsyntax-splicing . aZ2e2f) (unsyntax . aZ2e2e) (unquote-splicing . aZ2e2d) (unquote . aZ2e2c) (_ . aZ2e2b) (else . aZ2e2a) (=> . aZ2e29) (... . aZ2e28) (assert . aZ2e27) (endianness . aZ2e26) (do . aZ2e23) (cond . aZ2e22) (let* . aZ2e21) (let*-values . aZ2e20) (let-values . aZ2e1f) (identifier-syntax . aZ2e1e) (with-syntax . aZ2e1d) (quasisyntax . aZ2e1c) (quasiquote . aZ2e1b) (syntax-rules . aZ2e1a) (record-constructor-descriptor . aZ2e17) (record-type-descriptor . aZ2e16) (case . aZ2e15) (unless . aZ2e13) (when . aZ2e12) (or . aZ2e11) (and . aZ2e10) (if . aZ2e0f) (let . aZ2e0e) (letrec* . aZ2e0d) (letrec . aZ2e0c) (case-lambda . aZ2e0a) (lambda . aZ2e09) (syntax . aZ2e08) (syntax-case . aZ2e07) (quote . aZ2e06) (letrec-syntax . aZ2e04) (let-syntax . aZ2e03) (set! . aZ2e02) (begin . aZ2e00) (define-syntax . aZ2dfe) (define . aZ2dfd)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ312a '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . aZe37) (quotient . aZ2fe3) (null-environment . aZe35) (remainder . aZ2fe2) (modulo . aZ2fe1) (inexact->exact . aZ2fe0) (force . aZ2fdf) (exact->inexact . aZ2fde) (make-promise . aZ2fdd) (delay . aZ2e25)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ312b '(rnrs control) '(6) '() '() '() '((do . aZ2e23) (unless . aZ2e13) (when . aZ2e12) (case-lambda . aZ2e0a)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ312c '(rnrs eval) '(6) '() '() '() '((eval . aZe3b) (environment . aZe33)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ312d '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . aZ2fd9) (set-car! . aZ2fd8)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ312e '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . aZ2fdb) (string-set! . aZ2fda)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ312f '(rnrs programs) '(6) '() '() '() '((exit . aZ2fdc) (command-line . aZ2c95)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3130 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . aZba6) (identifier? . aZe5d) (generate-temporaries . aZe49) (free-identifier=? . aZe4b) (syntax->datum . aZe61) (datum->syntax . aZe5f) (bound-identifier=? . aZe4d) (syntax-violation . aZe5b) (unsyntax-splicing . aZ2e2f) (unsyntax . aZ2e2e) (_ . aZ2e2b) (... . aZ2e28) (with-syntax . aZ2e1d) (quasisyntax . aZ2e1c) (syntax . aZ2e08) (syntax-case . aZ2e07)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3131 '(rnrs files) '(6) '() '() '() '((delete-file . aZ304c) (file-exists? . aZ304b) (make-i/o-write-error . aZ2a85) (make-i/o-read-error . aZ2a70) (make-i/o-port-error . aZ2b26) (make-i/o-invalid-position-error . aZ2a9c) (make-i/o-filename-error . aZ2ab7) (make-i/o-file-protection-error . aZ2ad0) (make-i/o-file-is-read-only-error . aZ2ae5) (make-i/o-file-does-not-exist-error . aZ2b0f) (make-i/o-file-already-exists-error . aZ2afa) (make-i/o-error . aZ2a5b) (i/o-write-error? . aZ2a87) (i/o-read-error? . aZ2a72) (i/o-port-error? . aZ2b2a) (i/o-invalid-position-error? . aZ2aa0) (i/o-filename-error? . aZ2abb) (i/o-file-protection-error? . aZ2ad2) (i/o-file-is-read-only-error? . aZ2ae7) (i/o-file-does-not-exist-error? . aZ2b11) (i/o-file-already-exists-error? . aZ2afc) (i/o-error? . aZ2a5d) (i/o-error-position . aZ2aa2) (i/o-error-port . aZ2b2c) (i/o-error-filename . aZ2abd) (&i/o-port . aZ2e5a) (&i/o-file-does-not-exist . aZ2e59) (&i/o-file-already-exists . aZ2e58) (&i/o-file-is-read-only . aZ2e57) (&i/o-file-protection . aZ2e56) (&i/o-filename . aZ2e55) (&i/o-invalid-position . aZ2e54) (&i/o-write . aZ2e53) (&i/o-read . aZ2e52) (&i/o . aZ2e51)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3132 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . aZ304a) (vector-sort . aZ3049) (list-sort . aZ3048)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3133 '(rnrs base) '(6) '() '() '() '((zero? . aZ2f01) (vector? . aZ2f00) (vector-set! . aZ2eff) (vector-ref . aZ2efe) (vector-map . aZ2efd) (vector-length . aZ2efc) (vector-for-each . aZ2efb) (vector-fill! . aZ2efa) (vector->list . aZ2ef9) (vector . aZ2ef8) (values . aZ2ef7) (truncate . aZ2ef6) (tan . aZ2ef5) (symbol? . aZ2ef4) (symbol=? . aZ2ef3) (symbol->string . aZ2ef2) (substring . aZ2ef1) (string? . aZ2ef0) (string>? . aZ2eef) (string>=? . aZ2eee) (string=? . aZ2eed) (string<? . aZ2eec) (string<=? . aZ2eeb) (string-ref . aZ2eea) (string-length . aZ2ee9) (string-for-each . aZ2ee8) (string-copy . aZ2ee7) (string-append . aZ2ee6) (string->symbol . aZ2ee5) (string->number . aZ2ee4) (string->list . aZ2ee3) (string . aZ2ee2) (sqrt . aZ2ee1) (sin . aZ2ee0) (round . aZ2edf) (reverse . aZ2ede) (real? . aZ2edd) (real-valued? . aZ2edc) (real-part . aZ2edb) (rationalize . aZ2eda) (rational? . aZ2ed9) (rational-valued? . aZ2ed8) (procedure? . aZ2ed7) (positive? . aZ2ed6) (pair? . aZ2ed5) (odd? . aZ2ed4) (numerator . aZ2ed3) (number? . aZ2ed2) (number->string . aZ2ed1) (null? . aZ2ed0) (not . aZ2ecf) (negative? . aZ2ece) (nan? . aZ2ecd) (min . aZ2ecc) (max . aZ2ecb) (map . aZ2eca) (make-vector . aZ2ec9) (make-string . aZ2ec8) (make-rectangular . aZ2ec7) (make-polar . aZ2ec6) (magnitude . aZ2ec5) (log . aZ2ec4) (list? . aZ2ec3) (list-tail . aZ2ec2) (list-ref . aZ2ec1) (list->vector . aZ2ec0) (list->string . aZ2ebf) (list . aZ2ebe) (length . aZ2ebd) (lcm . aZ2ebc) (integer? . aZ2ebb) (integer-valued? . aZ2eba) (integer->char . aZ2eb9) (infinite? . aZ2eb8) (inexact? . aZ2eb7) (inexact . aZ2eb6) (imag-part . aZ2eb5) (gcd . aZ2eb4) (for-each . aZ2eb3) (floor . aZ2eb2) (finite? . aZ2eb1) (expt . aZ2eb0) (exp . aZ2eaf) (exact? . aZ2eae) (exact-integer-sqrt . aZ2ead) (exact . aZ2eac) (even? . aZ2eab) (error . aZ2eaa) (eqv? . aZ2ea9) (equal? . aZ2ea8) (eq? . aZ2ea7) (dynamic-wind . aZ2ea6) (div0-and-mod0 . aZ2ea5) (mod0 . aZ2ea4) (div0 . aZ2ea3) (div-and-mod . aZ2ea2) (mod . aZ2ea1) (div . aZ2ea0) (denominator . aZ2e9f) (cos . aZ2e9e) (cons . aZ2e9d) (complex? . aZ2e9c) (char? . aZ2e9b) (char>? . aZ2e9a) (char>=? . aZ2e99) (char=? . aZ2e98) (char<? . aZ2e97) (char<=? . aZ2e96) (char->integer . aZ2e95) (ceiling . aZ2e94) (call-with-values . aZ2e93) (call/cc . aZ2e92) (call-with-current-continuation . aZ2e91) (cddddr . aZ2e90) (cdddar . aZ2e8f) (cddadr . aZ2e8e) (cddaar . aZ2e8d) (cdaddr . aZ2e8c) (cdadar . aZ2e8b) (cdaadr . aZ2e8a) (cdaaar . aZ2e89) (cadddr . aZ2e88) (caddar . aZ2e87) (cadadr . aZ2e86) (cadaar . aZ2e85) (caaddr . aZ2e84) (caadar . aZ2e83) (caaadr . aZ2e82) (caaaar . aZ2e81) (cdddr . aZ2e80) (cddar . aZ2e7f) (cdadr . aZ2e7e) (cdaar . aZ2e7d) (caddr . aZ2e7c) (cadar . aZ2e7b) (caadr . aZ2e7a) (caaar . aZ2e79) (cddr . aZ2e78) (cdar . aZ2e77) (cadr . aZ2e76) (caar . aZ2e75) (cdr . aZ2e74) (car . aZ2e73) (boolean? . aZ2e72) (boolean=? . aZ2e71) (atan . aZ2e70) (assertion-violation . aZ2e6f) (asin . aZ2e6e) (apply . aZ2e6d) (append . aZ2e6c) (angle . aZ2e6b) (acos . aZ2e6a) (abs . aZ2e69) (/ . aZ2e68) (* . aZ2e67) (- . aZ2e66) (+ . aZ2e65) (>= . aZ2e64) (> . aZ2e63) (= . aZ2e62) (<= . aZ2e61) (< . aZ2e60) (unquote-splicing . aZ2e2d) (unquote . aZ2e2c) (_ . aZ2e2b) (else . aZ2e2a) (=> . aZ2e29) (... . aZ2e28) (assert . aZ2e27) (cond . aZ2e22) (let* . aZ2e21) (let*-values . aZ2e20) (let-values . aZ2e1f) (identifier-syntax . aZ2e1e) (quasiquote . aZ2e1b) (syntax-rules . aZ2e1a) (case . aZ2e15) (or . aZ2e11) (and . aZ2e10) (if . aZ2e0f) (let . aZ2e0e) (letrec* . aZ2e0d) (letrec . aZ2e0c) (lambda . aZ2e09) (quote . aZ2e06) (letrec-syntax . aZ2e04) (let-syntax . aZ2e03) (set! . aZ2e02) (begin . aZ2e00) (define-syntax . aZ2dfe) (define . aZ2dfd)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3134 '(rnrs lists) '(6) '() '() '() '((remove . aZ2fd7) (remv . aZ2fd6) (remp . aZ2fd5) (remq . aZ2fd4) (partition . aZ2fd3) (memv . aZ2fd2) (memq . aZ2fd1) (memp . aZ2fd0) (member . aZ2fcf) (exists . aZ2fce) (for-all . aZ2fcd) (fold-right . aZ2fcc) (fold-left . aZ2fcb) (find . aZ2fca) (filter . aZ2fc9) (cons* . aZ2fc8) (assv . aZ2fc7) (assq . aZ2fc6) (assp . aZ2fc5) (assoc . aZ2fc4)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3135 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . aZ3032) (call-with-input-file . aZ3031) (write-char . aZ3030) (write . aZ302f) (with-output-to-file . aZ302e) (with-input-from-file . aZ302d) (read-char . aZ302c) (read . aZ302b) (peek-char . aZ302a) (open-output-file . aZ3029) (open-input-file . aZ3028) (newline . aZ3027) (display . aZ3026) (close-output-port . aZ3025) (close-input-port . aZ3024) (eof-object? . aZ3023) (eof-object . aZ3022) (current-error-port . aZ3021) (current-output-port . aZ3020) (current-input-port . aZ301f) (output-port? . aZ301e) (input-port? . aZ301d) (make-i/o-write-error . aZ2a85) (make-i/o-read-error . aZ2a70) (make-i/o-port-error . aZ2b26) (make-i/o-invalid-position-error . aZ2a9c) (make-i/o-filename-error . aZ2ab7) (make-i/o-file-protection-error . aZ2ad0) (make-i/o-file-is-read-only-error . aZ2ae5) (make-i/o-file-does-not-exist-error . aZ2b0f) (make-i/o-file-already-exists-error . aZ2afa) (make-i/o-error . aZ2a5b) (i/o-write-error? . aZ2a87) (i/o-read-error? . aZ2a72) (i/o-port-error? . aZ2b2a) (i/o-invalid-position-error? . aZ2aa0) (i/o-filename-error? . aZ2abb) (i/o-file-protection-error? . aZ2ad2) (i/o-file-is-read-only-error? . aZ2ae7) (i/o-file-does-not-exist-error? . aZ2b11) (i/o-file-already-exists-error? . aZ2afc) (i/o-error? . aZ2a5d) (i/o-error-position . aZ2aa2) (i/o-error-port . aZ2b2c) (i/o-error-filename . aZ2abd) (&i/o-port . aZ2e5a) (&i/o-file-does-not-exist . aZ2e59) (&i/o-file-already-exists . aZ2e58) (&i/o-file-is-read-only . aZ2e57) (&i/o-file-protection . aZ2e56) (&i/o-filename . aZ2e55) (&i/o-invalid-position . aZ2e54) (&i/o-write . aZ2e53) (&i/o-read . aZ2e52) (&i/o . aZ2e51)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3136 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . aZ2ff3) (utf32->string . aZ2fa8) (utf16->string . aZ2fa7) (utf8->string . aZ2fa6) (uint-list->bytevector . aZ2fa5) (u8-list->bytevector . aZ2fa4) (string->utf8 . aZ2fa3) (string->utf32 . aZ2fa2) (string->utf16 . aZ2fa1) (sint-list->bytevector . aZ2fa0) (native-endianness . aZ2f9f) (bytevector? . aZ2f9e) (bytevector=? . aZ2f9d) (bytevector-uint-set! . aZ2f9c) (bytevector-uint-ref . aZ2f9b) (bytevector-u8-set! . aZ2f9a) (bytevector-u8-ref . aZ2f99) (bytevector-u64-set! . aZ2f98) (bytevector-u64-ref . aZ2f97) (bytevector-u64-native-set! . aZ2f96) (bytevector-u64-native-ref . aZ2f95) (bytevector-u32-set! . aZ2f94) (bytevector-u32-ref . aZ2f93) (bytevector-u32-native-set! . aZ2f92) (bytevector-u32-native-ref . aZ2f91) (bytevector-u16-set! . aZ2f90) (bytevector-u16-ref . aZ2f8f) (bytevector-u16-native-set! . aZ2f8e) (bytevector-u16-native-ref . aZ2f8d) (bytevector-sint-set! . aZ2f8c) (bytevector-sint-ref . aZ2f8b) (bytevector-s8-set! . aZ2f8a) (bytevector-s8-ref . aZ2f89) (bytevector-s64-set! . aZ2f88) (bytevector-s64-ref . aZ2f87) (bytevector-s64-native-set! . aZ2f86) (bytevector-s64-native-ref . aZ2f85) (bytevector-s32-set! . aZ2f84) (bytevector-s32-ref . aZ2f83) (bytevector-s32-native-set! . aZ2f82) (bytevector-s32-native-ref . aZ2f81) (bytevector-s16-set! . aZ2f80) (bytevector-s16-ref . aZ2f7f) (bytevector-s16-native-set! . aZ2f7e) (bytevector-s16-native-ref . aZ2f7d) (bytevector-length . aZ2f7c) (bytevector-ieee-single-ref . aZ2f7b) (bytevector-ieee-single-set! . aZ2f7a) (bytevector-ieee-single-native-set! . aZ2f79) (bytevector-ieee-single-native-ref . aZ2f78) (bytevector-ieee-double-set! . aZ2f77) (bytevector-ieee-double-ref . aZ2f76) (bytevector-ieee-double-native-set! . aZ2f75) (bytevector-ieee-double-native-ref . aZ2f74) (bytevector-fill! . aZ2f73) (bytevector-copy! . aZ2f72) (bytevector-copy . aZ2f71) (bytevector->uint-list . aZ2f70) (bytevector->u8-list . aZ2f6f) (bytevector->sint-list . aZ2f6e) (endianness . aZ2e26)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3137 '(rnrs unicode) '(6) '() '() '() '((string-upcase . aZ307a) (string-titlecase . aZ3079) (string-normalize-nfkd . aZ3078) (string-normalize-nfkc . aZ3077) (string-normalize-nfd . aZ3076) (string-normalize-nfc . aZ3075) (string-foldcase . aZ3074) (string-downcase . aZ3073) (string-ci>? . aZ3072) (string-ci>=? . aZ3071) (string-ci=? . aZ3070) (string-ci<? . aZ306f) (string-ci<=? . aZ306e) (char-whitespace? . aZ306d) (char-upper-case? . aZ306c) (char-title-case? . aZ306b) (char-numeric? . aZ306a) (char-lower-case? . aZ3069) (char-general-category . aZ3068) (char-upcase . aZ3067) (char-titlecase . aZ3066) (char-foldcase . aZ3065) (char-downcase . aZ3064) (char-ci>? . aZ3063) (char-ci>=? . aZ3062) (char-ci=? . aZ3061) (char-ci<? . aZ3060) (char-ci<=? . aZ305f) (char-alphabetic? . aZ305e)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3138 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . aZ2fbd) (raise-continuable . aZ2fbc) (raise . aZ2fbb) (guard . aZ2e32) (else . aZ2e2a) (=> . aZ2e29)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3139 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . aZ2f12) (bitwise-reverse-bit-field . aZ2f11) (bitwise-length . aZ2f10) (bitwise-if . aZ2f0f) (bitwise-first-bit-set . aZ2f0e) (bitwise-copy-bit-field . aZ2f0d) (bitwise-copy-bit . aZ2f0c) (bitwise-bit-set? . aZ2f0b) (bitwise-bit-field . aZ2f0a) (bitwise-bit-count . aZ2f09) (bitwise-xor . aZ2f08) (bitwise-ior . aZ2f07) (bitwise-and . aZ2f06) (bitwise-not . aZ2f05) (bitwise-arithmetic-shift-right . aZ2f04) (bitwise-arithmetic-shift-left . aZ2f03) (bitwise-arithmetic-shift . aZ2f02)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ313a '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . aZ2f3f) (fxxor . aZ2f3e) (fxrotate-bit-field . aZ2f3d) (fxreverse-bit-field . aZ2f3c) (fxpositive? . aZ2f3b) (fxodd? . aZ2f3a) (fxnot . aZ2f39) (fxnegative? . aZ2f38) (fxmod0 . aZ2f37) (fxmod . aZ2f36) (fxmin . aZ2f35) (fxmax . aZ2f34) (fxlength . aZ2f33) (fxior . aZ2f32) (fxif . aZ2f31) (fxfirst-bit-set . aZ2f30) (fxeven? . aZ2f2f) (fxdiv0-and-mod0 . aZ2f2e) (fxdiv0 . aZ2f2d) (fxdiv-and-mod . aZ2f2c) (fxdiv . aZ2f2b) (fxcopy-bit-field . aZ2f2a) (fxcopy-bit . aZ2f29) (fxbit-set? . aZ2f28) (fxbit-field . aZ2f27) (fxbit-count . aZ2f26) (fxarithmetic-shift-right . aZ2f25) (fxarithmetic-shift-left . aZ2f24) (fxarithmetic-shift . aZ2f23) (fxand . aZ2f22) (fx>? . aZ2f21) (fx>=? . aZ2f20) (fx=? . aZ2f1f) (fx<? . aZ2f1e) (fx<=? . aZ2f1d) (fx-/carry . aZ2f1c) (fx- . aZ2f1b) (fx+/carry . aZ2f1a) (fx+ . aZ2f19) (fx*/carry . aZ2f18) (fx* . aZ2f17) (greatest-fixnum . aZ2f16) (least-fixnum . aZ2f15) (fixnum-width . aZ2f14) (fixnum? . aZ2f13)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ313b '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . aZ2b86) (no-infinities-violation? . aZ2b71) (make-no-nans-violation . aZ2b84) (make-no-infinities-violation . aZ2b6f) (real->flonum . aZ2f6d) (flzero? . aZ2f6c) (fltruncate . aZ2f6b) (fltan . aZ2f6a) (flsqrt . aZ2f69) (flsin . aZ2f68) (flround . aZ2f67) (flpositive? . aZ2f66) (flonum? . aZ2f65) (flodd? . aZ2f64) (flnumerator . aZ2f63) (flnegative? . aZ2f62) (flnan? . aZ2f61) (flmod0 . aZ2f60) (flmod . aZ2f5f) (flmin . aZ2f5e) (flmax . aZ2f5d) (fllog . aZ2f5c) (flinteger? . aZ2f5b) (flinfinite? . aZ2f5a) (flfloor . aZ2f59) (flfinite? . aZ2f58) (flexpt . aZ2f57) (flexp . aZ2f56) (fleven? . aZ2f55) (fldiv0-and-mod0 . aZ2f54) (fldiv0 . aZ2f53) (fldiv-and-mod . aZ2f52) (fldiv . aZ2f51) (fldenominator . aZ2f50) (flcos . aZ2f4f) (flceiling . aZ2f4e) (flatan . aZ2f4d) (flasin . aZ2f4c) (flacos . aZ2f4b) (flabs . aZ2f4a) (fl>? . aZ2f49) (fl>=? . aZ2f48) (fl=? . aZ2f47) (fl<? . aZ2f46) (fl<=? . aZ2f45) (fl/ . aZ2f44) (fl- . aZ2f43) (fl+ . aZ2f42) (fl* . aZ2f41) (fixnum->flonum . aZ2f40) (&no-nans . aZ2e5e) (&no-infinities . aZ2e5d)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ313c '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . aZ3047) (string-ci-hash . aZ3046) (string-hash . aZ3045) (equal-hash . aZ3044) (hashtable-equivalence-function . aZ3043) (make-hashtable . aZ3042) (hashtable-hash-function . aZ3041) (make-eqv-hashtable . aZ3040) (make-eq-hashtable . aZ303f) (hashtable? . aZ303e) (hashtable-update! . aZ303d) (hashtable-size . aZ303c) (hashtable-set! . aZ303b) (hashtable-ref . aZ303a) (hashtable-mutable? . aZ3039) (hashtable-keys . aZ3038) (hashtable-entries . aZ3037) (hashtable-delete! . aZ3036) (hashtable-copy . aZ3035) (hashtable-contains? . aZ3034) (hashtable-clear! . aZ3033)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ313d '(rnrs io ports) '(6) '() '() '() '((eof-object? . aZ3023) (eof-object . aZ3022) (current-error-port . aZ3021) (current-output-port . aZ3020) (current-input-port . aZ301f) (output-port? . aZ301e) (input-port? . aZ301d) (utf-8-codec . aZ301c) (utf-16-codec . aZ301b) (transcoder-error-handling-mode . aZ301a) (transcoder-eol-style . aZ3019) (transcoder-codec . aZ3018) (transcoded-port . aZ3017) (textual-port? . aZ3016) (string->bytevector . aZ3015) (standard-output-port . aZ3014) (standard-input-port . aZ3013) (standard-error-port . aZ3012) (set-port-position! . aZ3011) (put-u8 . aZ3010) (put-string . aZ300f) (put-datum . aZ300e) (put-char . aZ300d) (put-bytevector . aZ300c) (port? . aZ300b) (port-transcoder . aZ300a) (port-position . aZ3009) (port-has-set-port-position!? . aZ3008) (port-has-port-position? . aZ3007) (port-eof? . aZ3006) (output-port-buffer-mode . aZ3005) (open-string-output-port . aZ3004) (open-string-input-port . aZ3003) (open-file-output-port . aZ3002) (open-file-input/output-port . aZ3001) (open-file-input-port . aZ3000) (open-bytevector-output-port . aZ2fff) (open-bytevector-input-port . aZ2ffe) (native-transcoder . aZ2ffd) (native-eol-style . aZ2ffc) (make-transcoder . aZ2ffb) (latin-1-codec . aZ2ffa) (make-i/o-write-error . aZ2a85) (make-i/o-read-error . aZ2a70) (make-i/o-port-error . aZ2b26) (make-i/o-invalid-position-error . aZ2a9c) (make-i/o-filename-error . aZ2ab7) (make-i/o-file-protection-error . aZ2ad0) (make-i/o-file-is-read-only-error . aZ2ae5) (make-i/o-file-does-not-exist-error . aZ2b0f) (make-i/o-file-already-exists-error . aZ2afa) (make-i/o-error . aZ2a5b) (make-i/o-encoding-error . aZ2b56) (make-i/o-decoding-error . aZ2b3f) (make-custom-textual-output-port . aZ2ff9) (make-custom-textual-input/output-port . aZ2ff8) (make-custom-textual-input-port . aZ2ff7) (make-custom-binary-output-port . aZ2ff6) (make-custom-binary-input/output-port . aZ2ff5) (make-custom-binary-input-port . aZ2ff4) (lookahead-u8 . aZ2ff2) (lookahead-char . aZ2ff1) (i/o-write-error? . aZ2a87) (i/o-read-error? . aZ2a72) (i/o-port-error? . aZ2b2a) (i/o-invalid-position-error? . aZ2aa0) (i/o-filename-error? . aZ2abb) (i/o-file-protection-error? . aZ2ad2) (i/o-file-is-read-only-error? . aZ2ae7) (i/o-file-does-not-exist-error? . aZ2b11) (i/o-file-already-exists-error? . aZ2afc) (i/o-error? . aZ2a5d) (i/o-error-position . aZ2aa2) (i/o-error-port . aZ2b2c) (i/o-error-filename . aZ2abd) (i/o-encoding-error? . aZ2b5a) (i/o-encoding-error-char . aZ2b5c) (i/o-decoding-error? . aZ2b41) (get-u8 . aZ2ff0) (get-string-n! . aZ2fef) (get-string-n . aZ2fee) (get-string-all . aZ2fed) (get-line . aZ2fec) (get-datum . aZ2feb) (get-char . aZ2fea) (get-bytevector-some . aZ2fe9) (get-bytevector-n! . aZ2fe8) (get-bytevector-n . aZ2fe7) (get-bytevector-all . aZ2fe6) (flush-output-port . aZ2fe5) (close-port . aZ2fe4) (call-with-string-output-port . aZ2fc3) (call-with-port . aZ2fc2) (call-with-bytevector-output-port . aZ2fc1) (bytevector->string . aZ2fc0) (buffer-mode? . aZ2fbf) (binary-port? . aZ2fbe) (&i/o-encoding . aZ2e5c) (&i/o-decoding . aZ2e5b) (&i/o-port . aZ2e5a) (&i/o-file-does-not-exist . aZ2e59) (&i/o-file-already-exists . aZ2e58) (&i/o-file-is-read-only . aZ2e57) (&i/o-file-protection . aZ2e56) (&i/o-filename . aZ2e55) (&i/o-invalid-position . aZ2e54) (&i/o-write . aZ2e53) (&i/o-read . aZ2e52) (&i/o . aZ2e51) (error-handling-mode . aZ2e36) (file-options . aZ2e35) (buffer-mode . aZ2e34) (eol-style . aZ2e33)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ313e '(rnrs enums) '(6) '() '() '() '((make-enumeration . aZ2fba) (enum-set=? . aZ2fb9) (enum-set-universe . aZ2fb8) (enum-set-union . aZ2fb7) (enum-set-subset? . aZ2fb6) (enum-set-projection . aZ2fb5) (enum-set-member? . aZ2fb4) (enum-set-intersection . aZ2fb3) (enum-set-indexer . aZ2fb2) (enum-set-difference . aZ2fb1) (enum-set-constructor . aZ2fb0) (enum-set-complement . aZ2faf) (enum-set->list . aZ2fae) (define-enumeration . aZ2e41)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ313f '(rnrs conditions) '(6) '() '() '() '((who-condition? . aZ29d1) (warning? . aZ2949) (violation? . aZ2988) (undefined-violation? . aZ2a48) (syntax-violation? . aZ2a2f) (syntax-violation-subform . aZ2a33) (syntax-violation-form . aZ2a31) (syntax-violation . aZe5b) (simple-conditions . aZ2fad) (serious-condition? . aZ295e) (non-continuable-violation? . aZ29e8) (message-condition? . aZ2932) (make-who-condition . aZ29cd) (make-warning . aZ2947) (make-violation . aZ2986) (make-undefined-violation . aZ2a46) (make-syntax-violation . aZ2a29) (make-serious-condition . aZ295c) (make-non-continuable-violation . aZ29e6) (make-message-condition . aZ292e) (make-lexical-violation . aZ2a10) (make-irritants-condition . aZ29b2) (make-implementation-restriction-violation . aZ29fb) (make-error . aZ2971) (make-assertion-violation . aZ299b) (lexical-violation? . aZ2a12) (irritants-condition? . aZ29b6) (implementation-restriction-violation? . aZ29fd) (error? . aZ2973) (condition-who . aZ29d3) (condition-predicate . aZ2fac) (condition-message . aZ2934) (condition-irritants . aZ29b8) (condition-accessor . aZ2fab) (condition . aZ2faa) (assertion-violation? . aZ299d) (condition? . aZ2fa9) (&undefined . aZ2e50) (&syntax . aZ2e4f) (&lexical . aZ2e4e) (&implementation-restriction . aZ2e4d) (&non-continuable . aZ2e4c) (&who . aZ2e4b) (&irritants . aZ2e4a) (&assertion . aZ2e49) (&violation . aZ2e48) (&error . aZ2e47) (&serious . aZ2e46) (&warning . aZ2e45) (&message . aZ2e44) (&condition . aZ2e43) (define-condition-type . aZ2e42)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3140 '(rnrs records inspection) '(6) '() '() '() '((record? . aZ3056) (record-type-uid . aZ3055) (record-type-sealed? . aZ3054) (record-type-parent . aZ3053) (record-type-opaque? . aZ3052) (record-type-name . aZ3051) (record-type-generative? . aZ3050) (record-type-field-names . aZ304f) (record-rtd . aZ304e) (record-field-mutable? . aZ304d)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3141 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . aZ305d) (record-predicate . aZ305c) (record-mutator . aZ305b) (record-constructor . aZ305a) (record-accessor . aZ3059) (make-record-type-descriptor . aZ3058) (make-record-constructor-descriptor . aZ3057)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3142 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . aZ2e40) (parent-rtd . aZ2e3f) (nongenerative . aZ2e3e) (opaque . aZ2e3d) (sealed . aZ2e3c) (protocol . aZ2e3b) (parent . aZ2e3a) (immutable . aZ2e39) (mutable . aZ2e38) (fields . aZ2e37) (record-constructor-descriptor . aZ2e17) (record-type-descriptor . aZ2e16)) '() values values '#f '#f '#t '#f) (aZ989@aZ7d5@install-library 'aZ3143 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . aZ2b8a) (&no-nans-rtd . aZ2b88) (&no-infinities-rcd . aZ2b75) (&no-infinities-rtd . aZ2b73) (&i/o-encoding-rcd . aZ2b60) (&i/o-encoding-rtd . aZ2b5e) (&i/o-decoding-rcd . aZ2b45) (&i/o-decoding-rtd . aZ2b43) (&i/o-port-rcd . aZ2b30) (&i/o-port-rtd . aZ2b2e) (&i/o-file-does-not-exist-rcd . aZ2b15) (&i/o-file-does-not-exist-rtd . aZ2b13) (&i/o-file-already-exists-rcd . aZ2b00) (&i/o-file-already-exists-rtd . aZ2afe) (&i/o-file-is-read-only-rcd . aZ2aeb) (&i/o-file-is-read-only-rtd . aZ2ae9) (&i/o-file-protection-rcd . aZ2ad6) (&i/o-file-protection-rtd . aZ2ad4) (&i/o-filename-rcd . aZ2ac1) (&i/o-filename-rtd . aZ2abf) (&i/o-invalid-position-rcd . aZ2aa6) (&i/o-invalid-position-rtd . aZ2aa4) (&i/o-write-rcd . aZ2a8b) (&i/o-write-rtd . aZ2a89) (&i/o-read-rcd . aZ2a76) (&i/o-read-rtd . aZ2a74) (&i/o-rcd . aZ2a61) (&i/o-rtd . aZ2a5f) (&undefined-rcd . aZ2a4c) (&undefined-rtd . aZ2a4a) (&syntax-rcd . aZ2a37) (&syntax-rtd . aZ2a35) (&lexical-rcd . aZ2a16) (&lexical-rtd . aZ2a14) (&implementation-restriction-rcd . aZ2a01) (&implementation-restriction-rtd . aZ29ff) (&non-continuable-rcd . aZ29ec) (&non-continuable-rtd . aZ29ea) (&who-rcd . aZ29d7) (&who-rtd . aZ29d5) (&irritants-rcd . aZ29bc) (&irritants-rtd . aZ29ba) (&assertion-rcd . aZ29a1) (&assertion-rtd . aZ299f) (&violation-rcd . aZ298c) (&violation-rtd . aZ298a) (&error-rcd . aZ2977) (&error-rtd . aZ2975) (&serious-rcd . aZ2962) (&serious-rtd . aZ2960) (&warning-rcd . aZ294d) (&warning-rtd . aZ294b) (&message-rcd . aZ2938) (&message-rtd . aZ2936) (&condition-rcd . aZ28d9) (&condition-rtd . aZ28d7) (syntax-error . aZe57) (syntax-dispatch . aZd7b) (pretty-print . aZ3123) (eval-core . aZ3122) (set-symbol-value! . aZ3121) (symbol-value . aZ3120) (gensym . aZ311f) (void . aZ311e) (load . aZ2c9b) (interaction-environment . aZe69) (char-ready? . aZ311d) (regexp? . aZ311c) (read-line . aZ311b) (gensym-prefix-set! . aZ311a) (ungensym . aZ3119) (alist->eq-hash-table . aZ3118) (assoc-ref . aZ3117) (print . aZ3116) (format . aZ3115) (host-os . aZ3114) (library-path . aZ7b4) (standard-library-path . aZ3113) (file-newer? . aZ3112) (stat-mtime . aZ3111) (write-to-file . aZ3110) (file->list . aZ310f) (file->string . aZ310e) (digit->integer . aZ310d) (call-with-string-input-port . aZ310c) (call-with-string-io . aZ310b) (string-split . aZ310a) (bytevector-for-each . aZ3109) (string->regexp . aZ3108) (rxmatch . aZ3107) (regexp-replace-all . aZ3106) (hashtable-for-each . aZ3105) (mosh-cache-dir . aZ59e) (call-process . aZ3104) (local-tz-offset . aZ3103) (microseconds . aZ3102) (directory-list . aZ3101) (set-current-directory! . aZ3100) (expand-path . aZ30ff) (current-directory . aZ30fe) (%spawn . aZ30fd) (%waitpid . aZ30fc) (simple-struct-name . aZ30fb) (simple-struct-set! . aZ30fa) (simple-struct-ref . aZ30f9) (make-simple-struct . aZ30f8) (simple-struct? . aZ30f7) (pointer-ref-c-int64 . aZ30f6) (pointer-ref-c-int32 . aZ30f5) (pointer-ref-c-int16 . aZ30f4) (pointer-ref-c-int8 . aZ30f3) (pointer-ref-c-uint64 . aZ30f2) (pointer-ref-c-uint32 . aZ30f1) (pointer-ref-c-uint16 . aZ30f0) (pointer-ref-c-uint8 . aZ30ef) (pointer-set-c-uint64! . aZ30ee) (pointer-set-c-uint32! . aZ30ed) (pointer-set-c-uint16! . aZ30ec) (pointer-set-c-uint8! . aZ30eb) (pointer-set-c-int64! . aZ30ea) (pointer-set-c-int32! . aZ30e9) (pointer-set-c-int16! . aZ30e8) (pointer-set-c-int8! . aZ30e7) (pointer-set-c-pointer! . aZ30e6) (pointer-set-c-double! . aZ30e5) (pointer-set-c-float! . aZ30e4) (pointer-set-c-long-long! . aZ30e3) (pointer-set-c-long! . aZ30e2) (pointer-set-c-int! . aZ30e1) (pointer-set-c-short! . aZ30e0) (pointer-set-c-char! . aZ30df) (pointer-ref-c-pointer . aZ30de) (pointer-ref-c-double . aZ30dd) (pointer-ref-c-float . aZ30dc) (pointer-ref-c-unsigned-long-long . aZ30db) (pointer-ref-c-signed-long-long . aZ30da) (pointer-ref-c-unsigned-long . aZ30d9) (pointer-ref-c-signed-long . aZ30d8) (pointer-ref-c-unsigned-int . aZ30d7) (pointer-ref-c-signed-int . aZ30d6) (pointer-ref-c-unsigned-short . aZ30d5) (pointer-ref-c-signed-short . aZ30d4) (pointer-ref-c-unsigned-char . aZ30d3) (pointer-ref-c-signed-char . aZ30d2) (pointer->integer . aZ30d1) (integer->pointer . aZ30d0) (pointer? . aZ30cf) (shared-errno . aZ30ce) (%ffi-free-c-callback-trampoline . aZ30cd) (%ffi-make-c-callback-trampoline . aZ30cc) (%ffi-free . aZ30cb) (%ffi-malloc . aZ30ca) (%ffi-supported? . aZ30c9) (%ffi-pointer->string . aZ30c8) (%ffi-call . aZ30c7) (%ffi-lookup . aZ30c6) (%ffi-open . aZ30c5) (null-terminated-utf8->string . aZ30c4) (null-terminated-bytevector->string . aZ30c3) (%fork . aZ30c2) (%pipe . aZ30c1) (p . aZ30c0) (open-output-string . aZ30bf) (get-output-string . aZ30be) (file-stat-ctime . aZ30bd) (file-stat-atime . aZ30bc) (file-stat-mtime . aZ30bb) (file-size-in-bytes . aZ30ba) (file-writable? . aZ30b9) (file-executable? . aZ30b8) (file-readable? . aZ30b7) (file-regular? . aZ30b6) (file-symbolic-link? . aZ30b5) (file-directory? . aZ30b4) (create-symbolic-link . aZ30b3) (rename-file . aZ30b2) (delete-directory . aZ30b1) (create-directory . aZ30b0) (create-mosh-cache-dir . aZ30af) (get-environment-variables . aZ30ae) (current-exception-handler . aZ30ad) (get-environment-variable . aZ30ac) (join-wraps . aZ30ab) (id->real-label . aZ30aa) (same-marks? . aZ30a9) (same-marks*? . aZ30a8) (get-timeofday . aZ30a7) (get-command-line . aZ30a6) (sys-display . aZ30a5) (whereis . aZ30a4) (register . aZ30a3) (vm-join! . aZ30a2) (vm-set-value! . aZ30a1) (vm? . aZ30a0) (main-vm? . aZ309f) (vm-eval . aZ309e) (vm-self . aZ309d) (vm-start! . aZ309c) (make-vm . aZ309b) (mutex-try-lock! . aZ309a) (mutex-unlock! . aZ3099) (mutex-lock! . aZ3098) (mutex? . aZ3097) (make-mutex . aZ3096) (condition-variable-notify-all! . aZ3095) (condition-variable-notify! . aZ3094) (condition-variable-wait! . aZ3093) (make-condition-variable . aZ3092) (mosh-executable-path . aZ3091) (make-file-options . aZ3090) (source-info . aZ308f) (make-compiler-instruction . aZ308e) (make-instruction . aZ308d) (set-source-info! . aZ308c) (bignum? . aZ308b) (fast-equal? . aZ308a) (fasl-read . aZ3089) (fasl-write . aZ3088) (time-usage . aZ3087) (os-constant . aZ3086) (disasm . aZ3085) (make-parameter . aZ59c) (socket-port . aZ3084) (socket-shutdown . aZ3083) (socket-close . aZ3082) (socket-send . aZ3081) (socket-recv! . aZ3080) (socket-recv . aZ307f) (make-server-socket . aZ307e) (make-client-socket . aZ307d) (socket-accept . aZ307c) (socket? . aZ307b) (string-upcase . aZ307a) (string-titlecase . aZ3079) (string-normalize-nfkd . aZ3078) (string-normalize-nfkc . aZ3077) (string-normalize-nfd . aZ3076) (string-normalize-nfc . aZ3075) (string-foldcase . aZ3074) (string-downcase . aZ3073) (string-ci>? . aZ3072) (string-ci>=? . aZ3071) (string-ci=? . aZ3070) (string-ci<? . aZ306f) (string-ci<=? . aZ306e) (char-whitespace? . aZ306d) (char-upper-case? . aZ306c) (char-title-case? . aZ306b) (char-numeric? . aZ306a) (char-lower-case? . aZ3069) (char-general-category . aZ3068) (char-upcase . aZ3067) (char-titlecase . aZ3066) (char-foldcase . aZ3065) (char-downcase . aZ3064) (char-ci>? . aZ3063) (char-ci>=? . aZ3062) (char-ci=? . aZ3061) (char-ci<? . aZ3060) (char-ci<=? . aZ305f) (char-alphabetic? . aZ305e) (make-variable-transformer . aZba6) (identifier? . aZe5d) (generate-temporaries . aZe49) (free-identifier=? . aZe4b) (syntax->datum . aZe61) (datum->syntax . aZe5f) (bound-identifier=? . aZe4d) (record-type-descriptor? . aZ305d) (record-predicate . aZ305c) (record-mutator . aZ305b) (record-constructor . aZ305a) (record-accessor . aZ3059) (make-record-type-descriptor . aZ3058) (make-record-constructor-descriptor . aZ3057) (record? . aZ3056) (record-type-uid . aZ3055) (record-type-sealed? . aZ3054) (record-type-parent . aZ3053) (record-type-opaque? . aZ3052) (record-type-name . aZ3051) (record-type-generative? . aZ3050) (record-type-field-names . aZ304f) (record-rtd . aZ304e) (record-field-mutable? . aZ304d) (delete-file . aZ304c) (file-exists? . aZ304b) (vector-sort! . aZ304a) (vector-sort . aZ3049) (list-sort . aZ3048) (symbol-hash . aZ3047) (string-ci-hash . aZ3046) (string-hash . aZ3045) (equal-hash . aZ3044) (hashtable-equivalence-function . aZ3043) (make-hashtable . aZ3042) (hashtable-hash-function . aZ3041) (make-eqv-hashtable . aZ3040) (make-eq-hashtable . aZ303f) (hashtable? . aZ303e) (hashtable-update! . aZ303d) (hashtable-size . aZ303c) (hashtable-set! . aZ303b) (hashtable-ref . aZ303a) (hashtable-mutable? . aZ3039) (hashtable-keys . aZ3038) (hashtable-entries . aZ3037) (hashtable-delete! . aZ3036) (hashtable-copy . aZ3035) (hashtable-contains? . aZ3034) (hashtable-clear! . aZ3033) (call-with-output-file . aZ3032) (call-with-input-file . aZ3031) (write-char . aZ3030) (write . aZ302f) (with-output-to-file . aZ302e) (with-input-from-file . aZ302d) (read-char . aZ302c) (read . aZ302b) (peek-char . aZ302a) (open-output-file . aZ3029) (open-input-file . aZ3028) (newline . aZ3027) (display . aZ3026) (close-output-port . aZ3025) (close-input-port . aZ3024) (eof-object? . aZ3023) (eof-object . aZ3022) (current-error-port . aZ3021) (current-output-port . aZ3020) (current-input-port . aZ301f) (output-port? . aZ301e) (input-port? . aZ301d) (utf-8-codec . aZ301c) (utf-16-codec . aZ301b) (transcoder-error-handling-mode . aZ301a) (transcoder-eol-style . aZ3019) (transcoder-codec . aZ3018) (transcoded-port . aZ3017) (textual-port? . aZ3016) (string->bytevector . aZ3015) (standard-output-port . aZ3014) (standard-input-port . aZ3013) (standard-error-port . aZ3012) (set-port-position! . aZ3011) (put-u8 . aZ3010) (put-string . aZ300f) (put-datum . aZ300e) (put-char . aZ300d) (put-bytevector . aZ300c) (port? . aZ300b) (port-transcoder . aZ300a) (port-position . aZ3009) (port-has-set-port-position!? . aZ3008) (port-has-port-position? . aZ3007) (port-eof? . aZ3006) (output-port-buffer-mode . aZ3005) (open-string-output-port . aZ3004) (open-string-input-port . aZ3003) (open-file-output-port . aZ3002) (open-file-input/output-port . aZ3001) (open-file-input-port . aZ3000) (open-bytevector-output-port . aZ2fff) (open-bytevector-input-port . aZ2ffe) (native-transcoder . aZ2ffd) (native-eol-style . aZ2ffc) (make-transcoder . aZ2ffb) (latin-1-codec . aZ2ffa) (make-i/o-write-error . aZ2a85) (make-i/o-read-error . aZ2a70) (make-i/o-port-error . aZ2b26) (make-i/o-invalid-position-error . aZ2a9c) (make-i/o-filename-error . aZ2ab7) (make-i/o-file-protection-error . aZ2ad0) (make-i/o-file-is-read-only-error . aZ2ae5) (make-i/o-file-does-not-exist-error . aZ2b0f) (make-i/o-file-already-exists-error . aZ2afa) (make-i/o-error . aZ2a5b) (make-i/o-encoding-error . aZ2b56) (make-i/o-decoding-error . aZ2b3f) (make-custom-textual-output-port . aZ2ff9) (make-custom-textual-input/output-port . aZ2ff8) (make-custom-textual-input-port . aZ2ff7) (make-custom-binary-output-port . aZ2ff6) (make-custom-binary-input/output-port . aZ2ff5) (make-custom-binary-input-port . aZ2ff4) (make-bytevector . aZ2ff3) (lookahead-u8 . aZ2ff2) (lookahead-char . aZ2ff1) (i/o-write-error? . aZ2a87) (i/o-read-error? . aZ2a72) (i/o-port-error? . aZ2b2a) (i/o-invalid-position-error? . aZ2aa0) (i/o-filename-error? . aZ2abb) (i/o-file-protection-error? . aZ2ad2) (i/o-file-is-read-only-error? . aZ2ae7) (i/o-file-does-not-exist-error? . aZ2b11) (i/o-file-already-exists-error? . aZ2afc) (i/o-error? . aZ2a5d) (i/o-error-position . aZ2aa2) (i/o-error-port . aZ2b2c) (i/o-error-filename . aZ2abd) (i/o-encoding-error? . aZ2b5a) (i/o-encoding-error-char . aZ2b5c) (i/o-decoding-error? . aZ2b41) (get-u8 . aZ2ff0) (get-string-n! . aZ2fef) (get-string-n . aZ2fee) (get-string-all . aZ2fed) (get-line . aZ2fec) (get-datum . aZ2feb) (get-char . aZ2fea) (get-bytevector-some . aZ2fe9) (get-bytevector-n! . aZ2fe8) (get-bytevector-n . aZ2fe7) (get-bytevector-all . aZ2fe6) (flush-output-port . aZ2fe5) (close-port . aZ2fe4) (scheme-report-environment . aZe37) (quotient . aZ2fe3) (null-environment . aZe35) (remainder . aZ2fe2) (modulo . aZ2fe1) (inexact->exact . aZ2fe0) (force . aZ2fdf) (exact->inexact . aZ2fde) (make-promise . aZ2fdd) (exit . aZ2fdc) (command-line . aZ2c95) (string-fill! . aZ2fdb) (string-set! . aZ2fda) (set-cdr! . aZ2fd9) (set-car! . aZ2fd8) (remove . aZ2fd7) (remv . aZ2fd6) (remp . aZ2fd5) (remq . aZ2fd4) (partition . aZ2fd3) (memv . aZ2fd2) (memq . aZ2fd1) (memp . aZ2fd0) (member . aZ2fcf) (exists . aZ2fce) (for-all . aZ2fcd) (fold-right . aZ2fcc) (fold-left . aZ2fcb) (find . aZ2fca) (filter . aZ2fc9) (cons* . aZ2fc8) (assv . aZ2fc7) (assq . aZ2fc6) (assp . aZ2fc5) (assoc . aZ2fc4) (call-with-string-output-port . aZ2fc3) (call-with-port . aZ2fc2) (call-with-bytevector-output-port . aZ2fc1) (bytevector->string . aZ2fc0) (buffer-mode? . aZ2fbf) (binary-port? . aZ2fbe) (with-exception-handler . aZ2fbd) (raise-continuable . aZ2fbc) (raise . aZ2fbb) (eval . aZe3b) (environment . aZe33) (make-enumeration . aZ2fba) (enum-set=? . aZ2fb9) (enum-set-universe . aZ2fb8) (enum-set-union . aZ2fb7) (enum-set-subset? . aZ2fb6) (enum-set-projection . aZ2fb5) (enum-set-member? . aZ2fb4) (enum-set-intersection . aZ2fb3) (enum-set-indexer . aZ2fb2) (enum-set-difference . aZ2fb1) (enum-set-constructor . aZ2fb0) (enum-set-complement . aZ2faf) (enum-set->list . aZ2fae) (who-condition? . aZ29d1) (warning? . aZ2949) (violation? . aZ2988) (undefined-violation? . aZ2a48) (syntax-violation? . aZ2a2f) (syntax-violation-subform . aZ2a33) (syntax-violation-form . aZ2a31) (syntax-violation . aZe5b) (simple-conditions . aZ2fad) (serious-condition? . aZ295e) (non-continuable-violation? . aZ29e8) (message-condition? . aZ2932) (make-who-condition . aZ29cd) (make-warning . aZ2947) (make-violation . aZ2986) (make-undefined-violation . aZ2a46) (make-syntax-violation . aZ2a29) (make-serious-condition . aZ295c) (make-non-continuable-violation . aZ29e6) (make-message-condition . aZ292e) (make-lexical-violation . aZ2a10) (make-irritants-condition . aZ29b2) (make-implementation-restriction-violation . aZ29fb) (make-error . aZ2971) (make-assertion-violation . aZ299b) (lexical-violation? . aZ2a12) (irritants-condition? . aZ29b6) (implementation-restriction-violation? . aZ29fd) (error? . aZ2973) (condition-who . aZ29d3) (condition-predicate . aZ2fac) (condition-message . aZ2934) (condition-irritants . aZ29b8) (condition-accessor . aZ2fab) (condition . aZ2faa) (assertion-violation? . aZ299d) (condition? . aZ2fa9) (utf32->string . aZ2fa8) (utf16->string . aZ2fa7) (utf8->string . aZ2fa6) (uint-list->bytevector . aZ2fa5) (u8-list->bytevector . aZ2fa4) (string->utf8 . aZ2fa3) (string->utf32 . aZ2fa2) (string->utf16 . aZ2fa1) (sint-list->bytevector . aZ2fa0) (native-endianness . aZ2f9f) (bytevector? . aZ2f9e) (bytevector=? . aZ2f9d) (bytevector-uint-set! . aZ2f9c) (bytevector-uint-ref . aZ2f9b) (bytevector-u8-set! . aZ2f9a) (bytevector-u8-ref . aZ2f99) (bytevector-u64-set! . aZ2f98) (bytevector-u64-ref . aZ2f97) (bytevector-u64-native-set! . aZ2f96) (bytevector-u64-native-ref . aZ2f95) (bytevector-u32-set! . aZ2f94) (bytevector-u32-ref . aZ2f93) (bytevector-u32-native-set! . aZ2f92) (bytevector-u32-native-ref . aZ2f91) (bytevector-u16-set! . aZ2f90) (bytevector-u16-ref . aZ2f8f) (bytevector-u16-native-set! . aZ2f8e) (bytevector-u16-native-ref . aZ2f8d) (bytevector-sint-set! . aZ2f8c) (bytevector-sint-ref . aZ2f8b) (bytevector-s8-set! . aZ2f8a) (bytevector-s8-ref . aZ2f89) (bytevector-s64-set! . aZ2f88) (bytevector-s64-ref . aZ2f87) (bytevector-s64-native-set! . aZ2f86) (bytevector-s64-native-ref . aZ2f85) (bytevector-s32-set! . aZ2f84) (bytevector-s32-ref . aZ2f83) (bytevector-s32-native-set! . aZ2f82) (bytevector-s32-native-ref . aZ2f81) (bytevector-s16-set! . aZ2f80) (bytevector-s16-ref . aZ2f7f) (bytevector-s16-native-set! . aZ2f7e) (bytevector-s16-native-ref . aZ2f7d) (bytevector-length . aZ2f7c) (bytevector-ieee-single-ref . aZ2f7b) (bytevector-ieee-single-set! . aZ2f7a) (bytevector-ieee-single-native-set! . aZ2f79) (bytevector-ieee-single-native-ref . aZ2f78) (bytevector-ieee-double-set! . aZ2f77) (bytevector-ieee-double-ref . aZ2f76) (bytevector-ieee-double-native-set! . aZ2f75) (bytevector-ieee-double-native-ref . aZ2f74) (bytevector-fill! . aZ2f73) (bytevector-copy! . aZ2f72) (bytevector-copy . aZ2f71) (bytevector->uint-list . aZ2f70) (bytevector->u8-list . aZ2f6f) (bytevector->sint-list . aZ2f6e) (no-nans-violation? . aZ2b86) (no-infinities-violation? . aZ2b71) (make-no-nans-violation . aZ2b84) (make-no-infinities-violation . aZ2b6f) (real->flonum . aZ2f6d) (flzero? . aZ2f6c) (fltruncate . aZ2f6b) (fltan . aZ2f6a) (flsqrt . aZ2f69) (flsin . aZ2f68) (flround . aZ2f67) (flpositive? . aZ2f66) (flonum? . aZ2f65) (flodd? . aZ2f64) (flnumerator . aZ2f63) (flnegative? . aZ2f62) (flnan? . aZ2f61) (flmod0 . aZ2f60) (flmod . aZ2f5f) (flmin . aZ2f5e) (flmax . aZ2f5d) (fllog . aZ2f5c) (flinteger? . aZ2f5b) (flinfinite? . aZ2f5a) (flfloor . aZ2f59) (flfinite? . aZ2f58) (flexpt . aZ2f57) (flexp . aZ2f56) (fleven? . aZ2f55) (fldiv0-and-mod0 . aZ2f54) (fldiv0 . aZ2f53) (fldiv-and-mod . aZ2f52) (fldiv . aZ2f51) (fldenominator . aZ2f50) (flcos . aZ2f4f) (flceiling . aZ2f4e) (flatan . aZ2f4d) (flasin . aZ2f4c) (flacos . aZ2f4b) (flabs . aZ2f4a) (fl>? . aZ2f49) (fl>=? . aZ2f48) (fl=? . aZ2f47) (fl<? . aZ2f46) (fl<=? . aZ2f45) (fl/ . aZ2f44) (fl- . aZ2f43) (fl+ . aZ2f42) (fl* . aZ2f41) (fixnum->flonum . aZ2f40) (fxzero? . aZ2f3f) (fxxor . aZ2f3e) (fxrotate-bit-field . aZ2f3d) (fxreverse-bit-field . aZ2f3c) (fxpositive? . aZ2f3b) (fxodd? . aZ2f3a) (fxnot . aZ2f39) (fxnegative? . aZ2f38) (fxmod0 . aZ2f37) (fxmod . aZ2f36) (fxmin . aZ2f35) (fxmax . aZ2f34) (fxlength . aZ2f33) (fxior . aZ2f32) (fxif . aZ2f31) (fxfirst-bit-set . aZ2f30) (fxeven? . aZ2f2f) (fxdiv0-and-mod0 . aZ2f2e) (fxdiv0 . aZ2f2d) (fxdiv-and-mod . aZ2f2c) (fxdiv . aZ2f2b) (fxcopy-bit-field . aZ2f2a) (fxcopy-bit . aZ2f29) (fxbit-set? . aZ2f28) (fxbit-field . aZ2f27) (fxbit-count . aZ2f26) (fxarithmetic-shift-right . aZ2f25) (fxarithmetic-shift-left . aZ2f24) (fxarithmetic-shift . aZ2f23) (fxand . aZ2f22) (fx>? . aZ2f21) (fx>=? . aZ2f20) (fx=? . aZ2f1f) (fx<? . aZ2f1e) (fx<=? . aZ2f1d) (fx-/carry . aZ2f1c) (fx- . aZ2f1b) (fx+/carry . aZ2f1a) (fx+ . aZ2f19) (fx*/carry . aZ2f18) (fx* . aZ2f17) (greatest-fixnum . aZ2f16) (least-fixnum . aZ2f15) (fixnum-width . aZ2f14) (fixnum? . aZ2f13) (bitwise-rotate-bit-field . aZ2f12) (bitwise-reverse-bit-field . aZ2f11) (bitwise-length . aZ2f10) (bitwise-if . aZ2f0f) (bitwise-first-bit-set . aZ2f0e) (bitwise-copy-bit-field . aZ2f0d) (bitwise-copy-bit . aZ2f0c) (bitwise-bit-set? . aZ2f0b) (bitwise-bit-field . aZ2f0a) (bitwise-bit-count . aZ2f09) (bitwise-xor . aZ2f08) (bitwise-ior . aZ2f07) (bitwise-and . aZ2f06) (bitwise-not . aZ2f05) (bitwise-arithmetic-shift-right . aZ2f04) (bitwise-arithmetic-shift-left . aZ2f03) (bitwise-arithmetic-shift . aZ2f02) (zero? . aZ2f01) (vector? . aZ2f00) (vector-set! . aZ2eff) (vector-ref . aZ2efe) (vector-map . aZ2efd) (vector-length . aZ2efc) (vector-for-each . aZ2efb) (vector-fill! . aZ2efa) (vector->list . aZ2ef9) (vector . aZ2ef8) (values . aZ2ef7) (truncate . aZ2ef6) (tan . aZ2ef5) (symbol? . aZ2ef4) (symbol=? . aZ2ef3) (symbol->string . aZ2ef2) (substring . aZ2ef1) (string? . aZ2ef0) (string>? . aZ2eef) (string>=? . aZ2eee) (string=? . aZ2eed) (string<? . aZ2eec) (string<=? . aZ2eeb) (string-ref . aZ2eea) (string-length . aZ2ee9) (string-for-each . aZ2ee8) (string-copy . aZ2ee7) (string-append . aZ2ee6) (string->symbol . aZ2ee5) (string->number . aZ2ee4) (string->list . aZ2ee3) (string . aZ2ee2) (sqrt . aZ2ee1) (sin . aZ2ee0) (round . aZ2edf) (reverse . aZ2ede) (real? . aZ2edd) (real-valued? . aZ2edc) (real-part . aZ2edb) (rationalize . aZ2eda) (rational? . aZ2ed9) (rational-valued? . aZ2ed8) (procedure? . aZ2ed7) (positive? . aZ2ed6) (pair? . aZ2ed5) (odd? . aZ2ed4) (numerator . aZ2ed3) (number? . aZ2ed2) (number->string . aZ2ed1) (null? . aZ2ed0) (not . aZ2ecf) (negative? . aZ2ece) (nan? . aZ2ecd) (min . aZ2ecc) (max . aZ2ecb) (map . aZ2eca) (make-vector . aZ2ec9) (make-string . aZ2ec8) (make-rectangular . aZ2ec7) (make-polar . aZ2ec6) (magnitude . aZ2ec5) (log . aZ2ec4) (list? . aZ2ec3) (list-tail . aZ2ec2) (list-ref . aZ2ec1) (list->vector . aZ2ec0) (list->string . aZ2ebf) (list . aZ2ebe) (length . aZ2ebd) (lcm . aZ2ebc) (integer? . aZ2ebb) (integer-valued? . aZ2eba) (integer->char . aZ2eb9) (infinite? . aZ2eb8) (inexact? . aZ2eb7) (inexact . aZ2eb6) (imag-part . aZ2eb5) (gcd . aZ2eb4) (for-each . aZ2eb3) (floor . aZ2eb2) (finite? . aZ2eb1) (expt . aZ2eb0) (exp . aZ2eaf) (exact? . aZ2eae) (exact-integer-sqrt . aZ2ead) (exact . aZ2eac) (even? . aZ2eab) (error . aZ2eaa) (eqv? . aZ2ea9) (equal? . aZ2ea8) (eq? . aZ2ea7) (dynamic-wind . aZ2ea6) (div0-and-mod0 . aZ2ea5) (mod0 . aZ2ea4) (div0 . aZ2ea3) (div-and-mod . aZ2ea2) (mod . aZ2ea1) (div . aZ2ea0) (denominator . aZ2e9f) (cos . aZ2e9e) (cons . aZ2e9d) (complex? . aZ2e9c) (char? . aZ2e9b) (char>? . aZ2e9a) (char>=? . aZ2e99) (char=? . aZ2e98) (char<? . aZ2e97) (char<=? . aZ2e96) (char->integer . aZ2e95) (ceiling . aZ2e94) (call-with-values . aZ2e93) (call/cc . aZ2e92) (call-with-current-continuation . aZ2e91) (cddddr . aZ2e90) (cdddar . aZ2e8f) (cddadr . aZ2e8e) (cddaar . aZ2e8d) (cdaddr . aZ2e8c) (cdadar . aZ2e8b) (cdaadr . aZ2e8a) (cdaaar . aZ2e89) (cadddr . aZ2e88) (caddar . aZ2e87) (cadadr . aZ2e86) (cadaar . aZ2e85) (caaddr . aZ2e84) (caadar . aZ2e83) (caaadr . aZ2e82) (caaaar . aZ2e81) (cdddr . aZ2e80) (cddar . aZ2e7f) (cdadr . aZ2e7e) (cdaar . aZ2e7d) (caddr . aZ2e7c) (cadar . aZ2e7b) (caadr . aZ2e7a) (caaar . aZ2e79) (cddr . aZ2e78) (cdar . aZ2e77) (cadr . aZ2e76) (caar . aZ2e75) (cdr . aZ2e74) (car . aZ2e73) (boolean? . aZ2e72) (boolean=? . aZ2e71) (atan . aZ2e70) (assertion-violation . aZ2e6f) (assertion-error . aZe55) (asin . aZ2e6e) (apply . aZ2e6d) (append . aZ2e6c) (angle . aZ2e6b) (acos . aZ2e6a) (abs . aZ2e69) (/ . aZ2e68) (* . aZ2e67) (- . aZ2e66) (+ . aZ2e65) (>= . aZ2e64) (> . aZ2e63) (= . aZ2e62) (<= . aZ2e61) (< . aZ2e60) (library . aZ2e5f) (&no-nans . aZ2e5e) (&no-infinities . aZ2e5d) (&i/o-encoding . aZ2e5c) (&i/o-decoding . aZ2e5b) (&i/o-port . aZ2e5a) (&i/o-file-does-not-exist . aZ2e59) (&i/o-file-already-exists . aZ2e58) (&i/o-file-is-read-only . aZ2e57) (&i/o-file-protection . aZ2e56) (&i/o-filename . aZ2e55) (&i/o-invalid-position . aZ2e54) (&i/o-write . aZ2e53) (&i/o-read . aZ2e52) (&i/o . aZ2e51) (&undefined . aZ2e50) (&syntax . aZ2e4f) (&lexical . aZ2e4e) (&implementation-restriction . aZ2e4d) (&non-continuable . aZ2e4c) (&who . aZ2e4b) (&irritants . aZ2e4a) (&assertion . aZ2e49) (&violation . aZ2e48) (&error . aZ2e47) (&serious . aZ2e46) (&warning . aZ2e45) (&message . aZ2e44) (&condition . aZ2e43) (define-condition-type . aZ2e42) (define-enumeration . aZ2e41) (define-record-type . aZ2e40) (parent-rtd . aZ2e3f) (nongenerative . aZ2e3e) (opaque . aZ2e3d) (sealed . aZ2e3c) (protocol . aZ2e3b) (parent . aZ2e3a) (immutable . aZ2e39) (mutable . aZ2e38) (fields . aZ2e37) (error-handling-mode . aZ2e36) (file-options . aZ2e35) (buffer-mode . aZ2e34) (eol-style . aZ2e33) (guard . aZ2e32) (trace-define . aZ2e31) (trace-lambda . aZ2e30) (unsyntax-splicing . aZ2e2f) (unsyntax . aZ2e2e) (unquote-splicing . aZ2e2d) (unquote . aZ2e2c) (_ . aZ2e2b) (else . aZ2e2a) (=> . aZ2e29) (... . aZ2e28) (assert . aZ2e27) (endianness . aZ2e26) (delay . aZ2e25) (time . aZ2e24) (do . aZ2e23) (cond . aZ2e22) (let* . aZ2e21) (let*-values . aZ2e20) (let-values . aZ2e1f) (identifier-syntax . aZ2e1e) (with-syntax . aZ2e1d) (quasisyntax . aZ2e1c) (quasiquote . aZ2e1b) (syntax-rules . aZ2e1a) (include . aZ2e19) (define-struct . aZ2e18) (record-constructor-descriptor . aZ2e17) (record-type-descriptor . aZ2e16) (case . aZ2e15) (parameterize . aZ2e14) (unless . aZ2e13) (when . aZ2e12) (or . aZ2e11) (and . aZ2e10) (if . aZ2e0f) (let . aZ2e0e) (letrec* . aZ2e0d) (letrec . aZ2e0c) (type-descriptor . aZ2e0b) (case-lambda . aZ2e0a) (lambda . aZ2e09) (syntax . aZ2e08) (syntax-case . aZ2e07) (quote . aZ2e06) (foreign-call . aZ2e05) (letrec-syntax . aZ2e04) (let-syntax . aZ2e03) (set! . aZ2e02) (import . aZ2e01) (begin . aZ2e00) (module . aZ2dff) (define-syntax . aZ2dfe) (define . aZ2dfd)) '((aZ2b8a core-prim . &no-nans-rcd) (aZ2b88 core-prim . &no-nans-rtd) (aZ2b75 core-prim . &no-infinities-rcd) (aZ2b73 core-prim . &no-infinities-rtd) (aZ2b60 core-prim . &i/o-encoding-rcd) (aZ2b5e core-prim . &i/o-encoding-rtd) (aZ2b45 core-prim . &i/o-decoding-rcd) (aZ2b43 core-prim . &i/o-decoding-rtd) (aZ2b30 core-prim . &i/o-port-rcd) (aZ2b2e core-prim . &i/o-port-rtd) (aZ2b15 core-prim . &i/o-file-does-not-exist-rcd) (aZ2b13 core-prim . &i/o-file-does-not-exist-rtd) (aZ2b00 core-prim . &i/o-file-already-exists-rcd) (aZ2afe core-prim . &i/o-file-already-exists-rtd) (aZ2aeb core-prim . &i/o-file-is-read-only-rcd) (aZ2ae9 core-prim . &i/o-file-is-read-only-rtd) (aZ2ad6 core-prim . &i/o-file-protection-rcd) (aZ2ad4 core-prim . &i/o-file-protection-rtd) (aZ2ac1 core-prim . &i/o-filename-rcd) (aZ2abf core-prim . &i/o-filename-rtd) (aZ2aa6 core-prim . &i/o-invalid-position-rcd) (aZ2aa4 core-prim . &i/o-invalid-position-rtd) (aZ2a8b core-prim . &i/o-write-rcd) (aZ2a89 core-prim . &i/o-write-rtd) (aZ2a76 core-prim . &i/o-read-rcd) (aZ2a74 core-prim . &i/o-read-rtd) (aZ2a61 core-prim . &i/o-rcd) (aZ2a5f core-prim . &i/o-rtd) (aZ2a4c core-prim . &undefined-rcd) (aZ2a4a core-prim . &undefined-rtd) (aZ2a37 core-prim . &syntax-rcd) (aZ2a35 core-prim . &syntax-rtd) (aZ2a16 core-prim . &lexical-rcd) (aZ2a14 core-prim . &lexical-rtd) (aZ2a01 core-prim . &implementation-restriction-rcd) (aZ29ff core-prim . &implementation-restriction-rtd) (aZ29ec core-prim . &non-continuable-rcd) (aZ29ea core-prim . &non-continuable-rtd) (aZ29d7 core-prim . &who-rcd) (aZ29d5 core-prim . &who-rtd) (aZ29bc core-prim . &irritants-rcd) (aZ29ba core-prim . &irritants-rtd) (aZ29a1 core-prim . &assertion-rcd) (aZ299f core-prim . &assertion-rtd) (aZ298c core-prim . &violation-rcd) (aZ298a core-prim . &violation-rtd) (aZ2977 core-prim . &error-rcd) (aZ2975 core-prim . &error-rtd) (aZ2962 core-prim . &serious-rcd) (aZ2960 core-prim . &serious-rtd) (aZ294d core-prim . &warning-rcd) (aZ294b core-prim . &warning-rtd) (aZ2938 core-prim . &message-rcd) (aZ2936 core-prim . &message-rtd) (aZ28d9 core-prim . &condition-rcd) (aZ28d7 core-prim . &condition-rtd) (aZe57 core-prim . syntax-error) (aZd7b core-prim . syntax-dispatch) (aZ3123 core-prim . pretty-print) (aZ3122 core-prim . eval-core) (aZ3121 core-prim . set-symbol-value!) (aZ3120 core-prim . symbol-value) (aZ311f core-prim . gensym) (aZ311e core-prim . void) (aZ2c9b core-prim . load) (aZe69 core-prim . interaction-environment) (aZ311d core-prim . char-ready?) (aZ311c core-prim . regexp?) (aZ311b core-prim . read-line) (aZ311a core-prim . gensym-prefix-set!) (aZ3119 core-prim . ungensym) (aZ3118 core-prim . alist->eq-hash-table) (aZ3117 core-prim . assoc-ref) (aZ3116 core-prim . print) (aZ3115 core-prim . format) (aZ3114 core-prim . host-os) (aZ7b4 core-prim . library-path) (aZ3113 core-prim . standard-library-path) (aZ3112 core-prim . file-newer?) (aZ3111 core-prim . stat-mtime) (aZ3110 core-prim . write-to-file) (aZ310f core-prim . file->list) (aZ310e core-prim . file->string) (aZ310d core-prim . digit->integer) (aZ310c core-prim . call-with-string-input-port) (aZ310b core-prim . call-with-string-io) (aZ310a core-prim . string-split) (aZ3109 core-prim . bytevector-for-each) (aZ3108 core-prim . string->regexp) (aZ3107 core-prim . rxmatch) (aZ3106 core-prim . regexp-replace-all) (aZ3105 core-prim . hashtable-for-each) (aZ59e core-prim . mosh-cache-dir) (aZ3104 core-prim . call-process) (aZ3103 core-prim . local-tz-offset) (aZ3102 core-prim . microseconds) (aZ3101 core-prim . directory-list) (aZ3100 core-prim . set-current-directory!) (aZ30ff core-prim . expand-path) (aZ30fe core-prim . current-directory) (aZ30fd core-prim . %spawn) (aZ30fc core-prim . %waitpid) (aZ30fb core-prim . simple-struct-name) (aZ30fa core-prim . simple-struct-set!) (aZ30f9 core-prim . simple-struct-ref) (aZ30f8 core-prim . make-simple-struct) (aZ30f7 core-prim . simple-struct?) (aZ30f6 core-prim . pointer-ref-c-int64) (aZ30f5 core-prim . pointer-ref-c-int32) (aZ30f4 core-prim . pointer-ref-c-int16) (aZ30f3 core-prim . pointer-ref-c-int8) (aZ30f2 core-prim . pointer-ref-c-uint64) (aZ30f1 core-prim . pointer-ref-c-uint32) (aZ30f0 core-prim . pointer-ref-c-uint16) (aZ30ef core-prim . pointer-ref-c-uint8) (aZ30ee core-prim . pointer-set-c-uint64!) (aZ30ed core-prim . pointer-set-c-uint32!) (aZ30ec core-prim . pointer-set-c-uint16!) (aZ30eb core-prim . pointer-set-c-uint8!) (aZ30ea core-prim . pointer-set-c-int64!) (aZ30e9 core-prim . pointer-set-c-int32!) (aZ30e8 core-prim . pointer-set-c-int16!) (aZ30e7 core-prim . pointer-set-c-int8!) (aZ30e6 core-prim . pointer-set-c-pointer!) (aZ30e5 core-prim . pointer-set-c-double!) (aZ30e4 core-prim . pointer-set-c-float!) (aZ30e3 core-prim . pointer-set-c-long-long!) (aZ30e2 core-prim . pointer-set-c-long!) (aZ30e1 core-prim . pointer-set-c-int!) (aZ30e0 core-prim . pointer-set-c-short!) (aZ30df core-prim . pointer-set-c-char!) (aZ30de core-prim . pointer-ref-c-pointer) (aZ30dd core-prim . pointer-ref-c-double) (aZ30dc core-prim . pointer-ref-c-float) (aZ30db core-prim . pointer-ref-c-unsigned-long-long) (aZ30da core-prim . pointer-ref-c-signed-long-long) (aZ30d9 core-prim . pointer-ref-c-unsigned-long) (aZ30d8 core-prim . pointer-ref-c-signed-long) (aZ30d7 core-prim . pointer-ref-c-unsigned-int) (aZ30d6 core-prim . pointer-ref-c-signed-int) (aZ30d5 core-prim . pointer-ref-c-unsigned-short) (aZ30d4 core-prim . pointer-ref-c-signed-short) (aZ30d3 core-prim . pointer-ref-c-unsigned-char) (aZ30d2 core-prim . pointer-ref-c-signed-char) (aZ30d1 core-prim . pointer->integer) (aZ30d0 core-prim . integer->pointer) (aZ30cf core-prim . pointer?) (aZ30ce core-prim . shared-errno) (aZ30cd core-prim . %ffi-free-c-callback-trampoline) (aZ30cc core-prim . %ffi-make-c-callback-trampoline) (aZ30cb core-prim . %ffi-free) (aZ30ca core-prim . %ffi-malloc) (aZ30c9 core-prim . %ffi-supported?) (aZ30c8 core-prim . %ffi-pointer->string) (aZ30c7 core-prim . %ffi-call) (aZ30c6 core-prim . %ffi-lookup) (aZ30c5 core-prim . %ffi-open) (aZ30c4 core-prim . null-terminated-utf8->string) (aZ30c3 core-prim . null-terminated-bytevector->string) (aZ30c2 core-prim . %fork) (aZ30c1 core-prim . %pipe) (aZ30c0 core-prim . p) (aZ30bf core-prim . open-output-string) (aZ30be core-prim . get-output-string) (aZ30bd core-prim . file-stat-ctime) (aZ30bc core-prim . file-stat-atime) (aZ30bb core-prim . file-stat-mtime) (aZ30ba core-prim . file-size-in-bytes) (aZ30b9 core-prim . file-writable?) (aZ30b8 core-prim . file-executable?) (aZ30b7 core-prim . file-readable?) (aZ30b6 core-prim . file-regular?) (aZ30b5 core-prim . file-symbolic-link?) (aZ30b4 core-prim . file-directory?) (aZ30b3 core-prim . create-symbolic-link) (aZ30b2 core-prim . rename-file) (aZ30b1 core-prim . delete-directory) (aZ30b0 core-prim . create-directory) (aZ30af core-prim . create-mosh-cache-dir) (aZ30ae core-prim . get-environment-variables) (aZ30ad core-prim . current-exception-handler) (aZ30ac core-prim . get-environment-variable) (aZ30ab core-prim . join-wraps) (aZ30aa core-prim . id->real-label) (aZ30a9 core-prim . same-marks?) (aZ30a8 core-prim . same-marks*?) (aZ30a7 core-prim . get-timeofday) (aZ30a6 core-prim . get-command-line) (aZ30a5 core-prim . sys-display) (aZ30a4 core-prim . whereis) (aZ30a3 core-prim . register) (aZ30a2 core-prim . vm-join!) (aZ30a1 core-prim . vm-set-value!) (aZ30a0 core-prim . vm?) (aZ309f core-prim . main-vm?) (aZ309e core-prim . vm-eval) (aZ309d core-prim . vm-self) (aZ309c core-prim . vm-start!) (aZ309b core-prim . make-vm) (aZ309a core-prim . mutex-try-lock!) (aZ3099 core-prim . mutex-unlock!) (aZ3098 core-prim . mutex-lock!) (aZ3097 core-prim . mutex?) (aZ3096 core-prim . make-mutex) (aZ3095 core-prim . condition-variable-notify-all!) (aZ3094 core-prim . condition-variable-notify!) (aZ3093 core-prim . condition-variable-wait!) (aZ3092 core-prim . make-condition-variable) (aZ3091 core-prim . mosh-executable-path) (aZ3090 core-prim . make-file-options) (aZ308f core-prim . source-info) (aZ308e core-prim . make-compiler-instruction) (aZ308d core-prim . make-instruction) (aZ308c core-prim . set-source-info!) (aZ308b core-prim . bignum?) (aZ308a core-prim . fast-equal?) (aZ3089 core-prim . fasl-read) (aZ3088 core-prim . fasl-write) (aZ3087 core-prim . time-usage) (aZ3086 core-prim . os-constant) (aZ3085 core-prim . disasm) (aZ59c core-prim . make-parameter) (aZ3084 core-prim . socket-port) (aZ3083 core-prim . socket-shutdown) (aZ3082 core-prim . socket-close) (aZ3081 core-prim . socket-send) (aZ3080 core-prim . socket-recv!) (aZ307f core-prim . socket-recv) (aZ307e core-prim . make-server-socket) (aZ307d core-prim . make-client-socket) (aZ307c core-prim . socket-accept) (aZ307b core-prim . socket?) (aZ307a core-prim . string-upcase) (aZ3079 core-prim . string-titlecase) (aZ3078 core-prim . string-normalize-nfkd) (aZ3077 core-prim . string-normalize-nfkc) (aZ3076 core-prim . string-normalize-nfd) (aZ3075 core-prim . string-normalize-nfc) (aZ3074 core-prim . string-foldcase) (aZ3073 core-prim . string-downcase) (aZ3072 core-prim . string-ci>?) (aZ3071 core-prim . string-ci>=?) (aZ3070 core-prim . string-ci=?) (aZ306f core-prim . string-ci<?) (aZ306e core-prim . string-ci<=?) (aZ306d core-prim . char-whitespace?) (aZ306c core-prim . char-upper-case?) (aZ306b core-prim . char-title-case?) (aZ306a core-prim . char-numeric?) (aZ3069 core-prim . char-lower-case?) (aZ3068 core-prim . char-general-category) (aZ3067 core-prim . char-upcase) (aZ3066 core-prim . char-titlecase) (aZ3065 core-prim . char-foldcase) (aZ3064 core-prim . char-downcase) (aZ3063 core-prim . char-ci>?) (aZ3062 core-prim . char-ci>=?) (aZ3061 core-prim . char-ci=?) (aZ3060 core-prim . char-ci<?) (aZ305f core-prim . char-ci<=?) (aZ305e core-prim . char-alphabetic?) (aZba6 core-prim . make-variable-transformer) (aZe5d core-prim . identifier?) (aZe49 core-prim . generate-temporaries) (aZe4b core-prim . free-identifier=?) (aZe61 core-prim . syntax->datum) (aZe5f core-prim . datum->syntax) (aZe4d core-prim . bound-identifier=?) (aZ305d core-prim . record-type-descriptor?) (aZ305c core-prim . record-predicate) (aZ305b core-prim . record-mutator) (aZ305a core-prim . record-constructor) (aZ3059 core-prim . record-accessor) (aZ3058 core-prim . make-record-type-descriptor) (aZ3057 core-prim . make-record-constructor-descriptor) (aZ3056 core-prim . record?) (aZ3055 core-prim . record-type-uid) (aZ3054 core-prim . record-type-sealed?) (aZ3053 core-prim . record-type-parent) (aZ3052 core-prim . record-type-opaque?) (aZ3051 core-prim . record-type-name) (aZ3050 core-prim . record-type-generative?) (aZ304f core-prim . record-type-field-names) (aZ304e core-prim . record-rtd) (aZ304d core-prim . record-field-mutable?) (aZ304c core-prim . delete-file) (aZ304b core-prim . file-exists?) (aZ304a core-prim . vector-sort!) (aZ3049 core-prim . vector-sort) (aZ3048 core-prim . list-sort) (aZ3047 core-prim . symbol-hash) (aZ3046 core-prim . string-ci-hash) (aZ3045 core-prim . string-hash) (aZ3044 core-prim . equal-hash) (aZ3043 core-prim . hashtable-equivalence-function) (aZ3042 core-prim . make-hashtable) (aZ3041 core-prim . hashtable-hash-function) (aZ3040 core-prim . make-eqv-hashtable) (aZ303f core-prim . make-eq-hashtable) (aZ303e core-prim . hashtable?) (aZ303d core-prim . hashtable-update!) (aZ303c core-prim . hashtable-size) (aZ303b core-prim . hashtable-set!) (aZ303a core-prim . hashtable-ref) (aZ3039 core-prim . hashtable-mutable?) (aZ3038 core-prim . hashtable-keys) (aZ3037 core-prim . hashtable-entries) (aZ3036 core-prim . hashtable-delete!) (aZ3035 core-prim . hashtable-copy) (aZ3034 core-prim . hashtable-contains?) (aZ3033 core-prim . hashtable-clear!) (aZ3032 core-prim . call-with-output-file) (aZ3031 core-prim . call-with-input-file) (aZ3030 core-prim . write-char) (aZ302f core-prim . write) (aZ302e core-prim . with-output-to-file) (aZ302d core-prim . with-input-from-file) (aZ302c core-prim . read-char) (aZ302b core-prim . read) (aZ302a core-prim . peek-char) (aZ3029 core-prim . open-output-file) (aZ3028 core-prim . open-input-file) (aZ3027 core-prim . newline) (aZ3026 core-prim . display) (aZ3025 core-prim . close-output-port) (aZ3024 core-prim . close-input-port) (aZ3023 core-prim . eof-object?) (aZ3022 core-prim . eof-object) (aZ3021 core-prim . current-error-port) (aZ3020 core-prim . current-output-port) (aZ301f core-prim . current-input-port) (aZ301e core-prim . output-port?) (aZ301d core-prim . input-port?) (aZ301c core-prim . utf-8-codec) (aZ301b core-prim . utf-16-codec) (aZ301a core-prim . transcoder-error-handling-mode) (aZ3019 core-prim . transcoder-eol-style) (aZ3018 core-prim . transcoder-codec) (aZ3017 core-prim . transcoded-port) (aZ3016 core-prim . textual-port?) (aZ3015 core-prim . string->bytevector) (aZ3014 core-prim . standard-output-port) (aZ3013 core-prim . standard-input-port) (aZ3012 core-prim . standard-error-port) (aZ3011 core-prim . set-port-position!) (aZ3010 core-prim . put-u8) (aZ300f core-prim . put-string) (aZ300e core-prim . put-datum) (aZ300d core-prim . put-char) (aZ300c core-prim . put-bytevector) (aZ300b core-prim . port?) (aZ300a core-prim . port-transcoder) (aZ3009 core-prim . port-position) (aZ3008 core-prim . port-has-set-port-position!?) (aZ3007 core-prim . port-has-port-position?) (aZ3006 core-prim . port-eof?) (aZ3005 core-prim . output-port-buffer-mode) (aZ3004 core-prim . open-string-output-port) (aZ3003 core-prim . open-string-input-port) (aZ3002 core-prim . open-file-output-port) (aZ3001 core-prim . open-file-input/output-port) (aZ3000 core-prim . open-file-input-port) (aZ2fff core-prim . open-bytevector-output-port) (aZ2ffe core-prim . open-bytevector-input-port) (aZ2ffd core-prim . native-transcoder) (aZ2ffc core-prim . native-eol-style) (aZ2ffb core-prim . make-transcoder) (aZ2ffa core-prim . latin-1-codec) (aZ2a85 core-prim . make-i/o-write-error) (aZ2a70 core-prim . make-i/o-read-error) (aZ2b26 core-prim . make-i/o-port-error) (aZ2a9c core-prim . make-i/o-invalid-position-error) (aZ2ab7 core-prim . make-i/o-filename-error) (aZ2ad0 core-prim . make-i/o-file-protection-error) (aZ2ae5 core-prim . make-i/o-file-is-read-only-error) (aZ2b0f core-prim . make-i/o-file-does-not-exist-error) (aZ2afa core-prim . make-i/o-file-already-exists-error) (aZ2a5b core-prim . make-i/o-error) (aZ2b56 core-prim . make-i/o-encoding-error) (aZ2b3f core-prim . make-i/o-decoding-error) (aZ2ff9 core-prim . make-custom-textual-output-port) (aZ2ff8 core-prim . make-custom-textual-input/output-port) (aZ2ff7 core-prim . make-custom-textual-input-port) (aZ2ff6 core-prim . make-custom-binary-output-port) (aZ2ff5 core-prim . make-custom-binary-input/output-port) (aZ2ff4 core-prim . make-custom-binary-input-port) (aZ2ff3 core-prim . make-bytevector) (aZ2ff2 core-prim . lookahead-u8) (aZ2ff1 core-prim . lookahead-char) (aZ2a87 core-prim . i/o-write-error?) (aZ2a72 core-prim . i/o-read-error?) (aZ2b2a core-prim . i/o-port-error?) (aZ2aa0 core-prim . i/o-invalid-position-error?) (aZ2abb core-prim . i/o-filename-error?) (aZ2ad2 core-prim . i/o-file-protection-error?) (aZ2ae7 core-prim . i/o-file-is-read-only-error?) (aZ2b11 core-prim . i/o-file-does-not-exist-error?) (aZ2afc core-prim . i/o-file-already-exists-error?) (aZ2a5d core-prim . i/o-error?) (aZ2aa2 core-prim . i/o-error-position) (aZ2b2c core-prim . i/o-error-port) (aZ2abd core-prim . i/o-error-filename) (aZ2b5a core-prim . i/o-encoding-error?) (aZ2b5c core-prim . i/o-encoding-error-char) (aZ2b41 core-prim . i/o-decoding-error?) (aZ2ff0 core-prim . get-u8) (aZ2fef core-prim . get-string-n!) (aZ2fee core-prim . get-string-n) (aZ2fed core-prim . get-string-all) (aZ2fec core-prim . get-line) (aZ2feb core-prim . get-datum) (aZ2fea core-prim . get-char) (aZ2fe9 core-prim . get-bytevector-some) (aZ2fe8 core-prim . get-bytevector-n!) (aZ2fe7 core-prim . get-bytevector-n) (aZ2fe6 core-prim . get-bytevector-all) (aZ2fe5 core-prim . flush-output-port) (aZ2fe4 core-prim . close-port) (aZe37 core-prim . scheme-report-environment) (aZ2fe3 core-prim . quotient) (aZe35 core-prim . null-environment) (aZ2fe2 core-prim . remainder) (aZ2fe1 core-prim . modulo) (aZ2fe0 core-prim . inexact->exact) (aZ2fdf core-prim . force) (aZ2fde core-prim . exact->inexact) (aZ2fdd core-prim . make-promise) (aZ2fdc core-prim . exit) (aZ2c95 core-prim . command-line) (aZ2fdb core-prim . string-fill!) (aZ2fda core-prim . string-set!) (aZ2fd9 core-prim . set-cdr!) (aZ2fd8 core-prim . set-car!) (aZ2fd7 core-prim . remove) (aZ2fd6 core-prim . remv) (aZ2fd5 core-prim . remp) (aZ2fd4 core-prim . remq) (aZ2fd3 core-prim . partition) (aZ2fd2 core-prim . memv) (aZ2fd1 core-prim . memq) (aZ2fd0 core-prim . memp) (aZ2fcf core-prim . member) (aZ2fce core-prim . exists) (aZ2fcd core-prim . for-all) (aZ2fcc core-prim . fold-right) (aZ2fcb core-prim . fold-left) (aZ2fca core-prim . find) (aZ2fc9 core-prim . filter) (aZ2fc8 core-prim . cons*) (aZ2fc7 core-prim . assv) (aZ2fc6 core-prim . assq) (aZ2fc5 core-prim . assp) (aZ2fc4 core-prim . assoc) (aZ2fc3 core-prim . call-with-string-output-port) (aZ2fc2 core-prim . call-with-port) (aZ2fc1 core-prim . call-with-bytevector-output-port) (aZ2fc0 core-prim . bytevector->string) (aZ2fbf core-prim . buffer-mode?) (aZ2fbe core-prim . binary-port?) (aZ2fbd core-prim . with-exception-handler) (aZ2fbc core-prim . raise-continuable) (aZ2fbb core-prim . raise) (aZe3b core-prim . eval) (aZe33 core-prim . environment) (aZ2fba core-prim . make-enumeration) (aZ2fb9 core-prim . enum-set=?) (aZ2fb8 core-prim . enum-set-universe) (aZ2fb7 core-prim . enum-set-union) (aZ2fb6 core-prim . enum-set-subset?) (aZ2fb5 core-prim . enum-set-projection) (aZ2fb4 core-prim . enum-set-member?) (aZ2fb3 core-prim . enum-set-intersection) (aZ2fb2 core-prim . enum-set-indexer) (aZ2fb1 core-prim . enum-set-difference) (aZ2fb0 core-prim . enum-set-constructor) (aZ2faf core-prim . enum-set-complement) (aZ2fae core-prim . enum-set->list) (aZ29d1 core-prim . who-condition?) (aZ2949 core-prim . warning?) (aZ2988 core-prim . violation?) (aZ2a48 core-prim . undefined-violation?) (aZ2a2f core-prim . syntax-violation?) (aZ2a33 core-prim . syntax-violation-subform) (aZ2a31 core-prim . syntax-violation-form) (aZe5b core-prim . syntax-violation) (aZ2fad core-prim . simple-conditions) (aZ295e core-prim . serious-condition?) (aZ29e8 core-prim . non-continuable-violation?) (aZ2932 core-prim . message-condition?) (aZ29cd core-prim . make-who-condition) (aZ2947 core-prim . make-warning) (aZ2986 core-prim . make-violation) (aZ2a46 core-prim . make-undefined-violation) (aZ2a29 core-prim . make-syntax-violation) (aZ295c core-prim . make-serious-condition) (aZ29e6 core-prim . make-non-continuable-violation) (aZ292e core-prim . make-message-condition) (aZ2a10 core-prim . make-lexical-violation) (aZ29b2 core-prim . make-irritants-condition) (aZ29fb core-prim . make-implementation-restriction-violation) (aZ2971 core-prim . make-error) (aZ299b core-prim . make-assertion-violation) (aZ2a12 core-prim . lexical-violation?) (aZ29b6 core-prim . irritants-condition?) (aZ29fd core-prim . implementation-restriction-violation?) (aZ2973 core-prim . error?) (aZ29d3 core-prim . condition-who) (aZ2fac core-prim . condition-predicate) (aZ2934 core-prim . condition-message) (aZ29b8 core-prim . condition-irritants) (aZ2fab core-prim . condition-accessor) (aZ2faa core-prim . condition) (aZ299d core-prim . assertion-violation?) (aZ2fa9 core-prim . condition?) (aZ2fa8 core-prim . utf32->string) (aZ2fa7 core-prim . utf16->string) (aZ2fa6 core-prim . utf8->string) (aZ2fa5 core-prim . uint-list->bytevector) (aZ2fa4 core-prim . u8-list->bytevector) (aZ2fa3 core-prim . string->utf8) (aZ2fa2 core-prim . string->utf32) (aZ2fa1 core-prim . string->utf16) (aZ2fa0 core-prim . sint-list->bytevector) (aZ2f9f core-prim . native-endianness) (aZ2f9e core-prim . bytevector?) (aZ2f9d core-prim . bytevector=?) (aZ2f9c core-prim . bytevector-uint-set!) (aZ2f9b core-prim . bytevector-uint-ref) (aZ2f9a core-prim . bytevector-u8-set!) (aZ2f99 core-prim . bytevector-u8-ref) (aZ2f98 core-prim . bytevector-u64-set!) (aZ2f97 core-prim . bytevector-u64-ref) (aZ2f96 core-prim . bytevector-u64-native-set!) (aZ2f95 core-prim . bytevector-u64-native-ref) (aZ2f94 core-prim . bytevector-u32-set!) (aZ2f93 core-prim . bytevector-u32-ref) (aZ2f92 core-prim . bytevector-u32-native-set!) (aZ2f91 core-prim . bytevector-u32-native-ref) (aZ2f90 core-prim . bytevector-u16-set!) (aZ2f8f core-prim . bytevector-u16-ref) (aZ2f8e core-prim . bytevector-u16-native-set!) (aZ2f8d core-prim . bytevector-u16-native-ref) (aZ2f8c core-prim . bytevector-sint-set!) (aZ2f8b core-prim . bytevector-sint-ref) (aZ2f8a core-prim . bytevector-s8-set!) (aZ2f89 core-prim . bytevector-s8-ref) (aZ2f88 core-prim . bytevector-s64-set!) (aZ2f87 core-prim . bytevector-s64-ref) (aZ2f86 core-prim . bytevector-s64-native-set!) (aZ2f85 core-prim . bytevector-s64-native-ref) (aZ2f84 core-prim . bytevector-s32-set!) (aZ2f83 core-prim . bytevector-s32-ref) (aZ2f82 core-prim . bytevector-s32-native-set!) (aZ2f81 core-prim . bytevector-s32-native-ref) (aZ2f80 core-prim . bytevector-s16-set!) (aZ2f7f core-prim . bytevector-s16-ref) (aZ2f7e core-prim . bytevector-s16-native-set!) (aZ2f7d core-prim . bytevector-s16-native-ref) (aZ2f7c core-prim . bytevector-length) (aZ2f7b core-prim . bytevector-ieee-single-ref) (aZ2f7a core-prim . bytevector-ieee-single-set!) (aZ2f79 core-prim . bytevector-ieee-single-native-set!) (aZ2f78 core-prim . bytevector-ieee-single-native-ref) (aZ2f77 core-prim . bytevector-ieee-double-set!) (aZ2f76 core-prim . bytevector-ieee-double-ref) (aZ2f75 core-prim . bytevector-ieee-double-native-set!) (aZ2f74 core-prim . bytevector-ieee-double-native-ref) (aZ2f73 core-prim . bytevector-fill!) (aZ2f72 core-prim . bytevector-copy!) (aZ2f71 core-prim . bytevector-copy) (aZ2f70 core-prim . bytevector->uint-list) (aZ2f6f core-prim . bytevector->u8-list) (aZ2f6e core-prim . bytevector->sint-list) (aZ2b86 core-prim . no-nans-violation?) (aZ2b71 core-prim . no-infinities-violation?) (aZ2b84 core-prim . make-no-nans-violation) (aZ2b6f core-prim . make-no-infinities-violation) (aZ2f6d core-prim . real->flonum) (aZ2f6c core-prim . flzero?) (aZ2f6b core-prim . fltruncate) (aZ2f6a core-prim . fltan) (aZ2f69 core-prim . flsqrt) (aZ2f68 core-prim . flsin) (aZ2f67 core-prim . flround) (aZ2f66 core-prim . flpositive?) (aZ2f65 core-prim . flonum?) (aZ2f64 core-prim . flodd?) (aZ2f63 core-prim . flnumerator) (aZ2f62 core-prim . flnegative?) (aZ2f61 core-prim . flnan?) (aZ2f60 core-prim . flmod0) (aZ2f5f core-prim . flmod) (aZ2f5e core-prim . flmin) (aZ2f5d core-prim . flmax) (aZ2f5c core-prim . fllog) (aZ2f5b core-prim . flinteger?) (aZ2f5a core-prim . flinfinite?) (aZ2f59 core-prim . flfloor) (aZ2f58 core-prim . flfinite?) (aZ2f57 core-prim . flexpt) (aZ2f56 core-prim . flexp) (aZ2f55 core-prim . fleven?) (aZ2f54 core-prim . fldiv0-and-mod0) (aZ2f53 core-prim . fldiv0) (aZ2f52 core-prim . fldiv-and-mod) (aZ2f51 core-prim . fldiv) (aZ2f50 core-prim . fldenominator) (aZ2f4f core-prim . flcos) (aZ2f4e core-prim . flceiling) (aZ2f4d core-prim . flatan) (aZ2f4c core-prim . flasin) (aZ2f4b core-prim . flacos) (aZ2f4a core-prim . flabs) (aZ2f49 core-prim . fl>?) (aZ2f48 core-prim . fl>=?) (aZ2f47 core-prim . fl=?) (aZ2f46 core-prim . fl<?) (aZ2f45 core-prim . fl<=?) (aZ2f44 core-prim . fl/) (aZ2f43 core-prim . fl-) (aZ2f42 core-prim . fl+) (aZ2f41 core-prim . fl*) (aZ2f40 core-prim . fixnum->flonum) (aZ2f3f core-prim . fxzero?) (aZ2f3e core-prim . fxxor) (aZ2f3d core-prim . fxrotate-bit-field) (aZ2f3c core-prim . fxreverse-bit-field) (aZ2f3b core-prim . fxpositive?) (aZ2f3a core-prim . fxodd?) (aZ2f39 core-prim . fxnot) (aZ2f38 core-prim . fxnegative?) (aZ2f37 core-prim . fxmod0) (aZ2f36 core-prim . fxmod) (aZ2f35 core-prim . fxmin) (aZ2f34 core-prim . fxmax) (aZ2f33 core-prim . fxlength) (aZ2f32 core-prim . fxior) (aZ2f31 core-prim . fxif) (aZ2f30 core-prim . fxfirst-bit-set) (aZ2f2f core-prim . fxeven?) (aZ2f2e core-prim . fxdiv0-and-mod0) (aZ2f2d core-prim . fxdiv0) (aZ2f2c core-prim . fxdiv-and-mod) (aZ2f2b core-prim . fxdiv) (aZ2f2a core-prim . fxcopy-bit-field) (aZ2f29 core-prim . fxcopy-bit) (aZ2f28 core-prim . fxbit-set?) (aZ2f27 core-prim . fxbit-field) (aZ2f26 core-prim . fxbit-count) (aZ2f25 core-prim . fxarithmetic-shift-right) (aZ2f24 core-prim . fxarithmetic-shift-left) (aZ2f23 core-prim . fxarithmetic-shift) (aZ2f22 core-prim . fxand) (aZ2f21 core-prim . fx>?) (aZ2f20 core-prim . fx>=?) (aZ2f1f core-prim . fx=?) (aZ2f1e core-prim . fx<?) (aZ2f1d core-prim . fx<=?) (aZ2f1c core-prim . fx-/carry) (aZ2f1b core-prim . fx-) (aZ2f1a core-prim . fx+/carry) (aZ2f19 core-prim . fx+) (aZ2f18 core-prim . fx*/carry) (aZ2f17 core-prim . fx*) (aZ2f16 core-prim . greatest-fixnum) (aZ2f15 core-prim . least-fixnum) (aZ2f14 core-prim . fixnum-width) (aZ2f13 core-prim . fixnum?) (aZ2f12 core-prim . bitwise-rotate-bit-field) (aZ2f11 core-prim . bitwise-reverse-bit-field) (aZ2f10 core-prim . bitwise-length) (aZ2f0f core-prim . bitwise-if) (aZ2f0e core-prim . bitwise-first-bit-set) (aZ2f0d core-prim . bitwise-copy-bit-field) (aZ2f0c core-prim . bitwise-copy-bit) (aZ2f0b core-prim . bitwise-bit-set?) (aZ2f0a core-prim . bitwise-bit-field) (aZ2f09 core-prim . bitwise-bit-count) (aZ2f08 core-prim . bitwise-xor) (aZ2f07 core-prim . bitwise-ior) (aZ2f06 core-prim . bitwise-and) (aZ2f05 core-prim . bitwise-not) (aZ2f04 core-prim . bitwise-arithmetic-shift-right) (aZ2f03 core-prim . bitwise-arithmetic-shift-left) (aZ2f02 core-prim . bitwise-arithmetic-shift) (aZ2f01 core-prim . zero?) (aZ2f00 core-prim . vector?) (aZ2eff core-prim . vector-set!) (aZ2efe core-prim . vector-ref) (aZ2efd core-prim . vector-map) (aZ2efc core-prim . vector-length) (aZ2efb core-prim . vector-for-each) (aZ2efa core-prim . vector-fill!) (aZ2ef9 core-prim . vector->list) (aZ2ef8 core-prim . vector) (aZ2ef7 core-prim . values) (aZ2ef6 core-prim . truncate) (aZ2ef5 core-prim . tan) (aZ2ef4 core-prim . symbol?) (aZ2ef3 core-prim . symbol=?) (aZ2ef2 core-prim . symbol->string) (aZ2ef1 core-prim . substring) (aZ2ef0 core-prim . string?) (aZ2eef core-prim . string>?) (aZ2eee core-prim . string>=?) (aZ2eed core-prim . string=?) (aZ2eec core-prim . string<?) (aZ2eeb core-prim . string<=?) (aZ2eea core-prim . string-ref) (aZ2ee9 core-prim . string-length) (aZ2ee8 core-prim . string-for-each) (aZ2ee7 core-prim . string-copy) (aZ2ee6 core-prim . string-append) (aZ2ee5 core-prim . string->symbol) (aZ2ee4 core-prim . string->number) (aZ2ee3 core-prim . string->list) (aZ2ee2 core-prim . string) (aZ2ee1 core-prim . sqrt) (aZ2ee0 core-prim . sin) (aZ2edf core-prim . round) (aZ2ede core-prim . reverse) (aZ2edd core-prim . real?) (aZ2edc core-prim . real-valued?) (aZ2edb core-prim . real-part) (aZ2eda core-prim . rationalize) (aZ2ed9 core-prim . rational?) (aZ2ed8 core-prim . rational-valued?) (aZ2ed7 core-prim . procedure?) (aZ2ed6 core-prim . positive?) (aZ2ed5 core-prim . pair?) (aZ2ed4 core-prim . odd?) (aZ2ed3 core-prim . numerator) (aZ2ed2 core-prim . number?) (aZ2ed1 core-prim . number->string) (aZ2ed0 core-prim . null?) (aZ2ecf core-prim . not) (aZ2ece core-prim . negative?) (aZ2ecd core-prim . nan?) (aZ2ecc core-prim . min) (aZ2ecb core-prim . max) (aZ2eca core-prim . map) (aZ2ec9 core-prim . make-vector) (aZ2ec8 core-prim . make-string) (aZ2ec7 core-prim . make-rectangular) (aZ2ec6 core-prim . make-polar) (aZ2ec5 core-prim . magnitude) (aZ2ec4 core-prim . log) (aZ2ec3 core-prim . list?) (aZ2ec2 core-prim . list-tail) (aZ2ec1 core-prim . list-ref) (aZ2ec0 core-prim . list->vector) (aZ2ebf core-prim . list->string) (aZ2ebe core-prim . list) (aZ2ebd core-prim . length) (aZ2ebc core-prim . lcm) (aZ2ebb core-prim . integer?) (aZ2eba core-prim . integer-valued?) (aZ2eb9 core-prim . integer->char) (aZ2eb8 core-prim . infinite?) (aZ2eb7 core-prim . inexact?) (aZ2eb6 core-prim . inexact) (aZ2eb5 core-prim . imag-part) (aZ2eb4 core-prim . gcd) (aZ2eb3 core-prim . for-each) (aZ2eb2 core-prim . floor) (aZ2eb1 core-prim . finite?) (aZ2eb0 core-prim . expt) (aZ2eaf core-prim . exp) (aZ2eae core-prim . exact?) (aZ2ead core-prim . exact-integer-sqrt) (aZ2eac core-prim . exact) (aZ2eab core-prim . even?) (aZ2eaa core-prim . error) (aZ2ea9 core-prim . eqv?) (aZ2ea8 core-prim . equal?) (aZ2ea7 core-prim . eq?) (aZ2ea6 core-prim . dynamic-wind) (aZ2ea5 core-prim . div0-and-mod0) (aZ2ea4 core-prim . mod0) (aZ2ea3 core-prim . div0) (aZ2ea2 core-prim . div-and-mod) (aZ2ea1 core-prim . mod) (aZ2ea0 core-prim . div) (aZ2e9f core-prim . denominator) (aZ2e9e core-prim . cos) (aZ2e9d core-prim . cons) (aZ2e9c core-prim . complex?) (aZ2e9b core-prim . char?) (aZ2e9a core-prim . char>?) (aZ2e99 core-prim . char>=?) (aZ2e98 core-prim . char=?) (aZ2e97 core-prim . char<?) (aZ2e96 core-prim . char<=?) (aZ2e95 core-prim . char->integer) (aZ2e94 core-prim . ceiling) (aZ2e93 core-prim . call-with-values) (aZ2e92 core-prim . call/cc) (aZ2e91 core-prim . call-with-current-continuation) (aZ2e90 core-prim . cddddr) (aZ2e8f core-prim . cdddar) (aZ2e8e core-prim . cddadr) (aZ2e8d core-prim . cddaar) (aZ2e8c core-prim . cdaddr) (aZ2e8b core-prim . cdadar) (aZ2e8a core-prim . cdaadr) (aZ2e89 core-prim . cdaaar) (aZ2e88 core-prim . cadddr) (aZ2e87 core-prim . caddar) (aZ2e86 core-prim . cadadr) (aZ2e85 core-prim . cadaar) (aZ2e84 core-prim . caaddr) (aZ2e83 core-prim . caadar) (aZ2e82 core-prim . caaadr) (aZ2e81 core-prim . caaaar) (aZ2e80 core-prim . cdddr) (aZ2e7f core-prim . cddar) (aZ2e7e core-prim . cdadr) (aZ2e7d core-prim . cdaar) (aZ2e7c core-prim . caddr) (aZ2e7b core-prim . cadar) (aZ2e7a core-prim . caadr) (aZ2e79 core-prim . caaar) (aZ2e78 core-prim . cddr) (aZ2e77 core-prim . cdar) (aZ2e76 core-prim . cadr) (aZ2e75 core-prim . caar) (aZ2e74 core-prim . cdr) (aZ2e73 core-prim . car) (aZ2e72 core-prim . boolean?) (aZ2e71 core-prim . boolean=?) (aZ2e70 core-prim . atan) (aZ2e6f core-prim . assertion-violation) (aZe55 core-prim . assertion-error) (aZ2e6e core-prim . asin) (aZ2e6d core-prim . apply) (aZ2e6c core-prim . append) (aZ2e6b core-prim . angle) (aZ2e6a core-prim . acos) (aZ2e69 core-prim . abs) (aZ2e68 core-prim . /) (aZ2e67 core-prim . *) (aZ2e66 core-prim . -) (aZ2e65 core-prim . +) (aZ2e64 core-prim . >=) (aZ2e63 core-prim . >) (aZ2e62 core-prim . =) (aZ2e61 core-prim . <=) (aZ2e60 core-prim . <) (aZ2e5f core-prim . library) (aZ2e5e $core-rtd &no-nans-rtd &no-nans-rcd) (aZ2e5d $core-rtd &no-infinities-rtd &no-infinities-rcd) (aZ2e5c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (aZ2e5b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (aZ2e5a $core-rtd &i/o-port-rtd &i/o-port-rcd) (aZ2e59 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (aZ2e58 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (aZ2e57 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (aZ2e56 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (aZ2e55 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (aZ2e54 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (aZ2e53 $core-rtd &i/o-write-rtd &i/o-write-rcd) (aZ2e52 $core-rtd &i/o-read-rtd &i/o-read-rcd) (aZ2e51 $core-rtd &i/o-rtd &i/o-rcd) (aZ2e50 $core-rtd &undefined-rtd &undefined-rcd) (aZ2e4f $core-rtd &syntax-rtd &syntax-rcd) (aZ2e4e $core-rtd &lexical-rtd &lexical-rcd) (aZ2e4d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (aZ2e4c $core-rtd &non-continuable-rtd &non-continuable-rcd) (aZ2e4b $core-rtd &who-rtd &who-rcd) (aZ2e4a $core-rtd &irritants-rtd &irritants-rcd) (aZ2e49 $core-rtd &assertion-rtd &assertion-rcd) (aZ2e48 $core-rtd &violation-rtd &violation-rcd) (aZ2e47 $core-rtd &error-rtd &error-rcd) (aZ2e46 $core-rtd &serious-rtd &serious-rcd) (aZ2e45 $core-rtd &warning-rtd &warning-rcd) (aZ2e44 $core-rtd &message-rtd &message-rcd) (aZ2e43 $core-rtd &condition-rtd &condition-rcd) (aZ2e42 macro . define-condition-type) (aZ2e41 macro . define-enumeration) (aZ2e40 macro . define-record-type) (aZ2e3f macro . parent-rtd) (aZ2e3e macro . nongenerative) (aZ2e3d macro . opaque) (aZ2e3c macro . sealed) (aZ2e3b macro . protocol) (aZ2e3a macro . parent) (aZ2e39 macro . immutable) (aZ2e38 macro . mutable) (aZ2e37 macro . fields) (aZ2e36 macro . error-handling-mode) (aZ2e35 macro . file-options) (aZ2e34 macro . buffer-mode) (aZ2e33 macro . eol-style) (aZ2e32 macro . guard) (aZ2e31 macro . trace-define) (aZ2e30 macro . trace-lambda) (aZ2e2f macro . unsyntax-splicing) (aZ2e2e macro . unsyntax) (aZ2e2d macro . unquote-splicing) (aZ2e2c macro . unquote) (aZ2e2b macro . _) (aZ2e2a macro . else) (aZ2e29 macro . =>) (aZ2e28 macro . ...) (aZ2e27 macro . assert) (aZ2e26 macro . endianness) (aZ2e25 macro . delay) (aZ2e24 macro . time) (aZ2e23 macro . do) (aZ2e22 macro . cond) (aZ2e21 macro . let*) (aZ2e20 macro . let*-values) (aZ2e1f macro . let-values) (aZ2e1e macro . identifier-syntax) (aZ2e1d macro . with-syntax) (aZ2e1c macro . quasisyntax) (aZ2e1b macro . quasiquote) (aZ2e1a macro . syntax-rules) (aZ2e19 macro . include) (aZ2e18 macro . define-struct) (aZ2e17 core-macro . record-constructor-descriptor) (aZ2e16 core-macro . record-type-descriptor) (aZ2e15 macro . case) (aZ2e14 macro . parameterize) (aZ2e13 macro . unless) (aZ2e12 macro . when) (aZ2e11 core-macro . or) (aZ2e10 core-macro . and) (aZ2e0f core-macro . if) (aZ2e0e core-macro . let) (aZ2e0d core-macro . letrec*) (aZ2e0c core-macro . letrec) (aZ2e0b core-macro . type-descriptor) (aZ2e0a core-macro . case-lambda) (aZ2e09 core-macro . lambda) (aZ2e08 core-macro . syntax) (aZ2e07 core-macro . syntax-case) (aZ2e06 core-macro . quote) (aZ2e05 core-macro . foreign-call) (aZ2e04 letrec-syntax) (aZ2e03 let-syntax) (aZ2e02 set!) (aZ2e01 import) (aZ2e00 begin) (aZ2dff module) (aZ2dfe define-syntax) (aZ2dfd define)) values values '#f '#f '#f '#f) (aZ989@aZ7d5@install-library 'aZ3144 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . aZ3123) (eval-core . aZ3122) (set-symbol-value! . aZ3121) (symbol-value . aZ3120) (gensym . aZ311f) (void . aZ311e)) '() values values '#f '#f '#f '#f) (aZ989@aZ7d5@install-library 'aZ3145 '(mosh) '() '() '() '() '((set-symbol-value! . aZ3121) (symbol-value . aZ3120) (regexp? . aZ311c) (read-line . aZ311b) (ungensym . aZ3119) (alist->eq-hash-table . aZ3118) (assoc-ref . aZ3117) (print . aZ3116) (format . aZ3115) (host-os . aZ3114) (library-path . aZ7b4) (standard-library-path . aZ3113) (file-newer? . aZ3112) (stat-mtime . aZ3111) (digit->integer . aZ310d) (call-with-string-input-port . aZ310c) (call-with-string-io . aZ310b) (string-split . aZ310a) (bytevector-for-each . aZ3109) (string->regexp . aZ3108) (rxmatch . aZ3107) (regexp-replace-all . aZ3106) (hashtable-for-each . aZ3105) (set-current-directory! . aZ3100) (expand-path . aZ30ff) (current-directory . aZ30fe) (p . aZ30c0) (get-timeofday . aZ30a7) (get-command-line . aZ30a6) (sys-display . aZ30a5) (whereis . aZ30a4) (register . aZ30a3) (vm-join! . aZ30a2) (vm-set-value! . aZ30a1) (vm? . aZ30a0) (main-vm? . aZ309f) (vm-eval . aZ309e) (vm-self . aZ309d) (vm-start! . aZ309c) (make-vm . aZ309b) (mutex-try-lock! . aZ309a) (mutex-unlock! . aZ3099) (mutex-lock! . aZ3098) (mutex? . aZ3097) (make-mutex . aZ3096) (condition-variable-notify-all! . aZ3095) (condition-variable-notify! . aZ3094) (condition-variable-wait! . aZ3093) (make-condition-variable . aZ3092) (mosh-executable-path . aZ3091) (make-file-options . aZ3090) (source-info . aZ308f) (make-compiler-instruction . aZ308e) (make-instruction . aZ308d) (set-source-info! . aZ308c) (bignum? . aZ308b) (fast-equal? . aZ308a) (fasl-read . aZ3089) (fasl-write . aZ3088) (time-usage . aZ3087) (os-constant . aZ3086) (time . aZ2e24) (include . aZ2e19)) '() values values '#f '#f '#f '#f) (aZ989@aZ7d5@install-library 'aZ3146 '(system) '() '() '() '() '((gensym-prefix-set! . aZ311a) (write-to-file . aZ3110) (file->list . aZ310f) (file->string . aZ310e) (mosh-cache-dir . aZ59e) (call-process . aZ3104) (local-tz-offset . aZ3103) (microseconds . aZ3102) (directory-list . aZ3101) (expand-path . aZ30ff) (%spawn . aZ30fd) (%waitpid . aZ30fc) (simple-struct-name . aZ30fb) (simple-struct-set! . aZ30fa) (simple-struct-ref . aZ30f9) (make-simple-struct . aZ30f8) (simple-struct? . aZ30f7) (pointer-ref-c-int64 . aZ30f6) (pointer-ref-c-int32 . aZ30f5) (pointer-ref-c-int16 . aZ30f4) (pointer-ref-c-int8 . aZ30f3) (pointer-ref-c-uint64 . aZ30f2) (pointer-ref-c-uint32 . aZ30f1) (pointer-ref-c-uint16 . aZ30f0) (pointer-ref-c-uint8 . aZ30ef) (pointer-set-c-uint64! . aZ30ee) (pointer-set-c-uint32! . aZ30ed) (pointer-set-c-uint16! . aZ30ec) (pointer-set-c-uint8! . aZ30eb) (pointer-set-c-int64! . aZ30ea) (pointer-set-c-int32! . aZ30e9) (pointer-set-c-int16! . aZ30e8) (pointer-set-c-int8! . aZ30e7) (pointer-set-c-pointer! . aZ30e6) (pointer-set-c-double! . aZ30e5) (pointer-set-c-float! . aZ30e4) (pointer-set-c-long-long! . aZ30e3) (pointer-set-c-long! . aZ30e2) (pointer-set-c-int! . aZ30e1) (pointer-set-c-short! . aZ30e0) (pointer-set-c-char! . aZ30df) (pointer-ref-c-pointer . aZ30de) (pointer-ref-c-double . aZ30dd) (pointer-ref-c-float . aZ30dc) (pointer-ref-c-unsigned-long-long . aZ30db) (pointer-ref-c-signed-long-long . aZ30da) (pointer-ref-c-unsigned-long . aZ30d9) (pointer-ref-c-signed-long . aZ30d8) (pointer-ref-c-unsigned-int . aZ30d7) (pointer-ref-c-signed-int . aZ30d6) (pointer-ref-c-unsigned-short . aZ30d5) (pointer-ref-c-signed-short . aZ30d4) (pointer-ref-c-unsigned-char . aZ30d3) (pointer-ref-c-signed-char . aZ30d2) (pointer->integer . aZ30d1) (integer->pointer . aZ30d0) (pointer? . aZ30cf) (shared-errno . aZ30ce) (%ffi-free-c-callback-trampoline . aZ30cd) (%ffi-make-c-callback-trampoline . aZ30cc) (%ffi-free . aZ30cb) (%ffi-malloc . aZ30ca) (%ffi-supported? . aZ30c9) (%ffi-pointer->string . aZ30c8) (%ffi-call . aZ30c7) (%ffi-lookup . aZ30c6) (%ffi-open . aZ30c5) (null-terminated-utf8->string . aZ30c4) (null-terminated-bytevector->string . aZ30c3) (%fork . aZ30c2) (%pipe . aZ30c1) (open-output-string . aZ30bf) (get-output-string . aZ30be) (file-stat-ctime . aZ30bd) (file-stat-atime . aZ30bc) (file-stat-mtime . aZ30bb) (file-size-in-bytes . aZ30ba) (file-writable? . aZ30b9) (file-executable? . aZ30b8) (file-readable? . aZ30b7) (file-regular? . aZ30b6) (file-symbolic-link? . aZ30b5) (file-directory? . aZ30b4) (create-symbolic-link . aZ30b3) (rename-file . aZ30b2) (delete-directory . aZ30b1) (create-directory . aZ30b0) (create-mosh-cache-dir . aZ30af) (get-environment-variables . aZ30ae) (current-exception-handler . aZ30ad) (get-environment-variable . aZ30ac) (join-wraps . aZ30ab) (id->real-label . aZ30aa) (same-marks? . aZ30a9) (same-marks*? . aZ30a8) (disasm . aZ3085) (make-parameter . aZ59c) (socket-port . aZ3084) (socket-shutdown . aZ3083) (socket-close . aZ3082) (socket-send . aZ3081) (socket-recv! . aZ3080) (socket-recv . aZ307f) (make-server-socket . aZ307e) (make-client-socket . aZ307d) (socket-accept . aZ307c) (socket? . aZ307b) (parameterize . aZ2e14)) '() values values '#f '#f '#f '#f)))
(begin (set! aZ2c80@ref (unspecified)) (set! aZ2c82@x* (unspecified)) (set! aZ2c84@add-library-path! (unspecified)) (set! aZ2c86@parse-and-add-library-path (unspecified)) (set! aZ2c88@for-each-with-index (unspecified)) (set! aZ2c8a@rpad (unspecified)) (set! aZ2c8c@condition-printer (unspecified)) (set! aZ2c8e@record->field-alist (unspecified)) (set! aZ2c90@map-with-index (unspecified)) (set! aZ2c92@repl (unspecified)) (set! aZ2c94@trace-printer (unspecified)) (set! aZ2c96@command-line (unspecified)) (set! aZ2c98@local-library-path (unspecified)) (set! aZ2c9a@load/args (unspecified)) (set! aZ2c9c@load (unspecified)) (set! aZ2c9e@ironscheme-build (unspecified)) (set! aZ2ca0@eval-top-level (unspecified)) (set! aZ2ca2@compile-system-libraries (unspecified)) (set! aZ2ca4@compile (unspecified)) (set! aZ2ca6@compile->closure (unspecified)) (set! aZ2ca8@pre-compile-r6rs-file (unspecified)) (set! aZ2caa@load-r6rs-top-level (unspecified)) (set! aZ2cac@load-r6rs-top-level-sexp (unspecified)) (set! aZ2cae@prefix-inc (unspecified)) (set! aZ2cb0@prefix-inc! (unspecified)) (set! aZ2c80@ref (lambda (aZ2ceb@rtd aZ2cec@i aZ2ced@x) (let ((aZ2cf1@val ((record-accessor aZ2ceb@rtd aZ2cec@i) aZ2ced@x))) (if (symbol? aZ2cf1@val) (ungensym aZ2cf1@val) aZ2cf1@val)))) (set! aZ2de3@aZ2c80@ref aZ2c80@ref) (set! aZ2c82@x* '()) (set! aZ2de4@aZ2c82@x* aZ2c82@x*) (set! aZ2c84@add-library-path! (lambda (aZ2cf3@path) (aZ979@aZ7b5@library-path (append (aZ979@aZ7b5@library-path) (list aZ2cf3@path))))) (set! aZ2de5@aZ2c84@add-library-path! aZ2c84@add-library-path!) (set! aZ2c86@parse-and-add-library-path (lambda (aZ2cf5@paths aZ2cf6@message) (let ((aZ2cfa@separator '#f)) (begin (set! aZ2cfa@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((aZ2cfb@t aZ2cf5@paths)) (if aZ2cfb@t ((lambda (aZ2cfd@paths) (for-each (lambda (aZ2cff@path) (if (file-exists? aZ2cff@path) (aZ2c84@add-library-path! (expand-path aZ2cff@path)) (format (current-error-port) aZ2cf6@message aZ2cff@path))) (string-split aZ2cfd@paths aZ2cfa@separator))) aZ2cfb@t) (void))))))) (set! aZ2de6@aZ2c86@parse-and-add-library-path aZ2c86@parse-and-add-library-path) (set! aZ2c88@for-each-with-index (lambda (aZ2d01@proc aZ2d02@lst) (letrec ((aZ2d05@loop (lambda (aZ2d07@i aZ2d08@lst) (if (null? aZ2d08@lst) (if '#f '#f (void)) (begin (aZ2d01@proc aZ2d07@i (car aZ2d08@lst)) (aZ2d05@loop (+ aZ2d07@i '1) (cdr aZ2d08@lst))))))) (aZ2d05@loop '1 aZ2d02@lst)))) (set! aZ2de7@aZ2c88@for-each-with-index aZ2c88@for-each-with-index) (set! aZ2c8a@rpad (lambda (aZ2d0b@str aZ2d0c@pad aZ2d0d@n) (let ((aZ2d11@rest (- aZ2d0d@n (string-length (format '"~a" aZ2d0b@str))))) (let aZ2d17@loop ((aZ2d13@rest aZ2d11@rest) (aZ2d14@ret (format '"~a" aZ2d0b@str))) (if (<= aZ2d13@rest '0) aZ2d14@ret (aZ2d17@loop (- aZ2d13@rest '1) (string-append aZ2d14@ret aZ2d0c@pad))))))) (set! aZ2de8@aZ2c8a@rpad aZ2c8a@rpad) (set! aZ2c8c@condition-printer (lambda (aZ2d19@e aZ2d1a@port) (let ((aZ2d1e@max-condition-len '#f)) (begin (set! aZ2d1e@max-condition-len (apply max (map (lambda (aZ2d2f@c) (string-length (symbol->string (record-type-name (record-rtd aZ2d2f@c))))) (simple-conditions aZ2d19@e)))) (begin (display '" Condition components:\n" aZ2d1a@port) (aZ2c88@for-each-with-index (lambda (aZ2d1f@i aZ2d20@x) (let ((aZ2d23@rtd (record-rtd aZ2d20@x)) (aZ2d24@fields-alist (aZ2c8e@record->field-alist aZ2d20@x))) (begin (format aZ2d1a@port '" ~d. ~a" aZ2d1f@i (aZ2c8a@rpad (symbol->string (record-type-name aZ2d23@rtd)) '" " aZ2d1e@max-condition-len)) (if (null? aZ2d24@fields-alist) (newline aZ2d1a@port) (void)) (let aZ2d2b@loop ((aZ2d27@first '#t) (aZ2d28@fields-alist aZ2d24@fields-alist)) (if (null? aZ2d28@fields-alist) '() (let ((aZ2d2d@field (car aZ2d28@fields-alist))) (begin (if (not aZ2d27@first) (display (aZ2c8a@rpad '"" '" " (+ '4 aZ2d1e@max-condition-len)) aZ2d1a@port) (void)) (display '"       " aZ2d1a@port) (display (car aZ2d2d@field) aZ2d1a@port) (display '": " aZ2d1a@port) (write (cdr aZ2d2d@field) aZ2d1a@port) (newline aZ2d1a@port) (aZ2d2b@loop '#f (cdr aZ2d28@fields-alist))))))))) (simple-conditions aZ2d19@e))))))) (set! aZ2de9@aZ2c8c@condition-printer aZ2c8c@condition-printer) (set! aZ2c8e@record->field-alist (lambda (aZ2d31@r) (let ((aZ2d34@ref '#f)) (begin (set! aZ2d34@ref (lambda (aZ2d3f@rtd aZ2d40@i aZ2d41@x) (let ((aZ2d45@val ((record-accessor aZ2d3f@rtd aZ2d40@i) aZ2d41@x))) (if (symbol? aZ2d45@val) (ungensym aZ2d45@val) aZ2d45@val)))) (let aZ2d39@loop ((aZ2d35@ret '()) (aZ2d36@rtd (record-rtd aZ2d31@r))) (if aZ2d36@rtd (aZ2d39@loop (append aZ2d35@ret (aZ2c90@map-with-index (lambda (aZ2d3b@i aZ2d3c@field) (cons aZ2d3c@field (aZ2d34@ref aZ2d36@rtd aZ2d3b@i aZ2d31@r))) (vector->list (record-type-field-names aZ2d36@rtd)))) (record-type-parent aZ2d36@rtd)) aZ2d35@ret)))))) (set! aZ2dea@aZ2c8e@record->field-alist aZ2c8e@record->field-alist) (set! aZ2c90@map-with-index (lambda (aZ2d47@proc aZ2d48@lst) (let aZ2d51@loop ((aZ2d4b@i '0) (aZ2d4c@lst aZ2d48@lst) (aZ2d4d@ret '())) (if (null? aZ2d4c@lst) (reverse aZ2d4d@ret) (aZ2d51@loop (+ aZ2d4b@i '1) (cdr aZ2d4c@lst) (cons (aZ2d47@proc aZ2d4b@i (car aZ2d4c@lst)) aZ2d4d@ret)))))) (set! aZ2deb@aZ2c90@map-with-index aZ2c90@map-with-index) (set! aZ2c92@repl (lambda aZ2d53@x (let ((aZ2d56@rec '#f)) (begin (set! aZ2d56@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (aZ2d59@aZ2d57) (lambda () (with-exception-handler (lambda (aZ2d5b@e) ((call/cc (lambda (aZ2d5d@aZ2d58) (aZ2d59@aZ2d57 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? aZ2d5b@e) (aZ2c8c@condition-printer aZ2d5b@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" aZ2d5b@e))) (aZ2d5d@aZ2d58 (lambda () (raise-continuable aZ2d5b@e)))))))))) (lambda () (let aZ2d63@loop ((aZ2d5f@line (get-line (current-input-port))) (aZ2d60@accum '"")) (let ((aZ2d66@parentheses-ok? '#f) (aZ2d68@eval-string-print '#f)) (begin (set! aZ2d66@parentheses-ok? (lambda (aZ2d6d@text) (let aZ2d75@loop ((aZ2d6f@chars (string->list aZ2d6d@text)) (aZ2d70@p0 '0) (aZ2d71@p1 '0)) (if (null? aZ2d6f@chars) (= '0 aZ2d70@p0 aZ2d71@p1) (let ((aZ2d77@t (car aZ2d6f@chars))) (if (memv aZ2d77@t '(#\()) (aZ2d75@loop (cdr aZ2d6f@chars) (+ aZ2d70@p0 '1) aZ2d71@p1) (if (memv aZ2d77@t '(#\))) (aZ2d75@loop (cdr aZ2d6f@chars) (- aZ2d70@p0 '1) aZ2d71@p1) (if (memv aZ2d77@t '(#\[)) (aZ2d75@loop (cdr aZ2d6f@chars) aZ2d70@p0 (+ aZ2d71@p1 '1)) (if (memv aZ2d77@t '(#\])) (aZ2d75@loop (cdr aZ2d6f@chars) aZ2d70@p0 (- aZ2d71@p1 '1)) (aZ2d75@loop (cdr aZ2d6f@chars) aZ2d70@p0 aZ2d71@p1)))))))))) (set! aZ2d68@eval-string-print (lambda (aZ2d6b@text) (if (not (or (string=? '"\n" aZ2d6b@text) (= '0 (string-length aZ2d6b@text)))) (write (aZ2ca0@eval-top-level (call-with-port (open-string-input-port aZ2d6b@text) read))) (void)))) (if (eof-object? aZ2d5f@line) (begin (aZ2d68@eval-string-print aZ2d60@accum) (exit)) (let ((aZ2d69@current (string-append aZ2d60@accum aZ2d5f@line))) (if (aZ2d66@parentheses-ok? aZ2d69@current) (aZ2d68@eval-string-print aZ2d69@current) (aZ2d63@loop (get-line (current-input-port)) aZ2d69@current))))))))))))) (newline) (aZ2d56@rec)))) (aZ2d56@rec))))) (set! aZ2dec@aZ2c92@repl aZ2c92@repl) (set! aZ2c94@trace-printer (aZ6bf@aZ59d@make-parameter write)) (set! aZ2ded@aZ2c94@trace-printer aZ2c94@trace-printer) (set! aZ2c96@command-line (aZ6bf@aZ59d@make-parameter (get-command-line))) (set! aZ2dee@aZ2c96@command-line aZ2c96@command-line) (set! aZ2c98@local-library-path (lambda (aZ2d79@filename) (aZ979@aZ7b5@library-path))) (set! aZ2def@aZ2c98@local-library-path aZ2c98@local-library-path) (set! aZ2c9a@load/args (lambda (aZ2d7b@filename . aZ2d7d@args) (begin (apply aZ2caa@load-r6rs-top-level aZ2d7b@filename 'load aZ2d7d@args) (void)))) (set! aZ2df0@aZ2c9a@load/args aZ2c9a@load/args) (set! aZ2c9c@load (lambda (aZ2d7f@filename) (begin (apply aZ2caa@load-r6rs-top-level aZ2d7f@filename 'load (aZ2c96@command-line)) (void)))) (set! aZ2df1@aZ2c9c@load aZ2c9c@load) (set! aZ2c9e@ironscheme-build (lambda () (aZ2c9c@load '"ironscheme-buildscript.ss"))) (set! aZ2df2@aZ2c9e@ironscheme-build aZ2c9e@ironscheme-build) (set! aZ2ca0@eval-top-level (lambda (aZ2d81@x) (aZ28a6@aZe3c@eval aZ2d81@x (aZ28bd@aZe6a@interaction-environment)))) (set! aZ2df3@aZ2ca0@eval-top-level aZ2ca0@eval-top-level) (set! aZ2ca2@compile-system-libraries (lambda () (aZ2ca0@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! aZ2df4@aZ2ca2@compile-system-libraries aZ2ca2@compile-system-libraries) (set! aZ2ca4@compile (lambda (aZ2d83@filename) (aZ2caa@load-r6rs-top-level aZ2d83@filename 'compile))) (set! aZ2df5@aZ2ca4@compile aZ2ca4@compile) (set! aZ2ca6@compile->closure (lambda (aZ2d85@filename) (aZ2caa@load-r6rs-top-level aZ2d85@filename 'closure))) (set! aZ2df6@aZ2ca6@compile->closure aZ2ca6@compile->closure) (set! aZ2ca8@pre-compile-r6rs-file (lambda (aZ2d87@filename) (aZ2caa@load-r6rs-top-level aZ2d87@filename 'compile))) (set! aZ2df7@aZ2ca8@pre-compile-r6rs-file aZ2ca8@pre-compile-r6rs-file) (set! aZ2caa@load-r6rs-top-level (lambda (aZ2d89@filename aZ2d8a@how . aZ2d8d@args) (begin (aZ979@aZ7b5@library-path (aZ2c98@local-library-path aZ2d89@filename)) (let ((aZ2d8f@x* (with-input-from-file aZ2d89@filename (lambda () (let aZ2d91@f () (let ((aZ2d93@x (aZ6b1@aZ581@read-annotated))) (if (eof-object? aZ2d93@x) '() (cons aZ2d93@x (aZ2d91@f))))))))) (let ((aZ2d95@t aZ2d8a@how)) (if (memv aZ2d95@t '(closure)) (aZ28bc@aZe68@pre-compile-r6rs-top-level aZ2d8f@x*) (if (memv aZ2d95@t '(load)) (begin (aZ2c96@command-line (cons aZ2d89@filename (car aZ2d8d@args))) (aZ6c0@aZ59f@mosh-cache-dir (create-mosh-cache-dir)) (if (aZ6c0@aZ59f@mosh-cache-dir) (gensym-prefix-set! (aZ2cb0@prefix-inc! (string-append (aZ6c0@aZ59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aZ2d97@file) ((call/cc (lambda (aZ2d9b@aZ2d99) (lambda () (with-exception-handler (lambda (aZ2d9d@c) ((call/cc (lambda (aZ2d9f@aZ2d9a) (aZ2d9b@aZ2d99 (lambda () (if '#t '#t (aZ2d9f@aZ2d9a (lambda () (raise-continuable aZ2d9d@c)))))))))) (lambda () (delete-file (string-append (aZ6c0@aZ59f@mosh-cache-dir) '"/" aZ2d97@file))))))))) (directory-list (aZ6c0@aZ59f@mosh-cache-dir))) (void)) (let ((aZ2da1@compiled (aZ28bb@aZe66@compile-r6rs-top-level aZ2d8f@x*))) (begin (if (and (aZ6c0@aZ59f@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aZ97d@aZ7bd@serialize-all aZ6ba@aZ593@serialize-library aZ716@aZ6cf@compile-core-expr) (void)) (aZ2da1@compiled)))) (if (memv aZ2d95@t '(compile)) (begin (aZ28bb@aZe66@compile-r6rs-top-level aZ2d8f@x*) (aZ97d@aZ7bd@serialize-all aZ6ba@aZ593@serialize-library aZ716@aZ6cf@compile-core-expr)) (if '#f '#f (void)))))))))) (set! aZ2df8@aZ2caa@load-r6rs-top-level aZ2caa@load-r6rs-top-level) (set! aZ2cac@load-r6rs-top-level-sexp (lambda (aZ2da3@import-spec aZ2da4@thunk) (let ((aZ2daf@aZ2da8 aZ979@aZ7b5@library-path) (aZ2db0@aZ2daa aZ6c0@aZ59f@mosh-cache-dir) (aZ2db1@aZ2dac (aZ2c98@local-library-path '"")) (aZ2db2@aZ2dae (create-mosh-cache-dir))) (let ((aZ2db7@swap (lambda () (begin (let ((aZ2db9@t (aZ2daf@aZ2da8))) (begin (aZ2daf@aZ2da8 aZ2db1@aZ2dac) (set! aZ2db1@aZ2dac aZ2db9@t))) (let ((aZ2dbb@t (aZ2db0@aZ2daa))) (begin (aZ2db0@aZ2daa aZ2db2@aZ2dae) (set! aZ2db2@aZ2dae aZ2dbb@t))))))) (dynamic-wind aZ2db7@swap (lambda () (begin (if (aZ6c0@aZ59f@mosh-cache-dir) (gensym-prefix-set! (aZ2cb0@prefix-inc! (string-append (aZ6c0@aZ59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((aZ2dc1@aZ2dbe aZ2c96@command-line) (aZ2dc2@aZ2dc0 '())) (let ((aZ2dc5@swap (lambda () (let ((aZ2dc7@t (aZ2dc1@aZ2dbe))) (begin (aZ2dc1@aZ2dbe aZ2dc2@aZ2dc0) (set! aZ2dc2@aZ2dc0 aZ2dc7@t)))))) (dynamic-wind aZ2dc5@swap (lambda () ((aZ28bb@aZe66@compile-r6rs-top-level (list (cons 'import aZ2da3@import-spec) (list aZ2da4@thunk))))) aZ2dc5@swap))))) aZ2db7@swap))))) (set! aZ2df9@aZ2cac@load-r6rs-top-level-sexp aZ2cac@load-r6rs-top-level-sexp) (set! aZ2cae@prefix-inc (lambda (aZ2dc9@prefix-string) (let ((aZ2dcb@prefix (symbol->string aZ2dc9@prefix-string))) (let ((aZ2dcd@len (string-length aZ2dcb@prefix))) (let aZ2dd5@loop ((aZ2dcf@i (- aZ2dcd@len '1)) (aZ2dd0@carry? '#t) (aZ2dd1@accum '())) (if (< aZ2dcf@i '0) (string->symbol (list->string (if aZ2dd0@carry? (cons '#\a aZ2dd1@accum) aZ2dd1@accum))) (if aZ2dd0@carry? (let ((aZ2dd7@next-integer (+ '1 (char->integer (string-ref aZ2dcb@prefix aZ2dcf@i))))) (if (= aZ2dd7@next-integer '123) (aZ2dd5@loop (- aZ2dcf@i '1) '#f (cons '#\A aZ2dd1@accum)) (if (= aZ2dd7@next-integer '91) (aZ2dd5@loop (- aZ2dcf@i '1) '#t (cons '#\a aZ2dd1@accum)) (aZ2dd5@loop (- aZ2dcf@i '1) '#f (cons (integer->char aZ2dd7@next-integer) aZ2dd1@accum))))) (aZ2dd5@loop (- aZ2dcf@i '1) '#f (cons (string-ref aZ2dcb@prefix aZ2dcf@i) aZ2dd1@accum))))))))) (set! aZ2dfa@aZ2cae@prefix-inc aZ2cae@prefix-inc) (set! aZ2cb0@prefix-inc! (lambda (aZ2dd9@file) (begin (if (not (file-exists? aZ2dd9@file)) (call-with-output-file aZ2dd9@file (lambda (aZ2ddb@port) (write 'd aZ2ddb@port))) (void)) (let ((aZ2ddd@prefix (call-with-input-file aZ2dd9@file read))) (if (main-vm?) (let ((aZ2ddf@next-prefix (aZ2cae@prefix-inc aZ2ddd@prefix))) (begin (call-with-port (open-file-output-port aZ2dd9@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (aZ2de1@port) (write aZ2ddf@next-prefix aZ2de1@port))) aZ2ddd@prefix)) aZ2ddd@prefix))))) (set! aZ2dfb@aZ2cb0@prefix-inc! aZ2cb0@prefix-inc!) (begin (aZ97e@aZ7bf@current-precompiled-library-loader aZ6bb@aZ595@load-serialized-library) (set-symbol-value! 'load aZ2c9c@load) (set-symbol-value! 'pre-compile-r6rs-file aZ2ca8@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs aZ2ca0@eval-top-level) (set-symbol-value! 'int-env-syms aZ289d@aZe2a@interaction-environment-symbols) (set-symbol-value! 'expanded2core aZ715@aZ6cd@expanded->core) (set-symbol-value! 'trace-printer aZ2c94@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (aZ2cb1@c) (condition (aZ2bdd@aZ29e7@make-non-continuable-violation) (aZ2bd3@aZ29ce@make-who-condition 'raise) (aZ2b97@aZ292f@make-message-condition '"returned from non-continuable exception") (aZ2bc9@aZ29b3@make-irritants-condition (list aZ2cb1@c))))) (aZ2c86@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (aZ2c86@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (aZ2c84@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (aZ2c84@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (aZ2c84@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((aZ2cb3@prefix (lambda (aZ2cb5@ext aZ2cb6@ls) (append (map (lambda (aZ2cb9@x) (string-append aZ2cb5@ext aZ2cb9@x)) aZ2cb6@ls) aZ2cb6@ls)))) (aZ97a@aZ7b7@library-extensions (aZ2cb3@prefix '".mosh" (aZ97a@aZ7b7@library-extensions)))) (current-exception-handler (lambda (aZ2cbb@c) (if (condition? aZ2cbb@c) (aZ2c8c@condition-printer aZ2cbb@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" aZ2cbb@c)))) (if ((call/cc (lambda (aZ2cbf@aZ2cbd) (lambda () (with-exception-handler (lambda (aZ2cc1@c) ((call/cc (lambda (aZ2cc3@aZ2cbe) (aZ2cbf@aZ2cbd (lambda () (if '#t '#f (aZ2cc3@aZ2cbe (lambda () (raise-continuable aZ2cc1@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (aZ2cac@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (aZ2c96@command-line)) (let ((aZ2ccd@aZ2cc6 aZ2c96@command-line) (aZ2cce@aZ2cc8 aZ6c0@aZ59f@mosh-cache-dir) (aZ2ccf@aZ2cca '()) (aZ2cd0@aZ2ccc (create-mosh-cache-dir))) (let ((aZ2cd5@swap (lambda () (begin (let ((aZ2cd7@t (aZ2ccd@aZ2cc6))) (begin (aZ2ccd@aZ2cc6 aZ2ccf@aZ2cca) (set! aZ2ccf@aZ2cca aZ2cd7@t))) (let ((aZ2cd9@t (aZ2cce@aZ2cc8))) (begin (aZ2cce@aZ2cc8 aZ2cd0@aZ2ccc) (set! aZ2cd0@aZ2ccc aZ2cd9@t))))))) (dynamic-wind aZ2cd5@swap (lambda () (begin (if (aZ6c0@aZ59f@mosh-cache-dir) (gensym-prefix-set! (aZ2cb0@prefix-inc! (string-append (aZ6c0@aZ59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (aZ2c92@repl))) aZ2cd5@swap))) (begin (aZ979@aZ7b5@library-path (aZ2c98@local-library-path (car (aZ2c96@command-line)))) (set! aZ2c82@x* (with-input-from-file (car (aZ2c96@command-line)) (lambda () (let aZ2cdb@f () (let ((aZ2cdd@x (aZ6b1@aZ581@read-annotated))) (if (eof-object? aZ2cdd@x) '() (cons aZ2cdd@x (aZ2cdb@f)))))))) (aZ2c96@command-line (cons (car (aZ2c96@command-line)) (cdr (aZ2c96@command-line)))) (aZ6c0@aZ59f@mosh-cache-dir (create-mosh-cache-dir)) (if (aZ6c0@aZ59f@mosh-cache-dir) (gensym-prefix-set! (aZ2cb0@prefix-inc! (string-append (aZ6c0@aZ59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aZ2cdf@file) ((call/cc (lambda (aZ2ce3@aZ2ce1) (lambda () (with-exception-handler (lambda (aZ2ce5@c) ((call/cc (lambda (aZ2ce7@aZ2ce2) (aZ2ce3@aZ2ce1 (lambda () (if '#t '#t (aZ2ce7@aZ2ce2 (lambda () (raise-continuable aZ2ce5@c)))))))))) (lambda () (delete-file (string-append (aZ6c0@aZ59f@mosh-cache-dir) '"/" aZ2cdf@file))))))))) (directory-list (aZ6c0@aZ59f@mosh-cache-dir))) (void)) (let ((aZ2ce9@compiled (aZ28bb@aZe66@compile-r6rs-top-level aZ2c82@x*))) (begin (if (and (aZ6c0@aZ59f@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aZ97d@aZ7bd@serialize-all aZ6ba@aZ593@serialize-library aZ716@aZ6cf@compile-core-expr) (void)) (aZ2ce9@compiled))))))))
