;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! jW2907@library-file-path->cache-path (unspecified)) (set! jW2909@read-annotated (unspecified)) (set! jW290b@annotation-stripped (unspecified)) (set! jW290d@annotation? (unspecified)) (set! jW290f@annotation-source (unspecified)) (set! jW2911@annotation-expression (unspecified)) (set! jW2913@scm->fasl (unspecified)) (set! jW2915@fasl-save (unspecified)) (set! jW2917@fasl-load (unspecified)) (set! jW2919@verbose? (unspecified)) (set! jW291b@serialize-library (unspecified)) (set! jW291d@load-serialized-library (unspecified)) (set! jW291f@make-record-printer (unspecified)) (set! jW2921@compile-core (unspecified)) (set! jW2923@read-library-source-file (unspecified)) (set! jW2925@make-parameter (unspecified)) (set! jW2927@mosh-cache-dir (unspecified)) (set! jW29bd@file-options-spec (unspecified)) (set! jW2907@library-file-path->cache-path (lambda (jW29be@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jW29c4@jW29c1 jW29c5@jW29c3) (let ((jW29c8@extract jW29c5@jW29c3) (jW29c9@p jW29c4@jW29c1)) (letrec* ((jW29cd@display-hex (lambda (jW29d6@n) (if (<= '0 jW29d6@n '9) (display jW29d6@n jW29c9@p) (display (integer->char (+ (char->integer '#\a) (- jW29d6@n '10))) jW29c9@p))))) (begin (let jW29d0@f ((jW29ce@ls (string-split jW29be@x '#\/))) (if (not (null? jW29ce@ls)) (begin (display '"_" jW29c9@p) (for-each (lambda (jW29d2@c) (if (or (char<=? '#\a jW29d2@c '#\z) (char<=? '#\A jW29d2@c '#\Z) (char<=? '#\0 jW29d2@c '#\9) (memv jW29d2@c '(#\- #\. #\_ #\~))) (display jW29d2@c jW29c9@p) (begin (display '"%" jW29c9@p) (let ((jW29d4@n (char->integer jW29d2@c))) (begin (jW29cd@display-hex (quotient jW29d4@n '16)) (jW29cd@display-hex (remainder jW29d4@n '16))))))) (string->list (car jW29ce@ls))) (jW29d0@f (cdr jW29ce@ls))) (void))) (jW29c8@extract)))))))) (set! jW2a38@jW2907@library-file-path->cache-path jW2907@library-file-path->cache-path) (set! jW2909@read-annotated read) (set! jW2a39@jW2909@read-annotated jW2909@read-annotated) (set! jW290b@annotation-stripped (lambda (jW29d8@x) (if (pair? jW29d8@x) (cons (jW290b@annotation-stripped (car jW29d8@x)) (jW290b@annotation-stripped (cdr jW29d8@x))) (if (procedure? jW29d8@x) (set-source-info! jW29d8@x '#f) jW29d8@x)))) (set! jW2a3a@jW290b@annotation-stripped jW290b@annotation-stripped) (set! jW290d@annotation? (lambda (jW29da@x) (or (and (annotated-pair? jW29da@x) (source-info jW29da@x)) (and (procedure? jW29da@x) (source-info jW29da@x))))) (set! jW2a3b@jW290d@annotation? jW290d@annotation?) (set! jW290f@annotation-source (lambda (jW29dc@x) (source-info jW29dc@x))) (set! jW2a3c@jW290f@annotation-source jW290f@annotation-source) (set! jW2911@annotation-expression (lambda (jW29de@x) (if (annotated-pair? jW29de@x) (cons (car jW29de@x) (cdr jW29de@x)) (if (procedure? jW29de@x) (set-source-info! jW29de@x '#f) jW29de@x)))) (set! jW2a3d@jW2911@annotation-expression jW2911@annotation-expression) (set! jW2913@scm->fasl (lambda (jW29e0@filename) (string-append (jW2927@mosh-cache-dir) '"/" (jW2907@library-file-path->cache-path jW29e0@filename) '".mosh-fasl"))) (set! jW2a3e@jW2913@scm->fasl jW2913@scm->fasl) (set! jW2915@fasl-save (lambda (jW29e2@filename jW29e3@obj) (call-with-port (open-file-output-port jW29e2@filename) (lambda (jW29e6@port) ((symbol-value 'fasl-write!) jW29e3@obj jW29e6@port))))) (set! jW2a3f@jW2915@fasl-save jW2915@fasl-save) (set! jW2917@fasl-load (lambda (jW29e8@filename) (call-with-port (open-file-input-port jW29e8@filename) (symbol-value 'fasl-read!)))) (set! jW2a40@jW2917@fasl-load jW2917@fasl-load) (set! jW2919@verbose? (symbol-value '%verbose)) (set! jW2a41@jW2919@verbose? jW2919@verbose?) (set! jW291b@serialize-library (lambda (jW29ea@filename jW29eb@obj) (begin (if jW2919@verbose? (format (current-error-port) '"serialize-library ~a\n..." jW29ea@filename) (void)) (let ((jW29ee@expanded2core (symbol-value 'expanded2core))) (let ((jW29f0@compile (symbol-value 'compile-w/o-halt))) (let ((jW29f2@code jW29eb@obj)) (let ((jW29f4@pivot (cddddr (cddddr jW29f2@code)))) (let ((jW29f6@visit (jW29f0@compile (jW29ee@expanded2core (car jW29f4@pivot))))) (begin (set-car! jW29f4@pivot jW29f6@visit) (let ((jW29f8@pivot (cdr jW29f4@pivot))) (let ((jW29fa@invoke (jW29f0@compile (jW29ee@expanded2core (car jW29f8@pivot))))) (set-car! jW29f8@pivot jW29fa@invoke))))))))) (let ((jW29fc@fasl-file (jW2913@scm->fasl jW29ea@filename))) (begin (if (file-exists? jW29fc@fasl-file) (delete-file jW29fc@fasl-file) (void)) ((call/cc (lambda (jW2a00@jW29fe) (lambda () (with-exception-handler (lambda (jW2a02@c) ((call/cc (lambda (jW2a04@jW29ff) (jW2a00@jW29fe (lambda () (if '#t (begin (if jW2919@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" jW29ea@filename) (void)) (if (file-exists? jW29fc@fasl-file) (delete-file jW29fc@fasl-file) (void)) '#f) (jW2a04@jW29ff (lambda () (raise-continuable jW2a02@c)))))))))) (lambda () (jW2915@fasl-save jW29fc@fasl-file jW29eb@obj)))))))))))) (set! jW2a42@jW291b@serialize-library jW291b@serialize-library) (set! jW291d@load-serialized-library (lambda (jW2a06@filename jW2a07@obj) (and (jW2927@mosh-cache-dir) (let ((jW2a0a@fasl-file (jW2913@scm->fasl jW2a06@filename))) (if (and (file-exists? jW2a0a@fasl-file) ((symbol-value 'file-newer?) jW2a0a@fasl-file jW2a06@filename)) (let ((jW2a0c@expanded2core (symbol-value 'expanded2core))) (let ((jW2a0e@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((jW2a10@code (jW2917@fasl-load jW2a0a@fasl-file))) (let ((jW2a12@pivot (cddddr (cddddr jW2a10@code)))) (let ((jW2a14@visit (car jW2a12@pivot))) (let ((jW2a16@visit-proc (lambda () (jW2a0e@eval-compiled-core jW2a14@visit)))) (begin (set-car! jW2a12@pivot jW2a16@visit-proc) (let ((jW2a18@pivot (cdr jW2a12@pivot))) (let ((jW2a1a@invoke (car jW2a18@pivot))) (begin (set-car! jW2a18@pivot (lambda () (jW2a0e@eval-compiled-core jW2a1a@invoke))) (apply jW2a07@obj jW2a10@code))))))))))) '#f))))) (set! jW2a43@jW291d@load-serialized-library jW291d@load-serialized-library) (set! jW291f@make-record-printer (lambda (jW2a1c@name jW2a1d@printer) (lambda jW2a20@x (begin (display '"record printer") (for-each display jW2a20@x))))) (set! jW2a44@jW291f@make-record-printer jW291f@make-record-printer) (set! jW2921@compile-core (lambda jW2a22@x (apply error 'comile-core '"not implementated" jW2a22@x))) (set! jW2a45@jW2921@compile-core jW2921@compile-core) (set! jW2923@read-library-source-file (lambda (jW2a24@file-name) (with-input-from-file jW2a24@file-name jW2909@read-annotated))) (set! jW2a46@jW2923@read-library-source-file jW2923@read-library-source-file) (set! jW2925@make-parameter (lambda jW2a34 (let ((jW2a35 (length jW2a34))) (if (= jW2a35 '1) (apply (lambda (jW2a26@x) (jW2925@make-parameter jW2a26@x (lambda (jW2a28@x) jW2a28@x))) jW2a34) (if (= jW2a35 '2) (apply (lambda (jW2a2a@x jW2a2b@fender) (let ((jW2a2e@x (jW2a2b@fender jW2a2a@x))) (lambda jW2a32 (let ((jW2a33 (length jW2a32))) (if (= jW2a33 '0) (apply (lambda () jW2a2e@x) jW2a32) (if (= jW2a33 '1) (apply (lambda (jW2a30@v) (set! jW2a2e@x (jW2a2b@fender jW2a30@v))) jW2a32) (error 'apply '"invalid arg count"))))))) jW2a34) (error 'apply '"invalid arg count")))))) (set! jW2a47@jW2925@make-parameter jW2925@make-parameter) (set! jW2927@mosh-cache-dir (jW2925@make-parameter '#f)) (set! jW2a48@jW2927@mosh-cache-dir jW2927@mosh-cache-dir) (set! jW29bd@file-options-spec (lambda (jW2a36@x) jW2a36@x)) (set! jW2a49@jW29bd@file-options-spec jW29bd@file-options-spec) (void))
(begin (set! jW2a4f@current-primitive-locations (unspecified)) (set! jW2a51@mutable? (unspecified)) (set! jW2a53@rewriter (unspecified)) (set! jW2a55@expanded->core (unspecified)) (set! jW2a57@compile-core-expr (unspecified)) (set! jW2a59@pretty-print (unspecified)) (set! jW2a5b@compile-core-expr-to-port (unspecified)) (set! jW2a4f@current-primitive-locations (jW2a47@jW2925@make-parameter (lambda (jW2a5c@x) '#f) (lambda (jW2a5e@p) jW2a5e@p))) (set! jW2a9a@jW2a4f@current-primitive-locations jW2a4f@current-primitive-locations) (set! jW2a51@mutable? (lambda (jW2a60@x) (or (pair? jW2a60@x) (vector? jW2a60@x) (hashtable? jW2a60@x)))) (set! jW2a9b@jW2a51@mutable? jW2a51@mutable?) (set! jW2a53@rewriter (lambda (jW2a62@quote-hack?) (letrec* ((jW2a65@f (lambda (jW2a66@x) (if (pair? jW2a66@x) (let ((jW2a68@t (car jW2a66@x))) (if (memv jW2a68@t '(quote)) (if (and jW2a62@quote-hack? (jW2a51@mutable? (cadr jW2a66@x))) (let ((jW2a6a@g (gensym))) (begin (set-symbol-value! jW2a6a@g (cadr jW2a66@x)) jW2a6a@g)) jW2a66@x) (if (memv jW2a68@t '(case-lambda)) (cons 'case-lambda (map (lambda (jW2a6c@x) (cons (car jW2a6c@x) (map jW2a65@f (cdr jW2a6c@x)))) (cdr jW2a66@x))) (if (memv jW2a68@t '(lambda)) (cons* 'lambda (cadr jW2a66@x) (map jW2a65@f (cddr jW2a66@x))) (if (memv jW2a68@t '(letrec)) (let ((jW2a6e@bindings (cadr jW2a66@x)) (jW2a6f@body* (cddr jW2a66@x))) (let ((jW2a72@lhs* (map car jW2a6e@bindings)) (jW2a73@rhs* (map cadr jW2a6e@bindings))) (cons* 'letrec (map list jW2a72@lhs* (map jW2a65@f jW2a73@rhs*)) (map jW2a65@f jW2a6f@body*)))) (if (memv jW2a68@t '(letrec*)) (let ((jW2a76@bindings (cadr jW2a66@x)) (jW2a77@body* (cddr jW2a66@x))) (let ((jW2a7a@lhs* (map car jW2a76@bindings)) (jW2a7b@rhs* (map cadr jW2a76@bindings))) (cons* 'letrec* (map list jW2a7a@lhs* (map jW2a65@f jW2a7b@rhs*)) (map jW2a65@f jW2a77@body*)))) (if (memv jW2a68@t '(library-letrec*)) (let ((jW2a7e@name (cadr jW2a66@x)) (jW2a7f@x (cdr jW2a66@x))) (let ((jW2a82@bindings (cadr jW2a7f@x)) (jW2a83@body* (cddr jW2a7f@x))) (let ((jW2a86@lhs* (map car jW2a82@bindings)) (jW2a87@lhs** (map cadr jW2a82@bindings)) (jW2a88@rhs* (map caddr jW2a82@bindings))) (cons* 'library-letrec* jW2a7e@name (map list jW2a86@lhs* jW2a87@lhs** (map jW2a65@f jW2a88@rhs*)) (map jW2a65@f jW2a83@body*))))) (if (memv jW2a68@t '(begin)) (cons 'begin (map jW2a65@f (cdr jW2a66@x))) (if (memv jW2a68@t '(set!)) (list 'set! (cadr jW2a66@x) (jW2a65@f (caddr jW2a66@x))) (if (memv jW2a68@t '(primitive)) (let ((jW2a8c@op (cadr jW2a66@x))) (let ((jW2a8e@t ((jW2a4f@current-primitive-locations) jW2a8c@op))) (if jW2a8e@t ((lambda (jW2a90@loc) jW2a90@loc) jW2a8e@t) jW2a8c@op))) (if (memv jW2a68@t '(define)) jW2a66@x (if (list? jW2a66@x) (map jW2a65@f jW2a66@x) (error 'rewrite '"invalid form ~s ~s" jW2a66@x (list? jW2a66@x)))))))))))))) jW2a66@x)))) jW2a65@f))) (set! jW2a9c@jW2a53@rewriter jW2a53@rewriter) (set! jW2a55@expanded->core (lambda (jW2a92@x) ((jW2a53@rewriter '#f) jW2a92@x))) (set! jW2a9d@jW2a55@expanded->core jW2a55@expanded->core) (set! jW2a57@compile-core-expr (lambda (jW2a94@x) ((jW2a53@rewriter '#f) jW2a94@x))) (set! jW2a9e@jW2a57@compile-core-expr jW2a57@compile-core-expr) (set! jW2a59@pretty-print write) (set! jW2a9f@jW2a59@pretty-print jW2a59@pretty-print) (set! jW2a5b@compile-core-expr-to-port (lambda (jW2a96@x jW2a97@p) (jW2a59@pretty-print ((jW2a53@rewriter '#f) jW2a96@x) jW2a97@p))) (set! jW2aa0@jW2a5b@compile-core-expr-to-port jW2a5b@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! jW2aef@make-collection (unspecified)) (set! jW2af1@current-library-collection (unspecified)) (set! jW2af3@rp (unspecified)) (set! jW2afd@library? (unspecified)) (set! jW2aff@library-id (unspecified)) (set! jW2b01@set-library-id! (unspecified)) (set! jW2b03@library-name (unspecified)) (set! jW2b05@set-library-name! (unspecified)) (set! jW2b07@library-version (unspecified)) (set! jW2b09@set-library-version! (unspecified)) (set! jW2b0b@library-imp* (unspecified)) (set! jW2b0d@set-library-imp*! (unspecified)) (set! jW2b0f@library-vis* (unspecified)) (set! jW2b11@set-library-vis*! (unspecified)) (set! jW2b13@library-inv* (unspecified)) (set! jW2b15@set-library-inv*! (unspecified)) (set! jW2b17@library-subst (unspecified)) (set! jW2b19@set-library-subst! (unspecified)) (set! jW2b1b@library-env (unspecified)) (set! jW2b1d@set-library-env! (unspecified)) (set! jW2b1f@library-visit-state (unspecified)) (set! jW2b21@set-library-visit-state! (unspecified)) (set! jW2b23@library-invoke-state (unspecified)) (set! jW2b25@set-library-invoke-state! (unspecified)) (set! jW2b27@library-visit-code (unspecified)) (set! jW2b29@set-library-visit-code! (unspecified)) (set! jW2b2b@library-invoke-code (unspecified)) (set! jW2b2d@set-library-invoke-code! (unspecified)) (set! jW2b2f@library-visible? (unspecified)) (set! jW2b31@set-library-visible?! (unspecified)) (set! jW2b33@library-source-file-name (unspecified)) (set! jW2b35@set-library-source-file-name! (unspecified)) (set! jW2b37@dummy (unspecified)) (set! jW2b39@find-dependencies (unspecified)) (set! jW2b3b@find-library-by (unspecified)) (set! jW2b3d@library-path (unspecified)) (set! jW2b3f@library-extensions (unspecified)) (set! jW2b41@library-name->file-name (unspecified)) (set! jW2b43@file-locator (unspecified)) (set! jW2b45@serialize-all (unspecified)) (set! jW2b47@current-precompiled-library-loader (unspecified)) (set! jW2b49@try-load-from-file (unspecified)) (set! jW2b4b@library-loader (unspecified)) (set! jW2b4d@current-library-expander (unspecified)) (set! jW2b4f@external-pending-libraries (unspecified)) (set! jW2b51@find-external-library (unspecified)) (set! jW2b53@find-library-by-name (unspecified)) (set! jW2b55@library-exists? (unspecified)) (set! jW2b57@find-library-by-spec/die (unspecified)) (set! jW2b59@label->binding-table (unspecified)) (set! jW2b5b@install-library-record (unspecified)) (set! jW2b5d@install-library (unspecified)) (set! jW2b5f@imported-label->binding (unspecified)) (set! jW2b61@invoke-library (unspecified)) (set! jW2b63@visit-library (unspecified)) (set! jW2b65@invoke-library-by-spec (unspecified)) (set! jW2b67@installed-libraries (unspecified)) (set! jW2b69@library-spec (unspecified)) (set! jW2aef@make-collection (lambda () (let ((jW2b6a@set '())) (letrec* ((jW2b6d@set-cons (lambda (jW2b72@x jW2b73@ls) (if (memq jW2b72@x jW2b73@ls) jW2b73@ls (cons jW2b72@x jW2b73@ls))))) (lambda jW2b70 (let ((jW2b71 (length jW2b70))) (if (= jW2b71 '0) (apply (lambda () jW2b6a@set) jW2b70) (if (= jW2b71 '1) (apply (lambda (jW2b6e@x) (set! jW2b6a@set (jW2b6d@set-cons jW2b6e@x jW2b6a@set))) jW2b70) (error 'apply '"invalid arg count"))))))))) (set! jW2cde@jW2aef@make-collection jW2aef@make-collection) (set! jW2af1@current-library-collection (jW2a47@jW2925@make-parameter (jW2aef@make-collection) (lambda (jW2b76@x) (begin (if (not (procedure? jW2b76@x)) (assertion-violation 'current-library-collection '"not a procedure" jW2b76@x) (void)) jW2b76@x)))) (set! jW2cdf@jW2af1@current-library-collection jW2af1@current-library-collection) (set! jW2af3@rp (jW2a44@jW291f@make-record-printer 'library (lambda (jW2b78@x jW2b79@p jW2b7a@wr) (begin (if (not (jW2afd@library? jW2b78@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (jW2b07@library-version jW2b78@x)) (jW2b03@library-name jW2b78@x) (append (jW2b03@library-name jW2b78@x) (list (jW2b07@library-version jW2b78@x))))) jW2b79@p))))) (set! jW2ce0@jW2af3@rp jW2af3@rp) (set! jW2afd@library? (lambda (jW2b7e@x) (and (simple-struct? jW2b7e@x) (eq? (simple-struct-name jW2b7e@x) 'library)))) (set! jW2ce1@jW2afd@library? jW2afd@library?) (set! jW2aff@library-id (lambda (jW2b80@x) (simple-struct-ref jW2b80@x '0))) (set! jW2ce2@jW2aff@library-id jW2aff@library-id) (set! jW2b01@set-library-id! (lambda (jW2b82@x jW2b83@val) (simple-struct-set! jW2b82@x '0 jW2b83@val))) (set! jW2ce3@jW2b01@set-library-id! jW2b01@set-library-id!) (set! jW2b03@library-name (lambda (jW2b86@x) (simple-struct-ref jW2b86@x '1))) (set! jW2ce4@jW2b03@library-name jW2b03@library-name) (set! jW2b05@set-library-name! (lambda (jW2b88@x jW2b89@val) (simple-struct-set! jW2b88@x '1 jW2b89@val))) (set! jW2ce5@jW2b05@set-library-name! jW2b05@set-library-name!) (set! jW2b07@library-version (lambda (jW2b8c@x) (simple-struct-ref jW2b8c@x '2))) (set! jW2ce6@jW2b07@library-version jW2b07@library-version) (set! jW2b09@set-library-version! (lambda (jW2b8e@x jW2b8f@val) (simple-struct-set! jW2b8e@x '2 jW2b8f@val))) (set! jW2ce7@jW2b09@set-library-version! jW2b09@set-library-version!) (set! jW2b0b@library-imp* (lambda (jW2b92@x) (simple-struct-ref jW2b92@x '3))) (set! jW2ce8@jW2b0b@library-imp* jW2b0b@library-imp*) (set! jW2b0d@set-library-imp*! (lambda (jW2b94@x jW2b95@val) (simple-struct-set! jW2b94@x '3 jW2b95@val))) (set! jW2ce9@jW2b0d@set-library-imp*! jW2b0d@set-library-imp*!) (set! jW2b0f@library-vis* (lambda (jW2b98@x) (simple-struct-ref jW2b98@x '4))) (set! jW2cea@jW2b0f@library-vis* jW2b0f@library-vis*) (set! jW2b11@set-library-vis*! (lambda (jW2b9a@x jW2b9b@val) (simple-struct-set! jW2b9a@x '4 jW2b9b@val))) (set! jW2ceb@jW2b11@set-library-vis*! jW2b11@set-library-vis*!) (set! jW2b13@library-inv* (lambda (jW2b9e@x) (simple-struct-ref jW2b9e@x '5))) (set! jW2cec@jW2b13@library-inv* jW2b13@library-inv*) (set! jW2b15@set-library-inv*! (lambda (jW2ba0@x jW2ba1@val) (simple-struct-set! jW2ba0@x '5 jW2ba1@val))) (set! jW2ced@jW2b15@set-library-inv*! jW2b15@set-library-inv*!) (set! jW2b17@library-subst (lambda (jW2ba4@x) (simple-struct-ref jW2ba4@x '6))) (set! jW2cee@jW2b17@library-subst jW2b17@library-subst) (set! jW2b19@set-library-subst! (lambda (jW2ba6@x jW2ba7@val) (simple-struct-set! jW2ba6@x '6 jW2ba7@val))) (set! jW2cef@jW2b19@set-library-subst! jW2b19@set-library-subst!) (set! jW2b1b@library-env (lambda (jW2baa@x) (simple-struct-ref jW2baa@x '7))) (set! jW2cf0@jW2b1b@library-env jW2b1b@library-env) (set! jW2b1d@set-library-env! (lambda (jW2bac@x jW2bad@val) (simple-struct-set! jW2bac@x '7 jW2bad@val))) (set! jW2cf1@jW2b1d@set-library-env! jW2b1d@set-library-env!) (set! jW2b1f@library-visit-state (lambda (jW2bb0@x) (simple-struct-ref jW2bb0@x '8))) (set! jW2cf2@jW2b1f@library-visit-state jW2b1f@library-visit-state) (set! jW2b21@set-library-visit-state! (lambda (jW2bb2@x jW2bb3@val) (simple-struct-set! jW2bb2@x '8 jW2bb3@val))) (set! jW2cf3@jW2b21@set-library-visit-state! jW2b21@set-library-visit-state!) (set! jW2b23@library-invoke-state (lambda (jW2bb6@x) (simple-struct-ref jW2bb6@x '9))) (set! jW2cf4@jW2b23@library-invoke-state jW2b23@library-invoke-state) (set! jW2b25@set-library-invoke-state! (lambda (jW2bb8@x jW2bb9@val) (simple-struct-set! jW2bb8@x '9 jW2bb9@val))) (set! jW2cf5@jW2b25@set-library-invoke-state! jW2b25@set-library-invoke-state!) (set! jW2b27@library-visit-code (lambda (jW2bbc@x) (simple-struct-ref jW2bbc@x '10))) (set! jW2cf6@jW2b27@library-visit-code jW2b27@library-visit-code) (set! jW2b29@set-library-visit-code! (lambda (jW2bbe@x jW2bbf@val) (simple-struct-set! jW2bbe@x '10 jW2bbf@val))) (set! jW2cf7@jW2b29@set-library-visit-code! jW2b29@set-library-visit-code!) (set! jW2b2b@library-invoke-code (lambda (jW2bc2@x) (simple-struct-ref jW2bc2@x '11))) (set! jW2cf8@jW2b2b@library-invoke-code jW2b2b@library-invoke-code) (set! jW2b2d@set-library-invoke-code! (lambda (jW2bc4@x jW2bc5@val) (simple-struct-set! jW2bc4@x '11 jW2bc5@val))) (set! jW2cf9@jW2b2d@set-library-invoke-code! jW2b2d@set-library-invoke-code!) (set! jW2b2f@library-visible? (lambda (jW2bc8@x) (simple-struct-ref jW2bc8@x '12))) (set! jW2cfa@jW2b2f@library-visible? jW2b2f@library-visible?) (set! jW2b31@set-library-visible?! (lambda (jW2bca@x jW2bcb@val) (simple-struct-set! jW2bca@x '12 jW2bcb@val))) (set! jW2cfb@jW2b31@set-library-visible?! jW2b31@set-library-visible?!) (set! jW2b33@library-source-file-name (lambda (jW2bce@x) (simple-struct-ref jW2bce@x '13))) (set! jW2cfc@jW2b33@library-source-file-name jW2b33@library-source-file-name) (set! jW2b35@set-library-source-file-name! (lambda (jW2bd0@x jW2bd1@val) (simple-struct-set! jW2bd0@x '13 jW2bd1@val))) (set! jW2cfd@jW2b35@set-library-source-file-name! jW2b35@set-library-source-file-name!) (set! jW2b37@dummy '3) (set! jW2cfe@jW2b37@dummy jW2b37@dummy) (set! jW2b39@find-dependencies (lambda (jW2bd4@ls) (if (null? jW2bd4@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! jW2cff@jW2b39@find-dependencies jW2b39@find-dependencies) (set! jW2b3b@find-library-by (lambda (jW2bd6@pred) (let jW2bda@f ((jW2bd8@ls ((jW2af1@current-library-collection)))) (if (null? jW2bd8@ls) '#f (if (jW2bd6@pred (car jW2bd8@ls)) (car jW2bd8@ls) (jW2bda@f (cdr jW2bd8@ls))))))) (set! jW2d00@jW2b3b@find-library-by jW2b3b@find-library-by) (set! jW2b3d@library-path (jW2a47@jW2925@make-parameter '(".") (lambda (jW2bdc@x) (if (and (list? jW2bdc@x) (for-all string? jW2bdc@x)) (map (lambda (jW2bde@x) jW2bde@x) jW2bdc@x) (assertion-violation 'library-path '"not a list of strings" jW2bdc@x))))) (set! jW2d01@jW2b3d@library-path jW2b3d@library-path) (set! jW2b3f@library-extensions (jW2a47@jW2925@make-parameter '(".sls" ".ss" ".scm") (lambda (jW2be0@x) (if (and (list? jW2be0@x) (for-all string? jW2be0@x)) (map (lambda (jW2be2@x) jW2be2@x) jW2be0@x) (assertion-violation 'library-extensions '"not a list of strings" jW2be0@x))))) (set! jW2d02@jW2b3f@library-extensions jW2b3f@library-extensions) (set! jW2b41@library-name->file-name (lambda (jW2be4@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jW2bea@jW2be7 jW2beb@jW2be9) (let ((jW2bee@extract jW2beb@jW2be9) (jW2bef@p jW2bea@jW2be7)) (letrec* ((jW2bf3@display-hex (lambda (jW2bfc@n) (if (<= '0 jW2bfc@n '9) (display jW2bfc@n jW2bef@p) (display (integer->char (+ (char->integer '#\a) (- jW2bfc@n '10))) jW2bef@p))))) (begin (let jW2bf6@f ((jW2bf4@ls jW2be4@x)) (if (not (null? jW2bf4@ls)) (begin (display '"/" jW2bef@p) (for-each (lambda (jW2bf8@c) (if (or (char<=? '#\a jW2bf8@c '#\z) (char<=? '#\A jW2bf8@c '#\Z) (char<=? '#\0 jW2bf8@c '#\9) (memv jW2bf8@c '(#\- #\. #\_ #\~))) (display jW2bf8@c jW2bef@p) (begin (display '"%" jW2bef@p) (let ((jW2bfa@n (char->integer jW2bf8@c))) (begin (jW2bf3@display-hex (quotient jW2bfa@n '16)) (jW2bf3@display-hex (remainder jW2bfa@n '16))))))) (string->list (symbol->string (car jW2bf4@ls)))) (jW2bf6@f (cdr jW2bf4@ls))) (void))) (jW2bee@extract)))))))) (set! jW2d03@jW2b41@library-name->file-name jW2b41@library-name->file-name) (set! jW2b43@file-locator (jW2a47@jW2925@make-parameter (lambda (jW2bfe@x) (let ((jW2c00@str (jW2b41@library-name->file-name jW2bfe@x))) (let jW2c08@f ((jW2c02@ls (jW2b3d@library-path)) (jW2c03@exts (jW2b3f@library-extensions)) (jW2c04@failed-list '())) (if (null? jW2c02@ls) (letrec* ((jW2c12@jW2c0d (make-record-type-descriptor '&library-resolution &condition-rtd 'jW2c10 '#f '#f '#((immutable library) (immutable files)))) (jW2c14@jW2c0f '#f) (jW2c16@jW2c0e (make-record-constructor-descriptor jW2c12@jW2c0d &condition-rcd jW2c14@jW2c0f)) (jW2c19@jW2c0c (record-predicate jW2c12@jW2c0d)) (jW2c1b@make-library-resolution-condition (record-constructor jW2c16@jW2c0e)) (jW2c1d@jW2c0a (record-accessor jW2c12@jW2c0d '0)) (jW2c1f@jW2c0b (record-accessor jW2c12@jW2c0d '1)) (jW2c21@library-resolution-condition? (condition-predicate jW2c12@jW2c0d)) (jW2c23@condition-library (condition-accessor jW2c12@jW2c0d jW2c1d@jW2c0a)) (jW2c25@condition-files (condition-accessor jW2c12@jW2c0d jW2c1f@jW2c0b))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (jW2c1b@make-library-resolution-condition jW2bfe@x (reverse jW2c04@failed-list))))) (if (null? jW2c03@exts) (jW2c08@f (cdr jW2c02@ls) (jW2b3f@library-extensions) jW2c04@failed-list) (let ((jW2c26@name (string-append (car jW2c02@ls) jW2c00@str (car jW2c03@exts)))) (if (file-exists? jW2c26@name) jW2c26@name (jW2c08@f jW2c02@ls (cdr jW2c03@exts) (cons jW2c26@name jW2c04@failed-list))))))))) (lambda (jW2c28@f) (if (procedure? jW2c28@f) jW2c28@f (assertion-violation 'file-locator '"not a procedure" jW2c28@f))))) (set! jW2d04@jW2b43@file-locator jW2b43@file-locator) (set! jW2b45@serialize-all (lambda (jW2c2a@serialize jW2c2b@compile) (letrec* ((jW2c2f@library-desc (lambda (jW2c32@x) (list (jW2aff@library-id jW2c32@x) (jW2b03@library-name jW2c32@x))))) (for-each (lambda (jW2c30@x) (if (jW2b33@library-source-file-name jW2c30@x) (jW2c2a@serialize (jW2b33@library-source-file-name jW2c30@x) (list (jW2aff@library-id jW2c30@x) (jW2b03@library-name jW2c30@x) (jW2b07@library-version jW2c30@x) (map jW2c2f@library-desc (jW2b0b@library-imp* jW2c30@x)) (map jW2c2f@library-desc (jW2b0f@library-vis* jW2c30@x)) (map jW2c2f@library-desc (jW2b13@library-inv* jW2c30@x)) (jW2b17@library-subst jW2c30@x) (jW2b1b@library-env jW2c30@x) (jW2c2b@compile (jW2b27@library-visit-code jW2c30@x)) (jW2c2b@compile (jW2b2b@library-invoke-code jW2c30@x)) (jW2b2f@library-visible? jW2c30@x))) (void))) ((jW2af1@current-library-collection)))))) (set! jW2d05@jW2b45@serialize-all jW2b45@serialize-all) (set! jW2b47@current-precompiled-library-loader (jW2a47@jW2925@make-parameter (lambda (jW2c34@filename jW2c35@sk) '#f))) (set! jW2d06@jW2b47@current-precompiled-library-loader jW2b47@current-precompiled-library-loader) (set! jW2b49@try-load-from-file (lambda (jW2c38@filename) ((jW2b47@current-precompiled-library-loader) jW2c38@filename (lambda jW2c5e (let ((jW2c5f (length jW2c5e))) (if (= jW2c5f '11) (apply (lambda (jW2c3a@id jW2c3b@name jW2c3c@ver jW2c3d@imp* jW2c3e@vis* jW2c3f@inv* jW2c40@exp-subst jW2c41@exp-env jW2c42@visit-proc jW2c43@invoke-proc jW2c44@visible?) (let jW2c52@f ((jW2c50@deps (append jW2c3d@imp* jW2c3e@vis* jW2c3f@inv*))) (if (null? jW2c50@deps) (begin (jW2b5d@install-library jW2c3a@id jW2c3b@name jW2c3c@ver jW2c3d@imp* jW2c3e@vis* jW2c3f@inv* jW2c40@exp-subst jW2c41@exp-env jW2c42@visit-proc jW2c43@invoke-proc '#f '#f jW2c44@visible? '#f) '#t) (let ((jW2c54@d (car jW2c50@deps))) (let ((jW2c56@label (car jW2c54@d)) (jW2c57@dname (cadr jW2c54@d))) (let ((jW2c5a@l (jW2b53@find-library-by-name jW2c57@dname))) (if (and (jW2afd@library? jW2c5a@l) (eq? jW2c56@label (jW2aff@library-id jW2c5a@l))) (jW2c52@f (cdr jW2c50@deps)) (begin (if jW2a41@jW2919@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" jW2c3b@name jW2c57@dname jW2c38@filename) (void)) '#f)))))))) jW2c5e) (if (>= jW2c5f '0) (apply (lambda jW2c5c@others '#f) jW2c5e) (error 'apply '"invalid arg count")))))))) (set! jW2d07@jW2b49@try-load-from-file jW2b49@try-load-from-file) (set! jW2b4b@library-loader (jW2a47@jW2925@make-parameter (lambda (jW2c60@x) (let ((jW2c62@file-name ((jW2b43@file-locator) jW2c60@x))) (if (not jW2c62@file-name) (assertion-violation '#f '"cannot file library" jW2c60@x) (or (jW2b49@try-load-from-file jW2c62@file-name) ((jW2b4d@current-library-expander) (jW2a46@jW2923@read-library-source-file jW2c62@file-name) jW2c62@file-name (lambda (jW2c64@name) (if (not (fast-equal? jW2c64@name jW2c60@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (jW2c6a@jW2c67 jW2c6b@jW2c69) (let ((jW2c6e@e jW2c6b@jW2c69) (jW2c6f@p jW2c6a@jW2c67)) (begin (display '"expected to find library " jW2c6f@p) (write jW2c60@x jW2c6f@p) (display '" in file " jW2c6f@p) (display jW2c62@file-name jW2c6f@p) (display '", found " jW2c6f@p) (write jW2c64@name jW2c6f@p) (display '" instead" jW2c6f@p) (jW2c6e@e)))))) (void)))))))) (lambda (jW2c72@f) (if (procedure? jW2c72@f) jW2c72@f (assertion-violation 'library-locator '"not a procedure" jW2c72@f))))) (set! jW2d08@jW2b4b@library-loader jW2b4b@library-loader) (set! jW2b4d@current-library-expander (jW2a47@jW2925@make-parameter (lambda (jW2c74@x) (assertion-violation 'library-expander '"not initialized")) (lambda (jW2c76@f) (if (procedure? jW2c76@f) jW2c76@f (assertion-violation 'library-expander '"not a procedure" jW2c76@f))))) (set! jW2d09@jW2b4d@current-library-expander jW2b4d@current-library-expander) (set! jW2b4f@external-pending-libraries (jW2a47@jW2925@make-parameter '())) (set! jW2d0a@jW2b4f@external-pending-libraries jW2b4f@external-pending-libraries) (set! jW2b51@find-external-library (lambda (jW2c78@name) (begin (if (member jW2c78@name (jW2b4f@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" jW2c78@name) (void)) (let ((jW2c7e@jW2c7b jW2b4f@external-pending-libraries) (jW2c7f@jW2c7d (cons jW2c78@name (jW2b4f@external-pending-libraries)))) (let ((jW2c82@swap (lambda () (let ((jW2c84@t (jW2c7e@jW2c7b))) (begin (jW2c7e@jW2c7b jW2c7f@jW2c7d) (set! jW2c7f@jW2c7d jW2c84@t)))))) (dynamic-wind jW2c82@swap (lambda () (begin ((jW2b4b@library-loader) jW2c78@name) (or (jW2b3b@find-library-by (lambda (jW2c86@x) (fast-equal? (jW2b03@library-name jW2c86@x) jW2c78@name))) (assertion-violation '#f '"handling external library did not yield the correct library" jW2c78@name)))) jW2c82@swap)))))) (set! jW2d0b@jW2b51@find-external-library jW2b51@find-external-library) (set! jW2b53@find-library-by-name (lambda (jW2c88@name) (or (jW2b3b@find-library-by (lambda (jW2c8a@x) (fast-equal? (jW2b03@library-name jW2c8a@x) jW2c88@name))) (jW2b51@find-external-library jW2c88@name)))) (set! jW2d0c@jW2b53@find-library-by-name jW2b53@find-library-by-name) (set! jW2b55@library-exists? (lambda (jW2c8c@name) (and (jW2b3b@find-library-by (lambda (jW2c8e@x) (fast-equal? (jW2b03@library-name jW2c8e@x) jW2c8c@name))) '#t))) (set! jW2d0d@jW2b55@library-exists? jW2b55@library-exists?) (set! jW2b57@find-library-by-spec/die (lambda (jW2c90@spec) (let ((jW2c92@id (car jW2c90@spec))) (or (jW2b3b@find-library-by (lambda (jW2c94@x) (eq? jW2c92@id (jW2aff@library-id jW2c94@x)))) (assertion-violation '#f '"cannot find library with required spec" jW2c90@spec))))) (set! jW2d0e@jW2b57@find-library-by-spec/die jW2b57@find-library-by-spec/die) (set! jW2b59@label->binding-table (make-eq-hashtable)) (set! jW2d0f@jW2b59@label->binding-table jW2b59@label->binding-table) (set! jW2b5b@install-library-record (lambda (jW2c96@lib) (begin (let ((jW2c98@exp-env (jW2b1b@library-env jW2c96@lib))) (for-each (lambda (jW2c9a@x) (let ((jW2c9c@label (car jW2c9a@x)) (jW2c9d@binding (cdr jW2c9a@x))) (let ((jW2ca0@binding (let ((jW2ca2@t (car jW2c9d@binding))) (if (memv jW2ca2@t '(global)) (cons 'global (cons jW2c96@lib (cdr jW2c9d@binding))) (if (memv jW2ca2@t '(global-macro)) (cons 'global-macro (cons jW2c96@lib (cdr jW2c9d@binding))) (if (memv jW2ca2@t '(global-macro!)) (cons 'global-macro! (cons jW2c96@lib (cdr jW2c9d@binding))) jW2c9d@binding)))))) (begin (if (hashtable-ref jW2b59@label->binding-table jW2c9c@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" jW2c9c@label (hashtable-ref jW2b59@label->binding-table jW2c9c@label '#f) jW2ca0@binding) (exit)) (void)) (hashtable-set! jW2b59@label->binding-table jW2c9c@label jW2ca0@binding))))) jW2c98@exp-env)) ((jW2af1@current-library-collection) jW2c96@lib)))) (set! jW2d10@jW2b5b@install-library-record jW2b5b@install-library-record) (set! jW2b5d@install-library (lambda (jW2ca4@id jW2ca5@name jW2ca6@ver jW2ca7@imp* jW2ca8@vis* jW2ca9@inv* jW2caa@exp-subst jW2cab@exp-env jW2cac@visit-proc jW2cad@invoke-proc jW2cae@visit-code jW2caf@invoke-code jW2cb0@visible? jW2cb1@source-file-name) (let ((jW2cc0@imp-lib* (map jW2b57@find-library-by-spec/die jW2ca7@imp*)) (jW2cc1@vis-lib* (map jW2b57@find-library-by-spec/die jW2ca8@vis*)) (jW2cc2@inv-lib* (map jW2b57@find-library-by-spec/die jW2ca9@inv*))) (begin (if (not (and (symbol? jW2ca4@id) (list? jW2ca5@name) (list? jW2ca6@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" jW2ca4@id jW2ca5@name jW2ca6@ver) (void)) (if (jW2b55@library-exists? jW2ca5@name) (assertion-violation 'install-library '"library is already installed" jW2ca5@name) (void)) (let ((jW2cc6@lib (make-simple-struct 'library '15 (list jW2ca4@id jW2ca5@name jW2ca6@ver jW2cc0@imp-lib* jW2cc1@vis-lib* jW2cc2@inv-lib* jW2caa@exp-subst jW2cab@exp-env jW2cac@visit-proc jW2cad@invoke-proc jW2cae@visit-code jW2caf@invoke-code jW2cb0@visible? jW2cb1@source-file-name)))) (jW2b5b@install-library-record jW2cc6@lib)))))) (set! jW2d11@jW2b5d@install-library jW2b5d@install-library) (set! jW2b5f@imported-label->binding (lambda (jW2cc8@lab) (hashtable-ref jW2b59@label->binding-table jW2cc8@lab '#f))) (set! jW2d12@jW2b5f@imported-label->binding jW2b5f@imported-label->binding) (set! jW2b61@invoke-library (lambda (jW2cca@lib) (let ((jW2ccc@invoke (jW2b23@library-invoke-state jW2cca@lib))) (if (procedure? jW2ccc@invoke) (begin (jW2b25@set-library-invoke-state! jW2cca@lib (lambda () (assertion-violation 'invoke '"circularity detected" jW2cca@lib))) (for-each jW2b61@invoke-library (jW2b13@library-inv* jW2cca@lib)) (jW2b25@set-library-invoke-state! jW2cca@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" jW2cca@lib))) (jW2ccc@invoke) (jW2b25@set-library-invoke-state! jW2cca@lib '#t)) (void))))) (set! jW2d13@jW2b61@invoke-library jW2b61@invoke-library) (set! jW2b63@visit-library (lambda (jW2cce@lib) (let ((jW2cd0@visit (jW2b1f@library-visit-state jW2cce@lib))) (if (procedure? jW2cd0@visit) (begin (jW2b21@set-library-visit-state! jW2cce@lib (lambda () (assertion-violation 'visit '"circularity detected" jW2cce@lib))) (for-each jW2b61@invoke-library (jW2b0f@library-vis* jW2cce@lib)) (jW2b21@set-library-visit-state! jW2cce@lib (lambda () (assertion-violation 'invoke '"first visit did not return" jW2cce@lib))) (jW2cd0@visit) (jW2b21@set-library-visit-state! jW2cce@lib '#t)) (void))))) (set! jW2d14@jW2b63@visit-library jW2b63@visit-library) (set! jW2b65@invoke-library-by-spec (lambda (jW2cd2@spec) (jW2b61@invoke-library (jW2b57@find-library-by-spec/die jW2cd2@spec)))) (set! jW2d15@jW2b65@invoke-library-by-spec jW2b65@invoke-library-by-spec) (set! jW2b67@installed-libraries (lambda jW2cda (let ((jW2cdb (length jW2cda))) (if (= jW2cdb '1) (apply (lambda (jW2cd4@all?) (let jW2cd8@f ((jW2cd6@ls ((jW2af1@current-library-collection)))) (if (null? jW2cd6@ls) '() (if (or jW2cd4@all? (jW2b2f@library-visible? (car jW2cd6@ls))) (cons (car jW2cd6@ls) (jW2cd8@f (cdr jW2cd6@ls))) (jW2cd8@f (cdr jW2cd6@ls)))))) jW2cda) (if (= jW2cdb '0) (apply (lambda () (jW2b67@installed-libraries '#f)) jW2cda) (error 'apply '"invalid arg count")))))) (set! jW2d16@jW2b67@installed-libraries jW2b67@installed-libraries) (set! jW2b69@library-spec (lambda (jW2cdc@x) (begin (if (not (jW2afd@library? jW2cdc@x)) (assertion-violation 'library-spec '"not a library" jW2cdc@x) (void)) (list (jW2aff@library-id jW2cdc@x) (jW2b03@library-name jW2cdc@x) (jW2b07@library-version jW2cdc@x))))) (set! jW2d17@jW2b69@library-spec jW2b69@library-spec) (void))
(begin (set! jW2d1b@build-global-define (unspecified)) (set! jW2d8c@build-lambda (unspecified)) (set! jW2d8e@build-case-lambda (unspecified)) (set! jW2dbc@build-sequence (unspecified)) (set! jW2dbe@build-void (unspecified)) (set! jW2dc0@build-letrec (unspecified)) (set! jW2dc2@build-let (unspecified)) (set! jW2dc4@build-named-let (unspecified)) (set! jW2dc6@build-letrec* (unspecified)) (set! jW2dc8@build-library-letrec* (unspecified)) (set! jW2dca@build-receive (unspecified)) (set! jW2d1b@build-global-define (lambda (jW2dcb@x) (jW2dbe@build-void))) (set! jW2e59@jW2d1b@build-global-define jW2d1b@build-global-define) (set! jW2d8c@build-lambda (lambda (jW2dcd@ae jW2dce@vars jW2dcf@exp) (list 'lambda jW2dce@vars jW2dcf@exp))) (set! jW2e5a@jW2d8c@build-lambda jW2d8c@build-lambda) (set! jW2d8e@build-case-lambda (lambda (jW2dd3@ae jW2dd4@vars* jW2dd5@exp*) (letrec* ((jW2dda@build-error (lambda (jW2e11@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (jW2ddc@build-pred (lambda (jW2df9@ae jW2dfa@n jW2dfb@vars) (call-with-values (lambda () (let jW2e07@f ((jW2e03@vars jW2dfb@vars) (jW2e04@count '0)) (if (pair? jW2e03@vars) (jW2e07@f (cdr jW2e03@vars) (+ jW2e04@count '1)) (if (null? jW2e03@vars) (values jW2e04@count '=) (values jW2e04@count '>=))))) (lambda (jW2e09@jW2e00 jW2e0a@jW2e02) (let ((jW2e0d@pred jW2e0a@jW2e02) (jW2e0e@count jW2e09@jW2e00)) (list (list 'primitive jW2e0d@pred) jW2dfa@n (list 'quote jW2e0e@count))))))) (jW2dde@build-apply (lambda (jW2df1@ae jW2df2@g jW2df3@vars jW2df4@exp) (list '(primitive apply) (jW2d8c@build-lambda jW2df1@ae jW2df3@vars jW2df4@exp) jW2df2@g))) (jW2de0@expand-case-lambda (lambda (jW2de1@ae jW2de2@vars jW2de3@exp*) (let ((jW2de7@g (gensym)) (jW2de8@n (gensym))) (list 'lambda jW2de7@g (jW2dc2@build-let jW2de1@ae (list jW2de8@n) (list (list '(primitive length) jW2de7@g)) (let jW2def@f ((jW2deb@vars* jW2dd4@vars*) (jW2dec@exp* jW2de3@exp*)) (if (null? jW2deb@vars*) (jW2dda@build-error jW2de1@ae) (list 'if (jW2ddc@build-pred jW2de1@ae jW2de8@n (car jW2deb@vars*)) (jW2dde@build-apply jW2de1@ae jW2de7@g (car jW2deb@vars*) (car jW2dec@exp*)) (jW2def@f (cdr jW2deb@vars*) (cdr jW2dec@exp*))))))))))) (if (= (length jW2dd5@exp*) '1) (jW2d8c@build-lambda jW2dd3@ae (car jW2dd4@vars*) (car jW2dd5@exp*)) (jW2de0@expand-case-lambda jW2dd3@ae jW2dd4@vars* jW2dd5@exp*))))) (set! jW2e5b@jW2d8e@build-case-lambda jW2d8e@build-case-lambda) (set! jW2dbc@build-sequence (lambda (jW2e13@ae jW2e14@exps) (let jW2e19@loop ((jW2e17@exps jW2e14@exps)) (if (null? (cdr jW2e17@exps)) (car jW2e17@exps) (if (equal? (car jW2e17@exps) (jW2dbe@build-void)) (jW2e19@loop (cdr jW2e17@exps)) (cons 'begin jW2e17@exps)))))) (set! jW2e5c@jW2dbc@build-sequence jW2dbc@build-sequence) (set! jW2dbe@build-void (lambda () '((primitive void)))) (set! jW2e5d@jW2dbe@build-void jW2dbe@build-void) (set! jW2dc0@build-letrec (lambda (jW2e1b@ae jW2e1c@vars jW2e1d@val-exps jW2e1e@body-exp) (if (null? jW2e1c@vars) jW2e1e@body-exp (list 'letrec (map list jW2e1c@vars jW2e1d@val-exps) jW2e1e@body-exp)))) (set! jW2e5e@jW2dc0@build-letrec jW2dc0@build-letrec) (set! jW2dc2@build-let (lambda (jW2e23@ae jW2e24@vars jW2e25@val-exps jW2e26@body-exp) (if (null? jW2e24@vars) jW2e26@body-exp (list 'let (map list jW2e24@vars jW2e25@val-exps) jW2e26@body-exp)))) (set! jW2e5f@jW2dc2@build-let jW2dc2@build-let) (set! jW2dc4@build-named-let (lambda (jW2e2b@ae jW2e2c@name jW2e2d@vars jW2e2e@val-exps jW2e2f@body-exp) (list 'let jW2e2c@name (map list jW2e2d@vars jW2e2e@val-exps) jW2e2f@body-exp))) (set! jW2e60@jW2dc4@build-named-let jW2dc4@build-named-let) (set! jW2dc6@build-letrec* (lambda (jW2e35@ae jW2e36@vars jW2e37@val-exps jW2e38@body-exp) (if (null? jW2e36@vars) jW2e38@body-exp (list 'letrec* (map list jW2e36@vars jW2e37@val-exps) jW2e38@body-exp)))) (set! jW2e61@jW2dc6@build-letrec* jW2dc6@build-letrec*) (set! jW2dc8@build-library-letrec* (lambda (jW2e3d@ae jW2e3e@name jW2e3f@vars jW2e40@locs jW2e41@val-exps jW2e42@body-exp) (cons 'begin (append (map (lambda (jW2e49@var) (cons 'set! (cons jW2e49@var '((unspecified))))) jW2e3f@vars) (append (apply append (map (lambda (jW2e4b@var jW2e4c@loc jW2e4d@val-exp) (list (list 'set! jW2e4b@var jW2e4d@val-exp) (list 'set! jW2e4c@loc jW2e4b@var))) jW2e3f@vars jW2e40@locs jW2e41@val-exps)) (list jW2e42@body-exp)))))) (set! jW2e62@jW2dc8@build-library-letrec* jW2dc8@build-library-letrec*) (set! jW2dca@build-receive (lambda (jW2e51@ae jW2e52@vars jW2e53@producer jW2e54@body*) (begin (display '"************** in ") (cons 'receive (cons jW2e52@vars (cons jW2e53@producer jW2e54@body*)))))) (set! jW2e63@jW2dca@build-receive jW2dca@build-receive) (void))
(begin (set! jW2e72@file-options-macro (unspecified)) (set! jW2e74@set-cons (unspecified)) (set! jW2e76@set-union (unspecified)) (set! jW2e7b@top-mark* (unspecified)) (set! jW2e7d@top-marked? (unspecified)) (set! jW2e7f@gen-lexical (unspecified)) (set! jW2e81@gen-global (unspecified)) (set! jW2e83@gen-label (unspecified)) (set! jW2e85@gen-top-level-label (unspecified)) (set! jW2e87@gen-define-label+loc (unspecified)) (set! jW2e89@gen-define-label (unspecified)) (set! jW2e93@rib? (unspecified)) (set! jW2e95@rib-sym* (unspecified)) (set! jW2e97@set-rib-sym*! (unspecified)) (set! jW2e99@rib-mark** (unspecified)) (set! jW2e9b@set-rib-mark**! (unspecified)) (set! jW2e9d@rib-label* (unspecified)) (set! jW2e9f@set-rib-label*! (unspecified)) (set! jW2ea1@rib-sealed/freq (unspecified)) (set! jW2ea3@set-rib-sealed/freq! (unspecified)) (set! jW2ea5@rib-cache (unspecified)) (set! jW2ea7@set-rib-cache! (unspecified)) (set! jW2ea9@dummy (unspecified)) (set! jW2eab@make-empty-rib (unspecified)) (set! jW2ead@extend-rib! (unspecified)) (set! jW2eaf@extend-rib/nc! (unspecified)) (set! jW2eb1@make-rib-map (unspecified)) (set! jW2eb3@seal-rib! (unspecified)) (set! jW2eb5@unseal-rib! (unspecified)) (set! jW2eb7@make-full-rib (unspecified)) (set! jW2eb9@rp (unspecified)) (set! jW2ec3@stx? (unspecified)) (set! jW2ec5@stx-expr (unspecified)) (set! jW2ec7@set-stx-expr! (unspecified)) (set! jW2ec9@stx-mark* (unspecified)) (set! jW2ecb@set-stx-mark*! (unspecified)) (set! jW2ecd@stx-subst* (unspecified)) (set! jW2ecf@set-stx-subst*! (unspecified)) (set! jW2ed1@stx-ae* (unspecified)) (set! jW2ed3@set-stx-ae*! (unspecified)) (set! jW2ed5@dummy (unspecified)) (set! jW2ed7@datum->stx (unspecified)) (set! jW2ed9@gen-mark (unspecified)) (set! jW2edb@anti-mark (unspecified)) (set! jW2edd@anti-mark? (unspecified)) (set! jW2edf@mkstx (unspecified)) (set! jW2ee1@add-subst (unspecified)) (set! jW2ee3@add-mark (unspecified)) (set! jW2ee5@syntax-kind? (unspecified)) (set! jW2ee7@syntax-vector->list (unspecified)) (set! jW2ee9@syntax-pair? (unspecified)) (set! jW2eeb@syntax-vector? (unspecified)) (set! jW2eed@syntax-null? (unspecified)) (set! jW2eef@syntax-list? (unspecified)) (set! jW2ef1@syntax-car (unspecified)) (set! jW2ef3@syntax-cdr (unspecified)) (set! jW2ef5@syntax->list (unspecified)) (set! jW2ef7@id? (unspecified)) (set! jW2ef9@id->sym (unspecified)) (set! jW2efb@bound-id=? (unspecified)) (set! jW2efd@free-id=? (unspecified)) (set! jW2eff@valid-bound-ids? (unspecified)) (set! jW2f01@distinct-bound-ids? (unspecified)) (set! jW2f03@bound-id-member? (unspecified)) (set! jW2f05@self-evaluating? (unspecified)) (set! jW2f07@strip-annotations (unspecified)) (set! jW2f09@strip (unspecified)) (set! jW2f0b@stx->datum (unspecified)) (set! jW2f0d@id->label (unspecified)) (set! jW2f0f@label->binding (unspecified)) (set! jW2f11@make-binding (unspecified)) (set! jW2f13@binding-type (unspecified)) (set! jW2f15@binding-value (unspecified)) (set! jW2f17@raise-unbound-error (unspecified)) (set! jW2f19@syntax-type (unspecified)) (set! jW2f27@sanitize-binding (unspecified)) (set! jW2f29@make-variable-transformer (unspecified)) (set! jW2f2b@variable-transformer? (unspecified)) (set! jW2f2d@variable-transformer-procedure (unspecified)) (set! jW2f2f@make-eval-transformer (unspecified)) (set! jW3080@parse-define (unspecified)) (set! jW3082@parse-define-syntax (unspecified)) (set! jW3084@scheme-stx-hashtable (unspecified)) (set! jW3086@scheme-stx (unspecified)) (set! jW3088@lexical-var (unspecified)) (set! jW308a@lexical-mutable? (unspecified)) (set! jW308c@set-lexical-mutable! (unspecified)) (set! jW308e@add-lexical (unspecified)) (set! jW3090@add-lexicals (unspecified)) (set! jW3092@letrec-helper (unspecified)) (set! jW3094@let-transformer (unspecified)) (set! jW3096@letrec-transformer (unspecified)) (set! jW3098@letrec*-transformer (unspecified)) (set! jW309a@fluid-let-syntax-transformer (unspecified)) (set! jW309c@type-descriptor-transformer (unspecified)) (set! jW309e@record-type-descriptor-transformer (unspecified)) (set! jW30a0@record-constructor-descriptor-transformer (unspecified)) (set! jW30a2@when-macro (unspecified)) (set! jW30a4@unless-macro (unspecified)) (set! jW30a6@if-transformer (unspecified)) (set! jW30a8@and-transformer (unspecified)) (set! jW30aa@or-transformer (unspecified)) (set! jW30ac@case-macro (unspecified)) (set! jW30ae@quote-transformer (unspecified)) (set! jW30b0@case-lambda-transformer (unspecified)) (set! jW30b2@lambda-transformer (unspecified)) (set! jW30b4@bless (unspecified)) (set! jW30b6@with-syntax-macro (unspecified)) (set! jW30b8@invalid-fmls-error (unspecified)) (set! jW30ba@let-macro (unspecified)) (set! jW30bc@let-values-macro (unspecified)) (set! jW30be@let*-values-macro (unspecified)) (set! jW30c0@trace-lambda-macro (unspecified)) (set! jW30c2@trace-define-macro (unspecified)) (set! jW30c4@trace-define-syntax-macro (unspecified)) (set! jW30c6@trace-let/rec-syntax (unspecified)) (set! jW30c8@trace-let-syntax-macro (unspecified)) (set! jW30ca@trace-letrec-syntax-macro (unspecified)) (set! jW30cc@guard-macro (unspecified)) (set! jW30ce@define-enumeration-macro (unspecified)) (set! jW30d0@time-macro (unspecified)) (set! jW30d2@delay-macro (unspecified)) (set! jW30d4@assert-macro (unspecified)) (set! jW30d6@endianness-macro (unspecified)) (set! jW30d8@identifier-syntax-macro (unspecified)) (set! jW30da@do-macro (unspecified)) (set! jW30dc@let*-macro (unspecified)) (set! jW30de@or-macro (unspecified)) (set! jW30e0@and-macro (unspecified)) (set! jW30e2@cond-macro (unspecified)) (set! jW30e4@do-include (unspecified)) (set! jW30e6@include-macro (unspecified)) (set! jW30e8@include-into-macro (unspecified)) (set! jW30ea@syntax-rules-macro (unspecified)) (set! jW30ec@quasiquote-macro (unspecified)) (set! jW30ee@quasisyntax-macro (unspecified)) (set! jW30f0@define-struct-macro (unspecified)) (set! jW30f2@define-record-type-macro (unspecified)) (set! jW30f4@define-condition-type-macro (unspecified)) (set! jW30f6@incorrect-usage-macro (unspecified)) (set! jW30f8@parameterize-macro (unspecified)) (set! jW30fa@foreign-call-transformer (unspecified)) (set! jW30fc@convert-pattern (unspecified)) (set! jW30fe@syntax-dispatch (unspecified)) (set! jW3100@ellipsis? (unspecified)) (set! jW3102@underscore? (unspecified)) (set! jW3104@verify-literals (unspecified)) (set! jW3106@syntax-case-transformer (unspecified)) (set! jW3108@ellipsis-map (unspecified)) (set! jW310a@syntax-transformer (unspecified)) (set! jW310c@core-macro-transformer (unspecified)) (set! jW310e@symbol-macro (unspecified)) (set! jW3110@macro-transformer (unspecified)) (set! jW3112@local-macro-transformer (unspecified)) (set! jW3114@do-macro-call (unspecified)) (set! jW3116@chi-macro (unspecified)) (set! jW3118@chi-local-macro (unspecified)) (set! jW311a@chi-global-macro (unspecified)) (set! jW311c@chi-expr* (unspecified)) (set! jW311e@chi-application (unspecified)) (set! jW3120@chi-expr (unspecified)) (set! jW3122@chi-set! (unspecified)) (set! jW3124@verify-formals (unspecified)) (set! jW3126@chi-lambda-clause (unspecified)) (set! jW3128@chi-lambda-clause* (unspecified)) (set! jW312a@chi-defun (unspecified)) (set! jW312c@chi-rhs (unspecified)) (set! jW312e@expand-interaction-rhs*/init* (unspecified)) (set! jW3130@chi-rhs* (unspecified)) (set! jW3132@find-bound=? (unspecified)) (set! jW3134@find-dups (unspecified)) (set! jW3136@chi-internal (unspecified)) (set! jW3138@parse-module (unspecified)) (set! jW3142@module-interface? (unspecified)) (set! jW3144@module-interface-first-mark (unspecified)) (set! jW3146@set-module-interface-first-mark! (unspecified)) (set! jW3148@module-interface-exp-id-vec (unspecified)) (set! jW314a@set-module-interface-exp-id-vec! (unspecified)) (set! jW314c@module-interface-exp-lab-vec (unspecified)) (set! jW314e@set-module-interface-exp-lab-vec! (unspecified)) (set! jW3150@dummy (unspecified)) (set! jW3152@module-interface-exp-id* (unspecified)) (set! jW3154@chi-internal-module (unspecified)) (set! jW3156@chi-body* (unspecified)) (set! jW3158@expand-transformer (unspecified)) (set! jW315a@parse-exports (unspecified)) (set! jW315c@parse-library-name (unspecified)) (set! jW315e@parse-library (unspecified)) (set! jW3160@parse-import-spec* (unspecified)) (set! jW3162@make-top-rib (unspecified)) (set! jW3164@make-collector (unspecified)) (set! jW3166@inv-collector (unspecified)) (set! jW3168@vis-collector (unspecified)) (set! jW316a@imp-collector (unspecified)) (set! jW316c@chi-library-internal (unspecified)) (set! jW316e@chi-interaction-expr (unspecified)) (set! jW3170@library-body-expander (unspecified)) (set! jW3172@core-library-expander (unspecified)) (set! jW3174@parse-top-level-program (unspecified)) (set! jW3176@top-level-expander (unspecified)) (set! jW3178@rp (unspecified)) (set! jW3182@env? (unspecified)) (set! jW3184@env-names (unspecified)) (set! jW3186@set-env-names! (unspecified)) (set! jW3188@env-labels (unspecified)) (set! jW318a@set-env-labels! (unspecified)) (set! jW318c@env-itc (unspecified)) (set! jW318e@set-env-itc! (unspecified)) (set! jW3190@dummy (unspecified)) (set! jW3192@rp (unspecified)) (set! jW319c@interaction-env? (unspecified)) (set! jW319e@interaction-env-rib (unspecified)) (set! jW31a0@set-interaction-env-rib! (unspecified)) (set! jW31a2@interaction-env-r (unspecified)) (set! jW31a4@set-interaction-env-r! (unspecified)) (set! jW31a6@interaction-env-locs (unspecified)) (set! jW31a8@set-interaction-env-locs! (unspecified)) (set! jW31aa@dummy (unspecified)) (set! jW31ac@interaction-environment-symbols (unspecified)) (set! jW31ae@environment-bindings (unspecified)) (set! jW31b0@parse-binding (unspecified)) (set! jW31b2@environment? (unspecified)) (set! jW31b4@environment-symbols (unspecified)) (set! jW31b6@environment (unspecified)) (set! jW31b8@null-environment (unspecified)) (set! jW31ba@scheme-report-environment (unspecified)) (set! jW31bc@expand (unspecified)) (set! jW31be@eval (unspecified)) (set! jW31c0@library-expander (unspecified)) (set! jW31c2@boot-library-expand (unspecified)) (set! jW31c4@rev-map-append (unspecified)) (set! jW31c6@build-exports (unspecified)) (set! jW31c8@make-export-subst (unspecified)) (set! jW31ca@make-export-env/macros (unspecified)) (set! jW31cc@generate-temporaries (unspecified)) (set! jW31ce@free-identifier=? (unspecified)) (set! jW31d0@bound-identifier=? (unspecified)) (set! jW31d2@make-source-condition (unspecified)) (set! jW31d4@extract-position-condition (unspecified)) (set! jW31d6@expression-position (unspecified)) (set! jW31d8@assertion-error (unspecified)) (set! jW31da@syntax-error (unspecified)) (set! jW31dc@syntax-violation* (unspecified)) (set! jW31de@syntax-violation (unspecified)) (set! jW31e0@identifier? (unspecified)) (set! jW31e2@datum->syntax (unspecified)) (set! jW31e4@syntax->datum (unspecified)) (set! jW31e6@ungensym-all (unspecified)) (set! jW31e8@compile-r6rs-top-level (unspecified)) (set! jW31ea@pre-compile-r6rs-top-level (unspecified)) (set! jW31ec@interaction-environment (unspecified)) (set! jW31ee@top-level-context (unspecified)) (set! jW2e72@file-options-macro (lambda (jW31ef@x) (letrec* ((jW31f2@valid-option? (lambda (jW31fb@x) (and (jW2ef7@id? jW31fb@x) (memq (jW2ef9@id->sym jW31fb@x) '(no-fail no-create no-truncate)))))) (let ((jW31f3@t jW31ef@x)) (let ((jW31f5@ls/false (jW30fe@syntax-dispatch jW31f3@t '(_ . each-any)))) (if (and jW31f5@ls/false (apply (lambda (jW31f7@opt*) (for-all jW31f2@valid-option? jW31f7@opt*)) jW31f5@ls/false)) (apply (lambda (jW31f9@opt*) (jW30b4@bless (list 'make-file-options (list 'quote jW31f9@opt*)))) jW31f5@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW31f3@t))))))) (set! jW4b7b@jW2e72@file-options-macro jW2e72@file-options-macro) (set! jW2e74@set-cons (lambda (jW31fd@x jW31fe@ls) (if (memq jW31fd@x jW31fe@ls) jW31fe@ls (cons jW31fd@x jW31fe@ls)))) (set! jW4b7c@jW2e74@set-cons jW2e74@set-cons) (set! jW2e76@set-union (lambda (jW3201@ls1 jW3202@ls2) (if (null? jW3201@ls1) jW3202@ls2 (if (memq (car jW3201@ls1) jW3202@ls2) (jW2e76@set-union (cdr jW3201@ls1) jW3202@ls2) (cons (car jW3201@ls1) (jW2e76@set-union (cdr jW3201@ls1) jW3202@ls2)))))) (set! jW4b7d@jW2e76@set-union jW2e76@set-union) (set! jW2e7b@top-mark* '(top)) (set! jW4b7e@jW2e7b@top-mark* jW2e7b@top-mark*) (set! jW2e7d@top-marked? (lambda (jW3205@m*) (memq 'top jW3205@m*))) (set! jW4b7f@jW2e7d@top-marked? jW2e7d@top-marked?) (set! jW2e7f@gen-lexical (lambda (jW3207@sym) (if (symbol? jW3207@sym) (gensym jW3207@sym) (if (jW2ec3@stx? jW3207@sym) (jW2e7f@gen-lexical (jW2ef9@id->sym jW3207@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" jW3207@sym))))) (set! jW4b80@jW2e7f@gen-lexical jW2e7f@gen-lexical) (set! jW2e81@gen-global (lambda (jW3209@x) (jW2e7f@gen-lexical jW3209@x))) (set! jW4b81@jW2e81@gen-global jW2e81@gen-global) (set! jW2e83@gen-label (lambda (jW320b@_) (gensym))) (set! jW4b82@jW2e83@gen-label jW2e83@gen-label) (set! jW2e85@gen-top-level-label (lambda (jW320d@id jW320e@rib) (letrec* ((jW3212@find (lambda (jW321d@sym jW321e@mark* jW321f@sym* jW3220@mark** jW3221@label*) (and (pair? jW321f@sym*) (if (and (eq? jW321d@sym (car jW321f@sym*)) (same-marks? jW321e@mark* (car jW3220@mark**))) (car jW3221@label*) (jW3212@find jW321d@sym jW321e@mark* (cdr jW321f@sym*) (cdr jW3220@mark**) (cdr jW3221@label*))))))) (let ((jW3213@sym (jW2ef9@id->sym jW320d@id)) (jW3214@mark* (jW2ec9@stx-mark* jW320d@id))) (let ((jW3217@sym* (jW2e95@rib-sym* jW320e@rib))) (let ((jW3219@t (and (memq jW3213@sym (jW2e95@rib-sym* jW320e@rib)) (jW3212@find jW3213@sym jW3214@mark* jW3217@sym* (jW2e99@rib-mark** jW320e@rib) (jW2e9d@rib-label* jW320e@rib))))) (if jW3219@t ((lambda (jW321b@label) (if (jW2d12@jW2b5f@imported-label->binding jW321b@label) (gensym) jW321b@label)) jW3219@t) (gensym)))))))) (set! jW4b83@jW2e85@gen-top-level-label jW2e85@gen-top-level-label) (set! jW2e87@gen-define-label+loc (lambda (jW3227@id jW3228@rib) (let ((jW322b@t (jW31ee@top-level-context))) (if jW322b@t ((lambda (jW322d@env) (let ((jW322f@label (jW2e85@gen-top-level-label jW3227@id jW3228@rib)) (jW3230@locs (jW31a6@interaction-env-locs jW322d@env))) (values jW322f@label (let ((jW3233@t (assq jW322f@label jW3230@locs))) (if jW3233@t (cdr jW3233@t) (let ((jW3235@loc (jW2e7f@gen-lexical jW3227@id))) (begin (jW31a8@set-interaction-env-locs! jW322d@env (cons (cons jW322f@label jW3235@loc) jW3230@locs)) jW3235@loc))))))) jW322b@t) (values (gensym) (jW2e7f@gen-lexical jW3227@id)))))) (set! jW4b84@jW2e87@gen-define-label+loc jW2e87@gen-define-label+loc) (set! jW2e89@gen-define-label (lambda (jW3237@id jW3238@rib) (if (jW31ee@top-level-context) (jW2e85@gen-top-level-label jW3237@id jW3238@rib) (gensym)))) (set! jW4b85@jW2e89@gen-define-label jW2e89@gen-define-label) (set! jW2e93@rib? (lambda (jW323b@x) (and (simple-struct? jW323b@x) (eq? (simple-struct-name jW323b@x) 'rib)))) (set! jW4b86@jW2e93@rib? jW2e93@rib?) (set! jW2e95@rib-sym* (lambda (jW323d@x) (simple-struct-ref jW323d@x '0))) (set! jW4b87@jW2e95@rib-sym* jW2e95@rib-sym*) (set! jW2e97@set-rib-sym*! (lambda (jW323f@x jW3240@val) (simple-struct-set! jW323f@x '0 jW3240@val))) (set! jW4b88@jW2e97@set-rib-sym*! jW2e97@set-rib-sym*!) (set! jW2e99@rib-mark** (lambda (jW3243@x) (simple-struct-ref jW3243@x '1))) (set! jW4b89@jW2e99@rib-mark** jW2e99@rib-mark**) (set! jW2e9b@set-rib-mark**! (lambda (jW3245@x jW3246@val) (simple-struct-set! jW3245@x '1 jW3246@val))) (set! jW4b8a@jW2e9b@set-rib-mark**! jW2e9b@set-rib-mark**!) (set! jW2e9d@rib-label* (lambda (jW3249@x) (simple-struct-ref jW3249@x '2))) (set! jW4b8b@jW2e9d@rib-label* jW2e9d@rib-label*) (set! jW2e9f@set-rib-label*! (lambda (jW324b@x jW324c@val) (simple-struct-set! jW324b@x '2 jW324c@val))) (set! jW4b8c@jW2e9f@set-rib-label*! jW2e9f@set-rib-label*!) (set! jW2ea1@rib-sealed/freq (lambda (jW324f@x) (simple-struct-ref jW324f@x '3))) (set! jW4b8d@jW2ea1@rib-sealed/freq jW2ea1@rib-sealed/freq) (set! jW2ea3@set-rib-sealed/freq! (lambda (jW3251@x jW3252@val) (simple-struct-set! jW3251@x '3 jW3252@val))) (set! jW4b8e@jW2ea3@set-rib-sealed/freq! jW2ea3@set-rib-sealed/freq!) (set! jW2ea5@rib-cache (lambda (jW3255@x) (simple-struct-ref jW3255@x '4))) (set! jW4b8f@jW2ea5@rib-cache jW2ea5@rib-cache) (set! jW2ea7@set-rib-cache! (lambda (jW3257@x jW3258@val) (simple-struct-set! jW3257@x '4 jW3258@val))) (set! jW4b90@jW2ea7@set-rib-cache! jW2ea7@set-rib-cache!) (set! jW2ea9@dummy '3) (set! jW4b91@jW2ea9@dummy jW2ea9@dummy) (set! jW2eab@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! jW4b92@jW2eab@make-empty-rib jW2eab@make-empty-rib) (set! jW2ead@extend-rib! (lambda (jW325b@rib jW325c@id jW325d@label) (letrec* ((jW3262@find (lambda (jW326f@sym jW3270@mark* jW3271@sym* jW3272@mark** jW3273@label*) (and (pair? jW3271@sym*) (if (and (eq? jW326f@sym (car jW3271@sym*)) (same-marks? jW3270@mark* (car jW3272@mark**))) jW3273@label* (jW3262@find jW326f@sym jW3270@mark* (cdr jW3271@sym*) (cdr jW3272@mark**) (cdr jW3273@label*))))))) (begin (if (jW2ea1@rib-sealed/freq jW325b@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" jW325b@rib) (void)) (let ((jW3263@sym (jW2ef9@id->sym jW325c@id)) (jW3264@mark* (jW2ec9@stx-mark* jW325c@id))) (let ((jW3267@sym* (jW2e95@rib-sym* jW325b@rib))) (let ((jW3269@t (and (memq jW3263@sym (jW2e95@rib-sym* jW325b@rib)) (jW3262@find jW3263@sym jW3264@mark* jW3267@sym* (jW2e99@rib-mark** jW325b@rib) (jW2e9d@rib-label* jW325b@rib))))) (if jW3269@t ((lambda (jW326b@p) (if (not (eq? jW325d@label (car jW326b@p))) (if (jW31ee@top-level-context) (set-car! jW326b@p jW325d@label) (jW31de@syntax-violation '#f '"multiple definitions of identifier" jW325c@id)) (void))) jW3269@t) (begin (if (jW2ea5@rib-cache jW325b@rib) (hashtable-update! (jW2ea5@rib-cache jW325b@rib) jW3263@sym (lambda (jW326d@e) (cons (cons jW3264@mark* jW325d@label) jW326d@e)) '()) (void)) (jW2e97@set-rib-sym*! jW325b@rib (cons jW3263@sym jW3267@sym*)) (jW2e9b@set-rib-mark**! jW325b@rib (cons jW3264@mark* (jW2e99@rib-mark** jW325b@rib))) (jW2e9f@set-rib-label*! jW325b@rib (cons jW325d@label (jW2e9d@rib-label* jW325b@rib)))))))))))) (set! jW4b93@jW2ead@extend-rib! jW2ead@extend-rib!) (set! jW2eaf@extend-rib/nc! (lambda (jW3279@rib jW327a@id jW327b@label) (let ((jW327f@sym (jW2ef9@id->sym jW327a@id)) (jW3280@mark* (jW2ec9@stx-mark* jW327a@id))) (let ((jW3283@sym* (jW2e95@rib-sym* jW3279@rib))) (begin (if (jW2ea5@rib-cache jW3279@rib) (hashtable-update! (jW2ea5@rib-cache jW3279@rib) jW327f@sym (lambda (jW3285@e) (cons (cons jW3280@mark* jW327b@label) jW3285@e)) '()) (void)) (jW2e97@set-rib-sym*! jW3279@rib (cons jW327f@sym jW3283@sym*)) (jW2e9b@set-rib-mark**! jW3279@rib (cons jW3280@mark* (jW2e99@rib-mark** jW3279@rib))) (jW2e9f@set-rib-label*! jW3279@rib (cons jW327b@label (jW2e9d@rib-label* jW3279@rib)))))))) (set! jW4b94@jW2eaf@extend-rib/nc! jW2eaf@extend-rib/nc!) (set! jW2eb1@make-rib-map (lambda (jW3287@sym*) (let ((jW3289@ht (make-eq-hashtable))) (let jW328f@f ((jW328b@i '0) (jW328c@sym* jW3287@sym*)) (if (null? jW328c@sym*) jW3289@ht (begin (hashtable-update! jW3289@ht (car jW328c@sym*) (lambda (jW3291@x) (cons jW328b@i jW3291@x)) '()) (jW328f@f (+ jW328b@i '1) (cdr jW328c@sym*)))))))) (set! jW4b95@jW2eb1@make-rib-map jW2eb1@make-rib-map) (set! jW2eb3@seal-rib! (lambda (jW3293@rib) (let ((jW3295@sym* (jW2e95@rib-sym* jW3293@rib))) (if (not (null? jW3295@sym*)) (begin (jW2e97@set-rib-sym*! jW3293@rib (list->vector jW3295@sym*)) (jW2e9b@set-rib-mark**! jW3293@rib (list->vector (jW2e99@rib-mark** jW3293@rib))) (jW2e9f@set-rib-label*! jW3293@rib (list->vector (jW2e9d@rib-label* jW3293@rib))) (jW2ea3@set-rib-sealed/freq! jW3293@rib (jW2eb1@make-rib-map jW3295@sym*))) (void))))) (set! jW4b96@jW2eb3@seal-rib! jW2eb3@seal-rib!) (set! jW2eb5@unseal-rib! (lambda (jW3297@rib) (if (jW2ea1@rib-sealed/freq jW3297@rib) (begin (jW2ea3@set-rib-sealed/freq! jW3297@rib '#f) (jW2e97@set-rib-sym*! jW3297@rib (vector->list (jW2e95@rib-sym* jW3297@rib))) (jW2e9b@set-rib-mark**! jW3297@rib (vector->list (jW2e99@rib-mark** jW3297@rib))) (jW2e9f@set-rib-label*! jW3297@rib (vector->list (jW2e9d@rib-label* jW3297@rib)))) (void)))) (set! jW4b97@jW2eb5@unseal-rib! jW2eb5@unseal-rib!) (set! jW2eb7@make-full-rib (lambda (jW3299@id* jW329a@label*) (let ((jW329d@r (make-simple-struct 'rib '6 (list (map jW2ef9@id->sym jW3299@id*) (map jW2ec9@stx-mark* jW3299@id*) jW329a@label* '#f '#f)))) (begin (jW2eb3@seal-rib! jW329d@r) jW329d@r)))) (set! jW4b98@jW2eb7@make-full-rib jW2eb7@make-full-rib) (set! jW2eb9@rp (jW2a44@jW291f@make-record-printer 'stx (lambda (jW329f@x jW32a0@p jW32a1@wr) (begin (display '"#<syntax " jW32a0@p) (write (jW2f0b@stx->datum jW329f@x) jW32a0@p) (let ((jW32a5@expr (jW2ec5@stx-expr jW329f@x))) (if (jW2a3b@jW290d@annotation? jW32a5@expr) (let ((jW32a7@src (jW2a3c@jW290f@annotation-source jW32a5@expr))) (if (pair? jW32a7@src) (begin (display '" [" jW32a0@p) (display (cdr jW32a7@src) jW32a0@p) (display '" of " jW32a0@p) (display (car jW32a7@src) jW32a0@p) (display '"]" jW32a0@p)) (void))) (void))) (display '">" jW32a0@p))))) (set! jW4b99@jW2eb9@rp jW2eb9@rp) (set! jW2ec3@stx? (lambda (jW32a9@x) (and (simple-struct? jW32a9@x) (eq? (simple-struct-name jW32a9@x) 'stx)))) (set! jW4b9a@jW2ec3@stx? jW2ec3@stx?) (set! jW2ec5@stx-expr (lambda (jW32ab@x) (simple-struct-ref jW32ab@x '0))) (set! jW4b9b@jW2ec5@stx-expr jW2ec5@stx-expr) (set! jW2ec7@set-stx-expr! (lambda (jW32ad@x jW32ae@val) (simple-struct-set! jW32ad@x '0 jW32ae@val))) (set! jW4b9c@jW2ec7@set-stx-expr! jW2ec7@set-stx-expr!) (set! jW2ec9@stx-mark* (lambda (jW32b1@x) (simple-struct-ref jW32b1@x '1))) (set! jW4b9d@jW2ec9@stx-mark* jW2ec9@stx-mark*) (set! jW2ecb@set-stx-mark*! (lambda (jW32b3@x jW32b4@val) (simple-struct-set! jW32b3@x '1 jW32b4@val))) (set! jW4b9e@jW2ecb@set-stx-mark*! jW2ecb@set-stx-mark*!) (set! jW2ecd@stx-subst* (lambda (jW32b7@x) (simple-struct-ref jW32b7@x '2))) (set! jW4b9f@jW2ecd@stx-subst* jW2ecd@stx-subst*) (set! jW2ecf@set-stx-subst*! (lambda (jW32b9@x jW32ba@val) (simple-struct-set! jW32b9@x '2 jW32ba@val))) (set! jW4ba0@jW2ecf@set-stx-subst*! jW2ecf@set-stx-subst*!) (set! jW2ed1@stx-ae* (lambda (jW32bd@x) (simple-struct-ref jW32bd@x '3))) (set! jW4ba1@jW2ed1@stx-ae* jW2ed1@stx-ae*) (set! jW2ed3@set-stx-ae*! (lambda (jW32bf@x jW32c0@val) (simple-struct-set! jW32bf@x '3 jW32c0@val))) (set! jW4ba2@jW2ed3@set-stx-ae*! jW2ed3@set-stx-ae*!) (set! jW2ed5@dummy '3) (set! jW4ba3@jW2ed5@dummy jW2ed5@dummy) (set! jW2ed7@datum->stx (lambda (jW32c3@id jW32c4@datum) (make-simple-struct 'stx '5 (list jW32c4@datum (jW2ec9@stx-mark* jW32c3@id) (jW2ecd@stx-subst* jW32c3@id) (jW2ed1@stx-ae* jW32c3@id))))) (set! jW4ba4@jW2ed7@datum->stx jW2ed7@datum->stx) (set! jW2ed9@gen-mark (lambda () (string '#\m))) (set! jW4ba5@jW2ed9@gen-mark jW2ed9@gen-mark) (set! jW2edb@anti-mark '#f) (set! jW4ba6@jW2edb@anti-mark jW2edb@anti-mark) (set! jW2edd@anti-mark? not) (set! jW4ba7@jW2edd@anti-mark? jW2edd@anti-mark?) (set! jW2edf@mkstx (lambda (jW32c7@e jW32c8@m* jW32c9@s* jW32ca@ae*) (if (and (jW2ec3@stx? jW32c7@e) (not (jW2e7d@top-marked? jW32c8@m*))) (call-with-values (lambda () (join-wraps jW32c8@m* jW32c9@s* jW32ca@ae* jW32c7@e)) (lambda (jW32d5@jW32d0 jW32d6@jW32d2 jW32d7@jW32d4) (let ((jW32db@ae* jW32d7@jW32d4) (jW32dc@s* jW32d6@jW32d2) (jW32dd@m* jW32d5@jW32d0)) (make-simple-struct 'stx '5 (list (jW2ec5@stx-expr jW32c7@e) jW32dd@m* jW32dc@s* jW32db@ae*))))) (make-simple-struct 'stx '5 (list jW32c7@e jW32c8@m* jW32c9@s* jW32ca@ae*))))) (set! jW4ba8@jW2edf@mkstx jW2edf@mkstx) (set! jW2ee1@add-subst (lambda (jW32e1@subst jW32e2@e) (jW2edf@mkstx jW32e2@e '() (list jW32e1@subst) '()))) (set! jW4ba9@jW2ee1@add-subst jW2ee1@add-subst) (set! jW2ee3@add-mark (lambda (jW32e5@mark jW32e6@subst jW32e7@expr jW32e8@ae) (letrec* ((jW32ee@merge-ae* (lambda (jW3315@ls1 jW3316@ls2) (if (and (pair? jW3315@ls1) (pair? jW3316@ls2) (not (car jW3316@ls2))) (jW32f0@cancel jW3315@ls1 jW3316@ls2) (append jW3315@ls1 jW3316@ls2)))) (jW32f0@cancel (lambda (jW330b@ls1 jW330c@ls2) (let jW3313@f ((jW330f@x (car jW330b@ls1)) (jW3310@ls1 (cdr jW330b@ls1))) (if (null? jW3310@ls1) (cdr jW330c@ls2) (cons jW330f@x (jW3313@f (car jW3310@ls1) (cdr jW3310@ls1))))))) (jW32f2@f (lambda (jW32f3@e jW32f4@m jW32f5@s1* jW32f6@ae*) (if (pair? jW32f3@e) (let ((jW32fb@a (jW32f2@f (car jW32f3@e) jW32f4@m jW32f5@s1* jW32f6@ae*)) (jW32fc@d (jW32f2@f (cdr jW32f3@e) jW32f4@m jW32f5@s1* jW32f6@ae*))) (if (eq? jW32fb@a jW32fc@d) jW32f3@e (cons jW32fb@a jW32fc@d))) (if (vector? jW32f3@e) (let ((jW32ff@ls1 (vector->list jW32f3@e))) (let ((jW3301@ls2 (map (lambda (jW3303@x) (jW32f2@f jW3303@x jW32f4@m jW32f5@s1* jW32f6@ae*)) jW32ff@ls1))) (if (for-all eq? jW32ff@ls1 jW3301@ls2) jW32f3@e (list->vector jW3301@ls2)))) (if (jW2ec3@stx? jW32f3@e) (let ((jW3305@m* (jW2ec9@stx-mark* jW32f3@e)) (jW3306@s2* (jW2ecd@stx-subst* jW32f3@e))) (if (null? jW3305@m*) (jW32f2@f (jW2ec5@stx-expr jW32f3@e) jW32f4@m (append jW32f5@s1* jW3306@s2*) (jW32ee@merge-ae* jW32f6@ae* (jW2ed1@stx-ae* jW32f3@e))) (if (eq? (car jW3305@m*) jW2edb@anti-mark) (make-simple-struct 'stx '5 (list (jW2ec5@stx-expr jW32f3@e) (cdr jW3305@m*) (cdr (append jW32f5@s1* jW3306@s2*)) (jW32ee@merge-ae* jW32f6@ae* (jW2ed1@stx-ae* jW32f3@e)))) (make-simple-struct 'stx '5 (list (jW2ec5@stx-expr jW32f3@e) (cons jW32f4@m jW3305@m*) (let ((jW3309@s* (cons 'shift (append jW32f5@s1* jW3306@s2*)))) (if jW32e6@subst (cons jW32e6@subst jW3309@s*) jW3309@s*)) (jW32ee@merge-ae* jW32f6@ae* (jW2ed1@stx-ae* jW32f3@e))))))) (if (symbol? jW32f3@e) (jW31de@syntax-violation '#f '"raw symbol encountered in output of macro" jW32e7@expr jW32f3@e) (make-simple-struct 'stx '5 (list jW32f3@e (list jW32f4@m) jW32f5@s1* jW32f6@ae*))))))))) (jW2edf@mkstx (jW32f2@f jW32e7@expr jW32e5@mark '() '()) '() '() (list jW32e8@ae))))) (set! jW4baa@jW2ee3@add-mark jW2ee3@add-mark) (set! jW2ee5@syntax-kind? (lambda (jW3319@x jW331a@p?) (if (jW2ec3@stx? jW3319@x) (jW2ee5@syntax-kind? (jW2ec5@stx-expr jW3319@x) jW331a@p?) (if (jW2a3b@jW290d@annotation? jW3319@x) (jW2ee5@syntax-kind? (jW2a3d@jW2911@annotation-expression jW3319@x) jW331a@p?) (jW331a@p? jW3319@x))))) (set! jW4bab@jW2ee5@syntax-kind? jW2ee5@syntax-kind?) (set! jW2ee7@syntax-vector->list (lambda (jW331d@x) (if (jW2ec3@stx? jW331d@x) (let ((jW331f@ls (jW2ee7@syntax-vector->list (jW2ec5@stx-expr jW331d@x))) (jW3320@m* (jW2ec9@stx-mark* jW331d@x)) (jW3321@s* (jW2ecd@stx-subst* jW331d@x)) (jW3322@ae* (jW2ed1@stx-ae* jW331d@x))) (map (lambda (jW3327@x) (jW2edf@mkstx jW3327@x jW3320@m* jW3321@s* jW3322@ae*)) jW331f@ls)) (if (jW2a3b@jW290d@annotation? jW331d@x) (jW2ee7@syntax-vector->list (jW2a3d@jW2911@annotation-expression jW331d@x)) (if (vector? jW331d@x) (vector->list jW331d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" jW331d@x)))))) (set! jW4bac@jW2ee7@syntax-vector->list jW2ee7@syntax-vector->list) (set! jW2ee9@syntax-pair? (lambda (jW3329@x) (jW2ee5@syntax-kind? jW3329@x pair?))) (set! jW4bad@jW2ee9@syntax-pair? jW2ee9@syntax-pair?) (set! jW2eeb@syntax-vector? (lambda (jW332b@x) (jW2ee5@syntax-kind? jW332b@x vector?))) (set! jW4bae@jW2eeb@syntax-vector? jW2eeb@syntax-vector?) (set! jW2eed@syntax-null? (lambda (jW332d@x) (jW2ee5@syntax-kind? jW332d@x null?))) (set! jW4baf@jW2eed@syntax-null? jW2eed@syntax-null?) (set! jW2eef@syntax-list? (lambda (jW332f@x) (or (jW2eed@syntax-null? jW332f@x) (and (jW2ee9@syntax-pair? jW332f@x) (jW2eef@syntax-list? (jW2ef3@syntax-cdr jW332f@x)))))) (set! jW4bb0@jW2eef@syntax-list? jW2eef@syntax-list?) (set! jW2ef1@syntax-car (lambda (jW3331@x) (if (jW2ec3@stx? jW3331@x) (jW2edf@mkstx (jW2ef1@syntax-car (jW2ec5@stx-expr jW3331@x)) (jW2ec9@stx-mark* jW3331@x) (jW2ecd@stx-subst* jW3331@x) (jW2ed1@stx-ae* jW3331@x)) (if (jW2a3b@jW290d@annotation? jW3331@x) (jW2ef1@syntax-car (jW2a3d@jW2911@annotation-expression jW3331@x)) (if (pair? jW3331@x) (car jW3331@x) (assertion-violation 'syntax-car '"BUG: not a pair" jW3331@x)))))) (set! jW4bb1@jW2ef1@syntax-car jW2ef1@syntax-car) (set! jW2ef3@syntax-cdr (lambda (jW3333@x) (if (jW2ec3@stx? jW3333@x) (jW2edf@mkstx (jW2ef3@syntax-cdr (jW2ec5@stx-expr jW3333@x)) (jW2ec9@stx-mark* jW3333@x) (jW2ecd@stx-subst* jW3333@x) (jW2ed1@stx-ae* jW3333@x)) (if (jW2a3b@jW290d@annotation? jW3333@x) (jW2ef3@syntax-cdr (jW2a3d@jW2911@annotation-expression jW3333@x)) (if (pair? jW3333@x) (cdr jW3333@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" jW3333@x)))))) (set! jW4bb2@jW2ef3@syntax-cdr jW2ef3@syntax-cdr) (set! jW2ef5@syntax->list (lambda (jW3335@x) (if (jW2ee9@syntax-pair? jW3335@x) (cons (jW2ef1@syntax-car jW3335@x) (jW2ef5@syntax->list (jW2ef3@syntax-cdr jW3335@x))) (if (jW2eed@syntax-null? jW3335@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" jW3335@x))))) (set! jW4bb3@jW2ef5@syntax->list jW2ef5@syntax->list) (set! jW2ef7@id? (lambda (jW3337@x) (and (jW2ec3@stx? jW3337@x) (symbol? (jW2ec5@stx-expr jW3337@x))))) (set! jW4bb4@jW2ef7@id? jW2ef7@id?) (set! jW2ef9@id->sym (lambda (jW3339@x) (jW2ec5@stx-expr jW3339@x))) (set! jW4bb5@jW2ef9@id->sym jW2ef9@id->sym) (set! jW2efb@bound-id=? (lambda (jW333b@x jW333c@y) (and (eq? (jW2ef9@id->sym jW333b@x) (jW2ef9@id->sym jW333c@y)) (same-marks? (jW2ec9@stx-mark* jW333b@x) (jW2ec9@stx-mark* jW333c@y))))) (set! jW4bb6@jW2efb@bound-id=? jW2efb@bound-id=?) (set! jW2efd@free-id=? (lambda (jW333f@i jW3340@j) (let ((jW3343@t0 (id->real-label jW333f@i)) (jW3344@t1 (id->real-label jW3340@j))) (if (or jW3343@t0 jW3344@t1) (eq? jW3343@t0 jW3344@t1) (eq? (jW2ef9@id->sym jW333f@i) (jW2ef9@id->sym jW3340@j)))))) (set! jW4bb7@jW2efd@free-id=? jW2efd@free-id=?) (set! jW2eff@valid-bound-ids? (lambda (jW3347@id*) (and (for-all jW2ef7@id? jW3347@id*) (jW2f01@distinct-bound-ids? jW3347@id*)))) (set! jW4bb8@jW2eff@valid-bound-ids? jW2eff@valid-bound-ids?) (set! jW2f01@distinct-bound-ids? (lambda (jW3349@id*) (or (null? jW3349@id*) (and (not (jW2f03@bound-id-member? (car jW3349@id*) (cdr jW3349@id*))) (jW2f01@distinct-bound-ids? (cdr jW3349@id*)))))) (set! jW4bb9@jW2f01@distinct-bound-ids? jW2f01@distinct-bound-ids?) (set! jW2f03@bound-id-member? (lambda (jW334b@id jW334c@id*) (and (pair? jW334c@id*) (or (jW2efb@bound-id=? jW334b@id (car jW334c@id*)) (jW2f03@bound-id-member? jW334b@id (cdr jW334c@id*)))))) (set! jW4bba@jW2f03@bound-id-member? jW2f03@bound-id-member?) (set! jW2f05@self-evaluating? (lambda (jW334f@x) (or (number? jW334f@x) (string? jW334f@x) (char? jW334f@x) (boolean? jW334f@x) (regexp? jW334f@x) (bytevector? jW334f@x)))) (set! jW4bbb@jW2f05@self-evaluating? jW2f05@self-evaluating?) (set! jW2f07@strip-annotations (lambda (jW3351@x) (if (pair? jW3351@x) (cons (jW2f07@strip-annotations (car jW3351@x)) (jW2f07@strip-annotations (cdr jW3351@x))) (if (vector? jW3351@x) (vector-map jW2f07@strip-annotations jW3351@x) (if (jW2a3b@jW290d@annotation? jW3351@x) (jW2a3a@jW290b@annotation-stripped jW3351@x) jW3351@x))))) (set! jW4bbc@jW2f07@strip-annotations jW2f07@strip-annotations) (set! jW2f09@strip (lambda (jW3353@x jW3354@m*) (if (jW2e7d@top-marked? jW3354@m*) (if (or (jW2a3b@jW290d@annotation? jW3353@x) (and (pair? jW3353@x) (jW2a3b@jW290d@annotation? (car jW3353@x))) (and (vector? jW3353@x) (> (vector-length jW3353@x) '0) (jW2a3b@jW290d@annotation? (vector-ref jW3353@x '0)))) (jW2f07@strip-annotations jW3353@x) jW3353@x) (let jW3359@f ((jW3357@x jW3353@x)) (if (jW2ec3@stx? jW3357@x) (begin (if (pair? (jW2ec5@stx-expr jW3357@x)) (begin (set-source-info! (jW2ec5@stx-expr jW3357@x) '#f) (set-source-info! (cdr (jW2ec5@stx-expr jW3357@x)) '#f) (set-source-info! (car (jW2ec5@stx-expr jW3357@x)) '#f)) (void)) (jW2f09@strip (jW2ec5@stx-expr jW3357@x) (jW2ec9@stx-mark* jW3357@x))) (if (jW2a3b@jW290d@annotation? jW3357@x) (jW2a3a@jW290b@annotation-stripped jW3357@x) (if (pair? jW3357@x) (let ((jW335b@a (jW3359@f (car jW3357@x))) (jW335c@d (jW3359@f (cdr jW3357@x)))) (if (and (eq? jW335b@a (car jW3357@x)) (eq? jW335c@d (cdr jW3357@x))) jW3357@x (cons jW335b@a jW335c@d))) (if (vector? jW3357@x) (let ((jW335f@old (vector->list jW3357@x))) (let ((jW3361@new (map jW3359@f jW335f@old))) (if (for-all eq? jW335f@old jW3361@new) jW3357@x (list->vector jW3361@new)))) jW3357@x)))))))) (set! jW4bbd@jW2f09@strip jW2f09@strip) (set! jW2f0b@stx->datum (lambda (jW3363@x) (jW2f09@strip jW3363@x '()))) (set! jW4bbe@jW2f0b@stx->datum jW2f0b@stx->datum) (set! jW2f0d@id->label (lambda (jW3365@id) (or (id->real-label jW3365@id) (let ((jW3367@t (jW31ee@top-level-context))) (if jW3367@t ((lambda (jW3369@env) (let ((jW336b@rib (jW319e@interaction-env-rib jW3369@env))) (call-with-values (lambda () (jW2e87@gen-define-label+loc jW3365@id jW336b@rib)) (lambda (jW3371@jW336e jW3372@jW3370) (let ((jW3375@loc_ jW3372@jW3370) (jW3376@lab jW3371@jW336e)) (begin (jW2ead@extend-rib! jW336b@rib jW3365@id jW3376@lab) jW3376@lab)))))) jW3367@t) '#f))))) (set! jW4bbf@jW2f0d@id->label jW2f0d@id->label) (set! jW2f0f@label->binding (lambda (jW3379@x jW337a@r) (let ((jW337d@t (jW2d12@jW2b5f@imported-label->binding jW3379@x))) (if jW337d@t ((lambda (jW337f@b) (if (and (pair? jW337f@b) (eq? (car jW337f@b) '$core-rtd)) (cons '$rtd (map jW30b4@bless (cdr jW337f@b))) (if (and (pair? jW337f@b) (eq? (car jW337f@b) 'global-rtd)) (let ((jW3381@lib (cadr jW337f@b)) (jW3382@loc (cddr jW337f@b))) (cons '$rtd (symbol-value jW3382@loc))) jW337f@b))) jW337d@t) (let ((jW3385@t (assq jW3379@x jW337a@r))) (if jW3385@t (cdr jW3385@t) (let ((jW3387@t (jW31ee@top-level-context))) (if jW3387@t ((lambda (jW3389@env) (let ((jW338b@t (assq jW3379@x (jW31a6@interaction-env-locs jW3389@env)))) (if jW338b@t ((lambda (jW338d@p) (cons* 'lexical (cdr jW338d@p) '#f)) jW338b@t) '(displaced-lexical . #f)))) jW3387@t) '(displaced-lexical . #f))))))))) (set! jW4bc0@jW2f0f@label->binding jW2f0f@label->binding) (set! jW2f11@make-binding cons) (set! jW4bc1@jW2f11@make-binding jW2f11@make-binding) (set! jW2f13@binding-type car) (set! jW4bc2@jW2f13@binding-type jW2f13@binding-type) (set! jW2f15@binding-value cdr) (set! jW4bc3@jW2f15@binding-value jW2f15@binding-value) (set! jW2f17@raise-unbound-error (lambda (jW338f@id) (jW31dc@syntax-violation* '#f '"unbound identifier" jW338f@id (make-undefined-violation)))) (set! jW4bc4@jW2f17@raise-unbound-error jW2f17@raise-unbound-error) (set! jW2f19@syntax-type (lambda (jW3391@e jW3392@r) (if (jW2ef7@id? jW3391@e) (let ((jW3395@id jW3391@e)) (let ((jW3397@label (jW2f0d@id->label jW3395@id))) (let ((jW3399@b (jW2f0f@label->binding jW3397@label jW3392@r))) (let ((jW339b@type (jW2f13@binding-type jW3399@b))) (begin (if (not jW3397@label) (jW2f17@raise-unbound-error jW3395@id) (void)) (let ((jW339d@t jW339b@type)) (if (memv jW339d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values jW339b@type (jW2f15@binding-value jW3399@b) jW3395@id) (values 'other '#f '#f)))))))) (if (jW2ee9@syntax-pair? jW3391@e) (let ((jW339f@id (jW2ef1@syntax-car jW3391@e))) (if (jW2ef7@id? jW339f@id) (let ((jW33a1@label (jW2f0d@id->label jW339f@id))) (let ((jW33a3@b (jW2f0f@label->binding jW33a1@label jW3392@r))) (let ((jW33a5@type (jW2f13@binding-type jW33a3@b))) (begin (if (not jW33a1@label) (jW2f17@raise-unbound-error jW339f@id) (void)) (let ((jW33a7@t jW33a5@type)) (if (memv jW33a7@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values jW33a5@type (jW2f15@binding-value jW33a3@b) jW339f@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((jW33a9@d (jW2f0b@stx->datum jW3391@e))) (if (jW2f05@self-evaluating? jW33a9@d) (values 'constant jW33a9@d '#f) (values 'other '#f '#f))))))) (set! jW4bc5@jW2f19@syntax-type jW2f19@syntax-type) (set! jW2f27@sanitize-binding (lambda (jW33ab@x jW33ac@src) (if (procedure? jW33ab@x) (cons* 'local-macro jW33ab@x jW33ac@src) (if (and (pair? jW33ab@x) (eq? (car jW33ab@x) 'macro!) (procedure? (cdr jW33ab@x))) (cons* 'local-macro! (cdr jW33ab@x) jW33ac@src) (if (and (pair? jW33ab@x) (eq? (car jW33ab@x) '$rtd)) jW33ab@x (assertion-violation 'expand '"invalid transformer" jW33ab@x)))))) (set! jW4bc6@jW2f27@sanitize-binding jW2f27@sanitize-binding) (set! jW2f29@make-variable-transformer (lambda (jW33af@x) (if (procedure? jW33af@x) (cons 'macro! jW33af@x) (assertion-violation 'make-variable-transformer '"not a procedure" jW33af@x)))) (set! jW4bc7@jW2f29@make-variable-transformer jW2f29@make-variable-transformer) (set! jW2f2b@variable-transformer? (lambda (jW33b1@x) (and (pair? jW33b1@x) (eq? (car jW33b1@x) 'macro!) (procedure? (cdr jW33b1@x))))) (set! jW4bc8@jW2f2b@variable-transformer? jW2f2b@variable-transformer?) (set! jW2f2d@variable-transformer-procedure (lambda (jW33b3@x) (if (jW2f2b@variable-transformer? jW33b3@x) (cdr jW33b3@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" jW33b3@x)))) (set! jW4bc9@jW2f2d@variable-transformer-procedure jW2f2d@variable-transformer-procedure) (set! jW2f2f@make-eval-transformer (lambda (jW33b5@x) (jW2f27@sanitize-binding (eval-core (jW2a9d@jW2a55@expanded->core jW33b5@x)) jW33b5@x))) (set! jW4bca@jW2f2f@make-eval-transformer jW2f2f@make-eval-transformer) (set! jW3080@parse-define (lambda (jW33b7@x) (let ((jW33b9@t jW33b7@x)) (let ((jW33bb@ls/false (jW30fe@syntax-dispatch jW33b9@t '(_ (any . any) any . each-any)))) (if (and jW33bb@ls/false (apply (lambda (jW33bd@id jW33be@fmls jW33bf@b jW33c0@b*) (jW2ef7@id? jW33bd@id)) jW33bb@ls/false)) (apply (lambda (jW33c5@id jW33c6@fmls jW33c7@b jW33c8@b*) (begin (jW3124@verify-formals jW33c6@fmls jW33b7@x) (values jW33c5@id (cons 'defun (cons jW33c6@fmls (cons jW33c7@b jW33c8@b*)))))) jW33bb@ls/false) (let ((jW33cd@t jW33b9@t)) (let ((jW33cf@ls/false (jW30fe@syntax-dispatch jW33cd@t '(_ any any)))) (if (and jW33cf@ls/false (apply (lambda (jW33d1@id jW33d2@val) (jW2ef7@id? jW33d1@id)) jW33cf@ls/false)) (apply (lambda (jW33d5@id jW33d6@val) (values jW33d5@id (cons 'expr jW33d6@val))) jW33cf@ls/false) (let ((jW33d9@t jW33cd@t)) (let ((jW33db@ls/false (jW30fe@syntax-dispatch jW33d9@t '(_ any)))) (if (and jW33db@ls/false (apply (lambda (jW33dd@id) (jW2ef7@id? jW33dd@id)) jW33db@ls/false)) (apply (lambda (jW33df@id) (values jW33df@id (cons 'expr (jW30b4@bless '(void))))) jW33db@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW33d9@t)))))))))))) (set! jW4bcb@jW3080@parse-define jW3080@parse-define) (set! jW3082@parse-define-syntax (lambda (jW33e1@x) (let ((jW33e3@t jW33e1@x)) (let ((jW33e5@ls/false (jW30fe@syntax-dispatch jW33e3@t '(_ any any)))) (if (and jW33e5@ls/false (apply (lambda (jW33e7@id jW33e8@val) (jW2ef7@id? jW33e7@id)) jW33e5@ls/false)) (apply (lambda (jW33eb@id jW33ec@val) (values jW33eb@id jW33ec@val)) jW33e5@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW33e3@t)))))) (set! jW4bcc@jW3082@parse-define-syntax jW3082@parse-define-syntax) (set! jW3084@scheme-stx-hashtable (make-eq-hashtable)) (set! jW4bcd@jW3084@scheme-stx-hashtable jW3084@scheme-stx-hashtable) (set! jW3086@scheme-stx (lambda (jW33ef@sym) (or (hashtable-ref jW3084@scheme-stx-hashtable jW33ef@sym '#f) (let ((jW33f1@subst (jW2cee@jW2b17@library-subst (jW2d0c@jW2b53@find-library-by-name '(psyntax system $all))))) (let ((jW33f3@stx (make-simple-struct 'stx '5 (list jW33ef@sym jW2e7b@top-mark* '() '())))) (let ((jW33f5@stx (let ((jW33f7@t (assq jW33ef@sym jW33f1@subst))) (if jW33f7@t ((lambda (jW33f9@x) (let ((jW33fb@name (car jW33f9@x)) (jW33fc@label (cdr jW33f9@x))) (jW2ee1@add-subst (make-simple-struct 'rib '6 (list (list jW33fb@name) (list jW2e7b@top-mark*) (list jW33fc@label) '#f '#f)) jW33f3@stx))) jW33f7@t) jW33f3@stx)))) (begin (hashtable-set! jW3084@scheme-stx-hashtable jW33ef@sym jW33f5@stx) jW33f5@stx))))))) (set! jW4bce@jW3086@scheme-stx jW3086@scheme-stx) (set! jW3088@lexical-var car) (set! jW4bcf@jW3088@lexical-var jW3088@lexical-var) (set! jW308a@lexical-mutable? cdr) (set! jW4bd0@jW308a@lexical-mutable? jW308a@lexical-mutable?) (set! jW308c@set-lexical-mutable! set-cdr!) (set! jW4bd1@jW308c@set-lexical-mutable! jW308c@set-lexical-mutable!) (set! jW308e@add-lexical (lambda (jW33ff@lab jW3400@lex jW3401@r) (cons (cons* jW33ff@lab 'lexical jW3400@lex '#f) jW3401@r))) (set! jW4bd2@jW308e@add-lexical jW308e@add-lexical) (set! jW3090@add-lexicals (lambda (jW3405@lab* jW3406@lex* jW3407@r) (if (null? jW3405@lab*) jW3407@r (jW3090@add-lexicals (cdr jW3405@lab*) (cdr jW3406@lex*) (jW308e@add-lexical (car jW3405@lab*) (car jW3406@lex*) jW3407@r))))) (set! jW4bd3@jW3090@add-lexicals jW3090@add-lexicals) (set! jW3092@letrec-helper (lambda (jW340b@e jW340c@r jW340d@mr jW340e@build) (let ((jW3413@t jW340b@e)) (let ((jW3415@ls/false (jW30fe@syntax-dispatch jW3413@t '(_ #(each (any any)) any . each-any)))) (if jW3415@ls/false (apply (lambda (jW3417@lhs* jW3418@rhs* jW3419@b jW341a@b*) (if (not (jW2eff@valid-bound-ids? jW3417@lhs*)) (jW30b8@invalid-fmls-error jW340b@e jW3417@lhs*) (let ((jW341f@lex* (map jW2e7f@gen-lexical jW3417@lhs*)) (jW3420@lab* (map jW2e83@gen-label jW3417@lhs*))) (let ((jW3423@rib (jW2eb7@make-full-rib jW3417@lhs* jW3420@lab*)) (jW3424@r (jW3090@add-lexicals jW3420@lab* jW341f@lex* jW340c@r))) (let ((jW3427@body (jW3136@chi-internal (jW2ee1@add-subst jW3423@rib (cons jW3419@b jW341a@b*)) jW3424@r jW340d@mr)) (jW3428@rhs* (jW311c@chi-expr* (map (lambda (jW342b@x) (jW2ee1@add-subst jW3423@rib jW342b@x)) jW3418@rhs*) jW3424@r jW340d@mr))) (jW340e@build '#f jW341f@lex* jW3428@rhs* jW3427@body)))))) jW3415@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3413@t)))))) (set! jW4bd4@jW3092@letrec-helper jW3092@letrec-helper) (set! jW3094@let-transformer (lambda (jW342d@e jW342e@r jW342f@mr) (let ((jW3433@t jW342d@e)) (let ((jW3435@ls/false (jW30fe@syntax-dispatch jW3433@t '(_ #(each (any any)) any . each-any)))) (if jW3435@ls/false (apply (lambda (jW3437@lhs* jW3438@rhs* jW3439@b jW343a@b*) (if (not (jW2eff@valid-bound-ids? jW3437@lhs*)) (jW30b8@invalid-fmls-error jW342d@e jW3437@lhs*) (let ((jW343f@lex* (map jW2e7f@gen-lexical jW3437@lhs*)) (jW3440@lab* (map jW2e83@gen-label jW3437@lhs*)) (jW3441@rhs* (jW311c@chi-expr* jW3438@rhs* jW342e@r jW342f@mr))) (let ((jW3445@rib (jW2eb7@make-full-rib jW3437@lhs* jW3440@lab*)) (jW3446@r (jW3090@add-lexicals jW3440@lab* jW343f@lex* jW342e@r))) (let ((jW3449@body (jW3136@chi-internal (jW2ee1@add-subst jW3445@rib (cons jW3439@b jW343a@b*)) jW3446@r jW342f@mr))) (jW2e5f@jW2dc2@build-let '#f jW343f@lex* jW3441@rhs* jW3449@body)))))) jW3435@ls/false) (let ((jW344b@t jW3433@t)) (let ((jW344d@ls/false (jW30fe@syntax-dispatch jW344b@t '(_ any #(each (any any)) any . each-any)))) (if jW344d@ls/false (apply (lambda (jW344f@loop jW3450@lhs* jW3451@rhs* jW3452@b jW3453@b*) (if (not (jW2eff@valid-bound-ids? jW3450@lhs*)) (jW30b8@invalid-fmls-error jW342d@e jW3450@lhs*) (let ((jW3459@lex* (map jW2e7f@gen-lexical jW3450@lhs*)) (jW345a@lab* (map jW2e83@gen-label jW3450@lhs*)) (jW345b@rhs* (jW311c@chi-expr* jW3451@rhs* jW342e@r jW342f@mr)) (jW345c@loop-lex (jW2e7f@gen-lexical jW344f@loop)) (jW345d@loop-lab (jW2e83@gen-label jW344f@loop))) (let ((jW3463@loop-rib (jW2eb7@make-full-rib (list jW344f@loop) (list jW345d@loop-lab))) (jW3464@rib (jW2eb7@make-full-rib jW3450@lhs* jW345a@lab*)) (jW3465@r (jW3090@add-lexicals (cons jW345d@loop-lab jW345a@lab*) (cons jW345c@loop-lex jW3459@lex*) jW342e@r))) (let ((jW3469@body (jW3136@chi-internal (jW2ee1@add-subst jW3463@loop-rib (jW2ee1@add-subst jW3464@rib (cons jW3452@b jW3453@b*))) jW3465@r jW342f@mr))) (jW2e60@jW2dc4@build-named-let '#f jW345c@loop-lex jW3459@lex* jW345b@rhs* jW3469@body)))))) jW344d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW344b@t))))))))) (set! jW4bd5@jW3094@let-transformer jW3094@let-transformer) (set! jW3096@letrec-transformer (lambda (jW346b@e jW346c@r jW346d@mr) (jW3092@letrec-helper jW346b@e jW346c@r jW346d@mr jW2e5e@jW2dc0@build-letrec))) (set! jW4bd6@jW3096@letrec-transformer jW3096@letrec-transformer) (set! jW3098@letrec*-transformer (lambda (jW3471@e jW3472@r jW3473@mr) (jW3092@letrec-helper jW3471@e jW3472@r jW3473@mr jW2e61@jW2dc6@build-letrec*))) (set! jW4bd7@jW3098@letrec*-transformer jW3098@letrec*-transformer) (set! jW309a@fluid-let-syntax-transformer (lambda (jW3477@e jW3478@r jW3479@mr) (letrec* ((jW347e@lookup (lambda (jW3491@x) (or (jW2f0d@id->label jW3491@x) (jW31de@syntax-violation '#f '"unbound identifier" jW3477@e jW3491@x))))) (let ((jW347f@t jW3477@e)) (let ((jW3481@ls/false (jW30fe@syntax-dispatch jW347f@t '(_ #(each (any any)) any . each-any)))) (if jW3481@ls/false (apply (lambda (jW3483@lhs* jW3484@rhs* jW3485@b jW3486@b*) (if (not (jW2eff@valid-bound-ids? jW3483@lhs*)) (jW30b8@invalid-fmls-error jW3477@e jW3483@lhs*) (let ((jW348b@lab* (map jW347e@lookup jW3483@lhs*)) (jW348c@rhs* (map (lambda (jW348f@x) (jW2f2f@make-eval-transformer (jW3158@expand-transformer jW348f@x jW3479@mr))) jW3484@rhs*))) (jW3136@chi-internal (cons jW3485@b jW3486@b*) (append (map cons jW348b@lab* jW348c@rhs*) jW3478@r) (append (map cons jW348b@lab* jW348c@rhs*) jW3479@mr))))) jW3481@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW347f@t))))))) (set! jW4bd8@jW309a@fluid-let-syntax-transformer jW309a@fluid-let-syntax-transformer) (set! jW309c@type-descriptor-transformer (lambda (jW3493@e jW3494@r jW3495@mr) (let ((jW3499@t jW3493@e)) (let ((jW349b@ls/false (jW30fe@syntax-dispatch jW3499@t '(_ any)))) (if (and jW349b@ls/false (apply (lambda (jW349d@id) (jW2ef7@id? jW349d@id)) jW349b@ls/false)) (apply (lambda (jW349f@id) (let ((jW34a1@lab (jW2f0d@id->label jW349f@id))) (let ((jW34a3@b (jW2f0f@label->binding jW34a1@lab jW3494@r))) (let ((jW34a5@type (jW2f13@binding-type jW34a3@b))) (begin (if (not jW34a1@lab) (jW2f17@raise-unbound-error jW349f@id) (void)) (if (not (and (eq? jW34a5@type '$rtd) (not (list? (jW2f15@binding-value jW34a3@b))))) (jW31de@syntax-violation '#f '"not a record type" jW3493@e) (void)) (list 'quote (jW2f15@binding-value jW34a3@b))))))) jW349b@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3499@t)))))) (set! jW4bd9@jW309c@type-descriptor-transformer jW309c@type-descriptor-transformer) (set! jW309e@record-type-descriptor-transformer (lambda (jW34a7@e jW34a8@r jW34a9@mr) (let ((jW34ad@t jW34a7@e)) (let ((jW34af@ls/false (jW30fe@syntax-dispatch jW34ad@t '(_ any)))) (if (and jW34af@ls/false (apply (lambda (jW34b1@id) (jW2ef7@id? jW34b1@id)) jW34af@ls/false)) (apply (lambda (jW34b3@id) (let ((jW34b5@lab (jW2f0d@id->label jW34b3@id))) (let ((jW34b7@b (jW2f0f@label->binding jW34b5@lab jW34a8@r))) (let ((jW34b9@type (jW2f13@binding-type jW34b7@b))) (begin (if (not jW34b5@lab) (jW2f17@raise-unbound-error jW34b3@id) (void)) (if (not (and (eq? jW34b9@type '$rtd) (list? (jW2f15@binding-value jW34b7@b)))) (jW31de@syntax-violation '#f '"not a record type" jW34a7@e) (void)) (jW3120@chi-expr (car (jW2f15@binding-value jW34b7@b)) jW34a8@r jW34a9@mr)))))) jW34af@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW34ad@t)))))) (set! jW4bda@jW309e@record-type-descriptor-transformer jW309e@record-type-descriptor-transformer) (set! jW30a0@record-constructor-descriptor-transformer (lambda (jW34bb@e jW34bc@r jW34bd@mr) (let ((jW34c1@t jW34bb@e)) (let ((jW34c3@ls/false (jW30fe@syntax-dispatch jW34c1@t '(_ any)))) (if (and jW34c3@ls/false (apply (lambda (jW34c5@id) (jW2ef7@id? jW34c5@id)) jW34c3@ls/false)) (apply (lambda (jW34c7@id) (let ((jW34c9@lab (jW2f0d@id->label jW34c7@id))) (let ((jW34cb@b (jW2f0f@label->binding jW34c9@lab jW34bc@r))) (let ((jW34cd@type (jW2f13@binding-type jW34cb@b))) (begin (if (not jW34c9@lab) (jW2f17@raise-unbound-error jW34c7@id) (void)) (if (not (and (eq? jW34cd@type '$rtd) (list? (jW2f15@binding-value jW34cb@b)))) (jW31de@syntax-violation '#f '"invalid type" jW34bb@e) (void)) (jW3120@chi-expr (cadr (jW2f15@binding-value jW34cb@b)) jW34bc@r jW34bd@mr)))))) jW34c3@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW34c1@t)))))) (set! jW4bdb@jW30a0@record-constructor-descriptor-transformer jW30a0@record-constructor-descriptor-transformer) (set! jW30a2@when-macro (lambda (jW34cf@e) (let ((jW34d1@t jW34cf@e)) (let ((jW34d3@ls/false (jW30fe@syntax-dispatch jW34d1@t '(_ any any . each-any)))) (if jW34d3@ls/false (apply (lambda (jW34d5@test jW34d6@e jW34d7@e*) (jW30b4@bless (list 'if jW34d5@test (cons 'begin (cons jW34d6@e jW34d7@e*))))) jW34d3@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW34d1@t)))))) (set! jW4bdc@jW30a2@when-macro jW30a2@when-macro) (set! jW30a4@unless-macro (lambda (jW34db@e) (let ((jW34dd@t jW34db@e)) (let ((jW34df@ls/false (jW30fe@syntax-dispatch jW34dd@t '(_ any any . each-any)))) (if jW34df@ls/false (apply (lambda (jW34e1@test jW34e2@e jW34e3@e*) (jW30b4@bless (list 'if (list 'not jW34e1@test) (cons 'begin (cons jW34e2@e jW34e3@e*))))) jW34df@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW34dd@t)))))) (set! jW4bdd@jW30a4@unless-macro jW30a4@unless-macro) (set! jW30a6@if-transformer (lambda (jW34e7@e jW34e8@r jW34e9@mr) (let ((jW34ed@t jW34e7@e)) (let ((jW34ef@ls/false (jW30fe@syntax-dispatch jW34ed@t '(_ any any any)))) (if jW34ef@ls/false (apply (lambda (jW34f1@e0 jW34f2@e1 jW34f3@e2) (list 'if (jW3120@chi-expr jW34f1@e0 jW34e8@r jW34e9@mr) (jW3120@chi-expr jW34f2@e1 jW34e8@r jW34e9@mr) (jW3120@chi-expr jW34f3@e2 jW34e8@r jW34e9@mr))) jW34ef@ls/false) (let ((jW34f7@t jW34ed@t)) (let ((jW34f9@ls/false (jW30fe@syntax-dispatch jW34f7@t '(_ any any)))) (if jW34f9@ls/false (apply (lambda (jW34fb@e0 jW34fc@e1) (list 'if (jW3120@chi-expr jW34fb@e0 jW34e8@r jW34e9@mr) (jW3120@chi-expr jW34fc@e1 jW34e8@r jW34e9@mr) (jW2e5d@jW2dbe@build-void))) jW34f9@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW34f7@t))))))))) (set! jW4bde@jW30a6@if-transformer jW30a6@if-transformer) (set! jW30a8@and-transformer (lambda (jW34ff@e jW3500@r jW3501@mr) (let ((jW3505@t jW34ff@e)) (let ((jW3507@ls/false (jW30fe@syntax-dispatch jW3505@t '(_ . each-any)))) (if jW3507@ls/false (apply (lambda (jW3509@e*) (cons 'and (jW311c@chi-expr* jW3509@e* jW3500@r jW3501@mr))) jW3507@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3505@t)))))) (set! jW4bdf@jW30a8@and-transformer jW30a8@and-transformer) (set! jW30aa@or-transformer (lambda (jW350b@e jW350c@r jW350d@mr) (let ((jW3511@t jW350b@e)) (let ((jW3513@ls/false (jW30fe@syntax-dispatch jW3511@t '(_ . each-any)))) (if jW3513@ls/false (apply (lambda (jW3515@e*) (cons 'or (jW311c@chi-expr* jW3515@e* jW350c@r jW350d@mr))) jW3513@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3511@t)))))) (set! jW4be0@jW30aa@or-transformer jW30aa@or-transformer) (set! jW30ac@case-macro (lambda (jW3517@e) (letrec* ((jW351a@build-last (lambda (jW3541@cls) (let ((jW3543@t jW3541@cls)) (let ((jW3545@ls/false (jW30fe@syntax-dispatch jW3543@t '(#(scheme-id else) any . each-any)))) (if jW3545@ls/false (apply (lambda (jW3547@e jW3548@e*) (cons 'begin (cons jW3547@e jW3548@e*))) jW3545@ls/false) (let ((jW354b@t jW3543@t)) (let ((jW354d@ls/false (jW30fe@syntax-dispatch jW354b@t '_))) (if jW354d@ls/false (apply (lambda () (jW351c@build-one jW3541@cls '(if #f #f))) jW354d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW354b@t))))))))) (jW351c@build-one (lambda (jW3533@cls jW3534@k) (let ((jW3537@t jW3533@cls)) (let ((jW3539@ls/false (jW30fe@syntax-dispatch jW3537@t '(each-any any . each-any)))) (if jW3539@ls/false (apply (lambda (jW353b@d* jW353c@e jW353d@e*) (list 'if (list 'memv 't (list 'quote jW353b@d*)) (cons 'begin (cons jW353c@e jW353d@e*)) jW3534@k)) jW3539@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3537@t))))))) (let ((jW351d@t jW3517@e)) (let ((jW351f@ls/false (jW30fe@syntax-dispatch jW351d@t '(_ any)))) (if jW351f@ls/false (apply (lambda (jW3521@expr) (jW30b4@bless (cons 'let (cons (list (list 't jW3521@expr)) '((if #f #f)))))) jW351f@ls/false) (let ((jW3523@t jW351d@t)) (let ((jW3525@ls/false (jW30fe@syntax-dispatch jW3523@t '(_ any any . each-any)))) (if jW3525@ls/false (apply (lambda (jW3527@expr jW3528@cls jW3529@cls*) (jW30b4@bless (list 'let (list (list 't jW3527@expr)) (let jW3531@f ((jW352d@cls jW3528@cls) (jW352e@cls* jW3529@cls*)) (if (null? jW352e@cls*) (jW351a@build-last jW352d@cls) (jW351c@build-one jW352d@cls (jW3531@f (car jW352e@cls*) (cdr jW352e@cls*)))))))) jW3525@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3523@t)))))))))) (set! jW4be1@jW30ac@case-macro jW30ac@case-macro) (set! jW30ae@quote-transformer (lambda (jW354f@e jW3550@r jW3551@mr) (let ((jW3555@t jW354f@e)) (let ((jW3557@ls/false (jW30fe@syntax-dispatch jW3555@t '(_ any)))) (if jW3557@ls/false (apply (lambda (jW3559@datum) (list 'quote (jW2f0b@stx->datum jW3559@datum))) jW3557@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3555@t)))))) (set! jW4be2@jW30ae@quote-transformer jW30ae@quote-transformer) (set! jW30b0@case-lambda-transformer (lambda (jW355b@e jW355c@r jW355d@mr) (let ((jW3561@t jW355b@e)) (let ((jW3563@ls/false (jW30fe@syntax-dispatch jW3561@t '(_ . #(each (any any . each-any)))))) (if jW3563@ls/false (apply (lambda (jW3565@fmls* jW3566@b* jW3567@b**) (call-with-values (lambda () (jW3128@chi-lambda-clause* jW355b@e jW3565@fmls* (map cons jW3566@b* jW3567@b**) jW355c@r jW355d@mr)) (lambda (jW356f@jW356c jW3570@jW356e) (let ((jW3573@body* jW3570@jW356e) (jW3574@fmls* jW356f@jW356c)) (jW2e5b@jW2d8e@build-case-lambda '#f jW3574@fmls* jW3573@body*))))) jW3563@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3561@t)))))) (set! jW4be3@jW30b0@case-lambda-transformer jW30b0@case-lambda-transformer) (set! jW30b2@lambda-transformer (lambda (jW3577@e jW3578@r jW3579@mr) (let ((jW357d@t jW3577@e)) (let ((jW357f@ls/false (jW30fe@syntax-dispatch jW357d@t '(_ any any . each-any)))) (if jW357f@ls/false (apply (lambda (jW3581@fmls jW3582@b jW3583@b*) (call-with-values (lambda () (jW3126@chi-lambda-clause jW3577@e jW3581@fmls (cons jW3582@b jW3583@b*) jW3578@r jW3579@mr)) (lambda (jW358b@jW3588 jW358c@jW358a) (let ((jW358f@body jW358c@jW358a) (jW3590@fmls jW358b@jW3588)) (jW2e5a@jW2d8c@build-lambda '#f jW3590@fmls jW358f@body))))) jW357f@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW357d@t)))))) (set! jW4be4@jW30b2@lambda-transformer jW30b2@lambda-transformer) (set! jW30b4@bless (lambda (jW3593@x) (jW2edf@mkstx (let jW3597@f ((jW3595@x jW3593@x)) (if (jW2ec3@stx? jW3595@x) jW3595@x (if (pair? jW3595@x) (cons (jW3597@f (car jW3595@x)) (jW3597@f (cdr jW3595@x))) (if (symbol? jW3595@x) (jW3086@scheme-stx jW3595@x) (if (vector? jW3595@x) (vector-map jW3597@f jW3595@x) jW3595@x))))) '() '() '()))) (set! jW4be5@jW30b4@bless jW30b4@bless) (set! jW30b6@with-syntax-macro (lambda (jW3599@e) (let ((jW359b@t jW3599@e)) (let ((jW359d@ls/false (jW30fe@syntax-dispatch jW359b@t '(_ #(each (any any)) any . each-any)))) (if jW359d@ls/false (apply (lambda (jW359f@pat* jW35a0@expr* jW35a1@b jW35a2@b*) (let ((jW35a7@idn* (let jW35ab@f ((jW35a9@pat* jW359f@pat*)) (if (null? jW35a9@pat*) '() (call-with-values (lambda () (jW30fc@convert-pattern (car jW35a9@pat*) '())) (lambda (jW35b1@jW35ae jW35b2@jW35b0) (let ((jW35b5@idn* jW35b2@jW35b0) (jW35b6@pat jW35b1@jW35ae)) (append jW35b5@idn* (jW35ab@f (cdr jW35a9@pat*)))))))))) (begin (jW3124@verify-formals (map car jW35a7@idn*) jW3599@e) (let ((jW35b9@t* (jW31cc@generate-temporaries jW35a0@expr*))) (jW30b4@bless (list 'let (map list jW35b9@t* jW35a0@expr*) (let jW35bf@f ((jW35bb@pat* jW359f@pat*) (jW35bc@t* jW35b9@t*)) (if (null? jW35bb@pat*) (cons 'let (cons '() (cons jW35a1@b jW35a2@b*))) (list 'syntax-case (car jW35bc@t*) '() (list (car jW35bb@pat*) (jW35bf@f (cdr jW35bb@pat*) (cdr jW35bc@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car jW35bb@pat*)) (car jW35bc@t*)))))))))))) jW359d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW359b@t)))))) (set! jW4be6@jW30b6@with-syntax-macro jW30b6@with-syntax-macro) (set! jW30b8@invalid-fmls-error (lambda (jW35c1@stx jW35c2@fmls) (let ((jW35c5@t jW35c2@fmls)) (let ((jW35c7@ls/false (jW30fe@syntax-dispatch jW35c5@t '#(each+ any () any)))) (if jW35c7@ls/false (apply (lambda (jW35c9@id* jW35ca@last) (let jW35cf@f ((jW35cd@id* (if (jW2ef7@id? jW35ca@last) (cons jW35ca@last jW35c9@id*) (if (jW2eed@syntax-null? jW35ca@last) jW35c9@id* (jW31de@syntax-violation '#f '"not an identifier" jW35c1@stx jW35ca@last))))) (if (null? jW35cd@id*) (values) (if (not (jW2ef7@id? (car jW35cd@id*))) (jW31de@syntax-violation '#f '"not an identifier" jW35c1@stx (car jW35cd@id*)) (begin (jW35cf@f (cdr jW35cd@id*)) (if (jW2f03@bound-id-member? (car jW35cd@id*) (cdr jW35cd@id*)) (jW31de@syntax-violation '#f '"duplicate binding" jW35c1@stx (car jW35cd@id*)) (void))))))) jW35c7@ls/false) (let ((jW35d1@t jW35c5@t)) (let ((jW35d3@ls/false (jW30fe@syntax-dispatch jW35d1@t '_))) (if jW35d3@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"malformed binding form" jW35c1@stx jW35c2@fmls)) jW35d3@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW35d1@t))))))))) (set! jW4be7@jW30b8@invalid-fmls-error jW30b8@invalid-fmls-error) (set! jW30ba@let-macro (lambda (jW35d5@stx) (let ((jW35d7@t jW35d5@stx)) (let ((jW35d9@ls/false (jW30fe@syntax-dispatch jW35d7@t '(_ #(each (any any)) any . each-any)))) (if jW35d9@ls/false (apply (lambda (jW35db@lhs* jW35dc@rhs* jW35dd@b jW35de@b*) (if (jW2eff@valid-bound-ids? jW35db@lhs*) (jW30b4@bless (cons (cons 'lambda (cons jW35db@lhs* (cons jW35dd@b jW35de@b*))) jW35dc@rhs*)) (jW30b8@invalid-fmls-error jW35d5@stx jW35db@lhs*))) jW35d9@ls/false) (let ((jW35e3@t jW35d7@t)) (let ((jW35e5@ls/false (jW30fe@syntax-dispatch jW35e3@t '(_ any #(each (any any)) any . each-any)))) (if (and jW35e5@ls/false (apply (lambda (jW35e7@f jW35e8@lhs* jW35e9@rhs* jW35ea@b jW35eb@b*) (jW2ef7@id? jW35e7@f)) jW35e5@ls/false)) (apply (lambda (jW35f1@f jW35f2@lhs* jW35f3@rhs* jW35f4@b jW35f5@b*) (if (jW2eff@valid-bound-ids? jW35f2@lhs*) (jW30b4@bless (cons (list 'letrec (list (list jW35f1@f (cons 'lambda (cons jW35f2@lhs* (cons jW35f4@b jW35f5@b*))))) jW35f1@f) jW35f3@rhs*)) (jW30b8@invalid-fmls-error jW35d5@stx jW35f2@lhs*))) jW35e5@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW35e3@t))))))))) (set! jW4be8@jW30ba@let-macro jW30ba@let-macro) (set! jW30bc@let-values-macro (lambda (jW35fb@stx) (letrec* ((jW35fe@rename (lambda (jW3663@x jW3664@old* jW3665@new*) (begin (if (not (jW2ef7@id? jW3663@x)) (jW31de@syntax-violation '#f '"not an indentifier" jW35fb@stx jW3663@x) (void)) (if (jW2f03@bound-id-member? jW3663@x jW3664@old*) (jW31de@syntax-violation '#f '"duplicate binding" jW35fb@stx jW3663@x) (void)) (let ((jW3669@y (gensym (jW31e4@syntax->datum jW3663@x)))) (values jW3669@y (cons jW3663@x jW3664@old*) (cons jW3669@y jW3665@new*)))))) (jW3600@rename* (lambda (jW3651@x* jW3652@old* jW3653@new*) (if (null? jW3651@x*) (values '() jW3652@old* jW3653@new*) (call-with-values (lambda () (jW35fe@rename (car jW3651@x*) jW3652@old* jW3653@new*)) (lambda (jW3657@x jW3658@old* jW3659@new*) (call-with-values (lambda () (jW3600@rename* (cdr jW3651@x*) jW3658@old* jW3659@new*)) (lambda (jW365d@x* jW365e@old* jW365f@new*) (values (cons jW3657@x jW365d@x*) jW365e@old* jW365f@new*))))))))) (let ((jW3601@t jW35fb@stx)) (let ((jW3603@ls/false (jW30fe@syntax-dispatch jW3601@t '(_ () any . each-any)))) (if jW3603@ls/false (apply (lambda (jW3605@b jW3606@b*) (cons* (jW30b4@bless 'let) '() jW3605@b jW3606@b*)) jW3603@ls/false) (let ((jW3609@t jW3601@t)) (let ((jW360b@ls/false (jW30fe@syntax-dispatch jW3609@t '(_ #(each (any any)) any . each-any)))) (if jW360b@ls/false (apply (lambda (jW360d@lhs* jW360e@rhs* jW360f@b jW3610@b*) (jW30b4@bless (let jW361d@f ((jW3615@lhs* jW360d@lhs*) (jW3616@rhs* jW360e@rhs*) (jW3617@old* '()) (jW3618@new* '())) (if (null? jW3615@lhs*) (cons 'let (cons (map list jW3617@old* jW3618@new*) (cons jW360f@b jW3610@b*))) (let ((jW361f@t (car jW3615@lhs*))) (let ((jW3621@ls/false (jW30fe@syntax-dispatch jW361f@t 'each-any))) (if jW3621@ls/false (apply (lambda (jW3623@x*) (call-with-values (lambda () (jW3600@rename* jW3623@x* jW3617@old* jW3618@new*)) (lambda (jW362b@jW3626 jW362c@jW3628 jW362d@jW362a) (let ((jW3631@new* jW362d@jW362a) (jW3632@old* jW362c@jW3628) (jW3633@y* jW362b@jW3626)) (list 'call-with-values (list 'lambda '() (car jW3616@rhs*)) (list 'lambda jW3633@y* (jW361d@f (cdr jW3615@lhs*) (cdr jW3616@rhs*) jW3632@old* jW3631@new*))))))) jW3621@ls/false) (let ((jW3637@t jW361f@t)) (let ((jW3639@ls/false (jW30fe@syntax-dispatch jW3637@t '#(each+ any () any)))) (if jW3639@ls/false (apply (lambda (jW363b@x* jW363c@x) (call-with-values (lambda () (jW35fe@rename jW363c@x jW3617@old* jW3618@new*)) (lambda (jW363f@y jW3640@old* jW3641@new*) (call-with-values (lambda () (jW3600@rename* jW363b@x* jW3640@old* jW3641@new*)) (lambda (jW3645@y* jW3646@old* jW3647@new*) (list 'call-with-values (list 'lambda '() (car jW3616@rhs*)) (list 'lambda (append jW3645@y* jW363f@y) (jW361d@f (cdr jW3615@lhs*) (cdr jW3616@rhs*) jW3646@old* jW3647@new*)))))))) jW3639@ls/false) (let ((jW364b@t jW3637@t)) (let ((jW364d@ls/false (jW30fe@syntax-dispatch jW364b@t 'any))) (if jW364d@ls/false (apply (lambda (jW364f@others) (jW31de@syntax-violation '#f '"malformed bindings" jW35fb@stx jW364f@others)) jW364d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW364b@t)))))))))))))) jW360b@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3609@t)))))))))) (set! jW4be9@jW30bc@let-values-macro jW30bc@let-values-macro) (set! jW30be@let*-values-macro (lambda (jW366b@stx) (letrec* ((jW366e@check (lambda (jW369d@x*) (if (not (null? jW369d@x*)) (let ((jW369f@x (car jW369d@x*))) (begin (if (not (jW2ef7@id? jW369f@x)) (jW31de@syntax-violation '#f '"not an identifier" jW366b@stx jW369f@x) (void)) (jW366e@check (cdr jW369d@x*)) (if (jW2f03@bound-id-member? jW369f@x (cdr jW369d@x*)) (jW31de@syntax-violation '#f '"duplicate identifier" jW366b@stx jW369f@x) (void)))) (void))))) (let ((jW366f@t jW366b@stx)) (let ((jW3671@ls/false (jW30fe@syntax-dispatch jW366f@t '(_ () any . each-any)))) (if jW3671@ls/false (apply (lambda (jW3673@b jW3674@b*) (cons* (jW30b4@bless 'let) '() jW3673@b jW3674@b*)) jW3671@ls/false) (let ((jW3677@t jW366f@t)) (let ((jW3679@ls/false (jW30fe@syntax-dispatch jW3677@t '(_ #(each (any any)) any . each-any)))) (if jW3679@ls/false (apply (lambda (jW367b@lhs* jW367c@rhs* jW367d@b jW367e@b*) (jW30b4@bless (let jW3687@f ((jW3683@lhs* jW367b@lhs*) (jW3684@rhs* jW367c@rhs*)) (if (null? jW3683@lhs*) (cons 'begin (cons jW367d@b jW367e@b*)) (let ((jW3689@t (car jW3683@lhs*))) (let ((jW368b@ls/false (jW30fe@syntax-dispatch jW3689@t 'each-any))) (if jW368b@ls/false (apply (lambda (jW368d@x*) (begin (jW366e@check jW368d@x*) (list 'call-with-values (list 'lambda '() (car jW3684@rhs*)) (list 'lambda jW368d@x* (jW3687@f (cdr jW3683@lhs*) (cdr jW3684@rhs*)))))) jW368b@ls/false) (let ((jW368f@t jW3689@t)) (let ((jW3691@ls/false (jW30fe@syntax-dispatch jW368f@t '#(each+ any () any)))) (if jW3691@ls/false (apply (lambda (jW3693@x* jW3694@x) (begin (jW366e@check (cons jW3694@x jW3693@x*)) (list 'call-with-values (list 'lambda '() (car jW3684@rhs*)) (list 'lambda (append jW3693@x* jW3694@x) (jW3687@f (cdr jW3683@lhs*) (cdr jW3684@rhs*)))))) jW3691@ls/false) (let ((jW3697@t jW368f@t)) (let ((jW3699@ls/false (jW30fe@syntax-dispatch jW3697@t 'any))) (if jW3699@ls/false (apply (lambda (jW369b@others) (jW31de@syntax-violation '#f '"malformed bindings" jW366b@stx jW369b@others)) jW3699@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3697@t)))))))))))))) jW3679@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3677@t)))))))))) (set! jW4bea@jW30be@let*-values-macro jW30be@let*-values-macro) (set! jW30c0@trace-lambda-macro (lambda (jW36a1@stx) (let ((jW36a3@t jW36a1@stx)) (let ((jW36a5@ls/false (jW30fe@syntax-dispatch jW36a3@t '(_ any each-any any . each-any)))) (if jW36a5@ls/false (apply (lambda (jW36a7@who jW36a8@fmls jW36a9@b jW36aa@b*) (if (jW2eff@valid-bound-ids? jW36a8@fmls) (jW30b4@bless (list 'make-traced-procedure (list 'quote jW36a7@who) (cons 'lambda (cons jW36a8@fmls (cons jW36a9@b jW36aa@b*))))) (jW30b8@invalid-fmls-error jW36a1@stx jW36a8@fmls))) jW36a5@ls/false) (let ((jW36af@t jW36a3@t)) (let ((jW36b1@ls/false (jW30fe@syntax-dispatch jW36af@t '(_ any #(each+ any () any) any . each-any)))) (if jW36b1@ls/false (apply (lambda (jW36b3@who jW36b4@fmls jW36b5@last jW36b6@b jW36b7@b*) (if (jW2eff@valid-bound-ids? (cons jW36b5@last jW36b4@fmls)) (jW30b4@bless (list 'make-traced-procedure (list 'quote jW36b3@who) (cons 'lambda (cons (append jW36b4@fmls jW36b5@last) (cons jW36b6@b jW36b7@b*))))) (jW30b8@invalid-fmls-error jW36a1@stx (append jW36b4@fmls jW36b5@last)))) jW36b1@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW36af@t))))))))) (set! jW4beb@jW30c0@trace-lambda-macro jW30c0@trace-lambda-macro) (set! jW30c2@trace-define-macro (lambda (jW36bd@stx) (let ((jW36bf@t jW36bd@stx)) (let ((jW36c1@ls/false (jW30fe@syntax-dispatch jW36bf@t '(_ (any . each-any) any . each-any)))) (if jW36c1@ls/false (apply (lambda (jW36c3@who jW36c4@fmls jW36c5@b jW36c6@b*) (if (jW2eff@valid-bound-ids? jW36c4@fmls) (jW30b4@bless (list 'define jW36c3@who (list 'make-traced-procedure (list 'quote jW36c3@who) (cons 'lambda (cons jW36c4@fmls (cons jW36c5@b jW36c6@b*)))))) (jW30b8@invalid-fmls-error jW36bd@stx jW36c4@fmls))) jW36c1@ls/false) (let ((jW36cb@t jW36bf@t)) (let ((jW36cd@ls/false (jW30fe@syntax-dispatch jW36cb@t '(_ (any . #(each+ any () any)) any . each-any)))) (if jW36cd@ls/false (apply (lambda (jW36cf@who jW36d0@fmls jW36d1@last jW36d2@b jW36d3@b*) (if (jW2eff@valid-bound-ids? (cons jW36d1@last jW36d0@fmls)) (jW30b4@bless (list 'define jW36cf@who (list 'make-traced-procedure (list 'quote jW36cf@who) (cons 'lambda (cons (append jW36d0@fmls jW36d1@last) (cons jW36d2@b jW36d3@b*)))))) (jW30b8@invalid-fmls-error jW36bd@stx (append jW36d0@fmls jW36d1@last)))) jW36cd@ls/false) (let ((jW36d9@t jW36cb@t)) (let ((jW36db@ls/false (jW30fe@syntax-dispatch jW36d9@t '(_ any any)))) (if jW36db@ls/false (apply (lambda (jW36dd@who jW36de@expr) (if (jW2ef7@id? jW36dd@who) (jW30b4@bless (list 'define jW36dd@who (list 'let (list (list 'v jW36de@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote jW36dd@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (jW31de@syntax-violation '#f '"invalid name" jW36bd@stx))) jW36db@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW36d9@t)))))))))))) (set! jW4bec@jW30c2@trace-define-macro jW30c2@trace-define-macro) (set! jW30c4@trace-define-syntax-macro (lambda (jW36e1@stx) (let ((jW36e3@t jW36e1@stx)) (let ((jW36e5@ls/false (jW30fe@syntax-dispatch jW36e3@t '(_ any any)))) (if jW36e5@ls/false (apply (lambda (jW36e7@who jW36e8@expr) (if (jW2ef7@id? jW36e7@who) (jW30b4@bless (list 'define-syntax jW36e7@who (list 'make-traced-macro (list 'quote jW36e7@who) jW36e8@expr))) (jW31de@syntax-violation '#f '"invalid name" jW36e1@stx))) jW36e5@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW36e3@t)))))) (set! jW4bed@jW30c4@trace-define-syntax-macro jW30c4@trace-define-syntax-macro) (set! jW30c6@trace-let/rec-syntax (lambda (jW36eb@who) (lambda (jW36ed@stx) (let ((jW36ef@t jW36ed@stx)) (let ((jW36f1@ls/false (jW30fe@syntax-dispatch jW36ef@t '(_ #(each (any any)) any . each-any)))) (if jW36f1@ls/false (apply (lambda (jW36f3@lhs* jW36f4@rhs* jW36f5@b jW36f6@b*) (if (jW2eff@valid-bound-ids? jW36f3@lhs*) (let ((jW36fb@rhs* (map (lambda (jW36fd@lhs jW36fe@rhs) (list 'make-traced-macro (list 'quote jW36fd@lhs) jW36fe@rhs)) jW36f3@lhs* jW36f4@rhs*))) (jW30b4@bless (cons jW36eb@who (cons (map list jW36f3@lhs* jW36fb@rhs*) (cons jW36f5@b jW36f6@b*))))) (jW30b8@invalid-fmls-error jW36ed@stx jW36f3@lhs*))) jW36f1@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW36ef@t))))))) (set! jW4bee@jW30c6@trace-let/rec-syntax jW30c6@trace-let/rec-syntax) (set! jW30c8@trace-let-syntax-macro (jW30c6@trace-let/rec-syntax 'let-syntax)) (set! jW4bef@jW30c8@trace-let-syntax-macro jW30c8@trace-let-syntax-macro) (set! jW30ca@trace-letrec-syntax-macro (jW30c6@trace-let/rec-syntax 'letrec-syntax)) (set! jW4bf0@jW30ca@trace-letrec-syntax-macro jW30ca@trace-letrec-syntax-macro) (set! jW30cc@guard-macro (lambda (jW3701@x) (letrec* ((jW3704@gen-clauses (lambda (jW371b@con jW371c@outerk jW371d@clause*) (letrec* ((jW3722@f (lambda (jW375b@x jW375c@k) (let ((jW375f@t jW375b@x)) (let ((jW3761@ls/false (jW30fe@syntax-dispatch jW375f@t '(any #(scheme-id =>) any)))) (if jW3761@ls/false (apply (lambda (jW3763@e jW3764@p) (let ((jW3767@t (gensym))) (list 'let (list (list jW3767@t jW3763@e)) (list 'if jW3767@t (list jW3764@p jW3767@t) jW375c@k)))) jW3761@ls/false) (let ((jW3769@t jW375f@t)) (let ((jW376b@ls/false (jW30fe@syntax-dispatch jW3769@t '(any)))) (if jW376b@ls/false (apply (lambda (jW376d@e) (let ((jW376f@t (gensym))) (list 'let (list (list jW376f@t jW376d@e)) (list 'if jW376f@t jW376f@t jW375c@k)))) jW376b@ls/false) (let ((jW3771@t jW3769@t)) (let ((jW3773@ls/false (jW30fe@syntax-dispatch jW3771@t '(any any . each-any)))) (if jW3773@ls/false (apply (lambda (jW3775@e jW3776@v jW3777@v*) (list 'if jW3775@e (cons 'begin (cons jW3776@v jW3777@v*)) jW375c@k)) jW3773@ls/false) (let ((jW377b@t jW3771@t)) (let ((jW377d@ls/false (jW30fe@syntax-dispatch jW377b@t '_))) (if jW377d@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid guard clause" jW375b@x)) jW377d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW377b@t))))))))))))))) (jW3724@f* (lambda (jW3731@x*) (let ((jW3733@t jW3731@x*)) (let ((jW3735@ls/false (jW30fe@syntax-dispatch jW3733@t '()))) (if jW3735@ls/false (apply (lambda () (let ((jW3737@g (gensym))) (values (list jW3737@g (list 'lambda '() (list 'raise-continuable jW371b@con))) jW3737@g))) jW3735@ls/false) (let ((jW3739@t jW3733@t)) (let ((jW373b@ls/false (jW30fe@syntax-dispatch jW3739@t '((#(scheme-id else) any . each-any))))) (if jW373b@ls/false (apply (lambda (jW373d@e jW373e@e*) (values (cons 'begin (cons jW373d@e jW373e@e*)) '#f)) jW373b@ls/false) (let ((jW3741@t jW3739@t)) (let ((jW3743@ls/false (jW30fe@syntax-dispatch jW3741@t '(any . any)))) (if jW3743@ls/false (apply (lambda (jW3745@cls jW3746@cls*) (call-with-values (lambda () (jW3724@f* jW3746@cls*)) (lambda (jW374d@jW374a jW374e@jW374c) (let ((jW3751@g jW374e@jW374c) (jW3752@e jW374d@jW374a)) (values (jW3722@f jW3745@cls jW3752@e) jW3751@g))))) jW3743@ls/false) (let ((jW3755@t jW3741@t)) (let ((jW3757@ls/false (jW30fe@syntax-dispatch jW3755@t 'any))) (if jW3757@ls/false (apply (lambda (jW3759@others) (jW31de@syntax-violation '#f '"invalid guard clause" jW3759@others)) jW3757@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3755@t)))))))))))))))) (call-with-values (lambda () (jW3724@f* jW371d@clause*)) (lambda (jW3729@jW3726 jW372a@jW3728) (let ((jW372d@raisek jW372a@jW3728) (jW372e@code jW3729@jW3726)) (if jW372d@raisek (list (list 'call/cc (list 'lambda (list jW372d@raisek) (list jW371c@outerk (list 'lambda '() jW372e@code))))) (list jW371c@outerk (list 'lambda '() jW372e@code)))))))))) (let ((jW3705@t jW3701@x)) (let ((jW3707@ls/false (jW30fe@syntax-dispatch jW3705@t '(_ (any . each-any) any . each-any)))) (if (and jW3707@ls/false (apply (lambda (jW3709@con jW370a@clause* jW370b@b jW370c@b*) (jW2ef7@id? jW3709@con)) jW3707@ls/false)) (apply (lambda (jW3711@con jW3712@clause* jW3713@b jW3714@b*) (let ((jW3719@outerk (gensym))) (jW30b4@bless (list (list 'call/cc (list 'lambda (list jW3719@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list jW3711@con) (jW3704@gen-clauses jW3711@con jW3719@outerk jW3712@clause*)) (cons 'lambda (cons '() (cons jW3713@b jW3714@b*))))))))))) jW3707@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3705@t))))))) (set! jW4bf1@jW30cc@guard-macro jW30cc@guard-macro) (set! jW30ce@define-enumeration-macro (lambda (jW377f@stx) (letrec* ((jW3782@set? (lambda (jW379b@x) (or (null? jW379b@x) (and (not (memq (car jW379b@x) (cdr jW379b@x))) (jW3782@set? (cdr jW379b@x)))))) (jW3784@remove-dups (lambda (jW3799@ls) (if (null? jW3799@ls) '() (cons (car jW3799@ls) (jW3784@remove-dups (remq (car jW3799@ls) (cdr jW3799@ls)))))))) (let ((jW3785@t jW377f@stx)) (let ((jW3787@ls/false (jW30fe@syntax-dispatch jW3785@t '(_ any each-any any)))) (if (and jW3787@ls/false (apply (lambda (jW3789@name jW378a@id* jW378b@maker) (and (jW2ef7@id? jW3789@name) (jW2ef7@id? jW378b@maker) (for-all jW2ef7@id? jW378a@id*))) jW3787@ls/false)) (apply (lambda (jW378f@name jW3790@id* jW3791@maker) (let ((jW3795@name* (jW3784@remove-dups (jW31e4@syntax->datum jW3790@id*))) (jW3796@mk (gensym))) (jW30b4@bless (list 'begin (list 'define jW3796@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote jW3795@name*)))) (list 'define-syntax jW378f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote jW3795@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote jW378f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax jW3791@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote jW3791@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote jW3795@name*)) (cons 'syntax-violation (cons (list 'quote jW3791@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons jW3796@mk '('(n* ...))))))))))))) jW3787@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3785@t))))))) (set! jW4bf2@jW30ce@define-enumeration-macro jW30ce@define-enumeration-macro) (set! jW30d0@time-macro (lambda (jW379d@stx) (let ((jW379f@t jW379d@stx)) (let ((jW37a1@ls/false (jW30fe@syntax-dispatch jW379f@t '(_ any)))) (if jW37a1@ls/false (apply (lambda (jW37a3@expr) (jW30b4@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() jW37a3@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) jW37a1@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW379f@t)))))) (set! jW4bf3@jW30d0@time-macro jW30d0@time-macro) (set! jW30d2@delay-macro (lambda (jW37a5@stx) (let ((jW37a7@t jW37a5@stx)) (let ((jW37a9@ls/false (jW30fe@syntax-dispatch jW37a7@t '(_ any)))) (if jW37a9@ls/false (apply (lambda (jW37ab@expr) (jW30b4@bless (list 'make-promise (list 'lambda '() jW37ab@expr)))) jW37a9@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW37a7@t)))))) (set! jW4bf4@jW30d2@delay-macro jW30d2@delay-macro) (set! jW30d4@assert-macro (lambda (jW37ad@stx) (let ((jW37af@t jW37ad@stx)) (let ((jW37b1@ls/false (jW30fe@syntax-dispatch jW37af@t '(_ any)))) (if jW37b1@ls/false (apply (lambda (jW37b3@expr) (let ((jW37b5@pos (or (jW31d6@expression-position jW37ad@stx) (jW31d6@expression-position jW37b3@expr)))) (jW30b4@bless (list 'let (list (list 'x jW37b3@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote jW37b3@expr) (list 'quote jW37b5@pos))))))) jW37b1@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW37af@t)))))) (set! jW4bf5@jW30d4@assert-macro jW30d4@assert-macro) (set! jW30d6@endianness-macro (lambda (jW37b7@stx) (let ((jW37b9@t jW37b7@stx)) (let ((jW37bb@ls/false (jW30fe@syntax-dispatch jW37b9@t '(_ any)))) (if jW37bb@ls/false (apply (lambda (jW37bd@e) (let ((jW37bf@t (jW31e4@syntax->datum jW37bd@e))) (if (memv jW37bf@t '(little)) (jW30b4@bless ''little) (if (memv jW37bf@t '(big)) (jW30b4@bless ''big) (jW31de@syntax-violation '#f '"endianness must be big or little" jW37b7@stx))))) jW37bb@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW37b9@t)))))) (set! jW4bf6@jW30d6@endianness-macro jW30d6@endianness-macro) (set! jW30d8@identifier-syntax-macro (lambda (jW37c1@stx) (let ((jW37c3@t jW37c1@stx)) (let ((jW37c5@ls/false (jW30fe@syntax-dispatch jW37c3@t '(_ any)))) (if jW37c5@ls/false (apply (lambda (jW37c7@expr) (jW30b4@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax jW37c7@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax jW37c7@expr) '((syntax (e* ...)))))))))) jW37c5@ls/false) (let ((jW37c9@t jW37c3@t)) (let ((jW37cb@ls/false (jW30fe@syntax-dispatch jW37c9@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and jW37cb@ls/false (apply (lambda (jW37cd@id1 jW37ce@expr1 jW37cf@id2 jW37d0@expr2 jW37d1@expr3) (and (jW2ef7@id? jW37cd@id1) (jW2ef7@id? jW37cf@id2) (jW2ef7@id? jW37d0@expr2))) jW37cb@ls/false)) (apply (lambda (jW37d7@id1 jW37d8@expr1 jW37d9@id2 jW37da@expr2 jW37db@expr3) (jW30b4@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax jW37d8@expr1)) (list (list 'set! 'id jW37da@expr2) (list 'syntax jW37db@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons jW37d8@expr1 '(e* ...))))))))) jW37cb@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW37c9@t))))))))) (set! jW4bf7@jW30d8@identifier-syntax-macro jW30d8@identifier-syntax-macro) (set! jW30da@do-macro (lambda (jW37e1@stx) (letrec* ((jW37e4@bind (lambda (jW37fb@x) (let ((jW37fd@t jW37fb@x)) (let ((jW37ff@ls/false (jW30fe@syntax-dispatch jW37fd@t '(any any)))) (if jW37ff@ls/false (apply (lambda (jW3801@x jW3802@init) (list jW3801@x jW3802@init jW3801@x)) jW37ff@ls/false) (let ((jW3805@t jW37fd@t)) (let ((jW3807@ls/false (jW30fe@syntax-dispatch jW3805@t '(any any any)))) (if jW3807@ls/false (apply (lambda (jW3809@x jW380a@init jW380b@step) (list jW3809@x jW380a@init jW380b@step)) jW3807@ls/false) (let ((jW380f@t jW3805@t)) (let ((jW3811@ls/false (jW30fe@syntax-dispatch jW380f@t '_))) (if jW3811@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid binding" jW37e1@stx)) jW3811@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW380f@t))))))))))))) (let ((jW37e5@t jW37e1@stx)) (let ((jW37e7@ls/false (jW30fe@syntax-dispatch jW37e5@t '(_ each-any (any . each-any) . each-any)))) (if jW37e7@ls/false (apply (lambda (jW37e9@binding* jW37ea@test jW37eb@expr* jW37ec@command*) (let ((jW37f1@t (map jW37e4@bind jW37e9@binding*))) (let ((jW37f3@ls/false (jW30fe@syntax-dispatch jW37f1@t '#(each (any any any))))) (if jW37f3@ls/false (apply (lambda (jW37f5@x* jW37f6@init* jW37f7@step*) (if (jW2eff@valid-bound-ids? jW37f5@x*) (jW30b4@bless (list 'letrec (list (list 'loop (list 'lambda jW37f5@x* (list 'if jW37ea@test (cons 'begin (cons '(if #f #f) jW37eb@expr*)) (cons 'begin (append jW37ec@command* (list (cons 'loop jW37f7@step*)))))))) (cons 'loop jW37f6@init*))) (jW31de@syntax-violation '#f '"invalid bindings" jW37e1@stx))) jW37f3@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW37f1@t))))) jW37e7@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW37e5@t))))))) (set! jW4bf8@jW30da@do-macro jW30da@do-macro) (set! jW30dc@let*-macro (lambda (jW3813@stx) (let ((jW3815@t jW3813@stx)) (let ((jW3817@ls/false (jW30fe@syntax-dispatch jW3815@t '(_ #(each (any any)) any . each-any)))) (if (and jW3817@ls/false (apply (lambda (jW3819@lhs* jW381a@rhs* jW381b@b jW381c@b*) (for-all jW2ef7@id? jW3819@lhs*)) jW3817@ls/false)) (apply (lambda (jW3821@lhs* jW3822@rhs* jW3823@b jW3824@b*) (jW30b4@bless (let jW382b@f ((jW3829@x* (map list jW3821@lhs* jW3822@rhs*))) (if (null? jW3829@x*) (cons 'let (cons '() (cons jW3823@b jW3824@b*))) (list 'let (list (car jW3829@x*)) (jW382b@f (cdr jW3829@x*))))))) jW3817@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3815@t)))))) (set! jW4bf9@jW30dc@let*-macro jW30dc@let*-macro) (set! jW30de@or-macro (lambda (jW382d@stx) (let ((jW382f@t jW382d@stx)) (let ((jW3831@ls/false (jW30fe@syntax-dispatch jW382f@t '(_)))) (if jW3831@ls/false (apply (lambda () '#f) jW3831@ls/false) (let ((jW3833@t jW382f@t)) (let ((jW3835@ls/false (jW30fe@syntax-dispatch jW3833@t '(_ any . each-any)))) (if jW3835@ls/false (apply (lambda (jW3837@e jW3838@e*) (jW30b4@bless (let jW383f@f ((jW383b@e jW3837@e) (jW383c@e* jW3838@e*)) (if (null? jW383c@e*) (list 'begin '#f jW383b@e) (list 'let (list (list 't jW383b@e)) (list 'if 't 't (jW383f@f (car jW383c@e*) (cdr jW383c@e*)))))))) jW3835@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3833@t))))))))) (set! jW4bfa@jW30de@or-macro jW30de@or-macro) (set! jW30e0@and-macro (lambda (jW3841@stx) (let ((jW3843@t jW3841@stx)) (let ((jW3845@ls/false (jW30fe@syntax-dispatch jW3843@t '(_)))) (if jW3845@ls/false (apply (lambda () '#t) jW3845@ls/false) (let ((jW3847@t jW3843@t)) (let ((jW3849@ls/false (jW30fe@syntax-dispatch jW3847@t '(_ any . each-any)))) (if jW3849@ls/false (apply (lambda (jW384b@e jW384c@e*) (jW30b4@bless (let jW3853@f ((jW384f@e jW384b@e) (jW3850@e* jW384c@e*)) (if (null? jW3850@e*) (list 'begin '#f jW384f@e) (cons 'if (cons jW384f@e (cons (jW3853@f (car jW3850@e*) (cdr jW3850@e*)) '(#f)))))))) jW3849@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3847@t))))))))) (set! jW4bfb@jW30e0@and-macro jW30e0@and-macro) (set! jW30e2@cond-macro (lambda (jW3855@stx) (let ((jW3857@t jW3855@stx)) (let ((jW3859@ls/false (jW30fe@syntax-dispatch jW3857@t '(_ any . each-any)))) (if jW3859@ls/false (apply (lambda (jW385b@cls jW385c@cls*) (jW30b4@bless (let jW3863@f ((jW385f@cls jW385b@cls) (jW3860@cls* jW385c@cls*)) (if (null? jW3860@cls*) (let ((jW3865@t jW385f@cls)) (let ((jW3867@ls/false (jW30fe@syntax-dispatch jW3865@t '(#(scheme-id else) any . each-any)))) (if jW3867@ls/false (apply (lambda (jW3869@e jW386a@e*) (cons 'begin (cons jW3869@e jW386a@e*))) jW3867@ls/false) (let ((jW386d@t jW3865@t)) (let ((jW386f@ls/false (jW30fe@syntax-dispatch jW386d@t '(any #(scheme-id =>) any)))) (if jW386f@ls/false (apply (lambda (jW3871@e jW3872@p) (list 'let (list (list 't jW3871@e)) (list 'if 't (cons jW3872@p '(t))))) jW386f@ls/false) (let ((jW3875@t jW386d@t)) (let ((jW3877@ls/false (jW30fe@syntax-dispatch jW3875@t '(any)))) (if jW3877@ls/false (apply (lambda (jW3879@e) (cons 'or (cons jW3879@e '((if #f #f))))) jW3877@ls/false) (let ((jW387b@t jW3875@t)) (let ((jW387d@ls/false (jW30fe@syntax-dispatch jW387b@t '(any . each-any)))) (if jW387d@ls/false (apply (lambda (jW387f@e jW3880@e*) (list 'if jW387f@e (cons 'begin jW3880@e*))) jW387d@ls/false) (let ((jW3883@t jW387b@t)) (let ((jW3885@ls/false (jW30fe@syntax-dispatch jW3883@t '_))) (if jW3885@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid last clause" jW3855@stx)) jW3885@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3883@t)))))))))))))))) (let ((jW3887@t jW385f@cls)) (let ((jW3889@ls/false (jW30fe@syntax-dispatch jW3887@t '(#(scheme-id else) any . each-any)))) (if jW3889@ls/false (apply (lambda (jW388b@e jW388c@e*) (jW31de@syntax-violation '#f '"incorrect position of keyword else" jW3855@stx)) jW3889@ls/false) (let ((jW388f@t jW3887@t)) (let ((jW3891@ls/false (jW30fe@syntax-dispatch jW388f@t '(any #(scheme-id =>) any)))) (if jW3891@ls/false (apply (lambda (jW3893@e jW3894@p) (list 'let (list (list 't jW3893@e)) (list 'if 't (cons jW3894@p '(t)) (jW3863@f (car jW3860@cls*) (cdr jW3860@cls*))))) jW3891@ls/false) (let ((jW3897@t jW388f@t)) (let ((jW3899@ls/false (jW30fe@syntax-dispatch jW3897@t '(any)))) (if jW3899@ls/false (apply (lambda (jW389b@e) (list 'or jW389b@e (jW3863@f (car jW3860@cls*) (cdr jW3860@cls*)))) jW3899@ls/false) (let ((jW389d@t jW3897@t)) (let ((jW389f@ls/false (jW30fe@syntax-dispatch jW389d@t '(any . each-any)))) (if jW389f@ls/false (apply (lambda (jW38a1@e jW38a2@e*) (list 'if jW38a1@e (cons 'begin jW38a2@e*) (jW3863@f (car jW3860@cls*) (cdr jW3860@cls*)))) jW389f@ls/false) (let ((jW38a5@t jW389d@t)) (let ((jW38a7@ls/false (jW30fe@syntax-dispatch jW38a5@t '_))) (if jW38a7@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid last clause" jW3855@stx)) jW38a7@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW38a5@t)))))))))))))))))))) jW3859@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3857@t)))))) (set! jW4bfc@jW30e2@cond-macro jW30e2@cond-macro) (set! jW30e4@do-include (lambda (jW38a9@stx jW38aa@id jW38ab@filename) (let ((jW38af@filename (jW2f0b@stx->datum jW38ab@filename))) (begin (if (not (and (string? jW38af@filename) (jW2ef7@id? jW38aa@id))) (jW31de@syntax-violation '#f '"invalid syntax" jW38a9@stx) (void)) (cons (jW30b4@bless 'begin) (with-input-from-file jW38af@filename (lambda () (let jW38b3@f ((jW38b1@ls '())) (let ((jW38b5@x (jW2a39@jW2909@read-annotated))) (if (eof-object? jW38b5@x) (reverse jW38b1@ls) (jW38b3@f (cons (jW2ed7@datum->stx jW38aa@id jW38b5@x) jW38b1@ls)))))))))))) (set! jW4bfd@jW30e4@do-include jW30e4@do-include) (set! jW30e6@include-macro (lambda (jW38b7@e) (let ((jW38b9@t jW38b7@e)) (let ((jW38bb@ls/false (jW30fe@syntax-dispatch jW38b9@t '(any any)))) (if jW38bb@ls/false (apply (lambda (jW38bd@id jW38be@filename) (jW30e4@do-include jW38b7@e jW38bd@id jW38be@filename)) jW38bb@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW38b9@t)))))) (set! jW4bfe@jW30e6@include-macro jW30e6@include-macro) (set! jW30e8@include-into-macro (lambda (jW38c1@e) (let ((jW38c3@t jW38c1@e)) (let ((jW38c5@ls/false (jW30fe@syntax-dispatch jW38c3@t '(_ any any)))) (if jW38c5@ls/false (apply (lambda (jW38c7@id jW38c8@filename) (jW30e4@do-include jW38c1@e jW38c7@id jW38c8@filename)) jW38c5@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW38c3@t)))))) (set! jW4bff@jW30e8@include-into-macro jW30e8@include-into-macro) (set! jW30ea@syntax-rules-macro (lambda (jW38cb@e) (let ((jW38cd@t jW38cb@e)) (let ((jW38cf@ls/false (jW30fe@syntax-dispatch jW38cd@t '(_ each-any . #(each (any any)))))) (if jW38cf@ls/false (apply (lambda (jW38d1@lits jW38d2@pat* jW38d3@tmp*) (begin (jW3104@verify-literals jW38d1@lits jW38cb@e) (jW30b4@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons jW38d1@lits (map (lambda (jW38d7@pat jW38d8@tmp) (let ((jW38db@t jW38d7@pat)) (let ((jW38dd@ls/false (jW30fe@syntax-dispatch jW38db@t '(_ . any)))) (if jW38dd@ls/false (apply (lambda (jW38df@rest) (list (cons 'g jW38df@rest) (list 'syntax jW38d8@tmp))) jW38dd@ls/false) (let ((jW38e1@t jW38db@t)) (let ((jW38e3@ls/false (jW30fe@syntax-dispatch jW38e1@t '_))) (if jW38e3@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid syntax-rules pattern" jW38cb@e jW38d7@pat)) jW38e3@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW38e1@t)))))))) jW38d2@pat* jW38d3@tmp*)))))))) jW38cf@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW38cd@t)))))) (set! jW4c00@jW30ea@syntax-rules-macro jW30ea@syntax-rules-macro) (set! jW30ec@quasiquote-macro (letrec* ((jW38e6@datum (lambda (jW39e7@x) (list (jW3086@scheme-stx 'quote) (jW2edf@mkstx jW39e7@x jW2e7b@top-mark* '() '())))) (jW3902@quasicons* (lambda (jW39df@x jW39e0@y) (let jW39e5@f ((jW39e3@x jW39df@x)) (if (null? jW39e3@x) jW39e0@y (jW3904@quasicons (car jW39e3@x) (jW39e5@f (cdr jW39e3@x))))))) (jW3904@quasicons (lambda (jW39b9@x jW39ba@y) (let ((jW39bd@t jW39ba@y)) (let ((jW39bf@ls/false (jW30fe@syntax-dispatch jW39bd@t '(#(scheme-id quote) any)))) (if jW39bf@ls/false (apply (lambda (jW39c1@dy) (let ((jW39c3@t jW39b9@x)) (let ((jW39c5@ls/false (jW30fe@syntax-dispatch jW39c3@t '(#(scheme-id quote) any)))) (if jW39c5@ls/false (apply (lambda (jW39c7@dx) (list (jW3086@scheme-stx 'quote) (cons jW39c7@dx jW39c1@dy))) jW39c5@ls/false) (let ((jW39c9@t jW39c3@t)) (let ((jW39cb@ls/false (jW30fe@syntax-dispatch jW39c9@t '_))) (if jW39cb@ls/false (apply (lambda () (let ((jW39cd@t jW39c1@dy)) (let ((jW39cf@ls/false (jW30fe@syntax-dispatch jW39cd@t '()))) (if jW39cf@ls/false (apply (lambda () (list (jW3086@scheme-stx 'list) jW39b9@x)) jW39cf@ls/false) (let ((jW39d1@t jW39cd@t)) (let ((jW39d3@ls/false (jW30fe@syntax-dispatch jW39d1@t '_))) (if jW39d3@ls/false (apply (lambda () (list (jW3086@scheme-stx 'cons) jW39b9@x jW39ba@y)) jW39d3@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW39d1@t)))))))) jW39cb@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW39c9@t)))))))) jW39bf@ls/false) (let ((jW39d5@t jW39bd@t)) (let ((jW39d7@ls/false (jW30fe@syntax-dispatch jW39d5@t '(#(scheme-id list) . each-any)))) (if jW39d7@ls/false (apply (lambda (jW39d9@stuff) (cons* (jW3086@scheme-stx 'list) jW39b9@x jW39d9@stuff)) jW39d7@ls/false) (let ((jW39db@t jW39d5@t)) (let ((jW39dd@ls/false (jW30fe@syntax-dispatch jW39db@t '_))) (if jW39dd@ls/false (apply (lambda () (list (jW3086@scheme-stx 'cons) jW39b9@x jW39ba@y)) jW39dd@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW39db@t)))))))))))) (jW3906@quasiappend (lambda (jW399f@x jW39a0@y) (let ((jW39a3@ls (let jW39a7@f ((jW39a5@x jW399f@x)) (if (null? jW39a5@x) (let ((jW39a9@t jW39a0@y)) (let ((jW39ab@ls/false (jW30fe@syntax-dispatch jW39a9@t '(#(scheme-id quote) ())))) (if jW39ab@ls/false (apply (lambda () '()) jW39ab@ls/false) (let ((jW39ad@t jW39a9@t)) (let ((jW39af@ls/false (jW30fe@syntax-dispatch jW39ad@t '_))) (if jW39af@ls/false (apply (lambda () (list jW39a0@y)) jW39af@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW39ad@t))))))) (let ((jW39b1@t (car jW39a5@x))) (let ((jW39b3@ls/false (jW30fe@syntax-dispatch jW39b1@t '(#(scheme-id quote) ())))) (if jW39b3@ls/false (apply (lambda () (jW39a7@f (cdr jW39a5@x))) jW39b3@ls/false) (let ((jW39b5@t jW39b1@t)) (let ((jW39b7@ls/false (jW30fe@syntax-dispatch jW39b5@t '_))) (if jW39b7@ls/false (apply (lambda () (cons (car jW39a5@x) (jW39a7@f (cdr jW39a5@x)))) jW39b7@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW39b5@t))))))))))) (if (null? jW39a3@ls) (list (jW3086@scheme-stx 'quote) '()) (if (null? (cdr jW39a3@ls)) (car jW39a3@ls) (cons* (jW3086@scheme-stx 'append) jW39a3@ls)))))) (jW3908@quasivector (lambda (jW396d@x) (let ((jW396f@pat-x jW396d@x)) (let ((jW3971@t jW396f@pat-x)) (let ((jW3973@ls/false (jW30fe@syntax-dispatch jW3971@t '(#(scheme-id quote) each-any)))) (if jW3973@ls/false (apply (lambda (jW3975@x*) (list (jW3086@scheme-stx 'quote) (list->vector jW3975@x*))) jW3973@ls/false) (let ((jW3977@t jW3971@t)) (let ((jW3979@ls/false (jW30fe@syntax-dispatch jW3977@t '_))) (if jW3979@ls/false (apply (lambda () (let jW3981@f ((jW397b@x jW396d@x) (jW397c@k (lambda (jW397f@ls) (cons* (jW3086@scheme-stx 'vector) jW397f@ls)))) (let ((jW3983@t jW397b@x)) (let ((jW3985@ls/false (jW30fe@syntax-dispatch jW3983@t '(#(scheme-id quote) each-any)))) (if jW3985@ls/false (apply (lambda (jW3987@x*) (jW397c@k (map (lambda (jW3989@x) (list (jW3086@scheme-stx 'quote) jW3989@x)) jW3987@x*))) jW3985@ls/false) (let ((jW398b@t jW3983@t)) (let ((jW398d@ls/false (jW30fe@syntax-dispatch jW398b@t '(#(scheme-id list) . each-any)))) (if jW398d@ls/false (apply (lambda (jW398f@x*) (jW397c@k jW398f@x*)) jW398d@ls/false) (let ((jW3991@t jW398b@t)) (let ((jW3993@ls/false (jW30fe@syntax-dispatch jW3991@t '(#(scheme-id cons) any any)))) (if jW3993@ls/false (apply (lambda (jW3995@x jW3996@y) (jW3981@f jW3996@y (lambda (jW3999@ls) (jW397c@k (cons jW3995@x jW3999@ls))))) jW3993@ls/false) (let ((jW399b@t jW3991@t)) (let ((jW399d@ls/false (jW30fe@syntax-dispatch jW399b@t '_))) (if jW399d@ls/false (apply (lambda () (list (jW3086@scheme-stx 'list->vector) jW396f@pat-x)) jW399d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW399b@t))))))))))))))) jW3979@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3977@t)))))))))) (jW390a@vquasi (lambda (jW394b@p jW394c@lev) (let ((jW394f@t jW394b@p)) (let ((jW3951@ls/false (jW30fe@syntax-dispatch jW394f@t '(any . any)))) (if jW3951@ls/false (apply (lambda (jW3953@p jW3954@q) (let ((jW3957@t jW3953@p)) (let ((jW3959@ls/false (jW30fe@syntax-dispatch jW3957@t '(#(scheme-id unquote) . each-any)))) (if jW3959@ls/false (apply (lambda (jW395b@p) (if (= jW394c@lev '0) (jW3902@quasicons* jW395b@p (jW390a@vquasi jW3954@q jW394c@lev)) (jW3904@quasicons (jW3904@quasicons (jW38e6@datum 'unquote) (jW390c@quasi jW395b@p (- jW394c@lev '1))) (jW390a@vquasi jW3954@q jW394c@lev)))) jW3959@ls/false) (let ((jW395d@t jW3957@t)) (let ((jW395f@ls/false (jW30fe@syntax-dispatch jW395d@t '(#(scheme-id unquote-splicing) . each-any)))) (if jW395f@ls/false (apply (lambda (jW3961@p) (if (= jW394c@lev '0) (jW3906@quasiappend jW3961@p (jW390a@vquasi jW3954@q jW394c@lev)) (jW3904@quasicons (jW3904@quasicons (jW38e6@datum 'unquote-splicing) (jW390c@quasi jW3961@p (- jW394c@lev '1))) (jW390a@vquasi jW3954@q jW394c@lev)))) jW395f@ls/false) (let ((jW3963@t jW395d@t)) (let ((jW3965@ls/false (jW30fe@syntax-dispatch jW3963@t 'any))) (if jW3965@ls/false (apply (lambda (jW3967@p) (jW3904@quasicons (jW390c@quasi jW3967@p jW394c@lev) (jW390a@vquasi jW3954@q jW394c@lev))) jW3965@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3963@t))))))))))) jW3951@ls/false) (let ((jW3969@t jW394f@t)) (let ((jW396b@ls/false (jW30fe@syntax-dispatch jW3969@t '()))) (if jW396b@ls/false (apply (lambda () (list (jW3086@scheme-stx 'quote) '())) jW396b@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3969@t))))))))) (jW390c@quasi (lambda (jW3915@p jW3916@lev) (let ((jW3919@t jW3915@p)) (let ((jW391b@ls/false (jW30fe@syntax-dispatch jW3919@t '(#(scheme-id unquote) any)))) (if jW391b@ls/false (apply (lambda (jW391d@p) (if (= jW3916@lev '0) jW391d@p (jW3904@quasicons (jW38e6@datum 'unquote) (jW390c@quasi (list jW391d@p) (- jW3916@lev '1))))) jW391b@ls/false) (let ((jW391f@t jW3919@t)) (let ((jW3921@ls/false (jW30fe@syntax-dispatch jW391f@t '((#(scheme-id unquote) . each-any) . any)))) (if jW3921@ls/false (apply (lambda (jW3923@p jW3924@q) (if (= jW3916@lev '0) (jW3902@quasicons* jW3923@p (jW390c@quasi jW3924@q jW3916@lev)) (jW3904@quasicons (jW3904@quasicons (jW38e6@datum 'unquote) (jW390c@quasi jW3923@p (- jW3916@lev '1))) (jW390c@quasi jW3924@q jW3916@lev)))) jW3921@ls/false) (let ((jW3927@t jW391f@t)) (let ((jW3929@ls/false (jW30fe@syntax-dispatch jW3927@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if jW3929@ls/false (apply (lambda (jW392b@p jW392c@q) (if (= jW3916@lev '0) (jW3906@quasiappend jW392b@p (jW390c@quasi jW392c@q jW3916@lev)) (jW3904@quasicons (jW3904@quasicons (jW38e6@datum 'unquote-splicing) (jW390c@quasi jW392b@p (- jW3916@lev '1))) (jW390c@quasi jW392c@q jW3916@lev)))) jW3929@ls/false) (let ((jW392f@t jW3927@t)) (let ((jW3931@ls/false (jW30fe@syntax-dispatch jW392f@t '(#(scheme-id quasiquote) any)))) (if jW3931@ls/false (apply (lambda (jW3933@p) (jW3904@quasicons (jW38e6@datum 'quasiquote) (jW390c@quasi (list jW3933@p) (+ jW3916@lev '1)))) jW3931@ls/false) (let ((jW3935@t jW392f@t)) (let ((jW3937@ls/false (jW30fe@syntax-dispatch jW3935@t '(any . any)))) (if jW3937@ls/false (apply (lambda (jW3939@p jW393a@q) (jW3904@quasicons (jW390c@quasi jW3939@p jW3916@lev) (jW390c@quasi jW393a@q jW3916@lev))) jW3937@ls/false) (let ((jW393d@t jW3935@t)) (let ((jW393f@ls/false (jW30fe@syntax-dispatch jW393d@t '#(vector each-any)))) (if (and jW393f@ls/false (apply (lambda (jW3941@x) (not (jW2ec3@stx? jW3941@x))) jW393f@ls/false)) (apply (lambda (jW3943@x) (jW3908@quasivector (jW390a@vquasi jW3943@x jW3916@lev))) jW393f@ls/false) (let ((jW3945@t jW393d@t)) (let ((jW3947@ls/false (jW30fe@syntax-dispatch jW3945@t 'any))) (if jW3947@ls/false (apply (lambda (jW3949@p) (list (jW3086@scheme-stx 'quote) jW3949@p)) jW3947@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3945@t))))))))))))))))))))))))) (lambda (jW390d@x) (let ((jW390f@t jW390d@x)) (let ((jW3911@ls/false (jW30fe@syntax-dispatch jW390f@t '(_ any)))) (if jW3911@ls/false (apply (lambda (jW3913@e) (jW390c@quasi jW3913@e '0)) jW3911@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW390f@t))))))) (set! jW4c01@jW30ec@quasiquote-macro jW30ec@quasiquote-macro) (set! jW30ee@quasisyntax-macro (letrec* ((jW39ea@quasi (lambda (jW3a05@p jW3a06@lev) (let ((jW3a09@t jW3a05@p)) (let ((jW3a0b@ls/false (jW30fe@syntax-dispatch jW3a09@t '(#(scheme-id unsyntax) any)))) (if jW3a0b@ls/false (apply (lambda (jW3a0d@p) (if (= jW3a06@lev '0) (let ((jW3a0f@g (gensym))) (values (list jW3a0f@g) (list jW3a0d@p) jW3a0f@g)) (call-with-values (lambda () (jW39ea@quasi jW3a0d@p (- jW3a06@lev '1))) (lambda (jW3a17@jW3a12 jW3a18@jW3a14 jW3a19@jW3a16) (let ((jW3a1d@p jW3a19@jW3a16) (jW3a1e@rhs* jW3a18@jW3a14) (jW3a1f@lhs* jW3a17@jW3a12)) (values jW3a1f@lhs* jW3a1e@rhs* (list 'unsyntax jW3a1d@p))))))) jW3a0b@ls/false) (let ((jW3a23@t jW3a09@t)) (let ((jW3a25@ls/false (jW30fe@syntax-dispatch jW3a23@t '#(scheme-id unsyntax)))) (if (and jW3a25@ls/false (apply (lambda () (= jW3a06@lev '0)) jW3a25@ls/false)) (apply (lambda () (jW31de@syntax-violation '#f '"incorrect use of unsyntax" jW3a05@p)) jW3a25@ls/false) (let ((jW3a27@t jW3a23@t)) (let ((jW3a29@ls/false (jW30fe@syntax-dispatch jW3a27@t '((#(scheme-id unsyntax) . each-any) . any)))) (if jW3a29@ls/false (apply (lambda (jW3a2b@p* jW3a2c@q) (call-with-values (lambda () (jW39ea@quasi jW3a2c@q jW3a06@lev)) (lambda (jW3a35@jW3a30 jW3a36@jW3a32 jW3a37@jW3a34) (let ((jW3a3b@q jW3a37@jW3a34) (jW3a3c@rhs* jW3a36@jW3a32) (jW3a3d@lhs* jW3a35@jW3a30)) (if (= jW3a06@lev '0) (let ((jW3a41@g* (map (lambda (jW3a43@x) (gensym)) jW3a2b@p*))) (values (append jW3a41@g* jW3a3d@lhs*) (append jW3a2b@p* jW3a3c@rhs*) (append jW3a41@g* jW3a3b@q))) (call-with-values (lambda () (jW39ea@quasi jW3a2b@p* (- jW3a06@lev '1))) (lambda (jW3a4b@jW3a46 jW3a4c@jW3a48 jW3a4d@jW3a4a) (let ((jW3a51@p* jW3a4d@jW3a4a) (jW3a52@rhs2* jW3a4c@jW3a48) (jW3a53@lhs2* jW3a4b@jW3a46)) (values (append jW3a53@lhs2* jW3a3d@lhs*) (append jW3a52@rhs2* jW3a3c@rhs*) (cons (cons 'unsyntax jW3a51@p*) jW3a3b@q)))))))))) jW3a29@ls/false) (let ((jW3a57@t jW3a27@t)) (let ((jW3a59@ls/false (jW30fe@syntax-dispatch jW3a57@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if jW3a59@ls/false (apply (lambda (jW3a5b@p* jW3a5c@q) (call-with-values (lambda () (jW39ea@quasi jW3a5c@q jW3a06@lev)) (lambda (jW3a65@jW3a60 jW3a66@jW3a62 jW3a67@jW3a64) (let ((jW3a6b@q jW3a67@jW3a64) (jW3a6c@rhs* jW3a66@jW3a62) (jW3a6d@lhs* jW3a65@jW3a60)) (if (= jW3a06@lev '0) (let ((jW3a71@g* (map (lambda (jW3a73@x) (gensym)) jW3a5b@p*))) (values (append (map (lambda (jW3a75@g) (cons jW3a75@g '(...))) jW3a71@g*) jW3a6d@lhs*) (append jW3a5b@p* jW3a6c@rhs*) (append (apply append (map (lambda (jW3a77@g) (cons jW3a77@g '(...))) jW3a71@g*)) jW3a6b@q))) (call-with-values (lambda () (jW39ea@quasi jW3a5b@p* (- jW3a06@lev '1))) (lambda (jW3a7f@jW3a7a jW3a80@jW3a7c jW3a81@jW3a7e) (let ((jW3a85@p* jW3a81@jW3a7e) (jW3a86@rhs2* jW3a80@jW3a7c) (jW3a87@lhs2* jW3a7f@jW3a7a)) (values (append jW3a87@lhs2* jW3a6d@lhs*) (append jW3a86@rhs2* jW3a6c@rhs*) (cons (cons 'unsyntax-splicing jW3a85@p*) jW3a6b@q)))))))))) jW3a59@ls/false) (let ((jW3a8b@t jW3a57@t)) (let ((jW3a8d@ls/false (jW30fe@syntax-dispatch jW3a8b@t '#(scheme-id unsyntax-splicing)))) (if (and jW3a8d@ls/false (apply (lambda () (= jW3a06@lev '0)) jW3a8d@ls/false)) (apply (lambda () (jW31de@syntax-violation '#f '"incorrect use of unsyntax-splicing" jW3a05@p)) jW3a8d@ls/false) (let ((jW3a8f@t jW3a8b@t)) (let ((jW3a91@ls/false (jW30fe@syntax-dispatch jW3a8f@t '(#(scheme-id quasisyntax) any)))) (if jW3a91@ls/false (apply (lambda (jW3a93@p) (call-with-values (lambda () (jW39ea@quasi jW3a93@p (+ jW3a06@lev '1))) (lambda (jW3a9b@jW3a96 jW3a9c@jW3a98 jW3a9d@jW3a9a) (let ((jW3aa1@p jW3a9d@jW3a9a) (jW3aa2@rhs* jW3a9c@jW3a98) (jW3aa3@lhs* jW3a9b@jW3a96)) (values jW3aa3@lhs* jW3aa2@rhs* (list 'quasisyntax jW3aa1@p)))))) jW3a91@ls/false) (let ((jW3aa7@t jW3a8f@t)) (let ((jW3aa9@ls/false (jW30fe@syntax-dispatch jW3aa7@t '(any . any)))) (if jW3aa9@ls/false (apply (lambda (jW3aab@p jW3aac@q) (call-with-values (lambda () (jW39ea@quasi jW3aab@p jW3a06@lev)) (lambda (jW3abb@jW3ab0 jW3abc@jW3ab2 jW3abd@jW3ab4) (call-with-values (lambda () (jW39ea@quasi jW3aac@q jW3a06@lev)) (lambda (jW3ac1@jW3ab6 jW3ac2@jW3ab8 jW3ac3@jW3aba) (let ((jW3ac7@q jW3ac3@jW3aba) (jW3ac8@rhs2* jW3ac2@jW3ab8) (jW3ac9@lhs2* jW3ac1@jW3ab6) (jW3aca@p jW3abd@jW3ab4) (jW3acb@rhs* jW3abc@jW3ab2) (jW3acc@lhs* jW3abb@jW3ab0)) (values (append jW3ac9@lhs2* jW3acc@lhs*) (append jW3ac8@rhs2* jW3acb@rhs*) (cons jW3aca@p jW3ac7@q)))))))) jW3aa9@ls/false) (let ((jW3ad3@t jW3aa7@t)) (let ((jW3ad5@ls/false (jW30fe@syntax-dispatch jW3ad3@t '#(vector each-any)))) (if jW3ad5@ls/false (apply (lambda (jW3ad7@x*) (call-with-values (lambda () (jW39ea@quasi jW3ad7@x* jW3a06@lev)) (lambda (jW3adf@jW3ada jW3ae0@jW3adc jW3ae1@jW3ade) (let ((jW3ae5@x* jW3ae1@jW3ade) (jW3ae6@rhs* jW3ae0@jW3adc) (jW3ae7@lhs* jW3adf@jW3ada)) (values jW3ae7@lhs* jW3ae6@rhs* (list->vector jW3ae5@x*)))))) jW3ad5@ls/false) (let ((jW3aeb@t jW3ad3@t)) (let ((jW3aed@ls/false (jW30fe@syntax-dispatch jW3aeb@t '_))) (if jW3aed@ls/false (apply (lambda () (values '() '() jW3a05@p)) jW3aed@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3aeb@t))))))))))))))))))))))))))))))) (lambda (jW39eb@x) (let ((jW39ed@t jW39eb@x)) (let ((jW39ef@ls/false (jW30fe@syntax-dispatch jW39ed@t '(_ any)))) (if jW39ef@ls/false (apply (lambda (jW39f1@e) (call-with-values (lambda () (jW39ea@quasi jW39f1@e '0)) (lambda (jW39f9@jW39f4 jW39fa@jW39f6 jW39fb@jW39f8) (let ((jW39ff@v jW39fb@jW39f8) (jW3a00@rhs* jW39fa@jW39f6) (jW3a01@lhs* jW39f9@jW39f4)) (jW30b4@bless (list 'syntax-case (cons 'list jW3a00@rhs*) '() (list jW3a01@lhs* (list 'syntax jW39ff@v)))))))) jW39ef@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW39ed@t))))))) (set! jW4c02@jW30ee@quasisyntax-macro jW30ee@quasisyntax-macro) (set! jW30f0@define-struct-macro (lambda (jW3aef@stx) (jW31de@syntax-violation '#f '"define-struct not supported" jW3aef@stx))) (set! jW4c03@jW30f0@define-struct-macro jW30f0@define-struct-macro) (set! jW30f2@define-record-type-macro (lambda (jW3af1@x) (letrec* ((jW3af4@id (lambda (jW3ce7@ctxt . jW3ce9@str*) (jW31e2@datum->syntax jW3ce7@ctxt (string->symbol (apply string-append (map (lambda (jW3ceb@x) (if (symbol? jW3ceb@x) (symbol->string jW3ceb@x) (if (string? jW3ceb@x) jW3ceb@x (assertion-violation 'define-record-type '"BUG")))) jW3ce9@str*)))))) (jW3af6@get-record-name (lambda (jW3cd5@spec) (let ((jW3cd7@t jW3cd5@spec)) (let ((jW3cd9@ls/false (jW30fe@syntax-dispatch jW3cd7@t '(any any any)))) (if jW3cd9@ls/false (apply (lambda (jW3cdb@foo jW3cdc@make-foo jW3cdd@foo?) jW3cdb@foo) jW3cd9@ls/false) (let ((jW3ce1@t jW3cd7@t)) (let ((jW3ce3@ls/false (jW30fe@syntax-dispatch jW3ce1@t 'any))) (if jW3ce3@ls/false (apply (lambda (jW3ce5@foo) jW3ce5@foo) jW3ce3@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3ce1@t))))))))) (jW3af8@get-record-constructor-name (lambda (jW3cc1@spec) (let ((jW3cc3@t jW3cc1@spec)) (let ((jW3cc5@ls/false (jW30fe@syntax-dispatch jW3cc3@t '(any any any)))) (if jW3cc5@ls/false (apply (lambda (jW3cc7@foo jW3cc8@make-foo jW3cc9@foo?) jW3cc8@make-foo) jW3cc5@ls/false) (let ((jW3ccd@t jW3cc3@t)) (let ((jW3ccf@ls/false (jW30fe@syntax-dispatch jW3ccd@t 'any))) (if (and jW3ccf@ls/false (apply (lambda (jW3cd1@foo) (jW2ef7@id? jW3cd1@foo)) jW3ccf@ls/false)) (apply (lambda (jW3cd3@foo) (jW3af4@id jW3cd3@foo '"make-" (jW2f0b@stx->datum jW3cd3@foo))) jW3ccf@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3ccd@t))))))))) (jW3afa@get-record-predicate-name (lambda (jW3cad@spec) (let ((jW3caf@t jW3cad@spec)) (let ((jW3cb1@ls/false (jW30fe@syntax-dispatch jW3caf@t '(any any any)))) (if jW3cb1@ls/false (apply (lambda (jW3cb3@foo jW3cb4@make-foo jW3cb5@foo?) jW3cb5@foo?) jW3cb1@ls/false) (let ((jW3cb9@t jW3caf@t)) (let ((jW3cbb@ls/false (jW30fe@syntax-dispatch jW3cb9@t 'any))) (if (and jW3cbb@ls/false (apply (lambda (jW3cbd@foo) (jW2ef7@id? jW3cbd@foo)) jW3cbb@ls/false)) (apply (lambda (jW3cbf@foo) (jW3af4@id jW3cbf@foo (jW2f0b@stx->datum jW3cbf@foo) '"?")) jW3cbb@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3cb9@t))))))))) (jW3afc@get-clause (lambda (jW3c9b@id jW3c9c@ls) (let ((jW3c9f@t jW3c9c@ls)) (let ((jW3ca1@ls/false (jW30fe@syntax-dispatch jW3c9f@t '()))) (if jW3ca1@ls/false (apply (lambda () '#f) jW3ca1@ls/false) (let ((jW3ca3@t jW3c9f@t)) (let ((jW3ca5@ls/false (jW30fe@syntax-dispatch jW3ca3@t '((any . any) . any)))) (if jW3ca5@ls/false (apply (lambda (jW3ca7@x jW3ca8@rest jW3ca9@ls) (if (jW2efd@free-id=? (jW30b4@bless jW3c9b@id) jW3ca7@x) (cons jW3ca7@x jW3ca8@rest) (jW3afc@get-clause jW3c9b@id jW3ca9@ls))) jW3ca5@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3ca3@t))))))))) (jW3afe@foo-rtd-code (lambda (jW3c49@name jW3c4a@clause* jW3c4b@parent-rtd-code) (letrec* ((jW3c50@convert-field-spec* (lambda (jW3c81@ls) (list->vector (map (lambda (jW3c83@x) (let ((jW3c85@t jW3c83@x)) (let ((jW3c87@ls/false (jW30fe@syntax-dispatch jW3c85@t '(#(scheme-id mutable) any . any)))) (if jW3c87@ls/false (apply (lambda (jW3c89@name jW3c8a@rest) (list 'mutable jW3c89@name)) jW3c87@ls/false) (let ((jW3c8d@t jW3c85@t)) (let ((jW3c8f@ls/false (jW30fe@syntax-dispatch jW3c8d@t '(#(scheme-id immutable) any . any)))) (if jW3c8f@ls/false (apply (lambda (jW3c91@name jW3c92@rest) (list 'immutable jW3c91@name)) jW3c8f@ls/false) (let ((jW3c95@t jW3c8d@t)) (let ((jW3c97@ls/false (jW30fe@syntax-dispatch jW3c95@t 'any))) (if jW3c97@ls/false (apply (lambda (jW3c99@name) (list 'immutable jW3c99@name)) jW3c97@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c95@t))))))))))) jW3c81@ls))))) (let ((jW3c51@uid-code (let ((jW3c59@t (jW3afc@get-clause 'nongenerative jW3c4a@clause*))) (let ((jW3c5b@ls/false (jW30fe@syntax-dispatch jW3c59@t '(_)))) (if jW3c5b@ls/false (apply (lambda () (list 'quote (gensym))) jW3c5b@ls/false) (let ((jW3c5d@t jW3c59@t)) (let ((jW3c5f@ls/false (jW30fe@syntax-dispatch jW3c5d@t '(_ any)))) (if jW3c5f@ls/false (apply (lambda (jW3c61@uid) (list 'quote jW3c61@uid)) jW3c5f@ls/false) (let ((jW3c63@t jW3c5d@t)) (let ((jW3c65@ls/false (jW30fe@syntax-dispatch jW3c63@t '_))) (if jW3c65@ls/false (apply (lambda () '#f) jW3c65@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c63@t))))))))))) (jW3c52@sealed? (let ((jW3c67@t (jW3afc@get-clause 'sealed jW3c4a@clause*))) (let ((jW3c69@ls/false (jW30fe@syntax-dispatch jW3c67@t '(_ #(atom #t))))) (if jW3c69@ls/false (apply (lambda () '#t) jW3c69@ls/false) (let ((jW3c6b@t jW3c67@t)) (let ((jW3c6d@ls/false (jW30fe@syntax-dispatch jW3c6b@t '_))) (if jW3c6d@ls/false (apply (lambda () '#f) jW3c6d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c6b@t)))))))) (jW3c53@opaque? (let ((jW3c6f@t (jW3afc@get-clause 'opaque jW3c4a@clause*))) (let ((jW3c71@ls/false (jW30fe@syntax-dispatch jW3c6f@t '(_ #(atom #t))))) (if jW3c71@ls/false (apply (lambda () '#t) jW3c71@ls/false) (let ((jW3c73@t jW3c6f@t)) (let ((jW3c75@ls/false (jW30fe@syntax-dispatch jW3c73@t '_))) (if jW3c75@ls/false (apply (lambda () '#f) jW3c75@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c73@t)))))))) (jW3c54@fields (let ((jW3c77@t (jW3afc@get-clause 'fields jW3c4a@clause*))) (let ((jW3c79@ls/false (jW30fe@syntax-dispatch jW3c77@t '(_ . each-any)))) (if jW3c79@ls/false (apply (lambda (jW3c7b@field-spec*) (list 'quote (jW3c50@convert-field-spec* jW3c7b@field-spec*))) jW3c79@ls/false) (let ((jW3c7d@t jW3c77@t)) (let ((jW3c7f@ls/false (jW30fe@syntax-dispatch jW3c7d@t '_))) (if jW3c7f@ls/false (apply (lambda () ''#()) jW3c7f@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c7d@t))))))))) (jW30b4@bless (list 'make-record-type-descriptor (list 'quote jW3c49@name) jW3c4b@parent-rtd-code jW3c51@uid-code jW3c52@sealed? jW3c53@opaque? jW3c54@fields)))))) (jW3b00@parent-rtd-code (lambda (jW3c31@clause*) (let ((jW3c33@t (jW3afc@get-clause 'parent jW3c31@clause*))) (let ((jW3c35@ls/false (jW30fe@syntax-dispatch jW3c33@t '(_ any)))) (if jW3c35@ls/false (apply (lambda (jW3c37@name) (list 'record-type-descriptor jW3c37@name)) jW3c35@ls/false) (let ((jW3c39@t jW3c33@t)) (let ((jW3c3b@ls/false (jW30fe@syntax-dispatch jW3c39@t '#(atom #f)))) (if jW3c3b@ls/false (apply (lambda () (let ((jW3c3d@t (jW3afc@get-clause 'parent-rtd jW3c31@clause*))) (let ((jW3c3f@ls/false (jW30fe@syntax-dispatch jW3c3d@t '(_ any any)))) (if jW3c3f@ls/false (apply (lambda (jW3c41@rtd jW3c42@rcd) jW3c41@rtd) jW3c3f@ls/false) (let ((jW3c45@t jW3c3d@t)) (let ((jW3c47@ls/false (jW30fe@syntax-dispatch jW3c45@t '#(atom #f)))) (if jW3c47@ls/false (apply (lambda () '#f) jW3c47@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c45@t)))))))) jW3c3b@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c39@t))))))))) (jW3b02@parent-rcd-code (lambda (jW3c19@clause*) (let ((jW3c1b@t (jW3afc@get-clause 'parent jW3c19@clause*))) (let ((jW3c1d@ls/false (jW30fe@syntax-dispatch jW3c1b@t '(_ any)))) (if jW3c1d@ls/false (apply (lambda (jW3c1f@name) (list 'record-constructor-descriptor jW3c1f@name)) jW3c1d@ls/false) (let ((jW3c21@t jW3c1b@t)) (let ((jW3c23@ls/false (jW30fe@syntax-dispatch jW3c21@t '#(atom #f)))) (if jW3c23@ls/false (apply (lambda () (let ((jW3c25@t (jW3afc@get-clause 'parent-rtd jW3c19@clause*))) (let ((jW3c27@ls/false (jW30fe@syntax-dispatch jW3c25@t '(_ any any)))) (if jW3c27@ls/false (apply (lambda (jW3c29@rtd jW3c2a@rcd) jW3c2a@rcd) jW3c27@ls/false) (let ((jW3c2d@t jW3c25@t)) (let ((jW3c2f@ls/false (jW30fe@syntax-dispatch jW3c2d@t '#(atom #f)))) (if jW3c2f@ls/false (apply (lambda () '#f) jW3c2f@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c2d@t)))))))) jW3c23@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c21@t))))))))) (jW3b04@foo-rcd-code (lambda (jW3c11@clause* jW3c12@foo-rtd jW3c13@protocol jW3c14@parent-rcd-code) (list 'make-record-constructor-descriptor jW3c12@foo-rtd jW3c14@parent-rcd-code jW3c13@protocol))) (jW3b06@get-protocol-code (lambda (jW3c05@clause*) (let ((jW3c07@t (jW3afc@get-clause 'protocol jW3c05@clause*))) (let ((jW3c09@ls/false (jW30fe@syntax-dispatch jW3c07@t '(_ any)))) (if jW3c09@ls/false (apply (lambda (jW3c0b@expr) jW3c0b@expr) jW3c09@ls/false) (let ((jW3c0d@t jW3c07@t)) (let ((jW3c0f@ls/false (jW30fe@syntax-dispatch jW3c0d@t '_))) (if jW3c0f@ls/false (apply (lambda () '#f) jW3c0f@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3c0d@t))))))))) (jW3b08@get-fields (lambda (jW3bf3@clause*) (let ((jW3bf5@t jW3bf3@clause*)) (let ((jW3bf7@ls/false (jW30fe@syntax-dispatch jW3bf5@t '()))) (if jW3bf7@ls/false (apply (lambda () '()) jW3bf7@ls/false) (let ((jW3bf9@t jW3bf5@t)) (let ((jW3bfb@ls/false (jW30fe@syntax-dispatch jW3bf9@t '((#(scheme-id fields) . each-any) . _)))) (if jW3bfb@ls/false (apply (lambda (jW3bfd@f*) jW3bfd@f*) jW3bfb@ls/false) (let ((jW3bff@t jW3bf9@t)) (let ((jW3c01@ls/false (jW30fe@syntax-dispatch jW3bff@t '(_ . any)))) (if jW3c01@ls/false (apply (lambda (jW3c03@rest) (jW3b08@get-fields jW3c03@rest)) jW3c01@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3bff@t)))))))))))) (jW3b0a@get-mutator-indices (lambda (jW3bdb@fields) (let jW3be1@f ((jW3bdd@fields jW3bdb@fields) (jW3bde@i '0)) (let ((jW3be3@t jW3bdd@fields)) (let ((jW3be5@ls/false (jW30fe@syntax-dispatch jW3be3@t '()))) (if jW3be5@ls/false (apply (lambda () '()) jW3be5@ls/false) (let ((jW3be7@t jW3be3@t)) (let ((jW3be9@ls/false (jW30fe@syntax-dispatch jW3be7@t '((#(scheme-id mutable) . _) . any)))) (if jW3be9@ls/false (apply (lambda (jW3beb@rest) (cons jW3bde@i (jW3be1@f jW3beb@rest (+ jW3bde@i '1)))) jW3be9@ls/false) (let ((jW3bed@t jW3be7@t)) (let ((jW3bef@ls/false (jW30fe@syntax-dispatch jW3bed@t '(_ . any)))) (if jW3bef@ls/false (apply (lambda (jW3bf1@rest) (jW3be1@f jW3bf1@rest (+ jW3bde@i '1))) jW3bef@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3bed@t))))))))))))) (jW3b0c@get-mutators (lambda (jW3bb1@foo jW3bb2@fields) (letrec* ((jW3bb6@gen-name (lambda (jW3bd9@x) (jW31e2@datum->syntax jW3bb1@foo (string->symbol (string-append (symbol->string (jW31e4@syntax->datum jW3bb1@foo)) '"-" (symbol->string (jW31e4@syntax->datum jW3bd9@x)) '"-set!")))))) (let jW3bb9@f ((jW3bb7@fields jW3bb2@fields)) (let ((jW3bbb@t jW3bb7@fields)) (let ((jW3bbd@ls/false (jW30fe@syntax-dispatch jW3bbb@t '()))) (if jW3bbd@ls/false (apply (lambda () '()) jW3bbd@ls/false) (let ((jW3bbf@t jW3bbb@t)) (let ((jW3bc1@ls/false (jW30fe@syntax-dispatch jW3bbf@t '((#(scheme-id mutable) any any any) . any)))) (if jW3bc1@ls/false (apply (lambda (jW3bc3@name jW3bc4@accessor jW3bc5@mutator jW3bc6@rest) (cons jW3bc5@mutator (jW3bb9@f jW3bc6@rest))) jW3bc1@ls/false) (let ((jW3bcb@t jW3bbf@t)) (let ((jW3bcd@ls/false (jW30fe@syntax-dispatch jW3bcb@t '((#(scheme-id mutable) any) . any)))) (if jW3bcd@ls/false (apply (lambda (jW3bcf@name jW3bd0@rest) (cons (jW3bb6@gen-name jW3bcf@name) (jW3bb9@f jW3bd0@rest))) jW3bcd@ls/false) (let ((jW3bd3@t jW3bcb@t)) (let ((jW3bd5@ls/false (jW30fe@syntax-dispatch jW3bd3@t '(_ . any)))) (if jW3bd5@ls/false (apply (lambda (jW3bd7@rest) (jW3bb9@f jW3bd7@rest)) jW3bd5@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3bd3@t))))))))))))))))) (jW3b0e@get-accessors (lambda (jW3b6d@foo jW3b6e@fields) (letrec* ((jW3b72@gen-name (lambda (jW3baf@x) (jW31e2@datum->syntax jW3b6d@foo (string->symbol (string-append (symbol->string (jW31e4@syntax->datum jW3b6d@foo)) '"-" (symbol->string (jW31e4@syntax->datum jW3baf@x)))))))) (map (lambda (jW3b73@field) (let ((jW3b75@t jW3b73@field)) (let ((jW3b77@ls/false (jW30fe@syntax-dispatch jW3b75@t '(#(scheme-id mutable) any any any)))) (if (and jW3b77@ls/false (apply (lambda (jW3b79@name jW3b7a@accessor jW3b7b@mutator) (jW2ef7@id? jW3b7a@accessor)) jW3b77@ls/false)) (apply (lambda (jW3b7f@name jW3b80@accessor jW3b81@mutator) jW3b80@accessor) jW3b77@ls/false) (let ((jW3b85@t jW3b75@t)) (let ((jW3b87@ls/false (jW30fe@syntax-dispatch jW3b85@t '(#(scheme-id immutable) any any)))) (if (and jW3b87@ls/false (apply (lambda (jW3b89@name jW3b8a@accessor) (jW2ef7@id? jW3b8a@accessor)) jW3b87@ls/false)) (apply (lambda (jW3b8d@name jW3b8e@accessor) jW3b8e@accessor) jW3b87@ls/false) (let ((jW3b91@t jW3b85@t)) (let ((jW3b93@ls/false (jW30fe@syntax-dispatch jW3b91@t '(#(scheme-id mutable) any)))) (if (and jW3b93@ls/false (apply (lambda (jW3b95@name) (jW2ef7@id? jW3b95@name)) jW3b93@ls/false)) (apply (lambda (jW3b97@name) (jW3b72@gen-name jW3b97@name)) jW3b93@ls/false) (let ((jW3b99@t jW3b91@t)) (let ((jW3b9b@ls/false (jW30fe@syntax-dispatch jW3b99@t '(#(scheme-id immutable) any)))) (if (and jW3b9b@ls/false (apply (lambda (jW3b9d@name) (jW2ef7@id? jW3b9d@name)) jW3b9b@ls/false)) (apply (lambda (jW3b9f@name) (jW3b72@gen-name jW3b9f@name)) jW3b9b@ls/false) (let ((jW3ba1@t jW3b99@t)) (let ((jW3ba3@ls/false (jW30fe@syntax-dispatch jW3ba1@t 'any))) (if (and jW3ba3@ls/false (apply (lambda (jW3ba5@name) (jW2ef7@id? jW3ba5@name)) jW3ba3@ls/false)) (apply (lambda (jW3ba7@name) (jW3b72@gen-name jW3ba7@name)) jW3ba3@ls/false) (let ((jW3ba9@t jW3ba1@t)) (let ((jW3bab@ls/false (jW30fe@syntax-dispatch jW3ba9@t 'any))) (if jW3bab@ls/false (apply (lambda (jW3bad@others) (jW31de@syntax-violation '#f '"invalid field spec" jW3b73@field)) jW3bab@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3ba9@t)))))))))))))))))))) jW3b6e@fields)))) (jW3b10@enumerate (lambda (jW3b65@ls) (let jW3b6b@f ((jW3b67@ls jW3b65@ls) (jW3b68@i '0)) (if (null? jW3b67@ls) '() (cons jW3b68@i (jW3b6b@f (cdr jW3b67@ls) (+ jW3b68@i '1))))))) (jW3b12@do-define-record (lambda (jW3b3d@namespec jW3b3e@clause*) (let ((jW3b41@foo (jW3af6@get-record-name jW3b3d@namespec))) (let ((jW3b43@foo-rtd (gensym))) (let ((jW3b45@foo-rcd (gensym))) (let ((jW3b47@protocol (gensym))) (let ((jW3b49@make-foo (jW3af8@get-record-constructor-name jW3b3d@namespec))) (let ((jW3b4b@fields (jW3b08@get-fields jW3b3e@clause*))) (let ((jW3b4d@idx* (jW3b10@enumerate jW3b4b@fields))) (let ((jW3b4f@foo-x* (jW3b0e@get-accessors jW3b41@foo jW3b4b@fields))) (let ((jW3b51@set-foo-x!* (jW3b0c@get-mutators jW3b41@foo jW3b4b@fields))) (let ((jW3b53@set-foo-idx* (jW3b0a@get-mutator-indices jW3b4b@fields))) (let ((jW3b55@foo? (jW3afa@get-record-predicate-name jW3b3d@namespec))) (let ((jW3b57@foo-rtd-code (jW3afe@foo-rtd-code jW3b41@foo jW3b3e@clause* (jW3b00@parent-rtd-code jW3b3e@clause*)))) (let ((jW3b59@foo-rcd-code (jW3b04@foo-rcd-code jW3b3e@clause* jW3b43@foo-rtd jW3b47@protocol (jW3b02@parent-rcd-code jW3b3e@clause*)))) (let ((jW3b5b@protocol-code (jW3b06@get-protocol-code jW3b3e@clause*))) (jW30b4@bless (cons 'begin (cons (list 'define jW3b43@foo-rtd jW3b57@foo-rtd-code) (cons (list 'define jW3b47@protocol jW3b5b@protocol-code) (cons (list 'define jW3b45@foo-rcd jW3b59@foo-rcd-code) (cons (list 'define-syntax jW3b41@foo (list 'list ''$rtd (list 'syntax jW3b43@foo-rtd) (list 'syntax jW3b45@foo-rcd))) (cons (list 'define jW3b55@foo? (list 'record-predicate jW3b43@foo-rtd)) (cons (list 'define jW3b49@make-foo (list 'record-constructor jW3b45@foo-rcd)) (append (map (lambda (jW3b5d@foo-x jW3b5e@idx) (list 'define jW3b5d@foo-x (list 'record-accessor jW3b43@foo-rtd jW3b5e@idx))) jW3b4f@foo-x* jW3b4d@idx*) (map (lambda (jW3b61@set-foo-x! jW3b62@idx) (list 'define jW3b61@set-foo-x! (list 'record-mutator jW3b43@foo-rtd jW3b62@idx))) jW3b51@set-foo-x!* jW3b53@set-foo-idx*)))))))))))))))))))))))))) (jW3b14@verify-clauses (lambda (jW3b1d@x jW3b1e@cls*) (letrec* ((jW3b22@valid-kwds (map jW30b4@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (jW3b24@free-id-member? (lambda (jW3b39@x jW3b3a@ls) (and (pair? jW3b3a@ls) (or (jW2efd@free-id=? jW3b39@x (car jW3b3a@ls)) (jW3b24@free-id-member? jW3b39@x (cdr jW3b3a@ls))))))) (let jW3b29@f ((jW3b25@cls* jW3b1e@cls*) (jW3b26@seen* '())) (if (not (null? jW3b25@cls*)) (let ((jW3b2b@t (car jW3b25@cls*))) (let ((jW3b2d@ls/false (jW30fe@syntax-dispatch jW3b2b@t '(any . any)))) (if jW3b2d@ls/false (apply (lambda (jW3b2f@kwd jW3b30@rest) (if (or (not (jW2ef7@id? jW3b2f@kwd)) (not (jW3b24@free-id-member? jW3b2f@kwd jW3b22@valid-kwds))) (jW31de@syntax-violation '#f '"not a valid define-record-type keyword" jW3b2f@kwd) (if (jW2f03@bound-id-member? jW3b2f@kwd jW3b26@seen*) (jW31de@syntax-violation '#f '"duplicate use of keyword " jW3b1d@x jW3b2f@kwd) (jW3b29@f (cdr jW3b25@cls*) (cons jW3b2f@kwd jW3b26@seen*))))) jW3b2d@ls/false) (let ((jW3b33@t jW3b2b@t)) (let ((jW3b35@ls/false (jW30fe@syntax-dispatch jW3b33@t 'any))) (if jW3b35@ls/false (apply (lambda (jW3b37@cls) (jW31de@syntax-violation '#f '"malformed define-record-type clause" jW3b37@cls)) jW3b35@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3b33@t))))))) (void))))))) (let ((jW3b15@t jW3af1@x)) (let ((jW3b17@ls/false (jW30fe@syntax-dispatch jW3b15@t '(_ any . each-any)))) (if jW3b17@ls/false (apply (lambda (jW3b19@namespec jW3b1a@clause*) (begin (jW3b14@verify-clauses jW3af1@x jW3b1a@clause*) (jW3b12@do-define-record jW3b19@namespec jW3b1a@clause*))) jW3b17@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3b15@t))))))) (set! jW4c04@jW30f2@define-record-type-macro jW30f2@define-record-type-macro) (set! jW30f4@define-condition-type-macro (lambda (jW3ced@x) (letrec* ((jW3cf0@mkname (lambda (jW3d1d@name jW3d1e@suffix) (jW31e2@datum->syntax jW3d1d@name (string->symbol (string-append (symbol->string (jW31e4@syntax->datum jW3d1d@name)) jW3d1e@suffix)))))) (let ((jW3cf1@t jW3ced@x)) (let ((jW3cf3@ls/false (jW30fe@syntax-dispatch jW3cf1@t '(any any any any any . #(each (any any)))))) (if (and jW3cf3@ls/false (apply (lambda (jW3cf5@ctxt jW3cf6@name jW3cf7@super jW3cf8@constructor jW3cf9@predicate jW3cfa@field* jW3cfb@accessor*) (and (jW2ef7@id? jW3cf6@name) (jW2ef7@id? jW3cf7@super) (jW2ef7@id? jW3cf8@constructor) (jW2ef7@id? jW3cf9@predicate) (for-all jW2ef7@id? jW3cfa@field*) (for-all jW2ef7@id? jW3cfb@accessor*))) jW3cf3@ls/false)) (apply (lambda (jW3d03@ctxt jW3d04@name jW3d05@super jW3d06@constructor jW3d07@predicate jW3d08@field* jW3d09@accessor*) (let ((jW3d11@aux-accessor* (map (lambda (jW3d13@x) (gensym)) jW3d09@accessor*))) (jW30b4@bless (cons 'begin (cons (cons 'define-record-type (cons (list jW3d04@name jW3d06@constructor (gensym)) (cons (list 'parent jW3d05@super) (cons (cons 'fields (map (lambda (jW3d15@field jW3d16@aux) (list 'immutable jW3d15@field jW3d16@aux)) jW3d08@field* jW3d11@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define jW3d07@predicate (list 'condition-predicate (list 'record-type-descriptor jW3d04@name))) (map (lambda (jW3d19@accessor jW3d1a@aux) (list 'define jW3d19@accessor (list 'condition-accessor (list 'record-type-descriptor jW3d04@name) jW3d1a@aux))) jW3d09@accessor* jW3d11@aux-accessor*))))))) jW3cf3@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3cf1@t))))))) (set! jW4c05@jW30f4@define-condition-type-macro jW30f4@define-condition-type-macro) (set! jW30f6@incorrect-usage-macro (lambda (jW3d21@e) (jW31de@syntax-violation '#f '"incorrect usage of auxiliary keyword" jW3d21@e))) (set! jW4c06@jW30f6@incorrect-usage-macro jW30f6@incorrect-usage-macro) (set! jW30f8@parameterize-macro (lambda (jW3d23@e) (let ((jW3d25@t jW3d23@e)) (let ((jW3d27@ls/false (jW30fe@syntax-dispatch jW3d25@t '(_ () any . each-any)))) (if jW3d27@ls/false (apply (lambda (jW3d29@b jW3d2a@b*) (jW30b4@bless (cons 'let (cons '() (cons jW3d29@b jW3d2a@b*))))) jW3d27@ls/false) (let ((jW3d2d@t jW3d25@t)) (let ((jW3d2f@ls/false (jW30fe@syntax-dispatch jW3d2d@t '(_ #(each (any any)) any . each-any)))) (if jW3d2f@ls/false (apply (lambda (jW3d31@olhs* jW3d32@orhs* jW3d33@b jW3d34@b*) (let ((jW3d39@lhs* (jW31cc@generate-temporaries jW3d31@olhs*)) (jW3d3a@rhs* (jW31cc@generate-temporaries jW3d32@orhs*))) (jW30b4@bless (cons (list 'lambda (append jW3d39@lhs* jW3d3a@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (jW3d3d@lhs jW3d3e@rhs) (list 'let (list (list 't (list jW3d3d@lhs))) (list jW3d3d@lhs jW3d3e@rhs) (cons 'set! (cons jW3d3e@rhs '(t))))) jW3d39@lhs* jW3d3a@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons jW3d33@b jW3d34@b*))) '(swap)))))) (append jW3d31@olhs* jW3d32@orhs*))))) jW3d2f@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3d2d@t))))))))) (set! jW4c07@jW30f8@parameterize-macro jW30f8@parameterize-macro) (set! jW30fa@foreign-call-transformer (lambda (jW3d41@e jW3d42@r jW3d43@mr) (let ((jW3d47@t jW3d41@e)) (let ((jW3d49@ls/false (jW30fe@syntax-dispatch jW3d47@t '(_ any . each-any)))) (if jW3d49@ls/false (apply (lambda (jW3d4b@name jW3d4c@arg*) (cons 'foreign-call (cons (jW3120@chi-expr jW3d4b@name jW3d42@r jW3d43@mr) (jW311c@chi-expr* jW3d4c@arg* jW3d42@r jW3d43@mr)))) jW3d49@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3d47@t)))))) (set! jW4c08@jW30fa@foreign-call-transformer jW30fa@foreign-call-transformer) (set! jW30fc@convert-pattern (lambda (jW3d4f@pattern jW3d50@keys) (letrec* ((jW3d54@cvt* (lambda (jW3df3@p* jW3df4@n jW3df5@ids) (if (null? jW3df3@p*) (values '() jW3df5@ids) (call-with-values (lambda () (jW3d54@cvt* (cdr jW3df3@p*) jW3df4@n jW3df5@ids)) (lambda (jW3dfd@jW3dfa jW3dfe@jW3dfc) (let ((jW3e01@ids jW3dfe@jW3dfc) (jW3e02@y jW3dfd@jW3dfa)) (call-with-values (lambda () (jW3d56@cvt (car jW3df3@p*) jW3df4@n jW3e01@ids)) (lambda (jW3e09@jW3e06 jW3e0a@jW3e08) (let ((jW3e0d@ids jW3e0a@jW3e08) (jW3e0e@x jW3e09@jW3e06)) (values (cons jW3e0e@x jW3e02@y) jW3e0d@ids)))))))))) (jW3d56@cvt (lambda (jW3d57@p jW3d58@n jW3d59@ids) (let ((jW3d5d@t jW3d57@p)) (let ((jW3d5f@ls/false (jW30fe@syntax-dispatch jW3d5d@t 'any))) (if (and jW3d5f@ls/false (apply (lambda (jW3d61@id) (jW2ef7@id? jW3d61@id)) jW3d5f@ls/false)) (apply (lambda (jW3d63@id) (if (jW2f03@bound-id-member? jW3d57@p jW3d50@keys) (values (vector 'free-id jW3d57@p) jW3d59@ids) (if (jW2efd@free-id=? jW3d57@p (jW3086@scheme-stx '_)) (values '_ jW3d59@ids) (values 'any (cons (cons jW3d57@p jW3d58@n) jW3d59@ids))))) jW3d5f@ls/false) (let ((jW3d65@t jW3d5d@t)) (let ((jW3d67@ls/false (jW30fe@syntax-dispatch jW3d65@t '(any any)))) (if (and jW3d67@ls/false (apply (lambda (jW3d69@p jW3d6a@dots) (jW3100@ellipsis? jW3d6a@dots)) jW3d67@ls/false)) (apply (lambda (jW3d6d@p jW3d6e@dots) (call-with-values (lambda () (jW3d56@cvt jW3d6d@p (+ jW3d58@n '1) jW3d59@ids)) (lambda (jW3d75@jW3d72 jW3d76@jW3d74) (let ((jW3d79@ids jW3d76@jW3d74) (jW3d7a@p jW3d75@jW3d72)) (values (if (eq? jW3d7a@p 'any) 'each-any (vector 'each jW3d7a@p)) jW3d79@ids))))) jW3d67@ls/false) (let ((jW3d7d@t jW3d65@t)) (let ((jW3d7f@ls/false (jW30fe@syntax-dispatch jW3d7d@t '(any any . #(each+ any () any))))) (if (and jW3d7f@ls/false (apply (lambda (jW3d81@x jW3d82@dots jW3d83@ys jW3d84@z) (jW3100@ellipsis? jW3d82@dots)) jW3d7f@ls/false)) (apply (lambda (jW3d89@x jW3d8a@dots jW3d8b@ys jW3d8c@z) (call-with-values (lambda () (jW3d56@cvt jW3d8c@z jW3d58@n jW3d59@ids)) (lambda (jW3d95@jW3d92 jW3d96@jW3d94) (let ((jW3d99@ids jW3d96@jW3d94) (jW3d9a@z jW3d95@jW3d92)) (call-with-values (lambda () (jW3d54@cvt* jW3d8b@ys jW3d58@n jW3d99@ids)) (lambda (jW3da1@jW3d9e jW3da2@jW3da0) (let ((jW3da5@ids jW3da2@jW3da0) (jW3da6@ys jW3da1@jW3d9e)) (call-with-values (lambda () (jW3d56@cvt jW3d89@x (+ jW3d58@n '1) jW3da5@ids)) (lambda (jW3dad@jW3daa jW3dae@jW3dac) (let ((jW3db1@ids jW3dae@jW3dac) (jW3db2@x jW3dad@jW3daa)) (values (vector 'each+ jW3db2@x (reverse jW3da6@ys) jW3d9a@z) jW3db1@ids))))))))))) jW3d7f@ls/false) (let ((jW3db5@t jW3d7d@t)) (let ((jW3db7@ls/false (jW30fe@syntax-dispatch jW3db5@t '(any . any)))) (if jW3db7@ls/false (apply (lambda (jW3db9@x jW3dba@y) (call-with-values (lambda () (jW3d56@cvt jW3dba@y jW3d58@n jW3d59@ids)) (lambda (jW3dc1@jW3dbe jW3dc2@jW3dc0) (let ((jW3dc5@ids jW3dc2@jW3dc0) (jW3dc6@y jW3dc1@jW3dbe)) (call-with-values (lambda () (jW3d56@cvt jW3db9@x jW3d58@n jW3dc5@ids)) (lambda (jW3dcd@jW3dca jW3dce@jW3dcc) (let ((jW3dd1@ids jW3dce@jW3dcc) (jW3dd2@x jW3dcd@jW3dca)) (values (cons jW3dd2@x jW3dc6@y) jW3dd1@ids)))))))) jW3db7@ls/false) (let ((jW3dd5@t jW3db5@t)) (let ((jW3dd7@ls/false (jW30fe@syntax-dispatch jW3dd5@t '()))) (if jW3dd7@ls/false (apply (lambda () (values '() jW3d59@ids)) jW3dd7@ls/false) (let ((jW3dd9@t jW3dd5@t)) (let ((jW3ddb@ls/false (jW30fe@syntax-dispatch jW3dd9@t '#(vector each-any)))) (if (and jW3ddb@ls/false (apply (lambda (jW3ddd@p) (not (jW2ec3@stx? jW3ddd@p))) jW3ddb@ls/false)) (apply (lambda (jW3ddf@p) (call-with-values (lambda () (jW3d56@cvt jW3ddf@p jW3d58@n jW3d59@ids)) (lambda (jW3de5@jW3de2 jW3de6@jW3de4) (let ((jW3de9@ids jW3de6@jW3de4) (jW3dea@p jW3de5@jW3de2)) (values (vector 'vector jW3dea@p) jW3de9@ids))))) jW3ddb@ls/false) (let ((jW3ded@t jW3dd9@t)) (let ((jW3def@ls/false (jW30fe@syntax-dispatch jW3ded@t 'any))) (if jW3def@ls/false (apply (lambda (jW3df1@datum) (values (vector 'atom (jW2f0b@stx->datum jW3df1@datum)) jW3d59@ids)) jW3def@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3ded@t))))))))))))))))))))))))) (jW3d56@cvt jW3d4f@pattern '0 '())))) (set! jW4c09@jW30fc@convert-pattern jW30fc@convert-pattern) (set! jW30fe@syntax-dispatch (letrec* ((jW3e12@stx^ (lambda (jW3eed@e jW3eee@m* jW3eef@s* jW3ef0@ae*) (if (and (null? jW3eee@m*) (null? jW3eef@s*) (null? jW3ef0@ae*)) jW3eed@e (jW2edf@mkstx jW3eed@e jW3eee@m* jW3eef@s* jW3ef0@ae*)))) (jW3e14@match-each (lambda (jW3ecd@e jW3ece@p jW3ecf@m* jW3ed0@s* jW3ed1@ae*) (if (pair? jW3ecd@e) (let ((jW3ed7@first (jW3e20@match (car jW3ecd@e) jW3ece@p jW3ecf@m* jW3ed0@s* jW3ed1@ae* '()))) (and jW3ed7@first (let ((jW3ed9@rest (jW3e14@match-each (cdr jW3ecd@e) jW3ece@p jW3ecf@m* jW3ed0@s* jW3ed1@ae*))) (and jW3ed9@rest (cons jW3ed7@first jW3ed9@rest))))) (if (null? jW3ecd@e) '() (if (jW2ec3@stx? jW3ecd@e) (and (not (jW2e7d@top-marked? jW3ecf@m*)) (call-with-values (lambda () (join-wraps jW3ecf@m* jW3ed0@s* jW3ed1@ae* jW3ecd@e)) (lambda (jW3ee1@jW3edc jW3ee2@jW3ede jW3ee3@jW3ee0) (let ((jW3ee7@ae* jW3ee3@jW3ee0) (jW3ee8@s* jW3ee2@jW3ede) (jW3ee9@m* jW3ee1@jW3edc)) (jW3e14@match-each (jW2ec5@stx-expr jW3ecd@e) jW3ece@p jW3ee9@m* jW3ee8@s* jW3ee7@ae*))))) (if (jW2a3b@jW290d@annotation? jW3ecd@e) (jW3e14@match-each (jW2a3d@jW2911@annotation-expression jW3ecd@e) jW3ece@p jW3ecf@m* jW3ed0@s* jW3ed1@ae*) '#f)))))) (jW3e16@match-each+ (lambda (jW3e8d@e jW3e8e@x-pat jW3e8f@y-pat jW3e90@z-pat jW3e91@m* jW3e92@s* jW3e93@ae* jW3e94@r) (let jW3ea5@f ((jW3e9d@e jW3e8d@e) (jW3e9e@m* jW3e91@m*) (jW3e9f@s* jW3e92@s*) (jW3ea0@ae* jW3e93@ae*)) (if (pair? jW3e9d@e) (call-with-values (lambda () (jW3ea5@f (cdr jW3e9d@e) jW3e9e@m* jW3e9f@s* jW3ea0@ae*)) (lambda (jW3ead@jW3ea8 jW3eae@jW3eaa jW3eaf@jW3eac) (let ((jW3eb3@r jW3eaf@jW3eac) (jW3eb4@y-pat jW3eae@jW3eaa) (jW3eb5@xr* jW3ead@jW3ea8)) (if jW3eb3@r (if (null? jW3eb4@y-pat) (let ((jW3eb9@xr (jW3e20@match (car jW3e9d@e) jW3e8e@x-pat jW3e9e@m* jW3e9f@s* jW3ea0@ae* '()))) (if jW3eb9@xr (values (cons jW3eb9@xr jW3eb5@xr*) jW3eb4@y-pat jW3eb3@r) (values '#f '#f '#f))) (values '() (cdr jW3eb4@y-pat) (jW3e20@match (car jW3e9d@e) (car jW3eb4@y-pat) jW3e9e@m* jW3e9f@s* jW3ea0@ae* jW3eb3@r))) (values '#f '#f '#f))))) (if (jW2ec3@stx? jW3e9d@e) (if (jW2e7d@top-marked? jW3e9e@m*) (values '() jW3e8f@y-pat (jW3e20@match jW3e9d@e jW3e90@z-pat jW3e9e@m* jW3e9f@s* jW3ea0@ae* jW3e94@r)) (call-with-values (lambda () (join-wraps jW3e9e@m* jW3e9f@s* jW3ea0@ae* jW3e9d@e)) (lambda (jW3ec1@jW3ebc jW3ec2@jW3ebe jW3ec3@jW3ec0) (let ((jW3ec7@ae* jW3ec3@jW3ec0) (jW3ec8@s* jW3ec2@jW3ebe) (jW3ec9@m* jW3ec1@jW3ebc)) (jW3ea5@f (jW2ec5@stx-expr jW3e9d@e) jW3ec9@m* jW3ec8@s* jW3ec7@ae*))))) (if (jW2a3b@jW290d@annotation? jW3e9d@e) (jW3ea5@f (jW2a3d@jW2911@annotation-expression jW3e9d@e) jW3e9e@m* jW3e9f@s* jW3ea0@ae*) (values '() jW3e8f@y-pat (jW3e20@match jW3e9d@e jW3e90@z-pat jW3e9e@m* jW3e9f@s* jW3ea0@ae* jW3e94@r)))))))) (jW3e18@match-each-any (lambda (jW3e71@e jW3e72@m* jW3e73@s* jW3e74@ae*) (if (pair? jW3e71@e) (let ((jW3e79@l (jW3e18@match-each-any (cdr jW3e71@e) jW3e72@m* jW3e73@s* jW3e74@ae*))) (and jW3e79@l (cons (jW3e12@stx^ (car jW3e71@e) jW3e72@m* jW3e73@s* jW3e74@ae*) jW3e79@l))) (if (null? jW3e71@e) '() (if (jW2ec3@stx? jW3e71@e) (and (not (jW2e7d@top-marked? jW3e72@m*)) (call-with-values (lambda () (join-wraps jW3e72@m* jW3e73@s* jW3e74@ae* jW3e71@e)) (lambda (jW3e81@jW3e7c jW3e82@jW3e7e jW3e83@jW3e80) (let ((jW3e87@ae* jW3e83@jW3e80) (jW3e88@s* jW3e82@jW3e7e) (jW3e89@m* jW3e81@jW3e7c)) (jW3e18@match-each-any (jW2ec5@stx-expr jW3e71@e) jW3e89@m* jW3e88@s* jW3e87@ae*))))) (if (jW2a3b@jW290d@annotation? jW3e71@e) (jW3e18@match-each-any (jW2a3d@jW2911@annotation-expression jW3e71@e) jW3e72@m* jW3e73@s* jW3e74@ae*) '#f)))))) (jW3e1a@match-empty (lambda (jW3e6b@p jW3e6c@r) (if (null? jW3e6b@p) jW3e6c@r (if (eq? jW3e6b@p '_) jW3e6c@r (if (eq? jW3e6b@p 'any) (cons '() jW3e6c@r) (if (pair? jW3e6b@p) (jW3e1a@match-empty (car jW3e6b@p) (jW3e1a@match-empty (cdr jW3e6b@p) jW3e6c@r)) (if (eq? jW3e6b@p 'each-any) (cons '() jW3e6c@r) (let ((jW3e6f@t (vector-ref jW3e6b@p '0))) (if (memv jW3e6f@t '(each)) (jW3e1a@match-empty (vector-ref jW3e6b@p '1) jW3e6c@r) (if (memv jW3e6f@t '(each+)) (jW3e1a@match-empty (vector-ref jW3e6b@p '1) (jW3e1a@match-empty (reverse (vector-ref jW3e6b@p '2)) (jW3e1a@match-empty (vector-ref jW3e6b@p '3) jW3e6c@r))) (if (memv jW3e6f@t '(free-id atom)) jW3e6c@r (if (memv jW3e6f@t '(scheme-id atom)) jW3e6c@r (if (memv jW3e6f@t '(vector)) (jW3e1a@match-empty (vector-ref jW3e6b@p '1) jW3e6c@r) (assertion-violation 'syntax-dispatch '"invalid pattern" jW3e6b@p)))))))))))))) (jW3e1c@combine (lambda (jW3e67@r* jW3e68@r) (if (null? (car jW3e67@r*)) jW3e68@r (cons (map car jW3e67@r*) (jW3e1c@combine (map cdr jW3e67@r*) jW3e68@r))))) (jW3e1e@match* (lambda (jW3e43@e jW3e44@p jW3e45@m* jW3e46@s* jW3e47@ae* jW3e48@r) (if (null? jW3e44@p) (and (null? jW3e43@e) jW3e48@r) (if (pair? jW3e44@p) (and (pair? jW3e43@e) (jW3e20@match (car jW3e43@e) (car jW3e44@p) jW3e45@m* jW3e46@s* jW3e47@ae* (jW3e20@match (cdr jW3e43@e) (cdr jW3e44@p) jW3e45@m* jW3e46@s* jW3e47@ae* jW3e48@r))) (if (eq? jW3e44@p 'each-any) (let ((jW3e4f@l (jW3e18@match-each-any jW3e43@e jW3e45@m* jW3e46@s* jW3e47@ae*))) (and jW3e4f@l (cons jW3e4f@l jW3e48@r))) (let ((jW3e51@t (vector-ref jW3e44@p '0))) (if (memv jW3e51@t '(each)) (if (null? jW3e43@e) (jW3e1a@match-empty (vector-ref jW3e44@p '1) jW3e48@r) (let ((jW3e53@r* (jW3e14@match-each jW3e43@e (vector-ref jW3e44@p '1) jW3e45@m* jW3e46@s* jW3e47@ae*))) (and jW3e53@r* (jW3e1c@combine jW3e53@r* jW3e48@r)))) (if (memv jW3e51@t '(free-id)) (and (symbol? jW3e43@e) (jW2e7d@top-marked? jW3e45@m*) (jW2efd@free-id=? (jW3e12@stx^ jW3e43@e jW3e45@m* jW3e46@s* jW3e47@ae*) (vector-ref jW3e44@p '1)) jW3e48@r) (if (memv jW3e51@t '(scheme-id)) (and (symbol? jW3e43@e) (jW2e7d@top-marked? jW3e45@m*) (jW2efd@free-id=? (jW3e12@stx^ jW3e43@e jW3e45@m* jW3e46@s* jW3e47@ae*) (jW3086@scheme-stx (vector-ref jW3e44@p '1))) jW3e48@r) (if (memv jW3e51@t '(each+)) (call-with-values (lambda () (jW3e16@match-each+ jW3e43@e (vector-ref jW3e44@p '1) (vector-ref jW3e44@p '2) (vector-ref jW3e44@p '3) jW3e45@m* jW3e46@s* jW3e47@ae* jW3e48@r)) (lambda (jW3e5b@jW3e56 jW3e5c@jW3e58 jW3e5d@jW3e5a) (let ((jW3e61@r jW3e5d@jW3e5a) (jW3e62@y-pat jW3e5c@jW3e58) (jW3e63@xr* jW3e5b@jW3e56)) (and jW3e61@r (null? jW3e62@y-pat) (if (null? jW3e63@xr*) (jW3e1a@match-empty (vector-ref jW3e44@p '1) jW3e61@r) (jW3e1c@combine jW3e63@xr* jW3e61@r)))))) (if (memv jW3e51@t '(atom)) (and (fast-equal? (vector-ref jW3e44@p '1) (jW2f09@strip jW3e43@e jW3e45@m*)) jW3e48@r) (if (memv jW3e51@t '(vector)) (and (vector? jW3e43@e) (jW3e20@match (vector->list jW3e43@e) (vector-ref jW3e44@p '1) jW3e45@m* jW3e46@s* jW3e47@ae* jW3e48@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" jW3e44@p))))))))))))) (jW3e20@match (lambda (jW3e25@e jW3e26@p jW3e27@m* jW3e28@s* jW3e29@ae* jW3e2a@r) (if (not jW3e2a@r) '#f (if (eq? jW3e26@p '_) jW3e2a@r (if (eq? jW3e26@p 'any) (cons (jW3e12@stx^ jW3e25@e jW3e27@m* jW3e28@s* jW3e29@ae*) jW3e2a@r) (if (jW2ec3@stx? jW3e25@e) (and (not (jW2e7d@top-marked? jW3e27@m*)) (call-with-values (lambda () (join-wraps jW3e27@m* jW3e28@s* jW3e29@ae* jW3e25@e)) (lambda (jW3e37@jW3e32 jW3e38@jW3e34 jW3e39@jW3e36) (let ((jW3e3d@ae* jW3e39@jW3e36) (jW3e3e@s* jW3e38@jW3e34) (jW3e3f@m* jW3e37@jW3e32)) (jW3e20@match (jW2ec5@stx-expr jW3e25@e) jW3e26@p jW3e3f@m* jW3e3e@s* jW3e3d@ae* jW3e2a@r))))) (if (jW2a3b@jW290d@annotation? jW3e25@e) (jW3e20@match (jW2a3d@jW2911@annotation-expression jW3e25@e) jW3e26@p jW3e27@m* jW3e28@s* jW3e29@ae* jW3e2a@r) (jW3e1e@match* jW3e25@e jW3e26@p jW3e27@m* jW3e28@s* jW3e29@ae* jW3e2a@r))))))))) (lambda (jW3e21@e jW3e22@p) (jW3e20@match jW3e21@e jW3e22@p '() '() '() '())))) (set! jW4c0a@jW30fe@syntax-dispatch jW30fe@syntax-dispatch) (set! jW3100@ellipsis? (lambda (jW3ef5@x) (and (jW2ef7@id? jW3ef5@x) (jW2efd@free-id=? jW3ef5@x (jW3086@scheme-stx '...))))) (set! jW4c0b@jW3100@ellipsis? jW3100@ellipsis?) (set! jW3102@underscore? (lambda (jW3ef7@x) (and (jW2ef7@id? jW3ef7@x) (jW2efd@free-id=? jW3ef7@x (jW3086@scheme-stx '_))))) (set! jW4c0c@jW3102@underscore? jW3102@underscore?) (set! jW3104@verify-literals (lambda (jW3ef9@lits jW3efa@expr) (for-each (lambda (jW3efd@x) (if (or (not (jW2ef7@id? jW3efd@x)) (jW3100@ellipsis? jW3efd@x) (jW3102@underscore? jW3efd@x)) (jW31de@syntax-violation '#f '"invalid literal" jW3efa@expr jW3efd@x) (void))) jW3ef9@lits))) (set! jW4c0d@jW3104@verify-literals jW3104@verify-literals) (set! jW3106@syntax-case-transformer (letrec* ((jW3f00@build-dispatch-call (lambda (jW3f71@pvars jW3f72@expr jW3f73@y jW3f74@r jW3f75@mr) (let ((jW3f7b@ids (map car jW3f71@pvars)) (jW3f7c@levels (map cdr jW3f71@pvars))) (let ((jW3f7f@labels (map jW2e83@gen-label jW3f7b@ids)) (jW3f80@new-vars (map jW2e7f@gen-lexical jW3f7b@ids))) (let ((jW3f83@body (jW3120@chi-expr (jW2ee1@add-subst (jW2eb7@make-full-rib jW3f7b@ids jW3f7f@labels) jW3f72@expr) (append (map (lambda (jW3f85@label jW3f86@var jW3f87@level) (cons jW3f85@label (jW2f11@make-binding 'syntax (cons jW3f86@var jW3f87@level)))) jW3f7f@labels jW3f80@new-vars (map cdr jW3f71@pvars)) jW3f74@r) jW3f75@mr))) (list '(primitive apply) (jW2e5a@jW2d8c@build-lambda '#f jW3f80@new-vars jW3f83@body) jW3f73@y)))))) (jW3f02@invalid-ids-error (lambda (jW3f65@id* jW3f66@e jW3f67@class) (let jW3f6f@find ((jW3f6b@id* jW3f65@id*) (jW3f6c@ok* '())) (if (null? jW3f6b@id*) (jW31de@syntax-violation '#f '"invalid syntax" jW3f66@e) (if (jW2ef7@id? (car jW3f6b@id*)) (if (jW2f03@bound-id-member? (car jW3f6b@id*) jW3f6c@ok*) (jW31da@syntax-error (car jW3f6b@id*) '"duplicate " jW3f67@class) (jW3f6f@find (cdr jW3f6b@id*) (cons (car jW3f6b@id*) jW3f6c@ok*))) (jW31da@syntax-error (car jW3f6b@id*) '"invalid " jW3f67@class)))))) (jW3f04@gen-clause (lambda (jW3f3d@x jW3f3e@keys jW3f3f@clauses jW3f40@r jW3f41@mr jW3f42@pat jW3f43@fender jW3f44@expr) (call-with-values (lambda () (jW30fc@convert-pattern jW3f42@pat jW3f3e@keys)) (lambda (jW3f51@jW3f4e jW3f52@jW3f50) (let ((jW3f55@pvars jW3f52@jW3f50) (jW3f56@p jW3f51@jW3f4e)) (if (not (jW2f01@distinct-bound-ids? (map car jW3f55@pvars))) (jW3f02@invalid-ids-error (map car jW3f55@pvars) jW3f42@pat '"pattern variable") (if (not (for-all (lambda (jW3f59@x) (not (jW3100@ellipsis? (car jW3f59@x)))) jW3f55@pvars)) (jW31de@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" jW3f42@pat) (let ((jW3f5b@y (jW2e7f@gen-lexical 'tmp))) (let ((jW3f5d@test (if (eq? jW3f43@fender '#t) jW3f5b@y (let ((jW3f5f@call (jW3f00@build-dispatch-call jW3f55@pvars jW3f43@fender jW3f5b@y jW3f40@r jW3f41@mr))) (list 'if jW3f5b@y jW3f5f@call (list 'quote '#f)))))) (let ((jW3f61@conseq (jW3f00@build-dispatch-call jW3f55@pvars jW3f44@expr jW3f5b@y jW3f40@r jW3f41@mr))) (let ((jW3f63@altern (jW3f06@gen-syntax-case jW3f3d@x jW3f3e@keys jW3f3f@clauses jW3f40@r jW3f41@mr))) (list (jW2e5a@jW2d8c@build-lambda '#f (list jW3f5b@y) (list 'if jW3f5d@test jW3f61@conseq jW3f63@altern)) (list '(primitive syntax-dispatch) jW3f3d@x (list 'quote jW3f56@p)))))))))))))) (jW3f06@gen-syntax-case (lambda (jW3f1b@x jW3f1c@keys jW3f1d@clauses jW3f1e@r jW3f1f@mr) (if (null? jW3f1d@clauses) (list '(primitive syntax-error) jW3f1b@x) (let ((jW3f25@t (car jW3f1d@clauses))) (let ((jW3f27@ls/false (jW30fe@syntax-dispatch jW3f25@t '(any any)))) (if jW3f27@ls/false (apply (lambda (jW3f29@pat jW3f2a@expr) (if (and (jW2ef7@id? jW3f29@pat) (not (jW2f03@bound-id-member? jW3f29@pat jW3f1c@keys)) (not (jW3100@ellipsis? jW3f29@pat))) (if (jW2efd@free-id=? jW3f29@pat (jW3086@scheme-stx '_)) (jW3120@chi-expr jW3f2a@expr jW3f1e@r jW3f1f@mr) (let ((jW3f2d@lab (jW2e83@gen-label jW3f29@pat)) (jW3f2e@lex (jW2e7f@gen-lexical jW3f29@pat))) (let ((jW3f31@body (jW3120@chi-expr (jW2ee1@add-subst (jW2eb7@make-full-rib (list jW3f29@pat) (list jW3f2d@lab)) jW3f2a@expr) (cons (cons jW3f2d@lab (jW2f11@make-binding 'syntax (cons jW3f2e@lex '0))) jW3f1e@r) jW3f1f@mr))) (list (jW2e5a@jW2d8c@build-lambda '#f (list jW3f2e@lex) jW3f31@body) jW3f1b@x)))) (jW3f04@gen-clause jW3f1b@x jW3f1c@keys (cdr jW3f1d@clauses) jW3f1e@r jW3f1f@mr jW3f29@pat '#t jW3f2a@expr))) jW3f27@ls/false) (let ((jW3f33@t jW3f25@t)) (let ((jW3f35@ls/false (jW30fe@syntax-dispatch jW3f33@t '(any any any)))) (if jW3f35@ls/false (apply (lambda (jW3f37@pat jW3f38@fender jW3f39@expr) (jW3f04@gen-clause jW3f1b@x jW3f1c@keys (cdr jW3f1d@clauses) jW3f1e@r jW3f1f@mr jW3f37@pat jW3f38@fender jW3f39@expr)) jW3f35@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3f33@t))))))))))) (lambda (jW3f07@e jW3f08@r jW3f09@mr) (let ((jW3f0d@t jW3f07@e)) (let ((jW3f0f@ls/false (jW30fe@syntax-dispatch jW3f0d@t '(_ any each-any . each-any)))) (if jW3f0f@ls/false (apply (lambda (jW3f11@expr jW3f12@keys jW3f13@clauses) (begin (jW3104@verify-literals jW3f12@keys jW3f07@e) (let ((jW3f17@x (jW2e7f@gen-lexical 'tmp))) (let ((jW3f19@body (jW3f06@gen-syntax-case jW3f17@x jW3f12@keys jW3f13@clauses jW3f08@r jW3f09@mr))) (list (jW2e5a@jW2d8c@build-lambda '#f (list jW3f17@x) jW3f19@body) (jW3120@chi-expr jW3f11@expr jW3f08@r jW3f09@mr)))))) jW3f0f@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3f0d@t))))))) (set! jW4c0e@jW3106@syntax-case-transformer jW3106@syntax-case-transformer) (set! jW3108@ellipsis-map (lambda (jW3f8b@proc jW3f8c@ls . jW3f8f@ls*) (letrec* ((jW3f92@who '...)) (begin (if (not (list? jW3f8c@ls)) (assertion-violation jW3f92@who '"not a list" jW3f8c@ls) (void)) (if (not (null? jW3f8f@ls*)) (let ((jW3f93@n (length jW3f8c@ls))) (for-each (lambda (jW3f95@x) (begin (if (not (list? jW3f95@x)) (assertion-violation jW3f92@who '"not a list" jW3f95@x) (void)) (if (not (= (length jW3f95@x) jW3f93@n)) (assertion-violation jW3f92@who '"length mismatch" jW3f8c@ls jW3f95@x) (void)))) jW3f8f@ls*)) (void)) (apply map jW3f8b@proc jW3f8c@ls jW3f8f@ls*))))) (set! jW4c0f@jW3108@ellipsis-map jW3108@ellipsis-map) (set! jW310a@syntax-transformer (letrec* ((jW3f98@gen-syntax (lambda (jW400f@src jW4010@e jW4011@r jW4012@maps jW4013@ellipsis? jW4014@vec?) (let ((jW401b@t jW4010@e)) (let ((jW401d@ls/false (jW30fe@syntax-dispatch jW401b@t 'any))) (if (and jW401d@ls/false (apply (lambda (jW401f@dots) (jW4013@ellipsis? jW401f@dots)) jW401d@ls/false)) (apply (lambda (jW4021@dots) (jW31de@syntax-violation '#f '"misplaced ellipsis in syntax form" jW400f@src)) jW401d@ls/false) (let ((jW4023@t jW401b@t)) (let ((jW4025@ls/false (jW30fe@syntax-dispatch jW4023@t 'any))) (if (and jW4025@ls/false (apply (lambda (jW4027@id) (jW2ef7@id? jW4027@id)) jW4025@ls/false)) (apply (lambda (jW4029@id) (let ((jW402b@label (jW2f0d@id->label jW4010@e))) (let ((jW402d@b (jW2f0f@label->binding jW402b@label jW4011@r))) (if (eq? (jW2f13@binding-type jW402d@b) 'syntax) (call-with-values (lambda () (let ((jW4033@var.lev (jW2f15@binding-value jW402d@b))) (jW3f9a@gen-ref jW400f@src (car jW4033@var.lev) (cdr jW4033@var.lev) jW4012@maps))) (lambda (jW4035@jW4030 jW4036@jW4032) (let ((jW4039@maps jW4036@jW4032) (jW403a@var jW4035@jW4030)) (values (list 'ref jW403a@var) jW4039@maps)))) (values (list 'quote jW4010@e) jW4012@maps))))) jW4025@ls/false) (let ((jW403d@t jW4023@t)) (let ((jW403f@ls/false (jW30fe@syntax-dispatch jW403d@t '(any any)))) (if (and jW403f@ls/false (apply (lambda (jW4041@dots jW4042@e) (jW4013@ellipsis? jW4041@dots)) jW403f@ls/false)) (apply (lambda (jW4045@dots jW4046@e) (if jW4014@vec? (jW31de@syntax-violation '#f '"misplaced ellipsis in syntax form" jW400f@src) (jW3f98@gen-syntax jW400f@src jW4046@e jW4011@r jW4012@maps (lambda (jW4049@x) '#f) '#f))) jW403f@ls/false) (let ((jW404b@t jW403d@t)) (let ((jW404d@ls/false (jW30fe@syntax-dispatch jW404b@t '(any any . any)))) (if (and jW404d@ls/false (apply (lambda (jW404f@x jW4050@dots jW4051@y) (jW4013@ellipsis? jW4050@dots)) jW404d@ls/false)) (apply (lambda (jW4055@x jW4056@dots jW4057@y) (let jW406d@f ((jW405b@y jW4057@y) (jW405c@k (lambda (jW405f@maps) (call-with-values (lambda () (jW3f98@gen-syntax jW400f@src jW4055@x jW4011@r (cons '() jW405f@maps) jW4013@ellipsis? '#f)) (lambda (jW4065@jW4062 jW4066@jW4064) (let ((jW4069@maps jW4066@jW4064) (jW406a@x jW4065@jW4062)) (if (null? (car jW4069@maps)) (jW31de@syntax-violation '#f '"extra ellipsis in syntax form" jW400f@src) (values (jW3fa0@gen-map jW406a@x (car jW4069@maps)) (cdr jW4069@maps))))))))) (let ((jW406f@t jW405b@y)) (let ((jW4071@ls/false (jW30fe@syntax-dispatch jW406f@t '()))) (if jW4071@ls/false (apply (lambda () (jW405c@k jW4012@maps)) jW4071@ls/false) (let ((jW4073@t jW406f@t)) (let ((jW4075@ls/false (jW30fe@syntax-dispatch jW4073@t '(any . any)))) (if (and jW4075@ls/false (apply (lambda (jW4077@dots jW4078@y) (jW4013@ellipsis? jW4077@dots)) jW4075@ls/false)) (apply (lambda (jW407b@dots jW407c@y) (jW406d@f jW407c@y (lambda (jW407f@maps) (call-with-values (lambda () (jW405c@k (cons '() jW407f@maps))) (lambda (jW4085@jW4082 jW4086@jW4084) (let ((jW4089@maps jW4086@jW4084) (jW408a@x jW4085@jW4082)) (if (null? (car jW4089@maps)) (jW31de@syntax-violation '#f '"extra ellipsis in syntax form" jW400f@src) (values (jW3f9e@gen-mappend jW408a@x (car jW4089@maps)) (cdr jW4089@maps))))))))) jW4075@ls/false) (let ((jW408d@t jW4073@t)) (let ((jW408f@ls/false (jW30fe@syntax-dispatch jW408d@t '_))) (if jW408f@ls/false (apply (lambda () (call-with-values (lambda () (jW3f98@gen-syntax jW400f@src jW405b@y jW4011@r jW4012@maps jW4013@ellipsis? jW4014@vec?)) (lambda (jW4095@jW4092 jW4096@jW4094) (let ((jW4099@maps jW4096@jW4094) (jW409a@y jW4095@jW4092)) (call-with-values (lambda () (jW405c@k jW4099@maps)) (lambda (jW40a1@jW409e jW40a2@jW40a0) (let ((jW40a5@maps jW40a2@jW40a0) (jW40a6@x jW40a1@jW409e)) (values (jW3f9c@gen-append jW40a6@x jW409a@y) jW40a5@maps)))))))) jW408f@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW408d@t)))))))))))) jW404d@ls/false) (let ((jW40a9@t jW404b@t)) (let ((jW40ab@ls/false (jW30fe@syntax-dispatch jW40a9@t '(any . any)))) (if jW40ab@ls/false (apply (lambda (jW40ad@x jW40ae@y) (call-with-values (lambda () (jW3f98@gen-syntax jW400f@src jW40ad@x jW4011@r jW4012@maps jW4013@ellipsis? '#f)) (lambda (jW40b5@jW40b2 jW40b6@jW40b4) (let ((jW40b9@maps jW40b6@jW40b4) (jW40ba@xnew jW40b5@jW40b2)) (call-with-values (lambda () (jW3f98@gen-syntax jW400f@src jW40ae@y jW4011@r jW40b9@maps jW4013@ellipsis? jW4014@vec?)) (lambda (jW40c1@jW40be jW40c2@jW40c0) (let ((jW40c5@maps jW40c2@jW40c0) (jW40c6@ynew jW40c1@jW40be)) (values (jW3fa2@gen-cons jW4010@e jW40ad@x jW40ae@y jW40ba@xnew jW40c6@ynew) jW40c5@maps)))))))) jW40ab@ls/false) (let ((jW40c9@t jW40a9@t)) (let ((jW40cb@ls/false (jW30fe@syntax-dispatch jW40c9@t '#(vector each-any)))) (if jW40cb@ls/false (apply (lambda (jW40cd@ls) (call-with-values (lambda () (jW3f98@gen-syntax jW400f@src jW40cd@ls jW4011@r jW4012@maps jW4013@ellipsis? '#t)) (lambda (jW40d3@jW40d0 jW40d4@jW40d2) (let ((jW40d7@maps jW40d4@jW40d2) (jW40d8@lsnew jW40d3@jW40d0)) (values (jW3fa4@gen-vector jW4010@e jW40cd@ls jW40d8@lsnew) jW40d7@maps))))) jW40cb@ls/false) (let ((jW40db@t jW40c9@t)) (let ((jW40dd@ls/false (jW30fe@syntax-dispatch jW40db@t '_))) (if jW40dd@ls/false (apply (lambda () (values (list 'quote jW4010@e) jW4012@maps)) jW40dd@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW40db@t)))))))))))))))))))))))) (jW3f9a@gen-ref (lambda (jW3ff5@src jW3ff6@var jW3ff7@level jW3ff8@maps) (if (= jW3ff7@level '0) (values jW3ff6@var jW3ff8@maps) (if (null? jW3ff8@maps) (jW31de@syntax-violation '#f '"missing ellipsis in syntax form" jW3ff5@src) (call-with-values (lambda () (jW3f9a@gen-ref jW3ff5@src jW3ff6@var (- jW3ff7@level '1) (cdr jW3ff8@maps))) (lambda (jW4001@jW3ffe jW4002@jW4000) (let ((jW4005@outer-maps jW4002@jW4000) (jW4006@outer-var jW4001@jW3ffe)) (let ((jW4009@t (assq jW4006@outer-var (car jW3ff8@maps)))) (if jW4009@t ((lambda (jW400b@b) (values (cdr jW400b@b) jW3ff8@maps)) jW4009@t) (let ((jW400d@inner-var (jW2e7f@gen-lexical 'tmp))) (values jW400d@inner-var (cons (cons (cons jW4006@outer-var jW400d@inner-var) (car jW3ff8@maps)) jW4005@outer-maps)))))))))))) (jW3f9c@gen-append (lambda (jW3ff1@x jW3ff2@y) (if (fast-equal? jW3ff2@y ''()) jW3ff1@x (list 'append jW3ff1@x jW3ff2@y)))) (jW3f9e@gen-mappend (lambda (jW3fed@e jW3fee@map-env) (list 'apply '(primitive append) (jW3fa0@gen-map jW3fed@e jW3fee@map-env)))) (jW3fa0@gen-map (lambda (jW3fdb@e jW3fdc@map-env) (let ((jW3fdf@formals (map cdr jW3fdc@map-env)) (jW3fe0@actuals (map (lambda (jW3fe3@x) (list 'ref (car jW3fe3@x))) jW3fdc@map-env))) (if (eq? (car jW3fdb@e) 'ref) (car jW3fe0@actuals) (if (for-all (lambda (jW3fe5@x) (and (eq? (car jW3fe5@x) 'ref) (memq (cadr jW3fe5@x) jW3fdf@formals))) (cdr jW3fdb@e)) (let ((jW3fe7@args (map (let ((jW3fe9@r (map cons jW3fdf@formals jW3fe0@actuals))) (lambda (jW3feb@x) (cdr (assq (cadr jW3feb@x) jW3fe9@r)))) (cdr jW3fdb@e)))) (cons 'map (cons (list 'primitive (car jW3fdb@e)) jW3fe7@args))) (cons* 'map (list 'lambda jW3fdf@formals jW3fdb@e) jW3fe0@actuals)))))) (jW3fa2@gen-cons (lambda (jW3fcb@e jW3fcc@x jW3fcd@y jW3fce@xnew jW3fcf@ynew) (let ((jW3fd5@t (car jW3fcf@ynew))) (if (memv jW3fd5@t '(quote)) (if (eq? (car jW3fce@xnew) 'quote) (let ((jW3fd7@xnew (cadr jW3fce@xnew)) (jW3fd8@ynew (cadr jW3fcf@ynew))) (if (and (eq? jW3fd7@xnew jW3fcc@x) (eq? jW3fd8@ynew jW3fcd@y)) (list 'quote jW3fcb@e) (list 'quote (cons jW3fd7@xnew jW3fd8@ynew)))) (if (null? (cadr jW3fcf@ynew)) (list 'list jW3fce@xnew) (list 'cons jW3fce@xnew jW3fcf@ynew))) (if (memv jW3fd5@t '(list)) (cons 'list (cons jW3fce@xnew (cdr jW3fcf@ynew))) (list 'cons jW3fce@xnew jW3fcf@ynew)))))) (jW3fa4@gen-vector (lambda (jW3fc5@e jW3fc6@ls jW3fc7@lsnew) (if (eq? (car jW3fc7@lsnew) 'quote) (if (eq? (cadr jW3fc7@lsnew) jW3fc6@ls) (list 'quote jW3fc5@e) (list 'quote (list->vector (cadr jW3fc7@lsnew)))) (if (eq? (car jW3fc7@lsnew) 'list) (cons 'vector (cdr jW3fc7@lsnew)) (list 'list->vector jW3fc7@lsnew))))) (jW3fa6@regen (lambda (jW3fbf@x) (let ((jW3fc1@t (car jW3fbf@x))) (if (memv jW3fc1@t '(ref)) (cadr jW3fbf@x) (if (memv jW3fc1@t '(primitive)) (list 'primitive (cadr jW3fbf@x)) (if (memv jW3fc1@t '(quote)) (list 'quote (cadr jW3fbf@x)) (if (memv jW3fc1@t '(lambda)) (jW2e5a@jW2d8c@build-lambda '#f (cadr jW3fbf@x) (jW3fa6@regen (caddr jW3fbf@x))) (if (memv jW3fc1@t '(map)) (let ((jW3fc3@ls (map jW3fa6@regen (cdr jW3fbf@x)))) (cons '(primitive ellipsis-map) jW3fc3@ls)) (cons (list 'primitive (car jW3fbf@x)) (map jW3fa6@regen (cdr jW3fbf@x)))))))))))) (lambda (jW3fa7@e jW3fa8@r jW3fa9@mr) (let ((jW3fad@t jW3fa7@e)) (let ((jW3faf@ls/false (jW30fe@syntax-dispatch jW3fad@t '(_ any)))) (if jW3faf@ls/false (apply (lambda (jW3fb1@x) (call-with-values (lambda () (jW3f98@gen-syntax jW3fa7@e jW3fb1@x jW3fa8@r '() jW3100@ellipsis? '#f)) (lambda (jW3fb7@jW3fb4 jW3fb8@jW3fb6) (let ((jW3fbb@maps jW3fb8@jW3fb6) (jW3fbc@e jW3fb7@jW3fb4)) (jW3fa6@regen jW3fbc@e))))) jW3faf@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW3fad@t))))))) (set! jW4c10@jW310a@syntax-transformer jW310a@syntax-transformer) (set! jW310c@core-macro-transformer (lambda (jW40df@name) (let ((jW40e1@t jW40df@name)) (if (memv jW40e1@t '(quote)) jW30ae@quote-transformer (if (memv jW40e1@t '(lambda)) jW30b2@lambda-transformer (if (memv jW40e1@t '(case-lambda)) jW30b0@case-lambda-transformer (if (memv jW40e1@t '(letrec)) jW3096@letrec-transformer (if (memv jW40e1@t '(letrec*)) jW3098@letrec*-transformer (if (memv jW40e1@t '(let)) jW3094@let-transformer (if (memv jW40e1@t '(if)) jW30a6@if-transformer (if (memv jW40e1@t '(and)) jW30a8@and-transformer (if (memv jW40e1@t '(or)) jW30aa@or-transformer (if (memv jW40e1@t '(foreign-call)) jW30fa@foreign-call-transformer (if (memv jW40e1@t '(syntax-case)) jW3106@syntax-case-transformer (if (memv jW40e1@t '(syntax)) jW310a@syntax-transformer (if (memv jW40e1@t '(type-descriptor)) jW309c@type-descriptor-transformer (if (memv jW40e1@t '(record-type-descriptor)) jW309e@record-type-descriptor-transformer (if (memv jW40e1@t '(record-constructor-descriptor)) jW30a0@record-constructor-descriptor-transformer (if (memv jW40e1@t '(fluid-let-syntax)) jW309a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" jW40df@name)))))))))))))))))))) (set! jW4c11@jW310c@core-macro-transformer jW310c@core-macro-transformer) (set! jW310e@symbol-macro (lambda (jW40e3@x jW40e4@set) (let ((jW40e7@t jW40e3@x)) (let ((jW40e9@ls/false (jW30fe@syntax-dispatch jW40e7@t '(_ any)))) (if (and jW40e9@ls/false (apply (lambda (jW40eb@name) (and (jW2ef7@id? jW40eb@name) (memq (jW2ef9@id->sym jW40eb@name) jW40e4@set))) jW40e9@ls/false)) (apply (lambda (jW40ed@name) (jW30b4@bless (list 'quote jW40ed@name))) jW40e9@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW40e7@t)))))) (set! jW4c12@jW310e@symbol-macro jW310e@symbol-macro) (set! jW3110@macro-transformer (lambda (jW40ef@x) (if (procedure? jW40ef@x) jW40ef@x (if (symbol? jW40ef@x) (let ((jW40f1@t jW40ef@x)) (if (memv jW40f1@t '(define-record-type)) jW30f2@define-record-type-macro (if (memv jW40f1@t '(define-struct)) jW30f0@define-struct-macro (if (memv jW40f1@t '(include)) jW30e6@include-macro (if (memv jW40f1@t '(cond)) jW30e2@cond-macro (if (memv jW40f1@t '(let)) jW30ba@let-macro (if (memv jW40f1@t '(do)) jW30da@do-macro (if (memv jW40f1@t '(or)) jW30de@or-macro (if (memv jW40f1@t '(and)) jW30e0@and-macro (if (memv jW40f1@t '(let*)) jW30dc@let*-macro (if (memv jW40f1@t '(let-values)) jW30bc@let-values-macro (if (memv jW40f1@t '(let*-values)) jW30be@let*-values-macro (if (memv jW40f1@t '(syntax-rules)) jW30ea@syntax-rules-macro (if (memv jW40f1@t '(quasiquote)) jW30ec@quasiquote-macro (if (memv jW40f1@t '(quasisyntax)) jW30ee@quasisyntax-macro (if (memv jW40f1@t '(with-syntax)) jW30b6@with-syntax-macro (if (memv jW40f1@t '(when)) jW30a2@when-macro (if (memv jW40f1@t '(unless)) jW30a4@unless-macro (if (memv jW40f1@t '(case)) jW30ac@case-macro (if (memv jW40f1@t '(identifier-syntax)) jW30d8@identifier-syntax-macro (if (memv jW40f1@t '(time)) jW30d0@time-macro (if (memv jW40f1@t '(delay)) jW30d2@delay-macro (if (memv jW40f1@t '(assert)) jW30d4@assert-macro (if (memv jW40f1@t '(endianness)) jW30d6@endianness-macro (if (memv jW40f1@t '(guard)) jW30cc@guard-macro (if (memv jW40f1@t '(define-enumeration)) jW30ce@define-enumeration-macro (if (memv jW40f1@t '(trace-lambda)) jW30c0@trace-lambda-macro (if (memv jW40f1@t '(trace-define)) jW30c2@trace-define-macro (if (memv jW40f1@t '(trace-define-syntax)) jW30c4@trace-define-syntax-macro (if (memv jW40f1@t '(trace-let-syntax)) jW30c8@trace-let-syntax-macro (if (memv jW40f1@t '(trace-letrec-syntax)) jW30ca@trace-letrec-syntax-macro (if (memv jW40f1@t '(define-condition-type)) jW30f4@define-condition-type-macro (if (memv jW40f1@t '(parameterize)) jW30f8@parameterize-macro (if (memv jW40f1@t '(include-into)) jW30e8@include-into-macro (if (memv jW40f1@t '(eol-style)) (lambda (jW40f3@x) (jW310e@symbol-macro jW40f3@x '(none lf cr crlf nel crnel ls))) (if (memv jW40f1@t '(error-handling-mode)) (lambda (jW40f5@x) (jW310e@symbol-macro jW40f5@x '(ignore raise replace))) (if (memv jW40f1@t '(buffer-mode)) (lambda (jW40f7@x) (jW310e@symbol-macro jW40f7@x '(none line block))) (if (memv jW40f1@t '(file-options)) jW2e72@file-options-macro (if (memv jW40f1@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) jW30f6@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" jW40ef@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" jW40ef@x))))) (set! jW4c13@jW3110@macro-transformer jW3110@macro-transformer) (set! jW3112@local-macro-transformer (lambda (jW40f9@x) (car jW40f9@x))) (set! jW4c14@jW3112@local-macro-transformer jW3112@local-macro-transformer) (set! jW3114@do-macro-call (lambda (jW40fb@transformer jW40fc@expr jW40fd@rib) (let ((jW4101@out (jW40fb@transformer (jW2ee3@add-mark jW2edb@anti-mark '#f jW40fc@expr '#f)))) (begin (let jW4105@f ((jW4103@x jW4101@out)) (if (not (jW2ec3@stx? jW4103@x)) (if (pair? jW4103@x) (begin (jW4105@f (car jW4103@x)) (jW4105@f (cdr jW4103@x))) (if (vector? jW4103@x) (vector-for-each jW4105@f jW4103@x) (if (symbol? jW4103@x) (jW31de@syntax-violation '#f '"raw symbol encountered in output of macro" jW40fc@expr jW4103@x) (void)))) (void))) (jW2ee3@add-mark (jW2ed9@gen-mark) jW40fd@rib jW4101@out jW40fc@expr))))) (set! jW4c15@jW3114@do-macro-call jW3114@do-macro-call) (set! jW3116@chi-macro (lambda (jW4107@p jW4108@e jW4109@rib) (jW3114@do-macro-call (jW3110@macro-transformer jW4107@p) jW4108@e jW4109@rib))) (set! jW4c16@jW3116@chi-macro jW3116@chi-macro) (set! jW3118@chi-local-macro (lambda (jW410d@p jW410e@e jW410f@rib) (jW3114@do-macro-call (jW3112@local-macro-transformer jW410d@p) jW410e@e jW410f@rib))) (set! jW4c17@jW3118@chi-local-macro jW3118@chi-local-macro) (set! jW311a@chi-global-macro (lambda (jW4113@p jW4114@e jW4115@rib) (let ((jW4119@lib (car jW4113@p)) (jW411a@loc (cdr jW4113@p))) (begin (jW2d14@jW2b63@visit-library jW4119@lib) (let ((jW411d@x (symbol-value jW411a@loc))) (let ((jW411f@transformer (if (procedure? jW411d@x) jW411d@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" jW411d@x)))) (jW3114@do-macro-call jW411f@transformer jW4114@e jW4115@rib))))))) (set! jW4c18@jW311a@chi-global-macro jW311a@chi-global-macro) (set! jW311c@chi-expr* (lambda (jW4121@e* jW4122@r jW4123@mr) (if (null? jW4121@e*) '() (let ((jW4127@e (jW3120@chi-expr (car jW4121@e*) jW4122@r jW4123@mr))) (cons jW4127@e (jW311c@chi-expr* (cdr jW4121@e*) jW4122@r jW4123@mr)))))) (set! jW4c19@jW311c@chi-expr* jW311c@chi-expr*) (set! jW311e@chi-application (lambda (jW4129@e jW412a@r jW412b@mr) (let ((jW412f@t jW4129@e)) (let ((jW4131@ls/false (jW30fe@syntax-dispatch jW412f@t '(any . each-any)))) (if jW4131@ls/false (apply (lambda (jW4133@rator jW4134@rands) (let ((jW4137@rator (jW3120@chi-expr jW4133@rator jW412a@r jW412b@mr))) (cons jW4137@rator (jW311c@chi-expr* jW4134@rands jW412a@r jW412b@mr)))) jW4131@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW412f@t)))))) (set! jW4c1a@jW311e@chi-application jW311e@chi-application) (set! jW3120@chi-expr (lambda (jW4139@e jW413a@r jW413b@mr) (call-with-values (lambda () (jW2f19@syntax-type jW4139@e jW413a@r)) (lambda (jW4145@jW4140 jW4146@jW4142 jW4147@jW4144) (let ((jW414b@kwd jW4147@jW4144) (jW414c@value jW4146@jW4142) (jW414d@type jW4145@jW4140)) (let ((jW4151@t jW414d@type)) (if (memv jW4151@t '(core-macro)) (let ((jW4153@transformer (jW310c@core-macro-transformer jW414c@value))) (jW4153@transformer jW4139@e jW413a@r jW413b@mr)) (if (memv jW4151@t '(global)) (let ((jW4155@lib (car jW414c@value))) (let ((jW4157@loc (cdr jW414c@value))) (begin ((jW3166@inv-collector) jW4155@lib) jW4157@loc))) (if (memv jW4151@t '(core-prim)) (let ((jW4159@name jW414c@value)) (list 'primitive jW4159@name)) (if (memv jW4151@t '(call)) (jW311e@chi-application jW4139@e jW413a@r jW413b@mr) (if (memv jW4151@t '(lexical)) (let ((jW415b@lex (jW3088@lexical-var jW414c@value))) jW415b@lex) (if (memv jW4151@t '(global-macro global-macro!)) (jW3120@chi-expr (jW311a@chi-global-macro jW414c@value jW4139@e '#f) jW413a@r jW413b@mr) (if (memv jW4151@t '(local-macro local-macro!)) (jW3120@chi-expr (jW3118@chi-local-macro jW414c@value jW4139@e '#f) jW413a@r jW413b@mr) (if (memv jW4151@t '(macro macro!)) (jW3120@chi-expr (jW3116@chi-macro jW414c@value jW4139@e '#f) jW413a@r jW413b@mr) (if (memv jW4151@t '(constant)) (let ((jW415d@datum jW414c@value)) (list 'quote jW415d@datum)) (if (memv jW4151@t '(set!)) (jW3122@chi-set! jW4139@e jW413a@r jW413b@mr) (if (memv jW4151@t '(begin)) (let ((jW415f@t jW4139@e)) (let ((jW4161@ls/false (jW30fe@syntax-dispatch jW415f@t '(_ any . each-any)))) (if jW4161@ls/false (apply (lambda (jW4163@x jW4164@x*) (jW2e5c@jW2dbc@build-sequence '#f (jW311c@chi-expr* (cons jW4163@x jW4164@x*) jW413a@r jW413b@mr))) jW4161@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW415f@t)))) (if (memv jW4151@t '(let-syntax letrec-syntax)) (let ((jW4167@t jW4139@e)) (let ((jW4169@ls/false (jW30fe@syntax-dispatch jW4167@t '(_ #(each (any any)) any . each-any)))) (if (and jW4169@ls/false (apply (lambda (jW416b@xlhs* jW416c@xrhs* jW416d@xbody jW416e@xbody*) (if (not (jW2eff@valid-bound-ids? jW416b@xlhs*)) (jW31de@syntax-violation '#f '"invalid identifiers" jW4139@e) (void))) jW4169@ls/false)) (apply (lambda (jW4173@xlhs* jW4174@xrhs* jW4175@xbody jW4176@xbody*) (let ((jW417b@xlab* (map jW2e83@gen-label jW4173@xlhs*))) (let ((jW417d@xrib (jW2eb7@make-full-rib jW4173@xlhs* jW417b@xlab*))) (let ((jW417f@xb* (map (lambda (jW4181@x) (jW2f2f@make-eval-transformer (jW3158@expand-transformer (if (eq? jW414d@type 'let-syntax) jW4181@x (jW2ee1@add-subst jW417d@xrib jW4181@x)) jW413b@mr))) jW4174@xrhs*))) (jW2e5c@jW2dbc@build-sequence '#f (jW311c@chi-expr* (map (lambda (jW4183@x) (jW2ee1@add-subst jW417d@xrib jW4183@x)) (cons jW4175@xbody jW4176@xbody*)) (append (map cons jW417b@xlab* jW417f@xb*) jW413a@r) (append (map cons jW417b@xlab* jW417f@xb*) jW413b@mr))))))) jW4169@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW4167@t)))) (if (memv jW4151@t '(displaced-lexical)) (jW31de@syntax-violation '#f '"identifier out of context" jW4139@e) (if (memv jW4151@t '(syntax)) (jW31de@syntax-violation '#f '"reference to pattern variable outside a syntax form" jW4139@e) (if (memv jW4151@t '(define define-syntax module import library)) (jW31de@syntax-violation '#f (string-append (let ((jW4185@t jW414d@type)) (if (memv jW4185@t '(define)) '"a definition" (if (memv jW4185@t '(define-syntax)) '"a define-syntax" (if (memv jW4185@t '(module)) '"a module definition" (if (memv jW4185@t '(library)) '"a library definition" (if (memv jW4185@t '(import)) '"an import declaration" (if (memv jW4185@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") jW4139@e) (if (memv jW4151@t '(mutable)) (jW31de@syntax-violation '#f '"attempt to reference an unexportable variable" jW4139@e) (jW31de@syntax-violation '#f '"invalid expression" jW4139@e))))))))))))))))))))))) (set! jW4c1b@jW3120@chi-expr jW3120@chi-expr) (set! jW3122@chi-set! (lambda (jW4187@e jW4188@r jW4189@mr) (let ((jW418d@t jW4187@e)) (let ((jW418f@ls/false (jW30fe@syntax-dispatch jW418d@t '(_ any any)))) (if (and jW418f@ls/false (apply (lambda (jW4191@x jW4192@v) (jW2ef7@id? jW4191@x)) jW418f@ls/false)) (apply (lambda (jW4195@x jW4196@v) (call-with-values (lambda () (jW2f19@syntax-type jW4195@x jW4188@r)) (lambda (jW419f@jW419a jW41a0@jW419c jW41a1@jW419e) (let ((jW41a5@kwd jW41a1@jW419e) (jW41a6@value jW41a0@jW419c) (jW41a7@type jW419f@jW419a)) (let ((jW41ab@t jW41a7@type)) (if (memv jW41ab@t '(lexical)) (begin (jW308c@set-lexical-mutable! jW41a6@value '#t) (list 'set! (jW3088@lexical-var jW41a6@value) (jW3120@chi-expr jW4196@v jW4188@r jW4189@mr))) (if (memv jW41ab@t '(core-prim)) (jW31de@syntax-violation '#f '"cannot modify imported core primitive" jW4187@e) (if (memv jW41ab@t '(global)) (jW31de@syntax-violation '#f '"attempt to modify imported binding" jW4187@e) (if (memv jW41ab@t '(global-macro!)) (jW3120@chi-expr (jW311a@chi-global-macro jW41a6@value jW4187@e '#f) jW4188@r jW4189@mr) (if (memv jW41ab@t '(local-macro!)) (jW3120@chi-expr (jW3118@chi-local-macro jW41a6@value jW4187@e '#f) jW4188@r jW4189@mr) (if (memv jW41ab@t '(mutable)) (jW31de@syntax-violation '#f '"attempt to assign to an unexportable variable" jW4187@e) (jW31de@syntax-violation '#f '"invalid syntax" jW4187@e)))))))))))) jW418f@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW418d@t)))))) (set! jW4c1c@jW3122@chi-set! jW3122@chi-set!) (set! jW3124@verify-formals (lambda (jW41ad@fmls jW41ae@stx) (let ((jW41b1@t jW41ad@fmls)) (let ((jW41b3@ls/false (jW30fe@syntax-dispatch jW41b1@t 'each-any))) (if jW41b3@ls/false (apply (lambda (jW41b5@x*) (if (not (jW2eff@valid-bound-ids? jW41b5@x*)) (jW30b8@invalid-fmls-error jW41ae@stx jW41ad@fmls) (void))) jW41b3@ls/false) (let ((jW41b7@t jW41b1@t)) (let ((jW41b9@ls/false (jW30fe@syntax-dispatch jW41b7@t '#(each+ any () any)))) (if jW41b9@ls/false (apply (lambda (jW41bb@x* jW41bc@x) (if (not (jW2eff@valid-bound-ids? (cons jW41bc@x jW41bb@x*))) (jW30b8@invalid-fmls-error jW41ae@stx jW41ad@fmls) (void))) jW41b9@ls/false) (let ((jW41bf@t jW41b7@t)) (let ((jW41c1@ls/false (jW30fe@syntax-dispatch jW41bf@t '_))) (if jW41c1@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid syntax" jW41ae@stx)) jW41c1@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW41bf@t)))))))))))) (set! jW4c1d@jW3124@verify-formals jW3124@verify-formals) (set! jW3126@chi-lambda-clause (lambda (jW41c3@stx jW41c4@fmls jW41c5@body* jW41c6@r jW41c7@mr) (let ((jW41cd@t jW41c4@fmls)) (let ((jW41cf@ls/false (jW30fe@syntax-dispatch jW41cd@t 'each-any))) (if jW41cf@ls/false (apply (lambda (jW41d1@x*) (begin (jW3124@verify-formals jW41c4@fmls jW41c3@stx) (let ((jW41d3@lex* (map jW2e7f@gen-lexical jW41d1@x*)) (jW41d4@lab* (map jW2e83@gen-label jW41d1@x*))) (values jW41d3@lex* (jW3136@chi-internal (jW2ee1@add-subst (jW2eb7@make-full-rib jW41d1@x* jW41d4@lab*) jW41c5@body*) (jW3090@add-lexicals jW41d4@lab* jW41d3@lex* jW41c6@r) jW41c7@mr))))) jW41cf@ls/false) (let ((jW41d7@t jW41cd@t)) (let ((jW41d9@ls/false (jW30fe@syntax-dispatch jW41d7@t '#(each+ any () any)))) (if jW41d9@ls/false (apply (lambda (jW41db@x* jW41dc@x) (begin (jW3124@verify-formals jW41c4@fmls jW41c3@stx) (let ((jW41df@lex* (map jW2e7f@gen-lexical jW41db@x*)) (jW41e0@lab* (map jW2e83@gen-label jW41db@x*)) (jW41e1@lex (jW2e7f@gen-lexical jW41dc@x)) (jW41e2@lab (jW2e83@gen-label jW41dc@x))) (values (append jW41df@lex* jW41e1@lex) (jW3136@chi-internal (jW2ee1@add-subst (jW2eb7@make-full-rib (cons jW41dc@x jW41db@x*) (cons jW41e2@lab jW41e0@lab*)) jW41c5@body*) (jW3090@add-lexicals (cons jW41e2@lab jW41e0@lab*) (cons jW41e1@lex jW41df@lex*) jW41c6@r) jW41c7@mr))))) jW41d9@ls/false) (let ((jW41e7@t jW41d7@t)) (let ((jW41e9@ls/false (jW30fe@syntax-dispatch jW41e7@t '_))) (if jW41e9@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid syntax" jW41c4@fmls)) jW41e9@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW41e7@t)))))))))))) (set! jW4c1e@jW3126@chi-lambda-clause jW3126@chi-lambda-clause) (set! jW3128@chi-lambda-clause* (lambda (jW41eb@stx jW41ec@fmls* jW41ed@body** jW41ee@r jW41ef@mr) (if (null? jW41ec@fmls*) (values '() '()) (call-with-values (lambda () (jW3126@chi-lambda-clause jW41eb@stx (car jW41ec@fmls*) (car jW41ed@body**) jW41ee@r jW41ef@mr)) (lambda (jW41f9@jW41f6 jW41fa@jW41f8) (let ((jW41fd@b jW41fa@jW41f8) (jW41fe@a jW41f9@jW41f6)) (call-with-values (lambda () (jW3128@chi-lambda-clause* jW41eb@stx (cdr jW41ec@fmls*) (cdr jW41ed@body**) jW41ee@r jW41ef@mr)) (lambda (jW4205@jW4202 jW4206@jW4204) (let ((jW4209@b* jW4206@jW4204) (jW420a@a* jW4205@jW4202)) (values (cons jW41fe@a jW420a@a*) (cons jW41fd@b jW4209@b*))))))))))) (set! jW4c1f@jW3128@chi-lambda-clause* jW3128@chi-lambda-clause*) (set! jW312a@chi-defun (lambda (jW420d@x jW420e@r jW420f@mr) (let ((jW4213@fmls (car jW420d@x)) (jW4214@body* (cdr jW420d@x))) (call-with-values (lambda () (jW3126@chi-lambda-clause jW4213@fmls jW4213@fmls jW4214@body* jW420e@r jW420f@mr)) (lambda (jW421b@jW4218 jW421c@jW421a) (let ((jW421f@body jW421c@jW421a) (jW4220@fmls jW421b@jW4218)) (jW2e5a@jW2d8c@build-lambda '#f jW4220@fmls jW421f@body))))))) (set! jW4c20@jW312a@chi-defun jW312a@chi-defun) (set! jW312c@chi-rhs (lambda (jW4223@rhs jW4224@r jW4225@mr) (let ((jW4229@t (car jW4223@rhs))) (if (memv jW4229@t '(defun)) (jW312a@chi-defun (cdr jW4223@rhs) jW4224@r jW4225@mr) (if (memv jW4229@t '(expr)) (let ((jW422b@expr (cdr jW4223@rhs))) (jW3120@chi-expr jW422b@expr jW4224@r jW4225@mr)) (if (memv jW4229@t '(top-expr)) (let ((jW422d@expr (cdr jW4223@rhs))) (jW2e5c@jW2dbc@build-sequence '#f (list (jW3120@chi-expr jW422d@expr jW4224@r jW4225@mr) (jW2e5d@jW2dbe@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" jW4223@rhs))))))) (set! jW4c21@jW312c@chi-rhs jW312c@chi-rhs) (set! jW312e@expand-interaction-rhs*/init* (lambda (jW422f@lhs* jW4230@rhs* jW4231@init* jW4232@r jW4233@mr) (let jW423d@f ((jW4239@lhs* jW422f@lhs*) (jW423a@rhs* jW4230@rhs*)) (if (null? jW4239@lhs*) (map (lambda (jW423f@x) (jW3120@chi-expr jW423f@x jW4232@r jW4233@mr)) jW4231@init*) (let ((jW4241@lhs (car jW4239@lhs*)) (jW4242@rhs (car jW423a@rhs*))) (let ((jW4245@t (car jW4242@rhs))) (if (memv jW4245@t '(defun)) (let ((jW4247@rhs (jW312a@chi-defun (cdr jW4242@rhs) jW4232@r jW4233@mr))) (cons (list 'set! jW4241@lhs jW4247@rhs) (jW423d@f (cdr jW4239@lhs*) (cdr jW423a@rhs*)))) (if (memv jW4245@t '(expr)) (let ((jW4249@rhs (jW3120@chi-expr (cdr jW4242@rhs) jW4232@r jW4233@mr))) (cons (list 'set! jW4241@lhs jW4249@rhs) (jW423d@f (cdr jW4239@lhs*) (cdr jW423a@rhs*)))) (if (memv jW4245@t '(top-expr)) (let ((jW424b@e (jW3120@chi-expr (cdr jW4242@rhs) jW4232@r jW4233@mr))) (cons jW424b@e (jW423d@f (cdr jW4239@lhs*) (cdr jW423a@rhs*)))) (error 'expand-interaction '"invallid" jW4242@rhs)))))))))) (set! jW4c22@jW312e@expand-interaction-rhs*/init* jW312e@expand-interaction-rhs*/init*) (set! jW3130@chi-rhs* (lambda (jW424d@rhs* jW424e@r jW424f@mr) (let jW4255@f ((jW4253@ls jW424d@rhs*)) (if (null? jW4253@ls) '() (let ((jW4257@a (jW312c@chi-rhs (car jW4253@ls) jW424e@r jW424f@mr))) (cons jW4257@a (jW4255@f (cdr jW4253@ls)))))))) (set! jW4c23@jW3130@chi-rhs* jW3130@chi-rhs*) (set! jW3132@find-bound=? (lambda (jW4259@x jW425a@lhs* jW425b@rhs*) (if (null? jW425a@lhs*) '#f (if (jW2efb@bound-id=? jW4259@x (car jW425a@lhs*)) (car jW425b@rhs*) (jW3132@find-bound=? jW4259@x (cdr jW425a@lhs*) (cdr jW425b@rhs*)))))) (set! jW4c24@jW3132@find-bound=? jW3132@find-bound=?) (set! jW3134@find-dups (lambda (jW425f@ls) (let jW4265@f ((jW4261@ls jW425f@ls) (jW4262@dups '())) (if (null? jW4261@ls) jW4262@dups (let ((jW4267@t (jW3132@find-bound=? (car jW4261@ls) (cdr jW4261@ls) (cdr jW4261@ls)))) (if jW4267@t ((lambda (jW4269@x) (jW4265@f (cdr jW4261@ls) (cons (list (car jW4261@ls) jW4269@x) jW4262@dups))) jW4267@t) (jW4265@f (cdr jW4261@ls) jW4262@dups))))))) (set! jW4c25@jW3134@find-dups jW3134@find-dups) (set! jW3136@chi-internal (lambda (jW426b@e* jW426c@r jW426d@mr) (let ((jW4271@rib (jW2eab@make-empty-rib))) (call-with-values (lambda () (jW3156@chi-body* (map (lambda (jW4283@x) (jW2ee1@add-subst jW4271@rib jW4283@x)) (jW2ef5@syntax->list jW426b@e*)) jW426c@r jW426d@mr '() '() '() '() '() jW4271@rib '#f)) (lambda (jW4285@jW4274 jW4286@jW4276 jW4287@jW4278 jW4288@jW427a jW4289@jW427c jW428a@jW427e jW428b@jW4280 jW428c@jW4282) (let ((jW4295@_exp* jW428c@jW4282) (jW4296@kwd* jW428b@jW4280) (jW4297@mod** jW428a@jW427e) (jW4298@rhs* jW4289@jW427c) (jW4299@lex* jW4288@jW427a) (jW429a@mr jW4287@jW4278) (jW429b@r jW4286@jW4276) (jW429c@e* jW4285@jW4274)) (begin (if (null? jW429c@e*) (jW31de@syntax-violation '#f '"no expression in body" jW429c@e*) (void)) (let ((jW42a5@init* (jW311c@chi-expr* (append (apply append (reverse jW4297@mod**)) jW429c@e*) jW429b@r jW429a@mr))) (let ((jW42a7@rhs* (jW3130@chi-rhs* jW4298@rhs* jW429b@r jW429a@mr))) (jW2e61@jW2dc6@build-letrec* '#f (reverse jW4299@lex*) (reverse jW42a7@rhs*) (jW2e5c@jW2dbc@build-sequence '#f jW42a5@init*))))))))))) (set! jW4c26@jW3136@chi-internal jW3136@chi-internal) (set! jW3138@parse-module (lambda (jW42a9@e) (let ((jW42ab@t jW42a9@e)) (let ((jW42ad@ls/false (jW30fe@syntax-dispatch jW42ab@t '(_ each-any . each-any)))) (if jW42ad@ls/false (apply (lambda (jW42af@export* jW42b0@b*) (begin (if (not (for-all jW2ef7@id? jW42af@export*)) (jW31de@syntax-violation '#f '"module exports must be identifiers" jW42a9@e) (void)) (values '#f (list->vector jW42af@export*) jW42b0@b*))) jW42ad@ls/false) (let ((jW42b3@t jW42ab@t)) (let ((jW42b5@ls/false (jW30fe@syntax-dispatch jW42b3@t '(_ any each-any . each-any)))) (if jW42b5@ls/false (apply (lambda (jW42b7@name jW42b8@export* jW42b9@b*) (begin (if (not (jW2ef7@id? jW42b7@name)) (jW31de@syntax-violation '#f '"module name must be an identifier" jW42a9@e) (void)) (if (not (for-all jW2ef7@id? jW42b8@export*)) (jW31de@syntax-violation '#f '"module exports must be identifiers" jW42a9@e) (void)) (values jW42b7@name (list->vector jW42b8@export*) jW42b9@b*))) jW42b5@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW42b3@t))))))))) (set! jW4c27@jW3138@parse-module jW3138@parse-module) (set! jW3142@module-interface? (lambda (jW42bd@x) (and (simple-struct? jW42bd@x) (eq? (simple-struct-name jW42bd@x) 'module-interface)))) (set! jW4c28@jW3142@module-interface? jW3142@module-interface?) (set! jW3144@module-interface-first-mark (lambda (jW42bf@x) (simple-struct-ref jW42bf@x '0))) (set! jW4c29@jW3144@module-interface-first-mark jW3144@module-interface-first-mark) (set! jW3146@set-module-interface-first-mark! (lambda (jW42c1@x jW42c2@val) (simple-struct-set! jW42c1@x '0 jW42c2@val))) (set! jW4c2a@jW3146@set-module-interface-first-mark! jW3146@set-module-interface-first-mark!) (set! jW3148@module-interface-exp-id-vec (lambda (jW42c5@x) (simple-struct-ref jW42c5@x '1))) (set! jW4c2b@jW3148@module-interface-exp-id-vec jW3148@module-interface-exp-id-vec) (set! jW314a@set-module-interface-exp-id-vec! (lambda (jW42c7@x jW42c8@val) (simple-struct-set! jW42c7@x '1 jW42c8@val))) (set! jW4c2c@jW314a@set-module-interface-exp-id-vec! jW314a@set-module-interface-exp-id-vec!) (set! jW314c@module-interface-exp-lab-vec (lambda (jW42cb@x) (simple-struct-ref jW42cb@x '2))) (set! jW4c2d@jW314c@module-interface-exp-lab-vec jW314c@module-interface-exp-lab-vec) (set! jW314e@set-module-interface-exp-lab-vec! (lambda (jW42cd@x jW42ce@val) (simple-struct-set! jW42cd@x '2 jW42ce@val))) (set! jW4c2e@jW314e@set-module-interface-exp-lab-vec! jW314e@set-module-interface-exp-lab-vec!) (set! jW3150@dummy '3) (set! jW4c2f@jW3150@dummy jW3150@dummy) (set! jW3152@module-interface-exp-id* (lambda (jW42d1@iface jW42d2@id) (letrec* ((jW42d6@diff-marks (lambda (jW42dd@ls jW42de@x) (begin (if (null? jW42dd@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((jW42e1@a (car jW42dd@ls))) (if (eq? jW42e1@a jW42de@x) '() (cons jW42e1@a (jW42d6@diff-marks (cdr jW42dd@ls) jW42de@x)))))))) (let ((jW42d7@diff (jW42d6@diff-marks (jW2ec9@stx-mark* jW42d2@id) (jW3144@module-interface-first-mark jW42d1@iface))) (jW42d8@id-vec (jW3148@module-interface-exp-id-vec jW42d1@iface))) (if (null? jW42d7@diff) jW42d8@id-vec (vector-map (lambda (jW42db@x) (make-simple-struct 'stx '5 (list (jW2ec5@stx-expr jW42db@x) (append jW42d7@diff (jW2ec9@stx-mark* jW42db@x)) '() '()))) jW42d8@id-vec)))))) (set! jW4c30@jW3152@module-interface-exp-id* jW3152@module-interface-exp-id*) (set! jW3154@chi-internal-module (lambda (jW42e3@e jW42e4@r jW42e5@mr jW42e6@lex* jW42e7@rhs* jW42e8@mod** jW42e9@kwd*) (call-with-values (lambda () (jW3138@parse-module jW42e3@e)) (lambda (jW42f7@jW42f2 jW42f8@jW42f4 jW42f9@jW42f6) (let ((jW42fd@e* jW42f9@jW42f6) (jW42fe@exp-id* jW42f8@jW42f4) (jW42ff@name jW42f7@jW42f2)) (let ((jW4303@rib (jW2eab@make-empty-rib))) (let ((jW4305@e* (map (lambda (jW4307@x) (jW2ee1@add-subst jW4303@rib jW4307@x)) (jW2ef5@syntax->list jW42fd@e*)))) (call-with-values (lambda () (jW3156@chi-body* jW4305@e* jW42e4@r jW42e5@mr jW42e6@lex* jW42e7@rhs* jW42e8@mod** jW42e9@kwd* '() jW4303@rib '#f)) (lambda (jW4319@jW430a jW431a@jW430c jW431b@jW430e jW431c@jW4310 jW431d@jW4312 jW431e@jW4314 jW431f@jW4316 jW4320@jW4318) (let ((jW4329@_exp* jW4320@jW4318) (jW432a@kwd* jW431f@jW4316) (jW432b@mod** jW431e@jW4314) (jW432c@rhs* jW431d@jW4312) (jW432d@lex* jW431c@jW4310) (jW432e@mr jW431b@jW430e) (jW432f@r jW431a@jW430c) (jW4330@e* jW4319@jW430a)) (let ((jW4339@exp-lab* (vector-map (lambda (jW433d@x) (or (jW2f0d@id->label (make-simple-struct 'stx '5 (list (jW2ef9@id->sym jW433d@x) (jW2ec9@stx-mark* jW433d@x) (list jW4303@rib) '()))) (jW31de@syntax-violation '#f '"cannot find module export" jW433d@x))) jW42fe@exp-id*)) (jW433a@mod** (cons jW4330@e* jW432b@mod**))) (if (not jW42ff@name) (values jW432d@lex* jW432c@rhs* jW42fe@exp-id* jW4339@exp-lab* jW432f@r jW432e@mr jW433a@mod** jW432a@kwd*) (let ((jW433f@lab (jW2e83@gen-label 'module)) (jW4340@iface (make-simple-struct 'module-interface '4 (list (car (jW2ec9@stx-mark* jW42ff@name)) (vector-map (lambda (jW4343@x) (make-simple-struct 'stx '5 (list (jW2ec5@stx-expr jW4343@x) (jW2ec9@stx-mark* jW4343@x) '() '()))) jW42fe@exp-id*) jW4339@exp-lab*)))) (values jW432d@lex* jW432c@rhs* (vector jW42ff@name) (vector jW433f@lab) (cons (cons jW433f@lab (cons '$module jW4340@iface)) jW432f@r) (cons (cons jW433f@lab (cons '$module jW4340@iface)) jW432e@mr) jW433a@mod** jW432a@kwd*)))))))))))))) (set! jW4c31@jW3154@chi-internal-module jW3154@chi-internal-module) (set! jW3156@chi-body* (lambda (jW4345@e* jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW434b@kwd* jW434c@exp* jW434d@rib jW434e@top?) (if (null? jW4345@e*) (values jW4345@e* jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW434b@kwd* jW434c@exp*) (let ((jW4359@e (car jW4345@e*))) (call-with-values (lambda () (jW2f19@syntax-type jW4359@e jW4346@r)) (lambda (jW4361@jW435c jW4362@jW435e jW4363@jW4360) (let ((jW4367@kwd jW4363@jW4360) (jW4368@value jW4362@jW435e) (jW4369@type jW4361@jW435c)) (let ((jW436d@kwd* (if (jW2ef7@id? jW4367@kwd) (cons jW4367@kwd jW434b@kwd*) jW434b@kwd*))) (let ((jW436f@t jW4369@type)) (if (memv jW436f@t '(define)) (call-with-values (lambda () (jW3080@parse-define jW4359@e)) (lambda (jW4375@jW4372 jW4376@jW4374) (let ((jW4379@rhs jW4376@jW4374) (jW437a@id jW4375@jW4372)) (begin (if (jW2f03@bound-id-member? jW437a@id jW436d@kwd*) (jW31de@syntax-violation '#f '"cannot redefine keyword" jW4359@e) (void)) (call-with-values (lambda () (jW2e87@gen-define-label+loc jW437a@id jW434d@rib)) (lambda (jW4381@jW437e jW4382@jW4380) (let ((jW4385@lex jW4382@jW4380) (jW4386@lab jW4381@jW437e)) (begin (jW2ead@extend-rib! jW434d@rib jW437a@id jW4386@lab) (jW3156@chi-body* (cdr jW4345@e*) (jW308e@add-lexical jW4386@lab jW4385@lex jW4346@r) jW4347@mr (cons jW4385@lex jW4348@lex*) (cons jW4379@rhs jW4349@rhs*) jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?))))))))) (if (memv jW436f@t '(define-syntax)) (call-with-values (lambda () (jW3082@parse-define-syntax jW4359@e)) (lambda (jW438d@jW438a jW438e@jW438c) (let ((jW4391@rhs jW438e@jW438c) (jW4392@id jW438d@jW438a)) (begin (if (jW2f03@bound-id-member? jW4392@id jW436d@kwd*) (jW31de@syntax-violation '#f '"cannot redefine keyword" jW4359@e) (void)) (let ((jW4395@lab (jW2e89@gen-define-label jW4392@id jW434d@rib)) (jW4396@expanded-rhs (jW3158@expand-transformer jW4391@rhs jW4347@mr))) (begin (jW2ead@extend-rib! jW434d@rib jW4392@id jW4395@lab) (let ((jW4399@b (jW2f2f@make-eval-transformer jW4396@expanded-rhs))) (jW3156@chi-body* (cdr jW4345@e*) (cons (cons jW4395@lab jW4399@b) jW4346@r) (cons (cons jW4395@lab jW4399@b) jW4347@mr) jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?)))))))) (if (memv jW436f@t '(let-syntax letrec-syntax)) (let ((jW439b@t jW4359@e)) (let ((jW439d@ls/false (jW30fe@syntax-dispatch jW439b@t '(_ #(each (any any)) . each-any)))) (if (and jW439d@ls/false (apply (lambda (jW439f@xlhs* jW43a0@xrhs* jW43a1@xbody*) (if (not (jW2eff@valid-bound-ids? jW439f@xlhs*)) (jW31de@syntax-violation '#f '"invalid identifiers" jW4359@e) (void))) jW439d@ls/false)) (apply (lambda (jW43a5@xlhs* jW43a6@xrhs* jW43a7@xbody*) (let ((jW43ab@xlab* (map jW2e83@gen-label jW43a5@xlhs*))) (let ((jW43ad@xrib (jW2eb7@make-full-rib jW43a5@xlhs* jW43ab@xlab*))) (let ((jW43af@xb* (map (lambda (jW43b1@x) (jW2f2f@make-eval-transformer (jW3158@expand-transformer (if (eq? jW4369@type 'let-syntax) jW43b1@x (jW2ee1@add-subst jW43ad@xrib jW43b1@x)) jW4347@mr))) jW43a6@xrhs*))) (jW3156@chi-body* (append (map (lambda (jW43b3@x) (jW2ee1@add-subst jW43ad@xrib jW43b3@x)) jW43a7@xbody*) (cdr jW4345@e*)) (append (map cons jW43ab@xlab* jW43af@xb*) jW4346@r) (append (map cons jW43ab@xlab* jW43af@xb*) jW4347@mr) jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?))))) jW439d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW439b@t)))) (if (memv jW436f@t '(begin)) (let ((jW43b5@t jW4359@e)) (let ((jW43b7@ls/false (jW30fe@syntax-dispatch jW43b5@t '(_ . each-any)))) (if jW43b7@ls/false (apply (lambda (jW43b9@x*) (jW3156@chi-body* (append jW43b9@x* (cdr jW4345@e*)) jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?)) jW43b7@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW43b5@t)))) (if (memv jW436f@t '(global-macro global-macro!)) (jW3156@chi-body* (cons (jW311a@chi-global-macro jW4368@value jW4359@e jW434d@rib) (cdr jW4345@e*)) jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?) (if (memv jW436f@t '(local-macro local-macro!)) (jW3156@chi-body* (cons (jW3118@chi-local-macro jW4368@value jW4359@e jW434d@rib) (cdr jW4345@e*)) jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?) (if (memv jW436f@t '(macro macro!)) (jW3156@chi-body* (cons (jW3116@chi-macro jW4368@value jW4359@e jW434d@rib) (cdr jW4345@e*)) jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?) (if (memv jW436f@t '(module)) (call-with-values (lambda () (jW3154@chi-internal-module jW4359@e jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd*)) (lambda (jW43cb@jW43bc jW43cc@jW43be jW43cd@jW43c0 jW43ce@jW43c2 jW43cf@jW43c4 jW43d0@jW43c6 jW43d1@jW43c8 jW43d2@jW43ca) (let ((jW43db@kwd* jW43d2@jW43ca) (jW43dc@mod** jW43d1@jW43c8) (jW43dd@mr jW43d0@jW43c6) (jW43de@r jW43cf@jW43c4) (jW43df@m-exp-lab* jW43ce@jW43c2) (jW43e0@m-exp-id* jW43cd@jW43c0) (jW43e1@rhs* jW43cc@jW43be) (jW43e2@lex* jW43cb@jW43bc)) (begin (vector-for-each (lambda (jW43eb@id jW43ec@lab) (jW2ead@extend-rib! jW434d@rib jW43eb@id jW43ec@lab)) jW43e0@m-exp-id* jW43df@m-exp-lab*) (jW3156@chi-body* (cdr jW4345@e*) jW43de@r jW43dd@mr jW43e2@lex* jW43e1@rhs* jW43dc@mod** jW43db@kwd* jW434c@exp* jW434d@rib jW434e@top?))))) (if (memv jW436f@t '(library)) (begin (jW31c0@library-expander (jW2f0b@stx->datum jW4359@e)) (jW3156@chi-body* (cdr jW4345@e*) jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?)) (if (memv jW436f@t '(export)) (let ((jW43ef@t jW4359@e)) (let ((jW43f1@ls/false (jW30fe@syntax-dispatch jW43ef@t '(_ . each-any)))) (if jW43f1@ls/false (apply (lambda (jW43f3@exp-decl*) (jW3156@chi-body* (cdr jW4345@e*) jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* (append jW43f3@exp-decl* jW434c@exp*) jW434d@rib jW434e@top?)) jW43f1@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW43ef@t)))) (if (memv jW436f@t '(import)) (letrec* ((jW43f6@module-import? (lambda (jW4449@e) (let ((jW444b@t jW4449@e)) (let ((jW444d@ls/false (jW30fe@syntax-dispatch jW444b@t '(_ any)))) (if (and jW444d@ls/false (apply (lambda (jW444f@id) (jW2ef7@id? jW444f@id)) jW444d@ls/false)) (apply (lambda (jW4451@id) '#t) jW444d@ls/false) (let ((jW4453@t jW444b@t)) (let ((jW4455@ls/false (jW30fe@syntax-dispatch jW4453@t '(_ . each-any)))) (if jW4455@ls/false (apply (lambda (jW4457@imp*) '#f) jW4455@ls/false) (let ((jW4459@t jW4453@t)) (let ((jW445b@ls/false (jW30fe@syntax-dispatch jW4459@t '_))) (if jW445b@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"malformed import form" jW4449@e)) jW445b@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW4459@t)))))))))))) (jW43f8@module-import (lambda (jW4427@e jW4428@r) (let ((jW442b@t jW4427@e)) (let ((jW442d@ls/false (jW30fe@syntax-dispatch jW442b@t '(_ any)))) (if (and jW442d@ls/false (apply (lambda (jW442f@id) (jW2ef7@id? jW442f@id)) jW442d@ls/false)) (apply (lambda (jW4431@id) (call-with-values (lambda () (jW2f19@syntax-type jW4431@id jW4428@r)) (lambda (jW4439@jW4434 jW443a@jW4436 jW443b@jW4438) (let ((jW443f@kwd jW443b@jW4438) (jW4440@value jW443a@jW4436) (jW4441@type jW4439@jW4434)) (let ((jW4445@t jW4441@type)) (if (memv jW4445@t '($module)) (let ((jW4447@iface jW4440@value)) (values (jW3152@module-interface-exp-id* jW4447@iface jW4431@id) (jW314c@module-interface-exp-lab-vec jW4447@iface))) (jW31de@syntax-violation '#f '"invalid import" jW4427@e))))))) jW442d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW442b@t)))))) (jW43fa@library-import (lambda (jW440b@e) (let ((jW440d@t jW440b@e)) (let ((jW440f@ls/false (jW30fe@syntax-dispatch jW440d@t '(any . each-any)))) (if jW440f@ls/false (apply (lambda (jW4411@ctxt jW4412@imp*) (call-with-values (lambda () (jW3160@parse-import-spec* (jW31e4@syntax->datum jW4412@imp*))) (lambda (jW4419@jW4416 jW441a@jW4418) (let ((jW441d@subst-labels jW441a@jW4418) (jW441e@subst-names jW4419@jW4416)) (values (vector-map (lambda (jW4421@name) (jW2ed7@datum->stx jW4411@ctxt jW4421@name)) jW441e@subst-names) jW441d@subst-labels))))) jW440f@ls/false) (let ((jW4423@t jW440d@t)) (let ((jW4425@ls/false (jW30fe@syntax-dispatch jW4423@t '_))) (if jW4425@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid import form" jW440b@e)) jW4425@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW4423@t)))))))))) (begin (call-with-values (lambda () (if (jW43f6@module-import? jW4359@e) (jW43f8@module-import jW4359@e jW4346@r) (jW43fa@library-import jW4359@e))) (lambda (jW43ff@jW43fc jW4400@jW43fe) (let ((jW4403@lab* jW4400@jW43fe) (jW4404@id* jW43ff@jW43fc)) (vector-for-each (lambda (jW4407@id jW4408@lab) (jW2ead@extend-rib! jW434d@rib jW4407@id jW4408@lab)) jW4404@id* jW4403@lab*)))) (jW3156@chi-body* (cdr jW4345@e*) jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?))) (if jW434e@top? (jW3156@chi-body* (cdr jW4345@e*) jW4346@r jW4347@mr (cons (jW2e7f@gen-lexical 'dummy) jW4348@lex*) (cons (cons 'top-expr jW4359@e) jW4349@rhs*) jW434a@mod** jW436d@kwd* jW434c@exp* jW434d@rib jW434e@top?) (values jW4345@e* jW4346@r jW4347@mr jW4348@lex* jW4349@rhs* jW434a@mod** jW436d@kwd* jW434c@exp*)))))))))))))))))))))) (set! jW4c32@jW3156@chi-body* jW3156@chi-body*) (set! jW3158@expand-transformer (lambda (jW445d@expr jW445e@r) (let ((jW4461@rtc (jW3164@make-collector))) (let ((jW4463@expanded-rhs (let ((jW446d@jW4466 jW3166@inv-collector) (jW446e@jW4468 jW3168@vis-collector) (jW446f@jW446a jW4461@rtc) (jW4470@jW446c (lambda (jW4475@x) (values)))) (let ((jW4477@swap (lambda () (begin (let ((jW4479@t (jW446d@jW4466))) (begin (jW446d@jW4466 jW446f@jW446a) (set! jW446f@jW446a jW4479@t))) (let ((jW447b@t (jW446e@jW4468))) (begin (jW446e@jW4468 jW4470@jW446c) (set! jW4470@jW446c jW447b@t))))))) (dynamic-wind jW4477@swap (lambda () (jW3120@chi-expr jW445d@expr jW445e@r jW445e@r)) jW4477@swap))))) (begin (for-each (let ((jW447d@mark-visit (jW3168@vis-collector))) (lambda (jW447f@x) (begin (jW2d13@jW2b61@invoke-library jW447f@x) (jW447d@mark-visit jW447f@x)))) (jW4461@rtc)) jW4463@expanded-rhs))))) (set! jW4c33@jW3158@expand-transformer jW3158@expand-transformer) (set! jW315a@parse-exports (lambda (jW4481@exp*) (let jW4489@f ((jW4483@exp* jW4481@exp*) (jW4484@int* '()) (jW4485@ext* '())) (if (null? jW4483@exp*) (begin (if (not (jW2eff@valid-bound-ids? jW4485@ext*)) (jW31de@syntax-violation 'export '"invalid exports" (jW3134@find-dups jW4485@ext*)) (void)) (values (map jW31e4@syntax->datum jW4485@ext*) jW4484@int*)) (let ((jW448b@t (car jW4483@exp*))) (let ((jW448d@ls/false (jW30fe@syntax-dispatch jW448b@t '(any . #(each (any any)))))) (if jW448d@ls/false (apply (lambda (jW448f@rename jW4490@i* jW4491@e*) (begin (if (not (and (eq? (jW31e4@syntax->datum jW448f@rename) 'rename) (for-all jW2ef7@id? jW4490@i*) (for-all jW2ef7@id? jW4491@e*))) (jW31de@syntax-violation 'export '"invalid export specifier" (car jW4483@exp*)) (void)) (jW4489@f (cdr jW4483@exp*) (append jW4490@i* jW4484@int*) (append jW4491@e* jW4485@ext*)))) jW448d@ls/false) (let ((jW4495@t jW448b@t)) (let ((jW4497@ls/false (jW30fe@syntax-dispatch jW4495@t 'any))) (if jW4497@ls/false (apply (lambda (jW4499@ie) (begin (if (not (jW2ef7@id? jW4499@ie)) (jW31de@syntax-violation 'export '"invalid export" jW4499@ie) (void)) (jW4489@f (cdr jW4483@exp*) (cons jW4499@ie jW4484@int*) (cons jW4499@ie jW4485@ext*)))) jW4497@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW4495@t))))))))))) (set! jW4c34@jW315a@parse-exports jW315a@parse-exports) (set! jW315c@parse-library-name (lambda (jW449b@spec) (letrec* ((jW449e@parse (lambda (jW44ab@x) (let ((jW44ad@t jW44ab@x)) (let ((jW44af@ls/false (jW30fe@syntax-dispatch jW44ad@t '(each-any)))) (if (and jW44af@ls/false (apply (lambda (jW44b1@v*) (for-all (lambda (jW44b3@x) (let ((jW44b5@x (jW31e4@syntax->datum jW44b3@x))) (and (integer? jW44b5@x) (exact? jW44b5@x)))) jW44b1@v*)) jW44af@ls/false)) (apply (lambda (jW44b7@v*) (values '() (map jW31e4@syntax->datum jW44b7@v*))) jW44af@ls/false) (let ((jW44b9@t jW44ad@t)) (let ((jW44bb@ls/false (jW30fe@syntax-dispatch jW44b9@t '(any . any)))) (if (and jW44bb@ls/false (apply (lambda (jW44bd@x jW44be@rest) (symbol? (jW31e4@syntax->datum jW44bd@x))) jW44bb@ls/false)) (apply (lambda (jW44c1@x jW44c2@rest) (call-with-values (lambda () (jW449e@parse jW44c2@rest)) (lambda (jW44c9@jW44c6 jW44ca@jW44c8) (let ((jW44cd@v* jW44ca@jW44c8) (jW44ce@x* jW44c9@jW44c6)) (values (cons (jW31e4@syntax->datum jW44c1@x) jW44ce@x*) jW44cd@v*))))) jW44bb@ls/false) (let ((jW44d1@t jW44b9@t)) (let ((jW44d3@ls/false (jW30fe@syntax-dispatch jW44d1@t '()))) (if jW44d3@ls/false (apply (lambda () (values '() '())) jW44d3@ls/false) (let ((jW44d5@t jW44d1@t)) (let ((jW44d7@ls/false (jW30fe@syntax-dispatch jW44d5@t '_))) (if jW44d7@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid library name" jW449b@spec)) jW44d7@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW44d5@t)))))))))))))))) (call-with-values (lambda () (jW449e@parse jW449b@spec)) (lambda (jW44a3@jW44a0 jW44a4@jW44a2) (let ((jW44a7@ver* jW44a4@jW44a2) (jW44a8@name* jW44a3@jW44a0)) (begin (if (null? jW44a8@name*) (jW31de@syntax-violation '#f '"empty library name" jW449b@spec) (void)) (values jW44a8@name* jW44a7@ver*)))))))) (set! jW4c35@jW315c@parse-library-name jW315c@parse-library-name) (set! jW315e@parse-library (lambda (jW44d9@e) (let ((jW44db@t jW44d9@e)) (let ((jW44dd@ls/false (jW30fe@syntax-dispatch jW44db@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and jW44dd@ls/false (apply (lambda (jW44df@library jW44e0@name* jW44e1@export jW44e2@exp* jW44e3@import jW44e4@imp* jW44e5@b*) (and (eq? (jW31e4@syntax->datum jW44e1@export) 'export) (eq? (jW31e4@syntax->datum jW44e3@import) 'import) (eq? (jW31e4@syntax->datum jW44df@library) 'library))) jW44dd@ls/false)) (apply (lambda (jW44ed@library jW44ee@name* jW44ef@export jW44f0@exp* jW44f1@import jW44f2@imp* jW44f3@b*) (values jW44ee@name* jW44f0@exp* jW44f2@imp* jW44f3@b*)) jW44dd@ls/false) (let ((jW44fb@t jW44db@t)) (let ((jW44fd@ls/false (jW30fe@syntax-dispatch jW44fb@t '_))) (if jW44fd@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"malformed library" jW44d9@e)) jW44fd@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW44fb@t))))))))) (set! jW4c36@jW315e@parse-library jW315e@parse-library) (set! jW3160@parse-import-spec* (letrec* ((jW4500@idsyn? (lambda (jW4709@x) (symbol? (jW31e4@syntax->datum jW4709@x)))) (jW4502@dup-error (lambda (jW4707@name) (jW31de@syntax-violation 'import '"two imports with different bindings" jW4707@name))) (jW4504@merge-substs (lambda (jW46f5@s jW46f6@subst) (letrec* ((jW46fa@insert-to-subst (lambda (jW46fb@a jW46fc@subst) (let ((jW46ff@name (car jW46fb@a)) (jW4700@label (cdr jW46fb@a))) (let ((jW4703@t (assq jW46ff@name jW46fc@subst))) (if jW4703@t ((lambda (jW4705@x) (if (eq? (cdr jW4705@x) jW4700@label) jW46fc@subst (jW4502@dup-error jW46ff@name))) jW4703@t) (cons jW46fb@a jW46fc@subst))))))) (if (null? jW46f5@s) jW46f6@subst (jW46fa@insert-to-subst (car jW46f5@s) (jW4504@merge-substs (cdr jW46f5@s) jW46f6@subst)))))) (jW4506@exclude* (lambda (jW46c5@sym* jW46c6@subst) (letrec* ((jW46ca@exclude (lambda (jW46e3@sym jW46e4@subst) (if (null? jW46e4@subst) (jW31de@syntax-violation 'import '"cannot rename unbound identifier" jW46e3@sym) (if (eq? jW46e3@sym (caar jW46e4@subst)) (values (cdar jW46e4@subst) (cdr jW46e4@subst)) (let ((jW46e7@a (car jW46e4@subst))) (call-with-values (lambda () (jW46ca@exclude jW46e3@sym (cdr jW46e4@subst))) (lambda (jW46ed@jW46ea jW46ee@jW46ec) (let ((jW46f1@subst jW46ee@jW46ec) (jW46f2@old jW46ed@jW46ea)) (values jW46f2@old (cons jW46e7@a jW46f1@subst))))))))))) (if (null? jW46c5@sym*) (values '() jW46c6@subst) (call-with-values (lambda () (jW46ca@exclude (car jW46c5@sym*) jW46c6@subst)) (lambda (jW46cf@jW46cc jW46d0@jW46ce) (let ((jW46d3@subst jW46d0@jW46ce) (jW46d4@old jW46cf@jW46cc)) (call-with-values (lambda () (jW4506@exclude* (cdr jW46c5@sym*) jW46d3@subst)) (lambda (jW46db@jW46d8 jW46dc@jW46da) (let ((jW46df@subst jW46dc@jW46da) (jW46e0@old* jW46db@jW46d8)) (values (cons jW46d4@old jW46e0@old*) jW46df@subst))))))))))) (jW4508@find* (lambda (jW46bd@sym* jW46be@subst) (map (lambda (jW46c1@x) (let ((jW46c3@t (assq jW46c1@x jW46be@subst))) (if jW46c3@t (cdr jW46c3@t) (jW31de@syntax-violation 'import '"cannot find identifier" jW46c1@x)))) jW46bd@sym*))) (jW450a@rem* (lambda (jW46b5@sym* jW46b6@subst) (let jW46bb@f ((jW46b9@subst jW46b6@subst)) (if (null? jW46b9@subst) '() (if (memq (caar jW46b9@subst) jW46b5@sym*) (jW46bb@f (cdr jW46b9@subst)) (cons (car jW46b9@subst) (jW46bb@f (cdr jW46b9@subst)))))))) (jW450c@remove-dups (lambda (jW46b3@ls) (if (null? jW46b3@ls) '() (if (memq (car jW46b3@ls) (cdr jW46b3@ls)) (jW450c@remove-dups (cdr jW46b3@ls)) (cons (car jW46b3@ls) (jW450c@remove-dups (cdr jW46b3@ls))))))) (jW450e@parse-library-name (lambda (jW45cb@spec) (letrec* ((jW45ce@subversion? (lambda (jW46af@x) (let ((jW46b1@x (jW31e4@syntax->datum jW46af@x))) (and (integer? jW46b1@x) (exact? jW46b1@x) (>= jW46b1@x '0))))) (jW45d0@subversion-pred (lambda (jW464f@x*) (let ((jW4651@t jW464f@x*)) (let ((jW4653@ls/false (jW30fe@syntax-dispatch jW4651@t 'any))) (if (and jW4653@ls/false (apply (lambda (jW4655@n) (jW45ce@subversion? jW4655@n)) jW4653@ls/false)) (apply (lambda (jW4657@n) (lambda (jW4659@x) (= jW4659@x (jW31e4@syntax->datum jW4657@n)))) jW4653@ls/false) (let ((jW465b@t jW4651@t)) (let ((jW465d@ls/false (jW30fe@syntax-dispatch jW465b@t '(any . each-any)))) (if (and jW465d@ls/false (apply (lambda (jW465f@p? jW4660@sub*) (eq? (jW31e4@syntax->datum jW465f@p?) 'and)) jW465d@ls/false)) (apply (lambda (jW4663@p? jW4664@sub*) (let ((jW4667@p* (map jW45d0@subversion-pred jW4664@sub*))) (lambda (jW4669@x) (for-all (lambda (jW466b@p) (jW466b@p jW4669@x)) jW4667@p*)))) jW465d@ls/false) (let ((jW466d@t jW465b@t)) (let ((jW466f@ls/false (jW30fe@syntax-dispatch jW466d@t '(any . each-any)))) (if (and jW466f@ls/false (apply (lambda (jW4671@p? jW4672@sub*) (eq? (jW31e4@syntax->datum jW4671@p?) 'or)) jW466f@ls/false)) (apply (lambda (jW4675@p? jW4676@sub*) (let ((jW4679@p* (map jW45d0@subversion-pred jW4676@sub*))) (lambda (jW467b@x) (exists (lambda (jW467d@p) (jW467d@p jW467b@x)) jW4679@p*)))) jW466f@ls/false) (let ((jW467f@t jW466d@t)) (let ((jW4681@ls/false (jW30fe@syntax-dispatch jW467f@t '(any any)))) (if (and jW4681@ls/false (apply (lambda (jW4683@p? jW4684@sub) (eq? (jW31e4@syntax->datum jW4683@p?) 'not)) jW4681@ls/false)) (apply (lambda (jW4687@p? jW4688@sub) (let ((jW468b@p (jW45d0@subversion-pred jW4688@sub))) (lambda (jW468d@x) (not (jW468b@p jW468d@x))))) jW4681@ls/false) (let ((jW468f@t jW467f@t)) (let ((jW4691@ls/false (jW30fe@syntax-dispatch jW468f@t '(any any)))) (if (and jW4691@ls/false (apply (lambda (jW4693@p? jW4694@n) (and (eq? (jW31e4@syntax->datum jW4693@p?) '<=) (jW45ce@subversion? jW4694@n))) jW4691@ls/false)) (apply (lambda (jW4697@p? jW4698@n) (lambda (jW469b@x) (<= jW469b@x (jW31e4@syntax->datum jW4698@n)))) jW4691@ls/false) (let ((jW469d@t jW468f@t)) (let ((jW469f@ls/false (jW30fe@syntax-dispatch jW469d@t '(any any)))) (if (and jW469f@ls/false (apply (lambda (jW46a1@p? jW46a2@n) (and (eq? (jW31e4@syntax->datum jW46a1@p?) '>=) (jW45ce@subversion? jW46a2@n))) jW469f@ls/false)) (apply (lambda (jW46a5@p? jW46a6@n) (lambda (jW46a9@x) (>= jW46a9@x (jW31e4@syntax->datum jW46a6@n)))) jW469f@ls/false) (let ((jW46ab@t jW469d@t)) (let ((jW46ad@ls/false (jW30fe@syntax-dispatch jW46ab@t '_))) (if jW46ad@ls/false (apply (lambda () (jW31de@syntax-violation 'import '"invalid sub-version spec" jW45cb@spec jW464f@x*)) jW46ad@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW46ab@t)))))))))))))))))))))))) (jW45d2@version-pred (lambda (jW45ff@x*) (let ((jW4601@t jW45ff@x*)) (let ((jW4603@ls/false (jW30fe@syntax-dispatch jW4601@t '()))) (if jW4603@ls/false (apply (lambda () (lambda (jW4605@x) '#t)) jW4603@ls/false) (let ((jW4607@t jW4601@t)) (let ((jW4609@ls/false (jW30fe@syntax-dispatch jW4607@t '(any . each-any)))) (if (and jW4609@ls/false (apply (lambda (jW460b@c jW460c@ver*) (eq? (jW31e4@syntax->datum jW460b@c) 'and)) jW4609@ls/false)) (apply (lambda (jW460f@c jW4610@ver*) (let ((jW4613@p* (map jW45d2@version-pred jW4610@ver*))) (lambda (jW4615@x) (for-all (lambda (jW4617@p) (jW4617@p jW4615@x)) jW4613@p*)))) jW4609@ls/false) (let ((jW4619@t jW4607@t)) (let ((jW461b@ls/false (jW30fe@syntax-dispatch jW4619@t '(any . each-any)))) (if (and jW461b@ls/false (apply (lambda (jW461d@c jW461e@ver*) (eq? (jW31e4@syntax->datum jW461d@c) 'or)) jW461b@ls/false)) (apply (lambda (jW4621@c jW4622@ver*) (let ((jW4625@p* (map jW45d2@version-pred jW4622@ver*))) (lambda (jW4627@x) (exists (lambda (jW4629@p) (jW4629@p jW4627@x)) jW4625@p*)))) jW461b@ls/false) (let ((jW462b@t jW4619@t)) (let ((jW462d@ls/false (jW30fe@syntax-dispatch jW462b@t '(any any)))) (if (and jW462d@ls/false (apply (lambda (jW462f@c jW4630@ver) (eq? (jW31e4@syntax->datum jW462f@c) 'not)) jW462d@ls/false)) (apply (lambda (jW4633@c jW4634@ver) (let ((jW4637@p (jW45d2@version-pred jW4634@ver))) (lambda (jW4639@x) (not (jW4637@p jW4639@x))))) jW462d@ls/false) (let ((jW463b@t jW462b@t)) (let ((jW463d@ls/false (jW30fe@syntax-dispatch jW463b@t 'each-any))) (if jW463d@ls/false (apply (lambda (jW463f@sub*) (let ((jW4641@p* (map jW45d0@subversion-pred jW463f@sub*))) (lambda (jW4643@x) (let jW4649@f ((jW4645@p* jW4641@p*) (jW4646@x jW4643@x)) (if (null? jW4645@p*) '#t (if (null? jW4646@x) '#f (and ((car jW4645@p*) (car jW4646@x)) (jW4649@f (cdr jW4645@p*) (cdr jW4646@x))))))))) jW463d@ls/false) (let ((jW464b@t jW463b@t)) (let ((jW464d@ls/false (jW30fe@syntax-dispatch jW464b@t '_))) (if jW464d@ls/false (apply (lambda () (jW31de@syntax-violation 'import '"invalid version spec" jW45cb@spec jW45ff@x*)) jW464d@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW464b@t)))))))))))))))))))))) (let jW45d5@f ((jW45d3@x jW45cb@spec)) (let ((jW45d7@t jW45d3@x)) (let ((jW45d9@ls/false (jW30fe@syntax-dispatch jW45d7@t '(each-any)))) (if jW45d9@ls/false (apply (lambda (jW45db@version-spec*) (values '() (jW45d2@version-pred jW45db@version-spec*))) jW45d9@ls/false) (let ((jW45dd@t jW45d7@t)) (let ((jW45df@ls/false (jW30fe@syntax-dispatch jW45dd@t '(any . any)))) (if (and jW45df@ls/false (apply (lambda (jW45e1@x jW45e2@x*) (jW4500@idsyn? jW45e1@x)) jW45df@ls/false)) (apply (lambda (jW45e5@x jW45e6@x*) (call-with-values (lambda () (jW45d5@f jW45e6@x*)) (lambda (jW45ed@jW45ea jW45ee@jW45ec) (let ((jW45f1@pred jW45ee@jW45ec) (jW45f2@name jW45ed@jW45ea)) (values (cons (jW31e4@syntax->datum jW45e5@x) jW45f2@name) jW45f1@pred))))) jW45df@ls/false) (let ((jW45f5@t jW45dd@t)) (let ((jW45f7@ls/false (jW30fe@syntax-dispatch jW45f5@t '()))) (if jW45f7@ls/false (apply (lambda () (values '() (lambda (jW45f9@x) '#t))) jW45f7@ls/false) (let ((jW45fb@t jW45f5@t)) (let ((jW45fd@ls/false (jW30fe@syntax-dispatch jW45fb@t '_))) (if jW45fd@ls/false (apply (lambda () (jW31de@syntax-violation '#f '"invalid import spec" jW45cb@spec)) jW45fd@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW45fb@t))))))))))))))))) (jW4510@import-library (lambda (jW45bb@spec*) (call-with-values (lambda () (jW450e@parse-library-name jW45bb@spec*)) (lambda (jW45c1@jW45be jW45c2@jW45c0) (let ((jW45c5@pred jW45c2@jW45c0) (jW45c6@name jW45c1@jW45be)) (begin (if (null? jW45c6@name) (jW31de@syntax-violation 'import '"empty library name" jW45bb@spec*) (void)) (let ((jW45c9@lib (jW2d0c@jW2b53@find-library-by-name jW45c6@name))) (begin (if (not jW45c9@lib) (jW31de@syntax-violation 'import '"cannot find library with required name" jW45c6@name) (void)) (if (not (jW45c5@pred (jW2ce6@jW2b07@library-version jW45c9@lib))) (jW31de@syntax-violation 'import '"library does not satisfy version specification" jW45bb@spec* jW45c9@lib) (void)) ((jW316a@imp-collector) jW45c9@lib) (jW2cee@jW2b17@library-subst jW45c9@lib))))))))) (jW4512@get-import (lambda (jW452d@spec) (let ((jW452f@t jW452d@spec)) (let ((jW4531@ls/false (jW30fe@syntax-dispatch jW452f@t '(any . each-any)))) (if (and jW4531@ls/false (apply (lambda (jW4533@x jW4534@x*) (not (memq (jW31e4@syntax->datum jW4533@x) '(for rename except only prefix library)))) jW4531@ls/false)) (apply (lambda (jW4537@x jW4538@x*) (jW4510@import-library (cons jW4537@x jW4538@x*))) jW4531@ls/false) (let ((jW453b@t jW452f@t)) (let ((jW453d@ls/false (jW30fe@syntax-dispatch jW453b@t '(any any . #(each (any any)))))) (if (and jW453d@ls/false (apply (lambda (jW453f@rename jW4540@isp jW4541@old* jW4542@new*) (and (eq? (jW31e4@syntax->datum jW453f@rename) 'rename) (for-all jW4500@idsyn? jW4541@old*) (for-all jW4500@idsyn? jW4542@new*))) jW453d@ls/false)) (apply (lambda (jW4547@rename jW4548@isp jW4549@old* jW454a@new*) (let ((jW454f@subst (jW4512@get-import jW4548@isp)) (jW4550@old* (map jW31e4@syntax->datum jW4549@old*)) (jW4551@new* (map jW31e4@syntax->datum jW454a@new*))) (let ((jW4555@old-label* (jW4508@find* jW4550@old* jW454f@subst))) (let ((jW4557@subst (jW450a@rem* jW4550@old* jW454f@subst))) (jW4504@merge-substs (map cons jW4551@new* jW4555@old-label*) jW4557@subst))))) jW453d@ls/false) (let ((jW4559@t jW453b@t)) (let ((jW455b@ls/false (jW30fe@syntax-dispatch jW4559@t '(any any . each-any)))) (if (and jW455b@ls/false (apply (lambda (jW455d@except jW455e@isp jW455f@sym*) (and (eq? (jW31e4@syntax->datum jW455d@except) 'except) (for-all jW4500@idsyn? jW455f@sym*))) jW455b@ls/false)) (apply (lambda (jW4563@except jW4564@isp jW4565@sym*) (let ((jW4569@subst (jW4512@get-import jW4564@isp))) (jW450a@rem* (map jW31e4@syntax->datum jW4565@sym*) jW4569@subst))) jW455b@ls/false) (let ((jW456b@t jW4559@t)) (let ((jW456d@ls/false (jW30fe@syntax-dispatch jW456b@t '(any any . each-any)))) (if (and jW456d@ls/false (apply (lambda (jW456f@only jW4570@isp jW4571@sym*) (and (eq? (jW31e4@syntax->datum jW456f@only) 'only) (for-all jW4500@idsyn? jW4571@sym*))) jW456d@ls/false)) (apply (lambda (jW4575@only jW4576@isp jW4577@sym*) (let ((jW457b@subst (jW4512@get-import jW4576@isp)) (jW457c@sym* (map jW31e4@syntax->datum jW4577@sym*))) (let ((jW457f@sym* (jW450c@remove-dups jW457c@sym*))) (let ((jW4581@lab* (jW4508@find* jW457f@sym* jW457b@subst))) (map cons jW457f@sym* jW4581@lab*))))) jW456d@ls/false) (let ((jW4583@t jW456b@t)) (let ((jW4585@ls/false (jW30fe@syntax-dispatch jW4583@t '(any any any)))) (if (and jW4585@ls/false (apply (lambda (jW4587@prefix jW4588@isp jW4589@p) (and (eq? (jW31e4@syntax->datum jW4587@prefix) 'prefix) (jW4500@idsyn? jW4589@p))) jW4585@ls/false)) (apply (lambda (jW458d@prefix jW458e@isp jW458f@p) (let ((jW4593@subst (jW4512@get-import jW458e@isp)) (jW4594@prefix (symbol->string (jW31e4@syntax->datum jW458f@p)))) (map (lambda (jW4597@x) (cons (string->symbol (string-append jW4594@prefix (symbol->string (car jW4597@x)))) (cdr jW4597@x))) jW4593@subst))) jW4585@ls/false) (let ((jW4599@t jW4583@t)) (let ((jW459b@ls/false (jW30fe@syntax-dispatch jW4599@t '(any each-any)))) (if (and jW459b@ls/false (apply (lambda (jW459d@library jW459e@spec*) (eq? (jW31e4@syntax->datum jW459d@library) 'library)) jW459b@ls/false)) (apply (lambda (jW45a1@library jW45a2@spec*) (jW4510@import-library jW45a2@spec*)) jW459b@ls/false) (let ((jW45a5@t jW4599@t)) (let ((jW45a7@ls/false (jW30fe@syntax-dispatch jW45a5@t '(any any . any)))) (if (and jW45a7@ls/false (apply (lambda (jW45a9@for jW45aa@isp jW45ab@rest) (eq? (jW31e4@syntax->datum jW45a9@for) 'for)) jW45a7@ls/false)) (apply (lambda (jW45af@for jW45b0@isp jW45b1@rest) (jW4512@get-import jW45b0@isp)) jW45a7@ls/false) (let ((jW45b5@t jW45a5@t)) (let ((jW45b7@ls/false (jW30fe@syntax-dispatch jW45b5@t 'any))) (if jW45b7@ls/false (apply (lambda (jW45b9@spec) (jW31de@syntax-violation 'import '"invalid import spec" jW45b9@spec)) jW45b7@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW45b5@t))))))))))))))))))))))))))) (jW4514@add-imports! (lambda (jW451d@imp jW451e@h) (let ((jW4521@subst (jW4512@get-import jW451d@imp))) (for-each (lambda (jW4523@x) (let ((jW4525@name (car jW4523@x)) (jW4526@label (cdr jW4523@x))) (let ((jW4529@t (hashtable-ref jW451e@h jW4525@name '#f))) (if jW4529@t ((lambda (jW452b@l) (if (not (eq? jW452b@l jW4526@label)) (jW4502@dup-error jW4525@name) (void))) jW4529@t) (hashtable-set! jW451e@h jW4525@name jW4526@label))))) jW4521@subst))))) (lambda (jW4515@imp*) (let jW451b@f ((jW4517@imp* jW4515@imp*) (jW4518@h (make-eq-hashtable))) (if (null? jW4517@imp*) (hashtable-entries jW4518@h) (begin (jW4514@add-imports! (car jW4517@imp*) jW4518@h) (jW451b@f (cdr jW4517@imp*) jW4518@h))))))) (set! jW4c37@jW3160@parse-import-spec* jW3160@parse-import-spec*) (set! jW3162@make-top-rib (lambda (jW470b@names jW470c@labels) (let ((jW470f@rib (jW2eab@make-empty-rib))) (begin (vector-for-each (lambda (jW4711@name jW4712@label) (begin (if (not (symbol? jW4711@name)) (error 'make-top-rib '"BUG: not a symbol" jW4711@name) (void)) (jW2eaf@extend-rib/nc! jW470f@rib (make-simple-struct 'stx '5 (list jW4711@name jW2e7b@top-mark* '() '())) jW4712@label))) jW470b@names jW470c@labels) jW470f@rib)))) (set! jW4c38@jW3162@make-top-rib jW3162@make-top-rib) (set! jW3164@make-collector (lambda () (let ((jW4715@ls '())) (lambda jW4719 (let ((jW471a (length jW4719))) (if (= jW471a '0) (apply (lambda () jW4715@ls) jW4719) (if (= jW471a '1) (apply (lambda (jW4717@x) (set! jW4715@ls (jW2e74@set-cons jW4717@x jW4715@ls))) jW4719) (error 'apply '"invalid arg count")))))))) (set! jW4c39@jW3164@make-collector jW3164@make-collector) (set! jW3166@inv-collector (jW2a47@jW2925@make-parameter (lambda jW471b@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (jW471d@x) (begin (if (not (procedure? jW471d@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" jW471d@x) (void)) jW471d@x)))) (set! jW4c3a@jW3166@inv-collector jW3166@inv-collector) (set! jW3168@vis-collector (jW2a47@jW2925@make-parameter (lambda jW471f@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (jW4721@x) (begin (if (not (procedure? jW4721@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" jW4721@x) (void)) jW4721@x)))) (set! jW4c3b@jW3168@vis-collector jW3168@vis-collector) (set! jW316a@imp-collector (jW2a47@jW2925@make-parameter (lambda jW4723@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (jW4725@x) (begin (if (not (procedure? jW4725@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" jW4725@x) (void)) jW4725@x)))) (set! jW4c3c@jW316a@imp-collector jW316a@imp-collector) (set! jW316c@chi-library-internal (lambda (jW4727@e* jW4728@rib jW4729@top?) (call-with-values (lambda () (jW3156@chi-body* jW4727@e* '() '() '() '() '() '() '() jW4728@rib jW4729@top?)) (lambda (jW473d@jW472e jW473e@jW4730 jW473f@jW4732 jW4740@jW4734 jW4741@jW4736 jW4742@jW4738 jW4743@jW473a jW4744@jW473c) (let ((jW474d@exp* jW4744@jW473c) (jW474e@_kwd* jW4743@jW473a) (jW474f@mod** jW4742@jW4738) (jW4750@rhs* jW4741@jW4736) (jW4751@lex* jW4740@jW4734) (jW4752@mr jW473f@jW4732) (jW4753@r jW473e@jW4730) (jW4754@e* jW473d@jW472e)) (values (append (apply append (reverse jW474f@mod**)) jW4754@e*) jW4753@r jW4752@mr (reverse jW4751@lex*) (reverse jW4750@rhs*) jW474d@exp*)))))) (set! jW4c3d@jW316c@chi-library-internal jW316c@chi-library-internal) (set! jW316e@chi-interaction-expr (lambda (jW475d@e jW475e@rib jW475f@r) (call-with-values (lambda () (jW3156@chi-body* (list jW475d@e) jW475f@r jW475f@r '() '() '() '() '() jW475e@rib '#t)) (lambda (jW4773@jW4764 jW4774@jW4766 jW4775@jW4768 jW4776@jW476a jW4777@jW476c jW4778@jW476e jW4779@jW4770 jW477a@jW4772) (let ((jW4783@_exp* jW477a@jW4772) (jW4784@_kwd* jW4779@jW4770) (jW4785@mod** jW4778@jW476e) (jW4786@rhs* jW4777@jW476c) (jW4787@lex* jW4776@jW476a) (jW4788@mr jW4775@jW4768) (jW4789@r jW4774@jW4766) (jW478a@e* jW4773@jW4764)) (let ((jW4793@e* (jW312e@expand-interaction-rhs*/init* (reverse jW4787@lex*) (reverse jW4786@rhs*) (append (apply append (reverse jW4785@mod**)) jW478a@e*) jW4789@r jW4788@mr))) (let ((jW4795@e (if (null? jW4793@e*) (jW2e5d@jW2dbe@build-void) (if (null? (cdr jW4793@e*)) (car jW4793@e*) (jW2e5c@jW2dbc@build-sequence '#f jW4793@e*))))) (values jW4795@e jW4789@r)))))))) (set! jW4c3e@jW316e@chi-interaction-expr jW316e@chi-interaction-expr) (set! jW3170@library-body-expander (lambda (jW4797@name jW4798@main-exp* jW4799@imp* jW479a@b* jW479b@top?) (letrec* ((jW47a2@itc (jW3164@make-collector))) (let ((jW47ab@jW47a4 jW316a@imp-collector) (jW47ac@jW47a6 jW31ee@top-level-context) (jW47ad@jW47a8 jW47a2@itc) (jW47ae@jW47aa '#f)) (let ((jW47b3@swap (lambda () (begin (let ((jW47b5@t (jW47ab@jW47a4))) (begin (jW47ab@jW47a4 jW47ad@jW47a8) (set! jW47ad@jW47a8 jW47b5@t))) (let ((jW47b7@t (jW47ac@jW47a6))) (begin (jW47ac@jW47a6 jW47ae@jW47aa) (set! jW47ae@jW47aa jW47b7@t))))))) (dynamic-wind jW47b3@swap (lambda () (call-with-values (lambda () (jW3160@parse-import-spec* jW4799@imp*)) (lambda (jW47bd@jW47ba jW47be@jW47bc) (let ((jW47c1@subst-labels jW47be@jW47bc) (jW47c2@subst-names jW47bd@jW47ba)) (let ((jW47c5@rib (jW3162@make-top-rib jW47c2@subst-names jW47c1@subst-labels))) (letrec* ((jW47c8@wrap (lambda (jW4843@x) (make-simple-struct 'stx '5 (list jW4843@x jW2e7b@top-mark* (list jW47c5@rib) '()))))) (let ((jW47c9@b* (map jW47c8@wrap jW479a@b*)) (jW47ca@main-exp* (map jW47c8@wrap jW4798@main-exp*)) (jW47cb@rtc (jW3164@make-collector)) (jW47cc@vtc (jW3164@make-collector))) (let ((jW47d9@jW47d2 jW3166@inv-collector) (jW47da@jW47d4 jW3168@vis-collector) (jW47db@jW47d6 jW47cb@rtc) (jW47dc@jW47d8 jW47cc@vtc)) (let ((jW47e1@swap (lambda () (begin (let ((jW47e3@t (jW47d9@jW47d2))) (begin (jW47d9@jW47d2 jW47db@jW47d6) (set! jW47db@jW47d6 jW47e3@t))) (let ((jW47e5@t (jW47da@jW47d4))) (begin (jW47da@jW47d4 jW47dc@jW47d8) (set! jW47dc@jW47d8 jW47e5@t))))))) (dynamic-wind jW47e1@swap (lambda () (call-with-values (lambda () (jW316c@chi-library-internal jW47c9@b* jW47c5@rib jW479b@top?)) (lambda (jW47f3@jW47e8 jW47f4@jW47ea jW47f5@jW47ec jW47f6@jW47ee jW47f7@jW47f0 jW47f8@jW47f2) (let ((jW47ff@internal-exp* jW47f8@jW47f2) (jW4800@rhs* jW47f7@jW47f0) (jW4801@lex* jW47f6@jW47ee) (jW4802@mr jW47f5@jW47ec) (jW4803@r jW47f4@jW47ea) (jW4804@init* jW47f3@jW47e8)) (call-with-values (lambda () (jW315a@parse-exports (append jW47ca@main-exp* jW47ff@internal-exp*))) (lambda (jW480f@jW480c jW4810@jW480e) (let ((jW4813@exp-id* jW4810@jW480e) (jW4814@exp-name* jW480f@jW480c)) (begin (jW2eb3@seal-rib! jW47c5@rib) (let ((jW4817@init* (jW311c@chi-expr* jW4804@init* jW4803@r jW4802@mr))) (let ((jW4819@rhs* (jW3130@chi-rhs* jW4800@rhs* jW4803@r jW4802@mr))) (begin (jW2eb5@unseal-rib! jW47c5@rib) (let ((jW481b@loc* (map jW2e81@gen-global jW4801@lex*)) (jW481c@export-subst (jW31c8@make-export-subst jW4814@exp-name* jW4813@exp-id*))) (letrec* ((jW4820@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (jW31ca@make-export-env/macros jW4801@lex* jW481b@loc* jW4803@r)) (lambda (jW4827@jW4822 jW4828@jW4824 jW4829@jW4826) (let ((jW482d@macro* jW4829@jW4826) (jW482e@global* jW4828@jW4824) (jW482f@export-env jW4827@jW4822)) (begin (for-each (lambda (jW4833@s) (let ((jW4835@name (car jW4833@s)) (jW4836@label (cdr jW4833@s))) (let ((jW4839@p (assq jW4836@label jW482f@export-env))) (if jW4839@p (let ((jW483b@b (cdr jW4839@p))) (let ((jW483d@type (car jW483b@b))) (if (eq? jW483d@type 'mutable) (jW31de@syntax-violation 'export jW4820@errstr jW4835@name) (void)))) (void))))) jW481c@export-subst) (let ((jW483f@invoke-body (jW2e62@jW2dc8@build-library-letrec* '#f jW4797@name jW4801@lex* jW481b@loc* jW4819@rhs* (if (null? jW4817@init*) (jW2e5d@jW2dbe@build-void) (jW2e5c@jW2dbc@build-sequence '#f jW4817@init*)))) (jW4840@invoke-definitions (map jW2e59@jW2d1b@build-global-define (map cdr jW482e@global*)))) (values (jW47a2@itc) (jW47cb@rtc) (jW47cc@vtc) (jW2e5c@jW2dbc@build-sequence '#f (append jW4840@invoke-definitions (list jW483f@invoke-body))) jW482d@macro* jW481c@export-subst jW482f@export-env))))))))))))))))))) jW47e1@swap)))))))))) jW47b3@swap)))))) (set! jW4c3f@jW3170@library-body-expander jW3170@library-body-expander) (set! jW3172@core-library-expander (lambda (jW4845@e jW4846@verify-name) (call-with-values (lambda () (jW315e@parse-library jW4845@e)) (lambda (jW4851@jW484a jW4852@jW484c jW4853@jW484e jW4854@jW4850) (let ((jW4859@b* jW4854@jW4850) (jW485a@imp* jW4853@jW484e) (jW485b@exp* jW4852@jW484c) (jW485c@name* jW4851@jW484a)) (call-with-values (lambda () (jW315c@parse-library-name jW485c@name*)) (lambda (jW4865@jW4862 jW4866@jW4864) (let ((jW4869@ver jW4866@jW4864) (jW486a@name jW4865@jW4862)) (begin (jW4846@verify-name jW486a@name) (call-with-values (lambda () (jW3170@library-body-expander jW486a@name jW485b@exp* jW485a@imp* jW4859@b* '#f)) (lambda (jW487b@jW486e jW487c@jW4870 jW487d@jW4872 jW487e@jW4874 jW487f@jW4876 jW4880@jW4878 jW4881@jW487a) (let ((jW4889@export-env jW4881@jW487a) (jW488a@export-subst jW4880@jW4878) (jW488b@visit-code jW487f@jW4876) (jW488c@invoke-code jW487e@jW4874) (jW488d@visit-req* jW487d@jW4872) (jW488e@invoke-req* jW487c@jW4870) (jW488f@imp* jW487b@jW486e)) (values jW486a@name jW4869@ver jW488f@imp* jW488e@invoke-req* jW488d@visit-req* jW488c@invoke-code jW488b@visit-code jW488a@export-subst jW4889@export-env))))))))))))) (set! jW4c40@jW3172@core-library-expander jW3172@core-library-expander) (set! jW3174@parse-top-level-program (lambda (jW4897@e*) (let ((jW4899@t jW4897@e*)) (let ((jW489b@ls/false (jW30fe@syntax-dispatch jW4899@t '((any . each-any) . each-any)))) (if (and jW489b@ls/false (apply (lambda (jW489d@import jW489e@imp* jW489f@b*) (eq? (jW31e4@syntax->datum jW489d@import) 'import)) jW489b@ls/false)) (apply (lambda (jW48a3@import jW48a4@imp* jW48a5@b*) (values jW48a4@imp* jW48a5@b*)) jW489b@ls/false) (let ((jW48a9@t jW4899@t)) (let ((jW48ab@ls/false (jW30fe@syntax-dispatch jW48a9@t '((any . any) . any)))) (if (and jW48ab@ls/false (apply (lambda (jW48ad@import jW48ae@x jW48af@y) (eq? (jW31e4@syntax->datum jW48ad@import) 'import)) jW48ab@ls/false)) (apply (lambda (jW48b3@import jW48b4@x jW48b5@y) (jW31de@syntax-violation 'expander '"invalid syntax of top-level program" (jW2ef1@syntax-car jW4897@e*))) jW48ab@ls/false) (let ((jW48b9@t jW48a9@t)) (let ((jW48bb@ls/false (jW30fe@syntax-dispatch jW48b9@t '_))) (if jW48bb@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) jW48bb@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW48b9@t)))))))))))) (set! jW4c41@jW3174@parse-top-level-program jW3174@parse-top-level-program) (set! jW3176@top-level-expander (lambda (jW48bd@e*) (call-with-values (lambda () (jW3174@parse-top-level-program jW48bd@e*)) (lambda (jW48c3@jW48c0 jW48c4@jW48c2) (let ((jW48c7@b* jW48c4@jW48c2) (jW48c8@imp* jW48c3@jW48c0)) (call-with-values (lambda () (jW3170@library-body-expander '() '() jW48c8@imp* jW48c7@b* '#t)) (lambda (jW48d9@jW48cc jW48da@jW48ce jW48db@jW48d0 jW48dc@jW48d2 jW48dd@jW48d4 jW48de@jW48d6 jW48df@jW48d8) (let ((jW48e7@export-env jW48df@jW48d8) (jW48e8@export-subst jW48de@jW48d6) (jW48e9@visit-code jW48dd@jW48d4) (jW48ea@invoke-code jW48dc@jW48d2) (jW48eb@visit-req* jW48db@jW48d0) (jW48ec@invoke-req* jW48da@jW48ce) (jW48ed@imp* jW48d9@jW48cc)) (values jW48ec@invoke-req* jW48ea@invoke-code))))))))) (set! jW4c42@jW3176@top-level-expander jW3176@top-level-expander) (set! jW3178@rp (jW2a44@jW291f@make-record-printer 'env (lambda (jW48f5@x jW48f6@p jW48f7@wr) (display '"#<environment>" jW48f6@p)))) (set! jW4c43@jW3178@rp jW3178@rp) (set! jW3182@env? (lambda (jW48fb@x) (and (simple-struct? jW48fb@x) (eq? (simple-struct-name jW48fb@x) 'env)))) (set! jW4c44@jW3182@env? jW3182@env?) (set! jW3184@env-names (lambda (jW48fd@x) (simple-struct-ref jW48fd@x '0))) (set! jW4c45@jW3184@env-names jW3184@env-names) (set! jW3186@set-env-names! (lambda (jW48ff@x jW4900@val) (simple-struct-set! jW48ff@x '0 jW4900@val))) (set! jW4c46@jW3186@set-env-names! jW3186@set-env-names!) (set! jW3188@env-labels (lambda (jW4903@x) (simple-struct-ref jW4903@x '1))) (set! jW4c47@jW3188@env-labels jW3188@env-labels) (set! jW318a@set-env-labels! (lambda (jW4905@x jW4906@val) (simple-struct-set! jW4905@x '1 jW4906@val))) (set! jW4c48@jW318a@set-env-labels! jW318a@set-env-labels!) (set! jW318c@env-itc (lambda (jW4909@x) (simple-struct-ref jW4909@x '2))) (set! jW4c49@jW318c@env-itc jW318c@env-itc) (set! jW318e@set-env-itc! (lambda (jW490b@x jW490c@val) (simple-struct-set! jW490b@x '2 jW490c@val))) (set! jW4c4a@jW318e@set-env-itc! jW318e@set-env-itc!) (set! jW3190@dummy '3) (set! jW4c4b@jW3190@dummy jW3190@dummy) (set! jW3192@rp (jW2a44@jW291f@make-record-printer 'interaction-env (lambda (jW490f@x jW4910@p jW4911@wr) (display '"#<environment>" jW4910@p)))) (set! jW4c4c@jW3192@rp jW3192@rp) (set! jW319c@interaction-env? (lambda (jW4915@x) (and (simple-struct? jW4915@x) (eq? (simple-struct-name jW4915@x) 'interaction-env)))) (set! jW4c4d@jW319c@interaction-env? jW319c@interaction-env?) (set! jW319e@interaction-env-rib (lambda (jW4917@x) (simple-struct-ref jW4917@x '0))) (set! jW4c4e@jW319e@interaction-env-rib jW319e@interaction-env-rib) (set! jW31a0@set-interaction-env-rib! (lambda (jW4919@x jW491a@val) (simple-struct-set! jW4919@x '0 jW491a@val))) (set! jW4c4f@jW31a0@set-interaction-env-rib! jW31a0@set-interaction-env-rib!) (set! jW31a2@interaction-env-r (lambda (jW491d@x) (simple-struct-ref jW491d@x '1))) (set! jW4c50@jW31a2@interaction-env-r jW31a2@interaction-env-r) (set! jW31a4@set-interaction-env-r! (lambda (jW491f@x jW4920@val) (simple-struct-set! jW491f@x '1 jW4920@val))) (set! jW4c51@jW31a4@set-interaction-env-r! jW31a4@set-interaction-env-r!) (set! jW31a6@interaction-env-locs (lambda (jW4923@x) (simple-struct-ref jW4923@x '2))) (set! jW4c52@jW31a6@interaction-env-locs jW31a6@interaction-env-locs) (set! jW31a8@set-interaction-env-locs! (lambda (jW4925@x jW4926@val) (simple-struct-set! jW4925@x '2 jW4926@val))) (set! jW4c53@jW31a8@set-interaction-env-locs! jW31a8@set-interaction-env-locs!) (set! jW31aa@dummy '3) (set! jW4c54@jW31aa@dummy jW31aa@dummy) (set! jW31ac@interaction-environment-symbols (lambda () (jW31b4@environment-symbols (jW31ec@interaction-environment)))) (set! jW4c55@jW31ac@interaction-environment-symbols jW31ac@interaction-environment-symbols) (set! jW31ae@environment-bindings (lambda (jW4929@e) (vector->list (vector-map (lambda (jW492b@name jW492c@label) (jW31b0@parse-binding (cons jW492b@name (jW2d12@jW2b5f@imported-label->binding jW492c@label)))) (jW3184@env-names jW4929@e) (jW3188@env-labels jW4929@e))))) (set! jW4c56@jW31ae@environment-bindings jW31ae@environment-bindings) (set! jW31b0@parse-binding (lambda (jW492f@b) (cons (car jW492f@b) (let ((jW4931@t (cadr jW492f@b))) (if (memv jW4931@t '(core-prim global)) 'procedure (if (memv jW4931@t '(core-macro macro global-macro)) 'syntax (if (memv jW4931@t '($core-rtd)) 'record (if (eq? (car jW492f@b) (cadr jW492f@b)) 'syntax 'unknown)))))))) (set! jW4c57@jW31b0@parse-binding jW31b0@parse-binding) (set! jW31b2@environment? (lambda (jW4933@x) (or (jW3182@env? jW4933@x) (jW319c@interaction-env? jW4933@x)))) (set! jW4c58@jW31b2@environment? jW31b2@environment?) (set! jW31b4@environment-symbols (lambda (jW4935@x) (if (jW3182@env? jW4935@x) (vector->list (jW3184@env-names jW4935@x)) (if (jW319c@interaction-env? jW4935@x) (map values (jW2e95@rib-sym* (jW319e@interaction-env-rib jW4935@x))) (assertion-violation 'environment-symbols '"not an environment" jW4935@x))))) (set! jW4c59@jW31b4@environment-symbols jW31b4@environment-symbols) (set! jW31b6@environment (lambda jW4937@imp* (let ((jW4939@itc (jW3164@make-collector))) (let ((jW493f@jW493c jW316a@imp-collector) (jW4940@jW493e jW4939@itc)) (let ((jW4943@swap (lambda () (let ((jW4945@t (jW493f@jW493c))) (begin (jW493f@jW493c jW4940@jW493e) (set! jW4940@jW493e jW4945@t)))))) (dynamic-wind jW4943@swap (lambda () (call-with-values (lambda () (jW3160@parse-import-spec* jW4937@imp*)) (lambda (jW494b@jW4948 jW494c@jW494a) (let ((jW494f@subst-labels jW494c@jW494a) (jW4950@subst-names jW494b@jW4948)) (make-simple-struct 'env '4 (list jW4950@subst-names jW494f@subst-labels jW4939@itc)))))) jW4943@swap)))))) (set! jW4c5a@jW31b6@environment jW31b6@environment) (set! jW31b8@null-environment (lambda (jW4953@n) (begin (if (not (eqv? jW4953@n '5)) (assertion-violation 'null-environment '"not 5" jW4953@n) (void)) (jW31b6@environment '(psyntax null-environment-5))))) (set! jW4c5b@jW31b8@null-environment jW31b8@null-environment) (set! jW31ba@scheme-report-environment (lambda (jW4955@n) (begin (if (not (eqv? jW4955@n '5)) (assertion-violation 'scheme-report-environment '"not 5" jW4955@n) (void)) (jW31b6@environment '(psyntax scheme-report-environment-5))))) (set! jW4c5c@jW31ba@scheme-report-environment jW31ba@scheme-report-environment) (set! jW31bc@expand (lambda (jW4957@x jW4958@env) (if (jW3182@env? jW4958@env) (let ((jW495b@rib (jW3162@make-top-rib (jW3184@env-names jW4958@env) (jW3188@env-labels jW4958@env)))) (let ((jW495d@x (make-simple-struct 'stx '5 (list jW4957@x jW2e7b@top-mark* (list jW495b@rib) '()))) (jW495e@itc (jW318c@env-itc jW4958@env)) (jW495f@rtc (jW3164@make-collector)) (jW4960@vtc (jW3164@make-collector))) (let ((jW4965@x (let ((jW4977@jW4968 jW31ee@top-level-context) (jW4978@jW496a jW3166@inv-collector) (jW4979@jW496c jW3168@vis-collector) (jW497a@jW496e jW316a@imp-collector) (jW497b@jW4970 '#f) (jW497c@jW4972 jW495f@rtc) (jW497d@jW4974 jW4960@vtc) (jW497e@jW4976 jW495e@itc)) (let ((jW4987@swap (lambda () (begin (let ((jW4989@t (jW4977@jW4968))) (begin (jW4977@jW4968 jW497b@jW4970) (set! jW497b@jW4970 jW4989@t))) (let ((jW498b@t (jW4978@jW496a))) (begin (jW4978@jW496a jW497c@jW4972) (set! jW497c@jW4972 jW498b@t))) (let ((jW498d@t (jW4979@jW496c))) (begin (jW4979@jW496c jW497d@jW4974) (set! jW497d@jW4974 jW498d@t))) (let ((jW498f@t (jW497a@jW496e))) (begin (jW497a@jW496e jW497e@jW4976) (set! jW497e@jW4976 jW498f@t))))))) (dynamic-wind jW4987@swap (lambda () (jW3120@chi-expr jW495d@x '() '())) jW4987@swap))))) (begin (jW2eb3@seal-rib! jW495b@rib) (values jW4965@x (jW495f@rtc)))))) (if (jW319c@interaction-env? jW4958@env) (let ((jW4991@rib (jW319e@interaction-env-rib jW4958@env)) (jW4992@r (jW31a2@interaction-env-r jW4958@env)) (jW4993@rtc (jW3164@make-collector))) (let ((jW4997@x (make-simple-struct 'stx '5 (list jW4957@x jW2e7b@top-mark* (list jW4991@rib) '())))) (call-with-values (lambda () (let ((jW49ad@jW499e jW31ee@top-level-context) (jW49ae@jW49a0 jW3166@inv-collector) (jW49af@jW49a2 jW3168@vis-collector) (jW49b0@jW49a4 jW316a@imp-collector) (jW49b1@jW49a6 jW4958@env) (jW49b2@jW49a8 jW4993@rtc) (jW49b3@jW49aa (jW3164@make-collector)) (jW49b4@jW49ac (jW3164@make-collector))) (let ((jW49bd@swap (lambda () (begin (let ((jW49bf@t (jW49ad@jW499e))) (begin (jW49ad@jW499e jW49b1@jW49a6) (set! jW49b1@jW49a6 jW49bf@t))) (let ((jW49c1@t (jW49ae@jW49a0))) (begin (jW49ae@jW49a0 jW49b2@jW49a8) (set! jW49b2@jW49a8 jW49c1@t))) (let ((jW49c3@t (jW49af@jW49a2))) (begin (jW49af@jW49a2 jW49b3@jW49aa) (set! jW49b3@jW49aa jW49c3@t))) (let ((jW49c5@t (jW49b0@jW49a4))) (begin (jW49b0@jW49a4 jW49b4@jW49ac) (set! jW49b4@jW49ac jW49c5@t))))))) (dynamic-wind jW49bd@swap (lambda () (jW316e@chi-interaction-expr jW4997@x jW4991@rib jW4992@r)) jW49bd@swap)))) (lambda (jW49c7@jW499a jW49c8@jW499c) (let ((jW49cb@r^ jW49c8@jW499c) (jW49cc@e jW49c7@jW499a)) (begin (jW31a4@set-interaction-env-r! jW4958@env jW49cb@r^) (values jW49cc@e (jW4993@rtc)))))))) (assertion-violation 'expand '"not an environment" jW4958@env))))) (set! jW4c5d@jW31bc@expand jW31bc@expand) (set! jW31be@eval (lambda (jW49cf@x jW49d0@env) (begin (if (not (jW31b2@environment? jW49d0@env)) (error 'eval '"not an environment" jW49d0@env) (void)) (call-with-values (lambda () (jW31bc@expand jW49cf@x jW49d0@env)) (lambda (jW49d7@jW49d4 jW49d8@jW49d6) (let ((jW49db@invoke-req* jW49d8@jW49d6) (jW49dc@x jW49d7@jW49d4)) (begin (for-each jW2d13@jW2b61@invoke-library jW49db@invoke-req*) (eval-core (jW2a9d@jW2a55@expanded->core jW49dc@x))))))))) (set! jW4c5e@jW31be@eval jW31be@eval) (set! jW31c0@library-expander (lambda jW4a4d (let ((jW4a4e (length jW4a4d))) (if (= jW4a4e '3) (apply (lambda (jW49df@x jW49e0@filename jW49e1@verify-name) (letrec* ((jW49e6@build-visit-code (lambda (jW4a3b@macro*) (if (null? jW4a3b@macro*) (jW2e5d@jW2dbe@build-void) (jW2e5c@jW2dbc@build-sequence '#f (map (lambda (jW4a3d@x) (let ((jW4a3f@loc (car jW4a3d@x)) (jW4a40@src (cddr jW4a3d@x))) (list 'set! jW4a3f@loc jW4a40@src))) jW4a3b@macro*))))) (jW49e8@visit! (lambda (jW4a33@macro*) (for-each (lambda (jW4a35@x) (let ((jW4a37@loc (car jW4a35@x)) (jW4a38@proc (cadr jW4a35@x))) (set-symbol-value! jW4a37@loc jW4a38@proc))) jW4a33@macro*)))) (call-with-values (lambda () (jW3172@core-library-expander jW49df@x jW49e1@verify-name)) (lambda (jW49fb@jW49ea jW49fc@jW49ec jW49fd@jW49ee jW49fe@jW49f0 jW49ff@jW49f2 jW4a00@jW49f4 jW4a01@jW49f6 jW4a02@jW49f8 jW4a03@jW49fa) (let ((jW4a0d@export-env jW4a03@jW49fa) (jW4a0e@export-subst jW4a02@jW49f8) (jW4a0f@macro* jW4a01@jW49f6) (jW4a10@invoke-code jW4a00@jW49f4) (jW4a11@vis* jW49ff@jW49f2) (jW4a12@inv* jW49fe@jW49f0) (jW4a13@imp* jW49fd@jW49ee) (jW4a14@ver jW49fc@jW49ec) (jW4a15@name jW49fb@jW49ea)) (let ((jW4a1f@id (gensym)) (jW4a20@name jW4a15@name) (jW4a21@ver jW4a14@ver) (jW4a22@imp* (map jW2d17@jW2b69@library-spec jW4a13@imp*)) (jW4a23@vis* (map jW2d17@jW2b69@library-spec jW4a11@vis*)) (jW4a24@inv* (map jW2d17@jW2b69@library-spec jW4a12@inv*)) (jW4a25@visit-proc (lambda () (jW49e8@visit! jW4a0f@macro*))) (jW4a26@invoke-proc (lambda () (eval-core (jW2a9d@jW2a55@expanded->core jW4a10@invoke-code)))) (jW4a27@visit-code (jW49e6@build-visit-code jW4a0f@macro*)) (jW4a28@invoke-code jW4a10@invoke-code)) (begin (jW2d11@jW2b5d@install-library jW4a1f@id jW4a20@name jW4a21@ver jW4a22@imp* jW4a23@vis* jW4a24@inv* jW4a0e@export-subst jW4a0d@export-env jW4a25@visit-proc jW4a26@invoke-proc jW4a27@visit-code jW4a28@invoke-code '#t jW49e0@filename) (values jW4a1f@id jW4a20@name jW4a21@ver jW4a22@imp* jW4a23@vis* jW4a24@inv* jW4a28@invoke-code jW4a27@visit-code jW4a0e@export-subst jW4a0d@export-env)))))))) jW4a4d) (if (= jW4a4e '2) (apply (lambda (jW4a43@x jW4a44@filename) (jW31c0@library-expander jW4a43@x jW4a44@filename (lambda (jW4a47@x) (values)))) jW4a4d) (if (= jW4a4e '1) (apply (lambda (jW4a49@x) (jW31c0@library-expander jW4a49@x '#f (lambda (jW4a4b@x) (values)))) jW4a4d) (error 'apply '"invalid arg count"))))))) (set! jW4c5f@jW31c0@library-expander jW31c0@library-expander) (set! jW31c2@boot-library-expand (lambda (jW4a4f@x) (call-with-values (lambda () (jW31c0@library-expander jW4a4f@x)) (lambda (jW4a65@jW4a52 jW4a66@jW4a54 jW4a67@jW4a56 jW4a68@jW4a58 jW4a69@jW4a5a jW4a6a@jW4a5c jW4a6b@jW4a5e jW4a6c@jW4a60 jW4a6d@jW4a62 jW4a6e@jW4a64) (let ((jW4a79@export-env jW4a6e@jW4a64) (jW4a7a@export-subst jW4a6d@jW4a62) (jW4a7b@visit-code jW4a6c@jW4a60) (jW4a7c@invoke-code jW4a6b@jW4a5e) (jW4a7d@inv* jW4a6a@jW4a5c) (jW4a7e@vis* jW4a69@jW4a5a) (jW4a7f@imp* jW4a68@jW4a58) (jW4a80@ver jW4a67@jW4a56) (jW4a81@name jW4a66@jW4a54) (jW4a82@id jW4a65@jW4a52)) (values jW4a81@name jW4a7c@invoke-code jW4a7a@export-subst jW4a79@export-env)))))) (set! jW4c60@jW31c2@boot-library-expand jW31c2@boot-library-expand) (set! jW31c4@rev-map-append (lambda (jW4a8d@f jW4a8e@ls jW4a8f@ac) (if (null? jW4a8e@ls) jW4a8f@ac (jW31c4@rev-map-append jW4a8d@f (cdr jW4a8e@ls) (cons (jW4a8d@f (car jW4a8e@ls)) jW4a8f@ac))))) (set! jW4c61@jW31c4@rev-map-append jW31c4@rev-map-append) (set! jW31c6@build-exports (lambda (jW4a93@lex*+loc* jW4a94@init*) (jW2e5c@jW2dbc@build-sequence '#f (cons (jW2e5d@jW2dbe@build-void) (jW31c4@rev-map-append (lambda (jW4a97@x) (list 'set! (cdr jW4a97@x) (car jW4a97@x))) jW4a93@lex*+loc* jW4a94@init*))))) (set! jW4c62@jW31c6@build-exports jW31c6@build-exports) (set! jW31c8@make-export-subst (lambda (jW4a99@name* jW4a9a@id*) (map (lambda (jW4a9d@name jW4a9e@id) (let ((jW4aa1@label (jW2f0d@id->label jW4a9e@id))) (begin (if (not jW4aa1@label) (jW31de@syntax-violation '#f '"cannot export unbound identifier" jW4a9e@id) (void)) (cons jW4a9d@name jW4aa1@label)))) jW4a99@name* jW4a9a@id*))) (set! jW4c63@jW31c8@make-export-subst jW31c8@make-export-subst) (set! jW31ca@make-export-env/macros (lambda (jW4aa3@lex* jW4aa4@loc* jW4aa5@r) (letrec* ((jW4aaa@lookup (lambda (jW4ac7@x) (let jW4acf@f ((jW4ac9@x jW4ac7@x) (jW4aca@lex* jW4aa3@lex*) (jW4acb@loc* jW4aa4@loc*)) (if (pair? jW4aca@lex*) (if (eq? jW4ac9@x (car jW4aca@lex*)) (car jW4acb@loc*) (jW4acf@f jW4ac9@x (cdr jW4aca@lex*) (cdr jW4acb@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let jW4ab3@f ((jW4aab@r jW4aa5@r) (jW4aac@env '()) (jW4aad@global* '()) (jW4aae@macro* '())) (if (null? jW4aab@r) (values jW4aac@env jW4aad@global* jW4aae@macro*) (let ((jW4ab5@x (car jW4aab@r))) (let ((jW4ab7@label (car jW4ab5@x)) (jW4ab8@b (cdr jW4ab5@x))) (let ((jW4abb@t (jW2f13@binding-type jW4ab8@b))) (if (memv jW4abb@t '(lexical)) (let ((jW4abd@v (jW2f15@binding-value jW4ab8@b))) (let ((jW4abf@loc (jW4aaa@lookup (jW3088@lexical-var jW4abd@v))) (jW4ac0@type (if (jW308a@lexical-mutable? jW4abd@v) 'mutable 'global))) (jW4ab3@f (cdr jW4aab@r) (cons (cons* jW4ab7@label jW4ac0@type jW4abf@loc) jW4aac@env) (cons (cons (jW3088@lexical-var jW4abd@v) jW4abf@loc) jW4aad@global*) jW4aae@macro*))) (if (memv jW4abb@t '(local-macro)) (let ((jW4ac3@loc (gensym))) (jW4ab3@f (cdr jW4aab@r) (cons (cons* jW4ab7@label 'global-macro jW4ac3@loc) jW4aac@env) jW4aad@global* (cons (cons jW4ac3@loc (jW2f15@binding-value jW4ab8@b)) jW4aae@macro*))) (if (memv jW4abb@t '(local-macro!)) (let ((jW4ac5@loc (gensym))) (jW4ab3@f (cdr jW4aab@r) (cons (cons* jW4ab7@label 'global-macro! jW4ac5@loc) jW4aac@env) jW4aad@global* (cons (cons jW4ac5@loc (jW2f15@binding-value jW4ab8@b)) jW4aae@macro*))) (if (memv jW4abb@t '($rtd $module)) (jW4ab3@f (cdr jW4aab@r) (cons jW4ab5@x jW4aac@env) jW4aad@global* jW4aae@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (jW2f13@binding-type jW4ab8@b) (jW2f15@binding-value jW4ab8@b)))))))))))))) (set! jW4c64@jW31ca@make-export-env/macros jW31ca@make-export-env/macros) (set! jW31cc@generate-temporaries (lambda (jW4ad1@ls) (let ((jW4ad3@t jW4ad1@ls)) (let ((jW4ad5@ls/false (jW30fe@syntax-dispatch jW4ad3@t 'each-any))) (if jW4ad5@ls/false (apply (lambda (jW4ad7@ls) (map (lambda (jW4ad9@x) (make-simple-struct 'stx '5 (list (let ((jW4adb@x (jW31e4@syntax->datum jW4ad9@x))) (if (or (symbol? jW4adb@x) (string? jW4adb@x)) (gensym jW4adb@x) (gensym 't))) jW2e7b@top-mark* '() '()))) jW4ad7@ls)) jW4ad5@ls/false) (let ((jW4add@t jW4ad3@t)) (let ((jW4adf@ls/false (jW30fe@syntax-dispatch jW4add@t '_))) (if jW4adf@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) jW4adf@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW4add@t))))))))) (set! jW4c65@jW31cc@generate-temporaries jW31cc@generate-temporaries) (set! jW31ce@free-identifier=? (lambda (jW4ae1@x jW4ae2@y) (if (jW2ef7@id? jW4ae1@x) (if (jW2ef7@id? jW4ae2@y) (jW2efd@free-id=? jW4ae1@x jW4ae2@y) (assertion-violation 'free-identifier=? '"not an identifier" jW4ae2@y)) (assertion-violation 'free-identifier=? '"not an identifier" jW4ae1@x)))) (set! jW4c66@jW31ce@free-identifier=? jW31ce@free-identifier=?) (set! jW31d0@bound-identifier=? (lambda (jW4ae5@x jW4ae6@y) (if (jW2ef7@id? jW4ae5@x) (if (jW2ef7@id? jW4ae6@y) (jW2efb@bound-id=? jW4ae5@x jW4ae6@y) (assertion-violation 'bound-identifier=? '"not an identifier" jW4ae6@y)) (assertion-violation 'bound-identifier=? '"not an identifier" jW4ae5@x)))) (set! jW4c67@jW31d0@bound-identifier=? jW31d0@bound-identifier=?) (set! jW31d2@make-source-condition (lambda (jW4ae9@x) (letrec* ((jW4af3@jW4aee (make-record-type-descriptor '&source-information &condition-rtd 'jW4af1 '#f '#f '#((immutable file-name) (immutable line)))) (jW4af5@jW4af0 '#f) (jW4af7@jW4aef (make-record-constructor-descriptor jW4af3@jW4aee &condition-rcd jW4af5@jW4af0)) (jW4afa@jW4aed (record-predicate jW4af3@jW4aee)) (jW4afc@make-source-condition (record-constructor jW4af7@jW4aef)) (jW4afe@jW4aeb (record-accessor jW4af3@jW4aee '0)) (jW4b00@jW4aec (record-accessor jW4af3@jW4aee '1)) (jW4b02@source-condition? (condition-predicate jW4af3@jW4aee)) (jW4b04@source-filename (condition-accessor jW4af3@jW4aee jW4afe@jW4aeb)) (jW4b06@source-character (condition-accessor jW4af3@jW4aee jW4b00@jW4aec))) (if (and (pair? jW4ae9@x) (pair? (cdr jW4ae9@x))) (jW4afc@make-source-condition (car jW4ae9@x) (cadr jW4ae9@x)) (condition))))) (set! jW4c68@jW31d2@make-source-condition jW31d2@make-source-condition) (set! jW31d4@extract-position-condition (lambda (jW4b07@x) (jW31d2@make-source-condition (jW31d6@expression-position jW4b07@x)))) (set! jW4c69@jW31d4@extract-position-condition jW31d4@extract-position-condition) (set! jW31d6@expression-position (lambda (jW4b09@x) (and (jW2ec3@stx? jW4b09@x) (let ((jW4b0b@x (jW2ec5@stx-expr jW4b09@x))) (and (jW2a3b@jW290d@annotation? jW4b0b@x) (jW2a3c@jW290f@annotation-source jW4b0b@x)))))) (set! jW4c6a@jW31d6@expression-position jW31d6@expression-position) (set! jW31d8@assertion-error (lambda (jW4b0d@expr jW4b0e@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list jW4b0d@expr)) (jW31d2@make-source-condition jW4b0e@pos))))) (set! jW4c6b@jW31d8@assertion-error jW31d8@assertion-error) (set! jW31da@syntax-error (lambda (jW4b11@x . jW4b13@args) (begin (if (not (for-all string? jW4b13@args)) (assertion-violation 'syntax-error '"invalid argument" jW4b13@args) (void)) (raise (condition (make-message-condition (if (null? jW4b13@args) '"invalid syntax" (apply string-append jW4b13@args))) (make-syntax-violation (jW31e4@syntax->datum jW4b11@x) '#f) (jW31d4@extract-position-condition jW4b11@x)))))) (set! jW4c6c@jW31da@syntax-error jW31da@syntax-error) (set! jW31dc@syntax-violation* (lambda (jW4b15@who jW4b16@msg jW4b17@form jW4b18@condition-object) (begin (if (not (string? jW4b16@msg)) (assertion-violation 'syntax-violation '"message is not a string" jW4b16@msg) (void)) (let ((jW4b1d@who (if (or (string? jW4b15@who) (symbol? jW4b15@who)) jW4b15@who (if (not jW4b15@who) (let ((jW4b1f@t jW4b17@form)) (let ((jW4b21@ls/false (jW30fe@syntax-dispatch jW4b1f@t 'any))) (if (and jW4b21@ls/false (apply (lambda (jW4b23@id) (jW2ef7@id? jW4b23@id)) jW4b21@ls/false)) (apply (lambda (jW4b25@id) (jW31e4@syntax->datum jW4b25@id)) jW4b21@ls/false) (let ((jW4b27@t jW4b1f@t)) (let ((jW4b29@ls/false (jW30fe@syntax-dispatch jW4b27@t '(any . any)))) (if (and jW4b29@ls/false (apply (lambda (jW4b2b@id jW4b2c@rest) (jW2ef7@id? jW4b2b@id)) jW4b29@ls/false)) (apply (lambda (jW4b2f@id jW4b30@rest) (jW31e4@syntax->datum jW4b2f@id)) jW4b29@ls/false) (let ((jW4b33@t jW4b27@t)) (let ((jW4b35@ls/false (jW30fe@syntax-dispatch jW4b33@t '_))) (if jW4b35@ls/false (apply (lambda () '#f) jW4b35@ls/false) (jW31de@syntax-violation '#f '"invalid syntax" jW4b33@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" jW4b15@who))))) (raise (condition (if jW4b1d@who (make-who-condition jW4b1d@who) (condition)) (make-message-condition jW4b16@msg) jW4b18@condition-object (jW31d4@extract-position-condition jW4b17@form))))))) (set! jW4c6d@jW31dc@syntax-violation* jW31dc@syntax-violation*) (set! jW31de@syntax-violation (lambda jW4b45 (let ((jW4b46 (length jW4b45))) (if (= jW4b46 '3) (apply (lambda (jW4b37@who jW4b38@msg jW4b39@form) (jW31de@syntax-violation jW4b37@who jW4b38@msg jW4b39@form '#f)) jW4b45) (if (= jW4b46 '4) (apply (lambda (jW4b3d@who jW4b3e@msg jW4b3f@form jW4b40@subform) (jW31dc@syntax-violation* jW4b3d@who jW4b3e@msg jW4b3f@form (make-syntax-violation (jW31e4@syntax->datum jW4b3f@form) (jW31e4@syntax->datum jW4b40@subform)))) jW4b45) (error 'apply '"invalid arg count")))))) (set! jW4c6e@jW31de@syntax-violation jW31de@syntax-violation) (set! jW31e0@identifier? (lambda (jW4b47@x) (jW2ef7@id? jW4b47@x))) (set! jW4c6f@jW31e0@identifier? jW31e0@identifier?) (set! jW31e2@datum->syntax (lambda (jW4b49@id jW4b4a@datum) (if (jW2ef7@id? jW4b49@id) (jW2ed7@datum->stx jW4b49@id jW4b4a@datum) (assertion-violation 'datum->syntax '"not an identifier" jW4b49@id)))) (set! jW4c70@jW31e2@datum->syntax jW31e2@datum->syntax) (set! jW31e4@syntax->datum (lambda (jW4b4d@x) (jW2f0b@stx->datum jW4b4d@x))) (set! jW4c71@jW31e4@syntax->datum jW31e4@syntax->datum) (set! jW31e6@ungensym-all (lambda (jW4b4f@code) (if (pair? jW4b4f@code) (cons (jW31e6@ungensym-all (car jW4b4f@code)) (jW31e6@ungensym-all (cdr jW4b4f@code))) (if (symbol? jW4b4f@code) (ungensym jW4b4f@code) jW4b4f@code)))) (set! jW4c72@jW31e6@ungensym-all jW31e6@ungensym-all) (set! jW31e8@compile-r6rs-top-level (lambda (jW4b51@x*) (call-with-values (lambda () (jW3176@top-level-expander jW4b51@x*)) (lambda (jW4b57@jW4b54 jW4b58@jW4b56) (let ((jW4b5b@invoke-code jW4b58@jW4b56) (jW4b5c@lib* jW4b57@jW4b54)) (lambda () (begin (for-each jW2d13@jW2b61@invoke-library jW4b5c@lib*) (let ((jW4b5f@expanded (jW2a9d@jW2a55@expanded->core jW4b5b@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (jW31e6@ungensym-all jW4b5f@expanded)) (void)) (eval-core jW4b5f@expanded)))))))))) (set! jW4c73@jW31e8@compile-r6rs-top-level jW31e8@compile-r6rs-top-level) (set! jW31ea@pre-compile-r6rs-top-level (lambda (jW4b61@x*) (call-with-values (lambda () (jW3176@top-level-expander jW4b61@x*)) (lambda (jW4b67@jW4b64 jW4b68@jW4b66) (let ((jW4b6b@invoke-code jW4b68@jW4b66) (jW4b6c@lib* jW4b67@jW4b64)) (begin (for-each jW2d13@jW2b61@invoke-library jW4b6c@lib*) (jW2a45@jW2921@compile-core (jW2a9d@jW2a55@expanded->core jW4b6b@invoke-code)))))))) (set! jW4c74@jW31ea@pre-compile-r6rs-top-level jW31ea@pre-compile-r6rs-top-level) (set! jW31ec@interaction-environment (let ((jW4b6f@the-env '#f)) (lambda () (or jW4b6f@the-env (let ((jW4b71@lib (jW2d0c@jW2b53@find-library-by-name '(mosh interaction))) (jW4b72@rib (jW2eab@make-empty-rib))) (begin (let ((jW4b75@subst (jW2cee@jW2b17@library-subst jW4b71@lib))) (begin (jW2e97@set-rib-sym*! jW4b72@rib (map car jW4b75@subst)) (jW2e9b@set-rib-mark**! jW4b72@rib (map (lambda (jW4b77@x) jW2e7b@top-mark*) jW4b75@subst)) (jW2e9f@set-rib-label*! jW4b72@rib (map cdr jW4b75@subst)))) (let ((jW4b79@env (make-simple-struct 'interaction-env '4 (list jW4b72@rib '() '())))) (begin (set! jW4b6f@the-env jW4b79@env) jW4b79@env)))))))) (set! jW4c75@jW31ec@interaction-environment jW31ec@interaction-environment) (set! jW31ee@top-level-context (jW2a47@jW2925@make-parameter '#f)) (set! jW4c76@jW31ee@top-level-context jW31ee@top-level-context) (jW2d09@jW2b4d@current-library-expander jW31c0@library-expander))
(begin (begin (jW2a9a@jW2a4f@current-primitive-locations (lambda (jW51d1@x) (let ((jW51d3@t (assq jW51d1@x '((syntax-error . jW4c6c@jW31da@syntax-error) (syntax-dispatch . jW4c0a@jW30fe@syntax-dispatch) (load . jW4df6@jW4c9d@load) (interaction-environment . jW4c75@jW31ec@interaction-environment) (library-path . jW2d01@jW2b3d@library-path) (mosh-cache-dir . jW2a48@jW2927@mosh-cache-dir) (make-parameter . jW2a47@jW2925@make-parameter) (make-variable-transformer . jW4bc7@jW2f29@make-variable-transformer) (identifier? . jW4c6f@jW31e0@identifier?) (generate-temporaries . jW4c65@jW31cc@generate-temporaries) (free-identifier=? . jW4c66@jW31ce@free-identifier=?) (syntax->datum . jW4c71@jW31e4@syntax->datum) (datum->syntax . jW4c70@jW31e2@datum->syntax) (bound-identifier=? . jW4c67@jW31d0@bound-identifier=?) (scheme-report-environment . jW4c5c@jW31ba@scheme-report-environment) (null-environment . jW4c5b@jW31b8@null-environment) (command-line . jW4df3@jW4c97@command-line) (eval . jW4c5e@jW31be@eval) (environment . jW4c5a@jW31b6@environment) (syntax-violation . jW4c6e@jW31de@syntax-violation) (assertion-error . jW4c6b@jW31d8@assertion-error))))) (if jW51d3@t (cdr jW51d3@t) '#f)))) (jW2d11@jW2b5d@install-library 'jW51ae '(mosh interaction) '() '() '() '() '((regexp? . jW516e) (alist->eq-hash-table . jW516a) (format . jW5167) (string-split . jW5157) (%call-process . jW5150) (set-current-directory! . jW514c) (expand-path . jW514b) (current-directory . jW514a) (%getpid . jW5149) (%spawn . jW5148) (%waitpid . jW5147) (simple-struct-name . jW5146) (simple-struct-set! . jW5145) (simple-struct-ref . jW5144) (make-simple-struct . jW5143) (simple-struct? . jW5142) (pointer-ref-c-int64 . jW5141) (pointer-ref-c-int32 . jW5140) (pointer-ref-c-int16 . jW513f) (pointer-ref-c-int8 . jW513e) (pointer-ref-c-uint64 . jW513d) (pointer-ref-c-uint32 . jW513c) (pointer-ref-c-uint16 . jW513b) (pointer-ref-c-uint8 . jW513a) (pointer-set-c-uint64! . jW5139) (pointer-set-c-uint32! . jW5138) (pointer-set-c-uint16! . jW5137) (pointer-set-c-uint8! . jW5136) (pointer-set-c-int64! . jW5135) (pointer-set-c-int32! . jW5134) (pointer-set-c-int16! . jW5133) (pointer-set-c-int8! . jW5132) (pointer-set-c-pointer! . jW5131) (pointer-set-c-double! . jW5130) (pointer-set-c-float! . jW512f) (pointer-set-c-long-long! . jW512e) (pointer-set-c-long! . jW512d) (pointer-set-c-int! . jW512c) (pointer-set-c-short! . jW512b) (pointer-set-c-char! . jW512a) (pointer-ref-c-pointer . jW5129) (pointer-ref-c-double . jW5128) (pointer-ref-c-float . jW5127) (pointer-ref-c-unsigned-long-long . jW5126) (pointer-ref-c-signed-long-long . jW5125) (pointer-ref-c-unsigned-long . jW5124) (pointer-ref-c-signed-long . jW5123) (pointer-ref-c-unsigned-int . jW5122) (pointer-ref-c-signed-int . jW5121) (pointer-ref-c-unsigned-short . jW5120) (pointer-ref-c-signed-short . jW511f) (pointer-ref-c-unsigned-char . jW511e) (pointer-ref-c-signed-char . jW511d) (pointer->integer . jW511c) (integer->pointer . jW511b) (pointer? . jW511a) (shared-errno . jW5119) (%ffi-supported? . jW5114) (%ffi-pointer->string . jW5113) (%ffi-call . jW5112) (%ffi-lookup . jW5111) (%ffi-open . jW5110) (null-terminated-utf8->string . jW510f) (null-terminated-bytevector->string . jW510e) (%exec . jW510d) (%fork . jW510c) (%pipe . jW510b) (p . jW510a) (whereis . jW50ee) (register . jW50ed) (vm-join! . jW50ec) (vm-set-value! . jW50eb) (vm? . jW50ea) (main-vm? . jW50e9) (vm-eval . jW50e8) (vm-self . jW50e7) (vm-start! . jW50e6) (make-vm . jW50e5) (mutex-try-lock! . jW50e4) (mutex-unlock! . jW50e3) (mutex-lock! . jW50e2) (mutex? . jW50e1) (make-mutex . jW50e0) (condition-variable-notify-all! . jW50df) (condition-variable-notify! . jW50de) (condition-variable-wait! . jW50dd) (make-condition-variable . jW50dc) (write/ss . jW50db) (string-upcase . jW50be) (string-titlecase . jW50bd) (string-normalize-nfkd . jW50bc) (string-normalize-nfkc . jW50bb) (string-normalize-nfd . jW50ba) (string-normalize-nfc . jW50b9) (string-foldcase . jW50b8) (string-downcase . jW50b7) (string-ci>? . jW50b6) (string-ci>=? . jW50b5) (string-ci=? . jW50b4) (string-ci<? . jW50b3) (string-ci<=? . jW50b2) (char-whitespace? . jW50b1) (char-upper-case? . jW50b0) (char-title-case? . jW50af) (char-numeric? . jW50ae) (char-lower-case? . jW50ad) (char-general-category . jW50ac) (char-upcase . jW50ab) (char-titlecase . jW50aa) (char-foldcase . jW50a9) (char-downcase . jW50a8) (char-ci>? . jW50a7) (char-ci>=? . jW50a6) (char-ci=? . jW50a5) (char-ci<? . jW50a4) (char-ci<=? . jW50a3) (char-alphabetic? . jW50a2) (make-variable-transformer . jW2f28) (identifier? . jW31df) (generate-temporaries . jW31cb) (free-identifier=? . jW31cd) (syntax->datum . jW31e3) (datum->syntax . jW31e1) (bound-identifier=? . jW31cf) (record-type-descriptor? . jW50a1) (record-predicate . jW50a0) (record-mutator . jW509f) (record-constructor . jW509e) (record-accessor . jW509d) (make-record-type-descriptor . jW509c) (make-record-constructor-descriptor . jW509b) (record? . jW509a) (record-type-uid . jW5099) (record-type-sealed? . jW5098) (record-type-parent . jW5097) (record-type-opaque? . jW5096) (record-type-name . jW5095) (record-type-generative? . jW5094) (record-type-field-names . jW5093) (record-rtd . jW5092) (record-field-mutable? . jW5091) (delete-file . jW5090) (file-exists? . jW508f) (vector-sort! . jW508e) (vector-sort . jW508d) (list-sort . jW508c) (symbol-hash . jW508b) (string-ci-hash . jW508a) (string-hash . jW5089) (equal-hash . jW5088) (hashtable-equivalence-function . jW5087) (make-hashtable . jW5086) (hashtable-hash-function . jW5085) (make-eqv-hashtable . jW5084) (make-eq-hashtable . jW5083) (hashtable? . jW5082) (hashtable-update! . jW5081) (hashtable-size . jW5080) (hashtable-set! . jW507f) (hashtable-ref . jW507e) (hashtable-mutable? . jW507d) (hashtable-keys . jW507c) (hashtable-entries . jW507b) (hashtable-delete! . jW507a) (hashtable-copy . jW5079) (hashtable-contains? . jW5078) (hashtable-clear! . jW5077) (call-with-output-file . jW5076) (call-with-input-file . jW5075) (write-char . jW5074) (write . jW5073) (with-output-to-file . jW5072) (with-input-from-file . jW5071) (read-char . jW5070) (read . jW506f) (peek-char . jW506e) (open-output-file . jW506d) (open-input-file . jW506c) (newline . jW506b) (display . jW506a) (close-output-port . jW5069) (close-input-port . jW5068) (eof-object? . jW5067) (eof-object . jW5066) (current-error-port . jW5065) (current-output-port . jW5064) (current-input-port . jW5063) (output-port? . jW5062) (input-port? . jW5061) (utf-8-codec . jW5060) (utf-16-codec . jW505f) (transcoder-error-handling-mode . jW505e) (transcoder-eol-style . jW505d) (transcoder-codec . jW505c) (transcoded-port . jW505b) (textual-port? . jW505a) (string->bytevector . jW5059) (standard-output-port . jW5058) (standard-input-port . jW5057) (standard-error-port . jW5056) (set-port-position! . jW5055) (put-u8 . jW5054) (put-string . jW5053) (put-datum . jW5052) (put-char . jW5051) (put-bytevector . jW5050) (port? . jW504f) (port-transcoder . jW504e) (port-position . jW504d) (port-has-set-port-position!? . jW504c) (port-has-port-position? . jW504b) (port-eof? . jW504a) (output-port-buffer-mode . jW5049) (open-string-output-port . jW5048) (open-string-input-port . jW5047) (open-file-output-port . jW5046) (open-file-input/output-port . jW5045) (open-file-input-port . jW5044) (open-bytevector-output-port . jW5043) (open-bytevector-input-port . jW5042) (native-transcoder . jW5041) (native-eol-style . jW5040) (make-transcoder . jW503f) (latin-1-codec . jW503e) (make-i/o-write-error . jW503d) (make-i/o-read-error . jW503c) (make-i/o-port-error . jW503b) (make-i/o-invalid-position-error . jW503a) (make-i/o-filename-error . jW5039) (make-i/o-file-protection-error . jW5038) (make-i/o-file-is-read-only-error . jW5037) (make-i/o-file-does-not-exist-error . jW5036) (make-i/o-file-already-exists-error . jW5035) (make-i/o-error . jW5034) (make-i/o-encoding-error . jW5033) (make-i/o-decoding-error . jW5032) (make-custom-textual-output-port . jW5031) (make-custom-textual-input/output-port . jW5030) (make-custom-textual-input-port . jW502f) (make-custom-binary-output-port . jW502e) (make-custom-binary-input/output-port . jW502d) (make-custom-binary-input-port . jW502c) (make-bytevector . jW502b) (lookahead-u8 . jW502a) (lookahead-char . jW5029) (i/o-write-error? . jW5028) (i/o-read-error? . jW5027) (i/o-port-error? . jW5026) (i/o-invalid-position-error? . jW5025) (i/o-filename-error? . jW5024) (i/o-file-protection-error? . jW5023) (i/o-file-is-read-only-error? . jW5022) (i/o-file-does-not-exist-error? . jW5021) (i/o-file-already-exists-error? . jW5020) (i/o-error? . jW501f) (i/o-error-position . jW501e) (i/o-error-port . jW501d) (i/o-error-filename . jW501c) (i/o-encoding-error? . jW501b) (i/o-encoding-error-char . jW501a) (i/o-decoding-error? . jW5019) (get-u8 . jW5018) (get-string-n! . jW5017) (get-string-n . jW5016) (get-string-all . jW5015) (get-line . jW5014) (get-datum . jW5013) (get-char . jW5012) (get-bytevector-some . jW5011) (get-bytevector-n! . jW5010) (get-bytevector-n . jW500f) (get-bytevector-all . jW500e) (flush-output-port . jW500d) (close-port . jW500c) (exit . jW5004) (command-line . jW4c96) (string-fill! . jW5003) (string-set! . jW5002) (set-cdr! . jW5001) (set-car! . jW5000) (remove . jW4fff) (remv . jW4ffe) (remp . jW4ffd) (remq . jW4ffc) (partition . jW4ffb) (memv . jW4ffa) (memq . jW4ff9) (memp . jW4ff8) (member . jW4ff7) (exists . jW4ff6) (for-all . jW4ff5) (fold-right . jW4ff4) (fold-left . jW4ff3) (find . jW4ff2) (filter . jW4ff1) (cons* . jW4ff0) (assv . jW4fef) (assq . jW4fee) (assp . jW4fed) (assoc . jW4fec) (call-with-string-output-port . jW4feb) (call-with-port . jW4fea) (call-with-bytevector-output-port . jW4fe9) (bytevector->string . jW4fe8) (buffer-mode? . jW4fe7) (binary-port? . jW4fe6) (with-exception-handler . jW4fe5) (raise-continuable . jW4fe4) (raise . jW4fe3) (eval . jW31bd) (environment . jW31b5) (make-enumeration . jW4fe2) (enum-set=? . jW4fe1) (enum-set-universe . jW4fe0) (enum-set-union . jW4fdf) (enum-set-subset? . jW4fde) (enum-set-projection . jW4fdd) (enum-set-member? . jW4fdc) (enum-set-intersection . jW4fdb) (enum-set-indexer . jW4fda) (enum-set-difference . jW4fd9) (enum-set-constructor . jW4fd8) (enum-set-complement . jW4fd7) (enum-set->list . jW4fd6) (who-condition? . jW4fd5) (warning? . jW4fd4) (violation? . jW4fd3) (undefined-violation? . jW4fd2) (syntax-violation? . jW4fd1) (syntax-violation-subform . jW4fd0) (syntax-violation-form . jW4fcf) (syntax-violation . jW31dd) (simple-conditions . jW4fce) (serious-condition? . jW4fcd) (non-continuable-violation? . jW4fcc) (message-condition? . jW4fcb) (make-who-condition . jW4fca) (make-warning . jW4fc9) (make-violation . jW4fc8) (make-undefined-violation . jW4fc7) (make-syntax-violation . jW4fc6) (make-serious-condition . jW4fc5) (make-non-continuable-violation . jW4fc4) (make-message-condition . jW4fc3) (make-lexical-violation . jW4fc2) (make-irritants-condition . jW4fc1) (make-implementation-restriction-violation . jW4fc0) (make-error . jW4fbf) (make-assertion-violation . jW4fbe) (lexical-violation? . jW4fbd) (irritants-condition? . jW4fbc) (implementation-restriction-violation? . jW4fbb) (error? . jW4fba) (condition-who . jW4fb9) (condition-predicate . jW4fb8) (condition-message . jW4fb7) (condition-irritants . jW4fb6) (condition-accessor . jW4fb5) (condition . jW4fb4) (assertion-violation? . jW4fb3) (condition? . jW4fb2) (utf32->string . jW4fb1) (utf16->string . jW4fb0) (utf8->string . jW4faf) (uint-list->bytevector . jW4fae) (u8-list->bytevector . jW4fad) (string->utf8 . jW4fac) (string->utf32 . jW4fab) (string->utf16 . jW4faa) (sint-list->bytevector . jW4fa9) (native-endianness . jW4fa8) (bytevector? . jW4fa7) (bytevector=? . jW4fa6) (bytevector-uint-set! . jW4fa5) (bytevector-uint-ref . jW4fa4) (bytevector-u8-set! . jW4fa3) (bytevector-u8-ref . jW4fa2) (bytevector-u64-set! . jW4fa1) (bytevector-u64-ref . jW4fa0) (bytevector-u64-native-set! . jW4f9f) (bytevector-u64-native-ref . jW4f9e) (bytevector-u32-set! . jW4f9d) (bytevector-u32-ref . jW4f9c) (bytevector-u32-native-set! . jW4f9b) (bytevector-u32-native-ref . jW4f9a) (bytevector-u16-set! . jW4f99) (bytevector-u16-ref . jW4f98) (bytevector-u16-native-set! . jW4f97) (bytevector-u16-native-ref . jW4f96) (bytevector-sint-set! . jW4f95) (bytevector-sint-ref . jW4f94) (bytevector-s8-set! . jW4f93) (bytevector-s8-ref . jW4f92) (bytevector-s64-set! . jW4f91) (bytevector-s64-ref . jW4f90) (bytevector-s64-native-set! . jW4f8f) (bytevector-s64-native-ref . jW4f8e) (bytevector-s32-set! . jW4f8d) (bytevector-s32-ref . jW4f8c) (bytevector-s32-native-set! . jW4f8b) (bytevector-s32-native-ref . jW4f8a) (bytevector-s16-set! . jW4f89) (bytevector-s16-ref . jW4f88) (bytevector-s16-native-set! . jW4f87) (bytevector-s16-native-ref . jW4f86) (bytevector-length . jW4f85) (bytevector-ieee-single-ref . jW4f84) (bytevector-ieee-single-set! . jW4f83) (bytevector-ieee-single-native-set! . jW4f82) (bytevector-ieee-single-native-ref . jW4f81) (bytevector-ieee-double-set! . jW4f80) (bytevector-ieee-double-ref . jW4f7f) (bytevector-ieee-double-native-set! . jW4f7e) (bytevector-ieee-double-native-ref . jW4f7d) (bytevector-fill! . jW4f7c) (bytevector-copy! . jW4f7b) (bytevector-copy . jW4f7a) (bytevector->uint-list . jW4f79) (bytevector->u8-list . jW4f78) (bytevector->sint-list . jW4f77) (no-nans-violation? . jW4f76) (no-infinities-violation? . jW4f75) (make-no-nans-violation . jW4f74) (make-no-infinities-violation . jW4f73) (real->flonum . jW4f72) (flzero? . jW4f71) (fltruncate . jW4f70) (fltan . jW4f6f) (flsqrt . jW4f6e) (flsin . jW4f6d) (flround . jW4f6c) (flpositive? . jW4f6b) (flonum? . jW4f6a) (flodd? . jW4f69) (flnumerator . jW4f68) (flnegative? . jW4f67) (flnan? . jW4f66) (flmod0 . jW4f65) (flmod . jW4f64) (flmin . jW4f63) (flmax . jW4f62) (fllog . jW4f61) (flinteger? . jW4f60) (flinfinite? . jW4f5f) (flfloor . jW4f5e) (flfinite? . jW4f5d) (flexpt . jW4f5c) (flexp . jW4f5b) (fleven? . jW4f5a) (fldiv0-and-mod0 . jW4f59) (fldiv0 . jW4f58) (fldiv-and-mod . jW4f57) (fldiv . jW4f56) (fldenominator . jW4f55) (flcos . jW4f54) (flceiling . jW4f53) (flatan . jW4f52) (flasin . jW4f51) (flacos . jW4f50) (flabs . jW4f4f) (fl>? . jW4f4e) (fl>=? . jW4f4d) (fl=? . jW4f4c) (fl<? . jW4f4b) (fl<=? . jW4f4a) (fl/ . jW4f49) (fl- . jW4f48) (fl+ . jW4f47) (fl* . jW4f46) (fixnum->flonum . jW4f45) (fxzero? . jW4f44) (fxxor . jW4f43) (fxrotate-bit-field . jW4f42) (fxreverse-bit-field . jW4f41) (fxpositive? . jW4f40) (fxodd? . jW4f3f) (fxnot . jW4f3e) (fxnegative? . jW4f3d) (fxmod0 . jW4f3c) (fxmod . jW4f3b) (fxmin . jW4f3a) (fxmax . jW4f39) (fxlength . jW4f38) (fxior . jW4f37) (fxif . jW4f36) (fxfirst-bit-set . jW4f35) (fxeven? . jW4f34) (fxdiv0-and-mod0 . jW4f33) (fxdiv0 . jW4f32) (fxdiv-and-mod . jW4f31) (fxdiv . jW4f30) (fxcopy-bit-field . jW4f2f) (fxcopy-bit . jW4f2e) (fxbit-set? . jW4f2d) (fxbit-field . jW4f2c) (fxbit-count . jW4f2b) (fxarithmetic-shift-right . jW4f2a) (fxarithmetic-shift-left . jW4f29) (fxarithmetic-shift . jW4f28) (fxand . jW4f27) (fx>? . jW4f26) (fx>=? . jW4f25) (fx=? . jW4f24) (fx<? . jW4f23) (fx<=? . jW4f22) (fx-/carry . jW4f21) (fx- . jW4f20) (fx+/carry . jW4f1f) (fx+ . jW4f1e) (fx*/carry . jW4f1d) (fx* . jW4f1c) (greatest-fixnum . jW4f1b) (least-fixnum . jW4f1a) (fixnum-width . jW4f19) (fixnum? . jW4f18) (bitwise-rotate-bit-field . jW4f17) (bitwise-reverse-bit-field . jW4f16) (bitwise-length . jW4f15) (bitwise-if . jW4f14) (bitwise-first-bit-set . jW4f13) (bitwise-copy-bit-field . jW4f12) (bitwise-copy-bit . jW4f11) (bitwise-bit-set? . jW4f10) (bitwise-bit-field . jW4f0f) (bitwise-bit-count . jW4f0e) (bitwise-xor . jW4f0d) (bitwise-ior . jW4f0c) (bitwise-and . jW4f0b) (bitwise-not . jW4f0a) (bitwise-arithmetic-shift-right . jW4f09) (bitwise-arithmetic-shift-left . jW4f08) (bitwise-arithmetic-shift . jW4f07) (zero? . jW4f06) (vector? . jW4f05) (vector-set! . jW4f04) (vector-ref . jW4f03) (vector-map . jW4f02) (vector-length . jW4f01) (vector-for-each . jW4f00) (vector-fill! . jW4eff) (vector->list . jW4efe) (vector . jW4efd) (values . jW4efc) (truncate . jW4efb) (tan . jW4efa) (symbol? . jW4ef9) (symbol=? . jW4ef8) (symbol->string . jW4ef7) (substring . jW4ef6) (string? . jW4ef5) (string>? . jW4ef4) (string>=? . jW4ef3) (string=? . jW4ef2) (string<? . jW4ef1) (string<=? . jW4ef0) (string-ref . jW4eef) (string-length . jW4eee) (string-for-each . jW4eed) (string-copy . jW4eec) (string-append . jW4eeb) (string->symbol . jW4eea) (string->number . jW4ee9) (string->list . jW4ee8) (string . jW4ee7) (sqrt . jW4ee6) (sin . jW4ee5) (round . jW4ee4) (reverse . jW4ee3) (real? . jW4ee2) (real-valued? . jW4ee1) (real-part . jW4ee0) (rationalize . jW4edf) (rational? . jW4ede) (rational-valued? . jW4edd) (procedure? . jW4edc) (positive? . jW4edb) (pair? . jW4eda) (odd? . jW4ed9) (numerator . jW4ed8) (number? . jW4ed7) (number->string . jW4ed6) (null? . jW4ed5) (not . jW4ed4) (negative? . jW4ed3) (nan? . jW4ed2) (min . jW4ed1) (max . jW4ed0) (map . jW4ecf) (make-vector . jW4ece) (make-string . jW4ecd) (make-rectangular . jW4ecc) (make-polar . jW4ecb) (magnitude . jW4eca) (log . jW4ec9) (list? . jW4ec8) (list-tail . jW4ec7) (list-ref . jW4ec6) (list->vector . jW4ec5) (list->string . jW4ec4) (list . jW4ec3) (length . jW4ec2) (lcm . jW4ec1) (integer? . jW4ec0) (integer-valued? . jW4ebf) (integer->char . jW4ebe) (infinite? . jW4ebd) (inexact? . jW4ebc) (inexact . jW4ebb) (imag-part . jW4eba) (gcd . jW4eb9) (for-each . jW4eb8) (floor . jW4eb7) (finite? . jW4eb6) (expt . jW4eb5) (exp . jW4eb4) (exact? . jW4eb3) (exact-integer-sqrt . jW4eb2) (exact . jW4eb1) (even? . jW4eb0) (error . jW4eaf) (eqv? . jW4eae) (equal? . jW4ead) (eq? . jW4eac) (dynamic-wind . jW4eab) (div0-and-mod0 . jW4eaa) (mod0 . jW4ea9) (div0 . jW4ea8) (div-and-mod . jW4ea7) (mod . jW4ea6) (div . jW4ea5) (denominator . jW4ea4) (cos . jW4ea3) (cons . jW4ea2) (complex? . jW4ea1) (char? . jW4ea0) (char>? . jW4e9f) (char>=? . jW4e9e) (char=? . jW4e9d) (char<? . jW4e9c) (char<=? . jW4e9b) (char->integer . jW4e9a) (ceiling . jW4e99) (call-with-values . jW4e98) (call/cc . jW4e97) (call-with-current-continuation . jW4e96) (cddddr . jW4e95) (cdddar . jW4e94) (cddadr . jW4e93) (cddaar . jW4e92) (cdaddr . jW4e91) (cdadar . jW4e90) (cdaadr . jW4e8f) (cdaaar . jW4e8e) (cadddr . jW4e8d) (caddar . jW4e8c) (cadadr . jW4e8b) (cadaar . jW4e8a) (caaddr . jW4e89) (caadar . jW4e88) (caaadr . jW4e87) (caaaar . jW4e86) (cdddr . jW4e85) (cddar . jW4e84) (cdadr . jW4e83) (cdaar . jW4e82) (caddr . jW4e81) (cadar . jW4e80) (caadr . jW4e7f) (caaar . jW4e7e) (cddr . jW4e7d) (cdar . jW4e7c) (cadr . jW4e7b) (caar . jW4e7a) (cdr . jW4e79) (car . jW4e78) (boolean? . jW4e77) (boolean=? . jW4e76) (atan . jW4e75) (assertion-violation . jW4e74) (asin . jW4e73) (apply . jW4e72) (append . jW4e71) (angle . jW4e70) (acos . jW4e6f) (abs . jW4e6e) (/ . jW4e6d) (* . jW4e6c) (- . jW4e6b) (+ . jW4e6a) (>= . jW4e69) (> . jW4e68) (= . jW4e67) (<= . jW4e66) (< . jW4e65) (library . jW4e64) (&no-nans . jW4e63) (&no-infinities . jW4e62) (&i/o-encoding . jW4e61) (&i/o-decoding . jW4e60) (&i/o-port . jW4e5f) (&i/o-file-does-not-exist . jW4e5e) (&i/o-file-already-exists . jW4e5d) (&i/o-file-is-read-only . jW4e5c) (&i/o-file-protection . jW4e5b) (&i/o-filename . jW4e5a) (&i/o-invalid-position . jW4e59) (&i/o-write . jW4e58) (&i/o-read . jW4e57) (&i/o . jW4e56) (&undefined . jW4e55) (&syntax . jW4e54) (&lexical . jW4e53) (&implementation-restriction . jW4e52) (&non-continuable . jW4e51) (&who . jW4e50) (&irritants . jW4e4f) (&assertion . jW4e4e) (&violation . jW4e4d) (&error . jW4e4c) (&serious . jW4e4b) (&warning . jW4e4a) (&message . jW4e49) (&condition . jW4e48) (define-condition-type . jW4e47) (define-enumeration . jW4e46) (define-record-type . jW4e45) (parent-rtd . jW4e44) (nongenerative . jW4e43) (opaque . jW4e42) (sealed . jW4e41) (protocol . jW4e40) (parent . jW4e3f) (immutable . jW4e3e) (mutable . jW4e3d) (fields . jW4e3c) (error-handling-mode . jW4e3b) (file-options . jW4e3a) (buffer-mode . jW4e39) (eol-style . jW4e38) (guard . jW4e37) (unsyntax-splicing . jW4e34) (unsyntax . jW4e33) (unquote-splicing . jW4e32) (unquote . jW4e31) (_ . jW4e30) (else . jW4e2f) (=> . jW4e2e) (... . jW4e2d) (assert . jW4e2c) (endianness . jW4e2b) (time . jW4e29) (do . jW4e28) (cond . jW4e27) (let* . jW4e26) (let*-values . jW4e25) (let-values . jW4e24) (identifier-syntax . jW4e23) (with-syntax . jW4e22) (quasisyntax . jW4e21) (quasiquote . jW4e20) (syntax-rules . jW4e1f) (include . jW4e1e) (record-constructor-descriptor . jW4e1c) (record-type-descriptor . jW4e1b) (case . jW4e1a) (unless . jW4e18) (when . jW4e17) (or . jW4e16) (and . jW4e15) (if . jW4e14) (let . jW4e13) (letrec* . jW4e12) (letrec . jW4e11) (case-lambda . jW4e0f) (lambda . jW4e0e) (syntax . jW4e0d) (syntax-case . jW4e0c) (quote . jW4e0b) (letrec-syntax . jW4e09) (let-syntax . jW4e08) (set! . jW4e07) (import . jW4e06) (begin . jW4e05) (define-syntax . jW4e03) (define . jW4e02)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51af '(psyntax null-environment-5) '() '() '() '() '((make-promise . jW5005) (unquote-splicing . jW4e32) (unquote . jW4e31) (_ . jW4e30) (else . jW4e2f) (=> . jW4e2e) (... . jW4e2d) (delay . jW4e2a) (do . jW4e28) (cond . jW4e27) (let* . jW4e26) (quasiquote . jW4e20) (syntax-rules . jW4e1f) (case . jW4e1a) (or . jW4e16) (and . jW4e15) (if . jW4e14) (let . jW4e13) (letrec . jW4e11) (lambda . jW4e0e) (quote . jW4e0b) (letrec-syntax . jW4e09) (let-syntax . jW4e08) (set! . jW4e07) (begin . jW4e05) (define-syntax . jW4e03) (define . jW4e02)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b0 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . jW50b6) (string-ci>=? . jW50b5) (string-ci=? . jW50b4) (string-ci<? . jW50b3) (string-ci<=? . jW50b2) (char-whitespace? . jW50b1) (char-upper-case? . jW50b0) (char-numeric? . jW50ae) (char-lower-case? . jW50ad) (char-upcase . jW50ab) (char-downcase . jW50a8) (char-ci>? . jW50a7) (char-ci>=? . jW50a6) (char-ci=? . jW50a5) (char-ci<? . jW50a4) (char-ci<=? . jW50a3) (char-alphabetic? . jW50a2) (call-with-output-file . jW5076) (call-with-input-file . jW5075) (write-char . jW5074) (write . jW5073) (with-output-to-file . jW5072) (with-input-from-file . jW5071) (read-char . jW5070) (read . jW506f) (peek-char . jW506e) (open-output-file . jW506d) (open-input-file . jW506c) (newline . jW506b) (display . jW506a) (close-output-port . jW5069) (close-input-port . jW5068) (eof-object . jW5066) (current-output-port . jW5064) (current-input-port . jW5063) (output-port? . jW5062) (input-port? . jW5061) (scheme-report-environment . jW31b9) (quotient . jW500b) (null-environment . jW31b7) (remainder . jW500a) (modulo . jW5009) (inexact->exact . jW5008) (force . jW5007) (exact->inexact . jW5006) (make-promise . jW5005) (string-fill! . jW5003) (string-set! . jW5002) (set-cdr! . jW5001) (set-car! . jW5000) (memv . jW4ffa) (memq . jW4ff9) (member . jW4ff7) (assv . jW4fef) (assq . jW4fee) (assoc . jW4fec) (eval . jW31bd) (zero? . jW4f06) (vector? . jW4f05) (vector-set! . jW4f04) (vector-ref . jW4f03) (vector-length . jW4f01) (vector-fill! . jW4eff) (vector->list . jW4efe) (vector . jW4efd) (values . jW4efc) (truncate . jW4efb) (tan . jW4efa) (symbol? . jW4ef9) (symbol->string . jW4ef7) (substring . jW4ef6) (string? . jW4ef5) (string>? . jW4ef4) (string>=? . jW4ef3) (string=? . jW4ef2) (string<? . jW4ef1) (string<=? . jW4ef0) (string-ref . jW4eef) (string-length . jW4eee) (string-copy . jW4eec) (string-append . jW4eeb) (string->symbol . jW4eea) (string->number . jW4ee9) (string->list . jW4ee8) (string . jW4ee7) (sqrt . jW4ee6) (sin . jW4ee5) (round . jW4ee4) (reverse . jW4ee3) (real? . jW4ee2) (real-part . jW4ee0) (rationalize . jW4edf) (rational? . jW4ede) (procedure? . jW4edc) (positive? . jW4edb) (pair? . jW4eda) (odd? . jW4ed9) (numerator . jW4ed8) (number? . jW4ed7) (number->string . jW4ed6) (not . jW4ed4) (negative? . jW4ed3) (min . jW4ed1) (max . jW4ed0) (map . jW4ecf) (make-vector . jW4ece) (make-string . jW4ecd) (make-rectangular . jW4ecc) (make-polar . jW4ecb) (magnitude . jW4eca) (log . jW4ec9) (list? . jW4ec8) (list-tail . jW4ec7) (list-ref . jW4ec6) (list->vector . jW4ec5) (list->string . jW4ec4) (list . jW4ec3) (length . jW4ec2) (lcm . jW4ec1) (integer? . jW4ec0) (integer->char . jW4ebe) (inexact? . jW4ebc) (imag-part . jW4eba) (gcd . jW4eb9) (for-each . jW4eb8) (floor . jW4eb7) (expt . jW4eb5) (exp . jW4eb4) (exact? . jW4eb3) (even? . jW4eb0) (eqv? . jW4eae) (equal? . jW4ead) (eq? . jW4eac) (dynamic-wind . jW4eab) (denominator . jW4ea4) (cos . jW4ea3) (cons . jW4ea2) (complex? . jW4ea1) (char? . jW4ea0) (char>? . jW4e9f) (char>=? . jW4e9e) (char=? . jW4e9d) (char<? . jW4e9c) (char<=? . jW4e9b) (char->integer . jW4e9a) (ceiling . jW4e99) (call-with-values . jW4e98) (call-with-current-continuation . jW4e96) (cddddr . jW4e95) (cdddar . jW4e94) (cddadr . jW4e93) (cddaar . jW4e92) (cdaddr . jW4e91) (cdadar . jW4e90) (cdaadr . jW4e8f) (cdaaar . jW4e8e) (cadddr . jW4e8d) (caddar . jW4e8c) (cadadr . jW4e8b) (cadaar . jW4e8a) (caaddr . jW4e89) (caadar . jW4e88) (caaadr . jW4e87) (caaaar . jW4e86) (cdddr . jW4e85) (cddar . jW4e84) (cdadr . jW4e83) (cdaar . jW4e82) (caddr . jW4e81) (cadar . jW4e80) (caadr . jW4e7f) (caaar . jW4e7e) (cddr . jW4e7d) (cdar . jW4e7c) (cadr . jW4e7b) (caar . jW4e7a) (cdr . jW4e79) (car . jW4e78) (boolean? . jW4e77) (atan . jW4e75) (asin . jW4e73) (apply . jW4e72) (append . jW4e71) (angle . jW4e70) (acos . jW4e6f) (abs . jW4e6e) (/ . jW4e6d) (* . jW4e6c) (- . jW4e6b) (+ . jW4e6a) (>= . jW4e69) (> . jW4e68) (= . jW4e67) (<= . jW4e66) (< . jW4e65) (unquote-splicing . jW4e32) (unquote . jW4e31) (else . jW4e2f) (=> . jW4e2e) (... . jW4e2d) (delay . jW4e2a) (do . jW4e28) (cond . jW4e27) (let* . jW4e26) (quasiquote . jW4e20) (syntax-rules . jW4e1f) (case . jW4e1a) (or . jW4e16) (and . jW4e15) (if . jW4e14) (let . jW4e13) (letrec . jW4e11) (lambda . jW4e0e) (quote . jW4e0b) (letrec-syntax . jW4e09) (let-syntax . jW4e08) (set! . jW4e07) (begin . jW4e05) (define-syntax . jW4e03) (define . jW4e02)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b1 '(psyntax modules) '() '() '() '() '((module . jW4e04)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b2 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b3 '(rnrs) '(6) '() '() '() '((regexp? . jW516e) (string-upcase . jW50be) (string-titlecase . jW50bd) (string-normalize-nfkd . jW50bc) (string-normalize-nfkc . jW50bb) (string-normalize-nfd . jW50ba) (string-normalize-nfc . jW50b9) (string-foldcase . jW50b8) (string-downcase . jW50b7) (string-ci>? . jW50b6) (string-ci>=? . jW50b5) (string-ci=? . jW50b4) (string-ci<? . jW50b3) (string-ci<=? . jW50b2) (char-whitespace? . jW50b1) (char-upper-case? . jW50b0) (char-title-case? . jW50af) (char-numeric? . jW50ae) (char-lower-case? . jW50ad) (char-general-category . jW50ac) (char-upcase . jW50ab) (char-titlecase . jW50aa) (char-foldcase . jW50a9) (char-downcase . jW50a8) (char-ci>? . jW50a7) (char-ci>=? . jW50a6) (char-ci=? . jW50a5) (char-ci<? . jW50a4) (char-ci<=? . jW50a3) (char-alphabetic? . jW50a2) (make-variable-transformer . jW2f28) (identifier? . jW31df) (generate-temporaries . jW31cb) (free-identifier=? . jW31cd) (syntax->datum . jW31e3) (datum->syntax . jW31e1) (bound-identifier=? . jW31cf) (record-type-descriptor? . jW50a1) (record-predicate . jW50a0) (record-mutator . jW509f) (record-constructor . jW509e) (record-accessor . jW509d) (make-record-type-descriptor . jW509c) (make-record-constructor-descriptor . jW509b) (record? . jW509a) (record-type-uid . jW5099) (record-type-sealed? . jW5098) (record-type-parent . jW5097) (record-type-opaque? . jW5096) (record-type-name . jW5095) (record-type-generative? . jW5094) (record-type-field-names . jW5093) (record-rtd . jW5092) (record-field-mutable? . jW5091) (delete-file . jW5090) (file-exists? . jW508f) (vector-sort! . jW508e) (vector-sort . jW508d) (list-sort . jW508c) (symbol-hash . jW508b) (string-ci-hash . jW508a) (string-hash . jW5089) (equal-hash . jW5088) (hashtable-equivalence-function . jW5087) (make-hashtable . jW5086) (hashtable-hash-function . jW5085) (make-eqv-hashtable . jW5084) (make-eq-hashtable . jW5083) (hashtable? . jW5082) (hashtable-update! . jW5081) (hashtable-size . jW5080) (hashtable-set! . jW507f) (hashtable-ref . jW507e) (hashtable-mutable? . jW507d) (hashtable-keys . jW507c) (hashtable-entries . jW507b) (hashtable-delete! . jW507a) (hashtable-copy . jW5079) (hashtable-contains? . jW5078) (hashtable-clear! . jW5077) (call-with-output-file . jW5076) (call-with-input-file . jW5075) (write-char . jW5074) (write . jW5073) (with-output-to-file . jW5072) (with-input-from-file . jW5071) (read-char . jW5070) (read . jW506f) (peek-char . jW506e) (open-output-file . jW506d) (open-input-file . jW506c) (newline . jW506b) (display . jW506a) (close-output-port . jW5069) (close-input-port . jW5068) (eof-object? . jW5067) (eof-object . jW5066) (current-error-port . jW5065) (current-output-port . jW5064) (current-input-port . jW5063) (output-port? . jW5062) (input-port? . jW5061) (utf-8-codec . jW5060) (utf-16-codec . jW505f) (transcoder-error-handling-mode . jW505e) (transcoder-eol-style . jW505d) (transcoder-codec . jW505c) (transcoded-port . jW505b) (textual-port? . jW505a) (string->bytevector . jW5059) (standard-output-port . jW5058) (standard-input-port . jW5057) (standard-error-port . jW5056) (set-port-position! . jW5055) (put-u8 . jW5054) (put-string . jW5053) (put-datum . jW5052) (put-char . jW5051) (put-bytevector . jW5050) (port? . jW504f) (port-transcoder . jW504e) (port-position . jW504d) (port-has-set-port-position!? . jW504c) (port-has-port-position? . jW504b) (port-eof? . jW504a) (output-port-buffer-mode . jW5049) (open-string-output-port . jW5048) (open-string-input-port . jW5047) (open-file-output-port . jW5046) (open-file-input/output-port . jW5045) (open-file-input-port . jW5044) (open-bytevector-output-port . jW5043) (open-bytevector-input-port . jW5042) (native-transcoder . jW5041) (native-eol-style . jW5040) (make-transcoder . jW503f) (latin-1-codec . jW503e) (make-i/o-write-error . jW503d) (make-i/o-read-error . jW503c) (make-i/o-port-error . jW503b) (make-i/o-invalid-position-error . jW503a) (make-i/o-filename-error . jW5039) (make-i/o-file-protection-error . jW5038) (make-i/o-file-is-read-only-error . jW5037) (make-i/o-file-does-not-exist-error . jW5036) (make-i/o-file-already-exists-error . jW5035) (make-i/o-error . jW5034) (make-i/o-encoding-error . jW5033) (make-i/o-decoding-error . jW5032) (make-custom-textual-output-port . jW5031) (make-custom-textual-input/output-port . jW5030) (make-custom-textual-input-port . jW502f) (make-custom-binary-output-port . jW502e) (make-custom-binary-input/output-port . jW502d) (make-custom-binary-input-port . jW502c) (make-bytevector . jW502b) (lookahead-u8 . jW502a) (lookahead-char . jW5029) (i/o-write-error? . jW5028) (i/o-read-error? . jW5027) (i/o-port-error? . jW5026) (i/o-invalid-position-error? . jW5025) (i/o-filename-error? . jW5024) (i/o-file-protection-error? . jW5023) (i/o-file-is-read-only-error? . jW5022) (i/o-file-does-not-exist-error? . jW5021) (i/o-file-already-exists-error? . jW5020) (i/o-error? . jW501f) (i/o-error-position . jW501e) (i/o-error-port . jW501d) (i/o-error-filename . jW501c) (i/o-encoding-error? . jW501b) (i/o-encoding-error-char . jW501a) (i/o-decoding-error? . jW5019) (get-u8 . jW5018) (get-string-n! . jW5017) (get-string-n . jW5016) (get-string-all . jW5015) (get-line . jW5014) (get-datum . jW5013) (get-char . jW5012) (get-bytevector-some . jW5011) (get-bytevector-n! . jW5010) (get-bytevector-n . jW500f) (get-bytevector-all . jW500e) (flush-output-port . jW500d) (close-port . jW500c) (exit . jW5004) (command-line . jW4c96) (remove . jW4fff) (remv . jW4ffe) (remp . jW4ffd) (remq . jW4ffc) (partition . jW4ffb) (memv . jW4ffa) (memq . jW4ff9) (memp . jW4ff8) (member . jW4ff7) (exists . jW4ff6) (for-all . jW4ff5) (fold-right . jW4ff4) (fold-left . jW4ff3) (find . jW4ff2) (filter . jW4ff1) (cons* . jW4ff0) (assv . jW4fef) (assq . jW4fee) (assp . jW4fed) (assoc . jW4fec) (call-with-string-output-port . jW4feb) (call-with-port . jW4fea) (call-with-bytevector-output-port . jW4fe9) (bytevector->string . jW4fe8) (buffer-mode? . jW4fe7) (binary-port? . jW4fe6) (with-exception-handler . jW4fe5) (raise-continuable . jW4fe4) (raise . jW4fe3) (make-enumeration . jW4fe2) (enum-set=? . jW4fe1) (enum-set-universe . jW4fe0) (enum-set-union . jW4fdf) (enum-set-subset? . jW4fde) (enum-set-projection . jW4fdd) (enum-set-member? . jW4fdc) (enum-set-intersection . jW4fdb) (enum-set-indexer . jW4fda) (enum-set-difference . jW4fd9) (enum-set-constructor . jW4fd8) (enum-set-complement . jW4fd7) (enum-set->list . jW4fd6) (who-condition? . jW4fd5) (warning? . jW4fd4) (violation? . jW4fd3) (undefined-violation? . jW4fd2) (syntax-violation? . jW4fd1) (syntax-violation-subform . jW4fd0) (syntax-violation-form . jW4fcf) (syntax-violation . jW31dd) (simple-conditions . jW4fce) (serious-condition? . jW4fcd) (non-continuable-violation? . jW4fcc) (message-condition? . jW4fcb) (make-who-condition . jW4fca) (make-warning . jW4fc9) (make-violation . jW4fc8) (make-undefined-violation . jW4fc7) (make-syntax-violation . jW4fc6) (make-serious-condition . jW4fc5) (make-non-continuable-violation . jW4fc4) (make-message-condition . jW4fc3) (make-lexical-violation . jW4fc2) (make-irritants-condition . jW4fc1) (make-implementation-restriction-violation . jW4fc0) (make-error . jW4fbf) (make-assertion-violation . jW4fbe) (lexical-violation? . jW4fbd) (irritants-condition? . jW4fbc) (implementation-restriction-violation? . jW4fbb) (error? . jW4fba) (condition-who . jW4fb9) (condition-predicate . jW4fb8) (condition-message . jW4fb7) (condition-irritants . jW4fb6) (condition-accessor . jW4fb5) (condition . jW4fb4) (assertion-violation? . jW4fb3) (condition? . jW4fb2) (utf32->string . jW4fb1) (utf16->string . jW4fb0) (utf8->string . jW4faf) (uint-list->bytevector . jW4fae) (u8-list->bytevector . jW4fad) (string->utf8 . jW4fac) (string->utf32 . jW4fab) (string->utf16 . jW4faa) (sint-list->bytevector . jW4fa9) (native-endianness . jW4fa8) (bytevector? . jW4fa7) (bytevector=? . jW4fa6) (bytevector-uint-set! . jW4fa5) (bytevector-uint-ref . jW4fa4) (bytevector-u8-set! . jW4fa3) (bytevector-u8-ref . jW4fa2) (bytevector-u64-set! . jW4fa1) (bytevector-u64-ref . jW4fa0) (bytevector-u64-native-set! . jW4f9f) (bytevector-u64-native-ref . jW4f9e) (bytevector-u32-set! . jW4f9d) (bytevector-u32-ref . jW4f9c) (bytevector-u32-native-set! . jW4f9b) (bytevector-u32-native-ref . jW4f9a) (bytevector-u16-set! . jW4f99) (bytevector-u16-ref . jW4f98) (bytevector-u16-native-set! . jW4f97) (bytevector-u16-native-ref . jW4f96) (bytevector-sint-set! . jW4f95) (bytevector-sint-ref . jW4f94) (bytevector-s8-set! . jW4f93) (bytevector-s8-ref . jW4f92) (bytevector-s64-set! . jW4f91) (bytevector-s64-ref . jW4f90) (bytevector-s64-native-set! . jW4f8f) (bytevector-s64-native-ref . jW4f8e) (bytevector-s32-set! . jW4f8d) (bytevector-s32-ref . jW4f8c) (bytevector-s32-native-set! . jW4f8b) (bytevector-s32-native-ref . jW4f8a) (bytevector-s16-set! . jW4f89) (bytevector-s16-ref . jW4f88) (bytevector-s16-native-set! . jW4f87) (bytevector-s16-native-ref . jW4f86) (bytevector-length . jW4f85) (bytevector-ieee-single-ref . jW4f84) (bytevector-ieee-single-set! . jW4f83) (bytevector-ieee-single-native-set! . jW4f82) (bytevector-ieee-single-native-ref . jW4f81) (bytevector-ieee-double-set! . jW4f80) (bytevector-ieee-double-ref . jW4f7f) (bytevector-ieee-double-native-set! . jW4f7e) (bytevector-ieee-double-native-ref . jW4f7d) (bytevector-fill! . jW4f7c) (bytevector-copy! . jW4f7b) (bytevector-copy . jW4f7a) (bytevector->uint-list . jW4f79) (bytevector->u8-list . jW4f78) (bytevector->sint-list . jW4f77) (no-nans-violation? . jW4f76) (no-infinities-violation? . jW4f75) (make-no-nans-violation . jW4f74) (make-no-infinities-violation . jW4f73) (real->flonum . jW4f72) (flzero? . jW4f71) (fltruncate . jW4f70) (fltan . jW4f6f) (flsqrt . jW4f6e) (flsin . jW4f6d) (flround . jW4f6c) (flpositive? . jW4f6b) (flonum? . jW4f6a) (flodd? . jW4f69) (flnumerator . jW4f68) (flnegative? . jW4f67) (flnan? . jW4f66) (flmod0 . jW4f65) (flmod . jW4f64) (flmin . jW4f63) (flmax . jW4f62) (fllog . jW4f61) (flinteger? . jW4f60) (flinfinite? . jW4f5f) (flfloor . jW4f5e) (flfinite? . jW4f5d) (flexpt . jW4f5c) (flexp . jW4f5b) (fleven? . jW4f5a) (fldiv0-and-mod0 . jW4f59) (fldiv0 . jW4f58) (fldiv-and-mod . jW4f57) (fldiv . jW4f56) (fldenominator . jW4f55) (flcos . jW4f54) (flceiling . jW4f53) (flatan . jW4f52) (flasin . jW4f51) (flacos . jW4f50) (flabs . jW4f4f) (fl>? . jW4f4e) (fl>=? . jW4f4d) (fl=? . jW4f4c) (fl<? . jW4f4b) (fl<=? . jW4f4a) (fl/ . jW4f49) (fl- . jW4f48) (fl+ . jW4f47) (fl* . jW4f46) (fixnum->flonum . jW4f45) (fxzero? . jW4f44) (fxxor . jW4f43) (fxrotate-bit-field . jW4f42) (fxreverse-bit-field . jW4f41) (fxpositive? . jW4f40) (fxodd? . jW4f3f) (fxnot . jW4f3e) (fxnegative? . jW4f3d) (fxmod0 . jW4f3c) (fxmod . jW4f3b) (fxmin . jW4f3a) (fxmax . jW4f39) (fxlength . jW4f38) (fxior . jW4f37) (fxif . jW4f36) (fxfirst-bit-set . jW4f35) (fxeven? . jW4f34) (fxdiv0-and-mod0 . jW4f33) (fxdiv0 . jW4f32) (fxdiv-and-mod . jW4f31) (fxdiv . jW4f30) (fxcopy-bit-field . jW4f2f) (fxcopy-bit . jW4f2e) (fxbit-set? . jW4f2d) (fxbit-field . jW4f2c) (fxbit-count . jW4f2b) (fxarithmetic-shift-right . jW4f2a) (fxarithmetic-shift-left . jW4f29) (fxarithmetic-shift . jW4f28) (fxand . jW4f27) (fx>? . jW4f26) (fx>=? . jW4f25) (fx=? . jW4f24) (fx<? . jW4f23) (fx<=? . jW4f22) (fx-/carry . jW4f21) (fx- . jW4f20) (fx+/carry . jW4f1f) (fx+ . jW4f1e) (fx*/carry . jW4f1d) (fx* . jW4f1c) (greatest-fixnum . jW4f1b) (least-fixnum . jW4f1a) (fixnum-width . jW4f19) (fixnum? . jW4f18) (bitwise-rotate-bit-field . jW4f17) (bitwise-reverse-bit-field . jW4f16) (bitwise-length . jW4f15) (bitwise-if . jW4f14) (bitwise-first-bit-set . jW4f13) (bitwise-copy-bit-field . jW4f12) (bitwise-copy-bit . jW4f11) (bitwise-bit-set? . jW4f10) (bitwise-bit-field . jW4f0f) (bitwise-bit-count . jW4f0e) (bitwise-xor . jW4f0d) (bitwise-ior . jW4f0c) (bitwise-and . jW4f0b) (bitwise-not . jW4f0a) (bitwise-arithmetic-shift-right . jW4f09) (bitwise-arithmetic-shift-left . jW4f08) (bitwise-arithmetic-shift . jW4f07) (zero? . jW4f06) (vector? . jW4f05) (vector-set! . jW4f04) (vector-ref . jW4f03) (vector-map . jW4f02) (vector-length . jW4f01) (vector-for-each . jW4f00) (vector-fill! . jW4eff) (vector->list . jW4efe) (vector . jW4efd) (values . jW4efc) (truncate . jW4efb) (tan . jW4efa) (symbol? . jW4ef9) (symbol=? . jW4ef8) (symbol->string . jW4ef7) (substring . jW4ef6) (string? . jW4ef5) (string>? . jW4ef4) (string>=? . jW4ef3) (string=? . jW4ef2) (string<? . jW4ef1) (string<=? . jW4ef0) (string-ref . jW4eef) (string-length . jW4eee) (string-for-each . jW4eed) (string-copy . jW4eec) (string-append . jW4eeb) (string->symbol . jW4eea) (string->number . jW4ee9) (string->list . jW4ee8) (string . jW4ee7) (sqrt . jW4ee6) (sin . jW4ee5) (round . jW4ee4) (reverse . jW4ee3) (real? . jW4ee2) (real-valued? . jW4ee1) (real-part . jW4ee0) (rationalize . jW4edf) (rational? . jW4ede) (rational-valued? . jW4edd) (procedure? . jW4edc) (positive? . jW4edb) (pair? . jW4eda) (odd? . jW4ed9) (numerator . jW4ed8) (number? . jW4ed7) (number->string . jW4ed6) (null? . jW4ed5) (not . jW4ed4) (negative? . jW4ed3) (nan? . jW4ed2) (min . jW4ed1) (max . jW4ed0) (map . jW4ecf) (make-vector . jW4ece) (make-string . jW4ecd) (make-rectangular . jW4ecc) (make-polar . jW4ecb) (magnitude . jW4eca) (log . jW4ec9) (list? . jW4ec8) (list-tail . jW4ec7) (list-ref . jW4ec6) (list->vector . jW4ec5) (list->string . jW4ec4) (list . jW4ec3) (length . jW4ec2) (lcm . jW4ec1) (integer? . jW4ec0) (integer-valued? . jW4ebf) (integer->char . jW4ebe) (infinite? . jW4ebd) (inexact? . jW4ebc) (inexact . jW4ebb) (imag-part . jW4eba) (gcd . jW4eb9) (for-each . jW4eb8) (floor . jW4eb7) (finite? . jW4eb6) (expt . jW4eb5) (exp . jW4eb4) (exact? . jW4eb3) (exact-integer-sqrt . jW4eb2) (exact . jW4eb1) (even? . jW4eb0) (error . jW4eaf) (eqv? . jW4eae) (equal? . jW4ead) (eq? . jW4eac) (dynamic-wind . jW4eab) (div0-and-mod0 . jW4eaa) (mod0 . jW4ea9) (div0 . jW4ea8) (div-and-mod . jW4ea7) (mod . jW4ea6) (div . jW4ea5) (denominator . jW4ea4) (cos . jW4ea3) (cons . jW4ea2) (complex? . jW4ea1) (char? . jW4ea0) (char>? . jW4e9f) (char>=? . jW4e9e) (char=? . jW4e9d) (char<? . jW4e9c) (char<=? . jW4e9b) (char->integer . jW4e9a) (ceiling . jW4e99) (call-with-values . jW4e98) (call/cc . jW4e97) (call-with-current-continuation . jW4e96) (cddddr . jW4e95) (cdddar . jW4e94) (cddadr . jW4e93) (cddaar . jW4e92) (cdaddr . jW4e91) (cdadar . jW4e90) (cdaadr . jW4e8f) (cdaaar . jW4e8e) (cadddr . jW4e8d) (caddar . jW4e8c) (cadadr . jW4e8b) (cadaar . jW4e8a) (caaddr . jW4e89) (caadar . jW4e88) (caaadr . jW4e87) (caaaar . jW4e86) (cdddr . jW4e85) (cddar . jW4e84) (cdadr . jW4e83) (cdaar . jW4e82) (caddr . jW4e81) (cadar . jW4e80) (caadr . jW4e7f) (caaar . jW4e7e) (cddr . jW4e7d) (cdar . jW4e7c) (cadr . jW4e7b) (caar . jW4e7a) (cdr . jW4e79) (car . jW4e78) (boolean? . jW4e77) (boolean=? . jW4e76) (atan . jW4e75) (assertion-violation . jW4e74) (asin . jW4e73) (apply . jW4e72) (append . jW4e71) (angle . jW4e70) (acos . jW4e6f) (abs . jW4e6e) (/ . jW4e6d) (* . jW4e6c) (- . jW4e6b) (+ . jW4e6a) (>= . jW4e69) (> . jW4e68) (= . jW4e67) (<= . jW4e66) (< . jW4e65) (&no-nans . jW4e63) (&no-infinities . jW4e62) (&i/o-encoding . jW4e61) (&i/o-decoding . jW4e60) (&i/o-port . jW4e5f) (&i/o-file-does-not-exist . jW4e5e) (&i/o-file-already-exists . jW4e5d) (&i/o-file-is-read-only . jW4e5c) (&i/o-file-protection . jW4e5b) (&i/o-filename . jW4e5a) (&i/o-invalid-position . jW4e59) (&i/o-write . jW4e58) (&i/o-read . jW4e57) (&i/o . jW4e56) (&undefined . jW4e55) (&syntax . jW4e54) (&lexical . jW4e53) (&implementation-restriction . jW4e52) (&non-continuable . jW4e51) (&who . jW4e50) (&irritants . jW4e4f) (&assertion . jW4e4e) (&violation . jW4e4d) (&error . jW4e4c) (&serious . jW4e4b) (&warning . jW4e4a) (&message . jW4e49) (&condition . jW4e48) (define-condition-type . jW4e47) (define-enumeration . jW4e46) (define-record-type . jW4e45) (parent-rtd . jW4e44) (nongenerative . jW4e43) (opaque . jW4e42) (sealed . jW4e41) (protocol . jW4e40) (parent . jW4e3f) (immutable . jW4e3e) (mutable . jW4e3d) (fields . jW4e3c) (error-handling-mode . jW4e3b) (file-options . jW4e3a) (buffer-mode . jW4e39) (eol-style . jW4e38) (guard . jW4e37) (unsyntax-splicing . jW4e34) (unsyntax . jW4e33) (unquote-splicing . jW4e32) (unquote . jW4e31) (_ . jW4e30) (else . jW4e2f) (=> . jW4e2e) (... . jW4e2d) (assert . jW4e2c) (endianness . jW4e2b) (do . jW4e28) (cond . jW4e27) (let* . jW4e26) (let*-values . jW4e25) (let-values . jW4e24) (identifier-syntax . jW4e23) (with-syntax . jW4e22) (quasisyntax . jW4e21) (quasiquote . jW4e20) (syntax-rules . jW4e1f) (record-constructor-descriptor . jW4e1c) (record-type-descriptor . jW4e1b) (case . jW4e1a) (unless . jW4e18) (when . jW4e17) (or . jW4e16) (and . jW4e15) (if . jW4e14) (let . jW4e13) (letrec* . jW4e12) (letrec . jW4e11) (case-lambda . jW4e0f) (lambda . jW4e0e) (syntax . jW4e0d) (syntax-case . jW4e0c) (quote . jW4e0b) (letrec-syntax . jW4e09) (let-syntax . jW4e08) (set! . jW4e07) (begin . jW4e05) (define-syntax . jW4e03) (define . jW4e02)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b4 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . jW31b9) (quotient . jW500b) (null-environment . jW31b7) (remainder . jW500a) (modulo . jW5009) (inexact->exact . jW5008) (force . jW5007) (exact->inexact . jW5006) (make-promise . jW5005) (delay . jW4e2a)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b5 '(rnrs control) '(6) '() '() '() '((do . jW4e28) (unless . jW4e18) (when . jW4e17) (case-lambda . jW4e0f)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b6 '(rnrs eval) '(6) '() '() '() '((eval . jW31bd) (environment . jW31b5)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b7 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . jW5001) (set-car! . jW5000)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b8 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . jW5003) (string-set! . jW5002)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51b9 '(rnrs programs) '(6) '() '() '() '((exit . jW5004) (command-line . jW4c96)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51ba '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . jW2f28) (identifier? . jW31df) (generate-temporaries . jW31cb) (free-identifier=? . jW31cd) (syntax->datum . jW31e3) (datum->syntax . jW31e1) (bound-identifier=? . jW31cf) (syntax-violation . jW31dd) (unsyntax-splicing . jW4e34) (unsyntax . jW4e33) (_ . jW4e30) (... . jW4e2d) (with-syntax . jW4e22) (quasisyntax . jW4e21) (syntax . jW4e0d) (syntax-case . jW4e0c)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51bb '(rnrs files) '(6) '() '() '() '((delete-file . jW5090) (file-exists? . jW508f) (make-i/o-write-error . jW503d) (make-i/o-read-error . jW503c) (make-i/o-port-error . jW503b) (make-i/o-invalid-position-error . jW503a) (make-i/o-filename-error . jW5039) (make-i/o-file-protection-error . jW5038) (make-i/o-file-is-read-only-error . jW5037) (make-i/o-file-does-not-exist-error . jW5036) (make-i/o-file-already-exists-error . jW5035) (make-i/o-error . jW5034) (i/o-write-error? . jW5028) (i/o-read-error? . jW5027) (i/o-port-error? . jW5026) (i/o-invalid-position-error? . jW5025) (i/o-filename-error? . jW5024) (i/o-file-protection-error? . jW5023) (i/o-file-is-read-only-error? . jW5022) (i/o-file-does-not-exist-error? . jW5021) (i/o-file-already-exists-error? . jW5020) (i/o-error? . jW501f) (i/o-error-position . jW501e) (i/o-error-port . jW501d) (i/o-error-filename . jW501c) (&i/o-port . jW4e5f) (&i/o-file-does-not-exist . jW4e5e) (&i/o-file-already-exists . jW4e5d) (&i/o-file-is-read-only . jW4e5c) (&i/o-file-protection . jW4e5b) (&i/o-filename . jW4e5a) (&i/o-invalid-position . jW4e59) (&i/o-write . jW4e58) (&i/o-read . jW4e57) (&i/o . jW4e56)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51bc '(rnrs sorting) '(6) '() '() '() '((vector-sort! . jW508e) (vector-sort . jW508d) (list-sort . jW508c)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51bd '(rnrs base) '(6) '() '() '() '((zero? . jW4f06) (vector? . jW4f05) (vector-set! . jW4f04) (vector-ref . jW4f03) (vector-map . jW4f02) (vector-length . jW4f01) (vector-for-each . jW4f00) (vector-fill! . jW4eff) (vector->list . jW4efe) (vector . jW4efd) (values . jW4efc) (truncate . jW4efb) (tan . jW4efa) (symbol? . jW4ef9) (symbol=? . jW4ef8) (symbol->string . jW4ef7) (substring . jW4ef6) (string? . jW4ef5) (string>? . jW4ef4) (string>=? . jW4ef3) (string=? . jW4ef2) (string<? . jW4ef1) (string<=? . jW4ef0) (string-ref . jW4eef) (string-length . jW4eee) (string-for-each . jW4eed) (string-copy . jW4eec) (string-append . jW4eeb) (string->symbol . jW4eea) (string->number . jW4ee9) (string->list . jW4ee8) (string . jW4ee7) (sqrt . jW4ee6) (sin . jW4ee5) (round . jW4ee4) (reverse . jW4ee3) (real? . jW4ee2) (real-valued? . jW4ee1) (real-part . jW4ee0) (rationalize . jW4edf) (rational? . jW4ede) (rational-valued? . jW4edd) (procedure? . jW4edc) (positive? . jW4edb) (pair? . jW4eda) (odd? . jW4ed9) (numerator . jW4ed8) (number? . jW4ed7) (number->string . jW4ed6) (null? . jW4ed5) (not . jW4ed4) (negative? . jW4ed3) (nan? . jW4ed2) (min . jW4ed1) (max . jW4ed0) (map . jW4ecf) (make-vector . jW4ece) (make-string . jW4ecd) (make-rectangular . jW4ecc) (make-polar . jW4ecb) (magnitude . jW4eca) (log . jW4ec9) (list? . jW4ec8) (list-tail . jW4ec7) (list-ref . jW4ec6) (list->vector . jW4ec5) (list->string . jW4ec4) (list . jW4ec3) (length . jW4ec2) (lcm . jW4ec1) (integer? . jW4ec0) (integer-valued? . jW4ebf) (integer->char . jW4ebe) (infinite? . jW4ebd) (inexact? . jW4ebc) (inexact . jW4ebb) (imag-part . jW4eba) (gcd . jW4eb9) (for-each . jW4eb8) (floor . jW4eb7) (finite? . jW4eb6) (expt . jW4eb5) (exp . jW4eb4) (exact? . jW4eb3) (exact-integer-sqrt . jW4eb2) (exact . jW4eb1) (even? . jW4eb0) (error . jW4eaf) (eqv? . jW4eae) (equal? . jW4ead) (eq? . jW4eac) (dynamic-wind . jW4eab) (div0-and-mod0 . jW4eaa) (mod0 . jW4ea9) (div0 . jW4ea8) (div-and-mod . jW4ea7) (mod . jW4ea6) (div . jW4ea5) (denominator . jW4ea4) (cos . jW4ea3) (cons . jW4ea2) (complex? . jW4ea1) (char? . jW4ea0) (char>? . jW4e9f) (char>=? . jW4e9e) (char=? . jW4e9d) (char<? . jW4e9c) (char<=? . jW4e9b) (char->integer . jW4e9a) (ceiling . jW4e99) (call-with-values . jW4e98) (call/cc . jW4e97) (call-with-current-continuation . jW4e96) (cddddr . jW4e95) (cdddar . jW4e94) (cddadr . jW4e93) (cddaar . jW4e92) (cdaddr . jW4e91) (cdadar . jW4e90) (cdaadr . jW4e8f) (cdaaar . jW4e8e) (cadddr . jW4e8d) (caddar . jW4e8c) (cadadr . jW4e8b) (cadaar . jW4e8a) (caaddr . jW4e89) (caadar . jW4e88) (caaadr . jW4e87) (caaaar . jW4e86) (cdddr . jW4e85) (cddar . jW4e84) (cdadr . jW4e83) (cdaar . jW4e82) (caddr . jW4e81) (cadar . jW4e80) (caadr . jW4e7f) (caaar . jW4e7e) (cddr . jW4e7d) (cdar . jW4e7c) (cadr . jW4e7b) (caar . jW4e7a) (cdr . jW4e79) (car . jW4e78) (boolean? . jW4e77) (boolean=? . jW4e76) (atan . jW4e75) (assertion-violation . jW4e74) (asin . jW4e73) (apply . jW4e72) (append . jW4e71) (angle . jW4e70) (acos . jW4e6f) (abs . jW4e6e) (/ . jW4e6d) (* . jW4e6c) (- . jW4e6b) (+ . jW4e6a) (>= . jW4e69) (> . jW4e68) (= . jW4e67) (<= . jW4e66) (< . jW4e65) (unquote-splicing . jW4e32) (unquote . jW4e31) (_ . jW4e30) (else . jW4e2f) (=> . jW4e2e) (... . jW4e2d) (assert . jW4e2c) (cond . jW4e27) (let* . jW4e26) (let*-values . jW4e25) (let-values . jW4e24) (identifier-syntax . jW4e23) (quasiquote . jW4e20) (syntax-rules . jW4e1f) (case . jW4e1a) (or . jW4e16) (and . jW4e15) (if . jW4e14) (let . jW4e13) (letrec* . jW4e12) (letrec . jW4e11) (lambda . jW4e0e) (quote . jW4e0b) (letrec-syntax . jW4e09) (let-syntax . jW4e08) (set! . jW4e07) (begin . jW4e05) (define-syntax . jW4e03) (define . jW4e02)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51be '(rnrs lists) '(6) '() '() '() '((remove . jW4fff) (remv . jW4ffe) (remp . jW4ffd) (remq . jW4ffc) (partition . jW4ffb) (memv . jW4ffa) (memq . jW4ff9) (memp . jW4ff8) (member . jW4ff7) (exists . jW4ff6) (for-all . jW4ff5) (fold-right . jW4ff4) (fold-left . jW4ff3) (find . jW4ff2) (filter . jW4ff1) (cons* . jW4ff0) (assv . jW4fef) (assq . jW4fee) (assp . jW4fed) (assoc . jW4fec)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51bf '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . jW5076) (call-with-input-file . jW5075) (write-char . jW5074) (write . jW5073) (with-output-to-file . jW5072) (with-input-from-file . jW5071) (read-char . jW5070) (read . jW506f) (peek-char . jW506e) (open-output-file . jW506d) (open-input-file . jW506c) (newline . jW506b) (display . jW506a) (close-output-port . jW5069) (close-input-port . jW5068) (eof-object? . jW5067) (eof-object . jW5066) (current-error-port . jW5065) (current-output-port . jW5064) (current-input-port . jW5063) (output-port? . jW5062) (input-port? . jW5061) (make-i/o-write-error . jW503d) (make-i/o-read-error . jW503c) (make-i/o-port-error . jW503b) (make-i/o-invalid-position-error . jW503a) (make-i/o-filename-error . jW5039) (make-i/o-file-protection-error . jW5038) (make-i/o-file-is-read-only-error . jW5037) (make-i/o-file-does-not-exist-error . jW5036) (make-i/o-file-already-exists-error . jW5035) (make-i/o-error . jW5034) (i/o-write-error? . jW5028) (i/o-read-error? . jW5027) (i/o-port-error? . jW5026) (i/o-invalid-position-error? . jW5025) (i/o-filename-error? . jW5024) (i/o-file-protection-error? . jW5023) (i/o-file-is-read-only-error? . jW5022) (i/o-file-does-not-exist-error? . jW5021) (i/o-file-already-exists-error? . jW5020) (i/o-error? . jW501f) (i/o-error-position . jW501e) (i/o-error-port . jW501d) (i/o-error-filename . jW501c) (&i/o-port . jW4e5f) (&i/o-file-does-not-exist . jW4e5e) (&i/o-file-already-exists . jW4e5d) (&i/o-file-is-read-only . jW4e5c) (&i/o-file-protection . jW4e5b) (&i/o-filename . jW4e5a) (&i/o-invalid-position . jW4e59) (&i/o-write . jW4e58) (&i/o-read . jW4e57) (&i/o . jW4e56)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c0 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . jW502b) (utf32->string . jW4fb1) (utf16->string . jW4fb0) (utf8->string . jW4faf) (uint-list->bytevector . jW4fae) (u8-list->bytevector . jW4fad) (string->utf8 . jW4fac) (string->utf32 . jW4fab) (string->utf16 . jW4faa) (sint-list->bytevector . jW4fa9) (native-endianness . jW4fa8) (bytevector? . jW4fa7) (bytevector=? . jW4fa6) (bytevector-uint-set! . jW4fa5) (bytevector-uint-ref . jW4fa4) (bytevector-u8-set! . jW4fa3) (bytevector-u8-ref . jW4fa2) (bytevector-u64-set! . jW4fa1) (bytevector-u64-ref . jW4fa0) (bytevector-u64-native-set! . jW4f9f) (bytevector-u64-native-ref . jW4f9e) (bytevector-u32-set! . jW4f9d) (bytevector-u32-ref . jW4f9c) (bytevector-u32-native-set! . jW4f9b) (bytevector-u32-native-ref . jW4f9a) (bytevector-u16-set! . jW4f99) (bytevector-u16-ref . jW4f98) (bytevector-u16-native-set! . jW4f97) (bytevector-u16-native-ref . jW4f96) (bytevector-sint-set! . jW4f95) (bytevector-sint-ref . jW4f94) (bytevector-s8-set! . jW4f93) (bytevector-s8-ref . jW4f92) (bytevector-s64-set! . jW4f91) (bytevector-s64-ref . jW4f90) (bytevector-s64-native-set! . jW4f8f) (bytevector-s64-native-ref . jW4f8e) (bytevector-s32-set! . jW4f8d) (bytevector-s32-ref . jW4f8c) (bytevector-s32-native-set! . jW4f8b) (bytevector-s32-native-ref . jW4f8a) (bytevector-s16-set! . jW4f89) (bytevector-s16-ref . jW4f88) (bytevector-s16-native-set! . jW4f87) (bytevector-s16-native-ref . jW4f86) (bytevector-length . jW4f85) (bytevector-ieee-single-ref . jW4f84) (bytevector-ieee-single-set! . jW4f83) (bytevector-ieee-single-native-set! . jW4f82) (bytevector-ieee-single-native-ref . jW4f81) (bytevector-ieee-double-set! . jW4f80) (bytevector-ieee-double-ref . jW4f7f) (bytevector-ieee-double-native-set! . jW4f7e) (bytevector-ieee-double-native-ref . jW4f7d) (bytevector-fill! . jW4f7c) (bytevector-copy! . jW4f7b) (bytevector-copy . jW4f7a) (bytevector->uint-list . jW4f79) (bytevector->u8-list . jW4f78) (bytevector->sint-list . jW4f77) (endianness . jW4e2b)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c1 '(rnrs unicode) '(6) '() '() '() '((string-upcase . jW50be) (string-titlecase . jW50bd) (string-normalize-nfkd . jW50bc) (string-normalize-nfkc . jW50bb) (string-normalize-nfd . jW50ba) (string-normalize-nfc . jW50b9) (string-foldcase . jW50b8) (string-downcase . jW50b7) (string-ci>? . jW50b6) (string-ci>=? . jW50b5) (string-ci=? . jW50b4) (string-ci<? . jW50b3) (string-ci<=? . jW50b2) (char-whitespace? . jW50b1) (char-upper-case? . jW50b0) (char-title-case? . jW50af) (char-numeric? . jW50ae) (char-lower-case? . jW50ad) (char-general-category . jW50ac) (char-upcase . jW50ab) (char-titlecase . jW50aa) (char-foldcase . jW50a9) (char-downcase . jW50a8) (char-ci>? . jW50a7) (char-ci>=? . jW50a6) (char-ci=? . jW50a5) (char-ci<? . jW50a4) (char-ci<=? . jW50a3) (char-alphabetic? . jW50a2)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c2 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . jW4fe5) (raise-continuable . jW4fe4) (raise . jW4fe3) (guard . jW4e37) (else . jW4e2f) (=> . jW4e2e)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c3 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . jW4f17) (bitwise-reverse-bit-field . jW4f16) (bitwise-length . jW4f15) (bitwise-if . jW4f14) (bitwise-first-bit-set . jW4f13) (bitwise-copy-bit-field . jW4f12) (bitwise-copy-bit . jW4f11) (bitwise-bit-set? . jW4f10) (bitwise-bit-field . jW4f0f) (bitwise-bit-count . jW4f0e) (bitwise-xor . jW4f0d) (bitwise-ior . jW4f0c) (bitwise-and . jW4f0b) (bitwise-not . jW4f0a) (bitwise-arithmetic-shift-right . jW4f09) (bitwise-arithmetic-shift-left . jW4f08) (bitwise-arithmetic-shift . jW4f07)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c4 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . jW4f44) (fxxor . jW4f43) (fxrotate-bit-field . jW4f42) (fxreverse-bit-field . jW4f41) (fxpositive? . jW4f40) (fxodd? . jW4f3f) (fxnot . jW4f3e) (fxnegative? . jW4f3d) (fxmod0 . jW4f3c) (fxmod . jW4f3b) (fxmin . jW4f3a) (fxmax . jW4f39) (fxlength . jW4f38) (fxior . jW4f37) (fxif . jW4f36) (fxfirst-bit-set . jW4f35) (fxeven? . jW4f34) (fxdiv0-and-mod0 . jW4f33) (fxdiv0 . jW4f32) (fxdiv-and-mod . jW4f31) (fxdiv . jW4f30) (fxcopy-bit-field . jW4f2f) (fxcopy-bit . jW4f2e) (fxbit-set? . jW4f2d) (fxbit-field . jW4f2c) (fxbit-count . jW4f2b) (fxarithmetic-shift-right . jW4f2a) (fxarithmetic-shift-left . jW4f29) (fxarithmetic-shift . jW4f28) (fxand . jW4f27) (fx>? . jW4f26) (fx>=? . jW4f25) (fx=? . jW4f24) (fx<? . jW4f23) (fx<=? . jW4f22) (fx-/carry . jW4f21) (fx- . jW4f20) (fx+/carry . jW4f1f) (fx+ . jW4f1e) (fx*/carry . jW4f1d) (fx* . jW4f1c) (greatest-fixnum . jW4f1b) (least-fixnum . jW4f1a) (fixnum-width . jW4f19) (fixnum? . jW4f18)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c5 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . jW4f76) (no-infinities-violation? . jW4f75) (make-no-nans-violation . jW4f74) (make-no-infinities-violation . jW4f73) (real->flonum . jW4f72) (flzero? . jW4f71) (fltruncate . jW4f70) (fltan . jW4f6f) (flsqrt . jW4f6e) (flsin . jW4f6d) (flround . jW4f6c) (flpositive? . jW4f6b) (flonum? . jW4f6a) (flodd? . jW4f69) (flnumerator . jW4f68) (flnegative? . jW4f67) (flnan? . jW4f66) (flmod0 . jW4f65) (flmod . jW4f64) (flmin . jW4f63) (flmax . jW4f62) (fllog . jW4f61) (flinteger? . jW4f60) (flinfinite? . jW4f5f) (flfloor . jW4f5e) (flfinite? . jW4f5d) (flexpt . jW4f5c) (flexp . jW4f5b) (fleven? . jW4f5a) (fldiv0-and-mod0 . jW4f59) (fldiv0 . jW4f58) (fldiv-and-mod . jW4f57) (fldiv . jW4f56) (fldenominator . jW4f55) (flcos . jW4f54) (flceiling . jW4f53) (flatan . jW4f52) (flasin . jW4f51) (flacos . jW4f50) (flabs . jW4f4f) (fl>? . jW4f4e) (fl>=? . jW4f4d) (fl=? . jW4f4c) (fl<? . jW4f4b) (fl<=? . jW4f4a) (fl/ . jW4f49) (fl- . jW4f48) (fl+ . jW4f47) (fl* . jW4f46) (fixnum->flonum . jW4f45) (&no-nans . jW4e63) (&no-infinities . jW4e62)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c6 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . jW508b) (string-ci-hash . jW508a) (string-hash . jW5089) (equal-hash . jW5088) (hashtable-equivalence-function . jW5087) (make-hashtable . jW5086) (hashtable-hash-function . jW5085) (make-eqv-hashtable . jW5084) (make-eq-hashtable . jW5083) (hashtable? . jW5082) (hashtable-update! . jW5081) (hashtable-size . jW5080) (hashtable-set! . jW507f) (hashtable-ref . jW507e) (hashtable-mutable? . jW507d) (hashtable-keys . jW507c) (hashtable-entries . jW507b) (hashtable-delete! . jW507a) (hashtable-copy . jW5079) (hashtable-contains? . jW5078) (hashtable-clear! . jW5077)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c7 '(rnrs io ports) '(6) '() '() '() '((eof-object? . jW5067) (eof-object . jW5066) (current-error-port . jW5065) (current-output-port . jW5064) (current-input-port . jW5063) (output-port? . jW5062) (input-port? . jW5061) (utf-8-codec . jW5060) (utf-16-codec . jW505f) (transcoder-error-handling-mode . jW505e) (transcoder-eol-style . jW505d) (transcoder-codec . jW505c) (transcoded-port . jW505b) (textual-port? . jW505a) (string->bytevector . jW5059) (standard-output-port . jW5058) (standard-input-port . jW5057) (standard-error-port . jW5056) (set-port-position! . jW5055) (put-u8 . jW5054) (put-string . jW5053) (put-datum . jW5052) (put-char . jW5051) (put-bytevector . jW5050) (port? . jW504f) (port-transcoder . jW504e) (port-position . jW504d) (port-has-set-port-position!? . jW504c) (port-has-port-position? . jW504b) (port-eof? . jW504a) (output-port-buffer-mode . jW5049) (open-string-output-port . jW5048) (open-string-input-port . jW5047) (open-file-output-port . jW5046) (open-file-input/output-port . jW5045) (open-file-input-port . jW5044) (open-bytevector-output-port . jW5043) (open-bytevector-input-port . jW5042) (native-transcoder . jW5041) (native-eol-style . jW5040) (make-transcoder . jW503f) (latin-1-codec . jW503e) (make-i/o-write-error . jW503d) (make-i/o-read-error . jW503c) (make-i/o-port-error . jW503b) (make-i/o-invalid-position-error . jW503a) (make-i/o-filename-error . jW5039) (make-i/o-file-protection-error . jW5038) (make-i/o-file-is-read-only-error . jW5037) (make-i/o-file-does-not-exist-error . jW5036) (make-i/o-file-already-exists-error . jW5035) (make-i/o-error . jW5034) (make-i/o-encoding-error . jW5033) (make-i/o-decoding-error . jW5032) (make-custom-textual-output-port . jW5031) (make-custom-textual-input/output-port . jW5030) (make-custom-textual-input-port . jW502f) (make-custom-binary-output-port . jW502e) (make-custom-binary-input/output-port . jW502d) (make-custom-binary-input-port . jW502c) (lookahead-u8 . jW502a) (lookahead-char . jW5029) (i/o-write-error? . jW5028) (i/o-read-error? . jW5027) (i/o-port-error? . jW5026) (i/o-invalid-position-error? . jW5025) (i/o-filename-error? . jW5024) (i/o-file-protection-error? . jW5023) (i/o-file-is-read-only-error? . jW5022) (i/o-file-does-not-exist-error? . jW5021) (i/o-file-already-exists-error? . jW5020) (i/o-error? . jW501f) (i/o-error-position . jW501e) (i/o-error-port . jW501d) (i/o-error-filename . jW501c) (i/o-encoding-error? . jW501b) (i/o-encoding-error-char . jW501a) (i/o-decoding-error? . jW5019) (get-u8 . jW5018) (get-string-n! . jW5017) (get-string-n . jW5016) (get-string-all . jW5015) (get-line . jW5014) (get-datum . jW5013) (get-char . jW5012) (get-bytevector-some . jW5011) (get-bytevector-n! . jW5010) (get-bytevector-n . jW500f) (get-bytevector-all . jW500e) (flush-output-port . jW500d) (close-port . jW500c) (call-with-string-output-port . jW4feb) (call-with-port . jW4fea) (call-with-bytevector-output-port . jW4fe9) (bytevector->string . jW4fe8) (buffer-mode? . jW4fe7) (binary-port? . jW4fe6) (&i/o-encoding . jW4e61) (&i/o-decoding . jW4e60) (&i/o-port . jW4e5f) (&i/o-file-does-not-exist . jW4e5e) (&i/o-file-already-exists . jW4e5d) (&i/o-file-is-read-only . jW4e5c) (&i/o-file-protection . jW4e5b) (&i/o-filename . jW4e5a) (&i/o-invalid-position . jW4e59) (&i/o-write . jW4e58) (&i/o-read . jW4e57) (&i/o . jW4e56) (error-handling-mode . jW4e3b) (file-options . jW4e3a) (buffer-mode . jW4e39) (eol-style . jW4e38)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c8 '(rnrs enums) '(6) '() '() '() '((make-enumeration . jW4fe2) (enum-set=? . jW4fe1) (enum-set-universe . jW4fe0) (enum-set-union . jW4fdf) (enum-set-subset? . jW4fde) (enum-set-projection . jW4fdd) (enum-set-member? . jW4fdc) (enum-set-intersection . jW4fdb) (enum-set-indexer . jW4fda) (enum-set-difference . jW4fd9) (enum-set-constructor . jW4fd8) (enum-set-complement . jW4fd7) (enum-set->list . jW4fd6) (define-enumeration . jW4e46)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51c9 '(rnrs conditions) '(6) '() '() '() '((who-condition? . jW4fd5) (warning? . jW4fd4) (violation? . jW4fd3) (undefined-violation? . jW4fd2) (syntax-violation? . jW4fd1) (syntax-violation-subform . jW4fd0) (syntax-violation-form . jW4fcf) (syntax-violation . jW31dd) (simple-conditions . jW4fce) (serious-condition? . jW4fcd) (non-continuable-violation? . jW4fcc) (message-condition? . jW4fcb) (make-who-condition . jW4fca) (make-warning . jW4fc9) (make-violation . jW4fc8) (make-undefined-violation . jW4fc7) (make-syntax-violation . jW4fc6) (make-serious-condition . jW4fc5) (make-non-continuable-violation . jW4fc4) (make-message-condition . jW4fc3) (make-lexical-violation . jW4fc2) (make-irritants-condition . jW4fc1) (make-implementation-restriction-violation . jW4fc0) (make-error . jW4fbf) (make-assertion-violation . jW4fbe) (lexical-violation? . jW4fbd) (irritants-condition? . jW4fbc) (implementation-restriction-violation? . jW4fbb) (error? . jW4fba) (condition-who . jW4fb9) (condition-predicate . jW4fb8) (condition-message . jW4fb7) (condition-irritants . jW4fb6) (condition-accessor . jW4fb5) (condition . jW4fb4) (assertion-violation? . jW4fb3) (condition? . jW4fb2) (&undefined . jW4e55) (&syntax . jW4e54) (&lexical . jW4e53) (&implementation-restriction . jW4e52) (&non-continuable . jW4e51) (&who . jW4e50) (&irritants . jW4e4f) (&assertion . jW4e4e) (&violation . jW4e4d) (&error . jW4e4c) (&serious . jW4e4b) (&warning . jW4e4a) (&message . jW4e49) (&condition . jW4e48) (define-condition-type . jW4e47)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51ca '(rnrs records inspection) '(6) '() '() '() '((record? . jW509a) (record-type-uid . jW5099) (record-type-sealed? . jW5098) (record-type-parent . jW5097) (record-type-opaque? . jW5096) (record-type-name . jW5095) (record-type-generative? . jW5094) (record-type-field-names . jW5093) (record-rtd . jW5092) (record-field-mutable? . jW5091)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51cb '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . jW50a1) (record-predicate . jW50a0) (record-mutator . jW509f) (record-constructor . jW509e) (record-accessor . jW509d) (make-record-type-descriptor . jW509c) (make-record-constructor-descriptor . jW509b)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51cc '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . jW4e45) (parent-rtd . jW4e44) (nongenerative . jW4e43) (opaque . jW4e42) (sealed . jW4e41) (protocol . jW4e40) (parent . jW4e3f) (immutable . jW4e3e) (mutable . jW4e3d) (fields . jW4e3c) (record-constructor-descriptor . jW4e1c) (record-type-descriptor . jW4e1b)) '() values values '#f '#f '#t '#f) (jW2d11@jW2b5d@install-library 'jW51cd '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . jW51ad) (&no-nans-rtd . jW51ac) (&no-infinities-rcd . jW51ab) (&no-infinities-rtd . jW51aa) (&i/o-encoding-rcd . jW51a9) (&i/o-encoding-rtd . jW51a8) (&i/o-decoding-rcd . jW51a7) (&i/o-decoding-rtd . jW51a6) (&i/o-port-rcd . jW51a5) (&i/o-port-rtd . jW51a4) (&i/o-file-does-not-exist-rcd . jW51a3) (&i/o-file-does-not-exist-rtd . jW51a2) (&i/o-file-already-exists-rcd . jW51a1) (&i/o-file-already-exists-rtd . jW51a0) (&i/o-file-is-read-only-rcd . jW519f) (&i/o-file-is-read-only-rtd . jW519e) (&i/o-file-protection-rcd . jW519d) (&i/o-file-protection-rtd . jW519c) (&i/o-filename-rcd . jW519b) (&i/o-filename-rtd . jW519a) (&i/o-invalid-position-rcd . jW5199) (&i/o-invalid-position-rtd . jW5198) (&i/o-write-rcd . jW5197) (&i/o-write-rtd . jW5196) (&i/o-read-rcd . jW5195) (&i/o-read-rtd . jW5194) (&i/o-rcd . jW5193) (&i/o-rtd . jW5192) (&undefined-rcd . jW5191) (&undefined-rtd . jW5190) (&syntax-rcd . jW518f) (&syntax-rtd . jW518e) (&lexical-rcd . jW518d) (&lexical-rtd . jW518c) (&implementation-restriction-rcd . jW518b) (&implementation-restriction-rtd . jW518a) (&non-continuable-rcd . jW5189) (&non-continuable-rtd . jW5188) (&who-rcd . jW5187) (&who-rtd . jW5186) (&irritants-rcd . jW5185) (&irritants-rtd . jW5184) (&assertion-rcd . jW5183) (&assertion-rtd . jW5182) (&violation-rcd . jW5181) (&violation-rtd . jW5180) (&error-rcd . jW517f) (&error-rtd . jW517e) (&serious-rcd . jW517d) (&serious-rtd . jW517c) (&warning-rcd . jW517b) (&warning-rtd . jW517a) (&message-rcd . jW5179) (&message-rtd . jW5178) (&condition-rcd . jW5177) (&condition-rtd . jW5176) (syntax-error . jW31d9) (syntax-dispatch . jW30fd) (pretty-print . jW5175) (eval-core . jW5174) (set-symbol-value! . jW5173) (symbol-value . jW5172) (gensym . jW5171) (void . jW5170) (load . jW4c9c) (interaction-environment . jW31eb) (char-ready? . jW516f) (regexp? . jW516e) (read-line . jW516d) (gensym-prefix-set! . jW516c) (ungensym . jW516b) (alist->eq-hash-table . jW516a) (assoc-ref . jW5169) (print . jW5168) (format . jW5167) (host-os . jW5166) (library-path . jW2b3c) (standard-library-path . jW5165) (ssl-supported? . jW5164) (ssl-socket? . jW5163) (socket-sslize! . jW5162) (%monapi-name-whereis . jW5161) (%monapi-message-send . jW5160) (file-newer? . jW515f) (stat-mtime . jW515e) (write-to-file . jW515d) (file->list . jW515c) (file->string . jW515b) (digit->integer . jW515a) (call-with-string-input-port . jW5159) (call-with-string-io . jW5158) (string-split . jW5157) (bytevector-for-each . jW5156) (string->regexp . jW5155) (rxmatch . jW5154) (regexp-replace-all . jW5153) (hashtable-fold-left . jW5152) (hashtable-for-each . jW5151) (mosh-cache-dir . jW2926) (%call-process . jW5150) (local-tz-offset . jW514f) (microseconds . jW514e) (directory-list . jW514d) (set-current-directory! . jW514c) (expand-path . jW514b) (current-directory . jW514a) (%getpid . jW5149) (%spawn . jW5148) (%waitpid . jW5147) (simple-struct-name . jW5146) (simple-struct-set! . jW5145) (simple-struct-ref . jW5144) (make-simple-struct . jW5143) (simple-struct? . jW5142) (pointer-ref-c-int64 . jW5141) (pointer-ref-c-int32 . jW5140) (pointer-ref-c-int16 . jW513f) (pointer-ref-c-int8 . jW513e) (pointer-ref-c-uint64 . jW513d) (pointer-ref-c-uint32 . jW513c) (pointer-ref-c-uint16 . jW513b) (pointer-ref-c-uint8 . jW513a) (pointer-set-c-uint64! . jW5139) (pointer-set-c-uint32! . jW5138) (pointer-set-c-uint16! . jW5137) (pointer-set-c-uint8! . jW5136) (pointer-set-c-int64! . jW5135) (pointer-set-c-int32! . jW5134) (pointer-set-c-int16! . jW5133) (pointer-set-c-int8! . jW5132) (pointer-set-c-pointer! . jW5131) (pointer-set-c-double! . jW5130) (pointer-set-c-float! . jW512f) (pointer-set-c-long-long! . jW512e) (pointer-set-c-long! . jW512d) (pointer-set-c-int! . jW512c) (pointer-set-c-short! . jW512b) (pointer-set-c-char! . jW512a) (pointer-ref-c-pointer . jW5129) (pointer-ref-c-double . jW5128) (pointer-ref-c-float . jW5127) (pointer-ref-c-unsigned-long-long . jW5126) (pointer-ref-c-signed-long-long . jW5125) (pointer-ref-c-unsigned-long . jW5124) (pointer-ref-c-signed-long . jW5123) (pointer-ref-c-unsigned-int . jW5122) (pointer-ref-c-signed-int . jW5121) (pointer-ref-c-unsigned-short . jW5120) (pointer-ref-c-signed-short . jW511f) (pointer-ref-c-unsigned-char . jW511e) (pointer-ref-c-signed-char . jW511d) (pointer->integer . jW511c) (integer->pointer . jW511b) (pointer? . jW511a) (shared-errno . jW5119) (%ffi-free-c-callback-trampoline . jW5118) (%ffi-make-c-callback-trampoline . jW5117) (%ffi-free . jW5116) (%ffi-malloc . jW5115) (%ffi-supported? . jW5114) (%ffi-pointer->string . jW5113) (%ffi-call . jW5112) (%ffi-lookup . jW5111) (%ffi-open . jW5110) (null-terminated-utf8->string . jW510f) (null-terminated-bytevector->string . jW510e) (%exec . jW510d) (%fork . jW510c) (%pipe . jW510b) (p . jW510a) (open-output-string . jW5109) (get-output-string . jW5108) (file-stat-ctime . jW5107) (file-stat-atime . jW5106) (file-stat-mtime . jW5105) (file-size-in-bytes . jW5104) (file-writable? . jW5103) (file-executable? . jW5102) (file-readable? . jW5101) (file-regular? . jW5100) (file-symbolic-link? . jW50ff) (file-directory? . jW50fe) (create-symbolic-link . jW50fd) (rename-file . jW50fc) (delete-directory . jW50fb) (create-directory . jW50fa) (create-mosh-cache-dir . jW50f9) (get-environment-variables . jW50f8) (current-exception-handler . jW50f7) (get-environment-variable . jW50f6) (join-wraps . jW50f5) (id->real-label . jW50f4) (same-marks? . jW50f3) (same-marks*? . jW50f2) (get-timeofday . jW50f1) (get-command-line . jW50f0) (sys-display . jW50ef) (whereis . jW50ee) (register . jW50ed) (vm-join! . jW50ec) (vm-set-value! . jW50eb) (vm? . jW50ea) (main-vm? . jW50e9) (vm-eval . jW50e8) (vm-self . jW50e7) (vm-start! . jW50e6) (make-vm . jW50e5) (mutex-try-lock! . jW50e4) (mutex-unlock! . jW50e3) (mutex-lock! . jW50e2) (mutex? . jW50e1) (make-mutex . jW50e0) (condition-variable-notify-all! . jW50df) (condition-variable-notify! . jW50de) (condition-variable-wait! . jW50dd) (make-condition-variable . jW50dc) (write/ss . jW50db) (mosh-executable-path . jW50da) (make-file-options . jW50d9) (source-info . jW50d8) (make-compiler-instruction . jW50d7) (make-instruction . jW50d6) (set-annotation! . jW50d5) (get-annotation . jW50d4) (annotated-pair? . jW50d3) (annotated-cons . jW50d2) (set-source-info! . jW50d1) (bignum? . jW50d0) (fast-equal? . jW50cf) (fasl-read . jW50ce) (fasl-write . jW50cd) (time-usage . jW50cc) (os-constant . jW50cb) (condition-printer . jW50ca) (disasm . jW50c9) (make-parameter . jW2924) (socket-port . jW50c8) (socket-shutdown . jW50c7) (socket-close . jW50c6) (socket-send . jW50c5) (socket-recv! . jW50c4) (socket-recv . jW50c3) (make-server-socket . jW50c2) (make-client-socket . jW50c1) (socket-accept . jW50c0) (socket? . jW50bf) (string-upcase . jW50be) (string-titlecase . jW50bd) (string-normalize-nfkd . jW50bc) (string-normalize-nfkc . jW50bb) (string-normalize-nfd . jW50ba) (string-normalize-nfc . jW50b9) (string-foldcase . jW50b8) (string-downcase . jW50b7) (string-ci>? . jW50b6) (string-ci>=? . jW50b5) (string-ci=? . jW50b4) (string-ci<? . jW50b3) (string-ci<=? . jW50b2) (char-whitespace? . jW50b1) (char-upper-case? . jW50b0) (char-title-case? . jW50af) (char-numeric? . jW50ae) (char-lower-case? . jW50ad) (char-general-category . jW50ac) (char-upcase . jW50ab) (char-titlecase . jW50aa) (char-foldcase . jW50a9) (char-downcase . jW50a8) (char-ci>? . jW50a7) (char-ci>=? . jW50a6) (char-ci=? . jW50a5) (char-ci<? . jW50a4) (char-ci<=? . jW50a3) (char-alphabetic? . jW50a2) (make-variable-transformer . jW2f28) (identifier? . jW31df) (generate-temporaries . jW31cb) (free-identifier=? . jW31cd) (syntax->datum . jW31e3) (datum->syntax . jW31e1) (bound-identifier=? . jW31cf) (record-type-descriptor? . jW50a1) (record-predicate . jW50a0) (record-mutator . jW509f) (record-constructor . jW509e) (record-accessor . jW509d) (make-record-type-descriptor . jW509c) (make-record-constructor-descriptor . jW509b) (record? . jW509a) (record-type-uid . jW5099) (record-type-sealed? . jW5098) (record-type-parent . jW5097) (record-type-opaque? . jW5096) (record-type-name . jW5095) (record-type-generative? . jW5094) (record-type-field-names . jW5093) (record-rtd . jW5092) (record-field-mutable? . jW5091) (delete-file . jW5090) (file-exists? . jW508f) (vector-sort! . jW508e) (vector-sort . jW508d) (list-sort . jW508c) (symbol-hash . jW508b) (string-ci-hash . jW508a) (string-hash . jW5089) (equal-hash . jW5088) (hashtable-equivalence-function . jW5087) (make-hashtable . jW5086) (hashtable-hash-function . jW5085) (make-eqv-hashtable . jW5084) (make-eq-hashtable . jW5083) (hashtable? . jW5082) (hashtable-update! . jW5081) (hashtable-size . jW5080) (hashtable-set! . jW507f) (hashtable-ref . jW507e) (hashtable-mutable? . jW507d) (hashtable-keys . jW507c) (hashtable-entries . jW507b) (hashtable-delete! . jW507a) (hashtable-copy . jW5079) (hashtable-contains? . jW5078) (hashtable-clear! . jW5077) (call-with-output-file . jW5076) (call-with-input-file . jW5075) (write-char . jW5074) (write . jW5073) (with-output-to-file . jW5072) (with-input-from-file . jW5071) (read-char . jW5070) (read . jW506f) (peek-char . jW506e) (open-output-file . jW506d) (open-input-file . jW506c) (newline . jW506b) (display . jW506a) (close-output-port . jW5069) (close-input-port . jW5068) (eof-object? . jW5067) (eof-object . jW5066) (current-error-port . jW5065) (current-output-port . jW5064) (current-input-port . jW5063) (output-port? . jW5062) (input-port? . jW5061) (utf-8-codec . jW5060) (utf-16-codec . jW505f) (transcoder-error-handling-mode . jW505e) (transcoder-eol-style . jW505d) (transcoder-codec . jW505c) (transcoded-port . jW505b) (textual-port? . jW505a) (string->bytevector . jW5059) (standard-output-port . jW5058) (standard-input-port . jW5057) (standard-error-port . jW5056) (set-port-position! . jW5055) (put-u8 . jW5054) (put-string . jW5053) (put-datum . jW5052) (put-char . jW5051) (put-bytevector . jW5050) (port? . jW504f) (port-transcoder . jW504e) (port-position . jW504d) (port-has-set-port-position!? . jW504c) (port-has-port-position? . jW504b) (port-eof? . jW504a) (output-port-buffer-mode . jW5049) (open-string-output-port . jW5048) (open-string-input-port . jW5047) (open-file-output-port . jW5046) (open-file-input/output-port . jW5045) (open-file-input-port . jW5044) (open-bytevector-output-port . jW5043) (open-bytevector-input-port . jW5042) (native-transcoder . jW5041) (native-eol-style . jW5040) (make-transcoder . jW503f) (latin-1-codec . jW503e) (make-i/o-write-error . jW503d) (make-i/o-read-error . jW503c) (make-i/o-port-error . jW503b) (make-i/o-invalid-position-error . jW503a) (make-i/o-filename-error . jW5039) (make-i/o-file-protection-error . jW5038) (make-i/o-file-is-read-only-error . jW5037) (make-i/o-file-does-not-exist-error . jW5036) (make-i/o-file-already-exists-error . jW5035) (make-i/o-error . jW5034) (make-i/o-encoding-error . jW5033) (make-i/o-decoding-error . jW5032) (make-custom-textual-output-port . jW5031) (make-custom-textual-input/output-port . jW5030) (make-custom-textual-input-port . jW502f) (make-custom-binary-output-port . jW502e) (make-custom-binary-input/output-port . jW502d) (make-custom-binary-input-port . jW502c) (make-bytevector . jW502b) (lookahead-u8 . jW502a) (lookahead-char . jW5029) (i/o-write-error? . jW5028) (i/o-read-error? . jW5027) (i/o-port-error? . jW5026) (i/o-invalid-position-error? . jW5025) (i/o-filename-error? . jW5024) (i/o-file-protection-error? . jW5023) (i/o-file-is-read-only-error? . jW5022) (i/o-file-does-not-exist-error? . jW5021) (i/o-file-already-exists-error? . jW5020) (i/o-error? . jW501f) (i/o-error-position . jW501e) (i/o-error-port . jW501d) (i/o-error-filename . jW501c) (i/o-encoding-error? . jW501b) (i/o-encoding-error-char . jW501a) (i/o-decoding-error? . jW5019) (get-u8 . jW5018) (get-string-n! . jW5017) (get-string-n . jW5016) (get-string-all . jW5015) (get-line . jW5014) (get-datum . jW5013) (get-char . jW5012) (get-bytevector-some . jW5011) (get-bytevector-n! . jW5010) (get-bytevector-n . jW500f) (get-bytevector-all . jW500e) (flush-output-port . jW500d) (close-port . jW500c) (scheme-report-environment . jW31b9) (quotient . jW500b) (null-environment . jW31b7) (remainder . jW500a) (modulo . jW5009) (inexact->exact . jW5008) (force . jW5007) (exact->inexact . jW5006) (make-promise . jW5005) (exit . jW5004) (command-line . jW4c96) (string-fill! . jW5003) (string-set! . jW5002) (set-cdr! . jW5001) (set-car! . jW5000) (remove . jW4fff) (remv . jW4ffe) (remp . jW4ffd) (remq . jW4ffc) (partition . jW4ffb) (memv . jW4ffa) (memq . jW4ff9) (memp . jW4ff8) (member . jW4ff7) (exists . jW4ff6) (for-all . jW4ff5) (fold-right . jW4ff4) (fold-left . jW4ff3) (find . jW4ff2) (filter . jW4ff1) (cons* . jW4ff0) (assv . jW4fef) (assq . jW4fee) (assp . jW4fed) (assoc . jW4fec) (call-with-string-output-port . jW4feb) (call-with-port . jW4fea) (call-with-bytevector-output-port . jW4fe9) (bytevector->string . jW4fe8) (buffer-mode? . jW4fe7) (binary-port? . jW4fe6) (with-exception-handler . jW4fe5) (raise-continuable . jW4fe4) (raise . jW4fe3) (eval . jW31bd) (environment . jW31b5) (make-enumeration . jW4fe2) (enum-set=? . jW4fe1) (enum-set-universe . jW4fe0) (enum-set-union . jW4fdf) (enum-set-subset? . jW4fde) (enum-set-projection . jW4fdd) (enum-set-member? . jW4fdc) (enum-set-intersection . jW4fdb) (enum-set-indexer . jW4fda) (enum-set-difference . jW4fd9) (enum-set-constructor . jW4fd8) (enum-set-complement . jW4fd7) (enum-set->list . jW4fd6) (who-condition? . jW4fd5) (warning? . jW4fd4) (violation? . jW4fd3) (undefined-violation? . jW4fd2) (syntax-violation? . jW4fd1) (syntax-violation-subform . jW4fd0) (syntax-violation-form . jW4fcf) (syntax-violation . jW31dd) (simple-conditions . jW4fce) (serious-condition? . jW4fcd) (non-continuable-violation? . jW4fcc) (message-condition? . jW4fcb) (make-who-condition . jW4fca) (make-warning . jW4fc9) (make-violation . jW4fc8) (make-undefined-violation . jW4fc7) (make-syntax-violation . jW4fc6) (make-serious-condition . jW4fc5) (make-non-continuable-violation . jW4fc4) (make-message-condition . jW4fc3) (make-lexical-violation . jW4fc2) (make-irritants-condition . jW4fc1) (make-implementation-restriction-violation . jW4fc0) (make-error . jW4fbf) (make-assertion-violation . jW4fbe) (lexical-violation? . jW4fbd) (irritants-condition? . jW4fbc) (implementation-restriction-violation? . jW4fbb) (error? . jW4fba) (condition-who . jW4fb9) (condition-predicate . jW4fb8) (condition-message . jW4fb7) (condition-irritants . jW4fb6) (condition-accessor . jW4fb5) (condition . jW4fb4) (assertion-violation? . jW4fb3) (condition? . jW4fb2) (utf32->string . jW4fb1) (utf16->string . jW4fb0) (utf8->string . jW4faf) (uint-list->bytevector . jW4fae) (u8-list->bytevector . jW4fad) (string->utf8 . jW4fac) (string->utf32 . jW4fab) (string->utf16 . jW4faa) (sint-list->bytevector . jW4fa9) (native-endianness . jW4fa8) (bytevector? . jW4fa7) (bytevector=? . jW4fa6) (bytevector-uint-set! . jW4fa5) (bytevector-uint-ref . jW4fa4) (bytevector-u8-set! . jW4fa3) (bytevector-u8-ref . jW4fa2) (bytevector-u64-set! . jW4fa1) (bytevector-u64-ref . jW4fa0) (bytevector-u64-native-set! . jW4f9f) (bytevector-u64-native-ref . jW4f9e) (bytevector-u32-set! . jW4f9d) (bytevector-u32-ref . jW4f9c) (bytevector-u32-native-set! . jW4f9b) (bytevector-u32-native-ref . jW4f9a) (bytevector-u16-set! . jW4f99) (bytevector-u16-ref . jW4f98) (bytevector-u16-native-set! . jW4f97) (bytevector-u16-native-ref . jW4f96) (bytevector-sint-set! . jW4f95) (bytevector-sint-ref . jW4f94) (bytevector-s8-set! . jW4f93) (bytevector-s8-ref . jW4f92) (bytevector-s64-set! . jW4f91) (bytevector-s64-ref . jW4f90) (bytevector-s64-native-set! . jW4f8f) (bytevector-s64-native-ref . jW4f8e) (bytevector-s32-set! . jW4f8d) (bytevector-s32-ref . jW4f8c) (bytevector-s32-native-set! . jW4f8b) (bytevector-s32-native-ref . jW4f8a) (bytevector-s16-set! . jW4f89) (bytevector-s16-ref . jW4f88) (bytevector-s16-native-set! . jW4f87) (bytevector-s16-native-ref . jW4f86) (bytevector-length . jW4f85) (bytevector-ieee-single-ref . jW4f84) (bytevector-ieee-single-set! . jW4f83) (bytevector-ieee-single-native-set! . jW4f82) (bytevector-ieee-single-native-ref . jW4f81) (bytevector-ieee-double-set! . jW4f80) (bytevector-ieee-double-ref . jW4f7f) (bytevector-ieee-double-native-set! . jW4f7e) (bytevector-ieee-double-native-ref . jW4f7d) (bytevector-fill! . jW4f7c) (bytevector-copy! . jW4f7b) (bytevector-copy . jW4f7a) (bytevector->uint-list . jW4f79) (bytevector->u8-list . jW4f78) (bytevector->sint-list . jW4f77) (no-nans-violation? . jW4f76) (no-infinities-violation? . jW4f75) (make-no-nans-violation . jW4f74) (make-no-infinities-violation . jW4f73) (real->flonum . jW4f72) (flzero? . jW4f71) (fltruncate . jW4f70) (fltan . jW4f6f) (flsqrt . jW4f6e) (flsin . jW4f6d) (flround . jW4f6c) (flpositive? . jW4f6b) (flonum? . jW4f6a) (flodd? . jW4f69) (flnumerator . jW4f68) (flnegative? . jW4f67) (flnan? . jW4f66) (flmod0 . jW4f65) (flmod . jW4f64) (flmin . jW4f63) (flmax . jW4f62) (fllog . jW4f61) (flinteger? . jW4f60) (flinfinite? . jW4f5f) (flfloor . jW4f5e) (flfinite? . jW4f5d) (flexpt . jW4f5c) (flexp . jW4f5b) (fleven? . jW4f5a) (fldiv0-and-mod0 . jW4f59) (fldiv0 . jW4f58) (fldiv-and-mod . jW4f57) (fldiv . jW4f56) (fldenominator . jW4f55) (flcos . jW4f54) (flceiling . jW4f53) (flatan . jW4f52) (flasin . jW4f51) (flacos . jW4f50) (flabs . jW4f4f) (fl>? . jW4f4e) (fl>=? . jW4f4d) (fl=? . jW4f4c) (fl<? . jW4f4b) (fl<=? . jW4f4a) (fl/ . jW4f49) (fl- . jW4f48) (fl+ . jW4f47) (fl* . jW4f46) (fixnum->flonum . jW4f45) (fxzero? . jW4f44) (fxxor . jW4f43) (fxrotate-bit-field . jW4f42) (fxreverse-bit-field . jW4f41) (fxpositive? . jW4f40) (fxodd? . jW4f3f) (fxnot . jW4f3e) (fxnegative? . jW4f3d) (fxmod0 . jW4f3c) (fxmod . jW4f3b) (fxmin . jW4f3a) (fxmax . jW4f39) (fxlength . jW4f38) (fxior . jW4f37) (fxif . jW4f36) (fxfirst-bit-set . jW4f35) (fxeven? . jW4f34) (fxdiv0-and-mod0 . jW4f33) (fxdiv0 . jW4f32) (fxdiv-and-mod . jW4f31) (fxdiv . jW4f30) (fxcopy-bit-field . jW4f2f) (fxcopy-bit . jW4f2e) (fxbit-set? . jW4f2d) (fxbit-field . jW4f2c) (fxbit-count . jW4f2b) (fxarithmetic-shift-right . jW4f2a) (fxarithmetic-shift-left . jW4f29) (fxarithmetic-shift . jW4f28) (fxand . jW4f27) (fx>? . jW4f26) (fx>=? . jW4f25) (fx=? . jW4f24) (fx<? . jW4f23) (fx<=? . jW4f22) (fx-/carry . jW4f21) (fx- . jW4f20) (fx+/carry . jW4f1f) (fx+ . jW4f1e) (fx*/carry . jW4f1d) (fx* . jW4f1c) (greatest-fixnum . jW4f1b) (least-fixnum . jW4f1a) (fixnum-width . jW4f19) (fixnum? . jW4f18) (bitwise-rotate-bit-field . jW4f17) (bitwise-reverse-bit-field . jW4f16) (bitwise-length . jW4f15) (bitwise-if . jW4f14) (bitwise-first-bit-set . jW4f13) (bitwise-copy-bit-field . jW4f12) (bitwise-copy-bit . jW4f11) (bitwise-bit-set? . jW4f10) (bitwise-bit-field . jW4f0f) (bitwise-bit-count . jW4f0e) (bitwise-xor . jW4f0d) (bitwise-ior . jW4f0c) (bitwise-and . jW4f0b) (bitwise-not . jW4f0a) (bitwise-arithmetic-shift-right . jW4f09) (bitwise-arithmetic-shift-left . jW4f08) (bitwise-arithmetic-shift . jW4f07) (zero? . jW4f06) (vector? . jW4f05) (vector-set! . jW4f04) (vector-ref . jW4f03) (vector-map . jW4f02) (vector-length . jW4f01) (vector-for-each . jW4f00) (vector-fill! . jW4eff) (vector->list . jW4efe) (vector . jW4efd) (values . jW4efc) (truncate . jW4efb) (tan . jW4efa) (symbol? . jW4ef9) (symbol=? . jW4ef8) (symbol->string . jW4ef7) (substring . jW4ef6) (string? . jW4ef5) (string>? . jW4ef4) (string>=? . jW4ef3) (string=? . jW4ef2) (string<? . jW4ef1) (string<=? . jW4ef0) (string-ref . jW4eef) (string-length . jW4eee) (string-for-each . jW4eed) (string-copy . jW4eec) (string-append . jW4eeb) (string->symbol . jW4eea) (string->number . jW4ee9) (string->list . jW4ee8) (string . jW4ee7) (sqrt . jW4ee6) (sin . jW4ee5) (round . jW4ee4) (reverse . jW4ee3) (real? . jW4ee2) (real-valued? . jW4ee1) (real-part . jW4ee0) (rationalize . jW4edf) (rational? . jW4ede) (rational-valued? . jW4edd) (procedure? . jW4edc) (positive? . jW4edb) (pair? . jW4eda) (odd? . jW4ed9) (numerator . jW4ed8) (number? . jW4ed7) (number->string . jW4ed6) (null? . jW4ed5) (not . jW4ed4) (negative? . jW4ed3) (nan? . jW4ed2) (min . jW4ed1) (max . jW4ed0) (map . jW4ecf) (make-vector . jW4ece) (make-string . jW4ecd) (make-rectangular . jW4ecc) (make-polar . jW4ecb) (magnitude . jW4eca) (log . jW4ec9) (list? . jW4ec8) (list-tail . jW4ec7) (list-ref . jW4ec6) (list->vector . jW4ec5) (list->string . jW4ec4) (list . jW4ec3) (length . jW4ec2) (lcm . jW4ec1) (integer? . jW4ec0) (integer-valued? . jW4ebf) (integer->char . jW4ebe) (infinite? . jW4ebd) (inexact? . jW4ebc) (inexact . jW4ebb) (imag-part . jW4eba) (gcd . jW4eb9) (for-each . jW4eb8) (floor . jW4eb7) (finite? . jW4eb6) (expt . jW4eb5) (exp . jW4eb4) (exact? . jW4eb3) (exact-integer-sqrt . jW4eb2) (exact . jW4eb1) (even? . jW4eb0) (error . jW4eaf) (eqv? . jW4eae) (equal? . jW4ead) (eq? . jW4eac) (dynamic-wind . jW4eab) (div0-and-mod0 . jW4eaa) (mod0 . jW4ea9) (div0 . jW4ea8) (div-and-mod . jW4ea7) (mod . jW4ea6) (div . jW4ea5) (denominator . jW4ea4) (cos . jW4ea3) (cons . jW4ea2) (complex? . jW4ea1) (char? . jW4ea0) (char>? . jW4e9f) (char>=? . jW4e9e) (char=? . jW4e9d) (char<? . jW4e9c) (char<=? . jW4e9b) (char->integer . jW4e9a) (ceiling . jW4e99) (call-with-values . jW4e98) (call/cc . jW4e97) (call-with-current-continuation . jW4e96) (cddddr . jW4e95) (cdddar . jW4e94) (cddadr . jW4e93) (cddaar . jW4e92) (cdaddr . jW4e91) (cdadar . jW4e90) (cdaadr . jW4e8f) (cdaaar . jW4e8e) (cadddr . jW4e8d) (caddar . jW4e8c) (cadadr . jW4e8b) (cadaar . jW4e8a) (caaddr . jW4e89) (caadar . jW4e88) (caaadr . jW4e87) (caaaar . jW4e86) (cdddr . jW4e85) (cddar . jW4e84) (cdadr . jW4e83) (cdaar . jW4e82) (caddr . jW4e81) (cadar . jW4e80) (caadr . jW4e7f) (caaar . jW4e7e) (cddr . jW4e7d) (cdar . jW4e7c) (cadr . jW4e7b) (caar . jW4e7a) (cdr . jW4e79) (car . jW4e78) (boolean? . jW4e77) (boolean=? . jW4e76) (atan . jW4e75) (assertion-violation . jW4e74) (assertion-error . jW31d7) (asin . jW4e73) (apply . jW4e72) (append . jW4e71) (angle . jW4e70) (acos . jW4e6f) (abs . jW4e6e) (/ . jW4e6d) (* . jW4e6c) (- . jW4e6b) (+ . jW4e6a) (>= . jW4e69) (> . jW4e68) (= . jW4e67) (<= . jW4e66) (< . jW4e65) (library . jW4e64) (&no-nans . jW4e63) (&no-infinities . jW4e62) (&i/o-encoding . jW4e61) (&i/o-decoding . jW4e60) (&i/o-port . jW4e5f) (&i/o-file-does-not-exist . jW4e5e) (&i/o-file-already-exists . jW4e5d) (&i/o-file-is-read-only . jW4e5c) (&i/o-file-protection . jW4e5b) (&i/o-filename . jW4e5a) (&i/o-invalid-position . jW4e59) (&i/o-write . jW4e58) (&i/o-read . jW4e57) (&i/o . jW4e56) (&undefined . jW4e55) (&syntax . jW4e54) (&lexical . jW4e53) (&implementation-restriction . jW4e52) (&non-continuable . jW4e51) (&who . jW4e50) (&irritants . jW4e4f) (&assertion . jW4e4e) (&violation . jW4e4d) (&error . jW4e4c) (&serious . jW4e4b) (&warning . jW4e4a) (&message . jW4e49) (&condition . jW4e48) (define-condition-type . jW4e47) (define-enumeration . jW4e46) (define-record-type . jW4e45) (parent-rtd . jW4e44) (nongenerative . jW4e43) (opaque . jW4e42) (sealed . jW4e41) (protocol . jW4e40) (parent . jW4e3f) (immutable . jW4e3e) (mutable . jW4e3d) (fields . jW4e3c) (error-handling-mode . jW4e3b) (file-options . jW4e3a) (buffer-mode . jW4e39) (eol-style . jW4e38) (guard . jW4e37) (trace-define . jW4e36) (trace-lambda . jW4e35) (unsyntax-splicing . jW4e34) (unsyntax . jW4e33) (unquote-splicing . jW4e32) (unquote . jW4e31) (_ . jW4e30) (else . jW4e2f) (=> . jW4e2e) (... . jW4e2d) (assert . jW4e2c) (endianness . jW4e2b) (delay . jW4e2a) (time . jW4e29) (do . jW4e28) (cond . jW4e27) (let* . jW4e26) (let*-values . jW4e25) (let-values . jW4e24) (identifier-syntax . jW4e23) (with-syntax . jW4e22) (quasisyntax . jW4e21) (quasiquote . jW4e20) (syntax-rules . jW4e1f) (include . jW4e1e) (define-struct . jW4e1d) (record-constructor-descriptor . jW4e1c) (record-type-descriptor . jW4e1b) (case . jW4e1a) (parameterize . jW4e19) (unless . jW4e18) (when . jW4e17) (or . jW4e16) (and . jW4e15) (if . jW4e14) (let . jW4e13) (letrec* . jW4e12) (letrec . jW4e11) (type-descriptor . jW4e10) (case-lambda . jW4e0f) (lambda . jW4e0e) (syntax . jW4e0d) (syntax-case . jW4e0c) (quote . jW4e0b) (foreign-call . jW4e0a) (letrec-syntax . jW4e09) (let-syntax . jW4e08) (set! . jW4e07) (import . jW4e06) (begin . jW4e05) (module . jW4e04) (define-syntax . jW4e03) (define . jW4e02)) '((jW51ad core-prim . &no-nans-rcd) (jW51ac core-prim . &no-nans-rtd) (jW51ab core-prim . &no-infinities-rcd) (jW51aa core-prim . &no-infinities-rtd) (jW51a9 core-prim . &i/o-encoding-rcd) (jW51a8 core-prim . &i/o-encoding-rtd) (jW51a7 core-prim . &i/o-decoding-rcd) (jW51a6 core-prim . &i/o-decoding-rtd) (jW51a5 core-prim . &i/o-port-rcd) (jW51a4 core-prim . &i/o-port-rtd) (jW51a3 core-prim . &i/o-file-does-not-exist-rcd) (jW51a2 core-prim . &i/o-file-does-not-exist-rtd) (jW51a1 core-prim . &i/o-file-already-exists-rcd) (jW51a0 core-prim . &i/o-file-already-exists-rtd) (jW519f core-prim . &i/o-file-is-read-only-rcd) (jW519e core-prim . &i/o-file-is-read-only-rtd) (jW519d core-prim . &i/o-file-protection-rcd) (jW519c core-prim . &i/o-file-protection-rtd) (jW519b core-prim . &i/o-filename-rcd) (jW519a core-prim . &i/o-filename-rtd) (jW5199 core-prim . &i/o-invalid-position-rcd) (jW5198 core-prim . &i/o-invalid-position-rtd) (jW5197 core-prim . &i/o-write-rcd) (jW5196 core-prim . &i/o-write-rtd) (jW5195 core-prim . &i/o-read-rcd) (jW5194 core-prim . &i/o-read-rtd) (jW5193 core-prim . &i/o-rcd) (jW5192 core-prim . &i/o-rtd) (jW5191 core-prim . &undefined-rcd) (jW5190 core-prim . &undefined-rtd) (jW518f core-prim . &syntax-rcd) (jW518e core-prim . &syntax-rtd) (jW518d core-prim . &lexical-rcd) (jW518c core-prim . &lexical-rtd) (jW518b core-prim . &implementation-restriction-rcd) (jW518a core-prim . &implementation-restriction-rtd) (jW5189 core-prim . &non-continuable-rcd) (jW5188 core-prim . &non-continuable-rtd) (jW5187 core-prim . &who-rcd) (jW5186 core-prim . &who-rtd) (jW5185 core-prim . &irritants-rcd) (jW5184 core-prim . &irritants-rtd) (jW5183 core-prim . &assertion-rcd) (jW5182 core-prim . &assertion-rtd) (jW5181 core-prim . &violation-rcd) (jW5180 core-prim . &violation-rtd) (jW517f core-prim . &error-rcd) (jW517e core-prim . &error-rtd) (jW517d core-prim . &serious-rcd) (jW517c core-prim . &serious-rtd) (jW517b core-prim . &warning-rcd) (jW517a core-prim . &warning-rtd) (jW5179 core-prim . &message-rcd) (jW5178 core-prim . &message-rtd) (jW5177 core-prim . &condition-rcd) (jW5176 core-prim . &condition-rtd) (jW31d9 core-prim . syntax-error) (jW30fd core-prim . syntax-dispatch) (jW5175 core-prim . pretty-print) (jW5174 core-prim . eval-core) (jW5173 core-prim . set-symbol-value!) (jW5172 core-prim . symbol-value) (jW5171 core-prim . gensym) (jW5170 core-prim . void) (jW4c9c core-prim . load) (jW31eb core-prim . interaction-environment) (jW516f core-prim . char-ready?) (jW516e core-prim . regexp?) (jW516d core-prim . read-line) (jW516c core-prim . gensym-prefix-set!) (jW516b core-prim . ungensym) (jW516a core-prim . alist->eq-hash-table) (jW5169 core-prim . assoc-ref) (jW5168 core-prim . print) (jW5167 core-prim . format) (jW5166 core-prim . host-os) (jW2b3c core-prim . library-path) (jW5165 core-prim . standard-library-path) (jW5164 core-prim . ssl-supported?) (jW5163 core-prim . ssl-socket?) (jW5162 core-prim . socket-sslize!) (jW5161 core-prim . %monapi-name-whereis) (jW5160 core-prim . %monapi-message-send) (jW515f core-prim . file-newer?) (jW515e core-prim . stat-mtime) (jW515d core-prim . write-to-file) (jW515c core-prim . file->list) (jW515b core-prim . file->string) (jW515a core-prim . digit->integer) (jW5159 core-prim . call-with-string-input-port) (jW5158 core-prim . call-with-string-io) (jW5157 core-prim . string-split) (jW5156 core-prim . bytevector-for-each) (jW5155 core-prim . string->regexp) (jW5154 core-prim . rxmatch) (jW5153 core-prim . regexp-replace-all) (jW5152 core-prim . hashtable-fold-left) (jW5151 core-prim . hashtable-for-each) (jW2926 core-prim . mosh-cache-dir) (jW5150 core-prim . %call-process) (jW514f core-prim . local-tz-offset) (jW514e core-prim . microseconds) (jW514d core-prim . directory-list) (jW514c core-prim . set-current-directory!) (jW514b core-prim . expand-path) (jW514a core-prim . current-directory) (jW5149 core-prim . %getpid) (jW5148 core-prim . %spawn) (jW5147 core-prim . %waitpid) (jW5146 core-prim . simple-struct-name) (jW5145 core-prim . simple-struct-set!) (jW5144 core-prim . simple-struct-ref) (jW5143 core-prim . make-simple-struct) (jW5142 core-prim . simple-struct?) (jW5141 core-prim . pointer-ref-c-int64) (jW5140 core-prim . pointer-ref-c-int32) (jW513f core-prim . pointer-ref-c-int16) (jW513e core-prim . pointer-ref-c-int8) (jW513d core-prim . pointer-ref-c-uint64) (jW513c core-prim . pointer-ref-c-uint32) (jW513b core-prim . pointer-ref-c-uint16) (jW513a core-prim . pointer-ref-c-uint8) (jW5139 core-prim . pointer-set-c-uint64!) (jW5138 core-prim . pointer-set-c-uint32!) (jW5137 core-prim . pointer-set-c-uint16!) (jW5136 core-prim . pointer-set-c-uint8!) (jW5135 core-prim . pointer-set-c-int64!) (jW5134 core-prim . pointer-set-c-int32!) (jW5133 core-prim . pointer-set-c-int16!) (jW5132 core-prim . pointer-set-c-int8!) (jW5131 core-prim . pointer-set-c-pointer!) (jW5130 core-prim . pointer-set-c-double!) (jW512f core-prim . pointer-set-c-float!) (jW512e core-prim . pointer-set-c-long-long!) (jW512d core-prim . pointer-set-c-long!) (jW512c core-prim . pointer-set-c-int!) (jW512b core-prim . pointer-set-c-short!) (jW512a core-prim . pointer-set-c-char!) (jW5129 core-prim . pointer-ref-c-pointer) (jW5128 core-prim . pointer-ref-c-double) (jW5127 core-prim . pointer-ref-c-float) (jW5126 core-prim . pointer-ref-c-unsigned-long-long) (jW5125 core-prim . pointer-ref-c-signed-long-long) (jW5124 core-prim . pointer-ref-c-unsigned-long) (jW5123 core-prim . pointer-ref-c-signed-long) (jW5122 core-prim . pointer-ref-c-unsigned-int) (jW5121 core-prim . pointer-ref-c-signed-int) (jW5120 core-prim . pointer-ref-c-unsigned-short) (jW511f core-prim . pointer-ref-c-signed-short) (jW511e core-prim . pointer-ref-c-unsigned-char) (jW511d core-prim . pointer-ref-c-signed-char) (jW511c core-prim . pointer->integer) (jW511b core-prim . integer->pointer) (jW511a core-prim . pointer?) (jW5119 core-prim . shared-errno) (jW5118 core-prim . %ffi-free-c-callback-trampoline) (jW5117 core-prim . %ffi-make-c-callback-trampoline) (jW5116 core-prim . %ffi-free) (jW5115 core-prim . %ffi-malloc) (jW5114 core-prim . %ffi-supported?) (jW5113 core-prim . %ffi-pointer->string) (jW5112 core-prim . %ffi-call) (jW5111 core-prim . %ffi-lookup) (jW5110 core-prim . %ffi-open) (jW510f core-prim . null-terminated-utf8->string) (jW510e core-prim . null-terminated-bytevector->string) (jW510d core-prim . %exec) (jW510c core-prim . %fork) (jW510b core-prim . %pipe) (jW510a core-prim . p) (jW5109 core-prim . open-output-string) (jW5108 core-prim . get-output-string) (jW5107 core-prim . file-stat-ctime) (jW5106 core-prim . file-stat-atime) (jW5105 core-prim . file-stat-mtime) (jW5104 core-prim . file-size-in-bytes) (jW5103 core-prim . file-writable?) (jW5102 core-prim . file-executable?) (jW5101 core-prim . file-readable?) (jW5100 core-prim . file-regular?) (jW50ff core-prim . file-symbolic-link?) (jW50fe core-prim . file-directory?) (jW50fd core-prim . create-symbolic-link) (jW50fc core-prim . rename-file) (jW50fb core-prim . delete-directory) (jW50fa core-prim . create-directory) (jW50f9 core-prim . create-mosh-cache-dir) (jW50f8 core-prim . get-environment-variables) (jW50f7 core-prim . current-exception-handler) (jW50f6 core-prim . get-environment-variable) (jW50f5 core-prim . join-wraps) (jW50f4 core-prim . id->real-label) (jW50f3 core-prim . same-marks?) (jW50f2 core-prim . same-marks*?) (jW50f1 core-prim . get-timeofday) (jW50f0 core-prim . get-command-line) (jW50ef core-prim . sys-display) (jW50ee core-prim . whereis) (jW50ed core-prim . register) (jW50ec core-prim . vm-join!) (jW50eb core-prim . vm-set-value!) (jW50ea core-prim . vm?) (jW50e9 core-prim . main-vm?) (jW50e8 core-prim . vm-eval) (jW50e7 core-prim . vm-self) (jW50e6 core-prim . vm-start!) (jW50e5 core-prim . make-vm) (jW50e4 core-prim . mutex-try-lock!) (jW50e3 core-prim . mutex-unlock!) (jW50e2 core-prim . mutex-lock!) (jW50e1 core-prim . mutex?) (jW50e0 core-prim . make-mutex) (jW50df core-prim . condition-variable-notify-all!) (jW50de core-prim . condition-variable-notify!) (jW50dd core-prim . condition-variable-wait!) (jW50dc core-prim . make-condition-variable) (jW50db core-prim . write/ss) (jW50da core-prim . mosh-executable-path) (jW50d9 core-prim . make-file-options) (jW50d8 core-prim . source-info) (jW50d7 core-prim . make-compiler-instruction) (jW50d6 core-prim . make-instruction) (jW50d5 core-prim . set-annotation!) (jW50d4 core-prim . get-annotation) (jW50d3 core-prim . annotated-pair?) (jW50d2 core-prim . annotated-cons) (jW50d1 core-prim . set-source-info!) (jW50d0 core-prim . bignum?) (jW50cf core-prim . fast-equal?) (jW50ce core-prim . fasl-read) (jW50cd core-prim . fasl-write) (jW50cc core-prim . time-usage) (jW50cb core-prim . os-constant) (jW50ca core-prim . condition-printer) (jW50c9 core-prim . disasm) (jW2924 core-prim . make-parameter) (jW50c8 core-prim . socket-port) (jW50c7 core-prim . socket-shutdown) (jW50c6 core-prim . socket-close) (jW50c5 core-prim . socket-send) (jW50c4 core-prim . socket-recv!) (jW50c3 core-prim . socket-recv) (jW50c2 core-prim . make-server-socket) (jW50c1 core-prim . make-client-socket) (jW50c0 core-prim . socket-accept) (jW50bf core-prim . socket?) (jW50be core-prim . string-upcase) (jW50bd core-prim . string-titlecase) (jW50bc core-prim . string-normalize-nfkd) (jW50bb core-prim . string-normalize-nfkc) (jW50ba core-prim . string-normalize-nfd) (jW50b9 core-prim . string-normalize-nfc) (jW50b8 core-prim . string-foldcase) (jW50b7 core-prim . string-downcase) (jW50b6 core-prim . string-ci>?) (jW50b5 core-prim . string-ci>=?) (jW50b4 core-prim . string-ci=?) (jW50b3 core-prim . string-ci<?) (jW50b2 core-prim . string-ci<=?) (jW50b1 core-prim . char-whitespace?) (jW50b0 core-prim . char-upper-case?) (jW50af core-prim . char-title-case?) (jW50ae core-prim . char-numeric?) (jW50ad core-prim . char-lower-case?) (jW50ac core-prim . char-general-category) (jW50ab core-prim . char-upcase) (jW50aa core-prim . char-titlecase) (jW50a9 core-prim . char-foldcase) (jW50a8 core-prim . char-downcase) (jW50a7 core-prim . char-ci>?) (jW50a6 core-prim . char-ci>=?) (jW50a5 core-prim . char-ci=?) (jW50a4 core-prim . char-ci<?) (jW50a3 core-prim . char-ci<=?) (jW50a2 core-prim . char-alphabetic?) (jW2f28 core-prim . make-variable-transformer) (jW31df core-prim . identifier?) (jW31cb core-prim . generate-temporaries) (jW31cd core-prim . free-identifier=?) (jW31e3 core-prim . syntax->datum) (jW31e1 core-prim . datum->syntax) (jW31cf core-prim . bound-identifier=?) (jW50a1 core-prim . record-type-descriptor?) (jW50a0 core-prim . record-predicate) (jW509f core-prim . record-mutator) (jW509e core-prim . record-constructor) (jW509d core-prim . record-accessor) (jW509c core-prim . make-record-type-descriptor) (jW509b core-prim . make-record-constructor-descriptor) (jW509a core-prim . record?) (jW5099 core-prim . record-type-uid) (jW5098 core-prim . record-type-sealed?) (jW5097 core-prim . record-type-parent) (jW5096 core-prim . record-type-opaque?) (jW5095 core-prim . record-type-name) (jW5094 core-prim . record-type-generative?) (jW5093 core-prim . record-type-field-names) (jW5092 core-prim . record-rtd) (jW5091 core-prim . record-field-mutable?) (jW5090 core-prim . delete-file) (jW508f core-prim . file-exists?) (jW508e core-prim . vector-sort!) (jW508d core-prim . vector-sort) (jW508c core-prim . list-sort) (jW508b core-prim . symbol-hash) (jW508a core-prim . string-ci-hash) (jW5089 core-prim . string-hash) (jW5088 core-prim . equal-hash) (jW5087 core-prim . hashtable-equivalence-function) (jW5086 core-prim . make-hashtable) (jW5085 core-prim . hashtable-hash-function) (jW5084 core-prim . make-eqv-hashtable) (jW5083 core-prim . make-eq-hashtable) (jW5082 core-prim . hashtable?) (jW5081 core-prim . hashtable-update!) (jW5080 core-prim . hashtable-size) (jW507f core-prim . hashtable-set!) (jW507e core-prim . hashtable-ref) (jW507d core-prim . hashtable-mutable?) (jW507c core-prim . hashtable-keys) (jW507b core-prim . hashtable-entries) (jW507a core-prim . hashtable-delete!) (jW5079 core-prim . hashtable-copy) (jW5078 core-prim . hashtable-contains?) (jW5077 core-prim . hashtable-clear!) (jW5076 core-prim . call-with-output-file) (jW5075 core-prim . call-with-input-file) (jW5074 core-prim . write-char) (jW5073 core-prim . write) (jW5072 core-prim . with-output-to-file) (jW5071 core-prim . with-input-from-file) (jW5070 core-prim . read-char) (jW506f core-prim . read) (jW506e core-prim . peek-char) (jW506d core-prim . open-output-file) (jW506c core-prim . open-input-file) (jW506b core-prim . newline) (jW506a core-prim . display) (jW5069 core-prim . close-output-port) (jW5068 core-prim . close-input-port) (jW5067 core-prim . eof-object?) (jW5066 core-prim . eof-object) (jW5065 core-prim . current-error-port) (jW5064 core-prim . current-output-port) (jW5063 core-prim . current-input-port) (jW5062 core-prim . output-port?) (jW5061 core-prim . input-port?) (jW5060 core-prim . utf-8-codec) (jW505f core-prim . utf-16-codec) (jW505e core-prim . transcoder-error-handling-mode) (jW505d core-prim . transcoder-eol-style) (jW505c core-prim . transcoder-codec) (jW505b core-prim . transcoded-port) (jW505a core-prim . textual-port?) (jW5059 core-prim . string->bytevector) (jW5058 core-prim . standard-output-port) (jW5057 core-prim . standard-input-port) (jW5056 core-prim . standard-error-port) (jW5055 core-prim . set-port-position!) (jW5054 core-prim . put-u8) (jW5053 core-prim . put-string) (jW5052 core-prim . put-datum) (jW5051 core-prim . put-char) (jW5050 core-prim . put-bytevector) (jW504f core-prim . port?) (jW504e core-prim . port-transcoder) (jW504d core-prim . port-position) (jW504c core-prim . port-has-set-port-position!?) (jW504b core-prim . port-has-port-position?) (jW504a core-prim . port-eof?) (jW5049 core-prim . output-port-buffer-mode) (jW5048 core-prim . open-string-output-port) (jW5047 core-prim . open-string-input-port) (jW5046 core-prim . open-file-output-port) (jW5045 core-prim . open-file-input/output-port) (jW5044 core-prim . open-file-input-port) (jW5043 core-prim . open-bytevector-output-port) (jW5042 core-prim . open-bytevector-input-port) (jW5041 core-prim . native-transcoder) (jW5040 core-prim . native-eol-style) (jW503f core-prim . make-transcoder) (jW503e core-prim . latin-1-codec) (jW503d core-prim . make-i/o-write-error) (jW503c core-prim . make-i/o-read-error) (jW503b core-prim . make-i/o-port-error) (jW503a core-prim . make-i/o-invalid-position-error) (jW5039 core-prim . make-i/o-filename-error) (jW5038 core-prim . make-i/o-file-protection-error) (jW5037 core-prim . make-i/o-file-is-read-only-error) (jW5036 core-prim . make-i/o-file-does-not-exist-error) (jW5035 core-prim . make-i/o-file-already-exists-error) (jW5034 core-prim . make-i/o-error) (jW5033 core-prim . make-i/o-encoding-error) (jW5032 core-prim . make-i/o-decoding-error) (jW5031 core-prim . make-custom-textual-output-port) (jW5030 core-prim . make-custom-textual-input/output-port) (jW502f core-prim . make-custom-textual-input-port) (jW502e core-prim . make-custom-binary-output-port) (jW502d core-prim . make-custom-binary-input/output-port) (jW502c core-prim . make-custom-binary-input-port) (jW502b core-prim . make-bytevector) (jW502a core-prim . lookahead-u8) (jW5029 core-prim . lookahead-char) (jW5028 core-prim . i/o-write-error?) (jW5027 core-prim . i/o-read-error?) (jW5026 core-prim . i/o-port-error?) (jW5025 core-prim . i/o-invalid-position-error?) (jW5024 core-prim . i/o-filename-error?) (jW5023 core-prim . i/o-file-protection-error?) (jW5022 core-prim . i/o-file-is-read-only-error?) (jW5021 core-prim . i/o-file-does-not-exist-error?) (jW5020 core-prim . i/o-file-already-exists-error?) (jW501f core-prim . i/o-error?) (jW501e core-prim . i/o-error-position) (jW501d core-prim . i/o-error-port) (jW501c core-prim . i/o-error-filename) (jW501b core-prim . i/o-encoding-error?) (jW501a core-prim . i/o-encoding-error-char) (jW5019 core-prim . i/o-decoding-error?) (jW5018 core-prim . get-u8) (jW5017 core-prim . get-string-n!) (jW5016 core-prim . get-string-n) (jW5015 core-prim . get-string-all) (jW5014 core-prim . get-line) (jW5013 core-prim . get-datum) (jW5012 core-prim . get-char) (jW5011 core-prim . get-bytevector-some) (jW5010 core-prim . get-bytevector-n!) (jW500f core-prim . get-bytevector-n) (jW500e core-prim . get-bytevector-all) (jW500d core-prim . flush-output-port) (jW500c core-prim . close-port) (jW31b9 core-prim . scheme-report-environment) (jW500b core-prim . quotient) (jW31b7 core-prim . null-environment) (jW500a core-prim . remainder) (jW5009 core-prim . modulo) (jW5008 core-prim . inexact->exact) (jW5007 core-prim . force) (jW5006 core-prim . exact->inexact) (jW5005 core-prim . make-promise) (jW5004 core-prim . exit) (jW4c96 core-prim . command-line) (jW5003 core-prim . string-fill!) (jW5002 core-prim . string-set!) (jW5001 core-prim . set-cdr!) (jW5000 core-prim . set-car!) (jW4fff core-prim . remove) (jW4ffe core-prim . remv) (jW4ffd core-prim . remp) (jW4ffc core-prim . remq) (jW4ffb core-prim . partition) (jW4ffa core-prim . memv) (jW4ff9 core-prim . memq) (jW4ff8 core-prim . memp) (jW4ff7 core-prim . member) (jW4ff6 core-prim . exists) (jW4ff5 core-prim . for-all) (jW4ff4 core-prim . fold-right) (jW4ff3 core-prim . fold-left) (jW4ff2 core-prim . find) (jW4ff1 core-prim . filter) (jW4ff0 core-prim . cons*) (jW4fef core-prim . assv) (jW4fee core-prim . assq) (jW4fed core-prim . assp) (jW4fec core-prim . assoc) (jW4feb core-prim . call-with-string-output-port) (jW4fea core-prim . call-with-port) (jW4fe9 core-prim . call-with-bytevector-output-port) (jW4fe8 core-prim . bytevector->string) (jW4fe7 core-prim . buffer-mode?) (jW4fe6 core-prim . binary-port?) (jW4fe5 core-prim . with-exception-handler) (jW4fe4 core-prim . raise-continuable) (jW4fe3 core-prim . raise) (jW31bd core-prim . eval) (jW31b5 core-prim . environment) (jW4fe2 core-prim . make-enumeration) (jW4fe1 core-prim . enum-set=?) (jW4fe0 core-prim . enum-set-universe) (jW4fdf core-prim . enum-set-union) (jW4fde core-prim . enum-set-subset?) (jW4fdd core-prim . enum-set-projection) (jW4fdc core-prim . enum-set-member?) (jW4fdb core-prim . enum-set-intersection) (jW4fda core-prim . enum-set-indexer) (jW4fd9 core-prim . enum-set-difference) (jW4fd8 core-prim . enum-set-constructor) (jW4fd7 core-prim . enum-set-complement) (jW4fd6 core-prim . enum-set->list) (jW4fd5 core-prim . who-condition?) (jW4fd4 core-prim . warning?) (jW4fd3 core-prim . violation?) (jW4fd2 core-prim . undefined-violation?) (jW4fd1 core-prim . syntax-violation?) (jW4fd0 core-prim . syntax-violation-subform) (jW4fcf core-prim . syntax-violation-form) (jW31dd core-prim . syntax-violation) (jW4fce core-prim . simple-conditions) (jW4fcd core-prim . serious-condition?) (jW4fcc core-prim . non-continuable-violation?) (jW4fcb core-prim . message-condition?) (jW4fca core-prim . make-who-condition) (jW4fc9 core-prim . make-warning) (jW4fc8 core-prim . make-violation) (jW4fc7 core-prim . make-undefined-violation) (jW4fc6 core-prim . make-syntax-violation) (jW4fc5 core-prim . make-serious-condition) (jW4fc4 core-prim . make-non-continuable-violation) (jW4fc3 core-prim . make-message-condition) (jW4fc2 core-prim . make-lexical-violation) (jW4fc1 core-prim . make-irritants-condition) (jW4fc0 core-prim . make-implementation-restriction-violation) (jW4fbf core-prim . make-error) (jW4fbe core-prim . make-assertion-violation) (jW4fbd core-prim . lexical-violation?) (jW4fbc core-prim . irritants-condition?) (jW4fbb core-prim . implementation-restriction-violation?) (jW4fba core-prim . error?) (jW4fb9 core-prim . condition-who) (jW4fb8 core-prim . condition-predicate) (jW4fb7 core-prim . condition-message) (jW4fb6 core-prim . condition-irritants) (jW4fb5 core-prim . condition-accessor) (jW4fb4 core-prim . condition) (jW4fb3 core-prim . assertion-violation?) (jW4fb2 core-prim . condition?) (jW4fb1 core-prim . utf32->string) (jW4fb0 core-prim . utf16->string) (jW4faf core-prim . utf8->string) (jW4fae core-prim . uint-list->bytevector) (jW4fad core-prim . u8-list->bytevector) (jW4fac core-prim . string->utf8) (jW4fab core-prim . string->utf32) (jW4faa core-prim . string->utf16) (jW4fa9 core-prim . sint-list->bytevector) (jW4fa8 core-prim . native-endianness) (jW4fa7 core-prim . bytevector?) (jW4fa6 core-prim . bytevector=?) (jW4fa5 core-prim . bytevector-uint-set!) (jW4fa4 core-prim . bytevector-uint-ref) (jW4fa3 core-prim . bytevector-u8-set!) (jW4fa2 core-prim . bytevector-u8-ref) (jW4fa1 core-prim . bytevector-u64-set!) (jW4fa0 core-prim . bytevector-u64-ref) (jW4f9f core-prim . bytevector-u64-native-set!) (jW4f9e core-prim . bytevector-u64-native-ref) (jW4f9d core-prim . bytevector-u32-set!) (jW4f9c core-prim . bytevector-u32-ref) (jW4f9b core-prim . bytevector-u32-native-set!) (jW4f9a core-prim . bytevector-u32-native-ref) (jW4f99 core-prim . bytevector-u16-set!) (jW4f98 core-prim . bytevector-u16-ref) (jW4f97 core-prim . bytevector-u16-native-set!) (jW4f96 core-prim . bytevector-u16-native-ref) (jW4f95 core-prim . bytevector-sint-set!) (jW4f94 core-prim . bytevector-sint-ref) (jW4f93 core-prim . bytevector-s8-set!) (jW4f92 core-prim . bytevector-s8-ref) (jW4f91 core-prim . bytevector-s64-set!) (jW4f90 core-prim . bytevector-s64-ref) (jW4f8f core-prim . bytevector-s64-native-set!) (jW4f8e core-prim . bytevector-s64-native-ref) (jW4f8d core-prim . bytevector-s32-set!) (jW4f8c core-prim . bytevector-s32-ref) (jW4f8b core-prim . bytevector-s32-native-set!) (jW4f8a core-prim . bytevector-s32-native-ref) (jW4f89 core-prim . bytevector-s16-set!) (jW4f88 core-prim . bytevector-s16-ref) (jW4f87 core-prim . bytevector-s16-native-set!) (jW4f86 core-prim . bytevector-s16-native-ref) (jW4f85 core-prim . bytevector-length) (jW4f84 core-prim . bytevector-ieee-single-ref) (jW4f83 core-prim . bytevector-ieee-single-set!) (jW4f82 core-prim . bytevector-ieee-single-native-set!) (jW4f81 core-prim . bytevector-ieee-single-native-ref) (jW4f80 core-prim . bytevector-ieee-double-set!) (jW4f7f core-prim . bytevector-ieee-double-ref) (jW4f7e core-prim . bytevector-ieee-double-native-set!) (jW4f7d core-prim . bytevector-ieee-double-native-ref) (jW4f7c core-prim . bytevector-fill!) (jW4f7b core-prim . bytevector-copy!) (jW4f7a core-prim . bytevector-copy) (jW4f79 core-prim . bytevector->uint-list) (jW4f78 core-prim . bytevector->u8-list) (jW4f77 core-prim . bytevector->sint-list) (jW4f76 core-prim . no-nans-violation?) (jW4f75 core-prim . no-infinities-violation?) (jW4f74 core-prim . make-no-nans-violation) (jW4f73 core-prim . make-no-infinities-violation) (jW4f72 core-prim . real->flonum) (jW4f71 core-prim . flzero?) (jW4f70 core-prim . fltruncate) (jW4f6f core-prim . fltan) (jW4f6e core-prim . flsqrt) (jW4f6d core-prim . flsin) (jW4f6c core-prim . flround) (jW4f6b core-prim . flpositive?) (jW4f6a core-prim . flonum?) (jW4f69 core-prim . flodd?) (jW4f68 core-prim . flnumerator) (jW4f67 core-prim . flnegative?) (jW4f66 core-prim . flnan?) (jW4f65 core-prim . flmod0) (jW4f64 core-prim . flmod) (jW4f63 core-prim . flmin) (jW4f62 core-prim . flmax) (jW4f61 core-prim . fllog) (jW4f60 core-prim . flinteger?) (jW4f5f core-prim . flinfinite?) (jW4f5e core-prim . flfloor) (jW4f5d core-prim . flfinite?) (jW4f5c core-prim . flexpt) (jW4f5b core-prim . flexp) (jW4f5a core-prim . fleven?) (jW4f59 core-prim . fldiv0-and-mod0) (jW4f58 core-prim . fldiv0) (jW4f57 core-prim . fldiv-and-mod) (jW4f56 core-prim . fldiv) (jW4f55 core-prim . fldenominator) (jW4f54 core-prim . flcos) (jW4f53 core-prim . flceiling) (jW4f52 core-prim . flatan) (jW4f51 core-prim . flasin) (jW4f50 core-prim . flacos) (jW4f4f core-prim . flabs) (jW4f4e core-prim . fl>?) (jW4f4d core-prim . fl>=?) (jW4f4c core-prim . fl=?) (jW4f4b core-prim . fl<?) (jW4f4a core-prim . fl<=?) (jW4f49 core-prim . fl/) (jW4f48 core-prim . fl-) (jW4f47 core-prim . fl+) (jW4f46 core-prim . fl*) (jW4f45 core-prim . fixnum->flonum) (jW4f44 core-prim . fxzero?) (jW4f43 core-prim . fxxor) (jW4f42 core-prim . fxrotate-bit-field) (jW4f41 core-prim . fxreverse-bit-field) (jW4f40 core-prim . fxpositive?) (jW4f3f core-prim . fxodd?) (jW4f3e core-prim . fxnot) (jW4f3d core-prim . fxnegative?) (jW4f3c core-prim . fxmod0) (jW4f3b core-prim . fxmod) (jW4f3a core-prim . fxmin) (jW4f39 core-prim . fxmax) (jW4f38 core-prim . fxlength) (jW4f37 core-prim . fxior) (jW4f36 core-prim . fxif) (jW4f35 core-prim . fxfirst-bit-set) (jW4f34 core-prim . fxeven?) (jW4f33 core-prim . fxdiv0-and-mod0) (jW4f32 core-prim . fxdiv0) (jW4f31 core-prim . fxdiv-and-mod) (jW4f30 core-prim . fxdiv) (jW4f2f core-prim . fxcopy-bit-field) (jW4f2e core-prim . fxcopy-bit) (jW4f2d core-prim . fxbit-set?) (jW4f2c core-prim . fxbit-field) (jW4f2b core-prim . fxbit-count) (jW4f2a core-prim . fxarithmetic-shift-right) (jW4f29 core-prim . fxarithmetic-shift-left) (jW4f28 core-prim . fxarithmetic-shift) (jW4f27 core-prim . fxand) (jW4f26 core-prim . fx>?) (jW4f25 core-prim . fx>=?) (jW4f24 core-prim . fx=?) (jW4f23 core-prim . fx<?) (jW4f22 core-prim . fx<=?) (jW4f21 core-prim . fx-/carry) (jW4f20 core-prim . fx-) (jW4f1f core-prim . fx+/carry) (jW4f1e core-prim . fx+) (jW4f1d core-prim . fx*/carry) (jW4f1c core-prim . fx*) (jW4f1b core-prim . greatest-fixnum) (jW4f1a core-prim . least-fixnum) (jW4f19 core-prim . fixnum-width) (jW4f18 core-prim . fixnum?) (jW4f17 core-prim . bitwise-rotate-bit-field) (jW4f16 core-prim . bitwise-reverse-bit-field) (jW4f15 core-prim . bitwise-length) (jW4f14 core-prim . bitwise-if) (jW4f13 core-prim . bitwise-first-bit-set) (jW4f12 core-prim . bitwise-copy-bit-field) (jW4f11 core-prim . bitwise-copy-bit) (jW4f10 core-prim . bitwise-bit-set?) (jW4f0f core-prim . bitwise-bit-field) (jW4f0e core-prim . bitwise-bit-count) (jW4f0d core-prim . bitwise-xor) (jW4f0c core-prim . bitwise-ior) (jW4f0b core-prim . bitwise-and) (jW4f0a core-prim . bitwise-not) (jW4f09 core-prim . bitwise-arithmetic-shift-right) (jW4f08 core-prim . bitwise-arithmetic-shift-left) (jW4f07 core-prim . bitwise-arithmetic-shift) (jW4f06 core-prim . zero?) (jW4f05 core-prim . vector?) (jW4f04 core-prim . vector-set!) (jW4f03 core-prim . vector-ref) (jW4f02 core-prim . vector-map) (jW4f01 core-prim . vector-length) (jW4f00 core-prim . vector-for-each) (jW4eff core-prim . vector-fill!) (jW4efe core-prim . vector->list) (jW4efd core-prim . vector) (jW4efc core-prim . values) (jW4efb core-prim . truncate) (jW4efa core-prim . tan) (jW4ef9 core-prim . symbol?) (jW4ef8 core-prim . symbol=?) (jW4ef7 core-prim . symbol->string) (jW4ef6 core-prim . substring) (jW4ef5 core-prim . string?) (jW4ef4 core-prim . string>?) (jW4ef3 core-prim . string>=?) (jW4ef2 core-prim . string=?) (jW4ef1 core-prim . string<?) (jW4ef0 core-prim . string<=?) (jW4eef core-prim . string-ref) (jW4eee core-prim . string-length) (jW4eed core-prim . string-for-each) (jW4eec core-prim . string-copy) (jW4eeb core-prim . string-append) (jW4eea core-prim . string->symbol) (jW4ee9 core-prim . string->number) (jW4ee8 core-prim . string->list) (jW4ee7 core-prim . string) (jW4ee6 core-prim . sqrt) (jW4ee5 core-prim . sin) (jW4ee4 core-prim . round) (jW4ee3 core-prim . reverse) (jW4ee2 core-prim . real?) (jW4ee1 core-prim . real-valued?) (jW4ee0 core-prim . real-part) (jW4edf core-prim . rationalize) (jW4ede core-prim . rational?) (jW4edd core-prim . rational-valued?) (jW4edc core-prim . procedure?) (jW4edb core-prim . positive?) (jW4eda core-prim . pair?) (jW4ed9 core-prim . odd?) (jW4ed8 core-prim . numerator) (jW4ed7 core-prim . number?) (jW4ed6 core-prim . number->string) (jW4ed5 core-prim . null?) (jW4ed4 core-prim . not) (jW4ed3 core-prim . negative?) (jW4ed2 core-prim . nan?) (jW4ed1 core-prim . min) (jW4ed0 core-prim . max) (jW4ecf core-prim . map) (jW4ece core-prim . make-vector) (jW4ecd core-prim . make-string) (jW4ecc core-prim . make-rectangular) (jW4ecb core-prim . make-polar) (jW4eca core-prim . magnitude) (jW4ec9 core-prim . log) (jW4ec8 core-prim . list?) (jW4ec7 core-prim . list-tail) (jW4ec6 core-prim . list-ref) (jW4ec5 core-prim . list->vector) (jW4ec4 core-prim . list->string) (jW4ec3 core-prim . list) (jW4ec2 core-prim . length) (jW4ec1 core-prim . lcm) (jW4ec0 core-prim . integer?) (jW4ebf core-prim . integer-valued?) (jW4ebe core-prim . integer->char) (jW4ebd core-prim . infinite?) (jW4ebc core-prim . inexact?) (jW4ebb core-prim . inexact) (jW4eba core-prim . imag-part) (jW4eb9 core-prim . gcd) (jW4eb8 core-prim . for-each) (jW4eb7 core-prim . floor) (jW4eb6 core-prim . finite?) (jW4eb5 core-prim . expt) (jW4eb4 core-prim . exp) (jW4eb3 core-prim . exact?) (jW4eb2 core-prim . exact-integer-sqrt) (jW4eb1 core-prim . exact) (jW4eb0 core-prim . even?) (jW4eaf core-prim . error) (jW4eae core-prim . eqv?) (jW4ead core-prim . equal?) (jW4eac core-prim . eq?) (jW4eab core-prim . dynamic-wind) (jW4eaa core-prim . div0-and-mod0) (jW4ea9 core-prim . mod0) (jW4ea8 core-prim . div0) (jW4ea7 core-prim . div-and-mod) (jW4ea6 core-prim . mod) (jW4ea5 core-prim . div) (jW4ea4 core-prim . denominator) (jW4ea3 core-prim . cos) (jW4ea2 core-prim . cons) (jW4ea1 core-prim . complex?) (jW4ea0 core-prim . char?) (jW4e9f core-prim . char>?) (jW4e9e core-prim . char>=?) (jW4e9d core-prim . char=?) (jW4e9c core-prim . char<?) (jW4e9b core-prim . char<=?) (jW4e9a core-prim . char->integer) (jW4e99 core-prim . ceiling) (jW4e98 core-prim . call-with-values) (jW4e97 core-prim . call/cc) (jW4e96 core-prim . call-with-current-continuation) (jW4e95 core-prim . cddddr) (jW4e94 core-prim . cdddar) (jW4e93 core-prim . cddadr) (jW4e92 core-prim . cddaar) (jW4e91 core-prim . cdaddr) (jW4e90 core-prim . cdadar) (jW4e8f core-prim . cdaadr) (jW4e8e core-prim . cdaaar) (jW4e8d core-prim . cadddr) (jW4e8c core-prim . caddar) (jW4e8b core-prim . cadadr) (jW4e8a core-prim . cadaar) (jW4e89 core-prim . caaddr) (jW4e88 core-prim . caadar) (jW4e87 core-prim . caaadr) (jW4e86 core-prim . caaaar) (jW4e85 core-prim . cdddr) (jW4e84 core-prim . cddar) (jW4e83 core-prim . cdadr) (jW4e82 core-prim . cdaar) (jW4e81 core-prim . caddr) (jW4e80 core-prim . cadar) (jW4e7f core-prim . caadr) (jW4e7e core-prim . caaar) (jW4e7d core-prim . cddr) (jW4e7c core-prim . cdar) (jW4e7b core-prim . cadr) (jW4e7a core-prim . caar) (jW4e79 core-prim . cdr) (jW4e78 core-prim . car) (jW4e77 core-prim . boolean?) (jW4e76 core-prim . boolean=?) (jW4e75 core-prim . atan) (jW4e74 core-prim . assertion-violation) (jW31d7 core-prim . assertion-error) (jW4e73 core-prim . asin) (jW4e72 core-prim . apply) (jW4e71 core-prim . append) (jW4e70 core-prim . angle) (jW4e6f core-prim . acos) (jW4e6e core-prim . abs) (jW4e6d core-prim . /) (jW4e6c core-prim . *) (jW4e6b core-prim . -) (jW4e6a core-prim . +) (jW4e69 core-prim . >=) (jW4e68 core-prim . >) (jW4e67 core-prim . =) (jW4e66 core-prim . <=) (jW4e65 core-prim . <) (jW4e64 core-prim . library) (jW4e63 $core-rtd &no-nans-rtd &no-nans-rcd) (jW4e62 $core-rtd &no-infinities-rtd &no-infinities-rcd) (jW4e61 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (jW4e60 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (jW4e5f $core-rtd &i/o-port-rtd &i/o-port-rcd) (jW4e5e $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (jW4e5d $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (jW4e5c $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (jW4e5b $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (jW4e5a $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (jW4e59 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (jW4e58 $core-rtd &i/o-write-rtd &i/o-write-rcd) (jW4e57 $core-rtd &i/o-read-rtd &i/o-read-rcd) (jW4e56 $core-rtd &i/o-rtd &i/o-rcd) (jW4e55 $core-rtd &undefined-rtd &undefined-rcd) (jW4e54 $core-rtd &syntax-rtd &syntax-rcd) (jW4e53 $core-rtd &lexical-rtd &lexical-rcd) (jW4e52 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (jW4e51 $core-rtd &non-continuable-rtd &non-continuable-rcd) (jW4e50 $core-rtd &who-rtd &who-rcd) (jW4e4f $core-rtd &irritants-rtd &irritants-rcd) (jW4e4e $core-rtd &assertion-rtd &assertion-rcd) (jW4e4d $core-rtd &violation-rtd &violation-rcd) (jW4e4c $core-rtd &error-rtd &error-rcd) (jW4e4b $core-rtd &serious-rtd &serious-rcd) (jW4e4a $core-rtd &warning-rtd &warning-rcd) (jW4e49 $core-rtd &message-rtd &message-rcd) (jW4e48 $core-rtd &condition-rtd &condition-rcd) (jW4e47 macro . define-condition-type) (jW4e46 macro . define-enumeration) (jW4e45 macro . define-record-type) (jW4e44 macro . parent-rtd) (jW4e43 macro . nongenerative) (jW4e42 macro . opaque) (jW4e41 macro . sealed) (jW4e40 macro . protocol) (jW4e3f macro . parent) (jW4e3e macro . immutable) (jW4e3d macro . mutable) (jW4e3c macro . fields) (jW4e3b macro . error-handling-mode) (jW4e3a macro . file-options) (jW4e39 macro . buffer-mode) (jW4e38 macro . eol-style) (jW4e37 macro . guard) (jW4e36 macro . trace-define) (jW4e35 macro . trace-lambda) (jW4e34 macro . unsyntax-splicing) (jW4e33 macro . unsyntax) (jW4e32 macro . unquote-splicing) (jW4e31 macro . unquote) (jW4e30 macro . _) (jW4e2f macro . else) (jW4e2e macro . =>) (jW4e2d macro . ...) (jW4e2c macro . assert) (jW4e2b macro . endianness) (jW4e2a macro . delay) (jW4e29 macro . time) (jW4e28 macro . do) (jW4e27 macro . cond) (jW4e26 macro . let*) (jW4e25 macro . let*-values) (jW4e24 macro . let-values) (jW4e23 macro . identifier-syntax) (jW4e22 macro . with-syntax) (jW4e21 macro . quasisyntax) (jW4e20 macro . quasiquote) (jW4e1f macro . syntax-rules) (jW4e1e macro . include) (jW4e1d macro . define-struct) (jW4e1c core-macro . record-constructor-descriptor) (jW4e1b core-macro . record-type-descriptor) (jW4e1a macro . case) (jW4e19 macro . parameterize) (jW4e18 macro . unless) (jW4e17 macro . when) (jW4e16 core-macro . or) (jW4e15 core-macro . and) (jW4e14 core-macro . if) (jW4e13 core-macro . let) (jW4e12 core-macro . letrec*) (jW4e11 core-macro . letrec) (jW4e10 core-macro . type-descriptor) (jW4e0f core-macro . case-lambda) (jW4e0e core-macro . lambda) (jW4e0d core-macro . syntax) (jW4e0c core-macro . syntax-case) (jW4e0b core-macro . quote) (jW4e0a core-macro . foreign-call) (jW4e09 letrec-syntax) (jW4e08 let-syntax) (jW4e07 set!) (jW4e06 import) (jW4e05 begin) (jW4e04 module) (jW4e03 define-syntax) (jW4e02 define)) values values '#f '#f '#f '#f) (jW2d11@jW2b5d@install-library 'jW51ce '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . jW5175) (eval-core . jW5174) (set-symbol-value! . jW5173) (symbol-value . jW5172) (gensym . jW5171) (void . jW5170)) '() values values '#f '#f '#f '#f) (jW2d11@jW2b5d@install-library 'jW51cf '(mosh) '() '() '() '() '((set-symbol-value! . jW5173) (symbol-value . jW5172) (regexp? . jW516e) (read-line . jW516d) (ungensym . jW516b) (alist->eq-hash-table . jW516a) (assoc-ref . jW5169) (print . jW5168) (format . jW5167) (host-os . jW5166) (library-path . jW2b3c) (standard-library-path . jW5165) (file-newer? . jW515f) (stat-mtime . jW515e) (digit->integer . jW515a) (call-with-string-input-port . jW5159) (call-with-string-io . jW5158) (string-split . jW5157) (bytevector-for-each . jW5156) (string->regexp . jW5155) (rxmatch . jW5154) (regexp-replace-all . jW5153) (hashtable-fold-left . jW5152) (hashtable-for-each . jW5151) (set-current-directory! . jW514c) (expand-path . jW514b) (current-directory . jW514a) (p . jW510a) (get-timeofday . jW50f1) (get-command-line . jW50f0) (sys-display . jW50ef) (whereis . jW50ee) (register . jW50ed) (vm-join! . jW50ec) (vm-set-value! . jW50eb) (vm? . jW50ea) (main-vm? . jW50e9) (vm-eval . jW50e8) (vm-self . jW50e7) (vm-start! . jW50e6) (make-vm . jW50e5) (mutex-try-lock! . jW50e4) (mutex-unlock! . jW50e3) (mutex-lock! . jW50e2) (mutex? . jW50e1) (make-mutex . jW50e0) (condition-variable-notify-all! . jW50df) (condition-variable-notify! . jW50de) (condition-variable-wait! . jW50dd) (make-condition-variable . jW50dc) (write/ss . jW50db) (mosh-executable-path . jW50da) (make-file-options . jW50d9) (source-info . jW50d8) (make-compiler-instruction . jW50d7) (make-instruction . jW50d6) (set-annotation! . jW50d5) (get-annotation . jW50d4) (annotated-pair? . jW50d3) (annotated-cons . jW50d2) (set-source-info! . jW50d1) (bignum? . jW50d0) (fast-equal? . jW50cf) (fasl-read . jW50ce) (fasl-write . jW50cd) (time-usage . jW50cc) (os-constant . jW50cb) (condition-printer . jW50ca) (time . jW4e29) (include . jW4e1e)) '() values values '#f '#f '#f '#f) (jW2d11@jW2b5d@install-library 'jW51d0 '(system) '() '() '() '() '((gensym-prefix-set! . jW516c) (ssl-supported? . jW5164) (ssl-socket? . jW5163) (socket-sslize! . jW5162) (%monapi-name-whereis . jW5161) (%monapi-message-send . jW5160) (write-to-file . jW515d) (file->list . jW515c) (file->string . jW515b) (mosh-cache-dir . jW2926) (%call-process . jW5150) (local-tz-offset . jW514f) (microseconds . jW514e) (directory-list . jW514d) (expand-path . jW514b) (%getpid . jW5149) (%spawn . jW5148) (%waitpid . jW5147) (simple-struct-name . jW5146) (simple-struct-set! . jW5145) (simple-struct-ref . jW5144) (make-simple-struct . jW5143) (simple-struct? . jW5142) (pointer-ref-c-int64 . jW5141) (pointer-ref-c-int32 . jW5140) (pointer-ref-c-int16 . jW513f) (pointer-ref-c-int8 . jW513e) (pointer-ref-c-uint64 . jW513d) (pointer-ref-c-uint32 . jW513c) (pointer-ref-c-uint16 . jW513b) (pointer-ref-c-uint8 . jW513a) (pointer-set-c-uint64! . jW5139) (pointer-set-c-uint32! . jW5138) (pointer-set-c-uint16! . jW5137) (pointer-set-c-uint8! . jW5136) (pointer-set-c-int64! . jW5135) (pointer-set-c-int32! . jW5134) (pointer-set-c-int16! . jW5133) (pointer-set-c-int8! . jW5132) (pointer-set-c-pointer! . jW5131) (pointer-set-c-double! . jW5130) (pointer-set-c-float! . jW512f) (pointer-set-c-long-long! . jW512e) (pointer-set-c-long! . jW512d) (pointer-set-c-int! . jW512c) (pointer-set-c-short! . jW512b) (pointer-set-c-char! . jW512a) (pointer-ref-c-pointer . jW5129) (pointer-ref-c-double . jW5128) (pointer-ref-c-float . jW5127) (pointer-ref-c-unsigned-long-long . jW5126) (pointer-ref-c-signed-long-long . jW5125) (pointer-ref-c-unsigned-long . jW5124) (pointer-ref-c-signed-long . jW5123) (pointer-ref-c-unsigned-int . jW5122) (pointer-ref-c-signed-int . jW5121) (pointer-ref-c-unsigned-short . jW5120) (pointer-ref-c-signed-short . jW511f) (pointer-ref-c-unsigned-char . jW511e) (pointer-ref-c-signed-char . jW511d) (pointer->integer . jW511c) (integer->pointer . jW511b) (pointer? . jW511a) (shared-errno . jW5119) (%ffi-free-c-callback-trampoline . jW5118) (%ffi-make-c-callback-trampoline . jW5117) (%ffi-free . jW5116) (%ffi-malloc . jW5115) (%ffi-supported? . jW5114) (%ffi-pointer->string . jW5113) (%ffi-call . jW5112) (%ffi-lookup . jW5111) (%ffi-open . jW5110) (null-terminated-utf8->string . jW510f) (null-terminated-bytevector->string . jW510e) (%exec . jW510d) (%fork . jW510c) (%pipe . jW510b) (open-output-string . jW5109) (get-output-string . jW5108) (file-stat-ctime . jW5107) (file-stat-atime . jW5106) (file-stat-mtime . jW5105) (file-size-in-bytes . jW5104) (file-writable? . jW5103) (file-executable? . jW5102) (file-readable? . jW5101) (file-regular? . jW5100) (file-symbolic-link? . jW50ff) (file-directory? . jW50fe) (create-symbolic-link . jW50fd) (rename-file . jW50fc) (delete-directory . jW50fb) (create-directory . jW50fa) (create-mosh-cache-dir . jW50f9) (get-environment-variables . jW50f8) (current-exception-handler . jW50f7) (get-environment-variable . jW50f6) (join-wraps . jW50f5) (id->real-label . jW50f4) (same-marks? . jW50f3) (same-marks*? . jW50f2) (disasm . jW50c9) (make-parameter . jW2924) (socket-port . jW50c8) (socket-shutdown . jW50c7) (socket-close . jW50c6) (socket-send . jW50c5) (socket-recv! . jW50c4) (socket-recv . jW50c3) (make-server-socket . jW50c2) (make-client-socket . jW50c1) (socket-accept . jW50c0) (socket? . jW50bf) (parameterize . jW4e19)) '() values values '#f '#f '#f '#f)))
(begin (set! jW4c81@ref (unspecified)) (set! jW4c83@x* (unspecified)) (set! jW4c85@add-library-path! (unspecified)) (set! jW4c87@parse-and-add-library-path (unspecified)) (set! jW4c89@for-each-with-index (unspecified)) (set! jW4c8b@rpad (unspecified)) (set! jW4c8d@condition-printer/p (unspecified)) (set! jW4c8f@record->field-alist (unspecified)) (set! jW4c91@map-with-index (unspecified)) (set! jW4c93@repl (unspecified)) (set! jW4c95@trace-printer (unspecified)) (set! jW4c97@command-line (unspecified)) (set! jW4c99@local-library-path (unspecified)) (set! jW4c9b@load/args (unspecified)) (set! jW4c9d@load (unspecified)) (set! jW4c9f@ironscheme-build (unspecified)) (set! jW4ca1@eval-top-level (unspecified)) (set! jW4ca3@compile-system-libraries (unspecified)) (set! jW4ca5@compile (unspecified)) (set! jW4ca7@compile->closure (unspecified)) (set! jW4ca9@pre-compile-r6rs-file (unspecified)) (set! jW4cab@load-r6rs-top-level (unspecified)) (set! jW4cad@load-r6rs-top-level-sexp (unspecified)) (set! jW4caf@prefix-inc (unspecified)) (set! jW4cb1@prefix-inc! (unspecified)) (set! jW4c81@ref (lambda (jW4cec@rtd jW4ced@i jW4cee@x) (let ((jW4cf2@val ((record-accessor jW4cec@rtd jW4ced@i) jW4cee@x))) (if (symbol? jW4cf2@val) (ungensym jW4cf2@val) jW4cf2@val)))) (set! jW4de8@jW4c81@ref jW4c81@ref) (set! jW4c83@x* '()) (set! jW4de9@jW4c83@x* jW4c83@x*) (set! jW4c85@add-library-path! (lambda (jW4cf4@path) (jW2d01@jW2b3d@library-path (append (jW2d01@jW2b3d@library-path) (list jW4cf4@path))))) (set! jW4dea@jW4c85@add-library-path! jW4c85@add-library-path!) (set! jW4c87@parse-and-add-library-path (lambda (jW4cf6@paths jW4cf7@message) (letrec* ((jW4cfb@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((jW4cfc@t jW4cf6@paths)) (if jW4cfc@t ((lambda (jW4cfe@paths) (for-each (lambda (jW4d00@path) (if (file-exists? jW4d00@path) (jW4c85@add-library-path! (expand-path jW4d00@path)) (format (current-error-port) jW4cf7@message jW4d00@path))) (string-split jW4cfe@paths jW4cfb@separator))) jW4cfc@t) (void)))))) (set! jW4deb@jW4c87@parse-and-add-library-path jW4c87@parse-and-add-library-path) (set! jW4c89@for-each-with-index (lambda (jW4d02@proc jW4d03@lst) (letrec ((jW4d06@loop (lambda (jW4d08@i jW4d09@lst) (if (null? jW4d09@lst) (if '#f '#f (void)) (begin (jW4d02@proc jW4d08@i (car jW4d09@lst)) (jW4d06@loop (+ jW4d08@i '1) (cdr jW4d09@lst))))))) (jW4d06@loop '1 jW4d03@lst)))) (set! jW4dec@jW4c89@for-each-with-index jW4c89@for-each-with-index) (set! jW4c8b@rpad (lambda (jW4d0c@str jW4d0d@pad jW4d0e@n) (let ((jW4d12@rest (- jW4d0e@n (string-length (format '"~a" jW4d0c@str))))) (let jW4d18@loop ((jW4d14@rest jW4d12@rest) (jW4d15@ret (format '"~a" jW4d0c@str))) (if (<= jW4d14@rest '0) jW4d15@ret (jW4d18@loop (- jW4d14@rest '1) (string-append jW4d15@ret jW4d0d@pad))))))) (set! jW4ded@jW4c8b@rpad jW4c8b@rpad) (set! jW4c8d@condition-printer/p (lambda (jW4d1a@e jW4d1b@port) (letrec* ((jW4d1f@max-condition-len (apply max (map (lambda (jW4d30@c) (string-length (symbol->string (record-type-name (record-rtd jW4d30@c))))) (simple-conditions jW4d1a@e))))) (begin (display '" Condition components:\n" jW4d1b@port) (jW4c89@for-each-with-index (lambda (jW4d20@i jW4d21@x) (let ((jW4d24@rtd (record-rtd jW4d21@x)) (jW4d25@fields-alist (jW4c8f@record->field-alist jW4d21@x))) (begin (format jW4d1b@port '" ~d. ~a" jW4d20@i (jW4c8b@rpad (symbol->string (record-type-name jW4d24@rtd)) '" " jW4d1f@max-condition-len)) (if (null? jW4d25@fields-alist) (newline jW4d1b@port) (void)) (let jW4d2c@loop ((jW4d28@first '#t) (jW4d29@fields-alist jW4d25@fields-alist)) (if (null? jW4d29@fields-alist) '() (let ((jW4d2e@field (car jW4d29@fields-alist))) (begin (if (not jW4d28@first) (display (jW4c8b@rpad '"" '" " (+ '4 jW4d1f@max-condition-len)) jW4d1b@port) (void)) (display '"       " jW4d1b@port) (display (car jW4d2e@field) jW4d1b@port) (display '": " jW4d1b@port) (write (cdr jW4d2e@field) jW4d1b@port) (newline jW4d1b@port) (jW4d2c@loop '#f (cdr jW4d29@fields-alist))))))))) (simple-conditions jW4d1a@e)))))) (set! jW4dee@jW4c8d@condition-printer/p jW4c8d@condition-printer/p) (set! jW4c8f@record->field-alist (lambda (jW4d32@r) (letrec* ((jW4d35@ref (lambda (jW4d40@rtd jW4d41@i jW4d42@x) (let ((jW4d46@val ((record-accessor jW4d40@rtd jW4d41@i) jW4d42@x))) (if (symbol? jW4d46@val) (ungensym jW4d46@val) jW4d46@val))))) (let jW4d3a@loop ((jW4d36@ret '()) (jW4d37@rtd (record-rtd jW4d32@r))) (if jW4d37@rtd (jW4d3a@loop (append jW4d36@ret (jW4c91@map-with-index (lambda (jW4d3c@i jW4d3d@field) (cons jW4d3d@field (jW4d35@ref jW4d37@rtd jW4d3c@i jW4d32@r))) (vector->list (record-type-field-names jW4d37@rtd)))) (record-type-parent jW4d37@rtd)) jW4d36@ret))))) (set! jW4def@jW4c8f@record->field-alist jW4c8f@record->field-alist) (set! jW4c91@map-with-index (lambda (jW4d48@proc jW4d49@lst) (let jW4d52@loop ((jW4d4c@i '0) (jW4d4d@lst jW4d49@lst) (jW4d4e@ret '())) (if (null? jW4d4d@lst) (reverse jW4d4e@ret) (jW4d52@loop (+ jW4d4c@i '1) (cdr jW4d4d@lst) (cons (jW4d48@proc jW4d4c@i (car jW4d4d@lst)) jW4d4e@ret)))))) (set! jW4df0@jW4c91@map-with-index jW4c91@map-with-index) (set! jW4c93@repl (lambda jW4d54@x (letrec* ((jW4d57@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (jW4d5a@jW4d58) (lambda () (with-exception-handler (lambda (jW4d5c@e) ((call/cc (lambda (jW4d5e@jW4d59) (jW4d5a@jW4d58 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? jW4d5c@e) (jW4c8d@condition-printer/p jW4d5c@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" jW4d5c@e))) (jW4d5e@jW4d59 (lambda () (raise-continuable jW4d5c@e)))))))))) (lambda () (let jW4d64@loop ((jW4d60@line (get-line (current-input-port))) (jW4d61@accum '"")) (letrec* ((jW4d67@parentheses-ok? (lambda (jW4d72@text) (let jW4d7a@loop ((jW4d74@chars (string->list jW4d72@text)) (jW4d75@p0 '0) (jW4d76@p1 '0)) (if (null? jW4d74@chars) (= '0 jW4d75@p0 jW4d76@p1) (let ((jW4d7c@t (car jW4d74@chars))) (if (memv jW4d7c@t '(#\()) (jW4d7a@loop (cdr jW4d74@chars) (+ jW4d75@p0 '1) jW4d76@p1) (if (memv jW4d7c@t '(#\))) (jW4d7a@loop (cdr jW4d74@chars) (- jW4d75@p0 '1) jW4d76@p1) (if (memv jW4d7c@t '(#\[)) (jW4d7a@loop (cdr jW4d74@chars) jW4d75@p0 (+ jW4d76@p1 '1)) (if (memv jW4d7c@t '(#\])) (jW4d7a@loop (cdr jW4d74@chars) jW4d75@p0 (- jW4d76@p1 '1)) (jW4d7a@loop (cdr jW4d74@chars) jW4d75@p0 jW4d76@p1)))))))))) (jW4d69@eval-string-print (lambda (jW4d6c@text) (if (not (or (string=? '"\n" jW4d6c@text) (= '0 (string-length jW4d6c@text)))) (call-with-values (lambda () (jW4ca1@eval-top-level (call-with-port (open-string-input-port jW4d6c@text) read))) (lambda jW4d6e@out* (for-each (lambda (jW4d70@out) (begin (write/ss jW4d70@out) (newline))) jW4d6e@out*))) (void))))) (if (eof-object? jW4d60@line) (begin (jW4d69@eval-string-print jW4d61@accum) (exit)) (let ((jW4d6a@current (string-append jW4d61@accum jW4d60@line))) (if (jW4d67@parentheses-ok? jW4d6a@current) (jW4d69@eval-string-print jW4d6a@current) (jW4d64@loop (get-line (current-input-port)) jW4d6a@current)))))))))))) (newline) (jW4d57@rec))))) (jW4d57@rec)))) (set! jW4df1@jW4c93@repl jW4c93@repl) (set! jW4c95@trace-printer (jW2a47@jW2925@make-parameter write)) (set! jW4df2@jW4c95@trace-printer jW4c95@trace-printer) (set! jW4c97@command-line (jW2a47@jW2925@make-parameter (get-command-line))) (set! jW4df3@jW4c97@command-line jW4c97@command-line) (set! jW4c99@local-library-path (lambda (jW4d7e@filename) (jW2d01@jW2b3d@library-path))) (set! jW4df4@jW4c99@local-library-path jW4c99@local-library-path) (set! jW4c9b@load/args (lambda (jW4d80@filename . jW4d82@args) (begin (apply jW4cab@load-r6rs-top-level jW4d80@filename 'load jW4d82@args) (void)))) (set! jW4df5@jW4c9b@load/args jW4c9b@load/args) (set! jW4c9d@load (lambda (jW4d84@filename) (begin (apply jW4cab@load-r6rs-top-level jW4d84@filename 'load (jW4c97@command-line)) (void)))) (set! jW4df6@jW4c9d@load jW4c9d@load) (set! jW4c9f@ironscheme-build (lambda () (jW4c9d@load '"ironscheme-buildscript.ss"))) (set! jW4df7@jW4c9f@ironscheme-build jW4c9f@ironscheme-build) (set! jW4ca1@eval-top-level (lambda (jW4d86@x) (jW4c5e@jW31be@eval jW4d86@x (jW4c75@jW31ec@interaction-environment)))) (set! jW4df8@jW4ca1@eval-top-level jW4ca1@eval-top-level) (set! jW4ca3@compile-system-libraries (lambda () (jW4ca1@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! jW4df9@jW4ca3@compile-system-libraries jW4ca3@compile-system-libraries) (set! jW4ca5@compile (lambda (jW4d88@filename) (jW4cab@load-r6rs-top-level jW4d88@filename 'compile))) (set! jW4dfa@jW4ca5@compile jW4ca5@compile) (set! jW4ca7@compile->closure (lambda (jW4d8a@filename) (jW4cab@load-r6rs-top-level jW4d8a@filename 'closure))) (set! jW4dfb@jW4ca7@compile->closure jW4ca7@compile->closure) (set! jW4ca9@pre-compile-r6rs-file (lambda (jW4d8c@filename) (jW4cab@load-r6rs-top-level jW4d8c@filename 'compile))) (set! jW4dfc@jW4ca9@pre-compile-r6rs-file jW4ca9@pre-compile-r6rs-file) (set! jW4cab@load-r6rs-top-level (lambda (jW4d8e@filename jW4d8f@how . jW4d92@args) (begin (jW2d01@jW2b3d@library-path (jW4c99@local-library-path jW4d8e@filename)) (let ((jW4d94@x* (with-input-from-file jW4d8e@filename (lambda () (let jW4d96@f () (let ((jW4d98@x (jW2a39@jW2909@read-annotated))) (if (eof-object? jW4d98@x) '() (cons jW4d98@x (jW4d96@f))))))))) (let ((jW4d9a@t jW4d8f@how)) (if (memv jW4d9a@t '(closure)) (jW4c74@jW31ea@pre-compile-r6rs-top-level jW4d94@x*) (if (memv jW4d9a@t '(load)) (begin (jW4c97@command-line (cons jW4d8e@filename (car jW4d92@args))) (jW2a48@jW2927@mosh-cache-dir (create-mosh-cache-dir)) (if (jW2a48@jW2927@mosh-cache-dir) (gensym-prefix-set! (jW4cb1@prefix-inc! (string-append (jW2a48@jW2927@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jW4d9c@file) ((call/cc (lambda (jW4da0@jW4d9e) (lambda () (with-exception-handler (lambda (jW4da2@c) ((call/cc (lambda (jW4da4@jW4d9f) (jW4da0@jW4d9e (lambda () (if '#t '#t (jW4da4@jW4d9f (lambda () (raise-continuable jW4da2@c)))))))))) (lambda () (delete-file (string-append (jW2a48@jW2927@mosh-cache-dir) '"/" jW4d9c@file))))))))) (directory-list (jW2a48@jW2927@mosh-cache-dir))) (void)) (let ((jW4da6@compiled (jW4c73@jW31e8@compile-r6rs-top-level jW4d94@x*))) (begin (if (and (jW2a48@jW2927@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jW2d05@jW2b45@serialize-all jW2a42@jW291b@serialize-library jW2a9e@jW2a57@compile-core-expr) (void)) (jW4da6@compiled)))) (if (memv jW4d9a@t '(compile)) (begin (jW4c73@jW31e8@compile-r6rs-top-level jW4d94@x*) (jW2d05@jW2b45@serialize-all jW2a42@jW291b@serialize-library jW2a9e@jW2a57@compile-core-expr)) (if '#f '#f (void)))))))))) (set! jW4dfd@jW4cab@load-r6rs-top-level jW4cab@load-r6rs-top-level) (set! jW4cad@load-r6rs-top-level-sexp (lambda (jW4da8@import-spec jW4da9@thunk) (let ((jW4db4@jW4dad jW2d01@jW2b3d@library-path) (jW4db5@jW4daf jW2a48@jW2927@mosh-cache-dir) (jW4db6@jW4db1 (jW4c99@local-library-path '"")) (jW4db7@jW4db3 (create-mosh-cache-dir))) (let ((jW4dbc@swap (lambda () (begin (let ((jW4dbe@t (jW4db4@jW4dad))) (begin (jW4db4@jW4dad jW4db6@jW4db1) (set! jW4db6@jW4db1 jW4dbe@t))) (let ((jW4dc0@t (jW4db5@jW4daf))) (begin (jW4db5@jW4daf jW4db7@jW4db3) (set! jW4db7@jW4db3 jW4dc0@t))))))) (dynamic-wind jW4dbc@swap (lambda () (begin (if (jW2a48@jW2927@mosh-cache-dir) (gensym-prefix-set! (jW4cb1@prefix-inc! (string-append (jW2a48@jW2927@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((jW4dc6@jW4dc3 jW4c97@command-line) (jW4dc7@jW4dc5 '())) (let ((jW4dca@swap (lambda () (let ((jW4dcc@t (jW4dc6@jW4dc3))) (begin (jW4dc6@jW4dc3 jW4dc7@jW4dc5) (set! jW4dc7@jW4dc5 jW4dcc@t)))))) (dynamic-wind jW4dca@swap (lambda () ((jW4c73@jW31e8@compile-r6rs-top-level (list (cons 'import jW4da8@import-spec) (list jW4da9@thunk))))) jW4dca@swap))))) jW4dbc@swap))))) (set! jW4dfe@jW4cad@load-r6rs-top-level-sexp jW4cad@load-r6rs-top-level-sexp) (set! jW4caf@prefix-inc (lambda (jW4dce@prefix-string) (let ((jW4dd0@prefix (symbol->string jW4dce@prefix-string))) (let ((jW4dd2@len (string-length jW4dd0@prefix))) (let jW4dda@loop ((jW4dd4@i (- jW4dd2@len '1)) (jW4dd5@carry? '#t) (jW4dd6@accum '())) (if (< jW4dd4@i '0) (string->symbol (list->string (if jW4dd5@carry? (cons '#\a jW4dd6@accum) jW4dd6@accum))) (if jW4dd5@carry? (let ((jW4ddc@next-integer (+ '1 (char->integer (string-ref jW4dd0@prefix jW4dd4@i))))) (if (= jW4ddc@next-integer '123) (jW4dda@loop (- jW4dd4@i '1) '#f (cons '#\A jW4dd6@accum)) (if (= jW4ddc@next-integer '91) (jW4dda@loop (- jW4dd4@i '1) '#t (cons '#\a jW4dd6@accum)) (jW4dda@loop (- jW4dd4@i '1) '#f (cons (integer->char jW4ddc@next-integer) jW4dd6@accum))))) (jW4dda@loop (- jW4dd4@i '1) '#f (cons (string-ref jW4dd0@prefix jW4dd4@i) jW4dd6@accum))))))))) (set! jW4dff@jW4caf@prefix-inc jW4caf@prefix-inc) (set! jW4cb1@prefix-inc! (lambda (jW4dde@file) (begin (if (not (file-exists? jW4dde@file)) (call-with-output-file jW4dde@file (lambda (jW4de0@port) (write 'd jW4de0@port))) (void)) (let ((jW4de2@prefix (call-with-input-file jW4dde@file read))) (if (main-vm?) (let ((jW4de4@next-prefix (jW4caf@prefix-inc jW4de2@prefix))) (begin (call-with-port (open-file-output-port jW4dde@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (jW4de6@port) (write jW4de4@next-prefix jW4de6@port))) jW4de2@prefix)) jW4de2@prefix))))) (set! jW4e00@jW4cb1@prefix-inc! jW4cb1@prefix-inc!) (begin (jW2d06@jW2b47@current-precompiled-library-loader jW2a43@jW291d@load-serialized-library) (set-symbol-value! 'load jW4c9d@load) (set-symbol-value! 'pre-compile-r6rs-file jW4ca9@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs jW4ca1@eval-top-level) (set-symbol-value! 'int-env-syms jW4c55@jW31ac@interaction-environment-symbols) (set-symbol-value! 'expanded2core jW2a9d@jW2a55@expanded->core) (set-symbol-value! 'trace-printer jW4c95@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (jW4cb2@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list jW4cb2@c))))) (jW4c87@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (jW4c87@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (jW4c85@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (jW4c85@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (jW4c85@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((jW4cb4@prefix (lambda (jW4cb6@ext jW4cb7@ls) (append (map (lambda (jW4cba@x) (string-append jW4cb6@ext jW4cba@x)) jW4cb7@ls) jW4cb7@ls)))) (jW2d02@jW2b3f@library-extensions (jW4cb4@prefix '".mosh" (jW2d02@jW2b3f@library-extensions)))) (current-exception-handler (lambda (jW4cbc@c) (begin (if (condition? jW4cbc@c) (jW4c8d@condition-printer/p jW4cbc@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" jW4cbc@c)) jW4cbc@c))) (if ((call/cc (lambda (jW4cc0@jW4cbe) (lambda () (with-exception-handler (lambda (jW4cc2@c) ((call/cc (lambda (jW4cc4@jW4cbf) (jW4cc0@jW4cbe (lambda () (if '#t '#f (jW4cc4@jW4cbf (lambda () (raise-continuable jW4cc2@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (jW4cad@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (jW4c97@command-line)) (let ((jW4cce@jW4cc7 jW4c97@command-line) (jW4ccf@jW4cc9 jW2a48@jW2927@mosh-cache-dir) (jW4cd0@jW4ccb '()) (jW4cd1@jW4ccd (create-mosh-cache-dir))) (let ((jW4cd6@swap (lambda () (begin (let ((jW4cd8@t (jW4cce@jW4cc7))) (begin (jW4cce@jW4cc7 jW4cd0@jW4ccb) (set! jW4cd0@jW4ccb jW4cd8@t))) (let ((jW4cda@t (jW4ccf@jW4cc9))) (begin (jW4ccf@jW4cc9 jW4cd1@jW4ccd) (set! jW4cd1@jW4ccd jW4cda@t))))))) (dynamic-wind jW4cd6@swap (lambda () (begin (if (jW2a48@jW2927@mosh-cache-dir) (gensym-prefix-set! (jW4cb1@prefix-inc! (string-append (jW2a48@jW2927@mosh-cache-dir) '"/prefix.txt"))) (void)) (jW4c93@repl))) jW4cd6@swap))) (begin (jW2d01@jW2b3d@library-path (jW4c99@local-library-path (car (jW4c97@command-line)))) (set! jW4c83@x* (with-input-from-file (car (jW4c97@command-line)) (lambda () (let jW4cdc@f () (let ((jW4cde@x (jW2a39@jW2909@read-annotated))) (if (eof-object? jW4cde@x) '() (cons jW4cde@x (jW4cdc@f)))))))) (jW4c97@command-line (cons (car (jW4c97@command-line)) (cdr (jW4c97@command-line)))) (jW2a48@jW2927@mosh-cache-dir (create-mosh-cache-dir)) (if (jW2a48@jW2927@mosh-cache-dir) (gensym-prefix-set! (jW4cb1@prefix-inc! (string-append (jW2a48@jW2927@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jW4ce0@file) ((call/cc (lambda (jW4ce4@jW4ce2) (lambda () (with-exception-handler (lambda (jW4ce6@c) ((call/cc (lambda (jW4ce8@jW4ce3) (jW4ce4@jW4ce2 (lambda () (if '#t '#t (jW4ce8@jW4ce3 (lambda () (raise-continuable jW4ce6@c)))))))))) (lambda () (delete-file (string-append (jW2a48@jW2927@mosh-cache-dir) '"/" jW4ce0@file))))))))) (directory-list (jW2a48@jW2927@mosh-cache-dir))) (void)) (let ((jW4cea@compiled (jW4c73@jW31e8@compile-r6rs-top-level jW4c83@x*))) (begin (if (and (jW2a48@jW2927@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jW2d05@jW2b45@serialize-all jW2a42@jW291b@serialize-library jW2a9e@jW2a57@compile-core-expr) (void)) (jW4cea@compiled))))))))
