;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! aX57f@library-file-path->cache-path (unspecified)) (set! aX581@read-annotated (unspecified)) (set! aX583@annotation-stripped (unspecified)) (set! aX585@annotation? (unspecified)) (set! aX587@annotation-source (unspecified)) (set! aX589@annotation-expression (unspecified)) (set! aX58b@scm->fasl (unspecified)) (set! aX58d@fasl-save (unspecified)) (set! aX58f@fasl-load (unspecified)) (set! aX591@verbose? (unspecified)) (set! aX593@serialize-library (unspecified)) (set! aX595@load-serialized-library (unspecified)) (set! aX597@make-record-printer (unspecified)) (set! aX599@compile-core (unspecified)) (set! aX59b@read-library-source-file (unspecified)) (set! aX59d@make-parameter (unspecified)) (set! aX59f@mosh-cache-dir (unspecified)) (set! aX635@file-options-spec (unspecified)) (set! aX57f@library-file-path->cache-path (lambda (aX636@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aX63c@aX639 aX63d@aX63b) (let ((aX640@extract aX63d@aX63b) (aX641@p aX63c@aX639)) (let ((aX645@display-hex '#f)) (begin (set! aX645@display-hex (lambda (aX64e@n) (if (<= '0 aX64e@n '9) (display aX64e@n aX641@p) (display (integer->char (+ (char->integer '#\a) (- aX64e@n '10))) aX641@p)))) (begin (let aX648@f ((aX646@ls (string-split aX636@x '#\/))) (if (not (null? aX646@ls)) (begin (display '"_" aX641@p) (for-each (lambda (aX64a@c) (if (or (char<=? '#\a aX64a@c '#\z) (char<=? '#\A aX64a@c '#\Z) (char<=? '#\0 aX64a@c '#\9) (memv aX64a@c '(#\- #\. #\_ #\~))) (display aX64a@c aX641@p) (begin (display '"%" aX641@p) (let ((aX64c@n (char->integer aX64a@c))) (begin (aX645@display-hex (quotient aX64c@n '16)) (aX645@display-hex (remainder aX64c@n '16))))))) (string->list (car aX646@ls))) (aX648@f (cdr aX646@ls))) (void))) (aX640@extract))))))))) (set! aX6b0@aX57f@library-file-path->cache-path aX57f@library-file-path->cache-path) (set! aX581@read-annotated read) (set! aX6b1@aX581@read-annotated aX581@read-annotated) (set! aX583@annotation-stripped (lambda (aX650@x) (aX589@annotation-expression aX650@x))) (set! aX6b2@aX583@annotation-stripped aX583@annotation-stripped) (set! aX585@annotation? (lambda (aX652@x) (source-info aX652@x))) (set! aX6b3@aX585@annotation? aX585@annotation?) (set! aX587@annotation-source (lambda (aX654@x) (source-info aX654@x))) (set! aX6b4@aX587@annotation-source aX587@annotation-source) (set! aX589@annotation-expression (lambda (aX656@x) (if (pair? aX656@x) (cons (car aX656@x) (cdr aX656@x)) (if (procedure? aX656@x) (set-source-info! aX656@x '#f) aX656@x)))) (set! aX6b5@aX589@annotation-expression aX589@annotation-expression) (set! aX58b@scm->fasl (lambda (aX658@filename) (string-append (aX59f@mosh-cache-dir) '"/" (aX57f@library-file-path->cache-path aX658@filename) '".mosh-fasl"))) (set! aX6b6@aX58b@scm->fasl aX58b@scm->fasl) (set! aX58d@fasl-save (lambda (aX65a@filename aX65b@obj) (call-with-port (open-file-output-port aX65a@filename) (lambda (aX65e@port) ((symbol-value 'fasl-write!) aX65b@obj aX65e@port))))) (set! aX6b7@aX58d@fasl-save aX58d@fasl-save) (set! aX58f@fasl-load (lambda (aX660@filename) (call-with-port (open-file-input-port aX660@filename) (symbol-value 'fasl-read!)))) (set! aX6b8@aX58f@fasl-load aX58f@fasl-load) (set! aX591@verbose? (symbol-value '%verbose)) (set! aX6b9@aX591@verbose? aX591@verbose?) (set! aX593@serialize-library (lambda (aX662@filename aX663@obj) (begin (if aX591@verbose? (format (current-error-port) '"serialize-library ~a\n..." aX662@filename) (void)) (let ((aX666@expanded2core (symbol-value 'expanded2core))) (let ((aX668@compile (symbol-value 'compile-w/o-halt))) (let ((aX66a@code aX663@obj)) (let ((aX66c@pivot (cddddr (cddddr aX66a@code)))) (let ((aX66e@visit (aX668@compile (aX666@expanded2core (car aX66c@pivot))))) (begin (set-car! aX66c@pivot aX66e@visit) (let ((aX670@pivot (cdr aX66c@pivot))) (let ((aX672@invoke (aX668@compile (aX666@expanded2core (car aX670@pivot))))) (set-car! aX670@pivot aX672@invoke))))))))) (let ((aX674@fasl-file (aX58b@scm->fasl aX662@filename))) (begin (if (file-exists? aX674@fasl-file) (delete-file aX674@fasl-file) (void)) ((call/cc (lambda (aX678@aX676) (lambda () (with-exception-handler (lambda (aX67a@c) ((call/cc (lambda (aX67c@aX677) (aX678@aX676 (lambda () (if '#t (begin (if aX591@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" aX662@filename) (void)) (if (file-exists? aX674@fasl-file) (delete-file aX674@fasl-file) (void)) '#f) (aX67c@aX677 (lambda () (raise-continuable aX67a@c)))))))))) (lambda () (aX58d@fasl-save aX674@fasl-file aX663@obj)))))))))))) (set! aX6ba@aX593@serialize-library aX593@serialize-library) (set! aX595@load-serialized-library (lambda (aX67e@filename aX67f@obj) (and (aX59f@mosh-cache-dir) (let ((aX682@fasl-file (aX58b@scm->fasl aX67e@filename))) (if (and (file-exists? aX682@fasl-file) ((symbol-value 'file-newer?) aX682@fasl-file aX67e@filename)) (let ((aX684@expanded2core (symbol-value 'expanded2core))) (let ((aX686@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((aX688@code (aX58f@fasl-load aX682@fasl-file))) (let ((aX68a@pivot (cddddr (cddddr aX688@code)))) (let ((aX68c@visit (car aX68a@pivot))) (let ((aX68e@visit-proc (lambda () (aX686@eval-compiled-core aX68c@visit)))) (begin (set-car! aX68a@pivot aX68e@visit-proc) (let ((aX690@pivot (cdr aX68a@pivot))) (let ((aX692@invoke (car aX690@pivot))) (begin (set-car! aX690@pivot (lambda () (aX686@eval-compiled-core aX692@invoke))) (apply aX67f@obj aX688@code))))))))))) '#f))))) (set! aX6bb@aX595@load-serialized-library aX595@load-serialized-library) (set! aX597@make-record-printer (lambda (aX694@name aX695@printer) (lambda aX698@x (begin (display '"record printer") (for-each display aX698@x))))) (set! aX6bc@aX597@make-record-printer aX597@make-record-printer) (set! aX599@compile-core (lambda aX69a@x (apply error 'comile-core '"not implementated" aX69a@x))) (set! aX6bd@aX599@compile-core aX599@compile-core) (set! aX59b@read-library-source-file (lambda (aX69c@file-name) (with-input-from-file aX69c@file-name aX581@read-annotated))) (set! aX6be@aX59b@read-library-source-file aX59b@read-library-source-file) (set! aX59d@make-parameter (lambda aX6ac (let ((aX6ad (length aX6ac))) (if (= aX6ad '1) (apply (lambda (aX69e@x) (aX59d@make-parameter aX69e@x (lambda (aX6a0@x) aX6a0@x))) aX6ac) (if (= aX6ad '2) (apply (lambda (aX6a2@x aX6a3@fender) (let ((aX6a6@x (aX6a3@fender aX6a2@x))) (lambda aX6aa (let ((aX6ab (length aX6aa))) (if (= aX6ab '0) (apply (lambda () aX6a6@x) aX6aa) (if (= aX6ab '1) (apply (lambda (aX6a8@v) (set! aX6a6@x (aX6a3@fender aX6a8@v))) aX6aa) (error 'apply '"invalid arg count"))))))) aX6ac) (error 'apply '"invalid arg count")))))) (set! aX6bf@aX59d@make-parameter aX59d@make-parameter) (set! aX59f@mosh-cache-dir (aX59d@make-parameter '#f)) (set! aX6c0@aX59f@mosh-cache-dir aX59f@mosh-cache-dir) (set! aX635@file-options-spec (lambda (aX6ae@x) aX6ae@x)) (set! aX6c1@aX635@file-options-spec aX635@file-options-spec) (void))
(begin (set! aX6c7@current-primitive-locations (unspecified)) (set! aX6c9@mutable? (unspecified)) (set! aX6cb@rewriter (unspecified)) (set! aX6cd@expanded->core (unspecified)) (set! aX6cf@compile-core-expr (unspecified)) (set! aX6d1@pretty-print (unspecified)) (set! aX6d3@compile-core-expr-to-port (unspecified)) (set! aX6c7@current-primitive-locations (aX6bf@aX59d@make-parameter (lambda (aX6d4@x) '#f) (lambda (aX6d6@p) aX6d6@p))) (set! aX712@aX6c7@current-primitive-locations aX6c7@current-primitive-locations) (set! aX6c9@mutable? (lambda (aX6d8@x) (or (pair? aX6d8@x) (vector? aX6d8@x) (hashtable? aX6d8@x)))) (set! aX713@aX6c9@mutable? aX6c9@mutable?) (set! aX6cb@rewriter (lambda (aX6da@quote-hack?) (let ((aX6dd@f '#f)) (begin (set! aX6dd@f (lambda (aX6de@x) (if (pair? aX6de@x) (let ((aX6e0@t (car aX6de@x))) (if (memv aX6e0@t '(quote)) (if (and aX6da@quote-hack? (aX6c9@mutable? (cadr aX6de@x))) (let ((aX6e2@g (gensym))) (begin (set-symbol-value! aX6e2@g (cadr aX6de@x)) aX6e2@g)) aX6de@x) (if (memv aX6e0@t '(case-lambda)) (cons 'case-lambda (map (lambda (aX6e4@x) (cons (car aX6e4@x) (map aX6dd@f (cdr aX6e4@x)))) (cdr aX6de@x))) (if (memv aX6e0@t '(lambda)) (cons* 'lambda (cadr aX6de@x) (map aX6dd@f (cddr aX6de@x))) (if (memv aX6e0@t '(letrec)) (let ((aX6e6@bindings (cadr aX6de@x)) (aX6e7@body* (cddr aX6de@x))) (let ((aX6ea@lhs* (map car aX6e6@bindings)) (aX6eb@rhs* (map cadr aX6e6@bindings))) (cons* 'letrec (map list aX6ea@lhs* (map aX6dd@f aX6eb@rhs*)) (map aX6dd@f aX6e7@body*)))) (if (memv aX6e0@t '(letrec*)) (let ((aX6ee@bindings (cadr aX6de@x)) (aX6ef@body* (cddr aX6de@x))) (let ((aX6f2@lhs* (map car aX6ee@bindings)) (aX6f3@rhs* (map cadr aX6ee@bindings))) (cons* 'letrec* (map list aX6f2@lhs* (map aX6dd@f aX6f3@rhs*)) (map aX6dd@f aX6ef@body*)))) (if (memv aX6e0@t '(library-letrec*)) (let ((aX6f6@name (cadr aX6de@x)) (aX6f7@x (cdr aX6de@x))) (let ((aX6fa@bindings (cadr aX6f7@x)) (aX6fb@body* (cddr aX6f7@x))) (let ((aX6fe@lhs* (map car aX6fa@bindings)) (aX6ff@lhs** (map cadr aX6fa@bindings)) (aX700@rhs* (map caddr aX6fa@bindings))) (cons* 'library-letrec* aX6f6@name (map list aX6fe@lhs* aX6ff@lhs** (map aX6dd@f aX700@rhs*)) (map aX6dd@f aX6fb@body*))))) (if (memv aX6e0@t '(begin)) (cons 'begin (map aX6dd@f (cdr aX6de@x))) (if (memv aX6e0@t '(set!)) (list 'set! (cadr aX6de@x) (aX6dd@f (caddr aX6de@x))) (if (memv aX6e0@t '(primitive)) (let ((aX704@op (cadr aX6de@x))) (let ((aX706@t ((aX6c7@current-primitive-locations) aX704@op))) (if aX706@t ((lambda (aX708@loc) aX708@loc) aX706@t) aX704@op))) (if (memv aX6e0@t '(define)) aX6de@x (if (list? aX6de@x) (map aX6dd@f aX6de@x) (error 'rewrite '"invalid form ~s ~s" aX6de@x (list? aX6de@x)))))))))))))) aX6de@x))) aX6dd@f)))) (set! aX714@aX6cb@rewriter aX6cb@rewriter) (set! aX6cd@expanded->core (lambda (aX70a@x) ((aX6cb@rewriter '#f) aX70a@x))) (set! aX715@aX6cd@expanded->core aX6cd@expanded->core) (set! aX6cf@compile-core-expr (lambda (aX70c@x) ((aX6cb@rewriter '#f) aX70c@x))) (set! aX716@aX6cf@compile-core-expr aX6cf@compile-core-expr) (set! aX6d1@pretty-print write) (set! aX717@aX6d1@pretty-print aX6d1@pretty-print) (set! aX6d3@compile-core-expr-to-port (lambda (aX70e@x aX70f@p) (aX6d1@pretty-print ((aX6cb@rewriter '#f) aX70e@x) aX70f@p))) (set! aX718@aX6d3@compile-core-expr-to-port aX6d3@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! aX767@make-collection (unspecified)) (set! aX769@current-library-collection (unspecified)) (set! aX76b@rp (unspecified)) (set! aX775@library? (unspecified)) (set! aX777@library-id (unspecified)) (set! aX779@set-library-id! (unspecified)) (set! aX77b@library-name (unspecified)) (set! aX77d@set-library-name! (unspecified)) (set! aX77f@library-version (unspecified)) (set! aX781@set-library-version! (unspecified)) (set! aX783@library-imp* (unspecified)) (set! aX785@set-library-imp*! (unspecified)) (set! aX787@library-vis* (unspecified)) (set! aX789@set-library-vis*! (unspecified)) (set! aX78b@library-inv* (unspecified)) (set! aX78d@set-library-inv*! (unspecified)) (set! aX78f@library-subst (unspecified)) (set! aX791@set-library-subst! (unspecified)) (set! aX793@library-env (unspecified)) (set! aX795@set-library-env! (unspecified)) (set! aX797@library-visit-state (unspecified)) (set! aX799@set-library-visit-state! (unspecified)) (set! aX79b@library-invoke-state (unspecified)) (set! aX79d@set-library-invoke-state! (unspecified)) (set! aX79f@library-visit-code (unspecified)) (set! aX7a1@set-library-visit-code! (unspecified)) (set! aX7a3@library-invoke-code (unspecified)) (set! aX7a5@set-library-invoke-code! (unspecified)) (set! aX7a7@library-visible? (unspecified)) (set! aX7a9@set-library-visible?! (unspecified)) (set! aX7ab@library-source-file-name (unspecified)) (set! aX7ad@set-library-source-file-name! (unspecified)) (set! aX7af@dummy (unspecified)) (set! aX7b1@find-dependencies (unspecified)) (set! aX7b3@find-library-by (unspecified)) (set! aX7b5@library-path (unspecified)) (set! aX7b7@library-extensions (unspecified)) (set! aX7b9@library-name->file-name (unspecified)) (set! aX7bb@file-locator (unspecified)) (set! aX7bd@serialize-all (unspecified)) (set! aX7bf@current-precompiled-library-loader (unspecified)) (set! aX7c1@try-load-from-file (unspecified)) (set! aX7c3@library-loader (unspecified)) (set! aX7c5@current-library-expander (unspecified)) (set! aX7c7@external-pending-libraries (unspecified)) (set! aX7c9@find-external-library (unspecified)) (set! aX7cb@find-library-by-name (unspecified)) (set! aX7cd@library-exists? (unspecified)) (set! aX7cf@find-library-by-spec/die (unspecified)) (set! aX7d1@label->binding-table (unspecified)) (set! aX7d3@install-library-record (unspecified)) (set! aX7d5@install-library (unspecified)) (set! aX7d7@imported-label->binding (unspecified)) (set! aX7d9@invoke-library (unspecified)) (set! aX7db@visit-library (unspecified)) (set! aX7dd@invoke-library-by-spec (unspecified)) (set! aX7df@installed-libraries (unspecified)) (set! aX7e1@library-spec (unspecified)) (set! aX767@make-collection (lambda () (let ((aX7e2@set '())) (let ((aX7e5@set-cons '#f)) (begin (set! aX7e5@set-cons (lambda (aX7ea@x aX7eb@ls) (if (memq aX7ea@x aX7eb@ls) aX7eb@ls (cons aX7ea@x aX7eb@ls)))) (lambda aX7e8 (let ((aX7e9 (length aX7e8))) (if (= aX7e9 '0) (apply (lambda () aX7e2@set) aX7e8) (if (= aX7e9 '1) (apply (lambda (aX7e6@x) (set! aX7e2@set (aX7e5@set-cons aX7e6@x aX7e2@set))) aX7e8) (error 'apply '"invalid arg count")))))))))) (set! aX956@aX767@make-collection aX767@make-collection) (set! aX769@current-library-collection (aX6bf@aX59d@make-parameter (aX767@make-collection) (lambda (aX7ee@x) (begin (if (not (procedure? aX7ee@x)) (assertion-violation 'current-library-collection '"not a procedure" aX7ee@x) (void)) aX7ee@x)))) (set! aX957@aX769@current-library-collection aX769@current-library-collection) (set! aX76b@rp (aX6bc@aX597@make-record-printer 'library (lambda (aX7f0@x aX7f1@p aX7f2@wr) (begin (if (not (aX775@library? aX7f0@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (aX77f@library-version aX7f0@x)) (aX77b@library-name aX7f0@x) (append (aX77b@library-name aX7f0@x) (list (aX77f@library-version aX7f0@x))))) aX7f1@p))))) (set! aX958@aX76b@rp aX76b@rp) (set! aX775@library? (lambda (aX7f6@x) (and (simple-struct? aX7f6@x) (eq? (simple-struct-name aX7f6@x) 'library)))) (set! aX959@aX775@library? aX775@library?) (set! aX777@library-id (lambda (aX7f8@x) (simple-struct-ref aX7f8@x '0))) (set! aX95a@aX777@library-id aX777@library-id) (set! aX779@set-library-id! (lambda (aX7fa@x aX7fb@val) (simple-struct-set! aX7fa@x '0 aX7fb@val))) (set! aX95b@aX779@set-library-id! aX779@set-library-id!) (set! aX77b@library-name (lambda (aX7fe@x) (simple-struct-ref aX7fe@x '1))) (set! aX95c@aX77b@library-name aX77b@library-name) (set! aX77d@set-library-name! (lambda (aX800@x aX801@val) (simple-struct-set! aX800@x '1 aX801@val))) (set! aX95d@aX77d@set-library-name! aX77d@set-library-name!) (set! aX77f@library-version (lambda (aX804@x) (simple-struct-ref aX804@x '2))) (set! aX95e@aX77f@library-version aX77f@library-version) (set! aX781@set-library-version! (lambda (aX806@x aX807@val) (simple-struct-set! aX806@x '2 aX807@val))) (set! aX95f@aX781@set-library-version! aX781@set-library-version!) (set! aX783@library-imp* (lambda (aX80a@x) (simple-struct-ref aX80a@x '3))) (set! aX960@aX783@library-imp* aX783@library-imp*) (set! aX785@set-library-imp*! (lambda (aX80c@x aX80d@val) (simple-struct-set! aX80c@x '3 aX80d@val))) (set! aX961@aX785@set-library-imp*! aX785@set-library-imp*!) (set! aX787@library-vis* (lambda (aX810@x) (simple-struct-ref aX810@x '4))) (set! aX962@aX787@library-vis* aX787@library-vis*) (set! aX789@set-library-vis*! (lambda (aX812@x aX813@val) (simple-struct-set! aX812@x '4 aX813@val))) (set! aX963@aX789@set-library-vis*! aX789@set-library-vis*!) (set! aX78b@library-inv* (lambda (aX816@x) (simple-struct-ref aX816@x '5))) (set! aX964@aX78b@library-inv* aX78b@library-inv*) (set! aX78d@set-library-inv*! (lambda (aX818@x aX819@val) (simple-struct-set! aX818@x '5 aX819@val))) (set! aX965@aX78d@set-library-inv*! aX78d@set-library-inv*!) (set! aX78f@library-subst (lambda (aX81c@x) (simple-struct-ref aX81c@x '6))) (set! aX966@aX78f@library-subst aX78f@library-subst) (set! aX791@set-library-subst! (lambda (aX81e@x aX81f@val) (simple-struct-set! aX81e@x '6 aX81f@val))) (set! aX967@aX791@set-library-subst! aX791@set-library-subst!) (set! aX793@library-env (lambda (aX822@x) (simple-struct-ref aX822@x '7))) (set! aX968@aX793@library-env aX793@library-env) (set! aX795@set-library-env! (lambda (aX824@x aX825@val) (simple-struct-set! aX824@x '7 aX825@val))) (set! aX969@aX795@set-library-env! aX795@set-library-env!) (set! aX797@library-visit-state (lambda (aX828@x) (simple-struct-ref aX828@x '8))) (set! aX96a@aX797@library-visit-state aX797@library-visit-state) (set! aX799@set-library-visit-state! (lambda (aX82a@x aX82b@val) (simple-struct-set! aX82a@x '8 aX82b@val))) (set! aX96b@aX799@set-library-visit-state! aX799@set-library-visit-state!) (set! aX79b@library-invoke-state (lambda (aX82e@x) (simple-struct-ref aX82e@x '9))) (set! aX96c@aX79b@library-invoke-state aX79b@library-invoke-state) (set! aX79d@set-library-invoke-state! (lambda (aX830@x aX831@val) (simple-struct-set! aX830@x '9 aX831@val))) (set! aX96d@aX79d@set-library-invoke-state! aX79d@set-library-invoke-state!) (set! aX79f@library-visit-code (lambda (aX834@x) (simple-struct-ref aX834@x '10))) (set! aX96e@aX79f@library-visit-code aX79f@library-visit-code) (set! aX7a1@set-library-visit-code! (lambda (aX836@x aX837@val) (simple-struct-set! aX836@x '10 aX837@val))) (set! aX96f@aX7a1@set-library-visit-code! aX7a1@set-library-visit-code!) (set! aX7a3@library-invoke-code (lambda (aX83a@x) (simple-struct-ref aX83a@x '11))) (set! aX970@aX7a3@library-invoke-code aX7a3@library-invoke-code) (set! aX7a5@set-library-invoke-code! (lambda (aX83c@x aX83d@val) (simple-struct-set! aX83c@x '11 aX83d@val))) (set! aX971@aX7a5@set-library-invoke-code! aX7a5@set-library-invoke-code!) (set! aX7a7@library-visible? (lambda (aX840@x) (simple-struct-ref aX840@x '12))) (set! aX972@aX7a7@library-visible? aX7a7@library-visible?) (set! aX7a9@set-library-visible?! (lambda (aX842@x aX843@val) (simple-struct-set! aX842@x '12 aX843@val))) (set! aX973@aX7a9@set-library-visible?! aX7a9@set-library-visible?!) (set! aX7ab@library-source-file-name (lambda (aX846@x) (simple-struct-ref aX846@x '13))) (set! aX974@aX7ab@library-source-file-name aX7ab@library-source-file-name) (set! aX7ad@set-library-source-file-name! (lambda (aX848@x aX849@val) (simple-struct-set! aX848@x '13 aX849@val))) (set! aX975@aX7ad@set-library-source-file-name! aX7ad@set-library-source-file-name!) (set! aX7af@dummy '3) (set! aX976@aX7af@dummy aX7af@dummy) (set! aX7b1@find-dependencies (lambda (aX84c@ls) (if (null? aX84c@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! aX977@aX7b1@find-dependencies aX7b1@find-dependencies) (set! aX7b3@find-library-by (lambda (aX84e@pred) (let aX852@f ((aX850@ls ((aX769@current-library-collection)))) (if (null? aX850@ls) '#f (if (aX84e@pred (car aX850@ls)) (car aX850@ls) (aX852@f (cdr aX850@ls))))))) (set! aX978@aX7b3@find-library-by aX7b3@find-library-by) (set! aX7b5@library-path (aX6bf@aX59d@make-parameter '(".") (lambda (aX854@x) (if (and (list? aX854@x) (for-all string? aX854@x)) (map (lambda (aX856@x) aX856@x) aX854@x) (assertion-violation 'library-path '"not a list of strings" aX854@x))))) (set! aX979@aX7b5@library-path aX7b5@library-path) (set! aX7b7@library-extensions (aX6bf@aX59d@make-parameter '(".sls" ".ss" ".scm") (lambda (aX858@x) (if (and (list? aX858@x) (for-all string? aX858@x)) (map (lambda (aX85a@x) aX85a@x) aX858@x) (assertion-violation 'library-extensions '"not a list of strings" aX858@x))))) (set! aX97a@aX7b7@library-extensions aX7b7@library-extensions) (set! aX7b9@library-name->file-name (lambda (aX85c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aX862@aX85f aX863@aX861) (let ((aX866@extract aX863@aX861) (aX867@p aX862@aX85f)) (let ((aX86b@display-hex '#f)) (begin (set! aX86b@display-hex (lambda (aX874@n) (if (<= '0 aX874@n '9) (display aX874@n aX867@p) (display (integer->char (+ (char->integer '#\a) (- aX874@n '10))) aX867@p)))) (begin (let aX86e@f ((aX86c@ls aX85c@x)) (if (not (null? aX86c@ls)) (begin (display '"/" aX867@p) (for-each (lambda (aX870@c) (if (or (char<=? '#\a aX870@c '#\z) (char<=? '#\A aX870@c '#\Z) (char<=? '#\0 aX870@c '#\9) (memv aX870@c '(#\- #\. #\_ #\~))) (display aX870@c aX867@p) (begin (display '"%" aX867@p) (let ((aX872@n (char->integer aX870@c))) (begin (aX86b@display-hex (quotient aX872@n '16)) (aX86b@display-hex (remainder aX872@n '16))))))) (string->list (symbol->string (car aX86c@ls)))) (aX86e@f (cdr aX86c@ls))) (void))) (aX866@extract))))))))) (set! aX97b@aX7b9@library-name->file-name aX7b9@library-name->file-name) (set! aX7bb@file-locator (aX6bf@aX59d@make-parameter (lambda (aX876@x) (let ((aX878@str (aX7b9@library-name->file-name aX876@x))) (let aX880@f ((aX87a@ls (aX7b5@library-path)) (aX87b@exts (aX7b7@library-extensions)) (aX87c@failed-list '())) (if (null? aX87a@ls) (let ((aX88a@aX885 '#f) (aX88c@aX887 '#f) (aX88e@aX886 '#f) (aX891@aX884 '#f) (aX893@make-library-resolution-condition '#f) (aX895@aX882 '#f) (aX897@aX883 '#f) (aX899@library-resolution-condition? '#f) (aX89b@condition-library '#f) (aX89d@condition-files '#f)) (begin (set! aX88a@aX885 (make-record-type-descriptor '&library-resolution aX2b91@aX28d8@&condition-rtd 'aX888 '#f '#f '#((immutable library) (immutable files)))) (set! aX88c@aX887 '#f) (set! aX88e@aX886 (make-record-constructor-descriptor aX88a@aX885 aX2b92@aX28da@&condition-rcd aX88c@aX887)) (set! aX891@aX884 (record-predicate aX88a@aX885)) (set! aX893@make-library-resolution-condition (record-constructor aX88e@aX886)) (set! aX895@aX882 (record-accessor aX88a@aX885 '0)) (set! aX897@aX883 (record-accessor aX88a@aX885 '1)) (set! aX899@library-resolution-condition? (condition-predicate aX88a@aX885)) (set! aX89b@condition-library (condition-accessor aX88a@aX885 aX895@aX882)) (set! aX89d@condition-files (condition-accessor aX88a@aX885 aX897@aX883)) (raise (condition (aX2bb1@aX2972@make-error) (aX2bd3@aX29ce@make-who-condition 'expander) (aX2b97@aX292f@make-message-condition '"cannot locate library in library-path") (aX893@make-library-resolution-condition aX876@x (reverse aX87c@failed-list)))))) (if (null? aX87b@exts) (aX880@f (cdr aX87a@ls) (aX7b7@library-extensions) aX87c@failed-list) (let ((aX89e@name (string-append (car aX87a@ls) aX878@str (car aX87b@exts)))) (if (file-exists? aX89e@name) aX89e@name (aX880@f aX87a@ls (cdr aX87b@exts) (cons aX89e@name aX87c@failed-list))))))))) (lambda (aX8a0@f) (if (procedure? aX8a0@f) aX8a0@f (assertion-violation 'file-locator '"not a procedure" aX8a0@f))))) (set! aX97c@aX7bb@file-locator aX7bb@file-locator) (set! aX7bd@serialize-all (lambda (aX8a2@serialize aX8a3@compile) (let ((aX8a7@library-desc '#f)) (begin (set! aX8a7@library-desc (lambda (aX8aa@x) (list (aX777@library-id aX8aa@x) (aX77b@library-name aX8aa@x)))) (for-each (lambda (aX8a8@x) (if (aX7ab@library-source-file-name aX8a8@x) (aX8a2@serialize (aX7ab@library-source-file-name aX8a8@x) (list (aX777@library-id aX8a8@x) (aX77b@library-name aX8a8@x) (aX77f@library-version aX8a8@x) (map aX8a7@library-desc (aX783@library-imp* aX8a8@x)) (map aX8a7@library-desc (aX787@library-vis* aX8a8@x)) (map aX8a7@library-desc (aX78b@library-inv* aX8a8@x)) (aX78f@library-subst aX8a8@x) (aX793@library-env aX8a8@x) (aX8a3@compile (aX79f@library-visit-code aX8a8@x)) (aX8a3@compile (aX7a3@library-invoke-code aX8a8@x)) (aX7a7@library-visible? aX8a8@x))) (void))) ((aX769@current-library-collection))))))) (set! aX97d@aX7bd@serialize-all aX7bd@serialize-all) (set! aX7bf@current-precompiled-library-loader (aX6bf@aX59d@make-parameter (lambda (aX8ac@filename aX8ad@sk) '#f))) (set! aX97e@aX7bf@current-precompiled-library-loader aX7bf@current-precompiled-library-loader) (set! aX7c1@try-load-from-file (lambda (aX8b0@filename) ((aX7bf@current-precompiled-library-loader) aX8b0@filename (lambda aX8d6 (let ((aX8d7 (length aX8d6))) (if (= aX8d7 '11) (apply (lambda (aX8b2@id aX8b3@name aX8b4@ver aX8b5@imp* aX8b6@vis* aX8b7@inv* aX8b8@exp-subst aX8b9@exp-env aX8ba@visit-proc aX8bb@invoke-proc aX8bc@visible?) (let aX8ca@f ((aX8c8@deps (append aX8b5@imp* aX8b6@vis* aX8b7@inv*))) (if (null? aX8c8@deps) (begin (aX7d5@install-library aX8b2@id aX8b3@name aX8b4@ver aX8b5@imp* aX8b6@vis* aX8b7@inv* aX8b8@exp-subst aX8b9@exp-env aX8ba@visit-proc aX8bb@invoke-proc '#f '#f aX8bc@visible? '#f) '#t) (let ((aX8cc@d (car aX8c8@deps))) (let ((aX8ce@label (car aX8cc@d)) (aX8cf@dname (cadr aX8cc@d))) (let ((aX8d2@l (aX7cb@find-library-by-name aX8cf@dname))) (if (and (aX775@library? aX8d2@l) (eq? aX8ce@label (aX777@library-id aX8d2@l))) (aX8ca@f (cdr aX8c8@deps)) (begin (if aX6b9@aX591@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" aX8b3@name aX8cf@dname aX8b0@filename aX8d2@l aX8ce@label (aX777@library-id aX8d2@l)) (void)) '#f)))))))) aX8d6) (if (>= aX8d7 '0) (apply (lambda aX8d4@others '#f) aX8d6) (error 'apply '"invalid arg count")))))))) (set! aX97f@aX7c1@try-load-from-file aX7c1@try-load-from-file) (set! aX7c3@library-loader (aX6bf@aX59d@make-parameter (lambda (aX8d8@x) (let ((aX8da@file-name ((aX7bb@file-locator) aX8d8@x))) (if (not aX8da@file-name) (assertion-violation '#f '"cannot file library" aX8d8@x) (or (aX7c1@try-load-from-file aX8da@file-name) ((aX7c5@current-library-expander) (aX6be@aX59b@read-library-source-file aX8da@file-name) aX8da@file-name (lambda (aX8dc@name) (if (not (fast-equal? aX8dc@name aX8d8@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (aX8e2@aX8df aX8e3@aX8e1) (let ((aX8e6@e aX8e3@aX8e1) (aX8e7@p aX8e2@aX8df)) (begin (display '"expected to find library " aX8e7@p) (write aX8d8@x aX8e7@p) (display '" in file " aX8e7@p) (display aX8da@file-name aX8e7@p) (display '", found " aX8e7@p) (write aX8dc@name aX8e7@p) (display '" instead" aX8e7@p) (aX8e6@e)))))) (void)))))))) (lambda (aX8ea@f) (if (procedure? aX8ea@f) aX8ea@f (assertion-violation 'library-locator '"not a procedure" aX8ea@f))))) (set! aX980@aX7c3@library-loader aX7c3@library-loader) (set! aX7c5@current-library-expander (aX6bf@aX59d@make-parameter (lambda (aX8ec@x) (assertion-violation 'library-expander '"not initialized")) (lambda (aX8ee@f) (if (procedure? aX8ee@f) aX8ee@f (assertion-violation 'library-expander '"not a procedure" aX8ee@f))))) (set! aX981@aX7c5@current-library-expander aX7c5@current-library-expander) (set! aX7c7@external-pending-libraries (aX6bf@aX59d@make-parameter '())) (set! aX982@aX7c7@external-pending-libraries aX7c7@external-pending-libraries) (set! aX7c9@find-external-library (lambda (aX8f0@name) (begin (if (member aX8f0@name (aX7c7@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" aX8f0@name) (void)) (let ((aX8f6@aX8f3 aX7c7@external-pending-libraries) (aX8f7@aX8f5 (cons aX8f0@name (aX7c7@external-pending-libraries)))) (let ((aX8fa@swap (lambda () (let ((aX8fc@t (aX8f6@aX8f3))) (begin (aX8f6@aX8f3 aX8f7@aX8f5) (set! aX8f7@aX8f5 aX8fc@t)))))) (dynamic-wind aX8fa@swap (lambda () (begin ((aX7c3@library-loader) aX8f0@name) (or (aX7b3@find-library-by (lambda (aX8fe@x) (fast-equal? (aX77b@library-name aX8fe@x) aX8f0@name))) (assertion-violation '#f '"handling external library did not yield the correct library" aX8f0@name)))) aX8fa@swap)))))) (set! aX983@aX7c9@find-external-library aX7c9@find-external-library) (set! aX7cb@find-library-by-name (lambda (aX900@name) (or (aX7b3@find-library-by (lambda (aX902@x) (fast-equal? (aX77b@library-name aX902@x) aX900@name))) (aX7c9@find-external-library aX900@name)))) (set! aX984@aX7cb@find-library-by-name aX7cb@find-library-by-name) (set! aX7cd@library-exists? (lambda (aX904@name) (and (aX7b3@find-library-by (lambda (aX906@x) (fast-equal? (aX77b@library-name aX906@x) aX904@name))) '#t))) (set! aX985@aX7cd@library-exists? aX7cd@library-exists?) (set! aX7cf@find-library-by-spec/die (lambda (aX908@spec) (let ((aX90a@id (car aX908@spec))) (or (aX7b3@find-library-by (lambda (aX90c@x) (eq? aX90a@id (aX777@library-id aX90c@x)))) (assertion-violation '#f '"cannot find library with required spec" aX908@spec))))) (set! aX986@aX7cf@find-library-by-spec/die aX7cf@find-library-by-spec/die) (set! aX7d1@label->binding-table (make-eq-hashtable)) (set! aX987@aX7d1@label->binding-table aX7d1@label->binding-table) (set! aX7d3@install-library-record (lambda (aX90e@lib) (begin (let ((aX910@exp-env (aX793@library-env aX90e@lib))) (for-each (lambda (aX912@x) (let ((aX914@label (car aX912@x)) (aX915@binding (cdr aX912@x))) (let ((aX918@binding (let ((aX91a@t (car aX915@binding))) (if (memv aX91a@t '(global)) (cons 'global (cons aX90e@lib (cdr aX915@binding))) (if (memv aX91a@t '(global-macro)) (cons 'global-macro (cons aX90e@lib (cdr aX915@binding))) (if (memv aX91a@t '(global-macro!)) (cons 'global-macro! (cons aX90e@lib (cdr aX915@binding))) aX915@binding)))))) (begin (if (hashtable-ref aX7d1@label->binding-table aX914@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" aX914@label (hashtable-ref aX7d1@label->binding-table aX914@label '#f) aX918@binding) (exit)) (void)) (hashtable-set! aX7d1@label->binding-table aX914@label aX918@binding))))) aX910@exp-env)) ((aX769@current-library-collection) aX90e@lib)))) (set! aX988@aX7d3@install-library-record aX7d3@install-library-record) (set! aX7d5@install-library (lambda (aX91c@id aX91d@name aX91e@ver aX91f@imp* aX920@vis* aX921@inv* aX922@exp-subst aX923@exp-env aX924@visit-proc aX925@invoke-proc aX926@visit-code aX927@invoke-code aX928@visible? aX929@source-file-name) (let ((aX938@imp-lib* (map aX7cf@find-library-by-spec/die aX91f@imp*)) (aX939@vis-lib* (map aX7cf@find-library-by-spec/die aX920@vis*)) (aX93a@inv-lib* (map aX7cf@find-library-by-spec/die aX921@inv*))) (begin (if (not (and (symbol? aX91c@id) (list? aX91d@name) (list? aX91e@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" aX91c@id aX91d@name aX91e@ver) (void)) (if (aX7cd@library-exists? aX91d@name) (assertion-violation 'install-library '"library is already installed" aX91d@name) (void)) (let ((aX93e@lib (make-simple-struct 'library '15 (list aX91c@id aX91d@name aX91e@ver aX938@imp-lib* aX939@vis-lib* aX93a@inv-lib* aX922@exp-subst aX923@exp-env aX924@visit-proc aX925@invoke-proc aX926@visit-code aX927@invoke-code aX928@visible? aX929@source-file-name)))) (aX7d3@install-library-record aX93e@lib)))))) (set! aX989@aX7d5@install-library aX7d5@install-library) (set! aX7d7@imported-label->binding (lambda (aX940@lab) (hashtable-ref aX7d1@label->binding-table aX940@lab '#f))) (set! aX98a@aX7d7@imported-label->binding aX7d7@imported-label->binding) (set! aX7d9@invoke-library (lambda (aX942@lib) (let ((aX944@invoke (aX79b@library-invoke-state aX942@lib))) (if (procedure? aX944@invoke) (begin (aX79d@set-library-invoke-state! aX942@lib (lambda () (assertion-violation 'invoke '"circularity detected" aX942@lib))) (for-each aX7d9@invoke-library (aX78b@library-inv* aX942@lib)) (aX79d@set-library-invoke-state! aX942@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" aX942@lib))) (aX944@invoke) (aX79d@set-library-invoke-state! aX942@lib '#t)) (void))))) (set! aX98b@aX7d9@invoke-library aX7d9@invoke-library) (set! aX7db@visit-library (lambda (aX946@lib) (let ((aX948@visit (aX797@library-visit-state aX946@lib))) (if (procedure? aX948@visit) (begin (aX799@set-library-visit-state! aX946@lib (lambda () (assertion-violation 'visit '"circularity detected" aX946@lib))) (for-each aX7d9@invoke-library (aX787@library-vis* aX946@lib)) (aX799@set-library-visit-state! aX946@lib (lambda () (assertion-violation 'invoke '"first visit did not return" aX946@lib))) (aX948@visit) (aX799@set-library-visit-state! aX946@lib '#t)) (void))))) (set! aX98c@aX7db@visit-library aX7db@visit-library) (set! aX7dd@invoke-library-by-spec (lambda (aX94a@spec) (aX7d9@invoke-library (aX7cf@find-library-by-spec/die aX94a@spec)))) (set! aX98d@aX7dd@invoke-library-by-spec aX7dd@invoke-library-by-spec) (set! aX7df@installed-libraries (lambda aX952 (let ((aX953 (length aX952))) (if (= aX953 '1) (apply (lambda (aX94c@all?) (let aX950@f ((aX94e@ls ((aX769@current-library-collection)))) (if (null? aX94e@ls) '() (if (or aX94c@all? (aX7a7@library-visible? (car aX94e@ls))) (cons (car aX94e@ls) (aX950@f (cdr aX94e@ls))) (aX950@f (cdr aX94e@ls)))))) aX952) (if (= aX953 '0) (apply (lambda () (aX7df@installed-libraries '#f)) aX952) (error 'apply '"invalid arg count")))))) (set! aX98e@aX7df@installed-libraries aX7df@installed-libraries) (set! aX7e1@library-spec (lambda (aX954@x) (begin (if (not (aX775@library? aX954@x)) (assertion-violation 'library-spec '"not a library" aX954@x) (void)) (list (aX777@library-id aX954@x) (aX77b@library-name aX954@x) (aX77f@library-version aX954@x))))) (set! aX98f@aX7e1@library-spec aX7e1@library-spec) (void))
(begin (set! aX993@build-global-define (unspecified)) (set! aXa04@build-lambda (unspecified)) (set! aXa06@build-case-lambda (unspecified)) (set! aXa34@build-sequence (unspecified)) (set! aXa36@build-void (unspecified)) (set! aXa38@build-letrec (unspecified)) (set! aXa3a@build-let (unspecified)) (set! aXa3c@build-named-let (unspecified)) (set! aXa3e@build-letrec* (unspecified)) (set! aXa40@build-library-letrec* (unspecified)) (set! aXa42@build-receive (unspecified)) (set! aX993@build-global-define (lambda (aXa43@x) (aXa36@build-void))) (set! aXad7@aX993@build-global-define aX993@build-global-define) (set! aXa04@build-lambda (lambda (aXa45@ae aXa46@vars aXa47@exp) (list 'lambda aXa46@vars aXa47@exp))) (set! aXad8@aXa04@build-lambda aXa04@build-lambda) (set! aXa06@build-case-lambda (lambda (aXa4b@ae aXa4c@vars* aXa4d@exp*) (let ((aXa52@build-error '#f) (aXa54@build-pred '#f) (aXa56@build-apply '#f) (aXa58@expand-case-lambda '#f)) (begin (set! aXa52@build-error (lambda (aXa89@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! aXa54@build-pred (lambda (aXa71@ae aXa72@n aXa73@vars) (call-with-values (lambda () (let aXa7f@f ((aXa7b@vars aXa73@vars) (aXa7c@count '0)) (if (pair? aXa7b@vars) (aXa7f@f (cdr aXa7b@vars) (+ aXa7c@count '1)) (if (null? aXa7b@vars) (values aXa7c@count '=) (values aXa7c@count '>=))))) (lambda (aXa81@aXa78 aXa82@aXa7a) (let ((aXa85@pred aXa82@aXa7a) (aXa86@count aXa81@aXa78)) (list (list 'primitive aXa85@pred) aXa72@n (list 'quote aXa86@count))))))) (set! aXa56@build-apply (lambda (aXa69@ae aXa6a@g aXa6b@vars aXa6c@exp) (list '(primitive apply) (aXa04@build-lambda aXa69@ae aXa6b@vars aXa6c@exp) aXa6a@g))) (set! aXa58@expand-case-lambda (lambda (aXa59@ae aXa5a@vars aXa5b@exp*) (let ((aXa5f@g (gensym)) (aXa60@n (gensym))) (list 'lambda aXa5f@g (aXa3a@build-let aXa59@ae (list aXa60@n) (list (list '(primitive length) aXa5f@g)) (let aXa67@f ((aXa63@vars* aXa4c@vars*) (aXa64@exp* aXa5b@exp*)) (if (null? aXa63@vars*) (aXa52@build-error aXa59@ae) (list 'if (aXa54@build-pred aXa59@ae aXa60@n (car aXa63@vars*)) (aXa56@build-apply aXa59@ae aXa5f@g (car aXa63@vars*) (car aXa64@exp*)) (aXa67@f (cdr aXa63@vars*) (cdr aXa64@exp*)))))))))) (if (= (length aXa4d@exp*) '1) (aXa04@build-lambda aXa4b@ae (car aXa4c@vars*) (car aXa4d@exp*)) (aXa58@expand-case-lambda aXa4b@ae aXa4c@vars* aXa4d@exp*)))))) (set! aXad9@aXa06@build-case-lambda aXa06@build-case-lambda) (set! aXa34@build-sequence (lambda (aXa8b@ae aXa8c@exps) (let aXa91@loop ((aXa8f@exps aXa8c@exps)) (if (null? (cdr aXa8f@exps)) (car aXa8f@exps) (if (equal? (car aXa8f@exps) (aXa36@build-void)) (aXa91@loop (cdr aXa8f@exps)) (cons 'begin aXa8f@exps)))))) (set! aXada@aXa34@build-sequence aXa34@build-sequence) (set! aXa36@build-void (lambda () '((primitive void)))) (set! aXadb@aXa36@build-void aXa36@build-void) (set! aXa38@build-letrec (lambda (aXa93@ae aXa94@vars aXa95@val-exps aXa96@body-exp) (if (null? aXa94@vars) aXa96@body-exp (list 'letrec (map list aXa94@vars aXa95@val-exps) aXa96@body-exp)))) (set! aXadc@aXa38@build-letrec aXa38@build-letrec) (set! aXa3a@build-let (lambda (aXa9b@ae aXa9c@vars aXa9d@val-exps aXa9e@body-exp) (if (null? aXa9c@vars) aXa9e@body-exp (list 'let (map list aXa9c@vars aXa9d@val-exps) aXa9e@body-exp)))) (set! aXadd@aXa3a@build-let aXa3a@build-let) (set! aXa3c@build-named-let (lambda (aXaa3@ae aXaa4@name aXaa5@vars aXaa6@val-exps aXaa7@body-exp) (list 'let aXaa4@name (map list aXaa5@vars aXaa6@val-exps) aXaa7@body-exp))) (set! aXade@aXa3c@build-named-let aXa3c@build-named-let) (set! aXa3e@build-letrec* (lambda (aXaad@ae aXaae@vars aXaaf@val-exps aXab0@body-exp) (if (null? aXaae@vars) aXab0@body-exp (aXa3a@build-let aXaad@ae aXaae@vars (map (lambda (aXab5@x) (list 'quote '#f)) aXaae@vars) (aXa34@build-sequence aXaad@ae (append (map (lambda (aXab7@lhs aXab8@rhs) (list 'set! aXab7@lhs aXab8@rhs)) aXaae@vars aXaaf@val-exps) (list aXab0@body-exp))))))) (set! aXadf@aXa3e@build-letrec* aXa3e@build-letrec*) (set! aXa40@build-library-letrec* (lambda (aXabb@ae aXabc@name aXabd@vars aXabe@locs aXabf@val-exps aXac0@body-exp) (cons 'begin (append (map (lambda (aXac7@var) (cons 'set! (cons aXac7@var '((unspecified))))) aXabd@vars) (append (apply append (map (lambda (aXac9@var aXaca@loc aXacb@val-exp) (list (list 'set! aXac9@var aXacb@val-exp) (list 'set! aXaca@loc aXac9@var))) aXabd@vars aXabe@locs aXabf@val-exps)) (list aXac0@body-exp)))))) (set! aXae0@aXa40@build-library-letrec* aXa40@build-library-letrec*) (set! aXa42@build-receive (lambda (aXacf@ae aXad0@vars aXad1@producer aXad2@body*) (begin (display '"************** in ") (cons 'receive (cons aXad0@vars (cons aXad1@producer aXad2@body*)))))) (set! aXae1@aXa42@build-receive aXa42@build-receive) (void))
(begin (set! aXaf0@file-options-macro (unspecified)) (set! aXaf2@set-cons (unspecified)) (set! aXaf4@set-union (unspecified)) (set! aXaf9@top-mark* (unspecified)) (set! aXafb@top-marked? (unspecified)) (set! aXafd@gen-lexical (unspecified)) (set! aXaff@gen-global (unspecified)) (set! aXb01@gen-label (unspecified)) (set! aXb03@gen-top-level-label (unspecified)) (set! aXb05@gen-define-label+loc (unspecified)) (set! aXb07@gen-define-label (unspecified)) (set! aXb11@rib? (unspecified)) (set! aXb13@rib-sym* (unspecified)) (set! aXb15@set-rib-sym*! (unspecified)) (set! aXb17@rib-mark** (unspecified)) (set! aXb19@set-rib-mark**! (unspecified)) (set! aXb1b@rib-label* (unspecified)) (set! aXb1d@set-rib-label*! (unspecified)) (set! aXb1f@rib-sealed/freq (unspecified)) (set! aXb21@set-rib-sealed/freq! (unspecified)) (set! aXb23@rib-cache (unspecified)) (set! aXb25@set-rib-cache! (unspecified)) (set! aXb27@dummy (unspecified)) (set! aXb29@make-empty-rib (unspecified)) (set! aXb2b@extend-rib! (unspecified)) (set! aXb2d@extend-rib/nc! (unspecified)) (set! aXb2f@make-rib-map (unspecified)) (set! aXb31@seal-rib! (unspecified)) (set! aXb33@unseal-rib! (unspecified)) (set! aXb35@make-full-rib (unspecified)) (set! aXb37@rp (unspecified)) (set! aXb41@stx? (unspecified)) (set! aXb43@stx-expr (unspecified)) (set! aXb45@set-stx-expr! (unspecified)) (set! aXb47@stx-mark* (unspecified)) (set! aXb49@set-stx-mark*! (unspecified)) (set! aXb4b@stx-subst* (unspecified)) (set! aXb4d@set-stx-subst*! (unspecified)) (set! aXb4f@stx-ae* (unspecified)) (set! aXb51@set-stx-ae*! (unspecified)) (set! aXb53@dummy (unspecified)) (set! aXb55@datum->stx (unspecified)) (set! aXb57@gen-mark (unspecified)) (set! aXb59@anti-mark (unspecified)) (set! aXb5b@anti-mark? (unspecified)) (set! aXb5d@mkstx (unspecified)) (set! aXb5f@add-mark (unspecified)) (set! aXb61@add-subst (unspecified)) (set! aXb63@syntax-kind? (unspecified)) (set! aXb65@syntax-vector->list (unspecified)) (set! aXb67@syntax-pair? (unspecified)) (set! aXb69@syntax-vector? (unspecified)) (set! aXb6b@syntax-null? (unspecified)) (set! aXb6d@syntax-list? (unspecified)) (set! aXb6f@syntax-car (unspecified)) (set! aXb71@syntax-cdr (unspecified)) (set! aXb73@syntax->list (unspecified)) (set! aXb75@id? (unspecified)) (set! aXb77@id->sym (unspecified)) (set! aXb79@bound-id=? (unspecified)) (set! aXb7b@free-id=? (unspecified)) (set! aXb7d@valid-bound-ids? (unspecified)) (set! aXb7f@distinct-bound-ids? (unspecified)) (set! aXb81@bound-id-member? (unspecified)) (set! aXb83@self-evaluating? (unspecified)) (set! aXb85@strip-annotations (unspecified)) (set! aXb87@strip (unspecified)) (set! aXb89@stx->datum (unspecified)) (set! aXb8b@id->label (unspecified)) (set! aXb8d@label->binding (unspecified)) (set! aXb8f@make-binding (unspecified)) (set! aXb91@binding-type (unspecified)) (set! aXb93@binding-value (unspecified)) (set! aXb95@raise-unbound-error (unspecified)) (set! aXb97@syntax-type (unspecified)) (set! aXba5@sanitize-binding (unspecified)) (set! aXba7@make-variable-transformer (unspecified)) (set! aXba9@variable-transformer? (unspecified)) (set! aXbab@variable-transformer-procedure (unspecified)) (set! aXbad@make-eval-transformer (unspecified)) (set! aXcfe@parse-define (unspecified)) (set! aXd00@parse-define-syntax (unspecified)) (set! aXd02@scheme-stx-hashtable (unspecified)) (set! aXd04@scheme-stx (unspecified)) (set! aXd06@lexical-var (unspecified)) (set! aXd08@lexical-mutable? (unspecified)) (set! aXd0a@set-lexical-mutable! (unspecified)) (set! aXd0c@add-lexical (unspecified)) (set! aXd0e@add-lexicals (unspecified)) (set! aXd10@letrec-helper (unspecified)) (set! aXd12@let-transformer (unspecified)) (set! aXd14@letrec-transformer (unspecified)) (set! aXd16@letrec*-transformer (unspecified)) (set! aXd18@fluid-let-syntax-transformer (unspecified)) (set! aXd1a@type-descriptor-transformer (unspecified)) (set! aXd1c@record-type-descriptor-transformer (unspecified)) (set! aXd1e@record-constructor-descriptor-transformer (unspecified)) (set! aXd20@when-macro (unspecified)) (set! aXd22@unless-macro (unspecified)) (set! aXd24@if-transformer (unspecified)) (set! aXd26@and-transformer (unspecified)) (set! aXd28@or-transformer (unspecified)) (set! aXd2a@case-macro (unspecified)) (set! aXd2c@quote-transformer (unspecified)) (set! aXd2e@case-lambda-transformer (unspecified)) (set! aXd30@lambda-transformer (unspecified)) (set! aXd32@bless (unspecified)) (set! aXd34@with-syntax-macro (unspecified)) (set! aXd36@invalid-fmls-error (unspecified)) (set! aXd38@let-macro (unspecified)) (set! aXd3a@let-values-macro (unspecified)) (set! aXd3c@let*-values-macro (unspecified)) (set! aXd3e@trace-lambda-macro (unspecified)) (set! aXd40@trace-define-macro (unspecified)) (set! aXd42@trace-define-syntax-macro (unspecified)) (set! aXd44@trace-let/rec-syntax (unspecified)) (set! aXd46@trace-let-syntax-macro (unspecified)) (set! aXd48@trace-letrec-syntax-macro (unspecified)) (set! aXd4a@guard-macro (unspecified)) (set! aXd4c@define-enumeration-macro (unspecified)) (set! aXd4e@time-macro (unspecified)) (set! aXd50@delay-macro (unspecified)) (set! aXd52@assert-macro (unspecified)) (set! aXd54@endianness-macro (unspecified)) (set! aXd56@identifier-syntax-macro (unspecified)) (set! aXd58@do-macro (unspecified)) (set! aXd5a@let*-macro (unspecified)) (set! aXd5c@or-macro (unspecified)) (set! aXd5e@and-macro (unspecified)) (set! aXd60@cond-macro (unspecified)) (set! aXd62@do-include (unspecified)) (set! aXd64@include-macro (unspecified)) (set! aXd66@include-into-macro (unspecified)) (set! aXd68@syntax-rules-macro (unspecified)) (set! aXd6a@quasiquote-macro (unspecified)) (set! aXd6c@quasisyntax-macro (unspecified)) (set! aXd6e@define-struct-macro (unspecified)) (set! aXd70@define-record-type-macro (unspecified)) (set! aXd72@define-condition-type-macro (unspecified)) (set! aXd74@incorrect-usage-macro (unspecified)) (set! aXd76@parameterize-macro (unspecified)) (set! aXd78@foreign-call-transformer (unspecified)) (set! aXd7a@convert-pattern (unspecified)) (set! aXd7c@syntax-dispatch (unspecified)) (set! aXd7e@ellipsis? (unspecified)) (set! aXd80@underscore? (unspecified)) (set! aXd82@verify-literals (unspecified)) (set! aXd84@syntax-case-transformer (unspecified)) (set! aXd86@ellipsis-map (unspecified)) (set! aXd88@syntax-transformer (unspecified)) (set! aXd8a@core-macro-transformer (unspecified)) (set! aXd8c@symbol-macro (unspecified)) (set! aXd8e@macro-transformer (unspecified)) (set! aXd90@local-macro-transformer (unspecified)) (set! aXd92@do-macro-call (unspecified)) (set! aXd94@chi-macro (unspecified)) (set! aXd96@chi-local-macro (unspecified)) (set! aXd98@chi-global-macro (unspecified)) (set! aXd9a@chi-expr* (unspecified)) (set! aXd9c@chi-application (unspecified)) (set! aXd9e@chi-expr (unspecified)) (set! aXda0@chi-set! (unspecified)) (set! aXda2@verify-formals (unspecified)) (set! aXda4@chi-lambda-clause (unspecified)) (set! aXda6@chi-lambda-clause* (unspecified)) (set! aXda8@chi-defun (unspecified)) (set! aXdaa@chi-rhs (unspecified)) (set! aXdac@expand-interaction-rhs*/init* (unspecified)) (set! aXdae@chi-rhs* (unspecified)) (set! aXdb0@find-bound=? (unspecified)) (set! aXdb2@find-dups (unspecified)) (set! aXdb4@chi-internal (unspecified)) (set! aXdb6@parse-module (unspecified)) (set! aXdc0@module-interface? (unspecified)) (set! aXdc2@module-interface-first-mark (unspecified)) (set! aXdc4@set-module-interface-first-mark! (unspecified)) (set! aXdc6@module-interface-exp-id-vec (unspecified)) (set! aXdc8@set-module-interface-exp-id-vec! (unspecified)) (set! aXdca@module-interface-exp-lab-vec (unspecified)) (set! aXdcc@set-module-interface-exp-lab-vec! (unspecified)) (set! aXdce@dummy (unspecified)) (set! aXdd0@module-interface-exp-id* (unspecified)) (set! aXdd2@chi-internal-module (unspecified)) (set! aXdd4@chi-body* (unspecified)) (set! aXdd6@expand-transformer (unspecified)) (set! aXdd8@parse-exports (unspecified)) (set! aXdda@parse-library-name (unspecified)) (set! aXddc@parse-library (unspecified)) (set! aXdde@parse-import-spec* (unspecified)) (set! aXde0@make-top-rib (unspecified)) (set! aXde2@make-collector (unspecified)) (set! aXde4@inv-collector (unspecified)) (set! aXde6@vis-collector (unspecified)) (set! aXde8@imp-collector (unspecified)) (set! aXdea@chi-library-internal (unspecified)) (set! aXdec@chi-interaction-expr (unspecified)) (set! aXdee@library-body-expander (unspecified)) (set! aXdf0@core-library-expander (unspecified)) (set! aXdf2@parse-top-level-program (unspecified)) (set! aXdf4@top-level-expander (unspecified)) (set! aXdf6@rp (unspecified)) (set! aXe00@env? (unspecified)) (set! aXe02@env-names (unspecified)) (set! aXe04@set-env-names! (unspecified)) (set! aXe06@env-labels (unspecified)) (set! aXe08@set-env-labels! (unspecified)) (set! aXe0a@env-itc (unspecified)) (set! aXe0c@set-env-itc! (unspecified)) (set! aXe0e@dummy (unspecified)) (set! aXe10@rp (unspecified)) (set! aXe1a@interaction-env? (unspecified)) (set! aXe1c@interaction-env-rib (unspecified)) (set! aXe1e@set-interaction-env-rib! (unspecified)) (set! aXe20@interaction-env-r (unspecified)) (set! aXe22@set-interaction-env-r! (unspecified)) (set! aXe24@interaction-env-locs (unspecified)) (set! aXe26@set-interaction-env-locs! (unspecified)) (set! aXe28@dummy (unspecified)) (set! aXe2a@interaction-environment-symbols (unspecified)) (set! aXe2c@environment-bindings (unspecified)) (set! aXe2e@parse-binding (unspecified)) (set! aXe30@environment? (unspecified)) (set! aXe32@environment-symbols (unspecified)) (set! aXe34@environment (unspecified)) (set! aXe36@null-environment (unspecified)) (set! aXe38@scheme-report-environment (unspecified)) (set! aXe3a@expand (unspecified)) (set! aXe3c@eval (unspecified)) (set! aXe3e@library-expander (unspecified)) (set! aXe40@boot-library-expand (unspecified)) (set! aXe42@rev-map-append (unspecified)) (set! aXe44@build-exports (unspecified)) (set! aXe46@make-export-subst (unspecified)) (set! aXe48@make-export-env/macros (unspecified)) (set! aXe4a@generate-temporaries (unspecified)) (set! aXe4c@free-identifier=? (unspecified)) (set! aXe4e@bound-identifier=? (unspecified)) (set! aXe50@make-source-condition (unspecified)) (set! aXe52@extract-position-condition (unspecified)) (set! aXe54@expression-position (unspecified)) (set! aXe56@assertion-error (unspecified)) (set! aXe58@syntax-error (unspecified)) (set! aXe5a@syntax-violation* (unspecified)) (set! aXe5c@syntax-violation (unspecified)) (set! aXe5e@identifier? (unspecified)) (set! aXe60@datum->syntax (unspecified)) (set! aXe62@syntax->datum (unspecified)) (set! aXe64@ungensym-all (unspecified)) (set! aXe66@compile-r6rs-top-level (unspecified)) (set! aXe68@pre-compile-r6rs-top-level (unspecified)) (set! aXe6a@interaction-environment (unspecified)) (set! aXe6c@top-level-context (unspecified)) (set! aXaf0@file-options-macro (lambda (aXe6d@x) (let ((aXe70@valid-option? '#f)) (begin (set! aXe70@valid-option? (lambda (aXe79@x) (and (aXb75@id? aXe79@x) (memq (aXb77@id->sym aXe79@x) '(no-fail no-create no-truncate))))) (let ((aXe71@t aXe6d@x)) (let ((aXe73@ls/false (aXd7c@syntax-dispatch aXe71@t '(_ . each-any)))) (if (and aXe73@ls/false (apply (lambda (aXe75@opt*) (for-all aXe70@valid-option? aXe75@opt*)) aXe73@ls/false)) (apply (lambda (aXe77@opt*) (aXd32@bless (list 'make-file-options (list 'quote aXe77@opt*)))) aXe73@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aXe71@t)))))))) (set! aX27c3@aXaf0@file-options-macro aXaf0@file-options-macro) (set! aXaf2@set-cons (lambda (aXe7b@x aXe7c@ls) (if (memq aXe7b@x aXe7c@ls) aXe7c@ls (cons aXe7b@x aXe7c@ls)))) (set! aX27c4@aXaf2@set-cons aXaf2@set-cons) (set! aXaf4@set-union (lambda (aXe7f@ls1 aXe80@ls2) (if (null? aXe7f@ls1) aXe80@ls2 (if (memq (car aXe7f@ls1) aXe80@ls2) (aXaf4@set-union (cdr aXe7f@ls1) aXe80@ls2) (cons (car aXe7f@ls1) (aXaf4@set-union (cdr aXe7f@ls1) aXe80@ls2)))))) (set! aX27c5@aXaf4@set-union aXaf4@set-union) (set! aXaf9@top-mark* '(top)) (set! aX27c6@aXaf9@top-mark* aXaf9@top-mark*) (set! aXafb@top-marked? (lambda (aXe83@m*) (memq 'top aXe83@m*))) (set! aX27c7@aXafb@top-marked? aXafb@top-marked?) (set! aXafd@gen-lexical (lambda (aXe85@sym) (if (symbol? aXe85@sym) (gensym aXe85@sym) (if (aXb41@stx? aXe85@sym) (aXafd@gen-lexical (aXb77@id->sym aXe85@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" aXe85@sym))))) (set! aX27c8@aXafd@gen-lexical aXafd@gen-lexical) (set! aXaff@gen-global (lambda (aXe87@x) (aXafd@gen-lexical aXe87@x))) (set! aX27c9@aXaff@gen-global aXaff@gen-global) (set! aXb01@gen-label (lambda (aXe89@_) (gensym))) (set! aX27ca@aXb01@gen-label aXb01@gen-label) (set! aXb03@gen-top-level-label (lambda (aXe8b@id aXe8c@rib) (let ((aXe90@find '#f)) (begin (set! aXe90@find (lambda (aXe9b@sym aXe9c@mark* aXe9d@sym* aXe9e@mark** aXe9f@label*) (and (pair? aXe9d@sym*) (if (and (eq? aXe9b@sym (car aXe9d@sym*)) (same-marks? aXe9c@mark* (car aXe9e@mark**))) (car aXe9f@label*) (aXe90@find aXe9b@sym aXe9c@mark* (cdr aXe9d@sym*) (cdr aXe9e@mark**) (cdr aXe9f@label*)))))) (let ((aXe91@sym (aXb77@id->sym aXe8b@id)) (aXe92@mark* (aXb47@stx-mark* aXe8b@id))) (let ((aXe95@sym* (aXb13@rib-sym* aXe8c@rib))) (let ((aXe97@t (and (memq aXe91@sym (aXb13@rib-sym* aXe8c@rib)) (aXe90@find aXe91@sym aXe92@mark* aXe95@sym* (aXb17@rib-mark** aXe8c@rib) (aXb1b@rib-label* aXe8c@rib))))) (if aXe97@t ((lambda (aXe99@label) (if (aX98a@aX7d7@imported-label->binding aXe99@label) (gensym) aXe99@label)) aXe97@t) (gensym))))))))) (set! aX27cb@aXb03@gen-top-level-label aXb03@gen-top-level-label) (set! aXb05@gen-define-label+loc (lambda (aXea5@id aXea6@rib) (let ((aXea9@t (aXe6c@top-level-context))) (if aXea9@t ((lambda (aXeab@env) (let ((aXead@label (aXb03@gen-top-level-label aXea5@id aXea6@rib)) (aXeae@locs (aXe24@interaction-env-locs aXeab@env))) (values aXead@label (let ((aXeb1@t (assq aXead@label aXeae@locs))) (if aXeb1@t (cdr aXeb1@t) (let ((aXeb3@loc (aXafd@gen-lexical aXea5@id))) (begin (aXe26@set-interaction-env-locs! aXeab@env (cons (cons aXead@label aXeb3@loc) aXeae@locs)) aXeb3@loc))))))) aXea9@t) (values (gensym) (aXafd@gen-lexical aXea5@id)))))) (set! aX27cc@aXb05@gen-define-label+loc aXb05@gen-define-label+loc) (set! aXb07@gen-define-label (lambda (aXeb5@id aXeb6@rib) (if (aXe6c@top-level-context) (aXb03@gen-top-level-label aXeb5@id aXeb6@rib) (gensym)))) (set! aX27cd@aXb07@gen-define-label aXb07@gen-define-label) (set! aXb11@rib? (lambda (aXeb9@x) (and (simple-struct? aXeb9@x) (eq? (simple-struct-name aXeb9@x) 'rib)))) (set! aX27ce@aXb11@rib? aXb11@rib?) (set! aXb13@rib-sym* (lambda (aXebb@x) (simple-struct-ref aXebb@x '0))) (set! aX27cf@aXb13@rib-sym* aXb13@rib-sym*) (set! aXb15@set-rib-sym*! (lambda (aXebd@x aXebe@val) (simple-struct-set! aXebd@x '0 aXebe@val))) (set! aX27d0@aXb15@set-rib-sym*! aXb15@set-rib-sym*!) (set! aXb17@rib-mark** (lambda (aXec1@x) (simple-struct-ref aXec1@x '1))) (set! aX27d1@aXb17@rib-mark** aXb17@rib-mark**) (set! aXb19@set-rib-mark**! (lambda (aXec3@x aXec4@val) (simple-struct-set! aXec3@x '1 aXec4@val))) (set! aX27d2@aXb19@set-rib-mark**! aXb19@set-rib-mark**!) (set! aXb1b@rib-label* (lambda (aXec7@x) (simple-struct-ref aXec7@x '2))) (set! aX27d3@aXb1b@rib-label* aXb1b@rib-label*) (set! aXb1d@set-rib-label*! (lambda (aXec9@x aXeca@val) (simple-struct-set! aXec9@x '2 aXeca@val))) (set! aX27d4@aXb1d@set-rib-label*! aXb1d@set-rib-label*!) (set! aXb1f@rib-sealed/freq (lambda (aXecd@x) (simple-struct-ref aXecd@x '3))) (set! aX27d5@aXb1f@rib-sealed/freq aXb1f@rib-sealed/freq) (set! aXb21@set-rib-sealed/freq! (lambda (aXecf@x aXed0@val) (simple-struct-set! aXecf@x '3 aXed0@val))) (set! aX27d6@aXb21@set-rib-sealed/freq! aXb21@set-rib-sealed/freq!) (set! aXb23@rib-cache (lambda (aXed3@x) (simple-struct-ref aXed3@x '4))) (set! aX27d7@aXb23@rib-cache aXb23@rib-cache) (set! aXb25@set-rib-cache! (lambda (aXed5@x aXed6@val) (simple-struct-set! aXed5@x '4 aXed6@val))) (set! aX27d8@aXb25@set-rib-cache! aXb25@set-rib-cache!) (set! aXb27@dummy '3) (set! aX27d9@aXb27@dummy aXb27@dummy) (set! aXb29@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! aX27da@aXb29@make-empty-rib aXb29@make-empty-rib) (set! aXb2b@extend-rib! (lambda (aXed9@rib aXeda@id aXedb@label) (let ((aXee0@find '#f)) (begin (set! aXee0@find (lambda (aXeed@sym aXeee@mark* aXeef@sym* aXef0@mark** aXef1@label*) (and (pair? aXeef@sym*) (if (and (eq? aXeed@sym (car aXeef@sym*)) (same-marks? aXeee@mark* (car aXef0@mark**))) aXef1@label* (aXee0@find aXeed@sym aXeee@mark* (cdr aXeef@sym*) (cdr aXef0@mark**) (cdr aXef1@label*)))))) (begin (if (aXb1f@rib-sealed/freq aXed9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" aXed9@rib) (void)) (let ((aXee1@sym (aXb77@id->sym aXeda@id)) (aXee2@mark* (aXb47@stx-mark* aXeda@id))) (let ((aXee5@sym* (aXb13@rib-sym* aXed9@rib))) (let ((aXee7@t (and (memq aXee1@sym (aXb13@rib-sym* aXed9@rib)) (aXee0@find aXee1@sym aXee2@mark* aXee5@sym* (aXb17@rib-mark** aXed9@rib) (aXb1b@rib-label* aXed9@rib))))) (if aXee7@t ((lambda (aXee9@p) (if (not (eq? aXedb@label (car aXee9@p))) (if (aXe6c@top-level-context) (set-car! aXee9@p aXedb@label) (aXe5c@syntax-violation '#f '"multiple definitions of identifier" aXeda@id)) (void))) aXee7@t) (begin (if (aXb23@rib-cache aXed9@rib) (hashtable-update! (aXb23@rib-cache aXed9@rib) aXee1@sym (lambda (aXeeb@e) (cons (cons aXee2@mark* aXedb@label) aXeeb@e)) '()) (void)) (aXb15@set-rib-sym*! aXed9@rib (cons aXee1@sym aXee5@sym*)) (aXb19@set-rib-mark**! aXed9@rib (cons aXee2@mark* (aXb17@rib-mark** aXed9@rib))) (aXb1d@set-rib-label*! aXed9@rib (cons aXedb@label (aXb1b@rib-label* aXed9@rib))))))))))))) (set! aX27db@aXb2b@extend-rib! aXb2b@extend-rib!) (set! aXb2d@extend-rib/nc! (lambda (aXef7@rib aXef8@id aXef9@label) (let ((aXefd@sym (aXb77@id->sym aXef8@id)) (aXefe@mark* (aXb47@stx-mark* aXef8@id))) (let ((aXf01@sym* (aXb13@rib-sym* aXef7@rib))) (begin (if (aXb23@rib-cache aXef7@rib) (hashtable-update! (aXb23@rib-cache aXef7@rib) aXefd@sym (lambda (aXf03@e) (cons (cons aXefe@mark* aXef9@label) aXf03@e)) '()) (void)) (aXb15@set-rib-sym*! aXef7@rib (cons aXefd@sym aXf01@sym*)) (aXb19@set-rib-mark**! aXef7@rib (cons aXefe@mark* (aXb17@rib-mark** aXef7@rib))) (aXb1d@set-rib-label*! aXef7@rib (cons aXef9@label (aXb1b@rib-label* aXef7@rib)))))))) (set! aX27dc@aXb2d@extend-rib/nc! aXb2d@extend-rib/nc!) (set! aXb2f@make-rib-map (lambda (aXf05@sym*) (let ((aXf07@ht (make-eq-hashtable))) (let aXf0d@f ((aXf09@i '0) (aXf0a@sym* aXf05@sym*)) (if (null? aXf0a@sym*) aXf07@ht (begin (hashtable-update! aXf07@ht (car aXf0a@sym*) (lambda (aXf0f@x) (cons aXf09@i aXf0f@x)) '()) (aXf0d@f (+ aXf09@i '1) (cdr aXf0a@sym*)))))))) (set! aX27dd@aXb2f@make-rib-map aXb2f@make-rib-map) (set! aXb31@seal-rib! (lambda (aXf11@rib) (let ((aXf13@sym* (aXb13@rib-sym* aXf11@rib))) (if (not (null? aXf13@sym*)) (begin (aXb15@set-rib-sym*! aXf11@rib (list->vector aXf13@sym*)) (aXb19@set-rib-mark**! aXf11@rib (list->vector (aXb17@rib-mark** aXf11@rib))) (aXb1d@set-rib-label*! aXf11@rib (list->vector (aXb1b@rib-label* aXf11@rib))) (aXb21@set-rib-sealed/freq! aXf11@rib (aXb2f@make-rib-map aXf13@sym*))) (void))))) (set! aX27de@aXb31@seal-rib! aXb31@seal-rib!) (set! aXb33@unseal-rib! (lambda (aXf15@rib) (if (aXb1f@rib-sealed/freq aXf15@rib) (begin (aXb21@set-rib-sealed/freq! aXf15@rib '#f) (aXb15@set-rib-sym*! aXf15@rib (vector->list (aXb13@rib-sym* aXf15@rib))) (aXb19@set-rib-mark**! aXf15@rib (vector->list (aXb17@rib-mark** aXf15@rib))) (aXb1d@set-rib-label*! aXf15@rib (vector->list (aXb1b@rib-label* aXf15@rib)))) (void)))) (set! aX27df@aXb33@unseal-rib! aXb33@unseal-rib!) (set! aXb35@make-full-rib (lambda (aXf17@id* aXf18@label*) (let ((aXf1b@r (make-simple-struct 'rib '6 (list (map aXb77@id->sym aXf17@id*) (map aXb47@stx-mark* aXf17@id*) aXf18@label* '#f '#f)))) (begin (aXb31@seal-rib! aXf1b@r) aXf1b@r)))) (set! aX27e0@aXb35@make-full-rib aXb35@make-full-rib) (set! aXb37@rp (aX6bc@aX597@make-record-printer 'stx (lambda (aXf1d@x aXf1e@p aXf1f@wr) (begin (display '"#<syntax " aXf1e@p) (write (aXb89@stx->datum aXf1d@x) aXf1e@p) (let ((aXf23@expr (aXb43@stx-expr aXf1d@x))) (if (aX6b3@aX585@annotation? aXf23@expr) (let ((aXf25@src (aX6b4@aX587@annotation-source aXf23@expr))) (if (pair? aXf25@src) (begin (display '" [" aXf1e@p) (display (cdr aXf25@src) aXf1e@p) (display '" of " aXf1e@p) (display (car aXf25@src) aXf1e@p) (display '"]" aXf1e@p)) (void))) (void))) (display '">" aXf1e@p))))) (set! aX27e1@aXb37@rp aXb37@rp) (set! aXb41@stx? (lambda (aXf27@x) (and (simple-struct? aXf27@x) (eq? (simple-struct-name aXf27@x) 'stx)))) (set! aX27e2@aXb41@stx? aXb41@stx?) (set! aXb43@stx-expr (lambda (aXf29@x) (simple-struct-ref aXf29@x '0))) (set! aX27e3@aXb43@stx-expr aXb43@stx-expr) (set! aXb45@set-stx-expr! (lambda (aXf2b@x aXf2c@val) (simple-struct-set! aXf2b@x '0 aXf2c@val))) (set! aX27e4@aXb45@set-stx-expr! aXb45@set-stx-expr!) (set! aXb47@stx-mark* (lambda (aXf2f@x) (simple-struct-ref aXf2f@x '1))) (set! aX27e5@aXb47@stx-mark* aXb47@stx-mark*) (set! aXb49@set-stx-mark*! (lambda (aXf31@x aXf32@val) (simple-struct-set! aXf31@x '1 aXf32@val))) (set! aX27e6@aXb49@set-stx-mark*! aXb49@set-stx-mark*!) (set! aXb4b@stx-subst* (lambda (aXf35@x) (simple-struct-ref aXf35@x '2))) (set! aX27e7@aXb4b@stx-subst* aXb4b@stx-subst*) (set! aXb4d@set-stx-subst*! (lambda (aXf37@x aXf38@val) (simple-struct-set! aXf37@x '2 aXf38@val))) (set! aX27e8@aXb4d@set-stx-subst*! aXb4d@set-stx-subst*!) (set! aXb4f@stx-ae* (lambda (aXf3b@x) (simple-struct-ref aXf3b@x '3))) (set! aX27e9@aXb4f@stx-ae* aXb4f@stx-ae*) (set! aXb51@set-stx-ae*! (lambda (aXf3d@x aXf3e@val) (simple-struct-set! aXf3d@x '3 aXf3e@val))) (set! aX27ea@aXb51@set-stx-ae*! aXb51@set-stx-ae*!) (set! aXb53@dummy '3) (set! aX27eb@aXb53@dummy aXb53@dummy) (set! aXb55@datum->stx (lambda (aXf41@id aXf42@datum) (make-simple-struct 'stx '5 (list aXf42@datum (aXb47@stx-mark* aXf41@id) (aXb4b@stx-subst* aXf41@id) (aXb4f@stx-ae* aXf41@id))))) (set! aX27ec@aXb55@datum->stx aXb55@datum->stx) (set! aXb57@gen-mark (lambda () (string '#\m))) (set! aX27ed@aXb57@gen-mark aXb57@gen-mark) (set! aXb59@anti-mark '#f) (set! aX27ee@aXb59@anti-mark aXb59@anti-mark) (set! aXb5b@anti-mark? not) (set! aX27ef@aXb5b@anti-mark? aXb5b@anti-mark?) (set! aXb5d@mkstx (lambda (aXf45@e aXf46@m* aXf47@s* aXf48@ae*) (if (and (aXb41@stx? aXf45@e) (not (aXafb@top-marked? aXf46@m*))) (call-with-values (lambda () (join-wraps aXf46@m* aXf47@s* aXf48@ae* aXf45@e)) (lambda (aXf53@aXf4e aXf54@aXf50 aXf55@aXf52) (let ((aXf59@ae* aXf55@aXf52) (aXf5a@s* aXf54@aXf50) (aXf5b@m* aXf53@aXf4e)) (make-simple-struct 'stx '5 (list (aXb43@stx-expr aXf45@e) aXf5b@m* aXf5a@s* aXf59@ae*))))) (make-simple-struct 'stx '5 (list aXf45@e aXf46@m* aXf47@s* aXf48@ae*))))) (set! aX27f0@aXb5d@mkstx aXb5d@mkstx) (set! aXb5f@add-mark (lambda (aXf5f@m aXf60@e aXf61@ae) (aXb5d@mkstx aXf60@e (list aXf5f@m) '(shift) (list aXf61@ae)))) (set! aX27f1@aXb5f@add-mark aXb5f@add-mark) (set! aXb61@add-subst (lambda (aXf65@subst aXf66@e) (aXb5d@mkstx aXf66@e '() (list aXf65@subst) '()))) (set! aX27f2@aXb61@add-subst aXb61@add-subst) (set! aXb63@syntax-kind? (lambda (aXf69@x aXf6a@p?) (if (aXb41@stx? aXf69@x) (aXb63@syntax-kind? (aXb43@stx-expr aXf69@x) aXf6a@p?) (if (aX6b3@aX585@annotation? aXf69@x) (aXb63@syntax-kind? (aX6b5@aX589@annotation-expression aXf69@x) aXf6a@p?) (aXf6a@p? aXf69@x))))) (set! aX27f3@aXb63@syntax-kind? aXb63@syntax-kind?) (set! aXb65@syntax-vector->list (lambda (aXf6d@x) (if (aXb41@stx? aXf6d@x) (let ((aXf6f@ls (aXb65@syntax-vector->list (aXb43@stx-expr aXf6d@x))) (aXf70@m* (aXb47@stx-mark* aXf6d@x)) (aXf71@s* (aXb4b@stx-subst* aXf6d@x)) (aXf72@ae* (aXb4f@stx-ae* aXf6d@x))) (map (lambda (aXf77@x) (aXb5d@mkstx aXf77@x aXf70@m* aXf71@s* aXf72@ae*)) aXf6f@ls)) (if (aX6b3@aX585@annotation? aXf6d@x) (aXb65@syntax-vector->list (aX6b5@aX589@annotation-expression aXf6d@x)) (if (vector? aXf6d@x) (vector->list aXf6d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" aXf6d@x)))))) (set! aX27f4@aXb65@syntax-vector->list aXb65@syntax-vector->list) (set! aXb67@syntax-pair? (lambda (aXf79@x) (aXb63@syntax-kind? aXf79@x pair?))) (set! aX27f5@aXb67@syntax-pair? aXb67@syntax-pair?) (set! aXb69@syntax-vector? (lambda (aXf7b@x) (aXb63@syntax-kind? aXf7b@x vector?))) (set! aX27f6@aXb69@syntax-vector? aXb69@syntax-vector?) (set! aXb6b@syntax-null? (lambda (aXf7d@x) (aXb63@syntax-kind? aXf7d@x null?))) (set! aX27f7@aXb6b@syntax-null? aXb6b@syntax-null?) (set! aXb6d@syntax-list? (lambda (aXf7f@x) (or (aXb6b@syntax-null? aXf7f@x) (and (aXb67@syntax-pair? aXf7f@x) (aXb6d@syntax-list? (aXb71@syntax-cdr aXf7f@x)))))) (set! aX27f8@aXb6d@syntax-list? aXb6d@syntax-list?) (set! aXb6f@syntax-car (lambda (aXf81@x) (if (aXb41@stx? aXf81@x) (aXb5d@mkstx (aXb6f@syntax-car (aXb43@stx-expr aXf81@x)) (aXb47@stx-mark* aXf81@x) (aXb4b@stx-subst* aXf81@x) (aXb4f@stx-ae* aXf81@x)) (if (aX6b3@aX585@annotation? aXf81@x) (aXb6f@syntax-car (aX6b5@aX589@annotation-expression aXf81@x)) (if (pair? aXf81@x) (car aXf81@x) (assertion-violation 'syntax-car '"BUG: not a pair" aXf81@x)))))) (set! aX27f9@aXb6f@syntax-car aXb6f@syntax-car) (set! aXb71@syntax-cdr (lambda (aXf83@x) (if (aXb41@stx? aXf83@x) (aXb5d@mkstx (aXb71@syntax-cdr (aXb43@stx-expr aXf83@x)) (aXb47@stx-mark* aXf83@x) (aXb4b@stx-subst* aXf83@x) (aXb4f@stx-ae* aXf83@x)) (if (aX6b3@aX585@annotation? aXf83@x) (aXb71@syntax-cdr (aX6b5@aX589@annotation-expression aXf83@x)) (if (pair? aXf83@x) (cdr aXf83@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" aXf83@x)))))) (set! aX27fa@aXb71@syntax-cdr aXb71@syntax-cdr) (set! aXb73@syntax->list (lambda (aXf85@x) (if (aXb67@syntax-pair? aXf85@x) (cons (aXb6f@syntax-car aXf85@x) (aXb73@syntax->list (aXb71@syntax-cdr aXf85@x))) (if (aXb6b@syntax-null? aXf85@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" aXf85@x))))) (set! aX27fb@aXb73@syntax->list aXb73@syntax->list) (set! aXb75@id? (lambda (aXf87@x) (and (aXb41@stx? aXf87@x) (symbol? (aXb43@stx-expr aXf87@x))))) (set! aX27fc@aXb75@id? aXb75@id?) (set! aXb77@id->sym (lambda (aXf89@x) (aXb43@stx-expr aXf89@x))) (set! aX27fd@aXb77@id->sym aXb77@id->sym) (set! aXb79@bound-id=? (lambda (aXf8b@x aXf8c@y) (and (eq? (aXb77@id->sym aXf8b@x) (aXb77@id->sym aXf8c@y)) (same-marks? (aXb47@stx-mark* aXf8b@x) (aXb47@stx-mark* aXf8c@y))))) (set! aX27fe@aXb79@bound-id=? aXb79@bound-id=?) (set! aXb7b@free-id=? (lambda (aXf8f@i aXf90@j) (let ((aXf93@t0 (id->real-label aXf8f@i)) (aXf94@t1 (id->real-label aXf90@j))) (if (or aXf93@t0 aXf94@t1) (eq? aXf93@t0 aXf94@t1) (eq? (aXb77@id->sym aXf8f@i) (aXb77@id->sym aXf90@j)))))) (set! aX27ff@aXb7b@free-id=? aXb7b@free-id=?) (set! aXb7d@valid-bound-ids? (lambda (aXf97@id*) (and (for-all aXb75@id? aXf97@id*) (aXb7f@distinct-bound-ids? aXf97@id*)))) (set! aX2800@aXb7d@valid-bound-ids? aXb7d@valid-bound-ids?) (set! aXb7f@distinct-bound-ids? (lambda (aXf99@id*) (or (null? aXf99@id*) (and (not (aXb81@bound-id-member? (car aXf99@id*) (cdr aXf99@id*))) (aXb7f@distinct-bound-ids? (cdr aXf99@id*)))))) (set! aX2801@aXb7f@distinct-bound-ids? aXb7f@distinct-bound-ids?) (set! aXb81@bound-id-member? (lambda (aXf9b@id aXf9c@id*) (and (pair? aXf9c@id*) (or (aXb79@bound-id=? aXf9b@id (car aXf9c@id*)) (aXb81@bound-id-member? aXf9b@id (cdr aXf9c@id*)))))) (set! aX2802@aXb81@bound-id-member? aXb81@bound-id-member?) (set! aXb83@self-evaluating? (lambda (aXf9f@x) (or (number? aXf9f@x) (string? aXf9f@x) (char? aXf9f@x) (boolean? aXf9f@x) (regexp? aXf9f@x) (bytevector? aXf9f@x)))) (set! aX2803@aXb83@self-evaluating? aXb83@self-evaluating?) (set! aXb85@strip-annotations (lambda (aXfa1@x) (if (pair? aXfa1@x) (cons (aXb85@strip-annotations (car aXfa1@x)) (aXb85@strip-annotations (cdr aXfa1@x))) (if (vector? aXfa1@x) (vector-map aXb85@strip-annotations aXfa1@x) (if (aX6b3@aX585@annotation? aXfa1@x) (aX6b2@aX583@annotation-stripped aXfa1@x) aXfa1@x))))) (set! aX2804@aXb85@strip-annotations aXb85@strip-annotations) (set! aXb87@strip (lambda (aXfa3@x aXfa4@m*) (if (aXafb@top-marked? aXfa4@m*) (if (or (aX6b3@aX585@annotation? aXfa3@x) (and (pair? aXfa3@x) (aX6b3@aX585@annotation? (car aXfa3@x))) (and (vector? aXfa3@x) (> (vector-length aXfa3@x) '0) (aX6b3@aX585@annotation? (vector-ref aXfa3@x '0)))) (aXb85@strip-annotations aXfa3@x) aXfa3@x) (let aXfa9@f ((aXfa7@x aXfa3@x)) (if (aXb41@stx? aXfa7@x) (aXb87@strip (aXb43@stx-expr aXfa7@x) (aXb47@stx-mark* aXfa7@x)) (if (aX6b3@aX585@annotation? aXfa7@x) (aX6b2@aX583@annotation-stripped aXfa7@x) (if (pair? aXfa7@x) (let ((aXfab@a (aXfa9@f (car aXfa7@x))) (aXfac@d (aXfa9@f (cdr aXfa7@x)))) (if (and (eq? aXfab@a (car aXfa7@x)) (eq? aXfac@d (cdr aXfa7@x))) aXfa7@x (cons aXfab@a aXfac@d))) (if (vector? aXfa7@x) (let ((aXfaf@old (vector->list aXfa7@x))) (let ((aXfb1@new (map aXfa9@f aXfaf@old))) (if (for-all eq? aXfaf@old aXfb1@new) aXfa7@x (list->vector aXfb1@new)))) aXfa7@x)))))))) (set! aX2805@aXb87@strip aXb87@strip) (set! aXb89@stx->datum (lambda (aXfb3@x) (aXb87@strip aXfb3@x '()))) (set! aX2806@aXb89@stx->datum aXb89@stx->datum) (set! aXb8b@id->label (lambda (aXfb5@id) (or (id->real-label aXfb5@id) (let ((aXfb7@t (aXe6c@top-level-context))) (if aXfb7@t ((lambda (aXfb9@env) (let ((aXfbb@rib (aXe1c@interaction-env-rib aXfb9@env))) (call-with-values (lambda () (aXb05@gen-define-label+loc aXfb5@id aXfbb@rib)) (lambda (aXfc1@aXfbe aXfc2@aXfc0) (let ((aXfc5@loc_ aXfc2@aXfc0) (aXfc6@lab aXfc1@aXfbe)) (begin (aXb2b@extend-rib! aXfbb@rib aXfb5@id aXfc6@lab) aXfc6@lab)))))) aXfb7@t) '#f))))) (set! aX2807@aXb8b@id->label aXb8b@id->label) (set! aXb8d@label->binding (lambda (aXfc9@x aXfca@r) (let ((aXfcd@t (aX98a@aX7d7@imported-label->binding aXfc9@x))) (if aXfcd@t ((lambda (aXfcf@b) (if (and (pair? aXfcf@b) (eq? (car aXfcf@b) '$core-rtd)) (cons '$rtd (map aXd32@bless (cdr aXfcf@b))) (if (and (pair? aXfcf@b) (eq? (car aXfcf@b) 'global-rtd)) (let ((aXfd1@lib (cadr aXfcf@b)) (aXfd2@loc (cddr aXfcf@b))) (cons '$rtd (symbol-value aXfd2@loc))) aXfcf@b))) aXfcd@t) (let ((aXfd5@t (assq aXfc9@x aXfca@r))) (if aXfd5@t (cdr aXfd5@t) (let ((aXfd7@t (aXe6c@top-level-context))) (if aXfd7@t ((lambda (aXfd9@env) (let ((aXfdb@t (assq aXfc9@x (aXe24@interaction-env-locs aXfd9@env)))) (if aXfdb@t ((lambda (aXfdd@p) (cons* 'lexical (cdr aXfdd@p) '#f)) aXfdb@t) '(displaced-lexical . #f)))) aXfd7@t) '(displaced-lexical . #f))))))))) (set! aX2808@aXb8d@label->binding aXb8d@label->binding) (set! aXb8f@make-binding cons) (set! aX2809@aXb8f@make-binding aXb8f@make-binding) (set! aXb91@binding-type car) (set! aX280a@aXb91@binding-type aXb91@binding-type) (set! aXb93@binding-value cdr) (set! aX280b@aXb93@binding-value aXb93@binding-value) (set! aXb95@raise-unbound-error (lambda (aXfdf@id) (aXe5a@syntax-violation* '#f '"unbound identifier" aXfdf@id (aX2c01@aX2a47@make-undefined-violation)))) (set! aX280c@aXb95@raise-unbound-error aXb95@raise-unbound-error) (set! aXb97@syntax-type (lambda (aXfe1@e aXfe2@r) (if (aXb75@id? aXfe1@e) (let ((aXfe5@id aXfe1@e)) (let ((aXfe7@label (aXb8b@id->label aXfe5@id))) (let ((aXfe9@b (aXb8d@label->binding aXfe7@label aXfe2@r))) (let ((aXfeb@type (aXb91@binding-type aXfe9@b))) (begin (if (not aXfe7@label) (aXb95@raise-unbound-error aXfe5@id) (void)) (let ((aXfed@t aXfeb@type)) (if (memv aXfed@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values aXfeb@type (aXb93@binding-value aXfe9@b) aXfe5@id) (values 'other '#f '#f)))))))) (if (aXb67@syntax-pair? aXfe1@e) (let ((aXfef@id (aXb6f@syntax-car aXfe1@e))) (if (aXb75@id? aXfef@id) (let ((aXff1@label (aXb8b@id->label aXfef@id))) (let ((aXff3@b (aXb8d@label->binding aXff1@label aXfe2@r))) (let ((aXff5@type (aXb91@binding-type aXff3@b))) (begin (if (not aXff1@label) (aXb95@raise-unbound-error aXfef@id) (void)) (let ((aXff7@t aXff5@type)) (if (memv aXff7@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values aXff5@type (aXb93@binding-value aXff3@b) aXfef@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((aXff9@d (aXb89@stx->datum aXfe1@e))) (if (aXb83@self-evaluating? aXff9@d) (values 'constant aXff9@d '#f) (values 'other '#f '#f))))))) (set! aX280d@aXb97@syntax-type aXb97@syntax-type) (set! aXba5@sanitize-binding (lambda (aXffb@x aXffc@src) (if (procedure? aXffb@x) (cons* 'local-macro aXffb@x aXffc@src) (if (and (pair? aXffb@x) (eq? (car aXffb@x) 'macro!) (procedure? (cdr aXffb@x))) (cons* 'local-macro! (cdr aXffb@x) aXffc@src) (if (and (pair? aXffb@x) (eq? (car aXffb@x) '$rtd)) aXffb@x (assertion-violation 'expand '"invalid transformer" aXffb@x)))))) (set! aX280e@aXba5@sanitize-binding aXba5@sanitize-binding) (set! aXba7@make-variable-transformer (lambda (aXfff@x) (if (procedure? aXfff@x) (cons 'macro! aXfff@x) (assertion-violation 'make-variable-transformer '"not a procedure" aXfff@x)))) (set! aX280f@aXba7@make-variable-transformer aXba7@make-variable-transformer) (set! aXba9@variable-transformer? (lambda (aX1001@x) (and (pair? aX1001@x) (eq? (car aX1001@x) 'macro!) (procedure? (cdr aX1001@x))))) (set! aX2810@aXba9@variable-transformer? aXba9@variable-transformer?) (set! aXbab@variable-transformer-procedure (lambda (aX1003@x) (if (aXba9@variable-transformer? aX1003@x) (cdr aX1003@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" aX1003@x)))) (set! aX2811@aXbab@variable-transformer-procedure aXbab@variable-transformer-procedure) (set! aXbad@make-eval-transformer (lambda (aX1005@x) (aXba5@sanitize-binding (eval-core (aX715@aX6cd@expanded->core aX1005@x)) aX1005@x))) (set! aX2812@aXbad@make-eval-transformer aXbad@make-eval-transformer) (set! aXcfe@parse-define (lambda (aX1007@x) (let ((aX1009@t aX1007@x)) (let ((aX100b@ls/false (aXd7c@syntax-dispatch aX1009@t '(_ (any . any) any . each-any)))) (if (and aX100b@ls/false (apply (lambda (aX100d@id aX100e@fmls aX100f@b aX1010@b*) (aXb75@id? aX100d@id)) aX100b@ls/false)) (apply (lambda (aX1015@id aX1016@fmls aX1017@b aX1018@b*) (begin (aXda2@verify-formals aX1016@fmls aX1007@x) (values aX1015@id (cons 'defun (cons aX1016@fmls (cons aX1017@b aX1018@b*)))))) aX100b@ls/false) (let ((aX101d@t aX1009@t)) (let ((aX101f@ls/false (aXd7c@syntax-dispatch aX101d@t '(_ any any)))) (if (and aX101f@ls/false (apply (lambda (aX1021@id aX1022@val) (aXb75@id? aX1021@id)) aX101f@ls/false)) (apply (lambda (aX1025@id aX1026@val) (values aX1025@id (cons 'expr aX1026@val))) aX101f@ls/false) (let ((aX1029@t aX101d@t)) (let ((aX102b@ls/false (aXd7c@syntax-dispatch aX1029@t '(_ any)))) (if (and aX102b@ls/false (apply (lambda (aX102d@id) (aXb75@id? aX102d@id)) aX102b@ls/false)) (apply (lambda (aX102f@id) (values aX102f@id (cons 'expr (aXd32@bless '(void))))) aX102b@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1029@t)))))))))))) (set! aX2813@aXcfe@parse-define aXcfe@parse-define) (set! aXd00@parse-define-syntax (lambda (aX1031@x) (let ((aX1033@t aX1031@x)) (let ((aX1035@ls/false (aXd7c@syntax-dispatch aX1033@t '(_ any any)))) (if (and aX1035@ls/false (apply (lambda (aX1037@id aX1038@val) (aXb75@id? aX1037@id)) aX1035@ls/false)) (apply (lambda (aX103b@id aX103c@val) (values aX103b@id aX103c@val)) aX1035@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1033@t)))))) (set! aX2814@aXd00@parse-define-syntax aXd00@parse-define-syntax) (set! aXd02@scheme-stx-hashtable (make-eq-hashtable)) (set! aX2815@aXd02@scheme-stx-hashtable aXd02@scheme-stx-hashtable) (set! aXd04@scheme-stx (lambda (aX103f@sym) (or (hashtable-ref aXd02@scheme-stx-hashtable aX103f@sym '#f) (let ((aX1041@subst (aX966@aX78f@library-subst (aX984@aX7cb@find-library-by-name '(psyntax system $all))))) (let ((aX1043@stx (make-simple-struct 'stx '5 (list aX103f@sym aXaf9@top-mark* '() '())))) (let ((aX1045@stx (let ((aX1047@t (assq aX103f@sym aX1041@subst))) (if aX1047@t ((lambda (aX1049@x) (let ((aX104b@name (car aX1049@x)) (aX104c@label (cdr aX1049@x))) (aXb61@add-subst (make-simple-struct 'rib '6 (list (list aX104b@name) (list aXaf9@top-mark*) (list aX104c@label) '#f '#f)) aX1043@stx))) aX1047@t) aX1043@stx)))) (begin (hashtable-set! aXd02@scheme-stx-hashtable aX103f@sym aX1045@stx) aX1045@stx))))))) (set! aX2816@aXd04@scheme-stx aXd04@scheme-stx) (set! aXd06@lexical-var car) (set! aX2817@aXd06@lexical-var aXd06@lexical-var) (set! aXd08@lexical-mutable? cdr) (set! aX2818@aXd08@lexical-mutable? aXd08@lexical-mutable?) (set! aXd0a@set-lexical-mutable! set-cdr!) (set! aX2819@aXd0a@set-lexical-mutable! aXd0a@set-lexical-mutable!) (set! aXd0c@add-lexical (lambda (aX104f@lab aX1050@lex aX1051@r) (cons (cons* aX104f@lab 'lexical aX1050@lex '#f) aX1051@r))) (set! aX281a@aXd0c@add-lexical aXd0c@add-lexical) (set! aXd0e@add-lexicals (lambda (aX1055@lab* aX1056@lex* aX1057@r) (if (null? aX1055@lab*) aX1057@r (aXd0e@add-lexicals (cdr aX1055@lab*) (cdr aX1056@lex*) (aXd0c@add-lexical (car aX1055@lab*) (car aX1056@lex*) aX1057@r))))) (set! aX281b@aXd0e@add-lexicals aXd0e@add-lexicals) (set! aXd10@letrec-helper (lambda (aX105b@e aX105c@r aX105d@mr aX105e@build) (let ((aX1063@t aX105b@e)) (let ((aX1065@ls/false (aXd7c@syntax-dispatch aX1063@t '(_ #(each (any any)) any . each-any)))) (if aX1065@ls/false (apply (lambda (aX1067@lhs* aX1068@rhs* aX1069@b aX106a@b*) (if (not (aXb7d@valid-bound-ids? aX1067@lhs*)) (aXd36@invalid-fmls-error aX105b@e aX1067@lhs*) (let ((aX106f@lex* (map aXafd@gen-lexical aX1067@lhs*)) (aX1070@lab* (map aXb01@gen-label aX1067@lhs*))) (let ((aX1073@rib (aXb35@make-full-rib aX1067@lhs* aX1070@lab*)) (aX1074@r (aXd0e@add-lexicals aX1070@lab* aX106f@lex* aX105c@r))) (let ((aX1077@body (aXdb4@chi-internal (aXb61@add-subst aX1073@rib (cons aX1069@b aX106a@b*)) aX1074@r aX105d@mr)) (aX1078@rhs* (aXd9a@chi-expr* (map (lambda (aX107b@x) (aXb61@add-subst aX1073@rib aX107b@x)) aX1068@rhs*) aX1074@r aX105d@mr))) (aX105e@build '#f aX106f@lex* aX1078@rhs* aX1077@body)))))) aX1065@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1063@t)))))) (set! aX281c@aXd10@letrec-helper aXd10@letrec-helper) (set! aXd12@let-transformer (lambda (aX107d@e aX107e@r aX107f@mr) (let ((aX1083@t aX107d@e)) (let ((aX1085@ls/false (aXd7c@syntax-dispatch aX1083@t '(_ #(each (any any)) any . each-any)))) (if aX1085@ls/false (apply (lambda (aX1087@lhs* aX1088@rhs* aX1089@b aX108a@b*) (if (not (aXb7d@valid-bound-ids? aX1087@lhs*)) (aXd36@invalid-fmls-error aX107d@e aX1087@lhs*) (let ((aX108f@lex* (map aXafd@gen-lexical aX1087@lhs*)) (aX1090@lab* (map aXb01@gen-label aX1087@lhs*)) (aX1091@rhs* (aXd9a@chi-expr* aX1088@rhs* aX107e@r aX107f@mr))) (let ((aX1095@rib (aXb35@make-full-rib aX1087@lhs* aX1090@lab*)) (aX1096@r (aXd0e@add-lexicals aX1090@lab* aX108f@lex* aX107e@r))) (let ((aX1099@body (aXdb4@chi-internal (aXb61@add-subst aX1095@rib (cons aX1089@b aX108a@b*)) aX1096@r aX107f@mr))) (aXadd@aXa3a@build-let '#f aX108f@lex* aX1091@rhs* aX1099@body)))))) aX1085@ls/false) (let ((aX109b@t aX1083@t)) (let ((aX109d@ls/false (aXd7c@syntax-dispatch aX109b@t '(_ any #(each (any any)) any . each-any)))) (if aX109d@ls/false (apply (lambda (aX109f@loop aX10a0@lhs* aX10a1@rhs* aX10a2@b aX10a3@b*) (if (not (aXb7d@valid-bound-ids? aX10a0@lhs*)) (aXd36@invalid-fmls-error aX107d@e aX10a0@lhs*) (let ((aX10a9@lex* (map aXafd@gen-lexical aX10a0@lhs*)) (aX10aa@lab* (map aXb01@gen-label aX10a0@lhs*)) (aX10ab@rhs* (aXd9a@chi-expr* aX10a1@rhs* aX107e@r aX107f@mr)) (aX10ac@loop-lex (aXafd@gen-lexical aX109f@loop)) (aX10ad@loop-lab (aXb01@gen-label aX109f@loop))) (let ((aX10b3@loop-rib (aXb35@make-full-rib (list aX109f@loop) (list aX10ad@loop-lab))) (aX10b4@rib (aXb35@make-full-rib aX10a0@lhs* aX10aa@lab*)) (aX10b5@r (aXd0e@add-lexicals (cons aX10ad@loop-lab aX10aa@lab*) (cons aX10ac@loop-lex aX10a9@lex*) aX107e@r))) (let ((aX10b9@body (aXdb4@chi-internal (aXb61@add-subst aX10b3@loop-rib (aXb61@add-subst aX10b4@rib (cons aX10a2@b aX10a3@b*))) aX10b5@r aX107f@mr))) (aXade@aXa3c@build-named-let '#f aX10ac@loop-lex aX10a9@lex* aX10ab@rhs* aX10b9@body)))))) aX109d@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX109b@t))))))))) (set! aX281d@aXd12@let-transformer aXd12@let-transformer) (set! aXd14@letrec-transformer (lambda (aX10bb@e aX10bc@r aX10bd@mr) (aXd10@letrec-helper aX10bb@e aX10bc@r aX10bd@mr aXadc@aXa38@build-letrec))) (set! aX281e@aXd14@letrec-transformer aXd14@letrec-transformer) (set! aXd16@letrec*-transformer (lambda (aX10c1@e aX10c2@r aX10c3@mr) (aXd10@letrec-helper aX10c1@e aX10c2@r aX10c3@mr aXadf@aXa3e@build-letrec*))) (set! aX281f@aXd16@letrec*-transformer aXd16@letrec*-transformer) (set! aXd18@fluid-let-syntax-transformer (lambda (aX10c7@e aX10c8@r aX10c9@mr) (let ((aX10ce@lookup '#f)) (begin (set! aX10ce@lookup (lambda (aX10e1@x) (or (aXb8b@id->label aX10e1@x) (aXe5c@syntax-violation '#f '"unbound identifier" aX10c7@e aX10e1@x)))) (let ((aX10cf@t aX10c7@e)) (let ((aX10d1@ls/false (aXd7c@syntax-dispatch aX10cf@t '(_ #(each (any any)) any . each-any)))) (if aX10d1@ls/false (apply (lambda (aX10d3@lhs* aX10d4@rhs* aX10d5@b aX10d6@b*) (if (not (aXb7d@valid-bound-ids? aX10d3@lhs*)) (aXd36@invalid-fmls-error aX10c7@e aX10d3@lhs*) (let ((aX10db@lab* (map aX10ce@lookup aX10d3@lhs*)) (aX10dc@rhs* (map (lambda (aX10df@x) (aXbad@make-eval-transformer (aXdd6@expand-transformer aX10df@x aX10c9@mr))) aX10d4@rhs*))) (aXdb4@chi-internal (cons aX10d5@b aX10d6@b*) (append (map cons aX10db@lab* aX10dc@rhs*) aX10c8@r) (append (map cons aX10db@lab* aX10dc@rhs*) aX10c9@mr))))) aX10d1@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX10cf@t)))))))) (set! aX2820@aXd18@fluid-let-syntax-transformer aXd18@fluid-let-syntax-transformer) (set! aXd1a@type-descriptor-transformer (lambda (aX10e3@e aX10e4@r aX10e5@mr) (let ((aX10e9@t aX10e3@e)) (let ((aX10eb@ls/false (aXd7c@syntax-dispatch aX10e9@t '(_ any)))) (if (and aX10eb@ls/false (apply (lambda (aX10ed@id) (aXb75@id? aX10ed@id)) aX10eb@ls/false)) (apply (lambda (aX10ef@id) (let ((aX10f1@lab (aXb8b@id->label aX10ef@id))) (let ((aX10f3@b (aXb8d@label->binding aX10f1@lab aX10e4@r))) (let ((aX10f5@type (aXb91@binding-type aX10f3@b))) (begin (if (not aX10f1@lab) (aXb95@raise-unbound-error aX10ef@id) (void)) (if (not (and (eq? aX10f5@type '$rtd) (not (list? (aXb93@binding-value aX10f3@b))))) (aXe5c@syntax-violation '#f '"not a record type" aX10e3@e) (void)) (list 'quote (aXb93@binding-value aX10f3@b))))))) aX10eb@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX10e9@t)))))) (set! aX2821@aXd1a@type-descriptor-transformer aXd1a@type-descriptor-transformer) (set! aXd1c@record-type-descriptor-transformer (lambda (aX10f7@e aX10f8@r aX10f9@mr) (let ((aX10fd@t aX10f7@e)) (let ((aX10ff@ls/false (aXd7c@syntax-dispatch aX10fd@t '(_ any)))) (if (and aX10ff@ls/false (apply (lambda (aX1101@id) (aXb75@id? aX1101@id)) aX10ff@ls/false)) (apply (lambda (aX1103@id) (let ((aX1105@lab (aXb8b@id->label aX1103@id))) (let ((aX1107@b (aXb8d@label->binding aX1105@lab aX10f8@r))) (let ((aX1109@type (aXb91@binding-type aX1107@b))) (begin (if (not aX1105@lab) (aXb95@raise-unbound-error aX1103@id) (void)) (if (not (and (eq? aX1109@type '$rtd) (list? (aXb93@binding-value aX1107@b)))) (aXe5c@syntax-violation '#f '"not a record type" aX10f7@e) (void)) (aXd9e@chi-expr (car (aXb93@binding-value aX1107@b)) aX10f8@r aX10f9@mr)))))) aX10ff@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX10fd@t)))))) (set! aX2822@aXd1c@record-type-descriptor-transformer aXd1c@record-type-descriptor-transformer) (set! aXd1e@record-constructor-descriptor-transformer (lambda (aX110b@e aX110c@r aX110d@mr) (let ((aX1111@t aX110b@e)) (let ((aX1113@ls/false (aXd7c@syntax-dispatch aX1111@t '(_ any)))) (if (and aX1113@ls/false (apply (lambda (aX1115@id) (aXb75@id? aX1115@id)) aX1113@ls/false)) (apply (lambda (aX1117@id) (let ((aX1119@lab (aXb8b@id->label aX1117@id))) (let ((aX111b@b (aXb8d@label->binding aX1119@lab aX110c@r))) (let ((aX111d@type (aXb91@binding-type aX111b@b))) (begin (if (not aX1119@lab) (aXb95@raise-unbound-error aX1117@id) (void)) (if (not (and (eq? aX111d@type '$rtd) (list? (aXb93@binding-value aX111b@b)))) (aXe5c@syntax-violation '#f '"invalid type" aX110b@e) (void)) (aXd9e@chi-expr (cadr (aXb93@binding-value aX111b@b)) aX110c@r aX110d@mr)))))) aX1113@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1111@t)))))) (set! aX2823@aXd1e@record-constructor-descriptor-transformer aXd1e@record-constructor-descriptor-transformer) (set! aXd20@when-macro (lambda (aX111f@e) (let ((aX1121@t aX111f@e)) (let ((aX1123@ls/false (aXd7c@syntax-dispatch aX1121@t '(_ any any . each-any)))) (if aX1123@ls/false (apply (lambda (aX1125@test aX1126@e aX1127@e*) (aXd32@bless (list 'if aX1125@test (cons 'begin (cons aX1126@e aX1127@e*))))) aX1123@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1121@t)))))) (set! aX2824@aXd20@when-macro aXd20@when-macro) (set! aXd22@unless-macro (lambda (aX112b@e) (let ((aX112d@t aX112b@e)) (let ((aX112f@ls/false (aXd7c@syntax-dispatch aX112d@t '(_ any any . each-any)))) (if aX112f@ls/false (apply (lambda (aX1131@test aX1132@e aX1133@e*) (aXd32@bless (list 'if (list 'not aX1131@test) (cons 'begin (cons aX1132@e aX1133@e*))))) aX112f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX112d@t)))))) (set! aX2825@aXd22@unless-macro aXd22@unless-macro) (set! aXd24@if-transformer (lambda (aX1137@e aX1138@r aX1139@mr) (let ((aX113d@t aX1137@e)) (let ((aX113f@ls/false (aXd7c@syntax-dispatch aX113d@t '(_ any any any)))) (if aX113f@ls/false (apply (lambda (aX1141@e0 aX1142@e1 aX1143@e2) (list 'if (aXd9e@chi-expr aX1141@e0 aX1138@r aX1139@mr) (aXd9e@chi-expr aX1142@e1 aX1138@r aX1139@mr) (aXd9e@chi-expr aX1143@e2 aX1138@r aX1139@mr))) aX113f@ls/false) (let ((aX1147@t aX113d@t)) (let ((aX1149@ls/false (aXd7c@syntax-dispatch aX1147@t '(_ any any)))) (if aX1149@ls/false (apply (lambda (aX114b@e0 aX114c@e1) (list 'if (aXd9e@chi-expr aX114b@e0 aX1138@r aX1139@mr) (aXd9e@chi-expr aX114c@e1 aX1138@r aX1139@mr) (aXadb@aXa36@build-void))) aX1149@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1147@t))))))))) (set! aX2826@aXd24@if-transformer aXd24@if-transformer) (set! aXd26@and-transformer (lambda (aX114f@e aX1150@r aX1151@mr) (let ((aX1155@t aX114f@e)) (let ((aX1157@ls/false (aXd7c@syntax-dispatch aX1155@t '(_ . each-any)))) (if aX1157@ls/false (apply (lambda (aX1159@e*) (cons 'and (aXd9a@chi-expr* aX1159@e* aX1150@r aX1151@mr))) aX1157@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1155@t)))))) (set! aX2827@aXd26@and-transformer aXd26@and-transformer) (set! aXd28@or-transformer (lambda (aX115b@e aX115c@r aX115d@mr) (let ((aX1161@t aX115b@e)) (let ((aX1163@ls/false (aXd7c@syntax-dispatch aX1161@t '(_ . each-any)))) (if aX1163@ls/false (apply (lambda (aX1165@e*) (cons 'or (aXd9a@chi-expr* aX1165@e* aX115c@r aX115d@mr))) aX1163@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1161@t)))))) (set! aX2828@aXd28@or-transformer aXd28@or-transformer) (set! aXd2a@case-macro (lambda (aX1167@e) (let ((aX116a@build-last '#f) (aX116c@build-one '#f)) (begin (set! aX116a@build-last (lambda (aX1191@cls) (let ((aX1193@t aX1191@cls)) (let ((aX1195@ls/false (aXd7c@syntax-dispatch aX1193@t '(#(scheme-id else) any . each-any)))) (if aX1195@ls/false (apply (lambda (aX1197@e aX1198@e*) (cons 'begin (cons aX1197@e aX1198@e*))) aX1195@ls/false) (let ((aX119b@t aX1193@t)) (let ((aX119d@ls/false (aXd7c@syntax-dispatch aX119b@t '_))) (if aX119d@ls/false (apply (lambda () (aX116c@build-one aX1191@cls '(if #f #f))) aX119d@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX119b@t))))))))) (set! aX116c@build-one (lambda (aX1183@cls aX1184@k) (let ((aX1187@t aX1183@cls)) (let ((aX1189@ls/false (aXd7c@syntax-dispatch aX1187@t '(each-any any . each-any)))) (if aX1189@ls/false (apply (lambda (aX118b@d* aX118c@e aX118d@e*) (list 'if (list 'memv 't (list 'quote aX118b@d*)) (cons 'begin (cons aX118c@e aX118d@e*)) aX1184@k)) aX1189@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1187@t)))))) (let ((aX116d@t aX1167@e)) (let ((aX116f@ls/false (aXd7c@syntax-dispatch aX116d@t '(_ any)))) (if aX116f@ls/false (apply (lambda (aX1171@expr) (aXd32@bless (cons 'let (cons (list (list 't aX1171@expr)) '((if #f #f)))))) aX116f@ls/false) (let ((aX1173@t aX116d@t)) (let ((aX1175@ls/false (aXd7c@syntax-dispatch aX1173@t '(_ any any . each-any)))) (if aX1175@ls/false (apply (lambda (aX1177@expr aX1178@cls aX1179@cls*) (aXd32@bless (list 'let (list (list 't aX1177@expr)) (let aX1181@f ((aX117d@cls aX1178@cls) (aX117e@cls* aX1179@cls*)) (if (null? aX117e@cls*) (aX116a@build-last aX117d@cls) (aX116c@build-one aX117d@cls (aX1181@f (car aX117e@cls*) (cdr aX117e@cls*)))))))) aX1175@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1173@t))))))))))) (set! aX2829@aXd2a@case-macro aXd2a@case-macro) (set! aXd2c@quote-transformer (lambda (aX119f@e aX11a0@r aX11a1@mr) (let ((aX11a5@t aX119f@e)) (let ((aX11a7@ls/false (aXd7c@syntax-dispatch aX11a5@t '(_ any)))) (if aX11a7@ls/false (apply (lambda (aX11a9@datum) (list 'quote (aXb89@stx->datum aX11a9@datum))) aX11a7@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX11a5@t)))))) (set! aX282a@aXd2c@quote-transformer aXd2c@quote-transformer) (set! aXd2e@case-lambda-transformer (lambda (aX11ab@e aX11ac@r aX11ad@mr) (let ((aX11b1@t aX11ab@e)) (let ((aX11b3@ls/false (aXd7c@syntax-dispatch aX11b1@t '(_ . #(each (any any . each-any)))))) (if aX11b3@ls/false (apply (lambda (aX11b5@fmls* aX11b6@b* aX11b7@b**) (call-with-values (lambda () (aXda6@chi-lambda-clause* aX11ab@e aX11b5@fmls* (map cons aX11b6@b* aX11b7@b**) aX11ac@r aX11ad@mr)) (lambda (aX11bf@aX11bc aX11c0@aX11be) (let ((aX11c3@body* aX11c0@aX11be) (aX11c4@fmls* aX11bf@aX11bc)) (aXad9@aXa06@build-case-lambda '#f aX11c4@fmls* aX11c3@body*))))) aX11b3@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX11b1@t)))))) (set! aX282b@aXd2e@case-lambda-transformer aXd2e@case-lambda-transformer) (set! aXd30@lambda-transformer (lambda (aX11c7@e aX11c8@r aX11c9@mr) (let ((aX11cd@t aX11c7@e)) (let ((aX11cf@ls/false (aXd7c@syntax-dispatch aX11cd@t '(_ any any . each-any)))) (if aX11cf@ls/false (apply (lambda (aX11d1@fmls aX11d2@b aX11d3@b*) (call-with-values (lambda () (aXda4@chi-lambda-clause aX11c7@e aX11d1@fmls (cons aX11d2@b aX11d3@b*) aX11c8@r aX11c9@mr)) (lambda (aX11db@aX11d8 aX11dc@aX11da) (let ((aX11df@body aX11dc@aX11da) (aX11e0@fmls aX11db@aX11d8)) (aXad8@aXa04@build-lambda '#f aX11e0@fmls aX11df@body))))) aX11cf@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX11cd@t)))))) (set! aX282c@aXd30@lambda-transformer aXd30@lambda-transformer) (set! aXd32@bless (lambda (aX11e3@x) (aXb5d@mkstx (let aX11e7@f ((aX11e5@x aX11e3@x)) (if (aXb41@stx? aX11e5@x) aX11e5@x (if (pair? aX11e5@x) (cons (aX11e7@f (car aX11e5@x)) (aX11e7@f (cdr aX11e5@x))) (if (symbol? aX11e5@x) (aXd04@scheme-stx aX11e5@x) (if (vector? aX11e5@x) (vector-map aX11e7@f aX11e5@x) aX11e5@x))))) '() '() '()))) (set! aX282d@aXd32@bless aXd32@bless) (set! aXd34@with-syntax-macro (lambda (aX11e9@e) (let ((aX11eb@t aX11e9@e)) (let ((aX11ed@ls/false (aXd7c@syntax-dispatch aX11eb@t '(_ #(each (any any)) any . each-any)))) (if aX11ed@ls/false (apply (lambda (aX11ef@pat* aX11f0@expr* aX11f1@b aX11f2@b*) (let ((aX11f7@idn* (let aX11fb@f ((aX11f9@pat* aX11ef@pat*)) (if (null? aX11f9@pat*) '() (call-with-values (lambda () (aXd7a@convert-pattern (car aX11f9@pat*) '())) (lambda (aX1201@aX11fe aX1202@aX1200) (let ((aX1205@idn* aX1202@aX1200) (aX1206@pat aX1201@aX11fe)) (append aX1205@idn* (aX11fb@f (cdr aX11f9@pat*)))))))))) (begin (aXda2@verify-formals (map car aX11f7@idn*) aX11e9@e) (let ((aX1209@t* (aXe4a@generate-temporaries aX11f0@expr*))) (aXd32@bless (list 'let (map list aX1209@t* aX11f0@expr*) (let aX120f@f ((aX120b@pat* aX11ef@pat*) (aX120c@t* aX1209@t*)) (if (null? aX120b@pat*) (cons 'begin (cons '#f (cons aX11f1@b aX11f2@b*))) (list 'syntax-case (car aX120c@t*) '() (list (car aX120b@pat*) (aX120f@f (cdr aX120b@pat*) (cdr aX120c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car aX120b@pat*)) (car aX120c@t*)))))))))))) aX11ed@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX11eb@t)))))) (set! aX282e@aXd34@with-syntax-macro aXd34@with-syntax-macro) (set! aXd36@invalid-fmls-error (lambda (aX1211@stx aX1212@fmls) (let ((aX1215@t aX1212@fmls)) (let ((aX1217@ls/false (aXd7c@syntax-dispatch aX1215@t '#(each+ any () any)))) (if aX1217@ls/false (apply (lambda (aX1219@id* aX121a@last) (let aX121f@f ((aX121d@id* (if (aXb75@id? aX121a@last) (cons aX121a@last aX1219@id*) (if (aXb6b@syntax-null? aX121a@last) aX1219@id* (aXe5c@syntax-violation '#f '"not an identifier" aX1211@stx aX121a@last))))) (if (null? aX121d@id*) (values) (if (not (aXb75@id? (car aX121d@id*))) (aXe5c@syntax-violation '#f '"not an identifier" aX1211@stx (car aX121d@id*)) (begin (aX121f@f (cdr aX121d@id*)) (if (aXb81@bound-id-member? (car aX121d@id*) (cdr aX121d@id*)) (aXe5c@syntax-violation '#f '"duplicate binding" aX1211@stx (car aX121d@id*)) (void))))))) aX1217@ls/false) (let ((aX1221@t aX1215@t)) (let ((aX1223@ls/false (aXd7c@syntax-dispatch aX1221@t '_))) (if aX1223@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"malformed binding form" aX1211@stx aX1212@fmls)) aX1223@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1221@t))))))))) (set! aX282f@aXd36@invalid-fmls-error aXd36@invalid-fmls-error) (set! aXd38@let-macro (lambda (aX1225@stx) (let ((aX1227@t aX1225@stx)) (let ((aX1229@ls/false (aXd7c@syntax-dispatch aX1227@t '(_ #(each (any any)) any . each-any)))) (if aX1229@ls/false (apply (lambda (aX122b@lhs* aX122c@rhs* aX122d@b aX122e@b*) (if (aXb7d@valid-bound-ids? aX122b@lhs*) (aXd32@bless (cons (cons 'lambda (cons aX122b@lhs* (cons aX122d@b aX122e@b*))) aX122c@rhs*)) (aXd36@invalid-fmls-error aX1225@stx aX122b@lhs*))) aX1229@ls/false) (let ((aX1233@t aX1227@t)) (let ((aX1235@ls/false (aXd7c@syntax-dispatch aX1233@t '(_ any #(each (any any)) any . each-any)))) (if (and aX1235@ls/false (apply (lambda (aX1237@f aX1238@lhs* aX1239@rhs* aX123a@b aX123b@b*) (aXb75@id? aX1237@f)) aX1235@ls/false)) (apply (lambda (aX1241@f aX1242@lhs* aX1243@rhs* aX1244@b aX1245@b*) (if (aXb7d@valid-bound-ids? aX1242@lhs*) (aXd32@bless (cons (list 'letrec (list (list aX1241@f (cons 'lambda (cons aX1242@lhs* (cons aX1244@b aX1245@b*))))) aX1241@f) aX1243@rhs*)) (aXd36@invalid-fmls-error aX1225@stx aX1242@lhs*))) aX1235@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1233@t))))))))) (set! aX2830@aXd38@let-macro aXd38@let-macro) (set! aXd3a@let-values-macro (lambda (aX124b@stx) (let ((aX124e@rename '#f) (aX1250@rename* '#f)) (begin (set! aX124e@rename (lambda (aX12b3@x aX12b4@old* aX12b5@new*) (begin (if (not (aXb75@id? aX12b3@x)) (aXe5c@syntax-violation '#f '"not an indentifier" aX124b@stx aX12b3@x) (void)) (if (aXb81@bound-id-member? aX12b3@x aX12b4@old*) (aXe5c@syntax-violation '#f '"duplicate binding" aX124b@stx aX12b3@x) (void)) (let ((aX12b9@y (gensym (aXe62@syntax->datum aX12b3@x)))) (values aX12b9@y (cons aX12b3@x aX12b4@old*) (cons aX12b9@y aX12b5@new*)))))) (set! aX1250@rename* (lambda (aX12a1@x* aX12a2@old* aX12a3@new*) (if (null? aX12a1@x*) (values '() aX12a2@old* aX12a3@new*) (call-with-values (lambda () (aX124e@rename (car aX12a1@x*) aX12a2@old* aX12a3@new*)) (lambda (aX12a7@x aX12a8@old* aX12a9@new*) (call-with-values (lambda () (aX1250@rename* (cdr aX12a1@x*) aX12a8@old* aX12a9@new*)) (lambda (aX12ad@x* aX12ae@old* aX12af@new*) (values (cons aX12a7@x aX12ad@x*) aX12ae@old* aX12af@new*)))))))) (let ((aX1251@t aX124b@stx)) (let ((aX1253@ls/false (aXd7c@syntax-dispatch aX1251@t '(_ () any . each-any)))) (if aX1253@ls/false (apply (lambda (aX1255@b aX1256@b*) (cons* (aXd32@bless 'let) '() aX1255@b aX1256@b*)) aX1253@ls/false) (let ((aX1259@t aX1251@t)) (let ((aX125b@ls/false (aXd7c@syntax-dispatch aX1259@t '(_ #(each (any any)) any . each-any)))) (if aX125b@ls/false (apply (lambda (aX125d@lhs* aX125e@rhs* aX125f@b aX1260@b*) (aXd32@bless (let aX126d@f ((aX1265@lhs* aX125d@lhs*) (aX1266@rhs* aX125e@rhs*) (aX1267@old* '()) (aX1268@new* '())) (if (null? aX1265@lhs*) (cons 'let (cons (map list aX1267@old* aX1268@new*) (cons aX125f@b aX1260@b*))) (let ((aX126f@t (car aX1265@lhs*))) (let ((aX1271@ls/false (aXd7c@syntax-dispatch aX126f@t 'each-any))) (if aX1271@ls/false (apply (lambda (aX1273@x*) (call-with-values (lambda () (aX1250@rename* aX1273@x* aX1267@old* aX1268@new*)) (lambda (aX127b@aX1276 aX127c@aX1278 aX127d@aX127a) (let ((aX1281@new* aX127d@aX127a) (aX1282@old* aX127c@aX1278) (aX1283@y* aX127b@aX1276)) (list 'call-with-values (list 'lambda '() (car aX1266@rhs*)) (list 'lambda aX1283@y* (aX126d@f (cdr aX1265@lhs*) (cdr aX1266@rhs*) aX1282@old* aX1281@new*))))))) aX1271@ls/false) (let ((aX1287@t aX126f@t)) (let ((aX1289@ls/false (aXd7c@syntax-dispatch aX1287@t '#(each+ any () any)))) (if aX1289@ls/false (apply (lambda (aX128b@x* aX128c@x) (call-with-values (lambda () (aX124e@rename aX128c@x aX1267@old* aX1268@new*)) (lambda (aX128f@y aX1290@old* aX1291@new*) (call-with-values (lambda () (aX1250@rename* aX128b@x* aX1290@old* aX1291@new*)) (lambda (aX1295@y* aX1296@old* aX1297@new*) (list 'call-with-values (list 'lambda '() (car aX1266@rhs*)) (list 'lambda (append aX1295@y* aX128f@y) (aX126d@f (cdr aX1265@lhs*) (cdr aX1266@rhs*) aX1296@old* aX1297@new*)))))))) aX1289@ls/false) (let ((aX129b@t aX1287@t)) (let ((aX129d@ls/false (aXd7c@syntax-dispatch aX129b@t 'any))) (if aX129d@ls/false (apply (lambda (aX129f@others) (aXe5c@syntax-violation '#f '"malformed bindings" aX124b@stx aX129f@others)) aX129d@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX129b@t)))))))))))))) aX125b@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1259@t))))))))))) (set! aX2831@aXd3a@let-values-macro aXd3a@let-values-macro) (set! aXd3c@let*-values-macro (lambda (aX12bb@stx) (let ((aX12be@check '#f)) (begin (set! aX12be@check (lambda (aX12ed@x*) (if (not (null? aX12ed@x*)) (let ((aX12ef@x (car aX12ed@x*))) (begin (if (not (aXb75@id? aX12ef@x)) (aXe5c@syntax-violation '#f '"not an identifier" aX12bb@stx aX12ef@x) (void)) (aX12be@check (cdr aX12ed@x*)) (if (aXb81@bound-id-member? aX12ef@x (cdr aX12ed@x*)) (aXe5c@syntax-violation '#f '"duplicate identifier" aX12bb@stx aX12ef@x) (void)))) (void)))) (let ((aX12bf@t aX12bb@stx)) (let ((aX12c1@ls/false (aXd7c@syntax-dispatch aX12bf@t '(_ () any . each-any)))) (if aX12c1@ls/false (apply (lambda (aX12c3@b aX12c4@b*) (cons* (aXd32@bless 'let) '() aX12c3@b aX12c4@b*)) aX12c1@ls/false) (let ((aX12c7@t aX12bf@t)) (let ((aX12c9@ls/false (aXd7c@syntax-dispatch aX12c7@t '(_ #(each (any any)) any . each-any)))) (if aX12c9@ls/false (apply (lambda (aX12cb@lhs* aX12cc@rhs* aX12cd@b aX12ce@b*) (aXd32@bless (let aX12d7@f ((aX12d3@lhs* aX12cb@lhs*) (aX12d4@rhs* aX12cc@rhs*)) (if (null? aX12d3@lhs*) (cons 'begin (cons aX12cd@b aX12ce@b*)) (let ((aX12d9@t (car aX12d3@lhs*))) (let ((aX12db@ls/false (aXd7c@syntax-dispatch aX12d9@t 'each-any))) (if aX12db@ls/false (apply (lambda (aX12dd@x*) (begin (aX12be@check aX12dd@x*) (list 'call-with-values (list 'lambda '() (car aX12d4@rhs*)) (list 'lambda aX12dd@x* (aX12d7@f (cdr aX12d3@lhs*) (cdr aX12d4@rhs*)))))) aX12db@ls/false) (let ((aX12df@t aX12d9@t)) (let ((aX12e1@ls/false (aXd7c@syntax-dispatch aX12df@t '#(each+ any () any)))) (if aX12e1@ls/false (apply (lambda (aX12e3@x* aX12e4@x) (begin (aX12be@check (cons aX12e4@x aX12e3@x*)) (list 'call-with-values (list 'lambda '() (car aX12d4@rhs*)) (list 'lambda (append aX12e3@x* aX12e4@x) (aX12d7@f (cdr aX12d3@lhs*) (cdr aX12d4@rhs*)))))) aX12e1@ls/false) (let ((aX12e7@t aX12df@t)) (let ((aX12e9@ls/false (aXd7c@syntax-dispatch aX12e7@t 'any))) (if aX12e9@ls/false (apply (lambda (aX12eb@others) (aXe5c@syntax-violation '#f '"malformed bindings" aX12bb@stx aX12eb@others)) aX12e9@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX12e7@t)))))))))))))) aX12c9@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX12c7@t))))))))))) (set! aX2832@aXd3c@let*-values-macro aXd3c@let*-values-macro) (set! aXd3e@trace-lambda-macro (lambda (aX12f1@stx) (let ((aX12f3@t aX12f1@stx)) (let ((aX12f5@ls/false (aXd7c@syntax-dispatch aX12f3@t '(_ any each-any any . each-any)))) (if aX12f5@ls/false (apply (lambda (aX12f7@who aX12f8@fmls aX12f9@b aX12fa@b*) (if (aXb7d@valid-bound-ids? aX12f8@fmls) (aXd32@bless (list 'make-traced-procedure (list 'quote aX12f7@who) (cons 'lambda (cons aX12f8@fmls (cons aX12f9@b aX12fa@b*))))) (aXd36@invalid-fmls-error aX12f1@stx aX12f8@fmls))) aX12f5@ls/false) (let ((aX12ff@t aX12f3@t)) (let ((aX1301@ls/false (aXd7c@syntax-dispatch aX12ff@t '(_ any #(each+ any () any) any . each-any)))) (if aX1301@ls/false (apply (lambda (aX1303@who aX1304@fmls aX1305@last aX1306@b aX1307@b*) (if (aXb7d@valid-bound-ids? (cons aX1305@last aX1304@fmls)) (aXd32@bless (list 'make-traced-procedure (list 'quote aX1303@who) (cons 'lambda (cons (append aX1304@fmls aX1305@last) (cons aX1306@b aX1307@b*))))) (aXd36@invalid-fmls-error aX12f1@stx (append aX1304@fmls aX1305@last)))) aX1301@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX12ff@t))))))))) (set! aX2833@aXd3e@trace-lambda-macro aXd3e@trace-lambda-macro) (set! aXd40@trace-define-macro (lambda (aX130d@stx) (let ((aX130f@t aX130d@stx)) (let ((aX1311@ls/false (aXd7c@syntax-dispatch aX130f@t '(_ (any . each-any) any . each-any)))) (if aX1311@ls/false (apply (lambda (aX1313@who aX1314@fmls aX1315@b aX1316@b*) (if (aXb7d@valid-bound-ids? aX1314@fmls) (aXd32@bless (list 'define aX1313@who (list 'make-traced-procedure (list 'quote aX1313@who) (cons 'lambda (cons aX1314@fmls (cons aX1315@b aX1316@b*)))))) (aXd36@invalid-fmls-error aX130d@stx aX1314@fmls))) aX1311@ls/false) (let ((aX131b@t aX130f@t)) (let ((aX131d@ls/false (aXd7c@syntax-dispatch aX131b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if aX131d@ls/false (apply (lambda (aX131f@who aX1320@fmls aX1321@last aX1322@b aX1323@b*) (if (aXb7d@valid-bound-ids? (cons aX1321@last aX1320@fmls)) (aXd32@bless (list 'define aX131f@who (list 'make-traced-procedure (list 'quote aX131f@who) (cons 'lambda (cons (append aX1320@fmls aX1321@last) (cons aX1322@b aX1323@b*)))))) (aXd36@invalid-fmls-error aX130d@stx (append aX1320@fmls aX1321@last)))) aX131d@ls/false) (let ((aX1329@t aX131b@t)) (let ((aX132b@ls/false (aXd7c@syntax-dispatch aX1329@t '(_ any any)))) (if aX132b@ls/false (apply (lambda (aX132d@who aX132e@expr) (if (aXb75@id? aX132d@who) (aXd32@bless (list 'define aX132d@who (list 'let (list (list 'v aX132e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote aX132d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (aXe5c@syntax-violation '#f '"invalid name" aX130d@stx))) aX132b@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1329@t)))))))))))) (set! aX2834@aXd40@trace-define-macro aXd40@trace-define-macro) (set! aXd42@trace-define-syntax-macro (lambda (aX1331@stx) (let ((aX1333@t aX1331@stx)) (let ((aX1335@ls/false (aXd7c@syntax-dispatch aX1333@t '(_ any any)))) (if aX1335@ls/false (apply (lambda (aX1337@who aX1338@expr) (if (aXb75@id? aX1337@who) (aXd32@bless (list 'define-syntax aX1337@who (list 'make-traced-macro (list 'quote aX1337@who) aX1338@expr))) (aXe5c@syntax-violation '#f '"invalid name" aX1331@stx))) aX1335@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1333@t)))))) (set! aX2835@aXd42@trace-define-syntax-macro aXd42@trace-define-syntax-macro) (set! aXd44@trace-let/rec-syntax (lambda (aX133b@who) (lambda (aX133d@stx) (let ((aX133f@t aX133d@stx)) (let ((aX1341@ls/false (aXd7c@syntax-dispatch aX133f@t '(_ #(each (any any)) any . each-any)))) (if aX1341@ls/false (apply (lambda (aX1343@lhs* aX1344@rhs* aX1345@b aX1346@b*) (if (aXb7d@valid-bound-ids? aX1343@lhs*) (let ((aX134b@rhs* (map (lambda (aX134d@lhs aX134e@rhs) (list 'make-traced-macro (list 'quote aX134d@lhs) aX134e@rhs)) aX1343@lhs* aX1344@rhs*))) (aXd32@bless (cons aX133b@who (cons (map list aX1343@lhs* aX134b@rhs*) (cons aX1345@b aX1346@b*))))) (aXd36@invalid-fmls-error aX133d@stx aX1343@lhs*))) aX1341@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX133f@t))))))) (set! aX2836@aXd44@trace-let/rec-syntax aXd44@trace-let/rec-syntax) (set! aXd46@trace-let-syntax-macro (aXd44@trace-let/rec-syntax 'let-syntax)) (set! aX2837@aXd46@trace-let-syntax-macro aXd46@trace-let-syntax-macro) (set! aXd48@trace-letrec-syntax-macro (aXd44@trace-let/rec-syntax 'letrec-syntax)) (set! aX2838@aXd48@trace-letrec-syntax-macro aXd48@trace-letrec-syntax-macro) (set! aXd4a@guard-macro (lambda (aX1351@x) (let ((aX1354@gen-clauses '#f)) (begin (set! aX1354@gen-clauses (lambda (aX136b@con aX136c@outerk aX136d@clause*) (let ((aX1372@f '#f) (aX1374@f* '#f)) (begin (set! aX1372@f (lambda (aX13ab@x aX13ac@k) (let ((aX13af@t aX13ab@x)) (let ((aX13b1@ls/false (aXd7c@syntax-dispatch aX13af@t '(any #(scheme-id =>) any)))) (if aX13b1@ls/false (apply (lambda (aX13b3@e aX13b4@p) (let ((aX13b7@t (gensym))) (list 'let (list (list aX13b7@t aX13b3@e)) (list 'if aX13b7@t (list aX13b4@p aX13b7@t) aX13ac@k)))) aX13b1@ls/false) (let ((aX13b9@t aX13af@t)) (let ((aX13bb@ls/false (aXd7c@syntax-dispatch aX13b9@t '(any)))) (if aX13bb@ls/false (apply (lambda (aX13bd@e) (let ((aX13bf@t (gensym))) (list 'let (list (list aX13bf@t aX13bd@e)) (list 'if aX13bf@t aX13bf@t aX13ac@k)))) aX13bb@ls/false) (let ((aX13c1@t aX13b9@t)) (let ((aX13c3@ls/false (aXd7c@syntax-dispatch aX13c1@t '(any any . each-any)))) (if aX13c3@ls/false (apply (lambda (aX13c5@e aX13c6@v aX13c7@v*) (list 'if aX13c5@e (cons 'begin (cons aX13c6@v aX13c7@v*)) aX13ac@k)) aX13c3@ls/false) (let ((aX13cb@t aX13c1@t)) (let ((aX13cd@ls/false (aXd7c@syntax-dispatch aX13cb@t '_))) (if aX13cd@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid guard clause" aX13ab@x)) aX13cd@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX13cb@t))))))))))))))) (set! aX1374@f* (lambda (aX1381@x*) (let ((aX1383@t aX1381@x*)) (let ((aX1385@ls/false (aXd7c@syntax-dispatch aX1383@t '()))) (if aX1385@ls/false (apply (lambda () (let ((aX1387@g (gensym))) (values (list aX1387@g (list 'lambda '() (list 'raise-continuable aX136b@con))) aX1387@g))) aX1385@ls/false) (let ((aX1389@t aX1383@t)) (let ((aX138b@ls/false (aXd7c@syntax-dispatch aX1389@t '((#(scheme-id else) any . each-any))))) (if aX138b@ls/false (apply (lambda (aX138d@e aX138e@e*) (values (cons 'begin (cons aX138d@e aX138e@e*)) '#f)) aX138b@ls/false) (let ((aX1391@t aX1389@t)) (let ((aX1393@ls/false (aXd7c@syntax-dispatch aX1391@t '(any . any)))) (if aX1393@ls/false (apply (lambda (aX1395@cls aX1396@cls*) (call-with-values (lambda () (aX1374@f* aX1396@cls*)) (lambda (aX139d@aX139a aX139e@aX139c) (let ((aX13a1@g aX139e@aX139c) (aX13a2@e aX139d@aX139a)) (values (aX1372@f aX1395@cls aX13a2@e) aX13a1@g))))) aX1393@ls/false) (let ((aX13a5@t aX1391@t)) (let ((aX13a7@ls/false (aXd7c@syntax-dispatch aX13a5@t 'any))) (if aX13a7@ls/false (apply (lambda (aX13a9@others) (aXe5c@syntax-violation '#f '"invalid guard clause" aX13a9@others)) aX13a7@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX13a5@t))))))))))))))) (call-with-values (lambda () (aX1374@f* aX136d@clause*)) (lambda (aX1379@aX1376 aX137a@aX1378) (let ((aX137d@raisek aX137a@aX1378) (aX137e@code aX1379@aX1376)) (if aX137d@raisek (list (list 'call/cc (list 'lambda (list aX137d@raisek) (list aX136c@outerk (list 'lambda '() aX137e@code))))) (list aX136c@outerk (list 'lambda '() aX137e@code)))))))))) (let ((aX1355@t aX1351@x)) (let ((aX1357@ls/false (aXd7c@syntax-dispatch aX1355@t '(_ (any . each-any) any . each-any)))) (if (and aX1357@ls/false (apply (lambda (aX1359@con aX135a@clause* aX135b@b aX135c@b*) (aXb75@id? aX1359@con)) aX1357@ls/false)) (apply (lambda (aX1361@con aX1362@clause* aX1363@b aX1364@b*) (let ((aX1369@outerk (gensym))) (aXd32@bless (list (list 'call/cc (list 'lambda (list aX1369@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list aX1361@con) (aX1354@gen-clauses aX1361@con aX1369@outerk aX1362@clause*)) (cons 'lambda (cons '() (cons aX1363@b aX1364@b*))))))))))) aX1357@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1355@t)))))))) (set! aX2839@aXd4a@guard-macro aXd4a@guard-macro) (set! aXd4c@define-enumeration-macro (lambda (aX13cf@stx) (let ((aX13d2@set? '#f) (aX13d4@remove-dups '#f)) (begin (set! aX13d2@set? (lambda (aX13eb@x) (or (null? aX13eb@x) (and (not (memq (car aX13eb@x) (cdr aX13eb@x))) (aX13d2@set? (cdr aX13eb@x)))))) (set! aX13d4@remove-dups (lambda (aX13e9@ls) (if (null? aX13e9@ls) '() (cons (car aX13e9@ls) (aX13d4@remove-dups (remq (car aX13e9@ls) (cdr aX13e9@ls))))))) (let ((aX13d5@t aX13cf@stx)) (let ((aX13d7@ls/false (aXd7c@syntax-dispatch aX13d5@t '(_ any each-any any)))) (if (and aX13d7@ls/false (apply (lambda (aX13d9@name aX13da@id* aX13db@maker) (and (aXb75@id? aX13d9@name) (aXb75@id? aX13db@maker) (for-all aXb75@id? aX13da@id*))) aX13d7@ls/false)) (apply (lambda (aX13df@name aX13e0@id* aX13e1@maker) (let ((aX13e5@name* (aX13d4@remove-dups (aXe62@syntax->datum aX13e0@id*))) (aX13e6@mk (gensym))) (aXd32@bless (list 'begin (list 'define aX13e6@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote aX13e5@name*)))) (list 'define-syntax aX13df@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote aX13e5@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote aX13df@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax aX13e1@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote aX13e1@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote aX13e5@name*)) (cons 'syntax-violation (cons (list 'quote aX13e1@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons aX13e6@mk '('(n* ...))))))))))))) aX13d7@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX13d5@t)))))))) (set! aX283a@aXd4c@define-enumeration-macro aXd4c@define-enumeration-macro) (set! aXd4e@time-macro (lambda (aX13ed@stx) (let ((aX13ef@t aX13ed@stx)) (let ((aX13f1@ls/false (aXd7c@syntax-dispatch aX13ef@t '(_ any)))) (if aX13f1@ls/false (apply (lambda (aX13f3@expr) (aXd32@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() aX13f3@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) aX13f1@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX13ef@t)))))) (set! aX283b@aXd4e@time-macro aXd4e@time-macro) (set! aXd50@delay-macro (lambda (aX13f5@stx) (let ((aX13f7@t aX13f5@stx)) (let ((aX13f9@ls/false (aXd7c@syntax-dispatch aX13f7@t '(_ any)))) (if aX13f9@ls/false (apply (lambda (aX13fb@expr) (aXd32@bless (list 'make-promise (list 'lambda '() aX13fb@expr)))) aX13f9@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX13f7@t)))))) (set! aX283c@aXd50@delay-macro aXd50@delay-macro) (set! aXd52@assert-macro (lambda (aX13fd@stx) (let ((aX13ff@t aX13fd@stx)) (let ((aX1401@ls/false (aXd7c@syntax-dispatch aX13ff@t '(_ any)))) (if aX1401@ls/false (apply (lambda (aX1403@expr) (let ((aX1405@pos (or (aXe54@expression-position aX13fd@stx) (aXe54@expression-position aX1403@expr)))) (aXd32@bless (list 'let (list (list 'x aX1403@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote aX1403@expr) (list 'quote aX1405@pos))))))) aX1401@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX13ff@t)))))) (set! aX283d@aXd52@assert-macro aXd52@assert-macro) (set! aXd54@endianness-macro (lambda (aX1407@stx) (let ((aX1409@t aX1407@stx)) (let ((aX140b@ls/false (aXd7c@syntax-dispatch aX1409@t '(_ any)))) (if aX140b@ls/false (apply (lambda (aX140d@e) (let ((aX140f@t (aXe62@syntax->datum aX140d@e))) (if (memv aX140f@t '(little)) (aXd32@bless ''little) (if (memv aX140f@t '(big)) (aXd32@bless ''big) (aXe5c@syntax-violation '#f '"endianness must be big or little" aX1407@stx))))) aX140b@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1409@t)))))) (set! aX283e@aXd54@endianness-macro aXd54@endianness-macro) (set! aXd56@identifier-syntax-macro (lambda (aX1411@stx) (let ((aX1413@t aX1411@stx)) (let ((aX1415@ls/false (aXd7c@syntax-dispatch aX1413@t '(_ any)))) (if aX1415@ls/false (apply (lambda (aX1417@expr) (aXd32@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax aX1417@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax aX1417@expr) '((syntax (e* ...)))))))))) aX1415@ls/false) (let ((aX1419@t aX1413@t)) (let ((aX141b@ls/false (aXd7c@syntax-dispatch aX1419@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and aX141b@ls/false (apply (lambda (aX141d@id1 aX141e@expr1 aX141f@id2 aX1420@expr2 aX1421@expr3) (and (aXb75@id? aX141d@id1) (aXb75@id? aX141f@id2) (aXb75@id? aX1420@expr2))) aX141b@ls/false)) (apply (lambda (aX1427@id1 aX1428@expr1 aX1429@id2 aX142a@expr2 aX142b@expr3) (aXd32@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax aX1428@expr1)) (list (list 'set! 'id aX142a@expr2) (list 'syntax aX142b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons aX1428@expr1 '(e* ...))))))))) aX141b@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1419@t))))))))) (set! aX283f@aXd56@identifier-syntax-macro aXd56@identifier-syntax-macro) (set! aXd58@do-macro (lambda (aX1431@stx) (let ((aX1434@bind '#f)) (begin (set! aX1434@bind (lambda (aX144b@x) (let ((aX144d@t aX144b@x)) (let ((aX144f@ls/false (aXd7c@syntax-dispatch aX144d@t '(any any)))) (if aX144f@ls/false (apply (lambda (aX1451@x aX1452@init) (list aX1451@x aX1452@init aX1451@x)) aX144f@ls/false) (let ((aX1455@t aX144d@t)) (let ((aX1457@ls/false (aXd7c@syntax-dispatch aX1455@t '(any any any)))) (if aX1457@ls/false (apply (lambda (aX1459@x aX145a@init aX145b@step) (list aX1459@x aX145a@init aX145b@step)) aX1457@ls/false) (let ((aX145f@t aX1455@t)) (let ((aX1461@ls/false (aXd7c@syntax-dispatch aX145f@t '_))) (if aX1461@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid binding" aX1431@stx)) aX1461@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX145f@t)))))))))))) (let ((aX1435@t aX1431@stx)) (let ((aX1437@ls/false (aXd7c@syntax-dispatch aX1435@t '(_ each-any (any . each-any) . each-any)))) (if aX1437@ls/false (apply (lambda (aX1439@binding* aX143a@test aX143b@expr* aX143c@command*) (let ((aX1441@t (map aX1434@bind aX1439@binding*))) (let ((aX1443@ls/false (aXd7c@syntax-dispatch aX1441@t '#(each (any any any))))) (if aX1443@ls/false (apply (lambda (aX1445@x* aX1446@init* aX1447@step*) (if (aXb7d@valid-bound-ids? aX1445@x*) (aXd32@bless (list 'letrec (list (list 'loop (list 'lambda aX1445@x* (list 'if aX143a@test (cons 'begin (cons '(if #f #f) aX143b@expr*)) (cons 'begin (append aX143c@command* (list (cons 'loop aX1447@step*)))))))) (cons 'loop aX1446@init*))) (aXe5c@syntax-violation '#f '"invalid bindings" aX1431@stx))) aX1443@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1441@t))))) aX1437@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1435@t)))))))) (set! aX2840@aXd58@do-macro aXd58@do-macro) (set! aXd5a@let*-macro (lambda (aX1463@stx) (let ((aX1465@t aX1463@stx)) (let ((aX1467@ls/false (aXd7c@syntax-dispatch aX1465@t '(_ #(each (any any)) any . each-any)))) (if (and aX1467@ls/false (apply (lambda (aX1469@lhs* aX146a@rhs* aX146b@b aX146c@b*) (for-all aXb75@id? aX1469@lhs*)) aX1467@ls/false)) (apply (lambda (aX1471@lhs* aX1472@rhs* aX1473@b aX1474@b*) (aXd32@bless (let aX147b@f ((aX1479@x* (map list aX1471@lhs* aX1472@rhs*))) (if (null? aX1479@x*) (cons 'let (cons '() (cons aX1473@b aX1474@b*))) (list 'let (list (car aX1479@x*)) (aX147b@f (cdr aX1479@x*))))))) aX1467@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1465@t)))))) (set! aX2841@aXd5a@let*-macro aXd5a@let*-macro) (set! aXd5c@or-macro (lambda (aX147d@stx) (let ((aX147f@t aX147d@stx)) (let ((aX1481@ls/false (aXd7c@syntax-dispatch aX147f@t '(_)))) (if aX1481@ls/false (apply (lambda () '#f) aX1481@ls/false) (let ((aX1483@t aX147f@t)) (let ((aX1485@ls/false (aXd7c@syntax-dispatch aX1483@t '(_ any . each-any)))) (if aX1485@ls/false (apply (lambda (aX1487@e aX1488@e*) (aXd32@bless (let aX148f@f ((aX148b@e aX1487@e) (aX148c@e* aX1488@e*)) (if (null? aX148c@e*) (list 'begin '#f aX148b@e) (list 'let (list (list 't aX148b@e)) (list 'if 't 't (aX148f@f (car aX148c@e*) (cdr aX148c@e*)))))))) aX1485@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1483@t))))))))) (set! aX2842@aXd5c@or-macro aXd5c@or-macro) (set! aXd5e@and-macro (lambda (aX1491@stx) (let ((aX1493@t aX1491@stx)) (let ((aX1495@ls/false (aXd7c@syntax-dispatch aX1493@t '(_)))) (if aX1495@ls/false (apply (lambda () '#t) aX1495@ls/false) (let ((aX1497@t aX1493@t)) (let ((aX1499@ls/false (aXd7c@syntax-dispatch aX1497@t '(_ any . each-any)))) (if aX1499@ls/false (apply (lambda (aX149b@e aX149c@e*) (aXd32@bless (let aX14a3@f ((aX149f@e aX149b@e) (aX14a0@e* aX149c@e*)) (if (null? aX14a0@e*) (list 'begin '#f aX149f@e) (cons 'if (cons aX149f@e (cons (aX14a3@f (car aX14a0@e*) (cdr aX14a0@e*)) '(#f)))))))) aX1499@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1497@t))))))))) (set! aX2843@aXd5e@and-macro aXd5e@and-macro) (set! aXd60@cond-macro (lambda (aX14a5@stx) (let ((aX14a7@t aX14a5@stx)) (let ((aX14a9@ls/false (aXd7c@syntax-dispatch aX14a7@t '(_ any . each-any)))) (if aX14a9@ls/false (apply (lambda (aX14ab@cls aX14ac@cls*) (aXd32@bless (let aX14b3@f ((aX14af@cls aX14ab@cls) (aX14b0@cls* aX14ac@cls*)) (if (null? aX14b0@cls*) (let ((aX14b5@t aX14af@cls)) (let ((aX14b7@ls/false (aXd7c@syntax-dispatch aX14b5@t '(#(scheme-id else) any . each-any)))) (if aX14b7@ls/false (apply (lambda (aX14b9@e aX14ba@e*) (cons 'begin (cons aX14b9@e aX14ba@e*))) aX14b7@ls/false) (let ((aX14bd@t aX14b5@t)) (let ((aX14bf@ls/false (aXd7c@syntax-dispatch aX14bd@t '(any #(scheme-id =>) any)))) (if aX14bf@ls/false (apply (lambda (aX14c1@e aX14c2@p) (list 'let (list (list 't aX14c1@e)) (list 'if 't (cons aX14c2@p '(t))))) aX14bf@ls/false) (let ((aX14c5@t aX14bd@t)) (let ((aX14c7@ls/false (aXd7c@syntax-dispatch aX14c5@t '(any)))) (if aX14c7@ls/false (apply (lambda (aX14c9@e) (cons 'or (cons aX14c9@e '((if #f #f))))) aX14c7@ls/false) (let ((aX14cb@t aX14c5@t)) (let ((aX14cd@ls/false (aXd7c@syntax-dispatch aX14cb@t '(any . each-any)))) (if aX14cd@ls/false (apply (lambda (aX14cf@e aX14d0@e*) (list 'if aX14cf@e (cons 'begin aX14d0@e*))) aX14cd@ls/false) (let ((aX14d3@t aX14cb@t)) (let ((aX14d5@ls/false (aXd7c@syntax-dispatch aX14d3@t '_))) (if aX14d5@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid last clause" aX14a5@stx)) aX14d5@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX14d3@t)))))))))))))))) (let ((aX14d7@t aX14af@cls)) (let ((aX14d9@ls/false (aXd7c@syntax-dispatch aX14d7@t '(#(scheme-id else) any . each-any)))) (if aX14d9@ls/false (apply (lambda (aX14db@e aX14dc@e*) (aXe5c@syntax-violation '#f '"incorrect position of keyword else" aX14a5@stx)) aX14d9@ls/false) (let ((aX14df@t aX14d7@t)) (let ((aX14e1@ls/false (aXd7c@syntax-dispatch aX14df@t '(any #(scheme-id =>) any)))) (if aX14e1@ls/false (apply (lambda (aX14e3@e aX14e4@p) (list 'let (list (list 't aX14e3@e)) (list 'if 't (cons aX14e4@p '(t)) (aX14b3@f (car aX14b0@cls*) (cdr aX14b0@cls*))))) aX14e1@ls/false) (let ((aX14e7@t aX14df@t)) (let ((aX14e9@ls/false (aXd7c@syntax-dispatch aX14e7@t '(any)))) (if aX14e9@ls/false (apply (lambda (aX14eb@e) (list 'or aX14eb@e (aX14b3@f (car aX14b0@cls*) (cdr aX14b0@cls*)))) aX14e9@ls/false) (let ((aX14ed@t aX14e7@t)) (let ((aX14ef@ls/false (aXd7c@syntax-dispatch aX14ed@t '(any . each-any)))) (if aX14ef@ls/false (apply (lambda (aX14f1@e aX14f2@e*) (list 'if aX14f1@e (cons 'begin aX14f2@e*) (aX14b3@f (car aX14b0@cls*) (cdr aX14b0@cls*)))) aX14ef@ls/false) (let ((aX14f5@t aX14ed@t)) (let ((aX14f7@ls/false (aXd7c@syntax-dispatch aX14f5@t '_))) (if aX14f7@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid last clause" aX14a5@stx)) aX14f7@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX14f5@t)))))))))))))))))))) aX14a9@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX14a7@t)))))) (set! aX2844@aXd60@cond-macro aXd60@cond-macro) (set! aXd62@do-include (lambda (aX14f9@stx aX14fa@id aX14fb@filename) (let ((aX14ff@filename (aXb89@stx->datum aX14fb@filename))) (begin (if (not (and (string? aX14ff@filename) (aXb75@id? aX14fa@id))) (aXe5c@syntax-violation '#f '"invalid syntax" aX14f9@stx) (void)) (cons (aXd32@bless 'begin) (with-input-from-file aX14ff@filename (lambda () (let aX1503@f ((aX1501@ls '())) (let ((aX1505@x (aX6b1@aX581@read-annotated))) (if (eof-object? aX1505@x) (reverse aX1501@ls) (aX1503@f (cons (aXb55@datum->stx aX14fa@id aX1505@x) aX1501@ls)))))))))))) (set! aX2845@aXd62@do-include aXd62@do-include) (set! aXd64@include-macro (lambda (aX1507@e) (let ((aX1509@t aX1507@e)) (let ((aX150b@ls/false (aXd7c@syntax-dispatch aX1509@t '(any any)))) (if aX150b@ls/false (apply (lambda (aX150d@id aX150e@filename) (aXd62@do-include aX1507@e aX150d@id aX150e@filename)) aX150b@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1509@t)))))) (set! aX2846@aXd64@include-macro aXd64@include-macro) (set! aXd66@include-into-macro (lambda (aX1511@e) (let ((aX1513@t aX1511@e)) (let ((aX1515@ls/false (aXd7c@syntax-dispatch aX1513@t '(_ any any)))) (if aX1515@ls/false (apply (lambda (aX1517@id aX1518@filename) (aXd62@do-include aX1511@e aX1517@id aX1518@filename)) aX1515@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1513@t)))))) (set! aX2847@aXd66@include-into-macro aXd66@include-into-macro) (set! aXd68@syntax-rules-macro (lambda (aX151b@e) (let ((aX151d@t aX151b@e)) (let ((aX151f@ls/false (aXd7c@syntax-dispatch aX151d@t '(_ each-any . #(each (any any)))))) (if aX151f@ls/false (apply (lambda (aX1521@lits aX1522@pat* aX1523@tmp*) (begin (aXd82@verify-literals aX1521@lits aX151b@e) (aXd32@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons aX1521@lits (map (lambda (aX1527@pat aX1528@tmp) (let ((aX152b@t aX1527@pat)) (let ((aX152d@ls/false (aXd7c@syntax-dispatch aX152b@t '(_ . any)))) (if aX152d@ls/false (apply (lambda (aX152f@rest) (list (cons 'g aX152f@rest) (list 'syntax aX1528@tmp))) aX152d@ls/false) (let ((aX1531@t aX152b@t)) (let ((aX1533@ls/false (aXd7c@syntax-dispatch aX1531@t '_))) (if aX1533@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid syntax-rules pattern" aX151b@e aX1527@pat)) aX1533@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1531@t)))))))) aX1522@pat* aX1523@tmp*)))))))) aX151f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX151d@t)))))) (set! aX2848@aXd68@syntax-rules-macro aXd68@syntax-rules-macro) (set! aXd6a@quasiquote-macro (let ((aX1536@datum '#f) (aX1552@quasicons* '#f) (aX1554@quasicons '#f) (aX1556@quasiappend '#f) (aX1558@quasivector '#f) (aX155a@vquasi '#f) (aX155c@quasi '#f)) (begin (set! aX1536@datum (lambda (aX1637@x) (list (aXd04@scheme-stx 'quote) (aXb5d@mkstx aX1637@x '() '() '())))) (set! aX1552@quasicons* (lambda (aX162f@x aX1630@y) (let aX1635@f ((aX1633@x aX162f@x)) (if (null? aX1633@x) aX1630@y (aX1554@quasicons (car aX1633@x) (aX1635@f (cdr aX1633@x))))))) (set! aX1554@quasicons (lambda (aX1609@x aX160a@y) (let ((aX160d@t aX160a@y)) (let ((aX160f@ls/false (aXd7c@syntax-dispatch aX160d@t '(#(scheme-id quote) any)))) (if aX160f@ls/false (apply (lambda (aX1611@dy) (let ((aX1613@t aX1609@x)) (let ((aX1615@ls/false (aXd7c@syntax-dispatch aX1613@t '(#(scheme-id quote) any)))) (if aX1615@ls/false (apply (lambda (aX1617@dx) (list (aXd04@scheme-stx 'quote) (cons aX1617@dx aX1611@dy))) aX1615@ls/false) (let ((aX1619@t aX1613@t)) (let ((aX161b@ls/false (aXd7c@syntax-dispatch aX1619@t '_))) (if aX161b@ls/false (apply (lambda () (let ((aX161d@t aX1611@dy)) (let ((aX161f@ls/false (aXd7c@syntax-dispatch aX161d@t '()))) (if aX161f@ls/false (apply (lambda () (list (aXd04@scheme-stx 'list) aX1609@x)) aX161f@ls/false) (let ((aX1621@t aX161d@t)) (let ((aX1623@ls/false (aXd7c@syntax-dispatch aX1621@t '_))) (if aX1623@ls/false (apply (lambda () (list (aXd04@scheme-stx 'cons) aX1609@x aX160a@y)) aX1623@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1621@t)))))))) aX161b@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1619@t)))))))) aX160f@ls/false) (let ((aX1625@t aX160d@t)) (let ((aX1627@ls/false (aXd7c@syntax-dispatch aX1625@t '(#(scheme-id list) . each-any)))) (if aX1627@ls/false (apply (lambda (aX1629@stuff) (cons* (aXd04@scheme-stx 'list) aX1609@x aX1629@stuff)) aX1627@ls/false) (let ((aX162b@t aX1625@t)) (let ((aX162d@ls/false (aXd7c@syntax-dispatch aX162b@t '_))) (if aX162d@ls/false (apply (lambda () (list (aXd04@scheme-stx 'cons) aX1609@x aX160a@y)) aX162d@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX162b@t)))))))))))) (set! aX1556@quasiappend (lambda (aX15ef@x aX15f0@y) (let ((aX15f3@ls (let aX15f7@f ((aX15f5@x aX15ef@x)) (if (null? aX15f5@x) (let ((aX15f9@t aX15f0@y)) (let ((aX15fb@ls/false (aXd7c@syntax-dispatch aX15f9@t '(#(scheme-id quote) ())))) (if aX15fb@ls/false (apply (lambda () '()) aX15fb@ls/false) (let ((aX15fd@t aX15f9@t)) (let ((aX15ff@ls/false (aXd7c@syntax-dispatch aX15fd@t '_))) (if aX15ff@ls/false (apply (lambda () (list aX15f0@y)) aX15ff@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX15fd@t))))))) (let ((aX1601@t (car aX15f5@x))) (let ((aX1603@ls/false (aXd7c@syntax-dispatch aX1601@t '(#(scheme-id quote) ())))) (if aX1603@ls/false (apply (lambda () (aX15f7@f (cdr aX15f5@x))) aX1603@ls/false) (let ((aX1605@t aX1601@t)) (let ((aX1607@ls/false (aXd7c@syntax-dispatch aX1605@t '_))) (if aX1607@ls/false (apply (lambda () (cons (car aX15f5@x) (aX15f7@f (cdr aX15f5@x)))) aX1607@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1605@t))))))))))) (if (null? aX15f3@ls) (list (aXd04@scheme-stx 'quote) '()) (if (null? (cdr aX15f3@ls)) (car aX15f3@ls) (cons* (aXd04@scheme-stx 'append) aX15f3@ls)))))) (set! aX1558@quasivector (lambda (aX15bd@x) (let ((aX15bf@pat-x aX15bd@x)) (let ((aX15c1@t aX15bf@pat-x)) (let ((aX15c3@ls/false (aXd7c@syntax-dispatch aX15c1@t '(#(scheme-id quote) each-any)))) (if aX15c3@ls/false (apply (lambda (aX15c5@x*) (list (aXd04@scheme-stx 'quote) (list->vector aX15c5@x*))) aX15c3@ls/false) (let ((aX15c7@t aX15c1@t)) (let ((aX15c9@ls/false (aXd7c@syntax-dispatch aX15c7@t '_))) (if aX15c9@ls/false (apply (lambda () (let aX15d1@f ((aX15cb@x aX15bd@x) (aX15cc@k (lambda (aX15cf@ls) (cons* (aXd04@scheme-stx 'vector) aX15cf@ls)))) (let ((aX15d3@t aX15cb@x)) (let ((aX15d5@ls/false (aXd7c@syntax-dispatch aX15d3@t '(#(scheme-id quote) each-any)))) (if aX15d5@ls/false (apply (lambda (aX15d7@x*) (aX15cc@k (map (lambda (aX15d9@x) (list (aXd04@scheme-stx 'quote) aX15d9@x)) aX15d7@x*))) aX15d5@ls/false) (let ((aX15db@t aX15d3@t)) (let ((aX15dd@ls/false (aXd7c@syntax-dispatch aX15db@t '(#(scheme-id list) . each-any)))) (if aX15dd@ls/false (apply (lambda (aX15df@x*) (aX15cc@k aX15df@x*)) aX15dd@ls/false) (let ((aX15e1@t aX15db@t)) (let ((aX15e3@ls/false (aXd7c@syntax-dispatch aX15e1@t '(#(scheme-id cons) any any)))) (if aX15e3@ls/false (apply (lambda (aX15e5@x aX15e6@y) (aX15d1@f aX15e6@y (lambda (aX15e9@ls) (aX15cc@k (cons aX15e5@x aX15e9@ls))))) aX15e3@ls/false) (let ((aX15eb@t aX15e1@t)) (let ((aX15ed@ls/false (aXd7c@syntax-dispatch aX15eb@t '_))) (if aX15ed@ls/false (apply (lambda () (list (aXd04@scheme-stx 'list->vector) aX15bf@pat-x)) aX15ed@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX15eb@t))))))))))))))) aX15c9@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX15c7@t)))))))))) (set! aX155a@vquasi (lambda (aX159b@p aX159c@lev) (let ((aX159f@t aX159b@p)) (let ((aX15a1@ls/false (aXd7c@syntax-dispatch aX159f@t '(any . any)))) (if aX15a1@ls/false (apply (lambda (aX15a3@p aX15a4@q) (let ((aX15a7@t aX15a3@p)) (let ((aX15a9@ls/false (aXd7c@syntax-dispatch aX15a7@t '(#(scheme-id unquote) . each-any)))) (if aX15a9@ls/false (apply (lambda (aX15ab@p) (if (= aX159c@lev '0) (aX1552@quasicons* aX15ab@p (aX155a@vquasi aX15a4@q aX159c@lev)) (aX1554@quasicons (aX1554@quasicons (aX1536@datum 'unquote) (aX155c@quasi aX15ab@p (- aX159c@lev '1))) (aX155a@vquasi aX15a4@q aX159c@lev)))) aX15a9@ls/false) (let ((aX15ad@t aX15a7@t)) (let ((aX15af@ls/false (aXd7c@syntax-dispatch aX15ad@t '(#(scheme-id unquote-splicing) . each-any)))) (if aX15af@ls/false (apply (lambda (aX15b1@p) (if (= aX159c@lev '0) (aX1556@quasiappend aX15b1@p (aX155a@vquasi aX15a4@q aX159c@lev)) (aX1554@quasicons (aX1554@quasicons (aX1536@datum 'unquote-splicing) (aX155c@quasi aX15b1@p (- aX159c@lev '1))) (aX155a@vquasi aX15a4@q aX159c@lev)))) aX15af@ls/false) (let ((aX15b3@t aX15ad@t)) (let ((aX15b5@ls/false (aXd7c@syntax-dispatch aX15b3@t 'any))) (if aX15b5@ls/false (apply (lambda (aX15b7@p) (aX1554@quasicons (aX155c@quasi aX15b7@p aX159c@lev) (aX155a@vquasi aX15a4@q aX159c@lev))) aX15b5@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX15b3@t))))))))))) aX15a1@ls/false) (let ((aX15b9@t aX159f@t)) (let ((aX15bb@ls/false (aXd7c@syntax-dispatch aX15b9@t '()))) (if aX15bb@ls/false (apply (lambda () (list (aXd04@scheme-stx 'quote) '())) aX15bb@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX15b9@t))))))))) (set! aX155c@quasi (lambda (aX1565@p aX1566@lev) (let ((aX1569@t aX1565@p)) (let ((aX156b@ls/false (aXd7c@syntax-dispatch aX1569@t '(#(scheme-id unquote) any)))) (if aX156b@ls/false (apply (lambda (aX156d@p) (if (= aX1566@lev '0) aX156d@p (aX1554@quasicons (aX1536@datum 'unquote) (aX155c@quasi (list aX156d@p) (- aX1566@lev '1))))) aX156b@ls/false) (let ((aX156f@t aX1569@t)) (let ((aX1571@ls/false (aXd7c@syntax-dispatch aX156f@t '((#(scheme-id unquote) . each-any) . any)))) (if aX1571@ls/false (apply (lambda (aX1573@p aX1574@q) (if (= aX1566@lev '0) (aX1552@quasicons* aX1573@p (aX155c@quasi aX1574@q aX1566@lev)) (aX1554@quasicons (aX1554@quasicons (aX1536@datum 'unquote) (aX155c@quasi aX1573@p (- aX1566@lev '1))) (aX155c@quasi aX1574@q aX1566@lev)))) aX1571@ls/false) (let ((aX1577@t aX156f@t)) (let ((aX1579@ls/false (aXd7c@syntax-dispatch aX1577@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if aX1579@ls/false (apply (lambda (aX157b@p aX157c@q) (if (= aX1566@lev '0) (aX1556@quasiappend aX157b@p (aX155c@quasi aX157c@q aX1566@lev)) (aX1554@quasicons (aX1554@quasicons (aX1536@datum 'unquote-splicing) (aX155c@quasi aX157b@p (- aX1566@lev '1))) (aX155c@quasi aX157c@q aX1566@lev)))) aX1579@ls/false) (let ((aX157f@t aX1577@t)) (let ((aX1581@ls/false (aXd7c@syntax-dispatch aX157f@t '(#(scheme-id quasiquote) any)))) (if aX1581@ls/false (apply (lambda (aX1583@p) (aX1554@quasicons (aX1536@datum 'quasiquote) (aX155c@quasi (list aX1583@p) (+ aX1566@lev '1)))) aX1581@ls/false) (let ((aX1585@t aX157f@t)) (let ((aX1587@ls/false (aXd7c@syntax-dispatch aX1585@t '(any . any)))) (if aX1587@ls/false (apply (lambda (aX1589@p aX158a@q) (aX1554@quasicons (aX155c@quasi aX1589@p aX1566@lev) (aX155c@quasi aX158a@q aX1566@lev))) aX1587@ls/false) (let ((aX158d@t aX1585@t)) (let ((aX158f@ls/false (aXd7c@syntax-dispatch aX158d@t '#(vector each-any)))) (if (and aX158f@ls/false (apply (lambda (aX1591@x) (not (aXb41@stx? aX1591@x))) aX158f@ls/false)) (apply (lambda (aX1593@x) (aX1558@quasivector (aX155a@vquasi aX1593@x aX1566@lev))) aX158f@ls/false) (let ((aX1595@t aX158d@t)) (let ((aX1597@ls/false (aXd7c@syntax-dispatch aX1595@t 'any))) (if aX1597@ls/false (apply (lambda (aX1599@p) (list (aXd04@scheme-stx 'quote) aX1599@p)) aX1597@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1595@t)))))))))))))))))))))))) (lambda (aX155d@x) (let ((aX155f@t aX155d@x)) (let ((aX1561@ls/false (aXd7c@syntax-dispatch aX155f@t '(_ any)))) (if aX1561@ls/false (apply (lambda (aX1563@e) (aX155c@quasi aX1563@e '0)) aX1561@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX155f@t)))))))) (set! aX2849@aXd6a@quasiquote-macro aXd6a@quasiquote-macro) (set! aXd6c@quasisyntax-macro (let ((aX163a@quasi '#f)) (begin (set! aX163a@quasi (lambda (aX1655@p aX1656@lev) (let ((aX1659@t aX1655@p)) (let ((aX165b@ls/false (aXd7c@syntax-dispatch aX1659@t '(#(scheme-id unsyntax) any)))) (if aX165b@ls/false (apply (lambda (aX165d@p) (if (= aX1656@lev '0) (let ((aX165f@g (gensym))) (values (list aX165f@g) (list aX165d@p) aX165f@g)) (call-with-values (lambda () (aX163a@quasi aX165d@p (- aX1656@lev '1))) (lambda (aX1667@aX1662 aX1668@aX1664 aX1669@aX1666) (let ((aX166d@p aX1669@aX1666) (aX166e@rhs* aX1668@aX1664) (aX166f@lhs* aX1667@aX1662)) (values aX166f@lhs* aX166e@rhs* (list 'unsyntax aX166d@p))))))) aX165b@ls/false) (let ((aX1673@t aX1659@t)) (let ((aX1675@ls/false (aXd7c@syntax-dispatch aX1673@t '#(scheme-id unsyntax)))) (if (and aX1675@ls/false (apply (lambda () (= aX1656@lev '0)) aX1675@ls/false)) (apply (lambda () (aXe5c@syntax-violation '#f '"incorrect use of unsyntax" aX1655@p)) aX1675@ls/false) (let ((aX1677@t aX1673@t)) (let ((aX1679@ls/false (aXd7c@syntax-dispatch aX1677@t '((#(scheme-id unsyntax) . each-any) . any)))) (if aX1679@ls/false (apply (lambda (aX167b@p* aX167c@q) (call-with-values (lambda () (aX163a@quasi aX167c@q aX1656@lev)) (lambda (aX1685@aX1680 aX1686@aX1682 aX1687@aX1684) (let ((aX168b@q aX1687@aX1684) (aX168c@rhs* aX1686@aX1682) (aX168d@lhs* aX1685@aX1680)) (if (= aX1656@lev '0) (let ((aX1691@g* (map (lambda (aX1693@x) (gensym)) aX167b@p*))) (values (append aX1691@g* aX168d@lhs*) (append aX167b@p* aX168c@rhs*) (append aX1691@g* aX168b@q))) (call-with-values (lambda () (aX163a@quasi aX167b@p* (- aX1656@lev '1))) (lambda (aX169b@aX1696 aX169c@aX1698 aX169d@aX169a) (let ((aX16a1@p* aX169d@aX169a) (aX16a2@rhs2* aX169c@aX1698) (aX16a3@lhs2* aX169b@aX1696)) (values (append aX16a3@lhs2* aX168d@lhs*) (append aX16a2@rhs2* aX168c@rhs*) (cons (cons 'unsyntax aX16a1@p*) aX168b@q)))))))))) aX1679@ls/false) (let ((aX16a7@t aX1677@t)) (let ((aX16a9@ls/false (aXd7c@syntax-dispatch aX16a7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if aX16a9@ls/false (apply (lambda (aX16ab@p* aX16ac@q) (call-with-values (lambda () (aX163a@quasi aX16ac@q aX1656@lev)) (lambda (aX16b5@aX16b0 aX16b6@aX16b2 aX16b7@aX16b4) (let ((aX16bb@q aX16b7@aX16b4) (aX16bc@rhs* aX16b6@aX16b2) (aX16bd@lhs* aX16b5@aX16b0)) (if (= aX1656@lev '0) (let ((aX16c1@g* (map (lambda (aX16c3@x) (gensym)) aX16ab@p*))) (values (append (map (lambda (aX16c5@g) (cons aX16c5@g '(...))) aX16c1@g*) aX16bd@lhs*) (append aX16ab@p* aX16bc@rhs*) (append (apply append (map (lambda (aX16c7@g) (cons aX16c7@g '(...))) aX16c1@g*)) aX16bb@q))) (call-with-values (lambda () (aX163a@quasi aX16ab@p* (- aX1656@lev '1))) (lambda (aX16cf@aX16ca aX16d0@aX16cc aX16d1@aX16ce) (let ((aX16d5@p* aX16d1@aX16ce) (aX16d6@rhs2* aX16d0@aX16cc) (aX16d7@lhs2* aX16cf@aX16ca)) (values (append aX16d7@lhs2* aX16bd@lhs*) (append aX16d6@rhs2* aX16bc@rhs*) (cons (cons 'unsyntax-splicing aX16d5@p*) aX16bb@q)))))))))) aX16a9@ls/false) (let ((aX16db@t aX16a7@t)) (let ((aX16dd@ls/false (aXd7c@syntax-dispatch aX16db@t '#(scheme-id unsyntax-splicing)))) (if (and aX16dd@ls/false (apply (lambda () (= aX1656@lev '0)) aX16dd@ls/false)) (apply (lambda () (aXe5c@syntax-violation '#f '"incorrect use of unsyntax-splicing" aX1655@p)) aX16dd@ls/false) (let ((aX16df@t aX16db@t)) (let ((aX16e1@ls/false (aXd7c@syntax-dispatch aX16df@t '(#(scheme-id quasisyntax) any)))) (if aX16e1@ls/false (apply (lambda (aX16e3@p) (call-with-values (lambda () (aX163a@quasi aX16e3@p (+ aX1656@lev '1))) (lambda (aX16eb@aX16e6 aX16ec@aX16e8 aX16ed@aX16ea) (let ((aX16f1@p aX16ed@aX16ea) (aX16f2@rhs* aX16ec@aX16e8) (aX16f3@lhs* aX16eb@aX16e6)) (values aX16f3@lhs* aX16f2@rhs* (list 'quasisyntax aX16f1@p)))))) aX16e1@ls/false) (let ((aX16f7@t aX16df@t)) (let ((aX16f9@ls/false (aXd7c@syntax-dispatch aX16f7@t '(any . any)))) (if aX16f9@ls/false (apply (lambda (aX16fb@p aX16fc@q) (call-with-values (lambda () (aX163a@quasi aX16fb@p aX1656@lev)) (lambda (aX170b@aX1700 aX170c@aX1702 aX170d@aX1704) (call-with-values (lambda () (aX163a@quasi aX16fc@q aX1656@lev)) (lambda (aX1711@aX1706 aX1712@aX1708 aX1713@aX170a) (let ((aX1717@q aX1713@aX170a) (aX1718@rhs2* aX1712@aX1708) (aX1719@lhs2* aX1711@aX1706) (aX171a@p aX170d@aX1704) (aX171b@rhs* aX170c@aX1702) (aX171c@lhs* aX170b@aX1700)) (values (append aX1719@lhs2* aX171c@lhs*) (append aX1718@rhs2* aX171b@rhs*) (cons aX171a@p aX1717@q)))))))) aX16f9@ls/false) (let ((aX1723@t aX16f7@t)) (let ((aX1725@ls/false (aXd7c@syntax-dispatch aX1723@t '#(vector each-any)))) (if aX1725@ls/false (apply (lambda (aX1727@x*) (call-with-values (lambda () (aX163a@quasi aX1727@x* aX1656@lev)) (lambda (aX172f@aX172a aX1730@aX172c aX1731@aX172e) (let ((aX1735@x* aX1731@aX172e) (aX1736@rhs* aX1730@aX172c) (aX1737@lhs* aX172f@aX172a)) (values aX1737@lhs* aX1736@rhs* (list->vector aX1735@x*)))))) aX1725@ls/false) (let ((aX173b@t aX1723@t)) (let ((aX173d@ls/false (aXd7c@syntax-dispatch aX173b@t '_))) (if aX173d@ls/false (apply (lambda () (values '() '() aX1655@p)) aX173d@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX173b@t)))))))))))))))))))))))))))))) (lambda (aX163b@x) (let ((aX163d@t aX163b@x)) (let ((aX163f@ls/false (aXd7c@syntax-dispatch aX163d@t '(_ any)))) (if aX163f@ls/false (apply (lambda (aX1641@e) (call-with-values (lambda () (aX163a@quasi aX1641@e '0)) (lambda (aX1649@aX1644 aX164a@aX1646 aX164b@aX1648) (let ((aX164f@v aX164b@aX1648) (aX1650@rhs* aX164a@aX1646) (aX1651@lhs* aX1649@aX1644)) (aXd32@bless (list 'syntax-case (cons 'list aX1650@rhs*) '() (list aX1651@lhs* (list 'syntax aX164f@v)))))))) aX163f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX163d@t)))))))) (set! aX284a@aXd6c@quasisyntax-macro aXd6c@quasisyntax-macro) (set! aXd6e@define-struct-macro (lambda (aX173f@stx) (aXe5c@syntax-violation '#f '"define-struct not supported" aX173f@stx))) (set! aX284b@aXd6e@define-struct-macro aXd6e@define-struct-macro) (set! aXd70@define-record-type-macro (lambda (aX1741@x) (let ((aX1744@id '#f) (aX1746@get-record-name '#f) (aX1748@get-record-constructor-name '#f) (aX174a@get-record-predicate-name '#f) (aX174c@get-clause '#f) (aX174e@foo-rtd-code '#f) (aX1750@parent-rtd-code '#f) (aX1752@parent-rcd-code '#f) (aX1754@foo-rcd-code '#f) (aX1756@get-protocol-code '#f) (aX1758@get-fields '#f) (aX175a@get-mutator-indices '#f) (aX175c@get-mutators '#f) (aX175e@get-accessors '#f) (aX1760@enumerate '#f) (aX1762@do-define-record '#f) (aX1764@verify-clauses '#f)) (begin (set! aX1744@id (lambda (aX1937@ctxt . aX1939@str*) (aXe60@datum->syntax aX1937@ctxt (string->symbol (apply string-append (map (lambda (aX193b@x) (if (symbol? aX193b@x) (symbol->string aX193b@x) (if (string? aX193b@x) aX193b@x (assertion-violation 'define-record-type '"BUG")))) aX1939@str*)))))) (set! aX1746@get-record-name (lambda (aX1925@spec) (let ((aX1927@t aX1925@spec)) (let ((aX1929@ls/false (aXd7c@syntax-dispatch aX1927@t '(any any any)))) (if aX1929@ls/false (apply (lambda (aX192b@foo aX192c@make-foo aX192d@foo?) aX192b@foo) aX1929@ls/false) (let ((aX1931@t aX1927@t)) (let ((aX1933@ls/false (aXd7c@syntax-dispatch aX1931@t 'any))) (if aX1933@ls/false (apply (lambda (aX1935@foo) aX1935@foo) aX1933@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1931@t))))))))) (set! aX1748@get-record-constructor-name (lambda (aX1911@spec) (let ((aX1913@t aX1911@spec)) (let ((aX1915@ls/false (aXd7c@syntax-dispatch aX1913@t '(any any any)))) (if aX1915@ls/false (apply (lambda (aX1917@foo aX1918@make-foo aX1919@foo?) aX1918@make-foo) aX1915@ls/false) (let ((aX191d@t aX1913@t)) (let ((aX191f@ls/false (aXd7c@syntax-dispatch aX191d@t 'any))) (if (and aX191f@ls/false (apply (lambda (aX1921@foo) (aXb75@id? aX1921@foo)) aX191f@ls/false)) (apply (lambda (aX1923@foo) (aX1744@id aX1923@foo '"make-" (aXb89@stx->datum aX1923@foo))) aX191f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX191d@t))))))))) (set! aX174a@get-record-predicate-name (lambda (aX18fd@spec) (let ((aX18ff@t aX18fd@spec)) (let ((aX1901@ls/false (aXd7c@syntax-dispatch aX18ff@t '(any any any)))) (if aX1901@ls/false (apply (lambda (aX1903@foo aX1904@make-foo aX1905@foo?) aX1905@foo?) aX1901@ls/false) (let ((aX1909@t aX18ff@t)) (let ((aX190b@ls/false (aXd7c@syntax-dispatch aX1909@t 'any))) (if (and aX190b@ls/false (apply (lambda (aX190d@foo) (aXb75@id? aX190d@foo)) aX190b@ls/false)) (apply (lambda (aX190f@foo) (aX1744@id aX190f@foo (aXb89@stx->datum aX190f@foo) '"?")) aX190b@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1909@t))))))))) (set! aX174c@get-clause (lambda (aX18eb@id aX18ec@ls) (let ((aX18ef@t aX18ec@ls)) (let ((aX18f1@ls/false (aXd7c@syntax-dispatch aX18ef@t '()))) (if aX18f1@ls/false (apply (lambda () '#f) aX18f1@ls/false) (let ((aX18f3@t aX18ef@t)) (let ((aX18f5@ls/false (aXd7c@syntax-dispatch aX18f3@t '((any . any) . any)))) (if aX18f5@ls/false (apply (lambda (aX18f7@x aX18f8@rest aX18f9@ls) (if (aXb7b@free-id=? (aXd32@bless aX18eb@id) aX18f7@x) (cons aX18f7@x aX18f8@rest) (aX174c@get-clause aX18eb@id aX18f9@ls))) aX18f5@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX18f3@t))))))))) (set! aX174e@foo-rtd-code (lambda (aX1899@name aX189a@clause* aX189b@parent-rtd-code) (let ((aX18a0@convert-field-spec* '#f)) (begin (set! aX18a0@convert-field-spec* (lambda (aX18d1@ls) (list->vector (map (lambda (aX18d3@x) (let ((aX18d5@t aX18d3@x)) (let ((aX18d7@ls/false (aXd7c@syntax-dispatch aX18d5@t '(#(scheme-id mutable) any . any)))) (if aX18d7@ls/false (apply (lambda (aX18d9@name aX18da@rest) (list 'mutable aX18d9@name)) aX18d7@ls/false) (let ((aX18dd@t aX18d5@t)) (let ((aX18df@ls/false (aXd7c@syntax-dispatch aX18dd@t '(#(scheme-id immutable) any . any)))) (if aX18df@ls/false (apply (lambda (aX18e1@name aX18e2@rest) (list 'immutable aX18e1@name)) aX18df@ls/false) (let ((aX18e5@t aX18dd@t)) (let ((aX18e7@ls/false (aXd7c@syntax-dispatch aX18e5@t 'any))) (if aX18e7@ls/false (apply (lambda (aX18e9@name) (list 'immutable aX18e9@name)) aX18e7@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX18e5@t))))))))))) aX18d1@ls)))) (let ((aX18a1@uid-code (let ((aX18a9@t (aX174c@get-clause 'nongenerative aX189a@clause*))) (let ((aX18ab@ls/false (aXd7c@syntax-dispatch aX18a9@t '(_)))) (if aX18ab@ls/false (apply (lambda () (list 'quote (gensym))) aX18ab@ls/false) (let ((aX18ad@t aX18a9@t)) (let ((aX18af@ls/false (aXd7c@syntax-dispatch aX18ad@t '(_ any)))) (if aX18af@ls/false (apply (lambda (aX18b1@uid) (list 'quote aX18b1@uid)) aX18af@ls/false) (let ((aX18b3@t aX18ad@t)) (let ((aX18b5@ls/false (aXd7c@syntax-dispatch aX18b3@t '_))) (if aX18b5@ls/false (apply (lambda () '#f) aX18b5@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX18b3@t))))))))))) (aX18a2@sealed? (let ((aX18b7@t (aX174c@get-clause 'sealed aX189a@clause*))) (let ((aX18b9@ls/false (aXd7c@syntax-dispatch aX18b7@t '(_ #(atom #t))))) (if aX18b9@ls/false (apply (lambda () '#t) aX18b9@ls/false) (let ((aX18bb@t aX18b7@t)) (let ((aX18bd@ls/false (aXd7c@syntax-dispatch aX18bb@t '_))) (if aX18bd@ls/false (apply (lambda () '#f) aX18bd@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX18bb@t)))))))) (aX18a3@opaque? (let ((aX18bf@t (aX174c@get-clause 'opaque aX189a@clause*))) (let ((aX18c1@ls/false (aXd7c@syntax-dispatch aX18bf@t '(_ #(atom #t))))) (if aX18c1@ls/false (apply (lambda () '#t) aX18c1@ls/false) (let ((aX18c3@t aX18bf@t)) (let ((aX18c5@ls/false (aXd7c@syntax-dispatch aX18c3@t '_))) (if aX18c5@ls/false (apply (lambda () '#f) aX18c5@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX18c3@t)))))))) (aX18a4@fields (let ((aX18c7@t (aX174c@get-clause 'fields aX189a@clause*))) (let ((aX18c9@ls/false (aXd7c@syntax-dispatch aX18c7@t '(_ . each-any)))) (if aX18c9@ls/false (apply (lambda (aX18cb@field-spec*) (list 'quote (aX18a0@convert-field-spec* aX18cb@field-spec*))) aX18c9@ls/false) (let ((aX18cd@t aX18c7@t)) (let ((aX18cf@ls/false (aXd7c@syntax-dispatch aX18cd@t '_))) (if aX18cf@ls/false (apply (lambda () ''#()) aX18cf@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX18cd@t))))))))) (aXd32@bless (list 'make-record-type-descriptor (list 'quote aX1899@name) aX189b@parent-rtd-code aX18a1@uid-code aX18a2@sealed? aX18a3@opaque? aX18a4@fields))))))) (set! aX1750@parent-rtd-code (lambda (aX1881@clause*) (let ((aX1883@t (aX174c@get-clause 'parent aX1881@clause*))) (let ((aX1885@ls/false (aXd7c@syntax-dispatch aX1883@t '(_ any)))) (if aX1885@ls/false (apply (lambda (aX1887@name) (list 'record-type-descriptor aX1887@name)) aX1885@ls/false) (let ((aX1889@t aX1883@t)) (let ((aX188b@ls/false (aXd7c@syntax-dispatch aX1889@t '#(atom #f)))) (if aX188b@ls/false (apply (lambda () (let ((aX188d@t (aX174c@get-clause 'parent-rtd aX1881@clause*))) (let ((aX188f@ls/false (aXd7c@syntax-dispatch aX188d@t '(_ any any)))) (if aX188f@ls/false (apply (lambda (aX1891@rtd aX1892@rcd) aX1891@rtd) aX188f@ls/false) (let ((aX1895@t aX188d@t)) (let ((aX1897@ls/false (aXd7c@syntax-dispatch aX1895@t '#(atom #f)))) (if aX1897@ls/false (apply (lambda () '#f) aX1897@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1895@t)))))))) aX188b@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1889@t))))))))) (set! aX1752@parent-rcd-code (lambda (aX1869@clause*) (let ((aX186b@t (aX174c@get-clause 'parent aX1869@clause*))) (let ((aX186d@ls/false (aXd7c@syntax-dispatch aX186b@t '(_ any)))) (if aX186d@ls/false (apply (lambda (aX186f@name) (list 'record-constructor-descriptor aX186f@name)) aX186d@ls/false) (let ((aX1871@t aX186b@t)) (let ((aX1873@ls/false (aXd7c@syntax-dispatch aX1871@t '#(atom #f)))) (if aX1873@ls/false (apply (lambda () (let ((aX1875@t (aX174c@get-clause 'parent-rtd aX1869@clause*))) (let ((aX1877@ls/false (aXd7c@syntax-dispatch aX1875@t '(_ any any)))) (if aX1877@ls/false (apply (lambda (aX1879@rtd aX187a@rcd) aX187a@rcd) aX1877@ls/false) (let ((aX187d@t aX1875@t)) (let ((aX187f@ls/false (aXd7c@syntax-dispatch aX187d@t '#(atom #f)))) (if aX187f@ls/false (apply (lambda () '#f) aX187f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX187d@t)))))))) aX1873@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1871@t))))))))) (set! aX1754@foo-rcd-code (lambda (aX1861@clause* aX1862@foo-rtd aX1863@protocol aX1864@parent-rcd-code) (list 'make-record-constructor-descriptor aX1862@foo-rtd aX1864@parent-rcd-code aX1863@protocol))) (set! aX1756@get-protocol-code (lambda (aX1855@clause*) (let ((aX1857@t (aX174c@get-clause 'protocol aX1855@clause*))) (let ((aX1859@ls/false (aXd7c@syntax-dispatch aX1857@t '(_ any)))) (if aX1859@ls/false (apply (lambda (aX185b@expr) aX185b@expr) aX1859@ls/false) (let ((aX185d@t aX1857@t)) (let ((aX185f@ls/false (aXd7c@syntax-dispatch aX185d@t '_))) (if aX185f@ls/false (apply (lambda () '#f) aX185f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX185d@t))))))))) (set! aX1758@get-fields (lambda (aX1843@clause*) (let ((aX1845@t aX1843@clause*)) (let ((aX1847@ls/false (aXd7c@syntax-dispatch aX1845@t '()))) (if aX1847@ls/false (apply (lambda () '()) aX1847@ls/false) (let ((aX1849@t aX1845@t)) (let ((aX184b@ls/false (aXd7c@syntax-dispatch aX1849@t '((#(scheme-id fields) . each-any) . _)))) (if aX184b@ls/false (apply (lambda (aX184d@f*) aX184d@f*) aX184b@ls/false) (let ((aX184f@t aX1849@t)) (let ((aX1851@ls/false (aXd7c@syntax-dispatch aX184f@t '(_ . any)))) (if aX1851@ls/false (apply (lambda (aX1853@rest) (aX1758@get-fields aX1853@rest)) aX1851@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX184f@t)))))))))))) (set! aX175a@get-mutator-indices (lambda (aX182b@fields) (let aX1831@f ((aX182d@fields aX182b@fields) (aX182e@i '0)) (let ((aX1833@t aX182d@fields)) (let ((aX1835@ls/false (aXd7c@syntax-dispatch aX1833@t '()))) (if aX1835@ls/false (apply (lambda () '()) aX1835@ls/false) (let ((aX1837@t aX1833@t)) (let ((aX1839@ls/false (aXd7c@syntax-dispatch aX1837@t '((#(scheme-id mutable) . _) . any)))) (if aX1839@ls/false (apply (lambda (aX183b@rest) (cons aX182e@i (aX1831@f aX183b@rest (+ aX182e@i '1)))) aX1839@ls/false) (let ((aX183d@t aX1837@t)) (let ((aX183f@ls/false (aXd7c@syntax-dispatch aX183d@t '(_ . any)))) (if aX183f@ls/false (apply (lambda (aX1841@rest) (aX1831@f aX1841@rest (+ aX182e@i '1))) aX183f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX183d@t))))))))))))) (set! aX175c@get-mutators (lambda (aX1801@foo aX1802@fields) (let ((aX1806@gen-name '#f)) (begin (set! aX1806@gen-name (lambda (aX1829@x) (aXe60@datum->syntax aX1801@foo (string->symbol (string-append (symbol->string (aXe62@syntax->datum aX1801@foo)) '"-" (symbol->string (aXe62@syntax->datum aX1829@x)) '"-set!"))))) (let aX1809@f ((aX1807@fields aX1802@fields)) (let ((aX180b@t aX1807@fields)) (let ((aX180d@ls/false (aXd7c@syntax-dispatch aX180b@t '()))) (if aX180d@ls/false (apply (lambda () '()) aX180d@ls/false) (let ((aX180f@t aX180b@t)) (let ((aX1811@ls/false (aXd7c@syntax-dispatch aX180f@t '((#(scheme-id mutable) any any any) . any)))) (if aX1811@ls/false (apply (lambda (aX1813@name aX1814@accessor aX1815@mutator aX1816@rest) (cons aX1815@mutator (aX1809@f aX1816@rest))) aX1811@ls/false) (let ((aX181b@t aX180f@t)) (let ((aX181d@ls/false (aXd7c@syntax-dispatch aX181b@t '((#(scheme-id mutable) any) . any)))) (if aX181d@ls/false (apply (lambda (aX181f@name aX1820@rest) (cons (aX1806@gen-name aX181f@name) (aX1809@f aX1820@rest))) aX181d@ls/false) (let ((aX1823@t aX181b@t)) (let ((aX1825@ls/false (aXd7c@syntax-dispatch aX1823@t '(_ . any)))) (if aX1825@ls/false (apply (lambda (aX1827@rest) (aX1809@f aX1827@rest)) aX1825@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1823@t)))))))))))))))))) (set! aX175e@get-accessors (lambda (aX17bd@foo aX17be@fields) (let ((aX17c2@gen-name '#f)) (begin (set! aX17c2@gen-name (lambda (aX17ff@x) (aXe60@datum->syntax aX17bd@foo (string->symbol (string-append (symbol->string (aXe62@syntax->datum aX17bd@foo)) '"-" (symbol->string (aXe62@syntax->datum aX17ff@x))))))) (map (lambda (aX17c3@field) (let ((aX17c5@t aX17c3@field)) (let ((aX17c7@ls/false (aXd7c@syntax-dispatch aX17c5@t '(#(scheme-id mutable) any any any)))) (if (and aX17c7@ls/false (apply (lambda (aX17c9@name aX17ca@accessor aX17cb@mutator) (aXb75@id? aX17ca@accessor)) aX17c7@ls/false)) (apply (lambda (aX17cf@name aX17d0@accessor aX17d1@mutator) aX17d0@accessor) aX17c7@ls/false) (let ((aX17d5@t aX17c5@t)) (let ((aX17d7@ls/false (aXd7c@syntax-dispatch aX17d5@t '(#(scheme-id immutable) any any)))) (if (and aX17d7@ls/false (apply (lambda (aX17d9@name aX17da@accessor) (aXb75@id? aX17da@accessor)) aX17d7@ls/false)) (apply (lambda (aX17dd@name aX17de@accessor) aX17de@accessor) aX17d7@ls/false) (let ((aX17e1@t aX17d5@t)) (let ((aX17e3@ls/false (aXd7c@syntax-dispatch aX17e1@t '(#(scheme-id mutable) any)))) (if (and aX17e3@ls/false (apply (lambda (aX17e5@name) (aXb75@id? aX17e5@name)) aX17e3@ls/false)) (apply (lambda (aX17e7@name) (aX17c2@gen-name aX17e7@name)) aX17e3@ls/false) (let ((aX17e9@t aX17e1@t)) (let ((aX17eb@ls/false (aXd7c@syntax-dispatch aX17e9@t '(#(scheme-id immutable) any)))) (if (and aX17eb@ls/false (apply (lambda (aX17ed@name) (aXb75@id? aX17ed@name)) aX17eb@ls/false)) (apply (lambda (aX17ef@name) (aX17c2@gen-name aX17ef@name)) aX17eb@ls/false) (let ((aX17f1@t aX17e9@t)) (let ((aX17f3@ls/false (aXd7c@syntax-dispatch aX17f1@t 'any))) (if (and aX17f3@ls/false (apply (lambda (aX17f5@name) (aXb75@id? aX17f5@name)) aX17f3@ls/false)) (apply (lambda (aX17f7@name) (aX17c2@gen-name aX17f7@name)) aX17f3@ls/false) (let ((aX17f9@t aX17f1@t)) (let ((aX17fb@ls/false (aXd7c@syntax-dispatch aX17f9@t 'any))) (if aX17fb@ls/false (apply (lambda (aX17fd@others) (aXe5c@syntax-violation '#f '"invalid field spec" aX17c3@field)) aX17fb@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX17f9@t)))))))))))))))))))) aX17be@fields))))) (set! aX1760@enumerate (lambda (aX17b5@ls) (let aX17bb@f ((aX17b7@ls aX17b5@ls) (aX17b8@i '0)) (if (null? aX17b7@ls) '() (cons aX17b8@i (aX17bb@f (cdr aX17b7@ls) (+ aX17b8@i '1))))))) (set! aX1762@do-define-record (lambda (aX178d@namespec aX178e@clause*) (let ((aX1791@foo (aX1746@get-record-name aX178d@namespec))) (let ((aX1793@foo-rtd (gensym))) (let ((aX1795@foo-rcd (gensym))) (let ((aX1797@protocol (gensym))) (let ((aX1799@make-foo (aX1748@get-record-constructor-name aX178d@namespec))) (let ((aX179b@fields (aX1758@get-fields aX178e@clause*))) (let ((aX179d@idx* (aX1760@enumerate aX179b@fields))) (let ((aX179f@foo-x* (aX175e@get-accessors aX1791@foo aX179b@fields))) (let ((aX17a1@set-foo-x!* (aX175c@get-mutators aX1791@foo aX179b@fields))) (let ((aX17a3@set-foo-idx* (aX175a@get-mutator-indices aX179b@fields))) (let ((aX17a5@foo? (aX174a@get-record-predicate-name aX178d@namespec))) (let ((aX17a7@foo-rtd-code (aX174e@foo-rtd-code aX1791@foo aX178e@clause* (aX1750@parent-rtd-code aX178e@clause*)))) (let ((aX17a9@foo-rcd-code (aX1754@foo-rcd-code aX178e@clause* aX1793@foo-rtd aX1797@protocol (aX1752@parent-rcd-code aX178e@clause*)))) (let ((aX17ab@protocol-code (aX1756@get-protocol-code aX178e@clause*))) (aXd32@bless (cons 'begin (cons (list 'define aX1793@foo-rtd aX17a7@foo-rtd-code) (cons (list 'define aX1797@protocol aX17ab@protocol-code) (cons (list 'define aX1795@foo-rcd aX17a9@foo-rcd-code) (cons (list 'define-syntax aX1791@foo (list 'list ''$rtd (list 'syntax aX1793@foo-rtd) (list 'syntax aX1795@foo-rcd))) (cons (list 'define aX17a5@foo? (list 'record-predicate aX1793@foo-rtd)) (cons (list 'define aX1799@make-foo (list 'record-constructor aX1795@foo-rcd)) (append (map (lambda (aX17ad@foo-x aX17ae@idx) (list 'define aX17ad@foo-x (list 'record-accessor aX1793@foo-rtd aX17ae@idx))) aX179f@foo-x* aX179d@idx*) (map (lambda (aX17b1@set-foo-x! aX17b2@idx) (list 'define aX17b1@set-foo-x! (list 'record-mutator aX1793@foo-rtd aX17b2@idx))) aX17a1@set-foo-x!* aX17a3@set-foo-idx*)))))))))))))))))))))))))) (set! aX1764@verify-clauses (lambda (aX176d@x aX176e@cls*) (let ((aX1772@valid-kwds '#f) (aX1774@free-id-member? '#f)) (begin (set! aX1772@valid-kwds (map aXd32@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! aX1774@free-id-member? (lambda (aX1789@x aX178a@ls) (and (pair? aX178a@ls) (or (aXb7b@free-id=? aX1789@x (car aX178a@ls)) (aX1774@free-id-member? aX1789@x (cdr aX178a@ls)))))) (let aX1779@f ((aX1775@cls* aX176e@cls*) (aX1776@seen* '())) (if (not (null? aX1775@cls*)) (let ((aX177b@t (car aX1775@cls*))) (let ((aX177d@ls/false (aXd7c@syntax-dispatch aX177b@t '(any . any)))) (if aX177d@ls/false (apply (lambda (aX177f@kwd aX1780@rest) (if (or (not (aXb75@id? aX177f@kwd)) (not (aX1774@free-id-member? aX177f@kwd aX1772@valid-kwds))) (aXe5c@syntax-violation '#f '"not a valid define-record-type keyword" aX177f@kwd) (if (aXb81@bound-id-member? aX177f@kwd aX1776@seen*) (aXe5c@syntax-violation '#f '"duplicate use of keyword " aX176d@x aX177f@kwd) (aX1779@f (cdr aX1775@cls*) (cons aX177f@kwd aX1776@seen*))))) aX177d@ls/false) (let ((aX1783@t aX177b@t)) (let ((aX1785@ls/false (aXd7c@syntax-dispatch aX1783@t 'any))) (if aX1785@ls/false (apply (lambda (aX1787@cls) (aXe5c@syntax-violation '#f '"malformed define-record-type clause" aX1787@cls)) aX1785@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1783@t))))))) (void))))))) (let ((aX1765@t aX1741@x)) (let ((aX1767@ls/false (aXd7c@syntax-dispatch aX1765@t '(_ any . each-any)))) (if aX1767@ls/false (apply (lambda (aX1769@namespec aX176a@clause*) (begin (aX1764@verify-clauses aX1741@x aX176a@clause*) (aX1762@do-define-record aX1769@namespec aX176a@clause*))) aX1767@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1765@t)))))))) (set! aX284c@aXd70@define-record-type-macro aXd70@define-record-type-macro) (set! aXd72@define-condition-type-macro (lambda (aX193d@x) (let ((aX1940@mkname '#f)) (begin (set! aX1940@mkname (lambda (aX196d@name aX196e@suffix) (aXe60@datum->syntax aX196d@name (string->symbol (string-append (symbol->string (aXe62@syntax->datum aX196d@name)) aX196e@suffix))))) (let ((aX1941@t aX193d@x)) (let ((aX1943@ls/false (aXd7c@syntax-dispatch aX1941@t '(any any any any any . #(each (any any)))))) (if (and aX1943@ls/false (apply (lambda (aX1945@ctxt aX1946@name aX1947@super aX1948@constructor aX1949@predicate aX194a@field* aX194b@accessor*) (and (aXb75@id? aX1946@name) (aXb75@id? aX1947@super) (aXb75@id? aX1948@constructor) (aXb75@id? aX1949@predicate) (for-all aXb75@id? aX194a@field*) (for-all aXb75@id? aX194b@accessor*))) aX1943@ls/false)) (apply (lambda (aX1953@ctxt aX1954@name aX1955@super aX1956@constructor aX1957@predicate aX1958@field* aX1959@accessor*) (let ((aX1961@aux-accessor* (map (lambda (aX1963@x) (gensym)) aX1959@accessor*))) (aXd32@bless (cons 'begin (cons (cons 'define-record-type (cons (list aX1954@name aX1956@constructor (gensym)) (cons (list 'parent aX1955@super) (cons (cons 'fields (map (lambda (aX1965@field aX1966@aux) (list 'immutable aX1965@field aX1966@aux)) aX1958@field* aX1961@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define aX1957@predicate (list 'condition-predicate (list 'record-type-descriptor aX1954@name))) (map (lambda (aX1969@accessor aX196a@aux) (list 'define aX1969@accessor (list 'condition-accessor (list 'record-type-descriptor aX1954@name) aX196a@aux))) aX1959@accessor* aX1961@aux-accessor*))))))) aX1943@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1941@t)))))))) (set! aX284d@aXd72@define-condition-type-macro aXd72@define-condition-type-macro) (set! aXd74@incorrect-usage-macro (lambda (aX1971@e) (aXe5c@syntax-violation '#f '"incorrect usage of auxiliary keyword" aX1971@e))) (set! aX284e@aXd74@incorrect-usage-macro aXd74@incorrect-usage-macro) (set! aXd76@parameterize-macro (lambda (aX1973@e) (let ((aX1975@t aX1973@e)) (let ((aX1977@ls/false (aXd7c@syntax-dispatch aX1975@t '(_ () any . each-any)))) (if aX1977@ls/false (apply (lambda (aX1979@b aX197a@b*) (aXd32@bless (cons 'let (cons '() (cons aX1979@b aX197a@b*))))) aX1977@ls/false) (let ((aX197d@t aX1975@t)) (let ((aX197f@ls/false (aXd7c@syntax-dispatch aX197d@t '(_ #(each (any any)) any . each-any)))) (if aX197f@ls/false (apply (lambda (aX1981@olhs* aX1982@orhs* aX1983@b aX1984@b*) (let ((aX1989@lhs* (aXe4a@generate-temporaries aX1981@olhs*)) (aX198a@rhs* (aXe4a@generate-temporaries aX1982@orhs*))) (aXd32@bless (cons (list 'lambda (append aX1989@lhs* aX198a@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (aX198d@lhs aX198e@rhs) (list 'let (list (list 't (list aX198d@lhs))) (list aX198d@lhs aX198e@rhs) (cons 'set! (cons aX198e@rhs '(t))))) aX1989@lhs* aX198a@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons aX1983@b aX1984@b*))) '(swap)))))) (append aX1981@olhs* aX1982@orhs*))))) aX197f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX197d@t))))))))) (set! aX284f@aXd76@parameterize-macro aXd76@parameterize-macro) (set! aXd78@foreign-call-transformer (lambda (aX1991@e aX1992@r aX1993@mr) (let ((aX1997@t aX1991@e)) (let ((aX1999@ls/false (aXd7c@syntax-dispatch aX1997@t '(_ any . each-any)))) (if aX1999@ls/false (apply (lambda (aX199b@name aX199c@arg*) (cons 'foreign-call (cons (aXd9e@chi-expr aX199b@name aX1992@r aX1993@mr) (aXd9a@chi-expr* aX199c@arg* aX1992@r aX1993@mr)))) aX1999@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1997@t)))))) (set! aX2850@aXd78@foreign-call-transformer aXd78@foreign-call-transformer) (set! aXd7a@convert-pattern (lambda (aX199f@pattern aX19a0@keys) (let ((aX19a4@cvt* '#f) (aX19a6@cvt '#f)) (begin (set! aX19a4@cvt* (lambda (aX1a43@p* aX1a44@n aX1a45@ids) (if (null? aX1a43@p*) (values '() aX1a45@ids) (call-with-values (lambda () (aX19a4@cvt* (cdr aX1a43@p*) aX1a44@n aX1a45@ids)) (lambda (aX1a4d@aX1a4a aX1a4e@aX1a4c) (let ((aX1a51@ids aX1a4e@aX1a4c) (aX1a52@y aX1a4d@aX1a4a)) (call-with-values (lambda () (aX19a6@cvt (car aX1a43@p*) aX1a44@n aX1a51@ids)) (lambda (aX1a59@aX1a56 aX1a5a@aX1a58) (let ((aX1a5d@ids aX1a5a@aX1a58) (aX1a5e@x aX1a59@aX1a56)) (values (cons aX1a5e@x aX1a52@y) aX1a5d@ids)))))))))) (set! aX19a6@cvt (lambda (aX19a7@p aX19a8@n aX19a9@ids) (let ((aX19ad@t aX19a7@p)) (let ((aX19af@ls/false (aXd7c@syntax-dispatch aX19ad@t 'any))) (if (and aX19af@ls/false (apply (lambda (aX19b1@id) (aXb75@id? aX19b1@id)) aX19af@ls/false)) (apply (lambda (aX19b3@id) (if (aXb81@bound-id-member? aX19a7@p aX19a0@keys) (values (vector 'free-id aX19a7@p) aX19a9@ids) (if (aXb7b@free-id=? aX19a7@p (aXd04@scheme-stx '_)) (values '_ aX19a9@ids) (values 'any (cons (cons aX19a7@p aX19a8@n) aX19a9@ids))))) aX19af@ls/false) (let ((aX19b5@t aX19ad@t)) (let ((aX19b7@ls/false (aXd7c@syntax-dispatch aX19b5@t '(any any)))) (if (and aX19b7@ls/false (apply (lambda (aX19b9@p aX19ba@dots) (aXd7e@ellipsis? aX19ba@dots)) aX19b7@ls/false)) (apply (lambda (aX19bd@p aX19be@dots) (call-with-values (lambda () (aX19a6@cvt aX19bd@p (+ aX19a8@n '1) aX19a9@ids)) (lambda (aX19c5@aX19c2 aX19c6@aX19c4) (let ((aX19c9@ids aX19c6@aX19c4) (aX19ca@p aX19c5@aX19c2)) (values (if (eq? aX19ca@p 'any) 'each-any (vector 'each aX19ca@p)) aX19c9@ids))))) aX19b7@ls/false) (let ((aX19cd@t aX19b5@t)) (let ((aX19cf@ls/false (aXd7c@syntax-dispatch aX19cd@t '(any any . #(each+ any () any))))) (if (and aX19cf@ls/false (apply (lambda (aX19d1@x aX19d2@dots aX19d3@ys aX19d4@z) (aXd7e@ellipsis? aX19d2@dots)) aX19cf@ls/false)) (apply (lambda (aX19d9@x aX19da@dots aX19db@ys aX19dc@z) (call-with-values (lambda () (aX19a6@cvt aX19dc@z aX19a8@n aX19a9@ids)) (lambda (aX19e5@aX19e2 aX19e6@aX19e4) (let ((aX19e9@ids aX19e6@aX19e4) (aX19ea@z aX19e5@aX19e2)) (call-with-values (lambda () (aX19a4@cvt* aX19db@ys aX19a8@n aX19e9@ids)) (lambda (aX19f1@aX19ee aX19f2@aX19f0) (let ((aX19f5@ids aX19f2@aX19f0) (aX19f6@ys aX19f1@aX19ee)) (call-with-values (lambda () (aX19a6@cvt aX19d9@x (+ aX19a8@n '1) aX19f5@ids)) (lambda (aX19fd@aX19fa aX19fe@aX19fc) (let ((aX1a01@ids aX19fe@aX19fc) (aX1a02@x aX19fd@aX19fa)) (values (vector 'each+ aX1a02@x (reverse aX19f6@ys) aX19ea@z) aX1a01@ids))))))))))) aX19cf@ls/false) (let ((aX1a05@t aX19cd@t)) (let ((aX1a07@ls/false (aXd7c@syntax-dispatch aX1a05@t '(any . any)))) (if aX1a07@ls/false (apply (lambda (aX1a09@x aX1a0a@y) (call-with-values (lambda () (aX19a6@cvt aX1a0a@y aX19a8@n aX19a9@ids)) (lambda (aX1a11@aX1a0e aX1a12@aX1a10) (let ((aX1a15@ids aX1a12@aX1a10) (aX1a16@y aX1a11@aX1a0e)) (call-with-values (lambda () (aX19a6@cvt aX1a09@x aX19a8@n aX1a15@ids)) (lambda (aX1a1d@aX1a1a aX1a1e@aX1a1c) (let ((aX1a21@ids aX1a1e@aX1a1c) (aX1a22@x aX1a1d@aX1a1a)) (values (cons aX1a22@x aX1a16@y) aX1a21@ids)))))))) aX1a07@ls/false) (let ((aX1a25@t aX1a05@t)) (let ((aX1a27@ls/false (aXd7c@syntax-dispatch aX1a25@t '()))) (if aX1a27@ls/false (apply (lambda () (values '() aX19a9@ids)) aX1a27@ls/false) (let ((aX1a29@t aX1a25@t)) (let ((aX1a2b@ls/false (aXd7c@syntax-dispatch aX1a29@t '#(vector each-any)))) (if (and aX1a2b@ls/false (apply (lambda (aX1a2d@p) (not (aXb41@stx? aX1a2d@p))) aX1a2b@ls/false)) (apply (lambda (aX1a2f@p) (call-with-values (lambda () (aX19a6@cvt aX1a2f@p aX19a8@n aX19a9@ids)) (lambda (aX1a35@aX1a32 aX1a36@aX1a34) (let ((aX1a39@ids aX1a36@aX1a34) (aX1a3a@p aX1a35@aX1a32)) (values (vector 'vector aX1a3a@p) aX1a39@ids))))) aX1a2b@ls/false) (let ((aX1a3d@t aX1a29@t)) (let ((aX1a3f@ls/false (aXd7c@syntax-dispatch aX1a3d@t 'any))) (if aX1a3f@ls/false (apply (lambda (aX1a41@datum) (values (vector 'atom (aXb89@stx->datum aX1a41@datum)) aX19a9@ids)) aX1a3f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1a3d@t)))))))))))))))))))))))) (aX19a6@cvt aX199f@pattern '0 '()))))) (set! aX2851@aXd7a@convert-pattern aXd7a@convert-pattern) (set! aXd7c@syntax-dispatch (let ((aX1a62@stx^ '#f) (aX1a64@match-each '#f) (aX1a66@match-each+ '#f) (aX1a68@match-each-any '#f) (aX1a6a@match-empty '#f) (aX1a6c@combine '#f) (aX1a6e@match* '#f) (aX1a70@match '#f)) (begin (set! aX1a62@stx^ (lambda (aX1b3d@e aX1b3e@m* aX1b3f@s* aX1b40@ae*) (if (and (null? aX1b3e@m*) (null? aX1b3f@s*) (null? aX1b40@ae*)) aX1b3d@e (aXb5d@mkstx aX1b3d@e aX1b3e@m* aX1b3f@s* aX1b40@ae*)))) (set! aX1a64@match-each (lambda (aX1b1d@e aX1b1e@p aX1b1f@m* aX1b20@s* aX1b21@ae*) (if (pair? aX1b1d@e) (let ((aX1b27@first (aX1a70@match (car aX1b1d@e) aX1b1e@p aX1b1f@m* aX1b20@s* aX1b21@ae* '()))) (and aX1b27@first (let ((aX1b29@rest (aX1a64@match-each (cdr aX1b1d@e) aX1b1e@p aX1b1f@m* aX1b20@s* aX1b21@ae*))) (and aX1b29@rest (cons aX1b27@first aX1b29@rest))))) (if (null? aX1b1d@e) '() (if (aXb41@stx? aX1b1d@e) (and (not (aXafb@top-marked? aX1b1f@m*)) (call-with-values (lambda () (join-wraps aX1b1f@m* aX1b20@s* aX1b21@ae* aX1b1d@e)) (lambda (aX1b31@aX1b2c aX1b32@aX1b2e aX1b33@aX1b30) (let ((aX1b37@ae* aX1b33@aX1b30) (aX1b38@s* aX1b32@aX1b2e) (aX1b39@m* aX1b31@aX1b2c)) (aX1a64@match-each (aXb43@stx-expr aX1b1d@e) aX1b1e@p aX1b39@m* aX1b38@s* aX1b37@ae*))))) (if (aX6b3@aX585@annotation? aX1b1d@e) (aX1a64@match-each (aX6b5@aX589@annotation-expression aX1b1d@e) aX1b1e@p aX1b1f@m* aX1b20@s* aX1b21@ae*) '#f)))))) (set! aX1a66@match-each+ (lambda (aX1add@e aX1ade@x-pat aX1adf@y-pat aX1ae0@z-pat aX1ae1@m* aX1ae2@s* aX1ae3@ae* aX1ae4@r) (let aX1af5@f ((aX1aed@e aX1add@e) (aX1aee@m* aX1ae1@m*) (aX1aef@s* aX1ae2@s*) (aX1af0@ae* aX1ae3@ae*)) (if (pair? aX1aed@e) (call-with-values (lambda () (aX1af5@f (cdr aX1aed@e) aX1aee@m* aX1aef@s* aX1af0@ae*)) (lambda (aX1afd@aX1af8 aX1afe@aX1afa aX1aff@aX1afc) (let ((aX1b03@r aX1aff@aX1afc) (aX1b04@y-pat aX1afe@aX1afa) (aX1b05@xr* aX1afd@aX1af8)) (if aX1b03@r (if (null? aX1b04@y-pat) (let ((aX1b09@xr (aX1a70@match (car aX1aed@e) aX1ade@x-pat aX1aee@m* aX1aef@s* aX1af0@ae* '()))) (if aX1b09@xr (values (cons aX1b09@xr aX1b05@xr*) aX1b04@y-pat aX1b03@r) (values '#f '#f '#f))) (values '() (cdr aX1b04@y-pat) (aX1a70@match (car aX1aed@e) (car aX1b04@y-pat) aX1aee@m* aX1aef@s* aX1af0@ae* aX1b03@r))) (values '#f '#f '#f))))) (if (aXb41@stx? aX1aed@e) (if (aXafb@top-marked? aX1aee@m*) (values '() aX1adf@y-pat (aX1a70@match aX1aed@e aX1ae0@z-pat aX1aee@m* aX1aef@s* aX1af0@ae* aX1ae4@r)) (call-with-values (lambda () (join-wraps aX1aee@m* aX1aef@s* aX1af0@ae* aX1aed@e)) (lambda (aX1b11@aX1b0c aX1b12@aX1b0e aX1b13@aX1b10) (let ((aX1b17@ae* aX1b13@aX1b10) (aX1b18@s* aX1b12@aX1b0e) (aX1b19@m* aX1b11@aX1b0c)) (aX1af5@f (aXb43@stx-expr aX1aed@e) aX1b19@m* aX1b18@s* aX1b17@ae*))))) (if (aX6b3@aX585@annotation? aX1aed@e) (aX1af5@f (aX6b5@aX589@annotation-expression aX1aed@e) aX1aee@m* aX1aef@s* aX1af0@ae*) (values '() aX1adf@y-pat (aX1a70@match aX1aed@e aX1ae0@z-pat aX1aee@m* aX1aef@s* aX1af0@ae* aX1ae4@r)))))))) (set! aX1a68@match-each-any (lambda (aX1ac1@e aX1ac2@m* aX1ac3@s* aX1ac4@ae*) (if (pair? aX1ac1@e) (let ((aX1ac9@l (aX1a68@match-each-any (cdr aX1ac1@e) aX1ac2@m* aX1ac3@s* aX1ac4@ae*))) (and aX1ac9@l (cons (aX1a62@stx^ (car aX1ac1@e) aX1ac2@m* aX1ac3@s* aX1ac4@ae*) aX1ac9@l))) (if (null? aX1ac1@e) '() (if (aXb41@stx? aX1ac1@e) (and (not (aXafb@top-marked? aX1ac2@m*)) (call-with-values (lambda () (join-wraps aX1ac2@m* aX1ac3@s* aX1ac4@ae* aX1ac1@e)) (lambda (aX1ad1@aX1acc aX1ad2@aX1ace aX1ad3@aX1ad0) (let ((aX1ad7@ae* aX1ad3@aX1ad0) (aX1ad8@s* aX1ad2@aX1ace) (aX1ad9@m* aX1ad1@aX1acc)) (aX1a68@match-each-any (aXb43@stx-expr aX1ac1@e) aX1ad9@m* aX1ad8@s* aX1ad7@ae*))))) (if (aX6b3@aX585@annotation? aX1ac1@e) (aX1a68@match-each-any (aX6b5@aX589@annotation-expression aX1ac1@e) aX1ac2@m* aX1ac3@s* aX1ac4@ae*) '#f)))))) (set! aX1a6a@match-empty (lambda (aX1abb@p aX1abc@r) (if (null? aX1abb@p) aX1abc@r (if (eq? aX1abb@p '_) aX1abc@r (if (eq? aX1abb@p 'any) (cons '() aX1abc@r) (if (pair? aX1abb@p) (aX1a6a@match-empty (car aX1abb@p) (aX1a6a@match-empty (cdr aX1abb@p) aX1abc@r)) (if (eq? aX1abb@p 'each-any) (cons '() aX1abc@r) (let ((aX1abf@t (vector-ref aX1abb@p '0))) (if (memv aX1abf@t '(each)) (aX1a6a@match-empty (vector-ref aX1abb@p '1) aX1abc@r) (if (memv aX1abf@t '(each+)) (aX1a6a@match-empty (vector-ref aX1abb@p '1) (aX1a6a@match-empty (reverse (vector-ref aX1abb@p '2)) (aX1a6a@match-empty (vector-ref aX1abb@p '3) aX1abc@r))) (if (memv aX1abf@t '(free-id atom)) aX1abc@r (if (memv aX1abf@t '(scheme-id atom)) aX1abc@r (if (memv aX1abf@t '(vector)) (aX1a6a@match-empty (vector-ref aX1abb@p '1) aX1abc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" aX1abb@p)))))))))))))) (set! aX1a6c@combine (lambda (aX1ab7@r* aX1ab8@r) (if (null? (car aX1ab7@r*)) aX1ab8@r (cons (map car aX1ab7@r*) (aX1a6c@combine (map cdr aX1ab7@r*) aX1ab8@r))))) (set! aX1a6e@match* (lambda (aX1a93@e aX1a94@p aX1a95@m* aX1a96@s* aX1a97@ae* aX1a98@r) (if (null? aX1a94@p) (and (null? aX1a93@e) aX1a98@r) (if (pair? aX1a94@p) (and (pair? aX1a93@e) (aX1a70@match (car aX1a93@e) (car aX1a94@p) aX1a95@m* aX1a96@s* aX1a97@ae* (aX1a70@match (cdr aX1a93@e) (cdr aX1a94@p) aX1a95@m* aX1a96@s* aX1a97@ae* aX1a98@r))) (if (eq? aX1a94@p 'each-any) (let ((aX1a9f@l (aX1a68@match-each-any aX1a93@e aX1a95@m* aX1a96@s* aX1a97@ae*))) (and aX1a9f@l (cons aX1a9f@l aX1a98@r))) (let ((aX1aa1@t (vector-ref aX1a94@p '0))) (if (memv aX1aa1@t '(each)) (if (null? aX1a93@e) (aX1a6a@match-empty (vector-ref aX1a94@p '1) aX1a98@r) (let ((aX1aa3@r* (aX1a64@match-each aX1a93@e (vector-ref aX1a94@p '1) aX1a95@m* aX1a96@s* aX1a97@ae*))) (and aX1aa3@r* (aX1a6c@combine aX1aa3@r* aX1a98@r)))) (if (memv aX1aa1@t '(free-id)) (and (symbol? aX1a93@e) (aXafb@top-marked? aX1a95@m*) (aXb7b@free-id=? (aX1a62@stx^ aX1a93@e aX1a95@m* aX1a96@s* aX1a97@ae*) (vector-ref aX1a94@p '1)) aX1a98@r) (if (memv aX1aa1@t '(scheme-id)) (and (symbol? aX1a93@e) (aXafb@top-marked? aX1a95@m*) (aXb7b@free-id=? (aX1a62@stx^ aX1a93@e aX1a95@m* aX1a96@s* aX1a97@ae*) (aXd04@scheme-stx (vector-ref aX1a94@p '1))) aX1a98@r) (if (memv aX1aa1@t '(each+)) (call-with-values (lambda () (aX1a66@match-each+ aX1a93@e (vector-ref aX1a94@p '1) (vector-ref aX1a94@p '2) (vector-ref aX1a94@p '3) aX1a95@m* aX1a96@s* aX1a97@ae* aX1a98@r)) (lambda (aX1aab@aX1aa6 aX1aac@aX1aa8 aX1aad@aX1aaa) (let ((aX1ab1@r aX1aad@aX1aaa) (aX1ab2@y-pat aX1aac@aX1aa8) (aX1ab3@xr* aX1aab@aX1aa6)) (and aX1ab1@r (null? aX1ab2@y-pat) (if (null? aX1ab3@xr*) (aX1a6a@match-empty (vector-ref aX1a94@p '1) aX1ab1@r) (aX1a6c@combine aX1ab3@xr* aX1ab1@r)))))) (if (memv aX1aa1@t '(atom)) (and (fast-equal? (vector-ref aX1a94@p '1) (aXb87@strip aX1a93@e aX1a95@m*)) aX1a98@r) (if (memv aX1aa1@t '(vector)) (and (vector? aX1a93@e) (aX1a70@match (vector->list aX1a93@e) (vector-ref aX1a94@p '1) aX1a95@m* aX1a96@s* aX1a97@ae* aX1a98@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" aX1a94@p))))))))))))) (set! aX1a70@match (lambda (aX1a75@e aX1a76@p aX1a77@m* aX1a78@s* aX1a79@ae* aX1a7a@r) (if (not aX1a7a@r) '#f (if (eq? aX1a76@p '_) aX1a7a@r (if (eq? aX1a76@p 'any) (cons (aX1a62@stx^ aX1a75@e aX1a77@m* aX1a78@s* aX1a79@ae*) aX1a7a@r) (if (aXb41@stx? aX1a75@e) (and (not (aXafb@top-marked? aX1a77@m*)) (call-with-values (lambda () (join-wraps aX1a77@m* aX1a78@s* aX1a79@ae* aX1a75@e)) (lambda (aX1a87@aX1a82 aX1a88@aX1a84 aX1a89@aX1a86) (let ((aX1a8d@ae* aX1a89@aX1a86) (aX1a8e@s* aX1a88@aX1a84) (aX1a8f@m* aX1a87@aX1a82)) (aX1a70@match (aXb43@stx-expr aX1a75@e) aX1a76@p aX1a8f@m* aX1a8e@s* aX1a8d@ae* aX1a7a@r))))) (if (aX6b3@aX585@annotation? aX1a75@e) (aX1a70@match (aX6b5@aX589@annotation-expression aX1a75@e) aX1a76@p aX1a77@m* aX1a78@s* aX1a79@ae* aX1a7a@r) (aX1a6e@match* aX1a75@e aX1a76@p aX1a77@m* aX1a78@s* aX1a79@ae* aX1a7a@r)))))))) (lambda (aX1a71@e aX1a72@p) (aX1a70@match aX1a71@e aX1a72@p '() '() '() '()))))) (set! aX2852@aXd7c@syntax-dispatch aXd7c@syntax-dispatch) (set! aXd7e@ellipsis? (lambda (aX1b45@x) (and (aXb75@id? aX1b45@x) (aXb7b@free-id=? aX1b45@x (aXd04@scheme-stx '...))))) (set! aX2853@aXd7e@ellipsis? aXd7e@ellipsis?) (set! aXd80@underscore? (lambda (aX1b47@x) (and (aXb75@id? aX1b47@x) (aXb7b@free-id=? aX1b47@x (aXd04@scheme-stx '_))))) (set! aX2854@aXd80@underscore? aXd80@underscore?) (set! aXd82@verify-literals (lambda (aX1b49@lits aX1b4a@expr) (for-each (lambda (aX1b4d@x) (if (or (not (aXb75@id? aX1b4d@x)) (aXd7e@ellipsis? aX1b4d@x) (aXd80@underscore? aX1b4d@x)) (aXe5c@syntax-violation '#f '"invalid literal" aX1b4a@expr aX1b4d@x) (void))) aX1b49@lits))) (set! aX2855@aXd82@verify-literals aXd82@verify-literals) (set! aXd84@syntax-case-transformer (let ((aX1b50@build-dispatch-call '#f) (aX1b52@invalid-ids-error '#f) (aX1b54@gen-clause '#f) (aX1b56@gen-syntax-case '#f)) (begin (set! aX1b50@build-dispatch-call (lambda (aX1bc1@pvars aX1bc2@expr aX1bc3@y aX1bc4@r aX1bc5@mr) (let ((aX1bcb@ids (map car aX1bc1@pvars)) (aX1bcc@levels (map cdr aX1bc1@pvars))) (let ((aX1bcf@labels (map aXb01@gen-label aX1bcb@ids)) (aX1bd0@new-vars (map aXafd@gen-lexical aX1bcb@ids))) (let ((aX1bd3@body (aXd9e@chi-expr (aXb61@add-subst (aXb35@make-full-rib aX1bcb@ids aX1bcf@labels) aX1bc2@expr) (append (map (lambda (aX1bd5@label aX1bd6@var aX1bd7@level) (cons aX1bd5@label (aXb8f@make-binding 'syntax (cons aX1bd6@var aX1bd7@level)))) aX1bcf@labels aX1bd0@new-vars (map cdr aX1bc1@pvars)) aX1bc4@r) aX1bc5@mr))) (list '(primitive apply) (aXad8@aXa04@build-lambda '#f aX1bd0@new-vars aX1bd3@body) aX1bc3@y)))))) (set! aX1b52@invalid-ids-error (lambda (aX1bb5@id* aX1bb6@e aX1bb7@class) (let aX1bbf@find ((aX1bbb@id* aX1bb5@id*) (aX1bbc@ok* '())) (if (null? aX1bbb@id*) (aXe5c@syntax-violation '#f '"invalid syntax" aX1bb6@e) (if (aXb75@id? (car aX1bbb@id*)) (if (aXb81@bound-id-member? (car aX1bbb@id*) aX1bbc@ok*) (aXe58@syntax-error (car aX1bbb@id*) '"duplicate " aX1bb7@class) (aX1bbf@find (cdr aX1bbb@id*) (cons (car aX1bbb@id*) aX1bbc@ok*))) (aXe58@syntax-error (car aX1bbb@id*) '"invalid " aX1bb7@class)))))) (set! aX1b54@gen-clause (lambda (aX1b8d@x aX1b8e@keys aX1b8f@clauses aX1b90@r aX1b91@mr aX1b92@pat aX1b93@fender aX1b94@expr) (call-with-values (lambda () (aXd7a@convert-pattern aX1b92@pat aX1b8e@keys)) (lambda (aX1ba1@aX1b9e aX1ba2@aX1ba0) (let ((aX1ba5@pvars aX1ba2@aX1ba0) (aX1ba6@p aX1ba1@aX1b9e)) (if (not (aXb7f@distinct-bound-ids? (map car aX1ba5@pvars))) (aX1b52@invalid-ids-error (map car aX1ba5@pvars) aX1b92@pat '"pattern variable") (if (not (for-all (lambda (aX1ba9@x) (not (aXd7e@ellipsis? (car aX1ba9@x)))) aX1ba5@pvars)) (aXe5c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" aX1b92@pat) (let ((aX1bab@y (aXafd@gen-lexical 'tmp))) (let ((aX1bad@test (if (eq? aX1b93@fender '#t) aX1bab@y (let ((aX1baf@call (aX1b50@build-dispatch-call aX1ba5@pvars aX1b93@fender aX1bab@y aX1b90@r aX1b91@mr))) (list 'if aX1bab@y aX1baf@call (list 'quote '#f)))))) (let ((aX1bb1@conseq (aX1b50@build-dispatch-call aX1ba5@pvars aX1b94@expr aX1bab@y aX1b90@r aX1b91@mr))) (let ((aX1bb3@altern (aX1b56@gen-syntax-case aX1b8d@x aX1b8e@keys aX1b8f@clauses aX1b90@r aX1b91@mr))) (list (aXad8@aXa04@build-lambda '#f (list aX1bab@y) (list 'if aX1bad@test aX1bb1@conseq aX1bb3@altern)) (list '(primitive syntax-dispatch) aX1b8d@x (list 'quote aX1ba6@p)))))))))))))) (set! aX1b56@gen-syntax-case (lambda (aX1b6b@x aX1b6c@keys aX1b6d@clauses aX1b6e@r aX1b6f@mr) (if (null? aX1b6d@clauses) (list '(primitive syntax-error) aX1b6b@x) (let ((aX1b75@t (car aX1b6d@clauses))) (let ((aX1b77@ls/false (aXd7c@syntax-dispatch aX1b75@t '(any any)))) (if aX1b77@ls/false (apply (lambda (aX1b79@pat aX1b7a@expr) (if (and (aXb75@id? aX1b79@pat) (not (aXb81@bound-id-member? aX1b79@pat aX1b6c@keys)) (not (aXd7e@ellipsis? aX1b79@pat))) (if (aXb7b@free-id=? aX1b79@pat (aXd04@scheme-stx '_)) (aXd9e@chi-expr aX1b7a@expr aX1b6e@r aX1b6f@mr) (let ((aX1b7d@lab (aXb01@gen-label aX1b79@pat)) (aX1b7e@lex (aXafd@gen-lexical aX1b79@pat))) (let ((aX1b81@body (aXd9e@chi-expr (aXb61@add-subst (aXb35@make-full-rib (list aX1b79@pat) (list aX1b7d@lab)) aX1b7a@expr) (cons (cons aX1b7d@lab (aXb8f@make-binding 'syntax (cons aX1b7e@lex '0))) aX1b6e@r) aX1b6f@mr))) (list (aXad8@aXa04@build-lambda '#f (list aX1b7e@lex) aX1b81@body) aX1b6b@x)))) (aX1b54@gen-clause aX1b6b@x aX1b6c@keys (cdr aX1b6d@clauses) aX1b6e@r aX1b6f@mr aX1b79@pat '#t aX1b7a@expr))) aX1b77@ls/false) (let ((aX1b83@t aX1b75@t)) (let ((aX1b85@ls/false (aXd7c@syntax-dispatch aX1b83@t '(any any any)))) (if aX1b85@ls/false (apply (lambda (aX1b87@pat aX1b88@fender aX1b89@expr) (aX1b54@gen-clause aX1b6b@x aX1b6c@keys (cdr aX1b6d@clauses) aX1b6e@r aX1b6f@mr aX1b87@pat aX1b88@fender aX1b89@expr)) aX1b85@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1b83@t)))))))))) (lambda (aX1b57@e aX1b58@r aX1b59@mr) (let ((aX1b5d@t aX1b57@e)) (let ((aX1b5f@ls/false (aXd7c@syntax-dispatch aX1b5d@t '(_ any each-any . each-any)))) (if aX1b5f@ls/false (apply (lambda (aX1b61@expr aX1b62@keys aX1b63@clauses) (begin (aXd82@verify-literals aX1b62@keys aX1b57@e) (let ((aX1b67@x (aXafd@gen-lexical 'tmp))) (let ((aX1b69@body (aX1b56@gen-syntax-case aX1b67@x aX1b62@keys aX1b63@clauses aX1b58@r aX1b59@mr))) (list (aXad8@aXa04@build-lambda '#f (list aX1b67@x) aX1b69@body) (aXd9e@chi-expr aX1b61@expr aX1b58@r aX1b59@mr)))))) aX1b5f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1b5d@t)))))))) (set! aX2856@aXd84@syntax-case-transformer aXd84@syntax-case-transformer) (set! aXd86@ellipsis-map (lambda (aX1bdb@proc aX1bdc@ls . aX1bdf@ls*) (let ((aX1be2@who '#f)) (begin (set! aX1be2@who '...) (begin (if (not (list? aX1bdc@ls)) (assertion-violation aX1be2@who '"not a list" aX1bdc@ls) (void)) (if (not (null? aX1bdf@ls*)) (let ((aX1be3@n (length aX1bdc@ls))) (for-each (lambda (aX1be5@x) (begin (if (not (list? aX1be5@x)) (assertion-violation aX1be2@who '"not a list" aX1be5@x) (void)) (if (not (= (length aX1be5@x) aX1be3@n)) (assertion-violation aX1be2@who '"length mismatch" aX1bdc@ls aX1be5@x) (void)))) aX1bdf@ls*)) (void)) (apply map aX1bdb@proc aX1bdc@ls aX1bdf@ls*)))))) (set! aX2857@aXd86@ellipsis-map aXd86@ellipsis-map) (set! aXd88@syntax-transformer (let ((aX1be8@gen-syntax '#f) (aX1bea@gen-ref '#f) (aX1bec@gen-append '#f) (aX1bee@gen-mappend '#f) (aX1bf0@gen-map '#f) (aX1bf2@gen-cons '#f) (aX1bf4@gen-vector '#f) (aX1bf6@regen '#f)) (begin (set! aX1be8@gen-syntax (lambda (aX1c5f@src aX1c60@e aX1c61@r aX1c62@maps aX1c63@ellipsis? aX1c64@vec?) (let ((aX1c6b@t aX1c60@e)) (let ((aX1c6d@ls/false (aXd7c@syntax-dispatch aX1c6b@t 'any))) (if (and aX1c6d@ls/false (apply (lambda (aX1c6f@dots) (aX1c63@ellipsis? aX1c6f@dots)) aX1c6d@ls/false)) (apply (lambda (aX1c71@dots) (aXe5c@syntax-violation '#f '"misplaced ellipsis in syntax form" aX1c5f@src)) aX1c6d@ls/false) (let ((aX1c73@t aX1c6b@t)) (let ((aX1c75@ls/false (aXd7c@syntax-dispatch aX1c73@t 'any))) (if (and aX1c75@ls/false (apply (lambda (aX1c77@id) (aXb75@id? aX1c77@id)) aX1c75@ls/false)) (apply (lambda (aX1c79@id) (let ((aX1c7b@label (aXb8b@id->label aX1c60@e))) (let ((aX1c7d@b (aXb8d@label->binding aX1c7b@label aX1c61@r))) (if (eq? (aXb91@binding-type aX1c7d@b) 'syntax) (call-with-values (lambda () (let ((aX1c83@var.lev (aXb93@binding-value aX1c7d@b))) (aX1bea@gen-ref aX1c5f@src (car aX1c83@var.lev) (cdr aX1c83@var.lev) aX1c62@maps))) (lambda (aX1c85@aX1c80 aX1c86@aX1c82) (let ((aX1c89@maps aX1c86@aX1c82) (aX1c8a@var aX1c85@aX1c80)) (values (list 'ref aX1c8a@var) aX1c89@maps)))) (values (list 'quote aX1c60@e) aX1c62@maps))))) aX1c75@ls/false) (let ((aX1c8d@t aX1c73@t)) (let ((aX1c8f@ls/false (aXd7c@syntax-dispatch aX1c8d@t '(any any)))) (if (and aX1c8f@ls/false (apply (lambda (aX1c91@dots aX1c92@e) (aX1c63@ellipsis? aX1c91@dots)) aX1c8f@ls/false)) (apply (lambda (aX1c95@dots aX1c96@e) (if aX1c64@vec? (aXe5c@syntax-violation '#f '"misplaced ellipsis in syntax form" aX1c5f@src) (aX1be8@gen-syntax aX1c5f@src aX1c96@e aX1c61@r aX1c62@maps (lambda (aX1c99@x) '#f) '#f))) aX1c8f@ls/false) (let ((aX1c9b@t aX1c8d@t)) (let ((aX1c9d@ls/false (aXd7c@syntax-dispatch aX1c9b@t '(any any . any)))) (if (and aX1c9d@ls/false (apply (lambda (aX1c9f@x aX1ca0@dots aX1ca1@y) (aX1c63@ellipsis? aX1ca0@dots)) aX1c9d@ls/false)) (apply (lambda (aX1ca5@x aX1ca6@dots aX1ca7@y) (let aX1cbd@f ((aX1cab@y aX1ca7@y) (aX1cac@k (lambda (aX1caf@maps) (call-with-values (lambda () (aX1be8@gen-syntax aX1c5f@src aX1ca5@x aX1c61@r (cons '() aX1caf@maps) aX1c63@ellipsis? '#f)) (lambda (aX1cb5@aX1cb2 aX1cb6@aX1cb4) (let ((aX1cb9@maps aX1cb6@aX1cb4) (aX1cba@x aX1cb5@aX1cb2)) (if (null? (car aX1cb9@maps)) (aXe5c@syntax-violation '#f '"extra ellipsis in syntax form" aX1c5f@src) (values (aX1bf0@gen-map aX1cba@x (car aX1cb9@maps)) (cdr aX1cb9@maps))))))))) (let ((aX1cbf@t aX1cab@y)) (let ((aX1cc1@ls/false (aXd7c@syntax-dispatch aX1cbf@t '()))) (if aX1cc1@ls/false (apply (lambda () (aX1cac@k aX1c62@maps)) aX1cc1@ls/false) (let ((aX1cc3@t aX1cbf@t)) (let ((aX1cc5@ls/false (aXd7c@syntax-dispatch aX1cc3@t '(any . any)))) (if (and aX1cc5@ls/false (apply (lambda (aX1cc7@dots aX1cc8@y) (aX1c63@ellipsis? aX1cc7@dots)) aX1cc5@ls/false)) (apply (lambda (aX1ccb@dots aX1ccc@y) (aX1cbd@f aX1ccc@y (lambda (aX1ccf@maps) (call-with-values (lambda () (aX1cac@k (cons '() aX1ccf@maps))) (lambda (aX1cd5@aX1cd2 aX1cd6@aX1cd4) (let ((aX1cd9@maps aX1cd6@aX1cd4) (aX1cda@x aX1cd5@aX1cd2)) (if (null? (car aX1cd9@maps)) (aXe5c@syntax-violation '#f '"extra ellipsis in syntax form" aX1c5f@src) (values (aX1bee@gen-mappend aX1cda@x (car aX1cd9@maps)) (cdr aX1cd9@maps))))))))) aX1cc5@ls/false) (let ((aX1cdd@t aX1cc3@t)) (let ((aX1cdf@ls/false (aXd7c@syntax-dispatch aX1cdd@t '_))) (if aX1cdf@ls/false (apply (lambda () (call-with-values (lambda () (aX1be8@gen-syntax aX1c5f@src aX1cab@y aX1c61@r aX1c62@maps aX1c63@ellipsis? aX1c64@vec?)) (lambda (aX1ce5@aX1ce2 aX1ce6@aX1ce4) (let ((aX1ce9@maps aX1ce6@aX1ce4) (aX1cea@y aX1ce5@aX1ce2)) (call-with-values (lambda () (aX1cac@k aX1ce9@maps)) (lambda (aX1cf1@aX1cee aX1cf2@aX1cf0) (let ((aX1cf5@maps aX1cf2@aX1cf0) (aX1cf6@x aX1cf1@aX1cee)) (values (aX1bec@gen-append aX1cf6@x aX1cea@y) aX1cf5@maps)))))))) aX1cdf@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1cdd@t)))))))))))) aX1c9d@ls/false) (let ((aX1cf9@t aX1c9b@t)) (let ((aX1cfb@ls/false (aXd7c@syntax-dispatch aX1cf9@t '(any . any)))) (if aX1cfb@ls/false (apply (lambda (aX1cfd@x aX1cfe@y) (call-with-values (lambda () (aX1be8@gen-syntax aX1c5f@src aX1cfd@x aX1c61@r aX1c62@maps aX1c63@ellipsis? '#f)) (lambda (aX1d05@aX1d02 aX1d06@aX1d04) (let ((aX1d09@maps aX1d06@aX1d04) (aX1d0a@xnew aX1d05@aX1d02)) (call-with-values (lambda () (aX1be8@gen-syntax aX1c5f@src aX1cfe@y aX1c61@r aX1d09@maps aX1c63@ellipsis? aX1c64@vec?)) (lambda (aX1d11@aX1d0e aX1d12@aX1d10) (let ((aX1d15@maps aX1d12@aX1d10) (aX1d16@ynew aX1d11@aX1d0e)) (values (aX1bf2@gen-cons aX1c60@e aX1cfd@x aX1cfe@y aX1d0a@xnew aX1d16@ynew) aX1d15@maps)))))))) aX1cfb@ls/false) (let ((aX1d19@t aX1cf9@t)) (let ((aX1d1b@ls/false (aXd7c@syntax-dispatch aX1d19@t '#(vector each-any)))) (if aX1d1b@ls/false (apply (lambda (aX1d1d@ls) (call-with-values (lambda () (aX1be8@gen-syntax aX1c5f@src aX1d1d@ls aX1c61@r aX1c62@maps aX1c63@ellipsis? '#t)) (lambda (aX1d23@aX1d20 aX1d24@aX1d22) (let ((aX1d27@maps aX1d24@aX1d22) (aX1d28@lsnew aX1d23@aX1d20)) (values (aX1bf4@gen-vector aX1c60@e aX1d1d@ls aX1d28@lsnew) aX1d27@maps))))) aX1d1b@ls/false) (let ((aX1d2b@t aX1d19@t)) (let ((aX1d2d@ls/false (aXd7c@syntax-dispatch aX1d2b@t '_))) (if aX1d2d@ls/false (apply (lambda () (values (list 'quote aX1c60@e) aX1c62@maps)) aX1d2d@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1d2b@t)))))))))))))))))))))))) (set! aX1bea@gen-ref (lambda (aX1c45@src aX1c46@var aX1c47@level aX1c48@maps) (if (= aX1c47@level '0) (values aX1c46@var aX1c48@maps) (if (null? aX1c48@maps) (aXe5c@syntax-violation '#f '"missing ellipsis in syntax form" aX1c45@src) (call-with-values (lambda () (aX1bea@gen-ref aX1c45@src aX1c46@var (- aX1c47@level '1) (cdr aX1c48@maps))) (lambda (aX1c51@aX1c4e aX1c52@aX1c50) (let ((aX1c55@outer-maps aX1c52@aX1c50) (aX1c56@outer-var aX1c51@aX1c4e)) (let ((aX1c59@t (assq aX1c56@outer-var (car aX1c48@maps)))) (if aX1c59@t ((lambda (aX1c5b@b) (values (cdr aX1c5b@b) aX1c48@maps)) aX1c59@t) (let ((aX1c5d@inner-var (aXafd@gen-lexical 'tmp))) (values aX1c5d@inner-var (cons (cons (cons aX1c56@outer-var aX1c5d@inner-var) (car aX1c48@maps)) aX1c55@outer-maps)))))))))))) (set! aX1bec@gen-append (lambda (aX1c41@x aX1c42@y) (if (fast-equal? aX1c42@y ''()) aX1c41@x (list 'append aX1c41@x aX1c42@y)))) (set! aX1bee@gen-mappend (lambda (aX1c3d@e aX1c3e@map-env) (list 'apply '(primitive append) (aX1bf0@gen-map aX1c3d@e aX1c3e@map-env)))) (set! aX1bf0@gen-map (lambda (aX1c2b@e aX1c2c@map-env) (let ((aX1c2f@formals (map cdr aX1c2c@map-env)) (aX1c30@actuals (map (lambda (aX1c33@x) (list 'ref (car aX1c33@x))) aX1c2c@map-env))) (if (eq? (car aX1c2b@e) 'ref) (car aX1c30@actuals) (if (for-all (lambda (aX1c35@x) (and (eq? (car aX1c35@x) 'ref) (memq (cadr aX1c35@x) aX1c2f@formals))) (cdr aX1c2b@e)) (let ((aX1c37@args (map (let ((aX1c39@r (map cons aX1c2f@formals aX1c30@actuals))) (lambda (aX1c3b@x) (cdr (assq (cadr aX1c3b@x) aX1c39@r)))) (cdr aX1c2b@e)))) (cons 'map (cons (list 'primitive (car aX1c2b@e)) aX1c37@args))) (cons* 'map (list 'lambda aX1c2f@formals aX1c2b@e) aX1c30@actuals)))))) (set! aX1bf2@gen-cons (lambda (aX1c1b@e aX1c1c@x aX1c1d@y aX1c1e@xnew aX1c1f@ynew) (let ((aX1c25@t (car aX1c1f@ynew))) (if (memv aX1c25@t '(quote)) (if (eq? (car aX1c1e@xnew) 'quote) (let ((aX1c27@xnew (cadr aX1c1e@xnew)) (aX1c28@ynew (cadr aX1c1f@ynew))) (if (and (eq? aX1c27@xnew aX1c1c@x) (eq? aX1c28@ynew aX1c1d@y)) (list 'quote aX1c1b@e) (list 'quote (cons aX1c27@xnew aX1c28@ynew)))) (if (null? (cadr aX1c1f@ynew)) (list 'list aX1c1e@xnew) (list 'cons aX1c1e@xnew aX1c1f@ynew))) (if (memv aX1c25@t '(list)) (cons 'list (cons aX1c1e@xnew (cdr aX1c1f@ynew))) (list 'cons aX1c1e@xnew aX1c1f@ynew)))))) (set! aX1bf4@gen-vector (lambda (aX1c15@e aX1c16@ls aX1c17@lsnew) (if (eq? (car aX1c17@lsnew) 'quote) (if (eq? (cadr aX1c17@lsnew) aX1c16@ls) (list 'quote aX1c15@e) (list 'quote (list->vector (cadr aX1c17@lsnew)))) (if (eq? (car aX1c17@lsnew) 'list) (cons 'vector (cdr aX1c17@lsnew)) (list 'list->vector aX1c17@lsnew))))) (set! aX1bf6@regen (lambda (aX1c0f@x) (let ((aX1c11@t (car aX1c0f@x))) (if (memv aX1c11@t '(ref)) (cadr aX1c0f@x) (if (memv aX1c11@t '(primitive)) (list 'primitive (cadr aX1c0f@x)) (if (memv aX1c11@t '(quote)) (list 'quote (cadr aX1c0f@x)) (if (memv aX1c11@t '(lambda)) (aXad8@aXa04@build-lambda '#f (cadr aX1c0f@x) (aX1bf6@regen (caddr aX1c0f@x))) (if (memv aX1c11@t '(map)) (let ((aX1c13@ls (map aX1bf6@regen (cdr aX1c0f@x)))) (cons '(primitive ellipsis-map) aX1c13@ls)) (cons (list 'primitive (car aX1c0f@x)) (map aX1bf6@regen (cdr aX1c0f@x))))))))))) (lambda (aX1bf7@e aX1bf8@r aX1bf9@mr) (let ((aX1bfd@t aX1bf7@e)) (let ((aX1bff@ls/false (aXd7c@syntax-dispatch aX1bfd@t '(_ any)))) (if aX1bff@ls/false (apply (lambda (aX1c01@x) (call-with-values (lambda () (aX1be8@gen-syntax aX1bf7@e aX1c01@x aX1bf8@r '() aXd7e@ellipsis? '#f)) (lambda (aX1c07@aX1c04 aX1c08@aX1c06) (let ((aX1c0b@maps aX1c08@aX1c06) (aX1c0c@e aX1c07@aX1c04)) (aX1bf6@regen aX1c0c@e))))) aX1bff@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1bfd@t)))))))) (set! aX2858@aXd88@syntax-transformer aXd88@syntax-transformer) (set! aXd8a@core-macro-transformer (lambda (aX1d2f@name) (let ((aX1d31@t aX1d2f@name)) (if (memv aX1d31@t '(quote)) aXd2c@quote-transformer (if (memv aX1d31@t '(lambda)) aXd30@lambda-transformer (if (memv aX1d31@t '(case-lambda)) aXd2e@case-lambda-transformer (if (memv aX1d31@t '(letrec)) aXd14@letrec-transformer (if (memv aX1d31@t '(letrec*)) aXd16@letrec*-transformer (if (memv aX1d31@t '(let)) aXd12@let-transformer (if (memv aX1d31@t '(if)) aXd24@if-transformer (if (memv aX1d31@t '(and)) aXd26@and-transformer (if (memv aX1d31@t '(or)) aXd28@or-transformer (if (memv aX1d31@t '(foreign-call)) aXd78@foreign-call-transformer (if (memv aX1d31@t '(syntax-case)) aXd84@syntax-case-transformer (if (memv aX1d31@t '(syntax)) aXd88@syntax-transformer (if (memv aX1d31@t '(type-descriptor)) aXd1a@type-descriptor-transformer (if (memv aX1d31@t '(record-type-descriptor)) aXd1c@record-type-descriptor-transformer (if (memv aX1d31@t '(record-constructor-descriptor)) aXd1e@record-constructor-descriptor-transformer (if (memv aX1d31@t '(fluid-let-syntax)) aXd18@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" aX1d2f@name)))))))))))))))))))) (set! aX2859@aXd8a@core-macro-transformer aXd8a@core-macro-transformer) (set! aXd8c@symbol-macro (lambda (aX1d33@x aX1d34@set) (let ((aX1d37@t aX1d33@x)) (let ((aX1d39@ls/false (aXd7c@syntax-dispatch aX1d37@t '(_ any)))) (if (and aX1d39@ls/false (apply (lambda (aX1d3b@name) (and (aXb75@id? aX1d3b@name) (memq (aXb77@id->sym aX1d3b@name) aX1d34@set))) aX1d39@ls/false)) (apply (lambda (aX1d3d@name) (aXd32@bless (list 'quote aX1d3d@name))) aX1d39@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1d37@t)))))) (set! aX285a@aXd8c@symbol-macro aXd8c@symbol-macro) (set! aXd8e@macro-transformer (lambda (aX1d3f@x) (if (procedure? aX1d3f@x) aX1d3f@x (if (symbol? aX1d3f@x) (let ((aX1d41@t aX1d3f@x)) (if (memv aX1d41@t '(define-record-type)) aXd70@define-record-type-macro (if (memv aX1d41@t '(define-struct)) aXd6e@define-struct-macro (if (memv aX1d41@t '(include)) aXd64@include-macro (if (memv aX1d41@t '(cond)) aXd60@cond-macro (if (memv aX1d41@t '(let)) aXd38@let-macro (if (memv aX1d41@t '(do)) aXd58@do-macro (if (memv aX1d41@t '(or)) aXd5c@or-macro (if (memv aX1d41@t '(and)) aXd5e@and-macro (if (memv aX1d41@t '(let*)) aXd5a@let*-macro (if (memv aX1d41@t '(let-values)) aXd3a@let-values-macro (if (memv aX1d41@t '(let*-values)) aXd3c@let*-values-macro (if (memv aX1d41@t '(syntax-rules)) aXd68@syntax-rules-macro (if (memv aX1d41@t '(quasiquote)) aXd6a@quasiquote-macro (if (memv aX1d41@t '(quasisyntax)) aXd6c@quasisyntax-macro (if (memv aX1d41@t '(with-syntax)) aXd34@with-syntax-macro (if (memv aX1d41@t '(when)) aXd20@when-macro (if (memv aX1d41@t '(unless)) aXd22@unless-macro (if (memv aX1d41@t '(case)) aXd2a@case-macro (if (memv aX1d41@t '(identifier-syntax)) aXd56@identifier-syntax-macro (if (memv aX1d41@t '(time)) aXd4e@time-macro (if (memv aX1d41@t '(delay)) aXd50@delay-macro (if (memv aX1d41@t '(assert)) aXd52@assert-macro (if (memv aX1d41@t '(endianness)) aXd54@endianness-macro (if (memv aX1d41@t '(guard)) aXd4a@guard-macro (if (memv aX1d41@t '(define-enumeration)) aXd4c@define-enumeration-macro (if (memv aX1d41@t '(trace-lambda)) aXd3e@trace-lambda-macro (if (memv aX1d41@t '(trace-define)) aXd40@trace-define-macro (if (memv aX1d41@t '(trace-define-syntax)) aXd42@trace-define-syntax-macro (if (memv aX1d41@t '(trace-let-syntax)) aXd46@trace-let-syntax-macro (if (memv aX1d41@t '(trace-letrec-syntax)) aXd48@trace-letrec-syntax-macro (if (memv aX1d41@t '(define-condition-type)) aXd72@define-condition-type-macro (if (memv aX1d41@t '(parameterize)) aXd76@parameterize-macro (if (memv aX1d41@t '(include-into)) aXd66@include-into-macro (if (memv aX1d41@t '(eol-style)) (lambda (aX1d43@x) (aXd8c@symbol-macro aX1d43@x '(none lf cr crlf nel crnel ls))) (if (memv aX1d41@t '(error-handling-mode)) (lambda (aX1d45@x) (aXd8c@symbol-macro aX1d45@x '(ignore raise replace))) (if (memv aX1d41@t '(buffer-mode)) (lambda (aX1d47@x) (aXd8c@symbol-macro aX1d47@x '(none line block))) (if (memv aX1d41@t '(file-options)) aXaf0@file-options-macro (if (memv aX1d41@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) aXd74@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" aX1d3f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" aX1d3f@x))))) (set! aX285b@aXd8e@macro-transformer aXd8e@macro-transformer) (set! aXd90@local-macro-transformer (lambda (aX1d49@x) (car aX1d49@x))) (set! aX285c@aXd90@local-macro-transformer aXd90@local-macro-transformer) (set! aXd92@do-macro-call (lambda (aX1d4b@transformer aX1d4c@expr) (let ((aX1d4f@out (aX1d4b@transformer (aXb5f@add-mark aXb59@anti-mark aX1d4c@expr '#f)))) (begin (let aX1d53@f ((aX1d51@x aX1d4f@out)) (if (not (aXb41@stx? aX1d51@x)) (if (pair? aX1d51@x) (begin (aX1d53@f (car aX1d51@x)) (aX1d53@f (cdr aX1d51@x))) (if (vector? aX1d51@x) (vector-for-each aX1d53@f aX1d51@x) (if (symbol? aX1d51@x) (aXe5c@syntax-violation '#f '"raw symbol encountered in output of macro" aX1d4c@expr aX1d51@x) (void)))) (void))) (aXb5f@add-mark (aXb57@gen-mark) aX1d4f@out aX1d4c@expr))))) (set! aX285d@aXd92@do-macro-call aXd92@do-macro-call) (set! aXd94@chi-macro (lambda (aX1d55@p aX1d56@e) (aXd92@do-macro-call (aXd8e@macro-transformer aX1d55@p) aX1d56@e))) (set! aX285e@aXd94@chi-macro aXd94@chi-macro) (set! aXd96@chi-local-macro (lambda (aX1d59@p aX1d5a@e) (aXd92@do-macro-call (aXd90@local-macro-transformer aX1d59@p) aX1d5a@e))) (set! aX285f@aXd96@chi-local-macro aXd96@chi-local-macro) (set! aXd98@chi-global-macro (lambda (aX1d5d@p aX1d5e@e) (let ((aX1d61@lib (car aX1d5d@p)) (aX1d62@loc (cdr aX1d5d@p))) (begin (aX98c@aX7db@visit-library aX1d61@lib) (let ((aX1d65@x (symbol-value aX1d62@loc))) (let ((aX1d67@transformer (if (procedure? aX1d65@x) aX1d65@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" aX1d65@x)))) (aXd92@do-macro-call aX1d67@transformer aX1d5e@e))))))) (set! aX2860@aXd98@chi-global-macro aXd98@chi-global-macro) (set! aXd9a@chi-expr* (lambda (aX1d69@e* aX1d6a@r aX1d6b@mr) (if (null? aX1d69@e*) '() (let ((aX1d6f@e (aXd9e@chi-expr (car aX1d69@e*) aX1d6a@r aX1d6b@mr))) (cons aX1d6f@e (aXd9a@chi-expr* (cdr aX1d69@e*) aX1d6a@r aX1d6b@mr)))))) (set! aX2861@aXd9a@chi-expr* aXd9a@chi-expr*) (set! aXd9c@chi-application (lambda (aX1d71@e aX1d72@r aX1d73@mr) (let ((aX1d77@t aX1d71@e)) (let ((aX1d79@ls/false (aXd7c@syntax-dispatch aX1d77@t '(any . each-any)))) (if aX1d79@ls/false (apply (lambda (aX1d7b@rator aX1d7c@rands) (let ((aX1d7f@rator (aXd9e@chi-expr aX1d7b@rator aX1d72@r aX1d73@mr))) (cons aX1d7f@rator (aXd9a@chi-expr* aX1d7c@rands aX1d72@r aX1d73@mr)))) aX1d79@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1d77@t)))))) (set! aX2862@aXd9c@chi-application aXd9c@chi-application) (set! aXd9e@chi-expr (lambda (aX1d81@e aX1d82@r aX1d83@mr) (call-with-values (lambda () (aXb97@syntax-type aX1d81@e aX1d82@r)) (lambda (aX1d8d@aX1d88 aX1d8e@aX1d8a aX1d8f@aX1d8c) (let ((aX1d93@kwd aX1d8f@aX1d8c) (aX1d94@value aX1d8e@aX1d8a) (aX1d95@type aX1d8d@aX1d88)) (let ((aX1d99@t aX1d95@type)) (if (memv aX1d99@t '(core-macro)) (let ((aX1d9b@transformer (aXd8a@core-macro-transformer aX1d94@value))) (aX1d9b@transformer aX1d81@e aX1d82@r aX1d83@mr)) (if (memv aX1d99@t '(global)) (let ((aX1d9d@lib (car aX1d94@value))) (let ((aX1d9f@loc (cdr aX1d94@value))) (begin ((aXde4@inv-collector) aX1d9d@lib) aX1d9f@loc))) (if (memv aX1d99@t '(core-prim)) (let ((aX1da1@name aX1d94@value)) (list 'primitive aX1da1@name)) (if (memv aX1d99@t '(call)) (aXd9c@chi-application aX1d81@e aX1d82@r aX1d83@mr) (if (memv aX1d99@t '(lexical)) (let ((aX1da3@lex (aXd06@lexical-var aX1d94@value))) aX1da3@lex) (if (memv aX1d99@t '(global-macro global-macro!)) (aXd9e@chi-expr (aXd98@chi-global-macro aX1d94@value aX1d81@e) aX1d82@r aX1d83@mr) (if (memv aX1d99@t '(local-macro local-macro!)) (aXd9e@chi-expr (aXd96@chi-local-macro aX1d94@value aX1d81@e) aX1d82@r aX1d83@mr) (if (memv aX1d99@t '(macro macro!)) (aXd9e@chi-expr (aXd94@chi-macro aX1d94@value aX1d81@e) aX1d82@r aX1d83@mr) (if (memv aX1d99@t '(constant)) (let ((aX1da5@datum aX1d94@value)) (list 'quote aX1da5@datum)) (if (memv aX1d99@t '(set!)) (aXda0@chi-set! aX1d81@e aX1d82@r aX1d83@mr) (if (memv aX1d99@t '(begin)) (let ((aX1da7@t aX1d81@e)) (let ((aX1da9@ls/false (aXd7c@syntax-dispatch aX1da7@t '(_ any . each-any)))) (if aX1da9@ls/false (apply (lambda (aX1dab@x aX1dac@x*) (aXada@aXa34@build-sequence '#f (aXd9a@chi-expr* (cons aX1dab@x aX1dac@x*) aX1d82@r aX1d83@mr))) aX1da9@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1da7@t)))) (if (memv aX1d99@t '(let-syntax letrec-syntax)) (let ((aX1daf@t aX1d81@e)) (let ((aX1db1@ls/false (aXd7c@syntax-dispatch aX1daf@t '(_ #(each (any any)) any . each-any)))) (if (and aX1db1@ls/false (apply (lambda (aX1db3@xlhs* aX1db4@xrhs* aX1db5@xbody aX1db6@xbody*) (if (not (aXb7d@valid-bound-ids? aX1db3@xlhs*)) (aXe5c@syntax-violation '#f '"invalid identifiers" aX1d81@e) (void))) aX1db1@ls/false)) (apply (lambda (aX1dbb@xlhs* aX1dbc@xrhs* aX1dbd@xbody aX1dbe@xbody*) (let ((aX1dc3@xlab* (map aXb01@gen-label aX1dbb@xlhs*))) (let ((aX1dc5@xrib (aXb35@make-full-rib aX1dbb@xlhs* aX1dc3@xlab*))) (let ((aX1dc7@xb* (map (lambda (aX1dc9@x) (aXbad@make-eval-transformer (aXdd6@expand-transformer (if (eq? aX1d95@type 'let-syntax) aX1dc9@x (aXb61@add-subst aX1dc5@xrib aX1dc9@x)) aX1d83@mr))) aX1dbc@xrhs*))) (aXada@aXa34@build-sequence '#f (aXd9a@chi-expr* (map (lambda (aX1dcb@x) (aXb61@add-subst aX1dc5@xrib aX1dcb@x)) (cons aX1dbd@xbody aX1dbe@xbody*)) (append (map cons aX1dc3@xlab* aX1dc7@xb*) aX1d82@r) (append (map cons aX1dc3@xlab* aX1dc7@xb*) aX1d83@mr))))))) aX1db1@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1daf@t)))) (if (memv aX1d99@t '(displaced-lexical)) (aXe5c@syntax-violation '#f '"identifier out of context" aX1d81@e) (if (memv aX1d99@t '(syntax)) (aXe5c@syntax-violation '#f '"reference to pattern variable outside a syntax form" aX1d81@e) (if (memv aX1d99@t '(define define-syntax module import library)) (aXe5c@syntax-violation '#f (string-append (let ((aX1dcd@t aX1d95@type)) (if (memv aX1dcd@t '(define)) '"a definition" (if (memv aX1dcd@t '(define-syntax)) '"a define-syntax" (if (memv aX1dcd@t '(module)) '"a module definition" (if (memv aX1dcd@t '(library)) '"a library definition" (if (memv aX1dcd@t '(import)) '"an import declaration" (if (memv aX1dcd@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") aX1d81@e) (if (memv aX1d99@t '(mutable)) (aXe5c@syntax-violation '#f '"attempt to reference an unexportable variable" aX1d81@e) (aXe5c@syntax-violation '#f '"invalid expression" aX1d81@e))))))))))))))))))))))) (set! aX2863@aXd9e@chi-expr aXd9e@chi-expr) (set! aXda0@chi-set! (lambda (aX1dcf@e aX1dd0@r aX1dd1@mr) (let ((aX1dd5@t aX1dcf@e)) (let ((aX1dd7@ls/false (aXd7c@syntax-dispatch aX1dd5@t '(_ any any)))) (if (and aX1dd7@ls/false (apply (lambda (aX1dd9@x aX1dda@v) (aXb75@id? aX1dd9@x)) aX1dd7@ls/false)) (apply (lambda (aX1ddd@x aX1dde@v) (call-with-values (lambda () (aXb97@syntax-type aX1ddd@x aX1dd0@r)) (lambda (aX1de7@aX1de2 aX1de8@aX1de4 aX1de9@aX1de6) (let ((aX1ded@kwd aX1de9@aX1de6) (aX1dee@value aX1de8@aX1de4) (aX1def@type aX1de7@aX1de2)) (let ((aX1df3@t aX1def@type)) (if (memv aX1df3@t '(lexical)) (begin (aXd0a@set-lexical-mutable! aX1dee@value '#t) (list 'set! (aXd06@lexical-var aX1dee@value) (aXd9e@chi-expr aX1dde@v aX1dd0@r aX1dd1@mr))) (if (memv aX1df3@t '(core-prim)) (aXe5c@syntax-violation '#f '"cannot modify imported core primitive" aX1dcf@e) (if (memv aX1df3@t '(global)) (aXe5c@syntax-violation '#f '"attempt to modify imported binding" aX1dcf@e) (if (memv aX1df3@t '(global-macro!)) (aXd9e@chi-expr (aXd98@chi-global-macro aX1dee@value aX1dcf@e) aX1dd0@r aX1dd1@mr) (if (memv aX1df3@t '(local-macro!)) (aXd9e@chi-expr (aXd96@chi-local-macro aX1dee@value aX1dcf@e) aX1dd0@r aX1dd1@mr) (if (memv aX1df3@t '(mutable)) (aXe5c@syntax-violation '#f '"attempt to assign to an unexportable variable" aX1dcf@e) (aXe5c@syntax-violation '#f '"invalid syntax" aX1dcf@e)))))))))))) aX1dd7@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1dd5@t)))))) (set! aX2864@aXda0@chi-set! aXda0@chi-set!) (set! aXda2@verify-formals (lambda (aX1df5@fmls aX1df6@stx) (let ((aX1df9@t aX1df5@fmls)) (let ((aX1dfb@ls/false (aXd7c@syntax-dispatch aX1df9@t 'each-any))) (if aX1dfb@ls/false (apply (lambda (aX1dfd@x*) (if (not (aXb7d@valid-bound-ids? aX1dfd@x*)) (aXd36@invalid-fmls-error aX1df6@stx aX1df5@fmls) (void))) aX1dfb@ls/false) (let ((aX1dff@t aX1df9@t)) (let ((aX1e01@ls/false (aXd7c@syntax-dispatch aX1dff@t '#(each+ any () any)))) (if aX1e01@ls/false (apply (lambda (aX1e03@x* aX1e04@x) (if (not (aXb7d@valid-bound-ids? (cons aX1e04@x aX1e03@x*))) (aXd36@invalid-fmls-error aX1df6@stx aX1df5@fmls) (void))) aX1e01@ls/false) (let ((aX1e07@t aX1dff@t)) (let ((aX1e09@ls/false (aXd7c@syntax-dispatch aX1e07@t '_))) (if aX1e09@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid syntax" aX1df6@stx)) aX1e09@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1e07@t)))))))))))) (set! aX2865@aXda2@verify-formals aXda2@verify-formals) (set! aXda4@chi-lambda-clause (lambda (aX1e0b@stx aX1e0c@fmls aX1e0d@body* aX1e0e@r aX1e0f@mr) (let ((aX1e15@t aX1e0c@fmls)) (let ((aX1e17@ls/false (aXd7c@syntax-dispatch aX1e15@t 'each-any))) (if aX1e17@ls/false (apply (lambda (aX1e19@x*) (begin (aXda2@verify-formals aX1e0c@fmls aX1e0b@stx) (let ((aX1e1b@lex* (map aXafd@gen-lexical aX1e19@x*)) (aX1e1c@lab* (map aXb01@gen-label aX1e19@x*))) (values aX1e1b@lex* (aXdb4@chi-internal (aXb61@add-subst (aXb35@make-full-rib aX1e19@x* aX1e1c@lab*) aX1e0d@body*) (aXd0e@add-lexicals aX1e1c@lab* aX1e1b@lex* aX1e0e@r) aX1e0f@mr))))) aX1e17@ls/false) (let ((aX1e1f@t aX1e15@t)) (let ((aX1e21@ls/false (aXd7c@syntax-dispatch aX1e1f@t '#(each+ any () any)))) (if aX1e21@ls/false (apply (lambda (aX1e23@x* aX1e24@x) (begin (aXda2@verify-formals aX1e0c@fmls aX1e0b@stx) (let ((aX1e27@lex* (map aXafd@gen-lexical aX1e23@x*)) (aX1e28@lab* (map aXb01@gen-label aX1e23@x*)) (aX1e29@lex (aXafd@gen-lexical aX1e24@x)) (aX1e2a@lab (aXb01@gen-label aX1e24@x))) (values (append aX1e27@lex* aX1e29@lex) (aXdb4@chi-internal (aXb61@add-subst (aXb35@make-full-rib (cons aX1e24@x aX1e23@x*) (cons aX1e2a@lab aX1e28@lab*)) aX1e0d@body*) (aXd0e@add-lexicals (cons aX1e2a@lab aX1e28@lab*) (cons aX1e29@lex aX1e27@lex*) aX1e0e@r) aX1e0f@mr))))) aX1e21@ls/false) (let ((aX1e2f@t aX1e1f@t)) (let ((aX1e31@ls/false (aXd7c@syntax-dispatch aX1e2f@t '_))) (if aX1e31@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid syntax" aX1e0c@fmls)) aX1e31@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1e2f@t)))))))))))) (set! aX2866@aXda4@chi-lambda-clause aXda4@chi-lambda-clause) (set! aXda6@chi-lambda-clause* (lambda (aX1e33@stx aX1e34@fmls* aX1e35@body** aX1e36@r aX1e37@mr) (if (null? aX1e34@fmls*) (values '() '()) (call-with-values (lambda () (aXda4@chi-lambda-clause aX1e33@stx (car aX1e34@fmls*) (car aX1e35@body**) aX1e36@r aX1e37@mr)) (lambda (aX1e41@aX1e3e aX1e42@aX1e40) (let ((aX1e45@b aX1e42@aX1e40) (aX1e46@a aX1e41@aX1e3e)) (call-with-values (lambda () (aXda6@chi-lambda-clause* aX1e33@stx (cdr aX1e34@fmls*) (cdr aX1e35@body**) aX1e36@r aX1e37@mr)) (lambda (aX1e4d@aX1e4a aX1e4e@aX1e4c) (let ((aX1e51@b* aX1e4e@aX1e4c) (aX1e52@a* aX1e4d@aX1e4a)) (values (cons aX1e46@a aX1e52@a*) (cons aX1e45@b aX1e51@b*))))))))))) (set! aX2867@aXda6@chi-lambda-clause* aXda6@chi-lambda-clause*) (set! aXda8@chi-defun (lambda (aX1e55@x aX1e56@r aX1e57@mr) (let ((aX1e5b@fmls (car aX1e55@x)) (aX1e5c@body* (cdr aX1e55@x))) (call-with-values (lambda () (aXda4@chi-lambda-clause aX1e5b@fmls aX1e5b@fmls aX1e5c@body* aX1e56@r aX1e57@mr)) (lambda (aX1e63@aX1e60 aX1e64@aX1e62) (let ((aX1e67@body aX1e64@aX1e62) (aX1e68@fmls aX1e63@aX1e60)) (aXad8@aXa04@build-lambda '#f aX1e68@fmls aX1e67@body))))))) (set! aX2868@aXda8@chi-defun aXda8@chi-defun) (set! aXdaa@chi-rhs (lambda (aX1e6b@rhs aX1e6c@r aX1e6d@mr) (let ((aX1e71@t (car aX1e6b@rhs))) (if (memv aX1e71@t '(defun)) (aXda8@chi-defun (cdr aX1e6b@rhs) aX1e6c@r aX1e6d@mr) (if (memv aX1e71@t '(expr)) (let ((aX1e73@expr (cdr aX1e6b@rhs))) (aXd9e@chi-expr aX1e73@expr aX1e6c@r aX1e6d@mr)) (if (memv aX1e71@t '(top-expr)) (let ((aX1e75@expr (cdr aX1e6b@rhs))) (aXada@aXa34@build-sequence '#f (list (aXd9e@chi-expr aX1e75@expr aX1e6c@r aX1e6d@mr) (aXadb@aXa36@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" aX1e6b@rhs))))))) (set! aX2869@aXdaa@chi-rhs aXdaa@chi-rhs) (set! aXdac@expand-interaction-rhs*/init* (lambda (aX1e77@lhs* aX1e78@rhs* aX1e79@init* aX1e7a@r aX1e7b@mr) (let aX1e85@f ((aX1e81@lhs* aX1e77@lhs*) (aX1e82@rhs* aX1e78@rhs*)) (if (null? aX1e81@lhs*) (map (lambda (aX1e87@x) (aXd9e@chi-expr aX1e87@x aX1e7a@r aX1e7b@mr)) aX1e79@init*) (let ((aX1e89@lhs (car aX1e81@lhs*)) (aX1e8a@rhs (car aX1e82@rhs*))) (let ((aX1e8d@t (car aX1e8a@rhs))) (if (memv aX1e8d@t '(defun)) (let ((aX1e8f@rhs (aXda8@chi-defun (cdr aX1e8a@rhs) aX1e7a@r aX1e7b@mr))) (cons (list 'set! aX1e89@lhs aX1e8f@rhs) (aX1e85@f (cdr aX1e81@lhs*) (cdr aX1e82@rhs*)))) (if (memv aX1e8d@t '(expr)) (let ((aX1e91@rhs (aXd9e@chi-expr (cdr aX1e8a@rhs) aX1e7a@r aX1e7b@mr))) (cons (list 'set! aX1e89@lhs aX1e91@rhs) (aX1e85@f (cdr aX1e81@lhs*) (cdr aX1e82@rhs*)))) (if (memv aX1e8d@t '(top-expr)) (let ((aX1e93@e (aXd9e@chi-expr (cdr aX1e8a@rhs) aX1e7a@r aX1e7b@mr))) (cons aX1e93@e (aX1e85@f (cdr aX1e81@lhs*) (cdr aX1e82@rhs*)))) (error 'expand-interaction '"invallid" aX1e8a@rhs)))))))))) (set! aX286a@aXdac@expand-interaction-rhs*/init* aXdac@expand-interaction-rhs*/init*) (set! aXdae@chi-rhs* (lambda (aX1e95@rhs* aX1e96@r aX1e97@mr) (let aX1e9d@f ((aX1e9b@ls aX1e95@rhs*)) (if (null? aX1e9b@ls) '() (let ((aX1e9f@a (aXdaa@chi-rhs (car aX1e9b@ls) aX1e96@r aX1e97@mr))) (cons aX1e9f@a (aX1e9d@f (cdr aX1e9b@ls)))))))) (set! aX286b@aXdae@chi-rhs* aXdae@chi-rhs*) (set! aXdb0@find-bound=? (lambda (aX1ea1@x aX1ea2@lhs* aX1ea3@rhs*) (if (null? aX1ea2@lhs*) '#f (if (aXb79@bound-id=? aX1ea1@x (car aX1ea2@lhs*)) (car aX1ea3@rhs*) (aXdb0@find-bound=? aX1ea1@x (cdr aX1ea2@lhs*) (cdr aX1ea3@rhs*)))))) (set! aX286c@aXdb0@find-bound=? aXdb0@find-bound=?) (set! aXdb2@find-dups (lambda (aX1ea7@ls) (let aX1ead@f ((aX1ea9@ls aX1ea7@ls) (aX1eaa@dups '())) (if (null? aX1ea9@ls) aX1eaa@dups (let ((aX1eaf@t (aXdb0@find-bound=? (car aX1ea9@ls) (cdr aX1ea9@ls) (cdr aX1ea9@ls)))) (if aX1eaf@t ((lambda (aX1eb1@x) (aX1ead@f (cdr aX1ea9@ls) (cons (list (car aX1ea9@ls) aX1eb1@x) aX1eaa@dups))) aX1eaf@t) (aX1ead@f (cdr aX1ea9@ls) aX1eaa@dups))))))) (set! aX286d@aXdb2@find-dups aXdb2@find-dups) (set! aXdb4@chi-internal (lambda (aX1eb3@e* aX1eb4@r aX1eb5@mr) (let ((aX1eb9@rib (aXb29@make-empty-rib))) (call-with-values (lambda () (aXdd4@chi-body* (map (lambda (aX1ecb@x) (aXb61@add-subst aX1eb9@rib aX1ecb@x)) (aXb73@syntax->list aX1eb3@e*)) aX1eb4@r aX1eb5@mr '() '() '() '() '() aX1eb9@rib '#f)) (lambda (aX1ecd@aX1ebc aX1ece@aX1ebe aX1ecf@aX1ec0 aX1ed0@aX1ec2 aX1ed1@aX1ec4 aX1ed2@aX1ec6 aX1ed3@aX1ec8 aX1ed4@aX1eca) (let ((aX1edd@_exp* aX1ed4@aX1eca) (aX1ede@kwd* aX1ed3@aX1ec8) (aX1edf@mod** aX1ed2@aX1ec6) (aX1ee0@rhs* aX1ed1@aX1ec4) (aX1ee1@lex* aX1ed0@aX1ec2) (aX1ee2@mr aX1ecf@aX1ec0) (aX1ee3@r aX1ece@aX1ebe) (aX1ee4@e* aX1ecd@aX1ebc)) (begin (if (null? aX1ee4@e*) (aXe5c@syntax-violation '#f '"no expression in body" aX1ee4@e*) (void)) (let ((aX1eed@init* (aXd9a@chi-expr* (append (apply append (reverse aX1edf@mod**)) aX1ee4@e*) aX1ee3@r aX1ee2@mr))) (let ((aX1eef@rhs* (aXdae@chi-rhs* aX1ee0@rhs* aX1ee3@r aX1ee2@mr))) (aXadf@aXa3e@build-letrec* '#f (reverse aX1ee1@lex*) (reverse aX1eef@rhs*) (aXada@aXa34@build-sequence '#f aX1eed@init*))))))))))) (set! aX286e@aXdb4@chi-internal aXdb4@chi-internal) (set! aXdb6@parse-module (lambda (aX1ef1@e) (let ((aX1ef3@t aX1ef1@e)) (let ((aX1ef5@ls/false (aXd7c@syntax-dispatch aX1ef3@t '(_ each-any . each-any)))) (if aX1ef5@ls/false (apply (lambda (aX1ef7@export* aX1ef8@b*) (begin (if (not (for-all aXb75@id? aX1ef7@export*)) (aXe5c@syntax-violation '#f '"module exports must be identifiers" aX1ef1@e) (void)) (values '#f (list->vector aX1ef7@export*) aX1ef8@b*))) aX1ef5@ls/false) (let ((aX1efb@t aX1ef3@t)) (let ((aX1efd@ls/false (aXd7c@syntax-dispatch aX1efb@t '(_ any each-any . each-any)))) (if aX1efd@ls/false (apply (lambda (aX1eff@name aX1f00@export* aX1f01@b*) (begin (if (not (aXb75@id? aX1eff@name)) (aXe5c@syntax-violation '#f '"module name must be an identifier" aX1ef1@e) (void)) (if (not (for-all aXb75@id? aX1f00@export*)) (aXe5c@syntax-violation '#f '"module exports must be identifiers" aX1ef1@e) (void)) (values aX1eff@name (list->vector aX1f00@export*) aX1f01@b*))) aX1efd@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1efb@t))))))))) (set! aX286f@aXdb6@parse-module aXdb6@parse-module) (set! aXdc0@module-interface? (lambda (aX1f05@x) (and (simple-struct? aX1f05@x) (eq? (simple-struct-name aX1f05@x) 'module-interface)))) (set! aX2870@aXdc0@module-interface? aXdc0@module-interface?) (set! aXdc2@module-interface-first-mark (lambda (aX1f07@x) (simple-struct-ref aX1f07@x '0))) (set! aX2871@aXdc2@module-interface-first-mark aXdc2@module-interface-first-mark) (set! aXdc4@set-module-interface-first-mark! (lambda (aX1f09@x aX1f0a@val) (simple-struct-set! aX1f09@x '0 aX1f0a@val))) (set! aX2872@aXdc4@set-module-interface-first-mark! aXdc4@set-module-interface-first-mark!) (set! aXdc6@module-interface-exp-id-vec (lambda (aX1f0d@x) (simple-struct-ref aX1f0d@x '1))) (set! aX2873@aXdc6@module-interface-exp-id-vec aXdc6@module-interface-exp-id-vec) (set! aXdc8@set-module-interface-exp-id-vec! (lambda (aX1f0f@x aX1f10@val) (simple-struct-set! aX1f0f@x '1 aX1f10@val))) (set! aX2874@aXdc8@set-module-interface-exp-id-vec! aXdc8@set-module-interface-exp-id-vec!) (set! aXdca@module-interface-exp-lab-vec (lambda (aX1f13@x) (simple-struct-ref aX1f13@x '2))) (set! aX2875@aXdca@module-interface-exp-lab-vec aXdca@module-interface-exp-lab-vec) (set! aXdcc@set-module-interface-exp-lab-vec! (lambda (aX1f15@x aX1f16@val) (simple-struct-set! aX1f15@x '2 aX1f16@val))) (set! aX2876@aXdcc@set-module-interface-exp-lab-vec! aXdcc@set-module-interface-exp-lab-vec!) (set! aXdce@dummy '3) (set! aX2877@aXdce@dummy aXdce@dummy) (set! aXdd0@module-interface-exp-id* (lambda (aX1f19@iface aX1f1a@id) (let ((aX1f1e@diff-marks '#f)) (begin (set! aX1f1e@diff-marks (lambda (aX1f25@ls aX1f26@x) (begin (if (null? aX1f25@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((aX1f29@a (car aX1f25@ls))) (if (eq? aX1f29@a aX1f26@x) '() (cons aX1f29@a (aX1f1e@diff-marks (cdr aX1f25@ls) aX1f26@x))))))) (let ((aX1f1f@diff (aX1f1e@diff-marks (aXb47@stx-mark* aX1f1a@id) (aXdc2@module-interface-first-mark aX1f19@iface))) (aX1f20@id-vec (aXdc6@module-interface-exp-id-vec aX1f19@iface))) (if (null? aX1f1f@diff) aX1f20@id-vec (vector-map (lambda (aX1f23@x) (make-simple-struct 'stx '5 (list (aXb43@stx-expr aX1f23@x) (append aX1f1f@diff (aXb47@stx-mark* aX1f23@x)) '() '()))) aX1f20@id-vec))))))) (set! aX2878@aXdd0@module-interface-exp-id* aXdd0@module-interface-exp-id*) (set! aXdd2@chi-internal-module (lambda (aX1f2b@e aX1f2c@r aX1f2d@mr aX1f2e@lex* aX1f2f@rhs* aX1f30@mod** aX1f31@kwd*) (call-with-values (lambda () (aXdb6@parse-module aX1f2b@e)) (lambda (aX1f3f@aX1f3a aX1f40@aX1f3c aX1f41@aX1f3e) (let ((aX1f45@e* aX1f41@aX1f3e) (aX1f46@exp-id* aX1f40@aX1f3c) (aX1f47@name aX1f3f@aX1f3a)) (let ((aX1f4b@rib (aXb29@make-empty-rib))) (let ((aX1f4d@e* (map (lambda (aX1f4f@x) (aXb61@add-subst aX1f4b@rib aX1f4f@x)) (aXb73@syntax->list aX1f45@e*)))) (call-with-values (lambda () (aXdd4@chi-body* aX1f4d@e* aX1f2c@r aX1f2d@mr aX1f2e@lex* aX1f2f@rhs* aX1f30@mod** aX1f31@kwd* '() aX1f4b@rib '#f)) (lambda (aX1f61@aX1f52 aX1f62@aX1f54 aX1f63@aX1f56 aX1f64@aX1f58 aX1f65@aX1f5a aX1f66@aX1f5c aX1f67@aX1f5e aX1f68@aX1f60) (let ((aX1f71@_exp* aX1f68@aX1f60) (aX1f72@kwd* aX1f67@aX1f5e) (aX1f73@mod** aX1f66@aX1f5c) (aX1f74@rhs* aX1f65@aX1f5a) (aX1f75@lex* aX1f64@aX1f58) (aX1f76@mr aX1f63@aX1f56) (aX1f77@r aX1f62@aX1f54) (aX1f78@e* aX1f61@aX1f52)) (let ((aX1f81@exp-lab* (vector-map (lambda (aX1f85@x) (or (aXb8b@id->label (make-simple-struct 'stx '5 (list (aXb77@id->sym aX1f85@x) (aXb47@stx-mark* aX1f85@x) (list aX1f4b@rib) '()))) (aXe5c@syntax-violation '#f '"cannot find module export" aX1f85@x))) aX1f46@exp-id*)) (aX1f82@mod** (cons aX1f78@e* aX1f73@mod**))) (if (not aX1f47@name) (values aX1f75@lex* aX1f74@rhs* aX1f46@exp-id* aX1f81@exp-lab* aX1f77@r aX1f76@mr aX1f82@mod** aX1f72@kwd*) (let ((aX1f87@lab (aXb01@gen-label 'module)) (aX1f88@iface (make-simple-struct 'module-interface '4 (list (car (aXb47@stx-mark* aX1f47@name)) (vector-map (lambda (aX1f8b@x) (make-simple-struct 'stx '5 (list (aXb43@stx-expr aX1f8b@x) (aXb47@stx-mark* aX1f8b@x) '() '()))) aX1f46@exp-id*) aX1f81@exp-lab*)))) (values aX1f75@lex* aX1f74@rhs* (vector aX1f47@name) (vector aX1f87@lab) (cons (cons aX1f87@lab (cons '$module aX1f88@iface)) aX1f77@r) (cons (cons aX1f87@lab (cons '$module aX1f88@iface)) aX1f76@mr) aX1f82@mod** aX1f72@kwd*)))))))))))))) (set! aX2879@aXdd2@chi-internal-module aXdd2@chi-internal-module) (set! aXdd4@chi-body* (lambda (aX1f8d@e* aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1f93@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?) (if (null? aX1f8d@e*) (values aX1f8d@e* aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1f93@kwd* aX1f94@exp*) (let ((aX1fa1@e (car aX1f8d@e*))) (call-with-values (lambda () (aXb97@syntax-type aX1fa1@e aX1f8e@r)) (lambda (aX1fa9@aX1fa4 aX1faa@aX1fa6 aX1fab@aX1fa8) (let ((aX1faf@kwd aX1fab@aX1fa8) (aX1fb0@value aX1faa@aX1fa6) (aX1fb1@type aX1fa9@aX1fa4)) (let ((aX1fb5@kwd* (if (aXb75@id? aX1faf@kwd) (cons aX1faf@kwd aX1f93@kwd*) aX1f93@kwd*))) (let ((aX1fb7@t aX1fb1@type)) (if (memv aX1fb7@t '(define)) (call-with-values (lambda () (aXcfe@parse-define aX1fa1@e)) (lambda (aX1fbd@aX1fba aX1fbe@aX1fbc) (let ((aX1fc1@rhs aX1fbe@aX1fbc) (aX1fc2@id aX1fbd@aX1fba)) (begin (if (aXb81@bound-id-member? aX1fc2@id aX1fb5@kwd*) (aXe5c@syntax-violation '#f '"cannot redefine keyword" aX1fa1@e) (void)) (call-with-values (lambda () (aXb05@gen-define-label+loc aX1fc2@id aX1f95@rib)) (lambda (aX1fc9@aX1fc6 aX1fca@aX1fc8) (let ((aX1fcd@lex aX1fca@aX1fc8) (aX1fce@lab aX1fc9@aX1fc6)) (begin (aXb2b@extend-rib! aX1f95@rib aX1fc2@id aX1fce@lab) (aXdd4@chi-body* (cdr aX1f8d@e*) (aXd0c@add-lexical aX1fce@lab aX1fcd@lex aX1f8e@r) aX1f8f@mr (cons aX1fcd@lex aX1f90@lex*) (cons aX1fc1@rhs aX1f91@rhs*) aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?))))))))) (if (memv aX1fb7@t '(define-syntax)) (call-with-values (lambda () (aXd00@parse-define-syntax aX1fa1@e)) (lambda (aX1fd5@aX1fd2 aX1fd6@aX1fd4) (let ((aX1fd9@rhs aX1fd6@aX1fd4) (aX1fda@id aX1fd5@aX1fd2)) (begin (if (aXb81@bound-id-member? aX1fda@id aX1fb5@kwd*) (aXe5c@syntax-violation '#f '"cannot redefine keyword" aX1fa1@e) (void)) (let ((aX1fdd@lab (aXb07@gen-define-label aX1fda@id aX1f95@rib)) (aX1fde@expanded-rhs (aXdd6@expand-transformer aX1fd9@rhs aX1f8f@mr))) (begin (aXb2b@extend-rib! aX1f95@rib aX1fda@id aX1fdd@lab) (let ((aX1fe1@b (aXbad@make-eval-transformer aX1fde@expanded-rhs))) (aXdd4@chi-body* (cdr aX1f8d@e*) (cons (cons aX1fdd@lab aX1fe1@b) aX1f8e@r) (cons (cons aX1fdd@lab aX1fe1@b) aX1f8f@mr) aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?)))))))) (if (memv aX1fb7@t '(let-syntax letrec-syntax)) (let ((aX1fe3@t aX1fa1@e)) (let ((aX1fe5@ls/false (aXd7c@syntax-dispatch aX1fe3@t '(_ #(each (any any)) . each-any)))) (if (and aX1fe5@ls/false (apply (lambda (aX1fe7@xlhs* aX1fe8@xrhs* aX1fe9@xbody*) (if (not (aXb7d@valid-bound-ids? aX1fe7@xlhs*)) (aXe5c@syntax-violation '#f '"invalid identifiers" aX1fa1@e) (void))) aX1fe5@ls/false)) (apply (lambda (aX1fed@xlhs* aX1fee@xrhs* aX1fef@xbody*) (let ((aX1ff3@xlab* (map aXb01@gen-label aX1fed@xlhs*))) (let ((aX1ff5@xrib (aXb35@make-full-rib aX1fed@xlhs* aX1ff3@xlab*))) (let ((aX1ff7@xb* (map (lambda (aX1ff9@x) (aXbad@make-eval-transformer (aXdd6@expand-transformer (if (eq? aX1fb1@type 'let-syntax) aX1ff9@x (aXb61@add-subst aX1ff5@xrib aX1ff9@x)) aX1f8f@mr))) aX1fee@xrhs*))) (aXdd4@chi-body* (append (map (lambda (aX1ffb@x) (aXb61@add-subst aX1ff5@xrib aX1ffb@x)) aX1fef@xbody*) (cdr aX1f8d@e*)) (append (map cons aX1ff3@xlab* aX1ff7@xb*) aX1f8e@r) (append (map cons aX1ff3@xlab* aX1ff7@xb*) aX1f8f@mr) aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?))))) aX1fe5@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1fe3@t)))) (if (memv aX1fb7@t '(begin)) (let ((aX1ffd@t aX1fa1@e)) (let ((aX1fff@ls/false (aXd7c@syntax-dispatch aX1ffd@t '(_ . each-any)))) (if aX1fff@ls/false (apply (lambda (aX2001@x*) (aXdd4@chi-body* (append aX2001@x* (cdr aX1f8d@e*)) aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?)) aX1fff@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX1ffd@t)))) (if (memv aX1fb7@t '(global-macro global-macro!)) (aXdd4@chi-body* (cons (aXb61@add-subst aX1f95@rib (aXd98@chi-global-macro aX1fb0@value aX1fa1@e)) (cdr aX1f8d@e*)) aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?) (if (memv aX1fb7@t '(local-macro local-macro!)) (aXdd4@chi-body* (cons (aXb61@add-subst aX1f95@rib (aXd96@chi-local-macro aX1fb0@value aX1fa1@e)) (cdr aX1f8d@e*)) aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?) (if (memv aX1fb7@t '(macro macro!)) (aXdd4@chi-body* (cons (aXb61@add-subst aX1f95@rib (aXd94@chi-macro aX1fb0@value aX1fa1@e)) (cdr aX1f8d@e*)) aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?) (if (memv aX1fb7@t '(module)) (call-with-values (lambda () (aXdd2@chi-internal-module aX1fa1@e aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd*)) (lambda (aX2013@aX2004 aX2014@aX2006 aX2015@aX2008 aX2016@aX200a aX2017@aX200c aX2018@aX200e aX2019@aX2010 aX201a@aX2012) (let ((aX2023@kwd* aX201a@aX2012) (aX2024@mod** aX2019@aX2010) (aX2025@mr aX2018@aX200e) (aX2026@r aX2017@aX200c) (aX2027@m-exp-lab* aX2016@aX200a) (aX2028@m-exp-id* aX2015@aX2008) (aX2029@rhs* aX2014@aX2006) (aX202a@lex* aX2013@aX2004)) (begin (vector-for-each (lambda (aX2033@id aX2034@lab) (aXb2b@extend-rib! aX1f95@rib aX2033@id aX2034@lab)) aX2028@m-exp-id* aX2027@m-exp-lab*) (aXdd4@chi-body* (cdr aX1f8d@e*) aX2026@r aX2025@mr aX202a@lex* aX2029@rhs* aX2024@mod** aX2023@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?))))) (if (memv aX1fb7@t '(library)) (begin (aXe3e@library-expander (aXb89@stx->datum aX1fa1@e)) (aXdd4@chi-body* (cdr aX1f8d@e*) aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?)) (if (memv aX1fb7@t '(export)) (let ((aX2037@t aX1fa1@e)) (let ((aX2039@ls/false (aXd7c@syntax-dispatch aX2037@t '(_ . each-any)))) (if aX2039@ls/false (apply (lambda (aX203b@exp-decl*) (aXdd4@chi-body* (cdr aX1f8d@e*) aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* (append aX203b@exp-decl* aX1f94@exp*) aX1f95@rib aX1f96@top?)) aX2039@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX2037@t)))) (if (memv aX1fb7@t '(import)) (let ((aX203e@module-import? '#f) (aX2040@module-import '#f) (aX2042@library-import '#f)) (begin (set! aX203e@module-import? (lambda (aX2091@e) (let ((aX2093@t aX2091@e)) (let ((aX2095@ls/false (aXd7c@syntax-dispatch aX2093@t '(_ any)))) (if (and aX2095@ls/false (apply (lambda (aX2097@id) (aXb75@id? aX2097@id)) aX2095@ls/false)) (apply (lambda (aX2099@id) '#t) aX2095@ls/false) (let ((aX209b@t aX2093@t)) (let ((aX209d@ls/false (aXd7c@syntax-dispatch aX209b@t '(_ . each-any)))) (if aX209d@ls/false (apply (lambda (aX209f@imp*) '#f) aX209d@ls/false) (let ((aX20a1@t aX209b@t)) (let ((aX20a3@ls/false (aXd7c@syntax-dispatch aX20a1@t '_))) (if aX20a3@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"malformed import form" aX2091@e)) aX20a3@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX20a1@t)))))))))))) (set! aX2040@module-import (lambda (aX206f@e aX2070@r) (let ((aX2073@t aX206f@e)) (let ((aX2075@ls/false (aXd7c@syntax-dispatch aX2073@t '(_ any)))) (if (and aX2075@ls/false (apply (lambda (aX2077@id) (aXb75@id? aX2077@id)) aX2075@ls/false)) (apply (lambda (aX2079@id) (call-with-values (lambda () (aXb97@syntax-type aX2079@id aX2070@r)) (lambda (aX2081@aX207c aX2082@aX207e aX2083@aX2080) (let ((aX2087@kwd aX2083@aX2080) (aX2088@value aX2082@aX207e) (aX2089@type aX2081@aX207c)) (let ((aX208d@t aX2089@type)) (if (memv aX208d@t '($module)) (let ((aX208f@iface aX2088@value)) (values (aXdd0@module-interface-exp-id* aX208f@iface aX2079@id) (aXdca@module-interface-exp-lab-vec aX208f@iface))) (aXe5c@syntax-violation '#f '"invalid import" aX206f@e))))))) aX2075@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX2073@t)))))) (set! aX2042@library-import (lambda (aX2053@e) (let ((aX2055@t aX2053@e)) (let ((aX2057@ls/false (aXd7c@syntax-dispatch aX2055@t '(any . each-any)))) (if aX2057@ls/false (apply (lambda (aX2059@ctxt aX205a@imp*) (call-with-values (lambda () (aXdde@parse-import-spec* (aXe62@syntax->datum aX205a@imp*))) (lambda (aX2061@aX205e aX2062@aX2060) (let ((aX2065@subst-labels aX2062@aX2060) (aX2066@subst-names aX2061@aX205e)) (values (vector-map (lambda (aX2069@name) (aXb55@datum->stx aX2059@ctxt aX2069@name)) aX2066@subst-names) aX2065@subst-labels))))) aX2057@ls/false) (let ((aX206b@t aX2055@t)) (let ((aX206d@ls/false (aXd7c@syntax-dispatch aX206b@t '_))) (if aX206d@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid import form" aX2053@e)) aX206d@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX206b@t))))))))) (begin (call-with-values (lambda () (if (aX203e@module-import? aX1fa1@e) (aX2040@module-import aX1fa1@e aX1f8e@r) (aX2042@library-import aX1fa1@e))) (lambda (aX2047@aX2044 aX2048@aX2046) (let ((aX204b@lab* aX2048@aX2046) (aX204c@id* aX2047@aX2044)) (vector-for-each (lambda (aX204f@id aX2050@lab) (aXb2b@extend-rib! aX1f95@rib aX204f@id aX2050@lab)) aX204c@id* aX204b@lab*)))) (aXdd4@chi-body* (cdr aX1f8d@e*) aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?)))) (if aX1f96@top? (aXdd4@chi-body* (cdr aX1f8d@e*) aX1f8e@r aX1f8f@mr (cons (aXafd@gen-lexical 'dummy) aX1f90@lex*) (cons (cons 'top-expr aX1fa1@e) aX1f91@rhs*) aX1f92@mod** aX1fb5@kwd* aX1f94@exp* aX1f95@rib aX1f96@top?) (values aX1f8d@e* aX1f8e@r aX1f8f@mr aX1f90@lex* aX1f91@rhs* aX1f92@mod** aX1fb5@kwd* aX1f94@exp*)))))))))))))))))))))) (set! aX287a@aXdd4@chi-body* aXdd4@chi-body*) (set! aXdd6@expand-transformer (lambda (aX20a5@expr aX20a6@r) (let ((aX20a9@rtc (aXde2@make-collector))) (let ((aX20ab@expanded-rhs (let ((aX20b5@aX20ae aXde4@inv-collector) (aX20b6@aX20b0 aXde6@vis-collector) (aX20b7@aX20b2 aX20a9@rtc) (aX20b8@aX20b4 (lambda (aX20bd@x) (values)))) (let ((aX20bf@swap (lambda () (begin (let ((aX20c1@t (aX20b5@aX20ae))) (begin (aX20b5@aX20ae aX20b7@aX20b2) (set! aX20b7@aX20b2 aX20c1@t))) (let ((aX20c3@t (aX20b6@aX20b0))) (begin (aX20b6@aX20b0 aX20b8@aX20b4) (set! aX20b8@aX20b4 aX20c3@t))))))) (dynamic-wind aX20bf@swap (lambda () (aXd9e@chi-expr aX20a5@expr aX20a6@r aX20a6@r)) aX20bf@swap))))) (begin (for-each (let ((aX20c5@mark-visit (aXde6@vis-collector))) (lambda (aX20c7@x) (begin (aX98b@aX7d9@invoke-library aX20c7@x) (aX20c5@mark-visit aX20c7@x)))) (aX20a9@rtc)) aX20ab@expanded-rhs))))) (set! aX287b@aXdd6@expand-transformer aXdd6@expand-transformer) (set! aXdd8@parse-exports (lambda (aX20c9@exp*) (let aX20d1@f ((aX20cb@exp* aX20c9@exp*) (aX20cc@int* '()) (aX20cd@ext* '())) (if (null? aX20cb@exp*) (begin (if (not (aXb7d@valid-bound-ids? aX20cd@ext*)) (aXe5c@syntax-violation 'export '"invalid exports" (aXdb2@find-dups aX20cd@ext*)) (void)) (values (map aXe62@syntax->datum aX20cd@ext*) aX20cc@int*)) (let ((aX20d3@t (car aX20cb@exp*))) (let ((aX20d5@ls/false (aXd7c@syntax-dispatch aX20d3@t '(any . #(each (any any)))))) (if aX20d5@ls/false (apply (lambda (aX20d7@rename aX20d8@i* aX20d9@e*) (begin (if (not (and (eq? (aXe62@syntax->datum aX20d7@rename) 'rename) (for-all aXb75@id? aX20d8@i*) (for-all aXb75@id? aX20d9@e*))) (aXe5c@syntax-violation 'export '"invalid export specifier" (car aX20cb@exp*)) (void)) (aX20d1@f (cdr aX20cb@exp*) (append aX20d8@i* aX20cc@int*) (append aX20d9@e* aX20cd@ext*)))) aX20d5@ls/false) (let ((aX20dd@t aX20d3@t)) (let ((aX20df@ls/false (aXd7c@syntax-dispatch aX20dd@t 'any))) (if aX20df@ls/false (apply (lambda (aX20e1@ie) (begin (if (not (aXb75@id? aX20e1@ie)) (aXe5c@syntax-violation 'export '"invalid export" aX20e1@ie) (void)) (aX20d1@f (cdr aX20cb@exp*) (cons aX20e1@ie aX20cc@int*) (cons aX20e1@ie aX20cd@ext*)))) aX20df@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX20dd@t))))))))))) (set! aX287c@aXdd8@parse-exports aXdd8@parse-exports) (set! aXdda@parse-library-name (lambda (aX20e3@spec) (let ((aX20e6@parse '#f)) (begin (set! aX20e6@parse (lambda (aX20f3@x) (let ((aX20f5@t aX20f3@x)) (let ((aX20f7@ls/false (aXd7c@syntax-dispatch aX20f5@t '(each-any)))) (if (and aX20f7@ls/false (apply (lambda (aX20f9@v*) (for-all (lambda (aX20fb@x) (let ((aX20fd@x (aXe62@syntax->datum aX20fb@x))) (and (integer? aX20fd@x) (exact? aX20fd@x)))) aX20f9@v*)) aX20f7@ls/false)) (apply (lambda (aX20ff@v*) (values '() (map aXe62@syntax->datum aX20ff@v*))) aX20f7@ls/false) (let ((aX2101@t aX20f5@t)) (let ((aX2103@ls/false (aXd7c@syntax-dispatch aX2101@t '(any . any)))) (if (and aX2103@ls/false (apply (lambda (aX2105@x aX2106@rest) (symbol? (aXe62@syntax->datum aX2105@x))) aX2103@ls/false)) (apply (lambda (aX2109@x aX210a@rest) (call-with-values (lambda () (aX20e6@parse aX210a@rest)) (lambda (aX2111@aX210e aX2112@aX2110) (let ((aX2115@v* aX2112@aX2110) (aX2116@x* aX2111@aX210e)) (values (cons (aXe62@syntax->datum aX2109@x) aX2116@x*) aX2115@v*))))) aX2103@ls/false) (let ((aX2119@t aX2101@t)) (let ((aX211b@ls/false (aXd7c@syntax-dispatch aX2119@t '()))) (if aX211b@ls/false (apply (lambda () (values '() '())) aX211b@ls/false) (let ((aX211d@t aX2119@t)) (let ((aX211f@ls/false (aXd7c@syntax-dispatch aX211d@t '_))) (if aX211f@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid library name" aX20e3@spec)) aX211f@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX211d@t))))))))))))))) (call-with-values (lambda () (aX20e6@parse aX20e3@spec)) (lambda (aX20eb@aX20e8 aX20ec@aX20ea) (let ((aX20ef@ver* aX20ec@aX20ea) (aX20f0@name* aX20eb@aX20e8)) (begin (if (null? aX20f0@name*) (aXe5c@syntax-violation '#f '"empty library name" aX20e3@spec) (void)) (values aX20f0@name* aX20ef@ver*))))))))) (set! aX287d@aXdda@parse-library-name aXdda@parse-library-name) (set! aXddc@parse-library (lambda (aX2121@e) (let ((aX2123@t aX2121@e)) (let ((aX2125@ls/false (aXd7c@syntax-dispatch aX2123@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and aX2125@ls/false (apply (lambda (aX2127@library aX2128@name* aX2129@export aX212a@exp* aX212b@import aX212c@imp* aX212d@b*) (and (eq? (aXe62@syntax->datum aX2129@export) 'export) (eq? (aXe62@syntax->datum aX212b@import) 'import) (eq? (aXe62@syntax->datum aX2127@library) 'library))) aX2125@ls/false)) (apply (lambda (aX2135@library aX2136@name* aX2137@export aX2138@exp* aX2139@import aX213a@imp* aX213b@b*) (values aX2136@name* aX2138@exp* aX213a@imp* aX213b@b*)) aX2125@ls/false) (let ((aX2143@t aX2123@t)) (let ((aX2145@ls/false (aXd7c@syntax-dispatch aX2143@t '_))) (if aX2145@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"malformed library" aX2121@e)) aX2145@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX2143@t))))))))) (set! aX287e@aXddc@parse-library aXddc@parse-library) (set! aXdde@parse-import-spec* (let ((aX2148@idsyn? '#f) (aX214a@dup-error '#f) (aX214c@merge-substs '#f) (aX214e@exclude* '#f) (aX2150@find* '#f) (aX2152@rem* '#f) (aX2154@remove-dups '#f) (aX2156@parse-library-name '#f) (aX2158@import-library '#f) (aX215a@get-import '#f) (aX215c@add-imports! '#f)) (begin (set! aX2148@idsyn? (lambda (aX2351@x) (symbol? (aXe62@syntax->datum aX2351@x)))) (set! aX214a@dup-error (lambda (aX234f@name) (aXe5c@syntax-violation 'import '"two imports with different bindings" aX234f@name))) (set! aX214c@merge-substs (lambda (aX233d@s aX233e@subst) (let ((aX2342@insert-to-subst '#f)) (begin (set! aX2342@insert-to-subst (lambda (aX2343@a aX2344@subst) (let ((aX2347@name (car aX2343@a)) (aX2348@label (cdr aX2343@a))) (let ((aX234b@t (assq aX2347@name aX2344@subst))) (if aX234b@t ((lambda (aX234d@x) (if (eq? (cdr aX234d@x) aX2348@label) aX2344@subst (aX214a@dup-error aX2347@name))) aX234b@t) (cons aX2343@a aX2344@subst)))))) (if (null? aX233d@s) aX233e@subst (aX2342@insert-to-subst (car aX233d@s) (aX214c@merge-substs (cdr aX233d@s) aX233e@subst))))))) (set! aX214e@exclude* (lambda (aX230d@sym* aX230e@subst) (let ((aX2312@exclude '#f)) (begin (set! aX2312@exclude (lambda (aX232b@sym aX232c@subst) (if (null? aX232c@subst) (aXe5c@syntax-violation 'import '"cannot rename unbound identifier" aX232b@sym) (if (eq? aX232b@sym (caar aX232c@subst)) (values (cdar aX232c@subst) (cdr aX232c@subst)) (let ((aX232f@a (car aX232c@subst))) (call-with-values (lambda () (aX2312@exclude aX232b@sym (cdr aX232c@subst))) (lambda (aX2335@aX2332 aX2336@aX2334) (let ((aX2339@subst aX2336@aX2334) (aX233a@old aX2335@aX2332)) (values aX233a@old (cons aX232f@a aX2339@subst)))))))))) (if (null? aX230d@sym*) (values '() aX230e@subst) (call-with-values (lambda () (aX2312@exclude (car aX230d@sym*) aX230e@subst)) (lambda (aX2317@aX2314 aX2318@aX2316) (let ((aX231b@subst aX2318@aX2316) (aX231c@old aX2317@aX2314)) (call-with-values (lambda () (aX214e@exclude* (cdr aX230d@sym*) aX231b@subst)) (lambda (aX2323@aX2320 aX2324@aX2322) (let ((aX2327@subst aX2324@aX2322) (aX2328@old* aX2323@aX2320)) (values (cons aX231c@old aX2328@old*) aX2327@subst)))))))))))) (set! aX2150@find* (lambda (aX2305@sym* aX2306@subst) (map (lambda (aX2309@x) (let ((aX230b@t (assq aX2309@x aX2306@subst))) (if aX230b@t (cdr aX230b@t) (aXe5c@syntax-violation 'import '"cannot find identifier" aX2309@x)))) aX2305@sym*))) (set! aX2152@rem* (lambda (aX22fd@sym* aX22fe@subst) (let aX2303@f ((aX2301@subst aX22fe@subst)) (if (null? aX2301@subst) '() (if (memq (caar aX2301@subst) aX22fd@sym*) (aX2303@f (cdr aX2301@subst)) (cons (car aX2301@subst) (aX2303@f (cdr aX2301@subst)))))))) (set! aX2154@remove-dups (lambda (aX22fb@ls) (if (null? aX22fb@ls) '() (if (memq (car aX22fb@ls) (cdr aX22fb@ls)) (aX2154@remove-dups (cdr aX22fb@ls)) (cons (car aX22fb@ls) (aX2154@remove-dups (cdr aX22fb@ls))))))) (set! aX2156@parse-library-name (lambda (aX2213@spec) (let ((aX2216@subversion? '#f) (aX2218@subversion-pred '#f) (aX221a@version-pred '#f)) (begin (set! aX2216@subversion? (lambda (aX22f7@x) (let ((aX22f9@x (aXe62@syntax->datum aX22f7@x))) (and (integer? aX22f9@x) (exact? aX22f9@x) (>= aX22f9@x '0))))) (set! aX2218@subversion-pred (lambda (aX2297@x*) (let ((aX2299@t aX2297@x*)) (let ((aX229b@ls/false (aXd7c@syntax-dispatch aX2299@t 'any))) (if (and aX229b@ls/false (apply (lambda (aX229d@n) (aX2216@subversion? aX229d@n)) aX229b@ls/false)) (apply (lambda (aX229f@n) (lambda (aX22a1@x) (= aX22a1@x (aXe62@syntax->datum aX229f@n)))) aX229b@ls/false) (let ((aX22a3@t aX2299@t)) (let ((aX22a5@ls/false (aXd7c@syntax-dispatch aX22a3@t '(any . each-any)))) (if (and aX22a5@ls/false (apply (lambda (aX22a7@p? aX22a8@sub*) (eq? (aXe62@syntax->datum aX22a7@p?) 'and)) aX22a5@ls/false)) (apply (lambda (aX22ab@p? aX22ac@sub*) (let ((aX22af@p* (map aX2218@subversion-pred aX22ac@sub*))) (lambda (aX22b1@x) (for-all (lambda (aX22b3@p) (aX22b3@p aX22b1@x)) aX22af@p*)))) aX22a5@ls/false) (let ((aX22b5@t aX22a3@t)) (let ((aX22b7@ls/false (aXd7c@syntax-dispatch aX22b5@t '(any . each-any)))) (if (and aX22b7@ls/false (apply (lambda (aX22b9@p? aX22ba@sub*) (eq? (aXe62@syntax->datum aX22b9@p?) 'or)) aX22b7@ls/false)) (apply (lambda (aX22bd@p? aX22be@sub*) (let ((aX22c1@p* (map aX2218@subversion-pred aX22be@sub*))) (lambda (aX22c3@x) (exists (lambda (aX22c5@p) (aX22c5@p aX22c3@x)) aX22c1@p*)))) aX22b7@ls/false) (let ((aX22c7@t aX22b5@t)) (let ((aX22c9@ls/false (aXd7c@syntax-dispatch aX22c7@t '(any any)))) (if (and aX22c9@ls/false (apply (lambda (aX22cb@p? aX22cc@sub) (eq? (aXe62@syntax->datum aX22cb@p?) 'not)) aX22c9@ls/false)) (apply (lambda (aX22cf@p? aX22d0@sub) (let ((aX22d3@p (aX2218@subversion-pred aX22d0@sub))) (lambda (aX22d5@x) (not (aX22d3@p aX22d5@x))))) aX22c9@ls/false) (let ((aX22d7@t aX22c7@t)) (let ((aX22d9@ls/false (aXd7c@syntax-dispatch aX22d7@t '(any any)))) (if (and aX22d9@ls/false (apply (lambda (aX22db@p? aX22dc@n) (and (eq? (aXe62@syntax->datum aX22db@p?) '<=) (aX2216@subversion? aX22dc@n))) aX22d9@ls/false)) (apply (lambda (aX22df@p? aX22e0@n) (lambda (aX22e3@x) (<= aX22e3@x (aXe62@syntax->datum aX22e0@n)))) aX22d9@ls/false) (let ((aX22e5@t aX22d7@t)) (let ((aX22e7@ls/false (aXd7c@syntax-dispatch aX22e5@t '(any any)))) (if (and aX22e7@ls/false (apply (lambda (aX22e9@p? aX22ea@n) (and (eq? (aXe62@syntax->datum aX22e9@p?) '>=) (aX2216@subversion? aX22ea@n))) aX22e7@ls/false)) (apply (lambda (aX22ed@p? aX22ee@n) (lambda (aX22f1@x) (>= aX22f1@x (aXe62@syntax->datum aX22ee@n)))) aX22e7@ls/false) (let ((aX22f3@t aX22e5@t)) (let ((aX22f5@ls/false (aXd7c@syntax-dispatch aX22f3@t '_))) (if aX22f5@ls/false (apply (lambda () (aXe5c@syntax-violation 'import '"invalid sub-version spec" aX2213@spec aX2297@x*)) aX22f5@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX22f3@t)))))))))))))))))))))))) (set! aX221a@version-pred (lambda (aX2247@x*) (let ((aX2249@t aX2247@x*)) (let ((aX224b@ls/false (aXd7c@syntax-dispatch aX2249@t '()))) (if aX224b@ls/false (apply (lambda () (lambda (aX224d@x) '#t)) aX224b@ls/false) (let ((aX224f@t aX2249@t)) (let ((aX2251@ls/false (aXd7c@syntax-dispatch aX224f@t '(any . each-any)))) (if (and aX2251@ls/false (apply (lambda (aX2253@c aX2254@ver*) (eq? (aXe62@syntax->datum aX2253@c) 'and)) aX2251@ls/false)) (apply (lambda (aX2257@c aX2258@ver*) (let ((aX225b@p* (map aX221a@version-pred aX2258@ver*))) (lambda (aX225d@x) (for-all (lambda (aX225f@p) (aX225f@p aX225d@x)) aX225b@p*)))) aX2251@ls/false) (let ((aX2261@t aX224f@t)) (let ((aX2263@ls/false (aXd7c@syntax-dispatch aX2261@t '(any . each-any)))) (if (and aX2263@ls/false (apply (lambda (aX2265@c aX2266@ver*) (eq? (aXe62@syntax->datum aX2265@c) 'or)) aX2263@ls/false)) (apply (lambda (aX2269@c aX226a@ver*) (let ((aX226d@p* (map aX221a@version-pred aX226a@ver*))) (lambda (aX226f@x) (exists (lambda (aX2271@p) (aX2271@p aX226f@x)) aX226d@p*)))) aX2263@ls/false) (let ((aX2273@t aX2261@t)) (let ((aX2275@ls/false (aXd7c@syntax-dispatch aX2273@t '(any any)))) (if (and aX2275@ls/false (apply (lambda (aX2277@c aX2278@ver) (eq? (aXe62@syntax->datum aX2277@c) 'not)) aX2275@ls/false)) (apply (lambda (aX227b@c aX227c@ver) (let ((aX227f@p (aX221a@version-pred aX227c@ver))) (lambda (aX2281@x) (not (aX227f@p aX2281@x))))) aX2275@ls/false) (let ((aX2283@t aX2273@t)) (let ((aX2285@ls/false (aXd7c@syntax-dispatch aX2283@t 'each-any))) (if aX2285@ls/false (apply (lambda (aX2287@sub*) (let ((aX2289@p* (map aX2218@subversion-pred aX2287@sub*))) (lambda (aX228b@x) (let aX2291@f ((aX228d@p* aX2289@p*) (aX228e@x aX228b@x)) (if (null? aX228d@p*) '#t (if (null? aX228e@x) '#f (and ((car aX228d@p*) (car aX228e@x)) (aX2291@f (cdr aX228d@p*) (cdr aX228e@x))))))))) aX2285@ls/false) (let ((aX2293@t aX2283@t)) (let ((aX2295@ls/false (aXd7c@syntax-dispatch aX2293@t '_))) (if aX2295@ls/false (apply (lambda () (aXe5c@syntax-violation 'import '"invalid version spec" aX2213@spec aX2247@x*)) aX2295@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX2293@t))))))))))))))))))))) (let aX221d@f ((aX221b@x aX2213@spec)) (let ((aX221f@t aX221b@x)) (let ((aX2221@ls/false (aXd7c@syntax-dispatch aX221f@t '(each-any)))) (if aX2221@ls/false (apply (lambda (aX2223@version-spec*) (values '() (aX221a@version-pred aX2223@version-spec*))) aX2221@ls/false) (let ((aX2225@t aX221f@t)) (let ((aX2227@ls/false (aXd7c@syntax-dispatch aX2225@t '(any . any)))) (if (and aX2227@ls/false (apply (lambda (aX2229@x aX222a@x*) (aX2148@idsyn? aX2229@x)) aX2227@ls/false)) (apply (lambda (aX222d@x aX222e@x*) (call-with-values (lambda () (aX221d@f aX222e@x*)) (lambda (aX2235@aX2232 aX2236@aX2234) (let ((aX2239@pred aX2236@aX2234) (aX223a@name aX2235@aX2232)) (values (cons (aXe62@syntax->datum aX222d@x) aX223a@name) aX2239@pred))))) aX2227@ls/false) (let ((aX223d@t aX2225@t)) (let ((aX223f@ls/false (aXd7c@syntax-dispatch aX223d@t '()))) (if aX223f@ls/false (apply (lambda () (values '() (lambda (aX2241@x) '#t))) aX223f@ls/false) (let ((aX2243@t aX223d@t)) (let ((aX2245@ls/false (aXd7c@syntax-dispatch aX2243@t '_))) (if aX2245@ls/false (apply (lambda () (aXe5c@syntax-violation '#f '"invalid import spec" aX2213@spec)) aX2245@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX2243@t)))))))))))))))))) (set! aX2158@import-library (lambda (aX2203@spec*) (call-with-values (lambda () (aX2156@parse-library-name aX2203@spec*)) (lambda (aX2209@aX2206 aX220a@aX2208) (let ((aX220d@pred aX220a@aX2208) (aX220e@name aX2209@aX2206)) (begin (if (null? aX220e@name) (aXe5c@syntax-violation 'import '"empty library name" aX2203@spec*) (void)) (let ((aX2211@lib (aX984@aX7cb@find-library-by-name aX220e@name))) (begin (if (not aX2211@lib) (aXe5c@syntax-violation 'import '"cannot find library with required name" aX220e@name) (void)) (if (not (aX220d@pred (aX95e@aX77f@library-version aX2211@lib))) (aXe5c@syntax-violation 'import '"library does not satisfy version specification" aX2203@spec* aX2211@lib) (void)) ((aXde8@imp-collector) aX2211@lib) (aX966@aX78f@library-subst aX2211@lib))))))))) (set! aX215a@get-import (lambda (aX2175@spec) (let ((aX2177@t aX2175@spec)) (let ((aX2179@ls/false (aXd7c@syntax-dispatch aX2177@t '(any . each-any)))) (if (and aX2179@ls/false (apply (lambda (aX217b@x aX217c@x*) (not (memq (aXe62@syntax->datum aX217b@x) '(for rename except only prefix library)))) aX2179@ls/false)) (apply (lambda (aX217f@x aX2180@x*) (aX2158@import-library (cons aX217f@x aX2180@x*))) aX2179@ls/false) (let ((aX2183@t aX2177@t)) (let ((aX2185@ls/false (aXd7c@syntax-dispatch aX2183@t '(any any . #(each (any any)))))) (if (and aX2185@ls/false (apply (lambda (aX2187@rename aX2188@isp aX2189@old* aX218a@new*) (and (eq? (aXe62@syntax->datum aX2187@rename) 'rename) (for-all aX2148@idsyn? aX2189@old*) (for-all aX2148@idsyn? aX218a@new*))) aX2185@ls/false)) (apply (lambda (aX218f@rename aX2190@isp aX2191@old* aX2192@new*) (let ((aX2197@subst (aX215a@get-import aX2190@isp)) (aX2198@old* (map aXe62@syntax->datum aX2191@old*)) (aX2199@new* (map aXe62@syntax->datum aX2192@new*))) (let ((aX219d@old-label* (aX2150@find* aX2198@old* aX2197@subst))) (let ((aX219f@subst (aX2152@rem* aX2198@old* aX2197@subst))) (aX214c@merge-substs (map cons aX2199@new* aX219d@old-label*) aX219f@subst))))) aX2185@ls/false) (let ((aX21a1@t aX2183@t)) (let ((aX21a3@ls/false (aXd7c@syntax-dispatch aX21a1@t '(any any . each-any)))) (if (and aX21a3@ls/false (apply (lambda (aX21a5@except aX21a6@isp aX21a7@sym*) (and (eq? (aXe62@syntax->datum aX21a5@except) 'except) (for-all aX2148@idsyn? aX21a7@sym*))) aX21a3@ls/false)) (apply (lambda (aX21ab@except aX21ac@isp aX21ad@sym*) (let ((aX21b1@subst (aX215a@get-import aX21ac@isp))) (aX2152@rem* (map aXe62@syntax->datum aX21ad@sym*) aX21b1@subst))) aX21a3@ls/false) (let ((aX21b3@t aX21a1@t)) (let ((aX21b5@ls/false (aXd7c@syntax-dispatch aX21b3@t '(any any . each-any)))) (if (and aX21b5@ls/false (apply (lambda (aX21b7@only aX21b8@isp aX21b9@sym*) (and (eq? (aXe62@syntax->datum aX21b7@only) 'only) (for-all aX2148@idsyn? aX21b9@sym*))) aX21b5@ls/false)) (apply (lambda (aX21bd@only aX21be@isp aX21bf@sym*) (let ((aX21c3@subst (aX215a@get-import aX21be@isp)) (aX21c4@sym* (map aXe62@syntax->datum aX21bf@sym*))) (let ((aX21c7@sym* (aX2154@remove-dups aX21c4@sym*))) (let ((aX21c9@lab* (aX2150@find* aX21c7@sym* aX21c3@subst))) (map cons aX21c7@sym* aX21c9@lab*))))) aX21b5@ls/false) (let ((aX21cb@t aX21b3@t)) (let ((aX21cd@ls/false (aXd7c@syntax-dispatch aX21cb@t '(any any any)))) (if (and aX21cd@ls/false (apply (lambda (aX21cf@prefix aX21d0@isp aX21d1@p) (and (eq? (aXe62@syntax->datum aX21cf@prefix) 'prefix) (aX2148@idsyn? aX21d1@p))) aX21cd@ls/false)) (apply (lambda (aX21d5@prefix aX21d6@isp aX21d7@p) (let ((aX21db@subst (aX215a@get-import aX21d6@isp)) (aX21dc@prefix (symbol->string (aXe62@syntax->datum aX21d7@p)))) (map (lambda (aX21df@x) (cons (string->symbol (string-append aX21dc@prefix (symbol->string (car aX21df@x)))) (cdr aX21df@x))) aX21db@subst))) aX21cd@ls/false) (let ((aX21e1@t aX21cb@t)) (let ((aX21e3@ls/false (aXd7c@syntax-dispatch aX21e1@t '(any each-any)))) (if (and aX21e3@ls/false (apply (lambda (aX21e5@library aX21e6@spec*) (eq? (aXe62@syntax->datum aX21e5@library) 'library)) aX21e3@ls/false)) (apply (lambda (aX21e9@library aX21ea@spec*) (aX2158@import-library aX21ea@spec*)) aX21e3@ls/false) (let ((aX21ed@t aX21e1@t)) (let ((aX21ef@ls/false (aXd7c@syntax-dispatch aX21ed@t '(any any . any)))) (if (and aX21ef@ls/false (apply (lambda (aX21f1@for aX21f2@isp aX21f3@rest) (eq? (aXe62@syntax->datum aX21f1@for) 'for)) aX21ef@ls/false)) (apply (lambda (aX21f7@for aX21f8@isp aX21f9@rest) (aX215a@get-import aX21f8@isp)) aX21ef@ls/false) (let ((aX21fd@t aX21ed@t)) (let ((aX21ff@ls/false (aXd7c@syntax-dispatch aX21fd@t 'any))) (if aX21ff@ls/false (apply (lambda (aX2201@spec) (aXe5c@syntax-violation 'import '"invalid import spec" aX2201@spec)) aX21ff@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX21fd@t))))))))))))))))))))))))))) (set! aX215c@add-imports! (lambda (aX2165@imp aX2166@h) (let ((aX2169@subst (aX215a@get-import aX2165@imp))) (for-each (lambda (aX216b@x) (let ((aX216d@name (car aX216b@x)) (aX216e@label (cdr aX216b@x))) (let ((aX2171@t (hashtable-ref aX2166@h aX216d@name '#f))) (if aX2171@t ((lambda (aX2173@l) (if (not (eq? aX2173@l aX216e@label)) (aX214a@dup-error aX216d@name) (void))) aX2171@t) (hashtable-set! aX2166@h aX216d@name aX216e@label))))) aX2169@subst)))) (lambda (aX215d@imp*) (let aX2163@f ((aX215f@imp* aX215d@imp*) (aX2160@h (make-eq-hashtable))) (if (null? aX215f@imp*) (hashtable-entries aX2160@h) (begin (aX215c@add-imports! (car aX215f@imp*) aX2160@h) (aX2163@f (cdr aX215f@imp*) aX2160@h)))))))) (set! aX287f@aXdde@parse-import-spec* aXdde@parse-import-spec*) (set! aXde0@make-top-rib (lambda (aX2353@names aX2354@labels) (let ((aX2357@rib (aXb29@make-empty-rib))) (begin (vector-for-each (lambda (aX2359@name aX235a@label) (begin (if (not (symbol? aX2359@name)) (error 'make-top-rib '"BUG: not a symbol" aX2359@name) (void)) (aXb2d@extend-rib/nc! aX2357@rib (make-simple-struct 'stx '5 (list aX2359@name aXaf9@top-mark* '() '())) aX235a@label))) aX2353@names aX2354@labels) aX2357@rib)))) (set! aX2880@aXde0@make-top-rib aXde0@make-top-rib) (set! aXde2@make-collector (lambda () (let ((aX235d@ls '())) (lambda aX2361 (let ((aX2362 (length aX2361))) (if (= aX2362 '0) (apply (lambda () aX235d@ls) aX2361) (if (= aX2362 '1) (apply (lambda (aX235f@x) (set! aX235d@ls (aXaf2@set-cons aX235f@x aX235d@ls))) aX2361) (error 'apply '"invalid arg count")))))))) (set! aX2881@aXde2@make-collector aXde2@make-collector) (set! aXde4@inv-collector (aX6bf@aX59d@make-parameter (lambda aX2363@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (aX2365@x) (begin (if (not (procedure? aX2365@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" aX2365@x) (void)) aX2365@x)))) (set! aX2882@aXde4@inv-collector aXde4@inv-collector) (set! aXde6@vis-collector (aX6bf@aX59d@make-parameter (lambda aX2367@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (aX2369@x) (begin (if (not (procedure? aX2369@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" aX2369@x) (void)) aX2369@x)))) (set! aX2883@aXde6@vis-collector aXde6@vis-collector) (set! aXde8@imp-collector (aX6bf@aX59d@make-parameter (lambda aX236b@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (aX236d@x) (begin (if (not (procedure? aX236d@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" aX236d@x) (void)) aX236d@x)))) (set! aX2884@aXde8@imp-collector aXde8@imp-collector) (set! aXdea@chi-library-internal (lambda (aX236f@e* aX2370@rib aX2371@top?) (call-with-values (lambda () (aXdd4@chi-body* aX236f@e* '() '() '() '() '() '() '() aX2370@rib aX2371@top?)) (lambda (aX2385@aX2376 aX2386@aX2378 aX2387@aX237a aX2388@aX237c aX2389@aX237e aX238a@aX2380 aX238b@aX2382 aX238c@aX2384) (let ((aX2395@exp* aX238c@aX2384) (aX2396@_kwd* aX238b@aX2382) (aX2397@mod** aX238a@aX2380) (aX2398@rhs* aX2389@aX237e) (aX2399@lex* aX2388@aX237c) (aX239a@mr aX2387@aX237a) (aX239b@r aX2386@aX2378) (aX239c@e* aX2385@aX2376)) (values (append (apply append (reverse aX2397@mod**)) aX239c@e*) aX239b@r aX239a@mr (reverse aX2399@lex*) (reverse aX2398@rhs*) aX2395@exp*)))))) (set! aX2885@aXdea@chi-library-internal aXdea@chi-library-internal) (set! aXdec@chi-interaction-expr (lambda (aX23a5@e aX23a6@rib aX23a7@r) (call-with-values (lambda () (aXdd4@chi-body* (list aX23a5@e) aX23a7@r aX23a7@r '() '() '() '() '() aX23a6@rib '#t)) (lambda (aX23bb@aX23ac aX23bc@aX23ae aX23bd@aX23b0 aX23be@aX23b2 aX23bf@aX23b4 aX23c0@aX23b6 aX23c1@aX23b8 aX23c2@aX23ba) (let ((aX23cb@_exp* aX23c2@aX23ba) (aX23cc@_kwd* aX23c1@aX23b8) (aX23cd@mod** aX23c0@aX23b6) (aX23ce@rhs* aX23bf@aX23b4) (aX23cf@lex* aX23be@aX23b2) (aX23d0@mr aX23bd@aX23b0) (aX23d1@r aX23bc@aX23ae) (aX23d2@e* aX23bb@aX23ac)) (let ((aX23db@e* (aXdac@expand-interaction-rhs*/init* (reverse aX23cf@lex*) (reverse aX23ce@rhs*) (append (apply append (reverse aX23cd@mod**)) aX23d2@e*) aX23d1@r aX23d0@mr))) (let ((aX23dd@e (if (null? aX23db@e*) (aXadb@aXa36@build-void) (if (null? (cdr aX23db@e*)) (car aX23db@e*) (aXada@aXa34@build-sequence '#f aX23db@e*))))) (values aX23dd@e aX23d1@r)))))))) (set! aX2886@aXdec@chi-interaction-expr aXdec@chi-interaction-expr) (set! aXdee@library-body-expander (lambda (aX23df@name aX23e0@main-exp* aX23e1@imp* aX23e2@b* aX23e3@top?) (let ((aX23ea@itc '#f)) (begin (set! aX23ea@itc (aXde2@make-collector)) (let ((aX23f3@aX23ec aXde8@imp-collector) (aX23f4@aX23ee aXe6c@top-level-context) (aX23f5@aX23f0 aX23ea@itc) (aX23f6@aX23f2 '#f)) (let ((aX23fb@swap (lambda () (begin (let ((aX23fd@t (aX23f3@aX23ec))) (begin (aX23f3@aX23ec aX23f5@aX23f0) (set! aX23f5@aX23f0 aX23fd@t))) (let ((aX23ff@t (aX23f4@aX23ee))) (begin (aX23f4@aX23ee aX23f6@aX23f2) (set! aX23f6@aX23f2 aX23ff@t))))))) (dynamic-wind aX23fb@swap (lambda () (call-with-values (lambda () (aXdde@parse-import-spec* aX23e1@imp*)) (lambda (aX2405@aX2402 aX2406@aX2404) (let ((aX2409@subst-labels aX2406@aX2404) (aX240a@subst-names aX2405@aX2402)) (let ((aX240d@rib (aXde0@make-top-rib aX240a@subst-names aX2409@subst-labels))) (let ((aX2410@wrap '#f)) (begin (set! aX2410@wrap (lambda (aX248b@x) (make-simple-struct 'stx '5 (list aX248b@x aXaf9@top-mark* (list aX240d@rib) '())))) (let ((aX2411@b* (map aX2410@wrap aX23e2@b*)) (aX2412@main-exp* (map aX2410@wrap aX23e0@main-exp*)) (aX2413@rtc (aXde2@make-collector)) (aX2414@vtc (aXde2@make-collector))) (let ((aX2421@aX241a aXde4@inv-collector) (aX2422@aX241c aXde6@vis-collector) (aX2423@aX241e aX2413@rtc) (aX2424@aX2420 aX2414@vtc)) (let ((aX2429@swap (lambda () (begin (let ((aX242b@t (aX2421@aX241a))) (begin (aX2421@aX241a aX2423@aX241e) (set! aX2423@aX241e aX242b@t))) (let ((aX242d@t (aX2422@aX241c))) (begin (aX2422@aX241c aX2424@aX2420) (set! aX2424@aX2420 aX242d@t))))))) (dynamic-wind aX2429@swap (lambda () (call-with-values (lambda () (aXdea@chi-library-internal aX2411@b* aX240d@rib aX23e3@top?)) (lambda (aX243b@aX2430 aX243c@aX2432 aX243d@aX2434 aX243e@aX2436 aX243f@aX2438 aX2440@aX243a) (let ((aX2447@internal-exp* aX2440@aX243a) (aX2448@rhs* aX243f@aX2438) (aX2449@lex* aX243e@aX2436) (aX244a@mr aX243d@aX2434) (aX244b@r aX243c@aX2432) (aX244c@init* aX243b@aX2430)) (call-with-values (lambda () (aXdd8@parse-exports (append aX2412@main-exp* aX2447@internal-exp*))) (lambda (aX2457@aX2454 aX2458@aX2456) (let ((aX245b@exp-id* aX2458@aX2456) (aX245c@exp-name* aX2457@aX2454)) (begin (aXb31@seal-rib! aX240d@rib) (let ((aX245f@init* (aXd9a@chi-expr* aX244c@init* aX244b@r aX244a@mr))) (let ((aX2461@rhs* (aXdae@chi-rhs* aX2448@rhs* aX244b@r aX244a@mr))) (begin (aXb33@unseal-rib! aX240d@rib) (let ((aX2463@loc* (map aXaff@gen-global aX2449@lex*)) (aX2464@export-subst (aXe46@make-export-subst aX245c@exp-name* aX245b@exp-id*))) (let ((aX2468@errstr '#f)) (begin (set! aX2468@errstr '"attempt to export mutated variable") (call-with-values (lambda () (aXe48@make-export-env/macros aX2449@lex* aX2463@loc* aX244b@r)) (lambda (aX246f@aX246a aX2470@aX246c aX2471@aX246e) (let ((aX2475@macro* aX2471@aX246e) (aX2476@global* aX2470@aX246c) (aX2477@export-env aX246f@aX246a)) (begin (for-each (lambda (aX247b@s) (let ((aX247d@name (car aX247b@s)) (aX247e@label (cdr aX247b@s))) (let ((aX2481@p (assq aX247e@label aX2477@export-env))) (if aX2481@p (let ((aX2483@b (cdr aX2481@p))) (let ((aX2485@type (car aX2483@b))) (if (eq? aX2485@type 'mutable) (aXe5c@syntax-violation 'export aX2468@errstr aX247d@name) (void)))) (void))))) aX2464@export-subst) (let ((aX2487@invoke-body (aXae0@aXa40@build-library-letrec* '#f aX23df@name aX2449@lex* aX2463@loc* aX2461@rhs* (if (null? aX245f@init*) (aXadb@aXa36@build-void) (aXada@aXa34@build-sequence '#f aX245f@init*)))) (aX2488@invoke-definitions (map aXad7@aX993@build-global-define (map cdr aX2476@global*)))) (values (aX23ea@itc) (aX2413@rtc) (aX2414@vtc) (aXada@aXa34@build-sequence '#f (append aX2488@invoke-definitions (list aX2487@invoke-body))) aX2475@macro* aX2464@export-subst aX2477@export-env)))))))))))))))))))) aX2429@swap))))))))))) aX23fb@swap))))))) (set! aX2887@aXdee@library-body-expander aXdee@library-body-expander) (set! aXdf0@core-library-expander (lambda (aX248d@e aX248e@verify-name) (call-with-values (lambda () (aXddc@parse-library aX248d@e)) (lambda (aX2499@aX2492 aX249a@aX2494 aX249b@aX2496 aX249c@aX2498) (let ((aX24a1@b* aX249c@aX2498) (aX24a2@imp* aX249b@aX2496) (aX24a3@exp* aX249a@aX2494) (aX24a4@name* aX2499@aX2492)) (call-with-values (lambda () (aXdda@parse-library-name aX24a4@name*)) (lambda (aX24ad@aX24aa aX24ae@aX24ac) (let ((aX24b1@ver aX24ae@aX24ac) (aX24b2@name aX24ad@aX24aa)) (begin (aX248e@verify-name aX24b2@name) (call-with-values (lambda () (aXdee@library-body-expander aX24b2@name aX24a3@exp* aX24a2@imp* aX24a1@b* '#f)) (lambda (aX24c3@aX24b6 aX24c4@aX24b8 aX24c5@aX24ba aX24c6@aX24bc aX24c7@aX24be aX24c8@aX24c0 aX24c9@aX24c2) (let ((aX24d1@export-env aX24c9@aX24c2) (aX24d2@export-subst aX24c8@aX24c0) (aX24d3@visit-code aX24c7@aX24be) (aX24d4@invoke-code aX24c6@aX24bc) (aX24d5@visit-req* aX24c5@aX24ba) (aX24d6@invoke-req* aX24c4@aX24b8) (aX24d7@imp* aX24c3@aX24b6)) (values aX24b2@name aX24b1@ver aX24d7@imp* aX24d6@invoke-req* aX24d5@visit-req* aX24d4@invoke-code aX24d3@visit-code aX24d2@export-subst aX24d1@export-env))))))))))))) (set! aX2888@aXdf0@core-library-expander aXdf0@core-library-expander) (set! aXdf2@parse-top-level-program (lambda (aX24df@e*) (let ((aX24e1@t aX24df@e*)) (let ((aX24e3@ls/false (aXd7c@syntax-dispatch aX24e1@t '((any . each-any) . each-any)))) (if (and aX24e3@ls/false (apply (lambda (aX24e5@import aX24e6@imp* aX24e7@b*) (eq? (aXe62@syntax->datum aX24e5@import) 'import)) aX24e3@ls/false)) (apply (lambda (aX24eb@import aX24ec@imp* aX24ed@b*) (values aX24ec@imp* aX24ed@b*)) aX24e3@ls/false) (let ((aX24f1@t aX24e1@t)) (let ((aX24f3@ls/false (aXd7c@syntax-dispatch aX24f1@t '((any . any) . any)))) (if (and aX24f3@ls/false (apply (lambda (aX24f5@import aX24f6@x aX24f7@y) (eq? (aXe62@syntax->datum aX24f5@import) 'import)) aX24f3@ls/false)) (apply (lambda (aX24fb@import aX24fc@x aX24fd@y) (aXe5c@syntax-violation 'expander '"invalid syntax of top-level program" (aXb6f@syntax-car aX24df@e*))) aX24f3@ls/false) (let ((aX2501@t aX24f1@t)) (let ((aX2503@ls/false (aXd7c@syntax-dispatch aX2501@t '_))) (if aX2503@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) aX2503@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX2501@t)))))))))))) (set! aX2889@aXdf2@parse-top-level-program aXdf2@parse-top-level-program) (set! aXdf4@top-level-expander (lambda (aX2505@e*) (call-with-values (lambda () (aXdf2@parse-top-level-program aX2505@e*)) (lambda (aX250b@aX2508 aX250c@aX250a) (let ((aX250f@b* aX250c@aX250a) (aX2510@imp* aX250b@aX2508)) (call-with-values (lambda () (aXdee@library-body-expander '() '() aX2510@imp* aX250f@b* '#t)) (lambda (aX2521@aX2514 aX2522@aX2516 aX2523@aX2518 aX2524@aX251a aX2525@aX251c aX2526@aX251e aX2527@aX2520) (let ((aX252f@export-env aX2527@aX2520) (aX2530@export-subst aX2526@aX251e) (aX2531@visit-code aX2525@aX251c) (aX2532@invoke-code aX2524@aX251a) (aX2533@visit-req* aX2523@aX2518) (aX2534@invoke-req* aX2522@aX2516) (aX2535@imp* aX2521@aX2514)) (values aX2534@invoke-req* aX2532@invoke-code))))))))) (set! aX288a@aXdf4@top-level-expander aXdf4@top-level-expander) (set! aXdf6@rp (aX6bc@aX597@make-record-printer 'env (lambda (aX253d@x aX253e@p aX253f@wr) (display '"#<environment>" aX253e@p)))) (set! aX288b@aXdf6@rp aXdf6@rp) (set! aXe00@env? (lambda (aX2543@x) (and (simple-struct? aX2543@x) (eq? (simple-struct-name aX2543@x) 'env)))) (set! aX288c@aXe00@env? aXe00@env?) (set! aXe02@env-names (lambda (aX2545@x) (simple-struct-ref aX2545@x '0))) (set! aX288d@aXe02@env-names aXe02@env-names) (set! aXe04@set-env-names! (lambda (aX2547@x aX2548@val) (simple-struct-set! aX2547@x '0 aX2548@val))) (set! aX288e@aXe04@set-env-names! aXe04@set-env-names!) (set! aXe06@env-labels (lambda (aX254b@x) (simple-struct-ref aX254b@x '1))) (set! aX288f@aXe06@env-labels aXe06@env-labels) (set! aXe08@set-env-labels! (lambda (aX254d@x aX254e@val) (simple-struct-set! aX254d@x '1 aX254e@val))) (set! aX2890@aXe08@set-env-labels! aXe08@set-env-labels!) (set! aXe0a@env-itc (lambda (aX2551@x) (simple-struct-ref aX2551@x '2))) (set! aX2891@aXe0a@env-itc aXe0a@env-itc) (set! aXe0c@set-env-itc! (lambda (aX2553@x aX2554@val) (simple-struct-set! aX2553@x '2 aX2554@val))) (set! aX2892@aXe0c@set-env-itc! aXe0c@set-env-itc!) (set! aXe0e@dummy '3) (set! aX2893@aXe0e@dummy aXe0e@dummy) (set! aXe10@rp (aX6bc@aX597@make-record-printer 'interaction-env (lambda (aX2557@x aX2558@p aX2559@wr) (display '"#<environment>" aX2558@p)))) (set! aX2894@aXe10@rp aXe10@rp) (set! aXe1a@interaction-env? (lambda (aX255d@x) (and (simple-struct? aX255d@x) (eq? (simple-struct-name aX255d@x) 'interaction-env)))) (set! aX2895@aXe1a@interaction-env? aXe1a@interaction-env?) (set! aXe1c@interaction-env-rib (lambda (aX255f@x) (simple-struct-ref aX255f@x '0))) (set! aX2896@aXe1c@interaction-env-rib aXe1c@interaction-env-rib) (set! aXe1e@set-interaction-env-rib! (lambda (aX2561@x aX2562@val) (simple-struct-set! aX2561@x '0 aX2562@val))) (set! aX2897@aXe1e@set-interaction-env-rib! aXe1e@set-interaction-env-rib!) (set! aXe20@interaction-env-r (lambda (aX2565@x) (simple-struct-ref aX2565@x '1))) (set! aX2898@aXe20@interaction-env-r aXe20@interaction-env-r) (set! aXe22@set-interaction-env-r! (lambda (aX2567@x aX2568@val) (simple-struct-set! aX2567@x '1 aX2568@val))) (set! aX2899@aXe22@set-interaction-env-r! aXe22@set-interaction-env-r!) (set! aXe24@interaction-env-locs (lambda (aX256b@x) (simple-struct-ref aX256b@x '2))) (set! aX289a@aXe24@interaction-env-locs aXe24@interaction-env-locs) (set! aXe26@set-interaction-env-locs! (lambda (aX256d@x aX256e@val) (simple-struct-set! aX256d@x '2 aX256e@val))) (set! aX289b@aXe26@set-interaction-env-locs! aXe26@set-interaction-env-locs!) (set! aXe28@dummy '3) (set! aX289c@aXe28@dummy aXe28@dummy) (set! aXe2a@interaction-environment-symbols (lambda () (aXe32@environment-symbols (aXe6a@interaction-environment)))) (set! aX289d@aXe2a@interaction-environment-symbols aXe2a@interaction-environment-symbols) (set! aXe2c@environment-bindings (lambda (aX2571@e) (vector->list (vector-map (lambda (aX2573@name aX2574@label) (aXe2e@parse-binding (cons aX2573@name (aX98a@aX7d7@imported-label->binding aX2574@label)))) (aXe02@env-names aX2571@e) (aXe06@env-labels aX2571@e))))) (set! aX289e@aXe2c@environment-bindings aXe2c@environment-bindings) (set! aXe2e@parse-binding (lambda (aX2577@b) (cons (car aX2577@b) (let ((aX2579@t (cadr aX2577@b))) (if (memv aX2579@t '(core-prim global)) 'procedure (if (memv aX2579@t '(core-macro macro global-macro)) 'syntax (if (memv aX2579@t '($core-rtd)) 'record (if (eq? (car aX2577@b) (cadr aX2577@b)) 'syntax 'unknown)))))))) (set! aX289f@aXe2e@parse-binding aXe2e@parse-binding) (set! aXe30@environment? (lambda (aX257b@x) (or (aXe00@env? aX257b@x) (aXe1a@interaction-env? aX257b@x)))) (set! aX28a0@aXe30@environment? aXe30@environment?) (set! aXe32@environment-symbols (lambda (aX257d@x) (if (aXe00@env? aX257d@x) (vector->list (aXe02@env-names aX257d@x)) (if (aXe1a@interaction-env? aX257d@x) (map values (aXb13@rib-sym* (aXe1c@interaction-env-rib aX257d@x))) (assertion-violation 'environment-symbols '"not an environment" aX257d@x))))) (set! aX28a1@aXe32@environment-symbols aXe32@environment-symbols) (set! aXe34@environment (lambda aX257f@imp* (let ((aX2581@itc (aXde2@make-collector))) (let ((aX2587@aX2584 aXde8@imp-collector) (aX2588@aX2586 aX2581@itc)) (let ((aX258b@swap (lambda () (let ((aX258d@t (aX2587@aX2584))) (begin (aX2587@aX2584 aX2588@aX2586) (set! aX2588@aX2586 aX258d@t)))))) (dynamic-wind aX258b@swap (lambda () (call-with-values (lambda () (aXdde@parse-import-spec* aX257f@imp*)) (lambda (aX2593@aX2590 aX2594@aX2592) (let ((aX2597@subst-labels aX2594@aX2592) (aX2598@subst-names aX2593@aX2590)) (make-simple-struct 'env '4 (list aX2598@subst-names aX2597@subst-labels aX2581@itc)))))) aX258b@swap)))))) (set! aX28a2@aXe34@environment aXe34@environment) (set! aXe36@null-environment (lambda (aX259b@n) (begin (if (not (eqv? aX259b@n '5)) (assertion-violation 'null-environment '"not 5" aX259b@n) (void)) (aXe34@environment '(psyntax null-environment-5))))) (set! aX28a3@aXe36@null-environment aXe36@null-environment) (set! aXe38@scheme-report-environment (lambda (aX259d@n) (begin (if (not (eqv? aX259d@n '5)) (assertion-violation 'scheme-report-environment '"not 5" aX259d@n) (void)) (aXe34@environment '(psyntax scheme-report-environment-5))))) (set! aX28a4@aXe38@scheme-report-environment aXe38@scheme-report-environment) (set! aXe3a@expand (lambda (aX259f@x aX25a0@env) (if (aXe00@env? aX25a0@env) (let ((aX25a3@rib (aXde0@make-top-rib (aXe02@env-names aX25a0@env) (aXe06@env-labels aX25a0@env)))) (let ((aX25a5@x (make-simple-struct 'stx '5 (list aX259f@x aXaf9@top-mark* (list aX25a3@rib) '()))) (aX25a6@itc (aXe0a@env-itc aX25a0@env)) (aX25a7@rtc (aXde2@make-collector)) (aX25a8@vtc (aXde2@make-collector))) (let ((aX25ad@x (let ((aX25bf@aX25b0 aXe6c@top-level-context) (aX25c0@aX25b2 aXde4@inv-collector) (aX25c1@aX25b4 aXde6@vis-collector) (aX25c2@aX25b6 aXde8@imp-collector) (aX25c3@aX25b8 '#f) (aX25c4@aX25ba aX25a7@rtc) (aX25c5@aX25bc aX25a8@vtc) (aX25c6@aX25be aX25a6@itc)) (let ((aX25cf@swap (lambda () (begin (let ((aX25d1@t (aX25bf@aX25b0))) (begin (aX25bf@aX25b0 aX25c3@aX25b8) (set! aX25c3@aX25b8 aX25d1@t))) (let ((aX25d3@t (aX25c0@aX25b2))) (begin (aX25c0@aX25b2 aX25c4@aX25ba) (set! aX25c4@aX25ba aX25d3@t))) (let ((aX25d5@t (aX25c1@aX25b4))) (begin (aX25c1@aX25b4 aX25c5@aX25bc) (set! aX25c5@aX25bc aX25d5@t))) (let ((aX25d7@t (aX25c2@aX25b6))) (begin (aX25c2@aX25b6 aX25c6@aX25be) (set! aX25c6@aX25be aX25d7@t))))))) (dynamic-wind aX25cf@swap (lambda () (aXd9e@chi-expr aX25a5@x '() '())) aX25cf@swap))))) (begin (aXb31@seal-rib! aX25a3@rib) (values aX25ad@x (aX25a7@rtc)))))) (if (aXe1a@interaction-env? aX25a0@env) (let ((aX25d9@rib (aXe1c@interaction-env-rib aX25a0@env)) (aX25da@r (aXe20@interaction-env-r aX25a0@env)) (aX25db@rtc (aXde2@make-collector))) (let ((aX25df@x (make-simple-struct 'stx '5 (list aX259f@x aXaf9@top-mark* (list aX25d9@rib) '())))) (call-with-values (lambda () (let ((aX25f5@aX25e6 aXe6c@top-level-context) (aX25f6@aX25e8 aXde4@inv-collector) (aX25f7@aX25ea aXde6@vis-collector) (aX25f8@aX25ec aXde8@imp-collector) (aX25f9@aX25ee aX25a0@env) (aX25fa@aX25f0 aX25db@rtc) (aX25fb@aX25f2 (aXde2@make-collector)) (aX25fc@aX25f4 (aXde2@make-collector))) (let ((aX2605@swap (lambda () (begin (let ((aX2607@t (aX25f5@aX25e6))) (begin (aX25f5@aX25e6 aX25f9@aX25ee) (set! aX25f9@aX25ee aX2607@t))) (let ((aX2609@t (aX25f6@aX25e8))) (begin (aX25f6@aX25e8 aX25fa@aX25f0) (set! aX25fa@aX25f0 aX2609@t))) (let ((aX260b@t (aX25f7@aX25ea))) (begin (aX25f7@aX25ea aX25fb@aX25f2) (set! aX25fb@aX25f2 aX260b@t))) (let ((aX260d@t (aX25f8@aX25ec))) (begin (aX25f8@aX25ec aX25fc@aX25f4) (set! aX25fc@aX25f4 aX260d@t))))))) (dynamic-wind aX2605@swap (lambda () (aXdec@chi-interaction-expr aX25df@x aX25d9@rib aX25da@r)) aX2605@swap)))) (lambda (aX260f@aX25e2 aX2610@aX25e4) (let ((aX2613@r^ aX2610@aX25e4) (aX2614@e aX260f@aX25e2)) (begin (aXe22@set-interaction-env-r! aX25a0@env aX2613@r^) (values aX2614@e (aX25db@rtc)))))))) (assertion-violation 'expand '"not an environment" aX25a0@env))))) (set! aX28a5@aXe3a@expand aXe3a@expand) (set! aXe3c@eval (lambda (aX2617@x aX2618@env) (begin (if (not (aXe30@environment? aX2618@env)) (error 'eval '"not an environment" aX2618@env) (void)) (call-with-values (lambda () (aXe3a@expand aX2617@x aX2618@env)) (lambda (aX261f@aX261c aX2620@aX261e) (let ((aX2623@invoke-req* aX2620@aX261e) (aX2624@x aX261f@aX261c)) (begin (for-each aX98b@aX7d9@invoke-library aX2623@invoke-req*) (eval-core (aX715@aX6cd@expanded->core aX2624@x))))))))) (set! aX28a6@aXe3c@eval aXe3c@eval) (set! aXe3e@library-expander (lambda aX2695 (let ((aX2696 (length aX2695))) (if (= aX2696 '3) (apply (lambda (aX2627@x aX2628@filename aX2629@verify-name) (let ((aX262e@build-visit-code '#f) (aX2630@visit! '#f)) (begin (set! aX262e@build-visit-code (lambda (aX2683@macro*) (if (null? aX2683@macro*) (aXadb@aXa36@build-void) (aXada@aXa34@build-sequence '#f (map (lambda (aX2685@x) (let ((aX2687@loc (car aX2685@x)) (aX2688@src (cddr aX2685@x))) (list 'set! aX2687@loc aX2688@src))) aX2683@macro*))))) (set! aX2630@visit! (lambda (aX267b@macro*) (for-each (lambda (aX267d@x) (let ((aX267f@loc (car aX267d@x)) (aX2680@proc (cadr aX267d@x))) (set-symbol-value! aX267f@loc aX2680@proc))) aX267b@macro*))) (call-with-values (lambda () (aXdf0@core-library-expander aX2627@x aX2629@verify-name)) (lambda (aX2643@aX2632 aX2644@aX2634 aX2645@aX2636 aX2646@aX2638 aX2647@aX263a aX2648@aX263c aX2649@aX263e aX264a@aX2640 aX264b@aX2642) (let ((aX2655@export-env aX264b@aX2642) (aX2656@export-subst aX264a@aX2640) (aX2657@macro* aX2649@aX263e) (aX2658@invoke-code aX2648@aX263c) (aX2659@vis* aX2647@aX263a) (aX265a@inv* aX2646@aX2638) (aX265b@imp* aX2645@aX2636) (aX265c@ver aX2644@aX2634) (aX265d@name aX2643@aX2632)) (let ((aX2667@id (gensym)) (aX2668@name aX265d@name) (aX2669@ver aX265c@ver) (aX266a@imp* (map aX98f@aX7e1@library-spec aX265b@imp*)) (aX266b@vis* (map aX98f@aX7e1@library-spec aX2659@vis*)) (aX266c@inv* (map aX98f@aX7e1@library-spec aX265a@inv*)) (aX266d@visit-proc (lambda () (aX2630@visit! aX2657@macro*))) (aX266e@invoke-proc (lambda () (eval-core (aX715@aX6cd@expanded->core aX2658@invoke-code)))) (aX266f@visit-code (aX262e@build-visit-code aX2657@macro*)) (aX2670@invoke-code aX2658@invoke-code)) (begin (aX989@aX7d5@install-library aX2667@id aX2668@name aX2669@ver aX266a@imp* aX266b@vis* aX266c@inv* aX2656@export-subst aX2655@export-env aX266d@visit-proc aX266e@invoke-proc aX266f@visit-code aX2670@invoke-code '#t aX2628@filename) (values aX2667@id aX2668@name aX2669@ver aX266a@imp* aX266b@vis* aX266c@inv* aX2670@invoke-code aX266f@visit-code aX2656@export-subst aX2655@export-env))))))))) aX2695) (if (= aX2696 '2) (apply (lambda (aX268b@x aX268c@filename) (aXe3e@library-expander aX268b@x aX268c@filename (lambda (aX268f@x) (values)))) aX2695) (if (= aX2696 '1) (apply (lambda (aX2691@x) (aXe3e@library-expander aX2691@x '#f (lambda (aX2693@x) (values)))) aX2695) (error 'apply '"invalid arg count"))))))) (set! aX28a7@aXe3e@library-expander aXe3e@library-expander) (set! aXe40@boot-library-expand (lambda (aX2697@x) (call-with-values (lambda () (aXe3e@library-expander aX2697@x)) (lambda (aX26ad@aX269a aX26ae@aX269c aX26af@aX269e aX26b0@aX26a0 aX26b1@aX26a2 aX26b2@aX26a4 aX26b3@aX26a6 aX26b4@aX26a8 aX26b5@aX26aa aX26b6@aX26ac) (let ((aX26c1@export-env aX26b6@aX26ac) (aX26c2@export-subst aX26b5@aX26aa) (aX26c3@visit-code aX26b4@aX26a8) (aX26c4@invoke-code aX26b3@aX26a6) (aX26c5@inv* aX26b2@aX26a4) (aX26c6@vis* aX26b1@aX26a2) (aX26c7@imp* aX26b0@aX26a0) (aX26c8@ver aX26af@aX269e) (aX26c9@name aX26ae@aX269c) (aX26ca@id aX26ad@aX269a)) (values aX26c9@name aX26c4@invoke-code aX26c2@export-subst aX26c1@export-env)))))) (set! aX28a8@aXe40@boot-library-expand aXe40@boot-library-expand) (set! aXe42@rev-map-append (lambda (aX26d5@f aX26d6@ls aX26d7@ac) (if (null? aX26d6@ls) aX26d7@ac (aXe42@rev-map-append aX26d5@f (cdr aX26d6@ls) (cons (aX26d5@f (car aX26d6@ls)) aX26d7@ac))))) (set! aX28a9@aXe42@rev-map-append aXe42@rev-map-append) (set! aXe44@build-exports (lambda (aX26db@lex*+loc* aX26dc@init*) (aXada@aXa34@build-sequence '#f (cons (aXadb@aXa36@build-void) (aXe42@rev-map-append (lambda (aX26df@x) (list 'set! (cdr aX26df@x) (car aX26df@x))) aX26db@lex*+loc* aX26dc@init*))))) (set! aX28aa@aXe44@build-exports aXe44@build-exports) (set! aXe46@make-export-subst (lambda (aX26e1@name* aX26e2@id*) (map (lambda (aX26e5@name aX26e6@id) (let ((aX26e9@label (aXb8b@id->label aX26e6@id))) (begin (if (not aX26e9@label) (aXe5c@syntax-violation '#f '"cannot export unbound identifier" aX26e6@id) (void)) (cons aX26e5@name aX26e9@label)))) aX26e1@name* aX26e2@id*))) (set! aX28ab@aXe46@make-export-subst aXe46@make-export-subst) (set! aXe48@make-export-env/macros (lambda (aX26eb@lex* aX26ec@loc* aX26ed@r) (let ((aX26f2@lookup '#f)) (begin (set! aX26f2@lookup (lambda (aX270f@x) (let aX2717@f ((aX2711@x aX270f@x) (aX2712@lex* aX26eb@lex*) (aX2713@loc* aX26ec@loc*)) (if (pair? aX2712@lex*) (if (eq? aX2711@x (car aX2712@lex*)) (car aX2713@loc*) (aX2717@f aX2711@x (cdr aX2712@lex*) (cdr aX2713@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let aX26fb@f ((aX26f3@r aX26ed@r) (aX26f4@env '()) (aX26f5@global* '()) (aX26f6@macro* '())) (if (null? aX26f3@r) (values aX26f4@env aX26f5@global* aX26f6@macro*) (let ((aX26fd@x (car aX26f3@r))) (let ((aX26ff@label (car aX26fd@x)) (aX2700@b (cdr aX26fd@x))) (let ((aX2703@t (aXb91@binding-type aX2700@b))) (if (memv aX2703@t '(lexical)) (let ((aX2705@v (aXb93@binding-value aX2700@b))) (let ((aX2707@loc (aX26f2@lookup (aXd06@lexical-var aX2705@v))) (aX2708@type (if (aXd08@lexical-mutable? aX2705@v) 'mutable 'global))) (aX26fb@f (cdr aX26f3@r) (cons (cons* aX26ff@label aX2708@type aX2707@loc) aX26f4@env) (cons (cons (aXd06@lexical-var aX2705@v) aX2707@loc) aX26f5@global*) aX26f6@macro*))) (if (memv aX2703@t '(local-macro)) (let ((aX270b@loc (gensym))) (aX26fb@f (cdr aX26f3@r) (cons (cons* aX26ff@label 'global-macro aX270b@loc) aX26f4@env) aX26f5@global* (cons (cons aX270b@loc (aXb93@binding-value aX2700@b)) aX26f6@macro*))) (if (memv aX2703@t '(local-macro!)) (let ((aX270d@loc (gensym))) (aX26fb@f (cdr aX26f3@r) (cons (cons* aX26ff@label 'global-macro! aX270d@loc) aX26f4@env) aX26f5@global* (cons (cons aX270d@loc (aXb93@binding-value aX2700@b)) aX26f6@macro*))) (if (memv aX2703@t '($rtd $module)) (aX26fb@f (cdr aX26f3@r) (cons aX26fd@x aX26f4@env) aX26f5@global* aX26f6@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (aXb91@binding-type aX2700@b) (aXb93@binding-value aX2700@b))))))))))))))) (set! aX28ac@aXe48@make-export-env/macros aXe48@make-export-env/macros) (set! aXe4a@generate-temporaries (lambda (aX2719@ls) (let ((aX271b@t aX2719@ls)) (let ((aX271d@ls/false (aXd7c@syntax-dispatch aX271b@t 'each-any))) (if aX271d@ls/false (apply (lambda (aX271f@ls) (map (lambda (aX2721@x) (make-simple-struct 'stx '5 (list (let ((aX2723@x (aXe62@syntax->datum aX2721@x))) (if (or (symbol? aX2723@x) (string? aX2723@x)) (gensym aX2723@x) (gensym 't))) aXaf9@top-mark* '() '()))) aX271f@ls)) aX271d@ls/false) (let ((aX2725@t aX271b@t)) (let ((aX2727@ls/false (aXd7c@syntax-dispatch aX2725@t '_))) (if aX2727@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) aX2727@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX2725@t))))))))) (set! aX28ad@aXe4a@generate-temporaries aXe4a@generate-temporaries) (set! aXe4c@free-identifier=? (lambda (aX2729@x aX272a@y) (if (aXb75@id? aX2729@x) (if (aXb75@id? aX272a@y) (aXb7b@free-id=? aX2729@x aX272a@y) (assertion-violation 'free-identifier=? '"not an identifier" aX272a@y)) (assertion-violation 'free-identifier=? '"not an identifier" aX2729@x)))) (set! aX28ae@aXe4c@free-identifier=? aXe4c@free-identifier=?) (set! aXe4e@bound-identifier=? (lambda (aX272d@x aX272e@y) (if (aXb75@id? aX272d@x) (if (aXb75@id? aX272e@y) (aXb79@bound-id=? aX272d@x aX272e@y) (assertion-violation 'bound-identifier=? '"not an identifier" aX272e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" aX272d@x)))) (set! aX28af@aXe4e@bound-identifier=? aXe4e@bound-identifier=?) (set! aXe50@make-source-condition (lambda (aX2731@x) (let ((aX273b@aX2736 '#f) (aX273d@aX2738 '#f) (aX273f@aX2737 '#f) (aX2742@aX2735 '#f) (aX2744@make-source-condition '#f) (aX2746@aX2733 '#f) (aX2748@aX2734 '#f) (aX274a@source-condition? '#f) (aX274c@source-filename '#f) (aX274e@source-character '#f)) (begin (set! aX273b@aX2736 (make-record-type-descriptor '&source-information aX2b91@aX28d8@&condition-rtd 'aX2739 '#f '#f '#((immutable file-name) (immutable character)))) (set! aX273d@aX2738 '#f) (set! aX273f@aX2737 (make-record-constructor-descriptor aX273b@aX2736 aX2b92@aX28da@&condition-rcd aX273d@aX2738)) (set! aX2742@aX2735 (record-predicate aX273b@aX2736)) (set! aX2744@make-source-condition (record-constructor aX273f@aX2737)) (set! aX2746@aX2733 (record-accessor aX273b@aX2736 '0)) (set! aX2748@aX2734 (record-accessor aX273b@aX2736 '1)) (set! aX274a@source-condition? (condition-predicate aX273b@aX2736)) (set! aX274c@source-filename (condition-accessor aX273b@aX2736 aX2746@aX2733)) (set! aX274e@source-character (condition-accessor aX273b@aX2736 aX2748@aX2734)) (if (pair? aX2731@x) (aX2744@make-source-condition (car aX2731@x) (cdr aX2731@x)) (condition)))))) (set! aX28b0@aXe50@make-source-condition aXe50@make-source-condition) (set! aXe52@extract-position-condition (lambda (aX274f@x) (aXe50@make-source-condition (aXe54@expression-position aX274f@x)))) (set! aX28b1@aXe52@extract-position-condition aXe52@extract-position-condition) (set! aXe54@expression-position (lambda (aX2751@x) (and (aXb41@stx? aX2751@x) (let ((aX2753@x (aXb43@stx-expr aX2751@x))) (and (aX6b3@aX585@annotation? aX2753@x) (aX6b4@aX587@annotation-source aX2753@x)))))) (set! aX28b2@aXe54@expression-position aXe54@expression-position) (set! aXe56@assertion-error (lambda (aX2755@expr aX2756@pos) (raise (condition (aX2bc1@aX299c@make-assertion-violation) (aX2bd3@aX29ce@make-who-condition 'assert) (aX2b97@aX292f@make-message-condition '"assertion failed") (aX2bc9@aX29b3@make-irritants-condition (list aX2755@expr)) (aXe50@make-source-condition aX2756@pos))))) (set! aX28b3@aXe56@assertion-error aXe56@assertion-error) (set! aXe58@syntax-error (lambda (aX2759@x . aX275b@args) (begin (if (not (for-all string? aX275b@args)) (assertion-violation 'syntax-error '"invalid argument" aX275b@args) (void)) (raise (condition (aX2b97@aX292f@make-message-condition (if (null? aX275b@args) '"invalid syntax" (apply string-append aX275b@args))) (aX2bf5@aX2a2a@make-syntax-violation (aXe62@syntax->datum aX2759@x) '#f) (aXe52@extract-position-condition aX2759@x)))))) (set! aX28b4@aXe58@syntax-error aXe58@syntax-error) (set! aXe5a@syntax-violation* (lambda (aX275d@who aX275e@msg aX275f@form aX2760@condition-object) (begin (if (not (string? aX275e@msg)) (assertion-violation 'syntax-violation '"message is not a string" aX275e@msg) (void)) (let ((aX2765@who (if (or (string? aX275d@who) (symbol? aX275d@who)) aX275d@who (if (not aX275d@who) (let ((aX2767@t aX275f@form)) (let ((aX2769@ls/false (aXd7c@syntax-dispatch aX2767@t 'any))) (if (and aX2769@ls/false (apply (lambda (aX276b@id) (aXb75@id? aX276b@id)) aX2769@ls/false)) (apply (lambda (aX276d@id) (aXe62@syntax->datum aX276d@id)) aX2769@ls/false) (let ((aX276f@t aX2767@t)) (let ((aX2771@ls/false (aXd7c@syntax-dispatch aX276f@t '(any . any)))) (if (and aX2771@ls/false (apply (lambda (aX2773@id aX2774@rest) (aXb75@id? aX2773@id)) aX2771@ls/false)) (apply (lambda (aX2777@id aX2778@rest) (aXe62@syntax->datum aX2777@id)) aX2771@ls/false) (let ((aX277b@t aX276f@t)) (let ((aX277d@ls/false (aXd7c@syntax-dispatch aX277b@t '_))) (if aX277d@ls/false (apply (lambda () '#f) aX277d@ls/false) (aXe5c@syntax-violation '#f '"invalid syntax" aX277b@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" aX275d@who))))) (raise (condition (if aX2765@who (aX2bd3@aX29ce@make-who-condition aX2765@who) (condition)) (aX2b97@aX292f@make-message-condition aX275e@msg) aX2760@condition-object (aXe52@extract-position-condition aX275f@form))))))) (set! aX28b5@aXe5a@syntax-violation* aXe5a@syntax-violation*) (set! aXe5c@syntax-violation (lambda aX278d (let ((aX278e (length aX278d))) (if (= aX278e '3) (apply (lambda (aX277f@who aX2780@msg aX2781@form) (aXe5c@syntax-violation aX277f@who aX2780@msg aX2781@form '#f)) aX278d) (if (= aX278e '4) (apply (lambda (aX2785@who aX2786@msg aX2787@form aX2788@subform) (aXe5a@syntax-violation* aX2785@who aX2786@msg aX2787@form (aX2bf5@aX2a2a@make-syntax-violation (aXe62@syntax->datum aX2787@form) (aXe62@syntax->datum aX2788@subform)))) aX278d) (error 'apply '"invalid arg count")))))) (set! aX28b6@aXe5c@syntax-violation aXe5c@syntax-violation) (set! aXe5e@identifier? (lambda (aX278f@x) (aXb75@id? aX278f@x))) (set! aX28b7@aXe5e@identifier? aXe5e@identifier?) (set! aXe60@datum->syntax (lambda (aX2791@id aX2792@datum) (if (aXb75@id? aX2791@id) (aXb55@datum->stx aX2791@id aX2792@datum) (assertion-violation 'datum->syntax '"not an identifier" aX2791@id)))) (set! aX28b8@aXe60@datum->syntax aXe60@datum->syntax) (set! aXe62@syntax->datum (lambda (aX2795@x) (aXb89@stx->datum aX2795@x))) (set! aX28b9@aXe62@syntax->datum aXe62@syntax->datum) (set! aXe64@ungensym-all (lambda (aX2797@code) (if (pair? aX2797@code) (cons (aXe64@ungensym-all (car aX2797@code)) (aXe64@ungensym-all (cdr aX2797@code))) (if (symbol? aX2797@code) (ungensym aX2797@code) aX2797@code)))) (set! aX28ba@aXe64@ungensym-all aXe64@ungensym-all) (set! aXe66@compile-r6rs-top-level (lambda (aX2799@x*) (call-with-values (lambda () (aXdf4@top-level-expander aX2799@x*)) (lambda (aX279f@aX279c aX27a0@aX279e) (let ((aX27a3@invoke-code aX27a0@aX279e) (aX27a4@lib* aX279f@aX279c)) (lambda () (begin (for-each aX98b@aX7d9@invoke-library aX27a4@lib*) (let ((aX27a7@expanded (aX715@aX6cd@expanded->core aX27a3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (aXe64@ungensym-all aX27a7@expanded)) (void)) (eval-core aX27a7@expanded)))))))))) (set! aX28bb@aXe66@compile-r6rs-top-level aXe66@compile-r6rs-top-level) (set! aXe68@pre-compile-r6rs-top-level (lambda (aX27a9@x*) (call-with-values (lambda () (aXdf4@top-level-expander aX27a9@x*)) (lambda (aX27af@aX27ac aX27b0@aX27ae) (let ((aX27b3@invoke-code aX27b0@aX27ae) (aX27b4@lib* aX27af@aX27ac)) (begin (for-each aX98b@aX7d9@invoke-library aX27b4@lib*) (aX6bd@aX599@compile-core (aX715@aX6cd@expanded->core aX27b3@invoke-code)))))))) (set! aX28bc@aXe68@pre-compile-r6rs-top-level aXe68@pre-compile-r6rs-top-level) (set! aXe6a@interaction-environment (let ((aX27b7@the-env '#f)) (lambda () (or aX27b7@the-env (let ((aX27b9@lib (aX984@aX7cb@find-library-by-name '(mosh interaction))) (aX27ba@rib (aXb29@make-empty-rib))) (begin (let ((aX27bd@subst (aX966@aX78f@library-subst aX27b9@lib))) (begin (aXb15@set-rib-sym*! aX27ba@rib (map car aX27bd@subst)) (aXb19@set-rib-mark**! aX27ba@rib (map (lambda (aX27bf@x) aXaf9@top-mark*) aX27bd@subst)) (aXb1d@set-rib-label*! aX27ba@rib (map cdr aX27bd@subst)))) (let ((aX27c1@env (make-simple-struct 'interaction-env '4 (list aX27ba@rib '() '())))) (begin (set! aX27b7@the-env aX27c1@env) aX27c1@env)))))))) (set! aX28bd@aXe6a@interaction-environment aXe6a@interaction-environment) (set! aXe6c@top-level-context (aX6bf@aX59d@make-parameter '#f)) (set! aX28be@aXe6c@top-level-context aXe6c@top-level-context) (aX981@aX7c5@current-library-expander aXe3e@library-expander))
(begin (set! aX28cd@aX28c8 (unspecified)) (set! aX28cf@aX28ca (unspecified)) (set! aX28d1@aX28c9 (unspecified)) (set! aX28d4@&condition? (unspecified)) (set! aX28d6@make-&condition (unspecified)) (set! aX28d8@&condition-rtd (unspecified)) (set! aX28da@&condition-rcd (unspecified)) (set! aX2926@aX2921 (unspecified)) (set! aX2928@aX2923 (unspecified)) (set! aX292a@aX2922 (unspecified)) (set! aX292d@p? (unspecified)) (set! aX292f@make-message-condition (unspecified)) (set! aX2931@aX2920 (unspecified)) (set! aX2933@message-condition? (unspecified)) (set! aX2935@condition-message (unspecified)) (set! aX2937@&message-rtd (unspecified)) (set! aX2939@&message-rcd (unspecified)) (set! aX293f@aX293a (unspecified)) (set! aX2941@aX293c (unspecified)) (set! aX2943@aX293b (unspecified)) (set! aX2946@p? (unspecified)) (set! aX2948@make-warning (unspecified)) (set! aX294a@warning? (unspecified)) (set! aX294c@&warning-rtd (unspecified)) (set! aX294e@&warning-rcd (unspecified)) (set! aX2954@aX294f (unspecified)) (set! aX2956@aX2951 (unspecified)) (set! aX2958@aX2950 (unspecified)) (set! aX295b@p? (unspecified)) (set! aX295d@make-serious-condition (unspecified)) (set! aX295f@serious-condition? (unspecified)) (set! aX2961@&serious-rtd (unspecified)) (set! aX2963@&serious-rcd (unspecified)) (set! aX2969@aX2964 (unspecified)) (set! aX296b@aX2966 (unspecified)) (set! aX296d@aX2965 (unspecified)) (set! aX2970@p? (unspecified)) (set! aX2972@make-error (unspecified)) (set! aX2974@error? (unspecified)) (set! aX2976@&error-rtd (unspecified)) (set! aX2978@&error-rcd (unspecified)) (set! aX297e@aX2979 (unspecified)) (set! aX2980@aX297b (unspecified)) (set! aX2982@aX297a (unspecified)) (set! aX2985@p? (unspecified)) (set! aX2987@make-violation (unspecified)) (set! aX2989@violation? (unspecified)) (set! aX298b@&violation-rtd (unspecified)) (set! aX298d@&violation-rcd (unspecified)) (set! aX2993@aX298e (unspecified)) (set! aX2995@aX2990 (unspecified)) (set! aX2997@aX298f (unspecified)) (set! aX299a@p? (unspecified)) (set! aX299c@make-assertion-violation (unspecified)) (set! aX299e@assertion-violation? (unspecified)) (set! aX29a0@&assertion-rtd (unspecified)) (set! aX29a2@&assertion-rcd (unspecified)) (set! aX29aa@aX29a5 (unspecified)) (set! aX29ac@aX29a7 (unspecified)) (set! aX29ae@aX29a6 (unspecified)) (set! aX29b1@p? (unspecified)) (set! aX29b3@make-irritants-condition (unspecified)) (set! aX29b5@aX29a4 (unspecified)) (set! aX29b7@irritants-condition? (unspecified)) (set! aX29b9@condition-irritants (unspecified)) (set! aX29bb@&irritants-rtd (unspecified)) (set! aX29bd@&irritants-rcd (unspecified)) (set! aX29c5@aX29c0 (unspecified)) (set! aX29c7@aX29c2 (unspecified)) (set! aX29c9@aX29c1 (unspecified)) (set! aX29cc@p? (unspecified)) (set! aX29ce@make-who-condition (unspecified)) (set! aX29d0@aX29bf (unspecified)) (set! aX29d2@who-condition? (unspecified)) (set! aX29d4@condition-who (unspecified)) (set! aX29d6@&who-rtd (unspecified)) (set! aX29d8@&who-rcd (unspecified)) (set! aX29de@aX29d9 (unspecified)) (set! aX29e0@aX29db (unspecified)) (set! aX29e2@aX29da (unspecified)) (set! aX29e5@p? (unspecified)) (set! aX29e7@make-non-continuable-violation (unspecified)) (set! aX29e9@non-continuable-violation? (unspecified)) (set! aX29eb@&non-continuable-rtd (unspecified)) (set! aX29ed@&non-continuable-rcd (unspecified)) (set! aX29f3@aX29ee (unspecified)) (set! aX29f5@aX29f0 (unspecified)) (set! aX29f7@aX29ef (unspecified)) (set! aX29fa@p? (unspecified)) (set! aX29fc@make-implementation-restriction-violation (unspecified)) (set! aX29fe@implementation-restriction-violation? (unspecified)) (set! aX2a00@&implementation-restriction-rtd (unspecified)) (set! aX2a02@&implementation-restriction-rcd (unspecified)) (set! aX2a08@aX2a03 (unspecified)) (set! aX2a0a@aX2a05 (unspecified)) (set! aX2a0c@aX2a04 (unspecified)) (set! aX2a0f@p? (unspecified)) (set! aX2a11@make-lexical-violation (unspecified)) (set! aX2a13@lexical-violation? (unspecified)) (set! aX2a15@&lexical-rtd (unspecified)) (set! aX2a17@&lexical-rcd (unspecified)) (set! aX2a21@aX2a1c (unspecified)) (set! aX2a23@aX2a1e (unspecified)) (set! aX2a25@aX2a1d (unspecified)) (set! aX2a28@p? (unspecified)) (set! aX2a2a@make-syntax-violation (unspecified)) (set! aX2a2c@aX2a19 (unspecified)) (set! aX2a2e@aX2a1b (unspecified)) (set! aX2a30@syntax-violation? (unspecified)) (set! aX2a32@syntax-violation-form (unspecified)) (set! aX2a34@syntax-violation-subform (unspecified)) (set! aX2a36@&syntax-rtd (unspecified)) (set! aX2a38@&syntax-rcd (unspecified)) (set! aX2a3e@aX2a39 (unspecified)) (set! aX2a40@aX2a3b (unspecified)) (set! aX2a42@aX2a3a (unspecified)) (set! aX2a45@p? (unspecified)) (set! aX2a47@make-undefined-violation (unspecified)) (set! aX2a49@undefined-violation? (unspecified)) (set! aX2a4b@&undefined-rtd (unspecified)) (set! aX2a4d@&undefined-rcd (unspecified)) (set! aX2a53@aX2a4e (unspecified)) (set! aX2a55@aX2a50 (unspecified)) (set! aX2a57@aX2a4f (unspecified)) (set! aX2a5a@p? (unspecified)) (set! aX2a5c@make-i/o-error (unspecified)) (set! aX2a5e@i/o-error? (unspecified)) (set! aX2a60@&i/o-rtd (unspecified)) (set! aX2a62@&i/o-rcd (unspecified)) (set! aX2a68@aX2a63 (unspecified)) (set! aX2a6a@aX2a65 (unspecified)) (set! aX2a6c@aX2a64 (unspecified)) (set! aX2a6f@p? (unspecified)) (set! aX2a71@make-i/o-read-error (unspecified)) (set! aX2a73@i/o-read-error? (unspecified)) (set! aX2a75@&i/o-read-rtd (unspecified)) (set! aX2a77@&i/o-read-rcd (unspecified)) (set! aX2a7d@aX2a78 (unspecified)) (set! aX2a7f@aX2a7a (unspecified)) (set! aX2a81@aX2a79 (unspecified)) (set! aX2a84@p? (unspecified)) (set! aX2a86@make-i/o-write-error (unspecified)) (set! aX2a88@i/o-write-error? (unspecified)) (set! aX2a8a@&i/o-write-rtd (unspecified)) (set! aX2a8c@&i/o-write-rcd (unspecified)) (set! aX2a94@aX2a8f (unspecified)) (set! aX2a96@aX2a91 (unspecified)) (set! aX2a98@aX2a90 (unspecified)) (set! aX2a9b@p? (unspecified)) (set! aX2a9d@make-i/o-invalid-position-error (unspecified)) (set! aX2a9f@aX2a8e (unspecified)) (set! aX2aa1@i/o-invalid-position-error? (unspecified)) (set! aX2aa3@i/o-error-position (unspecified)) (set! aX2aa5@&i/o-invalid-position-rtd (unspecified)) (set! aX2aa7@&i/o-invalid-position-rcd (unspecified)) (set! aX2aaf@aX2aaa (unspecified)) (set! aX2ab1@aX2aac (unspecified)) (set! aX2ab3@aX2aab (unspecified)) (set! aX2ab6@p? (unspecified)) (set! aX2ab8@make-i/o-filename-error (unspecified)) (set! aX2aba@aX2aa9 (unspecified)) (set! aX2abc@i/o-filename-error? (unspecified)) (set! aX2abe@i/o-error-filename (unspecified)) (set! aX2ac0@&i/o-filename-rtd (unspecified)) (set! aX2ac2@&i/o-filename-rcd (unspecified)) (set! aX2ac8@aX2ac3 (unspecified)) (set! aX2aca@aX2ac5 (unspecified)) (set! aX2acc@aX2ac4 (unspecified)) (set! aX2acf@p? (unspecified)) (set! aX2ad1@make-i/o-file-protection-error (unspecified)) (set! aX2ad3@i/o-file-protection-error? (unspecified)) (set! aX2ad5@&i/o-file-protection-rtd (unspecified)) (set! aX2ad7@&i/o-file-protection-rcd (unspecified)) (set! aX2add@aX2ad8 (unspecified)) (set! aX2adf@aX2ada (unspecified)) (set! aX2ae1@aX2ad9 (unspecified)) (set! aX2ae4@p? (unspecified)) (set! aX2ae6@make-i/o-file-is-read-only-error (unspecified)) (set! aX2ae8@i/o-file-is-read-only-error? (unspecified)) (set! aX2aea@&i/o-file-is-read-only-rtd (unspecified)) (set! aX2aec@&i/o-file-is-read-only-rcd (unspecified)) (set! aX2af2@aX2aed (unspecified)) (set! aX2af4@aX2aef (unspecified)) (set! aX2af6@aX2aee (unspecified)) (set! aX2af9@p? (unspecified)) (set! aX2afb@make-i/o-file-already-exists-error (unspecified)) (set! aX2afd@i/o-file-already-exists-error? (unspecified)) (set! aX2aff@&i/o-file-already-exists-rtd (unspecified)) (set! aX2b01@&i/o-file-already-exists-rcd (unspecified)) (set! aX2b07@aX2b02 (unspecified)) (set! aX2b09@aX2b04 (unspecified)) (set! aX2b0b@aX2b03 (unspecified)) (set! aX2b0e@p? (unspecified)) (set! aX2b10@make-i/o-file-does-not-exist-error (unspecified)) (set! aX2b12@i/o-file-does-not-exist-error? (unspecified)) (set! aX2b14@&i/o-file-does-not-exist-rtd (unspecified)) (set! aX2b16@&i/o-file-does-not-exist-rcd (unspecified)) (set! aX2b1e@aX2b19 (unspecified)) (set! aX2b20@aX2b1b (unspecified)) (set! aX2b22@aX2b1a (unspecified)) (set! aX2b25@p? (unspecified)) (set! aX2b27@make-i/o-port-error (unspecified)) (set! aX2b29@aX2b18 (unspecified)) (set! aX2b2b@i/o-port-error? (unspecified)) (set! aX2b2d@i/o-error-port (unspecified)) (set! aX2b2f@&i/o-port-rtd (unspecified)) (set! aX2b31@&i/o-port-rcd (unspecified)) (set! aX2b37@aX2b32 (unspecified)) (set! aX2b39@aX2b34 (unspecified)) (set! aX2b3b@aX2b33 (unspecified)) (set! aX2b3e@p? (unspecified)) (set! aX2b40@make-i/o-decoding-error (unspecified)) (set! aX2b42@i/o-decoding-error? (unspecified)) (set! aX2b44@&i/o-decoding-rtd (unspecified)) (set! aX2b46@&i/o-decoding-rcd (unspecified)) (set! aX2b4e@aX2b49 (unspecified)) (set! aX2b50@aX2b4b (unspecified)) (set! aX2b52@aX2b4a (unspecified)) (set! aX2b55@p? (unspecified)) (set! aX2b57@make-i/o-encoding-error (unspecified)) (set! aX2b59@aX2b48 (unspecified)) (set! aX2b5b@i/o-encoding-error? (unspecified)) (set! aX2b5d@i/o-encoding-error-char (unspecified)) (set! aX2b5f@&i/o-encoding-rtd (unspecified)) (set! aX2b61@&i/o-encoding-rcd (unspecified)) (set! aX2b67@aX2b62 (unspecified)) (set! aX2b69@aX2b64 (unspecified)) (set! aX2b6b@aX2b63 (unspecified)) (set! aX2b6e@p? (unspecified)) (set! aX2b70@make-no-infinities-violation (unspecified)) (set! aX2b72@no-infinities-violation? (unspecified)) (set! aX2b74@&no-infinities-rtd (unspecified)) (set! aX2b76@&no-infinities-rcd (unspecified)) (set! aX2b7c@aX2b77 (unspecified)) (set! aX2b7e@aX2b79 (unspecified)) (set! aX2b80@aX2b78 (unspecified)) (set! aX2b83@p? (unspecified)) (set! aX2b85@make-no-nans-violation (unspecified)) (set! aX2b87@no-nans-violation? (unspecified)) (set! aX2b89@&no-nans-rtd (unspecified)) (set! aX2b8b@&no-nans-rcd (unspecified)) (set! aX28cd@aX28c8 (make-record-type-descriptor '&condition '#f 'aX28cb '#f '#f '#())) (set! aX2b8c@aX28cd@aX28c8 aX28cd@aX28c8) (set! aX28cf@aX28ca '#f) (set! aX2b8d@aX28cf@aX28ca aX28cf@aX28ca) (set! aX28d1@aX28c9 (make-record-constructor-descriptor aX28cd@aX28c8 '#f aX28cf@aX28ca)) (set! aX2b8e@aX28d1@aX28c9 aX28d1@aX28c9) (set! aX28d4@&condition? (record-predicate aX28cd@aX28c8)) (set! aX2b8f@aX28d4@&condition? aX28d4@&condition?) (set! aX28d6@make-&condition (record-constructor aX28d1@aX28c9)) (set! aX2b90@aX28d6@make-&condition aX28d6@make-&condition) (set! aX28d8@&condition-rtd aX28cd@aX28c8) (set! aX2b91@aX28d8@&condition-rtd aX28d8@&condition-rtd) (set! aX28da@&condition-rcd aX28d1@aX28c9) (set! aX2b92@aX28da@&condition-rcd aX28da@&condition-rcd) (set! aX2926@aX2921 (make-record-type-descriptor '&message aX28cd@aX28c8 'aX2924 '#f '#f '#((immutable message)))) (set! aX2b93@aX2926@aX2921 aX2926@aX2921) (set! aX2928@aX2923 '#f) (set! aX2b94@aX2928@aX2923 aX2928@aX2923) (set! aX292a@aX2922 (make-record-constructor-descriptor aX2926@aX2921 aX28d1@aX28c9 aX2928@aX2923)) (set! aX2b95@aX292a@aX2922 aX292a@aX2922) (set! aX292d@p? (record-predicate aX2926@aX2921)) (set! aX2b96@aX292d@p? aX292d@p?) (set! aX292f@make-message-condition (record-constructor aX292a@aX2922)) (set! aX2b97@aX292f@make-message-condition aX292f@make-message-condition) (set! aX2931@aX2920 (record-accessor aX2926@aX2921 '0)) (set! aX2b98@aX2931@aX2920 aX2931@aX2920) (set! aX2933@message-condition? (condition-predicate aX2926@aX2921)) (set! aX2b99@aX2933@message-condition? aX2933@message-condition?) (set! aX2935@condition-message (condition-accessor aX2926@aX2921 aX2931@aX2920)) (set! aX2b9a@aX2935@condition-message aX2935@condition-message) (set! aX2937@&message-rtd aX2926@aX2921) (set! aX2b9b@aX2937@&message-rtd aX2937@&message-rtd) (set! aX2939@&message-rcd aX292a@aX2922) (set! aX2b9c@aX2939@&message-rcd aX2939@&message-rcd) (set! aX293f@aX293a (make-record-type-descriptor '&warning aX28cd@aX28c8 'aX293d '#f '#f '#())) (set! aX2b9d@aX293f@aX293a aX293f@aX293a) (set! aX2941@aX293c '#f) (set! aX2b9e@aX2941@aX293c aX2941@aX293c) (set! aX2943@aX293b (make-record-constructor-descriptor aX293f@aX293a aX28d1@aX28c9 aX2941@aX293c)) (set! aX2b9f@aX2943@aX293b aX2943@aX293b) (set! aX2946@p? (record-predicate aX293f@aX293a)) (set! aX2ba0@aX2946@p? aX2946@p?) (set! aX2948@make-warning (record-constructor aX2943@aX293b)) (set! aX2ba1@aX2948@make-warning aX2948@make-warning) (set! aX294a@warning? (condition-predicate aX293f@aX293a)) (set! aX2ba2@aX294a@warning? aX294a@warning?) (set! aX294c@&warning-rtd aX293f@aX293a) (set! aX2ba3@aX294c@&warning-rtd aX294c@&warning-rtd) (set! aX294e@&warning-rcd aX2943@aX293b) (set! aX2ba4@aX294e@&warning-rcd aX294e@&warning-rcd) (set! aX2954@aX294f (make-record-type-descriptor '&serious aX28cd@aX28c8 'aX2952 '#f '#f '#())) (set! aX2ba5@aX2954@aX294f aX2954@aX294f) (set! aX2956@aX2951 '#f) (set! aX2ba6@aX2956@aX2951 aX2956@aX2951) (set! aX2958@aX2950 (make-record-constructor-descriptor aX2954@aX294f aX28d1@aX28c9 aX2956@aX2951)) (set! aX2ba7@aX2958@aX2950 aX2958@aX2950) (set! aX295b@p? (record-predicate aX2954@aX294f)) (set! aX2ba8@aX295b@p? aX295b@p?) (set! aX295d@make-serious-condition (record-constructor aX2958@aX2950)) (set! aX2ba9@aX295d@make-serious-condition aX295d@make-serious-condition) (set! aX295f@serious-condition? (condition-predicate aX2954@aX294f)) (set! aX2baa@aX295f@serious-condition? aX295f@serious-condition?) (set! aX2961@&serious-rtd aX2954@aX294f) (set! aX2bab@aX2961@&serious-rtd aX2961@&serious-rtd) (set! aX2963@&serious-rcd aX2958@aX2950) (set! aX2bac@aX2963@&serious-rcd aX2963@&serious-rcd) (set! aX2969@aX2964 (make-record-type-descriptor '&error aX2954@aX294f 'aX2967 '#f '#f '#())) (set! aX2bad@aX2969@aX2964 aX2969@aX2964) (set! aX296b@aX2966 '#f) (set! aX2bae@aX296b@aX2966 aX296b@aX2966) (set! aX296d@aX2965 (make-record-constructor-descriptor aX2969@aX2964 aX2958@aX2950 aX296b@aX2966)) (set! aX2baf@aX296d@aX2965 aX296d@aX2965) (set! aX2970@p? (record-predicate aX2969@aX2964)) (set! aX2bb0@aX2970@p? aX2970@p?) (set! aX2972@make-error (record-constructor aX296d@aX2965)) (set! aX2bb1@aX2972@make-error aX2972@make-error) (set! aX2974@error? (condition-predicate aX2969@aX2964)) (set! aX2bb2@aX2974@error? aX2974@error?) (set! aX2976@&error-rtd aX2969@aX2964) (set! aX2bb3@aX2976@&error-rtd aX2976@&error-rtd) (set! aX2978@&error-rcd aX296d@aX2965) (set! aX2bb4@aX2978@&error-rcd aX2978@&error-rcd) (set! aX297e@aX2979 (make-record-type-descriptor '&violation aX2954@aX294f 'aX297c '#f '#f '#())) (set! aX2bb5@aX297e@aX2979 aX297e@aX2979) (set! aX2980@aX297b '#f) (set! aX2bb6@aX2980@aX297b aX2980@aX297b) (set! aX2982@aX297a (make-record-constructor-descriptor aX297e@aX2979 aX2958@aX2950 aX2980@aX297b)) (set! aX2bb7@aX2982@aX297a aX2982@aX297a) (set! aX2985@p? (record-predicate aX297e@aX2979)) (set! aX2bb8@aX2985@p? aX2985@p?) (set! aX2987@make-violation (record-constructor aX2982@aX297a)) (set! aX2bb9@aX2987@make-violation aX2987@make-violation) (set! aX2989@violation? (condition-predicate aX297e@aX2979)) (set! aX2bba@aX2989@violation? aX2989@violation?) (set! aX298b@&violation-rtd aX297e@aX2979) (set! aX2bbb@aX298b@&violation-rtd aX298b@&violation-rtd) (set! aX298d@&violation-rcd aX2982@aX297a) (set! aX2bbc@aX298d@&violation-rcd aX298d@&violation-rcd) (set! aX2993@aX298e (make-record-type-descriptor '&assertion aX297e@aX2979 'aX2991 '#f '#f '#())) (set! aX2bbd@aX2993@aX298e aX2993@aX298e) (set! aX2995@aX2990 '#f) (set! aX2bbe@aX2995@aX2990 aX2995@aX2990) (set! aX2997@aX298f (make-record-constructor-descriptor aX2993@aX298e aX2982@aX297a aX2995@aX2990)) (set! aX2bbf@aX2997@aX298f aX2997@aX298f) (set! aX299a@p? (record-predicate aX2993@aX298e)) (set! aX2bc0@aX299a@p? aX299a@p?) (set! aX299c@make-assertion-violation (record-constructor aX2997@aX298f)) (set! aX2bc1@aX299c@make-assertion-violation aX299c@make-assertion-violation) (set! aX299e@assertion-violation? (condition-predicate aX2993@aX298e)) (set! aX2bc2@aX299e@assertion-violation? aX299e@assertion-violation?) (set! aX29a0@&assertion-rtd aX2993@aX298e) (set! aX2bc3@aX29a0@&assertion-rtd aX29a0@&assertion-rtd) (set! aX29a2@&assertion-rcd aX2997@aX298f) (set! aX2bc4@aX29a2@&assertion-rcd aX29a2@&assertion-rcd) (set! aX29aa@aX29a5 (make-record-type-descriptor '&irritants aX28cd@aX28c8 'aX29a8 '#f '#f '#((immutable irritants)))) (set! aX2bc5@aX29aa@aX29a5 aX29aa@aX29a5) (set! aX29ac@aX29a7 '#f) (set! aX2bc6@aX29ac@aX29a7 aX29ac@aX29a7) (set! aX29ae@aX29a6 (make-record-constructor-descriptor aX29aa@aX29a5 aX28d1@aX28c9 aX29ac@aX29a7)) (set! aX2bc7@aX29ae@aX29a6 aX29ae@aX29a6) (set! aX29b1@p? (record-predicate aX29aa@aX29a5)) (set! aX2bc8@aX29b1@p? aX29b1@p?) (set! aX29b3@make-irritants-condition (record-constructor aX29ae@aX29a6)) (set! aX2bc9@aX29b3@make-irritants-condition aX29b3@make-irritants-condition) (set! aX29b5@aX29a4 (record-accessor aX29aa@aX29a5 '0)) (set! aX2bca@aX29b5@aX29a4 aX29b5@aX29a4) (set! aX29b7@irritants-condition? (condition-predicate aX29aa@aX29a5)) (set! aX2bcb@aX29b7@irritants-condition? aX29b7@irritants-condition?) (set! aX29b9@condition-irritants (condition-accessor aX29aa@aX29a5 aX29b5@aX29a4)) (set! aX2bcc@aX29b9@condition-irritants aX29b9@condition-irritants) (set! aX29bb@&irritants-rtd aX29aa@aX29a5) (set! aX2bcd@aX29bb@&irritants-rtd aX29bb@&irritants-rtd) (set! aX29bd@&irritants-rcd aX29ae@aX29a6) (set! aX2bce@aX29bd@&irritants-rcd aX29bd@&irritants-rcd) (set! aX29c5@aX29c0 (make-record-type-descriptor '&who aX28cd@aX28c8 'aX29c3 '#f '#f '#((immutable who)))) (set! aX2bcf@aX29c5@aX29c0 aX29c5@aX29c0) (set! aX29c7@aX29c2 '#f) (set! aX2bd0@aX29c7@aX29c2 aX29c7@aX29c2) (set! aX29c9@aX29c1 (make-record-constructor-descriptor aX29c5@aX29c0 aX28d1@aX28c9 aX29c7@aX29c2)) (set! aX2bd1@aX29c9@aX29c1 aX29c9@aX29c1) (set! aX29cc@p? (record-predicate aX29c5@aX29c0)) (set! aX2bd2@aX29cc@p? aX29cc@p?) (set! aX29ce@make-who-condition (record-constructor aX29c9@aX29c1)) (set! aX2bd3@aX29ce@make-who-condition aX29ce@make-who-condition) (set! aX29d0@aX29bf (record-accessor aX29c5@aX29c0 '0)) (set! aX2bd4@aX29d0@aX29bf aX29d0@aX29bf) (set! aX29d2@who-condition? (condition-predicate aX29c5@aX29c0)) (set! aX2bd5@aX29d2@who-condition? aX29d2@who-condition?) (set! aX29d4@condition-who (condition-accessor aX29c5@aX29c0 aX29d0@aX29bf)) (set! aX2bd6@aX29d4@condition-who aX29d4@condition-who) (set! aX29d6@&who-rtd aX29c5@aX29c0) (set! aX2bd7@aX29d6@&who-rtd aX29d6@&who-rtd) (set! aX29d8@&who-rcd aX29c9@aX29c1) (set! aX2bd8@aX29d8@&who-rcd aX29d8@&who-rcd) (set! aX29de@aX29d9 (make-record-type-descriptor '&non-continuable aX297e@aX2979 'aX29dc '#f '#f '#())) (set! aX2bd9@aX29de@aX29d9 aX29de@aX29d9) (set! aX29e0@aX29db '#f) (set! aX2bda@aX29e0@aX29db aX29e0@aX29db) (set! aX29e2@aX29da (make-record-constructor-descriptor aX29de@aX29d9 aX2982@aX297a aX29e0@aX29db)) (set! aX2bdb@aX29e2@aX29da aX29e2@aX29da) (set! aX29e5@p? (record-predicate aX29de@aX29d9)) (set! aX2bdc@aX29e5@p? aX29e5@p?) (set! aX29e7@make-non-continuable-violation (record-constructor aX29e2@aX29da)) (set! aX2bdd@aX29e7@make-non-continuable-violation aX29e7@make-non-continuable-violation) (set! aX29e9@non-continuable-violation? (condition-predicate aX29de@aX29d9)) (set! aX2bde@aX29e9@non-continuable-violation? aX29e9@non-continuable-violation?) (set! aX29eb@&non-continuable-rtd aX29de@aX29d9) (set! aX2bdf@aX29eb@&non-continuable-rtd aX29eb@&non-continuable-rtd) (set! aX29ed@&non-continuable-rcd aX29e2@aX29da) (set! aX2be0@aX29ed@&non-continuable-rcd aX29ed@&non-continuable-rcd) (set! aX29f3@aX29ee (make-record-type-descriptor '&implementation-restriction aX297e@aX2979 'aX29f1 '#f '#f '#())) (set! aX2be1@aX29f3@aX29ee aX29f3@aX29ee) (set! aX29f5@aX29f0 '#f) (set! aX2be2@aX29f5@aX29f0 aX29f5@aX29f0) (set! aX29f7@aX29ef (make-record-constructor-descriptor aX29f3@aX29ee aX2982@aX297a aX29f5@aX29f0)) (set! aX2be3@aX29f7@aX29ef aX29f7@aX29ef) (set! aX29fa@p? (record-predicate aX29f3@aX29ee)) (set! aX2be4@aX29fa@p? aX29fa@p?) (set! aX29fc@make-implementation-restriction-violation (record-constructor aX29f7@aX29ef)) (set! aX2be5@aX29fc@make-implementation-restriction-violation aX29fc@make-implementation-restriction-violation) (set! aX29fe@implementation-restriction-violation? (condition-predicate aX29f3@aX29ee)) (set! aX2be6@aX29fe@implementation-restriction-violation? aX29fe@implementation-restriction-violation?) (set! aX2a00@&implementation-restriction-rtd aX29f3@aX29ee) (set! aX2be7@aX2a00@&implementation-restriction-rtd aX2a00@&implementation-restriction-rtd) (set! aX2a02@&implementation-restriction-rcd aX29f7@aX29ef) (set! aX2be8@aX2a02@&implementation-restriction-rcd aX2a02@&implementation-restriction-rcd) (set! aX2a08@aX2a03 (make-record-type-descriptor '&lexical aX297e@aX2979 'aX2a06 '#f '#f '#())) (set! aX2be9@aX2a08@aX2a03 aX2a08@aX2a03) (set! aX2a0a@aX2a05 '#f) (set! aX2bea@aX2a0a@aX2a05 aX2a0a@aX2a05) (set! aX2a0c@aX2a04 (make-record-constructor-descriptor aX2a08@aX2a03 aX2982@aX297a aX2a0a@aX2a05)) (set! aX2beb@aX2a0c@aX2a04 aX2a0c@aX2a04) (set! aX2a0f@p? (record-predicate aX2a08@aX2a03)) (set! aX2bec@aX2a0f@p? aX2a0f@p?) (set! aX2a11@make-lexical-violation (record-constructor aX2a0c@aX2a04)) (set! aX2bed@aX2a11@make-lexical-violation aX2a11@make-lexical-violation) (set! aX2a13@lexical-violation? (condition-predicate aX2a08@aX2a03)) (set! aX2bee@aX2a13@lexical-violation? aX2a13@lexical-violation?) (set! aX2a15@&lexical-rtd aX2a08@aX2a03) (set! aX2bef@aX2a15@&lexical-rtd aX2a15@&lexical-rtd) (set! aX2a17@&lexical-rcd aX2a0c@aX2a04) (set! aX2bf0@aX2a17@&lexical-rcd aX2a17@&lexical-rcd) (set! aX2a21@aX2a1c (make-record-type-descriptor '&syntax aX297e@aX2979 'aX2a1f '#f '#f '#((immutable form) (immutable subform)))) (set! aX2bf1@aX2a21@aX2a1c aX2a21@aX2a1c) (set! aX2a23@aX2a1e '#f) (set! aX2bf2@aX2a23@aX2a1e aX2a23@aX2a1e) (set! aX2a25@aX2a1d (make-record-constructor-descriptor aX2a21@aX2a1c aX2982@aX297a aX2a23@aX2a1e)) (set! aX2bf3@aX2a25@aX2a1d aX2a25@aX2a1d) (set! aX2a28@p? (record-predicate aX2a21@aX2a1c)) (set! aX2bf4@aX2a28@p? aX2a28@p?) (set! aX2a2a@make-syntax-violation (record-constructor aX2a25@aX2a1d)) (set! aX2bf5@aX2a2a@make-syntax-violation aX2a2a@make-syntax-violation) (set! aX2a2c@aX2a19 (record-accessor aX2a21@aX2a1c '0)) (set! aX2bf6@aX2a2c@aX2a19 aX2a2c@aX2a19) (set! aX2a2e@aX2a1b (record-accessor aX2a21@aX2a1c '1)) (set! aX2bf7@aX2a2e@aX2a1b aX2a2e@aX2a1b) (set! aX2a30@syntax-violation? (condition-predicate aX2a21@aX2a1c)) (set! aX2bf8@aX2a30@syntax-violation? aX2a30@syntax-violation?) (set! aX2a32@syntax-violation-form (condition-accessor aX2a21@aX2a1c aX2a2c@aX2a19)) (set! aX2bf9@aX2a32@syntax-violation-form aX2a32@syntax-violation-form) (set! aX2a34@syntax-violation-subform (condition-accessor aX2a21@aX2a1c aX2a2e@aX2a1b)) (set! aX2bfa@aX2a34@syntax-violation-subform aX2a34@syntax-violation-subform) (set! aX2a36@&syntax-rtd aX2a21@aX2a1c) (set! aX2bfb@aX2a36@&syntax-rtd aX2a36@&syntax-rtd) (set! aX2a38@&syntax-rcd aX2a25@aX2a1d) (set! aX2bfc@aX2a38@&syntax-rcd aX2a38@&syntax-rcd) (set! aX2a3e@aX2a39 (make-record-type-descriptor '&undefined aX297e@aX2979 'aX2a3c '#f '#f '#())) (set! aX2bfd@aX2a3e@aX2a39 aX2a3e@aX2a39) (set! aX2a40@aX2a3b '#f) (set! aX2bfe@aX2a40@aX2a3b aX2a40@aX2a3b) (set! aX2a42@aX2a3a (make-record-constructor-descriptor aX2a3e@aX2a39 aX2982@aX297a aX2a40@aX2a3b)) (set! aX2bff@aX2a42@aX2a3a aX2a42@aX2a3a) (set! aX2a45@p? (record-predicate aX2a3e@aX2a39)) (set! aX2c00@aX2a45@p? aX2a45@p?) (set! aX2a47@make-undefined-violation (record-constructor aX2a42@aX2a3a)) (set! aX2c01@aX2a47@make-undefined-violation aX2a47@make-undefined-violation) (set! aX2a49@undefined-violation? (condition-predicate aX2a3e@aX2a39)) (set! aX2c02@aX2a49@undefined-violation? aX2a49@undefined-violation?) (set! aX2a4b@&undefined-rtd aX2a3e@aX2a39) (set! aX2c03@aX2a4b@&undefined-rtd aX2a4b@&undefined-rtd) (set! aX2a4d@&undefined-rcd aX2a42@aX2a3a) (set! aX2c04@aX2a4d@&undefined-rcd aX2a4d@&undefined-rcd) (set! aX2a53@aX2a4e (make-record-type-descriptor '&i/o aX2969@aX2964 'aX2a51 '#f '#f '#())) (set! aX2c05@aX2a53@aX2a4e aX2a53@aX2a4e) (set! aX2a55@aX2a50 '#f) (set! aX2c06@aX2a55@aX2a50 aX2a55@aX2a50) (set! aX2a57@aX2a4f (make-record-constructor-descriptor aX2a53@aX2a4e aX296d@aX2965 aX2a55@aX2a50)) (set! aX2c07@aX2a57@aX2a4f aX2a57@aX2a4f) (set! aX2a5a@p? (record-predicate aX2a53@aX2a4e)) (set! aX2c08@aX2a5a@p? aX2a5a@p?) (set! aX2a5c@make-i/o-error (record-constructor aX2a57@aX2a4f)) (set! aX2c09@aX2a5c@make-i/o-error aX2a5c@make-i/o-error) (set! aX2a5e@i/o-error? (condition-predicate aX2a53@aX2a4e)) (set! aX2c0a@aX2a5e@i/o-error? aX2a5e@i/o-error?) (set! aX2a60@&i/o-rtd aX2a53@aX2a4e) (set! aX2c0b@aX2a60@&i/o-rtd aX2a60@&i/o-rtd) (set! aX2a62@&i/o-rcd aX2a57@aX2a4f) (set! aX2c0c@aX2a62@&i/o-rcd aX2a62@&i/o-rcd) (set! aX2a68@aX2a63 (make-record-type-descriptor '&i/o-read aX2a53@aX2a4e 'aX2a66 '#f '#f '#())) (set! aX2c0d@aX2a68@aX2a63 aX2a68@aX2a63) (set! aX2a6a@aX2a65 '#f) (set! aX2c0e@aX2a6a@aX2a65 aX2a6a@aX2a65) (set! aX2a6c@aX2a64 (make-record-constructor-descriptor aX2a68@aX2a63 aX2a57@aX2a4f aX2a6a@aX2a65)) (set! aX2c0f@aX2a6c@aX2a64 aX2a6c@aX2a64) (set! aX2a6f@p? (record-predicate aX2a68@aX2a63)) (set! aX2c10@aX2a6f@p? aX2a6f@p?) (set! aX2a71@make-i/o-read-error (record-constructor aX2a6c@aX2a64)) (set! aX2c11@aX2a71@make-i/o-read-error aX2a71@make-i/o-read-error) (set! aX2a73@i/o-read-error? (condition-predicate aX2a68@aX2a63)) (set! aX2c12@aX2a73@i/o-read-error? aX2a73@i/o-read-error?) (set! aX2a75@&i/o-read-rtd aX2a68@aX2a63) (set! aX2c13@aX2a75@&i/o-read-rtd aX2a75@&i/o-read-rtd) (set! aX2a77@&i/o-read-rcd aX2a6c@aX2a64) (set! aX2c14@aX2a77@&i/o-read-rcd aX2a77@&i/o-read-rcd) (set! aX2a7d@aX2a78 (make-record-type-descriptor '&i/o-write aX2a53@aX2a4e 'aX2a7b '#f '#f '#())) (set! aX2c15@aX2a7d@aX2a78 aX2a7d@aX2a78) (set! aX2a7f@aX2a7a '#f) (set! aX2c16@aX2a7f@aX2a7a aX2a7f@aX2a7a) (set! aX2a81@aX2a79 (make-record-constructor-descriptor aX2a7d@aX2a78 aX2a57@aX2a4f aX2a7f@aX2a7a)) (set! aX2c17@aX2a81@aX2a79 aX2a81@aX2a79) (set! aX2a84@p? (record-predicate aX2a7d@aX2a78)) (set! aX2c18@aX2a84@p? aX2a84@p?) (set! aX2a86@make-i/o-write-error (record-constructor aX2a81@aX2a79)) (set! aX2c19@aX2a86@make-i/o-write-error aX2a86@make-i/o-write-error) (set! aX2a88@i/o-write-error? (condition-predicate aX2a7d@aX2a78)) (set! aX2c1a@aX2a88@i/o-write-error? aX2a88@i/o-write-error?) (set! aX2a8a@&i/o-write-rtd aX2a7d@aX2a78) (set! aX2c1b@aX2a8a@&i/o-write-rtd aX2a8a@&i/o-write-rtd) (set! aX2a8c@&i/o-write-rcd aX2a81@aX2a79) (set! aX2c1c@aX2a8c@&i/o-write-rcd aX2a8c@&i/o-write-rcd) (set! aX2a94@aX2a8f (make-record-type-descriptor '&i/o-invalid-position aX2a53@aX2a4e 'aX2a92 '#f '#f '#((immutable position)))) (set! aX2c1d@aX2a94@aX2a8f aX2a94@aX2a8f) (set! aX2a96@aX2a91 '#f) (set! aX2c1e@aX2a96@aX2a91 aX2a96@aX2a91) (set! aX2a98@aX2a90 (make-record-constructor-descriptor aX2a94@aX2a8f aX2a57@aX2a4f aX2a96@aX2a91)) (set! aX2c1f@aX2a98@aX2a90 aX2a98@aX2a90) (set! aX2a9b@p? (record-predicate aX2a94@aX2a8f)) (set! aX2c20@aX2a9b@p? aX2a9b@p?) (set! aX2a9d@make-i/o-invalid-position-error (record-constructor aX2a98@aX2a90)) (set! aX2c21@aX2a9d@make-i/o-invalid-position-error aX2a9d@make-i/o-invalid-position-error) (set! aX2a9f@aX2a8e (record-accessor aX2a94@aX2a8f '0)) (set! aX2c22@aX2a9f@aX2a8e aX2a9f@aX2a8e) (set! aX2aa1@i/o-invalid-position-error? (condition-predicate aX2a94@aX2a8f)) (set! aX2c23@aX2aa1@i/o-invalid-position-error? aX2aa1@i/o-invalid-position-error?) (set! aX2aa3@i/o-error-position (condition-accessor aX2a94@aX2a8f aX2a9f@aX2a8e)) (set! aX2c24@aX2aa3@i/o-error-position aX2aa3@i/o-error-position) (set! aX2aa5@&i/o-invalid-position-rtd aX2a94@aX2a8f) (set! aX2c25@aX2aa5@&i/o-invalid-position-rtd aX2aa5@&i/o-invalid-position-rtd) (set! aX2aa7@&i/o-invalid-position-rcd aX2a98@aX2a90) (set! aX2c26@aX2aa7@&i/o-invalid-position-rcd aX2aa7@&i/o-invalid-position-rcd) (set! aX2aaf@aX2aaa (make-record-type-descriptor '&i/o-filename aX2a53@aX2a4e 'aX2aad '#f '#f '#((immutable filename)))) (set! aX2c27@aX2aaf@aX2aaa aX2aaf@aX2aaa) (set! aX2ab1@aX2aac '#f) (set! aX2c28@aX2ab1@aX2aac aX2ab1@aX2aac) (set! aX2ab3@aX2aab (make-record-constructor-descriptor aX2aaf@aX2aaa aX2a57@aX2a4f aX2ab1@aX2aac)) (set! aX2c29@aX2ab3@aX2aab aX2ab3@aX2aab) (set! aX2ab6@p? (record-predicate aX2aaf@aX2aaa)) (set! aX2c2a@aX2ab6@p? aX2ab6@p?) (set! aX2ab8@make-i/o-filename-error (record-constructor aX2ab3@aX2aab)) (set! aX2c2b@aX2ab8@make-i/o-filename-error aX2ab8@make-i/o-filename-error) (set! aX2aba@aX2aa9 (record-accessor aX2aaf@aX2aaa '0)) (set! aX2c2c@aX2aba@aX2aa9 aX2aba@aX2aa9) (set! aX2abc@i/o-filename-error? (condition-predicate aX2aaf@aX2aaa)) (set! aX2c2d@aX2abc@i/o-filename-error? aX2abc@i/o-filename-error?) (set! aX2abe@i/o-error-filename (condition-accessor aX2aaf@aX2aaa aX2aba@aX2aa9)) (set! aX2c2e@aX2abe@i/o-error-filename aX2abe@i/o-error-filename) (set! aX2ac0@&i/o-filename-rtd aX2aaf@aX2aaa) (set! aX2c2f@aX2ac0@&i/o-filename-rtd aX2ac0@&i/o-filename-rtd) (set! aX2ac2@&i/o-filename-rcd aX2ab3@aX2aab) (set! aX2c30@aX2ac2@&i/o-filename-rcd aX2ac2@&i/o-filename-rcd) (set! aX2ac8@aX2ac3 (make-record-type-descriptor '&i/o-file-protection aX2aaf@aX2aaa 'aX2ac6 '#f '#f '#())) (set! aX2c31@aX2ac8@aX2ac3 aX2ac8@aX2ac3) (set! aX2aca@aX2ac5 '#f) (set! aX2c32@aX2aca@aX2ac5 aX2aca@aX2ac5) (set! aX2acc@aX2ac4 (make-record-constructor-descriptor aX2ac8@aX2ac3 aX2ab3@aX2aab aX2aca@aX2ac5)) (set! aX2c33@aX2acc@aX2ac4 aX2acc@aX2ac4) (set! aX2acf@p? (record-predicate aX2ac8@aX2ac3)) (set! aX2c34@aX2acf@p? aX2acf@p?) (set! aX2ad1@make-i/o-file-protection-error (record-constructor aX2acc@aX2ac4)) (set! aX2c35@aX2ad1@make-i/o-file-protection-error aX2ad1@make-i/o-file-protection-error) (set! aX2ad3@i/o-file-protection-error? (condition-predicate aX2ac8@aX2ac3)) (set! aX2c36@aX2ad3@i/o-file-protection-error? aX2ad3@i/o-file-protection-error?) (set! aX2ad5@&i/o-file-protection-rtd aX2ac8@aX2ac3) (set! aX2c37@aX2ad5@&i/o-file-protection-rtd aX2ad5@&i/o-file-protection-rtd) (set! aX2ad7@&i/o-file-protection-rcd aX2acc@aX2ac4) (set! aX2c38@aX2ad7@&i/o-file-protection-rcd aX2ad7@&i/o-file-protection-rcd) (set! aX2add@aX2ad8 (make-record-type-descriptor '&i/o-file-is-read-only aX2ac8@aX2ac3 'aX2adb '#f '#f '#())) (set! aX2c39@aX2add@aX2ad8 aX2add@aX2ad8) (set! aX2adf@aX2ada '#f) (set! aX2c3a@aX2adf@aX2ada aX2adf@aX2ada) (set! aX2ae1@aX2ad9 (make-record-constructor-descriptor aX2add@aX2ad8 aX2acc@aX2ac4 aX2adf@aX2ada)) (set! aX2c3b@aX2ae1@aX2ad9 aX2ae1@aX2ad9) (set! aX2ae4@p? (record-predicate aX2add@aX2ad8)) (set! aX2c3c@aX2ae4@p? aX2ae4@p?) (set! aX2ae6@make-i/o-file-is-read-only-error (record-constructor aX2ae1@aX2ad9)) (set! aX2c3d@aX2ae6@make-i/o-file-is-read-only-error aX2ae6@make-i/o-file-is-read-only-error) (set! aX2ae8@i/o-file-is-read-only-error? (condition-predicate aX2add@aX2ad8)) (set! aX2c3e@aX2ae8@i/o-file-is-read-only-error? aX2ae8@i/o-file-is-read-only-error?) (set! aX2aea@&i/o-file-is-read-only-rtd aX2add@aX2ad8) (set! aX2c3f@aX2aea@&i/o-file-is-read-only-rtd aX2aea@&i/o-file-is-read-only-rtd) (set! aX2aec@&i/o-file-is-read-only-rcd aX2ae1@aX2ad9) (set! aX2c40@aX2aec@&i/o-file-is-read-only-rcd aX2aec@&i/o-file-is-read-only-rcd) (set! aX2af2@aX2aed (make-record-type-descriptor '&i/o-file-already-exists aX2aaf@aX2aaa 'aX2af0 '#f '#f '#())) (set! aX2c41@aX2af2@aX2aed aX2af2@aX2aed) (set! aX2af4@aX2aef '#f) (set! aX2c42@aX2af4@aX2aef aX2af4@aX2aef) (set! aX2af6@aX2aee (make-record-constructor-descriptor aX2af2@aX2aed aX2ab3@aX2aab aX2af4@aX2aef)) (set! aX2c43@aX2af6@aX2aee aX2af6@aX2aee) (set! aX2af9@p? (record-predicate aX2af2@aX2aed)) (set! aX2c44@aX2af9@p? aX2af9@p?) (set! aX2afb@make-i/o-file-already-exists-error (record-constructor aX2af6@aX2aee)) (set! aX2c45@aX2afb@make-i/o-file-already-exists-error aX2afb@make-i/o-file-already-exists-error) (set! aX2afd@i/o-file-already-exists-error? (condition-predicate aX2af2@aX2aed)) (set! aX2c46@aX2afd@i/o-file-already-exists-error? aX2afd@i/o-file-already-exists-error?) (set! aX2aff@&i/o-file-already-exists-rtd aX2af2@aX2aed) (set! aX2c47@aX2aff@&i/o-file-already-exists-rtd aX2aff@&i/o-file-already-exists-rtd) (set! aX2b01@&i/o-file-already-exists-rcd aX2af6@aX2aee) (set! aX2c48@aX2b01@&i/o-file-already-exists-rcd aX2b01@&i/o-file-already-exists-rcd) (set! aX2b07@aX2b02 (make-record-type-descriptor '&i/o-file-does-not-exist aX2aaf@aX2aaa 'aX2b05 '#f '#f '#())) (set! aX2c49@aX2b07@aX2b02 aX2b07@aX2b02) (set! aX2b09@aX2b04 '#f) (set! aX2c4a@aX2b09@aX2b04 aX2b09@aX2b04) (set! aX2b0b@aX2b03 (make-record-constructor-descriptor aX2b07@aX2b02 aX2ab3@aX2aab aX2b09@aX2b04)) (set! aX2c4b@aX2b0b@aX2b03 aX2b0b@aX2b03) (set! aX2b0e@p? (record-predicate aX2b07@aX2b02)) (set! aX2c4c@aX2b0e@p? aX2b0e@p?) (set! aX2b10@make-i/o-file-does-not-exist-error (record-constructor aX2b0b@aX2b03)) (set! aX2c4d@aX2b10@make-i/o-file-does-not-exist-error aX2b10@make-i/o-file-does-not-exist-error) (set! aX2b12@i/o-file-does-not-exist-error? (condition-predicate aX2b07@aX2b02)) (set! aX2c4e@aX2b12@i/o-file-does-not-exist-error? aX2b12@i/o-file-does-not-exist-error?) (set! aX2b14@&i/o-file-does-not-exist-rtd aX2b07@aX2b02) (set! aX2c4f@aX2b14@&i/o-file-does-not-exist-rtd aX2b14@&i/o-file-does-not-exist-rtd) (set! aX2b16@&i/o-file-does-not-exist-rcd aX2b0b@aX2b03) (set! aX2c50@aX2b16@&i/o-file-does-not-exist-rcd aX2b16@&i/o-file-does-not-exist-rcd) (set! aX2b1e@aX2b19 (make-record-type-descriptor '&i/o-port aX2a53@aX2a4e 'aX2b1c '#f '#f '#((immutable port)))) (set! aX2c51@aX2b1e@aX2b19 aX2b1e@aX2b19) (set! aX2b20@aX2b1b '#f) (set! aX2c52@aX2b20@aX2b1b aX2b20@aX2b1b) (set! aX2b22@aX2b1a (make-record-constructor-descriptor aX2b1e@aX2b19 aX2a57@aX2a4f aX2b20@aX2b1b)) (set! aX2c53@aX2b22@aX2b1a aX2b22@aX2b1a) (set! aX2b25@p? (record-predicate aX2b1e@aX2b19)) (set! aX2c54@aX2b25@p? aX2b25@p?) (set! aX2b27@make-i/o-port-error (record-constructor aX2b22@aX2b1a)) (set! aX2c55@aX2b27@make-i/o-port-error aX2b27@make-i/o-port-error) (set! aX2b29@aX2b18 (record-accessor aX2b1e@aX2b19 '0)) (set! aX2c56@aX2b29@aX2b18 aX2b29@aX2b18) (set! aX2b2b@i/o-port-error? (condition-predicate aX2b1e@aX2b19)) (set! aX2c57@aX2b2b@i/o-port-error? aX2b2b@i/o-port-error?) (set! aX2b2d@i/o-error-port (condition-accessor aX2b1e@aX2b19 aX2b29@aX2b18)) (set! aX2c58@aX2b2d@i/o-error-port aX2b2d@i/o-error-port) (set! aX2b2f@&i/o-port-rtd aX2b1e@aX2b19) (set! aX2c59@aX2b2f@&i/o-port-rtd aX2b2f@&i/o-port-rtd) (set! aX2b31@&i/o-port-rcd aX2b22@aX2b1a) (set! aX2c5a@aX2b31@&i/o-port-rcd aX2b31@&i/o-port-rcd) (set! aX2b37@aX2b32 (make-record-type-descriptor '&i/o-decoding aX2b1e@aX2b19 'aX2b35 '#f '#f '#())) (set! aX2c5b@aX2b37@aX2b32 aX2b37@aX2b32) (set! aX2b39@aX2b34 '#f) (set! aX2c5c@aX2b39@aX2b34 aX2b39@aX2b34) (set! aX2b3b@aX2b33 (make-record-constructor-descriptor aX2b37@aX2b32 aX2b22@aX2b1a aX2b39@aX2b34)) (set! aX2c5d@aX2b3b@aX2b33 aX2b3b@aX2b33) (set! aX2b3e@p? (record-predicate aX2b37@aX2b32)) (set! aX2c5e@aX2b3e@p? aX2b3e@p?) (set! aX2b40@make-i/o-decoding-error (record-constructor aX2b3b@aX2b33)) (set! aX2c5f@aX2b40@make-i/o-decoding-error aX2b40@make-i/o-decoding-error) (set! aX2b42@i/o-decoding-error? (condition-predicate aX2b37@aX2b32)) (set! aX2c60@aX2b42@i/o-decoding-error? aX2b42@i/o-decoding-error?) (set! aX2b44@&i/o-decoding-rtd aX2b37@aX2b32) (set! aX2c61@aX2b44@&i/o-decoding-rtd aX2b44@&i/o-decoding-rtd) (set! aX2b46@&i/o-decoding-rcd aX2b3b@aX2b33) (set! aX2c62@aX2b46@&i/o-decoding-rcd aX2b46@&i/o-decoding-rcd) (set! aX2b4e@aX2b49 (make-record-type-descriptor '&i/o-encoding aX2b1e@aX2b19 'aX2b4c '#f '#f '#((immutable char)))) (set! aX2c63@aX2b4e@aX2b49 aX2b4e@aX2b49) (set! aX2b50@aX2b4b '#f) (set! aX2c64@aX2b50@aX2b4b aX2b50@aX2b4b) (set! aX2b52@aX2b4a (make-record-constructor-descriptor aX2b4e@aX2b49 aX2b22@aX2b1a aX2b50@aX2b4b)) (set! aX2c65@aX2b52@aX2b4a aX2b52@aX2b4a) (set! aX2b55@p? (record-predicate aX2b4e@aX2b49)) (set! aX2c66@aX2b55@p? aX2b55@p?) (set! aX2b57@make-i/o-encoding-error (record-constructor aX2b52@aX2b4a)) (set! aX2c67@aX2b57@make-i/o-encoding-error aX2b57@make-i/o-encoding-error) (set! aX2b59@aX2b48 (record-accessor aX2b4e@aX2b49 '0)) (set! aX2c68@aX2b59@aX2b48 aX2b59@aX2b48) (set! aX2b5b@i/o-encoding-error? (condition-predicate aX2b4e@aX2b49)) (set! aX2c69@aX2b5b@i/o-encoding-error? aX2b5b@i/o-encoding-error?) (set! aX2b5d@i/o-encoding-error-char (condition-accessor aX2b4e@aX2b49 aX2b59@aX2b48)) (set! aX2c6a@aX2b5d@i/o-encoding-error-char aX2b5d@i/o-encoding-error-char) (set! aX2b5f@&i/o-encoding-rtd aX2b4e@aX2b49) (set! aX2c6b@aX2b5f@&i/o-encoding-rtd aX2b5f@&i/o-encoding-rtd) (set! aX2b61@&i/o-encoding-rcd aX2b52@aX2b4a) (set! aX2c6c@aX2b61@&i/o-encoding-rcd aX2b61@&i/o-encoding-rcd) (set! aX2b67@aX2b62 (make-record-type-descriptor '&no-infinities aX29f3@aX29ee 'aX2b65 '#f '#f '#())) (set! aX2c6d@aX2b67@aX2b62 aX2b67@aX2b62) (set! aX2b69@aX2b64 '#f) (set! aX2c6e@aX2b69@aX2b64 aX2b69@aX2b64) (set! aX2b6b@aX2b63 (make-record-constructor-descriptor aX2b67@aX2b62 aX29f7@aX29ef aX2b69@aX2b64)) (set! aX2c6f@aX2b6b@aX2b63 aX2b6b@aX2b63) (set! aX2b6e@p? (record-predicate aX2b67@aX2b62)) (set! aX2c70@aX2b6e@p? aX2b6e@p?) (set! aX2b70@make-no-infinities-violation (record-constructor aX2b6b@aX2b63)) (set! aX2c71@aX2b70@make-no-infinities-violation aX2b70@make-no-infinities-violation) (set! aX2b72@no-infinities-violation? (condition-predicate aX2b67@aX2b62)) (set! aX2c72@aX2b72@no-infinities-violation? aX2b72@no-infinities-violation?) (set! aX2b74@&no-infinities-rtd aX2b67@aX2b62) (set! aX2c73@aX2b74@&no-infinities-rtd aX2b74@&no-infinities-rtd) (set! aX2b76@&no-infinities-rcd aX2b6b@aX2b63) (set! aX2c74@aX2b76@&no-infinities-rcd aX2b76@&no-infinities-rcd) (set! aX2b7c@aX2b77 (make-record-type-descriptor '&no-nans aX29f3@aX29ee 'aX2b7a '#f '#f '#())) (set! aX2c75@aX2b7c@aX2b77 aX2b7c@aX2b77) (set! aX2b7e@aX2b79 '#f) (set! aX2c76@aX2b7e@aX2b79 aX2b7e@aX2b79) (set! aX2b80@aX2b78 (make-record-constructor-descriptor aX2b7c@aX2b77 aX29f7@aX29ef aX2b7e@aX2b79)) (set! aX2c77@aX2b80@aX2b78 aX2b80@aX2b78) (set! aX2b83@p? (record-predicate aX2b7c@aX2b77)) (set! aX2c78@aX2b83@p? aX2b83@p?) (set! aX2b85@make-no-nans-violation (record-constructor aX2b80@aX2b78)) (set! aX2c79@aX2b85@make-no-nans-violation aX2b85@make-no-nans-violation) (set! aX2b87@no-nans-violation? (condition-predicate aX2b7c@aX2b77)) (set! aX2c7a@aX2b87@no-nans-violation? aX2b87@no-nans-violation?) (set! aX2b89@&no-nans-rtd aX2b7c@aX2b77) (set! aX2c7b@aX2b89@&no-nans-rtd aX2b89@&no-nans-rtd) (set! aX2b8b@&no-nans-rcd aX2b80@aX2b78) (set! aX2c7c@aX2b8b@&no-nans-rcd aX2b8b@&no-nans-rcd) (void))
(begin (begin (aX712@aX6c7@current-primitive-locations (lambda (aX3147@x) (let ((aX3149@t (assq aX3147@x '((&no-nans-rcd . aX2c7c@aX2b8b@&no-nans-rcd) (&no-nans-rtd . aX2c7b@aX2b89@&no-nans-rtd) (&no-infinities-rcd . aX2c74@aX2b76@&no-infinities-rcd) (&no-infinities-rtd . aX2c73@aX2b74@&no-infinities-rtd) (&i/o-encoding-rcd . aX2c6c@aX2b61@&i/o-encoding-rcd) (&i/o-encoding-rtd . aX2c6b@aX2b5f@&i/o-encoding-rtd) (&i/o-decoding-rcd . aX2c62@aX2b46@&i/o-decoding-rcd) (&i/o-decoding-rtd . aX2c61@aX2b44@&i/o-decoding-rtd) (&i/o-port-rcd . aX2c5a@aX2b31@&i/o-port-rcd) (&i/o-port-rtd . aX2c59@aX2b2f@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . aX2c50@aX2b16@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . aX2c4f@aX2b14@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . aX2c48@aX2b01@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . aX2c47@aX2aff@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . aX2c40@aX2aec@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . aX2c3f@aX2aea@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . aX2c38@aX2ad7@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . aX2c37@aX2ad5@&i/o-file-protection-rtd) (&i/o-filename-rcd . aX2c30@aX2ac2@&i/o-filename-rcd) (&i/o-filename-rtd . aX2c2f@aX2ac0@&i/o-filename-rtd) (&i/o-invalid-position-rcd . aX2c26@aX2aa7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . aX2c25@aX2aa5@&i/o-invalid-position-rtd) (&i/o-write-rcd . aX2c1c@aX2a8c@&i/o-write-rcd) (&i/o-write-rtd . aX2c1b@aX2a8a@&i/o-write-rtd) (&i/o-read-rcd . aX2c14@aX2a77@&i/o-read-rcd) (&i/o-read-rtd . aX2c13@aX2a75@&i/o-read-rtd) (&i/o-rcd . aX2c0c@aX2a62@&i/o-rcd) (&i/o-rtd . aX2c0b@aX2a60@&i/o-rtd) (&undefined-rcd . aX2c04@aX2a4d@&undefined-rcd) (&undefined-rtd . aX2c03@aX2a4b@&undefined-rtd) (&syntax-rcd . aX2bfc@aX2a38@&syntax-rcd) (&syntax-rtd . aX2bfb@aX2a36@&syntax-rtd) (&lexical-rcd . aX2bf0@aX2a17@&lexical-rcd) (&lexical-rtd . aX2bef@aX2a15@&lexical-rtd) (&implementation-restriction-rcd . aX2be8@aX2a02@&implementation-restriction-rcd) (&implementation-restriction-rtd . aX2be7@aX2a00@&implementation-restriction-rtd) (&non-continuable-rcd . aX2be0@aX29ed@&non-continuable-rcd) (&non-continuable-rtd . aX2bdf@aX29eb@&non-continuable-rtd) (&who-rcd . aX2bd8@aX29d8@&who-rcd) (&who-rtd . aX2bd7@aX29d6@&who-rtd) (&irritants-rcd . aX2bce@aX29bd@&irritants-rcd) (&irritants-rtd . aX2bcd@aX29bb@&irritants-rtd) (&assertion-rcd . aX2bc4@aX29a2@&assertion-rcd) (&assertion-rtd . aX2bc3@aX29a0@&assertion-rtd) (&violation-rcd . aX2bbc@aX298d@&violation-rcd) (&violation-rtd . aX2bbb@aX298b@&violation-rtd) (&error-rcd . aX2bb4@aX2978@&error-rcd) (&error-rtd . aX2bb3@aX2976@&error-rtd) (&serious-rcd . aX2bac@aX2963@&serious-rcd) (&serious-rtd . aX2bab@aX2961@&serious-rtd) (&warning-rcd . aX2ba4@aX294e@&warning-rcd) (&warning-rtd . aX2ba3@aX294c@&warning-rtd) (&message-rcd . aX2b9c@aX2939@&message-rcd) (&message-rtd . aX2b9b@aX2937@&message-rtd) (&condition-rcd . aX2b92@aX28da@&condition-rcd) (&condition-rtd . aX2b91@aX28d8@&condition-rtd) (syntax-error . aX28b4@aXe58@syntax-error) (syntax-dispatch . aX2852@aXd7c@syntax-dispatch) (load . aX2df1@aX2c9c@load) (interaction-environment . aX28bd@aXe6a@interaction-environment) (library-path . aX979@aX7b5@library-path) (mosh-cache-dir . aX6c0@aX59f@mosh-cache-dir) (make-parameter . aX6bf@aX59d@make-parameter) (make-variable-transformer . aX280f@aXba7@make-variable-transformer) (identifier? . aX28b7@aXe5e@identifier?) (generate-temporaries . aX28ad@aXe4a@generate-temporaries) (free-identifier=? . aX28ae@aXe4c@free-identifier=?) (syntax->datum . aX28b9@aXe62@syntax->datum) (datum->syntax . aX28b8@aXe60@datum->syntax) (bound-identifier=? . aX28af@aXe4e@bound-identifier=?) (make-i/o-write-error . aX2c19@aX2a86@make-i/o-write-error) (make-i/o-read-error . aX2c11@aX2a71@make-i/o-read-error) (make-i/o-port-error . aX2c55@aX2b27@make-i/o-port-error) (make-i/o-invalid-position-error . aX2c21@aX2a9d@make-i/o-invalid-position-error) (make-i/o-filename-error . aX2c2b@aX2ab8@make-i/o-filename-error) (make-i/o-file-protection-error . aX2c35@aX2ad1@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . aX2c3d@aX2ae6@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . aX2c4d@aX2b10@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . aX2c45@aX2afb@make-i/o-file-already-exists-error) (make-i/o-error . aX2c09@aX2a5c@make-i/o-error) (make-i/o-encoding-error . aX2c67@aX2b57@make-i/o-encoding-error) (make-i/o-decoding-error . aX2c5f@aX2b40@make-i/o-decoding-error) (i/o-write-error? . aX2c1a@aX2a88@i/o-write-error?) (i/o-read-error? . aX2c12@aX2a73@i/o-read-error?) (i/o-port-error? . aX2c57@aX2b2b@i/o-port-error?) (i/o-invalid-position-error? . aX2c23@aX2aa1@i/o-invalid-position-error?) (i/o-filename-error? . aX2c2d@aX2abc@i/o-filename-error?) (i/o-file-protection-error? . aX2c36@aX2ad3@i/o-file-protection-error?) (i/o-file-is-read-only-error? . aX2c3e@aX2ae8@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . aX2c4e@aX2b12@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . aX2c46@aX2afd@i/o-file-already-exists-error?) (i/o-error? . aX2c0a@aX2a5e@i/o-error?) (i/o-error-position . aX2c24@aX2aa3@i/o-error-position) (i/o-error-port . aX2c58@aX2b2d@i/o-error-port) (i/o-error-filename . aX2c2e@aX2abe@i/o-error-filename) (i/o-encoding-error? . aX2c69@aX2b5b@i/o-encoding-error?) (i/o-encoding-error-char . aX2c6a@aX2b5d@i/o-encoding-error-char) (i/o-decoding-error? . aX2c60@aX2b42@i/o-decoding-error?) (scheme-report-environment . aX28a4@aXe38@scheme-report-environment) (null-environment . aX28a3@aXe36@null-environment) (command-line . aX2dee@aX2c96@command-line) (eval . aX28a6@aXe3c@eval) (environment . aX28a2@aXe34@environment) (who-condition? . aX2bd5@aX29d2@who-condition?) (warning? . aX2ba2@aX294a@warning?) (violation? . aX2bba@aX2989@violation?) (undefined-violation? . aX2c02@aX2a49@undefined-violation?) (syntax-violation? . aX2bf8@aX2a30@syntax-violation?) (syntax-violation-subform . aX2bfa@aX2a34@syntax-violation-subform) (syntax-violation-form . aX2bf9@aX2a32@syntax-violation-form) (syntax-violation . aX28b6@aXe5c@syntax-violation) (serious-condition? . aX2baa@aX295f@serious-condition?) (non-continuable-violation? . aX2bde@aX29e9@non-continuable-violation?) (message-condition? . aX2b99@aX2933@message-condition?) (make-who-condition . aX2bd3@aX29ce@make-who-condition) (make-warning . aX2ba1@aX2948@make-warning) (make-violation . aX2bb9@aX2987@make-violation) (make-undefined-violation . aX2c01@aX2a47@make-undefined-violation) (make-syntax-violation . aX2bf5@aX2a2a@make-syntax-violation) (make-serious-condition . aX2ba9@aX295d@make-serious-condition) (make-non-continuable-violation . aX2bdd@aX29e7@make-non-continuable-violation) (make-message-condition . aX2b97@aX292f@make-message-condition) (make-lexical-violation . aX2bed@aX2a11@make-lexical-violation) (make-irritants-condition . aX2bc9@aX29b3@make-irritants-condition) (make-implementation-restriction-violation . aX2be5@aX29fc@make-implementation-restriction-violation) (make-error . aX2bb1@aX2972@make-error) (make-assertion-violation . aX2bc1@aX299c@make-assertion-violation) (lexical-violation? . aX2bee@aX2a13@lexical-violation?) (irritants-condition? . aX2bcb@aX29b7@irritants-condition?) (implementation-restriction-violation? . aX2be6@aX29fe@implementation-restriction-violation?) (error? . aX2bb2@aX2974@error?) (condition-who . aX2bd6@aX29d4@condition-who) (condition-message . aX2b9a@aX2935@condition-message) (condition-irritants . aX2bcc@aX29b9@condition-irritants) (assertion-violation? . aX2bc2@aX299e@assertion-violation?) (no-nans-violation? . aX2c7a@aX2b87@no-nans-violation?) (no-infinities-violation? . aX2c72@aX2b72@no-infinities-violation?) (make-no-nans-violation . aX2c79@aX2b85@make-no-nans-violation) (make-no-infinities-violation . aX2c71@aX2b70@make-no-infinities-violation) (assertion-error . aX28b3@aXe56@assertion-error))))) (if aX3149@t (cdr aX3149@t) '#f)))) (aX989@aX7d5@install-library 'aX3124 '(mosh interaction) '() '() '() '() '((regexp? . aX311c) (alist->eq-hash-table . aX3118) (format . aX3115) (string-split . aX310a) (call-process . aX3104) (set-current-directory! . aX3100) (expand-path . aX30ff) (current-directory . aX30fe) (%spawn . aX30fd) (%waitpid . aX30fc) (simple-struct-name . aX30fb) (simple-struct-set! . aX30fa) (simple-struct-ref . aX30f9) (make-simple-struct . aX30f8) (simple-struct? . aX30f7) (pointer-ref-c-int64 . aX30f6) (pointer-ref-c-int32 . aX30f5) (pointer-ref-c-int16 . aX30f4) (pointer-ref-c-int8 . aX30f3) (pointer-ref-c-uint64 . aX30f2) (pointer-ref-c-uint32 . aX30f1) (pointer-ref-c-uint16 . aX30f0) (pointer-ref-c-uint8 . aX30ef) (pointer-set-c-uint64! . aX30ee) (pointer-set-c-uint32! . aX30ed) (pointer-set-c-uint16! . aX30ec) (pointer-set-c-uint8! . aX30eb) (pointer-set-c-int64! . aX30ea) (pointer-set-c-int32! . aX30e9) (pointer-set-c-int16! . aX30e8) (pointer-set-c-int8! . aX30e7) (pointer-set-c-pointer! . aX30e6) (pointer-set-c-double! . aX30e5) (pointer-set-c-float! . aX30e4) (pointer-set-c-long-long! . aX30e3) (pointer-set-c-long! . aX30e2) (pointer-set-c-int! . aX30e1) (pointer-set-c-short! . aX30e0) (pointer-set-c-char! . aX30df) (pointer-ref-c-pointer . aX30de) (pointer-ref-c-double . aX30dd) (pointer-ref-c-float . aX30dc) (pointer-ref-c-unsigned-long-long . aX30db) (pointer-ref-c-signed-long-long . aX30da) (pointer-ref-c-unsigned-long . aX30d9) (pointer-ref-c-signed-long . aX30d8) (pointer-ref-c-unsigned-int . aX30d7) (pointer-ref-c-signed-int . aX30d6) (pointer-ref-c-unsigned-short . aX30d5) (pointer-ref-c-signed-short . aX30d4) (pointer-ref-c-unsigned-char . aX30d3) (pointer-ref-c-signed-char . aX30d2) (pointer->integer . aX30d1) (integer->pointer . aX30d0) (pointer? . aX30cf) (shared-errno . aX30ce) (%ffi-supported? . aX30c9) (%ffi-pointer->string . aX30c8) (%ffi-call . aX30c7) (%ffi-lookup . aX30c6) (%ffi-open . aX30c5) (null-terminated-utf8->string . aX30c4) (null-terminated-bytevector->string . aX30c3) (%fork . aX30c2) (%pipe . aX30c1) (p . aX30c0) (whereis . aX30a4) (register . aX30a3) (vm-join! . aX30a2) (vm-set-value! . aX30a1) (vm? . aX30a0) (main-vm? . aX309f) (vm-eval . aX309e) (vm-self . aX309d) (vm-start! . aX309c) (make-vm . aX309b) (mutex-try-lock! . aX309a) (mutex-unlock! . aX3099) (mutex-lock! . aX3098) (mutex? . aX3097) (make-mutex . aX3096) (condition-variable-notify-all! . aX3095) (condition-variable-notify! . aX3094) (condition-variable-wait! . aX3093) (make-condition-variable . aX3092) (string-upcase . aX307a) (string-titlecase . aX3079) (string-normalize-nfkd . aX3078) (string-normalize-nfkc . aX3077) (string-normalize-nfd . aX3076) (string-normalize-nfc . aX3075) (string-foldcase . aX3074) (string-downcase . aX3073) (string-ci>? . aX3072) (string-ci>=? . aX3071) (string-ci=? . aX3070) (string-ci<? . aX306f) (string-ci<=? . aX306e) (char-whitespace? . aX306d) (char-upper-case? . aX306c) (char-title-case? . aX306b) (char-numeric? . aX306a) (char-lower-case? . aX3069) (char-general-category . aX3068) (char-upcase . aX3067) (char-titlecase . aX3066) (char-foldcase . aX3065) (char-downcase . aX3064) (char-ci>? . aX3063) (char-ci>=? . aX3062) (char-ci=? . aX3061) (char-ci<? . aX3060) (char-ci<=? . aX305f) (char-alphabetic? . aX305e) (make-variable-transformer . aXba6) (identifier? . aXe5d) (generate-temporaries . aXe49) (free-identifier=? . aXe4b) (syntax->datum . aXe61) (datum->syntax . aXe5f) (bound-identifier=? . aXe4d) (record-type-descriptor? . aX305d) (record-predicate . aX305c) (record-mutator . aX305b) (record-constructor . aX305a) (record-accessor . aX3059) (make-record-type-descriptor . aX3058) (make-record-constructor-descriptor . aX3057) (record? . aX3056) (record-type-uid . aX3055) (record-type-sealed? . aX3054) (record-type-parent . aX3053) (record-type-opaque? . aX3052) (record-type-name . aX3051) (record-type-generative? . aX3050) (record-type-field-names . aX304f) (record-rtd . aX304e) (record-field-mutable? . aX304d) (delete-file . aX304c) (file-exists? . aX304b) (vector-sort! . aX304a) (vector-sort . aX3049) (list-sort . aX3048) (symbol-hash . aX3047) (string-ci-hash . aX3046) (string-hash . aX3045) (equal-hash . aX3044) (hashtable-equivalence-function . aX3043) (make-hashtable . aX3042) (hashtable-hash-function . aX3041) (make-eqv-hashtable . aX3040) (make-eq-hashtable . aX303f) (hashtable? . aX303e) (hashtable-update! . aX303d) (hashtable-size . aX303c) (hashtable-set! . aX303b) (hashtable-ref . aX303a) (hashtable-mutable? . aX3039) (hashtable-keys . aX3038) (hashtable-entries . aX3037) (hashtable-delete! . aX3036) (hashtable-copy . aX3035) (hashtable-contains? . aX3034) (hashtable-clear! . aX3033) (call-with-output-file . aX3032) (call-with-input-file . aX3031) (write-char . aX3030) (write . aX302f) (with-output-to-file . aX302e) (with-input-from-file . aX302d) (read-char . aX302c) (read . aX302b) (peek-char . aX302a) (open-output-file . aX3029) (open-input-file . aX3028) (newline . aX3027) (display . aX3026) (close-output-port . aX3025) (close-input-port . aX3024) (eof-object? . aX3023) (eof-object . aX3022) (current-error-port . aX3021) (current-output-port . aX3020) (current-input-port . aX301f) (output-port? . aX301e) (input-port? . aX301d) (utf-8-codec . aX301c) (utf-16-codec . aX301b) (transcoder-error-handling-mode . aX301a) (transcoder-eol-style . aX3019) (transcoder-codec . aX3018) (transcoded-port . aX3017) (textual-port? . aX3016) (string->bytevector . aX3015) (standard-output-port . aX3014) (standard-input-port . aX3013) (standard-error-port . aX3012) (set-port-position! . aX3011) (put-u8 . aX3010) (put-string . aX300f) (put-datum . aX300e) (put-char . aX300d) (put-bytevector . aX300c) (port? . aX300b) (port-transcoder . aX300a) (port-position . aX3009) (port-has-set-port-position!? . aX3008) (port-has-port-position? . aX3007) (port-eof? . aX3006) (output-port-buffer-mode . aX3005) (open-string-output-port . aX3004) (open-string-input-port . aX3003) (open-file-output-port . aX3002) (open-file-input/output-port . aX3001) (open-file-input-port . aX3000) (open-bytevector-output-port . aX2fff) (open-bytevector-input-port . aX2ffe) (native-transcoder . aX2ffd) (native-eol-style . aX2ffc) (make-transcoder . aX2ffb) (latin-1-codec . aX2ffa) (make-i/o-write-error . aX2a85) (make-i/o-read-error . aX2a70) (make-i/o-port-error . aX2b26) (make-i/o-invalid-position-error . aX2a9c) (make-i/o-filename-error . aX2ab7) (make-i/o-file-protection-error . aX2ad0) (make-i/o-file-is-read-only-error . aX2ae5) (make-i/o-file-does-not-exist-error . aX2b0f) (make-i/o-file-already-exists-error . aX2afa) (make-i/o-error . aX2a5b) (make-i/o-encoding-error . aX2b56) (make-i/o-decoding-error . aX2b3f) (make-custom-textual-output-port . aX2ff9) (make-custom-textual-input/output-port . aX2ff8) (make-custom-textual-input-port . aX2ff7) (make-custom-binary-output-port . aX2ff6) (make-custom-binary-input/output-port . aX2ff5) (make-custom-binary-input-port . aX2ff4) (make-bytevector . aX2ff3) (lookahead-u8 . aX2ff2) (lookahead-char . aX2ff1) (i/o-write-error? . aX2a87) (i/o-read-error? . aX2a72) (i/o-port-error? . aX2b2a) (i/o-invalid-position-error? . aX2aa0) (i/o-filename-error? . aX2abb) (i/o-file-protection-error? . aX2ad2) (i/o-file-is-read-only-error? . aX2ae7) (i/o-file-does-not-exist-error? . aX2b11) (i/o-file-already-exists-error? . aX2afc) (i/o-error? . aX2a5d) (i/o-error-position . aX2aa2) (i/o-error-port . aX2b2c) (i/o-error-filename . aX2abd) (i/o-encoding-error? . aX2b5a) (i/o-encoding-error-char . aX2b5c) (i/o-decoding-error? . aX2b41) (get-u8 . aX2ff0) (get-string-n! . aX2fef) (get-string-n . aX2fee) (get-string-all . aX2fed) (get-line . aX2fec) (get-datum . aX2feb) (get-char . aX2fea) (get-bytevector-some . aX2fe9) (get-bytevector-n! . aX2fe8) (get-bytevector-n . aX2fe7) (get-bytevector-all . aX2fe6) (flush-output-port . aX2fe5) (close-port . aX2fe4) (exit . aX2fdc) (command-line . aX2c95) (string-fill! . aX2fdb) (string-set! . aX2fda) (set-cdr! . aX2fd9) (set-car! . aX2fd8) (remove . aX2fd7) (remv . aX2fd6) (remp . aX2fd5) (remq . aX2fd4) (partition . aX2fd3) (memv . aX2fd2) (memq . aX2fd1) (memp . aX2fd0) (member . aX2fcf) (exists . aX2fce) (for-all . aX2fcd) (fold-right . aX2fcc) (fold-left . aX2fcb) (find . aX2fca) (filter . aX2fc9) (cons* . aX2fc8) (assv . aX2fc7) (assq . aX2fc6) (assp . aX2fc5) (assoc . aX2fc4) (call-with-string-output-port . aX2fc3) (call-with-port . aX2fc2) (call-with-bytevector-output-port . aX2fc1) (bytevector->string . aX2fc0) (buffer-mode? . aX2fbf) (binary-port? . aX2fbe) (with-exception-handler . aX2fbd) (raise-continuable . aX2fbc) (raise . aX2fbb) (eval . aXe3b) (environment . aXe33) (make-enumeration . aX2fba) (enum-set=? . aX2fb9) (enum-set-universe . aX2fb8) (enum-set-union . aX2fb7) (enum-set-subset? . aX2fb6) (enum-set-projection . aX2fb5) (enum-set-member? . aX2fb4) (enum-set-intersection . aX2fb3) (enum-set-indexer . aX2fb2) (enum-set-difference . aX2fb1) (enum-set-constructor . aX2fb0) (enum-set-complement . aX2faf) (enum-set->list . aX2fae) (who-condition? . aX29d1) (warning? . aX2949) (violation? . aX2988) (undefined-violation? . aX2a48) (syntax-violation? . aX2a2f) (syntax-violation-subform . aX2a33) (syntax-violation-form . aX2a31) (syntax-violation . aXe5b) (simple-conditions . aX2fad) (serious-condition? . aX295e) (non-continuable-violation? . aX29e8) (message-condition? . aX2932) (make-who-condition . aX29cd) (make-warning . aX2947) (make-violation . aX2986) (make-undefined-violation . aX2a46) (make-syntax-violation . aX2a29) (make-serious-condition . aX295c) (make-non-continuable-violation . aX29e6) (make-message-condition . aX292e) (make-lexical-violation . aX2a10) (make-irritants-condition . aX29b2) (make-implementation-restriction-violation . aX29fb) (make-error . aX2971) (make-assertion-violation . aX299b) (lexical-violation? . aX2a12) (irritants-condition? . aX29b6) (implementation-restriction-violation? . aX29fd) (error? . aX2973) (condition-who . aX29d3) (condition-predicate . aX2fac) (condition-message . aX2934) (condition-irritants . aX29b8) (condition-accessor . aX2fab) (condition . aX2faa) (assertion-violation? . aX299d) (condition? . aX2fa9) (utf32->string . aX2fa8) (utf16->string . aX2fa7) (utf8->string . aX2fa6) (uint-list->bytevector . aX2fa5) (u8-list->bytevector . aX2fa4) (string->utf8 . aX2fa3) (string->utf32 . aX2fa2) (string->utf16 . aX2fa1) (sint-list->bytevector . aX2fa0) (native-endianness . aX2f9f) (bytevector? . aX2f9e) (bytevector=? . aX2f9d) (bytevector-uint-set! . aX2f9c) (bytevector-uint-ref . aX2f9b) (bytevector-u8-set! . aX2f9a) (bytevector-u8-ref . aX2f99) (bytevector-u64-set! . aX2f98) (bytevector-u64-ref . aX2f97) (bytevector-u64-native-set! . aX2f96) (bytevector-u64-native-ref . aX2f95) (bytevector-u32-set! . aX2f94) (bytevector-u32-ref . aX2f93) (bytevector-u32-native-set! . aX2f92) (bytevector-u32-native-ref . aX2f91) (bytevector-u16-set! . aX2f90) (bytevector-u16-ref . aX2f8f) (bytevector-u16-native-set! . aX2f8e) (bytevector-u16-native-ref . aX2f8d) (bytevector-sint-set! . aX2f8c) (bytevector-sint-ref . aX2f8b) (bytevector-s8-set! . aX2f8a) (bytevector-s8-ref . aX2f89) (bytevector-s64-set! . aX2f88) (bytevector-s64-ref . aX2f87) (bytevector-s64-native-set! . aX2f86) (bytevector-s64-native-ref . aX2f85) (bytevector-s32-set! . aX2f84) (bytevector-s32-ref . aX2f83) (bytevector-s32-native-set! . aX2f82) (bytevector-s32-native-ref . aX2f81) (bytevector-s16-set! . aX2f80) (bytevector-s16-ref . aX2f7f) (bytevector-s16-native-set! . aX2f7e) (bytevector-s16-native-ref . aX2f7d) (bytevector-length . aX2f7c) (bytevector-ieee-single-ref . aX2f7b) (bytevector-ieee-single-set! . aX2f7a) (bytevector-ieee-single-native-set! . aX2f79) (bytevector-ieee-single-native-ref . aX2f78) (bytevector-ieee-double-set! . aX2f77) (bytevector-ieee-double-ref . aX2f76) (bytevector-ieee-double-native-set! . aX2f75) (bytevector-ieee-double-native-ref . aX2f74) (bytevector-fill! . aX2f73) (bytevector-copy! . aX2f72) (bytevector-copy . aX2f71) (bytevector->uint-list . aX2f70) (bytevector->u8-list . aX2f6f) (bytevector->sint-list . aX2f6e) (no-nans-violation? . aX2b86) (no-infinities-violation? . aX2b71) (make-no-nans-violation . aX2b84) (make-no-infinities-violation . aX2b6f) (real->flonum . aX2f6d) (flzero? . aX2f6c) (fltruncate . aX2f6b) (fltan . aX2f6a) (flsqrt . aX2f69) (flsin . aX2f68) (flround . aX2f67) (flpositive? . aX2f66) (flonum? . aX2f65) (flodd? . aX2f64) (flnumerator . aX2f63) (flnegative? . aX2f62) (flnan? . aX2f61) (flmod0 . aX2f60) (flmod . aX2f5f) (flmin . aX2f5e) (flmax . aX2f5d) (fllog . aX2f5c) (flinteger? . aX2f5b) (flinfinite? . aX2f5a) (flfloor . aX2f59) (flfinite? . aX2f58) (flexpt . aX2f57) (flexp . aX2f56) (fleven? . aX2f55) (fldiv0-and-mod0 . aX2f54) (fldiv0 . aX2f53) (fldiv-and-mod . aX2f52) (fldiv . aX2f51) (fldenominator . aX2f50) (flcos . aX2f4f) (flceiling . aX2f4e) (flatan . aX2f4d) (flasin . aX2f4c) (flacos . aX2f4b) (flabs . aX2f4a) (fl>? . aX2f49) (fl>=? . aX2f48) (fl=? . aX2f47) (fl<? . aX2f46) (fl<=? . aX2f45) (fl/ . aX2f44) (fl- . aX2f43) (fl+ . aX2f42) (fl* . aX2f41) (fixnum->flonum . aX2f40) (fxzero? . aX2f3f) (fxxor . aX2f3e) (fxrotate-bit-field . aX2f3d) (fxreverse-bit-field . aX2f3c) (fxpositive? . aX2f3b) (fxodd? . aX2f3a) (fxnot . aX2f39) (fxnegative? . aX2f38) (fxmod0 . aX2f37) (fxmod . aX2f36) (fxmin . aX2f35) (fxmax . aX2f34) (fxlength . aX2f33) (fxior . aX2f32) (fxif . aX2f31) (fxfirst-bit-set . aX2f30) (fxeven? . aX2f2f) (fxdiv0-and-mod0 . aX2f2e) (fxdiv0 . aX2f2d) (fxdiv-and-mod . aX2f2c) (fxdiv . aX2f2b) (fxcopy-bit-field . aX2f2a) (fxcopy-bit . aX2f29) (fxbit-set? . aX2f28) (fxbit-field . aX2f27) (fxbit-count . aX2f26) (fxarithmetic-shift-right . aX2f25) (fxarithmetic-shift-left . aX2f24) (fxarithmetic-shift . aX2f23) (fxand . aX2f22) (fx>? . aX2f21) (fx>=? . aX2f20) (fx=? . aX2f1f) (fx<? . aX2f1e) (fx<=? . aX2f1d) (fx-/carry . aX2f1c) (fx- . aX2f1b) (fx+/carry . aX2f1a) (fx+ . aX2f19) (fx*/carry . aX2f18) (fx* . aX2f17) (greatest-fixnum . aX2f16) (least-fixnum . aX2f15) (fixnum-width . aX2f14) (fixnum? . aX2f13) (bitwise-rotate-bit-field . aX2f12) (bitwise-reverse-bit-field . aX2f11) (bitwise-length . aX2f10) (bitwise-if . aX2f0f) (bitwise-first-bit-set . aX2f0e) (bitwise-copy-bit-field . aX2f0d) (bitwise-copy-bit . aX2f0c) (bitwise-bit-set? . aX2f0b) (bitwise-bit-field . aX2f0a) (bitwise-bit-count . aX2f09) (bitwise-xor . aX2f08) (bitwise-ior . aX2f07) (bitwise-and . aX2f06) (bitwise-not . aX2f05) (bitwise-arithmetic-shift-right . aX2f04) (bitwise-arithmetic-shift-left . aX2f03) (bitwise-arithmetic-shift . aX2f02) (zero? . aX2f01) (vector? . aX2f00) (vector-set! . aX2eff) (vector-ref . aX2efe) (vector-map . aX2efd) (vector-length . aX2efc) (vector-for-each . aX2efb) (vector-fill! . aX2efa) (vector->list . aX2ef9) (vector . aX2ef8) (values . aX2ef7) (truncate . aX2ef6) (tan . aX2ef5) (symbol? . aX2ef4) (symbol=? . aX2ef3) (symbol->string . aX2ef2) (substring . aX2ef1) (string? . aX2ef0) (string>? . aX2eef) (string>=? . aX2eee) (string=? . aX2eed) (string<? . aX2eec) (string<=? . aX2eeb) (string-ref . aX2eea) (string-length . aX2ee9) (string-for-each . aX2ee8) (string-copy . aX2ee7) (string-append . aX2ee6) (string->symbol . aX2ee5) (string->number . aX2ee4) (string->list . aX2ee3) (string . aX2ee2) (sqrt . aX2ee1) (sin . aX2ee0) (round . aX2edf) (reverse . aX2ede) (real? . aX2edd) (real-valued? . aX2edc) (real-part . aX2edb) (rationalize . aX2eda) (rational? . aX2ed9) (rational-valued? . aX2ed8) (procedure? . aX2ed7) (positive? . aX2ed6) (pair? . aX2ed5) (odd? . aX2ed4) (numerator . aX2ed3) (number? . aX2ed2) (number->string . aX2ed1) (null? . aX2ed0) (not . aX2ecf) (negative? . aX2ece) (nan? . aX2ecd) (min . aX2ecc) (max . aX2ecb) (map . aX2eca) (make-vector . aX2ec9) (make-string . aX2ec8) (make-rectangular . aX2ec7) (make-polar . aX2ec6) (magnitude . aX2ec5) (log . aX2ec4) (list? . aX2ec3) (list-tail . aX2ec2) (list-ref . aX2ec1) (list->vector . aX2ec0) (list->string . aX2ebf) (list . aX2ebe) (length . aX2ebd) (lcm . aX2ebc) (integer? . aX2ebb) (integer-valued? . aX2eba) (integer->char . aX2eb9) (infinite? . aX2eb8) (inexact? . aX2eb7) (inexact . aX2eb6) (imag-part . aX2eb5) (gcd . aX2eb4) (for-each . aX2eb3) (floor . aX2eb2) (finite? . aX2eb1) (expt . aX2eb0) (exp . aX2eaf) (exact? . aX2eae) (exact-integer-sqrt . aX2ead) (exact . aX2eac) (even? . aX2eab) (error . aX2eaa) (eqv? . aX2ea9) (equal? . aX2ea8) (eq? . aX2ea7) (dynamic-wind . aX2ea6) (div0-and-mod0 . aX2ea5) (mod0 . aX2ea4) (div0 . aX2ea3) (div-and-mod . aX2ea2) (mod . aX2ea1) (div . aX2ea0) (denominator . aX2e9f) (cos . aX2e9e) (cons . aX2e9d) (complex? . aX2e9c) (char? . aX2e9b) (char>? . aX2e9a) (char>=? . aX2e99) (char=? . aX2e98) (char<? . aX2e97) (char<=? . aX2e96) (char->integer . aX2e95) (ceiling . aX2e94) (call-with-values . aX2e93) (call/cc . aX2e92) (call-with-current-continuation . aX2e91) (cddddr . aX2e90) (cdddar . aX2e8f) (cddadr . aX2e8e) (cddaar . aX2e8d) (cdaddr . aX2e8c) (cdadar . aX2e8b) (cdaadr . aX2e8a) (cdaaar . aX2e89) (cadddr . aX2e88) (caddar . aX2e87) (cadadr . aX2e86) (cadaar . aX2e85) (caaddr . aX2e84) (caadar . aX2e83) (caaadr . aX2e82) (caaaar . aX2e81) (cdddr . aX2e80) (cddar . aX2e7f) (cdadr . aX2e7e) (cdaar . aX2e7d) (caddr . aX2e7c) (cadar . aX2e7b) (caadr . aX2e7a) (caaar . aX2e79) (cddr . aX2e78) (cdar . aX2e77) (cadr . aX2e76) (caar . aX2e75) (cdr . aX2e74) (car . aX2e73) (boolean? . aX2e72) (boolean=? . aX2e71) (atan . aX2e70) (assertion-violation . aX2e6f) (asin . aX2e6e) (apply . aX2e6d) (append . aX2e6c) (angle . aX2e6b) (acos . aX2e6a) (abs . aX2e69) (/ . aX2e68) (* . aX2e67) (- . aX2e66) (+ . aX2e65) (>= . aX2e64) (> . aX2e63) (= . aX2e62) (<= . aX2e61) (< . aX2e60) (library . aX2e5f) (&no-nans . aX2e5e) (&no-infinities . aX2e5d) (&i/o-encoding . aX2e5c) (&i/o-decoding . aX2e5b) (&i/o-port . aX2e5a) (&i/o-file-does-not-exist . aX2e59) (&i/o-file-already-exists . aX2e58) (&i/o-file-is-read-only . aX2e57) (&i/o-file-protection . aX2e56) (&i/o-filename . aX2e55) (&i/o-invalid-position . aX2e54) (&i/o-write . aX2e53) (&i/o-read . aX2e52) (&i/o . aX2e51) (&undefined . aX2e50) (&syntax . aX2e4f) (&lexical . aX2e4e) (&implementation-restriction . aX2e4d) (&non-continuable . aX2e4c) (&who . aX2e4b) (&irritants . aX2e4a) (&assertion . aX2e49) (&violation . aX2e48) (&error . aX2e47) (&serious . aX2e46) (&warning . aX2e45) (&message . aX2e44) (&condition . aX2e43) (define-condition-type . aX2e42) (define-enumeration . aX2e41) (define-record-type . aX2e40) (parent-rtd . aX2e3f) (nongenerative . aX2e3e) (opaque . aX2e3d) (sealed . aX2e3c) (protocol . aX2e3b) (parent . aX2e3a) (immutable . aX2e39) (mutable . aX2e38) (fields . aX2e37) (error-handling-mode . aX2e36) (file-options . aX2e35) (buffer-mode . aX2e34) (eol-style . aX2e33) (guard . aX2e32) (unsyntax-splicing . aX2e2f) (unsyntax . aX2e2e) (unquote-splicing . aX2e2d) (unquote . aX2e2c) (_ . aX2e2b) (else . aX2e2a) (=> . aX2e29) (... . aX2e28) (assert . aX2e27) (endianness . aX2e26) (time . aX2e24) (do . aX2e23) (cond . aX2e22) (let* . aX2e21) (let*-values . aX2e20) (let-values . aX2e1f) (identifier-syntax . aX2e1e) (with-syntax . aX2e1d) (quasisyntax . aX2e1c) (quasiquote . aX2e1b) (syntax-rules . aX2e1a) (include . aX2e19) (record-constructor-descriptor . aX2e17) (record-type-descriptor . aX2e16) (case . aX2e15) (unless . aX2e13) (when . aX2e12) (or . aX2e11) (and . aX2e10) (if . aX2e0f) (let . aX2e0e) (letrec* . aX2e0d) (letrec . aX2e0c) (case-lambda . aX2e0a) (lambda . aX2e09) (syntax . aX2e08) (syntax-case . aX2e07) (quote . aX2e06) (letrec-syntax . aX2e04) (let-syntax . aX2e03) (set! . aX2e02) (import . aX2e01) (begin . aX2e00) (define-syntax . aX2dfe) (define . aX2dfd)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3125 '(psyntax null-environment-5) '() '() '() '() '((make-promise . aX2fdd) (unquote-splicing . aX2e2d) (unquote . aX2e2c) (_ . aX2e2b) (else . aX2e2a) (=> . aX2e29) (... . aX2e28) (delay . aX2e25) (do . aX2e23) (cond . aX2e22) (let* . aX2e21) (quasiquote . aX2e1b) (syntax-rules . aX2e1a) (case . aX2e15) (or . aX2e11) (and . aX2e10) (if . aX2e0f) (let . aX2e0e) (letrec . aX2e0c) (lambda . aX2e09) (quote . aX2e06) (letrec-syntax . aX2e04) (let-syntax . aX2e03) (set! . aX2e02) (begin . aX2e00) (define-syntax . aX2dfe) (define . aX2dfd)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3126 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . aX3072) (string-ci>=? . aX3071) (string-ci=? . aX3070) (string-ci<? . aX306f) (string-ci<=? . aX306e) (char-whitespace? . aX306d) (char-upper-case? . aX306c) (char-numeric? . aX306a) (char-lower-case? . aX3069) (char-upcase . aX3067) (char-downcase . aX3064) (char-ci>? . aX3063) (char-ci>=? . aX3062) (char-ci=? . aX3061) (char-ci<? . aX3060) (char-ci<=? . aX305f) (char-alphabetic? . aX305e) (call-with-output-file . aX3032) (call-with-input-file . aX3031) (write-char . aX3030) (write . aX302f) (with-output-to-file . aX302e) (with-input-from-file . aX302d) (read-char . aX302c) (read . aX302b) (peek-char . aX302a) (open-output-file . aX3029) (open-input-file . aX3028) (newline . aX3027) (display . aX3026) (close-output-port . aX3025) (close-input-port . aX3024) (eof-object . aX3022) (current-output-port . aX3020) (current-input-port . aX301f) (output-port? . aX301e) (input-port? . aX301d) (scheme-report-environment . aXe37) (quotient . aX2fe3) (null-environment . aXe35) (remainder . aX2fe2) (modulo . aX2fe1) (inexact->exact . aX2fe0) (force . aX2fdf) (exact->inexact . aX2fde) (make-promise . aX2fdd) (string-fill! . aX2fdb) (string-set! . aX2fda) (set-cdr! . aX2fd9) (set-car! . aX2fd8) (memv . aX2fd2) (memq . aX2fd1) (member . aX2fcf) (assv . aX2fc7) (assq . aX2fc6) (assoc . aX2fc4) (eval . aXe3b) (zero? . aX2f01) (vector? . aX2f00) (vector-set! . aX2eff) (vector-ref . aX2efe) (vector-length . aX2efc) (vector-fill! . aX2efa) (vector->list . aX2ef9) (vector . aX2ef8) (values . aX2ef7) (truncate . aX2ef6) (tan . aX2ef5) (symbol? . aX2ef4) (symbol->string . aX2ef2) (substring . aX2ef1) (string? . aX2ef0) (string>? . aX2eef) (string>=? . aX2eee) (string=? . aX2eed) (string<? . aX2eec) (string<=? . aX2eeb) (string-ref . aX2eea) (string-length . aX2ee9) (string-copy . aX2ee7) (string-append . aX2ee6) (string->symbol . aX2ee5) (string->number . aX2ee4) (string->list . aX2ee3) (string . aX2ee2) (sqrt . aX2ee1) (sin . aX2ee0) (round . aX2edf) (reverse . aX2ede) (real? . aX2edd) (real-part . aX2edb) (rationalize . aX2eda) (rational? . aX2ed9) (procedure? . aX2ed7) (positive? . aX2ed6) (pair? . aX2ed5) (odd? . aX2ed4) (numerator . aX2ed3) (number? . aX2ed2) (number->string . aX2ed1) (not . aX2ecf) (negative? . aX2ece) (min . aX2ecc) (max . aX2ecb) (map . aX2eca) (make-vector . aX2ec9) (make-string . aX2ec8) (make-rectangular . aX2ec7) (make-polar . aX2ec6) (magnitude . aX2ec5) (log . aX2ec4) (list? . aX2ec3) (list-tail . aX2ec2) (list-ref . aX2ec1) (list->vector . aX2ec0) (list->string . aX2ebf) (list . aX2ebe) (length . aX2ebd) (lcm . aX2ebc) (integer? . aX2ebb) (integer->char . aX2eb9) (inexact? . aX2eb7) (imag-part . aX2eb5) (gcd . aX2eb4) (for-each . aX2eb3) (floor . aX2eb2) (expt . aX2eb0) (exp . aX2eaf) (exact? . aX2eae) (even? . aX2eab) (eqv? . aX2ea9) (equal? . aX2ea8) (eq? . aX2ea7) (dynamic-wind . aX2ea6) (denominator . aX2e9f) (cos . aX2e9e) (cons . aX2e9d) (complex? . aX2e9c) (char? . aX2e9b) (char>? . aX2e9a) (char>=? . aX2e99) (char=? . aX2e98) (char<? . aX2e97) (char<=? . aX2e96) (char->integer . aX2e95) (ceiling . aX2e94) (call-with-values . aX2e93) (call-with-current-continuation . aX2e91) (cddddr . aX2e90) (cdddar . aX2e8f) (cddadr . aX2e8e) (cddaar . aX2e8d) (cdaddr . aX2e8c) (cdadar . aX2e8b) (cdaadr . aX2e8a) (cdaaar . aX2e89) (cadddr . aX2e88) (caddar . aX2e87) (cadadr . aX2e86) (cadaar . aX2e85) (caaddr . aX2e84) (caadar . aX2e83) (caaadr . aX2e82) (caaaar . aX2e81) (cdddr . aX2e80) (cddar . aX2e7f) (cdadr . aX2e7e) (cdaar . aX2e7d) (caddr . aX2e7c) (cadar . aX2e7b) (caadr . aX2e7a) (caaar . aX2e79) (cddr . aX2e78) (cdar . aX2e77) (cadr . aX2e76) (caar . aX2e75) (cdr . aX2e74) (car . aX2e73) (boolean? . aX2e72) (atan . aX2e70) (asin . aX2e6e) (apply . aX2e6d) (append . aX2e6c) (angle . aX2e6b) (acos . aX2e6a) (abs . aX2e69) (/ . aX2e68) (* . aX2e67) (- . aX2e66) (+ . aX2e65) (>= . aX2e64) (> . aX2e63) (= . aX2e62) (<= . aX2e61) (< . aX2e60) (unquote-splicing . aX2e2d) (unquote . aX2e2c) (else . aX2e2a) (=> . aX2e29) (... . aX2e28) (delay . aX2e25) (do . aX2e23) (cond . aX2e22) (let* . aX2e21) (quasiquote . aX2e1b) (syntax-rules . aX2e1a) (case . aX2e15) (or . aX2e11) (and . aX2e10) (if . aX2e0f) (let . aX2e0e) (letrec . aX2e0c) (lambda . aX2e09) (quote . aX2e06) (letrec-syntax . aX2e04) (let-syntax . aX2e03) (set! . aX2e02) (begin . aX2e00) (define-syntax . aX2dfe) (define . aX2dfd)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3127 '(psyntax modules) '() '() '() '() '((module . aX2dff)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3128 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3129 '(rnrs) '(6) '() '() '() '((regexp? . aX311c) (string-upcase . aX307a) (string-titlecase . aX3079) (string-normalize-nfkd . aX3078) (string-normalize-nfkc . aX3077) (string-normalize-nfd . aX3076) (string-normalize-nfc . aX3075) (string-foldcase . aX3074) (string-downcase . aX3073) (string-ci>? . aX3072) (string-ci>=? . aX3071) (string-ci=? . aX3070) (string-ci<? . aX306f) (string-ci<=? . aX306e) (char-whitespace? . aX306d) (char-upper-case? . aX306c) (char-title-case? . aX306b) (char-numeric? . aX306a) (char-lower-case? . aX3069) (char-general-category . aX3068) (char-upcase . aX3067) (char-titlecase . aX3066) (char-foldcase . aX3065) (char-downcase . aX3064) (char-ci>? . aX3063) (char-ci>=? . aX3062) (char-ci=? . aX3061) (char-ci<? . aX3060) (char-ci<=? . aX305f) (char-alphabetic? . aX305e) (make-variable-transformer . aXba6) (identifier? . aXe5d) (generate-temporaries . aXe49) (free-identifier=? . aXe4b) (syntax->datum . aXe61) (datum->syntax . aXe5f) (bound-identifier=? . aXe4d) (record-type-descriptor? . aX305d) (record-predicate . aX305c) (record-mutator . aX305b) (record-constructor . aX305a) (record-accessor . aX3059) (make-record-type-descriptor . aX3058) (make-record-constructor-descriptor . aX3057) (record? . aX3056) (record-type-uid . aX3055) (record-type-sealed? . aX3054) (record-type-parent . aX3053) (record-type-opaque? . aX3052) (record-type-name . aX3051) (record-type-generative? . aX3050) (record-type-field-names . aX304f) (record-rtd . aX304e) (record-field-mutable? . aX304d) (delete-file . aX304c) (file-exists? . aX304b) (vector-sort! . aX304a) (vector-sort . aX3049) (list-sort . aX3048) (symbol-hash . aX3047) (string-ci-hash . aX3046) (string-hash . aX3045) (equal-hash . aX3044) (hashtable-equivalence-function . aX3043) (make-hashtable . aX3042) (hashtable-hash-function . aX3041) (make-eqv-hashtable . aX3040) (make-eq-hashtable . aX303f) (hashtable? . aX303e) (hashtable-update! . aX303d) (hashtable-size . aX303c) (hashtable-set! . aX303b) (hashtable-ref . aX303a) (hashtable-mutable? . aX3039) (hashtable-keys . aX3038) (hashtable-entries . aX3037) (hashtable-delete! . aX3036) (hashtable-copy . aX3035) (hashtable-contains? . aX3034) (hashtable-clear! . aX3033) (call-with-output-file . aX3032) (call-with-input-file . aX3031) (write-char . aX3030) (write . aX302f) (with-output-to-file . aX302e) (with-input-from-file . aX302d) (read-char . aX302c) (read . aX302b) (peek-char . aX302a) (open-output-file . aX3029) (open-input-file . aX3028) (newline . aX3027) (display . aX3026) (close-output-port . aX3025) (close-input-port . aX3024) (eof-object? . aX3023) (eof-object . aX3022) (current-error-port . aX3021) (current-output-port . aX3020) (current-input-port . aX301f) (output-port? . aX301e) (input-port? . aX301d) (utf-8-codec . aX301c) (utf-16-codec . aX301b) (transcoder-error-handling-mode . aX301a) (transcoder-eol-style . aX3019) (transcoder-codec . aX3018) (transcoded-port . aX3017) (textual-port? . aX3016) (string->bytevector . aX3015) (standard-output-port . aX3014) (standard-input-port . aX3013) (standard-error-port . aX3012) (set-port-position! . aX3011) (put-u8 . aX3010) (put-string . aX300f) (put-datum . aX300e) (put-char . aX300d) (put-bytevector . aX300c) (port? . aX300b) (port-transcoder . aX300a) (port-position . aX3009) (port-has-set-port-position!? . aX3008) (port-has-port-position? . aX3007) (port-eof? . aX3006) (output-port-buffer-mode . aX3005) (open-string-output-port . aX3004) (open-string-input-port . aX3003) (open-file-output-port . aX3002) (open-file-input/output-port . aX3001) (open-file-input-port . aX3000) (open-bytevector-output-port . aX2fff) (open-bytevector-input-port . aX2ffe) (native-transcoder . aX2ffd) (native-eol-style . aX2ffc) (make-transcoder . aX2ffb) (latin-1-codec . aX2ffa) (make-i/o-write-error . aX2a85) (make-i/o-read-error . aX2a70) (make-i/o-port-error . aX2b26) (make-i/o-invalid-position-error . aX2a9c) (make-i/o-filename-error . aX2ab7) (make-i/o-file-protection-error . aX2ad0) (make-i/o-file-is-read-only-error . aX2ae5) (make-i/o-file-does-not-exist-error . aX2b0f) (make-i/o-file-already-exists-error . aX2afa) (make-i/o-error . aX2a5b) (make-i/o-encoding-error . aX2b56) (make-i/o-decoding-error . aX2b3f) (make-custom-textual-output-port . aX2ff9) (make-custom-textual-input/output-port . aX2ff8) (make-custom-textual-input-port . aX2ff7) (make-custom-binary-output-port . aX2ff6) (make-custom-binary-input/output-port . aX2ff5) (make-custom-binary-input-port . aX2ff4) (make-bytevector . aX2ff3) (lookahead-u8 . aX2ff2) (lookahead-char . aX2ff1) (i/o-write-error? . aX2a87) (i/o-read-error? . aX2a72) (i/o-port-error? . aX2b2a) (i/o-invalid-position-error? . aX2aa0) (i/o-filename-error? . aX2abb) (i/o-file-protection-error? . aX2ad2) (i/o-file-is-read-only-error? . aX2ae7) (i/o-file-does-not-exist-error? . aX2b11) (i/o-file-already-exists-error? . aX2afc) (i/o-error? . aX2a5d) (i/o-error-position . aX2aa2) (i/o-error-port . aX2b2c) (i/o-error-filename . aX2abd) (i/o-encoding-error? . aX2b5a) (i/o-encoding-error-char . aX2b5c) (i/o-decoding-error? . aX2b41) (get-u8 . aX2ff0) (get-string-n! . aX2fef) (get-string-n . aX2fee) (get-string-all . aX2fed) (get-line . aX2fec) (get-datum . aX2feb) (get-char . aX2fea) (get-bytevector-some . aX2fe9) (get-bytevector-n! . aX2fe8) (get-bytevector-n . aX2fe7) (get-bytevector-all . aX2fe6) (flush-output-port . aX2fe5) (close-port . aX2fe4) (exit . aX2fdc) (command-line . aX2c95) (remove . aX2fd7) (remv . aX2fd6) (remp . aX2fd5) (remq . aX2fd4) (partition . aX2fd3) (memv . aX2fd2) (memq . aX2fd1) (memp . aX2fd0) (member . aX2fcf) (exists . aX2fce) (for-all . aX2fcd) (fold-right . aX2fcc) (fold-left . aX2fcb) (find . aX2fca) (filter . aX2fc9) (cons* . aX2fc8) (assv . aX2fc7) (assq . aX2fc6) (assp . aX2fc5) (assoc . aX2fc4) (call-with-string-output-port . aX2fc3) (call-with-port . aX2fc2) (call-with-bytevector-output-port . aX2fc1) (bytevector->string . aX2fc0) (buffer-mode? . aX2fbf) (binary-port? . aX2fbe) (with-exception-handler . aX2fbd) (raise-continuable . aX2fbc) (raise . aX2fbb) (make-enumeration . aX2fba) (enum-set=? . aX2fb9) (enum-set-universe . aX2fb8) (enum-set-union . aX2fb7) (enum-set-subset? . aX2fb6) (enum-set-projection . aX2fb5) (enum-set-member? . aX2fb4) (enum-set-intersection . aX2fb3) (enum-set-indexer . aX2fb2) (enum-set-difference . aX2fb1) (enum-set-constructor . aX2fb0) (enum-set-complement . aX2faf) (enum-set->list . aX2fae) (who-condition? . aX29d1) (warning? . aX2949) (violation? . aX2988) (undefined-violation? . aX2a48) (syntax-violation? . aX2a2f) (syntax-violation-subform . aX2a33) (syntax-violation-form . aX2a31) (syntax-violation . aXe5b) (simple-conditions . aX2fad) (serious-condition? . aX295e) (non-continuable-violation? . aX29e8) (message-condition? . aX2932) (make-who-condition . aX29cd) (make-warning . aX2947) (make-violation . aX2986) (make-undefined-violation . aX2a46) (make-syntax-violation . aX2a29) (make-serious-condition . aX295c) (make-non-continuable-violation . aX29e6) (make-message-condition . aX292e) (make-lexical-violation . aX2a10) (make-irritants-condition . aX29b2) (make-implementation-restriction-violation . aX29fb) (make-error . aX2971) (make-assertion-violation . aX299b) (lexical-violation? . aX2a12) (irritants-condition? . aX29b6) (implementation-restriction-violation? . aX29fd) (error? . aX2973) (condition-who . aX29d3) (condition-predicate . aX2fac) (condition-message . aX2934) (condition-irritants . aX29b8) (condition-accessor . aX2fab) (condition . aX2faa) (assertion-violation? . aX299d) (condition? . aX2fa9) (utf32->string . aX2fa8) (utf16->string . aX2fa7) (utf8->string . aX2fa6) (uint-list->bytevector . aX2fa5) (u8-list->bytevector . aX2fa4) (string->utf8 . aX2fa3) (string->utf32 . aX2fa2) (string->utf16 . aX2fa1) (sint-list->bytevector . aX2fa0) (native-endianness . aX2f9f) (bytevector? . aX2f9e) (bytevector=? . aX2f9d) (bytevector-uint-set! . aX2f9c) (bytevector-uint-ref . aX2f9b) (bytevector-u8-set! . aX2f9a) (bytevector-u8-ref . aX2f99) (bytevector-u64-set! . aX2f98) (bytevector-u64-ref . aX2f97) (bytevector-u64-native-set! . aX2f96) (bytevector-u64-native-ref . aX2f95) (bytevector-u32-set! . aX2f94) (bytevector-u32-ref . aX2f93) (bytevector-u32-native-set! . aX2f92) (bytevector-u32-native-ref . aX2f91) (bytevector-u16-set! . aX2f90) (bytevector-u16-ref . aX2f8f) (bytevector-u16-native-set! . aX2f8e) (bytevector-u16-native-ref . aX2f8d) (bytevector-sint-set! . aX2f8c) (bytevector-sint-ref . aX2f8b) (bytevector-s8-set! . aX2f8a) (bytevector-s8-ref . aX2f89) (bytevector-s64-set! . aX2f88) (bytevector-s64-ref . aX2f87) (bytevector-s64-native-set! . aX2f86) (bytevector-s64-native-ref . aX2f85) (bytevector-s32-set! . aX2f84) (bytevector-s32-ref . aX2f83) (bytevector-s32-native-set! . aX2f82) (bytevector-s32-native-ref . aX2f81) (bytevector-s16-set! . aX2f80) (bytevector-s16-ref . aX2f7f) (bytevector-s16-native-set! . aX2f7e) (bytevector-s16-native-ref . aX2f7d) (bytevector-length . aX2f7c) (bytevector-ieee-single-ref . aX2f7b) (bytevector-ieee-single-set! . aX2f7a) (bytevector-ieee-single-native-set! . aX2f79) (bytevector-ieee-single-native-ref . aX2f78) (bytevector-ieee-double-set! . aX2f77) (bytevector-ieee-double-ref . aX2f76) (bytevector-ieee-double-native-set! . aX2f75) (bytevector-ieee-double-native-ref . aX2f74) (bytevector-fill! . aX2f73) (bytevector-copy! . aX2f72) (bytevector-copy . aX2f71) (bytevector->uint-list . aX2f70) (bytevector->u8-list . aX2f6f) (bytevector->sint-list . aX2f6e) (no-nans-violation? . aX2b86) (no-infinities-violation? . aX2b71) (make-no-nans-violation . aX2b84) (make-no-infinities-violation . aX2b6f) (real->flonum . aX2f6d) (flzero? . aX2f6c) (fltruncate . aX2f6b) (fltan . aX2f6a) (flsqrt . aX2f69) (flsin . aX2f68) (flround . aX2f67) (flpositive? . aX2f66) (flonum? . aX2f65) (flodd? . aX2f64) (flnumerator . aX2f63) (flnegative? . aX2f62) (flnan? . aX2f61) (flmod0 . aX2f60) (flmod . aX2f5f) (flmin . aX2f5e) (flmax . aX2f5d) (fllog . aX2f5c) (flinteger? . aX2f5b) (flinfinite? . aX2f5a) (flfloor . aX2f59) (flfinite? . aX2f58) (flexpt . aX2f57) (flexp . aX2f56) (fleven? . aX2f55) (fldiv0-and-mod0 . aX2f54) (fldiv0 . aX2f53) (fldiv-and-mod . aX2f52) (fldiv . aX2f51) (fldenominator . aX2f50) (flcos . aX2f4f) (flceiling . aX2f4e) (flatan . aX2f4d) (flasin . aX2f4c) (flacos . aX2f4b) (flabs . aX2f4a) (fl>? . aX2f49) (fl>=? . aX2f48) (fl=? . aX2f47) (fl<? . aX2f46) (fl<=? . aX2f45) (fl/ . aX2f44) (fl- . aX2f43) (fl+ . aX2f42) (fl* . aX2f41) (fixnum->flonum . aX2f40) (fxzero? . aX2f3f) (fxxor . aX2f3e) (fxrotate-bit-field . aX2f3d) (fxreverse-bit-field . aX2f3c) (fxpositive? . aX2f3b) (fxodd? . aX2f3a) (fxnot . aX2f39) (fxnegative? . aX2f38) (fxmod0 . aX2f37) (fxmod . aX2f36) (fxmin . aX2f35) (fxmax . aX2f34) (fxlength . aX2f33) (fxior . aX2f32) (fxif . aX2f31) (fxfirst-bit-set . aX2f30) (fxeven? . aX2f2f) (fxdiv0-and-mod0 . aX2f2e) (fxdiv0 . aX2f2d) (fxdiv-and-mod . aX2f2c) (fxdiv . aX2f2b) (fxcopy-bit-field . aX2f2a) (fxcopy-bit . aX2f29) (fxbit-set? . aX2f28) (fxbit-field . aX2f27) (fxbit-count . aX2f26) (fxarithmetic-shift-right . aX2f25) (fxarithmetic-shift-left . aX2f24) (fxarithmetic-shift . aX2f23) (fxand . aX2f22) (fx>? . aX2f21) (fx>=? . aX2f20) (fx=? . aX2f1f) (fx<? . aX2f1e) (fx<=? . aX2f1d) (fx-/carry . aX2f1c) (fx- . aX2f1b) (fx+/carry . aX2f1a) (fx+ . aX2f19) (fx*/carry . aX2f18) (fx* . aX2f17) (greatest-fixnum . aX2f16) (least-fixnum . aX2f15) (fixnum-width . aX2f14) (fixnum? . aX2f13) (bitwise-rotate-bit-field . aX2f12) (bitwise-reverse-bit-field . aX2f11) (bitwise-length . aX2f10) (bitwise-if . aX2f0f) (bitwise-first-bit-set . aX2f0e) (bitwise-copy-bit-field . aX2f0d) (bitwise-copy-bit . aX2f0c) (bitwise-bit-set? . aX2f0b) (bitwise-bit-field . aX2f0a) (bitwise-bit-count . aX2f09) (bitwise-xor . aX2f08) (bitwise-ior . aX2f07) (bitwise-and . aX2f06) (bitwise-not . aX2f05) (bitwise-arithmetic-shift-right . aX2f04) (bitwise-arithmetic-shift-left . aX2f03) (bitwise-arithmetic-shift . aX2f02) (zero? . aX2f01) (vector? . aX2f00) (vector-set! . aX2eff) (vector-ref . aX2efe) (vector-map . aX2efd) (vector-length . aX2efc) (vector-for-each . aX2efb) (vector-fill! . aX2efa) (vector->list . aX2ef9) (vector . aX2ef8) (values . aX2ef7) (truncate . aX2ef6) (tan . aX2ef5) (symbol? . aX2ef4) (symbol=? . aX2ef3) (symbol->string . aX2ef2) (substring . aX2ef1) (string? . aX2ef0) (string>? . aX2eef) (string>=? . aX2eee) (string=? . aX2eed) (string<? . aX2eec) (string<=? . aX2eeb) (string-ref . aX2eea) (string-length . aX2ee9) (string-for-each . aX2ee8) (string-copy . aX2ee7) (string-append . aX2ee6) (string->symbol . aX2ee5) (string->number . aX2ee4) (string->list . aX2ee3) (string . aX2ee2) (sqrt . aX2ee1) (sin . aX2ee0) (round . aX2edf) (reverse . aX2ede) (real? . aX2edd) (real-valued? . aX2edc) (real-part . aX2edb) (rationalize . aX2eda) (rational? . aX2ed9) (rational-valued? . aX2ed8) (procedure? . aX2ed7) (positive? . aX2ed6) (pair? . aX2ed5) (odd? . aX2ed4) (numerator . aX2ed3) (number? . aX2ed2) (number->string . aX2ed1) (null? . aX2ed0) (not . aX2ecf) (negative? . aX2ece) (nan? . aX2ecd) (min . aX2ecc) (max . aX2ecb) (map . aX2eca) (make-vector . aX2ec9) (make-string . aX2ec8) (make-rectangular . aX2ec7) (make-polar . aX2ec6) (magnitude . aX2ec5) (log . aX2ec4) (list? . aX2ec3) (list-tail . aX2ec2) (list-ref . aX2ec1) (list->vector . aX2ec0) (list->string . aX2ebf) (list . aX2ebe) (length . aX2ebd) (lcm . aX2ebc) (integer? . aX2ebb) (integer-valued? . aX2eba) (integer->char . aX2eb9) (infinite? . aX2eb8) (inexact? . aX2eb7) (inexact . aX2eb6) (imag-part . aX2eb5) (gcd . aX2eb4) (for-each . aX2eb3) (floor . aX2eb2) (finite? . aX2eb1) (expt . aX2eb0) (exp . aX2eaf) (exact? . aX2eae) (exact-integer-sqrt . aX2ead) (exact . aX2eac) (even? . aX2eab) (error . aX2eaa) (eqv? . aX2ea9) (equal? . aX2ea8) (eq? . aX2ea7) (dynamic-wind . aX2ea6) (div0-and-mod0 . aX2ea5) (mod0 . aX2ea4) (div0 . aX2ea3) (div-and-mod . aX2ea2) (mod . aX2ea1) (div . aX2ea0) (denominator . aX2e9f) (cos . aX2e9e) (cons . aX2e9d) (complex? . aX2e9c) (char? . aX2e9b) (char>? . aX2e9a) (char>=? . aX2e99) (char=? . aX2e98) (char<? . aX2e97) (char<=? . aX2e96) (char->integer . aX2e95) (ceiling . aX2e94) (call-with-values . aX2e93) (call/cc . aX2e92) (call-with-current-continuation . aX2e91) (cddddr . aX2e90) (cdddar . aX2e8f) (cddadr . aX2e8e) (cddaar . aX2e8d) (cdaddr . aX2e8c) (cdadar . aX2e8b) (cdaadr . aX2e8a) (cdaaar . aX2e89) (cadddr . aX2e88) (caddar . aX2e87) (cadadr . aX2e86) (cadaar . aX2e85) (caaddr . aX2e84) (caadar . aX2e83) (caaadr . aX2e82) (caaaar . aX2e81) (cdddr . aX2e80) (cddar . aX2e7f) (cdadr . aX2e7e) (cdaar . aX2e7d) (caddr . aX2e7c) (cadar . aX2e7b) (caadr . aX2e7a) (caaar . aX2e79) (cddr . aX2e78) (cdar . aX2e77) (cadr . aX2e76) (caar . aX2e75) (cdr . aX2e74) (car . aX2e73) (boolean? . aX2e72) (boolean=? . aX2e71) (atan . aX2e70) (assertion-violation . aX2e6f) (asin . aX2e6e) (apply . aX2e6d) (append . aX2e6c) (angle . aX2e6b) (acos . aX2e6a) (abs . aX2e69) (/ . aX2e68) (* . aX2e67) (- . aX2e66) (+ . aX2e65) (>= . aX2e64) (> . aX2e63) (= . aX2e62) (<= . aX2e61) (< . aX2e60) (&no-nans . aX2e5e) (&no-infinities . aX2e5d) (&i/o-encoding . aX2e5c) (&i/o-decoding . aX2e5b) (&i/o-port . aX2e5a) (&i/o-file-does-not-exist . aX2e59) (&i/o-file-already-exists . aX2e58) (&i/o-file-is-read-only . aX2e57) (&i/o-file-protection . aX2e56) (&i/o-filename . aX2e55) (&i/o-invalid-position . aX2e54) (&i/o-write . aX2e53) (&i/o-read . aX2e52) (&i/o . aX2e51) (&undefined . aX2e50) (&syntax . aX2e4f) (&lexical . aX2e4e) (&implementation-restriction . aX2e4d) (&non-continuable . aX2e4c) (&who . aX2e4b) (&irritants . aX2e4a) (&assertion . aX2e49) (&violation . aX2e48) (&error . aX2e47) (&serious . aX2e46) (&warning . aX2e45) (&message . aX2e44) (&condition . aX2e43) (define-condition-type . aX2e42) (define-enumeration . aX2e41) (define-record-type . aX2e40) (parent-rtd . aX2e3f) (nongenerative . aX2e3e) (opaque . aX2e3d) (sealed . aX2e3c) (protocol . aX2e3b) (parent . aX2e3a) (immutable . aX2e39) (mutable . aX2e38) (fields . aX2e37) (error-handling-mode . aX2e36) (file-options . aX2e35) (buffer-mode . aX2e34) (eol-style . aX2e33) (guard . aX2e32) (unsyntax-splicing . aX2e2f) (unsyntax . aX2e2e) (unquote-splicing . aX2e2d) (unquote . aX2e2c) (_ . aX2e2b) (else . aX2e2a) (=> . aX2e29) (... . aX2e28) (assert . aX2e27) (endianness . aX2e26) (do . aX2e23) (cond . aX2e22) (let* . aX2e21) (let*-values . aX2e20) (let-values . aX2e1f) (identifier-syntax . aX2e1e) (with-syntax . aX2e1d) (quasisyntax . aX2e1c) (quasiquote . aX2e1b) (syntax-rules . aX2e1a) (record-constructor-descriptor . aX2e17) (record-type-descriptor . aX2e16) (case . aX2e15) (unless . aX2e13) (when . aX2e12) (or . aX2e11) (and . aX2e10) (if . aX2e0f) (let . aX2e0e) (letrec* . aX2e0d) (letrec . aX2e0c) (case-lambda . aX2e0a) (lambda . aX2e09) (syntax . aX2e08) (syntax-case . aX2e07) (quote . aX2e06) (letrec-syntax . aX2e04) (let-syntax . aX2e03) (set! . aX2e02) (begin . aX2e00) (define-syntax . aX2dfe) (define . aX2dfd)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX312a '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . aXe37) (quotient . aX2fe3) (null-environment . aXe35) (remainder . aX2fe2) (modulo . aX2fe1) (inexact->exact . aX2fe0) (force . aX2fdf) (exact->inexact . aX2fde) (make-promise . aX2fdd) (delay . aX2e25)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX312b '(rnrs control) '(6) '() '() '() '((do . aX2e23) (unless . aX2e13) (when . aX2e12) (case-lambda . aX2e0a)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX312c '(rnrs eval) '(6) '() '() '() '((eval . aXe3b) (environment . aXe33)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX312d '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . aX2fd9) (set-car! . aX2fd8)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX312e '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . aX2fdb) (string-set! . aX2fda)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX312f '(rnrs programs) '(6) '() '() '() '((exit . aX2fdc) (command-line . aX2c95)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3130 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . aXba6) (identifier? . aXe5d) (generate-temporaries . aXe49) (free-identifier=? . aXe4b) (syntax->datum . aXe61) (datum->syntax . aXe5f) (bound-identifier=? . aXe4d) (syntax-violation . aXe5b) (unsyntax-splicing . aX2e2f) (unsyntax . aX2e2e) (_ . aX2e2b) (... . aX2e28) (with-syntax . aX2e1d) (quasisyntax . aX2e1c) (syntax . aX2e08) (syntax-case . aX2e07)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3131 '(rnrs files) '(6) '() '() '() '((delete-file . aX304c) (file-exists? . aX304b) (make-i/o-write-error . aX2a85) (make-i/o-read-error . aX2a70) (make-i/o-port-error . aX2b26) (make-i/o-invalid-position-error . aX2a9c) (make-i/o-filename-error . aX2ab7) (make-i/o-file-protection-error . aX2ad0) (make-i/o-file-is-read-only-error . aX2ae5) (make-i/o-file-does-not-exist-error . aX2b0f) (make-i/o-file-already-exists-error . aX2afa) (make-i/o-error . aX2a5b) (i/o-write-error? . aX2a87) (i/o-read-error? . aX2a72) (i/o-port-error? . aX2b2a) (i/o-invalid-position-error? . aX2aa0) (i/o-filename-error? . aX2abb) (i/o-file-protection-error? . aX2ad2) (i/o-file-is-read-only-error? . aX2ae7) (i/o-file-does-not-exist-error? . aX2b11) (i/o-file-already-exists-error? . aX2afc) (i/o-error? . aX2a5d) (i/o-error-position . aX2aa2) (i/o-error-port . aX2b2c) (i/o-error-filename . aX2abd) (&i/o-port . aX2e5a) (&i/o-file-does-not-exist . aX2e59) (&i/o-file-already-exists . aX2e58) (&i/o-file-is-read-only . aX2e57) (&i/o-file-protection . aX2e56) (&i/o-filename . aX2e55) (&i/o-invalid-position . aX2e54) (&i/o-write . aX2e53) (&i/o-read . aX2e52) (&i/o . aX2e51)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3132 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . aX304a) (vector-sort . aX3049) (list-sort . aX3048)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3133 '(rnrs base) '(6) '() '() '() '((zero? . aX2f01) (vector? . aX2f00) (vector-set! . aX2eff) (vector-ref . aX2efe) (vector-map . aX2efd) (vector-length . aX2efc) (vector-for-each . aX2efb) (vector-fill! . aX2efa) (vector->list . aX2ef9) (vector . aX2ef8) (values . aX2ef7) (truncate . aX2ef6) (tan . aX2ef5) (symbol? . aX2ef4) (symbol=? . aX2ef3) (symbol->string . aX2ef2) (substring . aX2ef1) (string? . aX2ef0) (string>? . aX2eef) (string>=? . aX2eee) (string=? . aX2eed) (string<? . aX2eec) (string<=? . aX2eeb) (string-ref . aX2eea) (string-length . aX2ee9) (string-for-each . aX2ee8) (string-copy . aX2ee7) (string-append . aX2ee6) (string->symbol . aX2ee5) (string->number . aX2ee4) (string->list . aX2ee3) (string . aX2ee2) (sqrt . aX2ee1) (sin . aX2ee0) (round . aX2edf) (reverse . aX2ede) (real? . aX2edd) (real-valued? . aX2edc) (real-part . aX2edb) (rationalize . aX2eda) (rational? . aX2ed9) (rational-valued? . aX2ed8) (procedure? . aX2ed7) (positive? . aX2ed6) (pair? . aX2ed5) (odd? . aX2ed4) (numerator . aX2ed3) (number? . aX2ed2) (number->string . aX2ed1) (null? . aX2ed0) (not . aX2ecf) (negative? . aX2ece) (nan? . aX2ecd) (min . aX2ecc) (max . aX2ecb) (map . aX2eca) (make-vector . aX2ec9) (make-string . aX2ec8) (make-rectangular . aX2ec7) (make-polar . aX2ec6) (magnitude . aX2ec5) (log . aX2ec4) (list? . aX2ec3) (list-tail . aX2ec2) (list-ref . aX2ec1) (list->vector . aX2ec0) (list->string . aX2ebf) (list . aX2ebe) (length . aX2ebd) (lcm . aX2ebc) (integer? . aX2ebb) (integer-valued? . aX2eba) (integer->char . aX2eb9) (infinite? . aX2eb8) (inexact? . aX2eb7) (inexact . aX2eb6) (imag-part . aX2eb5) (gcd . aX2eb4) (for-each . aX2eb3) (floor . aX2eb2) (finite? . aX2eb1) (expt . aX2eb0) (exp . aX2eaf) (exact? . aX2eae) (exact-integer-sqrt . aX2ead) (exact . aX2eac) (even? . aX2eab) (error . aX2eaa) (eqv? . aX2ea9) (equal? . aX2ea8) (eq? . aX2ea7) (dynamic-wind . aX2ea6) (div0-and-mod0 . aX2ea5) (mod0 . aX2ea4) (div0 . aX2ea3) (div-and-mod . aX2ea2) (mod . aX2ea1) (div . aX2ea0) (denominator . aX2e9f) (cos . aX2e9e) (cons . aX2e9d) (complex? . aX2e9c) (char? . aX2e9b) (char>? . aX2e9a) (char>=? . aX2e99) (char=? . aX2e98) (char<? . aX2e97) (char<=? . aX2e96) (char->integer . aX2e95) (ceiling . aX2e94) (call-with-values . aX2e93) (call/cc . aX2e92) (call-with-current-continuation . aX2e91) (cddddr . aX2e90) (cdddar . aX2e8f) (cddadr . aX2e8e) (cddaar . aX2e8d) (cdaddr . aX2e8c) (cdadar . aX2e8b) (cdaadr . aX2e8a) (cdaaar . aX2e89) (cadddr . aX2e88) (caddar . aX2e87) (cadadr . aX2e86) (cadaar . aX2e85) (caaddr . aX2e84) (caadar . aX2e83) (caaadr . aX2e82) (caaaar . aX2e81) (cdddr . aX2e80) (cddar . aX2e7f) (cdadr . aX2e7e) (cdaar . aX2e7d) (caddr . aX2e7c) (cadar . aX2e7b) (caadr . aX2e7a) (caaar . aX2e79) (cddr . aX2e78) (cdar . aX2e77) (cadr . aX2e76) (caar . aX2e75) (cdr . aX2e74) (car . aX2e73) (boolean? . aX2e72) (boolean=? . aX2e71) (atan . aX2e70) (assertion-violation . aX2e6f) (asin . aX2e6e) (apply . aX2e6d) (append . aX2e6c) (angle . aX2e6b) (acos . aX2e6a) (abs . aX2e69) (/ . aX2e68) (* . aX2e67) (- . aX2e66) (+ . aX2e65) (>= . aX2e64) (> . aX2e63) (= . aX2e62) (<= . aX2e61) (< . aX2e60) (unquote-splicing . aX2e2d) (unquote . aX2e2c) (_ . aX2e2b) (else . aX2e2a) (=> . aX2e29) (... . aX2e28) (assert . aX2e27) (cond . aX2e22) (let* . aX2e21) (let*-values . aX2e20) (let-values . aX2e1f) (identifier-syntax . aX2e1e) (quasiquote . aX2e1b) (syntax-rules . aX2e1a) (case . aX2e15) (or . aX2e11) (and . aX2e10) (if . aX2e0f) (let . aX2e0e) (letrec* . aX2e0d) (letrec . aX2e0c) (lambda . aX2e09) (quote . aX2e06) (letrec-syntax . aX2e04) (let-syntax . aX2e03) (set! . aX2e02) (begin . aX2e00) (define-syntax . aX2dfe) (define . aX2dfd)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3134 '(rnrs lists) '(6) '() '() '() '((remove . aX2fd7) (remv . aX2fd6) (remp . aX2fd5) (remq . aX2fd4) (partition . aX2fd3) (memv . aX2fd2) (memq . aX2fd1) (memp . aX2fd0) (member . aX2fcf) (exists . aX2fce) (for-all . aX2fcd) (fold-right . aX2fcc) (fold-left . aX2fcb) (find . aX2fca) (filter . aX2fc9) (cons* . aX2fc8) (assv . aX2fc7) (assq . aX2fc6) (assp . aX2fc5) (assoc . aX2fc4)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3135 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . aX3032) (call-with-input-file . aX3031) (write-char . aX3030) (write . aX302f) (with-output-to-file . aX302e) (with-input-from-file . aX302d) (read-char . aX302c) (read . aX302b) (peek-char . aX302a) (open-output-file . aX3029) (open-input-file . aX3028) (newline . aX3027) (display . aX3026) (close-output-port . aX3025) (close-input-port . aX3024) (eof-object? . aX3023) (eof-object . aX3022) (current-error-port . aX3021) (current-output-port . aX3020) (current-input-port . aX301f) (output-port? . aX301e) (input-port? . aX301d) (make-i/o-write-error . aX2a85) (make-i/o-read-error . aX2a70) (make-i/o-port-error . aX2b26) (make-i/o-invalid-position-error . aX2a9c) (make-i/o-filename-error . aX2ab7) (make-i/o-file-protection-error . aX2ad0) (make-i/o-file-is-read-only-error . aX2ae5) (make-i/o-file-does-not-exist-error . aX2b0f) (make-i/o-file-already-exists-error . aX2afa) (make-i/o-error . aX2a5b) (i/o-write-error? . aX2a87) (i/o-read-error? . aX2a72) (i/o-port-error? . aX2b2a) (i/o-invalid-position-error? . aX2aa0) (i/o-filename-error? . aX2abb) (i/o-file-protection-error? . aX2ad2) (i/o-file-is-read-only-error? . aX2ae7) (i/o-file-does-not-exist-error? . aX2b11) (i/o-file-already-exists-error? . aX2afc) (i/o-error? . aX2a5d) (i/o-error-position . aX2aa2) (i/o-error-port . aX2b2c) (i/o-error-filename . aX2abd) (&i/o-port . aX2e5a) (&i/o-file-does-not-exist . aX2e59) (&i/o-file-already-exists . aX2e58) (&i/o-file-is-read-only . aX2e57) (&i/o-file-protection . aX2e56) (&i/o-filename . aX2e55) (&i/o-invalid-position . aX2e54) (&i/o-write . aX2e53) (&i/o-read . aX2e52) (&i/o . aX2e51)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3136 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . aX2ff3) (utf32->string . aX2fa8) (utf16->string . aX2fa7) (utf8->string . aX2fa6) (uint-list->bytevector . aX2fa5) (u8-list->bytevector . aX2fa4) (string->utf8 . aX2fa3) (string->utf32 . aX2fa2) (string->utf16 . aX2fa1) (sint-list->bytevector . aX2fa0) (native-endianness . aX2f9f) (bytevector? . aX2f9e) (bytevector=? . aX2f9d) (bytevector-uint-set! . aX2f9c) (bytevector-uint-ref . aX2f9b) (bytevector-u8-set! . aX2f9a) (bytevector-u8-ref . aX2f99) (bytevector-u64-set! . aX2f98) (bytevector-u64-ref . aX2f97) (bytevector-u64-native-set! . aX2f96) (bytevector-u64-native-ref . aX2f95) (bytevector-u32-set! . aX2f94) (bytevector-u32-ref . aX2f93) (bytevector-u32-native-set! . aX2f92) (bytevector-u32-native-ref . aX2f91) (bytevector-u16-set! . aX2f90) (bytevector-u16-ref . aX2f8f) (bytevector-u16-native-set! . aX2f8e) (bytevector-u16-native-ref . aX2f8d) (bytevector-sint-set! . aX2f8c) (bytevector-sint-ref . aX2f8b) (bytevector-s8-set! . aX2f8a) (bytevector-s8-ref . aX2f89) (bytevector-s64-set! . aX2f88) (bytevector-s64-ref . aX2f87) (bytevector-s64-native-set! . aX2f86) (bytevector-s64-native-ref . aX2f85) (bytevector-s32-set! . aX2f84) (bytevector-s32-ref . aX2f83) (bytevector-s32-native-set! . aX2f82) (bytevector-s32-native-ref . aX2f81) (bytevector-s16-set! . aX2f80) (bytevector-s16-ref . aX2f7f) (bytevector-s16-native-set! . aX2f7e) (bytevector-s16-native-ref . aX2f7d) (bytevector-length . aX2f7c) (bytevector-ieee-single-ref . aX2f7b) (bytevector-ieee-single-set! . aX2f7a) (bytevector-ieee-single-native-set! . aX2f79) (bytevector-ieee-single-native-ref . aX2f78) (bytevector-ieee-double-set! . aX2f77) (bytevector-ieee-double-ref . aX2f76) (bytevector-ieee-double-native-set! . aX2f75) (bytevector-ieee-double-native-ref . aX2f74) (bytevector-fill! . aX2f73) (bytevector-copy! . aX2f72) (bytevector-copy . aX2f71) (bytevector->uint-list . aX2f70) (bytevector->u8-list . aX2f6f) (bytevector->sint-list . aX2f6e) (endianness . aX2e26)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3137 '(rnrs unicode) '(6) '() '() '() '((string-upcase . aX307a) (string-titlecase . aX3079) (string-normalize-nfkd . aX3078) (string-normalize-nfkc . aX3077) (string-normalize-nfd . aX3076) (string-normalize-nfc . aX3075) (string-foldcase . aX3074) (string-downcase . aX3073) (string-ci>? . aX3072) (string-ci>=? . aX3071) (string-ci=? . aX3070) (string-ci<? . aX306f) (string-ci<=? . aX306e) (char-whitespace? . aX306d) (char-upper-case? . aX306c) (char-title-case? . aX306b) (char-numeric? . aX306a) (char-lower-case? . aX3069) (char-general-category . aX3068) (char-upcase . aX3067) (char-titlecase . aX3066) (char-foldcase . aX3065) (char-downcase . aX3064) (char-ci>? . aX3063) (char-ci>=? . aX3062) (char-ci=? . aX3061) (char-ci<? . aX3060) (char-ci<=? . aX305f) (char-alphabetic? . aX305e)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3138 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . aX2fbd) (raise-continuable . aX2fbc) (raise . aX2fbb) (guard . aX2e32) (else . aX2e2a) (=> . aX2e29)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3139 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . aX2f12) (bitwise-reverse-bit-field . aX2f11) (bitwise-length . aX2f10) (bitwise-if . aX2f0f) (bitwise-first-bit-set . aX2f0e) (bitwise-copy-bit-field . aX2f0d) (bitwise-copy-bit . aX2f0c) (bitwise-bit-set? . aX2f0b) (bitwise-bit-field . aX2f0a) (bitwise-bit-count . aX2f09) (bitwise-xor . aX2f08) (bitwise-ior . aX2f07) (bitwise-and . aX2f06) (bitwise-not . aX2f05) (bitwise-arithmetic-shift-right . aX2f04) (bitwise-arithmetic-shift-left . aX2f03) (bitwise-arithmetic-shift . aX2f02)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX313a '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . aX2f3f) (fxxor . aX2f3e) (fxrotate-bit-field . aX2f3d) (fxreverse-bit-field . aX2f3c) (fxpositive? . aX2f3b) (fxodd? . aX2f3a) (fxnot . aX2f39) (fxnegative? . aX2f38) (fxmod0 . aX2f37) (fxmod . aX2f36) (fxmin . aX2f35) (fxmax . aX2f34) (fxlength . aX2f33) (fxior . aX2f32) (fxif . aX2f31) (fxfirst-bit-set . aX2f30) (fxeven? . aX2f2f) (fxdiv0-and-mod0 . aX2f2e) (fxdiv0 . aX2f2d) (fxdiv-and-mod . aX2f2c) (fxdiv . aX2f2b) (fxcopy-bit-field . aX2f2a) (fxcopy-bit . aX2f29) (fxbit-set? . aX2f28) (fxbit-field . aX2f27) (fxbit-count . aX2f26) (fxarithmetic-shift-right . aX2f25) (fxarithmetic-shift-left . aX2f24) (fxarithmetic-shift . aX2f23) (fxand . aX2f22) (fx>? . aX2f21) (fx>=? . aX2f20) (fx=? . aX2f1f) (fx<? . aX2f1e) (fx<=? . aX2f1d) (fx-/carry . aX2f1c) (fx- . aX2f1b) (fx+/carry . aX2f1a) (fx+ . aX2f19) (fx*/carry . aX2f18) (fx* . aX2f17) (greatest-fixnum . aX2f16) (least-fixnum . aX2f15) (fixnum-width . aX2f14) (fixnum? . aX2f13)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX313b '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . aX2b86) (no-infinities-violation? . aX2b71) (make-no-nans-violation . aX2b84) (make-no-infinities-violation . aX2b6f) (real->flonum . aX2f6d) (flzero? . aX2f6c) (fltruncate . aX2f6b) (fltan . aX2f6a) (flsqrt . aX2f69) (flsin . aX2f68) (flround . aX2f67) (flpositive? . aX2f66) (flonum? . aX2f65) (flodd? . aX2f64) (flnumerator . aX2f63) (flnegative? . aX2f62) (flnan? . aX2f61) (flmod0 . aX2f60) (flmod . aX2f5f) (flmin . aX2f5e) (flmax . aX2f5d) (fllog . aX2f5c) (flinteger? . aX2f5b) (flinfinite? . aX2f5a) (flfloor . aX2f59) (flfinite? . aX2f58) (flexpt . aX2f57) (flexp . aX2f56) (fleven? . aX2f55) (fldiv0-and-mod0 . aX2f54) (fldiv0 . aX2f53) (fldiv-and-mod . aX2f52) (fldiv . aX2f51) (fldenominator . aX2f50) (flcos . aX2f4f) (flceiling . aX2f4e) (flatan . aX2f4d) (flasin . aX2f4c) (flacos . aX2f4b) (flabs . aX2f4a) (fl>? . aX2f49) (fl>=? . aX2f48) (fl=? . aX2f47) (fl<? . aX2f46) (fl<=? . aX2f45) (fl/ . aX2f44) (fl- . aX2f43) (fl+ . aX2f42) (fl* . aX2f41) (fixnum->flonum . aX2f40) (&no-nans . aX2e5e) (&no-infinities . aX2e5d)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX313c '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . aX3047) (string-ci-hash . aX3046) (string-hash . aX3045) (equal-hash . aX3044) (hashtable-equivalence-function . aX3043) (make-hashtable . aX3042) (hashtable-hash-function . aX3041) (make-eqv-hashtable . aX3040) (make-eq-hashtable . aX303f) (hashtable? . aX303e) (hashtable-update! . aX303d) (hashtable-size . aX303c) (hashtable-set! . aX303b) (hashtable-ref . aX303a) (hashtable-mutable? . aX3039) (hashtable-keys . aX3038) (hashtable-entries . aX3037) (hashtable-delete! . aX3036) (hashtable-copy . aX3035) (hashtable-contains? . aX3034) (hashtable-clear! . aX3033)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX313d '(rnrs io ports) '(6) '() '() '() '((eof-object? . aX3023) (eof-object . aX3022) (current-error-port . aX3021) (current-output-port . aX3020) (current-input-port . aX301f) (output-port? . aX301e) (input-port? . aX301d) (utf-8-codec . aX301c) (utf-16-codec . aX301b) (transcoder-error-handling-mode . aX301a) (transcoder-eol-style . aX3019) (transcoder-codec . aX3018) (transcoded-port . aX3017) (textual-port? . aX3016) (string->bytevector . aX3015) (standard-output-port . aX3014) (standard-input-port . aX3013) (standard-error-port . aX3012) (set-port-position! . aX3011) (put-u8 . aX3010) (put-string . aX300f) (put-datum . aX300e) (put-char . aX300d) (put-bytevector . aX300c) (port? . aX300b) (port-transcoder . aX300a) (port-position . aX3009) (port-has-set-port-position!? . aX3008) (port-has-port-position? . aX3007) (port-eof? . aX3006) (output-port-buffer-mode . aX3005) (open-string-output-port . aX3004) (open-string-input-port . aX3003) (open-file-output-port . aX3002) (open-file-input/output-port . aX3001) (open-file-input-port . aX3000) (open-bytevector-output-port . aX2fff) (open-bytevector-input-port . aX2ffe) (native-transcoder . aX2ffd) (native-eol-style . aX2ffc) (make-transcoder . aX2ffb) (latin-1-codec . aX2ffa) (make-i/o-write-error . aX2a85) (make-i/o-read-error . aX2a70) (make-i/o-port-error . aX2b26) (make-i/o-invalid-position-error . aX2a9c) (make-i/o-filename-error . aX2ab7) (make-i/o-file-protection-error . aX2ad0) (make-i/o-file-is-read-only-error . aX2ae5) (make-i/o-file-does-not-exist-error . aX2b0f) (make-i/o-file-already-exists-error . aX2afa) (make-i/o-error . aX2a5b) (make-i/o-encoding-error . aX2b56) (make-i/o-decoding-error . aX2b3f) (make-custom-textual-output-port . aX2ff9) (make-custom-textual-input/output-port . aX2ff8) (make-custom-textual-input-port . aX2ff7) (make-custom-binary-output-port . aX2ff6) (make-custom-binary-input/output-port . aX2ff5) (make-custom-binary-input-port . aX2ff4) (lookahead-u8 . aX2ff2) (lookahead-char . aX2ff1) (i/o-write-error? . aX2a87) (i/o-read-error? . aX2a72) (i/o-port-error? . aX2b2a) (i/o-invalid-position-error? . aX2aa0) (i/o-filename-error? . aX2abb) (i/o-file-protection-error? . aX2ad2) (i/o-file-is-read-only-error? . aX2ae7) (i/o-file-does-not-exist-error? . aX2b11) (i/o-file-already-exists-error? . aX2afc) (i/o-error? . aX2a5d) (i/o-error-position . aX2aa2) (i/o-error-port . aX2b2c) (i/o-error-filename . aX2abd) (i/o-encoding-error? . aX2b5a) (i/o-encoding-error-char . aX2b5c) (i/o-decoding-error? . aX2b41) (get-u8 . aX2ff0) (get-string-n! . aX2fef) (get-string-n . aX2fee) (get-string-all . aX2fed) (get-line . aX2fec) (get-datum . aX2feb) (get-char . aX2fea) (get-bytevector-some . aX2fe9) (get-bytevector-n! . aX2fe8) (get-bytevector-n . aX2fe7) (get-bytevector-all . aX2fe6) (flush-output-port . aX2fe5) (close-port . aX2fe4) (call-with-string-output-port . aX2fc3) (call-with-port . aX2fc2) (call-with-bytevector-output-port . aX2fc1) (bytevector->string . aX2fc0) (buffer-mode? . aX2fbf) (binary-port? . aX2fbe) (&i/o-encoding . aX2e5c) (&i/o-decoding . aX2e5b) (&i/o-port . aX2e5a) (&i/o-file-does-not-exist . aX2e59) (&i/o-file-already-exists . aX2e58) (&i/o-file-is-read-only . aX2e57) (&i/o-file-protection . aX2e56) (&i/o-filename . aX2e55) (&i/o-invalid-position . aX2e54) (&i/o-write . aX2e53) (&i/o-read . aX2e52) (&i/o . aX2e51) (error-handling-mode . aX2e36) (file-options . aX2e35) (buffer-mode . aX2e34) (eol-style . aX2e33)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX313e '(rnrs enums) '(6) '() '() '() '((make-enumeration . aX2fba) (enum-set=? . aX2fb9) (enum-set-universe . aX2fb8) (enum-set-union . aX2fb7) (enum-set-subset? . aX2fb6) (enum-set-projection . aX2fb5) (enum-set-member? . aX2fb4) (enum-set-intersection . aX2fb3) (enum-set-indexer . aX2fb2) (enum-set-difference . aX2fb1) (enum-set-constructor . aX2fb0) (enum-set-complement . aX2faf) (enum-set->list . aX2fae) (define-enumeration . aX2e41)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX313f '(rnrs conditions) '(6) '() '() '() '((who-condition? . aX29d1) (warning? . aX2949) (violation? . aX2988) (undefined-violation? . aX2a48) (syntax-violation? . aX2a2f) (syntax-violation-subform . aX2a33) (syntax-violation-form . aX2a31) (syntax-violation . aXe5b) (simple-conditions . aX2fad) (serious-condition? . aX295e) (non-continuable-violation? . aX29e8) (message-condition? . aX2932) (make-who-condition . aX29cd) (make-warning . aX2947) (make-violation . aX2986) (make-undefined-violation . aX2a46) (make-syntax-violation . aX2a29) (make-serious-condition . aX295c) (make-non-continuable-violation . aX29e6) (make-message-condition . aX292e) (make-lexical-violation . aX2a10) (make-irritants-condition . aX29b2) (make-implementation-restriction-violation . aX29fb) (make-error . aX2971) (make-assertion-violation . aX299b) (lexical-violation? . aX2a12) (irritants-condition? . aX29b6) (implementation-restriction-violation? . aX29fd) (error? . aX2973) (condition-who . aX29d3) (condition-predicate . aX2fac) (condition-message . aX2934) (condition-irritants . aX29b8) (condition-accessor . aX2fab) (condition . aX2faa) (assertion-violation? . aX299d) (condition? . aX2fa9) (&undefined . aX2e50) (&syntax . aX2e4f) (&lexical . aX2e4e) (&implementation-restriction . aX2e4d) (&non-continuable . aX2e4c) (&who . aX2e4b) (&irritants . aX2e4a) (&assertion . aX2e49) (&violation . aX2e48) (&error . aX2e47) (&serious . aX2e46) (&warning . aX2e45) (&message . aX2e44) (&condition . aX2e43) (define-condition-type . aX2e42)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3140 '(rnrs records inspection) '(6) '() '() '() '((record? . aX3056) (record-type-uid . aX3055) (record-type-sealed? . aX3054) (record-type-parent . aX3053) (record-type-opaque? . aX3052) (record-type-name . aX3051) (record-type-generative? . aX3050) (record-type-field-names . aX304f) (record-rtd . aX304e) (record-field-mutable? . aX304d)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3141 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . aX305d) (record-predicate . aX305c) (record-mutator . aX305b) (record-constructor . aX305a) (record-accessor . aX3059) (make-record-type-descriptor . aX3058) (make-record-constructor-descriptor . aX3057)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3142 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . aX2e40) (parent-rtd . aX2e3f) (nongenerative . aX2e3e) (opaque . aX2e3d) (sealed . aX2e3c) (protocol . aX2e3b) (parent . aX2e3a) (immutable . aX2e39) (mutable . aX2e38) (fields . aX2e37) (record-constructor-descriptor . aX2e17) (record-type-descriptor . aX2e16)) '() values values '#f '#f '#t '#f) (aX989@aX7d5@install-library 'aX3143 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . aX2b8a) (&no-nans-rtd . aX2b88) (&no-infinities-rcd . aX2b75) (&no-infinities-rtd . aX2b73) (&i/o-encoding-rcd . aX2b60) (&i/o-encoding-rtd . aX2b5e) (&i/o-decoding-rcd . aX2b45) (&i/o-decoding-rtd . aX2b43) (&i/o-port-rcd . aX2b30) (&i/o-port-rtd . aX2b2e) (&i/o-file-does-not-exist-rcd . aX2b15) (&i/o-file-does-not-exist-rtd . aX2b13) (&i/o-file-already-exists-rcd . aX2b00) (&i/o-file-already-exists-rtd . aX2afe) (&i/o-file-is-read-only-rcd . aX2aeb) (&i/o-file-is-read-only-rtd . aX2ae9) (&i/o-file-protection-rcd . aX2ad6) (&i/o-file-protection-rtd . aX2ad4) (&i/o-filename-rcd . aX2ac1) (&i/o-filename-rtd . aX2abf) (&i/o-invalid-position-rcd . aX2aa6) (&i/o-invalid-position-rtd . aX2aa4) (&i/o-write-rcd . aX2a8b) (&i/o-write-rtd . aX2a89) (&i/o-read-rcd . aX2a76) (&i/o-read-rtd . aX2a74) (&i/o-rcd . aX2a61) (&i/o-rtd . aX2a5f) (&undefined-rcd . aX2a4c) (&undefined-rtd . aX2a4a) (&syntax-rcd . aX2a37) (&syntax-rtd . aX2a35) (&lexical-rcd . aX2a16) (&lexical-rtd . aX2a14) (&implementation-restriction-rcd . aX2a01) (&implementation-restriction-rtd . aX29ff) (&non-continuable-rcd . aX29ec) (&non-continuable-rtd . aX29ea) (&who-rcd . aX29d7) (&who-rtd . aX29d5) (&irritants-rcd . aX29bc) (&irritants-rtd . aX29ba) (&assertion-rcd . aX29a1) (&assertion-rtd . aX299f) (&violation-rcd . aX298c) (&violation-rtd . aX298a) (&error-rcd . aX2977) (&error-rtd . aX2975) (&serious-rcd . aX2962) (&serious-rtd . aX2960) (&warning-rcd . aX294d) (&warning-rtd . aX294b) (&message-rcd . aX2938) (&message-rtd . aX2936) (&condition-rcd . aX28d9) (&condition-rtd . aX28d7) (syntax-error . aXe57) (syntax-dispatch . aXd7b) (pretty-print . aX3123) (eval-core . aX3122) (set-symbol-value! . aX3121) (symbol-value . aX3120) (gensym . aX311f) (void . aX311e) (load . aX2c9b) (interaction-environment . aXe69) (char-ready? . aX311d) (regexp? . aX311c) (read-line . aX311b) (gensym-prefix-set! . aX311a) (ungensym . aX3119) (alist->eq-hash-table . aX3118) (assoc-ref . aX3117) (print . aX3116) (format . aX3115) (host-os . aX3114) (library-path . aX7b4) (standard-library-path . aX3113) (file-newer? . aX3112) (stat-mtime . aX3111) (write-to-file . aX3110) (file->list . aX310f) (file->string . aX310e) (digit->integer . aX310d) (call-with-string-input-port . aX310c) (call-with-string-io . aX310b) (string-split . aX310a) (bytevector-for-each . aX3109) (string->regexp . aX3108) (rxmatch . aX3107) (regexp-replace-all . aX3106) (hashtable-for-each . aX3105) (mosh-cache-dir . aX59e) (call-process . aX3104) (local-tz-offset . aX3103) (microseconds . aX3102) (directory-list . aX3101) (set-current-directory! . aX3100) (expand-path . aX30ff) (current-directory . aX30fe) (%spawn . aX30fd) (%waitpid . aX30fc) (simple-struct-name . aX30fb) (simple-struct-set! . aX30fa) (simple-struct-ref . aX30f9) (make-simple-struct . aX30f8) (simple-struct? . aX30f7) (pointer-ref-c-int64 . aX30f6) (pointer-ref-c-int32 . aX30f5) (pointer-ref-c-int16 . aX30f4) (pointer-ref-c-int8 . aX30f3) (pointer-ref-c-uint64 . aX30f2) (pointer-ref-c-uint32 . aX30f1) (pointer-ref-c-uint16 . aX30f0) (pointer-ref-c-uint8 . aX30ef) (pointer-set-c-uint64! . aX30ee) (pointer-set-c-uint32! . aX30ed) (pointer-set-c-uint16! . aX30ec) (pointer-set-c-uint8! . aX30eb) (pointer-set-c-int64! . aX30ea) (pointer-set-c-int32! . aX30e9) (pointer-set-c-int16! . aX30e8) (pointer-set-c-int8! . aX30e7) (pointer-set-c-pointer! . aX30e6) (pointer-set-c-double! . aX30e5) (pointer-set-c-float! . aX30e4) (pointer-set-c-long-long! . aX30e3) (pointer-set-c-long! . aX30e2) (pointer-set-c-int! . aX30e1) (pointer-set-c-short! . aX30e0) (pointer-set-c-char! . aX30df) (pointer-ref-c-pointer . aX30de) (pointer-ref-c-double . aX30dd) (pointer-ref-c-float . aX30dc) (pointer-ref-c-unsigned-long-long . aX30db) (pointer-ref-c-signed-long-long . aX30da) (pointer-ref-c-unsigned-long . aX30d9) (pointer-ref-c-signed-long . aX30d8) (pointer-ref-c-unsigned-int . aX30d7) (pointer-ref-c-signed-int . aX30d6) (pointer-ref-c-unsigned-short . aX30d5) (pointer-ref-c-signed-short . aX30d4) (pointer-ref-c-unsigned-char . aX30d3) (pointer-ref-c-signed-char . aX30d2) (pointer->integer . aX30d1) (integer->pointer . aX30d0) (pointer? . aX30cf) (shared-errno . aX30ce) (%ffi-free-c-callback-trampoline . aX30cd) (%ffi-make-c-callback-trampoline . aX30cc) (%ffi-free . aX30cb) (%ffi-malloc . aX30ca) (%ffi-supported? . aX30c9) (%ffi-pointer->string . aX30c8) (%ffi-call . aX30c7) (%ffi-lookup . aX30c6) (%ffi-open . aX30c5) (null-terminated-utf8->string . aX30c4) (null-terminated-bytevector->string . aX30c3) (%fork . aX30c2) (%pipe . aX30c1) (p . aX30c0) (open-output-string . aX30bf) (get-output-string . aX30be) (file-stat-ctime . aX30bd) (file-stat-atime . aX30bc) (file-stat-mtime . aX30bb) (file-size-in-bytes . aX30ba) (file-writable? . aX30b9) (file-executable? . aX30b8) (file-readable? . aX30b7) (file-regular? . aX30b6) (file-symbolic-link? . aX30b5) (file-directory? . aX30b4) (create-symbolic-link . aX30b3) (rename-file . aX30b2) (delete-directory . aX30b1) (create-directory . aX30b0) (create-mosh-cache-dir . aX30af) (get-environment-variables . aX30ae) (current-exception-handler . aX30ad) (get-environment-variable . aX30ac) (join-wraps . aX30ab) (id->real-label . aX30aa) (same-marks? . aX30a9) (same-marks*? . aX30a8) (get-timeofday . aX30a7) (get-command-line . aX30a6) (sys-display . aX30a5) (whereis . aX30a4) (register . aX30a3) (vm-join! . aX30a2) (vm-set-value! . aX30a1) (vm? . aX30a0) (main-vm? . aX309f) (vm-eval . aX309e) (vm-self . aX309d) (vm-start! . aX309c) (make-vm . aX309b) (mutex-try-lock! . aX309a) (mutex-unlock! . aX3099) (mutex-lock! . aX3098) (mutex? . aX3097) (make-mutex . aX3096) (condition-variable-notify-all! . aX3095) (condition-variable-notify! . aX3094) (condition-variable-wait! . aX3093) (make-condition-variable . aX3092) (mosh-executable-path . aX3091) (make-file-options . aX3090) (source-info . aX308f) (make-compiler-instruction . aX308e) (make-instruction . aX308d) (set-source-info! . aX308c) (bignum? . aX308b) (fast-equal? . aX308a) (fasl-read . aX3089) (fasl-write . aX3088) (time-usage . aX3087) (os-constant . aX3086) (disasm . aX3085) (make-parameter . aX59c) (socket-port . aX3084) (socket-shutdown . aX3083) (socket-close . aX3082) (socket-send . aX3081) (socket-recv! . aX3080) (socket-recv . aX307f) (make-server-socket . aX307e) (make-client-socket . aX307d) (socket-accept . aX307c) (socket? . aX307b) (string-upcase . aX307a) (string-titlecase . aX3079) (string-normalize-nfkd . aX3078) (string-normalize-nfkc . aX3077) (string-normalize-nfd . aX3076) (string-normalize-nfc . aX3075) (string-foldcase . aX3074) (string-downcase . aX3073) (string-ci>? . aX3072) (string-ci>=? . aX3071) (string-ci=? . aX3070) (string-ci<? . aX306f) (string-ci<=? . aX306e) (char-whitespace? . aX306d) (char-upper-case? . aX306c) (char-title-case? . aX306b) (char-numeric? . aX306a) (char-lower-case? . aX3069) (char-general-category . aX3068) (char-upcase . aX3067) (char-titlecase . aX3066) (char-foldcase . aX3065) (char-downcase . aX3064) (char-ci>? . aX3063) (char-ci>=? . aX3062) (char-ci=? . aX3061) (char-ci<? . aX3060) (char-ci<=? . aX305f) (char-alphabetic? . aX305e) (make-variable-transformer . aXba6) (identifier? . aXe5d) (generate-temporaries . aXe49) (free-identifier=? . aXe4b) (syntax->datum . aXe61) (datum->syntax . aXe5f) (bound-identifier=? . aXe4d) (record-type-descriptor? . aX305d) (record-predicate . aX305c) (record-mutator . aX305b) (record-constructor . aX305a) (record-accessor . aX3059) (make-record-type-descriptor . aX3058) (make-record-constructor-descriptor . aX3057) (record? . aX3056) (record-type-uid . aX3055) (record-type-sealed? . aX3054) (record-type-parent . aX3053) (record-type-opaque? . aX3052) (record-type-name . aX3051) (record-type-generative? . aX3050) (record-type-field-names . aX304f) (record-rtd . aX304e) (record-field-mutable? . aX304d) (delete-file . aX304c) (file-exists? . aX304b) (vector-sort! . aX304a) (vector-sort . aX3049) (list-sort . aX3048) (symbol-hash . aX3047) (string-ci-hash . aX3046) (string-hash . aX3045) (equal-hash . aX3044) (hashtable-equivalence-function . aX3043) (make-hashtable . aX3042) (hashtable-hash-function . aX3041) (make-eqv-hashtable . aX3040) (make-eq-hashtable . aX303f) (hashtable? . aX303e) (hashtable-update! . aX303d) (hashtable-size . aX303c) (hashtable-set! . aX303b) (hashtable-ref . aX303a) (hashtable-mutable? . aX3039) (hashtable-keys . aX3038) (hashtable-entries . aX3037) (hashtable-delete! . aX3036) (hashtable-copy . aX3035) (hashtable-contains? . aX3034) (hashtable-clear! . aX3033) (call-with-output-file . aX3032) (call-with-input-file . aX3031) (write-char . aX3030) (write . aX302f) (with-output-to-file . aX302e) (with-input-from-file . aX302d) (read-char . aX302c) (read . aX302b) (peek-char . aX302a) (open-output-file . aX3029) (open-input-file . aX3028) (newline . aX3027) (display . aX3026) (close-output-port . aX3025) (close-input-port . aX3024) (eof-object? . aX3023) (eof-object . aX3022) (current-error-port . aX3021) (current-output-port . aX3020) (current-input-port . aX301f) (output-port? . aX301e) (input-port? . aX301d) (utf-8-codec . aX301c) (utf-16-codec . aX301b) (transcoder-error-handling-mode . aX301a) (transcoder-eol-style . aX3019) (transcoder-codec . aX3018) (transcoded-port . aX3017) (textual-port? . aX3016) (string->bytevector . aX3015) (standard-output-port . aX3014) (standard-input-port . aX3013) (standard-error-port . aX3012) (set-port-position! . aX3011) (put-u8 . aX3010) (put-string . aX300f) (put-datum . aX300e) (put-char . aX300d) (put-bytevector . aX300c) (port? . aX300b) (port-transcoder . aX300a) (port-position . aX3009) (port-has-set-port-position!? . aX3008) (port-has-port-position? . aX3007) (port-eof? . aX3006) (output-port-buffer-mode . aX3005) (open-string-output-port . aX3004) (open-string-input-port . aX3003) (open-file-output-port . aX3002) (open-file-input/output-port . aX3001) (open-file-input-port . aX3000) (open-bytevector-output-port . aX2fff) (open-bytevector-input-port . aX2ffe) (native-transcoder . aX2ffd) (native-eol-style . aX2ffc) (make-transcoder . aX2ffb) (latin-1-codec . aX2ffa) (make-i/o-write-error . aX2a85) (make-i/o-read-error . aX2a70) (make-i/o-port-error . aX2b26) (make-i/o-invalid-position-error . aX2a9c) (make-i/o-filename-error . aX2ab7) (make-i/o-file-protection-error . aX2ad0) (make-i/o-file-is-read-only-error . aX2ae5) (make-i/o-file-does-not-exist-error . aX2b0f) (make-i/o-file-already-exists-error . aX2afa) (make-i/o-error . aX2a5b) (make-i/o-encoding-error . aX2b56) (make-i/o-decoding-error . aX2b3f) (make-custom-textual-output-port . aX2ff9) (make-custom-textual-input/output-port . aX2ff8) (make-custom-textual-input-port . aX2ff7) (make-custom-binary-output-port . aX2ff6) (make-custom-binary-input/output-port . aX2ff5) (make-custom-binary-input-port . aX2ff4) (make-bytevector . aX2ff3) (lookahead-u8 . aX2ff2) (lookahead-char . aX2ff1) (i/o-write-error? . aX2a87) (i/o-read-error? . aX2a72) (i/o-port-error? . aX2b2a) (i/o-invalid-position-error? . aX2aa0) (i/o-filename-error? . aX2abb) (i/o-file-protection-error? . aX2ad2) (i/o-file-is-read-only-error? . aX2ae7) (i/o-file-does-not-exist-error? . aX2b11) (i/o-file-already-exists-error? . aX2afc) (i/o-error? . aX2a5d) (i/o-error-position . aX2aa2) (i/o-error-port . aX2b2c) (i/o-error-filename . aX2abd) (i/o-encoding-error? . aX2b5a) (i/o-encoding-error-char . aX2b5c) (i/o-decoding-error? . aX2b41) (get-u8 . aX2ff0) (get-string-n! . aX2fef) (get-string-n . aX2fee) (get-string-all . aX2fed) (get-line . aX2fec) (get-datum . aX2feb) (get-char . aX2fea) (get-bytevector-some . aX2fe9) (get-bytevector-n! . aX2fe8) (get-bytevector-n . aX2fe7) (get-bytevector-all . aX2fe6) (flush-output-port . aX2fe5) (close-port . aX2fe4) (scheme-report-environment . aXe37) (quotient . aX2fe3) (null-environment . aXe35) (remainder . aX2fe2) (modulo . aX2fe1) (inexact->exact . aX2fe0) (force . aX2fdf) (exact->inexact . aX2fde) (make-promise . aX2fdd) (exit . aX2fdc) (command-line . aX2c95) (string-fill! . aX2fdb) (string-set! . aX2fda) (set-cdr! . aX2fd9) (set-car! . aX2fd8) (remove . aX2fd7) (remv . aX2fd6) (remp . aX2fd5) (remq . aX2fd4) (partition . aX2fd3) (memv . aX2fd2) (memq . aX2fd1) (memp . aX2fd0) (member . aX2fcf) (exists . aX2fce) (for-all . aX2fcd) (fold-right . aX2fcc) (fold-left . aX2fcb) (find . aX2fca) (filter . aX2fc9) (cons* . aX2fc8) (assv . aX2fc7) (assq . aX2fc6) (assp . aX2fc5) (assoc . aX2fc4) (call-with-string-output-port . aX2fc3) (call-with-port . aX2fc2) (call-with-bytevector-output-port . aX2fc1) (bytevector->string . aX2fc0) (buffer-mode? . aX2fbf) (binary-port? . aX2fbe) (with-exception-handler . aX2fbd) (raise-continuable . aX2fbc) (raise . aX2fbb) (eval . aXe3b) (environment . aXe33) (make-enumeration . aX2fba) (enum-set=? . aX2fb9) (enum-set-universe . aX2fb8) (enum-set-union . aX2fb7) (enum-set-subset? . aX2fb6) (enum-set-projection . aX2fb5) (enum-set-member? . aX2fb4) (enum-set-intersection . aX2fb3) (enum-set-indexer . aX2fb2) (enum-set-difference . aX2fb1) (enum-set-constructor . aX2fb0) (enum-set-complement . aX2faf) (enum-set->list . aX2fae) (who-condition? . aX29d1) (warning? . aX2949) (violation? . aX2988) (undefined-violation? . aX2a48) (syntax-violation? . aX2a2f) (syntax-violation-subform . aX2a33) (syntax-violation-form . aX2a31) (syntax-violation . aXe5b) (simple-conditions . aX2fad) (serious-condition? . aX295e) (non-continuable-violation? . aX29e8) (message-condition? . aX2932) (make-who-condition . aX29cd) (make-warning . aX2947) (make-violation . aX2986) (make-undefined-violation . aX2a46) (make-syntax-violation . aX2a29) (make-serious-condition . aX295c) (make-non-continuable-violation . aX29e6) (make-message-condition . aX292e) (make-lexical-violation . aX2a10) (make-irritants-condition . aX29b2) (make-implementation-restriction-violation . aX29fb) (make-error . aX2971) (make-assertion-violation . aX299b) (lexical-violation? . aX2a12) (irritants-condition? . aX29b6) (implementation-restriction-violation? . aX29fd) (error? . aX2973) (condition-who . aX29d3) (condition-predicate . aX2fac) (condition-message . aX2934) (condition-irritants . aX29b8) (condition-accessor . aX2fab) (condition . aX2faa) (assertion-violation? . aX299d) (condition? . aX2fa9) (utf32->string . aX2fa8) (utf16->string . aX2fa7) (utf8->string . aX2fa6) (uint-list->bytevector . aX2fa5) (u8-list->bytevector . aX2fa4) (string->utf8 . aX2fa3) (string->utf32 . aX2fa2) (string->utf16 . aX2fa1) (sint-list->bytevector . aX2fa0) (native-endianness . aX2f9f) (bytevector? . aX2f9e) (bytevector=? . aX2f9d) (bytevector-uint-set! . aX2f9c) (bytevector-uint-ref . aX2f9b) (bytevector-u8-set! . aX2f9a) (bytevector-u8-ref . aX2f99) (bytevector-u64-set! . aX2f98) (bytevector-u64-ref . aX2f97) (bytevector-u64-native-set! . aX2f96) (bytevector-u64-native-ref . aX2f95) (bytevector-u32-set! . aX2f94) (bytevector-u32-ref . aX2f93) (bytevector-u32-native-set! . aX2f92) (bytevector-u32-native-ref . aX2f91) (bytevector-u16-set! . aX2f90) (bytevector-u16-ref . aX2f8f) (bytevector-u16-native-set! . aX2f8e) (bytevector-u16-native-ref . aX2f8d) (bytevector-sint-set! . aX2f8c) (bytevector-sint-ref . aX2f8b) (bytevector-s8-set! . aX2f8a) (bytevector-s8-ref . aX2f89) (bytevector-s64-set! . aX2f88) (bytevector-s64-ref . aX2f87) (bytevector-s64-native-set! . aX2f86) (bytevector-s64-native-ref . aX2f85) (bytevector-s32-set! . aX2f84) (bytevector-s32-ref . aX2f83) (bytevector-s32-native-set! . aX2f82) (bytevector-s32-native-ref . aX2f81) (bytevector-s16-set! . aX2f80) (bytevector-s16-ref . aX2f7f) (bytevector-s16-native-set! . aX2f7e) (bytevector-s16-native-ref . aX2f7d) (bytevector-length . aX2f7c) (bytevector-ieee-single-ref . aX2f7b) (bytevector-ieee-single-set! . aX2f7a) (bytevector-ieee-single-native-set! . aX2f79) (bytevector-ieee-single-native-ref . aX2f78) (bytevector-ieee-double-set! . aX2f77) (bytevector-ieee-double-ref . aX2f76) (bytevector-ieee-double-native-set! . aX2f75) (bytevector-ieee-double-native-ref . aX2f74) (bytevector-fill! . aX2f73) (bytevector-copy! . aX2f72) (bytevector-copy . aX2f71) (bytevector->uint-list . aX2f70) (bytevector->u8-list . aX2f6f) (bytevector->sint-list . aX2f6e) (no-nans-violation? . aX2b86) (no-infinities-violation? . aX2b71) (make-no-nans-violation . aX2b84) (make-no-infinities-violation . aX2b6f) (real->flonum . aX2f6d) (flzero? . aX2f6c) (fltruncate . aX2f6b) (fltan . aX2f6a) (flsqrt . aX2f69) (flsin . aX2f68) (flround . aX2f67) (flpositive? . aX2f66) (flonum? . aX2f65) (flodd? . aX2f64) (flnumerator . aX2f63) (flnegative? . aX2f62) (flnan? . aX2f61) (flmod0 . aX2f60) (flmod . aX2f5f) (flmin . aX2f5e) (flmax . aX2f5d) (fllog . aX2f5c) (flinteger? . aX2f5b) (flinfinite? . aX2f5a) (flfloor . aX2f59) (flfinite? . aX2f58) (flexpt . aX2f57) (flexp . aX2f56) (fleven? . aX2f55) (fldiv0-and-mod0 . aX2f54) (fldiv0 . aX2f53) (fldiv-and-mod . aX2f52) (fldiv . aX2f51) (fldenominator . aX2f50) (flcos . aX2f4f) (flceiling . aX2f4e) (flatan . aX2f4d) (flasin . aX2f4c) (flacos . aX2f4b) (flabs . aX2f4a) (fl>? . aX2f49) (fl>=? . aX2f48) (fl=? . aX2f47) (fl<? . aX2f46) (fl<=? . aX2f45) (fl/ . aX2f44) (fl- . aX2f43) (fl+ . aX2f42) (fl* . aX2f41) (fixnum->flonum . aX2f40) (fxzero? . aX2f3f) (fxxor . aX2f3e) (fxrotate-bit-field . aX2f3d) (fxreverse-bit-field . aX2f3c) (fxpositive? . aX2f3b) (fxodd? . aX2f3a) (fxnot . aX2f39) (fxnegative? . aX2f38) (fxmod0 . aX2f37) (fxmod . aX2f36) (fxmin . aX2f35) (fxmax . aX2f34) (fxlength . aX2f33) (fxior . aX2f32) (fxif . aX2f31) (fxfirst-bit-set . aX2f30) (fxeven? . aX2f2f) (fxdiv0-and-mod0 . aX2f2e) (fxdiv0 . aX2f2d) (fxdiv-and-mod . aX2f2c) (fxdiv . aX2f2b) (fxcopy-bit-field . aX2f2a) (fxcopy-bit . aX2f29) (fxbit-set? . aX2f28) (fxbit-field . aX2f27) (fxbit-count . aX2f26) (fxarithmetic-shift-right . aX2f25) (fxarithmetic-shift-left . aX2f24) (fxarithmetic-shift . aX2f23) (fxand . aX2f22) (fx>? . aX2f21) (fx>=? . aX2f20) (fx=? . aX2f1f) (fx<? . aX2f1e) (fx<=? . aX2f1d) (fx-/carry . aX2f1c) (fx- . aX2f1b) (fx+/carry . aX2f1a) (fx+ . aX2f19) (fx*/carry . aX2f18) (fx* . aX2f17) (greatest-fixnum . aX2f16) (least-fixnum . aX2f15) (fixnum-width . aX2f14) (fixnum? . aX2f13) (bitwise-rotate-bit-field . aX2f12) (bitwise-reverse-bit-field . aX2f11) (bitwise-length . aX2f10) (bitwise-if . aX2f0f) (bitwise-first-bit-set . aX2f0e) (bitwise-copy-bit-field . aX2f0d) (bitwise-copy-bit . aX2f0c) (bitwise-bit-set? . aX2f0b) (bitwise-bit-field . aX2f0a) (bitwise-bit-count . aX2f09) (bitwise-xor . aX2f08) (bitwise-ior . aX2f07) (bitwise-and . aX2f06) (bitwise-not . aX2f05) (bitwise-arithmetic-shift-right . aX2f04) (bitwise-arithmetic-shift-left . aX2f03) (bitwise-arithmetic-shift . aX2f02) (zero? . aX2f01) (vector? . aX2f00) (vector-set! . aX2eff) (vector-ref . aX2efe) (vector-map . aX2efd) (vector-length . aX2efc) (vector-for-each . aX2efb) (vector-fill! . aX2efa) (vector->list . aX2ef9) (vector . aX2ef8) (values . aX2ef7) (truncate . aX2ef6) (tan . aX2ef5) (symbol? . aX2ef4) (symbol=? . aX2ef3) (symbol->string . aX2ef2) (substring . aX2ef1) (string? . aX2ef0) (string>? . aX2eef) (string>=? . aX2eee) (string=? . aX2eed) (string<? . aX2eec) (string<=? . aX2eeb) (string-ref . aX2eea) (string-length . aX2ee9) (string-for-each . aX2ee8) (string-copy . aX2ee7) (string-append . aX2ee6) (string->symbol . aX2ee5) (string->number . aX2ee4) (string->list . aX2ee3) (string . aX2ee2) (sqrt . aX2ee1) (sin . aX2ee0) (round . aX2edf) (reverse . aX2ede) (real? . aX2edd) (real-valued? . aX2edc) (real-part . aX2edb) (rationalize . aX2eda) (rational? . aX2ed9) (rational-valued? . aX2ed8) (procedure? . aX2ed7) (positive? . aX2ed6) (pair? . aX2ed5) (odd? . aX2ed4) (numerator . aX2ed3) (number? . aX2ed2) (number->string . aX2ed1) (null? . aX2ed0) (not . aX2ecf) (negative? . aX2ece) (nan? . aX2ecd) (min . aX2ecc) (max . aX2ecb) (map . aX2eca) (make-vector . aX2ec9) (make-string . aX2ec8) (make-rectangular . aX2ec7) (make-polar . aX2ec6) (magnitude . aX2ec5) (log . aX2ec4) (list? . aX2ec3) (list-tail . aX2ec2) (list-ref . aX2ec1) (list->vector . aX2ec0) (list->string . aX2ebf) (list . aX2ebe) (length . aX2ebd) (lcm . aX2ebc) (integer? . aX2ebb) (integer-valued? . aX2eba) (integer->char . aX2eb9) (infinite? . aX2eb8) (inexact? . aX2eb7) (inexact . aX2eb6) (imag-part . aX2eb5) (gcd . aX2eb4) (for-each . aX2eb3) (floor . aX2eb2) (finite? . aX2eb1) (expt . aX2eb0) (exp . aX2eaf) (exact? . aX2eae) (exact-integer-sqrt . aX2ead) (exact . aX2eac) (even? . aX2eab) (error . aX2eaa) (eqv? . aX2ea9) (equal? . aX2ea8) (eq? . aX2ea7) (dynamic-wind . aX2ea6) (div0-and-mod0 . aX2ea5) (mod0 . aX2ea4) (div0 . aX2ea3) (div-and-mod . aX2ea2) (mod . aX2ea1) (div . aX2ea0) (denominator . aX2e9f) (cos . aX2e9e) (cons . aX2e9d) (complex? . aX2e9c) (char? . aX2e9b) (char>? . aX2e9a) (char>=? . aX2e99) (char=? . aX2e98) (char<? . aX2e97) (char<=? . aX2e96) (char->integer . aX2e95) (ceiling . aX2e94) (call-with-values . aX2e93) (call/cc . aX2e92) (call-with-current-continuation . aX2e91) (cddddr . aX2e90) (cdddar . aX2e8f) (cddadr . aX2e8e) (cddaar . aX2e8d) (cdaddr . aX2e8c) (cdadar . aX2e8b) (cdaadr . aX2e8a) (cdaaar . aX2e89) (cadddr . aX2e88) (caddar . aX2e87) (cadadr . aX2e86) (cadaar . aX2e85) (caaddr . aX2e84) (caadar . aX2e83) (caaadr . aX2e82) (caaaar . aX2e81) (cdddr . aX2e80) (cddar . aX2e7f) (cdadr . aX2e7e) (cdaar . aX2e7d) (caddr . aX2e7c) (cadar . aX2e7b) (caadr . aX2e7a) (caaar . aX2e79) (cddr . aX2e78) (cdar . aX2e77) (cadr . aX2e76) (caar . aX2e75) (cdr . aX2e74) (car . aX2e73) (boolean? . aX2e72) (boolean=? . aX2e71) (atan . aX2e70) (assertion-violation . aX2e6f) (assertion-error . aXe55) (asin . aX2e6e) (apply . aX2e6d) (append . aX2e6c) (angle . aX2e6b) (acos . aX2e6a) (abs . aX2e69) (/ . aX2e68) (* . aX2e67) (- . aX2e66) (+ . aX2e65) (>= . aX2e64) (> . aX2e63) (= . aX2e62) (<= . aX2e61) (< . aX2e60) (library . aX2e5f) (&no-nans . aX2e5e) (&no-infinities . aX2e5d) (&i/o-encoding . aX2e5c) (&i/o-decoding . aX2e5b) (&i/o-port . aX2e5a) (&i/o-file-does-not-exist . aX2e59) (&i/o-file-already-exists . aX2e58) (&i/o-file-is-read-only . aX2e57) (&i/o-file-protection . aX2e56) (&i/o-filename . aX2e55) (&i/o-invalid-position . aX2e54) (&i/o-write . aX2e53) (&i/o-read . aX2e52) (&i/o . aX2e51) (&undefined . aX2e50) (&syntax . aX2e4f) (&lexical . aX2e4e) (&implementation-restriction . aX2e4d) (&non-continuable . aX2e4c) (&who . aX2e4b) (&irritants . aX2e4a) (&assertion . aX2e49) (&violation . aX2e48) (&error . aX2e47) (&serious . aX2e46) (&warning . aX2e45) (&message . aX2e44) (&condition . aX2e43) (define-condition-type . aX2e42) (define-enumeration . aX2e41) (define-record-type . aX2e40) (parent-rtd . aX2e3f) (nongenerative . aX2e3e) (opaque . aX2e3d) (sealed . aX2e3c) (protocol . aX2e3b) (parent . aX2e3a) (immutable . aX2e39) (mutable . aX2e38) (fields . aX2e37) (error-handling-mode . aX2e36) (file-options . aX2e35) (buffer-mode . aX2e34) (eol-style . aX2e33) (guard . aX2e32) (trace-define . aX2e31) (trace-lambda . aX2e30) (unsyntax-splicing . aX2e2f) (unsyntax . aX2e2e) (unquote-splicing . aX2e2d) (unquote . aX2e2c) (_ . aX2e2b) (else . aX2e2a) (=> . aX2e29) (... . aX2e28) (assert . aX2e27) (endianness . aX2e26) (delay . aX2e25) (time . aX2e24) (do . aX2e23) (cond . aX2e22) (let* . aX2e21) (let*-values . aX2e20) (let-values . aX2e1f) (identifier-syntax . aX2e1e) (with-syntax . aX2e1d) (quasisyntax . aX2e1c) (quasiquote . aX2e1b) (syntax-rules . aX2e1a) (include . aX2e19) (define-struct . aX2e18) (record-constructor-descriptor . aX2e17) (record-type-descriptor . aX2e16) (case . aX2e15) (parameterize . aX2e14) (unless . aX2e13) (when . aX2e12) (or . aX2e11) (and . aX2e10) (if . aX2e0f) (let . aX2e0e) (letrec* . aX2e0d) (letrec . aX2e0c) (type-descriptor . aX2e0b) (case-lambda . aX2e0a) (lambda . aX2e09) (syntax . aX2e08) (syntax-case . aX2e07) (quote . aX2e06) (foreign-call . aX2e05) (letrec-syntax . aX2e04) (let-syntax . aX2e03) (set! . aX2e02) (import . aX2e01) (begin . aX2e00) (module . aX2dff) (define-syntax . aX2dfe) (define . aX2dfd)) '((aX2b8a core-prim . &no-nans-rcd) (aX2b88 core-prim . &no-nans-rtd) (aX2b75 core-prim . &no-infinities-rcd) (aX2b73 core-prim . &no-infinities-rtd) (aX2b60 core-prim . &i/o-encoding-rcd) (aX2b5e core-prim . &i/o-encoding-rtd) (aX2b45 core-prim . &i/o-decoding-rcd) (aX2b43 core-prim . &i/o-decoding-rtd) (aX2b30 core-prim . &i/o-port-rcd) (aX2b2e core-prim . &i/o-port-rtd) (aX2b15 core-prim . &i/o-file-does-not-exist-rcd) (aX2b13 core-prim . &i/o-file-does-not-exist-rtd) (aX2b00 core-prim . &i/o-file-already-exists-rcd) (aX2afe core-prim . &i/o-file-already-exists-rtd) (aX2aeb core-prim . &i/o-file-is-read-only-rcd) (aX2ae9 core-prim . &i/o-file-is-read-only-rtd) (aX2ad6 core-prim . &i/o-file-protection-rcd) (aX2ad4 core-prim . &i/o-file-protection-rtd) (aX2ac1 core-prim . &i/o-filename-rcd) (aX2abf core-prim . &i/o-filename-rtd) (aX2aa6 core-prim . &i/o-invalid-position-rcd) (aX2aa4 core-prim . &i/o-invalid-position-rtd) (aX2a8b core-prim . &i/o-write-rcd) (aX2a89 core-prim . &i/o-write-rtd) (aX2a76 core-prim . &i/o-read-rcd) (aX2a74 core-prim . &i/o-read-rtd) (aX2a61 core-prim . &i/o-rcd) (aX2a5f core-prim . &i/o-rtd) (aX2a4c core-prim . &undefined-rcd) (aX2a4a core-prim . &undefined-rtd) (aX2a37 core-prim . &syntax-rcd) (aX2a35 core-prim . &syntax-rtd) (aX2a16 core-prim . &lexical-rcd) (aX2a14 core-prim . &lexical-rtd) (aX2a01 core-prim . &implementation-restriction-rcd) (aX29ff core-prim . &implementation-restriction-rtd) (aX29ec core-prim . &non-continuable-rcd) (aX29ea core-prim . &non-continuable-rtd) (aX29d7 core-prim . &who-rcd) (aX29d5 core-prim . &who-rtd) (aX29bc core-prim . &irritants-rcd) (aX29ba core-prim . &irritants-rtd) (aX29a1 core-prim . &assertion-rcd) (aX299f core-prim . &assertion-rtd) (aX298c core-prim . &violation-rcd) (aX298a core-prim . &violation-rtd) (aX2977 core-prim . &error-rcd) (aX2975 core-prim . &error-rtd) (aX2962 core-prim . &serious-rcd) (aX2960 core-prim . &serious-rtd) (aX294d core-prim . &warning-rcd) (aX294b core-prim . &warning-rtd) (aX2938 core-prim . &message-rcd) (aX2936 core-prim . &message-rtd) (aX28d9 core-prim . &condition-rcd) (aX28d7 core-prim . &condition-rtd) (aXe57 core-prim . syntax-error) (aXd7b core-prim . syntax-dispatch) (aX3123 core-prim . pretty-print) (aX3122 core-prim . eval-core) (aX3121 core-prim . set-symbol-value!) (aX3120 core-prim . symbol-value) (aX311f core-prim . gensym) (aX311e core-prim . void) (aX2c9b core-prim . load) (aXe69 core-prim . interaction-environment) (aX311d core-prim . char-ready?) (aX311c core-prim . regexp?) (aX311b core-prim . read-line) (aX311a core-prim . gensym-prefix-set!) (aX3119 core-prim . ungensym) (aX3118 core-prim . alist->eq-hash-table) (aX3117 core-prim . assoc-ref) (aX3116 core-prim . print) (aX3115 core-prim . format) (aX3114 core-prim . host-os) (aX7b4 core-prim . library-path) (aX3113 core-prim . standard-library-path) (aX3112 core-prim . file-newer?) (aX3111 core-prim . stat-mtime) (aX3110 core-prim . write-to-file) (aX310f core-prim . file->list) (aX310e core-prim . file->string) (aX310d core-prim . digit->integer) (aX310c core-prim . call-with-string-input-port) (aX310b core-prim . call-with-string-io) (aX310a core-prim . string-split) (aX3109 core-prim . bytevector-for-each) (aX3108 core-prim . string->regexp) (aX3107 core-prim . rxmatch) (aX3106 core-prim . regexp-replace-all) (aX3105 core-prim . hashtable-for-each) (aX59e core-prim . mosh-cache-dir) (aX3104 core-prim . call-process) (aX3103 core-prim . local-tz-offset) (aX3102 core-prim . microseconds) (aX3101 core-prim . directory-list) (aX3100 core-prim . set-current-directory!) (aX30ff core-prim . expand-path) (aX30fe core-prim . current-directory) (aX30fd core-prim . %spawn) (aX30fc core-prim . %waitpid) (aX30fb core-prim . simple-struct-name) (aX30fa core-prim . simple-struct-set!) (aX30f9 core-prim . simple-struct-ref) (aX30f8 core-prim . make-simple-struct) (aX30f7 core-prim . simple-struct?) (aX30f6 core-prim . pointer-ref-c-int64) (aX30f5 core-prim . pointer-ref-c-int32) (aX30f4 core-prim . pointer-ref-c-int16) (aX30f3 core-prim . pointer-ref-c-int8) (aX30f2 core-prim . pointer-ref-c-uint64) (aX30f1 core-prim . pointer-ref-c-uint32) (aX30f0 core-prim . pointer-ref-c-uint16) (aX30ef core-prim . pointer-ref-c-uint8) (aX30ee core-prim . pointer-set-c-uint64!) (aX30ed core-prim . pointer-set-c-uint32!) (aX30ec core-prim . pointer-set-c-uint16!) (aX30eb core-prim . pointer-set-c-uint8!) (aX30ea core-prim . pointer-set-c-int64!) (aX30e9 core-prim . pointer-set-c-int32!) (aX30e8 core-prim . pointer-set-c-int16!) (aX30e7 core-prim . pointer-set-c-int8!) (aX30e6 core-prim . pointer-set-c-pointer!) (aX30e5 core-prim . pointer-set-c-double!) (aX30e4 core-prim . pointer-set-c-float!) (aX30e3 core-prim . pointer-set-c-long-long!) (aX30e2 core-prim . pointer-set-c-long!) (aX30e1 core-prim . pointer-set-c-int!) (aX30e0 core-prim . pointer-set-c-short!) (aX30df core-prim . pointer-set-c-char!) (aX30de core-prim . pointer-ref-c-pointer) (aX30dd core-prim . pointer-ref-c-double) (aX30dc core-prim . pointer-ref-c-float) (aX30db core-prim . pointer-ref-c-unsigned-long-long) (aX30da core-prim . pointer-ref-c-signed-long-long) (aX30d9 core-prim . pointer-ref-c-unsigned-long) (aX30d8 core-prim . pointer-ref-c-signed-long) (aX30d7 core-prim . pointer-ref-c-unsigned-int) (aX30d6 core-prim . pointer-ref-c-signed-int) (aX30d5 core-prim . pointer-ref-c-unsigned-short) (aX30d4 core-prim . pointer-ref-c-signed-short) (aX30d3 core-prim . pointer-ref-c-unsigned-char) (aX30d2 core-prim . pointer-ref-c-signed-char) (aX30d1 core-prim . pointer->integer) (aX30d0 core-prim . integer->pointer) (aX30cf core-prim . pointer?) (aX30ce core-prim . shared-errno) (aX30cd core-prim . %ffi-free-c-callback-trampoline) (aX30cc core-prim . %ffi-make-c-callback-trampoline) (aX30cb core-prim . %ffi-free) (aX30ca core-prim . %ffi-malloc) (aX30c9 core-prim . %ffi-supported?) (aX30c8 core-prim . %ffi-pointer->string) (aX30c7 core-prim . %ffi-call) (aX30c6 core-prim . %ffi-lookup) (aX30c5 core-prim . %ffi-open) (aX30c4 core-prim . null-terminated-utf8->string) (aX30c3 core-prim . null-terminated-bytevector->string) (aX30c2 core-prim . %fork) (aX30c1 core-prim . %pipe) (aX30c0 core-prim . p) (aX30bf core-prim . open-output-string) (aX30be core-prim . get-output-string) (aX30bd core-prim . file-stat-ctime) (aX30bc core-prim . file-stat-atime) (aX30bb core-prim . file-stat-mtime) (aX30ba core-prim . file-size-in-bytes) (aX30b9 core-prim . file-writable?) (aX30b8 core-prim . file-executable?) (aX30b7 core-prim . file-readable?) (aX30b6 core-prim . file-regular?) (aX30b5 core-prim . file-symbolic-link?) (aX30b4 core-prim . file-directory?) (aX30b3 core-prim . create-symbolic-link) (aX30b2 core-prim . rename-file) (aX30b1 core-prim . delete-directory) (aX30b0 core-prim . create-directory) (aX30af core-prim . create-mosh-cache-dir) (aX30ae core-prim . get-environment-variables) (aX30ad core-prim . current-exception-handler) (aX30ac core-prim . get-environment-variable) (aX30ab core-prim . join-wraps) (aX30aa core-prim . id->real-label) (aX30a9 core-prim . same-marks?) (aX30a8 core-prim . same-marks*?) (aX30a7 core-prim . get-timeofday) (aX30a6 core-prim . get-command-line) (aX30a5 core-prim . sys-display) (aX30a4 core-prim . whereis) (aX30a3 core-prim . register) (aX30a2 core-prim . vm-join!) (aX30a1 core-prim . vm-set-value!) (aX30a0 core-prim . vm?) (aX309f core-prim . main-vm?) (aX309e core-prim . vm-eval) (aX309d core-prim . vm-self) (aX309c core-prim . vm-start!) (aX309b core-prim . make-vm) (aX309a core-prim . mutex-try-lock!) (aX3099 core-prim . mutex-unlock!) (aX3098 core-prim . mutex-lock!) (aX3097 core-prim . mutex?) (aX3096 core-prim . make-mutex) (aX3095 core-prim . condition-variable-notify-all!) (aX3094 core-prim . condition-variable-notify!) (aX3093 core-prim . condition-variable-wait!) (aX3092 core-prim . make-condition-variable) (aX3091 core-prim . mosh-executable-path) (aX3090 core-prim . make-file-options) (aX308f core-prim . source-info) (aX308e core-prim . make-compiler-instruction) (aX308d core-prim . make-instruction) (aX308c core-prim . set-source-info!) (aX308b core-prim . bignum?) (aX308a core-prim . fast-equal?) (aX3089 core-prim . fasl-read) (aX3088 core-prim . fasl-write) (aX3087 core-prim . time-usage) (aX3086 core-prim . os-constant) (aX3085 core-prim . disasm) (aX59c core-prim . make-parameter) (aX3084 core-prim . socket-port) (aX3083 core-prim . socket-shutdown) (aX3082 core-prim . socket-close) (aX3081 core-prim . socket-send) (aX3080 core-prim . socket-recv!) (aX307f core-prim . socket-recv) (aX307e core-prim . make-server-socket) (aX307d core-prim . make-client-socket) (aX307c core-prim . socket-accept) (aX307b core-prim . socket?) (aX307a core-prim . string-upcase) (aX3079 core-prim . string-titlecase) (aX3078 core-prim . string-normalize-nfkd) (aX3077 core-prim . string-normalize-nfkc) (aX3076 core-prim . string-normalize-nfd) (aX3075 core-prim . string-normalize-nfc) (aX3074 core-prim . string-foldcase) (aX3073 core-prim . string-downcase) (aX3072 core-prim . string-ci>?) (aX3071 core-prim . string-ci>=?) (aX3070 core-prim . string-ci=?) (aX306f core-prim . string-ci<?) (aX306e core-prim . string-ci<=?) (aX306d core-prim . char-whitespace?) (aX306c core-prim . char-upper-case?) (aX306b core-prim . char-title-case?) (aX306a core-prim . char-numeric?) (aX3069 core-prim . char-lower-case?) (aX3068 core-prim . char-general-category) (aX3067 core-prim . char-upcase) (aX3066 core-prim . char-titlecase) (aX3065 core-prim . char-foldcase) (aX3064 core-prim . char-downcase) (aX3063 core-prim . char-ci>?) (aX3062 core-prim . char-ci>=?) (aX3061 core-prim . char-ci=?) (aX3060 core-prim . char-ci<?) (aX305f core-prim . char-ci<=?) (aX305e core-prim . char-alphabetic?) (aXba6 core-prim . make-variable-transformer) (aXe5d core-prim . identifier?) (aXe49 core-prim . generate-temporaries) (aXe4b core-prim . free-identifier=?) (aXe61 core-prim . syntax->datum) (aXe5f core-prim . datum->syntax) (aXe4d core-prim . bound-identifier=?) (aX305d core-prim . record-type-descriptor?) (aX305c core-prim . record-predicate) (aX305b core-prim . record-mutator) (aX305a core-prim . record-constructor) (aX3059 core-prim . record-accessor) (aX3058 core-prim . make-record-type-descriptor) (aX3057 core-prim . make-record-constructor-descriptor) (aX3056 core-prim . record?) (aX3055 core-prim . record-type-uid) (aX3054 core-prim . record-type-sealed?) (aX3053 core-prim . record-type-parent) (aX3052 core-prim . record-type-opaque?) (aX3051 core-prim . record-type-name) (aX3050 core-prim . record-type-generative?) (aX304f core-prim . record-type-field-names) (aX304e core-prim . record-rtd) (aX304d core-prim . record-field-mutable?) (aX304c core-prim . delete-file) (aX304b core-prim . file-exists?) (aX304a core-prim . vector-sort!) (aX3049 core-prim . vector-sort) (aX3048 core-prim . list-sort) (aX3047 core-prim . symbol-hash) (aX3046 core-prim . string-ci-hash) (aX3045 core-prim . string-hash) (aX3044 core-prim . equal-hash) (aX3043 core-prim . hashtable-equivalence-function) (aX3042 core-prim . make-hashtable) (aX3041 core-prim . hashtable-hash-function) (aX3040 core-prim . make-eqv-hashtable) (aX303f core-prim . make-eq-hashtable) (aX303e core-prim . hashtable?) (aX303d core-prim . hashtable-update!) (aX303c core-prim . hashtable-size) (aX303b core-prim . hashtable-set!) (aX303a core-prim . hashtable-ref) (aX3039 core-prim . hashtable-mutable?) (aX3038 core-prim . hashtable-keys) (aX3037 core-prim . hashtable-entries) (aX3036 core-prim . hashtable-delete!) (aX3035 core-prim . hashtable-copy) (aX3034 core-prim . hashtable-contains?) (aX3033 core-prim . hashtable-clear!) (aX3032 core-prim . call-with-output-file) (aX3031 core-prim . call-with-input-file) (aX3030 core-prim . write-char) (aX302f core-prim . write) (aX302e core-prim . with-output-to-file) (aX302d core-prim . with-input-from-file) (aX302c core-prim . read-char) (aX302b core-prim . read) (aX302a core-prim . peek-char) (aX3029 core-prim . open-output-file) (aX3028 core-prim . open-input-file) (aX3027 core-prim . newline) (aX3026 core-prim . display) (aX3025 core-prim . close-output-port) (aX3024 core-prim . close-input-port) (aX3023 core-prim . eof-object?) (aX3022 core-prim . eof-object) (aX3021 core-prim . current-error-port) (aX3020 core-prim . current-output-port) (aX301f core-prim . current-input-port) (aX301e core-prim . output-port?) (aX301d core-prim . input-port?) (aX301c core-prim . utf-8-codec) (aX301b core-prim . utf-16-codec) (aX301a core-prim . transcoder-error-handling-mode) (aX3019 core-prim . transcoder-eol-style) (aX3018 core-prim . transcoder-codec) (aX3017 core-prim . transcoded-port) (aX3016 core-prim . textual-port?) (aX3015 core-prim . string->bytevector) (aX3014 core-prim . standard-output-port) (aX3013 core-prim . standard-input-port) (aX3012 core-prim . standard-error-port) (aX3011 core-prim . set-port-position!) (aX3010 core-prim . put-u8) (aX300f core-prim . put-string) (aX300e core-prim . put-datum) (aX300d core-prim . put-char) (aX300c core-prim . put-bytevector) (aX300b core-prim . port?) (aX300a core-prim . port-transcoder) (aX3009 core-prim . port-position) (aX3008 core-prim . port-has-set-port-position!?) (aX3007 core-prim . port-has-port-position?) (aX3006 core-prim . port-eof?) (aX3005 core-prim . output-port-buffer-mode) (aX3004 core-prim . open-string-output-port) (aX3003 core-prim . open-string-input-port) (aX3002 core-prim . open-file-output-port) (aX3001 core-prim . open-file-input/output-port) (aX3000 core-prim . open-file-input-port) (aX2fff core-prim . open-bytevector-output-port) (aX2ffe core-prim . open-bytevector-input-port) (aX2ffd core-prim . native-transcoder) (aX2ffc core-prim . native-eol-style) (aX2ffb core-prim . make-transcoder) (aX2ffa core-prim . latin-1-codec) (aX2a85 core-prim . make-i/o-write-error) (aX2a70 core-prim . make-i/o-read-error) (aX2b26 core-prim . make-i/o-port-error) (aX2a9c core-prim . make-i/o-invalid-position-error) (aX2ab7 core-prim . make-i/o-filename-error) (aX2ad0 core-prim . make-i/o-file-protection-error) (aX2ae5 core-prim . make-i/o-file-is-read-only-error) (aX2b0f core-prim . make-i/o-file-does-not-exist-error) (aX2afa core-prim . make-i/o-file-already-exists-error) (aX2a5b core-prim . make-i/o-error) (aX2b56 core-prim . make-i/o-encoding-error) (aX2b3f core-prim . make-i/o-decoding-error) (aX2ff9 core-prim . make-custom-textual-output-port) (aX2ff8 core-prim . make-custom-textual-input/output-port) (aX2ff7 core-prim . make-custom-textual-input-port) (aX2ff6 core-prim . make-custom-binary-output-port) (aX2ff5 core-prim . make-custom-binary-input/output-port) (aX2ff4 core-prim . make-custom-binary-input-port) (aX2ff3 core-prim . make-bytevector) (aX2ff2 core-prim . lookahead-u8) (aX2ff1 core-prim . lookahead-char) (aX2a87 core-prim . i/o-write-error?) (aX2a72 core-prim . i/o-read-error?) (aX2b2a core-prim . i/o-port-error?) (aX2aa0 core-prim . i/o-invalid-position-error?) (aX2abb core-prim . i/o-filename-error?) (aX2ad2 core-prim . i/o-file-protection-error?) (aX2ae7 core-prim . i/o-file-is-read-only-error?) (aX2b11 core-prim . i/o-file-does-not-exist-error?) (aX2afc core-prim . i/o-file-already-exists-error?) (aX2a5d core-prim . i/o-error?) (aX2aa2 core-prim . i/o-error-position) (aX2b2c core-prim . i/o-error-port) (aX2abd core-prim . i/o-error-filename) (aX2b5a core-prim . i/o-encoding-error?) (aX2b5c core-prim . i/o-encoding-error-char) (aX2b41 core-prim . i/o-decoding-error?) (aX2ff0 core-prim . get-u8) (aX2fef core-prim . get-string-n!) (aX2fee core-prim . get-string-n) (aX2fed core-prim . get-string-all) (aX2fec core-prim . get-line) (aX2feb core-prim . get-datum) (aX2fea core-prim . get-char) (aX2fe9 core-prim . get-bytevector-some) (aX2fe8 core-prim . get-bytevector-n!) (aX2fe7 core-prim . get-bytevector-n) (aX2fe6 core-prim . get-bytevector-all) (aX2fe5 core-prim . flush-output-port) (aX2fe4 core-prim . close-port) (aXe37 core-prim . scheme-report-environment) (aX2fe3 core-prim . quotient) (aXe35 core-prim . null-environment) (aX2fe2 core-prim . remainder) (aX2fe1 core-prim . modulo) (aX2fe0 core-prim . inexact->exact) (aX2fdf core-prim . force) (aX2fde core-prim . exact->inexact) (aX2fdd core-prim . make-promise) (aX2fdc core-prim . exit) (aX2c95 core-prim . command-line) (aX2fdb core-prim . string-fill!) (aX2fda core-prim . string-set!) (aX2fd9 core-prim . set-cdr!) (aX2fd8 core-prim . set-car!) (aX2fd7 core-prim . remove) (aX2fd6 core-prim . remv) (aX2fd5 core-prim . remp) (aX2fd4 core-prim . remq) (aX2fd3 core-prim . partition) (aX2fd2 core-prim . memv) (aX2fd1 core-prim . memq) (aX2fd0 core-prim . memp) (aX2fcf core-prim . member) (aX2fce core-prim . exists) (aX2fcd core-prim . for-all) (aX2fcc core-prim . fold-right) (aX2fcb core-prim . fold-left) (aX2fca core-prim . find) (aX2fc9 core-prim . filter) (aX2fc8 core-prim . cons*) (aX2fc7 core-prim . assv) (aX2fc6 core-prim . assq) (aX2fc5 core-prim . assp) (aX2fc4 core-prim . assoc) (aX2fc3 core-prim . call-with-string-output-port) (aX2fc2 core-prim . call-with-port) (aX2fc1 core-prim . call-with-bytevector-output-port) (aX2fc0 core-prim . bytevector->string) (aX2fbf core-prim . buffer-mode?) (aX2fbe core-prim . binary-port?) (aX2fbd core-prim . with-exception-handler) (aX2fbc core-prim . raise-continuable) (aX2fbb core-prim . raise) (aXe3b core-prim . eval) (aXe33 core-prim . environment) (aX2fba core-prim . make-enumeration) (aX2fb9 core-prim . enum-set=?) (aX2fb8 core-prim . enum-set-universe) (aX2fb7 core-prim . enum-set-union) (aX2fb6 core-prim . enum-set-subset?) (aX2fb5 core-prim . enum-set-projection) (aX2fb4 core-prim . enum-set-member?) (aX2fb3 core-prim . enum-set-intersection) (aX2fb2 core-prim . enum-set-indexer) (aX2fb1 core-prim . enum-set-difference) (aX2fb0 core-prim . enum-set-constructor) (aX2faf core-prim . enum-set-complement) (aX2fae core-prim . enum-set->list) (aX29d1 core-prim . who-condition?) (aX2949 core-prim . warning?) (aX2988 core-prim . violation?) (aX2a48 core-prim . undefined-violation?) (aX2a2f core-prim . syntax-violation?) (aX2a33 core-prim . syntax-violation-subform) (aX2a31 core-prim . syntax-violation-form) (aXe5b core-prim . syntax-violation) (aX2fad core-prim . simple-conditions) (aX295e core-prim . serious-condition?) (aX29e8 core-prim . non-continuable-violation?) (aX2932 core-prim . message-condition?) (aX29cd core-prim . make-who-condition) (aX2947 core-prim . make-warning) (aX2986 core-prim . make-violation) (aX2a46 core-prim . make-undefined-violation) (aX2a29 core-prim . make-syntax-violation) (aX295c core-prim . make-serious-condition) (aX29e6 core-prim . make-non-continuable-violation) (aX292e core-prim . make-message-condition) (aX2a10 core-prim . make-lexical-violation) (aX29b2 core-prim . make-irritants-condition) (aX29fb core-prim . make-implementation-restriction-violation) (aX2971 core-prim . make-error) (aX299b core-prim . make-assertion-violation) (aX2a12 core-prim . lexical-violation?) (aX29b6 core-prim . irritants-condition?) (aX29fd core-prim . implementation-restriction-violation?) (aX2973 core-prim . error?) (aX29d3 core-prim . condition-who) (aX2fac core-prim . condition-predicate) (aX2934 core-prim . condition-message) (aX29b8 core-prim . condition-irritants) (aX2fab core-prim . condition-accessor) (aX2faa core-prim . condition) (aX299d core-prim . assertion-violation?) (aX2fa9 core-prim . condition?) (aX2fa8 core-prim . utf32->string) (aX2fa7 core-prim . utf16->string) (aX2fa6 core-prim . utf8->string) (aX2fa5 core-prim . uint-list->bytevector) (aX2fa4 core-prim . u8-list->bytevector) (aX2fa3 core-prim . string->utf8) (aX2fa2 core-prim . string->utf32) (aX2fa1 core-prim . string->utf16) (aX2fa0 core-prim . sint-list->bytevector) (aX2f9f core-prim . native-endianness) (aX2f9e core-prim . bytevector?) (aX2f9d core-prim . bytevector=?) (aX2f9c core-prim . bytevector-uint-set!) (aX2f9b core-prim . bytevector-uint-ref) (aX2f9a core-prim . bytevector-u8-set!) (aX2f99 core-prim . bytevector-u8-ref) (aX2f98 core-prim . bytevector-u64-set!) (aX2f97 core-prim . bytevector-u64-ref) (aX2f96 core-prim . bytevector-u64-native-set!) (aX2f95 core-prim . bytevector-u64-native-ref) (aX2f94 core-prim . bytevector-u32-set!) (aX2f93 core-prim . bytevector-u32-ref) (aX2f92 core-prim . bytevector-u32-native-set!) (aX2f91 core-prim . bytevector-u32-native-ref) (aX2f90 core-prim . bytevector-u16-set!) (aX2f8f core-prim . bytevector-u16-ref) (aX2f8e core-prim . bytevector-u16-native-set!) (aX2f8d core-prim . bytevector-u16-native-ref) (aX2f8c core-prim . bytevector-sint-set!) (aX2f8b core-prim . bytevector-sint-ref) (aX2f8a core-prim . bytevector-s8-set!) (aX2f89 core-prim . bytevector-s8-ref) (aX2f88 core-prim . bytevector-s64-set!) (aX2f87 core-prim . bytevector-s64-ref) (aX2f86 core-prim . bytevector-s64-native-set!) (aX2f85 core-prim . bytevector-s64-native-ref) (aX2f84 core-prim . bytevector-s32-set!) (aX2f83 core-prim . bytevector-s32-ref) (aX2f82 core-prim . bytevector-s32-native-set!) (aX2f81 core-prim . bytevector-s32-native-ref) (aX2f80 core-prim . bytevector-s16-set!) (aX2f7f core-prim . bytevector-s16-ref) (aX2f7e core-prim . bytevector-s16-native-set!) (aX2f7d core-prim . bytevector-s16-native-ref) (aX2f7c core-prim . bytevector-length) (aX2f7b core-prim . bytevector-ieee-single-ref) (aX2f7a core-prim . bytevector-ieee-single-set!) (aX2f79 core-prim . bytevector-ieee-single-native-set!) (aX2f78 core-prim . bytevector-ieee-single-native-ref) (aX2f77 core-prim . bytevector-ieee-double-set!) (aX2f76 core-prim . bytevector-ieee-double-ref) (aX2f75 core-prim . bytevector-ieee-double-native-set!) (aX2f74 core-prim . bytevector-ieee-double-native-ref) (aX2f73 core-prim . bytevector-fill!) (aX2f72 core-prim . bytevector-copy!) (aX2f71 core-prim . bytevector-copy) (aX2f70 core-prim . bytevector->uint-list) (aX2f6f core-prim . bytevector->u8-list) (aX2f6e core-prim . bytevector->sint-list) (aX2b86 core-prim . no-nans-violation?) (aX2b71 core-prim . no-infinities-violation?) (aX2b84 core-prim . make-no-nans-violation) (aX2b6f core-prim . make-no-infinities-violation) (aX2f6d core-prim . real->flonum) (aX2f6c core-prim . flzero?) (aX2f6b core-prim . fltruncate) (aX2f6a core-prim . fltan) (aX2f69 core-prim . flsqrt) (aX2f68 core-prim . flsin) (aX2f67 core-prim . flround) (aX2f66 core-prim . flpositive?) (aX2f65 core-prim . flonum?) (aX2f64 core-prim . flodd?) (aX2f63 core-prim . flnumerator) (aX2f62 core-prim . flnegative?) (aX2f61 core-prim . flnan?) (aX2f60 core-prim . flmod0) (aX2f5f core-prim . flmod) (aX2f5e core-prim . flmin) (aX2f5d core-prim . flmax) (aX2f5c core-prim . fllog) (aX2f5b core-prim . flinteger?) (aX2f5a core-prim . flinfinite?) (aX2f59 core-prim . flfloor) (aX2f58 core-prim . flfinite?) (aX2f57 core-prim . flexpt) (aX2f56 core-prim . flexp) (aX2f55 core-prim . fleven?) (aX2f54 core-prim . fldiv0-and-mod0) (aX2f53 core-prim . fldiv0) (aX2f52 core-prim . fldiv-and-mod) (aX2f51 core-prim . fldiv) (aX2f50 core-prim . fldenominator) (aX2f4f core-prim . flcos) (aX2f4e core-prim . flceiling) (aX2f4d core-prim . flatan) (aX2f4c core-prim . flasin) (aX2f4b core-prim . flacos) (aX2f4a core-prim . flabs) (aX2f49 core-prim . fl>?) (aX2f48 core-prim . fl>=?) (aX2f47 core-prim . fl=?) (aX2f46 core-prim . fl<?) (aX2f45 core-prim . fl<=?) (aX2f44 core-prim . fl/) (aX2f43 core-prim . fl-) (aX2f42 core-prim . fl+) (aX2f41 core-prim . fl*) (aX2f40 core-prim . fixnum->flonum) (aX2f3f core-prim . fxzero?) (aX2f3e core-prim . fxxor) (aX2f3d core-prim . fxrotate-bit-field) (aX2f3c core-prim . fxreverse-bit-field) (aX2f3b core-prim . fxpositive?) (aX2f3a core-prim . fxodd?) (aX2f39 core-prim . fxnot) (aX2f38 core-prim . fxnegative?) (aX2f37 core-prim . fxmod0) (aX2f36 core-prim . fxmod) (aX2f35 core-prim . fxmin) (aX2f34 core-prim . fxmax) (aX2f33 core-prim . fxlength) (aX2f32 core-prim . fxior) (aX2f31 core-prim . fxif) (aX2f30 core-prim . fxfirst-bit-set) (aX2f2f core-prim . fxeven?) (aX2f2e core-prim . fxdiv0-and-mod0) (aX2f2d core-prim . fxdiv0) (aX2f2c core-prim . fxdiv-and-mod) (aX2f2b core-prim . fxdiv) (aX2f2a core-prim . fxcopy-bit-field) (aX2f29 core-prim . fxcopy-bit) (aX2f28 core-prim . fxbit-set?) (aX2f27 core-prim . fxbit-field) (aX2f26 core-prim . fxbit-count) (aX2f25 core-prim . fxarithmetic-shift-right) (aX2f24 core-prim . fxarithmetic-shift-left) (aX2f23 core-prim . fxarithmetic-shift) (aX2f22 core-prim . fxand) (aX2f21 core-prim . fx>?) (aX2f20 core-prim . fx>=?) (aX2f1f core-prim . fx=?) (aX2f1e core-prim . fx<?) (aX2f1d core-prim . fx<=?) (aX2f1c core-prim . fx-/carry) (aX2f1b core-prim . fx-) (aX2f1a core-prim . fx+/carry) (aX2f19 core-prim . fx+) (aX2f18 core-prim . fx*/carry) (aX2f17 core-prim . fx*) (aX2f16 core-prim . greatest-fixnum) (aX2f15 core-prim . least-fixnum) (aX2f14 core-prim . fixnum-width) (aX2f13 core-prim . fixnum?) (aX2f12 core-prim . bitwise-rotate-bit-field) (aX2f11 core-prim . bitwise-reverse-bit-field) (aX2f10 core-prim . bitwise-length) (aX2f0f core-prim . bitwise-if) (aX2f0e core-prim . bitwise-first-bit-set) (aX2f0d core-prim . bitwise-copy-bit-field) (aX2f0c core-prim . bitwise-copy-bit) (aX2f0b core-prim . bitwise-bit-set?) (aX2f0a core-prim . bitwise-bit-field) (aX2f09 core-prim . bitwise-bit-count) (aX2f08 core-prim . bitwise-xor) (aX2f07 core-prim . bitwise-ior) (aX2f06 core-prim . bitwise-and) (aX2f05 core-prim . bitwise-not) (aX2f04 core-prim . bitwise-arithmetic-shift-right) (aX2f03 core-prim . bitwise-arithmetic-shift-left) (aX2f02 core-prim . bitwise-arithmetic-shift) (aX2f01 core-prim . zero?) (aX2f00 core-prim . vector?) (aX2eff core-prim . vector-set!) (aX2efe core-prim . vector-ref) (aX2efd core-prim . vector-map) (aX2efc core-prim . vector-length) (aX2efb core-prim . vector-for-each) (aX2efa core-prim . vector-fill!) (aX2ef9 core-prim . vector->list) (aX2ef8 core-prim . vector) (aX2ef7 core-prim . values) (aX2ef6 core-prim . truncate) (aX2ef5 core-prim . tan) (aX2ef4 core-prim . symbol?) (aX2ef3 core-prim . symbol=?) (aX2ef2 core-prim . symbol->string) (aX2ef1 core-prim . substring) (aX2ef0 core-prim . string?) (aX2eef core-prim . string>?) (aX2eee core-prim . string>=?) (aX2eed core-prim . string=?) (aX2eec core-prim . string<?) (aX2eeb core-prim . string<=?) (aX2eea core-prim . string-ref) (aX2ee9 core-prim . string-length) (aX2ee8 core-prim . string-for-each) (aX2ee7 core-prim . string-copy) (aX2ee6 core-prim . string-append) (aX2ee5 core-prim . string->symbol) (aX2ee4 core-prim . string->number) (aX2ee3 core-prim . string->list) (aX2ee2 core-prim . string) (aX2ee1 core-prim . sqrt) (aX2ee0 core-prim . sin) (aX2edf core-prim . round) (aX2ede core-prim . reverse) (aX2edd core-prim . real?) (aX2edc core-prim . real-valued?) (aX2edb core-prim . real-part) (aX2eda core-prim . rationalize) (aX2ed9 core-prim . rational?) (aX2ed8 core-prim . rational-valued?) (aX2ed7 core-prim . procedure?) (aX2ed6 core-prim . positive?) (aX2ed5 core-prim . pair?) (aX2ed4 core-prim . odd?) (aX2ed3 core-prim . numerator) (aX2ed2 core-prim . number?) (aX2ed1 core-prim . number->string) (aX2ed0 core-prim . null?) (aX2ecf core-prim . not) (aX2ece core-prim . negative?) (aX2ecd core-prim . nan?) (aX2ecc core-prim . min) (aX2ecb core-prim . max) (aX2eca core-prim . map) (aX2ec9 core-prim . make-vector) (aX2ec8 core-prim . make-string) (aX2ec7 core-prim . make-rectangular) (aX2ec6 core-prim . make-polar) (aX2ec5 core-prim . magnitude) (aX2ec4 core-prim . log) (aX2ec3 core-prim . list?) (aX2ec2 core-prim . list-tail) (aX2ec1 core-prim . list-ref) (aX2ec0 core-prim . list->vector) (aX2ebf core-prim . list->string) (aX2ebe core-prim . list) (aX2ebd core-prim . length) (aX2ebc core-prim . lcm) (aX2ebb core-prim . integer?) (aX2eba core-prim . integer-valued?) (aX2eb9 core-prim . integer->char) (aX2eb8 core-prim . infinite?) (aX2eb7 core-prim . inexact?) (aX2eb6 core-prim . inexact) (aX2eb5 core-prim . imag-part) (aX2eb4 core-prim . gcd) (aX2eb3 core-prim . for-each) (aX2eb2 core-prim . floor) (aX2eb1 core-prim . finite?) (aX2eb0 core-prim . expt) (aX2eaf core-prim . exp) (aX2eae core-prim . exact?) (aX2ead core-prim . exact-integer-sqrt) (aX2eac core-prim . exact) (aX2eab core-prim . even?) (aX2eaa core-prim . error) (aX2ea9 core-prim . eqv?) (aX2ea8 core-prim . equal?) (aX2ea7 core-prim . eq?) (aX2ea6 core-prim . dynamic-wind) (aX2ea5 core-prim . div0-and-mod0) (aX2ea4 core-prim . mod0) (aX2ea3 core-prim . div0) (aX2ea2 core-prim . div-and-mod) (aX2ea1 core-prim . mod) (aX2ea0 core-prim . div) (aX2e9f core-prim . denominator) (aX2e9e core-prim . cos) (aX2e9d core-prim . cons) (aX2e9c core-prim . complex?) (aX2e9b core-prim . char?) (aX2e9a core-prim . char>?) (aX2e99 core-prim . char>=?) (aX2e98 core-prim . char=?) (aX2e97 core-prim . char<?) (aX2e96 core-prim . char<=?) (aX2e95 core-prim . char->integer) (aX2e94 core-prim . ceiling) (aX2e93 core-prim . call-with-values) (aX2e92 core-prim . call/cc) (aX2e91 core-prim . call-with-current-continuation) (aX2e90 core-prim . cddddr) (aX2e8f core-prim . cdddar) (aX2e8e core-prim . cddadr) (aX2e8d core-prim . cddaar) (aX2e8c core-prim . cdaddr) (aX2e8b core-prim . cdadar) (aX2e8a core-prim . cdaadr) (aX2e89 core-prim . cdaaar) (aX2e88 core-prim . cadddr) (aX2e87 core-prim . caddar) (aX2e86 core-prim . cadadr) (aX2e85 core-prim . cadaar) (aX2e84 core-prim . caaddr) (aX2e83 core-prim . caadar) (aX2e82 core-prim . caaadr) (aX2e81 core-prim . caaaar) (aX2e80 core-prim . cdddr) (aX2e7f core-prim . cddar) (aX2e7e core-prim . cdadr) (aX2e7d core-prim . cdaar) (aX2e7c core-prim . caddr) (aX2e7b core-prim . cadar) (aX2e7a core-prim . caadr) (aX2e79 core-prim . caaar) (aX2e78 core-prim . cddr) (aX2e77 core-prim . cdar) (aX2e76 core-prim . cadr) (aX2e75 core-prim . caar) (aX2e74 core-prim . cdr) (aX2e73 core-prim . car) (aX2e72 core-prim . boolean?) (aX2e71 core-prim . boolean=?) (aX2e70 core-prim . atan) (aX2e6f core-prim . assertion-violation) (aXe55 core-prim . assertion-error) (aX2e6e core-prim . asin) (aX2e6d core-prim . apply) (aX2e6c core-prim . append) (aX2e6b core-prim . angle) (aX2e6a core-prim . acos) (aX2e69 core-prim . abs) (aX2e68 core-prim . /) (aX2e67 core-prim . *) (aX2e66 core-prim . -) (aX2e65 core-prim . +) (aX2e64 core-prim . >=) (aX2e63 core-prim . >) (aX2e62 core-prim . =) (aX2e61 core-prim . <=) (aX2e60 core-prim . <) (aX2e5f core-prim . library) (aX2e5e $core-rtd &no-nans-rtd &no-nans-rcd) (aX2e5d $core-rtd &no-infinities-rtd &no-infinities-rcd) (aX2e5c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (aX2e5b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (aX2e5a $core-rtd &i/o-port-rtd &i/o-port-rcd) (aX2e59 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (aX2e58 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (aX2e57 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (aX2e56 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (aX2e55 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (aX2e54 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (aX2e53 $core-rtd &i/o-write-rtd &i/o-write-rcd) (aX2e52 $core-rtd &i/o-read-rtd &i/o-read-rcd) (aX2e51 $core-rtd &i/o-rtd &i/o-rcd) (aX2e50 $core-rtd &undefined-rtd &undefined-rcd) (aX2e4f $core-rtd &syntax-rtd &syntax-rcd) (aX2e4e $core-rtd &lexical-rtd &lexical-rcd) (aX2e4d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (aX2e4c $core-rtd &non-continuable-rtd &non-continuable-rcd) (aX2e4b $core-rtd &who-rtd &who-rcd) (aX2e4a $core-rtd &irritants-rtd &irritants-rcd) (aX2e49 $core-rtd &assertion-rtd &assertion-rcd) (aX2e48 $core-rtd &violation-rtd &violation-rcd) (aX2e47 $core-rtd &error-rtd &error-rcd) (aX2e46 $core-rtd &serious-rtd &serious-rcd) (aX2e45 $core-rtd &warning-rtd &warning-rcd) (aX2e44 $core-rtd &message-rtd &message-rcd) (aX2e43 $core-rtd &condition-rtd &condition-rcd) (aX2e42 macro . define-condition-type) (aX2e41 macro . define-enumeration) (aX2e40 macro . define-record-type) (aX2e3f macro . parent-rtd) (aX2e3e macro . nongenerative) (aX2e3d macro . opaque) (aX2e3c macro . sealed) (aX2e3b macro . protocol) (aX2e3a macro . parent) (aX2e39 macro . immutable) (aX2e38 macro . mutable) (aX2e37 macro . fields) (aX2e36 macro . error-handling-mode) (aX2e35 macro . file-options) (aX2e34 macro . buffer-mode) (aX2e33 macro . eol-style) (aX2e32 macro . guard) (aX2e31 macro . trace-define) (aX2e30 macro . trace-lambda) (aX2e2f macro . unsyntax-splicing) (aX2e2e macro . unsyntax) (aX2e2d macro . unquote-splicing) (aX2e2c macro . unquote) (aX2e2b macro . _) (aX2e2a macro . else) (aX2e29 macro . =>) (aX2e28 macro . ...) (aX2e27 macro . assert) (aX2e26 macro . endianness) (aX2e25 macro . delay) (aX2e24 macro . time) (aX2e23 macro . do) (aX2e22 macro . cond) (aX2e21 macro . let*) (aX2e20 macro . let*-values) (aX2e1f macro . let-values) (aX2e1e macro . identifier-syntax) (aX2e1d macro . with-syntax) (aX2e1c macro . quasisyntax) (aX2e1b macro . quasiquote) (aX2e1a macro . syntax-rules) (aX2e19 macro . include) (aX2e18 macro . define-struct) (aX2e17 core-macro . record-constructor-descriptor) (aX2e16 core-macro . record-type-descriptor) (aX2e15 macro . case) (aX2e14 macro . parameterize) (aX2e13 macro . unless) (aX2e12 macro . when) (aX2e11 core-macro . or) (aX2e10 core-macro . and) (aX2e0f core-macro . if) (aX2e0e core-macro . let) (aX2e0d core-macro . letrec*) (aX2e0c core-macro . letrec) (aX2e0b core-macro . type-descriptor) (aX2e0a core-macro . case-lambda) (aX2e09 core-macro . lambda) (aX2e08 core-macro . syntax) (aX2e07 core-macro . syntax-case) (aX2e06 core-macro . quote) (aX2e05 core-macro . foreign-call) (aX2e04 letrec-syntax) (aX2e03 let-syntax) (aX2e02 set!) (aX2e01 import) (aX2e00 begin) (aX2dff module) (aX2dfe define-syntax) (aX2dfd define)) values values '#f '#f '#f '#f) (aX989@aX7d5@install-library 'aX3144 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . aX3123) (eval-core . aX3122) (set-symbol-value! . aX3121) (symbol-value . aX3120) (gensym . aX311f) (void . aX311e)) '() values values '#f '#f '#f '#f) (aX989@aX7d5@install-library 'aX3145 '(mosh) '() '() '() '() '((set-symbol-value! . aX3121) (symbol-value . aX3120) (regexp? . aX311c) (read-line . aX311b) (ungensym . aX3119) (alist->eq-hash-table . aX3118) (assoc-ref . aX3117) (print . aX3116) (format . aX3115) (host-os . aX3114) (library-path . aX7b4) (standard-library-path . aX3113) (file-newer? . aX3112) (stat-mtime . aX3111) (digit->integer . aX310d) (call-with-string-input-port . aX310c) (call-with-string-io . aX310b) (string-split . aX310a) (bytevector-for-each . aX3109) (string->regexp . aX3108) (rxmatch . aX3107) (regexp-replace-all . aX3106) (hashtable-for-each . aX3105) (set-current-directory! . aX3100) (expand-path . aX30ff) (current-directory . aX30fe) (p . aX30c0) (get-timeofday . aX30a7) (get-command-line . aX30a6) (sys-display . aX30a5) (whereis . aX30a4) (register . aX30a3) (vm-join! . aX30a2) (vm-set-value! . aX30a1) (vm? . aX30a0) (main-vm? . aX309f) (vm-eval . aX309e) (vm-self . aX309d) (vm-start! . aX309c) (make-vm . aX309b) (mutex-try-lock! . aX309a) (mutex-unlock! . aX3099) (mutex-lock! . aX3098) (mutex? . aX3097) (make-mutex . aX3096) (condition-variable-notify-all! . aX3095) (condition-variable-notify! . aX3094) (condition-variable-wait! . aX3093) (make-condition-variable . aX3092) (mosh-executable-path . aX3091) (make-file-options . aX3090) (source-info . aX308f) (make-compiler-instruction . aX308e) (make-instruction . aX308d) (set-source-info! . aX308c) (bignum? . aX308b) (fast-equal? . aX308a) (fasl-read . aX3089) (fasl-write . aX3088) (time-usage . aX3087) (os-constant . aX3086) (time . aX2e24) (include . aX2e19)) '() values values '#f '#f '#f '#f) (aX989@aX7d5@install-library 'aX3146 '(system) '() '() '() '() '((gensym-prefix-set! . aX311a) (write-to-file . aX3110) (file->list . aX310f) (file->string . aX310e) (mosh-cache-dir . aX59e) (call-process . aX3104) (local-tz-offset . aX3103) (microseconds . aX3102) (directory-list . aX3101) (expand-path . aX30ff) (%spawn . aX30fd) (%waitpid . aX30fc) (simple-struct-name . aX30fb) (simple-struct-set! . aX30fa) (simple-struct-ref . aX30f9) (make-simple-struct . aX30f8) (simple-struct? . aX30f7) (pointer-ref-c-int64 . aX30f6) (pointer-ref-c-int32 . aX30f5) (pointer-ref-c-int16 . aX30f4) (pointer-ref-c-int8 . aX30f3) (pointer-ref-c-uint64 . aX30f2) (pointer-ref-c-uint32 . aX30f1) (pointer-ref-c-uint16 . aX30f0) (pointer-ref-c-uint8 . aX30ef) (pointer-set-c-uint64! . aX30ee) (pointer-set-c-uint32! . aX30ed) (pointer-set-c-uint16! . aX30ec) (pointer-set-c-uint8! . aX30eb) (pointer-set-c-int64! . aX30ea) (pointer-set-c-int32! . aX30e9) (pointer-set-c-int16! . aX30e8) (pointer-set-c-int8! . aX30e7) (pointer-set-c-pointer! . aX30e6) (pointer-set-c-double! . aX30e5) (pointer-set-c-float! . aX30e4) (pointer-set-c-long-long! . aX30e3) (pointer-set-c-long! . aX30e2) (pointer-set-c-int! . aX30e1) (pointer-set-c-short! . aX30e0) (pointer-set-c-char! . aX30df) (pointer-ref-c-pointer . aX30de) (pointer-ref-c-double . aX30dd) (pointer-ref-c-float . aX30dc) (pointer-ref-c-unsigned-long-long . aX30db) (pointer-ref-c-signed-long-long . aX30da) (pointer-ref-c-unsigned-long . aX30d9) (pointer-ref-c-signed-long . aX30d8) (pointer-ref-c-unsigned-int . aX30d7) (pointer-ref-c-signed-int . aX30d6) (pointer-ref-c-unsigned-short . aX30d5) (pointer-ref-c-signed-short . aX30d4) (pointer-ref-c-unsigned-char . aX30d3) (pointer-ref-c-signed-char . aX30d2) (pointer->integer . aX30d1) (integer->pointer . aX30d0) (pointer? . aX30cf) (shared-errno . aX30ce) (%ffi-free-c-callback-trampoline . aX30cd) (%ffi-make-c-callback-trampoline . aX30cc) (%ffi-free . aX30cb) (%ffi-malloc . aX30ca) (%ffi-supported? . aX30c9) (%ffi-pointer->string . aX30c8) (%ffi-call . aX30c7) (%ffi-lookup . aX30c6) (%ffi-open . aX30c5) (null-terminated-utf8->string . aX30c4) (null-terminated-bytevector->string . aX30c3) (%fork . aX30c2) (%pipe . aX30c1) (open-output-string . aX30bf) (get-output-string . aX30be) (file-stat-ctime . aX30bd) (file-stat-atime . aX30bc) (file-stat-mtime . aX30bb) (file-size-in-bytes . aX30ba) (file-writable? . aX30b9) (file-executable? . aX30b8) (file-readable? . aX30b7) (file-regular? . aX30b6) (file-symbolic-link? . aX30b5) (file-directory? . aX30b4) (create-symbolic-link . aX30b3) (rename-file . aX30b2) (delete-directory . aX30b1) (create-directory . aX30b0) (create-mosh-cache-dir . aX30af) (get-environment-variables . aX30ae) (current-exception-handler . aX30ad) (get-environment-variable . aX30ac) (join-wraps . aX30ab) (id->real-label . aX30aa) (same-marks? . aX30a9) (same-marks*? . aX30a8) (disasm . aX3085) (make-parameter . aX59c) (socket-port . aX3084) (socket-shutdown . aX3083) (socket-close . aX3082) (socket-send . aX3081) (socket-recv! . aX3080) (socket-recv . aX307f) (make-server-socket . aX307e) (make-client-socket . aX307d) (socket-accept . aX307c) (socket? . aX307b) (parameterize . aX2e14)) '() values values '#f '#f '#f '#f)))
(begin (set! aX2c80@ref (unspecified)) (set! aX2c82@x* (unspecified)) (set! aX2c84@add-library-path! (unspecified)) (set! aX2c86@parse-and-add-library-path (unspecified)) (set! aX2c88@for-each-with-index (unspecified)) (set! aX2c8a@rpad (unspecified)) (set! aX2c8c@condition-printer (unspecified)) (set! aX2c8e@record->field-alist (unspecified)) (set! aX2c90@map-with-index (unspecified)) (set! aX2c92@repl (unspecified)) (set! aX2c94@trace-printer (unspecified)) (set! aX2c96@command-line (unspecified)) (set! aX2c98@local-library-path (unspecified)) (set! aX2c9a@load/args (unspecified)) (set! aX2c9c@load (unspecified)) (set! aX2c9e@ironscheme-build (unspecified)) (set! aX2ca0@eval-top-level (unspecified)) (set! aX2ca2@compile-system-libraries (unspecified)) (set! aX2ca4@compile (unspecified)) (set! aX2ca6@compile->closure (unspecified)) (set! aX2ca8@pre-compile-r6rs-file (unspecified)) (set! aX2caa@load-r6rs-top-level (unspecified)) (set! aX2cac@load-r6rs-top-level-sexp (unspecified)) (set! aX2cae@prefix-inc (unspecified)) (set! aX2cb0@prefix-inc! (unspecified)) (set! aX2c80@ref (lambda (aX2ceb@rtd aX2cec@i aX2ced@x) (let ((aX2cf1@val ((record-accessor aX2ceb@rtd aX2cec@i) aX2ced@x))) (if (symbol? aX2cf1@val) (ungensym aX2cf1@val) aX2cf1@val)))) (set! aX2de3@aX2c80@ref aX2c80@ref) (set! aX2c82@x* '()) (set! aX2de4@aX2c82@x* aX2c82@x*) (set! aX2c84@add-library-path! (lambda (aX2cf3@path) (aX979@aX7b5@library-path (append (aX979@aX7b5@library-path) (list aX2cf3@path))))) (set! aX2de5@aX2c84@add-library-path! aX2c84@add-library-path!) (set! aX2c86@parse-and-add-library-path (lambda (aX2cf5@paths aX2cf6@message) (let ((aX2cfa@separator '#f)) (begin (set! aX2cfa@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((aX2cfb@t aX2cf5@paths)) (if aX2cfb@t ((lambda (aX2cfd@paths) (for-each (lambda (aX2cff@path) (if (file-exists? aX2cff@path) (aX2c84@add-library-path! (expand-path aX2cff@path)) (format (current-error-port) aX2cf6@message aX2cff@path))) (string-split aX2cfd@paths aX2cfa@separator))) aX2cfb@t) (void))))))) (set! aX2de6@aX2c86@parse-and-add-library-path aX2c86@parse-and-add-library-path) (set! aX2c88@for-each-with-index (lambda (aX2d01@proc aX2d02@lst) (letrec ((aX2d05@loop (lambda (aX2d07@i aX2d08@lst) (if (null? aX2d08@lst) (if '#f '#f (void)) (begin (aX2d01@proc aX2d07@i (car aX2d08@lst)) (aX2d05@loop (+ aX2d07@i '1) (cdr aX2d08@lst))))))) (aX2d05@loop '1 aX2d02@lst)))) (set! aX2de7@aX2c88@for-each-with-index aX2c88@for-each-with-index) (set! aX2c8a@rpad (lambda (aX2d0b@str aX2d0c@pad aX2d0d@n) (let ((aX2d11@rest (- aX2d0d@n (string-length (format '"~a" aX2d0b@str))))) (let aX2d17@loop ((aX2d13@rest aX2d11@rest) (aX2d14@ret (format '"~a" aX2d0b@str))) (if (<= aX2d13@rest '0) aX2d14@ret (aX2d17@loop (- aX2d13@rest '1) (string-append aX2d14@ret aX2d0c@pad))))))) (set! aX2de8@aX2c8a@rpad aX2c8a@rpad) (set! aX2c8c@condition-printer (lambda (aX2d19@e aX2d1a@port) (let ((aX2d1e@max-condition-len '#f)) (begin (set! aX2d1e@max-condition-len (apply max (map (lambda (aX2d2f@c) (string-length (symbol->string (record-type-name (record-rtd aX2d2f@c))))) (simple-conditions aX2d19@e)))) (begin (display '" Condition components:\n" aX2d1a@port) (aX2c88@for-each-with-index (lambda (aX2d1f@i aX2d20@x) (let ((aX2d23@rtd (record-rtd aX2d20@x)) (aX2d24@fields-alist (aX2c8e@record->field-alist aX2d20@x))) (begin (format aX2d1a@port '" ~d. ~a" aX2d1f@i (aX2c8a@rpad (symbol->string (record-type-name aX2d23@rtd)) '" " aX2d1e@max-condition-len)) (if (null? aX2d24@fields-alist) (newline aX2d1a@port) (void)) (let aX2d2b@loop ((aX2d27@first '#t) (aX2d28@fields-alist aX2d24@fields-alist)) (if (null? aX2d28@fields-alist) '() (let ((aX2d2d@field (car aX2d28@fields-alist))) (begin (if (not aX2d27@first) (display (aX2c8a@rpad '"" '" " (+ '4 aX2d1e@max-condition-len)) aX2d1a@port) (void)) (display '"       " aX2d1a@port) (display (car aX2d2d@field) aX2d1a@port) (display '": " aX2d1a@port) (write (cdr aX2d2d@field) aX2d1a@port) (newline aX2d1a@port) (aX2d2b@loop '#f (cdr aX2d28@fields-alist))))))))) (simple-conditions aX2d19@e))))))) (set! aX2de9@aX2c8c@condition-printer aX2c8c@condition-printer) (set! aX2c8e@record->field-alist (lambda (aX2d31@r) (let ((aX2d34@ref '#f)) (begin (set! aX2d34@ref (lambda (aX2d3f@rtd aX2d40@i aX2d41@x) (let ((aX2d45@val ((record-accessor aX2d3f@rtd aX2d40@i) aX2d41@x))) (if (symbol? aX2d45@val) (ungensym aX2d45@val) aX2d45@val)))) (let aX2d39@loop ((aX2d35@ret '()) (aX2d36@rtd (record-rtd aX2d31@r))) (if aX2d36@rtd (aX2d39@loop (append aX2d35@ret (aX2c90@map-with-index (lambda (aX2d3b@i aX2d3c@field) (cons aX2d3c@field (aX2d34@ref aX2d36@rtd aX2d3b@i aX2d31@r))) (vector->list (record-type-field-names aX2d36@rtd)))) (record-type-parent aX2d36@rtd)) aX2d35@ret)))))) (set! aX2dea@aX2c8e@record->field-alist aX2c8e@record->field-alist) (set! aX2c90@map-with-index (lambda (aX2d47@proc aX2d48@lst) (let aX2d51@loop ((aX2d4b@i '0) (aX2d4c@lst aX2d48@lst) (aX2d4d@ret '())) (if (null? aX2d4c@lst) (reverse aX2d4d@ret) (aX2d51@loop (+ aX2d4b@i '1) (cdr aX2d4c@lst) (cons (aX2d47@proc aX2d4b@i (car aX2d4c@lst)) aX2d4d@ret)))))) (set! aX2deb@aX2c90@map-with-index aX2c90@map-with-index) (set! aX2c92@repl (lambda aX2d53@x (let ((aX2d56@rec '#f)) (begin (set! aX2d56@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (aX2d59@aX2d57) (lambda () (with-exception-handler (lambda (aX2d5b@e) ((call/cc (lambda (aX2d5d@aX2d58) (aX2d59@aX2d57 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? aX2d5b@e) (aX2c8c@condition-printer aX2d5b@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" aX2d5b@e))) (aX2d5d@aX2d58 (lambda () (raise-continuable aX2d5b@e)))))))))) (lambda () (let aX2d63@loop ((aX2d5f@line (get-line (current-input-port))) (aX2d60@accum '"")) (let ((aX2d66@parentheses-ok? '#f) (aX2d68@eval-string-print '#f)) (begin (set! aX2d66@parentheses-ok? (lambda (aX2d6d@text) (let aX2d75@loop ((aX2d6f@chars (string->list aX2d6d@text)) (aX2d70@p0 '0) (aX2d71@p1 '0)) (if (null? aX2d6f@chars) (= '0 aX2d70@p0 aX2d71@p1) (let ((aX2d77@t (car aX2d6f@chars))) (if (memv aX2d77@t '(#\()) (aX2d75@loop (cdr aX2d6f@chars) (+ aX2d70@p0 '1) aX2d71@p1) (if (memv aX2d77@t '(#\))) (aX2d75@loop (cdr aX2d6f@chars) (- aX2d70@p0 '1) aX2d71@p1) (if (memv aX2d77@t '(#\[)) (aX2d75@loop (cdr aX2d6f@chars) aX2d70@p0 (+ aX2d71@p1 '1)) (if (memv aX2d77@t '(#\])) (aX2d75@loop (cdr aX2d6f@chars) aX2d70@p0 (- aX2d71@p1 '1)) (aX2d75@loop (cdr aX2d6f@chars) aX2d70@p0 aX2d71@p1)))))))))) (set! aX2d68@eval-string-print (lambda (aX2d6b@text) (if (not (or (string=? '"\n" aX2d6b@text) (= '0 (string-length aX2d6b@text)))) (write (aX2ca0@eval-top-level (call-with-port (open-string-input-port aX2d6b@text) read))) (void)))) (if (eof-object? aX2d5f@line) (begin (aX2d68@eval-string-print aX2d60@accum) (exit)) (let ((aX2d69@current (string-append aX2d60@accum aX2d5f@line))) (if (aX2d66@parentheses-ok? aX2d69@current) (aX2d68@eval-string-print aX2d69@current) (aX2d63@loop (get-line (current-input-port)) aX2d69@current))))))))))))) (newline) (aX2d56@rec)))) (aX2d56@rec))))) (set! aX2dec@aX2c92@repl aX2c92@repl) (set! aX2c94@trace-printer (aX6bf@aX59d@make-parameter write)) (set! aX2ded@aX2c94@trace-printer aX2c94@trace-printer) (set! aX2c96@command-line (aX6bf@aX59d@make-parameter (get-command-line))) (set! aX2dee@aX2c96@command-line aX2c96@command-line) (set! aX2c98@local-library-path (lambda (aX2d79@filename) (aX979@aX7b5@library-path))) (set! aX2def@aX2c98@local-library-path aX2c98@local-library-path) (set! aX2c9a@load/args (lambda (aX2d7b@filename . aX2d7d@args) (begin (apply aX2caa@load-r6rs-top-level aX2d7b@filename 'load aX2d7d@args) (void)))) (set! aX2df0@aX2c9a@load/args aX2c9a@load/args) (set! aX2c9c@load (lambda (aX2d7f@filename) (begin (apply aX2caa@load-r6rs-top-level aX2d7f@filename 'load (aX2c96@command-line)) (void)))) (set! aX2df1@aX2c9c@load aX2c9c@load) (set! aX2c9e@ironscheme-build (lambda () (aX2c9c@load '"ironscheme-buildscript.ss"))) (set! aX2df2@aX2c9e@ironscheme-build aX2c9e@ironscheme-build) (set! aX2ca0@eval-top-level (lambda (aX2d81@x) (aX28a6@aXe3c@eval aX2d81@x (aX28bd@aXe6a@interaction-environment)))) (set! aX2df3@aX2ca0@eval-top-level aX2ca0@eval-top-level) (set! aX2ca2@compile-system-libraries (lambda () (aX2ca0@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! aX2df4@aX2ca2@compile-system-libraries aX2ca2@compile-system-libraries) (set! aX2ca4@compile (lambda (aX2d83@filename) (aX2caa@load-r6rs-top-level aX2d83@filename 'compile))) (set! aX2df5@aX2ca4@compile aX2ca4@compile) (set! aX2ca6@compile->closure (lambda (aX2d85@filename) (aX2caa@load-r6rs-top-level aX2d85@filename 'closure))) (set! aX2df6@aX2ca6@compile->closure aX2ca6@compile->closure) (set! aX2ca8@pre-compile-r6rs-file (lambda (aX2d87@filename) (aX2caa@load-r6rs-top-level aX2d87@filename 'compile))) (set! aX2df7@aX2ca8@pre-compile-r6rs-file aX2ca8@pre-compile-r6rs-file) (set! aX2caa@load-r6rs-top-level (lambda (aX2d89@filename aX2d8a@how . aX2d8d@args) (begin (aX979@aX7b5@library-path (aX2c98@local-library-path aX2d89@filename)) (let ((aX2d8f@x* (with-input-from-file aX2d89@filename (lambda () (let aX2d91@f () (let ((aX2d93@x (aX6b1@aX581@read-annotated))) (if (eof-object? aX2d93@x) '() (cons aX2d93@x (aX2d91@f))))))))) (let ((aX2d95@t aX2d8a@how)) (if (memv aX2d95@t '(closure)) (aX28bc@aXe68@pre-compile-r6rs-top-level aX2d8f@x*) (if (memv aX2d95@t '(load)) (begin (aX2c96@command-line (cons aX2d89@filename (car aX2d8d@args))) (aX6c0@aX59f@mosh-cache-dir (create-mosh-cache-dir)) (if (aX6c0@aX59f@mosh-cache-dir) (gensym-prefix-set! (aX2cb0@prefix-inc! (string-append (aX6c0@aX59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aX2d97@file) ((call/cc (lambda (aX2d9b@aX2d99) (lambda () (with-exception-handler (lambda (aX2d9d@c) ((call/cc (lambda (aX2d9f@aX2d9a) (aX2d9b@aX2d99 (lambda () (if '#t '#t (aX2d9f@aX2d9a (lambda () (raise-continuable aX2d9d@c)))))))))) (lambda () (delete-file (string-append (aX6c0@aX59f@mosh-cache-dir) '"/" aX2d97@file))))))))) (directory-list (aX6c0@aX59f@mosh-cache-dir))) (void)) (let ((aX2da1@compiled (aX28bb@aXe66@compile-r6rs-top-level aX2d8f@x*))) (begin (if (and (aX6c0@aX59f@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aX97d@aX7bd@serialize-all aX6ba@aX593@serialize-library aX716@aX6cf@compile-core-expr) (void)) (aX2da1@compiled)))) (if (memv aX2d95@t '(compile)) (begin (aX28bb@aXe66@compile-r6rs-top-level aX2d8f@x*) (aX97d@aX7bd@serialize-all aX6ba@aX593@serialize-library aX716@aX6cf@compile-core-expr)) (if '#f '#f (void)))))))))) (set! aX2df8@aX2caa@load-r6rs-top-level aX2caa@load-r6rs-top-level) (set! aX2cac@load-r6rs-top-level-sexp (lambda (aX2da3@import-spec aX2da4@thunk) (let ((aX2daf@aX2da8 aX979@aX7b5@library-path) (aX2db0@aX2daa aX6c0@aX59f@mosh-cache-dir) (aX2db1@aX2dac (aX2c98@local-library-path '"")) (aX2db2@aX2dae (create-mosh-cache-dir))) (let ((aX2db7@swap (lambda () (begin (let ((aX2db9@t (aX2daf@aX2da8))) (begin (aX2daf@aX2da8 aX2db1@aX2dac) (set! aX2db1@aX2dac aX2db9@t))) (let ((aX2dbb@t (aX2db0@aX2daa))) (begin (aX2db0@aX2daa aX2db2@aX2dae) (set! aX2db2@aX2dae aX2dbb@t))))))) (dynamic-wind aX2db7@swap (lambda () (begin (if (aX6c0@aX59f@mosh-cache-dir) (gensym-prefix-set! (aX2cb0@prefix-inc! (string-append (aX6c0@aX59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((aX2dc1@aX2dbe aX2c96@command-line) (aX2dc2@aX2dc0 '())) (let ((aX2dc5@swap (lambda () (let ((aX2dc7@t (aX2dc1@aX2dbe))) (begin (aX2dc1@aX2dbe aX2dc2@aX2dc0) (set! aX2dc2@aX2dc0 aX2dc7@t)))))) (dynamic-wind aX2dc5@swap (lambda () ((aX28bb@aXe66@compile-r6rs-top-level (list (cons 'import aX2da3@import-spec) (list aX2da4@thunk))))) aX2dc5@swap))))) aX2db7@swap))))) (set! aX2df9@aX2cac@load-r6rs-top-level-sexp aX2cac@load-r6rs-top-level-sexp) (set! aX2cae@prefix-inc (lambda (aX2dc9@prefix-string) (let ((aX2dcb@prefix (symbol->string aX2dc9@prefix-string))) (let ((aX2dcd@len (string-length aX2dcb@prefix))) (let aX2dd5@loop ((aX2dcf@i (- aX2dcd@len '1)) (aX2dd0@carry? '#t) (aX2dd1@accum '())) (if (< aX2dcf@i '0) (string->symbol (list->string (if aX2dd0@carry? (cons '#\a aX2dd1@accum) aX2dd1@accum))) (if aX2dd0@carry? (let ((aX2dd7@next-integer (+ '1 (char->integer (string-ref aX2dcb@prefix aX2dcf@i))))) (if (= aX2dd7@next-integer '123) (aX2dd5@loop (- aX2dcf@i '1) '#f (cons '#\A aX2dd1@accum)) (if (= aX2dd7@next-integer '91) (aX2dd5@loop (- aX2dcf@i '1) '#t (cons '#\a aX2dd1@accum)) (aX2dd5@loop (- aX2dcf@i '1) '#f (cons (integer->char aX2dd7@next-integer) aX2dd1@accum))))) (aX2dd5@loop (- aX2dcf@i '1) '#f (cons (string-ref aX2dcb@prefix aX2dcf@i) aX2dd1@accum))))))))) (set! aX2dfa@aX2cae@prefix-inc aX2cae@prefix-inc) (set! aX2cb0@prefix-inc! (lambda (aX2dd9@file) (begin (if (not (file-exists? aX2dd9@file)) (call-with-output-file aX2dd9@file (lambda (aX2ddb@port) (write 'd aX2ddb@port))) (void)) (let ((aX2ddd@prefix (call-with-input-file aX2dd9@file read))) (if (main-vm?) (let ((aX2ddf@next-prefix (aX2cae@prefix-inc aX2ddd@prefix))) (begin (call-with-port (open-file-output-port aX2dd9@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (aX2de1@port) (write aX2ddf@next-prefix aX2de1@port))) aX2ddd@prefix)) aX2ddd@prefix))))) (set! aX2dfb@aX2cb0@prefix-inc! aX2cb0@prefix-inc!) (begin (aX97e@aX7bf@current-precompiled-library-loader aX6bb@aX595@load-serialized-library) (set-symbol-value! 'load aX2c9c@load) (set-symbol-value! 'pre-compile-r6rs-file aX2ca8@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs aX2ca0@eval-top-level) (set-symbol-value! 'int-env-syms aX289d@aXe2a@interaction-environment-symbols) (set-symbol-value! 'expanded2core aX715@aX6cd@expanded->core) (set-symbol-value! 'trace-printer aX2c94@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (aX2cb1@c) (condition (aX2bdd@aX29e7@make-non-continuable-violation) (aX2bd3@aX29ce@make-who-condition 'raise) (aX2b97@aX292f@make-message-condition '"returned from non-continuable exception") (aX2bc9@aX29b3@make-irritants-condition (list aX2cb1@c))))) (aX2c86@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (aX2c86@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (aX2c84@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (aX2c84@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (aX2c84@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((aX2cb3@prefix (lambda (aX2cb5@ext aX2cb6@ls) (append (map (lambda (aX2cb9@x) (string-append aX2cb5@ext aX2cb9@x)) aX2cb6@ls) aX2cb6@ls)))) (aX97a@aX7b7@library-extensions (aX2cb3@prefix '".mosh" (aX97a@aX7b7@library-extensions)))) (current-exception-handler (lambda (aX2cbb@c) (if (condition? aX2cbb@c) (aX2c8c@condition-printer aX2cbb@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" aX2cbb@c)))) (if ((call/cc (lambda (aX2cbf@aX2cbd) (lambda () (with-exception-handler (lambda (aX2cc1@c) ((call/cc (lambda (aX2cc3@aX2cbe) (aX2cbf@aX2cbd (lambda () (if '#t '#f (aX2cc3@aX2cbe (lambda () (raise-continuable aX2cc1@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (aX2cac@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (aX2c96@command-line)) (let ((aX2ccd@aX2cc6 aX2c96@command-line) (aX2cce@aX2cc8 aX6c0@aX59f@mosh-cache-dir) (aX2ccf@aX2cca '()) (aX2cd0@aX2ccc (create-mosh-cache-dir))) (let ((aX2cd5@swap (lambda () (begin (let ((aX2cd7@t (aX2ccd@aX2cc6))) (begin (aX2ccd@aX2cc6 aX2ccf@aX2cca) (set! aX2ccf@aX2cca aX2cd7@t))) (let ((aX2cd9@t (aX2cce@aX2cc8))) (begin (aX2cce@aX2cc8 aX2cd0@aX2ccc) (set! aX2cd0@aX2ccc aX2cd9@t))))))) (dynamic-wind aX2cd5@swap (lambda () (begin (if (aX6c0@aX59f@mosh-cache-dir) (gensym-prefix-set! (aX2cb0@prefix-inc! (string-append (aX6c0@aX59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (aX2c92@repl))) aX2cd5@swap))) (begin (aX979@aX7b5@library-path (aX2c98@local-library-path (car (aX2c96@command-line)))) (set! aX2c82@x* (with-input-from-file (car (aX2c96@command-line)) (lambda () (let aX2cdb@f () (let ((aX2cdd@x (aX6b1@aX581@read-annotated))) (if (eof-object? aX2cdd@x) '() (cons aX2cdd@x (aX2cdb@f)))))))) (aX2c96@command-line (cons (car (aX2c96@command-line)) (cdr (aX2c96@command-line)))) (aX6c0@aX59f@mosh-cache-dir (create-mosh-cache-dir)) (if (aX6c0@aX59f@mosh-cache-dir) (gensym-prefix-set! (aX2cb0@prefix-inc! (string-append (aX6c0@aX59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aX2cdf@file) ((call/cc (lambda (aX2ce3@aX2ce1) (lambda () (with-exception-handler (lambda (aX2ce5@c) ((call/cc (lambda (aX2ce7@aX2ce2) (aX2ce3@aX2ce1 (lambda () (if '#t '#t (aX2ce7@aX2ce2 (lambda () (raise-continuable aX2ce5@c)))))))))) (lambda () (delete-file (string-append (aX6c0@aX59f@mosh-cache-dir) '"/" aX2cdf@file))))))))) (directory-list (aX6c0@aX59f@mosh-cache-dir))) (void)) (let ((aX2ce9@compiled (aX28bb@aXe66@compile-r6rs-top-level aX2c82@x*))) (begin (if (and (aX6c0@aX59f@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aX97d@aX7bd@serialize-all aX6ba@aX593@serialize-library aX716@aX6cf@compile-core-expr) (void)) (aX2ce9@compiled))))))))
