;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! pk58f@library-file-path->cache-path (unspecified)) (set! pk591@read-annotated (unspecified)) (set! pk593@annotation-stripped (unspecified)) (set! pk595@annotation? (unspecified)) (set! pk597@annotation-source (unspecified)) (set! pk599@annotation-expression (unspecified)) (set! pk59b@scm->fasl (unspecified)) (set! pk59d@fasl-save (unspecified)) (set! pk59f@fasl-load (unspecified)) (set! pk5a1@verbose? (unspecified)) (set! pk5a3@serialize-library (unspecified)) (set! pk5a5@load-serialized-library (unspecified)) (set! pk5a7@make-record-printer (unspecified)) (set! pk5a9@compile-core (unspecified)) (set! pk5ab@read-library-source-file (unspecified)) (set! pk5ad@make-parameter (unspecified)) (set! pk5af@mosh-cache-dir (unspecified)) (set! pk645@file-options-spec (unspecified)) (set! pk58f@library-file-path->cache-path (lambda (pk646@x) (call-with-values (lambda () (open-string-output-port)) (lambda (pk64c@pk649 pk64d@pk64b) (let ((pk650@extract pk64d@pk64b) (pk651@p pk64c@pk649)) (letrec* ((pk655@display-hex (lambda (pk65e@n) (if (<= '0 pk65e@n '9) (display pk65e@n pk651@p) (display (integer->char (+ (char->integer '#\a) (- pk65e@n '10))) pk651@p))))) (begin (let pk658@f ((pk656@ls (string-split pk646@x '#\/))) (if (not (null? pk656@ls)) (begin (display '"_" pk651@p) (for-each (lambda (pk65a@c) (if (or (char<=? '#\a pk65a@c '#\z) (char<=? '#\A pk65a@c '#\Z) (char<=? '#\0 pk65a@c '#\9) (memv pk65a@c '(#\- #\. #\_ #\~))) (display pk65a@c pk651@p) (begin (display '"%" pk651@p) (let ((pk65c@n (char->integer pk65a@c))) (begin (pk655@display-hex (quotient pk65c@n '16)) (pk655@display-hex (remainder pk65c@n '16))))))) (string->list (car pk656@ls))) (pk658@f (cdr pk656@ls))) (void))) (pk650@extract)))))))) (set! pk6c0@pk58f@library-file-path->cache-path pk58f@library-file-path->cache-path) (set! pk591@read-annotated read) (set! pk6c1@pk591@read-annotated pk591@read-annotated) (set! pk593@annotation-stripped (lambda (pk660@x) (if (pair? pk660@x) (cons (pk593@annotation-stripped (car pk660@x)) (pk593@annotation-stripped (cdr pk660@x))) (if (procedure? pk660@x) (set-source-info! pk660@x '#f) pk660@x)))) (set! pk6c2@pk593@annotation-stripped pk593@annotation-stripped) (set! pk595@annotation? (lambda (pk662@x) (or (and (annotated-pair? pk662@x) (source-info pk662@x)) (and (procedure? pk662@x) (source-info pk662@x))))) (set! pk6c3@pk595@annotation? pk595@annotation?) (set! pk597@annotation-source (lambda (pk664@x) (source-info pk664@x))) (set! pk6c4@pk597@annotation-source pk597@annotation-source) (set! pk599@annotation-expression (lambda (pk666@x) (if (annotated-pair? pk666@x) (cons (car pk666@x) (cdr pk666@x)) (if (procedure? pk666@x) (set-source-info! pk666@x '#f) pk666@x)))) (set! pk6c5@pk599@annotation-expression pk599@annotation-expression) (set! pk59b@scm->fasl (lambda (pk668@filename) (string-append (pk5af@mosh-cache-dir) '"/" (pk58f@library-file-path->cache-path pk668@filename) '".mosh-fasl"))) (set! pk6c6@pk59b@scm->fasl pk59b@scm->fasl) (set! pk59d@fasl-save (lambda (pk66a@filename pk66b@obj) (call-with-port (open-file-output-port pk66a@filename) (lambda (pk66e@port) ((symbol-value 'fasl-write!) pk66b@obj pk66e@port))))) (set! pk6c7@pk59d@fasl-save pk59d@fasl-save) (set! pk59f@fasl-load (lambda (pk670@filename) (call-with-port (open-file-input-port pk670@filename) (symbol-value 'fasl-read!)))) (set! pk6c8@pk59f@fasl-load pk59f@fasl-load) (set! pk5a1@verbose? (symbol-value '%verbose)) (set! pk6c9@pk5a1@verbose? pk5a1@verbose?) (set! pk5a3@serialize-library (lambda (pk672@filename pk673@obj) (begin (if pk5a1@verbose? (format (current-error-port) '"serialize-library ~a\n..." pk672@filename) (void)) (let ((pk676@expanded2core (symbol-value 'expanded2core))) (let ((pk678@compile (symbol-value 'compile-w/o-halt))) (let ((pk67a@code pk673@obj)) (let ((pk67c@pivot (cddddr (cddddr pk67a@code)))) (let ((pk67e@visit (pk678@compile (pk676@expanded2core (car pk67c@pivot))))) (begin (set-car! pk67c@pivot pk67e@visit) (let ((pk680@pivot (cdr pk67c@pivot))) (let ((pk682@invoke (pk678@compile (pk676@expanded2core (car pk680@pivot))))) (set-car! pk680@pivot pk682@invoke))))))))) (let ((pk684@fasl-file (pk59b@scm->fasl pk672@filename))) (begin (if (file-exists? pk684@fasl-file) (delete-file pk684@fasl-file) (void)) ((call/cc (lambda (pk688@pk686) (lambda () (with-exception-handler (lambda (pk68a@c) ((call/cc (lambda (pk68c@pk687) (pk688@pk686 (lambda () (if '#t (begin (if pk5a1@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" pk672@filename) (void)) (if (file-exists? pk684@fasl-file) (delete-file pk684@fasl-file) (void)) '#f) (pk68c@pk687 (lambda () (raise-continuable pk68a@c)))))))))) (lambda () (pk59d@fasl-save pk684@fasl-file pk673@obj)))))))))))) (set! pk6ca@pk5a3@serialize-library pk5a3@serialize-library) (set! pk5a5@load-serialized-library (lambda (pk68e@filename pk68f@obj) (and (pk5af@mosh-cache-dir) (let ((pk692@fasl-file (pk59b@scm->fasl pk68e@filename))) (if (and (file-exists? pk692@fasl-file) ((symbol-value 'file-newer?) pk692@fasl-file pk68e@filename)) (let ((pk694@expanded2core (symbol-value 'expanded2core))) (let ((pk696@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((pk698@code (pk59f@fasl-load pk692@fasl-file))) (let ((pk69a@pivot (cddddr (cddddr pk698@code)))) (let ((pk69c@visit (car pk69a@pivot))) (let ((pk69e@visit-proc (lambda () (pk696@eval-compiled-core pk69c@visit)))) (begin (set-car! pk69a@pivot pk69e@visit-proc) (let ((pk6a0@pivot (cdr pk69a@pivot))) (let ((pk6a2@invoke (car pk6a0@pivot))) (begin (set-car! pk6a0@pivot (lambda () (pk696@eval-compiled-core pk6a2@invoke))) (apply pk68f@obj pk698@code))))))))))) '#f))))) (set! pk6cb@pk5a5@load-serialized-library pk5a5@load-serialized-library) (set! pk5a7@make-record-printer (lambda (pk6a4@name pk6a5@printer) (lambda pk6a8@x (begin (display '"record printer") (for-each display pk6a8@x))))) (set! pk6cc@pk5a7@make-record-printer pk5a7@make-record-printer) (set! pk5a9@compile-core (lambda pk6aa@x (apply error 'comile-core '"not implementated" pk6aa@x))) (set! pk6cd@pk5a9@compile-core pk5a9@compile-core) (set! pk5ab@read-library-source-file (lambda (pk6ac@file-name) (with-input-from-file pk6ac@file-name pk591@read-annotated))) (set! pk6ce@pk5ab@read-library-source-file pk5ab@read-library-source-file) (set! pk5ad@make-parameter (lambda pk6bc (let ((pk6bd (length pk6bc))) (if (= pk6bd '1) (apply (lambda (pk6ae@x) (pk5ad@make-parameter pk6ae@x (lambda (pk6b0@x) pk6b0@x))) pk6bc) (if (= pk6bd '2) (apply (lambda (pk6b2@x pk6b3@fender) (let ((pk6b6@x (pk6b3@fender pk6b2@x))) (lambda pk6ba (let ((pk6bb (length pk6ba))) (if (= pk6bb '0) (apply (lambda () pk6b6@x) pk6ba) (if (= pk6bb '1) (apply (lambda (pk6b8@v) (set! pk6b6@x (pk6b3@fender pk6b8@v))) pk6ba) (error 'apply '"invalid arg count"))))))) pk6bc) (error 'apply '"invalid arg count")))))) (set! pk6cf@pk5ad@make-parameter pk5ad@make-parameter) (set! pk5af@mosh-cache-dir (pk5ad@make-parameter '#f)) (set! pk6d0@pk5af@mosh-cache-dir pk5af@mosh-cache-dir) (set! pk645@file-options-spec (lambda (pk6be@x) pk6be@x)) (set! pk6d1@pk645@file-options-spec pk645@file-options-spec) (void))
(begin (set! pk6d7@current-primitive-locations (unspecified)) (set! pk6d9@mutable? (unspecified)) (set! pk6db@rewriter (unspecified)) (set! pk6dd@expanded->core (unspecified)) (set! pk6df@compile-core-expr (unspecified)) (set! pk6e1@pretty-print (unspecified)) (set! pk6e3@compile-core-expr-to-port (unspecified)) (set! pk6d7@current-primitive-locations (pk6cf@pk5ad@make-parameter (lambda (pk6e4@x) '#f) (lambda (pk6e6@p) pk6e6@p))) (set! pk722@pk6d7@current-primitive-locations pk6d7@current-primitive-locations) (set! pk6d9@mutable? (lambda (pk6e8@x) (or (pair? pk6e8@x) (vector? pk6e8@x) (hashtable? pk6e8@x)))) (set! pk723@pk6d9@mutable? pk6d9@mutable?) (set! pk6db@rewriter (lambda (pk6ea@quote-hack?) (letrec* ((pk6ed@f (lambda (pk6ee@x) (if (pair? pk6ee@x) (let ((pk6f0@t (car pk6ee@x))) (if (memv pk6f0@t '(quote)) (if (and pk6ea@quote-hack? (pk6d9@mutable? (cadr pk6ee@x))) (let ((pk6f2@g (gensym))) (begin (set-symbol-value! pk6f2@g (cadr pk6ee@x)) pk6f2@g)) pk6ee@x) (if (memv pk6f0@t '(case-lambda)) (cons 'case-lambda (map (lambda (pk6f4@x) (cons (car pk6f4@x) (map pk6ed@f (cdr pk6f4@x)))) (cdr pk6ee@x))) (if (memv pk6f0@t '(lambda)) (cons* 'lambda (cadr pk6ee@x) (map pk6ed@f (cddr pk6ee@x))) (if (memv pk6f0@t '(letrec)) (let ((pk6f6@bindings (cadr pk6ee@x)) (pk6f7@body* (cddr pk6ee@x))) (let ((pk6fa@lhs* (map car pk6f6@bindings)) (pk6fb@rhs* (map cadr pk6f6@bindings))) (cons* 'letrec (map list pk6fa@lhs* (map pk6ed@f pk6fb@rhs*)) (map pk6ed@f pk6f7@body*)))) (if (memv pk6f0@t '(letrec*)) (let ((pk6fe@bindings (cadr pk6ee@x)) (pk6ff@body* (cddr pk6ee@x))) (let ((pk702@lhs* (map car pk6fe@bindings)) (pk703@rhs* (map cadr pk6fe@bindings))) (cons* 'letrec* (map list pk702@lhs* (map pk6ed@f pk703@rhs*)) (map pk6ed@f pk6ff@body*)))) (if (memv pk6f0@t '(library-letrec*)) (let ((pk706@name (cadr pk6ee@x)) (pk707@x (cdr pk6ee@x))) (let ((pk70a@bindings (cadr pk707@x)) (pk70b@body* (cddr pk707@x))) (let ((pk70e@lhs* (map car pk70a@bindings)) (pk70f@lhs** (map cadr pk70a@bindings)) (pk710@rhs* (map caddr pk70a@bindings))) (cons* 'library-letrec* pk706@name (map list pk70e@lhs* pk70f@lhs** (map pk6ed@f pk710@rhs*)) (map pk6ed@f pk70b@body*))))) (if (memv pk6f0@t '(begin)) (cons 'begin (map pk6ed@f (cdr pk6ee@x))) (if (memv pk6f0@t '(set!)) (list 'set! (cadr pk6ee@x) (pk6ed@f (caddr pk6ee@x))) (if (memv pk6f0@t '(primitive)) (let ((pk714@op (cadr pk6ee@x))) (let ((pk716@t ((pk6d7@current-primitive-locations) pk714@op))) (if pk716@t ((lambda (pk718@loc) pk718@loc) pk716@t) pk714@op))) (if (memv pk6f0@t '(define)) pk6ee@x (if (list? pk6ee@x) (map pk6ed@f pk6ee@x) (error 'rewrite '"invalid form ~s ~s" pk6ee@x (list? pk6ee@x)))))))))))))) pk6ee@x)))) pk6ed@f))) (set! pk724@pk6db@rewriter pk6db@rewriter) (set! pk6dd@expanded->core (lambda (pk71a@x) ((pk6db@rewriter '#f) pk71a@x))) (set! pk725@pk6dd@expanded->core pk6dd@expanded->core) (set! pk6df@compile-core-expr (lambda (pk71c@x) ((pk6db@rewriter '#f) pk71c@x))) (set! pk726@pk6df@compile-core-expr pk6df@compile-core-expr) (set! pk6e1@pretty-print write) (set! pk727@pk6e1@pretty-print pk6e1@pretty-print) (set! pk6e3@compile-core-expr-to-port (lambda (pk71e@x pk71f@p) (pk6e1@pretty-print ((pk6db@rewriter '#f) pk71e@x) pk71f@p))) (set! pk728@pk6e3@compile-core-expr-to-port pk6e3@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! pk777@make-collection (unspecified)) (set! pk779@current-library-collection (unspecified)) (set! pk77b@rp (unspecified)) (set! pk785@library? (unspecified)) (set! pk787@library-id (unspecified)) (set! pk789@set-library-id! (unspecified)) (set! pk78b@library-name (unspecified)) (set! pk78d@set-library-name! (unspecified)) (set! pk78f@library-version (unspecified)) (set! pk791@set-library-version! (unspecified)) (set! pk793@library-imp* (unspecified)) (set! pk795@set-library-imp*! (unspecified)) (set! pk797@library-vis* (unspecified)) (set! pk799@set-library-vis*! (unspecified)) (set! pk79b@library-inv* (unspecified)) (set! pk79d@set-library-inv*! (unspecified)) (set! pk79f@library-subst (unspecified)) (set! pk7a1@set-library-subst! (unspecified)) (set! pk7a3@library-env (unspecified)) (set! pk7a5@set-library-env! (unspecified)) (set! pk7a7@library-visit-state (unspecified)) (set! pk7a9@set-library-visit-state! (unspecified)) (set! pk7ab@library-invoke-state (unspecified)) (set! pk7ad@set-library-invoke-state! (unspecified)) (set! pk7af@library-visit-code (unspecified)) (set! pk7b1@set-library-visit-code! (unspecified)) (set! pk7b3@library-invoke-code (unspecified)) (set! pk7b5@set-library-invoke-code! (unspecified)) (set! pk7b7@library-visible? (unspecified)) (set! pk7b9@set-library-visible?! (unspecified)) (set! pk7bb@library-source-file-name (unspecified)) (set! pk7bd@set-library-source-file-name! (unspecified)) (set! pk7bf@dummy (unspecified)) (set! pk7c1@find-dependencies (unspecified)) (set! pk7c3@find-library-by (unspecified)) (set! pk7c5@library-path (unspecified)) (set! pk7c7@library-extensions (unspecified)) (set! pk7c9@library-name->file-name (unspecified)) (set! pk7cb@file-locator (unspecified)) (set! pk7cd@serialize-all (unspecified)) (set! pk7cf@current-precompiled-library-loader (unspecified)) (set! pk7d1@try-load-from-file (unspecified)) (set! pk7d3@library-loader (unspecified)) (set! pk7d5@current-library-expander (unspecified)) (set! pk7d7@external-pending-libraries (unspecified)) (set! pk7d9@find-external-library (unspecified)) (set! pk7db@find-library-by-name (unspecified)) (set! pk7dd@library-exists? (unspecified)) (set! pk7df@find-library-by-spec/die (unspecified)) (set! pk7e1@label->binding-table (unspecified)) (set! pk7e3@install-library-record (unspecified)) (set! pk7e5@install-library (unspecified)) (set! pk7e7@imported-label->binding (unspecified)) (set! pk7e9@invoke-library (unspecified)) (set! pk7eb@visit-library (unspecified)) (set! pk7ed@invoke-library-by-spec (unspecified)) (set! pk7ef@installed-libraries (unspecified)) (set! pk7f1@library-spec (unspecified)) (set! pk777@make-collection (lambda () (let ((pk7f2@set '())) (letrec* ((pk7f5@set-cons (lambda (pk7fa@x pk7fb@ls) (if (memq pk7fa@x pk7fb@ls) pk7fb@ls (cons pk7fa@x pk7fb@ls))))) (lambda pk7f8 (let ((pk7f9 (length pk7f8))) (if (= pk7f9 '0) (apply (lambda () pk7f2@set) pk7f8) (if (= pk7f9 '1) (apply (lambda (pk7f6@x) (set! pk7f2@set (pk7f5@set-cons pk7f6@x pk7f2@set))) pk7f8) (error 'apply '"invalid arg count"))))))))) (set! pk966@pk777@make-collection pk777@make-collection) (set! pk779@current-library-collection (pk6cf@pk5ad@make-parameter (pk777@make-collection) (lambda (pk7fe@x) (begin (if (not (procedure? pk7fe@x)) (assertion-violation 'current-library-collection '"not a procedure" pk7fe@x) (void)) pk7fe@x)))) (set! pk967@pk779@current-library-collection pk779@current-library-collection) (set! pk77b@rp (pk6cc@pk5a7@make-record-printer 'library (lambda (pk800@x pk801@p pk802@wr) (begin (if (not (pk785@library? pk800@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (pk78f@library-version pk800@x)) (pk78b@library-name pk800@x) (append (pk78b@library-name pk800@x) (list (pk78f@library-version pk800@x))))) pk801@p))))) (set! pk968@pk77b@rp pk77b@rp) (set! pk785@library? (lambda (pk806@x) (and (simple-struct? pk806@x) (eq? (simple-struct-name pk806@x) 'library)))) (set! pk969@pk785@library? pk785@library?) (set! pk787@library-id (lambda (pk808@x) (simple-struct-ref pk808@x '0))) (set! pk96a@pk787@library-id pk787@library-id) (set! pk789@set-library-id! (lambda (pk80a@x pk80b@val) (simple-struct-set! pk80a@x '0 pk80b@val))) (set! pk96b@pk789@set-library-id! pk789@set-library-id!) (set! pk78b@library-name (lambda (pk80e@x) (simple-struct-ref pk80e@x '1))) (set! pk96c@pk78b@library-name pk78b@library-name) (set! pk78d@set-library-name! (lambda (pk810@x pk811@val) (simple-struct-set! pk810@x '1 pk811@val))) (set! pk96d@pk78d@set-library-name! pk78d@set-library-name!) (set! pk78f@library-version (lambda (pk814@x) (simple-struct-ref pk814@x '2))) (set! pk96e@pk78f@library-version pk78f@library-version) (set! pk791@set-library-version! (lambda (pk816@x pk817@val) (simple-struct-set! pk816@x '2 pk817@val))) (set! pk96f@pk791@set-library-version! pk791@set-library-version!) (set! pk793@library-imp* (lambda (pk81a@x) (simple-struct-ref pk81a@x '3))) (set! pk970@pk793@library-imp* pk793@library-imp*) (set! pk795@set-library-imp*! (lambda (pk81c@x pk81d@val) (simple-struct-set! pk81c@x '3 pk81d@val))) (set! pk971@pk795@set-library-imp*! pk795@set-library-imp*!) (set! pk797@library-vis* (lambda (pk820@x) (simple-struct-ref pk820@x '4))) (set! pk972@pk797@library-vis* pk797@library-vis*) (set! pk799@set-library-vis*! (lambda (pk822@x pk823@val) (simple-struct-set! pk822@x '4 pk823@val))) (set! pk973@pk799@set-library-vis*! pk799@set-library-vis*!) (set! pk79b@library-inv* (lambda (pk826@x) (simple-struct-ref pk826@x '5))) (set! pk974@pk79b@library-inv* pk79b@library-inv*) (set! pk79d@set-library-inv*! (lambda (pk828@x pk829@val) (simple-struct-set! pk828@x '5 pk829@val))) (set! pk975@pk79d@set-library-inv*! pk79d@set-library-inv*!) (set! pk79f@library-subst (lambda (pk82c@x) (simple-struct-ref pk82c@x '6))) (set! pk976@pk79f@library-subst pk79f@library-subst) (set! pk7a1@set-library-subst! (lambda (pk82e@x pk82f@val) (simple-struct-set! pk82e@x '6 pk82f@val))) (set! pk977@pk7a1@set-library-subst! pk7a1@set-library-subst!) (set! pk7a3@library-env (lambda (pk832@x) (simple-struct-ref pk832@x '7))) (set! pk978@pk7a3@library-env pk7a3@library-env) (set! pk7a5@set-library-env! (lambda (pk834@x pk835@val) (simple-struct-set! pk834@x '7 pk835@val))) (set! pk979@pk7a5@set-library-env! pk7a5@set-library-env!) (set! pk7a7@library-visit-state (lambda (pk838@x) (simple-struct-ref pk838@x '8))) (set! pk97a@pk7a7@library-visit-state pk7a7@library-visit-state) (set! pk7a9@set-library-visit-state! (lambda (pk83a@x pk83b@val) (simple-struct-set! pk83a@x '8 pk83b@val))) (set! pk97b@pk7a9@set-library-visit-state! pk7a9@set-library-visit-state!) (set! pk7ab@library-invoke-state (lambda (pk83e@x) (simple-struct-ref pk83e@x '9))) (set! pk97c@pk7ab@library-invoke-state pk7ab@library-invoke-state) (set! pk7ad@set-library-invoke-state! (lambda (pk840@x pk841@val) (simple-struct-set! pk840@x '9 pk841@val))) (set! pk97d@pk7ad@set-library-invoke-state! pk7ad@set-library-invoke-state!) (set! pk7af@library-visit-code (lambda (pk844@x) (simple-struct-ref pk844@x '10))) (set! pk97e@pk7af@library-visit-code pk7af@library-visit-code) (set! pk7b1@set-library-visit-code! (lambda (pk846@x pk847@val) (simple-struct-set! pk846@x '10 pk847@val))) (set! pk97f@pk7b1@set-library-visit-code! pk7b1@set-library-visit-code!) (set! pk7b3@library-invoke-code (lambda (pk84a@x) (simple-struct-ref pk84a@x '11))) (set! pk980@pk7b3@library-invoke-code pk7b3@library-invoke-code) (set! pk7b5@set-library-invoke-code! (lambda (pk84c@x pk84d@val) (simple-struct-set! pk84c@x '11 pk84d@val))) (set! pk981@pk7b5@set-library-invoke-code! pk7b5@set-library-invoke-code!) (set! pk7b7@library-visible? (lambda (pk850@x) (simple-struct-ref pk850@x '12))) (set! pk982@pk7b7@library-visible? pk7b7@library-visible?) (set! pk7b9@set-library-visible?! (lambda (pk852@x pk853@val) (simple-struct-set! pk852@x '12 pk853@val))) (set! pk983@pk7b9@set-library-visible?! pk7b9@set-library-visible?!) (set! pk7bb@library-source-file-name (lambda (pk856@x) (simple-struct-ref pk856@x '13))) (set! pk984@pk7bb@library-source-file-name pk7bb@library-source-file-name) (set! pk7bd@set-library-source-file-name! (lambda (pk858@x pk859@val) (simple-struct-set! pk858@x '13 pk859@val))) (set! pk985@pk7bd@set-library-source-file-name! pk7bd@set-library-source-file-name!) (set! pk7bf@dummy '3) (set! pk986@pk7bf@dummy pk7bf@dummy) (set! pk7c1@find-dependencies (lambda (pk85c@ls) (if (null? pk85c@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! pk987@pk7c1@find-dependencies pk7c1@find-dependencies) (set! pk7c3@find-library-by (lambda (pk85e@pred) (let pk862@f ((pk860@ls ((pk779@current-library-collection)))) (if (null? pk860@ls) '#f (if (pk85e@pred (car pk860@ls)) (car pk860@ls) (pk862@f (cdr pk860@ls))))))) (set! pk988@pk7c3@find-library-by pk7c3@find-library-by) (set! pk7c5@library-path (pk6cf@pk5ad@make-parameter '(".") (lambda (pk864@x) (if (and (list? pk864@x) (for-all string? pk864@x)) (map (lambda (pk866@x) pk866@x) pk864@x) (assertion-violation 'library-path '"not a list of strings" pk864@x))))) (set! pk989@pk7c5@library-path pk7c5@library-path) (set! pk7c7@library-extensions (pk6cf@pk5ad@make-parameter '(".sls" ".ss" ".scm") (lambda (pk868@x) (if (and (list? pk868@x) (for-all string? pk868@x)) (map (lambda (pk86a@x) pk86a@x) pk868@x) (assertion-violation 'library-extensions '"not a list of strings" pk868@x))))) (set! pk98a@pk7c7@library-extensions pk7c7@library-extensions) (set! pk7c9@library-name->file-name (lambda (pk86c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (pk872@pk86f pk873@pk871) (let ((pk876@extract pk873@pk871) (pk877@p pk872@pk86f)) (letrec* ((pk87b@display-hex (lambda (pk884@n) (if (<= '0 pk884@n '9) (display pk884@n pk877@p) (display (integer->char (+ (char->integer '#\a) (- pk884@n '10))) pk877@p))))) (begin (let pk87e@f ((pk87c@ls pk86c@x)) (if (not (null? pk87c@ls)) (begin (display '"/" pk877@p) (for-each (lambda (pk880@c) (if (or (char<=? '#\a pk880@c '#\z) (char<=? '#\A pk880@c '#\Z) (char<=? '#\0 pk880@c '#\9) (memv pk880@c '(#\- #\. #\_ #\~))) (display pk880@c pk877@p) (begin (display '"%" pk877@p) (let ((pk882@n (char->integer pk880@c))) (begin (pk87b@display-hex (quotient pk882@n '16)) (pk87b@display-hex (remainder pk882@n '16))))))) (string->list (symbol->string (car pk87c@ls)))) (pk87e@f (cdr pk87c@ls))) (void))) (pk876@extract)))))))) (set! pk98b@pk7c9@library-name->file-name pk7c9@library-name->file-name) (set! pk7cb@file-locator (pk6cf@pk5ad@make-parameter (lambda (pk886@x) (let ((pk888@str (pk7c9@library-name->file-name pk886@x))) (let pk890@f ((pk88a@ls (pk7c5@library-path)) (pk88b@exts (pk7c7@library-extensions)) (pk88c@failed-list '())) (if (null? pk88a@ls) (letrec* ((pk89a@pk895 (make-record-type-descriptor '&library-resolution &condition-rtd 'pk898 '#f '#f '#((immutable library) (immutable files)))) (pk89c@pk897 '#f) (pk89e@pk896 (make-record-constructor-descriptor pk89a@pk895 &condition-rcd pk89c@pk897)) (pk8a1@pk894 (record-predicate pk89a@pk895)) (pk8a3@make-library-resolution-condition (record-constructor pk89e@pk896)) (pk8a5@pk892 (record-accessor pk89a@pk895 '0)) (pk8a7@pk893 (record-accessor pk89a@pk895 '1)) (pk8a9@library-resolution-condition? (condition-predicate pk89a@pk895)) (pk8ab@condition-library (condition-accessor pk89a@pk895 pk8a5@pk892)) (pk8ad@condition-files (condition-accessor pk89a@pk895 pk8a7@pk893))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (pk8a3@make-library-resolution-condition pk886@x (reverse pk88c@failed-list))))) (if (null? pk88b@exts) (pk890@f (cdr pk88a@ls) (pk7c7@library-extensions) pk88c@failed-list) (let ((pk8ae@name (string-append (car pk88a@ls) pk888@str (car pk88b@exts)))) (if (file-exists? pk8ae@name) pk8ae@name (pk890@f pk88a@ls (cdr pk88b@exts) (cons pk8ae@name pk88c@failed-list))))))))) (lambda (pk8b0@f) (if (procedure? pk8b0@f) pk8b0@f (assertion-violation 'file-locator '"not a procedure" pk8b0@f))))) (set! pk98c@pk7cb@file-locator pk7cb@file-locator) (set! pk7cd@serialize-all (lambda (pk8b2@serialize pk8b3@compile) (letrec* ((pk8b7@library-desc (lambda (pk8ba@x) (list (pk787@library-id pk8ba@x) (pk78b@library-name pk8ba@x))))) (for-each (lambda (pk8b8@x) (if (pk7bb@library-source-file-name pk8b8@x) (pk8b2@serialize (pk7bb@library-source-file-name pk8b8@x) (list (pk787@library-id pk8b8@x) (pk78b@library-name pk8b8@x) (pk78f@library-version pk8b8@x) (map pk8b7@library-desc (pk793@library-imp* pk8b8@x)) (map pk8b7@library-desc (pk797@library-vis* pk8b8@x)) (map pk8b7@library-desc (pk79b@library-inv* pk8b8@x)) (pk79f@library-subst pk8b8@x) (pk7a3@library-env pk8b8@x) (pk8b3@compile (pk7af@library-visit-code pk8b8@x)) (pk8b3@compile (pk7b3@library-invoke-code pk8b8@x)) (pk7b7@library-visible? pk8b8@x))) (void))) ((pk779@current-library-collection)))))) (set! pk98d@pk7cd@serialize-all pk7cd@serialize-all) (set! pk7cf@current-precompiled-library-loader (pk6cf@pk5ad@make-parameter (lambda (pk8bc@filename pk8bd@sk) '#f))) (set! pk98e@pk7cf@current-precompiled-library-loader pk7cf@current-precompiled-library-loader) (set! pk7d1@try-load-from-file (lambda (pk8c0@filename) ((pk7cf@current-precompiled-library-loader) pk8c0@filename (lambda pk8e6 (let ((pk8e7 (length pk8e6))) (if (= pk8e7 '11) (apply (lambda (pk8c2@id pk8c3@name pk8c4@ver pk8c5@imp* pk8c6@vis* pk8c7@inv* pk8c8@exp-subst pk8c9@exp-env pk8ca@visit-proc pk8cb@invoke-proc pk8cc@visible?) (let pk8da@f ((pk8d8@deps (append pk8c5@imp* pk8c6@vis* pk8c7@inv*))) (if (null? pk8d8@deps) (begin (pk7e5@install-library pk8c2@id pk8c3@name pk8c4@ver pk8c5@imp* pk8c6@vis* pk8c7@inv* pk8c8@exp-subst pk8c9@exp-env pk8ca@visit-proc pk8cb@invoke-proc '#f '#f pk8cc@visible? '#f) '#t) (let ((pk8dc@d (car pk8d8@deps))) (let ((pk8de@label (car pk8dc@d)) (pk8df@dname (cadr pk8dc@d))) (let ((pk8e2@l (pk7db@find-library-by-name pk8df@dname))) (if (and (pk785@library? pk8e2@l) (eq? pk8de@label (pk787@library-id pk8e2@l))) (pk8da@f (cdr pk8d8@deps)) (begin (if pk6c9@pk5a1@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" pk8c3@name pk8df@dname pk8c0@filename) (void)) '#f)))))))) pk8e6) (if (>= pk8e7 '0) (apply (lambda pk8e4@others '#f) pk8e6) (error 'apply '"invalid arg count")))))))) (set! pk98f@pk7d1@try-load-from-file pk7d1@try-load-from-file) (set! pk7d3@library-loader (pk6cf@pk5ad@make-parameter (lambda (pk8e8@x) (let ((pk8ea@file-name ((pk7cb@file-locator) pk8e8@x))) (if (not pk8ea@file-name) (assertion-violation '#f '"cannot file library" pk8e8@x) (or (pk7d1@try-load-from-file pk8ea@file-name) ((pk7d5@current-library-expander) (pk6ce@pk5ab@read-library-source-file pk8ea@file-name) pk8ea@file-name (lambda (pk8ec@name) (if (not (fast-equal? pk8ec@name pk8e8@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (pk8f2@pk8ef pk8f3@pk8f1) (let ((pk8f6@e pk8f3@pk8f1) (pk8f7@p pk8f2@pk8ef)) (begin (display '"expected to find library " pk8f7@p) (write pk8e8@x pk8f7@p) (display '" in file " pk8f7@p) (display pk8ea@file-name pk8f7@p) (display '", found " pk8f7@p) (write pk8ec@name pk8f7@p) (display '" instead" pk8f7@p) (pk8f6@e)))))) (void)))))))) (lambda (pk8fa@f) (if (procedure? pk8fa@f) pk8fa@f (assertion-violation 'library-locator '"not a procedure" pk8fa@f))))) (set! pk990@pk7d3@library-loader pk7d3@library-loader) (set! pk7d5@current-library-expander (pk6cf@pk5ad@make-parameter (lambda (pk8fc@x) (assertion-violation 'library-expander '"not initialized")) (lambda (pk8fe@f) (if (procedure? pk8fe@f) pk8fe@f (assertion-violation 'library-expander '"not a procedure" pk8fe@f))))) (set! pk991@pk7d5@current-library-expander pk7d5@current-library-expander) (set! pk7d7@external-pending-libraries (pk6cf@pk5ad@make-parameter '())) (set! pk992@pk7d7@external-pending-libraries pk7d7@external-pending-libraries) (set! pk7d9@find-external-library (lambda (pk900@name) (begin (if (member pk900@name (pk7d7@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" pk900@name) (void)) (let ((pk906@pk903 pk7d7@external-pending-libraries) (pk907@pk905 (cons pk900@name (pk7d7@external-pending-libraries)))) (let ((pk90a@swap (lambda () (let ((pk90c@t (pk906@pk903))) (begin (pk906@pk903 pk907@pk905) (set! pk907@pk905 pk90c@t)))))) (dynamic-wind pk90a@swap (lambda () (begin ((pk7d3@library-loader) pk900@name) (or (pk7c3@find-library-by (lambda (pk90e@x) (fast-equal? (pk78b@library-name pk90e@x) pk900@name))) (assertion-violation '#f '"handling external library did not yield the correct library" pk900@name)))) pk90a@swap)))))) (set! pk993@pk7d9@find-external-library pk7d9@find-external-library) (set! pk7db@find-library-by-name (lambda (pk910@name) (or (pk7c3@find-library-by (lambda (pk912@x) (fast-equal? (pk78b@library-name pk912@x) pk910@name))) (pk7d9@find-external-library pk910@name)))) (set! pk994@pk7db@find-library-by-name pk7db@find-library-by-name) (set! pk7dd@library-exists? (lambda (pk914@name) (and (pk7c3@find-library-by (lambda (pk916@x) (fast-equal? (pk78b@library-name pk916@x) pk914@name))) '#t))) (set! pk995@pk7dd@library-exists? pk7dd@library-exists?) (set! pk7df@find-library-by-spec/die (lambda (pk918@spec) (let ((pk91a@id (car pk918@spec))) (or (pk7c3@find-library-by (lambda (pk91c@x) (eq? pk91a@id (pk787@library-id pk91c@x)))) (assertion-violation '#f '"cannot find library with required spec" pk918@spec))))) (set! pk996@pk7df@find-library-by-spec/die pk7df@find-library-by-spec/die) (set! pk7e1@label->binding-table (make-eq-hashtable)) (set! pk997@pk7e1@label->binding-table pk7e1@label->binding-table) (set! pk7e3@install-library-record (lambda (pk91e@lib) (begin (let ((pk920@exp-env (pk7a3@library-env pk91e@lib))) (for-each (lambda (pk922@x) (let ((pk924@label (car pk922@x)) (pk925@binding (cdr pk922@x))) (let ((pk928@binding (let ((pk92a@t (car pk925@binding))) (if (memv pk92a@t '(global)) (cons 'global (cons pk91e@lib (cdr pk925@binding))) (if (memv pk92a@t '(global-macro)) (cons 'global-macro (cons pk91e@lib (cdr pk925@binding))) (if (memv pk92a@t '(global-macro!)) (cons 'global-macro! (cons pk91e@lib (cdr pk925@binding))) pk925@binding)))))) (begin (if (hashtable-ref pk7e1@label->binding-table pk924@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" pk924@label (hashtable-ref pk7e1@label->binding-table pk924@label '#f) pk928@binding) (exit)) (void)) (hashtable-set! pk7e1@label->binding-table pk924@label pk928@binding))))) pk920@exp-env)) ((pk779@current-library-collection) pk91e@lib)))) (set! pk998@pk7e3@install-library-record pk7e3@install-library-record) (set! pk7e5@install-library (lambda (pk92c@id pk92d@name pk92e@ver pk92f@imp* pk930@vis* pk931@inv* pk932@exp-subst pk933@exp-env pk934@visit-proc pk935@invoke-proc pk936@visit-code pk937@invoke-code pk938@visible? pk939@source-file-name) (let ((pk948@imp-lib* (map pk7df@find-library-by-spec/die pk92f@imp*)) (pk949@vis-lib* (map pk7df@find-library-by-spec/die pk930@vis*)) (pk94a@inv-lib* (map pk7df@find-library-by-spec/die pk931@inv*))) (begin (if (not (and (symbol? pk92c@id) (list? pk92d@name) (list? pk92e@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" pk92c@id pk92d@name pk92e@ver) (void)) (if (pk7dd@library-exists? pk92d@name) (assertion-violation 'install-library '"library is already installed" pk92d@name) (void)) (let ((pk94e@lib (make-simple-struct 'library '15 (list pk92c@id pk92d@name pk92e@ver pk948@imp-lib* pk949@vis-lib* pk94a@inv-lib* pk932@exp-subst pk933@exp-env pk934@visit-proc pk935@invoke-proc pk936@visit-code pk937@invoke-code pk938@visible? pk939@source-file-name)))) (pk7e3@install-library-record pk94e@lib)))))) (set! pk999@pk7e5@install-library pk7e5@install-library) (set! pk7e7@imported-label->binding (lambda (pk950@lab) (hashtable-ref pk7e1@label->binding-table pk950@lab '#f))) (set! pk99a@pk7e7@imported-label->binding pk7e7@imported-label->binding) (set! pk7e9@invoke-library (lambda (pk952@lib) (let ((pk954@invoke (pk7ab@library-invoke-state pk952@lib))) (if (procedure? pk954@invoke) (begin (pk7ad@set-library-invoke-state! pk952@lib (lambda () (assertion-violation 'invoke '"circularity detected" pk952@lib))) (for-each pk7e9@invoke-library (pk79b@library-inv* pk952@lib)) (pk7ad@set-library-invoke-state! pk952@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" pk952@lib))) (pk954@invoke) (pk7ad@set-library-invoke-state! pk952@lib '#t)) (void))))) (set! pk99b@pk7e9@invoke-library pk7e9@invoke-library) (set! pk7eb@visit-library (lambda (pk956@lib) (let ((pk958@visit (pk7a7@library-visit-state pk956@lib))) (if (procedure? pk958@visit) (begin (pk7a9@set-library-visit-state! pk956@lib (lambda () (assertion-violation 'visit '"circularity detected" pk956@lib))) (for-each pk7e9@invoke-library (pk797@library-vis* pk956@lib)) (pk7a9@set-library-visit-state! pk956@lib (lambda () (assertion-violation 'invoke '"first visit did not return" pk956@lib))) (pk958@visit) (pk7a9@set-library-visit-state! pk956@lib '#t)) (void))))) (set! pk99c@pk7eb@visit-library pk7eb@visit-library) (set! pk7ed@invoke-library-by-spec (lambda (pk95a@spec) (pk7e9@invoke-library (pk7df@find-library-by-spec/die pk95a@spec)))) (set! pk99d@pk7ed@invoke-library-by-spec pk7ed@invoke-library-by-spec) (set! pk7ef@installed-libraries (lambda pk962 (let ((pk963 (length pk962))) (if (= pk963 '1) (apply (lambda (pk95c@all?) (let pk960@f ((pk95e@ls ((pk779@current-library-collection)))) (if (null? pk95e@ls) '() (if (or pk95c@all? (pk7b7@library-visible? (car pk95e@ls))) (cons (car pk95e@ls) (pk960@f (cdr pk95e@ls))) (pk960@f (cdr pk95e@ls)))))) pk962) (if (= pk963 '0) (apply (lambda () (pk7ef@installed-libraries '#f)) pk962) (error 'apply '"invalid arg count")))))) (set! pk99e@pk7ef@installed-libraries pk7ef@installed-libraries) (set! pk7f1@library-spec (lambda (pk964@x) (begin (if (not (pk785@library? pk964@x)) (assertion-violation 'library-spec '"not a library" pk964@x) (void)) (list (pk787@library-id pk964@x) (pk78b@library-name pk964@x) (pk78f@library-version pk964@x))))) (set! pk99f@pk7f1@library-spec pk7f1@library-spec) (void))
(begin (set! pk9a3@build-global-define (unspecified)) (set! pka14@build-lambda (unspecified)) (set! pka16@build-case-lambda (unspecified)) (set! pka44@build-sequence (unspecified)) (set! pka46@build-void (unspecified)) (set! pka48@build-letrec (unspecified)) (set! pka4a@build-let (unspecified)) (set! pka4c@build-named-let (unspecified)) (set! pka4e@build-letrec* (unspecified)) (set! pka50@build-library-letrec* (unspecified)) (set! pka52@build-receive (unspecified)) (set! pk9a3@build-global-define (lambda (pka53@x) (pka46@build-void))) (set! pkae1@pk9a3@build-global-define pk9a3@build-global-define) (set! pka14@build-lambda (lambda (pka55@ae pka56@vars pka57@exp) (list 'lambda pka56@vars pka57@exp))) (set! pkae2@pka14@build-lambda pka14@build-lambda) (set! pka16@build-case-lambda (lambda (pka5b@ae pka5c@vars* pka5d@exp*) (letrec* ((pka62@build-error (lambda (pka99@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (pka64@build-pred (lambda (pka81@ae pka82@n pka83@vars) (call-with-values (lambda () (let pka8f@f ((pka8b@vars pka83@vars) (pka8c@count '0)) (if (pair? pka8b@vars) (pka8f@f (cdr pka8b@vars) (+ pka8c@count '1)) (if (null? pka8b@vars) (values pka8c@count '=) (values pka8c@count '>=))))) (lambda (pka91@pka88 pka92@pka8a) (let ((pka95@pred pka92@pka8a) (pka96@count pka91@pka88)) (list (list 'primitive pka95@pred) pka82@n (list 'quote pka96@count))))))) (pka66@build-apply (lambda (pka79@ae pka7a@g pka7b@vars pka7c@exp) (list '(primitive apply) (pka14@build-lambda pka79@ae pka7b@vars pka7c@exp) pka7a@g))) (pka68@expand-case-lambda (lambda (pka69@ae pka6a@vars pka6b@exp*) (let ((pka6f@g (gensym)) (pka70@n (gensym))) (list 'lambda pka6f@g (pka4a@build-let pka69@ae (list pka70@n) (list (list '(primitive length) pka6f@g)) (let pka77@f ((pka73@vars* pka5c@vars*) (pka74@exp* pka6b@exp*)) (if (null? pka73@vars*) (pka62@build-error pka69@ae) (list 'if (pka64@build-pred pka69@ae pka70@n (car pka73@vars*)) (pka66@build-apply pka69@ae pka6f@g (car pka73@vars*) (car pka74@exp*)) (pka77@f (cdr pka73@vars*) (cdr pka74@exp*))))))))))) (if (= (length pka5d@exp*) '1) (pka14@build-lambda pka5b@ae (car pka5c@vars*) (car pka5d@exp*)) (pka68@expand-case-lambda pka5b@ae pka5c@vars* pka5d@exp*))))) (set! pkae3@pka16@build-case-lambda pka16@build-case-lambda) (set! pka44@build-sequence (lambda (pka9b@ae pka9c@exps) (let pkaa1@loop ((pka9f@exps pka9c@exps)) (if (null? (cdr pka9f@exps)) (car pka9f@exps) (if (equal? (car pka9f@exps) (pka46@build-void)) (pkaa1@loop (cdr pka9f@exps)) (cons 'begin pka9f@exps)))))) (set! pkae4@pka44@build-sequence pka44@build-sequence) (set! pka46@build-void (lambda () '((primitive void)))) (set! pkae5@pka46@build-void pka46@build-void) (set! pka48@build-letrec (lambda (pkaa3@ae pkaa4@vars pkaa5@val-exps pkaa6@body-exp) (if (null? pkaa4@vars) pkaa6@body-exp (list 'letrec (map list pkaa4@vars pkaa5@val-exps) pkaa6@body-exp)))) (set! pkae6@pka48@build-letrec pka48@build-letrec) (set! pka4a@build-let (lambda (pkaab@ae pkaac@vars pkaad@val-exps pkaae@body-exp) (if (null? pkaac@vars) pkaae@body-exp (list 'let (map list pkaac@vars pkaad@val-exps) pkaae@body-exp)))) (set! pkae7@pka4a@build-let pka4a@build-let) (set! pka4c@build-named-let (lambda (pkab3@ae pkab4@name pkab5@vars pkab6@val-exps pkab7@body-exp) (list 'let pkab4@name (map list pkab5@vars pkab6@val-exps) pkab7@body-exp))) (set! pkae8@pka4c@build-named-let pka4c@build-named-let) (set! pka4e@build-letrec* (lambda (pkabd@ae pkabe@vars pkabf@val-exps pkac0@body-exp) (if (null? pkabe@vars) pkac0@body-exp (list 'letrec* (map list pkabe@vars pkabf@val-exps) pkac0@body-exp)))) (set! pkae9@pka4e@build-letrec* pka4e@build-letrec*) (set! pka50@build-library-letrec* (lambda (pkac5@ae pkac6@name pkac7@vars pkac8@locs pkac9@val-exps pkaca@body-exp) (cons 'begin (append (map (lambda (pkad1@var) (cons 'set! (cons pkad1@var '((unspecified))))) pkac7@vars) (append (apply append (map (lambda (pkad3@var pkad4@loc pkad5@val-exp) (list (list 'set! pkad3@var pkad5@val-exp) (list 'set! pkad4@loc pkad3@var))) pkac7@vars pkac8@locs pkac9@val-exps)) (list pkaca@body-exp)))))) (set! pkaea@pka50@build-library-letrec* pka50@build-library-letrec*) (set! pka52@build-receive (lambda (pkad9@ae pkada@vars pkadb@producer pkadc@body*) (begin (display '"************** in ") (cons 'receive (cons pkada@vars (cons pkadb@producer pkadc@body*)))))) (set! pkaeb@pka52@build-receive pka52@build-receive) (void))
(begin (set! pkafa@file-options-macro (unspecified)) (set! pkafc@set-cons (unspecified)) (set! pkafe@set-union (unspecified)) (set! pkb03@top-mark* (unspecified)) (set! pkb05@top-marked? (unspecified)) (set! pkb07@gen-lexical (unspecified)) (set! pkb09@gen-global (unspecified)) (set! pkb0b@gen-label (unspecified)) (set! pkb0d@gen-top-level-label (unspecified)) (set! pkb0f@gen-define-label+loc (unspecified)) (set! pkb11@gen-define-label (unspecified)) (set! pkb1b@rib? (unspecified)) (set! pkb1d@rib-sym* (unspecified)) (set! pkb1f@set-rib-sym*! (unspecified)) (set! pkb21@rib-mark** (unspecified)) (set! pkb23@set-rib-mark**! (unspecified)) (set! pkb25@rib-label* (unspecified)) (set! pkb27@set-rib-label*! (unspecified)) (set! pkb29@rib-sealed/freq (unspecified)) (set! pkb2b@set-rib-sealed/freq! (unspecified)) (set! pkb2d@rib-cache (unspecified)) (set! pkb2f@set-rib-cache! (unspecified)) (set! pkb31@dummy (unspecified)) (set! pkb33@make-empty-rib (unspecified)) (set! pkb35@extend-rib! (unspecified)) (set! pkb37@extend-rib/nc! (unspecified)) (set! pkb39@make-rib-map (unspecified)) (set! pkb3b@seal-rib! (unspecified)) (set! pkb3d@unseal-rib! (unspecified)) (set! pkb3f@make-full-rib (unspecified)) (set! pkb41@rp (unspecified)) (set! pkb4b@stx? (unspecified)) (set! pkb4d@stx-expr (unspecified)) (set! pkb4f@set-stx-expr! (unspecified)) (set! pkb51@stx-mark* (unspecified)) (set! pkb53@set-stx-mark*! (unspecified)) (set! pkb55@stx-subst* (unspecified)) (set! pkb57@set-stx-subst*! (unspecified)) (set! pkb59@stx-ae* (unspecified)) (set! pkb5b@set-stx-ae*! (unspecified)) (set! pkb5d@dummy (unspecified)) (set! pkb5f@datum->stx (unspecified)) (set! pkb61@gen-mark (unspecified)) (set! pkb63@anti-mark (unspecified)) (set! pkb65@anti-mark? (unspecified)) (set! pkb67@mkstx (unspecified)) (set! pkb69@add-subst (unspecified)) (set! pkb6b@add-mark (unspecified)) (set! pkb6d@syntax-kind? (unspecified)) (set! pkb6f@syntax-vector->list (unspecified)) (set! pkb71@syntax-pair? (unspecified)) (set! pkb73@syntax-vector? (unspecified)) (set! pkb75@syntax-null? (unspecified)) (set! pkb77@syntax-list? (unspecified)) (set! pkb79@syntax-car (unspecified)) (set! pkb7b@syntax-cdr (unspecified)) (set! pkb7d@syntax->list (unspecified)) (set! pkb7f@id? (unspecified)) (set! pkb81@id->sym (unspecified)) (set! pkb83@bound-id=? (unspecified)) (set! pkb85@free-id=? (unspecified)) (set! pkb87@valid-bound-ids? (unspecified)) (set! pkb89@distinct-bound-ids? (unspecified)) (set! pkb8b@bound-id-member? (unspecified)) (set! pkb8d@self-evaluating? (unspecified)) (set! pkb8f@strip-annotations (unspecified)) (set! pkb91@strip (unspecified)) (set! pkb93@stx->datum (unspecified)) (set! pkb95@id->label (unspecified)) (set! pkb97@label->binding (unspecified)) (set! pkb99@make-binding (unspecified)) (set! pkb9b@binding-type (unspecified)) (set! pkb9d@binding-value (unspecified)) (set! pkb9f@raise-unbound-error (unspecified)) (set! pkba1@syntax-type (unspecified)) (set! pkbaf@sanitize-binding (unspecified)) (set! pkbb1@make-variable-transformer (unspecified)) (set! pkbb3@variable-transformer? (unspecified)) (set! pkbb5@variable-transformer-procedure (unspecified)) (set! pkbb7@make-eval-transformer (unspecified)) (set! pkd08@parse-define (unspecified)) (set! pkd0a@parse-define-syntax (unspecified)) (set! pkd0c@scheme-stx-hashtable (unspecified)) (set! pkd0e@scheme-stx (unspecified)) (set! pkd10@lexical-var (unspecified)) (set! pkd12@lexical-mutable? (unspecified)) (set! pkd14@set-lexical-mutable! (unspecified)) (set! pkd16@add-lexical (unspecified)) (set! pkd18@add-lexicals (unspecified)) (set! pkd1a@letrec-helper (unspecified)) (set! pkd1c@let-transformer (unspecified)) (set! pkd1e@letrec-transformer (unspecified)) (set! pkd20@letrec*-transformer (unspecified)) (set! pkd22@fluid-let-syntax-transformer (unspecified)) (set! pkd24@type-descriptor-transformer (unspecified)) (set! pkd26@record-type-descriptor-transformer (unspecified)) (set! pkd28@record-constructor-descriptor-transformer (unspecified)) (set! pkd2a@when-macro (unspecified)) (set! pkd2c@unless-macro (unspecified)) (set! pkd2e@if-transformer (unspecified)) (set! pkd30@and-transformer (unspecified)) (set! pkd32@or-transformer (unspecified)) (set! pkd34@case-macro (unspecified)) (set! pkd36@quote-transformer (unspecified)) (set! pkd38@case-lambda-transformer (unspecified)) (set! pkd3a@lambda-transformer (unspecified)) (set! pkd3c@bless (unspecified)) (set! pkd3e@with-syntax-macro (unspecified)) (set! pkd40@invalid-fmls-error (unspecified)) (set! pkd42@let-macro (unspecified)) (set! pkd44@let-values-macro (unspecified)) (set! pkd46@let*-values-macro (unspecified)) (set! pkd48@trace-lambda-macro (unspecified)) (set! pkd4a@trace-define-macro (unspecified)) (set! pkd4c@trace-define-syntax-macro (unspecified)) (set! pkd4e@trace-let/rec-syntax (unspecified)) (set! pkd50@trace-let-syntax-macro (unspecified)) (set! pkd52@trace-letrec-syntax-macro (unspecified)) (set! pkd54@guard-macro (unspecified)) (set! pkd56@define-enumeration-macro (unspecified)) (set! pkd58@time-macro (unspecified)) (set! pkd5a@delay-macro (unspecified)) (set! pkd5c@assert-macro (unspecified)) (set! pkd5e@endianness-macro (unspecified)) (set! pkd60@identifier-syntax-macro (unspecified)) (set! pkd62@do-macro (unspecified)) (set! pkd64@let*-macro (unspecified)) (set! pkd66@or-macro (unspecified)) (set! pkd68@and-macro (unspecified)) (set! pkd6a@cond-macro (unspecified)) (set! pkd6c@do-include (unspecified)) (set! pkd6e@include-macro (unspecified)) (set! pkd70@include-into-macro (unspecified)) (set! pkd72@syntax-rules-macro (unspecified)) (set! pkd74@quasiquote-macro (unspecified)) (set! pkd76@quasisyntax-macro (unspecified)) (set! pkd78@define-struct-macro (unspecified)) (set! pkd7a@define-record-type-macro (unspecified)) (set! pkd7c@define-condition-type-macro (unspecified)) (set! pkd7e@incorrect-usage-macro (unspecified)) (set! pkd80@parameterize-macro (unspecified)) (set! pkd82@foreign-call-transformer (unspecified)) (set! pkd84@convert-pattern (unspecified)) (set! pkd86@syntax-dispatch (unspecified)) (set! pkd88@ellipsis? (unspecified)) (set! pkd8a@underscore? (unspecified)) (set! pkd8c@verify-literals (unspecified)) (set! pkd8e@syntax-case-transformer (unspecified)) (set! pkd90@ellipsis-map (unspecified)) (set! pkd92@syntax-transformer (unspecified)) (set! pkd94@core-macro-transformer (unspecified)) (set! pkd96@symbol-macro (unspecified)) (set! pkd98@macro-transformer (unspecified)) (set! pkd9a@local-macro-transformer (unspecified)) (set! pkd9c@do-macro-call (unspecified)) (set! pkd9e@chi-macro (unspecified)) (set! pkda0@chi-local-macro (unspecified)) (set! pkda2@chi-global-macro (unspecified)) (set! pkda4@chi-expr* (unspecified)) (set! pkda6@chi-application (unspecified)) (set! pkda8@chi-expr (unspecified)) (set! pkdaa@chi-set! (unspecified)) (set! pkdac@verify-formals (unspecified)) (set! pkdae@chi-lambda-clause (unspecified)) (set! pkdb0@chi-lambda-clause* (unspecified)) (set! pkdb2@chi-defun (unspecified)) (set! pkdb4@chi-rhs (unspecified)) (set! pkdb6@expand-interaction-rhs*/init* (unspecified)) (set! pkdb8@chi-rhs* (unspecified)) (set! pkdba@find-bound=? (unspecified)) (set! pkdbc@find-dups (unspecified)) (set! pkdbe@chi-internal (unspecified)) (set! pkdc0@parse-module (unspecified)) (set! pkdca@module-interface? (unspecified)) (set! pkdcc@module-interface-first-mark (unspecified)) (set! pkdce@set-module-interface-first-mark! (unspecified)) (set! pkdd0@module-interface-exp-id-vec (unspecified)) (set! pkdd2@set-module-interface-exp-id-vec! (unspecified)) (set! pkdd4@module-interface-exp-lab-vec (unspecified)) (set! pkdd6@set-module-interface-exp-lab-vec! (unspecified)) (set! pkdd8@dummy (unspecified)) (set! pkdda@module-interface-exp-id* (unspecified)) (set! pkddc@chi-internal-module (unspecified)) (set! pkdde@chi-body* (unspecified)) (set! pkde0@expand-transformer (unspecified)) (set! pkde2@parse-exports (unspecified)) (set! pkde4@parse-library-name (unspecified)) (set! pkde6@parse-library (unspecified)) (set! pkde8@parse-import-spec* (unspecified)) (set! pkdea@make-top-rib (unspecified)) (set! pkdec@make-collector (unspecified)) (set! pkdee@inv-collector (unspecified)) (set! pkdf0@vis-collector (unspecified)) (set! pkdf2@imp-collector (unspecified)) (set! pkdf4@chi-library-internal (unspecified)) (set! pkdf6@chi-interaction-expr (unspecified)) (set! pkdf8@library-body-expander (unspecified)) (set! pkdfa@core-library-expander (unspecified)) (set! pkdfc@parse-top-level-program (unspecified)) (set! pkdfe@top-level-expander (unspecified)) (set! pke00@rp (unspecified)) (set! pke0a@env? (unspecified)) (set! pke0c@env-names (unspecified)) (set! pke0e@set-env-names! (unspecified)) (set! pke10@env-labels (unspecified)) (set! pke12@set-env-labels! (unspecified)) (set! pke14@env-itc (unspecified)) (set! pke16@set-env-itc! (unspecified)) (set! pke18@dummy (unspecified)) (set! pke1a@rp (unspecified)) (set! pke24@interaction-env? (unspecified)) (set! pke26@interaction-env-rib (unspecified)) (set! pke28@set-interaction-env-rib! (unspecified)) (set! pke2a@interaction-env-r (unspecified)) (set! pke2c@set-interaction-env-r! (unspecified)) (set! pke2e@interaction-env-locs (unspecified)) (set! pke30@set-interaction-env-locs! (unspecified)) (set! pke32@dummy (unspecified)) (set! pke34@interaction-environment-symbols (unspecified)) (set! pke36@environment-bindings (unspecified)) (set! pke38@parse-binding (unspecified)) (set! pke3a@environment? (unspecified)) (set! pke3c@environment-symbols (unspecified)) (set! pke3e@environment (unspecified)) (set! pke40@null-environment (unspecified)) (set! pke42@scheme-report-environment (unspecified)) (set! pke44@expand (unspecified)) (set! pke46@eval (unspecified)) (set! pke48@library-expander (unspecified)) (set! pke4a@boot-library-expand (unspecified)) (set! pke4c@rev-map-append (unspecified)) (set! pke4e@build-exports (unspecified)) (set! pke50@make-export-subst (unspecified)) (set! pke52@make-export-env/macros (unspecified)) (set! pke54@generate-temporaries (unspecified)) (set! pke56@free-identifier=? (unspecified)) (set! pke58@bound-identifier=? (unspecified)) (set! pke5a@make-source-condition (unspecified)) (set! pke5c@extract-position-condition (unspecified)) (set! pke5e@expression-position (unspecified)) (set! pke60@assertion-error (unspecified)) (set! pke62@syntax-error (unspecified)) (set! pke64@syntax-violation* (unspecified)) (set! pke66@syntax-violation (unspecified)) (set! pke68@identifier? (unspecified)) (set! pke6a@datum->syntax (unspecified)) (set! pke6c@syntax->datum (unspecified)) (set! pke6e@ungensym-all (unspecified)) (set! pke70@compile-r6rs-top-level (unspecified)) (set! pke72@pre-compile-r6rs-top-level (unspecified)) (set! pke74@interaction-environment (unspecified)) (set! pke76@top-level-context (unspecified)) (set! pkafa@file-options-macro (lambda (pke77@x) (letrec* ((pke7a@valid-option? (lambda (pke83@x) (and (pkb7f@id? pke83@x) (memq (pkb81@id->sym pke83@x) '(no-fail no-create no-truncate)))))) (let ((pke7b@t pke77@x)) (let ((pke7d@ls/false (pkd86@syntax-dispatch pke7b@t '(_ . each-any)))) (if (and pke7d@ls/false (apply (lambda (pke7f@opt*) (for-all pke7a@valid-option? pke7f@opt*)) pke7d@ls/false)) (apply (lambda (pke81@opt*) (pkd3c@bless (list 'make-file-options (list 'quote pke81@opt*)))) pke7d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pke7b@t))))))) (set! pk2803@pkafa@file-options-macro pkafa@file-options-macro) (set! pkafc@set-cons (lambda (pke85@x pke86@ls) (if (memq pke85@x pke86@ls) pke86@ls (cons pke85@x pke86@ls)))) (set! pk2804@pkafc@set-cons pkafc@set-cons) (set! pkafe@set-union (lambda (pke89@ls1 pke8a@ls2) (if (null? pke89@ls1) pke8a@ls2 (if (memq (car pke89@ls1) pke8a@ls2) (pkafe@set-union (cdr pke89@ls1) pke8a@ls2) (cons (car pke89@ls1) (pkafe@set-union (cdr pke89@ls1) pke8a@ls2)))))) (set! pk2805@pkafe@set-union pkafe@set-union) (set! pkb03@top-mark* '(top)) (set! pk2806@pkb03@top-mark* pkb03@top-mark*) (set! pkb05@top-marked? (lambda (pke8d@m*) (memq 'top pke8d@m*))) (set! pk2807@pkb05@top-marked? pkb05@top-marked?) (set! pkb07@gen-lexical (lambda (pke8f@sym) (if (symbol? pke8f@sym) (gensym pke8f@sym) (if (pkb4b@stx? pke8f@sym) (pkb07@gen-lexical (pkb81@id->sym pke8f@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" pke8f@sym))))) (set! pk2808@pkb07@gen-lexical pkb07@gen-lexical) (set! pkb09@gen-global (lambda (pke91@x) (pkb07@gen-lexical pke91@x))) (set! pk2809@pkb09@gen-global pkb09@gen-global) (set! pkb0b@gen-label (lambda (pke93@_) (gensym))) (set! pk280a@pkb0b@gen-label pkb0b@gen-label) (set! pkb0d@gen-top-level-label (lambda (pke95@id pke96@rib) (letrec* ((pke9a@find (lambda (pkea5@sym pkea6@mark* pkea7@sym* pkea8@mark** pkea9@label*) (and (pair? pkea7@sym*) (if (and (eq? pkea5@sym (car pkea7@sym*)) (same-marks? pkea6@mark* (car pkea8@mark**))) (car pkea9@label*) (pke9a@find pkea5@sym pkea6@mark* (cdr pkea7@sym*) (cdr pkea8@mark**) (cdr pkea9@label*))))))) (let ((pke9b@sym (pkb81@id->sym pke95@id)) (pke9c@mark* (pkb51@stx-mark* pke95@id))) (let ((pke9f@sym* (pkb1d@rib-sym* pke96@rib))) (let ((pkea1@t (and (memq pke9b@sym (pkb1d@rib-sym* pke96@rib)) (pke9a@find pke9b@sym pke9c@mark* pke9f@sym* (pkb21@rib-mark** pke96@rib) (pkb25@rib-label* pke96@rib))))) (if pkea1@t ((lambda (pkea3@label) (if (pk99a@pk7e7@imported-label->binding pkea3@label) (gensym) pkea3@label)) pkea1@t) (gensym)))))))) (set! pk280b@pkb0d@gen-top-level-label pkb0d@gen-top-level-label) (set! pkb0f@gen-define-label+loc (lambda (pkeaf@id pkeb0@rib) (let ((pkeb3@t (pke76@top-level-context))) (if pkeb3@t ((lambda (pkeb5@env) (let ((pkeb7@label (pkb0d@gen-top-level-label pkeaf@id pkeb0@rib)) (pkeb8@locs (pke2e@interaction-env-locs pkeb5@env))) (values pkeb7@label (let ((pkebb@t (assq pkeb7@label pkeb8@locs))) (if pkebb@t (cdr pkebb@t) (let ((pkebd@loc (pkb07@gen-lexical pkeaf@id))) (begin (pke30@set-interaction-env-locs! pkeb5@env (cons (cons pkeb7@label pkebd@loc) pkeb8@locs)) pkebd@loc))))))) pkeb3@t) (values (gensym) (pkb07@gen-lexical pkeaf@id)))))) (set! pk280c@pkb0f@gen-define-label+loc pkb0f@gen-define-label+loc) (set! pkb11@gen-define-label (lambda (pkebf@id pkec0@rib) (if (pke76@top-level-context) (pkb0d@gen-top-level-label pkebf@id pkec0@rib) (gensym)))) (set! pk280d@pkb11@gen-define-label pkb11@gen-define-label) (set! pkb1b@rib? (lambda (pkec3@x) (and (simple-struct? pkec3@x) (eq? (simple-struct-name pkec3@x) 'rib)))) (set! pk280e@pkb1b@rib? pkb1b@rib?) (set! pkb1d@rib-sym* (lambda (pkec5@x) (simple-struct-ref pkec5@x '0))) (set! pk280f@pkb1d@rib-sym* pkb1d@rib-sym*) (set! pkb1f@set-rib-sym*! (lambda (pkec7@x pkec8@val) (simple-struct-set! pkec7@x '0 pkec8@val))) (set! pk2810@pkb1f@set-rib-sym*! pkb1f@set-rib-sym*!) (set! pkb21@rib-mark** (lambda (pkecb@x) (simple-struct-ref pkecb@x '1))) (set! pk2811@pkb21@rib-mark** pkb21@rib-mark**) (set! pkb23@set-rib-mark**! (lambda (pkecd@x pkece@val) (simple-struct-set! pkecd@x '1 pkece@val))) (set! pk2812@pkb23@set-rib-mark**! pkb23@set-rib-mark**!) (set! pkb25@rib-label* (lambda (pked1@x) (simple-struct-ref pked1@x '2))) (set! pk2813@pkb25@rib-label* pkb25@rib-label*) (set! pkb27@set-rib-label*! (lambda (pked3@x pked4@val) (simple-struct-set! pked3@x '2 pked4@val))) (set! pk2814@pkb27@set-rib-label*! pkb27@set-rib-label*!) (set! pkb29@rib-sealed/freq (lambda (pked7@x) (simple-struct-ref pked7@x '3))) (set! pk2815@pkb29@rib-sealed/freq pkb29@rib-sealed/freq) (set! pkb2b@set-rib-sealed/freq! (lambda (pked9@x pkeda@val) (simple-struct-set! pked9@x '3 pkeda@val))) (set! pk2816@pkb2b@set-rib-sealed/freq! pkb2b@set-rib-sealed/freq!) (set! pkb2d@rib-cache (lambda (pkedd@x) (simple-struct-ref pkedd@x '4))) (set! pk2817@pkb2d@rib-cache pkb2d@rib-cache) (set! pkb2f@set-rib-cache! (lambda (pkedf@x pkee0@val) (simple-struct-set! pkedf@x '4 pkee0@val))) (set! pk2818@pkb2f@set-rib-cache! pkb2f@set-rib-cache!) (set! pkb31@dummy '3) (set! pk2819@pkb31@dummy pkb31@dummy) (set! pkb33@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! pk281a@pkb33@make-empty-rib pkb33@make-empty-rib) (set! pkb35@extend-rib! (lambda (pkee3@rib pkee4@id pkee5@label) (letrec* ((pkeea@find (lambda (pkef7@sym pkef8@mark* pkef9@sym* pkefa@mark** pkefb@label*) (and (pair? pkef9@sym*) (if (and (eq? pkef7@sym (car pkef9@sym*)) (same-marks? pkef8@mark* (car pkefa@mark**))) pkefb@label* (pkeea@find pkef7@sym pkef8@mark* (cdr pkef9@sym*) (cdr pkefa@mark**) (cdr pkefb@label*))))))) (begin (if (pkb29@rib-sealed/freq pkee3@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" pkee3@rib) (void)) (let ((pkeeb@sym (pkb81@id->sym pkee4@id)) (pkeec@mark* (pkb51@stx-mark* pkee4@id))) (let ((pkeef@sym* (pkb1d@rib-sym* pkee3@rib))) (let ((pkef1@t (and (memq pkeeb@sym (pkb1d@rib-sym* pkee3@rib)) (pkeea@find pkeeb@sym pkeec@mark* pkeef@sym* (pkb21@rib-mark** pkee3@rib) (pkb25@rib-label* pkee3@rib))))) (if pkef1@t ((lambda (pkef3@p) (if (not (eq? pkee5@label (car pkef3@p))) (if (pke76@top-level-context) (set-car! pkef3@p pkee5@label) (pke66@syntax-violation '#f '"multiple definitions of identifier" pkee4@id)) (void))) pkef1@t) (begin (if (pkb2d@rib-cache pkee3@rib) (hashtable-update! (pkb2d@rib-cache pkee3@rib) pkeeb@sym (lambda (pkef5@e) (cons (cons pkeec@mark* pkee5@label) pkef5@e)) '()) (void)) (pkb1f@set-rib-sym*! pkee3@rib (cons pkeeb@sym pkeef@sym*)) (pkb23@set-rib-mark**! pkee3@rib (cons pkeec@mark* (pkb21@rib-mark** pkee3@rib))) (pkb27@set-rib-label*! pkee3@rib (cons pkee5@label (pkb25@rib-label* pkee3@rib)))))))))))) (set! pk281b@pkb35@extend-rib! pkb35@extend-rib!) (set! pkb37@extend-rib/nc! (lambda (pkf01@rib pkf02@id pkf03@label) (let ((pkf07@sym (pkb81@id->sym pkf02@id)) (pkf08@mark* (pkb51@stx-mark* pkf02@id))) (let ((pkf0b@sym* (pkb1d@rib-sym* pkf01@rib))) (begin (if (pkb2d@rib-cache pkf01@rib) (hashtable-update! (pkb2d@rib-cache pkf01@rib) pkf07@sym (lambda (pkf0d@e) (cons (cons pkf08@mark* pkf03@label) pkf0d@e)) '()) (void)) (pkb1f@set-rib-sym*! pkf01@rib (cons pkf07@sym pkf0b@sym*)) (pkb23@set-rib-mark**! pkf01@rib (cons pkf08@mark* (pkb21@rib-mark** pkf01@rib))) (pkb27@set-rib-label*! pkf01@rib (cons pkf03@label (pkb25@rib-label* pkf01@rib)))))))) (set! pk281c@pkb37@extend-rib/nc! pkb37@extend-rib/nc!) (set! pkb39@make-rib-map (lambda (pkf0f@sym*) (let ((pkf11@ht (make-eq-hashtable))) (let pkf17@f ((pkf13@i '0) (pkf14@sym* pkf0f@sym*)) (if (null? pkf14@sym*) pkf11@ht (begin (hashtable-update! pkf11@ht (car pkf14@sym*) (lambda (pkf19@x) (cons pkf13@i pkf19@x)) '()) (pkf17@f (+ pkf13@i '1) (cdr pkf14@sym*)))))))) (set! pk281d@pkb39@make-rib-map pkb39@make-rib-map) (set! pkb3b@seal-rib! (lambda (pkf1b@rib) (let ((pkf1d@sym* (pkb1d@rib-sym* pkf1b@rib))) (if (not (null? pkf1d@sym*)) (begin (pkb1f@set-rib-sym*! pkf1b@rib (list->vector pkf1d@sym*)) (pkb23@set-rib-mark**! pkf1b@rib (list->vector (pkb21@rib-mark** pkf1b@rib))) (pkb27@set-rib-label*! pkf1b@rib (list->vector (pkb25@rib-label* pkf1b@rib))) (pkb2b@set-rib-sealed/freq! pkf1b@rib (pkb39@make-rib-map pkf1d@sym*))) (void))))) (set! pk281e@pkb3b@seal-rib! pkb3b@seal-rib!) (set! pkb3d@unseal-rib! (lambda (pkf1f@rib) (if (pkb29@rib-sealed/freq pkf1f@rib) (begin (pkb2b@set-rib-sealed/freq! pkf1f@rib '#f) (pkb1f@set-rib-sym*! pkf1f@rib (vector->list (pkb1d@rib-sym* pkf1f@rib))) (pkb23@set-rib-mark**! pkf1f@rib (vector->list (pkb21@rib-mark** pkf1f@rib))) (pkb27@set-rib-label*! pkf1f@rib (vector->list (pkb25@rib-label* pkf1f@rib)))) (void)))) (set! pk281f@pkb3d@unseal-rib! pkb3d@unseal-rib!) (set! pkb3f@make-full-rib (lambda (pkf21@id* pkf22@label*) (let ((pkf25@r (make-simple-struct 'rib '6 (list (map pkb81@id->sym pkf21@id*) (map pkb51@stx-mark* pkf21@id*) pkf22@label* '#f '#f)))) (begin (pkb3b@seal-rib! pkf25@r) pkf25@r)))) (set! pk2820@pkb3f@make-full-rib pkb3f@make-full-rib) (set! pkb41@rp (pk6cc@pk5a7@make-record-printer 'stx (lambda (pkf27@x pkf28@p pkf29@wr) (begin (display '"#<syntax " pkf28@p) (write (pkb93@stx->datum pkf27@x) pkf28@p) (let ((pkf2d@expr (pkb4d@stx-expr pkf27@x))) (if (pk6c3@pk595@annotation? pkf2d@expr) (let ((pkf2f@src (pk6c4@pk597@annotation-source pkf2d@expr))) (if (pair? pkf2f@src) (begin (display '" [" pkf28@p) (display (cdr pkf2f@src) pkf28@p) (display '" of " pkf28@p) (display (car pkf2f@src) pkf28@p) (display '"]" pkf28@p)) (void))) (void))) (display '">" pkf28@p))))) (set! pk2821@pkb41@rp pkb41@rp) (set! pkb4b@stx? (lambda (pkf31@x) (and (simple-struct? pkf31@x) (eq? (simple-struct-name pkf31@x) 'stx)))) (set! pk2822@pkb4b@stx? pkb4b@stx?) (set! pkb4d@stx-expr (lambda (pkf33@x) (simple-struct-ref pkf33@x '0))) (set! pk2823@pkb4d@stx-expr pkb4d@stx-expr) (set! pkb4f@set-stx-expr! (lambda (pkf35@x pkf36@val) (simple-struct-set! pkf35@x '0 pkf36@val))) (set! pk2824@pkb4f@set-stx-expr! pkb4f@set-stx-expr!) (set! pkb51@stx-mark* (lambda (pkf39@x) (simple-struct-ref pkf39@x '1))) (set! pk2825@pkb51@stx-mark* pkb51@stx-mark*) (set! pkb53@set-stx-mark*! (lambda (pkf3b@x pkf3c@val) (simple-struct-set! pkf3b@x '1 pkf3c@val))) (set! pk2826@pkb53@set-stx-mark*! pkb53@set-stx-mark*!) (set! pkb55@stx-subst* (lambda (pkf3f@x) (simple-struct-ref pkf3f@x '2))) (set! pk2827@pkb55@stx-subst* pkb55@stx-subst*) (set! pkb57@set-stx-subst*! (lambda (pkf41@x pkf42@val) (simple-struct-set! pkf41@x '2 pkf42@val))) (set! pk2828@pkb57@set-stx-subst*! pkb57@set-stx-subst*!) (set! pkb59@stx-ae* (lambda (pkf45@x) (simple-struct-ref pkf45@x '3))) (set! pk2829@pkb59@stx-ae* pkb59@stx-ae*) (set! pkb5b@set-stx-ae*! (lambda (pkf47@x pkf48@val) (simple-struct-set! pkf47@x '3 pkf48@val))) (set! pk282a@pkb5b@set-stx-ae*! pkb5b@set-stx-ae*!) (set! pkb5d@dummy '3) (set! pk282b@pkb5d@dummy pkb5d@dummy) (set! pkb5f@datum->stx (lambda (pkf4b@id pkf4c@datum) (make-simple-struct 'stx '5 (list pkf4c@datum (pkb51@stx-mark* pkf4b@id) (pkb55@stx-subst* pkf4b@id) (pkb59@stx-ae* pkf4b@id))))) (set! pk282c@pkb5f@datum->stx pkb5f@datum->stx) (set! pkb61@gen-mark (lambda () (string '#\m))) (set! pk282d@pkb61@gen-mark pkb61@gen-mark) (set! pkb63@anti-mark '#f) (set! pk282e@pkb63@anti-mark pkb63@anti-mark) (set! pkb65@anti-mark? not) (set! pk282f@pkb65@anti-mark? pkb65@anti-mark?) (set! pkb67@mkstx (lambda (pkf4f@e pkf50@m* pkf51@s* pkf52@ae*) (if (and (pkb4b@stx? pkf4f@e) (not (pkb05@top-marked? pkf50@m*))) (call-with-values (lambda () (join-wraps pkf50@m* pkf51@s* pkf52@ae* pkf4f@e)) (lambda (pkf5d@pkf58 pkf5e@pkf5a pkf5f@pkf5c) (let ((pkf63@ae* pkf5f@pkf5c) (pkf64@s* pkf5e@pkf5a) (pkf65@m* pkf5d@pkf58)) (make-simple-struct 'stx '5 (list (pkb4d@stx-expr pkf4f@e) pkf65@m* pkf64@s* pkf63@ae*))))) (make-simple-struct 'stx '5 (list pkf4f@e pkf50@m* pkf51@s* pkf52@ae*))))) (set! pk2830@pkb67@mkstx pkb67@mkstx) (set! pkb69@add-subst (lambda (pkf69@subst pkf6a@e) (pkb67@mkstx pkf6a@e '() (list pkf69@subst) '()))) (set! pk2831@pkb69@add-subst pkb69@add-subst) (set! pkb6b@add-mark (lambda (pkf6d@mark pkf6e@subst pkf6f@expr pkf70@ae) (letrec* ((pkf76@merge-ae* (lambda (pkf9d@ls1 pkf9e@ls2) (if (and (pair? pkf9d@ls1) (pair? pkf9e@ls2) (not (car pkf9e@ls2))) (pkf78@cancel pkf9d@ls1 pkf9e@ls2) (append pkf9d@ls1 pkf9e@ls2)))) (pkf78@cancel (lambda (pkf93@ls1 pkf94@ls2) (let pkf9b@f ((pkf97@x (car pkf93@ls1)) (pkf98@ls1 (cdr pkf93@ls1))) (if (null? pkf98@ls1) (cdr pkf94@ls2) (cons pkf97@x (pkf9b@f (car pkf98@ls1) (cdr pkf98@ls1))))))) (pkf7a@f (lambda (pkf7b@e pkf7c@m pkf7d@s1* pkf7e@ae*) (if (pair? pkf7b@e) (let ((pkf83@a (pkf7a@f (car pkf7b@e) pkf7c@m pkf7d@s1* pkf7e@ae*)) (pkf84@d (pkf7a@f (cdr pkf7b@e) pkf7c@m pkf7d@s1* pkf7e@ae*))) (if (eq? pkf83@a pkf84@d) pkf7b@e (cons pkf83@a pkf84@d))) (if (vector? pkf7b@e) (let ((pkf87@ls1 (vector->list pkf7b@e))) (let ((pkf89@ls2 (map (lambda (pkf8b@x) (pkf7a@f pkf8b@x pkf7c@m pkf7d@s1* pkf7e@ae*)) pkf87@ls1))) (if (for-all eq? pkf87@ls1 pkf89@ls2) pkf7b@e (list->vector pkf89@ls2)))) (if (pkb4b@stx? pkf7b@e) (let ((pkf8d@m* (pkb51@stx-mark* pkf7b@e)) (pkf8e@s2* (pkb55@stx-subst* pkf7b@e))) (if (null? pkf8d@m*) (pkf7a@f (pkb4d@stx-expr pkf7b@e) pkf7c@m (append pkf7d@s1* pkf8e@s2*) (pkf76@merge-ae* pkf7e@ae* (pkb59@stx-ae* pkf7b@e))) (if (eq? (car pkf8d@m*) pkb63@anti-mark) (make-simple-struct 'stx '5 (list (pkb4d@stx-expr pkf7b@e) (cdr pkf8d@m*) (cdr (append pkf7d@s1* pkf8e@s2*)) (pkf76@merge-ae* pkf7e@ae* (pkb59@stx-ae* pkf7b@e)))) (make-simple-struct 'stx '5 (list (pkb4d@stx-expr pkf7b@e) (cons pkf7c@m pkf8d@m*) (let ((pkf91@s* (cons 'shift (append pkf7d@s1* pkf8e@s2*)))) (if pkf6e@subst (cons pkf6e@subst pkf91@s*) pkf91@s*)) (pkf76@merge-ae* pkf7e@ae* (pkb59@stx-ae* pkf7b@e))))))) (if (symbol? pkf7b@e) (pke66@syntax-violation '#f '"raw symbol encountered in output of macro" pkf6f@expr pkf7b@e) (make-simple-struct 'stx '5 (list pkf7b@e (list pkf7c@m) pkf7d@s1* pkf7e@ae*))))))))) (pkb67@mkstx (pkf7a@f pkf6f@expr pkf6d@mark '() '()) '() '() (list pkf70@ae))))) (set! pk2832@pkb6b@add-mark pkb6b@add-mark) (set! pkb6d@syntax-kind? (lambda (pkfa1@x pkfa2@p?) (if (pkb4b@stx? pkfa1@x) (pkb6d@syntax-kind? (pkb4d@stx-expr pkfa1@x) pkfa2@p?) (if (pk6c3@pk595@annotation? pkfa1@x) (pkb6d@syntax-kind? (pk6c5@pk599@annotation-expression pkfa1@x) pkfa2@p?) (pkfa2@p? pkfa1@x))))) (set! pk2833@pkb6d@syntax-kind? pkb6d@syntax-kind?) (set! pkb6f@syntax-vector->list (lambda (pkfa5@x) (if (pkb4b@stx? pkfa5@x) (let ((pkfa7@ls (pkb6f@syntax-vector->list (pkb4d@stx-expr pkfa5@x))) (pkfa8@m* (pkb51@stx-mark* pkfa5@x)) (pkfa9@s* (pkb55@stx-subst* pkfa5@x)) (pkfaa@ae* (pkb59@stx-ae* pkfa5@x))) (map (lambda (pkfaf@x) (pkb67@mkstx pkfaf@x pkfa8@m* pkfa9@s* pkfaa@ae*)) pkfa7@ls)) (if (pk6c3@pk595@annotation? pkfa5@x) (pkb6f@syntax-vector->list (pk6c5@pk599@annotation-expression pkfa5@x)) (if (vector? pkfa5@x) (vector->list pkfa5@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" pkfa5@x)))))) (set! pk2834@pkb6f@syntax-vector->list pkb6f@syntax-vector->list) (set! pkb71@syntax-pair? (lambda (pkfb1@x) (pkb6d@syntax-kind? pkfb1@x pair?))) (set! pk2835@pkb71@syntax-pair? pkb71@syntax-pair?) (set! pkb73@syntax-vector? (lambda (pkfb3@x) (pkb6d@syntax-kind? pkfb3@x vector?))) (set! pk2836@pkb73@syntax-vector? pkb73@syntax-vector?) (set! pkb75@syntax-null? (lambda (pkfb5@x) (pkb6d@syntax-kind? pkfb5@x null?))) (set! pk2837@pkb75@syntax-null? pkb75@syntax-null?) (set! pkb77@syntax-list? (lambda (pkfb7@x) (or (pkb75@syntax-null? pkfb7@x) (and (pkb71@syntax-pair? pkfb7@x) (pkb77@syntax-list? (pkb7b@syntax-cdr pkfb7@x)))))) (set! pk2838@pkb77@syntax-list? pkb77@syntax-list?) (set! pkb79@syntax-car (lambda (pkfb9@x) (if (pkb4b@stx? pkfb9@x) (pkb67@mkstx (pkb79@syntax-car (pkb4d@stx-expr pkfb9@x)) (pkb51@stx-mark* pkfb9@x) (pkb55@stx-subst* pkfb9@x) (pkb59@stx-ae* pkfb9@x)) (if (pk6c3@pk595@annotation? pkfb9@x) (pkb79@syntax-car (pk6c5@pk599@annotation-expression pkfb9@x)) (if (pair? pkfb9@x) (car pkfb9@x) (assertion-violation 'syntax-car '"BUG: not a pair" pkfb9@x)))))) (set! pk2839@pkb79@syntax-car pkb79@syntax-car) (set! pkb7b@syntax-cdr (lambda (pkfbb@x) (if (pkb4b@stx? pkfbb@x) (pkb67@mkstx (pkb7b@syntax-cdr (pkb4d@stx-expr pkfbb@x)) (pkb51@stx-mark* pkfbb@x) (pkb55@stx-subst* pkfbb@x) (pkb59@stx-ae* pkfbb@x)) (if (pk6c3@pk595@annotation? pkfbb@x) (pkb7b@syntax-cdr (pk6c5@pk599@annotation-expression pkfbb@x)) (if (pair? pkfbb@x) (cdr pkfbb@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" pkfbb@x)))))) (set! pk283a@pkb7b@syntax-cdr pkb7b@syntax-cdr) (set! pkb7d@syntax->list (lambda (pkfbd@x) (if (pkb71@syntax-pair? pkfbd@x) (cons (pkb79@syntax-car pkfbd@x) (pkb7d@syntax->list (pkb7b@syntax-cdr pkfbd@x))) (if (pkb75@syntax-null? pkfbd@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" pkfbd@x))))) (set! pk283b@pkb7d@syntax->list pkb7d@syntax->list) (set! pkb7f@id? (lambda (pkfbf@x) (and (pkb4b@stx? pkfbf@x) (symbol? (pkb4d@stx-expr pkfbf@x))))) (set! pk283c@pkb7f@id? pkb7f@id?) (set! pkb81@id->sym (lambda (pkfc1@x) (pkb4d@stx-expr pkfc1@x))) (set! pk283d@pkb81@id->sym pkb81@id->sym) (set! pkb83@bound-id=? (lambda (pkfc3@x pkfc4@y) (and (eq? (pkb81@id->sym pkfc3@x) (pkb81@id->sym pkfc4@y)) (same-marks? (pkb51@stx-mark* pkfc3@x) (pkb51@stx-mark* pkfc4@y))))) (set! pk283e@pkb83@bound-id=? pkb83@bound-id=?) (set! pkb85@free-id=? (lambda (pkfc7@i pkfc8@j) (let ((pkfcb@t0 (id->real-label pkfc7@i)) (pkfcc@t1 (id->real-label pkfc8@j))) (if (or pkfcb@t0 pkfcc@t1) (eq? pkfcb@t0 pkfcc@t1) (eq? (pkb81@id->sym pkfc7@i) (pkb81@id->sym pkfc8@j)))))) (set! pk283f@pkb85@free-id=? pkb85@free-id=?) (set! pkb87@valid-bound-ids? (lambda (pkfcf@id*) (and (for-all pkb7f@id? pkfcf@id*) (pkb89@distinct-bound-ids? pkfcf@id*)))) (set! pk2840@pkb87@valid-bound-ids? pkb87@valid-bound-ids?) (set! pkb89@distinct-bound-ids? (lambda (pkfd1@id*) (or (null? pkfd1@id*) (and (not (pkb8b@bound-id-member? (car pkfd1@id*) (cdr pkfd1@id*))) (pkb89@distinct-bound-ids? (cdr pkfd1@id*)))))) (set! pk2841@pkb89@distinct-bound-ids? pkb89@distinct-bound-ids?) (set! pkb8b@bound-id-member? (lambda (pkfd3@id pkfd4@id*) (and (pair? pkfd4@id*) (or (pkb83@bound-id=? pkfd3@id (car pkfd4@id*)) (pkb8b@bound-id-member? pkfd3@id (cdr pkfd4@id*)))))) (set! pk2842@pkb8b@bound-id-member? pkb8b@bound-id-member?) (set! pkb8d@self-evaluating? (lambda (pkfd7@x) (or (number? pkfd7@x) (string? pkfd7@x) (char? pkfd7@x) (boolean? pkfd7@x) (regexp? pkfd7@x) (bytevector? pkfd7@x)))) (set! pk2843@pkb8d@self-evaluating? pkb8d@self-evaluating?) (set! pkb8f@strip-annotations (lambda (pkfd9@x) (if (pair? pkfd9@x) (cons (pkb8f@strip-annotations (car pkfd9@x)) (pkb8f@strip-annotations (cdr pkfd9@x))) (if (vector? pkfd9@x) (vector-map pkb8f@strip-annotations pkfd9@x) (if (pk6c3@pk595@annotation? pkfd9@x) (pk6c2@pk593@annotation-stripped pkfd9@x) pkfd9@x))))) (set! pk2844@pkb8f@strip-annotations pkb8f@strip-annotations) (set! pkb91@strip (lambda (pkfdb@x pkfdc@m*) (if (pkb05@top-marked? pkfdc@m*) (if (or (pk6c3@pk595@annotation? pkfdb@x) (and (pair? pkfdb@x) (pk6c3@pk595@annotation? (car pkfdb@x))) (and (vector? pkfdb@x) (> (vector-length pkfdb@x) '0) (pk6c3@pk595@annotation? (vector-ref pkfdb@x '0)))) (pkb8f@strip-annotations pkfdb@x) pkfdb@x) (let pkfe1@f ((pkfdf@x pkfdb@x)) (if (pkb4b@stx? pkfdf@x) (begin (if (pair? (pkb4d@stx-expr pkfdf@x)) (begin (set-source-info! (pkb4d@stx-expr pkfdf@x) '#f) (set-source-info! (cdr (pkb4d@stx-expr pkfdf@x)) '#f) (set-source-info! (car (pkb4d@stx-expr pkfdf@x)) '#f)) (void)) (pkb91@strip (pkb4d@stx-expr pkfdf@x) (pkb51@stx-mark* pkfdf@x))) (if (pk6c3@pk595@annotation? pkfdf@x) (pk6c2@pk593@annotation-stripped pkfdf@x) (if (pair? pkfdf@x) (let ((pkfe3@a (pkfe1@f (car pkfdf@x))) (pkfe4@d (pkfe1@f (cdr pkfdf@x)))) (if (and (eq? pkfe3@a (car pkfdf@x)) (eq? pkfe4@d (cdr pkfdf@x))) pkfdf@x (cons pkfe3@a pkfe4@d))) (if (vector? pkfdf@x) (let ((pkfe7@old (vector->list pkfdf@x))) (let ((pkfe9@new (map pkfe1@f pkfe7@old))) (if (for-all eq? pkfe7@old pkfe9@new) pkfdf@x (list->vector pkfe9@new)))) pkfdf@x)))))))) (set! pk2845@pkb91@strip pkb91@strip) (set! pkb93@stx->datum (lambda (pkfeb@x) (pkb91@strip pkfeb@x '()))) (set! pk2846@pkb93@stx->datum pkb93@stx->datum) (set! pkb95@id->label (lambda (pkfed@id) (or (id->real-label pkfed@id) (let ((pkfef@t (pke76@top-level-context))) (if pkfef@t ((lambda (pkff1@env) (let ((pkff3@rib (pke26@interaction-env-rib pkff1@env))) (call-with-values (lambda () (pkb0f@gen-define-label+loc pkfed@id pkff3@rib)) (lambda (pkff9@pkff6 pkffa@pkff8) (let ((pkffd@loc_ pkffa@pkff8) (pkffe@lab pkff9@pkff6)) (begin (pkb35@extend-rib! pkff3@rib pkfed@id pkffe@lab) pkffe@lab)))))) pkfef@t) '#f))))) (set! pk2847@pkb95@id->label pkb95@id->label) (set! pkb97@label->binding (lambda (pk1001@x pk1002@r) (let ((pk1005@t (pk99a@pk7e7@imported-label->binding pk1001@x))) (if pk1005@t ((lambda (pk1007@b) (if (and (pair? pk1007@b) (eq? (car pk1007@b) '$core-rtd)) (cons '$rtd (map pkd3c@bless (cdr pk1007@b))) (if (and (pair? pk1007@b) (eq? (car pk1007@b) 'global-rtd)) (let ((pk1009@lib (cadr pk1007@b)) (pk100a@loc (cddr pk1007@b))) (cons '$rtd (symbol-value pk100a@loc))) pk1007@b))) pk1005@t) (let ((pk100d@t (assq pk1001@x pk1002@r))) (if pk100d@t (cdr pk100d@t) (let ((pk100f@t (pke76@top-level-context))) (if pk100f@t ((lambda (pk1011@env) (let ((pk1013@t (assq pk1001@x (pke2e@interaction-env-locs pk1011@env)))) (if pk1013@t ((lambda (pk1015@p) (cons* 'lexical (cdr pk1015@p) '#f)) pk1013@t) '(displaced-lexical . #f)))) pk100f@t) '(displaced-lexical . #f))))))))) (set! pk2848@pkb97@label->binding pkb97@label->binding) (set! pkb99@make-binding cons) (set! pk2849@pkb99@make-binding pkb99@make-binding) (set! pkb9b@binding-type car) (set! pk284a@pkb9b@binding-type pkb9b@binding-type) (set! pkb9d@binding-value cdr) (set! pk284b@pkb9d@binding-value pkb9d@binding-value) (set! pkb9f@raise-unbound-error (lambda (pk1017@id) (pke64@syntax-violation* '#f '"unbound identifier" pk1017@id (make-undefined-violation)))) (set! pk284c@pkb9f@raise-unbound-error pkb9f@raise-unbound-error) (set! pkba1@syntax-type (lambda (pk1019@e pk101a@r) (if (pkb7f@id? pk1019@e) (let ((pk101d@id pk1019@e)) (let ((pk101f@label (pkb95@id->label pk101d@id))) (let ((pk1021@b (pkb97@label->binding pk101f@label pk101a@r))) (let ((pk1023@type (pkb9b@binding-type pk1021@b))) (begin (if (not pk101f@label) (pkb9f@raise-unbound-error pk101d@id) (void)) (let ((pk1025@t pk1023@type)) (if (memv pk1025@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values pk1023@type (pkb9d@binding-value pk1021@b) pk101d@id) (values 'other '#f '#f)))))))) (if (pkb71@syntax-pair? pk1019@e) (let ((pk1027@id (pkb79@syntax-car pk1019@e))) (if (pkb7f@id? pk1027@id) (let ((pk1029@label (pkb95@id->label pk1027@id))) (let ((pk102b@b (pkb97@label->binding pk1029@label pk101a@r))) (let ((pk102d@type (pkb9b@binding-type pk102b@b))) (begin (if (not pk1029@label) (pkb9f@raise-unbound-error pk1027@id) (void)) (let ((pk102f@t pk102d@type)) (if (memv pk102f@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values pk102d@type (pkb9d@binding-value pk102b@b) pk1027@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((pk1031@d (pkb93@stx->datum pk1019@e))) (if (pkb8d@self-evaluating? pk1031@d) (values 'constant pk1031@d '#f) (values 'other '#f '#f))))))) (set! pk284d@pkba1@syntax-type pkba1@syntax-type) (set! pkbaf@sanitize-binding (lambda (pk1033@x pk1034@src) (if (procedure? pk1033@x) (cons* 'local-macro pk1033@x pk1034@src) (if (and (pair? pk1033@x) (eq? (car pk1033@x) 'macro!) (procedure? (cdr pk1033@x))) (cons* 'local-macro! (cdr pk1033@x) pk1034@src) (if (and (pair? pk1033@x) (eq? (car pk1033@x) '$rtd)) pk1033@x (assertion-violation 'expand '"invalid transformer" pk1033@x)))))) (set! pk284e@pkbaf@sanitize-binding pkbaf@sanitize-binding) (set! pkbb1@make-variable-transformer (lambda (pk1037@x) (if (procedure? pk1037@x) (cons 'macro! pk1037@x) (assertion-violation 'make-variable-transformer '"not a procedure" pk1037@x)))) (set! pk284f@pkbb1@make-variable-transformer pkbb1@make-variable-transformer) (set! pkbb3@variable-transformer? (lambda (pk1039@x) (and (pair? pk1039@x) (eq? (car pk1039@x) 'macro!) (procedure? (cdr pk1039@x))))) (set! pk2850@pkbb3@variable-transformer? pkbb3@variable-transformer?) (set! pkbb5@variable-transformer-procedure (lambda (pk103b@x) (if (pkbb3@variable-transformer? pk103b@x) (cdr pk103b@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" pk103b@x)))) (set! pk2851@pkbb5@variable-transformer-procedure pkbb5@variable-transformer-procedure) (set! pkbb7@make-eval-transformer (lambda (pk103d@x) (pkbaf@sanitize-binding (eval-core (pk725@pk6dd@expanded->core pk103d@x)) pk103d@x))) (set! pk2852@pkbb7@make-eval-transformer pkbb7@make-eval-transformer) (set! pkd08@parse-define (lambda (pk103f@x) (let ((pk1041@t pk103f@x)) (let ((pk1043@ls/false (pkd86@syntax-dispatch pk1041@t '(_ (any . any) any . each-any)))) (if (and pk1043@ls/false (apply (lambda (pk1045@id pk1046@fmls pk1047@b pk1048@b*) (pkb7f@id? pk1045@id)) pk1043@ls/false)) (apply (lambda (pk104d@id pk104e@fmls pk104f@b pk1050@b*) (begin (pkdac@verify-formals pk104e@fmls pk103f@x) (values pk104d@id (cons 'defun (cons pk104e@fmls (cons pk104f@b pk1050@b*)))))) pk1043@ls/false) (let ((pk1055@t pk1041@t)) (let ((pk1057@ls/false (pkd86@syntax-dispatch pk1055@t '(_ any any)))) (if (and pk1057@ls/false (apply (lambda (pk1059@id pk105a@val) (pkb7f@id? pk1059@id)) pk1057@ls/false)) (apply (lambda (pk105d@id pk105e@val) (values pk105d@id (cons 'expr pk105e@val))) pk1057@ls/false) (let ((pk1061@t pk1055@t)) (let ((pk1063@ls/false (pkd86@syntax-dispatch pk1061@t '(_ any)))) (if (and pk1063@ls/false (apply (lambda (pk1065@id) (pkb7f@id? pk1065@id)) pk1063@ls/false)) (apply (lambda (pk1067@id) (values pk1067@id (cons 'expr (pkd3c@bless '(void))))) pk1063@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1061@t)))))))))))) (set! pk2853@pkd08@parse-define pkd08@parse-define) (set! pkd0a@parse-define-syntax (lambda (pk1069@x) (let ((pk106b@t pk1069@x)) (let ((pk106d@ls/false (pkd86@syntax-dispatch pk106b@t '(_ any any)))) (if (and pk106d@ls/false (apply (lambda (pk106f@id pk1070@val) (pkb7f@id? pk106f@id)) pk106d@ls/false)) (apply (lambda (pk1073@id pk1074@val) (values pk1073@id pk1074@val)) pk106d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk106b@t)))))) (set! pk2854@pkd0a@parse-define-syntax pkd0a@parse-define-syntax) (set! pkd0c@scheme-stx-hashtable (make-eq-hashtable)) (set! pk2855@pkd0c@scheme-stx-hashtable pkd0c@scheme-stx-hashtable) (set! pkd0e@scheme-stx (lambda (pk1077@sym) (or (hashtable-ref pkd0c@scheme-stx-hashtable pk1077@sym '#f) (let ((pk1079@subst (pk976@pk79f@library-subst (pk994@pk7db@find-library-by-name '(psyntax system $all))))) (let ((pk107b@stx (make-simple-struct 'stx '5 (list pk1077@sym pkb03@top-mark* '() '())))) (let ((pk107d@stx (let ((pk107f@t (assq pk1077@sym pk1079@subst))) (if pk107f@t ((lambda (pk1081@x) (let ((pk1083@name (car pk1081@x)) (pk1084@label (cdr pk1081@x))) (pkb69@add-subst (make-simple-struct 'rib '6 (list (list pk1083@name) (list pkb03@top-mark*) (list pk1084@label) '#f '#f)) pk107b@stx))) pk107f@t) pk107b@stx)))) (begin (hashtable-set! pkd0c@scheme-stx-hashtable pk1077@sym pk107d@stx) pk107d@stx))))))) (set! pk2856@pkd0e@scheme-stx pkd0e@scheme-stx) (set! pkd10@lexical-var car) (set! pk2857@pkd10@lexical-var pkd10@lexical-var) (set! pkd12@lexical-mutable? cdr) (set! pk2858@pkd12@lexical-mutable? pkd12@lexical-mutable?) (set! pkd14@set-lexical-mutable! set-cdr!) (set! pk2859@pkd14@set-lexical-mutable! pkd14@set-lexical-mutable!) (set! pkd16@add-lexical (lambda (pk1087@lab pk1088@lex pk1089@r) (cons (cons* pk1087@lab 'lexical pk1088@lex '#f) pk1089@r))) (set! pk285a@pkd16@add-lexical pkd16@add-lexical) (set! pkd18@add-lexicals (lambda (pk108d@lab* pk108e@lex* pk108f@r) (if (null? pk108d@lab*) pk108f@r (pkd18@add-lexicals (cdr pk108d@lab*) (cdr pk108e@lex*) (pkd16@add-lexical (car pk108d@lab*) (car pk108e@lex*) pk108f@r))))) (set! pk285b@pkd18@add-lexicals pkd18@add-lexicals) (set! pkd1a@letrec-helper (lambda (pk1093@e pk1094@r pk1095@mr pk1096@build) (let ((pk109b@t pk1093@e)) (let ((pk109d@ls/false (pkd86@syntax-dispatch pk109b@t '(_ #(each (any any)) any . each-any)))) (if pk109d@ls/false (apply (lambda (pk109f@lhs* pk10a0@rhs* pk10a1@b pk10a2@b*) (if (not (pkb87@valid-bound-ids? pk109f@lhs*)) (pkd40@invalid-fmls-error pk1093@e pk109f@lhs*) (let ((pk10a7@lex* (map pkb07@gen-lexical pk109f@lhs*)) (pk10a8@lab* (map pkb0b@gen-label pk109f@lhs*))) (let ((pk10ab@rib (pkb3f@make-full-rib pk109f@lhs* pk10a8@lab*)) (pk10ac@r (pkd18@add-lexicals pk10a8@lab* pk10a7@lex* pk1094@r))) (let ((pk10af@body (pkdbe@chi-internal (pkb69@add-subst pk10ab@rib (cons pk10a1@b pk10a2@b*)) pk10ac@r pk1095@mr)) (pk10b0@rhs* (pkda4@chi-expr* (map (lambda (pk10b3@x) (pkb69@add-subst pk10ab@rib pk10b3@x)) pk10a0@rhs*) pk10ac@r pk1095@mr))) (pk1096@build '#f pk10a7@lex* pk10b0@rhs* pk10af@body)))))) pk109d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk109b@t)))))) (set! pk285c@pkd1a@letrec-helper pkd1a@letrec-helper) (set! pkd1c@let-transformer (lambda (pk10b5@e pk10b6@r pk10b7@mr) (let ((pk10bb@t pk10b5@e)) (let ((pk10bd@ls/false (pkd86@syntax-dispatch pk10bb@t '(_ #(each (any any)) any . each-any)))) (if pk10bd@ls/false (apply (lambda (pk10bf@lhs* pk10c0@rhs* pk10c1@b pk10c2@b*) (if (not (pkb87@valid-bound-ids? pk10bf@lhs*)) (pkd40@invalid-fmls-error pk10b5@e pk10bf@lhs*) (let ((pk10c7@lex* (map pkb07@gen-lexical pk10bf@lhs*)) (pk10c8@lab* (map pkb0b@gen-label pk10bf@lhs*)) (pk10c9@rhs* (pkda4@chi-expr* pk10c0@rhs* pk10b6@r pk10b7@mr))) (let ((pk10cd@rib (pkb3f@make-full-rib pk10bf@lhs* pk10c8@lab*)) (pk10ce@r (pkd18@add-lexicals pk10c8@lab* pk10c7@lex* pk10b6@r))) (let ((pk10d1@body (pkdbe@chi-internal (pkb69@add-subst pk10cd@rib (cons pk10c1@b pk10c2@b*)) pk10ce@r pk10b7@mr))) (pkae7@pka4a@build-let '#f pk10c7@lex* pk10c9@rhs* pk10d1@body)))))) pk10bd@ls/false) (let ((pk10d3@t pk10bb@t)) (let ((pk10d5@ls/false (pkd86@syntax-dispatch pk10d3@t '(_ any #(each (any any)) any . each-any)))) (if pk10d5@ls/false (apply (lambda (pk10d7@loop pk10d8@lhs* pk10d9@rhs* pk10da@b pk10db@b*) (if (not (pkb87@valid-bound-ids? pk10d8@lhs*)) (pkd40@invalid-fmls-error pk10b5@e pk10d8@lhs*) (let ((pk10e1@lex* (map pkb07@gen-lexical pk10d8@lhs*)) (pk10e2@lab* (map pkb0b@gen-label pk10d8@lhs*)) (pk10e3@rhs* (pkda4@chi-expr* pk10d9@rhs* pk10b6@r pk10b7@mr)) (pk10e4@loop-lex (pkb07@gen-lexical pk10d7@loop)) (pk10e5@loop-lab (pkb0b@gen-label pk10d7@loop))) (let ((pk10eb@loop-rib (pkb3f@make-full-rib (list pk10d7@loop) (list pk10e5@loop-lab))) (pk10ec@rib (pkb3f@make-full-rib pk10d8@lhs* pk10e2@lab*)) (pk10ed@r (pkd18@add-lexicals (cons pk10e5@loop-lab pk10e2@lab*) (cons pk10e4@loop-lex pk10e1@lex*) pk10b6@r))) (let ((pk10f1@body (pkdbe@chi-internal (pkb69@add-subst pk10eb@loop-rib (pkb69@add-subst pk10ec@rib (cons pk10da@b pk10db@b*))) pk10ed@r pk10b7@mr))) (pkae8@pka4c@build-named-let '#f pk10e4@loop-lex pk10e1@lex* pk10e3@rhs* pk10f1@body)))))) pk10d5@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk10d3@t))))))))) (set! pk285d@pkd1c@let-transformer pkd1c@let-transformer) (set! pkd1e@letrec-transformer (lambda (pk10f3@e pk10f4@r pk10f5@mr) (pkd1a@letrec-helper pk10f3@e pk10f4@r pk10f5@mr pkae6@pka48@build-letrec))) (set! pk285e@pkd1e@letrec-transformer pkd1e@letrec-transformer) (set! pkd20@letrec*-transformer (lambda (pk10f9@e pk10fa@r pk10fb@mr) (pkd1a@letrec-helper pk10f9@e pk10fa@r pk10fb@mr pkae9@pka4e@build-letrec*))) (set! pk285f@pkd20@letrec*-transformer pkd20@letrec*-transformer) (set! pkd22@fluid-let-syntax-transformer (lambda (pk10ff@e pk1100@r pk1101@mr) (letrec* ((pk1106@lookup (lambda (pk1119@x) (or (pkb95@id->label pk1119@x) (pke66@syntax-violation '#f '"unbound identifier" pk10ff@e pk1119@x))))) (let ((pk1107@t pk10ff@e)) (let ((pk1109@ls/false (pkd86@syntax-dispatch pk1107@t '(_ #(each (any any)) any . each-any)))) (if pk1109@ls/false (apply (lambda (pk110b@lhs* pk110c@rhs* pk110d@b pk110e@b*) (if (not (pkb87@valid-bound-ids? pk110b@lhs*)) (pkd40@invalid-fmls-error pk10ff@e pk110b@lhs*) (let ((pk1113@lab* (map pk1106@lookup pk110b@lhs*)) (pk1114@rhs* (map (lambda (pk1117@x) (pkbb7@make-eval-transformer (pkde0@expand-transformer pk1117@x pk1101@mr))) pk110c@rhs*))) (pkdbe@chi-internal (cons pk110d@b pk110e@b*) (append (map cons pk1113@lab* pk1114@rhs*) pk1100@r) (append (map cons pk1113@lab* pk1114@rhs*) pk1101@mr))))) pk1109@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1107@t))))))) (set! pk2860@pkd22@fluid-let-syntax-transformer pkd22@fluid-let-syntax-transformer) (set! pkd24@type-descriptor-transformer (lambda (pk111b@e pk111c@r pk111d@mr) (let ((pk1121@t pk111b@e)) (let ((pk1123@ls/false (pkd86@syntax-dispatch pk1121@t '(_ any)))) (if (and pk1123@ls/false (apply (lambda (pk1125@id) (pkb7f@id? pk1125@id)) pk1123@ls/false)) (apply (lambda (pk1127@id) (let ((pk1129@lab (pkb95@id->label pk1127@id))) (let ((pk112b@b (pkb97@label->binding pk1129@lab pk111c@r))) (let ((pk112d@type (pkb9b@binding-type pk112b@b))) (begin (if (not pk1129@lab) (pkb9f@raise-unbound-error pk1127@id) (void)) (if (not (and (eq? pk112d@type '$rtd) (not (list? (pkb9d@binding-value pk112b@b))))) (pke66@syntax-violation '#f '"not a record type" pk111b@e) (void)) (list 'quote (pkb9d@binding-value pk112b@b))))))) pk1123@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1121@t)))))) (set! pk2861@pkd24@type-descriptor-transformer pkd24@type-descriptor-transformer) (set! pkd26@record-type-descriptor-transformer (lambda (pk112f@e pk1130@r pk1131@mr) (let ((pk1135@t pk112f@e)) (let ((pk1137@ls/false (pkd86@syntax-dispatch pk1135@t '(_ any)))) (if (and pk1137@ls/false (apply (lambda (pk1139@id) (pkb7f@id? pk1139@id)) pk1137@ls/false)) (apply (lambda (pk113b@id) (let ((pk113d@lab (pkb95@id->label pk113b@id))) (let ((pk113f@b (pkb97@label->binding pk113d@lab pk1130@r))) (let ((pk1141@type (pkb9b@binding-type pk113f@b))) (begin (if (not pk113d@lab) (pkb9f@raise-unbound-error pk113b@id) (void)) (if (not (and (eq? pk1141@type '$rtd) (list? (pkb9d@binding-value pk113f@b)))) (pke66@syntax-violation '#f '"not a record type" pk112f@e) (void)) (pkda8@chi-expr (car (pkb9d@binding-value pk113f@b)) pk1130@r pk1131@mr)))))) pk1137@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1135@t)))))) (set! pk2862@pkd26@record-type-descriptor-transformer pkd26@record-type-descriptor-transformer) (set! pkd28@record-constructor-descriptor-transformer (lambda (pk1143@e pk1144@r pk1145@mr) (let ((pk1149@t pk1143@e)) (let ((pk114b@ls/false (pkd86@syntax-dispatch pk1149@t '(_ any)))) (if (and pk114b@ls/false (apply (lambda (pk114d@id) (pkb7f@id? pk114d@id)) pk114b@ls/false)) (apply (lambda (pk114f@id) (let ((pk1151@lab (pkb95@id->label pk114f@id))) (let ((pk1153@b (pkb97@label->binding pk1151@lab pk1144@r))) (let ((pk1155@type (pkb9b@binding-type pk1153@b))) (begin (if (not pk1151@lab) (pkb9f@raise-unbound-error pk114f@id) (void)) (if (not (and (eq? pk1155@type '$rtd) (list? (pkb9d@binding-value pk1153@b)))) (pke66@syntax-violation '#f '"invalid type" pk1143@e) (void)) (pkda8@chi-expr (cadr (pkb9d@binding-value pk1153@b)) pk1144@r pk1145@mr)))))) pk114b@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1149@t)))))) (set! pk2863@pkd28@record-constructor-descriptor-transformer pkd28@record-constructor-descriptor-transformer) (set! pkd2a@when-macro (lambda (pk1157@e) (let ((pk1159@t pk1157@e)) (let ((pk115b@ls/false (pkd86@syntax-dispatch pk1159@t '(_ any any . each-any)))) (if pk115b@ls/false (apply (lambda (pk115d@test pk115e@e pk115f@e*) (pkd3c@bless (list 'if pk115d@test (cons 'begin (cons pk115e@e pk115f@e*))))) pk115b@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1159@t)))))) (set! pk2864@pkd2a@when-macro pkd2a@when-macro) (set! pkd2c@unless-macro (lambda (pk1163@e) (let ((pk1165@t pk1163@e)) (let ((pk1167@ls/false (pkd86@syntax-dispatch pk1165@t '(_ any any . each-any)))) (if pk1167@ls/false (apply (lambda (pk1169@test pk116a@e pk116b@e*) (pkd3c@bless (list 'if (list 'not pk1169@test) (cons 'begin (cons pk116a@e pk116b@e*))))) pk1167@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1165@t)))))) (set! pk2865@pkd2c@unless-macro pkd2c@unless-macro) (set! pkd2e@if-transformer (lambda (pk116f@e pk1170@r pk1171@mr) (let ((pk1175@t pk116f@e)) (let ((pk1177@ls/false (pkd86@syntax-dispatch pk1175@t '(_ any any any)))) (if pk1177@ls/false (apply (lambda (pk1179@e0 pk117a@e1 pk117b@e2) (list 'if (pkda8@chi-expr pk1179@e0 pk1170@r pk1171@mr) (pkda8@chi-expr pk117a@e1 pk1170@r pk1171@mr) (pkda8@chi-expr pk117b@e2 pk1170@r pk1171@mr))) pk1177@ls/false) (let ((pk117f@t pk1175@t)) (let ((pk1181@ls/false (pkd86@syntax-dispatch pk117f@t '(_ any any)))) (if pk1181@ls/false (apply (lambda (pk1183@e0 pk1184@e1) (list 'if (pkda8@chi-expr pk1183@e0 pk1170@r pk1171@mr) (pkda8@chi-expr pk1184@e1 pk1170@r pk1171@mr) (pkae5@pka46@build-void))) pk1181@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk117f@t))))))))) (set! pk2866@pkd2e@if-transformer pkd2e@if-transformer) (set! pkd30@and-transformer (lambda (pk1187@e pk1188@r pk1189@mr) (let ((pk118d@t pk1187@e)) (let ((pk118f@ls/false (pkd86@syntax-dispatch pk118d@t '(_ . each-any)))) (if pk118f@ls/false (apply (lambda (pk1191@e*) (cons 'and (pkda4@chi-expr* pk1191@e* pk1188@r pk1189@mr))) pk118f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk118d@t)))))) (set! pk2867@pkd30@and-transformer pkd30@and-transformer) (set! pkd32@or-transformer (lambda (pk1193@e pk1194@r pk1195@mr) (let ((pk1199@t pk1193@e)) (let ((pk119b@ls/false (pkd86@syntax-dispatch pk1199@t '(_ . each-any)))) (if pk119b@ls/false (apply (lambda (pk119d@e*) (cons 'or (pkda4@chi-expr* pk119d@e* pk1194@r pk1195@mr))) pk119b@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1199@t)))))) (set! pk2868@pkd32@or-transformer pkd32@or-transformer) (set! pkd34@case-macro (lambda (pk119f@e) (letrec* ((pk11a2@build-last (lambda (pk11c9@cls) (let ((pk11cb@t pk11c9@cls)) (let ((pk11cd@ls/false (pkd86@syntax-dispatch pk11cb@t '(#(scheme-id else) any . each-any)))) (if pk11cd@ls/false (apply (lambda (pk11cf@e pk11d0@e*) (cons 'begin (cons pk11cf@e pk11d0@e*))) pk11cd@ls/false) (let ((pk11d3@t pk11cb@t)) (let ((pk11d5@ls/false (pkd86@syntax-dispatch pk11d3@t '_))) (if pk11d5@ls/false (apply (lambda () (pk11a4@build-one pk11c9@cls '(if #f #f))) pk11d5@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk11d3@t))))))))) (pk11a4@build-one (lambda (pk11bb@cls pk11bc@k) (let ((pk11bf@t pk11bb@cls)) (let ((pk11c1@ls/false (pkd86@syntax-dispatch pk11bf@t '(each-any any . each-any)))) (if pk11c1@ls/false (apply (lambda (pk11c3@d* pk11c4@e pk11c5@e*) (list 'if (list 'memv 't (list 'quote pk11c3@d*)) (cons 'begin (cons pk11c4@e pk11c5@e*)) pk11bc@k)) pk11c1@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk11bf@t))))))) (let ((pk11a5@t pk119f@e)) (let ((pk11a7@ls/false (pkd86@syntax-dispatch pk11a5@t '(_ any)))) (if pk11a7@ls/false (apply (lambda (pk11a9@expr) (pkd3c@bless (cons 'let (cons (list (list 't pk11a9@expr)) '((if #f #f)))))) pk11a7@ls/false) (let ((pk11ab@t pk11a5@t)) (let ((pk11ad@ls/false (pkd86@syntax-dispatch pk11ab@t '(_ any any . each-any)))) (if pk11ad@ls/false (apply (lambda (pk11af@expr pk11b0@cls pk11b1@cls*) (pkd3c@bless (list 'let (list (list 't pk11af@expr)) (let pk11b9@f ((pk11b5@cls pk11b0@cls) (pk11b6@cls* pk11b1@cls*)) (if (null? pk11b6@cls*) (pk11a2@build-last pk11b5@cls) (pk11a4@build-one pk11b5@cls (pk11b9@f (car pk11b6@cls*) (cdr pk11b6@cls*)))))))) pk11ad@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk11ab@t)))))))))) (set! pk2869@pkd34@case-macro pkd34@case-macro) (set! pkd36@quote-transformer (lambda (pk11d7@e pk11d8@r pk11d9@mr) (let ((pk11dd@t pk11d7@e)) (let ((pk11df@ls/false (pkd86@syntax-dispatch pk11dd@t '(_ any)))) (if pk11df@ls/false (apply (lambda (pk11e1@datum) (list 'quote (pkb93@stx->datum pk11e1@datum))) pk11df@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk11dd@t)))))) (set! pk286a@pkd36@quote-transformer pkd36@quote-transformer) (set! pkd38@case-lambda-transformer (lambda (pk11e3@e pk11e4@r pk11e5@mr) (let ((pk11e9@t pk11e3@e)) (let ((pk11eb@ls/false (pkd86@syntax-dispatch pk11e9@t '(_ . #(each (any any . each-any)))))) (if pk11eb@ls/false (apply (lambda (pk11ed@fmls* pk11ee@b* pk11ef@b**) (call-with-values (lambda () (pkdb0@chi-lambda-clause* pk11e3@e pk11ed@fmls* (map cons pk11ee@b* pk11ef@b**) pk11e4@r pk11e5@mr)) (lambda (pk11f7@pk11f4 pk11f8@pk11f6) (let ((pk11fb@body* pk11f8@pk11f6) (pk11fc@fmls* pk11f7@pk11f4)) (pkae3@pka16@build-case-lambda '#f pk11fc@fmls* pk11fb@body*))))) pk11eb@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk11e9@t)))))) (set! pk286b@pkd38@case-lambda-transformer pkd38@case-lambda-transformer) (set! pkd3a@lambda-transformer (lambda (pk11ff@e pk1200@r pk1201@mr) (let ((pk1205@t pk11ff@e)) (let ((pk1207@ls/false (pkd86@syntax-dispatch pk1205@t '(_ any any . each-any)))) (if pk1207@ls/false (apply (lambda (pk1209@fmls pk120a@b pk120b@b*) (call-with-values (lambda () (pkdae@chi-lambda-clause pk11ff@e pk1209@fmls (cons pk120a@b pk120b@b*) pk1200@r pk1201@mr)) (lambda (pk1213@pk1210 pk1214@pk1212) (let ((pk1217@body pk1214@pk1212) (pk1218@fmls pk1213@pk1210)) (pkae2@pka14@build-lambda '#f pk1218@fmls pk1217@body))))) pk1207@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1205@t)))))) (set! pk286c@pkd3a@lambda-transformer pkd3a@lambda-transformer) (set! pkd3c@bless (lambda (pk121b@x) (pkb67@mkstx (let pk121f@f ((pk121d@x pk121b@x)) (if (pkb4b@stx? pk121d@x) pk121d@x (if (pair? pk121d@x) (cons (pk121f@f (car pk121d@x)) (pk121f@f (cdr pk121d@x))) (if (symbol? pk121d@x) (pkd0e@scheme-stx pk121d@x) (if (vector? pk121d@x) (vector-map pk121f@f pk121d@x) pk121d@x))))) '() '() '()))) (set! pk286d@pkd3c@bless pkd3c@bless) (set! pkd3e@with-syntax-macro (lambda (pk1221@e) (let ((pk1223@t pk1221@e)) (let ((pk1225@ls/false (pkd86@syntax-dispatch pk1223@t '(_ #(each (any any)) any . each-any)))) (if pk1225@ls/false (apply (lambda (pk1227@pat* pk1228@expr* pk1229@b pk122a@b*) (let ((pk122f@idn* (let pk1233@f ((pk1231@pat* pk1227@pat*)) (if (null? pk1231@pat*) '() (call-with-values (lambda () (pkd84@convert-pattern (car pk1231@pat*) '())) (lambda (pk1239@pk1236 pk123a@pk1238) (let ((pk123d@idn* pk123a@pk1238) (pk123e@pat pk1239@pk1236)) (append pk123d@idn* (pk1233@f (cdr pk1231@pat*)))))))))) (begin (pkdac@verify-formals (map car pk122f@idn*) pk1221@e) (let ((pk1241@t* (pke54@generate-temporaries pk1228@expr*))) (pkd3c@bless (list 'let (map list pk1241@t* pk1228@expr*) (let pk1247@f ((pk1243@pat* pk1227@pat*) (pk1244@t* pk1241@t*)) (if (null? pk1243@pat*) (cons 'let (cons '() (cons pk1229@b pk122a@b*))) (list 'syntax-case (car pk1244@t*) '() (list (car pk1243@pat*) (pk1247@f (cdr pk1243@pat*) (cdr pk1244@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car pk1243@pat*)) (car pk1244@t*)))))))))))) pk1225@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1223@t)))))) (set! pk286e@pkd3e@with-syntax-macro pkd3e@with-syntax-macro) (set! pkd40@invalid-fmls-error (lambda (pk1249@stx pk124a@fmls) (let ((pk124d@t pk124a@fmls)) (let ((pk124f@ls/false (pkd86@syntax-dispatch pk124d@t '#(each+ any () any)))) (if pk124f@ls/false (apply (lambda (pk1251@id* pk1252@last) (let pk1257@f ((pk1255@id* (if (pkb7f@id? pk1252@last) (cons pk1252@last pk1251@id*) (if (pkb75@syntax-null? pk1252@last) pk1251@id* (pke66@syntax-violation '#f '"not an identifier" pk1249@stx pk1252@last))))) (if (null? pk1255@id*) (values) (if (not (pkb7f@id? (car pk1255@id*))) (pke66@syntax-violation '#f '"not an identifier" pk1249@stx (car pk1255@id*)) (begin (pk1257@f (cdr pk1255@id*)) (if (pkb8b@bound-id-member? (car pk1255@id*) (cdr pk1255@id*)) (pke66@syntax-violation '#f '"duplicate binding" pk1249@stx (car pk1255@id*)) (void))))))) pk124f@ls/false) (let ((pk1259@t pk124d@t)) (let ((pk125b@ls/false (pkd86@syntax-dispatch pk1259@t '_))) (if pk125b@ls/false (apply (lambda () (pke66@syntax-violation '#f '"malformed binding form" pk1249@stx pk124a@fmls)) pk125b@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1259@t))))))))) (set! pk286f@pkd40@invalid-fmls-error pkd40@invalid-fmls-error) (set! pkd42@let-macro (lambda (pk125d@stx) (let ((pk125f@t pk125d@stx)) (let ((pk1261@ls/false (pkd86@syntax-dispatch pk125f@t '(_ #(each (any any)) any . each-any)))) (if pk1261@ls/false (apply (lambda (pk1263@lhs* pk1264@rhs* pk1265@b pk1266@b*) (if (pkb87@valid-bound-ids? pk1263@lhs*) (pkd3c@bless (cons (cons 'lambda (cons pk1263@lhs* (cons pk1265@b pk1266@b*))) pk1264@rhs*)) (pkd40@invalid-fmls-error pk125d@stx pk1263@lhs*))) pk1261@ls/false) (let ((pk126b@t pk125f@t)) (let ((pk126d@ls/false (pkd86@syntax-dispatch pk126b@t '(_ any #(each (any any)) any . each-any)))) (if (and pk126d@ls/false (apply (lambda (pk126f@f pk1270@lhs* pk1271@rhs* pk1272@b pk1273@b*) (pkb7f@id? pk126f@f)) pk126d@ls/false)) (apply (lambda (pk1279@f pk127a@lhs* pk127b@rhs* pk127c@b pk127d@b*) (if (pkb87@valid-bound-ids? pk127a@lhs*) (pkd3c@bless (cons (list 'letrec (list (list pk1279@f (cons 'lambda (cons pk127a@lhs* (cons pk127c@b pk127d@b*))))) pk1279@f) pk127b@rhs*)) (pkd40@invalid-fmls-error pk125d@stx pk127a@lhs*))) pk126d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk126b@t))))))))) (set! pk2870@pkd42@let-macro pkd42@let-macro) (set! pkd44@let-values-macro (lambda (pk1283@stx) (letrec* ((pk1286@rename (lambda (pk12eb@x pk12ec@old* pk12ed@new*) (begin (if (not (pkb7f@id? pk12eb@x)) (pke66@syntax-violation '#f '"not an indentifier" pk1283@stx pk12eb@x) (void)) (if (pkb8b@bound-id-member? pk12eb@x pk12ec@old*) (pke66@syntax-violation '#f '"duplicate binding" pk1283@stx pk12eb@x) (void)) (let ((pk12f1@y (gensym (pke6c@syntax->datum pk12eb@x)))) (values pk12f1@y (cons pk12eb@x pk12ec@old*) (cons pk12f1@y pk12ed@new*)))))) (pk1288@rename* (lambda (pk12d9@x* pk12da@old* pk12db@new*) (if (null? pk12d9@x*) (values '() pk12da@old* pk12db@new*) (call-with-values (lambda () (pk1286@rename (car pk12d9@x*) pk12da@old* pk12db@new*)) (lambda (pk12df@x pk12e0@old* pk12e1@new*) (call-with-values (lambda () (pk1288@rename* (cdr pk12d9@x*) pk12e0@old* pk12e1@new*)) (lambda (pk12e5@x* pk12e6@old* pk12e7@new*) (values (cons pk12df@x pk12e5@x*) pk12e6@old* pk12e7@new*))))))))) (let ((pk1289@t pk1283@stx)) (let ((pk128b@ls/false (pkd86@syntax-dispatch pk1289@t '(_ () any . each-any)))) (if pk128b@ls/false (apply (lambda (pk128d@b pk128e@b*) (cons* (pkd3c@bless 'let) '() pk128d@b pk128e@b*)) pk128b@ls/false) (let ((pk1291@t pk1289@t)) (let ((pk1293@ls/false (pkd86@syntax-dispatch pk1291@t '(_ #(each (any any)) any . each-any)))) (if pk1293@ls/false (apply (lambda (pk1295@lhs* pk1296@rhs* pk1297@b pk1298@b*) (pkd3c@bless (let pk12a5@f ((pk129d@lhs* pk1295@lhs*) (pk129e@rhs* pk1296@rhs*) (pk129f@old* '()) (pk12a0@new* '())) (if (null? pk129d@lhs*) (cons 'let (cons (map list pk129f@old* pk12a0@new*) (cons pk1297@b pk1298@b*))) (let ((pk12a7@t (car pk129d@lhs*))) (let ((pk12a9@ls/false (pkd86@syntax-dispatch pk12a7@t 'each-any))) (if pk12a9@ls/false (apply (lambda (pk12ab@x*) (call-with-values (lambda () (pk1288@rename* pk12ab@x* pk129f@old* pk12a0@new*)) (lambda (pk12b3@pk12ae pk12b4@pk12b0 pk12b5@pk12b2) (let ((pk12b9@new* pk12b5@pk12b2) (pk12ba@old* pk12b4@pk12b0) (pk12bb@y* pk12b3@pk12ae)) (list 'call-with-values (list 'lambda '() (car pk129e@rhs*)) (list 'lambda pk12bb@y* (pk12a5@f (cdr pk129d@lhs*) (cdr pk129e@rhs*) pk12ba@old* pk12b9@new*))))))) pk12a9@ls/false) (let ((pk12bf@t pk12a7@t)) (let ((pk12c1@ls/false (pkd86@syntax-dispatch pk12bf@t '#(each+ any () any)))) (if pk12c1@ls/false (apply (lambda (pk12c3@x* pk12c4@x) (call-with-values (lambda () (pk1286@rename pk12c4@x pk129f@old* pk12a0@new*)) (lambda (pk12c7@y pk12c8@old* pk12c9@new*) (call-with-values (lambda () (pk1288@rename* pk12c3@x* pk12c8@old* pk12c9@new*)) (lambda (pk12cd@y* pk12ce@old* pk12cf@new*) (list 'call-with-values (list 'lambda '() (car pk129e@rhs*)) (list 'lambda (append pk12cd@y* pk12c7@y) (pk12a5@f (cdr pk129d@lhs*) (cdr pk129e@rhs*) pk12ce@old* pk12cf@new*)))))))) pk12c1@ls/false) (let ((pk12d3@t pk12bf@t)) (let ((pk12d5@ls/false (pkd86@syntax-dispatch pk12d3@t 'any))) (if pk12d5@ls/false (apply (lambda (pk12d7@others) (pke66@syntax-violation '#f '"malformed bindings" pk1283@stx pk12d7@others)) pk12d5@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk12d3@t)))))))))))))) pk1293@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1291@t)))))))))) (set! pk2871@pkd44@let-values-macro pkd44@let-values-macro) (set! pkd46@let*-values-macro (lambda (pk12f3@stx) (letrec* ((pk12f6@check (lambda (pk1325@x*) (if (not (null? pk1325@x*)) (let ((pk1327@x (car pk1325@x*))) (begin (if (not (pkb7f@id? pk1327@x)) (pke66@syntax-violation '#f '"not an identifier" pk12f3@stx pk1327@x) (void)) (pk12f6@check (cdr pk1325@x*)) (if (pkb8b@bound-id-member? pk1327@x (cdr pk1325@x*)) (pke66@syntax-violation '#f '"duplicate identifier" pk12f3@stx pk1327@x) (void)))) (void))))) (let ((pk12f7@t pk12f3@stx)) (let ((pk12f9@ls/false (pkd86@syntax-dispatch pk12f7@t '(_ () any . each-any)))) (if pk12f9@ls/false (apply (lambda (pk12fb@b pk12fc@b*) (cons* (pkd3c@bless 'let) '() pk12fb@b pk12fc@b*)) pk12f9@ls/false) (let ((pk12ff@t pk12f7@t)) (let ((pk1301@ls/false (pkd86@syntax-dispatch pk12ff@t '(_ #(each (any any)) any . each-any)))) (if pk1301@ls/false (apply (lambda (pk1303@lhs* pk1304@rhs* pk1305@b pk1306@b*) (pkd3c@bless (let pk130f@f ((pk130b@lhs* pk1303@lhs*) (pk130c@rhs* pk1304@rhs*)) (if (null? pk130b@lhs*) (cons 'begin (cons pk1305@b pk1306@b*)) (let ((pk1311@t (car pk130b@lhs*))) (let ((pk1313@ls/false (pkd86@syntax-dispatch pk1311@t 'each-any))) (if pk1313@ls/false (apply (lambda (pk1315@x*) (begin (pk12f6@check pk1315@x*) (list 'call-with-values (list 'lambda '() (car pk130c@rhs*)) (list 'lambda pk1315@x* (pk130f@f (cdr pk130b@lhs*) (cdr pk130c@rhs*)))))) pk1313@ls/false) (let ((pk1317@t pk1311@t)) (let ((pk1319@ls/false (pkd86@syntax-dispatch pk1317@t '#(each+ any () any)))) (if pk1319@ls/false (apply (lambda (pk131b@x* pk131c@x) (begin (pk12f6@check (cons pk131c@x pk131b@x*)) (list 'call-with-values (list 'lambda '() (car pk130c@rhs*)) (list 'lambda (append pk131b@x* pk131c@x) (pk130f@f (cdr pk130b@lhs*) (cdr pk130c@rhs*)))))) pk1319@ls/false) (let ((pk131f@t pk1317@t)) (let ((pk1321@ls/false (pkd86@syntax-dispatch pk131f@t 'any))) (if pk1321@ls/false (apply (lambda (pk1323@others) (pke66@syntax-violation '#f '"malformed bindings" pk12f3@stx pk1323@others)) pk1321@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk131f@t)))))))))))))) pk1301@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk12ff@t)))))))))) (set! pk2872@pkd46@let*-values-macro pkd46@let*-values-macro) (set! pkd48@trace-lambda-macro (lambda (pk1329@stx) (let ((pk132b@t pk1329@stx)) (let ((pk132d@ls/false (pkd86@syntax-dispatch pk132b@t '(_ any each-any any . each-any)))) (if pk132d@ls/false (apply (lambda (pk132f@who pk1330@fmls pk1331@b pk1332@b*) (if (pkb87@valid-bound-ids? pk1330@fmls) (pkd3c@bless (list 'make-traced-procedure (list 'quote pk132f@who) (cons 'lambda (cons pk1330@fmls (cons pk1331@b pk1332@b*))))) (pkd40@invalid-fmls-error pk1329@stx pk1330@fmls))) pk132d@ls/false) (let ((pk1337@t pk132b@t)) (let ((pk1339@ls/false (pkd86@syntax-dispatch pk1337@t '(_ any #(each+ any () any) any . each-any)))) (if pk1339@ls/false (apply (lambda (pk133b@who pk133c@fmls pk133d@last pk133e@b pk133f@b*) (if (pkb87@valid-bound-ids? (cons pk133d@last pk133c@fmls)) (pkd3c@bless (list 'make-traced-procedure (list 'quote pk133b@who) (cons 'lambda (cons (append pk133c@fmls pk133d@last) (cons pk133e@b pk133f@b*))))) (pkd40@invalid-fmls-error pk1329@stx (append pk133c@fmls pk133d@last)))) pk1339@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1337@t))))))))) (set! pk2873@pkd48@trace-lambda-macro pkd48@trace-lambda-macro) (set! pkd4a@trace-define-macro (lambda (pk1345@stx) (let ((pk1347@t pk1345@stx)) (let ((pk1349@ls/false (pkd86@syntax-dispatch pk1347@t '(_ (any . each-any) any . each-any)))) (if pk1349@ls/false (apply (lambda (pk134b@who pk134c@fmls pk134d@b pk134e@b*) (if (pkb87@valid-bound-ids? pk134c@fmls) (pkd3c@bless (list 'define pk134b@who (list 'make-traced-procedure (list 'quote pk134b@who) (cons 'lambda (cons pk134c@fmls (cons pk134d@b pk134e@b*)))))) (pkd40@invalid-fmls-error pk1345@stx pk134c@fmls))) pk1349@ls/false) (let ((pk1353@t pk1347@t)) (let ((pk1355@ls/false (pkd86@syntax-dispatch pk1353@t '(_ (any . #(each+ any () any)) any . each-any)))) (if pk1355@ls/false (apply (lambda (pk1357@who pk1358@fmls pk1359@last pk135a@b pk135b@b*) (if (pkb87@valid-bound-ids? (cons pk1359@last pk1358@fmls)) (pkd3c@bless (list 'define pk1357@who (list 'make-traced-procedure (list 'quote pk1357@who) (cons 'lambda (cons (append pk1358@fmls pk1359@last) (cons pk135a@b pk135b@b*)))))) (pkd40@invalid-fmls-error pk1345@stx (append pk1358@fmls pk1359@last)))) pk1355@ls/false) (let ((pk1361@t pk1353@t)) (let ((pk1363@ls/false (pkd86@syntax-dispatch pk1361@t '(_ any any)))) (if pk1363@ls/false (apply (lambda (pk1365@who pk1366@expr) (if (pkb7f@id? pk1365@who) (pkd3c@bless (list 'define pk1365@who (list 'let (list (list 'v pk1366@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote pk1365@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (pke66@syntax-violation '#f '"invalid name" pk1345@stx))) pk1363@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1361@t)))))))))))) (set! pk2874@pkd4a@trace-define-macro pkd4a@trace-define-macro) (set! pkd4c@trace-define-syntax-macro (lambda (pk1369@stx) (let ((pk136b@t pk1369@stx)) (let ((pk136d@ls/false (pkd86@syntax-dispatch pk136b@t '(_ any any)))) (if pk136d@ls/false (apply (lambda (pk136f@who pk1370@expr) (if (pkb7f@id? pk136f@who) (pkd3c@bless (list 'define-syntax pk136f@who (list 'make-traced-macro (list 'quote pk136f@who) pk1370@expr))) (pke66@syntax-violation '#f '"invalid name" pk1369@stx))) pk136d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk136b@t)))))) (set! pk2875@pkd4c@trace-define-syntax-macro pkd4c@trace-define-syntax-macro) (set! pkd4e@trace-let/rec-syntax (lambda (pk1373@who) (lambda (pk1375@stx) (let ((pk1377@t pk1375@stx)) (let ((pk1379@ls/false (pkd86@syntax-dispatch pk1377@t '(_ #(each (any any)) any . each-any)))) (if pk1379@ls/false (apply (lambda (pk137b@lhs* pk137c@rhs* pk137d@b pk137e@b*) (if (pkb87@valid-bound-ids? pk137b@lhs*) (let ((pk1383@rhs* (map (lambda (pk1385@lhs pk1386@rhs) (list 'make-traced-macro (list 'quote pk1385@lhs) pk1386@rhs)) pk137b@lhs* pk137c@rhs*))) (pkd3c@bless (cons pk1373@who (cons (map list pk137b@lhs* pk1383@rhs*) (cons pk137d@b pk137e@b*))))) (pkd40@invalid-fmls-error pk1375@stx pk137b@lhs*))) pk1379@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1377@t))))))) (set! pk2876@pkd4e@trace-let/rec-syntax pkd4e@trace-let/rec-syntax) (set! pkd50@trace-let-syntax-macro (pkd4e@trace-let/rec-syntax 'let-syntax)) (set! pk2877@pkd50@trace-let-syntax-macro pkd50@trace-let-syntax-macro) (set! pkd52@trace-letrec-syntax-macro (pkd4e@trace-let/rec-syntax 'letrec-syntax)) (set! pk2878@pkd52@trace-letrec-syntax-macro pkd52@trace-letrec-syntax-macro) (set! pkd54@guard-macro (lambda (pk1389@x) (letrec* ((pk138c@gen-clauses (lambda (pk13a3@con pk13a4@outerk pk13a5@clause*) (letrec* ((pk13aa@f (lambda (pk13e3@x pk13e4@k) (let ((pk13e7@t pk13e3@x)) (let ((pk13e9@ls/false (pkd86@syntax-dispatch pk13e7@t '(any #(scheme-id =>) any)))) (if pk13e9@ls/false (apply (lambda (pk13eb@e pk13ec@p) (let ((pk13ef@t (gensym))) (list 'let (list (list pk13ef@t pk13eb@e)) (list 'if pk13ef@t (list pk13ec@p pk13ef@t) pk13e4@k)))) pk13e9@ls/false) (let ((pk13f1@t pk13e7@t)) (let ((pk13f3@ls/false (pkd86@syntax-dispatch pk13f1@t '(any)))) (if pk13f3@ls/false (apply (lambda (pk13f5@e) (let ((pk13f7@t (gensym))) (list 'let (list (list pk13f7@t pk13f5@e)) (list 'if pk13f7@t pk13f7@t pk13e4@k)))) pk13f3@ls/false) (let ((pk13f9@t pk13f1@t)) (let ((pk13fb@ls/false (pkd86@syntax-dispatch pk13f9@t '(any any . each-any)))) (if pk13fb@ls/false (apply (lambda (pk13fd@e pk13fe@v pk13ff@v*) (list 'if pk13fd@e (cons 'begin (cons pk13fe@v pk13ff@v*)) pk13e4@k)) pk13fb@ls/false) (let ((pk1403@t pk13f9@t)) (let ((pk1405@ls/false (pkd86@syntax-dispatch pk1403@t '_))) (if pk1405@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid guard clause" pk13e3@x)) pk1405@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1403@t))))))))))))))) (pk13ac@f* (lambda (pk13b9@x*) (let ((pk13bb@t pk13b9@x*)) (let ((pk13bd@ls/false (pkd86@syntax-dispatch pk13bb@t '()))) (if pk13bd@ls/false (apply (lambda () (let ((pk13bf@g (gensym))) (values (list pk13bf@g (list 'lambda '() (list 'raise-continuable pk13a3@con))) pk13bf@g))) pk13bd@ls/false) (let ((pk13c1@t pk13bb@t)) (let ((pk13c3@ls/false (pkd86@syntax-dispatch pk13c1@t '((#(scheme-id else) any . each-any))))) (if pk13c3@ls/false (apply (lambda (pk13c5@e pk13c6@e*) (values (cons 'begin (cons pk13c5@e pk13c6@e*)) '#f)) pk13c3@ls/false) (let ((pk13c9@t pk13c1@t)) (let ((pk13cb@ls/false (pkd86@syntax-dispatch pk13c9@t '(any . any)))) (if pk13cb@ls/false (apply (lambda (pk13cd@cls pk13ce@cls*) (call-with-values (lambda () (pk13ac@f* pk13ce@cls*)) (lambda (pk13d5@pk13d2 pk13d6@pk13d4) (let ((pk13d9@g pk13d6@pk13d4) (pk13da@e pk13d5@pk13d2)) (values (pk13aa@f pk13cd@cls pk13da@e) pk13d9@g))))) pk13cb@ls/false) (let ((pk13dd@t pk13c9@t)) (let ((pk13df@ls/false (pkd86@syntax-dispatch pk13dd@t 'any))) (if pk13df@ls/false (apply (lambda (pk13e1@others) (pke66@syntax-violation '#f '"invalid guard clause" pk13e1@others)) pk13df@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk13dd@t)))))))))))))))) (call-with-values (lambda () (pk13ac@f* pk13a5@clause*)) (lambda (pk13b1@pk13ae pk13b2@pk13b0) (let ((pk13b5@raisek pk13b2@pk13b0) (pk13b6@code pk13b1@pk13ae)) (if pk13b5@raisek (list (list 'call/cc (list 'lambda (list pk13b5@raisek) (list pk13a4@outerk (list 'lambda '() pk13b6@code))))) (list pk13a4@outerk (list 'lambda '() pk13b6@code)))))))))) (let ((pk138d@t pk1389@x)) (let ((pk138f@ls/false (pkd86@syntax-dispatch pk138d@t '(_ (any . each-any) any . each-any)))) (if (and pk138f@ls/false (apply (lambda (pk1391@con pk1392@clause* pk1393@b pk1394@b*) (pkb7f@id? pk1391@con)) pk138f@ls/false)) (apply (lambda (pk1399@con pk139a@clause* pk139b@b pk139c@b*) (let ((pk13a1@outerk (gensym))) (pkd3c@bless (list (list 'call/cc (list 'lambda (list pk13a1@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list pk1399@con) (pk138c@gen-clauses pk1399@con pk13a1@outerk pk139a@clause*)) (cons 'lambda (cons '() (cons pk139b@b pk139c@b*))))))))))) pk138f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk138d@t))))))) (set! pk2879@pkd54@guard-macro pkd54@guard-macro) (set! pkd56@define-enumeration-macro (lambda (pk1407@stx) (letrec* ((pk140a@set? (lambda (pk1423@x) (or (null? pk1423@x) (and (not (memq (car pk1423@x) (cdr pk1423@x))) (pk140a@set? (cdr pk1423@x)))))) (pk140c@remove-dups (lambda (pk1421@ls) (if (null? pk1421@ls) '() (cons (car pk1421@ls) (pk140c@remove-dups (remq (car pk1421@ls) (cdr pk1421@ls)))))))) (let ((pk140d@t pk1407@stx)) (let ((pk140f@ls/false (pkd86@syntax-dispatch pk140d@t '(_ any each-any any)))) (if (and pk140f@ls/false (apply (lambda (pk1411@name pk1412@id* pk1413@maker) (and (pkb7f@id? pk1411@name) (pkb7f@id? pk1413@maker) (for-all pkb7f@id? pk1412@id*))) pk140f@ls/false)) (apply (lambda (pk1417@name pk1418@id* pk1419@maker) (let ((pk141d@name* (pk140c@remove-dups (pke6c@syntax->datum pk1418@id*))) (pk141e@mk (gensym))) (pkd3c@bless (list 'begin (list 'define pk141e@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote pk141d@name*)))) (list 'define-syntax pk1417@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote pk141d@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote pk1417@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax pk1419@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote pk1419@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote pk141d@name*)) (cons 'syntax-violation (cons (list 'quote pk1419@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons pk141e@mk '('(n* ...))))))))))))) pk140f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk140d@t))))))) (set! pk287a@pkd56@define-enumeration-macro pkd56@define-enumeration-macro) (set! pkd58@time-macro (lambda (pk1425@stx) (let ((pk1427@t pk1425@stx)) (let ((pk1429@ls/false (pkd86@syntax-dispatch pk1427@t '(_ any)))) (if pk1429@ls/false (apply (lambda (pk142b@expr) (pkd3c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() pk142b@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) pk1429@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1427@t)))))) (set! pk287b@pkd58@time-macro pkd58@time-macro) (set! pkd5a@delay-macro (lambda (pk142d@stx) (let ((pk142f@t pk142d@stx)) (let ((pk1431@ls/false (pkd86@syntax-dispatch pk142f@t '(_ any)))) (if pk1431@ls/false (apply (lambda (pk1433@expr) (pkd3c@bless (list 'make-promise (list 'lambda '() pk1433@expr)))) pk1431@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk142f@t)))))) (set! pk287c@pkd5a@delay-macro pkd5a@delay-macro) (set! pkd5c@assert-macro (lambda (pk1435@stx) (let ((pk1437@t pk1435@stx)) (let ((pk1439@ls/false (pkd86@syntax-dispatch pk1437@t '(_ any)))) (if pk1439@ls/false (apply (lambda (pk143b@expr) (let ((pk143d@pos (or (pke5e@expression-position pk1435@stx) (pke5e@expression-position pk143b@expr)))) (pkd3c@bless (list 'let (list (list 'x pk143b@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote pk143b@expr) (list 'quote pk143d@pos))))))) pk1439@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1437@t)))))) (set! pk287d@pkd5c@assert-macro pkd5c@assert-macro) (set! pkd5e@endianness-macro (lambda (pk143f@stx) (let ((pk1441@t pk143f@stx)) (let ((pk1443@ls/false (pkd86@syntax-dispatch pk1441@t '(_ any)))) (if pk1443@ls/false (apply (lambda (pk1445@e) (let ((pk1447@t (pke6c@syntax->datum pk1445@e))) (if (memv pk1447@t '(little)) (pkd3c@bless ''little) (if (memv pk1447@t '(big)) (pkd3c@bless ''big) (pke66@syntax-violation '#f '"endianness must be big or little" pk143f@stx))))) pk1443@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1441@t)))))) (set! pk287e@pkd5e@endianness-macro pkd5e@endianness-macro) (set! pkd60@identifier-syntax-macro (lambda (pk1449@stx) (let ((pk144b@t pk1449@stx)) (let ((pk144d@ls/false (pkd86@syntax-dispatch pk144b@t '(_ any)))) (if pk144d@ls/false (apply (lambda (pk144f@expr) (pkd3c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax pk144f@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax pk144f@expr) '((syntax (e* ...)))))))))) pk144d@ls/false) (let ((pk1451@t pk144b@t)) (let ((pk1453@ls/false (pkd86@syntax-dispatch pk1451@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and pk1453@ls/false (apply (lambda (pk1455@id1 pk1456@expr1 pk1457@id2 pk1458@expr2 pk1459@expr3) (and (pkb7f@id? pk1455@id1) (pkb7f@id? pk1457@id2) (pkb7f@id? pk1458@expr2))) pk1453@ls/false)) (apply (lambda (pk145f@id1 pk1460@expr1 pk1461@id2 pk1462@expr2 pk1463@expr3) (pkd3c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax pk1460@expr1)) (list (list 'set! 'id pk1462@expr2) (list 'syntax pk1463@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons pk1460@expr1 '(e* ...))))))))) pk1453@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1451@t))))))))) (set! pk287f@pkd60@identifier-syntax-macro pkd60@identifier-syntax-macro) (set! pkd62@do-macro (lambda (pk1469@stx) (letrec* ((pk146c@bind (lambda (pk1483@x) (let ((pk1485@t pk1483@x)) (let ((pk1487@ls/false (pkd86@syntax-dispatch pk1485@t '(any any)))) (if pk1487@ls/false (apply (lambda (pk1489@x pk148a@init) (list pk1489@x pk148a@init pk1489@x)) pk1487@ls/false) (let ((pk148d@t pk1485@t)) (let ((pk148f@ls/false (pkd86@syntax-dispatch pk148d@t '(any any any)))) (if pk148f@ls/false (apply (lambda (pk1491@x pk1492@init pk1493@step) (list pk1491@x pk1492@init pk1493@step)) pk148f@ls/false) (let ((pk1497@t pk148d@t)) (let ((pk1499@ls/false (pkd86@syntax-dispatch pk1497@t '_))) (if pk1499@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid binding" pk1469@stx)) pk1499@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1497@t))))))))))))) (let ((pk146d@t pk1469@stx)) (let ((pk146f@ls/false (pkd86@syntax-dispatch pk146d@t '(_ each-any (any . each-any) . each-any)))) (if pk146f@ls/false (apply (lambda (pk1471@binding* pk1472@test pk1473@expr* pk1474@command*) (let ((pk1479@t (map pk146c@bind pk1471@binding*))) (let ((pk147b@ls/false (pkd86@syntax-dispatch pk1479@t '#(each (any any any))))) (if pk147b@ls/false (apply (lambda (pk147d@x* pk147e@init* pk147f@step*) (if (pkb87@valid-bound-ids? pk147d@x*) (pkd3c@bless (list 'letrec (list (list 'loop (list 'lambda pk147d@x* (list 'if pk1472@test (cons 'begin (cons '(if #f #f) pk1473@expr*)) (cons 'begin (append pk1474@command* (list (cons 'loop pk147f@step*)))))))) (cons 'loop pk147e@init*))) (pke66@syntax-violation '#f '"invalid bindings" pk1469@stx))) pk147b@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1479@t))))) pk146f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk146d@t))))))) (set! pk2880@pkd62@do-macro pkd62@do-macro) (set! pkd64@let*-macro (lambda (pk149b@stx) (let ((pk149d@t pk149b@stx)) (let ((pk149f@ls/false (pkd86@syntax-dispatch pk149d@t '(_ #(each (any any)) any . each-any)))) (if (and pk149f@ls/false (apply (lambda (pk14a1@lhs* pk14a2@rhs* pk14a3@b pk14a4@b*) (for-all pkb7f@id? pk14a1@lhs*)) pk149f@ls/false)) (apply (lambda (pk14a9@lhs* pk14aa@rhs* pk14ab@b pk14ac@b*) (pkd3c@bless (let pk14b3@f ((pk14b1@x* (map list pk14a9@lhs* pk14aa@rhs*))) (if (null? pk14b1@x*) (cons 'let (cons '() (cons pk14ab@b pk14ac@b*))) (list 'let (list (car pk14b1@x*)) (pk14b3@f (cdr pk14b1@x*))))))) pk149f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk149d@t)))))) (set! pk2881@pkd64@let*-macro pkd64@let*-macro) (set! pkd66@or-macro (lambda (pk14b5@stx) (let ((pk14b7@t pk14b5@stx)) (let ((pk14b9@ls/false (pkd86@syntax-dispatch pk14b7@t '(_)))) (if pk14b9@ls/false (apply (lambda () '#f) pk14b9@ls/false) (let ((pk14bb@t pk14b7@t)) (let ((pk14bd@ls/false (pkd86@syntax-dispatch pk14bb@t '(_ any . each-any)))) (if pk14bd@ls/false (apply (lambda (pk14bf@e pk14c0@e*) (pkd3c@bless (let pk14c7@f ((pk14c3@e pk14bf@e) (pk14c4@e* pk14c0@e*)) (if (null? pk14c4@e*) (list 'begin '#f pk14c3@e) (list 'let (list (list 't pk14c3@e)) (list 'if 't 't (pk14c7@f (car pk14c4@e*) (cdr pk14c4@e*)))))))) pk14bd@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk14bb@t))))))))) (set! pk2882@pkd66@or-macro pkd66@or-macro) (set! pkd68@and-macro (lambda (pk14c9@stx) (let ((pk14cb@t pk14c9@stx)) (let ((pk14cd@ls/false (pkd86@syntax-dispatch pk14cb@t '(_)))) (if pk14cd@ls/false (apply (lambda () '#t) pk14cd@ls/false) (let ((pk14cf@t pk14cb@t)) (let ((pk14d1@ls/false (pkd86@syntax-dispatch pk14cf@t '(_ any . each-any)))) (if pk14d1@ls/false (apply (lambda (pk14d3@e pk14d4@e*) (pkd3c@bless (let pk14db@f ((pk14d7@e pk14d3@e) (pk14d8@e* pk14d4@e*)) (if (null? pk14d8@e*) (list 'begin '#f pk14d7@e) (cons 'if (cons pk14d7@e (cons (pk14db@f (car pk14d8@e*) (cdr pk14d8@e*)) '(#f)))))))) pk14d1@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk14cf@t))))))))) (set! pk2883@pkd68@and-macro pkd68@and-macro) (set! pkd6a@cond-macro (lambda (pk14dd@stx) (let ((pk14df@t pk14dd@stx)) (let ((pk14e1@ls/false (pkd86@syntax-dispatch pk14df@t '(_ any . each-any)))) (if pk14e1@ls/false (apply (lambda (pk14e3@cls pk14e4@cls*) (pkd3c@bless (let pk14eb@f ((pk14e7@cls pk14e3@cls) (pk14e8@cls* pk14e4@cls*)) (if (null? pk14e8@cls*) (let ((pk14ed@t pk14e7@cls)) (let ((pk14ef@ls/false (pkd86@syntax-dispatch pk14ed@t '(#(scheme-id else) any . each-any)))) (if pk14ef@ls/false (apply (lambda (pk14f1@e pk14f2@e*) (cons 'begin (cons pk14f1@e pk14f2@e*))) pk14ef@ls/false) (let ((pk14f5@t pk14ed@t)) (let ((pk14f7@ls/false (pkd86@syntax-dispatch pk14f5@t '(any #(scheme-id =>) any)))) (if pk14f7@ls/false (apply (lambda (pk14f9@e pk14fa@p) (list 'let (list (list 't pk14f9@e)) (list 'if 't (cons pk14fa@p '(t))))) pk14f7@ls/false) (let ((pk14fd@t pk14f5@t)) (let ((pk14ff@ls/false (pkd86@syntax-dispatch pk14fd@t '(any)))) (if pk14ff@ls/false (apply (lambda (pk1501@e) (cons 'or (cons pk1501@e '((if #f #f))))) pk14ff@ls/false) (let ((pk1503@t pk14fd@t)) (let ((pk1505@ls/false (pkd86@syntax-dispatch pk1503@t '(any . each-any)))) (if pk1505@ls/false (apply (lambda (pk1507@e pk1508@e*) (list 'if pk1507@e (cons 'begin pk1508@e*))) pk1505@ls/false) (let ((pk150b@t pk1503@t)) (let ((pk150d@ls/false (pkd86@syntax-dispatch pk150b@t '_))) (if pk150d@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid last clause" pk14dd@stx)) pk150d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk150b@t)))))))))))))))) (let ((pk150f@t pk14e7@cls)) (let ((pk1511@ls/false (pkd86@syntax-dispatch pk150f@t '(#(scheme-id else) any . each-any)))) (if pk1511@ls/false (apply (lambda (pk1513@e pk1514@e*) (pke66@syntax-violation '#f '"incorrect position of keyword else" pk14dd@stx)) pk1511@ls/false) (let ((pk1517@t pk150f@t)) (let ((pk1519@ls/false (pkd86@syntax-dispatch pk1517@t '(any #(scheme-id =>) any)))) (if pk1519@ls/false (apply (lambda (pk151b@e pk151c@p) (list 'let (list (list 't pk151b@e)) (list 'if 't (cons pk151c@p '(t)) (pk14eb@f (car pk14e8@cls*) (cdr pk14e8@cls*))))) pk1519@ls/false) (let ((pk151f@t pk1517@t)) (let ((pk1521@ls/false (pkd86@syntax-dispatch pk151f@t '(any)))) (if pk1521@ls/false (apply (lambda (pk1523@e) (list 'or pk1523@e (pk14eb@f (car pk14e8@cls*) (cdr pk14e8@cls*)))) pk1521@ls/false) (let ((pk1525@t pk151f@t)) (let ((pk1527@ls/false (pkd86@syntax-dispatch pk1525@t '(any . each-any)))) (if pk1527@ls/false (apply (lambda (pk1529@e pk152a@e*) (list 'if pk1529@e (cons 'begin pk152a@e*) (pk14eb@f (car pk14e8@cls*) (cdr pk14e8@cls*)))) pk1527@ls/false) (let ((pk152d@t pk1525@t)) (let ((pk152f@ls/false (pkd86@syntax-dispatch pk152d@t '_))) (if pk152f@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid last clause" pk14dd@stx)) pk152f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk152d@t)))))))))))))))))))) pk14e1@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk14df@t)))))) (set! pk2884@pkd6a@cond-macro pkd6a@cond-macro) (set! pkd6c@do-include (lambda (pk1531@stx pk1532@id pk1533@filename) (let ((pk1537@filename (pkb93@stx->datum pk1533@filename))) (begin (if (not (and (string? pk1537@filename) (pkb7f@id? pk1532@id))) (pke66@syntax-violation '#f '"invalid syntax" pk1531@stx) (void)) (cons (pkd3c@bless 'begin) (with-input-from-file pk1537@filename (lambda () (let pk153b@f ((pk1539@ls '())) (let ((pk153d@x (pk6c1@pk591@read-annotated))) (if (eof-object? pk153d@x) (reverse pk1539@ls) (pk153b@f (cons (pkb5f@datum->stx pk1532@id pk153d@x) pk1539@ls)))))))))))) (set! pk2885@pkd6c@do-include pkd6c@do-include) (set! pkd6e@include-macro (lambda (pk153f@e) (let ((pk1541@t pk153f@e)) (let ((pk1543@ls/false (pkd86@syntax-dispatch pk1541@t '(any any)))) (if pk1543@ls/false (apply (lambda (pk1545@id pk1546@filename) (pkd6c@do-include pk153f@e pk1545@id pk1546@filename)) pk1543@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1541@t)))))) (set! pk2886@pkd6e@include-macro pkd6e@include-macro) (set! pkd70@include-into-macro (lambda (pk1549@e) (let ((pk154b@t pk1549@e)) (let ((pk154d@ls/false (pkd86@syntax-dispatch pk154b@t '(_ any any)))) (if pk154d@ls/false (apply (lambda (pk154f@id pk1550@filename) (pkd6c@do-include pk1549@e pk154f@id pk1550@filename)) pk154d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk154b@t)))))) (set! pk2887@pkd70@include-into-macro pkd70@include-into-macro) (set! pkd72@syntax-rules-macro (lambda (pk1553@e) (let ((pk1555@t pk1553@e)) (let ((pk1557@ls/false (pkd86@syntax-dispatch pk1555@t '(_ each-any . #(each (any any)))))) (if pk1557@ls/false (apply (lambda (pk1559@lits pk155a@pat* pk155b@tmp*) (begin (pkd8c@verify-literals pk1559@lits pk1553@e) (pkd3c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons pk1559@lits (map (lambda (pk155f@pat pk1560@tmp) (let ((pk1563@t pk155f@pat)) (let ((pk1565@ls/false (pkd86@syntax-dispatch pk1563@t '(_ . any)))) (if pk1565@ls/false (apply (lambda (pk1567@rest) (list (cons 'g pk1567@rest) (list 'syntax pk1560@tmp))) pk1565@ls/false) (let ((pk1569@t pk1563@t)) (let ((pk156b@ls/false (pkd86@syntax-dispatch pk1569@t '_))) (if pk156b@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid syntax-rules pattern" pk1553@e pk155f@pat)) pk156b@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1569@t)))))))) pk155a@pat* pk155b@tmp*)))))))) pk1557@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1555@t)))))) (set! pk2888@pkd72@syntax-rules-macro pkd72@syntax-rules-macro) (set! pkd74@quasiquote-macro (letrec* ((pk156e@datum (lambda (pk166f@x) (list (pkd0e@scheme-stx 'quote) (pkb67@mkstx pk166f@x pkb03@top-mark* '() '())))) (pk158a@quasicons* (lambda (pk1667@x pk1668@y) (let pk166d@f ((pk166b@x pk1667@x)) (if (null? pk166b@x) pk1668@y (pk158c@quasicons (car pk166b@x) (pk166d@f (cdr pk166b@x))))))) (pk158c@quasicons (lambda (pk1641@x pk1642@y) (let ((pk1645@t pk1642@y)) (let ((pk1647@ls/false (pkd86@syntax-dispatch pk1645@t '(#(scheme-id quote) any)))) (if pk1647@ls/false (apply (lambda (pk1649@dy) (let ((pk164b@t pk1641@x)) (let ((pk164d@ls/false (pkd86@syntax-dispatch pk164b@t '(#(scheme-id quote) any)))) (if pk164d@ls/false (apply (lambda (pk164f@dx) (list (pkd0e@scheme-stx 'quote) (cons pk164f@dx pk1649@dy))) pk164d@ls/false) (let ((pk1651@t pk164b@t)) (let ((pk1653@ls/false (pkd86@syntax-dispatch pk1651@t '_))) (if pk1653@ls/false (apply (lambda () (let ((pk1655@t pk1649@dy)) (let ((pk1657@ls/false (pkd86@syntax-dispatch pk1655@t '()))) (if pk1657@ls/false (apply (lambda () (list (pkd0e@scheme-stx 'list) pk1641@x)) pk1657@ls/false) (let ((pk1659@t pk1655@t)) (let ((pk165b@ls/false (pkd86@syntax-dispatch pk1659@t '_))) (if pk165b@ls/false (apply (lambda () (list (pkd0e@scheme-stx 'cons) pk1641@x pk1642@y)) pk165b@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1659@t)))))))) pk1653@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1651@t)))))))) pk1647@ls/false) (let ((pk165d@t pk1645@t)) (let ((pk165f@ls/false (pkd86@syntax-dispatch pk165d@t '(#(scheme-id list) . each-any)))) (if pk165f@ls/false (apply (lambda (pk1661@stuff) (cons* (pkd0e@scheme-stx 'list) pk1641@x pk1661@stuff)) pk165f@ls/false) (let ((pk1663@t pk165d@t)) (let ((pk1665@ls/false (pkd86@syntax-dispatch pk1663@t '_))) (if pk1665@ls/false (apply (lambda () (list (pkd0e@scheme-stx 'cons) pk1641@x pk1642@y)) pk1665@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1663@t)))))))))))) (pk158e@quasiappend (lambda (pk1627@x pk1628@y) (let ((pk162b@ls (let pk162f@f ((pk162d@x pk1627@x)) (if (null? pk162d@x) (let ((pk1631@t pk1628@y)) (let ((pk1633@ls/false (pkd86@syntax-dispatch pk1631@t '(#(scheme-id quote) ())))) (if pk1633@ls/false (apply (lambda () '()) pk1633@ls/false) (let ((pk1635@t pk1631@t)) (let ((pk1637@ls/false (pkd86@syntax-dispatch pk1635@t '_))) (if pk1637@ls/false (apply (lambda () (list pk1628@y)) pk1637@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1635@t))))))) (let ((pk1639@t (car pk162d@x))) (let ((pk163b@ls/false (pkd86@syntax-dispatch pk1639@t '(#(scheme-id quote) ())))) (if pk163b@ls/false (apply (lambda () (pk162f@f (cdr pk162d@x))) pk163b@ls/false) (let ((pk163d@t pk1639@t)) (let ((pk163f@ls/false (pkd86@syntax-dispatch pk163d@t '_))) (if pk163f@ls/false (apply (lambda () (cons (car pk162d@x) (pk162f@f (cdr pk162d@x)))) pk163f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk163d@t))))))))))) (if (null? pk162b@ls) (list (pkd0e@scheme-stx 'quote) '()) (if (null? (cdr pk162b@ls)) (car pk162b@ls) (cons* (pkd0e@scheme-stx 'append) pk162b@ls)))))) (pk1590@quasivector (lambda (pk15f5@x) (let ((pk15f7@pat-x pk15f5@x)) (let ((pk15f9@t pk15f7@pat-x)) (let ((pk15fb@ls/false (pkd86@syntax-dispatch pk15f9@t '(#(scheme-id quote) each-any)))) (if pk15fb@ls/false (apply (lambda (pk15fd@x*) (list (pkd0e@scheme-stx 'quote) (list->vector pk15fd@x*))) pk15fb@ls/false) (let ((pk15ff@t pk15f9@t)) (let ((pk1601@ls/false (pkd86@syntax-dispatch pk15ff@t '_))) (if pk1601@ls/false (apply (lambda () (let pk1609@f ((pk1603@x pk15f5@x) (pk1604@k (lambda (pk1607@ls) (cons* (pkd0e@scheme-stx 'vector) pk1607@ls)))) (let ((pk160b@t pk1603@x)) (let ((pk160d@ls/false (pkd86@syntax-dispatch pk160b@t '(#(scheme-id quote) each-any)))) (if pk160d@ls/false (apply (lambda (pk160f@x*) (pk1604@k (map (lambda (pk1611@x) (list (pkd0e@scheme-stx 'quote) pk1611@x)) pk160f@x*))) pk160d@ls/false) (let ((pk1613@t pk160b@t)) (let ((pk1615@ls/false (pkd86@syntax-dispatch pk1613@t '(#(scheme-id list) . each-any)))) (if pk1615@ls/false (apply (lambda (pk1617@x*) (pk1604@k pk1617@x*)) pk1615@ls/false) (let ((pk1619@t pk1613@t)) (let ((pk161b@ls/false (pkd86@syntax-dispatch pk1619@t '(#(scheme-id cons) any any)))) (if pk161b@ls/false (apply (lambda (pk161d@x pk161e@y) (pk1609@f pk161e@y (lambda (pk1621@ls) (pk1604@k (cons pk161d@x pk1621@ls))))) pk161b@ls/false) (let ((pk1623@t pk1619@t)) (let ((pk1625@ls/false (pkd86@syntax-dispatch pk1623@t '_))) (if pk1625@ls/false (apply (lambda () (list (pkd0e@scheme-stx 'list->vector) pk15f7@pat-x)) pk1625@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1623@t))))))))))))))) pk1601@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk15ff@t)))))))))) (pk1592@vquasi (lambda (pk15d3@p pk15d4@lev) (let ((pk15d7@t pk15d3@p)) (let ((pk15d9@ls/false (pkd86@syntax-dispatch pk15d7@t '(any . any)))) (if pk15d9@ls/false (apply (lambda (pk15db@p pk15dc@q) (let ((pk15df@t pk15db@p)) (let ((pk15e1@ls/false (pkd86@syntax-dispatch pk15df@t '(#(scheme-id unquote) . each-any)))) (if pk15e1@ls/false (apply (lambda (pk15e3@p) (if (= pk15d4@lev '0) (pk158a@quasicons* pk15e3@p (pk1592@vquasi pk15dc@q pk15d4@lev)) (pk158c@quasicons (pk158c@quasicons (pk156e@datum 'unquote) (pk1594@quasi pk15e3@p (- pk15d4@lev '1))) (pk1592@vquasi pk15dc@q pk15d4@lev)))) pk15e1@ls/false) (let ((pk15e5@t pk15df@t)) (let ((pk15e7@ls/false (pkd86@syntax-dispatch pk15e5@t '(#(scheme-id unquote-splicing) . each-any)))) (if pk15e7@ls/false (apply (lambda (pk15e9@p) (if (= pk15d4@lev '0) (pk158e@quasiappend pk15e9@p (pk1592@vquasi pk15dc@q pk15d4@lev)) (pk158c@quasicons (pk158c@quasicons (pk156e@datum 'unquote-splicing) (pk1594@quasi pk15e9@p (- pk15d4@lev '1))) (pk1592@vquasi pk15dc@q pk15d4@lev)))) pk15e7@ls/false) (let ((pk15eb@t pk15e5@t)) (let ((pk15ed@ls/false (pkd86@syntax-dispatch pk15eb@t 'any))) (if pk15ed@ls/false (apply (lambda (pk15ef@p) (pk158c@quasicons (pk1594@quasi pk15ef@p pk15d4@lev) (pk1592@vquasi pk15dc@q pk15d4@lev))) pk15ed@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk15eb@t))))))))))) pk15d9@ls/false) (let ((pk15f1@t pk15d7@t)) (let ((pk15f3@ls/false (pkd86@syntax-dispatch pk15f1@t '()))) (if pk15f3@ls/false (apply (lambda () (list (pkd0e@scheme-stx 'quote) '())) pk15f3@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk15f1@t))))))))) (pk1594@quasi (lambda (pk159d@p pk159e@lev) (let ((pk15a1@t pk159d@p)) (let ((pk15a3@ls/false (pkd86@syntax-dispatch pk15a1@t '(#(scheme-id unquote) any)))) (if pk15a3@ls/false (apply (lambda (pk15a5@p) (if (= pk159e@lev '0) pk15a5@p (pk158c@quasicons (pk156e@datum 'unquote) (pk1594@quasi (list pk15a5@p) (- pk159e@lev '1))))) pk15a3@ls/false) (let ((pk15a7@t pk15a1@t)) (let ((pk15a9@ls/false (pkd86@syntax-dispatch pk15a7@t '((#(scheme-id unquote) . each-any) . any)))) (if pk15a9@ls/false (apply (lambda (pk15ab@p pk15ac@q) (if (= pk159e@lev '0) (pk158a@quasicons* pk15ab@p (pk1594@quasi pk15ac@q pk159e@lev)) (pk158c@quasicons (pk158c@quasicons (pk156e@datum 'unquote) (pk1594@quasi pk15ab@p (- pk159e@lev '1))) (pk1594@quasi pk15ac@q pk159e@lev)))) pk15a9@ls/false) (let ((pk15af@t pk15a7@t)) (let ((pk15b1@ls/false (pkd86@syntax-dispatch pk15af@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if pk15b1@ls/false (apply (lambda (pk15b3@p pk15b4@q) (if (= pk159e@lev '0) (pk158e@quasiappend pk15b3@p (pk1594@quasi pk15b4@q pk159e@lev)) (pk158c@quasicons (pk158c@quasicons (pk156e@datum 'unquote-splicing) (pk1594@quasi pk15b3@p (- pk159e@lev '1))) (pk1594@quasi pk15b4@q pk159e@lev)))) pk15b1@ls/false) (let ((pk15b7@t pk15af@t)) (let ((pk15b9@ls/false (pkd86@syntax-dispatch pk15b7@t '(#(scheme-id quasiquote) any)))) (if pk15b9@ls/false (apply (lambda (pk15bb@p) (pk158c@quasicons (pk156e@datum 'quasiquote) (pk1594@quasi (list pk15bb@p) (+ pk159e@lev '1)))) pk15b9@ls/false) (let ((pk15bd@t pk15b7@t)) (let ((pk15bf@ls/false (pkd86@syntax-dispatch pk15bd@t '(any . any)))) (if pk15bf@ls/false (apply (lambda (pk15c1@p pk15c2@q) (pk158c@quasicons (pk1594@quasi pk15c1@p pk159e@lev) (pk1594@quasi pk15c2@q pk159e@lev))) pk15bf@ls/false) (let ((pk15c5@t pk15bd@t)) (let ((pk15c7@ls/false (pkd86@syntax-dispatch pk15c5@t '#(vector each-any)))) (if (and pk15c7@ls/false (apply (lambda (pk15c9@x) (not (pkb4b@stx? pk15c9@x))) pk15c7@ls/false)) (apply (lambda (pk15cb@x) (pk1590@quasivector (pk1592@vquasi pk15cb@x pk159e@lev))) pk15c7@ls/false) (let ((pk15cd@t pk15c5@t)) (let ((pk15cf@ls/false (pkd86@syntax-dispatch pk15cd@t 'any))) (if pk15cf@ls/false (apply (lambda (pk15d1@p) (list (pkd0e@scheme-stx 'quote) pk15d1@p)) pk15cf@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk15cd@t))))))))))))))))))))))))) (lambda (pk1595@x) (let ((pk1597@t pk1595@x)) (let ((pk1599@ls/false (pkd86@syntax-dispatch pk1597@t '(_ any)))) (if pk1599@ls/false (apply (lambda (pk159b@e) (pk1594@quasi pk159b@e '0)) pk1599@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1597@t))))))) (set! pk2889@pkd74@quasiquote-macro pkd74@quasiquote-macro) (set! pkd76@quasisyntax-macro (letrec* ((pk1672@quasi (lambda (pk168d@p pk168e@lev) (let ((pk1691@t pk168d@p)) (let ((pk1693@ls/false (pkd86@syntax-dispatch pk1691@t '(#(scheme-id unsyntax) any)))) (if pk1693@ls/false (apply (lambda (pk1695@p) (if (= pk168e@lev '0) (let ((pk1697@g (gensym))) (values (list pk1697@g) (list pk1695@p) pk1697@g)) (call-with-values (lambda () (pk1672@quasi pk1695@p (- pk168e@lev '1))) (lambda (pk169f@pk169a pk16a0@pk169c pk16a1@pk169e) (let ((pk16a5@p pk16a1@pk169e) (pk16a6@rhs* pk16a0@pk169c) (pk16a7@lhs* pk169f@pk169a)) (values pk16a7@lhs* pk16a6@rhs* (list 'unsyntax pk16a5@p))))))) pk1693@ls/false) (let ((pk16ab@t pk1691@t)) (let ((pk16ad@ls/false (pkd86@syntax-dispatch pk16ab@t '#(scheme-id unsyntax)))) (if (and pk16ad@ls/false (apply (lambda () (= pk168e@lev '0)) pk16ad@ls/false)) (apply (lambda () (pke66@syntax-violation '#f '"incorrect use of unsyntax" pk168d@p)) pk16ad@ls/false) (let ((pk16af@t pk16ab@t)) (let ((pk16b1@ls/false (pkd86@syntax-dispatch pk16af@t '((#(scheme-id unsyntax) . each-any) . any)))) (if pk16b1@ls/false (apply (lambda (pk16b3@p* pk16b4@q) (call-with-values (lambda () (pk1672@quasi pk16b4@q pk168e@lev)) (lambda (pk16bd@pk16b8 pk16be@pk16ba pk16bf@pk16bc) (let ((pk16c3@q pk16bf@pk16bc) (pk16c4@rhs* pk16be@pk16ba) (pk16c5@lhs* pk16bd@pk16b8)) (if (= pk168e@lev '0) (let ((pk16c9@g* (map (lambda (pk16cb@x) (gensym)) pk16b3@p*))) (values (append pk16c9@g* pk16c5@lhs*) (append pk16b3@p* pk16c4@rhs*) (append pk16c9@g* pk16c3@q))) (call-with-values (lambda () (pk1672@quasi pk16b3@p* (- pk168e@lev '1))) (lambda (pk16d3@pk16ce pk16d4@pk16d0 pk16d5@pk16d2) (let ((pk16d9@p* pk16d5@pk16d2) (pk16da@rhs2* pk16d4@pk16d0) (pk16db@lhs2* pk16d3@pk16ce)) (values (append pk16db@lhs2* pk16c5@lhs*) (append pk16da@rhs2* pk16c4@rhs*) (cons (cons 'unsyntax pk16d9@p*) pk16c3@q)))))))))) pk16b1@ls/false) (let ((pk16df@t pk16af@t)) (let ((pk16e1@ls/false (pkd86@syntax-dispatch pk16df@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if pk16e1@ls/false (apply (lambda (pk16e3@p* pk16e4@q) (call-with-values (lambda () (pk1672@quasi pk16e4@q pk168e@lev)) (lambda (pk16ed@pk16e8 pk16ee@pk16ea pk16ef@pk16ec) (let ((pk16f3@q pk16ef@pk16ec) (pk16f4@rhs* pk16ee@pk16ea) (pk16f5@lhs* pk16ed@pk16e8)) (if (= pk168e@lev '0) (let ((pk16f9@g* (map (lambda (pk16fb@x) (gensym)) pk16e3@p*))) (values (append (map (lambda (pk16fd@g) (cons pk16fd@g '(...))) pk16f9@g*) pk16f5@lhs*) (append pk16e3@p* pk16f4@rhs*) (append (apply append (map (lambda (pk16ff@g) (cons pk16ff@g '(...))) pk16f9@g*)) pk16f3@q))) (call-with-values (lambda () (pk1672@quasi pk16e3@p* (- pk168e@lev '1))) (lambda (pk1707@pk1702 pk1708@pk1704 pk1709@pk1706) (let ((pk170d@p* pk1709@pk1706) (pk170e@rhs2* pk1708@pk1704) (pk170f@lhs2* pk1707@pk1702)) (values (append pk170f@lhs2* pk16f5@lhs*) (append pk170e@rhs2* pk16f4@rhs*) (cons (cons 'unsyntax-splicing pk170d@p*) pk16f3@q)))))))))) pk16e1@ls/false) (let ((pk1713@t pk16df@t)) (let ((pk1715@ls/false (pkd86@syntax-dispatch pk1713@t '#(scheme-id unsyntax-splicing)))) (if (and pk1715@ls/false (apply (lambda () (= pk168e@lev '0)) pk1715@ls/false)) (apply (lambda () (pke66@syntax-violation '#f '"incorrect use of unsyntax-splicing" pk168d@p)) pk1715@ls/false) (let ((pk1717@t pk1713@t)) (let ((pk1719@ls/false (pkd86@syntax-dispatch pk1717@t '(#(scheme-id quasisyntax) any)))) (if pk1719@ls/false (apply (lambda (pk171b@p) (call-with-values (lambda () (pk1672@quasi pk171b@p (+ pk168e@lev '1))) (lambda (pk1723@pk171e pk1724@pk1720 pk1725@pk1722) (let ((pk1729@p pk1725@pk1722) (pk172a@rhs* pk1724@pk1720) (pk172b@lhs* pk1723@pk171e)) (values pk172b@lhs* pk172a@rhs* (list 'quasisyntax pk1729@p)))))) pk1719@ls/false) (let ((pk172f@t pk1717@t)) (let ((pk1731@ls/false (pkd86@syntax-dispatch pk172f@t '(any . any)))) (if pk1731@ls/false (apply (lambda (pk1733@p pk1734@q) (call-with-values (lambda () (pk1672@quasi pk1733@p pk168e@lev)) (lambda (pk1743@pk1738 pk1744@pk173a pk1745@pk173c) (call-with-values (lambda () (pk1672@quasi pk1734@q pk168e@lev)) (lambda (pk1749@pk173e pk174a@pk1740 pk174b@pk1742) (let ((pk174f@q pk174b@pk1742) (pk1750@rhs2* pk174a@pk1740) (pk1751@lhs2* pk1749@pk173e) (pk1752@p pk1745@pk173c) (pk1753@rhs* pk1744@pk173a) (pk1754@lhs* pk1743@pk1738)) (values (append pk1751@lhs2* pk1754@lhs*) (append pk1750@rhs2* pk1753@rhs*) (cons pk1752@p pk174f@q)))))))) pk1731@ls/false) (let ((pk175b@t pk172f@t)) (let ((pk175d@ls/false (pkd86@syntax-dispatch pk175b@t '#(vector each-any)))) (if pk175d@ls/false (apply (lambda (pk175f@x*) (call-with-values (lambda () (pk1672@quasi pk175f@x* pk168e@lev)) (lambda (pk1767@pk1762 pk1768@pk1764 pk1769@pk1766) (let ((pk176d@x* pk1769@pk1766) (pk176e@rhs* pk1768@pk1764) (pk176f@lhs* pk1767@pk1762)) (values pk176f@lhs* pk176e@rhs* (list->vector pk176d@x*)))))) pk175d@ls/false) (let ((pk1773@t pk175b@t)) (let ((pk1775@ls/false (pkd86@syntax-dispatch pk1773@t '_))) (if pk1775@ls/false (apply (lambda () (values '() '() pk168d@p)) pk1775@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1773@t))))))))))))))))))))))))))))))) (lambda (pk1673@x) (let ((pk1675@t pk1673@x)) (let ((pk1677@ls/false (pkd86@syntax-dispatch pk1675@t '(_ any)))) (if pk1677@ls/false (apply (lambda (pk1679@e) (call-with-values (lambda () (pk1672@quasi pk1679@e '0)) (lambda (pk1681@pk167c pk1682@pk167e pk1683@pk1680) (let ((pk1687@v pk1683@pk1680) (pk1688@rhs* pk1682@pk167e) (pk1689@lhs* pk1681@pk167c)) (pkd3c@bless (list 'syntax-case (cons 'list pk1688@rhs*) '() (list pk1689@lhs* (list 'syntax pk1687@v)))))))) pk1677@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1675@t))))))) (set! pk288a@pkd76@quasisyntax-macro pkd76@quasisyntax-macro) (set! pkd78@define-struct-macro (lambda (pk1777@stx) (pke66@syntax-violation '#f '"define-struct not supported" pk1777@stx))) (set! pk288b@pkd78@define-struct-macro pkd78@define-struct-macro) (set! pkd7a@define-record-type-macro (lambda (pk1779@x) (letrec* ((pk177c@id (lambda (pk196f@ctxt . pk1971@str*) (pke6a@datum->syntax pk196f@ctxt (string->symbol (apply string-append (map (lambda (pk1973@x) (if (symbol? pk1973@x) (symbol->string pk1973@x) (if (string? pk1973@x) pk1973@x (assertion-violation 'define-record-type '"BUG")))) pk1971@str*)))))) (pk177e@get-record-name (lambda (pk195d@spec) (let ((pk195f@t pk195d@spec)) (let ((pk1961@ls/false (pkd86@syntax-dispatch pk195f@t '(any any any)))) (if pk1961@ls/false (apply (lambda (pk1963@foo pk1964@make-foo pk1965@foo?) pk1963@foo) pk1961@ls/false) (let ((pk1969@t pk195f@t)) (let ((pk196b@ls/false (pkd86@syntax-dispatch pk1969@t 'any))) (if pk196b@ls/false (apply (lambda (pk196d@foo) pk196d@foo) pk196b@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1969@t))))))))) (pk1780@get-record-constructor-name (lambda (pk1949@spec) (let ((pk194b@t pk1949@spec)) (let ((pk194d@ls/false (pkd86@syntax-dispatch pk194b@t '(any any any)))) (if pk194d@ls/false (apply (lambda (pk194f@foo pk1950@make-foo pk1951@foo?) pk1950@make-foo) pk194d@ls/false) (let ((pk1955@t pk194b@t)) (let ((pk1957@ls/false (pkd86@syntax-dispatch pk1955@t 'any))) (if (and pk1957@ls/false (apply (lambda (pk1959@foo) (pkb7f@id? pk1959@foo)) pk1957@ls/false)) (apply (lambda (pk195b@foo) (pk177c@id pk195b@foo '"make-" (pkb93@stx->datum pk195b@foo))) pk1957@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1955@t))))))))) (pk1782@get-record-predicate-name (lambda (pk1935@spec) (let ((pk1937@t pk1935@spec)) (let ((pk1939@ls/false (pkd86@syntax-dispatch pk1937@t '(any any any)))) (if pk1939@ls/false (apply (lambda (pk193b@foo pk193c@make-foo pk193d@foo?) pk193d@foo?) pk1939@ls/false) (let ((pk1941@t pk1937@t)) (let ((pk1943@ls/false (pkd86@syntax-dispatch pk1941@t 'any))) (if (and pk1943@ls/false (apply (lambda (pk1945@foo) (pkb7f@id? pk1945@foo)) pk1943@ls/false)) (apply (lambda (pk1947@foo) (pk177c@id pk1947@foo (pkb93@stx->datum pk1947@foo) '"?")) pk1943@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1941@t))))))))) (pk1784@get-clause (lambda (pk1923@id pk1924@ls) (let ((pk1927@t pk1924@ls)) (let ((pk1929@ls/false (pkd86@syntax-dispatch pk1927@t '()))) (if pk1929@ls/false (apply (lambda () '#f) pk1929@ls/false) (let ((pk192b@t pk1927@t)) (let ((pk192d@ls/false (pkd86@syntax-dispatch pk192b@t '((any . any) . any)))) (if pk192d@ls/false (apply (lambda (pk192f@x pk1930@rest pk1931@ls) (if (pkb85@free-id=? (pkd3c@bless pk1923@id) pk192f@x) (cons pk192f@x pk1930@rest) (pk1784@get-clause pk1923@id pk1931@ls))) pk192d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk192b@t))))))))) (pk1786@foo-rtd-code (lambda (pk18d1@name pk18d2@clause* pk18d3@parent-rtd-code) (letrec* ((pk18d8@convert-field-spec* (lambda (pk1909@ls) (list->vector (map (lambda (pk190b@x) (let ((pk190d@t pk190b@x)) (let ((pk190f@ls/false (pkd86@syntax-dispatch pk190d@t '(#(scheme-id mutable) any . any)))) (if pk190f@ls/false (apply (lambda (pk1911@name pk1912@rest) (list 'mutable pk1911@name)) pk190f@ls/false) (let ((pk1915@t pk190d@t)) (let ((pk1917@ls/false (pkd86@syntax-dispatch pk1915@t '(#(scheme-id immutable) any . any)))) (if pk1917@ls/false (apply (lambda (pk1919@name pk191a@rest) (list 'immutable pk1919@name)) pk1917@ls/false) (let ((pk191d@t pk1915@t)) (let ((pk191f@ls/false (pkd86@syntax-dispatch pk191d@t 'any))) (if pk191f@ls/false (apply (lambda (pk1921@name) (list 'immutable pk1921@name)) pk191f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk191d@t))))))))))) pk1909@ls))))) (let ((pk18d9@uid-code (let ((pk18e1@t (pk1784@get-clause 'nongenerative pk18d2@clause*))) (let ((pk18e3@ls/false (pkd86@syntax-dispatch pk18e1@t '(_)))) (if pk18e3@ls/false (apply (lambda () (list 'quote (gensym))) pk18e3@ls/false) (let ((pk18e5@t pk18e1@t)) (let ((pk18e7@ls/false (pkd86@syntax-dispatch pk18e5@t '(_ any)))) (if pk18e7@ls/false (apply (lambda (pk18e9@uid) (list 'quote pk18e9@uid)) pk18e7@ls/false) (let ((pk18eb@t pk18e5@t)) (let ((pk18ed@ls/false (pkd86@syntax-dispatch pk18eb@t '_))) (if pk18ed@ls/false (apply (lambda () '#f) pk18ed@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk18eb@t))))))))))) (pk18da@sealed? (let ((pk18ef@t (pk1784@get-clause 'sealed pk18d2@clause*))) (let ((pk18f1@ls/false (pkd86@syntax-dispatch pk18ef@t '(_ #(atom #t))))) (if pk18f1@ls/false (apply (lambda () '#t) pk18f1@ls/false) (let ((pk18f3@t pk18ef@t)) (let ((pk18f5@ls/false (pkd86@syntax-dispatch pk18f3@t '_))) (if pk18f5@ls/false (apply (lambda () '#f) pk18f5@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk18f3@t)))))))) (pk18db@opaque? (let ((pk18f7@t (pk1784@get-clause 'opaque pk18d2@clause*))) (let ((pk18f9@ls/false (pkd86@syntax-dispatch pk18f7@t '(_ #(atom #t))))) (if pk18f9@ls/false (apply (lambda () '#t) pk18f9@ls/false) (let ((pk18fb@t pk18f7@t)) (let ((pk18fd@ls/false (pkd86@syntax-dispatch pk18fb@t '_))) (if pk18fd@ls/false (apply (lambda () '#f) pk18fd@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk18fb@t)))))))) (pk18dc@fields (let ((pk18ff@t (pk1784@get-clause 'fields pk18d2@clause*))) (let ((pk1901@ls/false (pkd86@syntax-dispatch pk18ff@t '(_ . each-any)))) (if pk1901@ls/false (apply (lambda (pk1903@field-spec*) (list 'quote (pk18d8@convert-field-spec* pk1903@field-spec*))) pk1901@ls/false) (let ((pk1905@t pk18ff@t)) (let ((pk1907@ls/false (pkd86@syntax-dispatch pk1905@t '_))) (if pk1907@ls/false (apply (lambda () ''#()) pk1907@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1905@t))))))))) (pkd3c@bless (list 'make-record-type-descriptor (list 'quote pk18d1@name) pk18d3@parent-rtd-code pk18d9@uid-code pk18da@sealed? pk18db@opaque? pk18dc@fields)))))) (pk1788@parent-rtd-code (lambda (pk18b9@clause*) (let ((pk18bb@t (pk1784@get-clause 'parent pk18b9@clause*))) (let ((pk18bd@ls/false (pkd86@syntax-dispatch pk18bb@t '(_ any)))) (if pk18bd@ls/false (apply (lambda (pk18bf@name) (list 'record-type-descriptor pk18bf@name)) pk18bd@ls/false) (let ((pk18c1@t pk18bb@t)) (let ((pk18c3@ls/false (pkd86@syntax-dispatch pk18c1@t '#(atom #f)))) (if pk18c3@ls/false (apply (lambda () (let ((pk18c5@t (pk1784@get-clause 'parent-rtd pk18b9@clause*))) (let ((pk18c7@ls/false (pkd86@syntax-dispatch pk18c5@t '(_ any any)))) (if pk18c7@ls/false (apply (lambda (pk18c9@rtd pk18ca@rcd) pk18c9@rtd) pk18c7@ls/false) (let ((pk18cd@t pk18c5@t)) (let ((pk18cf@ls/false (pkd86@syntax-dispatch pk18cd@t '#(atom #f)))) (if pk18cf@ls/false (apply (lambda () '#f) pk18cf@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk18cd@t)))))))) pk18c3@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk18c1@t))))))))) (pk178a@parent-rcd-code (lambda (pk18a1@clause*) (let ((pk18a3@t (pk1784@get-clause 'parent pk18a1@clause*))) (let ((pk18a5@ls/false (pkd86@syntax-dispatch pk18a3@t '(_ any)))) (if pk18a5@ls/false (apply (lambda (pk18a7@name) (list 'record-constructor-descriptor pk18a7@name)) pk18a5@ls/false) (let ((pk18a9@t pk18a3@t)) (let ((pk18ab@ls/false (pkd86@syntax-dispatch pk18a9@t '#(atom #f)))) (if pk18ab@ls/false (apply (lambda () (let ((pk18ad@t (pk1784@get-clause 'parent-rtd pk18a1@clause*))) (let ((pk18af@ls/false (pkd86@syntax-dispatch pk18ad@t '(_ any any)))) (if pk18af@ls/false (apply (lambda (pk18b1@rtd pk18b2@rcd) pk18b2@rcd) pk18af@ls/false) (let ((pk18b5@t pk18ad@t)) (let ((pk18b7@ls/false (pkd86@syntax-dispatch pk18b5@t '#(atom #f)))) (if pk18b7@ls/false (apply (lambda () '#f) pk18b7@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk18b5@t)))))))) pk18ab@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk18a9@t))))))))) (pk178c@foo-rcd-code (lambda (pk1899@clause* pk189a@foo-rtd pk189b@protocol pk189c@parent-rcd-code) (list 'make-record-constructor-descriptor pk189a@foo-rtd pk189c@parent-rcd-code pk189b@protocol))) (pk178e@get-protocol-code (lambda (pk188d@clause*) (let ((pk188f@t (pk1784@get-clause 'protocol pk188d@clause*))) (let ((pk1891@ls/false (pkd86@syntax-dispatch pk188f@t '(_ any)))) (if pk1891@ls/false (apply (lambda (pk1893@expr) pk1893@expr) pk1891@ls/false) (let ((pk1895@t pk188f@t)) (let ((pk1897@ls/false (pkd86@syntax-dispatch pk1895@t '_))) (if pk1897@ls/false (apply (lambda () '#f) pk1897@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1895@t))))))))) (pk1790@get-fields (lambda (pk187b@clause*) (let ((pk187d@t pk187b@clause*)) (let ((pk187f@ls/false (pkd86@syntax-dispatch pk187d@t '()))) (if pk187f@ls/false (apply (lambda () '()) pk187f@ls/false) (let ((pk1881@t pk187d@t)) (let ((pk1883@ls/false (pkd86@syntax-dispatch pk1881@t '((#(scheme-id fields) . each-any) . _)))) (if pk1883@ls/false (apply (lambda (pk1885@f*) pk1885@f*) pk1883@ls/false) (let ((pk1887@t pk1881@t)) (let ((pk1889@ls/false (pkd86@syntax-dispatch pk1887@t '(_ . any)))) (if pk1889@ls/false (apply (lambda (pk188b@rest) (pk1790@get-fields pk188b@rest)) pk1889@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1887@t)))))))))))) (pk1792@get-mutator-indices (lambda (pk1863@fields) (let pk1869@f ((pk1865@fields pk1863@fields) (pk1866@i '0)) (let ((pk186b@t pk1865@fields)) (let ((pk186d@ls/false (pkd86@syntax-dispatch pk186b@t '()))) (if pk186d@ls/false (apply (lambda () '()) pk186d@ls/false) (let ((pk186f@t pk186b@t)) (let ((pk1871@ls/false (pkd86@syntax-dispatch pk186f@t '((#(scheme-id mutable) . _) . any)))) (if pk1871@ls/false (apply (lambda (pk1873@rest) (cons pk1866@i (pk1869@f pk1873@rest (+ pk1866@i '1)))) pk1871@ls/false) (let ((pk1875@t pk186f@t)) (let ((pk1877@ls/false (pkd86@syntax-dispatch pk1875@t '(_ . any)))) (if pk1877@ls/false (apply (lambda (pk1879@rest) (pk1869@f pk1879@rest (+ pk1866@i '1))) pk1877@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1875@t))))))))))))) (pk1794@get-mutators (lambda (pk1839@foo pk183a@fields) (letrec* ((pk183e@gen-name (lambda (pk1861@x) (pke6a@datum->syntax pk1839@foo (string->symbol (string-append (symbol->string (pke6c@syntax->datum pk1839@foo)) '"-" (symbol->string (pke6c@syntax->datum pk1861@x)) '"-set!")))))) (let pk1841@f ((pk183f@fields pk183a@fields)) (let ((pk1843@t pk183f@fields)) (let ((pk1845@ls/false (pkd86@syntax-dispatch pk1843@t '()))) (if pk1845@ls/false (apply (lambda () '()) pk1845@ls/false) (let ((pk1847@t pk1843@t)) (let ((pk1849@ls/false (pkd86@syntax-dispatch pk1847@t '((#(scheme-id mutable) any any any) . any)))) (if pk1849@ls/false (apply (lambda (pk184b@name pk184c@accessor pk184d@mutator pk184e@rest) (cons pk184d@mutator (pk1841@f pk184e@rest))) pk1849@ls/false) (let ((pk1853@t pk1847@t)) (let ((pk1855@ls/false (pkd86@syntax-dispatch pk1853@t '((#(scheme-id mutable) any) . any)))) (if pk1855@ls/false (apply (lambda (pk1857@name pk1858@rest) (cons (pk183e@gen-name pk1857@name) (pk1841@f pk1858@rest))) pk1855@ls/false) (let ((pk185b@t pk1853@t)) (let ((pk185d@ls/false (pkd86@syntax-dispatch pk185b@t '(_ . any)))) (if pk185d@ls/false (apply (lambda (pk185f@rest) (pk1841@f pk185f@rest)) pk185d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk185b@t))))))))))))))))) (pk1796@get-accessors (lambda (pk17f5@foo pk17f6@fields) (letrec* ((pk17fa@gen-name (lambda (pk1837@x) (pke6a@datum->syntax pk17f5@foo (string->symbol (string-append (symbol->string (pke6c@syntax->datum pk17f5@foo)) '"-" (symbol->string (pke6c@syntax->datum pk1837@x)))))))) (map (lambda (pk17fb@field) (let ((pk17fd@t pk17fb@field)) (let ((pk17ff@ls/false (pkd86@syntax-dispatch pk17fd@t '(#(scheme-id mutable) any any any)))) (if (and pk17ff@ls/false (apply (lambda (pk1801@name pk1802@accessor pk1803@mutator) (pkb7f@id? pk1802@accessor)) pk17ff@ls/false)) (apply (lambda (pk1807@name pk1808@accessor pk1809@mutator) pk1808@accessor) pk17ff@ls/false) (let ((pk180d@t pk17fd@t)) (let ((pk180f@ls/false (pkd86@syntax-dispatch pk180d@t '(#(scheme-id immutable) any any)))) (if (and pk180f@ls/false (apply (lambda (pk1811@name pk1812@accessor) (pkb7f@id? pk1812@accessor)) pk180f@ls/false)) (apply (lambda (pk1815@name pk1816@accessor) pk1816@accessor) pk180f@ls/false) (let ((pk1819@t pk180d@t)) (let ((pk181b@ls/false (pkd86@syntax-dispatch pk1819@t '(#(scheme-id mutable) any)))) (if (and pk181b@ls/false (apply (lambda (pk181d@name) (pkb7f@id? pk181d@name)) pk181b@ls/false)) (apply (lambda (pk181f@name) (pk17fa@gen-name pk181f@name)) pk181b@ls/false) (let ((pk1821@t pk1819@t)) (let ((pk1823@ls/false (pkd86@syntax-dispatch pk1821@t '(#(scheme-id immutable) any)))) (if (and pk1823@ls/false (apply (lambda (pk1825@name) (pkb7f@id? pk1825@name)) pk1823@ls/false)) (apply (lambda (pk1827@name) (pk17fa@gen-name pk1827@name)) pk1823@ls/false) (let ((pk1829@t pk1821@t)) (let ((pk182b@ls/false (pkd86@syntax-dispatch pk1829@t 'any))) (if (and pk182b@ls/false (apply (lambda (pk182d@name) (pkb7f@id? pk182d@name)) pk182b@ls/false)) (apply (lambda (pk182f@name) (pk17fa@gen-name pk182f@name)) pk182b@ls/false) (let ((pk1831@t pk1829@t)) (let ((pk1833@ls/false (pkd86@syntax-dispatch pk1831@t 'any))) (if pk1833@ls/false (apply (lambda (pk1835@others) (pke66@syntax-violation '#f '"invalid field spec" pk17fb@field)) pk1833@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1831@t)))))))))))))))))))) pk17f6@fields)))) (pk1798@enumerate (lambda (pk17ed@ls) (let pk17f3@f ((pk17ef@ls pk17ed@ls) (pk17f0@i '0)) (if (null? pk17ef@ls) '() (cons pk17f0@i (pk17f3@f (cdr pk17ef@ls) (+ pk17f0@i '1))))))) (pk179a@do-define-record (lambda (pk17c5@namespec pk17c6@clause*) (let ((pk17c9@foo (pk177e@get-record-name pk17c5@namespec))) (let ((pk17cb@foo-rtd (gensym))) (let ((pk17cd@foo-rcd (gensym))) (let ((pk17cf@protocol (gensym))) (let ((pk17d1@make-foo (pk1780@get-record-constructor-name pk17c5@namespec))) (let ((pk17d3@fields (pk1790@get-fields pk17c6@clause*))) (let ((pk17d5@idx* (pk1798@enumerate pk17d3@fields))) (let ((pk17d7@foo-x* (pk1796@get-accessors pk17c9@foo pk17d3@fields))) (let ((pk17d9@set-foo-x!* (pk1794@get-mutators pk17c9@foo pk17d3@fields))) (let ((pk17db@set-foo-idx* (pk1792@get-mutator-indices pk17d3@fields))) (let ((pk17dd@foo? (pk1782@get-record-predicate-name pk17c5@namespec))) (let ((pk17df@foo-rtd-code (pk1786@foo-rtd-code pk17c9@foo pk17c6@clause* (pk1788@parent-rtd-code pk17c6@clause*)))) (let ((pk17e1@foo-rcd-code (pk178c@foo-rcd-code pk17c6@clause* pk17cb@foo-rtd pk17cf@protocol (pk178a@parent-rcd-code pk17c6@clause*)))) (let ((pk17e3@protocol-code (pk178e@get-protocol-code pk17c6@clause*))) (pkd3c@bless (cons 'begin (cons (list 'define pk17cb@foo-rtd pk17df@foo-rtd-code) (cons (list 'define pk17cf@protocol pk17e3@protocol-code) (cons (list 'define pk17cd@foo-rcd pk17e1@foo-rcd-code) (cons (list 'define-syntax pk17c9@foo (list 'list ''$rtd (list 'syntax pk17cb@foo-rtd) (list 'syntax pk17cd@foo-rcd))) (cons (list 'define pk17dd@foo? (list 'record-predicate pk17cb@foo-rtd)) (cons (list 'define pk17d1@make-foo (list 'record-constructor pk17cd@foo-rcd)) (append (map (lambda (pk17e5@foo-x pk17e6@idx) (list 'define pk17e5@foo-x (list 'record-accessor pk17cb@foo-rtd pk17e6@idx))) pk17d7@foo-x* pk17d5@idx*) (map (lambda (pk17e9@set-foo-x! pk17ea@idx) (list 'define pk17e9@set-foo-x! (list 'record-mutator pk17cb@foo-rtd pk17ea@idx))) pk17d9@set-foo-x!* pk17db@set-foo-idx*)))))))))))))))))))))))))) (pk179c@verify-clauses (lambda (pk17a5@x pk17a6@cls*) (letrec* ((pk17aa@valid-kwds (map pkd3c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (pk17ac@free-id-member? (lambda (pk17c1@x pk17c2@ls) (and (pair? pk17c2@ls) (or (pkb85@free-id=? pk17c1@x (car pk17c2@ls)) (pk17ac@free-id-member? pk17c1@x (cdr pk17c2@ls))))))) (let pk17b1@f ((pk17ad@cls* pk17a6@cls*) (pk17ae@seen* '())) (if (not (null? pk17ad@cls*)) (let ((pk17b3@t (car pk17ad@cls*))) (let ((pk17b5@ls/false (pkd86@syntax-dispatch pk17b3@t '(any . any)))) (if pk17b5@ls/false (apply (lambda (pk17b7@kwd pk17b8@rest) (if (or (not (pkb7f@id? pk17b7@kwd)) (not (pk17ac@free-id-member? pk17b7@kwd pk17aa@valid-kwds))) (pke66@syntax-violation '#f '"not a valid define-record-type keyword" pk17b7@kwd) (if (pkb8b@bound-id-member? pk17b7@kwd pk17ae@seen*) (pke66@syntax-violation '#f '"duplicate use of keyword " pk17a5@x pk17b7@kwd) (pk17b1@f (cdr pk17ad@cls*) (cons pk17b7@kwd pk17ae@seen*))))) pk17b5@ls/false) (let ((pk17bb@t pk17b3@t)) (let ((pk17bd@ls/false (pkd86@syntax-dispatch pk17bb@t 'any))) (if pk17bd@ls/false (apply (lambda (pk17bf@cls) (pke66@syntax-violation '#f '"malformed define-record-type clause" pk17bf@cls)) pk17bd@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk17bb@t))))))) (void))))))) (let ((pk179d@t pk1779@x)) (let ((pk179f@ls/false (pkd86@syntax-dispatch pk179d@t '(_ any . each-any)))) (if pk179f@ls/false (apply (lambda (pk17a1@namespec pk17a2@clause*) (begin (pk179c@verify-clauses pk1779@x pk17a2@clause*) (pk179a@do-define-record pk17a1@namespec pk17a2@clause*))) pk179f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk179d@t))))))) (set! pk288c@pkd7a@define-record-type-macro pkd7a@define-record-type-macro) (set! pkd7c@define-condition-type-macro (lambda (pk1975@x) (letrec* ((pk1978@mkname (lambda (pk19a5@name pk19a6@suffix) (pke6a@datum->syntax pk19a5@name (string->symbol (string-append (symbol->string (pke6c@syntax->datum pk19a5@name)) pk19a6@suffix)))))) (let ((pk1979@t pk1975@x)) (let ((pk197b@ls/false (pkd86@syntax-dispatch pk1979@t '(any any any any any . #(each (any any)))))) (if (and pk197b@ls/false (apply (lambda (pk197d@ctxt pk197e@name pk197f@super pk1980@constructor pk1981@predicate pk1982@field* pk1983@accessor*) (and (pkb7f@id? pk197e@name) (pkb7f@id? pk197f@super) (pkb7f@id? pk1980@constructor) (pkb7f@id? pk1981@predicate) (for-all pkb7f@id? pk1982@field*) (for-all pkb7f@id? pk1983@accessor*))) pk197b@ls/false)) (apply (lambda (pk198b@ctxt pk198c@name pk198d@super pk198e@constructor pk198f@predicate pk1990@field* pk1991@accessor*) (let ((pk1999@aux-accessor* (map (lambda (pk199b@x) (gensym)) pk1991@accessor*))) (pkd3c@bless (cons 'begin (cons (cons 'define-record-type (cons (list pk198c@name pk198e@constructor (gensym)) (cons (list 'parent pk198d@super) (cons (cons 'fields (map (lambda (pk199d@field pk199e@aux) (list 'immutable pk199d@field pk199e@aux)) pk1990@field* pk1999@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define pk198f@predicate (list 'condition-predicate (list 'record-type-descriptor pk198c@name))) (map (lambda (pk19a1@accessor pk19a2@aux) (list 'define pk19a1@accessor (list 'condition-accessor (list 'record-type-descriptor pk198c@name) pk19a2@aux))) pk1991@accessor* pk1999@aux-accessor*))))))) pk197b@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1979@t))))))) (set! pk288d@pkd7c@define-condition-type-macro pkd7c@define-condition-type-macro) (set! pkd7e@incorrect-usage-macro (lambda (pk19a9@e) (pke66@syntax-violation '#f '"incorrect usage of auxiliary keyword" pk19a9@e))) (set! pk288e@pkd7e@incorrect-usage-macro pkd7e@incorrect-usage-macro) (set! pkd80@parameterize-macro (lambda (pk19ab@e) (let ((pk19ad@t pk19ab@e)) (let ((pk19af@ls/false (pkd86@syntax-dispatch pk19ad@t '(_ () any . each-any)))) (if pk19af@ls/false (apply (lambda (pk19b1@b pk19b2@b*) (pkd3c@bless (cons 'let (cons '() (cons pk19b1@b pk19b2@b*))))) pk19af@ls/false) (let ((pk19b5@t pk19ad@t)) (let ((pk19b7@ls/false (pkd86@syntax-dispatch pk19b5@t '(_ #(each (any any)) any . each-any)))) (if pk19b7@ls/false (apply (lambda (pk19b9@olhs* pk19ba@orhs* pk19bb@b pk19bc@b*) (let ((pk19c1@lhs* (pke54@generate-temporaries pk19b9@olhs*)) (pk19c2@rhs* (pke54@generate-temporaries pk19ba@orhs*))) (pkd3c@bless (cons (list 'lambda (append pk19c1@lhs* pk19c2@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (pk19c5@lhs pk19c6@rhs) (list 'let (list (list 't (list pk19c5@lhs))) (list pk19c5@lhs pk19c6@rhs) (cons 'set! (cons pk19c6@rhs '(t))))) pk19c1@lhs* pk19c2@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons pk19bb@b pk19bc@b*))) '(swap)))))) (append pk19b9@olhs* pk19ba@orhs*))))) pk19b7@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk19b5@t))))))))) (set! pk288f@pkd80@parameterize-macro pkd80@parameterize-macro) (set! pkd82@foreign-call-transformer (lambda (pk19c9@e pk19ca@r pk19cb@mr) (let ((pk19cf@t pk19c9@e)) (let ((pk19d1@ls/false (pkd86@syntax-dispatch pk19cf@t '(_ any . each-any)))) (if pk19d1@ls/false (apply (lambda (pk19d3@name pk19d4@arg*) (cons 'foreign-call (cons (pkda8@chi-expr pk19d3@name pk19ca@r pk19cb@mr) (pkda4@chi-expr* pk19d4@arg* pk19ca@r pk19cb@mr)))) pk19d1@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk19cf@t)))))) (set! pk2890@pkd82@foreign-call-transformer pkd82@foreign-call-transformer) (set! pkd84@convert-pattern (lambda (pk19d7@pattern pk19d8@keys) (letrec* ((pk19dc@cvt* (lambda (pk1a7b@p* pk1a7c@n pk1a7d@ids) (if (null? pk1a7b@p*) (values '() pk1a7d@ids) (call-with-values (lambda () (pk19dc@cvt* (cdr pk1a7b@p*) pk1a7c@n pk1a7d@ids)) (lambda (pk1a85@pk1a82 pk1a86@pk1a84) (let ((pk1a89@ids pk1a86@pk1a84) (pk1a8a@y pk1a85@pk1a82)) (call-with-values (lambda () (pk19de@cvt (car pk1a7b@p*) pk1a7c@n pk1a89@ids)) (lambda (pk1a91@pk1a8e pk1a92@pk1a90) (let ((pk1a95@ids pk1a92@pk1a90) (pk1a96@x pk1a91@pk1a8e)) (values (cons pk1a96@x pk1a8a@y) pk1a95@ids)))))))))) (pk19de@cvt (lambda (pk19df@p pk19e0@n pk19e1@ids) (let ((pk19e5@t pk19df@p)) (let ((pk19e7@ls/false (pkd86@syntax-dispatch pk19e5@t 'any))) (if (and pk19e7@ls/false (apply (lambda (pk19e9@id) (pkb7f@id? pk19e9@id)) pk19e7@ls/false)) (apply (lambda (pk19eb@id) (if (pkb8b@bound-id-member? pk19df@p pk19d8@keys) (values (vector 'free-id pk19df@p) pk19e1@ids) (if (pkb85@free-id=? pk19df@p (pkd0e@scheme-stx '_)) (values '_ pk19e1@ids) (values 'any (cons (cons pk19df@p pk19e0@n) pk19e1@ids))))) pk19e7@ls/false) (let ((pk19ed@t pk19e5@t)) (let ((pk19ef@ls/false (pkd86@syntax-dispatch pk19ed@t '(any any)))) (if (and pk19ef@ls/false (apply (lambda (pk19f1@p pk19f2@dots) (pkd88@ellipsis? pk19f2@dots)) pk19ef@ls/false)) (apply (lambda (pk19f5@p pk19f6@dots) (call-with-values (lambda () (pk19de@cvt pk19f5@p (+ pk19e0@n '1) pk19e1@ids)) (lambda (pk19fd@pk19fa pk19fe@pk19fc) (let ((pk1a01@ids pk19fe@pk19fc) (pk1a02@p pk19fd@pk19fa)) (values (if (eq? pk1a02@p 'any) 'each-any (vector 'each pk1a02@p)) pk1a01@ids))))) pk19ef@ls/false) (let ((pk1a05@t pk19ed@t)) (let ((pk1a07@ls/false (pkd86@syntax-dispatch pk1a05@t '(any any . #(each+ any () any))))) (if (and pk1a07@ls/false (apply (lambda (pk1a09@x pk1a0a@dots pk1a0b@ys pk1a0c@z) (pkd88@ellipsis? pk1a0a@dots)) pk1a07@ls/false)) (apply (lambda (pk1a11@x pk1a12@dots pk1a13@ys pk1a14@z) (call-with-values (lambda () (pk19de@cvt pk1a14@z pk19e0@n pk19e1@ids)) (lambda (pk1a1d@pk1a1a pk1a1e@pk1a1c) (let ((pk1a21@ids pk1a1e@pk1a1c) (pk1a22@z pk1a1d@pk1a1a)) (call-with-values (lambda () (pk19dc@cvt* pk1a13@ys pk19e0@n pk1a21@ids)) (lambda (pk1a29@pk1a26 pk1a2a@pk1a28) (let ((pk1a2d@ids pk1a2a@pk1a28) (pk1a2e@ys pk1a29@pk1a26)) (call-with-values (lambda () (pk19de@cvt pk1a11@x (+ pk19e0@n '1) pk1a2d@ids)) (lambda (pk1a35@pk1a32 pk1a36@pk1a34) (let ((pk1a39@ids pk1a36@pk1a34) (pk1a3a@x pk1a35@pk1a32)) (values (vector 'each+ pk1a3a@x (reverse pk1a2e@ys) pk1a22@z) pk1a39@ids))))))))))) pk1a07@ls/false) (let ((pk1a3d@t pk1a05@t)) (let ((pk1a3f@ls/false (pkd86@syntax-dispatch pk1a3d@t '(any . any)))) (if pk1a3f@ls/false (apply (lambda (pk1a41@x pk1a42@y) (call-with-values (lambda () (pk19de@cvt pk1a42@y pk19e0@n pk19e1@ids)) (lambda (pk1a49@pk1a46 pk1a4a@pk1a48) (let ((pk1a4d@ids pk1a4a@pk1a48) (pk1a4e@y pk1a49@pk1a46)) (call-with-values (lambda () (pk19de@cvt pk1a41@x pk19e0@n pk1a4d@ids)) (lambda (pk1a55@pk1a52 pk1a56@pk1a54) (let ((pk1a59@ids pk1a56@pk1a54) (pk1a5a@x pk1a55@pk1a52)) (values (cons pk1a5a@x pk1a4e@y) pk1a59@ids)))))))) pk1a3f@ls/false) (let ((pk1a5d@t pk1a3d@t)) (let ((pk1a5f@ls/false (pkd86@syntax-dispatch pk1a5d@t '()))) (if pk1a5f@ls/false (apply (lambda () (values '() pk19e1@ids)) pk1a5f@ls/false) (let ((pk1a61@t pk1a5d@t)) (let ((pk1a63@ls/false (pkd86@syntax-dispatch pk1a61@t '#(vector each-any)))) (if (and pk1a63@ls/false (apply (lambda (pk1a65@p) (not (pkb4b@stx? pk1a65@p))) pk1a63@ls/false)) (apply (lambda (pk1a67@p) (call-with-values (lambda () (pk19de@cvt pk1a67@p pk19e0@n pk19e1@ids)) (lambda (pk1a6d@pk1a6a pk1a6e@pk1a6c) (let ((pk1a71@ids pk1a6e@pk1a6c) (pk1a72@p pk1a6d@pk1a6a)) (values (vector 'vector pk1a72@p) pk1a71@ids))))) pk1a63@ls/false) (let ((pk1a75@t pk1a61@t)) (let ((pk1a77@ls/false (pkd86@syntax-dispatch pk1a75@t 'any))) (if pk1a77@ls/false (apply (lambda (pk1a79@datum) (values (vector 'atom (pkb93@stx->datum pk1a79@datum)) pk19e1@ids)) pk1a77@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1a75@t))))))))))))))))))))))))) (pk19de@cvt pk19d7@pattern '0 '())))) (set! pk2891@pkd84@convert-pattern pkd84@convert-pattern) (set! pkd86@syntax-dispatch (letrec* ((pk1a9a@stx^ (lambda (pk1b75@e pk1b76@m* pk1b77@s* pk1b78@ae*) (if (and (null? pk1b76@m*) (null? pk1b77@s*) (null? pk1b78@ae*)) pk1b75@e (pkb67@mkstx pk1b75@e pk1b76@m* pk1b77@s* pk1b78@ae*)))) (pk1a9c@match-each (lambda (pk1b55@e pk1b56@p pk1b57@m* pk1b58@s* pk1b59@ae*) (if (pair? pk1b55@e) (let ((pk1b5f@first (pk1aa8@match (car pk1b55@e) pk1b56@p pk1b57@m* pk1b58@s* pk1b59@ae* '()))) (and pk1b5f@first (let ((pk1b61@rest (pk1a9c@match-each (cdr pk1b55@e) pk1b56@p pk1b57@m* pk1b58@s* pk1b59@ae*))) (and pk1b61@rest (cons pk1b5f@first pk1b61@rest))))) (if (null? pk1b55@e) '() (if (pkb4b@stx? pk1b55@e) (and (not (pkb05@top-marked? pk1b57@m*)) (call-with-values (lambda () (join-wraps pk1b57@m* pk1b58@s* pk1b59@ae* pk1b55@e)) (lambda (pk1b69@pk1b64 pk1b6a@pk1b66 pk1b6b@pk1b68) (let ((pk1b6f@ae* pk1b6b@pk1b68) (pk1b70@s* pk1b6a@pk1b66) (pk1b71@m* pk1b69@pk1b64)) (pk1a9c@match-each (pkb4d@stx-expr pk1b55@e) pk1b56@p pk1b71@m* pk1b70@s* pk1b6f@ae*))))) (if (pk6c3@pk595@annotation? pk1b55@e) (pk1a9c@match-each (pk6c5@pk599@annotation-expression pk1b55@e) pk1b56@p pk1b57@m* pk1b58@s* pk1b59@ae*) '#f)))))) (pk1a9e@match-each+ (lambda (pk1b15@e pk1b16@x-pat pk1b17@y-pat pk1b18@z-pat pk1b19@m* pk1b1a@s* pk1b1b@ae* pk1b1c@r) (let pk1b2d@f ((pk1b25@e pk1b15@e) (pk1b26@m* pk1b19@m*) (pk1b27@s* pk1b1a@s*) (pk1b28@ae* pk1b1b@ae*)) (if (pair? pk1b25@e) (call-with-values (lambda () (pk1b2d@f (cdr pk1b25@e) pk1b26@m* pk1b27@s* pk1b28@ae*)) (lambda (pk1b35@pk1b30 pk1b36@pk1b32 pk1b37@pk1b34) (let ((pk1b3b@r pk1b37@pk1b34) (pk1b3c@y-pat pk1b36@pk1b32) (pk1b3d@xr* pk1b35@pk1b30)) (if pk1b3b@r (if (null? pk1b3c@y-pat) (let ((pk1b41@xr (pk1aa8@match (car pk1b25@e) pk1b16@x-pat pk1b26@m* pk1b27@s* pk1b28@ae* '()))) (if pk1b41@xr (values (cons pk1b41@xr pk1b3d@xr*) pk1b3c@y-pat pk1b3b@r) (values '#f '#f '#f))) (values '() (cdr pk1b3c@y-pat) (pk1aa8@match (car pk1b25@e) (car pk1b3c@y-pat) pk1b26@m* pk1b27@s* pk1b28@ae* pk1b3b@r))) (values '#f '#f '#f))))) (if (pkb4b@stx? pk1b25@e) (if (pkb05@top-marked? pk1b26@m*) (values '() pk1b17@y-pat (pk1aa8@match pk1b25@e pk1b18@z-pat pk1b26@m* pk1b27@s* pk1b28@ae* pk1b1c@r)) (call-with-values (lambda () (join-wraps pk1b26@m* pk1b27@s* pk1b28@ae* pk1b25@e)) (lambda (pk1b49@pk1b44 pk1b4a@pk1b46 pk1b4b@pk1b48) (let ((pk1b4f@ae* pk1b4b@pk1b48) (pk1b50@s* pk1b4a@pk1b46) (pk1b51@m* pk1b49@pk1b44)) (pk1b2d@f (pkb4d@stx-expr pk1b25@e) pk1b51@m* pk1b50@s* pk1b4f@ae*))))) (if (pk6c3@pk595@annotation? pk1b25@e) (pk1b2d@f (pk6c5@pk599@annotation-expression pk1b25@e) pk1b26@m* pk1b27@s* pk1b28@ae*) (values '() pk1b17@y-pat (pk1aa8@match pk1b25@e pk1b18@z-pat pk1b26@m* pk1b27@s* pk1b28@ae* pk1b1c@r)))))))) (pk1aa0@match-each-any (lambda (pk1af9@e pk1afa@m* pk1afb@s* pk1afc@ae*) (if (pair? pk1af9@e) (let ((pk1b01@l (pk1aa0@match-each-any (cdr pk1af9@e) pk1afa@m* pk1afb@s* pk1afc@ae*))) (and pk1b01@l (cons (pk1a9a@stx^ (car pk1af9@e) pk1afa@m* pk1afb@s* pk1afc@ae*) pk1b01@l))) (if (null? pk1af9@e) '() (if (pkb4b@stx? pk1af9@e) (and (not (pkb05@top-marked? pk1afa@m*)) (call-with-values (lambda () (join-wraps pk1afa@m* pk1afb@s* pk1afc@ae* pk1af9@e)) (lambda (pk1b09@pk1b04 pk1b0a@pk1b06 pk1b0b@pk1b08) (let ((pk1b0f@ae* pk1b0b@pk1b08) (pk1b10@s* pk1b0a@pk1b06) (pk1b11@m* pk1b09@pk1b04)) (pk1aa0@match-each-any (pkb4d@stx-expr pk1af9@e) pk1b11@m* pk1b10@s* pk1b0f@ae*))))) (if (pk6c3@pk595@annotation? pk1af9@e) (pk1aa0@match-each-any (pk6c5@pk599@annotation-expression pk1af9@e) pk1afa@m* pk1afb@s* pk1afc@ae*) '#f)))))) (pk1aa2@match-empty (lambda (pk1af3@p pk1af4@r) (if (null? pk1af3@p) pk1af4@r (if (eq? pk1af3@p '_) pk1af4@r (if (eq? pk1af3@p 'any) (cons '() pk1af4@r) (if (pair? pk1af3@p) (pk1aa2@match-empty (car pk1af3@p) (pk1aa2@match-empty (cdr pk1af3@p) pk1af4@r)) (if (eq? pk1af3@p 'each-any) (cons '() pk1af4@r) (let ((pk1af7@t (vector-ref pk1af3@p '0))) (if (memv pk1af7@t '(each)) (pk1aa2@match-empty (vector-ref pk1af3@p '1) pk1af4@r) (if (memv pk1af7@t '(each+)) (pk1aa2@match-empty (vector-ref pk1af3@p '1) (pk1aa2@match-empty (reverse (vector-ref pk1af3@p '2)) (pk1aa2@match-empty (vector-ref pk1af3@p '3) pk1af4@r))) (if (memv pk1af7@t '(free-id atom)) pk1af4@r (if (memv pk1af7@t '(scheme-id atom)) pk1af4@r (if (memv pk1af7@t '(vector)) (pk1aa2@match-empty (vector-ref pk1af3@p '1) pk1af4@r) (assertion-violation 'syntax-dispatch '"invalid pattern" pk1af3@p)))))))))))))) (pk1aa4@combine (lambda (pk1aef@r* pk1af0@r) (if (null? (car pk1aef@r*)) pk1af0@r (cons (map car pk1aef@r*) (pk1aa4@combine (map cdr pk1aef@r*) pk1af0@r))))) (pk1aa6@match* (lambda (pk1acb@e pk1acc@p pk1acd@m* pk1ace@s* pk1acf@ae* pk1ad0@r) (if (null? pk1acc@p) (and (null? pk1acb@e) pk1ad0@r) (if (pair? pk1acc@p) (and (pair? pk1acb@e) (pk1aa8@match (car pk1acb@e) (car pk1acc@p) pk1acd@m* pk1ace@s* pk1acf@ae* (pk1aa8@match (cdr pk1acb@e) (cdr pk1acc@p) pk1acd@m* pk1ace@s* pk1acf@ae* pk1ad0@r))) (if (eq? pk1acc@p 'each-any) (let ((pk1ad7@l (pk1aa0@match-each-any pk1acb@e pk1acd@m* pk1ace@s* pk1acf@ae*))) (and pk1ad7@l (cons pk1ad7@l pk1ad0@r))) (let ((pk1ad9@t (vector-ref pk1acc@p '0))) (if (memv pk1ad9@t '(each)) (if (null? pk1acb@e) (pk1aa2@match-empty (vector-ref pk1acc@p '1) pk1ad0@r) (let ((pk1adb@r* (pk1a9c@match-each pk1acb@e (vector-ref pk1acc@p '1) pk1acd@m* pk1ace@s* pk1acf@ae*))) (and pk1adb@r* (pk1aa4@combine pk1adb@r* pk1ad0@r)))) (if (memv pk1ad9@t '(free-id)) (and (symbol? pk1acb@e) (pkb05@top-marked? pk1acd@m*) (pkb85@free-id=? (pk1a9a@stx^ pk1acb@e pk1acd@m* pk1ace@s* pk1acf@ae*) (vector-ref pk1acc@p '1)) pk1ad0@r) (if (memv pk1ad9@t '(scheme-id)) (and (symbol? pk1acb@e) (pkb05@top-marked? pk1acd@m*) (pkb85@free-id=? (pk1a9a@stx^ pk1acb@e pk1acd@m* pk1ace@s* pk1acf@ae*) (pkd0e@scheme-stx (vector-ref pk1acc@p '1))) pk1ad0@r) (if (memv pk1ad9@t '(each+)) (call-with-values (lambda () (pk1a9e@match-each+ pk1acb@e (vector-ref pk1acc@p '1) (vector-ref pk1acc@p '2) (vector-ref pk1acc@p '3) pk1acd@m* pk1ace@s* pk1acf@ae* pk1ad0@r)) (lambda (pk1ae3@pk1ade pk1ae4@pk1ae0 pk1ae5@pk1ae2) (let ((pk1ae9@r pk1ae5@pk1ae2) (pk1aea@y-pat pk1ae4@pk1ae0) (pk1aeb@xr* pk1ae3@pk1ade)) (and pk1ae9@r (null? pk1aea@y-pat) (if (null? pk1aeb@xr*) (pk1aa2@match-empty (vector-ref pk1acc@p '1) pk1ae9@r) (pk1aa4@combine pk1aeb@xr* pk1ae9@r)))))) (if (memv pk1ad9@t '(atom)) (and (fast-equal? (vector-ref pk1acc@p '1) (pkb91@strip pk1acb@e pk1acd@m*)) pk1ad0@r) (if (memv pk1ad9@t '(vector)) (and (vector? pk1acb@e) (pk1aa8@match (vector->list pk1acb@e) (vector-ref pk1acc@p '1) pk1acd@m* pk1ace@s* pk1acf@ae* pk1ad0@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" pk1acc@p))))))))))))) (pk1aa8@match (lambda (pk1aad@e pk1aae@p pk1aaf@m* pk1ab0@s* pk1ab1@ae* pk1ab2@r) (if (not pk1ab2@r) '#f (if (eq? pk1aae@p '_) pk1ab2@r (if (eq? pk1aae@p 'any) (cons (pk1a9a@stx^ pk1aad@e pk1aaf@m* pk1ab0@s* pk1ab1@ae*) pk1ab2@r) (if (pkb4b@stx? pk1aad@e) (and (not (pkb05@top-marked? pk1aaf@m*)) (call-with-values (lambda () (join-wraps pk1aaf@m* pk1ab0@s* pk1ab1@ae* pk1aad@e)) (lambda (pk1abf@pk1aba pk1ac0@pk1abc pk1ac1@pk1abe) (let ((pk1ac5@ae* pk1ac1@pk1abe) (pk1ac6@s* pk1ac0@pk1abc) (pk1ac7@m* pk1abf@pk1aba)) (pk1aa8@match (pkb4d@stx-expr pk1aad@e) pk1aae@p pk1ac7@m* pk1ac6@s* pk1ac5@ae* pk1ab2@r))))) (if (pk6c3@pk595@annotation? pk1aad@e) (pk1aa8@match (pk6c5@pk599@annotation-expression pk1aad@e) pk1aae@p pk1aaf@m* pk1ab0@s* pk1ab1@ae* pk1ab2@r) (pk1aa6@match* pk1aad@e pk1aae@p pk1aaf@m* pk1ab0@s* pk1ab1@ae* pk1ab2@r))))))))) (lambda (pk1aa9@e pk1aaa@p) (pk1aa8@match pk1aa9@e pk1aaa@p '() '() '() '())))) (set! pk2892@pkd86@syntax-dispatch pkd86@syntax-dispatch) (set! pkd88@ellipsis? (lambda (pk1b7d@x) (and (pkb7f@id? pk1b7d@x) (pkb85@free-id=? pk1b7d@x (pkd0e@scheme-stx '...))))) (set! pk2893@pkd88@ellipsis? pkd88@ellipsis?) (set! pkd8a@underscore? (lambda (pk1b7f@x) (and (pkb7f@id? pk1b7f@x) (pkb85@free-id=? pk1b7f@x (pkd0e@scheme-stx '_))))) (set! pk2894@pkd8a@underscore? pkd8a@underscore?) (set! pkd8c@verify-literals (lambda (pk1b81@lits pk1b82@expr) (for-each (lambda (pk1b85@x) (if (or (not (pkb7f@id? pk1b85@x)) (pkd88@ellipsis? pk1b85@x) (pkd8a@underscore? pk1b85@x)) (pke66@syntax-violation '#f '"invalid literal" pk1b82@expr pk1b85@x) (void))) pk1b81@lits))) (set! pk2895@pkd8c@verify-literals pkd8c@verify-literals) (set! pkd8e@syntax-case-transformer (letrec* ((pk1b88@build-dispatch-call (lambda (pk1bf9@pvars pk1bfa@expr pk1bfb@y pk1bfc@r pk1bfd@mr) (let ((pk1c03@ids (map car pk1bf9@pvars)) (pk1c04@levels (map cdr pk1bf9@pvars))) (let ((pk1c07@labels (map pkb0b@gen-label pk1c03@ids)) (pk1c08@new-vars (map pkb07@gen-lexical pk1c03@ids))) (let ((pk1c0b@body (pkda8@chi-expr (pkb69@add-subst (pkb3f@make-full-rib pk1c03@ids pk1c07@labels) pk1bfa@expr) (append (map (lambda (pk1c0d@label pk1c0e@var pk1c0f@level) (cons pk1c0d@label (pkb99@make-binding 'syntax (cons pk1c0e@var pk1c0f@level)))) pk1c07@labels pk1c08@new-vars (map cdr pk1bf9@pvars)) pk1bfc@r) pk1bfd@mr))) (list '(primitive apply) (pkae2@pka14@build-lambda '#f pk1c08@new-vars pk1c0b@body) pk1bfb@y)))))) (pk1b8a@invalid-ids-error (lambda (pk1bed@id* pk1bee@e pk1bef@class) (let pk1bf7@find ((pk1bf3@id* pk1bed@id*) (pk1bf4@ok* '())) (if (null? pk1bf3@id*) (pke66@syntax-violation '#f '"invalid syntax" pk1bee@e) (if (pkb7f@id? (car pk1bf3@id*)) (if (pkb8b@bound-id-member? (car pk1bf3@id*) pk1bf4@ok*) (pke62@syntax-error (car pk1bf3@id*) '"duplicate " pk1bef@class) (pk1bf7@find (cdr pk1bf3@id*) (cons (car pk1bf3@id*) pk1bf4@ok*))) (pke62@syntax-error (car pk1bf3@id*) '"invalid " pk1bef@class)))))) (pk1b8c@gen-clause (lambda (pk1bc5@x pk1bc6@keys pk1bc7@clauses pk1bc8@r pk1bc9@mr pk1bca@pat pk1bcb@fender pk1bcc@expr) (call-with-values (lambda () (pkd84@convert-pattern pk1bca@pat pk1bc6@keys)) (lambda (pk1bd9@pk1bd6 pk1bda@pk1bd8) (let ((pk1bdd@pvars pk1bda@pk1bd8) (pk1bde@p pk1bd9@pk1bd6)) (if (not (pkb89@distinct-bound-ids? (map car pk1bdd@pvars))) (pk1b8a@invalid-ids-error (map car pk1bdd@pvars) pk1bca@pat '"pattern variable") (if (not (for-all (lambda (pk1be1@x) (not (pkd88@ellipsis? (car pk1be1@x)))) pk1bdd@pvars)) (pke66@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" pk1bca@pat) (let ((pk1be3@y (pkb07@gen-lexical 'tmp))) (let ((pk1be5@test (if (eq? pk1bcb@fender '#t) pk1be3@y (let ((pk1be7@call (pk1b88@build-dispatch-call pk1bdd@pvars pk1bcb@fender pk1be3@y pk1bc8@r pk1bc9@mr))) (list 'if pk1be3@y pk1be7@call (list 'quote '#f)))))) (let ((pk1be9@conseq (pk1b88@build-dispatch-call pk1bdd@pvars pk1bcc@expr pk1be3@y pk1bc8@r pk1bc9@mr))) (let ((pk1beb@altern (pk1b8e@gen-syntax-case pk1bc5@x pk1bc6@keys pk1bc7@clauses pk1bc8@r pk1bc9@mr))) (list (pkae2@pka14@build-lambda '#f (list pk1be3@y) (list 'if pk1be5@test pk1be9@conseq pk1beb@altern)) (list '(primitive syntax-dispatch) pk1bc5@x (list 'quote pk1bde@p)))))))))))))) (pk1b8e@gen-syntax-case (lambda (pk1ba3@x pk1ba4@keys pk1ba5@clauses pk1ba6@r pk1ba7@mr) (if (null? pk1ba5@clauses) (list '(primitive syntax-error) pk1ba3@x) (let ((pk1bad@t (car pk1ba5@clauses))) (let ((pk1baf@ls/false (pkd86@syntax-dispatch pk1bad@t '(any any)))) (if pk1baf@ls/false (apply (lambda (pk1bb1@pat pk1bb2@expr) (if (and (pkb7f@id? pk1bb1@pat) (not (pkb8b@bound-id-member? pk1bb1@pat pk1ba4@keys)) (not (pkd88@ellipsis? pk1bb1@pat))) (if (pkb85@free-id=? pk1bb1@pat (pkd0e@scheme-stx '_)) (pkda8@chi-expr pk1bb2@expr pk1ba6@r pk1ba7@mr) (let ((pk1bb5@lab (pkb0b@gen-label pk1bb1@pat)) (pk1bb6@lex (pkb07@gen-lexical pk1bb1@pat))) (let ((pk1bb9@body (pkda8@chi-expr (pkb69@add-subst (pkb3f@make-full-rib (list pk1bb1@pat) (list pk1bb5@lab)) pk1bb2@expr) (cons (cons pk1bb5@lab (pkb99@make-binding 'syntax (cons pk1bb6@lex '0))) pk1ba6@r) pk1ba7@mr))) (list (pkae2@pka14@build-lambda '#f (list pk1bb6@lex) pk1bb9@body) pk1ba3@x)))) (pk1b8c@gen-clause pk1ba3@x pk1ba4@keys (cdr pk1ba5@clauses) pk1ba6@r pk1ba7@mr pk1bb1@pat '#t pk1bb2@expr))) pk1baf@ls/false) (let ((pk1bbb@t pk1bad@t)) (let ((pk1bbd@ls/false (pkd86@syntax-dispatch pk1bbb@t '(any any any)))) (if pk1bbd@ls/false (apply (lambda (pk1bbf@pat pk1bc0@fender pk1bc1@expr) (pk1b8c@gen-clause pk1ba3@x pk1ba4@keys (cdr pk1ba5@clauses) pk1ba6@r pk1ba7@mr pk1bbf@pat pk1bc0@fender pk1bc1@expr)) pk1bbd@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1bbb@t))))))))))) (lambda (pk1b8f@e pk1b90@r pk1b91@mr) (let ((pk1b95@t pk1b8f@e)) (let ((pk1b97@ls/false (pkd86@syntax-dispatch pk1b95@t '(_ any each-any . each-any)))) (if pk1b97@ls/false (apply (lambda (pk1b99@expr pk1b9a@keys pk1b9b@clauses) (begin (pkd8c@verify-literals pk1b9a@keys pk1b8f@e) (let ((pk1b9f@x (pkb07@gen-lexical 'tmp))) (let ((pk1ba1@body (pk1b8e@gen-syntax-case pk1b9f@x pk1b9a@keys pk1b9b@clauses pk1b90@r pk1b91@mr))) (list (pkae2@pka14@build-lambda '#f (list pk1b9f@x) pk1ba1@body) (pkda8@chi-expr pk1b99@expr pk1b90@r pk1b91@mr)))))) pk1b97@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1b95@t))))))) (set! pk2896@pkd8e@syntax-case-transformer pkd8e@syntax-case-transformer) (set! pkd90@ellipsis-map (lambda (pk1c13@proc pk1c14@ls . pk1c17@ls*) (letrec* ((pk1c1a@who '...)) (begin (if (not (list? pk1c14@ls)) (assertion-violation pk1c1a@who '"not a list" pk1c14@ls) (void)) (if (not (null? pk1c17@ls*)) (let ((pk1c1b@n (length pk1c14@ls))) (for-each (lambda (pk1c1d@x) (begin (if (not (list? pk1c1d@x)) (assertion-violation pk1c1a@who '"not a list" pk1c1d@x) (void)) (if (not (= (length pk1c1d@x) pk1c1b@n)) (assertion-violation pk1c1a@who '"length mismatch" pk1c14@ls pk1c1d@x) (void)))) pk1c17@ls*)) (void)) (apply map pk1c13@proc pk1c14@ls pk1c17@ls*))))) (set! pk2897@pkd90@ellipsis-map pkd90@ellipsis-map) (set! pkd92@syntax-transformer (letrec* ((pk1c20@gen-syntax (lambda (pk1c97@src pk1c98@e pk1c99@r pk1c9a@maps pk1c9b@ellipsis? pk1c9c@vec?) (let ((pk1ca3@t pk1c98@e)) (let ((pk1ca5@ls/false (pkd86@syntax-dispatch pk1ca3@t 'any))) (if (and pk1ca5@ls/false (apply (lambda (pk1ca7@dots) (pk1c9b@ellipsis? pk1ca7@dots)) pk1ca5@ls/false)) (apply (lambda (pk1ca9@dots) (pke66@syntax-violation '#f '"misplaced ellipsis in syntax form" pk1c97@src)) pk1ca5@ls/false) (let ((pk1cab@t pk1ca3@t)) (let ((pk1cad@ls/false (pkd86@syntax-dispatch pk1cab@t 'any))) (if (and pk1cad@ls/false (apply (lambda (pk1caf@id) (pkb7f@id? pk1caf@id)) pk1cad@ls/false)) (apply (lambda (pk1cb1@id) (let ((pk1cb3@label (pkb95@id->label pk1c98@e))) (let ((pk1cb5@b (pkb97@label->binding pk1cb3@label pk1c99@r))) (if (eq? (pkb9b@binding-type pk1cb5@b) 'syntax) (call-with-values (lambda () (let ((pk1cbb@var.lev (pkb9d@binding-value pk1cb5@b))) (pk1c22@gen-ref pk1c97@src (car pk1cbb@var.lev) (cdr pk1cbb@var.lev) pk1c9a@maps))) (lambda (pk1cbd@pk1cb8 pk1cbe@pk1cba) (let ((pk1cc1@maps pk1cbe@pk1cba) (pk1cc2@var pk1cbd@pk1cb8)) (values (list 'ref pk1cc2@var) pk1cc1@maps)))) (values (list 'quote pk1c98@e) pk1c9a@maps))))) pk1cad@ls/false) (let ((pk1cc5@t pk1cab@t)) (let ((pk1cc7@ls/false (pkd86@syntax-dispatch pk1cc5@t '(any any)))) (if (and pk1cc7@ls/false (apply (lambda (pk1cc9@dots pk1cca@e) (pk1c9b@ellipsis? pk1cc9@dots)) pk1cc7@ls/false)) (apply (lambda (pk1ccd@dots pk1cce@e) (if pk1c9c@vec? (pke66@syntax-violation '#f '"misplaced ellipsis in syntax form" pk1c97@src) (pk1c20@gen-syntax pk1c97@src pk1cce@e pk1c99@r pk1c9a@maps (lambda (pk1cd1@x) '#f) '#f))) pk1cc7@ls/false) (let ((pk1cd3@t pk1cc5@t)) (let ((pk1cd5@ls/false (pkd86@syntax-dispatch pk1cd3@t '(any any . any)))) (if (and pk1cd5@ls/false (apply (lambda (pk1cd7@x pk1cd8@dots pk1cd9@y) (pk1c9b@ellipsis? pk1cd8@dots)) pk1cd5@ls/false)) (apply (lambda (pk1cdd@x pk1cde@dots pk1cdf@y) (let pk1cf5@f ((pk1ce3@y pk1cdf@y) (pk1ce4@k (lambda (pk1ce7@maps) (call-with-values (lambda () (pk1c20@gen-syntax pk1c97@src pk1cdd@x pk1c99@r (cons '() pk1ce7@maps) pk1c9b@ellipsis? '#f)) (lambda (pk1ced@pk1cea pk1cee@pk1cec) (let ((pk1cf1@maps pk1cee@pk1cec) (pk1cf2@x pk1ced@pk1cea)) (if (null? (car pk1cf1@maps)) (pke66@syntax-violation '#f '"extra ellipsis in syntax form" pk1c97@src) (values (pk1c28@gen-map pk1cf2@x (car pk1cf1@maps)) (cdr pk1cf1@maps))))))))) (let ((pk1cf7@t pk1ce3@y)) (let ((pk1cf9@ls/false (pkd86@syntax-dispatch pk1cf7@t '()))) (if pk1cf9@ls/false (apply (lambda () (pk1ce4@k pk1c9a@maps)) pk1cf9@ls/false) (let ((pk1cfb@t pk1cf7@t)) (let ((pk1cfd@ls/false (pkd86@syntax-dispatch pk1cfb@t '(any . any)))) (if (and pk1cfd@ls/false (apply (lambda (pk1cff@dots pk1d00@y) (pk1c9b@ellipsis? pk1cff@dots)) pk1cfd@ls/false)) (apply (lambda (pk1d03@dots pk1d04@y) (pk1cf5@f pk1d04@y (lambda (pk1d07@maps) (call-with-values (lambda () (pk1ce4@k (cons '() pk1d07@maps))) (lambda (pk1d0d@pk1d0a pk1d0e@pk1d0c) (let ((pk1d11@maps pk1d0e@pk1d0c) (pk1d12@x pk1d0d@pk1d0a)) (if (null? (car pk1d11@maps)) (pke66@syntax-violation '#f '"extra ellipsis in syntax form" pk1c97@src) (values (pk1c26@gen-mappend pk1d12@x (car pk1d11@maps)) (cdr pk1d11@maps))))))))) pk1cfd@ls/false) (let ((pk1d15@t pk1cfb@t)) (let ((pk1d17@ls/false (pkd86@syntax-dispatch pk1d15@t '_))) (if pk1d17@ls/false (apply (lambda () (call-with-values (lambda () (pk1c20@gen-syntax pk1c97@src pk1ce3@y pk1c99@r pk1c9a@maps pk1c9b@ellipsis? pk1c9c@vec?)) (lambda (pk1d1d@pk1d1a pk1d1e@pk1d1c) (let ((pk1d21@maps pk1d1e@pk1d1c) (pk1d22@y pk1d1d@pk1d1a)) (call-with-values (lambda () (pk1ce4@k pk1d21@maps)) (lambda (pk1d29@pk1d26 pk1d2a@pk1d28) (let ((pk1d2d@maps pk1d2a@pk1d28) (pk1d2e@x pk1d29@pk1d26)) (values (pk1c24@gen-append pk1d2e@x pk1d22@y) pk1d2d@maps)))))))) pk1d17@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1d15@t)))))))))))) pk1cd5@ls/false) (let ((pk1d31@t pk1cd3@t)) (let ((pk1d33@ls/false (pkd86@syntax-dispatch pk1d31@t '(any . any)))) (if pk1d33@ls/false (apply (lambda (pk1d35@x pk1d36@y) (call-with-values (lambda () (pk1c20@gen-syntax pk1c97@src pk1d35@x pk1c99@r pk1c9a@maps pk1c9b@ellipsis? '#f)) (lambda (pk1d3d@pk1d3a pk1d3e@pk1d3c) (let ((pk1d41@maps pk1d3e@pk1d3c) (pk1d42@xnew pk1d3d@pk1d3a)) (call-with-values (lambda () (pk1c20@gen-syntax pk1c97@src pk1d36@y pk1c99@r pk1d41@maps pk1c9b@ellipsis? pk1c9c@vec?)) (lambda (pk1d49@pk1d46 pk1d4a@pk1d48) (let ((pk1d4d@maps pk1d4a@pk1d48) (pk1d4e@ynew pk1d49@pk1d46)) (values (pk1c2a@gen-cons pk1c98@e pk1d35@x pk1d36@y pk1d42@xnew pk1d4e@ynew) pk1d4d@maps)))))))) pk1d33@ls/false) (let ((pk1d51@t pk1d31@t)) (let ((pk1d53@ls/false (pkd86@syntax-dispatch pk1d51@t '#(vector each-any)))) (if pk1d53@ls/false (apply (lambda (pk1d55@ls) (call-with-values (lambda () (pk1c20@gen-syntax pk1c97@src pk1d55@ls pk1c99@r pk1c9a@maps pk1c9b@ellipsis? '#t)) (lambda (pk1d5b@pk1d58 pk1d5c@pk1d5a) (let ((pk1d5f@maps pk1d5c@pk1d5a) (pk1d60@lsnew pk1d5b@pk1d58)) (values (pk1c2c@gen-vector pk1c98@e pk1d55@ls pk1d60@lsnew) pk1d5f@maps))))) pk1d53@ls/false) (let ((pk1d63@t pk1d51@t)) (let ((pk1d65@ls/false (pkd86@syntax-dispatch pk1d63@t '_))) (if pk1d65@ls/false (apply (lambda () (values (list 'quote pk1c98@e) pk1c9a@maps)) pk1d65@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1d63@t)))))))))))))))))))))))) (pk1c22@gen-ref (lambda (pk1c7d@src pk1c7e@var pk1c7f@level pk1c80@maps) (if (= pk1c7f@level '0) (values pk1c7e@var pk1c80@maps) (if (null? pk1c80@maps) (pke66@syntax-violation '#f '"missing ellipsis in syntax form" pk1c7d@src) (call-with-values (lambda () (pk1c22@gen-ref pk1c7d@src pk1c7e@var (- pk1c7f@level '1) (cdr pk1c80@maps))) (lambda (pk1c89@pk1c86 pk1c8a@pk1c88) (let ((pk1c8d@outer-maps pk1c8a@pk1c88) (pk1c8e@outer-var pk1c89@pk1c86)) (let ((pk1c91@t (assq pk1c8e@outer-var (car pk1c80@maps)))) (if pk1c91@t ((lambda (pk1c93@b) (values (cdr pk1c93@b) pk1c80@maps)) pk1c91@t) (let ((pk1c95@inner-var (pkb07@gen-lexical 'tmp))) (values pk1c95@inner-var (cons (cons (cons pk1c8e@outer-var pk1c95@inner-var) (car pk1c80@maps)) pk1c8d@outer-maps)))))))))))) (pk1c24@gen-append (lambda (pk1c79@x pk1c7a@y) (if (fast-equal? pk1c7a@y ''()) pk1c79@x (list 'append pk1c79@x pk1c7a@y)))) (pk1c26@gen-mappend (lambda (pk1c75@e pk1c76@map-env) (list 'apply '(primitive append) (pk1c28@gen-map pk1c75@e pk1c76@map-env)))) (pk1c28@gen-map (lambda (pk1c63@e pk1c64@map-env) (let ((pk1c67@formals (map cdr pk1c64@map-env)) (pk1c68@actuals (map (lambda (pk1c6b@x) (list 'ref (car pk1c6b@x))) pk1c64@map-env))) (if (eq? (car pk1c63@e) 'ref) (car pk1c68@actuals) (if (for-all (lambda (pk1c6d@x) (and (eq? (car pk1c6d@x) 'ref) (memq (cadr pk1c6d@x) pk1c67@formals))) (cdr pk1c63@e)) (let ((pk1c6f@args (map (let ((pk1c71@r (map cons pk1c67@formals pk1c68@actuals))) (lambda (pk1c73@x) (cdr (assq (cadr pk1c73@x) pk1c71@r)))) (cdr pk1c63@e)))) (cons 'map (cons (list 'primitive (car pk1c63@e)) pk1c6f@args))) (cons* 'map (list 'lambda pk1c67@formals pk1c63@e) pk1c68@actuals)))))) (pk1c2a@gen-cons (lambda (pk1c53@e pk1c54@x pk1c55@y pk1c56@xnew pk1c57@ynew) (let ((pk1c5d@t (car pk1c57@ynew))) (if (memv pk1c5d@t '(quote)) (if (eq? (car pk1c56@xnew) 'quote) (let ((pk1c5f@xnew (cadr pk1c56@xnew)) (pk1c60@ynew (cadr pk1c57@ynew))) (if (and (eq? pk1c5f@xnew pk1c54@x) (eq? pk1c60@ynew pk1c55@y)) (list 'quote pk1c53@e) (list 'quote (cons pk1c5f@xnew pk1c60@ynew)))) (if (null? (cadr pk1c57@ynew)) (list 'list pk1c56@xnew) (list 'cons pk1c56@xnew pk1c57@ynew))) (if (memv pk1c5d@t '(list)) (cons 'list (cons pk1c56@xnew (cdr pk1c57@ynew))) (list 'cons pk1c56@xnew pk1c57@ynew)))))) (pk1c2c@gen-vector (lambda (pk1c4d@e pk1c4e@ls pk1c4f@lsnew) (if (eq? (car pk1c4f@lsnew) 'quote) (if (eq? (cadr pk1c4f@lsnew) pk1c4e@ls) (list 'quote pk1c4d@e) (list 'quote (list->vector (cadr pk1c4f@lsnew)))) (if (eq? (car pk1c4f@lsnew) 'list) (cons 'vector (cdr pk1c4f@lsnew)) (list 'list->vector pk1c4f@lsnew))))) (pk1c2e@regen (lambda (pk1c47@x) (let ((pk1c49@t (car pk1c47@x))) (if (memv pk1c49@t '(ref)) (cadr pk1c47@x) (if (memv pk1c49@t '(primitive)) (list 'primitive (cadr pk1c47@x)) (if (memv pk1c49@t '(quote)) (list 'quote (cadr pk1c47@x)) (if (memv pk1c49@t '(lambda)) (pkae2@pka14@build-lambda '#f (cadr pk1c47@x) (pk1c2e@regen (caddr pk1c47@x))) (if (memv pk1c49@t '(map)) (let ((pk1c4b@ls (map pk1c2e@regen (cdr pk1c47@x)))) (cons '(primitive ellipsis-map) pk1c4b@ls)) (cons (list 'primitive (car pk1c47@x)) (map pk1c2e@regen (cdr pk1c47@x)))))))))))) (lambda (pk1c2f@e pk1c30@r pk1c31@mr) (let ((pk1c35@t pk1c2f@e)) (let ((pk1c37@ls/false (pkd86@syntax-dispatch pk1c35@t '(_ any)))) (if pk1c37@ls/false (apply (lambda (pk1c39@x) (call-with-values (lambda () (pk1c20@gen-syntax pk1c2f@e pk1c39@x pk1c30@r '() pkd88@ellipsis? '#f)) (lambda (pk1c3f@pk1c3c pk1c40@pk1c3e) (let ((pk1c43@maps pk1c40@pk1c3e) (pk1c44@e pk1c3f@pk1c3c)) (pk1c2e@regen pk1c44@e))))) pk1c37@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1c35@t))))))) (set! pk2898@pkd92@syntax-transformer pkd92@syntax-transformer) (set! pkd94@core-macro-transformer (lambda (pk1d67@name) (let ((pk1d69@t pk1d67@name)) (if (memv pk1d69@t '(quote)) pkd36@quote-transformer (if (memv pk1d69@t '(lambda)) pkd3a@lambda-transformer (if (memv pk1d69@t '(case-lambda)) pkd38@case-lambda-transformer (if (memv pk1d69@t '(letrec)) pkd1e@letrec-transformer (if (memv pk1d69@t '(letrec*)) pkd20@letrec*-transformer (if (memv pk1d69@t '(let)) pkd1c@let-transformer (if (memv pk1d69@t '(if)) pkd2e@if-transformer (if (memv pk1d69@t '(and)) pkd30@and-transformer (if (memv pk1d69@t '(or)) pkd32@or-transformer (if (memv pk1d69@t '(foreign-call)) pkd82@foreign-call-transformer (if (memv pk1d69@t '(syntax-case)) pkd8e@syntax-case-transformer (if (memv pk1d69@t '(syntax)) pkd92@syntax-transformer (if (memv pk1d69@t '(type-descriptor)) pkd24@type-descriptor-transformer (if (memv pk1d69@t '(record-type-descriptor)) pkd26@record-type-descriptor-transformer (if (memv pk1d69@t '(record-constructor-descriptor)) pkd28@record-constructor-descriptor-transformer (if (memv pk1d69@t '(fluid-let-syntax)) pkd22@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" pk1d67@name)))))))))))))))))))) (set! pk2899@pkd94@core-macro-transformer pkd94@core-macro-transformer) (set! pkd96@symbol-macro (lambda (pk1d6b@x pk1d6c@set) (let ((pk1d6f@t pk1d6b@x)) (let ((pk1d71@ls/false (pkd86@syntax-dispatch pk1d6f@t '(_ any)))) (if (and pk1d71@ls/false (apply (lambda (pk1d73@name) (and (pkb7f@id? pk1d73@name) (memq (pkb81@id->sym pk1d73@name) pk1d6c@set))) pk1d71@ls/false)) (apply (lambda (pk1d75@name) (pkd3c@bless (list 'quote pk1d75@name))) pk1d71@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1d6f@t)))))) (set! pk289a@pkd96@symbol-macro pkd96@symbol-macro) (set! pkd98@macro-transformer (lambda (pk1d77@x) (if (procedure? pk1d77@x) pk1d77@x (if (symbol? pk1d77@x) (let ((pk1d79@t pk1d77@x)) (if (memv pk1d79@t '(define-record-type)) pkd7a@define-record-type-macro (if (memv pk1d79@t '(define-struct)) pkd78@define-struct-macro (if (memv pk1d79@t '(include)) pkd6e@include-macro (if (memv pk1d79@t '(cond)) pkd6a@cond-macro (if (memv pk1d79@t '(let)) pkd42@let-macro (if (memv pk1d79@t '(do)) pkd62@do-macro (if (memv pk1d79@t '(or)) pkd66@or-macro (if (memv pk1d79@t '(and)) pkd68@and-macro (if (memv pk1d79@t '(let*)) pkd64@let*-macro (if (memv pk1d79@t '(let-values)) pkd44@let-values-macro (if (memv pk1d79@t '(let*-values)) pkd46@let*-values-macro (if (memv pk1d79@t '(syntax-rules)) pkd72@syntax-rules-macro (if (memv pk1d79@t '(quasiquote)) pkd74@quasiquote-macro (if (memv pk1d79@t '(quasisyntax)) pkd76@quasisyntax-macro (if (memv pk1d79@t '(with-syntax)) pkd3e@with-syntax-macro (if (memv pk1d79@t '(when)) pkd2a@when-macro (if (memv pk1d79@t '(unless)) pkd2c@unless-macro (if (memv pk1d79@t '(case)) pkd34@case-macro (if (memv pk1d79@t '(identifier-syntax)) pkd60@identifier-syntax-macro (if (memv pk1d79@t '(time)) pkd58@time-macro (if (memv pk1d79@t '(delay)) pkd5a@delay-macro (if (memv pk1d79@t '(assert)) pkd5c@assert-macro (if (memv pk1d79@t '(endianness)) pkd5e@endianness-macro (if (memv pk1d79@t '(guard)) pkd54@guard-macro (if (memv pk1d79@t '(define-enumeration)) pkd56@define-enumeration-macro (if (memv pk1d79@t '(trace-lambda)) pkd48@trace-lambda-macro (if (memv pk1d79@t '(trace-define)) pkd4a@trace-define-macro (if (memv pk1d79@t '(trace-define-syntax)) pkd4c@trace-define-syntax-macro (if (memv pk1d79@t '(trace-let-syntax)) pkd50@trace-let-syntax-macro (if (memv pk1d79@t '(trace-letrec-syntax)) pkd52@trace-letrec-syntax-macro (if (memv pk1d79@t '(define-condition-type)) pkd7c@define-condition-type-macro (if (memv pk1d79@t '(parameterize)) pkd80@parameterize-macro (if (memv pk1d79@t '(include-into)) pkd70@include-into-macro (if (memv pk1d79@t '(eol-style)) (lambda (pk1d7b@x) (pkd96@symbol-macro pk1d7b@x '(none lf cr crlf nel crnel ls))) (if (memv pk1d79@t '(error-handling-mode)) (lambda (pk1d7d@x) (pkd96@symbol-macro pk1d7d@x '(ignore raise replace))) (if (memv pk1d79@t '(buffer-mode)) (lambda (pk1d7f@x) (pkd96@symbol-macro pk1d7f@x '(none line block))) (if (memv pk1d79@t '(file-options)) pkafa@file-options-macro (if (memv pk1d79@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) pkd7e@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" pk1d77@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" pk1d77@x))))) (set! pk289b@pkd98@macro-transformer pkd98@macro-transformer) (set! pkd9a@local-macro-transformer (lambda (pk1d81@x) (car pk1d81@x))) (set! pk289c@pkd9a@local-macro-transformer pkd9a@local-macro-transformer) (set! pkd9c@do-macro-call (lambda (pk1d83@transformer pk1d84@expr pk1d85@rib) (let ((pk1d89@out (pk1d83@transformer (pkb6b@add-mark pkb63@anti-mark '#f pk1d84@expr '#f)))) (begin (let pk1d8d@f ((pk1d8b@x pk1d89@out)) (if (not (pkb4b@stx? pk1d8b@x)) (if (pair? pk1d8b@x) (begin (pk1d8d@f (car pk1d8b@x)) (pk1d8d@f (cdr pk1d8b@x))) (if (vector? pk1d8b@x) (vector-for-each pk1d8d@f pk1d8b@x) (if (symbol? pk1d8b@x) (pke66@syntax-violation '#f '"raw symbol encountered in output of macro" pk1d84@expr pk1d8b@x) (void)))) (void))) (pkb6b@add-mark (pkb61@gen-mark) pk1d85@rib pk1d89@out pk1d84@expr))))) (set! pk289d@pkd9c@do-macro-call pkd9c@do-macro-call) (set! pkd9e@chi-macro (lambda (pk1d8f@p pk1d90@e pk1d91@rib) (pkd9c@do-macro-call (pkd98@macro-transformer pk1d8f@p) pk1d90@e pk1d91@rib))) (set! pk289e@pkd9e@chi-macro pkd9e@chi-macro) (set! pkda0@chi-local-macro (lambda (pk1d95@p pk1d96@e pk1d97@rib) (pkd9c@do-macro-call (pkd9a@local-macro-transformer pk1d95@p) pk1d96@e pk1d97@rib))) (set! pk289f@pkda0@chi-local-macro pkda0@chi-local-macro) (set! pkda2@chi-global-macro (lambda (pk1d9b@p pk1d9c@e pk1d9d@rib) (let ((pk1da1@lib (car pk1d9b@p)) (pk1da2@loc (cdr pk1d9b@p))) (begin (pk99c@pk7eb@visit-library pk1da1@lib) (let ((pk1da5@x (symbol-value pk1da2@loc))) (let ((pk1da7@transformer (if (procedure? pk1da5@x) pk1da5@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" pk1da5@x)))) (pkd9c@do-macro-call pk1da7@transformer pk1d9c@e pk1d9d@rib))))))) (set! pk28a0@pkda2@chi-global-macro pkda2@chi-global-macro) (set! pkda4@chi-expr* (lambda (pk1da9@e* pk1daa@r pk1dab@mr) (if (null? pk1da9@e*) '() (let ((pk1daf@e (pkda8@chi-expr (car pk1da9@e*) pk1daa@r pk1dab@mr))) (cons pk1daf@e (pkda4@chi-expr* (cdr pk1da9@e*) pk1daa@r pk1dab@mr)))))) (set! pk28a1@pkda4@chi-expr* pkda4@chi-expr*) (set! pkda6@chi-application (lambda (pk1db1@e pk1db2@r pk1db3@mr) (let ((pk1db7@t pk1db1@e)) (let ((pk1db9@ls/false (pkd86@syntax-dispatch pk1db7@t '(any . each-any)))) (if pk1db9@ls/false (apply (lambda (pk1dbb@rator pk1dbc@rands) (let ((pk1dbf@rator (pkda8@chi-expr pk1dbb@rator pk1db2@r pk1db3@mr))) (cons pk1dbf@rator (pkda4@chi-expr* pk1dbc@rands pk1db2@r pk1db3@mr)))) pk1db9@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1db7@t)))))) (set! pk28a2@pkda6@chi-application pkda6@chi-application) (set! pkda8@chi-expr (lambda (pk1dc1@e pk1dc2@r pk1dc3@mr) (call-with-values (lambda () (pkba1@syntax-type pk1dc1@e pk1dc2@r)) (lambda (pk1dcd@pk1dc8 pk1dce@pk1dca pk1dcf@pk1dcc) (let ((pk1dd3@kwd pk1dcf@pk1dcc) (pk1dd4@value pk1dce@pk1dca) (pk1dd5@type pk1dcd@pk1dc8)) (let ((pk1dd9@t pk1dd5@type)) (if (memv pk1dd9@t '(core-macro)) (let ((pk1ddb@transformer (pkd94@core-macro-transformer pk1dd4@value))) (pk1ddb@transformer pk1dc1@e pk1dc2@r pk1dc3@mr)) (if (memv pk1dd9@t '(global)) (let ((pk1ddd@lib (car pk1dd4@value))) (let ((pk1ddf@loc (cdr pk1dd4@value))) (begin ((pkdee@inv-collector) pk1ddd@lib) pk1ddf@loc))) (if (memv pk1dd9@t '(core-prim)) (let ((pk1de1@name pk1dd4@value)) (list 'primitive pk1de1@name)) (if (memv pk1dd9@t '(call)) (pkda6@chi-application pk1dc1@e pk1dc2@r pk1dc3@mr) (if (memv pk1dd9@t '(lexical)) (let ((pk1de3@lex (pkd10@lexical-var pk1dd4@value))) pk1de3@lex) (if (memv pk1dd9@t '(global-macro global-macro!)) (pkda8@chi-expr (pkda2@chi-global-macro pk1dd4@value pk1dc1@e '#f) pk1dc2@r pk1dc3@mr) (if (memv pk1dd9@t '(local-macro local-macro!)) (pkda8@chi-expr (pkda0@chi-local-macro pk1dd4@value pk1dc1@e '#f) pk1dc2@r pk1dc3@mr) (if (memv pk1dd9@t '(macro macro!)) (pkda8@chi-expr (pkd9e@chi-macro pk1dd4@value pk1dc1@e '#f) pk1dc2@r pk1dc3@mr) (if (memv pk1dd9@t '(constant)) (let ((pk1de5@datum pk1dd4@value)) (list 'quote pk1de5@datum)) (if (memv pk1dd9@t '(set!)) (pkdaa@chi-set! pk1dc1@e pk1dc2@r pk1dc3@mr) (if (memv pk1dd9@t '(begin)) (let ((pk1de7@t pk1dc1@e)) (let ((pk1de9@ls/false (pkd86@syntax-dispatch pk1de7@t '(_ any . each-any)))) (if pk1de9@ls/false (apply (lambda (pk1deb@x pk1dec@x*) (pkae4@pka44@build-sequence '#f (pkda4@chi-expr* (cons pk1deb@x pk1dec@x*) pk1dc2@r pk1dc3@mr))) pk1de9@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1de7@t)))) (if (memv pk1dd9@t '(let-syntax letrec-syntax)) (let ((pk1def@t pk1dc1@e)) (let ((pk1df1@ls/false (pkd86@syntax-dispatch pk1def@t '(_ #(each (any any)) any . each-any)))) (if (and pk1df1@ls/false (apply (lambda (pk1df3@xlhs* pk1df4@xrhs* pk1df5@xbody pk1df6@xbody*) (if (not (pkb87@valid-bound-ids? pk1df3@xlhs*)) (pke66@syntax-violation '#f '"invalid identifiers" pk1dc1@e) (void))) pk1df1@ls/false)) (apply (lambda (pk1dfb@xlhs* pk1dfc@xrhs* pk1dfd@xbody pk1dfe@xbody*) (let ((pk1e03@xlab* (map pkb0b@gen-label pk1dfb@xlhs*))) (let ((pk1e05@xrib (pkb3f@make-full-rib pk1dfb@xlhs* pk1e03@xlab*))) (let ((pk1e07@xb* (map (lambda (pk1e09@x) (pkbb7@make-eval-transformer (pkde0@expand-transformer (if (eq? pk1dd5@type 'let-syntax) pk1e09@x (pkb69@add-subst pk1e05@xrib pk1e09@x)) pk1dc3@mr))) pk1dfc@xrhs*))) (pkae4@pka44@build-sequence '#f (pkda4@chi-expr* (map (lambda (pk1e0b@x) (pkb69@add-subst pk1e05@xrib pk1e0b@x)) (cons pk1dfd@xbody pk1dfe@xbody*)) (append (map cons pk1e03@xlab* pk1e07@xb*) pk1dc2@r) (append (map cons pk1e03@xlab* pk1e07@xb*) pk1dc3@mr))))))) pk1df1@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1def@t)))) (if (memv pk1dd9@t '(displaced-lexical)) (pke66@syntax-violation '#f '"identifier out of context" pk1dc1@e) (if (memv pk1dd9@t '(syntax)) (pke66@syntax-violation '#f '"reference to pattern variable outside a syntax form" pk1dc1@e) (if (memv pk1dd9@t '(define define-syntax module import library)) (pke66@syntax-violation '#f (string-append (let ((pk1e0d@t pk1dd5@type)) (if (memv pk1e0d@t '(define)) '"a definition" (if (memv pk1e0d@t '(define-syntax)) '"a define-syntax" (if (memv pk1e0d@t '(module)) '"a module definition" (if (memv pk1e0d@t '(library)) '"a library definition" (if (memv pk1e0d@t '(import)) '"an import declaration" (if (memv pk1e0d@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") pk1dc1@e) (if (memv pk1dd9@t '(mutable)) (pke66@syntax-violation '#f '"attempt to reference an unexportable variable" pk1dc1@e) (pke66@syntax-violation '#f '"invalid expression" pk1dc1@e))))))))))))))))))))))) (set! pk28a3@pkda8@chi-expr pkda8@chi-expr) (set! pkdaa@chi-set! (lambda (pk1e0f@e pk1e10@r pk1e11@mr) (let ((pk1e15@t pk1e0f@e)) (let ((pk1e17@ls/false (pkd86@syntax-dispatch pk1e15@t '(_ any any)))) (if (and pk1e17@ls/false (apply (lambda (pk1e19@x pk1e1a@v) (pkb7f@id? pk1e19@x)) pk1e17@ls/false)) (apply (lambda (pk1e1d@x pk1e1e@v) (call-with-values (lambda () (pkba1@syntax-type pk1e1d@x pk1e10@r)) (lambda (pk1e27@pk1e22 pk1e28@pk1e24 pk1e29@pk1e26) (let ((pk1e2d@kwd pk1e29@pk1e26) (pk1e2e@value pk1e28@pk1e24) (pk1e2f@type pk1e27@pk1e22)) (let ((pk1e33@t pk1e2f@type)) (if (memv pk1e33@t '(lexical)) (begin (pkd14@set-lexical-mutable! pk1e2e@value '#t) (list 'set! (pkd10@lexical-var pk1e2e@value) (pkda8@chi-expr pk1e1e@v pk1e10@r pk1e11@mr))) (if (memv pk1e33@t '(core-prim)) (pke66@syntax-violation '#f '"cannot modify imported core primitive" pk1e0f@e) (if (memv pk1e33@t '(global)) (pke66@syntax-violation '#f '"attempt to modify imported binding" pk1e0f@e) (if (memv pk1e33@t '(global-macro!)) (pkda8@chi-expr (pkda2@chi-global-macro pk1e2e@value pk1e0f@e '#f) pk1e10@r pk1e11@mr) (if (memv pk1e33@t '(local-macro!)) (pkda8@chi-expr (pkda0@chi-local-macro pk1e2e@value pk1e0f@e '#f) pk1e10@r pk1e11@mr) (if (memv pk1e33@t '(mutable)) (pke66@syntax-violation '#f '"attempt to assign to an unexportable variable" pk1e0f@e) (pke66@syntax-violation '#f '"invalid syntax" pk1e0f@e)))))))))))) pk1e17@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1e15@t)))))) (set! pk28a4@pkdaa@chi-set! pkdaa@chi-set!) (set! pkdac@verify-formals (lambda (pk1e35@fmls pk1e36@stx) (let ((pk1e39@t pk1e35@fmls)) (let ((pk1e3b@ls/false (pkd86@syntax-dispatch pk1e39@t 'each-any))) (if pk1e3b@ls/false (apply (lambda (pk1e3d@x*) (if (not (pkb87@valid-bound-ids? pk1e3d@x*)) (pkd40@invalid-fmls-error pk1e36@stx pk1e35@fmls) (void))) pk1e3b@ls/false) (let ((pk1e3f@t pk1e39@t)) (let ((pk1e41@ls/false (pkd86@syntax-dispatch pk1e3f@t '#(each+ any () any)))) (if pk1e41@ls/false (apply (lambda (pk1e43@x* pk1e44@x) (if (not (pkb87@valid-bound-ids? (cons pk1e44@x pk1e43@x*))) (pkd40@invalid-fmls-error pk1e36@stx pk1e35@fmls) (void))) pk1e41@ls/false) (let ((pk1e47@t pk1e3f@t)) (let ((pk1e49@ls/false (pkd86@syntax-dispatch pk1e47@t '_))) (if pk1e49@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid syntax" pk1e36@stx)) pk1e49@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1e47@t)))))))))))) (set! pk28a5@pkdac@verify-formals pkdac@verify-formals) (set! pkdae@chi-lambda-clause (lambda (pk1e4b@stx pk1e4c@fmls pk1e4d@body* pk1e4e@r pk1e4f@mr) (let ((pk1e55@t pk1e4c@fmls)) (let ((pk1e57@ls/false (pkd86@syntax-dispatch pk1e55@t 'each-any))) (if pk1e57@ls/false (apply (lambda (pk1e59@x*) (begin (pkdac@verify-formals pk1e4c@fmls pk1e4b@stx) (let ((pk1e5b@lex* (map pkb07@gen-lexical pk1e59@x*)) (pk1e5c@lab* (map pkb0b@gen-label pk1e59@x*))) (values pk1e5b@lex* (pkdbe@chi-internal (pkb69@add-subst (pkb3f@make-full-rib pk1e59@x* pk1e5c@lab*) pk1e4d@body*) (pkd18@add-lexicals pk1e5c@lab* pk1e5b@lex* pk1e4e@r) pk1e4f@mr))))) pk1e57@ls/false) (let ((pk1e5f@t pk1e55@t)) (let ((pk1e61@ls/false (pkd86@syntax-dispatch pk1e5f@t '#(each+ any () any)))) (if pk1e61@ls/false (apply (lambda (pk1e63@x* pk1e64@x) (begin (pkdac@verify-formals pk1e4c@fmls pk1e4b@stx) (let ((pk1e67@lex* (map pkb07@gen-lexical pk1e63@x*)) (pk1e68@lab* (map pkb0b@gen-label pk1e63@x*)) (pk1e69@lex (pkb07@gen-lexical pk1e64@x)) (pk1e6a@lab (pkb0b@gen-label pk1e64@x))) (values (append pk1e67@lex* pk1e69@lex) (pkdbe@chi-internal (pkb69@add-subst (pkb3f@make-full-rib (cons pk1e64@x pk1e63@x*) (cons pk1e6a@lab pk1e68@lab*)) pk1e4d@body*) (pkd18@add-lexicals (cons pk1e6a@lab pk1e68@lab*) (cons pk1e69@lex pk1e67@lex*) pk1e4e@r) pk1e4f@mr))))) pk1e61@ls/false) (let ((pk1e6f@t pk1e5f@t)) (let ((pk1e71@ls/false (pkd86@syntax-dispatch pk1e6f@t '_))) (if pk1e71@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid syntax" pk1e4c@fmls)) pk1e71@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1e6f@t)))))))))))) (set! pk28a6@pkdae@chi-lambda-clause pkdae@chi-lambda-clause) (set! pkdb0@chi-lambda-clause* (lambda (pk1e73@stx pk1e74@fmls* pk1e75@body** pk1e76@r pk1e77@mr) (if (null? pk1e74@fmls*) (values '() '()) (call-with-values (lambda () (pkdae@chi-lambda-clause pk1e73@stx (car pk1e74@fmls*) (car pk1e75@body**) pk1e76@r pk1e77@mr)) (lambda (pk1e81@pk1e7e pk1e82@pk1e80) (let ((pk1e85@b pk1e82@pk1e80) (pk1e86@a pk1e81@pk1e7e)) (call-with-values (lambda () (pkdb0@chi-lambda-clause* pk1e73@stx (cdr pk1e74@fmls*) (cdr pk1e75@body**) pk1e76@r pk1e77@mr)) (lambda (pk1e8d@pk1e8a pk1e8e@pk1e8c) (let ((pk1e91@b* pk1e8e@pk1e8c) (pk1e92@a* pk1e8d@pk1e8a)) (values (cons pk1e86@a pk1e92@a*) (cons pk1e85@b pk1e91@b*))))))))))) (set! pk28a7@pkdb0@chi-lambda-clause* pkdb0@chi-lambda-clause*) (set! pkdb2@chi-defun (lambda (pk1e95@x pk1e96@r pk1e97@mr) (let ((pk1e9b@fmls (car pk1e95@x)) (pk1e9c@body* (cdr pk1e95@x))) (call-with-values (lambda () (pkdae@chi-lambda-clause pk1e9b@fmls pk1e9b@fmls pk1e9c@body* pk1e96@r pk1e97@mr)) (lambda (pk1ea3@pk1ea0 pk1ea4@pk1ea2) (let ((pk1ea7@body pk1ea4@pk1ea2) (pk1ea8@fmls pk1ea3@pk1ea0)) (pkae2@pka14@build-lambda '#f pk1ea8@fmls pk1ea7@body))))))) (set! pk28a8@pkdb2@chi-defun pkdb2@chi-defun) (set! pkdb4@chi-rhs (lambda (pk1eab@rhs pk1eac@r pk1ead@mr) (let ((pk1eb1@t (car pk1eab@rhs))) (if (memv pk1eb1@t '(defun)) (pkdb2@chi-defun (cdr pk1eab@rhs) pk1eac@r pk1ead@mr) (if (memv pk1eb1@t '(expr)) (let ((pk1eb3@expr (cdr pk1eab@rhs))) (pkda8@chi-expr pk1eb3@expr pk1eac@r pk1ead@mr)) (if (memv pk1eb1@t '(top-expr)) (let ((pk1eb5@expr (cdr pk1eab@rhs))) (pkae4@pka44@build-sequence '#f (list (pkda8@chi-expr pk1eb5@expr pk1eac@r pk1ead@mr) (pkae5@pka46@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" pk1eab@rhs))))))) (set! pk28a9@pkdb4@chi-rhs pkdb4@chi-rhs) (set! pkdb6@expand-interaction-rhs*/init* (lambda (pk1eb7@lhs* pk1eb8@rhs* pk1eb9@init* pk1eba@r pk1ebb@mr) (let pk1ec5@f ((pk1ec1@lhs* pk1eb7@lhs*) (pk1ec2@rhs* pk1eb8@rhs*)) (if (null? pk1ec1@lhs*) (map (lambda (pk1ec7@x) (pkda8@chi-expr pk1ec7@x pk1eba@r pk1ebb@mr)) pk1eb9@init*) (let ((pk1ec9@lhs (car pk1ec1@lhs*)) (pk1eca@rhs (car pk1ec2@rhs*))) (let ((pk1ecd@t (car pk1eca@rhs))) (if (memv pk1ecd@t '(defun)) (let ((pk1ecf@rhs (pkdb2@chi-defun (cdr pk1eca@rhs) pk1eba@r pk1ebb@mr))) (cons (list 'set! pk1ec9@lhs pk1ecf@rhs) (pk1ec5@f (cdr pk1ec1@lhs*) (cdr pk1ec2@rhs*)))) (if (memv pk1ecd@t '(expr)) (let ((pk1ed1@rhs (pkda8@chi-expr (cdr pk1eca@rhs) pk1eba@r pk1ebb@mr))) (cons (list 'set! pk1ec9@lhs pk1ed1@rhs) (pk1ec5@f (cdr pk1ec1@lhs*) (cdr pk1ec2@rhs*)))) (if (memv pk1ecd@t '(top-expr)) (let ((pk1ed3@e (pkda8@chi-expr (cdr pk1eca@rhs) pk1eba@r pk1ebb@mr))) (cons pk1ed3@e (pk1ec5@f (cdr pk1ec1@lhs*) (cdr pk1ec2@rhs*)))) (error 'expand-interaction '"invallid" pk1eca@rhs)))))))))) (set! pk28aa@pkdb6@expand-interaction-rhs*/init* pkdb6@expand-interaction-rhs*/init*) (set! pkdb8@chi-rhs* (lambda (pk1ed5@rhs* pk1ed6@r pk1ed7@mr) (let pk1edd@f ((pk1edb@ls pk1ed5@rhs*)) (if (null? pk1edb@ls) '() (let ((pk1edf@a (pkdb4@chi-rhs (car pk1edb@ls) pk1ed6@r pk1ed7@mr))) (cons pk1edf@a (pk1edd@f (cdr pk1edb@ls)))))))) (set! pk28ab@pkdb8@chi-rhs* pkdb8@chi-rhs*) (set! pkdba@find-bound=? (lambda (pk1ee1@x pk1ee2@lhs* pk1ee3@rhs*) (if (null? pk1ee2@lhs*) '#f (if (pkb83@bound-id=? pk1ee1@x (car pk1ee2@lhs*)) (car pk1ee3@rhs*) (pkdba@find-bound=? pk1ee1@x (cdr pk1ee2@lhs*) (cdr pk1ee3@rhs*)))))) (set! pk28ac@pkdba@find-bound=? pkdba@find-bound=?) (set! pkdbc@find-dups (lambda (pk1ee7@ls) (let pk1eed@f ((pk1ee9@ls pk1ee7@ls) (pk1eea@dups '())) (if (null? pk1ee9@ls) pk1eea@dups (let ((pk1eef@t (pkdba@find-bound=? (car pk1ee9@ls) (cdr pk1ee9@ls) (cdr pk1ee9@ls)))) (if pk1eef@t ((lambda (pk1ef1@x) (pk1eed@f (cdr pk1ee9@ls) (cons (list (car pk1ee9@ls) pk1ef1@x) pk1eea@dups))) pk1eef@t) (pk1eed@f (cdr pk1ee9@ls) pk1eea@dups))))))) (set! pk28ad@pkdbc@find-dups pkdbc@find-dups) (set! pkdbe@chi-internal (lambda (pk1ef3@e* pk1ef4@r pk1ef5@mr) (let ((pk1ef9@rib (pkb33@make-empty-rib))) (call-with-values (lambda () (pkdde@chi-body* (map (lambda (pk1f0b@x) (pkb69@add-subst pk1ef9@rib pk1f0b@x)) (pkb7d@syntax->list pk1ef3@e*)) pk1ef4@r pk1ef5@mr '() '() '() '() '() pk1ef9@rib '#f)) (lambda (pk1f0d@pk1efc pk1f0e@pk1efe pk1f0f@pk1f00 pk1f10@pk1f02 pk1f11@pk1f04 pk1f12@pk1f06 pk1f13@pk1f08 pk1f14@pk1f0a) (let ((pk1f1d@_exp* pk1f14@pk1f0a) (pk1f1e@kwd* pk1f13@pk1f08) (pk1f1f@mod** pk1f12@pk1f06) (pk1f20@rhs* pk1f11@pk1f04) (pk1f21@lex* pk1f10@pk1f02) (pk1f22@mr pk1f0f@pk1f00) (pk1f23@r pk1f0e@pk1efe) (pk1f24@e* pk1f0d@pk1efc)) (begin (if (null? pk1f24@e*) (pke66@syntax-violation '#f '"no expression in body" pk1f24@e*) (void)) (let ((pk1f2d@init* (pkda4@chi-expr* (append (apply append (reverse pk1f1f@mod**)) pk1f24@e*) pk1f23@r pk1f22@mr))) (let ((pk1f2f@rhs* (pkdb8@chi-rhs* pk1f20@rhs* pk1f23@r pk1f22@mr))) (pkae9@pka4e@build-letrec* '#f (reverse pk1f21@lex*) (reverse pk1f2f@rhs*) (pkae4@pka44@build-sequence '#f pk1f2d@init*))))))))))) (set! pk28ae@pkdbe@chi-internal pkdbe@chi-internal) (set! pkdc0@parse-module (lambda (pk1f31@e) (let ((pk1f33@t pk1f31@e)) (let ((pk1f35@ls/false (pkd86@syntax-dispatch pk1f33@t '(_ each-any . each-any)))) (if pk1f35@ls/false (apply (lambda (pk1f37@export* pk1f38@b*) (begin (if (not (for-all pkb7f@id? pk1f37@export*)) (pke66@syntax-violation '#f '"module exports must be identifiers" pk1f31@e) (void)) (values '#f (list->vector pk1f37@export*) pk1f38@b*))) pk1f35@ls/false) (let ((pk1f3b@t pk1f33@t)) (let ((pk1f3d@ls/false (pkd86@syntax-dispatch pk1f3b@t '(_ any each-any . each-any)))) (if pk1f3d@ls/false (apply (lambda (pk1f3f@name pk1f40@export* pk1f41@b*) (begin (if (not (pkb7f@id? pk1f3f@name)) (pke66@syntax-violation '#f '"module name must be an identifier" pk1f31@e) (void)) (if (not (for-all pkb7f@id? pk1f40@export*)) (pke66@syntax-violation '#f '"module exports must be identifiers" pk1f31@e) (void)) (values pk1f3f@name (list->vector pk1f40@export*) pk1f41@b*))) pk1f3d@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk1f3b@t))))))))) (set! pk28af@pkdc0@parse-module pkdc0@parse-module) (set! pkdca@module-interface? (lambda (pk1f45@x) (and (simple-struct? pk1f45@x) (eq? (simple-struct-name pk1f45@x) 'module-interface)))) (set! pk28b0@pkdca@module-interface? pkdca@module-interface?) (set! pkdcc@module-interface-first-mark (lambda (pk1f47@x) (simple-struct-ref pk1f47@x '0))) (set! pk28b1@pkdcc@module-interface-first-mark pkdcc@module-interface-first-mark) (set! pkdce@set-module-interface-first-mark! (lambda (pk1f49@x pk1f4a@val) (simple-struct-set! pk1f49@x '0 pk1f4a@val))) (set! pk28b2@pkdce@set-module-interface-first-mark! pkdce@set-module-interface-first-mark!) (set! pkdd0@module-interface-exp-id-vec (lambda (pk1f4d@x) (simple-struct-ref pk1f4d@x '1))) (set! pk28b3@pkdd0@module-interface-exp-id-vec pkdd0@module-interface-exp-id-vec) (set! pkdd2@set-module-interface-exp-id-vec! (lambda (pk1f4f@x pk1f50@val) (simple-struct-set! pk1f4f@x '1 pk1f50@val))) (set! pk28b4@pkdd2@set-module-interface-exp-id-vec! pkdd2@set-module-interface-exp-id-vec!) (set! pkdd4@module-interface-exp-lab-vec (lambda (pk1f53@x) (simple-struct-ref pk1f53@x '2))) (set! pk28b5@pkdd4@module-interface-exp-lab-vec pkdd4@module-interface-exp-lab-vec) (set! pkdd6@set-module-interface-exp-lab-vec! (lambda (pk1f55@x pk1f56@val) (simple-struct-set! pk1f55@x '2 pk1f56@val))) (set! pk28b6@pkdd6@set-module-interface-exp-lab-vec! pkdd6@set-module-interface-exp-lab-vec!) (set! pkdd8@dummy '3) (set! pk28b7@pkdd8@dummy pkdd8@dummy) (set! pkdda@module-interface-exp-id* (lambda (pk1f59@iface pk1f5a@id) (letrec* ((pk1f5e@diff-marks (lambda (pk1f65@ls pk1f66@x) (begin (if (null? pk1f65@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((pk1f69@a (car pk1f65@ls))) (if (eq? pk1f69@a pk1f66@x) '() (cons pk1f69@a (pk1f5e@diff-marks (cdr pk1f65@ls) pk1f66@x)))))))) (let ((pk1f5f@diff (pk1f5e@diff-marks (pkb51@stx-mark* pk1f5a@id) (pkdcc@module-interface-first-mark pk1f59@iface))) (pk1f60@id-vec (pkdd0@module-interface-exp-id-vec pk1f59@iface))) (if (null? pk1f5f@diff) pk1f60@id-vec (vector-map (lambda (pk1f63@x) (make-simple-struct 'stx '5 (list (pkb4d@stx-expr pk1f63@x) (append pk1f5f@diff (pkb51@stx-mark* pk1f63@x)) '() '()))) pk1f60@id-vec)))))) (set! pk28b8@pkdda@module-interface-exp-id* pkdda@module-interface-exp-id*) (set! pkddc@chi-internal-module (lambda (pk1f6b@e pk1f6c@r pk1f6d@mr pk1f6e@lex* pk1f6f@rhs* pk1f70@mod** pk1f71@kwd*) (call-with-values (lambda () (pkdc0@parse-module pk1f6b@e)) (lambda (pk1f7f@pk1f7a pk1f80@pk1f7c pk1f81@pk1f7e) (let ((pk1f85@e* pk1f81@pk1f7e) (pk1f86@exp-id* pk1f80@pk1f7c) (pk1f87@name pk1f7f@pk1f7a)) (let ((pk1f8b@rib (pkb33@make-empty-rib))) (let ((pk1f8d@e* (map (lambda (pk1f8f@x) (pkb69@add-subst pk1f8b@rib pk1f8f@x)) (pkb7d@syntax->list pk1f85@e*)))) (call-with-values (lambda () (pkdde@chi-body* pk1f8d@e* pk1f6c@r pk1f6d@mr pk1f6e@lex* pk1f6f@rhs* pk1f70@mod** pk1f71@kwd* '() pk1f8b@rib '#f)) (lambda (pk1fa1@pk1f92 pk1fa2@pk1f94 pk1fa3@pk1f96 pk1fa4@pk1f98 pk1fa5@pk1f9a pk1fa6@pk1f9c pk1fa7@pk1f9e pk1fa8@pk1fa0) (let ((pk1fb1@_exp* pk1fa8@pk1fa0) (pk1fb2@kwd* pk1fa7@pk1f9e) (pk1fb3@mod** pk1fa6@pk1f9c) (pk1fb4@rhs* pk1fa5@pk1f9a) (pk1fb5@lex* pk1fa4@pk1f98) (pk1fb6@mr pk1fa3@pk1f96) (pk1fb7@r pk1fa2@pk1f94) (pk1fb8@e* pk1fa1@pk1f92)) (let ((pk1fc1@exp-lab* (vector-map (lambda (pk1fc5@x) (or (pkb95@id->label (make-simple-struct 'stx '5 (list (pkb81@id->sym pk1fc5@x) (pkb51@stx-mark* pk1fc5@x) (list pk1f8b@rib) '()))) (pke66@syntax-violation '#f '"cannot find module export" pk1fc5@x))) pk1f86@exp-id*)) (pk1fc2@mod** (cons pk1fb8@e* pk1fb3@mod**))) (if (not pk1f87@name) (values pk1fb5@lex* pk1fb4@rhs* pk1f86@exp-id* pk1fc1@exp-lab* pk1fb7@r pk1fb6@mr pk1fc2@mod** pk1fb2@kwd*) (let ((pk1fc7@lab (pkb0b@gen-label 'module)) (pk1fc8@iface (make-simple-struct 'module-interface '4 (list (car (pkb51@stx-mark* pk1f87@name)) (vector-map (lambda (pk1fcb@x) (make-simple-struct 'stx '5 (list (pkb4d@stx-expr pk1fcb@x) (pkb51@stx-mark* pk1fcb@x) '() '()))) pk1f86@exp-id*) pk1fc1@exp-lab*)))) (values pk1fb5@lex* pk1fb4@rhs* (vector pk1f87@name) (vector pk1fc7@lab) (cons (cons pk1fc7@lab (cons '$module pk1fc8@iface)) pk1fb7@r) (cons (cons pk1fc7@lab (cons '$module pk1fc8@iface)) pk1fb6@mr) pk1fc2@mod** pk1fb2@kwd*)))))))))))))) (set! pk28b9@pkddc@chi-internal-module pkddc@chi-internal-module) (set! pkdde@chi-body* (lambda (pk1fcd@e* pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1fd3@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?) (if (null? pk1fcd@e*) (values pk1fcd@e* pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1fd3@kwd* pk1fd4@exp*) (let ((pk1fe1@e (car pk1fcd@e*))) (call-with-values (lambda () (pkba1@syntax-type pk1fe1@e pk1fce@r)) (lambda (pk1fe9@pk1fe4 pk1fea@pk1fe6 pk1feb@pk1fe8) (let ((pk1fef@kwd pk1feb@pk1fe8) (pk1ff0@value pk1fea@pk1fe6) (pk1ff1@type pk1fe9@pk1fe4)) (let ((pk1ff5@kwd* (if (pkb7f@id? pk1fef@kwd) (cons pk1fef@kwd pk1fd3@kwd*) pk1fd3@kwd*))) (let ((pk1ff7@t pk1ff1@type)) (if (memv pk1ff7@t '(define)) (call-with-values (lambda () (pkd08@parse-define pk1fe1@e)) (lambda (pk1ffd@pk1ffa pk1ffe@pk1ffc) (let ((pk2001@rhs pk1ffe@pk1ffc) (pk2002@id pk1ffd@pk1ffa)) (begin (if (pkb8b@bound-id-member? pk2002@id pk1ff5@kwd*) (pke66@syntax-violation '#f '"cannot redefine keyword" pk1fe1@e) (void)) (call-with-values (lambda () (pkb0f@gen-define-label+loc pk2002@id pk1fd5@rib)) (lambda (pk2009@pk2006 pk200a@pk2008) (let ((pk200d@lex pk200a@pk2008) (pk200e@lab pk2009@pk2006)) (begin (pkb35@extend-rib! pk1fd5@rib pk2002@id pk200e@lab) (pkdde@chi-body* (cdr pk1fcd@e*) (pkd16@add-lexical pk200e@lab pk200d@lex pk1fce@r) pk1fcf@mr (cons pk200d@lex pk1fd0@lex*) (cons pk2001@rhs pk1fd1@rhs*) pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?))))))))) (if (memv pk1ff7@t '(define-syntax)) (call-with-values (lambda () (pkd0a@parse-define-syntax pk1fe1@e)) (lambda (pk2015@pk2012 pk2016@pk2014) (let ((pk2019@rhs pk2016@pk2014) (pk201a@id pk2015@pk2012)) (begin (if (pkb8b@bound-id-member? pk201a@id pk1ff5@kwd*) (pke66@syntax-violation '#f '"cannot redefine keyword" pk1fe1@e) (void)) (let ((pk201d@lab (pkb11@gen-define-label pk201a@id pk1fd5@rib)) (pk201e@expanded-rhs (pkde0@expand-transformer pk2019@rhs pk1fcf@mr))) (begin (pkb35@extend-rib! pk1fd5@rib pk201a@id pk201d@lab) (let ((pk2021@b (pkbb7@make-eval-transformer pk201e@expanded-rhs))) (pkdde@chi-body* (cdr pk1fcd@e*) (cons (cons pk201d@lab pk2021@b) pk1fce@r) (cons (cons pk201d@lab pk2021@b) pk1fcf@mr) pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?)))))))) (if (memv pk1ff7@t '(let-syntax letrec-syntax)) (let ((pk2023@t pk1fe1@e)) (let ((pk2025@ls/false (pkd86@syntax-dispatch pk2023@t '(_ #(each (any any)) . each-any)))) (if (and pk2025@ls/false (apply (lambda (pk2027@xlhs* pk2028@xrhs* pk2029@xbody*) (if (not (pkb87@valid-bound-ids? pk2027@xlhs*)) (pke66@syntax-violation '#f '"invalid identifiers" pk1fe1@e) (void))) pk2025@ls/false)) (apply (lambda (pk202d@xlhs* pk202e@xrhs* pk202f@xbody*) (let ((pk2033@xlab* (map pkb0b@gen-label pk202d@xlhs*))) (let ((pk2035@xrib (pkb3f@make-full-rib pk202d@xlhs* pk2033@xlab*))) (let ((pk2037@xb* (map (lambda (pk2039@x) (pkbb7@make-eval-transformer (pkde0@expand-transformer (if (eq? pk1ff1@type 'let-syntax) pk2039@x (pkb69@add-subst pk2035@xrib pk2039@x)) pk1fcf@mr))) pk202e@xrhs*))) (pkdde@chi-body* (append (map (lambda (pk203b@x) (pkb69@add-subst pk2035@xrib pk203b@x)) pk202f@xbody*) (cdr pk1fcd@e*)) (append (map cons pk2033@xlab* pk2037@xb*) pk1fce@r) (append (map cons pk2033@xlab* pk2037@xb*) pk1fcf@mr) pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?))))) pk2025@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk2023@t)))) (if (memv pk1ff7@t '(begin)) (let ((pk203d@t pk1fe1@e)) (let ((pk203f@ls/false (pkd86@syntax-dispatch pk203d@t '(_ . each-any)))) (if pk203f@ls/false (apply (lambda (pk2041@x*) (pkdde@chi-body* (append pk2041@x* (cdr pk1fcd@e*)) pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?)) pk203f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk203d@t)))) (if (memv pk1ff7@t '(global-macro global-macro!)) (pkdde@chi-body* (cons (pkda2@chi-global-macro pk1ff0@value pk1fe1@e pk1fd5@rib) (cdr pk1fcd@e*)) pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?) (if (memv pk1ff7@t '(local-macro local-macro!)) (pkdde@chi-body* (cons (pkda0@chi-local-macro pk1ff0@value pk1fe1@e pk1fd5@rib) (cdr pk1fcd@e*)) pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?) (if (memv pk1ff7@t '(macro macro!)) (pkdde@chi-body* (cons (pkd9e@chi-macro pk1ff0@value pk1fe1@e pk1fd5@rib) (cdr pk1fcd@e*)) pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?) (if (memv pk1ff7@t '(module)) (call-with-values (lambda () (pkddc@chi-internal-module pk1fe1@e pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd*)) (lambda (pk2053@pk2044 pk2054@pk2046 pk2055@pk2048 pk2056@pk204a pk2057@pk204c pk2058@pk204e pk2059@pk2050 pk205a@pk2052) (let ((pk2063@kwd* pk205a@pk2052) (pk2064@mod** pk2059@pk2050) (pk2065@mr pk2058@pk204e) (pk2066@r pk2057@pk204c) (pk2067@m-exp-lab* pk2056@pk204a) (pk2068@m-exp-id* pk2055@pk2048) (pk2069@rhs* pk2054@pk2046) (pk206a@lex* pk2053@pk2044)) (begin (vector-for-each (lambda (pk2073@id pk2074@lab) (pkb35@extend-rib! pk1fd5@rib pk2073@id pk2074@lab)) pk2068@m-exp-id* pk2067@m-exp-lab*) (pkdde@chi-body* (cdr pk1fcd@e*) pk2066@r pk2065@mr pk206a@lex* pk2069@rhs* pk2064@mod** pk2063@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?))))) (if (memv pk1ff7@t '(library)) (begin (pke48@library-expander (pkb93@stx->datum pk1fe1@e)) (pkdde@chi-body* (cdr pk1fcd@e*) pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?)) (if (memv pk1ff7@t '(export)) (let ((pk2077@t pk1fe1@e)) (let ((pk2079@ls/false (pkd86@syntax-dispatch pk2077@t '(_ . each-any)))) (if pk2079@ls/false (apply (lambda (pk207b@exp-decl*) (pkdde@chi-body* (cdr pk1fcd@e*) pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* (append pk207b@exp-decl* pk1fd4@exp*) pk1fd5@rib pk1fd6@top?)) pk2079@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk2077@t)))) (if (memv pk1ff7@t '(import)) (letrec* ((pk207e@module-import? (lambda (pk20d1@e) (let ((pk20d3@t pk20d1@e)) (let ((pk20d5@ls/false (pkd86@syntax-dispatch pk20d3@t '(_ any)))) (if (and pk20d5@ls/false (apply (lambda (pk20d7@id) (pkb7f@id? pk20d7@id)) pk20d5@ls/false)) (apply (lambda (pk20d9@id) '#t) pk20d5@ls/false) (let ((pk20db@t pk20d3@t)) (let ((pk20dd@ls/false (pkd86@syntax-dispatch pk20db@t '(_ . each-any)))) (if pk20dd@ls/false (apply (lambda (pk20df@imp*) '#f) pk20dd@ls/false) (let ((pk20e1@t pk20db@t)) (let ((pk20e3@ls/false (pkd86@syntax-dispatch pk20e1@t '_))) (if pk20e3@ls/false (apply (lambda () (pke66@syntax-violation '#f '"malformed import form" pk20d1@e)) pk20e3@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk20e1@t)))))))))))) (pk2080@module-import (lambda (pk20af@e pk20b0@r) (let ((pk20b3@t pk20af@e)) (let ((pk20b5@ls/false (pkd86@syntax-dispatch pk20b3@t '(_ any)))) (if (and pk20b5@ls/false (apply (lambda (pk20b7@id) (pkb7f@id? pk20b7@id)) pk20b5@ls/false)) (apply (lambda (pk20b9@id) (call-with-values (lambda () (pkba1@syntax-type pk20b9@id pk20b0@r)) (lambda (pk20c1@pk20bc pk20c2@pk20be pk20c3@pk20c0) (let ((pk20c7@kwd pk20c3@pk20c0) (pk20c8@value pk20c2@pk20be) (pk20c9@type pk20c1@pk20bc)) (let ((pk20cd@t pk20c9@type)) (if (memv pk20cd@t '($module)) (let ((pk20cf@iface pk20c8@value)) (values (pkdda@module-interface-exp-id* pk20cf@iface pk20b9@id) (pkdd4@module-interface-exp-lab-vec pk20cf@iface))) (pke66@syntax-violation '#f '"invalid import" pk20af@e))))))) pk20b5@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk20b3@t)))))) (pk2082@library-import (lambda (pk2093@e) (let ((pk2095@t pk2093@e)) (let ((pk2097@ls/false (pkd86@syntax-dispatch pk2095@t '(any . each-any)))) (if pk2097@ls/false (apply (lambda (pk2099@ctxt pk209a@imp*) (call-with-values (lambda () (pkde8@parse-import-spec* (pke6c@syntax->datum pk209a@imp*))) (lambda (pk20a1@pk209e pk20a2@pk20a0) (let ((pk20a5@subst-labels pk20a2@pk20a0) (pk20a6@subst-names pk20a1@pk209e)) (values (vector-map (lambda (pk20a9@name) (pkb5f@datum->stx pk2099@ctxt pk20a9@name)) pk20a6@subst-names) pk20a5@subst-labels))))) pk2097@ls/false) (let ((pk20ab@t pk2095@t)) (let ((pk20ad@ls/false (pkd86@syntax-dispatch pk20ab@t '_))) (if pk20ad@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid import form" pk2093@e)) pk20ad@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk20ab@t)))))))))) (begin (call-with-values (lambda () (if (pk207e@module-import? pk1fe1@e) (pk2080@module-import pk1fe1@e pk1fce@r) (pk2082@library-import pk1fe1@e))) (lambda (pk2087@pk2084 pk2088@pk2086) (let ((pk208b@lab* pk2088@pk2086) (pk208c@id* pk2087@pk2084)) (vector-for-each (lambda (pk208f@id pk2090@lab) (pkb35@extend-rib! pk1fd5@rib pk208f@id pk2090@lab)) pk208c@id* pk208b@lab*)))) (pkdde@chi-body* (cdr pk1fcd@e*) pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?))) (if pk1fd6@top? (pkdde@chi-body* (cdr pk1fcd@e*) pk1fce@r pk1fcf@mr (cons (pkb07@gen-lexical 'dummy) pk1fd0@lex*) (cons (cons 'top-expr pk1fe1@e) pk1fd1@rhs*) pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp* pk1fd5@rib pk1fd6@top?) (values pk1fcd@e* pk1fce@r pk1fcf@mr pk1fd0@lex* pk1fd1@rhs* pk1fd2@mod** pk1ff5@kwd* pk1fd4@exp*)))))))))))))))))))))) (set! pk28ba@pkdde@chi-body* pkdde@chi-body*) (set! pkde0@expand-transformer (lambda (pk20e5@expr pk20e6@r) (let ((pk20e9@rtc (pkdec@make-collector))) (let ((pk20eb@expanded-rhs (let ((pk20f5@pk20ee pkdee@inv-collector) (pk20f6@pk20f0 pkdf0@vis-collector) (pk20f7@pk20f2 pk20e9@rtc) (pk20f8@pk20f4 (lambda (pk20fd@x) (values)))) (let ((pk20ff@swap (lambda () (begin (let ((pk2101@t (pk20f5@pk20ee))) (begin (pk20f5@pk20ee pk20f7@pk20f2) (set! pk20f7@pk20f2 pk2101@t))) (let ((pk2103@t (pk20f6@pk20f0))) (begin (pk20f6@pk20f0 pk20f8@pk20f4) (set! pk20f8@pk20f4 pk2103@t))))))) (dynamic-wind pk20ff@swap (lambda () (pkda8@chi-expr pk20e5@expr pk20e6@r pk20e6@r)) pk20ff@swap))))) (begin (for-each (let ((pk2105@mark-visit (pkdf0@vis-collector))) (lambda (pk2107@x) (begin (pk99b@pk7e9@invoke-library pk2107@x) (pk2105@mark-visit pk2107@x)))) (pk20e9@rtc)) pk20eb@expanded-rhs))))) (set! pk28bb@pkde0@expand-transformer pkde0@expand-transformer) (set! pkde2@parse-exports (lambda (pk2109@exp*) (let pk2111@f ((pk210b@exp* pk2109@exp*) (pk210c@int* '()) (pk210d@ext* '())) (if (null? pk210b@exp*) (begin (if (not (pkb87@valid-bound-ids? pk210d@ext*)) (pke66@syntax-violation 'export '"invalid exports" (pkdbc@find-dups pk210d@ext*)) (void)) (values (map pke6c@syntax->datum pk210d@ext*) pk210c@int*)) (let ((pk2113@t (car pk210b@exp*))) (let ((pk2115@ls/false (pkd86@syntax-dispatch pk2113@t '(any . #(each (any any)))))) (if pk2115@ls/false (apply (lambda (pk2117@rename pk2118@i* pk2119@e*) (begin (if (not (and (eq? (pke6c@syntax->datum pk2117@rename) 'rename) (for-all pkb7f@id? pk2118@i*) (for-all pkb7f@id? pk2119@e*))) (pke66@syntax-violation 'export '"invalid export specifier" (car pk210b@exp*)) (void)) (pk2111@f (cdr pk210b@exp*) (append pk2118@i* pk210c@int*) (append pk2119@e* pk210d@ext*)))) pk2115@ls/false) (let ((pk211d@t pk2113@t)) (let ((pk211f@ls/false (pkd86@syntax-dispatch pk211d@t 'any))) (if pk211f@ls/false (apply (lambda (pk2121@ie) (begin (if (not (pkb7f@id? pk2121@ie)) (pke66@syntax-violation 'export '"invalid export" pk2121@ie) (void)) (pk2111@f (cdr pk210b@exp*) (cons pk2121@ie pk210c@int*) (cons pk2121@ie pk210d@ext*)))) pk211f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk211d@t))))))))))) (set! pk28bc@pkde2@parse-exports pkde2@parse-exports) (set! pkde4@parse-library-name (lambda (pk2123@spec) (letrec* ((pk2126@parse (lambda (pk2133@x) (let ((pk2135@t pk2133@x)) (let ((pk2137@ls/false (pkd86@syntax-dispatch pk2135@t '(each-any)))) (if (and pk2137@ls/false (apply (lambda (pk2139@v*) (for-all (lambda (pk213b@x) (let ((pk213d@x (pke6c@syntax->datum pk213b@x))) (and (integer? pk213d@x) (exact? pk213d@x)))) pk2139@v*)) pk2137@ls/false)) (apply (lambda (pk213f@v*) (values '() (map pke6c@syntax->datum pk213f@v*))) pk2137@ls/false) (let ((pk2141@t pk2135@t)) (let ((pk2143@ls/false (pkd86@syntax-dispatch pk2141@t '(any . any)))) (if (and pk2143@ls/false (apply (lambda (pk2145@x pk2146@rest) (symbol? (pke6c@syntax->datum pk2145@x))) pk2143@ls/false)) (apply (lambda (pk2149@x pk214a@rest) (call-with-values (lambda () (pk2126@parse pk214a@rest)) (lambda (pk2151@pk214e pk2152@pk2150) (let ((pk2155@v* pk2152@pk2150) (pk2156@x* pk2151@pk214e)) (values (cons (pke6c@syntax->datum pk2149@x) pk2156@x*) pk2155@v*))))) pk2143@ls/false) (let ((pk2159@t pk2141@t)) (let ((pk215b@ls/false (pkd86@syntax-dispatch pk2159@t '()))) (if pk215b@ls/false (apply (lambda () (values '() '())) pk215b@ls/false) (let ((pk215d@t pk2159@t)) (let ((pk215f@ls/false (pkd86@syntax-dispatch pk215d@t '_))) (if pk215f@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid library name" pk2123@spec)) pk215f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk215d@t)))))))))))))))) (call-with-values (lambda () (pk2126@parse pk2123@spec)) (lambda (pk212b@pk2128 pk212c@pk212a) (let ((pk212f@ver* pk212c@pk212a) (pk2130@name* pk212b@pk2128)) (begin (if (null? pk2130@name*) (pke66@syntax-violation '#f '"empty library name" pk2123@spec) (void)) (values pk2130@name* pk212f@ver*)))))))) (set! pk28bd@pkde4@parse-library-name pkde4@parse-library-name) (set! pkde6@parse-library (lambda (pk2161@e) (let ((pk2163@t pk2161@e)) (let ((pk2165@ls/false (pkd86@syntax-dispatch pk2163@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and pk2165@ls/false (apply (lambda (pk2167@library pk2168@name* pk2169@export pk216a@exp* pk216b@import pk216c@imp* pk216d@b*) (and (eq? (pke6c@syntax->datum pk2169@export) 'export) (eq? (pke6c@syntax->datum pk216b@import) 'import) (eq? (pke6c@syntax->datum pk2167@library) 'library))) pk2165@ls/false)) (apply (lambda (pk2175@library pk2176@name* pk2177@export pk2178@exp* pk2179@import pk217a@imp* pk217b@b*) (values pk2176@name* pk2178@exp* pk217a@imp* pk217b@b*)) pk2165@ls/false) (let ((pk2183@t pk2163@t)) (let ((pk2185@ls/false (pkd86@syntax-dispatch pk2183@t '_))) (if pk2185@ls/false (apply (lambda () (pke66@syntax-violation '#f '"malformed library" pk2161@e)) pk2185@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk2183@t))))))))) (set! pk28be@pkde6@parse-library pkde6@parse-library) (set! pkde8@parse-import-spec* (letrec* ((pk2188@idsyn? (lambda (pk2391@x) (symbol? (pke6c@syntax->datum pk2391@x)))) (pk218a@dup-error (lambda (pk238f@name) (pke66@syntax-violation 'import '"two imports with different bindings" pk238f@name))) (pk218c@merge-substs (lambda (pk237d@s pk237e@subst) (letrec* ((pk2382@insert-to-subst (lambda (pk2383@a pk2384@subst) (let ((pk2387@name (car pk2383@a)) (pk2388@label (cdr pk2383@a))) (let ((pk238b@t (assq pk2387@name pk2384@subst))) (if pk238b@t ((lambda (pk238d@x) (if (eq? (cdr pk238d@x) pk2388@label) pk2384@subst (pk218a@dup-error pk2387@name))) pk238b@t) (cons pk2383@a pk2384@subst))))))) (if (null? pk237d@s) pk237e@subst (pk2382@insert-to-subst (car pk237d@s) (pk218c@merge-substs (cdr pk237d@s) pk237e@subst)))))) (pk218e@exclude* (lambda (pk234d@sym* pk234e@subst) (letrec* ((pk2352@exclude (lambda (pk236b@sym pk236c@subst) (if (null? pk236c@subst) (pke66@syntax-violation 'import '"cannot rename unbound identifier" pk236b@sym) (if (eq? pk236b@sym (caar pk236c@subst)) (values (cdar pk236c@subst) (cdr pk236c@subst)) (let ((pk236f@a (car pk236c@subst))) (call-with-values (lambda () (pk2352@exclude pk236b@sym (cdr pk236c@subst))) (lambda (pk2375@pk2372 pk2376@pk2374) (let ((pk2379@subst pk2376@pk2374) (pk237a@old pk2375@pk2372)) (values pk237a@old (cons pk236f@a pk2379@subst))))))))))) (if (null? pk234d@sym*) (values '() pk234e@subst) (call-with-values (lambda () (pk2352@exclude (car pk234d@sym*) pk234e@subst)) (lambda (pk2357@pk2354 pk2358@pk2356) (let ((pk235b@subst pk2358@pk2356) (pk235c@old pk2357@pk2354)) (call-with-values (lambda () (pk218e@exclude* (cdr pk234d@sym*) pk235b@subst)) (lambda (pk2363@pk2360 pk2364@pk2362) (let ((pk2367@subst pk2364@pk2362) (pk2368@old* pk2363@pk2360)) (values (cons pk235c@old pk2368@old*) pk2367@subst))))))))))) (pk2190@find* (lambda (pk2345@sym* pk2346@subst) (map (lambda (pk2349@x) (let ((pk234b@t (assq pk2349@x pk2346@subst))) (if pk234b@t (cdr pk234b@t) (pke66@syntax-violation 'import '"cannot find identifier" pk2349@x)))) pk2345@sym*))) (pk2192@rem* (lambda (pk233d@sym* pk233e@subst) (let pk2343@f ((pk2341@subst pk233e@subst)) (if (null? pk2341@subst) '() (if (memq (caar pk2341@subst) pk233d@sym*) (pk2343@f (cdr pk2341@subst)) (cons (car pk2341@subst) (pk2343@f (cdr pk2341@subst)))))))) (pk2194@remove-dups (lambda (pk233b@ls) (if (null? pk233b@ls) '() (if (memq (car pk233b@ls) (cdr pk233b@ls)) (pk2194@remove-dups (cdr pk233b@ls)) (cons (car pk233b@ls) (pk2194@remove-dups (cdr pk233b@ls))))))) (pk2196@parse-library-name (lambda (pk2253@spec) (letrec* ((pk2256@subversion? (lambda (pk2337@x) (let ((pk2339@x (pke6c@syntax->datum pk2337@x))) (and (integer? pk2339@x) (exact? pk2339@x) (>= pk2339@x '0))))) (pk2258@subversion-pred (lambda (pk22d7@x*) (let ((pk22d9@t pk22d7@x*)) (let ((pk22db@ls/false (pkd86@syntax-dispatch pk22d9@t 'any))) (if (and pk22db@ls/false (apply (lambda (pk22dd@n) (pk2256@subversion? pk22dd@n)) pk22db@ls/false)) (apply (lambda (pk22df@n) (lambda (pk22e1@x) (= pk22e1@x (pke6c@syntax->datum pk22df@n)))) pk22db@ls/false) (let ((pk22e3@t pk22d9@t)) (let ((pk22e5@ls/false (pkd86@syntax-dispatch pk22e3@t '(any . each-any)))) (if (and pk22e5@ls/false (apply (lambda (pk22e7@p? pk22e8@sub*) (eq? (pke6c@syntax->datum pk22e7@p?) 'and)) pk22e5@ls/false)) (apply (lambda (pk22eb@p? pk22ec@sub*) (let ((pk22ef@p* (map pk2258@subversion-pred pk22ec@sub*))) (lambda (pk22f1@x) (for-all (lambda (pk22f3@p) (pk22f3@p pk22f1@x)) pk22ef@p*)))) pk22e5@ls/false) (let ((pk22f5@t pk22e3@t)) (let ((pk22f7@ls/false (pkd86@syntax-dispatch pk22f5@t '(any . each-any)))) (if (and pk22f7@ls/false (apply (lambda (pk22f9@p? pk22fa@sub*) (eq? (pke6c@syntax->datum pk22f9@p?) 'or)) pk22f7@ls/false)) (apply (lambda (pk22fd@p? pk22fe@sub*) (let ((pk2301@p* (map pk2258@subversion-pred pk22fe@sub*))) (lambda (pk2303@x) (exists (lambda (pk2305@p) (pk2305@p pk2303@x)) pk2301@p*)))) pk22f7@ls/false) (let ((pk2307@t pk22f5@t)) (let ((pk2309@ls/false (pkd86@syntax-dispatch pk2307@t '(any any)))) (if (and pk2309@ls/false (apply (lambda (pk230b@p? pk230c@sub) (eq? (pke6c@syntax->datum pk230b@p?) 'not)) pk2309@ls/false)) (apply (lambda (pk230f@p? pk2310@sub) (let ((pk2313@p (pk2258@subversion-pred pk2310@sub))) (lambda (pk2315@x) (not (pk2313@p pk2315@x))))) pk2309@ls/false) (let ((pk2317@t pk2307@t)) (let ((pk2319@ls/false (pkd86@syntax-dispatch pk2317@t '(any any)))) (if (and pk2319@ls/false (apply (lambda (pk231b@p? pk231c@n) (and (eq? (pke6c@syntax->datum pk231b@p?) '<=) (pk2256@subversion? pk231c@n))) pk2319@ls/false)) (apply (lambda (pk231f@p? pk2320@n) (lambda (pk2323@x) (<= pk2323@x (pke6c@syntax->datum pk2320@n)))) pk2319@ls/false) (let ((pk2325@t pk2317@t)) (let ((pk2327@ls/false (pkd86@syntax-dispatch pk2325@t '(any any)))) (if (and pk2327@ls/false (apply (lambda (pk2329@p? pk232a@n) (and (eq? (pke6c@syntax->datum pk2329@p?) '>=) (pk2256@subversion? pk232a@n))) pk2327@ls/false)) (apply (lambda (pk232d@p? pk232e@n) (lambda (pk2331@x) (>= pk2331@x (pke6c@syntax->datum pk232e@n)))) pk2327@ls/false) (let ((pk2333@t pk2325@t)) (let ((pk2335@ls/false (pkd86@syntax-dispatch pk2333@t '_))) (if pk2335@ls/false (apply (lambda () (pke66@syntax-violation 'import '"invalid sub-version spec" pk2253@spec pk22d7@x*)) pk2335@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk2333@t)))))))))))))))))))))))) (pk225a@version-pred (lambda (pk2287@x*) (let ((pk2289@t pk2287@x*)) (let ((pk228b@ls/false (pkd86@syntax-dispatch pk2289@t '()))) (if pk228b@ls/false (apply (lambda () (lambda (pk228d@x) '#t)) pk228b@ls/false) (let ((pk228f@t pk2289@t)) (let ((pk2291@ls/false (pkd86@syntax-dispatch pk228f@t '(any . each-any)))) (if (and pk2291@ls/false (apply (lambda (pk2293@c pk2294@ver*) (eq? (pke6c@syntax->datum pk2293@c) 'and)) pk2291@ls/false)) (apply (lambda (pk2297@c pk2298@ver*) (let ((pk229b@p* (map pk225a@version-pred pk2298@ver*))) (lambda (pk229d@x) (for-all (lambda (pk229f@p) (pk229f@p pk229d@x)) pk229b@p*)))) pk2291@ls/false) (let ((pk22a1@t pk228f@t)) (let ((pk22a3@ls/false (pkd86@syntax-dispatch pk22a1@t '(any . each-any)))) (if (and pk22a3@ls/false (apply (lambda (pk22a5@c pk22a6@ver*) (eq? (pke6c@syntax->datum pk22a5@c) 'or)) pk22a3@ls/false)) (apply (lambda (pk22a9@c pk22aa@ver*) (let ((pk22ad@p* (map pk225a@version-pred pk22aa@ver*))) (lambda (pk22af@x) (exists (lambda (pk22b1@p) (pk22b1@p pk22af@x)) pk22ad@p*)))) pk22a3@ls/false) (let ((pk22b3@t pk22a1@t)) (let ((pk22b5@ls/false (pkd86@syntax-dispatch pk22b3@t '(any any)))) (if (and pk22b5@ls/false (apply (lambda (pk22b7@c pk22b8@ver) (eq? (pke6c@syntax->datum pk22b7@c) 'not)) pk22b5@ls/false)) (apply (lambda (pk22bb@c pk22bc@ver) (let ((pk22bf@p (pk225a@version-pred pk22bc@ver))) (lambda (pk22c1@x) (not (pk22bf@p pk22c1@x))))) pk22b5@ls/false) (let ((pk22c3@t pk22b3@t)) (let ((pk22c5@ls/false (pkd86@syntax-dispatch pk22c3@t 'each-any))) (if pk22c5@ls/false (apply (lambda (pk22c7@sub*) (let ((pk22c9@p* (map pk2258@subversion-pred pk22c7@sub*))) (lambda (pk22cb@x) (let pk22d1@f ((pk22cd@p* pk22c9@p*) (pk22ce@x pk22cb@x)) (if (null? pk22cd@p*) '#t (if (null? pk22ce@x) '#f (and ((car pk22cd@p*) (car pk22ce@x)) (pk22d1@f (cdr pk22cd@p*) (cdr pk22ce@x))))))))) pk22c5@ls/false) (let ((pk22d3@t pk22c3@t)) (let ((pk22d5@ls/false (pkd86@syntax-dispatch pk22d3@t '_))) (if pk22d5@ls/false (apply (lambda () (pke66@syntax-violation 'import '"invalid version spec" pk2253@spec pk2287@x*)) pk22d5@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk22d3@t)))))))))))))))))))))) (let pk225d@f ((pk225b@x pk2253@spec)) (let ((pk225f@t pk225b@x)) (let ((pk2261@ls/false (pkd86@syntax-dispatch pk225f@t '(each-any)))) (if pk2261@ls/false (apply (lambda (pk2263@version-spec*) (values '() (pk225a@version-pred pk2263@version-spec*))) pk2261@ls/false) (let ((pk2265@t pk225f@t)) (let ((pk2267@ls/false (pkd86@syntax-dispatch pk2265@t '(any . any)))) (if (and pk2267@ls/false (apply (lambda (pk2269@x pk226a@x*) (pk2188@idsyn? pk2269@x)) pk2267@ls/false)) (apply (lambda (pk226d@x pk226e@x*) (call-with-values (lambda () (pk225d@f pk226e@x*)) (lambda (pk2275@pk2272 pk2276@pk2274) (let ((pk2279@pred pk2276@pk2274) (pk227a@name pk2275@pk2272)) (values (cons (pke6c@syntax->datum pk226d@x) pk227a@name) pk2279@pred))))) pk2267@ls/false) (let ((pk227d@t pk2265@t)) (let ((pk227f@ls/false (pkd86@syntax-dispatch pk227d@t '()))) (if pk227f@ls/false (apply (lambda () (values '() (lambda (pk2281@x) '#t))) pk227f@ls/false) (let ((pk2283@t pk227d@t)) (let ((pk2285@ls/false (pkd86@syntax-dispatch pk2283@t '_))) (if pk2285@ls/false (apply (lambda () (pke66@syntax-violation '#f '"invalid import spec" pk2253@spec)) pk2285@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk2283@t))))))))))))))))) (pk2198@import-library (lambda (pk2243@spec*) (call-with-values (lambda () (pk2196@parse-library-name pk2243@spec*)) (lambda (pk2249@pk2246 pk224a@pk2248) (let ((pk224d@pred pk224a@pk2248) (pk224e@name pk2249@pk2246)) (begin (if (null? pk224e@name) (pke66@syntax-violation 'import '"empty library name" pk2243@spec*) (void)) (let ((pk2251@lib (pk994@pk7db@find-library-by-name pk224e@name))) (begin (if (not pk2251@lib) (pke66@syntax-violation 'import '"cannot find library with required name" pk224e@name) (void)) (if (not (pk224d@pred (pk96e@pk78f@library-version pk2251@lib))) (pke66@syntax-violation 'import '"library does not satisfy version specification" pk2243@spec* pk2251@lib) (void)) ((pkdf2@imp-collector) pk2251@lib) (pk976@pk79f@library-subst pk2251@lib))))))))) (pk219a@get-import (lambda (pk21b5@spec) (let ((pk21b7@t pk21b5@spec)) (let ((pk21b9@ls/false (pkd86@syntax-dispatch pk21b7@t '(any . each-any)))) (if (and pk21b9@ls/false (apply (lambda (pk21bb@x pk21bc@x*) (not (memq (pke6c@syntax->datum pk21bb@x) '(for rename except only prefix library)))) pk21b9@ls/false)) (apply (lambda (pk21bf@x pk21c0@x*) (pk2198@import-library (cons pk21bf@x pk21c0@x*))) pk21b9@ls/false) (let ((pk21c3@t pk21b7@t)) (let ((pk21c5@ls/false (pkd86@syntax-dispatch pk21c3@t '(any any . #(each (any any)))))) (if (and pk21c5@ls/false (apply (lambda (pk21c7@rename pk21c8@isp pk21c9@old* pk21ca@new*) (and (eq? (pke6c@syntax->datum pk21c7@rename) 'rename) (for-all pk2188@idsyn? pk21c9@old*) (for-all pk2188@idsyn? pk21ca@new*))) pk21c5@ls/false)) (apply (lambda (pk21cf@rename pk21d0@isp pk21d1@old* pk21d2@new*) (let ((pk21d7@subst (pk219a@get-import pk21d0@isp)) (pk21d8@old* (map pke6c@syntax->datum pk21d1@old*)) (pk21d9@new* (map pke6c@syntax->datum pk21d2@new*))) (let ((pk21dd@old-label* (pk2190@find* pk21d8@old* pk21d7@subst))) (let ((pk21df@subst (pk2192@rem* pk21d8@old* pk21d7@subst))) (pk218c@merge-substs (map cons pk21d9@new* pk21dd@old-label*) pk21df@subst))))) pk21c5@ls/false) (let ((pk21e1@t pk21c3@t)) (let ((pk21e3@ls/false (pkd86@syntax-dispatch pk21e1@t '(any any . each-any)))) (if (and pk21e3@ls/false (apply (lambda (pk21e5@except pk21e6@isp pk21e7@sym*) (and (eq? (pke6c@syntax->datum pk21e5@except) 'except) (for-all pk2188@idsyn? pk21e7@sym*))) pk21e3@ls/false)) (apply (lambda (pk21eb@except pk21ec@isp pk21ed@sym*) (let ((pk21f1@subst (pk219a@get-import pk21ec@isp))) (pk2192@rem* (map pke6c@syntax->datum pk21ed@sym*) pk21f1@subst))) pk21e3@ls/false) (let ((pk21f3@t pk21e1@t)) (let ((pk21f5@ls/false (pkd86@syntax-dispatch pk21f3@t '(any any . each-any)))) (if (and pk21f5@ls/false (apply (lambda (pk21f7@only pk21f8@isp pk21f9@sym*) (and (eq? (pke6c@syntax->datum pk21f7@only) 'only) (for-all pk2188@idsyn? pk21f9@sym*))) pk21f5@ls/false)) (apply (lambda (pk21fd@only pk21fe@isp pk21ff@sym*) (let ((pk2203@subst (pk219a@get-import pk21fe@isp)) (pk2204@sym* (map pke6c@syntax->datum pk21ff@sym*))) (let ((pk2207@sym* (pk2194@remove-dups pk2204@sym*))) (let ((pk2209@lab* (pk2190@find* pk2207@sym* pk2203@subst))) (map cons pk2207@sym* pk2209@lab*))))) pk21f5@ls/false) (let ((pk220b@t pk21f3@t)) (let ((pk220d@ls/false (pkd86@syntax-dispatch pk220b@t '(any any any)))) (if (and pk220d@ls/false (apply (lambda (pk220f@prefix pk2210@isp pk2211@p) (and (eq? (pke6c@syntax->datum pk220f@prefix) 'prefix) (pk2188@idsyn? pk2211@p))) pk220d@ls/false)) (apply (lambda (pk2215@prefix pk2216@isp pk2217@p) (let ((pk221b@subst (pk219a@get-import pk2216@isp)) (pk221c@prefix (symbol->string (pke6c@syntax->datum pk2217@p)))) (map (lambda (pk221f@x) (cons (string->symbol (string-append pk221c@prefix (symbol->string (car pk221f@x)))) (cdr pk221f@x))) pk221b@subst))) pk220d@ls/false) (let ((pk2221@t pk220b@t)) (let ((pk2223@ls/false (pkd86@syntax-dispatch pk2221@t '(any each-any)))) (if (and pk2223@ls/false (apply (lambda (pk2225@library pk2226@spec*) (eq? (pke6c@syntax->datum pk2225@library) 'library)) pk2223@ls/false)) (apply (lambda (pk2229@library pk222a@spec*) (pk2198@import-library pk222a@spec*)) pk2223@ls/false) (let ((pk222d@t pk2221@t)) (let ((pk222f@ls/false (pkd86@syntax-dispatch pk222d@t '(any any . any)))) (if (and pk222f@ls/false (apply (lambda (pk2231@for pk2232@isp pk2233@rest) (eq? (pke6c@syntax->datum pk2231@for) 'for)) pk222f@ls/false)) (apply (lambda (pk2237@for pk2238@isp pk2239@rest) (pk219a@get-import pk2238@isp)) pk222f@ls/false) (let ((pk223d@t pk222d@t)) (let ((pk223f@ls/false (pkd86@syntax-dispatch pk223d@t 'any))) (if pk223f@ls/false (apply (lambda (pk2241@spec) (pke66@syntax-violation 'import '"invalid import spec" pk2241@spec)) pk223f@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk223d@t))))))))))))))))))))))))))) (pk219c@add-imports! (lambda (pk21a5@imp pk21a6@h) (let ((pk21a9@subst (pk219a@get-import pk21a5@imp))) (for-each (lambda (pk21ab@x) (let ((pk21ad@name (car pk21ab@x)) (pk21ae@label (cdr pk21ab@x))) (let ((pk21b1@t (hashtable-ref pk21a6@h pk21ad@name '#f))) (if pk21b1@t ((lambda (pk21b3@l) (if (not (eq? pk21b3@l pk21ae@label)) (pk218a@dup-error pk21ad@name) (void))) pk21b1@t) (hashtable-set! pk21a6@h pk21ad@name pk21ae@label))))) pk21a9@subst))))) (lambda (pk219d@imp*) (let pk21a3@f ((pk219f@imp* pk219d@imp*) (pk21a0@h (make-eq-hashtable))) (if (null? pk219f@imp*) (hashtable-entries pk21a0@h) (begin (pk219c@add-imports! (car pk219f@imp*) pk21a0@h) (pk21a3@f (cdr pk219f@imp*) pk21a0@h))))))) (set! pk28bf@pkde8@parse-import-spec* pkde8@parse-import-spec*) (set! pkdea@make-top-rib (lambda (pk2393@names pk2394@labels) (let ((pk2397@rib (pkb33@make-empty-rib))) (begin (vector-for-each (lambda (pk2399@name pk239a@label) (begin (if (not (symbol? pk2399@name)) (error 'make-top-rib '"BUG: not a symbol" pk2399@name) (void)) (pkb37@extend-rib/nc! pk2397@rib (make-simple-struct 'stx '5 (list pk2399@name pkb03@top-mark* '() '())) pk239a@label))) pk2393@names pk2394@labels) pk2397@rib)))) (set! pk28c0@pkdea@make-top-rib pkdea@make-top-rib) (set! pkdec@make-collector (lambda () (let ((pk239d@ls '())) (lambda pk23a1 (let ((pk23a2 (length pk23a1))) (if (= pk23a2 '0) (apply (lambda () pk239d@ls) pk23a1) (if (= pk23a2 '1) (apply (lambda (pk239f@x) (set! pk239d@ls (pkafc@set-cons pk239f@x pk239d@ls))) pk23a1) (error 'apply '"invalid arg count")))))))) (set! pk28c1@pkdec@make-collector pkdec@make-collector) (set! pkdee@inv-collector (pk6cf@pk5ad@make-parameter (lambda pk23a3@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (pk23a5@x) (begin (if (not (procedure? pk23a5@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" pk23a5@x) (void)) pk23a5@x)))) (set! pk28c2@pkdee@inv-collector pkdee@inv-collector) (set! pkdf0@vis-collector (pk6cf@pk5ad@make-parameter (lambda pk23a7@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (pk23a9@x) (begin (if (not (procedure? pk23a9@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" pk23a9@x) (void)) pk23a9@x)))) (set! pk28c3@pkdf0@vis-collector pkdf0@vis-collector) (set! pkdf2@imp-collector (pk6cf@pk5ad@make-parameter (lambda pk23ab@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (pk23ad@x) (begin (if (not (procedure? pk23ad@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" pk23ad@x) (void)) pk23ad@x)))) (set! pk28c4@pkdf2@imp-collector pkdf2@imp-collector) (set! pkdf4@chi-library-internal (lambda (pk23af@e* pk23b0@rib pk23b1@top?) (call-with-values (lambda () (pkdde@chi-body* pk23af@e* '() '() '() '() '() '() '() pk23b0@rib pk23b1@top?)) (lambda (pk23c5@pk23b6 pk23c6@pk23b8 pk23c7@pk23ba pk23c8@pk23bc pk23c9@pk23be pk23ca@pk23c0 pk23cb@pk23c2 pk23cc@pk23c4) (let ((pk23d5@exp* pk23cc@pk23c4) (pk23d6@_kwd* pk23cb@pk23c2) (pk23d7@mod** pk23ca@pk23c0) (pk23d8@rhs* pk23c9@pk23be) (pk23d9@lex* pk23c8@pk23bc) (pk23da@mr pk23c7@pk23ba) (pk23db@r pk23c6@pk23b8) (pk23dc@e* pk23c5@pk23b6)) (values (append (apply append (reverse pk23d7@mod**)) pk23dc@e*) pk23db@r pk23da@mr (reverse pk23d9@lex*) (reverse pk23d8@rhs*) pk23d5@exp*)))))) (set! pk28c5@pkdf4@chi-library-internal pkdf4@chi-library-internal) (set! pkdf6@chi-interaction-expr (lambda (pk23e5@e pk23e6@rib pk23e7@r) (call-with-values (lambda () (pkdde@chi-body* (list pk23e5@e) pk23e7@r pk23e7@r '() '() '() '() '() pk23e6@rib '#t)) (lambda (pk23fb@pk23ec pk23fc@pk23ee pk23fd@pk23f0 pk23fe@pk23f2 pk23ff@pk23f4 pk2400@pk23f6 pk2401@pk23f8 pk2402@pk23fa) (let ((pk240b@_exp* pk2402@pk23fa) (pk240c@_kwd* pk2401@pk23f8) (pk240d@mod** pk2400@pk23f6) (pk240e@rhs* pk23ff@pk23f4) (pk240f@lex* pk23fe@pk23f2) (pk2410@mr pk23fd@pk23f0) (pk2411@r pk23fc@pk23ee) (pk2412@e* pk23fb@pk23ec)) (let ((pk241b@e* (pkdb6@expand-interaction-rhs*/init* (reverse pk240f@lex*) (reverse pk240e@rhs*) (append (apply append (reverse pk240d@mod**)) pk2412@e*) pk2411@r pk2410@mr))) (let ((pk241d@e (if (null? pk241b@e*) (pkae5@pka46@build-void) (if (null? (cdr pk241b@e*)) (car pk241b@e*) (pkae4@pka44@build-sequence '#f pk241b@e*))))) (values pk241d@e pk2411@r)))))))) (set! pk28c6@pkdf6@chi-interaction-expr pkdf6@chi-interaction-expr) (set! pkdf8@library-body-expander (lambda (pk241f@name pk2420@main-exp* pk2421@imp* pk2422@b* pk2423@top?) (letrec* ((pk242a@itc (pkdec@make-collector))) (let ((pk2433@pk242c pkdf2@imp-collector) (pk2434@pk242e pke76@top-level-context) (pk2435@pk2430 pk242a@itc) (pk2436@pk2432 '#f)) (let ((pk243b@swap (lambda () (begin (let ((pk243d@t (pk2433@pk242c))) (begin (pk2433@pk242c pk2435@pk2430) (set! pk2435@pk2430 pk243d@t))) (let ((pk243f@t (pk2434@pk242e))) (begin (pk2434@pk242e pk2436@pk2432) (set! pk2436@pk2432 pk243f@t))))))) (dynamic-wind pk243b@swap (lambda () (call-with-values (lambda () (pkde8@parse-import-spec* pk2421@imp*)) (lambda (pk2445@pk2442 pk2446@pk2444) (let ((pk2449@subst-labels pk2446@pk2444) (pk244a@subst-names pk2445@pk2442)) (let ((pk244d@rib (pkdea@make-top-rib pk244a@subst-names pk2449@subst-labels))) (letrec* ((pk2450@wrap (lambda (pk24cb@x) (make-simple-struct 'stx '5 (list pk24cb@x pkb03@top-mark* (list pk244d@rib) '()))))) (let ((pk2451@b* (map pk2450@wrap pk2422@b*)) (pk2452@main-exp* (map pk2450@wrap pk2420@main-exp*)) (pk2453@rtc (pkdec@make-collector)) (pk2454@vtc (pkdec@make-collector))) (let ((pk2461@pk245a pkdee@inv-collector) (pk2462@pk245c pkdf0@vis-collector) (pk2463@pk245e pk2453@rtc) (pk2464@pk2460 pk2454@vtc)) (let ((pk2469@swap (lambda () (begin (let ((pk246b@t (pk2461@pk245a))) (begin (pk2461@pk245a pk2463@pk245e) (set! pk2463@pk245e pk246b@t))) (let ((pk246d@t (pk2462@pk245c))) (begin (pk2462@pk245c pk2464@pk2460) (set! pk2464@pk2460 pk246d@t))))))) (dynamic-wind pk2469@swap (lambda () (call-with-values (lambda () (pkdf4@chi-library-internal pk2451@b* pk244d@rib pk2423@top?)) (lambda (pk247b@pk2470 pk247c@pk2472 pk247d@pk2474 pk247e@pk2476 pk247f@pk2478 pk2480@pk247a) (let ((pk2487@internal-exp* pk2480@pk247a) (pk2488@rhs* pk247f@pk2478) (pk2489@lex* pk247e@pk2476) (pk248a@mr pk247d@pk2474) (pk248b@r pk247c@pk2472) (pk248c@init* pk247b@pk2470)) (call-with-values (lambda () (pkde2@parse-exports (append pk2452@main-exp* pk2487@internal-exp*))) (lambda (pk2497@pk2494 pk2498@pk2496) (let ((pk249b@exp-id* pk2498@pk2496) (pk249c@exp-name* pk2497@pk2494)) (begin (pkb3b@seal-rib! pk244d@rib) (let ((pk249f@init* (pkda4@chi-expr* pk248c@init* pk248b@r pk248a@mr))) (let ((pk24a1@rhs* (pkdb8@chi-rhs* pk2488@rhs* pk248b@r pk248a@mr))) (begin (pkb3d@unseal-rib! pk244d@rib) (let ((pk24a3@loc* (map pkb09@gen-global pk2489@lex*)) (pk24a4@export-subst (pke50@make-export-subst pk249c@exp-name* pk249b@exp-id*))) (letrec* ((pk24a8@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (pke52@make-export-env/macros pk2489@lex* pk24a3@loc* pk248b@r)) (lambda (pk24af@pk24aa pk24b0@pk24ac pk24b1@pk24ae) (let ((pk24b5@macro* pk24b1@pk24ae) (pk24b6@global* pk24b0@pk24ac) (pk24b7@export-env pk24af@pk24aa)) (begin (for-each (lambda (pk24bb@s) (let ((pk24bd@name (car pk24bb@s)) (pk24be@label (cdr pk24bb@s))) (let ((pk24c1@p (assq pk24be@label pk24b7@export-env))) (if pk24c1@p (let ((pk24c3@b (cdr pk24c1@p))) (let ((pk24c5@type (car pk24c3@b))) (if (eq? pk24c5@type 'mutable) (pke66@syntax-violation 'export pk24a8@errstr pk24bd@name) (void)))) (void))))) pk24a4@export-subst) (let ((pk24c7@invoke-body (pkaea@pka50@build-library-letrec* '#f pk241f@name pk2489@lex* pk24a3@loc* pk24a1@rhs* (if (null? pk249f@init*) (pkae5@pka46@build-void) (pkae4@pka44@build-sequence '#f pk249f@init*)))) (pk24c8@invoke-definitions (map pkae1@pk9a3@build-global-define (map cdr pk24b6@global*)))) (values (pk242a@itc) (pk2453@rtc) (pk2454@vtc) (pkae4@pka44@build-sequence '#f (append pk24c8@invoke-definitions (list pk24c7@invoke-body))) pk24b5@macro* pk24a4@export-subst pk24b7@export-env))))))))))))))))))) pk2469@swap)))))))))) pk243b@swap)))))) (set! pk28c7@pkdf8@library-body-expander pkdf8@library-body-expander) (set! pkdfa@core-library-expander (lambda (pk24cd@e pk24ce@verify-name) (call-with-values (lambda () (pkde6@parse-library pk24cd@e)) (lambda (pk24d9@pk24d2 pk24da@pk24d4 pk24db@pk24d6 pk24dc@pk24d8) (let ((pk24e1@b* pk24dc@pk24d8) (pk24e2@imp* pk24db@pk24d6) (pk24e3@exp* pk24da@pk24d4) (pk24e4@name* pk24d9@pk24d2)) (call-with-values (lambda () (pkde4@parse-library-name pk24e4@name*)) (lambda (pk24ed@pk24ea pk24ee@pk24ec) (let ((pk24f1@ver pk24ee@pk24ec) (pk24f2@name pk24ed@pk24ea)) (begin (pk24ce@verify-name pk24f2@name) (call-with-values (lambda () (pkdf8@library-body-expander pk24f2@name pk24e3@exp* pk24e2@imp* pk24e1@b* '#f)) (lambda (pk2503@pk24f6 pk2504@pk24f8 pk2505@pk24fa pk2506@pk24fc pk2507@pk24fe pk2508@pk2500 pk2509@pk2502) (let ((pk2511@export-env pk2509@pk2502) (pk2512@export-subst pk2508@pk2500) (pk2513@visit-code pk2507@pk24fe) (pk2514@invoke-code pk2506@pk24fc) (pk2515@visit-req* pk2505@pk24fa) (pk2516@invoke-req* pk2504@pk24f8) (pk2517@imp* pk2503@pk24f6)) (values pk24f2@name pk24f1@ver pk2517@imp* pk2516@invoke-req* pk2515@visit-req* pk2514@invoke-code pk2513@visit-code pk2512@export-subst pk2511@export-env))))))))))))) (set! pk28c8@pkdfa@core-library-expander pkdfa@core-library-expander) (set! pkdfc@parse-top-level-program (lambda (pk251f@e*) (let ((pk2521@t pk251f@e*)) (let ((pk2523@ls/false (pkd86@syntax-dispatch pk2521@t '((any . each-any) . each-any)))) (if (and pk2523@ls/false (apply (lambda (pk2525@import pk2526@imp* pk2527@b*) (eq? (pke6c@syntax->datum pk2525@import) 'import)) pk2523@ls/false)) (apply (lambda (pk252b@import pk252c@imp* pk252d@b*) (values pk252c@imp* pk252d@b*)) pk2523@ls/false) (let ((pk2531@t pk2521@t)) (let ((pk2533@ls/false (pkd86@syntax-dispatch pk2531@t '((any . any) . any)))) (if (and pk2533@ls/false (apply (lambda (pk2535@import pk2536@x pk2537@y) (eq? (pke6c@syntax->datum pk2535@import) 'import)) pk2533@ls/false)) (apply (lambda (pk253b@import pk253c@x pk253d@y) (pke66@syntax-violation 'expander '"invalid syntax of top-level program" (pkb79@syntax-car pk251f@e*))) pk2533@ls/false) (let ((pk2541@t pk2531@t)) (let ((pk2543@ls/false (pkd86@syntax-dispatch pk2541@t '_))) (if pk2543@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) pk2543@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk2541@t)))))))))))) (set! pk28c9@pkdfc@parse-top-level-program pkdfc@parse-top-level-program) (set! pkdfe@top-level-expander (lambda (pk2545@e*) (call-with-values (lambda () (pkdfc@parse-top-level-program pk2545@e*)) (lambda (pk254b@pk2548 pk254c@pk254a) (let ((pk254f@b* pk254c@pk254a) (pk2550@imp* pk254b@pk2548)) (call-with-values (lambda () (pkdf8@library-body-expander '() '() pk2550@imp* pk254f@b* '#t)) (lambda (pk2561@pk2554 pk2562@pk2556 pk2563@pk2558 pk2564@pk255a pk2565@pk255c pk2566@pk255e pk2567@pk2560) (let ((pk256f@export-env pk2567@pk2560) (pk2570@export-subst pk2566@pk255e) (pk2571@visit-code pk2565@pk255c) (pk2572@invoke-code pk2564@pk255a) (pk2573@visit-req* pk2563@pk2558) (pk2574@invoke-req* pk2562@pk2556) (pk2575@imp* pk2561@pk2554)) (values pk2574@invoke-req* pk2572@invoke-code))))))))) (set! pk28ca@pkdfe@top-level-expander pkdfe@top-level-expander) (set! pke00@rp (pk6cc@pk5a7@make-record-printer 'env (lambda (pk257d@x pk257e@p pk257f@wr) (display '"#<environment>" pk257e@p)))) (set! pk28cb@pke00@rp pke00@rp) (set! pke0a@env? (lambda (pk2583@x) (and (simple-struct? pk2583@x) (eq? (simple-struct-name pk2583@x) 'env)))) (set! pk28cc@pke0a@env? pke0a@env?) (set! pke0c@env-names (lambda (pk2585@x) (simple-struct-ref pk2585@x '0))) (set! pk28cd@pke0c@env-names pke0c@env-names) (set! pke0e@set-env-names! (lambda (pk2587@x pk2588@val) (simple-struct-set! pk2587@x '0 pk2588@val))) (set! pk28ce@pke0e@set-env-names! pke0e@set-env-names!) (set! pke10@env-labels (lambda (pk258b@x) (simple-struct-ref pk258b@x '1))) (set! pk28cf@pke10@env-labels pke10@env-labels) (set! pke12@set-env-labels! (lambda (pk258d@x pk258e@val) (simple-struct-set! pk258d@x '1 pk258e@val))) (set! pk28d0@pke12@set-env-labels! pke12@set-env-labels!) (set! pke14@env-itc (lambda (pk2591@x) (simple-struct-ref pk2591@x '2))) (set! pk28d1@pke14@env-itc pke14@env-itc) (set! pke16@set-env-itc! (lambda (pk2593@x pk2594@val) (simple-struct-set! pk2593@x '2 pk2594@val))) (set! pk28d2@pke16@set-env-itc! pke16@set-env-itc!) (set! pke18@dummy '3) (set! pk28d3@pke18@dummy pke18@dummy) (set! pke1a@rp (pk6cc@pk5a7@make-record-printer 'interaction-env (lambda (pk2597@x pk2598@p pk2599@wr) (display '"#<environment>" pk2598@p)))) (set! pk28d4@pke1a@rp pke1a@rp) (set! pke24@interaction-env? (lambda (pk259d@x) (and (simple-struct? pk259d@x) (eq? (simple-struct-name pk259d@x) 'interaction-env)))) (set! pk28d5@pke24@interaction-env? pke24@interaction-env?) (set! pke26@interaction-env-rib (lambda (pk259f@x) (simple-struct-ref pk259f@x '0))) (set! pk28d6@pke26@interaction-env-rib pke26@interaction-env-rib) (set! pke28@set-interaction-env-rib! (lambda (pk25a1@x pk25a2@val) (simple-struct-set! pk25a1@x '0 pk25a2@val))) (set! pk28d7@pke28@set-interaction-env-rib! pke28@set-interaction-env-rib!) (set! pke2a@interaction-env-r (lambda (pk25a5@x) (simple-struct-ref pk25a5@x '1))) (set! pk28d8@pke2a@interaction-env-r pke2a@interaction-env-r) (set! pke2c@set-interaction-env-r! (lambda (pk25a7@x pk25a8@val) (simple-struct-set! pk25a7@x '1 pk25a8@val))) (set! pk28d9@pke2c@set-interaction-env-r! pke2c@set-interaction-env-r!) (set! pke2e@interaction-env-locs (lambda (pk25ab@x) (simple-struct-ref pk25ab@x '2))) (set! pk28da@pke2e@interaction-env-locs pke2e@interaction-env-locs) (set! pke30@set-interaction-env-locs! (lambda (pk25ad@x pk25ae@val) (simple-struct-set! pk25ad@x '2 pk25ae@val))) (set! pk28db@pke30@set-interaction-env-locs! pke30@set-interaction-env-locs!) (set! pke32@dummy '3) (set! pk28dc@pke32@dummy pke32@dummy) (set! pke34@interaction-environment-symbols (lambda () (pke3c@environment-symbols (pke74@interaction-environment)))) (set! pk28dd@pke34@interaction-environment-symbols pke34@interaction-environment-symbols) (set! pke36@environment-bindings (lambda (pk25b1@e) (vector->list (vector-map (lambda (pk25b3@name pk25b4@label) (pke38@parse-binding (cons pk25b3@name (pk99a@pk7e7@imported-label->binding pk25b4@label)))) (pke0c@env-names pk25b1@e) (pke10@env-labels pk25b1@e))))) (set! pk28de@pke36@environment-bindings pke36@environment-bindings) (set! pke38@parse-binding (lambda (pk25b7@b) (cons (car pk25b7@b) (let ((pk25b9@t (cadr pk25b7@b))) (if (memv pk25b9@t '(core-prim global)) 'procedure (if (memv pk25b9@t '(core-macro macro global-macro)) 'syntax (if (memv pk25b9@t '($core-rtd)) 'record (if (eq? (car pk25b7@b) (cadr pk25b7@b)) 'syntax 'unknown)))))))) (set! pk28df@pke38@parse-binding pke38@parse-binding) (set! pke3a@environment? (lambda (pk25bb@x) (or (pke0a@env? pk25bb@x) (pke24@interaction-env? pk25bb@x)))) (set! pk28e0@pke3a@environment? pke3a@environment?) (set! pke3c@environment-symbols (lambda (pk25bd@x) (if (pke0a@env? pk25bd@x) (vector->list (pke0c@env-names pk25bd@x)) (if (pke24@interaction-env? pk25bd@x) (map values (pkb1d@rib-sym* (pke26@interaction-env-rib pk25bd@x))) (assertion-violation 'environment-symbols '"not an environment" pk25bd@x))))) (set! pk28e1@pke3c@environment-symbols pke3c@environment-symbols) (set! pke3e@environment (lambda pk25bf@imp* (let ((pk25c1@itc (pkdec@make-collector))) (let ((pk25c7@pk25c4 pkdf2@imp-collector) (pk25c8@pk25c6 pk25c1@itc)) (let ((pk25cb@swap (lambda () (let ((pk25cd@t (pk25c7@pk25c4))) (begin (pk25c7@pk25c4 pk25c8@pk25c6) (set! pk25c8@pk25c6 pk25cd@t)))))) (dynamic-wind pk25cb@swap (lambda () (call-with-values (lambda () (pkde8@parse-import-spec* pk25bf@imp*)) (lambda (pk25d3@pk25d0 pk25d4@pk25d2) (let ((pk25d7@subst-labels pk25d4@pk25d2) (pk25d8@subst-names pk25d3@pk25d0)) (make-simple-struct 'env '4 (list pk25d8@subst-names pk25d7@subst-labels pk25c1@itc)))))) pk25cb@swap)))))) (set! pk28e2@pke3e@environment pke3e@environment) (set! pke40@null-environment (lambda (pk25db@n) (begin (if (not (eqv? pk25db@n '5)) (assertion-violation 'null-environment '"not 5" pk25db@n) (void)) (pke3e@environment '(psyntax null-environment-5))))) (set! pk28e3@pke40@null-environment pke40@null-environment) (set! pke42@scheme-report-environment (lambda (pk25dd@n) (begin (if (not (eqv? pk25dd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" pk25dd@n) (void)) (pke3e@environment '(psyntax scheme-report-environment-5))))) (set! pk28e4@pke42@scheme-report-environment pke42@scheme-report-environment) (set! pke44@expand (lambda (pk25df@x pk25e0@env) (if (pke0a@env? pk25e0@env) (let ((pk25e3@rib (pkdea@make-top-rib (pke0c@env-names pk25e0@env) (pke10@env-labels pk25e0@env)))) (let ((pk25e5@x (make-simple-struct 'stx '5 (list pk25df@x pkb03@top-mark* (list pk25e3@rib) '()))) (pk25e6@itc (pke14@env-itc pk25e0@env)) (pk25e7@rtc (pkdec@make-collector)) (pk25e8@vtc (pkdec@make-collector))) (let ((pk25ed@x (let ((pk25ff@pk25f0 pke76@top-level-context) (pk2600@pk25f2 pkdee@inv-collector) (pk2601@pk25f4 pkdf0@vis-collector) (pk2602@pk25f6 pkdf2@imp-collector) (pk2603@pk25f8 '#f) (pk2604@pk25fa pk25e7@rtc) (pk2605@pk25fc pk25e8@vtc) (pk2606@pk25fe pk25e6@itc)) (let ((pk260f@swap (lambda () (begin (let ((pk2611@t (pk25ff@pk25f0))) (begin (pk25ff@pk25f0 pk2603@pk25f8) (set! pk2603@pk25f8 pk2611@t))) (let ((pk2613@t (pk2600@pk25f2))) (begin (pk2600@pk25f2 pk2604@pk25fa) (set! pk2604@pk25fa pk2613@t))) (let ((pk2615@t (pk2601@pk25f4))) (begin (pk2601@pk25f4 pk2605@pk25fc) (set! pk2605@pk25fc pk2615@t))) (let ((pk2617@t (pk2602@pk25f6))) (begin (pk2602@pk25f6 pk2606@pk25fe) (set! pk2606@pk25fe pk2617@t))))))) (dynamic-wind pk260f@swap (lambda () (pkda8@chi-expr pk25e5@x '() '())) pk260f@swap))))) (begin (pkb3b@seal-rib! pk25e3@rib) (values pk25ed@x (pk25e7@rtc)))))) (if (pke24@interaction-env? pk25e0@env) (let ((pk2619@rib (pke26@interaction-env-rib pk25e0@env)) (pk261a@r (pke2a@interaction-env-r pk25e0@env)) (pk261b@rtc (pkdec@make-collector))) (let ((pk261f@x (make-simple-struct 'stx '5 (list pk25df@x pkb03@top-mark* (list pk2619@rib) '())))) (call-with-values (lambda () (let ((pk2635@pk2626 pke76@top-level-context) (pk2636@pk2628 pkdee@inv-collector) (pk2637@pk262a pkdf0@vis-collector) (pk2638@pk262c pkdf2@imp-collector) (pk2639@pk262e pk25e0@env) (pk263a@pk2630 pk261b@rtc) (pk263b@pk2632 (pkdec@make-collector)) (pk263c@pk2634 (pkdec@make-collector))) (let ((pk2645@swap (lambda () (begin (let ((pk2647@t (pk2635@pk2626))) (begin (pk2635@pk2626 pk2639@pk262e) (set! pk2639@pk262e pk2647@t))) (let ((pk2649@t (pk2636@pk2628))) (begin (pk2636@pk2628 pk263a@pk2630) (set! pk263a@pk2630 pk2649@t))) (let ((pk264b@t (pk2637@pk262a))) (begin (pk2637@pk262a pk263b@pk2632) (set! pk263b@pk2632 pk264b@t))) (let ((pk264d@t (pk2638@pk262c))) (begin (pk2638@pk262c pk263c@pk2634) (set! pk263c@pk2634 pk264d@t))))))) (dynamic-wind pk2645@swap (lambda () (pkdf6@chi-interaction-expr pk261f@x pk2619@rib pk261a@r)) pk2645@swap)))) (lambda (pk264f@pk2622 pk2650@pk2624) (let ((pk2653@r^ pk2650@pk2624) (pk2654@e pk264f@pk2622)) (begin (pke2c@set-interaction-env-r! pk25e0@env pk2653@r^) (values pk2654@e (pk261b@rtc)))))))) (assertion-violation 'expand '"not an environment" pk25e0@env))))) (set! pk28e5@pke44@expand pke44@expand) (set! pke46@eval (lambda (pk2657@x pk2658@env) (begin (if (not (pke3a@environment? pk2658@env)) (error 'eval '"not an environment" pk2658@env) (void)) (call-with-values (lambda () (pke44@expand pk2657@x pk2658@env)) (lambda (pk265f@pk265c pk2660@pk265e) (let ((pk2663@invoke-req* pk2660@pk265e) (pk2664@x pk265f@pk265c)) (begin (for-each pk99b@pk7e9@invoke-library pk2663@invoke-req*) (eval-core (pk725@pk6dd@expanded->core pk2664@x))))))))) (set! pk28e6@pke46@eval pke46@eval) (set! pke48@library-expander (lambda pk26d5 (let ((pk26d6 (length pk26d5))) (if (= pk26d6 '3) (apply (lambda (pk2667@x pk2668@filename pk2669@verify-name) (letrec* ((pk266e@build-visit-code (lambda (pk26c3@macro*) (if (null? pk26c3@macro*) (pkae5@pka46@build-void) (pkae4@pka44@build-sequence '#f (map (lambda (pk26c5@x) (let ((pk26c7@loc (car pk26c5@x)) (pk26c8@src (cddr pk26c5@x))) (list 'set! pk26c7@loc pk26c8@src))) pk26c3@macro*))))) (pk2670@visit! (lambda (pk26bb@macro*) (for-each (lambda (pk26bd@x) (let ((pk26bf@loc (car pk26bd@x)) (pk26c0@proc (cadr pk26bd@x))) (set-symbol-value! pk26bf@loc pk26c0@proc))) pk26bb@macro*)))) (call-with-values (lambda () (pkdfa@core-library-expander pk2667@x pk2669@verify-name)) (lambda (pk2683@pk2672 pk2684@pk2674 pk2685@pk2676 pk2686@pk2678 pk2687@pk267a pk2688@pk267c pk2689@pk267e pk268a@pk2680 pk268b@pk2682) (let ((pk2695@export-env pk268b@pk2682) (pk2696@export-subst pk268a@pk2680) (pk2697@macro* pk2689@pk267e) (pk2698@invoke-code pk2688@pk267c) (pk2699@vis* pk2687@pk267a) (pk269a@inv* pk2686@pk2678) (pk269b@imp* pk2685@pk2676) (pk269c@ver pk2684@pk2674) (pk269d@name pk2683@pk2672)) (let ((pk26a7@id (gensym)) (pk26a8@name pk269d@name) (pk26a9@ver pk269c@ver) (pk26aa@imp* (map pk99f@pk7f1@library-spec pk269b@imp*)) (pk26ab@vis* (map pk99f@pk7f1@library-spec pk2699@vis*)) (pk26ac@inv* (map pk99f@pk7f1@library-spec pk269a@inv*)) (pk26ad@visit-proc (lambda () (pk2670@visit! pk2697@macro*))) (pk26ae@invoke-proc (lambda () (eval-core (pk725@pk6dd@expanded->core pk2698@invoke-code)))) (pk26af@visit-code (pk266e@build-visit-code pk2697@macro*)) (pk26b0@invoke-code pk2698@invoke-code)) (begin (pk999@pk7e5@install-library pk26a7@id pk26a8@name pk26a9@ver pk26aa@imp* pk26ab@vis* pk26ac@inv* pk2696@export-subst pk2695@export-env pk26ad@visit-proc pk26ae@invoke-proc pk26af@visit-code pk26b0@invoke-code '#t pk2668@filename) (values pk26a7@id pk26a8@name pk26a9@ver pk26aa@imp* pk26ab@vis* pk26ac@inv* pk26b0@invoke-code pk26af@visit-code pk2696@export-subst pk2695@export-env)))))))) pk26d5) (if (= pk26d6 '2) (apply (lambda (pk26cb@x pk26cc@filename) (pke48@library-expander pk26cb@x pk26cc@filename (lambda (pk26cf@x) (values)))) pk26d5) (if (= pk26d6 '1) (apply (lambda (pk26d1@x) (pke48@library-expander pk26d1@x '#f (lambda (pk26d3@x) (values)))) pk26d5) (error 'apply '"invalid arg count"))))))) (set! pk28e7@pke48@library-expander pke48@library-expander) (set! pke4a@boot-library-expand (lambda (pk26d7@x) (call-with-values (lambda () (pke48@library-expander pk26d7@x)) (lambda (pk26ed@pk26da pk26ee@pk26dc pk26ef@pk26de pk26f0@pk26e0 pk26f1@pk26e2 pk26f2@pk26e4 pk26f3@pk26e6 pk26f4@pk26e8 pk26f5@pk26ea pk26f6@pk26ec) (let ((pk2701@export-env pk26f6@pk26ec) (pk2702@export-subst pk26f5@pk26ea) (pk2703@visit-code pk26f4@pk26e8) (pk2704@invoke-code pk26f3@pk26e6) (pk2705@inv* pk26f2@pk26e4) (pk2706@vis* pk26f1@pk26e2) (pk2707@imp* pk26f0@pk26e0) (pk2708@ver pk26ef@pk26de) (pk2709@name pk26ee@pk26dc) (pk270a@id pk26ed@pk26da)) (values pk2709@name pk2704@invoke-code pk2702@export-subst pk2701@export-env)))))) (set! pk28e8@pke4a@boot-library-expand pke4a@boot-library-expand) (set! pke4c@rev-map-append (lambda (pk2715@f pk2716@ls pk2717@ac) (if (null? pk2716@ls) pk2717@ac (pke4c@rev-map-append pk2715@f (cdr pk2716@ls) (cons (pk2715@f (car pk2716@ls)) pk2717@ac))))) (set! pk28e9@pke4c@rev-map-append pke4c@rev-map-append) (set! pke4e@build-exports (lambda (pk271b@lex*+loc* pk271c@init*) (pkae4@pka44@build-sequence '#f (cons (pkae5@pka46@build-void) (pke4c@rev-map-append (lambda (pk271f@x) (list 'set! (cdr pk271f@x) (car pk271f@x))) pk271b@lex*+loc* pk271c@init*))))) (set! pk28ea@pke4e@build-exports pke4e@build-exports) (set! pke50@make-export-subst (lambda (pk2721@name* pk2722@id*) (map (lambda (pk2725@name pk2726@id) (let ((pk2729@label (pkb95@id->label pk2726@id))) (begin (if (not pk2729@label) (pke66@syntax-violation '#f '"cannot export unbound identifier" pk2726@id) (void)) (cons pk2725@name pk2729@label)))) pk2721@name* pk2722@id*))) (set! pk28eb@pke50@make-export-subst pke50@make-export-subst) (set! pke52@make-export-env/macros (lambda (pk272b@lex* pk272c@loc* pk272d@r) (letrec* ((pk2732@lookup (lambda (pk274f@x) (let pk2757@f ((pk2751@x pk274f@x) (pk2752@lex* pk272b@lex*) (pk2753@loc* pk272c@loc*)) (if (pair? pk2752@lex*) (if (eq? pk2751@x (car pk2752@lex*)) (car pk2753@loc*) (pk2757@f pk2751@x (cdr pk2752@lex*) (cdr pk2753@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let pk273b@f ((pk2733@r pk272d@r) (pk2734@env '()) (pk2735@global* '()) (pk2736@macro* '())) (if (null? pk2733@r) (values pk2734@env pk2735@global* pk2736@macro*) (let ((pk273d@x (car pk2733@r))) (let ((pk273f@label (car pk273d@x)) (pk2740@b (cdr pk273d@x))) (let ((pk2743@t (pkb9b@binding-type pk2740@b))) (if (memv pk2743@t '(lexical)) (let ((pk2745@v (pkb9d@binding-value pk2740@b))) (let ((pk2747@loc (pk2732@lookup (pkd10@lexical-var pk2745@v))) (pk2748@type (if (pkd12@lexical-mutable? pk2745@v) 'mutable 'global))) (pk273b@f (cdr pk2733@r) (cons (cons* pk273f@label pk2748@type pk2747@loc) pk2734@env) (cons (cons (pkd10@lexical-var pk2745@v) pk2747@loc) pk2735@global*) pk2736@macro*))) (if (memv pk2743@t '(local-macro)) (let ((pk274b@loc (gensym))) (pk273b@f (cdr pk2733@r) (cons (cons* pk273f@label 'global-macro pk274b@loc) pk2734@env) pk2735@global* (cons (cons pk274b@loc (pkb9d@binding-value pk2740@b)) pk2736@macro*))) (if (memv pk2743@t '(local-macro!)) (let ((pk274d@loc (gensym))) (pk273b@f (cdr pk2733@r) (cons (cons* pk273f@label 'global-macro! pk274d@loc) pk2734@env) pk2735@global* (cons (cons pk274d@loc (pkb9d@binding-value pk2740@b)) pk2736@macro*))) (if (memv pk2743@t '($rtd $module)) (pk273b@f (cdr pk2733@r) (cons pk273d@x pk2734@env) pk2735@global* pk2736@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (pkb9b@binding-type pk2740@b) (pkb9d@binding-value pk2740@b)))))))))))))) (set! pk28ec@pke52@make-export-env/macros pke52@make-export-env/macros) (set! pke54@generate-temporaries (lambda (pk2759@ls) (let ((pk275b@t pk2759@ls)) (let ((pk275d@ls/false (pkd86@syntax-dispatch pk275b@t 'each-any))) (if pk275d@ls/false (apply (lambda (pk275f@ls) (map (lambda (pk2761@x) (make-simple-struct 'stx '5 (list (let ((pk2763@x (pke6c@syntax->datum pk2761@x))) (if (or (symbol? pk2763@x) (string? pk2763@x)) (gensym pk2763@x) (gensym 't))) pkb03@top-mark* '() '()))) pk275f@ls)) pk275d@ls/false) (let ((pk2765@t pk275b@t)) (let ((pk2767@ls/false (pkd86@syntax-dispatch pk2765@t '_))) (if pk2767@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) pk2767@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk2765@t))))))))) (set! pk28ed@pke54@generate-temporaries pke54@generate-temporaries) (set! pke56@free-identifier=? (lambda (pk2769@x pk276a@y) (if (pkb7f@id? pk2769@x) (if (pkb7f@id? pk276a@y) (pkb85@free-id=? pk2769@x pk276a@y) (assertion-violation 'free-identifier=? '"not an identifier" pk276a@y)) (assertion-violation 'free-identifier=? '"not an identifier" pk2769@x)))) (set! pk28ee@pke56@free-identifier=? pke56@free-identifier=?) (set! pke58@bound-identifier=? (lambda (pk276d@x pk276e@y) (if (pkb7f@id? pk276d@x) (if (pkb7f@id? pk276e@y) (pkb83@bound-id=? pk276d@x pk276e@y) (assertion-violation 'bound-identifier=? '"not an identifier" pk276e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" pk276d@x)))) (set! pk28ef@pke58@bound-identifier=? pke58@bound-identifier=?) (set! pke5a@make-source-condition (lambda (pk2771@x) (letrec* ((pk277b@pk2776 (make-record-type-descriptor '&source-information &condition-rtd 'pk2779 '#f '#f '#((immutable file-name) (immutable line)))) (pk277d@pk2778 '#f) (pk277f@pk2777 (make-record-constructor-descriptor pk277b@pk2776 &condition-rcd pk277d@pk2778)) (pk2782@pk2775 (record-predicate pk277b@pk2776)) (pk2784@make-source-condition (record-constructor pk277f@pk2777)) (pk2786@pk2773 (record-accessor pk277b@pk2776 '0)) (pk2788@pk2774 (record-accessor pk277b@pk2776 '1)) (pk278a@source-condition? (condition-predicate pk277b@pk2776)) (pk278c@source-filename (condition-accessor pk277b@pk2776 pk2786@pk2773)) (pk278e@source-character (condition-accessor pk277b@pk2776 pk2788@pk2774))) (if (and (pair? pk2771@x) (pair? (cdr pk2771@x))) (pk2784@make-source-condition (car pk2771@x) (cadr pk2771@x)) (condition))))) (set! pk28f0@pke5a@make-source-condition pke5a@make-source-condition) (set! pke5c@extract-position-condition (lambda (pk278f@x) (pke5a@make-source-condition (pke5e@expression-position pk278f@x)))) (set! pk28f1@pke5c@extract-position-condition pke5c@extract-position-condition) (set! pke5e@expression-position (lambda (pk2791@x) (and (pkb4b@stx? pk2791@x) (let ((pk2793@x (pkb4d@stx-expr pk2791@x))) (and (pk6c3@pk595@annotation? pk2793@x) (pk6c4@pk597@annotation-source pk2793@x)))))) (set! pk28f2@pke5e@expression-position pke5e@expression-position) (set! pke60@assertion-error (lambda (pk2795@expr pk2796@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list pk2795@expr)) (pke5a@make-source-condition pk2796@pos))))) (set! pk28f3@pke60@assertion-error pke60@assertion-error) (set! pke62@syntax-error (lambda (pk2799@x . pk279b@args) (begin (if (not (for-all string? pk279b@args)) (assertion-violation 'syntax-error '"invalid argument" pk279b@args) (void)) (raise (condition (make-message-condition (if (null? pk279b@args) '"invalid syntax" (apply string-append pk279b@args))) (make-syntax-violation (pke6c@syntax->datum pk2799@x) '#f) (pke5c@extract-position-condition pk2799@x)))))) (set! pk28f4@pke62@syntax-error pke62@syntax-error) (set! pke64@syntax-violation* (lambda (pk279d@who pk279e@msg pk279f@form pk27a0@condition-object) (begin (if (not (string? pk279e@msg)) (assertion-violation 'syntax-violation '"message is not a string" pk279e@msg) (void)) (let ((pk27a5@who (if (or (string? pk279d@who) (symbol? pk279d@who)) pk279d@who (if (not pk279d@who) (let ((pk27a7@t pk279f@form)) (let ((pk27a9@ls/false (pkd86@syntax-dispatch pk27a7@t 'any))) (if (and pk27a9@ls/false (apply (lambda (pk27ab@id) (pkb7f@id? pk27ab@id)) pk27a9@ls/false)) (apply (lambda (pk27ad@id) (pke6c@syntax->datum pk27ad@id)) pk27a9@ls/false) (let ((pk27af@t pk27a7@t)) (let ((pk27b1@ls/false (pkd86@syntax-dispatch pk27af@t '(any . any)))) (if (and pk27b1@ls/false (apply (lambda (pk27b3@id pk27b4@rest) (pkb7f@id? pk27b3@id)) pk27b1@ls/false)) (apply (lambda (pk27b7@id pk27b8@rest) (pke6c@syntax->datum pk27b7@id)) pk27b1@ls/false) (let ((pk27bb@t pk27af@t)) (let ((pk27bd@ls/false (pkd86@syntax-dispatch pk27bb@t '_))) (if pk27bd@ls/false (apply (lambda () '#f) pk27bd@ls/false) (pke66@syntax-violation '#f '"invalid syntax" pk27bb@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" pk279d@who))))) (raise (condition (if pk27a5@who (make-who-condition pk27a5@who) (condition)) (make-message-condition pk279e@msg) pk27a0@condition-object (pke5c@extract-position-condition pk279f@form))))))) (set! pk28f5@pke64@syntax-violation* pke64@syntax-violation*) (set! pke66@syntax-violation (lambda pk27cd (let ((pk27ce (length pk27cd))) (if (= pk27ce '3) (apply (lambda (pk27bf@who pk27c0@msg pk27c1@form) (pke66@syntax-violation pk27bf@who pk27c0@msg pk27c1@form '#f)) pk27cd) (if (= pk27ce '4) (apply (lambda (pk27c5@who pk27c6@msg pk27c7@form pk27c8@subform) (pke64@syntax-violation* pk27c5@who pk27c6@msg pk27c7@form (make-syntax-violation (pke6c@syntax->datum pk27c7@form) (pke6c@syntax->datum pk27c8@subform)))) pk27cd) (error 'apply '"invalid arg count")))))) (set! pk28f6@pke66@syntax-violation pke66@syntax-violation) (set! pke68@identifier? (lambda (pk27cf@x) (pkb7f@id? pk27cf@x))) (set! pk28f7@pke68@identifier? pke68@identifier?) (set! pke6a@datum->syntax (lambda (pk27d1@id pk27d2@datum) (if (pkb7f@id? pk27d1@id) (pkb5f@datum->stx pk27d1@id pk27d2@datum) (assertion-violation 'datum->syntax '"not an identifier" pk27d1@id)))) (set! pk28f8@pke6a@datum->syntax pke6a@datum->syntax) (set! pke6c@syntax->datum (lambda (pk27d5@x) (pkb93@stx->datum pk27d5@x))) (set! pk28f9@pke6c@syntax->datum pke6c@syntax->datum) (set! pke6e@ungensym-all (lambda (pk27d7@code) (if (pair? pk27d7@code) (cons (pke6e@ungensym-all (car pk27d7@code)) (pke6e@ungensym-all (cdr pk27d7@code))) (if (symbol? pk27d7@code) (ungensym pk27d7@code) pk27d7@code)))) (set! pk28fa@pke6e@ungensym-all pke6e@ungensym-all) (set! pke70@compile-r6rs-top-level (lambda (pk27d9@x*) (call-with-values (lambda () (pkdfe@top-level-expander pk27d9@x*)) (lambda (pk27df@pk27dc pk27e0@pk27de) (let ((pk27e3@invoke-code pk27e0@pk27de) (pk27e4@lib* pk27df@pk27dc)) (lambda () (begin (for-each pk99b@pk7e9@invoke-library pk27e4@lib*) (let ((pk27e7@expanded (pk725@pk6dd@expanded->core pk27e3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (pke6e@ungensym-all pk27e7@expanded)) (void)) (eval-core pk27e7@expanded)))))))))) (set! pk28fb@pke70@compile-r6rs-top-level pke70@compile-r6rs-top-level) (set! pke72@pre-compile-r6rs-top-level (lambda (pk27e9@x*) (call-with-values (lambda () (pkdfe@top-level-expander pk27e9@x*)) (lambda (pk27ef@pk27ec pk27f0@pk27ee) (let ((pk27f3@invoke-code pk27f0@pk27ee) (pk27f4@lib* pk27ef@pk27ec)) (begin (for-each pk99b@pk7e9@invoke-library pk27f4@lib*) (pk6cd@pk5a9@compile-core (pk725@pk6dd@expanded->core pk27f3@invoke-code)))))))) (set! pk28fc@pke72@pre-compile-r6rs-top-level pke72@pre-compile-r6rs-top-level) (set! pke74@interaction-environment (let ((pk27f7@the-env '#f)) (lambda () (or pk27f7@the-env (let ((pk27f9@lib (pk994@pk7db@find-library-by-name '(mosh interaction))) (pk27fa@rib (pkb33@make-empty-rib))) (begin (let ((pk27fd@subst (pk976@pk79f@library-subst pk27f9@lib))) (begin (pkb1f@set-rib-sym*! pk27fa@rib (map car pk27fd@subst)) (pkb23@set-rib-mark**! pk27fa@rib (map (lambda (pk27ff@x) pkb03@top-mark*) pk27fd@subst)) (pkb27@set-rib-label*! pk27fa@rib (map cdr pk27fd@subst)))) (let ((pk2801@env (make-simple-struct 'interaction-env '4 (list pk27fa@rib '() '())))) (begin (set! pk27f7@the-env pk2801@env) pk2801@env)))))))) (set! pk28fd@pke74@interaction-environment pke74@interaction-environment) (set! pke76@top-level-context (pk6cf@pk5ad@make-parameter '#f)) (set! pk28fe@pke76@top-level-context pke76@top-level-context) (pk991@pk7d5@current-library-expander pke48@library-expander))
(begin (begin (pk722@pk6d7@current-primitive-locations (lambda (pk2e5b@x) (let ((pk2e5d@t (assq pk2e5b@x '((syntax-error . pk28f4@pke62@syntax-error) (syntax-dispatch . pk2892@pkd86@syntax-dispatch) (load . pk2a7e@pk2925@load) (interaction-environment . pk28fd@pke74@interaction-environment) (library-path . pk989@pk7c5@library-path) (mosh-cache-dir . pk6d0@pk5af@mosh-cache-dir) (make-parameter . pk6cf@pk5ad@make-parameter) (make-variable-transformer . pk284f@pkbb1@make-variable-transformer) (identifier? . pk28f7@pke68@identifier?) (generate-temporaries . pk28ed@pke54@generate-temporaries) (free-identifier=? . pk28ee@pke56@free-identifier=?) (syntax->datum . pk28f9@pke6c@syntax->datum) (datum->syntax . pk28f8@pke6a@datum->syntax) (bound-identifier=? . pk28ef@pke58@bound-identifier=?) (scheme-report-environment . pk28e4@pke42@scheme-report-environment) (null-environment . pk28e3@pke40@null-environment) (command-line . pk2a7b@pk291f@command-line) (eval . pk28e6@pke46@eval) (environment . pk28e2@pke3e@environment) (syntax-violation . pk28f6@pke66@syntax-violation) (assertion-error . pk28f3@pke60@assertion-error))))) (if pk2e5d@t (cdr pk2e5d@t) '#f)))) (pk999@pk7e5@install-library 'pk2e38 '(mosh interaction) '() '() '() '() '((regexp? . pk2df8) (alist->eq-hash-table . pk2df4) (format . pk2df1) (string-split . pk2ddf) (%call-process . pk2dd8) (set-current-directory! . pk2dd4) (expand-path . pk2dd3) (current-directory . pk2dd2) (%getpid . pk2dd1) (%spawn . pk2dd0) (%waitpid . pk2dcf) (simple-struct-name . pk2dce) (simple-struct-set! . pk2dcd) (simple-struct-ref . pk2dcc) (make-simple-struct . pk2dcb) (simple-struct? . pk2dca) (pointer-ref-c-int64 . pk2dc9) (pointer-ref-c-int32 . pk2dc8) (pointer-ref-c-int16 . pk2dc7) (pointer-ref-c-int8 . pk2dc6) (pointer-ref-c-uint64 . pk2dc5) (pointer-ref-c-uint32 . pk2dc4) (pointer-ref-c-uint16 . pk2dc3) (pointer-ref-c-uint8 . pk2dc2) (pointer-set-c-uint64! . pk2dc1) (pointer-set-c-uint32! . pk2dc0) (pointer-set-c-uint16! . pk2dbf) (pointer-set-c-uint8! . pk2dbe) (pointer-set-c-int64! . pk2dbd) (pointer-set-c-int32! . pk2dbc) (pointer-set-c-int16! . pk2dbb) (pointer-set-c-int8! . pk2dba) (pointer-set-c-pointer! . pk2db9) (pointer-set-c-double! . pk2db8) (pointer-set-c-float! . pk2db7) (pointer-set-c-long-long! . pk2db6) (pointer-set-c-long! . pk2db5) (pointer-set-c-int! . pk2db4) (pointer-set-c-short! . pk2db3) (pointer-set-c-char! . pk2db2) (pointer-ref-c-pointer . pk2db1) (pointer-ref-c-double . pk2db0) (pointer-ref-c-float . pk2daf) (pointer-ref-c-unsigned-long-long . pk2dae) (pointer-ref-c-signed-long-long . pk2dad) (pointer-ref-c-unsigned-long . pk2dac) (pointer-ref-c-signed-long . pk2dab) (pointer-ref-c-unsigned-int . pk2daa) (pointer-ref-c-signed-int . pk2da9) (pointer-ref-c-unsigned-short . pk2da8) (pointer-ref-c-signed-short . pk2da7) (pointer-ref-c-unsigned-char . pk2da6) (pointer-ref-c-signed-char . pk2da5) (pointer->integer . pk2da4) (integer->pointer . pk2da3) (pointer? . pk2da2) (shared-errno . pk2da1) (%ffi-supported? . pk2d9c) (%ffi-pointer->string . pk2d9b) (%ffi-call . pk2d9a) (%ffi-lookup . pk2d99) (%ffi-open . pk2d98) (null-terminated-utf8->string . pk2d97) (null-terminated-bytevector->string . pk2d96) (%exec . pk2d95) (%fork . pk2d94) (%pipe . pk2d93) (p . pk2d92) (whereis . pk2d76) (register . pk2d75) (vm-join! . pk2d74) (vm-set-value! . pk2d73) (vm? . pk2d72) (main-vm? . pk2d71) (vm-eval . pk2d70) (vm-self . pk2d6f) (vm-start! . pk2d6e) (make-vm . pk2d6d) (mutex-try-lock! . pk2d6c) (mutex-unlock! . pk2d6b) (mutex-lock! . pk2d6a) (mutex? . pk2d69) (make-mutex . pk2d68) (condition-variable-notify-all! . pk2d67) (condition-variable-notify! . pk2d66) (condition-variable-wait! . pk2d65) (make-condition-variable . pk2d64) (write/ss . pk2d63) (string-upcase . pk2d46) (string-titlecase . pk2d45) (string-normalize-nfkd . pk2d44) (string-normalize-nfkc . pk2d43) (string-normalize-nfd . pk2d42) (string-normalize-nfc . pk2d41) (string-foldcase . pk2d40) (string-downcase . pk2d3f) (string-ci>? . pk2d3e) (string-ci>=? . pk2d3d) (string-ci=? . pk2d3c) (string-ci<? . pk2d3b) (string-ci<=? . pk2d3a) (char-whitespace? . pk2d39) (char-upper-case? . pk2d38) (char-title-case? . pk2d37) (char-numeric? . pk2d36) (char-lower-case? . pk2d35) (char-general-category . pk2d34) (char-upcase . pk2d33) (char-titlecase . pk2d32) (char-foldcase . pk2d31) (char-downcase . pk2d30) (char-ci>? . pk2d2f) (char-ci>=? . pk2d2e) (char-ci=? . pk2d2d) (char-ci<? . pk2d2c) (char-ci<=? . pk2d2b) (char-alphabetic? . pk2d2a) (make-variable-transformer . pkbb0) (identifier? . pke67) (generate-temporaries . pke53) (free-identifier=? . pke55) (syntax->datum . pke6b) (datum->syntax . pke69) (bound-identifier=? . pke57) (record-type-descriptor? . pk2d29) (record-predicate . pk2d28) (record-mutator . pk2d27) (record-constructor . pk2d26) (record-accessor . pk2d25) (make-record-type-descriptor . pk2d24) (make-record-constructor-descriptor . pk2d23) (record? . pk2d22) (record-type-uid . pk2d21) (record-type-sealed? . pk2d20) (record-type-parent . pk2d1f) (record-type-opaque? . pk2d1e) (record-type-name . pk2d1d) (record-type-generative? . pk2d1c) (record-type-field-names . pk2d1b) (record-rtd . pk2d1a) (record-field-mutable? . pk2d19) (delete-file . pk2d18) (file-exists? . pk2d17) (vector-sort! . pk2d16) (vector-sort . pk2d15) (list-sort . pk2d14) (symbol-hash . pk2d13) (string-ci-hash . pk2d12) (string-hash . pk2d11) (equal-hash . pk2d10) (hashtable-equivalence-function . pk2d0f) (make-hashtable . pk2d0e) (hashtable-hash-function . pk2d0d) (make-eqv-hashtable . pk2d0c) (make-eq-hashtable . pk2d0b) (hashtable? . pk2d0a) (hashtable-update! . pk2d09) (hashtable-size . pk2d08) (hashtable-set! . pk2d07) (hashtable-ref . pk2d06) (hashtable-mutable? . pk2d05) (hashtable-keys . pk2d04) (hashtable-entries . pk2d03) (hashtable-delete! . pk2d02) (hashtable-copy . pk2d01) (hashtable-contains? . pk2d00) (hashtable-clear! . pk2cff) (call-with-output-file . pk2cfe) (call-with-input-file . pk2cfd) (write-char . pk2cfc) (write . pk2cfb) (with-output-to-file . pk2cfa) (with-input-from-file . pk2cf9) (read-char . pk2cf8) (read . pk2cf7) (peek-char . pk2cf6) (open-output-file . pk2cf5) (open-input-file . pk2cf4) (newline . pk2cf3) (display . pk2cf2) (close-output-port . pk2cf1) (close-input-port . pk2cf0) (eof-object? . pk2cef) (eof-object . pk2cee) (current-error-port . pk2ced) (current-output-port . pk2cec) (current-input-port . pk2ceb) (output-port? . pk2cea) (input-port? . pk2ce9) (utf-8-codec . pk2ce8) (utf-16-codec . pk2ce7) (transcoder-error-handling-mode . pk2ce6) (transcoder-eol-style . pk2ce5) (transcoder-codec . pk2ce4) (transcoded-port . pk2ce3) (textual-port? . pk2ce2) (string->bytevector . pk2ce1) (standard-output-port . pk2ce0) (standard-input-port . pk2cdf) (standard-error-port . pk2cde) (set-port-position! . pk2cdd) (put-u8 . pk2cdc) (put-string . pk2cdb) (put-datum . pk2cda) (put-char . pk2cd9) (put-bytevector . pk2cd8) (port? . pk2cd7) (port-transcoder . pk2cd6) (port-position . pk2cd5) (port-has-set-port-position!? . pk2cd4) (port-has-port-position? . pk2cd3) (port-eof? . pk2cd2) (output-port-buffer-mode . pk2cd1) (open-string-output-port . pk2cd0) (open-string-input-port . pk2ccf) (open-file-output-port . pk2cce) (open-file-input/output-port . pk2ccd) (open-file-input-port . pk2ccc) (open-bytevector-output-port . pk2ccb) (open-bytevector-input-port . pk2cca) (native-transcoder . pk2cc9) (native-eol-style . pk2cc8) (make-transcoder . pk2cc7) (latin-1-codec . pk2cc6) (make-i/o-write-error . pk2cc5) (make-i/o-read-error . pk2cc4) (make-i/o-port-error . pk2cc3) (make-i/o-invalid-position-error . pk2cc2) (make-i/o-filename-error . pk2cc1) (make-i/o-file-protection-error . pk2cc0) (make-i/o-file-is-read-only-error . pk2cbf) (make-i/o-file-does-not-exist-error . pk2cbe) (make-i/o-file-already-exists-error . pk2cbd) (make-i/o-error . pk2cbc) (make-i/o-encoding-error . pk2cbb) (make-i/o-decoding-error . pk2cba) (make-custom-textual-output-port . pk2cb9) (make-custom-textual-input/output-port . pk2cb8) (make-custom-textual-input-port . pk2cb7) (make-custom-binary-output-port . pk2cb6) (make-custom-binary-input/output-port . pk2cb5) (make-custom-binary-input-port . pk2cb4) (make-bytevector . pk2cb3) (lookahead-u8 . pk2cb2) (lookahead-char . pk2cb1) (i/o-write-error? . pk2cb0) (i/o-read-error? . pk2caf) (i/o-port-error? . pk2cae) (i/o-invalid-position-error? . pk2cad) (i/o-filename-error? . pk2cac) (i/o-file-protection-error? . pk2cab) (i/o-file-is-read-only-error? . pk2caa) (i/o-file-does-not-exist-error? . pk2ca9) (i/o-file-already-exists-error? . pk2ca8) (i/o-error? . pk2ca7) (i/o-error-position . pk2ca6) (i/o-error-port . pk2ca5) (i/o-error-filename . pk2ca4) (i/o-encoding-error? . pk2ca3) (i/o-encoding-error-char . pk2ca2) (i/o-decoding-error? . pk2ca1) (get-u8 . pk2ca0) (get-string-n! . pk2c9f) (get-string-n . pk2c9e) (get-string-all . pk2c9d) (get-line . pk2c9c) (get-datum . pk2c9b) (get-char . pk2c9a) (get-bytevector-some . pk2c99) (get-bytevector-n! . pk2c98) (get-bytevector-n . pk2c97) (get-bytevector-all . pk2c96) (flush-output-port . pk2c95) (close-port . pk2c94) (exit . pk2c8c) (command-line . pk291e) (string-fill! . pk2c8b) (string-set! . pk2c8a) (set-cdr! . pk2c89) (set-car! . pk2c88) (remove . pk2c87) (remv . pk2c86) (remp . pk2c85) (remq . pk2c84) (partition . pk2c83) (memv . pk2c82) (memq . pk2c81) (memp . pk2c80) (member . pk2c7f) (exists . pk2c7e) (for-all . pk2c7d) (fold-right . pk2c7c) (fold-left . pk2c7b) (find . pk2c7a) (filter . pk2c79) (cons* . pk2c78) (assv . pk2c77) (assq . pk2c76) (assp . pk2c75) (assoc . pk2c74) (call-with-string-output-port . pk2c73) (call-with-port . pk2c72) (call-with-bytevector-output-port . pk2c71) (bytevector->string . pk2c70) (buffer-mode? . pk2c6f) (binary-port? . pk2c6e) (with-exception-handler . pk2c6d) (raise-continuable . pk2c6c) (raise . pk2c6b) (eval . pke45) (environment . pke3d) (make-enumeration . pk2c6a) (enum-set=? . pk2c69) (enum-set-universe . pk2c68) (enum-set-union . pk2c67) (enum-set-subset? . pk2c66) (enum-set-projection . pk2c65) (enum-set-member? . pk2c64) (enum-set-intersection . pk2c63) (enum-set-indexer . pk2c62) (enum-set-difference . pk2c61) (enum-set-constructor . pk2c60) (enum-set-complement . pk2c5f) (enum-set->list . pk2c5e) (who-condition? . pk2c5d) (warning? . pk2c5c) (violation? . pk2c5b) (undefined-violation? . pk2c5a) (syntax-violation? . pk2c59) (syntax-violation-subform . pk2c58) (syntax-violation-form . pk2c57) (syntax-violation . pke65) (simple-conditions . pk2c56) (serious-condition? . pk2c55) (non-continuable-violation? . pk2c54) (message-condition? . pk2c53) (make-who-condition . pk2c52) (make-warning . pk2c51) (make-violation . pk2c50) (make-undefined-violation . pk2c4f) (make-syntax-violation . pk2c4e) (make-serious-condition . pk2c4d) (make-non-continuable-violation . pk2c4c) (make-message-condition . pk2c4b) (make-lexical-violation . pk2c4a) (make-irritants-condition . pk2c49) (make-implementation-restriction-violation . pk2c48) (make-error . pk2c47) (make-assertion-violation . pk2c46) (lexical-violation? . pk2c45) (irritants-condition? . pk2c44) (implementation-restriction-violation? . pk2c43) (error? . pk2c42) (condition-who . pk2c41) (condition-predicate . pk2c40) (condition-message . pk2c3f) (condition-irritants . pk2c3e) (condition-accessor . pk2c3d) (condition . pk2c3c) (assertion-violation? . pk2c3b) (condition? . pk2c3a) (utf32->string . pk2c39) (utf16->string . pk2c38) (utf8->string . pk2c37) (uint-list->bytevector . pk2c36) (u8-list->bytevector . pk2c35) (string->utf8 . pk2c34) (string->utf32 . pk2c33) (string->utf16 . pk2c32) (sint-list->bytevector . pk2c31) (native-endianness . pk2c30) (bytevector? . pk2c2f) (bytevector=? . pk2c2e) (bytevector-uint-set! . pk2c2d) (bytevector-uint-ref . pk2c2c) (bytevector-u8-set! . pk2c2b) (bytevector-u8-ref . pk2c2a) (bytevector-u64-set! . pk2c29) (bytevector-u64-ref . pk2c28) (bytevector-u64-native-set! . pk2c27) (bytevector-u64-native-ref . pk2c26) (bytevector-u32-set! . pk2c25) (bytevector-u32-ref . pk2c24) (bytevector-u32-native-set! . pk2c23) (bytevector-u32-native-ref . pk2c22) (bytevector-u16-set! . pk2c21) (bytevector-u16-ref . pk2c20) (bytevector-u16-native-set! . pk2c1f) (bytevector-u16-native-ref . pk2c1e) (bytevector-sint-set! . pk2c1d) (bytevector-sint-ref . pk2c1c) (bytevector-s8-set! . pk2c1b) (bytevector-s8-ref . pk2c1a) (bytevector-s64-set! . pk2c19) (bytevector-s64-ref . pk2c18) (bytevector-s64-native-set! . pk2c17) (bytevector-s64-native-ref . pk2c16) (bytevector-s32-set! . pk2c15) (bytevector-s32-ref . pk2c14) (bytevector-s32-native-set! . pk2c13) (bytevector-s32-native-ref . pk2c12) (bytevector-s16-set! . pk2c11) (bytevector-s16-ref . pk2c10) (bytevector-s16-native-set! . pk2c0f) (bytevector-s16-native-ref . pk2c0e) (bytevector-length . pk2c0d) (bytevector-ieee-single-ref . pk2c0c) (bytevector-ieee-single-set! . pk2c0b) (bytevector-ieee-single-native-set! . pk2c0a) (bytevector-ieee-single-native-ref . pk2c09) (bytevector-ieee-double-set! . pk2c08) (bytevector-ieee-double-ref . pk2c07) (bytevector-ieee-double-native-set! . pk2c06) (bytevector-ieee-double-native-ref . pk2c05) (bytevector-fill! . pk2c04) (bytevector-copy! . pk2c03) (bytevector-copy . pk2c02) (bytevector->uint-list . pk2c01) (bytevector->u8-list . pk2c00) (bytevector->sint-list . pk2bff) (no-nans-violation? . pk2bfe) (no-infinities-violation? . pk2bfd) (make-no-nans-violation . pk2bfc) (make-no-infinities-violation . pk2bfb) (real->flonum . pk2bfa) (flzero? . pk2bf9) (fltruncate . pk2bf8) (fltan . pk2bf7) (flsqrt . pk2bf6) (flsin . pk2bf5) (flround . pk2bf4) (flpositive? . pk2bf3) (flonum? . pk2bf2) (flodd? . pk2bf1) (flnumerator . pk2bf0) (flnegative? . pk2bef) (flnan? . pk2bee) (flmod0 . pk2bed) (flmod . pk2bec) (flmin . pk2beb) (flmax . pk2bea) (fllog . pk2be9) (flinteger? . pk2be8) (flinfinite? . pk2be7) (flfloor . pk2be6) (flfinite? . pk2be5) (flexpt . pk2be4) (flexp . pk2be3) (fleven? . pk2be2) (fldiv0-and-mod0 . pk2be1) (fldiv0 . pk2be0) (fldiv-and-mod . pk2bdf) (fldiv . pk2bde) (fldenominator . pk2bdd) (flcos . pk2bdc) (flceiling . pk2bdb) (flatan . pk2bda) (flasin . pk2bd9) (flacos . pk2bd8) (flabs . pk2bd7) (fl>? . pk2bd6) (fl>=? . pk2bd5) (fl=? . pk2bd4) (fl<? . pk2bd3) (fl<=? . pk2bd2) (fl/ . pk2bd1) (fl- . pk2bd0) (fl+ . pk2bcf) (fl* . pk2bce) (fixnum->flonum . pk2bcd) (fxzero? . pk2bcc) (fxxor . pk2bcb) (fxrotate-bit-field . pk2bca) (fxreverse-bit-field . pk2bc9) (fxpositive? . pk2bc8) (fxodd? . pk2bc7) (fxnot . pk2bc6) (fxnegative? . pk2bc5) (fxmod0 . pk2bc4) (fxmod . pk2bc3) (fxmin . pk2bc2) (fxmax . pk2bc1) (fxlength . pk2bc0) (fxior . pk2bbf) (fxif . pk2bbe) (fxfirst-bit-set . pk2bbd) (fxeven? . pk2bbc) (fxdiv0-and-mod0 . pk2bbb) (fxdiv0 . pk2bba) (fxdiv-and-mod . pk2bb9) (fxdiv . pk2bb8) (fxcopy-bit-field . pk2bb7) (fxcopy-bit . pk2bb6) (fxbit-set? . pk2bb5) (fxbit-field . pk2bb4) (fxbit-count . pk2bb3) (fxarithmetic-shift-right . pk2bb2) (fxarithmetic-shift-left . pk2bb1) (fxarithmetic-shift . pk2bb0) (fxand . pk2baf) (fx>? . pk2bae) (fx>=? . pk2bad) (fx=? . pk2bac) (fx<? . pk2bab) (fx<=? . pk2baa) (fx-/carry . pk2ba9) (fx- . pk2ba8) (fx+/carry . pk2ba7) (fx+ . pk2ba6) (fx*/carry . pk2ba5) (fx* . pk2ba4) (greatest-fixnum . pk2ba3) (least-fixnum . pk2ba2) (fixnum-width . pk2ba1) (fixnum? . pk2ba0) (bitwise-rotate-bit-field . pk2b9f) (bitwise-reverse-bit-field . pk2b9e) (bitwise-length . pk2b9d) (bitwise-if . pk2b9c) (bitwise-first-bit-set . pk2b9b) (bitwise-copy-bit-field . pk2b9a) (bitwise-copy-bit . pk2b99) (bitwise-bit-set? . pk2b98) (bitwise-bit-field . pk2b97) (bitwise-bit-count . pk2b96) (bitwise-xor . pk2b95) (bitwise-ior . pk2b94) (bitwise-and . pk2b93) (bitwise-not . pk2b92) (bitwise-arithmetic-shift-right . pk2b91) (bitwise-arithmetic-shift-left . pk2b90) (bitwise-arithmetic-shift . pk2b8f) (zero? . pk2b8e) (vector? . pk2b8d) (vector-set! . pk2b8c) (vector-ref . pk2b8b) (vector-map . pk2b8a) (vector-length . pk2b89) (vector-for-each . pk2b88) (vector-fill! . pk2b87) (vector->list . pk2b86) (vector . pk2b85) (values . pk2b84) (truncate . pk2b83) (tan . pk2b82) (symbol? . pk2b81) (symbol=? . pk2b80) (symbol->string . pk2b7f) (substring . pk2b7e) (string? . pk2b7d) (string>? . pk2b7c) (string>=? . pk2b7b) (string=? . pk2b7a) (string<? . pk2b79) (string<=? . pk2b78) (string-ref . pk2b77) (string-length . pk2b76) (string-for-each . pk2b75) (string-copy . pk2b74) (string-append . pk2b73) (string->symbol . pk2b72) (string->number . pk2b71) (string->list . pk2b70) (string . pk2b6f) (sqrt . pk2b6e) (sin . pk2b6d) (round . pk2b6c) (reverse . pk2b6b) (real? . pk2b6a) (real-valued? . pk2b69) (real-part . pk2b68) (rationalize . pk2b67) (rational? . pk2b66) (rational-valued? . pk2b65) (procedure? . pk2b64) (positive? . pk2b63) (pair? . pk2b62) (odd? . pk2b61) (numerator . pk2b60) (number? . pk2b5f) (number->string . pk2b5e) (null? . pk2b5d) (not . pk2b5c) (negative? . pk2b5b) (nan? . pk2b5a) (min . pk2b59) (max . pk2b58) (map . pk2b57) (make-vector . pk2b56) (make-string . pk2b55) (make-rectangular . pk2b54) (make-polar . pk2b53) (magnitude . pk2b52) (log . pk2b51) (list? . pk2b50) (list-tail . pk2b4f) (list-ref . pk2b4e) (list->vector . pk2b4d) (list->string . pk2b4c) (list . pk2b4b) (length . pk2b4a) (lcm . pk2b49) (integer? . pk2b48) (integer-valued? . pk2b47) (integer->char . pk2b46) (infinite? . pk2b45) (inexact? . pk2b44) (inexact . pk2b43) (imag-part . pk2b42) (gcd . pk2b41) (for-each . pk2b40) (floor . pk2b3f) (finite? . pk2b3e) (expt . pk2b3d) (exp . pk2b3c) (exact? . pk2b3b) (exact-integer-sqrt . pk2b3a) (exact . pk2b39) (even? . pk2b38) (error . pk2b37) (eqv? . pk2b36) (equal? . pk2b35) (eq? . pk2b34) (dynamic-wind . pk2b33) (div0-and-mod0 . pk2b32) (mod0 . pk2b31) (div0 . pk2b30) (div-and-mod . pk2b2f) (mod . pk2b2e) (div . pk2b2d) (denominator . pk2b2c) (cos . pk2b2b) (cons . pk2b2a) (complex? . pk2b29) (char? . pk2b28) (char>? . pk2b27) (char>=? . pk2b26) (char=? . pk2b25) (char<? . pk2b24) (char<=? . pk2b23) (char->integer . pk2b22) (ceiling . pk2b21) (call-with-values . pk2b20) (call/cc . pk2b1f) (call-with-current-continuation . pk2b1e) (cddddr . pk2b1d) (cdddar . pk2b1c) (cddadr . pk2b1b) (cddaar . pk2b1a) (cdaddr . pk2b19) (cdadar . pk2b18) (cdaadr . pk2b17) (cdaaar . pk2b16) (cadddr . pk2b15) (caddar . pk2b14) (cadadr . pk2b13) (cadaar . pk2b12) (caaddr . pk2b11) (caadar . pk2b10) (caaadr . pk2b0f) (caaaar . pk2b0e) (cdddr . pk2b0d) (cddar . pk2b0c) (cdadr . pk2b0b) (cdaar . pk2b0a) (caddr . pk2b09) (cadar . pk2b08) (caadr . pk2b07) (caaar . pk2b06) (cddr . pk2b05) (cdar . pk2b04) (cadr . pk2b03) (caar . pk2b02) (cdr . pk2b01) (car . pk2b00) (boolean? . pk2aff) (boolean=? . pk2afe) (atan . pk2afd) (assertion-violation . pk2afc) (asin . pk2afb) (apply . pk2afa) (append . pk2af9) (angle . pk2af8) (acos . pk2af7) (abs . pk2af6) (/ . pk2af5) (* . pk2af4) (- . pk2af3) (+ . pk2af2) (>= . pk2af1) (> . pk2af0) (= . pk2aef) (<= . pk2aee) (< . pk2aed) (library . pk2aec) (&no-nans . pk2aeb) (&no-infinities . pk2aea) (&i/o-encoding . pk2ae9) (&i/o-decoding . pk2ae8) (&i/o-port . pk2ae7) (&i/o-file-does-not-exist . pk2ae6) (&i/o-file-already-exists . pk2ae5) (&i/o-file-is-read-only . pk2ae4) (&i/o-file-protection . pk2ae3) (&i/o-filename . pk2ae2) (&i/o-invalid-position . pk2ae1) (&i/o-write . pk2ae0) (&i/o-read . pk2adf) (&i/o . pk2ade) (&undefined . pk2add) (&syntax . pk2adc) (&lexical . pk2adb) (&implementation-restriction . pk2ada) (&non-continuable . pk2ad9) (&who . pk2ad8) (&irritants . pk2ad7) (&assertion . pk2ad6) (&violation . pk2ad5) (&error . pk2ad4) (&serious . pk2ad3) (&warning . pk2ad2) (&message . pk2ad1) (&condition . pk2ad0) (define-condition-type . pk2acf) (define-enumeration . pk2ace) (define-record-type . pk2acd) (parent-rtd . pk2acc) (nongenerative . pk2acb) (opaque . pk2aca) (sealed . pk2ac9) (protocol . pk2ac8) (parent . pk2ac7) (immutable . pk2ac6) (mutable . pk2ac5) (fields . pk2ac4) (error-handling-mode . pk2ac3) (file-options . pk2ac2) (buffer-mode . pk2ac1) (eol-style . pk2ac0) (guard . pk2abf) (unsyntax-splicing . pk2abc) (unsyntax . pk2abb) (unquote-splicing . pk2aba) (unquote . pk2ab9) (_ . pk2ab8) (else . pk2ab7) (=> . pk2ab6) (... . pk2ab5) (assert . pk2ab4) (endianness . pk2ab3) (time . pk2ab1) (do . pk2ab0) (cond . pk2aaf) (let* . pk2aae) (let*-values . pk2aad) (let-values . pk2aac) (identifier-syntax . pk2aab) (with-syntax . pk2aaa) (quasisyntax . pk2aa9) (quasiquote . pk2aa8) (syntax-rules . pk2aa7) (include . pk2aa6) (record-constructor-descriptor . pk2aa4) (record-type-descriptor . pk2aa3) (case . pk2aa2) (unless . pk2aa0) (when . pk2a9f) (or . pk2a9e) (and . pk2a9d) (if . pk2a9c) (let . pk2a9b) (letrec* . pk2a9a) (letrec . pk2a99) (case-lambda . pk2a97) (lambda . pk2a96) (syntax . pk2a95) (syntax-case . pk2a94) (quote . pk2a93) (letrec-syntax . pk2a91) (let-syntax . pk2a90) (set! . pk2a8f) (import . pk2a8e) (begin . pk2a8d) (define-syntax . pk2a8b) (define . pk2a8a)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e39 '(psyntax null-environment-5) '() '() '() '() '((make-promise . pk2c8d) (unquote-splicing . pk2aba) (unquote . pk2ab9) (_ . pk2ab8) (else . pk2ab7) (=> . pk2ab6) (... . pk2ab5) (delay . pk2ab2) (do . pk2ab0) (cond . pk2aaf) (let* . pk2aae) (quasiquote . pk2aa8) (syntax-rules . pk2aa7) (case . pk2aa2) (or . pk2a9e) (and . pk2a9d) (if . pk2a9c) (let . pk2a9b) (letrec . pk2a99) (lambda . pk2a96) (quote . pk2a93) (letrec-syntax . pk2a91) (let-syntax . pk2a90) (set! . pk2a8f) (begin . pk2a8d) (define-syntax . pk2a8b) (define . pk2a8a)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e3a '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . pk2d3e) (string-ci>=? . pk2d3d) (string-ci=? . pk2d3c) (string-ci<? . pk2d3b) (string-ci<=? . pk2d3a) (char-whitespace? . pk2d39) (char-upper-case? . pk2d38) (char-numeric? . pk2d36) (char-lower-case? . pk2d35) (char-upcase . pk2d33) (char-downcase . pk2d30) (char-ci>? . pk2d2f) (char-ci>=? . pk2d2e) (char-ci=? . pk2d2d) (char-ci<? . pk2d2c) (char-ci<=? . pk2d2b) (char-alphabetic? . pk2d2a) (call-with-output-file . pk2cfe) (call-with-input-file . pk2cfd) (write-char . pk2cfc) (write . pk2cfb) (with-output-to-file . pk2cfa) (with-input-from-file . pk2cf9) (read-char . pk2cf8) (read . pk2cf7) (peek-char . pk2cf6) (open-output-file . pk2cf5) (open-input-file . pk2cf4) (newline . pk2cf3) (display . pk2cf2) (close-output-port . pk2cf1) (close-input-port . pk2cf0) (eof-object . pk2cee) (current-output-port . pk2cec) (current-input-port . pk2ceb) (output-port? . pk2cea) (input-port? . pk2ce9) (scheme-report-environment . pke41) (quotient . pk2c93) (null-environment . pke3f) (remainder . pk2c92) (modulo . pk2c91) (inexact->exact . pk2c90) (force . pk2c8f) (exact->inexact . pk2c8e) (make-promise . pk2c8d) (string-fill! . pk2c8b) (string-set! . pk2c8a) (set-cdr! . pk2c89) (set-car! . pk2c88) (memv . pk2c82) (memq . pk2c81) (member . pk2c7f) (assv . pk2c77) (assq . pk2c76) (assoc . pk2c74) (eval . pke45) (zero? . pk2b8e) (vector? . pk2b8d) (vector-set! . pk2b8c) (vector-ref . pk2b8b) (vector-length . pk2b89) (vector-fill! . pk2b87) (vector->list . pk2b86) (vector . pk2b85) (values . pk2b84) (truncate . pk2b83) (tan . pk2b82) (symbol? . pk2b81) (symbol->string . pk2b7f) (substring . pk2b7e) (string? . pk2b7d) (string>? . pk2b7c) (string>=? . pk2b7b) (string=? . pk2b7a) (string<? . pk2b79) (string<=? . pk2b78) (string-ref . pk2b77) (string-length . pk2b76) (string-copy . pk2b74) (string-append . pk2b73) (string->symbol . pk2b72) (string->number . pk2b71) (string->list . pk2b70) (string . pk2b6f) (sqrt . pk2b6e) (sin . pk2b6d) (round . pk2b6c) (reverse . pk2b6b) (real? . pk2b6a) (real-part . pk2b68) (rationalize . pk2b67) (rational? . pk2b66) (procedure? . pk2b64) (positive? . pk2b63) (pair? . pk2b62) (odd? . pk2b61) (numerator . pk2b60) (number? . pk2b5f) (number->string . pk2b5e) (not . pk2b5c) (negative? . pk2b5b) (min . pk2b59) (max . pk2b58) (map . pk2b57) (make-vector . pk2b56) (make-string . pk2b55) (make-rectangular . pk2b54) (make-polar . pk2b53) (magnitude . pk2b52) (log . pk2b51) (list? . pk2b50) (list-tail . pk2b4f) (list-ref . pk2b4e) (list->vector . pk2b4d) (list->string . pk2b4c) (list . pk2b4b) (length . pk2b4a) (lcm . pk2b49) (integer? . pk2b48) (integer->char . pk2b46) (inexact? . pk2b44) (imag-part . pk2b42) (gcd . pk2b41) (for-each . pk2b40) (floor . pk2b3f) (expt . pk2b3d) (exp . pk2b3c) (exact? . pk2b3b) (even? . pk2b38) (eqv? . pk2b36) (equal? . pk2b35) (eq? . pk2b34) (dynamic-wind . pk2b33) (denominator . pk2b2c) (cos . pk2b2b) (cons . pk2b2a) (complex? . pk2b29) (char? . pk2b28) (char>? . pk2b27) (char>=? . pk2b26) (char=? . pk2b25) (char<? . pk2b24) (char<=? . pk2b23) (char->integer . pk2b22) (ceiling . pk2b21) (call-with-values . pk2b20) (call-with-current-continuation . pk2b1e) (cddddr . pk2b1d) (cdddar . pk2b1c) (cddadr . pk2b1b) (cddaar . pk2b1a) (cdaddr . pk2b19) (cdadar . pk2b18) (cdaadr . pk2b17) (cdaaar . pk2b16) (cadddr . pk2b15) (caddar . pk2b14) (cadadr . pk2b13) (cadaar . pk2b12) (caaddr . pk2b11) (caadar . pk2b10) (caaadr . pk2b0f) (caaaar . pk2b0e) (cdddr . pk2b0d) (cddar . pk2b0c) (cdadr . pk2b0b) (cdaar . pk2b0a) (caddr . pk2b09) (cadar . pk2b08) (caadr . pk2b07) (caaar . pk2b06) (cddr . pk2b05) (cdar . pk2b04) (cadr . pk2b03) (caar . pk2b02) (cdr . pk2b01) (car . pk2b00) (boolean? . pk2aff) (atan . pk2afd) (asin . pk2afb) (apply . pk2afa) (append . pk2af9) (angle . pk2af8) (acos . pk2af7) (abs . pk2af6) (/ . pk2af5) (* . pk2af4) (- . pk2af3) (+ . pk2af2) (>= . pk2af1) (> . pk2af0) (= . pk2aef) (<= . pk2aee) (< . pk2aed) (unquote-splicing . pk2aba) (unquote . pk2ab9) (else . pk2ab7) (=> . pk2ab6) (... . pk2ab5) (delay . pk2ab2) (do . pk2ab0) (cond . pk2aaf) (let* . pk2aae) (quasiquote . pk2aa8) (syntax-rules . pk2aa7) (case . pk2aa2) (or . pk2a9e) (and . pk2a9d) (if . pk2a9c) (let . pk2a9b) (letrec . pk2a99) (lambda . pk2a96) (quote . pk2a93) (letrec-syntax . pk2a91) (let-syntax . pk2a90) (set! . pk2a8f) (begin . pk2a8d) (define-syntax . pk2a8b) (define . pk2a8a)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e3b '(psyntax modules) '() '() '() '() '((module . pk2a8c)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e3c '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e3d '(rnrs) '(6) '() '() '() '((regexp? . pk2df8) (string-upcase . pk2d46) (string-titlecase . pk2d45) (string-normalize-nfkd . pk2d44) (string-normalize-nfkc . pk2d43) (string-normalize-nfd . pk2d42) (string-normalize-nfc . pk2d41) (string-foldcase . pk2d40) (string-downcase . pk2d3f) (string-ci>? . pk2d3e) (string-ci>=? . pk2d3d) (string-ci=? . pk2d3c) (string-ci<? . pk2d3b) (string-ci<=? . pk2d3a) (char-whitespace? . pk2d39) (char-upper-case? . pk2d38) (char-title-case? . pk2d37) (char-numeric? . pk2d36) (char-lower-case? . pk2d35) (char-general-category . pk2d34) (char-upcase . pk2d33) (char-titlecase . pk2d32) (char-foldcase . pk2d31) (char-downcase . pk2d30) (char-ci>? . pk2d2f) (char-ci>=? . pk2d2e) (char-ci=? . pk2d2d) (char-ci<? . pk2d2c) (char-ci<=? . pk2d2b) (char-alphabetic? . pk2d2a) (make-variable-transformer . pkbb0) (identifier? . pke67) (generate-temporaries . pke53) (free-identifier=? . pke55) (syntax->datum . pke6b) (datum->syntax . pke69) (bound-identifier=? . pke57) (record-type-descriptor? . pk2d29) (record-predicate . pk2d28) (record-mutator . pk2d27) (record-constructor . pk2d26) (record-accessor . pk2d25) (make-record-type-descriptor . pk2d24) (make-record-constructor-descriptor . pk2d23) (record? . pk2d22) (record-type-uid . pk2d21) (record-type-sealed? . pk2d20) (record-type-parent . pk2d1f) (record-type-opaque? . pk2d1e) (record-type-name . pk2d1d) (record-type-generative? . pk2d1c) (record-type-field-names . pk2d1b) (record-rtd . pk2d1a) (record-field-mutable? . pk2d19) (delete-file . pk2d18) (file-exists? . pk2d17) (vector-sort! . pk2d16) (vector-sort . pk2d15) (list-sort . pk2d14) (symbol-hash . pk2d13) (string-ci-hash . pk2d12) (string-hash . pk2d11) (equal-hash . pk2d10) (hashtable-equivalence-function . pk2d0f) (make-hashtable . pk2d0e) (hashtable-hash-function . pk2d0d) (make-eqv-hashtable . pk2d0c) (make-eq-hashtable . pk2d0b) (hashtable? . pk2d0a) (hashtable-update! . pk2d09) (hashtable-size . pk2d08) (hashtable-set! . pk2d07) (hashtable-ref . pk2d06) (hashtable-mutable? . pk2d05) (hashtable-keys . pk2d04) (hashtable-entries . pk2d03) (hashtable-delete! . pk2d02) (hashtable-copy . pk2d01) (hashtable-contains? . pk2d00) (hashtable-clear! . pk2cff) (call-with-output-file . pk2cfe) (call-with-input-file . pk2cfd) (write-char . pk2cfc) (write . pk2cfb) (with-output-to-file . pk2cfa) (with-input-from-file . pk2cf9) (read-char . pk2cf8) (read . pk2cf7) (peek-char . pk2cf6) (open-output-file . pk2cf5) (open-input-file . pk2cf4) (newline . pk2cf3) (display . pk2cf2) (close-output-port . pk2cf1) (close-input-port . pk2cf0) (eof-object? . pk2cef) (eof-object . pk2cee) (current-error-port . pk2ced) (current-output-port . pk2cec) (current-input-port . pk2ceb) (output-port? . pk2cea) (input-port? . pk2ce9) (utf-8-codec . pk2ce8) (utf-16-codec . pk2ce7) (transcoder-error-handling-mode . pk2ce6) (transcoder-eol-style . pk2ce5) (transcoder-codec . pk2ce4) (transcoded-port . pk2ce3) (textual-port? . pk2ce2) (string->bytevector . pk2ce1) (standard-output-port . pk2ce0) (standard-input-port . pk2cdf) (standard-error-port . pk2cde) (set-port-position! . pk2cdd) (put-u8 . pk2cdc) (put-string . pk2cdb) (put-datum . pk2cda) (put-char . pk2cd9) (put-bytevector . pk2cd8) (port? . pk2cd7) (port-transcoder . pk2cd6) (port-position . pk2cd5) (port-has-set-port-position!? . pk2cd4) (port-has-port-position? . pk2cd3) (port-eof? . pk2cd2) (output-port-buffer-mode . pk2cd1) (open-string-output-port . pk2cd0) (open-string-input-port . pk2ccf) (open-file-output-port . pk2cce) (open-file-input/output-port . pk2ccd) (open-file-input-port . pk2ccc) (open-bytevector-output-port . pk2ccb) (open-bytevector-input-port . pk2cca) (native-transcoder . pk2cc9) (native-eol-style . pk2cc8) (make-transcoder . pk2cc7) (latin-1-codec . pk2cc6) (make-i/o-write-error . pk2cc5) (make-i/o-read-error . pk2cc4) (make-i/o-port-error . pk2cc3) (make-i/o-invalid-position-error . pk2cc2) (make-i/o-filename-error . pk2cc1) (make-i/o-file-protection-error . pk2cc0) (make-i/o-file-is-read-only-error . pk2cbf) (make-i/o-file-does-not-exist-error . pk2cbe) (make-i/o-file-already-exists-error . pk2cbd) (make-i/o-error . pk2cbc) (make-i/o-encoding-error . pk2cbb) (make-i/o-decoding-error . pk2cba) (make-custom-textual-output-port . pk2cb9) (make-custom-textual-input/output-port . pk2cb8) (make-custom-textual-input-port . pk2cb7) (make-custom-binary-output-port . pk2cb6) (make-custom-binary-input/output-port . pk2cb5) (make-custom-binary-input-port . pk2cb4) (make-bytevector . pk2cb3) (lookahead-u8 . pk2cb2) (lookahead-char . pk2cb1) (i/o-write-error? . pk2cb0) (i/o-read-error? . pk2caf) (i/o-port-error? . pk2cae) (i/o-invalid-position-error? . pk2cad) (i/o-filename-error? . pk2cac) (i/o-file-protection-error? . pk2cab) (i/o-file-is-read-only-error? . pk2caa) (i/o-file-does-not-exist-error? . pk2ca9) (i/o-file-already-exists-error? . pk2ca8) (i/o-error? . pk2ca7) (i/o-error-position . pk2ca6) (i/o-error-port . pk2ca5) (i/o-error-filename . pk2ca4) (i/o-encoding-error? . pk2ca3) (i/o-encoding-error-char . pk2ca2) (i/o-decoding-error? . pk2ca1) (get-u8 . pk2ca0) (get-string-n! . pk2c9f) (get-string-n . pk2c9e) (get-string-all . pk2c9d) (get-line . pk2c9c) (get-datum . pk2c9b) (get-char . pk2c9a) (get-bytevector-some . pk2c99) (get-bytevector-n! . pk2c98) (get-bytevector-n . pk2c97) (get-bytevector-all . pk2c96) (flush-output-port . pk2c95) (close-port . pk2c94) (exit . pk2c8c) (command-line . pk291e) (remove . pk2c87) (remv . pk2c86) (remp . pk2c85) (remq . pk2c84) (partition . pk2c83) (memv . pk2c82) (memq . pk2c81) (memp . pk2c80) (member . pk2c7f) (exists . pk2c7e) (for-all . pk2c7d) (fold-right . pk2c7c) (fold-left . pk2c7b) (find . pk2c7a) (filter . pk2c79) (cons* . pk2c78) (assv . pk2c77) (assq . pk2c76) (assp . pk2c75) (assoc . pk2c74) (call-with-string-output-port . pk2c73) (call-with-port . pk2c72) (call-with-bytevector-output-port . pk2c71) (bytevector->string . pk2c70) (buffer-mode? . pk2c6f) (binary-port? . pk2c6e) (with-exception-handler . pk2c6d) (raise-continuable . pk2c6c) (raise . pk2c6b) (make-enumeration . pk2c6a) (enum-set=? . pk2c69) (enum-set-universe . pk2c68) (enum-set-union . pk2c67) (enum-set-subset? . pk2c66) (enum-set-projection . pk2c65) (enum-set-member? . pk2c64) (enum-set-intersection . pk2c63) (enum-set-indexer . pk2c62) (enum-set-difference . pk2c61) (enum-set-constructor . pk2c60) (enum-set-complement . pk2c5f) (enum-set->list . pk2c5e) (who-condition? . pk2c5d) (warning? . pk2c5c) (violation? . pk2c5b) (undefined-violation? . pk2c5a) (syntax-violation? . pk2c59) (syntax-violation-subform . pk2c58) (syntax-violation-form . pk2c57) (syntax-violation . pke65) (simple-conditions . pk2c56) (serious-condition? . pk2c55) (non-continuable-violation? . pk2c54) (message-condition? . pk2c53) (make-who-condition . pk2c52) (make-warning . pk2c51) (make-violation . pk2c50) (make-undefined-violation . pk2c4f) (make-syntax-violation . pk2c4e) (make-serious-condition . pk2c4d) (make-non-continuable-violation . pk2c4c) (make-message-condition . pk2c4b) (make-lexical-violation . pk2c4a) (make-irritants-condition . pk2c49) (make-implementation-restriction-violation . pk2c48) (make-error . pk2c47) (make-assertion-violation . pk2c46) (lexical-violation? . pk2c45) (irritants-condition? . pk2c44) (implementation-restriction-violation? . pk2c43) (error? . pk2c42) (condition-who . pk2c41) (condition-predicate . pk2c40) (condition-message . pk2c3f) (condition-irritants . pk2c3e) (condition-accessor . pk2c3d) (condition . pk2c3c) (assertion-violation? . pk2c3b) (condition? . pk2c3a) (utf32->string . pk2c39) (utf16->string . pk2c38) (utf8->string . pk2c37) (uint-list->bytevector . pk2c36) (u8-list->bytevector . pk2c35) (string->utf8 . pk2c34) (string->utf32 . pk2c33) (string->utf16 . pk2c32) (sint-list->bytevector . pk2c31) (native-endianness . pk2c30) (bytevector? . pk2c2f) (bytevector=? . pk2c2e) (bytevector-uint-set! . pk2c2d) (bytevector-uint-ref . pk2c2c) (bytevector-u8-set! . pk2c2b) (bytevector-u8-ref . pk2c2a) (bytevector-u64-set! . pk2c29) (bytevector-u64-ref . pk2c28) (bytevector-u64-native-set! . pk2c27) (bytevector-u64-native-ref . pk2c26) (bytevector-u32-set! . pk2c25) (bytevector-u32-ref . pk2c24) (bytevector-u32-native-set! . pk2c23) (bytevector-u32-native-ref . pk2c22) (bytevector-u16-set! . pk2c21) (bytevector-u16-ref . pk2c20) (bytevector-u16-native-set! . pk2c1f) (bytevector-u16-native-ref . pk2c1e) (bytevector-sint-set! . pk2c1d) (bytevector-sint-ref . pk2c1c) (bytevector-s8-set! . pk2c1b) (bytevector-s8-ref . pk2c1a) (bytevector-s64-set! . pk2c19) (bytevector-s64-ref . pk2c18) (bytevector-s64-native-set! . pk2c17) (bytevector-s64-native-ref . pk2c16) (bytevector-s32-set! . pk2c15) (bytevector-s32-ref . pk2c14) (bytevector-s32-native-set! . pk2c13) (bytevector-s32-native-ref . pk2c12) (bytevector-s16-set! . pk2c11) (bytevector-s16-ref . pk2c10) (bytevector-s16-native-set! . pk2c0f) (bytevector-s16-native-ref . pk2c0e) (bytevector-length . pk2c0d) (bytevector-ieee-single-ref . pk2c0c) (bytevector-ieee-single-set! . pk2c0b) (bytevector-ieee-single-native-set! . pk2c0a) (bytevector-ieee-single-native-ref . pk2c09) (bytevector-ieee-double-set! . pk2c08) (bytevector-ieee-double-ref . pk2c07) (bytevector-ieee-double-native-set! . pk2c06) (bytevector-ieee-double-native-ref . pk2c05) (bytevector-fill! . pk2c04) (bytevector-copy! . pk2c03) (bytevector-copy . pk2c02) (bytevector->uint-list . pk2c01) (bytevector->u8-list . pk2c00) (bytevector->sint-list . pk2bff) (no-nans-violation? . pk2bfe) (no-infinities-violation? . pk2bfd) (make-no-nans-violation . pk2bfc) (make-no-infinities-violation . pk2bfb) (real->flonum . pk2bfa) (flzero? . pk2bf9) (fltruncate . pk2bf8) (fltan . pk2bf7) (flsqrt . pk2bf6) (flsin . pk2bf5) (flround . pk2bf4) (flpositive? . pk2bf3) (flonum? . pk2bf2) (flodd? . pk2bf1) (flnumerator . pk2bf0) (flnegative? . pk2bef) (flnan? . pk2bee) (flmod0 . pk2bed) (flmod . pk2bec) (flmin . pk2beb) (flmax . pk2bea) (fllog . pk2be9) (flinteger? . pk2be8) (flinfinite? . pk2be7) (flfloor . pk2be6) (flfinite? . pk2be5) (flexpt . pk2be4) (flexp . pk2be3) (fleven? . pk2be2) (fldiv0-and-mod0 . pk2be1) (fldiv0 . pk2be0) (fldiv-and-mod . pk2bdf) (fldiv . pk2bde) (fldenominator . pk2bdd) (flcos . pk2bdc) (flceiling . pk2bdb) (flatan . pk2bda) (flasin . pk2bd9) (flacos . pk2bd8) (flabs . pk2bd7) (fl>? . pk2bd6) (fl>=? . pk2bd5) (fl=? . pk2bd4) (fl<? . pk2bd3) (fl<=? . pk2bd2) (fl/ . pk2bd1) (fl- . pk2bd0) (fl+ . pk2bcf) (fl* . pk2bce) (fixnum->flonum . pk2bcd) (fxzero? . pk2bcc) (fxxor . pk2bcb) (fxrotate-bit-field . pk2bca) (fxreverse-bit-field . pk2bc9) (fxpositive? . pk2bc8) (fxodd? . pk2bc7) (fxnot . pk2bc6) (fxnegative? . pk2bc5) (fxmod0 . pk2bc4) (fxmod . pk2bc3) (fxmin . pk2bc2) (fxmax . pk2bc1) (fxlength . pk2bc0) (fxior . pk2bbf) (fxif . pk2bbe) (fxfirst-bit-set . pk2bbd) (fxeven? . pk2bbc) (fxdiv0-and-mod0 . pk2bbb) (fxdiv0 . pk2bba) (fxdiv-and-mod . pk2bb9) (fxdiv . pk2bb8) (fxcopy-bit-field . pk2bb7) (fxcopy-bit . pk2bb6) (fxbit-set? . pk2bb5) (fxbit-field . pk2bb4) (fxbit-count . pk2bb3) (fxarithmetic-shift-right . pk2bb2) (fxarithmetic-shift-left . pk2bb1) (fxarithmetic-shift . pk2bb0) (fxand . pk2baf) (fx>? . pk2bae) (fx>=? . pk2bad) (fx=? . pk2bac) (fx<? . pk2bab) (fx<=? . pk2baa) (fx-/carry . pk2ba9) (fx- . pk2ba8) (fx+/carry . pk2ba7) (fx+ . pk2ba6) (fx*/carry . pk2ba5) (fx* . pk2ba4) (greatest-fixnum . pk2ba3) (least-fixnum . pk2ba2) (fixnum-width . pk2ba1) (fixnum? . pk2ba0) (bitwise-rotate-bit-field . pk2b9f) (bitwise-reverse-bit-field . pk2b9e) (bitwise-length . pk2b9d) (bitwise-if . pk2b9c) (bitwise-first-bit-set . pk2b9b) (bitwise-copy-bit-field . pk2b9a) (bitwise-copy-bit . pk2b99) (bitwise-bit-set? . pk2b98) (bitwise-bit-field . pk2b97) (bitwise-bit-count . pk2b96) (bitwise-xor . pk2b95) (bitwise-ior . pk2b94) (bitwise-and . pk2b93) (bitwise-not . pk2b92) (bitwise-arithmetic-shift-right . pk2b91) (bitwise-arithmetic-shift-left . pk2b90) (bitwise-arithmetic-shift . pk2b8f) (zero? . pk2b8e) (vector? . pk2b8d) (vector-set! . pk2b8c) (vector-ref . pk2b8b) (vector-map . pk2b8a) (vector-length . pk2b89) (vector-for-each . pk2b88) (vector-fill! . pk2b87) (vector->list . pk2b86) (vector . pk2b85) (values . pk2b84) (truncate . pk2b83) (tan . pk2b82) (symbol? . pk2b81) (symbol=? . pk2b80) (symbol->string . pk2b7f) (substring . pk2b7e) (string? . pk2b7d) (string>? . pk2b7c) (string>=? . pk2b7b) (string=? . pk2b7a) (string<? . pk2b79) (string<=? . pk2b78) (string-ref . pk2b77) (string-length . pk2b76) (string-for-each . pk2b75) (string-copy . pk2b74) (string-append . pk2b73) (string->symbol . pk2b72) (string->number . pk2b71) (string->list . pk2b70) (string . pk2b6f) (sqrt . pk2b6e) (sin . pk2b6d) (round . pk2b6c) (reverse . pk2b6b) (real? . pk2b6a) (real-valued? . pk2b69) (real-part . pk2b68) (rationalize . pk2b67) (rational? . pk2b66) (rational-valued? . pk2b65) (procedure? . pk2b64) (positive? . pk2b63) (pair? . pk2b62) (odd? . pk2b61) (numerator . pk2b60) (number? . pk2b5f) (number->string . pk2b5e) (null? . pk2b5d) (not . pk2b5c) (negative? . pk2b5b) (nan? . pk2b5a) (min . pk2b59) (max . pk2b58) (map . pk2b57) (make-vector . pk2b56) (make-string . pk2b55) (make-rectangular . pk2b54) (make-polar . pk2b53) (magnitude . pk2b52) (log . pk2b51) (list? . pk2b50) (list-tail . pk2b4f) (list-ref . pk2b4e) (list->vector . pk2b4d) (list->string . pk2b4c) (list . pk2b4b) (length . pk2b4a) (lcm . pk2b49) (integer? . pk2b48) (integer-valued? . pk2b47) (integer->char . pk2b46) (infinite? . pk2b45) (inexact? . pk2b44) (inexact . pk2b43) (imag-part . pk2b42) (gcd . pk2b41) (for-each . pk2b40) (floor . pk2b3f) (finite? . pk2b3e) (expt . pk2b3d) (exp . pk2b3c) (exact? . pk2b3b) (exact-integer-sqrt . pk2b3a) (exact . pk2b39) (even? . pk2b38) (error . pk2b37) (eqv? . pk2b36) (equal? . pk2b35) (eq? . pk2b34) (dynamic-wind . pk2b33) (div0-and-mod0 . pk2b32) (mod0 . pk2b31) (div0 . pk2b30) (div-and-mod . pk2b2f) (mod . pk2b2e) (div . pk2b2d) (denominator . pk2b2c) (cos . pk2b2b) (cons . pk2b2a) (complex? . pk2b29) (char? . pk2b28) (char>? . pk2b27) (char>=? . pk2b26) (char=? . pk2b25) (char<? . pk2b24) (char<=? . pk2b23) (char->integer . pk2b22) (ceiling . pk2b21) (call-with-values . pk2b20) (call/cc . pk2b1f) (call-with-current-continuation . pk2b1e) (cddddr . pk2b1d) (cdddar . pk2b1c) (cddadr . pk2b1b) (cddaar . pk2b1a) (cdaddr . pk2b19) (cdadar . pk2b18) (cdaadr . pk2b17) (cdaaar . pk2b16) (cadddr . pk2b15) (caddar . pk2b14) (cadadr . pk2b13) (cadaar . pk2b12) (caaddr . pk2b11) (caadar . pk2b10) (caaadr . pk2b0f) (caaaar . pk2b0e) (cdddr . pk2b0d) (cddar . pk2b0c) (cdadr . pk2b0b) (cdaar . pk2b0a) (caddr . pk2b09) (cadar . pk2b08) (caadr . pk2b07) (caaar . pk2b06) (cddr . pk2b05) (cdar . pk2b04) (cadr . pk2b03) (caar . pk2b02) (cdr . pk2b01) (car . pk2b00) (boolean? . pk2aff) (boolean=? . pk2afe) (atan . pk2afd) (assertion-violation . pk2afc) (asin . pk2afb) (apply . pk2afa) (append . pk2af9) (angle . pk2af8) (acos . pk2af7) (abs . pk2af6) (/ . pk2af5) (* . pk2af4) (- . pk2af3) (+ . pk2af2) (>= . pk2af1) (> . pk2af0) (= . pk2aef) (<= . pk2aee) (< . pk2aed) (&no-nans . pk2aeb) (&no-infinities . pk2aea) (&i/o-encoding . pk2ae9) (&i/o-decoding . pk2ae8) (&i/o-port . pk2ae7) (&i/o-file-does-not-exist . pk2ae6) (&i/o-file-already-exists . pk2ae5) (&i/o-file-is-read-only . pk2ae4) (&i/o-file-protection . pk2ae3) (&i/o-filename . pk2ae2) (&i/o-invalid-position . pk2ae1) (&i/o-write . pk2ae0) (&i/o-read . pk2adf) (&i/o . pk2ade) (&undefined . pk2add) (&syntax . pk2adc) (&lexical . pk2adb) (&implementation-restriction . pk2ada) (&non-continuable . pk2ad9) (&who . pk2ad8) (&irritants . pk2ad7) (&assertion . pk2ad6) (&violation . pk2ad5) (&error . pk2ad4) (&serious . pk2ad3) (&warning . pk2ad2) (&message . pk2ad1) (&condition . pk2ad0) (define-condition-type . pk2acf) (define-enumeration . pk2ace) (define-record-type . pk2acd) (parent-rtd . pk2acc) (nongenerative . pk2acb) (opaque . pk2aca) (sealed . pk2ac9) (protocol . pk2ac8) (parent . pk2ac7) (immutable . pk2ac6) (mutable . pk2ac5) (fields . pk2ac4) (error-handling-mode . pk2ac3) (file-options . pk2ac2) (buffer-mode . pk2ac1) (eol-style . pk2ac0) (guard . pk2abf) (unsyntax-splicing . pk2abc) (unsyntax . pk2abb) (unquote-splicing . pk2aba) (unquote . pk2ab9) (_ . pk2ab8) (else . pk2ab7) (=> . pk2ab6) (... . pk2ab5) (assert . pk2ab4) (endianness . pk2ab3) (do . pk2ab0) (cond . pk2aaf) (let* . pk2aae) (let*-values . pk2aad) (let-values . pk2aac) (identifier-syntax . pk2aab) (with-syntax . pk2aaa) (quasisyntax . pk2aa9) (quasiquote . pk2aa8) (syntax-rules . pk2aa7) (record-constructor-descriptor . pk2aa4) (record-type-descriptor . pk2aa3) (case . pk2aa2) (unless . pk2aa0) (when . pk2a9f) (or . pk2a9e) (and . pk2a9d) (if . pk2a9c) (let . pk2a9b) (letrec* . pk2a9a) (letrec . pk2a99) (case-lambda . pk2a97) (lambda . pk2a96) (syntax . pk2a95) (syntax-case . pk2a94) (quote . pk2a93) (letrec-syntax . pk2a91) (let-syntax . pk2a90) (set! . pk2a8f) (begin . pk2a8d) (define-syntax . pk2a8b) (define . pk2a8a)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e3e '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . pke41) (quotient . pk2c93) (null-environment . pke3f) (remainder . pk2c92) (modulo . pk2c91) (inexact->exact . pk2c90) (force . pk2c8f) (exact->inexact . pk2c8e) (make-promise . pk2c8d) (delay . pk2ab2)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e3f '(rnrs control) '(6) '() '() '() '((do . pk2ab0) (unless . pk2aa0) (when . pk2a9f) (case-lambda . pk2a97)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e40 '(rnrs eval) '(6) '() '() '() '((eval . pke45) (environment . pke3d)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e41 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . pk2c89) (set-car! . pk2c88)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e42 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . pk2c8b) (string-set! . pk2c8a)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e43 '(rnrs programs) '(6) '() '() '() '((exit . pk2c8c) (command-line . pk291e)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e44 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . pkbb0) (identifier? . pke67) (generate-temporaries . pke53) (free-identifier=? . pke55) (syntax->datum . pke6b) (datum->syntax . pke69) (bound-identifier=? . pke57) (syntax-violation . pke65) (unsyntax-splicing . pk2abc) (unsyntax . pk2abb) (_ . pk2ab8) (... . pk2ab5) (with-syntax . pk2aaa) (quasisyntax . pk2aa9) (syntax . pk2a95) (syntax-case . pk2a94)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e45 '(rnrs files) '(6) '() '() '() '((delete-file . pk2d18) (file-exists? . pk2d17) (make-i/o-write-error . pk2cc5) (make-i/o-read-error . pk2cc4) (make-i/o-port-error . pk2cc3) (make-i/o-invalid-position-error . pk2cc2) (make-i/o-filename-error . pk2cc1) (make-i/o-file-protection-error . pk2cc0) (make-i/o-file-is-read-only-error . pk2cbf) (make-i/o-file-does-not-exist-error . pk2cbe) (make-i/o-file-already-exists-error . pk2cbd) (make-i/o-error . pk2cbc) (i/o-write-error? . pk2cb0) (i/o-read-error? . pk2caf) (i/o-port-error? . pk2cae) (i/o-invalid-position-error? . pk2cad) (i/o-filename-error? . pk2cac) (i/o-file-protection-error? . pk2cab) (i/o-file-is-read-only-error? . pk2caa) (i/o-file-does-not-exist-error? . pk2ca9) (i/o-file-already-exists-error? . pk2ca8) (i/o-error? . pk2ca7) (i/o-error-position . pk2ca6) (i/o-error-port . pk2ca5) (i/o-error-filename . pk2ca4) (&i/o-port . pk2ae7) (&i/o-file-does-not-exist . pk2ae6) (&i/o-file-already-exists . pk2ae5) (&i/o-file-is-read-only . pk2ae4) (&i/o-file-protection . pk2ae3) (&i/o-filename . pk2ae2) (&i/o-invalid-position . pk2ae1) (&i/o-write . pk2ae0) (&i/o-read . pk2adf) (&i/o . pk2ade)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e46 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . pk2d16) (vector-sort . pk2d15) (list-sort . pk2d14)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e47 '(rnrs base) '(6) '() '() '() '((zero? . pk2b8e) (vector? . pk2b8d) (vector-set! . pk2b8c) (vector-ref . pk2b8b) (vector-map . pk2b8a) (vector-length . pk2b89) (vector-for-each . pk2b88) (vector-fill! . pk2b87) (vector->list . pk2b86) (vector . pk2b85) (values . pk2b84) (truncate . pk2b83) (tan . pk2b82) (symbol? . pk2b81) (symbol=? . pk2b80) (symbol->string . pk2b7f) (substring . pk2b7e) (string? . pk2b7d) (string>? . pk2b7c) (string>=? . pk2b7b) (string=? . pk2b7a) (string<? . pk2b79) (string<=? . pk2b78) (string-ref . pk2b77) (string-length . pk2b76) (string-for-each . pk2b75) (string-copy . pk2b74) (string-append . pk2b73) (string->symbol . pk2b72) (string->number . pk2b71) (string->list . pk2b70) (string . pk2b6f) (sqrt . pk2b6e) (sin . pk2b6d) (round . pk2b6c) (reverse . pk2b6b) (real? . pk2b6a) (real-valued? . pk2b69) (real-part . pk2b68) (rationalize . pk2b67) (rational? . pk2b66) (rational-valued? . pk2b65) (procedure? . pk2b64) (positive? . pk2b63) (pair? . pk2b62) (odd? . pk2b61) (numerator . pk2b60) (number? . pk2b5f) (number->string . pk2b5e) (null? . pk2b5d) (not . pk2b5c) (negative? . pk2b5b) (nan? . pk2b5a) (min . pk2b59) (max . pk2b58) (map . pk2b57) (make-vector . pk2b56) (make-string . pk2b55) (make-rectangular . pk2b54) (make-polar . pk2b53) (magnitude . pk2b52) (log . pk2b51) (list? . pk2b50) (list-tail . pk2b4f) (list-ref . pk2b4e) (list->vector . pk2b4d) (list->string . pk2b4c) (list . pk2b4b) (length . pk2b4a) (lcm . pk2b49) (integer? . pk2b48) (integer-valued? . pk2b47) (integer->char . pk2b46) (infinite? . pk2b45) (inexact? . pk2b44) (inexact . pk2b43) (imag-part . pk2b42) (gcd . pk2b41) (for-each . pk2b40) (floor . pk2b3f) (finite? . pk2b3e) (expt . pk2b3d) (exp . pk2b3c) (exact? . pk2b3b) (exact-integer-sqrt . pk2b3a) (exact . pk2b39) (even? . pk2b38) (error . pk2b37) (eqv? . pk2b36) (equal? . pk2b35) (eq? . pk2b34) (dynamic-wind . pk2b33) (div0-and-mod0 . pk2b32) (mod0 . pk2b31) (div0 . pk2b30) (div-and-mod . pk2b2f) (mod . pk2b2e) (div . pk2b2d) (denominator . pk2b2c) (cos . pk2b2b) (cons . pk2b2a) (complex? . pk2b29) (char? . pk2b28) (char>? . pk2b27) (char>=? . pk2b26) (char=? . pk2b25) (char<? . pk2b24) (char<=? . pk2b23) (char->integer . pk2b22) (ceiling . pk2b21) (call-with-values . pk2b20) (call/cc . pk2b1f) (call-with-current-continuation . pk2b1e) (cddddr . pk2b1d) (cdddar . pk2b1c) (cddadr . pk2b1b) (cddaar . pk2b1a) (cdaddr . pk2b19) (cdadar . pk2b18) (cdaadr . pk2b17) (cdaaar . pk2b16) (cadddr . pk2b15) (caddar . pk2b14) (cadadr . pk2b13) (cadaar . pk2b12) (caaddr . pk2b11) (caadar . pk2b10) (caaadr . pk2b0f) (caaaar . pk2b0e) (cdddr . pk2b0d) (cddar . pk2b0c) (cdadr . pk2b0b) (cdaar . pk2b0a) (caddr . pk2b09) (cadar . pk2b08) (caadr . pk2b07) (caaar . pk2b06) (cddr . pk2b05) (cdar . pk2b04) (cadr . pk2b03) (caar . pk2b02) (cdr . pk2b01) (car . pk2b00) (boolean? . pk2aff) (boolean=? . pk2afe) (atan . pk2afd) (assertion-violation . pk2afc) (asin . pk2afb) (apply . pk2afa) (append . pk2af9) (angle . pk2af8) (acos . pk2af7) (abs . pk2af6) (/ . pk2af5) (* . pk2af4) (- . pk2af3) (+ . pk2af2) (>= . pk2af1) (> . pk2af0) (= . pk2aef) (<= . pk2aee) (< . pk2aed) (unquote-splicing . pk2aba) (unquote . pk2ab9) (_ . pk2ab8) (else . pk2ab7) (=> . pk2ab6) (... . pk2ab5) (assert . pk2ab4) (cond . pk2aaf) (let* . pk2aae) (let*-values . pk2aad) (let-values . pk2aac) (identifier-syntax . pk2aab) (quasiquote . pk2aa8) (syntax-rules . pk2aa7) (case . pk2aa2) (or . pk2a9e) (and . pk2a9d) (if . pk2a9c) (let . pk2a9b) (letrec* . pk2a9a) (letrec . pk2a99) (lambda . pk2a96) (quote . pk2a93) (letrec-syntax . pk2a91) (let-syntax . pk2a90) (set! . pk2a8f) (begin . pk2a8d) (define-syntax . pk2a8b) (define . pk2a8a)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e48 '(rnrs lists) '(6) '() '() '() '((remove . pk2c87) (remv . pk2c86) (remp . pk2c85) (remq . pk2c84) (partition . pk2c83) (memv . pk2c82) (memq . pk2c81) (memp . pk2c80) (member . pk2c7f) (exists . pk2c7e) (for-all . pk2c7d) (fold-right . pk2c7c) (fold-left . pk2c7b) (find . pk2c7a) (filter . pk2c79) (cons* . pk2c78) (assv . pk2c77) (assq . pk2c76) (assp . pk2c75) (assoc . pk2c74)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e49 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . pk2cfe) (call-with-input-file . pk2cfd) (write-char . pk2cfc) (write . pk2cfb) (with-output-to-file . pk2cfa) (with-input-from-file . pk2cf9) (read-char . pk2cf8) (read . pk2cf7) (peek-char . pk2cf6) (open-output-file . pk2cf5) (open-input-file . pk2cf4) (newline . pk2cf3) (display . pk2cf2) (close-output-port . pk2cf1) (close-input-port . pk2cf0) (eof-object? . pk2cef) (eof-object . pk2cee) (current-error-port . pk2ced) (current-output-port . pk2cec) (current-input-port . pk2ceb) (output-port? . pk2cea) (input-port? . pk2ce9) (make-i/o-write-error . pk2cc5) (make-i/o-read-error . pk2cc4) (make-i/o-port-error . pk2cc3) (make-i/o-invalid-position-error . pk2cc2) (make-i/o-filename-error . pk2cc1) (make-i/o-file-protection-error . pk2cc0) (make-i/o-file-is-read-only-error . pk2cbf) (make-i/o-file-does-not-exist-error . pk2cbe) (make-i/o-file-already-exists-error . pk2cbd) (make-i/o-error . pk2cbc) (i/o-write-error? . pk2cb0) (i/o-read-error? . pk2caf) (i/o-port-error? . pk2cae) (i/o-invalid-position-error? . pk2cad) (i/o-filename-error? . pk2cac) (i/o-file-protection-error? . pk2cab) (i/o-file-is-read-only-error? . pk2caa) (i/o-file-does-not-exist-error? . pk2ca9) (i/o-file-already-exists-error? . pk2ca8) (i/o-error? . pk2ca7) (i/o-error-position . pk2ca6) (i/o-error-port . pk2ca5) (i/o-error-filename . pk2ca4) (&i/o-port . pk2ae7) (&i/o-file-does-not-exist . pk2ae6) (&i/o-file-already-exists . pk2ae5) (&i/o-file-is-read-only . pk2ae4) (&i/o-file-protection . pk2ae3) (&i/o-filename . pk2ae2) (&i/o-invalid-position . pk2ae1) (&i/o-write . pk2ae0) (&i/o-read . pk2adf) (&i/o . pk2ade)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e4a '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . pk2cb3) (utf32->string . pk2c39) (utf16->string . pk2c38) (utf8->string . pk2c37) (uint-list->bytevector . pk2c36) (u8-list->bytevector . pk2c35) (string->utf8 . pk2c34) (string->utf32 . pk2c33) (string->utf16 . pk2c32) (sint-list->bytevector . pk2c31) (native-endianness . pk2c30) (bytevector? . pk2c2f) (bytevector=? . pk2c2e) (bytevector-uint-set! . pk2c2d) (bytevector-uint-ref . pk2c2c) (bytevector-u8-set! . pk2c2b) (bytevector-u8-ref . pk2c2a) (bytevector-u64-set! . pk2c29) (bytevector-u64-ref . pk2c28) (bytevector-u64-native-set! . pk2c27) (bytevector-u64-native-ref . pk2c26) (bytevector-u32-set! . pk2c25) (bytevector-u32-ref . pk2c24) (bytevector-u32-native-set! . pk2c23) (bytevector-u32-native-ref . pk2c22) (bytevector-u16-set! . pk2c21) (bytevector-u16-ref . pk2c20) (bytevector-u16-native-set! . pk2c1f) (bytevector-u16-native-ref . pk2c1e) (bytevector-sint-set! . pk2c1d) (bytevector-sint-ref . pk2c1c) (bytevector-s8-set! . pk2c1b) (bytevector-s8-ref . pk2c1a) (bytevector-s64-set! . pk2c19) (bytevector-s64-ref . pk2c18) (bytevector-s64-native-set! . pk2c17) (bytevector-s64-native-ref . pk2c16) (bytevector-s32-set! . pk2c15) (bytevector-s32-ref . pk2c14) (bytevector-s32-native-set! . pk2c13) (bytevector-s32-native-ref . pk2c12) (bytevector-s16-set! . pk2c11) (bytevector-s16-ref . pk2c10) (bytevector-s16-native-set! . pk2c0f) (bytevector-s16-native-ref . pk2c0e) (bytevector-length . pk2c0d) (bytevector-ieee-single-ref . pk2c0c) (bytevector-ieee-single-set! . pk2c0b) (bytevector-ieee-single-native-set! . pk2c0a) (bytevector-ieee-single-native-ref . pk2c09) (bytevector-ieee-double-set! . pk2c08) (bytevector-ieee-double-ref . pk2c07) (bytevector-ieee-double-native-set! . pk2c06) (bytevector-ieee-double-native-ref . pk2c05) (bytevector-fill! . pk2c04) (bytevector-copy! . pk2c03) (bytevector-copy . pk2c02) (bytevector->uint-list . pk2c01) (bytevector->u8-list . pk2c00) (bytevector->sint-list . pk2bff) (endianness . pk2ab3)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e4b '(rnrs unicode) '(6) '() '() '() '((string-upcase . pk2d46) (string-titlecase . pk2d45) (string-normalize-nfkd . pk2d44) (string-normalize-nfkc . pk2d43) (string-normalize-nfd . pk2d42) (string-normalize-nfc . pk2d41) (string-foldcase . pk2d40) (string-downcase . pk2d3f) (string-ci>? . pk2d3e) (string-ci>=? . pk2d3d) (string-ci=? . pk2d3c) (string-ci<? . pk2d3b) (string-ci<=? . pk2d3a) (char-whitespace? . pk2d39) (char-upper-case? . pk2d38) (char-title-case? . pk2d37) (char-numeric? . pk2d36) (char-lower-case? . pk2d35) (char-general-category . pk2d34) (char-upcase . pk2d33) (char-titlecase . pk2d32) (char-foldcase . pk2d31) (char-downcase . pk2d30) (char-ci>? . pk2d2f) (char-ci>=? . pk2d2e) (char-ci=? . pk2d2d) (char-ci<? . pk2d2c) (char-ci<=? . pk2d2b) (char-alphabetic? . pk2d2a)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e4c '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . pk2c6d) (raise-continuable . pk2c6c) (raise . pk2c6b) (guard . pk2abf) (else . pk2ab7) (=> . pk2ab6)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e4d '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . pk2b9f) (bitwise-reverse-bit-field . pk2b9e) (bitwise-length . pk2b9d) (bitwise-if . pk2b9c) (bitwise-first-bit-set . pk2b9b) (bitwise-copy-bit-field . pk2b9a) (bitwise-copy-bit . pk2b99) (bitwise-bit-set? . pk2b98) (bitwise-bit-field . pk2b97) (bitwise-bit-count . pk2b96) (bitwise-xor . pk2b95) (bitwise-ior . pk2b94) (bitwise-and . pk2b93) (bitwise-not . pk2b92) (bitwise-arithmetic-shift-right . pk2b91) (bitwise-arithmetic-shift-left . pk2b90) (bitwise-arithmetic-shift . pk2b8f)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e4e '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . pk2bcc) (fxxor . pk2bcb) (fxrotate-bit-field . pk2bca) (fxreverse-bit-field . pk2bc9) (fxpositive? . pk2bc8) (fxodd? . pk2bc7) (fxnot . pk2bc6) (fxnegative? . pk2bc5) (fxmod0 . pk2bc4) (fxmod . pk2bc3) (fxmin . pk2bc2) (fxmax . pk2bc1) (fxlength . pk2bc0) (fxior . pk2bbf) (fxif . pk2bbe) (fxfirst-bit-set . pk2bbd) (fxeven? . pk2bbc) (fxdiv0-and-mod0 . pk2bbb) (fxdiv0 . pk2bba) (fxdiv-and-mod . pk2bb9) (fxdiv . pk2bb8) (fxcopy-bit-field . pk2bb7) (fxcopy-bit . pk2bb6) (fxbit-set? . pk2bb5) (fxbit-field . pk2bb4) (fxbit-count . pk2bb3) (fxarithmetic-shift-right . pk2bb2) (fxarithmetic-shift-left . pk2bb1) (fxarithmetic-shift . pk2bb0) (fxand . pk2baf) (fx>? . pk2bae) (fx>=? . pk2bad) (fx=? . pk2bac) (fx<? . pk2bab) (fx<=? . pk2baa) (fx-/carry . pk2ba9) (fx- . pk2ba8) (fx+/carry . pk2ba7) (fx+ . pk2ba6) (fx*/carry . pk2ba5) (fx* . pk2ba4) (greatest-fixnum . pk2ba3) (least-fixnum . pk2ba2) (fixnum-width . pk2ba1) (fixnum? . pk2ba0)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e4f '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . pk2bfe) (no-infinities-violation? . pk2bfd) (make-no-nans-violation . pk2bfc) (make-no-infinities-violation . pk2bfb) (real->flonum . pk2bfa) (flzero? . pk2bf9) (fltruncate . pk2bf8) (fltan . pk2bf7) (flsqrt . pk2bf6) (flsin . pk2bf5) (flround . pk2bf4) (flpositive? . pk2bf3) (flonum? . pk2bf2) (flodd? . pk2bf1) (flnumerator . pk2bf0) (flnegative? . pk2bef) (flnan? . pk2bee) (flmod0 . pk2bed) (flmod . pk2bec) (flmin . pk2beb) (flmax . pk2bea) (fllog . pk2be9) (flinteger? . pk2be8) (flinfinite? . pk2be7) (flfloor . pk2be6) (flfinite? . pk2be5) (flexpt . pk2be4) (flexp . pk2be3) (fleven? . pk2be2) (fldiv0-and-mod0 . pk2be1) (fldiv0 . pk2be0) (fldiv-and-mod . pk2bdf) (fldiv . pk2bde) (fldenominator . pk2bdd) (flcos . pk2bdc) (flceiling . pk2bdb) (flatan . pk2bda) (flasin . pk2bd9) (flacos . pk2bd8) (flabs . pk2bd7) (fl>? . pk2bd6) (fl>=? . pk2bd5) (fl=? . pk2bd4) (fl<? . pk2bd3) (fl<=? . pk2bd2) (fl/ . pk2bd1) (fl- . pk2bd0) (fl+ . pk2bcf) (fl* . pk2bce) (fixnum->flonum . pk2bcd) (&no-nans . pk2aeb) (&no-infinities . pk2aea)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e50 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . pk2d13) (string-ci-hash . pk2d12) (string-hash . pk2d11) (equal-hash . pk2d10) (hashtable-equivalence-function . pk2d0f) (make-hashtable . pk2d0e) (hashtable-hash-function . pk2d0d) (make-eqv-hashtable . pk2d0c) (make-eq-hashtable . pk2d0b) (hashtable? . pk2d0a) (hashtable-update! . pk2d09) (hashtable-size . pk2d08) (hashtable-set! . pk2d07) (hashtable-ref . pk2d06) (hashtable-mutable? . pk2d05) (hashtable-keys . pk2d04) (hashtable-entries . pk2d03) (hashtable-delete! . pk2d02) (hashtable-copy . pk2d01) (hashtable-contains? . pk2d00) (hashtable-clear! . pk2cff)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e51 '(rnrs io ports) '(6) '() '() '() '((eof-object? . pk2cef) (eof-object . pk2cee) (current-error-port . pk2ced) (current-output-port . pk2cec) (current-input-port . pk2ceb) (output-port? . pk2cea) (input-port? . pk2ce9) (utf-8-codec . pk2ce8) (utf-16-codec . pk2ce7) (transcoder-error-handling-mode . pk2ce6) (transcoder-eol-style . pk2ce5) (transcoder-codec . pk2ce4) (transcoded-port . pk2ce3) (textual-port? . pk2ce2) (string->bytevector . pk2ce1) (standard-output-port . pk2ce0) (standard-input-port . pk2cdf) (standard-error-port . pk2cde) (set-port-position! . pk2cdd) (put-u8 . pk2cdc) (put-string . pk2cdb) (put-datum . pk2cda) (put-char . pk2cd9) (put-bytevector . pk2cd8) (port? . pk2cd7) (port-transcoder . pk2cd6) (port-position . pk2cd5) (port-has-set-port-position!? . pk2cd4) (port-has-port-position? . pk2cd3) (port-eof? . pk2cd2) (output-port-buffer-mode . pk2cd1) (open-string-output-port . pk2cd0) (open-string-input-port . pk2ccf) (open-file-output-port . pk2cce) (open-file-input/output-port . pk2ccd) (open-file-input-port . pk2ccc) (open-bytevector-output-port . pk2ccb) (open-bytevector-input-port . pk2cca) (native-transcoder . pk2cc9) (native-eol-style . pk2cc8) (make-transcoder . pk2cc7) (latin-1-codec . pk2cc6) (make-i/o-write-error . pk2cc5) (make-i/o-read-error . pk2cc4) (make-i/o-port-error . pk2cc3) (make-i/o-invalid-position-error . pk2cc2) (make-i/o-filename-error . pk2cc1) (make-i/o-file-protection-error . pk2cc0) (make-i/o-file-is-read-only-error . pk2cbf) (make-i/o-file-does-not-exist-error . pk2cbe) (make-i/o-file-already-exists-error . pk2cbd) (make-i/o-error . pk2cbc) (make-i/o-encoding-error . pk2cbb) (make-i/o-decoding-error . pk2cba) (make-custom-textual-output-port . pk2cb9) (make-custom-textual-input/output-port . pk2cb8) (make-custom-textual-input-port . pk2cb7) (make-custom-binary-output-port . pk2cb6) (make-custom-binary-input/output-port . pk2cb5) (make-custom-binary-input-port . pk2cb4) (lookahead-u8 . pk2cb2) (lookahead-char . pk2cb1) (i/o-write-error? . pk2cb0) (i/o-read-error? . pk2caf) (i/o-port-error? . pk2cae) (i/o-invalid-position-error? . pk2cad) (i/o-filename-error? . pk2cac) (i/o-file-protection-error? . pk2cab) (i/o-file-is-read-only-error? . pk2caa) (i/o-file-does-not-exist-error? . pk2ca9) (i/o-file-already-exists-error? . pk2ca8) (i/o-error? . pk2ca7) (i/o-error-position . pk2ca6) (i/o-error-port . pk2ca5) (i/o-error-filename . pk2ca4) (i/o-encoding-error? . pk2ca3) (i/o-encoding-error-char . pk2ca2) (i/o-decoding-error? . pk2ca1) (get-u8 . pk2ca0) (get-string-n! . pk2c9f) (get-string-n . pk2c9e) (get-string-all . pk2c9d) (get-line . pk2c9c) (get-datum . pk2c9b) (get-char . pk2c9a) (get-bytevector-some . pk2c99) (get-bytevector-n! . pk2c98) (get-bytevector-n . pk2c97) (get-bytevector-all . pk2c96) (flush-output-port . pk2c95) (close-port . pk2c94) (call-with-string-output-port . pk2c73) (call-with-port . pk2c72) (call-with-bytevector-output-port . pk2c71) (bytevector->string . pk2c70) (buffer-mode? . pk2c6f) (binary-port? . pk2c6e) (&i/o-encoding . pk2ae9) (&i/o-decoding . pk2ae8) (&i/o-port . pk2ae7) (&i/o-file-does-not-exist . pk2ae6) (&i/o-file-already-exists . pk2ae5) (&i/o-file-is-read-only . pk2ae4) (&i/o-file-protection . pk2ae3) (&i/o-filename . pk2ae2) (&i/o-invalid-position . pk2ae1) (&i/o-write . pk2ae0) (&i/o-read . pk2adf) (&i/o . pk2ade) (error-handling-mode . pk2ac3) (file-options . pk2ac2) (buffer-mode . pk2ac1) (eol-style . pk2ac0)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e52 '(rnrs enums) '(6) '() '() '() '((make-enumeration . pk2c6a) (enum-set=? . pk2c69) (enum-set-universe . pk2c68) (enum-set-union . pk2c67) (enum-set-subset? . pk2c66) (enum-set-projection . pk2c65) (enum-set-member? . pk2c64) (enum-set-intersection . pk2c63) (enum-set-indexer . pk2c62) (enum-set-difference . pk2c61) (enum-set-constructor . pk2c60) (enum-set-complement . pk2c5f) (enum-set->list . pk2c5e) (define-enumeration . pk2ace)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e53 '(rnrs conditions) '(6) '() '() '() '((who-condition? . pk2c5d) (warning? . pk2c5c) (violation? . pk2c5b) (undefined-violation? . pk2c5a) (syntax-violation? . pk2c59) (syntax-violation-subform . pk2c58) (syntax-violation-form . pk2c57) (syntax-violation . pke65) (simple-conditions . pk2c56) (serious-condition? . pk2c55) (non-continuable-violation? . pk2c54) (message-condition? . pk2c53) (make-who-condition . pk2c52) (make-warning . pk2c51) (make-violation . pk2c50) (make-undefined-violation . pk2c4f) (make-syntax-violation . pk2c4e) (make-serious-condition . pk2c4d) (make-non-continuable-violation . pk2c4c) (make-message-condition . pk2c4b) (make-lexical-violation . pk2c4a) (make-irritants-condition . pk2c49) (make-implementation-restriction-violation . pk2c48) (make-error . pk2c47) (make-assertion-violation . pk2c46) (lexical-violation? . pk2c45) (irritants-condition? . pk2c44) (implementation-restriction-violation? . pk2c43) (error? . pk2c42) (condition-who . pk2c41) (condition-predicate . pk2c40) (condition-message . pk2c3f) (condition-irritants . pk2c3e) (condition-accessor . pk2c3d) (condition . pk2c3c) (assertion-violation? . pk2c3b) (condition? . pk2c3a) (&undefined . pk2add) (&syntax . pk2adc) (&lexical . pk2adb) (&implementation-restriction . pk2ada) (&non-continuable . pk2ad9) (&who . pk2ad8) (&irritants . pk2ad7) (&assertion . pk2ad6) (&violation . pk2ad5) (&error . pk2ad4) (&serious . pk2ad3) (&warning . pk2ad2) (&message . pk2ad1) (&condition . pk2ad0) (define-condition-type . pk2acf)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e54 '(rnrs records inspection) '(6) '() '() '() '((record? . pk2d22) (record-type-uid . pk2d21) (record-type-sealed? . pk2d20) (record-type-parent . pk2d1f) (record-type-opaque? . pk2d1e) (record-type-name . pk2d1d) (record-type-generative? . pk2d1c) (record-type-field-names . pk2d1b) (record-rtd . pk2d1a) (record-field-mutable? . pk2d19)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e55 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . pk2d29) (record-predicate . pk2d28) (record-mutator . pk2d27) (record-constructor . pk2d26) (record-accessor . pk2d25) (make-record-type-descriptor . pk2d24) (make-record-constructor-descriptor . pk2d23)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e56 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . pk2acd) (parent-rtd . pk2acc) (nongenerative . pk2acb) (opaque . pk2aca) (sealed . pk2ac9) (protocol . pk2ac8) (parent . pk2ac7) (immutable . pk2ac6) (mutable . pk2ac5) (fields . pk2ac4) (record-constructor-descriptor . pk2aa4) (record-type-descriptor . pk2aa3)) '() values values '#f '#f '#t '#f) (pk999@pk7e5@install-library 'pk2e57 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . pk2e37) (&no-nans-rtd . pk2e36) (&no-infinities-rcd . pk2e35) (&no-infinities-rtd . pk2e34) (&i/o-encoding-rcd . pk2e33) (&i/o-encoding-rtd . pk2e32) (&i/o-decoding-rcd . pk2e31) (&i/o-decoding-rtd . pk2e30) (&i/o-port-rcd . pk2e2f) (&i/o-port-rtd . pk2e2e) (&i/o-file-does-not-exist-rcd . pk2e2d) (&i/o-file-does-not-exist-rtd . pk2e2c) (&i/o-file-already-exists-rcd . pk2e2b) (&i/o-file-already-exists-rtd . pk2e2a) (&i/o-file-is-read-only-rcd . pk2e29) (&i/o-file-is-read-only-rtd . pk2e28) (&i/o-file-protection-rcd . pk2e27) (&i/o-file-protection-rtd . pk2e26) (&i/o-filename-rcd . pk2e25) (&i/o-filename-rtd . pk2e24) (&i/o-invalid-position-rcd . pk2e23) (&i/o-invalid-position-rtd . pk2e22) (&i/o-write-rcd . pk2e21) (&i/o-write-rtd . pk2e20) (&i/o-read-rcd . pk2e1f) (&i/o-read-rtd . pk2e1e) (&i/o-rcd . pk2e1d) (&i/o-rtd . pk2e1c) (&undefined-rcd . pk2e1b) (&undefined-rtd . pk2e1a) (&syntax-rcd . pk2e19) (&syntax-rtd . pk2e18) (&lexical-rcd . pk2e17) (&lexical-rtd . pk2e16) (&implementation-restriction-rcd . pk2e15) (&implementation-restriction-rtd . pk2e14) (&non-continuable-rcd . pk2e13) (&non-continuable-rtd . pk2e12) (&who-rcd . pk2e11) (&who-rtd . pk2e10) (&irritants-rcd . pk2e0f) (&irritants-rtd . pk2e0e) (&assertion-rcd . pk2e0d) (&assertion-rtd . pk2e0c) (&violation-rcd . pk2e0b) (&violation-rtd . pk2e0a) (&error-rcd . pk2e09) (&error-rtd . pk2e08) (&serious-rcd . pk2e07) (&serious-rtd . pk2e06) (&warning-rcd . pk2e05) (&warning-rtd . pk2e04) (&message-rcd . pk2e03) (&message-rtd . pk2e02) (&condition-rcd . pk2e01) (&condition-rtd . pk2e00) (syntax-error . pke61) (syntax-dispatch . pkd85) (pretty-print . pk2dff) (eval-core . pk2dfe) (set-symbol-value! . pk2dfd) (symbol-value . pk2dfc) (gensym . pk2dfb) (void . pk2dfa) (load . pk2924) (interaction-environment . pke73) (char-ready? . pk2df9) (regexp? . pk2df8) (read-line . pk2df7) (gensym-prefix-set! . pk2df6) (ungensym . pk2df5) (alist->eq-hash-table . pk2df4) (assoc-ref . pk2df3) (print . pk2df2) (format . pk2df1) (host-os . pk2df0) (library-path . pk7c4) (standard-library-path . pk2def) (ssl-supported? . pk2dee) (ssl-socket? . pk2ded) (socket-sslize! . pk2dec) (%monapi-name-add! . pk2deb) (%monapi-message-receive . pk2dea) (%monapi-name-whereis . pk2de9) (%monapi-message-send . pk2de8) (file-newer? . pk2de7) (stat-mtime . pk2de6) (write-to-file . pk2de5) (file->list . pk2de4) (file->string . pk2de3) (digit->integer . pk2de2) (call-with-string-input-port . pk2de1) (call-with-string-io . pk2de0) (string-split . pk2ddf) (bytevector-for-each . pk2dde) (string->regexp . pk2ddd) (rxmatch . pk2ddc) (regexp-replace-all . pk2ddb) (hashtable-fold-left . pk2dda) (hashtable-for-each . pk2dd9) (mosh-cache-dir . pk5ae) (%call-process . pk2dd8) (local-tz-offset . pk2dd7) (microseconds . pk2dd6) (directory-list . pk2dd5) (set-current-directory! . pk2dd4) (expand-path . pk2dd3) (current-directory . pk2dd2) (%getpid . pk2dd1) (%spawn . pk2dd0) (%waitpid . pk2dcf) (simple-struct-name . pk2dce) (simple-struct-set! . pk2dcd) (simple-struct-ref . pk2dcc) (make-simple-struct . pk2dcb) (simple-struct? . pk2dca) (pointer-ref-c-int64 . pk2dc9) (pointer-ref-c-int32 . pk2dc8) (pointer-ref-c-int16 . pk2dc7) (pointer-ref-c-int8 . pk2dc6) (pointer-ref-c-uint64 . pk2dc5) (pointer-ref-c-uint32 . pk2dc4) (pointer-ref-c-uint16 . pk2dc3) (pointer-ref-c-uint8 . pk2dc2) (pointer-set-c-uint64! . pk2dc1) (pointer-set-c-uint32! . pk2dc0) (pointer-set-c-uint16! . pk2dbf) (pointer-set-c-uint8! . pk2dbe) (pointer-set-c-int64! . pk2dbd) (pointer-set-c-int32! . pk2dbc) (pointer-set-c-int16! . pk2dbb) (pointer-set-c-int8! . pk2dba) (pointer-set-c-pointer! . pk2db9) (pointer-set-c-double! . pk2db8) (pointer-set-c-float! . pk2db7) (pointer-set-c-long-long! . pk2db6) (pointer-set-c-long! . pk2db5) (pointer-set-c-int! . pk2db4) (pointer-set-c-short! . pk2db3) (pointer-set-c-char! . pk2db2) (pointer-ref-c-pointer . pk2db1) (pointer-ref-c-double . pk2db0) (pointer-ref-c-float . pk2daf) (pointer-ref-c-unsigned-long-long . pk2dae) (pointer-ref-c-signed-long-long . pk2dad) (pointer-ref-c-unsigned-long . pk2dac) (pointer-ref-c-signed-long . pk2dab) (pointer-ref-c-unsigned-int . pk2daa) (pointer-ref-c-signed-int . pk2da9) (pointer-ref-c-unsigned-short . pk2da8) (pointer-ref-c-signed-short . pk2da7) (pointer-ref-c-unsigned-char . pk2da6) (pointer-ref-c-signed-char . pk2da5) (pointer->integer . pk2da4) (integer->pointer . pk2da3) (pointer? . pk2da2) (shared-errno . pk2da1) (%ffi-free-c-callback-trampoline . pk2da0) (%ffi-make-c-callback-trampoline . pk2d9f) (%ffi-free . pk2d9e) (%ffi-malloc . pk2d9d) (%ffi-supported? . pk2d9c) (%ffi-pointer->string . pk2d9b) (%ffi-call . pk2d9a) (%ffi-lookup . pk2d99) (%ffi-open . pk2d98) (null-terminated-utf8->string . pk2d97) (null-terminated-bytevector->string . pk2d96) (%exec . pk2d95) (%fork . pk2d94) (%pipe . pk2d93) (p . pk2d92) (open-output-string . pk2d91) (get-output-string . pk2d90) (file-stat-ctime . pk2d8f) (file-stat-atime . pk2d8e) (file-stat-mtime . pk2d8d) (file-size-in-bytes . pk2d8c) (file-writable? . pk2d8b) (file-executable? . pk2d8a) (file-readable? . pk2d89) (file-regular? . pk2d88) (file-symbolic-link? . pk2d87) (file-directory? . pk2d86) (create-symbolic-link . pk2d85) (rename-file . pk2d84) (delete-directory . pk2d83) (create-directory . pk2d82) (create-mosh-cache-dir . pk2d81) (get-environment-variables . pk2d80) (current-exception-handler . pk2d7f) (get-environment-variable . pk2d7e) (join-wraps . pk2d7d) (id->real-label . pk2d7c) (same-marks? . pk2d7b) (same-marks*? . pk2d7a) (get-timeofday . pk2d79) (get-command-line . pk2d78) (sys-display . pk2d77) (whereis . pk2d76) (register . pk2d75) (vm-join! . pk2d74) (vm-set-value! . pk2d73) (vm? . pk2d72) (main-vm? . pk2d71) (vm-eval . pk2d70) (vm-self . pk2d6f) (vm-start! . pk2d6e) (make-vm . pk2d6d) (mutex-try-lock! . pk2d6c) (mutex-unlock! . pk2d6b) (mutex-lock! . pk2d6a) (mutex? . pk2d69) (make-mutex . pk2d68) (condition-variable-notify-all! . pk2d67) (condition-variable-notify! . pk2d66) (condition-variable-wait! . pk2d65) (make-condition-variable . pk2d64) (write/ss . pk2d63) (mosh-executable-path . pk2d62) (make-file-options . pk2d61) (source-info . pk2d60) (make-compiler-instruction . pk2d5f) (make-instruction . pk2d5e) (set-annotation! . pk2d5d) (get-annotation . pk2d5c) (annotated-pair? . pk2d5b) (annotated-cons . pk2d5a) (set-source-info! . pk2d59) (bignum? . pk2d58) (fast-equal? . pk2d57) (fasl-read . pk2d56) (fasl-write . pk2d55) (time-usage . pk2d54) (os-constant . pk2d53) (condition-printer . pk2d52) (disasm . pk2d51) (make-parameter . pk5ac) (socket-port . pk2d50) (socket-shutdown . pk2d4f) (socket-close . pk2d4e) (socket-send . pk2d4d) (socket-recv! . pk2d4c) (socket-recv . pk2d4b) (make-server-socket . pk2d4a) (make-client-socket . pk2d49) (socket-accept . pk2d48) (socket? . pk2d47) (string-upcase . pk2d46) (string-titlecase . pk2d45) (string-normalize-nfkd . pk2d44) (string-normalize-nfkc . pk2d43) (string-normalize-nfd . pk2d42) (string-normalize-nfc . pk2d41) (string-foldcase . pk2d40) (string-downcase . pk2d3f) (string-ci>? . pk2d3e) (string-ci>=? . pk2d3d) (string-ci=? . pk2d3c) (string-ci<? . pk2d3b) (string-ci<=? . pk2d3a) (char-whitespace? . pk2d39) (char-upper-case? . pk2d38) (char-title-case? . pk2d37) (char-numeric? . pk2d36) (char-lower-case? . pk2d35) (char-general-category . pk2d34) (char-upcase . pk2d33) (char-titlecase . pk2d32) (char-foldcase . pk2d31) (char-downcase . pk2d30) (char-ci>? . pk2d2f) (char-ci>=? . pk2d2e) (char-ci=? . pk2d2d) (char-ci<? . pk2d2c) (char-ci<=? . pk2d2b) (char-alphabetic? . pk2d2a) (make-variable-transformer . pkbb0) (identifier? . pke67) (generate-temporaries . pke53) (free-identifier=? . pke55) (syntax->datum . pke6b) (datum->syntax . pke69) (bound-identifier=? . pke57) (record-type-descriptor? . pk2d29) (record-predicate . pk2d28) (record-mutator . pk2d27) (record-constructor . pk2d26) (record-accessor . pk2d25) (make-record-type-descriptor . pk2d24) (make-record-constructor-descriptor . pk2d23) (record? . pk2d22) (record-type-uid . pk2d21) (record-type-sealed? . pk2d20) (record-type-parent . pk2d1f) (record-type-opaque? . pk2d1e) (record-type-name . pk2d1d) (record-type-generative? . pk2d1c) (record-type-field-names . pk2d1b) (record-rtd . pk2d1a) (record-field-mutable? . pk2d19) (delete-file . pk2d18) (file-exists? . pk2d17) (vector-sort! . pk2d16) (vector-sort . pk2d15) (list-sort . pk2d14) (symbol-hash . pk2d13) (string-ci-hash . pk2d12) (string-hash . pk2d11) (equal-hash . pk2d10) (hashtable-equivalence-function . pk2d0f) (make-hashtable . pk2d0e) (hashtable-hash-function . pk2d0d) (make-eqv-hashtable . pk2d0c) (make-eq-hashtable . pk2d0b) (hashtable? . pk2d0a) (hashtable-update! . pk2d09) (hashtable-size . pk2d08) (hashtable-set! . pk2d07) (hashtable-ref . pk2d06) (hashtable-mutable? . pk2d05) (hashtable-keys . pk2d04) (hashtable-entries . pk2d03) (hashtable-delete! . pk2d02) (hashtable-copy . pk2d01) (hashtable-contains? . pk2d00) (hashtable-clear! . pk2cff) (call-with-output-file . pk2cfe) (call-with-input-file . pk2cfd) (write-char . pk2cfc) (write . pk2cfb) (with-output-to-file . pk2cfa) (with-input-from-file . pk2cf9) (read-char . pk2cf8) (read . pk2cf7) (peek-char . pk2cf6) (open-output-file . pk2cf5) (open-input-file . pk2cf4) (newline . pk2cf3) (display . pk2cf2) (close-output-port . pk2cf1) (close-input-port . pk2cf0) (eof-object? . pk2cef) (eof-object . pk2cee) (current-error-port . pk2ced) (current-output-port . pk2cec) (current-input-port . pk2ceb) (output-port? . pk2cea) (input-port? . pk2ce9) (utf-8-codec . pk2ce8) (utf-16-codec . pk2ce7) (transcoder-error-handling-mode . pk2ce6) (transcoder-eol-style . pk2ce5) (transcoder-codec . pk2ce4) (transcoded-port . pk2ce3) (textual-port? . pk2ce2) (string->bytevector . pk2ce1) (standard-output-port . pk2ce0) (standard-input-port . pk2cdf) (standard-error-port . pk2cde) (set-port-position! . pk2cdd) (put-u8 . pk2cdc) (put-string . pk2cdb) (put-datum . pk2cda) (put-char . pk2cd9) (put-bytevector . pk2cd8) (port? . pk2cd7) (port-transcoder . pk2cd6) (port-position . pk2cd5) (port-has-set-port-position!? . pk2cd4) (port-has-port-position? . pk2cd3) (port-eof? . pk2cd2) (output-port-buffer-mode . pk2cd1) (open-string-output-port . pk2cd0) (open-string-input-port . pk2ccf) (open-file-output-port . pk2cce) (open-file-input/output-port . pk2ccd) (open-file-input-port . pk2ccc) (open-bytevector-output-port . pk2ccb) (open-bytevector-input-port . pk2cca) (native-transcoder . pk2cc9) (native-eol-style . pk2cc8) (make-transcoder . pk2cc7) (latin-1-codec . pk2cc6) (make-i/o-write-error . pk2cc5) (make-i/o-read-error . pk2cc4) (make-i/o-port-error . pk2cc3) (make-i/o-invalid-position-error . pk2cc2) (make-i/o-filename-error . pk2cc1) (make-i/o-file-protection-error . pk2cc0) (make-i/o-file-is-read-only-error . pk2cbf) (make-i/o-file-does-not-exist-error . pk2cbe) (make-i/o-file-already-exists-error . pk2cbd) (make-i/o-error . pk2cbc) (make-i/o-encoding-error . pk2cbb) (make-i/o-decoding-error . pk2cba) (make-custom-textual-output-port . pk2cb9) (make-custom-textual-input/output-port . pk2cb8) (make-custom-textual-input-port . pk2cb7) (make-custom-binary-output-port . pk2cb6) (make-custom-binary-input/output-port . pk2cb5) (make-custom-binary-input-port . pk2cb4) (make-bytevector . pk2cb3) (lookahead-u8 . pk2cb2) (lookahead-char . pk2cb1) (i/o-write-error? . pk2cb0) (i/o-read-error? . pk2caf) (i/o-port-error? . pk2cae) (i/o-invalid-position-error? . pk2cad) (i/o-filename-error? . pk2cac) (i/o-file-protection-error? . pk2cab) (i/o-file-is-read-only-error? . pk2caa) (i/o-file-does-not-exist-error? . pk2ca9) (i/o-file-already-exists-error? . pk2ca8) (i/o-error? . pk2ca7) (i/o-error-position . pk2ca6) (i/o-error-port . pk2ca5) (i/o-error-filename . pk2ca4) (i/o-encoding-error? . pk2ca3) (i/o-encoding-error-char . pk2ca2) (i/o-decoding-error? . pk2ca1) (get-u8 . pk2ca0) (get-string-n! . pk2c9f) (get-string-n . pk2c9e) (get-string-all . pk2c9d) (get-line . pk2c9c) (get-datum . pk2c9b) (get-char . pk2c9a) (get-bytevector-some . pk2c99) (get-bytevector-n! . pk2c98) (get-bytevector-n . pk2c97) (get-bytevector-all . pk2c96) (flush-output-port . pk2c95) (close-port . pk2c94) (scheme-report-environment . pke41) (quotient . pk2c93) (null-environment . pke3f) (remainder . pk2c92) (modulo . pk2c91) (inexact->exact . pk2c90) (force . pk2c8f) (exact->inexact . pk2c8e) (make-promise . pk2c8d) (exit . pk2c8c) (command-line . pk291e) (string-fill! . pk2c8b) (string-set! . pk2c8a) (set-cdr! . pk2c89) (set-car! . pk2c88) (remove . pk2c87) (remv . pk2c86) (remp . pk2c85) (remq . pk2c84) (partition . pk2c83) (memv . pk2c82) (memq . pk2c81) (memp . pk2c80) (member . pk2c7f) (exists . pk2c7e) (for-all . pk2c7d) (fold-right . pk2c7c) (fold-left . pk2c7b) (find . pk2c7a) (filter . pk2c79) (cons* . pk2c78) (assv . pk2c77) (assq . pk2c76) (assp . pk2c75) (assoc . pk2c74) (call-with-string-output-port . pk2c73) (call-with-port . pk2c72) (call-with-bytevector-output-port . pk2c71) (bytevector->string . pk2c70) (buffer-mode? . pk2c6f) (binary-port? . pk2c6e) (with-exception-handler . pk2c6d) (raise-continuable . pk2c6c) (raise . pk2c6b) (eval . pke45) (environment . pke3d) (make-enumeration . pk2c6a) (enum-set=? . pk2c69) (enum-set-universe . pk2c68) (enum-set-union . pk2c67) (enum-set-subset? . pk2c66) (enum-set-projection . pk2c65) (enum-set-member? . pk2c64) (enum-set-intersection . pk2c63) (enum-set-indexer . pk2c62) (enum-set-difference . pk2c61) (enum-set-constructor . pk2c60) (enum-set-complement . pk2c5f) (enum-set->list . pk2c5e) (who-condition? . pk2c5d) (warning? . pk2c5c) (violation? . pk2c5b) (undefined-violation? . pk2c5a) (syntax-violation? . pk2c59) (syntax-violation-subform . pk2c58) (syntax-violation-form . pk2c57) (syntax-violation . pke65) (simple-conditions . pk2c56) (serious-condition? . pk2c55) (non-continuable-violation? . pk2c54) (message-condition? . pk2c53) (make-who-condition . pk2c52) (make-warning . pk2c51) (make-violation . pk2c50) (make-undefined-violation . pk2c4f) (make-syntax-violation . pk2c4e) (make-serious-condition . pk2c4d) (make-non-continuable-violation . pk2c4c) (make-message-condition . pk2c4b) (make-lexical-violation . pk2c4a) (make-irritants-condition . pk2c49) (make-implementation-restriction-violation . pk2c48) (make-error . pk2c47) (make-assertion-violation . pk2c46) (lexical-violation? . pk2c45) (irritants-condition? . pk2c44) (implementation-restriction-violation? . pk2c43) (error? . pk2c42) (condition-who . pk2c41) (condition-predicate . pk2c40) (condition-message . pk2c3f) (condition-irritants . pk2c3e) (condition-accessor . pk2c3d) (condition . pk2c3c) (assertion-violation? . pk2c3b) (condition? . pk2c3a) (utf32->string . pk2c39) (utf16->string . pk2c38) (utf8->string . pk2c37) (uint-list->bytevector . pk2c36) (u8-list->bytevector . pk2c35) (string->utf8 . pk2c34) (string->utf32 . pk2c33) (string->utf16 . pk2c32) (sint-list->bytevector . pk2c31) (native-endianness . pk2c30) (bytevector? . pk2c2f) (bytevector=? . pk2c2e) (bytevector-uint-set! . pk2c2d) (bytevector-uint-ref . pk2c2c) (bytevector-u8-set! . pk2c2b) (bytevector-u8-ref . pk2c2a) (bytevector-u64-set! . pk2c29) (bytevector-u64-ref . pk2c28) (bytevector-u64-native-set! . pk2c27) (bytevector-u64-native-ref . pk2c26) (bytevector-u32-set! . pk2c25) (bytevector-u32-ref . pk2c24) (bytevector-u32-native-set! . pk2c23) (bytevector-u32-native-ref . pk2c22) (bytevector-u16-set! . pk2c21) (bytevector-u16-ref . pk2c20) (bytevector-u16-native-set! . pk2c1f) (bytevector-u16-native-ref . pk2c1e) (bytevector-sint-set! . pk2c1d) (bytevector-sint-ref . pk2c1c) (bytevector-s8-set! . pk2c1b) (bytevector-s8-ref . pk2c1a) (bytevector-s64-set! . pk2c19) (bytevector-s64-ref . pk2c18) (bytevector-s64-native-set! . pk2c17) (bytevector-s64-native-ref . pk2c16) (bytevector-s32-set! . pk2c15) (bytevector-s32-ref . pk2c14) (bytevector-s32-native-set! . pk2c13) (bytevector-s32-native-ref . pk2c12) (bytevector-s16-set! . pk2c11) (bytevector-s16-ref . pk2c10) (bytevector-s16-native-set! . pk2c0f) (bytevector-s16-native-ref . pk2c0e) (bytevector-length . pk2c0d) (bytevector-ieee-single-ref . pk2c0c) (bytevector-ieee-single-set! . pk2c0b) (bytevector-ieee-single-native-set! . pk2c0a) (bytevector-ieee-single-native-ref . pk2c09) (bytevector-ieee-double-set! . pk2c08) (bytevector-ieee-double-ref . pk2c07) (bytevector-ieee-double-native-set! . pk2c06) (bytevector-ieee-double-native-ref . pk2c05) (bytevector-fill! . pk2c04) (bytevector-copy! . pk2c03) (bytevector-copy . pk2c02) (bytevector->uint-list . pk2c01) (bytevector->u8-list . pk2c00) (bytevector->sint-list . pk2bff) (no-nans-violation? . pk2bfe) (no-infinities-violation? . pk2bfd) (make-no-nans-violation . pk2bfc) (make-no-infinities-violation . pk2bfb) (real->flonum . pk2bfa) (flzero? . pk2bf9) (fltruncate . pk2bf8) (fltan . pk2bf7) (flsqrt . pk2bf6) (flsin . pk2bf5) (flround . pk2bf4) (flpositive? . pk2bf3) (flonum? . pk2bf2) (flodd? . pk2bf1) (flnumerator . pk2bf0) (flnegative? . pk2bef) (flnan? . pk2bee) (flmod0 . pk2bed) (flmod . pk2bec) (flmin . pk2beb) (flmax . pk2bea) (fllog . pk2be9) (flinteger? . pk2be8) (flinfinite? . pk2be7) (flfloor . pk2be6) (flfinite? . pk2be5) (flexpt . pk2be4) (flexp . pk2be3) (fleven? . pk2be2) (fldiv0-and-mod0 . pk2be1) (fldiv0 . pk2be0) (fldiv-and-mod . pk2bdf) (fldiv . pk2bde) (fldenominator . pk2bdd) (flcos . pk2bdc) (flceiling . pk2bdb) (flatan . pk2bda) (flasin . pk2bd9) (flacos . pk2bd8) (flabs . pk2bd7) (fl>? . pk2bd6) (fl>=? . pk2bd5) (fl=? . pk2bd4) (fl<? . pk2bd3) (fl<=? . pk2bd2) (fl/ . pk2bd1) (fl- . pk2bd0) (fl+ . pk2bcf) (fl* . pk2bce) (fixnum->flonum . pk2bcd) (fxzero? . pk2bcc) (fxxor . pk2bcb) (fxrotate-bit-field . pk2bca) (fxreverse-bit-field . pk2bc9) (fxpositive? . pk2bc8) (fxodd? . pk2bc7) (fxnot . pk2bc6) (fxnegative? . pk2bc5) (fxmod0 . pk2bc4) (fxmod . pk2bc3) (fxmin . pk2bc2) (fxmax . pk2bc1) (fxlength . pk2bc0) (fxior . pk2bbf) (fxif . pk2bbe) (fxfirst-bit-set . pk2bbd) (fxeven? . pk2bbc) (fxdiv0-and-mod0 . pk2bbb) (fxdiv0 . pk2bba) (fxdiv-and-mod . pk2bb9) (fxdiv . pk2bb8) (fxcopy-bit-field . pk2bb7) (fxcopy-bit . pk2bb6) (fxbit-set? . pk2bb5) (fxbit-field . pk2bb4) (fxbit-count . pk2bb3) (fxarithmetic-shift-right . pk2bb2) (fxarithmetic-shift-left . pk2bb1) (fxarithmetic-shift . pk2bb0) (fxand . pk2baf) (fx>? . pk2bae) (fx>=? . pk2bad) (fx=? . pk2bac) (fx<? . pk2bab) (fx<=? . pk2baa) (fx-/carry . pk2ba9) (fx- . pk2ba8) (fx+/carry . pk2ba7) (fx+ . pk2ba6) (fx*/carry . pk2ba5) (fx* . pk2ba4) (greatest-fixnum . pk2ba3) (least-fixnum . pk2ba2) (fixnum-width . pk2ba1) (fixnum? . pk2ba0) (bitwise-rotate-bit-field . pk2b9f) (bitwise-reverse-bit-field . pk2b9e) (bitwise-length . pk2b9d) (bitwise-if . pk2b9c) (bitwise-first-bit-set . pk2b9b) (bitwise-copy-bit-field . pk2b9a) (bitwise-copy-bit . pk2b99) (bitwise-bit-set? . pk2b98) (bitwise-bit-field . pk2b97) (bitwise-bit-count . pk2b96) (bitwise-xor . pk2b95) (bitwise-ior . pk2b94) (bitwise-and . pk2b93) (bitwise-not . pk2b92) (bitwise-arithmetic-shift-right . pk2b91) (bitwise-arithmetic-shift-left . pk2b90) (bitwise-arithmetic-shift . pk2b8f) (zero? . pk2b8e) (vector? . pk2b8d) (vector-set! . pk2b8c) (vector-ref . pk2b8b) (vector-map . pk2b8a) (vector-length . pk2b89) (vector-for-each . pk2b88) (vector-fill! . pk2b87) (vector->list . pk2b86) (vector . pk2b85) (values . pk2b84) (truncate . pk2b83) (tan . pk2b82) (symbol? . pk2b81) (symbol=? . pk2b80) (symbol->string . pk2b7f) (substring . pk2b7e) (string? . pk2b7d) (string>? . pk2b7c) (string>=? . pk2b7b) (string=? . pk2b7a) (string<? . pk2b79) (string<=? . pk2b78) (string-ref . pk2b77) (string-length . pk2b76) (string-for-each . pk2b75) (string-copy . pk2b74) (string-append . pk2b73) (string->symbol . pk2b72) (string->number . pk2b71) (string->list . pk2b70) (string . pk2b6f) (sqrt . pk2b6e) (sin . pk2b6d) (round . pk2b6c) (reverse . pk2b6b) (real? . pk2b6a) (real-valued? . pk2b69) (real-part . pk2b68) (rationalize . pk2b67) (rational? . pk2b66) (rational-valued? . pk2b65) (procedure? . pk2b64) (positive? . pk2b63) (pair? . pk2b62) (odd? . pk2b61) (numerator . pk2b60) (number? . pk2b5f) (number->string . pk2b5e) (null? . pk2b5d) (not . pk2b5c) (negative? . pk2b5b) (nan? . pk2b5a) (min . pk2b59) (max . pk2b58) (map . pk2b57) (make-vector . pk2b56) (make-string . pk2b55) (make-rectangular . pk2b54) (make-polar . pk2b53) (magnitude . pk2b52) (log . pk2b51) (list? . pk2b50) (list-tail . pk2b4f) (list-ref . pk2b4e) (list->vector . pk2b4d) (list->string . pk2b4c) (list . pk2b4b) (length . pk2b4a) (lcm . pk2b49) (integer? . pk2b48) (integer-valued? . pk2b47) (integer->char . pk2b46) (infinite? . pk2b45) (inexact? . pk2b44) (inexact . pk2b43) (imag-part . pk2b42) (gcd . pk2b41) (for-each . pk2b40) (floor . pk2b3f) (finite? . pk2b3e) (expt . pk2b3d) (exp . pk2b3c) (exact? . pk2b3b) (exact-integer-sqrt . pk2b3a) (exact . pk2b39) (even? . pk2b38) (error . pk2b37) (eqv? . pk2b36) (equal? . pk2b35) (eq? . pk2b34) (dynamic-wind . pk2b33) (div0-and-mod0 . pk2b32) (mod0 . pk2b31) (div0 . pk2b30) (div-and-mod . pk2b2f) (mod . pk2b2e) (div . pk2b2d) (denominator . pk2b2c) (cos . pk2b2b) (cons . pk2b2a) (complex? . pk2b29) (char? . pk2b28) (char>? . pk2b27) (char>=? . pk2b26) (char=? . pk2b25) (char<? . pk2b24) (char<=? . pk2b23) (char->integer . pk2b22) (ceiling . pk2b21) (call-with-values . pk2b20) (call/cc . pk2b1f) (call-with-current-continuation . pk2b1e) (cddddr . pk2b1d) (cdddar . pk2b1c) (cddadr . pk2b1b) (cddaar . pk2b1a) (cdaddr . pk2b19) (cdadar . pk2b18) (cdaadr . pk2b17) (cdaaar . pk2b16) (cadddr . pk2b15) (caddar . pk2b14) (cadadr . pk2b13) (cadaar . pk2b12) (caaddr . pk2b11) (caadar . pk2b10) (caaadr . pk2b0f) (caaaar . pk2b0e) (cdddr . pk2b0d) (cddar . pk2b0c) (cdadr . pk2b0b) (cdaar . pk2b0a) (caddr . pk2b09) (cadar . pk2b08) (caadr . pk2b07) (caaar . pk2b06) (cddr . pk2b05) (cdar . pk2b04) (cadr . pk2b03) (caar . pk2b02) (cdr . pk2b01) (car . pk2b00) (boolean? . pk2aff) (boolean=? . pk2afe) (atan . pk2afd) (assertion-violation . pk2afc) (assertion-error . pke5f) (asin . pk2afb) (apply . pk2afa) (append . pk2af9) (angle . pk2af8) (acos . pk2af7) (abs . pk2af6) (/ . pk2af5) (* . pk2af4) (- . pk2af3) (+ . pk2af2) (>= . pk2af1) (> . pk2af0) (= . pk2aef) (<= . pk2aee) (< . pk2aed) (library . pk2aec) (&no-nans . pk2aeb) (&no-infinities . pk2aea) (&i/o-encoding . pk2ae9) (&i/o-decoding . pk2ae8) (&i/o-port . pk2ae7) (&i/o-file-does-not-exist . pk2ae6) (&i/o-file-already-exists . pk2ae5) (&i/o-file-is-read-only . pk2ae4) (&i/o-file-protection . pk2ae3) (&i/o-filename . pk2ae2) (&i/o-invalid-position . pk2ae1) (&i/o-write . pk2ae0) (&i/o-read . pk2adf) (&i/o . pk2ade) (&undefined . pk2add) (&syntax . pk2adc) (&lexical . pk2adb) (&implementation-restriction . pk2ada) (&non-continuable . pk2ad9) (&who . pk2ad8) (&irritants . pk2ad7) (&assertion . pk2ad6) (&violation . pk2ad5) (&error . pk2ad4) (&serious . pk2ad3) (&warning . pk2ad2) (&message . pk2ad1) (&condition . pk2ad0) (define-condition-type . pk2acf) (define-enumeration . pk2ace) (define-record-type . pk2acd) (parent-rtd . pk2acc) (nongenerative . pk2acb) (opaque . pk2aca) (sealed . pk2ac9) (protocol . pk2ac8) (parent . pk2ac7) (immutable . pk2ac6) (mutable . pk2ac5) (fields . pk2ac4) (error-handling-mode . pk2ac3) (file-options . pk2ac2) (buffer-mode . pk2ac1) (eol-style . pk2ac0) (guard . pk2abf) (trace-define . pk2abe) (trace-lambda . pk2abd) (unsyntax-splicing . pk2abc) (unsyntax . pk2abb) (unquote-splicing . pk2aba) (unquote . pk2ab9) (_ . pk2ab8) (else . pk2ab7) (=> . pk2ab6) (... . pk2ab5) (assert . pk2ab4) (endianness . pk2ab3) (delay . pk2ab2) (time . pk2ab1) (do . pk2ab0) (cond . pk2aaf) (let* . pk2aae) (let*-values . pk2aad) (let-values . pk2aac) (identifier-syntax . pk2aab) (with-syntax . pk2aaa) (quasisyntax . pk2aa9) (quasiquote . pk2aa8) (syntax-rules . pk2aa7) (include . pk2aa6) (define-struct . pk2aa5) (record-constructor-descriptor . pk2aa4) (record-type-descriptor . pk2aa3) (case . pk2aa2) (parameterize . pk2aa1) (unless . pk2aa0) (when . pk2a9f) (or . pk2a9e) (and . pk2a9d) (if . pk2a9c) (let . pk2a9b) (letrec* . pk2a9a) (letrec . pk2a99) (type-descriptor . pk2a98) (case-lambda . pk2a97) (lambda . pk2a96) (syntax . pk2a95) (syntax-case . pk2a94) (quote . pk2a93) (foreign-call . pk2a92) (letrec-syntax . pk2a91) (let-syntax . pk2a90) (set! . pk2a8f) (import . pk2a8e) (begin . pk2a8d) (module . pk2a8c) (define-syntax . pk2a8b) (define . pk2a8a)) '((pk2e37 core-prim . &no-nans-rcd) (pk2e36 core-prim . &no-nans-rtd) (pk2e35 core-prim . &no-infinities-rcd) (pk2e34 core-prim . &no-infinities-rtd) (pk2e33 core-prim . &i/o-encoding-rcd) (pk2e32 core-prim . &i/o-encoding-rtd) (pk2e31 core-prim . &i/o-decoding-rcd) (pk2e30 core-prim . &i/o-decoding-rtd) (pk2e2f core-prim . &i/o-port-rcd) (pk2e2e core-prim . &i/o-port-rtd) (pk2e2d core-prim . &i/o-file-does-not-exist-rcd) (pk2e2c core-prim . &i/o-file-does-not-exist-rtd) (pk2e2b core-prim . &i/o-file-already-exists-rcd) (pk2e2a core-prim . &i/o-file-already-exists-rtd) (pk2e29 core-prim . &i/o-file-is-read-only-rcd) (pk2e28 core-prim . &i/o-file-is-read-only-rtd) (pk2e27 core-prim . &i/o-file-protection-rcd) (pk2e26 core-prim . &i/o-file-protection-rtd) (pk2e25 core-prim . &i/o-filename-rcd) (pk2e24 core-prim . &i/o-filename-rtd) (pk2e23 core-prim . &i/o-invalid-position-rcd) (pk2e22 core-prim . &i/o-invalid-position-rtd) (pk2e21 core-prim . &i/o-write-rcd) (pk2e20 core-prim . &i/o-write-rtd) (pk2e1f core-prim . &i/o-read-rcd) (pk2e1e core-prim . &i/o-read-rtd) (pk2e1d core-prim . &i/o-rcd) (pk2e1c core-prim . &i/o-rtd) (pk2e1b core-prim . &undefined-rcd) (pk2e1a core-prim . &undefined-rtd) (pk2e19 core-prim . &syntax-rcd) (pk2e18 core-prim . &syntax-rtd) (pk2e17 core-prim . &lexical-rcd) (pk2e16 core-prim . &lexical-rtd) (pk2e15 core-prim . &implementation-restriction-rcd) (pk2e14 core-prim . &implementation-restriction-rtd) (pk2e13 core-prim . &non-continuable-rcd) (pk2e12 core-prim . &non-continuable-rtd) (pk2e11 core-prim . &who-rcd) (pk2e10 core-prim . &who-rtd) (pk2e0f core-prim . &irritants-rcd) (pk2e0e core-prim . &irritants-rtd) (pk2e0d core-prim . &assertion-rcd) (pk2e0c core-prim . &assertion-rtd) (pk2e0b core-prim . &violation-rcd) (pk2e0a core-prim . &violation-rtd) (pk2e09 core-prim . &error-rcd) (pk2e08 core-prim . &error-rtd) (pk2e07 core-prim . &serious-rcd) (pk2e06 core-prim . &serious-rtd) (pk2e05 core-prim . &warning-rcd) (pk2e04 core-prim . &warning-rtd) (pk2e03 core-prim . &message-rcd) (pk2e02 core-prim . &message-rtd) (pk2e01 core-prim . &condition-rcd) (pk2e00 core-prim . &condition-rtd) (pke61 core-prim . syntax-error) (pkd85 core-prim . syntax-dispatch) (pk2dff core-prim . pretty-print) (pk2dfe core-prim . eval-core) (pk2dfd core-prim . set-symbol-value!) (pk2dfc core-prim . symbol-value) (pk2dfb core-prim . gensym) (pk2dfa core-prim . void) (pk2924 core-prim . load) (pke73 core-prim . interaction-environment) (pk2df9 core-prim . char-ready?) (pk2df8 core-prim . regexp?) (pk2df7 core-prim . read-line) (pk2df6 core-prim . gensym-prefix-set!) (pk2df5 core-prim . ungensym) (pk2df4 core-prim . alist->eq-hash-table) (pk2df3 core-prim . assoc-ref) (pk2df2 core-prim . print) (pk2df1 core-prim . format) (pk2df0 core-prim . host-os) (pk7c4 core-prim . library-path) (pk2def core-prim . standard-library-path) (pk2dee core-prim . ssl-supported?) (pk2ded core-prim . ssl-socket?) (pk2dec core-prim . socket-sslize!) (pk2deb core-prim . %monapi-name-add!) (pk2dea core-prim . %monapi-message-receive) (pk2de9 core-prim . %monapi-name-whereis) (pk2de8 core-prim . %monapi-message-send) (pk2de7 core-prim . file-newer?) (pk2de6 core-prim . stat-mtime) (pk2de5 core-prim . write-to-file) (pk2de4 core-prim . file->list) (pk2de3 core-prim . file->string) (pk2de2 core-prim . digit->integer) (pk2de1 core-prim . call-with-string-input-port) (pk2de0 core-prim . call-with-string-io) (pk2ddf core-prim . string-split) (pk2dde core-prim . bytevector-for-each) (pk2ddd core-prim . string->regexp) (pk2ddc core-prim . rxmatch) (pk2ddb core-prim . regexp-replace-all) (pk2dda core-prim . hashtable-fold-left) (pk2dd9 core-prim . hashtable-for-each) (pk5ae core-prim . mosh-cache-dir) (pk2dd8 core-prim . %call-process) (pk2dd7 core-prim . local-tz-offset) (pk2dd6 core-prim . microseconds) (pk2dd5 core-prim . directory-list) (pk2dd4 core-prim . set-current-directory!) (pk2dd3 core-prim . expand-path) (pk2dd2 core-prim . current-directory) (pk2dd1 core-prim . %getpid) (pk2dd0 core-prim . %spawn) (pk2dcf core-prim . %waitpid) (pk2dce core-prim . simple-struct-name) (pk2dcd core-prim . simple-struct-set!) (pk2dcc core-prim . simple-struct-ref) (pk2dcb core-prim . make-simple-struct) (pk2dca core-prim . simple-struct?) (pk2dc9 core-prim . pointer-ref-c-int64) (pk2dc8 core-prim . pointer-ref-c-int32) (pk2dc7 core-prim . pointer-ref-c-int16) (pk2dc6 core-prim . pointer-ref-c-int8) (pk2dc5 core-prim . pointer-ref-c-uint64) (pk2dc4 core-prim . pointer-ref-c-uint32) (pk2dc3 core-prim . pointer-ref-c-uint16) (pk2dc2 core-prim . pointer-ref-c-uint8) (pk2dc1 core-prim . pointer-set-c-uint64!) (pk2dc0 core-prim . pointer-set-c-uint32!) (pk2dbf core-prim . pointer-set-c-uint16!) (pk2dbe core-prim . pointer-set-c-uint8!) (pk2dbd core-prim . pointer-set-c-int64!) (pk2dbc core-prim . pointer-set-c-int32!) (pk2dbb core-prim . pointer-set-c-int16!) (pk2dba core-prim . pointer-set-c-int8!) (pk2db9 core-prim . pointer-set-c-pointer!) (pk2db8 core-prim . pointer-set-c-double!) (pk2db7 core-prim . pointer-set-c-float!) (pk2db6 core-prim . pointer-set-c-long-long!) (pk2db5 core-prim . pointer-set-c-long!) (pk2db4 core-prim . pointer-set-c-int!) (pk2db3 core-prim . pointer-set-c-short!) (pk2db2 core-prim . pointer-set-c-char!) (pk2db1 core-prim . pointer-ref-c-pointer) (pk2db0 core-prim . pointer-ref-c-double) (pk2daf core-prim . pointer-ref-c-float) (pk2dae core-prim . pointer-ref-c-unsigned-long-long) (pk2dad core-prim . pointer-ref-c-signed-long-long) (pk2dac core-prim . pointer-ref-c-unsigned-long) (pk2dab core-prim . pointer-ref-c-signed-long) (pk2daa core-prim . pointer-ref-c-unsigned-int) (pk2da9 core-prim . pointer-ref-c-signed-int) (pk2da8 core-prim . pointer-ref-c-unsigned-short) (pk2da7 core-prim . pointer-ref-c-signed-short) (pk2da6 core-prim . pointer-ref-c-unsigned-char) (pk2da5 core-prim . pointer-ref-c-signed-char) (pk2da4 core-prim . pointer->integer) (pk2da3 core-prim . integer->pointer) (pk2da2 core-prim . pointer?) (pk2da1 core-prim . shared-errno) (pk2da0 core-prim . %ffi-free-c-callback-trampoline) (pk2d9f core-prim . %ffi-make-c-callback-trampoline) (pk2d9e core-prim . %ffi-free) (pk2d9d core-prim . %ffi-malloc) (pk2d9c core-prim . %ffi-supported?) (pk2d9b core-prim . %ffi-pointer->string) (pk2d9a core-prim . %ffi-call) (pk2d99 core-prim . %ffi-lookup) (pk2d98 core-prim . %ffi-open) (pk2d97 core-prim . null-terminated-utf8->string) (pk2d96 core-prim . null-terminated-bytevector->string) (pk2d95 core-prim . %exec) (pk2d94 core-prim . %fork) (pk2d93 core-prim . %pipe) (pk2d92 core-prim . p) (pk2d91 core-prim . open-output-string) (pk2d90 core-prim . get-output-string) (pk2d8f core-prim . file-stat-ctime) (pk2d8e core-prim . file-stat-atime) (pk2d8d core-prim . file-stat-mtime) (pk2d8c core-prim . file-size-in-bytes) (pk2d8b core-prim . file-writable?) (pk2d8a core-prim . file-executable?) (pk2d89 core-prim . file-readable?) (pk2d88 core-prim . file-regular?) (pk2d87 core-prim . file-symbolic-link?) (pk2d86 core-prim . file-directory?) (pk2d85 core-prim . create-symbolic-link) (pk2d84 core-prim . rename-file) (pk2d83 core-prim . delete-directory) (pk2d82 core-prim . create-directory) (pk2d81 core-prim . create-mosh-cache-dir) (pk2d80 core-prim . get-environment-variables) (pk2d7f core-prim . current-exception-handler) (pk2d7e core-prim . get-environment-variable) (pk2d7d core-prim . join-wraps) (pk2d7c core-prim . id->real-label) (pk2d7b core-prim . same-marks?) (pk2d7a core-prim . same-marks*?) (pk2d79 core-prim . get-timeofday) (pk2d78 core-prim . get-command-line) (pk2d77 core-prim . sys-display) (pk2d76 core-prim . whereis) (pk2d75 core-prim . register) (pk2d74 core-prim . vm-join!) (pk2d73 core-prim . vm-set-value!) (pk2d72 core-prim . vm?) (pk2d71 core-prim . main-vm?) (pk2d70 core-prim . vm-eval) (pk2d6f core-prim . vm-self) (pk2d6e core-prim . vm-start!) (pk2d6d core-prim . make-vm) (pk2d6c core-prim . mutex-try-lock!) (pk2d6b core-prim . mutex-unlock!) (pk2d6a core-prim . mutex-lock!) (pk2d69 core-prim . mutex?) (pk2d68 core-prim . make-mutex) (pk2d67 core-prim . condition-variable-notify-all!) (pk2d66 core-prim . condition-variable-notify!) (pk2d65 core-prim . condition-variable-wait!) (pk2d64 core-prim . make-condition-variable) (pk2d63 core-prim . write/ss) (pk2d62 core-prim . mosh-executable-path) (pk2d61 core-prim . make-file-options) (pk2d60 core-prim . source-info) (pk2d5f core-prim . make-compiler-instruction) (pk2d5e core-prim . make-instruction) (pk2d5d core-prim . set-annotation!) (pk2d5c core-prim . get-annotation) (pk2d5b core-prim . annotated-pair?) (pk2d5a core-prim . annotated-cons) (pk2d59 core-prim . set-source-info!) (pk2d58 core-prim . bignum?) (pk2d57 core-prim . fast-equal?) (pk2d56 core-prim . fasl-read) (pk2d55 core-prim . fasl-write) (pk2d54 core-prim . time-usage) (pk2d53 core-prim . os-constant) (pk2d52 core-prim . condition-printer) (pk2d51 core-prim . disasm) (pk5ac core-prim . make-parameter) (pk2d50 core-prim . socket-port) (pk2d4f core-prim . socket-shutdown) (pk2d4e core-prim . socket-close) (pk2d4d core-prim . socket-send) (pk2d4c core-prim . socket-recv!) (pk2d4b core-prim . socket-recv) (pk2d4a core-prim . make-server-socket) (pk2d49 core-prim . make-client-socket) (pk2d48 core-prim . socket-accept) (pk2d47 core-prim . socket?) (pk2d46 core-prim . string-upcase) (pk2d45 core-prim . string-titlecase) (pk2d44 core-prim . string-normalize-nfkd) (pk2d43 core-prim . string-normalize-nfkc) (pk2d42 core-prim . string-normalize-nfd) (pk2d41 core-prim . string-normalize-nfc) (pk2d40 core-prim . string-foldcase) (pk2d3f core-prim . string-downcase) (pk2d3e core-prim . string-ci>?) (pk2d3d core-prim . string-ci>=?) (pk2d3c core-prim . string-ci=?) (pk2d3b core-prim . string-ci<?) (pk2d3a core-prim . string-ci<=?) (pk2d39 core-prim . char-whitespace?) (pk2d38 core-prim . char-upper-case?) (pk2d37 core-prim . char-title-case?) (pk2d36 core-prim . char-numeric?) (pk2d35 core-prim . char-lower-case?) (pk2d34 core-prim . char-general-category) (pk2d33 core-prim . char-upcase) (pk2d32 core-prim . char-titlecase) (pk2d31 core-prim . char-foldcase) (pk2d30 core-prim . char-downcase) (pk2d2f core-prim . char-ci>?) (pk2d2e core-prim . char-ci>=?) (pk2d2d core-prim . char-ci=?) (pk2d2c core-prim . char-ci<?) (pk2d2b core-prim . char-ci<=?) (pk2d2a core-prim . char-alphabetic?) (pkbb0 core-prim . make-variable-transformer) (pke67 core-prim . identifier?) (pke53 core-prim . generate-temporaries) (pke55 core-prim . free-identifier=?) (pke6b core-prim . syntax->datum) (pke69 core-prim . datum->syntax) (pke57 core-prim . bound-identifier=?) (pk2d29 core-prim . record-type-descriptor?) (pk2d28 core-prim . record-predicate) (pk2d27 core-prim . record-mutator) (pk2d26 core-prim . record-constructor) (pk2d25 core-prim . record-accessor) (pk2d24 core-prim . make-record-type-descriptor) (pk2d23 core-prim . make-record-constructor-descriptor) (pk2d22 core-prim . record?) (pk2d21 core-prim . record-type-uid) (pk2d20 core-prim . record-type-sealed?) (pk2d1f core-prim . record-type-parent) (pk2d1e core-prim . record-type-opaque?) (pk2d1d core-prim . record-type-name) (pk2d1c core-prim . record-type-generative?) (pk2d1b core-prim . record-type-field-names) (pk2d1a core-prim . record-rtd) (pk2d19 core-prim . record-field-mutable?) (pk2d18 core-prim . delete-file) (pk2d17 core-prim . file-exists?) (pk2d16 core-prim . vector-sort!) (pk2d15 core-prim . vector-sort) (pk2d14 core-prim . list-sort) (pk2d13 core-prim . symbol-hash) (pk2d12 core-prim . string-ci-hash) (pk2d11 core-prim . string-hash) (pk2d10 core-prim . equal-hash) (pk2d0f core-prim . hashtable-equivalence-function) (pk2d0e core-prim . make-hashtable) (pk2d0d core-prim . hashtable-hash-function) (pk2d0c core-prim . make-eqv-hashtable) (pk2d0b core-prim . make-eq-hashtable) (pk2d0a core-prim . hashtable?) (pk2d09 core-prim . hashtable-update!) (pk2d08 core-prim . hashtable-size) (pk2d07 core-prim . hashtable-set!) (pk2d06 core-prim . hashtable-ref) (pk2d05 core-prim . hashtable-mutable?) (pk2d04 core-prim . hashtable-keys) (pk2d03 core-prim . hashtable-entries) (pk2d02 core-prim . hashtable-delete!) (pk2d01 core-prim . hashtable-copy) (pk2d00 core-prim . hashtable-contains?) (pk2cff core-prim . hashtable-clear!) (pk2cfe core-prim . call-with-output-file) (pk2cfd core-prim . call-with-input-file) (pk2cfc core-prim . write-char) (pk2cfb core-prim . write) (pk2cfa core-prim . with-output-to-file) (pk2cf9 core-prim . with-input-from-file) (pk2cf8 core-prim . read-char) (pk2cf7 core-prim . read) (pk2cf6 core-prim . peek-char) (pk2cf5 core-prim . open-output-file) (pk2cf4 core-prim . open-input-file) (pk2cf3 core-prim . newline) (pk2cf2 core-prim . display) (pk2cf1 core-prim . close-output-port) (pk2cf0 core-prim . close-input-port) (pk2cef core-prim . eof-object?) (pk2cee core-prim . eof-object) (pk2ced core-prim . current-error-port) (pk2cec core-prim . current-output-port) (pk2ceb core-prim . current-input-port) (pk2cea core-prim . output-port?) (pk2ce9 core-prim . input-port?) (pk2ce8 core-prim . utf-8-codec) (pk2ce7 core-prim . utf-16-codec) (pk2ce6 core-prim . transcoder-error-handling-mode) (pk2ce5 core-prim . transcoder-eol-style) (pk2ce4 core-prim . transcoder-codec) (pk2ce3 core-prim . transcoded-port) (pk2ce2 core-prim . textual-port?) (pk2ce1 core-prim . string->bytevector) (pk2ce0 core-prim . standard-output-port) (pk2cdf core-prim . standard-input-port) (pk2cde core-prim . standard-error-port) (pk2cdd core-prim . set-port-position!) (pk2cdc core-prim . put-u8) (pk2cdb core-prim . put-string) (pk2cda core-prim . put-datum) (pk2cd9 core-prim . put-char) (pk2cd8 core-prim . put-bytevector) (pk2cd7 core-prim . port?) (pk2cd6 core-prim . port-transcoder) (pk2cd5 core-prim . port-position) (pk2cd4 core-prim . port-has-set-port-position!?) (pk2cd3 core-prim . port-has-port-position?) (pk2cd2 core-prim . port-eof?) (pk2cd1 core-prim . output-port-buffer-mode) (pk2cd0 core-prim . open-string-output-port) (pk2ccf core-prim . open-string-input-port) (pk2cce core-prim . open-file-output-port) (pk2ccd core-prim . open-file-input/output-port) (pk2ccc core-prim . open-file-input-port) (pk2ccb core-prim . open-bytevector-output-port) (pk2cca core-prim . open-bytevector-input-port) (pk2cc9 core-prim . native-transcoder) (pk2cc8 core-prim . native-eol-style) (pk2cc7 core-prim . make-transcoder) (pk2cc6 core-prim . latin-1-codec) (pk2cc5 core-prim . make-i/o-write-error) (pk2cc4 core-prim . make-i/o-read-error) (pk2cc3 core-prim . make-i/o-port-error) (pk2cc2 core-prim . make-i/o-invalid-position-error) (pk2cc1 core-prim . make-i/o-filename-error) (pk2cc0 core-prim . make-i/o-file-protection-error) (pk2cbf core-prim . make-i/o-file-is-read-only-error) (pk2cbe core-prim . make-i/o-file-does-not-exist-error) (pk2cbd core-prim . make-i/o-file-already-exists-error) (pk2cbc core-prim . make-i/o-error) (pk2cbb core-prim . make-i/o-encoding-error) (pk2cba core-prim . make-i/o-decoding-error) (pk2cb9 core-prim . make-custom-textual-output-port) (pk2cb8 core-prim . make-custom-textual-input/output-port) (pk2cb7 core-prim . make-custom-textual-input-port) (pk2cb6 core-prim . make-custom-binary-output-port) (pk2cb5 core-prim . make-custom-binary-input/output-port) (pk2cb4 core-prim . make-custom-binary-input-port) (pk2cb3 core-prim . make-bytevector) (pk2cb2 core-prim . lookahead-u8) (pk2cb1 core-prim . lookahead-char) (pk2cb0 core-prim . i/o-write-error?) (pk2caf core-prim . i/o-read-error?) (pk2cae core-prim . i/o-port-error?) (pk2cad core-prim . i/o-invalid-position-error?) (pk2cac core-prim . i/o-filename-error?) (pk2cab core-prim . i/o-file-protection-error?) (pk2caa core-prim . i/o-file-is-read-only-error?) (pk2ca9 core-prim . i/o-file-does-not-exist-error?) (pk2ca8 core-prim . i/o-file-already-exists-error?) (pk2ca7 core-prim . i/o-error?) (pk2ca6 core-prim . i/o-error-position) (pk2ca5 core-prim . i/o-error-port) (pk2ca4 core-prim . i/o-error-filename) (pk2ca3 core-prim . i/o-encoding-error?) (pk2ca2 core-prim . i/o-encoding-error-char) (pk2ca1 core-prim . i/o-decoding-error?) (pk2ca0 core-prim . get-u8) (pk2c9f core-prim . get-string-n!) (pk2c9e core-prim . get-string-n) (pk2c9d core-prim . get-string-all) (pk2c9c core-prim . get-line) (pk2c9b core-prim . get-datum) (pk2c9a core-prim . get-char) (pk2c99 core-prim . get-bytevector-some) (pk2c98 core-prim . get-bytevector-n!) (pk2c97 core-prim . get-bytevector-n) (pk2c96 core-prim . get-bytevector-all) (pk2c95 core-prim . flush-output-port) (pk2c94 core-prim . close-port) (pke41 core-prim . scheme-report-environment) (pk2c93 core-prim . quotient) (pke3f core-prim . null-environment) (pk2c92 core-prim . remainder) (pk2c91 core-prim . modulo) (pk2c90 core-prim . inexact->exact) (pk2c8f core-prim . force) (pk2c8e core-prim . exact->inexact) (pk2c8d core-prim . make-promise) (pk2c8c core-prim . exit) (pk291e core-prim . command-line) (pk2c8b core-prim . string-fill!) (pk2c8a core-prim . string-set!) (pk2c89 core-prim . set-cdr!) (pk2c88 core-prim . set-car!) (pk2c87 core-prim . remove) (pk2c86 core-prim . remv) (pk2c85 core-prim . remp) (pk2c84 core-prim . remq) (pk2c83 core-prim . partition) (pk2c82 core-prim . memv) (pk2c81 core-prim . memq) (pk2c80 core-prim . memp) (pk2c7f core-prim . member) (pk2c7e core-prim . exists) (pk2c7d core-prim . for-all) (pk2c7c core-prim . fold-right) (pk2c7b core-prim . fold-left) (pk2c7a core-prim . find) (pk2c79 core-prim . filter) (pk2c78 core-prim . cons*) (pk2c77 core-prim . assv) (pk2c76 core-prim . assq) (pk2c75 core-prim . assp) (pk2c74 core-prim . assoc) (pk2c73 core-prim . call-with-string-output-port) (pk2c72 core-prim . call-with-port) (pk2c71 core-prim . call-with-bytevector-output-port) (pk2c70 core-prim . bytevector->string) (pk2c6f core-prim . buffer-mode?) (pk2c6e core-prim . binary-port?) (pk2c6d core-prim . with-exception-handler) (pk2c6c core-prim . raise-continuable) (pk2c6b core-prim . raise) (pke45 core-prim . eval) (pke3d core-prim . environment) (pk2c6a core-prim . make-enumeration) (pk2c69 core-prim . enum-set=?) (pk2c68 core-prim . enum-set-universe) (pk2c67 core-prim . enum-set-union) (pk2c66 core-prim . enum-set-subset?) (pk2c65 core-prim . enum-set-projection) (pk2c64 core-prim . enum-set-member?) (pk2c63 core-prim . enum-set-intersection) (pk2c62 core-prim . enum-set-indexer) (pk2c61 core-prim . enum-set-difference) (pk2c60 core-prim . enum-set-constructor) (pk2c5f core-prim . enum-set-complement) (pk2c5e core-prim . enum-set->list) (pk2c5d core-prim . who-condition?) (pk2c5c core-prim . warning?) (pk2c5b core-prim . violation?) (pk2c5a core-prim . undefined-violation?) (pk2c59 core-prim . syntax-violation?) (pk2c58 core-prim . syntax-violation-subform) (pk2c57 core-prim . syntax-violation-form) (pke65 core-prim . syntax-violation) (pk2c56 core-prim . simple-conditions) (pk2c55 core-prim . serious-condition?) (pk2c54 core-prim . non-continuable-violation?) (pk2c53 core-prim . message-condition?) (pk2c52 core-prim . make-who-condition) (pk2c51 core-prim . make-warning) (pk2c50 core-prim . make-violation) (pk2c4f core-prim . make-undefined-violation) (pk2c4e core-prim . make-syntax-violation) (pk2c4d core-prim . make-serious-condition) (pk2c4c core-prim . make-non-continuable-violation) (pk2c4b core-prim . make-message-condition) (pk2c4a core-prim . make-lexical-violation) (pk2c49 core-prim . make-irritants-condition) (pk2c48 core-prim . make-implementation-restriction-violation) (pk2c47 core-prim . make-error) (pk2c46 core-prim . make-assertion-violation) (pk2c45 core-prim . lexical-violation?) (pk2c44 core-prim . irritants-condition?) (pk2c43 core-prim . implementation-restriction-violation?) (pk2c42 core-prim . error?) (pk2c41 core-prim . condition-who) (pk2c40 core-prim . condition-predicate) (pk2c3f core-prim . condition-message) (pk2c3e core-prim . condition-irritants) (pk2c3d core-prim . condition-accessor) (pk2c3c core-prim . condition) (pk2c3b core-prim . assertion-violation?) (pk2c3a core-prim . condition?) (pk2c39 core-prim . utf32->string) (pk2c38 core-prim . utf16->string) (pk2c37 core-prim . utf8->string) (pk2c36 core-prim . uint-list->bytevector) (pk2c35 core-prim . u8-list->bytevector) (pk2c34 core-prim . string->utf8) (pk2c33 core-prim . string->utf32) (pk2c32 core-prim . string->utf16) (pk2c31 core-prim . sint-list->bytevector) (pk2c30 core-prim . native-endianness) (pk2c2f core-prim . bytevector?) (pk2c2e core-prim . bytevector=?) (pk2c2d core-prim . bytevector-uint-set!) (pk2c2c core-prim . bytevector-uint-ref) (pk2c2b core-prim . bytevector-u8-set!) (pk2c2a core-prim . bytevector-u8-ref) (pk2c29 core-prim . bytevector-u64-set!) (pk2c28 core-prim . bytevector-u64-ref) (pk2c27 core-prim . bytevector-u64-native-set!) (pk2c26 core-prim . bytevector-u64-native-ref) (pk2c25 core-prim . bytevector-u32-set!) (pk2c24 core-prim . bytevector-u32-ref) (pk2c23 core-prim . bytevector-u32-native-set!) (pk2c22 core-prim . bytevector-u32-native-ref) (pk2c21 core-prim . bytevector-u16-set!) (pk2c20 core-prim . bytevector-u16-ref) (pk2c1f core-prim . bytevector-u16-native-set!) (pk2c1e core-prim . bytevector-u16-native-ref) (pk2c1d core-prim . bytevector-sint-set!) (pk2c1c core-prim . bytevector-sint-ref) (pk2c1b core-prim . bytevector-s8-set!) (pk2c1a core-prim . bytevector-s8-ref) (pk2c19 core-prim . bytevector-s64-set!) (pk2c18 core-prim . bytevector-s64-ref) (pk2c17 core-prim . bytevector-s64-native-set!) (pk2c16 core-prim . bytevector-s64-native-ref) (pk2c15 core-prim . bytevector-s32-set!) (pk2c14 core-prim . bytevector-s32-ref) (pk2c13 core-prim . bytevector-s32-native-set!) (pk2c12 core-prim . bytevector-s32-native-ref) (pk2c11 core-prim . bytevector-s16-set!) (pk2c10 core-prim . bytevector-s16-ref) (pk2c0f core-prim . bytevector-s16-native-set!) (pk2c0e core-prim . bytevector-s16-native-ref) (pk2c0d core-prim . bytevector-length) (pk2c0c core-prim . bytevector-ieee-single-ref) (pk2c0b core-prim . bytevector-ieee-single-set!) (pk2c0a core-prim . bytevector-ieee-single-native-set!) (pk2c09 core-prim . bytevector-ieee-single-native-ref) (pk2c08 core-prim . bytevector-ieee-double-set!) (pk2c07 core-prim . bytevector-ieee-double-ref) (pk2c06 core-prim . bytevector-ieee-double-native-set!) (pk2c05 core-prim . bytevector-ieee-double-native-ref) (pk2c04 core-prim . bytevector-fill!) (pk2c03 core-prim . bytevector-copy!) (pk2c02 core-prim . bytevector-copy) (pk2c01 core-prim . bytevector->uint-list) (pk2c00 core-prim . bytevector->u8-list) (pk2bff core-prim . bytevector->sint-list) (pk2bfe core-prim . no-nans-violation?) (pk2bfd core-prim . no-infinities-violation?) (pk2bfc core-prim . make-no-nans-violation) (pk2bfb core-prim . make-no-infinities-violation) (pk2bfa core-prim . real->flonum) (pk2bf9 core-prim . flzero?) (pk2bf8 core-prim . fltruncate) (pk2bf7 core-prim . fltan) (pk2bf6 core-prim . flsqrt) (pk2bf5 core-prim . flsin) (pk2bf4 core-prim . flround) (pk2bf3 core-prim . flpositive?) (pk2bf2 core-prim . flonum?) (pk2bf1 core-prim . flodd?) (pk2bf0 core-prim . flnumerator) (pk2bef core-prim . flnegative?) (pk2bee core-prim . flnan?) (pk2bed core-prim . flmod0) (pk2bec core-prim . flmod) (pk2beb core-prim . flmin) (pk2bea core-prim . flmax) (pk2be9 core-prim . fllog) (pk2be8 core-prim . flinteger?) (pk2be7 core-prim . flinfinite?) (pk2be6 core-prim . flfloor) (pk2be5 core-prim . flfinite?) (pk2be4 core-prim . flexpt) (pk2be3 core-prim . flexp) (pk2be2 core-prim . fleven?) (pk2be1 core-prim . fldiv0-and-mod0) (pk2be0 core-prim . fldiv0) (pk2bdf core-prim . fldiv-and-mod) (pk2bde core-prim . fldiv) (pk2bdd core-prim . fldenominator) (pk2bdc core-prim . flcos) (pk2bdb core-prim . flceiling) (pk2bda core-prim . flatan) (pk2bd9 core-prim . flasin) (pk2bd8 core-prim . flacos) (pk2bd7 core-prim . flabs) (pk2bd6 core-prim . fl>?) (pk2bd5 core-prim . fl>=?) (pk2bd4 core-prim . fl=?) (pk2bd3 core-prim . fl<?) (pk2bd2 core-prim . fl<=?) (pk2bd1 core-prim . fl/) (pk2bd0 core-prim . fl-) (pk2bcf core-prim . fl+) (pk2bce core-prim . fl*) (pk2bcd core-prim . fixnum->flonum) (pk2bcc core-prim . fxzero?) (pk2bcb core-prim . fxxor) (pk2bca core-prim . fxrotate-bit-field) (pk2bc9 core-prim . fxreverse-bit-field) (pk2bc8 core-prim . fxpositive?) (pk2bc7 core-prim . fxodd?) (pk2bc6 core-prim . fxnot) (pk2bc5 core-prim . fxnegative?) (pk2bc4 core-prim . fxmod0) (pk2bc3 core-prim . fxmod) (pk2bc2 core-prim . fxmin) (pk2bc1 core-prim . fxmax) (pk2bc0 core-prim . fxlength) (pk2bbf core-prim . fxior) (pk2bbe core-prim . fxif) (pk2bbd core-prim . fxfirst-bit-set) (pk2bbc core-prim . fxeven?) (pk2bbb core-prim . fxdiv0-and-mod0) (pk2bba core-prim . fxdiv0) (pk2bb9 core-prim . fxdiv-and-mod) (pk2bb8 core-prim . fxdiv) (pk2bb7 core-prim . fxcopy-bit-field) (pk2bb6 core-prim . fxcopy-bit) (pk2bb5 core-prim . fxbit-set?) (pk2bb4 core-prim . fxbit-field) (pk2bb3 core-prim . fxbit-count) (pk2bb2 core-prim . fxarithmetic-shift-right) (pk2bb1 core-prim . fxarithmetic-shift-left) (pk2bb0 core-prim . fxarithmetic-shift) (pk2baf core-prim . fxand) (pk2bae core-prim . fx>?) (pk2bad core-prim . fx>=?) (pk2bac core-prim . fx=?) (pk2bab core-prim . fx<?) (pk2baa core-prim . fx<=?) (pk2ba9 core-prim . fx-/carry) (pk2ba8 core-prim . fx-) (pk2ba7 core-prim . fx+/carry) (pk2ba6 core-prim . fx+) (pk2ba5 core-prim . fx*/carry) (pk2ba4 core-prim . fx*) (pk2ba3 core-prim . greatest-fixnum) (pk2ba2 core-prim . least-fixnum) (pk2ba1 core-prim . fixnum-width) (pk2ba0 core-prim . fixnum?) (pk2b9f core-prim . bitwise-rotate-bit-field) (pk2b9e core-prim . bitwise-reverse-bit-field) (pk2b9d core-prim . bitwise-length) (pk2b9c core-prim . bitwise-if) (pk2b9b core-prim . bitwise-first-bit-set) (pk2b9a core-prim . bitwise-copy-bit-field) (pk2b99 core-prim . bitwise-copy-bit) (pk2b98 core-prim . bitwise-bit-set?) (pk2b97 core-prim . bitwise-bit-field) (pk2b96 core-prim . bitwise-bit-count) (pk2b95 core-prim . bitwise-xor) (pk2b94 core-prim . bitwise-ior) (pk2b93 core-prim . bitwise-and) (pk2b92 core-prim . bitwise-not) (pk2b91 core-prim . bitwise-arithmetic-shift-right) (pk2b90 core-prim . bitwise-arithmetic-shift-left) (pk2b8f core-prim . bitwise-arithmetic-shift) (pk2b8e core-prim . zero?) (pk2b8d core-prim . vector?) (pk2b8c core-prim . vector-set!) (pk2b8b core-prim . vector-ref) (pk2b8a core-prim . vector-map) (pk2b89 core-prim . vector-length) (pk2b88 core-prim . vector-for-each) (pk2b87 core-prim . vector-fill!) (pk2b86 core-prim . vector->list) (pk2b85 core-prim . vector) (pk2b84 core-prim . values) (pk2b83 core-prim . truncate) (pk2b82 core-prim . tan) (pk2b81 core-prim . symbol?) (pk2b80 core-prim . symbol=?) (pk2b7f core-prim . symbol->string) (pk2b7e core-prim . substring) (pk2b7d core-prim . string?) (pk2b7c core-prim . string>?) (pk2b7b core-prim . string>=?) (pk2b7a core-prim . string=?) (pk2b79 core-prim . string<?) (pk2b78 core-prim . string<=?) (pk2b77 core-prim . string-ref) (pk2b76 core-prim . string-length) (pk2b75 core-prim . string-for-each) (pk2b74 core-prim . string-copy) (pk2b73 core-prim . string-append) (pk2b72 core-prim . string->symbol) (pk2b71 core-prim . string->number) (pk2b70 core-prim . string->list) (pk2b6f core-prim . string) (pk2b6e core-prim . sqrt) (pk2b6d core-prim . sin) (pk2b6c core-prim . round) (pk2b6b core-prim . reverse) (pk2b6a core-prim . real?) (pk2b69 core-prim . real-valued?) (pk2b68 core-prim . real-part) (pk2b67 core-prim . rationalize) (pk2b66 core-prim . rational?) (pk2b65 core-prim . rational-valued?) (pk2b64 core-prim . procedure?) (pk2b63 core-prim . positive?) (pk2b62 core-prim . pair?) (pk2b61 core-prim . odd?) (pk2b60 core-prim . numerator) (pk2b5f core-prim . number?) (pk2b5e core-prim . number->string) (pk2b5d core-prim . null?) (pk2b5c core-prim . not) (pk2b5b core-prim . negative?) (pk2b5a core-prim . nan?) (pk2b59 core-prim . min) (pk2b58 core-prim . max) (pk2b57 core-prim . map) (pk2b56 core-prim . make-vector) (pk2b55 core-prim . make-string) (pk2b54 core-prim . make-rectangular) (pk2b53 core-prim . make-polar) (pk2b52 core-prim . magnitude) (pk2b51 core-prim . log) (pk2b50 core-prim . list?) (pk2b4f core-prim . list-tail) (pk2b4e core-prim . list-ref) (pk2b4d core-prim . list->vector) (pk2b4c core-prim . list->string) (pk2b4b core-prim . list) (pk2b4a core-prim . length) (pk2b49 core-prim . lcm) (pk2b48 core-prim . integer?) (pk2b47 core-prim . integer-valued?) (pk2b46 core-prim . integer->char) (pk2b45 core-prim . infinite?) (pk2b44 core-prim . inexact?) (pk2b43 core-prim . inexact) (pk2b42 core-prim . imag-part) (pk2b41 core-prim . gcd) (pk2b40 core-prim . for-each) (pk2b3f core-prim . floor) (pk2b3e core-prim . finite?) (pk2b3d core-prim . expt) (pk2b3c core-prim . exp) (pk2b3b core-prim . exact?) (pk2b3a core-prim . exact-integer-sqrt) (pk2b39 core-prim . exact) (pk2b38 core-prim . even?) (pk2b37 core-prim . error) (pk2b36 core-prim . eqv?) (pk2b35 core-prim . equal?) (pk2b34 core-prim . eq?) (pk2b33 core-prim . dynamic-wind) (pk2b32 core-prim . div0-and-mod0) (pk2b31 core-prim . mod0) (pk2b30 core-prim . div0) (pk2b2f core-prim . div-and-mod) (pk2b2e core-prim . mod) (pk2b2d core-prim . div) (pk2b2c core-prim . denominator) (pk2b2b core-prim . cos) (pk2b2a core-prim . cons) (pk2b29 core-prim . complex?) (pk2b28 core-prim . char?) (pk2b27 core-prim . char>?) (pk2b26 core-prim . char>=?) (pk2b25 core-prim . char=?) (pk2b24 core-prim . char<?) (pk2b23 core-prim . char<=?) (pk2b22 core-prim . char->integer) (pk2b21 core-prim . ceiling) (pk2b20 core-prim . call-with-values) (pk2b1f core-prim . call/cc) (pk2b1e core-prim . call-with-current-continuation) (pk2b1d core-prim . cddddr) (pk2b1c core-prim . cdddar) (pk2b1b core-prim . cddadr) (pk2b1a core-prim . cddaar) (pk2b19 core-prim . cdaddr) (pk2b18 core-prim . cdadar) (pk2b17 core-prim . cdaadr) (pk2b16 core-prim . cdaaar) (pk2b15 core-prim . cadddr) (pk2b14 core-prim . caddar) (pk2b13 core-prim . cadadr) (pk2b12 core-prim . cadaar) (pk2b11 core-prim . caaddr) (pk2b10 core-prim . caadar) (pk2b0f core-prim . caaadr) (pk2b0e core-prim . caaaar) (pk2b0d core-prim . cdddr) (pk2b0c core-prim . cddar) (pk2b0b core-prim . cdadr) (pk2b0a core-prim . cdaar) (pk2b09 core-prim . caddr) (pk2b08 core-prim . cadar) (pk2b07 core-prim . caadr) (pk2b06 core-prim . caaar) (pk2b05 core-prim . cddr) (pk2b04 core-prim . cdar) (pk2b03 core-prim . cadr) (pk2b02 core-prim . caar) (pk2b01 core-prim . cdr) (pk2b00 core-prim . car) (pk2aff core-prim . boolean?) (pk2afe core-prim . boolean=?) (pk2afd core-prim . atan) (pk2afc core-prim . assertion-violation) (pke5f core-prim . assertion-error) (pk2afb core-prim . asin) (pk2afa core-prim . apply) (pk2af9 core-prim . append) (pk2af8 core-prim . angle) (pk2af7 core-prim . acos) (pk2af6 core-prim . abs) (pk2af5 core-prim . /) (pk2af4 core-prim . *) (pk2af3 core-prim . -) (pk2af2 core-prim . +) (pk2af1 core-prim . >=) (pk2af0 core-prim . >) (pk2aef core-prim . =) (pk2aee core-prim . <=) (pk2aed core-prim . <) (pk2aec core-prim . library) (pk2aeb $core-rtd &no-nans-rtd &no-nans-rcd) (pk2aea $core-rtd &no-infinities-rtd &no-infinities-rcd) (pk2ae9 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (pk2ae8 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (pk2ae7 $core-rtd &i/o-port-rtd &i/o-port-rcd) (pk2ae6 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (pk2ae5 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (pk2ae4 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (pk2ae3 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (pk2ae2 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (pk2ae1 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (pk2ae0 $core-rtd &i/o-write-rtd &i/o-write-rcd) (pk2adf $core-rtd &i/o-read-rtd &i/o-read-rcd) (pk2ade $core-rtd &i/o-rtd &i/o-rcd) (pk2add $core-rtd &undefined-rtd &undefined-rcd) (pk2adc $core-rtd &syntax-rtd &syntax-rcd) (pk2adb $core-rtd &lexical-rtd &lexical-rcd) (pk2ada $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (pk2ad9 $core-rtd &non-continuable-rtd &non-continuable-rcd) (pk2ad8 $core-rtd &who-rtd &who-rcd) (pk2ad7 $core-rtd &irritants-rtd &irritants-rcd) (pk2ad6 $core-rtd &assertion-rtd &assertion-rcd) (pk2ad5 $core-rtd &violation-rtd &violation-rcd) (pk2ad4 $core-rtd &error-rtd &error-rcd) (pk2ad3 $core-rtd &serious-rtd &serious-rcd) (pk2ad2 $core-rtd &warning-rtd &warning-rcd) (pk2ad1 $core-rtd &message-rtd &message-rcd) (pk2ad0 $core-rtd &condition-rtd &condition-rcd) (pk2acf macro . define-condition-type) (pk2ace macro . define-enumeration) (pk2acd macro . define-record-type) (pk2acc macro . parent-rtd) (pk2acb macro . nongenerative) (pk2aca macro . opaque) (pk2ac9 macro . sealed) (pk2ac8 macro . protocol) (pk2ac7 macro . parent) (pk2ac6 macro . immutable) (pk2ac5 macro . mutable) (pk2ac4 macro . fields) (pk2ac3 macro . error-handling-mode) (pk2ac2 macro . file-options) (pk2ac1 macro . buffer-mode) (pk2ac0 macro . eol-style) (pk2abf macro . guard) (pk2abe macro . trace-define) (pk2abd macro . trace-lambda) (pk2abc macro . unsyntax-splicing) (pk2abb macro . unsyntax) (pk2aba macro . unquote-splicing) (pk2ab9 macro . unquote) (pk2ab8 macro . _) (pk2ab7 macro . else) (pk2ab6 macro . =>) (pk2ab5 macro . ...) (pk2ab4 macro . assert) (pk2ab3 macro . endianness) (pk2ab2 macro . delay) (pk2ab1 macro . time) (pk2ab0 macro . do) (pk2aaf macro . cond) (pk2aae macro . let*) (pk2aad macro . let*-values) (pk2aac macro . let-values) (pk2aab macro . identifier-syntax) (pk2aaa macro . with-syntax) (pk2aa9 macro . quasisyntax) (pk2aa8 macro . quasiquote) (pk2aa7 macro . syntax-rules) (pk2aa6 macro . include) (pk2aa5 macro . define-struct) (pk2aa4 core-macro . record-constructor-descriptor) (pk2aa3 core-macro . record-type-descriptor) (pk2aa2 macro . case) (pk2aa1 macro . parameterize) (pk2aa0 macro . unless) (pk2a9f macro . when) (pk2a9e core-macro . or) (pk2a9d core-macro . and) (pk2a9c core-macro . if) (pk2a9b core-macro . let) (pk2a9a core-macro . letrec*) (pk2a99 core-macro . letrec) (pk2a98 core-macro . type-descriptor) (pk2a97 core-macro . case-lambda) (pk2a96 core-macro . lambda) (pk2a95 core-macro . syntax) (pk2a94 core-macro . syntax-case) (pk2a93 core-macro . quote) (pk2a92 core-macro . foreign-call) (pk2a91 letrec-syntax) (pk2a90 let-syntax) (pk2a8f set!) (pk2a8e import) (pk2a8d begin) (pk2a8c module) (pk2a8b define-syntax) (pk2a8a define)) values values '#f '#f '#f '#f) (pk999@pk7e5@install-library 'pk2e58 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . pk2dff) (eval-core . pk2dfe) (set-symbol-value! . pk2dfd) (symbol-value . pk2dfc) (gensym . pk2dfb) (void . pk2dfa)) '() values values '#f '#f '#f '#f) (pk999@pk7e5@install-library 'pk2e59 '(mosh) '() '() '() '() '((set-symbol-value! . pk2dfd) (symbol-value . pk2dfc) (regexp? . pk2df8) (read-line . pk2df7) (ungensym . pk2df5) (alist->eq-hash-table . pk2df4) (assoc-ref . pk2df3) (print . pk2df2) (format . pk2df1) (host-os . pk2df0) (library-path . pk7c4) (standard-library-path . pk2def) (file-newer? . pk2de7) (stat-mtime . pk2de6) (digit->integer . pk2de2) (call-with-string-input-port . pk2de1) (call-with-string-io . pk2de0) (string-split . pk2ddf) (bytevector-for-each . pk2dde) (string->regexp . pk2ddd) (rxmatch . pk2ddc) (regexp-replace-all . pk2ddb) (hashtable-fold-left . pk2dda) (hashtable-for-each . pk2dd9) (set-current-directory! . pk2dd4) (expand-path . pk2dd3) (current-directory . pk2dd2) (p . pk2d92) (get-timeofday . pk2d79) (get-command-line . pk2d78) (sys-display . pk2d77) (whereis . pk2d76) (register . pk2d75) (vm-join! . pk2d74) (vm-set-value! . pk2d73) (vm? . pk2d72) (main-vm? . pk2d71) (vm-eval . pk2d70) (vm-self . pk2d6f) (vm-start! . pk2d6e) (make-vm . pk2d6d) (mutex-try-lock! . pk2d6c) (mutex-unlock! . pk2d6b) (mutex-lock! . pk2d6a) (mutex? . pk2d69) (make-mutex . pk2d68) (condition-variable-notify-all! . pk2d67) (condition-variable-notify! . pk2d66) (condition-variable-wait! . pk2d65) (make-condition-variable . pk2d64) (write/ss . pk2d63) (mosh-executable-path . pk2d62) (make-file-options . pk2d61) (source-info . pk2d60) (make-compiler-instruction . pk2d5f) (make-instruction . pk2d5e) (set-annotation! . pk2d5d) (get-annotation . pk2d5c) (annotated-pair? . pk2d5b) (annotated-cons . pk2d5a) (set-source-info! . pk2d59) (bignum? . pk2d58) (fast-equal? . pk2d57) (fasl-read . pk2d56) (fasl-write . pk2d55) (time-usage . pk2d54) (os-constant . pk2d53) (condition-printer . pk2d52) (time . pk2ab1) (include . pk2aa6)) '() values values '#f '#f '#f '#f) (pk999@pk7e5@install-library 'pk2e5a '(system) '() '() '() '() '((gensym-prefix-set! . pk2df6) (ssl-supported? . pk2dee) (ssl-socket? . pk2ded) (socket-sslize! . pk2dec) (%monapi-name-add! . pk2deb) (%monapi-message-receive . pk2dea) (%monapi-name-whereis . pk2de9) (%monapi-message-send . pk2de8) (write-to-file . pk2de5) (file->list . pk2de4) (file->string . pk2de3) (mosh-cache-dir . pk5ae) (%call-process . pk2dd8) (local-tz-offset . pk2dd7) (microseconds . pk2dd6) (directory-list . pk2dd5) (expand-path . pk2dd3) (%getpid . pk2dd1) (%spawn . pk2dd0) (%waitpid . pk2dcf) (simple-struct-name . pk2dce) (simple-struct-set! . pk2dcd) (simple-struct-ref . pk2dcc) (make-simple-struct . pk2dcb) (simple-struct? . pk2dca) (pointer-ref-c-int64 . pk2dc9) (pointer-ref-c-int32 . pk2dc8) (pointer-ref-c-int16 . pk2dc7) (pointer-ref-c-int8 . pk2dc6) (pointer-ref-c-uint64 . pk2dc5) (pointer-ref-c-uint32 . pk2dc4) (pointer-ref-c-uint16 . pk2dc3) (pointer-ref-c-uint8 . pk2dc2) (pointer-set-c-uint64! . pk2dc1) (pointer-set-c-uint32! . pk2dc0) (pointer-set-c-uint16! . pk2dbf) (pointer-set-c-uint8! . pk2dbe) (pointer-set-c-int64! . pk2dbd) (pointer-set-c-int32! . pk2dbc) (pointer-set-c-int16! . pk2dbb) (pointer-set-c-int8! . pk2dba) (pointer-set-c-pointer! . pk2db9) (pointer-set-c-double! . pk2db8) (pointer-set-c-float! . pk2db7) (pointer-set-c-long-long! . pk2db6) (pointer-set-c-long! . pk2db5) (pointer-set-c-int! . pk2db4) (pointer-set-c-short! . pk2db3) (pointer-set-c-char! . pk2db2) (pointer-ref-c-pointer . pk2db1) (pointer-ref-c-double . pk2db0) (pointer-ref-c-float . pk2daf) (pointer-ref-c-unsigned-long-long . pk2dae) (pointer-ref-c-signed-long-long . pk2dad) (pointer-ref-c-unsigned-long . pk2dac) (pointer-ref-c-signed-long . pk2dab) (pointer-ref-c-unsigned-int . pk2daa) (pointer-ref-c-signed-int . pk2da9) (pointer-ref-c-unsigned-short . pk2da8) (pointer-ref-c-signed-short . pk2da7) (pointer-ref-c-unsigned-char . pk2da6) (pointer-ref-c-signed-char . pk2da5) (pointer->integer . pk2da4) (integer->pointer . pk2da3) (pointer? . pk2da2) (shared-errno . pk2da1) (%ffi-free-c-callback-trampoline . pk2da0) (%ffi-make-c-callback-trampoline . pk2d9f) (%ffi-free . pk2d9e) (%ffi-malloc . pk2d9d) (%ffi-supported? . pk2d9c) (%ffi-pointer->string . pk2d9b) (%ffi-call . pk2d9a) (%ffi-lookup . pk2d99) (%ffi-open . pk2d98) (null-terminated-utf8->string . pk2d97) (null-terminated-bytevector->string . pk2d96) (%exec . pk2d95) (%fork . pk2d94) (%pipe . pk2d93) (open-output-string . pk2d91) (get-output-string . pk2d90) (file-stat-ctime . pk2d8f) (file-stat-atime . pk2d8e) (file-stat-mtime . pk2d8d) (file-size-in-bytes . pk2d8c) (file-writable? . pk2d8b) (file-executable? . pk2d8a) (file-readable? . pk2d89) (file-regular? . pk2d88) (file-symbolic-link? . pk2d87) (file-directory? . pk2d86) (create-symbolic-link . pk2d85) (rename-file . pk2d84) (delete-directory . pk2d83) (create-directory . pk2d82) (create-mosh-cache-dir . pk2d81) (get-environment-variables . pk2d80) (current-exception-handler . pk2d7f) (get-environment-variable . pk2d7e) (join-wraps . pk2d7d) (id->real-label . pk2d7c) (same-marks? . pk2d7b) (same-marks*? . pk2d7a) (disasm . pk2d51) (make-parameter . pk5ac) (socket-port . pk2d50) (socket-shutdown . pk2d4f) (socket-close . pk2d4e) (socket-send . pk2d4d) (socket-recv! . pk2d4c) (socket-recv . pk2d4b) (make-server-socket . pk2d4a) (make-client-socket . pk2d49) (socket-accept . pk2d48) (socket? . pk2d47) (parameterize . pk2aa1)) '() values values '#f '#f '#f '#f)))
(begin (set! pk2909@ref (unspecified)) (set! pk290b@x* (unspecified)) (set! pk290d@add-library-path! (unspecified)) (set! pk290f@parse-and-add-library-path (unspecified)) (set! pk2911@for-each-with-index (unspecified)) (set! pk2913@rpad (unspecified)) (set! pk2915@condition-printer/p (unspecified)) (set! pk2917@record->field-alist (unspecified)) (set! pk2919@map-with-index (unspecified)) (set! pk291b@repl (unspecified)) (set! pk291d@trace-printer (unspecified)) (set! pk291f@command-line (unspecified)) (set! pk2921@local-library-path (unspecified)) (set! pk2923@load/args (unspecified)) (set! pk2925@load (unspecified)) (set! pk2927@ironscheme-build (unspecified)) (set! pk2929@eval-top-level (unspecified)) (set! pk292b@compile-system-libraries (unspecified)) (set! pk292d@compile (unspecified)) (set! pk292f@compile->closure (unspecified)) (set! pk2931@pre-compile-r6rs-file (unspecified)) (set! pk2933@load-r6rs-top-level (unspecified)) (set! pk2935@load-r6rs-top-level-sexp (unspecified)) (set! pk2937@prefix-inc (unspecified)) (set! pk2939@prefix-inc! (unspecified)) (set! pk2909@ref (lambda (pk2974@rtd pk2975@i pk2976@x) (let ((pk297a@val ((record-accessor pk2974@rtd pk2975@i) pk2976@x))) (if (symbol? pk297a@val) (ungensym pk297a@val) pk297a@val)))) (set! pk2a70@pk2909@ref pk2909@ref) (set! pk290b@x* '()) (set! pk2a71@pk290b@x* pk290b@x*) (set! pk290d@add-library-path! (lambda (pk297c@path) (pk989@pk7c5@library-path (append (pk989@pk7c5@library-path) (list pk297c@path))))) (set! pk2a72@pk290d@add-library-path! pk290d@add-library-path!) (set! pk290f@parse-and-add-library-path (lambda (pk297e@paths pk297f@message) (letrec* ((pk2983@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((pk2984@t pk297e@paths)) (if pk2984@t ((lambda (pk2986@paths) (for-each (lambda (pk2988@path) (if (file-exists? pk2988@path) (pk290d@add-library-path! (expand-path pk2988@path)) (format (current-error-port) pk297f@message pk2988@path))) (string-split pk2986@paths pk2983@separator))) pk2984@t) (void)))))) (set! pk2a73@pk290f@parse-and-add-library-path pk290f@parse-and-add-library-path) (set! pk2911@for-each-with-index (lambda (pk298a@proc pk298b@lst) (letrec ((pk298e@loop (lambda (pk2990@i pk2991@lst) (if (null? pk2991@lst) (if '#f '#f (void)) (begin (pk298a@proc pk2990@i (car pk2991@lst)) (pk298e@loop (+ pk2990@i '1) (cdr pk2991@lst))))))) (pk298e@loop '1 pk298b@lst)))) (set! pk2a74@pk2911@for-each-with-index pk2911@for-each-with-index) (set! pk2913@rpad (lambda (pk2994@str pk2995@pad pk2996@n) (let ((pk299a@rest (- pk2996@n (string-length (format '"~a" pk2994@str))))) (let pk29a0@loop ((pk299c@rest pk299a@rest) (pk299d@ret (format '"~a" pk2994@str))) (if (<= pk299c@rest '0) pk299d@ret (pk29a0@loop (- pk299c@rest '1) (string-append pk299d@ret pk2995@pad))))))) (set! pk2a75@pk2913@rpad pk2913@rpad) (set! pk2915@condition-printer/p (lambda (pk29a2@e pk29a3@port) (letrec* ((pk29a7@max-condition-len (apply max (map (lambda (pk29b8@c) (string-length (symbol->string (record-type-name (record-rtd pk29b8@c))))) (simple-conditions pk29a2@e))))) (begin (display '" Condition components:\n" pk29a3@port) (pk2911@for-each-with-index (lambda (pk29a8@i pk29a9@x) (let ((pk29ac@rtd (record-rtd pk29a9@x)) (pk29ad@fields-alist (pk2917@record->field-alist pk29a9@x))) (begin (format pk29a3@port '" ~d. ~a" pk29a8@i (pk2913@rpad (symbol->string (record-type-name pk29ac@rtd)) '" " pk29a7@max-condition-len)) (if (null? pk29ad@fields-alist) (newline pk29a3@port) (void)) (let pk29b4@loop ((pk29b0@first '#t) (pk29b1@fields-alist pk29ad@fields-alist)) (if (null? pk29b1@fields-alist) '() (let ((pk29b6@field (car pk29b1@fields-alist))) (begin (if (not pk29b0@first) (display (pk2913@rpad '"" '" " (+ '4 pk29a7@max-condition-len)) pk29a3@port) (void)) (display '"       " pk29a3@port) (display (car pk29b6@field) pk29a3@port) (display '": " pk29a3@port) (write (cdr pk29b6@field) pk29a3@port) (newline pk29a3@port) (pk29b4@loop '#f (cdr pk29b1@fields-alist))))))))) (simple-conditions pk29a2@e)))))) (set! pk2a76@pk2915@condition-printer/p pk2915@condition-printer/p) (set! pk2917@record->field-alist (lambda (pk29ba@r) (letrec* ((pk29bd@ref (lambda (pk29c8@rtd pk29c9@i pk29ca@x) (let ((pk29ce@val ((record-accessor pk29c8@rtd pk29c9@i) pk29ca@x))) (if (symbol? pk29ce@val) (ungensym pk29ce@val) pk29ce@val))))) (let pk29c2@loop ((pk29be@ret '()) (pk29bf@rtd (record-rtd pk29ba@r))) (if pk29bf@rtd (pk29c2@loop (append pk29be@ret (pk2919@map-with-index (lambda (pk29c4@i pk29c5@field) (cons pk29c5@field (pk29bd@ref pk29bf@rtd pk29c4@i pk29ba@r))) (vector->list (record-type-field-names pk29bf@rtd)))) (record-type-parent pk29bf@rtd)) pk29be@ret))))) (set! pk2a77@pk2917@record->field-alist pk2917@record->field-alist) (set! pk2919@map-with-index (lambda (pk29d0@proc pk29d1@lst) (let pk29da@loop ((pk29d4@i '0) (pk29d5@lst pk29d1@lst) (pk29d6@ret '())) (if (null? pk29d5@lst) (reverse pk29d6@ret) (pk29da@loop (+ pk29d4@i '1) (cdr pk29d5@lst) (cons (pk29d0@proc pk29d4@i (car pk29d5@lst)) pk29d6@ret)))))) (set! pk2a78@pk2919@map-with-index pk2919@map-with-index) (set! pk291b@repl (lambda pk29dc@x (letrec* ((pk29df@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (pk29e2@pk29e0) (lambda () (with-exception-handler (lambda (pk29e4@e) ((call/cc (lambda (pk29e6@pk29e1) (pk29e2@pk29e0 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? pk29e4@e) (pk2915@condition-printer/p pk29e4@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" pk29e4@e))) (pk29e6@pk29e1 (lambda () (raise-continuable pk29e4@e)))))))))) (lambda () (let pk29ec@loop ((pk29e8@line (get-line (current-input-port))) (pk29e9@accum '"")) (letrec* ((pk29ef@parentheses-ok? (lambda (pk29fa@text) (let pk2a02@loop ((pk29fc@chars (string->list pk29fa@text)) (pk29fd@p0 '0) (pk29fe@p1 '0)) (if (null? pk29fc@chars) (= '0 pk29fd@p0 pk29fe@p1) (let ((pk2a04@t (car pk29fc@chars))) (if (memv pk2a04@t '(#\()) (pk2a02@loop (cdr pk29fc@chars) (+ pk29fd@p0 '1) pk29fe@p1) (if (memv pk2a04@t '(#\))) (pk2a02@loop (cdr pk29fc@chars) (- pk29fd@p0 '1) pk29fe@p1) (if (memv pk2a04@t '(#\[)) (pk2a02@loop (cdr pk29fc@chars) pk29fd@p0 (+ pk29fe@p1 '1)) (if (memv pk2a04@t '(#\])) (pk2a02@loop (cdr pk29fc@chars) pk29fd@p0 (- pk29fe@p1 '1)) (pk2a02@loop (cdr pk29fc@chars) pk29fd@p0 pk29fe@p1)))))))))) (pk29f1@eval-string-print (lambda (pk29f4@text) (if (not (or (string=? '"\n" pk29f4@text) (= '0 (string-length pk29f4@text)))) (call-with-values (lambda () (pk2929@eval-top-level (call-with-port (open-string-input-port pk29f4@text) read))) (lambda pk29f6@out* (for-each (lambda (pk29f8@out) (begin (write/ss pk29f8@out) (newline))) pk29f6@out*))) (void))))) (if (eof-object? pk29e8@line) (begin (pk29f1@eval-string-print pk29e9@accum) (exit)) (let ((pk29f2@current (string-append pk29e9@accum pk29e8@line))) (if (pk29ef@parentheses-ok? pk29f2@current) (pk29f1@eval-string-print pk29f2@current) (pk29ec@loop (get-line (current-input-port)) pk29f2@current)))))))))))) (newline) (pk29df@rec))))) (pk29df@rec)))) (set! pk2a79@pk291b@repl pk291b@repl) (set! pk291d@trace-printer (pk6cf@pk5ad@make-parameter write)) (set! pk2a7a@pk291d@trace-printer pk291d@trace-printer) (set! pk291f@command-line (pk6cf@pk5ad@make-parameter (get-command-line))) (set! pk2a7b@pk291f@command-line pk291f@command-line) (set! pk2921@local-library-path (lambda (pk2a06@filename) (pk989@pk7c5@library-path))) (set! pk2a7c@pk2921@local-library-path pk2921@local-library-path) (set! pk2923@load/args (lambda (pk2a08@filename . pk2a0a@args) (begin (apply pk2933@load-r6rs-top-level pk2a08@filename 'load pk2a0a@args) (void)))) (set! pk2a7d@pk2923@load/args pk2923@load/args) (set! pk2925@load (lambda (pk2a0c@filename) (begin (apply pk2933@load-r6rs-top-level pk2a0c@filename 'load (pk291f@command-line)) (void)))) (set! pk2a7e@pk2925@load pk2925@load) (set! pk2927@ironscheme-build (lambda () (pk2925@load '"ironscheme-buildscript.ss"))) (set! pk2a7f@pk2927@ironscheme-build pk2927@ironscheme-build) (set! pk2929@eval-top-level (lambda (pk2a0e@x) (pk28e6@pke46@eval pk2a0e@x (pk28fd@pke74@interaction-environment)))) (set! pk2a80@pk2929@eval-top-level pk2929@eval-top-level) (set! pk292b@compile-system-libraries (lambda () (pk2929@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! pk2a81@pk292b@compile-system-libraries pk292b@compile-system-libraries) (set! pk292d@compile (lambda (pk2a10@filename) (pk2933@load-r6rs-top-level pk2a10@filename 'compile))) (set! pk2a82@pk292d@compile pk292d@compile) (set! pk292f@compile->closure (lambda (pk2a12@filename) (pk2933@load-r6rs-top-level pk2a12@filename 'closure))) (set! pk2a83@pk292f@compile->closure pk292f@compile->closure) (set! pk2931@pre-compile-r6rs-file (lambda (pk2a14@filename) (pk2933@load-r6rs-top-level pk2a14@filename 'compile))) (set! pk2a84@pk2931@pre-compile-r6rs-file pk2931@pre-compile-r6rs-file) (set! pk2933@load-r6rs-top-level (lambda (pk2a16@filename pk2a17@how . pk2a1a@args) (begin (pk989@pk7c5@library-path (pk2921@local-library-path pk2a16@filename)) (let ((pk2a1c@x* (with-input-from-file pk2a16@filename (lambda () (let pk2a1e@f () (let ((pk2a20@x (pk6c1@pk591@read-annotated))) (if (eof-object? pk2a20@x) '() (cons pk2a20@x (pk2a1e@f))))))))) (let ((pk2a22@t pk2a17@how)) (if (memv pk2a22@t '(closure)) (pk28fc@pke72@pre-compile-r6rs-top-level pk2a1c@x*) (if (memv pk2a22@t '(load)) (begin (pk291f@command-line (cons pk2a16@filename (car pk2a1a@args))) (pk6d0@pk5af@mosh-cache-dir (create-mosh-cache-dir)) (if (pk6d0@pk5af@mosh-cache-dir) (gensym-prefix-set! (pk2939@prefix-inc! (string-append (pk6d0@pk5af@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (pk2a24@file) ((call/cc (lambda (pk2a28@pk2a26) (lambda () (with-exception-handler (lambda (pk2a2a@c) ((call/cc (lambda (pk2a2c@pk2a27) (pk2a28@pk2a26 (lambda () (if '#t '#t (pk2a2c@pk2a27 (lambda () (raise-continuable pk2a2a@c)))))))))) (lambda () (delete-file (string-append (pk6d0@pk5af@mosh-cache-dir) '"/" pk2a24@file))))))))) (directory-list (pk6d0@pk5af@mosh-cache-dir))) (void)) (let ((pk2a2e@compiled (pk28fb@pke70@compile-r6rs-top-level pk2a1c@x*))) (begin (if (and (pk6d0@pk5af@mosh-cache-dir) (not (symbol-value '%disable-acc))) (pk98d@pk7cd@serialize-all pk6ca@pk5a3@serialize-library pk726@pk6df@compile-core-expr) (void)) (pk2a2e@compiled)))) (if (memv pk2a22@t '(compile)) (begin (pk28fb@pke70@compile-r6rs-top-level pk2a1c@x*) (pk98d@pk7cd@serialize-all pk6ca@pk5a3@serialize-library pk726@pk6df@compile-core-expr)) (if '#f '#f (void)))))))))) (set! pk2a85@pk2933@load-r6rs-top-level pk2933@load-r6rs-top-level) (set! pk2935@load-r6rs-top-level-sexp (lambda (pk2a30@import-spec pk2a31@thunk) (let ((pk2a3c@pk2a35 pk989@pk7c5@library-path) (pk2a3d@pk2a37 pk6d0@pk5af@mosh-cache-dir) (pk2a3e@pk2a39 (pk2921@local-library-path '"")) (pk2a3f@pk2a3b (create-mosh-cache-dir))) (let ((pk2a44@swap (lambda () (begin (let ((pk2a46@t (pk2a3c@pk2a35))) (begin (pk2a3c@pk2a35 pk2a3e@pk2a39) (set! pk2a3e@pk2a39 pk2a46@t))) (let ((pk2a48@t (pk2a3d@pk2a37))) (begin (pk2a3d@pk2a37 pk2a3f@pk2a3b) (set! pk2a3f@pk2a3b pk2a48@t))))))) (dynamic-wind pk2a44@swap (lambda () (begin (if (pk6d0@pk5af@mosh-cache-dir) (gensym-prefix-set! (pk2939@prefix-inc! (string-append (pk6d0@pk5af@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((pk2a4e@pk2a4b pk291f@command-line) (pk2a4f@pk2a4d '())) (let ((pk2a52@swap (lambda () (let ((pk2a54@t (pk2a4e@pk2a4b))) (begin (pk2a4e@pk2a4b pk2a4f@pk2a4d) (set! pk2a4f@pk2a4d pk2a54@t)))))) (dynamic-wind pk2a52@swap (lambda () ((pk28fb@pke70@compile-r6rs-top-level (list (cons 'import pk2a30@import-spec) (list pk2a31@thunk))))) pk2a52@swap))))) pk2a44@swap))))) (set! pk2a86@pk2935@load-r6rs-top-level-sexp pk2935@load-r6rs-top-level-sexp) (set! pk2937@prefix-inc (lambda (pk2a56@prefix-string) (let ((pk2a58@prefix (symbol->string pk2a56@prefix-string))) (let ((pk2a5a@len (string-length pk2a58@prefix))) (let pk2a62@loop ((pk2a5c@i (- pk2a5a@len '1)) (pk2a5d@carry? '#t) (pk2a5e@accum '())) (if (< pk2a5c@i '0) (string->symbol (list->string (if pk2a5d@carry? (cons '#\a pk2a5e@accum) pk2a5e@accum))) (if pk2a5d@carry? (let ((pk2a64@next-integer (+ '1 (char->integer (string-ref pk2a58@prefix pk2a5c@i))))) (if (= pk2a64@next-integer '123) (pk2a62@loop (- pk2a5c@i '1) '#f (cons '#\A pk2a5e@accum)) (if (= pk2a64@next-integer '91) (pk2a62@loop (- pk2a5c@i '1) '#t (cons '#\a pk2a5e@accum)) (pk2a62@loop (- pk2a5c@i '1) '#f (cons (integer->char pk2a64@next-integer) pk2a5e@accum))))) (pk2a62@loop (- pk2a5c@i '1) '#f (cons (string-ref pk2a58@prefix pk2a5c@i) pk2a5e@accum))))))))) (set! pk2a87@pk2937@prefix-inc pk2937@prefix-inc) (set! pk2939@prefix-inc! (lambda (pk2a66@file) (begin (if (not (file-exists? pk2a66@file)) (call-with-output-file pk2a66@file (lambda (pk2a68@port) (write 'd pk2a68@port))) (void)) (let ((pk2a6a@prefix (call-with-input-file pk2a66@file read))) (if (main-vm?) (let ((pk2a6c@next-prefix (pk2937@prefix-inc pk2a6a@prefix))) (begin (call-with-port (open-file-output-port pk2a66@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (pk2a6e@port) (write pk2a6c@next-prefix pk2a6e@port))) pk2a6a@prefix)) pk2a6a@prefix))))) (set! pk2a88@pk2939@prefix-inc! pk2939@prefix-inc!) (begin (pk98e@pk7cf@current-precompiled-library-loader pk6cb@pk5a5@load-serialized-library) (set-symbol-value! 'load pk2925@load) (set-symbol-value! 'pre-compile-r6rs-file pk2931@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs pk2929@eval-top-level) (set-symbol-value! 'int-env-syms pk28dd@pke34@interaction-environment-symbols) (set-symbol-value! 'expanded2core pk725@pk6dd@expanded->core) (set-symbol-value! 'trace-printer pk291d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (pk293a@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list pk293a@c))))) (pk290f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (pk290f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (pk290d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (pk290d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (pk290d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((pk293c@prefix (lambda (pk293e@ext pk293f@ls) (append (map (lambda (pk2942@x) (string-append pk293e@ext pk2942@x)) pk293f@ls) pk293f@ls)))) (pk98a@pk7c7@library-extensions (pk293c@prefix '".mosh" (pk98a@pk7c7@library-extensions)))) (current-exception-handler (lambda (pk2944@c) (begin (if (condition? pk2944@c) (pk2915@condition-printer/p pk2944@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" pk2944@c)) pk2944@c))) (if ((call/cc (lambda (pk2948@pk2946) (lambda () (with-exception-handler (lambda (pk294a@c) ((call/cc (lambda (pk294c@pk2947) (pk2948@pk2946 (lambda () (if '#t '#f (pk294c@pk2947 (lambda () (raise-continuable pk294a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (pk2935@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (pk291f@command-line)) (let ((pk2956@pk294f pk291f@command-line) (pk2957@pk2951 pk6d0@pk5af@mosh-cache-dir) (pk2958@pk2953 '()) (pk2959@pk2955 (create-mosh-cache-dir))) (let ((pk295e@swap (lambda () (begin (let ((pk2960@t (pk2956@pk294f))) (begin (pk2956@pk294f pk2958@pk2953) (set! pk2958@pk2953 pk2960@t))) (let ((pk2962@t (pk2957@pk2951))) (begin (pk2957@pk2951 pk2959@pk2955) (set! pk2959@pk2955 pk2962@t))))))) (dynamic-wind pk295e@swap (lambda () (begin (if (pk6d0@pk5af@mosh-cache-dir) (gensym-prefix-set! (pk2939@prefix-inc! (string-append (pk6d0@pk5af@mosh-cache-dir) '"/prefix.txt"))) (void)) (pk291b@repl))) pk295e@swap))) (begin (pk989@pk7c5@library-path (pk2921@local-library-path (car (pk291f@command-line)))) (set! pk290b@x* (with-input-from-file (car (pk291f@command-line)) (lambda () (let pk2964@f () (let ((pk2966@x (pk6c1@pk591@read-annotated))) (if (eof-object? pk2966@x) '() (cons pk2966@x (pk2964@f)))))))) (pk291f@command-line (cons (car (pk291f@command-line)) (cdr (pk291f@command-line)))) (pk6d0@pk5af@mosh-cache-dir (create-mosh-cache-dir)) (if (pk6d0@pk5af@mosh-cache-dir) (gensym-prefix-set! (pk2939@prefix-inc! (string-append (pk6d0@pk5af@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (pk2968@file) ((call/cc (lambda (pk296c@pk296a) (lambda () (with-exception-handler (lambda (pk296e@c) ((call/cc (lambda (pk2970@pk296b) (pk296c@pk296a (lambda () (if '#t '#t (pk2970@pk296b (lambda () (raise-continuable pk296e@c)))))))))) (lambda () (delete-file (string-append (pk6d0@pk5af@mosh-cache-dir) '"/" pk2968@file))))))))) (directory-list (pk6d0@pk5af@mosh-cache-dir))) (void)) (let ((pk2972@compiled (pk28fb@pke70@compile-r6rs-top-level pk290b@x*))) (begin (if (and (pk6d0@pk5af@mosh-cache-dir) (not (symbol-value '%disable-acc))) (pk98d@pk7cd@serialize-all pk6ca@pk5a3@serialize-library pk726@pk6df@compile-core-expr) (void)) (pk2972@compiled))))))))
