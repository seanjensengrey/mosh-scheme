;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! q28ca@library-file-path->cache-path (unspecified)) (set! q28cc@read-annotated (unspecified)) (set! q28ce@annotation-stripped (unspecified)) (set! q28d0@annotation? (unspecified)) (set! q28d2@annotation-source (unspecified)) (set! q28d4@annotation-expression (unspecified)) (set! q28d6@scm->fasl (unspecified)) (set! q28d8@fasl-save (unspecified)) (set! q28da@fasl-load (unspecified)) (set! q28dc@verbose? (unspecified)) (set! q28de@serialize-library (unspecified)) (set! q28e0@load-serialized-library (unspecified)) (set! q28e2@make-record-printer (unspecified)) (set! q28e4@compile-core (unspecified)) (set! q28e6@read-library-source-file (unspecified)) (set! q28e8@make-parameter (unspecified)) (set! q28ea@mosh-cache-dir (unspecified)) (set! q2980@file-options-spec (unspecified)) (set! q28ca@library-file-path->cache-path (lambda (q2981@x) (call-with-values (lambda () (open-string-output-port)) (lambda (q2987@q2984 q2988@q2986) (let ((q298b@extract q2988@q2986) (q298c@p q2987@q2984)) (letrec* ((q2990@display-hex (lambda (q2999@n) (if (<= '0 q2999@n '9) (display q2999@n q298c@p) (display (integer->char (+ (char->integer '#\a) (- q2999@n '10))) q298c@p))))) (begin (let q2993@f ((q2991@ls (string-split q2981@x '#\/))) (if (not (null? q2991@ls)) (begin (display '"_" q298c@p) (for-each (lambda (q2995@c) (if (or (char<=? '#\a q2995@c '#\z) (char<=? '#\A q2995@c '#\Z) (char<=? '#\0 q2995@c '#\9) (memv q2995@c '(#\- #\. #\_ #\~))) (display q2995@c q298c@p) (begin (display '"%" q298c@p) (let ((q2997@n (char->integer q2995@c))) (begin (q2990@display-hex (quotient q2997@n '16)) (q2990@display-hex (remainder q2997@n '16))))))) (string->list (car q2991@ls))) (q2993@f (cdr q2991@ls))) (void))) (q298b@extract)))))))) (set! q29fb@q28ca@library-file-path->cache-path q28ca@library-file-path->cache-path) (set! q28cc@read-annotated read) (set! q29fc@q28cc@read-annotated q28cc@read-annotated) (set! q28ce@annotation-stripped (lambda (q299b@x) (q28d4@annotation-expression q299b@x))) (set! q29fd@q28ce@annotation-stripped q28ce@annotation-stripped) (set! q28d0@annotation? (lambda (q299d@x) (source-info q299d@x))) (set! q29fe@q28d0@annotation? q28d0@annotation?) (set! q28d2@annotation-source (lambda (q299f@x) (source-info q299f@x))) (set! q29ff@q28d2@annotation-source q28d2@annotation-source) (set! q28d4@annotation-expression (lambda (q29a1@x) (if (pair? q29a1@x) (cons (car q29a1@x) (cdr q29a1@x)) (if (procedure? q29a1@x) (set-source-info! q29a1@x '#f) q29a1@x)))) (set! q2a00@q28d4@annotation-expression q28d4@annotation-expression) (set! q28d6@scm->fasl (lambda (q29a3@filename) (string-append (q28ea@mosh-cache-dir) '"/" (q28ca@library-file-path->cache-path q29a3@filename) '".mosh-fasl"))) (set! q2a01@q28d6@scm->fasl q28d6@scm->fasl) (set! q28d8@fasl-save (lambda (q29a5@filename q29a6@obj) (call-with-port (open-file-output-port q29a5@filename) (lambda (q29a9@port) ((symbol-value 'fasl-write!) q29a6@obj q29a9@port))))) (set! q2a02@q28d8@fasl-save q28d8@fasl-save) (set! q28da@fasl-load (lambda (q29ab@filename) (call-with-port (open-file-input-port q29ab@filename) (symbol-value 'fasl-read!)))) (set! q2a03@q28da@fasl-load q28da@fasl-load) (set! q28dc@verbose? (symbol-value '%verbose)) (set! q2a04@q28dc@verbose? q28dc@verbose?) (set! q28de@serialize-library (lambda (q29ad@filename q29ae@obj) (begin (if q28dc@verbose? (format (current-error-port) '"serialize-library ~a\n..." q29ad@filename) (void)) (let ((q29b1@expanded2core (symbol-value 'expanded2core))) (let ((q29b3@compile (symbol-value 'compile-w/o-halt))) (let ((q29b5@code q29ae@obj)) (let ((q29b7@pivot (cddddr (cddddr q29b5@code)))) (let ((q29b9@visit (q29b3@compile (q29b1@expanded2core (car q29b7@pivot))))) (begin (set-car! q29b7@pivot q29b9@visit) (let ((q29bb@pivot (cdr q29b7@pivot))) (let ((q29bd@invoke (q29b3@compile (q29b1@expanded2core (car q29bb@pivot))))) (set-car! q29bb@pivot q29bd@invoke))))))))) (let ((q29bf@fasl-file (q28d6@scm->fasl q29ad@filename))) (begin (if (file-exists? q29bf@fasl-file) (delete-file q29bf@fasl-file) (void)) ((call/cc (lambda (q29c3@q29c1) (lambda () (with-exception-handler (lambda (q29c5@c) ((call/cc (lambda (q29c7@q29c2) (q29c3@q29c1 (lambda () (if '#t (begin (if q28dc@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" q29ad@filename) (void)) (if (file-exists? q29bf@fasl-file) (delete-file q29bf@fasl-file) (void)) '#f) (q29c7@q29c2 (lambda () (raise-continuable q29c5@c)))))))))) (lambda () (q28d8@fasl-save q29bf@fasl-file q29ae@obj)))))))))))) (set! q2a05@q28de@serialize-library q28de@serialize-library) (set! q28e0@load-serialized-library (lambda (q29c9@filename q29ca@obj) (and (q28ea@mosh-cache-dir) (let ((q29cd@fasl-file (q28d6@scm->fasl q29c9@filename))) (if (and (file-exists? q29cd@fasl-file) ((symbol-value 'file-newer?) q29cd@fasl-file q29c9@filename)) (let ((q29cf@expanded2core (symbol-value 'expanded2core))) (let ((q29d1@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((q29d3@code (q28da@fasl-load q29cd@fasl-file))) (let ((q29d5@pivot (cddddr (cddddr q29d3@code)))) (let ((q29d7@visit (car q29d5@pivot))) (let ((q29d9@visit-proc (lambda () (q29d1@eval-compiled-core q29d7@visit)))) (begin (set-car! q29d5@pivot q29d9@visit-proc) (let ((q29db@pivot (cdr q29d5@pivot))) (let ((q29dd@invoke (car q29db@pivot))) (begin (set-car! q29db@pivot (lambda () (q29d1@eval-compiled-core q29dd@invoke))) (apply q29ca@obj q29d3@code))))))))))) '#f))))) (set! q2a06@q28e0@load-serialized-library q28e0@load-serialized-library) (set! q28e2@make-record-printer (lambda (q29df@name q29e0@printer) (lambda q29e3@x (begin (display '"record printer") (for-each display q29e3@x))))) (set! q2a07@q28e2@make-record-printer q28e2@make-record-printer) (set! q28e4@compile-core (lambda q29e5@x (apply error 'comile-core '"not implementated" q29e5@x))) (set! q2a08@q28e4@compile-core q28e4@compile-core) (set! q28e6@read-library-source-file (lambda (q29e7@file-name) (with-input-from-file q29e7@file-name q28cc@read-annotated))) (set! q2a09@q28e6@read-library-source-file q28e6@read-library-source-file) (set! q28e8@make-parameter (lambda q29f7 (let ((q29f8 (length q29f7))) (if (= q29f8 '1) (apply (lambda (q29e9@x) (q28e8@make-parameter q29e9@x (lambda (q29eb@x) q29eb@x))) q29f7) (if (= q29f8 '2) (apply (lambda (q29ed@x q29ee@fender) (let ((q29f1@x (q29ee@fender q29ed@x))) (lambda q29f5 (let ((q29f6 (length q29f5))) (if (= q29f6 '0) (apply (lambda () q29f1@x) q29f5) (if (= q29f6 '1) (apply (lambda (q29f3@v) (set! q29f1@x (q29ee@fender q29f3@v))) q29f5) (error 'apply '"invalid arg count"))))))) q29f7) (error 'apply '"invalid arg count")))))) (set! q2a0a@q28e8@make-parameter q28e8@make-parameter) (set! q28ea@mosh-cache-dir (q28e8@make-parameter '#f)) (set! q2a0b@q28ea@mosh-cache-dir q28ea@mosh-cache-dir) (set! q2980@file-options-spec (lambda (q29f9@x) q29f9@x)) (set! q2a0c@q2980@file-options-spec q2980@file-options-spec) (void))
(begin (set! q2a12@current-primitive-locations (unspecified)) (set! q2a14@mutable? (unspecified)) (set! q2a16@rewriter (unspecified)) (set! q2a18@expanded->core (unspecified)) (set! q2a1a@compile-core-expr (unspecified)) (set! q2a1c@pretty-print (unspecified)) (set! q2a1e@compile-core-expr-to-port (unspecified)) (set! q2a12@current-primitive-locations (q2a0a@q28e8@make-parameter (lambda (q2a1f@x) '#f) (lambda (q2a21@p) q2a21@p))) (set! q2a5d@q2a12@current-primitive-locations q2a12@current-primitive-locations) (set! q2a14@mutable? (lambda (q2a23@x) (or (pair? q2a23@x) (vector? q2a23@x) (hashtable? q2a23@x)))) (set! q2a5e@q2a14@mutable? q2a14@mutable?) (set! q2a16@rewriter (lambda (q2a25@quote-hack?) (letrec* ((q2a28@f (lambda (q2a29@x) (if (pair? q2a29@x) (let ((q2a2b@t (car q2a29@x))) (if (memv q2a2b@t '(quote)) (if (and q2a25@quote-hack? (q2a14@mutable? (cadr q2a29@x))) (let ((q2a2d@g (gensym))) (begin (set-symbol-value! q2a2d@g (cadr q2a29@x)) q2a2d@g)) q2a29@x) (if (memv q2a2b@t '(case-lambda)) (cons 'case-lambda (map (lambda (q2a2f@x) (cons (car q2a2f@x) (map q2a28@f (cdr q2a2f@x)))) (cdr q2a29@x))) (if (memv q2a2b@t '(lambda)) (cons* 'lambda (cadr q2a29@x) (map q2a28@f (cddr q2a29@x))) (if (memv q2a2b@t '(letrec)) (let ((q2a31@bindings (cadr q2a29@x)) (q2a32@body* (cddr q2a29@x))) (let ((q2a35@lhs* (map car q2a31@bindings)) (q2a36@rhs* (map cadr q2a31@bindings))) (cons* 'letrec (map list q2a35@lhs* (map q2a28@f q2a36@rhs*)) (map q2a28@f q2a32@body*)))) (if (memv q2a2b@t '(letrec*)) (let ((q2a39@bindings (cadr q2a29@x)) (q2a3a@body* (cddr q2a29@x))) (let ((q2a3d@lhs* (map car q2a39@bindings)) (q2a3e@rhs* (map cadr q2a39@bindings))) (cons* 'letrec* (map list q2a3d@lhs* (map q2a28@f q2a3e@rhs*)) (map q2a28@f q2a3a@body*)))) (if (memv q2a2b@t '(library-letrec*)) (let ((q2a41@name (cadr q2a29@x)) (q2a42@x (cdr q2a29@x))) (let ((q2a45@bindings (cadr q2a42@x)) (q2a46@body* (cddr q2a42@x))) (let ((q2a49@lhs* (map car q2a45@bindings)) (q2a4a@lhs** (map cadr q2a45@bindings)) (q2a4b@rhs* (map caddr q2a45@bindings))) (cons* 'library-letrec* q2a41@name (map list q2a49@lhs* q2a4a@lhs** (map q2a28@f q2a4b@rhs*)) (map q2a28@f q2a46@body*))))) (if (memv q2a2b@t '(begin)) (cons 'begin (map q2a28@f (cdr q2a29@x))) (if (memv q2a2b@t '(set!)) (list 'set! (cadr q2a29@x) (q2a28@f (caddr q2a29@x))) (if (memv q2a2b@t '(primitive)) (let ((q2a4f@op (cadr q2a29@x))) (let ((q2a51@t ((q2a12@current-primitive-locations) q2a4f@op))) (if q2a51@t ((lambda (q2a53@loc) q2a53@loc) q2a51@t) q2a4f@op))) (if (memv q2a2b@t '(define)) q2a29@x (if (list? q2a29@x) (map q2a28@f q2a29@x) (error 'rewrite '"invalid form ~s ~s" q2a29@x (list? q2a29@x)))))))))))))) q2a29@x)))) q2a28@f))) (set! q2a5f@q2a16@rewriter q2a16@rewriter) (set! q2a18@expanded->core (lambda (q2a55@x) ((q2a16@rewriter '#f) q2a55@x))) (set! q2a60@q2a18@expanded->core q2a18@expanded->core) (set! q2a1a@compile-core-expr (lambda (q2a57@x) ((q2a16@rewriter '#f) q2a57@x))) (set! q2a61@q2a1a@compile-core-expr q2a1a@compile-core-expr) (set! q2a1c@pretty-print write) (set! q2a62@q2a1c@pretty-print q2a1c@pretty-print) (set! q2a1e@compile-core-expr-to-port (lambda (q2a59@x q2a5a@p) (q2a1c@pretty-print ((q2a16@rewriter '#f) q2a59@x) q2a5a@p))) (set! q2a63@q2a1e@compile-core-expr-to-port q2a1e@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! q2ab2@make-collection (unspecified)) (set! q2ab4@current-library-collection (unspecified)) (set! q2ab6@rp (unspecified)) (set! q2ac0@library? (unspecified)) (set! q2ac2@library-id (unspecified)) (set! q2ac4@set-library-id! (unspecified)) (set! q2ac6@library-name (unspecified)) (set! q2ac8@set-library-name! (unspecified)) (set! q2aca@library-version (unspecified)) (set! q2acc@set-library-version! (unspecified)) (set! q2ace@library-imp* (unspecified)) (set! q2ad0@set-library-imp*! (unspecified)) (set! q2ad2@library-vis* (unspecified)) (set! q2ad4@set-library-vis*! (unspecified)) (set! q2ad6@library-inv* (unspecified)) (set! q2ad8@set-library-inv*! (unspecified)) (set! q2ada@library-subst (unspecified)) (set! q2adc@set-library-subst! (unspecified)) (set! q2ade@library-env (unspecified)) (set! q2ae0@set-library-env! (unspecified)) (set! q2ae2@library-visit-state (unspecified)) (set! q2ae4@set-library-visit-state! (unspecified)) (set! q2ae6@library-invoke-state (unspecified)) (set! q2ae8@set-library-invoke-state! (unspecified)) (set! q2aea@library-visit-code (unspecified)) (set! q2aec@set-library-visit-code! (unspecified)) (set! q2aee@library-invoke-code (unspecified)) (set! q2af0@set-library-invoke-code! (unspecified)) (set! q2af2@library-visible? (unspecified)) (set! q2af4@set-library-visible?! (unspecified)) (set! q2af6@library-source-file-name (unspecified)) (set! q2af8@set-library-source-file-name! (unspecified)) (set! q2afa@dummy (unspecified)) (set! q2afc@find-dependencies (unspecified)) (set! q2afe@find-library-by (unspecified)) (set! q2b00@library-path (unspecified)) (set! q2b02@library-extensions (unspecified)) (set! q2b04@library-name->file-name (unspecified)) (set! q2b06@file-locator (unspecified)) (set! q2b08@serialize-all (unspecified)) (set! q2b0a@current-precompiled-library-loader (unspecified)) (set! q2b0c@try-load-from-file (unspecified)) (set! q2b0e@library-loader (unspecified)) (set! q2b10@current-library-expander (unspecified)) (set! q2b12@external-pending-libraries (unspecified)) (set! q2b14@find-external-library (unspecified)) (set! q2b16@find-library-by-name (unspecified)) (set! q2b18@library-exists? (unspecified)) (set! q2b1a@find-library-by-spec/die (unspecified)) (set! q2b1c@label->binding-table (unspecified)) (set! q2b1e@install-library-record (unspecified)) (set! q2b20@install-library (unspecified)) (set! q2b22@imported-label->binding (unspecified)) (set! q2b24@invoke-library (unspecified)) (set! q2b26@visit-library (unspecified)) (set! q2b28@invoke-library-by-spec (unspecified)) (set! q2b2a@installed-libraries (unspecified)) (set! q2b2c@library-spec (unspecified)) (set! q2ab2@make-collection (lambda () (let ((q2b2d@set '())) (letrec* ((q2b30@set-cons (lambda (q2b35@x q2b36@ls) (if (memq q2b35@x q2b36@ls) q2b36@ls (cons q2b35@x q2b36@ls))))) (lambda q2b33 (let ((q2b34 (length q2b33))) (if (= q2b34 '0) (apply (lambda () q2b2d@set) q2b33) (if (= q2b34 '1) (apply (lambda (q2b31@x) (set! q2b2d@set (q2b30@set-cons q2b31@x q2b2d@set))) q2b33) (error 'apply '"invalid arg count"))))))))) (set! q2ca1@q2ab2@make-collection q2ab2@make-collection) (set! q2ab4@current-library-collection (q2a0a@q28e8@make-parameter (q2ab2@make-collection) (lambda (q2b39@x) (begin (if (not (procedure? q2b39@x)) (assertion-violation 'current-library-collection '"not a procedure" q2b39@x) (void)) q2b39@x)))) (set! q2ca2@q2ab4@current-library-collection q2ab4@current-library-collection) (set! q2ab6@rp (q2a07@q28e2@make-record-printer 'library (lambda (q2b3b@x q2b3c@p q2b3d@wr) (begin (if (not (q2ac0@library? q2b3b@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (q2aca@library-version q2b3b@x)) (q2ac6@library-name q2b3b@x) (append (q2ac6@library-name q2b3b@x) (list (q2aca@library-version q2b3b@x))))) q2b3c@p))))) (set! q2ca3@q2ab6@rp q2ab6@rp) (set! q2ac0@library? (lambda (q2b41@x) (and (simple-struct? q2b41@x) (eq? (simple-struct-name q2b41@x) 'library)))) (set! q2ca4@q2ac0@library? q2ac0@library?) (set! q2ac2@library-id (lambda (q2b43@x) (simple-struct-ref q2b43@x '0))) (set! q2ca5@q2ac2@library-id q2ac2@library-id) (set! q2ac4@set-library-id! (lambda (q2b45@x q2b46@val) (simple-struct-set! q2b45@x '0 q2b46@val))) (set! q2ca6@q2ac4@set-library-id! q2ac4@set-library-id!) (set! q2ac6@library-name (lambda (q2b49@x) (simple-struct-ref q2b49@x '1))) (set! q2ca7@q2ac6@library-name q2ac6@library-name) (set! q2ac8@set-library-name! (lambda (q2b4b@x q2b4c@val) (simple-struct-set! q2b4b@x '1 q2b4c@val))) (set! q2ca8@q2ac8@set-library-name! q2ac8@set-library-name!) (set! q2aca@library-version (lambda (q2b4f@x) (simple-struct-ref q2b4f@x '2))) (set! q2ca9@q2aca@library-version q2aca@library-version) (set! q2acc@set-library-version! (lambda (q2b51@x q2b52@val) (simple-struct-set! q2b51@x '2 q2b52@val))) (set! q2caa@q2acc@set-library-version! q2acc@set-library-version!) (set! q2ace@library-imp* (lambda (q2b55@x) (simple-struct-ref q2b55@x '3))) (set! q2cab@q2ace@library-imp* q2ace@library-imp*) (set! q2ad0@set-library-imp*! (lambda (q2b57@x q2b58@val) (simple-struct-set! q2b57@x '3 q2b58@val))) (set! q2cac@q2ad0@set-library-imp*! q2ad0@set-library-imp*!) (set! q2ad2@library-vis* (lambda (q2b5b@x) (simple-struct-ref q2b5b@x '4))) (set! q2cad@q2ad2@library-vis* q2ad2@library-vis*) (set! q2ad4@set-library-vis*! (lambda (q2b5d@x q2b5e@val) (simple-struct-set! q2b5d@x '4 q2b5e@val))) (set! q2cae@q2ad4@set-library-vis*! q2ad4@set-library-vis*!) (set! q2ad6@library-inv* (lambda (q2b61@x) (simple-struct-ref q2b61@x '5))) (set! q2caf@q2ad6@library-inv* q2ad6@library-inv*) (set! q2ad8@set-library-inv*! (lambda (q2b63@x q2b64@val) (simple-struct-set! q2b63@x '5 q2b64@val))) (set! q2cb0@q2ad8@set-library-inv*! q2ad8@set-library-inv*!) (set! q2ada@library-subst (lambda (q2b67@x) (simple-struct-ref q2b67@x '6))) (set! q2cb1@q2ada@library-subst q2ada@library-subst) (set! q2adc@set-library-subst! (lambda (q2b69@x q2b6a@val) (simple-struct-set! q2b69@x '6 q2b6a@val))) (set! q2cb2@q2adc@set-library-subst! q2adc@set-library-subst!) (set! q2ade@library-env (lambda (q2b6d@x) (simple-struct-ref q2b6d@x '7))) (set! q2cb3@q2ade@library-env q2ade@library-env) (set! q2ae0@set-library-env! (lambda (q2b6f@x q2b70@val) (simple-struct-set! q2b6f@x '7 q2b70@val))) (set! q2cb4@q2ae0@set-library-env! q2ae0@set-library-env!) (set! q2ae2@library-visit-state (lambda (q2b73@x) (simple-struct-ref q2b73@x '8))) (set! q2cb5@q2ae2@library-visit-state q2ae2@library-visit-state) (set! q2ae4@set-library-visit-state! (lambda (q2b75@x q2b76@val) (simple-struct-set! q2b75@x '8 q2b76@val))) (set! q2cb6@q2ae4@set-library-visit-state! q2ae4@set-library-visit-state!) (set! q2ae6@library-invoke-state (lambda (q2b79@x) (simple-struct-ref q2b79@x '9))) (set! q2cb7@q2ae6@library-invoke-state q2ae6@library-invoke-state) (set! q2ae8@set-library-invoke-state! (lambda (q2b7b@x q2b7c@val) (simple-struct-set! q2b7b@x '9 q2b7c@val))) (set! q2cb8@q2ae8@set-library-invoke-state! q2ae8@set-library-invoke-state!) (set! q2aea@library-visit-code (lambda (q2b7f@x) (simple-struct-ref q2b7f@x '10))) (set! q2cb9@q2aea@library-visit-code q2aea@library-visit-code) (set! q2aec@set-library-visit-code! (lambda (q2b81@x q2b82@val) (simple-struct-set! q2b81@x '10 q2b82@val))) (set! q2cba@q2aec@set-library-visit-code! q2aec@set-library-visit-code!) (set! q2aee@library-invoke-code (lambda (q2b85@x) (simple-struct-ref q2b85@x '11))) (set! q2cbb@q2aee@library-invoke-code q2aee@library-invoke-code) (set! q2af0@set-library-invoke-code! (lambda (q2b87@x q2b88@val) (simple-struct-set! q2b87@x '11 q2b88@val))) (set! q2cbc@q2af0@set-library-invoke-code! q2af0@set-library-invoke-code!) (set! q2af2@library-visible? (lambda (q2b8b@x) (simple-struct-ref q2b8b@x '12))) (set! q2cbd@q2af2@library-visible? q2af2@library-visible?) (set! q2af4@set-library-visible?! (lambda (q2b8d@x q2b8e@val) (simple-struct-set! q2b8d@x '12 q2b8e@val))) (set! q2cbe@q2af4@set-library-visible?! q2af4@set-library-visible?!) (set! q2af6@library-source-file-name (lambda (q2b91@x) (simple-struct-ref q2b91@x '13))) (set! q2cbf@q2af6@library-source-file-name q2af6@library-source-file-name) (set! q2af8@set-library-source-file-name! (lambda (q2b93@x q2b94@val) (simple-struct-set! q2b93@x '13 q2b94@val))) (set! q2cc0@q2af8@set-library-source-file-name! q2af8@set-library-source-file-name!) (set! q2afa@dummy '3) (set! q2cc1@q2afa@dummy q2afa@dummy) (set! q2afc@find-dependencies (lambda (q2b97@ls) (if (null? q2b97@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! q2cc2@q2afc@find-dependencies q2afc@find-dependencies) (set! q2afe@find-library-by (lambda (q2b99@pred) (let q2b9d@f ((q2b9b@ls ((q2ab4@current-library-collection)))) (if (null? q2b9b@ls) '#f (if (q2b99@pred (car q2b9b@ls)) (car q2b9b@ls) (q2b9d@f (cdr q2b9b@ls))))))) (set! q2cc3@q2afe@find-library-by q2afe@find-library-by) (set! q2b00@library-path (q2a0a@q28e8@make-parameter '(".") (lambda (q2b9f@x) (if (and (list? q2b9f@x) (for-all string? q2b9f@x)) (map (lambda (q2ba1@x) q2ba1@x) q2b9f@x) (assertion-violation 'library-path '"not a list of strings" q2b9f@x))))) (set! q2cc4@q2b00@library-path q2b00@library-path) (set! q2b02@library-extensions (q2a0a@q28e8@make-parameter '(".sls" ".ss" ".scm") (lambda (q2ba3@x) (if (and (list? q2ba3@x) (for-all string? q2ba3@x)) (map (lambda (q2ba5@x) q2ba5@x) q2ba3@x) (assertion-violation 'library-extensions '"not a list of strings" q2ba3@x))))) (set! q2cc5@q2b02@library-extensions q2b02@library-extensions) (set! q2b04@library-name->file-name (lambda (q2ba7@x) (call-with-values (lambda () (open-string-output-port)) (lambda (q2bad@q2baa q2bae@q2bac) (let ((q2bb1@extract q2bae@q2bac) (q2bb2@p q2bad@q2baa)) (letrec* ((q2bb6@display-hex (lambda (q2bbf@n) (if (<= '0 q2bbf@n '9) (display q2bbf@n q2bb2@p) (display (integer->char (+ (char->integer '#\a) (- q2bbf@n '10))) q2bb2@p))))) (begin (let q2bb9@f ((q2bb7@ls q2ba7@x)) (if (not (null? q2bb7@ls)) (begin (display '"/" q2bb2@p) (for-each (lambda (q2bbb@c) (if (or (char<=? '#\a q2bbb@c '#\z) (char<=? '#\A q2bbb@c '#\Z) (char<=? '#\0 q2bbb@c '#\9) (memv q2bbb@c '(#\- #\. #\_ #\~))) (display q2bbb@c q2bb2@p) (begin (display '"%" q2bb2@p) (let ((q2bbd@n (char->integer q2bbb@c))) (begin (q2bb6@display-hex (quotient q2bbd@n '16)) (q2bb6@display-hex (remainder q2bbd@n '16))))))) (string->list (symbol->string (car q2bb7@ls)))) (q2bb9@f (cdr q2bb7@ls))) (void))) (q2bb1@extract)))))))) (set! q2cc6@q2b04@library-name->file-name q2b04@library-name->file-name) (set! q2b06@file-locator (q2a0a@q28e8@make-parameter (lambda (q2bc1@x) (let ((q2bc3@str (q2b04@library-name->file-name q2bc1@x))) (let q2bcb@f ((q2bc5@ls (q2b00@library-path)) (q2bc6@exts (q2b02@library-extensions)) (q2bc7@failed-list '())) (if (null? q2bc5@ls) (letrec* ((q2bd5@q2bd0 (make-record-type-descriptor '&library-resolution &condition-rtd 'q2bd3 '#f '#f '#((immutable library) (immutable files)))) (q2bd7@q2bd2 '#f) (q2bd9@q2bd1 (make-record-constructor-descriptor q2bd5@q2bd0 &condition-rcd q2bd7@q2bd2)) (q2bdc@q2bcf (record-predicate q2bd5@q2bd0)) (q2bde@make-library-resolution-condition (record-constructor q2bd9@q2bd1)) (q2be0@q2bcd (record-accessor q2bd5@q2bd0 '0)) (q2be2@q2bce (record-accessor q2bd5@q2bd0 '1)) (q2be4@library-resolution-condition? (condition-predicate q2bd5@q2bd0)) (q2be6@condition-library (condition-accessor q2bd5@q2bd0 q2be0@q2bcd)) (q2be8@condition-files (condition-accessor q2bd5@q2bd0 q2be2@q2bce))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (q2bde@make-library-resolution-condition q2bc1@x (reverse q2bc7@failed-list))))) (if (null? q2bc6@exts) (q2bcb@f (cdr q2bc5@ls) (q2b02@library-extensions) q2bc7@failed-list) (let ((q2be9@name (string-append (car q2bc5@ls) q2bc3@str (car q2bc6@exts)))) (if (file-exists? q2be9@name) q2be9@name (q2bcb@f q2bc5@ls (cdr q2bc6@exts) (cons q2be9@name q2bc7@failed-list))))))))) (lambda (q2beb@f) (if (procedure? q2beb@f) q2beb@f (assertion-violation 'file-locator '"not a procedure" q2beb@f))))) (set! q2cc7@q2b06@file-locator q2b06@file-locator) (set! q2b08@serialize-all (lambda (q2bed@serialize q2bee@compile) (letrec* ((q2bf2@library-desc (lambda (q2bf5@x) (list (q2ac2@library-id q2bf5@x) (q2ac6@library-name q2bf5@x))))) (for-each (lambda (q2bf3@x) (if (q2af6@library-source-file-name q2bf3@x) (q2bed@serialize (q2af6@library-source-file-name q2bf3@x) (list (q2ac2@library-id q2bf3@x) (q2ac6@library-name q2bf3@x) (q2aca@library-version q2bf3@x) (map q2bf2@library-desc (q2ace@library-imp* q2bf3@x)) (map q2bf2@library-desc (q2ad2@library-vis* q2bf3@x)) (map q2bf2@library-desc (q2ad6@library-inv* q2bf3@x)) (q2ada@library-subst q2bf3@x) (q2ade@library-env q2bf3@x) (q2bee@compile (q2aea@library-visit-code q2bf3@x)) (q2bee@compile (q2aee@library-invoke-code q2bf3@x)) (q2af2@library-visible? q2bf3@x))) (void))) ((q2ab4@current-library-collection)))))) (set! q2cc8@q2b08@serialize-all q2b08@serialize-all) (set! q2b0a@current-precompiled-library-loader (q2a0a@q28e8@make-parameter (lambda (q2bf7@filename q2bf8@sk) '#f))) (set! q2cc9@q2b0a@current-precompiled-library-loader q2b0a@current-precompiled-library-loader) (set! q2b0c@try-load-from-file (lambda (q2bfb@filename) ((q2b0a@current-precompiled-library-loader) q2bfb@filename (lambda q2c21 (let ((q2c22 (length q2c21))) (if (= q2c22 '11) (apply (lambda (q2bfd@id q2bfe@name q2bff@ver q2c00@imp* q2c01@vis* q2c02@inv* q2c03@exp-subst q2c04@exp-env q2c05@visit-proc q2c06@invoke-proc q2c07@visible?) (let q2c15@f ((q2c13@deps (append q2c00@imp* q2c01@vis* q2c02@inv*))) (if (null? q2c13@deps) (begin (q2b20@install-library q2bfd@id q2bfe@name q2bff@ver q2c00@imp* q2c01@vis* q2c02@inv* q2c03@exp-subst q2c04@exp-env q2c05@visit-proc q2c06@invoke-proc '#f '#f q2c07@visible? '#f) '#t) (let ((q2c17@d (car q2c13@deps))) (let ((q2c19@label (car q2c17@d)) (q2c1a@dname (cadr q2c17@d))) (let ((q2c1d@l (q2b16@find-library-by-name q2c1a@dname))) (if (and (q2ac0@library? q2c1d@l) (eq? q2c19@label (q2ac2@library-id q2c1d@l))) (q2c15@f (cdr q2c13@deps)) (begin (if q2a04@q28dc@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" q2bfe@name q2c1a@dname q2bfb@filename) (void)) '#f)))))))) q2c21) (if (>= q2c22 '0) (apply (lambda q2c1f@others '#f) q2c21) (error 'apply '"invalid arg count")))))))) (set! q2cca@q2b0c@try-load-from-file q2b0c@try-load-from-file) (set! q2b0e@library-loader (q2a0a@q28e8@make-parameter (lambda (q2c23@x) (let ((q2c25@file-name ((q2b06@file-locator) q2c23@x))) (if (not q2c25@file-name) (assertion-violation '#f '"cannot file library" q2c23@x) (or (q2b0c@try-load-from-file q2c25@file-name) ((q2b10@current-library-expander) (q2a09@q28e6@read-library-source-file q2c25@file-name) q2c25@file-name (lambda (q2c27@name) (if (not (fast-equal? q2c27@name q2c23@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (q2c2d@q2c2a q2c2e@q2c2c) (let ((q2c31@e q2c2e@q2c2c) (q2c32@p q2c2d@q2c2a)) (begin (display '"expected to find library " q2c32@p) (write q2c23@x q2c32@p) (display '" in file " q2c32@p) (display q2c25@file-name q2c32@p) (display '", found " q2c32@p) (write q2c27@name q2c32@p) (display '" instead" q2c32@p) (q2c31@e)))))) (void)))))))) (lambda (q2c35@f) (if (procedure? q2c35@f) q2c35@f (assertion-violation 'library-locator '"not a procedure" q2c35@f))))) (set! q2ccb@q2b0e@library-loader q2b0e@library-loader) (set! q2b10@current-library-expander (q2a0a@q28e8@make-parameter (lambda (q2c37@x) (assertion-violation 'library-expander '"not initialized")) (lambda (q2c39@f) (if (procedure? q2c39@f) q2c39@f (assertion-violation 'library-expander '"not a procedure" q2c39@f))))) (set! q2ccc@q2b10@current-library-expander q2b10@current-library-expander) (set! q2b12@external-pending-libraries (q2a0a@q28e8@make-parameter '())) (set! q2ccd@q2b12@external-pending-libraries q2b12@external-pending-libraries) (set! q2b14@find-external-library (lambda (q2c3b@name) (begin (if (member q2c3b@name (q2b12@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" q2c3b@name) (void)) (let ((q2c41@q2c3e q2b12@external-pending-libraries) (q2c42@q2c40 (cons q2c3b@name (q2b12@external-pending-libraries)))) (let ((q2c45@swap (lambda () (let ((q2c47@t (q2c41@q2c3e))) (begin (q2c41@q2c3e q2c42@q2c40) (set! q2c42@q2c40 q2c47@t)))))) (dynamic-wind q2c45@swap (lambda () (begin ((q2b0e@library-loader) q2c3b@name) (or (q2afe@find-library-by (lambda (q2c49@x) (fast-equal? (q2ac6@library-name q2c49@x) q2c3b@name))) (assertion-violation '#f '"handling external library did not yield the correct library" q2c3b@name)))) q2c45@swap)))))) (set! q2cce@q2b14@find-external-library q2b14@find-external-library) (set! q2b16@find-library-by-name (lambda (q2c4b@name) (or (q2afe@find-library-by (lambda (q2c4d@x) (fast-equal? (q2ac6@library-name q2c4d@x) q2c4b@name))) (q2b14@find-external-library q2c4b@name)))) (set! q2ccf@q2b16@find-library-by-name q2b16@find-library-by-name) (set! q2b18@library-exists? (lambda (q2c4f@name) (and (q2afe@find-library-by (lambda (q2c51@x) (fast-equal? (q2ac6@library-name q2c51@x) q2c4f@name))) '#t))) (set! q2cd0@q2b18@library-exists? q2b18@library-exists?) (set! q2b1a@find-library-by-spec/die (lambda (q2c53@spec) (let ((q2c55@id (car q2c53@spec))) (or (q2afe@find-library-by (lambda (q2c57@x) (eq? q2c55@id (q2ac2@library-id q2c57@x)))) (assertion-violation '#f '"cannot find library with required spec" q2c53@spec))))) (set! q2cd1@q2b1a@find-library-by-spec/die q2b1a@find-library-by-spec/die) (set! q2b1c@label->binding-table (make-eq-hashtable)) (set! q2cd2@q2b1c@label->binding-table q2b1c@label->binding-table) (set! q2b1e@install-library-record (lambda (q2c59@lib) (begin (let ((q2c5b@exp-env (q2ade@library-env q2c59@lib))) (for-each (lambda (q2c5d@x) (let ((q2c5f@label (car q2c5d@x)) (q2c60@binding (cdr q2c5d@x))) (let ((q2c63@binding (let ((q2c65@t (car q2c60@binding))) (if (memv q2c65@t '(global)) (cons 'global (cons q2c59@lib (cdr q2c60@binding))) (if (memv q2c65@t '(global-macro)) (cons 'global-macro (cons q2c59@lib (cdr q2c60@binding))) (if (memv q2c65@t '(global-macro!)) (cons 'global-macro! (cons q2c59@lib (cdr q2c60@binding))) q2c60@binding)))))) (begin (if (hashtable-ref q2b1c@label->binding-table q2c5f@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" q2c5f@label (hashtable-ref q2b1c@label->binding-table q2c5f@label '#f) q2c63@binding) (exit)) (void)) (hashtable-set! q2b1c@label->binding-table q2c5f@label q2c63@binding))))) q2c5b@exp-env)) ((q2ab4@current-library-collection) q2c59@lib)))) (set! q2cd3@q2b1e@install-library-record q2b1e@install-library-record) (set! q2b20@install-library (lambda (q2c67@id q2c68@name q2c69@ver q2c6a@imp* q2c6b@vis* q2c6c@inv* q2c6d@exp-subst q2c6e@exp-env q2c6f@visit-proc q2c70@invoke-proc q2c71@visit-code q2c72@invoke-code q2c73@visible? q2c74@source-file-name) (let ((q2c83@imp-lib* (map q2b1a@find-library-by-spec/die q2c6a@imp*)) (q2c84@vis-lib* (map q2b1a@find-library-by-spec/die q2c6b@vis*)) (q2c85@inv-lib* (map q2b1a@find-library-by-spec/die q2c6c@inv*))) (begin (if (not (and (symbol? q2c67@id) (list? q2c68@name) (list? q2c69@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" q2c67@id q2c68@name q2c69@ver) (void)) (if (q2b18@library-exists? q2c68@name) (assertion-violation 'install-library '"library is already installed" q2c68@name) (void)) (let ((q2c89@lib (make-simple-struct 'library '15 (list q2c67@id q2c68@name q2c69@ver q2c83@imp-lib* q2c84@vis-lib* q2c85@inv-lib* q2c6d@exp-subst q2c6e@exp-env q2c6f@visit-proc q2c70@invoke-proc q2c71@visit-code q2c72@invoke-code q2c73@visible? q2c74@source-file-name)))) (q2b1e@install-library-record q2c89@lib)))))) (set! q2cd4@q2b20@install-library q2b20@install-library) (set! q2b22@imported-label->binding (lambda (q2c8b@lab) (hashtable-ref q2b1c@label->binding-table q2c8b@lab '#f))) (set! q2cd5@q2b22@imported-label->binding q2b22@imported-label->binding) (set! q2b24@invoke-library (lambda (q2c8d@lib) (let ((q2c8f@invoke (q2ae6@library-invoke-state q2c8d@lib))) (if (procedure? q2c8f@invoke) (begin (q2ae8@set-library-invoke-state! q2c8d@lib (lambda () (assertion-violation 'invoke '"circularity detected" q2c8d@lib))) (for-each q2b24@invoke-library (q2ad6@library-inv* q2c8d@lib)) (q2ae8@set-library-invoke-state! q2c8d@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" q2c8d@lib))) (q2c8f@invoke) (q2ae8@set-library-invoke-state! q2c8d@lib '#t)) (void))))) (set! q2cd6@q2b24@invoke-library q2b24@invoke-library) (set! q2b26@visit-library (lambda (q2c91@lib) (let ((q2c93@visit (q2ae2@library-visit-state q2c91@lib))) (if (procedure? q2c93@visit) (begin (q2ae4@set-library-visit-state! q2c91@lib (lambda () (assertion-violation 'visit '"circularity detected" q2c91@lib))) (for-each q2b24@invoke-library (q2ad2@library-vis* q2c91@lib)) (q2ae4@set-library-visit-state! q2c91@lib (lambda () (assertion-violation 'invoke '"first visit did not return" q2c91@lib))) (q2c93@visit) (q2ae4@set-library-visit-state! q2c91@lib '#t)) (void))))) (set! q2cd7@q2b26@visit-library q2b26@visit-library) (set! q2b28@invoke-library-by-spec (lambda (q2c95@spec) (q2b24@invoke-library (q2b1a@find-library-by-spec/die q2c95@spec)))) (set! q2cd8@q2b28@invoke-library-by-spec q2b28@invoke-library-by-spec) (set! q2b2a@installed-libraries (lambda q2c9d (let ((q2c9e (length q2c9d))) (if (= q2c9e '1) (apply (lambda (q2c97@all?) (let q2c9b@f ((q2c99@ls ((q2ab4@current-library-collection)))) (if (null? q2c99@ls) '() (if (or q2c97@all? (q2af2@library-visible? (car q2c99@ls))) (cons (car q2c99@ls) (q2c9b@f (cdr q2c99@ls))) (q2c9b@f (cdr q2c99@ls)))))) q2c9d) (if (= q2c9e '0) (apply (lambda () (q2b2a@installed-libraries '#f)) q2c9d) (error 'apply '"invalid arg count")))))) (set! q2cd9@q2b2a@installed-libraries q2b2a@installed-libraries) (set! q2b2c@library-spec (lambda (q2c9f@x) (begin (if (not (q2ac0@library? q2c9f@x)) (assertion-violation 'library-spec '"not a library" q2c9f@x) (void)) (list (q2ac2@library-id q2c9f@x) (q2ac6@library-name q2c9f@x) (q2aca@library-version q2c9f@x))))) (set! q2cda@q2b2c@library-spec q2b2c@library-spec) (void))
(begin (set! q2cde@build-global-define (unspecified)) (set! q2d4f@build-lambda (unspecified)) (set! q2d51@build-case-lambda (unspecified)) (set! q2d7f@build-sequence (unspecified)) (set! q2d81@build-void (unspecified)) (set! q2d83@build-letrec (unspecified)) (set! q2d85@build-let (unspecified)) (set! q2d87@build-named-let (unspecified)) (set! q2d89@build-letrec* (unspecified)) (set! q2d8b@build-library-letrec* (unspecified)) (set! q2d8d@build-receive (unspecified)) (set! q2cde@build-global-define (lambda (q2d8e@x) (q2d81@build-void))) (set! q2e1c@q2cde@build-global-define q2cde@build-global-define) (set! q2d4f@build-lambda (lambda (q2d90@ae q2d91@vars q2d92@exp) (list 'lambda q2d91@vars q2d92@exp))) (set! q2e1d@q2d4f@build-lambda q2d4f@build-lambda) (set! q2d51@build-case-lambda (lambda (q2d96@ae q2d97@vars* q2d98@exp*) (letrec* ((q2d9d@build-error (lambda (q2dd4@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (q2d9f@build-pred (lambda (q2dbc@ae q2dbd@n q2dbe@vars) (call-with-values (lambda () (let q2dca@f ((q2dc6@vars q2dbe@vars) (q2dc7@count '0)) (if (pair? q2dc6@vars) (q2dca@f (cdr q2dc6@vars) (+ q2dc7@count '1)) (if (null? q2dc6@vars) (values q2dc7@count '=) (values q2dc7@count '>=))))) (lambda (q2dcc@q2dc3 q2dcd@q2dc5) (let ((q2dd0@pred q2dcd@q2dc5) (q2dd1@count q2dcc@q2dc3)) (list (list 'primitive q2dd0@pred) q2dbd@n (list 'quote q2dd1@count))))))) (q2da1@build-apply (lambda (q2db4@ae q2db5@g q2db6@vars q2db7@exp) (list '(primitive apply) (q2d4f@build-lambda q2db4@ae q2db6@vars q2db7@exp) q2db5@g))) (q2da3@expand-case-lambda (lambda (q2da4@ae q2da5@vars q2da6@exp*) (let ((q2daa@g (gensym)) (q2dab@n (gensym))) (list 'lambda q2daa@g (q2d85@build-let q2da4@ae (list q2dab@n) (list (list '(primitive length) q2daa@g)) (let q2db2@f ((q2dae@vars* q2d97@vars*) (q2daf@exp* q2da6@exp*)) (if (null? q2dae@vars*) (q2d9d@build-error q2da4@ae) (list 'if (q2d9f@build-pred q2da4@ae q2dab@n (car q2dae@vars*)) (q2da1@build-apply q2da4@ae q2daa@g (car q2dae@vars*) (car q2daf@exp*)) (q2db2@f (cdr q2dae@vars*) (cdr q2daf@exp*))))))))))) (if (= (length q2d98@exp*) '1) (q2d4f@build-lambda q2d96@ae (car q2d97@vars*) (car q2d98@exp*)) (q2da3@expand-case-lambda q2d96@ae q2d97@vars* q2d98@exp*))))) (set! q2e1e@q2d51@build-case-lambda q2d51@build-case-lambda) (set! q2d7f@build-sequence (lambda (q2dd6@ae q2dd7@exps) (let q2ddc@loop ((q2dda@exps q2dd7@exps)) (if (null? (cdr q2dda@exps)) (car q2dda@exps) (if (equal? (car q2dda@exps) (q2d81@build-void)) (q2ddc@loop (cdr q2dda@exps)) (cons 'begin q2dda@exps)))))) (set! q2e1f@q2d7f@build-sequence q2d7f@build-sequence) (set! q2d81@build-void (lambda () '((primitive void)))) (set! q2e20@q2d81@build-void q2d81@build-void) (set! q2d83@build-letrec (lambda (q2dde@ae q2ddf@vars q2de0@val-exps q2de1@body-exp) (if (null? q2ddf@vars) q2de1@body-exp (list 'letrec (map list q2ddf@vars q2de0@val-exps) q2de1@body-exp)))) (set! q2e21@q2d83@build-letrec q2d83@build-letrec) (set! q2d85@build-let (lambda (q2de6@ae q2de7@vars q2de8@val-exps q2de9@body-exp) (if (null? q2de7@vars) q2de9@body-exp (list 'let (map list q2de7@vars q2de8@val-exps) q2de9@body-exp)))) (set! q2e22@q2d85@build-let q2d85@build-let) (set! q2d87@build-named-let (lambda (q2dee@ae q2def@name q2df0@vars q2df1@val-exps q2df2@body-exp) (list 'let q2def@name (map list q2df0@vars q2df1@val-exps) q2df2@body-exp))) (set! q2e23@q2d87@build-named-let q2d87@build-named-let) (set! q2d89@build-letrec* (lambda (q2df8@ae q2df9@vars q2dfa@val-exps q2dfb@body-exp) (if (null? q2df9@vars) q2dfb@body-exp (list 'letrec* (map list q2df9@vars q2dfa@val-exps) q2dfb@body-exp)))) (set! q2e24@q2d89@build-letrec* q2d89@build-letrec*) (set! q2d8b@build-library-letrec* (lambda (q2e00@ae q2e01@name q2e02@vars q2e03@locs q2e04@val-exps q2e05@body-exp) (cons 'begin (append (map (lambda (q2e0c@var) (cons 'set! (cons q2e0c@var '((unspecified))))) q2e02@vars) (append (apply append (map (lambda (q2e0e@var q2e0f@loc q2e10@val-exp) (list (list 'set! q2e0e@var q2e10@val-exp) (list 'set! q2e0f@loc q2e0e@var))) q2e02@vars q2e03@locs q2e04@val-exps)) (list q2e05@body-exp)))))) (set! q2e25@q2d8b@build-library-letrec* q2d8b@build-library-letrec*) (set! q2d8d@build-receive (lambda (q2e14@ae q2e15@vars q2e16@producer q2e17@body*) (begin (display '"************** in ") (cons 'receive (cons q2e15@vars (cons q2e16@producer q2e17@body*)))))) (set! q2e26@q2d8d@build-receive q2d8d@build-receive) (void))
(begin (set! q2e35@file-options-macro (unspecified)) (set! q2e37@set-cons (unspecified)) (set! q2e39@set-union (unspecified)) (set! q2e3e@top-mark* (unspecified)) (set! q2e40@top-marked? (unspecified)) (set! q2e42@gen-lexical (unspecified)) (set! q2e44@gen-global (unspecified)) (set! q2e46@gen-label (unspecified)) (set! q2e48@gen-top-level-label (unspecified)) (set! q2e4a@gen-define-label+loc (unspecified)) (set! q2e4c@gen-define-label (unspecified)) (set! q2e56@rib? (unspecified)) (set! q2e58@rib-sym* (unspecified)) (set! q2e5a@set-rib-sym*! (unspecified)) (set! q2e5c@rib-mark** (unspecified)) (set! q2e5e@set-rib-mark**! (unspecified)) (set! q2e60@rib-label* (unspecified)) (set! q2e62@set-rib-label*! (unspecified)) (set! q2e64@rib-sealed/freq (unspecified)) (set! q2e66@set-rib-sealed/freq! (unspecified)) (set! q2e68@rib-cache (unspecified)) (set! q2e6a@set-rib-cache! (unspecified)) (set! q2e6c@dummy (unspecified)) (set! q2e6e@make-empty-rib (unspecified)) (set! q2e70@extend-rib! (unspecified)) (set! q2e72@extend-rib/nc! (unspecified)) (set! q2e74@make-rib-map (unspecified)) (set! q2e76@seal-rib! (unspecified)) (set! q2e78@unseal-rib! (unspecified)) (set! q2e7a@make-full-rib (unspecified)) (set! q2e7c@rp (unspecified)) (set! q2e86@stx? (unspecified)) (set! q2e88@stx-expr (unspecified)) (set! q2e8a@set-stx-expr! (unspecified)) (set! q2e8c@stx-mark* (unspecified)) (set! q2e8e@set-stx-mark*! (unspecified)) (set! q2e90@stx-subst* (unspecified)) (set! q2e92@set-stx-subst*! (unspecified)) (set! q2e94@stx-ae* (unspecified)) (set! q2e96@set-stx-ae*! (unspecified)) (set! q2e98@dummy (unspecified)) (set! q2e9a@datum->stx (unspecified)) (set! q2e9c@gen-mark (unspecified)) (set! q2e9e@anti-mark (unspecified)) (set! q2ea0@anti-mark? (unspecified)) (set! q2ea2@mkstx (unspecified)) (set! q2ea4@add-mark (unspecified)) (set! q2ea6@add-subst (unspecified)) (set! q2ea8@syntax-kind? (unspecified)) (set! q2eaa@syntax-vector->list (unspecified)) (set! q2eac@syntax-pair? (unspecified)) (set! q2eae@syntax-vector? (unspecified)) (set! q2eb0@syntax-null? (unspecified)) (set! q2eb2@syntax-list? (unspecified)) (set! q2eb4@syntax-car (unspecified)) (set! q2eb6@syntax-cdr (unspecified)) (set! q2eb8@syntax->list (unspecified)) (set! q2eba@id? (unspecified)) (set! q2ebc@id->sym (unspecified)) (set! q2ebe@bound-id=? (unspecified)) (set! q2ec0@free-id=? (unspecified)) (set! q2ec2@valid-bound-ids? (unspecified)) (set! q2ec4@distinct-bound-ids? (unspecified)) (set! q2ec6@bound-id-member? (unspecified)) (set! q2ec8@self-evaluating? (unspecified)) (set! q2eca@strip-annotations (unspecified)) (set! q2ecc@strip (unspecified)) (set! q2ece@stx->datum (unspecified)) (set! q2ed0@id->label (unspecified)) (set! q2ed2@label->binding (unspecified)) (set! q2ed4@make-binding (unspecified)) (set! q2ed6@binding-type (unspecified)) (set! q2ed8@binding-value (unspecified)) (set! q2eda@raise-unbound-error (unspecified)) (set! q2edc@syntax-type (unspecified)) (set! q2eea@sanitize-binding (unspecified)) (set! q2eec@make-variable-transformer (unspecified)) (set! q2eee@variable-transformer? (unspecified)) (set! q2ef0@variable-transformer-procedure (unspecified)) (set! q2ef2@make-eval-transformer (unspecified)) (set! q3043@parse-define (unspecified)) (set! q3045@parse-define-syntax (unspecified)) (set! q3047@scheme-stx-hashtable (unspecified)) (set! q3049@scheme-stx (unspecified)) (set! q304b@lexical-var (unspecified)) (set! q304d@lexical-mutable? (unspecified)) (set! q304f@set-lexical-mutable! (unspecified)) (set! q3051@add-lexical (unspecified)) (set! q3053@add-lexicals (unspecified)) (set! q3055@letrec-helper (unspecified)) (set! q3057@let-transformer (unspecified)) (set! q3059@letrec-transformer (unspecified)) (set! q305b@letrec*-transformer (unspecified)) (set! q305d@fluid-let-syntax-transformer (unspecified)) (set! q305f@type-descriptor-transformer (unspecified)) (set! q3061@record-type-descriptor-transformer (unspecified)) (set! q3063@record-constructor-descriptor-transformer (unspecified)) (set! q3065@when-macro (unspecified)) (set! q3067@unless-macro (unspecified)) (set! q3069@if-transformer (unspecified)) (set! q306b@and-transformer (unspecified)) (set! q306d@or-transformer (unspecified)) (set! q306f@case-macro (unspecified)) (set! q3071@quote-transformer (unspecified)) (set! q3073@case-lambda-transformer (unspecified)) (set! q3075@lambda-transformer (unspecified)) (set! q3077@bless (unspecified)) (set! q3079@with-syntax-macro (unspecified)) (set! q307b@invalid-fmls-error (unspecified)) (set! q307d@let-macro (unspecified)) (set! q307f@let-values-macro (unspecified)) (set! q3081@let*-values-macro (unspecified)) (set! q3083@trace-lambda-macro (unspecified)) (set! q3085@trace-define-macro (unspecified)) (set! q3087@trace-define-syntax-macro (unspecified)) (set! q3089@trace-let/rec-syntax (unspecified)) (set! q308b@trace-let-syntax-macro (unspecified)) (set! q308d@trace-letrec-syntax-macro (unspecified)) (set! q308f@guard-macro (unspecified)) (set! q3091@define-enumeration-macro (unspecified)) (set! q3093@time-macro (unspecified)) (set! q3095@delay-macro (unspecified)) (set! q3097@assert-macro (unspecified)) (set! q3099@endianness-macro (unspecified)) (set! q309b@identifier-syntax-macro (unspecified)) (set! q309d@do-macro (unspecified)) (set! q309f@let*-macro (unspecified)) (set! q30a1@or-macro (unspecified)) (set! q30a3@and-macro (unspecified)) (set! q30a5@cond-macro (unspecified)) (set! q30a7@do-include (unspecified)) (set! q30a9@include-macro (unspecified)) (set! q30ab@include-into-macro (unspecified)) (set! q30ad@syntax-rules-macro (unspecified)) (set! q30af@quasiquote-macro (unspecified)) (set! q30b1@quasisyntax-macro (unspecified)) (set! q30b3@define-struct-macro (unspecified)) (set! q30b5@define-record-type-macro (unspecified)) (set! q30b7@define-condition-type-macro (unspecified)) (set! q30b9@incorrect-usage-macro (unspecified)) (set! q30bb@parameterize-macro (unspecified)) (set! q30bd@foreign-call-transformer (unspecified)) (set! q30bf@convert-pattern (unspecified)) (set! q30c1@syntax-dispatch (unspecified)) (set! q30c3@ellipsis? (unspecified)) (set! q30c5@underscore? (unspecified)) (set! q30c7@verify-literals (unspecified)) (set! q30c9@syntax-case-transformer (unspecified)) (set! q30cb@ellipsis-map (unspecified)) (set! q30cd@syntax-transformer (unspecified)) (set! q30cf@core-macro-transformer (unspecified)) (set! q30d1@symbol-macro (unspecified)) (set! q30d3@macro-transformer (unspecified)) (set! q30d5@local-macro-transformer (unspecified)) (set! q30d7@do-macro-call (unspecified)) (set! q30d9@chi-macro (unspecified)) (set! q30db@chi-local-macro (unspecified)) (set! q30dd@chi-global-macro (unspecified)) (set! q30df@chi-expr* (unspecified)) (set! q30e1@chi-application (unspecified)) (set! q30e3@chi-expr (unspecified)) (set! q30e5@chi-set! (unspecified)) (set! q30e7@verify-formals (unspecified)) (set! q30e9@chi-lambda-clause (unspecified)) (set! q30eb@chi-lambda-clause* (unspecified)) (set! q30ed@chi-defun (unspecified)) (set! q30ef@chi-rhs (unspecified)) (set! q30f1@expand-interaction-rhs*/init* (unspecified)) (set! q30f3@chi-rhs* (unspecified)) (set! q30f5@find-bound=? (unspecified)) (set! q30f7@find-dups (unspecified)) (set! q30f9@chi-internal (unspecified)) (set! q30fb@parse-module (unspecified)) (set! q3105@module-interface? (unspecified)) (set! q3107@module-interface-first-mark (unspecified)) (set! q3109@set-module-interface-first-mark! (unspecified)) (set! q310b@module-interface-exp-id-vec (unspecified)) (set! q310d@set-module-interface-exp-id-vec! (unspecified)) (set! q310f@module-interface-exp-lab-vec (unspecified)) (set! q3111@set-module-interface-exp-lab-vec! (unspecified)) (set! q3113@dummy (unspecified)) (set! q3115@module-interface-exp-id* (unspecified)) (set! q3117@chi-internal-module (unspecified)) (set! q3119@chi-body* (unspecified)) (set! q311b@expand-transformer (unspecified)) (set! q311d@parse-exports (unspecified)) (set! q311f@parse-library-name (unspecified)) (set! q3121@parse-library (unspecified)) (set! q3123@parse-import-spec* (unspecified)) (set! q3125@make-top-rib (unspecified)) (set! q3127@make-collector (unspecified)) (set! q3129@inv-collector (unspecified)) (set! q312b@vis-collector (unspecified)) (set! q312d@imp-collector (unspecified)) (set! q312f@chi-library-internal (unspecified)) (set! q3131@chi-interaction-expr (unspecified)) (set! q3133@library-body-expander (unspecified)) (set! q3135@core-library-expander (unspecified)) (set! q3137@parse-top-level-program (unspecified)) (set! q3139@top-level-expander (unspecified)) (set! q313b@rp (unspecified)) (set! q3145@env? (unspecified)) (set! q3147@env-names (unspecified)) (set! q3149@set-env-names! (unspecified)) (set! q314b@env-labels (unspecified)) (set! q314d@set-env-labels! (unspecified)) (set! q314f@env-itc (unspecified)) (set! q3151@set-env-itc! (unspecified)) (set! q3153@dummy (unspecified)) (set! q3155@rp (unspecified)) (set! q315f@interaction-env? (unspecified)) (set! q3161@interaction-env-rib (unspecified)) (set! q3163@set-interaction-env-rib! (unspecified)) (set! q3165@interaction-env-r (unspecified)) (set! q3167@set-interaction-env-r! (unspecified)) (set! q3169@interaction-env-locs (unspecified)) (set! q316b@set-interaction-env-locs! (unspecified)) (set! q316d@dummy (unspecified)) (set! q316f@interaction-environment-symbols (unspecified)) (set! q3171@environment-bindings (unspecified)) (set! q3173@parse-binding (unspecified)) (set! q3175@environment? (unspecified)) (set! q3177@environment-symbols (unspecified)) (set! q3179@environment (unspecified)) (set! q317b@null-environment (unspecified)) (set! q317d@scheme-report-environment (unspecified)) (set! q317f@expand (unspecified)) (set! q3181@eval (unspecified)) (set! q3183@library-expander (unspecified)) (set! q3185@boot-library-expand (unspecified)) (set! q3187@rev-map-append (unspecified)) (set! q3189@build-exports (unspecified)) (set! q318b@make-export-subst (unspecified)) (set! q318d@make-export-env/macros (unspecified)) (set! q318f@generate-temporaries (unspecified)) (set! q3191@free-identifier=? (unspecified)) (set! q3193@bound-identifier=? (unspecified)) (set! q3195@make-source-condition (unspecified)) (set! q3197@extract-position-condition (unspecified)) (set! q3199@expression-position (unspecified)) (set! q319b@assertion-error (unspecified)) (set! q319d@syntax-error (unspecified)) (set! q319f@syntax-violation* (unspecified)) (set! q31a1@syntax-violation (unspecified)) (set! q31a3@identifier? (unspecified)) (set! q31a5@datum->syntax (unspecified)) (set! q31a7@syntax->datum (unspecified)) (set! q31a9@ungensym-all (unspecified)) (set! q31ab@compile-r6rs-top-level (unspecified)) (set! q31ad@pre-compile-r6rs-top-level (unspecified)) (set! q31af@interaction-environment (unspecified)) (set! q31b1@top-level-context (unspecified)) (set! q2e35@file-options-macro (lambda (q31b2@x) (letrec* ((q31b5@valid-option? (lambda (q31be@x) (and (q2eba@id? q31be@x) (memq (q2ebc@id->sym q31be@x) '(no-fail no-create no-truncate)))))) (let ((q31b6@t q31b2@x)) (let ((q31b8@ls/false (q30c1@syntax-dispatch q31b6@t '(_ . each-any)))) (if (and q31b8@ls/false (apply (lambda (q31ba@opt*) (for-all q31b5@valid-option? q31ba@opt*)) q31b8@ls/false)) (apply (lambda (q31bc@opt*) (q3077@bless (list 'make-file-options (list 'quote q31bc@opt*)))) q31b8@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q31b6@t))))))) (set! q4b08@q2e35@file-options-macro q2e35@file-options-macro) (set! q2e37@set-cons (lambda (q31c0@x q31c1@ls) (if (memq q31c0@x q31c1@ls) q31c1@ls (cons q31c0@x q31c1@ls)))) (set! q4b09@q2e37@set-cons q2e37@set-cons) (set! q2e39@set-union (lambda (q31c4@ls1 q31c5@ls2) (if (null? q31c4@ls1) q31c5@ls2 (if (memq (car q31c4@ls1) q31c5@ls2) (q2e39@set-union (cdr q31c4@ls1) q31c5@ls2) (cons (car q31c4@ls1) (q2e39@set-union (cdr q31c4@ls1) q31c5@ls2)))))) (set! q4b0a@q2e39@set-union q2e39@set-union) (set! q2e3e@top-mark* '(top)) (set! q4b0b@q2e3e@top-mark* q2e3e@top-mark*) (set! q2e40@top-marked? (lambda (q31c8@m*) (memq 'top q31c8@m*))) (set! q4b0c@q2e40@top-marked? q2e40@top-marked?) (set! q2e42@gen-lexical (lambda (q31ca@sym) (if (symbol? q31ca@sym) (gensym q31ca@sym) (if (q2e86@stx? q31ca@sym) (q2e42@gen-lexical (q2ebc@id->sym q31ca@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" q31ca@sym))))) (set! q4b0d@q2e42@gen-lexical q2e42@gen-lexical) (set! q2e44@gen-global (lambda (q31cc@x) (q2e42@gen-lexical q31cc@x))) (set! q4b0e@q2e44@gen-global q2e44@gen-global) (set! q2e46@gen-label (lambda (q31ce@_) (gensym))) (set! q4b0f@q2e46@gen-label q2e46@gen-label) (set! q2e48@gen-top-level-label (lambda (q31d0@id q31d1@rib) (letrec* ((q31d5@find (lambda (q31e0@sym q31e1@mark* q31e2@sym* q31e3@mark** q31e4@label*) (and (pair? q31e2@sym*) (if (and (eq? q31e0@sym (car q31e2@sym*)) (same-marks? q31e1@mark* (car q31e3@mark**))) (car q31e4@label*) (q31d5@find q31e0@sym q31e1@mark* (cdr q31e2@sym*) (cdr q31e3@mark**) (cdr q31e4@label*))))))) (let ((q31d6@sym (q2ebc@id->sym q31d0@id)) (q31d7@mark* (q2e8c@stx-mark* q31d0@id))) (let ((q31da@sym* (q2e58@rib-sym* q31d1@rib))) (let ((q31dc@t (and (memq q31d6@sym (q2e58@rib-sym* q31d1@rib)) (q31d5@find q31d6@sym q31d7@mark* q31da@sym* (q2e5c@rib-mark** q31d1@rib) (q2e60@rib-label* q31d1@rib))))) (if q31dc@t ((lambda (q31de@label) (if (q2cd5@q2b22@imported-label->binding q31de@label) (gensym) q31de@label)) q31dc@t) (gensym)))))))) (set! q4b10@q2e48@gen-top-level-label q2e48@gen-top-level-label) (set! q2e4a@gen-define-label+loc (lambda (q31ea@id q31eb@rib) (let ((q31ee@t (q31b1@top-level-context))) (if q31ee@t ((lambda (q31f0@env) (let ((q31f2@label (q2e48@gen-top-level-label q31ea@id q31eb@rib)) (q31f3@locs (q3169@interaction-env-locs q31f0@env))) (values q31f2@label (let ((q31f6@t (assq q31f2@label q31f3@locs))) (if q31f6@t (cdr q31f6@t) (let ((q31f8@loc (q2e42@gen-lexical q31ea@id))) (begin (q316b@set-interaction-env-locs! q31f0@env (cons (cons q31f2@label q31f8@loc) q31f3@locs)) q31f8@loc))))))) q31ee@t) (values (gensym) (q2e42@gen-lexical q31ea@id)))))) (set! q4b11@q2e4a@gen-define-label+loc q2e4a@gen-define-label+loc) (set! q2e4c@gen-define-label (lambda (q31fa@id q31fb@rib) (if (q31b1@top-level-context) (q2e48@gen-top-level-label q31fa@id q31fb@rib) (gensym)))) (set! q4b12@q2e4c@gen-define-label q2e4c@gen-define-label) (set! q2e56@rib? (lambda (q31fe@x) (and (simple-struct? q31fe@x) (eq? (simple-struct-name q31fe@x) 'rib)))) (set! q4b13@q2e56@rib? q2e56@rib?) (set! q2e58@rib-sym* (lambda (q3200@x) (simple-struct-ref q3200@x '0))) (set! q4b14@q2e58@rib-sym* q2e58@rib-sym*) (set! q2e5a@set-rib-sym*! (lambda (q3202@x q3203@val) (simple-struct-set! q3202@x '0 q3203@val))) (set! q4b15@q2e5a@set-rib-sym*! q2e5a@set-rib-sym*!) (set! q2e5c@rib-mark** (lambda (q3206@x) (simple-struct-ref q3206@x '1))) (set! q4b16@q2e5c@rib-mark** q2e5c@rib-mark**) (set! q2e5e@set-rib-mark**! (lambda (q3208@x q3209@val) (simple-struct-set! q3208@x '1 q3209@val))) (set! q4b17@q2e5e@set-rib-mark**! q2e5e@set-rib-mark**!) (set! q2e60@rib-label* (lambda (q320c@x) (simple-struct-ref q320c@x '2))) (set! q4b18@q2e60@rib-label* q2e60@rib-label*) (set! q2e62@set-rib-label*! (lambda (q320e@x q320f@val) (simple-struct-set! q320e@x '2 q320f@val))) (set! q4b19@q2e62@set-rib-label*! q2e62@set-rib-label*!) (set! q2e64@rib-sealed/freq (lambda (q3212@x) (simple-struct-ref q3212@x '3))) (set! q4b1a@q2e64@rib-sealed/freq q2e64@rib-sealed/freq) (set! q2e66@set-rib-sealed/freq! (lambda (q3214@x q3215@val) (simple-struct-set! q3214@x '3 q3215@val))) (set! q4b1b@q2e66@set-rib-sealed/freq! q2e66@set-rib-sealed/freq!) (set! q2e68@rib-cache (lambda (q3218@x) (simple-struct-ref q3218@x '4))) (set! q4b1c@q2e68@rib-cache q2e68@rib-cache) (set! q2e6a@set-rib-cache! (lambda (q321a@x q321b@val) (simple-struct-set! q321a@x '4 q321b@val))) (set! q4b1d@q2e6a@set-rib-cache! q2e6a@set-rib-cache!) (set! q2e6c@dummy '3) (set! q4b1e@q2e6c@dummy q2e6c@dummy) (set! q2e6e@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! q4b1f@q2e6e@make-empty-rib q2e6e@make-empty-rib) (set! q2e70@extend-rib! (lambda (q321e@rib q321f@id q3220@label) (letrec* ((q3225@find (lambda (q3232@sym q3233@mark* q3234@sym* q3235@mark** q3236@label*) (and (pair? q3234@sym*) (if (and (eq? q3232@sym (car q3234@sym*)) (same-marks? q3233@mark* (car q3235@mark**))) q3236@label* (q3225@find q3232@sym q3233@mark* (cdr q3234@sym*) (cdr q3235@mark**) (cdr q3236@label*))))))) (begin (if (q2e64@rib-sealed/freq q321e@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" q321e@rib) (void)) (let ((q3226@sym (q2ebc@id->sym q321f@id)) (q3227@mark* (q2e8c@stx-mark* q321f@id))) (let ((q322a@sym* (q2e58@rib-sym* q321e@rib))) (let ((q322c@t (and (memq q3226@sym (q2e58@rib-sym* q321e@rib)) (q3225@find q3226@sym q3227@mark* q322a@sym* (q2e5c@rib-mark** q321e@rib) (q2e60@rib-label* q321e@rib))))) (if q322c@t ((lambda (q322e@p) (if (not (eq? q3220@label (car q322e@p))) (if (q31b1@top-level-context) (set-car! q322e@p q3220@label) (q31a1@syntax-violation '#f '"multiple definitions of identifier" q321f@id)) (void))) q322c@t) (begin (if (q2e68@rib-cache q321e@rib) (hashtable-update! (q2e68@rib-cache q321e@rib) q3226@sym (lambda (q3230@e) (cons (cons q3227@mark* q3220@label) q3230@e)) '()) (void)) (q2e5a@set-rib-sym*! q321e@rib (cons q3226@sym q322a@sym*)) (q2e5e@set-rib-mark**! q321e@rib (cons q3227@mark* (q2e5c@rib-mark** q321e@rib))) (q2e62@set-rib-label*! q321e@rib (cons q3220@label (q2e60@rib-label* q321e@rib)))))))))))) (set! q4b20@q2e70@extend-rib! q2e70@extend-rib!) (set! q2e72@extend-rib/nc! (lambda (q323c@rib q323d@id q323e@label) (let ((q3242@sym (q2ebc@id->sym q323d@id)) (q3243@mark* (q2e8c@stx-mark* q323d@id))) (let ((q3246@sym* (q2e58@rib-sym* q323c@rib))) (begin (if (q2e68@rib-cache q323c@rib) (hashtable-update! (q2e68@rib-cache q323c@rib) q3242@sym (lambda (q3248@e) (cons (cons q3243@mark* q323e@label) q3248@e)) '()) (void)) (q2e5a@set-rib-sym*! q323c@rib (cons q3242@sym q3246@sym*)) (q2e5e@set-rib-mark**! q323c@rib (cons q3243@mark* (q2e5c@rib-mark** q323c@rib))) (q2e62@set-rib-label*! q323c@rib (cons q323e@label (q2e60@rib-label* q323c@rib)))))))) (set! q4b21@q2e72@extend-rib/nc! q2e72@extend-rib/nc!) (set! q2e74@make-rib-map (lambda (q324a@sym*) (let ((q324c@ht (make-eq-hashtable))) (let q3252@f ((q324e@i '0) (q324f@sym* q324a@sym*)) (if (null? q324f@sym*) q324c@ht (begin (hashtable-update! q324c@ht (car q324f@sym*) (lambda (q3254@x) (cons q324e@i q3254@x)) '()) (q3252@f (+ q324e@i '1) (cdr q324f@sym*)))))))) (set! q4b22@q2e74@make-rib-map q2e74@make-rib-map) (set! q2e76@seal-rib! (lambda (q3256@rib) (let ((q3258@sym* (q2e58@rib-sym* q3256@rib))) (if (not (null? q3258@sym*)) (begin (q2e5a@set-rib-sym*! q3256@rib (list->vector q3258@sym*)) (q2e5e@set-rib-mark**! q3256@rib (list->vector (q2e5c@rib-mark** q3256@rib))) (q2e62@set-rib-label*! q3256@rib (list->vector (q2e60@rib-label* q3256@rib))) (q2e66@set-rib-sealed/freq! q3256@rib (q2e74@make-rib-map q3258@sym*))) (void))))) (set! q4b23@q2e76@seal-rib! q2e76@seal-rib!) (set! q2e78@unseal-rib! (lambda (q325a@rib) (if (q2e64@rib-sealed/freq q325a@rib) (begin (q2e66@set-rib-sealed/freq! q325a@rib '#f) (q2e5a@set-rib-sym*! q325a@rib (vector->list (q2e58@rib-sym* q325a@rib))) (q2e5e@set-rib-mark**! q325a@rib (vector->list (q2e5c@rib-mark** q325a@rib))) (q2e62@set-rib-label*! q325a@rib (vector->list (q2e60@rib-label* q325a@rib)))) (void)))) (set! q4b24@q2e78@unseal-rib! q2e78@unseal-rib!) (set! q2e7a@make-full-rib (lambda (q325c@id* q325d@label*) (let ((q3260@r (make-simple-struct 'rib '6 (list (map q2ebc@id->sym q325c@id*) (map q2e8c@stx-mark* q325c@id*) q325d@label* '#f '#f)))) (begin (q2e76@seal-rib! q3260@r) q3260@r)))) (set! q4b25@q2e7a@make-full-rib q2e7a@make-full-rib) (set! q2e7c@rp (q2a07@q28e2@make-record-printer 'stx (lambda (q3262@x q3263@p q3264@wr) (begin (display '"#<syntax " q3263@p) (write (q2ece@stx->datum q3262@x) q3263@p) (let ((q3268@expr (q2e88@stx-expr q3262@x))) (if (q29fe@q28d0@annotation? q3268@expr) (let ((q326a@src (q29ff@q28d2@annotation-source q3268@expr))) (if (pair? q326a@src) (begin (display '" [" q3263@p) (display (cdr q326a@src) q3263@p) (display '" of " q3263@p) (display (car q326a@src) q3263@p) (display '"]" q3263@p)) (void))) (void))) (display '">" q3263@p))))) (set! q4b26@q2e7c@rp q2e7c@rp) (set! q2e86@stx? (lambda (q326c@x) (and (simple-struct? q326c@x) (eq? (simple-struct-name q326c@x) 'stx)))) (set! q4b27@q2e86@stx? q2e86@stx?) (set! q2e88@stx-expr (lambda (q326e@x) (simple-struct-ref q326e@x '0))) (set! q4b28@q2e88@stx-expr q2e88@stx-expr) (set! q2e8a@set-stx-expr! (lambda (q3270@x q3271@val) (simple-struct-set! q3270@x '0 q3271@val))) (set! q4b29@q2e8a@set-stx-expr! q2e8a@set-stx-expr!) (set! q2e8c@stx-mark* (lambda (q3274@x) (simple-struct-ref q3274@x '1))) (set! q4b2a@q2e8c@stx-mark* q2e8c@stx-mark*) (set! q2e8e@set-stx-mark*! (lambda (q3276@x q3277@val) (simple-struct-set! q3276@x '1 q3277@val))) (set! q4b2b@q2e8e@set-stx-mark*! q2e8e@set-stx-mark*!) (set! q2e90@stx-subst* (lambda (q327a@x) (simple-struct-ref q327a@x '2))) (set! q4b2c@q2e90@stx-subst* q2e90@stx-subst*) (set! q2e92@set-stx-subst*! (lambda (q327c@x q327d@val) (simple-struct-set! q327c@x '2 q327d@val))) (set! q4b2d@q2e92@set-stx-subst*! q2e92@set-stx-subst*!) (set! q2e94@stx-ae* (lambda (q3280@x) (simple-struct-ref q3280@x '3))) (set! q4b2e@q2e94@stx-ae* q2e94@stx-ae*) (set! q2e96@set-stx-ae*! (lambda (q3282@x q3283@val) (simple-struct-set! q3282@x '3 q3283@val))) (set! q4b2f@q2e96@set-stx-ae*! q2e96@set-stx-ae*!) (set! q2e98@dummy '3) (set! q4b30@q2e98@dummy q2e98@dummy) (set! q2e9a@datum->stx (lambda (q3286@id q3287@datum) (make-simple-struct 'stx '5 (list q3287@datum (q2e8c@stx-mark* q3286@id) (q2e90@stx-subst* q3286@id) (q2e94@stx-ae* q3286@id))))) (set! q4b31@q2e9a@datum->stx q2e9a@datum->stx) (set! q2e9c@gen-mark (lambda () (string '#\m))) (set! q4b32@q2e9c@gen-mark q2e9c@gen-mark) (set! q2e9e@anti-mark '#f) (set! q4b33@q2e9e@anti-mark q2e9e@anti-mark) (set! q2ea0@anti-mark? not) (set! q4b34@q2ea0@anti-mark? q2ea0@anti-mark?) (set! q2ea2@mkstx (lambda (q328a@e q328b@m* q328c@s* q328d@ae*) (if (and (q2e86@stx? q328a@e) (not (q2e40@top-marked? q328b@m*))) (call-with-values (lambda () (join-wraps q328b@m* q328c@s* q328d@ae* q328a@e)) (lambda (q3298@q3293 q3299@q3295 q329a@q3297) (let ((q329e@ae* q329a@q3297) (q329f@s* q3299@q3295) (q32a0@m* q3298@q3293)) (make-simple-struct 'stx '5 (list (q2e88@stx-expr q328a@e) q32a0@m* q329f@s* q329e@ae*))))) (make-simple-struct 'stx '5 (list q328a@e q328b@m* q328c@s* q328d@ae*))))) (set! q4b35@q2ea2@mkstx q2ea2@mkstx) (set! q2ea4@add-mark (lambda (q32a4@m q32a5@e q32a6@ae) (q2ea2@mkstx q32a5@e (list q32a4@m) '(shift) (list q32a6@ae)))) (set! q4b36@q2ea4@add-mark q2ea4@add-mark) (set! q2ea6@add-subst (lambda (q32aa@subst q32ab@e) (q2ea2@mkstx q32ab@e '() (list q32aa@subst) '()))) (set! q4b37@q2ea6@add-subst q2ea6@add-subst) (set! q2ea8@syntax-kind? (lambda (q32ae@x q32af@p?) (if (q2e86@stx? q32ae@x) (q2ea8@syntax-kind? (q2e88@stx-expr q32ae@x) q32af@p?) (if (q29fe@q28d0@annotation? q32ae@x) (q2ea8@syntax-kind? (q2a00@q28d4@annotation-expression q32ae@x) q32af@p?) (q32af@p? q32ae@x))))) (set! q4b38@q2ea8@syntax-kind? q2ea8@syntax-kind?) (set! q2eaa@syntax-vector->list (lambda (q32b2@x) (if (q2e86@stx? q32b2@x) (let ((q32b4@ls (q2eaa@syntax-vector->list (q2e88@stx-expr q32b2@x))) (q32b5@m* (q2e8c@stx-mark* q32b2@x)) (q32b6@s* (q2e90@stx-subst* q32b2@x)) (q32b7@ae* (q2e94@stx-ae* q32b2@x))) (map (lambda (q32bc@x) (q2ea2@mkstx q32bc@x q32b5@m* q32b6@s* q32b7@ae*)) q32b4@ls)) (if (q29fe@q28d0@annotation? q32b2@x) (q2eaa@syntax-vector->list (q2a00@q28d4@annotation-expression q32b2@x)) (if (vector? q32b2@x) (vector->list q32b2@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" q32b2@x)))))) (set! q4b39@q2eaa@syntax-vector->list q2eaa@syntax-vector->list) (set! q2eac@syntax-pair? (lambda (q32be@x) (q2ea8@syntax-kind? q32be@x pair?))) (set! q4b3a@q2eac@syntax-pair? q2eac@syntax-pair?) (set! q2eae@syntax-vector? (lambda (q32c0@x) (q2ea8@syntax-kind? q32c0@x vector?))) (set! q4b3b@q2eae@syntax-vector? q2eae@syntax-vector?) (set! q2eb0@syntax-null? (lambda (q32c2@x) (q2ea8@syntax-kind? q32c2@x null?))) (set! q4b3c@q2eb0@syntax-null? q2eb0@syntax-null?) (set! q2eb2@syntax-list? (lambda (q32c4@x) (or (q2eb0@syntax-null? q32c4@x) (and (q2eac@syntax-pair? q32c4@x) (q2eb2@syntax-list? (q2eb6@syntax-cdr q32c4@x)))))) (set! q4b3d@q2eb2@syntax-list? q2eb2@syntax-list?) (set! q2eb4@syntax-car (lambda (q32c6@x) (if (q2e86@stx? q32c6@x) (q2ea2@mkstx (q2eb4@syntax-car (q2e88@stx-expr q32c6@x)) (q2e8c@stx-mark* q32c6@x) (q2e90@stx-subst* q32c6@x) (q2e94@stx-ae* q32c6@x)) (if (q29fe@q28d0@annotation? q32c6@x) (q2eb4@syntax-car (q2a00@q28d4@annotation-expression q32c6@x)) (if (pair? q32c6@x) (car q32c6@x) (assertion-violation 'syntax-car '"BUG: not a pair" q32c6@x)))))) (set! q4b3e@q2eb4@syntax-car q2eb4@syntax-car) (set! q2eb6@syntax-cdr (lambda (q32c8@x) (if (q2e86@stx? q32c8@x) (q2ea2@mkstx (q2eb6@syntax-cdr (q2e88@stx-expr q32c8@x)) (q2e8c@stx-mark* q32c8@x) (q2e90@stx-subst* q32c8@x) (q2e94@stx-ae* q32c8@x)) (if (q29fe@q28d0@annotation? q32c8@x) (q2eb6@syntax-cdr (q2a00@q28d4@annotation-expression q32c8@x)) (if (pair? q32c8@x) (cdr q32c8@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" q32c8@x)))))) (set! q4b3f@q2eb6@syntax-cdr q2eb6@syntax-cdr) (set! q2eb8@syntax->list (lambda (q32ca@x) (if (q2eac@syntax-pair? q32ca@x) (cons (q2eb4@syntax-car q32ca@x) (q2eb8@syntax->list (q2eb6@syntax-cdr q32ca@x))) (if (q2eb0@syntax-null? q32ca@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" q32ca@x))))) (set! q4b40@q2eb8@syntax->list q2eb8@syntax->list) (set! q2eba@id? (lambda (q32cc@x) (and (q2e86@stx? q32cc@x) (symbol? (q2e88@stx-expr q32cc@x))))) (set! q4b41@q2eba@id? q2eba@id?) (set! q2ebc@id->sym (lambda (q32ce@x) (q2e88@stx-expr q32ce@x))) (set! q4b42@q2ebc@id->sym q2ebc@id->sym) (set! q2ebe@bound-id=? (lambda (q32d0@x q32d1@y) (and (eq? (q2ebc@id->sym q32d0@x) (q2ebc@id->sym q32d1@y)) (same-marks? (q2e8c@stx-mark* q32d0@x) (q2e8c@stx-mark* q32d1@y))))) (set! q4b43@q2ebe@bound-id=? q2ebe@bound-id=?) (set! q2ec0@free-id=? (lambda (q32d4@i q32d5@j) (let ((q32d8@t0 (id->real-label q32d4@i)) (q32d9@t1 (id->real-label q32d5@j))) (if (or q32d8@t0 q32d9@t1) (eq? q32d8@t0 q32d9@t1) (eq? (q2ebc@id->sym q32d4@i) (q2ebc@id->sym q32d5@j)))))) (set! q4b44@q2ec0@free-id=? q2ec0@free-id=?) (set! q2ec2@valid-bound-ids? (lambda (q32dc@id*) (and (for-all q2eba@id? q32dc@id*) (q2ec4@distinct-bound-ids? q32dc@id*)))) (set! q4b45@q2ec2@valid-bound-ids? q2ec2@valid-bound-ids?) (set! q2ec4@distinct-bound-ids? (lambda (q32de@id*) (or (null? q32de@id*) (and (not (q2ec6@bound-id-member? (car q32de@id*) (cdr q32de@id*))) (q2ec4@distinct-bound-ids? (cdr q32de@id*)))))) (set! q4b46@q2ec4@distinct-bound-ids? q2ec4@distinct-bound-ids?) (set! q2ec6@bound-id-member? (lambda (q32e0@id q32e1@id*) (and (pair? q32e1@id*) (or (q2ebe@bound-id=? q32e0@id (car q32e1@id*)) (q2ec6@bound-id-member? q32e0@id (cdr q32e1@id*)))))) (set! q4b47@q2ec6@bound-id-member? q2ec6@bound-id-member?) (set! q2ec8@self-evaluating? (lambda (q32e4@x) (or (number? q32e4@x) (string? q32e4@x) (char? q32e4@x) (boolean? q32e4@x) (regexp? q32e4@x) (bytevector? q32e4@x)))) (set! q4b48@q2ec8@self-evaluating? q2ec8@self-evaluating?) (set! q2eca@strip-annotations (lambda (q32e6@x) (if (pair? q32e6@x) (cons (q2eca@strip-annotations (car q32e6@x)) (q2eca@strip-annotations (cdr q32e6@x))) (if (vector? q32e6@x) (vector-map q2eca@strip-annotations q32e6@x) (if (q29fe@q28d0@annotation? q32e6@x) (q29fd@q28ce@annotation-stripped q32e6@x) q32e6@x))))) (set! q4b49@q2eca@strip-annotations q2eca@strip-annotations) (set! q2ecc@strip (lambda (q32e8@x q32e9@m*) (if (q2e40@top-marked? q32e9@m*) (if (or (q29fe@q28d0@annotation? q32e8@x) (and (pair? q32e8@x) (q29fe@q28d0@annotation? (car q32e8@x))) (and (vector? q32e8@x) (> (vector-length q32e8@x) '0) (q29fe@q28d0@annotation? (vector-ref q32e8@x '0)))) (q2eca@strip-annotations q32e8@x) q32e8@x) (let q32ee@f ((q32ec@x q32e8@x)) (if (q2e86@stx? q32ec@x) (begin (if (pair? (q2e88@stx-expr q32ec@x)) (begin (set-source-info! (q2e88@stx-expr q32ec@x) '#f) (set-source-info! (cdr (q2e88@stx-expr q32ec@x)) '#f) (set-source-info! (car (q2e88@stx-expr q32ec@x)) '#f)) (void)) (q2ecc@strip (q2e88@stx-expr q32ec@x) (q2e8c@stx-mark* q32ec@x))) (if (q29fe@q28d0@annotation? q32ec@x) (q29fd@q28ce@annotation-stripped q32ec@x) (if (pair? q32ec@x) (let ((q32f0@a (q32ee@f (car q32ec@x))) (q32f1@d (q32ee@f (cdr q32ec@x)))) (if (and (eq? q32f0@a (car q32ec@x)) (eq? q32f1@d (cdr q32ec@x))) q32ec@x (cons q32f0@a q32f1@d))) (if (vector? q32ec@x) (let ((q32f4@old (vector->list q32ec@x))) (let ((q32f6@new (map q32ee@f q32f4@old))) (if (for-all eq? q32f4@old q32f6@new) q32ec@x (list->vector q32f6@new)))) q32ec@x)))))))) (set! q4b4a@q2ecc@strip q2ecc@strip) (set! q2ece@stx->datum (lambda (q32f8@x) (q2ecc@strip q32f8@x '()))) (set! q4b4b@q2ece@stx->datum q2ece@stx->datum) (set! q2ed0@id->label (lambda (q32fa@id) (or (id->real-label q32fa@id) (let ((q32fc@t (q31b1@top-level-context))) (if q32fc@t ((lambda (q32fe@env) (let ((q3300@rib (q3161@interaction-env-rib q32fe@env))) (call-with-values (lambda () (q2e4a@gen-define-label+loc q32fa@id q3300@rib)) (lambda (q3306@q3303 q3307@q3305) (let ((q330a@loc_ q3307@q3305) (q330b@lab q3306@q3303)) (begin (q2e70@extend-rib! q3300@rib q32fa@id q330b@lab) q330b@lab)))))) q32fc@t) '#f))))) (set! q4b4c@q2ed0@id->label q2ed0@id->label) (set! q2ed2@label->binding (lambda (q330e@x q330f@r) (let ((q3312@t (q2cd5@q2b22@imported-label->binding q330e@x))) (if q3312@t ((lambda (q3314@b) (if (and (pair? q3314@b) (eq? (car q3314@b) '$core-rtd)) (cons '$rtd (map q3077@bless (cdr q3314@b))) (if (and (pair? q3314@b) (eq? (car q3314@b) 'global-rtd)) (let ((q3316@lib (cadr q3314@b)) (q3317@loc (cddr q3314@b))) (cons '$rtd (symbol-value q3317@loc))) q3314@b))) q3312@t) (let ((q331a@t (assq q330e@x q330f@r))) (if q331a@t (cdr q331a@t) (let ((q331c@t (q31b1@top-level-context))) (if q331c@t ((lambda (q331e@env) (let ((q3320@t (assq q330e@x (q3169@interaction-env-locs q331e@env)))) (if q3320@t ((lambda (q3322@p) (cons* 'lexical (cdr q3322@p) '#f)) q3320@t) '(displaced-lexical . #f)))) q331c@t) '(displaced-lexical . #f))))))))) (set! q4b4d@q2ed2@label->binding q2ed2@label->binding) (set! q2ed4@make-binding cons) (set! q4b4e@q2ed4@make-binding q2ed4@make-binding) (set! q2ed6@binding-type car) (set! q4b4f@q2ed6@binding-type q2ed6@binding-type) (set! q2ed8@binding-value cdr) (set! q4b50@q2ed8@binding-value q2ed8@binding-value) (set! q2eda@raise-unbound-error (lambda (q3324@id) (q319f@syntax-violation* '#f '"unbound identifier" q3324@id (make-undefined-violation)))) (set! q4b51@q2eda@raise-unbound-error q2eda@raise-unbound-error) (set! q2edc@syntax-type (lambda (q3326@e q3327@r) (if (q2eba@id? q3326@e) (let ((q332a@id q3326@e)) (let ((q332c@label (q2ed0@id->label q332a@id))) (let ((q332e@b (q2ed2@label->binding q332c@label q3327@r))) (let ((q3330@type (q2ed6@binding-type q332e@b))) (begin (if (not q332c@label) (q2eda@raise-unbound-error q332a@id) (void)) (let ((q3332@t q3330@type)) (if (memv q3332@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values q3330@type (q2ed8@binding-value q332e@b) q332a@id) (values 'other '#f '#f)))))))) (if (q2eac@syntax-pair? q3326@e) (let ((q3334@id (q2eb4@syntax-car q3326@e))) (if (q2eba@id? q3334@id) (let ((q3336@label (q2ed0@id->label q3334@id))) (let ((q3338@b (q2ed2@label->binding q3336@label q3327@r))) (let ((q333a@type (q2ed6@binding-type q3338@b))) (begin (if (not q3336@label) (q2eda@raise-unbound-error q3334@id) (void)) (let ((q333c@t q333a@type)) (if (memv q333c@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values q333a@type (q2ed8@binding-value q3338@b) q3334@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((q333e@d (q2ece@stx->datum q3326@e))) (if (q2ec8@self-evaluating? q333e@d) (values 'constant q333e@d '#f) (values 'other '#f '#f))))))) (set! q4b52@q2edc@syntax-type q2edc@syntax-type) (set! q2eea@sanitize-binding (lambda (q3340@x q3341@src) (if (procedure? q3340@x) (cons* 'local-macro q3340@x q3341@src) (if (and (pair? q3340@x) (eq? (car q3340@x) 'macro!) (procedure? (cdr q3340@x))) (cons* 'local-macro! (cdr q3340@x) q3341@src) (if (and (pair? q3340@x) (eq? (car q3340@x) '$rtd)) q3340@x (assertion-violation 'expand '"invalid transformer" q3340@x)))))) (set! q4b53@q2eea@sanitize-binding q2eea@sanitize-binding) (set! q2eec@make-variable-transformer (lambda (q3344@x) (if (procedure? q3344@x) (cons 'macro! q3344@x) (assertion-violation 'make-variable-transformer '"not a procedure" q3344@x)))) (set! q4b54@q2eec@make-variable-transformer q2eec@make-variable-transformer) (set! q2eee@variable-transformer? (lambda (q3346@x) (and (pair? q3346@x) (eq? (car q3346@x) 'macro!) (procedure? (cdr q3346@x))))) (set! q4b55@q2eee@variable-transformer? q2eee@variable-transformer?) (set! q2ef0@variable-transformer-procedure (lambda (q3348@x) (if (q2eee@variable-transformer? q3348@x) (cdr q3348@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" q3348@x)))) (set! q4b56@q2ef0@variable-transformer-procedure q2ef0@variable-transformer-procedure) (set! q2ef2@make-eval-transformer (lambda (q334a@x) (q2eea@sanitize-binding (eval-core (q2a60@q2a18@expanded->core q334a@x)) q334a@x))) (set! q4b57@q2ef2@make-eval-transformer q2ef2@make-eval-transformer) (set! q3043@parse-define (lambda (q334c@x) (let ((q334e@t q334c@x)) (let ((q3350@ls/false (q30c1@syntax-dispatch q334e@t '(_ (any . any) any . each-any)))) (if (and q3350@ls/false (apply (lambda (q3352@id q3353@fmls q3354@b q3355@b*) (q2eba@id? q3352@id)) q3350@ls/false)) (apply (lambda (q335a@id q335b@fmls q335c@b q335d@b*) (begin (q30e7@verify-formals q335b@fmls q334c@x) (values q335a@id (cons 'defun (cons q335b@fmls (cons q335c@b q335d@b*)))))) q3350@ls/false) (let ((q3362@t q334e@t)) (let ((q3364@ls/false (q30c1@syntax-dispatch q3362@t '(_ any any)))) (if (and q3364@ls/false (apply (lambda (q3366@id q3367@val) (q2eba@id? q3366@id)) q3364@ls/false)) (apply (lambda (q336a@id q336b@val) (values q336a@id (cons 'expr q336b@val))) q3364@ls/false) (let ((q336e@t q3362@t)) (let ((q3370@ls/false (q30c1@syntax-dispatch q336e@t '(_ any)))) (if (and q3370@ls/false (apply (lambda (q3372@id) (q2eba@id? q3372@id)) q3370@ls/false)) (apply (lambda (q3374@id) (values q3374@id (cons 'expr (q3077@bless '(void))))) q3370@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q336e@t)))))))))))) (set! q4b58@q3043@parse-define q3043@parse-define) (set! q3045@parse-define-syntax (lambda (q3376@x) (let ((q3378@t q3376@x)) (let ((q337a@ls/false (q30c1@syntax-dispatch q3378@t '(_ any any)))) (if (and q337a@ls/false (apply (lambda (q337c@id q337d@val) (q2eba@id? q337c@id)) q337a@ls/false)) (apply (lambda (q3380@id q3381@val) (values q3380@id q3381@val)) q337a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3378@t)))))) (set! q4b59@q3045@parse-define-syntax q3045@parse-define-syntax) (set! q3047@scheme-stx-hashtable (make-eq-hashtable)) (set! q4b5a@q3047@scheme-stx-hashtable q3047@scheme-stx-hashtable) (set! q3049@scheme-stx (lambda (q3384@sym) (or (hashtable-ref q3047@scheme-stx-hashtable q3384@sym '#f) (let ((q3386@subst (q2cb1@q2ada@library-subst (q2ccf@q2b16@find-library-by-name '(psyntax system $all))))) (let ((q3388@stx (make-simple-struct 'stx '5 (list q3384@sym q2e3e@top-mark* '() '())))) (let ((q338a@stx (let ((q338c@t (assq q3384@sym q3386@subst))) (if q338c@t ((lambda (q338e@x) (let ((q3390@name (car q338e@x)) (q3391@label (cdr q338e@x))) (q2ea6@add-subst (make-simple-struct 'rib '6 (list (list q3390@name) (list q2e3e@top-mark*) (list q3391@label) '#f '#f)) q3388@stx))) q338c@t) q3388@stx)))) (begin (hashtable-set! q3047@scheme-stx-hashtable q3384@sym q338a@stx) q338a@stx))))))) (set! q4b5b@q3049@scheme-stx q3049@scheme-stx) (set! q304b@lexical-var car) (set! q4b5c@q304b@lexical-var q304b@lexical-var) (set! q304d@lexical-mutable? cdr) (set! q4b5d@q304d@lexical-mutable? q304d@lexical-mutable?) (set! q304f@set-lexical-mutable! set-cdr!) (set! q4b5e@q304f@set-lexical-mutable! q304f@set-lexical-mutable!) (set! q3051@add-lexical (lambda (q3394@lab q3395@lex q3396@r) (cons (cons* q3394@lab 'lexical q3395@lex '#f) q3396@r))) (set! q4b5f@q3051@add-lexical q3051@add-lexical) (set! q3053@add-lexicals (lambda (q339a@lab* q339b@lex* q339c@r) (if (null? q339a@lab*) q339c@r (q3053@add-lexicals (cdr q339a@lab*) (cdr q339b@lex*) (q3051@add-lexical (car q339a@lab*) (car q339b@lex*) q339c@r))))) (set! q4b60@q3053@add-lexicals q3053@add-lexicals) (set! q3055@letrec-helper (lambda (q33a0@e q33a1@r q33a2@mr q33a3@build) (let ((q33a8@t q33a0@e)) (let ((q33aa@ls/false (q30c1@syntax-dispatch q33a8@t '(_ #(each (any any)) any . each-any)))) (if q33aa@ls/false (apply (lambda (q33ac@lhs* q33ad@rhs* q33ae@b q33af@b*) (if (not (q2ec2@valid-bound-ids? q33ac@lhs*)) (q307b@invalid-fmls-error q33a0@e q33ac@lhs*) (let ((q33b4@lex* (map q2e42@gen-lexical q33ac@lhs*)) (q33b5@lab* (map q2e46@gen-label q33ac@lhs*))) (let ((q33b8@rib (q2e7a@make-full-rib q33ac@lhs* q33b5@lab*)) (q33b9@r (q3053@add-lexicals q33b5@lab* q33b4@lex* q33a1@r))) (let ((q33bc@body (q30f9@chi-internal (q2ea6@add-subst q33b8@rib (cons q33ae@b q33af@b*)) q33b9@r q33a2@mr)) (q33bd@rhs* (q30df@chi-expr* (map (lambda (q33c0@x) (q2ea6@add-subst q33b8@rib q33c0@x)) q33ad@rhs*) q33b9@r q33a2@mr))) (q33a3@build '#f q33b4@lex* q33bd@rhs* q33bc@body)))))) q33aa@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q33a8@t)))))) (set! q4b61@q3055@letrec-helper q3055@letrec-helper) (set! q3057@let-transformer (lambda (q33c2@e q33c3@r q33c4@mr) (let ((q33c8@t q33c2@e)) (let ((q33ca@ls/false (q30c1@syntax-dispatch q33c8@t '(_ #(each (any any)) any . each-any)))) (if q33ca@ls/false (apply (lambda (q33cc@lhs* q33cd@rhs* q33ce@b q33cf@b*) (if (not (q2ec2@valid-bound-ids? q33cc@lhs*)) (q307b@invalid-fmls-error q33c2@e q33cc@lhs*) (let ((q33d4@lex* (map q2e42@gen-lexical q33cc@lhs*)) (q33d5@lab* (map q2e46@gen-label q33cc@lhs*)) (q33d6@rhs* (q30df@chi-expr* q33cd@rhs* q33c3@r q33c4@mr))) (let ((q33da@rib (q2e7a@make-full-rib q33cc@lhs* q33d5@lab*)) (q33db@r (q3053@add-lexicals q33d5@lab* q33d4@lex* q33c3@r))) (let ((q33de@body (q30f9@chi-internal (q2ea6@add-subst q33da@rib (cons q33ce@b q33cf@b*)) q33db@r q33c4@mr))) (q2e22@q2d85@build-let '#f q33d4@lex* q33d6@rhs* q33de@body)))))) q33ca@ls/false) (let ((q33e0@t q33c8@t)) (let ((q33e2@ls/false (q30c1@syntax-dispatch q33e0@t '(_ any #(each (any any)) any . each-any)))) (if q33e2@ls/false (apply (lambda (q33e4@loop q33e5@lhs* q33e6@rhs* q33e7@b q33e8@b*) (if (not (q2ec2@valid-bound-ids? q33e5@lhs*)) (q307b@invalid-fmls-error q33c2@e q33e5@lhs*) (let ((q33ee@lex* (map q2e42@gen-lexical q33e5@lhs*)) (q33ef@lab* (map q2e46@gen-label q33e5@lhs*)) (q33f0@rhs* (q30df@chi-expr* q33e6@rhs* q33c3@r q33c4@mr)) (q33f1@loop-lex (q2e42@gen-lexical q33e4@loop)) (q33f2@loop-lab (q2e46@gen-label q33e4@loop))) (let ((q33f8@loop-rib (q2e7a@make-full-rib (list q33e4@loop) (list q33f2@loop-lab))) (q33f9@rib (q2e7a@make-full-rib q33e5@lhs* q33ef@lab*)) (q33fa@r (q3053@add-lexicals (cons q33f2@loop-lab q33ef@lab*) (cons q33f1@loop-lex q33ee@lex*) q33c3@r))) (let ((q33fe@body (q30f9@chi-internal (q2ea6@add-subst q33f8@loop-rib (q2ea6@add-subst q33f9@rib (cons q33e7@b q33e8@b*))) q33fa@r q33c4@mr))) (q2e23@q2d87@build-named-let '#f q33f1@loop-lex q33ee@lex* q33f0@rhs* q33fe@body)))))) q33e2@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q33e0@t))))))))) (set! q4b62@q3057@let-transformer q3057@let-transformer) (set! q3059@letrec-transformer (lambda (q3400@e q3401@r q3402@mr) (q3055@letrec-helper q3400@e q3401@r q3402@mr q2e21@q2d83@build-letrec))) (set! q4b63@q3059@letrec-transformer q3059@letrec-transformer) (set! q305b@letrec*-transformer (lambda (q3406@e q3407@r q3408@mr) (q3055@letrec-helper q3406@e q3407@r q3408@mr q2e24@q2d89@build-letrec*))) (set! q4b64@q305b@letrec*-transformer q305b@letrec*-transformer) (set! q305d@fluid-let-syntax-transformer (lambda (q340c@e q340d@r q340e@mr) (letrec* ((q3413@lookup (lambda (q3426@x) (or (q2ed0@id->label q3426@x) (q31a1@syntax-violation '#f '"unbound identifier" q340c@e q3426@x))))) (let ((q3414@t q340c@e)) (let ((q3416@ls/false (q30c1@syntax-dispatch q3414@t '(_ #(each (any any)) any . each-any)))) (if q3416@ls/false (apply (lambda (q3418@lhs* q3419@rhs* q341a@b q341b@b*) (if (not (q2ec2@valid-bound-ids? q3418@lhs*)) (q307b@invalid-fmls-error q340c@e q3418@lhs*) (let ((q3420@lab* (map q3413@lookup q3418@lhs*)) (q3421@rhs* (map (lambda (q3424@x) (q2ef2@make-eval-transformer (q311b@expand-transformer q3424@x q340e@mr))) q3419@rhs*))) (q30f9@chi-internal (cons q341a@b q341b@b*) (append (map cons q3420@lab* q3421@rhs*) q340d@r) (append (map cons q3420@lab* q3421@rhs*) q340e@mr))))) q3416@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3414@t))))))) (set! q4b65@q305d@fluid-let-syntax-transformer q305d@fluid-let-syntax-transformer) (set! q305f@type-descriptor-transformer (lambda (q3428@e q3429@r q342a@mr) (let ((q342e@t q3428@e)) (let ((q3430@ls/false (q30c1@syntax-dispatch q342e@t '(_ any)))) (if (and q3430@ls/false (apply (lambda (q3432@id) (q2eba@id? q3432@id)) q3430@ls/false)) (apply (lambda (q3434@id) (let ((q3436@lab (q2ed0@id->label q3434@id))) (let ((q3438@b (q2ed2@label->binding q3436@lab q3429@r))) (let ((q343a@type (q2ed6@binding-type q3438@b))) (begin (if (not q3436@lab) (q2eda@raise-unbound-error q3434@id) (void)) (if (not (and (eq? q343a@type '$rtd) (not (list? (q2ed8@binding-value q3438@b))))) (q31a1@syntax-violation '#f '"not a record type" q3428@e) (void)) (list 'quote (q2ed8@binding-value q3438@b))))))) q3430@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q342e@t)))))) (set! q4b66@q305f@type-descriptor-transformer q305f@type-descriptor-transformer) (set! q3061@record-type-descriptor-transformer (lambda (q343c@e q343d@r q343e@mr) (let ((q3442@t q343c@e)) (let ((q3444@ls/false (q30c1@syntax-dispatch q3442@t '(_ any)))) (if (and q3444@ls/false (apply (lambda (q3446@id) (q2eba@id? q3446@id)) q3444@ls/false)) (apply (lambda (q3448@id) (let ((q344a@lab (q2ed0@id->label q3448@id))) (let ((q344c@b (q2ed2@label->binding q344a@lab q343d@r))) (let ((q344e@type (q2ed6@binding-type q344c@b))) (begin (if (not q344a@lab) (q2eda@raise-unbound-error q3448@id) (void)) (if (not (and (eq? q344e@type '$rtd) (list? (q2ed8@binding-value q344c@b)))) (q31a1@syntax-violation '#f '"not a record type" q343c@e) (void)) (q30e3@chi-expr (car (q2ed8@binding-value q344c@b)) q343d@r q343e@mr)))))) q3444@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3442@t)))))) (set! q4b67@q3061@record-type-descriptor-transformer q3061@record-type-descriptor-transformer) (set! q3063@record-constructor-descriptor-transformer (lambda (q3450@e q3451@r q3452@mr) (let ((q3456@t q3450@e)) (let ((q3458@ls/false (q30c1@syntax-dispatch q3456@t '(_ any)))) (if (and q3458@ls/false (apply (lambda (q345a@id) (q2eba@id? q345a@id)) q3458@ls/false)) (apply (lambda (q345c@id) (let ((q345e@lab (q2ed0@id->label q345c@id))) (let ((q3460@b (q2ed2@label->binding q345e@lab q3451@r))) (let ((q3462@type (q2ed6@binding-type q3460@b))) (begin (if (not q345e@lab) (q2eda@raise-unbound-error q345c@id) (void)) (if (not (and (eq? q3462@type '$rtd) (list? (q2ed8@binding-value q3460@b)))) (q31a1@syntax-violation '#f '"invalid type" q3450@e) (void)) (q30e3@chi-expr (cadr (q2ed8@binding-value q3460@b)) q3451@r q3452@mr)))))) q3458@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3456@t)))))) (set! q4b68@q3063@record-constructor-descriptor-transformer q3063@record-constructor-descriptor-transformer) (set! q3065@when-macro (lambda (q3464@e) (let ((q3466@t q3464@e)) (let ((q3468@ls/false (q30c1@syntax-dispatch q3466@t '(_ any any . each-any)))) (if q3468@ls/false (apply (lambda (q346a@test q346b@e q346c@e*) (q3077@bless (list 'if q346a@test (cons 'begin (cons q346b@e q346c@e*))))) q3468@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3466@t)))))) (set! q4b69@q3065@when-macro q3065@when-macro) (set! q3067@unless-macro (lambda (q3470@e) (let ((q3472@t q3470@e)) (let ((q3474@ls/false (q30c1@syntax-dispatch q3472@t '(_ any any . each-any)))) (if q3474@ls/false (apply (lambda (q3476@test q3477@e q3478@e*) (q3077@bless (list 'if (list 'not q3476@test) (cons 'begin (cons q3477@e q3478@e*))))) q3474@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3472@t)))))) (set! q4b6a@q3067@unless-macro q3067@unless-macro) (set! q3069@if-transformer (lambda (q347c@e q347d@r q347e@mr) (let ((q3482@t q347c@e)) (let ((q3484@ls/false (q30c1@syntax-dispatch q3482@t '(_ any any any)))) (if q3484@ls/false (apply (lambda (q3486@e0 q3487@e1 q3488@e2) (list 'if (q30e3@chi-expr q3486@e0 q347d@r q347e@mr) (q30e3@chi-expr q3487@e1 q347d@r q347e@mr) (q30e3@chi-expr q3488@e2 q347d@r q347e@mr))) q3484@ls/false) (let ((q348c@t q3482@t)) (let ((q348e@ls/false (q30c1@syntax-dispatch q348c@t '(_ any any)))) (if q348e@ls/false (apply (lambda (q3490@e0 q3491@e1) (list 'if (q30e3@chi-expr q3490@e0 q347d@r q347e@mr) (q30e3@chi-expr q3491@e1 q347d@r q347e@mr) (q2e20@q2d81@build-void))) q348e@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q348c@t))))))))) (set! q4b6b@q3069@if-transformer q3069@if-transformer) (set! q306b@and-transformer (lambda (q3494@e q3495@r q3496@mr) (let ((q349a@t q3494@e)) (let ((q349c@ls/false (q30c1@syntax-dispatch q349a@t '(_ . each-any)))) (if q349c@ls/false (apply (lambda (q349e@e*) (cons 'and (q30df@chi-expr* q349e@e* q3495@r q3496@mr))) q349c@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q349a@t)))))) (set! q4b6c@q306b@and-transformer q306b@and-transformer) (set! q306d@or-transformer (lambda (q34a0@e q34a1@r q34a2@mr) (let ((q34a6@t q34a0@e)) (let ((q34a8@ls/false (q30c1@syntax-dispatch q34a6@t '(_ . each-any)))) (if q34a8@ls/false (apply (lambda (q34aa@e*) (cons 'or (q30df@chi-expr* q34aa@e* q34a1@r q34a2@mr))) q34a8@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q34a6@t)))))) (set! q4b6d@q306d@or-transformer q306d@or-transformer) (set! q306f@case-macro (lambda (q34ac@e) (letrec* ((q34af@build-last (lambda (q34d6@cls) (let ((q34d8@t q34d6@cls)) (let ((q34da@ls/false (q30c1@syntax-dispatch q34d8@t '(#(scheme-id else) any . each-any)))) (if q34da@ls/false (apply (lambda (q34dc@e q34dd@e*) (cons 'begin (cons q34dc@e q34dd@e*))) q34da@ls/false) (let ((q34e0@t q34d8@t)) (let ((q34e2@ls/false (q30c1@syntax-dispatch q34e0@t '_))) (if q34e2@ls/false (apply (lambda () (q34b1@build-one q34d6@cls '(if #f #f))) q34e2@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q34e0@t))))))))) (q34b1@build-one (lambda (q34c8@cls q34c9@k) (let ((q34cc@t q34c8@cls)) (let ((q34ce@ls/false (q30c1@syntax-dispatch q34cc@t '(each-any any . each-any)))) (if q34ce@ls/false (apply (lambda (q34d0@d* q34d1@e q34d2@e*) (list 'if (list 'memv 't (list 'quote q34d0@d*)) (cons 'begin (cons q34d1@e q34d2@e*)) q34c9@k)) q34ce@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q34cc@t))))))) (let ((q34b2@t q34ac@e)) (let ((q34b4@ls/false (q30c1@syntax-dispatch q34b2@t '(_ any)))) (if q34b4@ls/false (apply (lambda (q34b6@expr) (q3077@bless (cons 'let (cons (list (list 't q34b6@expr)) '((if #f #f)))))) q34b4@ls/false) (let ((q34b8@t q34b2@t)) (let ((q34ba@ls/false (q30c1@syntax-dispatch q34b8@t '(_ any any . each-any)))) (if q34ba@ls/false (apply (lambda (q34bc@expr q34bd@cls q34be@cls*) (q3077@bless (list 'let (list (list 't q34bc@expr)) (let q34c6@f ((q34c2@cls q34bd@cls) (q34c3@cls* q34be@cls*)) (if (null? q34c3@cls*) (q34af@build-last q34c2@cls) (q34b1@build-one q34c2@cls (q34c6@f (car q34c3@cls*) (cdr q34c3@cls*)))))))) q34ba@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q34b8@t)))))))))) (set! q4b6e@q306f@case-macro q306f@case-macro) (set! q3071@quote-transformer (lambda (q34e4@e q34e5@r q34e6@mr) (let ((q34ea@t q34e4@e)) (let ((q34ec@ls/false (q30c1@syntax-dispatch q34ea@t '(_ any)))) (if q34ec@ls/false (apply (lambda (q34ee@datum) (list 'quote (q2ece@stx->datum q34ee@datum))) q34ec@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q34ea@t)))))) (set! q4b6f@q3071@quote-transformer q3071@quote-transformer) (set! q3073@case-lambda-transformer (lambda (q34f0@e q34f1@r q34f2@mr) (let ((q34f6@t q34f0@e)) (let ((q34f8@ls/false (q30c1@syntax-dispatch q34f6@t '(_ . #(each (any any . each-any)))))) (if q34f8@ls/false (apply (lambda (q34fa@fmls* q34fb@b* q34fc@b**) (call-with-values (lambda () (q30eb@chi-lambda-clause* q34f0@e q34fa@fmls* (map cons q34fb@b* q34fc@b**) q34f1@r q34f2@mr)) (lambda (q3504@q3501 q3505@q3503) (let ((q3508@body* q3505@q3503) (q3509@fmls* q3504@q3501)) (q2e1e@q2d51@build-case-lambda '#f q3509@fmls* q3508@body*))))) q34f8@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q34f6@t)))))) (set! q4b70@q3073@case-lambda-transformer q3073@case-lambda-transformer) (set! q3075@lambda-transformer (lambda (q350c@e q350d@r q350e@mr) (let ((q3512@t q350c@e)) (let ((q3514@ls/false (q30c1@syntax-dispatch q3512@t '(_ any any . each-any)))) (if q3514@ls/false (apply (lambda (q3516@fmls q3517@b q3518@b*) (call-with-values (lambda () (q30e9@chi-lambda-clause q350c@e q3516@fmls (cons q3517@b q3518@b*) q350d@r q350e@mr)) (lambda (q3520@q351d q3521@q351f) (let ((q3524@body q3521@q351f) (q3525@fmls q3520@q351d)) (q2e1d@q2d4f@build-lambda '#f q3525@fmls q3524@body))))) q3514@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3512@t)))))) (set! q4b71@q3075@lambda-transformer q3075@lambda-transformer) (set! q3077@bless (lambda (q3528@x) (q2ea2@mkstx (let q352c@f ((q352a@x q3528@x)) (if (q2e86@stx? q352a@x) q352a@x (if (pair? q352a@x) (cons (q352c@f (car q352a@x)) (q352c@f (cdr q352a@x))) (if (symbol? q352a@x) (q3049@scheme-stx q352a@x) (if (vector? q352a@x) (vector-map q352c@f q352a@x) q352a@x))))) '() '() '()))) (set! q4b72@q3077@bless q3077@bless) (set! q3079@with-syntax-macro (lambda (q352e@e) (let ((q3530@t q352e@e)) (let ((q3532@ls/false (q30c1@syntax-dispatch q3530@t '(_ #(each (any any)) any . each-any)))) (if q3532@ls/false (apply (lambda (q3534@pat* q3535@expr* q3536@b q3537@b*) (let ((q353c@idn* (let q3540@f ((q353e@pat* q3534@pat*)) (if (null? q353e@pat*) '() (call-with-values (lambda () (q30bf@convert-pattern (car q353e@pat*) '())) (lambda (q3546@q3543 q3547@q3545) (let ((q354a@idn* q3547@q3545) (q354b@pat q3546@q3543)) (append q354a@idn* (q3540@f (cdr q353e@pat*)))))))))) (begin (q30e7@verify-formals (map car q353c@idn*) q352e@e) (let ((q354e@t* (q318f@generate-temporaries q3535@expr*))) (q3077@bless (list 'let (map list q354e@t* q3535@expr*) (let q3554@f ((q3550@pat* q3534@pat*) (q3551@t* q354e@t*)) (if (null? q3550@pat*) (cons 'begin (cons '#f (cons q3536@b q3537@b*))) (list 'syntax-case (car q3551@t*) '() (list (car q3550@pat*) (q3554@f (cdr q3550@pat*) (cdr q3551@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car q3550@pat*)) (car q3551@t*)))))))))))) q3532@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3530@t)))))) (set! q4b73@q3079@with-syntax-macro q3079@with-syntax-macro) (set! q307b@invalid-fmls-error (lambda (q3556@stx q3557@fmls) (let ((q355a@t q3557@fmls)) (let ((q355c@ls/false (q30c1@syntax-dispatch q355a@t '#(each+ any () any)))) (if q355c@ls/false (apply (lambda (q355e@id* q355f@last) (let q3564@f ((q3562@id* (if (q2eba@id? q355f@last) (cons q355f@last q355e@id*) (if (q2eb0@syntax-null? q355f@last) q355e@id* (q31a1@syntax-violation '#f '"not an identifier" q3556@stx q355f@last))))) (if (null? q3562@id*) (values) (if (not (q2eba@id? (car q3562@id*))) (q31a1@syntax-violation '#f '"not an identifier" q3556@stx (car q3562@id*)) (begin (q3564@f (cdr q3562@id*)) (if (q2ec6@bound-id-member? (car q3562@id*) (cdr q3562@id*)) (q31a1@syntax-violation '#f '"duplicate binding" q3556@stx (car q3562@id*)) (void))))))) q355c@ls/false) (let ((q3566@t q355a@t)) (let ((q3568@ls/false (q30c1@syntax-dispatch q3566@t '_))) (if q3568@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"malformed binding form" q3556@stx q3557@fmls)) q3568@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3566@t))))))))) (set! q4b74@q307b@invalid-fmls-error q307b@invalid-fmls-error) (set! q307d@let-macro (lambda (q356a@stx) (let ((q356c@t q356a@stx)) (let ((q356e@ls/false (q30c1@syntax-dispatch q356c@t '(_ #(each (any any)) any . each-any)))) (if q356e@ls/false (apply (lambda (q3570@lhs* q3571@rhs* q3572@b q3573@b*) (if (q2ec2@valid-bound-ids? q3570@lhs*) (q3077@bless (cons (cons 'lambda (cons q3570@lhs* (cons q3572@b q3573@b*))) q3571@rhs*)) (q307b@invalid-fmls-error q356a@stx q3570@lhs*))) q356e@ls/false) (let ((q3578@t q356c@t)) (let ((q357a@ls/false (q30c1@syntax-dispatch q3578@t '(_ any #(each (any any)) any . each-any)))) (if (and q357a@ls/false (apply (lambda (q357c@f q357d@lhs* q357e@rhs* q357f@b q3580@b*) (q2eba@id? q357c@f)) q357a@ls/false)) (apply (lambda (q3586@f q3587@lhs* q3588@rhs* q3589@b q358a@b*) (if (q2ec2@valid-bound-ids? q3587@lhs*) (q3077@bless (cons (list 'letrec (list (list q3586@f (cons 'lambda (cons q3587@lhs* (cons q3589@b q358a@b*))))) q3586@f) q3588@rhs*)) (q307b@invalid-fmls-error q356a@stx q3587@lhs*))) q357a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3578@t))))))))) (set! q4b75@q307d@let-macro q307d@let-macro) (set! q307f@let-values-macro (lambda (q3590@stx) (letrec* ((q3593@rename (lambda (q35f8@x q35f9@old* q35fa@new*) (begin (if (not (q2eba@id? q35f8@x)) (q31a1@syntax-violation '#f '"not an indentifier" q3590@stx q35f8@x) (void)) (if (q2ec6@bound-id-member? q35f8@x q35f9@old*) (q31a1@syntax-violation '#f '"duplicate binding" q3590@stx q35f8@x) (void)) (let ((q35fe@y (gensym (q31a7@syntax->datum q35f8@x)))) (values q35fe@y (cons q35f8@x q35f9@old*) (cons q35fe@y q35fa@new*)))))) (q3595@rename* (lambda (q35e6@x* q35e7@old* q35e8@new*) (if (null? q35e6@x*) (values '() q35e7@old* q35e8@new*) (call-with-values (lambda () (q3593@rename (car q35e6@x*) q35e7@old* q35e8@new*)) (lambda (q35ec@x q35ed@old* q35ee@new*) (call-with-values (lambda () (q3595@rename* (cdr q35e6@x*) q35ed@old* q35ee@new*)) (lambda (q35f2@x* q35f3@old* q35f4@new*) (values (cons q35ec@x q35f2@x*) q35f3@old* q35f4@new*))))))))) (let ((q3596@t q3590@stx)) (let ((q3598@ls/false (q30c1@syntax-dispatch q3596@t '(_ () any . each-any)))) (if q3598@ls/false (apply (lambda (q359a@b q359b@b*) (cons* (q3077@bless 'let) '() q359a@b q359b@b*)) q3598@ls/false) (let ((q359e@t q3596@t)) (let ((q35a0@ls/false (q30c1@syntax-dispatch q359e@t '(_ #(each (any any)) any . each-any)))) (if q35a0@ls/false (apply (lambda (q35a2@lhs* q35a3@rhs* q35a4@b q35a5@b*) (q3077@bless (let q35b2@f ((q35aa@lhs* q35a2@lhs*) (q35ab@rhs* q35a3@rhs*) (q35ac@old* '()) (q35ad@new* '())) (if (null? q35aa@lhs*) (cons 'let (cons (map list q35ac@old* q35ad@new*) (cons q35a4@b q35a5@b*))) (let ((q35b4@t (car q35aa@lhs*))) (let ((q35b6@ls/false (q30c1@syntax-dispatch q35b4@t 'each-any))) (if q35b6@ls/false (apply (lambda (q35b8@x*) (call-with-values (lambda () (q3595@rename* q35b8@x* q35ac@old* q35ad@new*)) (lambda (q35c0@q35bb q35c1@q35bd q35c2@q35bf) (let ((q35c6@new* q35c2@q35bf) (q35c7@old* q35c1@q35bd) (q35c8@y* q35c0@q35bb)) (list 'call-with-values (list 'lambda '() (car q35ab@rhs*)) (list 'lambda q35c8@y* (q35b2@f (cdr q35aa@lhs*) (cdr q35ab@rhs*) q35c7@old* q35c6@new*))))))) q35b6@ls/false) (let ((q35cc@t q35b4@t)) (let ((q35ce@ls/false (q30c1@syntax-dispatch q35cc@t '#(each+ any () any)))) (if q35ce@ls/false (apply (lambda (q35d0@x* q35d1@x) (call-with-values (lambda () (q3593@rename q35d1@x q35ac@old* q35ad@new*)) (lambda (q35d4@y q35d5@old* q35d6@new*) (call-with-values (lambda () (q3595@rename* q35d0@x* q35d5@old* q35d6@new*)) (lambda (q35da@y* q35db@old* q35dc@new*) (list 'call-with-values (list 'lambda '() (car q35ab@rhs*)) (list 'lambda (append q35da@y* q35d4@y) (q35b2@f (cdr q35aa@lhs*) (cdr q35ab@rhs*) q35db@old* q35dc@new*)))))))) q35ce@ls/false) (let ((q35e0@t q35cc@t)) (let ((q35e2@ls/false (q30c1@syntax-dispatch q35e0@t 'any))) (if q35e2@ls/false (apply (lambda (q35e4@others) (q31a1@syntax-violation '#f '"malformed bindings" q3590@stx q35e4@others)) q35e2@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q35e0@t)))))))))))))) q35a0@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q359e@t)))))))))) (set! q4b76@q307f@let-values-macro q307f@let-values-macro) (set! q3081@let*-values-macro (lambda (q3600@stx) (letrec* ((q3603@check (lambda (q3632@x*) (if (not (null? q3632@x*)) (let ((q3634@x (car q3632@x*))) (begin (if (not (q2eba@id? q3634@x)) (q31a1@syntax-violation '#f '"not an identifier" q3600@stx q3634@x) (void)) (q3603@check (cdr q3632@x*)) (if (q2ec6@bound-id-member? q3634@x (cdr q3632@x*)) (q31a1@syntax-violation '#f '"duplicate identifier" q3600@stx q3634@x) (void)))) (void))))) (let ((q3604@t q3600@stx)) (let ((q3606@ls/false (q30c1@syntax-dispatch q3604@t '(_ () any . each-any)))) (if q3606@ls/false (apply (lambda (q3608@b q3609@b*) (cons* (q3077@bless 'let) '() q3608@b q3609@b*)) q3606@ls/false) (let ((q360c@t q3604@t)) (let ((q360e@ls/false (q30c1@syntax-dispatch q360c@t '(_ #(each (any any)) any . each-any)))) (if q360e@ls/false (apply (lambda (q3610@lhs* q3611@rhs* q3612@b q3613@b*) (q3077@bless (let q361c@f ((q3618@lhs* q3610@lhs*) (q3619@rhs* q3611@rhs*)) (if (null? q3618@lhs*) (cons 'begin (cons q3612@b q3613@b*)) (let ((q361e@t (car q3618@lhs*))) (let ((q3620@ls/false (q30c1@syntax-dispatch q361e@t 'each-any))) (if q3620@ls/false (apply (lambda (q3622@x*) (begin (q3603@check q3622@x*) (list 'call-with-values (list 'lambda '() (car q3619@rhs*)) (list 'lambda q3622@x* (q361c@f (cdr q3618@lhs*) (cdr q3619@rhs*)))))) q3620@ls/false) (let ((q3624@t q361e@t)) (let ((q3626@ls/false (q30c1@syntax-dispatch q3624@t '#(each+ any () any)))) (if q3626@ls/false (apply (lambda (q3628@x* q3629@x) (begin (q3603@check (cons q3629@x q3628@x*)) (list 'call-with-values (list 'lambda '() (car q3619@rhs*)) (list 'lambda (append q3628@x* q3629@x) (q361c@f (cdr q3618@lhs*) (cdr q3619@rhs*)))))) q3626@ls/false) (let ((q362c@t q3624@t)) (let ((q362e@ls/false (q30c1@syntax-dispatch q362c@t 'any))) (if q362e@ls/false (apply (lambda (q3630@others) (q31a1@syntax-violation '#f '"malformed bindings" q3600@stx q3630@others)) q362e@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q362c@t)))))))))))))) q360e@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q360c@t)))))))))) (set! q4b77@q3081@let*-values-macro q3081@let*-values-macro) (set! q3083@trace-lambda-macro (lambda (q3636@stx) (let ((q3638@t q3636@stx)) (let ((q363a@ls/false (q30c1@syntax-dispatch q3638@t '(_ any each-any any . each-any)))) (if q363a@ls/false (apply (lambda (q363c@who q363d@fmls q363e@b q363f@b*) (if (q2ec2@valid-bound-ids? q363d@fmls) (q3077@bless (list 'make-traced-procedure (list 'quote q363c@who) (cons 'lambda (cons q363d@fmls (cons q363e@b q363f@b*))))) (q307b@invalid-fmls-error q3636@stx q363d@fmls))) q363a@ls/false) (let ((q3644@t q3638@t)) (let ((q3646@ls/false (q30c1@syntax-dispatch q3644@t '(_ any #(each+ any () any) any . each-any)))) (if q3646@ls/false (apply (lambda (q3648@who q3649@fmls q364a@last q364b@b q364c@b*) (if (q2ec2@valid-bound-ids? (cons q364a@last q3649@fmls)) (q3077@bless (list 'make-traced-procedure (list 'quote q3648@who) (cons 'lambda (cons (append q3649@fmls q364a@last) (cons q364b@b q364c@b*))))) (q307b@invalid-fmls-error q3636@stx (append q3649@fmls q364a@last)))) q3646@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3644@t))))))))) (set! q4b78@q3083@trace-lambda-macro q3083@trace-lambda-macro) (set! q3085@trace-define-macro (lambda (q3652@stx) (let ((q3654@t q3652@stx)) (let ((q3656@ls/false (q30c1@syntax-dispatch q3654@t '(_ (any . each-any) any . each-any)))) (if q3656@ls/false (apply (lambda (q3658@who q3659@fmls q365a@b q365b@b*) (if (q2ec2@valid-bound-ids? q3659@fmls) (q3077@bless (list 'define q3658@who (list 'make-traced-procedure (list 'quote q3658@who) (cons 'lambda (cons q3659@fmls (cons q365a@b q365b@b*)))))) (q307b@invalid-fmls-error q3652@stx q3659@fmls))) q3656@ls/false) (let ((q3660@t q3654@t)) (let ((q3662@ls/false (q30c1@syntax-dispatch q3660@t '(_ (any . #(each+ any () any)) any . each-any)))) (if q3662@ls/false (apply (lambda (q3664@who q3665@fmls q3666@last q3667@b q3668@b*) (if (q2ec2@valid-bound-ids? (cons q3666@last q3665@fmls)) (q3077@bless (list 'define q3664@who (list 'make-traced-procedure (list 'quote q3664@who) (cons 'lambda (cons (append q3665@fmls q3666@last) (cons q3667@b q3668@b*)))))) (q307b@invalid-fmls-error q3652@stx (append q3665@fmls q3666@last)))) q3662@ls/false) (let ((q366e@t q3660@t)) (let ((q3670@ls/false (q30c1@syntax-dispatch q366e@t '(_ any any)))) (if q3670@ls/false (apply (lambda (q3672@who q3673@expr) (if (q2eba@id? q3672@who) (q3077@bless (list 'define q3672@who (list 'let (list (list 'v q3673@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote q3672@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (q31a1@syntax-violation '#f '"invalid name" q3652@stx))) q3670@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q366e@t)))))))))))) (set! q4b79@q3085@trace-define-macro q3085@trace-define-macro) (set! q3087@trace-define-syntax-macro (lambda (q3676@stx) (let ((q3678@t q3676@stx)) (let ((q367a@ls/false (q30c1@syntax-dispatch q3678@t '(_ any any)))) (if q367a@ls/false (apply (lambda (q367c@who q367d@expr) (if (q2eba@id? q367c@who) (q3077@bless (list 'define-syntax q367c@who (list 'make-traced-macro (list 'quote q367c@who) q367d@expr))) (q31a1@syntax-violation '#f '"invalid name" q3676@stx))) q367a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3678@t)))))) (set! q4b7a@q3087@trace-define-syntax-macro q3087@trace-define-syntax-macro) (set! q3089@trace-let/rec-syntax (lambda (q3680@who) (lambda (q3682@stx) (let ((q3684@t q3682@stx)) (let ((q3686@ls/false (q30c1@syntax-dispatch q3684@t '(_ #(each (any any)) any . each-any)))) (if q3686@ls/false (apply (lambda (q3688@lhs* q3689@rhs* q368a@b q368b@b*) (if (q2ec2@valid-bound-ids? q3688@lhs*) (let ((q3690@rhs* (map (lambda (q3692@lhs q3693@rhs) (list 'make-traced-macro (list 'quote q3692@lhs) q3693@rhs)) q3688@lhs* q3689@rhs*))) (q3077@bless (cons q3680@who (cons (map list q3688@lhs* q3690@rhs*) (cons q368a@b q368b@b*))))) (q307b@invalid-fmls-error q3682@stx q3688@lhs*))) q3686@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3684@t))))))) (set! q4b7b@q3089@trace-let/rec-syntax q3089@trace-let/rec-syntax) (set! q308b@trace-let-syntax-macro (q3089@trace-let/rec-syntax 'let-syntax)) (set! q4b7c@q308b@trace-let-syntax-macro q308b@trace-let-syntax-macro) (set! q308d@trace-letrec-syntax-macro (q3089@trace-let/rec-syntax 'letrec-syntax)) (set! q4b7d@q308d@trace-letrec-syntax-macro q308d@trace-letrec-syntax-macro) (set! q308f@guard-macro (lambda (q3696@x) (letrec* ((q3699@gen-clauses (lambda (q36b0@con q36b1@outerk q36b2@clause*) (letrec* ((q36b7@f (lambda (q36f0@x q36f1@k) (let ((q36f4@t q36f0@x)) (let ((q36f6@ls/false (q30c1@syntax-dispatch q36f4@t '(any #(scheme-id =>) any)))) (if q36f6@ls/false (apply (lambda (q36f8@e q36f9@p) (let ((q36fc@t (gensym))) (list 'let (list (list q36fc@t q36f8@e)) (list 'if q36fc@t (list q36f9@p q36fc@t) q36f1@k)))) q36f6@ls/false) (let ((q36fe@t q36f4@t)) (let ((q3700@ls/false (q30c1@syntax-dispatch q36fe@t '(any)))) (if q3700@ls/false (apply (lambda (q3702@e) (let ((q3704@t (gensym))) (list 'let (list (list q3704@t q3702@e)) (list 'if q3704@t q3704@t q36f1@k)))) q3700@ls/false) (let ((q3706@t q36fe@t)) (let ((q3708@ls/false (q30c1@syntax-dispatch q3706@t '(any any . each-any)))) (if q3708@ls/false (apply (lambda (q370a@e q370b@v q370c@v*) (list 'if q370a@e (cons 'begin (cons q370b@v q370c@v*)) q36f1@k)) q3708@ls/false) (let ((q3710@t q3706@t)) (let ((q3712@ls/false (q30c1@syntax-dispatch q3710@t '_))) (if q3712@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid guard clause" q36f0@x)) q3712@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3710@t))))))))))))))) (q36b9@f* (lambda (q36c6@x*) (let ((q36c8@t q36c6@x*)) (let ((q36ca@ls/false (q30c1@syntax-dispatch q36c8@t '()))) (if q36ca@ls/false (apply (lambda () (let ((q36cc@g (gensym))) (values (list q36cc@g (list 'lambda '() (list 'raise-continuable q36b0@con))) q36cc@g))) q36ca@ls/false) (let ((q36ce@t q36c8@t)) (let ((q36d0@ls/false (q30c1@syntax-dispatch q36ce@t '((#(scheme-id else) any . each-any))))) (if q36d0@ls/false (apply (lambda (q36d2@e q36d3@e*) (values (cons 'begin (cons q36d2@e q36d3@e*)) '#f)) q36d0@ls/false) (let ((q36d6@t q36ce@t)) (let ((q36d8@ls/false (q30c1@syntax-dispatch q36d6@t '(any . any)))) (if q36d8@ls/false (apply (lambda (q36da@cls q36db@cls*) (call-with-values (lambda () (q36b9@f* q36db@cls*)) (lambda (q36e2@q36df q36e3@q36e1) (let ((q36e6@g q36e3@q36e1) (q36e7@e q36e2@q36df)) (values (q36b7@f q36da@cls q36e7@e) q36e6@g))))) q36d8@ls/false) (let ((q36ea@t q36d6@t)) (let ((q36ec@ls/false (q30c1@syntax-dispatch q36ea@t 'any))) (if q36ec@ls/false (apply (lambda (q36ee@others) (q31a1@syntax-violation '#f '"invalid guard clause" q36ee@others)) q36ec@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q36ea@t)))))))))))))))) (call-with-values (lambda () (q36b9@f* q36b2@clause*)) (lambda (q36be@q36bb q36bf@q36bd) (let ((q36c2@raisek q36bf@q36bd) (q36c3@code q36be@q36bb)) (if q36c2@raisek (list (list 'call/cc (list 'lambda (list q36c2@raisek) (list q36b1@outerk (list 'lambda '() q36c3@code))))) (list q36b1@outerk (list 'lambda '() q36c3@code)))))))))) (let ((q369a@t q3696@x)) (let ((q369c@ls/false (q30c1@syntax-dispatch q369a@t '(_ (any . each-any) any . each-any)))) (if (and q369c@ls/false (apply (lambda (q369e@con q369f@clause* q36a0@b q36a1@b*) (q2eba@id? q369e@con)) q369c@ls/false)) (apply (lambda (q36a6@con q36a7@clause* q36a8@b q36a9@b*) (let ((q36ae@outerk (gensym))) (q3077@bless (list (list 'call/cc (list 'lambda (list q36ae@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list q36a6@con) (q3699@gen-clauses q36a6@con q36ae@outerk q36a7@clause*)) (cons 'lambda (cons '() (cons q36a8@b q36a9@b*))))))))))) q369c@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q369a@t))))))) (set! q4b7e@q308f@guard-macro q308f@guard-macro) (set! q3091@define-enumeration-macro (lambda (q3714@stx) (letrec* ((q3717@set? (lambda (q3730@x) (or (null? q3730@x) (and (not (memq (car q3730@x) (cdr q3730@x))) (q3717@set? (cdr q3730@x)))))) (q3719@remove-dups (lambda (q372e@ls) (if (null? q372e@ls) '() (cons (car q372e@ls) (q3719@remove-dups (remq (car q372e@ls) (cdr q372e@ls)))))))) (let ((q371a@t q3714@stx)) (let ((q371c@ls/false (q30c1@syntax-dispatch q371a@t '(_ any each-any any)))) (if (and q371c@ls/false (apply (lambda (q371e@name q371f@id* q3720@maker) (and (q2eba@id? q371e@name) (q2eba@id? q3720@maker) (for-all q2eba@id? q371f@id*))) q371c@ls/false)) (apply (lambda (q3724@name q3725@id* q3726@maker) (let ((q372a@name* (q3719@remove-dups (q31a7@syntax->datum q3725@id*))) (q372b@mk (gensym))) (q3077@bless (list 'begin (list 'define q372b@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote q372a@name*)))) (list 'define-syntax q3724@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote q372a@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote q3724@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax q3726@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote q3726@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote q372a@name*)) (cons 'syntax-violation (cons (list 'quote q3726@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons q372b@mk '('(n* ...))))))))))))) q371c@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q371a@t))))))) (set! q4b7f@q3091@define-enumeration-macro q3091@define-enumeration-macro) (set! q3093@time-macro (lambda (q3732@stx) (let ((q3734@t q3732@stx)) (let ((q3736@ls/false (q30c1@syntax-dispatch q3734@t '(_ any)))) (if q3736@ls/false (apply (lambda (q3738@expr) (q3077@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() q3738@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) q3736@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3734@t)))))) (set! q4b80@q3093@time-macro q3093@time-macro) (set! q3095@delay-macro (lambda (q373a@stx) (let ((q373c@t q373a@stx)) (let ((q373e@ls/false (q30c1@syntax-dispatch q373c@t '(_ any)))) (if q373e@ls/false (apply (lambda (q3740@expr) (q3077@bless (list 'make-promise (list 'lambda '() q3740@expr)))) q373e@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q373c@t)))))) (set! q4b81@q3095@delay-macro q3095@delay-macro) (set! q3097@assert-macro (lambda (q3742@stx) (let ((q3744@t q3742@stx)) (let ((q3746@ls/false (q30c1@syntax-dispatch q3744@t '(_ any)))) (if q3746@ls/false (apply (lambda (q3748@expr) (let ((q374a@pos (or (q3199@expression-position q3742@stx) (q3199@expression-position q3748@expr)))) (q3077@bless (list 'let (list (list 'x q3748@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote q3748@expr) (list 'quote q374a@pos))))))) q3746@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3744@t)))))) (set! q4b82@q3097@assert-macro q3097@assert-macro) (set! q3099@endianness-macro (lambda (q374c@stx) (let ((q374e@t q374c@stx)) (let ((q3750@ls/false (q30c1@syntax-dispatch q374e@t '(_ any)))) (if q3750@ls/false (apply (lambda (q3752@e) (let ((q3754@t (q31a7@syntax->datum q3752@e))) (if (memv q3754@t '(little)) (q3077@bless ''little) (if (memv q3754@t '(big)) (q3077@bless ''big) (q31a1@syntax-violation '#f '"endianness must be big or little" q374c@stx))))) q3750@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q374e@t)))))) (set! q4b83@q3099@endianness-macro q3099@endianness-macro) (set! q309b@identifier-syntax-macro (lambda (q3756@stx) (let ((q3758@t q3756@stx)) (let ((q375a@ls/false (q30c1@syntax-dispatch q3758@t '(_ any)))) (if q375a@ls/false (apply (lambda (q375c@expr) (q3077@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax q375c@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax q375c@expr) '((syntax (e* ...)))))))))) q375a@ls/false) (let ((q375e@t q3758@t)) (let ((q3760@ls/false (q30c1@syntax-dispatch q375e@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and q3760@ls/false (apply (lambda (q3762@id1 q3763@expr1 q3764@id2 q3765@expr2 q3766@expr3) (and (q2eba@id? q3762@id1) (q2eba@id? q3764@id2) (q2eba@id? q3765@expr2))) q3760@ls/false)) (apply (lambda (q376c@id1 q376d@expr1 q376e@id2 q376f@expr2 q3770@expr3) (q3077@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax q376d@expr1)) (list (list 'set! 'id q376f@expr2) (list 'syntax q3770@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons q376d@expr1 '(e* ...))))))))) q3760@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q375e@t))))))))) (set! q4b84@q309b@identifier-syntax-macro q309b@identifier-syntax-macro) (set! q309d@do-macro (lambda (q3776@stx) (letrec* ((q3779@bind (lambda (q3790@x) (let ((q3792@t q3790@x)) (let ((q3794@ls/false (q30c1@syntax-dispatch q3792@t '(any any)))) (if q3794@ls/false (apply (lambda (q3796@x q3797@init) (list q3796@x q3797@init q3796@x)) q3794@ls/false) (let ((q379a@t q3792@t)) (let ((q379c@ls/false (q30c1@syntax-dispatch q379a@t '(any any any)))) (if q379c@ls/false (apply (lambda (q379e@x q379f@init q37a0@step) (list q379e@x q379f@init q37a0@step)) q379c@ls/false) (let ((q37a4@t q379a@t)) (let ((q37a6@ls/false (q30c1@syntax-dispatch q37a4@t '_))) (if q37a6@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid binding" q3776@stx)) q37a6@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q37a4@t))))))))))))) (let ((q377a@t q3776@stx)) (let ((q377c@ls/false (q30c1@syntax-dispatch q377a@t '(_ each-any (any . each-any) . each-any)))) (if q377c@ls/false (apply (lambda (q377e@binding* q377f@test q3780@expr* q3781@command*) (let ((q3786@t (map q3779@bind q377e@binding*))) (let ((q3788@ls/false (q30c1@syntax-dispatch q3786@t '#(each (any any any))))) (if q3788@ls/false (apply (lambda (q378a@x* q378b@init* q378c@step*) (if (q2ec2@valid-bound-ids? q378a@x*) (q3077@bless (list 'letrec (list (list 'loop (list 'lambda q378a@x* (list 'if q377f@test (cons 'begin (cons '(if #f #f) q3780@expr*)) (cons 'begin (append q3781@command* (list (cons 'loop q378c@step*)))))))) (cons 'loop q378b@init*))) (q31a1@syntax-violation '#f '"invalid bindings" q3776@stx))) q3788@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3786@t))))) q377c@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q377a@t))))))) (set! q4b85@q309d@do-macro q309d@do-macro) (set! q309f@let*-macro (lambda (q37a8@stx) (let ((q37aa@t q37a8@stx)) (let ((q37ac@ls/false (q30c1@syntax-dispatch q37aa@t '(_ #(each (any any)) any . each-any)))) (if (and q37ac@ls/false (apply (lambda (q37ae@lhs* q37af@rhs* q37b0@b q37b1@b*) (for-all q2eba@id? q37ae@lhs*)) q37ac@ls/false)) (apply (lambda (q37b6@lhs* q37b7@rhs* q37b8@b q37b9@b*) (q3077@bless (let q37c0@f ((q37be@x* (map list q37b6@lhs* q37b7@rhs*))) (if (null? q37be@x*) (cons 'let (cons '() (cons q37b8@b q37b9@b*))) (list 'let (list (car q37be@x*)) (q37c0@f (cdr q37be@x*))))))) q37ac@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q37aa@t)))))) (set! q4b86@q309f@let*-macro q309f@let*-macro) (set! q30a1@or-macro (lambda (q37c2@stx) (let ((q37c4@t q37c2@stx)) (let ((q37c6@ls/false (q30c1@syntax-dispatch q37c4@t '(_)))) (if q37c6@ls/false (apply (lambda () '#f) q37c6@ls/false) (let ((q37c8@t q37c4@t)) (let ((q37ca@ls/false (q30c1@syntax-dispatch q37c8@t '(_ any . each-any)))) (if q37ca@ls/false (apply (lambda (q37cc@e q37cd@e*) (q3077@bless (let q37d4@f ((q37d0@e q37cc@e) (q37d1@e* q37cd@e*)) (if (null? q37d1@e*) (list 'begin '#f q37d0@e) (list 'let (list (list 't q37d0@e)) (list 'if 't 't (q37d4@f (car q37d1@e*) (cdr q37d1@e*)))))))) q37ca@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q37c8@t))))))))) (set! q4b87@q30a1@or-macro q30a1@or-macro) (set! q30a3@and-macro (lambda (q37d6@stx) (let ((q37d8@t q37d6@stx)) (let ((q37da@ls/false (q30c1@syntax-dispatch q37d8@t '(_)))) (if q37da@ls/false (apply (lambda () '#t) q37da@ls/false) (let ((q37dc@t q37d8@t)) (let ((q37de@ls/false (q30c1@syntax-dispatch q37dc@t '(_ any . each-any)))) (if q37de@ls/false (apply (lambda (q37e0@e q37e1@e*) (q3077@bless (let q37e8@f ((q37e4@e q37e0@e) (q37e5@e* q37e1@e*)) (if (null? q37e5@e*) (list 'begin '#f q37e4@e) (cons 'if (cons q37e4@e (cons (q37e8@f (car q37e5@e*) (cdr q37e5@e*)) '(#f)))))))) q37de@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q37dc@t))))))))) (set! q4b88@q30a3@and-macro q30a3@and-macro) (set! q30a5@cond-macro (lambda (q37ea@stx) (let ((q37ec@t q37ea@stx)) (let ((q37ee@ls/false (q30c1@syntax-dispatch q37ec@t '(_ any . each-any)))) (if q37ee@ls/false (apply (lambda (q37f0@cls q37f1@cls*) (q3077@bless (let q37f8@f ((q37f4@cls q37f0@cls) (q37f5@cls* q37f1@cls*)) (if (null? q37f5@cls*) (let ((q37fa@t q37f4@cls)) (let ((q37fc@ls/false (q30c1@syntax-dispatch q37fa@t '(#(scheme-id else) any . each-any)))) (if q37fc@ls/false (apply (lambda (q37fe@e q37ff@e*) (cons 'begin (cons q37fe@e q37ff@e*))) q37fc@ls/false) (let ((q3802@t q37fa@t)) (let ((q3804@ls/false (q30c1@syntax-dispatch q3802@t '(any #(scheme-id =>) any)))) (if q3804@ls/false (apply (lambda (q3806@e q3807@p) (list 'let (list (list 't q3806@e)) (list 'if 't (cons q3807@p '(t))))) q3804@ls/false) (let ((q380a@t q3802@t)) (let ((q380c@ls/false (q30c1@syntax-dispatch q380a@t '(any)))) (if q380c@ls/false (apply (lambda (q380e@e) (cons 'or (cons q380e@e '((if #f #f))))) q380c@ls/false) (let ((q3810@t q380a@t)) (let ((q3812@ls/false (q30c1@syntax-dispatch q3810@t '(any . each-any)))) (if q3812@ls/false (apply (lambda (q3814@e q3815@e*) (list 'if q3814@e (cons 'begin q3815@e*))) q3812@ls/false) (let ((q3818@t q3810@t)) (let ((q381a@ls/false (q30c1@syntax-dispatch q3818@t '_))) (if q381a@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid last clause" q37ea@stx)) q381a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3818@t)))))))))))))))) (let ((q381c@t q37f4@cls)) (let ((q381e@ls/false (q30c1@syntax-dispatch q381c@t '(#(scheme-id else) any . each-any)))) (if q381e@ls/false (apply (lambda (q3820@e q3821@e*) (q31a1@syntax-violation '#f '"incorrect position of keyword else" q37ea@stx)) q381e@ls/false) (let ((q3824@t q381c@t)) (let ((q3826@ls/false (q30c1@syntax-dispatch q3824@t '(any #(scheme-id =>) any)))) (if q3826@ls/false (apply (lambda (q3828@e q3829@p) (list 'let (list (list 't q3828@e)) (list 'if 't (cons q3829@p '(t)) (q37f8@f (car q37f5@cls*) (cdr q37f5@cls*))))) q3826@ls/false) (let ((q382c@t q3824@t)) (let ((q382e@ls/false (q30c1@syntax-dispatch q382c@t '(any)))) (if q382e@ls/false (apply (lambda (q3830@e) (list 'or q3830@e (q37f8@f (car q37f5@cls*) (cdr q37f5@cls*)))) q382e@ls/false) (let ((q3832@t q382c@t)) (let ((q3834@ls/false (q30c1@syntax-dispatch q3832@t '(any . each-any)))) (if q3834@ls/false (apply (lambda (q3836@e q3837@e*) (list 'if q3836@e (cons 'begin q3837@e*) (q37f8@f (car q37f5@cls*) (cdr q37f5@cls*)))) q3834@ls/false) (let ((q383a@t q3832@t)) (let ((q383c@ls/false (q30c1@syntax-dispatch q383a@t '_))) (if q383c@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid last clause" q37ea@stx)) q383c@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q383a@t)))))))))))))))))))) q37ee@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q37ec@t)))))) (set! q4b89@q30a5@cond-macro q30a5@cond-macro) (set! q30a7@do-include (lambda (q383e@stx q383f@id q3840@filename) (let ((q3844@filename (q2ece@stx->datum q3840@filename))) (begin (if (not (and (string? q3844@filename) (q2eba@id? q383f@id))) (q31a1@syntax-violation '#f '"invalid syntax" q383e@stx) (void)) (cons (q3077@bless 'begin) (with-input-from-file q3844@filename (lambda () (let q3848@f ((q3846@ls '())) (let ((q384a@x (q29fc@q28cc@read-annotated))) (if (eof-object? q384a@x) (reverse q3846@ls) (q3848@f (cons (q2e9a@datum->stx q383f@id q384a@x) q3846@ls)))))))))))) (set! q4b8a@q30a7@do-include q30a7@do-include) (set! q30a9@include-macro (lambda (q384c@e) (let ((q384e@t q384c@e)) (let ((q3850@ls/false (q30c1@syntax-dispatch q384e@t '(any any)))) (if q3850@ls/false (apply (lambda (q3852@id q3853@filename) (q30a7@do-include q384c@e q3852@id q3853@filename)) q3850@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q384e@t)))))) (set! q4b8b@q30a9@include-macro q30a9@include-macro) (set! q30ab@include-into-macro (lambda (q3856@e) (let ((q3858@t q3856@e)) (let ((q385a@ls/false (q30c1@syntax-dispatch q3858@t '(_ any any)))) (if q385a@ls/false (apply (lambda (q385c@id q385d@filename) (q30a7@do-include q3856@e q385c@id q385d@filename)) q385a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3858@t)))))) (set! q4b8c@q30ab@include-into-macro q30ab@include-into-macro) (set! q30ad@syntax-rules-macro (lambda (q3860@e) (let ((q3862@t q3860@e)) (let ((q3864@ls/false (q30c1@syntax-dispatch q3862@t '(_ each-any . #(each (any any)))))) (if q3864@ls/false (apply (lambda (q3866@lits q3867@pat* q3868@tmp*) (begin (q30c7@verify-literals q3866@lits q3860@e) (q3077@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons q3866@lits (map (lambda (q386c@pat q386d@tmp) (let ((q3870@t q386c@pat)) (let ((q3872@ls/false (q30c1@syntax-dispatch q3870@t '(_ . any)))) (if q3872@ls/false (apply (lambda (q3874@rest) (list (cons 'g q3874@rest) (list 'syntax q386d@tmp))) q3872@ls/false) (let ((q3876@t q3870@t)) (let ((q3878@ls/false (q30c1@syntax-dispatch q3876@t '_))) (if q3878@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid syntax-rules pattern" q3860@e q386c@pat)) q3878@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3876@t)))))))) q3867@pat* q3868@tmp*)))))))) q3864@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3862@t)))))) (set! q4b8d@q30ad@syntax-rules-macro q30ad@syntax-rules-macro) (set! q30af@quasiquote-macro (letrec* ((q387b@datum (lambda (q397c@x) (list (q3049@scheme-stx 'quote) (q2ea2@mkstx q397c@x '() '() '())))) (q3897@quasicons* (lambda (q3974@x q3975@y) (let q397a@f ((q3978@x q3974@x)) (if (null? q3978@x) q3975@y (q3899@quasicons (car q3978@x) (q397a@f (cdr q3978@x))))))) (q3899@quasicons (lambda (q394e@x q394f@y) (let ((q3952@t q394f@y)) (let ((q3954@ls/false (q30c1@syntax-dispatch q3952@t '(#(scheme-id quote) any)))) (if q3954@ls/false (apply (lambda (q3956@dy) (let ((q3958@t q394e@x)) (let ((q395a@ls/false (q30c1@syntax-dispatch q3958@t '(#(scheme-id quote) any)))) (if q395a@ls/false (apply (lambda (q395c@dx) (list (q3049@scheme-stx 'quote) (cons q395c@dx q3956@dy))) q395a@ls/false) (let ((q395e@t q3958@t)) (let ((q3960@ls/false (q30c1@syntax-dispatch q395e@t '_))) (if q3960@ls/false (apply (lambda () (let ((q3962@t q3956@dy)) (let ((q3964@ls/false (q30c1@syntax-dispatch q3962@t '()))) (if q3964@ls/false (apply (lambda () (list (q3049@scheme-stx 'list) q394e@x)) q3964@ls/false) (let ((q3966@t q3962@t)) (let ((q3968@ls/false (q30c1@syntax-dispatch q3966@t '_))) (if q3968@ls/false (apply (lambda () (list (q3049@scheme-stx 'cons) q394e@x q394f@y)) q3968@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3966@t)))))))) q3960@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q395e@t)))))))) q3954@ls/false) (let ((q396a@t q3952@t)) (let ((q396c@ls/false (q30c1@syntax-dispatch q396a@t '(#(scheme-id list) . each-any)))) (if q396c@ls/false (apply (lambda (q396e@stuff) (cons* (q3049@scheme-stx 'list) q394e@x q396e@stuff)) q396c@ls/false) (let ((q3970@t q396a@t)) (let ((q3972@ls/false (q30c1@syntax-dispatch q3970@t '_))) (if q3972@ls/false (apply (lambda () (list (q3049@scheme-stx 'cons) q394e@x q394f@y)) q3972@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3970@t)))))))))))) (q389b@quasiappend (lambda (q3934@x q3935@y) (let ((q3938@ls (let q393c@f ((q393a@x q3934@x)) (if (null? q393a@x) (let ((q393e@t q3935@y)) (let ((q3940@ls/false (q30c1@syntax-dispatch q393e@t '(#(scheme-id quote) ())))) (if q3940@ls/false (apply (lambda () '()) q3940@ls/false) (let ((q3942@t q393e@t)) (let ((q3944@ls/false (q30c1@syntax-dispatch q3942@t '_))) (if q3944@ls/false (apply (lambda () (list q3935@y)) q3944@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3942@t))))))) (let ((q3946@t (car q393a@x))) (let ((q3948@ls/false (q30c1@syntax-dispatch q3946@t '(#(scheme-id quote) ())))) (if q3948@ls/false (apply (lambda () (q393c@f (cdr q393a@x))) q3948@ls/false) (let ((q394a@t q3946@t)) (let ((q394c@ls/false (q30c1@syntax-dispatch q394a@t '_))) (if q394c@ls/false (apply (lambda () (cons (car q393a@x) (q393c@f (cdr q393a@x)))) q394c@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q394a@t))))))))))) (if (null? q3938@ls) (list (q3049@scheme-stx 'quote) '()) (if (null? (cdr q3938@ls)) (car q3938@ls) (cons* (q3049@scheme-stx 'append) q3938@ls)))))) (q389d@quasivector (lambda (q3902@x) (let ((q3904@pat-x q3902@x)) (let ((q3906@t q3904@pat-x)) (let ((q3908@ls/false (q30c1@syntax-dispatch q3906@t '(#(scheme-id quote) each-any)))) (if q3908@ls/false (apply (lambda (q390a@x*) (list (q3049@scheme-stx 'quote) (list->vector q390a@x*))) q3908@ls/false) (let ((q390c@t q3906@t)) (let ((q390e@ls/false (q30c1@syntax-dispatch q390c@t '_))) (if q390e@ls/false (apply (lambda () (let q3916@f ((q3910@x q3902@x) (q3911@k (lambda (q3914@ls) (cons* (q3049@scheme-stx 'vector) q3914@ls)))) (let ((q3918@t q3910@x)) (let ((q391a@ls/false (q30c1@syntax-dispatch q3918@t '(#(scheme-id quote) each-any)))) (if q391a@ls/false (apply (lambda (q391c@x*) (q3911@k (map (lambda (q391e@x) (list (q3049@scheme-stx 'quote) q391e@x)) q391c@x*))) q391a@ls/false) (let ((q3920@t q3918@t)) (let ((q3922@ls/false (q30c1@syntax-dispatch q3920@t '(#(scheme-id list) . each-any)))) (if q3922@ls/false (apply (lambda (q3924@x*) (q3911@k q3924@x*)) q3922@ls/false) (let ((q3926@t q3920@t)) (let ((q3928@ls/false (q30c1@syntax-dispatch q3926@t '(#(scheme-id cons) any any)))) (if q3928@ls/false (apply (lambda (q392a@x q392b@y) (q3916@f q392b@y (lambda (q392e@ls) (q3911@k (cons q392a@x q392e@ls))))) q3928@ls/false) (let ((q3930@t q3926@t)) (let ((q3932@ls/false (q30c1@syntax-dispatch q3930@t '_))) (if q3932@ls/false (apply (lambda () (list (q3049@scheme-stx 'list->vector) q3904@pat-x)) q3932@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3930@t))))))))))))))) q390e@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q390c@t)))))))))) (q389f@vquasi (lambda (q38e0@p q38e1@lev) (let ((q38e4@t q38e0@p)) (let ((q38e6@ls/false (q30c1@syntax-dispatch q38e4@t '(any . any)))) (if q38e6@ls/false (apply (lambda (q38e8@p q38e9@q) (let ((q38ec@t q38e8@p)) (let ((q38ee@ls/false (q30c1@syntax-dispatch q38ec@t '(#(scheme-id unquote) . each-any)))) (if q38ee@ls/false (apply (lambda (q38f0@p) (if (= q38e1@lev '0) (q3897@quasicons* q38f0@p (q389f@vquasi q38e9@q q38e1@lev)) (q3899@quasicons (q3899@quasicons (q387b@datum 'unquote) (q38a1@quasi q38f0@p (- q38e1@lev '1))) (q389f@vquasi q38e9@q q38e1@lev)))) q38ee@ls/false) (let ((q38f2@t q38ec@t)) (let ((q38f4@ls/false (q30c1@syntax-dispatch q38f2@t '(#(scheme-id unquote-splicing) . each-any)))) (if q38f4@ls/false (apply (lambda (q38f6@p) (if (= q38e1@lev '0) (q389b@quasiappend q38f6@p (q389f@vquasi q38e9@q q38e1@lev)) (q3899@quasicons (q3899@quasicons (q387b@datum 'unquote-splicing) (q38a1@quasi q38f6@p (- q38e1@lev '1))) (q389f@vquasi q38e9@q q38e1@lev)))) q38f4@ls/false) (let ((q38f8@t q38f2@t)) (let ((q38fa@ls/false (q30c1@syntax-dispatch q38f8@t 'any))) (if q38fa@ls/false (apply (lambda (q38fc@p) (q3899@quasicons (q38a1@quasi q38fc@p q38e1@lev) (q389f@vquasi q38e9@q q38e1@lev))) q38fa@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q38f8@t))))))))))) q38e6@ls/false) (let ((q38fe@t q38e4@t)) (let ((q3900@ls/false (q30c1@syntax-dispatch q38fe@t '()))) (if q3900@ls/false (apply (lambda () (list (q3049@scheme-stx 'quote) '())) q3900@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q38fe@t))))))))) (q38a1@quasi (lambda (q38aa@p q38ab@lev) (let ((q38ae@t q38aa@p)) (let ((q38b0@ls/false (q30c1@syntax-dispatch q38ae@t '(#(scheme-id unquote) any)))) (if q38b0@ls/false (apply (lambda (q38b2@p) (if (= q38ab@lev '0) q38b2@p (q3899@quasicons (q387b@datum 'unquote) (q38a1@quasi (list q38b2@p) (- q38ab@lev '1))))) q38b0@ls/false) (let ((q38b4@t q38ae@t)) (let ((q38b6@ls/false (q30c1@syntax-dispatch q38b4@t '((#(scheme-id unquote) . each-any) . any)))) (if q38b6@ls/false (apply (lambda (q38b8@p q38b9@q) (if (= q38ab@lev '0) (q3897@quasicons* q38b8@p (q38a1@quasi q38b9@q q38ab@lev)) (q3899@quasicons (q3899@quasicons (q387b@datum 'unquote) (q38a1@quasi q38b8@p (- q38ab@lev '1))) (q38a1@quasi q38b9@q q38ab@lev)))) q38b6@ls/false) (let ((q38bc@t q38b4@t)) (let ((q38be@ls/false (q30c1@syntax-dispatch q38bc@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if q38be@ls/false (apply (lambda (q38c0@p q38c1@q) (if (= q38ab@lev '0) (q389b@quasiappend q38c0@p (q38a1@quasi q38c1@q q38ab@lev)) (q3899@quasicons (q3899@quasicons (q387b@datum 'unquote-splicing) (q38a1@quasi q38c0@p (- q38ab@lev '1))) (q38a1@quasi q38c1@q q38ab@lev)))) q38be@ls/false) (let ((q38c4@t q38bc@t)) (let ((q38c6@ls/false (q30c1@syntax-dispatch q38c4@t '(#(scheme-id quasiquote) any)))) (if q38c6@ls/false (apply (lambda (q38c8@p) (q3899@quasicons (q387b@datum 'quasiquote) (q38a1@quasi (list q38c8@p) (+ q38ab@lev '1)))) q38c6@ls/false) (let ((q38ca@t q38c4@t)) (let ((q38cc@ls/false (q30c1@syntax-dispatch q38ca@t '(any . any)))) (if q38cc@ls/false (apply (lambda (q38ce@p q38cf@q) (q3899@quasicons (q38a1@quasi q38ce@p q38ab@lev) (q38a1@quasi q38cf@q q38ab@lev))) q38cc@ls/false) (let ((q38d2@t q38ca@t)) (let ((q38d4@ls/false (q30c1@syntax-dispatch q38d2@t '#(vector each-any)))) (if (and q38d4@ls/false (apply (lambda (q38d6@x) (not (q2e86@stx? q38d6@x))) q38d4@ls/false)) (apply (lambda (q38d8@x) (q389d@quasivector (q389f@vquasi q38d8@x q38ab@lev))) q38d4@ls/false) (let ((q38da@t q38d2@t)) (let ((q38dc@ls/false (q30c1@syntax-dispatch q38da@t 'any))) (if q38dc@ls/false (apply (lambda (q38de@p) (list (q3049@scheme-stx 'quote) q38de@p)) q38dc@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q38da@t))))))))))))))))))))))))) (lambda (q38a2@x) (let ((q38a4@t q38a2@x)) (let ((q38a6@ls/false (q30c1@syntax-dispatch q38a4@t '(_ any)))) (if q38a6@ls/false (apply (lambda (q38a8@e) (q38a1@quasi q38a8@e '0)) q38a6@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q38a4@t))))))) (set! q4b8e@q30af@quasiquote-macro q30af@quasiquote-macro) (set! q30b1@quasisyntax-macro (letrec* ((q397f@quasi (lambda (q399a@p q399b@lev) (let ((q399e@t q399a@p)) (let ((q39a0@ls/false (q30c1@syntax-dispatch q399e@t '(#(scheme-id unsyntax) any)))) (if q39a0@ls/false (apply (lambda (q39a2@p) (if (= q399b@lev '0) (let ((q39a4@g (gensym))) (values (list q39a4@g) (list q39a2@p) q39a4@g)) (call-with-values (lambda () (q397f@quasi q39a2@p (- q399b@lev '1))) (lambda (q39ac@q39a7 q39ad@q39a9 q39ae@q39ab) (let ((q39b2@p q39ae@q39ab) (q39b3@rhs* q39ad@q39a9) (q39b4@lhs* q39ac@q39a7)) (values q39b4@lhs* q39b3@rhs* (list 'unsyntax q39b2@p))))))) q39a0@ls/false) (let ((q39b8@t q399e@t)) (let ((q39ba@ls/false (q30c1@syntax-dispatch q39b8@t '#(scheme-id unsyntax)))) (if (and q39ba@ls/false (apply (lambda () (= q399b@lev '0)) q39ba@ls/false)) (apply (lambda () (q31a1@syntax-violation '#f '"incorrect use of unsyntax" q399a@p)) q39ba@ls/false) (let ((q39bc@t q39b8@t)) (let ((q39be@ls/false (q30c1@syntax-dispatch q39bc@t '((#(scheme-id unsyntax) . each-any) . any)))) (if q39be@ls/false (apply (lambda (q39c0@p* q39c1@q) (call-with-values (lambda () (q397f@quasi q39c1@q q399b@lev)) (lambda (q39ca@q39c5 q39cb@q39c7 q39cc@q39c9) (let ((q39d0@q q39cc@q39c9) (q39d1@rhs* q39cb@q39c7) (q39d2@lhs* q39ca@q39c5)) (if (= q399b@lev '0) (let ((q39d6@g* (map (lambda (q39d8@x) (gensym)) q39c0@p*))) (values (append q39d6@g* q39d2@lhs*) (append q39c0@p* q39d1@rhs*) (append q39d6@g* q39d0@q))) (call-with-values (lambda () (q397f@quasi q39c0@p* (- q399b@lev '1))) (lambda (q39e0@q39db q39e1@q39dd q39e2@q39df) (let ((q39e6@p* q39e2@q39df) (q39e7@rhs2* q39e1@q39dd) (q39e8@lhs2* q39e0@q39db)) (values (append q39e8@lhs2* q39d2@lhs*) (append q39e7@rhs2* q39d1@rhs*) (cons (cons 'unsyntax q39e6@p*) q39d0@q)))))))))) q39be@ls/false) (let ((q39ec@t q39bc@t)) (let ((q39ee@ls/false (q30c1@syntax-dispatch q39ec@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if q39ee@ls/false (apply (lambda (q39f0@p* q39f1@q) (call-with-values (lambda () (q397f@quasi q39f1@q q399b@lev)) (lambda (q39fa@q39f5 q39fb@q39f7 q39fc@q39f9) (let ((q3a00@q q39fc@q39f9) (q3a01@rhs* q39fb@q39f7) (q3a02@lhs* q39fa@q39f5)) (if (= q399b@lev '0) (let ((q3a06@g* (map (lambda (q3a08@x) (gensym)) q39f0@p*))) (values (append (map (lambda (q3a0a@g) (cons q3a0a@g '(...))) q3a06@g*) q3a02@lhs*) (append q39f0@p* q3a01@rhs*) (append (apply append (map (lambda (q3a0c@g) (cons q3a0c@g '(...))) q3a06@g*)) q3a00@q))) (call-with-values (lambda () (q397f@quasi q39f0@p* (- q399b@lev '1))) (lambda (q3a14@q3a0f q3a15@q3a11 q3a16@q3a13) (let ((q3a1a@p* q3a16@q3a13) (q3a1b@rhs2* q3a15@q3a11) (q3a1c@lhs2* q3a14@q3a0f)) (values (append q3a1c@lhs2* q3a02@lhs*) (append q3a1b@rhs2* q3a01@rhs*) (cons (cons 'unsyntax-splicing q3a1a@p*) q3a00@q)))))))))) q39ee@ls/false) (let ((q3a20@t q39ec@t)) (let ((q3a22@ls/false (q30c1@syntax-dispatch q3a20@t '#(scheme-id unsyntax-splicing)))) (if (and q3a22@ls/false (apply (lambda () (= q399b@lev '0)) q3a22@ls/false)) (apply (lambda () (q31a1@syntax-violation '#f '"incorrect use of unsyntax-splicing" q399a@p)) q3a22@ls/false) (let ((q3a24@t q3a20@t)) (let ((q3a26@ls/false (q30c1@syntax-dispatch q3a24@t '(#(scheme-id quasisyntax) any)))) (if q3a26@ls/false (apply (lambda (q3a28@p) (call-with-values (lambda () (q397f@quasi q3a28@p (+ q399b@lev '1))) (lambda (q3a30@q3a2b q3a31@q3a2d q3a32@q3a2f) (let ((q3a36@p q3a32@q3a2f) (q3a37@rhs* q3a31@q3a2d) (q3a38@lhs* q3a30@q3a2b)) (values q3a38@lhs* q3a37@rhs* (list 'quasisyntax q3a36@p)))))) q3a26@ls/false) (let ((q3a3c@t q3a24@t)) (let ((q3a3e@ls/false (q30c1@syntax-dispatch q3a3c@t '(any . any)))) (if q3a3e@ls/false (apply (lambda (q3a40@p q3a41@q) (call-with-values (lambda () (q397f@quasi q3a40@p q399b@lev)) (lambda (q3a50@q3a45 q3a51@q3a47 q3a52@q3a49) (call-with-values (lambda () (q397f@quasi q3a41@q q399b@lev)) (lambda (q3a56@q3a4b q3a57@q3a4d q3a58@q3a4f) (let ((q3a5c@q q3a58@q3a4f) (q3a5d@rhs2* q3a57@q3a4d) (q3a5e@lhs2* q3a56@q3a4b) (q3a5f@p q3a52@q3a49) (q3a60@rhs* q3a51@q3a47) (q3a61@lhs* q3a50@q3a45)) (values (append q3a5e@lhs2* q3a61@lhs*) (append q3a5d@rhs2* q3a60@rhs*) (cons q3a5f@p q3a5c@q)))))))) q3a3e@ls/false) (let ((q3a68@t q3a3c@t)) (let ((q3a6a@ls/false (q30c1@syntax-dispatch q3a68@t '#(vector each-any)))) (if q3a6a@ls/false (apply (lambda (q3a6c@x*) (call-with-values (lambda () (q397f@quasi q3a6c@x* q399b@lev)) (lambda (q3a74@q3a6f q3a75@q3a71 q3a76@q3a73) (let ((q3a7a@x* q3a76@q3a73) (q3a7b@rhs* q3a75@q3a71) (q3a7c@lhs* q3a74@q3a6f)) (values q3a7c@lhs* q3a7b@rhs* (list->vector q3a7a@x*)))))) q3a6a@ls/false) (let ((q3a80@t q3a68@t)) (let ((q3a82@ls/false (q30c1@syntax-dispatch q3a80@t '_))) (if q3a82@ls/false (apply (lambda () (values '() '() q399a@p)) q3a82@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3a80@t))))))))))))))))))))))))))))))) (lambda (q3980@x) (let ((q3982@t q3980@x)) (let ((q3984@ls/false (q30c1@syntax-dispatch q3982@t '(_ any)))) (if q3984@ls/false (apply (lambda (q3986@e) (call-with-values (lambda () (q397f@quasi q3986@e '0)) (lambda (q398e@q3989 q398f@q398b q3990@q398d) (let ((q3994@v q3990@q398d) (q3995@rhs* q398f@q398b) (q3996@lhs* q398e@q3989)) (q3077@bless (list 'syntax-case (cons 'list q3995@rhs*) '() (list q3996@lhs* (list 'syntax q3994@v)))))))) q3984@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3982@t))))))) (set! q4b8f@q30b1@quasisyntax-macro q30b1@quasisyntax-macro) (set! q30b3@define-struct-macro (lambda (q3a84@stx) (q31a1@syntax-violation '#f '"define-struct not supported" q3a84@stx))) (set! q4b90@q30b3@define-struct-macro q30b3@define-struct-macro) (set! q30b5@define-record-type-macro (lambda (q3a86@x) (letrec* ((q3a89@id (lambda (q3c7c@ctxt . q3c7e@str*) (q31a5@datum->syntax q3c7c@ctxt (string->symbol (apply string-append (map (lambda (q3c80@x) (if (symbol? q3c80@x) (symbol->string q3c80@x) (if (string? q3c80@x) q3c80@x (assertion-violation 'define-record-type '"BUG")))) q3c7e@str*)))))) (q3a8b@get-record-name (lambda (q3c6a@spec) (let ((q3c6c@t q3c6a@spec)) (let ((q3c6e@ls/false (q30c1@syntax-dispatch q3c6c@t '(any any any)))) (if q3c6e@ls/false (apply (lambda (q3c70@foo q3c71@make-foo q3c72@foo?) q3c70@foo) q3c6e@ls/false) (let ((q3c76@t q3c6c@t)) (let ((q3c78@ls/false (q30c1@syntax-dispatch q3c76@t 'any))) (if q3c78@ls/false (apply (lambda (q3c7a@foo) q3c7a@foo) q3c78@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3c76@t))))))))) (q3a8d@get-record-constructor-name (lambda (q3c56@spec) (let ((q3c58@t q3c56@spec)) (let ((q3c5a@ls/false (q30c1@syntax-dispatch q3c58@t '(any any any)))) (if q3c5a@ls/false (apply (lambda (q3c5c@foo q3c5d@make-foo q3c5e@foo?) q3c5d@make-foo) q3c5a@ls/false) (let ((q3c62@t q3c58@t)) (let ((q3c64@ls/false (q30c1@syntax-dispatch q3c62@t 'any))) (if (and q3c64@ls/false (apply (lambda (q3c66@foo) (q2eba@id? q3c66@foo)) q3c64@ls/false)) (apply (lambda (q3c68@foo) (q3a89@id q3c68@foo '"make-" (q2ece@stx->datum q3c68@foo))) q3c64@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3c62@t))))))))) (q3a8f@get-record-predicate-name (lambda (q3c42@spec) (let ((q3c44@t q3c42@spec)) (let ((q3c46@ls/false (q30c1@syntax-dispatch q3c44@t '(any any any)))) (if q3c46@ls/false (apply (lambda (q3c48@foo q3c49@make-foo q3c4a@foo?) q3c4a@foo?) q3c46@ls/false) (let ((q3c4e@t q3c44@t)) (let ((q3c50@ls/false (q30c1@syntax-dispatch q3c4e@t 'any))) (if (and q3c50@ls/false (apply (lambda (q3c52@foo) (q2eba@id? q3c52@foo)) q3c50@ls/false)) (apply (lambda (q3c54@foo) (q3a89@id q3c54@foo (q2ece@stx->datum q3c54@foo) '"?")) q3c50@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3c4e@t))))))))) (q3a91@get-clause (lambda (q3c30@id q3c31@ls) (let ((q3c34@t q3c31@ls)) (let ((q3c36@ls/false (q30c1@syntax-dispatch q3c34@t '()))) (if q3c36@ls/false (apply (lambda () '#f) q3c36@ls/false) (let ((q3c38@t q3c34@t)) (let ((q3c3a@ls/false (q30c1@syntax-dispatch q3c38@t '((any . any) . any)))) (if q3c3a@ls/false (apply (lambda (q3c3c@x q3c3d@rest q3c3e@ls) (if (q2ec0@free-id=? (q3077@bless q3c30@id) q3c3c@x) (cons q3c3c@x q3c3d@rest) (q3a91@get-clause q3c30@id q3c3e@ls))) q3c3a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3c38@t))))))))) (q3a93@foo-rtd-code (lambda (q3bde@name q3bdf@clause* q3be0@parent-rtd-code) (letrec* ((q3be5@convert-field-spec* (lambda (q3c16@ls) (list->vector (map (lambda (q3c18@x) (let ((q3c1a@t q3c18@x)) (let ((q3c1c@ls/false (q30c1@syntax-dispatch q3c1a@t '(#(scheme-id mutable) any . any)))) (if q3c1c@ls/false (apply (lambda (q3c1e@name q3c1f@rest) (list 'mutable q3c1e@name)) q3c1c@ls/false) (let ((q3c22@t q3c1a@t)) (let ((q3c24@ls/false (q30c1@syntax-dispatch q3c22@t '(#(scheme-id immutable) any . any)))) (if q3c24@ls/false (apply (lambda (q3c26@name q3c27@rest) (list 'immutable q3c26@name)) q3c24@ls/false) (let ((q3c2a@t q3c22@t)) (let ((q3c2c@ls/false (q30c1@syntax-dispatch q3c2a@t 'any))) (if q3c2c@ls/false (apply (lambda (q3c2e@name) (list 'immutable q3c2e@name)) q3c2c@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3c2a@t))))))))))) q3c16@ls))))) (let ((q3be6@uid-code (let ((q3bee@t (q3a91@get-clause 'nongenerative q3bdf@clause*))) (let ((q3bf0@ls/false (q30c1@syntax-dispatch q3bee@t '(_)))) (if q3bf0@ls/false (apply (lambda () (list 'quote (gensym))) q3bf0@ls/false) (let ((q3bf2@t q3bee@t)) (let ((q3bf4@ls/false (q30c1@syntax-dispatch q3bf2@t '(_ any)))) (if q3bf4@ls/false (apply (lambda (q3bf6@uid) (list 'quote q3bf6@uid)) q3bf4@ls/false) (let ((q3bf8@t q3bf2@t)) (let ((q3bfa@ls/false (q30c1@syntax-dispatch q3bf8@t '_))) (if q3bfa@ls/false (apply (lambda () '#f) q3bfa@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3bf8@t))))))))))) (q3be7@sealed? (let ((q3bfc@t (q3a91@get-clause 'sealed q3bdf@clause*))) (let ((q3bfe@ls/false (q30c1@syntax-dispatch q3bfc@t '(_ #(atom #t))))) (if q3bfe@ls/false (apply (lambda () '#t) q3bfe@ls/false) (let ((q3c00@t q3bfc@t)) (let ((q3c02@ls/false (q30c1@syntax-dispatch q3c00@t '_))) (if q3c02@ls/false (apply (lambda () '#f) q3c02@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3c00@t)))))))) (q3be8@opaque? (let ((q3c04@t (q3a91@get-clause 'opaque q3bdf@clause*))) (let ((q3c06@ls/false (q30c1@syntax-dispatch q3c04@t '(_ #(atom #t))))) (if q3c06@ls/false (apply (lambda () '#t) q3c06@ls/false) (let ((q3c08@t q3c04@t)) (let ((q3c0a@ls/false (q30c1@syntax-dispatch q3c08@t '_))) (if q3c0a@ls/false (apply (lambda () '#f) q3c0a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3c08@t)))))))) (q3be9@fields (let ((q3c0c@t (q3a91@get-clause 'fields q3bdf@clause*))) (let ((q3c0e@ls/false (q30c1@syntax-dispatch q3c0c@t '(_ . each-any)))) (if q3c0e@ls/false (apply (lambda (q3c10@field-spec*) (list 'quote (q3be5@convert-field-spec* q3c10@field-spec*))) q3c0e@ls/false) (let ((q3c12@t q3c0c@t)) (let ((q3c14@ls/false (q30c1@syntax-dispatch q3c12@t '_))) (if q3c14@ls/false (apply (lambda () ''#()) q3c14@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3c12@t))))))))) (q3077@bless (list 'make-record-type-descriptor (list 'quote q3bde@name) q3be0@parent-rtd-code q3be6@uid-code q3be7@sealed? q3be8@opaque? q3be9@fields)))))) (q3a95@parent-rtd-code (lambda (q3bc6@clause*) (let ((q3bc8@t (q3a91@get-clause 'parent q3bc6@clause*))) (let ((q3bca@ls/false (q30c1@syntax-dispatch q3bc8@t '(_ any)))) (if q3bca@ls/false (apply (lambda (q3bcc@name) (list 'record-type-descriptor q3bcc@name)) q3bca@ls/false) (let ((q3bce@t q3bc8@t)) (let ((q3bd0@ls/false (q30c1@syntax-dispatch q3bce@t '#(atom #f)))) (if q3bd0@ls/false (apply (lambda () (let ((q3bd2@t (q3a91@get-clause 'parent-rtd q3bc6@clause*))) (let ((q3bd4@ls/false (q30c1@syntax-dispatch q3bd2@t '(_ any any)))) (if q3bd4@ls/false (apply (lambda (q3bd6@rtd q3bd7@rcd) q3bd6@rtd) q3bd4@ls/false) (let ((q3bda@t q3bd2@t)) (let ((q3bdc@ls/false (q30c1@syntax-dispatch q3bda@t '#(atom #f)))) (if q3bdc@ls/false (apply (lambda () '#f) q3bdc@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3bda@t)))))))) q3bd0@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3bce@t))))))))) (q3a97@parent-rcd-code (lambda (q3bae@clause*) (let ((q3bb0@t (q3a91@get-clause 'parent q3bae@clause*))) (let ((q3bb2@ls/false (q30c1@syntax-dispatch q3bb0@t '(_ any)))) (if q3bb2@ls/false (apply (lambda (q3bb4@name) (list 'record-constructor-descriptor q3bb4@name)) q3bb2@ls/false) (let ((q3bb6@t q3bb0@t)) (let ((q3bb8@ls/false (q30c1@syntax-dispatch q3bb6@t '#(atom #f)))) (if q3bb8@ls/false (apply (lambda () (let ((q3bba@t (q3a91@get-clause 'parent-rtd q3bae@clause*))) (let ((q3bbc@ls/false (q30c1@syntax-dispatch q3bba@t '(_ any any)))) (if q3bbc@ls/false (apply (lambda (q3bbe@rtd q3bbf@rcd) q3bbf@rcd) q3bbc@ls/false) (let ((q3bc2@t q3bba@t)) (let ((q3bc4@ls/false (q30c1@syntax-dispatch q3bc2@t '#(atom #f)))) (if q3bc4@ls/false (apply (lambda () '#f) q3bc4@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3bc2@t)))))))) q3bb8@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3bb6@t))))))))) (q3a99@foo-rcd-code (lambda (q3ba6@clause* q3ba7@foo-rtd q3ba8@protocol q3ba9@parent-rcd-code) (list 'make-record-constructor-descriptor q3ba7@foo-rtd q3ba9@parent-rcd-code q3ba8@protocol))) (q3a9b@get-protocol-code (lambda (q3b9a@clause*) (let ((q3b9c@t (q3a91@get-clause 'protocol q3b9a@clause*))) (let ((q3b9e@ls/false (q30c1@syntax-dispatch q3b9c@t '(_ any)))) (if q3b9e@ls/false (apply (lambda (q3ba0@expr) q3ba0@expr) q3b9e@ls/false) (let ((q3ba2@t q3b9c@t)) (let ((q3ba4@ls/false (q30c1@syntax-dispatch q3ba2@t '_))) (if q3ba4@ls/false (apply (lambda () '#f) q3ba4@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3ba2@t))))))))) (q3a9d@get-fields (lambda (q3b88@clause*) (let ((q3b8a@t q3b88@clause*)) (let ((q3b8c@ls/false (q30c1@syntax-dispatch q3b8a@t '()))) (if q3b8c@ls/false (apply (lambda () '()) q3b8c@ls/false) (let ((q3b8e@t q3b8a@t)) (let ((q3b90@ls/false (q30c1@syntax-dispatch q3b8e@t '((#(scheme-id fields) . each-any) . _)))) (if q3b90@ls/false (apply (lambda (q3b92@f*) q3b92@f*) q3b90@ls/false) (let ((q3b94@t q3b8e@t)) (let ((q3b96@ls/false (q30c1@syntax-dispatch q3b94@t '(_ . any)))) (if q3b96@ls/false (apply (lambda (q3b98@rest) (q3a9d@get-fields q3b98@rest)) q3b96@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3b94@t)))))))))))) (q3a9f@get-mutator-indices (lambda (q3b70@fields) (let q3b76@f ((q3b72@fields q3b70@fields) (q3b73@i '0)) (let ((q3b78@t q3b72@fields)) (let ((q3b7a@ls/false (q30c1@syntax-dispatch q3b78@t '()))) (if q3b7a@ls/false (apply (lambda () '()) q3b7a@ls/false) (let ((q3b7c@t q3b78@t)) (let ((q3b7e@ls/false (q30c1@syntax-dispatch q3b7c@t '((#(scheme-id mutable) . _) . any)))) (if q3b7e@ls/false (apply (lambda (q3b80@rest) (cons q3b73@i (q3b76@f q3b80@rest (+ q3b73@i '1)))) q3b7e@ls/false) (let ((q3b82@t q3b7c@t)) (let ((q3b84@ls/false (q30c1@syntax-dispatch q3b82@t '(_ . any)))) (if q3b84@ls/false (apply (lambda (q3b86@rest) (q3b76@f q3b86@rest (+ q3b73@i '1))) q3b84@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3b82@t))))))))))))) (q3aa1@get-mutators (lambda (q3b46@foo q3b47@fields) (letrec* ((q3b4b@gen-name (lambda (q3b6e@x) (q31a5@datum->syntax q3b46@foo (string->symbol (string-append (symbol->string (q31a7@syntax->datum q3b46@foo)) '"-" (symbol->string (q31a7@syntax->datum q3b6e@x)) '"-set!")))))) (let q3b4e@f ((q3b4c@fields q3b47@fields)) (let ((q3b50@t q3b4c@fields)) (let ((q3b52@ls/false (q30c1@syntax-dispatch q3b50@t '()))) (if q3b52@ls/false (apply (lambda () '()) q3b52@ls/false) (let ((q3b54@t q3b50@t)) (let ((q3b56@ls/false (q30c1@syntax-dispatch q3b54@t '((#(scheme-id mutable) any any any) . any)))) (if q3b56@ls/false (apply (lambda (q3b58@name q3b59@accessor q3b5a@mutator q3b5b@rest) (cons q3b5a@mutator (q3b4e@f q3b5b@rest))) q3b56@ls/false) (let ((q3b60@t q3b54@t)) (let ((q3b62@ls/false (q30c1@syntax-dispatch q3b60@t '((#(scheme-id mutable) any) . any)))) (if q3b62@ls/false (apply (lambda (q3b64@name q3b65@rest) (cons (q3b4b@gen-name q3b64@name) (q3b4e@f q3b65@rest))) q3b62@ls/false) (let ((q3b68@t q3b60@t)) (let ((q3b6a@ls/false (q30c1@syntax-dispatch q3b68@t '(_ . any)))) (if q3b6a@ls/false (apply (lambda (q3b6c@rest) (q3b4e@f q3b6c@rest)) q3b6a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3b68@t))))))))))))))))) (q3aa3@get-accessors (lambda (q3b02@foo q3b03@fields) (letrec* ((q3b07@gen-name (lambda (q3b44@x) (q31a5@datum->syntax q3b02@foo (string->symbol (string-append (symbol->string (q31a7@syntax->datum q3b02@foo)) '"-" (symbol->string (q31a7@syntax->datum q3b44@x)))))))) (map (lambda (q3b08@field) (let ((q3b0a@t q3b08@field)) (let ((q3b0c@ls/false (q30c1@syntax-dispatch q3b0a@t '(#(scheme-id mutable) any any any)))) (if (and q3b0c@ls/false (apply (lambda (q3b0e@name q3b0f@accessor q3b10@mutator) (q2eba@id? q3b0f@accessor)) q3b0c@ls/false)) (apply (lambda (q3b14@name q3b15@accessor q3b16@mutator) q3b15@accessor) q3b0c@ls/false) (let ((q3b1a@t q3b0a@t)) (let ((q3b1c@ls/false (q30c1@syntax-dispatch q3b1a@t '(#(scheme-id immutable) any any)))) (if (and q3b1c@ls/false (apply (lambda (q3b1e@name q3b1f@accessor) (q2eba@id? q3b1f@accessor)) q3b1c@ls/false)) (apply (lambda (q3b22@name q3b23@accessor) q3b23@accessor) q3b1c@ls/false) (let ((q3b26@t q3b1a@t)) (let ((q3b28@ls/false (q30c1@syntax-dispatch q3b26@t '(#(scheme-id mutable) any)))) (if (and q3b28@ls/false (apply (lambda (q3b2a@name) (q2eba@id? q3b2a@name)) q3b28@ls/false)) (apply (lambda (q3b2c@name) (q3b07@gen-name q3b2c@name)) q3b28@ls/false) (let ((q3b2e@t q3b26@t)) (let ((q3b30@ls/false (q30c1@syntax-dispatch q3b2e@t '(#(scheme-id immutable) any)))) (if (and q3b30@ls/false (apply (lambda (q3b32@name) (q2eba@id? q3b32@name)) q3b30@ls/false)) (apply (lambda (q3b34@name) (q3b07@gen-name q3b34@name)) q3b30@ls/false) (let ((q3b36@t q3b2e@t)) (let ((q3b38@ls/false (q30c1@syntax-dispatch q3b36@t 'any))) (if (and q3b38@ls/false (apply (lambda (q3b3a@name) (q2eba@id? q3b3a@name)) q3b38@ls/false)) (apply (lambda (q3b3c@name) (q3b07@gen-name q3b3c@name)) q3b38@ls/false) (let ((q3b3e@t q3b36@t)) (let ((q3b40@ls/false (q30c1@syntax-dispatch q3b3e@t 'any))) (if q3b40@ls/false (apply (lambda (q3b42@others) (q31a1@syntax-violation '#f '"invalid field spec" q3b08@field)) q3b40@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3b3e@t)))))))))))))))))))) q3b03@fields)))) (q3aa5@enumerate (lambda (q3afa@ls) (let q3b00@f ((q3afc@ls q3afa@ls) (q3afd@i '0)) (if (null? q3afc@ls) '() (cons q3afd@i (q3b00@f (cdr q3afc@ls) (+ q3afd@i '1))))))) (q3aa7@do-define-record (lambda (q3ad2@namespec q3ad3@clause*) (let ((q3ad6@foo (q3a8b@get-record-name q3ad2@namespec))) (let ((q3ad8@foo-rtd (gensym))) (let ((q3ada@foo-rcd (gensym))) (let ((q3adc@protocol (gensym))) (let ((q3ade@make-foo (q3a8d@get-record-constructor-name q3ad2@namespec))) (let ((q3ae0@fields (q3a9d@get-fields q3ad3@clause*))) (let ((q3ae2@idx* (q3aa5@enumerate q3ae0@fields))) (let ((q3ae4@foo-x* (q3aa3@get-accessors q3ad6@foo q3ae0@fields))) (let ((q3ae6@set-foo-x!* (q3aa1@get-mutators q3ad6@foo q3ae0@fields))) (let ((q3ae8@set-foo-idx* (q3a9f@get-mutator-indices q3ae0@fields))) (let ((q3aea@foo? (q3a8f@get-record-predicate-name q3ad2@namespec))) (let ((q3aec@foo-rtd-code (q3a93@foo-rtd-code q3ad6@foo q3ad3@clause* (q3a95@parent-rtd-code q3ad3@clause*)))) (let ((q3aee@foo-rcd-code (q3a99@foo-rcd-code q3ad3@clause* q3ad8@foo-rtd q3adc@protocol (q3a97@parent-rcd-code q3ad3@clause*)))) (let ((q3af0@protocol-code (q3a9b@get-protocol-code q3ad3@clause*))) (q3077@bless (cons 'begin (cons (list 'define q3ad8@foo-rtd q3aec@foo-rtd-code) (cons (list 'define q3adc@protocol q3af0@protocol-code) (cons (list 'define q3ada@foo-rcd q3aee@foo-rcd-code) (cons (list 'define-syntax q3ad6@foo (list 'list ''$rtd (list 'syntax q3ad8@foo-rtd) (list 'syntax q3ada@foo-rcd))) (cons (list 'define q3aea@foo? (list 'record-predicate q3ad8@foo-rtd)) (cons (list 'define q3ade@make-foo (list 'record-constructor q3ada@foo-rcd)) (append (map (lambda (q3af2@foo-x q3af3@idx) (list 'define q3af2@foo-x (list 'record-accessor q3ad8@foo-rtd q3af3@idx))) q3ae4@foo-x* q3ae2@idx*) (map (lambda (q3af6@set-foo-x! q3af7@idx) (list 'define q3af6@set-foo-x! (list 'record-mutator q3ad8@foo-rtd q3af7@idx))) q3ae6@set-foo-x!* q3ae8@set-foo-idx*)))))))))))))))))))))))))) (q3aa9@verify-clauses (lambda (q3ab2@x q3ab3@cls*) (letrec* ((q3ab7@valid-kwds (map q3077@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (q3ab9@free-id-member? (lambda (q3ace@x q3acf@ls) (and (pair? q3acf@ls) (or (q2ec0@free-id=? q3ace@x (car q3acf@ls)) (q3ab9@free-id-member? q3ace@x (cdr q3acf@ls))))))) (let q3abe@f ((q3aba@cls* q3ab3@cls*) (q3abb@seen* '())) (if (not (null? q3aba@cls*)) (let ((q3ac0@t (car q3aba@cls*))) (let ((q3ac2@ls/false (q30c1@syntax-dispatch q3ac0@t '(any . any)))) (if q3ac2@ls/false (apply (lambda (q3ac4@kwd q3ac5@rest) (if (or (not (q2eba@id? q3ac4@kwd)) (not (q3ab9@free-id-member? q3ac4@kwd q3ab7@valid-kwds))) (q31a1@syntax-violation '#f '"not a valid define-record-type keyword" q3ac4@kwd) (if (q2ec6@bound-id-member? q3ac4@kwd q3abb@seen*) (q31a1@syntax-violation '#f '"duplicate use of keyword " q3ab2@x q3ac4@kwd) (q3abe@f (cdr q3aba@cls*) (cons q3ac4@kwd q3abb@seen*))))) q3ac2@ls/false) (let ((q3ac8@t q3ac0@t)) (let ((q3aca@ls/false (q30c1@syntax-dispatch q3ac8@t 'any))) (if q3aca@ls/false (apply (lambda (q3acc@cls) (q31a1@syntax-violation '#f '"malformed define-record-type clause" q3acc@cls)) q3aca@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3ac8@t))))))) (void))))))) (let ((q3aaa@t q3a86@x)) (let ((q3aac@ls/false (q30c1@syntax-dispatch q3aaa@t '(_ any . each-any)))) (if q3aac@ls/false (apply (lambda (q3aae@namespec q3aaf@clause*) (begin (q3aa9@verify-clauses q3a86@x q3aaf@clause*) (q3aa7@do-define-record q3aae@namespec q3aaf@clause*))) q3aac@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3aaa@t))))))) (set! q4b91@q30b5@define-record-type-macro q30b5@define-record-type-macro) (set! q30b7@define-condition-type-macro (lambda (q3c82@x) (letrec* ((q3c85@mkname (lambda (q3cb2@name q3cb3@suffix) (q31a5@datum->syntax q3cb2@name (string->symbol (string-append (symbol->string (q31a7@syntax->datum q3cb2@name)) q3cb3@suffix)))))) (let ((q3c86@t q3c82@x)) (let ((q3c88@ls/false (q30c1@syntax-dispatch q3c86@t '(any any any any any . #(each (any any)))))) (if (and q3c88@ls/false (apply (lambda (q3c8a@ctxt q3c8b@name q3c8c@super q3c8d@constructor q3c8e@predicate q3c8f@field* q3c90@accessor*) (and (q2eba@id? q3c8b@name) (q2eba@id? q3c8c@super) (q2eba@id? q3c8d@constructor) (q2eba@id? q3c8e@predicate) (for-all q2eba@id? q3c8f@field*) (for-all q2eba@id? q3c90@accessor*))) q3c88@ls/false)) (apply (lambda (q3c98@ctxt q3c99@name q3c9a@super q3c9b@constructor q3c9c@predicate q3c9d@field* q3c9e@accessor*) (let ((q3ca6@aux-accessor* (map (lambda (q3ca8@x) (gensym)) q3c9e@accessor*))) (q3077@bless (cons 'begin (cons (cons 'define-record-type (cons (list q3c99@name q3c9b@constructor (gensym)) (cons (list 'parent q3c9a@super) (cons (cons 'fields (map (lambda (q3caa@field q3cab@aux) (list 'immutable q3caa@field q3cab@aux)) q3c9d@field* q3ca6@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define q3c9c@predicate (list 'condition-predicate (list 'record-type-descriptor q3c99@name))) (map (lambda (q3cae@accessor q3caf@aux) (list 'define q3cae@accessor (list 'condition-accessor (list 'record-type-descriptor q3c99@name) q3caf@aux))) q3c9e@accessor* q3ca6@aux-accessor*))))))) q3c88@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3c86@t))))))) (set! q4b92@q30b7@define-condition-type-macro q30b7@define-condition-type-macro) (set! q30b9@incorrect-usage-macro (lambda (q3cb6@e) (q31a1@syntax-violation '#f '"incorrect usage of auxiliary keyword" q3cb6@e))) (set! q4b93@q30b9@incorrect-usage-macro q30b9@incorrect-usage-macro) (set! q30bb@parameterize-macro (lambda (q3cb8@e) (let ((q3cba@t q3cb8@e)) (let ((q3cbc@ls/false (q30c1@syntax-dispatch q3cba@t '(_ () any . each-any)))) (if q3cbc@ls/false (apply (lambda (q3cbe@b q3cbf@b*) (q3077@bless (cons 'let (cons '() (cons q3cbe@b q3cbf@b*))))) q3cbc@ls/false) (let ((q3cc2@t q3cba@t)) (let ((q3cc4@ls/false (q30c1@syntax-dispatch q3cc2@t '(_ #(each (any any)) any . each-any)))) (if q3cc4@ls/false (apply (lambda (q3cc6@olhs* q3cc7@orhs* q3cc8@b q3cc9@b*) (let ((q3cce@lhs* (q318f@generate-temporaries q3cc6@olhs*)) (q3ccf@rhs* (q318f@generate-temporaries q3cc7@orhs*))) (q3077@bless (cons (list 'lambda (append q3cce@lhs* q3ccf@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (q3cd2@lhs q3cd3@rhs) (list 'let (list (list 't (list q3cd2@lhs))) (list q3cd2@lhs q3cd3@rhs) (cons 'set! (cons q3cd3@rhs '(t))))) q3cce@lhs* q3ccf@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons q3cc8@b q3cc9@b*))) '(swap)))))) (append q3cc6@olhs* q3cc7@orhs*))))) q3cc4@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3cc2@t))))))))) (set! q4b94@q30bb@parameterize-macro q30bb@parameterize-macro) (set! q30bd@foreign-call-transformer (lambda (q3cd6@e q3cd7@r q3cd8@mr) (let ((q3cdc@t q3cd6@e)) (let ((q3cde@ls/false (q30c1@syntax-dispatch q3cdc@t '(_ any . each-any)))) (if q3cde@ls/false (apply (lambda (q3ce0@name q3ce1@arg*) (cons 'foreign-call (cons (q30e3@chi-expr q3ce0@name q3cd7@r q3cd8@mr) (q30df@chi-expr* q3ce1@arg* q3cd7@r q3cd8@mr)))) q3cde@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3cdc@t)))))) (set! q4b95@q30bd@foreign-call-transformer q30bd@foreign-call-transformer) (set! q30bf@convert-pattern (lambda (q3ce4@pattern q3ce5@keys) (letrec* ((q3ce9@cvt* (lambda (q3d88@p* q3d89@n q3d8a@ids) (if (null? q3d88@p*) (values '() q3d8a@ids) (call-with-values (lambda () (q3ce9@cvt* (cdr q3d88@p*) q3d89@n q3d8a@ids)) (lambda (q3d92@q3d8f q3d93@q3d91) (let ((q3d96@ids q3d93@q3d91) (q3d97@y q3d92@q3d8f)) (call-with-values (lambda () (q3ceb@cvt (car q3d88@p*) q3d89@n q3d96@ids)) (lambda (q3d9e@q3d9b q3d9f@q3d9d) (let ((q3da2@ids q3d9f@q3d9d) (q3da3@x q3d9e@q3d9b)) (values (cons q3da3@x q3d97@y) q3da2@ids)))))))))) (q3ceb@cvt (lambda (q3cec@p q3ced@n q3cee@ids) (let ((q3cf2@t q3cec@p)) (let ((q3cf4@ls/false (q30c1@syntax-dispatch q3cf2@t 'any))) (if (and q3cf4@ls/false (apply (lambda (q3cf6@id) (q2eba@id? q3cf6@id)) q3cf4@ls/false)) (apply (lambda (q3cf8@id) (if (q2ec6@bound-id-member? q3cec@p q3ce5@keys) (values (vector 'free-id q3cec@p) q3cee@ids) (if (q2ec0@free-id=? q3cec@p (q3049@scheme-stx '_)) (values '_ q3cee@ids) (values 'any (cons (cons q3cec@p q3ced@n) q3cee@ids))))) q3cf4@ls/false) (let ((q3cfa@t q3cf2@t)) (let ((q3cfc@ls/false (q30c1@syntax-dispatch q3cfa@t '(any any)))) (if (and q3cfc@ls/false (apply (lambda (q3cfe@p q3cff@dots) (q30c3@ellipsis? q3cff@dots)) q3cfc@ls/false)) (apply (lambda (q3d02@p q3d03@dots) (call-with-values (lambda () (q3ceb@cvt q3d02@p (+ q3ced@n '1) q3cee@ids)) (lambda (q3d0a@q3d07 q3d0b@q3d09) (let ((q3d0e@ids q3d0b@q3d09) (q3d0f@p q3d0a@q3d07)) (values (if (eq? q3d0f@p 'any) 'each-any (vector 'each q3d0f@p)) q3d0e@ids))))) q3cfc@ls/false) (let ((q3d12@t q3cfa@t)) (let ((q3d14@ls/false (q30c1@syntax-dispatch q3d12@t '(any any . #(each+ any () any))))) (if (and q3d14@ls/false (apply (lambda (q3d16@x q3d17@dots q3d18@ys q3d19@z) (q30c3@ellipsis? q3d17@dots)) q3d14@ls/false)) (apply (lambda (q3d1e@x q3d1f@dots q3d20@ys q3d21@z) (call-with-values (lambda () (q3ceb@cvt q3d21@z q3ced@n q3cee@ids)) (lambda (q3d2a@q3d27 q3d2b@q3d29) (let ((q3d2e@ids q3d2b@q3d29) (q3d2f@z q3d2a@q3d27)) (call-with-values (lambda () (q3ce9@cvt* q3d20@ys q3ced@n q3d2e@ids)) (lambda (q3d36@q3d33 q3d37@q3d35) (let ((q3d3a@ids q3d37@q3d35) (q3d3b@ys q3d36@q3d33)) (call-with-values (lambda () (q3ceb@cvt q3d1e@x (+ q3ced@n '1) q3d3a@ids)) (lambda (q3d42@q3d3f q3d43@q3d41) (let ((q3d46@ids q3d43@q3d41) (q3d47@x q3d42@q3d3f)) (values (vector 'each+ q3d47@x (reverse q3d3b@ys) q3d2f@z) q3d46@ids))))))))))) q3d14@ls/false) (let ((q3d4a@t q3d12@t)) (let ((q3d4c@ls/false (q30c1@syntax-dispatch q3d4a@t '(any . any)))) (if q3d4c@ls/false (apply (lambda (q3d4e@x q3d4f@y) (call-with-values (lambda () (q3ceb@cvt q3d4f@y q3ced@n q3cee@ids)) (lambda (q3d56@q3d53 q3d57@q3d55) (let ((q3d5a@ids q3d57@q3d55) (q3d5b@y q3d56@q3d53)) (call-with-values (lambda () (q3ceb@cvt q3d4e@x q3ced@n q3d5a@ids)) (lambda (q3d62@q3d5f q3d63@q3d61) (let ((q3d66@ids q3d63@q3d61) (q3d67@x q3d62@q3d5f)) (values (cons q3d67@x q3d5b@y) q3d66@ids)))))))) q3d4c@ls/false) (let ((q3d6a@t q3d4a@t)) (let ((q3d6c@ls/false (q30c1@syntax-dispatch q3d6a@t '()))) (if q3d6c@ls/false (apply (lambda () (values '() q3cee@ids)) q3d6c@ls/false) (let ((q3d6e@t q3d6a@t)) (let ((q3d70@ls/false (q30c1@syntax-dispatch q3d6e@t '#(vector each-any)))) (if (and q3d70@ls/false (apply (lambda (q3d72@p) (not (q2e86@stx? q3d72@p))) q3d70@ls/false)) (apply (lambda (q3d74@p) (call-with-values (lambda () (q3ceb@cvt q3d74@p q3ced@n q3cee@ids)) (lambda (q3d7a@q3d77 q3d7b@q3d79) (let ((q3d7e@ids q3d7b@q3d79) (q3d7f@p q3d7a@q3d77)) (values (vector 'vector q3d7f@p) q3d7e@ids))))) q3d70@ls/false) (let ((q3d82@t q3d6e@t)) (let ((q3d84@ls/false (q30c1@syntax-dispatch q3d82@t 'any))) (if q3d84@ls/false (apply (lambda (q3d86@datum) (values (vector 'atom (q2ece@stx->datum q3d86@datum)) q3cee@ids)) q3d84@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3d82@t))))))))))))))))))))))))) (q3ceb@cvt q3ce4@pattern '0 '())))) (set! q4b96@q30bf@convert-pattern q30bf@convert-pattern) (set! q30c1@syntax-dispatch (letrec* ((q3da7@stx^ (lambda (q3e82@e q3e83@m* q3e84@s* q3e85@ae*) (if (and (null? q3e83@m*) (null? q3e84@s*) (null? q3e85@ae*)) q3e82@e (q2ea2@mkstx q3e82@e q3e83@m* q3e84@s* q3e85@ae*)))) (q3da9@match-each (lambda (q3e62@e q3e63@p q3e64@m* q3e65@s* q3e66@ae*) (if (pair? q3e62@e) (let ((q3e6c@first (q3db5@match (car q3e62@e) q3e63@p q3e64@m* q3e65@s* q3e66@ae* '()))) (and q3e6c@first (let ((q3e6e@rest (q3da9@match-each (cdr q3e62@e) q3e63@p q3e64@m* q3e65@s* q3e66@ae*))) (and q3e6e@rest (cons q3e6c@first q3e6e@rest))))) (if (null? q3e62@e) '() (if (q2e86@stx? q3e62@e) (and (not (q2e40@top-marked? q3e64@m*)) (call-with-values (lambda () (join-wraps q3e64@m* q3e65@s* q3e66@ae* q3e62@e)) (lambda (q3e76@q3e71 q3e77@q3e73 q3e78@q3e75) (let ((q3e7c@ae* q3e78@q3e75) (q3e7d@s* q3e77@q3e73) (q3e7e@m* q3e76@q3e71)) (q3da9@match-each (q2e88@stx-expr q3e62@e) q3e63@p q3e7e@m* q3e7d@s* q3e7c@ae*))))) (if (q29fe@q28d0@annotation? q3e62@e) (q3da9@match-each (q2a00@q28d4@annotation-expression q3e62@e) q3e63@p q3e64@m* q3e65@s* q3e66@ae*) '#f)))))) (q3dab@match-each+ (lambda (q3e22@e q3e23@x-pat q3e24@y-pat q3e25@z-pat q3e26@m* q3e27@s* q3e28@ae* q3e29@r) (let q3e3a@f ((q3e32@e q3e22@e) (q3e33@m* q3e26@m*) (q3e34@s* q3e27@s*) (q3e35@ae* q3e28@ae*)) (if (pair? q3e32@e) (call-with-values (lambda () (q3e3a@f (cdr q3e32@e) q3e33@m* q3e34@s* q3e35@ae*)) (lambda (q3e42@q3e3d q3e43@q3e3f q3e44@q3e41) (let ((q3e48@r q3e44@q3e41) (q3e49@y-pat q3e43@q3e3f) (q3e4a@xr* q3e42@q3e3d)) (if q3e48@r (if (null? q3e49@y-pat) (let ((q3e4e@xr (q3db5@match (car q3e32@e) q3e23@x-pat q3e33@m* q3e34@s* q3e35@ae* '()))) (if q3e4e@xr (values (cons q3e4e@xr q3e4a@xr*) q3e49@y-pat q3e48@r) (values '#f '#f '#f))) (values '() (cdr q3e49@y-pat) (q3db5@match (car q3e32@e) (car q3e49@y-pat) q3e33@m* q3e34@s* q3e35@ae* q3e48@r))) (values '#f '#f '#f))))) (if (q2e86@stx? q3e32@e) (if (q2e40@top-marked? q3e33@m*) (values '() q3e24@y-pat (q3db5@match q3e32@e q3e25@z-pat q3e33@m* q3e34@s* q3e35@ae* q3e29@r)) (call-with-values (lambda () (join-wraps q3e33@m* q3e34@s* q3e35@ae* q3e32@e)) (lambda (q3e56@q3e51 q3e57@q3e53 q3e58@q3e55) (let ((q3e5c@ae* q3e58@q3e55) (q3e5d@s* q3e57@q3e53) (q3e5e@m* q3e56@q3e51)) (q3e3a@f (q2e88@stx-expr q3e32@e) q3e5e@m* q3e5d@s* q3e5c@ae*))))) (if (q29fe@q28d0@annotation? q3e32@e) (q3e3a@f (q2a00@q28d4@annotation-expression q3e32@e) q3e33@m* q3e34@s* q3e35@ae*) (values '() q3e24@y-pat (q3db5@match q3e32@e q3e25@z-pat q3e33@m* q3e34@s* q3e35@ae* q3e29@r)))))))) (q3dad@match-each-any (lambda (q3e06@e q3e07@m* q3e08@s* q3e09@ae*) (if (pair? q3e06@e) (let ((q3e0e@l (q3dad@match-each-any (cdr q3e06@e) q3e07@m* q3e08@s* q3e09@ae*))) (and q3e0e@l (cons (q3da7@stx^ (car q3e06@e) q3e07@m* q3e08@s* q3e09@ae*) q3e0e@l))) (if (null? q3e06@e) '() (if (q2e86@stx? q3e06@e) (and (not (q2e40@top-marked? q3e07@m*)) (call-with-values (lambda () (join-wraps q3e07@m* q3e08@s* q3e09@ae* q3e06@e)) (lambda (q3e16@q3e11 q3e17@q3e13 q3e18@q3e15) (let ((q3e1c@ae* q3e18@q3e15) (q3e1d@s* q3e17@q3e13) (q3e1e@m* q3e16@q3e11)) (q3dad@match-each-any (q2e88@stx-expr q3e06@e) q3e1e@m* q3e1d@s* q3e1c@ae*))))) (if (q29fe@q28d0@annotation? q3e06@e) (q3dad@match-each-any (q2a00@q28d4@annotation-expression q3e06@e) q3e07@m* q3e08@s* q3e09@ae*) '#f)))))) (q3daf@match-empty (lambda (q3e00@p q3e01@r) (if (null? q3e00@p) q3e01@r (if (eq? q3e00@p '_) q3e01@r (if (eq? q3e00@p 'any) (cons '() q3e01@r) (if (pair? q3e00@p) (q3daf@match-empty (car q3e00@p) (q3daf@match-empty (cdr q3e00@p) q3e01@r)) (if (eq? q3e00@p 'each-any) (cons '() q3e01@r) (let ((q3e04@t (vector-ref q3e00@p '0))) (if (memv q3e04@t '(each)) (q3daf@match-empty (vector-ref q3e00@p '1) q3e01@r) (if (memv q3e04@t '(each+)) (q3daf@match-empty (vector-ref q3e00@p '1) (q3daf@match-empty (reverse (vector-ref q3e00@p '2)) (q3daf@match-empty (vector-ref q3e00@p '3) q3e01@r))) (if (memv q3e04@t '(free-id atom)) q3e01@r (if (memv q3e04@t '(scheme-id atom)) q3e01@r (if (memv q3e04@t '(vector)) (q3daf@match-empty (vector-ref q3e00@p '1) q3e01@r) (assertion-violation 'syntax-dispatch '"invalid pattern" q3e00@p)))))))))))))) (q3db1@combine (lambda (q3dfc@r* q3dfd@r) (if (null? (car q3dfc@r*)) q3dfd@r (cons (map car q3dfc@r*) (q3db1@combine (map cdr q3dfc@r*) q3dfd@r))))) (q3db3@match* (lambda (q3dd8@e q3dd9@p q3dda@m* q3ddb@s* q3ddc@ae* q3ddd@r) (if (null? q3dd9@p) (and (null? q3dd8@e) q3ddd@r) (if (pair? q3dd9@p) (and (pair? q3dd8@e) (q3db5@match (car q3dd8@e) (car q3dd9@p) q3dda@m* q3ddb@s* q3ddc@ae* (q3db5@match (cdr q3dd8@e) (cdr q3dd9@p) q3dda@m* q3ddb@s* q3ddc@ae* q3ddd@r))) (if (eq? q3dd9@p 'each-any) (let ((q3de4@l (q3dad@match-each-any q3dd8@e q3dda@m* q3ddb@s* q3ddc@ae*))) (and q3de4@l (cons q3de4@l q3ddd@r))) (let ((q3de6@t (vector-ref q3dd9@p '0))) (if (memv q3de6@t '(each)) (if (null? q3dd8@e) (q3daf@match-empty (vector-ref q3dd9@p '1) q3ddd@r) (let ((q3de8@r* (q3da9@match-each q3dd8@e (vector-ref q3dd9@p '1) q3dda@m* q3ddb@s* q3ddc@ae*))) (and q3de8@r* (q3db1@combine q3de8@r* q3ddd@r)))) (if (memv q3de6@t '(free-id)) (and (symbol? q3dd8@e) (q2e40@top-marked? q3dda@m*) (q2ec0@free-id=? (q3da7@stx^ q3dd8@e q3dda@m* q3ddb@s* q3ddc@ae*) (vector-ref q3dd9@p '1)) q3ddd@r) (if (memv q3de6@t '(scheme-id)) (and (symbol? q3dd8@e) (q2e40@top-marked? q3dda@m*) (q2ec0@free-id=? (q3da7@stx^ q3dd8@e q3dda@m* q3ddb@s* q3ddc@ae*) (q3049@scheme-stx (vector-ref q3dd9@p '1))) q3ddd@r) (if (memv q3de6@t '(each+)) (call-with-values (lambda () (q3dab@match-each+ q3dd8@e (vector-ref q3dd9@p '1) (vector-ref q3dd9@p '2) (vector-ref q3dd9@p '3) q3dda@m* q3ddb@s* q3ddc@ae* q3ddd@r)) (lambda (q3df0@q3deb q3df1@q3ded q3df2@q3def) (let ((q3df6@r q3df2@q3def) (q3df7@y-pat q3df1@q3ded) (q3df8@xr* q3df0@q3deb)) (and q3df6@r (null? q3df7@y-pat) (if (null? q3df8@xr*) (q3daf@match-empty (vector-ref q3dd9@p '1) q3df6@r) (q3db1@combine q3df8@xr* q3df6@r)))))) (if (memv q3de6@t '(atom)) (and (fast-equal? (vector-ref q3dd9@p '1) (q2ecc@strip q3dd8@e q3dda@m*)) q3ddd@r) (if (memv q3de6@t '(vector)) (and (vector? q3dd8@e) (q3db5@match (vector->list q3dd8@e) (vector-ref q3dd9@p '1) q3dda@m* q3ddb@s* q3ddc@ae* q3ddd@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" q3dd9@p))))))))))))) (q3db5@match (lambda (q3dba@e q3dbb@p q3dbc@m* q3dbd@s* q3dbe@ae* q3dbf@r) (if (not q3dbf@r) '#f (if (eq? q3dbb@p '_) q3dbf@r (if (eq? q3dbb@p 'any) (cons (q3da7@stx^ q3dba@e q3dbc@m* q3dbd@s* q3dbe@ae*) q3dbf@r) (if (q2e86@stx? q3dba@e) (and (not (q2e40@top-marked? q3dbc@m*)) (call-with-values (lambda () (join-wraps q3dbc@m* q3dbd@s* q3dbe@ae* q3dba@e)) (lambda (q3dcc@q3dc7 q3dcd@q3dc9 q3dce@q3dcb) (let ((q3dd2@ae* q3dce@q3dcb) (q3dd3@s* q3dcd@q3dc9) (q3dd4@m* q3dcc@q3dc7)) (q3db5@match (q2e88@stx-expr q3dba@e) q3dbb@p q3dd4@m* q3dd3@s* q3dd2@ae* q3dbf@r))))) (if (q29fe@q28d0@annotation? q3dba@e) (q3db5@match (q2a00@q28d4@annotation-expression q3dba@e) q3dbb@p q3dbc@m* q3dbd@s* q3dbe@ae* q3dbf@r) (q3db3@match* q3dba@e q3dbb@p q3dbc@m* q3dbd@s* q3dbe@ae* q3dbf@r))))))))) (lambda (q3db6@e q3db7@p) (q3db5@match q3db6@e q3db7@p '() '() '() '())))) (set! q4b97@q30c1@syntax-dispatch q30c1@syntax-dispatch) (set! q30c3@ellipsis? (lambda (q3e8a@x) (and (q2eba@id? q3e8a@x) (q2ec0@free-id=? q3e8a@x (q3049@scheme-stx '...))))) (set! q4b98@q30c3@ellipsis? q30c3@ellipsis?) (set! q30c5@underscore? (lambda (q3e8c@x) (and (q2eba@id? q3e8c@x) (q2ec0@free-id=? q3e8c@x (q3049@scheme-stx '_))))) (set! q4b99@q30c5@underscore? q30c5@underscore?) (set! q30c7@verify-literals (lambda (q3e8e@lits q3e8f@expr) (for-each (lambda (q3e92@x) (if (or (not (q2eba@id? q3e92@x)) (q30c3@ellipsis? q3e92@x) (q30c5@underscore? q3e92@x)) (q31a1@syntax-violation '#f '"invalid literal" q3e8f@expr q3e92@x) (void))) q3e8e@lits))) (set! q4b9a@q30c7@verify-literals q30c7@verify-literals) (set! q30c9@syntax-case-transformer (letrec* ((q3e95@build-dispatch-call (lambda (q3f06@pvars q3f07@expr q3f08@y q3f09@r q3f0a@mr) (let ((q3f10@ids (map car q3f06@pvars)) (q3f11@levels (map cdr q3f06@pvars))) (let ((q3f14@labels (map q2e46@gen-label q3f10@ids)) (q3f15@new-vars (map q2e42@gen-lexical q3f10@ids))) (let ((q3f18@body (q30e3@chi-expr (q2ea6@add-subst (q2e7a@make-full-rib q3f10@ids q3f14@labels) q3f07@expr) (append (map (lambda (q3f1a@label q3f1b@var q3f1c@level) (cons q3f1a@label (q2ed4@make-binding 'syntax (cons q3f1b@var q3f1c@level)))) q3f14@labels q3f15@new-vars (map cdr q3f06@pvars)) q3f09@r) q3f0a@mr))) (list '(primitive apply) (q2e1d@q2d4f@build-lambda '#f q3f15@new-vars q3f18@body) q3f08@y)))))) (q3e97@invalid-ids-error (lambda (q3efa@id* q3efb@e q3efc@class) (let q3f04@find ((q3f00@id* q3efa@id*) (q3f01@ok* '())) (if (null? q3f00@id*) (q31a1@syntax-violation '#f '"invalid syntax" q3efb@e) (if (q2eba@id? (car q3f00@id*)) (if (q2ec6@bound-id-member? (car q3f00@id*) q3f01@ok*) (q319d@syntax-error (car q3f00@id*) '"duplicate " q3efc@class) (q3f04@find (cdr q3f00@id*) (cons (car q3f00@id*) q3f01@ok*))) (q319d@syntax-error (car q3f00@id*) '"invalid " q3efc@class)))))) (q3e99@gen-clause (lambda (q3ed2@x q3ed3@keys q3ed4@clauses q3ed5@r q3ed6@mr q3ed7@pat q3ed8@fender q3ed9@expr) (call-with-values (lambda () (q30bf@convert-pattern q3ed7@pat q3ed3@keys)) (lambda (q3ee6@q3ee3 q3ee7@q3ee5) (let ((q3eea@pvars q3ee7@q3ee5) (q3eeb@p q3ee6@q3ee3)) (if (not (q2ec4@distinct-bound-ids? (map car q3eea@pvars))) (q3e97@invalid-ids-error (map car q3eea@pvars) q3ed7@pat '"pattern variable") (if (not (for-all (lambda (q3eee@x) (not (q30c3@ellipsis? (car q3eee@x)))) q3eea@pvars)) (q31a1@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" q3ed7@pat) (let ((q3ef0@y (q2e42@gen-lexical 'tmp))) (let ((q3ef2@test (if (eq? q3ed8@fender '#t) q3ef0@y (let ((q3ef4@call (q3e95@build-dispatch-call q3eea@pvars q3ed8@fender q3ef0@y q3ed5@r q3ed6@mr))) (list 'if q3ef0@y q3ef4@call (list 'quote '#f)))))) (let ((q3ef6@conseq (q3e95@build-dispatch-call q3eea@pvars q3ed9@expr q3ef0@y q3ed5@r q3ed6@mr))) (let ((q3ef8@altern (q3e9b@gen-syntax-case q3ed2@x q3ed3@keys q3ed4@clauses q3ed5@r q3ed6@mr))) (list (q2e1d@q2d4f@build-lambda '#f (list q3ef0@y) (list 'if q3ef2@test q3ef6@conseq q3ef8@altern)) (list '(primitive syntax-dispatch) q3ed2@x (list 'quote q3eeb@p)))))))))))))) (q3e9b@gen-syntax-case (lambda (q3eb0@x q3eb1@keys q3eb2@clauses q3eb3@r q3eb4@mr) (if (null? q3eb2@clauses) (list '(primitive syntax-error) q3eb0@x) (let ((q3eba@t (car q3eb2@clauses))) (let ((q3ebc@ls/false (q30c1@syntax-dispatch q3eba@t '(any any)))) (if q3ebc@ls/false (apply (lambda (q3ebe@pat q3ebf@expr) (if (and (q2eba@id? q3ebe@pat) (not (q2ec6@bound-id-member? q3ebe@pat q3eb1@keys)) (not (q30c3@ellipsis? q3ebe@pat))) (if (q2ec0@free-id=? q3ebe@pat (q3049@scheme-stx '_)) (q30e3@chi-expr q3ebf@expr q3eb3@r q3eb4@mr) (let ((q3ec2@lab (q2e46@gen-label q3ebe@pat)) (q3ec3@lex (q2e42@gen-lexical q3ebe@pat))) (let ((q3ec6@body (q30e3@chi-expr (q2ea6@add-subst (q2e7a@make-full-rib (list q3ebe@pat) (list q3ec2@lab)) q3ebf@expr) (cons (cons q3ec2@lab (q2ed4@make-binding 'syntax (cons q3ec3@lex '0))) q3eb3@r) q3eb4@mr))) (list (q2e1d@q2d4f@build-lambda '#f (list q3ec3@lex) q3ec6@body) q3eb0@x)))) (q3e99@gen-clause q3eb0@x q3eb1@keys (cdr q3eb2@clauses) q3eb3@r q3eb4@mr q3ebe@pat '#t q3ebf@expr))) q3ebc@ls/false) (let ((q3ec8@t q3eba@t)) (let ((q3eca@ls/false (q30c1@syntax-dispatch q3ec8@t '(any any any)))) (if q3eca@ls/false (apply (lambda (q3ecc@pat q3ecd@fender q3ece@expr) (q3e99@gen-clause q3eb0@x q3eb1@keys (cdr q3eb2@clauses) q3eb3@r q3eb4@mr q3ecc@pat q3ecd@fender q3ece@expr)) q3eca@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3ec8@t))))))))))) (lambda (q3e9c@e q3e9d@r q3e9e@mr) (let ((q3ea2@t q3e9c@e)) (let ((q3ea4@ls/false (q30c1@syntax-dispatch q3ea2@t '(_ any each-any . each-any)))) (if q3ea4@ls/false (apply (lambda (q3ea6@expr q3ea7@keys q3ea8@clauses) (begin (q30c7@verify-literals q3ea7@keys q3e9c@e) (let ((q3eac@x (q2e42@gen-lexical 'tmp))) (let ((q3eae@body (q3e9b@gen-syntax-case q3eac@x q3ea7@keys q3ea8@clauses q3e9d@r q3e9e@mr))) (list (q2e1d@q2d4f@build-lambda '#f (list q3eac@x) q3eae@body) (q30e3@chi-expr q3ea6@expr q3e9d@r q3e9e@mr)))))) q3ea4@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3ea2@t))))))) (set! q4b9b@q30c9@syntax-case-transformer q30c9@syntax-case-transformer) (set! q30cb@ellipsis-map (lambda (q3f20@proc q3f21@ls . q3f24@ls*) (letrec* ((q3f27@who '...)) (begin (if (not (list? q3f21@ls)) (assertion-violation q3f27@who '"not a list" q3f21@ls) (void)) (if (not (null? q3f24@ls*)) (let ((q3f28@n (length q3f21@ls))) (for-each (lambda (q3f2a@x) (begin (if (not (list? q3f2a@x)) (assertion-violation q3f27@who '"not a list" q3f2a@x) (void)) (if (not (= (length q3f2a@x) q3f28@n)) (assertion-violation q3f27@who '"length mismatch" q3f21@ls q3f2a@x) (void)))) q3f24@ls*)) (void)) (apply map q3f20@proc q3f21@ls q3f24@ls*))))) (set! q4b9c@q30cb@ellipsis-map q30cb@ellipsis-map) (set! q30cd@syntax-transformer (letrec* ((q3f2d@gen-syntax (lambda (q3fa4@src q3fa5@e q3fa6@r q3fa7@maps q3fa8@ellipsis? q3fa9@vec?) (let ((q3fb0@t q3fa5@e)) (let ((q3fb2@ls/false (q30c1@syntax-dispatch q3fb0@t 'any))) (if (and q3fb2@ls/false (apply (lambda (q3fb4@dots) (q3fa8@ellipsis? q3fb4@dots)) q3fb2@ls/false)) (apply (lambda (q3fb6@dots) (q31a1@syntax-violation '#f '"misplaced ellipsis in syntax form" q3fa4@src)) q3fb2@ls/false) (let ((q3fb8@t q3fb0@t)) (let ((q3fba@ls/false (q30c1@syntax-dispatch q3fb8@t 'any))) (if (and q3fba@ls/false (apply (lambda (q3fbc@id) (q2eba@id? q3fbc@id)) q3fba@ls/false)) (apply (lambda (q3fbe@id) (let ((q3fc0@label (q2ed0@id->label q3fa5@e))) (let ((q3fc2@b (q2ed2@label->binding q3fc0@label q3fa6@r))) (if (eq? (q2ed6@binding-type q3fc2@b) 'syntax) (call-with-values (lambda () (let ((q3fc8@var.lev (q2ed8@binding-value q3fc2@b))) (q3f2f@gen-ref q3fa4@src (car q3fc8@var.lev) (cdr q3fc8@var.lev) q3fa7@maps))) (lambda (q3fca@q3fc5 q3fcb@q3fc7) (let ((q3fce@maps q3fcb@q3fc7) (q3fcf@var q3fca@q3fc5)) (values (list 'ref q3fcf@var) q3fce@maps)))) (values (list 'quote q3fa5@e) q3fa7@maps))))) q3fba@ls/false) (let ((q3fd2@t q3fb8@t)) (let ((q3fd4@ls/false (q30c1@syntax-dispatch q3fd2@t '(any any)))) (if (and q3fd4@ls/false (apply (lambda (q3fd6@dots q3fd7@e) (q3fa8@ellipsis? q3fd6@dots)) q3fd4@ls/false)) (apply (lambda (q3fda@dots q3fdb@e) (if q3fa9@vec? (q31a1@syntax-violation '#f '"misplaced ellipsis in syntax form" q3fa4@src) (q3f2d@gen-syntax q3fa4@src q3fdb@e q3fa6@r q3fa7@maps (lambda (q3fde@x) '#f) '#f))) q3fd4@ls/false) (let ((q3fe0@t q3fd2@t)) (let ((q3fe2@ls/false (q30c1@syntax-dispatch q3fe0@t '(any any . any)))) (if (and q3fe2@ls/false (apply (lambda (q3fe4@x q3fe5@dots q3fe6@y) (q3fa8@ellipsis? q3fe5@dots)) q3fe2@ls/false)) (apply (lambda (q3fea@x q3feb@dots q3fec@y) (let q4002@f ((q3ff0@y q3fec@y) (q3ff1@k (lambda (q3ff4@maps) (call-with-values (lambda () (q3f2d@gen-syntax q3fa4@src q3fea@x q3fa6@r (cons '() q3ff4@maps) q3fa8@ellipsis? '#f)) (lambda (q3ffa@q3ff7 q3ffb@q3ff9) (let ((q3ffe@maps q3ffb@q3ff9) (q3fff@x q3ffa@q3ff7)) (if (null? (car q3ffe@maps)) (q31a1@syntax-violation '#f '"extra ellipsis in syntax form" q3fa4@src) (values (q3f35@gen-map q3fff@x (car q3ffe@maps)) (cdr q3ffe@maps))))))))) (let ((q4004@t q3ff0@y)) (let ((q4006@ls/false (q30c1@syntax-dispatch q4004@t '()))) (if q4006@ls/false (apply (lambda () (q3ff1@k q3fa7@maps)) q4006@ls/false) (let ((q4008@t q4004@t)) (let ((q400a@ls/false (q30c1@syntax-dispatch q4008@t '(any . any)))) (if (and q400a@ls/false (apply (lambda (q400c@dots q400d@y) (q3fa8@ellipsis? q400c@dots)) q400a@ls/false)) (apply (lambda (q4010@dots q4011@y) (q4002@f q4011@y (lambda (q4014@maps) (call-with-values (lambda () (q3ff1@k (cons '() q4014@maps))) (lambda (q401a@q4017 q401b@q4019) (let ((q401e@maps q401b@q4019) (q401f@x q401a@q4017)) (if (null? (car q401e@maps)) (q31a1@syntax-violation '#f '"extra ellipsis in syntax form" q3fa4@src) (values (q3f33@gen-mappend q401f@x (car q401e@maps)) (cdr q401e@maps))))))))) q400a@ls/false) (let ((q4022@t q4008@t)) (let ((q4024@ls/false (q30c1@syntax-dispatch q4022@t '_))) (if q4024@ls/false (apply (lambda () (call-with-values (lambda () (q3f2d@gen-syntax q3fa4@src q3ff0@y q3fa6@r q3fa7@maps q3fa8@ellipsis? q3fa9@vec?)) (lambda (q402a@q4027 q402b@q4029) (let ((q402e@maps q402b@q4029) (q402f@y q402a@q4027)) (call-with-values (lambda () (q3ff1@k q402e@maps)) (lambda (q4036@q4033 q4037@q4035) (let ((q403a@maps q4037@q4035) (q403b@x q4036@q4033)) (values (q3f31@gen-append q403b@x q402f@y) q403a@maps)))))))) q4024@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4022@t)))))))))))) q3fe2@ls/false) (let ((q403e@t q3fe0@t)) (let ((q4040@ls/false (q30c1@syntax-dispatch q403e@t '(any . any)))) (if q4040@ls/false (apply (lambda (q4042@x q4043@y) (call-with-values (lambda () (q3f2d@gen-syntax q3fa4@src q4042@x q3fa6@r q3fa7@maps q3fa8@ellipsis? '#f)) (lambda (q404a@q4047 q404b@q4049) (let ((q404e@maps q404b@q4049) (q404f@xnew q404a@q4047)) (call-with-values (lambda () (q3f2d@gen-syntax q3fa4@src q4043@y q3fa6@r q404e@maps q3fa8@ellipsis? q3fa9@vec?)) (lambda (q4056@q4053 q4057@q4055) (let ((q405a@maps q4057@q4055) (q405b@ynew q4056@q4053)) (values (q3f37@gen-cons q3fa5@e q4042@x q4043@y q404f@xnew q405b@ynew) q405a@maps)))))))) q4040@ls/false) (let ((q405e@t q403e@t)) (let ((q4060@ls/false (q30c1@syntax-dispatch q405e@t '#(vector each-any)))) (if q4060@ls/false (apply (lambda (q4062@ls) (call-with-values (lambda () (q3f2d@gen-syntax q3fa4@src q4062@ls q3fa6@r q3fa7@maps q3fa8@ellipsis? '#t)) (lambda (q4068@q4065 q4069@q4067) (let ((q406c@maps q4069@q4067) (q406d@lsnew q4068@q4065)) (values (q3f39@gen-vector q3fa5@e q4062@ls q406d@lsnew) q406c@maps))))) q4060@ls/false) (let ((q4070@t q405e@t)) (let ((q4072@ls/false (q30c1@syntax-dispatch q4070@t '_))) (if q4072@ls/false (apply (lambda () (values (list 'quote q3fa5@e) q3fa7@maps)) q4072@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4070@t)))))))))))))))))))))))) (q3f2f@gen-ref (lambda (q3f8a@src q3f8b@var q3f8c@level q3f8d@maps) (if (= q3f8c@level '0) (values q3f8b@var q3f8d@maps) (if (null? q3f8d@maps) (q31a1@syntax-violation '#f '"missing ellipsis in syntax form" q3f8a@src) (call-with-values (lambda () (q3f2f@gen-ref q3f8a@src q3f8b@var (- q3f8c@level '1) (cdr q3f8d@maps))) (lambda (q3f96@q3f93 q3f97@q3f95) (let ((q3f9a@outer-maps q3f97@q3f95) (q3f9b@outer-var q3f96@q3f93)) (let ((q3f9e@t (assq q3f9b@outer-var (car q3f8d@maps)))) (if q3f9e@t ((lambda (q3fa0@b) (values (cdr q3fa0@b) q3f8d@maps)) q3f9e@t) (let ((q3fa2@inner-var (q2e42@gen-lexical 'tmp))) (values q3fa2@inner-var (cons (cons (cons q3f9b@outer-var q3fa2@inner-var) (car q3f8d@maps)) q3f9a@outer-maps)))))))))))) (q3f31@gen-append (lambda (q3f86@x q3f87@y) (if (fast-equal? q3f87@y ''()) q3f86@x (list 'append q3f86@x q3f87@y)))) (q3f33@gen-mappend (lambda (q3f82@e q3f83@map-env) (list 'apply '(primitive append) (q3f35@gen-map q3f82@e q3f83@map-env)))) (q3f35@gen-map (lambda (q3f70@e q3f71@map-env) (let ((q3f74@formals (map cdr q3f71@map-env)) (q3f75@actuals (map (lambda (q3f78@x) (list 'ref (car q3f78@x))) q3f71@map-env))) (if (eq? (car q3f70@e) 'ref) (car q3f75@actuals) (if (for-all (lambda (q3f7a@x) (and (eq? (car q3f7a@x) 'ref) (memq (cadr q3f7a@x) q3f74@formals))) (cdr q3f70@e)) (let ((q3f7c@args (map (let ((q3f7e@r (map cons q3f74@formals q3f75@actuals))) (lambda (q3f80@x) (cdr (assq (cadr q3f80@x) q3f7e@r)))) (cdr q3f70@e)))) (cons 'map (cons (list 'primitive (car q3f70@e)) q3f7c@args))) (cons* 'map (list 'lambda q3f74@formals q3f70@e) q3f75@actuals)))))) (q3f37@gen-cons (lambda (q3f60@e q3f61@x q3f62@y q3f63@xnew q3f64@ynew) (let ((q3f6a@t (car q3f64@ynew))) (if (memv q3f6a@t '(quote)) (if (eq? (car q3f63@xnew) 'quote) (let ((q3f6c@xnew (cadr q3f63@xnew)) (q3f6d@ynew (cadr q3f64@ynew))) (if (and (eq? q3f6c@xnew q3f61@x) (eq? q3f6d@ynew q3f62@y)) (list 'quote q3f60@e) (list 'quote (cons q3f6c@xnew q3f6d@ynew)))) (if (null? (cadr q3f64@ynew)) (list 'list q3f63@xnew) (list 'cons q3f63@xnew q3f64@ynew))) (if (memv q3f6a@t '(list)) (cons 'list (cons q3f63@xnew (cdr q3f64@ynew))) (list 'cons q3f63@xnew q3f64@ynew)))))) (q3f39@gen-vector (lambda (q3f5a@e q3f5b@ls q3f5c@lsnew) (if (eq? (car q3f5c@lsnew) 'quote) (if (eq? (cadr q3f5c@lsnew) q3f5b@ls) (list 'quote q3f5a@e) (list 'quote (list->vector (cadr q3f5c@lsnew)))) (if (eq? (car q3f5c@lsnew) 'list) (cons 'vector (cdr q3f5c@lsnew)) (list 'list->vector q3f5c@lsnew))))) (q3f3b@regen (lambda (q3f54@x) (let ((q3f56@t (car q3f54@x))) (if (memv q3f56@t '(ref)) (cadr q3f54@x) (if (memv q3f56@t '(primitive)) (list 'primitive (cadr q3f54@x)) (if (memv q3f56@t '(quote)) (list 'quote (cadr q3f54@x)) (if (memv q3f56@t '(lambda)) (q2e1d@q2d4f@build-lambda '#f (cadr q3f54@x) (q3f3b@regen (caddr q3f54@x))) (if (memv q3f56@t '(map)) (let ((q3f58@ls (map q3f3b@regen (cdr q3f54@x)))) (cons '(primitive ellipsis-map) q3f58@ls)) (cons (list 'primitive (car q3f54@x)) (map q3f3b@regen (cdr q3f54@x)))))))))))) (lambda (q3f3c@e q3f3d@r q3f3e@mr) (let ((q3f42@t q3f3c@e)) (let ((q3f44@ls/false (q30c1@syntax-dispatch q3f42@t '(_ any)))) (if q3f44@ls/false (apply (lambda (q3f46@x) (call-with-values (lambda () (q3f2d@gen-syntax q3f3c@e q3f46@x q3f3d@r '() q30c3@ellipsis? '#f)) (lambda (q3f4c@q3f49 q3f4d@q3f4b) (let ((q3f50@maps q3f4d@q3f4b) (q3f51@e q3f4c@q3f49)) (q3f3b@regen q3f51@e))))) q3f44@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q3f42@t))))))) (set! q4b9d@q30cd@syntax-transformer q30cd@syntax-transformer) (set! q30cf@core-macro-transformer (lambda (q4074@name) (let ((q4076@t q4074@name)) (if (memv q4076@t '(quote)) q3071@quote-transformer (if (memv q4076@t '(lambda)) q3075@lambda-transformer (if (memv q4076@t '(case-lambda)) q3073@case-lambda-transformer (if (memv q4076@t '(letrec)) q3059@letrec-transformer (if (memv q4076@t '(letrec*)) q305b@letrec*-transformer (if (memv q4076@t '(let)) q3057@let-transformer (if (memv q4076@t '(if)) q3069@if-transformer (if (memv q4076@t '(and)) q306b@and-transformer (if (memv q4076@t '(or)) q306d@or-transformer (if (memv q4076@t '(foreign-call)) q30bd@foreign-call-transformer (if (memv q4076@t '(syntax-case)) q30c9@syntax-case-transformer (if (memv q4076@t '(syntax)) q30cd@syntax-transformer (if (memv q4076@t '(type-descriptor)) q305f@type-descriptor-transformer (if (memv q4076@t '(record-type-descriptor)) q3061@record-type-descriptor-transformer (if (memv q4076@t '(record-constructor-descriptor)) q3063@record-constructor-descriptor-transformer (if (memv q4076@t '(fluid-let-syntax)) q305d@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" q4074@name)))))))))))))))))))) (set! q4b9e@q30cf@core-macro-transformer q30cf@core-macro-transformer) (set! q30d1@symbol-macro (lambda (q4078@x q4079@set) (let ((q407c@t q4078@x)) (let ((q407e@ls/false (q30c1@syntax-dispatch q407c@t '(_ any)))) (if (and q407e@ls/false (apply (lambda (q4080@name) (and (q2eba@id? q4080@name) (memq (q2ebc@id->sym q4080@name) q4079@set))) q407e@ls/false)) (apply (lambda (q4082@name) (q3077@bless (list 'quote q4082@name))) q407e@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q407c@t)))))) (set! q4b9f@q30d1@symbol-macro q30d1@symbol-macro) (set! q30d3@macro-transformer (lambda (q4084@x) (if (procedure? q4084@x) q4084@x (if (symbol? q4084@x) (let ((q4086@t q4084@x)) (if (memv q4086@t '(define-record-type)) q30b5@define-record-type-macro (if (memv q4086@t '(define-struct)) q30b3@define-struct-macro (if (memv q4086@t '(include)) q30a9@include-macro (if (memv q4086@t '(cond)) q30a5@cond-macro (if (memv q4086@t '(let)) q307d@let-macro (if (memv q4086@t '(do)) q309d@do-macro (if (memv q4086@t '(or)) q30a1@or-macro (if (memv q4086@t '(and)) q30a3@and-macro (if (memv q4086@t '(let*)) q309f@let*-macro (if (memv q4086@t '(let-values)) q307f@let-values-macro (if (memv q4086@t '(let*-values)) q3081@let*-values-macro (if (memv q4086@t '(syntax-rules)) q30ad@syntax-rules-macro (if (memv q4086@t '(quasiquote)) q30af@quasiquote-macro (if (memv q4086@t '(quasisyntax)) q30b1@quasisyntax-macro (if (memv q4086@t '(with-syntax)) q3079@with-syntax-macro (if (memv q4086@t '(when)) q3065@when-macro (if (memv q4086@t '(unless)) q3067@unless-macro (if (memv q4086@t '(case)) q306f@case-macro (if (memv q4086@t '(identifier-syntax)) q309b@identifier-syntax-macro (if (memv q4086@t '(time)) q3093@time-macro (if (memv q4086@t '(delay)) q3095@delay-macro (if (memv q4086@t '(assert)) q3097@assert-macro (if (memv q4086@t '(endianness)) q3099@endianness-macro (if (memv q4086@t '(guard)) q308f@guard-macro (if (memv q4086@t '(define-enumeration)) q3091@define-enumeration-macro (if (memv q4086@t '(trace-lambda)) q3083@trace-lambda-macro (if (memv q4086@t '(trace-define)) q3085@trace-define-macro (if (memv q4086@t '(trace-define-syntax)) q3087@trace-define-syntax-macro (if (memv q4086@t '(trace-let-syntax)) q308b@trace-let-syntax-macro (if (memv q4086@t '(trace-letrec-syntax)) q308d@trace-letrec-syntax-macro (if (memv q4086@t '(define-condition-type)) q30b7@define-condition-type-macro (if (memv q4086@t '(parameterize)) q30bb@parameterize-macro (if (memv q4086@t '(include-into)) q30ab@include-into-macro (if (memv q4086@t '(eol-style)) (lambda (q4088@x) (q30d1@symbol-macro q4088@x '(none lf cr crlf nel crnel ls))) (if (memv q4086@t '(error-handling-mode)) (lambda (q408a@x) (q30d1@symbol-macro q408a@x '(ignore raise replace))) (if (memv q4086@t '(buffer-mode)) (lambda (q408c@x) (q30d1@symbol-macro q408c@x '(none line block))) (if (memv q4086@t '(file-options)) q2e35@file-options-macro (if (memv q4086@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) q30b9@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" q4084@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" q4084@x))))) (set! q4ba0@q30d3@macro-transformer q30d3@macro-transformer) (set! q30d5@local-macro-transformer (lambda (q408e@x) (car q408e@x))) (set! q4ba1@q30d5@local-macro-transformer q30d5@local-macro-transformer) (set! q30d7@do-macro-call (lambda (q4090@transformer q4091@expr) (let ((q4094@out (q4090@transformer (q2ea4@add-mark q2e9e@anti-mark q4091@expr '#f)))) (begin (let q4098@f ((q4096@x q4094@out)) (if (not (q2e86@stx? q4096@x)) (if (pair? q4096@x) (begin (q4098@f (car q4096@x)) (q4098@f (cdr q4096@x))) (if (vector? q4096@x) (vector-for-each q4098@f q4096@x) (if (symbol? q4096@x) (q31a1@syntax-violation '#f '"raw symbol encountered in output of macro" q4091@expr q4096@x) (void)))) (void))) (q2ea4@add-mark (q2e9c@gen-mark) q4094@out q4091@expr))))) (set! q4ba2@q30d7@do-macro-call q30d7@do-macro-call) (set! q30d9@chi-macro (lambda (q409a@p q409b@e) (q30d7@do-macro-call (q30d3@macro-transformer q409a@p) q409b@e))) (set! q4ba3@q30d9@chi-macro q30d9@chi-macro) (set! q30db@chi-local-macro (lambda (q409e@p q409f@e) (q30d7@do-macro-call (q30d5@local-macro-transformer q409e@p) q409f@e))) (set! q4ba4@q30db@chi-local-macro q30db@chi-local-macro) (set! q30dd@chi-global-macro (lambda (q40a2@p q40a3@e) (let ((q40a6@lib (car q40a2@p)) (q40a7@loc (cdr q40a2@p))) (begin (q2cd7@q2b26@visit-library q40a6@lib) (let ((q40aa@x (symbol-value q40a7@loc))) (let ((q40ac@transformer (if (procedure? q40aa@x) q40aa@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" q40aa@x)))) (q30d7@do-macro-call q40ac@transformer q40a3@e))))))) (set! q4ba5@q30dd@chi-global-macro q30dd@chi-global-macro) (set! q30df@chi-expr* (lambda (q40ae@e* q40af@r q40b0@mr) (if (null? q40ae@e*) '() (let ((q40b4@e (q30e3@chi-expr (car q40ae@e*) q40af@r q40b0@mr))) (cons q40b4@e (q30df@chi-expr* (cdr q40ae@e*) q40af@r q40b0@mr)))))) (set! q4ba6@q30df@chi-expr* q30df@chi-expr*) (set! q30e1@chi-application (lambda (q40b6@e q40b7@r q40b8@mr) (let ((q40bc@t q40b6@e)) (let ((q40be@ls/false (q30c1@syntax-dispatch q40bc@t '(any . each-any)))) (if q40be@ls/false (apply (lambda (q40c0@rator q40c1@rands) (let ((q40c4@rator (q30e3@chi-expr q40c0@rator q40b7@r q40b8@mr))) (cons q40c4@rator (q30df@chi-expr* q40c1@rands q40b7@r q40b8@mr)))) q40be@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q40bc@t)))))) (set! q4ba7@q30e1@chi-application q30e1@chi-application) (set! q30e3@chi-expr (lambda (q40c6@e q40c7@r q40c8@mr) (call-with-values (lambda () (q2edc@syntax-type q40c6@e q40c7@r)) (lambda (q40d2@q40cd q40d3@q40cf q40d4@q40d1) (let ((q40d8@kwd q40d4@q40d1) (q40d9@value q40d3@q40cf) (q40da@type q40d2@q40cd)) (let ((q40de@t q40da@type)) (if (memv q40de@t '(core-macro)) (let ((q40e0@transformer (q30cf@core-macro-transformer q40d9@value))) (q40e0@transformer q40c6@e q40c7@r q40c8@mr)) (if (memv q40de@t '(global)) (let ((q40e2@lib (car q40d9@value))) (let ((q40e4@loc (cdr q40d9@value))) (begin ((q3129@inv-collector) q40e2@lib) q40e4@loc))) (if (memv q40de@t '(core-prim)) (let ((q40e6@name q40d9@value)) (list 'primitive q40e6@name)) (if (memv q40de@t '(call)) (q30e1@chi-application q40c6@e q40c7@r q40c8@mr) (if (memv q40de@t '(lexical)) (let ((q40e8@lex (q304b@lexical-var q40d9@value))) q40e8@lex) (if (memv q40de@t '(global-macro global-macro!)) (q30e3@chi-expr (q30dd@chi-global-macro q40d9@value q40c6@e) q40c7@r q40c8@mr) (if (memv q40de@t '(local-macro local-macro!)) (q30e3@chi-expr (q30db@chi-local-macro q40d9@value q40c6@e) q40c7@r q40c8@mr) (if (memv q40de@t '(macro macro!)) (q30e3@chi-expr (q30d9@chi-macro q40d9@value q40c6@e) q40c7@r q40c8@mr) (if (memv q40de@t '(constant)) (let ((q40ea@datum q40d9@value)) (list 'quote q40ea@datum)) (if (memv q40de@t '(set!)) (q30e5@chi-set! q40c6@e q40c7@r q40c8@mr) (if (memv q40de@t '(begin)) (let ((q40ec@t q40c6@e)) (let ((q40ee@ls/false (q30c1@syntax-dispatch q40ec@t '(_ any . each-any)))) (if q40ee@ls/false (apply (lambda (q40f0@x q40f1@x*) (q2e1f@q2d7f@build-sequence '#f (q30df@chi-expr* (cons q40f0@x q40f1@x*) q40c7@r q40c8@mr))) q40ee@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q40ec@t)))) (if (memv q40de@t '(let-syntax letrec-syntax)) (let ((q40f4@t q40c6@e)) (let ((q40f6@ls/false (q30c1@syntax-dispatch q40f4@t '(_ #(each (any any)) any . each-any)))) (if (and q40f6@ls/false (apply (lambda (q40f8@xlhs* q40f9@xrhs* q40fa@xbody q40fb@xbody*) (if (not (q2ec2@valid-bound-ids? q40f8@xlhs*)) (q31a1@syntax-violation '#f '"invalid identifiers" q40c6@e) (void))) q40f6@ls/false)) (apply (lambda (q4100@xlhs* q4101@xrhs* q4102@xbody q4103@xbody*) (let ((q4108@xlab* (map q2e46@gen-label q4100@xlhs*))) (let ((q410a@xrib (q2e7a@make-full-rib q4100@xlhs* q4108@xlab*))) (let ((q410c@xb* (map (lambda (q410e@x) (q2ef2@make-eval-transformer (q311b@expand-transformer (if (eq? q40da@type 'let-syntax) q410e@x (q2ea6@add-subst q410a@xrib q410e@x)) q40c8@mr))) q4101@xrhs*))) (q2e1f@q2d7f@build-sequence '#f (q30df@chi-expr* (map (lambda (q4110@x) (q2ea6@add-subst q410a@xrib q4110@x)) (cons q4102@xbody q4103@xbody*)) (append (map cons q4108@xlab* q410c@xb*) q40c7@r) (append (map cons q4108@xlab* q410c@xb*) q40c8@mr))))))) q40f6@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q40f4@t)))) (if (memv q40de@t '(displaced-lexical)) (q31a1@syntax-violation '#f '"identifier out of context" q40c6@e) (if (memv q40de@t '(syntax)) (q31a1@syntax-violation '#f '"reference to pattern variable outside a syntax form" q40c6@e) (if (memv q40de@t '(define define-syntax module import library)) (q31a1@syntax-violation '#f (string-append (let ((q4112@t q40da@type)) (if (memv q4112@t '(define)) '"a definition" (if (memv q4112@t '(define-syntax)) '"a define-syntax" (if (memv q4112@t '(module)) '"a module definition" (if (memv q4112@t '(library)) '"a library definition" (if (memv q4112@t '(import)) '"an import declaration" (if (memv q4112@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") q40c6@e) (if (memv q40de@t '(mutable)) (q31a1@syntax-violation '#f '"attempt to reference an unexportable variable" q40c6@e) (q31a1@syntax-violation '#f '"invalid expression" q40c6@e))))))))))))))))))))))) (set! q4ba8@q30e3@chi-expr q30e3@chi-expr) (set! q30e5@chi-set! (lambda (q4114@e q4115@r q4116@mr) (let ((q411a@t q4114@e)) (let ((q411c@ls/false (q30c1@syntax-dispatch q411a@t '(_ any any)))) (if (and q411c@ls/false (apply (lambda (q411e@x q411f@v) (q2eba@id? q411e@x)) q411c@ls/false)) (apply (lambda (q4122@x q4123@v) (call-with-values (lambda () (q2edc@syntax-type q4122@x q4115@r)) (lambda (q412c@q4127 q412d@q4129 q412e@q412b) (let ((q4132@kwd q412e@q412b) (q4133@value q412d@q4129) (q4134@type q412c@q4127)) (let ((q4138@t q4134@type)) (if (memv q4138@t '(lexical)) (begin (q304f@set-lexical-mutable! q4133@value '#t) (list 'set! (q304b@lexical-var q4133@value) (q30e3@chi-expr q4123@v q4115@r q4116@mr))) (if (memv q4138@t '(core-prim)) (q31a1@syntax-violation '#f '"cannot modify imported core primitive" q4114@e) (if (memv q4138@t '(global)) (q31a1@syntax-violation '#f '"attempt to modify imported binding" q4114@e) (if (memv q4138@t '(global-macro!)) (q30e3@chi-expr (q30dd@chi-global-macro q4133@value q4114@e) q4115@r q4116@mr) (if (memv q4138@t '(local-macro!)) (q30e3@chi-expr (q30db@chi-local-macro q4133@value q4114@e) q4115@r q4116@mr) (if (memv q4138@t '(mutable)) (q31a1@syntax-violation '#f '"attempt to assign to an unexportable variable" q4114@e) (q31a1@syntax-violation '#f '"invalid syntax" q4114@e)))))))))))) q411c@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q411a@t)))))) (set! q4ba9@q30e5@chi-set! q30e5@chi-set!) (set! q30e7@verify-formals (lambda (q413a@fmls q413b@stx) (let ((q413e@t q413a@fmls)) (let ((q4140@ls/false (q30c1@syntax-dispatch q413e@t 'each-any))) (if q4140@ls/false (apply (lambda (q4142@x*) (if (not (q2ec2@valid-bound-ids? q4142@x*)) (q307b@invalid-fmls-error q413b@stx q413a@fmls) (void))) q4140@ls/false) (let ((q4144@t q413e@t)) (let ((q4146@ls/false (q30c1@syntax-dispatch q4144@t '#(each+ any () any)))) (if q4146@ls/false (apply (lambda (q4148@x* q4149@x) (if (not (q2ec2@valid-bound-ids? (cons q4149@x q4148@x*))) (q307b@invalid-fmls-error q413b@stx q413a@fmls) (void))) q4146@ls/false) (let ((q414c@t q4144@t)) (let ((q414e@ls/false (q30c1@syntax-dispatch q414c@t '_))) (if q414e@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid syntax" q413b@stx)) q414e@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q414c@t)))))))))))) (set! q4baa@q30e7@verify-formals q30e7@verify-formals) (set! q30e9@chi-lambda-clause (lambda (q4150@stx q4151@fmls q4152@body* q4153@r q4154@mr) (let ((q415a@t q4151@fmls)) (let ((q415c@ls/false (q30c1@syntax-dispatch q415a@t 'each-any))) (if q415c@ls/false (apply (lambda (q415e@x*) (begin (q30e7@verify-formals q4151@fmls q4150@stx) (let ((q4160@lex* (map q2e42@gen-lexical q415e@x*)) (q4161@lab* (map q2e46@gen-label q415e@x*))) (values q4160@lex* (q30f9@chi-internal (q2ea6@add-subst (q2e7a@make-full-rib q415e@x* q4161@lab*) q4152@body*) (q3053@add-lexicals q4161@lab* q4160@lex* q4153@r) q4154@mr))))) q415c@ls/false) (let ((q4164@t q415a@t)) (let ((q4166@ls/false (q30c1@syntax-dispatch q4164@t '#(each+ any () any)))) (if q4166@ls/false (apply (lambda (q4168@x* q4169@x) (begin (q30e7@verify-formals q4151@fmls q4150@stx) (let ((q416c@lex* (map q2e42@gen-lexical q4168@x*)) (q416d@lab* (map q2e46@gen-label q4168@x*)) (q416e@lex (q2e42@gen-lexical q4169@x)) (q416f@lab (q2e46@gen-label q4169@x))) (values (append q416c@lex* q416e@lex) (q30f9@chi-internal (q2ea6@add-subst (q2e7a@make-full-rib (cons q4169@x q4168@x*) (cons q416f@lab q416d@lab*)) q4152@body*) (q3053@add-lexicals (cons q416f@lab q416d@lab*) (cons q416e@lex q416c@lex*) q4153@r) q4154@mr))))) q4166@ls/false) (let ((q4174@t q4164@t)) (let ((q4176@ls/false (q30c1@syntax-dispatch q4174@t '_))) (if q4176@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid syntax" q4151@fmls)) q4176@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4174@t)))))))))))) (set! q4bab@q30e9@chi-lambda-clause q30e9@chi-lambda-clause) (set! q30eb@chi-lambda-clause* (lambda (q4178@stx q4179@fmls* q417a@body** q417b@r q417c@mr) (if (null? q4179@fmls*) (values '() '()) (call-with-values (lambda () (q30e9@chi-lambda-clause q4178@stx (car q4179@fmls*) (car q417a@body**) q417b@r q417c@mr)) (lambda (q4186@q4183 q4187@q4185) (let ((q418a@b q4187@q4185) (q418b@a q4186@q4183)) (call-with-values (lambda () (q30eb@chi-lambda-clause* q4178@stx (cdr q4179@fmls*) (cdr q417a@body**) q417b@r q417c@mr)) (lambda (q4192@q418f q4193@q4191) (let ((q4196@b* q4193@q4191) (q4197@a* q4192@q418f)) (values (cons q418b@a q4197@a*) (cons q418a@b q4196@b*))))))))))) (set! q4bac@q30eb@chi-lambda-clause* q30eb@chi-lambda-clause*) (set! q30ed@chi-defun (lambda (q419a@x q419b@r q419c@mr) (let ((q41a0@fmls (car q419a@x)) (q41a1@body* (cdr q419a@x))) (call-with-values (lambda () (q30e9@chi-lambda-clause q41a0@fmls q41a0@fmls q41a1@body* q419b@r q419c@mr)) (lambda (q41a8@q41a5 q41a9@q41a7) (let ((q41ac@body q41a9@q41a7) (q41ad@fmls q41a8@q41a5)) (q2e1d@q2d4f@build-lambda '#f q41ad@fmls q41ac@body))))))) (set! q4bad@q30ed@chi-defun q30ed@chi-defun) (set! q30ef@chi-rhs (lambda (q41b0@rhs q41b1@r q41b2@mr) (let ((q41b6@t (car q41b0@rhs))) (if (memv q41b6@t '(defun)) (q30ed@chi-defun (cdr q41b0@rhs) q41b1@r q41b2@mr) (if (memv q41b6@t '(expr)) (let ((q41b8@expr (cdr q41b0@rhs))) (q30e3@chi-expr q41b8@expr q41b1@r q41b2@mr)) (if (memv q41b6@t '(top-expr)) (let ((q41ba@expr (cdr q41b0@rhs))) (q2e1f@q2d7f@build-sequence '#f (list (q30e3@chi-expr q41ba@expr q41b1@r q41b2@mr) (q2e20@q2d81@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" q41b0@rhs))))))) (set! q4bae@q30ef@chi-rhs q30ef@chi-rhs) (set! q30f1@expand-interaction-rhs*/init* (lambda (q41bc@lhs* q41bd@rhs* q41be@init* q41bf@r q41c0@mr) (let q41ca@f ((q41c6@lhs* q41bc@lhs*) (q41c7@rhs* q41bd@rhs*)) (if (null? q41c6@lhs*) (map (lambda (q41cc@x) (q30e3@chi-expr q41cc@x q41bf@r q41c0@mr)) q41be@init*) (let ((q41ce@lhs (car q41c6@lhs*)) (q41cf@rhs (car q41c7@rhs*))) (let ((q41d2@t (car q41cf@rhs))) (if (memv q41d2@t '(defun)) (let ((q41d4@rhs (q30ed@chi-defun (cdr q41cf@rhs) q41bf@r q41c0@mr))) (cons (list 'set! q41ce@lhs q41d4@rhs) (q41ca@f (cdr q41c6@lhs*) (cdr q41c7@rhs*)))) (if (memv q41d2@t '(expr)) (let ((q41d6@rhs (q30e3@chi-expr (cdr q41cf@rhs) q41bf@r q41c0@mr))) (cons (list 'set! q41ce@lhs q41d6@rhs) (q41ca@f (cdr q41c6@lhs*) (cdr q41c7@rhs*)))) (if (memv q41d2@t '(top-expr)) (let ((q41d8@e (q30e3@chi-expr (cdr q41cf@rhs) q41bf@r q41c0@mr))) (cons q41d8@e (q41ca@f (cdr q41c6@lhs*) (cdr q41c7@rhs*)))) (error 'expand-interaction '"invallid" q41cf@rhs)))))))))) (set! q4baf@q30f1@expand-interaction-rhs*/init* q30f1@expand-interaction-rhs*/init*) (set! q30f3@chi-rhs* (lambda (q41da@rhs* q41db@r q41dc@mr) (let q41e2@f ((q41e0@ls q41da@rhs*)) (if (null? q41e0@ls) '() (let ((q41e4@a (q30ef@chi-rhs (car q41e0@ls) q41db@r q41dc@mr))) (cons q41e4@a (q41e2@f (cdr q41e0@ls)))))))) (set! q4bb0@q30f3@chi-rhs* q30f3@chi-rhs*) (set! q30f5@find-bound=? (lambda (q41e6@x q41e7@lhs* q41e8@rhs*) (if (null? q41e7@lhs*) '#f (if (q2ebe@bound-id=? q41e6@x (car q41e7@lhs*)) (car q41e8@rhs*) (q30f5@find-bound=? q41e6@x (cdr q41e7@lhs*) (cdr q41e8@rhs*)))))) (set! q4bb1@q30f5@find-bound=? q30f5@find-bound=?) (set! q30f7@find-dups (lambda (q41ec@ls) (let q41f2@f ((q41ee@ls q41ec@ls) (q41ef@dups '())) (if (null? q41ee@ls) q41ef@dups (let ((q41f4@t (q30f5@find-bound=? (car q41ee@ls) (cdr q41ee@ls) (cdr q41ee@ls)))) (if q41f4@t ((lambda (q41f6@x) (q41f2@f (cdr q41ee@ls) (cons (list (car q41ee@ls) q41f6@x) q41ef@dups))) q41f4@t) (q41f2@f (cdr q41ee@ls) q41ef@dups))))))) (set! q4bb2@q30f7@find-dups q30f7@find-dups) (set! q30f9@chi-internal (lambda (q41f8@e* q41f9@r q41fa@mr) (let ((q41fe@rib (q2e6e@make-empty-rib))) (call-with-values (lambda () (q3119@chi-body* (map (lambda (q4210@x) (q2ea6@add-subst q41fe@rib q4210@x)) (q2eb8@syntax->list q41f8@e*)) q41f9@r q41fa@mr '() '() '() '() '() q41fe@rib '#f)) (lambda (q4212@q4201 q4213@q4203 q4214@q4205 q4215@q4207 q4216@q4209 q4217@q420b q4218@q420d q4219@q420f) (let ((q4222@_exp* q4219@q420f) (q4223@kwd* q4218@q420d) (q4224@mod** q4217@q420b) (q4225@rhs* q4216@q4209) (q4226@lex* q4215@q4207) (q4227@mr q4214@q4205) (q4228@r q4213@q4203) (q4229@e* q4212@q4201)) (begin (if (null? q4229@e*) (q31a1@syntax-violation '#f '"no expression in body" q4229@e*) (void)) (let ((q4232@init* (q30df@chi-expr* (append (apply append (reverse q4224@mod**)) q4229@e*) q4228@r q4227@mr))) (let ((q4234@rhs* (q30f3@chi-rhs* q4225@rhs* q4228@r q4227@mr))) (q2e24@q2d89@build-letrec* '#f (reverse q4226@lex*) (reverse q4234@rhs*) (q2e1f@q2d7f@build-sequence '#f q4232@init*))))))))))) (set! q4bb3@q30f9@chi-internal q30f9@chi-internal) (set! q30fb@parse-module (lambda (q4236@e) (let ((q4238@t q4236@e)) (let ((q423a@ls/false (q30c1@syntax-dispatch q4238@t '(_ each-any . each-any)))) (if q423a@ls/false (apply (lambda (q423c@export* q423d@b*) (begin (if (not (for-all q2eba@id? q423c@export*)) (q31a1@syntax-violation '#f '"module exports must be identifiers" q4236@e) (void)) (values '#f (list->vector q423c@export*) q423d@b*))) q423a@ls/false) (let ((q4240@t q4238@t)) (let ((q4242@ls/false (q30c1@syntax-dispatch q4240@t '(_ any each-any . each-any)))) (if q4242@ls/false (apply (lambda (q4244@name q4245@export* q4246@b*) (begin (if (not (q2eba@id? q4244@name)) (q31a1@syntax-violation '#f '"module name must be an identifier" q4236@e) (void)) (if (not (for-all q2eba@id? q4245@export*)) (q31a1@syntax-violation '#f '"module exports must be identifiers" q4236@e) (void)) (values q4244@name (list->vector q4245@export*) q4246@b*))) q4242@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4240@t))))))))) (set! q4bb4@q30fb@parse-module q30fb@parse-module) (set! q3105@module-interface? (lambda (q424a@x) (and (simple-struct? q424a@x) (eq? (simple-struct-name q424a@x) 'module-interface)))) (set! q4bb5@q3105@module-interface? q3105@module-interface?) (set! q3107@module-interface-first-mark (lambda (q424c@x) (simple-struct-ref q424c@x '0))) (set! q4bb6@q3107@module-interface-first-mark q3107@module-interface-first-mark) (set! q3109@set-module-interface-first-mark! (lambda (q424e@x q424f@val) (simple-struct-set! q424e@x '0 q424f@val))) (set! q4bb7@q3109@set-module-interface-first-mark! q3109@set-module-interface-first-mark!) (set! q310b@module-interface-exp-id-vec (lambda (q4252@x) (simple-struct-ref q4252@x '1))) (set! q4bb8@q310b@module-interface-exp-id-vec q310b@module-interface-exp-id-vec) (set! q310d@set-module-interface-exp-id-vec! (lambda (q4254@x q4255@val) (simple-struct-set! q4254@x '1 q4255@val))) (set! q4bb9@q310d@set-module-interface-exp-id-vec! q310d@set-module-interface-exp-id-vec!) (set! q310f@module-interface-exp-lab-vec (lambda (q4258@x) (simple-struct-ref q4258@x '2))) (set! q4bba@q310f@module-interface-exp-lab-vec q310f@module-interface-exp-lab-vec) (set! q3111@set-module-interface-exp-lab-vec! (lambda (q425a@x q425b@val) (simple-struct-set! q425a@x '2 q425b@val))) (set! q4bbb@q3111@set-module-interface-exp-lab-vec! q3111@set-module-interface-exp-lab-vec!) (set! q3113@dummy '3) (set! q4bbc@q3113@dummy q3113@dummy) (set! q3115@module-interface-exp-id* (lambda (q425e@iface q425f@id) (letrec* ((q4263@diff-marks (lambda (q426a@ls q426b@x) (begin (if (null? q426a@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((q426e@a (car q426a@ls))) (if (eq? q426e@a q426b@x) '() (cons q426e@a (q4263@diff-marks (cdr q426a@ls) q426b@x)))))))) (let ((q4264@diff (q4263@diff-marks (q2e8c@stx-mark* q425f@id) (q3107@module-interface-first-mark q425e@iface))) (q4265@id-vec (q310b@module-interface-exp-id-vec q425e@iface))) (if (null? q4264@diff) q4265@id-vec (vector-map (lambda (q4268@x) (make-simple-struct 'stx '5 (list (q2e88@stx-expr q4268@x) (append q4264@diff (q2e8c@stx-mark* q4268@x)) '() '()))) q4265@id-vec)))))) (set! q4bbd@q3115@module-interface-exp-id* q3115@module-interface-exp-id*) (set! q3117@chi-internal-module (lambda (q4270@e q4271@r q4272@mr q4273@lex* q4274@rhs* q4275@mod** q4276@kwd*) (call-with-values (lambda () (q30fb@parse-module q4270@e)) (lambda (q4284@q427f q4285@q4281 q4286@q4283) (let ((q428a@e* q4286@q4283) (q428b@exp-id* q4285@q4281) (q428c@name q4284@q427f)) (let ((q4290@rib (q2e6e@make-empty-rib))) (let ((q4292@e* (map (lambda (q4294@x) (q2ea6@add-subst q4290@rib q4294@x)) (q2eb8@syntax->list q428a@e*)))) (call-with-values (lambda () (q3119@chi-body* q4292@e* q4271@r q4272@mr q4273@lex* q4274@rhs* q4275@mod** q4276@kwd* '() q4290@rib '#f)) (lambda (q42a6@q4297 q42a7@q4299 q42a8@q429b q42a9@q429d q42aa@q429f q42ab@q42a1 q42ac@q42a3 q42ad@q42a5) (let ((q42b6@_exp* q42ad@q42a5) (q42b7@kwd* q42ac@q42a3) (q42b8@mod** q42ab@q42a1) (q42b9@rhs* q42aa@q429f) (q42ba@lex* q42a9@q429d) (q42bb@mr q42a8@q429b) (q42bc@r q42a7@q4299) (q42bd@e* q42a6@q4297)) (let ((q42c6@exp-lab* (vector-map (lambda (q42ca@x) (or (q2ed0@id->label (make-simple-struct 'stx '5 (list (q2ebc@id->sym q42ca@x) (q2e8c@stx-mark* q42ca@x) (list q4290@rib) '()))) (q31a1@syntax-violation '#f '"cannot find module export" q42ca@x))) q428b@exp-id*)) (q42c7@mod** (cons q42bd@e* q42b8@mod**))) (if (not q428c@name) (values q42ba@lex* q42b9@rhs* q428b@exp-id* q42c6@exp-lab* q42bc@r q42bb@mr q42c7@mod** q42b7@kwd*) (let ((q42cc@lab (q2e46@gen-label 'module)) (q42cd@iface (make-simple-struct 'module-interface '4 (list (car (q2e8c@stx-mark* q428c@name)) (vector-map (lambda (q42d0@x) (make-simple-struct 'stx '5 (list (q2e88@stx-expr q42d0@x) (q2e8c@stx-mark* q42d0@x) '() '()))) q428b@exp-id*) q42c6@exp-lab*)))) (values q42ba@lex* q42b9@rhs* (vector q428c@name) (vector q42cc@lab) (cons (cons q42cc@lab (cons '$module q42cd@iface)) q42bc@r) (cons (cons q42cc@lab (cons '$module q42cd@iface)) q42bb@mr) q42c7@mod** q42b7@kwd*)))))))))))))) (set! q4bbe@q3117@chi-internal-module q3117@chi-internal-module) (set! q3119@chi-body* (lambda (q42d2@e* q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42d8@kwd* q42d9@exp* q42da@rib q42db@top?) (if (null? q42d2@e*) (values q42d2@e* q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42d8@kwd* q42d9@exp*) (let ((q42e6@e (car q42d2@e*))) (call-with-values (lambda () (q2edc@syntax-type q42e6@e q42d3@r)) (lambda (q42ee@q42e9 q42ef@q42eb q42f0@q42ed) (let ((q42f4@kwd q42f0@q42ed) (q42f5@value q42ef@q42eb) (q42f6@type q42ee@q42e9)) (let ((q42fa@kwd* (if (q2eba@id? q42f4@kwd) (cons q42f4@kwd q42d8@kwd*) q42d8@kwd*))) (let ((q42fc@t q42f6@type)) (if (memv q42fc@t '(define)) (call-with-values (lambda () (q3043@parse-define q42e6@e)) (lambda (q4302@q42ff q4303@q4301) (let ((q4306@rhs q4303@q4301) (q4307@id q4302@q42ff)) (begin (if (q2ec6@bound-id-member? q4307@id q42fa@kwd*) (q31a1@syntax-violation '#f '"cannot redefine keyword" q42e6@e) (void)) (call-with-values (lambda () (q2e4a@gen-define-label+loc q4307@id q42da@rib)) (lambda (q430e@q430b q430f@q430d) (let ((q4312@lex q430f@q430d) (q4313@lab q430e@q430b)) (begin (q2e70@extend-rib! q42da@rib q4307@id q4313@lab) (q3119@chi-body* (cdr q42d2@e*) (q3051@add-lexical q4313@lab q4312@lex q42d3@r) q42d4@mr (cons q4312@lex q42d5@lex*) (cons q4306@rhs q42d6@rhs*) q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?))))))))) (if (memv q42fc@t '(define-syntax)) (call-with-values (lambda () (q3045@parse-define-syntax q42e6@e)) (lambda (q431a@q4317 q431b@q4319) (let ((q431e@rhs q431b@q4319) (q431f@id q431a@q4317)) (begin (if (q2ec6@bound-id-member? q431f@id q42fa@kwd*) (q31a1@syntax-violation '#f '"cannot redefine keyword" q42e6@e) (void)) (let ((q4322@lab (q2e4c@gen-define-label q431f@id q42da@rib)) (q4323@expanded-rhs (q311b@expand-transformer q431e@rhs q42d4@mr))) (begin (q2e70@extend-rib! q42da@rib q431f@id q4322@lab) (let ((q4326@b (q2ef2@make-eval-transformer q4323@expanded-rhs))) (q3119@chi-body* (cdr q42d2@e*) (cons (cons q4322@lab q4326@b) q42d3@r) (cons (cons q4322@lab q4326@b) q42d4@mr) q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?)))))))) (if (memv q42fc@t '(let-syntax letrec-syntax)) (let ((q4328@t q42e6@e)) (let ((q432a@ls/false (q30c1@syntax-dispatch q4328@t '(_ #(each (any any)) . each-any)))) (if (and q432a@ls/false (apply (lambda (q432c@xlhs* q432d@xrhs* q432e@xbody*) (if (not (q2ec2@valid-bound-ids? q432c@xlhs*)) (q31a1@syntax-violation '#f '"invalid identifiers" q42e6@e) (void))) q432a@ls/false)) (apply (lambda (q4332@xlhs* q4333@xrhs* q4334@xbody*) (let ((q4338@xlab* (map q2e46@gen-label q4332@xlhs*))) (let ((q433a@xrib (q2e7a@make-full-rib q4332@xlhs* q4338@xlab*))) (let ((q433c@xb* (map (lambda (q433e@x) (q2ef2@make-eval-transformer (q311b@expand-transformer (if (eq? q42f6@type 'let-syntax) q433e@x (q2ea6@add-subst q433a@xrib q433e@x)) q42d4@mr))) q4333@xrhs*))) (q3119@chi-body* (append (map (lambda (q4340@x) (q2ea6@add-subst q433a@xrib q4340@x)) q4334@xbody*) (cdr q42d2@e*)) (append (map cons q4338@xlab* q433c@xb*) q42d3@r) (append (map cons q4338@xlab* q433c@xb*) q42d4@mr) q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?))))) q432a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4328@t)))) (if (memv q42fc@t '(begin)) (let ((q4342@t q42e6@e)) (let ((q4344@ls/false (q30c1@syntax-dispatch q4342@t '(_ . each-any)))) (if q4344@ls/false (apply (lambda (q4346@x*) (q3119@chi-body* (append q4346@x* (cdr q42d2@e*)) q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?)) q4344@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4342@t)))) (if (memv q42fc@t '(global-macro global-macro!)) (q3119@chi-body* (cons (q2ea6@add-subst q42da@rib (q30dd@chi-global-macro q42f5@value q42e6@e)) (cdr q42d2@e*)) q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?) (if (memv q42fc@t '(local-macro local-macro!)) (q3119@chi-body* (cons (q2ea6@add-subst q42da@rib (q30db@chi-local-macro q42f5@value q42e6@e)) (cdr q42d2@e*)) q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?) (if (memv q42fc@t '(macro macro!)) (q3119@chi-body* (cons (q2ea6@add-subst q42da@rib (q30d9@chi-macro q42f5@value q42e6@e)) (cdr q42d2@e*)) q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?) (if (memv q42fc@t '(module)) (call-with-values (lambda () (q3117@chi-internal-module q42e6@e q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd*)) (lambda (q4358@q4349 q4359@q434b q435a@q434d q435b@q434f q435c@q4351 q435d@q4353 q435e@q4355 q435f@q4357) (let ((q4368@kwd* q435f@q4357) (q4369@mod** q435e@q4355) (q436a@mr q435d@q4353) (q436b@r q435c@q4351) (q436c@m-exp-lab* q435b@q434f) (q436d@m-exp-id* q435a@q434d) (q436e@rhs* q4359@q434b) (q436f@lex* q4358@q4349)) (begin (vector-for-each (lambda (q4378@id q4379@lab) (q2e70@extend-rib! q42da@rib q4378@id q4379@lab)) q436d@m-exp-id* q436c@m-exp-lab*) (q3119@chi-body* (cdr q42d2@e*) q436b@r q436a@mr q436f@lex* q436e@rhs* q4369@mod** q4368@kwd* q42d9@exp* q42da@rib q42db@top?))))) (if (memv q42fc@t '(library)) (begin (q3183@library-expander (q2ece@stx->datum q42e6@e)) (q3119@chi-body* (cdr q42d2@e*) q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?)) (if (memv q42fc@t '(export)) (let ((q437c@t q42e6@e)) (let ((q437e@ls/false (q30c1@syntax-dispatch q437c@t '(_ . each-any)))) (if q437e@ls/false (apply (lambda (q4380@exp-decl*) (q3119@chi-body* (cdr q42d2@e*) q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* (append q4380@exp-decl* q42d9@exp*) q42da@rib q42db@top?)) q437e@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q437c@t)))) (if (memv q42fc@t '(import)) (letrec* ((q4383@module-import? (lambda (q43d6@e) (let ((q43d8@t q43d6@e)) (let ((q43da@ls/false (q30c1@syntax-dispatch q43d8@t '(_ any)))) (if (and q43da@ls/false (apply (lambda (q43dc@id) (q2eba@id? q43dc@id)) q43da@ls/false)) (apply (lambda (q43de@id) '#t) q43da@ls/false) (let ((q43e0@t q43d8@t)) (let ((q43e2@ls/false (q30c1@syntax-dispatch q43e0@t '(_ . each-any)))) (if q43e2@ls/false (apply (lambda (q43e4@imp*) '#f) q43e2@ls/false) (let ((q43e6@t q43e0@t)) (let ((q43e8@ls/false (q30c1@syntax-dispatch q43e6@t '_))) (if q43e8@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"malformed import form" q43d6@e)) q43e8@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q43e6@t)))))))))))) (q4385@module-import (lambda (q43b4@e q43b5@r) (let ((q43b8@t q43b4@e)) (let ((q43ba@ls/false (q30c1@syntax-dispatch q43b8@t '(_ any)))) (if (and q43ba@ls/false (apply (lambda (q43bc@id) (q2eba@id? q43bc@id)) q43ba@ls/false)) (apply (lambda (q43be@id) (call-with-values (lambda () (q2edc@syntax-type q43be@id q43b5@r)) (lambda (q43c6@q43c1 q43c7@q43c3 q43c8@q43c5) (let ((q43cc@kwd q43c8@q43c5) (q43cd@value q43c7@q43c3) (q43ce@type q43c6@q43c1)) (let ((q43d2@t q43ce@type)) (if (memv q43d2@t '($module)) (let ((q43d4@iface q43cd@value)) (values (q3115@module-interface-exp-id* q43d4@iface q43be@id) (q310f@module-interface-exp-lab-vec q43d4@iface))) (q31a1@syntax-violation '#f '"invalid import" q43b4@e))))))) q43ba@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q43b8@t)))))) (q4387@library-import (lambda (q4398@e) (let ((q439a@t q4398@e)) (let ((q439c@ls/false (q30c1@syntax-dispatch q439a@t '(any . each-any)))) (if q439c@ls/false (apply (lambda (q439e@ctxt q439f@imp*) (call-with-values (lambda () (q3123@parse-import-spec* (q31a7@syntax->datum q439f@imp*))) (lambda (q43a6@q43a3 q43a7@q43a5) (let ((q43aa@subst-labels q43a7@q43a5) (q43ab@subst-names q43a6@q43a3)) (values (vector-map (lambda (q43ae@name) (q2e9a@datum->stx q439e@ctxt q43ae@name)) q43ab@subst-names) q43aa@subst-labels))))) q439c@ls/false) (let ((q43b0@t q439a@t)) (let ((q43b2@ls/false (q30c1@syntax-dispatch q43b0@t '_))) (if q43b2@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid import form" q4398@e)) q43b2@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q43b0@t)))))))))) (begin (call-with-values (lambda () (if (q4383@module-import? q42e6@e) (q4385@module-import q42e6@e q42d3@r) (q4387@library-import q42e6@e))) (lambda (q438c@q4389 q438d@q438b) (let ((q4390@lab* q438d@q438b) (q4391@id* q438c@q4389)) (vector-for-each (lambda (q4394@id q4395@lab) (q2e70@extend-rib! q42da@rib q4394@id q4395@lab)) q4391@id* q4390@lab*)))) (q3119@chi-body* (cdr q42d2@e*) q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?))) (if q42db@top? (q3119@chi-body* (cdr q42d2@e*) q42d3@r q42d4@mr (cons (q2e42@gen-lexical 'dummy) q42d5@lex*) (cons (cons 'top-expr q42e6@e) q42d6@rhs*) q42d7@mod** q42fa@kwd* q42d9@exp* q42da@rib q42db@top?) (values q42d2@e* q42d3@r q42d4@mr q42d5@lex* q42d6@rhs* q42d7@mod** q42fa@kwd* q42d9@exp*)))))))))))))))))))))) (set! q4bbf@q3119@chi-body* q3119@chi-body*) (set! q311b@expand-transformer (lambda (q43ea@expr q43eb@r) (let ((q43ee@rtc (q3127@make-collector))) (let ((q43f0@expanded-rhs (let ((q43fa@q43f3 q3129@inv-collector) (q43fb@q43f5 q312b@vis-collector) (q43fc@q43f7 q43ee@rtc) (q43fd@q43f9 (lambda (q4402@x) (values)))) (let ((q4404@swap (lambda () (begin (let ((q4406@t (q43fa@q43f3))) (begin (q43fa@q43f3 q43fc@q43f7) (set! q43fc@q43f7 q4406@t))) (let ((q4408@t (q43fb@q43f5))) (begin (q43fb@q43f5 q43fd@q43f9) (set! q43fd@q43f9 q4408@t))))))) (dynamic-wind q4404@swap (lambda () (q30e3@chi-expr q43ea@expr q43eb@r q43eb@r)) q4404@swap))))) (begin (for-each (let ((q440a@mark-visit (q312b@vis-collector))) (lambda (q440c@x) (begin (q2cd6@q2b24@invoke-library q440c@x) (q440a@mark-visit q440c@x)))) (q43ee@rtc)) q43f0@expanded-rhs))))) (set! q4bc0@q311b@expand-transformer q311b@expand-transformer) (set! q311d@parse-exports (lambda (q440e@exp*) (let q4416@f ((q4410@exp* q440e@exp*) (q4411@int* '()) (q4412@ext* '())) (if (null? q4410@exp*) (begin (if (not (q2ec2@valid-bound-ids? q4412@ext*)) (q31a1@syntax-violation 'export '"invalid exports" (q30f7@find-dups q4412@ext*)) (void)) (values (map q31a7@syntax->datum q4412@ext*) q4411@int*)) (let ((q4418@t (car q4410@exp*))) (let ((q441a@ls/false (q30c1@syntax-dispatch q4418@t '(any . #(each (any any)))))) (if q441a@ls/false (apply (lambda (q441c@rename q441d@i* q441e@e*) (begin (if (not (and (eq? (q31a7@syntax->datum q441c@rename) 'rename) (for-all q2eba@id? q441d@i*) (for-all q2eba@id? q441e@e*))) (q31a1@syntax-violation 'export '"invalid export specifier" (car q4410@exp*)) (void)) (q4416@f (cdr q4410@exp*) (append q441d@i* q4411@int*) (append q441e@e* q4412@ext*)))) q441a@ls/false) (let ((q4422@t q4418@t)) (let ((q4424@ls/false (q30c1@syntax-dispatch q4422@t 'any))) (if q4424@ls/false (apply (lambda (q4426@ie) (begin (if (not (q2eba@id? q4426@ie)) (q31a1@syntax-violation 'export '"invalid export" q4426@ie) (void)) (q4416@f (cdr q4410@exp*) (cons q4426@ie q4411@int*) (cons q4426@ie q4412@ext*)))) q4424@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4422@t))))))))))) (set! q4bc1@q311d@parse-exports q311d@parse-exports) (set! q311f@parse-library-name (lambda (q4428@spec) (letrec* ((q442b@parse (lambda (q4438@x) (let ((q443a@t q4438@x)) (let ((q443c@ls/false (q30c1@syntax-dispatch q443a@t '(each-any)))) (if (and q443c@ls/false (apply (lambda (q443e@v*) (for-all (lambda (q4440@x) (let ((q4442@x (q31a7@syntax->datum q4440@x))) (and (integer? q4442@x) (exact? q4442@x)))) q443e@v*)) q443c@ls/false)) (apply (lambda (q4444@v*) (values '() (map q31a7@syntax->datum q4444@v*))) q443c@ls/false) (let ((q4446@t q443a@t)) (let ((q4448@ls/false (q30c1@syntax-dispatch q4446@t '(any . any)))) (if (and q4448@ls/false (apply (lambda (q444a@x q444b@rest) (symbol? (q31a7@syntax->datum q444a@x))) q4448@ls/false)) (apply (lambda (q444e@x q444f@rest) (call-with-values (lambda () (q442b@parse q444f@rest)) (lambda (q4456@q4453 q4457@q4455) (let ((q445a@v* q4457@q4455) (q445b@x* q4456@q4453)) (values (cons (q31a7@syntax->datum q444e@x) q445b@x*) q445a@v*))))) q4448@ls/false) (let ((q445e@t q4446@t)) (let ((q4460@ls/false (q30c1@syntax-dispatch q445e@t '()))) (if q4460@ls/false (apply (lambda () (values '() '())) q4460@ls/false) (let ((q4462@t q445e@t)) (let ((q4464@ls/false (q30c1@syntax-dispatch q4462@t '_))) (if q4464@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid library name" q4428@spec)) q4464@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4462@t)))))))))))))))) (call-with-values (lambda () (q442b@parse q4428@spec)) (lambda (q4430@q442d q4431@q442f) (let ((q4434@ver* q4431@q442f) (q4435@name* q4430@q442d)) (begin (if (null? q4435@name*) (q31a1@syntax-violation '#f '"empty library name" q4428@spec) (void)) (values q4435@name* q4434@ver*)))))))) (set! q4bc2@q311f@parse-library-name q311f@parse-library-name) (set! q3121@parse-library (lambda (q4466@e) (let ((q4468@t q4466@e)) (let ((q446a@ls/false (q30c1@syntax-dispatch q4468@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and q446a@ls/false (apply (lambda (q446c@library q446d@name* q446e@export q446f@exp* q4470@import q4471@imp* q4472@b*) (and (eq? (q31a7@syntax->datum q446e@export) 'export) (eq? (q31a7@syntax->datum q4470@import) 'import) (eq? (q31a7@syntax->datum q446c@library) 'library))) q446a@ls/false)) (apply (lambda (q447a@library q447b@name* q447c@export q447d@exp* q447e@import q447f@imp* q4480@b*) (values q447b@name* q447d@exp* q447f@imp* q4480@b*)) q446a@ls/false) (let ((q4488@t q4468@t)) (let ((q448a@ls/false (q30c1@syntax-dispatch q4488@t '_))) (if q448a@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"malformed library" q4466@e)) q448a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4488@t))))))))) (set! q4bc3@q3121@parse-library q3121@parse-library) (set! q3123@parse-import-spec* (letrec* ((q448d@idsyn? (lambda (q4696@x) (symbol? (q31a7@syntax->datum q4696@x)))) (q448f@dup-error (lambda (q4694@name) (q31a1@syntax-violation 'import '"two imports with different bindings" q4694@name))) (q4491@merge-substs (lambda (q4682@s q4683@subst) (letrec* ((q4687@insert-to-subst (lambda (q4688@a q4689@subst) (let ((q468c@name (car q4688@a)) (q468d@label (cdr q4688@a))) (let ((q4690@t (assq q468c@name q4689@subst))) (if q4690@t ((lambda (q4692@x) (if (eq? (cdr q4692@x) q468d@label) q4689@subst (q448f@dup-error q468c@name))) q4690@t) (cons q4688@a q4689@subst))))))) (if (null? q4682@s) q4683@subst (q4687@insert-to-subst (car q4682@s) (q4491@merge-substs (cdr q4682@s) q4683@subst)))))) (q4493@exclude* (lambda (q4652@sym* q4653@subst) (letrec* ((q4657@exclude (lambda (q4670@sym q4671@subst) (if (null? q4671@subst) (q31a1@syntax-violation 'import '"cannot rename unbound identifier" q4670@sym) (if (eq? q4670@sym (caar q4671@subst)) (values (cdar q4671@subst) (cdr q4671@subst)) (let ((q4674@a (car q4671@subst))) (call-with-values (lambda () (q4657@exclude q4670@sym (cdr q4671@subst))) (lambda (q467a@q4677 q467b@q4679) (let ((q467e@subst q467b@q4679) (q467f@old q467a@q4677)) (values q467f@old (cons q4674@a q467e@subst))))))))))) (if (null? q4652@sym*) (values '() q4653@subst) (call-with-values (lambda () (q4657@exclude (car q4652@sym*) q4653@subst)) (lambda (q465c@q4659 q465d@q465b) (let ((q4660@subst q465d@q465b) (q4661@old q465c@q4659)) (call-with-values (lambda () (q4493@exclude* (cdr q4652@sym*) q4660@subst)) (lambda (q4668@q4665 q4669@q4667) (let ((q466c@subst q4669@q4667) (q466d@old* q4668@q4665)) (values (cons q4661@old q466d@old*) q466c@subst))))))))))) (q4495@find* (lambda (q464a@sym* q464b@subst) (map (lambda (q464e@x) (let ((q4650@t (assq q464e@x q464b@subst))) (if q4650@t (cdr q4650@t) (q31a1@syntax-violation 'import '"cannot find identifier" q464e@x)))) q464a@sym*))) (q4497@rem* (lambda (q4642@sym* q4643@subst) (let q4648@f ((q4646@subst q4643@subst)) (if (null? q4646@subst) '() (if (memq (caar q4646@subst) q4642@sym*) (q4648@f (cdr q4646@subst)) (cons (car q4646@subst) (q4648@f (cdr q4646@subst)))))))) (q4499@remove-dups (lambda (q4640@ls) (if (null? q4640@ls) '() (if (memq (car q4640@ls) (cdr q4640@ls)) (q4499@remove-dups (cdr q4640@ls)) (cons (car q4640@ls) (q4499@remove-dups (cdr q4640@ls))))))) (q449b@parse-library-name (lambda (q4558@spec) (letrec* ((q455b@subversion? (lambda (q463c@x) (let ((q463e@x (q31a7@syntax->datum q463c@x))) (and (integer? q463e@x) (exact? q463e@x) (>= q463e@x '0))))) (q455d@subversion-pred (lambda (q45dc@x*) (let ((q45de@t q45dc@x*)) (let ((q45e0@ls/false (q30c1@syntax-dispatch q45de@t 'any))) (if (and q45e0@ls/false (apply (lambda (q45e2@n) (q455b@subversion? q45e2@n)) q45e0@ls/false)) (apply (lambda (q45e4@n) (lambda (q45e6@x) (= q45e6@x (q31a7@syntax->datum q45e4@n)))) q45e0@ls/false) (let ((q45e8@t q45de@t)) (let ((q45ea@ls/false (q30c1@syntax-dispatch q45e8@t '(any . each-any)))) (if (and q45ea@ls/false (apply (lambda (q45ec@p? q45ed@sub*) (eq? (q31a7@syntax->datum q45ec@p?) 'and)) q45ea@ls/false)) (apply (lambda (q45f0@p? q45f1@sub*) (let ((q45f4@p* (map q455d@subversion-pred q45f1@sub*))) (lambda (q45f6@x) (for-all (lambda (q45f8@p) (q45f8@p q45f6@x)) q45f4@p*)))) q45ea@ls/false) (let ((q45fa@t q45e8@t)) (let ((q45fc@ls/false (q30c1@syntax-dispatch q45fa@t '(any . each-any)))) (if (and q45fc@ls/false (apply (lambda (q45fe@p? q45ff@sub*) (eq? (q31a7@syntax->datum q45fe@p?) 'or)) q45fc@ls/false)) (apply (lambda (q4602@p? q4603@sub*) (let ((q4606@p* (map q455d@subversion-pred q4603@sub*))) (lambda (q4608@x) (exists (lambda (q460a@p) (q460a@p q4608@x)) q4606@p*)))) q45fc@ls/false) (let ((q460c@t q45fa@t)) (let ((q460e@ls/false (q30c1@syntax-dispatch q460c@t '(any any)))) (if (and q460e@ls/false (apply (lambda (q4610@p? q4611@sub) (eq? (q31a7@syntax->datum q4610@p?) 'not)) q460e@ls/false)) (apply (lambda (q4614@p? q4615@sub) (let ((q4618@p (q455d@subversion-pred q4615@sub))) (lambda (q461a@x) (not (q4618@p q461a@x))))) q460e@ls/false) (let ((q461c@t q460c@t)) (let ((q461e@ls/false (q30c1@syntax-dispatch q461c@t '(any any)))) (if (and q461e@ls/false (apply (lambda (q4620@p? q4621@n) (and (eq? (q31a7@syntax->datum q4620@p?) '<=) (q455b@subversion? q4621@n))) q461e@ls/false)) (apply (lambda (q4624@p? q4625@n) (lambda (q4628@x) (<= q4628@x (q31a7@syntax->datum q4625@n)))) q461e@ls/false) (let ((q462a@t q461c@t)) (let ((q462c@ls/false (q30c1@syntax-dispatch q462a@t '(any any)))) (if (and q462c@ls/false (apply (lambda (q462e@p? q462f@n) (and (eq? (q31a7@syntax->datum q462e@p?) '>=) (q455b@subversion? q462f@n))) q462c@ls/false)) (apply (lambda (q4632@p? q4633@n) (lambda (q4636@x) (>= q4636@x (q31a7@syntax->datum q4633@n)))) q462c@ls/false) (let ((q4638@t q462a@t)) (let ((q463a@ls/false (q30c1@syntax-dispatch q4638@t '_))) (if q463a@ls/false (apply (lambda () (q31a1@syntax-violation 'import '"invalid sub-version spec" q4558@spec q45dc@x*)) q463a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4638@t)))))))))))))))))))))))) (q455f@version-pred (lambda (q458c@x*) (let ((q458e@t q458c@x*)) (let ((q4590@ls/false (q30c1@syntax-dispatch q458e@t '()))) (if q4590@ls/false (apply (lambda () (lambda (q4592@x) '#t)) q4590@ls/false) (let ((q4594@t q458e@t)) (let ((q4596@ls/false (q30c1@syntax-dispatch q4594@t '(any . each-any)))) (if (and q4596@ls/false (apply (lambda (q4598@c q4599@ver*) (eq? (q31a7@syntax->datum q4598@c) 'and)) q4596@ls/false)) (apply (lambda (q459c@c q459d@ver*) (let ((q45a0@p* (map q455f@version-pred q459d@ver*))) (lambda (q45a2@x) (for-all (lambda (q45a4@p) (q45a4@p q45a2@x)) q45a0@p*)))) q4596@ls/false) (let ((q45a6@t q4594@t)) (let ((q45a8@ls/false (q30c1@syntax-dispatch q45a6@t '(any . each-any)))) (if (and q45a8@ls/false (apply (lambda (q45aa@c q45ab@ver*) (eq? (q31a7@syntax->datum q45aa@c) 'or)) q45a8@ls/false)) (apply (lambda (q45ae@c q45af@ver*) (let ((q45b2@p* (map q455f@version-pred q45af@ver*))) (lambda (q45b4@x) (exists (lambda (q45b6@p) (q45b6@p q45b4@x)) q45b2@p*)))) q45a8@ls/false) (let ((q45b8@t q45a6@t)) (let ((q45ba@ls/false (q30c1@syntax-dispatch q45b8@t '(any any)))) (if (and q45ba@ls/false (apply (lambda (q45bc@c q45bd@ver) (eq? (q31a7@syntax->datum q45bc@c) 'not)) q45ba@ls/false)) (apply (lambda (q45c0@c q45c1@ver) (let ((q45c4@p (q455f@version-pred q45c1@ver))) (lambda (q45c6@x) (not (q45c4@p q45c6@x))))) q45ba@ls/false) (let ((q45c8@t q45b8@t)) (let ((q45ca@ls/false (q30c1@syntax-dispatch q45c8@t 'each-any))) (if q45ca@ls/false (apply (lambda (q45cc@sub*) (let ((q45ce@p* (map q455d@subversion-pred q45cc@sub*))) (lambda (q45d0@x) (let q45d6@f ((q45d2@p* q45ce@p*) (q45d3@x q45d0@x)) (if (null? q45d2@p*) '#t (if (null? q45d3@x) '#f (and ((car q45d2@p*) (car q45d3@x)) (q45d6@f (cdr q45d2@p*) (cdr q45d3@x))))))))) q45ca@ls/false) (let ((q45d8@t q45c8@t)) (let ((q45da@ls/false (q30c1@syntax-dispatch q45d8@t '_))) (if q45da@ls/false (apply (lambda () (q31a1@syntax-violation 'import '"invalid version spec" q4558@spec q458c@x*)) q45da@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q45d8@t)))))))))))))))))))))) (let q4562@f ((q4560@x q4558@spec)) (let ((q4564@t q4560@x)) (let ((q4566@ls/false (q30c1@syntax-dispatch q4564@t '(each-any)))) (if q4566@ls/false (apply (lambda (q4568@version-spec*) (values '() (q455f@version-pred q4568@version-spec*))) q4566@ls/false) (let ((q456a@t q4564@t)) (let ((q456c@ls/false (q30c1@syntax-dispatch q456a@t '(any . any)))) (if (and q456c@ls/false (apply (lambda (q456e@x q456f@x*) (q448d@idsyn? q456e@x)) q456c@ls/false)) (apply (lambda (q4572@x q4573@x*) (call-with-values (lambda () (q4562@f q4573@x*)) (lambda (q457a@q4577 q457b@q4579) (let ((q457e@pred q457b@q4579) (q457f@name q457a@q4577)) (values (cons (q31a7@syntax->datum q4572@x) q457f@name) q457e@pred))))) q456c@ls/false) (let ((q4582@t q456a@t)) (let ((q4584@ls/false (q30c1@syntax-dispatch q4582@t '()))) (if q4584@ls/false (apply (lambda () (values '() (lambda (q4586@x) '#t))) q4584@ls/false) (let ((q4588@t q4582@t)) (let ((q458a@ls/false (q30c1@syntax-dispatch q4588@t '_))) (if q458a@ls/false (apply (lambda () (q31a1@syntax-violation '#f '"invalid import spec" q4558@spec)) q458a@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4588@t))))))))))))))))) (q449d@import-library (lambda (q4548@spec*) (call-with-values (lambda () (q449b@parse-library-name q4548@spec*)) (lambda (q454e@q454b q454f@q454d) (let ((q4552@pred q454f@q454d) (q4553@name q454e@q454b)) (begin (if (null? q4553@name) (q31a1@syntax-violation 'import '"empty library name" q4548@spec*) (void)) (let ((q4556@lib (q2ccf@q2b16@find-library-by-name q4553@name))) (begin (if (not q4556@lib) (q31a1@syntax-violation 'import '"cannot find library with required name" q4553@name) (void)) (if (not (q4552@pred (q2ca9@q2aca@library-version q4556@lib))) (q31a1@syntax-violation 'import '"library does not satisfy version specification" q4548@spec* q4556@lib) (void)) ((q312d@imp-collector) q4556@lib) (q2cb1@q2ada@library-subst q4556@lib))))))))) (q449f@get-import (lambda (q44ba@spec) (let ((q44bc@t q44ba@spec)) (let ((q44be@ls/false (q30c1@syntax-dispatch q44bc@t '(any . each-any)))) (if (and q44be@ls/false (apply (lambda (q44c0@x q44c1@x*) (not (memq (q31a7@syntax->datum q44c0@x) '(for rename except only prefix library)))) q44be@ls/false)) (apply (lambda (q44c4@x q44c5@x*) (q449d@import-library (cons q44c4@x q44c5@x*))) q44be@ls/false) (let ((q44c8@t q44bc@t)) (let ((q44ca@ls/false (q30c1@syntax-dispatch q44c8@t '(any any . #(each (any any)))))) (if (and q44ca@ls/false (apply (lambda (q44cc@rename q44cd@isp q44ce@old* q44cf@new*) (and (eq? (q31a7@syntax->datum q44cc@rename) 'rename) (for-all q448d@idsyn? q44ce@old*) (for-all q448d@idsyn? q44cf@new*))) q44ca@ls/false)) (apply (lambda (q44d4@rename q44d5@isp q44d6@old* q44d7@new*) (let ((q44dc@subst (q449f@get-import q44d5@isp)) (q44dd@old* (map q31a7@syntax->datum q44d6@old*)) (q44de@new* (map q31a7@syntax->datum q44d7@new*))) (let ((q44e2@old-label* (q4495@find* q44dd@old* q44dc@subst))) (let ((q44e4@subst (q4497@rem* q44dd@old* q44dc@subst))) (q4491@merge-substs (map cons q44de@new* q44e2@old-label*) q44e4@subst))))) q44ca@ls/false) (let ((q44e6@t q44c8@t)) (let ((q44e8@ls/false (q30c1@syntax-dispatch q44e6@t '(any any . each-any)))) (if (and q44e8@ls/false (apply (lambda (q44ea@except q44eb@isp q44ec@sym*) (and (eq? (q31a7@syntax->datum q44ea@except) 'except) (for-all q448d@idsyn? q44ec@sym*))) q44e8@ls/false)) (apply (lambda (q44f0@except q44f1@isp q44f2@sym*) (let ((q44f6@subst (q449f@get-import q44f1@isp))) (q4497@rem* (map q31a7@syntax->datum q44f2@sym*) q44f6@subst))) q44e8@ls/false) (let ((q44f8@t q44e6@t)) (let ((q44fa@ls/false (q30c1@syntax-dispatch q44f8@t '(any any . each-any)))) (if (and q44fa@ls/false (apply (lambda (q44fc@only q44fd@isp q44fe@sym*) (and (eq? (q31a7@syntax->datum q44fc@only) 'only) (for-all q448d@idsyn? q44fe@sym*))) q44fa@ls/false)) (apply (lambda (q4502@only q4503@isp q4504@sym*) (let ((q4508@subst (q449f@get-import q4503@isp)) (q4509@sym* (map q31a7@syntax->datum q4504@sym*))) (let ((q450c@sym* (q4499@remove-dups q4509@sym*))) (let ((q450e@lab* (q4495@find* q450c@sym* q4508@subst))) (map cons q450c@sym* q450e@lab*))))) q44fa@ls/false) (let ((q4510@t q44f8@t)) (let ((q4512@ls/false (q30c1@syntax-dispatch q4510@t '(any any any)))) (if (and q4512@ls/false (apply (lambda (q4514@prefix q4515@isp q4516@p) (and (eq? (q31a7@syntax->datum q4514@prefix) 'prefix) (q448d@idsyn? q4516@p))) q4512@ls/false)) (apply (lambda (q451a@prefix q451b@isp q451c@p) (let ((q4520@subst (q449f@get-import q451b@isp)) (q4521@prefix (symbol->string (q31a7@syntax->datum q451c@p)))) (map (lambda (q4524@x) (cons (string->symbol (string-append q4521@prefix (symbol->string (car q4524@x)))) (cdr q4524@x))) q4520@subst))) q4512@ls/false) (let ((q4526@t q4510@t)) (let ((q4528@ls/false (q30c1@syntax-dispatch q4526@t '(any each-any)))) (if (and q4528@ls/false (apply (lambda (q452a@library q452b@spec*) (eq? (q31a7@syntax->datum q452a@library) 'library)) q4528@ls/false)) (apply (lambda (q452e@library q452f@spec*) (q449d@import-library q452f@spec*)) q4528@ls/false) (let ((q4532@t q4526@t)) (let ((q4534@ls/false (q30c1@syntax-dispatch q4532@t '(any any . any)))) (if (and q4534@ls/false (apply (lambda (q4536@for q4537@isp q4538@rest) (eq? (q31a7@syntax->datum q4536@for) 'for)) q4534@ls/false)) (apply (lambda (q453c@for q453d@isp q453e@rest) (q449f@get-import q453d@isp)) q4534@ls/false) (let ((q4542@t q4532@t)) (let ((q4544@ls/false (q30c1@syntax-dispatch q4542@t 'any))) (if q4544@ls/false (apply (lambda (q4546@spec) (q31a1@syntax-violation 'import '"invalid import spec" q4546@spec)) q4544@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4542@t))))))))))))))))))))))))))) (q44a1@add-imports! (lambda (q44aa@imp q44ab@h) (let ((q44ae@subst (q449f@get-import q44aa@imp))) (for-each (lambda (q44b0@x) (let ((q44b2@name (car q44b0@x)) (q44b3@label (cdr q44b0@x))) (let ((q44b6@t (hashtable-ref q44ab@h q44b2@name '#f))) (if q44b6@t ((lambda (q44b8@l) (if (not (eq? q44b8@l q44b3@label)) (q448f@dup-error q44b2@name) (void))) q44b6@t) (hashtable-set! q44ab@h q44b2@name q44b3@label))))) q44ae@subst))))) (lambda (q44a2@imp*) (let q44a8@f ((q44a4@imp* q44a2@imp*) (q44a5@h (make-eq-hashtable))) (if (null? q44a4@imp*) (hashtable-entries q44a5@h) (begin (q44a1@add-imports! (car q44a4@imp*) q44a5@h) (q44a8@f (cdr q44a4@imp*) q44a5@h))))))) (set! q4bc4@q3123@parse-import-spec* q3123@parse-import-spec*) (set! q3125@make-top-rib (lambda (q4698@names q4699@labels) (let ((q469c@rib (q2e6e@make-empty-rib))) (begin (vector-for-each (lambda (q469e@name q469f@label) (begin (if (not (symbol? q469e@name)) (error 'make-top-rib '"BUG: not a symbol" q469e@name) (void)) (q2e72@extend-rib/nc! q469c@rib (make-simple-struct 'stx '5 (list q469e@name q2e3e@top-mark* '() '())) q469f@label))) q4698@names q4699@labels) q469c@rib)))) (set! q4bc5@q3125@make-top-rib q3125@make-top-rib) (set! q3127@make-collector (lambda () (let ((q46a2@ls '())) (lambda q46a6 (let ((q46a7 (length q46a6))) (if (= q46a7 '0) (apply (lambda () q46a2@ls) q46a6) (if (= q46a7 '1) (apply (lambda (q46a4@x) (set! q46a2@ls (q2e37@set-cons q46a4@x q46a2@ls))) q46a6) (error 'apply '"invalid arg count")))))))) (set! q4bc6@q3127@make-collector q3127@make-collector) (set! q3129@inv-collector (q2a0a@q28e8@make-parameter (lambda q46a8@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (q46aa@x) (begin (if (not (procedure? q46aa@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" q46aa@x) (void)) q46aa@x)))) (set! q4bc7@q3129@inv-collector q3129@inv-collector) (set! q312b@vis-collector (q2a0a@q28e8@make-parameter (lambda q46ac@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (q46ae@x) (begin (if (not (procedure? q46ae@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" q46ae@x) (void)) q46ae@x)))) (set! q4bc8@q312b@vis-collector q312b@vis-collector) (set! q312d@imp-collector (q2a0a@q28e8@make-parameter (lambda q46b0@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (q46b2@x) (begin (if (not (procedure? q46b2@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" q46b2@x) (void)) q46b2@x)))) (set! q4bc9@q312d@imp-collector q312d@imp-collector) (set! q312f@chi-library-internal (lambda (q46b4@e* q46b5@rib q46b6@top?) (call-with-values (lambda () (q3119@chi-body* q46b4@e* '() '() '() '() '() '() '() q46b5@rib q46b6@top?)) (lambda (q46ca@q46bb q46cb@q46bd q46cc@q46bf q46cd@q46c1 q46ce@q46c3 q46cf@q46c5 q46d0@q46c7 q46d1@q46c9) (let ((q46da@exp* q46d1@q46c9) (q46db@_kwd* q46d0@q46c7) (q46dc@mod** q46cf@q46c5) (q46dd@rhs* q46ce@q46c3) (q46de@lex* q46cd@q46c1) (q46df@mr q46cc@q46bf) (q46e0@r q46cb@q46bd) (q46e1@e* q46ca@q46bb)) (values (append (apply append (reverse q46dc@mod**)) q46e1@e*) q46e0@r q46df@mr (reverse q46de@lex*) (reverse q46dd@rhs*) q46da@exp*)))))) (set! q4bca@q312f@chi-library-internal q312f@chi-library-internal) (set! q3131@chi-interaction-expr (lambda (q46ea@e q46eb@rib q46ec@r) (call-with-values (lambda () (q3119@chi-body* (list q46ea@e) q46ec@r q46ec@r '() '() '() '() '() q46eb@rib '#t)) (lambda (q4700@q46f1 q4701@q46f3 q4702@q46f5 q4703@q46f7 q4704@q46f9 q4705@q46fb q4706@q46fd q4707@q46ff) (let ((q4710@_exp* q4707@q46ff) (q4711@_kwd* q4706@q46fd) (q4712@mod** q4705@q46fb) (q4713@rhs* q4704@q46f9) (q4714@lex* q4703@q46f7) (q4715@mr q4702@q46f5) (q4716@r q4701@q46f3) (q4717@e* q4700@q46f1)) (let ((q4720@e* (q30f1@expand-interaction-rhs*/init* (reverse q4714@lex*) (reverse q4713@rhs*) (append (apply append (reverse q4712@mod**)) q4717@e*) q4716@r q4715@mr))) (let ((q4722@e (if (null? q4720@e*) (q2e20@q2d81@build-void) (if (null? (cdr q4720@e*)) (car q4720@e*) (q2e1f@q2d7f@build-sequence '#f q4720@e*))))) (values q4722@e q4716@r)))))))) (set! q4bcb@q3131@chi-interaction-expr q3131@chi-interaction-expr) (set! q3133@library-body-expander (lambda (q4724@name q4725@main-exp* q4726@imp* q4727@b* q4728@top?) (letrec* ((q472f@itc (q3127@make-collector))) (let ((q4738@q4731 q312d@imp-collector) (q4739@q4733 q31b1@top-level-context) (q473a@q4735 q472f@itc) (q473b@q4737 '#f)) (let ((q4740@swap (lambda () (begin (let ((q4742@t (q4738@q4731))) (begin (q4738@q4731 q473a@q4735) (set! q473a@q4735 q4742@t))) (let ((q4744@t (q4739@q4733))) (begin (q4739@q4733 q473b@q4737) (set! q473b@q4737 q4744@t))))))) (dynamic-wind q4740@swap (lambda () (call-with-values (lambda () (q3123@parse-import-spec* q4726@imp*)) (lambda (q474a@q4747 q474b@q4749) (let ((q474e@subst-labels q474b@q4749) (q474f@subst-names q474a@q4747)) (let ((q4752@rib (q3125@make-top-rib q474f@subst-names q474e@subst-labels))) (letrec* ((q4755@wrap (lambda (q47d0@x) (make-simple-struct 'stx '5 (list q47d0@x q2e3e@top-mark* (list q4752@rib) '()))))) (let ((q4756@b* (map q4755@wrap q4727@b*)) (q4757@main-exp* (map q4755@wrap q4725@main-exp*)) (q4758@rtc (q3127@make-collector)) (q4759@vtc (q3127@make-collector))) (let ((q4766@q475f q3129@inv-collector) (q4767@q4761 q312b@vis-collector) (q4768@q4763 q4758@rtc) (q4769@q4765 q4759@vtc)) (let ((q476e@swap (lambda () (begin (let ((q4770@t (q4766@q475f))) (begin (q4766@q475f q4768@q4763) (set! q4768@q4763 q4770@t))) (let ((q4772@t (q4767@q4761))) (begin (q4767@q4761 q4769@q4765) (set! q4769@q4765 q4772@t))))))) (dynamic-wind q476e@swap (lambda () (call-with-values (lambda () (q312f@chi-library-internal q4756@b* q4752@rib q4728@top?)) (lambda (q4780@q4775 q4781@q4777 q4782@q4779 q4783@q477b q4784@q477d q4785@q477f) (let ((q478c@internal-exp* q4785@q477f) (q478d@rhs* q4784@q477d) (q478e@lex* q4783@q477b) (q478f@mr q4782@q4779) (q4790@r q4781@q4777) (q4791@init* q4780@q4775)) (call-with-values (lambda () (q311d@parse-exports (append q4757@main-exp* q478c@internal-exp*))) (lambda (q479c@q4799 q479d@q479b) (let ((q47a0@exp-id* q479d@q479b) (q47a1@exp-name* q479c@q4799)) (begin (q2e76@seal-rib! q4752@rib) (let ((q47a4@init* (q30df@chi-expr* q4791@init* q4790@r q478f@mr))) (let ((q47a6@rhs* (q30f3@chi-rhs* q478d@rhs* q4790@r q478f@mr))) (begin (q2e78@unseal-rib! q4752@rib) (let ((q47a8@loc* (map q2e44@gen-global q478e@lex*)) (q47a9@export-subst (q318b@make-export-subst q47a1@exp-name* q47a0@exp-id*))) (letrec* ((q47ad@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (q318d@make-export-env/macros q478e@lex* q47a8@loc* q4790@r)) (lambda (q47b4@q47af q47b5@q47b1 q47b6@q47b3) (let ((q47ba@macro* q47b6@q47b3) (q47bb@global* q47b5@q47b1) (q47bc@export-env q47b4@q47af)) (begin (for-each (lambda (q47c0@s) (let ((q47c2@name (car q47c0@s)) (q47c3@label (cdr q47c0@s))) (let ((q47c6@p (assq q47c3@label q47bc@export-env))) (if q47c6@p (let ((q47c8@b (cdr q47c6@p))) (let ((q47ca@type (car q47c8@b))) (if (eq? q47ca@type 'mutable) (q31a1@syntax-violation 'export q47ad@errstr q47c2@name) (void)))) (void))))) q47a9@export-subst) (let ((q47cc@invoke-body (q2e25@q2d8b@build-library-letrec* '#f q4724@name q478e@lex* q47a8@loc* q47a6@rhs* (if (null? q47a4@init*) (q2e20@q2d81@build-void) (q2e1f@q2d7f@build-sequence '#f q47a4@init*)))) (q47cd@invoke-definitions (map q2e1c@q2cde@build-global-define (map cdr q47bb@global*)))) (values (q472f@itc) (q4758@rtc) (q4759@vtc) (q2e1f@q2d7f@build-sequence '#f (append q47cd@invoke-definitions (list q47cc@invoke-body))) q47ba@macro* q47a9@export-subst q47bc@export-env))))))))))))))))))) q476e@swap)))))))))) q4740@swap)))))) (set! q4bcc@q3133@library-body-expander q3133@library-body-expander) (set! q3135@core-library-expander (lambda (q47d2@e q47d3@verify-name) (call-with-values (lambda () (q3121@parse-library q47d2@e)) (lambda (q47de@q47d7 q47df@q47d9 q47e0@q47db q47e1@q47dd) (let ((q47e6@b* q47e1@q47dd) (q47e7@imp* q47e0@q47db) (q47e8@exp* q47df@q47d9) (q47e9@name* q47de@q47d7)) (call-with-values (lambda () (q311f@parse-library-name q47e9@name*)) (lambda (q47f2@q47ef q47f3@q47f1) (let ((q47f6@ver q47f3@q47f1) (q47f7@name q47f2@q47ef)) (begin (q47d3@verify-name q47f7@name) (call-with-values (lambda () (q3133@library-body-expander q47f7@name q47e8@exp* q47e7@imp* q47e6@b* '#f)) (lambda (q4808@q47fb q4809@q47fd q480a@q47ff q480b@q4801 q480c@q4803 q480d@q4805 q480e@q4807) (let ((q4816@export-env q480e@q4807) (q4817@export-subst q480d@q4805) (q4818@visit-code q480c@q4803) (q4819@invoke-code q480b@q4801) (q481a@visit-req* q480a@q47ff) (q481b@invoke-req* q4809@q47fd) (q481c@imp* q4808@q47fb)) (values q47f7@name q47f6@ver q481c@imp* q481b@invoke-req* q481a@visit-req* q4819@invoke-code q4818@visit-code q4817@export-subst q4816@export-env))))))))))))) (set! q4bcd@q3135@core-library-expander q3135@core-library-expander) (set! q3137@parse-top-level-program (lambda (q4824@e*) (let ((q4826@t q4824@e*)) (let ((q4828@ls/false (q30c1@syntax-dispatch q4826@t '((any . each-any) . each-any)))) (if (and q4828@ls/false (apply (lambda (q482a@import q482b@imp* q482c@b*) (eq? (q31a7@syntax->datum q482a@import) 'import)) q4828@ls/false)) (apply (lambda (q4830@import q4831@imp* q4832@b*) (values q4831@imp* q4832@b*)) q4828@ls/false) (let ((q4836@t q4826@t)) (let ((q4838@ls/false (q30c1@syntax-dispatch q4836@t '((any . any) . any)))) (if (and q4838@ls/false (apply (lambda (q483a@import q483b@x q483c@y) (eq? (q31a7@syntax->datum q483a@import) 'import)) q4838@ls/false)) (apply (lambda (q4840@import q4841@x q4842@y) (q31a1@syntax-violation 'expander '"invalid syntax of top-level program" (q2eb4@syntax-car q4824@e*))) q4838@ls/false) (let ((q4846@t q4836@t)) (let ((q4848@ls/false (q30c1@syntax-dispatch q4846@t '_))) (if q4848@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) q4848@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4846@t)))))))))))) (set! q4bce@q3137@parse-top-level-program q3137@parse-top-level-program) (set! q3139@top-level-expander (lambda (q484a@e*) (call-with-values (lambda () (q3137@parse-top-level-program q484a@e*)) (lambda (q4850@q484d q4851@q484f) (let ((q4854@b* q4851@q484f) (q4855@imp* q4850@q484d)) (call-with-values (lambda () (q3133@library-body-expander '() '() q4855@imp* q4854@b* '#t)) (lambda (q4866@q4859 q4867@q485b q4868@q485d q4869@q485f q486a@q4861 q486b@q4863 q486c@q4865) (let ((q4874@export-env q486c@q4865) (q4875@export-subst q486b@q4863) (q4876@visit-code q486a@q4861) (q4877@invoke-code q4869@q485f) (q4878@visit-req* q4868@q485d) (q4879@invoke-req* q4867@q485b) (q487a@imp* q4866@q4859)) (values q4879@invoke-req* q4877@invoke-code))))))))) (set! q4bcf@q3139@top-level-expander q3139@top-level-expander) (set! q313b@rp (q2a07@q28e2@make-record-printer 'env (lambda (q4882@x q4883@p q4884@wr) (display '"#<environment>" q4883@p)))) (set! q4bd0@q313b@rp q313b@rp) (set! q3145@env? (lambda (q4888@x) (and (simple-struct? q4888@x) (eq? (simple-struct-name q4888@x) 'env)))) (set! q4bd1@q3145@env? q3145@env?) (set! q3147@env-names (lambda (q488a@x) (simple-struct-ref q488a@x '0))) (set! q4bd2@q3147@env-names q3147@env-names) (set! q3149@set-env-names! (lambda (q488c@x q488d@val) (simple-struct-set! q488c@x '0 q488d@val))) (set! q4bd3@q3149@set-env-names! q3149@set-env-names!) (set! q314b@env-labels (lambda (q4890@x) (simple-struct-ref q4890@x '1))) (set! q4bd4@q314b@env-labels q314b@env-labels) (set! q314d@set-env-labels! (lambda (q4892@x q4893@val) (simple-struct-set! q4892@x '1 q4893@val))) (set! q4bd5@q314d@set-env-labels! q314d@set-env-labels!) (set! q314f@env-itc (lambda (q4896@x) (simple-struct-ref q4896@x '2))) (set! q4bd6@q314f@env-itc q314f@env-itc) (set! q3151@set-env-itc! (lambda (q4898@x q4899@val) (simple-struct-set! q4898@x '2 q4899@val))) (set! q4bd7@q3151@set-env-itc! q3151@set-env-itc!) (set! q3153@dummy '3) (set! q4bd8@q3153@dummy q3153@dummy) (set! q3155@rp (q2a07@q28e2@make-record-printer 'interaction-env (lambda (q489c@x q489d@p q489e@wr) (display '"#<environment>" q489d@p)))) (set! q4bd9@q3155@rp q3155@rp) (set! q315f@interaction-env? (lambda (q48a2@x) (and (simple-struct? q48a2@x) (eq? (simple-struct-name q48a2@x) 'interaction-env)))) (set! q4bda@q315f@interaction-env? q315f@interaction-env?) (set! q3161@interaction-env-rib (lambda (q48a4@x) (simple-struct-ref q48a4@x '0))) (set! q4bdb@q3161@interaction-env-rib q3161@interaction-env-rib) (set! q3163@set-interaction-env-rib! (lambda (q48a6@x q48a7@val) (simple-struct-set! q48a6@x '0 q48a7@val))) (set! q4bdc@q3163@set-interaction-env-rib! q3163@set-interaction-env-rib!) (set! q3165@interaction-env-r (lambda (q48aa@x) (simple-struct-ref q48aa@x '1))) (set! q4bdd@q3165@interaction-env-r q3165@interaction-env-r) (set! q3167@set-interaction-env-r! (lambda (q48ac@x q48ad@val) (simple-struct-set! q48ac@x '1 q48ad@val))) (set! q4bde@q3167@set-interaction-env-r! q3167@set-interaction-env-r!) (set! q3169@interaction-env-locs (lambda (q48b0@x) (simple-struct-ref q48b0@x '2))) (set! q4bdf@q3169@interaction-env-locs q3169@interaction-env-locs) (set! q316b@set-interaction-env-locs! (lambda (q48b2@x q48b3@val) (simple-struct-set! q48b2@x '2 q48b3@val))) (set! q4be0@q316b@set-interaction-env-locs! q316b@set-interaction-env-locs!) (set! q316d@dummy '3) (set! q4be1@q316d@dummy q316d@dummy) (set! q316f@interaction-environment-symbols (lambda () (q3177@environment-symbols (q31af@interaction-environment)))) (set! q4be2@q316f@interaction-environment-symbols q316f@interaction-environment-symbols) (set! q3171@environment-bindings (lambda (q48b6@e) (vector->list (vector-map (lambda (q48b8@name q48b9@label) (q3173@parse-binding (cons q48b8@name (q2cd5@q2b22@imported-label->binding q48b9@label)))) (q3147@env-names q48b6@e) (q314b@env-labels q48b6@e))))) (set! q4be3@q3171@environment-bindings q3171@environment-bindings) (set! q3173@parse-binding (lambda (q48bc@b) (cons (car q48bc@b) (let ((q48be@t (cadr q48bc@b))) (if (memv q48be@t '(core-prim global)) 'procedure (if (memv q48be@t '(core-macro macro global-macro)) 'syntax (if (memv q48be@t '($core-rtd)) 'record (if (eq? (car q48bc@b) (cadr q48bc@b)) 'syntax 'unknown)))))))) (set! q4be4@q3173@parse-binding q3173@parse-binding) (set! q3175@environment? (lambda (q48c0@x) (or (q3145@env? q48c0@x) (q315f@interaction-env? q48c0@x)))) (set! q4be5@q3175@environment? q3175@environment?) (set! q3177@environment-symbols (lambda (q48c2@x) (if (q3145@env? q48c2@x) (vector->list (q3147@env-names q48c2@x)) (if (q315f@interaction-env? q48c2@x) (map values (q2e58@rib-sym* (q3161@interaction-env-rib q48c2@x))) (assertion-violation 'environment-symbols '"not an environment" q48c2@x))))) (set! q4be6@q3177@environment-symbols q3177@environment-symbols) (set! q3179@environment (lambda q48c4@imp* (let ((q48c6@itc (q3127@make-collector))) (let ((q48cc@q48c9 q312d@imp-collector) (q48cd@q48cb q48c6@itc)) (let ((q48d0@swap (lambda () (let ((q48d2@t (q48cc@q48c9))) (begin (q48cc@q48c9 q48cd@q48cb) (set! q48cd@q48cb q48d2@t)))))) (dynamic-wind q48d0@swap (lambda () (call-with-values (lambda () (q3123@parse-import-spec* q48c4@imp*)) (lambda (q48d8@q48d5 q48d9@q48d7) (let ((q48dc@subst-labels q48d9@q48d7) (q48dd@subst-names q48d8@q48d5)) (make-simple-struct 'env '4 (list q48dd@subst-names q48dc@subst-labels q48c6@itc)))))) q48d0@swap)))))) (set! q4be7@q3179@environment q3179@environment) (set! q317b@null-environment (lambda (q48e0@n) (begin (if (not (eqv? q48e0@n '5)) (assertion-violation 'null-environment '"not 5" q48e0@n) (void)) (q3179@environment '(psyntax null-environment-5))))) (set! q4be8@q317b@null-environment q317b@null-environment) (set! q317d@scheme-report-environment (lambda (q48e2@n) (begin (if (not (eqv? q48e2@n '5)) (assertion-violation 'scheme-report-environment '"not 5" q48e2@n) (void)) (q3179@environment '(psyntax scheme-report-environment-5))))) (set! q4be9@q317d@scheme-report-environment q317d@scheme-report-environment) (set! q317f@expand (lambda (q48e4@x q48e5@env) (if (q3145@env? q48e5@env) (let ((q48e8@rib (q3125@make-top-rib (q3147@env-names q48e5@env) (q314b@env-labels q48e5@env)))) (let ((q48ea@x (make-simple-struct 'stx '5 (list q48e4@x q2e3e@top-mark* (list q48e8@rib) '()))) (q48eb@itc (q314f@env-itc q48e5@env)) (q48ec@rtc (q3127@make-collector)) (q48ed@vtc (q3127@make-collector))) (let ((q48f2@x (let ((q4904@q48f5 q31b1@top-level-context) (q4905@q48f7 q3129@inv-collector) (q4906@q48f9 q312b@vis-collector) (q4907@q48fb q312d@imp-collector) (q4908@q48fd '#f) (q4909@q48ff q48ec@rtc) (q490a@q4901 q48ed@vtc) (q490b@q4903 q48eb@itc)) (let ((q4914@swap (lambda () (begin (let ((q4916@t (q4904@q48f5))) (begin (q4904@q48f5 q4908@q48fd) (set! q4908@q48fd q4916@t))) (let ((q4918@t (q4905@q48f7))) (begin (q4905@q48f7 q4909@q48ff) (set! q4909@q48ff q4918@t))) (let ((q491a@t (q4906@q48f9))) (begin (q4906@q48f9 q490a@q4901) (set! q490a@q4901 q491a@t))) (let ((q491c@t (q4907@q48fb))) (begin (q4907@q48fb q490b@q4903) (set! q490b@q4903 q491c@t))))))) (dynamic-wind q4914@swap (lambda () (q30e3@chi-expr q48ea@x '() '())) q4914@swap))))) (begin (q2e76@seal-rib! q48e8@rib) (values q48f2@x (q48ec@rtc)))))) (if (q315f@interaction-env? q48e5@env) (let ((q491e@rib (q3161@interaction-env-rib q48e5@env)) (q491f@r (q3165@interaction-env-r q48e5@env)) (q4920@rtc (q3127@make-collector))) (let ((q4924@x (make-simple-struct 'stx '5 (list q48e4@x q2e3e@top-mark* (list q491e@rib) '())))) (call-with-values (lambda () (let ((q493a@q492b q31b1@top-level-context) (q493b@q492d q3129@inv-collector) (q493c@q492f q312b@vis-collector) (q493d@q4931 q312d@imp-collector) (q493e@q4933 q48e5@env) (q493f@q4935 q4920@rtc) (q4940@q4937 (q3127@make-collector)) (q4941@q4939 (q3127@make-collector))) (let ((q494a@swap (lambda () (begin (let ((q494c@t (q493a@q492b))) (begin (q493a@q492b q493e@q4933) (set! q493e@q4933 q494c@t))) (let ((q494e@t (q493b@q492d))) (begin (q493b@q492d q493f@q4935) (set! q493f@q4935 q494e@t))) (let ((q4950@t (q493c@q492f))) (begin (q493c@q492f q4940@q4937) (set! q4940@q4937 q4950@t))) (let ((q4952@t (q493d@q4931))) (begin (q493d@q4931 q4941@q4939) (set! q4941@q4939 q4952@t))))))) (dynamic-wind q494a@swap (lambda () (q3131@chi-interaction-expr q4924@x q491e@rib q491f@r)) q494a@swap)))) (lambda (q4954@q4927 q4955@q4929) (let ((q4958@r^ q4955@q4929) (q4959@e q4954@q4927)) (begin (q3167@set-interaction-env-r! q48e5@env q4958@r^) (values q4959@e (q4920@rtc)))))))) (assertion-violation 'expand '"not an environment" q48e5@env))))) (set! q4bea@q317f@expand q317f@expand) (set! q3181@eval (lambda (q495c@x q495d@env) (begin (if (not (q3175@environment? q495d@env)) (error 'eval '"not an environment" q495d@env) (void)) (call-with-values (lambda () (q317f@expand q495c@x q495d@env)) (lambda (q4964@q4961 q4965@q4963) (let ((q4968@invoke-req* q4965@q4963) (q4969@x q4964@q4961)) (begin (for-each q2cd6@q2b24@invoke-library q4968@invoke-req*) (eval-core (q2a60@q2a18@expanded->core q4969@x))))))))) (set! q4beb@q3181@eval q3181@eval) (set! q3183@library-expander (lambda q49da (let ((q49db (length q49da))) (if (= q49db '3) (apply (lambda (q496c@x q496d@filename q496e@verify-name) (letrec* ((q4973@build-visit-code (lambda (q49c8@macro*) (if (null? q49c8@macro*) (q2e20@q2d81@build-void) (q2e1f@q2d7f@build-sequence '#f (map (lambda (q49ca@x) (let ((q49cc@loc (car q49ca@x)) (q49cd@src (cddr q49ca@x))) (list 'set! q49cc@loc q49cd@src))) q49c8@macro*))))) (q4975@visit! (lambda (q49c0@macro*) (for-each (lambda (q49c2@x) (let ((q49c4@loc (car q49c2@x)) (q49c5@proc (cadr q49c2@x))) (set-symbol-value! q49c4@loc q49c5@proc))) q49c0@macro*)))) (call-with-values (lambda () (q3135@core-library-expander q496c@x q496e@verify-name)) (lambda (q4988@q4977 q4989@q4979 q498a@q497b q498b@q497d q498c@q497f q498d@q4981 q498e@q4983 q498f@q4985 q4990@q4987) (let ((q499a@export-env q4990@q4987) (q499b@export-subst q498f@q4985) (q499c@macro* q498e@q4983) (q499d@invoke-code q498d@q4981) (q499e@vis* q498c@q497f) (q499f@inv* q498b@q497d) (q49a0@imp* q498a@q497b) (q49a1@ver q4989@q4979) (q49a2@name q4988@q4977)) (let ((q49ac@id (gensym)) (q49ad@name q49a2@name) (q49ae@ver q49a1@ver) (q49af@imp* (map q2cda@q2b2c@library-spec q49a0@imp*)) (q49b0@vis* (map q2cda@q2b2c@library-spec q499e@vis*)) (q49b1@inv* (map q2cda@q2b2c@library-spec q499f@inv*)) (q49b2@visit-proc (lambda () (q4975@visit! q499c@macro*))) (q49b3@invoke-proc (lambda () (eval-core (q2a60@q2a18@expanded->core q499d@invoke-code)))) (q49b4@visit-code (q4973@build-visit-code q499c@macro*)) (q49b5@invoke-code q499d@invoke-code)) (begin (q2cd4@q2b20@install-library q49ac@id q49ad@name q49ae@ver q49af@imp* q49b0@vis* q49b1@inv* q499b@export-subst q499a@export-env q49b2@visit-proc q49b3@invoke-proc q49b4@visit-code q49b5@invoke-code '#t q496d@filename) (values q49ac@id q49ad@name q49ae@ver q49af@imp* q49b0@vis* q49b1@inv* q49b5@invoke-code q49b4@visit-code q499b@export-subst q499a@export-env)))))))) q49da) (if (= q49db '2) (apply (lambda (q49d0@x q49d1@filename) (q3183@library-expander q49d0@x q49d1@filename (lambda (q49d4@x) (values)))) q49da) (if (= q49db '1) (apply (lambda (q49d6@x) (q3183@library-expander q49d6@x '#f (lambda (q49d8@x) (values)))) q49da) (error 'apply '"invalid arg count"))))))) (set! q4bec@q3183@library-expander q3183@library-expander) (set! q3185@boot-library-expand (lambda (q49dc@x) (call-with-values (lambda () (q3183@library-expander q49dc@x)) (lambda (q49f2@q49df q49f3@q49e1 q49f4@q49e3 q49f5@q49e5 q49f6@q49e7 q49f7@q49e9 q49f8@q49eb q49f9@q49ed q49fa@q49ef q49fb@q49f1) (let ((q4a06@export-env q49fb@q49f1) (q4a07@export-subst q49fa@q49ef) (q4a08@visit-code q49f9@q49ed) (q4a09@invoke-code q49f8@q49eb) (q4a0a@inv* q49f7@q49e9) (q4a0b@vis* q49f6@q49e7) (q4a0c@imp* q49f5@q49e5) (q4a0d@ver q49f4@q49e3) (q4a0e@name q49f3@q49e1) (q4a0f@id q49f2@q49df)) (values q4a0e@name q4a09@invoke-code q4a07@export-subst q4a06@export-env)))))) (set! q4bed@q3185@boot-library-expand q3185@boot-library-expand) (set! q3187@rev-map-append (lambda (q4a1a@f q4a1b@ls q4a1c@ac) (if (null? q4a1b@ls) q4a1c@ac (q3187@rev-map-append q4a1a@f (cdr q4a1b@ls) (cons (q4a1a@f (car q4a1b@ls)) q4a1c@ac))))) (set! q4bee@q3187@rev-map-append q3187@rev-map-append) (set! q3189@build-exports (lambda (q4a20@lex*+loc* q4a21@init*) (q2e1f@q2d7f@build-sequence '#f (cons (q2e20@q2d81@build-void) (q3187@rev-map-append (lambda (q4a24@x) (list 'set! (cdr q4a24@x) (car q4a24@x))) q4a20@lex*+loc* q4a21@init*))))) (set! q4bef@q3189@build-exports q3189@build-exports) (set! q318b@make-export-subst (lambda (q4a26@name* q4a27@id*) (map (lambda (q4a2a@name q4a2b@id) (let ((q4a2e@label (q2ed0@id->label q4a2b@id))) (begin (if (not q4a2e@label) (q31a1@syntax-violation '#f '"cannot export unbound identifier" q4a2b@id) (void)) (cons q4a2a@name q4a2e@label)))) q4a26@name* q4a27@id*))) (set! q4bf0@q318b@make-export-subst q318b@make-export-subst) (set! q318d@make-export-env/macros (lambda (q4a30@lex* q4a31@loc* q4a32@r) (letrec* ((q4a37@lookup (lambda (q4a54@x) (let q4a5c@f ((q4a56@x q4a54@x) (q4a57@lex* q4a30@lex*) (q4a58@loc* q4a31@loc*)) (if (pair? q4a57@lex*) (if (eq? q4a56@x (car q4a57@lex*)) (car q4a58@loc*) (q4a5c@f q4a56@x (cdr q4a57@lex*) (cdr q4a58@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let q4a40@f ((q4a38@r q4a32@r) (q4a39@env '()) (q4a3a@global* '()) (q4a3b@macro* '())) (if (null? q4a38@r) (values q4a39@env q4a3a@global* q4a3b@macro*) (let ((q4a42@x (car q4a38@r))) (let ((q4a44@label (car q4a42@x)) (q4a45@b (cdr q4a42@x))) (let ((q4a48@t (q2ed6@binding-type q4a45@b))) (if (memv q4a48@t '(lexical)) (let ((q4a4a@v (q2ed8@binding-value q4a45@b))) (let ((q4a4c@loc (q4a37@lookup (q304b@lexical-var q4a4a@v))) (q4a4d@type (if (q304d@lexical-mutable? q4a4a@v) 'mutable 'global))) (q4a40@f (cdr q4a38@r) (cons (cons* q4a44@label q4a4d@type q4a4c@loc) q4a39@env) (cons (cons (q304b@lexical-var q4a4a@v) q4a4c@loc) q4a3a@global*) q4a3b@macro*))) (if (memv q4a48@t '(local-macro)) (let ((q4a50@loc (gensym))) (q4a40@f (cdr q4a38@r) (cons (cons* q4a44@label 'global-macro q4a50@loc) q4a39@env) q4a3a@global* (cons (cons q4a50@loc (q2ed8@binding-value q4a45@b)) q4a3b@macro*))) (if (memv q4a48@t '(local-macro!)) (let ((q4a52@loc (gensym))) (q4a40@f (cdr q4a38@r) (cons (cons* q4a44@label 'global-macro! q4a52@loc) q4a39@env) q4a3a@global* (cons (cons q4a52@loc (q2ed8@binding-value q4a45@b)) q4a3b@macro*))) (if (memv q4a48@t '($rtd $module)) (q4a40@f (cdr q4a38@r) (cons q4a42@x q4a39@env) q4a3a@global* q4a3b@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (q2ed6@binding-type q4a45@b) (q2ed8@binding-value q4a45@b)))))))))))))) (set! q4bf1@q318d@make-export-env/macros q318d@make-export-env/macros) (set! q318f@generate-temporaries (lambda (q4a5e@ls) (let ((q4a60@t q4a5e@ls)) (let ((q4a62@ls/false (q30c1@syntax-dispatch q4a60@t 'each-any))) (if q4a62@ls/false (apply (lambda (q4a64@ls) (map (lambda (q4a66@x) (make-simple-struct 'stx '5 (list (let ((q4a68@x (q31a7@syntax->datum q4a66@x))) (if (or (symbol? q4a68@x) (string? q4a68@x)) (gensym q4a68@x) (gensym 't))) q2e3e@top-mark* '() '()))) q4a64@ls)) q4a62@ls/false) (let ((q4a6a@t q4a60@t)) (let ((q4a6c@ls/false (q30c1@syntax-dispatch q4a6a@t '_))) (if q4a6c@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) q4a6c@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4a6a@t))))))))) (set! q4bf2@q318f@generate-temporaries q318f@generate-temporaries) (set! q3191@free-identifier=? (lambda (q4a6e@x q4a6f@y) (if (q2eba@id? q4a6e@x) (if (q2eba@id? q4a6f@y) (q2ec0@free-id=? q4a6e@x q4a6f@y) (assertion-violation 'free-identifier=? '"not an identifier" q4a6f@y)) (assertion-violation 'free-identifier=? '"not an identifier" q4a6e@x)))) (set! q4bf3@q3191@free-identifier=? q3191@free-identifier=?) (set! q3193@bound-identifier=? (lambda (q4a72@x q4a73@y) (if (q2eba@id? q4a72@x) (if (q2eba@id? q4a73@y) (q2ebe@bound-id=? q4a72@x q4a73@y) (assertion-violation 'bound-identifier=? '"not an identifier" q4a73@y)) (assertion-violation 'bound-identifier=? '"not an identifier" q4a72@x)))) (set! q4bf4@q3193@bound-identifier=? q3193@bound-identifier=?) (set! q3195@make-source-condition (lambda (q4a76@x) (letrec* ((q4a80@q4a7b (make-record-type-descriptor '&source-information &condition-rtd 'q4a7e '#f '#f '#((immutable file-name) (immutable line)))) (q4a82@q4a7d '#f) (q4a84@q4a7c (make-record-constructor-descriptor q4a80@q4a7b &condition-rcd q4a82@q4a7d)) (q4a87@q4a7a (record-predicate q4a80@q4a7b)) (q4a89@make-source-condition (record-constructor q4a84@q4a7c)) (q4a8b@q4a78 (record-accessor q4a80@q4a7b '0)) (q4a8d@q4a79 (record-accessor q4a80@q4a7b '1)) (q4a8f@source-condition? (condition-predicate q4a80@q4a7b)) (q4a91@source-filename (condition-accessor q4a80@q4a7b q4a8b@q4a78)) (q4a93@source-character (condition-accessor q4a80@q4a7b q4a8d@q4a79))) (if (and (pair? q4a76@x) (pair? (cdr q4a76@x))) (q4a89@make-source-condition (car q4a76@x) (cadr q4a76@x)) (condition))))) (set! q4bf5@q3195@make-source-condition q3195@make-source-condition) (set! q3197@extract-position-condition (lambda (q4a94@x) (q3195@make-source-condition (q3199@expression-position q4a94@x)))) (set! q4bf6@q3197@extract-position-condition q3197@extract-position-condition) (set! q3199@expression-position (lambda (q4a96@x) (and (q2e86@stx? q4a96@x) (let ((q4a98@x (q2e88@stx-expr q4a96@x))) (and (q29fe@q28d0@annotation? q4a98@x) (q29ff@q28d2@annotation-source q4a98@x)))))) (set! q4bf7@q3199@expression-position q3199@expression-position) (set! q319b@assertion-error (lambda (q4a9a@expr q4a9b@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list q4a9a@expr)) (q3195@make-source-condition q4a9b@pos))))) (set! q4bf8@q319b@assertion-error q319b@assertion-error) (set! q319d@syntax-error (lambda (q4a9e@x . q4aa0@args) (begin (if (not (for-all string? q4aa0@args)) (assertion-violation 'syntax-error '"invalid argument" q4aa0@args) (void)) (raise (condition (make-message-condition (if (null? q4aa0@args) '"invalid syntax" (apply string-append q4aa0@args))) (make-syntax-violation (q31a7@syntax->datum q4a9e@x) '#f) (q3197@extract-position-condition q4a9e@x)))))) (set! q4bf9@q319d@syntax-error q319d@syntax-error) (set! q319f@syntax-violation* (lambda (q4aa2@who q4aa3@msg q4aa4@form q4aa5@condition-object) (begin (if (not (string? q4aa3@msg)) (assertion-violation 'syntax-violation '"message is not a string" q4aa3@msg) (void)) (let ((q4aaa@who (if (or (string? q4aa2@who) (symbol? q4aa2@who)) q4aa2@who (if (not q4aa2@who) (let ((q4aac@t q4aa4@form)) (let ((q4aae@ls/false (q30c1@syntax-dispatch q4aac@t 'any))) (if (and q4aae@ls/false (apply (lambda (q4ab0@id) (q2eba@id? q4ab0@id)) q4aae@ls/false)) (apply (lambda (q4ab2@id) (q31a7@syntax->datum q4ab2@id)) q4aae@ls/false) (let ((q4ab4@t q4aac@t)) (let ((q4ab6@ls/false (q30c1@syntax-dispatch q4ab4@t '(any . any)))) (if (and q4ab6@ls/false (apply (lambda (q4ab8@id q4ab9@rest) (q2eba@id? q4ab8@id)) q4ab6@ls/false)) (apply (lambda (q4abc@id q4abd@rest) (q31a7@syntax->datum q4abc@id)) q4ab6@ls/false) (let ((q4ac0@t q4ab4@t)) (let ((q4ac2@ls/false (q30c1@syntax-dispatch q4ac0@t '_))) (if q4ac2@ls/false (apply (lambda () '#f) q4ac2@ls/false) (q31a1@syntax-violation '#f '"invalid syntax" q4ac0@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" q4aa2@who))))) (raise (condition (if q4aaa@who (make-who-condition q4aaa@who) (condition)) (make-message-condition q4aa3@msg) q4aa5@condition-object (q3197@extract-position-condition q4aa4@form))))))) (set! q4bfa@q319f@syntax-violation* q319f@syntax-violation*) (set! q31a1@syntax-violation (lambda q4ad2 (let ((q4ad3 (length q4ad2))) (if (= q4ad3 '3) (apply (lambda (q4ac4@who q4ac5@msg q4ac6@form) (q31a1@syntax-violation q4ac4@who q4ac5@msg q4ac6@form '#f)) q4ad2) (if (= q4ad3 '4) (apply (lambda (q4aca@who q4acb@msg q4acc@form q4acd@subform) (q319f@syntax-violation* q4aca@who q4acb@msg q4acc@form (make-syntax-violation (q31a7@syntax->datum q4acc@form) (q31a7@syntax->datum q4acd@subform)))) q4ad2) (error 'apply '"invalid arg count")))))) (set! q4bfb@q31a1@syntax-violation q31a1@syntax-violation) (set! q31a3@identifier? (lambda (q4ad4@x) (q2eba@id? q4ad4@x))) (set! q4bfc@q31a3@identifier? q31a3@identifier?) (set! q31a5@datum->syntax (lambda (q4ad6@id q4ad7@datum) (if (q2eba@id? q4ad6@id) (q2e9a@datum->stx q4ad6@id q4ad7@datum) (assertion-violation 'datum->syntax '"not an identifier" q4ad6@id)))) (set! q4bfd@q31a5@datum->syntax q31a5@datum->syntax) (set! q31a7@syntax->datum (lambda (q4ada@x) (q2ece@stx->datum q4ada@x))) (set! q4bfe@q31a7@syntax->datum q31a7@syntax->datum) (set! q31a9@ungensym-all (lambda (q4adc@code) (if (pair? q4adc@code) (cons (q31a9@ungensym-all (car q4adc@code)) (q31a9@ungensym-all (cdr q4adc@code))) (if (symbol? q4adc@code) (ungensym q4adc@code) q4adc@code)))) (set! q4bff@q31a9@ungensym-all q31a9@ungensym-all) (set! q31ab@compile-r6rs-top-level (lambda (q4ade@x*) (call-with-values (lambda () (q3139@top-level-expander q4ade@x*)) (lambda (q4ae4@q4ae1 q4ae5@q4ae3) (let ((q4ae8@invoke-code q4ae5@q4ae3) (q4ae9@lib* q4ae4@q4ae1)) (lambda () (begin (for-each q2cd6@q2b24@invoke-library q4ae9@lib*) (let ((q4aec@expanded (q2a60@q2a18@expanded->core q4ae8@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (q31a9@ungensym-all q4aec@expanded)) (void)) (eval-core q4aec@expanded)))))))))) (set! q4c00@q31ab@compile-r6rs-top-level q31ab@compile-r6rs-top-level) (set! q31ad@pre-compile-r6rs-top-level (lambda (q4aee@x*) (call-with-values (lambda () (q3139@top-level-expander q4aee@x*)) (lambda (q4af4@q4af1 q4af5@q4af3) (let ((q4af8@invoke-code q4af5@q4af3) (q4af9@lib* q4af4@q4af1)) (begin (for-each q2cd6@q2b24@invoke-library q4af9@lib*) (q2a08@q28e4@compile-core (q2a60@q2a18@expanded->core q4af8@invoke-code)))))))) (set! q4c01@q31ad@pre-compile-r6rs-top-level q31ad@pre-compile-r6rs-top-level) (set! q31af@interaction-environment (let ((q4afc@the-env '#f)) (lambda () (or q4afc@the-env (let ((q4afe@lib (q2ccf@q2b16@find-library-by-name '(mosh interaction))) (q4aff@rib (q2e6e@make-empty-rib))) (begin (let ((q4b02@subst (q2cb1@q2ada@library-subst q4afe@lib))) (begin (q2e5a@set-rib-sym*! q4aff@rib (map car q4b02@subst)) (q2e5e@set-rib-mark**! q4aff@rib (map (lambda (q4b04@x) q2e3e@top-mark*) q4b02@subst)) (q2e62@set-rib-label*! q4aff@rib (map cdr q4b02@subst)))) (let ((q4b06@env (make-simple-struct 'interaction-env '4 (list q4aff@rib '() '())))) (begin (set! q4afc@the-env q4b06@env) q4b06@env)))))))) (set! q4c02@q31af@interaction-environment q31af@interaction-environment) (set! q31b1@top-level-context (q2a0a@q28e8@make-parameter '#f)) (set! q4c03@q31b1@top-level-context q31b1@top-level-context) (q2ccc@q2b10@current-library-expander q3183@library-expander))
(begin (begin (q2a5d@q2a12@current-primitive-locations (lambda (q5157@x) (let ((q5159@t (assq q5157@x '((syntax-error . q4bf9@q319d@syntax-error) (syntax-dispatch . q4b97@q30c1@syntax-dispatch) (load . q4d83@q4c2a@load) (interaction-environment . q4c02@q31af@interaction-environment) (library-path . q2cc4@q2b00@library-path) (mosh-cache-dir . q2a0b@q28ea@mosh-cache-dir) (make-parameter . q2a0a@q28e8@make-parameter) (make-variable-transformer . q4b54@q2eec@make-variable-transformer) (identifier? . q4bfc@q31a3@identifier?) (generate-temporaries . q4bf2@q318f@generate-temporaries) (free-identifier=? . q4bf3@q3191@free-identifier=?) (syntax->datum . q4bfe@q31a7@syntax->datum) (datum->syntax . q4bfd@q31a5@datum->syntax) (bound-identifier=? . q4bf4@q3193@bound-identifier=?) (scheme-report-environment . q4be9@q317d@scheme-report-environment) (null-environment . q4be8@q317b@null-environment) (command-line . q4d80@q4c24@command-line) (eval . q4beb@q3181@eval) (environment . q4be7@q3179@environment) (syntax-violation . q4bfb@q31a1@syntax-violation) (assertion-error . q4bf8@q319b@assertion-error))))) (if q5159@t (cdr q5159@t) '#f)))) (q2cd4@q2b20@install-library 'q5134 '(mosh interaction) '() '() '() '() '((regexp? . q50f4) (alist->eq-hash-table . q50f0) (format . q50ed) (string-split . q50dd) (call-process . q50d7) (set-current-directory! . q50d3) (expand-path . q50d2) (current-directory . q50d1) (%spawn . q50d0) (%waitpid . q50cf) (simple-struct-name . q50ce) (simple-struct-set! . q50cd) (simple-struct-ref . q50cc) (make-simple-struct . q50cb) (simple-struct? . q50ca) (pointer-ref-c-int64 . q50c9) (pointer-ref-c-int32 . q50c8) (pointer-ref-c-int16 . q50c7) (pointer-ref-c-int8 . q50c6) (pointer-ref-c-uint64 . q50c5) (pointer-ref-c-uint32 . q50c4) (pointer-ref-c-uint16 . q50c3) (pointer-ref-c-uint8 . q50c2) (pointer-set-c-uint64! . q50c1) (pointer-set-c-uint32! . q50c0) (pointer-set-c-uint16! . q50bf) (pointer-set-c-uint8! . q50be) (pointer-set-c-int64! . q50bd) (pointer-set-c-int32! . q50bc) (pointer-set-c-int16! . q50bb) (pointer-set-c-int8! . q50ba) (pointer-set-c-pointer! . q50b9) (pointer-set-c-double! . q50b8) (pointer-set-c-float! . q50b7) (pointer-set-c-long-long! . q50b6) (pointer-set-c-long! . q50b5) (pointer-set-c-int! . q50b4) (pointer-set-c-short! . q50b3) (pointer-set-c-char! . q50b2) (pointer-ref-c-pointer . q50b1) (pointer-ref-c-double . q50b0) (pointer-ref-c-float . q50af) (pointer-ref-c-unsigned-long-long . q50ae) (pointer-ref-c-signed-long-long . q50ad) (pointer-ref-c-unsigned-long . q50ac) (pointer-ref-c-signed-long . q50ab) (pointer-ref-c-unsigned-int . q50aa) (pointer-ref-c-signed-int . q50a9) (pointer-ref-c-unsigned-short . q50a8) (pointer-ref-c-signed-short . q50a7) (pointer-ref-c-unsigned-char . q50a6) (pointer-ref-c-signed-char . q50a5) (pointer->integer . q50a4) (integer->pointer . q50a3) (pointer? . q50a2) (shared-errno . q50a1) (%ffi-supported? . q509c) (%ffi-pointer->string . q509b) (%ffi-call . q509a) (%ffi-lookup . q5099) (%ffi-open . q5098) (null-terminated-utf8->string . q5097) (null-terminated-bytevector->string . q5096) (%exec . q5095) (%fork . q5094) (%pipe . q5093) (p . q5092) (whereis . q5076) (register . q5075) (vm-join! . q5074) (vm-set-value! . q5073) (vm? . q5072) (main-vm? . q5071) (vm-eval . q5070) (vm-self . q506f) (vm-start! . q506e) (make-vm . q506d) (mutex-try-lock! . q506c) (mutex-unlock! . q506b) (mutex-lock! . q506a) (mutex? . q5069) (make-mutex . q5068) (condition-variable-notify-all! . q5067) (condition-variable-notify! . q5066) (condition-variable-wait! . q5065) (make-condition-variable . q5064) (write/ss . q5063) (string-upcase . q504b) (string-titlecase . q504a) (string-normalize-nfkd . q5049) (string-normalize-nfkc . q5048) (string-normalize-nfd . q5047) (string-normalize-nfc . q5046) (string-foldcase . q5045) (string-downcase . q5044) (string-ci>? . q5043) (string-ci>=? . q5042) (string-ci=? . q5041) (string-ci<? . q5040) (string-ci<=? . q503f) (char-whitespace? . q503e) (char-upper-case? . q503d) (char-title-case? . q503c) (char-numeric? . q503b) (char-lower-case? . q503a) (char-general-category . q5039) (char-upcase . q5038) (char-titlecase . q5037) (char-foldcase . q5036) (char-downcase . q5035) (char-ci>? . q5034) (char-ci>=? . q5033) (char-ci=? . q5032) (char-ci<? . q5031) (char-ci<=? . q5030) (char-alphabetic? . q502f) (make-variable-transformer . q2eeb) (identifier? . q31a2) (generate-temporaries . q318e) (free-identifier=? . q3190) (syntax->datum . q31a6) (datum->syntax . q31a4) (bound-identifier=? . q3192) (record-type-descriptor? . q502e) (record-predicate . q502d) (record-mutator . q502c) (record-constructor . q502b) (record-accessor . q502a) (make-record-type-descriptor . q5029) (make-record-constructor-descriptor . q5028) (record? . q5027) (record-type-uid . q5026) (record-type-sealed? . q5025) (record-type-parent . q5024) (record-type-opaque? . q5023) (record-type-name . q5022) (record-type-generative? . q5021) (record-type-field-names . q5020) (record-rtd . q501f) (record-field-mutable? . q501e) (delete-file . q501d) (file-exists? . q501c) (vector-sort! . q501b) (vector-sort . q501a) (list-sort . q5019) (symbol-hash . q5018) (string-ci-hash . q5017) (string-hash . q5016) (equal-hash . q5015) (hashtable-equivalence-function . q5014) (make-hashtable . q5013) (hashtable-hash-function . q5012) (make-eqv-hashtable . q5011) (make-eq-hashtable . q5010) (hashtable? . q500f) (hashtable-update! . q500e) (hashtable-size . q500d) (hashtable-set! . q500c) (hashtable-ref . q500b) (hashtable-mutable? . q500a) (hashtable-keys . q5009) (hashtable-entries . q5008) (hashtable-delete! . q5007) (hashtable-copy . q5006) (hashtable-contains? . q5005) (hashtable-clear! . q5004) (call-with-output-file . q5003) (call-with-input-file . q5002) (write-char . q5001) (write . q5000) (with-output-to-file . q4fff) (with-input-from-file . q4ffe) (read-char . q4ffd) (read . q4ffc) (peek-char . q4ffb) (open-output-file . q4ffa) (open-input-file . q4ff9) (newline . q4ff8) (display . q4ff7) (close-output-port . q4ff6) (close-input-port . q4ff5) (eof-object? . q4ff4) (eof-object . q4ff3) (current-error-port . q4ff2) (current-output-port . q4ff1) (current-input-port . q4ff0) (output-port? . q4fef) (input-port? . q4fee) (utf-8-codec . q4fed) (utf-16-codec . q4fec) (transcoder-error-handling-mode . q4feb) (transcoder-eol-style . q4fea) (transcoder-codec . q4fe9) (transcoded-port . q4fe8) (textual-port? . q4fe7) (string->bytevector . q4fe6) (standard-output-port . q4fe5) (standard-input-port . q4fe4) (standard-error-port . q4fe3) (set-port-position! . q4fe2) (put-u8 . q4fe1) (put-string . q4fe0) (put-datum . q4fdf) (put-char . q4fde) (put-bytevector . q4fdd) (port? . q4fdc) (port-transcoder . q4fdb) (port-position . q4fda) (port-has-set-port-position!? . q4fd9) (port-has-port-position? . q4fd8) (port-eof? . q4fd7) (output-port-buffer-mode . q4fd6) (open-string-output-port . q4fd5) (open-string-input-port . q4fd4) (open-file-output-port . q4fd3) (open-file-input/output-port . q4fd2) (open-file-input-port . q4fd1) (open-bytevector-output-port . q4fd0) (open-bytevector-input-port . q4fcf) (native-transcoder . q4fce) (native-eol-style . q4fcd) (make-transcoder . q4fcc) (latin-1-codec . q4fcb) (make-i/o-write-error . q4fca) (make-i/o-read-error . q4fc9) (make-i/o-port-error . q4fc8) (make-i/o-invalid-position-error . q4fc7) (make-i/o-filename-error . q4fc6) (make-i/o-file-protection-error . q4fc5) (make-i/o-file-is-read-only-error . q4fc4) (make-i/o-file-does-not-exist-error . q4fc3) (make-i/o-file-already-exists-error . q4fc2) (make-i/o-error . q4fc1) (make-i/o-encoding-error . q4fc0) (make-i/o-decoding-error . q4fbf) (make-custom-textual-output-port . q4fbe) (make-custom-textual-input/output-port . q4fbd) (make-custom-textual-input-port . q4fbc) (make-custom-binary-output-port . q4fbb) (make-custom-binary-input/output-port . q4fba) (make-custom-binary-input-port . q4fb9) (make-bytevector . q4fb8) (lookahead-u8 . q4fb7) (lookahead-char . q4fb6) (i/o-write-error? . q4fb5) (i/o-read-error? . q4fb4) (i/o-port-error? . q4fb3) (i/o-invalid-position-error? . q4fb2) (i/o-filename-error? . q4fb1) (i/o-file-protection-error? . q4fb0) (i/o-file-is-read-only-error? . q4faf) (i/o-file-does-not-exist-error? . q4fae) (i/o-file-already-exists-error? . q4fad) (i/o-error? . q4fac) (i/o-error-position . q4fab) (i/o-error-port . q4faa) (i/o-error-filename . q4fa9) (i/o-encoding-error? . q4fa8) (i/o-encoding-error-char . q4fa7) (i/o-decoding-error? . q4fa6) (get-u8 . q4fa5) (get-string-n! . q4fa4) (get-string-n . q4fa3) (get-string-all . q4fa2) (get-line . q4fa1) (get-datum . q4fa0) (get-char . q4f9f) (get-bytevector-some . q4f9e) (get-bytevector-n! . q4f9d) (get-bytevector-n . q4f9c) (get-bytevector-all . q4f9b) (flush-output-port . q4f9a) (close-port . q4f99) (exit . q4f91) (command-line . q4c23) (string-fill! . q4f90) (string-set! . q4f8f) (set-cdr! . q4f8e) (set-car! . q4f8d) (remove . q4f8c) (remv . q4f8b) (remp . q4f8a) (remq . q4f89) (partition . q4f88) (memv . q4f87) (memq . q4f86) (memp . q4f85) (member . q4f84) (exists . q4f83) (for-all . q4f82) (fold-right . q4f81) (fold-left . q4f80) (find . q4f7f) (filter . q4f7e) (cons* . q4f7d) (assv . q4f7c) (assq . q4f7b) (assp . q4f7a) (assoc . q4f79) (call-with-string-output-port . q4f78) (call-with-port . q4f77) (call-with-bytevector-output-port . q4f76) (bytevector->string . q4f75) (buffer-mode? . q4f74) (binary-port? . q4f73) (with-exception-handler . q4f72) (raise-continuable . q4f71) (raise . q4f70) (eval . q3180) (environment . q3178) (make-enumeration . q4f6f) (enum-set=? . q4f6e) (enum-set-universe . q4f6d) (enum-set-union . q4f6c) (enum-set-subset? . q4f6b) (enum-set-projection . q4f6a) (enum-set-member? . q4f69) (enum-set-intersection . q4f68) (enum-set-indexer . q4f67) (enum-set-difference . q4f66) (enum-set-constructor . q4f65) (enum-set-complement . q4f64) (enum-set->list . q4f63) (who-condition? . q4f62) (warning? . q4f61) (violation? . q4f60) (undefined-violation? . q4f5f) (syntax-violation? . q4f5e) (syntax-violation-subform . q4f5d) (syntax-violation-form . q4f5c) (syntax-violation . q31a0) (simple-conditions . q4f5b) (serious-condition? . q4f5a) (non-continuable-violation? . q4f59) (message-condition? . q4f58) (make-who-condition . q4f57) (make-warning . q4f56) (make-violation . q4f55) (make-undefined-violation . q4f54) (make-syntax-violation . q4f53) (make-serious-condition . q4f52) (make-non-continuable-violation . q4f51) (make-message-condition . q4f50) (make-lexical-violation . q4f4f) (make-irritants-condition . q4f4e) (make-implementation-restriction-violation . q4f4d) (make-error . q4f4c) (make-assertion-violation . q4f4b) (lexical-violation? . q4f4a) (irritants-condition? . q4f49) (implementation-restriction-violation? . q4f48) (error? . q4f47) (condition-who . q4f46) (condition-predicate . q4f45) (condition-message . q4f44) (condition-irritants . q4f43) (condition-accessor . q4f42) (condition . q4f41) (assertion-violation? . q4f40) (condition? . q4f3f) (utf32->string . q4f3e) (utf16->string . q4f3d) (utf8->string . q4f3c) (uint-list->bytevector . q4f3b) (u8-list->bytevector . q4f3a) (string->utf8 . q4f39) (string->utf32 . q4f38) (string->utf16 . q4f37) (sint-list->bytevector . q4f36) (native-endianness . q4f35) (bytevector? . q4f34) (bytevector=? . q4f33) (bytevector-uint-set! . q4f32) (bytevector-uint-ref . q4f31) (bytevector-u8-set! . q4f30) (bytevector-u8-ref . q4f2f) (bytevector-u64-set! . q4f2e) (bytevector-u64-ref . q4f2d) (bytevector-u64-native-set! . q4f2c) (bytevector-u64-native-ref . q4f2b) (bytevector-u32-set! . q4f2a) (bytevector-u32-ref . q4f29) (bytevector-u32-native-set! . q4f28) (bytevector-u32-native-ref . q4f27) (bytevector-u16-set! . q4f26) (bytevector-u16-ref . q4f25) (bytevector-u16-native-set! . q4f24) (bytevector-u16-native-ref . q4f23) (bytevector-sint-set! . q4f22) (bytevector-sint-ref . q4f21) (bytevector-s8-set! . q4f20) (bytevector-s8-ref . q4f1f) (bytevector-s64-set! . q4f1e) (bytevector-s64-ref . q4f1d) (bytevector-s64-native-set! . q4f1c) (bytevector-s64-native-ref . q4f1b) (bytevector-s32-set! . q4f1a) (bytevector-s32-ref . q4f19) (bytevector-s32-native-set! . q4f18) (bytevector-s32-native-ref . q4f17) (bytevector-s16-set! . q4f16) (bytevector-s16-ref . q4f15) (bytevector-s16-native-set! . q4f14) (bytevector-s16-native-ref . q4f13) (bytevector-length . q4f12) (bytevector-ieee-single-ref . q4f11) (bytevector-ieee-single-set! . q4f10) (bytevector-ieee-single-native-set! . q4f0f) (bytevector-ieee-single-native-ref . q4f0e) (bytevector-ieee-double-set! . q4f0d) (bytevector-ieee-double-ref . q4f0c) (bytevector-ieee-double-native-set! . q4f0b) (bytevector-ieee-double-native-ref . q4f0a) (bytevector-fill! . q4f09) (bytevector-copy! . q4f08) (bytevector-copy . q4f07) (bytevector->uint-list . q4f06) (bytevector->u8-list . q4f05) (bytevector->sint-list . q4f04) (no-nans-violation? . q4f03) (no-infinities-violation? . q4f02) (make-no-nans-violation . q4f01) (make-no-infinities-violation . q4f00) (real->flonum . q4eff) (flzero? . q4efe) (fltruncate . q4efd) (fltan . q4efc) (flsqrt . q4efb) (flsin . q4efa) (flround . q4ef9) (flpositive? . q4ef8) (flonum? . q4ef7) (flodd? . q4ef6) (flnumerator . q4ef5) (flnegative? . q4ef4) (flnan? . q4ef3) (flmod0 . q4ef2) (flmod . q4ef1) (flmin . q4ef0) (flmax . q4eef) (fllog . q4eee) (flinteger? . q4eed) (flinfinite? . q4eec) (flfloor . q4eeb) (flfinite? . q4eea) (flexpt . q4ee9) (flexp . q4ee8) (fleven? . q4ee7) (fldiv0-and-mod0 . q4ee6) (fldiv0 . q4ee5) (fldiv-and-mod . q4ee4) (fldiv . q4ee3) (fldenominator . q4ee2) (flcos . q4ee1) (flceiling . q4ee0) (flatan . q4edf) (flasin . q4ede) (flacos . q4edd) (flabs . q4edc) (fl>? . q4edb) (fl>=? . q4eda) (fl=? . q4ed9) (fl<? . q4ed8) (fl<=? . q4ed7) (fl/ . q4ed6) (fl- . q4ed5) (fl+ . q4ed4) (fl* . q4ed3) (fixnum->flonum . q4ed2) (fxzero? . q4ed1) (fxxor . q4ed0) (fxrotate-bit-field . q4ecf) (fxreverse-bit-field . q4ece) (fxpositive? . q4ecd) (fxodd? . q4ecc) (fxnot . q4ecb) (fxnegative? . q4eca) (fxmod0 . q4ec9) (fxmod . q4ec8) (fxmin . q4ec7) (fxmax . q4ec6) (fxlength . q4ec5) (fxior . q4ec4) (fxif . q4ec3) (fxfirst-bit-set . q4ec2) (fxeven? . q4ec1) (fxdiv0-and-mod0 . q4ec0) (fxdiv0 . q4ebf) (fxdiv-and-mod . q4ebe) (fxdiv . q4ebd) (fxcopy-bit-field . q4ebc) (fxcopy-bit . q4ebb) (fxbit-set? . q4eba) (fxbit-field . q4eb9) (fxbit-count . q4eb8) (fxarithmetic-shift-right . q4eb7) (fxarithmetic-shift-left . q4eb6) (fxarithmetic-shift . q4eb5) (fxand . q4eb4) (fx>? . q4eb3) (fx>=? . q4eb2) (fx=? . q4eb1) (fx<? . q4eb0) (fx<=? . q4eaf) (fx-/carry . q4eae) (fx- . q4ead) (fx+/carry . q4eac) (fx+ . q4eab) (fx*/carry . q4eaa) (fx* . q4ea9) (greatest-fixnum . q4ea8) (least-fixnum . q4ea7) (fixnum-width . q4ea6) (fixnum? . q4ea5) (bitwise-rotate-bit-field . q4ea4) (bitwise-reverse-bit-field . q4ea3) (bitwise-length . q4ea2) (bitwise-if . q4ea1) (bitwise-first-bit-set . q4ea0) (bitwise-copy-bit-field . q4e9f) (bitwise-copy-bit . q4e9e) (bitwise-bit-set? . q4e9d) (bitwise-bit-field . q4e9c) (bitwise-bit-count . q4e9b) (bitwise-xor . q4e9a) (bitwise-ior . q4e99) (bitwise-and . q4e98) (bitwise-not . q4e97) (bitwise-arithmetic-shift-right . q4e96) (bitwise-arithmetic-shift-left . q4e95) (bitwise-arithmetic-shift . q4e94) (zero? . q4e93) (vector? . q4e92) (vector-set! . q4e91) (vector-ref . q4e90) (vector-map . q4e8f) (vector-length . q4e8e) (vector-for-each . q4e8d) (vector-fill! . q4e8c) (vector->list . q4e8b) (vector . q4e8a) (values . q4e89) (truncate . q4e88) (tan . q4e87) (symbol? . q4e86) (symbol=? . q4e85) (symbol->string . q4e84) (substring . q4e83) (string? . q4e82) (string>? . q4e81) (string>=? . q4e80) (string=? . q4e7f) (string<? . q4e7e) (string<=? . q4e7d) (string-ref . q4e7c) (string-length . q4e7b) (string-for-each . q4e7a) (string-copy . q4e79) (string-append . q4e78) (string->symbol . q4e77) (string->number . q4e76) (string->list . q4e75) (string . q4e74) (sqrt . q4e73) (sin . q4e72) (round . q4e71) (reverse . q4e70) (real? . q4e6f) (real-valued? . q4e6e) (real-part . q4e6d) (rationalize . q4e6c) (rational? . q4e6b) (rational-valued? . q4e6a) (procedure? . q4e69) (positive? . q4e68) (pair? . q4e67) (odd? . q4e66) (numerator . q4e65) (number? . q4e64) (number->string . q4e63) (null? . q4e62) (not . q4e61) (negative? . q4e60) (nan? . q4e5f) (min . q4e5e) (max . q4e5d) (map . q4e5c) (make-vector . q4e5b) (make-string . q4e5a) (make-rectangular . q4e59) (make-polar . q4e58) (magnitude . q4e57) (log . q4e56) (list? . q4e55) (list-tail . q4e54) (list-ref . q4e53) (list->vector . q4e52) (list->string . q4e51) (list . q4e50) (length . q4e4f) (lcm . q4e4e) (integer? . q4e4d) (integer-valued? . q4e4c) (integer->char . q4e4b) (infinite? . q4e4a) (inexact? . q4e49) (inexact . q4e48) (imag-part . q4e47) (gcd . q4e46) (for-each . q4e45) (floor . q4e44) (finite? . q4e43) (expt . q4e42) (exp . q4e41) (exact? . q4e40) (exact-integer-sqrt . q4e3f) (exact . q4e3e) (even? . q4e3d) (error . q4e3c) (eqv? . q4e3b) (equal? . q4e3a) (eq? . q4e39) (dynamic-wind . q4e38) (div0-and-mod0 . q4e37) (mod0 . q4e36) (div0 . q4e35) (div-and-mod . q4e34) (mod . q4e33) (div . q4e32) (denominator . q4e31) (cos . q4e30) (cons . q4e2f) (complex? . q4e2e) (char? . q4e2d) (char>? . q4e2c) (char>=? . q4e2b) (char=? . q4e2a) (char<? . q4e29) (char<=? . q4e28) (char->integer . q4e27) (ceiling . q4e26) (call-with-values . q4e25) (call/cc . q4e24) (call-with-current-continuation . q4e23) (cddddr . q4e22) (cdddar . q4e21) (cddadr . q4e20) (cddaar . q4e1f) (cdaddr . q4e1e) (cdadar . q4e1d) (cdaadr . q4e1c) (cdaaar . q4e1b) (cadddr . q4e1a) (caddar . q4e19) (cadadr . q4e18) (cadaar . q4e17) (caaddr . q4e16) (caadar . q4e15) (caaadr . q4e14) (caaaar . q4e13) (cdddr . q4e12) (cddar . q4e11) (cdadr . q4e10) (cdaar . q4e0f) (caddr . q4e0e) (cadar . q4e0d) (caadr . q4e0c) (caaar . q4e0b) (cddr . q4e0a) (cdar . q4e09) (cadr . q4e08) (caar . q4e07) (cdr . q4e06) (car . q4e05) (boolean? . q4e04) (boolean=? . q4e03) (atan . q4e02) (assertion-violation . q4e01) (asin . q4e00) (apply . q4dff) (append . q4dfe) (angle . q4dfd) (acos . q4dfc) (abs . q4dfb) (/ . q4dfa) (* . q4df9) (- . q4df8) (+ . q4df7) (>= . q4df6) (> . q4df5) (= . q4df4) (<= . q4df3) (< . q4df2) (library . q4df1) (&no-nans . q4df0) (&no-infinities . q4def) (&i/o-encoding . q4dee) (&i/o-decoding . q4ded) (&i/o-port . q4dec) (&i/o-file-does-not-exist . q4deb) (&i/o-file-already-exists . q4dea) (&i/o-file-is-read-only . q4de9) (&i/o-file-protection . q4de8) (&i/o-filename . q4de7) (&i/o-invalid-position . q4de6) (&i/o-write . q4de5) (&i/o-read . q4de4) (&i/o . q4de3) (&undefined . q4de2) (&syntax . q4de1) (&lexical . q4de0) (&implementation-restriction . q4ddf) (&non-continuable . q4dde) (&who . q4ddd) (&irritants . q4ddc) (&assertion . q4ddb) (&violation . q4dda) (&error . q4dd9) (&serious . q4dd8) (&warning . q4dd7) (&message . q4dd6) (&condition . q4dd5) (define-condition-type . q4dd4) (define-enumeration . q4dd3) (define-record-type . q4dd2) (parent-rtd . q4dd1) (nongenerative . q4dd0) (opaque . q4dcf) (sealed . q4dce) (protocol . q4dcd) (parent . q4dcc) (immutable . q4dcb) (mutable . q4dca) (fields . q4dc9) (error-handling-mode . q4dc8) (file-options . q4dc7) (buffer-mode . q4dc6) (eol-style . q4dc5) (guard . q4dc4) (unsyntax-splicing . q4dc1) (unsyntax . q4dc0) (unquote-splicing . q4dbf) (unquote . q4dbe) (_ . q4dbd) (else . q4dbc) (=> . q4dbb) (... . q4dba) (assert . q4db9) (endianness . q4db8) (time . q4db6) (do . q4db5) (cond . q4db4) (let* . q4db3) (let*-values . q4db2) (let-values . q4db1) (identifier-syntax . q4db0) (with-syntax . q4daf) (quasisyntax . q4dae) (quasiquote . q4dad) (syntax-rules . q4dac) (include . q4dab) (record-constructor-descriptor . q4da9) (record-type-descriptor . q4da8) (case . q4da7) (unless . q4da5) (when . q4da4) (or . q4da3) (and . q4da2) (if . q4da1) (let . q4da0) (letrec* . q4d9f) (letrec . q4d9e) (case-lambda . q4d9c) (lambda . q4d9b) (syntax . q4d9a) (syntax-case . q4d99) (quote . q4d98) (letrec-syntax . q4d96) (let-syntax . q4d95) (set! . q4d94) (import . q4d93) (begin . q4d92) (define-syntax . q4d90) (define . q4d8f)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5135 '(psyntax null-environment-5) '() '() '() '() '((make-promise . q4f92) (unquote-splicing . q4dbf) (unquote . q4dbe) (_ . q4dbd) (else . q4dbc) (=> . q4dbb) (... . q4dba) (delay . q4db7) (do . q4db5) (cond . q4db4) (let* . q4db3) (quasiquote . q4dad) (syntax-rules . q4dac) (case . q4da7) (or . q4da3) (and . q4da2) (if . q4da1) (let . q4da0) (letrec . q4d9e) (lambda . q4d9b) (quote . q4d98) (letrec-syntax . q4d96) (let-syntax . q4d95) (set! . q4d94) (begin . q4d92) (define-syntax . q4d90) (define . q4d8f)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5136 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . q5043) (string-ci>=? . q5042) (string-ci=? . q5041) (string-ci<? . q5040) (string-ci<=? . q503f) (char-whitespace? . q503e) (char-upper-case? . q503d) (char-numeric? . q503b) (char-lower-case? . q503a) (char-upcase . q5038) (char-downcase . q5035) (char-ci>? . q5034) (char-ci>=? . q5033) (char-ci=? . q5032) (char-ci<? . q5031) (char-ci<=? . q5030) (char-alphabetic? . q502f) (call-with-output-file . q5003) (call-with-input-file . q5002) (write-char . q5001) (write . q5000) (with-output-to-file . q4fff) (with-input-from-file . q4ffe) (read-char . q4ffd) (read . q4ffc) (peek-char . q4ffb) (open-output-file . q4ffa) (open-input-file . q4ff9) (newline . q4ff8) (display . q4ff7) (close-output-port . q4ff6) (close-input-port . q4ff5) (eof-object . q4ff3) (current-output-port . q4ff1) (current-input-port . q4ff0) (output-port? . q4fef) (input-port? . q4fee) (scheme-report-environment . q317c) (quotient . q4f98) (null-environment . q317a) (remainder . q4f97) (modulo . q4f96) (inexact->exact . q4f95) (force . q4f94) (exact->inexact . q4f93) (make-promise . q4f92) (string-fill! . q4f90) (string-set! . q4f8f) (set-cdr! . q4f8e) (set-car! . q4f8d) (memv . q4f87) (memq . q4f86) (member . q4f84) (assv . q4f7c) (assq . q4f7b) (assoc . q4f79) (eval . q3180) (zero? . q4e93) (vector? . q4e92) (vector-set! . q4e91) (vector-ref . q4e90) (vector-length . q4e8e) (vector-fill! . q4e8c) (vector->list . q4e8b) (vector . q4e8a) (values . q4e89) (truncate . q4e88) (tan . q4e87) (symbol? . q4e86) (symbol->string . q4e84) (substring . q4e83) (string? . q4e82) (string>? . q4e81) (string>=? . q4e80) (string=? . q4e7f) (string<? . q4e7e) (string<=? . q4e7d) (string-ref . q4e7c) (string-length . q4e7b) (string-copy . q4e79) (string-append . q4e78) (string->symbol . q4e77) (string->number . q4e76) (string->list . q4e75) (string . q4e74) (sqrt . q4e73) (sin . q4e72) (round . q4e71) (reverse . q4e70) (real? . q4e6f) (real-part . q4e6d) (rationalize . q4e6c) (rational? . q4e6b) (procedure? . q4e69) (positive? . q4e68) (pair? . q4e67) (odd? . q4e66) (numerator . q4e65) (number? . q4e64) (number->string . q4e63) (not . q4e61) (negative? . q4e60) (min . q4e5e) (max . q4e5d) (map . q4e5c) (make-vector . q4e5b) (make-string . q4e5a) (make-rectangular . q4e59) (make-polar . q4e58) (magnitude . q4e57) (log . q4e56) (list? . q4e55) (list-tail . q4e54) (list-ref . q4e53) (list->vector . q4e52) (list->string . q4e51) (list . q4e50) (length . q4e4f) (lcm . q4e4e) (integer? . q4e4d) (integer->char . q4e4b) (inexact? . q4e49) (imag-part . q4e47) (gcd . q4e46) (for-each . q4e45) (floor . q4e44) (expt . q4e42) (exp . q4e41) (exact? . q4e40) (even? . q4e3d) (eqv? . q4e3b) (equal? . q4e3a) (eq? . q4e39) (dynamic-wind . q4e38) (denominator . q4e31) (cos . q4e30) (cons . q4e2f) (complex? . q4e2e) (char? . q4e2d) (char>? . q4e2c) (char>=? . q4e2b) (char=? . q4e2a) (char<? . q4e29) (char<=? . q4e28) (char->integer . q4e27) (ceiling . q4e26) (call-with-values . q4e25) (call-with-current-continuation . q4e23) (cddddr . q4e22) (cdddar . q4e21) (cddadr . q4e20) (cddaar . q4e1f) (cdaddr . q4e1e) (cdadar . q4e1d) (cdaadr . q4e1c) (cdaaar . q4e1b) (cadddr . q4e1a) (caddar . q4e19) (cadadr . q4e18) (cadaar . q4e17) (caaddr . q4e16) (caadar . q4e15) (caaadr . q4e14) (caaaar . q4e13) (cdddr . q4e12) (cddar . q4e11) (cdadr . q4e10) (cdaar . q4e0f) (caddr . q4e0e) (cadar . q4e0d) (caadr . q4e0c) (caaar . q4e0b) (cddr . q4e0a) (cdar . q4e09) (cadr . q4e08) (caar . q4e07) (cdr . q4e06) (car . q4e05) (boolean? . q4e04) (atan . q4e02) (asin . q4e00) (apply . q4dff) (append . q4dfe) (angle . q4dfd) (acos . q4dfc) (abs . q4dfb) (/ . q4dfa) (* . q4df9) (- . q4df8) (+ . q4df7) (>= . q4df6) (> . q4df5) (= . q4df4) (<= . q4df3) (< . q4df2) (unquote-splicing . q4dbf) (unquote . q4dbe) (else . q4dbc) (=> . q4dbb) (... . q4dba) (delay . q4db7) (do . q4db5) (cond . q4db4) (let* . q4db3) (quasiquote . q4dad) (syntax-rules . q4dac) (case . q4da7) (or . q4da3) (and . q4da2) (if . q4da1) (let . q4da0) (letrec . q4d9e) (lambda . q4d9b) (quote . q4d98) (letrec-syntax . q4d96) (let-syntax . q4d95) (set! . q4d94) (begin . q4d92) (define-syntax . q4d90) (define . q4d8f)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5137 '(psyntax modules) '() '() '() '() '((module . q4d91)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5138 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5139 '(rnrs) '(6) '() '() '() '((regexp? . q50f4) (string-upcase . q504b) (string-titlecase . q504a) (string-normalize-nfkd . q5049) (string-normalize-nfkc . q5048) (string-normalize-nfd . q5047) (string-normalize-nfc . q5046) (string-foldcase . q5045) (string-downcase . q5044) (string-ci>? . q5043) (string-ci>=? . q5042) (string-ci=? . q5041) (string-ci<? . q5040) (string-ci<=? . q503f) (char-whitespace? . q503e) (char-upper-case? . q503d) (char-title-case? . q503c) (char-numeric? . q503b) (char-lower-case? . q503a) (char-general-category . q5039) (char-upcase . q5038) (char-titlecase . q5037) (char-foldcase . q5036) (char-downcase . q5035) (char-ci>? . q5034) (char-ci>=? . q5033) (char-ci=? . q5032) (char-ci<? . q5031) (char-ci<=? . q5030) (char-alphabetic? . q502f) (make-variable-transformer . q2eeb) (identifier? . q31a2) (generate-temporaries . q318e) (free-identifier=? . q3190) (syntax->datum . q31a6) (datum->syntax . q31a4) (bound-identifier=? . q3192) (record-type-descriptor? . q502e) (record-predicate . q502d) (record-mutator . q502c) (record-constructor . q502b) (record-accessor . q502a) (make-record-type-descriptor . q5029) (make-record-constructor-descriptor . q5028) (record? . q5027) (record-type-uid . q5026) (record-type-sealed? . q5025) (record-type-parent . q5024) (record-type-opaque? . q5023) (record-type-name . q5022) (record-type-generative? . q5021) (record-type-field-names . q5020) (record-rtd . q501f) (record-field-mutable? . q501e) (delete-file . q501d) (file-exists? . q501c) (vector-sort! . q501b) (vector-sort . q501a) (list-sort . q5019) (symbol-hash . q5018) (string-ci-hash . q5017) (string-hash . q5016) (equal-hash . q5015) (hashtable-equivalence-function . q5014) (make-hashtable . q5013) (hashtable-hash-function . q5012) (make-eqv-hashtable . q5011) (make-eq-hashtable . q5010) (hashtable? . q500f) (hashtable-update! . q500e) (hashtable-size . q500d) (hashtable-set! . q500c) (hashtable-ref . q500b) (hashtable-mutable? . q500a) (hashtable-keys . q5009) (hashtable-entries . q5008) (hashtable-delete! . q5007) (hashtable-copy . q5006) (hashtable-contains? . q5005) (hashtable-clear! . q5004) (call-with-output-file . q5003) (call-with-input-file . q5002) (write-char . q5001) (write . q5000) (with-output-to-file . q4fff) (with-input-from-file . q4ffe) (read-char . q4ffd) (read . q4ffc) (peek-char . q4ffb) (open-output-file . q4ffa) (open-input-file . q4ff9) (newline . q4ff8) (display . q4ff7) (close-output-port . q4ff6) (close-input-port . q4ff5) (eof-object? . q4ff4) (eof-object . q4ff3) (current-error-port . q4ff2) (current-output-port . q4ff1) (current-input-port . q4ff0) (output-port? . q4fef) (input-port? . q4fee) (utf-8-codec . q4fed) (utf-16-codec . q4fec) (transcoder-error-handling-mode . q4feb) (transcoder-eol-style . q4fea) (transcoder-codec . q4fe9) (transcoded-port . q4fe8) (textual-port? . q4fe7) (string->bytevector . q4fe6) (standard-output-port . q4fe5) (standard-input-port . q4fe4) (standard-error-port . q4fe3) (set-port-position! . q4fe2) (put-u8 . q4fe1) (put-string . q4fe0) (put-datum . q4fdf) (put-char . q4fde) (put-bytevector . q4fdd) (port? . q4fdc) (port-transcoder . q4fdb) (port-position . q4fda) (port-has-set-port-position!? . q4fd9) (port-has-port-position? . q4fd8) (port-eof? . q4fd7) (output-port-buffer-mode . q4fd6) (open-string-output-port . q4fd5) (open-string-input-port . q4fd4) (open-file-output-port . q4fd3) (open-file-input/output-port . q4fd2) (open-file-input-port . q4fd1) (open-bytevector-output-port . q4fd0) (open-bytevector-input-port . q4fcf) (native-transcoder . q4fce) (native-eol-style . q4fcd) (make-transcoder . q4fcc) (latin-1-codec . q4fcb) (make-i/o-write-error . q4fca) (make-i/o-read-error . q4fc9) (make-i/o-port-error . q4fc8) (make-i/o-invalid-position-error . q4fc7) (make-i/o-filename-error . q4fc6) (make-i/o-file-protection-error . q4fc5) (make-i/o-file-is-read-only-error . q4fc4) (make-i/o-file-does-not-exist-error . q4fc3) (make-i/o-file-already-exists-error . q4fc2) (make-i/o-error . q4fc1) (make-i/o-encoding-error . q4fc0) (make-i/o-decoding-error . q4fbf) (make-custom-textual-output-port . q4fbe) (make-custom-textual-input/output-port . q4fbd) (make-custom-textual-input-port . q4fbc) (make-custom-binary-output-port . q4fbb) (make-custom-binary-input/output-port . q4fba) (make-custom-binary-input-port . q4fb9) (make-bytevector . q4fb8) (lookahead-u8 . q4fb7) (lookahead-char . q4fb6) (i/o-write-error? . q4fb5) (i/o-read-error? . q4fb4) (i/o-port-error? . q4fb3) (i/o-invalid-position-error? . q4fb2) (i/o-filename-error? . q4fb1) (i/o-file-protection-error? . q4fb0) (i/o-file-is-read-only-error? . q4faf) (i/o-file-does-not-exist-error? . q4fae) (i/o-file-already-exists-error? . q4fad) (i/o-error? . q4fac) (i/o-error-position . q4fab) (i/o-error-port . q4faa) (i/o-error-filename . q4fa9) (i/o-encoding-error? . q4fa8) (i/o-encoding-error-char . q4fa7) (i/o-decoding-error? . q4fa6) (get-u8 . q4fa5) (get-string-n! . q4fa4) (get-string-n . q4fa3) (get-string-all . q4fa2) (get-line . q4fa1) (get-datum . q4fa0) (get-char . q4f9f) (get-bytevector-some . q4f9e) (get-bytevector-n! . q4f9d) (get-bytevector-n . q4f9c) (get-bytevector-all . q4f9b) (flush-output-port . q4f9a) (close-port . q4f99) (exit . q4f91) (command-line . q4c23) (remove . q4f8c) (remv . q4f8b) (remp . q4f8a) (remq . q4f89) (partition . q4f88) (memv . q4f87) (memq . q4f86) (memp . q4f85) (member . q4f84) (exists . q4f83) (for-all . q4f82) (fold-right . q4f81) (fold-left . q4f80) (find . q4f7f) (filter . q4f7e) (cons* . q4f7d) (assv . q4f7c) (assq . q4f7b) (assp . q4f7a) (assoc . q4f79) (call-with-string-output-port . q4f78) (call-with-port . q4f77) (call-with-bytevector-output-port . q4f76) (bytevector->string . q4f75) (buffer-mode? . q4f74) (binary-port? . q4f73) (with-exception-handler . q4f72) (raise-continuable . q4f71) (raise . q4f70) (make-enumeration . q4f6f) (enum-set=? . q4f6e) (enum-set-universe . q4f6d) (enum-set-union . q4f6c) (enum-set-subset? . q4f6b) (enum-set-projection . q4f6a) (enum-set-member? . q4f69) (enum-set-intersection . q4f68) (enum-set-indexer . q4f67) (enum-set-difference . q4f66) (enum-set-constructor . q4f65) (enum-set-complement . q4f64) (enum-set->list . q4f63) (who-condition? . q4f62) (warning? . q4f61) (violation? . q4f60) (undefined-violation? . q4f5f) (syntax-violation? . q4f5e) (syntax-violation-subform . q4f5d) (syntax-violation-form . q4f5c) (syntax-violation . q31a0) (simple-conditions . q4f5b) (serious-condition? . q4f5a) (non-continuable-violation? . q4f59) (message-condition? . q4f58) (make-who-condition . q4f57) (make-warning . q4f56) (make-violation . q4f55) (make-undefined-violation . q4f54) (make-syntax-violation . q4f53) (make-serious-condition . q4f52) (make-non-continuable-violation . q4f51) (make-message-condition . q4f50) (make-lexical-violation . q4f4f) (make-irritants-condition . q4f4e) (make-implementation-restriction-violation . q4f4d) (make-error . q4f4c) (make-assertion-violation . q4f4b) (lexical-violation? . q4f4a) (irritants-condition? . q4f49) (implementation-restriction-violation? . q4f48) (error? . q4f47) (condition-who . q4f46) (condition-predicate . q4f45) (condition-message . q4f44) (condition-irritants . q4f43) (condition-accessor . q4f42) (condition . q4f41) (assertion-violation? . q4f40) (condition? . q4f3f) (utf32->string . q4f3e) (utf16->string . q4f3d) (utf8->string . q4f3c) (uint-list->bytevector . q4f3b) (u8-list->bytevector . q4f3a) (string->utf8 . q4f39) (string->utf32 . q4f38) (string->utf16 . q4f37) (sint-list->bytevector . q4f36) (native-endianness . q4f35) (bytevector? . q4f34) (bytevector=? . q4f33) (bytevector-uint-set! . q4f32) (bytevector-uint-ref . q4f31) (bytevector-u8-set! . q4f30) (bytevector-u8-ref . q4f2f) (bytevector-u64-set! . q4f2e) (bytevector-u64-ref . q4f2d) (bytevector-u64-native-set! . q4f2c) (bytevector-u64-native-ref . q4f2b) (bytevector-u32-set! . q4f2a) (bytevector-u32-ref . q4f29) (bytevector-u32-native-set! . q4f28) (bytevector-u32-native-ref . q4f27) (bytevector-u16-set! . q4f26) (bytevector-u16-ref . q4f25) (bytevector-u16-native-set! . q4f24) (bytevector-u16-native-ref . q4f23) (bytevector-sint-set! . q4f22) (bytevector-sint-ref . q4f21) (bytevector-s8-set! . q4f20) (bytevector-s8-ref . q4f1f) (bytevector-s64-set! . q4f1e) (bytevector-s64-ref . q4f1d) (bytevector-s64-native-set! . q4f1c) (bytevector-s64-native-ref . q4f1b) (bytevector-s32-set! . q4f1a) (bytevector-s32-ref . q4f19) (bytevector-s32-native-set! . q4f18) (bytevector-s32-native-ref . q4f17) (bytevector-s16-set! . q4f16) (bytevector-s16-ref . q4f15) (bytevector-s16-native-set! . q4f14) (bytevector-s16-native-ref . q4f13) (bytevector-length . q4f12) (bytevector-ieee-single-ref . q4f11) (bytevector-ieee-single-set! . q4f10) (bytevector-ieee-single-native-set! . q4f0f) (bytevector-ieee-single-native-ref . q4f0e) (bytevector-ieee-double-set! . q4f0d) (bytevector-ieee-double-ref . q4f0c) (bytevector-ieee-double-native-set! . q4f0b) (bytevector-ieee-double-native-ref . q4f0a) (bytevector-fill! . q4f09) (bytevector-copy! . q4f08) (bytevector-copy . q4f07) (bytevector->uint-list . q4f06) (bytevector->u8-list . q4f05) (bytevector->sint-list . q4f04) (no-nans-violation? . q4f03) (no-infinities-violation? . q4f02) (make-no-nans-violation . q4f01) (make-no-infinities-violation . q4f00) (real->flonum . q4eff) (flzero? . q4efe) (fltruncate . q4efd) (fltan . q4efc) (flsqrt . q4efb) (flsin . q4efa) (flround . q4ef9) (flpositive? . q4ef8) (flonum? . q4ef7) (flodd? . q4ef6) (flnumerator . q4ef5) (flnegative? . q4ef4) (flnan? . q4ef3) (flmod0 . q4ef2) (flmod . q4ef1) (flmin . q4ef0) (flmax . q4eef) (fllog . q4eee) (flinteger? . q4eed) (flinfinite? . q4eec) (flfloor . q4eeb) (flfinite? . q4eea) (flexpt . q4ee9) (flexp . q4ee8) (fleven? . q4ee7) (fldiv0-and-mod0 . q4ee6) (fldiv0 . q4ee5) (fldiv-and-mod . q4ee4) (fldiv . q4ee3) (fldenominator . q4ee2) (flcos . q4ee1) (flceiling . q4ee0) (flatan . q4edf) (flasin . q4ede) (flacos . q4edd) (flabs . q4edc) (fl>? . q4edb) (fl>=? . q4eda) (fl=? . q4ed9) (fl<? . q4ed8) (fl<=? . q4ed7) (fl/ . q4ed6) (fl- . q4ed5) (fl+ . q4ed4) (fl* . q4ed3) (fixnum->flonum . q4ed2) (fxzero? . q4ed1) (fxxor . q4ed0) (fxrotate-bit-field . q4ecf) (fxreverse-bit-field . q4ece) (fxpositive? . q4ecd) (fxodd? . q4ecc) (fxnot . q4ecb) (fxnegative? . q4eca) (fxmod0 . q4ec9) (fxmod . q4ec8) (fxmin . q4ec7) (fxmax . q4ec6) (fxlength . q4ec5) (fxior . q4ec4) (fxif . q4ec3) (fxfirst-bit-set . q4ec2) (fxeven? . q4ec1) (fxdiv0-and-mod0 . q4ec0) (fxdiv0 . q4ebf) (fxdiv-and-mod . q4ebe) (fxdiv . q4ebd) (fxcopy-bit-field . q4ebc) (fxcopy-bit . q4ebb) (fxbit-set? . q4eba) (fxbit-field . q4eb9) (fxbit-count . q4eb8) (fxarithmetic-shift-right . q4eb7) (fxarithmetic-shift-left . q4eb6) (fxarithmetic-shift . q4eb5) (fxand . q4eb4) (fx>? . q4eb3) (fx>=? . q4eb2) (fx=? . q4eb1) (fx<? . q4eb0) (fx<=? . q4eaf) (fx-/carry . q4eae) (fx- . q4ead) (fx+/carry . q4eac) (fx+ . q4eab) (fx*/carry . q4eaa) (fx* . q4ea9) (greatest-fixnum . q4ea8) (least-fixnum . q4ea7) (fixnum-width . q4ea6) (fixnum? . q4ea5) (bitwise-rotate-bit-field . q4ea4) (bitwise-reverse-bit-field . q4ea3) (bitwise-length . q4ea2) (bitwise-if . q4ea1) (bitwise-first-bit-set . q4ea0) (bitwise-copy-bit-field . q4e9f) (bitwise-copy-bit . q4e9e) (bitwise-bit-set? . q4e9d) (bitwise-bit-field . q4e9c) (bitwise-bit-count . q4e9b) (bitwise-xor . q4e9a) (bitwise-ior . q4e99) (bitwise-and . q4e98) (bitwise-not . q4e97) (bitwise-arithmetic-shift-right . q4e96) (bitwise-arithmetic-shift-left . q4e95) (bitwise-arithmetic-shift . q4e94) (zero? . q4e93) (vector? . q4e92) (vector-set! . q4e91) (vector-ref . q4e90) (vector-map . q4e8f) (vector-length . q4e8e) (vector-for-each . q4e8d) (vector-fill! . q4e8c) (vector->list . q4e8b) (vector . q4e8a) (values . q4e89) (truncate . q4e88) (tan . q4e87) (symbol? . q4e86) (symbol=? . q4e85) (symbol->string . q4e84) (substring . q4e83) (string? . q4e82) (string>? . q4e81) (string>=? . q4e80) (string=? . q4e7f) (string<? . q4e7e) (string<=? . q4e7d) (string-ref . q4e7c) (string-length . q4e7b) (string-for-each . q4e7a) (string-copy . q4e79) (string-append . q4e78) (string->symbol . q4e77) (string->number . q4e76) (string->list . q4e75) (string . q4e74) (sqrt . q4e73) (sin . q4e72) (round . q4e71) (reverse . q4e70) (real? . q4e6f) (real-valued? . q4e6e) (real-part . q4e6d) (rationalize . q4e6c) (rational? . q4e6b) (rational-valued? . q4e6a) (procedure? . q4e69) (positive? . q4e68) (pair? . q4e67) (odd? . q4e66) (numerator . q4e65) (number? . q4e64) (number->string . q4e63) (null? . q4e62) (not . q4e61) (negative? . q4e60) (nan? . q4e5f) (min . q4e5e) (max . q4e5d) (map . q4e5c) (make-vector . q4e5b) (make-string . q4e5a) (make-rectangular . q4e59) (make-polar . q4e58) (magnitude . q4e57) (log . q4e56) (list? . q4e55) (list-tail . q4e54) (list-ref . q4e53) (list->vector . q4e52) (list->string . q4e51) (list . q4e50) (length . q4e4f) (lcm . q4e4e) (integer? . q4e4d) (integer-valued? . q4e4c) (integer->char . q4e4b) (infinite? . q4e4a) (inexact? . q4e49) (inexact . q4e48) (imag-part . q4e47) (gcd . q4e46) (for-each . q4e45) (floor . q4e44) (finite? . q4e43) (expt . q4e42) (exp . q4e41) (exact? . q4e40) (exact-integer-sqrt . q4e3f) (exact . q4e3e) (even? . q4e3d) (error . q4e3c) (eqv? . q4e3b) (equal? . q4e3a) (eq? . q4e39) (dynamic-wind . q4e38) (div0-and-mod0 . q4e37) (mod0 . q4e36) (div0 . q4e35) (div-and-mod . q4e34) (mod . q4e33) (div . q4e32) (denominator . q4e31) (cos . q4e30) (cons . q4e2f) (complex? . q4e2e) (char? . q4e2d) (char>? . q4e2c) (char>=? . q4e2b) (char=? . q4e2a) (char<? . q4e29) (char<=? . q4e28) (char->integer . q4e27) (ceiling . q4e26) (call-with-values . q4e25) (call/cc . q4e24) (call-with-current-continuation . q4e23) (cddddr . q4e22) (cdddar . q4e21) (cddadr . q4e20) (cddaar . q4e1f) (cdaddr . q4e1e) (cdadar . q4e1d) (cdaadr . q4e1c) (cdaaar . q4e1b) (cadddr . q4e1a) (caddar . q4e19) (cadadr . q4e18) (cadaar . q4e17) (caaddr . q4e16) (caadar . q4e15) (caaadr . q4e14) (caaaar . q4e13) (cdddr . q4e12) (cddar . q4e11) (cdadr . q4e10) (cdaar . q4e0f) (caddr . q4e0e) (cadar . q4e0d) (caadr . q4e0c) (caaar . q4e0b) (cddr . q4e0a) (cdar . q4e09) (cadr . q4e08) (caar . q4e07) (cdr . q4e06) (car . q4e05) (boolean? . q4e04) (boolean=? . q4e03) (atan . q4e02) (assertion-violation . q4e01) (asin . q4e00) (apply . q4dff) (append . q4dfe) (angle . q4dfd) (acos . q4dfc) (abs . q4dfb) (/ . q4dfa) (* . q4df9) (- . q4df8) (+ . q4df7) (>= . q4df6) (> . q4df5) (= . q4df4) (<= . q4df3) (< . q4df2) (&no-nans . q4df0) (&no-infinities . q4def) (&i/o-encoding . q4dee) (&i/o-decoding . q4ded) (&i/o-port . q4dec) (&i/o-file-does-not-exist . q4deb) (&i/o-file-already-exists . q4dea) (&i/o-file-is-read-only . q4de9) (&i/o-file-protection . q4de8) (&i/o-filename . q4de7) (&i/o-invalid-position . q4de6) (&i/o-write . q4de5) (&i/o-read . q4de4) (&i/o . q4de3) (&undefined . q4de2) (&syntax . q4de1) (&lexical . q4de0) (&implementation-restriction . q4ddf) (&non-continuable . q4dde) (&who . q4ddd) (&irritants . q4ddc) (&assertion . q4ddb) (&violation . q4dda) (&error . q4dd9) (&serious . q4dd8) (&warning . q4dd7) (&message . q4dd6) (&condition . q4dd5) (define-condition-type . q4dd4) (define-enumeration . q4dd3) (define-record-type . q4dd2) (parent-rtd . q4dd1) (nongenerative . q4dd0) (opaque . q4dcf) (sealed . q4dce) (protocol . q4dcd) (parent . q4dcc) (immutable . q4dcb) (mutable . q4dca) (fields . q4dc9) (error-handling-mode . q4dc8) (file-options . q4dc7) (buffer-mode . q4dc6) (eol-style . q4dc5) (guard . q4dc4) (unsyntax-splicing . q4dc1) (unsyntax . q4dc0) (unquote-splicing . q4dbf) (unquote . q4dbe) (_ . q4dbd) (else . q4dbc) (=> . q4dbb) (... . q4dba) (assert . q4db9) (endianness . q4db8) (do . q4db5) (cond . q4db4) (let* . q4db3) (let*-values . q4db2) (let-values . q4db1) (identifier-syntax . q4db0) (with-syntax . q4daf) (quasisyntax . q4dae) (quasiquote . q4dad) (syntax-rules . q4dac) (record-constructor-descriptor . q4da9) (record-type-descriptor . q4da8) (case . q4da7) (unless . q4da5) (when . q4da4) (or . q4da3) (and . q4da2) (if . q4da1) (let . q4da0) (letrec* . q4d9f) (letrec . q4d9e) (case-lambda . q4d9c) (lambda . q4d9b) (syntax . q4d9a) (syntax-case . q4d99) (quote . q4d98) (letrec-syntax . q4d96) (let-syntax . q4d95) (set! . q4d94) (begin . q4d92) (define-syntax . q4d90) (define . q4d8f)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q513a '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . q317c) (quotient . q4f98) (null-environment . q317a) (remainder . q4f97) (modulo . q4f96) (inexact->exact . q4f95) (force . q4f94) (exact->inexact . q4f93) (make-promise . q4f92) (delay . q4db7)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q513b '(rnrs control) '(6) '() '() '() '((do . q4db5) (unless . q4da5) (when . q4da4) (case-lambda . q4d9c)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q513c '(rnrs eval) '(6) '() '() '() '((eval . q3180) (environment . q3178)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q513d '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . q4f8e) (set-car! . q4f8d)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q513e '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . q4f90) (string-set! . q4f8f)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q513f '(rnrs programs) '(6) '() '() '() '((exit . q4f91) (command-line . q4c23)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5140 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . q2eeb) (identifier? . q31a2) (generate-temporaries . q318e) (free-identifier=? . q3190) (syntax->datum . q31a6) (datum->syntax . q31a4) (bound-identifier=? . q3192) (syntax-violation . q31a0) (unsyntax-splicing . q4dc1) (unsyntax . q4dc0) (_ . q4dbd) (... . q4dba) (with-syntax . q4daf) (quasisyntax . q4dae) (syntax . q4d9a) (syntax-case . q4d99)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5141 '(rnrs files) '(6) '() '() '() '((delete-file . q501d) (file-exists? . q501c) (make-i/o-write-error . q4fca) (make-i/o-read-error . q4fc9) (make-i/o-port-error . q4fc8) (make-i/o-invalid-position-error . q4fc7) (make-i/o-filename-error . q4fc6) (make-i/o-file-protection-error . q4fc5) (make-i/o-file-is-read-only-error . q4fc4) (make-i/o-file-does-not-exist-error . q4fc3) (make-i/o-file-already-exists-error . q4fc2) (make-i/o-error . q4fc1) (i/o-write-error? . q4fb5) (i/o-read-error? . q4fb4) (i/o-port-error? . q4fb3) (i/o-invalid-position-error? . q4fb2) (i/o-filename-error? . q4fb1) (i/o-file-protection-error? . q4fb0) (i/o-file-is-read-only-error? . q4faf) (i/o-file-does-not-exist-error? . q4fae) (i/o-file-already-exists-error? . q4fad) (i/o-error? . q4fac) (i/o-error-position . q4fab) (i/o-error-port . q4faa) (i/o-error-filename . q4fa9) (&i/o-port . q4dec) (&i/o-file-does-not-exist . q4deb) (&i/o-file-already-exists . q4dea) (&i/o-file-is-read-only . q4de9) (&i/o-file-protection . q4de8) (&i/o-filename . q4de7) (&i/o-invalid-position . q4de6) (&i/o-write . q4de5) (&i/o-read . q4de4) (&i/o . q4de3)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5142 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . q501b) (vector-sort . q501a) (list-sort . q5019)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5143 '(rnrs base) '(6) '() '() '() '((zero? . q4e93) (vector? . q4e92) (vector-set! . q4e91) (vector-ref . q4e90) (vector-map . q4e8f) (vector-length . q4e8e) (vector-for-each . q4e8d) (vector-fill! . q4e8c) (vector->list . q4e8b) (vector . q4e8a) (values . q4e89) (truncate . q4e88) (tan . q4e87) (symbol? . q4e86) (symbol=? . q4e85) (symbol->string . q4e84) (substring . q4e83) (string? . q4e82) (string>? . q4e81) (string>=? . q4e80) (string=? . q4e7f) (string<? . q4e7e) (string<=? . q4e7d) (string-ref . q4e7c) (string-length . q4e7b) (string-for-each . q4e7a) (string-copy . q4e79) (string-append . q4e78) (string->symbol . q4e77) (string->number . q4e76) (string->list . q4e75) (string . q4e74) (sqrt . q4e73) (sin . q4e72) (round . q4e71) (reverse . q4e70) (real? . q4e6f) (real-valued? . q4e6e) (real-part . q4e6d) (rationalize . q4e6c) (rational? . q4e6b) (rational-valued? . q4e6a) (procedure? . q4e69) (positive? . q4e68) (pair? . q4e67) (odd? . q4e66) (numerator . q4e65) (number? . q4e64) (number->string . q4e63) (null? . q4e62) (not . q4e61) (negative? . q4e60) (nan? . q4e5f) (min . q4e5e) (max . q4e5d) (map . q4e5c) (make-vector . q4e5b) (make-string . q4e5a) (make-rectangular . q4e59) (make-polar . q4e58) (magnitude . q4e57) (log . q4e56) (list? . q4e55) (list-tail . q4e54) (list-ref . q4e53) (list->vector . q4e52) (list->string . q4e51) (list . q4e50) (length . q4e4f) (lcm . q4e4e) (integer? . q4e4d) (integer-valued? . q4e4c) (integer->char . q4e4b) (infinite? . q4e4a) (inexact? . q4e49) (inexact . q4e48) (imag-part . q4e47) (gcd . q4e46) (for-each . q4e45) (floor . q4e44) (finite? . q4e43) (expt . q4e42) (exp . q4e41) (exact? . q4e40) (exact-integer-sqrt . q4e3f) (exact . q4e3e) (even? . q4e3d) (error . q4e3c) (eqv? . q4e3b) (equal? . q4e3a) (eq? . q4e39) (dynamic-wind . q4e38) (div0-and-mod0 . q4e37) (mod0 . q4e36) (div0 . q4e35) (div-and-mod . q4e34) (mod . q4e33) (div . q4e32) (denominator . q4e31) (cos . q4e30) (cons . q4e2f) (complex? . q4e2e) (char? . q4e2d) (char>? . q4e2c) (char>=? . q4e2b) (char=? . q4e2a) (char<? . q4e29) (char<=? . q4e28) (char->integer . q4e27) (ceiling . q4e26) (call-with-values . q4e25) (call/cc . q4e24) (call-with-current-continuation . q4e23) (cddddr . q4e22) (cdddar . q4e21) (cddadr . q4e20) (cddaar . q4e1f) (cdaddr . q4e1e) (cdadar . q4e1d) (cdaadr . q4e1c) (cdaaar . q4e1b) (cadddr . q4e1a) (caddar . q4e19) (cadadr . q4e18) (cadaar . q4e17) (caaddr . q4e16) (caadar . q4e15) (caaadr . q4e14) (caaaar . q4e13) (cdddr . q4e12) (cddar . q4e11) (cdadr . q4e10) (cdaar . q4e0f) (caddr . q4e0e) (cadar . q4e0d) (caadr . q4e0c) (caaar . q4e0b) (cddr . q4e0a) (cdar . q4e09) (cadr . q4e08) (caar . q4e07) (cdr . q4e06) (car . q4e05) (boolean? . q4e04) (boolean=? . q4e03) (atan . q4e02) (assertion-violation . q4e01) (asin . q4e00) (apply . q4dff) (append . q4dfe) (angle . q4dfd) (acos . q4dfc) (abs . q4dfb) (/ . q4dfa) (* . q4df9) (- . q4df8) (+ . q4df7) (>= . q4df6) (> . q4df5) (= . q4df4) (<= . q4df3) (< . q4df2) (unquote-splicing . q4dbf) (unquote . q4dbe) (_ . q4dbd) (else . q4dbc) (=> . q4dbb) (... . q4dba) (assert . q4db9) (cond . q4db4) (let* . q4db3) (let*-values . q4db2) (let-values . q4db1) (identifier-syntax . q4db0) (quasiquote . q4dad) (syntax-rules . q4dac) (case . q4da7) (or . q4da3) (and . q4da2) (if . q4da1) (let . q4da0) (letrec* . q4d9f) (letrec . q4d9e) (lambda . q4d9b) (quote . q4d98) (letrec-syntax . q4d96) (let-syntax . q4d95) (set! . q4d94) (begin . q4d92) (define-syntax . q4d90) (define . q4d8f)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5144 '(rnrs lists) '(6) '() '() '() '((remove . q4f8c) (remv . q4f8b) (remp . q4f8a) (remq . q4f89) (partition . q4f88) (memv . q4f87) (memq . q4f86) (memp . q4f85) (member . q4f84) (exists . q4f83) (for-all . q4f82) (fold-right . q4f81) (fold-left . q4f80) (find . q4f7f) (filter . q4f7e) (cons* . q4f7d) (assv . q4f7c) (assq . q4f7b) (assp . q4f7a) (assoc . q4f79)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5145 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . q5003) (call-with-input-file . q5002) (write-char . q5001) (write . q5000) (with-output-to-file . q4fff) (with-input-from-file . q4ffe) (read-char . q4ffd) (read . q4ffc) (peek-char . q4ffb) (open-output-file . q4ffa) (open-input-file . q4ff9) (newline . q4ff8) (display . q4ff7) (close-output-port . q4ff6) (close-input-port . q4ff5) (eof-object? . q4ff4) (eof-object . q4ff3) (current-error-port . q4ff2) (current-output-port . q4ff1) (current-input-port . q4ff0) (output-port? . q4fef) (input-port? . q4fee) (make-i/o-write-error . q4fca) (make-i/o-read-error . q4fc9) (make-i/o-port-error . q4fc8) (make-i/o-invalid-position-error . q4fc7) (make-i/o-filename-error . q4fc6) (make-i/o-file-protection-error . q4fc5) (make-i/o-file-is-read-only-error . q4fc4) (make-i/o-file-does-not-exist-error . q4fc3) (make-i/o-file-already-exists-error . q4fc2) (make-i/o-error . q4fc1) (i/o-write-error? . q4fb5) (i/o-read-error? . q4fb4) (i/o-port-error? . q4fb3) (i/o-invalid-position-error? . q4fb2) (i/o-filename-error? . q4fb1) (i/o-file-protection-error? . q4fb0) (i/o-file-is-read-only-error? . q4faf) (i/o-file-does-not-exist-error? . q4fae) (i/o-file-already-exists-error? . q4fad) (i/o-error? . q4fac) (i/o-error-position . q4fab) (i/o-error-port . q4faa) (i/o-error-filename . q4fa9) (&i/o-port . q4dec) (&i/o-file-does-not-exist . q4deb) (&i/o-file-already-exists . q4dea) (&i/o-file-is-read-only . q4de9) (&i/o-file-protection . q4de8) (&i/o-filename . q4de7) (&i/o-invalid-position . q4de6) (&i/o-write . q4de5) (&i/o-read . q4de4) (&i/o . q4de3)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5146 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . q4fb8) (utf32->string . q4f3e) (utf16->string . q4f3d) (utf8->string . q4f3c) (uint-list->bytevector . q4f3b) (u8-list->bytevector . q4f3a) (string->utf8 . q4f39) (string->utf32 . q4f38) (string->utf16 . q4f37) (sint-list->bytevector . q4f36) (native-endianness . q4f35) (bytevector? . q4f34) (bytevector=? . q4f33) (bytevector-uint-set! . q4f32) (bytevector-uint-ref . q4f31) (bytevector-u8-set! . q4f30) (bytevector-u8-ref . q4f2f) (bytevector-u64-set! . q4f2e) (bytevector-u64-ref . q4f2d) (bytevector-u64-native-set! . q4f2c) (bytevector-u64-native-ref . q4f2b) (bytevector-u32-set! . q4f2a) (bytevector-u32-ref . q4f29) (bytevector-u32-native-set! . q4f28) (bytevector-u32-native-ref . q4f27) (bytevector-u16-set! . q4f26) (bytevector-u16-ref . q4f25) (bytevector-u16-native-set! . q4f24) (bytevector-u16-native-ref . q4f23) (bytevector-sint-set! . q4f22) (bytevector-sint-ref . q4f21) (bytevector-s8-set! . q4f20) (bytevector-s8-ref . q4f1f) (bytevector-s64-set! . q4f1e) (bytevector-s64-ref . q4f1d) (bytevector-s64-native-set! . q4f1c) (bytevector-s64-native-ref . q4f1b) (bytevector-s32-set! . q4f1a) (bytevector-s32-ref . q4f19) (bytevector-s32-native-set! . q4f18) (bytevector-s32-native-ref . q4f17) (bytevector-s16-set! . q4f16) (bytevector-s16-ref . q4f15) (bytevector-s16-native-set! . q4f14) (bytevector-s16-native-ref . q4f13) (bytevector-length . q4f12) (bytevector-ieee-single-ref . q4f11) (bytevector-ieee-single-set! . q4f10) (bytevector-ieee-single-native-set! . q4f0f) (bytevector-ieee-single-native-ref . q4f0e) (bytevector-ieee-double-set! . q4f0d) (bytevector-ieee-double-ref . q4f0c) (bytevector-ieee-double-native-set! . q4f0b) (bytevector-ieee-double-native-ref . q4f0a) (bytevector-fill! . q4f09) (bytevector-copy! . q4f08) (bytevector-copy . q4f07) (bytevector->uint-list . q4f06) (bytevector->u8-list . q4f05) (bytevector->sint-list . q4f04) (endianness . q4db8)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5147 '(rnrs unicode) '(6) '() '() '() '((string-upcase . q504b) (string-titlecase . q504a) (string-normalize-nfkd . q5049) (string-normalize-nfkc . q5048) (string-normalize-nfd . q5047) (string-normalize-nfc . q5046) (string-foldcase . q5045) (string-downcase . q5044) (string-ci>? . q5043) (string-ci>=? . q5042) (string-ci=? . q5041) (string-ci<? . q5040) (string-ci<=? . q503f) (char-whitespace? . q503e) (char-upper-case? . q503d) (char-title-case? . q503c) (char-numeric? . q503b) (char-lower-case? . q503a) (char-general-category . q5039) (char-upcase . q5038) (char-titlecase . q5037) (char-foldcase . q5036) (char-downcase . q5035) (char-ci>? . q5034) (char-ci>=? . q5033) (char-ci=? . q5032) (char-ci<? . q5031) (char-ci<=? . q5030) (char-alphabetic? . q502f)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5148 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . q4f72) (raise-continuable . q4f71) (raise . q4f70) (guard . q4dc4) (else . q4dbc) (=> . q4dbb)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5149 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . q4ea4) (bitwise-reverse-bit-field . q4ea3) (bitwise-length . q4ea2) (bitwise-if . q4ea1) (bitwise-first-bit-set . q4ea0) (bitwise-copy-bit-field . q4e9f) (bitwise-copy-bit . q4e9e) (bitwise-bit-set? . q4e9d) (bitwise-bit-field . q4e9c) (bitwise-bit-count . q4e9b) (bitwise-xor . q4e9a) (bitwise-ior . q4e99) (bitwise-and . q4e98) (bitwise-not . q4e97) (bitwise-arithmetic-shift-right . q4e96) (bitwise-arithmetic-shift-left . q4e95) (bitwise-arithmetic-shift . q4e94)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q514a '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . q4ed1) (fxxor . q4ed0) (fxrotate-bit-field . q4ecf) (fxreverse-bit-field . q4ece) (fxpositive? . q4ecd) (fxodd? . q4ecc) (fxnot . q4ecb) (fxnegative? . q4eca) (fxmod0 . q4ec9) (fxmod . q4ec8) (fxmin . q4ec7) (fxmax . q4ec6) (fxlength . q4ec5) (fxior . q4ec4) (fxif . q4ec3) (fxfirst-bit-set . q4ec2) (fxeven? . q4ec1) (fxdiv0-and-mod0 . q4ec0) (fxdiv0 . q4ebf) (fxdiv-and-mod . q4ebe) (fxdiv . q4ebd) (fxcopy-bit-field . q4ebc) (fxcopy-bit . q4ebb) (fxbit-set? . q4eba) (fxbit-field . q4eb9) (fxbit-count . q4eb8) (fxarithmetic-shift-right . q4eb7) (fxarithmetic-shift-left . q4eb6) (fxarithmetic-shift . q4eb5) (fxand . q4eb4) (fx>? . q4eb3) (fx>=? . q4eb2) (fx=? . q4eb1) (fx<? . q4eb0) (fx<=? . q4eaf) (fx-/carry . q4eae) (fx- . q4ead) (fx+/carry . q4eac) (fx+ . q4eab) (fx*/carry . q4eaa) (fx* . q4ea9) (greatest-fixnum . q4ea8) (least-fixnum . q4ea7) (fixnum-width . q4ea6) (fixnum? . q4ea5)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q514b '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . q4f03) (no-infinities-violation? . q4f02) (make-no-nans-violation . q4f01) (make-no-infinities-violation . q4f00) (real->flonum . q4eff) (flzero? . q4efe) (fltruncate . q4efd) (fltan . q4efc) (flsqrt . q4efb) (flsin . q4efa) (flround . q4ef9) (flpositive? . q4ef8) (flonum? . q4ef7) (flodd? . q4ef6) (flnumerator . q4ef5) (flnegative? . q4ef4) (flnan? . q4ef3) (flmod0 . q4ef2) (flmod . q4ef1) (flmin . q4ef0) (flmax . q4eef) (fllog . q4eee) (flinteger? . q4eed) (flinfinite? . q4eec) (flfloor . q4eeb) (flfinite? . q4eea) (flexpt . q4ee9) (flexp . q4ee8) (fleven? . q4ee7) (fldiv0-and-mod0 . q4ee6) (fldiv0 . q4ee5) (fldiv-and-mod . q4ee4) (fldiv . q4ee3) (fldenominator . q4ee2) (flcos . q4ee1) (flceiling . q4ee0) (flatan . q4edf) (flasin . q4ede) (flacos . q4edd) (flabs . q4edc) (fl>? . q4edb) (fl>=? . q4eda) (fl=? . q4ed9) (fl<? . q4ed8) (fl<=? . q4ed7) (fl/ . q4ed6) (fl- . q4ed5) (fl+ . q4ed4) (fl* . q4ed3) (fixnum->flonum . q4ed2) (&no-nans . q4df0) (&no-infinities . q4def)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q514c '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . q5018) (string-ci-hash . q5017) (string-hash . q5016) (equal-hash . q5015) (hashtable-equivalence-function . q5014) (make-hashtable . q5013) (hashtable-hash-function . q5012) (make-eqv-hashtable . q5011) (make-eq-hashtable . q5010) (hashtable? . q500f) (hashtable-update! . q500e) (hashtable-size . q500d) (hashtable-set! . q500c) (hashtable-ref . q500b) (hashtable-mutable? . q500a) (hashtable-keys . q5009) (hashtable-entries . q5008) (hashtable-delete! . q5007) (hashtable-copy . q5006) (hashtable-contains? . q5005) (hashtable-clear! . q5004)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q514d '(rnrs io ports) '(6) '() '() '() '((eof-object? . q4ff4) (eof-object . q4ff3) (current-error-port . q4ff2) (current-output-port . q4ff1) (current-input-port . q4ff0) (output-port? . q4fef) (input-port? . q4fee) (utf-8-codec . q4fed) (utf-16-codec . q4fec) (transcoder-error-handling-mode . q4feb) (transcoder-eol-style . q4fea) (transcoder-codec . q4fe9) (transcoded-port . q4fe8) (textual-port? . q4fe7) (string->bytevector . q4fe6) (standard-output-port . q4fe5) (standard-input-port . q4fe4) (standard-error-port . q4fe3) (set-port-position! . q4fe2) (put-u8 . q4fe1) (put-string . q4fe0) (put-datum . q4fdf) (put-char . q4fde) (put-bytevector . q4fdd) (port? . q4fdc) (port-transcoder . q4fdb) (port-position . q4fda) (port-has-set-port-position!? . q4fd9) (port-has-port-position? . q4fd8) (port-eof? . q4fd7) (output-port-buffer-mode . q4fd6) (open-string-output-port . q4fd5) (open-string-input-port . q4fd4) (open-file-output-port . q4fd3) (open-file-input/output-port . q4fd2) (open-file-input-port . q4fd1) (open-bytevector-output-port . q4fd0) (open-bytevector-input-port . q4fcf) (native-transcoder . q4fce) (native-eol-style . q4fcd) (make-transcoder . q4fcc) (latin-1-codec . q4fcb) (make-i/o-write-error . q4fca) (make-i/o-read-error . q4fc9) (make-i/o-port-error . q4fc8) (make-i/o-invalid-position-error . q4fc7) (make-i/o-filename-error . q4fc6) (make-i/o-file-protection-error . q4fc5) (make-i/o-file-is-read-only-error . q4fc4) (make-i/o-file-does-not-exist-error . q4fc3) (make-i/o-file-already-exists-error . q4fc2) (make-i/o-error . q4fc1) (make-i/o-encoding-error . q4fc0) (make-i/o-decoding-error . q4fbf) (make-custom-textual-output-port . q4fbe) (make-custom-textual-input/output-port . q4fbd) (make-custom-textual-input-port . q4fbc) (make-custom-binary-output-port . q4fbb) (make-custom-binary-input/output-port . q4fba) (make-custom-binary-input-port . q4fb9) (lookahead-u8 . q4fb7) (lookahead-char . q4fb6) (i/o-write-error? . q4fb5) (i/o-read-error? . q4fb4) (i/o-port-error? . q4fb3) (i/o-invalid-position-error? . q4fb2) (i/o-filename-error? . q4fb1) (i/o-file-protection-error? . q4fb0) (i/o-file-is-read-only-error? . q4faf) (i/o-file-does-not-exist-error? . q4fae) (i/o-file-already-exists-error? . q4fad) (i/o-error? . q4fac) (i/o-error-position . q4fab) (i/o-error-port . q4faa) (i/o-error-filename . q4fa9) (i/o-encoding-error? . q4fa8) (i/o-encoding-error-char . q4fa7) (i/o-decoding-error? . q4fa6) (get-u8 . q4fa5) (get-string-n! . q4fa4) (get-string-n . q4fa3) (get-string-all . q4fa2) (get-line . q4fa1) (get-datum . q4fa0) (get-char . q4f9f) (get-bytevector-some . q4f9e) (get-bytevector-n! . q4f9d) (get-bytevector-n . q4f9c) (get-bytevector-all . q4f9b) (flush-output-port . q4f9a) (close-port . q4f99) (call-with-string-output-port . q4f78) (call-with-port . q4f77) (call-with-bytevector-output-port . q4f76) (bytevector->string . q4f75) (buffer-mode? . q4f74) (binary-port? . q4f73) (&i/o-encoding . q4dee) (&i/o-decoding . q4ded) (&i/o-port . q4dec) (&i/o-file-does-not-exist . q4deb) (&i/o-file-already-exists . q4dea) (&i/o-file-is-read-only . q4de9) (&i/o-file-protection . q4de8) (&i/o-filename . q4de7) (&i/o-invalid-position . q4de6) (&i/o-write . q4de5) (&i/o-read . q4de4) (&i/o . q4de3) (error-handling-mode . q4dc8) (file-options . q4dc7) (buffer-mode . q4dc6) (eol-style . q4dc5)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q514e '(rnrs enums) '(6) '() '() '() '((make-enumeration . q4f6f) (enum-set=? . q4f6e) (enum-set-universe . q4f6d) (enum-set-union . q4f6c) (enum-set-subset? . q4f6b) (enum-set-projection . q4f6a) (enum-set-member? . q4f69) (enum-set-intersection . q4f68) (enum-set-indexer . q4f67) (enum-set-difference . q4f66) (enum-set-constructor . q4f65) (enum-set-complement . q4f64) (enum-set->list . q4f63) (define-enumeration . q4dd3)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q514f '(rnrs conditions) '(6) '() '() '() '((who-condition? . q4f62) (warning? . q4f61) (violation? . q4f60) (undefined-violation? . q4f5f) (syntax-violation? . q4f5e) (syntax-violation-subform . q4f5d) (syntax-violation-form . q4f5c) (syntax-violation . q31a0) (simple-conditions . q4f5b) (serious-condition? . q4f5a) (non-continuable-violation? . q4f59) (message-condition? . q4f58) (make-who-condition . q4f57) (make-warning . q4f56) (make-violation . q4f55) (make-undefined-violation . q4f54) (make-syntax-violation . q4f53) (make-serious-condition . q4f52) (make-non-continuable-violation . q4f51) (make-message-condition . q4f50) (make-lexical-violation . q4f4f) (make-irritants-condition . q4f4e) (make-implementation-restriction-violation . q4f4d) (make-error . q4f4c) (make-assertion-violation . q4f4b) (lexical-violation? . q4f4a) (irritants-condition? . q4f49) (implementation-restriction-violation? . q4f48) (error? . q4f47) (condition-who . q4f46) (condition-predicate . q4f45) (condition-message . q4f44) (condition-irritants . q4f43) (condition-accessor . q4f42) (condition . q4f41) (assertion-violation? . q4f40) (condition? . q4f3f) (&undefined . q4de2) (&syntax . q4de1) (&lexical . q4de0) (&implementation-restriction . q4ddf) (&non-continuable . q4dde) (&who . q4ddd) (&irritants . q4ddc) (&assertion . q4ddb) (&violation . q4dda) (&error . q4dd9) (&serious . q4dd8) (&warning . q4dd7) (&message . q4dd6) (&condition . q4dd5) (define-condition-type . q4dd4)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5150 '(rnrs records inspection) '(6) '() '() '() '((record? . q5027) (record-type-uid . q5026) (record-type-sealed? . q5025) (record-type-parent . q5024) (record-type-opaque? . q5023) (record-type-name . q5022) (record-type-generative? . q5021) (record-type-field-names . q5020) (record-rtd . q501f) (record-field-mutable? . q501e)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5151 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . q502e) (record-predicate . q502d) (record-mutator . q502c) (record-constructor . q502b) (record-accessor . q502a) (make-record-type-descriptor . q5029) (make-record-constructor-descriptor . q5028)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5152 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . q4dd2) (parent-rtd . q4dd1) (nongenerative . q4dd0) (opaque . q4dcf) (sealed . q4dce) (protocol . q4dcd) (parent . q4dcc) (immutable . q4dcb) (mutable . q4dca) (fields . q4dc9) (record-constructor-descriptor . q4da9) (record-type-descriptor . q4da8)) '() values values '#f '#f '#t '#f) (q2cd4@q2b20@install-library 'q5153 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . q5133) (&no-nans-rtd . q5132) (&no-infinities-rcd . q5131) (&no-infinities-rtd . q5130) (&i/o-encoding-rcd . q512f) (&i/o-encoding-rtd . q512e) (&i/o-decoding-rcd . q512d) (&i/o-decoding-rtd . q512c) (&i/o-port-rcd . q512b) (&i/o-port-rtd . q512a) (&i/o-file-does-not-exist-rcd . q5129) (&i/o-file-does-not-exist-rtd . q5128) (&i/o-file-already-exists-rcd . q5127) (&i/o-file-already-exists-rtd . q5126) (&i/o-file-is-read-only-rcd . q5125) (&i/o-file-is-read-only-rtd . q5124) (&i/o-file-protection-rcd . q5123) (&i/o-file-protection-rtd . q5122) (&i/o-filename-rcd . q5121) (&i/o-filename-rtd . q5120) (&i/o-invalid-position-rcd . q511f) (&i/o-invalid-position-rtd . q511e) (&i/o-write-rcd . q511d) (&i/o-write-rtd . q511c) (&i/o-read-rcd . q511b) (&i/o-read-rtd . q511a) (&i/o-rcd . q5119) (&i/o-rtd . q5118) (&undefined-rcd . q5117) (&undefined-rtd . q5116) (&syntax-rcd . q5115) (&syntax-rtd . q5114) (&lexical-rcd . q5113) (&lexical-rtd . q5112) (&implementation-restriction-rcd . q5111) (&implementation-restriction-rtd . q5110) (&non-continuable-rcd . q510f) (&non-continuable-rtd . q510e) (&who-rcd . q510d) (&who-rtd . q510c) (&irritants-rcd . q510b) (&irritants-rtd . q510a) (&assertion-rcd . q5109) (&assertion-rtd . q5108) (&violation-rcd . q5107) (&violation-rtd . q5106) (&error-rcd . q5105) (&error-rtd . q5104) (&serious-rcd . q5103) (&serious-rtd . q5102) (&warning-rcd . q5101) (&warning-rtd . q5100) (&message-rcd . q50ff) (&message-rtd . q50fe) (&condition-rcd . q50fd) (&condition-rtd . q50fc) (syntax-error . q319c) (syntax-dispatch . q30c0) (pretty-print . q50fb) (eval-core . q50fa) (set-symbol-value! . q50f9) (symbol-value . q50f8) (gensym . q50f7) (void . q50f6) (load . q4c29) (interaction-environment . q31ae) (char-ready? . q50f5) (regexp? . q50f4) (read-line . q50f3) (gensym-prefix-set! . q50f2) (ungensym . q50f1) (alist->eq-hash-table . q50f0) (assoc-ref . q50ef) (print . q50ee) (format . q50ed) (host-os . q50ec) (library-path . q2aff) (standard-library-path . q50eb) (ssl-supported? . q50ea) (ssl-socket? . q50e9) (socket-sslize! . q50e8) (%monapi-name-whereis . q50e7) (%monapi-message-send . q50e6) (file-newer? . q50e5) (stat-mtime . q50e4) (write-to-file . q50e3) (file->list . q50e2) (file->string . q50e1) (digit->integer . q50e0) (call-with-string-input-port . q50df) (call-with-string-io . q50de) (string-split . q50dd) (bytevector-for-each . q50dc) (string->regexp . q50db) (rxmatch . q50da) (regexp-replace-all . q50d9) (hashtable-for-each . q50d8) (mosh-cache-dir . q28e9) (call-process . q50d7) (local-tz-offset . q50d6) (microseconds . q50d5) (directory-list . q50d4) (set-current-directory! . q50d3) (expand-path . q50d2) (current-directory . q50d1) (%spawn . q50d0) (%waitpid . q50cf) (simple-struct-name . q50ce) (simple-struct-set! . q50cd) (simple-struct-ref . q50cc) (make-simple-struct . q50cb) (simple-struct? . q50ca) (pointer-ref-c-int64 . q50c9) (pointer-ref-c-int32 . q50c8) (pointer-ref-c-int16 . q50c7) (pointer-ref-c-int8 . q50c6) (pointer-ref-c-uint64 . q50c5) (pointer-ref-c-uint32 . q50c4) (pointer-ref-c-uint16 . q50c3) (pointer-ref-c-uint8 . q50c2) (pointer-set-c-uint64! . q50c1) (pointer-set-c-uint32! . q50c0) (pointer-set-c-uint16! . q50bf) (pointer-set-c-uint8! . q50be) (pointer-set-c-int64! . q50bd) (pointer-set-c-int32! . q50bc) (pointer-set-c-int16! . q50bb) (pointer-set-c-int8! . q50ba) (pointer-set-c-pointer! . q50b9) (pointer-set-c-double! . q50b8) (pointer-set-c-float! . q50b7) (pointer-set-c-long-long! . q50b6) (pointer-set-c-long! . q50b5) (pointer-set-c-int! . q50b4) (pointer-set-c-short! . q50b3) (pointer-set-c-char! . q50b2) (pointer-ref-c-pointer . q50b1) (pointer-ref-c-double . q50b0) (pointer-ref-c-float . q50af) (pointer-ref-c-unsigned-long-long . q50ae) (pointer-ref-c-signed-long-long . q50ad) (pointer-ref-c-unsigned-long . q50ac) (pointer-ref-c-signed-long . q50ab) (pointer-ref-c-unsigned-int . q50aa) (pointer-ref-c-signed-int . q50a9) (pointer-ref-c-unsigned-short . q50a8) (pointer-ref-c-signed-short . q50a7) (pointer-ref-c-unsigned-char . q50a6) (pointer-ref-c-signed-char . q50a5) (pointer->integer . q50a4) (integer->pointer . q50a3) (pointer? . q50a2) (shared-errno . q50a1) (%ffi-free-c-callback-trampoline . q50a0) (%ffi-make-c-callback-trampoline . q509f) (%ffi-free . q509e) (%ffi-malloc . q509d) (%ffi-supported? . q509c) (%ffi-pointer->string . q509b) (%ffi-call . q509a) (%ffi-lookup . q5099) (%ffi-open . q5098) (null-terminated-utf8->string . q5097) (null-terminated-bytevector->string . q5096) (%exec . q5095) (%fork . q5094) (%pipe . q5093) (p . q5092) (open-output-string . q5091) (get-output-string . q5090) (file-stat-ctime . q508f) (file-stat-atime . q508e) (file-stat-mtime . q508d) (file-size-in-bytes . q508c) (file-writable? . q508b) (file-executable? . q508a) (file-readable? . q5089) (file-regular? . q5088) (file-symbolic-link? . q5087) (file-directory? . q5086) (create-symbolic-link . q5085) (rename-file . q5084) (delete-directory . q5083) (create-directory . q5082) (create-mosh-cache-dir . q5081) (get-environment-variables . q5080) (current-exception-handler . q507f) (get-environment-variable . q507e) (join-wraps . q507d) (id->real-label . q507c) (same-marks? . q507b) (same-marks*? . q507a) (get-timeofday . q5079) (get-command-line . q5078) (sys-display . q5077) (whereis . q5076) (register . q5075) (vm-join! . q5074) (vm-set-value! . q5073) (vm? . q5072) (main-vm? . q5071) (vm-eval . q5070) (vm-self . q506f) (vm-start! . q506e) (make-vm . q506d) (mutex-try-lock! . q506c) (mutex-unlock! . q506b) (mutex-lock! . q506a) (mutex? . q5069) (make-mutex . q5068) (condition-variable-notify-all! . q5067) (condition-variable-notify! . q5066) (condition-variable-wait! . q5065) (make-condition-variable . q5064) (write/ss . q5063) (mosh-executable-path . q5062) (make-file-options . q5061) (source-info . q5060) (make-compiler-instruction . q505f) (make-instruction . q505e) (set-source-info! . q505d) (bignum? . q505c) (fast-equal? . q505b) (fasl-read . q505a) (fasl-write . q5059) (time-usage . q5058) (os-constant . q5057) (disasm . q5056) (make-parameter . q28e7) (socket-port . q5055) (socket-shutdown . q5054) (socket-close . q5053) (socket-send . q5052) (socket-recv! . q5051) (socket-recv . q5050) (make-server-socket . q504f) (make-client-socket . q504e) (socket-accept . q504d) (socket? . q504c) (string-upcase . q504b) (string-titlecase . q504a) (string-normalize-nfkd . q5049) (string-normalize-nfkc . q5048) (string-normalize-nfd . q5047) (string-normalize-nfc . q5046) (string-foldcase . q5045) (string-downcase . q5044) (string-ci>? . q5043) (string-ci>=? . q5042) (string-ci=? . q5041) (string-ci<? . q5040) (string-ci<=? . q503f) (char-whitespace? . q503e) (char-upper-case? . q503d) (char-title-case? . q503c) (char-numeric? . q503b) (char-lower-case? . q503a) (char-general-category . q5039) (char-upcase . q5038) (char-titlecase . q5037) (char-foldcase . q5036) (char-downcase . q5035) (char-ci>? . q5034) (char-ci>=? . q5033) (char-ci=? . q5032) (char-ci<? . q5031) (char-ci<=? . q5030) (char-alphabetic? . q502f) (make-variable-transformer . q2eeb) (identifier? . q31a2) (generate-temporaries . q318e) (free-identifier=? . q3190) (syntax->datum . q31a6) (datum->syntax . q31a4) (bound-identifier=? . q3192) (record-type-descriptor? . q502e) (record-predicate . q502d) (record-mutator . q502c) (record-constructor . q502b) (record-accessor . q502a) (make-record-type-descriptor . q5029) (make-record-constructor-descriptor . q5028) (record? . q5027) (record-type-uid . q5026) (record-type-sealed? . q5025) (record-type-parent . q5024) (record-type-opaque? . q5023) (record-type-name . q5022) (record-type-generative? . q5021) (record-type-field-names . q5020) (record-rtd . q501f) (record-field-mutable? . q501e) (delete-file . q501d) (file-exists? . q501c) (vector-sort! . q501b) (vector-sort . q501a) (list-sort . q5019) (symbol-hash . q5018) (string-ci-hash . q5017) (string-hash . q5016) (equal-hash . q5015) (hashtable-equivalence-function . q5014) (make-hashtable . q5013) (hashtable-hash-function . q5012) (make-eqv-hashtable . q5011) (make-eq-hashtable . q5010) (hashtable? . q500f) (hashtable-update! . q500e) (hashtable-size . q500d) (hashtable-set! . q500c) (hashtable-ref . q500b) (hashtable-mutable? . q500a) (hashtable-keys . q5009) (hashtable-entries . q5008) (hashtable-delete! . q5007) (hashtable-copy . q5006) (hashtable-contains? . q5005) (hashtable-clear! . q5004) (call-with-output-file . q5003) (call-with-input-file . q5002) (write-char . q5001) (write . q5000) (with-output-to-file . q4fff) (with-input-from-file . q4ffe) (read-char . q4ffd) (read . q4ffc) (peek-char . q4ffb) (open-output-file . q4ffa) (open-input-file . q4ff9) (newline . q4ff8) (display . q4ff7) (close-output-port . q4ff6) (close-input-port . q4ff5) (eof-object? . q4ff4) (eof-object . q4ff3) (current-error-port . q4ff2) (current-output-port . q4ff1) (current-input-port . q4ff0) (output-port? . q4fef) (input-port? . q4fee) (utf-8-codec . q4fed) (utf-16-codec . q4fec) (transcoder-error-handling-mode . q4feb) (transcoder-eol-style . q4fea) (transcoder-codec . q4fe9) (transcoded-port . q4fe8) (textual-port? . q4fe7) (string->bytevector . q4fe6) (standard-output-port . q4fe5) (standard-input-port . q4fe4) (standard-error-port . q4fe3) (set-port-position! . q4fe2) (put-u8 . q4fe1) (put-string . q4fe0) (put-datum . q4fdf) (put-char . q4fde) (put-bytevector . q4fdd) (port? . q4fdc) (port-transcoder . q4fdb) (port-position . q4fda) (port-has-set-port-position!? . q4fd9) (port-has-port-position? . q4fd8) (port-eof? . q4fd7) (output-port-buffer-mode . q4fd6) (open-string-output-port . q4fd5) (open-string-input-port . q4fd4) (open-file-output-port . q4fd3) (open-file-input/output-port . q4fd2) (open-file-input-port . q4fd1) (open-bytevector-output-port . q4fd0) (open-bytevector-input-port . q4fcf) (native-transcoder . q4fce) (native-eol-style . q4fcd) (make-transcoder . q4fcc) (latin-1-codec . q4fcb) (make-i/o-write-error . q4fca) (make-i/o-read-error . q4fc9) (make-i/o-port-error . q4fc8) (make-i/o-invalid-position-error . q4fc7) (make-i/o-filename-error . q4fc6) (make-i/o-file-protection-error . q4fc5) (make-i/o-file-is-read-only-error . q4fc4) (make-i/o-file-does-not-exist-error . q4fc3) (make-i/o-file-already-exists-error . q4fc2) (make-i/o-error . q4fc1) (make-i/o-encoding-error . q4fc0) (make-i/o-decoding-error . q4fbf) (make-custom-textual-output-port . q4fbe) (make-custom-textual-input/output-port . q4fbd) (make-custom-textual-input-port . q4fbc) (make-custom-binary-output-port . q4fbb) (make-custom-binary-input/output-port . q4fba) (make-custom-binary-input-port . q4fb9) (make-bytevector . q4fb8) (lookahead-u8 . q4fb7) (lookahead-char . q4fb6) (i/o-write-error? . q4fb5) (i/o-read-error? . q4fb4) (i/o-port-error? . q4fb3) (i/o-invalid-position-error? . q4fb2) (i/o-filename-error? . q4fb1) (i/o-file-protection-error? . q4fb0) (i/o-file-is-read-only-error? . q4faf) (i/o-file-does-not-exist-error? . q4fae) (i/o-file-already-exists-error? . q4fad) (i/o-error? . q4fac) (i/o-error-position . q4fab) (i/o-error-port . q4faa) (i/o-error-filename . q4fa9) (i/o-encoding-error? . q4fa8) (i/o-encoding-error-char . q4fa7) (i/o-decoding-error? . q4fa6) (get-u8 . q4fa5) (get-string-n! . q4fa4) (get-string-n . q4fa3) (get-string-all . q4fa2) (get-line . q4fa1) (get-datum . q4fa0) (get-char . q4f9f) (get-bytevector-some . q4f9e) (get-bytevector-n! . q4f9d) (get-bytevector-n . q4f9c) (get-bytevector-all . q4f9b) (flush-output-port . q4f9a) (close-port . q4f99) (scheme-report-environment . q317c) (quotient . q4f98) (null-environment . q317a) (remainder . q4f97) (modulo . q4f96) (inexact->exact . q4f95) (force . q4f94) (exact->inexact . q4f93) (make-promise . q4f92) (exit . q4f91) (command-line . q4c23) (string-fill! . q4f90) (string-set! . q4f8f) (set-cdr! . q4f8e) (set-car! . q4f8d) (remove . q4f8c) (remv . q4f8b) (remp . q4f8a) (remq . q4f89) (partition . q4f88) (memv . q4f87) (memq . q4f86) (memp . q4f85) (member . q4f84) (exists . q4f83) (for-all . q4f82) (fold-right . q4f81) (fold-left . q4f80) (find . q4f7f) (filter . q4f7e) (cons* . q4f7d) (assv . q4f7c) (assq . q4f7b) (assp . q4f7a) (assoc . q4f79) (call-with-string-output-port . q4f78) (call-with-port . q4f77) (call-with-bytevector-output-port . q4f76) (bytevector->string . q4f75) (buffer-mode? . q4f74) (binary-port? . q4f73) (with-exception-handler . q4f72) (raise-continuable . q4f71) (raise . q4f70) (eval . q3180) (environment . q3178) (make-enumeration . q4f6f) (enum-set=? . q4f6e) (enum-set-universe . q4f6d) (enum-set-union . q4f6c) (enum-set-subset? . q4f6b) (enum-set-projection . q4f6a) (enum-set-member? . q4f69) (enum-set-intersection . q4f68) (enum-set-indexer . q4f67) (enum-set-difference . q4f66) (enum-set-constructor . q4f65) (enum-set-complement . q4f64) (enum-set->list . q4f63) (who-condition? . q4f62) (warning? . q4f61) (violation? . q4f60) (undefined-violation? . q4f5f) (syntax-violation? . q4f5e) (syntax-violation-subform . q4f5d) (syntax-violation-form . q4f5c) (syntax-violation . q31a0) (simple-conditions . q4f5b) (serious-condition? . q4f5a) (non-continuable-violation? . q4f59) (message-condition? . q4f58) (make-who-condition . q4f57) (make-warning . q4f56) (make-violation . q4f55) (make-undefined-violation . q4f54) (make-syntax-violation . q4f53) (make-serious-condition . q4f52) (make-non-continuable-violation . q4f51) (make-message-condition . q4f50) (make-lexical-violation . q4f4f) (make-irritants-condition . q4f4e) (make-implementation-restriction-violation . q4f4d) (make-error . q4f4c) (make-assertion-violation . q4f4b) (lexical-violation? . q4f4a) (irritants-condition? . q4f49) (implementation-restriction-violation? . q4f48) (error? . q4f47) (condition-who . q4f46) (condition-predicate . q4f45) (condition-message . q4f44) (condition-irritants . q4f43) (condition-accessor . q4f42) (condition . q4f41) (assertion-violation? . q4f40) (condition? . q4f3f) (utf32->string . q4f3e) (utf16->string . q4f3d) (utf8->string . q4f3c) (uint-list->bytevector . q4f3b) (u8-list->bytevector . q4f3a) (string->utf8 . q4f39) (string->utf32 . q4f38) (string->utf16 . q4f37) (sint-list->bytevector . q4f36) (native-endianness . q4f35) (bytevector? . q4f34) (bytevector=? . q4f33) (bytevector-uint-set! . q4f32) (bytevector-uint-ref . q4f31) (bytevector-u8-set! . q4f30) (bytevector-u8-ref . q4f2f) (bytevector-u64-set! . q4f2e) (bytevector-u64-ref . q4f2d) (bytevector-u64-native-set! . q4f2c) (bytevector-u64-native-ref . q4f2b) (bytevector-u32-set! . q4f2a) (bytevector-u32-ref . q4f29) (bytevector-u32-native-set! . q4f28) (bytevector-u32-native-ref . q4f27) (bytevector-u16-set! . q4f26) (bytevector-u16-ref . q4f25) (bytevector-u16-native-set! . q4f24) (bytevector-u16-native-ref . q4f23) (bytevector-sint-set! . q4f22) (bytevector-sint-ref . q4f21) (bytevector-s8-set! . q4f20) (bytevector-s8-ref . q4f1f) (bytevector-s64-set! . q4f1e) (bytevector-s64-ref . q4f1d) (bytevector-s64-native-set! . q4f1c) (bytevector-s64-native-ref . q4f1b) (bytevector-s32-set! . q4f1a) (bytevector-s32-ref . q4f19) (bytevector-s32-native-set! . q4f18) (bytevector-s32-native-ref . q4f17) (bytevector-s16-set! . q4f16) (bytevector-s16-ref . q4f15) (bytevector-s16-native-set! . q4f14) (bytevector-s16-native-ref . q4f13) (bytevector-length . q4f12) (bytevector-ieee-single-ref . q4f11) (bytevector-ieee-single-set! . q4f10) (bytevector-ieee-single-native-set! . q4f0f) (bytevector-ieee-single-native-ref . q4f0e) (bytevector-ieee-double-set! . q4f0d) (bytevector-ieee-double-ref . q4f0c) (bytevector-ieee-double-native-set! . q4f0b) (bytevector-ieee-double-native-ref . q4f0a) (bytevector-fill! . q4f09) (bytevector-copy! . q4f08) (bytevector-copy . q4f07) (bytevector->uint-list . q4f06) (bytevector->u8-list . q4f05) (bytevector->sint-list . q4f04) (no-nans-violation? . q4f03) (no-infinities-violation? . q4f02) (make-no-nans-violation . q4f01) (make-no-infinities-violation . q4f00) (real->flonum . q4eff) (flzero? . q4efe) (fltruncate . q4efd) (fltan . q4efc) (flsqrt . q4efb) (flsin . q4efa) (flround . q4ef9) (flpositive? . q4ef8) (flonum? . q4ef7) (flodd? . q4ef6) (flnumerator . q4ef5) (flnegative? . q4ef4) (flnan? . q4ef3) (flmod0 . q4ef2) (flmod . q4ef1) (flmin . q4ef0) (flmax . q4eef) (fllog . q4eee) (flinteger? . q4eed) (flinfinite? . q4eec) (flfloor . q4eeb) (flfinite? . q4eea) (flexpt . q4ee9) (flexp . q4ee8) (fleven? . q4ee7) (fldiv0-and-mod0 . q4ee6) (fldiv0 . q4ee5) (fldiv-and-mod . q4ee4) (fldiv . q4ee3) (fldenominator . q4ee2) (flcos . q4ee1) (flceiling . q4ee0) (flatan . q4edf) (flasin . q4ede) (flacos . q4edd) (flabs . q4edc) (fl>? . q4edb) (fl>=? . q4eda) (fl=? . q4ed9) (fl<? . q4ed8) (fl<=? . q4ed7) (fl/ . q4ed6) (fl- . q4ed5) (fl+ . q4ed4) (fl* . q4ed3) (fixnum->flonum . q4ed2) (fxzero? . q4ed1) (fxxor . q4ed0) (fxrotate-bit-field . q4ecf) (fxreverse-bit-field . q4ece) (fxpositive? . q4ecd) (fxodd? . q4ecc) (fxnot . q4ecb) (fxnegative? . q4eca) (fxmod0 . q4ec9) (fxmod . q4ec8) (fxmin . q4ec7) (fxmax . q4ec6) (fxlength . q4ec5) (fxior . q4ec4) (fxif . q4ec3) (fxfirst-bit-set . q4ec2) (fxeven? . q4ec1) (fxdiv0-and-mod0 . q4ec0) (fxdiv0 . q4ebf) (fxdiv-and-mod . q4ebe) (fxdiv . q4ebd) (fxcopy-bit-field . q4ebc) (fxcopy-bit . q4ebb) (fxbit-set? . q4eba) (fxbit-field . q4eb9) (fxbit-count . q4eb8) (fxarithmetic-shift-right . q4eb7) (fxarithmetic-shift-left . q4eb6) (fxarithmetic-shift . q4eb5) (fxand . q4eb4) (fx>? . q4eb3) (fx>=? . q4eb2) (fx=? . q4eb1) (fx<? . q4eb0) (fx<=? . q4eaf) (fx-/carry . q4eae) (fx- . q4ead) (fx+/carry . q4eac) (fx+ . q4eab) (fx*/carry . q4eaa) (fx* . q4ea9) (greatest-fixnum . q4ea8) (least-fixnum . q4ea7) (fixnum-width . q4ea6) (fixnum? . q4ea5) (bitwise-rotate-bit-field . q4ea4) (bitwise-reverse-bit-field . q4ea3) (bitwise-length . q4ea2) (bitwise-if . q4ea1) (bitwise-first-bit-set . q4ea0) (bitwise-copy-bit-field . q4e9f) (bitwise-copy-bit . q4e9e) (bitwise-bit-set? . q4e9d) (bitwise-bit-field . q4e9c) (bitwise-bit-count . q4e9b) (bitwise-xor . q4e9a) (bitwise-ior . q4e99) (bitwise-and . q4e98) (bitwise-not . q4e97) (bitwise-arithmetic-shift-right . q4e96) (bitwise-arithmetic-shift-left . q4e95) (bitwise-arithmetic-shift . q4e94) (zero? . q4e93) (vector? . q4e92) (vector-set! . q4e91) (vector-ref . q4e90) (vector-map . q4e8f) (vector-length . q4e8e) (vector-for-each . q4e8d) (vector-fill! . q4e8c) (vector->list . q4e8b) (vector . q4e8a) (values . q4e89) (truncate . q4e88) (tan . q4e87) (symbol? . q4e86) (symbol=? . q4e85) (symbol->string . q4e84) (substring . q4e83) (string? . q4e82) (string>? . q4e81) (string>=? . q4e80) (string=? . q4e7f) (string<? . q4e7e) (string<=? . q4e7d) (string-ref . q4e7c) (string-length . q4e7b) (string-for-each . q4e7a) (string-copy . q4e79) (string-append . q4e78) (string->symbol . q4e77) (string->number . q4e76) (string->list . q4e75) (string . q4e74) (sqrt . q4e73) (sin . q4e72) (round . q4e71) (reverse . q4e70) (real? . q4e6f) (real-valued? . q4e6e) (real-part . q4e6d) (rationalize . q4e6c) (rational? . q4e6b) (rational-valued? . q4e6a) (procedure? . q4e69) (positive? . q4e68) (pair? . q4e67) (odd? . q4e66) (numerator . q4e65) (number? . q4e64) (number->string . q4e63) (null? . q4e62) (not . q4e61) (negative? . q4e60) (nan? . q4e5f) (min . q4e5e) (max . q4e5d) (map . q4e5c) (make-vector . q4e5b) (make-string . q4e5a) (make-rectangular . q4e59) (make-polar . q4e58) (magnitude . q4e57) (log . q4e56) (list? . q4e55) (list-tail . q4e54) (list-ref . q4e53) (list->vector . q4e52) (list->string . q4e51) (list . q4e50) (length . q4e4f) (lcm . q4e4e) (integer? . q4e4d) (integer-valued? . q4e4c) (integer->char . q4e4b) (infinite? . q4e4a) (inexact? . q4e49) (inexact . q4e48) (imag-part . q4e47) (gcd . q4e46) (for-each . q4e45) (floor . q4e44) (finite? . q4e43) (expt . q4e42) (exp . q4e41) (exact? . q4e40) (exact-integer-sqrt . q4e3f) (exact . q4e3e) (even? . q4e3d) (error . q4e3c) (eqv? . q4e3b) (equal? . q4e3a) (eq? . q4e39) (dynamic-wind . q4e38) (div0-and-mod0 . q4e37) (mod0 . q4e36) (div0 . q4e35) (div-and-mod . q4e34) (mod . q4e33) (div . q4e32) (denominator . q4e31) (cos . q4e30) (cons . q4e2f) (complex? . q4e2e) (char? . q4e2d) (char>? . q4e2c) (char>=? . q4e2b) (char=? . q4e2a) (char<? . q4e29) (char<=? . q4e28) (char->integer . q4e27) (ceiling . q4e26) (call-with-values . q4e25) (call/cc . q4e24) (call-with-current-continuation . q4e23) (cddddr . q4e22) (cdddar . q4e21) (cddadr . q4e20) (cddaar . q4e1f) (cdaddr . q4e1e) (cdadar . q4e1d) (cdaadr . q4e1c) (cdaaar . q4e1b) (cadddr . q4e1a) (caddar . q4e19) (cadadr . q4e18) (cadaar . q4e17) (caaddr . q4e16) (caadar . q4e15) (caaadr . q4e14) (caaaar . q4e13) (cdddr . q4e12) (cddar . q4e11) (cdadr . q4e10) (cdaar . q4e0f) (caddr . q4e0e) (cadar . q4e0d) (caadr . q4e0c) (caaar . q4e0b) (cddr . q4e0a) (cdar . q4e09) (cadr . q4e08) (caar . q4e07) (cdr . q4e06) (car . q4e05) (boolean? . q4e04) (boolean=? . q4e03) (atan . q4e02) (assertion-violation . q4e01) (assertion-error . q319a) (asin . q4e00) (apply . q4dff) (append . q4dfe) (angle . q4dfd) (acos . q4dfc) (abs . q4dfb) (/ . q4dfa) (* . q4df9) (- . q4df8) (+ . q4df7) (>= . q4df6) (> . q4df5) (= . q4df4) (<= . q4df3) (< . q4df2) (library . q4df1) (&no-nans . q4df0) (&no-infinities . q4def) (&i/o-encoding . q4dee) (&i/o-decoding . q4ded) (&i/o-port . q4dec) (&i/o-file-does-not-exist . q4deb) (&i/o-file-already-exists . q4dea) (&i/o-file-is-read-only . q4de9) (&i/o-file-protection . q4de8) (&i/o-filename . q4de7) (&i/o-invalid-position . q4de6) (&i/o-write . q4de5) (&i/o-read . q4de4) (&i/o . q4de3) (&undefined . q4de2) (&syntax . q4de1) (&lexical . q4de0) (&implementation-restriction . q4ddf) (&non-continuable . q4dde) (&who . q4ddd) (&irritants . q4ddc) (&assertion . q4ddb) (&violation . q4dda) (&error . q4dd9) (&serious . q4dd8) (&warning . q4dd7) (&message . q4dd6) (&condition . q4dd5) (define-condition-type . q4dd4) (define-enumeration . q4dd3) (define-record-type . q4dd2) (parent-rtd . q4dd1) (nongenerative . q4dd0) (opaque . q4dcf) (sealed . q4dce) (protocol . q4dcd) (parent . q4dcc) (immutable . q4dcb) (mutable . q4dca) (fields . q4dc9) (error-handling-mode . q4dc8) (file-options . q4dc7) (buffer-mode . q4dc6) (eol-style . q4dc5) (guard . q4dc4) (trace-define . q4dc3) (trace-lambda . q4dc2) (unsyntax-splicing . q4dc1) (unsyntax . q4dc0) (unquote-splicing . q4dbf) (unquote . q4dbe) (_ . q4dbd) (else . q4dbc) (=> . q4dbb) (... . q4dba) (assert . q4db9) (endianness . q4db8) (delay . q4db7) (time . q4db6) (do . q4db5) (cond . q4db4) (let* . q4db3) (let*-values . q4db2) (let-values . q4db1) (identifier-syntax . q4db0) (with-syntax . q4daf) (quasisyntax . q4dae) (quasiquote . q4dad) (syntax-rules . q4dac) (include . q4dab) (define-struct . q4daa) (record-constructor-descriptor . q4da9) (record-type-descriptor . q4da8) (case . q4da7) (parameterize . q4da6) (unless . q4da5) (when . q4da4) (or . q4da3) (and . q4da2) (if . q4da1) (let . q4da0) (letrec* . q4d9f) (letrec . q4d9e) (type-descriptor . q4d9d) (case-lambda . q4d9c) (lambda . q4d9b) (syntax . q4d9a) (syntax-case . q4d99) (quote . q4d98) (foreign-call . q4d97) (letrec-syntax . q4d96) (let-syntax . q4d95) (set! . q4d94) (import . q4d93) (begin . q4d92) (module . q4d91) (define-syntax . q4d90) (define . q4d8f)) '((q5133 core-prim . &no-nans-rcd) (q5132 core-prim . &no-nans-rtd) (q5131 core-prim . &no-infinities-rcd) (q5130 core-prim . &no-infinities-rtd) (q512f core-prim . &i/o-encoding-rcd) (q512e core-prim . &i/o-encoding-rtd) (q512d core-prim . &i/o-decoding-rcd) (q512c core-prim . &i/o-decoding-rtd) (q512b core-prim . &i/o-port-rcd) (q512a core-prim . &i/o-port-rtd) (q5129 core-prim . &i/o-file-does-not-exist-rcd) (q5128 core-prim . &i/o-file-does-not-exist-rtd) (q5127 core-prim . &i/o-file-already-exists-rcd) (q5126 core-prim . &i/o-file-already-exists-rtd) (q5125 core-prim . &i/o-file-is-read-only-rcd) (q5124 core-prim . &i/o-file-is-read-only-rtd) (q5123 core-prim . &i/o-file-protection-rcd) (q5122 core-prim . &i/o-file-protection-rtd) (q5121 core-prim . &i/o-filename-rcd) (q5120 core-prim . &i/o-filename-rtd) (q511f core-prim . &i/o-invalid-position-rcd) (q511e core-prim . &i/o-invalid-position-rtd) (q511d core-prim . &i/o-write-rcd) (q511c core-prim . &i/o-write-rtd) (q511b core-prim . &i/o-read-rcd) (q511a core-prim . &i/o-read-rtd) (q5119 core-prim . &i/o-rcd) (q5118 core-prim . &i/o-rtd) (q5117 core-prim . &undefined-rcd) (q5116 core-prim . &undefined-rtd) (q5115 core-prim . &syntax-rcd) (q5114 core-prim . &syntax-rtd) (q5113 core-prim . &lexical-rcd) (q5112 core-prim . &lexical-rtd) (q5111 core-prim . &implementation-restriction-rcd) (q5110 core-prim . &implementation-restriction-rtd) (q510f core-prim . &non-continuable-rcd) (q510e core-prim . &non-continuable-rtd) (q510d core-prim . &who-rcd) (q510c core-prim . &who-rtd) (q510b core-prim . &irritants-rcd) (q510a core-prim . &irritants-rtd) (q5109 core-prim . &assertion-rcd) (q5108 core-prim . &assertion-rtd) (q5107 core-prim . &violation-rcd) (q5106 core-prim . &violation-rtd) (q5105 core-prim . &error-rcd) (q5104 core-prim . &error-rtd) (q5103 core-prim . &serious-rcd) (q5102 core-prim . &serious-rtd) (q5101 core-prim . &warning-rcd) (q5100 core-prim . &warning-rtd) (q50ff core-prim . &message-rcd) (q50fe core-prim . &message-rtd) (q50fd core-prim . &condition-rcd) (q50fc core-prim . &condition-rtd) (q319c core-prim . syntax-error) (q30c0 core-prim . syntax-dispatch) (q50fb core-prim . pretty-print) (q50fa core-prim . eval-core) (q50f9 core-prim . set-symbol-value!) (q50f8 core-prim . symbol-value) (q50f7 core-prim . gensym) (q50f6 core-prim . void) (q4c29 core-prim . load) (q31ae core-prim . interaction-environment) (q50f5 core-prim . char-ready?) (q50f4 core-prim . regexp?) (q50f3 core-prim . read-line) (q50f2 core-prim . gensym-prefix-set!) (q50f1 core-prim . ungensym) (q50f0 core-prim . alist->eq-hash-table) (q50ef core-prim . assoc-ref) (q50ee core-prim . print) (q50ed core-prim . format) (q50ec core-prim . host-os) (q2aff core-prim . library-path) (q50eb core-prim . standard-library-path) (q50ea core-prim . ssl-supported?) (q50e9 core-prim . ssl-socket?) (q50e8 core-prim . socket-sslize!) (q50e7 core-prim . %monapi-name-whereis) (q50e6 core-prim . %monapi-message-send) (q50e5 core-prim . file-newer?) (q50e4 core-prim . stat-mtime) (q50e3 core-prim . write-to-file) (q50e2 core-prim . file->list) (q50e1 core-prim . file->string) (q50e0 core-prim . digit->integer) (q50df core-prim . call-with-string-input-port) (q50de core-prim . call-with-string-io) (q50dd core-prim . string-split) (q50dc core-prim . bytevector-for-each) (q50db core-prim . string->regexp) (q50da core-prim . rxmatch) (q50d9 core-prim . regexp-replace-all) (q50d8 core-prim . hashtable-for-each) (q28e9 core-prim . mosh-cache-dir) (q50d7 core-prim . call-process) (q50d6 core-prim . local-tz-offset) (q50d5 core-prim . microseconds) (q50d4 core-prim . directory-list) (q50d3 core-prim . set-current-directory!) (q50d2 core-prim . expand-path) (q50d1 core-prim . current-directory) (q50d0 core-prim . %spawn) (q50cf core-prim . %waitpid) (q50ce core-prim . simple-struct-name) (q50cd core-prim . simple-struct-set!) (q50cc core-prim . simple-struct-ref) (q50cb core-prim . make-simple-struct) (q50ca core-prim . simple-struct?) (q50c9 core-prim . pointer-ref-c-int64) (q50c8 core-prim . pointer-ref-c-int32) (q50c7 core-prim . pointer-ref-c-int16) (q50c6 core-prim . pointer-ref-c-int8) (q50c5 core-prim . pointer-ref-c-uint64) (q50c4 core-prim . pointer-ref-c-uint32) (q50c3 core-prim . pointer-ref-c-uint16) (q50c2 core-prim . pointer-ref-c-uint8) (q50c1 core-prim . pointer-set-c-uint64!) (q50c0 core-prim . pointer-set-c-uint32!) (q50bf core-prim . pointer-set-c-uint16!) (q50be core-prim . pointer-set-c-uint8!) (q50bd core-prim . pointer-set-c-int64!) (q50bc core-prim . pointer-set-c-int32!) (q50bb core-prim . pointer-set-c-int16!) (q50ba core-prim . pointer-set-c-int8!) (q50b9 core-prim . pointer-set-c-pointer!) (q50b8 core-prim . pointer-set-c-double!) (q50b7 core-prim . pointer-set-c-float!) (q50b6 core-prim . pointer-set-c-long-long!) (q50b5 core-prim . pointer-set-c-long!) (q50b4 core-prim . pointer-set-c-int!) (q50b3 core-prim . pointer-set-c-short!) (q50b2 core-prim . pointer-set-c-char!) (q50b1 core-prim . pointer-ref-c-pointer) (q50b0 core-prim . pointer-ref-c-double) (q50af core-prim . pointer-ref-c-float) (q50ae core-prim . pointer-ref-c-unsigned-long-long) (q50ad core-prim . pointer-ref-c-signed-long-long) (q50ac core-prim . pointer-ref-c-unsigned-long) (q50ab core-prim . pointer-ref-c-signed-long) (q50aa core-prim . pointer-ref-c-unsigned-int) (q50a9 core-prim . pointer-ref-c-signed-int) (q50a8 core-prim . pointer-ref-c-unsigned-short) (q50a7 core-prim . pointer-ref-c-signed-short) (q50a6 core-prim . pointer-ref-c-unsigned-char) (q50a5 core-prim . pointer-ref-c-signed-char) (q50a4 core-prim . pointer->integer) (q50a3 core-prim . integer->pointer) (q50a2 core-prim . pointer?) (q50a1 core-prim . shared-errno) (q50a0 core-prim . %ffi-free-c-callback-trampoline) (q509f core-prim . %ffi-make-c-callback-trampoline) (q509e core-prim . %ffi-free) (q509d core-prim . %ffi-malloc) (q509c core-prim . %ffi-supported?) (q509b core-prim . %ffi-pointer->string) (q509a core-prim . %ffi-call) (q5099 core-prim . %ffi-lookup) (q5098 core-prim . %ffi-open) (q5097 core-prim . null-terminated-utf8->string) (q5096 core-prim . null-terminated-bytevector->string) (q5095 core-prim . %exec) (q5094 core-prim . %fork) (q5093 core-prim . %pipe) (q5092 core-prim . p) (q5091 core-prim . open-output-string) (q5090 core-prim . get-output-string) (q508f core-prim . file-stat-ctime) (q508e core-prim . file-stat-atime) (q508d core-prim . file-stat-mtime) (q508c core-prim . file-size-in-bytes) (q508b core-prim . file-writable?) (q508a core-prim . file-executable?) (q5089 core-prim . file-readable?) (q5088 core-prim . file-regular?) (q5087 core-prim . file-symbolic-link?) (q5086 core-prim . file-directory?) (q5085 core-prim . create-symbolic-link) (q5084 core-prim . rename-file) (q5083 core-prim . delete-directory) (q5082 core-prim . create-directory) (q5081 core-prim . create-mosh-cache-dir) (q5080 core-prim . get-environment-variables) (q507f core-prim . current-exception-handler) (q507e core-prim . get-environment-variable) (q507d core-prim . join-wraps) (q507c core-prim . id->real-label) (q507b core-prim . same-marks?) (q507a core-prim . same-marks*?) (q5079 core-prim . get-timeofday) (q5078 core-prim . get-command-line) (q5077 core-prim . sys-display) (q5076 core-prim . whereis) (q5075 core-prim . register) (q5074 core-prim . vm-join!) (q5073 core-prim . vm-set-value!) (q5072 core-prim . vm?) (q5071 core-prim . main-vm?) (q5070 core-prim . vm-eval) (q506f core-prim . vm-self) (q506e core-prim . vm-start!) (q506d core-prim . make-vm) (q506c core-prim . mutex-try-lock!) (q506b core-prim . mutex-unlock!) (q506a core-prim . mutex-lock!) (q5069 core-prim . mutex?) (q5068 core-prim . make-mutex) (q5067 core-prim . condition-variable-notify-all!) (q5066 core-prim . condition-variable-notify!) (q5065 core-prim . condition-variable-wait!) (q5064 core-prim . make-condition-variable) (q5063 core-prim . write/ss) (q5062 core-prim . mosh-executable-path) (q5061 core-prim . make-file-options) (q5060 core-prim . source-info) (q505f core-prim . make-compiler-instruction) (q505e core-prim . make-instruction) (q505d core-prim . set-source-info!) (q505c core-prim . bignum?) (q505b core-prim . fast-equal?) (q505a core-prim . fasl-read) (q5059 core-prim . fasl-write) (q5058 core-prim . time-usage) (q5057 core-prim . os-constant) (q5056 core-prim . disasm) (q28e7 core-prim . make-parameter) (q5055 core-prim . socket-port) (q5054 core-prim . socket-shutdown) (q5053 core-prim . socket-close) (q5052 core-prim . socket-send) (q5051 core-prim . socket-recv!) (q5050 core-prim . socket-recv) (q504f core-prim . make-server-socket) (q504e core-prim . make-client-socket) (q504d core-prim . socket-accept) (q504c core-prim . socket?) (q504b core-prim . string-upcase) (q504a core-prim . string-titlecase) (q5049 core-prim . string-normalize-nfkd) (q5048 core-prim . string-normalize-nfkc) (q5047 core-prim . string-normalize-nfd) (q5046 core-prim . string-normalize-nfc) (q5045 core-prim . string-foldcase) (q5044 core-prim . string-downcase) (q5043 core-prim . string-ci>?) (q5042 core-prim . string-ci>=?) (q5041 core-prim . string-ci=?) (q5040 core-prim . string-ci<?) (q503f core-prim . string-ci<=?) (q503e core-prim . char-whitespace?) (q503d core-prim . char-upper-case?) (q503c core-prim . char-title-case?) (q503b core-prim . char-numeric?) (q503a core-prim . char-lower-case?) (q5039 core-prim . char-general-category) (q5038 core-prim . char-upcase) (q5037 core-prim . char-titlecase) (q5036 core-prim . char-foldcase) (q5035 core-prim . char-downcase) (q5034 core-prim . char-ci>?) (q5033 core-prim . char-ci>=?) (q5032 core-prim . char-ci=?) (q5031 core-prim . char-ci<?) (q5030 core-prim . char-ci<=?) (q502f core-prim . char-alphabetic?) (q2eeb core-prim . make-variable-transformer) (q31a2 core-prim . identifier?) (q318e core-prim . generate-temporaries) (q3190 core-prim . free-identifier=?) (q31a6 core-prim . syntax->datum) (q31a4 core-prim . datum->syntax) (q3192 core-prim . bound-identifier=?) (q502e core-prim . record-type-descriptor?) (q502d core-prim . record-predicate) (q502c core-prim . record-mutator) (q502b core-prim . record-constructor) (q502a core-prim . record-accessor) (q5029 core-prim . make-record-type-descriptor) (q5028 core-prim . make-record-constructor-descriptor) (q5027 core-prim . record?) (q5026 core-prim . record-type-uid) (q5025 core-prim . record-type-sealed?) (q5024 core-prim . record-type-parent) (q5023 core-prim . record-type-opaque?) (q5022 core-prim . record-type-name) (q5021 core-prim . record-type-generative?) (q5020 core-prim . record-type-field-names) (q501f core-prim . record-rtd) (q501e core-prim . record-field-mutable?) (q501d core-prim . delete-file) (q501c core-prim . file-exists?) (q501b core-prim . vector-sort!) (q501a core-prim . vector-sort) (q5019 core-prim . list-sort) (q5018 core-prim . symbol-hash) (q5017 core-prim . string-ci-hash) (q5016 core-prim . string-hash) (q5015 core-prim . equal-hash) (q5014 core-prim . hashtable-equivalence-function) (q5013 core-prim . make-hashtable) (q5012 core-prim . hashtable-hash-function) (q5011 core-prim . make-eqv-hashtable) (q5010 core-prim . make-eq-hashtable) (q500f core-prim . hashtable?) (q500e core-prim . hashtable-update!) (q500d core-prim . hashtable-size) (q500c core-prim . hashtable-set!) (q500b core-prim . hashtable-ref) (q500a core-prim . hashtable-mutable?) (q5009 core-prim . hashtable-keys) (q5008 core-prim . hashtable-entries) (q5007 core-prim . hashtable-delete!) (q5006 core-prim . hashtable-copy) (q5005 core-prim . hashtable-contains?) (q5004 core-prim . hashtable-clear!) (q5003 core-prim . call-with-output-file) (q5002 core-prim . call-with-input-file) (q5001 core-prim . write-char) (q5000 core-prim . write) (q4fff core-prim . with-output-to-file) (q4ffe core-prim . with-input-from-file) (q4ffd core-prim . read-char) (q4ffc core-prim . read) (q4ffb core-prim . peek-char) (q4ffa core-prim . open-output-file) (q4ff9 core-prim . open-input-file) (q4ff8 core-prim . newline) (q4ff7 core-prim . display) (q4ff6 core-prim . close-output-port) (q4ff5 core-prim . close-input-port) (q4ff4 core-prim . eof-object?) (q4ff3 core-prim . eof-object) (q4ff2 core-prim . current-error-port) (q4ff1 core-prim . current-output-port) (q4ff0 core-prim . current-input-port) (q4fef core-prim . output-port?) (q4fee core-prim . input-port?) (q4fed core-prim . utf-8-codec) (q4fec core-prim . utf-16-codec) (q4feb core-prim . transcoder-error-handling-mode) (q4fea core-prim . transcoder-eol-style) (q4fe9 core-prim . transcoder-codec) (q4fe8 core-prim . transcoded-port) (q4fe7 core-prim . textual-port?) (q4fe6 core-prim . string->bytevector) (q4fe5 core-prim . standard-output-port) (q4fe4 core-prim . standard-input-port) (q4fe3 core-prim . standard-error-port) (q4fe2 core-prim . set-port-position!) (q4fe1 core-prim . put-u8) (q4fe0 core-prim . put-string) (q4fdf core-prim . put-datum) (q4fde core-prim . put-char) (q4fdd core-prim . put-bytevector) (q4fdc core-prim . port?) (q4fdb core-prim . port-transcoder) (q4fda core-prim . port-position) (q4fd9 core-prim . port-has-set-port-position!?) (q4fd8 core-prim . port-has-port-position?) (q4fd7 core-prim . port-eof?) (q4fd6 core-prim . output-port-buffer-mode) (q4fd5 core-prim . open-string-output-port) (q4fd4 core-prim . open-string-input-port) (q4fd3 core-prim . open-file-output-port) (q4fd2 core-prim . open-file-input/output-port) (q4fd1 core-prim . open-file-input-port) (q4fd0 core-prim . open-bytevector-output-port) (q4fcf core-prim . open-bytevector-input-port) (q4fce core-prim . native-transcoder) (q4fcd core-prim . native-eol-style) (q4fcc core-prim . make-transcoder) (q4fcb core-prim . latin-1-codec) (q4fca core-prim . make-i/o-write-error) (q4fc9 core-prim . make-i/o-read-error) (q4fc8 core-prim . make-i/o-port-error) (q4fc7 core-prim . make-i/o-invalid-position-error) (q4fc6 core-prim . make-i/o-filename-error) (q4fc5 core-prim . make-i/o-file-protection-error) (q4fc4 core-prim . make-i/o-file-is-read-only-error) (q4fc3 core-prim . make-i/o-file-does-not-exist-error) (q4fc2 core-prim . make-i/o-file-already-exists-error) (q4fc1 core-prim . make-i/o-error) (q4fc0 core-prim . make-i/o-encoding-error) (q4fbf core-prim . make-i/o-decoding-error) (q4fbe core-prim . make-custom-textual-output-port) (q4fbd core-prim . make-custom-textual-input/output-port) (q4fbc core-prim . make-custom-textual-input-port) (q4fbb core-prim . make-custom-binary-output-port) (q4fba core-prim . make-custom-binary-input/output-port) (q4fb9 core-prim . make-custom-binary-input-port) (q4fb8 core-prim . make-bytevector) (q4fb7 core-prim . lookahead-u8) (q4fb6 core-prim . lookahead-char) (q4fb5 core-prim . i/o-write-error?) (q4fb4 core-prim . i/o-read-error?) (q4fb3 core-prim . i/o-port-error?) (q4fb2 core-prim . i/o-invalid-position-error?) (q4fb1 core-prim . i/o-filename-error?) (q4fb0 core-prim . i/o-file-protection-error?) (q4faf core-prim . i/o-file-is-read-only-error?) (q4fae core-prim . i/o-file-does-not-exist-error?) (q4fad core-prim . i/o-file-already-exists-error?) (q4fac core-prim . i/o-error?) (q4fab core-prim . i/o-error-position) (q4faa core-prim . i/o-error-port) (q4fa9 core-prim . i/o-error-filename) (q4fa8 core-prim . i/o-encoding-error?) (q4fa7 core-prim . i/o-encoding-error-char) (q4fa6 core-prim . i/o-decoding-error?) (q4fa5 core-prim . get-u8) (q4fa4 core-prim . get-string-n!) (q4fa3 core-prim . get-string-n) (q4fa2 core-prim . get-string-all) (q4fa1 core-prim . get-line) (q4fa0 core-prim . get-datum) (q4f9f core-prim . get-char) (q4f9e core-prim . get-bytevector-some) (q4f9d core-prim . get-bytevector-n!) (q4f9c core-prim . get-bytevector-n) (q4f9b core-prim . get-bytevector-all) (q4f9a core-prim . flush-output-port) (q4f99 core-prim . close-port) (q317c core-prim . scheme-report-environment) (q4f98 core-prim . quotient) (q317a core-prim . null-environment) (q4f97 core-prim . remainder) (q4f96 core-prim . modulo) (q4f95 core-prim . inexact->exact) (q4f94 core-prim . force) (q4f93 core-prim . exact->inexact) (q4f92 core-prim . make-promise) (q4f91 core-prim . exit) (q4c23 core-prim . command-line) (q4f90 core-prim . string-fill!) (q4f8f core-prim . string-set!) (q4f8e core-prim . set-cdr!) (q4f8d core-prim . set-car!) (q4f8c core-prim . remove) (q4f8b core-prim . remv) (q4f8a core-prim . remp) (q4f89 core-prim . remq) (q4f88 core-prim . partition) (q4f87 core-prim . memv) (q4f86 core-prim . memq) (q4f85 core-prim . memp) (q4f84 core-prim . member) (q4f83 core-prim . exists) (q4f82 core-prim . for-all) (q4f81 core-prim . fold-right) (q4f80 core-prim . fold-left) (q4f7f core-prim . find) (q4f7e core-prim . filter) (q4f7d core-prim . cons*) (q4f7c core-prim . assv) (q4f7b core-prim . assq) (q4f7a core-prim . assp) (q4f79 core-prim . assoc) (q4f78 core-prim . call-with-string-output-port) (q4f77 core-prim . call-with-port) (q4f76 core-prim . call-with-bytevector-output-port) (q4f75 core-prim . bytevector->string) (q4f74 core-prim . buffer-mode?) (q4f73 core-prim . binary-port?) (q4f72 core-prim . with-exception-handler) (q4f71 core-prim . raise-continuable) (q4f70 core-prim . raise) (q3180 core-prim . eval) (q3178 core-prim . environment) (q4f6f core-prim . make-enumeration) (q4f6e core-prim . enum-set=?) (q4f6d core-prim . enum-set-universe) (q4f6c core-prim . enum-set-union) (q4f6b core-prim . enum-set-subset?) (q4f6a core-prim . enum-set-projection) (q4f69 core-prim . enum-set-member?) (q4f68 core-prim . enum-set-intersection) (q4f67 core-prim . enum-set-indexer) (q4f66 core-prim . enum-set-difference) (q4f65 core-prim . enum-set-constructor) (q4f64 core-prim . enum-set-complement) (q4f63 core-prim . enum-set->list) (q4f62 core-prim . who-condition?) (q4f61 core-prim . warning?) (q4f60 core-prim . violation?) (q4f5f core-prim . undefined-violation?) (q4f5e core-prim . syntax-violation?) (q4f5d core-prim . syntax-violation-subform) (q4f5c core-prim . syntax-violation-form) (q31a0 core-prim . syntax-violation) (q4f5b core-prim . simple-conditions) (q4f5a core-prim . serious-condition?) (q4f59 core-prim . non-continuable-violation?) (q4f58 core-prim . message-condition?) (q4f57 core-prim . make-who-condition) (q4f56 core-prim . make-warning) (q4f55 core-prim . make-violation) (q4f54 core-prim . make-undefined-violation) (q4f53 core-prim . make-syntax-violation) (q4f52 core-prim . make-serious-condition) (q4f51 core-prim . make-non-continuable-violation) (q4f50 core-prim . make-message-condition) (q4f4f core-prim . make-lexical-violation) (q4f4e core-prim . make-irritants-condition) (q4f4d core-prim . make-implementation-restriction-violation) (q4f4c core-prim . make-error) (q4f4b core-prim . make-assertion-violation) (q4f4a core-prim . lexical-violation?) (q4f49 core-prim . irritants-condition?) (q4f48 core-prim . implementation-restriction-violation?) (q4f47 core-prim . error?) (q4f46 core-prim . condition-who) (q4f45 core-prim . condition-predicate) (q4f44 core-prim . condition-message) (q4f43 core-prim . condition-irritants) (q4f42 core-prim . condition-accessor) (q4f41 core-prim . condition) (q4f40 core-prim . assertion-violation?) (q4f3f core-prim . condition?) (q4f3e core-prim . utf32->string) (q4f3d core-prim . utf16->string) (q4f3c core-prim . utf8->string) (q4f3b core-prim . uint-list->bytevector) (q4f3a core-prim . u8-list->bytevector) (q4f39 core-prim . string->utf8) (q4f38 core-prim . string->utf32) (q4f37 core-prim . string->utf16) (q4f36 core-prim . sint-list->bytevector) (q4f35 core-prim . native-endianness) (q4f34 core-prim . bytevector?) (q4f33 core-prim . bytevector=?) (q4f32 core-prim . bytevector-uint-set!) (q4f31 core-prim . bytevector-uint-ref) (q4f30 core-prim . bytevector-u8-set!) (q4f2f core-prim . bytevector-u8-ref) (q4f2e core-prim . bytevector-u64-set!) (q4f2d core-prim . bytevector-u64-ref) (q4f2c core-prim . bytevector-u64-native-set!) (q4f2b core-prim . bytevector-u64-native-ref) (q4f2a core-prim . bytevector-u32-set!) (q4f29 core-prim . bytevector-u32-ref) (q4f28 core-prim . bytevector-u32-native-set!) (q4f27 core-prim . bytevector-u32-native-ref) (q4f26 core-prim . bytevector-u16-set!) (q4f25 core-prim . bytevector-u16-ref) (q4f24 core-prim . bytevector-u16-native-set!) (q4f23 core-prim . bytevector-u16-native-ref) (q4f22 core-prim . bytevector-sint-set!) (q4f21 core-prim . bytevector-sint-ref) (q4f20 core-prim . bytevector-s8-set!) (q4f1f core-prim . bytevector-s8-ref) (q4f1e core-prim . bytevector-s64-set!) (q4f1d core-prim . bytevector-s64-ref) (q4f1c core-prim . bytevector-s64-native-set!) (q4f1b core-prim . bytevector-s64-native-ref) (q4f1a core-prim . bytevector-s32-set!) (q4f19 core-prim . bytevector-s32-ref) (q4f18 core-prim . bytevector-s32-native-set!) (q4f17 core-prim . bytevector-s32-native-ref) (q4f16 core-prim . bytevector-s16-set!) (q4f15 core-prim . bytevector-s16-ref) (q4f14 core-prim . bytevector-s16-native-set!) (q4f13 core-prim . bytevector-s16-native-ref) (q4f12 core-prim . bytevector-length) (q4f11 core-prim . bytevector-ieee-single-ref) (q4f10 core-prim . bytevector-ieee-single-set!) (q4f0f core-prim . bytevector-ieee-single-native-set!) (q4f0e core-prim . bytevector-ieee-single-native-ref) (q4f0d core-prim . bytevector-ieee-double-set!) (q4f0c core-prim . bytevector-ieee-double-ref) (q4f0b core-prim . bytevector-ieee-double-native-set!) (q4f0a core-prim . bytevector-ieee-double-native-ref) (q4f09 core-prim . bytevector-fill!) (q4f08 core-prim . bytevector-copy!) (q4f07 core-prim . bytevector-copy) (q4f06 core-prim . bytevector->uint-list) (q4f05 core-prim . bytevector->u8-list) (q4f04 core-prim . bytevector->sint-list) (q4f03 core-prim . no-nans-violation?) (q4f02 core-prim . no-infinities-violation?) (q4f01 core-prim . make-no-nans-violation) (q4f00 core-prim . make-no-infinities-violation) (q4eff core-prim . real->flonum) (q4efe core-prim . flzero?) (q4efd core-prim . fltruncate) (q4efc core-prim . fltan) (q4efb core-prim . flsqrt) (q4efa core-prim . flsin) (q4ef9 core-prim . flround) (q4ef8 core-prim . flpositive?) (q4ef7 core-prim . flonum?) (q4ef6 core-prim . flodd?) (q4ef5 core-prim . flnumerator) (q4ef4 core-prim . flnegative?) (q4ef3 core-prim . flnan?) (q4ef2 core-prim . flmod0) (q4ef1 core-prim . flmod) (q4ef0 core-prim . flmin) (q4eef core-prim . flmax) (q4eee core-prim . fllog) (q4eed core-prim . flinteger?) (q4eec core-prim . flinfinite?) (q4eeb core-prim . flfloor) (q4eea core-prim . flfinite?) (q4ee9 core-prim . flexpt) (q4ee8 core-prim . flexp) (q4ee7 core-prim . fleven?) (q4ee6 core-prim . fldiv0-and-mod0) (q4ee5 core-prim . fldiv0) (q4ee4 core-prim . fldiv-and-mod) (q4ee3 core-prim . fldiv) (q4ee2 core-prim . fldenominator) (q4ee1 core-prim . flcos) (q4ee0 core-prim . flceiling) (q4edf core-prim . flatan) (q4ede core-prim . flasin) (q4edd core-prim . flacos) (q4edc core-prim . flabs) (q4edb core-prim . fl>?) (q4eda core-prim . fl>=?) (q4ed9 core-prim . fl=?) (q4ed8 core-prim . fl<?) (q4ed7 core-prim . fl<=?) (q4ed6 core-prim . fl/) (q4ed5 core-prim . fl-) (q4ed4 core-prim . fl+) (q4ed3 core-prim . fl*) (q4ed2 core-prim . fixnum->flonum) (q4ed1 core-prim . fxzero?) (q4ed0 core-prim . fxxor) (q4ecf core-prim . fxrotate-bit-field) (q4ece core-prim . fxreverse-bit-field) (q4ecd core-prim . fxpositive?) (q4ecc core-prim . fxodd?) (q4ecb core-prim . fxnot) (q4eca core-prim . fxnegative?) (q4ec9 core-prim . fxmod0) (q4ec8 core-prim . fxmod) (q4ec7 core-prim . fxmin) (q4ec6 core-prim . fxmax) (q4ec5 core-prim . fxlength) (q4ec4 core-prim . fxior) (q4ec3 core-prim . fxif) (q4ec2 core-prim . fxfirst-bit-set) (q4ec1 core-prim . fxeven?) (q4ec0 core-prim . fxdiv0-and-mod0) (q4ebf core-prim . fxdiv0) (q4ebe core-prim . fxdiv-and-mod) (q4ebd core-prim . fxdiv) (q4ebc core-prim . fxcopy-bit-field) (q4ebb core-prim . fxcopy-bit) (q4eba core-prim . fxbit-set?) (q4eb9 core-prim . fxbit-field) (q4eb8 core-prim . fxbit-count) (q4eb7 core-prim . fxarithmetic-shift-right) (q4eb6 core-prim . fxarithmetic-shift-left) (q4eb5 core-prim . fxarithmetic-shift) (q4eb4 core-prim . fxand) (q4eb3 core-prim . fx>?) (q4eb2 core-prim . fx>=?) (q4eb1 core-prim . fx=?) (q4eb0 core-prim . fx<?) (q4eaf core-prim . fx<=?) (q4eae core-prim . fx-/carry) (q4ead core-prim . fx-) (q4eac core-prim . fx+/carry) (q4eab core-prim . fx+) (q4eaa core-prim . fx*/carry) (q4ea9 core-prim . fx*) (q4ea8 core-prim . greatest-fixnum) (q4ea7 core-prim . least-fixnum) (q4ea6 core-prim . fixnum-width) (q4ea5 core-prim . fixnum?) (q4ea4 core-prim . bitwise-rotate-bit-field) (q4ea3 core-prim . bitwise-reverse-bit-field) (q4ea2 core-prim . bitwise-length) (q4ea1 core-prim . bitwise-if) (q4ea0 core-prim . bitwise-first-bit-set) (q4e9f core-prim . bitwise-copy-bit-field) (q4e9e core-prim . bitwise-copy-bit) (q4e9d core-prim . bitwise-bit-set?) (q4e9c core-prim . bitwise-bit-field) (q4e9b core-prim . bitwise-bit-count) (q4e9a core-prim . bitwise-xor) (q4e99 core-prim . bitwise-ior) (q4e98 core-prim . bitwise-and) (q4e97 core-prim . bitwise-not) (q4e96 core-prim . bitwise-arithmetic-shift-right) (q4e95 core-prim . bitwise-arithmetic-shift-left) (q4e94 core-prim . bitwise-arithmetic-shift) (q4e93 core-prim . zero?) (q4e92 core-prim . vector?) (q4e91 core-prim . vector-set!) (q4e90 core-prim . vector-ref) (q4e8f core-prim . vector-map) (q4e8e core-prim . vector-length) (q4e8d core-prim . vector-for-each) (q4e8c core-prim . vector-fill!) (q4e8b core-prim . vector->list) (q4e8a core-prim . vector) (q4e89 core-prim . values) (q4e88 core-prim . truncate) (q4e87 core-prim . tan) (q4e86 core-prim . symbol?) (q4e85 core-prim . symbol=?) (q4e84 core-prim . symbol->string) (q4e83 core-prim . substring) (q4e82 core-prim . string?) (q4e81 core-prim . string>?) (q4e80 core-prim . string>=?) (q4e7f core-prim . string=?) (q4e7e core-prim . string<?) (q4e7d core-prim . string<=?) (q4e7c core-prim . string-ref) (q4e7b core-prim . string-length) (q4e7a core-prim . string-for-each) (q4e79 core-prim . string-copy) (q4e78 core-prim . string-append) (q4e77 core-prim . string->symbol) (q4e76 core-prim . string->number) (q4e75 core-prim . string->list) (q4e74 core-prim . string) (q4e73 core-prim . sqrt) (q4e72 core-prim . sin) (q4e71 core-prim . round) (q4e70 core-prim . reverse) (q4e6f core-prim . real?) (q4e6e core-prim . real-valued?) (q4e6d core-prim . real-part) (q4e6c core-prim . rationalize) (q4e6b core-prim . rational?) (q4e6a core-prim . rational-valued?) (q4e69 core-prim . procedure?) (q4e68 core-prim . positive?) (q4e67 core-prim . pair?) (q4e66 core-prim . odd?) (q4e65 core-prim . numerator) (q4e64 core-prim . number?) (q4e63 core-prim . number->string) (q4e62 core-prim . null?) (q4e61 core-prim . not) (q4e60 core-prim . negative?) (q4e5f core-prim . nan?) (q4e5e core-prim . min) (q4e5d core-prim . max) (q4e5c core-prim . map) (q4e5b core-prim . make-vector) (q4e5a core-prim . make-string) (q4e59 core-prim . make-rectangular) (q4e58 core-prim . make-polar) (q4e57 core-prim . magnitude) (q4e56 core-prim . log) (q4e55 core-prim . list?) (q4e54 core-prim . list-tail) (q4e53 core-prim . list-ref) (q4e52 core-prim . list->vector) (q4e51 core-prim . list->string) (q4e50 core-prim . list) (q4e4f core-prim . length) (q4e4e core-prim . lcm) (q4e4d core-prim . integer?) (q4e4c core-prim . integer-valued?) (q4e4b core-prim . integer->char) (q4e4a core-prim . infinite?) (q4e49 core-prim . inexact?) (q4e48 core-prim . inexact) (q4e47 core-prim . imag-part) (q4e46 core-prim . gcd) (q4e45 core-prim . for-each) (q4e44 core-prim . floor) (q4e43 core-prim . finite?) (q4e42 core-prim . expt) (q4e41 core-prim . exp) (q4e40 core-prim . exact?) (q4e3f core-prim . exact-integer-sqrt) (q4e3e core-prim . exact) (q4e3d core-prim . even?) (q4e3c core-prim . error) (q4e3b core-prim . eqv?) (q4e3a core-prim . equal?) (q4e39 core-prim . eq?) (q4e38 core-prim . dynamic-wind) (q4e37 core-prim . div0-and-mod0) (q4e36 core-prim . mod0) (q4e35 core-prim . div0) (q4e34 core-prim . div-and-mod) (q4e33 core-prim . mod) (q4e32 core-prim . div) (q4e31 core-prim . denominator) (q4e30 core-prim . cos) (q4e2f core-prim . cons) (q4e2e core-prim . complex?) (q4e2d core-prim . char?) (q4e2c core-prim . char>?) (q4e2b core-prim . char>=?) (q4e2a core-prim . char=?) (q4e29 core-prim . char<?) (q4e28 core-prim . char<=?) (q4e27 core-prim . char->integer) (q4e26 core-prim . ceiling) (q4e25 core-prim . call-with-values) (q4e24 core-prim . call/cc) (q4e23 core-prim . call-with-current-continuation) (q4e22 core-prim . cddddr) (q4e21 core-prim . cdddar) (q4e20 core-prim . cddadr) (q4e1f core-prim . cddaar) (q4e1e core-prim . cdaddr) (q4e1d core-prim . cdadar) (q4e1c core-prim . cdaadr) (q4e1b core-prim . cdaaar) (q4e1a core-prim . cadddr) (q4e19 core-prim . caddar) (q4e18 core-prim . cadadr) (q4e17 core-prim . cadaar) (q4e16 core-prim . caaddr) (q4e15 core-prim . caadar) (q4e14 core-prim . caaadr) (q4e13 core-prim . caaaar) (q4e12 core-prim . cdddr) (q4e11 core-prim . cddar) (q4e10 core-prim . cdadr) (q4e0f core-prim . cdaar) (q4e0e core-prim . caddr) (q4e0d core-prim . cadar) (q4e0c core-prim . caadr) (q4e0b core-prim . caaar) (q4e0a core-prim . cddr) (q4e09 core-prim . cdar) (q4e08 core-prim . cadr) (q4e07 core-prim . caar) (q4e06 core-prim . cdr) (q4e05 core-prim . car) (q4e04 core-prim . boolean?) (q4e03 core-prim . boolean=?) (q4e02 core-prim . atan) (q4e01 core-prim . assertion-violation) (q319a core-prim . assertion-error) (q4e00 core-prim . asin) (q4dff core-prim . apply) (q4dfe core-prim . append) (q4dfd core-prim . angle) (q4dfc core-prim . acos) (q4dfb core-prim . abs) (q4dfa core-prim . /) (q4df9 core-prim . *) (q4df8 core-prim . -) (q4df7 core-prim . +) (q4df6 core-prim . >=) (q4df5 core-prim . >) (q4df4 core-prim . =) (q4df3 core-prim . <=) (q4df2 core-prim . <) (q4df1 core-prim . library) (q4df0 $core-rtd &no-nans-rtd &no-nans-rcd) (q4def $core-rtd &no-infinities-rtd &no-infinities-rcd) (q4dee $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (q4ded $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (q4dec $core-rtd &i/o-port-rtd &i/o-port-rcd) (q4deb $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (q4dea $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (q4de9 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (q4de8 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (q4de7 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (q4de6 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (q4de5 $core-rtd &i/o-write-rtd &i/o-write-rcd) (q4de4 $core-rtd &i/o-read-rtd &i/o-read-rcd) (q4de3 $core-rtd &i/o-rtd &i/o-rcd) (q4de2 $core-rtd &undefined-rtd &undefined-rcd) (q4de1 $core-rtd &syntax-rtd &syntax-rcd) (q4de0 $core-rtd &lexical-rtd &lexical-rcd) (q4ddf $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (q4dde $core-rtd &non-continuable-rtd &non-continuable-rcd) (q4ddd $core-rtd &who-rtd &who-rcd) (q4ddc $core-rtd &irritants-rtd &irritants-rcd) (q4ddb $core-rtd &assertion-rtd &assertion-rcd) (q4dda $core-rtd &violation-rtd &violation-rcd) (q4dd9 $core-rtd &error-rtd &error-rcd) (q4dd8 $core-rtd &serious-rtd &serious-rcd) (q4dd7 $core-rtd &warning-rtd &warning-rcd) (q4dd6 $core-rtd &message-rtd &message-rcd) (q4dd5 $core-rtd &condition-rtd &condition-rcd) (q4dd4 macro . define-condition-type) (q4dd3 macro . define-enumeration) (q4dd2 macro . define-record-type) (q4dd1 macro . parent-rtd) (q4dd0 macro . nongenerative) (q4dcf macro . opaque) (q4dce macro . sealed) (q4dcd macro . protocol) (q4dcc macro . parent) (q4dcb macro . immutable) (q4dca macro . mutable) (q4dc9 macro . fields) (q4dc8 macro . error-handling-mode) (q4dc7 macro . file-options) (q4dc6 macro . buffer-mode) (q4dc5 macro . eol-style) (q4dc4 macro . guard) (q4dc3 macro . trace-define) (q4dc2 macro . trace-lambda) (q4dc1 macro . unsyntax-splicing) (q4dc0 macro . unsyntax) (q4dbf macro . unquote-splicing) (q4dbe macro . unquote) (q4dbd macro . _) (q4dbc macro . else) (q4dbb macro . =>) (q4dba macro . ...) (q4db9 macro . assert) (q4db8 macro . endianness) (q4db7 macro . delay) (q4db6 macro . time) (q4db5 macro . do) (q4db4 macro . cond) (q4db3 macro . let*) (q4db2 macro . let*-values) (q4db1 macro . let-values) (q4db0 macro . identifier-syntax) (q4daf macro . with-syntax) (q4dae macro . quasisyntax) (q4dad macro . quasiquote) (q4dac macro . syntax-rules) (q4dab macro . include) (q4daa macro . define-struct) (q4da9 core-macro . record-constructor-descriptor) (q4da8 core-macro . record-type-descriptor) (q4da7 macro . case) (q4da6 macro . parameterize) (q4da5 macro . unless) (q4da4 macro . when) (q4da3 core-macro . or) (q4da2 core-macro . and) (q4da1 core-macro . if) (q4da0 core-macro . let) (q4d9f core-macro . letrec*) (q4d9e core-macro . letrec) (q4d9d core-macro . type-descriptor) (q4d9c core-macro . case-lambda) (q4d9b core-macro . lambda) (q4d9a core-macro . syntax) (q4d99 core-macro . syntax-case) (q4d98 core-macro . quote) (q4d97 core-macro . foreign-call) (q4d96 letrec-syntax) (q4d95 let-syntax) (q4d94 set!) (q4d93 import) (q4d92 begin) (q4d91 module) (q4d90 define-syntax) (q4d8f define)) values values '#f '#f '#f '#f) (q2cd4@q2b20@install-library 'q5154 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . q50fb) (eval-core . q50fa) (set-symbol-value! . q50f9) (symbol-value . q50f8) (gensym . q50f7) (void . q50f6)) '() values values '#f '#f '#f '#f) (q2cd4@q2b20@install-library 'q5155 '(mosh) '() '() '() '() '((set-symbol-value! . q50f9) (symbol-value . q50f8) (regexp? . q50f4) (read-line . q50f3) (ungensym . q50f1) (alist->eq-hash-table . q50f0) (assoc-ref . q50ef) (print . q50ee) (format . q50ed) (host-os . q50ec) (library-path . q2aff) (standard-library-path . q50eb) (file-newer? . q50e5) (stat-mtime . q50e4) (digit->integer . q50e0) (call-with-string-input-port . q50df) (call-with-string-io . q50de) (string-split . q50dd) (bytevector-for-each . q50dc) (string->regexp . q50db) (rxmatch . q50da) (regexp-replace-all . q50d9) (hashtable-for-each . q50d8) (set-current-directory! . q50d3) (expand-path . q50d2) (current-directory . q50d1) (p . q5092) (get-timeofday . q5079) (get-command-line . q5078) (sys-display . q5077) (whereis . q5076) (register . q5075) (vm-join! . q5074) (vm-set-value! . q5073) (vm? . q5072) (main-vm? . q5071) (vm-eval . q5070) (vm-self . q506f) (vm-start! . q506e) (make-vm . q506d) (mutex-try-lock! . q506c) (mutex-unlock! . q506b) (mutex-lock! . q506a) (mutex? . q5069) (make-mutex . q5068) (condition-variable-notify-all! . q5067) (condition-variable-notify! . q5066) (condition-variable-wait! . q5065) (make-condition-variable . q5064) (write/ss . q5063) (mosh-executable-path . q5062) (make-file-options . q5061) (source-info . q5060) (make-compiler-instruction . q505f) (make-instruction . q505e) (set-source-info! . q505d) (bignum? . q505c) (fast-equal? . q505b) (fasl-read . q505a) (fasl-write . q5059) (time-usage . q5058) (os-constant . q5057) (time . q4db6) (include . q4dab)) '() values values '#f '#f '#f '#f) (q2cd4@q2b20@install-library 'q5156 '(system) '() '() '() '() '((gensym-prefix-set! . q50f2) (ssl-supported? . q50ea) (ssl-socket? . q50e9) (socket-sslize! . q50e8) (%monapi-name-whereis . q50e7) (%monapi-message-send . q50e6) (write-to-file . q50e3) (file->list . q50e2) (file->string . q50e1) (mosh-cache-dir . q28e9) (call-process . q50d7) (local-tz-offset . q50d6) (microseconds . q50d5) (directory-list . q50d4) (expand-path . q50d2) (%spawn . q50d0) (%waitpid . q50cf) (simple-struct-name . q50ce) (simple-struct-set! . q50cd) (simple-struct-ref . q50cc) (make-simple-struct . q50cb) (simple-struct? . q50ca) (pointer-ref-c-int64 . q50c9) (pointer-ref-c-int32 . q50c8) (pointer-ref-c-int16 . q50c7) (pointer-ref-c-int8 . q50c6) (pointer-ref-c-uint64 . q50c5) (pointer-ref-c-uint32 . q50c4) (pointer-ref-c-uint16 . q50c3) (pointer-ref-c-uint8 . q50c2) (pointer-set-c-uint64! . q50c1) (pointer-set-c-uint32! . q50c0) (pointer-set-c-uint16! . q50bf) (pointer-set-c-uint8! . q50be) (pointer-set-c-int64! . q50bd) (pointer-set-c-int32! . q50bc) (pointer-set-c-int16! . q50bb) (pointer-set-c-int8! . q50ba) (pointer-set-c-pointer! . q50b9) (pointer-set-c-double! . q50b8) (pointer-set-c-float! . q50b7) (pointer-set-c-long-long! . q50b6) (pointer-set-c-long! . q50b5) (pointer-set-c-int! . q50b4) (pointer-set-c-short! . q50b3) (pointer-set-c-char! . q50b2) (pointer-ref-c-pointer . q50b1) (pointer-ref-c-double . q50b0) (pointer-ref-c-float . q50af) (pointer-ref-c-unsigned-long-long . q50ae) (pointer-ref-c-signed-long-long . q50ad) (pointer-ref-c-unsigned-long . q50ac) (pointer-ref-c-signed-long . q50ab) (pointer-ref-c-unsigned-int . q50aa) (pointer-ref-c-signed-int . q50a9) (pointer-ref-c-unsigned-short . q50a8) (pointer-ref-c-signed-short . q50a7) (pointer-ref-c-unsigned-char . q50a6) (pointer-ref-c-signed-char . q50a5) (pointer->integer . q50a4) (integer->pointer . q50a3) (pointer? . q50a2) (shared-errno . q50a1) (%ffi-free-c-callback-trampoline . q50a0) (%ffi-make-c-callback-trampoline . q509f) (%ffi-free . q509e) (%ffi-malloc . q509d) (%ffi-supported? . q509c) (%ffi-pointer->string . q509b) (%ffi-call . q509a) (%ffi-lookup . q5099) (%ffi-open . q5098) (null-terminated-utf8->string . q5097) (null-terminated-bytevector->string . q5096) (%exec . q5095) (%fork . q5094) (%pipe . q5093) (open-output-string . q5091) (get-output-string . q5090) (file-stat-ctime . q508f) (file-stat-atime . q508e) (file-stat-mtime . q508d) (file-size-in-bytes . q508c) (file-writable? . q508b) (file-executable? . q508a) (file-readable? . q5089) (file-regular? . q5088) (file-symbolic-link? . q5087) (file-directory? . q5086) (create-symbolic-link . q5085) (rename-file . q5084) (delete-directory . q5083) (create-directory . q5082) (create-mosh-cache-dir . q5081) (get-environment-variables . q5080) (current-exception-handler . q507f) (get-environment-variable . q507e) (join-wraps . q507d) (id->real-label . q507c) (same-marks? . q507b) (same-marks*? . q507a) (disasm . q5056) (make-parameter . q28e7) (socket-port . q5055) (socket-shutdown . q5054) (socket-close . q5053) (socket-send . q5052) (socket-recv! . q5051) (socket-recv . q5050) (make-server-socket . q504f) (make-client-socket . q504e) (socket-accept . q504d) (socket? . q504c) (parameterize . q4da6)) '() values values '#f '#f '#f '#f)))
(begin (set! q4c0e@ref (unspecified)) (set! q4c10@x* (unspecified)) (set! q4c12@add-library-path! (unspecified)) (set! q4c14@parse-and-add-library-path (unspecified)) (set! q4c16@for-each-with-index (unspecified)) (set! q4c18@rpad (unspecified)) (set! q4c1a@condition-printer (unspecified)) (set! q4c1c@record->field-alist (unspecified)) (set! q4c1e@map-with-index (unspecified)) (set! q4c20@repl (unspecified)) (set! q4c22@trace-printer (unspecified)) (set! q4c24@command-line (unspecified)) (set! q4c26@local-library-path (unspecified)) (set! q4c28@load/args (unspecified)) (set! q4c2a@load (unspecified)) (set! q4c2c@ironscheme-build (unspecified)) (set! q4c2e@eval-top-level (unspecified)) (set! q4c30@compile-system-libraries (unspecified)) (set! q4c32@compile (unspecified)) (set! q4c34@compile->closure (unspecified)) (set! q4c36@pre-compile-r6rs-file (unspecified)) (set! q4c38@load-r6rs-top-level (unspecified)) (set! q4c3a@load-r6rs-top-level-sexp (unspecified)) (set! q4c3c@prefix-inc (unspecified)) (set! q4c3e@prefix-inc! (unspecified)) (set! q4c0e@ref (lambda (q4c79@rtd q4c7a@i q4c7b@x) (let ((q4c7f@val ((record-accessor q4c79@rtd q4c7a@i) q4c7b@x))) (if (symbol? q4c7f@val) (ungensym q4c7f@val) q4c7f@val)))) (set! q4d75@q4c0e@ref q4c0e@ref) (set! q4c10@x* '()) (set! q4d76@q4c10@x* q4c10@x*) (set! q4c12@add-library-path! (lambda (q4c81@path) (q2cc4@q2b00@library-path (append (q2cc4@q2b00@library-path) (list q4c81@path))))) (set! q4d77@q4c12@add-library-path! q4c12@add-library-path!) (set! q4c14@parse-and-add-library-path (lambda (q4c83@paths q4c84@message) (letrec* ((q4c88@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((q4c89@t q4c83@paths)) (if q4c89@t ((lambda (q4c8b@paths) (for-each (lambda (q4c8d@path) (if (file-exists? q4c8d@path) (q4c12@add-library-path! (expand-path q4c8d@path)) (format (current-error-port) q4c84@message q4c8d@path))) (string-split q4c8b@paths q4c88@separator))) q4c89@t) (void)))))) (set! q4d78@q4c14@parse-and-add-library-path q4c14@parse-and-add-library-path) (set! q4c16@for-each-with-index (lambda (q4c8f@proc q4c90@lst) (letrec ((q4c93@loop (lambda (q4c95@i q4c96@lst) (if (null? q4c96@lst) (if '#f '#f (void)) (begin (q4c8f@proc q4c95@i (car q4c96@lst)) (q4c93@loop (+ q4c95@i '1) (cdr q4c96@lst))))))) (q4c93@loop '1 q4c90@lst)))) (set! q4d79@q4c16@for-each-with-index q4c16@for-each-with-index) (set! q4c18@rpad (lambda (q4c99@str q4c9a@pad q4c9b@n) (let ((q4c9f@rest (- q4c9b@n (string-length (format '"~a" q4c99@str))))) (let q4ca5@loop ((q4ca1@rest q4c9f@rest) (q4ca2@ret (format '"~a" q4c99@str))) (if (<= q4ca1@rest '0) q4ca2@ret (q4ca5@loop (- q4ca1@rest '1) (string-append q4ca2@ret q4c9a@pad))))))) (set! q4d7a@q4c18@rpad q4c18@rpad) (set! q4c1a@condition-printer (lambda (q4ca7@e q4ca8@port) (letrec* ((q4cac@max-condition-len (apply max (map (lambda (q4cbd@c) (string-length (symbol->string (record-type-name (record-rtd q4cbd@c))))) (simple-conditions q4ca7@e))))) (begin (display '" Condition components:\n" q4ca8@port) (q4c16@for-each-with-index (lambda (q4cad@i q4cae@x) (let ((q4cb1@rtd (record-rtd q4cae@x)) (q4cb2@fields-alist (q4c1c@record->field-alist q4cae@x))) (begin (format q4ca8@port '" ~d. ~a" q4cad@i (q4c18@rpad (symbol->string (record-type-name q4cb1@rtd)) '" " q4cac@max-condition-len)) (if (null? q4cb2@fields-alist) (newline q4ca8@port) (void)) (let q4cb9@loop ((q4cb5@first '#t) (q4cb6@fields-alist q4cb2@fields-alist)) (if (null? q4cb6@fields-alist) '() (let ((q4cbb@field (car q4cb6@fields-alist))) (begin (if (not q4cb5@first) (display (q4c18@rpad '"" '" " (+ '4 q4cac@max-condition-len)) q4ca8@port) (void)) (display '"       " q4ca8@port) (display (car q4cbb@field) q4ca8@port) (display '": " q4ca8@port) (write (cdr q4cbb@field) q4ca8@port) (newline q4ca8@port) (q4cb9@loop '#f (cdr q4cb6@fields-alist))))))))) (simple-conditions q4ca7@e)))))) (set! q4d7b@q4c1a@condition-printer q4c1a@condition-printer) (set! q4c1c@record->field-alist (lambda (q4cbf@r) (letrec* ((q4cc2@ref (lambda (q4ccd@rtd q4cce@i q4ccf@x) (let ((q4cd3@val ((record-accessor q4ccd@rtd q4cce@i) q4ccf@x))) (if (symbol? q4cd3@val) (ungensym q4cd3@val) q4cd3@val))))) (let q4cc7@loop ((q4cc3@ret '()) (q4cc4@rtd (record-rtd q4cbf@r))) (if q4cc4@rtd (q4cc7@loop (append q4cc3@ret (q4c1e@map-with-index (lambda (q4cc9@i q4cca@field) (cons q4cca@field (q4cc2@ref q4cc4@rtd q4cc9@i q4cbf@r))) (vector->list (record-type-field-names q4cc4@rtd)))) (record-type-parent q4cc4@rtd)) q4cc3@ret))))) (set! q4d7c@q4c1c@record->field-alist q4c1c@record->field-alist) (set! q4c1e@map-with-index (lambda (q4cd5@proc q4cd6@lst) (let q4cdf@loop ((q4cd9@i '0) (q4cda@lst q4cd6@lst) (q4cdb@ret '())) (if (null? q4cda@lst) (reverse q4cdb@ret) (q4cdf@loop (+ q4cd9@i '1) (cdr q4cda@lst) (cons (q4cd5@proc q4cd9@i (car q4cda@lst)) q4cdb@ret)))))) (set! q4d7d@q4c1e@map-with-index q4c1e@map-with-index) (set! q4c20@repl (lambda q4ce1@x (letrec* ((q4ce4@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (q4ce7@q4ce5) (lambda () (with-exception-handler (lambda (q4ce9@e) ((call/cc (lambda (q4ceb@q4ce6) (q4ce7@q4ce5 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? q4ce9@e) (q4c1a@condition-printer q4ce9@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" q4ce9@e))) (q4ceb@q4ce6 (lambda () (raise-continuable q4ce9@e)))))))))) (lambda () (let q4cf1@loop ((q4ced@line (get-line (current-input-port))) (q4cee@accum '"")) (letrec* ((q4cf4@parentheses-ok? (lambda (q4cff@text) (let q4d07@loop ((q4d01@chars (string->list q4cff@text)) (q4d02@p0 '0) (q4d03@p1 '0)) (if (null? q4d01@chars) (= '0 q4d02@p0 q4d03@p1) (let ((q4d09@t (car q4d01@chars))) (if (memv q4d09@t '(#\()) (q4d07@loop (cdr q4d01@chars) (+ q4d02@p0 '1) q4d03@p1) (if (memv q4d09@t '(#\))) (q4d07@loop (cdr q4d01@chars) (- q4d02@p0 '1) q4d03@p1) (if (memv q4d09@t '(#\[)) (q4d07@loop (cdr q4d01@chars) q4d02@p0 (+ q4d03@p1 '1)) (if (memv q4d09@t '(#\])) (q4d07@loop (cdr q4d01@chars) q4d02@p0 (- q4d03@p1 '1)) (q4d07@loop (cdr q4d01@chars) q4d02@p0 q4d03@p1)))))))))) (q4cf6@eval-string-print (lambda (q4cf9@text) (if (not (or (string=? '"\n" q4cf9@text) (= '0 (string-length q4cf9@text)))) (call-with-values (lambda () (q4c2e@eval-top-level (call-with-port (open-string-input-port q4cf9@text) read))) (lambda q4cfb@out* (for-each (lambda (q4cfd@out) (begin (write q4cfd@out) (newline))) q4cfb@out*))) (void))))) (if (eof-object? q4ced@line) (begin (q4cf6@eval-string-print q4cee@accum) (exit)) (let ((q4cf7@current (string-append q4cee@accum q4ced@line))) (if (q4cf4@parentheses-ok? q4cf7@current) (q4cf6@eval-string-print q4cf7@current) (q4cf1@loop (get-line (current-input-port)) q4cf7@current)))))))))))) (newline) (q4ce4@rec))))) (q4ce4@rec)))) (set! q4d7e@q4c20@repl q4c20@repl) (set! q4c22@trace-printer (q2a0a@q28e8@make-parameter write)) (set! q4d7f@q4c22@trace-printer q4c22@trace-printer) (set! q4c24@command-line (q2a0a@q28e8@make-parameter (get-command-line))) (set! q4d80@q4c24@command-line q4c24@command-line) (set! q4c26@local-library-path (lambda (q4d0b@filename) (q2cc4@q2b00@library-path))) (set! q4d81@q4c26@local-library-path q4c26@local-library-path) (set! q4c28@load/args (lambda (q4d0d@filename . q4d0f@args) (begin (apply q4c38@load-r6rs-top-level q4d0d@filename 'load q4d0f@args) (void)))) (set! q4d82@q4c28@load/args q4c28@load/args) (set! q4c2a@load (lambda (q4d11@filename) (begin (apply q4c38@load-r6rs-top-level q4d11@filename 'load (q4c24@command-line)) (void)))) (set! q4d83@q4c2a@load q4c2a@load) (set! q4c2c@ironscheme-build (lambda () (q4c2a@load '"ironscheme-buildscript.ss"))) (set! q4d84@q4c2c@ironscheme-build q4c2c@ironscheme-build) (set! q4c2e@eval-top-level (lambda (q4d13@x) (q4beb@q3181@eval q4d13@x (q4c02@q31af@interaction-environment)))) (set! q4d85@q4c2e@eval-top-level q4c2e@eval-top-level) (set! q4c30@compile-system-libraries (lambda () (q4c2e@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! q4d86@q4c30@compile-system-libraries q4c30@compile-system-libraries) (set! q4c32@compile (lambda (q4d15@filename) (q4c38@load-r6rs-top-level q4d15@filename 'compile))) (set! q4d87@q4c32@compile q4c32@compile) (set! q4c34@compile->closure (lambda (q4d17@filename) (q4c38@load-r6rs-top-level q4d17@filename 'closure))) (set! q4d88@q4c34@compile->closure q4c34@compile->closure) (set! q4c36@pre-compile-r6rs-file (lambda (q4d19@filename) (q4c38@load-r6rs-top-level q4d19@filename 'compile))) (set! q4d89@q4c36@pre-compile-r6rs-file q4c36@pre-compile-r6rs-file) (set! q4c38@load-r6rs-top-level (lambda (q4d1b@filename q4d1c@how . q4d1f@args) (begin (q2cc4@q2b00@library-path (q4c26@local-library-path q4d1b@filename)) (let ((q4d21@x* (with-input-from-file q4d1b@filename (lambda () (let q4d23@f () (let ((q4d25@x (q29fc@q28cc@read-annotated))) (if (eof-object? q4d25@x) '() (cons q4d25@x (q4d23@f))))))))) (let ((q4d27@t q4d1c@how)) (if (memv q4d27@t '(closure)) (q4c01@q31ad@pre-compile-r6rs-top-level q4d21@x*) (if (memv q4d27@t '(load)) (begin (q4c24@command-line (cons q4d1b@filename (car q4d1f@args))) (q2a0b@q28ea@mosh-cache-dir (create-mosh-cache-dir)) (if (q2a0b@q28ea@mosh-cache-dir) (gensym-prefix-set! (q4c3e@prefix-inc! (string-append (q2a0b@q28ea@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (q4d29@file) ((call/cc (lambda (q4d2d@q4d2b) (lambda () (with-exception-handler (lambda (q4d2f@c) ((call/cc (lambda (q4d31@q4d2c) (q4d2d@q4d2b (lambda () (if '#t '#t (q4d31@q4d2c (lambda () (raise-continuable q4d2f@c)))))))))) (lambda () (delete-file (string-append (q2a0b@q28ea@mosh-cache-dir) '"/" q4d29@file))))))))) (directory-list (q2a0b@q28ea@mosh-cache-dir))) (void)) (let ((q4d33@compiled (q4c00@q31ab@compile-r6rs-top-level q4d21@x*))) (begin (if (and (q2a0b@q28ea@mosh-cache-dir) (not (symbol-value '%disable-acc))) (q2cc8@q2b08@serialize-all q2a05@q28de@serialize-library q2a61@q2a1a@compile-core-expr) (void)) (q4d33@compiled)))) (if (memv q4d27@t '(compile)) (begin (q4c00@q31ab@compile-r6rs-top-level q4d21@x*) (q2cc8@q2b08@serialize-all q2a05@q28de@serialize-library q2a61@q2a1a@compile-core-expr)) (if '#f '#f (void)))))))))) (set! q4d8a@q4c38@load-r6rs-top-level q4c38@load-r6rs-top-level) (set! q4c3a@load-r6rs-top-level-sexp (lambda (q4d35@import-spec q4d36@thunk) (let ((q4d41@q4d3a q2cc4@q2b00@library-path) (q4d42@q4d3c q2a0b@q28ea@mosh-cache-dir) (q4d43@q4d3e (q4c26@local-library-path '"")) (q4d44@q4d40 (create-mosh-cache-dir))) (let ((q4d49@swap (lambda () (begin (let ((q4d4b@t (q4d41@q4d3a))) (begin (q4d41@q4d3a q4d43@q4d3e) (set! q4d43@q4d3e q4d4b@t))) (let ((q4d4d@t (q4d42@q4d3c))) (begin (q4d42@q4d3c q4d44@q4d40) (set! q4d44@q4d40 q4d4d@t))))))) (dynamic-wind q4d49@swap (lambda () (begin (if (q2a0b@q28ea@mosh-cache-dir) (gensym-prefix-set! (q4c3e@prefix-inc! (string-append (q2a0b@q28ea@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((q4d53@q4d50 q4c24@command-line) (q4d54@q4d52 '())) (let ((q4d57@swap (lambda () (let ((q4d59@t (q4d53@q4d50))) (begin (q4d53@q4d50 q4d54@q4d52) (set! q4d54@q4d52 q4d59@t)))))) (dynamic-wind q4d57@swap (lambda () ((q4c00@q31ab@compile-r6rs-top-level (list (cons 'import q4d35@import-spec) (list q4d36@thunk))))) q4d57@swap))))) q4d49@swap))))) (set! q4d8b@q4c3a@load-r6rs-top-level-sexp q4c3a@load-r6rs-top-level-sexp) (set! q4c3c@prefix-inc (lambda (q4d5b@prefix-string) (let ((q4d5d@prefix (symbol->string q4d5b@prefix-string))) (let ((q4d5f@len (string-length q4d5d@prefix))) (let q4d67@loop ((q4d61@i (- q4d5f@len '1)) (q4d62@carry? '#t) (q4d63@accum '())) (if (< q4d61@i '0) (string->symbol (list->string (if q4d62@carry? (cons '#\a q4d63@accum) q4d63@accum))) (if q4d62@carry? (let ((q4d69@next-integer (+ '1 (char->integer (string-ref q4d5d@prefix q4d61@i))))) (if (= q4d69@next-integer '123) (q4d67@loop (- q4d61@i '1) '#f (cons '#\A q4d63@accum)) (if (= q4d69@next-integer '91) (q4d67@loop (- q4d61@i '1) '#t (cons '#\a q4d63@accum)) (q4d67@loop (- q4d61@i '1) '#f (cons (integer->char q4d69@next-integer) q4d63@accum))))) (q4d67@loop (- q4d61@i '1) '#f (cons (string-ref q4d5d@prefix q4d61@i) q4d63@accum))))))))) (set! q4d8c@q4c3c@prefix-inc q4c3c@prefix-inc) (set! q4c3e@prefix-inc! (lambda (q4d6b@file) (begin (if (not (file-exists? q4d6b@file)) (call-with-output-file q4d6b@file (lambda (q4d6d@port) (write 'd q4d6d@port))) (void)) (let ((q4d6f@prefix (call-with-input-file q4d6b@file read))) (if (main-vm?) (let ((q4d71@next-prefix (q4c3c@prefix-inc q4d6f@prefix))) (begin (call-with-port (open-file-output-port q4d6b@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (q4d73@port) (write q4d71@next-prefix q4d73@port))) q4d6f@prefix)) q4d6f@prefix))))) (set! q4d8d@q4c3e@prefix-inc! q4c3e@prefix-inc!) (begin (q2cc9@q2b0a@current-precompiled-library-loader q2a06@q28e0@load-serialized-library) (set-symbol-value! 'load q4c2a@load) (set-symbol-value! 'pre-compile-r6rs-file q4c36@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs q4c2e@eval-top-level) (set-symbol-value! 'int-env-syms q4be2@q316f@interaction-environment-symbols) (set-symbol-value! 'expanded2core q2a60@q2a18@expanded->core) (set-symbol-value! 'trace-printer q4c22@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (q4c3f@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list q4c3f@c))))) (q4c14@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (q4c14@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (q4c12@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (q4c12@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (q4c12@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((q4c41@prefix (lambda (q4c43@ext q4c44@ls) (append (map (lambda (q4c47@x) (string-append q4c43@ext q4c47@x)) q4c44@ls) q4c44@ls)))) (q2cc5@q2b02@library-extensions (q4c41@prefix '".mosh" (q2cc5@q2b02@library-extensions)))) (current-exception-handler (lambda (q4c49@c) (begin (if (condition? q4c49@c) (q4c1a@condition-printer q4c49@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" q4c49@c)) q4c49@c))) (if ((call/cc (lambda (q4c4d@q4c4b) (lambda () (with-exception-handler (lambda (q4c4f@c) ((call/cc (lambda (q4c51@q4c4c) (q4c4d@q4c4b (lambda () (if '#t '#f (q4c51@q4c4c (lambda () (raise-continuable q4c4f@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (q4c3a@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (q4c24@command-line)) (let ((q4c5b@q4c54 q4c24@command-line) (q4c5c@q4c56 q2a0b@q28ea@mosh-cache-dir) (q4c5d@q4c58 '()) (q4c5e@q4c5a (create-mosh-cache-dir))) (let ((q4c63@swap (lambda () (begin (let ((q4c65@t (q4c5b@q4c54))) (begin (q4c5b@q4c54 q4c5d@q4c58) (set! q4c5d@q4c58 q4c65@t))) (let ((q4c67@t (q4c5c@q4c56))) (begin (q4c5c@q4c56 q4c5e@q4c5a) (set! q4c5e@q4c5a q4c67@t))))))) (dynamic-wind q4c63@swap (lambda () (begin (if (q2a0b@q28ea@mosh-cache-dir) (gensym-prefix-set! (q4c3e@prefix-inc! (string-append (q2a0b@q28ea@mosh-cache-dir) '"/prefix.txt"))) (void)) (q4c20@repl))) q4c63@swap))) (begin (q2cc4@q2b00@library-path (q4c26@local-library-path (car (q4c24@command-line)))) (set! q4c10@x* (with-input-from-file (car (q4c24@command-line)) (lambda () (let q4c69@f () (let ((q4c6b@x (q29fc@q28cc@read-annotated))) (if (eof-object? q4c6b@x) '() (cons q4c6b@x (q4c69@f)))))))) (q4c24@command-line (cons (car (q4c24@command-line)) (cdr (q4c24@command-line)))) (q2a0b@q28ea@mosh-cache-dir (create-mosh-cache-dir)) (if (q2a0b@q28ea@mosh-cache-dir) (gensym-prefix-set! (q4c3e@prefix-inc! (string-append (q2a0b@q28ea@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (q4c6d@file) ((call/cc (lambda (q4c71@q4c6f) (lambda () (with-exception-handler (lambda (q4c73@c) ((call/cc (lambda (q4c75@q4c70) (q4c71@q4c6f (lambda () (if '#t '#t (q4c75@q4c70 (lambda () (raise-continuable q4c73@c)))))))))) (lambda () (delete-file (string-append (q2a0b@q28ea@mosh-cache-dir) '"/" q4c6d@file))))))))) (directory-list (q2a0b@q28ea@mosh-cache-dir))) (void)) (let ((q4c77@compiled (q4c00@q31ab@compile-r6rs-top-level q4c10@x*))) (begin (if (and (q2a0b@q28ea@mosh-cache-dir) (not (symbol-value '%disable-acc))) (q2cc8@q2b08@serialize-all q2a05@q28de@serialize-library q2a61@q2a1a@compile-core-expr) (void)) (q4c77@compiled))))))))
