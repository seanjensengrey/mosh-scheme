;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! dE28c5@library-file-path->cache-path (unspecified)) (set! dE28c7@read-annotated (unspecified)) (set! dE28c9@annotation-stripped (unspecified)) (set! dE28cb@annotation? (unspecified)) (set! dE28cd@annotation-source (unspecified)) (set! dE28cf@annotation-expression (unspecified)) (set! dE28d1@scm->fasl (unspecified)) (set! dE28d3@fasl-save (unspecified)) (set! dE28d5@fasl-load (unspecified)) (set! dE28d7@verbose? (unspecified)) (set! dE28d9@serialize-library (unspecified)) (set! dE28db@load-serialized-library (unspecified)) (set! dE28dd@make-record-printer (unspecified)) (set! dE28df@compile-core (unspecified)) (set! dE28e1@read-library-source-file (unspecified)) (set! dE28e3@make-parameter (unspecified)) (set! dE28e5@mosh-cache-dir (unspecified)) (set! dE297b@file-options-spec (unspecified)) (set! dE28c5@library-file-path->cache-path (lambda (dE297c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (dE2982@dE297f dE2983@dE2981) (let ((dE2986@extract dE2983@dE2981) (dE2987@p dE2982@dE297f)) (letrec* ((dE298b@display-hex (lambda (dE2994@n) (if (<= '0 dE2994@n '9) (display dE2994@n dE2987@p) (display (integer->char (+ (char->integer '#\a) (- dE2994@n '10))) dE2987@p))))) (begin (let dE298e@f ((dE298c@ls (string-split dE297c@x '#\/))) (if (not (null? dE298c@ls)) (begin (display '"_" dE2987@p) (for-each (lambda (dE2990@c) (if (or (char<=? '#\a dE2990@c '#\z) (char<=? '#\A dE2990@c '#\Z) (char<=? '#\0 dE2990@c '#\9) (memv dE2990@c '(#\- #\. #\_ #\~))) (display dE2990@c dE2987@p) (begin (display '"%" dE2987@p) (let ((dE2992@n (char->integer dE2990@c))) (begin (dE298b@display-hex (quotient dE2992@n '16)) (dE298b@display-hex (remainder dE2992@n '16))))))) (string->list (car dE298c@ls))) (dE298e@f (cdr dE298c@ls))) (void))) (dE2986@extract)))))))) (set! dE29f6@dE28c5@library-file-path->cache-path dE28c5@library-file-path->cache-path) (set! dE28c7@read-annotated read) (set! dE29f7@dE28c7@read-annotated dE28c7@read-annotated) (set! dE28c9@annotation-stripped (lambda (dE2996@x) (dE28cf@annotation-expression dE2996@x))) (set! dE29f8@dE28c9@annotation-stripped dE28c9@annotation-stripped) (set! dE28cb@annotation? (lambda (dE2998@x) (source-info dE2998@x))) (set! dE29f9@dE28cb@annotation? dE28cb@annotation?) (set! dE28cd@annotation-source (lambda (dE299a@x) (source-info dE299a@x))) (set! dE29fa@dE28cd@annotation-source dE28cd@annotation-source) (set! dE28cf@annotation-expression (lambda (dE299c@x) (if (pair? dE299c@x) (cons (car dE299c@x) (cdr dE299c@x)) (if (procedure? dE299c@x) (set-source-info! dE299c@x '#f) dE299c@x)))) (set! dE29fb@dE28cf@annotation-expression dE28cf@annotation-expression) (set! dE28d1@scm->fasl (lambda (dE299e@filename) (string-append (dE28e5@mosh-cache-dir) '"/" (dE28c5@library-file-path->cache-path dE299e@filename) '".mosh-fasl"))) (set! dE29fc@dE28d1@scm->fasl dE28d1@scm->fasl) (set! dE28d3@fasl-save (lambda (dE29a0@filename dE29a1@obj) (call-with-port (open-file-output-port dE29a0@filename) (lambda (dE29a4@port) ((symbol-value 'fasl-write!) dE29a1@obj dE29a4@port))))) (set! dE29fd@dE28d3@fasl-save dE28d3@fasl-save) (set! dE28d5@fasl-load (lambda (dE29a6@filename) (call-with-port (open-file-input-port dE29a6@filename) (symbol-value 'fasl-read!)))) (set! dE29fe@dE28d5@fasl-load dE28d5@fasl-load) (set! dE28d7@verbose? (symbol-value '%verbose)) (set! dE29ff@dE28d7@verbose? dE28d7@verbose?) (set! dE28d9@serialize-library (lambda (dE29a8@filename dE29a9@obj) (begin (if dE28d7@verbose? (format (current-error-port) '"serialize-library ~a\n..." dE29a8@filename) (void)) (let ((dE29ac@expanded2core (symbol-value 'expanded2core))) (let ((dE29ae@compile (symbol-value 'compile-w/o-halt))) (let ((dE29b0@code dE29a9@obj)) (let ((dE29b2@pivot (cddddr (cddddr dE29b0@code)))) (let ((dE29b4@visit (dE29ae@compile (dE29ac@expanded2core (car dE29b2@pivot))))) (begin (set-car! dE29b2@pivot dE29b4@visit) (let ((dE29b6@pivot (cdr dE29b2@pivot))) (let ((dE29b8@invoke (dE29ae@compile (dE29ac@expanded2core (car dE29b6@pivot))))) (set-car! dE29b6@pivot dE29b8@invoke))))))))) (let ((dE29ba@fasl-file (dE28d1@scm->fasl dE29a8@filename))) (begin (if (file-exists? dE29ba@fasl-file) (delete-file dE29ba@fasl-file) (void)) ((call/cc (lambda (dE29be@dE29bc) (lambda () (with-exception-handler (lambda (dE29c0@c) ((call/cc (lambda (dE29c2@dE29bd) (dE29be@dE29bc (lambda () (if '#t (begin (if dE28d7@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" dE29a8@filename) (void)) (if (file-exists? dE29ba@fasl-file) (delete-file dE29ba@fasl-file) (void)) '#f) (dE29c2@dE29bd (lambda () (raise-continuable dE29c0@c)))))))))) (lambda () (dE28d3@fasl-save dE29ba@fasl-file dE29a9@obj)))))))))))) (set! dE2a00@dE28d9@serialize-library dE28d9@serialize-library) (set! dE28db@load-serialized-library (lambda (dE29c4@filename dE29c5@obj) (and (dE28e5@mosh-cache-dir) (let ((dE29c8@fasl-file (dE28d1@scm->fasl dE29c4@filename))) (if (and (file-exists? dE29c8@fasl-file) ((symbol-value 'file-newer?) dE29c8@fasl-file dE29c4@filename)) (let ((dE29ca@expanded2core (symbol-value 'expanded2core))) (let ((dE29cc@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((dE29ce@code (dE28d5@fasl-load dE29c8@fasl-file))) (let ((dE29d0@pivot (cddddr (cddddr dE29ce@code)))) (let ((dE29d2@visit (car dE29d0@pivot))) (let ((dE29d4@visit-proc (lambda () (dE29cc@eval-compiled-core dE29d2@visit)))) (begin (set-car! dE29d0@pivot dE29d4@visit-proc) (let ((dE29d6@pivot (cdr dE29d0@pivot))) (let ((dE29d8@invoke (car dE29d6@pivot))) (begin (set-car! dE29d6@pivot (lambda () (dE29cc@eval-compiled-core dE29d8@invoke))) (apply dE29c5@obj dE29ce@code))))))))))) '#f))))) (set! dE2a01@dE28db@load-serialized-library dE28db@load-serialized-library) (set! dE28dd@make-record-printer (lambda (dE29da@name dE29db@printer) (lambda dE29de@x (begin (display '"record printer") (for-each display dE29de@x))))) (set! dE2a02@dE28dd@make-record-printer dE28dd@make-record-printer) (set! dE28df@compile-core (lambda dE29e0@x (apply error 'comile-core '"not implementated" dE29e0@x))) (set! dE2a03@dE28df@compile-core dE28df@compile-core) (set! dE28e1@read-library-source-file (lambda (dE29e2@file-name) (with-input-from-file dE29e2@file-name dE28c7@read-annotated))) (set! dE2a04@dE28e1@read-library-source-file dE28e1@read-library-source-file) (set! dE28e3@make-parameter (lambda dE29f2 (let ((dE29f3 (length dE29f2))) (if (= dE29f3 '1) (apply (lambda (dE29e4@x) (dE28e3@make-parameter dE29e4@x (lambda (dE29e6@x) dE29e6@x))) dE29f2) (if (= dE29f3 '2) (apply (lambda (dE29e8@x dE29e9@fender) (let ((dE29ec@x (dE29e9@fender dE29e8@x))) (lambda dE29f0 (let ((dE29f1 (length dE29f0))) (if (= dE29f1 '0) (apply (lambda () dE29ec@x) dE29f0) (if (= dE29f1 '1) (apply (lambda (dE29ee@v) (set! dE29ec@x (dE29e9@fender dE29ee@v))) dE29f0) (error 'apply '"invalid arg count"))))))) dE29f2) (error 'apply '"invalid arg count")))))) (set! dE2a05@dE28e3@make-parameter dE28e3@make-parameter) (set! dE28e5@mosh-cache-dir (dE28e3@make-parameter '#f)) (set! dE2a06@dE28e5@mosh-cache-dir dE28e5@mosh-cache-dir) (set! dE297b@file-options-spec (lambda (dE29f4@x) dE29f4@x)) (set! dE2a07@dE297b@file-options-spec dE297b@file-options-spec) (void))
(begin (set! dE2a0d@current-primitive-locations (unspecified)) (set! dE2a0f@mutable? (unspecified)) (set! dE2a11@rewriter (unspecified)) (set! dE2a13@expanded->core (unspecified)) (set! dE2a15@compile-core-expr (unspecified)) (set! dE2a17@pretty-print (unspecified)) (set! dE2a19@compile-core-expr-to-port (unspecified)) (set! dE2a0d@current-primitive-locations (dE2a05@dE28e3@make-parameter (lambda (dE2a1a@x) '#f) (lambda (dE2a1c@p) dE2a1c@p))) (set! dE2a58@dE2a0d@current-primitive-locations dE2a0d@current-primitive-locations) (set! dE2a0f@mutable? (lambda (dE2a1e@x) (or (pair? dE2a1e@x) (vector? dE2a1e@x) (hashtable? dE2a1e@x)))) (set! dE2a59@dE2a0f@mutable? dE2a0f@mutable?) (set! dE2a11@rewriter (lambda (dE2a20@quote-hack?) (letrec* ((dE2a23@f (lambda (dE2a24@x) (if (pair? dE2a24@x) (let ((dE2a26@t (car dE2a24@x))) (if (memv dE2a26@t '(quote)) (if (and dE2a20@quote-hack? (dE2a0f@mutable? (cadr dE2a24@x))) (let ((dE2a28@g (gensym))) (begin (set-symbol-value! dE2a28@g (cadr dE2a24@x)) dE2a28@g)) dE2a24@x) (if (memv dE2a26@t '(case-lambda)) (cons 'case-lambda (map (lambda (dE2a2a@x) (cons (car dE2a2a@x) (map dE2a23@f (cdr dE2a2a@x)))) (cdr dE2a24@x))) (if (memv dE2a26@t '(lambda)) (cons* 'lambda (cadr dE2a24@x) (map dE2a23@f (cddr dE2a24@x))) (if (memv dE2a26@t '(letrec)) (let ((dE2a2c@bindings (cadr dE2a24@x)) (dE2a2d@body* (cddr dE2a24@x))) (let ((dE2a30@lhs* (map car dE2a2c@bindings)) (dE2a31@rhs* (map cadr dE2a2c@bindings))) (cons* 'letrec (map list dE2a30@lhs* (map dE2a23@f dE2a31@rhs*)) (map dE2a23@f dE2a2d@body*)))) (if (memv dE2a26@t '(letrec*)) (let ((dE2a34@bindings (cadr dE2a24@x)) (dE2a35@body* (cddr dE2a24@x))) (let ((dE2a38@lhs* (map car dE2a34@bindings)) (dE2a39@rhs* (map cadr dE2a34@bindings))) (cons* 'letrec* (map list dE2a38@lhs* (map dE2a23@f dE2a39@rhs*)) (map dE2a23@f dE2a35@body*)))) (if (memv dE2a26@t '(library-letrec*)) (let ((dE2a3c@name (cadr dE2a24@x)) (dE2a3d@x (cdr dE2a24@x))) (let ((dE2a40@bindings (cadr dE2a3d@x)) (dE2a41@body* (cddr dE2a3d@x))) (let ((dE2a44@lhs* (map car dE2a40@bindings)) (dE2a45@lhs** (map cadr dE2a40@bindings)) (dE2a46@rhs* (map caddr dE2a40@bindings))) (cons* 'library-letrec* dE2a3c@name (map list dE2a44@lhs* dE2a45@lhs** (map dE2a23@f dE2a46@rhs*)) (map dE2a23@f dE2a41@body*))))) (if (memv dE2a26@t '(begin)) (cons 'begin (map dE2a23@f (cdr dE2a24@x))) (if (memv dE2a26@t '(set!)) (list 'set! (cadr dE2a24@x) (dE2a23@f (caddr dE2a24@x))) (if (memv dE2a26@t '(primitive)) (let ((dE2a4a@op (cadr dE2a24@x))) (let ((dE2a4c@t ((dE2a0d@current-primitive-locations) dE2a4a@op))) (if dE2a4c@t ((lambda (dE2a4e@loc) dE2a4e@loc) dE2a4c@t) dE2a4a@op))) (if (memv dE2a26@t '(define)) dE2a24@x (if (list? dE2a24@x) (map dE2a23@f dE2a24@x) (error 'rewrite '"invalid form ~s ~s" dE2a24@x (list? dE2a24@x)))))))))))))) dE2a24@x)))) dE2a23@f))) (set! dE2a5a@dE2a11@rewriter dE2a11@rewriter) (set! dE2a13@expanded->core (lambda (dE2a50@x) ((dE2a11@rewriter '#f) dE2a50@x))) (set! dE2a5b@dE2a13@expanded->core dE2a13@expanded->core) (set! dE2a15@compile-core-expr (lambda (dE2a52@x) ((dE2a11@rewriter '#f) dE2a52@x))) (set! dE2a5c@dE2a15@compile-core-expr dE2a15@compile-core-expr) (set! dE2a17@pretty-print write) (set! dE2a5d@dE2a17@pretty-print dE2a17@pretty-print) (set! dE2a19@compile-core-expr-to-port (lambda (dE2a54@x dE2a55@p) (dE2a17@pretty-print ((dE2a11@rewriter '#f) dE2a54@x) dE2a55@p))) (set! dE2a5e@dE2a19@compile-core-expr-to-port dE2a19@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! dE2aad@make-collection (unspecified)) (set! dE2aaf@current-library-collection (unspecified)) (set! dE2ab1@rp (unspecified)) (set! dE2abb@library? (unspecified)) (set! dE2abd@library-id (unspecified)) (set! dE2abf@set-library-id! (unspecified)) (set! dE2ac1@library-name (unspecified)) (set! dE2ac3@set-library-name! (unspecified)) (set! dE2ac5@library-version (unspecified)) (set! dE2ac7@set-library-version! (unspecified)) (set! dE2ac9@library-imp* (unspecified)) (set! dE2acb@set-library-imp*! (unspecified)) (set! dE2acd@library-vis* (unspecified)) (set! dE2acf@set-library-vis*! (unspecified)) (set! dE2ad1@library-inv* (unspecified)) (set! dE2ad3@set-library-inv*! (unspecified)) (set! dE2ad5@library-subst (unspecified)) (set! dE2ad7@set-library-subst! (unspecified)) (set! dE2ad9@library-env (unspecified)) (set! dE2adb@set-library-env! (unspecified)) (set! dE2add@library-visit-state (unspecified)) (set! dE2adf@set-library-visit-state! (unspecified)) (set! dE2ae1@library-invoke-state (unspecified)) (set! dE2ae3@set-library-invoke-state! (unspecified)) (set! dE2ae5@library-visit-code (unspecified)) (set! dE2ae7@set-library-visit-code! (unspecified)) (set! dE2ae9@library-invoke-code (unspecified)) (set! dE2aeb@set-library-invoke-code! (unspecified)) (set! dE2aed@library-visible? (unspecified)) (set! dE2aef@set-library-visible?! (unspecified)) (set! dE2af1@library-source-file-name (unspecified)) (set! dE2af3@set-library-source-file-name! (unspecified)) (set! dE2af5@dummy (unspecified)) (set! dE2af7@find-dependencies (unspecified)) (set! dE2af9@find-library-by (unspecified)) (set! dE2afb@library-path (unspecified)) (set! dE2afd@library-extensions (unspecified)) (set! dE2aff@library-name->file-name (unspecified)) (set! dE2b01@file-locator (unspecified)) (set! dE2b03@serialize-all (unspecified)) (set! dE2b05@current-precompiled-library-loader (unspecified)) (set! dE2b07@try-load-from-file (unspecified)) (set! dE2b09@library-loader (unspecified)) (set! dE2b0b@current-library-expander (unspecified)) (set! dE2b0d@external-pending-libraries (unspecified)) (set! dE2b0f@find-external-library (unspecified)) (set! dE2b11@find-library-by-name (unspecified)) (set! dE2b13@library-exists? (unspecified)) (set! dE2b15@find-library-by-spec/die (unspecified)) (set! dE2b17@label->binding-table (unspecified)) (set! dE2b19@install-library-record (unspecified)) (set! dE2b1b@install-library (unspecified)) (set! dE2b1d@imported-label->binding (unspecified)) (set! dE2b1f@invoke-library (unspecified)) (set! dE2b21@visit-library (unspecified)) (set! dE2b23@invoke-library-by-spec (unspecified)) (set! dE2b25@installed-libraries (unspecified)) (set! dE2b27@library-spec (unspecified)) (set! dE2aad@make-collection (lambda () (let ((dE2b28@set '())) (letrec* ((dE2b2b@set-cons (lambda (dE2b30@x dE2b31@ls) (if (memq dE2b30@x dE2b31@ls) dE2b31@ls (cons dE2b30@x dE2b31@ls))))) (lambda dE2b2e (let ((dE2b2f (length dE2b2e))) (if (= dE2b2f '0) (apply (lambda () dE2b28@set) dE2b2e) (if (= dE2b2f '1) (apply (lambda (dE2b2c@x) (set! dE2b28@set (dE2b2b@set-cons dE2b2c@x dE2b28@set))) dE2b2e) (error 'apply '"invalid arg count"))))))))) (set! dE2c9c@dE2aad@make-collection dE2aad@make-collection) (set! dE2aaf@current-library-collection (dE2a05@dE28e3@make-parameter (dE2aad@make-collection) (lambda (dE2b34@x) (begin (if (not (procedure? dE2b34@x)) (assertion-violation 'current-library-collection '"not a procedure" dE2b34@x) (void)) dE2b34@x)))) (set! dE2c9d@dE2aaf@current-library-collection dE2aaf@current-library-collection) (set! dE2ab1@rp (dE2a02@dE28dd@make-record-printer 'library (lambda (dE2b36@x dE2b37@p dE2b38@wr) (begin (if (not (dE2abb@library? dE2b36@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (dE2ac5@library-version dE2b36@x)) (dE2ac1@library-name dE2b36@x) (append (dE2ac1@library-name dE2b36@x) (list (dE2ac5@library-version dE2b36@x))))) dE2b37@p))))) (set! dE2c9e@dE2ab1@rp dE2ab1@rp) (set! dE2abb@library? (lambda (dE2b3c@x) (and (simple-struct? dE2b3c@x) (eq? (simple-struct-name dE2b3c@x) 'library)))) (set! dE2c9f@dE2abb@library? dE2abb@library?) (set! dE2abd@library-id (lambda (dE2b3e@x) (simple-struct-ref dE2b3e@x '0))) (set! dE2ca0@dE2abd@library-id dE2abd@library-id) (set! dE2abf@set-library-id! (lambda (dE2b40@x dE2b41@val) (simple-struct-set! dE2b40@x '0 dE2b41@val))) (set! dE2ca1@dE2abf@set-library-id! dE2abf@set-library-id!) (set! dE2ac1@library-name (lambda (dE2b44@x) (simple-struct-ref dE2b44@x '1))) (set! dE2ca2@dE2ac1@library-name dE2ac1@library-name) (set! dE2ac3@set-library-name! (lambda (dE2b46@x dE2b47@val) (simple-struct-set! dE2b46@x '1 dE2b47@val))) (set! dE2ca3@dE2ac3@set-library-name! dE2ac3@set-library-name!) (set! dE2ac5@library-version (lambda (dE2b4a@x) (simple-struct-ref dE2b4a@x '2))) (set! dE2ca4@dE2ac5@library-version dE2ac5@library-version) (set! dE2ac7@set-library-version! (lambda (dE2b4c@x dE2b4d@val) (simple-struct-set! dE2b4c@x '2 dE2b4d@val))) (set! dE2ca5@dE2ac7@set-library-version! dE2ac7@set-library-version!) (set! dE2ac9@library-imp* (lambda (dE2b50@x) (simple-struct-ref dE2b50@x '3))) (set! dE2ca6@dE2ac9@library-imp* dE2ac9@library-imp*) (set! dE2acb@set-library-imp*! (lambda (dE2b52@x dE2b53@val) (simple-struct-set! dE2b52@x '3 dE2b53@val))) (set! dE2ca7@dE2acb@set-library-imp*! dE2acb@set-library-imp*!) (set! dE2acd@library-vis* (lambda (dE2b56@x) (simple-struct-ref dE2b56@x '4))) (set! dE2ca8@dE2acd@library-vis* dE2acd@library-vis*) (set! dE2acf@set-library-vis*! (lambda (dE2b58@x dE2b59@val) (simple-struct-set! dE2b58@x '4 dE2b59@val))) (set! dE2ca9@dE2acf@set-library-vis*! dE2acf@set-library-vis*!) (set! dE2ad1@library-inv* (lambda (dE2b5c@x) (simple-struct-ref dE2b5c@x '5))) (set! dE2caa@dE2ad1@library-inv* dE2ad1@library-inv*) (set! dE2ad3@set-library-inv*! (lambda (dE2b5e@x dE2b5f@val) (simple-struct-set! dE2b5e@x '5 dE2b5f@val))) (set! dE2cab@dE2ad3@set-library-inv*! dE2ad3@set-library-inv*!) (set! dE2ad5@library-subst (lambda (dE2b62@x) (simple-struct-ref dE2b62@x '6))) (set! dE2cac@dE2ad5@library-subst dE2ad5@library-subst) (set! dE2ad7@set-library-subst! (lambda (dE2b64@x dE2b65@val) (simple-struct-set! dE2b64@x '6 dE2b65@val))) (set! dE2cad@dE2ad7@set-library-subst! dE2ad7@set-library-subst!) (set! dE2ad9@library-env (lambda (dE2b68@x) (simple-struct-ref dE2b68@x '7))) (set! dE2cae@dE2ad9@library-env dE2ad9@library-env) (set! dE2adb@set-library-env! (lambda (dE2b6a@x dE2b6b@val) (simple-struct-set! dE2b6a@x '7 dE2b6b@val))) (set! dE2caf@dE2adb@set-library-env! dE2adb@set-library-env!) (set! dE2add@library-visit-state (lambda (dE2b6e@x) (simple-struct-ref dE2b6e@x '8))) (set! dE2cb0@dE2add@library-visit-state dE2add@library-visit-state) (set! dE2adf@set-library-visit-state! (lambda (dE2b70@x dE2b71@val) (simple-struct-set! dE2b70@x '8 dE2b71@val))) (set! dE2cb1@dE2adf@set-library-visit-state! dE2adf@set-library-visit-state!) (set! dE2ae1@library-invoke-state (lambda (dE2b74@x) (simple-struct-ref dE2b74@x '9))) (set! dE2cb2@dE2ae1@library-invoke-state dE2ae1@library-invoke-state) (set! dE2ae3@set-library-invoke-state! (lambda (dE2b76@x dE2b77@val) (simple-struct-set! dE2b76@x '9 dE2b77@val))) (set! dE2cb3@dE2ae3@set-library-invoke-state! dE2ae3@set-library-invoke-state!) (set! dE2ae5@library-visit-code (lambda (dE2b7a@x) (simple-struct-ref dE2b7a@x '10))) (set! dE2cb4@dE2ae5@library-visit-code dE2ae5@library-visit-code) (set! dE2ae7@set-library-visit-code! (lambda (dE2b7c@x dE2b7d@val) (simple-struct-set! dE2b7c@x '10 dE2b7d@val))) (set! dE2cb5@dE2ae7@set-library-visit-code! dE2ae7@set-library-visit-code!) (set! dE2ae9@library-invoke-code (lambda (dE2b80@x) (simple-struct-ref dE2b80@x '11))) (set! dE2cb6@dE2ae9@library-invoke-code dE2ae9@library-invoke-code) (set! dE2aeb@set-library-invoke-code! (lambda (dE2b82@x dE2b83@val) (simple-struct-set! dE2b82@x '11 dE2b83@val))) (set! dE2cb7@dE2aeb@set-library-invoke-code! dE2aeb@set-library-invoke-code!) (set! dE2aed@library-visible? (lambda (dE2b86@x) (simple-struct-ref dE2b86@x '12))) (set! dE2cb8@dE2aed@library-visible? dE2aed@library-visible?) (set! dE2aef@set-library-visible?! (lambda (dE2b88@x dE2b89@val) (simple-struct-set! dE2b88@x '12 dE2b89@val))) (set! dE2cb9@dE2aef@set-library-visible?! dE2aef@set-library-visible?!) (set! dE2af1@library-source-file-name (lambda (dE2b8c@x) (simple-struct-ref dE2b8c@x '13))) (set! dE2cba@dE2af1@library-source-file-name dE2af1@library-source-file-name) (set! dE2af3@set-library-source-file-name! (lambda (dE2b8e@x dE2b8f@val) (simple-struct-set! dE2b8e@x '13 dE2b8f@val))) (set! dE2cbb@dE2af3@set-library-source-file-name! dE2af3@set-library-source-file-name!) (set! dE2af5@dummy '3) (set! dE2cbc@dE2af5@dummy dE2af5@dummy) (set! dE2af7@find-dependencies (lambda (dE2b92@ls) (if (null? dE2b92@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! dE2cbd@dE2af7@find-dependencies dE2af7@find-dependencies) (set! dE2af9@find-library-by (lambda (dE2b94@pred) (let dE2b98@f ((dE2b96@ls ((dE2aaf@current-library-collection)))) (if (null? dE2b96@ls) '#f (if (dE2b94@pred (car dE2b96@ls)) (car dE2b96@ls) (dE2b98@f (cdr dE2b96@ls))))))) (set! dE2cbe@dE2af9@find-library-by dE2af9@find-library-by) (set! dE2afb@library-path (dE2a05@dE28e3@make-parameter '(".") (lambda (dE2b9a@x) (if (and (list? dE2b9a@x) (for-all string? dE2b9a@x)) (map (lambda (dE2b9c@x) dE2b9c@x) dE2b9a@x) (assertion-violation 'library-path '"not a list of strings" dE2b9a@x))))) (set! dE2cbf@dE2afb@library-path dE2afb@library-path) (set! dE2afd@library-extensions (dE2a05@dE28e3@make-parameter '(".sls" ".ss" ".scm") (lambda (dE2b9e@x) (if (and (list? dE2b9e@x) (for-all string? dE2b9e@x)) (map (lambda (dE2ba0@x) dE2ba0@x) dE2b9e@x) (assertion-violation 'library-extensions '"not a list of strings" dE2b9e@x))))) (set! dE2cc0@dE2afd@library-extensions dE2afd@library-extensions) (set! dE2aff@library-name->file-name (lambda (dE2ba2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (dE2ba8@dE2ba5 dE2ba9@dE2ba7) (let ((dE2bac@extract dE2ba9@dE2ba7) (dE2bad@p dE2ba8@dE2ba5)) (letrec* ((dE2bb1@display-hex (lambda (dE2bba@n) (if (<= '0 dE2bba@n '9) (display dE2bba@n dE2bad@p) (display (integer->char (+ (char->integer '#\a) (- dE2bba@n '10))) dE2bad@p))))) (begin (let dE2bb4@f ((dE2bb2@ls dE2ba2@x)) (if (not (null? dE2bb2@ls)) (begin (display '"/" dE2bad@p) (for-each (lambda (dE2bb6@c) (if (or (char<=? '#\a dE2bb6@c '#\z) (char<=? '#\A dE2bb6@c '#\Z) (char<=? '#\0 dE2bb6@c '#\9) (memv dE2bb6@c '(#\- #\. #\_ #\~))) (display dE2bb6@c dE2bad@p) (begin (display '"%" dE2bad@p) (let ((dE2bb8@n (char->integer dE2bb6@c))) (begin (dE2bb1@display-hex (quotient dE2bb8@n '16)) (dE2bb1@display-hex (remainder dE2bb8@n '16))))))) (string->list (symbol->string (car dE2bb2@ls)))) (dE2bb4@f (cdr dE2bb2@ls))) (void))) (dE2bac@extract)))))))) (set! dE2cc1@dE2aff@library-name->file-name dE2aff@library-name->file-name) (set! dE2b01@file-locator (dE2a05@dE28e3@make-parameter (lambda (dE2bbc@x) (let ((dE2bbe@str (dE2aff@library-name->file-name dE2bbc@x))) (let dE2bc6@f ((dE2bc0@ls (dE2afb@library-path)) (dE2bc1@exts (dE2afd@library-extensions)) (dE2bc2@failed-list '())) (if (null? dE2bc0@ls) (letrec* ((dE2bd0@dE2bcb (make-record-type-descriptor '&library-resolution &condition-rtd 'dE2bce '#f '#f '#((immutable library) (immutable files)))) (dE2bd2@dE2bcd '#f) (dE2bd4@dE2bcc (make-record-constructor-descriptor dE2bd0@dE2bcb &condition-rcd dE2bd2@dE2bcd)) (dE2bd7@dE2bca (record-predicate dE2bd0@dE2bcb)) (dE2bd9@make-library-resolution-condition (record-constructor dE2bd4@dE2bcc)) (dE2bdb@dE2bc8 (record-accessor dE2bd0@dE2bcb '0)) (dE2bdd@dE2bc9 (record-accessor dE2bd0@dE2bcb '1)) (dE2bdf@library-resolution-condition? (condition-predicate dE2bd0@dE2bcb)) (dE2be1@condition-library (condition-accessor dE2bd0@dE2bcb dE2bdb@dE2bc8)) (dE2be3@condition-files (condition-accessor dE2bd0@dE2bcb dE2bdd@dE2bc9))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (dE2bd9@make-library-resolution-condition dE2bbc@x (reverse dE2bc2@failed-list))))) (if (null? dE2bc1@exts) (dE2bc6@f (cdr dE2bc0@ls) (dE2afd@library-extensions) dE2bc2@failed-list) (let ((dE2be4@name (string-append (car dE2bc0@ls) dE2bbe@str (car dE2bc1@exts)))) (if (file-exists? dE2be4@name) dE2be4@name (dE2bc6@f dE2bc0@ls (cdr dE2bc1@exts) (cons dE2be4@name dE2bc2@failed-list))))))))) (lambda (dE2be6@f) (if (procedure? dE2be6@f) dE2be6@f (assertion-violation 'file-locator '"not a procedure" dE2be6@f))))) (set! dE2cc2@dE2b01@file-locator dE2b01@file-locator) (set! dE2b03@serialize-all (lambda (dE2be8@serialize dE2be9@compile) (letrec* ((dE2bed@library-desc (lambda (dE2bf0@x) (list (dE2abd@library-id dE2bf0@x) (dE2ac1@library-name dE2bf0@x))))) (for-each (lambda (dE2bee@x) (if (dE2af1@library-source-file-name dE2bee@x) (dE2be8@serialize (dE2af1@library-source-file-name dE2bee@x) (list (dE2abd@library-id dE2bee@x) (dE2ac1@library-name dE2bee@x) (dE2ac5@library-version dE2bee@x) (map dE2bed@library-desc (dE2ac9@library-imp* dE2bee@x)) (map dE2bed@library-desc (dE2acd@library-vis* dE2bee@x)) (map dE2bed@library-desc (dE2ad1@library-inv* dE2bee@x)) (dE2ad5@library-subst dE2bee@x) (dE2ad9@library-env dE2bee@x) (dE2be9@compile (dE2ae5@library-visit-code dE2bee@x)) (dE2be9@compile (dE2ae9@library-invoke-code dE2bee@x)) (dE2aed@library-visible? dE2bee@x))) (void))) ((dE2aaf@current-library-collection)))))) (set! dE2cc3@dE2b03@serialize-all dE2b03@serialize-all) (set! dE2b05@current-precompiled-library-loader (dE2a05@dE28e3@make-parameter (lambda (dE2bf2@filename dE2bf3@sk) '#f))) (set! dE2cc4@dE2b05@current-precompiled-library-loader dE2b05@current-precompiled-library-loader) (set! dE2b07@try-load-from-file (lambda (dE2bf6@filename) ((dE2b05@current-precompiled-library-loader) dE2bf6@filename (lambda dE2c1c (let ((dE2c1d (length dE2c1c))) (if (= dE2c1d '11) (apply (lambda (dE2bf8@id dE2bf9@name dE2bfa@ver dE2bfb@imp* dE2bfc@vis* dE2bfd@inv* dE2bfe@exp-subst dE2bff@exp-env dE2c00@visit-proc dE2c01@invoke-proc dE2c02@visible?) (let dE2c10@f ((dE2c0e@deps (append dE2bfb@imp* dE2bfc@vis* dE2bfd@inv*))) (if (null? dE2c0e@deps) (begin (dE2b1b@install-library dE2bf8@id dE2bf9@name dE2bfa@ver dE2bfb@imp* dE2bfc@vis* dE2bfd@inv* dE2bfe@exp-subst dE2bff@exp-env dE2c00@visit-proc dE2c01@invoke-proc '#f '#f dE2c02@visible? '#f) '#t) (let ((dE2c12@d (car dE2c0e@deps))) (let ((dE2c14@label (car dE2c12@d)) (dE2c15@dname (cadr dE2c12@d))) (let ((dE2c18@l (dE2b11@find-library-by-name dE2c15@dname))) (if (and (dE2abb@library? dE2c18@l) (eq? dE2c14@label (dE2abd@library-id dE2c18@l))) (dE2c10@f (cdr dE2c0e@deps)) (begin (if dE29ff@dE28d7@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" dE2bf9@name dE2c15@dname dE2bf6@filename dE2c18@l dE2c14@label (dE2abd@library-id dE2c18@l)) (void)) '#f)))))))) dE2c1c) (if (>= dE2c1d '0) (apply (lambda dE2c1a@others '#f) dE2c1c) (error 'apply '"invalid arg count")))))))) (set! dE2cc5@dE2b07@try-load-from-file dE2b07@try-load-from-file) (set! dE2b09@library-loader (dE2a05@dE28e3@make-parameter (lambda (dE2c1e@x) (let ((dE2c20@file-name ((dE2b01@file-locator) dE2c1e@x))) (if (not dE2c20@file-name) (assertion-violation '#f '"cannot file library" dE2c1e@x) (or (dE2b07@try-load-from-file dE2c20@file-name) ((dE2b0b@current-library-expander) (dE2a04@dE28e1@read-library-source-file dE2c20@file-name) dE2c20@file-name (lambda (dE2c22@name) (if (not (fast-equal? dE2c22@name dE2c1e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (dE2c28@dE2c25 dE2c29@dE2c27) (let ((dE2c2c@e dE2c29@dE2c27) (dE2c2d@p dE2c28@dE2c25)) (begin (display '"expected to find library " dE2c2d@p) (write dE2c1e@x dE2c2d@p) (display '" in file " dE2c2d@p) (display dE2c20@file-name dE2c2d@p) (display '", found " dE2c2d@p) (write dE2c22@name dE2c2d@p) (display '" instead" dE2c2d@p) (dE2c2c@e)))))) (void)))))))) (lambda (dE2c30@f) (if (procedure? dE2c30@f) dE2c30@f (assertion-violation 'library-locator '"not a procedure" dE2c30@f))))) (set! dE2cc6@dE2b09@library-loader dE2b09@library-loader) (set! dE2b0b@current-library-expander (dE2a05@dE28e3@make-parameter (lambda (dE2c32@x) (assertion-violation 'library-expander '"not initialized")) (lambda (dE2c34@f) (if (procedure? dE2c34@f) dE2c34@f (assertion-violation 'library-expander '"not a procedure" dE2c34@f))))) (set! dE2cc7@dE2b0b@current-library-expander dE2b0b@current-library-expander) (set! dE2b0d@external-pending-libraries (dE2a05@dE28e3@make-parameter '())) (set! dE2cc8@dE2b0d@external-pending-libraries dE2b0d@external-pending-libraries) (set! dE2b0f@find-external-library (lambda (dE2c36@name) (begin (if (member dE2c36@name (dE2b0d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" dE2c36@name) (void)) (let ((dE2c3c@dE2c39 dE2b0d@external-pending-libraries) (dE2c3d@dE2c3b (cons dE2c36@name (dE2b0d@external-pending-libraries)))) (let ((dE2c40@swap (lambda () (let ((dE2c42@t (dE2c3c@dE2c39))) (begin (dE2c3c@dE2c39 dE2c3d@dE2c3b) (set! dE2c3d@dE2c3b dE2c42@t)))))) (dynamic-wind dE2c40@swap (lambda () (begin ((dE2b09@library-loader) dE2c36@name) (or (dE2af9@find-library-by (lambda (dE2c44@x) (fast-equal? (dE2ac1@library-name dE2c44@x) dE2c36@name))) (assertion-violation '#f '"handling external library did not yield the correct library" dE2c36@name)))) dE2c40@swap)))))) (set! dE2cc9@dE2b0f@find-external-library dE2b0f@find-external-library) (set! dE2b11@find-library-by-name (lambda (dE2c46@name) (or (dE2af9@find-library-by (lambda (dE2c48@x) (fast-equal? (dE2ac1@library-name dE2c48@x) dE2c46@name))) (dE2b0f@find-external-library dE2c46@name)))) (set! dE2cca@dE2b11@find-library-by-name dE2b11@find-library-by-name) (set! dE2b13@library-exists? (lambda (dE2c4a@name) (and (dE2af9@find-library-by (lambda (dE2c4c@x) (fast-equal? (dE2ac1@library-name dE2c4c@x) dE2c4a@name))) '#t))) (set! dE2ccb@dE2b13@library-exists? dE2b13@library-exists?) (set! dE2b15@find-library-by-spec/die (lambda (dE2c4e@spec) (let ((dE2c50@id (car dE2c4e@spec))) (or (dE2af9@find-library-by (lambda (dE2c52@x) (eq? dE2c50@id (dE2abd@library-id dE2c52@x)))) (assertion-violation '#f '"cannot find library with required spec" dE2c4e@spec))))) (set! dE2ccc@dE2b15@find-library-by-spec/die dE2b15@find-library-by-spec/die) (set! dE2b17@label->binding-table (make-eq-hashtable)) (set! dE2ccd@dE2b17@label->binding-table dE2b17@label->binding-table) (set! dE2b19@install-library-record (lambda (dE2c54@lib) (begin (let ((dE2c56@exp-env (dE2ad9@library-env dE2c54@lib))) (for-each (lambda (dE2c58@x) (let ((dE2c5a@label (car dE2c58@x)) (dE2c5b@binding (cdr dE2c58@x))) (let ((dE2c5e@binding (let ((dE2c60@t (car dE2c5b@binding))) (if (memv dE2c60@t '(global)) (cons 'global (cons dE2c54@lib (cdr dE2c5b@binding))) (if (memv dE2c60@t '(global-macro)) (cons 'global-macro (cons dE2c54@lib (cdr dE2c5b@binding))) (if (memv dE2c60@t '(global-macro!)) (cons 'global-macro! (cons dE2c54@lib (cdr dE2c5b@binding))) dE2c5b@binding)))))) (begin (if (hashtable-ref dE2b17@label->binding-table dE2c5a@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" dE2c5a@label (hashtable-ref dE2b17@label->binding-table dE2c5a@label '#f) dE2c5e@binding) (exit)) (void)) (hashtable-set! dE2b17@label->binding-table dE2c5a@label dE2c5e@binding))))) dE2c56@exp-env)) ((dE2aaf@current-library-collection) dE2c54@lib)))) (set! dE2cce@dE2b19@install-library-record dE2b19@install-library-record) (set! dE2b1b@install-library (lambda (dE2c62@id dE2c63@name dE2c64@ver dE2c65@imp* dE2c66@vis* dE2c67@inv* dE2c68@exp-subst dE2c69@exp-env dE2c6a@visit-proc dE2c6b@invoke-proc dE2c6c@visit-code dE2c6d@invoke-code dE2c6e@visible? dE2c6f@source-file-name) (let ((dE2c7e@imp-lib* (map dE2b15@find-library-by-spec/die dE2c65@imp*)) (dE2c7f@vis-lib* (map dE2b15@find-library-by-spec/die dE2c66@vis*)) (dE2c80@inv-lib* (map dE2b15@find-library-by-spec/die dE2c67@inv*))) (begin (if (not (and (symbol? dE2c62@id) (list? dE2c63@name) (list? dE2c64@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" dE2c62@id dE2c63@name dE2c64@ver) (void)) (if (dE2b13@library-exists? dE2c63@name) (assertion-violation 'install-library '"library is already installed" dE2c63@name) (void)) (let ((dE2c84@lib (make-simple-struct 'library '15 (list dE2c62@id dE2c63@name dE2c64@ver dE2c7e@imp-lib* dE2c7f@vis-lib* dE2c80@inv-lib* dE2c68@exp-subst dE2c69@exp-env dE2c6a@visit-proc dE2c6b@invoke-proc dE2c6c@visit-code dE2c6d@invoke-code dE2c6e@visible? dE2c6f@source-file-name)))) (dE2b19@install-library-record dE2c84@lib)))))) (set! dE2ccf@dE2b1b@install-library dE2b1b@install-library) (set! dE2b1d@imported-label->binding (lambda (dE2c86@lab) (hashtable-ref dE2b17@label->binding-table dE2c86@lab '#f))) (set! dE2cd0@dE2b1d@imported-label->binding dE2b1d@imported-label->binding) (set! dE2b1f@invoke-library (lambda (dE2c88@lib) (let ((dE2c8a@invoke (dE2ae1@library-invoke-state dE2c88@lib))) (if (procedure? dE2c8a@invoke) (begin (dE2ae3@set-library-invoke-state! dE2c88@lib (lambda () (assertion-violation 'invoke '"circularity detected" dE2c88@lib))) (for-each dE2b1f@invoke-library (dE2ad1@library-inv* dE2c88@lib)) (dE2ae3@set-library-invoke-state! dE2c88@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" dE2c88@lib))) (dE2c8a@invoke) (dE2ae3@set-library-invoke-state! dE2c88@lib '#t)) (void))))) (set! dE2cd1@dE2b1f@invoke-library dE2b1f@invoke-library) (set! dE2b21@visit-library (lambda (dE2c8c@lib) (let ((dE2c8e@visit (dE2add@library-visit-state dE2c8c@lib))) (if (procedure? dE2c8e@visit) (begin (dE2adf@set-library-visit-state! dE2c8c@lib (lambda () (assertion-violation 'visit '"circularity detected" dE2c8c@lib))) (for-each dE2b1f@invoke-library (dE2acd@library-vis* dE2c8c@lib)) (dE2adf@set-library-visit-state! dE2c8c@lib (lambda () (assertion-violation 'invoke '"first visit did not return" dE2c8c@lib))) (dE2c8e@visit) (dE2adf@set-library-visit-state! dE2c8c@lib '#t)) (void))))) (set! dE2cd2@dE2b21@visit-library dE2b21@visit-library) (set! dE2b23@invoke-library-by-spec (lambda (dE2c90@spec) (dE2b1f@invoke-library (dE2b15@find-library-by-spec/die dE2c90@spec)))) (set! dE2cd3@dE2b23@invoke-library-by-spec dE2b23@invoke-library-by-spec) (set! dE2b25@installed-libraries (lambda dE2c98 (let ((dE2c99 (length dE2c98))) (if (= dE2c99 '1) (apply (lambda (dE2c92@all?) (let dE2c96@f ((dE2c94@ls ((dE2aaf@current-library-collection)))) (if (null? dE2c94@ls) '() (if (or dE2c92@all? (dE2aed@library-visible? (car dE2c94@ls))) (cons (car dE2c94@ls) (dE2c96@f (cdr dE2c94@ls))) (dE2c96@f (cdr dE2c94@ls)))))) dE2c98) (if (= dE2c99 '0) (apply (lambda () (dE2b25@installed-libraries '#f)) dE2c98) (error 'apply '"invalid arg count")))))) (set! dE2cd4@dE2b25@installed-libraries dE2b25@installed-libraries) (set! dE2b27@library-spec (lambda (dE2c9a@x) (begin (if (not (dE2abb@library? dE2c9a@x)) (assertion-violation 'library-spec '"not a library" dE2c9a@x) (void)) (list (dE2abd@library-id dE2c9a@x) (dE2ac1@library-name dE2c9a@x) (dE2ac5@library-version dE2c9a@x))))) (set! dE2cd5@dE2b27@library-spec dE2b27@library-spec) (void))
(begin (set! dE2cd9@build-global-define (unspecified)) (set! dE2d4a@build-lambda (unspecified)) (set! dE2d4c@build-case-lambda (unspecified)) (set! dE2d7a@build-sequence (unspecified)) (set! dE2d7c@build-void (unspecified)) (set! dE2d7e@build-letrec (unspecified)) (set! dE2d80@build-let (unspecified)) (set! dE2d82@build-named-let (unspecified)) (set! dE2d84@build-letrec* (unspecified)) (set! dE2d86@build-library-letrec* (unspecified)) (set! dE2d88@build-receive (unspecified)) (set! dE2cd9@build-global-define (lambda (dE2d89@x) (dE2d7c@build-void))) (set! dE2e17@dE2cd9@build-global-define dE2cd9@build-global-define) (set! dE2d4a@build-lambda (lambda (dE2d8b@ae dE2d8c@vars dE2d8d@exp) (list 'lambda dE2d8c@vars dE2d8d@exp))) (set! dE2e18@dE2d4a@build-lambda dE2d4a@build-lambda) (set! dE2d4c@build-case-lambda (lambda (dE2d91@ae dE2d92@vars* dE2d93@exp*) (letrec* ((dE2d98@build-error (lambda (dE2dcf@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (dE2d9a@build-pred (lambda (dE2db7@ae dE2db8@n dE2db9@vars) (call-with-values (lambda () (let dE2dc5@f ((dE2dc1@vars dE2db9@vars) (dE2dc2@count '0)) (if (pair? dE2dc1@vars) (dE2dc5@f (cdr dE2dc1@vars) (+ dE2dc2@count '1)) (if (null? dE2dc1@vars) (values dE2dc2@count '=) (values dE2dc2@count '>=))))) (lambda (dE2dc7@dE2dbe dE2dc8@dE2dc0) (let ((dE2dcb@pred dE2dc8@dE2dc0) (dE2dcc@count dE2dc7@dE2dbe)) (list (list 'primitive dE2dcb@pred) dE2db8@n (list 'quote dE2dcc@count))))))) (dE2d9c@build-apply (lambda (dE2daf@ae dE2db0@g dE2db1@vars dE2db2@exp) (list '(primitive apply) (dE2d4a@build-lambda dE2daf@ae dE2db1@vars dE2db2@exp) dE2db0@g))) (dE2d9e@expand-case-lambda (lambda (dE2d9f@ae dE2da0@vars dE2da1@exp*) (let ((dE2da5@g (gensym)) (dE2da6@n (gensym))) (list 'lambda dE2da5@g (dE2d80@build-let dE2d9f@ae (list dE2da6@n) (list (list '(primitive length) dE2da5@g)) (let dE2dad@f ((dE2da9@vars* dE2d92@vars*) (dE2daa@exp* dE2da1@exp*)) (if (null? dE2da9@vars*) (dE2d98@build-error dE2d9f@ae) (list 'if (dE2d9a@build-pred dE2d9f@ae dE2da6@n (car dE2da9@vars*)) (dE2d9c@build-apply dE2d9f@ae dE2da5@g (car dE2da9@vars*) (car dE2daa@exp*)) (dE2dad@f (cdr dE2da9@vars*) (cdr dE2daa@exp*))))))))))) (if (= (length dE2d93@exp*) '1) (dE2d4a@build-lambda dE2d91@ae (car dE2d92@vars*) (car dE2d93@exp*)) (dE2d9e@expand-case-lambda dE2d91@ae dE2d92@vars* dE2d93@exp*))))) (set! dE2e19@dE2d4c@build-case-lambda dE2d4c@build-case-lambda) (set! dE2d7a@build-sequence (lambda (dE2dd1@ae dE2dd2@exps) (let dE2dd7@loop ((dE2dd5@exps dE2dd2@exps)) (if (null? (cdr dE2dd5@exps)) (car dE2dd5@exps) (if (equal? (car dE2dd5@exps) (dE2d7c@build-void)) (dE2dd7@loop (cdr dE2dd5@exps)) (cons 'begin dE2dd5@exps)))))) (set! dE2e1a@dE2d7a@build-sequence dE2d7a@build-sequence) (set! dE2d7c@build-void (lambda () '((primitive void)))) (set! dE2e1b@dE2d7c@build-void dE2d7c@build-void) (set! dE2d7e@build-letrec (lambda (dE2dd9@ae dE2dda@vars dE2ddb@val-exps dE2ddc@body-exp) (if (null? dE2dda@vars) dE2ddc@body-exp (list 'letrec (map list dE2dda@vars dE2ddb@val-exps) dE2ddc@body-exp)))) (set! dE2e1c@dE2d7e@build-letrec dE2d7e@build-letrec) (set! dE2d80@build-let (lambda (dE2de1@ae dE2de2@vars dE2de3@val-exps dE2de4@body-exp) (if (null? dE2de2@vars) dE2de4@body-exp (list 'let (map list dE2de2@vars dE2de3@val-exps) dE2de4@body-exp)))) (set! dE2e1d@dE2d80@build-let dE2d80@build-let) (set! dE2d82@build-named-let (lambda (dE2de9@ae dE2dea@name dE2deb@vars dE2dec@val-exps dE2ded@body-exp) (list 'let dE2dea@name (map list dE2deb@vars dE2dec@val-exps) dE2ded@body-exp))) (set! dE2e1e@dE2d82@build-named-let dE2d82@build-named-let) (set! dE2d84@build-letrec* (lambda (dE2df3@ae dE2df4@vars dE2df5@val-exps dE2df6@body-exp) (if (null? dE2df4@vars) dE2df6@body-exp (list 'letrec* (map list dE2df4@vars dE2df5@val-exps) dE2df6@body-exp)))) (set! dE2e1f@dE2d84@build-letrec* dE2d84@build-letrec*) (set! dE2d86@build-library-letrec* (lambda (dE2dfb@ae dE2dfc@name dE2dfd@vars dE2dfe@locs dE2dff@val-exps dE2e00@body-exp) (cons 'begin (append (map (lambda (dE2e07@var) (cons 'set! (cons dE2e07@var '((unspecified))))) dE2dfd@vars) (append (apply append (map (lambda (dE2e09@var dE2e0a@loc dE2e0b@val-exp) (list (list 'set! dE2e09@var dE2e0b@val-exp) (list 'set! dE2e0a@loc dE2e09@var))) dE2dfd@vars dE2dfe@locs dE2dff@val-exps)) (list dE2e00@body-exp)))))) (set! dE2e20@dE2d86@build-library-letrec* dE2d86@build-library-letrec*) (set! dE2d88@build-receive (lambda (dE2e0f@ae dE2e10@vars dE2e11@producer dE2e12@body*) (begin (display '"************** in ") (cons 'receive (cons dE2e10@vars (cons dE2e11@producer dE2e12@body*)))))) (set! dE2e21@dE2d88@build-receive dE2d88@build-receive) (void))
(begin (set! dE2e30@file-options-macro (unspecified)) (set! dE2e32@set-cons (unspecified)) (set! dE2e34@set-union (unspecified)) (set! dE2e39@top-mark* (unspecified)) (set! dE2e3b@top-marked? (unspecified)) (set! dE2e3d@gen-lexical (unspecified)) (set! dE2e3f@gen-global (unspecified)) (set! dE2e41@gen-label (unspecified)) (set! dE2e43@gen-top-level-label (unspecified)) (set! dE2e45@gen-define-label+loc (unspecified)) (set! dE2e47@gen-define-label (unspecified)) (set! dE2e51@rib? (unspecified)) (set! dE2e53@rib-sym* (unspecified)) (set! dE2e55@set-rib-sym*! (unspecified)) (set! dE2e57@rib-mark** (unspecified)) (set! dE2e59@set-rib-mark**! (unspecified)) (set! dE2e5b@rib-label* (unspecified)) (set! dE2e5d@set-rib-label*! (unspecified)) (set! dE2e5f@rib-sealed/freq (unspecified)) (set! dE2e61@set-rib-sealed/freq! (unspecified)) (set! dE2e63@rib-cache (unspecified)) (set! dE2e65@set-rib-cache! (unspecified)) (set! dE2e67@dummy (unspecified)) (set! dE2e69@make-empty-rib (unspecified)) (set! dE2e6b@extend-rib! (unspecified)) (set! dE2e6d@extend-rib/nc! (unspecified)) (set! dE2e6f@make-rib-map (unspecified)) (set! dE2e71@seal-rib! (unspecified)) (set! dE2e73@unseal-rib! (unspecified)) (set! dE2e75@make-full-rib (unspecified)) (set! dE2e77@rp (unspecified)) (set! dE2e81@stx? (unspecified)) (set! dE2e83@stx-expr (unspecified)) (set! dE2e85@set-stx-expr! (unspecified)) (set! dE2e87@stx-mark* (unspecified)) (set! dE2e89@set-stx-mark*! (unspecified)) (set! dE2e8b@stx-subst* (unspecified)) (set! dE2e8d@set-stx-subst*! (unspecified)) (set! dE2e8f@stx-ae* (unspecified)) (set! dE2e91@set-stx-ae*! (unspecified)) (set! dE2e93@dummy (unspecified)) (set! dE2e95@datum->stx (unspecified)) (set! dE2e97@gen-mark (unspecified)) (set! dE2e99@anti-mark (unspecified)) (set! dE2e9b@anti-mark? (unspecified)) (set! dE2e9d@mkstx (unspecified)) (set! dE2e9f@add-mark (unspecified)) (set! dE2ea1@add-subst (unspecified)) (set! dE2ea3@syntax-kind? (unspecified)) (set! dE2ea5@syntax-vector->list (unspecified)) (set! dE2ea7@syntax-pair? (unspecified)) (set! dE2ea9@syntax-vector? (unspecified)) (set! dE2eab@syntax-null? (unspecified)) (set! dE2ead@syntax-list? (unspecified)) (set! dE2eaf@syntax-car (unspecified)) (set! dE2eb1@syntax-cdr (unspecified)) (set! dE2eb3@syntax->list (unspecified)) (set! dE2eb5@id? (unspecified)) (set! dE2eb7@id->sym (unspecified)) (set! dE2eb9@bound-id=? (unspecified)) (set! dE2ebb@free-id=? (unspecified)) (set! dE2ebd@valid-bound-ids? (unspecified)) (set! dE2ebf@distinct-bound-ids? (unspecified)) (set! dE2ec1@bound-id-member? (unspecified)) (set! dE2ec3@self-evaluating? (unspecified)) (set! dE2ec5@strip-annotations (unspecified)) (set! dE2ec7@strip (unspecified)) (set! dE2ec9@stx->datum (unspecified)) (set! dE2ecb@id->label (unspecified)) (set! dE2ecd@label->binding (unspecified)) (set! dE2ecf@make-binding (unspecified)) (set! dE2ed1@binding-type (unspecified)) (set! dE2ed3@binding-value (unspecified)) (set! dE2ed5@raise-unbound-error (unspecified)) (set! dE2ed7@syntax-type (unspecified)) (set! dE2ee5@sanitize-binding (unspecified)) (set! dE2ee7@make-variable-transformer (unspecified)) (set! dE2ee9@variable-transformer? (unspecified)) (set! dE2eeb@variable-transformer-procedure (unspecified)) (set! dE2eed@make-eval-transformer (unspecified)) (set! dE303e@parse-define (unspecified)) (set! dE3040@parse-define-syntax (unspecified)) (set! dE3042@scheme-stx-hashtable (unspecified)) (set! dE3044@scheme-stx (unspecified)) (set! dE3046@lexical-var (unspecified)) (set! dE3048@lexical-mutable? (unspecified)) (set! dE304a@set-lexical-mutable! (unspecified)) (set! dE304c@add-lexical (unspecified)) (set! dE304e@add-lexicals (unspecified)) (set! dE3050@letrec-helper (unspecified)) (set! dE3052@let-transformer (unspecified)) (set! dE3054@letrec-transformer (unspecified)) (set! dE3056@letrec*-transformer (unspecified)) (set! dE3058@fluid-let-syntax-transformer (unspecified)) (set! dE305a@type-descriptor-transformer (unspecified)) (set! dE305c@record-type-descriptor-transformer (unspecified)) (set! dE305e@record-constructor-descriptor-transformer (unspecified)) (set! dE3060@when-macro (unspecified)) (set! dE3062@unless-macro (unspecified)) (set! dE3064@if-transformer (unspecified)) (set! dE3066@and-transformer (unspecified)) (set! dE3068@or-transformer (unspecified)) (set! dE306a@case-macro (unspecified)) (set! dE306c@quote-transformer (unspecified)) (set! dE306e@case-lambda-transformer (unspecified)) (set! dE3070@lambda-transformer (unspecified)) (set! dE3072@bless (unspecified)) (set! dE3074@with-syntax-macro (unspecified)) (set! dE3076@invalid-fmls-error (unspecified)) (set! dE3078@let-macro (unspecified)) (set! dE307a@let-values-macro (unspecified)) (set! dE307c@let*-values-macro (unspecified)) (set! dE307e@trace-lambda-macro (unspecified)) (set! dE3080@trace-define-macro (unspecified)) (set! dE3082@trace-define-syntax-macro (unspecified)) (set! dE3084@trace-let/rec-syntax (unspecified)) (set! dE3086@trace-let-syntax-macro (unspecified)) (set! dE3088@trace-letrec-syntax-macro (unspecified)) (set! dE308a@guard-macro (unspecified)) (set! dE308c@define-enumeration-macro (unspecified)) (set! dE308e@time-macro (unspecified)) (set! dE3090@delay-macro (unspecified)) (set! dE3092@assert-macro (unspecified)) (set! dE3094@endianness-macro (unspecified)) (set! dE3096@identifier-syntax-macro (unspecified)) (set! dE3098@do-macro (unspecified)) (set! dE309a@let*-macro (unspecified)) (set! dE309c@or-macro (unspecified)) (set! dE309e@and-macro (unspecified)) (set! dE30a0@cond-macro (unspecified)) (set! dE30a2@do-include (unspecified)) (set! dE30a4@include-macro (unspecified)) (set! dE30a6@include-into-macro (unspecified)) (set! dE30a8@syntax-rules-macro (unspecified)) (set! dE30aa@quasiquote-macro (unspecified)) (set! dE30ac@quasisyntax-macro (unspecified)) (set! dE30ae@define-struct-macro (unspecified)) (set! dE30b0@define-record-type-macro (unspecified)) (set! dE30b2@define-condition-type-macro (unspecified)) (set! dE30b4@incorrect-usage-macro (unspecified)) (set! dE30b6@parameterize-macro (unspecified)) (set! dE30b8@foreign-call-transformer (unspecified)) (set! dE30ba@convert-pattern (unspecified)) (set! dE30bc@syntax-dispatch (unspecified)) (set! dE30be@ellipsis? (unspecified)) (set! dE30c0@underscore? (unspecified)) (set! dE30c2@verify-literals (unspecified)) (set! dE30c4@syntax-case-transformer (unspecified)) (set! dE30c6@ellipsis-map (unspecified)) (set! dE30c8@syntax-transformer (unspecified)) (set! dE30ca@core-macro-transformer (unspecified)) (set! dE30cc@symbol-macro (unspecified)) (set! dE30ce@macro-transformer (unspecified)) (set! dE30d0@local-macro-transformer (unspecified)) (set! dE30d2@do-macro-call (unspecified)) (set! dE30d4@chi-macro (unspecified)) (set! dE30d6@chi-local-macro (unspecified)) (set! dE30d8@chi-global-macro (unspecified)) (set! dE30da@chi-expr* (unspecified)) (set! dE30dc@chi-application (unspecified)) (set! dE30de@chi-expr (unspecified)) (set! dE30e0@chi-set! (unspecified)) (set! dE30e2@verify-formals (unspecified)) (set! dE30e4@chi-lambda-clause (unspecified)) (set! dE30e6@chi-lambda-clause* (unspecified)) (set! dE30e8@chi-defun (unspecified)) (set! dE30ea@chi-rhs (unspecified)) (set! dE30ec@expand-interaction-rhs*/init* (unspecified)) (set! dE30ee@chi-rhs* (unspecified)) (set! dE30f0@find-bound=? (unspecified)) (set! dE30f2@find-dups (unspecified)) (set! dE30f4@chi-internal (unspecified)) (set! dE30f6@parse-module (unspecified)) (set! dE3100@module-interface? (unspecified)) (set! dE3102@module-interface-first-mark (unspecified)) (set! dE3104@set-module-interface-first-mark! (unspecified)) (set! dE3106@module-interface-exp-id-vec (unspecified)) (set! dE3108@set-module-interface-exp-id-vec! (unspecified)) (set! dE310a@module-interface-exp-lab-vec (unspecified)) (set! dE310c@set-module-interface-exp-lab-vec! (unspecified)) (set! dE310e@dummy (unspecified)) (set! dE3110@module-interface-exp-id* (unspecified)) (set! dE3112@chi-internal-module (unspecified)) (set! dE3114@chi-body* (unspecified)) (set! dE3116@expand-transformer (unspecified)) (set! dE3118@parse-exports (unspecified)) (set! dE311a@parse-library-name (unspecified)) (set! dE311c@parse-library (unspecified)) (set! dE311e@parse-import-spec* (unspecified)) (set! dE3120@make-top-rib (unspecified)) (set! dE3122@make-collector (unspecified)) (set! dE3124@inv-collector (unspecified)) (set! dE3126@vis-collector (unspecified)) (set! dE3128@imp-collector (unspecified)) (set! dE312a@chi-library-internal (unspecified)) (set! dE312c@chi-interaction-expr (unspecified)) (set! dE312e@library-body-expander (unspecified)) (set! dE3130@core-library-expander (unspecified)) (set! dE3132@parse-top-level-program (unspecified)) (set! dE3134@top-level-expander (unspecified)) (set! dE3136@rp (unspecified)) (set! dE3140@env? (unspecified)) (set! dE3142@env-names (unspecified)) (set! dE3144@set-env-names! (unspecified)) (set! dE3146@env-labels (unspecified)) (set! dE3148@set-env-labels! (unspecified)) (set! dE314a@env-itc (unspecified)) (set! dE314c@set-env-itc! (unspecified)) (set! dE314e@dummy (unspecified)) (set! dE3150@rp (unspecified)) (set! dE315a@interaction-env? (unspecified)) (set! dE315c@interaction-env-rib (unspecified)) (set! dE315e@set-interaction-env-rib! (unspecified)) (set! dE3160@interaction-env-r (unspecified)) (set! dE3162@set-interaction-env-r! (unspecified)) (set! dE3164@interaction-env-locs (unspecified)) (set! dE3166@set-interaction-env-locs! (unspecified)) (set! dE3168@dummy (unspecified)) (set! dE316a@interaction-environment-symbols (unspecified)) (set! dE316c@environment-bindings (unspecified)) (set! dE316e@parse-binding (unspecified)) (set! dE3170@environment? (unspecified)) (set! dE3172@environment-symbols (unspecified)) (set! dE3174@environment (unspecified)) (set! dE3176@null-environment (unspecified)) (set! dE3178@scheme-report-environment (unspecified)) (set! dE317a@expand (unspecified)) (set! dE317c@eval (unspecified)) (set! dE317e@library-expander (unspecified)) (set! dE3180@boot-library-expand (unspecified)) (set! dE3182@rev-map-append (unspecified)) (set! dE3184@build-exports (unspecified)) (set! dE3186@make-export-subst (unspecified)) (set! dE3188@make-export-env/macros (unspecified)) (set! dE318a@generate-temporaries (unspecified)) (set! dE318c@free-identifier=? (unspecified)) (set! dE318e@bound-identifier=? (unspecified)) (set! dE3190@make-source-condition (unspecified)) (set! dE3192@extract-position-condition (unspecified)) (set! dE3194@expression-position (unspecified)) (set! dE3196@assertion-error (unspecified)) (set! dE3198@syntax-error (unspecified)) (set! dE319a@syntax-violation* (unspecified)) (set! dE319c@syntax-violation (unspecified)) (set! dE319e@identifier? (unspecified)) (set! dE31a0@datum->syntax (unspecified)) (set! dE31a2@syntax->datum (unspecified)) (set! dE31a4@ungensym-all (unspecified)) (set! dE31a6@compile-r6rs-top-level (unspecified)) (set! dE31a8@pre-compile-r6rs-top-level (unspecified)) (set! dE31aa@interaction-environment (unspecified)) (set! dE31ac@top-level-context (unspecified)) (set! dE2e30@file-options-macro (lambda (dE31ad@x) (letrec* ((dE31b0@valid-option? (lambda (dE31b9@x) (and (dE2eb5@id? dE31b9@x) (memq (dE2eb7@id->sym dE31b9@x) '(no-fail no-create no-truncate)))))) (let ((dE31b1@t dE31ad@x)) (let ((dE31b3@ls/false (dE30bc@syntax-dispatch dE31b1@t '(_ . each-any)))) (if (and dE31b3@ls/false (apply (lambda (dE31b5@opt*) (for-all dE31b0@valid-option? dE31b5@opt*)) dE31b3@ls/false)) (apply (lambda (dE31b7@opt*) (dE3072@bless (list 'make-file-options (list 'quote dE31b7@opt*)))) dE31b3@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE31b1@t))))))) (set! dE4b03@dE2e30@file-options-macro dE2e30@file-options-macro) (set! dE2e32@set-cons (lambda (dE31bb@x dE31bc@ls) (if (memq dE31bb@x dE31bc@ls) dE31bc@ls (cons dE31bb@x dE31bc@ls)))) (set! dE4b04@dE2e32@set-cons dE2e32@set-cons) (set! dE2e34@set-union (lambda (dE31bf@ls1 dE31c0@ls2) (if (null? dE31bf@ls1) dE31c0@ls2 (if (memq (car dE31bf@ls1) dE31c0@ls2) (dE2e34@set-union (cdr dE31bf@ls1) dE31c0@ls2) (cons (car dE31bf@ls1) (dE2e34@set-union (cdr dE31bf@ls1) dE31c0@ls2)))))) (set! dE4b05@dE2e34@set-union dE2e34@set-union) (set! dE2e39@top-mark* '(top)) (set! dE4b06@dE2e39@top-mark* dE2e39@top-mark*) (set! dE2e3b@top-marked? (lambda (dE31c3@m*) (memq 'top dE31c3@m*))) (set! dE4b07@dE2e3b@top-marked? dE2e3b@top-marked?) (set! dE2e3d@gen-lexical (lambda (dE31c5@sym) (if (symbol? dE31c5@sym) (gensym dE31c5@sym) (if (dE2e81@stx? dE31c5@sym) (dE2e3d@gen-lexical (dE2eb7@id->sym dE31c5@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" dE31c5@sym))))) (set! dE4b08@dE2e3d@gen-lexical dE2e3d@gen-lexical) (set! dE2e3f@gen-global (lambda (dE31c7@x) (dE2e3d@gen-lexical dE31c7@x))) (set! dE4b09@dE2e3f@gen-global dE2e3f@gen-global) (set! dE2e41@gen-label (lambda (dE31c9@_) (gensym))) (set! dE4b0a@dE2e41@gen-label dE2e41@gen-label) (set! dE2e43@gen-top-level-label (lambda (dE31cb@id dE31cc@rib) (letrec* ((dE31d0@find (lambda (dE31db@sym dE31dc@mark* dE31dd@sym* dE31de@mark** dE31df@label*) (and (pair? dE31dd@sym*) (if (and (eq? dE31db@sym (car dE31dd@sym*)) (same-marks? dE31dc@mark* (car dE31de@mark**))) (car dE31df@label*) (dE31d0@find dE31db@sym dE31dc@mark* (cdr dE31dd@sym*) (cdr dE31de@mark**) (cdr dE31df@label*))))))) (let ((dE31d1@sym (dE2eb7@id->sym dE31cb@id)) (dE31d2@mark* (dE2e87@stx-mark* dE31cb@id))) (let ((dE31d5@sym* (dE2e53@rib-sym* dE31cc@rib))) (let ((dE31d7@t (and (memq dE31d1@sym (dE2e53@rib-sym* dE31cc@rib)) (dE31d0@find dE31d1@sym dE31d2@mark* dE31d5@sym* (dE2e57@rib-mark** dE31cc@rib) (dE2e5b@rib-label* dE31cc@rib))))) (if dE31d7@t ((lambda (dE31d9@label) (if (dE2cd0@dE2b1d@imported-label->binding dE31d9@label) (gensym) dE31d9@label)) dE31d7@t) (gensym)))))))) (set! dE4b0b@dE2e43@gen-top-level-label dE2e43@gen-top-level-label) (set! dE2e45@gen-define-label+loc (lambda (dE31e5@id dE31e6@rib) (let ((dE31e9@t (dE31ac@top-level-context))) (if dE31e9@t ((lambda (dE31eb@env) (let ((dE31ed@label (dE2e43@gen-top-level-label dE31e5@id dE31e6@rib)) (dE31ee@locs (dE3164@interaction-env-locs dE31eb@env))) (values dE31ed@label (let ((dE31f1@t (assq dE31ed@label dE31ee@locs))) (if dE31f1@t (cdr dE31f1@t) (let ((dE31f3@loc (dE2e3d@gen-lexical dE31e5@id))) (begin (dE3166@set-interaction-env-locs! dE31eb@env (cons (cons dE31ed@label dE31f3@loc) dE31ee@locs)) dE31f3@loc))))))) dE31e9@t) (values (gensym) (dE2e3d@gen-lexical dE31e5@id)))))) (set! dE4b0c@dE2e45@gen-define-label+loc dE2e45@gen-define-label+loc) (set! dE2e47@gen-define-label (lambda (dE31f5@id dE31f6@rib) (if (dE31ac@top-level-context) (dE2e43@gen-top-level-label dE31f5@id dE31f6@rib) (gensym)))) (set! dE4b0d@dE2e47@gen-define-label dE2e47@gen-define-label) (set! dE2e51@rib? (lambda (dE31f9@x) (and (simple-struct? dE31f9@x) (eq? (simple-struct-name dE31f9@x) 'rib)))) (set! dE4b0e@dE2e51@rib? dE2e51@rib?) (set! dE2e53@rib-sym* (lambda (dE31fb@x) (simple-struct-ref dE31fb@x '0))) (set! dE4b0f@dE2e53@rib-sym* dE2e53@rib-sym*) (set! dE2e55@set-rib-sym*! (lambda (dE31fd@x dE31fe@val) (simple-struct-set! dE31fd@x '0 dE31fe@val))) (set! dE4b10@dE2e55@set-rib-sym*! dE2e55@set-rib-sym*!) (set! dE2e57@rib-mark** (lambda (dE3201@x) (simple-struct-ref dE3201@x '1))) (set! dE4b11@dE2e57@rib-mark** dE2e57@rib-mark**) (set! dE2e59@set-rib-mark**! (lambda (dE3203@x dE3204@val) (simple-struct-set! dE3203@x '1 dE3204@val))) (set! dE4b12@dE2e59@set-rib-mark**! dE2e59@set-rib-mark**!) (set! dE2e5b@rib-label* (lambda (dE3207@x) (simple-struct-ref dE3207@x '2))) (set! dE4b13@dE2e5b@rib-label* dE2e5b@rib-label*) (set! dE2e5d@set-rib-label*! (lambda (dE3209@x dE320a@val) (simple-struct-set! dE3209@x '2 dE320a@val))) (set! dE4b14@dE2e5d@set-rib-label*! dE2e5d@set-rib-label*!) (set! dE2e5f@rib-sealed/freq (lambda (dE320d@x) (simple-struct-ref dE320d@x '3))) (set! dE4b15@dE2e5f@rib-sealed/freq dE2e5f@rib-sealed/freq) (set! dE2e61@set-rib-sealed/freq! (lambda (dE320f@x dE3210@val) (simple-struct-set! dE320f@x '3 dE3210@val))) (set! dE4b16@dE2e61@set-rib-sealed/freq! dE2e61@set-rib-sealed/freq!) (set! dE2e63@rib-cache (lambda (dE3213@x) (simple-struct-ref dE3213@x '4))) (set! dE4b17@dE2e63@rib-cache dE2e63@rib-cache) (set! dE2e65@set-rib-cache! (lambda (dE3215@x dE3216@val) (simple-struct-set! dE3215@x '4 dE3216@val))) (set! dE4b18@dE2e65@set-rib-cache! dE2e65@set-rib-cache!) (set! dE2e67@dummy '3) (set! dE4b19@dE2e67@dummy dE2e67@dummy) (set! dE2e69@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! dE4b1a@dE2e69@make-empty-rib dE2e69@make-empty-rib) (set! dE2e6b@extend-rib! (lambda (dE3219@rib dE321a@id dE321b@label) (letrec* ((dE3220@find (lambda (dE322d@sym dE322e@mark* dE322f@sym* dE3230@mark** dE3231@label*) (and (pair? dE322f@sym*) (if (and (eq? dE322d@sym (car dE322f@sym*)) (same-marks? dE322e@mark* (car dE3230@mark**))) dE3231@label* (dE3220@find dE322d@sym dE322e@mark* (cdr dE322f@sym*) (cdr dE3230@mark**) (cdr dE3231@label*))))))) (begin (if (dE2e5f@rib-sealed/freq dE3219@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" dE3219@rib) (void)) (let ((dE3221@sym (dE2eb7@id->sym dE321a@id)) (dE3222@mark* (dE2e87@stx-mark* dE321a@id))) (let ((dE3225@sym* (dE2e53@rib-sym* dE3219@rib))) (let ((dE3227@t (and (memq dE3221@sym (dE2e53@rib-sym* dE3219@rib)) (dE3220@find dE3221@sym dE3222@mark* dE3225@sym* (dE2e57@rib-mark** dE3219@rib) (dE2e5b@rib-label* dE3219@rib))))) (if dE3227@t ((lambda (dE3229@p) (if (not (eq? dE321b@label (car dE3229@p))) (if (dE31ac@top-level-context) (set-car! dE3229@p dE321b@label) (dE319c@syntax-violation '#f '"multiple definitions of identifier" dE321a@id)) (void))) dE3227@t) (begin (if (dE2e63@rib-cache dE3219@rib) (hashtable-update! (dE2e63@rib-cache dE3219@rib) dE3221@sym (lambda (dE322b@e) (cons (cons dE3222@mark* dE321b@label) dE322b@e)) '()) (void)) (dE2e55@set-rib-sym*! dE3219@rib (cons dE3221@sym dE3225@sym*)) (dE2e59@set-rib-mark**! dE3219@rib (cons dE3222@mark* (dE2e57@rib-mark** dE3219@rib))) (dE2e5d@set-rib-label*! dE3219@rib (cons dE321b@label (dE2e5b@rib-label* dE3219@rib)))))))))))) (set! dE4b1b@dE2e6b@extend-rib! dE2e6b@extend-rib!) (set! dE2e6d@extend-rib/nc! (lambda (dE3237@rib dE3238@id dE3239@label) (let ((dE323d@sym (dE2eb7@id->sym dE3238@id)) (dE323e@mark* (dE2e87@stx-mark* dE3238@id))) (let ((dE3241@sym* (dE2e53@rib-sym* dE3237@rib))) (begin (if (dE2e63@rib-cache dE3237@rib) (hashtable-update! (dE2e63@rib-cache dE3237@rib) dE323d@sym (lambda (dE3243@e) (cons (cons dE323e@mark* dE3239@label) dE3243@e)) '()) (void)) (dE2e55@set-rib-sym*! dE3237@rib (cons dE323d@sym dE3241@sym*)) (dE2e59@set-rib-mark**! dE3237@rib (cons dE323e@mark* (dE2e57@rib-mark** dE3237@rib))) (dE2e5d@set-rib-label*! dE3237@rib (cons dE3239@label (dE2e5b@rib-label* dE3237@rib)))))))) (set! dE4b1c@dE2e6d@extend-rib/nc! dE2e6d@extend-rib/nc!) (set! dE2e6f@make-rib-map (lambda (dE3245@sym*) (let ((dE3247@ht (make-eq-hashtable))) (let dE324d@f ((dE3249@i '0) (dE324a@sym* dE3245@sym*)) (if (null? dE324a@sym*) dE3247@ht (begin (hashtable-update! dE3247@ht (car dE324a@sym*) (lambda (dE324f@x) (cons dE3249@i dE324f@x)) '()) (dE324d@f (+ dE3249@i '1) (cdr dE324a@sym*)))))))) (set! dE4b1d@dE2e6f@make-rib-map dE2e6f@make-rib-map) (set! dE2e71@seal-rib! (lambda (dE3251@rib) (let ((dE3253@sym* (dE2e53@rib-sym* dE3251@rib))) (if (not (null? dE3253@sym*)) (begin (dE2e55@set-rib-sym*! dE3251@rib (list->vector dE3253@sym*)) (dE2e59@set-rib-mark**! dE3251@rib (list->vector (dE2e57@rib-mark** dE3251@rib))) (dE2e5d@set-rib-label*! dE3251@rib (list->vector (dE2e5b@rib-label* dE3251@rib))) (dE2e61@set-rib-sealed/freq! dE3251@rib (dE2e6f@make-rib-map dE3253@sym*))) (void))))) (set! dE4b1e@dE2e71@seal-rib! dE2e71@seal-rib!) (set! dE2e73@unseal-rib! (lambda (dE3255@rib) (if (dE2e5f@rib-sealed/freq dE3255@rib) (begin (dE2e61@set-rib-sealed/freq! dE3255@rib '#f) (dE2e55@set-rib-sym*! dE3255@rib (vector->list (dE2e53@rib-sym* dE3255@rib))) (dE2e59@set-rib-mark**! dE3255@rib (vector->list (dE2e57@rib-mark** dE3255@rib))) (dE2e5d@set-rib-label*! dE3255@rib (vector->list (dE2e5b@rib-label* dE3255@rib)))) (void)))) (set! dE4b1f@dE2e73@unseal-rib! dE2e73@unseal-rib!) (set! dE2e75@make-full-rib (lambda (dE3257@id* dE3258@label*) (let ((dE325b@r (make-simple-struct 'rib '6 (list (map dE2eb7@id->sym dE3257@id*) (map dE2e87@stx-mark* dE3257@id*) dE3258@label* '#f '#f)))) (begin (dE2e71@seal-rib! dE325b@r) dE325b@r)))) (set! dE4b20@dE2e75@make-full-rib dE2e75@make-full-rib) (set! dE2e77@rp (dE2a02@dE28dd@make-record-printer 'stx (lambda (dE325d@x dE325e@p dE325f@wr) (begin (display '"#<syntax " dE325e@p) (write (dE2ec9@stx->datum dE325d@x) dE325e@p) (let ((dE3263@expr (dE2e83@stx-expr dE325d@x))) (if (dE29f9@dE28cb@annotation? dE3263@expr) (let ((dE3265@src (dE29fa@dE28cd@annotation-source dE3263@expr))) (if (pair? dE3265@src) (begin (display '" [" dE325e@p) (display (cdr dE3265@src) dE325e@p) (display '" of " dE325e@p) (display (car dE3265@src) dE325e@p) (display '"]" dE325e@p)) (void))) (void))) (display '">" dE325e@p))))) (set! dE4b21@dE2e77@rp dE2e77@rp) (set! dE2e81@stx? (lambda (dE3267@x) (and (simple-struct? dE3267@x) (eq? (simple-struct-name dE3267@x) 'stx)))) (set! dE4b22@dE2e81@stx? dE2e81@stx?) (set! dE2e83@stx-expr (lambda (dE3269@x) (simple-struct-ref dE3269@x '0))) (set! dE4b23@dE2e83@stx-expr dE2e83@stx-expr) (set! dE2e85@set-stx-expr! (lambda (dE326b@x dE326c@val) (simple-struct-set! dE326b@x '0 dE326c@val))) (set! dE4b24@dE2e85@set-stx-expr! dE2e85@set-stx-expr!) (set! dE2e87@stx-mark* (lambda (dE326f@x) (simple-struct-ref dE326f@x '1))) (set! dE4b25@dE2e87@stx-mark* dE2e87@stx-mark*) (set! dE2e89@set-stx-mark*! (lambda (dE3271@x dE3272@val) (simple-struct-set! dE3271@x '1 dE3272@val))) (set! dE4b26@dE2e89@set-stx-mark*! dE2e89@set-stx-mark*!) (set! dE2e8b@stx-subst* (lambda (dE3275@x) (simple-struct-ref dE3275@x '2))) (set! dE4b27@dE2e8b@stx-subst* dE2e8b@stx-subst*) (set! dE2e8d@set-stx-subst*! (lambda (dE3277@x dE3278@val) (simple-struct-set! dE3277@x '2 dE3278@val))) (set! dE4b28@dE2e8d@set-stx-subst*! dE2e8d@set-stx-subst*!) (set! dE2e8f@stx-ae* (lambda (dE327b@x) (simple-struct-ref dE327b@x '3))) (set! dE4b29@dE2e8f@stx-ae* dE2e8f@stx-ae*) (set! dE2e91@set-stx-ae*! (lambda (dE327d@x dE327e@val) (simple-struct-set! dE327d@x '3 dE327e@val))) (set! dE4b2a@dE2e91@set-stx-ae*! dE2e91@set-stx-ae*!) (set! dE2e93@dummy '3) (set! dE4b2b@dE2e93@dummy dE2e93@dummy) (set! dE2e95@datum->stx (lambda (dE3281@id dE3282@datum) (make-simple-struct 'stx '5 (list dE3282@datum (dE2e87@stx-mark* dE3281@id) (dE2e8b@stx-subst* dE3281@id) (dE2e8f@stx-ae* dE3281@id))))) (set! dE4b2c@dE2e95@datum->stx dE2e95@datum->stx) (set! dE2e97@gen-mark (lambda () (string '#\m))) (set! dE4b2d@dE2e97@gen-mark dE2e97@gen-mark) (set! dE2e99@anti-mark '#f) (set! dE4b2e@dE2e99@anti-mark dE2e99@anti-mark) (set! dE2e9b@anti-mark? not) (set! dE4b2f@dE2e9b@anti-mark? dE2e9b@anti-mark?) (set! dE2e9d@mkstx (lambda (dE3285@e dE3286@m* dE3287@s* dE3288@ae*) (if (and (dE2e81@stx? dE3285@e) (not (dE2e3b@top-marked? dE3286@m*))) (call-with-values (lambda () (join-wraps dE3286@m* dE3287@s* dE3288@ae* dE3285@e)) (lambda (dE3293@dE328e dE3294@dE3290 dE3295@dE3292) (let ((dE3299@ae* dE3295@dE3292) (dE329a@s* dE3294@dE3290) (dE329b@m* dE3293@dE328e)) (make-simple-struct 'stx '5 (list (dE2e83@stx-expr dE3285@e) dE329b@m* dE329a@s* dE3299@ae*))))) (make-simple-struct 'stx '5 (list dE3285@e dE3286@m* dE3287@s* dE3288@ae*))))) (set! dE4b30@dE2e9d@mkstx dE2e9d@mkstx) (set! dE2e9f@add-mark (lambda (dE329f@m dE32a0@e dE32a1@ae) (dE2e9d@mkstx dE32a0@e (list dE329f@m) '(shift) (list dE32a1@ae)))) (set! dE4b31@dE2e9f@add-mark dE2e9f@add-mark) (set! dE2ea1@add-subst (lambda (dE32a5@subst dE32a6@e) (dE2e9d@mkstx dE32a6@e '() (list dE32a5@subst) '()))) (set! dE4b32@dE2ea1@add-subst dE2ea1@add-subst) (set! dE2ea3@syntax-kind? (lambda (dE32a9@x dE32aa@p?) (if (dE2e81@stx? dE32a9@x) (dE2ea3@syntax-kind? (dE2e83@stx-expr dE32a9@x) dE32aa@p?) (if (dE29f9@dE28cb@annotation? dE32a9@x) (dE2ea3@syntax-kind? (dE29fb@dE28cf@annotation-expression dE32a9@x) dE32aa@p?) (dE32aa@p? dE32a9@x))))) (set! dE4b33@dE2ea3@syntax-kind? dE2ea3@syntax-kind?) (set! dE2ea5@syntax-vector->list (lambda (dE32ad@x) (if (dE2e81@stx? dE32ad@x) (let ((dE32af@ls (dE2ea5@syntax-vector->list (dE2e83@stx-expr dE32ad@x))) (dE32b0@m* (dE2e87@stx-mark* dE32ad@x)) (dE32b1@s* (dE2e8b@stx-subst* dE32ad@x)) (dE32b2@ae* (dE2e8f@stx-ae* dE32ad@x))) (map (lambda (dE32b7@x) (dE2e9d@mkstx dE32b7@x dE32b0@m* dE32b1@s* dE32b2@ae*)) dE32af@ls)) (if (dE29f9@dE28cb@annotation? dE32ad@x) (dE2ea5@syntax-vector->list (dE29fb@dE28cf@annotation-expression dE32ad@x)) (if (vector? dE32ad@x) (vector->list dE32ad@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" dE32ad@x)))))) (set! dE4b34@dE2ea5@syntax-vector->list dE2ea5@syntax-vector->list) (set! dE2ea7@syntax-pair? (lambda (dE32b9@x) (dE2ea3@syntax-kind? dE32b9@x pair?))) (set! dE4b35@dE2ea7@syntax-pair? dE2ea7@syntax-pair?) (set! dE2ea9@syntax-vector? (lambda (dE32bb@x) (dE2ea3@syntax-kind? dE32bb@x vector?))) (set! dE4b36@dE2ea9@syntax-vector? dE2ea9@syntax-vector?) (set! dE2eab@syntax-null? (lambda (dE32bd@x) (dE2ea3@syntax-kind? dE32bd@x null?))) (set! dE4b37@dE2eab@syntax-null? dE2eab@syntax-null?) (set! dE2ead@syntax-list? (lambda (dE32bf@x) (or (dE2eab@syntax-null? dE32bf@x) (and (dE2ea7@syntax-pair? dE32bf@x) (dE2ead@syntax-list? (dE2eb1@syntax-cdr dE32bf@x)))))) (set! dE4b38@dE2ead@syntax-list? dE2ead@syntax-list?) (set! dE2eaf@syntax-car (lambda (dE32c1@x) (if (dE2e81@stx? dE32c1@x) (dE2e9d@mkstx (dE2eaf@syntax-car (dE2e83@stx-expr dE32c1@x)) (dE2e87@stx-mark* dE32c1@x) (dE2e8b@stx-subst* dE32c1@x) (dE2e8f@stx-ae* dE32c1@x)) (if (dE29f9@dE28cb@annotation? dE32c1@x) (dE2eaf@syntax-car (dE29fb@dE28cf@annotation-expression dE32c1@x)) (if (pair? dE32c1@x) (car dE32c1@x) (assertion-violation 'syntax-car '"BUG: not a pair" dE32c1@x)))))) (set! dE4b39@dE2eaf@syntax-car dE2eaf@syntax-car) (set! dE2eb1@syntax-cdr (lambda (dE32c3@x) (if (dE2e81@stx? dE32c3@x) (dE2e9d@mkstx (dE2eb1@syntax-cdr (dE2e83@stx-expr dE32c3@x)) (dE2e87@stx-mark* dE32c3@x) (dE2e8b@stx-subst* dE32c3@x) (dE2e8f@stx-ae* dE32c3@x)) (if (dE29f9@dE28cb@annotation? dE32c3@x) (dE2eb1@syntax-cdr (dE29fb@dE28cf@annotation-expression dE32c3@x)) (if (pair? dE32c3@x) (cdr dE32c3@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" dE32c3@x)))))) (set! dE4b3a@dE2eb1@syntax-cdr dE2eb1@syntax-cdr) (set! dE2eb3@syntax->list (lambda (dE32c5@x) (if (dE2ea7@syntax-pair? dE32c5@x) (cons (dE2eaf@syntax-car dE32c5@x) (dE2eb3@syntax->list (dE2eb1@syntax-cdr dE32c5@x))) (if (dE2eab@syntax-null? dE32c5@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" dE32c5@x))))) (set! dE4b3b@dE2eb3@syntax->list dE2eb3@syntax->list) (set! dE2eb5@id? (lambda (dE32c7@x) (and (dE2e81@stx? dE32c7@x) (symbol? (dE2e83@stx-expr dE32c7@x))))) (set! dE4b3c@dE2eb5@id? dE2eb5@id?) (set! dE2eb7@id->sym (lambda (dE32c9@x) (dE2e83@stx-expr dE32c9@x))) (set! dE4b3d@dE2eb7@id->sym dE2eb7@id->sym) (set! dE2eb9@bound-id=? (lambda (dE32cb@x dE32cc@y) (and (eq? (dE2eb7@id->sym dE32cb@x) (dE2eb7@id->sym dE32cc@y)) (same-marks? (dE2e87@stx-mark* dE32cb@x) (dE2e87@stx-mark* dE32cc@y))))) (set! dE4b3e@dE2eb9@bound-id=? dE2eb9@bound-id=?) (set! dE2ebb@free-id=? (lambda (dE32cf@i dE32d0@j) (let ((dE32d3@t0 (id->real-label dE32cf@i)) (dE32d4@t1 (id->real-label dE32d0@j))) (if (or dE32d3@t0 dE32d4@t1) (eq? dE32d3@t0 dE32d4@t1) (eq? (dE2eb7@id->sym dE32cf@i) (dE2eb7@id->sym dE32d0@j)))))) (set! dE4b3f@dE2ebb@free-id=? dE2ebb@free-id=?) (set! dE2ebd@valid-bound-ids? (lambda (dE32d7@id*) (and (for-all dE2eb5@id? dE32d7@id*) (dE2ebf@distinct-bound-ids? dE32d7@id*)))) (set! dE4b40@dE2ebd@valid-bound-ids? dE2ebd@valid-bound-ids?) (set! dE2ebf@distinct-bound-ids? (lambda (dE32d9@id*) (or (null? dE32d9@id*) (and (not (dE2ec1@bound-id-member? (car dE32d9@id*) (cdr dE32d9@id*))) (dE2ebf@distinct-bound-ids? (cdr dE32d9@id*)))))) (set! dE4b41@dE2ebf@distinct-bound-ids? dE2ebf@distinct-bound-ids?) (set! dE2ec1@bound-id-member? (lambda (dE32db@id dE32dc@id*) (and (pair? dE32dc@id*) (or (dE2eb9@bound-id=? dE32db@id (car dE32dc@id*)) (dE2ec1@bound-id-member? dE32db@id (cdr dE32dc@id*)))))) (set! dE4b42@dE2ec1@bound-id-member? dE2ec1@bound-id-member?) (set! dE2ec3@self-evaluating? (lambda (dE32df@x) (or (number? dE32df@x) (string? dE32df@x) (char? dE32df@x) (boolean? dE32df@x) (regexp? dE32df@x) (bytevector? dE32df@x)))) (set! dE4b43@dE2ec3@self-evaluating? dE2ec3@self-evaluating?) (set! dE2ec5@strip-annotations (lambda (dE32e1@x) (if (pair? dE32e1@x) (cons (dE2ec5@strip-annotations (car dE32e1@x)) (dE2ec5@strip-annotations (cdr dE32e1@x))) (if (vector? dE32e1@x) (vector-map dE2ec5@strip-annotations dE32e1@x) (if (dE29f9@dE28cb@annotation? dE32e1@x) (dE29f8@dE28c9@annotation-stripped dE32e1@x) dE32e1@x))))) (set! dE4b44@dE2ec5@strip-annotations dE2ec5@strip-annotations) (set! dE2ec7@strip (lambda (dE32e3@x dE32e4@m*) (if (dE2e3b@top-marked? dE32e4@m*) (if (or (dE29f9@dE28cb@annotation? dE32e3@x) (and (pair? dE32e3@x) (dE29f9@dE28cb@annotation? (car dE32e3@x))) (and (vector? dE32e3@x) (> (vector-length dE32e3@x) '0) (dE29f9@dE28cb@annotation? (vector-ref dE32e3@x '0)))) (dE2ec5@strip-annotations dE32e3@x) dE32e3@x) (let dE32e9@f ((dE32e7@x dE32e3@x)) (if (dE2e81@stx? dE32e7@x) (begin (if (pair? (dE2e83@stx-expr dE32e7@x)) (begin (set-source-info! (dE2e83@stx-expr dE32e7@x) '#f) (set-source-info! (cdr (dE2e83@stx-expr dE32e7@x)) '#f) (set-source-info! (car (dE2e83@stx-expr dE32e7@x)) '#f)) (void)) (dE2ec7@strip (dE2e83@stx-expr dE32e7@x) (dE2e87@stx-mark* dE32e7@x))) (if (dE29f9@dE28cb@annotation? dE32e7@x) (dE29f8@dE28c9@annotation-stripped dE32e7@x) (if (pair? dE32e7@x) (let ((dE32eb@a (dE32e9@f (car dE32e7@x))) (dE32ec@d (dE32e9@f (cdr dE32e7@x)))) (if (and (eq? dE32eb@a (car dE32e7@x)) (eq? dE32ec@d (cdr dE32e7@x))) dE32e7@x (cons dE32eb@a dE32ec@d))) (if (vector? dE32e7@x) (let ((dE32ef@old (vector->list dE32e7@x))) (let ((dE32f1@new (map dE32e9@f dE32ef@old))) (if (for-all eq? dE32ef@old dE32f1@new) dE32e7@x (list->vector dE32f1@new)))) dE32e7@x)))))))) (set! dE4b45@dE2ec7@strip dE2ec7@strip) (set! dE2ec9@stx->datum (lambda (dE32f3@x) (dE2ec7@strip dE32f3@x '()))) (set! dE4b46@dE2ec9@stx->datum dE2ec9@stx->datum) (set! dE2ecb@id->label (lambda (dE32f5@id) (or (id->real-label dE32f5@id) (let ((dE32f7@t (dE31ac@top-level-context))) (if dE32f7@t ((lambda (dE32f9@env) (let ((dE32fb@rib (dE315c@interaction-env-rib dE32f9@env))) (call-with-values (lambda () (dE2e45@gen-define-label+loc dE32f5@id dE32fb@rib)) (lambda (dE3301@dE32fe dE3302@dE3300) (let ((dE3305@loc_ dE3302@dE3300) (dE3306@lab dE3301@dE32fe)) (begin (dE2e6b@extend-rib! dE32fb@rib dE32f5@id dE3306@lab) dE3306@lab)))))) dE32f7@t) '#f))))) (set! dE4b47@dE2ecb@id->label dE2ecb@id->label) (set! dE2ecd@label->binding (lambda (dE3309@x dE330a@r) (let ((dE330d@t (dE2cd0@dE2b1d@imported-label->binding dE3309@x))) (if dE330d@t ((lambda (dE330f@b) (if (and (pair? dE330f@b) (eq? (car dE330f@b) '$core-rtd)) (cons '$rtd (map dE3072@bless (cdr dE330f@b))) (if (and (pair? dE330f@b) (eq? (car dE330f@b) 'global-rtd)) (let ((dE3311@lib (cadr dE330f@b)) (dE3312@loc (cddr dE330f@b))) (cons '$rtd (symbol-value dE3312@loc))) dE330f@b))) dE330d@t) (let ((dE3315@t (assq dE3309@x dE330a@r))) (if dE3315@t (cdr dE3315@t) (let ((dE3317@t (dE31ac@top-level-context))) (if dE3317@t ((lambda (dE3319@env) (let ((dE331b@t (assq dE3309@x (dE3164@interaction-env-locs dE3319@env)))) (if dE331b@t ((lambda (dE331d@p) (cons* 'lexical (cdr dE331d@p) '#f)) dE331b@t) '(displaced-lexical . #f)))) dE3317@t) '(displaced-lexical . #f))))))))) (set! dE4b48@dE2ecd@label->binding dE2ecd@label->binding) (set! dE2ecf@make-binding cons) (set! dE4b49@dE2ecf@make-binding dE2ecf@make-binding) (set! dE2ed1@binding-type car) (set! dE4b4a@dE2ed1@binding-type dE2ed1@binding-type) (set! dE2ed3@binding-value cdr) (set! dE4b4b@dE2ed3@binding-value dE2ed3@binding-value) (set! dE2ed5@raise-unbound-error (lambda (dE331f@id) (dE319a@syntax-violation* '#f '"unbound identifier" dE331f@id (make-undefined-violation)))) (set! dE4b4c@dE2ed5@raise-unbound-error dE2ed5@raise-unbound-error) (set! dE2ed7@syntax-type (lambda (dE3321@e dE3322@r) (if (dE2eb5@id? dE3321@e) (let ((dE3325@id dE3321@e)) (let ((dE3327@label (dE2ecb@id->label dE3325@id))) (let ((dE3329@b (dE2ecd@label->binding dE3327@label dE3322@r))) (let ((dE332b@type (dE2ed1@binding-type dE3329@b))) (begin (if (not dE3327@label) (dE2ed5@raise-unbound-error dE3325@id) (void)) (let ((dE332d@t dE332b@type)) (if (memv dE332d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values dE332b@type (dE2ed3@binding-value dE3329@b) dE3325@id) (values 'other '#f '#f)))))))) (if (dE2ea7@syntax-pair? dE3321@e) (let ((dE332f@id (dE2eaf@syntax-car dE3321@e))) (if (dE2eb5@id? dE332f@id) (let ((dE3331@label (dE2ecb@id->label dE332f@id))) (let ((dE3333@b (dE2ecd@label->binding dE3331@label dE3322@r))) (let ((dE3335@type (dE2ed1@binding-type dE3333@b))) (begin (if (not dE3331@label) (dE2ed5@raise-unbound-error dE332f@id) (void)) (let ((dE3337@t dE3335@type)) (if (memv dE3337@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values dE3335@type (dE2ed3@binding-value dE3333@b) dE332f@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((dE3339@d (dE2ec9@stx->datum dE3321@e))) (if (dE2ec3@self-evaluating? dE3339@d) (values 'constant dE3339@d '#f) (values 'other '#f '#f))))))) (set! dE4b4d@dE2ed7@syntax-type dE2ed7@syntax-type) (set! dE2ee5@sanitize-binding (lambda (dE333b@x dE333c@src) (if (procedure? dE333b@x) (cons* 'local-macro dE333b@x dE333c@src) (if (and (pair? dE333b@x) (eq? (car dE333b@x) 'macro!) (procedure? (cdr dE333b@x))) (cons* 'local-macro! (cdr dE333b@x) dE333c@src) (if (and (pair? dE333b@x) (eq? (car dE333b@x) '$rtd)) dE333b@x (assertion-violation 'expand '"invalid transformer" dE333b@x)))))) (set! dE4b4e@dE2ee5@sanitize-binding dE2ee5@sanitize-binding) (set! dE2ee7@make-variable-transformer (lambda (dE333f@x) (if (procedure? dE333f@x) (cons 'macro! dE333f@x) (assertion-violation 'make-variable-transformer '"not a procedure" dE333f@x)))) (set! dE4b4f@dE2ee7@make-variable-transformer dE2ee7@make-variable-transformer) (set! dE2ee9@variable-transformer? (lambda (dE3341@x) (and (pair? dE3341@x) (eq? (car dE3341@x) 'macro!) (procedure? (cdr dE3341@x))))) (set! dE4b50@dE2ee9@variable-transformer? dE2ee9@variable-transformer?) (set! dE2eeb@variable-transformer-procedure (lambda (dE3343@x) (if (dE2ee9@variable-transformer? dE3343@x) (cdr dE3343@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" dE3343@x)))) (set! dE4b51@dE2eeb@variable-transformer-procedure dE2eeb@variable-transformer-procedure) (set! dE2eed@make-eval-transformer (lambda (dE3345@x) (dE2ee5@sanitize-binding (eval-core (dE2a5b@dE2a13@expanded->core dE3345@x)) dE3345@x))) (set! dE4b52@dE2eed@make-eval-transformer dE2eed@make-eval-transformer) (set! dE303e@parse-define (lambda (dE3347@x) (let ((dE3349@t dE3347@x)) (let ((dE334b@ls/false (dE30bc@syntax-dispatch dE3349@t '(_ (any . any) any . each-any)))) (if (and dE334b@ls/false (apply (lambda (dE334d@id dE334e@fmls dE334f@b dE3350@b*) (dE2eb5@id? dE334d@id)) dE334b@ls/false)) (apply (lambda (dE3355@id dE3356@fmls dE3357@b dE3358@b*) (begin (dE30e2@verify-formals dE3356@fmls dE3347@x) (values dE3355@id (cons 'defun (cons dE3356@fmls (cons dE3357@b dE3358@b*)))))) dE334b@ls/false) (let ((dE335d@t dE3349@t)) (let ((dE335f@ls/false (dE30bc@syntax-dispatch dE335d@t '(_ any any)))) (if (and dE335f@ls/false (apply (lambda (dE3361@id dE3362@val) (dE2eb5@id? dE3361@id)) dE335f@ls/false)) (apply (lambda (dE3365@id dE3366@val) (values dE3365@id (cons 'expr dE3366@val))) dE335f@ls/false) (let ((dE3369@t dE335d@t)) (let ((dE336b@ls/false (dE30bc@syntax-dispatch dE3369@t '(_ any)))) (if (and dE336b@ls/false (apply (lambda (dE336d@id) (dE2eb5@id? dE336d@id)) dE336b@ls/false)) (apply (lambda (dE336f@id) (values dE336f@id (cons 'expr (dE3072@bless '(void))))) dE336b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3369@t)))))))))))) (set! dE4b53@dE303e@parse-define dE303e@parse-define) (set! dE3040@parse-define-syntax (lambda (dE3371@x) (let ((dE3373@t dE3371@x)) (let ((dE3375@ls/false (dE30bc@syntax-dispatch dE3373@t '(_ any any)))) (if (and dE3375@ls/false (apply (lambda (dE3377@id dE3378@val) (dE2eb5@id? dE3377@id)) dE3375@ls/false)) (apply (lambda (dE337b@id dE337c@val) (values dE337b@id dE337c@val)) dE3375@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3373@t)))))) (set! dE4b54@dE3040@parse-define-syntax dE3040@parse-define-syntax) (set! dE3042@scheme-stx-hashtable (make-eq-hashtable)) (set! dE4b55@dE3042@scheme-stx-hashtable dE3042@scheme-stx-hashtable) (set! dE3044@scheme-stx (lambda (dE337f@sym) (or (hashtable-ref dE3042@scheme-stx-hashtable dE337f@sym '#f) (let ((dE3381@subst (dE2cac@dE2ad5@library-subst (dE2cca@dE2b11@find-library-by-name '(psyntax system $all))))) (let ((dE3383@stx (make-simple-struct 'stx '5 (list dE337f@sym dE2e39@top-mark* '() '())))) (let ((dE3385@stx (let ((dE3387@t (assq dE337f@sym dE3381@subst))) (if dE3387@t ((lambda (dE3389@x) (let ((dE338b@name (car dE3389@x)) (dE338c@label (cdr dE3389@x))) (dE2ea1@add-subst (make-simple-struct 'rib '6 (list (list dE338b@name) (list dE2e39@top-mark*) (list dE338c@label) '#f '#f)) dE3383@stx))) dE3387@t) dE3383@stx)))) (begin (hashtable-set! dE3042@scheme-stx-hashtable dE337f@sym dE3385@stx) dE3385@stx))))))) (set! dE4b56@dE3044@scheme-stx dE3044@scheme-stx) (set! dE3046@lexical-var car) (set! dE4b57@dE3046@lexical-var dE3046@lexical-var) (set! dE3048@lexical-mutable? cdr) (set! dE4b58@dE3048@lexical-mutable? dE3048@lexical-mutable?) (set! dE304a@set-lexical-mutable! set-cdr!) (set! dE4b59@dE304a@set-lexical-mutable! dE304a@set-lexical-mutable!) (set! dE304c@add-lexical (lambda (dE338f@lab dE3390@lex dE3391@r) (cons (cons* dE338f@lab 'lexical dE3390@lex '#f) dE3391@r))) (set! dE4b5a@dE304c@add-lexical dE304c@add-lexical) (set! dE304e@add-lexicals (lambda (dE3395@lab* dE3396@lex* dE3397@r) (if (null? dE3395@lab*) dE3397@r (dE304e@add-lexicals (cdr dE3395@lab*) (cdr dE3396@lex*) (dE304c@add-lexical (car dE3395@lab*) (car dE3396@lex*) dE3397@r))))) (set! dE4b5b@dE304e@add-lexicals dE304e@add-lexicals) (set! dE3050@letrec-helper (lambda (dE339b@e dE339c@r dE339d@mr dE339e@build) (let ((dE33a3@t dE339b@e)) (let ((dE33a5@ls/false (dE30bc@syntax-dispatch dE33a3@t '(_ #(each (any any)) any . each-any)))) (if dE33a5@ls/false (apply (lambda (dE33a7@lhs* dE33a8@rhs* dE33a9@b dE33aa@b*) (if (not (dE2ebd@valid-bound-ids? dE33a7@lhs*)) (dE3076@invalid-fmls-error dE339b@e dE33a7@lhs*) (let ((dE33af@lex* (map dE2e3d@gen-lexical dE33a7@lhs*)) (dE33b0@lab* (map dE2e41@gen-label dE33a7@lhs*))) (let ((dE33b3@rib (dE2e75@make-full-rib dE33a7@lhs* dE33b0@lab*)) (dE33b4@r (dE304e@add-lexicals dE33b0@lab* dE33af@lex* dE339c@r))) (let ((dE33b7@body (dE30f4@chi-internal (dE2ea1@add-subst dE33b3@rib (cons dE33a9@b dE33aa@b*)) dE33b4@r dE339d@mr)) (dE33b8@rhs* (dE30da@chi-expr* (map (lambda (dE33bb@x) (dE2ea1@add-subst dE33b3@rib dE33bb@x)) dE33a8@rhs*) dE33b4@r dE339d@mr))) (dE339e@build '#f dE33af@lex* dE33b8@rhs* dE33b7@body)))))) dE33a5@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE33a3@t)))))) (set! dE4b5c@dE3050@letrec-helper dE3050@letrec-helper) (set! dE3052@let-transformer (lambda (dE33bd@e dE33be@r dE33bf@mr) (let ((dE33c3@t dE33bd@e)) (let ((dE33c5@ls/false (dE30bc@syntax-dispatch dE33c3@t '(_ #(each (any any)) any . each-any)))) (if dE33c5@ls/false (apply (lambda (dE33c7@lhs* dE33c8@rhs* dE33c9@b dE33ca@b*) (if (not (dE2ebd@valid-bound-ids? dE33c7@lhs*)) (dE3076@invalid-fmls-error dE33bd@e dE33c7@lhs*) (let ((dE33cf@lex* (map dE2e3d@gen-lexical dE33c7@lhs*)) (dE33d0@lab* (map dE2e41@gen-label dE33c7@lhs*)) (dE33d1@rhs* (dE30da@chi-expr* dE33c8@rhs* dE33be@r dE33bf@mr))) (let ((dE33d5@rib (dE2e75@make-full-rib dE33c7@lhs* dE33d0@lab*)) (dE33d6@r (dE304e@add-lexicals dE33d0@lab* dE33cf@lex* dE33be@r))) (let ((dE33d9@body (dE30f4@chi-internal (dE2ea1@add-subst dE33d5@rib (cons dE33c9@b dE33ca@b*)) dE33d6@r dE33bf@mr))) (dE2e1d@dE2d80@build-let '#f dE33cf@lex* dE33d1@rhs* dE33d9@body)))))) dE33c5@ls/false) (let ((dE33db@t dE33c3@t)) (let ((dE33dd@ls/false (dE30bc@syntax-dispatch dE33db@t '(_ any #(each (any any)) any . each-any)))) (if dE33dd@ls/false (apply (lambda (dE33df@loop dE33e0@lhs* dE33e1@rhs* dE33e2@b dE33e3@b*) (if (not (dE2ebd@valid-bound-ids? dE33e0@lhs*)) (dE3076@invalid-fmls-error dE33bd@e dE33e0@lhs*) (let ((dE33e9@lex* (map dE2e3d@gen-lexical dE33e0@lhs*)) (dE33ea@lab* (map dE2e41@gen-label dE33e0@lhs*)) (dE33eb@rhs* (dE30da@chi-expr* dE33e1@rhs* dE33be@r dE33bf@mr)) (dE33ec@loop-lex (dE2e3d@gen-lexical dE33df@loop)) (dE33ed@loop-lab (dE2e41@gen-label dE33df@loop))) (let ((dE33f3@loop-rib (dE2e75@make-full-rib (list dE33df@loop) (list dE33ed@loop-lab))) (dE33f4@rib (dE2e75@make-full-rib dE33e0@lhs* dE33ea@lab*)) (dE33f5@r (dE304e@add-lexicals (cons dE33ed@loop-lab dE33ea@lab*) (cons dE33ec@loop-lex dE33e9@lex*) dE33be@r))) (let ((dE33f9@body (dE30f4@chi-internal (dE2ea1@add-subst dE33f3@loop-rib (dE2ea1@add-subst dE33f4@rib (cons dE33e2@b dE33e3@b*))) dE33f5@r dE33bf@mr))) (dE2e1e@dE2d82@build-named-let '#f dE33ec@loop-lex dE33e9@lex* dE33eb@rhs* dE33f9@body)))))) dE33dd@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE33db@t))))))))) (set! dE4b5d@dE3052@let-transformer dE3052@let-transformer) (set! dE3054@letrec-transformer (lambda (dE33fb@e dE33fc@r dE33fd@mr) (dE3050@letrec-helper dE33fb@e dE33fc@r dE33fd@mr dE2e1c@dE2d7e@build-letrec))) (set! dE4b5e@dE3054@letrec-transformer dE3054@letrec-transformer) (set! dE3056@letrec*-transformer (lambda (dE3401@e dE3402@r dE3403@mr) (dE3050@letrec-helper dE3401@e dE3402@r dE3403@mr dE2e1f@dE2d84@build-letrec*))) (set! dE4b5f@dE3056@letrec*-transformer dE3056@letrec*-transformer) (set! dE3058@fluid-let-syntax-transformer (lambda (dE3407@e dE3408@r dE3409@mr) (letrec* ((dE340e@lookup (lambda (dE3421@x) (or (dE2ecb@id->label dE3421@x) (dE319c@syntax-violation '#f '"unbound identifier" dE3407@e dE3421@x))))) (let ((dE340f@t dE3407@e)) (let ((dE3411@ls/false (dE30bc@syntax-dispatch dE340f@t '(_ #(each (any any)) any . each-any)))) (if dE3411@ls/false (apply (lambda (dE3413@lhs* dE3414@rhs* dE3415@b dE3416@b*) (if (not (dE2ebd@valid-bound-ids? dE3413@lhs*)) (dE3076@invalid-fmls-error dE3407@e dE3413@lhs*) (let ((dE341b@lab* (map dE340e@lookup dE3413@lhs*)) (dE341c@rhs* (map (lambda (dE341f@x) (dE2eed@make-eval-transformer (dE3116@expand-transformer dE341f@x dE3409@mr))) dE3414@rhs*))) (dE30f4@chi-internal (cons dE3415@b dE3416@b*) (append (map cons dE341b@lab* dE341c@rhs*) dE3408@r) (append (map cons dE341b@lab* dE341c@rhs*) dE3409@mr))))) dE3411@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE340f@t))))))) (set! dE4b60@dE3058@fluid-let-syntax-transformer dE3058@fluid-let-syntax-transformer) (set! dE305a@type-descriptor-transformer (lambda (dE3423@e dE3424@r dE3425@mr) (let ((dE3429@t dE3423@e)) (let ((dE342b@ls/false (dE30bc@syntax-dispatch dE3429@t '(_ any)))) (if (and dE342b@ls/false (apply (lambda (dE342d@id) (dE2eb5@id? dE342d@id)) dE342b@ls/false)) (apply (lambda (dE342f@id) (let ((dE3431@lab (dE2ecb@id->label dE342f@id))) (let ((dE3433@b (dE2ecd@label->binding dE3431@lab dE3424@r))) (let ((dE3435@type (dE2ed1@binding-type dE3433@b))) (begin (if (not dE3431@lab) (dE2ed5@raise-unbound-error dE342f@id) (void)) (if (not (and (eq? dE3435@type '$rtd) (not (list? (dE2ed3@binding-value dE3433@b))))) (dE319c@syntax-violation '#f '"not a record type" dE3423@e) (void)) (list 'quote (dE2ed3@binding-value dE3433@b))))))) dE342b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3429@t)))))) (set! dE4b61@dE305a@type-descriptor-transformer dE305a@type-descriptor-transformer) (set! dE305c@record-type-descriptor-transformer (lambda (dE3437@e dE3438@r dE3439@mr) (let ((dE343d@t dE3437@e)) (let ((dE343f@ls/false (dE30bc@syntax-dispatch dE343d@t '(_ any)))) (if (and dE343f@ls/false (apply (lambda (dE3441@id) (dE2eb5@id? dE3441@id)) dE343f@ls/false)) (apply (lambda (dE3443@id) (let ((dE3445@lab (dE2ecb@id->label dE3443@id))) (let ((dE3447@b (dE2ecd@label->binding dE3445@lab dE3438@r))) (let ((dE3449@type (dE2ed1@binding-type dE3447@b))) (begin (if (not dE3445@lab) (dE2ed5@raise-unbound-error dE3443@id) (void)) (if (not (and (eq? dE3449@type '$rtd) (list? (dE2ed3@binding-value dE3447@b)))) (dE319c@syntax-violation '#f '"not a record type" dE3437@e) (void)) (dE30de@chi-expr (car (dE2ed3@binding-value dE3447@b)) dE3438@r dE3439@mr)))))) dE343f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE343d@t)))))) (set! dE4b62@dE305c@record-type-descriptor-transformer dE305c@record-type-descriptor-transformer) (set! dE305e@record-constructor-descriptor-transformer (lambda (dE344b@e dE344c@r dE344d@mr) (let ((dE3451@t dE344b@e)) (let ((dE3453@ls/false (dE30bc@syntax-dispatch dE3451@t '(_ any)))) (if (and dE3453@ls/false (apply (lambda (dE3455@id) (dE2eb5@id? dE3455@id)) dE3453@ls/false)) (apply (lambda (dE3457@id) (let ((dE3459@lab (dE2ecb@id->label dE3457@id))) (let ((dE345b@b (dE2ecd@label->binding dE3459@lab dE344c@r))) (let ((dE345d@type (dE2ed1@binding-type dE345b@b))) (begin (if (not dE3459@lab) (dE2ed5@raise-unbound-error dE3457@id) (void)) (if (not (and (eq? dE345d@type '$rtd) (list? (dE2ed3@binding-value dE345b@b)))) (dE319c@syntax-violation '#f '"invalid type" dE344b@e) (void)) (dE30de@chi-expr (cadr (dE2ed3@binding-value dE345b@b)) dE344c@r dE344d@mr)))))) dE3453@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3451@t)))))) (set! dE4b63@dE305e@record-constructor-descriptor-transformer dE305e@record-constructor-descriptor-transformer) (set! dE3060@when-macro (lambda (dE345f@e) (let ((dE3461@t dE345f@e)) (let ((dE3463@ls/false (dE30bc@syntax-dispatch dE3461@t '(_ any any . each-any)))) (if dE3463@ls/false (apply (lambda (dE3465@test dE3466@e dE3467@e*) (dE3072@bless (list 'if dE3465@test (cons 'begin (cons dE3466@e dE3467@e*))))) dE3463@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3461@t)))))) (set! dE4b64@dE3060@when-macro dE3060@when-macro) (set! dE3062@unless-macro (lambda (dE346b@e) (let ((dE346d@t dE346b@e)) (let ((dE346f@ls/false (dE30bc@syntax-dispatch dE346d@t '(_ any any . each-any)))) (if dE346f@ls/false (apply (lambda (dE3471@test dE3472@e dE3473@e*) (dE3072@bless (list 'if (list 'not dE3471@test) (cons 'begin (cons dE3472@e dE3473@e*))))) dE346f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE346d@t)))))) (set! dE4b65@dE3062@unless-macro dE3062@unless-macro) (set! dE3064@if-transformer (lambda (dE3477@e dE3478@r dE3479@mr) (let ((dE347d@t dE3477@e)) (let ((dE347f@ls/false (dE30bc@syntax-dispatch dE347d@t '(_ any any any)))) (if dE347f@ls/false (apply (lambda (dE3481@e0 dE3482@e1 dE3483@e2) (list 'if (dE30de@chi-expr dE3481@e0 dE3478@r dE3479@mr) (dE30de@chi-expr dE3482@e1 dE3478@r dE3479@mr) (dE30de@chi-expr dE3483@e2 dE3478@r dE3479@mr))) dE347f@ls/false) (let ((dE3487@t dE347d@t)) (let ((dE3489@ls/false (dE30bc@syntax-dispatch dE3487@t '(_ any any)))) (if dE3489@ls/false (apply (lambda (dE348b@e0 dE348c@e1) (list 'if (dE30de@chi-expr dE348b@e0 dE3478@r dE3479@mr) (dE30de@chi-expr dE348c@e1 dE3478@r dE3479@mr) (dE2e1b@dE2d7c@build-void))) dE3489@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3487@t))))))))) (set! dE4b66@dE3064@if-transformer dE3064@if-transformer) (set! dE3066@and-transformer (lambda (dE348f@e dE3490@r dE3491@mr) (let ((dE3495@t dE348f@e)) (let ((dE3497@ls/false (dE30bc@syntax-dispatch dE3495@t '(_ . each-any)))) (if dE3497@ls/false (apply (lambda (dE3499@e*) (cons 'and (dE30da@chi-expr* dE3499@e* dE3490@r dE3491@mr))) dE3497@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3495@t)))))) (set! dE4b67@dE3066@and-transformer dE3066@and-transformer) (set! dE3068@or-transformer (lambda (dE349b@e dE349c@r dE349d@mr) (let ((dE34a1@t dE349b@e)) (let ((dE34a3@ls/false (dE30bc@syntax-dispatch dE34a1@t '(_ . each-any)))) (if dE34a3@ls/false (apply (lambda (dE34a5@e*) (cons 'or (dE30da@chi-expr* dE34a5@e* dE349c@r dE349d@mr))) dE34a3@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE34a1@t)))))) (set! dE4b68@dE3068@or-transformer dE3068@or-transformer) (set! dE306a@case-macro (lambda (dE34a7@e) (letrec* ((dE34aa@build-last (lambda (dE34d1@cls) (let ((dE34d3@t dE34d1@cls)) (let ((dE34d5@ls/false (dE30bc@syntax-dispatch dE34d3@t '(#(scheme-id else) any . each-any)))) (if dE34d5@ls/false (apply (lambda (dE34d7@e dE34d8@e*) (cons 'begin (cons dE34d7@e dE34d8@e*))) dE34d5@ls/false) (let ((dE34db@t dE34d3@t)) (let ((dE34dd@ls/false (dE30bc@syntax-dispatch dE34db@t '_))) (if dE34dd@ls/false (apply (lambda () (dE34ac@build-one dE34d1@cls '(if #f #f))) dE34dd@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE34db@t))))))))) (dE34ac@build-one (lambda (dE34c3@cls dE34c4@k) (let ((dE34c7@t dE34c3@cls)) (let ((dE34c9@ls/false (dE30bc@syntax-dispatch dE34c7@t '(each-any any . each-any)))) (if dE34c9@ls/false (apply (lambda (dE34cb@d* dE34cc@e dE34cd@e*) (list 'if (list 'memv 't (list 'quote dE34cb@d*)) (cons 'begin (cons dE34cc@e dE34cd@e*)) dE34c4@k)) dE34c9@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE34c7@t))))))) (let ((dE34ad@t dE34a7@e)) (let ((dE34af@ls/false (dE30bc@syntax-dispatch dE34ad@t '(_ any)))) (if dE34af@ls/false (apply (lambda (dE34b1@expr) (dE3072@bless (cons 'let (cons (list (list 't dE34b1@expr)) '((if #f #f)))))) dE34af@ls/false) (let ((dE34b3@t dE34ad@t)) (let ((dE34b5@ls/false (dE30bc@syntax-dispatch dE34b3@t '(_ any any . each-any)))) (if dE34b5@ls/false (apply (lambda (dE34b7@expr dE34b8@cls dE34b9@cls*) (dE3072@bless (list 'let (list (list 't dE34b7@expr)) (let dE34c1@f ((dE34bd@cls dE34b8@cls) (dE34be@cls* dE34b9@cls*)) (if (null? dE34be@cls*) (dE34aa@build-last dE34bd@cls) (dE34ac@build-one dE34bd@cls (dE34c1@f (car dE34be@cls*) (cdr dE34be@cls*)))))))) dE34b5@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE34b3@t)))))))))) (set! dE4b69@dE306a@case-macro dE306a@case-macro) (set! dE306c@quote-transformer (lambda (dE34df@e dE34e0@r dE34e1@mr) (let ((dE34e5@t dE34df@e)) (let ((dE34e7@ls/false (dE30bc@syntax-dispatch dE34e5@t '(_ any)))) (if dE34e7@ls/false (apply (lambda (dE34e9@datum) (list 'quote (dE2ec9@stx->datum dE34e9@datum))) dE34e7@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE34e5@t)))))) (set! dE4b6a@dE306c@quote-transformer dE306c@quote-transformer) (set! dE306e@case-lambda-transformer (lambda (dE34eb@e dE34ec@r dE34ed@mr) (let ((dE34f1@t dE34eb@e)) (let ((dE34f3@ls/false (dE30bc@syntax-dispatch dE34f1@t '(_ . #(each (any any . each-any)))))) (if dE34f3@ls/false (apply (lambda (dE34f5@fmls* dE34f6@b* dE34f7@b**) (call-with-values (lambda () (dE30e6@chi-lambda-clause* dE34eb@e dE34f5@fmls* (map cons dE34f6@b* dE34f7@b**) dE34ec@r dE34ed@mr)) (lambda (dE34ff@dE34fc dE3500@dE34fe) (let ((dE3503@body* dE3500@dE34fe) (dE3504@fmls* dE34ff@dE34fc)) (dE2e19@dE2d4c@build-case-lambda '#f dE3504@fmls* dE3503@body*))))) dE34f3@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE34f1@t)))))) (set! dE4b6b@dE306e@case-lambda-transformer dE306e@case-lambda-transformer) (set! dE3070@lambda-transformer (lambda (dE3507@e dE3508@r dE3509@mr) (let ((dE350d@t dE3507@e)) (let ((dE350f@ls/false (dE30bc@syntax-dispatch dE350d@t '(_ any any . each-any)))) (if dE350f@ls/false (apply (lambda (dE3511@fmls dE3512@b dE3513@b*) (call-with-values (lambda () (dE30e4@chi-lambda-clause dE3507@e dE3511@fmls (cons dE3512@b dE3513@b*) dE3508@r dE3509@mr)) (lambda (dE351b@dE3518 dE351c@dE351a) (let ((dE351f@body dE351c@dE351a) (dE3520@fmls dE351b@dE3518)) (dE2e18@dE2d4a@build-lambda '#f dE3520@fmls dE351f@body))))) dE350f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE350d@t)))))) (set! dE4b6c@dE3070@lambda-transformer dE3070@lambda-transformer) (set! dE3072@bless (lambda (dE3523@x) (dE2e9d@mkstx (let dE3527@f ((dE3525@x dE3523@x)) (if (dE2e81@stx? dE3525@x) dE3525@x (if (pair? dE3525@x) (cons (dE3527@f (car dE3525@x)) (dE3527@f (cdr dE3525@x))) (if (symbol? dE3525@x) (dE3044@scheme-stx dE3525@x) (if (vector? dE3525@x) (vector-map dE3527@f dE3525@x) dE3525@x))))) '() '() '()))) (set! dE4b6d@dE3072@bless dE3072@bless) (set! dE3074@with-syntax-macro (lambda (dE3529@e) (let ((dE352b@t dE3529@e)) (let ((dE352d@ls/false (dE30bc@syntax-dispatch dE352b@t '(_ #(each (any any)) any . each-any)))) (if dE352d@ls/false (apply (lambda (dE352f@pat* dE3530@expr* dE3531@b dE3532@b*) (let ((dE3537@idn* (let dE353b@f ((dE3539@pat* dE352f@pat*)) (if (null? dE3539@pat*) '() (call-with-values (lambda () (dE30ba@convert-pattern (car dE3539@pat*) '())) (lambda (dE3541@dE353e dE3542@dE3540) (let ((dE3545@idn* dE3542@dE3540) (dE3546@pat dE3541@dE353e)) (append dE3545@idn* (dE353b@f (cdr dE3539@pat*)))))))))) (begin (dE30e2@verify-formals (map car dE3537@idn*) dE3529@e) (let ((dE3549@t* (dE318a@generate-temporaries dE3530@expr*))) (dE3072@bless (list 'let (map list dE3549@t* dE3530@expr*) (let dE354f@f ((dE354b@pat* dE352f@pat*) (dE354c@t* dE3549@t*)) (if (null? dE354b@pat*) (cons 'begin (cons '#f (cons dE3531@b dE3532@b*))) (list 'syntax-case (car dE354c@t*) '() (list (car dE354b@pat*) (dE354f@f (cdr dE354b@pat*) (cdr dE354c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car dE354b@pat*)) (car dE354c@t*)))))))))))) dE352d@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE352b@t)))))) (set! dE4b6e@dE3074@with-syntax-macro dE3074@with-syntax-macro) (set! dE3076@invalid-fmls-error (lambda (dE3551@stx dE3552@fmls) (let ((dE3555@t dE3552@fmls)) (let ((dE3557@ls/false (dE30bc@syntax-dispatch dE3555@t '#(each+ any () any)))) (if dE3557@ls/false (apply (lambda (dE3559@id* dE355a@last) (let dE355f@f ((dE355d@id* (if (dE2eb5@id? dE355a@last) (cons dE355a@last dE3559@id*) (if (dE2eab@syntax-null? dE355a@last) dE3559@id* (dE319c@syntax-violation '#f '"not an identifier" dE3551@stx dE355a@last))))) (if (null? dE355d@id*) (values) (if (not (dE2eb5@id? (car dE355d@id*))) (dE319c@syntax-violation '#f '"not an identifier" dE3551@stx (car dE355d@id*)) (begin (dE355f@f (cdr dE355d@id*)) (if (dE2ec1@bound-id-member? (car dE355d@id*) (cdr dE355d@id*)) (dE319c@syntax-violation '#f '"duplicate binding" dE3551@stx (car dE355d@id*)) (void))))))) dE3557@ls/false) (let ((dE3561@t dE3555@t)) (let ((dE3563@ls/false (dE30bc@syntax-dispatch dE3561@t '_))) (if dE3563@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"malformed binding form" dE3551@stx dE3552@fmls)) dE3563@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3561@t))))))))) (set! dE4b6f@dE3076@invalid-fmls-error dE3076@invalid-fmls-error) (set! dE3078@let-macro (lambda (dE3565@stx) (let ((dE3567@t dE3565@stx)) (let ((dE3569@ls/false (dE30bc@syntax-dispatch dE3567@t '(_ #(each (any any)) any . each-any)))) (if dE3569@ls/false (apply (lambda (dE356b@lhs* dE356c@rhs* dE356d@b dE356e@b*) (if (dE2ebd@valid-bound-ids? dE356b@lhs*) (dE3072@bless (cons (cons 'lambda (cons dE356b@lhs* (cons dE356d@b dE356e@b*))) dE356c@rhs*)) (dE3076@invalid-fmls-error dE3565@stx dE356b@lhs*))) dE3569@ls/false) (let ((dE3573@t dE3567@t)) (let ((dE3575@ls/false (dE30bc@syntax-dispatch dE3573@t '(_ any #(each (any any)) any . each-any)))) (if (and dE3575@ls/false (apply (lambda (dE3577@f dE3578@lhs* dE3579@rhs* dE357a@b dE357b@b*) (dE2eb5@id? dE3577@f)) dE3575@ls/false)) (apply (lambda (dE3581@f dE3582@lhs* dE3583@rhs* dE3584@b dE3585@b*) (if (dE2ebd@valid-bound-ids? dE3582@lhs*) (dE3072@bless (cons (list 'letrec (list (list dE3581@f (cons 'lambda (cons dE3582@lhs* (cons dE3584@b dE3585@b*))))) dE3581@f) dE3583@rhs*)) (dE3076@invalid-fmls-error dE3565@stx dE3582@lhs*))) dE3575@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3573@t))))))))) (set! dE4b70@dE3078@let-macro dE3078@let-macro) (set! dE307a@let-values-macro (lambda (dE358b@stx) (letrec* ((dE358e@rename (lambda (dE35f3@x dE35f4@old* dE35f5@new*) (begin (if (not (dE2eb5@id? dE35f3@x)) (dE319c@syntax-violation '#f '"not an indentifier" dE358b@stx dE35f3@x) (void)) (if (dE2ec1@bound-id-member? dE35f3@x dE35f4@old*) (dE319c@syntax-violation '#f '"duplicate binding" dE358b@stx dE35f3@x) (void)) (let ((dE35f9@y (gensym (dE31a2@syntax->datum dE35f3@x)))) (values dE35f9@y (cons dE35f3@x dE35f4@old*) (cons dE35f9@y dE35f5@new*)))))) (dE3590@rename* (lambda (dE35e1@x* dE35e2@old* dE35e3@new*) (if (null? dE35e1@x*) (values '() dE35e2@old* dE35e3@new*) (call-with-values (lambda () (dE358e@rename (car dE35e1@x*) dE35e2@old* dE35e3@new*)) (lambda (dE35e7@x dE35e8@old* dE35e9@new*) (call-with-values (lambda () (dE3590@rename* (cdr dE35e1@x*) dE35e8@old* dE35e9@new*)) (lambda (dE35ed@x* dE35ee@old* dE35ef@new*) (values (cons dE35e7@x dE35ed@x*) dE35ee@old* dE35ef@new*))))))))) (let ((dE3591@t dE358b@stx)) (let ((dE3593@ls/false (dE30bc@syntax-dispatch dE3591@t '(_ () any . each-any)))) (if dE3593@ls/false (apply (lambda (dE3595@b dE3596@b*) (cons* (dE3072@bless 'let) '() dE3595@b dE3596@b*)) dE3593@ls/false) (let ((dE3599@t dE3591@t)) (let ((dE359b@ls/false (dE30bc@syntax-dispatch dE3599@t '(_ #(each (any any)) any . each-any)))) (if dE359b@ls/false (apply (lambda (dE359d@lhs* dE359e@rhs* dE359f@b dE35a0@b*) (dE3072@bless (let dE35ad@f ((dE35a5@lhs* dE359d@lhs*) (dE35a6@rhs* dE359e@rhs*) (dE35a7@old* '()) (dE35a8@new* '())) (if (null? dE35a5@lhs*) (cons 'let (cons (map list dE35a7@old* dE35a8@new*) (cons dE359f@b dE35a0@b*))) (let ((dE35af@t (car dE35a5@lhs*))) (let ((dE35b1@ls/false (dE30bc@syntax-dispatch dE35af@t 'each-any))) (if dE35b1@ls/false (apply (lambda (dE35b3@x*) (call-with-values (lambda () (dE3590@rename* dE35b3@x* dE35a7@old* dE35a8@new*)) (lambda (dE35bb@dE35b6 dE35bc@dE35b8 dE35bd@dE35ba) (let ((dE35c1@new* dE35bd@dE35ba) (dE35c2@old* dE35bc@dE35b8) (dE35c3@y* dE35bb@dE35b6)) (list 'call-with-values (list 'lambda '() (car dE35a6@rhs*)) (list 'lambda dE35c3@y* (dE35ad@f (cdr dE35a5@lhs*) (cdr dE35a6@rhs*) dE35c2@old* dE35c1@new*))))))) dE35b1@ls/false) (let ((dE35c7@t dE35af@t)) (let ((dE35c9@ls/false (dE30bc@syntax-dispatch dE35c7@t '#(each+ any () any)))) (if dE35c9@ls/false (apply (lambda (dE35cb@x* dE35cc@x) (call-with-values (lambda () (dE358e@rename dE35cc@x dE35a7@old* dE35a8@new*)) (lambda (dE35cf@y dE35d0@old* dE35d1@new*) (call-with-values (lambda () (dE3590@rename* dE35cb@x* dE35d0@old* dE35d1@new*)) (lambda (dE35d5@y* dE35d6@old* dE35d7@new*) (list 'call-with-values (list 'lambda '() (car dE35a6@rhs*)) (list 'lambda (append dE35d5@y* dE35cf@y) (dE35ad@f (cdr dE35a5@lhs*) (cdr dE35a6@rhs*) dE35d6@old* dE35d7@new*)))))))) dE35c9@ls/false) (let ((dE35db@t dE35c7@t)) (let ((dE35dd@ls/false (dE30bc@syntax-dispatch dE35db@t 'any))) (if dE35dd@ls/false (apply (lambda (dE35df@others) (dE319c@syntax-violation '#f '"malformed bindings" dE358b@stx dE35df@others)) dE35dd@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE35db@t)))))))))))))) dE359b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3599@t)))))))))) (set! dE4b71@dE307a@let-values-macro dE307a@let-values-macro) (set! dE307c@let*-values-macro (lambda (dE35fb@stx) (letrec* ((dE35fe@check (lambda (dE362d@x*) (if (not (null? dE362d@x*)) (let ((dE362f@x (car dE362d@x*))) (begin (if (not (dE2eb5@id? dE362f@x)) (dE319c@syntax-violation '#f '"not an identifier" dE35fb@stx dE362f@x) (void)) (dE35fe@check (cdr dE362d@x*)) (if (dE2ec1@bound-id-member? dE362f@x (cdr dE362d@x*)) (dE319c@syntax-violation '#f '"duplicate identifier" dE35fb@stx dE362f@x) (void)))) (void))))) (let ((dE35ff@t dE35fb@stx)) (let ((dE3601@ls/false (dE30bc@syntax-dispatch dE35ff@t '(_ () any . each-any)))) (if dE3601@ls/false (apply (lambda (dE3603@b dE3604@b*) (cons* (dE3072@bless 'let) '() dE3603@b dE3604@b*)) dE3601@ls/false) (let ((dE3607@t dE35ff@t)) (let ((dE3609@ls/false (dE30bc@syntax-dispatch dE3607@t '(_ #(each (any any)) any . each-any)))) (if dE3609@ls/false (apply (lambda (dE360b@lhs* dE360c@rhs* dE360d@b dE360e@b*) (dE3072@bless (let dE3617@f ((dE3613@lhs* dE360b@lhs*) (dE3614@rhs* dE360c@rhs*)) (if (null? dE3613@lhs*) (cons 'begin (cons dE360d@b dE360e@b*)) (let ((dE3619@t (car dE3613@lhs*))) (let ((dE361b@ls/false (dE30bc@syntax-dispatch dE3619@t 'each-any))) (if dE361b@ls/false (apply (lambda (dE361d@x*) (begin (dE35fe@check dE361d@x*) (list 'call-with-values (list 'lambda '() (car dE3614@rhs*)) (list 'lambda dE361d@x* (dE3617@f (cdr dE3613@lhs*) (cdr dE3614@rhs*)))))) dE361b@ls/false) (let ((dE361f@t dE3619@t)) (let ((dE3621@ls/false (dE30bc@syntax-dispatch dE361f@t '#(each+ any () any)))) (if dE3621@ls/false (apply (lambda (dE3623@x* dE3624@x) (begin (dE35fe@check (cons dE3624@x dE3623@x*)) (list 'call-with-values (list 'lambda '() (car dE3614@rhs*)) (list 'lambda (append dE3623@x* dE3624@x) (dE3617@f (cdr dE3613@lhs*) (cdr dE3614@rhs*)))))) dE3621@ls/false) (let ((dE3627@t dE361f@t)) (let ((dE3629@ls/false (dE30bc@syntax-dispatch dE3627@t 'any))) (if dE3629@ls/false (apply (lambda (dE362b@others) (dE319c@syntax-violation '#f '"malformed bindings" dE35fb@stx dE362b@others)) dE3629@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3627@t)))))))))))))) dE3609@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3607@t)))))))))) (set! dE4b72@dE307c@let*-values-macro dE307c@let*-values-macro) (set! dE307e@trace-lambda-macro (lambda (dE3631@stx) (let ((dE3633@t dE3631@stx)) (let ((dE3635@ls/false (dE30bc@syntax-dispatch dE3633@t '(_ any each-any any . each-any)))) (if dE3635@ls/false (apply (lambda (dE3637@who dE3638@fmls dE3639@b dE363a@b*) (if (dE2ebd@valid-bound-ids? dE3638@fmls) (dE3072@bless (list 'make-traced-procedure (list 'quote dE3637@who) (cons 'lambda (cons dE3638@fmls (cons dE3639@b dE363a@b*))))) (dE3076@invalid-fmls-error dE3631@stx dE3638@fmls))) dE3635@ls/false) (let ((dE363f@t dE3633@t)) (let ((dE3641@ls/false (dE30bc@syntax-dispatch dE363f@t '(_ any #(each+ any () any) any . each-any)))) (if dE3641@ls/false (apply (lambda (dE3643@who dE3644@fmls dE3645@last dE3646@b dE3647@b*) (if (dE2ebd@valid-bound-ids? (cons dE3645@last dE3644@fmls)) (dE3072@bless (list 'make-traced-procedure (list 'quote dE3643@who) (cons 'lambda (cons (append dE3644@fmls dE3645@last) (cons dE3646@b dE3647@b*))))) (dE3076@invalid-fmls-error dE3631@stx (append dE3644@fmls dE3645@last)))) dE3641@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE363f@t))))))))) (set! dE4b73@dE307e@trace-lambda-macro dE307e@trace-lambda-macro) (set! dE3080@trace-define-macro (lambda (dE364d@stx) (let ((dE364f@t dE364d@stx)) (let ((dE3651@ls/false (dE30bc@syntax-dispatch dE364f@t '(_ (any . each-any) any . each-any)))) (if dE3651@ls/false (apply (lambda (dE3653@who dE3654@fmls dE3655@b dE3656@b*) (if (dE2ebd@valid-bound-ids? dE3654@fmls) (dE3072@bless (list 'define dE3653@who (list 'make-traced-procedure (list 'quote dE3653@who) (cons 'lambda (cons dE3654@fmls (cons dE3655@b dE3656@b*)))))) (dE3076@invalid-fmls-error dE364d@stx dE3654@fmls))) dE3651@ls/false) (let ((dE365b@t dE364f@t)) (let ((dE365d@ls/false (dE30bc@syntax-dispatch dE365b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if dE365d@ls/false (apply (lambda (dE365f@who dE3660@fmls dE3661@last dE3662@b dE3663@b*) (if (dE2ebd@valid-bound-ids? (cons dE3661@last dE3660@fmls)) (dE3072@bless (list 'define dE365f@who (list 'make-traced-procedure (list 'quote dE365f@who) (cons 'lambda (cons (append dE3660@fmls dE3661@last) (cons dE3662@b dE3663@b*)))))) (dE3076@invalid-fmls-error dE364d@stx (append dE3660@fmls dE3661@last)))) dE365d@ls/false) (let ((dE3669@t dE365b@t)) (let ((dE366b@ls/false (dE30bc@syntax-dispatch dE3669@t '(_ any any)))) (if dE366b@ls/false (apply (lambda (dE366d@who dE366e@expr) (if (dE2eb5@id? dE366d@who) (dE3072@bless (list 'define dE366d@who (list 'let (list (list 'v dE366e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote dE366d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (dE319c@syntax-violation '#f '"invalid name" dE364d@stx))) dE366b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3669@t)))))))))))) (set! dE4b74@dE3080@trace-define-macro dE3080@trace-define-macro) (set! dE3082@trace-define-syntax-macro (lambda (dE3671@stx) (let ((dE3673@t dE3671@stx)) (let ((dE3675@ls/false (dE30bc@syntax-dispatch dE3673@t '(_ any any)))) (if dE3675@ls/false (apply (lambda (dE3677@who dE3678@expr) (if (dE2eb5@id? dE3677@who) (dE3072@bless (list 'define-syntax dE3677@who (list 'make-traced-macro (list 'quote dE3677@who) dE3678@expr))) (dE319c@syntax-violation '#f '"invalid name" dE3671@stx))) dE3675@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3673@t)))))) (set! dE4b75@dE3082@trace-define-syntax-macro dE3082@trace-define-syntax-macro) (set! dE3084@trace-let/rec-syntax (lambda (dE367b@who) (lambda (dE367d@stx) (let ((dE367f@t dE367d@stx)) (let ((dE3681@ls/false (dE30bc@syntax-dispatch dE367f@t '(_ #(each (any any)) any . each-any)))) (if dE3681@ls/false (apply (lambda (dE3683@lhs* dE3684@rhs* dE3685@b dE3686@b*) (if (dE2ebd@valid-bound-ids? dE3683@lhs*) (let ((dE368b@rhs* (map (lambda (dE368d@lhs dE368e@rhs) (list 'make-traced-macro (list 'quote dE368d@lhs) dE368e@rhs)) dE3683@lhs* dE3684@rhs*))) (dE3072@bless (cons dE367b@who (cons (map list dE3683@lhs* dE368b@rhs*) (cons dE3685@b dE3686@b*))))) (dE3076@invalid-fmls-error dE367d@stx dE3683@lhs*))) dE3681@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE367f@t))))))) (set! dE4b76@dE3084@trace-let/rec-syntax dE3084@trace-let/rec-syntax) (set! dE3086@trace-let-syntax-macro (dE3084@trace-let/rec-syntax 'let-syntax)) (set! dE4b77@dE3086@trace-let-syntax-macro dE3086@trace-let-syntax-macro) (set! dE3088@trace-letrec-syntax-macro (dE3084@trace-let/rec-syntax 'letrec-syntax)) (set! dE4b78@dE3088@trace-letrec-syntax-macro dE3088@trace-letrec-syntax-macro) (set! dE308a@guard-macro (lambda (dE3691@x) (letrec* ((dE3694@gen-clauses (lambda (dE36ab@con dE36ac@outerk dE36ad@clause*) (letrec* ((dE36b2@f (lambda (dE36eb@x dE36ec@k) (let ((dE36ef@t dE36eb@x)) (let ((dE36f1@ls/false (dE30bc@syntax-dispatch dE36ef@t '(any #(scheme-id =>) any)))) (if dE36f1@ls/false (apply (lambda (dE36f3@e dE36f4@p) (let ((dE36f7@t (gensym))) (list 'let (list (list dE36f7@t dE36f3@e)) (list 'if dE36f7@t (list dE36f4@p dE36f7@t) dE36ec@k)))) dE36f1@ls/false) (let ((dE36f9@t dE36ef@t)) (let ((dE36fb@ls/false (dE30bc@syntax-dispatch dE36f9@t '(any)))) (if dE36fb@ls/false (apply (lambda (dE36fd@e) (let ((dE36ff@t (gensym))) (list 'let (list (list dE36ff@t dE36fd@e)) (list 'if dE36ff@t dE36ff@t dE36ec@k)))) dE36fb@ls/false) (let ((dE3701@t dE36f9@t)) (let ((dE3703@ls/false (dE30bc@syntax-dispatch dE3701@t '(any any . each-any)))) (if dE3703@ls/false (apply (lambda (dE3705@e dE3706@v dE3707@v*) (list 'if dE3705@e (cons 'begin (cons dE3706@v dE3707@v*)) dE36ec@k)) dE3703@ls/false) (let ((dE370b@t dE3701@t)) (let ((dE370d@ls/false (dE30bc@syntax-dispatch dE370b@t '_))) (if dE370d@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid guard clause" dE36eb@x)) dE370d@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE370b@t))))))))))))))) (dE36b4@f* (lambda (dE36c1@x*) (let ((dE36c3@t dE36c1@x*)) (let ((dE36c5@ls/false (dE30bc@syntax-dispatch dE36c3@t '()))) (if dE36c5@ls/false (apply (lambda () (let ((dE36c7@g (gensym))) (values (list dE36c7@g (list 'lambda '() (list 'raise-continuable dE36ab@con))) dE36c7@g))) dE36c5@ls/false) (let ((dE36c9@t dE36c3@t)) (let ((dE36cb@ls/false (dE30bc@syntax-dispatch dE36c9@t '((#(scheme-id else) any . each-any))))) (if dE36cb@ls/false (apply (lambda (dE36cd@e dE36ce@e*) (values (cons 'begin (cons dE36cd@e dE36ce@e*)) '#f)) dE36cb@ls/false) (let ((dE36d1@t dE36c9@t)) (let ((dE36d3@ls/false (dE30bc@syntax-dispatch dE36d1@t '(any . any)))) (if dE36d3@ls/false (apply (lambda (dE36d5@cls dE36d6@cls*) (call-with-values (lambda () (dE36b4@f* dE36d6@cls*)) (lambda (dE36dd@dE36da dE36de@dE36dc) (let ((dE36e1@g dE36de@dE36dc) (dE36e2@e dE36dd@dE36da)) (values (dE36b2@f dE36d5@cls dE36e2@e) dE36e1@g))))) dE36d3@ls/false) (let ((dE36e5@t dE36d1@t)) (let ((dE36e7@ls/false (dE30bc@syntax-dispatch dE36e5@t 'any))) (if dE36e7@ls/false (apply (lambda (dE36e9@others) (dE319c@syntax-violation '#f '"invalid guard clause" dE36e9@others)) dE36e7@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE36e5@t)))))))))))))))) (call-with-values (lambda () (dE36b4@f* dE36ad@clause*)) (lambda (dE36b9@dE36b6 dE36ba@dE36b8) (let ((dE36bd@raisek dE36ba@dE36b8) (dE36be@code dE36b9@dE36b6)) (if dE36bd@raisek (list (list 'call/cc (list 'lambda (list dE36bd@raisek) (list dE36ac@outerk (list 'lambda '() dE36be@code))))) (list dE36ac@outerk (list 'lambda '() dE36be@code)))))))))) (let ((dE3695@t dE3691@x)) (let ((dE3697@ls/false (dE30bc@syntax-dispatch dE3695@t '(_ (any . each-any) any . each-any)))) (if (and dE3697@ls/false (apply (lambda (dE3699@con dE369a@clause* dE369b@b dE369c@b*) (dE2eb5@id? dE3699@con)) dE3697@ls/false)) (apply (lambda (dE36a1@con dE36a2@clause* dE36a3@b dE36a4@b*) (let ((dE36a9@outerk (gensym))) (dE3072@bless (list (list 'call/cc (list 'lambda (list dE36a9@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list dE36a1@con) (dE3694@gen-clauses dE36a1@con dE36a9@outerk dE36a2@clause*)) (cons 'lambda (cons '() (cons dE36a3@b dE36a4@b*))))))))))) dE3697@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3695@t))))))) (set! dE4b79@dE308a@guard-macro dE308a@guard-macro) (set! dE308c@define-enumeration-macro (lambda (dE370f@stx) (letrec* ((dE3712@set? (lambda (dE372b@x) (or (null? dE372b@x) (and (not (memq (car dE372b@x) (cdr dE372b@x))) (dE3712@set? (cdr dE372b@x)))))) (dE3714@remove-dups (lambda (dE3729@ls) (if (null? dE3729@ls) '() (cons (car dE3729@ls) (dE3714@remove-dups (remq (car dE3729@ls) (cdr dE3729@ls)))))))) (let ((dE3715@t dE370f@stx)) (let ((dE3717@ls/false (dE30bc@syntax-dispatch dE3715@t '(_ any each-any any)))) (if (and dE3717@ls/false (apply (lambda (dE3719@name dE371a@id* dE371b@maker) (and (dE2eb5@id? dE3719@name) (dE2eb5@id? dE371b@maker) (for-all dE2eb5@id? dE371a@id*))) dE3717@ls/false)) (apply (lambda (dE371f@name dE3720@id* dE3721@maker) (let ((dE3725@name* (dE3714@remove-dups (dE31a2@syntax->datum dE3720@id*))) (dE3726@mk (gensym))) (dE3072@bless (list 'begin (list 'define dE3726@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote dE3725@name*)))) (list 'define-syntax dE371f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote dE3725@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote dE371f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax dE3721@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote dE3721@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote dE3725@name*)) (cons 'syntax-violation (cons (list 'quote dE3721@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons dE3726@mk '('(n* ...))))))))))))) dE3717@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3715@t))))))) (set! dE4b7a@dE308c@define-enumeration-macro dE308c@define-enumeration-macro) (set! dE308e@time-macro (lambda (dE372d@stx) (let ((dE372f@t dE372d@stx)) (let ((dE3731@ls/false (dE30bc@syntax-dispatch dE372f@t '(_ any)))) (if dE3731@ls/false (apply (lambda (dE3733@expr) (dE3072@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() dE3733@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) dE3731@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE372f@t)))))) (set! dE4b7b@dE308e@time-macro dE308e@time-macro) (set! dE3090@delay-macro (lambda (dE3735@stx) (let ((dE3737@t dE3735@stx)) (let ((dE3739@ls/false (dE30bc@syntax-dispatch dE3737@t '(_ any)))) (if dE3739@ls/false (apply (lambda (dE373b@expr) (dE3072@bless (list 'make-promise (list 'lambda '() dE373b@expr)))) dE3739@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3737@t)))))) (set! dE4b7c@dE3090@delay-macro dE3090@delay-macro) (set! dE3092@assert-macro (lambda (dE373d@stx) (let ((dE373f@t dE373d@stx)) (let ((dE3741@ls/false (dE30bc@syntax-dispatch dE373f@t '(_ any)))) (if dE3741@ls/false (apply (lambda (dE3743@expr) (let ((dE3745@pos (or (dE3194@expression-position dE373d@stx) (dE3194@expression-position dE3743@expr)))) (dE3072@bless (list 'let (list (list 'x dE3743@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote dE3743@expr) (list 'quote dE3745@pos))))))) dE3741@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE373f@t)))))) (set! dE4b7d@dE3092@assert-macro dE3092@assert-macro) (set! dE3094@endianness-macro (lambda (dE3747@stx) (let ((dE3749@t dE3747@stx)) (let ((dE374b@ls/false (dE30bc@syntax-dispatch dE3749@t '(_ any)))) (if dE374b@ls/false (apply (lambda (dE374d@e) (let ((dE374f@t (dE31a2@syntax->datum dE374d@e))) (if (memv dE374f@t '(little)) (dE3072@bless ''little) (if (memv dE374f@t '(big)) (dE3072@bless ''big) (dE319c@syntax-violation '#f '"endianness must be big or little" dE3747@stx))))) dE374b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3749@t)))))) (set! dE4b7e@dE3094@endianness-macro dE3094@endianness-macro) (set! dE3096@identifier-syntax-macro (lambda (dE3751@stx) (let ((dE3753@t dE3751@stx)) (let ((dE3755@ls/false (dE30bc@syntax-dispatch dE3753@t '(_ any)))) (if dE3755@ls/false (apply (lambda (dE3757@expr) (dE3072@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax dE3757@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax dE3757@expr) '((syntax (e* ...)))))))))) dE3755@ls/false) (let ((dE3759@t dE3753@t)) (let ((dE375b@ls/false (dE30bc@syntax-dispatch dE3759@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and dE375b@ls/false (apply (lambda (dE375d@id1 dE375e@expr1 dE375f@id2 dE3760@expr2 dE3761@expr3) (and (dE2eb5@id? dE375d@id1) (dE2eb5@id? dE375f@id2) (dE2eb5@id? dE3760@expr2))) dE375b@ls/false)) (apply (lambda (dE3767@id1 dE3768@expr1 dE3769@id2 dE376a@expr2 dE376b@expr3) (dE3072@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax dE3768@expr1)) (list (list 'set! 'id dE376a@expr2) (list 'syntax dE376b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons dE3768@expr1 '(e* ...))))))))) dE375b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3759@t))))))))) (set! dE4b7f@dE3096@identifier-syntax-macro dE3096@identifier-syntax-macro) (set! dE3098@do-macro (lambda (dE3771@stx) (letrec* ((dE3774@bind (lambda (dE378b@x) (let ((dE378d@t dE378b@x)) (let ((dE378f@ls/false (dE30bc@syntax-dispatch dE378d@t '(any any)))) (if dE378f@ls/false (apply (lambda (dE3791@x dE3792@init) (list dE3791@x dE3792@init dE3791@x)) dE378f@ls/false) (let ((dE3795@t dE378d@t)) (let ((dE3797@ls/false (dE30bc@syntax-dispatch dE3795@t '(any any any)))) (if dE3797@ls/false (apply (lambda (dE3799@x dE379a@init dE379b@step) (list dE3799@x dE379a@init dE379b@step)) dE3797@ls/false) (let ((dE379f@t dE3795@t)) (let ((dE37a1@ls/false (dE30bc@syntax-dispatch dE379f@t '_))) (if dE37a1@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid binding" dE3771@stx)) dE37a1@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE379f@t))))))))))))) (let ((dE3775@t dE3771@stx)) (let ((dE3777@ls/false (dE30bc@syntax-dispatch dE3775@t '(_ each-any (any . each-any) . each-any)))) (if dE3777@ls/false (apply (lambda (dE3779@binding* dE377a@test dE377b@expr* dE377c@command*) (let ((dE3781@t (map dE3774@bind dE3779@binding*))) (let ((dE3783@ls/false (dE30bc@syntax-dispatch dE3781@t '#(each (any any any))))) (if dE3783@ls/false (apply (lambda (dE3785@x* dE3786@init* dE3787@step*) (if (dE2ebd@valid-bound-ids? dE3785@x*) (dE3072@bless (list 'letrec (list (list 'loop (list 'lambda dE3785@x* (list 'if dE377a@test (cons 'begin (cons '(if #f #f) dE377b@expr*)) (cons 'begin (append dE377c@command* (list (cons 'loop dE3787@step*)))))))) (cons 'loop dE3786@init*))) (dE319c@syntax-violation '#f '"invalid bindings" dE3771@stx))) dE3783@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3781@t))))) dE3777@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3775@t))))))) (set! dE4b80@dE3098@do-macro dE3098@do-macro) (set! dE309a@let*-macro (lambda (dE37a3@stx) (let ((dE37a5@t dE37a3@stx)) (let ((dE37a7@ls/false (dE30bc@syntax-dispatch dE37a5@t '(_ #(each (any any)) any . each-any)))) (if (and dE37a7@ls/false (apply (lambda (dE37a9@lhs* dE37aa@rhs* dE37ab@b dE37ac@b*) (for-all dE2eb5@id? dE37a9@lhs*)) dE37a7@ls/false)) (apply (lambda (dE37b1@lhs* dE37b2@rhs* dE37b3@b dE37b4@b*) (dE3072@bless (let dE37bb@f ((dE37b9@x* (map list dE37b1@lhs* dE37b2@rhs*))) (if (null? dE37b9@x*) (cons 'let (cons '() (cons dE37b3@b dE37b4@b*))) (list 'let (list (car dE37b9@x*)) (dE37bb@f (cdr dE37b9@x*))))))) dE37a7@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE37a5@t)))))) (set! dE4b81@dE309a@let*-macro dE309a@let*-macro) (set! dE309c@or-macro (lambda (dE37bd@stx) (let ((dE37bf@t dE37bd@stx)) (let ((dE37c1@ls/false (dE30bc@syntax-dispatch dE37bf@t '(_)))) (if dE37c1@ls/false (apply (lambda () '#f) dE37c1@ls/false) (let ((dE37c3@t dE37bf@t)) (let ((dE37c5@ls/false (dE30bc@syntax-dispatch dE37c3@t '(_ any . each-any)))) (if dE37c5@ls/false (apply (lambda (dE37c7@e dE37c8@e*) (dE3072@bless (let dE37cf@f ((dE37cb@e dE37c7@e) (dE37cc@e* dE37c8@e*)) (if (null? dE37cc@e*) (list 'begin '#f dE37cb@e) (list 'let (list (list 't dE37cb@e)) (list 'if 't 't (dE37cf@f (car dE37cc@e*) (cdr dE37cc@e*)))))))) dE37c5@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE37c3@t))))))))) (set! dE4b82@dE309c@or-macro dE309c@or-macro) (set! dE309e@and-macro (lambda (dE37d1@stx) (let ((dE37d3@t dE37d1@stx)) (let ((dE37d5@ls/false (dE30bc@syntax-dispatch dE37d3@t '(_)))) (if dE37d5@ls/false (apply (lambda () '#t) dE37d5@ls/false) (let ((dE37d7@t dE37d3@t)) (let ((dE37d9@ls/false (dE30bc@syntax-dispatch dE37d7@t '(_ any . each-any)))) (if dE37d9@ls/false (apply (lambda (dE37db@e dE37dc@e*) (dE3072@bless (let dE37e3@f ((dE37df@e dE37db@e) (dE37e0@e* dE37dc@e*)) (if (null? dE37e0@e*) (list 'begin '#f dE37df@e) (cons 'if (cons dE37df@e (cons (dE37e3@f (car dE37e0@e*) (cdr dE37e0@e*)) '(#f)))))))) dE37d9@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE37d7@t))))))))) (set! dE4b83@dE309e@and-macro dE309e@and-macro) (set! dE30a0@cond-macro (lambda (dE37e5@stx) (let ((dE37e7@t dE37e5@stx)) (let ((dE37e9@ls/false (dE30bc@syntax-dispatch dE37e7@t '(_ any . each-any)))) (if dE37e9@ls/false (apply (lambda (dE37eb@cls dE37ec@cls*) (dE3072@bless (let dE37f3@f ((dE37ef@cls dE37eb@cls) (dE37f0@cls* dE37ec@cls*)) (if (null? dE37f0@cls*) (let ((dE37f5@t dE37ef@cls)) (let ((dE37f7@ls/false (dE30bc@syntax-dispatch dE37f5@t '(#(scheme-id else) any . each-any)))) (if dE37f7@ls/false (apply (lambda (dE37f9@e dE37fa@e*) (cons 'begin (cons dE37f9@e dE37fa@e*))) dE37f7@ls/false) (let ((dE37fd@t dE37f5@t)) (let ((dE37ff@ls/false (dE30bc@syntax-dispatch dE37fd@t '(any #(scheme-id =>) any)))) (if dE37ff@ls/false (apply (lambda (dE3801@e dE3802@p) (list 'let (list (list 't dE3801@e)) (list 'if 't (cons dE3802@p '(t))))) dE37ff@ls/false) (let ((dE3805@t dE37fd@t)) (let ((dE3807@ls/false (dE30bc@syntax-dispatch dE3805@t '(any)))) (if dE3807@ls/false (apply (lambda (dE3809@e) (cons 'or (cons dE3809@e '((if #f #f))))) dE3807@ls/false) (let ((dE380b@t dE3805@t)) (let ((dE380d@ls/false (dE30bc@syntax-dispatch dE380b@t '(any . each-any)))) (if dE380d@ls/false (apply (lambda (dE380f@e dE3810@e*) (list 'if dE380f@e (cons 'begin dE3810@e*))) dE380d@ls/false) (let ((dE3813@t dE380b@t)) (let ((dE3815@ls/false (dE30bc@syntax-dispatch dE3813@t '_))) (if dE3815@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid last clause" dE37e5@stx)) dE3815@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3813@t)))))))))))))))) (let ((dE3817@t dE37ef@cls)) (let ((dE3819@ls/false (dE30bc@syntax-dispatch dE3817@t '(#(scheme-id else) any . each-any)))) (if dE3819@ls/false (apply (lambda (dE381b@e dE381c@e*) (dE319c@syntax-violation '#f '"incorrect position of keyword else" dE37e5@stx)) dE3819@ls/false) (let ((dE381f@t dE3817@t)) (let ((dE3821@ls/false (dE30bc@syntax-dispatch dE381f@t '(any #(scheme-id =>) any)))) (if dE3821@ls/false (apply (lambda (dE3823@e dE3824@p) (list 'let (list (list 't dE3823@e)) (list 'if 't (cons dE3824@p '(t)) (dE37f3@f (car dE37f0@cls*) (cdr dE37f0@cls*))))) dE3821@ls/false) (let ((dE3827@t dE381f@t)) (let ((dE3829@ls/false (dE30bc@syntax-dispatch dE3827@t '(any)))) (if dE3829@ls/false (apply (lambda (dE382b@e) (list 'or dE382b@e (dE37f3@f (car dE37f0@cls*) (cdr dE37f0@cls*)))) dE3829@ls/false) (let ((dE382d@t dE3827@t)) (let ((dE382f@ls/false (dE30bc@syntax-dispatch dE382d@t '(any . each-any)))) (if dE382f@ls/false (apply (lambda (dE3831@e dE3832@e*) (list 'if dE3831@e (cons 'begin dE3832@e*) (dE37f3@f (car dE37f0@cls*) (cdr dE37f0@cls*)))) dE382f@ls/false) (let ((dE3835@t dE382d@t)) (let ((dE3837@ls/false (dE30bc@syntax-dispatch dE3835@t '_))) (if dE3837@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid last clause" dE37e5@stx)) dE3837@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3835@t)))))))))))))))))))) dE37e9@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE37e7@t)))))) (set! dE4b84@dE30a0@cond-macro dE30a0@cond-macro) (set! dE30a2@do-include (lambda (dE3839@stx dE383a@id dE383b@filename) (let ((dE383f@filename (dE2ec9@stx->datum dE383b@filename))) (begin (if (not (and (string? dE383f@filename) (dE2eb5@id? dE383a@id))) (dE319c@syntax-violation '#f '"invalid syntax" dE3839@stx) (void)) (cons (dE3072@bless 'begin) (with-input-from-file dE383f@filename (lambda () (let dE3843@f ((dE3841@ls '())) (let ((dE3845@x (dE29f7@dE28c7@read-annotated))) (if (eof-object? dE3845@x) (reverse dE3841@ls) (dE3843@f (cons (dE2e95@datum->stx dE383a@id dE3845@x) dE3841@ls)))))))))))) (set! dE4b85@dE30a2@do-include dE30a2@do-include) (set! dE30a4@include-macro (lambda (dE3847@e) (let ((dE3849@t dE3847@e)) (let ((dE384b@ls/false (dE30bc@syntax-dispatch dE3849@t '(any any)))) (if dE384b@ls/false (apply (lambda (dE384d@id dE384e@filename) (dE30a2@do-include dE3847@e dE384d@id dE384e@filename)) dE384b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3849@t)))))) (set! dE4b86@dE30a4@include-macro dE30a4@include-macro) (set! dE30a6@include-into-macro (lambda (dE3851@e) (let ((dE3853@t dE3851@e)) (let ((dE3855@ls/false (dE30bc@syntax-dispatch dE3853@t '(_ any any)))) (if dE3855@ls/false (apply (lambda (dE3857@id dE3858@filename) (dE30a2@do-include dE3851@e dE3857@id dE3858@filename)) dE3855@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3853@t)))))) (set! dE4b87@dE30a6@include-into-macro dE30a6@include-into-macro) (set! dE30a8@syntax-rules-macro (lambda (dE385b@e) (let ((dE385d@t dE385b@e)) (let ((dE385f@ls/false (dE30bc@syntax-dispatch dE385d@t '(_ each-any . #(each (any any)))))) (if dE385f@ls/false (apply (lambda (dE3861@lits dE3862@pat* dE3863@tmp*) (begin (dE30c2@verify-literals dE3861@lits dE385b@e) (dE3072@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons dE3861@lits (map (lambda (dE3867@pat dE3868@tmp) (let ((dE386b@t dE3867@pat)) (let ((dE386d@ls/false (dE30bc@syntax-dispatch dE386b@t '(_ . any)))) (if dE386d@ls/false (apply (lambda (dE386f@rest) (list (cons 'g dE386f@rest) (list 'syntax dE3868@tmp))) dE386d@ls/false) (let ((dE3871@t dE386b@t)) (let ((dE3873@ls/false (dE30bc@syntax-dispatch dE3871@t '_))) (if dE3873@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid syntax-rules pattern" dE385b@e dE3867@pat)) dE3873@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3871@t)))))))) dE3862@pat* dE3863@tmp*)))))))) dE385f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE385d@t)))))) (set! dE4b88@dE30a8@syntax-rules-macro dE30a8@syntax-rules-macro) (set! dE30aa@quasiquote-macro (letrec* ((dE3876@datum (lambda (dE3977@x) (list (dE3044@scheme-stx 'quote) (dE2e9d@mkstx dE3977@x '() '() '())))) (dE3892@quasicons* (lambda (dE396f@x dE3970@y) (let dE3975@f ((dE3973@x dE396f@x)) (if (null? dE3973@x) dE3970@y (dE3894@quasicons (car dE3973@x) (dE3975@f (cdr dE3973@x))))))) (dE3894@quasicons (lambda (dE3949@x dE394a@y) (let ((dE394d@t dE394a@y)) (let ((dE394f@ls/false (dE30bc@syntax-dispatch dE394d@t '(#(scheme-id quote) any)))) (if dE394f@ls/false (apply (lambda (dE3951@dy) (let ((dE3953@t dE3949@x)) (let ((dE3955@ls/false (dE30bc@syntax-dispatch dE3953@t '(#(scheme-id quote) any)))) (if dE3955@ls/false (apply (lambda (dE3957@dx) (list (dE3044@scheme-stx 'quote) (cons dE3957@dx dE3951@dy))) dE3955@ls/false) (let ((dE3959@t dE3953@t)) (let ((dE395b@ls/false (dE30bc@syntax-dispatch dE3959@t '_))) (if dE395b@ls/false (apply (lambda () (let ((dE395d@t dE3951@dy)) (let ((dE395f@ls/false (dE30bc@syntax-dispatch dE395d@t '()))) (if dE395f@ls/false (apply (lambda () (list (dE3044@scheme-stx 'list) dE3949@x)) dE395f@ls/false) (let ((dE3961@t dE395d@t)) (let ((dE3963@ls/false (dE30bc@syntax-dispatch dE3961@t '_))) (if dE3963@ls/false (apply (lambda () (list (dE3044@scheme-stx 'cons) dE3949@x dE394a@y)) dE3963@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3961@t)))))))) dE395b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3959@t)))))))) dE394f@ls/false) (let ((dE3965@t dE394d@t)) (let ((dE3967@ls/false (dE30bc@syntax-dispatch dE3965@t '(#(scheme-id list) . each-any)))) (if dE3967@ls/false (apply (lambda (dE3969@stuff) (cons* (dE3044@scheme-stx 'list) dE3949@x dE3969@stuff)) dE3967@ls/false) (let ((dE396b@t dE3965@t)) (let ((dE396d@ls/false (dE30bc@syntax-dispatch dE396b@t '_))) (if dE396d@ls/false (apply (lambda () (list (dE3044@scheme-stx 'cons) dE3949@x dE394a@y)) dE396d@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE396b@t)))))))))))) (dE3896@quasiappend (lambda (dE392f@x dE3930@y) (let ((dE3933@ls (let dE3937@f ((dE3935@x dE392f@x)) (if (null? dE3935@x) (let ((dE3939@t dE3930@y)) (let ((dE393b@ls/false (dE30bc@syntax-dispatch dE3939@t '(#(scheme-id quote) ())))) (if dE393b@ls/false (apply (lambda () '()) dE393b@ls/false) (let ((dE393d@t dE3939@t)) (let ((dE393f@ls/false (dE30bc@syntax-dispatch dE393d@t '_))) (if dE393f@ls/false (apply (lambda () (list dE3930@y)) dE393f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE393d@t))))))) (let ((dE3941@t (car dE3935@x))) (let ((dE3943@ls/false (dE30bc@syntax-dispatch dE3941@t '(#(scheme-id quote) ())))) (if dE3943@ls/false (apply (lambda () (dE3937@f (cdr dE3935@x))) dE3943@ls/false) (let ((dE3945@t dE3941@t)) (let ((dE3947@ls/false (dE30bc@syntax-dispatch dE3945@t '_))) (if dE3947@ls/false (apply (lambda () (cons (car dE3935@x) (dE3937@f (cdr dE3935@x)))) dE3947@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3945@t))))))))))) (if (null? dE3933@ls) (list (dE3044@scheme-stx 'quote) '()) (if (null? (cdr dE3933@ls)) (car dE3933@ls) (cons* (dE3044@scheme-stx 'append) dE3933@ls)))))) (dE3898@quasivector (lambda (dE38fd@x) (let ((dE38ff@pat-x dE38fd@x)) (let ((dE3901@t dE38ff@pat-x)) (let ((dE3903@ls/false (dE30bc@syntax-dispatch dE3901@t '(#(scheme-id quote) each-any)))) (if dE3903@ls/false (apply (lambda (dE3905@x*) (list (dE3044@scheme-stx 'quote) (list->vector dE3905@x*))) dE3903@ls/false) (let ((dE3907@t dE3901@t)) (let ((dE3909@ls/false (dE30bc@syntax-dispatch dE3907@t '_))) (if dE3909@ls/false (apply (lambda () (let dE3911@f ((dE390b@x dE38fd@x) (dE390c@k (lambda (dE390f@ls) (cons* (dE3044@scheme-stx 'vector) dE390f@ls)))) (let ((dE3913@t dE390b@x)) (let ((dE3915@ls/false (dE30bc@syntax-dispatch dE3913@t '(#(scheme-id quote) each-any)))) (if dE3915@ls/false (apply (lambda (dE3917@x*) (dE390c@k (map (lambda (dE3919@x) (list (dE3044@scheme-stx 'quote) dE3919@x)) dE3917@x*))) dE3915@ls/false) (let ((dE391b@t dE3913@t)) (let ((dE391d@ls/false (dE30bc@syntax-dispatch dE391b@t '(#(scheme-id list) . each-any)))) (if dE391d@ls/false (apply (lambda (dE391f@x*) (dE390c@k dE391f@x*)) dE391d@ls/false) (let ((dE3921@t dE391b@t)) (let ((dE3923@ls/false (dE30bc@syntax-dispatch dE3921@t '(#(scheme-id cons) any any)))) (if dE3923@ls/false (apply (lambda (dE3925@x dE3926@y) (dE3911@f dE3926@y (lambda (dE3929@ls) (dE390c@k (cons dE3925@x dE3929@ls))))) dE3923@ls/false) (let ((dE392b@t dE3921@t)) (let ((dE392d@ls/false (dE30bc@syntax-dispatch dE392b@t '_))) (if dE392d@ls/false (apply (lambda () (list (dE3044@scheme-stx 'list->vector) dE38ff@pat-x)) dE392d@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE392b@t))))))))))))))) dE3909@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3907@t)))))))))) (dE389a@vquasi (lambda (dE38db@p dE38dc@lev) (let ((dE38df@t dE38db@p)) (let ((dE38e1@ls/false (dE30bc@syntax-dispatch dE38df@t '(any . any)))) (if dE38e1@ls/false (apply (lambda (dE38e3@p dE38e4@q) (let ((dE38e7@t dE38e3@p)) (let ((dE38e9@ls/false (dE30bc@syntax-dispatch dE38e7@t '(#(scheme-id unquote) . each-any)))) (if dE38e9@ls/false (apply (lambda (dE38eb@p) (if (= dE38dc@lev '0) (dE3892@quasicons* dE38eb@p (dE389a@vquasi dE38e4@q dE38dc@lev)) (dE3894@quasicons (dE3894@quasicons (dE3876@datum 'unquote) (dE389c@quasi dE38eb@p (- dE38dc@lev '1))) (dE389a@vquasi dE38e4@q dE38dc@lev)))) dE38e9@ls/false) (let ((dE38ed@t dE38e7@t)) (let ((dE38ef@ls/false (dE30bc@syntax-dispatch dE38ed@t '(#(scheme-id unquote-splicing) . each-any)))) (if dE38ef@ls/false (apply (lambda (dE38f1@p) (if (= dE38dc@lev '0) (dE3896@quasiappend dE38f1@p (dE389a@vquasi dE38e4@q dE38dc@lev)) (dE3894@quasicons (dE3894@quasicons (dE3876@datum 'unquote-splicing) (dE389c@quasi dE38f1@p (- dE38dc@lev '1))) (dE389a@vquasi dE38e4@q dE38dc@lev)))) dE38ef@ls/false) (let ((dE38f3@t dE38ed@t)) (let ((dE38f5@ls/false (dE30bc@syntax-dispatch dE38f3@t 'any))) (if dE38f5@ls/false (apply (lambda (dE38f7@p) (dE3894@quasicons (dE389c@quasi dE38f7@p dE38dc@lev) (dE389a@vquasi dE38e4@q dE38dc@lev))) dE38f5@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE38f3@t))))))))))) dE38e1@ls/false) (let ((dE38f9@t dE38df@t)) (let ((dE38fb@ls/false (dE30bc@syntax-dispatch dE38f9@t '()))) (if dE38fb@ls/false (apply (lambda () (list (dE3044@scheme-stx 'quote) '())) dE38fb@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE38f9@t))))))))) (dE389c@quasi (lambda (dE38a5@p dE38a6@lev) (let ((dE38a9@t dE38a5@p)) (let ((dE38ab@ls/false (dE30bc@syntax-dispatch dE38a9@t '(#(scheme-id unquote) any)))) (if dE38ab@ls/false (apply (lambda (dE38ad@p) (if (= dE38a6@lev '0) dE38ad@p (dE3894@quasicons (dE3876@datum 'unquote) (dE389c@quasi (list dE38ad@p) (- dE38a6@lev '1))))) dE38ab@ls/false) (let ((dE38af@t dE38a9@t)) (let ((dE38b1@ls/false (dE30bc@syntax-dispatch dE38af@t '((#(scheme-id unquote) . each-any) . any)))) (if dE38b1@ls/false (apply (lambda (dE38b3@p dE38b4@q) (if (= dE38a6@lev '0) (dE3892@quasicons* dE38b3@p (dE389c@quasi dE38b4@q dE38a6@lev)) (dE3894@quasicons (dE3894@quasicons (dE3876@datum 'unquote) (dE389c@quasi dE38b3@p (- dE38a6@lev '1))) (dE389c@quasi dE38b4@q dE38a6@lev)))) dE38b1@ls/false) (let ((dE38b7@t dE38af@t)) (let ((dE38b9@ls/false (dE30bc@syntax-dispatch dE38b7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if dE38b9@ls/false (apply (lambda (dE38bb@p dE38bc@q) (if (= dE38a6@lev '0) (dE3896@quasiappend dE38bb@p (dE389c@quasi dE38bc@q dE38a6@lev)) (dE3894@quasicons (dE3894@quasicons (dE3876@datum 'unquote-splicing) (dE389c@quasi dE38bb@p (- dE38a6@lev '1))) (dE389c@quasi dE38bc@q dE38a6@lev)))) dE38b9@ls/false) (let ((dE38bf@t dE38b7@t)) (let ((dE38c1@ls/false (dE30bc@syntax-dispatch dE38bf@t '(#(scheme-id quasiquote) any)))) (if dE38c1@ls/false (apply (lambda (dE38c3@p) (dE3894@quasicons (dE3876@datum 'quasiquote) (dE389c@quasi (list dE38c3@p) (+ dE38a6@lev '1)))) dE38c1@ls/false) (let ((dE38c5@t dE38bf@t)) (let ((dE38c7@ls/false (dE30bc@syntax-dispatch dE38c5@t '(any . any)))) (if dE38c7@ls/false (apply (lambda (dE38c9@p dE38ca@q) (dE3894@quasicons (dE389c@quasi dE38c9@p dE38a6@lev) (dE389c@quasi dE38ca@q dE38a6@lev))) dE38c7@ls/false) (let ((dE38cd@t dE38c5@t)) (let ((dE38cf@ls/false (dE30bc@syntax-dispatch dE38cd@t '#(vector each-any)))) (if (and dE38cf@ls/false (apply (lambda (dE38d1@x) (not (dE2e81@stx? dE38d1@x))) dE38cf@ls/false)) (apply (lambda (dE38d3@x) (dE3898@quasivector (dE389a@vquasi dE38d3@x dE38a6@lev))) dE38cf@ls/false) (let ((dE38d5@t dE38cd@t)) (let ((dE38d7@ls/false (dE30bc@syntax-dispatch dE38d5@t 'any))) (if dE38d7@ls/false (apply (lambda (dE38d9@p) (list (dE3044@scheme-stx 'quote) dE38d9@p)) dE38d7@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE38d5@t))))))))))))))))))))))))) (lambda (dE389d@x) (let ((dE389f@t dE389d@x)) (let ((dE38a1@ls/false (dE30bc@syntax-dispatch dE389f@t '(_ any)))) (if dE38a1@ls/false (apply (lambda (dE38a3@e) (dE389c@quasi dE38a3@e '0)) dE38a1@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE389f@t))))))) (set! dE4b89@dE30aa@quasiquote-macro dE30aa@quasiquote-macro) (set! dE30ac@quasisyntax-macro (letrec* ((dE397a@quasi (lambda (dE3995@p dE3996@lev) (let ((dE3999@t dE3995@p)) (let ((dE399b@ls/false (dE30bc@syntax-dispatch dE3999@t '(#(scheme-id unsyntax) any)))) (if dE399b@ls/false (apply (lambda (dE399d@p) (if (= dE3996@lev '0) (let ((dE399f@g (gensym))) (values (list dE399f@g) (list dE399d@p) dE399f@g)) (call-with-values (lambda () (dE397a@quasi dE399d@p (- dE3996@lev '1))) (lambda (dE39a7@dE39a2 dE39a8@dE39a4 dE39a9@dE39a6) (let ((dE39ad@p dE39a9@dE39a6) (dE39ae@rhs* dE39a8@dE39a4) (dE39af@lhs* dE39a7@dE39a2)) (values dE39af@lhs* dE39ae@rhs* (list 'unsyntax dE39ad@p))))))) dE399b@ls/false) (let ((dE39b3@t dE3999@t)) (let ((dE39b5@ls/false (dE30bc@syntax-dispatch dE39b3@t '#(scheme-id unsyntax)))) (if (and dE39b5@ls/false (apply (lambda () (= dE3996@lev '0)) dE39b5@ls/false)) (apply (lambda () (dE319c@syntax-violation '#f '"incorrect use of unsyntax" dE3995@p)) dE39b5@ls/false) (let ((dE39b7@t dE39b3@t)) (let ((dE39b9@ls/false (dE30bc@syntax-dispatch dE39b7@t '((#(scheme-id unsyntax) . each-any) . any)))) (if dE39b9@ls/false (apply (lambda (dE39bb@p* dE39bc@q) (call-with-values (lambda () (dE397a@quasi dE39bc@q dE3996@lev)) (lambda (dE39c5@dE39c0 dE39c6@dE39c2 dE39c7@dE39c4) (let ((dE39cb@q dE39c7@dE39c4) (dE39cc@rhs* dE39c6@dE39c2) (dE39cd@lhs* dE39c5@dE39c0)) (if (= dE3996@lev '0) (let ((dE39d1@g* (map (lambda (dE39d3@x) (gensym)) dE39bb@p*))) (values (append dE39d1@g* dE39cd@lhs*) (append dE39bb@p* dE39cc@rhs*) (append dE39d1@g* dE39cb@q))) (call-with-values (lambda () (dE397a@quasi dE39bb@p* (- dE3996@lev '1))) (lambda (dE39db@dE39d6 dE39dc@dE39d8 dE39dd@dE39da) (let ((dE39e1@p* dE39dd@dE39da) (dE39e2@rhs2* dE39dc@dE39d8) (dE39e3@lhs2* dE39db@dE39d6)) (values (append dE39e3@lhs2* dE39cd@lhs*) (append dE39e2@rhs2* dE39cc@rhs*) (cons (cons 'unsyntax dE39e1@p*) dE39cb@q)))))))))) dE39b9@ls/false) (let ((dE39e7@t dE39b7@t)) (let ((dE39e9@ls/false (dE30bc@syntax-dispatch dE39e7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if dE39e9@ls/false (apply (lambda (dE39eb@p* dE39ec@q) (call-with-values (lambda () (dE397a@quasi dE39ec@q dE3996@lev)) (lambda (dE39f5@dE39f0 dE39f6@dE39f2 dE39f7@dE39f4) (let ((dE39fb@q dE39f7@dE39f4) (dE39fc@rhs* dE39f6@dE39f2) (dE39fd@lhs* dE39f5@dE39f0)) (if (= dE3996@lev '0) (let ((dE3a01@g* (map (lambda (dE3a03@x) (gensym)) dE39eb@p*))) (values (append (map (lambda (dE3a05@g) (cons dE3a05@g '(...))) dE3a01@g*) dE39fd@lhs*) (append dE39eb@p* dE39fc@rhs*) (append (apply append (map (lambda (dE3a07@g) (cons dE3a07@g '(...))) dE3a01@g*)) dE39fb@q))) (call-with-values (lambda () (dE397a@quasi dE39eb@p* (- dE3996@lev '1))) (lambda (dE3a0f@dE3a0a dE3a10@dE3a0c dE3a11@dE3a0e) (let ((dE3a15@p* dE3a11@dE3a0e) (dE3a16@rhs2* dE3a10@dE3a0c) (dE3a17@lhs2* dE3a0f@dE3a0a)) (values (append dE3a17@lhs2* dE39fd@lhs*) (append dE3a16@rhs2* dE39fc@rhs*) (cons (cons 'unsyntax-splicing dE3a15@p*) dE39fb@q)))))))))) dE39e9@ls/false) (let ((dE3a1b@t dE39e7@t)) (let ((dE3a1d@ls/false (dE30bc@syntax-dispatch dE3a1b@t '#(scheme-id unsyntax-splicing)))) (if (and dE3a1d@ls/false (apply (lambda () (= dE3996@lev '0)) dE3a1d@ls/false)) (apply (lambda () (dE319c@syntax-violation '#f '"incorrect use of unsyntax-splicing" dE3995@p)) dE3a1d@ls/false) (let ((dE3a1f@t dE3a1b@t)) (let ((dE3a21@ls/false (dE30bc@syntax-dispatch dE3a1f@t '(#(scheme-id quasisyntax) any)))) (if dE3a21@ls/false (apply (lambda (dE3a23@p) (call-with-values (lambda () (dE397a@quasi dE3a23@p (+ dE3996@lev '1))) (lambda (dE3a2b@dE3a26 dE3a2c@dE3a28 dE3a2d@dE3a2a) (let ((dE3a31@p dE3a2d@dE3a2a) (dE3a32@rhs* dE3a2c@dE3a28) (dE3a33@lhs* dE3a2b@dE3a26)) (values dE3a33@lhs* dE3a32@rhs* (list 'quasisyntax dE3a31@p)))))) dE3a21@ls/false) (let ((dE3a37@t dE3a1f@t)) (let ((dE3a39@ls/false (dE30bc@syntax-dispatch dE3a37@t '(any . any)))) (if dE3a39@ls/false (apply (lambda (dE3a3b@p dE3a3c@q) (call-with-values (lambda () (dE397a@quasi dE3a3b@p dE3996@lev)) (lambda (dE3a4b@dE3a40 dE3a4c@dE3a42 dE3a4d@dE3a44) (call-with-values (lambda () (dE397a@quasi dE3a3c@q dE3996@lev)) (lambda (dE3a51@dE3a46 dE3a52@dE3a48 dE3a53@dE3a4a) (let ((dE3a57@q dE3a53@dE3a4a) (dE3a58@rhs2* dE3a52@dE3a48) (dE3a59@lhs2* dE3a51@dE3a46) (dE3a5a@p dE3a4d@dE3a44) (dE3a5b@rhs* dE3a4c@dE3a42) (dE3a5c@lhs* dE3a4b@dE3a40)) (values (append dE3a59@lhs2* dE3a5c@lhs*) (append dE3a58@rhs2* dE3a5b@rhs*) (cons dE3a5a@p dE3a57@q)))))))) dE3a39@ls/false) (let ((dE3a63@t dE3a37@t)) (let ((dE3a65@ls/false (dE30bc@syntax-dispatch dE3a63@t '#(vector each-any)))) (if dE3a65@ls/false (apply (lambda (dE3a67@x*) (call-with-values (lambda () (dE397a@quasi dE3a67@x* dE3996@lev)) (lambda (dE3a6f@dE3a6a dE3a70@dE3a6c dE3a71@dE3a6e) (let ((dE3a75@x* dE3a71@dE3a6e) (dE3a76@rhs* dE3a70@dE3a6c) (dE3a77@lhs* dE3a6f@dE3a6a)) (values dE3a77@lhs* dE3a76@rhs* (list->vector dE3a75@x*)))))) dE3a65@ls/false) (let ((dE3a7b@t dE3a63@t)) (let ((dE3a7d@ls/false (dE30bc@syntax-dispatch dE3a7b@t '_))) (if dE3a7d@ls/false (apply (lambda () (values '() '() dE3995@p)) dE3a7d@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3a7b@t))))))))))))))))))))))))))))))) (lambda (dE397b@x) (let ((dE397d@t dE397b@x)) (let ((dE397f@ls/false (dE30bc@syntax-dispatch dE397d@t '(_ any)))) (if dE397f@ls/false (apply (lambda (dE3981@e) (call-with-values (lambda () (dE397a@quasi dE3981@e '0)) (lambda (dE3989@dE3984 dE398a@dE3986 dE398b@dE3988) (let ((dE398f@v dE398b@dE3988) (dE3990@rhs* dE398a@dE3986) (dE3991@lhs* dE3989@dE3984)) (dE3072@bless (list 'syntax-case (cons 'list dE3990@rhs*) '() (list dE3991@lhs* (list 'syntax dE398f@v)))))))) dE397f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE397d@t))))))) (set! dE4b8a@dE30ac@quasisyntax-macro dE30ac@quasisyntax-macro) (set! dE30ae@define-struct-macro (lambda (dE3a7f@stx) (dE319c@syntax-violation '#f '"define-struct not supported" dE3a7f@stx))) (set! dE4b8b@dE30ae@define-struct-macro dE30ae@define-struct-macro) (set! dE30b0@define-record-type-macro (lambda (dE3a81@x) (letrec* ((dE3a84@id (lambda (dE3c77@ctxt . dE3c79@str*) (dE31a0@datum->syntax dE3c77@ctxt (string->symbol (apply string-append (map (lambda (dE3c7b@x) (if (symbol? dE3c7b@x) (symbol->string dE3c7b@x) (if (string? dE3c7b@x) dE3c7b@x (assertion-violation 'define-record-type '"BUG")))) dE3c79@str*)))))) (dE3a86@get-record-name (lambda (dE3c65@spec) (let ((dE3c67@t dE3c65@spec)) (let ((dE3c69@ls/false (dE30bc@syntax-dispatch dE3c67@t '(any any any)))) (if dE3c69@ls/false (apply (lambda (dE3c6b@foo dE3c6c@make-foo dE3c6d@foo?) dE3c6b@foo) dE3c69@ls/false) (let ((dE3c71@t dE3c67@t)) (let ((dE3c73@ls/false (dE30bc@syntax-dispatch dE3c71@t 'any))) (if dE3c73@ls/false (apply (lambda (dE3c75@foo) dE3c75@foo) dE3c73@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3c71@t))))))))) (dE3a88@get-record-constructor-name (lambda (dE3c51@spec) (let ((dE3c53@t dE3c51@spec)) (let ((dE3c55@ls/false (dE30bc@syntax-dispatch dE3c53@t '(any any any)))) (if dE3c55@ls/false (apply (lambda (dE3c57@foo dE3c58@make-foo dE3c59@foo?) dE3c58@make-foo) dE3c55@ls/false) (let ((dE3c5d@t dE3c53@t)) (let ((dE3c5f@ls/false (dE30bc@syntax-dispatch dE3c5d@t 'any))) (if (and dE3c5f@ls/false (apply (lambda (dE3c61@foo) (dE2eb5@id? dE3c61@foo)) dE3c5f@ls/false)) (apply (lambda (dE3c63@foo) (dE3a84@id dE3c63@foo '"make-" (dE2ec9@stx->datum dE3c63@foo))) dE3c5f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3c5d@t))))))))) (dE3a8a@get-record-predicate-name (lambda (dE3c3d@spec) (let ((dE3c3f@t dE3c3d@spec)) (let ((dE3c41@ls/false (dE30bc@syntax-dispatch dE3c3f@t '(any any any)))) (if dE3c41@ls/false (apply (lambda (dE3c43@foo dE3c44@make-foo dE3c45@foo?) dE3c45@foo?) dE3c41@ls/false) (let ((dE3c49@t dE3c3f@t)) (let ((dE3c4b@ls/false (dE30bc@syntax-dispatch dE3c49@t 'any))) (if (and dE3c4b@ls/false (apply (lambda (dE3c4d@foo) (dE2eb5@id? dE3c4d@foo)) dE3c4b@ls/false)) (apply (lambda (dE3c4f@foo) (dE3a84@id dE3c4f@foo (dE2ec9@stx->datum dE3c4f@foo) '"?")) dE3c4b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3c49@t))))))))) (dE3a8c@get-clause (lambda (dE3c2b@id dE3c2c@ls) (let ((dE3c2f@t dE3c2c@ls)) (let ((dE3c31@ls/false (dE30bc@syntax-dispatch dE3c2f@t '()))) (if dE3c31@ls/false (apply (lambda () '#f) dE3c31@ls/false) (let ((dE3c33@t dE3c2f@t)) (let ((dE3c35@ls/false (dE30bc@syntax-dispatch dE3c33@t '((any . any) . any)))) (if dE3c35@ls/false (apply (lambda (dE3c37@x dE3c38@rest dE3c39@ls) (if (dE2ebb@free-id=? (dE3072@bless dE3c2b@id) dE3c37@x) (cons dE3c37@x dE3c38@rest) (dE3a8c@get-clause dE3c2b@id dE3c39@ls))) dE3c35@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3c33@t))))))))) (dE3a8e@foo-rtd-code (lambda (dE3bd9@name dE3bda@clause* dE3bdb@parent-rtd-code) (letrec* ((dE3be0@convert-field-spec* (lambda (dE3c11@ls) (list->vector (map (lambda (dE3c13@x) (let ((dE3c15@t dE3c13@x)) (let ((dE3c17@ls/false (dE30bc@syntax-dispatch dE3c15@t '(#(scheme-id mutable) any . any)))) (if dE3c17@ls/false (apply (lambda (dE3c19@name dE3c1a@rest) (list 'mutable dE3c19@name)) dE3c17@ls/false) (let ((dE3c1d@t dE3c15@t)) (let ((dE3c1f@ls/false (dE30bc@syntax-dispatch dE3c1d@t '(#(scheme-id immutable) any . any)))) (if dE3c1f@ls/false (apply (lambda (dE3c21@name dE3c22@rest) (list 'immutable dE3c21@name)) dE3c1f@ls/false) (let ((dE3c25@t dE3c1d@t)) (let ((dE3c27@ls/false (dE30bc@syntax-dispatch dE3c25@t 'any))) (if dE3c27@ls/false (apply (lambda (dE3c29@name) (list 'immutable dE3c29@name)) dE3c27@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3c25@t))))))))))) dE3c11@ls))))) (let ((dE3be1@uid-code (let ((dE3be9@t (dE3a8c@get-clause 'nongenerative dE3bda@clause*))) (let ((dE3beb@ls/false (dE30bc@syntax-dispatch dE3be9@t '(_)))) (if dE3beb@ls/false (apply (lambda () (list 'quote (gensym))) dE3beb@ls/false) (let ((dE3bed@t dE3be9@t)) (let ((dE3bef@ls/false (dE30bc@syntax-dispatch dE3bed@t '(_ any)))) (if dE3bef@ls/false (apply (lambda (dE3bf1@uid) (list 'quote dE3bf1@uid)) dE3bef@ls/false) (let ((dE3bf3@t dE3bed@t)) (let ((dE3bf5@ls/false (dE30bc@syntax-dispatch dE3bf3@t '_))) (if dE3bf5@ls/false (apply (lambda () '#f) dE3bf5@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3bf3@t))))))))))) (dE3be2@sealed? (let ((dE3bf7@t (dE3a8c@get-clause 'sealed dE3bda@clause*))) (let ((dE3bf9@ls/false (dE30bc@syntax-dispatch dE3bf7@t '(_ #(atom #t))))) (if dE3bf9@ls/false (apply (lambda () '#t) dE3bf9@ls/false) (let ((dE3bfb@t dE3bf7@t)) (let ((dE3bfd@ls/false (dE30bc@syntax-dispatch dE3bfb@t '_))) (if dE3bfd@ls/false (apply (lambda () '#f) dE3bfd@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3bfb@t)))))))) (dE3be3@opaque? (let ((dE3bff@t (dE3a8c@get-clause 'opaque dE3bda@clause*))) (let ((dE3c01@ls/false (dE30bc@syntax-dispatch dE3bff@t '(_ #(atom #t))))) (if dE3c01@ls/false (apply (lambda () '#t) dE3c01@ls/false) (let ((dE3c03@t dE3bff@t)) (let ((dE3c05@ls/false (dE30bc@syntax-dispatch dE3c03@t '_))) (if dE3c05@ls/false (apply (lambda () '#f) dE3c05@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3c03@t)))))))) (dE3be4@fields (let ((dE3c07@t (dE3a8c@get-clause 'fields dE3bda@clause*))) (let ((dE3c09@ls/false (dE30bc@syntax-dispatch dE3c07@t '(_ . each-any)))) (if dE3c09@ls/false (apply (lambda (dE3c0b@field-spec*) (list 'quote (dE3be0@convert-field-spec* dE3c0b@field-spec*))) dE3c09@ls/false) (let ((dE3c0d@t dE3c07@t)) (let ((dE3c0f@ls/false (dE30bc@syntax-dispatch dE3c0d@t '_))) (if dE3c0f@ls/false (apply (lambda () ''#()) dE3c0f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3c0d@t))))))))) (dE3072@bless (list 'make-record-type-descriptor (list 'quote dE3bd9@name) dE3bdb@parent-rtd-code dE3be1@uid-code dE3be2@sealed? dE3be3@opaque? dE3be4@fields)))))) (dE3a90@parent-rtd-code (lambda (dE3bc1@clause*) (let ((dE3bc3@t (dE3a8c@get-clause 'parent dE3bc1@clause*))) (let ((dE3bc5@ls/false (dE30bc@syntax-dispatch dE3bc3@t '(_ any)))) (if dE3bc5@ls/false (apply (lambda (dE3bc7@name) (list 'record-type-descriptor dE3bc7@name)) dE3bc5@ls/false) (let ((dE3bc9@t dE3bc3@t)) (let ((dE3bcb@ls/false (dE30bc@syntax-dispatch dE3bc9@t '#(atom #f)))) (if dE3bcb@ls/false (apply (lambda () (let ((dE3bcd@t (dE3a8c@get-clause 'parent-rtd dE3bc1@clause*))) (let ((dE3bcf@ls/false (dE30bc@syntax-dispatch dE3bcd@t '(_ any any)))) (if dE3bcf@ls/false (apply (lambda (dE3bd1@rtd dE3bd2@rcd) dE3bd1@rtd) dE3bcf@ls/false) (let ((dE3bd5@t dE3bcd@t)) (let ((dE3bd7@ls/false (dE30bc@syntax-dispatch dE3bd5@t '#(atom #f)))) (if dE3bd7@ls/false (apply (lambda () '#f) dE3bd7@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3bd5@t)))))))) dE3bcb@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3bc9@t))))))))) (dE3a92@parent-rcd-code (lambda (dE3ba9@clause*) (let ((dE3bab@t (dE3a8c@get-clause 'parent dE3ba9@clause*))) (let ((dE3bad@ls/false (dE30bc@syntax-dispatch dE3bab@t '(_ any)))) (if dE3bad@ls/false (apply (lambda (dE3baf@name) (list 'record-constructor-descriptor dE3baf@name)) dE3bad@ls/false) (let ((dE3bb1@t dE3bab@t)) (let ((dE3bb3@ls/false (dE30bc@syntax-dispatch dE3bb1@t '#(atom #f)))) (if dE3bb3@ls/false (apply (lambda () (let ((dE3bb5@t (dE3a8c@get-clause 'parent-rtd dE3ba9@clause*))) (let ((dE3bb7@ls/false (dE30bc@syntax-dispatch dE3bb5@t '(_ any any)))) (if dE3bb7@ls/false (apply (lambda (dE3bb9@rtd dE3bba@rcd) dE3bba@rcd) dE3bb7@ls/false) (let ((dE3bbd@t dE3bb5@t)) (let ((dE3bbf@ls/false (dE30bc@syntax-dispatch dE3bbd@t '#(atom #f)))) (if dE3bbf@ls/false (apply (lambda () '#f) dE3bbf@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3bbd@t)))))))) dE3bb3@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3bb1@t))))))))) (dE3a94@foo-rcd-code (lambda (dE3ba1@clause* dE3ba2@foo-rtd dE3ba3@protocol dE3ba4@parent-rcd-code) (list 'make-record-constructor-descriptor dE3ba2@foo-rtd dE3ba4@parent-rcd-code dE3ba3@protocol))) (dE3a96@get-protocol-code (lambda (dE3b95@clause*) (let ((dE3b97@t (dE3a8c@get-clause 'protocol dE3b95@clause*))) (let ((dE3b99@ls/false (dE30bc@syntax-dispatch dE3b97@t '(_ any)))) (if dE3b99@ls/false (apply (lambda (dE3b9b@expr) dE3b9b@expr) dE3b99@ls/false) (let ((dE3b9d@t dE3b97@t)) (let ((dE3b9f@ls/false (dE30bc@syntax-dispatch dE3b9d@t '_))) (if dE3b9f@ls/false (apply (lambda () '#f) dE3b9f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3b9d@t))))))))) (dE3a98@get-fields (lambda (dE3b83@clause*) (let ((dE3b85@t dE3b83@clause*)) (let ((dE3b87@ls/false (dE30bc@syntax-dispatch dE3b85@t '()))) (if dE3b87@ls/false (apply (lambda () '()) dE3b87@ls/false) (let ((dE3b89@t dE3b85@t)) (let ((dE3b8b@ls/false (dE30bc@syntax-dispatch dE3b89@t '((#(scheme-id fields) . each-any) . _)))) (if dE3b8b@ls/false (apply (lambda (dE3b8d@f*) dE3b8d@f*) dE3b8b@ls/false) (let ((dE3b8f@t dE3b89@t)) (let ((dE3b91@ls/false (dE30bc@syntax-dispatch dE3b8f@t '(_ . any)))) (if dE3b91@ls/false (apply (lambda (dE3b93@rest) (dE3a98@get-fields dE3b93@rest)) dE3b91@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3b8f@t)))))))))))) (dE3a9a@get-mutator-indices (lambda (dE3b6b@fields) (let dE3b71@f ((dE3b6d@fields dE3b6b@fields) (dE3b6e@i '0)) (let ((dE3b73@t dE3b6d@fields)) (let ((dE3b75@ls/false (dE30bc@syntax-dispatch dE3b73@t '()))) (if dE3b75@ls/false (apply (lambda () '()) dE3b75@ls/false) (let ((dE3b77@t dE3b73@t)) (let ((dE3b79@ls/false (dE30bc@syntax-dispatch dE3b77@t '((#(scheme-id mutable) . _) . any)))) (if dE3b79@ls/false (apply (lambda (dE3b7b@rest) (cons dE3b6e@i (dE3b71@f dE3b7b@rest (+ dE3b6e@i '1)))) dE3b79@ls/false) (let ((dE3b7d@t dE3b77@t)) (let ((dE3b7f@ls/false (dE30bc@syntax-dispatch dE3b7d@t '(_ . any)))) (if dE3b7f@ls/false (apply (lambda (dE3b81@rest) (dE3b71@f dE3b81@rest (+ dE3b6e@i '1))) dE3b7f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3b7d@t))))))))))))) (dE3a9c@get-mutators (lambda (dE3b41@foo dE3b42@fields) (letrec* ((dE3b46@gen-name (lambda (dE3b69@x) (dE31a0@datum->syntax dE3b41@foo (string->symbol (string-append (symbol->string (dE31a2@syntax->datum dE3b41@foo)) '"-" (symbol->string (dE31a2@syntax->datum dE3b69@x)) '"-set!")))))) (let dE3b49@f ((dE3b47@fields dE3b42@fields)) (let ((dE3b4b@t dE3b47@fields)) (let ((dE3b4d@ls/false (dE30bc@syntax-dispatch dE3b4b@t '()))) (if dE3b4d@ls/false (apply (lambda () '()) dE3b4d@ls/false) (let ((dE3b4f@t dE3b4b@t)) (let ((dE3b51@ls/false (dE30bc@syntax-dispatch dE3b4f@t '((#(scheme-id mutable) any any any) . any)))) (if dE3b51@ls/false (apply (lambda (dE3b53@name dE3b54@accessor dE3b55@mutator dE3b56@rest) (cons dE3b55@mutator (dE3b49@f dE3b56@rest))) dE3b51@ls/false) (let ((dE3b5b@t dE3b4f@t)) (let ((dE3b5d@ls/false (dE30bc@syntax-dispatch dE3b5b@t '((#(scheme-id mutable) any) . any)))) (if dE3b5d@ls/false (apply (lambda (dE3b5f@name dE3b60@rest) (cons (dE3b46@gen-name dE3b5f@name) (dE3b49@f dE3b60@rest))) dE3b5d@ls/false) (let ((dE3b63@t dE3b5b@t)) (let ((dE3b65@ls/false (dE30bc@syntax-dispatch dE3b63@t '(_ . any)))) (if dE3b65@ls/false (apply (lambda (dE3b67@rest) (dE3b49@f dE3b67@rest)) dE3b65@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3b63@t))))))))))))))))) (dE3a9e@get-accessors (lambda (dE3afd@foo dE3afe@fields) (letrec* ((dE3b02@gen-name (lambda (dE3b3f@x) (dE31a0@datum->syntax dE3afd@foo (string->symbol (string-append (symbol->string (dE31a2@syntax->datum dE3afd@foo)) '"-" (symbol->string (dE31a2@syntax->datum dE3b3f@x)))))))) (map (lambda (dE3b03@field) (let ((dE3b05@t dE3b03@field)) (let ((dE3b07@ls/false (dE30bc@syntax-dispatch dE3b05@t '(#(scheme-id mutable) any any any)))) (if (and dE3b07@ls/false (apply (lambda (dE3b09@name dE3b0a@accessor dE3b0b@mutator) (dE2eb5@id? dE3b0a@accessor)) dE3b07@ls/false)) (apply (lambda (dE3b0f@name dE3b10@accessor dE3b11@mutator) dE3b10@accessor) dE3b07@ls/false) (let ((dE3b15@t dE3b05@t)) (let ((dE3b17@ls/false (dE30bc@syntax-dispatch dE3b15@t '(#(scheme-id immutable) any any)))) (if (and dE3b17@ls/false (apply (lambda (dE3b19@name dE3b1a@accessor) (dE2eb5@id? dE3b1a@accessor)) dE3b17@ls/false)) (apply (lambda (dE3b1d@name dE3b1e@accessor) dE3b1e@accessor) dE3b17@ls/false) (let ((dE3b21@t dE3b15@t)) (let ((dE3b23@ls/false (dE30bc@syntax-dispatch dE3b21@t '(#(scheme-id mutable) any)))) (if (and dE3b23@ls/false (apply (lambda (dE3b25@name) (dE2eb5@id? dE3b25@name)) dE3b23@ls/false)) (apply (lambda (dE3b27@name) (dE3b02@gen-name dE3b27@name)) dE3b23@ls/false) (let ((dE3b29@t dE3b21@t)) (let ((dE3b2b@ls/false (dE30bc@syntax-dispatch dE3b29@t '(#(scheme-id immutable) any)))) (if (and dE3b2b@ls/false (apply (lambda (dE3b2d@name) (dE2eb5@id? dE3b2d@name)) dE3b2b@ls/false)) (apply (lambda (dE3b2f@name) (dE3b02@gen-name dE3b2f@name)) dE3b2b@ls/false) (let ((dE3b31@t dE3b29@t)) (let ((dE3b33@ls/false (dE30bc@syntax-dispatch dE3b31@t 'any))) (if (and dE3b33@ls/false (apply (lambda (dE3b35@name) (dE2eb5@id? dE3b35@name)) dE3b33@ls/false)) (apply (lambda (dE3b37@name) (dE3b02@gen-name dE3b37@name)) dE3b33@ls/false) (let ((dE3b39@t dE3b31@t)) (let ((dE3b3b@ls/false (dE30bc@syntax-dispatch dE3b39@t 'any))) (if dE3b3b@ls/false (apply (lambda (dE3b3d@others) (dE319c@syntax-violation '#f '"invalid field spec" dE3b03@field)) dE3b3b@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3b39@t)))))))))))))))))))) dE3afe@fields)))) (dE3aa0@enumerate (lambda (dE3af5@ls) (let dE3afb@f ((dE3af7@ls dE3af5@ls) (dE3af8@i '0)) (if (null? dE3af7@ls) '() (cons dE3af8@i (dE3afb@f (cdr dE3af7@ls) (+ dE3af8@i '1))))))) (dE3aa2@do-define-record (lambda (dE3acd@namespec dE3ace@clause*) (let ((dE3ad1@foo (dE3a86@get-record-name dE3acd@namespec))) (let ((dE3ad3@foo-rtd (gensym))) (let ((dE3ad5@foo-rcd (gensym))) (let ((dE3ad7@protocol (gensym))) (let ((dE3ad9@make-foo (dE3a88@get-record-constructor-name dE3acd@namespec))) (let ((dE3adb@fields (dE3a98@get-fields dE3ace@clause*))) (let ((dE3add@idx* (dE3aa0@enumerate dE3adb@fields))) (let ((dE3adf@foo-x* (dE3a9e@get-accessors dE3ad1@foo dE3adb@fields))) (let ((dE3ae1@set-foo-x!* (dE3a9c@get-mutators dE3ad1@foo dE3adb@fields))) (let ((dE3ae3@set-foo-idx* (dE3a9a@get-mutator-indices dE3adb@fields))) (let ((dE3ae5@foo? (dE3a8a@get-record-predicate-name dE3acd@namespec))) (let ((dE3ae7@foo-rtd-code (dE3a8e@foo-rtd-code dE3ad1@foo dE3ace@clause* (dE3a90@parent-rtd-code dE3ace@clause*)))) (let ((dE3ae9@foo-rcd-code (dE3a94@foo-rcd-code dE3ace@clause* dE3ad3@foo-rtd dE3ad7@protocol (dE3a92@parent-rcd-code dE3ace@clause*)))) (let ((dE3aeb@protocol-code (dE3a96@get-protocol-code dE3ace@clause*))) (dE3072@bless (cons 'begin (cons (list 'define dE3ad3@foo-rtd dE3ae7@foo-rtd-code) (cons (list 'define dE3ad7@protocol dE3aeb@protocol-code) (cons (list 'define dE3ad5@foo-rcd dE3ae9@foo-rcd-code) (cons (list 'define-syntax dE3ad1@foo (list 'list ''$rtd (list 'syntax dE3ad3@foo-rtd) (list 'syntax dE3ad5@foo-rcd))) (cons (list 'define dE3ae5@foo? (list 'record-predicate dE3ad3@foo-rtd)) (cons (list 'define dE3ad9@make-foo (list 'record-constructor dE3ad5@foo-rcd)) (append (map (lambda (dE3aed@foo-x dE3aee@idx) (list 'define dE3aed@foo-x (list 'record-accessor dE3ad3@foo-rtd dE3aee@idx))) dE3adf@foo-x* dE3add@idx*) (map (lambda (dE3af1@set-foo-x! dE3af2@idx) (list 'define dE3af1@set-foo-x! (list 'record-mutator dE3ad3@foo-rtd dE3af2@idx))) dE3ae1@set-foo-x!* dE3ae3@set-foo-idx*)))))))))))))))))))))))))) (dE3aa4@verify-clauses (lambda (dE3aad@x dE3aae@cls*) (letrec* ((dE3ab2@valid-kwds (map dE3072@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (dE3ab4@free-id-member? (lambda (dE3ac9@x dE3aca@ls) (and (pair? dE3aca@ls) (or (dE2ebb@free-id=? dE3ac9@x (car dE3aca@ls)) (dE3ab4@free-id-member? dE3ac9@x (cdr dE3aca@ls))))))) (let dE3ab9@f ((dE3ab5@cls* dE3aae@cls*) (dE3ab6@seen* '())) (if (not (null? dE3ab5@cls*)) (let ((dE3abb@t (car dE3ab5@cls*))) (let ((dE3abd@ls/false (dE30bc@syntax-dispatch dE3abb@t '(any . any)))) (if dE3abd@ls/false (apply (lambda (dE3abf@kwd dE3ac0@rest) (if (or (not (dE2eb5@id? dE3abf@kwd)) (not (dE3ab4@free-id-member? dE3abf@kwd dE3ab2@valid-kwds))) (dE319c@syntax-violation '#f '"not a valid define-record-type keyword" dE3abf@kwd) (if (dE2ec1@bound-id-member? dE3abf@kwd dE3ab6@seen*) (dE319c@syntax-violation '#f '"duplicate use of keyword " dE3aad@x dE3abf@kwd) (dE3ab9@f (cdr dE3ab5@cls*) (cons dE3abf@kwd dE3ab6@seen*))))) dE3abd@ls/false) (let ((dE3ac3@t dE3abb@t)) (let ((dE3ac5@ls/false (dE30bc@syntax-dispatch dE3ac3@t 'any))) (if dE3ac5@ls/false (apply (lambda (dE3ac7@cls) (dE319c@syntax-violation '#f '"malformed define-record-type clause" dE3ac7@cls)) dE3ac5@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3ac3@t))))))) (void))))))) (let ((dE3aa5@t dE3a81@x)) (let ((dE3aa7@ls/false (dE30bc@syntax-dispatch dE3aa5@t '(_ any . each-any)))) (if dE3aa7@ls/false (apply (lambda (dE3aa9@namespec dE3aaa@clause*) (begin (dE3aa4@verify-clauses dE3a81@x dE3aaa@clause*) (dE3aa2@do-define-record dE3aa9@namespec dE3aaa@clause*))) dE3aa7@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3aa5@t))))))) (set! dE4b8c@dE30b0@define-record-type-macro dE30b0@define-record-type-macro) (set! dE30b2@define-condition-type-macro (lambda (dE3c7d@x) (letrec* ((dE3c80@mkname (lambda (dE3cad@name dE3cae@suffix) (dE31a0@datum->syntax dE3cad@name (string->symbol (string-append (symbol->string (dE31a2@syntax->datum dE3cad@name)) dE3cae@suffix)))))) (let ((dE3c81@t dE3c7d@x)) (let ((dE3c83@ls/false (dE30bc@syntax-dispatch dE3c81@t '(any any any any any . #(each (any any)))))) (if (and dE3c83@ls/false (apply (lambda (dE3c85@ctxt dE3c86@name dE3c87@super dE3c88@constructor dE3c89@predicate dE3c8a@field* dE3c8b@accessor*) (and (dE2eb5@id? dE3c86@name) (dE2eb5@id? dE3c87@super) (dE2eb5@id? dE3c88@constructor) (dE2eb5@id? dE3c89@predicate) (for-all dE2eb5@id? dE3c8a@field*) (for-all dE2eb5@id? dE3c8b@accessor*))) dE3c83@ls/false)) (apply (lambda (dE3c93@ctxt dE3c94@name dE3c95@super dE3c96@constructor dE3c97@predicate dE3c98@field* dE3c99@accessor*) (let ((dE3ca1@aux-accessor* (map (lambda (dE3ca3@x) (gensym)) dE3c99@accessor*))) (dE3072@bless (cons 'begin (cons (cons 'define-record-type (cons (list dE3c94@name dE3c96@constructor (gensym)) (cons (list 'parent dE3c95@super) (cons (cons 'fields (map (lambda (dE3ca5@field dE3ca6@aux) (list 'immutable dE3ca5@field dE3ca6@aux)) dE3c98@field* dE3ca1@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define dE3c97@predicate (list 'condition-predicate (list 'record-type-descriptor dE3c94@name))) (map (lambda (dE3ca9@accessor dE3caa@aux) (list 'define dE3ca9@accessor (list 'condition-accessor (list 'record-type-descriptor dE3c94@name) dE3caa@aux))) dE3c99@accessor* dE3ca1@aux-accessor*))))))) dE3c83@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3c81@t))))))) (set! dE4b8d@dE30b2@define-condition-type-macro dE30b2@define-condition-type-macro) (set! dE30b4@incorrect-usage-macro (lambda (dE3cb1@e) (dE319c@syntax-violation '#f '"incorrect usage of auxiliary keyword" dE3cb1@e))) (set! dE4b8e@dE30b4@incorrect-usage-macro dE30b4@incorrect-usage-macro) (set! dE30b6@parameterize-macro (lambda (dE3cb3@e) (let ((dE3cb5@t dE3cb3@e)) (let ((dE3cb7@ls/false (dE30bc@syntax-dispatch dE3cb5@t '(_ () any . each-any)))) (if dE3cb7@ls/false (apply (lambda (dE3cb9@b dE3cba@b*) (dE3072@bless (cons 'let (cons '() (cons dE3cb9@b dE3cba@b*))))) dE3cb7@ls/false) (let ((dE3cbd@t dE3cb5@t)) (let ((dE3cbf@ls/false (dE30bc@syntax-dispatch dE3cbd@t '(_ #(each (any any)) any . each-any)))) (if dE3cbf@ls/false (apply (lambda (dE3cc1@olhs* dE3cc2@orhs* dE3cc3@b dE3cc4@b*) (let ((dE3cc9@lhs* (dE318a@generate-temporaries dE3cc1@olhs*)) (dE3cca@rhs* (dE318a@generate-temporaries dE3cc2@orhs*))) (dE3072@bless (cons (list 'lambda (append dE3cc9@lhs* dE3cca@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (dE3ccd@lhs dE3cce@rhs) (list 'let (list (list 't (list dE3ccd@lhs))) (list dE3ccd@lhs dE3cce@rhs) (cons 'set! (cons dE3cce@rhs '(t))))) dE3cc9@lhs* dE3cca@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons dE3cc3@b dE3cc4@b*))) '(swap)))))) (append dE3cc1@olhs* dE3cc2@orhs*))))) dE3cbf@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3cbd@t))))))))) (set! dE4b8f@dE30b6@parameterize-macro dE30b6@parameterize-macro) (set! dE30b8@foreign-call-transformer (lambda (dE3cd1@e dE3cd2@r dE3cd3@mr) (let ((dE3cd7@t dE3cd1@e)) (let ((dE3cd9@ls/false (dE30bc@syntax-dispatch dE3cd7@t '(_ any . each-any)))) (if dE3cd9@ls/false (apply (lambda (dE3cdb@name dE3cdc@arg*) (cons 'foreign-call (cons (dE30de@chi-expr dE3cdb@name dE3cd2@r dE3cd3@mr) (dE30da@chi-expr* dE3cdc@arg* dE3cd2@r dE3cd3@mr)))) dE3cd9@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3cd7@t)))))) (set! dE4b90@dE30b8@foreign-call-transformer dE30b8@foreign-call-transformer) (set! dE30ba@convert-pattern (lambda (dE3cdf@pattern dE3ce0@keys) (letrec* ((dE3ce4@cvt* (lambda (dE3d83@p* dE3d84@n dE3d85@ids) (if (null? dE3d83@p*) (values '() dE3d85@ids) (call-with-values (lambda () (dE3ce4@cvt* (cdr dE3d83@p*) dE3d84@n dE3d85@ids)) (lambda (dE3d8d@dE3d8a dE3d8e@dE3d8c) (let ((dE3d91@ids dE3d8e@dE3d8c) (dE3d92@y dE3d8d@dE3d8a)) (call-with-values (lambda () (dE3ce6@cvt (car dE3d83@p*) dE3d84@n dE3d91@ids)) (lambda (dE3d99@dE3d96 dE3d9a@dE3d98) (let ((dE3d9d@ids dE3d9a@dE3d98) (dE3d9e@x dE3d99@dE3d96)) (values (cons dE3d9e@x dE3d92@y) dE3d9d@ids)))))))))) (dE3ce6@cvt (lambda (dE3ce7@p dE3ce8@n dE3ce9@ids) (let ((dE3ced@t dE3ce7@p)) (let ((dE3cef@ls/false (dE30bc@syntax-dispatch dE3ced@t 'any))) (if (and dE3cef@ls/false (apply (lambda (dE3cf1@id) (dE2eb5@id? dE3cf1@id)) dE3cef@ls/false)) (apply (lambda (dE3cf3@id) (if (dE2ec1@bound-id-member? dE3ce7@p dE3ce0@keys) (values (vector 'free-id dE3ce7@p) dE3ce9@ids) (if (dE2ebb@free-id=? dE3ce7@p (dE3044@scheme-stx '_)) (values '_ dE3ce9@ids) (values 'any (cons (cons dE3ce7@p dE3ce8@n) dE3ce9@ids))))) dE3cef@ls/false) (let ((dE3cf5@t dE3ced@t)) (let ((dE3cf7@ls/false (dE30bc@syntax-dispatch dE3cf5@t '(any any)))) (if (and dE3cf7@ls/false (apply (lambda (dE3cf9@p dE3cfa@dots) (dE30be@ellipsis? dE3cfa@dots)) dE3cf7@ls/false)) (apply (lambda (dE3cfd@p dE3cfe@dots) (call-with-values (lambda () (dE3ce6@cvt dE3cfd@p (+ dE3ce8@n '1) dE3ce9@ids)) (lambda (dE3d05@dE3d02 dE3d06@dE3d04) (let ((dE3d09@ids dE3d06@dE3d04) (dE3d0a@p dE3d05@dE3d02)) (values (if (eq? dE3d0a@p 'any) 'each-any (vector 'each dE3d0a@p)) dE3d09@ids))))) dE3cf7@ls/false) (let ((dE3d0d@t dE3cf5@t)) (let ((dE3d0f@ls/false (dE30bc@syntax-dispatch dE3d0d@t '(any any . #(each+ any () any))))) (if (and dE3d0f@ls/false (apply (lambda (dE3d11@x dE3d12@dots dE3d13@ys dE3d14@z) (dE30be@ellipsis? dE3d12@dots)) dE3d0f@ls/false)) (apply (lambda (dE3d19@x dE3d1a@dots dE3d1b@ys dE3d1c@z) (call-with-values (lambda () (dE3ce6@cvt dE3d1c@z dE3ce8@n dE3ce9@ids)) (lambda (dE3d25@dE3d22 dE3d26@dE3d24) (let ((dE3d29@ids dE3d26@dE3d24) (dE3d2a@z dE3d25@dE3d22)) (call-with-values (lambda () (dE3ce4@cvt* dE3d1b@ys dE3ce8@n dE3d29@ids)) (lambda (dE3d31@dE3d2e dE3d32@dE3d30) (let ((dE3d35@ids dE3d32@dE3d30) (dE3d36@ys dE3d31@dE3d2e)) (call-with-values (lambda () (dE3ce6@cvt dE3d19@x (+ dE3ce8@n '1) dE3d35@ids)) (lambda (dE3d3d@dE3d3a dE3d3e@dE3d3c) (let ((dE3d41@ids dE3d3e@dE3d3c) (dE3d42@x dE3d3d@dE3d3a)) (values (vector 'each+ dE3d42@x (reverse dE3d36@ys) dE3d2a@z) dE3d41@ids))))))))))) dE3d0f@ls/false) (let ((dE3d45@t dE3d0d@t)) (let ((dE3d47@ls/false (dE30bc@syntax-dispatch dE3d45@t '(any . any)))) (if dE3d47@ls/false (apply (lambda (dE3d49@x dE3d4a@y) (call-with-values (lambda () (dE3ce6@cvt dE3d4a@y dE3ce8@n dE3ce9@ids)) (lambda (dE3d51@dE3d4e dE3d52@dE3d50) (let ((dE3d55@ids dE3d52@dE3d50) (dE3d56@y dE3d51@dE3d4e)) (call-with-values (lambda () (dE3ce6@cvt dE3d49@x dE3ce8@n dE3d55@ids)) (lambda (dE3d5d@dE3d5a dE3d5e@dE3d5c) (let ((dE3d61@ids dE3d5e@dE3d5c) (dE3d62@x dE3d5d@dE3d5a)) (values (cons dE3d62@x dE3d56@y) dE3d61@ids)))))))) dE3d47@ls/false) (let ((dE3d65@t dE3d45@t)) (let ((dE3d67@ls/false (dE30bc@syntax-dispatch dE3d65@t '()))) (if dE3d67@ls/false (apply (lambda () (values '() dE3ce9@ids)) dE3d67@ls/false) (let ((dE3d69@t dE3d65@t)) (let ((dE3d6b@ls/false (dE30bc@syntax-dispatch dE3d69@t '#(vector each-any)))) (if (and dE3d6b@ls/false (apply (lambda (dE3d6d@p) (not (dE2e81@stx? dE3d6d@p))) dE3d6b@ls/false)) (apply (lambda (dE3d6f@p) (call-with-values (lambda () (dE3ce6@cvt dE3d6f@p dE3ce8@n dE3ce9@ids)) (lambda (dE3d75@dE3d72 dE3d76@dE3d74) (let ((dE3d79@ids dE3d76@dE3d74) (dE3d7a@p dE3d75@dE3d72)) (values (vector 'vector dE3d7a@p) dE3d79@ids))))) dE3d6b@ls/false) (let ((dE3d7d@t dE3d69@t)) (let ((dE3d7f@ls/false (dE30bc@syntax-dispatch dE3d7d@t 'any))) (if dE3d7f@ls/false (apply (lambda (dE3d81@datum) (values (vector 'atom (dE2ec9@stx->datum dE3d81@datum)) dE3ce9@ids)) dE3d7f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3d7d@t))))))))))))))))))))))))) (dE3ce6@cvt dE3cdf@pattern '0 '())))) (set! dE4b91@dE30ba@convert-pattern dE30ba@convert-pattern) (set! dE30bc@syntax-dispatch (letrec* ((dE3da2@stx^ (lambda (dE3e7d@e dE3e7e@m* dE3e7f@s* dE3e80@ae*) (if (and (null? dE3e7e@m*) (null? dE3e7f@s*) (null? dE3e80@ae*)) dE3e7d@e (dE2e9d@mkstx dE3e7d@e dE3e7e@m* dE3e7f@s* dE3e80@ae*)))) (dE3da4@match-each (lambda (dE3e5d@e dE3e5e@p dE3e5f@m* dE3e60@s* dE3e61@ae*) (if (pair? dE3e5d@e) (let ((dE3e67@first (dE3db0@match (car dE3e5d@e) dE3e5e@p dE3e5f@m* dE3e60@s* dE3e61@ae* '()))) (and dE3e67@first (let ((dE3e69@rest (dE3da4@match-each (cdr dE3e5d@e) dE3e5e@p dE3e5f@m* dE3e60@s* dE3e61@ae*))) (and dE3e69@rest (cons dE3e67@first dE3e69@rest))))) (if (null? dE3e5d@e) '() (if (dE2e81@stx? dE3e5d@e) (and (not (dE2e3b@top-marked? dE3e5f@m*)) (call-with-values (lambda () (join-wraps dE3e5f@m* dE3e60@s* dE3e61@ae* dE3e5d@e)) (lambda (dE3e71@dE3e6c dE3e72@dE3e6e dE3e73@dE3e70) (let ((dE3e77@ae* dE3e73@dE3e70) (dE3e78@s* dE3e72@dE3e6e) (dE3e79@m* dE3e71@dE3e6c)) (dE3da4@match-each (dE2e83@stx-expr dE3e5d@e) dE3e5e@p dE3e79@m* dE3e78@s* dE3e77@ae*))))) (if (dE29f9@dE28cb@annotation? dE3e5d@e) (dE3da4@match-each (dE29fb@dE28cf@annotation-expression dE3e5d@e) dE3e5e@p dE3e5f@m* dE3e60@s* dE3e61@ae*) '#f)))))) (dE3da6@match-each+ (lambda (dE3e1d@e dE3e1e@x-pat dE3e1f@y-pat dE3e20@z-pat dE3e21@m* dE3e22@s* dE3e23@ae* dE3e24@r) (let dE3e35@f ((dE3e2d@e dE3e1d@e) (dE3e2e@m* dE3e21@m*) (dE3e2f@s* dE3e22@s*) (dE3e30@ae* dE3e23@ae*)) (if (pair? dE3e2d@e) (call-with-values (lambda () (dE3e35@f (cdr dE3e2d@e) dE3e2e@m* dE3e2f@s* dE3e30@ae*)) (lambda (dE3e3d@dE3e38 dE3e3e@dE3e3a dE3e3f@dE3e3c) (let ((dE3e43@r dE3e3f@dE3e3c) (dE3e44@y-pat dE3e3e@dE3e3a) (dE3e45@xr* dE3e3d@dE3e38)) (if dE3e43@r (if (null? dE3e44@y-pat) (let ((dE3e49@xr (dE3db0@match (car dE3e2d@e) dE3e1e@x-pat dE3e2e@m* dE3e2f@s* dE3e30@ae* '()))) (if dE3e49@xr (values (cons dE3e49@xr dE3e45@xr*) dE3e44@y-pat dE3e43@r) (values '#f '#f '#f))) (values '() (cdr dE3e44@y-pat) (dE3db0@match (car dE3e2d@e) (car dE3e44@y-pat) dE3e2e@m* dE3e2f@s* dE3e30@ae* dE3e43@r))) (values '#f '#f '#f))))) (if (dE2e81@stx? dE3e2d@e) (if (dE2e3b@top-marked? dE3e2e@m*) (values '() dE3e1f@y-pat (dE3db0@match dE3e2d@e dE3e20@z-pat dE3e2e@m* dE3e2f@s* dE3e30@ae* dE3e24@r)) (call-with-values (lambda () (join-wraps dE3e2e@m* dE3e2f@s* dE3e30@ae* dE3e2d@e)) (lambda (dE3e51@dE3e4c dE3e52@dE3e4e dE3e53@dE3e50) (let ((dE3e57@ae* dE3e53@dE3e50) (dE3e58@s* dE3e52@dE3e4e) (dE3e59@m* dE3e51@dE3e4c)) (dE3e35@f (dE2e83@stx-expr dE3e2d@e) dE3e59@m* dE3e58@s* dE3e57@ae*))))) (if (dE29f9@dE28cb@annotation? dE3e2d@e) (dE3e35@f (dE29fb@dE28cf@annotation-expression dE3e2d@e) dE3e2e@m* dE3e2f@s* dE3e30@ae*) (values '() dE3e1f@y-pat (dE3db0@match dE3e2d@e dE3e20@z-pat dE3e2e@m* dE3e2f@s* dE3e30@ae* dE3e24@r)))))))) (dE3da8@match-each-any (lambda (dE3e01@e dE3e02@m* dE3e03@s* dE3e04@ae*) (if (pair? dE3e01@e) (let ((dE3e09@l (dE3da8@match-each-any (cdr dE3e01@e) dE3e02@m* dE3e03@s* dE3e04@ae*))) (and dE3e09@l (cons (dE3da2@stx^ (car dE3e01@e) dE3e02@m* dE3e03@s* dE3e04@ae*) dE3e09@l))) (if (null? dE3e01@e) '() (if (dE2e81@stx? dE3e01@e) (and (not (dE2e3b@top-marked? dE3e02@m*)) (call-with-values (lambda () (join-wraps dE3e02@m* dE3e03@s* dE3e04@ae* dE3e01@e)) (lambda (dE3e11@dE3e0c dE3e12@dE3e0e dE3e13@dE3e10) (let ((dE3e17@ae* dE3e13@dE3e10) (dE3e18@s* dE3e12@dE3e0e) (dE3e19@m* dE3e11@dE3e0c)) (dE3da8@match-each-any (dE2e83@stx-expr dE3e01@e) dE3e19@m* dE3e18@s* dE3e17@ae*))))) (if (dE29f9@dE28cb@annotation? dE3e01@e) (dE3da8@match-each-any (dE29fb@dE28cf@annotation-expression dE3e01@e) dE3e02@m* dE3e03@s* dE3e04@ae*) '#f)))))) (dE3daa@match-empty (lambda (dE3dfb@p dE3dfc@r) (if (null? dE3dfb@p) dE3dfc@r (if (eq? dE3dfb@p '_) dE3dfc@r (if (eq? dE3dfb@p 'any) (cons '() dE3dfc@r) (if (pair? dE3dfb@p) (dE3daa@match-empty (car dE3dfb@p) (dE3daa@match-empty (cdr dE3dfb@p) dE3dfc@r)) (if (eq? dE3dfb@p 'each-any) (cons '() dE3dfc@r) (let ((dE3dff@t (vector-ref dE3dfb@p '0))) (if (memv dE3dff@t '(each)) (dE3daa@match-empty (vector-ref dE3dfb@p '1) dE3dfc@r) (if (memv dE3dff@t '(each+)) (dE3daa@match-empty (vector-ref dE3dfb@p '1) (dE3daa@match-empty (reverse (vector-ref dE3dfb@p '2)) (dE3daa@match-empty (vector-ref dE3dfb@p '3) dE3dfc@r))) (if (memv dE3dff@t '(free-id atom)) dE3dfc@r (if (memv dE3dff@t '(scheme-id atom)) dE3dfc@r (if (memv dE3dff@t '(vector)) (dE3daa@match-empty (vector-ref dE3dfb@p '1) dE3dfc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" dE3dfb@p)))))))))))))) (dE3dac@combine (lambda (dE3df7@r* dE3df8@r) (if (null? (car dE3df7@r*)) dE3df8@r (cons (map car dE3df7@r*) (dE3dac@combine (map cdr dE3df7@r*) dE3df8@r))))) (dE3dae@match* (lambda (dE3dd3@e dE3dd4@p dE3dd5@m* dE3dd6@s* dE3dd7@ae* dE3dd8@r) (if (null? dE3dd4@p) (and (null? dE3dd3@e) dE3dd8@r) (if (pair? dE3dd4@p) (and (pair? dE3dd3@e) (dE3db0@match (car dE3dd3@e) (car dE3dd4@p) dE3dd5@m* dE3dd6@s* dE3dd7@ae* (dE3db0@match (cdr dE3dd3@e) (cdr dE3dd4@p) dE3dd5@m* dE3dd6@s* dE3dd7@ae* dE3dd8@r))) (if (eq? dE3dd4@p 'each-any) (let ((dE3ddf@l (dE3da8@match-each-any dE3dd3@e dE3dd5@m* dE3dd6@s* dE3dd7@ae*))) (and dE3ddf@l (cons dE3ddf@l dE3dd8@r))) (let ((dE3de1@t (vector-ref dE3dd4@p '0))) (if (memv dE3de1@t '(each)) (if (null? dE3dd3@e) (dE3daa@match-empty (vector-ref dE3dd4@p '1) dE3dd8@r) (let ((dE3de3@r* (dE3da4@match-each dE3dd3@e (vector-ref dE3dd4@p '1) dE3dd5@m* dE3dd6@s* dE3dd7@ae*))) (and dE3de3@r* (dE3dac@combine dE3de3@r* dE3dd8@r)))) (if (memv dE3de1@t '(free-id)) (and (symbol? dE3dd3@e) (dE2e3b@top-marked? dE3dd5@m*) (dE2ebb@free-id=? (dE3da2@stx^ dE3dd3@e dE3dd5@m* dE3dd6@s* dE3dd7@ae*) (vector-ref dE3dd4@p '1)) dE3dd8@r) (if (memv dE3de1@t '(scheme-id)) (and (symbol? dE3dd3@e) (dE2e3b@top-marked? dE3dd5@m*) (dE2ebb@free-id=? (dE3da2@stx^ dE3dd3@e dE3dd5@m* dE3dd6@s* dE3dd7@ae*) (dE3044@scheme-stx (vector-ref dE3dd4@p '1))) dE3dd8@r) (if (memv dE3de1@t '(each+)) (call-with-values (lambda () (dE3da6@match-each+ dE3dd3@e (vector-ref dE3dd4@p '1) (vector-ref dE3dd4@p '2) (vector-ref dE3dd4@p '3) dE3dd5@m* dE3dd6@s* dE3dd7@ae* dE3dd8@r)) (lambda (dE3deb@dE3de6 dE3dec@dE3de8 dE3ded@dE3dea) (let ((dE3df1@r dE3ded@dE3dea) (dE3df2@y-pat dE3dec@dE3de8) (dE3df3@xr* dE3deb@dE3de6)) (and dE3df1@r (null? dE3df2@y-pat) (if (null? dE3df3@xr*) (dE3daa@match-empty (vector-ref dE3dd4@p '1) dE3df1@r) (dE3dac@combine dE3df3@xr* dE3df1@r)))))) (if (memv dE3de1@t '(atom)) (and (fast-equal? (vector-ref dE3dd4@p '1) (dE2ec7@strip dE3dd3@e dE3dd5@m*)) dE3dd8@r) (if (memv dE3de1@t '(vector)) (and (vector? dE3dd3@e) (dE3db0@match (vector->list dE3dd3@e) (vector-ref dE3dd4@p '1) dE3dd5@m* dE3dd6@s* dE3dd7@ae* dE3dd8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" dE3dd4@p))))))))))))) (dE3db0@match (lambda (dE3db5@e dE3db6@p dE3db7@m* dE3db8@s* dE3db9@ae* dE3dba@r) (if (not dE3dba@r) '#f (if (eq? dE3db6@p '_) dE3dba@r (if (eq? dE3db6@p 'any) (cons (dE3da2@stx^ dE3db5@e dE3db7@m* dE3db8@s* dE3db9@ae*) dE3dba@r) (if (dE2e81@stx? dE3db5@e) (and (not (dE2e3b@top-marked? dE3db7@m*)) (call-with-values (lambda () (join-wraps dE3db7@m* dE3db8@s* dE3db9@ae* dE3db5@e)) (lambda (dE3dc7@dE3dc2 dE3dc8@dE3dc4 dE3dc9@dE3dc6) (let ((dE3dcd@ae* dE3dc9@dE3dc6) (dE3dce@s* dE3dc8@dE3dc4) (dE3dcf@m* dE3dc7@dE3dc2)) (dE3db0@match (dE2e83@stx-expr dE3db5@e) dE3db6@p dE3dcf@m* dE3dce@s* dE3dcd@ae* dE3dba@r))))) (if (dE29f9@dE28cb@annotation? dE3db5@e) (dE3db0@match (dE29fb@dE28cf@annotation-expression dE3db5@e) dE3db6@p dE3db7@m* dE3db8@s* dE3db9@ae* dE3dba@r) (dE3dae@match* dE3db5@e dE3db6@p dE3db7@m* dE3db8@s* dE3db9@ae* dE3dba@r))))))))) (lambda (dE3db1@e dE3db2@p) (dE3db0@match dE3db1@e dE3db2@p '() '() '() '())))) (set! dE4b92@dE30bc@syntax-dispatch dE30bc@syntax-dispatch) (set! dE30be@ellipsis? (lambda (dE3e85@x) (and (dE2eb5@id? dE3e85@x) (dE2ebb@free-id=? dE3e85@x (dE3044@scheme-stx '...))))) (set! dE4b93@dE30be@ellipsis? dE30be@ellipsis?) (set! dE30c0@underscore? (lambda (dE3e87@x) (and (dE2eb5@id? dE3e87@x) (dE2ebb@free-id=? dE3e87@x (dE3044@scheme-stx '_))))) (set! dE4b94@dE30c0@underscore? dE30c0@underscore?) (set! dE30c2@verify-literals (lambda (dE3e89@lits dE3e8a@expr) (for-each (lambda (dE3e8d@x) (if (or (not (dE2eb5@id? dE3e8d@x)) (dE30be@ellipsis? dE3e8d@x) (dE30c0@underscore? dE3e8d@x)) (dE319c@syntax-violation '#f '"invalid literal" dE3e8a@expr dE3e8d@x) (void))) dE3e89@lits))) (set! dE4b95@dE30c2@verify-literals dE30c2@verify-literals) (set! dE30c4@syntax-case-transformer (letrec* ((dE3e90@build-dispatch-call (lambda (dE3f01@pvars dE3f02@expr dE3f03@y dE3f04@r dE3f05@mr) (let ((dE3f0b@ids (map car dE3f01@pvars)) (dE3f0c@levels (map cdr dE3f01@pvars))) (let ((dE3f0f@labels (map dE2e41@gen-label dE3f0b@ids)) (dE3f10@new-vars (map dE2e3d@gen-lexical dE3f0b@ids))) (let ((dE3f13@body (dE30de@chi-expr (dE2ea1@add-subst (dE2e75@make-full-rib dE3f0b@ids dE3f0f@labels) dE3f02@expr) (append (map (lambda (dE3f15@label dE3f16@var dE3f17@level) (cons dE3f15@label (dE2ecf@make-binding 'syntax (cons dE3f16@var dE3f17@level)))) dE3f0f@labels dE3f10@new-vars (map cdr dE3f01@pvars)) dE3f04@r) dE3f05@mr))) (list '(primitive apply) (dE2e18@dE2d4a@build-lambda '#f dE3f10@new-vars dE3f13@body) dE3f03@y)))))) (dE3e92@invalid-ids-error (lambda (dE3ef5@id* dE3ef6@e dE3ef7@class) (let dE3eff@find ((dE3efb@id* dE3ef5@id*) (dE3efc@ok* '())) (if (null? dE3efb@id*) (dE319c@syntax-violation '#f '"invalid syntax" dE3ef6@e) (if (dE2eb5@id? (car dE3efb@id*)) (if (dE2ec1@bound-id-member? (car dE3efb@id*) dE3efc@ok*) (dE3198@syntax-error (car dE3efb@id*) '"duplicate " dE3ef7@class) (dE3eff@find (cdr dE3efb@id*) (cons (car dE3efb@id*) dE3efc@ok*))) (dE3198@syntax-error (car dE3efb@id*) '"invalid " dE3ef7@class)))))) (dE3e94@gen-clause (lambda (dE3ecd@x dE3ece@keys dE3ecf@clauses dE3ed0@r dE3ed1@mr dE3ed2@pat dE3ed3@fender dE3ed4@expr) (call-with-values (lambda () (dE30ba@convert-pattern dE3ed2@pat dE3ece@keys)) (lambda (dE3ee1@dE3ede dE3ee2@dE3ee0) (let ((dE3ee5@pvars dE3ee2@dE3ee0) (dE3ee6@p dE3ee1@dE3ede)) (if (not (dE2ebf@distinct-bound-ids? (map car dE3ee5@pvars))) (dE3e92@invalid-ids-error (map car dE3ee5@pvars) dE3ed2@pat '"pattern variable") (if (not (for-all (lambda (dE3ee9@x) (not (dE30be@ellipsis? (car dE3ee9@x)))) dE3ee5@pvars)) (dE319c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" dE3ed2@pat) (let ((dE3eeb@y (dE2e3d@gen-lexical 'tmp))) (let ((dE3eed@test (if (eq? dE3ed3@fender '#t) dE3eeb@y (let ((dE3eef@call (dE3e90@build-dispatch-call dE3ee5@pvars dE3ed3@fender dE3eeb@y dE3ed0@r dE3ed1@mr))) (list 'if dE3eeb@y dE3eef@call (list 'quote '#f)))))) (let ((dE3ef1@conseq (dE3e90@build-dispatch-call dE3ee5@pvars dE3ed4@expr dE3eeb@y dE3ed0@r dE3ed1@mr))) (let ((dE3ef3@altern (dE3e96@gen-syntax-case dE3ecd@x dE3ece@keys dE3ecf@clauses dE3ed0@r dE3ed1@mr))) (list (dE2e18@dE2d4a@build-lambda '#f (list dE3eeb@y) (list 'if dE3eed@test dE3ef1@conseq dE3ef3@altern)) (list '(primitive syntax-dispatch) dE3ecd@x (list 'quote dE3ee6@p)))))))))))))) (dE3e96@gen-syntax-case (lambda (dE3eab@x dE3eac@keys dE3ead@clauses dE3eae@r dE3eaf@mr) (if (null? dE3ead@clauses) (list '(primitive syntax-error) dE3eab@x) (let ((dE3eb5@t (car dE3ead@clauses))) (let ((dE3eb7@ls/false (dE30bc@syntax-dispatch dE3eb5@t '(any any)))) (if dE3eb7@ls/false (apply (lambda (dE3eb9@pat dE3eba@expr) (if (and (dE2eb5@id? dE3eb9@pat) (not (dE2ec1@bound-id-member? dE3eb9@pat dE3eac@keys)) (not (dE30be@ellipsis? dE3eb9@pat))) (if (dE2ebb@free-id=? dE3eb9@pat (dE3044@scheme-stx '_)) (dE30de@chi-expr dE3eba@expr dE3eae@r dE3eaf@mr) (let ((dE3ebd@lab (dE2e41@gen-label dE3eb9@pat)) (dE3ebe@lex (dE2e3d@gen-lexical dE3eb9@pat))) (let ((dE3ec1@body (dE30de@chi-expr (dE2ea1@add-subst (dE2e75@make-full-rib (list dE3eb9@pat) (list dE3ebd@lab)) dE3eba@expr) (cons (cons dE3ebd@lab (dE2ecf@make-binding 'syntax (cons dE3ebe@lex '0))) dE3eae@r) dE3eaf@mr))) (list (dE2e18@dE2d4a@build-lambda '#f (list dE3ebe@lex) dE3ec1@body) dE3eab@x)))) (dE3e94@gen-clause dE3eab@x dE3eac@keys (cdr dE3ead@clauses) dE3eae@r dE3eaf@mr dE3eb9@pat '#t dE3eba@expr))) dE3eb7@ls/false) (let ((dE3ec3@t dE3eb5@t)) (let ((dE3ec5@ls/false (dE30bc@syntax-dispatch dE3ec3@t '(any any any)))) (if dE3ec5@ls/false (apply (lambda (dE3ec7@pat dE3ec8@fender dE3ec9@expr) (dE3e94@gen-clause dE3eab@x dE3eac@keys (cdr dE3ead@clauses) dE3eae@r dE3eaf@mr dE3ec7@pat dE3ec8@fender dE3ec9@expr)) dE3ec5@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3ec3@t))))))))))) (lambda (dE3e97@e dE3e98@r dE3e99@mr) (let ((dE3e9d@t dE3e97@e)) (let ((dE3e9f@ls/false (dE30bc@syntax-dispatch dE3e9d@t '(_ any each-any . each-any)))) (if dE3e9f@ls/false (apply (lambda (dE3ea1@expr dE3ea2@keys dE3ea3@clauses) (begin (dE30c2@verify-literals dE3ea2@keys dE3e97@e) (let ((dE3ea7@x (dE2e3d@gen-lexical 'tmp))) (let ((dE3ea9@body (dE3e96@gen-syntax-case dE3ea7@x dE3ea2@keys dE3ea3@clauses dE3e98@r dE3e99@mr))) (list (dE2e18@dE2d4a@build-lambda '#f (list dE3ea7@x) dE3ea9@body) (dE30de@chi-expr dE3ea1@expr dE3e98@r dE3e99@mr)))))) dE3e9f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3e9d@t))))))) (set! dE4b96@dE30c4@syntax-case-transformer dE30c4@syntax-case-transformer) (set! dE30c6@ellipsis-map (lambda (dE3f1b@proc dE3f1c@ls . dE3f1f@ls*) (letrec* ((dE3f22@who '...)) (begin (if (not (list? dE3f1c@ls)) (assertion-violation dE3f22@who '"not a list" dE3f1c@ls) (void)) (if (not (null? dE3f1f@ls*)) (let ((dE3f23@n (length dE3f1c@ls))) (for-each (lambda (dE3f25@x) (begin (if (not (list? dE3f25@x)) (assertion-violation dE3f22@who '"not a list" dE3f25@x) (void)) (if (not (= (length dE3f25@x) dE3f23@n)) (assertion-violation dE3f22@who '"length mismatch" dE3f1c@ls dE3f25@x) (void)))) dE3f1f@ls*)) (void)) (apply map dE3f1b@proc dE3f1c@ls dE3f1f@ls*))))) (set! dE4b97@dE30c6@ellipsis-map dE30c6@ellipsis-map) (set! dE30c8@syntax-transformer (letrec* ((dE3f28@gen-syntax (lambda (dE3f9f@src dE3fa0@e dE3fa1@r dE3fa2@maps dE3fa3@ellipsis? dE3fa4@vec?) (let ((dE3fab@t dE3fa0@e)) (let ((dE3fad@ls/false (dE30bc@syntax-dispatch dE3fab@t 'any))) (if (and dE3fad@ls/false (apply (lambda (dE3faf@dots) (dE3fa3@ellipsis? dE3faf@dots)) dE3fad@ls/false)) (apply (lambda (dE3fb1@dots) (dE319c@syntax-violation '#f '"misplaced ellipsis in syntax form" dE3f9f@src)) dE3fad@ls/false) (let ((dE3fb3@t dE3fab@t)) (let ((dE3fb5@ls/false (dE30bc@syntax-dispatch dE3fb3@t 'any))) (if (and dE3fb5@ls/false (apply (lambda (dE3fb7@id) (dE2eb5@id? dE3fb7@id)) dE3fb5@ls/false)) (apply (lambda (dE3fb9@id) (let ((dE3fbb@label (dE2ecb@id->label dE3fa0@e))) (let ((dE3fbd@b (dE2ecd@label->binding dE3fbb@label dE3fa1@r))) (if (eq? (dE2ed1@binding-type dE3fbd@b) 'syntax) (call-with-values (lambda () (let ((dE3fc3@var.lev (dE2ed3@binding-value dE3fbd@b))) (dE3f2a@gen-ref dE3f9f@src (car dE3fc3@var.lev) (cdr dE3fc3@var.lev) dE3fa2@maps))) (lambda (dE3fc5@dE3fc0 dE3fc6@dE3fc2) (let ((dE3fc9@maps dE3fc6@dE3fc2) (dE3fca@var dE3fc5@dE3fc0)) (values (list 'ref dE3fca@var) dE3fc9@maps)))) (values (list 'quote dE3fa0@e) dE3fa2@maps))))) dE3fb5@ls/false) (let ((dE3fcd@t dE3fb3@t)) (let ((dE3fcf@ls/false (dE30bc@syntax-dispatch dE3fcd@t '(any any)))) (if (and dE3fcf@ls/false (apply (lambda (dE3fd1@dots dE3fd2@e) (dE3fa3@ellipsis? dE3fd1@dots)) dE3fcf@ls/false)) (apply (lambda (dE3fd5@dots dE3fd6@e) (if dE3fa4@vec? (dE319c@syntax-violation '#f '"misplaced ellipsis in syntax form" dE3f9f@src) (dE3f28@gen-syntax dE3f9f@src dE3fd6@e dE3fa1@r dE3fa2@maps (lambda (dE3fd9@x) '#f) '#f))) dE3fcf@ls/false) (let ((dE3fdb@t dE3fcd@t)) (let ((dE3fdd@ls/false (dE30bc@syntax-dispatch dE3fdb@t '(any any . any)))) (if (and dE3fdd@ls/false (apply (lambda (dE3fdf@x dE3fe0@dots dE3fe1@y) (dE3fa3@ellipsis? dE3fe0@dots)) dE3fdd@ls/false)) (apply (lambda (dE3fe5@x dE3fe6@dots dE3fe7@y) (let dE3ffd@f ((dE3feb@y dE3fe7@y) (dE3fec@k (lambda (dE3fef@maps) (call-with-values (lambda () (dE3f28@gen-syntax dE3f9f@src dE3fe5@x dE3fa1@r (cons '() dE3fef@maps) dE3fa3@ellipsis? '#f)) (lambda (dE3ff5@dE3ff2 dE3ff6@dE3ff4) (let ((dE3ff9@maps dE3ff6@dE3ff4) (dE3ffa@x dE3ff5@dE3ff2)) (if (null? (car dE3ff9@maps)) (dE319c@syntax-violation '#f '"extra ellipsis in syntax form" dE3f9f@src) (values (dE3f30@gen-map dE3ffa@x (car dE3ff9@maps)) (cdr dE3ff9@maps))))))))) (let ((dE3fff@t dE3feb@y)) (let ((dE4001@ls/false (dE30bc@syntax-dispatch dE3fff@t '()))) (if dE4001@ls/false (apply (lambda () (dE3fec@k dE3fa2@maps)) dE4001@ls/false) (let ((dE4003@t dE3fff@t)) (let ((dE4005@ls/false (dE30bc@syntax-dispatch dE4003@t '(any . any)))) (if (and dE4005@ls/false (apply (lambda (dE4007@dots dE4008@y) (dE3fa3@ellipsis? dE4007@dots)) dE4005@ls/false)) (apply (lambda (dE400b@dots dE400c@y) (dE3ffd@f dE400c@y (lambda (dE400f@maps) (call-with-values (lambda () (dE3fec@k (cons '() dE400f@maps))) (lambda (dE4015@dE4012 dE4016@dE4014) (let ((dE4019@maps dE4016@dE4014) (dE401a@x dE4015@dE4012)) (if (null? (car dE4019@maps)) (dE319c@syntax-violation '#f '"extra ellipsis in syntax form" dE3f9f@src) (values (dE3f2e@gen-mappend dE401a@x (car dE4019@maps)) (cdr dE4019@maps))))))))) dE4005@ls/false) (let ((dE401d@t dE4003@t)) (let ((dE401f@ls/false (dE30bc@syntax-dispatch dE401d@t '_))) (if dE401f@ls/false (apply (lambda () (call-with-values (lambda () (dE3f28@gen-syntax dE3f9f@src dE3feb@y dE3fa1@r dE3fa2@maps dE3fa3@ellipsis? dE3fa4@vec?)) (lambda (dE4025@dE4022 dE4026@dE4024) (let ((dE4029@maps dE4026@dE4024) (dE402a@y dE4025@dE4022)) (call-with-values (lambda () (dE3fec@k dE4029@maps)) (lambda (dE4031@dE402e dE4032@dE4030) (let ((dE4035@maps dE4032@dE4030) (dE4036@x dE4031@dE402e)) (values (dE3f2c@gen-append dE4036@x dE402a@y) dE4035@maps)))))))) dE401f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE401d@t)))))))))))) dE3fdd@ls/false) (let ((dE4039@t dE3fdb@t)) (let ((dE403b@ls/false (dE30bc@syntax-dispatch dE4039@t '(any . any)))) (if dE403b@ls/false (apply (lambda (dE403d@x dE403e@y) (call-with-values (lambda () (dE3f28@gen-syntax dE3f9f@src dE403d@x dE3fa1@r dE3fa2@maps dE3fa3@ellipsis? '#f)) (lambda (dE4045@dE4042 dE4046@dE4044) (let ((dE4049@maps dE4046@dE4044) (dE404a@xnew dE4045@dE4042)) (call-with-values (lambda () (dE3f28@gen-syntax dE3f9f@src dE403e@y dE3fa1@r dE4049@maps dE3fa3@ellipsis? dE3fa4@vec?)) (lambda (dE4051@dE404e dE4052@dE4050) (let ((dE4055@maps dE4052@dE4050) (dE4056@ynew dE4051@dE404e)) (values (dE3f32@gen-cons dE3fa0@e dE403d@x dE403e@y dE404a@xnew dE4056@ynew) dE4055@maps)))))))) dE403b@ls/false) (let ((dE4059@t dE4039@t)) (let ((dE405b@ls/false (dE30bc@syntax-dispatch dE4059@t '#(vector each-any)))) (if dE405b@ls/false (apply (lambda (dE405d@ls) (call-with-values (lambda () (dE3f28@gen-syntax dE3f9f@src dE405d@ls dE3fa1@r dE3fa2@maps dE3fa3@ellipsis? '#t)) (lambda (dE4063@dE4060 dE4064@dE4062) (let ((dE4067@maps dE4064@dE4062) (dE4068@lsnew dE4063@dE4060)) (values (dE3f34@gen-vector dE3fa0@e dE405d@ls dE4068@lsnew) dE4067@maps))))) dE405b@ls/false) (let ((dE406b@t dE4059@t)) (let ((dE406d@ls/false (dE30bc@syntax-dispatch dE406b@t '_))) (if dE406d@ls/false (apply (lambda () (values (list 'quote dE3fa0@e) dE3fa2@maps)) dE406d@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE406b@t)))))))))))))))))))))))) (dE3f2a@gen-ref (lambda (dE3f85@src dE3f86@var dE3f87@level dE3f88@maps) (if (= dE3f87@level '0) (values dE3f86@var dE3f88@maps) (if (null? dE3f88@maps) (dE319c@syntax-violation '#f '"missing ellipsis in syntax form" dE3f85@src) (call-with-values (lambda () (dE3f2a@gen-ref dE3f85@src dE3f86@var (- dE3f87@level '1) (cdr dE3f88@maps))) (lambda (dE3f91@dE3f8e dE3f92@dE3f90) (let ((dE3f95@outer-maps dE3f92@dE3f90) (dE3f96@outer-var dE3f91@dE3f8e)) (let ((dE3f99@t (assq dE3f96@outer-var (car dE3f88@maps)))) (if dE3f99@t ((lambda (dE3f9b@b) (values (cdr dE3f9b@b) dE3f88@maps)) dE3f99@t) (let ((dE3f9d@inner-var (dE2e3d@gen-lexical 'tmp))) (values dE3f9d@inner-var (cons (cons (cons dE3f96@outer-var dE3f9d@inner-var) (car dE3f88@maps)) dE3f95@outer-maps)))))))))))) (dE3f2c@gen-append (lambda (dE3f81@x dE3f82@y) (if (fast-equal? dE3f82@y ''()) dE3f81@x (list 'append dE3f81@x dE3f82@y)))) (dE3f2e@gen-mappend (lambda (dE3f7d@e dE3f7e@map-env) (list 'apply '(primitive append) (dE3f30@gen-map dE3f7d@e dE3f7e@map-env)))) (dE3f30@gen-map (lambda (dE3f6b@e dE3f6c@map-env) (let ((dE3f6f@formals (map cdr dE3f6c@map-env)) (dE3f70@actuals (map (lambda (dE3f73@x) (list 'ref (car dE3f73@x))) dE3f6c@map-env))) (if (eq? (car dE3f6b@e) 'ref) (car dE3f70@actuals) (if (for-all (lambda (dE3f75@x) (and (eq? (car dE3f75@x) 'ref) (memq (cadr dE3f75@x) dE3f6f@formals))) (cdr dE3f6b@e)) (let ((dE3f77@args (map (let ((dE3f79@r (map cons dE3f6f@formals dE3f70@actuals))) (lambda (dE3f7b@x) (cdr (assq (cadr dE3f7b@x) dE3f79@r)))) (cdr dE3f6b@e)))) (cons 'map (cons (list 'primitive (car dE3f6b@e)) dE3f77@args))) (cons* 'map (list 'lambda dE3f6f@formals dE3f6b@e) dE3f70@actuals)))))) (dE3f32@gen-cons (lambda (dE3f5b@e dE3f5c@x dE3f5d@y dE3f5e@xnew dE3f5f@ynew) (let ((dE3f65@t (car dE3f5f@ynew))) (if (memv dE3f65@t '(quote)) (if (eq? (car dE3f5e@xnew) 'quote) (let ((dE3f67@xnew (cadr dE3f5e@xnew)) (dE3f68@ynew (cadr dE3f5f@ynew))) (if (and (eq? dE3f67@xnew dE3f5c@x) (eq? dE3f68@ynew dE3f5d@y)) (list 'quote dE3f5b@e) (list 'quote (cons dE3f67@xnew dE3f68@ynew)))) (if (null? (cadr dE3f5f@ynew)) (list 'list dE3f5e@xnew) (list 'cons dE3f5e@xnew dE3f5f@ynew))) (if (memv dE3f65@t '(list)) (cons 'list (cons dE3f5e@xnew (cdr dE3f5f@ynew))) (list 'cons dE3f5e@xnew dE3f5f@ynew)))))) (dE3f34@gen-vector (lambda (dE3f55@e dE3f56@ls dE3f57@lsnew) (if (eq? (car dE3f57@lsnew) 'quote) (if (eq? (cadr dE3f57@lsnew) dE3f56@ls) (list 'quote dE3f55@e) (list 'quote (list->vector (cadr dE3f57@lsnew)))) (if (eq? (car dE3f57@lsnew) 'list) (cons 'vector (cdr dE3f57@lsnew)) (list 'list->vector dE3f57@lsnew))))) (dE3f36@regen (lambda (dE3f4f@x) (let ((dE3f51@t (car dE3f4f@x))) (if (memv dE3f51@t '(ref)) (cadr dE3f4f@x) (if (memv dE3f51@t '(primitive)) (list 'primitive (cadr dE3f4f@x)) (if (memv dE3f51@t '(quote)) (list 'quote (cadr dE3f4f@x)) (if (memv dE3f51@t '(lambda)) (dE2e18@dE2d4a@build-lambda '#f (cadr dE3f4f@x) (dE3f36@regen (caddr dE3f4f@x))) (if (memv dE3f51@t '(map)) (let ((dE3f53@ls (map dE3f36@regen (cdr dE3f4f@x)))) (cons '(primitive ellipsis-map) dE3f53@ls)) (cons (list 'primitive (car dE3f4f@x)) (map dE3f36@regen (cdr dE3f4f@x)))))))))))) (lambda (dE3f37@e dE3f38@r dE3f39@mr) (let ((dE3f3d@t dE3f37@e)) (let ((dE3f3f@ls/false (dE30bc@syntax-dispatch dE3f3d@t '(_ any)))) (if dE3f3f@ls/false (apply (lambda (dE3f41@x) (call-with-values (lambda () (dE3f28@gen-syntax dE3f37@e dE3f41@x dE3f38@r '() dE30be@ellipsis? '#f)) (lambda (dE3f47@dE3f44 dE3f48@dE3f46) (let ((dE3f4b@maps dE3f48@dE3f46) (dE3f4c@e dE3f47@dE3f44)) (dE3f36@regen dE3f4c@e))))) dE3f3f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE3f3d@t))))))) (set! dE4b98@dE30c8@syntax-transformer dE30c8@syntax-transformer) (set! dE30ca@core-macro-transformer (lambda (dE406f@name) (let ((dE4071@t dE406f@name)) (if (memv dE4071@t '(quote)) dE306c@quote-transformer (if (memv dE4071@t '(lambda)) dE3070@lambda-transformer (if (memv dE4071@t '(case-lambda)) dE306e@case-lambda-transformer (if (memv dE4071@t '(letrec)) dE3054@letrec-transformer (if (memv dE4071@t '(letrec*)) dE3056@letrec*-transformer (if (memv dE4071@t '(let)) dE3052@let-transformer (if (memv dE4071@t '(if)) dE3064@if-transformer (if (memv dE4071@t '(and)) dE3066@and-transformer (if (memv dE4071@t '(or)) dE3068@or-transformer (if (memv dE4071@t '(foreign-call)) dE30b8@foreign-call-transformer (if (memv dE4071@t '(syntax-case)) dE30c4@syntax-case-transformer (if (memv dE4071@t '(syntax)) dE30c8@syntax-transformer (if (memv dE4071@t '(type-descriptor)) dE305a@type-descriptor-transformer (if (memv dE4071@t '(record-type-descriptor)) dE305c@record-type-descriptor-transformer (if (memv dE4071@t '(record-constructor-descriptor)) dE305e@record-constructor-descriptor-transformer (if (memv dE4071@t '(fluid-let-syntax)) dE3058@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" dE406f@name)))))))))))))))))))) (set! dE4b99@dE30ca@core-macro-transformer dE30ca@core-macro-transformer) (set! dE30cc@symbol-macro (lambda (dE4073@x dE4074@set) (let ((dE4077@t dE4073@x)) (let ((dE4079@ls/false (dE30bc@syntax-dispatch dE4077@t '(_ any)))) (if (and dE4079@ls/false (apply (lambda (dE407b@name) (and (dE2eb5@id? dE407b@name) (memq (dE2eb7@id->sym dE407b@name) dE4074@set))) dE4079@ls/false)) (apply (lambda (dE407d@name) (dE3072@bless (list 'quote dE407d@name))) dE4079@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4077@t)))))) (set! dE4b9a@dE30cc@symbol-macro dE30cc@symbol-macro) (set! dE30ce@macro-transformer (lambda (dE407f@x) (if (procedure? dE407f@x) dE407f@x (if (symbol? dE407f@x) (let ((dE4081@t dE407f@x)) (if (memv dE4081@t '(define-record-type)) dE30b0@define-record-type-macro (if (memv dE4081@t '(define-struct)) dE30ae@define-struct-macro (if (memv dE4081@t '(include)) dE30a4@include-macro (if (memv dE4081@t '(cond)) dE30a0@cond-macro (if (memv dE4081@t '(let)) dE3078@let-macro (if (memv dE4081@t '(do)) dE3098@do-macro (if (memv dE4081@t '(or)) dE309c@or-macro (if (memv dE4081@t '(and)) dE309e@and-macro (if (memv dE4081@t '(let*)) dE309a@let*-macro (if (memv dE4081@t '(let-values)) dE307a@let-values-macro (if (memv dE4081@t '(let*-values)) dE307c@let*-values-macro (if (memv dE4081@t '(syntax-rules)) dE30a8@syntax-rules-macro (if (memv dE4081@t '(quasiquote)) dE30aa@quasiquote-macro (if (memv dE4081@t '(quasisyntax)) dE30ac@quasisyntax-macro (if (memv dE4081@t '(with-syntax)) dE3074@with-syntax-macro (if (memv dE4081@t '(when)) dE3060@when-macro (if (memv dE4081@t '(unless)) dE3062@unless-macro (if (memv dE4081@t '(case)) dE306a@case-macro (if (memv dE4081@t '(identifier-syntax)) dE3096@identifier-syntax-macro (if (memv dE4081@t '(time)) dE308e@time-macro (if (memv dE4081@t '(delay)) dE3090@delay-macro (if (memv dE4081@t '(assert)) dE3092@assert-macro (if (memv dE4081@t '(endianness)) dE3094@endianness-macro (if (memv dE4081@t '(guard)) dE308a@guard-macro (if (memv dE4081@t '(define-enumeration)) dE308c@define-enumeration-macro (if (memv dE4081@t '(trace-lambda)) dE307e@trace-lambda-macro (if (memv dE4081@t '(trace-define)) dE3080@trace-define-macro (if (memv dE4081@t '(trace-define-syntax)) dE3082@trace-define-syntax-macro (if (memv dE4081@t '(trace-let-syntax)) dE3086@trace-let-syntax-macro (if (memv dE4081@t '(trace-letrec-syntax)) dE3088@trace-letrec-syntax-macro (if (memv dE4081@t '(define-condition-type)) dE30b2@define-condition-type-macro (if (memv dE4081@t '(parameterize)) dE30b6@parameterize-macro (if (memv dE4081@t '(include-into)) dE30a6@include-into-macro (if (memv dE4081@t '(eol-style)) (lambda (dE4083@x) (dE30cc@symbol-macro dE4083@x '(none lf cr crlf nel crnel ls))) (if (memv dE4081@t '(error-handling-mode)) (lambda (dE4085@x) (dE30cc@symbol-macro dE4085@x '(ignore raise replace))) (if (memv dE4081@t '(buffer-mode)) (lambda (dE4087@x) (dE30cc@symbol-macro dE4087@x '(none line block))) (if (memv dE4081@t '(file-options)) dE2e30@file-options-macro (if (memv dE4081@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) dE30b4@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" dE407f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" dE407f@x))))) (set! dE4b9b@dE30ce@macro-transformer dE30ce@macro-transformer) (set! dE30d0@local-macro-transformer (lambda (dE4089@x) (car dE4089@x))) (set! dE4b9c@dE30d0@local-macro-transformer dE30d0@local-macro-transformer) (set! dE30d2@do-macro-call (lambda (dE408b@transformer dE408c@expr) (let ((dE408f@out (dE408b@transformer (dE2e9f@add-mark dE2e99@anti-mark dE408c@expr '#f)))) (begin (let dE4093@f ((dE4091@x dE408f@out)) (if (not (dE2e81@stx? dE4091@x)) (if (pair? dE4091@x) (begin (dE4093@f (car dE4091@x)) (dE4093@f (cdr dE4091@x))) (if (vector? dE4091@x) (vector-for-each dE4093@f dE4091@x) (if (symbol? dE4091@x) (dE319c@syntax-violation '#f '"raw symbol encountered in output of macro" dE408c@expr dE4091@x) (void)))) (void))) (dE2e9f@add-mark (dE2e97@gen-mark) dE408f@out dE408c@expr))))) (set! dE4b9d@dE30d2@do-macro-call dE30d2@do-macro-call) (set! dE30d4@chi-macro (lambda (dE4095@p dE4096@e) (dE30d2@do-macro-call (dE30ce@macro-transformer dE4095@p) dE4096@e))) (set! dE4b9e@dE30d4@chi-macro dE30d4@chi-macro) (set! dE30d6@chi-local-macro (lambda (dE4099@p dE409a@e) (dE30d2@do-macro-call (dE30d0@local-macro-transformer dE4099@p) dE409a@e))) (set! dE4b9f@dE30d6@chi-local-macro dE30d6@chi-local-macro) (set! dE30d8@chi-global-macro (lambda (dE409d@p dE409e@e) (let ((dE40a1@lib (car dE409d@p)) (dE40a2@loc (cdr dE409d@p))) (begin (dE2cd2@dE2b21@visit-library dE40a1@lib) (let ((dE40a5@x (symbol-value dE40a2@loc))) (let ((dE40a7@transformer (if (procedure? dE40a5@x) dE40a5@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" dE40a5@x)))) (dE30d2@do-macro-call dE40a7@transformer dE409e@e))))))) (set! dE4ba0@dE30d8@chi-global-macro dE30d8@chi-global-macro) (set! dE30da@chi-expr* (lambda (dE40a9@e* dE40aa@r dE40ab@mr) (if (null? dE40a9@e*) '() (let ((dE40af@e (dE30de@chi-expr (car dE40a9@e*) dE40aa@r dE40ab@mr))) (cons dE40af@e (dE30da@chi-expr* (cdr dE40a9@e*) dE40aa@r dE40ab@mr)))))) (set! dE4ba1@dE30da@chi-expr* dE30da@chi-expr*) (set! dE30dc@chi-application (lambda (dE40b1@e dE40b2@r dE40b3@mr) (let ((dE40b7@t dE40b1@e)) (let ((dE40b9@ls/false (dE30bc@syntax-dispatch dE40b7@t '(any . each-any)))) (if dE40b9@ls/false (apply (lambda (dE40bb@rator dE40bc@rands) (let ((dE40bf@rator (dE30de@chi-expr dE40bb@rator dE40b2@r dE40b3@mr))) (cons dE40bf@rator (dE30da@chi-expr* dE40bc@rands dE40b2@r dE40b3@mr)))) dE40b9@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE40b7@t)))))) (set! dE4ba2@dE30dc@chi-application dE30dc@chi-application) (set! dE30de@chi-expr (lambda (dE40c1@e dE40c2@r dE40c3@mr) (call-with-values (lambda () (dE2ed7@syntax-type dE40c1@e dE40c2@r)) (lambda (dE40cd@dE40c8 dE40ce@dE40ca dE40cf@dE40cc) (let ((dE40d3@kwd dE40cf@dE40cc) (dE40d4@value dE40ce@dE40ca) (dE40d5@type dE40cd@dE40c8)) (let ((dE40d9@t dE40d5@type)) (if (memv dE40d9@t '(core-macro)) (let ((dE40db@transformer (dE30ca@core-macro-transformer dE40d4@value))) (dE40db@transformer dE40c1@e dE40c2@r dE40c3@mr)) (if (memv dE40d9@t '(global)) (let ((dE40dd@lib (car dE40d4@value))) (let ((dE40df@loc (cdr dE40d4@value))) (begin ((dE3124@inv-collector) dE40dd@lib) dE40df@loc))) (if (memv dE40d9@t '(core-prim)) (let ((dE40e1@name dE40d4@value)) (list 'primitive dE40e1@name)) (if (memv dE40d9@t '(call)) (dE30dc@chi-application dE40c1@e dE40c2@r dE40c3@mr) (if (memv dE40d9@t '(lexical)) (let ((dE40e3@lex (dE3046@lexical-var dE40d4@value))) dE40e3@lex) (if (memv dE40d9@t '(global-macro global-macro!)) (dE30de@chi-expr (dE30d8@chi-global-macro dE40d4@value dE40c1@e) dE40c2@r dE40c3@mr) (if (memv dE40d9@t '(local-macro local-macro!)) (dE30de@chi-expr (dE30d6@chi-local-macro dE40d4@value dE40c1@e) dE40c2@r dE40c3@mr) (if (memv dE40d9@t '(macro macro!)) (dE30de@chi-expr (dE30d4@chi-macro dE40d4@value dE40c1@e) dE40c2@r dE40c3@mr) (if (memv dE40d9@t '(constant)) (let ((dE40e5@datum dE40d4@value)) (list 'quote dE40e5@datum)) (if (memv dE40d9@t '(set!)) (dE30e0@chi-set! dE40c1@e dE40c2@r dE40c3@mr) (if (memv dE40d9@t '(begin)) (let ((dE40e7@t dE40c1@e)) (let ((dE40e9@ls/false (dE30bc@syntax-dispatch dE40e7@t '(_ any . each-any)))) (if dE40e9@ls/false (apply (lambda (dE40eb@x dE40ec@x*) (dE2e1a@dE2d7a@build-sequence '#f (dE30da@chi-expr* (cons dE40eb@x dE40ec@x*) dE40c2@r dE40c3@mr))) dE40e9@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE40e7@t)))) (if (memv dE40d9@t '(let-syntax letrec-syntax)) (let ((dE40ef@t dE40c1@e)) (let ((dE40f1@ls/false (dE30bc@syntax-dispatch dE40ef@t '(_ #(each (any any)) any . each-any)))) (if (and dE40f1@ls/false (apply (lambda (dE40f3@xlhs* dE40f4@xrhs* dE40f5@xbody dE40f6@xbody*) (if (not (dE2ebd@valid-bound-ids? dE40f3@xlhs*)) (dE319c@syntax-violation '#f '"invalid identifiers" dE40c1@e) (void))) dE40f1@ls/false)) (apply (lambda (dE40fb@xlhs* dE40fc@xrhs* dE40fd@xbody dE40fe@xbody*) (let ((dE4103@xlab* (map dE2e41@gen-label dE40fb@xlhs*))) (let ((dE4105@xrib (dE2e75@make-full-rib dE40fb@xlhs* dE4103@xlab*))) (let ((dE4107@xb* (map (lambda (dE4109@x) (dE2eed@make-eval-transformer (dE3116@expand-transformer (if (eq? dE40d5@type 'let-syntax) dE4109@x (dE2ea1@add-subst dE4105@xrib dE4109@x)) dE40c3@mr))) dE40fc@xrhs*))) (dE2e1a@dE2d7a@build-sequence '#f (dE30da@chi-expr* (map (lambda (dE410b@x) (dE2ea1@add-subst dE4105@xrib dE410b@x)) (cons dE40fd@xbody dE40fe@xbody*)) (append (map cons dE4103@xlab* dE4107@xb*) dE40c2@r) (append (map cons dE4103@xlab* dE4107@xb*) dE40c3@mr))))))) dE40f1@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE40ef@t)))) (if (memv dE40d9@t '(displaced-lexical)) (dE319c@syntax-violation '#f '"identifier out of context" dE40c1@e) (if (memv dE40d9@t '(syntax)) (dE319c@syntax-violation '#f '"reference to pattern variable outside a syntax form" dE40c1@e) (if (memv dE40d9@t '(define define-syntax module import library)) (dE319c@syntax-violation '#f (string-append (let ((dE410d@t dE40d5@type)) (if (memv dE410d@t '(define)) '"a definition" (if (memv dE410d@t '(define-syntax)) '"a define-syntax" (if (memv dE410d@t '(module)) '"a module definition" (if (memv dE410d@t '(library)) '"a library definition" (if (memv dE410d@t '(import)) '"an import declaration" (if (memv dE410d@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") dE40c1@e) (if (memv dE40d9@t '(mutable)) (dE319c@syntax-violation '#f '"attempt to reference an unexportable variable" dE40c1@e) (dE319c@syntax-violation '#f '"invalid expression" dE40c1@e))))))))))))))))))))))) (set! dE4ba3@dE30de@chi-expr dE30de@chi-expr) (set! dE30e0@chi-set! (lambda (dE410f@e dE4110@r dE4111@mr) (let ((dE4115@t dE410f@e)) (let ((dE4117@ls/false (dE30bc@syntax-dispatch dE4115@t '(_ any any)))) (if (and dE4117@ls/false (apply (lambda (dE4119@x dE411a@v) (dE2eb5@id? dE4119@x)) dE4117@ls/false)) (apply (lambda (dE411d@x dE411e@v) (call-with-values (lambda () (dE2ed7@syntax-type dE411d@x dE4110@r)) (lambda (dE4127@dE4122 dE4128@dE4124 dE4129@dE4126) (let ((dE412d@kwd dE4129@dE4126) (dE412e@value dE4128@dE4124) (dE412f@type dE4127@dE4122)) (let ((dE4133@t dE412f@type)) (if (memv dE4133@t '(lexical)) (begin (dE304a@set-lexical-mutable! dE412e@value '#t) (list 'set! (dE3046@lexical-var dE412e@value) (dE30de@chi-expr dE411e@v dE4110@r dE4111@mr))) (if (memv dE4133@t '(core-prim)) (dE319c@syntax-violation '#f '"cannot modify imported core primitive" dE410f@e) (if (memv dE4133@t '(global)) (dE319c@syntax-violation '#f '"attempt to modify imported binding" dE410f@e) (if (memv dE4133@t '(global-macro!)) (dE30de@chi-expr (dE30d8@chi-global-macro dE412e@value dE410f@e) dE4110@r dE4111@mr) (if (memv dE4133@t '(local-macro!)) (dE30de@chi-expr (dE30d6@chi-local-macro dE412e@value dE410f@e) dE4110@r dE4111@mr) (if (memv dE4133@t '(mutable)) (dE319c@syntax-violation '#f '"attempt to assign to an unexportable variable" dE410f@e) (dE319c@syntax-violation '#f '"invalid syntax" dE410f@e)))))))))))) dE4117@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4115@t)))))) (set! dE4ba4@dE30e0@chi-set! dE30e0@chi-set!) (set! dE30e2@verify-formals (lambda (dE4135@fmls dE4136@stx) (let ((dE4139@t dE4135@fmls)) (let ((dE413b@ls/false (dE30bc@syntax-dispatch dE4139@t 'each-any))) (if dE413b@ls/false (apply (lambda (dE413d@x*) (if (not (dE2ebd@valid-bound-ids? dE413d@x*)) (dE3076@invalid-fmls-error dE4136@stx dE4135@fmls) (void))) dE413b@ls/false) (let ((dE413f@t dE4139@t)) (let ((dE4141@ls/false (dE30bc@syntax-dispatch dE413f@t '#(each+ any () any)))) (if dE4141@ls/false (apply (lambda (dE4143@x* dE4144@x) (if (not (dE2ebd@valid-bound-ids? (cons dE4144@x dE4143@x*))) (dE3076@invalid-fmls-error dE4136@stx dE4135@fmls) (void))) dE4141@ls/false) (let ((dE4147@t dE413f@t)) (let ((dE4149@ls/false (dE30bc@syntax-dispatch dE4147@t '_))) (if dE4149@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid syntax" dE4136@stx)) dE4149@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4147@t)))))))))))) (set! dE4ba5@dE30e2@verify-formals dE30e2@verify-formals) (set! dE30e4@chi-lambda-clause (lambda (dE414b@stx dE414c@fmls dE414d@body* dE414e@r dE414f@mr) (let ((dE4155@t dE414c@fmls)) (let ((dE4157@ls/false (dE30bc@syntax-dispatch dE4155@t 'each-any))) (if dE4157@ls/false (apply (lambda (dE4159@x*) (begin (dE30e2@verify-formals dE414c@fmls dE414b@stx) (let ((dE415b@lex* (map dE2e3d@gen-lexical dE4159@x*)) (dE415c@lab* (map dE2e41@gen-label dE4159@x*))) (values dE415b@lex* (dE30f4@chi-internal (dE2ea1@add-subst (dE2e75@make-full-rib dE4159@x* dE415c@lab*) dE414d@body*) (dE304e@add-lexicals dE415c@lab* dE415b@lex* dE414e@r) dE414f@mr))))) dE4157@ls/false) (let ((dE415f@t dE4155@t)) (let ((dE4161@ls/false (dE30bc@syntax-dispatch dE415f@t '#(each+ any () any)))) (if dE4161@ls/false (apply (lambda (dE4163@x* dE4164@x) (begin (dE30e2@verify-formals dE414c@fmls dE414b@stx) (let ((dE4167@lex* (map dE2e3d@gen-lexical dE4163@x*)) (dE4168@lab* (map dE2e41@gen-label dE4163@x*)) (dE4169@lex (dE2e3d@gen-lexical dE4164@x)) (dE416a@lab (dE2e41@gen-label dE4164@x))) (values (append dE4167@lex* dE4169@lex) (dE30f4@chi-internal (dE2ea1@add-subst (dE2e75@make-full-rib (cons dE4164@x dE4163@x*) (cons dE416a@lab dE4168@lab*)) dE414d@body*) (dE304e@add-lexicals (cons dE416a@lab dE4168@lab*) (cons dE4169@lex dE4167@lex*) dE414e@r) dE414f@mr))))) dE4161@ls/false) (let ((dE416f@t dE415f@t)) (let ((dE4171@ls/false (dE30bc@syntax-dispatch dE416f@t '_))) (if dE4171@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid syntax" dE414c@fmls)) dE4171@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE416f@t)))))))))))) (set! dE4ba6@dE30e4@chi-lambda-clause dE30e4@chi-lambda-clause) (set! dE30e6@chi-lambda-clause* (lambda (dE4173@stx dE4174@fmls* dE4175@body** dE4176@r dE4177@mr) (if (null? dE4174@fmls*) (values '() '()) (call-with-values (lambda () (dE30e4@chi-lambda-clause dE4173@stx (car dE4174@fmls*) (car dE4175@body**) dE4176@r dE4177@mr)) (lambda (dE4181@dE417e dE4182@dE4180) (let ((dE4185@b dE4182@dE4180) (dE4186@a dE4181@dE417e)) (call-with-values (lambda () (dE30e6@chi-lambda-clause* dE4173@stx (cdr dE4174@fmls*) (cdr dE4175@body**) dE4176@r dE4177@mr)) (lambda (dE418d@dE418a dE418e@dE418c) (let ((dE4191@b* dE418e@dE418c) (dE4192@a* dE418d@dE418a)) (values (cons dE4186@a dE4192@a*) (cons dE4185@b dE4191@b*))))))))))) (set! dE4ba7@dE30e6@chi-lambda-clause* dE30e6@chi-lambda-clause*) (set! dE30e8@chi-defun (lambda (dE4195@x dE4196@r dE4197@mr) (let ((dE419b@fmls (car dE4195@x)) (dE419c@body* (cdr dE4195@x))) (call-with-values (lambda () (dE30e4@chi-lambda-clause dE419b@fmls dE419b@fmls dE419c@body* dE4196@r dE4197@mr)) (lambda (dE41a3@dE41a0 dE41a4@dE41a2) (let ((dE41a7@body dE41a4@dE41a2) (dE41a8@fmls dE41a3@dE41a0)) (dE2e18@dE2d4a@build-lambda '#f dE41a8@fmls dE41a7@body))))))) (set! dE4ba8@dE30e8@chi-defun dE30e8@chi-defun) (set! dE30ea@chi-rhs (lambda (dE41ab@rhs dE41ac@r dE41ad@mr) (let ((dE41b1@t (car dE41ab@rhs))) (if (memv dE41b1@t '(defun)) (dE30e8@chi-defun (cdr dE41ab@rhs) dE41ac@r dE41ad@mr) (if (memv dE41b1@t '(expr)) (let ((dE41b3@expr (cdr dE41ab@rhs))) (dE30de@chi-expr dE41b3@expr dE41ac@r dE41ad@mr)) (if (memv dE41b1@t '(top-expr)) (let ((dE41b5@expr (cdr dE41ab@rhs))) (dE2e1a@dE2d7a@build-sequence '#f (list (dE30de@chi-expr dE41b5@expr dE41ac@r dE41ad@mr) (dE2e1b@dE2d7c@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" dE41ab@rhs))))))) (set! dE4ba9@dE30ea@chi-rhs dE30ea@chi-rhs) (set! dE30ec@expand-interaction-rhs*/init* (lambda (dE41b7@lhs* dE41b8@rhs* dE41b9@init* dE41ba@r dE41bb@mr) (let dE41c5@f ((dE41c1@lhs* dE41b7@lhs*) (dE41c2@rhs* dE41b8@rhs*)) (if (null? dE41c1@lhs*) (map (lambda (dE41c7@x) (dE30de@chi-expr dE41c7@x dE41ba@r dE41bb@mr)) dE41b9@init*) (let ((dE41c9@lhs (car dE41c1@lhs*)) (dE41ca@rhs (car dE41c2@rhs*))) (let ((dE41cd@t (car dE41ca@rhs))) (if (memv dE41cd@t '(defun)) (let ((dE41cf@rhs (dE30e8@chi-defun (cdr dE41ca@rhs) dE41ba@r dE41bb@mr))) (cons (list 'set! dE41c9@lhs dE41cf@rhs) (dE41c5@f (cdr dE41c1@lhs*) (cdr dE41c2@rhs*)))) (if (memv dE41cd@t '(expr)) (let ((dE41d1@rhs (dE30de@chi-expr (cdr dE41ca@rhs) dE41ba@r dE41bb@mr))) (cons (list 'set! dE41c9@lhs dE41d1@rhs) (dE41c5@f (cdr dE41c1@lhs*) (cdr dE41c2@rhs*)))) (if (memv dE41cd@t '(top-expr)) (let ((dE41d3@e (dE30de@chi-expr (cdr dE41ca@rhs) dE41ba@r dE41bb@mr))) (cons dE41d3@e (dE41c5@f (cdr dE41c1@lhs*) (cdr dE41c2@rhs*)))) (error 'expand-interaction '"invallid" dE41ca@rhs)))))))))) (set! dE4baa@dE30ec@expand-interaction-rhs*/init* dE30ec@expand-interaction-rhs*/init*) (set! dE30ee@chi-rhs* (lambda (dE41d5@rhs* dE41d6@r dE41d7@mr) (let dE41dd@f ((dE41db@ls dE41d5@rhs*)) (if (null? dE41db@ls) '() (let ((dE41df@a (dE30ea@chi-rhs (car dE41db@ls) dE41d6@r dE41d7@mr))) (cons dE41df@a (dE41dd@f (cdr dE41db@ls)))))))) (set! dE4bab@dE30ee@chi-rhs* dE30ee@chi-rhs*) (set! dE30f0@find-bound=? (lambda (dE41e1@x dE41e2@lhs* dE41e3@rhs*) (if (null? dE41e2@lhs*) '#f (if (dE2eb9@bound-id=? dE41e1@x (car dE41e2@lhs*)) (car dE41e3@rhs*) (dE30f0@find-bound=? dE41e1@x (cdr dE41e2@lhs*) (cdr dE41e3@rhs*)))))) (set! dE4bac@dE30f0@find-bound=? dE30f0@find-bound=?) (set! dE30f2@find-dups (lambda (dE41e7@ls) (let dE41ed@f ((dE41e9@ls dE41e7@ls) (dE41ea@dups '())) (if (null? dE41e9@ls) dE41ea@dups (let ((dE41ef@t (dE30f0@find-bound=? (car dE41e9@ls) (cdr dE41e9@ls) (cdr dE41e9@ls)))) (if dE41ef@t ((lambda (dE41f1@x) (dE41ed@f (cdr dE41e9@ls) (cons (list (car dE41e9@ls) dE41f1@x) dE41ea@dups))) dE41ef@t) (dE41ed@f (cdr dE41e9@ls) dE41ea@dups))))))) (set! dE4bad@dE30f2@find-dups dE30f2@find-dups) (set! dE30f4@chi-internal (lambda (dE41f3@e* dE41f4@r dE41f5@mr) (let ((dE41f9@rib (dE2e69@make-empty-rib))) (call-with-values (lambda () (dE3114@chi-body* (map (lambda (dE420b@x) (dE2ea1@add-subst dE41f9@rib dE420b@x)) (dE2eb3@syntax->list dE41f3@e*)) dE41f4@r dE41f5@mr '() '() '() '() '() dE41f9@rib '#f)) (lambda (dE420d@dE41fc dE420e@dE41fe dE420f@dE4200 dE4210@dE4202 dE4211@dE4204 dE4212@dE4206 dE4213@dE4208 dE4214@dE420a) (let ((dE421d@_exp* dE4214@dE420a) (dE421e@kwd* dE4213@dE4208) (dE421f@mod** dE4212@dE4206) (dE4220@rhs* dE4211@dE4204) (dE4221@lex* dE4210@dE4202) (dE4222@mr dE420f@dE4200) (dE4223@r dE420e@dE41fe) (dE4224@e* dE420d@dE41fc)) (begin (if (null? dE4224@e*) (dE319c@syntax-violation '#f '"no expression in body" dE4224@e*) (void)) (let ((dE422d@init* (dE30da@chi-expr* (append (apply append (reverse dE421f@mod**)) dE4224@e*) dE4223@r dE4222@mr))) (let ((dE422f@rhs* (dE30ee@chi-rhs* dE4220@rhs* dE4223@r dE4222@mr))) (dE2e1f@dE2d84@build-letrec* '#f (reverse dE4221@lex*) (reverse dE422f@rhs*) (dE2e1a@dE2d7a@build-sequence '#f dE422d@init*))))))))))) (set! dE4bae@dE30f4@chi-internal dE30f4@chi-internal) (set! dE30f6@parse-module (lambda (dE4231@e) (let ((dE4233@t dE4231@e)) (let ((dE4235@ls/false (dE30bc@syntax-dispatch dE4233@t '(_ each-any . each-any)))) (if dE4235@ls/false (apply (lambda (dE4237@export* dE4238@b*) (begin (if (not (for-all dE2eb5@id? dE4237@export*)) (dE319c@syntax-violation '#f '"module exports must be identifiers" dE4231@e) (void)) (values '#f (list->vector dE4237@export*) dE4238@b*))) dE4235@ls/false) (let ((dE423b@t dE4233@t)) (let ((dE423d@ls/false (dE30bc@syntax-dispatch dE423b@t '(_ any each-any . each-any)))) (if dE423d@ls/false (apply (lambda (dE423f@name dE4240@export* dE4241@b*) (begin (if (not (dE2eb5@id? dE423f@name)) (dE319c@syntax-violation '#f '"module name must be an identifier" dE4231@e) (void)) (if (not (for-all dE2eb5@id? dE4240@export*)) (dE319c@syntax-violation '#f '"module exports must be identifiers" dE4231@e) (void)) (values dE423f@name (list->vector dE4240@export*) dE4241@b*))) dE423d@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE423b@t))))))))) (set! dE4baf@dE30f6@parse-module dE30f6@parse-module) (set! dE3100@module-interface? (lambda (dE4245@x) (and (simple-struct? dE4245@x) (eq? (simple-struct-name dE4245@x) 'module-interface)))) (set! dE4bb0@dE3100@module-interface? dE3100@module-interface?) (set! dE3102@module-interface-first-mark (lambda (dE4247@x) (simple-struct-ref dE4247@x '0))) (set! dE4bb1@dE3102@module-interface-first-mark dE3102@module-interface-first-mark) (set! dE3104@set-module-interface-first-mark! (lambda (dE4249@x dE424a@val) (simple-struct-set! dE4249@x '0 dE424a@val))) (set! dE4bb2@dE3104@set-module-interface-first-mark! dE3104@set-module-interface-first-mark!) (set! dE3106@module-interface-exp-id-vec (lambda (dE424d@x) (simple-struct-ref dE424d@x '1))) (set! dE4bb3@dE3106@module-interface-exp-id-vec dE3106@module-interface-exp-id-vec) (set! dE3108@set-module-interface-exp-id-vec! (lambda (dE424f@x dE4250@val) (simple-struct-set! dE424f@x '1 dE4250@val))) (set! dE4bb4@dE3108@set-module-interface-exp-id-vec! dE3108@set-module-interface-exp-id-vec!) (set! dE310a@module-interface-exp-lab-vec (lambda (dE4253@x) (simple-struct-ref dE4253@x '2))) (set! dE4bb5@dE310a@module-interface-exp-lab-vec dE310a@module-interface-exp-lab-vec) (set! dE310c@set-module-interface-exp-lab-vec! (lambda (dE4255@x dE4256@val) (simple-struct-set! dE4255@x '2 dE4256@val))) (set! dE4bb6@dE310c@set-module-interface-exp-lab-vec! dE310c@set-module-interface-exp-lab-vec!) (set! dE310e@dummy '3) (set! dE4bb7@dE310e@dummy dE310e@dummy) (set! dE3110@module-interface-exp-id* (lambda (dE4259@iface dE425a@id) (letrec* ((dE425e@diff-marks (lambda (dE4265@ls dE4266@x) (begin (if (null? dE4265@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((dE4269@a (car dE4265@ls))) (if (eq? dE4269@a dE4266@x) '() (cons dE4269@a (dE425e@diff-marks (cdr dE4265@ls) dE4266@x)))))))) (let ((dE425f@diff (dE425e@diff-marks (dE2e87@stx-mark* dE425a@id) (dE3102@module-interface-first-mark dE4259@iface))) (dE4260@id-vec (dE3106@module-interface-exp-id-vec dE4259@iface))) (if (null? dE425f@diff) dE4260@id-vec (vector-map (lambda (dE4263@x) (make-simple-struct 'stx '5 (list (dE2e83@stx-expr dE4263@x) (append dE425f@diff (dE2e87@stx-mark* dE4263@x)) '() '()))) dE4260@id-vec)))))) (set! dE4bb8@dE3110@module-interface-exp-id* dE3110@module-interface-exp-id*) (set! dE3112@chi-internal-module (lambda (dE426b@e dE426c@r dE426d@mr dE426e@lex* dE426f@rhs* dE4270@mod** dE4271@kwd*) (call-with-values (lambda () (dE30f6@parse-module dE426b@e)) (lambda (dE427f@dE427a dE4280@dE427c dE4281@dE427e) (let ((dE4285@e* dE4281@dE427e) (dE4286@exp-id* dE4280@dE427c) (dE4287@name dE427f@dE427a)) (let ((dE428b@rib (dE2e69@make-empty-rib))) (let ((dE428d@e* (map (lambda (dE428f@x) (dE2ea1@add-subst dE428b@rib dE428f@x)) (dE2eb3@syntax->list dE4285@e*)))) (call-with-values (lambda () (dE3114@chi-body* dE428d@e* dE426c@r dE426d@mr dE426e@lex* dE426f@rhs* dE4270@mod** dE4271@kwd* '() dE428b@rib '#f)) (lambda (dE42a1@dE4292 dE42a2@dE4294 dE42a3@dE4296 dE42a4@dE4298 dE42a5@dE429a dE42a6@dE429c dE42a7@dE429e dE42a8@dE42a0) (let ((dE42b1@_exp* dE42a8@dE42a0) (dE42b2@kwd* dE42a7@dE429e) (dE42b3@mod** dE42a6@dE429c) (dE42b4@rhs* dE42a5@dE429a) (dE42b5@lex* dE42a4@dE4298) (dE42b6@mr dE42a3@dE4296) (dE42b7@r dE42a2@dE4294) (dE42b8@e* dE42a1@dE4292)) (let ((dE42c1@exp-lab* (vector-map (lambda (dE42c5@x) (or (dE2ecb@id->label (make-simple-struct 'stx '5 (list (dE2eb7@id->sym dE42c5@x) (dE2e87@stx-mark* dE42c5@x) (list dE428b@rib) '()))) (dE319c@syntax-violation '#f '"cannot find module export" dE42c5@x))) dE4286@exp-id*)) (dE42c2@mod** (cons dE42b8@e* dE42b3@mod**))) (if (not dE4287@name) (values dE42b5@lex* dE42b4@rhs* dE4286@exp-id* dE42c1@exp-lab* dE42b7@r dE42b6@mr dE42c2@mod** dE42b2@kwd*) (let ((dE42c7@lab (dE2e41@gen-label 'module)) (dE42c8@iface (make-simple-struct 'module-interface '4 (list (car (dE2e87@stx-mark* dE4287@name)) (vector-map (lambda (dE42cb@x) (make-simple-struct 'stx '5 (list (dE2e83@stx-expr dE42cb@x) (dE2e87@stx-mark* dE42cb@x) '() '()))) dE4286@exp-id*) dE42c1@exp-lab*)))) (values dE42b5@lex* dE42b4@rhs* (vector dE4287@name) (vector dE42c7@lab) (cons (cons dE42c7@lab (cons '$module dE42c8@iface)) dE42b7@r) (cons (cons dE42c7@lab (cons '$module dE42c8@iface)) dE42b6@mr) dE42c2@mod** dE42b2@kwd*)))))))))))))) (set! dE4bb9@dE3112@chi-internal-module dE3112@chi-internal-module) (set! dE3114@chi-body* (lambda (dE42cd@e* dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42d3@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?) (if (null? dE42cd@e*) (values dE42cd@e* dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42d3@kwd* dE42d4@exp*) (let ((dE42e1@e (car dE42cd@e*))) (call-with-values (lambda () (dE2ed7@syntax-type dE42e1@e dE42ce@r)) (lambda (dE42e9@dE42e4 dE42ea@dE42e6 dE42eb@dE42e8) (let ((dE42ef@kwd dE42eb@dE42e8) (dE42f0@value dE42ea@dE42e6) (dE42f1@type dE42e9@dE42e4)) (let ((dE42f5@kwd* (if (dE2eb5@id? dE42ef@kwd) (cons dE42ef@kwd dE42d3@kwd*) dE42d3@kwd*))) (let ((dE42f7@t dE42f1@type)) (if (memv dE42f7@t '(define)) (call-with-values (lambda () (dE303e@parse-define dE42e1@e)) (lambda (dE42fd@dE42fa dE42fe@dE42fc) (let ((dE4301@rhs dE42fe@dE42fc) (dE4302@id dE42fd@dE42fa)) (begin (if (dE2ec1@bound-id-member? dE4302@id dE42f5@kwd*) (dE319c@syntax-violation '#f '"cannot redefine keyword" dE42e1@e) (void)) (call-with-values (lambda () (dE2e45@gen-define-label+loc dE4302@id dE42d5@rib)) (lambda (dE4309@dE4306 dE430a@dE4308) (let ((dE430d@lex dE430a@dE4308) (dE430e@lab dE4309@dE4306)) (begin (dE2e6b@extend-rib! dE42d5@rib dE4302@id dE430e@lab) (dE3114@chi-body* (cdr dE42cd@e*) (dE304c@add-lexical dE430e@lab dE430d@lex dE42ce@r) dE42cf@mr (cons dE430d@lex dE42d0@lex*) (cons dE4301@rhs dE42d1@rhs*) dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?))))))))) (if (memv dE42f7@t '(define-syntax)) (call-with-values (lambda () (dE3040@parse-define-syntax dE42e1@e)) (lambda (dE4315@dE4312 dE4316@dE4314) (let ((dE4319@rhs dE4316@dE4314) (dE431a@id dE4315@dE4312)) (begin (if (dE2ec1@bound-id-member? dE431a@id dE42f5@kwd*) (dE319c@syntax-violation '#f '"cannot redefine keyword" dE42e1@e) (void)) (let ((dE431d@lab (dE2e47@gen-define-label dE431a@id dE42d5@rib)) (dE431e@expanded-rhs (dE3116@expand-transformer dE4319@rhs dE42cf@mr))) (begin (dE2e6b@extend-rib! dE42d5@rib dE431a@id dE431d@lab) (let ((dE4321@b (dE2eed@make-eval-transformer dE431e@expanded-rhs))) (dE3114@chi-body* (cdr dE42cd@e*) (cons (cons dE431d@lab dE4321@b) dE42ce@r) (cons (cons dE431d@lab dE4321@b) dE42cf@mr) dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?)))))))) (if (memv dE42f7@t '(let-syntax letrec-syntax)) (let ((dE4323@t dE42e1@e)) (let ((dE4325@ls/false (dE30bc@syntax-dispatch dE4323@t '(_ #(each (any any)) . each-any)))) (if (and dE4325@ls/false (apply (lambda (dE4327@xlhs* dE4328@xrhs* dE4329@xbody*) (if (not (dE2ebd@valid-bound-ids? dE4327@xlhs*)) (dE319c@syntax-violation '#f '"invalid identifiers" dE42e1@e) (void))) dE4325@ls/false)) (apply (lambda (dE432d@xlhs* dE432e@xrhs* dE432f@xbody*) (let ((dE4333@xlab* (map dE2e41@gen-label dE432d@xlhs*))) (let ((dE4335@xrib (dE2e75@make-full-rib dE432d@xlhs* dE4333@xlab*))) (let ((dE4337@xb* (map (lambda (dE4339@x) (dE2eed@make-eval-transformer (dE3116@expand-transformer (if (eq? dE42f1@type 'let-syntax) dE4339@x (dE2ea1@add-subst dE4335@xrib dE4339@x)) dE42cf@mr))) dE432e@xrhs*))) (dE3114@chi-body* (append (map (lambda (dE433b@x) (dE2ea1@add-subst dE4335@xrib dE433b@x)) dE432f@xbody*) (cdr dE42cd@e*)) (append (map cons dE4333@xlab* dE4337@xb*) dE42ce@r) (append (map cons dE4333@xlab* dE4337@xb*) dE42cf@mr) dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?))))) dE4325@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4323@t)))) (if (memv dE42f7@t '(begin)) (let ((dE433d@t dE42e1@e)) (let ((dE433f@ls/false (dE30bc@syntax-dispatch dE433d@t '(_ . each-any)))) (if dE433f@ls/false (apply (lambda (dE4341@x*) (dE3114@chi-body* (append dE4341@x* (cdr dE42cd@e*)) dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?)) dE433f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE433d@t)))) (if (memv dE42f7@t '(global-macro global-macro!)) (dE3114@chi-body* (cons (dE2ea1@add-subst dE42d5@rib (dE30d8@chi-global-macro dE42f0@value dE42e1@e)) (cdr dE42cd@e*)) dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?) (if (memv dE42f7@t '(local-macro local-macro!)) (dE3114@chi-body* (cons (dE2ea1@add-subst dE42d5@rib (dE30d6@chi-local-macro dE42f0@value dE42e1@e)) (cdr dE42cd@e*)) dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?) (if (memv dE42f7@t '(macro macro!)) (dE3114@chi-body* (cons (dE2ea1@add-subst dE42d5@rib (dE30d4@chi-macro dE42f0@value dE42e1@e)) (cdr dE42cd@e*)) dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?) (if (memv dE42f7@t '(module)) (call-with-values (lambda () (dE3112@chi-internal-module dE42e1@e dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd*)) (lambda (dE4353@dE4344 dE4354@dE4346 dE4355@dE4348 dE4356@dE434a dE4357@dE434c dE4358@dE434e dE4359@dE4350 dE435a@dE4352) (let ((dE4363@kwd* dE435a@dE4352) (dE4364@mod** dE4359@dE4350) (dE4365@mr dE4358@dE434e) (dE4366@r dE4357@dE434c) (dE4367@m-exp-lab* dE4356@dE434a) (dE4368@m-exp-id* dE4355@dE4348) (dE4369@rhs* dE4354@dE4346) (dE436a@lex* dE4353@dE4344)) (begin (vector-for-each (lambda (dE4373@id dE4374@lab) (dE2e6b@extend-rib! dE42d5@rib dE4373@id dE4374@lab)) dE4368@m-exp-id* dE4367@m-exp-lab*) (dE3114@chi-body* (cdr dE42cd@e*) dE4366@r dE4365@mr dE436a@lex* dE4369@rhs* dE4364@mod** dE4363@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?))))) (if (memv dE42f7@t '(library)) (begin (dE317e@library-expander (dE2ec9@stx->datum dE42e1@e)) (dE3114@chi-body* (cdr dE42cd@e*) dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?)) (if (memv dE42f7@t '(export)) (let ((dE4377@t dE42e1@e)) (let ((dE4379@ls/false (dE30bc@syntax-dispatch dE4377@t '(_ . each-any)))) (if dE4379@ls/false (apply (lambda (dE437b@exp-decl*) (dE3114@chi-body* (cdr dE42cd@e*) dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* (append dE437b@exp-decl* dE42d4@exp*) dE42d5@rib dE42d6@top?)) dE4379@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4377@t)))) (if (memv dE42f7@t '(import)) (letrec* ((dE437e@module-import? (lambda (dE43d1@e) (let ((dE43d3@t dE43d1@e)) (let ((dE43d5@ls/false (dE30bc@syntax-dispatch dE43d3@t '(_ any)))) (if (and dE43d5@ls/false (apply (lambda (dE43d7@id) (dE2eb5@id? dE43d7@id)) dE43d5@ls/false)) (apply (lambda (dE43d9@id) '#t) dE43d5@ls/false) (let ((dE43db@t dE43d3@t)) (let ((dE43dd@ls/false (dE30bc@syntax-dispatch dE43db@t '(_ . each-any)))) (if dE43dd@ls/false (apply (lambda (dE43df@imp*) '#f) dE43dd@ls/false) (let ((dE43e1@t dE43db@t)) (let ((dE43e3@ls/false (dE30bc@syntax-dispatch dE43e1@t '_))) (if dE43e3@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"malformed import form" dE43d1@e)) dE43e3@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE43e1@t)))))))))))) (dE4380@module-import (lambda (dE43af@e dE43b0@r) (let ((dE43b3@t dE43af@e)) (let ((dE43b5@ls/false (dE30bc@syntax-dispatch dE43b3@t '(_ any)))) (if (and dE43b5@ls/false (apply (lambda (dE43b7@id) (dE2eb5@id? dE43b7@id)) dE43b5@ls/false)) (apply (lambda (dE43b9@id) (call-with-values (lambda () (dE2ed7@syntax-type dE43b9@id dE43b0@r)) (lambda (dE43c1@dE43bc dE43c2@dE43be dE43c3@dE43c0) (let ((dE43c7@kwd dE43c3@dE43c0) (dE43c8@value dE43c2@dE43be) (dE43c9@type dE43c1@dE43bc)) (let ((dE43cd@t dE43c9@type)) (if (memv dE43cd@t '($module)) (let ((dE43cf@iface dE43c8@value)) (values (dE3110@module-interface-exp-id* dE43cf@iface dE43b9@id) (dE310a@module-interface-exp-lab-vec dE43cf@iface))) (dE319c@syntax-violation '#f '"invalid import" dE43af@e))))))) dE43b5@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE43b3@t)))))) (dE4382@library-import (lambda (dE4393@e) (let ((dE4395@t dE4393@e)) (let ((dE4397@ls/false (dE30bc@syntax-dispatch dE4395@t '(any . each-any)))) (if dE4397@ls/false (apply (lambda (dE4399@ctxt dE439a@imp*) (call-with-values (lambda () (dE311e@parse-import-spec* (dE31a2@syntax->datum dE439a@imp*))) (lambda (dE43a1@dE439e dE43a2@dE43a0) (let ((dE43a5@subst-labels dE43a2@dE43a0) (dE43a6@subst-names dE43a1@dE439e)) (values (vector-map (lambda (dE43a9@name) (dE2e95@datum->stx dE4399@ctxt dE43a9@name)) dE43a6@subst-names) dE43a5@subst-labels))))) dE4397@ls/false) (let ((dE43ab@t dE4395@t)) (let ((dE43ad@ls/false (dE30bc@syntax-dispatch dE43ab@t '_))) (if dE43ad@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid import form" dE4393@e)) dE43ad@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE43ab@t)))))))))) (begin (call-with-values (lambda () (if (dE437e@module-import? dE42e1@e) (dE4380@module-import dE42e1@e dE42ce@r) (dE4382@library-import dE42e1@e))) (lambda (dE4387@dE4384 dE4388@dE4386) (let ((dE438b@lab* dE4388@dE4386) (dE438c@id* dE4387@dE4384)) (vector-for-each (lambda (dE438f@id dE4390@lab) (dE2e6b@extend-rib! dE42d5@rib dE438f@id dE4390@lab)) dE438c@id* dE438b@lab*)))) (dE3114@chi-body* (cdr dE42cd@e*) dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?))) (if dE42d6@top? (dE3114@chi-body* (cdr dE42cd@e*) dE42ce@r dE42cf@mr (cons (dE2e3d@gen-lexical 'dummy) dE42d0@lex*) (cons (cons 'top-expr dE42e1@e) dE42d1@rhs*) dE42d2@mod** dE42f5@kwd* dE42d4@exp* dE42d5@rib dE42d6@top?) (values dE42cd@e* dE42ce@r dE42cf@mr dE42d0@lex* dE42d1@rhs* dE42d2@mod** dE42f5@kwd* dE42d4@exp*)))))))))))))))))))))) (set! dE4bba@dE3114@chi-body* dE3114@chi-body*) (set! dE3116@expand-transformer (lambda (dE43e5@expr dE43e6@r) (let ((dE43e9@rtc (dE3122@make-collector))) (let ((dE43eb@expanded-rhs (let ((dE43f5@dE43ee dE3124@inv-collector) (dE43f6@dE43f0 dE3126@vis-collector) (dE43f7@dE43f2 dE43e9@rtc) (dE43f8@dE43f4 (lambda (dE43fd@x) (values)))) (let ((dE43ff@swap (lambda () (begin (let ((dE4401@t (dE43f5@dE43ee))) (begin (dE43f5@dE43ee dE43f7@dE43f2) (set! dE43f7@dE43f2 dE4401@t))) (let ((dE4403@t (dE43f6@dE43f0))) (begin (dE43f6@dE43f0 dE43f8@dE43f4) (set! dE43f8@dE43f4 dE4403@t))))))) (dynamic-wind dE43ff@swap (lambda () (dE30de@chi-expr dE43e5@expr dE43e6@r dE43e6@r)) dE43ff@swap))))) (begin (for-each (let ((dE4405@mark-visit (dE3126@vis-collector))) (lambda (dE4407@x) (begin (dE2cd1@dE2b1f@invoke-library dE4407@x) (dE4405@mark-visit dE4407@x)))) (dE43e9@rtc)) dE43eb@expanded-rhs))))) (set! dE4bbb@dE3116@expand-transformer dE3116@expand-transformer) (set! dE3118@parse-exports (lambda (dE4409@exp*) (let dE4411@f ((dE440b@exp* dE4409@exp*) (dE440c@int* '()) (dE440d@ext* '())) (if (null? dE440b@exp*) (begin (if (not (dE2ebd@valid-bound-ids? dE440d@ext*)) (dE319c@syntax-violation 'export '"invalid exports" (dE30f2@find-dups dE440d@ext*)) (void)) (values (map dE31a2@syntax->datum dE440d@ext*) dE440c@int*)) (let ((dE4413@t (car dE440b@exp*))) (let ((dE4415@ls/false (dE30bc@syntax-dispatch dE4413@t '(any . #(each (any any)))))) (if dE4415@ls/false (apply (lambda (dE4417@rename dE4418@i* dE4419@e*) (begin (if (not (and (eq? (dE31a2@syntax->datum dE4417@rename) 'rename) (for-all dE2eb5@id? dE4418@i*) (for-all dE2eb5@id? dE4419@e*))) (dE319c@syntax-violation 'export '"invalid export specifier" (car dE440b@exp*)) (void)) (dE4411@f (cdr dE440b@exp*) (append dE4418@i* dE440c@int*) (append dE4419@e* dE440d@ext*)))) dE4415@ls/false) (let ((dE441d@t dE4413@t)) (let ((dE441f@ls/false (dE30bc@syntax-dispatch dE441d@t 'any))) (if dE441f@ls/false (apply (lambda (dE4421@ie) (begin (if (not (dE2eb5@id? dE4421@ie)) (dE319c@syntax-violation 'export '"invalid export" dE4421@ie) (void)) (dE4411@f (cdr dE440b@exp*) (cons dE4421@ie dE440c@int*) (cons dE4421@ie dE440d@ext*)))) dE441f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE441d@t))))))))))) (set! dE4bbc@dE3118@parse-exports dE3118@parse-exports) (set! dE311a@parse-library-name (lambda (dE4423@spec) (letrec* ((dE4426@parse (lambda (dE4433@x) (let ((dE4435@t dE4433@x)) (let ((dE4437@ls/false (dE30bc@syntax-dispatch dE4435@t '(each-any)))) (if (and dE4437@ls/false (apply (lambda (dE4439@v*) (for-all (lambda (dE443b@x) (let ((dE443d@x (dE31a2@syntax->datum dE443b@x))) (and (integer? dE443d@x) (exact? dE443d@x)))) dE4439@v*)) dE4437@ls/false)) (apply (lambda (dE443f@v*) (values '() (map dE31a2@syntax->datum dE443f@v*))) dE4437@ls/false) (let ((dE4441@t dE4435@t)) (let ((dE4443@ls/false (dE30bc@syntax-dispatch dE4441@t '(any . any)))) (if (and dE4443@ls/false (apply (lambda (dE4445@x dE4446@rest) (symbol? (dE31a2@syntax->datum dE4445@x))) dE4443@ls/false)) (apply (lambda (dE4449@x dE444a@rest) (call-with-values (lambda () (dE4426@parse dE444a@rest)) (lambda (dE4451@dE444e dE4452@dE4450) (let ((dE4455@v* dE4452@dE4450) (dE4456@x* dE4451@dE444e)) (values (cons (dE31a2@syntax->datum dE4449@x) dE4456@x*) dE4455@v*))))) dE4443@ls/false) (let ((dE4459@t dE4441@t)) (let ((dE445b@ls/false (dE30bc@syntax-dispatch dE4459@t '()))) (if dE445b@ls/false (apply (lambda () (values '() '())) dE445b@ls/false) (let ((dE445d@t dE4459@t)) (let ((dE445f@ls/false (dE30bc@syntax-dispatch dE445d@t '_))) (if dE445f@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid library name" dE4423@spec)) dE445f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE445d@t)))))))))))))))) (call-with-values (lambda () (dE4426@parse dE4423@spec)) (lambda (dE442b@dE4428 dE442c@dE442a) (let ((dE442f@ver* dE442c@dE442a) (dE4430@name* dE442b@dE4428)) (begin (if (null? dE4430@name*) (dE319c@syntax-violation '#f '"empty library name" dE4423@spec) (void)) (values dE4430@name* dE442f@ver*)))))))) (set! dE4bbd@dE311a@parse-library-name dE311a@parse-library-name) (set! dE311c@parse-library (lambda (dE4461@e) (let ((dE4463@t dE4461@e)) (let ((dE4465@ls/false (dE30bc@syntax-dispatch dE4463@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and dE4465@ls/false (apply (lambda (dE4467@library dE4468@name* dE4469@export dE446a@exp* dE446b@import dE446c@imp* dE446d@b*) (and (eq? (dE31a2@syntax->datum dE4469@export) 'export) (eq? (dE31a2@syntax->datum dE446b@import) 'import) (eq? (dE31a2@syntax->datum dE4467@library) 'library))) dE4465@ls/false)) (apply (lambda (dE4475@library dE4476@name* dE4477@export dE4478@exp* dE4479@import dE447a@imp* dE447b@b*) (values dE4476@name* dE4478@exp* dE447a@imp* dE447b@b*)) dE4465@ls/false) (let ((dE4483@t dE4463@t)) (let ((dE4485@ls/false (dE30bc@syntax-dispatch dE4483@t '_))) (if dE4485@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"malformed library" dE4461@e)) dE4485@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4483@t))))))))) (set! dE4bbe@dE311c@parse-library dE311c@parse-library) (set! dE311e@parse-import-spec* (letrec* ((dE4488@idsyn? (lambda (dE4691@x) (symbol? (dE31a2@syntax->datum dE4691@x)))) (dE448a@dup-error (lambda (dE468f@name) (dE319c@syntax-violation 'import '"two imports with different bindings" dE468f@name))) (dE448c@merge-substs (lambda (dE467d@s dE467e@subst) (letrec* ((dE4682@insert-to-subst (lambda (dE4683@a dE4684@subst) (let ((dE4687@name (car dE4683@a)) (dE4688@label (cdr dE4683@a))) (let ((dE468b@t (assq dE4687@name dE4684@subst))) (if dE468b@t ((lambda (dE468d@x) (if (eq? (cdr dE468d@x) dE4688@label) dE4684@subst (dE448a@dup-error dE4687@name))) dE468b@t) (cons dE4683@a dE4684@subst))))))) (if (null? dE467d@s) dE467e@subst (dE4682@insert-to-subst (car dE467d@s) (dE448c@merge-substs (cdr dE467d@s) dE467e@subst)))))) (dE448e@exclude* (lambda (dE464d@sym* dE464e@subst) (letrec* ((dE4652@exclude (lambda (dE466b@sym dE466c@subst) (if (null? dE466c@subst) (dE319c@syntax-violation 'import '"cannot rename unbound identifier" dE466b@sym) (if (eq? dE466b@sym (caar dE466c@subst)) (values (cdar dE466c@subst) (cdr dE466c@subst)) (let ((dE466f@a (car dE466c@subst))) (call-with-values (lambda () (dE4652@exclude dE466b@sym (cdr dE466c@subst))) (lambda (dE4675@dE4672 dE4676@dE4674) (let ((dE4679@subst dE4676@dE4674) (dE467a@old dE4675@dE4672)) (values dE467a@old (cons dE466f@a dE4679@subst))))))))))) (if (null? dE464d@sym*) (values '() dE464e@subst) (call-with-values (lambda () (dE4652@exclude (car dE464d@sym*) dE464e@subst)) (lambda (dE4657@dE4654 dE4658@dE4656) (let ((dE465b@subst dE4658@dE4656) (dE465c@old dE4657@dE4654)) (call-with-values (lambda () (dE448e@exclude* (cdr dE464d@sym*) dE465b@subst)) (lambda (dE4663@dE4660 dE4664@dE4662) (let ((dE4667@subst dE4664@dE4662) (dE4668@old* dE4663@dE4660)) (values (cons dE465c@old dE4668@old*) dE4667@subst))))))))))) (dE4490@find* (lambda (dE4645@sym* dE4646@subst) (map (lambda (dE4649@x) (let ((dE464b@t (assq dE4649@x dE4646@subst))) (if dE464b@t (cdr dE464b@t) (dE319c@syntax-violation 'import '"cannot find identifier" dE4649@x)))) dE4645@sym*))) (dE4492@rem* (lambda (dE463d@sym* dE463e@subst) (let dE4643@f ((dE4641@subst dE463e@subst)) (if (null? dE4641@subst) '() (if (memq (caar dE4641@subst) dE463d@sym*) (dE4643@f (cdr dE4641@subst)) (cons (car dE4641@subst) (dE4643@f (cdr dE4641@subst)))))))) (dE4494@remove-dups (lambda (dE463b@ls) (if (null? dE463b@ls) '() (if (memq (car dE463b@ls) (cdr dE463b@ls)) (dE4494@remove-dups (cdr dE463b@ls)) (cons (car dE463b@ls) (dE4494@remove-dups (cdr dE463b@ls))))))) (dE4496@parse-library-name (lambda (dE4553@spec) (letrec* ((dE4556@subversion? (lambda (dE4637@x) (let ((dE4639@x (dE31a2@syntax->datum dE4637@x))) (and (integer? dE4639@x) (exact? dE4639@x) (>= dE4639@x '0))))) (dE4558@subversion-pred (lambda (dE45d7@x*) (let ((dE45d9@t dE45d7@x*)) (let ((dE45db@ls/false (dE30bc@syntax-dispatch dE45d9@t 'any))) (if (and dE45db@ls/false (apply (lambda (dE45dd@n) (dE4556@subversion? dE45dd@n)) dE45db@ls/false)) (apply (lambda (dE45df@n) (lambda (dE45e1@x) (= dE45e1@x (dE31a2@syntax->datum dE45df@n)))) dE45db@ls/false) (let ((dE45e3@t dE45d9@t)) (let ((dE45e5@ls/false (dE30bc@syntax-dispatch dE45e3@t '(any . each-any)))) (if (and dE45e5@ls/false (apply (lambda (dE45e7@p? dE45e8@sub*) (eq? (dE31a2@syntax->datum dE45e7@p?) 'and)) dE45e5@ls/false)) (apply (lambda (dE45eb@p? dE45ec@sub*) (let ((dE45ef@p* (map dE4558@subversion-pred dE45ec@sub*))) (lambda (dE45f1@x) (for-all (lambda (dE45f3@p) (dE45f3@p dE45f1@x)) dE45ef@p*)))) dE45e5@ls/false) (let ((dE45f5@t dE45e3@t)) (let ((dE45f7@ls/false (dE30bc@syntax-dispatch dE45f5@t '(any . each-any)))) (if (and dE45f7@ls/false (apply (lambda (dE45f9@p? dE45fa@sub*) (eq? (dE31a2@syntax->datum dE45f9@p?) 'or)) dE45f7@ls/false)) (apply (lambda (dE45fd@p? dE45fe@sub*) (let ((dE4601@p* (map dE4558@subversion-pred dE45fe@sub*))) (lambda (dE4603@x) (exists (lambda (dE4605@p) (dE4605@p dE4603@x)) dE4601@p*)))) dE45f7@ls/false) (let ((dE4607@t dE45f5@t)) (let ((dE4609@ls/false (dE30bc@syntax-dispatch dE4607@t '(any any)))) (if (and dE4609@ls/false (apply (lambda (dE460b@p? dE460c@sub) (eq? (dE31a2@syntax->datum dE460b@p?) 'not)) dE4609@ls/false)) (apply (lambda (dE460f@p? dE4610@sub) (let ((dE4613@p (dE4558@subversion-pred dE4610@sub))) (lambda (dE4615@x) (not (dE4613@p dE4615@x))))) dE4609@ls/false) (let ((dE4617@t dE4607@t)) (let ((dE4619@ls/false (dE30bc@syntax-dispatch dE4617@t '(any any)))) (if (and dE4619@ls/false (apply (lambda (dE461b@p? dE461c@n) (and (eq? (dE31a2@syntax->datum dE461b@p?) '<=) (dE4556@subversion? dE461c@n))) dE4619@ls/false)) (apply (lambda (dE461f@p? dE4620@n) (lambda (dE4623@x) (<= dE4623@x (dE31a2@syntax->datum dE4620@n)))) dE4619@ls/false) (let ((dE4625@t dE4617@t)) (let ((dE4627@ls/false (dE30bc@syntax-dispatch dE4625@t '(any any)))) (if (and dE4627@ls/false (apply (lambda (dE4629@p? dE462a@n) (and (eq? (dE31a2@syntax->datum dE4629@p?) '>=) (dE4556@subversion? dE462a@n))) dE4627@ls/false)) (apply (lambda (dE462d@p? dE462e@n) (lambda (dE4631@x) (>= dE4631@x (dE31a2@syntax->datum dE462e@n)))) dE4627@ls/false) (let ((dE4633@t dE4625@t)) (let ((dE4635@ls/false (dE30bc@syntax-dispatch dE4633@t '_))) (if dE4635@ls/false (apply (lambda () (dE319c@syntax-violation 'import '"invalid sub-version spec" dE4553@spec dE45d7@x*)) dE4635@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4633@t)))))))))))))))))))))))) (dE455a@version-pred (lambda (dE4587@x*) (let ((dE4589@t dE4587@x*)) (let ((dE458b@ls/false (dE30bc@syntax-dispatch dE4589@t '()))) (if dE458b@ls/false (apply (lambda () (lambda (dE458d@x) '#t)) dE458b@ls/false) (let ((dE458f@t dE4589@t)) (let ((dE4591@ls/false (dE30bc@syntax-dispatch dE458f@t '(any . each-any)))) (if (and dE4591@ls/false (apply (lambda (dE4593@c dE4594@ver*) (eq? (dE31a2@syntax->datum dE4593@c) 'and)) dE4591@ls/false)) (apply (lambda (dE4597@c dE4598@ver*) (let ((dE459b@p* (map dE455a@version-pred dE4598@ver*))) (lambda (dE459d@x) (for-all (lambda (dE459f@p) (dE459f@p dE459d@x)) dE459b@p*)))) dE4591@ls/false) (let ((dE45a1@t dE458f@t)) (let ((dE45a3@ls/false (dE30bc@syntax-dispatch dE45a1@t '(any . each-any)))) (if (and dE45a3@ls/false (apply (lambda (dE45a5@c dE45a6@ver*) (eq? (dE31a2@syntax->datum dE45a5@c) 'or)) dE45a3@ls/false)) (apply (lambda (dE45a9@c dE45aa@ver*) (let ((dE45ad@p* (map dE455a@version-pred dE45aa@ver*))) (lambda (dE45af@x) (exists (lambda (dE45b1@p) (dE45b1@p dE45af@x)) dE45ad@p*)))) dE45a3@ls/false) (let ((dE45b3@t dE45a1@t)) (let ((dE45b5@ls/false (dE30bc@syntax-dispatch dE45b3@t '(any any)))) (if (and dE45b5@ls/false (apply (lambda (dE45b7@c dE45b8@ver) (eq? (dE31a2@syntax->datum dE45b7@c) 'not)) dE45b5@ls/false)) (apply (lambda (dE45bb@c dE45bc@ver) (let ((dE45bf@p (dE455a@version-pred dE45bc@ver))) (lambda (dE45c1@x) (not (dE45bf@p dE45c1@x))))) dE45b5@ls/false) (let ((dE45c3@t dE45b3@t)) (let ((dE45c5@ls/false (dE30bc@syntax-dispatch dE45c3@t 'each-any))) (if dE45c5@ls/false (apply (lambda (dE45c7@sub*) (let ((dE45c9@p* (map dE4558@subversion-pred dE45c7@sub*))) (lambda (dE45cb@x) (let dE45d1@f ((dE45cd@p* dE45c9@p*) (dE45ce@x dE45cb@x)) (if (null? dE45cd@p*) '#t (if (null? dE45ce@x) '#f (and ((car dE45cd@p*) (car dE45ce@x)) (dE45d1@f (cdr dE45cd@p*) (cdr dE45ce@x))))))))) dE45c5@ls/false) (let ((dE45d3@t dE45c3@t)) (let ((dE45d5@ls/false (dE30bc@syntax-dispatch dE45d3@t '_))) (if dE45d5@ls/false (apply (lambda () (dE319c@syntax-violation 'import '"invalid version spec" dE4553@spec dE4587@x*)) dE45d5@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE45d3@t)))))))))))))))))))))) (let dE455d@f ((dE455b@x dE4553@spec)) (let ((dE455f@t dE455b@x)) (let ((dE4561@ls/false (dE30bc@syntax-dispatch dE455f@t '(each-any)))) (if dE4561@ls/false (apply (lambda (dE4563@version-spec*) (values '() (dE455a@version-pred dE4563@version-spec*))) dE4561@ls/false) (let ((dE4565@t dE455f@t)) (let ((dE4567@ls/false (dE30bc@syntax-dispatch dE4565@t '(any . any)))) (if (and dE4567@ls/false (apply (lambda (dE4569@x dE456a@x*) (dE4488@idsyn? dE4569@x)) dE4567@ls/false)) (apply (lambda (dE456d@x dE456e@x*) (call-with-values (lambda () (dE455d@f dE456e@x*)) (lambda (dE4575@dE4572 dE4576@dE4574) (let ((dE4579@pred dE4576@dE4574) (dE457a@name dE4575@dE4572)) (values (cons (dE31a2@syntax->datum dE456d@x) dE457a@name) dE4579@pred))))) dE4567@ls/false) (let ((dE457d@t dE4565@t)) (let ((dE457f@ls/false (dE30bc@syntax-dispatch dE457d@t '()))) (if dE457f@ls/false (apply (lambda () (values '() (lambda (dE4581@x) '#t))) dE457f@ls/false) (let ((dE4583@t dE457d@t)) (let ((dE4585@ls/false (dE30bc@syntax-dispatch dE4583@t '_))) (if dE4585@ls/false (apply (lambda () (dE319c@syntax-violation '#f '"invalid import spec" dE4553@spec)) dE4585@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4583@t))))))))))))))))) (dE4498@import-library (lambda (dE4543@spec*) (call-with-values (lambda () (dE4496@parse-library-name dE4543@spec*)) (lambda (dE4549@dE4546 dE454a@dE4548) (let ((dE454d@pred dE454a@dE4548) (dE454e@name dE4549@dE4546)) (begin (if (null? dE454e@name) (dE319c@syntax-violation 'import '"empty library name" dE4543@spec*) (void)) (let ((dE4551@lib (dE2cca@dE2b11@find-library-by-name dE454e@name))) (begin (if (not dE4551@lib) (dE319c@syntax-violation 'import '"cannot find library with required name" dE454e@name) (void)) (if (not (dE454d@pred (dE2ca4@dE2ac5@library-version dE4551@lib))) (dE319c@syntax-violation 'import '"library does not satisfy version specification" dE4543@spec* dE4551@lib) (void)) ((dE3128@imp-collector) dE4551@lib) (dE2cac@dE2ad5@library-subst dE4551@lib))))))))) (dE449a@get-import (lambda (dE44b5@spec) (let ((dE44b7@t dE44b5@spec)) (let ((dE44b9@ls/false (dE30bc@syntax-dispatch dE44b7@t '(any . each-any)))) (if (and dE44b9@ls/false (apply (lambda (dE44bb@x dE44bc@x*) (not (memq (dE31a2@syntax->datum dE44bb@x) '(for rename except only prefix library)))) dE44b9@ls/false)) (apply (lambda (dE44bf@x dE44c0@x*) (dE4498@import-library (cons dE44bf@x dE44c0@x*))) dE44b9@ls/false) (let ((dE44c3@t dE44b7@t)) (let ((dE44c5@ls/false (dE30bc@syntax-dispatch dE44c3@t '(any any . #(each (any any)))))) (if (and dE44c5@ls/false (apply (lambda (dE44c7@rename dE44c8@isp dE44c9@old* dE44ca@new*) (and (eq? (dE31a2@syntax->datum dE44c7@rename) 'rename) (for-all dE4488@idsyn? dE44c9@old*) (for-all dE4488@idsyn? dE44ca@new*))) dE44c5@ls/false)) (apply (lambda (dE44cf@rename dE44d0@isp dE44d1@old* dE44d2@new*) (let ((dE44d7@subst (dE449a@get-import dE44d0@isp)) (dE44d8@old* (map dE31a2@syntax->datum dE44d1@old*)) (dE44d9@new* (map dE31a2@syntax->datum dE44d2@new*))) (let ((dE44dd@old-label* (dE4490@find* dE44d8@old* dE44d7@subst))) (let ((dE44df@subst (dE4492@rem* dE44d8@old* dE44d7@subst))) (dE448c@merge-substs (map cons dE44d9@new* dE44dd@old-label*) dE44df@subst))))) dE44c5@ls/false) (let ((dE44e1@t dE44c3@t)) (let ((dE44e3@ls/false (dE30bc@syntax-dispatch dE44e1@t '(any any . each-any)))) (if (and dE44e3@ls/false (apply (lambda (dE44e5@except dE44e6@isp dE44e7@sym*) (and (eq? (dE31a2@syntax->datum dE44e5@except) 'except) (for-all dE4488@idsyn? dE44e7@sym*))) dE44e3@ls/false)) (apply (lambda (dE44eb@except dE44ec@isp dE44ed@sym*) (let ((dE44f1@subst (dE449a@get-import dE44ec@isp))) (dE4492@rem* (map dE31a2@syntax->datum dE44ed@sym*) dE44f1@subst))) dE44e3@ls/false) (let ((dE44f3@t dE44e1@t)) (let ((dE44f5@ls/false (dE30bc@syntax-dispatch dE44f3@t '(any any . each-any)))) (if (and dE44f5@ls/false (apply (lambda (dE44f7@only dE44f8@isp dE44f9@sym*) (and (eq? (dE31a2@syntax->datum dE44f7@only) 'only) (for-all dE4488@idsyn? dE44f9@sym*))) dE44f5@ls/false)) (apply (lambda (dE44fd@only dE44fe@isp dE44ff@sym*) (let ((dE4503@subst (dE449a@get-import dE44fe@isp)) (dE4504@sym* (map dE31a2@syntax->datum dE44ff@sym*))) (let ((dE4507@sym* (dE4494@remove-dups dE4504@sym*))) (let ((dE4509@lab* (dE4490@find* dE4507@sym* dE4503@subst))) (map cons dE4507@sym* dE4509@lab*))))) dE44f5@ls/false) (let ((dE450b@t dE44f3@t)) (let ((dE450d@ls/false (dE30bc@syntax-dispatch dE450b@t '(any any any)))) (if (and dE450d@ls/false (apply (lambda (dE450f@prefix dE4510@isp dE4511@p) (and (eq? (dE31a2@syntax->datum dE450f@prefix) 'prefix) (dE4488@idsyn? dE4511@p))) dE450d@ls/false)) (apply (lambda (dE4515@prefix dE4516@isp dE4517@p) (let ((dE451b@subst (dE449a@get-import dE4516@isp)) (dE451c@prefix (symbol->string (dE31a2@syntax->datum dE4517@p)))) (map (lambda (dE451f@x) (cons (string->symbol (string-append dE451c@prefix (symbol->string (car dE451f@x)))) (cdr dE451f@x))) dE451b@subst))) dE450d@ls/false) (let ((dE4521@t dE450b@t)) (let ((dE4523@ls/false (dE30bc@syntax-dispatch dE4521@t '(any each-any)))) (if (and dE4523@ls/false (apply (lambda (dE4525@library dE4526@spec*) (eq? (dE31a2@syntax->datum dE4525@library) 'library)) dE4523@ls/false)) (apply (lambda (dE4529@library dE452a@spec*) (dE4498@import-library dE452a@spec*)) dE4523@ls/false) (let ((dE452d@t dE4521@t)) (let ((dE452f@ls/false (dE30bc@syntax-dispatch dE452d@t '(any any . any)))) (if (and dE452f@ls/false (apply (lambda (dE4531@for dE4532@isp dE4533@rest) (eq? (dE31a2@syntax->datum dE4531@for) 'for)) dE452f@ls/false)) (apply (lambda (dE4537@for dE4538@isp dE4539@rest) (dE449a@get-import dE4538@isp)) dE452f@ls/false) (let ((dE453d@t dE452d@t)) (let ((dE453f@ls/false (dE30bc@syntax-dispatch dE453d@t 'any))) (if dE453f@ls/false (apply (lambda (dE4541@spec) (dE319c@syntax-violation 'import '"invalid import spec" dE4541@spec)) dE453f@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE453d@t))))))))))))))))))))))))))) (dE449c@add-imports! (lambda (dE44a5@imp dE44a6@h) (let ((dE44a9@subst (dE449a@get-import dE44a5@imp))) (for-each (lambda (dE44ab@x) (let ((dE44ad@name (car dE44ab@x)) (dE44ae@label (cdr dE44ab@x))) (let ((dE44b1@t (hashtable-ref dE44a6@h dE44ad@name '#f))) (if dE44b1@t ((lambda (dE44b3@l) (if (not (eq? dE44b3@l dE44ae@label)) (dE448a@dup-error dE44ad@name) (void))) dE44b1@t) (hashtable-set! dE44a6@h dE44ad@name dE44ae@label))))) dE44a9@subst))))) (lambda (dE449d@imp*) (let dE44a3@f ((dE449f@imp* dE449d@imp*) (dE44a0@h (make-eq-hashtable))) (if (null? dE449f@imp*) (hashtable-entries dE44a0@h) (begin (dE449c@add-imports! (car dE449f@imp*) dE44a0@h) (dE44a3@f (cdr dE449f@imp*) dE44a0@h))))))) (set! dE4bbf@dE311e@parse-import-spec* dE311e@parse-import-spec*) (set! dE3120@make-top-rib (lambda (dE4693@names dE4694@labels) (let ((dE4697@rib (dE2e69@make-empty-rib))) (begin (vector-for-each (lambda (dE4699@name dE469a@label) (begin (if (not (symbol? dE4699@name)) (error 'make-top-rib '"BUG: not a symbol" dE4699@name) (void)) (dE2e6d@extend-rib/nc! dE4697@rib (make-simple-struct 'stx '5 (list dE4699@name dE2e39@top-mark* '() '())) dE469a@label))) dE4693@names dE4694@labels) dE4697@rib)))) (set! dE4bc0@dE3120@make-top-rib dE3120@make-top-rib) (set! dE3122@make-collector (lambda () (let ((dE469d@ls '())) (lambda dE46a1 (let ((dE46a2 (length dE46a1))) (if (= dE46a2 '0) (apply (lambda () dE469d@ls) dE46a1) (if (= dE46a2 '1) (apply (lambda (dE469f@x) (set! dE469d@ls (dE2e32@set-cons dE469f@x dE469d@ls))) dE46a1) (error 'apply '"invalid arg count")))))))) (set! dE4bc1@dE3122@make-collector dE3122@make-collector) (set! dE3124@inv-collector (dE2a05@dE28e3@make-parameter (lambda dE46a3@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (dE46a5@x) (begin (if (not (procedure? dE46a5@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" dE46a5@x) (void)) dE46a5@x)))) (set! dE4bc2@dE3124@inv-collector dE3124@inv-collector) (set! dE3126@vis-collector (dE2a05@dE28e3@make-parameter (lambda dE46a7@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (dE46a9@x) (begin (if (not (procedure? dE46a9@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" dE46a9@x) (void)) dE46a9@x)))) (set! dE4bc3@dE3126@vis-collector dE3126@vis-collector) (set! dE3128@imp-collector (dE2a05@dE28e3@make-parameter (lambda dE46ab@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (dE46ad@x) (begin (if (not (procedure? dE46ad@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" dE46ad@x) (void)) dE46ad@x)))) (set! dE4bc4@dE3128@imp-collector dE3128@imp-collector) (set! dE312a@chi-library-internal (lambda (dE46af@e* dE46b0@rib dE46b1@top?) (call-with-values (lambda () (dE3114@chi-body* dE46af@e* '() '() '() '() '() '() '() dE46b0@rib dE46b1@top?)) (lambda (dE46c5@dE46b6 dE46c6@dE46b8 dE46c7@dE46ba dE46c8@dE46bc dE46c9@dE46be dE46ca@dE46c0 dE46cb@dE46c2 dE46cc@dE46c4) (let ((dE46d5@exp* dE46cc@dE46c4) (dE46d6@_kwd* dE46cb@dE46c2) (dE46d7@mod** dE46ca@dE46c0) (dE46d8@rhs* dE46c9@dE46be) (dE46d9@lex* dE46c8@dE46bc) (dE46da@mr dE46c7@dE46ba) (dE46db@r dE46c6@dE46b8) (dE46dc@e* dE46c5@dE46b6)) (values (append (apply append (reverse dE46d7@mod**)) dE46dc@e*) dE46db@r dE46da@mr (reverse dE46d9@lex*) (reverse dE46d8@rhs*) dE46d5@exp*)))))) (set! dE4bc5@dE312a@chi-library-internal dE312a@chi-library-internal) (set! dE312c@chi-interaction-expr (lambda (dE46e5@e dE46e6@rib dE46e7@r) (call-with-values (lambda () (dE3114@chi-body* (list dE46e5@e) dE46e7@r dE46e7@r '() '() '() '() '() dE46e6@rib '#t)) (lambda (dE46fb@dE46ec dE46fc@dE46ee dE46fd@dE46f0 dE46fe@dE46f2 dE46ff@dE46f4 dE4700@dE46f6 dE4701@dE46f8 dE4702@dE46fa) (let ((dE470b@_exp* dE4702@dE46fa) (dE470c@_kwd* dE4701@dE46f8) (dE470d@mod** dE4700@dE46f6) (dE470e@rhs* dE46ff@dE46f4) (dE470f@lex* dE46fe@dE46f2) (dE4710@mr dE46fd@dE46f0) (dE4711@r dE46fc@dE46ee) (dE4712@e* dE46fb@dE46ec)) (let ((dE471b@e* (dE30ec@expand-interaction-rhs*/init* (reverse dE470f@lex*) (reverse dE470e@rhs*) (append (apply append (reverse dE470d@mod**)) dE4712@e*) dE4711@r dE4710@mr))) (let ((dE471d@e (if (null? dE471b@e*) (dE2e1b@dE2d7c@build-void) (if (null? (cdr dE471b@e*)) (car dE471b@e*) (dE2e1a@dE2d7a@build-sequence '#f dE471b@e*))))) (values dE471d@e dE4711@r)))))))) (set! dE4bc6@dE312c@chi-interaction-expr dE312c@chi-interaction-expr) (set! dE312e@library-body-expander (lambda (dE471f@name dE4720@main-exp* dE4721@imp* dE4722@b* dE4723@top?) (letrec* ((dE472a@itc (dE3122@make-collector))) (let ((dE4733@dE472c dE3128@imp-collector) (dE4734@dE472e dE31ac@top-level-context) (dE4735@dE4730 dE472a@itc) (dE4736@dE4732 '#f)) (let ((dE473b@swap (lambda () (begin (let ((dE473d@t (dE4733@dE472c))) (begin (dE4733@dE472c dE4735@dE4730) (set! dE4735@dE4730 dE473d@t))) (let ((dE473f@t (dE4734@dE472e))) (begin (dE4734@dE472e dE4736@dE4732) (set! dE4736@dE4732 dE473f@t))))))) (dynamic-wind dE473b@swap (lambda () (call-with-values (lambda () (dE311e@parse-import-spec* dE4721@imp*)) (lambda (dE4745@dE4742 dE4746@dE4744) (let ((dE4749@subst-labels dE4746@dE4744) (dE474a@subst-names dE4745@dE4742)) (let ((dE474d@rib (dE3120@make-top-rib dE474a@subst-names dE4749@subst-labels))) (letrec* ((dE4750@wrap (lambda (dE47cb@x) (make-simple-struct 'stx '5 (list dE47cb@x dE2e39@top-mark* (list dE474d@rib) '()))))) (let ((dE4751@b* (map dE4750@wrap dE4722@b*)) (dE4752@main-exp* (map dE4750@wrap dE4720@main-exp*)) (dE4753@rtc (dE3122@make-collector)) (dE4754@vtc (dE3122@make-collector))) (let ((dE4761@dE475a dE3124@inv-collector) (dE4762@dE475c dE3126@vis-collector) (dE4763@dE475e dE4753@rtc) (dE4764@dE4760 dE4754@vtc)) (let ((dE4769@swap (lambda () (begin (let ((dE476b@t (dE4761@dE475a))) (begin (dE4761@dE475a dE4763@dE475e) (set! dE4763@dE475e dE476b@t))) (let ((dE476d@t (dE4762@dE475c))) (begin (dE4762@dE475c dE4764@dE4760) (set! dE4764@dE4760 dE476d@t))))))) (dynamic-wind dE4769@swap (lambda () (call-with-values (lambda () (dE312a@chi-library-internal dE4751@b* dE474d@rib dE4723@top?)) (lambda (dE477b@dE4770 dE477c@dE4772 dE477d@dE4774 dE477e@dE4776 dE477f@dE4778 dE4780@dE477a) (let ((dE4787@internal-exp* dE4780@dE477a) (dE4788@rhs* dE477f@dE4778) (dE4789@lex* dE477e@dE4776) (dE478a@mr dE477d@dE4774) (dE478b@r dE477c@dE4772) (dE478c@init* dE477b@dE4770)) (call-with-values (lambda () (dE3118@parse-exports (append dE4752@main-exp* dE4787@internal-exp*))) (lambda (dE4797@dE4794 dE4798@dE4796) (let ((dE479b@exp-id* dE4798@dE4796) (dE479c@exp-name* dE4797@dE4794)) (begin (dE2e71@seal-rib! dE474d@rib) (let ((dE479f@init* (dE30da@chi-expr* dE478c@init* dE478b@r dE478a@mr))) (let ((dE47a1@rhs* (dE30ee@chi-rhs* dE4788@rhs* dE478b@r dE478a@mr))) (begin (dE2e73@unseal-rib! dE474d@rib) (let ((dE47a3@loc* (map dE2e3f@gen-global dE4789@lex*)) (dE47a4@export-subst (dE3186@make-export-subst dE479c@exp-name* dE479b@exp-id*))) (letrec* ((dE47a8@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (dE3188@make-export-env/macros dE4789@lex* dE47a3@loc* dE478b@r)) (lambda (dE47af@dE47aa dE47b0@dE47ac dE47b1@dE47ae) (let ((dE47b5@macro* dE47b1@dE47ae) (dE47b6@global* dE47b0@dE47ac) (dE47b7@export-env dE47af@dE47aa)) (begin (for-each (lambda (dE47bb@s) (let ((dE47bd@name (car dE47bb@s)) (dE47be@label (cdr dE47bb@s))) (let ((dE47c1@p (assq dE47be@label dE47b7@export-env))) (if dE47c1@p (let ((dE47c3@b (cdr dE47c1@p))) (let ((dE47c5@type (car dE47c3@b))) (if (eq? dE47c5@type 'mutable) (dE319c@syntax-violation 'export dE47a8@errstr dE47bd@name) (void)))) (void))))) dE47a4@export-subst) (let ((dE47c7@invoke-body (dE2e20@dE2d86@build-library-letrec* '#f dE471f@name dE4789@lex* dE47a3@loc* dE47a1@rhs* (if (null? dE479f@init*) (dE2e1b@dE2d7c@build-void) (dE2e1a@dE2d7a@build-sequence '#f dE479f@init*)))) (dE47c8@invoke-definitions (map dE2e17@dE2cd9@build-global-define (map cdr dE47b6@global*)))) (values (dE472a@itc) (dE4753@rtc) (dE4754@vtc) (dE2e1a@dE2d7a@build-sequence '#f (append dE47c8@invoke-definitions (list dE47c7@invoke-body))) dE47b5@macro* dE47a4@export-subst dE47b7@export-env))))))))))))))))))) dE4769@swap)))))))))) dE473b@swap)))))) (set! dE4bc7@dE312e@library-body-expander dE312e@library-body-expander) (set! dE3130@core-library-expander (lambda (dE47cd@e dE47ce@verify-name) (call-with-values (lambda () (dE311c@parse-library dE47cd@e)) (lambda (dE47d9@dE47d2 dE47da@dE47d4 dE47db@dE47d6 dE47dc@dE47d8) (let ((dE47e1@b* dE47dc@dE47d8) (dE47e2@imp* dE47db@dE47d6) (dE47e3@exp* dE47da@dE47d4) (dE47e4@name* dE47d9@dE47d2)) (call-with-values (lambda () (dE311a@parse-library-name dE47e4@name*)) (lambda (dE47ed@dE47ea dE47ee@dE47ec) (let ((dE47f1@ver dE47ee@dE47ec) (dE47f2@name dE47ed@dE47ea)) (begin (dE47ce@verify-name dE47f2@name) (call-with-values (lambda () (dE312e@library-body-expander dE47f2@name dE47e3@exp* dE47e2@imp* dE47e1@b* '#f)) (lambda (dE4803@dE47f6 dE4804@dE47f8 dE4805@dE47fa dE4806@dE47fc dE4807@dE47fe dE4808@dE4800 dE4809@dE4802) (let ((dE4811@export-env dE4809@dE4802) (dE4812@export-subst dE4808@dE4800) (dE4813@visit-code dE4807@dE47fe) (dE4814@invoke-code dE4806@dE47fc) (dE4815@visit-req* dE4805@dE47fa) (dE4816@invoke-req* dE4804@dE47f8) (dE4817@imp* dE4803@dE47f6)) (values dE47f2@name dE47f1@ver dE4817@imp* dE4816@invoke-req* dE4815@visit-req* dE4814@invoke-code dE4813@visit-code dE4812@export-subst dE4811@export-env))))))))))))) (set! dE4bc8@dE3130@core-library-expander dE3130@core-library-expander) (set! dE3132@parse-top-level-program (lambda (dE481f@e*) (let ((dE4821@t dE481f@e*)) (let ((dE4823@ls/false (dE30bc@syntax-dispatch dE4821@t '((any . each-any) . each-any)))) (if (and dE4823@ls/false (apply (lambda (dE4825@import dE4826@imp* dE4827@b*) (eq? (dE31a2@syntax->datum dE4825@import) 'import)) dE4823@ls/false)) (apply (lambda (dE482b@import dE482c@imp* dE482d@b*) (values dE482c@imp* dE482d@b*)) dE4823@ls/false) (let ((dE4831@t dE4821@t)) (let ((dE4833@ls/false (dE30bc@syntax-dispatch dE4831@t '((any . any) . any)))) (if (and dE4833@ls/false (apply (lambda (dE4835@import dE4836@x dE4837@y) (eq? (dE31a2@syntax->datum dE4835@import) 'import)) dE4833@ls/false)) (apply (lambda (dE483b@import dE483c@x dE483d@y) (dE319c@syntax-violation 'expander '"invalid syntax of top-level program" (dE2eaf@syntax-car dE481f@e*))) dE4833@ls/false) (let ((dE4841@t dE4831@t)) (let ((dE4843@ls/false (dE30bc@syntax-dispatch dE4841@t '_))) (if dE4843@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) dE4843@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4841@t)))))))))))) (set! dE4bc9@dE3132@parse-top-level-program dE3132@parse-top-level-program) (set! dE3134@top-level-expander (lambda (dE4845@e*) (call-with-values (lambda () (dE3132@parse-top-level-program dE4845@e*)) (lambda (dE484b@dE4848 dE484c@dE484a) (let ((dE484f@b* dE484c@dE484a) (dE4850@imp* dE484b@dE4848)) (call-with-values (lambda () (dE312e@library-body-expander '() '() dE4850@imp* dE484f@b* '#t)) (lambda (dE4861@dE4854 dE4862@dE4856 dE4863@dE4858 dE4864@dE485a dE4865@dE485c dE4866@dE485e dE4867@dE4860) (let ((dE486f@export-env dE4867@dE4860) (dE4870@export-subst dE4866@dE485e) (dE4871@visit-code dE4865@dE485c) (dE4872@invoke-code dE4864@dE485a) (dE4873@visit-req* dE4863@dE4858) (dE4874@invoke-req* dE4862@dE4856) (dE4875@imp* dE4861@dE4854)) (values dE4874@invoke-req* dE4872@invoke-code))))))))) (set! dE4bca@dE3134@top-level-expander dE3134@top-level-expander) (set! dE3136@rp (dE2a02@dE28dd@make-record-printer 'env (lambda (dE487d@x dE487e@p dE487f@wr) (display '"#<environment>" dE487e@p)))) (set! dE4bcb@dE3136@rp dE3136@rp) (set! dE3140@env? (lambda (dE4883@x) (and (simple-struct? dE4883@x) (eq? (simple-struct-name dE4883@x) 'env)))) (set! dE4bcc@dE3140@env? dE3140@env?) (set! dE3142@env-names (lambda (dE4885@x) (simple-struct-ref dE4885@x '0))) (set! dE4bcd@dE3142@env-names dE3142@env-names) (set! dE3144@set-env-names! (lambda (dE4887@x dE4888@val) (simple-struct-set! dE4887@x '0 dE4888@val))) (set! dE4bce@dE3144@set-env-names! dE3144@set-env-names!) (set! dE3146@env-labels (lambda (dE488b@x) (simple-struct-ref dE488b@x '1))) (set! dE4bcf@dE3146@env-labels dE3146@env-labels) (set! dE3148@set-env-labels! (lambda (dE488d@x dE488e@val) (simple-struct-set! dE488d@x '1 dE488e@val))) (set! dE4bd0@dE3148@set-env-labels! dE3148@set-env-labels!) (set! dE314a@env-itc (lambda (dE4891@x) (simple-struct-ref dE4891@x '2))) (set! dE4bd1@dE314a@env-itc dE314a@env-itc) (set! dE314c@set-env-itc! (lambda (dE4893@x dE4894@val) (simple-struct-set! dE4893@x '2 dE4894@val))) (set! dE4bd2@dE314c@set-env-itc! dE314c@set-env-itc!) (set! dE314e@dummy '3) (set! dE4bd3@dE314e@dummy dE314e@dummy) (set! dE3150@rp (dE2a02@dE28dd@make-record-printer 'interaction-env (lambda (dE4897@x dE4898@p dE4899@wr) (display '"#<environment>" dE4898@p)))) (set! dE4bd4@dE3150@rp dE3150@rp) (set! dE315a@interaction-env? (lambda (dE489d@x) (and (simple-struct? dE489d@x) (eq? (simple-struct-name dE489d@x) 'interaction-env)))) (set! dE4bd5@dE315a@interaction-env? dE315a@interaction-env?) (set! dE315c@interaction-env-rib (lambda (dE489f@x) (simple-struct-ref dE489f@x '0))) (set! dE4bd6@dE315c@interaction-env-rib dE315c@interaction-env-rib) (set! dE315e@set-interaction-env-rib! (lambda (dE48a1@x dE48a2@val) (simple-struct-set! dE48a1@x '0 dE48a2@val))) (set! dE4bd7@dE315e@set-interaction-env-rib! dE315e@set-interaction-env-rib!) (set! dE3160@interaction-env-r (lambda (dE48a5@x) (simple-struct-ref dE48a5@x '1))) (set! dE4bd8@dE3160@interaction-env-r dE3160@interaction-env-r) (set! dE3162@set-interaction-env-r! (lambda (dE48a7@x dE48a8@val) (simple-struct-set! dE48a7@x '1 dE48a8@val))) (set! dE4bd9@dE3162@set-interaction-env-r! dE3162@set-interaction-env-r!) (set! dE3164@interaction-env-locs (lambda (dE48ab@x) (simple-struct-ref dE48ab@x '2))) (set! dE4bda@dE3164@interaction-env-locs dE3164@interaction-env-locs) (set! dE3166@set-interaction-env-locs! (lambda (dE48ad@x dE48ae@val) (simple-struct-set! dE48ad@x '2 dE48ae@val))) (set! dE4bdb@dE3166@set-interaction-env-locs! dE3166@set-interaction-env-locs!) (set! dE3168@dummy '3) (set! dE4bdc@dE3168@dummy dE3168@dummy) (set! dE316a@interaction-environment-symbols (lambda () (dE3172@environment-symbols (dE31aa@interaction-environment)))) (set! dE4bdd@dE316a@interaction-environment-symbols dE316a@interaction-environment-symbols) (set! dE316c@environment-bindings (lambda (dE48b1@e) (vector->list (vector-map (lambda (dE48b3@name dE48b4@label) (dE316e@parse-binding (cons dE48b3@name (dE2cd0@dE2b1d@imported-label->binding dE48b4@label)))) (dE3142@env-names dE48b1@e) (dE3146@env-labels dE48b1@e))))) (set! dE4bde@dE316c@environment-bindings dE316c@environment-bindings) (set! dE316e@parse-binding (lambda (dE48b7@b) (cons (car dE48b7@b) (let ((dE48b9@t (cadr dE48b7@b))) (if (memv dE48b9@t '(core-prim global)) 'procedure (if (memv dE48b9@t '(core-macro macro global-macro)) 'syntax (if (memv dE48b9@t '($core-rtd)) 'record (if (eq? (car dE48b7@b) (cadr dE48b7@b)) 'syntax 'unknown)))))))) (set! dE4bdf@dE316e@parse-binding dE316e@parse-binding) (set! dE3170@environment? (lambda (dE48bb@x) (or (dE3140@env? dE48bb@x) (dE315a@interaction-env? dE48bb@x)))) (set! dE4be0@dE3170@environment? dE3170@environment?) (set! dE3172@environment-symbols (lambda (dE48bd@x) (if (dE3140@env? dE48bd@x) (vector->list (dE3142@env-names dE48bd@x)) (if (dE315a@interaction-env? dE48bd@x) (map values (dE2e53@rib-sym* (dE315c@interaction-env-rib dE48bd@x))) (assertion-violation 'environment-symbols '"not an environment" dE48bd@x))))) (set! dE4be1@dE3172@environment-symbols dE3172@environment-symbols) (set! dE3174@environment (lambda dE48bf@imp* (let ((dE48c1@itc (dE3122@make-collector))) (let ((dE48c7@dE48c4 dE3128@imp-collector) (dE48c8@dE48c6 dE48c1@itc)) (let ((dE48cb@swap (lambda () (let ((dE48cd@t (dE48c7@dE48c4))) (begin (dE48c7@dE48c4 dE48c8@dE48c6) (set! dE48c8@dE48c6 dE48cd@t)))))) (dynamic-wind dE48cb@swap (lambda () (call-with-values (lambda () (dE311e@parse-import-spec* dE48bf@imp*)) (lambda (dE48d3@dE48d0 dE48d4@dE48d2) (let ((dE48d7@subst-labels dE48d4@dE48d2) (dE48d8@subst-names dE48d3@dE48d0)) (make-simple-struct 'env '4 (list dE48d8@subst-names dE48d7@subst-labels dE48c1@itc)))))) dE48cb@swap)))))) (set! dE4be2@dE3174@environment dE3174@environment) (set! dE3176@null-environment (lambda (dE48db@n) (begin (if (not (eqv? dE48db@n '5)) (assertion-violation 'null-environment '"not 5" dE48db@n) (void)) (dE3174@environment '(psyntax null-environment-5))))) (set! dE4be3@dE3176@null-environment dE3176@null-environment) (set! dE3178@scheme-report-environment (lambda (dE48dd@n) (begin (if (not (eqv? dE48dd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" dE48dd@n) (void)) (dE3174@environment '(psyntax scheme-report-environment-5))))) (set! dE4be4@dE3178@scheme-report-environment dE3178@scheme-report-environment) (set! dE317a@expand (lambda (dE48df@x dE48e0@env) (if (dE3140@env? dE48e0@env) (let ((dE48e3@rib (dE3120@make-top-rib (dE3142@env-names dE48e0@env) (dE3146@env-labels dE48e0@env)))) (let ((dE48e5@x (make-simple-struct 'stx '5 (list dE48df@x dE2e39@top-mark* (list dE48e3@rib) '()))) (dE48e6@itc (dE314a@env-itc dE48e0@env)) (dE48e7@rtc (dE3122@make-collector)) (dE48e8@vtc (dE3122@make-collector))) (let ((dE48ed@x (let ((dE48ff@dE48f0 dE31ac@top-level-context) (dE4900@dE48f2 dE3124@inv-collector) (dE4901@dE48f4 dE3126@vis-collector) (dE4902@dE48f6 dE3128@imp-collector) (dE4903@dE48f8 '#f) (dE4904@dE48fa dE48e7@rtc) (dE4905@dE48fc dE48e8@vtc) (dE4906@dE48fe dE48e6@itc)) (let ((dE490f@swap (lambda () (begin (let ((dE4911@t (dE48ff@dE48f0))) (begin (dE48ff@dE48f0 dE4903@dE48f8) (set! dE4903@dE48f8 dE4911@t))) (let ((dE4913@t (dE4900@dE48f2))) (begin (dE4900@dE48f2 dE4904@dE48fa) (set! dE4904@dE48fa dE4913@t))) (let ((dE4915@t (dE4901@dE48f4))) (begin (dE4901@dE48f4 dE4905@dE48fc) (set! dE4905@dE48fc dE4915@t))) (let ((dE4917@t (dE4902@dE48f6))) (begin (dE4902@dE48f6 dE4906@dE48fe) (set! dE4906@dE48fe dE4917@t))))))) (dynamic-wind dE490f@swap (lambda () (dE30de@chi-expr dE48e5@x '() '())) dE490f@swap))))) (begin (dE2e71@seal-rib! dE48e3@rib) (values dE48ed@x (dE48e7@rtc)))))) (if (dE315a@interaction-env? dE48e0@env) (let ((dE4919@rib (dE315c@interaction-env-rib dE48e0@env)) (dE491a@r (dE3160@interaction-env-r dE48e0@env)) (dE491b@rtc (dE3122@make-collector))) (let ((dE491f@x (make-simple-struct 'stx '5 (list dE48df@x dE2e39@top-mark* (list dE4919@rib) '())))) (call-with-values (lambda () (let ((dE4935@dE4926 dE31ac@top-level-context) (dE4936@dE4928 dE3124@inv-collector) (dE4937@dE492a dE3126@vis-collector) (dE4938@dE492c dE3128@imp-collector) (dE4939@dE492e dE48e0@env) (dE493a@dE4930 dE491b@rtc) (dE493b@dE4932 (dE3122@make-collector)) (dE493c@dE4934 (dE3122@make-collector))) (let ((dE4945@swap (lambda () (begin (let ((dE4947@t (dE4935@dE4926))) (begin (dE4935@dE4926 dE4939@dE492e) (set! dE4939@dE492e dE4947@t))) (let ((dE4949@t (dE4936@dE4928))) (begin (dE4936@dE4928 dE493a@dE4930) (set! dE493a@dE4930 dE4949@t))) (let ((dE494b@t (dE4937@dE492a))) (begin (dE4937@dE492a dE493b@dE4932) (set! dE493b@dE4932 dE494b@t))) (let ((dE494d@t (dE4938@dE492c))) (begin (dE4938@dE492c dE493c@dE4934) (set! dE493c@dE4934 dE494d@t))))))) (dynamic-wind dE4945@swap (lambda () (dE312c@chi-interaction-expr dE491f@x dE4919@rib dE491a@r)) dE4945@swap)))) (lambda (dE494f@dE4922 dE4950@dE4924) (let ((dE4953@r^ dE4950@dE4924) (dE4954@e dE494f@dE4922)) (begin (dE3162@set-interaction-env-r! dE48e0@env dE4953@r^) (values dE4954@e (dE491b@rtc)))))))) (assertion-violation 'expand '"not an environment" dE48e0@env))))) (set! dE4be5@dE317a@expand dE317a@expand) (set! dE317c@eval (lambda (dE4957@x dE4958@env) (begin (if (not (dE3170@environment? dE4958@env)) (error 'eval '"not an environment" dE4958@env) (void)) (call-with-values (lambda () (dE317a@expand dE4957@x dE4958@env)) (lambda (dE495f@dE495c dE4960@dE495e) (let ((dE4963@invoke-req* dE4960@dE495e) (dE4964@x dE495f@dE495c)) (begin (for-each dE2cd1@dE2b1f@invoke-library dE4963@invoke-req*) (eval-core (dE2a5b@dE2a13@expanded->core dE4964@x))))))))) (set! dE4be6@dE317c@eval dE317c@eval) (set! dE317e@library-expander (lambda dE49d5 (let ((dE49d6 (length dE49d5))) (if (= dE49d6 '3) (apply (lambda (dE4967@x dE4968@filename dE4969@verify-name) (letrec* ((dE496e@build-visit-code (lambda (dE49c3@macro*) (if (null? dE49c3@macro*) (dE2e1b@dE2d7c@build-void) (dE2e1a@dE2d7a@build-sequence '#f (map (lambda (dE49c5@x) (let ((dE49c7@loc (car dE49c5@x)) (dE49c8@src (cddr dE49c5@x))) (list 'set! dE49c7@loc dE49c8@src))) dE49c3@macro*))))) (dE4970@visit! (lambda (dE49bb@macro*) (for-each (lambda (dE49bd@x) (let ((dE49bf@loc (car dE49bd@x)) (dE49c0@proc (cadr dE49bd@x))) (set-symbol-value! dE49bf@loc dE49c0@proc))) dE49bb@macro*)))) (call-with-values (lambda () (dE3130@core-library-expander dE4967@x dE4969@verify-name)) (lambda (dE4983@dE4972 dE4984@dE4974 dE4985@dE4976 dE4986@dE4978 dE4987@dE497a dE4988@dE497c dE4989@dE497e dE498a@dE4980 dE498b@dE4982) (let ((dE4995@export-env dE498b@dE4982) (dE4996@export-subst dE498a@dE4980) (dE4997@macro* dE4989@dE497e) (dE4998@invoke-code dE4988@dE497c) (dE4999@vis* dE4987@dE497a) (dE499a@inv* dE4986@dE4978) (dE499b@imp* dE4985@dE4976) (dE499c@ver dE4984@dE4974) (dE499d@name dE4983@dE4972)) (let ((dE49a7@id (gensym)) (dE49a8@name dE499d@name) (dE49a9@ver dE499c@ver) (dE49aa@imp* (map dE2cd5@dE2b27@library-spec dE499b@imp*)) (dE49ab@vis* (map dE2cd5@dE2b27@library-spec dE4999@vis*)) (dE49ac@inv* (map dE2cd5@dE2b27@library-spec dE499a@inv*)) (dE49ad@visit-proc (lambda () (dE4970@visit! dE4997@macro*))) (dE49ae@invoke-proc (lambda () (eval-core (dE2a5b@dE2a13@expanded->core dE4998@invoke-code)))) (dE49af@visit-code (dE496e@build-visit-code dE4997@macro*)) (dE49b0@invoke-code dE4998@invoke-code)) (begin (dE2ccf@dE2b1b@install-library dE49a7@id dE49a8@name dE49a9@ver dE49aa@imp* dE49ab@vis* dE49ac@inv* dE4996@export-subst dE4995@export-env dE49ad@visit-proc dE49ae@invoke-proc dE49af@visit-code dE49b0@invoke-code '#t dE4968@filename) (values dE49a7@id dE49a8@name dE49a9@ver dE49aa@imp* dE49ab@vis* dE49ac@inv* dE49b0@invoke-code dE49af@visit-code dE4996@export-subst dE4995@export-env)))))))) dE49d5) (if (= dE49d6 '2) (apply (lambda (dE49cb@x dE49cc@filename) (dE317e@library-expander dE49cb@x dE49cc@filename (lambda (dE49cf@x) (values)))) dE49d5) (if (= dE49d6 '1) (apply (lambda (dE49d1@x) (dE317e@library-expander dE49d1@x '#f (lambda (dE49d3@x) (values)))) dE49d5) (error 'apply '"invalid arg count"))))))) (set! dE4be7@dE317e@library-expander dE317e@library-expander) (set! dE3180@boot-library-expand (lambda (dE49d7@x) (call-with-values (lambda () (dE317e@library-expander dE49d7@x)) (lambda (dE49ed@dE49da dE49ee@dE49dc dE49ef@dE49de dE49f0@dE49e0 dE49f1@dE49e2 dE49f2@dE49e4 dE49f3@dE49e6 dE49f4@dE49e8 dE49f5@dE49ea dE49f6@dE49ec) (let ((dE4a01@export-env dE49f6@dE49ec) (dE4a02@export-subst dE49f5@dE49ea) (dE4a03@visit-code dE49f4@dE49e8) (dE4a04@invoke-code dE49f3@dE49e6) (dE4a05@inv* dE49f2@dE49e4) (dE4a06@vis* dE49f1@dE49e2) (dE4a07@imp* dE49f0@dE49e0) (dE4a08@ver dE49ef@dE49de) (dE4a09@name dE49ee@dE49dc) (dE4a0a@id dE49ed@dE49da)) (values dE4a09@name dE4a04@invoke-code dE4a02@export-subst dE4a01@export-env)))))) (set! dE4be8@dE3180@boot-library-expand dE3180@boot-library-expand) (set! dE3182@rev-map-append (lambda (dE4a15@f dE4a16@ls dE4a17@ac) (if (null? dE4a16@ls) dE4a17@ac (dE3182@rev-map-append dE4a15@f (cdr dE4a16@ls) (cons (dE4a15@f (car dE4a16@ls)) dE4a17@ac))))) (set! dE4be9@dE3182@rev-map-append dE3182@rev-map-append) (set! dE3184@build-exports (lambda (dE4a1b@lex*+loc* dE4a1c@init*) (dE2e1a@dE2d7a@build-sequence '#f (cons (dE2e1b@dE2d7c@build-void) (dE3182@rev-map-append (lambda (dE4a1f@x) (list 'set! (cdr dE4a1f@x) (car dE4a1f@x))) dE4a1b@lex*+loc* dE4a1c@init*))))) (set! dE4bea@dE3184@build-exports dE3184@build-exports) (set! dE3186@make-export-subst (lambda (dE4a21@name* dE4a22@id*) (map (lambda (dE4a25@name dE4a26@id) (let ((dE4a29@label (dE2ecb@id->label dE4a26@id))) (begin (if (not dE4a29@label) (dE319c@syntax-violation '#f '"cannot export unbound identifier" dE4a26@id) (void)) (cons dE4a25@name dE4a29@label)))) dE4a21@name* dE4a22@id*))) (set! dE4beb@dE3186@make-export-subst dE3186@make-export-subst) (set! dE3188@make-export-env/macros (lambda (dE4a2b@lex* dE4a2c@loc* dE4a2d@r) (letrec* ((dE4a32@lookup (lambda (dE4a4f@x) (let dE4a57@f ((dE4a51@x dE4a4f@x) (dE4a52@lex* dE4a2b@lex*) (dE4a53@loc* dE4a2c@loc*)) (if (pair? dE4a52@lex*) (if (eq? dE4a51@x (car dE4a52@lex*)) (car dE4a53@loc*) (dE4a57@f dE4a51@x (cdr dE4a52@lex*) (cdr dE4a53@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let dE4a3b@f ((dE4a33@r dE4a2d@r) (dE4a34@env '()) (dE4a35@global* '()) (dE4a36@macro* '())) (if (null? dE4a33@r) (values dE4a34@env dE4a35@global* dE4a36@macro*) (let ((dE4a3d@x (car dE4a33@r))) (let ((dE4a3f@label (car dE4a3d@x)) (dE4a40@b (cdr dE4a3d@x))) (let ((dE4a43@t (dE2ed1@binding-type dE4a40@b))) (if (memv dE4a43@t '(lexical)) (let ((dE4a45@v (dE2ed3@binding-value dE4a40@b))) (let ((dE4a47@loc (dE4a32@lookup (dE3046@lexical-var dE4a45@v))) (dE4a48@type (if (dE3048@lexical-mutable? dE4a45@v) 'mutable 'global))) (dE4a3b@f (cdr dE4a33@r) (cons (cons* dE4a3f@label dE4a48@type dE4a47@loc) dE4a34@env) (cons (cons (dE3046@lexical-var dE4a45@v) dE4a47@loc) dE4a35@global*) dE4a36@macro*))) (if (memv dE4a43@t '(local-macro)) (let ((dE4a4b@loc (gensym))) (dE4a3b@f (cdr dE4a33@r) (cons (cons* dE4a3f@label 'global-macro dE4a4b@loc) dE4a34@env) dE4a35@global* (cons (cons dE4a4b@loc (dE2ed3@binding-value dE4a40@b)) dE4a36@macro*))) (if (memv dE4a43@t '(local-macro!)) (let ((dE4a4d@loc (gensym))) (dE4a3b@f (cdr dE4a33@r) (cons (cons* dE4a3f@label 'global-macro! dE4a4d@loc) dE4a34@env) dE4a35@global* (cons (cons dE4a4d@loc (dE2ed3@binding-value dE4a40@b)) dE4a36@macro*))) (if (memv dE4a43@t '($rtd $module)) (dE4a3b@f (cdr dE4a33@r) (cons dE4a3d@x dE4a34@env) dE4a35@global* dE4a36@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (dE2ed1@binding-type dE4a40@b) (dE2ed3@binding-value dE4a40@b)))))))))))))) (set! dE4bec@dE3188@make-export-env/macros dE3188@make-export-env/macros) (set! dE318a@generate-temporaries (lambda (dE4a59@ls) (let ((dE4a5b@t dE4a59@ls)) (let ((dE4a5d@ls/false (dE30bc@syntax-dispatch dE4a5b@t 'each-any))) (if dE4a5d@ls/false (apply (lambda (dE4a5f@ls) (map (lambda (dE4a61@x) (make-simple-struct 'stx '5 (list (let ((dE4a63@x (dE31a2@syntax->datum dE4a61@x))) (if (or (symbol? dE4a63@x) (string? dE4a63@x)) (gensym dE4a63@x) (gensym 't))) dE2e39@top-mark* '() '()))) dE4a5f@ls)) dE4a5d@ls/false) (let ((dE4a65@t dE4a5b@t)) (let ((dE4a67@ls/false (dE30bc@syntax-dispatch dE4a65@t '_))) (if dE4a67@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) dE4a67@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4a65@t))))))))) (set! dE4bed@dE318a@generate-temporaries dE318a@generate-temporaries) (set! dE318c@free-identifier=? (lambda (dE4a69@x dE4a6a@y) (if (dE2eb5@id? dE4a69@x) (if (dE2eb5@id? dE4a6a@y) (dE2ebb@free-id=? dE4a69@x dE4a6a@y) (assertion-violation 'free-identifier=? '"not an identifier" dE4a6a@y)) (assertion-violation 'free-identifier=? '"not an identifier" dE4a69@x)))) (set! dE4bee@dE318c@free-identifier=? dE318c@free-identifier=?) (set! dE318e@bound-identifier=? (lambda (dE4a6d@x dE4a6e@y) (if (dE2eb5@id? dE4a6d@x) (if (dE2eb5@id? dE4a6e@y) (dE2eb9@bound-id=? dE4a6d@x dE4a6e@y) (assertion-violation 'bound-identifier=? '"not an identifier" dE4a6e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" dE4a6d@x)))) (set! dE4bef@dE318e@bound-identifier=? dE318e@bound-identifier=?) (set! dE3190@make-source-condition (lambda (dE4a71@x) (letrec* ((dE4a7b@dE4a76 (make-record-type-descriptor '&source-information &condition-rtd 'dE4a79 '#f '#f '#((immutable file-name) (immutable line)))) (dE4a7d@dE4a78 '#f) (dE4a7f@dE4a77 (make-record-constructor-descriptor dE4a7b@dE4a76 &condition-rcd dE4a7d@dE4a78)) (dE4a82@dE4a75 (record-predicate dE4a7b@dE4a76)) (dE4a84@make-source-condition (record-constructor dE4a7f@dE4a77)) (dE4a86@dE4a73 (record-accessor dE4a7b@dE4a76 '0)) (dE4a88@dE4a74 (record-accessor dE4a7b@dE4a76 '1)) (dE4a8a@source-condition? (condition-predicate dE4a7b@dE4a76)) (dE4a8c@source-filename (condition-accessor dE4a7b@dE4a76 dE4a86@dE4a73)) (dE4a8e@source-character (condition-accessor dE4a7b@dE4a76 dE4a88@dE4a74))) (if (and (pair? dE4a71@x) (pair? (cdr dE4a71@x))) (dE4a84@make-source-condition (car dE4a71@x) (cadr dE4a71@x)) (condition))))) (set! dE4bf0@dE3190@make-source-condition dE3190@make-source-condition) (set! dE3192@extract-position-condition (lambda (dE4a8f@x) (dE3190@make-source-condition (dE3194@expression-position dE4a8f@x)))) (set! dE4bf1@dE3192@extract-position-condition dE3192@extract-position-condition) (set! dE3194@expression-position (lambda (dE4a91@x) (and (dE2e81@stx? dE4a91@x) (let ((dE4a93@x (dE2e83@stx-expr dE4a91@x))) (and (dE29f9@dE28cb@annotation? dE4a93@x) (dE29fa@dE28cd@annotation-source dE4a93@x)))))) (set! dE4bf2@dE3194@expression-position dE3194@expression-position) (set! dE3196@assertion-error (lambda (dE4a95@expr dE4a96@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list dE4a95@expr)) (dE3190@make-source-condition dE4a96@pos))))) (set! dE4bf3@dE3196@assertion-error dE3196@assertion-error) (set! dE3198@syntax-error (lambda (dE4a99@x . dE4a9b@args) (begin (if (not (for-all string? dE4a9b@args)) (assertion-violation 'syntax-error '"invalid argument" dE4a9b@args) (void)) (raise (condition (make-message-condition (if (null? dE4a9b@args) '"invalid syntax" (apply string-append dE4a9b@args))) (make-syntax-violation (dE31a2@syntax->datum dE4a99@x) '#f) (dE3192@extract-position-condition dE4a99@x)))))) (set! dE4bf4@dE3198@syntax-error dE3198@syntax-error) (set! dE319a@syntax-violation* (lambda (dE4a9d@who dE4a9e@msg dE4a9f@form dE4aa0@condition-object) (begin (if (not (string? dE4a9e@msg)) (assertion-violation 'syntax-violation '"message is not a string" dE4a9e@msg) (void)) (let ((dE4aa5@who (if (or (string? dE4a9d@who) (symbol? dE4a9d@who)) dE4a9d@who (if (not dE4a9d@who) (let ((dE4aa7@t dE4a9f@form)) (let ((dE4aa9@ls/false (dE30bc@syntax-dispatch dE4aa7@t 'any))) (if (and dE4aa9@ls/false (apply (lambda (dE4aab@id) (dE2eb5@id? dE4aab@id)) dE4aa9@ls/false)) (apply (lambda (dE4aad@id) (dE31a2@syntax->datum dE4aad@id)) dE4aa9@ls/false) (let ((dE4aaf@t dE4aa7@t)) (let ((dE4ab1@ls/false (dE30bc@syntax-dispatch dE4aaf@t '(any . any)))) (if (and dE4ab1@ls/false (apply (lambda (dE4ab3@id dE4ab4@rest) (dE2eb5@id? dE4ab3@id)) dE4ab1@ls/false)) (apply (lambda (dE4ab7@id dE4ab8@rest) (dE31a2@syntax->datum dE4ab7@id)) dE4ab1@ls/false) (let ((dE4abb@t dE4aaf@t)) (let ((dE4abd@ls/false (dE30bc@syntax-dispatch dE4abb@t '_))) (if dE4abd@ls/false (apply (lambda () '#f) dE4abd@ls/false) (dE319c@syntax-violation '#f '"invalid syntax" dE4abb@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" dE4a9d@who))))) (raise (condition (if dE4aa5@who (make-who-condition dE4aa5@who) (condition)) (make-message-condition dE4a9e@msg) dE4aa0@condition-object (dE3192@extract-position-condition dE4a9f@form))))))) (set! dE4bf5@dE319a@syntax-violation* dE319a@syntax-violation*) (set! dE319c@syntax-violation (lambda dE4acd (let ((dE4ace (length dE4acd))) (if (= dE4ace '3) (apply (lambda (dE4abf@who dE4ac0@msg dE4ac1@form) (dE319c@syntax-violation dE4abf@who dE4ac0@msg dE4ac1@form '#f)) dE4acd) (if (= dE4ace '4) (apply (lambda (dE4ac5@who dE4ac6@msg dE4ac7@form dE4ac8@subform) (dE319a@syntax-violation* dE4ac5@who dE4ac6@msg dE4ac7@form (make-syntax-violation (dE31a2@syntax->datum dE4ac7@form) (dE31a2@syntax->datum dE4ac8@subform)))) dE4acd) (error 'apply '"invalid arg count")))))) (set! dE4bf6@dE319c@syntax-violation dE319c@syntax-violation) (set! dE319e@identifier? (lambda (dE4acf@x) (dE2eb5@id? dE4acf@x))) (set! dE4bf7@dE319e@identifier? dE319e@identifier?) (set! dE31a0@datum->syntax (lambda (dE4ad1@id dE4ad2@datum) (if (dE2eb5@id? dE4ad1@id) (dE2e95@datum->stx dE4ad1@id dE4ad2@datum) (assertion-violation 'datum->syntax '"not an identifier" dE4ad1@id)))) (set! dE4bf8@dE31a0@datum->syntax dE31a0@datum->syntax) (set! dE31a2@syntax->datum (lambda (dE4ad5@x) (dE2ec9@stx->datum dE4ad5@x))) (set! dE4bf9@dE31a2@syntax->datum dE31a2@syntax->datum) (set! dE31a4@ungensym-all (lambda (dE4ad7@code) (if (pair? dE4ad7@code) (cons (dE31a4@ungensym-all (car dE4ad7@code)) (dE31a4@ungensym-all (cdr dE4ad7@code))) (if (symbol? dE4ad7@code) (ungensym dE4ad7@code) dE4ad7@code)))) (set! dE4bfa@dE31a4@ungensym-all dE31a4@ungensym-all) (set! dE31a6@compile-r6rs-top-level (lambda (dE4ad9@x*) (call-with-values (lambda () (dE3134@top-level-expander dE4ad9@x*)) (lambda (dE4adf@dE4adc dE4ae0@dE4ade) (let ((dE4ae3@invoke-code dE4ae0@dE4ade) (dE4ae4@lib* dE4adf@dE4adc)) (lambda () (begin (for-each dE2cd1@dE2b1f@invoke-library dE4ae4@lib*) (let ((dE4ae7@expanded (dE2a5b@dE2a13@expanded->core dE4ae3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (dE31a4@ungensym-all dE4ae7@expanded)) (void)) (eval-core dE4ae7@expanded)))))))))) (set! dE4bfb@dE31a6@compile-r6rs-top-level dE31a6@compile-r6rs-top-level) (set! dE31a8@pre-compile-r6rs-top-level (lambda (dE4ae9@x*) (call-with-values (lambda () (dE3134@top-level-expander dE4ae9@x*)) (lambda (dE4aef@dE4aec dE4af0@dE4aee) (let ((dE4af3@invoke-code dE4af0@dE4aee) (dE4af4@lib* dE4aef@dE4aec)) (begin (for-each dE2cd1@dE2b1f@invoke-library dE4af4@lib*) (dE2a03@dE28df@compile-core (dE2a5b@dE2a13@expanded->core dE4af3@invoke-code)))))))) (set! dE4bfc@dE31a8@pre-compile-r6rs-top-level dE31a8@pre-compile-r6rs-top-level) (set! dE31aa@interaction-environment (let ((dE4af7@the-env '#f)) (lambda () (or dE4af7@the-env (let ((dE4af9@lib (dE2cca@dE2b11@find-library-by-name '(mosh interaction))) (dE4afa@rib (dE2e69@make-empty-rib))) (begin (let ((dE4afd@subst (dE2cac@dE2ad5@library-subst dE4af9@lib))) (begin (dE2e55@set-rib-sym*! dE4afa@rib (map car dE4afd@subst)) (dE2e59@set-rib-mark**! dE4afa@rib (map (lambda (dE4aff@x) dE2e39@top-mark*) dE4afd@subst)) (dE2e5d@set-rib-label*! dE4afa@rib (map cdr dE4afd@subst)))) (let ((dE4b01@env (make-simple-struct 'interaction-env '4 (list dE4afa@rib '() '())))) (begin (set! dE4af7@the-env dE4b01@env) dE4b01@env)))))))) (set! dE4bfd@dE31aa@interaction-environment dE31aa@interaction-environment) (set! dE31ac@top-level-context (dE2a05@dE28e3@make-parameter '#f)) (set! dE4bfe@dE31ac@top-level-context dE31ac@top-level-context) (dE2cc7@dE2b0b@current-library-expander dE317e@library-expander))
(begin (begin (dE2a58@dE2a0d@current-primitive-locations (lambda (dE514d@x) (let ((dE514f@t (assq dE514d@x '((syntax-error . dE4bf4@dE3198@syntax-error) (syntax-dispatch . dE4b92@dE30bc@syntax-dispatch) (load . dE4d7e@dE4c25@load) (interaction-environment . dE4bfd@dE31aa@interaction-environment) (library-path . dE2cbf@dE2afb@library-path) (mosh-cache-dir . dE2a06@dE28e5@mosh-cache-dir) (make-parameter . dE2a05@dE28e3@make-parameter) (make-variable-transformer . dE4b4f@dE2ee7@make-variable-transformer) (identifier? . dE4bf7@dE319e@identifier?) (generate-temporaries . dE4bed@dE318a@generate-temporaries) (free-identifier=? . dE4bee@dE318c@free-identifier=?) (syntax->datum . dE4bf9@dE31a2@syntax->datum) (datum->syntax . dE4bf8@dE31a0@datum->syntax) (bound-identifier=? . dE4bef@dE318e@bound-identifier=?) (scheme-report-environment . dE4be4@dE3178@scheme-report-environment) (null-environment . dE4be3@dE3176@null-environment) (command-line . dE4d7b@dE4c1f@command-line) (eval . dE4be6@dE317c@eval) (environment . dE4be2@dE3174@environment) (syntax-violation . dE4bf6@dE319c@syntax-violation) (assertion-error . dE4bf3@dE3196@assertion-error))))) (if dE514f@t (cdr dE514f@t) '#f)))) (dE2ccf@dE2b1b@install-library 'dE512a '(mosh interaction) '() '() '() '() '((regexp? . dE50ea) (alist->eq-hash-table . dE50e6) (format . dE50e3) (string-split . dE50d8) (call-process . dE50d2) (set-current-directory! . dE50ce) (expand-path . dE50cd) (current-directory . dE50cc) (%spawn . dE50cb) (%waitpid . dE50ca) (simple-struct-name . dE50c9) (simple-struct-set! . dE50c8) (simple-struct-ref . dE50c7) (make-simple-struct . dE50c6) (simple-struct? . dE50c5) (pointer-ref-c-int64 . dE50c4) (pointer-ref-c-int32 . dE50c3) (pointer-ref-c-int16 . dE50c2) (pointer-ref-c-int8 . dE50c1) (pointer-ref-c-uint64 . dE50c0) (pointer-ref-c-uint32 . dE50bf) (pointer-ref-c-uint16 . dE50be) (pointer-ref-c-uint8 . dE50bd) (pointer-set-c-uint64! . dE50bc) (pointer-set-c-uint32! . dE50bb) (pointer-set-c-uint16! . dE50ba) (pointer-set-c-uint8! . dE50b9) (pointer-set-c-int64! . dE50b8) (pointer-set-c-int32! . dE50b7) (pointer-set-c-int16! . dE50b6) (pointer-set-c-int8! . dE50b5) (pointer-set-c-pointer! . dE50b4) (pointer-set-c-double! . dE50b3) (pointer-set-c-float! . dE50b2) (pointer-set-c-long-long! . dE50b1) (pointer-set-c-long! . dE50b0) (pointer-set-c-int! . dE50af) (pointer-set-c-short! . dE50ae) (pointer-set-c-char! . dE50ad) (pointer-ref-c-pointer . dE50ac) (pointer-ref-c-double . dE50ab) (pointer-ref-c-float . dE50aa) (pointer-ref-c-unsigned-long-long . dE50a9) (pointer-ref-c-signed-long-long . dE50a8) (pointer-ref-c-unsigned-long . dE50a7) (pointer-ref-c-signed-long . dE50a6) (pointer-ref-c-unsigned-int . dE50a5) (pointer-ref-c-signed-int . dE50a4) (pointer-ref-c-unsigned-short . dE50a3) (pointer-ref-c-signed-short . dE50a2) (pointer-ref-c-unsigned-char . dE50a1) (pointer-ref-c-signed-char . dE50a0) (pointer->integer . dE509f) (integer->pointer . dE509e) (pointer? . dE509d) (shared-errno . dE509c) (%ffi-supported? . dE5097) (%ffi-pointer->string . dE5096) (%ffi-call . dE5095) (%ffi-lookup . dE5094) (%ffi-open . dE5093) (null-terminated-utf8->string . dE5092) (null-terminated-bytevector->string . dE5091) (%exec . dE5090) (%fork . dE508f) (%pipe . dE508e) (p . dE508d) (whereis . dE5071) (register . dE5070) (vm-join! . dE506f) (vm-set-value! . dE506e) (vm? . dE506d) (main-vm? . dE506c) (vm-eval . dE506b) (vm-self . dE506a) (vm-start! . dE5069) (make-vm . dE5068) (mutex-try-lock! . dE5067) (mutex-unlock! . dE5066) (mutex-lock! . dE5065) (mutex? . dE5064) (make-mutex . dE5063) (condition-variable-notify-all! . dE5062) (condition-variable-notify! . dE5061) (condition-variable-wait! . dE5060) (make-condition-variable . dE505f) (write/ss . dE505e) (string-upcase . dE5046) (string-titlecase . dE5045) (string-normalize-nfkd . dE5044) (string-normalize-nfkc . dE5043) (string-normalize-nfd . dE5042) (string-normalize-nfc . dE5041) (string-foldcase . dE5040) (string-downcase . dE503f) (string-ci>? . dE503e) (string-ci>=? . dE503d) (string-ci=? . dE503c) (string-ci<? . dE503b) (string-ci<=? . dE503a) (char-whitespace? . dE5039) (char-upper-case? . dE5038) (char-title-case? . dE5037) (char-numeric? . dE5036) (char-lower-case? . dE5035) (char-general-category . dE5034) (char-upcase . dE5033) (char-titlecase . dE5032) (char-foldcase . dE5031) (char-downcase . dE5030) (char-ci>? . dE502f) (char-ci>=? . dE502e) (char-ci=? . dE502d) (char-ci<? . dE502c) (char-ci<=? . dE502b) (char-alphabetic? . dE502a) (make-variable-transformer . dE2ee6) (identifier? . dE319d) (generate-temporaries . dE3189) (free-identifier=? . dE318b) (syntax->datum . dE31a1) (datum->syntax . dE319f) (bound-identifier=? . dE318d) (record-type-descriptor? . dE5029) (record-predicate . dE5028) (record-mutator . dE5027) (record-constructor . dE5026) (record-accessor . dE5025) (make-record-type-descriptor . dE5024) (make-record-constructor-descriptor . dE5023) (record? . dE5022) (record-type-uid . dE5021) (record-type-sealed? . dE5020) (record-type-parent . dE501f) (record-type-opaque? . dE501e) (record-type-name . dE501d) (record-type-generative? . dE501c) (record-type-field-names . dE501b) (record-rtd . dE501a) (record-field-mutable? . dE5019) (delete-file . dE5018) (file-exists? . dE5017) (vector-sort! . dE5016) (vector-sort . dE5015) (list-sort . dE5014) (symbol-hash . dE5013) (string-ci-hash . dE5012) (string-hash . dE5011) (equal-hash . dE5010) (hashtable-equivalence-function . dE500f) (make-hashtable . dE500e) (hashtable-hash-function . dE500d) (make-eqv-hashtable . dE500c) (make-eq-hashtable . dE500b) (hashtable? . dE500a) (hashtable-update! . dE5009) (hashtable-size . dE5008) (hashtable-set! . dE5007) (hashtable-ref . dE5006) (hashtable-mutable? . dE5005) (hashtable-keys . dE5004) (hashtable-entries . dE5003) (hashtable-delete! . dE5002) (hashtable-copy . dE5001) (hashtable-contains? . dE5000) (hashtable-clear! . dE4fff) (call-with-output-file . dE4ffe) (call-with-input-file . dE4ffd) (write-char . dE4ffc) (write . dE4ffb) (with-output-to-file . dE4ffa) (with-input-from-file . dE4ff9) (read-char . dE4ff8) (read . dE4ff7) (peek-char . dE4ff6) (open-output-file . dE4ff5) (open-input-file . dE4ff4) (newline . dE4ff3) (display . dE4ff2) (close-output-port . dE4ff1) (close-input-port . dE4ff0) (eof-object? . dE4fef) (eof-object . dE4fee) (current-error-port . dE4fed) (current-output-port . dE4fec) (current-input-port . dE4feb) (output-port? . dE4fea) (input-port? . dE4fe9) (utf-8-codec . dE4fe8) (utf-16-codec . dE4fe7) (transcoder-error-handling-mode . dE4fe6) (transcoder-eol-style . dE4fe5) (transcoder-codec . dE4fe4) (transcoded-port . dE4fe3) (textual-port? . dE4fe2) (string->bytevector . dE4fe1) (standard-output-port . dE4fe0) (standard-input-port . dE4fdf) (standard-error-port . dE4fde) (set-port-position! . dE4fdd) (put-u8 . dE4fdc) (put-string . dE4fdb) (put-datum . dE4fda) (put-char . dE4fd9) (put-bytevector . dE4fd8) (port? . dE4fd7) (port-transcoder . dE4fd6) (port-position . dE4fd5) (port-has-set-port-position!? . dE4fd4) (port-has-port-position? . dE4fd3) (port-eof? . dE4fd2) (output-port-buffer-mode . dE4fd1) (open-string-output-port . dE4fd0) (open-string-input-port . dE4fcf) (open-file-output-port . dE4fce) (open-file-input/output-port . dE4fcd) (open-file-input-port . dE4fcc) (open-bytevector-output-port . dE4fcb) (open-bytevector-input-port . dE4fca) (native-transcoder . dE4fc9) (native-eol-style . dE4fc8) (make-transcoder . dE4fc7) (latin-1-codec . dE4fc6) (make-i/o-write-error . dE4fc5) (make-i/o-read-error . dE4fc4) (make-i/o-port-error . dE4fc3) (make-i/o-invalid-position-error . dE4fc2) (make-i/o-filename-error . dE4fc1) (make-i/o-file-protection-error . dE4fc0) (make-i/o-file-is-read-only-error . dE4fbf) (make-i/o-file-does-not-exist-error . dE4fbe) (make-i/o-file-already-exists-error . dE4fbd) (make-i/o-error . dE4fbc) (make-i/o-encoding-error . dE4fbb) (make-i/o-decoding-error . dE4fba) (make-custom-textual-output-port . dE4fb9) (make-custom-textual-input/output-port . dE4fb8) (make-custom-textual-input-port . dE4fb7) (make-custom-binary-output-port . dE4fb6) (make-custom-binary-input/output-port . dE4fb5) (make-custom-binary-input-port . dE4fb4) (make-bytevector . dE4fb3) (lookahead-u8 . dE4fb2) (lookahead-char . dE4fb1) (i/o-write-error? . dE4fb0) (i/o-read-error? . dE4faf) (i/o-port-error? . dE4fae) (i/o-invalid-position-error? . dE4fad) (i/o-filename-error? . dE4fac) (i/o-file-protection-error? . dE4fab) (i/o-file-is-read-only-error? . dE4faa) (i/o-file-does-not-exist-error? . dE4fa9) (i/o-file-already-exists-error? . dE4fa8) (i/o-error? . dE4fa7) (i/o-error-position . dE4fa6) (i/o-error-port . dE4fa5) (i/o-error-filename . dE4fa4) (i/o-encoding-error? . dE4fa3) (i/o-encoding-error-char . dE4fa2) (i/o-decoding-error? . dE4fa1) (get-u8 . dE4fa0) (get-string-n! . dE4f9f) (get-string-n . dE4f9e) (get-string-all . dE4f9d) (get-line . dE4f9c) (get-datum . dE4f9b) (get-char . dE4f9a) (get-bytevector-some . dE4f99) (get-bytevector-n! . dE4f98) (get-bytevector-n . dE4f97) (get-bytevector-all . dE4f96) (flush-output-port . dE4f95) (close-port . dE4f94) (exit . dE4f8c) (command-line . dE4c1e) (string-fill! . dE4f8b) (string-set! . dE4f8a) (set-cdr! . dE4f89) (set-car! . dE4f88) (remove . dE4f87) (remv . dE4f86) (remp . dE4f85) (remq . dE4f84) (partition . dE4f83) (memv . dE4f82) (memq . dE4f81) (memp . dE4f80) (member . dE4f7f) (exists . dE4f7e) (for-all . dE4f7d) (fold-right . dE4f7c) (fold-left . dE4f7b) (find . dE4f7a) (filter . dE4f79) (cons* . dE4f78) (assv . dE4f77) (assq . dE4f76) (assp . dE4f75) (assoc . dE4f74) (call-with-string-output-port . dE4f73) (call-with-port . dE4f72) (call-with-bytevector-output-port . dE4f71) (bytevector->string . dE4f70) (buffer-mode? . dE4f6f) (binary-port? . dE4f6e) (with-exception-handler . dE4f6d) (raise-continuable . dE4f6c) (raise . dE4f6b) (eval . dE317b) (environment . dE3173) (make-enumeration . dE4f6a) (enum-set=? . dE4f69) (enum-set-universe . dE4f68) (enum-set-union . dE4f67) (enum-set-subset? . dE4f66) (enum-set-projection . dE4f65) (enum-set-member? . dE4f64) (enum-set-intersection . dE4f63) (enum-set-indexer . dE4f62) (enum-set-difference . dE4f61) (enum-set-constructor . dE4f60) (enum-set-complement . dE4f5f) (enum-set->list . dE4f5e) (who-condition? . dE4f5d) (warning? . dE4f5c) (violation? . dE4f5b) (undefined-violation? . dE4f5a) (syntax-violation? . dE4f59) (syntax-violation-subform . dE4f58) (syntax-violation-form . dE4f57) (syntax-violation . dE319b) (simple-conditions . dE4f56) (serious-condition? . dE4f55) (non-continuable-violation? . dE4f54) (message-condition? . dE4f53) (make-who-condition . dE4f52) (make-warning . dE4f51) (make-violation . dE4f50) (make-undefined-violation . dE4f4f) (make-syntax-violation . dE4f4e) (make-serious-condition . dE4f4d) (make-non-continuable-violation . dE4f4c) (make-message-condition . dE4f4b) (make-lexical-violation . dE4f4a) (make-irritants-condition . dE4f49) (make-implementation-restriction-violation . dE4f48) (make-error . dE4f47) (make-assertion-violation . dE4f46) (lexical-violation? . dE4f45) (irritants-condition? . dE4f44) (implementation-restriction-violation? . dE4f43) (error? . dE4f42) (condition-who . dE4f41) (condition-predicate . dE4f40) (condition-message . dE4f3f) (condition-irritants . dE4f3e) (condition-accessor . dE4f3d) (condition . dE4f3c) (assertion-violation? . dE4f3b) (condition? . dE4f3a) (utf32->string . dE4f39) (utf16->string . dE4f38) (utf8->string . dE4f37) (uint-list->bytevector . dE4f36) (u8-list->bytevector . dE4f35) (string->utf8 . dE4f34) (string->utf32 . dE4f33) (string->utf16 . dE4f32) (sint-list->bytevector . dE4f31) (native-endianness . dE4f30) (bytevector? . dE4f2f) (bytevector=? . dE4f2e) (bytevector-uint-set! . dE4f2d) (bytevector-uint-ref . dE4f2c) (bytevector-u8-set! . dE4f2b) (bytevector-u8-ref . dE4f2a) (bytevector-u64-set! . dE4f29) (bytevector-u64-ref . dE4f28) (bytevector-u64-native-set! . dE4f27) (bytevector-u64-native-ref . dE4f26) (bytevector-u32-set! . dE4f25) (bytevector-u32-ref . dE4f24) (bytevector-u32-native-set! . dE4f23) (bytevector-u32-native-ref . dE4f22) (bytevector-u16-set! . dE4f21) (bytevector-u16-ref . dE4f20) (bytevector-u16-native-set! . dE4f1f) (bytevector-u16-native-ref . dE4f1e) (bytevector-sint-set! . dE4f1d) (bytevector-sint-ref . dE4f1c) (bytevector-s8-set! . dE4f1b) (bytevector-s8-ref . dE4f1a) (bytevector-s64-set! . dE4f19) (bytevector-s64-ref . dE4f18) (bytevector-s64-native-set! . dE4f17) (bytevector-s64-native-ref . dE4f16) (bytevector-s32-set! . dE4f15) (bytevector-s32-ref . dE4f14) (bytevector-s32-native-set! . dE4f13) (bytevector-s32-native-ref . dE4f12) (bytevector-s16-set! . dE4f11) (bytevector-s16-ref . dE4f10) (bytevector-s16-native-set! . dE4f0f) (bytevector-s16-native-ref . dE4f0e) (bytevector-length . dE4f0d) (bytevector-ieee-single-ref . dE4f0c) (bytevector-ieee-single-set! . dE4f0b) (bytevector-ieee-single-native-set! . dE4f0a) (bytevector-ieee-single-native-ref . dE4f09) (bytevector-ieee-double-set! . dE4f08) (bytevector-ieee-double-ref . dE4f07) (bytevector-ieee-double-native-set! . dE4f06) (bytevector-ieee-double-native-ref . dE4f05) (bytevector-fill! . dE4f04) (bytevector-copy! . dE4f03) (bytevector-copy . dE4f02) (bytevector->uint-list . dE4f01) (bytevector->u8-list . dE4f00) (bytevector->sint-list . dE4eff) (no-nans-violation? . dE4efe) (no-infinities-violation? . dE4efd) (make-no-nans-violation . dE4efc) (make-no-infinities-violation . dE4efb) (real->flonum . dE4efa) (flzero? . dE4ef9) (fltruncate . dE4ef8) (fltan . dE4ef7) (flsqrt . dE4ef6) (flsin . dE4ef5) (flround . dE4ef4) (flpositive? . dE4ef3) (flonum? . dE4ef2) (flodd? . dE4ef1) (flnumerator . dE4ef0) (flnegative? . dE4eef) (flnan? . dE4eee) (flmod0 . dE4eed) (flmod . dE4eec) (flmin . dE4eeb) (flmax . dE4eea) (fllog . dE4ee9) (flinteger? . dE4ee8) (flinfinite? . dE4ee7) (flfloor . dE4ee6) (flfinite? . dE4ee5) (flexpt . dE4ee4) (flexp . dE4ee3) (fleven? . dE4ee2) (fldiv0-and-mod0 . dE4ee1) (fldiv0 . dE4ee0) (fldiv-and-mod . dE4edf) (fldiv . dE4ede) (fldenominator . dE4edd) (flcos . dE4edc) (flceiling . dE4edb) (flatan . dE4eda) (flasin . dE4ed9) (flacos . dE4ed8) (flabs . dE4ed7) (fl>? . dE4ed6) (fl>=? . dE4ed5) (fl=? . dE4ed4) (fl<? . dE4ed3) (fl<=? . dE4ed2) (fl/ . dE4ed1) (fl- . dE4ed0) (fl+ . dE4ecf) (fl* . dE4ece) (fixnum->flonum . dE4ecd) (fxzero? . dE4ecc) (fxxor . dE4ecb) (fxrotate-bit-field . dE4eca) (fxreverse-bit-field . dE4ec9) (fxpositive? . dE4ec8) (fxodd? . dE4ec7) (fxnot . dE4ec6) (fxnegative? . dE4ec5) (fxmod0 . dE4ec4) (fxmod . dE4ec3) (fxmin . dE4ec2) (fxmax . dE4ec1) (fxlength . dE4ec0) (fxior . dE4ebf) (fxif . dE4ebe) (fxfirst-bit-set . dE4ebd) (fxeven? . dE4ebc) (fxdiv0-and-mod0 . dE4ebb) (fxdiv0 . dE4eba) (fxdiv-and-mod . dE4eb9) (fxdiv . dE4eb8) (fxcopy-bit-field . dE4eb7) (fxcopy-bit . dE4eb6) (fxbit-set? . dE4eb5) (fxbit-field . dE4eb4) (fxbit-count . dE4eb3) (fxarithmetic-shift-right . dE4eb2) (fxarithmetic-shift-left . dE4eb1) (fxarithmetic-shift . dE4eb0) (fxand . dE4eaf) (fx>? . dE4eae) (fx>=? . dE4ead) (fx=? . dE4eac) (fx<? . dE4eab) (fx<=? . dE4eaa) (fx-/carry . dE4ea9) (fx- . dE4ea8) (fx+/carry . dE4ea7) (fx+ . dE4ea6) (fx*/carry . dE4ea5) (fx* . dE4ea4) (greatest-fixnum . dE4ea3) (least-fixnum . dE4ea2) (fixnum-width . dE4ea1) (fixnum? . dE4ea0) (bitwise-rotate-bit-field . dE4e9f) (bitwise-reverse-bit-field . dE4e9e) (bitwise-length . dE4e9d) (bitwise-if . dE4e9c) (bitwise-first-bit-set . dE4e9b) (bitwise-copy-bit-field . dE4e9a) (bitwise-copy-bit . dE4e99) (bitwise-bit-set? . dE4e98) (bitwise-bit-field . dE4e97) (bitwise-bit-count . dE4e96) (bitwise-xor . dE4e95) (bitwise-ior . dE4e94) (bitwise-and . dE4e93) (bitwise-not . dE4e92) (bitwise-arithmetic-shift-right . dE4e91) (bitwise-arithmetic-shift-left . dE4e90) (bitwise-arithmetic-shift . dE4e8f) (zero? . dE4e8e) (vector? . dE4e8d) (vector-set! . dE4e8c) (vector-ref . dE4e8b) (vector-map . dE4e8a) (vector-length . dE4e89) (vector-for-each . dE4e88) (vector-fill! . dE4e87) (vector->list . dE4e86) (vector . dE4e85) (values . dE4e84) (truncate . dE4e83) (tan . dE4e82) (symbol? . dE4e81) (symbol=? . dE4e80) (symbol->string . dE4e7f) (substring . dE4e7e) (string? . dE4e7d) (string>? . dE4e7c) (string>=? . dE4e7b) (string=? . dE4e7a) (string<? . dE4e79) (string<=? . dE4e78) (string-ref . dE4e77) (string-length . dE4e76) (string-for-each . dE4e75) (string-copy . dE4e74) (string-append . dE4e73) (string->symbol . dE4e72) (string->number . dE4e71) (string->list . dE4e70) (string . dE4e6f) (sqrt . dE4e6e) (sin . dE4e6d) (round . dE4e6c) (reverse . dE4e6b) (real? . dE4e6a) (real-valued? . dE4e69) (real-part . dE4e68) (rationalize . dE4e67) (rational? . dE4e66) (rational-valued? . dE4e65) (procedure? . dE4e64) (positive? . dE4e63) (pair? . dE4e62) (odd? . dE4e61) (numerator . dE4e60) (number? . dE4e5f) (number->string . dE4e5e) (null? . dE4e5d) (not . dE4e5c) (negative? . dE4e5b) (nan? . dE4e5a) (min . dE4e59) (max . dE4e58) (map . dE4e57) (make-vector . dE4e56) (make-string . dE4e55) (make-rectangular . dE4e54) (make-polar . dE4e53) (magnitude . dE4e52) (log . dE4e51) (list? . dE4e50) (list-tail . dE4e4f) (list-ref . dE4e4e) (list->vector . dE4e4d) (list->string . dE4e4c) (list . dE4e4b) (length . dE4e4a) (lcm . dE4e49) (integer? . dE4e48) (integer-valued? . dE4e47) (integer->char . dE4e46) (infinite? . dE4e45) (inexact? . dE4e44) (inexact . dE4e43) (imag-part . dE4e42) (gcd . dE4e41) (for-each . dE4e40) (floor . dE4e3f) (finite? . dE4e3e) (expt . dE4e3d) (exp . dE4e3c) (exact? . dE4e3b) (exact-integer-sqrt . dE4e3a) (exact . dE4e39) (even? . dE4e38) (error . dE4e37) (eqv? . dE4e36) (equal? . dE4e35) (eq? . dE4e34) (dynamic-wind . dE4e33) (div0-and-mod0 . dE4e32) (mod0 . dE4e31) (div0 . dE4e30) (div-and-mod . dE4e2f) (mod . dE4e2e) (div . dE4e2d) (denominator . dE4e2c) (cos . dE4e2b) (cons . dE4e2a) (complex? . dE4e29) (char? . dE4e28) (char>? . dE4e27) (char>=? . dE4e26) (char=? . dE4e25) (char<? . dE4e24) (char<=? . dE4e23) (char->integer . dE4e22) (ceiling . dE4e21) (call-with-values . dE4e20) (call/cc . dE4e1f) (call-with-current-continuation . dE4e1e) (cddddr . dE4e1d) (cdddar . dE4e1c) (cddadr . dE4e1b) (cddaar . dE4e1a) (cdaddr . dE4e19) (cdadar . dE4e18) (cdaadr . dE4e17) (cdaaar . dE4e16) (cadddr . dE4e15) (caddar . dE4e14) (cadadr . dE4e13) (cadaar . dE4e12) (caaddr . dE4e11) (caadar . dE4e10) (caaadr . dE4e0f) (caaaar . dE4e0e) (cdddr . dE4e0d) (cddar . dE4e0c) (cdadr . dE4e0b) (cdaar . dE4e0a) (caddr . dE4e09) (cadar . dE4e08) (caadr . dE4e07) (caaar . dE4e06) (cddr . dE4e05) (cdar . dE4e04) (cadr . dE4e03) (caar . dE4e02) (cdr . dE4e01) (car . dE4e00) (boolean? . dE4dff) (boolean=? . dE4dfe) (atan . dE4dfd) (assertion-violation . dE4dfc) (asin . dE4dfb) (apply . dE4dfa) (append . dE4df9) (angle . dE4df8) (acos . dE4df7) (abs . dE4df6) (/ . dE4df5) (* . dE4df4) (- . dE4df3) (+ . dE4df2) (>= . dE4df1) (> . dE4df0) (= . dE4def) (<= . dE4dee) (< . dE4ded) (library . dE4dec) (&no-nans . dE4deb) (&no-infinities . dE4dea) (&i/o-encoding . dE4de9) (&i/o-decoding . dE4de8) (&i/o-port . dE4de7) (&i/o-file-does-not-exist . dE4de6) (&i/o-file-already-exists . dE4de5) (&i/o-file-is-read-only . dE4de4) (&i/o-file-protection . dE4de3) (&i/o-filename . dE4de2) (&i/o-invalid-position . dE4de1) (&i/o-write . dE4de0) (&i/o-read . dE4ddf) (&i/o . dE4dde) (&undefined . dE4ddd) (&syntax . dE4ddc) (&lexical . dE4ddb) (&implementation-restriction . dE4dda) (&non-continuable . dE4dd9) (&who . dE4dd8) (&irritants . dE4dd7) (&assertion . dE4dd6) (&violation . dE4dd5) (&error . dE4dd4) (&serious . dE4dd3) (&warning . dE4dd2) (&message . dE4dd1) (&condition . dE4dd0) (define-condition-type . dE4dcf) (define-enumeration . dE4dce) (define-record-type . dE4dcd) (parent-rtd . dE4dcc) (nongenerative . dE4dcb) (opaque . dE4dca) (sealed . dE4dc9) (protocol . dE4dc8) (parent . dE4dc7) (immutable . dE4dc6) (mutable . dE4dc5) (fields . dE4dc4) (error-handling-mode . dE4dc3) (file-options . dE4dc2) (buffer-mode . dE4dc1) (eol-style . dE4dc0) (guard . dE4dbf) (unsyntax-splicing . dE4dbc) (unsyntax . dE4dbb) (unquote-splicing . dE4dba) (unquote . dE4db9) (_ . dE4db8) (else . dE4db7) (=> . dE4db6) (... . dE4db5) (assert . dE4db4) (endianness . dE4db3) (time . dE4db1) (do . dE4db0) (cond . dE4daf) (let* . dE4dae) (let*-values . dE4dad) (let-values . dE4dac) (identifier-syntax . dE4dab) (with-syntax . dE4daa) (quasisyntax . dE4da9) (quasiquote . dE4da8) (syntax-rules . dE4da7) (include . dE4da6) (record-constructor-descriptor . dE4da4) (record-type-descriptor . dE4da3) (case . dE4da2) (unless . dE4da0) (when . dE4d9f) (or . dE4d9e) (and . dE4d9d) (if . dE4d9c) (let . dE4d9b) (letrec* . dE4d9a) (letrec . dE4d99) (case-lambda . dE4d97) (lambda . dE4d96) (syntax . dE4d95) (syntax-case . dE4d94) (quote . dE4d93) (letrec-syntax . dE4d91) (let-syntax . dE4d90) (set! . dE4d8f) (import . dE4d8e) (begin . dE4d8d) (define-syntax . dE4d8b) (define . dE4d8a)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE512b '(psyntax null-environment-5) '() '() '() '() '((make-promise . dE4f8d) (unquote-splicing . dE4dba) (unquote . dE4db9) (_ . dE4db8) (else . dE4db7) (=> . dE4db6) (... . dE4db5) (delay . dE4db2) (do . dE4db0) (cond . dE4daf) (let* . dE4dae) (quasiquote . dE4da8) (syntax-rules . dE4da7) (case . dE4da2) (or . dE4d9e) (and . dE4d9d) (if . dE4d9c) (let . dE4d9b) (letrec . dE4d99) (lambda . dE4d96) (quote . dE4d93) (letrec-syntax . dE4d91) (let-syntax . dE4d90) (set! . dE4d8f) (begin . dE4d8d) (define-syntax . dE4d8b) (define . dE4d8a)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE512c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . dE503e) (string-ci>=? . dE503d) (string-ci=? . dE503c) (string-ci<? . dE503b) (string-ci<=? . dE503a) (char-whitespace? . dE5039) (char-upper-case? . dE5038) (char-numeric? . dE5036) (char-lower-case? . dE5035) (char-upcase . dE5033) (char-downcase . dE5030) (char-ci>? . dE502f) (char-ci>=? . dE502e) (char-ci=? . dE502d) (char-ci<? . dE502c) (char-ci<=? . dE502b) (char-alphabetic? . dE502a) (call-with-output-file . dE4ffe) (call-with-input-file . dE4ffd) (write-char . dE4ffc) (write . dE4ffb) (with-output-to-file . dE4ffa) (with-input-from-file . dE4ff9) (read-char . dE4ff8) (read . dE4ff7) (peek-char . dE4ff6) (open-output-file . dE4ff5) (open-input-file . dE4ff4) (newline . dE4ff3) (display . dE4ff2) (close-output-port . dE4ff1) (close-input-port . dE4ff0) (eof-object . dE4fee) (current-output-port . dE4fec) (current-input-port . dE4feb) (output-port? . dE4fea) (input-port? . dE4fe9) (scheme-report-environment . dE3177) (quotient . dE4f93) (null-environment . dE3175) (remainder . dE4f92) (modulo . dE4f91) (inexact->exact . dE4f90) (force . dE4f8f) (exact->inexact . dE4f8e) (make-promise . dE4f8d) (string-fill! . dE4f8b) (string-set! . dE4f8a) (set-cdr! . dE4f89) (set-car! . dE4f88) (memv . dE4f82) (memq . dE4f81) (member . dE4f7f) (assv . dE4f77) (assq . dE4f76) (assoc . dE4f74) (eval . dE317b) (zero? . dE4e8e) (vector? . dE4e8d) (vector-set! . dE4e8c) (vector-ref . dE4e8b) (vector-length . dE4e89) (vector-fill! . dE4e87) (vector->list . dE4e86) (vector . dE4e85) (values . dE4e84) (truncate . dE4e83) (tan . dE4e82) (symbol? . dE4e81) (symbol->string . dE4e7f) (substring . dE4e7e) (string? . dE4e7d) (string>? . dE4e7c) (string>=? . dE4e7b) (string=? . dE4e7a) (string<? . dE4e79) (string<=? . dE4e78) (string-ref . dE4e77) (string-length . dE4e76) (string-copy . dE4e74) (string-append . dE4e73) (string->symbol . dE4e72) (string->number . dE4e71) (string->list . dE4e70) (string . dE4e6f) (sqrt . dE4e6e) (sin . dE4e6d) (round . dE4e6c) (reverse . dE4e6b) (real? . dE4e6a) (real-part . dE4e68) (rationalize . dE4e67) (rational? . dE4e66) (procedure? . dE4e64) (positive? . dE4e63) (pair? . dE4e62) (odd? . dE4e61) (numerator . dE4e60) (number? . dE4e5f) (number->string . dE4e5e) (not . dE4e5c) (negative? . dE4e5b) (min . dE4e59) (max . dE4e58) (map . dE4e57) (make-vector . dE4e56) (make-string . dE4e55) (make-rectangular . dE4e54) (make-polar . dE4e53) (magnitude . dE4e52) (log . dE4e51) (list? . dE4e50) (list-tail . dE4e4f) (list-ref . dE4e4e) (list->vector . dE4e4d) (list->string . dE4e4c) (list . dE4e4b) (length . dE4e4a) (lcm . dE4e49) (integer? . dE4e48) (integer->char . dE4e46) (inexact? . dE4e44) (imag-part . dE4e42) (gcd . dE4e41) (for-each . dE4e40) (floor . dE4e3f) (expt . dE4e3d) (exp . dE4e3c) (exact? . dE4e3b) (even? . dE4e38) (eqv? . dE4e36) (equal? . dE4e35) (eq? . dE4e34) (dynamic-wind . dE4e33) (denominator . dE4e2c) (cos . dE4e2b) (cons . dE4e2a) (complex? . dE4e29) (char? . dE4e28) (char>? . dE4e27) (char>=? . dE4e26) (char=? . dE4e25) (char<? . dE4e24) (char<=? . dE4e23) (char->integer . dE4e22) (ceiling . dE4e21) (call-with-values . dE4e20) (call-with-current-continuation . dE4e1e) (cddddr . dE4e1d) (cdddar . dE4e1c) (cddadr . dE4e1b) (cddaar . dE4e1a) (cdaddr . dE4e19) (cdadar . dE4e18) (cdaadr . dE4e17) (cdaaar . dE4e16) (cadddr . dE4e15) (caddar . dE4e14) (cadadr . dE4e13) (cadaar . dE4e12) (caaddr . dE4e11) (caadar . dE4e10) (caaadr . dE4e0f) (caaaar . dE4e0e) (cdddr . dE4e0d) (cddar . dE4e0c) (cdadr . dE4e0b) (cdaar . dE4e0a) (caddr . dE4e09) (cadar . dE4e08) (caadr . dE4e07) (caaar . dE4e06) (cddr . dE4e05) (cdar . dE4e04) (cadr . dE4e03) (caar . dE4e02) (cdr . dE4e01) (car . dE4e00) (boolean? . dE4dff) (atan . dE4dfd) (asin . dE4dfb) (apply . dE4dfa) (append . dE4df9) (angle . dE4df8) (acos . dE4df7) (abs . dE4df6) (/ . dE4df5) (* . dE4df4) (- . dE4df3) (+ . dE4df2) (>= . dE4df1) (> . dE4df0) (= . dE4def) (<= . dE4dee) (< . dE4ded) (unquote-splicing . dE4dba) (unquote . dE4db9) (else . dE4db7) (=> . dE4db6) (... . dE4db5) (delay . dE4db2) (do . dE4db0) (cond . dE4daf) (let* . dE4dae) (quasiquote . dE4da8) (syntax-rules . dE4da7) (case . dE4da2) (or . dE4d9e) (and . dE4d9d) (if . dE4d9c) (let . dE4d9b) (letrec . dE4d99) (lambda . dE4d96) (quote . dE4d93) (letrec-syntax . dE4d91) (let-syntax . dE4d90) (set! . dE4d8f) (begin . dE4d8d) (define-syntax . dE4d8b) (define . dE4d8a)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE512d '(psyntax modules) '() '() '() '() '((module . dE4d8c)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE512e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE512f '(rnrs) '(6) '() '() '() '((regexp? . dE50ea) (string-upcase . dE5046) (string-titlecase . dE5045) (string-normalize-nfkd . dE5044) (string-normalize-nfkc . dE5043) (string-normalize-nfd . dE5042) (string-normalize-nfc . dE5041) (string-foldcase . dE5040) (string-downcase . dE503f) (string-ci>? . dE503e) (string-ci>=? . dE503d) (string-ci=? . dE503c) (string-ci<? . dE503b) (string-ci<=? . dE503a) (char-whitespace? . dE5039) (char-upper-case? . dE5038) (char-title-case? . dE5037) (char-numeric? . dE5036) (char-lower-case? . dE5035) (char-general-category . dE5034) (char-upcase . dE5033) (char-titlecase . dE5032) (char-foldcase . dE5031) (char-downcase . dE5030) (char-ci>? . dE502f) (char-ci>=? . dE502e) (char-ci=? . dE502d) (char-ci<? . dE502c) (char-ci<=? . dE502b) (char-alphabetic? . dE502a) (make-variable-transformer . dE2ee6) (identifier? . dE319d) (generate-temporaries . dE3189) (free-identifier=? . dE318b) (syntax->datum . dE31a1) (datum->syntax . dE319f) (bound-identifier=? . dE318d) (record-type-descriptor? . dE5029) (record-predicate . dE5028) (record-mutator . dE5027) (record-constructor . dE5026) (record-accessor . dE5025) (make-record-type-descriptor . dE5024) (make-record-constructor-descriptor . dE5023) (record? . dE5022) (record-type-uid . dE5021) (record-type-sealed? . dE5020) (record-type-parent . dE501f) (record-type-opaque? . dE501e) (record-type-name . dE501d) (record-type-generative? . dE501c) (record-type-field-names . dE501b) (record-rtd . dE501a) (record-field-mutable? . dE5019) (delete-file . dE5018) (file-exists? . dE5017) (vector-sort! . dE5016) (vector-sort . dE5015) (list-sort . dE5014) (symbol-hash . dE5013) (string-ci-hash . dE5012) (string-hash . dE5011) (equal-hash . dE5010) (hashtable-equivalence-function . dE500f) (make-hashtable . dE500e) (hashtable-hash-function . dE500d) (make-eqv-hashtable . dE500c) (make-eq-hashtable . dE500b) (hashtable? . dE500a) (hashtable-update! . dE5009) (hashtable-size . dE5008) (hashtable-set! . dE5007) (hashtable-ref . dE5006) (hashtable-mutable? . dE5005) (hashtable-keys . dE5004) (hashtable-entries . dE5003) (hashtable-delete! . dE5002) (hashtable-copy . dE5001) (hashtable-contains? . dE5000) (hashtable-clear! . dE4fff) (call-with-output-file . dE4ffe) (call-with-input-file . dE4ffd) (write-char . dE4ffc) (write . dE4ffb) (with-output-to-file . dE4ffa) (with-input-from-file . dE4ff9) (read-char . dE4ff8) (read . dE4ff7) (peek-char . dE4ff6) (open-output-file . dE4ff5) (open-input-file . dE4ff4) (newline . dE4ff3) (display . dE4ff2) (close-output-port . dE4ff1) (close-input-port . dE4ff0) (eof-object? . dE4fef) (eof-object . dE4fee) (current-error-port . dE4fed) (current-output-port . dE4fec) (current-input-port . dE4feb) (output-port? . dE4fea) (input-port? . dE4fe9) (utf-8-codec . dE4fe8) (utf-16-codec . dE4fe7) (transcoder-error-handling-mode . dE4fe6) (transcoder-eol-style . dE4fe5) (transcoder-codec . dE4fe4) (transcoded-port . dE4fe3) (textual-port? . dE4fe2) (string->bytevector . dE4fe1) (standard-output-port . dE4fe0) (standard-input-port . dE4fdf) (standard-error-port . dE4fde) (set-port-position! . dE4fdd) (put-u8 . dE4fdc) (put-string . dE4fdb) (put-datum . dE4fda) (put-char . dE4fd9) (put-bytevector . dE4fd8) (port? . dE4fd7) (port-transcoder . dE4fd6) (port-position . dE4fd5) (port-has-set-port-position!? . dE4fd4) (port-has-port-position? . dE4fd3) (port-eof? . dE4fd2) (output-port-buffer-mode . dE4fd1) (open-string-output-port . dE4fd0) (open-string-input-port . dE4fcf) (open-file-output-port . dE4fce) (open-file-input/output-port . dE4fcd) (open-file-input-port . dE4fcc) (open-bytevector-output-port . dE4fcb) (open-bytevector-input-port . dE4fca) (native-transcoder . dE4fc9) (native-eol-style . dE4fc8) (make-transcoder . dE4fc7) (latin-1-codec . dE4fc6) (make-i/o-write-error . dE4fc5) (make-i/o-read-error . dE4fc4) (make-i/o-port-error . dE4fc3) (make-i/o-invalid-position-error . dE4fc2) (make-i/o-filename-error . dE4fc1) (make-i/o-file-protection-error . dE4fc0) (make-i/o-file-is-read-only-error . dE4fbf) (make-i/o-file-does-not-exist-error . dE4fbe) (make-i/o-file-already-exists-error . dE4fbd) (make-i/o-error . dE4fbc) (make-i/o-encoding-error . dE4fbb) (make-i/o-decoding-error . dE4fba) (make-custom-textual-output-port . dE4fb9) (make-custom-textual-input/output-port . dE4fb8) (make-custom-textual-input-port . dE4fb7) (make-custom-binary-output-port . dE4fb6) (make-custom-binary-input/output-port . dE4fb5) (make-custom-binary-input-port . dE4fb4) (make-bytevector . dE4fb3) (lookahead-u8 . dE4fb2) (lookahead-char . dE4fb1) (i/o-write-error? . dE4fb0) (i/o-read-error? . dE4faf) (i/o-port-error? . dE4fae) (i/o-invalid-position-error? . dE4fad) (i/o-filename-error? . dE4fac) (i/o-file-protection-error? . dE4fab) (i/o-file-is-read-only-error? . dE4faa) (i/o-file-does-not-exist-error? . dE4fa9) (i/o-file-already-exists-error? . dE4fa8) (i/o-error? . dE4fa7) (i/o-error-position . dE4fa6) (i/o-error-port . dE4fa5) (i/o-error-filename . dE4fa4) (i/o-encoding-error? . dE4fa3) (i/o-encoding-error-char . dE4fa2) (i/o-decoding-error? . dE4fa1) (get-u8 . dE4fa0) (get-string-n! . dE4f9f) (get-string-n . dE4f9e) (get-string-all . dE4f9d) (get-line . dE4f9c) (get-datum . dE4f9b) (get-char . dE4f9a) (get-bytevector-some . dE4f99) (get-bytevector-n! . dE4f98) (get-bytevector-n . dE4f97) (get-bytevector-all . dE4f96) (flush-output-port . dE4f95) (close-port . dE4f94) (exit . dE4f8c) (command-line . dE4c1e) (remove . dE4f87) (remv . dE4f86) (remp . dE4f85) (remq . dE4f84) (partition . dE4f83) (memv . dE4f82) (memq . dE4f81) (memp . dE4f80) (member . dE4f7f) (exists . dE4f7e) (for-all . dE4f7d) (fold-right . dE4f7c) (fold-left . dE4f7b) (find . dE4f7a) (filter . dE4f79) (cons* . dE4f78) (assv . dE4f77) (assq . dE4f76) (assp . dE4f75) (assoc . dE4f74) (call-with-string-output-port . dE4f73) (call-with-port . dE4f72) (call-with-bytevector-output-port . dE4f71) (bytevector->string . dE4f70) (buffer-mode? . dE4f6f) (binary-port? . dE4f6e) (with-exception-handler . dE4f6d) (raise-continuable . dE4f6c) (raise . dE4f6b) (make-enumeration . dE4f6a) (enum-set=? . dE4f69) (enum-set-universe . dE4f68) (enum-set-union . dE4f67) (enum-set-subset? . dE4f66) (enum-set-projection . dE4f65) (enum-set-member? . dE4f64) (enum-set-intersection . dE4f63) (enum-set-indexer . dE4f62) (enum-set-difference . dE4f61) (enum-set-constructor . dE4f60) (enum-set-complement . dE4f5f) (enum-set->list . dE4f5e) (who-condition? . dE4f5d) (warning? . dE4f5c) (violation? . dE4f5b) (undefined-violation? . dE4f5a) (syntax-violation? . dE4f59) (syntax-violation-subform . dE4f58) (syntax-violation-form . dE4f57) (syntax-violation . dE319b) (simple-conditions . dE4f56) (serious-condition? . dE4f55) (non-continuable-violation? . dE4f54) (message-condition? . dE4f53) (make-who-condition . dE4f52) (make-warning . dE4f51) (make-violation . dE4f50) (make-undefined-violation . dE4f4f) (make-syntax-violation . dE4f4e) (make-serious-condition . dE4f4d) (make-non-continuable-violation . dE4f4c) (make-message-condition . dE4f4b) (make-lexical-violation . dE4f4a) (make-irritants-condition . dE4f49) (make-implementation-restriction-violation . dE4f48) (make-error . dE4f47) (make-assertion-violation . dE4f46) (lexical-violation? . dE4f45) (irritants-condition? . dE4f44) (implementation-restriction-violation? . dE4f43) (error? . dE4f42) (condition-who . dE4f41) (condition-predicate . dE4f40) (condition-message . dE4f3f) (condition-irritants . dE4f3e) (condition-accessor . dE4f3d) (condition . dE4f3c) (assertion-violation? . dE4f3b) (condition? . dE4f3a) (utf32->string . dE4f39) (utf16->string . dE4f38) (utf8->string . dE4f37) (uint-list->bytevector . dE4f36) (u8-list->bytevector . dE4f35) (string->utf8 . dE4f34) (string->utf32 . dE4f33) (string->utf16 . dE4f32) (sint-list->bytevector . dE4f31) (native-endianness . dE4f30) (bytevector? . dE4f2f) (bytevector=? . dE4f2e) (bytevector-uint-set! . dE4f2d) (bytevector-uint-ref . dE4f2c) (bytevector-u8-set! . dE4f2b) (bytevector-u8-ref . dE4f2a) (bytevector-u64-set! . dE4f29) (bytevector-u64-ref . dE4f28) (bytevector-u64-native-set! . dE4f27) (bytevector-u64-native-ref . dE4f26) (bytevector-u32-set! . dE4f25) (bytevector-u32-ref . dE4f24) (bytevector-u32-native-set! . dE4f23) (bytevector-u32-native-ref . dE4f22) (bytevector-u16-set! . dE4f21) (bytevector-u16-ref . dE4f20) (bytevector-u16-native-set! . dE4f1f) (bytevector-u16-native-ref . dE4f1e) (bytevector-sint-set! . dE4f1d) (bytevector-sint-ref . dE4f1c) (bytevector-s8-set! . dE4f1b) (bytevector-s8-ref . dE4f1a) (bytevector-s64-set! . dE4f19) (bytevector-s64-ref . dE4f18) (bytevector-s64-native-set! . dE4f17) (bytevector-s64-native-ref . dE4f16) (bytevector-s32-set! . dE4f15) (bytevector-s32-ref . dE4f14) (bytevector-s32-native-set! . dE4f13) (bytevector-s32-native-ref . dE4f12) (bytevector-s16-set! . dE4f11) (bytevector-s16-ref . dE4f10) (bytevector-s16-native-set! . dE4f0f) (bytevector-s16-native-ref . dE4f0e) (bytevector-length . dE4f0d) (bytevector-ieee-single-ref . dE4f0c) (bytevector-ieee-single-set! . dE4f0b) (bytevector-ieee-single-native-set! . dE4f0a) (bytevector-ieee-single-native-ref . dE4f09) (bytevector-ieee-double-set! . dE4f08) (bytevector-ieee-double-ref . dE4f07) (bytevector-ieee-double-native-set! . dE4f06) (bytevector-ieee-double-native-ref . dE4f05) (bytevector-fill! . dE4f04) (bytevector-copy! . dE4f03) (bytevector-copy . dE4f02) (bytevector->uint-list . dE4f01) (bytevector->u8-list . dE4f00) (bytevector->sint-list . dE4eff) (no-nans-violation? . dE4efe) (no-infinities-violation? . dE4efd) (make-no-nans-violation . dE4efc) (make-no-infinities-violation . dE4efb) (real->flonum . dE4efa) (flzero? . dE4ef9) (fltruncate . dE4ef8) (fltan . dE4ef7) (flsqrt . dE4ef6) (flsin . dE4ef5) (flround . dE4ef4) (flpositive? . dE4ef3) (flonum? . dE4ef2) (flodd? . dE4ef1) (flnumerator . dE4ef0) (flnegative? . dE4eef) (flnan? . dE4eee) (flmod0 . dE4eed) (flmod . dE4eec) (flmin . dE4eeb) (flmax . dE4eea) (fllog . dE4ee9) (flinteger? . dE4ee8) (flinfinite? . dE4ee7) (flfloor . dE4ee6) (flfinite? . dE4ee5) (flexpt . dE4ee4) (flexp . dE4ee3) (fleven? . dE4ee2) (fldiv0-and-mod0 . dE4ee1) (fldiv0 . dE4ee0) (fldiv-and-mod . dE4edf) (fldiv . dE4ede) (fldenominator . dE4edd) (flcos . dE4edc) (flceiling . dE4edb) (flatan . dE4eda) (flasin . dE4ed9) (flacos . dE4ed8) (flabs . dE4ed7) (fl>? . dE4ed6) (fl>=? . dE4ed5) (fl=? . dE4ed4) (fl<? . dE4ed3) (fl<=? . dE4ed2) (fl/ . dE4ed1) (fl- . dE4ed0) (fl+ . dE4ecf) (fl* . dE4ece) (fixnum->flonum . dE4ecd) (fxzero? . dE4ecc) (fxxor . dE4ecb) (fxrotate-bit-field . dE4eca) (fxreverse-bit-field . dE4ec9) (fxpositive? . dE4ec8) (fxodd? . dE4ec7) (fxnot . dE4ec6) (fxnegative? . dE4ec5) (fxmod0 . dE4ec4) (fxmod . dE4ec3) (fxmin . dE4ec2) (fxmax . dE4ec1) (fxlength . dE4ec0) (fxior . dE4ebf) (fxif . dE4ebe) (fxfirst-bit-set . dE4ebd) (fxeven? . dE4ebc) (fxdiv0-and-mod0 . dE4ebb) (fxdiv0 . dE4eba) (fxdiv-and-mod . dE4eb9) (fxdiv . dE4eb8) (fxcopy-bit-field . dE4eb7) (fxcopy-bit . dE4eb6) (fxbit-set? . dE4eb5) (fxbit-field . dE4eb4) (fxbit-count . dE4eb3) (fxarithmetic-shift-right . dE4eb2) (fxarithmetic-shift-left . dE4eb1) (fxarithmetic-shift . dE4eb0) (fxand . dE4eaf) (fx>? . dE4eae) (fx>=? . dE4ead) (fx=? . dE4eac) (fx<? . dE4eab) (fx<=? . dE4eaa) (fx-/carry . dE4ea9) (fx- . dE4ea8) (fx+/carry . dE4ea7) (fx+ . dE4ea6) (fx*/carry . dE4ea5) (fx* . dE4ea4) (greatest-fixnum . dE4ea3) (least-fixnum . dE4ea2) (fixnum-width . dE4ea1) (fixnum? . dE4ea0) (bitwise-rotate-bit-field . dE4e9f) (bitwise-reverse-bit-field . dE4e9e) (bitwise-length . dE4e9d) (bitwise-if . dE4e9c) (bitwise-first-bit-set . dE4e9b) (bitwise-copy-bit-field . dE4e9a) (bitwise-copy-bit . dE4e99) (bitwise-bit-set? . dE4e98) (bitwise-bit-field . dE4e97) (bitwise-bit-count . dE4e96) (bitwise-xor . dE4e95) (bitwise-ior . dE4e94) (bitwise-and . dE4e93) (bitwise-not . dE4e92) (bitwise-arithmetic-shift-right . dE4e91) (bitwise-arithmetic-shift-left . dE4e90) (bitwise-arithmetic-shift . dE4e8f) (zero? . dE4e8e) (vector? . dE4e8d) (vector-set! . dE4e8c) (vector-ref . dE4e8b) (vector-map . dE4e8a) (vector-length . dE4e89) (vector-for-each . dE4e88) (vector-fill! . dE4e87) (vector->list . dE4e86) (vector . dE4e85) (values . dE4e84) (truncate . dE4e83) (tan . dE4e82) (symbol? . dE4e81) (symbol=? . dE4e80) (symbol->string . dE4e7f) (substring . dE4e7e) (string? . dE4e7d) (string>? . dE4e7c) (string>=? . dE4e7b) (string=? . dE4e7a) (string<? . dE4e79) (string<=? . dE4e78) (string-ref . dE4e77) (string-length . dE4e76) (string-for-each . dE4e75) (string-copy . dE4e74) (string-append . dE4e73) (string->symbol . dE4e72) (string->number . dE4e71) (string->list . dE4e70) (string . dE4e6f) (sqrt . dE4e6e) (sin . dE4e6d) (round . dE4e6c) (reverse . dE4e6b) (real? . dE4e6a) (real-valued? . dE4e69) (real-part . dE4e68) (rationalize . dE4e67) (rational? . dE4e66) (rational-valued? . dE4e65) (procedure? . dE4e64) (positive? . dE4e63) (pair? . dE4e62) (odd? . dE4e61) (numerator . dE4e60) (number? . dE4e5f) (number->string . dE4e5e) (null? . dE4e5d) (not . dE4e5c) (negative? . dE4e5b) (nan? . dE4e5a) (min . dE4e59) (max . dE4e58) (map . dE4e57) (make-vector . dE4e56) (make-string . dE4e55) (make-rectangular . dE4e54) (make-polar . dE4e53) (magnitude . dE4e52) (log . dE4e51) (list? . dE4e50) (list-tail . dE4e4f) (list-ref . dE4e4e) (list->vector . dE4e4d) (list->string . dE4e4c) (list . dE4e4b) (length . dE4e4a) (lcm . dE4e49) (integer? . dE4e48) (integer-valued? . dE4e47) (integer->char . dE4e46) (infinite? . dE4e45) (inexact? . dE4e44) (inexact . dE4e43) (imag-part . dE4e42) (gcd . dE4e41) (for-each . dE4e40) (floor . dE4e3f) (finite? . dE4e3e) (expt . dE4e3d) (exp . dE4e3c) (exact? . dE4e3b) (exact-integer-sqrt . dE4e3a) (exact . dE4e39) (even? . dE4e38) (error . dE4e37) (eqv? . dE4e36) (equal? . dE4e35) (eq? . dE4e34) (dynamic-wind . dE4e33) (div0-and-mod0 . dE4e32) (mod0 . dE4e31) (div0 . dE4e30) (div-and-mod . dE4e2f) (mod . dE4e2e) (div . dE4e2d) (denominator . dE4e2c) (cos . dE4e2b) (cons . dE4e2a) (complex? . dE4e29) (char? . dE4e28) (char>? . dE4e27) (char>=? . dE4e26) (char=? . dE4e25) (char<? . dE4e24) (char<=? . dE4e23) (char->integer . dE4e22) (ceiling . dE4e21) (call-with-values . dE4e20) (call/cc . dE4e1f) (call-with-current-continuation . dE4e1e) (cddddr . dE4e1d) (cdddar . dE4e1c) (cddadr . dE4e1b) (cddaar . dE4e1a) (cdaddr . dE4e19) (cdadar . dE4e18) (cdaadr . dE4e17) (cdaaar . dE4e16) (cadddr . dE4e15) (caddar . dE4e14) (cadadr . dE4e13) (cadaar . dE4e12) (caaddr . dE4e11) (caadar . dE4e10) (caaadr . dE4e0f) (caaaar . dE4e0e) (cdddr . dE4e0d) (cddar . dE4e0c) (cdadr . dE4e0b) (cdaar . dE4e0a) (caddr . dE4e09) (cadar . dE4e08) (caadr . dE4e07) (caaar . dE4e06) (cddr . dE4e05) (cdar . dE4e04) (cadr . dE4e03) (caar . dE4e02) (cdr . dE4e01) (car . dE4e00) (boolean? . dE4dff) (boolean=? . dE4dfe) (atan . dE4dfd) (assertion-violation . dE4dfc) (asin . dE4dfb) (apply . dE4dfa) (append . dE4df9) (angle . dE4df8) (acos . dE4df7) (abs . dE4df6) (/ . dE4df5) (* . dE4df4) (- . dE4df3) (+ . dE4df2) (>= . dE4df1) (> . dE4df0) (= . dE4def) (<= . dE4dee) (< . dE4ded) (&no-nans . dE4deb) (&no-infinities . dE4dea) (&i/o-encoding . dE4de9) (&i/o-decoding . dE4de8) (&i/o-port . dE4de7) (&i/o-file-does-not-exist . dE4de6) (&i/o-file-already-exists . dE4de5) (&i/o-file-is-read-only . dE4de4) (&i/o-file-protection . dE4de3) (&i/o-filename . dE4de2) (&i/o-invalid-position . dE4de1) (&i/o-write . dE4de0) (&i/o-read . dE4ddf) (&i/o . dE4dde) (&undefined . dE4ddd) (&syntax . dE4ddc) (&lexical . dE4ddb) (&implementation-restriction . dE4dda) (&non-continuable . dE4dd9) (&who . dE4dd8) (&irritants . dE4dd7) (&assertion . dE4dd6) (&violation . dE4dd5) (&error . dE4dd4) (&serious . dE4dd3) (&warning . dE4dd2) (&message . dE4dd1) (&condition . dE4dd0) (define-condition-type . dE4dcf) (define-enumeration . dE4dce) (define-record-type . dE4dcd) (parent-rtd . dE4dcc) (nongenerative . dE4dcb) (opaque . dE4dca) (sealed . dE4dc9) (protocol . dE4dc8) (parent . dE4dc7) (immutable . dE4dc6) (mutable . dE4dc5) (fields . dE4dc4) (error-handling-mode . dE4dc3) (file-options . dE4dc2) (buffer-mode . dE4dc1) (eol-style . dE4dc0) (guard . dE4dbf) (unsyntax-splicing . dE4dbc) (unsyntax . dE4dbb) (unquote-splicing . dE4dba) (unquote . dE4db9) (_ . dE4db8) (else . dE4db7) (=> . dE4db6) (... . dE4db5) (assert . dE4db4) (endianness . dE4db3) (do . dE4db0) (cond . dE4daf) (let* . dE4dae) (let*-values . dE4dad) (let-values . dE4dac) (identifier-syntax . dE4dab) (with-syntax . dE4daa) (quasisyntax . dE4da9) (quasiquote . dE4da8) (syntax-rules . dE4da7) (record-constructor-descriptor . dE4da4) (record-type-descriptor . dE4da3) (case . dE4da2) (unless . dE4da0) (when . dE4d9f) (or . dE4d9e) (and . dE4d9d) (if . dE4d9c) (let . dE4d9b) (letrec* . dE4d9a) (letrec . dE4d99) (case-lambda . dE4d97) (lambda . dE4d96) (syntax . dE4d95) (syntax-case . dE4d94) (quote . dE4d93) (letrec-syntax . dE4d91) (let-syntax . dE4d90) (set! . dE4d8f) (begin . dE4d8d) (define-syntax . dE4d8b) (define . dE4d8a)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5130 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . dE3177) (quotient . dE4f93) (null-environment . dE3175) (remainder . dE4f92) (modulo . dE4f91) (inexact->exact . dE4f90) (force . dE4f8f) (exact->inexact . dE4f8e) (make-promise . dE4f8d) (delay . dE4db2)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5131 '(rnrs control) '(6) '() '() '() '((do . dE4db0) (unless . dE4da0) (when . dE4d9f) (case-lambda . dE4d97)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5132 '(rnrs eval) '(6) '() '() '() '((eval . dE317b) (environment . dE3173)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5133 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . dE4f89) (set-car! . dE4f88)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5134 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . dE4f8b) (string-set! . dE4f8a)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5135 '(rnrs programs) '(6) '() '() '() '((exit . dE4f8c) (command-line . dE4c1e)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5136 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . dE2ee6) (identifier? . dE319d) (generate-temporaries . dE3189) (free-identifier=? . dE318b) (syntax->datum . dE31a1) (datum->syntax . dE319f) (bound-identifier=? . dE318d) (syntax-violation . dE319b) (unsyntax-splicing . dE4dbc) (unsyntax . dE4dbb) (_ . dE4db8) (... . dE4db5) (with-syntax . dE4daa) (quasisyntax . dE4da9) (syntax . dE4d95) (syntax-case . dE4d94)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5137 '(rnrs files) '(6) '() '() '() '((delete-file . dE5018) (file-exists? . dE5017) (make-i/o-write-error . dE4fc5) (make-i/o-read-error . dE4fc4) (make-i/o-port-error . dE4fc3) (make-i/o-invalid-position-error . dE4fc2) (make-i/o-filename-error . dE4fc1) (make-i/o-file-protection-error . dE4fc0) (make-i/o-file-is-read-only-error . dE4fbf) (make-i/o-file-does-not-exist-error . dE4fbe) (make-i/o-file-already-exists-error . dE4fbd) (make-i/o-error . dE4fbc) (i/o-write-error? . dE4fb0) (i/o-read-error? . dE4faf) (i/o-port-error? . dE4fae) (i/o-invalid-position-error? . dE4fad) (i/o-filename-error? . dE4fac) (i/o-file-protection-error? . dE4fab) (i/o-file-is-read-only-error? . dE4faa) (i/o-file-does-not-exist-error? . dE4fa9) (i/o-file-already-exists-error? . dE4fa8) (i/o-error? . dE4fa7) (i/o-error-position . dE4fa6) (i/o-error-port . dE4fa5) (i/o-error-filename . dE4fa4) (&i/o-port . dE4de7) (&i/o-file-does-not-exist . dE4de6) (&i/o-file-already-exists . dE4de5) (&i/o-file-is-read-only . dE4de4) (&i/o-file-protection . dE4de3) (&i/o-filename . dE4de2) (&i/o-invalid-position . dE4de1) (&i/o-write . dE4de0) (&i/o-read . dE4ddf) (&i/o . dE4dde)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5138 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . dE5016) (vector-sort . dE5015) (list-sort . dE5014)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5139 '(rnrs base) '(6) '() '() '() '((zero? . dE4e8e) (vector? . dE4e8d) (vector-set! . dE4e8c) (vector-ref . dE4e8b) (vector-map . dE4e8a) (vector-length . dE4e89) (vector-for-each . dE4e88) (vector-fill! . dE4e87) (vector->list . dE4e86) (vector . dE4e85) (values . dE4e84) (truncate . dE4e83) (tan . dE4e82) (symbol? . dE4e81) (symbol=? . dE4e80) (symbol->string . dE4e7f) (substring . dE4e7e) (string? . dE4e7d) (string>? . dE4e7c) (string>=? . dE4e7b) (string=? . dE4e7a) (string<? . dE4e79) (string<=? . dE4e78) (string-ref . dE4e77) (string-length . dE4e76) (string-for-each . dE4e75) (string-copy . dE4e74) (string-append . dE4e73) (string->symbol . dE4e72) (string->number . dE4e71) (string->list . dE4e70) (string . dE4e6f) (sqrt . dE4e6e) (sin . dE4e6d) (round . dE4e6c) (reverse . dE4e6b) (real? . dE4e6a) (real-valued? . dE4e69) (real-part . dE4e68) (rationalize . dE4e67) (rational? . dE4e66) (rational-valued? . dE4e65) (procedure? . dE4e64) (positive? . dE4e63) (pair? . dE4e62) (odd? . dE4e61) (numerator . dE4e60) (number? . dE4e5f) (number->string . dE4e5e) (null? . dE4e5d) (not . dE4e5c) (negative? . dE4e5b) (nan? . dE4e5a) (min . dE4e59) (max . dE4e58) (map . dE4e57) (make-vector . dE4e56) (make-string . dE4e55) (make-rectangular . dE4e54) (make-polar . dE4e53) (magnitude . dE4e52) (log . dE4e51) (list? . dE4e50) (list-tail . dE4e4f) (list-ref . dE4e4e) (list->vector . dE4e4d) (list->string . dE4e4c) (list . dE4e4b) (length . dE4e4a) (lcm . dE4e49) (integer? . dE4e48) (integer-valued? . dE4e47) (integer->char . dE4e46) (infinite? . dE4e45) (inexact? . dE4e44) (inexact . dE4e43) (imag-part . dE4e42) (gcd . dE4e41) (for-each . dE4e40) (floor . dE4e3f) (finite? . dE4e3e) (expt . dE4e3d) (exp . dE4e3c) (exact? . dE4e3b) (exact-integer-sqrt . dE4e3a) (exact . dE4e39) (even? . dE4e38) (error . dE4e37) (eqv? . dE4e36) (equal? . dE4e35) (eq? . dE4e34) (dynamic-wind . dE4e33) (div0-and-mod0 . dE4e32) (mod0 . dE4e31) (div0 . dE4e30) (div-and-mod . dE4e2f) (mod . dE4e2e) (div . dE4e2d) (denominator . dE4e2c) (cos . dE4e2b) (cons . dE4e2a) (complex? . dE4e29) (char? . dE4e28) (char>? . dE4e27) (char>=? . dE4e26) (char=? . dE4e25) (char<? . dE4e24) (char<=? . dE4e23) (char->integer . dE4e22) (ceiling . dE4e21) (call-with-values . dE4e20) (call/cc . dE4e1f) (call-with-current-continuation . dE4e1e) (cddddr . dE4e1d) (cdddar . dE4e1c) (cddadr . dE4e1b) (cddaar . dE4e1a) (cdaddr . dE4e19) (cdadar . dE4e18) (cdaadr . dE4e17) (cdaaar . dE4e16) (cadddr . dE4e15) (caddar . dE4e14) (cadadr . dE4e13) (cadaar . dE4e12) (caaddr . dE4e11) (caadar . dE4e10) (caaadr . dE4e0f) (caaaar . dE4e0e) (cdddr . dE4e0d) (cddar . dE4e0c) (cdadr . dE4e0b) (cdaar . dE4e0a) (caddr . dE4e09) (cadar . dE4e08) (caadr . dE4e07) (caaar . dE4e06) (cddr . dE4e05) (cdar . dE4e04) (cadr . dE4e03) (caar . dE4e02) (cdr . dE4e01) (car . dE4e00) (boolean? . dE4dff) (boolean=? . dE4dfe) (atan . dE4dfd) (assertion-violation . dE4dfc) (asin . dE4dfb) (apply . dE4dfa) (append . dE4df9) (angle . dE4df8) (acos . dE4df7) (abs . dE4df6) (/ . dE4df5) (* . dE4df4) (- . dE4df3) (+ . dE4df2) (>= . dE4df1) (> . dE4df0) (= . dE4def) (<= . dE4dee) (< . dE4ded) (unquote-splicing . dE4dba) (unquote . dE4db9) (_ . dE4db8) (else . dE4db7) (=> . dE4db6) (... . dE4db5) (assert . dE4db4) (cond . dE4daf) (let* . dE4dae) (let*-values . dE4dad) (let-values . dE4dac) (identifier-syntax . dE4dab) (quasiquote . dE4da8) (syntax-rules . dE4da7) (case . dE4da2) (or . dE4d9e) (and . dE4d9d) (if . dE4d9c) (let . dE4d9b) (letrec* . dE4d9a) (letrec . dE4d99) (lambda . dE4d96) (quote . dE4d93) (letrec-syntax . dE4d91) (let-syntax . dE4d90) (set! . dE4d8f) (begin . dE4d8d) (define-syntax . dE4d8b) (define . dE4d8a)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE513a '(rnrs lists) '(6) '() '() '() '((remove . dE4f87) (remv . dE4f86) (remp . dE4f85) (remq . dE4f84) (partition . dE4f83) (memv . dE4f82) (memq . dE4f81) (memp . dE4f80) (member . dE4f7f) (exists . dE4f7e) (for-all . dE4f7d) (fold-right . dE4f7c) (fold-left . dE4f7b) (find . dE4f7a) (filter . dE4f79) (cons* . dE4f78) (assv . dE4f77) (assq . dE4f76) (assp . dE4f75) (assoc . dE4f74)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE513b '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . dE4ffe) (call-with-input-file . dE4ffd) (write-char . dE4ffc) (write . dE4ffb) (with-output-to-file . dE4ffa) (with-input-from-file . dE4ff9) (read-char . dE4ff8) (read . dE4ff7) (peek-char . dE4ff6) (open-output-file . dE4ff5) (open-input-file . dE4ff4) (newline . dE4ff3) (display . dE4ff2) (close-output-port . dE4ff1) (close-input-port . dE4ff0) (eof-object? . dE4fef) (eof-object . dE4fee) (current-error-port . dE4fed) (current-output-port . dE4fec) (current-input-port . dE4feb) (output-port? . dE4fea) (input-port? . dE4fe9) (make-i/o-write-error . dE4fc5) (make-i/o-read-error . dE4fc4) (make-i/o-port-error . dE4fc3) (make-i/o-invalid-position-error . dE4fc2) (make-i/o-filename-error . dE4fc1) (make-i/o-file-protection-error . dE4fc0) (make-i/o-file-is-read-only-error . dE4fbf) (make-i/o-file-does-not-exist-error . dE4fbe) (make-i/o-file-already-exists-error . dE4fbd) (make-i/o-error . dE4fbc) (i/o-write-error? . dE4fb0) (i/o-read-error? . dE4faf) (i/o-port-error? . dE4fae) (i/o-invalid-position-error? . dE4fad) (i/o-filename-error? . dE4fac) (i/o-file-protection-error? . dE4fab) (i/o-file-is-read-only-error? . dE4faa) (i/o-file-does-not-exist-error? . dE4fa9) (i/o-file-already-exists-error? . dE4fa8) (i/o-error? . dE4fa7) (i/o-error-position . dE4fa6) (i/o-error-port . dE4fa5) (i/o-error-filename . dE4fa4) (&i/o-port . dE4de7) (&i/o-file-does-not-exist . dE4de6) (&i/o-file-already-exists . dE4de5) (&i/o-file-is-read-only . dE4de4) (&i/o-file-protection . dE4de3) (&i/o-filename . dE4de2) (&i/o-invalid-position . dE4de1) (&i/o-write . dE4de0) (&i/o-read . dE4ddf) (&i/o . dE4dde)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE513c '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . dE4fb3) (utf32->string . dE4f39) (utf16->string . dE4f38) (utf8->string . dE4f37) (uint-list->bytevector . dE4f36) (u8-list->bytevector . dE4f35) (string->utf8 . dE4f34) (string->utf32 . dE4f33) (string->utf16 . dE4f32) (sint-list->bytevector . dE4f31) (native-endianness . dE4f30) (bytevector? . dE4f2f) (bytevector=? . dE4f2e) (bytevector-uint-set! . dE4f2d) (bytevector-uint-ref . dE4f2c) (bytevector-u8-set! . dE4f2b) (bytevector-u8-ref . dE4f2a) (bytevector-u64-set! . dE4f29) (bytevector-u64-ref . dE4f28) (bytevector-u64-native-set! . dE4f27) (bytevector-u64-native-ref . dE4f26) (bytevector-u32-set! . dE4f25) (bytevector-u32-ref . dE4f24) (bytevector-u32-native-set! . dE4f23) (bytevector-u32-native-ref . dE4f22) (bytevector-u16-set! . dE4f21) (bytevector-u16-ref . dE4f20) (bytevector-u16-native-set! . dE4f1f) (bytevector-u16-native-ref . dE4f1e) (bytevector-sint-set! . dE4f1d) (bytevector-sint-ref . dE4f1c) (bytevector-s8-set! . dE4f1b) (bytevector-s8-ref . dE4f1a) (bytevector-s64-set! . dE4f19) (bytevector-s64-ref . dE4f18) (bytevector-s64-native-set! . dE4f17) (bytevector-s64-native-ref . dE4f16) (bytevector-s32-set! . dE4f15) (bytevector-s32-ref . dE4f14) (bytevector-s32-native-set! . dE4f13) (bytevector-s32-native-ref . dE4f12) (bytevector-s16-set! . dE4f11) (bytevector-s16-ref . dE4f10) (bytevector-s16-native-set! . dE4f0f) (bytevector-s16-native-ref . dE4f0e) (bytevector-length . dE4f0d) (bytevector-ieee-single-ref . dE4f0c) (bytevector-ieee-single-set! . dE4f0b) (bytevector-ieee-single-native-set! . dE4f0a) (bytevector-ieee-single-native-ref . dE4f09) (bytevector-ieee-double-set! . dE4f08) (bytevector-ieee-double-ref . dE4f07) (bytevector-ieee-double-native-set! . dE4f06) (bytevector-ieee-double-native-ref . dE4f05) (bytevector-fill! . dE4f04) (bytevector-copy! . dE4f03) (bytevector-copy . dE4f02) (bytevector->uint-list . dE4f01) (bytevector->u8-list . dE4f00) (bytevector->sint-list . dE4eff) (endianness . dE4db3)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE513d '(rnrs unicode) '(6) '() '() '() '((string-upcase . dE5046) (string-titlecase . dE5045) (string-normalize-nfkd . dE5044) (string-normalize-nfkc . dE5043) (string-normalize-nfd . dE5042) (string-normalize-nfc . dE5041) (string-foldcase . dE5040) (string-downcase . dE503f) (string-ci>? . dE503e) (string-ci>=? . dE503d) (string-ci=? . dE503c) (string-ci<? . dE503b) (string-ci<=? . dE503a) (char-whitespace? . dE5039) (char-upper-case? . dE5038) (char-title-case? . dE5037) (char-numeric? . dE5036) (char-lower-case? . dE5035) (char-general-category . dE5034) (char-upcase . dE5033) (char-titlecase . dE5032) (char-foldcase . dE5031) (char-downcase . dE5030) (char-ci>? . dE502f) (char-ci>=? . dE502e) (char-ci=? . dE502d) (char-ci<? . dE502c) (char-ci<=? . dE502b) (char-alphabetic? . dE502a)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE513e '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . dE4f6d) (raise-continuable . dE4f6c) (raise . dE4f6b) (guard . dE4dbf) (else . dE4db7) (=> . dE4db6)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE513f '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . dE4e9f) (bitwise-reverse-bit-field . dE4e9e) (bitwise-length . dE4e9d) (bitwise-if . dE4e9c) (bitwise-first-bit-set . dE4e9b) (bitwise-copy-bit-field . dE4e9a) (bitwise-copy-bit . dE4e99) (bitwise-bit-set? . dE4e98) (bitwise-bit-field . dE4e97) (bitwise-bit-count . dE4e96) (bitwise-xor . dE4e95) (bitwise-ior . dE4e94) (bitwise-and . dE4e93) (bitwise-not . dE4e92) (bitwise-arithmetic-shift-right . dE4e91) (bitwise-arithmetic-shift-left . dE4e90) (bitwise-arithmetic-shift . dE4e8f)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5140 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . dE4ecc) (fxxor . dE4ecb) (fxrotate-bit-field . dE4eca) (fxreverse-bit-field . dE4ec9) (fxpositive? . dE4ec8) (fxodd? . dE4ec7) (fxnot . dE4ec6) (fxnegative? . dE4ec5) (fxmod0 . dE4ec4) (fxmod . dE4ec3) (fxmin . dE4ec2) (fxmax . dE4ec1) (fxlength . dE4ec0) (fxior . dE4ebf) (fxif . dE4ebe) (fxfirst-bit-set . dE4ebd) (fxeven? . dE4ebc) (fxdiv0-and-mod0 . dE4ebb) (fxdiv0 . dE4eba) (fxdiv-and-mod . dE4eb9) (fxdiv . dE4eb8) (fxcopy-bit-field . dE4eb7) (fxcopy-bit . dE4eb6) (fxbit-set? . dE4eb5) (fxbit-field . dE4eb4) (fxbit-count . dE4eb3) (fxarithmetic-shift-right . dE4eb2) (fxarithmetic-shift-left . dE4eb1) (fxarithmetic-shift . dE4eb0) (fxand . dE4eaf) (fx>? . dE4eae) (fx>=? . dE4ead) (fx=? . dE4eac) (fx<? . dE4eab) (fx<=? . dE4eaa) (fx-/carry . dE4ea9) (fx- . dE4ea8) (fx+/carry . dE4ea7) (fx+ . dE4ea6) (fx*/carry . dE4ea5) (fx* . dE4ea4) (greatest-fixnum . dE4ea3) (least-fixnum . dE4ea2) (fixnum-width . dE4ea1) (fixnum? . dE4ea0)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5141 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . dE4efe) (no-infinities-violation? . dE4efd) (make-no-nans-violation . dE4efc) (make-no-infinities-violation . dE4efb) (real->flonum . dE4efa) (flzero? . dE4ef9) (fltruncate . dE4ef8) (fltan . dE4ef7) (flsqrt . dE4ef6) (flsin . dE4ef5) (flround . dE4ef4) (flpositive? . dE4ef3) (flonum? . dE4ef2) (flodd? . dE4ef1) (flnumerator . dE4ef0) (flnegative? . dE4eef) (flnan? . dE4eee) (flmod0 . dE4eed) (flmod . dE4eec) (flmin . dE4eeb) (flmax . dE4eea) (fllog . dE4ee9) (flinteger? . dE4ee8) (flinfinite? . dE4ee7) (flfloor . dE4ee6) (flfinite? . dE4ee5) (flexpt . dE4ee4) (flexp . dE4ee3) (fleven? . dE4ee2) (fldiv0-and-mod0 . dE4ee1) (fldiv0 . dE4ee0) (fldiv-and-mod . dE4edf) (fldiv . dE4ede) (fldenominator . dE4edd) (flcos . dE4edc) (flceiling . dE4edb) (flatan . dE4eda) (flasin . dE4ed9) (flacos . dE4ed8) (flabs . dE4ed7) (fl>? . dE4ed6) (fl>=? . dE4ed5) (fl=? . dE4ed4) (fl<? . dE4ed3) (fl<=? . dE4ed2) (fl/ . dE4ed1) (fl- . dE4ed0) (fl+ . dE4ecf) (fl* . dE4ece) (fixnum->flonum . dE4ecd) (&no-nans . dE4deb) (&no-infinities . dE4dea)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5142 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . dE5013) (string-ci-hash . dE5012) (string-hash . dE5011) (equal-hash . dE5010) (hashtable-equivalence-function . dE500f) (make-hashtable . dE500e) (hashtable-hash-function . dE500d) (make-eqv-hashtable . dE500c) (make-eq-hashtable . dE500b) (hashtable? . dE500a) (hashtable-update! . dE5009) (hashtable-size . dE5008) (hashtable-set! . dE5007) (hashtable-ref . dE5006) (hashtable-mutable? . dE5005) (hashtable-keys . dE5004) (hashtable-entries . dE5003) (hashtable-delete! . dE5002) (hashtable-copy . dE5001) (hashtable-contains? . dE5000) (hashtable-clear! . dE4fff)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5143 '(rnrs io ports) '(6) '() '() '() '((eof-object? . dE4fef) (eof-object . dE4fee) (current-error-port . dE4fed) (current-output-port . dE4fec) (current-input-port . dE4feb) (output-port? . dE4fea) (input-port? . dE4fe9) (utf-8-codec . dE4fe8) (utf-16-codec . dE4fe7) (transcoder-error-handling-mode . dE4fe6) (transcoder-eol-style . dE4fe5) (transcoder-codec . dE4fe4) (transcoded-port . dE4fe3) (textual-port? . dE4fe2) (string->bytevector . dE4fe1) (standard-output-port . dE4fe0) (standard-input-port . dE4fdf) (standard-error-port . dE4fde) (set-port-position! . dE4fdd) (put-u8 . dE4fdc) (put-string . dE4fdb) (put-datum . dE4fda) (put-char . dE4fd9) (put-bytevector . dE4fd8) (port? . dE4fd7) (port-transcoder . dE4fd6) (port-position . dE4fd5) (port-has-set-port-position!? . dE4fd4) (port-has-port-position? . dE4fd3) (port-eof? . dE4fd2) (output-port-buffer-mode . dE4fd1) (open-string-output-port . dE4fd0) (open-string-input-port . dE4fcf) (open-file-output-port . dE4fce) (open-file-input/output-port . dE4fcd) (open-file-input-port . dE4fcc) (open-bytevector-output-port . dE4fcb) (open-bytevector-input-port . dE4fca) (native-transcoder . dE4fc9) (native-eol-style . dE4fc8) (make-transcoder . dE4fc7) (latin-1-codec . dE4fc6) (make-i/o-write-error . dE4fc5) (make-i/o-read-error . dE4fc4) (make-i/o-port-error . dE4fc3) (make-i/o-invalid-position-error . dE4fc2) (make-i/o-filename-error . dE4fc1) (make-i/o-file-protection-error . dE4fc0) (make-i/o-file-is-read-only-error . dE4fbf) (make-i/o-file-does-not-exist-error . dE4fbe) (make-i/o-file-already-exists-error . dE4fbd) (make-i/o-error . dE4fbc) (make-i/o-encoding-error . dE4fbb) (make-i/o-decoding-error . dE4fba) (make-custom-textual-output-port . dE4fb9) (make-custom-textual-input/output-port . dE4fb8) (make-custom-textual-input-port . dE4fb7) (make-custom-binary-output-port . dE4fb6) (make-custom-binary-input/output-port . dE4fb5) (make-custom-binary-input-port . dE4fb4) (lookahead-u8 . dE4fb2) (lookahead-char . dE4fb1) (i/o-write-error? . dE4fb0) (i/o-read-error? . dE4faf) (i/o-port-error? . dE4fae) (i/o-invalid-position-error? . dE4fad) (i/o-filename-error? . dE4fac) (i/o-file-protection-error? . dE4fab) (i/o-file-is-read-only-error? . dE4faa) (i/o-file-does-not-exist-error? . dE4fa9) (i/o-file-already-exists-error? . dE4fa8) (i/o-error? . dE4fa7) (i/o-error-position . dE4fa6) (i/o-error-port . dE4fa5) (i/o-error-filename . dE4fa4) (i/o-encoding-error? . dE4fa3) (i/o-encoding-error-char . dE4fa2) (i/o-decoding-error? . dE4fa1) (get-u8 . dE4fa0) (get-string-n! . dE4f9f) (get-string-n . dE4f9e) (get-string-all . dE4f9d) (get-line . dE4f9c) (get-datum . dE4f9b) (get-char . dE4f9a) (get-bytevector-some . dE4f99) (get-bytevector-n! . dE4f98) (get-bytevector-n . dE4f97) (get-bytevector-all . dE4f96) (flush-output-port . dE4f95) (close-port . dE4f94) (call-with-string-output-port . dE4f73) (call-with-port . dE4f72) (call-with-bytevector-output-port . dE4f71) (bytevector->string . dE4f70) (buffer-mode? . dE4f6f) (binary-port? . dE4f6e) (&i/o-encoding . dE4de9) (&i/o-decoding . dE4de8) (&i/o-port . dE4de7) (&i/o-file-does-not-exist . dE4de6) (&i/o-file-already-exists . dE4de5) (&i/o-file-is-read-only . dE4de4) (&i/o-file-protection . dE4de3) (&i/o-filename . dE4de2) (&i/o-invalid-position . dE4de1) (&i/o-write . dE4de0) (&i/o-read . dE4ddf) (&i/o . dE4dde) (error-handling-mode . dE4dc3) (file-options . dE4dc2) (buffer-mode . dE4dc1) (eol-style . dE4dc0)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5144 '(rnrs enums) '(6) '() '() '() '((make-enumeration . dE4f6a) (enum-set=? . dE4f69) (enum-set-universe . dE4f68) (enum-set-union . dE4f67) (enum-set-subset? . dE4f66) (enum-set-projection . dE4f65) (enum-set-member? . dE4f64) (enum-set-intersection . dE4f63) (enum-set-indexer . dE4f62) (enum-set-difference . dE4f61) (enum-set-constructor . dE4f60) (enum-set-complement . dE4f5f) (enum-set->list . dE4f5e) (define-enumeration . dE4dce)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5145 '(rnrs conditions) '(6) '() '() '() '((who-condition? . dE4f5d) (warning? . dE4f5c) (violation? . dE4f5b) (undefined-violation? . dE4f5a) (syntax-violation? . dE4f59) (syntax-violation-subform . dE4f58) (syntax-violation-form . dE4f57) (syntax-violation . dE319b) (simple-conditions . dE4f56) (serious-condition? . dE4f55) (non-continuable-violation? . dE4f54) (message-condition? . dE4f53) (make-who-condition . dE4f52) (make-warning . dE4f51) (make-violation . dE4f50) (make-undefined-violation . dE4f4f) (make-syntax-violation . dE4f4e) (make-serious-condition . dE4f4d) (make-non-continuable-violation . dE4f4c) (make-message-condition . dE4f4b) (make-lexical-violation . dE4f4a) (make-irritants-condition . dE4f49) (make-implementation-restriction-violation . dE4f48) (make-error . dE4f47) (make-assertion-violation . dE4f46) (lexical-violation? . dE4f45) (irritants-condition? . dE4f44) (implementation-restriction-violation? . dE4f43) (error? . dE4f42) (condition-who . dE4f41) (condition-predicate . dE4f40) (condition-message . dE4f3f) (condition-irritants . dE4f3e) (condition-accessor . dE4f3d) (condition . dE4f3c) (assertion-violation? . dE4f3b) (condition? . dE4f3a) (&undefined . dE4ddd) (&syntax . dE4ddc) (&lexical . dE4ddb) (&implementation-restriction . dE4dda) (&non-continuable . dE4dd9) (&who . dE4dd8) (&irritants . dE4dd7) (&assertion . dE4dd6) (&violation . dE4dd5) (&error . dE4dd4) (&serious . dE4dd3) (&warning . dE4dd2) (&message . dE4dd1) (&condition . dE4dd0) (define-condition-type . dE4dcf)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5146 '(rnrs records inspection) '(6) '() '() '() '((record? . dE5022) (record-type-uid . dE5021) (record-type-sealed? . dE5020) (record-type-parent . dE501f) (record-type-opaque? . dE501e) (record-type-name . dE501d) (record-type-generative? . dE501c) (record-type-field-names . dE501b) (record-rtd . dE501a) (record-field-mutable? . dE5019)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5147 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . dE5029) (record-predicate . dE5028) (record-mutator . dE5027) (record-constructor . dE5026) (record-accessor . dE5025) (make-record-type-descriptor . dE5024) (make-record-constructor-descriptor . dE5023)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5148 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . dE4dcd) (parent-rtd . dE4dcc) (nongenerative . dE4dcb) (opaque . dE4dca) (sealed . dE4dc9) (protocol . dE4dc8) (parent . dE4dc7) (immutable . dE4dc6) (mutable . dE4dc5) (fields . dE4dc4) (record-constructor-descriptor . dE4da4) (record-type-descriptor . dE4da3)) '() values values '#f '#f '#t '#f) (dE2ccf@dE2b1b@install-library 'dE5149 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . dE5129) (&no-nans-rtd . dE5128) (&no-infinities-rcd . dE5127) (&no-infinities-rtd . dE5126) (&i/o-encoding-rcd . dE5125) (&i/o-encoding-rtd . dE5124) (&i/o-decoding-rcd . dE5123) (&i/o-decoding-rtd . dE5122) (&i/o-port-rcd . dE5121) (&i/o-port-rtd . dE5120) (&i/o-file-does-not-exist-rcd . dE511f) (&i/o-file-does-not-exist-rtd . dE511e) (&i/o-file-already-exists-rcd . dE511d) (&i/o-file-already-exists-rtd . dE511c) (&i/o-file-is-read-only-rcd . dE511b) (&i/o-file-is-read-only-rtd . dE511a) (&i/o-file-protection-rcd . dE5119) (&i/o-file-protection-rtd . dE5118) (&i/o-filename-rcd . dE5117) (&i/o-filename-rtd . dE5116) (&i/o-invalid-position-rcd . dE5115) (&i/o-invalid-position-rtd . dE5114) (&i/o-write-rcd . dE5113) (&i/o-write-rtd . dE5112) (&i/o-read-rcd . dE5111) (&i/o-read-rtd . dE5110) (&i/o-rcd . dE510f) (&i/o-rtd . dE510e) (&undefined-rcd . dE510d) (&undefined-rtd . dE510c) (&syntax-rcd . dE510b) (&syntax-rtd . dE510a) (&lexical-rcd . dE5109) (&lexical-rtd . dE5108) (&implementation-restriction-rcd . dE5107) (&implementation-restriction-rtd . dE5106) (&non-continuable-rcd . dE5105) (&non-continuable-rtd . dE5104) (&who-rcd . dE5103) (&who-rtd . dE5102) (&irritants-rcd . dE5101) (&irritants-rtd . dE5100) (&assertion-rcd . dE50ff) (&assertion-rtd . dE50fe) (&violation-rcd . dE50fd) (&violation-rtd . dE50fc) (&error-rcd . dE50fb) (&error-rtd . dE50fa) (&serious-rcd . dE50f9) (&serious-rtd . dE50f8) (&warning-rcd . dE50f7) (&warning-rtd . dE50f6) (&message-rcd . dE50f5) (&message-rtd . dE50f4) (&condition-rcd . dE50f3) (&condition-rtd . dE50f2) (syntax-error . dE3197) (syntax-dispatch . dE30bb) (pretty-print . dE50f1) (eval-core . dE50f0) (set-symbol-value! . dE50ef) (symbol-value . dE50ee) (gensym . dE50ed) (void . dE50ec) (load . dE4c24) (interaction-environment . dE31a9) (char-ready? . dE50eb) (regexp? . dE50ea) (read-line . dE50e9) (gensym-prefix-set! . dE50e8) (ungensym . dE50e7) (alist->eq-hash-table . dE50e6) (assoc-ref . dE50e5) (print . dE50e4) (format . dE50e3) (host-os . dE50e2) (library-path . dE2afa) (standard-library-path . dE50e1) (file-newer? . dE50e0) (stat-mtime . dE50df) (write-to-file . dE50de) (file->list . dE50dd) (file->string . dE50dc) (digit->integer . dE50db) (call-with-string-input-port . dE50da) (call-with-string-io . dE50d9) (string-split . dE50d8) (bytevector-for-each . dE50d7) (string->regexp . dE50d6) (rxmatch . dE50d5) (regexp-replace-all . dE50d4) (hashtable-for-each . dE50d3) (mosh-cache-dir . dE28e4) (call-process . dE50d2) (local-tz-offset . dE50d1) (microseconds . dE50d0) (directory-list . dE50cf) (set-current-directory! . dE50ce) (expand-path . dE50cd) (current-directory . dE50cc) (%spawn . dE50cb) (%waitpid . dE50ca) (simple-struct-name . dE50c9) (simple-struct-set! . dE50c8) (simple-struct-ref . dE50c7) (make-simple-struct . dE50c6) (simple-struct? . dE50c5) (pointer-ref-c-int64 . dE50c4) (pointer-ref-c-int32 . dE50c3) (pointer-ref-c-int16 . dE50c2) (pointer-ref-c-int8 . dE50c1) (pointer-ref-c-uint64 . dE50c0) (pointer-ref-c-uint32 . dE50bf) (pointer-ref-c-uint16 . dE50be) (pointer-ref-c-uint8 . dE50bd) (pointer-set-c-uint64! . dE50bc) (pointer-set-c-uint32! . dE50bb) (pointer-set-c-uint16! . dE50ba) (pointer-set-c-uint8! . dE50b9) (pointer-set-c-int64! . dE50b8) (pointer-set-c-int32! . dE50b7) (pointer-set-c-int16! . dE50b6) (pointer-set-c-int8! . dE50b5) (pointer-set-c-pointer! . dE50b4) (pointer-set-c-double! . dE50b3) (pointer-set-c-float! . dE50b2) (pointer-set-c-long-long! . dE50b1) (pointer-set-c-long! . dE50b0) (pointer-set-c-int! . dE50af) (pointer-set-c-short! . dE50ae) (pointer-set-c-char! . dE50ad) (pointer-ref-c-pointer . dE50ac) (pointer-ref-c-double . dE50ab) (pointer-ref-c-float . dE50aa) (pointer-ref-c-unsigned-long-long . dE50a9) (pointer-ref-c-signed-long-long . dE50a8) (pointer-ref-c-unsigned-long . dE50a7) (pointer-ref-c-signed-long . dE50a6) (pointer-ref-c-unsigned-int . dE50a5) (pointer-ref-c-signed-int . dE50a4) (pointer-ref-c-unsigned-short . dE50a3) (pointer-ref-c-signed-short . dE50a2) (pointer-ref-c-unsigned-char . dE50a1) (pointer-ref-c-signed-char . dE50a0) (pointer->integer . dE509f) (integer->pointer . dE509e) (pointer? . dE509d) (shared-errno . dE509c) (%ffi-free-c-callback-trampoline . dE509b) (%ffi-make-c-callback-trampoline . dE509a) (%ffi-free . dE5099) (%ffi-malloc . dE5098) (%ffi-supported? . dE5097) (%ffi-pointer->string . dE5096) (%ffi-call . dE5095) (%ffi-lookup . dE5094) (%ffi-open . dE5093) (null-terminated-utf8->string . dE5092) (null-terminated-bytevector->string . dE5091) (%exec . dE5090) (%fork . dE508f) (%pipe . dE508e) (p . dE508d) (open-output-string . dE508c) (get-output-string . dE508b) (file-stat-ctime . dE508a) (file-stat-atime . dE5089) (file-stat-mtime . dE5088) (file-size-in-bytes . dE5087) (file-writable? . dE5086) (file-executable? . dE5085) (file-readable? . dE5084) (file-regular? . dE5083) (file-symbolic-link? . dE5082) (file-directory? . dE5081) (create-symbolic-link . dE5080) (rename-file . dE507f) (delete-directory . dE507e) (create-directory . dE507d) (create-mosh-cache-dir . dE507c) (get-environment-variables . dE507b) (current-exception-handler . dE507a) (get-environment-variable . dE5079) (join-wraps . dE5078) (id->real-label . dE5077) (same-marks? . dE5076) (same-marks*? . dE5075) (get-timeofday . dE5074) (get-command-line . dE5073) (sys-display . dE5072) (whereis . dE5071) (register . dE5070) (vm-join! . dE506f) (vm-set-value! . dE506e) (vm? . dE506d) (main-vm? . dE506c) (vm-eval . dE506b) (vm-self . dE506a) (vm-start! . dE5069) (make-vm . dE5068) (mutex-try-lock! . dE5067) (mutex-unlock! . dE5066) (mutex-lock! . dE5065) (mutex? . dE5064) (make-mutex . dE5063) (condition-variable-notify-all! . dE5062) (condition-variable-notify! . dE5061) (condition-variable-wait! . dE5060) (make-condition-variable . dE505f) (write/ss . dE505e) (mosh-executable-path . dE505d) (make-file-options . dE505c) (source-info . dE505b) (make-compiler-instruction . dE505a) (make-instruction . dE5059) (set-source-info! . dE5058) (bignum? . dE5057) (fast-equal? . dE5056) (fasl-read . dE5055) (fasl-write . dE5054) (time-usage . dE5053) (os-constant . dE5052) (disasm . dE5051) (make-parameter . dE28e2) (socket-port . dE5050) (socket-shutdown . dE504f) (socket-close . dE504e) (socket-send . dE504d) (socket-recv! . dE504c) (socket-recv . dE504b) (make-server-socket . dE504a) (make-client-socket . dE5049) (socket-accept . dE5048) (socket? . dE5047) (string-upcase . dE5046) (string-titlecase . dE5045) (string-normalize-nfkd . dE5044) (string-normalize-nfkc . dE5043) (string-normalize-nfd . dE5042) (string-normalize-nfc . dE5041) (string-foldcase . dE5040) (string-downcase . dE503f) (string-ci>? . dE503e) (string-ci>=? . dE503d) (string-ci=? . dE503c) (string-ci<? . dE503b) (string-ci<=? . dE503a) (char-whitespace? . dE5039) (char-upper-case? . dE5038) (char-title-case? . dE5037) (char-numeric? . dE5036) (char-lower-case? . dE5035) (char-general-category . dE5034) (char-upcase . dE5033) (char-titlecase . dE5032) (char-foldcase . dE5031) (char-downcase . dE5030) (char-ci>? . dE502f) (char-ci>=? . dE502e) (char-ci=? . dE502d) (char-ci<? . dE502c) (char-ci<=? . dE502b) (char-alphabetic? . dE502a) (make-variable-transformer . dE2ee6) (identifier? . dE319d) (generate-temporaries . dE3189) (free-identifier=? . dE318b) (syntax->datum . dE31a1) (datum->syntax . dE319f) (bound-identifier=? . dE318d) (record-type-descriptor? . dE5029) (record-predicate . dE5028) (record-mutator . dE5027) (record-constructor . dE5026) (record-accessor . dE5025) (make-record-type-descriptor . dE5024) (make-record-constructor-descriptor . dE5023) (record? . dE5022) (record-type-uid . dE5021) (record-type-sealed? . dE5020) (record-type-parent . dE501f) (record-type-opaque? . dE501e) (record-type-name . dE501d) (record-type-generative? . dE501c) (record-type-field-names . dE501b) (record-rtd . dE501a) (record-field-mutable? . dE5019) (delete-file . dE5018) (file-exists? . dE5017) (vector-sort! . dE5016) (vector-sort . dE5015) (list-sort . dE5014) (symbol-hash . dE5013) (string-ci-hash . dE5012) (string-hash . dE5011) (equal-hash . dE5010) (hashtable-equivalence-function . dE500f) (make-hashtable . dE500e) (hashtable-hash-function . dE500d) (make-eqv-hashtable . dE500c) (make-eq-hashtable . dE500b) (hashtable? . dE500a) (hashtable-update! . dE5009) (hashtable-size . dE5008) (hashtable-set! . dE5007) (hashtable-ref . dE5006) (hashtable-mutable? . dE5005) (hashtable-keys . dE5004) (hashtable-entries . dE5003) (hashtable-delete! . dE5002) (hashtable-copy . dE5001) (hashtable-contains? . dE5000) (hashtable-clear! . dE4fff) (call-with-output-file . dE4ffe) (call-with-input-file . dE4ffd) (write-char . dE4ffc) (write . dE4ffb) (with-output-to-file . dE4ffa) (with-input-from-file . dE4ff9) (read-char . dE4ff8) (read . dE4ff7) (peek-char . dE4ff6) (open-output-file . dE4ff5) (open-input-file . dE4ff4) (newline . dE4ff3) (display . dE4ff2) (close-output-port . dE4ff1) (close-input-port . dE4ff0) (eof-object? . dE4fef) (eof-object . dE4fee) (current-error-port . dE4fed) (current-output-port . dE4fec) (current-input-port . dE4feb) (output-port? . dE4fea) (input-port? . dE4fe9) (utf-8-codec . dE4fe8) (utf-16-codec . dE4fe7) (transcoder-error-handling-mode . dE4fe6) (transcoder-eol-style . dE4fe5) (transcoder-codec . dE4fe4) (transcoded-port . dE4fe3) (textual-port? . dE4fe2) (string->bytevector . dE4fe1) (standard-output-port . dE4fe0) (standard-input-port . dE4fdf) (standard-error-port . dE4fde) (set-port-position! . dE4fdd) (put-u8 . dE4fdc) (put-string . dE4fdb) (put-datum . dE4fda) (put-char . dE4fd9) (put-bytevector . dE4fd8) (port? . dE4fd7) (port-transcoder . dE4fd6) (port-position . dE4fd5) (port-has-set-port-position!? . dE4fd4) (port-has-port-position? . dE4fd3) (port-eof? . dE4fd2) (output-port-buffer-mode . dE4fd1) (open-string-output-port . dE4fd0) (open-string-input-port . dE4fcf) (open-file-output-port . dE4fce) (open-file-input/output-port . dE4fcd) (open-file-input-port . dE4fcc) (open-bytevector-output-port . dE4fcb) (open-bytevector-input-port . dE4fca) (native-transcoder . dE4fc9) (native-eol-style . dE4fc8) (make-transcoder . dE4fc7) (latin-1-codec . dE4fc6) (make-i/o-write-error . dE4fc5) (make-i/o-read-error . dE4fc4) (make-i/o-port-error . dE4fc3) (make-i/o-invalid-position-error . dE4fc2) (make-i/o-filename-error . dE4fc1) (make-i/o-file-protection-error . dE4fc0) (make-i/o-file-is-read-only-error . dE4fbf) (make-i/o-file-does-not-exist-error . dE4fbe) (make-i/o-file-already-exists-error . dE4fbd) (make-i/o-error . dE4fbc) (make-i/o-encoding-error . dE4fbb) (make-i/o-decoding-error . dE4fba) (make-custom-textual-output-port . dE4fb9) (make-custom-textual-input/output-port . dE4fb8) (make-custom-textual-input-port . dE4fb7) (make-custom-binary-output-port . dE4fb6) (make-custom-binary-input/output-port . dE4fb5) (make-custom-binary-input-port . dE4fb4) (make-bytevector . dE4fb3) (lookahead-u8 . dE4fb2) (lookahead-char . dE4fb1) (i/o-write-error? . dE4fb0) (i/o-read-error? . dE4faf) (i/o-port-error? . dE4fae) (i/o-invalid-position-error? . dE4fad) (i/o-filename-error? . dE4fac) (i/o-file-protection-error? . dE4fab) (i/o-file-is-read-only-error? . dE4faa) (i/o-file-does-not-exist-error? . dE4fa9) (i/o-file-already-exists-error? . dE4fa8) (i/o-error? . dE4fa7) (i/o-error-position . dE4fa6) (i/o-error-port . dE4fa5) (i/o-error-filename . dE4fa4) (i/o-encoding-error? . dE4fa3) (i/o-encoding-error-char . dE4fa2) (i/o-decoding-error? . dE4fa1) (get-u8 . dE4fa0) (get-string-n! . dE4f9f) (get-string-n . dE4f9e) (get-string-all . dE4f9d) (get-line . dE4f9c) (get-datum . dE4f9b) (get-char . dE4f9a) (get-bytevector-some . dE4f99) (get-bytevector-n! . dE4f98) (get-bytevector-n . dE4f97) (get-bytevector-all . dE4f96) (flush-output-port . dE4f95) (close-port . dE4f94) (scheme-report-environment . dE3177) (quotient . dE4f93) (null-environment . dE3175) (remainder . dE4f92) (modulo . dE4f91) (inexact->exact . dE4f90) (force . dE4f8f) (exact->inexact . dE4f8e) (make-promise . dE4f8d) (exit . dE4f8c) (command-line . dE4c1e) (string-fill! . dE4f8b) (string-set! . dE4f8a) (set-cdr! . dE4f89) (set-car! . dE4f88) (remove . dE4f87) (remv . dE4f86) (remp . dE4f85) (remq . dE4f84) (partition . dE4f83) (memv . dE4f82) (memq . dE4f81) (memp . dE4f80) (member . dE4f7f) (exists . dE4f7e) (for-all . dE4f7d) (fold-right . dE4f7c) (fold-left . dE4f7b) (find . dE4f7a) (filter . dE4f79) (cons* . dE4f78) (assv . dE4f77) (assq . dE4f76) (assp . dE4f75) (assoc . dE4f74) (call-with-string-output-port . dE4f73) (call-with-port . dE4f72) (call-with-bytevector-output-port . dE4f71) (bytevector->string . dE4f70) (buffer-mode? . dE4f6f) (binary-port? . dE4f6e) (with-exception-handler . dE4f6d) (raise-continuable . dE4f6c) (raise . dE4f6b) (eval . dE317b) (environment . dE3173) (make-enumeration . dE4f6a) (enum-set=? . dE4f69) (enum-set-universe . dE4f68) (enum-set-union . dE4f67) (enum-set-subset? . dE4f66) (enum-set-projection . dE4f65) (enum-set-member? . dE4f64) (enum-set-intersection . dE4f63) (enum-set-indexer . dE4f62) (enum-set-difference . dE4f61) (enum-set-constructor . dE4f60) (enum-set-complement . dE4f5f) (enum-set->list . dE4f5e) (who-condition? . dE4f5d) (warning? . dE4f5c) (violation? . dE4f5b) (undefined-violation? . dE4f5a) (syntax-violation? . dE4f59) (syntax-violation-subform . dE4f58) (syntax-violation-form . dE4f57) (syntax-violation . dE319b) (simple-conditions . dE4f56) (serious-condition? . dE4f55) (non-continuable-violation? . dE4f54) (message-condition? . dE4f53) (make-who-condition . dE4f52) (make-warning . dE4f51) (make-violation . dE4f50) (make-undefined-violation . dE4f4f) (make-syntax-violation . dE4f4e) (make-serious-condition . dE4f4d) (make-non-continuable-violation . dE4f4c) (make-message-condition . dE4f4b) (make-lexical-violation . dE4f4a) (make-irritants-condition . dE4f49) (make-implementation-restriction-violation . dE4f48) (make-error . dE4f47) (make-assertion-violation . dE4f46) (lexical-violation? . dE4f45) (irritants-condition? . dE4f44) (implementation-restriction-violation? . dE4f43) (error? . dE4f42) (condition-who . dE4f41) (condition-predicate . dE4f40) (condition-message . dE4f3f) (condition-irritants . dE4f3e) (condition-accessor . dE4f3d) (condition . dE4f3c) (assertion-violation? . dE4f3b) (condition? . dE4f3a) (utf32->string . dE4f39) (utf16->string . dE4f38) (utf8->string . dE4f37) (uint-list->bytevector . dE4f36) (u8-list->bytevector . dE4f35) (string->utf8 . dE4f34) (string->utf32 . dE4f33) (string->utf16 . dE4f32) (sint-list->bytevector . dE4f31) (native-endianness . dE4f30) (bytevector? . dE4f2f) (bytevector=? . dE4f2e) (bytevector-uint-set! . dE4f2d) (bytevector-uint-ref . dE4f2c) (bytevector-u8-set! . dE4f2b) (bytevector-u8-ref . dE4f2a) (bytevector-u64-set! . dE4f29) (bytevector-u64-ref . dE4f28) (bytevector-u64-native-set! . dE4f27) (bytevector-u64-native-ref . dE4f26) (bytevector-u32-set! . dE4f25) (bytevector-u32-ref . dE4f24) (bytevector-u32-native-set! . dE4f23) (bytevector-u32-native-ref . dE4f22) (bytevector-u16-set! . dE4f21) (bytevector-u16-ref . dE4f20) (bytevector-u16-native-set! . dE4f1f) (bytevector-u16-native-ref . dE4f1e) (bytevector-sint-set! . dE4f1d) (bytevector-sint-ref . dE4f1c) (bytevector-s8-set! . dE4f1b) (bytevector-s8-ref . dE4f1a) (bytevector-s64-set! . dE4f19) (bytevector-s64-ref . dE4f18) (bytevector-s64-native-set! . dE4f17) (bytevector-s64-native-ref . dE4f16) (bytevector-s32-set! . dE4f15) (bytevector-s32-ref . dE4f14) (bytevector-s32-native-set! . dE4f13) (bytevector-s32-native-ref . dE4f12) (bytevector-s16-set! . dE4f11) (bytevector-s16-ref . dE4f10) (bytevector-s16-native-set! . dE4f0f) (bytevector-s16-native-ref . dE4f0e) (bytevector-length . dE4f0d) (bytevector-ieee-single-ref . dE4f0c) (bytevector-ieee-single-set! . dE4f0b) (bytevector-ieee-single-native-set! . dE4f0a) (bytevector-ieee-single-native-ref . dE4f09) (bytevector-ieee-double-set! . dE4f08) (bytevector-ieee-double-ref . dE4f07) (bytevector-ieee-double-native-set! . dE4f06) (bytevector-ieee-double-native-ref . dE4f05) (bytevector-fill! . dE4f04) (bytevector-copy! . dE4f03) (bytevector-copy . dE4f02) (bytevector->uint-list . dE4f01) (bytevector->u8-list . dE4f00) (bytevector->sint-list . dE4eff) (no-nans-violation? . dE4efe) (no-infinities-violation? . dE4efd) (make-no-nans-violation . dE4efc) (make-no-infinities-violation . dE4efb) (real->flonum . dE4efa) (flzero? . dE4ef9) (fltruncate . dE4ef8) (fltan . dE4ef7) (flsqrt . dE4ef6) (flsin . dE4ef5) (flround . dE4ef4) (flpositive? . dE4ef3) (flonum? . dE4ef2) (flodd? . dE4ef1) (flnumerator . dE4ef0) (flnegative? . dE4eef) (flnan? . dE4eee) (flmod0 . dE4eed) (flmod . dE4eec) (flmin . dE4eeb) (flmax . dE4eea) (fllog . dE4ee9) (flinteger? . dE4ee8) (flinfinite? . dE4ee7) (flfloor . dE4ee6) (flfinite? . dE4ee5) (flexpt . dE4ee4) (flexp . dE4ee3) (fleven? . dE4ee2) (fldiv0-and-mod0 . dE4ee1) (fldiv0 . dE4ee0) (fldiv-and-mod . dE4edf) (fldiv . dE4ede) (fldenominator . dE4edd) (flcos . dE4edc) (flceiling . dE4edb) (flatan . dE4eda) (flasin . dE4ed9) (flacos . dE4ed8) (flabs . dE4ed7) (fl>? . dE4ed6) (fl>=? . dE4ed5) (fl=? . dE4ed4) (fl<? . dE4ed3) (fl<=? . dE4ed2) (fl/ . dE4ed1) (fl- . dE4ed0) (fl+ . dE4ecf) (fl* . dE4ece) (fixnum->flonum . dE4ecd) (fxzero? . dE4ecc) (fxxor . dE4ecb) (fxrotate-bit-field . dE4eca) (fxreverse-bit-field . dE4ec9) (fxpositive? . dE4ec8) (fxodd? . dE4ec7) (fxnot . dE4ec6) (fxnegative? . dE4ec5) (fxmod0 . dE4ec4) (fxmod . dE4ec3) (fxmin . dE4ec2) (fxmax . dE4ec1) (fxlength . dE4ec0) (fxior . dE4ebf) (fxif . dE4ebe) (fxfirst-bit-set . dE4ebd) (fxeven? . dE4ebc) (fxdiv0-and-mod0 . dE4ebb) (fxdiv0 . dE4eba) (fxdiv-and-mod . dE4eb9) (fxdiv . dE4eb8) (fxcopy-bit-field . dE4eb7) (fxcopy-bit . dE4eb6) (fxbit-set? . dE4eb5) (fxbit-field . dE4eb4) (fxbit-count . dE4eb3) (fxarithmetic-shift-right . dE4eb2) (fxarithmetic-shift-left . dE4eb1) (fxarithmetic-shift . dE4eb0) (fxand . dE4eaf) (fx>? . dE4eae) (fx>=? . dE4ead) (fx=? . dE4eac) (fx<? . dE4eab) (fx<=? . dE4eaa) (fx-/carry . dE4ea9) (fx- . dE4ea8) (fx+/carry . dE4ea7) (fx+ . dE4ea6) (fx*/carry . dE4ea5) (fx* . dE4ea4) (greatest-fixnum . dE4ea3) (least-fixnum . dE4ea2) (fixnum-width . dE4ea1) (fixnum? . dE4ea0) (bitwise-rotate-bit-field . dE4e9f) (bitwise-reverse-bit-field . dE4e9e) (bitwise-length . dE4e9d) (bitwise-if . dE4e9c) (bitwise-first-bit-set . dE4e9b) (bitwise-copy-bit-field . dE4e9a) (bitwise-copy-bit . dE4e99) (bitwise-bit-set? . dE4e98) (bitwise-bit-field . dE4e97) (bitwise-bit-count . dE4e96) (bitwise-xor . dE4e95) (bitwise-ior . dE4e94) (bitwise-and . dE4e93) (bitwise-not . dE4e92) (bitwise-arithmetic-shift-right . dE4e91) (bitwise-arithmetic-shift-left . dE4e90) (bitwise-arithmetic-shift . dE4e8f) (zero? . dE4e8e) (vector? . dE4e8d) (vector-set! . dE4e8c) (vector-ref . dE4e8b) (vector-map . dE4e8a) (vector-length . dE4e89) (vector-for-each . dE4e88) (vector-fill! . dE4e87) (vector->list . dE4e86) (vector . dE4e85) (values . dE4e84) (truncate . dE4e83) (tan . dE4e82) (symbol? . dE4e81) (symbol=? . dE4e80) (symbol->string . dE4e7f) (substring . dE4e7e) (string? . dE4e7d) (string>? . dE4e7c) (string>=? . dE4e7b) (string=? . dE4e7a) (string<? . dE4e79) (string<=? . dE4e78) (string-ref . dE4e77) (string-length . dE4e76) (string-for-each . dE4e75) (string-copy . dE4e74) (string-append . dE4e73) (string->symbol . dE4e72) (string->number . dE4e71) (string->list . dE4e70) (string . dE4e6f) (sqrt . dE4e6e) (sin . dE4e6d) (round . dE4e6c) (reverse . dE4e6b) (real? . dE4e6a) (real-valued? . dE4e69) (real-part . dE4e68) (rationalize . dE4e67) (rational? . dE4e66) (rational-valued? . dE4e65) (procedure? . dE4e64) (positive? . dE4e63) (pair? . dE4e62) (odd? . dE4e61) (numerator . dE4e60) (number? . dE4e5f) (number->string . dE4e5e) (null? . dE4e5d) (not . dE4e5c) (negative? . dE4e5b) (nan? . dE4e5a) (min . dE4e59) (max . dE4e58) (map . dE4e57) (make-vector . dE4e56) (make-string . dE4e55) (make-rectangular . dE4e54) (make-polar . dE4e53) (magnitude . dE4e52) (log . dE4e51) (list? . dE4e50) (list-tail . dE4e4f) (list-ref . dE4e4e) (list->vector . dE4e4d) (list->string . dE4e4c) (list . dE4e4b) (length . dE4e4a) (lcm . dE4e49) (integer? . dE4e48) (integer-valued? . dE4e47) (integer->char . dE4e46) (infinite? . dE4e45) (inexact? . dE4e44) (inexact . dE4e43) (imag-part . dE4e42) (gcd . dE4e41) (for-each . dE4e40) (floor . dE4e3f) (finite? . dE4e3e) (expt . dE4e3d) (exp . dE4e3c) (exact? . dE4e3b) (exact-integer-sqrt . dE4e3a) (exact . dE4e39) (even? . dE4e38) (error . dE4e37) (eqv? . dE4e36) (equal? . dE4e35) (eq? . dE4e34) (dynamic-wind . dE4e33) (div0-and-mod0 . dE4e32) (mod0 . dE4e31) (div0 . dE4e30) (div-and-mod . dE4e2f) (mod . dE4e2e) (div . dE4e2d) (denominator . dE4e2c) (cos . dE4e2b) (cons . dE4e2a) (complex? . dE4e29) (char? . dE4e28) (char>? . dE4e27) (char>=? . dE4e26) (char=? . dE4e25) (char<? . dE4e24) (char<=? . dE4e23) (char->integer . dE4e22) (ceiling . dE4e21) (call-with-values . dE4e20) (call/cc . dE4e1f) (call-with-current-continuation . dE4e1e) (cddddr . dE4e1d) (cdddar . dE4e1c) (cddadr . dE4e1b) (cddaar . dE4e1a) (cdaddr . dE4e19) (cdadar . dE4e18) (cdaadr . dE4e17) (cdaaar . dE4e16) (cadddr . dE4e15) (caddar . dE4e14) (cadadr . dE4e13) (cadaar . dE4e12) (caaddr . dE4e11) (caadar . dE4e10) (caaadr . dE4e0f) (caaaar . dE4e0e) (cdddr . dE4e0d) (cddar . dE4e0c) (cdadr . dE4e0b) (cdaar . dE4e0a) (caddr . dE4e09) (cadar . dE4e08) (caadr . dE4e07) (caaar . dE4e06) (cddr . dE4e05) (cdar . dE4e04) (cadr . dE4e03) (caar . dE4e02) (cdr . dE4e01) (car . dE4e00) (boolean? . dE4dff) (boolean=? . dE4dfe) (atan . dE4dfd) (assertion-violation . dE4dfc) (assertion-error . dE3195) (asin . dE4dfb) (apply . dE4dfa) (append . dE4df9) (angle . dE4df8) (acos . dE4df7) (abs . dE4df6) (/ . dE4df5) (* . dE4df4) (- . dE4df3) (+ . dE4df2) (>= . dE4df1) (> . dE4df0) (= . dE4def) (<= . dE4dee) (< . dE4ded) (library . dE4dec) (&no-nans . dE4deb) (&no-infinities . dE4dea) (&i/o-encoding . dE4de9) (&i/o-decoding . dE4de8) (&i/o-port . dE4de7) (&i/o-file-does-not-exist . dE4de6) (&i/o-file-already-exists . dE4de5) (&i/o-file-is-read-only . dE4de4) (&i/o-file-protection . dE4de3) (&i/o-filename . dE4de2) (&i/o-invalid-position . dE4de1) (&i/o-write . dE4de0) (&i/o-read . dE4ddf) (&i/o . dE4dde) (&undefined . dE4ddd) (&syntax . dE4ddc) (&lexical . dE4ddb) (&implementation-restriction . dE4dda) (&non-continuable . dE4dd9) (&who . dE4dd8) (&irritants . dE4dd7) (&assertion . dE4dd6) (&violation . dE4dd5) (&error . dE4dd4) (&serious . dE4dd3) (&warning . dE4dd2) (&message . dE4dd1) (&condition . dE4dd0) (define-condition-type . dE4dcf) (define-enumeration . dE4dce) (define-record-type . dE4dcd) (parent-rtd . dE4dcc) (nongenerative . dE4dcb) (opaque . dE4dca) (sealed . dE4dc9) (protocol . dE4dc8) (parent . dE4dc7) (immutable . dE4dc6) (mutable . dE4dc5) (fields . dE4dc4) (error-handling-mode . dE4dc3) (file-options . dE4dc2) (buffer-mode . dE4dc1) (eol-style . dE4dc0) (guard . dE4dbf) (trace-define . dE4dbe) (trace-lambda . dE4dbd) (unsyntax-splicing . dE4dbc) (unsyntax . dE4dbb) (unquote-splicing . dE4dba) (unquote . dE4db9) (_ . dE4db8) (else . dE4db7) (=> . dE4db6) (... . dE4db5) (assert . dE4db4) (endianness . dE4db3) (delay . dE4db2) (time . dE4db1) (do . dE4db0) (cond . dE4daf) (let* . dE4dae) (let*-values . dE4dad) (let-values . dE4dac) (identifier-syntax . dE4dab) (with-syntax . dE4daa) (quasisyntax . dE4da9) (quasiquote . dE4da8) (syntax-rules . dE4da7) (include . dE4da6) (define-struct . dE4da5) (record-constructor-descriptor . dE4da4) (record-type-descriptor . dE4da3) (case . dE4da2) (parameterize . dE4da1) (unless . dE4da0) (when . dE4d9f) (or . dE4d9e) (and . dE4d9d) (if . dE4d9c) (let . dE4d9b) (letrec* . dE4d9a) (letrec . dE4d99) (type-descriptor . dE4d98) (case-lambda . dE4d97) (lambda . dE4d96) (syntax . dE4d95) (syntax-case . dE4d94) (quote . dE4d93) (foreign-call . dE4d92) (letrec-syntax . dE4d91) (let-syntax . dE4d90) (set! . dE4d8f) (import . dE4d8e) (begin . dE4d8d) (module . dE4d8c) (define-syntax . dE4d8b) (define . dE4d8a)) '((dE5129 core-prim . &no-nans-rcd) (dE5128 core-prim . &no-nans-rtd) (dE5127 core-prim . &no-infinities-rcd) (dE5126 core-prim . &no-infinities-rtd) (dE5125 core-prim . &i/o-encoding-rcd) (dE5124 core-prim . &i/o-encoding-rtd) (dE5123 core-prim . &i/o-decoding-rcd) (dE5122 core-prim . &i/o-decoding-rtd) (dE5121 core-prim . &i/o-port-rcd) (dE5120 core-prim . &i/o-port-rtd) (dE511f core-prim . &i/o-file-does-not-exist-rcd) (dE511e core-prim . &i/o-file-does-not-exist-rtd) (dE511d core-prim . &i/o-file-already-exists-rcd) (dE511c core-prim . &i/o-file-already-exists-rtd) (dE511b core-prim . &i/o-file-is-read-only-rcd) (dE511a core-prim . &i/o-file-is-read-only-rtd) (dE5119 core-prim . &i/o-file-protection-rcd) (dE5118 core-prim . &i/o-file-protection-rtd) (dE5117 core-prim . &i/o-filename-rcd) (dE5116 core-prim . &i/o-filename-rtd) (dE5115 core-prim . &i/o-invalid-position-rcd) (dE5114 core-prim . &i/o-invalid-position-rtd) (dE5113 core-prim . &i/o-write-rcd) (dE5112 core-prim . &i/o-write-rtd) (dE5111 core-prim . &i/o-read-rcd) (dE5110 core-prim . &i/o-read-rtd) (dE510f core-prim . &i/o-rcd) (dE510e core-prim . &i/o-rtd) (dE510d core-prim . &undefined-rcd) (dE510c core-prim . &undefined-rtd) (dE510b core-prim . &syntax-rcd) (dE510a core-prim . &syntax-rtd) (dE5109 core-prim . &lexical-rcd) (dE5108 core-prim . &lexical-rtd) (dE5107 core-prim . &implementation-restriction-rcd) (dE5106 core-prim . &implementation-restriction-rtd) (dE5105 core-prim . &non-continuable-rcd) (dE5104 core-prim . &non-continuable-rtd) (dE5103 core-prim . &who-rcd) (dE5102 core-prim . &who-rtd) (dE5101 core-prim . &irritants-rcd) (dE5100 core-prim . &irritants-rtd) (dE50ff core-prim . &assertion-rcd) (dE50fe core-prim . &assertion-rtd) (dE50fd core-prim . &violation-rcd) (dE50fc core-prim . &violation-rtd) (dE50fb core-prim . &error-rcd) (dE50fa core-prim . &error-rtd) (dE50f9 core-prim . &serious-rcd) (dE50f8 core-prim . &serious-rtd) (dE50f7 core-prim . &warning-rcd) (dE50f6 core-prim . &warning-rtd) (dE50f5 core-prim . &message-rcd) (dE50f4 core-prim . &message-rtd) (dE50f3 core-prim . &condition-rcd) (dE50f2 core-prim . &condition-rtd) (dE3197 core-prim . syntax-error) (dE30bb core-prim . syntax-dispatch) (dE50f1 core-prim . pretty-print) (dE50f0 core-prim . eval-core) (dE50ef core-prim . set-symbol-value!) (dE50ee core-prim . symbol-value) (dE50ed core-prim . gensym) (dE50ec core-prim . void) (dE4c24 core-prim . load) (dE31a9 core-prim . interaction-environment) (dE50eb core-prim . char-ready?) (dE50ea core-prim . regexp?) (dE50e9 core-prim . read-line) (dE50e8 core-prim . gensym-prefix-set!) (dE50e7 core-prim . ungensym) (dE50e6 core-prim . alist->eq-hash-table) (dE50e5 core-prim . assoc-ref) (dE50e4 core-prim . print) (dE50e3 core-prim . format) (dE50e2 core-prim . host-os) (dE2afa core-prim . library-path) (dE50e1 core-prim . standard-library-path) (dE50e0 core-prim . file-newer?) (dE50df core-prim . stat-mtime) (dE50de core-prim . write-to-file) (dE50dd core-prim . file->list) (dE50dc core-prim . file->string) (dE50db core-prim . digit->integer) (dE50da core-prim . call-with-string-input-port) (dE50d9 core-prim . call-with-string-io) (dE50d8 core-prim . string-split) (dE50d7 core-prim . bytevector-for-each) (dE50d6 core-prim . string->regexp) (dE50d5 core-prim . rxmatch) (dE50d4 core-prim . regexp-replace-all) (dE50d3 core-prim . hashtable-for-each) (dE28e4 core-prim . mosh-cache-dir) (dE50d2 core-prim . call-process) (dE50d1 core-prim . local-tz-offset) (dE50d0 core-prim . microseconds) (dE50cf core-prim . directory-list) (dE50ce core-prim . set-current-directory!) (dE50cd core-prim . expand-path) (dE50cc core-prim . current-directory) (dE50cb core-prim . %spawn) (dE50ca core-prim . %waitpid) (dE50c9 core-prim . simple-struct-name) (dE50c8 core-prim . simple-struct-set!) (dE50c7 core-prim . simple-struct-ref) (dE50c6 core-prim . make-simple-struct) (dE50c5 core-prim . simple-struct?) (dE50c4 core-prim . pointer-ref-c-int64) (dE50c3 core-prim . pointer-ref-c-int32) (dE50c2 core-prim . pointer-ref-c-int16) (dE50c1 core-prim . pointer-ref-c-int8) (dE50c0 core-prim . pointer-ref-c-uint64) (dE50bf core-prim . pointer-ref-c-uint32) (dE50be core-prim . pointer-ref-c-uint16) (dE50bd core-prim . pointer-ref-c-uint8) (dE50bc core-prim . pointer-set-c-uint64!) (dE50bb core-prim . pointer-set-c-uint32!) (dE50ba core-prim . pointer-set-c-uint16!) (dE50b9 core-prim . pointer-set-c-uint8!) (dE50b8 core-prim . pointer-set-c-int64!) (dE50b7 core-prim . pointer-set-c-int32!) (dE50b6 core-prim . pointer-set-c-int16!) (dE50b5 core-prim . pointer-set-c-int8!) (dE50b4 core-prim . pointer-set-c-pointer!) (dE50b3 core-prim . pointer-set-c-double!) (dE50b2 core-prim . pointer-set-c-float!) (dE50b1 core-prim . pointer-set-c-long-long!) (dE50b0 core-prim . pointer-set-c-long!) (dE50af core-prim . pointer-set-c-int!) (dE50ae core-prim . pointer-set-c-short!) (dE50ad core-prim . pointer-set-c-char!) (dE50ac core-prim . pointer-ref-c-pointer) (dE50ab core-prim . pointer-ref-c-double) (dE50aa core-prim . pointer-ref-c-float) (dE50a9 core-prim . pointer-ref-c-unsigned-long-long) (dE50a8 core-prim . pointer-ref-c-signed-long-long) (dE50a7 core-prim . pointer-ref-c-unsigned-long) (dE50a6 core-prim . pointer-ref-c-signed-long) (dE50a5 core-prim . pointer-ref-c-unsigned-int) (dE50a4 core-prim . pointer-ref-c-signed-int) (dE50a3 core-prim . pointer-ref-c-unsigned-short) (dE50a2 core-prim . pointer-ref-c-signed-short) (dE50a1 core-prim . pointer-ref-c-unsigned-char) (dE50a0 core-prim . pointer-ref-c-signed-char) (dE509f core-prim . pointer->integer) (dE509e core-prim . integer->pointer) (dE509d core-prim . pointer?) (dE509c core-prim . shared-errno) (dE509b core-prim . %ffi-free-c-callback-trampoline) (dE509a core-prim . %ffi-make-c-callback-trampoline) (dE5099 core-prim . %ffi-free) (dE5098 core-prim . %ffi-malloc) (dE5097 core-prim . %ffi-supported?) (dE5096 core-prim . %ffi-pointer->string) (dE5095 core-prim . %ffi-call) (dE5094 core-prim . %ffi-lookup) (dE5093 core-prim . %ffi-open) (dE5092 core-prim . null-terminated-utf8->string) (dE5091 core-prim . null-terminated-bytevector->string) (dE5090 core-prim . %exec) (dE508f core-prim . %fork) (dE508e core-prim . %pipe) (dE508d core-prim . p) (dE508c core-prim . open-output-string) (dE508b core-prim . get-output-string) (dE508a core-prim . file-stat-ctime) (dE5089 core-prim . file-stat-atime) (dE5088 core-prim . file-stat-mtime) (dE5087 core-prim . file-size-in-bytes) (dE5086 core-prim . file-writable?) (dE5085 core-prim . file-executable?) (dE5084 core-prim . file-readable?) (dE5083 core-prim . file-regular?) (dE5082 core-prim . file-symbolic-link?) (dE5081 core-prim . file-directory?) (dE5080 core-prim . create-symbolic-link) (dE507f core-prim . rename-file) (dE507e core-prim . delete-directory) (dE507d core-prim . create-directory) (dE507c core-prim . create-mosh-cache-dir) (dE507b core-prim . get-environment-variables) (dE507a core-prim . current-exception-handler) (dE5079 core-prim . get-environment-variable) (dE5078 core-prim . join-wraps) (dE5077 core-prim . id->real-label) (dE5076 core-prim . same-marks?) (dE5075 core-prim . same-marks*?) (dE5074 core-prim . get-timeofday) (dE5073 core-prim . get-command-line) (dE5072 core-prim . sys-display) (dE5071 core-prim . whereis) (dE5070 core-prim . register) (dE506f core-prim . vm-join!) (dE506e core-prim . vm-set-value!) (dE506d core-prim . vm?) (dE506c core-prim . main-vm?) (dE506b core-prim . vm-eval) (dE506a core-prim . vm-self) (dE5069 core-prim . vm-start!) (dE5068 core-prim . make-vm) (dE5067 core-prim . mutex-try-lock!) (dE5066 core-prim . mutex-unlock!) (dE5065 core-prim . mutex-lock!) (dE5064 core-prim . mutex?) (dE5063 core-prim . make-mutex) (dE5062 core-prim . condition-variable-notify-all!) (dE5061 core-prim . condition-variable-notify!) (dE5060 core-prim . condition-variable-wait!) (dE505f core-prim . make-condition-variable) (dE505e core-prim . write/ss) (dE505d core-prim . mosh-executable-path) (dE505c core-prim . make-file-options) (dE505b core-prim . source-info) (dE505a core-prim . make-compiler-instruction) (dE5059 core-prim . make-instruction) (dE5058 core-prim . set-source-info!) (dE5057 core-prim . bignum?) (dE5056 core-prim . fast-equal?) (dE5055 core-prim . fasl-read) (dE5054 core-prim . fasl-write) (dE5053 core-prim . time-usage) (dE5052 core-prim . os-constant) (dE5051 core-prim . disasm) (dE28e2 core-prim . make-parameter) (dE5050 core-prim . socket-port) (dE504f core-prim . socket-shutdown) (dE504e core-prim . socket-close) (dE504d core-prim . socket-send) (dE504c core-prim . socket-recv!) (dE504b core-prim . socket-recv) (dE504a core-prim . make-server-socket) (dE5049 core-prim . make-client-socket) (dE5048 core-prim . socket-accept) (dE5047 core-prim . socket?) (dE5046 core-prim . string-upcase) (dE5045 core-prim . string-titlecase) (dE5044 core-prim . string-normalize-nfkd) (dE5043 core-prim . string-normalize-nfkc) (dE5042 core-prim . string-normalize-nfd) (dE5041 core-prim . string-normalize-nfc) (dE5040 core-prim . string-foldcase) (dE503f core-prim . string-downcase) (dE503e core-prim . string-ci>?) (dE503d core-prim . string-ci>=?) (dE503c core-prim . string-ci=?) (dE503b core-prim . string-ci<?) (dE503a core-prim . string-ci<=?) (dE5039 core-prim . char-whitespace?) (dE5038 core-prim . char-upper-case?) (dE5037 core-prim . char-title-case?) (dE5036 core-prim . char-numeric?) (dE5035 core-prim . char-lower-case?) (dE5034 core-prim . char-general-category) (dE5033 core-prim . char-upcase) (dE5032 core-prim . char-titlecase) (dE5031 core-prim . char-foldcase) (dE5030 core-prim . char-downcase) (dE502f core-prim . char-ci>?) (dE502e core-prim . char-ci>=?) (dE502d core-prim . char-ci=?) (dE502c core-prim . char-ci<?) (dE502b core-prim . char-ci<=?) (dE502a core-prim . char-alphabetic?) (dE2ee6 core-prim . make-variable-transformer) (dE319d core-prim . identifier?) (dE3189 core-prim . generate-temporaries) (dE318b core-prim . free-identifier=?) (dE31a1 core-prim . syntax->datum) (dE319f core-prim . datum->syntax) (dE318d core-prim . bound-identifier=?) (dE5029 core-prim . record-type-descriptor?) (dE5028 core-prim . record-predicate) (dE5027 core-prim . record-mutator) (dE5026 core-prim . record-constructor) (dE5025 core-prim . record-accessor) (dE5024 core-prim . make-record-type-descriptor) (dE5023 core-prim . make-record-constructor-descriptor) (dE5022 core-prim . record?) (dE5021 core-prim . record-type-uid) (dE5020 core-prim . record-type-sealed?) (dE501f core-prim . record-type-parent) (dE501e core-prim . record-type-opaque?) (dE501d core-prim . record-type-name) (dE501c core-prim . record-type-generative?) (dE501b core-prim . record-type-field-names) (dE501a core-prim . record-rtd) (dE5019 core-prim . record-field-mutable?) (dE5018 core-prim . delete-file) (dE5017 core-prim . file-exists?) (dE5016 core-prim . vector-sort!) (dE5015 core-prim . vector-sort) (dE5014 core-prim . list-sort) (dE5013 core-prim . symbol-hash) (dE5012 core-prim . string-ci-hash) (dE5011 core-prim . string-hash) (dE5010 core-prim . equal-hash) (dE500f core-prim . hashtable-equivalence-function) (dE500e core-prim . make-hashtable) (dE500d core-prim . hashtable-hash-function) (dE500c core-prim . make-eqv-hashtable) (dE500b core-prim . make-eq-hashtable) (dE500a core-prim . hashtable?) (dE5009 core-prim . hashtable-update!) (dE5008 core-prim . hashtable-size) (dE5007 core-prim . hashtable-set!) (dE5006 core-prim . hashtable-ref) (dE5005 core-prim . hashtable-mutable?) (dE5004 core-prim . hashtable-keys) (dE5003 core-prim . hashtable-entries) (dE5002 core-prim . hashtable-delete!) (dE5001 core-prim . hashtable-copy) (dE5000 core-prim . hashtable-contains?) (dE4fff core-prim . hashtable-clear!) (dE4ffe core-prim . call-with-output-file) (dE4ffd core-prim . call-with-input-file) (dE4ffc core-prim . write-char) (dE4ffb core-prim . write) (dE4ffa core-prim . with-output-to-file) (dE4ff9 core-prim . with-input-from-file) (dE4ff8 core-prim . read-char) (dE4ff7 core-prim . read) (dE4ff6 core-prim . peek-char) (dE4ff5 core-prim . open-output-file) (dE4ff4 core-prim . open-input-file) (dE4ff3 core-prim . newline) (dE4ff2 core-prim . display) (dE4ff1 core-prim . close-output-port) (dE4ff0 core-prim . close-input-port) (dE4fef core-prim . eof-object?) (dE4fee core-prim . eof-object) (dE4fed core-prim . current-error-port) (dE4fec core-prim . current-output-port) (dE4feb core-prim . current-input-port) (dE4fea core-prim . output-port?) (dE4fe9 core-prim . input-port?) (dE4fe8 core-prim . utf-8-codec) (dE4fe7 core-prim . utf-16-codec) (dE4fe6 core-prim . transcoder-error-handling-mode) (dE4fe5 core-prim . transcoder-eol-style) (dE4fe4 core-prim . transcoder-codec) (dE4fe3 core-prim . transcoded-port) (dE4fe2 core-prim . textual-port?) (dE4fe1 core-prim . string->bytevector) (dE4fe0 core-prim . standard-output-port) (dE4fdf core-prim . standard-input-port) (dE4fde core-prim . standard-error-port) (dE4fdd core-prim . set-port-position!) (dE4fdc core-prim . put-u8) (dE4fdb core-prim . put-string) (dE4fda core-prim . put-datum) (dE4fd9 core-prim . put-char) (dE4fd8 core-prim . put-bytevector) (dE4fd7 core-prim . port?) (dE4fd6 core-prim . port-transcoder) (dE4fd5 core-prim . port-position) (dE4fd4 core-prim . port-has-set-port-position!?) (dE4fd3 core-prim . port-has-port-position?) (dE4fd2 core-prim . port-eof?) (dE4fd1 core-prim . output-port-buffer-mode) (dE4fd0 core-prim . open-string-output-port) (dE4fcf core-prim . open-string-input-port) (dE4fce core-prim . open-file-output-port) (dE4fcd core-prim . open-file-input/output-port) (dE4fcc core-prim . open-file-input-port) (dE4fcb core-prim . open-bytevector-output-port) (dE4fca core-prim . open-bytevector-input-port) (dE4fc9 core-prim . native-transcoder) (dE4fc8 core-prim . native-eol-style) (dE4fc7 core-prim . make-transcoder) (dE4fc6 core-prim . latin-1-codec) (dE4fc5 core-prim . make-i/o-write-error) (dE4fc4 core-prim . make-i/o-read-error) (dE4fc3 core-prim . make-i/o-port-error) (dE4fc2 core-prim . make-i/o-invalid-position-error) (dE4fc1 core-prim . make-i/o-filename-error) (dE4fc0 core-prim . make-i/o-file-protection-error) (dE4fbf core-prim . make-i/o-file-is-read-only-error) (dE4fbe core-prim . make-i/o-file-does-not-exist-error) (dE4fbd core-prim . make-i/o-file-already-exists-error) (dE4fbc core-prim . make-i/o-error) (dE4fbb core-prim . make-i/o-encoding-error) (dE4fba core-prim . make-i/o-decoding-error) (dE4fb9 core-prim . make-custom-textual-output-port) (dE4fb8 core-prim . make-custom-textual-input/output-port) (dE4fb7 core-prim . make-custom-textual-input-port) (dE4fb6 core-prim . make-custom-binary-output-port) (dE4fb5 core-prim . make-custom-binary-input/output-port) (dE4fb4 core-prim . make-custom-binary-input-port) (dE4fb3 core-prim . make-bytevector) (dE4fb2 core-prim . lookahead-u8) (dE4fb1 core-prim . lookahead-char) (dE4fb0 core-prim . i/o-write-error?) (dE4faf core-prim . i/o-read-error?) (dE4fae core-prim . i/o-port-error?) (dE4fad core-prim . i/o-invalid-position-error?) (dE4fac core-prim . i/o-filename-error?) (dE4fab core-prim . i/o-file-protection-error?) (dE4faa core-prim . i/o-file-is-read-only-error?) (dE4fa9 core-prim . i/o-file-does-not-exist-error?) (dE4fa8 core-prim . i/o-file-already-exists-error?) (dE4fa7 core-prim . i/o-error?) (dE4fa6 core-prim . i/o-error-position) (dE4fa5 core-prim . i/o-error-port) (dE4fa4 core-prim . i/o-error-filename) (dE4fa3 core-prim . i/o-encoding-error?) (dE4fa2 core-prim . i/o-encoding-error-char) (dE4fa1 core-prim . i/o-decoding-error?) (dE4fa0 core-prim . get-u8) (dE4f9f core-prim . get-string-n!) (dE4f9e core-prim . get-string-n) (dE4f9d core-prim . get-string-all) (dE4f9c core-prim . get-line) (dE4f9b core-prim . get-datum) (dE4f9a core-prim . get-char) (dE4f99 core-prim . get-bytevector-some) (dE4f98 core-prim . get-bytevector-n!) (dE4f97 core-prim . get-bytevector-n) (dE4f96 core-prim . get-bytevector-all) (dE4f95 core-prim . flush-output-port) (dE4f94 core-prim . close-port) (dE3177 core-prim . scheme-report-environment) (dE4f93 core-prim . quotient) (dE3175 core-prim . null-environment) (dE4f92 core-prim . remainder) (dE4f91 core-prim . modulo) (dE4f90 core-prim . inexact->exact) (dE4f8f core-prim . force) (dE4f8e core-prim . exact->inexact) (dE4f8d core-prim . make-promise) (dE4f8c core-prim . exit) (dE4c1e core-prim . command-line) (dE4f8b core-prim . string-fill!) (dE4f8a core-prim . string-set!) (dE4f89 core-prim . set-cdr!) (dE4f88 core-prim . set-car!) (dE4f87 core-prim . remove) (dE4f86 core-prim . remv) (dE4f85 core-prim . remp) (dE4f84 core-prim . remq) (dE4f83 core-prim . partition) (dE4f82 core-prim . memv) (dE4f81 core-prim . memq) (dE4f80 core-prim . memp) (dE4f7f core-prim . member) (dE4f7e core-prim . exists) (dE4f7d core-prim . for-all) (dE4f7c core-prim . fold-right) (dE4f7b core-prim . fold-left) (dE4f7a core-prim . find) (dE4f79 core-prim . filter) (dE4f78 core-prim . cons*) (dE4f77 core-prim . assv) (dE4f76 core-prim . assq) (dE4f75 core-prim . assp) (dE4f74 core-prim . assoc) (dE4f73 core-prim . call-with-string-output-port) (dE4f72 core-prim . call-with-port) (dE4f71 core-prim . call-with-bytevector-output-port) (dE4f70 core-prim . bytevector->string) (dE4f6f core-prim . buffer-mode?) (dE4f6e core-prim . binary-port?) (dE4f6d core-prim . with-exception-handler) (dE4f6c core-prim . raise-continuable) (dE4f6b core-prim . raise) (dE317b core-prim . eval) (dE3173 core-prim . environment) (dE4f6a core-prim . make-enumeration) (dE4f69 core-prim . enum-set=?) (dE4f68 core-prim . enum-set-universe) (dE4f67 core-prim . enum-set-union) (dE4f66 core-prim . enum-set-subset?) (dE4f65 core-prim . enum-set-projection) (dE4f64 core-prim . enum-set-member?) (dE4f63 core-prim . enum-set-intersection) (dE4f62 core-prim . enum-set-indexer) (dE4f61 core-prim . enum-set-difference) (dE4f60 core-prim . enum-set-constructor) (dE4f5f core-prim . enum-set-complement) (dE4f5e core-prim . enum-set->list) (dE4f5d core-prim . who-condition?) (dE4f5c core-prim . warning?) (dE4f5b core-prim . violation?) (dE4f5a core-prim . undefined-violation?) (dE4f59 core-prim . syntax-violation?) (dE4f58 core-prim . syntax-violation-subform) (dE4f57 core-prim . syntax-violation-form) (dE319b core-prim . syntax-violation) (dE4f56 core-prim . simple-conditions) (dE4f55 core-prim . serious-condition?) (dE4f54 core-prim . non-continuable-violation?) (dE4f53 core-prim . message-condition?) (dE4f52 core-prim . make-who-condition) (dE4f51 core-prim . make-warning) (dE4f50 core-prim . make-violation) (dE4f4f core-prim . make-undefined-violation) (dE4f4e core-prim . make-syntax-violation) (dE4f4d core-prim . make-serious-condition) (dE4f4c core-prim . make-non-continuable-violation) (dE4f4b core-prim . make-message-condition) (dE4f4a core-prim . make-lexical-violation) (dE4f49 core-prim . make-irritants-condition) (dE4f48 core-prim . make-implementation-restriction-violation) (dE4f47 core-prim . make-error) (dE4f46 core-prim . make-assertion-violation) (dE4f45 core-prim . lexical-violation?) (dE4f44 core-prim . irritants-condition?) (dE4f43 core-prim . implementation-restriction-violation?) (dE4f42 core-prim . error?) (dE4f41 core-prim . condition-who) (dE4f40 core-prim . condition-predicate) (dE4f3f core-prim . condition-message) (dE4f3e core-prim . condition-irritants) (dE4f3d core-prim . condition-accessor) (dE4f3c core-prim . condition) (dE4f3b core-prim . assertion-violation?) (dE4f3a core-prim . condition?) (dE4f39 core-prim . utf32->string) (dE4f38 core-prim . utf16->string) (dE4f37 core-prim . utf8->string) (dE4f36 core-prim . uint-list->bytevector) (dE4f35 core-prim . u8-list->bytevector) (dE4f34 core-prim . string->utf8) (dE4f33 core-prim . string->utf32) (dE4f32 core-prim . string->utf16) (dE4f31 core-prim . sint-list->bytevector) (dE4f30 core-prim . native-endianness) (dE4f2f core-prim . bytevector?) (dE4f2e core-prim . bytevector=?) (dE4f2d core-prim . bytevector-uint-set!) (dE4f2c core-prim . bytevector-uint-ref) (dE4f2b core-prim . bytevector-u8-set!) (dE4f2a core-prim . bytevector-u8-ref) (dE4f29 core-prim . bytevector-u64-set!) (dE4f28 core-prim . bytevector-u64-ref) (dE4f27 core-prim . bytevector-u64-native-set!) (dE4f26 core-prim . bytevector-u64-native-ref) (dE4f25 core-prim . bytevector-u32-set!) (dE4f24 core-prim . bytevector-u32-ref) (dE4f23 core-prim . bytevector-u32-native-set!) (dE4f22 core-prim . bytevector-u32-native-ref) (dE4f21 core-prim . bytevector-u16-set!) (dE4f20 core-prim . bytevector-u16-ref) (dE4f1f core-prim . bytevector-u16-native-set!) (dE4f1e core-prim . bytevector-u16-native-ref) (dE4f1d core-prim . bytevector-sint-set!) (dE4f1c core-prim . bytevector-sint-ref) (dE4f1b core-prim . bytevector-s8-set!) (dE4f1a core-prim . bytevector-s8-ref) (dE4f19 core-prim . bytevector-s64-set!) (dE4f18 core-prim . bytevector-s64-ref) (dE4f17 core-prim . bytevector-s64-native-set!) (dE4f16 core-prim . bytevector-s64-native-ref) (dE4f15 core-prim . bytevector-s32-set!) (dE4f14 core-prim . bytevector-s32-ref) (dE4f13 core-prim . bytevector-s32-native-set!) (dE4f12 core-prim . bytevector-s32-native-ref) (dE4f11 core-prim . bytevector-s16-set!) (dE4f10 core-prim . bytevector-s16-ref) (dE4f0f core-prim . bytevector-s16-native-set!) (dE4f0e core-prim . bytevector-s16-native-ref) (dE4f0d core-prim . bytevector-length) (dE4f0c core-prim . bytevector-ieee-single-ref) (dE4f0b core-prim . bytevector-ieee-single-set!) (dE4f0a core-prim . bytevector-ieee-single-native-set!) (dE4f09 core-prim . bytevector-ieee-single-native-ref) (dE4f08 core-prim . bytevector-ieee-double-set!) (dE4f07 core-prim . bytevector-ieee-double-ref) (dE4f06 core-prim . bytevector-ieee-double-native-set!) (dE4f05 core-prim . bytevector-ieee-double-native-ref) (dE4f04 core-prim . bytevector-fill!) (dE4f03 core-prim . bytevector-copy!) (dE4f02 core-prim . bytevector-copy) (dE4f01 core-prim . bytevector->uint-list) (dE4f00 core-prim . bytevector->u8-list) (dE4eff core-prim . bytevector->sint-list) (dE4efe core-prim . no-nans-violation?) (dE4efd core-prim . no-infinities-violation?) (dE4efc core-prim . make-no-nans-violation) (dE4efb core-prim . make-no-infinities-violation) (dE4efa core-prim . real->flonum) (dE4ef9 core-prim . flzero?) (dE4ef8 core-prim . fltruncate) (dE4ef7 core-prim . fltan) (dE4ef6 core-prim . flsqrt) (dE4ef5 core-prim . flsin) (dE4ef4 core-prim . flround) (dE4ef3 core-prim . flpositive?) (dE4ef2 core-prim . flonum?) (dE4ef1 core-prim . flodd?) (dE4ef0 core-prim . flnumerator) (dE4eef core-prim . flnegative?) (dE4eee core-prim . flnan?) (dE4eed core-prim . flmod0) (dE4eec core-prim . flmod) (dE4eeb core-prim . flmin) (dE4eea core-prim . flmax) (dE4ee9 core-prim . fllog) (dE4ee8 core-prim . flinteger?) (dE4ee7 core-prim . flinfinite?) (dE4ee6 core-prim . flfloor) (dE4ee5 core-prim . flfinite?) (dE4ee4 core-prim . flexpt) (dE4ee3 core-prim . flexp) (dE4ee2 core-prim . fleven?) (dE4ee1 core-prim . fldiv0-and-mod0) (dE4ee0 core-prim . fldiv0) (dE4edf core-prim . fldiv-and-mod) (dE4ede core-prim . fldiv) (dE4edd core-prim . fldenominator) (dE4edc core-prim . flcos) (dE4edb core-prim . flceiling) (dE4eda core-prim . flatan) (dE4ed9 core-prim . flasin) (dE4ed8 core-prim . flacos) (dE4ed7 core-prim . flabs) (dE4ed6 core-prim . fl>?) (dE4ed5 core-prim . fl>=?) (dE4ed4 core-prim . fl=?) (dE4ed3 core-prim . fl<?) (dE4ed2 core-prim . fl<=?) (dE4ed1 core-prim . fl/) (dE4ed0 core-prim . fl-) (dE4ecf core-prim . fl+) (dE4ece core-prim . fl*) (dE4ecd core-prim . fixnum->flonum) (dE4ecc core-prim . fxzero?) (dE4ecb core-prim . fxxor) (dE4eca core-prim . fxrotate-bit-field) (dE4ec9 core-prim . fxreverse-bit-field) (dE4ec8 core-prim . fxpositive?) (dE4ec7 core-prim . fxodd?) (dE4ec6 core-prim . fxnot) (dE4ec5 core-prim . fxnegative?) (dE4ec4 core-prim . fxmod0) (dE4ec3 core-prim . fxmod) (dE4ec2 core-prim . fxmin) (dE4ec1 core-prim . fxmax) (dE4ec0 core-prim . fxlength) (dE4ebf core-prim . fxior) (dE4ebe core-prim . fxif) (dE4ebd core-prim . fxfirst-bit-set) (dE4ebc core-prim . fxeven?) (dE4ebb core-prim . fxdiv0-and-mod0) (dE4eba core-prim . fxdiv0) (dE4eb9 core-prim . fxdiv-and-mod) (dE4eb8 core-prim . fxdiv) (dE4eb7 core-prim . fxcopy-bit-field) (dE4eb6 core-prim . fxcopy-bit) (dE4eb5 core-prim . fxbit-set?) (dE4eb4 core-prim . fxbit-field) (dE4eb3 core-prim . fxbit-count) (dE4eb2 core-prim . fxarithmetic-shift-right) (dE4eb1 core-prim . fxarithmetic-shift-left) (dE4eb0 core-prim . fxarithmetic-shift) (dE4eaf core-prim . fxand) (dE4eae core-prim . fx>?) (dE4ead core-prim . fx>=?) (dE4eac core-prim . fx=?) (dE4eab core-prim . fx<?) (dE4eaa core-prim . fx<=?) (dE4ea9 core-prim . fx-/carry) (dE4ea8 core-prim . fx-) (dE4ea7 core-prim . fx+/carry) (dE4ea6 core-prim . fx+) (dE4ea5 core-prim . fx*/carry) (dE4ea4 core-prim . fx*) (dE4ea3 core-prim . greatest-fixnum) (dE4ea2 core-prim . least-fixnum) (dE4ea1 core-prim . fixnum-width) (dE4ea0 core-prim . fixnum?) (dE4e9f core-prim . bitwise-rotate-bit-field) (dE4e9e core-prim . bitwise-reverse-bit-field) (dE4e9d core-prim . bitwise-length) (dE4e9c core-prim . bitwise-if) (dE4e9b core-prim . bitwise-first-bit-set) (dE4e9a core-prim . bitwise-copy-bit-field) (dE4e99 core-prim . bitwise-copy-bit) (dE4e98 core-prim . bitwise-bit-set?) (dE4e97 core-prim . bitwise-bit-field) (dE4e96 core-prim . bitwise-bit-count) (dE4e95 core-prim . bitwise-xor) (dE4e94 core-prim . bitwise-ior) (dE4e93 core-prim . bitwise-and) (dE4e92 core-prim . bitwise-not) (dE4e91 core-prim . bitwise-arithmetic-shift-right) (dE4e90 core-prim . bitwise-arithmetic-shift-left) (dE4e8f core-prim . bitwise-arithmetic-shift) (dE4e8e core-prim . zero?) (dE4e8d core-prim . vector?) (dE4e8c core-prim . vector-set!) (dE4e8b core-prim . vector-ref) (dE4e8a core-prim . vector-map) (dE4e89 core-prim . vector-length) (dE4e88 core-prim . vector-for-each) (dE4e87 core-prim . vector-fill!) (dE4e86 core-prim . vector->list) (dE4e85 core-prim . vector) (dE4e84 core-prim . values) (dE4e83 core-prim . truncate) (dE4e82 core-prim . tan) (dE4e81 core-prim . symbol?) (dE4e80 core-prim . symbol=?) (dE4e7f core-prim . symbol->string) (dE4e7e core-prim . substring) (dE4e7d core-prim . string?) (dE4e7c core-prim . string>?) (dE4e7b core-prim . string>=?) (dE4e7a core-prim . string=?) (dE4e79 core-prim . string<?) (dE4e78 core-prim . string<=?) (dE4e77 core-prim . string-ref) (dE4e76 core-prim . string-length) (dE4e75 core-prim . string-for-each) (dE4e74 core-prim . string-copy) (dE4e73 core-prim . string-append) (dE4e72 core-prim . string->symbol) (dE4e71 core-prim . string->number) (dE4e70 core-prim . string->list) (dE4e6f core-prim . string) (dE4e6e core-prim . sqrt) (dE4e6d core-prim . sin) (dE4e6c core-prim . round) (dE4e6b core-prim . reverse) (dE4e6a core-prim . real?) (dE4e69 core-prim . real-valued?) (dE4e68 core-prim . real-part) (dE4e67 core-prim . rationalize) (dE4e66 core-prim . rational?) (dE4e65 core-prim . rational-valued?) (dE4e64 core-prim . procedure?) (dE4e63 core-prim . positive?) (dE4e62 core-prim . pair?) (dE4e61 core-prim . odd?) (dE4e60 core-prim . numerator) (dE4e5f core-prim . number?) (dE4e5e core-prim . number->string) (dE4e5d core-prim . null?) (dE4e5c core-prim . not) (dE4e5b core-prim . negative?) (dE4e5a core-prim . nan?) (dE4e59 core-prim . min) (dE4e58 core-prim . max) (dE4e57 core-prim . map) (dE4e56 core-prim . make-vector) (dE4e55 core-prim . make-string) (dE4e54 core-prim . make-rectangular) (dE4e53 core-prim . make-polar) (dE4e52 core-prim . magnitude) (dE4e51 core-prim . log) (dE4e50 core-prim . list?) (dE4e4f core-prim . list-tail) (dE4e4e core-prim . list-ref) (dE4e4d core-prim . list->vector) (dE4e4c core-prim . list->string) (dE4e4b core-prim . list) (dE4e4a core-prim . length) (dE4e49 core-prim . lcm) (dE4e48 core-prim . integer?) (dE4e47 core-prim . integer-valued?) (dE4e46 core-prim . integer->char) (dE4e45 core-prim . infinite?) (dE4e44 core-prim . inexact?) (dE4e43 core-prim . inexact) (dE4e42 core-prim . imag-part) (dE4e41 core-prim . gcd) (dE4e40 core-prim . for-each) (dE4e3f core-prim . floor) (dE4e3e core-prim . finite?) (dE4e3d core-prim . expt) (dE4e3c core-prim . exp) (dE4e3b core-prim . exact?) (dE4e3a core-prim . exact-integer-sqrt) (dE4e39 core-prim . exact) (dE4e38 core-prim . even?) (dE4e37 core-prim . error) (dE4e36 core-prim . eqv?) (dE4e35 core-prim . equal?) (dE4e34 core-prim . eq?) (dE4e33 core-prim . dynamic-wind) (dE4e32 core-prim . div0-and-mod0) (dE4e31 core-prim . mod0) (dE4e30 core-prim . div0) (dE4e2f core-prim . div-and-mod) (dE4e2e core-prim . mod) (dE4e2d core-prim . div) (dE4e2c core-prim . denominator) (dE4e2b core-prim . cos) (dE4e2a core-prim . cons) (dE4e29 core-prim . complex?) (dE4e28 core-prim . char?) (dE4e27 core-prim . char>?) (dE4e26 core-prim . char>=?) (dE4e25 core-prim . char=?) (dE4e24 core-prim . char<?) (dE4e23 core-prim . char<=?) (dE4e22 core-prim . char->integer) (dE4e21 core-prim . ceiling) (dE4e20 core-prim . call-with-values) (dE4e1f core-prim . call/cc) (dE4e1e core-prim . call-with-current-continuation) (dE4e1d core-prim . cddddr) (dE4e1c core-prim . cdddar) (dE4e1b core-prim . cddadr) (dE4e1a core-prim . cddaar) (dE4e19 core-prim . cdaddr) (dE4e18 core-prim . cdadar) (dE4e17 core-prim . cdaadr) (dE4e16 core-prim . cdaaar) (dE4e15 core-prim . cadddr) (dE4e14 core-prim . caddar) (dE4e13 core-prim . cadadr) (dE4e12 core-prim . cadaar) (dE4e11 core-prim . caaddr) (dE4e10 core-prim . caadar) (dE4e0f core-prim . caaadr) (dE4e0e core-prim . caaaar) (dE4e0d core-prim . cdddr) (dE4e0c core-prim . cddar) (dE4e0b core-prim . cdadr) (dE4e0a core-prim . cdaar) (dE4e09 core-prim . caddr) (dE4e08 core-prim . cadar) (dE4e07 core-prim . caadr) (dE4e06 core-prim . caaar) (dE4e05 core-prim . cddr) (dE4e04 core-prim . cdar) (dE4e03 core-prim . cadr) (dE4e02 core-prim . caar) (dE4e01 core-prim . cdr) (dE4e00 core-prim . car) (dE4dff core-prim . boolean?) (dE4dfe core-prim . boolean=?) (dE4dfd core-prim . atan) (dE4dfc core-prim . assertion-violation) (dE3195 core-prim . assertion-error) (dE4dfb core-prim . asin) (dE4dfa core-prim . apply) (dE4df9 core-prim . append) (dE4df8 core-prim . angle) (dE4df7 core-prim . acos) (dE4df6 core-prim . abs) (dE4df5 core-prim . /) (dE4df4 core-prim . *) (dE4df3 core-prim . -) (dE4df2 core-prim . +) (dE4df1 core-prim . >=) (dE4df0 core-prim . >) (dE4def core-prim . =) (dE4dee core-prim . <=) (dE4ded core-prim . <) (dE4dec core-prim . library) (dE4deb $core-rtd &no-nans-rtd &no-nans-rcd) (dE4dea $core-rtd &no-infinities-rtd &no-infinities-rcd) (dE4de9 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (dE4de8 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (dE4de7 $core-rtd &i/o-port-rtd &i/o-port-rcd) (dE4de6 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (dE4de5 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (dE4de4 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (dE4de3 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (dE4de2 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (dE4de1 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (dE4de0 $core-rtd &i/o-write-rtd &i/o-write-rcd) (dE4ddf $core-rtd &i/o-read-rtd &i/o-read-rcd) (dE4dde $core-rtd &i/o-rtd &i/o-rcd) (dE4ddd $core-rtd &undefined-rtd &undefined-rcd) (dE4ddc $core-rtd &syntax-rtd &syntax-rcd) (dE4ddb $core-rtd &lexical-rtd &lexical-rcd) (dE4dda $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (dE4dd9 $core-rtd &non-continuable-rtd &non-continuable-rcd) (dE4dd8 $core-rtd &who-rtd &who-rcd) (dE4dd7 $core-rtd &irritants-rtd &irritants-rcd) (dE4dd6 $core-rtd &assertion-rtd &assertion-rcd) (dE4dd5 $core-rtd &violation-rtd &violation-rcd) (dE4dd4 $core-rtd &error-rtd &error-rcd) (dE4dd3 $core-rtd &serious-rtd &serious-rcd) (dE4dd2 $core-rtd &warning-rtd &warning-rcd) (dE4dd1 $core-rtd &message-rtd &message-rcd) (dE4dd0 $core-rtd &condition-rtd &condition-rcd) (dE4dcf macro . define-condition-type) (dE4dce macro . define-enumeration) (dE4dcd macro . define-record-type) (dE4dcc macro . parent-rtd) (dE4dcb macro . nongenerative) (dE4dca macro . opaque) (dE4dc9 macro . sealed) (dE4dc8 macro . protocol) (dE4dc7 macro . parent) (dE4dc6 macro . immutable) (dE4dc5 macro . mutable) (dE4dc4 macro . fields) (dE4dc3 macro . error-handling-mode) (dE4dc2 macro . file-options) (dE4dc1 macro . buffer-mode) (dE4dc0 macro . eol-style) (dE4dbf macro . guard) (dE4dbe macro . trace-define) (dE4dbd macro . trace-lambda) (dE4dbc macro . unsyntax-splicing) (dE4dbb macro . unsyntax) (dE4dba macro . unquote-splicing) (dE4db9 macro . unquote) (dE4db8 macro . _) (dE4db7 macro . else) (dE4db6 macro . =>) (dE4db5 macro . ...) (dE4db4 macro . assert) (dE4db3 macro . endianness) (dE4db2 macro . delay) (dE4db1 macro . time) (dE4db0 macro . do) (dE4daf macro . cond) (dE4dae macro . let*) (dE4dad macro . let*-values) (dE4dac macro . let-values) (dE4dab macro . identifier-syntax) (dE4daa macro . with-syntax) (dE4da9 macro . quasisyntax) (dE4da8 macro . quasiquote) (dE4da7 macro . syntax-rules) (dE4da6 macro . include) (dE4da5 macro . define-struct) (dE4da4 core-macro . record-constructor-descriptor) (dE4da3 core-macro . record-type-descriptor) (dE4da2 macro . case) (dE4da1 macro . parameterize) (dE4da0 macro . unless) (dE4d9f macro . when) (dE4d9e core-macro . or) (dE4d9d core-macro . and) (dE4d9c core-macro . if) (dE4d9b core-macro . let) (dE4d9a core-macro . letrec*) (dE4d99 core-macro . letrec) (dE4d98 core-macro . type-descriptor) (dE4d97 core-macro . case-lambda) (dE4d96 core-macro . lambda) (dE4d95 core-macro . syntax) (dE4d94 core-macro . syntax-case) (dE4d93 core-macro . quote) (dE4d92 core-macro . foreign-call) (dE4d91 letrec-syntax) (dE4d90 let-syntax) (dE4d8f set!) (dE4d8e import) (dE4d8d begin) (dE4d8c module) (dE4d8b define-syntax) (dE4d8a define)) values values '#f '#f '#f '#f) (dE2ccf@dE2b1b@install-library 'dE514a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . dE50f1) (eval-core . dE50f0) (set-symbol-value! . dE50ef) (symbol-value . dE50ee) (gensym . dE50ed) (void . dE50ec)) '() values values '#f '#f '#f '#f) (dE2ccf@dE2b1b@install-library 'dE514b '(mosh) '() '() '() '() '((set-symbol-value! . dE50ef) (symbol-value . dE50ee) (regexp? . dE50ea) (read-line . dE50e9) (ungensym . dE50e7) (alist->eq-hash-table . dE50e6) (assoc-ref . dE50e5) (print . dE50e4) (format . dE50e3) (host-os . dE50e2) (library-path . dE2afa) (standard-library-path . dE50e1) (file-newer? . dE50e0) (stat-mtime . dE50df) (digit->integer . dE50db) (call-with-string-input-port . dE50da) (call-with-string-io . dE50d9) (string-split . dE50d8) (bytevector-for-each . dE50d7) (string->regexp . dE50d6) (rxmatch . dE50d5) (regexp-replace-all . dE50d4) (hashtable-for-each . dE50d3) (set-current-directory! . dE50ce) (expand-path . dE50cd) (current-directory . dE50cc) (p . dE508d) (get-timeofday . dE5074) (get-command-line . dE5073) (sys-display . dE5072) (whereis . dE5071) (register . dE5070) (vm-join! . dE506f) (vm-set-value! . dE506e) (vm? . dE506d) (main-vm? . dE506c) (vm-eval . dE506b) (vm-self . dE506a) (vm-start! . dE5069) (make-vm . dE5068) (mutex-try-lock! . dE5067) (mutex-unlock! . dE5066) (mutex-lock! . dE5065) (mutex? . dE5064) (make-mutex . dE5063) (condition-variable-notify-all! . dE5062) (condition-variable-notify! . dE5061) (condition-variable-wait! . dE5060) (make-condition-variable . dE505f) (write/ss . dE505e) (mosh-executable-path . dE505d) (make-file-options . dE505c) (source-info . dE505b) (make-compiler-instruction . dE505a) (make-instruction . dE5059) (set-source-info! . dE5058) (bignum? . dE5057) (fast-equal? . dE5056) (fasl-read . dE5055) (fasl-write . dE5054) (time-usage . dE5053) (os-constant . dE5052) (time . dE4db1) (include . dE4da6)) '() values values '#f '#f '#f '#f) (dE2ccf@dE2b1b@install-library 'dE514c '(system) '() '() '() '() '((gensym-prefix-set! . dE50e8) (write-to-file . dE50de) (file->list . dE50dd) (file->string . dE50dc) (mosh-cache-dir . dE28e4) (call-process . dE50d2) (local-tz-offset . dE50d1) (microseconds . dE50d0) (directory-list . dE50cf) (expand-path . dE50cd) (%spawn . dE50cb) (%waitpid . dE50ca) (simple-struct-name . dE50c9) (simple-struct-set! . dE50c8) (simple-struct-ref . dE50c7) (make-simple-struct . dE50c6) (simple-struct? . dE50c5) (pointer-ref-c-int64 . dE50c4) (pointer-ref-c-int32 . dE50c3) (pointer-ref-c-int16 . dE50c2) (pointer-ref-c-int8 . dE50c1) (pointer-ref-c-uint64 . dE50c0) (pointer-ref-c-uint32 . dE50bf) (pointer-ref-c-uint16 . dE50be) (pointer-ref-c-uint8 . dE50bd) (pointer-set-c-uint64! . dE50bc) (pointer-set-c-uint32! . dE50bb) (pointer-set-c-uint16! . dE50ba) (pointer-set-c-uint8! . dE50b9) (pointer-set-c-int64! . dE50b8) (pointer-set-c-int32! . dE50b7) (pointer-set-c-int16! . dE50b6) (pointer-set-c-int8! . dE50b5) (pointer-set-c-pointer! . dE50b4) (pointer-set-c-double! . dE50b3) (pointer-set-c-float! . dE50b2) (pointer-set-c-long-long! . dE50b1) (pointer-set-c-long! . dE50b0) (pointer-set-c-int! . dE50af) (pointer-set-c-short! . dE50ae) (pointer-set-c-char! . dE50ad) (pointer-ref-c-pointer . dE50ac) (pointer-ref-c-double . dE50ab) (pointer-ref-c-float . dE50aa) (pointer-ref-c-unsigned-long-long . dE50a9) (pointer-ref-c-signed-long-long . dE50a8) (pointer-ref-c-unsigned-long . dE50a7) (pointer-ref-c-signed-long . dE50a6) (pointer-ref-c-unsigned-int . dE50a5) (pointer-ref-c-signed-int . dE50a4) (pointer-ref-c-unsigned-short . dE50a3) (pointer-ref-c-signed-short . dE50a2) (pointer-ref-c-unsigned-char . dE50a1) (pointer-ref-c-signed-char . dE50a0) (pointer->integer . dE509f) (integer->pointer . dE509e) (pointer? . dE509d) (shared-errno . dE509c) (%ffi-free-c-callback-trampoline . dE509b) (%ffi-make-c-callback-trampoline . dE509a) (%ffi-free . dE5099) (%ffi-malloc . dE5098) (%ffi-supported? . dE5097) (%ffi-pointer->string . dE5096) (%ffi-call . dE5095) (%ffi-lookup . dE5094) (%ffi-open . dE5093) (null-terminated-utf8->string . dE5092) (null-terminated-bytevector->string . dE5091) (%exec . dE5090) (%fork . dE508f) (%pipe . dE508e) (open-output-string . dE508c) (get-output-string . dE508b) (file-stat-ctime . dE508a) (file-stat-atime . dE5089) (file-stat-mtime . dE5088) (file-size-in-bytes . dE5087) (file-writable? . dE5086) (file-executable? . dE5085) (file-readable? . dE5084) (file-regular? . dE5083) (file-symbolic-link? . dE5082) (file-directory? . dE5081) (create-symbolic-link . dE5080) (rename-file . dE507f) (delete-directory . dE507e) (create-directory . dE507d) (create-mosh-cache-dir . dE507c) (get-environment-variables . dE507b) (current-exception-handler . dE507a) (get-environment-variable . dE5079) (join-wraps . dE5078) (id->real-label . dE5077) (same-marks? . dE5076) (same-marks*? . dE5075) (disasm . dE5051) (make-parameter . dE28e2) (socket-port . dE5050) (socket-shutdown . dE504f) (socket-close . dE504e) (socket-send . dE504d) (socket-recv! . dE504c) (socket-recv . dE504b) (make-server-socket . dE504a) (make-client-socket . dE5049) (socket-accept . dE5048) (socket? . dE5047) (parameterize . dE4da1)) '() values values '#f '#f '#f '#f)))
(begin (set! dE4c09@ref (unspecified)) (set! dE4c0b@x* (unspecified)) (set! dE4c0d@add-library-path! (unspecified)) (set! dE4c0f@parse-and-add-library-path (unspecified)) (set! dE4c11@for-each-with-index (unspecified)) (set! dE4c13@rpad (unspecified)) (set! dE4c15@condition-printer (unspecified)) (set! dE4c17@record->field-alist (unspecified)) (set! dE4c19@map-with-index (unspecified)) (set! dE4c1b@repl (unspecified)) (set! dE4c1d@trace-printer (unspecified)) (set! dE4c1f@command-line (unspecified)) (set! dE4c21@local-library-path (unspecified)) (set! dE4c23@load/args (unspecified)) (set! dE4c25@load (unspecified)) (set! dE4c27@ironscheme-build (unspecified)) (set! dE4c29@eval-top-level (unspecified)) (set! dE4c2b@compile-system-libraries (unspecified)) (set! dE4c2d@compile (unspecified)) (set! dE4c2f@compile->closure (unspecified)) (set! dE4c31@pre-compile-r6rs-file (unspecified)) (set! dE4c33@load-r6rs-top-level (unspecified)) (set! dE4c35@load-r6rs-top-level-sexp (unspecified)) (set! dE4c37@prefix-inc (unspecified)) (set! dE4c39@prefix-inc! (unspecified)) (set! dE4c09@ref (lambda (dE4c74@rtd dE4c75@i dE4c76@x) (let ((dE4c7a@val ((record-accessor dE4c74@rtd dE4c75@i) dE4c76@x))) (if (symbol? dE4c7a@val) (ungensym dE4c7a@val) dE4c7a@val)))) (set! dE4d70@dE4c09@ref dE4c09@ref) (set! dE4c0b@x* '()) (set! dE4d71@dE4c0b@x* dE4c0b@x*) (set! dE4c0d@add-library-path! (lambda (dE4c7c@path) (dE2cbf@dE2afb@library-path (append (dE2cbf@dE2afb@library-path) (list dE4c7c@path))))) (set! dE4d72@dE4c0d@add-library-path! dE4c0d@add-library-path!) (set! dE4c0f@parse-and-add-library-path (lambda (dE4c7e@paths dE4c7f@message) (letrec* ((dE4c83@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((dE4c84@t dE4c7e@paths)) (if dE4c84@t ((lambda (dE4c86@paths) (for-each (lambda (dE4c88@path) (if (file-exists? dE4c88@path) (dE4c0d@add-library-path! (expand-path dE4c88@path)) (format (current-error-port) dE4c7f@message dE4c88@path))) (string-split dE4c86@paths dE4c83@separator))) dE4c84@t) (void)))))) (set! dE4d73@dE4c0f@parse-and-add-library-path dE4c0f@parse-and-add-library-path) (set! dE4c11@for-each-with-index (lambda (dE4c8a@proc dE4c8b@lst) (letrec ((dE4c8e@loop (lambda (dE4c90@i dE4c91@lst) (if (null? dE4c91@lst) (if '#f '#f (void)) (begin (dE4c8a@proc dE4c90@i (car dE4c91@lst)) (dE4c8e@loop (+ dE4c90@i '1) (cdr dE4c91@lst))))))) (dE4c8e@loop '1 dE4c8b@lst)))) (set! dE4d74@dE4c11@for-each-with-index dE4c11@for-each-with-index) (set! dE4c13@rpad (lambda (dE4c94@str dE4c95@pad dE4c96@n) (let ((dE4c9a@rest (- dE4c96@n (string-length (format '"~a" dE4c94@str))))) (let dE4ca0@loop ((dE4c9c@rest dE4c9a@rest) (dE4c9d@ret (format '"~a" dE4c94@str))) (if (<= dE4c9c@rest '0) dE4c9d@ret (dE4ca0@loop (- dE4c9c@rest '1) (string-append dE4c9d@ret dE4c95@pad))))))) (set! dE4d75@dE4c13@rpad dE4c13@rpad) (set! dE4c15@condition-printer (lambda (dE4ca2@e dE4ca3@port) (letrec* ((dE4ca7@max-condition-len (apply max (map (lambda (dE4cb8@c) (string-length (symbol->string (record-type-name (record-rtd dE4cb8@c))))) (simple-conditions dE4ca2@e))))) (begin (display '" Condition components:\n" dE4ca3@port) (dE4c11@for-each-with-index (lambda (dE4ca8@i dE4ca9@x) (let ((dE4cac@rtd (record-rtd dE4ca9@x)) (dE4cad@fields-alist (dE4c17@record->field-alist dE4ca9@x))) (begin (format dE4ca3@port '" ~d. ~a" dE4ca8@i (dE4c13@rpad (symbol->string (record-type-name dE4cac@rtd)) '" " dE4ca7@max-condition-len)) (if (null? dE4cad@fields-alist) (newline dE4ca3@port) (void)) (let dE4cb4@loop ((dE4cb0@first '#t) (dE4cb1@fields-alist dE4cad@fields-alist)) (if (null? dE4cb1@fields-alist) '() (let ((dE4cb6@field (car dE4cb1@fields-alist))) (begin (if (not dE4cb0@first) (display (dE4c13@rpad '"" '" " (+ '4 dE4ca7@max-condition-len)) dE4ca3@port) (void)) (display '"       " dE4ca3@port) (display (car dE4cb6@field) dE4ca3@port) (display '": " dE4ca3@port) (write (cdr dE4cb6@field) dE4ca3@port) (newline dE4ca3@port) (dE4cb4@loop '#f (cdr dE4cb1@fields-alist))))))))) (simple-conditions dE4ca2@e)))))) (set! dE4d76@dE4c15@condition-printer dE4c15@condition-printer) (set! dE4c17@record->field-alist (lambda (dE4cba@r) (letrec* ((dE4cbd@ref (lambda (dE4cc8@rtd dE4cc9@i dE4cca@x) (let ((dE4cce@val ((record-accessor dE4cc8@rtd dE4cc9@i) dE4cca@x))) (if (symbol? dE4cce@val) (ungensym dE4cce@val) dE4cce@val))))) (let dE4cc2@loop ((dE4cbe@ret '()) (dE4cbf@rtd (record-rtd dE4cba@r))) (if dE4cbf@rtd (dE4cc2@loop (append dE4cbe@ret (dE4c19@map-with-index (lambda (dE4cc4@i dE4cc5@field) (cons dE4cc5@field (dE4cbd@ref dE4cbf@rtd dE4cc4@i dE4cba@r))) (vector->list (record-type-field-names dE4cbf@rtd)))) (record-type-parent dE4cbf@rtd)) dE4cbe@ret))))) (set! dE4d77@dE4c17@record->field-alist dE4c17@record->field-alist) (set! dE4c19@map-with-index (lambda (dE4cd0@proc dE4cd1@lst) (let dE4cda@loop ((dE4cd4@i '0) (dE4cd5@lst dE4cd1@lst) (dE4cd6@ret '())) (if (null? dE4cd5@lst) (reverse dE4cd6@ret) (dE4cda@loop (+ dE4cd4@i '1) (cdr dE4cd5@lst) (cons (dE4cd0@proc dE4cd4@i (car dE4cd5@lst)) dE4cd6@ret)))))) (set! dE4d78@dE4c19@map-with-index dE4c19@map-with-index) (set! dE4c1b@repl (lambda dE4cdc@x (letrec* ((dE4cdf@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (dE4ce2@dE4ce0) (lambda () (with-exception-handler (lambda (dE4ce4@e) ((call/cc (lambda (dE4ce6@dE4ce1) (dE4ce2@dE4ce0 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? dE4ce4@e) (dE4c15@condition-printer dE4ce4@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" dE4ce4@e))) (dE4ce6@dE4ce1 (lambda () (raise-continuable dE4ce4@e)))))))))) (lambda () (let dE4cec@loop ((dE4ce8@line (get-line (current-input-port))) (dE4ce9@accum '"")) (letrec* ((dE4cef@parentheses-ok? (lambda (dE4cfa@text) (let dE4d02@loop ((dE4cfc@chars (string->list dE4cfa@text)) (dE4cfd@p0 '0) (dE4cfe@p1 '0)) (if (null? dE4cfc@chars) (= '0 dE4cfd@p0 dE4cfe@p1) (let ((dE4d04@t (car dE4cfc@chars))) (if (memv dE4d04@t '(#\()) (dE4d02@loop (cdr dE4cfc@chars) (+ dE4cfd@p0 '1) dE4cfe@p1) (if (memv dE4d04@t '(#\))) (dE4d02@loop (cdr dE4cfc@chars) (- dE4cfd@p0 '1) dE4cfe@p1) (if (memv dE4d04@t '(#\[)) (dE4d02@loop (cdr dE4cfc@chars) dE4cfd@p0 (+ dE4cfe@p1 '1)) (if (memv dE4d04@t '(#\])) (dE4d02@loop (cdr dE4cfc@chars) dE4cfd@p0 (- dE4cfe@p1 '1)) (dE4d02@loop (cdr dE4cfc@chars) dE4cfd@p0 dE4cfe@p1)))))))))) (dE4cf1@eval-string-print (lambda (dE4cf4@text) (if (not (or (string=? '"\n" dE4cf4@text) (= '0 (string-length dE4cf4@text)))) (call-with-values (lambda () (dE4c29@eval-top-level (call-with-port (open-string-input-port dE4cf4@text) read))) (lambda dE4cf6@out* (for-each (lambda (dE4cf8@out) (begin (write dE4cf8@out) (newline))) dE4cf6@out*))) (void))))) (if (eof-object? dE4ce8@line) (begin (dE4cf1@eval-string-print dE4ce9@accum) (exit)) (let ((dE4cf2@current (string-append dE4ce9@accum dE4ce8@line))) (if (dE4cef@parentheses-ok? dE4cf2@current) (dE4cf1@eval-string-print dE4cf2@current) (dE4cec@loop (get-line (current-input-port)) dE4cf2@current)))))))))))) (newline) (dE4cdf@rec))))) (dE4cdf@rec)))) (set! dE4d79@dE4c1b@repl dE4c1b@repl) (set! dE4c1d@trace-printer (dE2a05@dE28e3@make-parameter write)) (set! dE4d7a@dE4c1d@trace-printer dE4c1d@trace-printer) (set! dE4c1f@command-line (dE2a05@dE28e3@make-parameter (get-command-line))) (set! dE4d7b@dE4c1f@command-line dE4c1f@command-line) (set! dE4c21@local-library-path (lambda (dE4d06@filename) (dE2cbf@dE2afb@library-path))) (set! dE4d7c@dE4c21@local-library-path dE4c21@local-library-path) (set! dE4c23@load/args (lambda (dE4d08@filename . dE4d0a@args) (begin (apply dE4c33@load-r6rs-top-level dE4d08@filename 'load dE4d0a@args) (void)))) (set! dE4d7d@dE4c23@load/args dE4c23@load/args) (set! dE4c25@load (lambda (dE4d0c@filename) (begin (apply dE4c33@load-r6rs-top-level dE4d0c@filename 'load (dE4c1f@command-line)) (void)))) (set! dE4d7e@dE4c25@load dE4c25@load) (set! dE4c27@ironscheme-build (lambda () (dE4c25@load '"ironscheme-buildscript.ss"))) (set! dE4d7f@dE4c27@ironscheme-build dE4c27@ironscheme-build) (set! dE4c29@eval-top-level (lambda (dE4d0e@x) (dE4be6@dE317c@eval dE4d0e@x (dE4bfd@dE31aa@interaction-environment)))) (set! dE4d80@dE4c29@eval-top-level dE4c29@eval-top-level) (set! dE4c2b@compile-system-libraries (lambda () (dE4c29@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! dE4d81@dE4c2b@compile-system-libraries dE4c2b@compile-system-libraries) (set! dE4c2d@compile (lambda (dE4d10@filename) (dE4c33@load-r6rs-top-level dE4d10@filename 'compile))) (set! dE4d82@dE4c2d@compile dE4c2d@compile) (set! dE4c2f@compile->closure (lambda (dE4d12@filename) (dE4c33@load-r6rs-top-level dE4d12@filename 'closure))) (set! dE4d83@dE4c2f@compile->closure dE4c2f@compile->closure) (set! dE4c31@pre-compile-r6rs-file (lambda (dE4d14@filename) (dE4c33@load-r6rs-top-level dE4d14@filename 'compile))) (set! dE4d84@dE4c31@pre-compile-r6rs-file dE4c31@pre-compile-r6rs-file) (set! dE4c33@load-r6rs-top-level (lambda (dE4d16@filename dE4d17@how . dE4d1a@args) (begin (dE2cbf@dE2afb@library-path (dE4c21@local-library-path dE4d16@filename)) (let ((dE4d1c@x* (with-input-from-file dE4d16@filename (lambda () (let dE4d1e@f () (let ((dE4d20@x (dE29f7@dE28c7@read-annotated))) (if (eof-object? dE4d20@x) '() (cons dE4d20@x (dE4d1e@f))))))))) (let ((dE4d22@t dE4d17@how)) (if (memv dE4d22@t '(closure)) (dE4bfc@dE31a8@pre-compile-r6rs-top-level dE4d1c@x*) (if (memv dE4d22@t '(load)) (begin (dE4c1f@command-line (cons dE4d16@filename (car dE4d1a@args))) (dE2a06@dE28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (dE2a06@dE28e5@mosh-cache-dir) (gensym-prefix-set! (dE4c39@prefix-inc! (string-append (dE2a06@dE28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (dE4d24@file) ((call/cc (lambda (dE4d28@dE4d26) (lambda () (with-exception-handler (lambda (dE4d2a@c) ((call/cc (lambda (dE4d2c@dE4d27) (dE4d28@dE4d26 (lambda () (if '#t '#t (dE4d2c@dE4d27 (lambda () (raise-continuable dE4d2a@c)))))))))) (lambda () (delete-file (string-append (dE2a06@dE28e5@mosh-cache-dir) '"/" dE4d24@file))))))))) (directory-list (dE2a06@dE28e5@mosh-cache-dir))) (void)) (let ((dE4d2e@compiled (dE4bfb@dE31a6@compile-r6rs-top-level dE4d1c@x*))) (begin (if (and (dE2a06@dE28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (dE2cc3@dE2b03@serialize-all dE2a00@dE28d9@serialize-library dE2a5c@dE2a15@compile-core-expr) (void)) (dE4d2e@compiled)))) (if (memv dE4d22@t '(compile)) (begin (dE4bfb@dE31a6@compile-r6rs-top-level dE4d1c@x*) (dE2cc3@dE2b03@serialize-all dE2a00@dE28d9@serialize-library dE2a5c@dE2a15@compile-core-expr)) (if '#f '#f (void)))))))))) (set! dE4d85@dE4c33@load-r6rs-top-level dE4c33@load-r6rs-top-level) (set! dE4c35@load-r6rs-top-level-sexp (lambda (dE4d30@import-spec dE4d31@thunk) (let ((dE4d3c@dE4d35 dE2cbf@dE2afb@library-path) (dE4d3d@dE4d37 dE2a06@dE28e5@mosh-cache-dir) (dE4d3e@dE4d39 (dE4c21@local-library-path '"")) (dE4d3f@dE4d3b (create-mosh-cache-dir))) (let ((dE4d44@swap (lambda () (begin (let ((dE4d46@t (dE4d3c@dE4d35))) (begin (dE4d3c@dE4d35 dE4d3e@dE4d39) (set! dE4d3e@dE4d39 dE4d46@t))) (let ((dE4d48@t (dE4d3d@dE4d37))) (begin (dE4d3d@dE4d37 dE4d3f@dE4d3b) (set! dE4d3f@dE4d3b dE4d48@t))))))) (dynamic-wind dE4d44@swap (lambda () (begin (if (dE2a06@dE28e5@mosh-cache-dir) (gensym-prefix-set! (dE4c39@prefix-inc! (string-append (dE2a06@dE28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((dE4d4e@dE4d4b dE4c1f@command-line) (dE4d4f@dE4d4d '())) (let ((dE4d52@swap (lambda () (let ((dE4d54@t (dE4d4e@dE4d4b))) (begin (dE4d4e@dE4d4b dE4d4f@dE4d4d) (set! dE4d4f@dE4d4d dE4d54@t)))))) (dynamic-wind dE4d52@swap (lambda () ((dE4bfb@dE31a6@compile-r6rs-top-level (list (cons 'import dE4d30@import-spec) (list dE4d31@thunk))))) dE4d52@swap))))) dE4d44@swap))))) (set! dE4d86@dE4c35@load-r6rs-top-level-sexp dE4c35@load-r6rs-top-level-sexp) (set! dE4c37@prefix-inc (lambda (dE4d56@prefix-string) (let ((dE4d58@prefix (symbol->string dE4d56@prefix-string))) (let ((dE4d5a@len (string-length dE4d58@prefix))) (let dE4d62@loop ((dE4d5c@i (- dE4d5a@len '1)) (dE4d5d@carry? '#t) (dE4d5e@accum '())) (if (< dE4d5c@i '0) (string->symbol (list->string (if dE4d5d@carry? (cons '#\a dE4d5e@accum) dE4d5e@accum))) (if dE4d5d@carry? (let ((dE4d64@next-integer (+ '1 (char->integer (string-ref dE4d58@prefix dE4d5c@i))))) (if (= dE4d64@next-integer '123) (dE4d62@loop (- dE4d5c@i '1) '#f (cons '#\A dE4d5e@accum)) (if (= dE4d64@next-integer '91) (dE4d62@loop (- dE4d5c@i '1) '#t (cons '#\a dE4d5e@accum)) (dE4d62@loop (- dE4d5c@i '1) '#f (cons (integer->char dE4d64@next-integer) dE4d5e@accum))))) (dE4d62@loop (- dE4d5c@i '1) '#f (cons (string-ref dE4d58@prefix dE4d5c@i) dE4d5e@accum))))))))) (set! dE4d87@dE4c37@prefix-inc dE4c37@prefix-inc) (set! dE4c39@prefix-inc! (lambda (dE4d66@file) (begin (if (not (file-exists? dE4d66@file)) (call-with-output-file dE4d66@file (lambda (dE4d68@port) (write 'd dE4d68@port))) (void)) (let ((dE4d6a@prefix (call-with-input-file dE4d66@file read))) (if (main-vm?) (let ((dE4d6c@next-prefix (dE4c37@prefix-inc dE4d6a@prefix))) (begin (call-with-port (open-file-output-port dE4d66@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (dE4d6e@port) (write dE4d6c@next-prefix dE4d6e@port))) dE4d6a@prefix)) dE4d6a@prefix))))) (set! dE4d88@dE4c39@prefix-inc! dE4c39@prefix-inc!) (begin (dE2cc4@dE2b05@current-precompiled-library-loader dE2a01@dE28db@load-serialized-library) (set-symbol-value! 'load dE4c25@load) (set-symbol-value! 'pre-compile-r6rs-file dE4c31@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs dE4c29@eval-top-level) (set-symbol-value! 'int-env-syms dE4bdd@dE316a@interaction-environment-symbols) (set-symbol-value! 'expanded2core dE2a5b@dE2a13@expanded->core) (set-symbol-value! 'trace-printer dE4c1d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (dE4c3a@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list dE4c3a@c))))) (dE4c0f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (dE4c0f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (dE4c0d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (dE4c0d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (dE4c0d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((dE4c3c@prefix (lambda (dE4c3e@ext dE4c3f@ls) (append (map (lambda (dE4c42@x) (string-append dE4c3e@ext dE4c42@x)) dE4c3f@ls) dE4c3f@ls)))) (dE2cc0@dE2afd@library-extensions (dE4c3c@prefix '".mosh" (dE2cc0@dE2afd@library-extensions)))) (current-exception-handler (lambda (dE4c44@c) (begin (if (condition? dE4c44@c) (dE4c15@condition-printer dE4c44@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" dE4c44@c)) dE4c44@c))) (if ((call/cc (lambda (dE4c48@dE4c46) (lambda () (with-exception-handler (lambda (dE4c4a@c) ((call/cc (lambda (dE4c4c@dE4c47) (dE4c48@dE4c46 (lambda () (if '#t '#f (dE4c4c@dE4c47 (lambda () (raise-continuable dE4c4a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (dE4c35@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (dE4c1f@command-line)) (let ((dE4c56@dE4c4f dE4c1f@command-line) (dE4c57@dE4c51 dE2a06@dE28e5@mosh-cache-dir) (dE4c58@dE4c53 '()) (dE4c59@dE4c55 (create-mosh-cache-dir))) (let ((dE4c5e@swap (lambda () (begin (let ((dE4c60@t (dE4c56@dE4c4f))) (begin (dE4c56@dE4c4f dE4c58@dE4c53) (set! dE4c58@dE4c53 dE4c60@t))) (let ((dE4c62@t (dE4c57@dE4c51))) (begin (dE4c57@dE4c51 dE4c59@dE4c55) (set! dE4c59@dE4c55 dE4c62@t))))))) (dynamic-wind dE4c5e@swap (lambda () (begin (if (dE2a06@dE28e5@mosh-cache-dir) (gensym-prefix-set! (dE4c39@prefix-inc! (string-append (dE2a06@dE28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (dE4c1b@repl))) dE4c5e@swap))) (begin (dE2cbf@dE2afb@library-path (dE4c21@local-library-path (car (dE4c1f@command-line)))) (set! dE4c0b@x* (with-input-from-file (car (dE4c1f@command-line)) (lambda () (let dE4c64@f () (let ((dE4c66@x (dE29f7@dE28c7@read-annotated))) (if (eof-object? dE4c66@x) '() (cons dE4c66@x (dE4c64@f)))))))) (dE4c1f@command-line (cons (car (dE4c1f@command-line)) (cdr (dE4c1f@command-line)))) (dE2a06@dE28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (dE2a06@dE28e5@mosh-cache-dir) (gensym-prefix-set! (dE4c39@prefix-inc! (string-append (dE2a06@dE28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (dE4c68@file) ((call/cc (lambda (dE4c6c@dE4c6a) (lambda () (with-exception-handler (lambda (dE4c6e@c) ((call/cc (lambda (dE4c70@dE4c6b) (dE4c6c@dE4c6a (lambda () (if '#t '#t (dE4c70@dE4c6b (lambda () (raise-continuable dE4c6e@c)))))))))) (lambda () (delete-file (string-append (dE2a06@dE28e5@mosh-cache-dir) '"/" dE4c68@file))))))))) (directory-list (dE2a06@dE28e5@mosh-cache-dir))) (void)) (let ((dE4c72@compiled (dE4bfb@dE31a6@compile-r6rs-top-level dE4c0b@x*))) (begin (if (and (dE2a06@dE28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (dE2cc3@dE2b03@serialize-all dE2a00@dE28d9@serialize-library dE2a5c@dE2a15@compile-core-expr) (void)) (dE4c72@compiled))))))))
