;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! cQ2894@library-file-path->cache-path (unspecified)) (set! cQ2896@read-annotated (unspecified)) (set! cQ2898@annotation-stripped (unspecified)) (set! cQ289a@annotation? (unspecified)) (set! cQ289c@annotation-source (unspecified)) (set! cQ289e@annotation-expression (unspecified)) (set! cQ28a0@scm->fasl (unspecified)) (set! cQ28a2@fasl-save (unspecified)) (set! cQ28a4@fasl-load (unspecified)) (set! cQ28a6@verbose? (unspecified)) (set! cQ28a8@serialize-library (unspecified)) (set! cQ28aa@load-serialized-library (unspecified)) (set! cQ28ac@make-record-printer (unspecified)) (set! cQ28ae@compile-core (unspecified)) (set! cQ28b0@read-library-source-file (unspecified)) (set! cQ28b2@make-parameter (unspecified)) (set! cQ28b4@mosh-cache-dir (unspecified)) (set! cQ294a@file-options-spec (unspecified)) (set! cQ2894@library-file-path->cache-path (lambda (cQ294b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (cQ2951@cQ294e cQ2952@cQ2950) (let ((cQ2955@extract cQ2952@cQ2950) (cQ2956@p cQ2951@cQ294e)) (letrec* ((cQ295a@display-hex (lambda (cQ2963@n) (if (<= '0 cQ2963@n '9) (display cQ2963@n cQ2956@p) (display (integer->char (+ (char->integer '#\a) (- cQ2963@n '10))) cQ2956@p))))) (begin (let cQ295d@f ((cQ295b@ls (string-split cQ294b@x '#\/))) (if (not (null? cQ295b@ls)) (begin (display '"_" cQ2956@p) (for-each (lambda (cQ295f@c) (if (or (char<=? '#\a cQ295f@c '#\z) (char<=? '#\A cQ295f@c '#\Z) (char<=? '#\0 cQ295f@c '#\9) (memv cQ295f@c '(#\- #\. #\_ #\~))) (display cQ295f@c cQ2956@p) (begin (display '"%" cQ2956@p) (let ((cQ2961@n (char->integer cQ295f@c))) (begin (cQ295a@display-hex (quotient cQ2961@n '16)) (cQ295a@display-hex (remainder cQ2961@n '16))))))) (string->list (car cQ295b@ls))) (cQ295d@f (cdr cQ295b@ls))) (void))) (cQ2955@extract)))))))) (set! cQ29c5@cQ2894@library-file-path->cache-path cQ2894@library-file-path->cache-path) (set! cQ2896@read-annotated read) (set! cQ29c6@cQ2896@read-annotated cQ2896@read-annotated) (set! cQ2898@annotation-stripped (lambda (cQ2965@x) (cQ289e@annotation-expression cQ2965@x))) (set! cQ29c7@cQ2898@annotation-stripped cQ2898@annotation-stripped) (set! cQ289a@annotation? (lambda (cQ2967@x) (source-info cQ2967@x))) (set! cQ29c8@cQ289a@annotation? cQ289a@annotation?) (set! cQ289c@annotation-source (lambda (cQ2969@x) (source-info cQ2969@x))) (set! cQ29c9@cQ289c@annotation-source cQ289c@annotation-source) (set! cQ289e@annotation-expression (lambda (cQ296b@x) (if (pair? cQ296b@x) (cons (car cQ296b@x) (cdr cQ296b@x)) (if (procedure? cQ296b@x) (set-source-info! cQ296b@x '#f) cQ296b@x)))) (set! cQ29ca@cQ289e@annotation-expression cQ289e@annotation-expression) (set! cQ28a0@scm->fasl (lambda (cQ296d@filename) (string-append (cQ28b4@mosh-cache-dir) '"/" (cQ2894@library-file-path->cache-path cQ296d@filename) '".mosh-fasl"))) (set! cQ29cb@cQ28a0@scm->fasl cQ28a0@scm->fasl) (set! cQ28a2@fasl-save (lambda (cQ296f@filename cQ2970@obj) (call-with-port (open-file-output-port cQ296f@filename) (lambda (cQ2973@port) ((symbol-value 'fasl-write!) cQ2970@obj cQ2973@port))))) (set! cQ29cc@cQ28a2@fasl-save cQ28a2@fasl-save) (set! cQ28a4@fasl-load (lambda (cQ2975@filename) (call-with-port (open-file-input-port cQ2975@filename) (symbol-value 'fasl-read!)))) (set! cQ29cd@cQ28a4@fasl-load cQ28a4@fasl-load) (set! cQ28a6@verbose? (symbol-value '%verbose)) (set! cQ29ce@cQ28a6@verbose? cQ28a6@verbose?) (set! cQ28a8@serialize-library (lambda (cQ2977@filename cQ2978@obj) (begin (if cQ28a6@verbose? (format (current-error-port) '"serialize-library ~a\n..." cQ2977@filename) (void)) (let ((cQ297b@expanded2core (symbol-value 'expanded2core))) (let ((cQ297d@compile (symbol-value 'compile-w/o-halt))) (let ((cQ297f@code cQ2978@obj)) (let ((cQ2981@pivot (cddddr (cddddr cQ297f@code)))) (let ((cQ2983@visit (cQ297d@compile (cQ297b@expanded2core (car cQ2981@pivot))))) (begin (set-car! cQ2981@pivot cQ2983@visit) (let ((cQ2985@pivot (cdr cQ2981@pivot))) (let ((cQ2987@invoke (cQ297d@compile (cQ297b@expanded2core (car cQ2985@pivot))))) (set-car! cQ2985@pivot cQ2987@invoke))))))))) (let ((cQ2989@fasl-file (cQ28a0@scm->fasl cQ2977@filename))) (begin (if (file-exists? cQ2989@fasl-file) (delete-file cQ2989@fasl-file) (void)) ((call/cc (lambda (cQ298d@cQ298b) (lambda () (with-exception-handler (lambda (cQ298f@c1) ((call/cc (lambda (cQ2991@cQ298c) (cQ298d@cQ298b (lambda () (if '#t (begin (if cQ28a6@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" cQ2977@filename) (void)) (if (file-exists? cQ2989@fasl-file) (delete-file cQ2989@fasl-file) (void)) '#f) (cQ2991@cQ298c (lambda () (raise-continuable cQ298f@c1)))))))))) (lambda () (cQ28a2@fasl-save cQ2989@fasl-file cQ2978@obj)))))))))))) (set! cQ29cf@cQ28a8@serialize-library cQ28a8@serialize-library) (set! cQ28aa@load-serialized-library (lambda (cQ2993@filename cQ2994@obj) (and (cQ28b4@mosh-cache-dir) (let ((cQ2997@fasl-file (cQ28a0@scm->fasl cQ2993@filename))) (if (and (file-exists? cQ2997@fasl-file) ((symbol-value 'file-newer?) cQ2997@fasl-file cQ2993@filename)) (let ((cQ2999@expanded2core (symbol-value 'expanded2core))) (let ((cQ299b@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((cQ299d@code (cQ28a4@fasl-load cQ2997@fasl-file))) (let ((cQ299f@pivot (cddddr (cddddr cQ299d@code)))) (let ((cQ29a1@visit (car cQ299f@pivot))) (let ((cQ29a3@visit-proc (lambda () (cQ299b@eval-compiled-core cQ29a1@visit)))) (begin (set-car! cQ299f@pivot cQ29a3@visit-proc) (let ((cQ29a5@pivot (cdr cQ299f@pivot))) (let ((cQ29a7@invoke (car cQ29a5@pivot))) (begin (set-car! cQ29a5@pivot (lambda () (cQ299b@eval-compiled-core cQ29a7@invoke))) (apply cQ2994@obj cQ299d@code))))))))))) '#f))))) (set! cQ29d0@cQ28aa@load-serialized-library cQ28aa@load-serialized-library) (set! cQ28ac@make-record-printer (lambda (cQ29a9@name cQ29aa@printer) (lambda cQ29ad@x (begin (display '"record printer") (for-each display cQ29ad@x))))) (set! cQ29d1@cQ28ac@make-record-printer cQ28ac@make-record-printer) (set! cQ28ae@compile-core (lambda cQ29af@x (apply error 'comile-core '"not implementated" cQ29af@x))) (set! cQ29d2@cQ28ae@compile-core cQ28ae@compile-core) (set! cQ28b0@read-library-source-file (lambda (cQ29b1@file-name) (with-input-from-file cQ29b1@file-name cQ2896@read-annotated))) (set! cQ29d3@cQ28b0@read-library-source-file cQ28b0@read-library-source-file) (set! cQ28b2@make-parameter (lambda cQ29c1 (let ((cQ29c2 (length cQ29c1))) (if (= cQ29c2 '1) (apply (lambda (cQ29b3@x) (cQ28b2@make-parameter cQ29b3@x (lambda (cQ29b5@x) cQ29b5@x))) cQ29c1) (if (= cQ29c2 '2) (apply (lambda (cQ29b7@x cQ29b8@fender) (let ((cQ29bb@x (cQ29b8@fender cQ29b7@x))) (lambda cQ29bf (let ((cQ29c0 (length cQ29bf))) (if (= cQ29c0 '0) (apply (lambda () cQ29bb@x) cQ29bf) (if (= cQ29c0 '1) (apply (lambda (cQ29bd@v) (set! cQ29bb@x (cQ29b8@fender cQ29bd@v))) cQ29bf) (error #1='apply '"invalid arg count"))))))) cQ29c1) (error #1# '"invalid arg count")))))) (set! cQ29d4@cQ28b2@make-parameter cQ28b2@make-parameter) (set! cQ28b4@mosh-cache-dir (cQ28b2@make-parameter '#f)) (set! cQ29d5@cQ28b4@mosh-cache-dir cQ28b4@mosh-cache-dir) (set! cQ294a@file-options-spec (lambda (cQ29c3@x) cQ29c3@x)) (set! cQ29d6@cQ294a@file-options-spec cQ294a@file-options-spec) (void))
(begin (set! cQ29dc@current-primitive-locations (unspecified)) (set! cQ29de@mutable? (unspecified)) (set! cQ29e0@rewriter (unspecified)) (set! cQ29e2@expanded->core (unspecified)) (set! cQ29e4@compile-core-expr (unspecified)) (set! cQ29e6@pretty-print (unspecified)) (set! cQ29e8@compile-core-expr-to-port (unspecified)) (set! cQ29dc@current-primitive-locations (cQ29d4@cQ28b2@make-parameter (lambda (cQ29e9@x) '#f) (lambda (cQ29eb@p) cQ29eb@p))) (set! cQ2a27@cQ29dc@current-primitive-locations cQ29dc@current-primitive-locations) (set! cQ29de@mutable? (lambda (cQ29ed@x) (or (pair? cQ29ed@x) (vector? cQ29ed@x) (hashtable? cQ29ed@x)))) (set! cQ2a28@cQ29de@mutable? cQ29de@mutable?) (set! cQ29e0@rewriter (lambda (cQ29ef@quote-hack?) (letrec* ((cQ29f2@f (lambda (cQ29f3@x) (if (pair? cQ29f3@x) (let ((cQ29f5@t (car cQ29f3@x))) (if (memv cQ29f5@t '(quote)) (if (and cQ29ef@quote-hack? (cQ29de@mutable? (cadr cQ29f3@x))) (let ((cQ29f7@g (gensym))) (begin (set-symbol-value! cQ29f7@g (cadr cQ29f3@x)) cQ29f7@g)) cQ29f3@x) (if (memv cQ29f5@t '(case-lambda)) (cons 'case-lambda (map (lambda (cQ29f9@x) (cons (car cQ29f9@x) (map cQ29f2@f (cdr cQ29f9@x)))) (cdr cQ29f3@x))) (if (memv cQ29f5@t '(lambda)) (cons* 'lambda (cadr cQ29f3@x) (map cQ29f2@f (cddr cQ29f3@x))) (if (memv cQ29f5@t '(letrec)) (let ((cQ29fb@bindings (cadr cQ29f3@x)) (cQ29fc@body* (cddr cQ29f3@x))) (let ((cQ29ff@lhs* (map car cQ29fb@bindings)) (cQ2a00@rhs* (map cadr cQ29fb@bindings))) (cons* 'letrec (map list cQ29ff@lhs* (map cQ29f2@f cQ2a00@rhs*)) (map cQ29f2@f cQ29fc@body*)))) (if (memv cQ29f5@t '(letrec*)) (let ((cQ2a03@bindings (cadr cQ29f3@x)) (cQ2a04@body* (cddr cQ29f3@x))) (let ((cQ2a07@lhs* (map car cQ2a03@bindings)) (cQ2a08@rhs* (map cadr cQ2a03@bindings))) (cons* 'letrec* (map list cQ2a07@lhs* (map cQ29f2@f cQ2a08@rhs*)) (map cQ29f2@f cQ2a04@body*)))) (if (memv cQ29f5@t '(library-letrec*)) (let ((cQ2a0b@name (cadr cQ29f3@x)) (cQ2a0c@x (cdr cQ29f3@x))) (let ((cQ2a0f@bindings (cadr cQ2a0c@x)) (cQ2a10@body* (cddr cQ2a0c@x))) (let ((cQ2a13@lhs* (map car cQ2a0f@bindings)) (cQ2a14@lhs** (map cadr cQ2a0f@bindings)) (cQ2a15@rhs* (map caddr cQ2a0f@bindings))) (cons* 'library-letrec* cQ2a0b@name (map list cQ2a13@lhs* cQ2a14@lhs** (map cQ29f2@f cQ2a15@rhs*)) (map cQ29f2@f cQ2a10@body*))))) (if (memv cQ29f5@t '(begin)) (cons 'begin (map cQ29f2@f (cdr cQ29f3@x))) (if (memv cQ29f5@t '(set!)) (list 'set! (cadr cQ29f3@x) (cQ29f2@f (caddr cQ29f3@x))) (if (memv cQ29f5@t '(primitive)) (let ((cQ2a19@op (cadr cQ29f3@x))) (let ((cQ2a1b@t ((cQ29dc@current-primitive-locations) cQ2a19@op))) (if cQ2a1b@t ((lambda (cQ2a1d@loc) cQ2a1d@loc) cQ2a1b@t) cQ2a19@op))) (if (memv cQ29f5@t '(define)) cQ29f3@x (if (list? cQ29f3@x) (map cQ29f2@f cQ29f3@x) (error 'rewrite '"invalid form ~s ~s" cQ29f3@x (list? cQ29f3@x)))))))))))))) cQ29f3@x)))) cQ29f2@f))) (set! cQ2a29@cQ29e0@rewriter cQ29e0@rewriter) (set! cQ29e2@expanded->core (lambda (cQ2a1f@x) ((cQ29e0@rewriter '#f) cQ2a1f@x))) (set! cQ2a2a@cQ29e2@expanded->core cQ29e2@expanded->core) (set! cQ29e4@compile-core-expr (lambda (cQ2a21@x) ((cQ29e0@rewriter '#f) cQ2a21@x))) (set! cQ2a2b@cQ29e4@compile-core-expr cQ29e4@compile-core-expr) (set! cQ29e6@pretty-print write) (set! cQ2a2c@cQ29e6@pretty-print cQ29e6@pretty-print) (set! cQ29e8@compile-core-expr-to-port (lambda (cQ2a23@x cQ2a24@p) (cQ29e6@pretty-print ((cQ29e0@rewriter '#f) cQ2a23@x) cQ2a24@p))) (set! cQ2a2d@cQ29e8@compile-core-expr-to-port cQ29e8@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! cQ2a7c@make-collection (unspecified)) (set! cQ2a7e@current-library-collection (unspecified)) (set! cQ2a80@rp (unspecified)) (set! cQ2a8a@library? (unspecified)) (set! cQ2a8c@library-id (unspecified)) (set! cQ2a8e@set-library-id! (unspecified)) (set! cQ2a90@library-name (unspecified)) (set! cQ2a92@set-library-name! (unspecified)) (set! cQ2a94@library-version (unspecified)) (set! cQ2a96@set-library-version! (unspecified)) (set! cQ2a98@library-imp* (unspecified)) (set! cQ2a9a@set-library-imp*! (unspecified)) (set! cQ2a9c@library-vis* (unspecified)) (set! cQ2a9e@set-library-vis*! (unspecified)) (set! cQ2aa0@library-inv* (unspecified)) (set! cQ2aa2@set-library-inv*! (unspecified)) (set! cQ2aa4@library-subst (unspecified)) (set! cQ2aa6@set-library-subst! (unspecified)) (set! cQ2aa8@library-env (unspecified)) (set! cQ2aaa@set-library-env! (unspecified)) (set! cQ2aac@library-visit-state (unspecified)) (set! cQ2aae@set-library-visit-state! (unspecified)) (set! cQ2ab0@library-invoke-state (unspecified)) (set! cQ2ab2@set-library-invoke-state! (unspecified)) (set! cQ2ab4@library-visit-code (unspecified)) (set! cQ2ab6@set-library-visit-code! (unspecified)) (set! cQ2ab8@library-invoke-code (unspecified)) (set! cQ2aba@set-library-invoke-code! (unspecified)) (set! cQ2abc@library-visible? (unspecified)) (set! cQ2abe@set-library-visible?! (unspecified)) (set! cQ2ac0@library-source-file-name (unspecified)) (set! cQ2ac2@set-library-source-file-name! (unspecified)) (set! cQ2ac4@dummy (unspecified)) (set! cQ2ac6@find-dependencies (unspecified)) (set! cQ2ac8@find-library-by (unspecified)) (set! cQ2aca@library-path (unspecified)) (set! cQ2acc@library-extensions (unspecified)) (set! cQ2ace@library-name->file-name (unspecified)) (set! cQ2ad0@file-locator (unspecified)) (set! cQ2ad2@serialize-all (unspecified)) (set! cQ2ad4@current-precompiled-library-loader (unspecified)) (set! cQ2ad6@try-load-from-file (unspecified)) (set! cQ2ad8@library-loader (unspecified)) (set! cQ2ada@current-library-expander (unspecified)) (set! cQ2adc@external-pending-libraries (unspecified)) (set! cQ2ade@find-external-library (unspecified)) (set! cQ2ae0@find-library-by-name (unspecified)) (set! cQ2ae2@library-exists? (unspecified)) (set! cQ2ae4@find-library-by-spec/die (unspecified)) (set! cQ2ae6@label->binding-table (unspecified)) (set! cQ2ae8@install-library-record (unspecified)) (set! cQ2aea@install-library (unspecified)) (set! cQ2aec@imported-label->binding (unspecified)) (set! cQ2aee@invoke-library (unspecified)) (set! cQ2af0@visit-library (unspecified)) (set! cQ2af2@invoke-library-by-spec (unspecified)) (set! cQ2af4@invoke-library-by-name (unspecified)) (set! cQ2af6@installed-libraries (unspecified)) (set! cQ2af8@library-spec (unspecified)) (set! cQ2a7c@make-collection (lambda () (let ((cQ2af9@set '())) (letrec* ((cQ2afc@set-cons (lambda (cQ2b01@x cQ2b02@ls) (if (memq cQ2b01@x cQ2b02@ls) cQ2b02@ls (cons cQ2b01@x cQ2b02@ls))))) (lambda cQ2aff (let ((cQ2b00 (length cQ2aff))) (if (= cQ2b00 '0) (apply (lambda () cQ2af9@set) cQ2aff) (if (= cQ2b00 '1) (apply (lambda (cQ2afd@x) (set! cQ2af9@set (cQ2afc@set-cons cQ2afd@x cQ2af9@set))) cQ2aff) (error #1='apply '"invalid arg count"))))))))) (set! cQ2c7b@cQ2a7c@make-collection cQ2a7c@make-collection) (set! cQ2a7e@current-library-collection (cQ29d4@cQ28b2@make-parameter (cQ2a7c@make-collection) (lambda (cQ2b05@x) (begin (if (not (procedure? cQ2b05@x)) (assertion-violation 'current-library-collection '"not a procedure" cQ2b05@x) (void)) cQ2b05@x)))) (set! cQ2c7c@cQ2a7e@current-library-collection cQ2a7e@current-library-collection) (set! cQ2a80@rp (cQ29d1@cQ28ac@make-record-printer 'library (lambda (cQ2b07@x cQ2b08@p cQ2b09@wr) (begin (if (not (cQ2a8a@library? cQ2b07@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (cQ2a94@library-version cQ2b07@x)) (cQ2a90@library-name cQ2b07@x) (append (cQ2a90@library-name cQ2b07@x) (list (cQ2a94@library-version cQ2b07@x))))) cQ2b08@p))))) (set! cQ2c7d@cQ2a80@rp cQ2a80@rp) (set! cQ2a8a@library? (lambda (cQ2b0d@x) (and (simple-struct? cQ2b0d@x) (eq? (simple-struct-name cQ2b0d@x) 'library)))) (set! cQ2c7e@cQ2a8a@library? cQ2a8a@library?) (set! cQ2a8c@library-id (lambda (cQ2b0f@x) (simple-struct-ref cQ2b0f@x '0))) (set! cQ2c7f@cQ2a8c@library-id cQ2a8c@library-id) (set! cQ2a8e@set-library-id! (lambda (cQ2b11@x cQ2b12@val) (simple-struct-set! cQ2b11@x '0 cQ2b12@val))) (set! cQ2c80@cQ2a8e@set-library-id! cQ2a8e@set-library-id!) (set! cQ2a90@library-name (lambda (cQ2b15@x) (simple-struct-ref cQ2b15@x '1))) (set! cQ2c81@cQ2a90@library-name cQ2a90@library-name) (set! cQ2a92@set-library-name! (lambda (cQ2b17@x cQ2b18@val) (simple-struct-set! cQ2b17@x '1 cQ2b18@val))) (set! cQ2c82@cQ2a92@set-library-name! cQ2a92@set-library-name!) (set! cQ2a94@library-version (lambda (cQ2b1b@x) (simple-struct-ref cQ2b1b@x '2))) (set! cQ2c83@cQ2a94@library-version cQ2a94@library-version) (set! cQ2a96@set-library-version! (lambda (cQ2b1d@x cQ2b1e@val) (simple-struct-set! cQ2b1d@x '2 cQ2b1e@val))) (set! cQ2c84@cQ2a96@set-library-version! cQ2a96@set-library-version!) (set! cQ2a98@library-imp* (lambda (cQ2b21@x) (simple-struct-ref cQ2b21@x '3))) (set! cQ2c85@cQ2a98@library-imp* cQ2a98@library-imp*) (set! cQ2a9a@set-library-imp*! (lambda (cQ2b23@x cQ2b24@val) (simple-struct-set! cQ2b23@x '3 cQ2b24@val))) (set! cQ2c86@cQ2a9a@set-library-imp*! cQ2a9a@set-library-imp*!) (set! cQ2a9c@library-vis* (lambda (cQ2b27@x) (simple-struct-ref cQ2b27@x '4))) (set! cQ2c87@cQ2a9c@library-vis* cQ2a9c@library-vis*) (set! cQ2a9e@set-library-vis*! (lambda (cQ2b29@x cQ2b2a@val) (simple-struct-set! cQ2b29@x '4 cQ2b2a@val))) (set! cQ2c88@cQ2a9e@set-library-vis*! cQ2a9e@set-library-vis*!) (set! cQ2aa0@library-inv* (lambda (cQ2b2d@x) (simple-struct-ref cQ2b2d@x '5))) (set! cQ2c89@cQ2aa0@library-inv* cQ2aa0@library-inv*) (set! cQ2aa2@set-library-inv*! (lambda (cQ2b2f@x cQ2b30@val) (simple-struct-set! cQ2b2f@x '5 cQ2b30@val))) (set! cQ2c8a@cQ2aa2@set-library-inv*! cQ2aa2@set-library-inv*!) (set! cQ2aa4@library-subst (lambda (cQ2b33@x) (simple-struct-ref cQ2b33@x '6))) (set! cQ2c8b@cQ2aa4@library-subst cQ2aa4@library-subst) (set! cQ2aa6@set-library-subst! (lambda (cQ2b35@x cQ2b36@val) (simple-struct-set! cQ2b35@x '6 cQ2b36@val))) (set! cQ2c8c@cQ2aa6@set-library-subst! cQ2aa6@set-library-subst!) (set! cQ2aa8@library-env (lambda (cQ2b39@x) (simple-struct-ref cQ2b39@x '7))) (set! cQ2c8d@cQ2aa8@library-env cQ2aa8@library-env) (set! cQ2aaa@set-library-env! (lambda (cQ2b3b@x cQ2b3c@val) (simple-struct-set! cQ2b3b@x '7 cQ2b3c@val))) (set! cQ2c8e@cQ2aaa@set-library-env! cQ2aaa@set-library-env!) (set! cQ2aac@library-visit-state (lambda (cQ2b3f@x) (simple-struct-ref cQ2b3f@x '8))) (set! cQ2c8f@cQ2aac@library-visit-state cQ2aac@library-visit-state) (set! cQ2aae@set-library-visit-state! (lambda (cQ2b41@x cQ2b42@val) (simple-struct-set! cQ2b41@x '8 cQ2b42@val))) (set! cQ2c90@cQ2aae@set-library-visit-state! cQ2aae@set-library-visit-state!) (set! cQ2ab0@library-invoke-state (lambda (cQ2b45@x) (simple-struct-ref cQ2b45@x '9))) (set! cQ2c91@cQ2ab0@library-invoke-state cQ2ab0@library-invoke-state) (set! cQ2ab2@set-library-invoke-state! (lambda (cQ2b47@x cQ2b48@val) (simple-struct-set! cQ2b47@x '9 cQ2b48@val))) (set! cQ2c92@cQ2ab2@set-library-invoke-state! cQ2ab2@set-library-invoke-state!) (set! cQ2ab4@library-visit-code (lambda (cQ2b4b@x) (simple-struct-ref cQ2b4b@x '10))) (set! cQ2c93@cQ2ab4@library-visit-code cQ2ab4@library-visit-code) (set! cQ2ab6@set-library-visit-code! (lambda (cQ2b4d@x cQ2b4e@val) (simple-struct-set! cQ2b4d@x '10 cQ2b4e@val))) (set! cQ2c94@cQ2ab6@set-library-visit-code! cQ2ab6@set-library-visit-code!) (set! cQ2ab8@library-invoke-code (lambda (cQ2b51@x) (simple-struct-ref cQ2b51@x '11))) (set! cQ2c95@cQ2ab8@library-invoke-code cQ2ab8@library-invoke-code) (set! cQ2aba@set-library-invoke-code! (lambda (cQ2b53@x cQ2b54@val) (simple-struct-set! cQ2b53@x '11 cQ2b54@val))) (set! cQ2c96@cQ2aba@set-library-invoke-code! cQ2aba@set-library-invoke-code!) (set! cQ2abc@library-visible? (lambda (cQ2b57@x) (simple-struct-ref cQ2b57@x '12))) (set! cQ2c97@cQ2abc@library-visible? cQ2abc@library-visible?) (set! cQ2abe@set-library-visible?! (lambda (cQ2b59@x cQ2b5a@val) (simple-struct-set! cQ2b59@x '12 cQ2b5a@val))) (set! cQ2c98@cQ2abe@set-library-visible?! cQ2abe@set-library-visible?!) (set! cQ2ac0@library-source-file-name (lambda (cQ2b5d@x) (simple-struct-ref cQ2b5d@x '13))) (set! cQ2c99@cQ2ac0@library-source-file-name cQ2ac0@library-source-file-name) (set! cQ2ac2@set-library-source-file-name! (lambda (cQ2b5f@x cQ2b60@val) (simple-struct-set! cQ2b5f@x '13 cQ2b60@val))) (set! cQ2c9a@cQ2ac2@set-library-source-file-name! cQ2ac2@set-library-source-file-name!) (set! cQ2ac4@dummy '3) (set! cQ2c9b@cQ2ac4@dummy cQ2ac4@dummy) (set! cQ2ac6@find-dependencies (lambda (cQ2b63@ls) (if (null? cQ2b63@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! cQ2c9c@cQ2ac6@find-dependencies cQ2ac6@find-dependencies) (set! cQ2ac8@find-library-by (lambda (cQ2b65@pred) (let cQ2b69@f ((cQ2b67@ls ((cQ2a7e@current-library-collection)))) (if (null? cQ2b67@ls) '#f (if (cQ2b65@pred (car cQ2b67@ls)) (car cQ2b67@ls) (cQ2b69@f (cdr cQ2b67@ls))))))) (set! cQ2c9d@cQ2ac8@find-library-by cQ2ac8@find-library-by) (set! cQ2aca@library-path (cQ29d4@cQ28b2@make-parameter '(".") (lambda (cQ2b6b@x) (if (and (list? cQ2b6b@x) (for-all string? cQ2b6b@x)) (map (lambda (cQ2b6d@x) cQ2b6d@x) cQ2b6b@x) (assertion-violation 'library-path '"not a list of strings" cQ2b6b@x))))) (set! cQ2c9e@cQ2aca@library-path cQ2aca@library-path) (set! cQ2acc@library-extensions (cQ29d4@cQ28b2@make-parameter '(".sls" ".ss" ".scm") (lambda (cQ2b6f@x) (if (and (list? cQ2b6f@x) (for-all string? cQ2b6f@x)) (map (lambda (cQ2b71@x) cQ2b71@x) cQ2b6f@x) (assertion-violation 'library-extensions '"not a list of strings" cQ2b6f@x))))) (set! cQ2c9f@cQ2acc@library-extensions cQ2acc@library-extensions) (set! cQ2ace@library-name->file-name (lambda (cQ2b73@x) (call-with-values (lambda () (open-string-output-port)) (lambda (cQ2b79@cQ2b76 cQ2b7a@cQ2b78) (let ((cQ2b7d@extract cQ2b7a@cQ2b78) (cQ2b7e@p cQ2b79@cQ2b76)) (letrec* ((cQ2b82@display-hex (lambda (cQ2b8b@n) (if (<= '0 cQ2b8b@n '9) (display cQ2b8b@n cQ2b7e@p) (display (integer->char (+ (char->integer '#\a) (- cQ2b8b@n '10))) cQ2b7e@p))))) (begin (let cQ2b85@f ((cQ2b83@ls cQ2b73@x)) (if (not (null? cQ2b83@ls)) (begin (display '"/" cQ2b7e@p) (for-each (lambda (cQ2b87@c) (if (or (char<=? '#\a cQ2b87@c '#\z) (char<=? '#\A cQ2b87@c '#\Z) (char<=? '#\0 cQ2b87@c '#\9) (memv cQ2b87@c '(#\- #\. #\_ #\~))) (display cQ2b87@c cQ2b7e@p) (begin (display '"%" cQ2b7e@p) (let ((cQ2b89@n (char->integer cQ2b87@c))) (begin (cQ2b82@display-hex (quotient cQ2b89@n '16)) (cQ2b82@display-hex (remainder cQ2b89@n '16))))))) (string->list (symbol->string (car cQ2b83@ls)))) (cQ2b85@f (cdr cQ2b83@ls))) (void))) (cQ2b7d@extract)))))))) (set! cQ2ca0@cQ2ace@library-name->file-name cQ2ace@library-name->file-name) (set! cQ2ad0@file-locator (cQ29d4@cQ28b2@make-parameter (lambda (cQ2b8d@x) (let ((cQ2b8f@str (cQ2ace@library-name->file-name cQ2b8d@x))) (let cQ2b97@f ((cQ2b91@ls (cQ2aca@library-path)) (cQ2b92@exts (cQ2acc@library-extensions)) (cQ2b93@failed-list '())) (if (null? cQ2b91@ls) (letrec* ((cQ2ba1@cQ2b9c (make-record-type-descriptor '&library-resolution &condition-rtd 'cQ2b9f '#f '#f '#((immutable library) (immutable files)))) (cQ2ba3@cQ2b9e '#f) (cQ2ba5@cQ2b9d (make-record-constructor-descriptor cQ2ba1@cQ2b9c &condition-rcd cQ2ba3@cQ2b9e)) (cQ2ba8@cQ2b9b (record-predicate cQ2ba1@cQ2b9c)) (cQ2baa@make-library-resolution-condition (record-constructor cQ2ba5@cQ2b9d)) (cQ2bac@cQ2b99 (record-accessor cQ2ba1@cQ2b9c '0)) (cQ2bae@cQ2b9a (record-accessor cQ2ba1@cQ2b9c '1)) (cQ2bb0@library-resolution-condition? (condition-predicate cQ2ba1@cQ2b9c)) (cQ2bb2@condition-library (condition-accessor cQ2ba1@cQ2b9c cQ2bac@cQ2b99)) (cQ2bb4@condition-files (condition-accessor cQ2ba1@cQ2b9c cQ2bae@cQ2b9a))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (cQ2baa@make-library-resolution-condition cQ2b8d@x (reverse cQ2b93@failed-list))))) (if (null? cQ2b92@exts) (cQ2b97@f (cdr cQ2b91@ls) (cQ2acc@library-extensions) cQ2b93@failed-list) (let ((cQ2bb5@name (string-append (car cQ2b91@ls) cQ2b8f@str (car cQ2b92@exts)))) (if (file-exists? cQ2bb5@name) cQ2bb5@name (cQ2b97@f cQ2b91@ls (cdr cQ2b92@exts) (cons cQ2bb5@name cQ2b93@failed-list))))))))) (lambda (cQ2bb7@f) (if (procedure? cQ2bb7@f) cQ2bb7@f (assertion-violation 'file-locator '"not a procedure" cQ2bb7@f))))) (set! cQ2ca1@cQ2ad0@file-locator cQ2ad0@file-locator) (set! cQ2ad2@serialize-all (lambda (cQ2bb9@serialize cQ2bba@compile) (letrec* ((cQ2bbe@library-desc (lambda (cQ2bc1@x) (list (cQ2a8c@library-id cQ2bc1@x) (cQ2a90@library-name cQ2bc1@x))))) (for-each (lambda (cQ2bbf@x) (if (cQ2ac0@library-source-file-name cQ2bbf@x) (cQ2bb9@serialize (cQ2ac0@library-source-file-name cQ2bbf@x) (list (cQ2a8c@library-id cQ2bbf@x) (cQ2a90@library-name cQ2bbf@x) (cQ2a94@library-version cQ2bbf@x) (map cQ2bbe@library-desc (cQ2a98@library-imp* cQ2bbf@x)) (map cQ2bbe@library-desc (cQ2a9c@library-vis* cQ2bbf@x)) (map cQ2bbe@library-desc (cQ2aa0@library-inv* cQ2bbf@x)) (cQ2aa4@library-subst cQ2bbf@x) (cQ2aa8@library-env cQ2bbf@x) (cQ2bba@compile (cQ2ab4@library-visit-code cQ2bbf@x)) (cQ2bba@compile (cQ2ab8@library-invoke-code cQ2bbf@x)) (cQ2abc@library-visible? cQ2bbf@x))) (void))) ((cQ2a7e@current-library-collection)))))) (set! cQ2ca2@cQ2ad2@serialize-all cQ2ad2@serialize-all) (set! cQ2ad4@current-precompiled-library-loader (cQ29d4@cQ28b2@make-parameter (lambda (cQ2bc3@filename cQ2bc4@sk) '#f))) (set! cQ2ca3@cQ2ad4@current-precompiled-library-loader cQ2ad4@current-precompiled-library-loader) (set! cQ2ad6@try-load-from-file (lambda (cQ2bc7@filename) ((cQ2ad4@current-precompiled-library-loader) cQ2bc7@filename (lambda cQ2bed (let ((cQ2bee (length cQ2bed))) (if (= cQ2bee '11) (apply (lambda (cQ2bc9@id cQ2bca@name cQ2bcb@ver cQ2bcc@imp* cQ2bcd@vis* cQ2bce@inv* cQ2bcf@exp-subst cQ2bd0@exp-env cQ2bd1@visit-proc cQ2bd2@invoke-proc cQ2bd3@visible?) (let cQ2be1@f ((cQ2bdf@deps (append cQ2bcc@imp* cQ2bcd@vis* cQ2bce@inv*))) (if (null? cQ2bdf@deps) (begin (cQ2aea@install-library cQ2bc9@id cQ2bca@name cQ2bcb@ver cQ2bcc@imp* cQ2bcd@vis* cQ2bce@inv* cQ2bcf@exp-subst cQ2bd0@exp-env cQ2bd1@visit-proc cQ2bd2@invoke-proc '#f '#f cQ2bd3@visible? '#f) '#t) (let ((cQ2be3@d (car cQ2bdf@deps))) (let ((cQ2be5@label (car cQ2be3@d)) (cQ2be6@dname (cadr cQ2be3@d))) (let ((cQ2be9@l (cQ2ae0@find-library-by-name cQ2be6@dname))) (if (and (cQ2a8a@library? cQ2be9@l) (eq? cQ2be5@label (cQ2a8c@library-id cQ2be9@l))) (cQ2be1@f (cdr cQ2bdf@deps)) (begin (if cQ29ce@cQ28a6@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" cQ2bca@name cQ2be6@dname cQ2bc7@filename cQ2be9@l cQ2be5@label (cQ2a8c@library-id cQ2be9@l)) (void)) '#f)))))))) cQ2bed) (if (>= cQ2bee '0) (apply (lambda cQ2beb@others '#f) cQ2bed) (error #1# '"invalid arg count")))))))) (set! cQ2ca4@cQ2ad6@try-load-from-file cQ2ad6@try-load-from-file) (set! cQ2ad8@library-loader (cQ29d4@cQ28b2@make-parameter (lambda (cQ2bef@x) (let ((cQ2bf1@file-name ((cQ2ad0@file-locator) cQ2bef@x))) (if (not cQ2bf1@file-name) (assertion-violation '#f '"cannot file library" cQ2bef@x) (or (cQ2ad6@try-load-from-file cQ2bf1@file-name) ((cQ2ada@current-library-expander) (cQ29d3@cQ28b0@read-library-source-file cQ2bf1@file-name) cQ2bf1@file-name (lambda (cQ2bf3@name) (if (not (fast-equal? cQ2bf3@name cQ2bef@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (cQ2bf9@cQ2bf6 cQ2bfa@cQ2bf8) (let ((cQ2bfd@e cQ2bfa@cQ2bf8) (cQ2bfe@p cQ2bf9@cQ2bf6)) (begin (display '"expected to find library " cQ2bfe@p) (write cQ2bef@x cQ2bfe@p) (display '" in file " cQ2bfe@p) (display cQ2bf1@file-name cQ2bfe@p) (display '", found " cQ2bfe@p) (write cQ2bf3@name cQ2bfe@p) (display '" instead" cQ2bfe@p) (cQ2bfd@e)))))) (void)))))))) (lambda (cQ2c01@f) (if (procedure? cQ2c01@f) cQ2c01@f (assertion-violation 'library-locator '"not a procedure" cQ2c01@f))))) (set! cQ2ca5@cQ2ad8@library-loader cQ2ad8@library-loader) (set! cQ2ada@current-library-expander (cQ29d4@cQ28b2@make-parameter (lambda (cQ2c03@x) (assertion-violation 'library-expander '"not initialized")) (lambda (cQ2c05@f) (if (procedure? cQ2c05@f) cQ2c05@f (assertion-violation 'library-expander '"not a procedure" cQ2c05@f))))) (set! cQ2ca6@cQ2ada@current-library-expander cQ2ada@current-library-expander) (set! cQ2adc@external-pending-libraries (cQ29d4@cQ28b2@make-parameter '())) (set! cQ2ca7@cQ2adc@external-pending-libraries cQ2adc@external-pending-libraries) (set! cQ2ade@find-external-library (lambda (cQ2c07@name) (begin (if (member cQ2c07@name (cQ2adc@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" cQ2c07@name) (void)) (let ((cQ2c0d@cQ2c0a cQ2adc@external-pending-libraries) (cQ2c0e@cQ2c0c (cons cQ2c07@name (cQ2adc@external-pending-libraries)))) (let ((cQ2c11@swap (lambda () (let ((cQ2c13@t (cQ2c0d@cQ2c0a))) (begin (cQ2c0d@cQ2c0a cQ2c0e@cQ2c0c) (set! cQ2c0e@cQ2c0c cQ2c13@t)))))) (dynamic-wind cQ2c11@swap (lambda () (begin ((cQ2ad8@library-loader) cQ2c07@name) (or (cQ2ac8@find-library-by (lambda (cQ2c15@x) (fast-equal? (cQ2a90@library-name cQ2c15@x) cQ2c07@name))) (assertion-violation '#f '"handling external library did not yield the correct library" cQ2c07@name)))) cQ2c11@swap)))))) (set! cQ2ca8@cQ2ade@find-external-library cQ2ade@find-external-library) (set! cQ2ae0@find-library-by-name (lambda (cQ2c17@name) (or (cQ2ac8@find-library-by (lambda (cQ2c19@x) (fast-equal? (cQ2a90@library-name cQ2c19@x) cQ2c17@name))) (cQ2ade@find-external-library cQ2c17@name)))) (set! cQ2ca9@cQ2ae0@find-library-by-name cQ2ae0@find-library-by-name) (set! cQ2ae2@library-exists? (lambda (cQ2c1b@name) (and (cQ2ac8@find-library-by (lambda (cQ2c1d@x) (fast-equal? (cQ2a90@library-name cQ2c1d@x) cQ2c1b@name))) '#t))) (set! cQ2caa@cQ2ae2@library-exists? cQ2ae2@library-exists?) (set! cQ2ae4@find-library-by-spec/die (lambda (cQ2c1f@spec) (let ((cQ2c21@id (car cQ2c1f@spec))) (or (cQ2ac8@find-library-by (lambda (cQ2c23@x) (eq? cQ2c21@id (cQ2a8c@library-id cQ2c23@x)))) (assertion-violation '#f '"cannot find library with required spec" cQ2c1f@spec))))) (set! cQ2cab@cQ2ae4@find-library-by-spec/die cQ2ae4@find-library-by-spec/die) (set! cQ2ae6@label->binding-table (make-eq-hashtable)) (set! cQ2cac@cQ2ae6@label->binding-table cQ2ae6@label->binding-table) (set! cQ2ae8@install-library-record (lambda (cQ2c25@lib) (begin (let ((cQ2c27@exp-env (cQ2aa8@library-env cQ2c25@lib))) (for-each (lambda (cQ2c29@x) (let ((cQ2c2b@label (car cQ2c29@x)) (cQ2c2c@binding (cdr cQ2c29@x))) (let ((cQ2c2f@binding (let ((cQ2c31@t (car cQ2c2c@binding))) (if (memv cQ2c31@t '(global)) (cons 'global (cons cQ2c25@lib (cdr cQ2c2c@binding))) (if (memv cQ2c31@t '(global-macro)) (cons 'global-macro (cons cQ2c25@lib (cdr cQ2c2c@binding))) (if (memv cQ2c31@t '(global-macro!)) (cons 'global-macro! (cons cQ2c25@lib (cdr cQ2c2c@binding))) cQ2c2c@binding)))))) (begin (if (hashtable-ref cQ2ae6@label->binding-table cQ2c2b@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" cQ2c2b@label (hashtable-ref cQ2ae6@label->binding-table cQ2c2b@label '#f) cQ2c2f@binding) (exit)) (void)) (hashtable-set! cQ2ae6@label->binding-table cQ2c2b@label cQ2c2f@binding))))) cQ2c27@exp-env)) ((cQ2a7e@current-library-collection) cQ2c25@lib)))) (set! cQ2cad@cQ2ae8@install-library-record cQ2ae8@install-library-record) (set! cQ2aea@install-library (lambda (cQ2c33@id cQ2c34@name cQ2c35@ver cQ2c36@imp* cQ2c37@vis* cQ2c38@inv* cQ2c39@exp-subst cQ2c3a@exp-env cQ2c3b@visit-proc cQ2c3c@invoke-proc cQ2c3d@visit-code cQ2c3e@invoke-code cQ2c3f@visible? cQ2c40@source-file-name) (let ((cQ2c4f@imp-lib* (map cQ2ae4@find-library-by-spec/die cQ2c36@imp*)) (cQ2c50@vis-lib* (map cQ2ae4@find-library-by-spec/die cQ2c37@vis*)) (cQ2c51@inv-lib* (map cQ2ae4@find-library-by-spec/die cQ2c38@inv*))) (begin (if (not (and (symbol? cQ2c33@id) (list? cQ2c34@name) (list? cQ2c35@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" cQ2c33@id cQ2c34@name cQ2c35@ver) (void)) (if (cQ2ae2@library-exists? cQ2c34@name) (assertion-violation 'install-library '"library is already installed" cQ2c34@name) (void)) (let ((cQ2c55@lib (make-simple-struct 'library '15 (list cQ2c33@id cQ2c34@name cQ2c35@ver cQ2c4f@imp-lib* cQ2c50@vis-lib* cQ2c51@inv-lib* cQ2c39@exp-subst cQ2c3a@exp-env cQ2c3b@visit-proc cQ2c3c@invoke-proc cQ2c3d@visit-code cQ2c3e@invoke-code cQ2c3f@visible? cQ2c40@source-file-name)))) (cQ2ae8@install-library-record cQ2c55@lib)))))) (set! cQ2cae@cQ2aea@install-library cQ2aea@install-library) (set! cQ2aec@imported-label->binding (lambda (cQ2c57@lab) (hashtable-ref cQ2ae6@label->binding-table cQ2c57@lab '#f))) (set! cQ2caf@cQ2aec@imported-label->binding cQ2aec@imported-label->binding) (set! cQ2aee@invoke-library (lambda (cQ2c59@lib) (let ((cQ2c5b@invoke (cQ2ab0@library-invoke-state cQ2c59@lib))) (if (procedure? cQ2c5b@invoke) (begin (cQ2ab2@set-library-invoke-state! cQ2c59@lib (lambda () (assertion-violation 'invoke '"circularity detected" cQ2c59@lib))) (for-each cQ2aee@invoke-library (cQ2aa0@library-inv* cQ2c59@lib)) (cQ2ab2@set-library-invoke-state! cQ2c59@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" cQ2c59@lib))) (cQ2c5b@invoke) (cQ2ab2@set-library-invoke-state! cQ2c59@lib '#t)) (void))))) (set! cQ2cb0@cQ2aee@invoke-library cQ2aee@invoke-library) (set! cQ2af0@visit-library (lambda (cQ2c5d@lib) (let ((cQ2c5f@visit (cQ2aac@library-visit-state cQ2c5d@lib))) (if (procedure? cQ2c5f@visit) (begin (cQ2aae@set-library-visit-state! cQ2c5d@lib (lambda () (assertion-violation 'visit '"circularity detected" cQ2c5d@lib))) (for-each cQ2aee@invoke-library (cQ2a9c@library-vis* cQ2c5d@lib)) (cQ2aae@set-library-visit-state! cQ2c5d@lib (lambda () (assertion-violation 'invoke '"first visit did not return" cQ2c5d@lib))) (cQ2c5f@visit) (cQ2aae@set-library-visit-state! cQ2c5d@lib '#t)) (void))))) (set! cQ2cb1@cQ2af0@visit-library cQ2af0@visit-library) (set! cQ2af2@invoke-library-by-spec (lambda (cQ2c61@spec) (cQ2aee@invoke-library (cQ2ae4@find-library-by-spec/die cQ2c61@spec)))) (set! cQ2cb2@cQ2af2@invoke-library-by-spec cQ2af2@invoke-library-by-spec) (set! cQ2af4@invoke-library-by-name (lambda (cQ2c63@name) (let ((cQ2c69@cQ2c66 cQ29d5@cQ28b4@mosh-cache-dir) (cQ2c6a@cQ2c68 (create-mosh-cache-dir))) (let ((cQ2c6d@swap (lambda () (let ((cQ2c6f@t (cQ2c69@cQ2c66))) (begin (cQ2c69@cQ2c66 cQ2c6a@cQ2c68) (set! cQ2c6a@cQ2c68 cQ2c6f@t)))))) (dynamic-wind cQ2c6d@swap (lambda () (cQ2aee@invoke-library (cQ2ae0@find-library-by-name cQ2c63@name))) cQ2c6d@swap))))) (set! cQ2cb3@cQ2af4@invoke-library-by-name cQ2af4@invoke-library-by-name) (set! cQ2af6@installed-libraries (lambda cQ2c77 (let ((cQ2c78 (length cQ2c77))) (if (= cQ2c78 '1) (apply (lambda (cQ2c71@all?) (let cQ2c75@f ((cQ2c73@ls ((cQ2a7e@current-library-collection)))) (if (null? cQ2c73@ls) '() (if (or cQ2c71@all? (cQ2abc@library-visible? (car cQ2c73@ls))) (cons (car cQ2c73@ls) (cQ2c75@f (cdr cQ2c73@ls))) (cQ2c75@f (cdr cQ2c73@ls)))))) cQ2c77) (if (= cQ2c78 '0) (apply (lambda () (cQ2af6@installed-libraries '#f)) cQ2c77) (error #1# '"invalid arg count")))))) (set! cQ2cb4@cQ2af6@installed-libraries cQ2af6@installed-libraries) (set! cQ2af8@library-spec (lambda (cQ2c79@x) (begin (if (not (cQ2a8a@library? cQ2c79@x)) (assertion-violation 'library-spec '"not a library" cQ2c79@x) (void)) (list (cQ2a8c@library-id cQ2c79@x) (cQ2a90@library-name cQ2c79@x) (cQ2a94@library-version cQ2c79@x))))) (set! cQ2cb5@cQ2af8@library-spec cQ2af8@library-spec) (void))
(begin (set! cQ2cb9@build-global-define (unspecified)) (set! cQ2d2a@build-lambda (unspecified)) (set! cQ2d2c@build-case-lambda (unspecified)) (set! cQ2d5a@build-sequence (unspecified)) (set! cQ2d5c@build-void (unspecified)) (set! cQ2d5e@build-letrec (unspecified)) (set! cQ2d60@build-let (unspecified)) (set! cQ2d62@build-named-let (unspecified)) (set! cQ2d64@build-letrec* (unspecified)) (set! cQ2d66@build-library-letrec* (unspecified)) (set! cQ2d68@build-receive (unspecified)) (set! cQ2cb9@build-global-define (lambda (cQ2d69@x) (cQ2d5c@build-void))) (set! cQ2df7@cQ2cb9@build-global-define cQ2cb9@build-global-define) (set! cQ2d2a@build-lambda (lambda (cQ2d6b@ae cQ2d6c@vars cQ2d6d@exp) (list 'lambda cQ2d6c@vars cQ2d6d@exp))) (set! cQ2df8@cQ2d2a@build-lambda cQ2d2a@build-lambda) (set! cQ2d2c@build-case-lambda (lambda (cQ2d71@ae cQ2d72@vars* cQ2d73@exp*) (letrec* ((cQ2d78@build-error (lambda (cQ2daf@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (cQ2d7a@build-pred (lambda (cQ2d97@ae cQ2d98@n cQ2d99@vars) (call-with-values (lambda () (let cQ2da5@f ((cQ2da1@vars cQ2d99@vars) (cQ2da2@count '0)) (if (pair? cQ2da1@vars) (cQ2da5@f (cdr cQ2da1@vars) (+ cQ2da2@count '1)) (if (null? cQ2da1@vars) (values cQ2da2@count '=) (values cQ2da2@count '>=))))) (lambda (cQ2da7@cQ2d9e cQ2da8@cQ2da0) (let ((cQ2dab@pred cQ2da8@cQ2da0) (cQ2dac@count cQ2da7@cQ2d9e)) (list (list 'primitive cQ2dab@pred) cQ2d98@n (list 'quote cQ2dac@count))))))) (cQ2d7c@build-apply (lambda (cQ2d8f@ae cQ2d90@g cQ2d91@vars cQ2d92@exp) (list '(primitive apply) (cQ2d2a@build-lambda cQ2d8f@ae cQ2d91@vars cQ2d92@exp) cQ2d90@g))) (cQ2d7e@expand-case-lambda (lambda (cQ2d7f@ae cQ2d80@vars cQ2d81@exp*) (let ((cQ2d85@g (gensym)) (cQ2d86@n (gensym))) (list 'lambda cQ2d85@g (cQ2d60@build-let cQ2d7f@ae (list cQ2d86@n) (list (list '(primitive length) cQ2d85@g)) (let cQ2d8d@f ((cQ2d89@vars* cQ2d72@vars*) (cQ2d8a@exp* cQ2d81@exp*)) (if (null? cQ2d89@vars*) (cQ2d78@build-error cQ2d7f@ae) (list 'if (cQ2d7a@build-pred cQ2d7f@ae cQ2d86@n (car cQ2d89@vars*)) (cQ2d7c@build-apply cQ2d7f@ae cQ2d85@g (car cQ2d89@vars*) (car cQ2d8a@exp*)) (cQ2d8d@f (cdr cQ2d89@vars*) (cdr cQ2d8a@exp*))))))))))) (if (= (length cQ2d73@exp*) '1) (cQ2d2a@build-lambda cQ2d71@ae (car cQ2d72@vars*) (car cQ2d73@exp*)) (cQ2d7e@expand-case-lambda cQ2d71@ae cQ2d72@vars* cQ2d73@exp*))))) (set! cQ2df9@cQ2d2c@build-case-lambda cQ2d2c@build-case-lambda) (set! cQ2d5a@build-sequence (lambda (cQ2db1@ae cQ2db2@exps) (let cQ2db7@loop ((cQ2db5@exps cQ2db2@exps)) (if (null? (cdr cQ2db5@exps)) (car cQ2db5@exps) (if (equal? (car cQ2db5@exps) (cQ2d5c@build-void)) (cQ2db7@loop (cdr cQ2db5@exps)) (cons 'begin cQ2db5@exps)))))) (set! cQ2dfa@cQ2d5a@build-sequence cQ2d5a@build-sequence) (set! cQ2d5c@build-void (lambda () '((primitive void)))) (set! cQ2dfb@cQ2d5c@build-void cQ2d5c@build-void) (set! cQ2d5e@build-letrec (lambda (cQ2db9@ae cQ2dba@vars cQ2dbb@val-exps cQ2dbc@body-exp) (if (null? cQ2dba@vars) cQ2dbc@body-exp (list 'letrec (map list cQ2dba@vars cQ2dbb@val-exps) cQ2dbc@body-exp)))) (set! cQ2dfc@cQ2d5e@build-letrec cQ2d5e@build-letrec) (set! cQ2d60@build-let (lambda (cQ2dc1@ae cQ2dc2@vars cQ2dc3@val-exps cQ2dc4@body-exp) (if (null? cQ2dc2@vars) cQ2dc4@body-exp (list 'let (map list cQ2dc2@vars cQ2dc3@val-exps) cQ2dc4@body-exp)))) (set! cQ2dfd@cQ2d60@build-let cQ2d60@build-let) (set! cQ2d62@build-named-let (lambda (cQ2dc9@ae cQ2dca@name cQ2dcb@vars cQ2dcc@val-exps cQ2dcd@body-exp) (list 'let cQ2dca@name (map list cQ2dcb@vars cQ2dcc@val-exps) cQ2dcd@body-exp))) (set! cQ2dfe@cQ2d62@build-named-let cQ2d62@build-named-let) (set! cQ2d64@build-letrec* (lambda (cQ2dd3@ae cQ2dd4@vars cQ2dd5@val-exps cQ2dd6@body-exp) (if (null? cQ2dd4@vars) cQ2dd6@body-exp (list 'letrec* (map list cQ2dd4@vars cQ2dd5@val-exps) cQ2dd6@body-exp)))) (set! cQ2dff@cQ2d64@build-letrec* cQ2d64@build-letrec*) (set! cQ2d66@build-library-letrec* (lambda (cQ2ddb@ae cQ2ddc@name cQ2ddd@vars cQ2dde@locs cQ2ddf@val-exps cQ2de0@body-exp) (cons 'begin (append (map (lambda (cQ2de7@var) (cons 'set! (cons cQ2de7@var '((unspecified))))) cQ2ddd@vars) (append (apply append (map (lambda (cQ2de9@var cQ2dea@loc cQ2deb@val-exp) (list (list 'set! cQ2de9@var cQ2deb@val-exp) (list 'set! cQ2dea@loc cQ2de9@var))) cQ2ddd@vars cQ2dde@locs cQ2ddf@val-exps)) (list cQ2de0@body-exp)))))) (set! cQ2e00@cQ2d66@build-library-letrec* cQ2d66@build-library-letrec*) (set! cQ2d68@build-receive (lambda (cQ2def@ae cQ2df0@vars cQ2df1@producer cQ2df2@body*) (begin (display '"************** in ") (cons 'receive (cons cQ2df0@vars (cons cQ2df1@producer cQ2df2@body*)))))) (set! cQ2e01@cQ2d68@build-receive cQ2d68@build-receive) (void))
(begin (set! cQ2e10@file-options-macro (unspecified)) (set! cQ2e12@set-cons (unspecified)) (set! cQ2e14@set-union (unspecified)) (set! cQ2e19@top-mark* (unspecified)) (set! cQ2e1b@top-marked? (unspecified)) (set! cQ2e1d@gen-lexical (unspecified)) (set! cQ2e1f@gen-global (unspecified)) (set! cQ2e21@gen-label (unspecified)) (set! cQ2e23@gen-top-level-label (unspecified)) (set! cQ2e25@gen-define-label+loc (unspecified)) (set! cQ2e27@gen-define-label (unspecified)) (set! cQ2e31@rib? (unspecified)) (set! cQ2e33@rib-sym* (unspecified)) (set! cQ2e35@set-rib-sym*! (unspecified)) (set! cQ2e37@rib-mark** (unspecified)) (set! cQ2e39@set-rib-mark**! (unspecified)) (set! cQ2e3b@rib-label* (unspecified)) (set! cQ2e3d@set-rib-label*! (unspecified)) (set! cQ2e3f@rib-sealed/freq (unspecified)) (set! cQ2e41@set-rib-sealed/freq! (unspecified)) (set! cQ2e43@rib-cache (unspecified)) (set! cQ2e45@set-rib-cache! (unspecified)) (set! cQ2e47@dummy (unspecified)) (set! cQ2e49@make-empty-rib (unspecified)) (set! cQ2e4b@extend-rib! (unspecified)) (set! cQ2e4d@extend-rib/nc! (unspecified)) (set! cQ2e4f@make-rib-map (unspecified)) (set! cQ2e51@seal-rib! (unspecified)) (set! cQ2e53@unseal-rib! (unspecified)) (set! cQ2e55@make-full-rib (unspecified)) (set! cQ2e57@rp (unspecified)) (set! cQ2e61@stx? (unspecified)) (set! cQ2e63@stx-expr (unspecified)) (set! cQ2e65@set-stx-expr! (unspecified)) (set! cQ2e67@stx-mark* (unspecified)) (set! cQ2e69@set-stx-mark*! (unspecified)) (set! cQ2e6b@stx-subst* (unspecified)) (set! cQ2e6d@set-stx-subst*! (unspecified)) (set! cQ2e6f@stx-ae* (unspecified)) (set! cQ2e71@set-stx-ae*! (unspecified)) (set! cQ2e73@dummy (unspecified)) (set! cQ2e75@datum->stx (unspecified)) (set! cQ2e77@gen-mark (unspecified)) (set! cQ2e79@anti-mark (unspecified)) (set! cQ2e7b@anti-mark? (unspecified)) (set! cQ2e7d@mkstx (unspecified)) (set! cQ2e7f@add-mark (unspecified)) (set! cQ2e81@add-subst (unspecified)) (set! cQ2e83@syntax-kind? (unspecified)) (set! cQ2e85@syntax-vector->list (unspecified)) (set! cQ2e87@syntax-pair? (unspecified)) (set! cQ2e89@syntax-vector? (unspecified)) (set! cQ2e8b@syntax-null? (unspecified)) (set! cQ2e8d@syntax-list? (unspecified)) (set! cQ2e8f@syntax-car (unspecified)) (set! cQ2e91@syntax-cdr (unspecified)) (set! cQ2e93@syntax->list (unspecified)) (set! cQ2e95@id? (unspecified)) (set! cQ2e97@id->sym (unspecified)) (set! cQ2e99@bound-id=? (unspecified)) (set! cQ2e9b@free-id=? (unspecified)) (set! cQ2e9d@valid-bound-ids? (unspecified)) (set! cQ2e9f@distinct-bound-ids? (unspecified)) (set! cQ2ea1@bound-id-member? (unspecified)) (set! cQ2ea3@self-evaluating? (unspecified)) (set! cQ2ea5@strip-annotations (unspecified)) (set! cQ2ea7@strip (unspecified)) (set! cQ2ea9@stx->datum (unspecified)) (set! cQ2eab@id->label (unspecified)) (set! cQ2ead@label->binding (unspecified)) (set! cQ2eaf@make-binding (unspecified)) (set! cQ2eb1@binding-type (unspecified)) (set! cQ2eb3@binding-value (unspecified)) (set! cQ2eb5@raise-unbound-error (unspecified)) (set! cQ2eb7@syntax-type (unspecified)) (set! cQ2ec5@sanitize-binding (unspecified)) (set! cQ2ec7@make-variable-transformer (unspecified)) (set! cQ2ec9@variable-transformer? (unspecified)) (set! cQ2ecb@variable-transformer-procedure (unspecified)) (set! cQ2ecd@make-eval-transformer (unspecified)) (set! cQ301e@parse-define (unspecified)) (set! cQ3020@parse-define-syntax (unspecified)) (set! cQ3022@scheme-stx-hashtable (unspecified)) (set! cQ3024@scheme-stx (unspecified)) (set! cQ3026@lexical-var (unspecified)) (set! cQ3028@lexical-mutable? (unspecified)) (set! cQ302a@set-lexical-mutable! (unspecified)) (set! cQ302c@add-lexical (unspecified)) (set! cQ302e@add-lexicals (unspecified)) (set! cQ3030@letrec-helper (unspecified)) (set! cQ3032@let-transformer (unspecified)) (set! cQ3034@letrec-transformer (unspecified)) (set! cQ3036@letrec*-transformer (unspecified)) (set! cQ3038@fluid-let-syntax-transformer (unspecified)) (set! cQ303a@type-descriptor-transformer (unspecified)) (set! cQ303c@record-type-descriptor-transformer (unspecified)) (set! cQ303e@record-constructor-descriptor-transformer (unspecified)) (set! cQ3040@when-macro (unspecified)) (set! cQ3042@unless-macro (unspecified)) (set! cQ3044@if-transformer (unspecified)) (set! cQ3046@and-transformer (unspecified)) (set! cQ3048@or-transformer (unspecified)) (set! cQ304a@case-macro (unspecified)) (set! cQ304c@quote-transformer (unspecified)) (set! cQ304e@case-lambda-transformer (unspecified)) (set! cQ3050@lambda-transformer (unspecified)) (set! cQ3052@bless (unspecified)) (set! cQ3054@with-syntax-macro (unspecified)) (set! cQ3056@invalid-fmls-error (unspecified)) (set! cQ3058@let-macro (unspecified)) (set! cQ305a@let-values-macro (unspecified)) (set! cQ305c@let*-values-macro (unspecified)) (set! cQ305e@trace-lambda-macro (unspecified)) (set! cQ3060@trace-define-macro (unspecified)) (set! cQ3062@trace-define-syntax-macro (unspecified)) (set! cQ3064@trace-let/rec-syntax (unspecified)) (set! cQ3066@trace-let-syntax-macro (unspecified)) (set! cQ3068@trace-letrec-syntax-macro (unspecified)) (set! cQ306a@guard-macro (unspecified)) (set! cQ306c@define-enumeration-macro (unspecified)) (set! cQ306e@time-macro (unspecified)) (set! cQ3070@delay-macro (unspecified)) (set! cQ3072@assert-macro (unspecified)) (set! cQ3074@endianness-macro (unspecified)) (set! cQ3076@identifier-syntax-macro (unspecified)) (set! cQ3078@do-macro (unspecified)) (set! cQ307a@let*-macro (unspecified)) (set! cQ307c@or-macro (unspecified)) (set! cQ307e@and-macro (unspecified)) (set! cQ3080@cond-macro (unspecified)) (set! cQ3082@do-include (unspecified)) (set! cQ3084@include-macro (unspecified)) (set! cQ3086@include-into-macro (unspecified)) (set! cQ3088@syntax-rules-macro (unspecified)) (set! cQ308a@quasiquote-macro (unspecified)) (set! cQ308c@quasisyntax-macro (unspecified)) (set! cQ308e@define-struct-macro (unspecified)) (set! cQ3090@define-record-type-macro (unspecified)) (set! cQ3092@define-condition-type-macro (unspecified)) (set! cQ3094@incorrect-usage-macro (unspecified)) (set! cQ3096@parameterize-macro (unspecified)) (set! cQ3098@foreign-call-transformer (unspecified)) (set! cQ309a@convert-pattern (unspecified)) (set! cQ309c@syntax-dispatch (unspecified)) (set! cQ309e@ellipsis? (unspecified)) (set! cQ30a0@underscore? (unspecified)) (set! cQ30a2@verify-literals (unspecified)) (set! cQ30a4@syntax-case-transformer (unspecified)) (set! cQ30a6@ellipsis-map (unspecified)) (set! cQ30a8@syntax-transformer (unspecified)) (set! cQ30aa@core-macro-transformer (unspecified)) (set! cQ30ac@symbol-macro (unspecified)) (set! cQ30ae@macro-transformer (unspecified)) (set! cQ30b0@local-macro-transformer (unspecified)) (set! cQ30b2@do-macro-call (unspecified)) (set! cQ30b4@chi-macro (unspecified)) (set! cQ30b6@chi-local-macro (unspecified)) (set! cQ30b8@chi-global-macro (unspecified)) (set! cQ30ba@chi-expr* (unspecified)) (set! cQ30bc@chi-application (unspecified)) (set! cQ30be@chi-expr (unspecified)) (set! cQ30c0@chi-set! (unspecified)) (set! cQ30c2@verify-formals (unspecified)) (set! cQ30c4@chi-lambda-clause (unspecified)) (set! cQ30c6@chi-lambda-clause* (unspecified)) (set! cQ30c8@chi-defun (unspecified)) (set! cQ30ca@chi-rhs (unspecified)) (set! cQ30cc@expand-interaction-rhs*/init* (unspecified)) (set! cQ30ce@chi-rhs* (unspecified)) (set! cQ30d0@find-bound=? (unspecified)) (set! cQ30d2@find-dups (unspecified)) (set! cQ30d4@chi-internal (unspecified)) (set! cQ30d6@parse-module (unspecified)) (set! cQ30e0@module-interface? (unspecified)) (set! cQ30e2@module-interface-first-mark (unspecified)) (set! cQ30e4@set-module-interface-first-mark! (unspecified)) (set! cQ30e6@module-interface-exp-id-vec (unspecified)) (set! cQ30e8@set-module-interface-exp-id-vec! (unspecified)) (set! cQ30ea@module-interface-exp-lab-vec (unspecified)) (set! cQ30ec@set-module-interface-exp-lab-vec! (unspecified)) (set! cQ30ee@dummy (unspecified)) (set! cQ30f0@module-interface-exp-id* (unspecified)) (set! cQ30f2@chi-internal-module (unspecified)) (set! cQ30f4@chi-body* (unspecified)) (set! cQ30f6@expand-transformer (unspecified)) (set! cQ30f8@parse-exports (unspecified)) (set! cQ30fa@parse-library-name (unspecified)) (set! cQ30fc@parse-library (unspecified)) (set! cQ30fe@parse-import-spec* (unspecified)) (set! cQ3100@make-top-rib (unspecified)) (set! cQ3102@make-collector (unspecified)) (set! cQ3104@inv-collector (unspecified)) (set! cQ3106@vis-collector (unspecified)) (set! cQ3108@imp-collector (unspecified)) (set! cQ310a@chi-library-internal (unspecified)) (set! cQ310c@chi-interaction-expr (unspecified)) (set! cQ310e@library-body-expander (unspecified)) (set! cQ3110@core-library-expander (unspecified)) (set! cQ3112@parse-top-level-program (unspecified)) (set! cQ3114@top-level-expander (unspecified)) (set! cQ3116@rp (unspecified)) (set! cQ3120@env? (unspecified)) (set! cQ3122@env-names (unspecified)) (set! cQ3124@set-env-names! (unspecified)) (set! cQ3126@env-labels (unspecified)) (set! cQ3128@set-env-labels! (unspecified)) (set! cQ312a@env-itc (unspecified)) (set! cQ312c@set-env-itc! (unspecified)) (set! cQ312e@dummy (unspecified)) (set! cQ3130@rp (unspecified)) (set! cQ313a@interaction-env? (unspecified)) (set! cQ313c@interaction-env-rib (unspecified)) (set! cQ313e@set-interaction-env-rib! (unspecified)) (set! cQ3140@interaction-env-r (unspecified)) (set! cQ3142@set-interaction-env-r! (unspecified)) (set! cQ3144@interaction-env-locs (unspecified)) (set! cQ3146@set-interaction-env-locs! (unspecified)) (set! cQ3148@dummy (unspecified)) (set! cQ314a@interaction-environment-symbols (unspecified)) (set! cQ314c@environment-bindings (unspecified)) (set! cQ314e@parse-binding (unspecified)) (set! cQ3150@environment? (unspecified)) (set! cQ3152@environment-symbols (unspecified)) (set! cQ3154@environment (unspecified)) (set! cQ3156@null-environment (unspecified)) (set! cQ3158@scheme-report-environment (unspecified)) (set! cQ315a@expand (unspecified)) (set! cQ315c@eval (unspecified)) (set! cQ315e@library-expander (unspecified)) (set! cQ3160@boot-library-expand (unspecified)) (set! cQ3162@rev-map-append (unspecified)) (set! cQ3164@build-exports (unspecified)) (set! cQ3166@make-export-subst (unspecified)) (set! cQ3168@make-export-env/macros (unspecified)) (set! cQ316a@generate-temporaries (unspecified)) (set! cQ316c@free-identifier=? (unspecified)) (set! cQ316e@bound-identifier=? (unspecified)) (set! cQ3170@make-source-condition (unspecified)) (set! cQ3172@extract-position-condition (unspecified)) (set! cQ3174@expression-position (unspecified)) (set! cQ3176@assertion-error (unspecified)) (set! cQ3178@syntax-error (unspecified)) (set! cQ317a@syntax-violation* (unspecified)) (set! cQ317c@syntax-violation (unspecified)) (set! cQ317e@identifier? (unspecified)) (set! cQ3180@datum->syntax (unspecified)) (set! cQ3182@syntax->datum (unspecified)) (set! cQ3184@ungensym-all (unspecified)) (set! cQ3186@compile-r6rs-top-level (unspecified)) (set! cQ3188@pre-compile-r6rs-top-level (unspecified)) (set! cQ318a@interaction-environment (unspecified)) (set! cQ318c@top-level-context (unspecified)) (set! cQ2e10@file-options-macro (lambda (cQ318d@x) (letrec* ((cQ3190@valid-option? (lambda (cQ3199@x) (and (cQ2e95@id? cQ3199@x) (memq (cQ2e97@id->sym cQ3199@x) '(no-fail no-create no-truncate)))))) (let ((cQ3191@t cQ318d@x)) (let ((cQ3193@ls/false (cQ309c@syntax-dispatch cQ3191@t '(_ . each-any)))) (if (and cQ3193@ls/false (apply (lambda (cQ3195@opt*) (for-all cQ3190@valid-option? cQ3195@opt*)) cQ3193@ls/false)) (apply (lambda (cQ3197@opt*) (cQ3052@bless (list 'make-file-options (list 'quote cQ3197@opt*)))) cQ3193@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3191@t))))))) (set! cQ4ae3@cQ2e10@file-options-macro cQ2e10@file-options-macro) (set! cQ2e12@set-cons (lambda (cQ319b@x cQ319c@ls) (if (memq cQ319b@x cQ319c@ls) cQ319c@ls (cons cQ319b@x cQ319c@ls)))) (set! cQ4ae4@cQ2e12@set-cons cQ2e12@set-cons) (set! cQ2e14@set-union (lambda (cQ319f@ls1 cQ31a0@ls2) (if (null? cQ319f@ls1) cQ31a0@ls2 (if (memq (car cQ319f@ls1) cQ31a0@ls2) (cQ2e14@set-union (cdr cQ319f@ls1) cQ31a0@ls2) (cons (car cQ319f@ls1) (cQ2e14@set-union (cdr cQ319f@ls1) cQ31a0@ls2)))))) (set! cQ4ae5@cQ2e14@set-union cQ2e14@set-union) (set! cQ2e19@top-mark* '(top)) (set! cQ4ae6@cQ2e19@top-mark* cQ2e19@top-mark*) (set! cQ2e1b@top-marked? (lambda (cQ31a3@m*) (memq 'top cQ31a3@m*))) (set! cQ4ae7@cQ2e1b@top-marked? cQ2e1b@top-marked?) (set! cQ2e1d@gen-lexical (lambda (cQ31a5@sym) (if (symbol? cQ31a5@sym) (gensym cQ31a5@sym) (if (cQ2e61@stx? cQ31a5@sym) (cQ2e1d@gen-lexical (cQ2e97@id->sym cQ31a5@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" cQ31a5@sym))))) (set! cQ4ae8@cQ2e1d@gen-lexical cQ2e1d@gen-lexical) (set! cQ2e1f@gen-global (lambda (cQ31a7@x) (cQ2e1d@gen-lexical cQ31a7@x))) (set! cQ4ae9@cQ2e1f@gen-global cQ2e1f@gen-global) (set! cQ2e21@gen-label (lambda (cQ31a9@_) (gensym))) (set! cQ4aea@cQ2e21@gen-label cQ2e21@gen-label) (set! cQ2e23@gen-top-level-label (lambda (cQ31ab@id cQ31ac@rib) (letrec* ((cQ31b0@find (lambda (cQ31bb@sym cQ31bc@mark* cQ31bd@sym* cQ31be@mark** cQ31bf@label*) (and (pair? cQ31bd@sym*) (if (and (eq? cQ31bb@sym (car cQ31bd@sym*)) (same-marks? cQ31bc@mark* (car cQ31be@mark**))) (car cQ31bf@label*) (cQ31b0@find cQ31bb@sym cQ31bc@mark* (cdr cQ31bd@sym*) (cdr cQ31be@mark**) (cdr cQ31bf@label*))))))) (let ((cQ31b1@sym (cQ2e97@id->sym cQ31ab@id)) (cQ31b2@mark* (cQ2e67@stx-mark* cQ31ab@id))) (let ((cQ31b5@sym* (cQ2e33@rib-sym* cQ31ac@rib))) (let ((cQ31b7@t (and (memq cQ31b1@sym (cQ2e33@rib-sym* cQ31ac@rib)) (cQ31b0@find cQ31b1@sym cQ31b2@mark* cQ31b5@sym* (cQ2e37@rib-mark** cQ31ac@rib) (cQ2e3b@rib-label* cQ31ac@rib))))) (if cQ31b7@t ((lambda (cQ31b9@label) (if (cQ2caf@cQ2aec@imported-label->binding cQ31b9@label) (gensym) cQ31b9@label)) cQ31b7@t) (gensym)))))))) (set! cQ4aeb@cQ2e23@gen-top-level-label cQ2e23@gen-top-level-label) (set! cQ2e25@gen-define-label+loc (lambda (cQ31c5@id cQ31c6@rib) (let ((cQ31c9@t (cQ318c@top-level-context))) (if cQ31c9@t ((lambda (cQ31cb@env) (let ((cQ31cd@label (cQ2e23@gen-top-level-label cQ31c5@id cQ31c6@rib)) (cQ31ce@locs (cQ3144@interaction-env-locs cQ31cb@env))) (values cQ31cd@label (let ((cQ31d1@t (assq cQ31cd@label cQ31ce@locs))) (if cQ31d1@t (cdr cQ31d1@t) (let ((cQ31d3@loc (cQ2e1d@gen-lexical cQ31c5@id))) (begin (cQ3146@set-interaction-env-locs! cQ31cb@env (cons (cons cQ31cd@label cQ31d3@loc) cQ31ce@locs)) cQ31d3@loc))))))) cQ31c9@t) (values (gensym) (cQ2e1d@gen-lexical cQ31c5@id)))))) (set! cQ4aec@cQ2e25@gen-define-label+loc cQ2e25@gen-define-label+loc) (set! cQ2e27@gen-define-label (lambda (cQ31d5@id cQ31d6@rib) (if (cQ318c@top-level-context) (cQ2e23@gen-top-level-label cQ31d5@id cQ31d6@rib) (gensym)))) (set! cQ4aed@cQ2e27@gen-define-label cQ2e27@gen-define-label) (set! cQ2e31@rib? (lambda (cQ31d9@x) (and (simple-struct? cQ31d9@x) (eq? (simple-struct-name cQ31d9@x) 'rib)))) (set! cQ4aee@cQ2e31@rib? cQ2e31@rib?) (set! cQ2e33@rib-sym* (lambda (cQ31db@x) (simple-struct-ref cQ31db@x '0))) (set! cQ4aef@cQ2e33@rib-sym* cQ2e33@rib-sym*) (set! cQ2e35@set-rib-sym*! (lambda (cQ31dd@x cQ31de@val) (simple-struct-set! cQ31dd@x '0 cQ31de@val))) (set! cQ4af0@cQ2e35@set-rib-sym*! cQ2e35@set-rib-sym*!) (set! cQ2e37@rib-mark** (lambda (cQ31e1@x) (simple-struct-ref cQ31e1@x '1))) (set! cQ4af1@cQ2e37@rib-mark** cQ2e37@rib-mark**) (set! cQ2e39@set-rib-mark**! (lambda (cQ31e3@x cQ31e4@val) (simple-struct-set! cQ31e3@x '1 cQ31e4@val))) (set! cQ4af2@cQ2e39@set-rib-mark**! cQ2e39@set-rib-mark**!) (set! cQ2e3b@rib-label* (lambda (cQ31e7@x) (simple-struct-ref cQ31e7@x '2))) (set! cQ4af3@cQ2e3b@rib-label* cQ2e3b@rib-label*) (set! cQ2e3d@set-rib-label*! (lambda (cQ31e9@x cQ31ea@val) (simple-struct-set! cQ31e9@x '2 cQ31ea@val))) (set! cQ4af4@cQ2e3d@set-rib-label*! cQ2e3d@set-rib-label*!) (set! cQ2e3f@rib-sealed/freq (lambda (cQ31ed@x) (simple-struct-ref cQ31ed@x '3))) (set! cQ4af5@cQ2e3f@rib-sealed/freq cQ2e3f@rib-sealed/freq) (set! cQ2e41@set-rib-sealed/freq! (lambda (cQ31ef@x cQ31f0@val) (simple-struct-set! cQ31ef@x '3 cQ31f0@val))) (set! cQ4af6@cQ2e41@set-rib-sealed/freq! cQ2e41@set-rib-sealed/freq!) (set! cQ2e43@rib-cache (lambda (cQ31f3@x) (simple-struct-ref cQ31f3@x '4))) (set! cQ4af7@cQ2e43@rib-cache cQ2e43@rib-cache) (set! cQ2e45@set-rib-cache! (lambda (cQ31f5@x cQ31f6@val) (simple-struct-set! cQ31f5@x '4 cQ31f6@val))) (set! cQ4af8@cQ2e45@set-rib-cache! cQ2e45@set-rib-cache!) (set! cQ2e47@dummy '3) (set! cQ4af9@cQ2e47@dummy cQ2e47@dummy) (set! cQ2e49@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! cQ4afa@cQ2e49@make-empty-rib cQ2e49@make-empty-rib) (set! cQ2e4b@extend-rib! (lambda (cQ31f9@rib cQ31fa@id cQ31fb@label) (letrec* ((cQ3200@find (lambda (cQ320d@sym cQ320e@mark* cQ320f@sym* cQ3210@mark** cQ3211@label*) (and (pair? cQ320f@sym*) (if (and (eq? cQ320d@sym (car cQ320f@sym*)) (same-marks? cQ320e@mark* (car cQ3210@mark**))) cQ3211@label* (cQ3200@find cQ320d@sym cQ320e@mark* (cdr cQ320f@sym*) (cdr cQ3210@mark**) (cdr cQ3211@label*))))))) (begin (if (cQ2e3f@rib-sealed/freq cQ31f9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" cQ31f9@rib) (void)) (let ((cQ3201@sym (cQ2e97@id->sym cQ31fa@id)) (cQ3202@mark* (cQ2e67@stx-mark* cQ31fa@id))) (let ((cQ3205@sym* (cQ2e33@rib-sym* cQ31f9@rib))) (let ((cQ3207@t (and (memq cQ3201@sym (cQ2e33@rib-sym* cQ31f9@rib)) (cQ3200@find cQ3201@sym cQ3202@mark* cQ3205@sym* (cQ2e37@rib-mark** cQ31f9@rib) (cQ2e3b@rib-label* cQ31f9@rib))))) (if cQ3207@t ((lambda (cQ3209@p) (if (not (eq? cQ31fb@label (car cQ3209@p))) (if (cQ318c@top-level-context) (set-car! cQ3209@p cQ31fb@label) (cQ317c@syntax-violation '#f '"multiple definitions of identifier" cQ31fa@id)) (void))) cQ3207@t) (begin (if (cQ2e43@rib-cache cQ31f9@rib) (hashtable-update! (cQ2e43@rib-cache cQ31f9@rib) cQ3201@sym (lambda (cQ320b@e) (cons (cons cQ3202@mark* cQ31fb@label) cQ320b@e)) '()) (void)) (cQ2e35@set-rib-sym*! cQ31f9@rib (cons cQ3201@sym cQ3205@sym*)) (cQ2e39@set-rib-mark**! cQ31f9@rib (cons cQ3202@mark* (cQ2e37@rib-mark** cQ31f9@rib))) (cQ2e3d@set-rib-label*! cQ31f9@rib (cons cQ31fb@label (cQ2e3b@rib-label* cQ31f9@rib)))))))))))) (set! cQ4afb@cQ2e4b@extend-rib! cQ2e4b@extend-rib!) (set! cQ2e4d@extend-rib/nc! (lambda (cQ3217@rib cQ3218@id cQ3219@label) (let ((cQ321d@sym (cQ2e97@id->sym cQ3218@id)) (cQ321e@mark* (cQ2e67@stx-mark* cQ3218@id))) (let ((cQ3221@sym* (cQ2e33@rib-sym* cQ3217@rib))) (begin (if (cQ2e43@rib-cache cQ3217@rib) (hashtable-update! (cQ2e43@rib-cache cQ3217@rib) cQ321d@sym (lambda (cQ3223@e) (cons (cons cQ321e@mark* cQ3219@label) cQ3223@e)) '()) (void)) (cQ2e35@set-rib-sym*! cQ3217@rib (cons cQ321d@sym cQ3221@sym*)) (cQ2e39@set-rib-mark**! cQ3217@rib (cons cQ321e@mark* (cQ2e37@rib-mark** cQ3217@rib))) (cQ2e3d@set-rib-label*! cQ3217@rib (cons cQ3219@label (cQ2e3b@rib-label* cQ3217@rib)))))))) (set! cQ4afc@cQ2e4d@extend-rib/nc! cQ2e4d@extend-rib/nc!) (set! cQ2e4f@make-rib-map (lambda (cQ3225@sym*) (let ((cQ3227@ht (make-eq-hashtable))) (let cQ322d@f ((cQ3229@i '0) (cQ322a@sym* cQ3225@sym*)) (if (null? cQ322a@sym*) cQ3227@ht (begin (hashtable-update! cQ3227@ht (car cQ322a@sym*) (lambda (cQ322f@x) (cons cQ3229@i cQ322f@x)) '()) (cQ322d@f (+ cQ3229@i '1) (cdr cQ322a@sym*)))))))) (set! cQ4afd@cQ2e4f@make-rib-map cQ2e4f@make-rib-map) (set! cQ2e51@seal-rib! (lambda (cQ3231@rib) (let ((cQ3233@sym* (cQ2e33@rib-sym* cQ3231@rib))) (if (not (null? cQ3233@sym*)) (begin (cQ2e35@set-rib-sym*! cQ3231@rib (list->vector cQ3233@sym*)) (cQ2e39@set-rib-mark**! cQ3231@rib (list->vector (cQ2e37@rib-mark** cQ3231@rib))) (cQ2e3d@set-rib-label*! cQ3231@rib (list->vector (cQ2e3b@rib-label* cQ3231@rib))) (cQ2e41@set-rib-sealed/freq! cQ3231@rib (cQ2e4f@make-rib-map cQ3233@sym*))) (void))))) (set! cQ4afe@cQ2e51@seal-rib! cQ2e51@seal-rib!) (set! cQ2e53@unseal-rib! (lambda (cQ3235@rib) (if (cQ2e3f@rib-sealed/freq cQ3235@rib) (begin (cQ2e41@set-rib-sealed/freq! cQ3235@rib '#f) (cQ2e35@set-rib-sym*! cQ3235@rib (vector->list (cQ2e33@rib-sym* cQ3235@rib))) (cQ2e39@set-rib-mark**! cQ3235@rib (vector->list (cQ2e37@rib-mark** cQ3235@rib))) (cQ2e3d@set-rib-label*! cQ3235@rib (vector->list (cQ2e3b@rib-label* cQ3235@rib)))) (void)))) (set! cQ4aff@cQ2e53@unseal-rib! cQ2e53@unseal-rib!) (set! cQ2e55@make-full-rib (lambda (cQ3237@id* cQ3238@label*) (let ((cQ323b@r (make-simple-struct 'rib '6 (list (map cQ2e97@id->sym cQ3237@id*) (map cQ2e67@stx-mark* cQ3237@id*) cQ3238@label* '#f '#f)))) (begin (cQ2e51@seal-rib! cQ323b@r) cQ323b@r)))) (set! cQ4b00@cQ2e55@make-full-rib cQ2e55@make-full-rib) (set! cQ2e57@rp (cQ29d1@cQ28ac@make-record-printer 'stx (lambda (cQ323d@x cQ323e@p cQ323f@wr) (begin (display '"#<syntax " cQ323e@p) (write (cQ2ea9@stx->datum cQ323d@x) cQ323e@p) (let ((cQ3243@expr (cQ2e63@stx-expr cQ323d@x))) (if (cQ29c8@cQ289a@annotation? cQ3243@expr) (let ((cQ3245@src (cQ29c9@cQ289c@annotation-source cQ3243@expr))) (if (pair? cQ3245@src) (begin (display '" [" cQ323e@p) (display (cdr cQ3245@src) cQ323e@p) (display '" of " cQ323e@p) (display (car cQ3245@src) cQ323e@p) (display '"]" cQ323e@p)) (void))) (void))) (display '">" cQ323e@p))))) (set! cQ4b01@cQ2e57@rp cQ2e57@rp) (set! cQ2e61@stx? (lambda (cQ3247@x) (and (simple-struct? cQ3247@x) (eq? (simple-struct-name cQ3247@x) 'stx)))) (set! cQ4b02@cQ2e61@stx? cQ2e61@stx?) (set! cQ2e63@stx-expr (lambda (cQ3249@x) (simple-struct-ref cQ3249@x '0))) (set! cQ4b03@cQ2e63@stx-expr cQ2e63@stx-expr) (set! cQ2e65@set-stx-expr! (lambda (cQ324b@x cQ324c@val) (simple-struct-set! cQ324b@x '0 cQ324c@val))) (set! cQ4b04@cQ2e65@set-stx-expr! cQ2e65@set-stx-expr!) (set! cQ2e67@stx-mark* (lambda (cQ324f@x) (simple-struct-ref cQ324f@x '1))) (set! cQ4b05@cQ2e67@stx-mark* cQ2e67@stx-mark*) (set! cQ2e69@set-stx-mark*! (lambda (cQ3251@x cQ3252@val) (simple-struct-set! cQ3251@x '1 cQ3252@val))) (set! cQ4b06@cQ2e69@set-stx-mark*! cQ2e69@set-stx-mark*!) (set! cQ2e6b@stx-subst* (lambda (cQ3255@x) (simple-struct-ref cQ3255@x '2))) (set! cQ4b07@cQ2e6b@stx-subst* cQ2e6b@stx-subst*) (set! cQ2e6d@set-stx-subst*! (lambda (cQ3257@x cQ3258@val) (simple-struct-set! cQ3257@x '2 cQ3258@val))) (set! cQ4b08@cQ2e6d@set-stx-subst*! cQ2e6d@set-stx-subst*!) (set! cQ2e6f@stx-ae* (lambda (cQ325b@x) (simple-struct-ref cQ325b@x '3))) (set! cQ4b09@cQ2e6f@stx-ae* cQ2e6f@stx-ae*) (set! cQ2e71@set-stx-ae*! (lambda (cQ325d@x cQ325e@val) (simple-struct-set! cQ325d@x '3 cQ325e@val))) (set! cQ4b0a@cQ2e71@set-stx-ae*! cQ2e71@set-stx-ae*!) (set! cQ2e73@dummy '3) (set! cQ4b0b@cQ2e73@dummy cQ2e73@dummy) (set! cQ2e75@datum->stx (lambda (cQ3261@id cQ3262@datum) (make-simple-struct 'stx '5 (list cQ3262@datum (cQ2e67@stx-mark* cQ3261@id) (cQ2e6b@stx-subst* cQ3261@id) (cQ2e6f@stx-ae* cQ3261@id))))) (set! cQ4b0c@cQ2e75@datum->stx cQ2e75@datum->stx) (set! cQ2e77@gen-mark (lambda () (string '#\m))) (set! cQ4b0d@cQ2e77@gen-mark cQ2e77@gen-mark) (set! cQ2e79@anti-mark '#f) (set! cQ4b0e@cQ2e79@anti-mark cQ2e79@anti-mark) (set! cQ2e7b@anti-mark? not) (set! cQ4b0f@cQ2e7b@anti-mark? cQ2e7b@anti-mark?) (set! cQ2e7d@mkstx (lambda (cQ3265@e cQ3266@m* cQ3267@s* cQ3268@ae*) (if (and (cQ2e61@stx? cQ3265@e) (not (cQ2e1b@top-marked? cQ3266@m*))) (call-with-values (lambda () (join-wraps cQ3266@m* cQ3267@s* cQ3268@ae* cQ3265@e)) (lambda (cQ3273@cQ326e cQ3274@cQ3270 cQ3275@cQ3272) (let ((cQ3279@ae* cQ3275@cQ3272) (cQ327a@s* cQ3274@cQ3270) (cQ327b@m* cQ3273@cQ326e)) (make-simple-struct 'stx '5 (list (cQ2e63@stx-expr cQ3265@e) cQ327b@m* cQ327a@s* cQ3279@ae*))))) (make-simple-struct 'stx '5 (list cQ3265@e cQ3266@m* cQ3267@s* cQ3268@ae*))))) (set! cQ4b10@cQ2e7d@mkstx cQ2e7d@mkstx) (set! cQ2e7f@add-mark (lambda (cQ327f@m cQ3280@e cQ3281@ae) (cQ2e7d@mkstx cQ3280@e (list cQ327f@m) '(shift) (list cQ3281@ae)))) (set! cQ4b11@cQ2e7f@add-mark cQ2e7f@add-mark) (set! cQ2e81@add-subst (lambda (cQ3285@subst cQ3286@e) (cQ2e7d@mkstx cQ3286@e '() (list cQ3285@subst) '()))) (set! cQ4b12@cQ2e81@add-subst cQ2e81@add-subst) (set! cQ2e83@syntax-kind? (lambda (cQ3289@x cQ328a@p?) (if (cQ2e61@stx? cQ3289@x) (cQ2e83@syntax-kind? (cQ2e63@stx-expr cQ3289@x) cQ328a@p?) (if (cQ29c8@cQ289a@annotation? cQ3289@x) (cQ2e83@syntax-kind? (cQ29ca@cQ289e@annotation-expression cQ3289@x) cQ328a@p?) (cQ328a@p? cQ3289@x))))) (set! cQ4b13@cQ2e83@syntax-kind? cQ2e83@syntax-kind?) (set! cQ2e85@syntax-vector->list (lambda (cQ328d@x) (if (cQ2e61@stx? cQ328d@x) (let ((cQ328f@ls (cQ2e85@syntax-vector->list (cQ2e63@stx-expr cQ328d@x))) (cQ3290@m* (cQ2e67@stx-mark* cQ328d@x)) (cQ3291@s* (cQ2e6b@stx-subst* cQ328d@x)) (cQ3292@ae* (cQ2e6f@stx-ae* cQ328d@x))) (map (lambda (cQ3297@x) (cQ2e7d@mkstx cQ3297@x cQ3290@m* cQ3291@s* cQ3292@ae*)) cQ328f@ls)) (if (cQ29c8@cQ289a@annotation? cQ328d@x) (cQ2e85@syntax-vector->list (cQ29ca@cQ289e@annotation-expression cQ328d@x)) (if (vector? cQ328d@x) (vector->list cQ328d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" cQ328d@x)))))) (set! cQ4b14@cQ2e85@syntax-vector->list cQ2e85@syntax-vector->list) (set! cQ2e87@syntax-pair? (lambda (cQ3299@x) (cQ2e83@syntax-kind? cQ3299@x pair?))) (set! cQ4b15@cQ2e87@syntax-pair? cQ2e87@syntax-pair?) (set! cQ2e89@syntax-vector? (lambda (cQ329b@x) (cQ2e83@syntax-kind? cQ329b@x vector?))) (set! cQ4b16@cQ2e89@syntax-vector? cQ2e89@syntax-vector?) (set! cQ2e8b@syntax-null? (lambda (cQ329d@x) (cQ2e83@syntax-kind? cQ329d@x null?))) (set! cQ4b17@cQ2e8b@syntax-null? cQ2e8b@syntax-null?) (set! cQ2e8d@syntax-list? (lambda (cQ329f@x) (or (cQ2e8b@syntax-null? cQ329f@x) (and (cQ2e87@syntax-pair? cQ329f@x) (cQ2e8d@syntax-list? (cQ2e91@syntax-cdr cQ329f@x)))))) (set! cQ4b18@cQ2e8d@syntax-list? cQ2e8d@syntax-list?) (set! cQ2e8f@syntax-car (lambda (cQ32a1@x) (if (cQ2e61@stx? cQ32a1@x) (cQ2e7d@mkstx (cQ2e8f@syntax-car (cQ2e63@stx-expr cQ32a1@x)) (cQ2e67@stx-mark* cQ32a1@x) (cQ2e6b@stx-subst* cQ32a1@x) (cQ2e6f@stx-ae* cQ32a1@x)) (if (cQ29c8@cQ289a@annotation? cQ32a1@x) (cQ2e8f@syntax-car (cQ29ca@cQ289e@annotation-expression cQ32a1@x)) (if (pair? cQ32a1@x) (car cQ32a1@x) (assertion-violation 'syntax-car '"BUG: not a pair" cQ32a1@x)))))) (set! cQ4b19@cQ2e8f@syntax-car cQ2e8f@syntax-car) (set! cQ2e91@syntax-cdr (lambda (cQ32a3@x) (if (cQ2e61@stx? cQ32a3@x) (cQ2e7d@mkstx (cQ2e91@syntax-cdr (cQ2e63@stx-expr cQ32a3@x)) (cQ2e67@stx-mark* cQ32a3@x) (cQ2e6b@stx-subst* cQ32a3@x) (cQ2e6f@stx-ae* cQ32a3@x)) (if (cQ29c8@cQ289a@annotation? cQ32a3@x) (cQ2e91@syntax-cdr (cQ29ca@cQ289e@annotation-expression cQ32a3@x)) (if (pair? cQ32a3@x) (cdr cQ32a3@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" cQ32a3@x)))))) (set! cQ4b1a@cQ2e91@syntax-cdr cQ2e91@syntax-cdr) (set! cQ2e93@syntax->list (lambda (cQ32a5@x) (if (cQ2e87@syntax-pair? cQ32a5@x) (cons (cQ2e8f@syntax-car cQ32a5@x) (cQ2e93@syntax->list (cQ2e91@syntax-cdr cQ32a5@x))) (if (cQ2e8b@syntax-null? cQ32a5@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" cQ32a5@x))))) (set! cQ4b1b@cQ2e93@syntax->list cQ2e93@syntax->list) (set! cQ2e95@id? (lambda (cQ32a7@x) (and (cQ2e61@stx? cQ32a7@x) (symbol? (cQ2e63@stx-expr cQ32a7@x))))) (set! cQ4b1c@cQ2e95@id? cQ2e95@id?) (set! cQ2e97@id->sym (lambda (cQ32a9@x) (cQ2e63@stx-expr cQ32a9@x))) (set! cQ4b1d@cQ2e97@id->sym cQ2e97@id->sym) (set! cQ2e99@bound-id=? (lambda (cQ32ab@x cQ32ac@y) (and (eq? (cQ2e97@id->sym cQ32ab@x) (cQ2e97@id->sym cQ32ac@y)) (same-marks? (cQ2e67@stx-mark* cQ32ab@x) (cQ2e67@stx-mark* cQ32ac@y))))) (set! cQ4b1e@cQ2e99@bound-id=? cQ2e99@bound-id=?) (set! cQ2e9b@free-id=? (lambda (cQ32af@i cQ32b0@j) (let ((cQ32b3@t0 (id->real-label cQ32af@i)) (cQ32b4@t1 (id->real-label cQ32b0@j))) (if (or cQ32b3@t0 cQ32b4@t1) (eq? cQ32b3@t0 cQ32b4@t1) (eq? (cQ2e97@id->sym cQ32af@i) (cQ2e97@id->sym cQ32b0@j)))))) (set! cQ4b1f@cQ2e9b@free-id=? cQ2e9b@free-id=?) (set! cQ2e9d@valid-bound-ids? (lambda (cQ32b7@id*) (and (for-all cQ2e95@id? cQ32b7@id*) (cQ2e9f@distinct-bound-ids? cQ32b7@id*)))) (set! cQ4b20@cQ2e9d@valid-bound-ids? cQ2e9d@valid-bound-ids?) (set! cQ2e9f@distinct-bound-ids? (lambda (cQ32b9@id*) (or (null? cQ32b9@id*) (and (not (cQ2ea1@bound-id-member? (car cQ32b9@id*) (cdr cQ32b9@id*))) (cQ2e9f@distinct-bound-ids? (cdr cQ32b9@id*)))))) (set! cQ4b21@cQ2e9f@distinct-bound-ids? cQ2e9f@distinct-bound-ids?) (set! cQ2ea1@bound-id-member? (lambda (cQ32bb@id cQ32bc@id*) (and (pair? cQ32bc@id*) (or (cQ2e99@bound-id=? cQ32bb@id (car cQ32bc@id*)) (cQ2ea1@bound-id-member? cQ32bb@id (cdr cQ32bc@id*)))))) (set! cQ4b22@cQ2ea1@bound-id-member? cQ2ea1@bound-id-member?) (set! cQ2ea3@self-evaluating? (lambda (cQ32bf@x) (or (number? cQ32bf@x) (string? cQ32bf@x) (char? cQ32bf@x) (boolean? cQ32bf@x) (regexp? cQ32bf@x) (bytevector? cQ32bf@x)))) (set! cQ4b23@cQ2ea3@self-evaluating? cQ2ea3@self-evaluating?) (set! cQ2ea5@strip-annotations (lambda (cQ32c1@x) (if (pair? cQ32c1@x) (cons (cQ2ea5@strip-annotations (car cQ32c1@x)) (cQ2ea5@strip-annotations (cdr cQ32c1@x))) (if (vector? cQ32c1@x) (vector-map cQ2ea5@strip-annotations cQ32c1@x) (if (cQ29c8@cQ289a@annotation? cQ32c1@x) (cQ29c7@cQ2898@annotation-stripped cQ32c1@x) cQ32c1@x))))) (set! cQ4b24@cQ2ea5@strip-annotations cQ2ea5@strip-annotations) (set! cQ2ea7@strip (lambda (cQ32c3@x cQ32c4@m*) (if (cQ2e1b@top-marked? cQ32c4@m*) (if (or (cQ29c8@cQ289a@annotation? cQ32c3@x) (and (pair? cQ32c3@x) (cQ29c8@cQ289a@annotation? (car cQ32c3@x))) (and (vector? cQ32c3@x) (> (vector-length cQ32c3@x) '0) (cQ29c8@cQ289a@annotation? (vector-ref cQ32c3@x '0)))) (cQ2ea5@strip-annotations cQ32c3@x) cQ32c3@x) (let cQ32c9@f ((cQ32c7@x cQ32c3@x)) (if (cQ2e61@stx? cQ32c7@x) (begin (if (pair? (cQ2e63@stx-expr cQ32c7@x)) (begin (set-source-info! (cQ2e63@stx-expr cQ32c7@x) '#f) (set-source-info! (cdr (cQ2e63@stx-expr cQ32c7@x)) '#f) (set-source-info! (car (cQ2e63@stx-expr cQ32c7@x)) '#f)) (void)) (cQ2ea7@strip (cQ2e63@stx-expr cQ32c7@x) (cQ2e67@stx-mark* cQ32c7@x))) (if (cQ29c8@cQ289a@annotation? cQ32c7@x) (cQ29c7@cQ2898@annotation-stripped cQ32c7@x) (if (pair? cQ32c7@x) (let ((cQ32cb@a (cQ32c9@f (car cQ32c7@x))) (cQ32cc@d (cQ32c9@f (cdr cQ32c7@x)))) (if (and (eq? cQ32cb@a (car cQ32c7@x)) (eq? cQ32cc@d (cdr cQ32c7@x))) cQ32c7@x (cons cQ32cb@a cQ32cc@d))) (if (vector? cQ32c7@x) (let ((cQ32cf@old (vector->list cQ32c7@x))) (let ((cQ32d1@new (map cQ32c9@f cQ32cf@old))) (if (for-all eq? cQ32cf@old cQ32d1@new) cQ32c7@x (list->vector cQ32d1@new)))) cQ32c7@x)))))))) (set! cQ4b25@cQ2ea7@strip cQ2ea7@strip) (set! cQ2ea9@stx->datum (lambda (cQ32d3@x) (cQ2ea7@strip cQ32d3@x '()))) (set! cQ4b26@cQ2ea9@stx->datum cQ2ea9@stx->datum) (set! cQ2eab@id->label (lambda (cQ32d5@id) (or (id->real-label cQ32d5@id) (let ((cQ32d7@t (cQ318c@top-level-context))) (if cQ32d7@t ((lambda (cQ32d9@env) (let ((cQ32db@rib (cQ313c@interaction-env-rib cQ32d9@env))) (call-with-values (lambda () (cQ2e25@gen-define-label+loc cQ32d5@id cQ32db@rib)) (lambda (cQ32e1@cQ32de cQ32e2@cQ32e0) (let ((cQ32e5@loc_ cQ32e2@cQ32e0) (cQ32e6@lab cQ32e1@cQ32de)) (begin (cQ2e4b@extend-rib! cQ32db@rib cQ32d5@id cQ32e6@lab) cQ32e6@lab)))))) cQ32d7@t) '#f))))) (set! cQ4b27@cQ2eab@id->label cQ2eab@id->label) (set! cQ2ead@label->binding (lambda (cQ32e9@x cQ32ea@r) (let ((cQ32ed@t (cQ2caf@cQ2aec@imported-label->binding cQ32e9@x))) (if cQ32ed@t ((lambda (cQ32ef@b) (if (and (pair? cQ32ef@b) (eq? (car cQ32ef@b) '$core-rtd)) (cons '$rtd (map cQ3052@bless (cdr cQ32ef@b))) (if (and (pair? cQ32ef@b) (eq? (car cQ32ef@b) 'global-rtd)) (let ((cQ32f1@lib (cadr cQ32ef@b)) (cQ32f2@loc (cddr cQ32ef@b))) (cons '$rtd (symbol-value cQ32f2@loc))) cQ32ef@b))) cQ32ed@t) (let ((cQ32f5@t (assq cQ32e9@x cQ32ea@r))) (if cQ32f5@t (cdr cQ32f5@t) (let ((cQ32f7@t (cQ318c@top-level-context))) (if cQ32f7@t ((lambda (cQ32f9@env) (let ((cQ32fb@t (assq cQ32e9@x (cQ3144@interaction-env-locs cQ32f9@env)))) (if cQ32fb@t ((lambda (cQ32fd@p) (cons* 'lexical (cdr cQ32fd@p) '#f)) cQ32fb@t) '(displaced-lexical . #f)))) cQ32f7@t) '(displaced-lexical . #f))))))))) (set! cQ4b28@cQ2ead@label->binding cQ2ead@label->binding) (set! cQ2eaf@make-binding cons) (set! cQ4b29@cQ2eaf@make-binding cQ2eaf@make-binding) (set! cQ2eb1@binding-type car) (set! cQ4b2a@cQ2eb1@binding-type cQ2eb1@binding-type) (set! cQ2eb3@binding-value cdr) (set! cQ4b2b@cQ2eb3@binding-value cQ2eb3@binding-value) (set! cQ2eb5@raise-unbound-error (lambda (cQ32ff@id) (cQ317a@syntax-violation* '#f '"unbound identifier" cQ32ff@id (make-undefined-violation)))) (set! cQ4b2c@cQ2eb5@raise-unbound-error cQ2eb5@raise-unbound-error) (set! cQ2eb7@syntax-type (lambda (cQ3301@e cQ3302@r) (if (cQ2e95@id? cQ3301@e) (let ((cQ3305@id cQ3301@e)) (let ((cQ3307@label (cQ2eab@id->label cQ3305@id))) (let ((cQ3309@b (cQ2ead@label->binding cQ3307@label cQ3302@r))) (let ((cQ330b@type (cQ2eb1@binding-type cQ3309@b))) (begin (if (not cQ3307@label) (cQ2eb5@raise-unbound-error cQ3305@id) (void)) (let ((cQ330d@t cQ330b@type)) (if (memv cQ330d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values cQ330b@type (cQ2eb3@binding-value cQ3309@b) cQ3305@id) (values 'other '#f '#f)))))))) (if (cQ2e87@syntax-pair? cQ3301@e) (let ((cQ330f@id (cQ2e8f@syntax-car cQ3301@e))) (if (cQ2e95@id? cQ330f@id) (let ((cQ3311@label (cQ2eab@id->label cQ330f@id))) (let ((cQ3313@b (cQ2ead@label->binding cQ3311@label cQ3302@r))) (let ((cQ3315@type (cQ2eb1@binding-type cQ3313@b))) (begin (if (not cQ3311@label) (cQ2eb5@raise-unbound-error cQ330f@id) (void)) (let ((cQ3317@t cQ3315@type)) (if (memv cQ3317@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values cQ3315@type (cQ2eb3@binding-value cQ3313@b) cQ330f@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((cQ3319@d (cQ2ea9@stx->datum cQ3301@e))) (if (cQ2ea3@self-evaluating? cQ3319@d) (values 'constant cQ3319@d '#f) (values 'other '#f '#f))))))) (set! cQ4b2d@cQ2eb7@syntax-type cQ2eb7@syntax-type) (set! cQ2ec5@sanitize-binding (lambda (cQ331b@x cQ331c@src) (if (procedure? cQ331b@x) (cons* 'local-macro cQ331b@x cQ331c@src) (if (and (pair? cQ331b@x) (eq? (car cQ331b@x) 'macro!) (procedure? (cdr cQ331b@x))) (cons* 'local-macro! (cdr cQ331b@x) cQ331c@src) (if (and (pair? cQ331b@x) (eq? (car cQ331b@x) '$rtd)) cQ331b@x (assertion-violation 'expand '"invalid transformer" cQ331b@x)))))) (set! cQ4b2e@cQ2ec5@sanitize-binding cQ2ec5@sanitize-binding) (set! cQ2ec7@make-variable-transformer (lambda (cQ331f@x) (if (procedure? cQ331f@x) (cons 'macro! cQ331f@x) (assertion-violation 'make-variable-transformer '"not a procedure" cQ331f@x)))) (set! cQ4b2f@cQ2ec7@make-variable-transformer cQ2ec7@make-variable-transformer) (set! cQ2ec9@variable-transformer? (lambda (cQ3321@x) (and (pair? cQ3321@x) (eq? (car cQ3321@x) 'macro!) (procedure? (cdr cQ3321@x))))) (set! cQ4b30@cQ2ec9@variable-transformer? cQ2ec9@variable-transformer?) (set! cQ2ecb@variable-transformer-procedure (lambda (cQ3323@x) (if (cQ2ec9@variable-transformer? cQ3323@x) (cdr cQ3323@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" cQ3323@x)))) (set! cQ4b31@cQ2ecb@variable-transformer-procedure cQ2ecb@variable-transformer-procedure) (set! cQ2ecd@make-eval-transformer (lambda (cQ3325@x) (cQ2ec5@sanitize-binding (eval-core (cQ2a2a@cQ29e2@expanded->core cQ3325@x)) cQ3325@x))) (set! cQ4b32@cQ2ecd@make-eval-transformer cQ2ecd@make-eval-transformer) (set! cQ301e@parse-define (lambda (cQ3327@x) (let ((cQ3329@t cQ3327@x)) (let ((cQ332b@ls/false (cQ309c@syntax-dispatch cQ3329@t '(_ (any . any) any . each-any)))) (if (and cQ332b@ls/false (apply (lambda (cQ332d@id cQ332e@fmls cQ332f@b cQ3330@b*) (cQ2e95@id? cQ332d@id)) cQ332b@ls/false)) (apply (lambda (cQ3335@id cQ3336@fmls cQ3337@b cQ3338@b*) (begin (cQ30c2@verify-formals cQ3336@fmls cQ3327@x) (values cQ3335@id (cons 'defun (cons cQ3336@fmls (cons cQ3337@b cQ3338@b*)))))) cQ332b@ls/false) (let ((cQ333d@t cQ3329@t)) (let ((cQ333f@ls/false (cQ309c@syntax-dispatch cQ333d@t '(_ any any)))) (if (and cQ333f@ls/false (apply (lambda (cQ3341@id cQ3342@val) (cQ2e95@id? cQ3341@id)) cQ333f@ls/false)) (apply (lambda (cQ3345@id cQ3346@val) (values cQ3345@id (cons 'expr cQ3346@val))) cQ333f@ls/false) (let ((cQ3349@t cQ333d@t)) (let ((cQ334b@ls/false (cQ309c@syntax-dispatch cQ3349@t '(_ any)))) (if (and cQ334b@ls/false (apply (lambda (cQ334d@id) (cQ2e95@id? cQ334d@id)) cQ334b@ls/false)) (apply (lambda (cQ334f@id) (values cQ334f@id (cons 'expr (cQ3052@bless '(void))))) cQ334b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3349@t)))))))))))) (set! cQ4b33@cQ301e@parse-define cQ301e@parse-define) (set! cQ3020@parse-define-syntax (lambda (cQ3351@x) (let ((cQ3353@t cQ3351@x)) (let ((cQ3355@ls/false (cQ309c@syntax-dispatch cQ3353@t '(_ any any)))) (if (and cQ3355@ls/false (apply (lambda (cQ3357@id cQ3358@val) (cQ2e95@id? cQ3357@id)) cQ3355@ls/false)) (apply (lambda (cQ335b@id cQ335c@val) (values cQ335b@id cQ335c@val)) cQ3355@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3353@t)))))) (set! cQ4b34@cQ3020@parse-define-syntax cQ3020@parse-define-syntax) (set! cQ3022@scheme-stx-hashtable (make-eq-hashtable)) (set! cQ4b35@cQ3022@scheme-stx-hashtable cQ3022@scheme-stx-hashtable) (set! cQ3024@scheme-stx (lambda (cQ335f@sym) (or (hashtable-ref cQ3022@scheme-stx-hashtable cQ335f@sym '#f) (let ((cQ3361@subst (cQ2c8b@cQ2aa4@library-subst (cQ2ca9@cQ2ae0@find-library-by-name '(psyntax system $all))))) (let ((cQ3363@stx (make-simple-struct 'stx '5 (list cQ335f@sym cQ2e19@top-mark* '() '())))) (let ((cQ3365@stx (let ((cQ3367@t (assq cQ335f@sym cQ3361@subst))) (if cQ3367@t ((lambda (cQ3369@x) (let ((cQ336b@name (car cQ3369@x)) (cQ336c@label (cdr cQ3369@x))) (cQ2e81@add-subst (make-simple-struct 'rib '6 (list (list cQ336b@name) (list cQ2e19@top-mark*) (list cQ336c@label) '#f '#f)) cQ3363@stx))) cQ3367@t) cQ3363@stx)))) (begin (hashtable-set! cQ3022@scheme-stx-hashtable cQ335f@sym cQ3365@stx) cQ3365@stx))))))) (set! cQ4b36@cQ3024@scheme-stx cQ3024@scheme-stx) (set! cQ3026@lexical-var car) (set! cQ4b37@cQ3026@lexical-var cQ3026@lexical-var) (set! cQ3028@lexical-mutable? cdr) (set! cQ4b38@cQ3028@lexical-mutable? cQ3028@lexical-mutable?) (set! cQ302a@set-lexical-mutable! set-cdr!) (set! cQ4b39@cQ302a@set-lexical-mutable! cQ302a@set-lexical-mutable!) (set! cQ302c@add-lexical (lambda (cQ336f@lab cQ3370@lex cQ3371@r) (cons (cons* cQ336f@lab 'lexical cQ3370@lex '#f) cQ3371@r))) (set! cQ4b3a@cQ302c@add-lexical cQ302c@add-lexical) (set! cQ302e@add-lexicals (lambda (cQ3375@lab* cQ3376@lex* cQ3377@r) (if (null? cQ3375@lab*) cQ3377@r (cQ302e@add-lexicals (cdr cQ3375@lab*) (cdr cQ3376@lex*) (cQ302c@add-lexical (car cQ3375@lab*) (car cQ3376@lex*) cQ3377@r))))) (set! cQ4b3b@cQ302e@add-lexicals cQ302e@add-lexicals) (set! cQ3030@letrec-helper (lambda (cQ337b@e cQ337c@r cQ337d@mr cQ337e@build) (let ((cQ3383@t cQ337b@e)) (let ((cQ3385@ls/false (cQ309c@syntax-dispatch cQ3383@t '(_ #(each (any any)) any . each-any)))) (if cQ3385@ls/false (apply (lambda (cQ3387@lhs* cQ3388@rhs* cQ3389@b cQ338a@b*) (if (not (cQ2e9d@valid-bound-ids? cQ3387@lhs*)) (cQ3056@invalid-fmls-error cQ337b@e cQ3387@lhs*) (let ((cQ338f@lex* (map cQ2e1d@gen-lexical cQ3387@lhs*)) (cQ3390@lab* (map cQ2e21@gen-label cQ3387@lhs*))) (let ((cQ3393@rib (cQ2e55@make-full-rib cQ3387@lhs* cQ3390@lab*)) (cQ3394@r (cQ302e@add-lexicals cQ3390@lab* cQ338f@lex* cQ337c@r))) (let ((cQ3397@body (cQ30d4@chi-internal (cQ2e81@add-subst cQ3393@rib (cons cQ3389@b cQ338a@b*)) cQ3394@r cQ337d@mr)) (cQ3398@rhs* (cQ30ba@chi-expr* (map (lambda (cQ339b@x) (cQ2e81@add-subst cQ3393@rib cQ339b@x)) cQ3388@rhs*) cQ3394@r cQ337d@mr))) (cQ337e@build '#f cQ338f@lex* cQ3398@rhs* cQ3397@body)))))) cQ3385@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3383@t)))))) (set! cQ4b3c@cQ3030@letrec-helper cQ3030@letrec-helper) (set! cQ3032@let-transformer (lambda (cQ339d@e cQ339e@r cQ339f@mr) (let ((cQ33a3@t cQ339d@e)) (let ((cQ33a5@ls/false (cQ309c@syntax-dispatch cQ33a3@t '(_ #(each (any any)) any . each-any)))) (if cQ33a5@ls/false (apply (lambda (cQ33a7@lhs* cQ33a8@rhs* cQ33a9@b cQ33aa@b*) (if (not (cQ2e9d@valid-bound-ids? cQ33a7@lhs*)) (cQ3056@invalid-fmls-error cQ339d@e cQ33a7@lhs*) (let ((cQ33af@lex* (map cQ2e1d@gen-lexical cQ33a7@lhs*)) (cQ33b0@lab* (map cQ2e21@gen-label cQ33a7@lhs*)) (cQ33b1@rhs* (cQ30ba@chi-expr* cQ33a8@rhs* cQ339e@r cQ339f@mr))) (let ((cQ33b5@rib (cQ2e55@make-full-rib cQ33a7@lhs* cQ33b0@lab*)) (cQ33b6@r (cQ302e@add-lexicals cQ33b0@lab* cQ33af@lex* cQ339e@r))) (let ((cQ33b9@body (cQ30d4@chi-internal (cQ2e81@add-subst cQ33b5@rib (cons cQ33a9@b cQ33aa@b*)) cQ33b6@r cQ339f@mr))) (cQ2dfd@cQ2d60@build-let '#f cQ33af@lex* cQ33b1@rhs* cQ33b9@body)))))) cQ33a5@ls/false) (let ((cQ33bb@t cQ33a3@t)) (let ((cQ33bd@ls/false (cQ309c@syntax-dispatch cQ33bb@t '(_ any #(each (any any)) any . each-any)))) (if cQ33bd@ls/false (apply (lambda (cQ33bf@loop cQ33c0@lhs* cQ33c1@rhs* cQ33c2@b cQ33c3@b*) (if (not (cQ2e9d@valid-bound-ids? cQ33c0@lhs*)) (cQ3056@invalid-fmls-error cQ339d@e cQ33c0@lhs*) (let ((cQ33c9@lex* (map cQ2e1d@gen-lexical cQ33c0@lhs*)) (cQ33ca@lab* (map cQ2e21@gen-label cQ33c0@lhs*)) (cQ33cb@rhs* (cQ30ba@chi-expr* cQ33c1@rhs* cQ339e@r cQ339f@mr)) (cQ33cc@loop-lex (cQ2e1d@gen-lexical cQ33bf@loop)) (cQ33cd@loop-lab (cQ2e21@gen-label cQ33bf@loop))) (let ((cQ33d3@loop-rib (cQ2e55@make-full-rib (list cQ33bf@loop) (list cQ33cd@loop-lab))) (cQ33d4@rib (cQ2e55@make-full-rib cQ33c0@lhs* cQ33ca@lab*)) (cQ33d5@r (cQ302e@add-lexicals (cons cQ33cd@loop-lab cQ33ca@lab*) (cons cQ33cc@loop-lex cQ33c9@lex*) cQ339e@r))) (let ((cQ33d9@body (cQ30d4@chi-internal (cQ2e81@add-subst cQ33d3@loop-rib (cQ2e81@add-subst cQ33d4@rib (cons cQ33c2@b cQ33c3@b*))) cQ33d5@r cQ339f@mr))) (cQ2dfe@cQ2d62@build-named-let '#f cQ33cc@loop-lex cQ33c9@lex* cQ33cb@rhs* cQ33d9@body)))))) cQ33bd@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ33bb@t))))))))) (set! cQ4b3d@cQ3032@let-transformer cQ3032@let-transformer) (set! cQ3034@letrec-transformer (lambda (cQ33db@e cQ33dc@r cQ33dd@mr) (cQ3030@letrec-helper cQ33db@e cQ33dc@r cQ33dd@mr cQ2dfc@cQ2d5e@build-letrec))) (set! cQ4b3e@cQ3034@letrec-transformer cQ3034@letrec-transformer) (set! cQ3036@letrec*-transformer (lambda (cQ33e1@e cQ33e2@r cQ33e3@mr) (cQ3030@letrec-helper cQ33e1@e cQ33e2@r cQ33e3@mr cQ2dff@cQ2d64@build-letrec*))) (set! cQ4b3f@cQ3036@letrec*-transformer cQ3036@letrec*-transformer) (set! cQ3038@fluid-let-syntax-transformer (lambda (cQ33e7@e cQ33e8@r cQ33e9@mr) (letrec* ((cQ33ee@lookup (lambda (cQ3401@x) (or (cQ2eab@id->label cQ3401@x) (cQ317c@syntax-violation '#f '"unbound identifier" cQ33e7@e cQ3401@x))))) (let ((cQ33ef@t cQ33e7@e)) (let ((cQ33f1@ls/false (cQ309c@syntax-dispatch cQ33ef@t '(_ #(each (any any)) any . each-any)))) (if cQ33f1@ls/false (apply (lambda (cQ33f3@lhs* cQ33f4@rhs* cQ33f5@b cQ33f6@b*) (if (not (cQ2e9d@valid-bound-ids? cQ33f3@lhs*)) (cQ3056@invalid-fmls-error cQ33e7@e cQ33f3@lhs*) (let ((cQ33fb@lab* (map cQ33ee@lookup cQ33f3@lhs*)) (cQ33fc@rhs* (map (lambda (cQ33ff@x) (cQ2ecd@make-eval-transformer (cQ30f6@expand-transformer cQ33ff@x cQ33e9@mr))) cQ33f4@rhs*))) (cQ30d4@chi-internal (cons cQ33f5@b cQ33f6@b*) (append (map cons cQ33fb@lab* cQ33fc@rhs*) cQ33e8@r) (append (map cons cQ33fb@lab* cQ33fc@rhs*) cQ33e9@mr))))) cQ33f1@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ33ef@t))))))) (set! cQ4b40@cQ3038@fluid-let-syntax-transformer cQ3038@fluid-let-syntax-transformer) (set! cQ303a@type-descriptor-transformer (lambda (cQ3403@e cQ3404@r cQ3405@mr) (let ((cQ3409@t cQ3403@e)) (let ((cQ340b@ls/false (cQ309c@syntax-dispatch cQ3409@t '(_ any)))) (if (and cQ340b@ls/false (apply (lambda (cQ340d@id) (cQ2e95@id? cQ340d@id)) cQ340b@ls/false)) (apply (lambda (cQ340f@id) (let ((cQ3411@lab (cQ2eab@id->label cQ340f@id))) (let ((cQ3413@b (cQ2ead@label->binding cQ3411@lab cQ3404@r))) (let ((cQ3415@type (cQ2eb1@binding-type cQ3413@b))) (begin (if (not cQ3411@lab) (cQ2eb5@raise-unbound-error cQ340f@id) (void)) (if (not (and (eq? cQ3415@type '$rtd) (not (list? (cQ2eb3@binding-value cQ3413@b))))) (cQ317c@syntax-violation '#f '"not a record type" cQ3403@e) (void)) (list 'quote (cQ2eb3@binding-value cQ3413@b))))))) cQ340b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3409@t)))))) (set! cQ4b41@cQ303a@type-descriptor-transformer cQ303a@type-descriptor-transformer) (set! cQ303c@record-type-descriptor-transformer (lambda (cQ3417@e cQ3418@r cQ3419@mr) (let ((cQ341d@t cQ3417@e)) (let ((cQ341f@ls/false (cQ309c@syntax-dispatch cQ341d@t '(_ any)))) (if (and cQ341f@ls/false (apply (lambda (cQ3421@id) (cQ2e95@id? cQ3421@id)) cQ341f@ls/false)) (apply (lambda (cQ3423@id) (let ((cQ3425@lab (cQ2eab@id->label cQ3423@id))) (let ((cQ3427@b (cQ2ead@label->binding cQ3425@lab cQ3418@r))) (let ((cQ3429@type (cQ2eb1@binding-type cQ3427@b))) (begin (if (not cQ3425@lab) (cQ2eb5@raise-unbound-error cQ3423@id) (void)) (if (not (and (eq? cQ3429@type '$rtd) (list? (cQ2eb3@binding-value cQ3427@b)))) (cQ317c@syntax-violation '#f '"not a record type" cQ3417@e) (void)) (cQ30be@chi-expr (car (cQ2eb3@binding-value cQ3427@b)) cQ3418@r cQ3419@mr)))))) cQ341f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ341d@t)))))) (set! cQ4b42@cQ303c@record-type-descriptor-transformer cQ303c@record-type-descriptor-transformer) (set! cQ303e@record-constructor-descriptor-transformer (lambda (cQ342b@e cQ342c@r cQ342d@mr) (let ((cQ3431@t cQ342b@e)) (let ((cQ3433@ls/false (cQ309c@syntax-dispatch cQ3431@t '(_ any)))) (if (and cQ3433@ls/false (apply (lambda (cQ3435@id) (cQ2e95@id? cQ3435@id)) cQ3433@ls/false)) (apply (lambda (cQ3437@id) (let ((cQ3439@lab (cQ2eab@id->label cQ3437@id))) (let ((cQ343b@b (cQ2ead@label->binding cQ3439@lab cQ342c@r))) (let ((cQ343d@type (cQ2eb1@binding-type cQ343b@b))) (begin (if (not cQ3439@lab) (cQ2eb5@raise-unbound-error cQ3437@id) (void)) (if (not (and (eq? cQ343d@type '$rtd) (list? (cQ2eb3@binding-value cQ343b@b)))) (cQ317c@syntax-violation '#f '"invalid type" cQ342b@e) (void)) (cQ30be@chi-expr (cadr (cQ2eb3@binding-value cQ343b@b)) cQ342c@r cQ342d@mr)))))) cQ3433@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3431@t)))))) (set! cQ4b43@cQ303e@record-constructor-descriptor-transformer cQ303e@record-constructor-descriptor-transformer) (set! cQ3040@when-macro (lambda (cQ343f@e) (let ((cQ3441@t cQ343f@e)) (let ((cQ3443@ls/false (cQ309c@syntax-dispatch cQ3441@t '(_ any any . each-any)))) (if cQ3443@ls/false (apply (lambda (cQ3445@test cQ3446@e cQ3447@e*) (cQ3052@bless (list 'if cQ3445@test (cons 'begin (cons cQ3446@e cQ3447@e*))))) cQ3443@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3441@t)))))) (set! cQ4b44@cQ3040@when-macro cQ3040@when-macro) (set! cQ3042@unless-macro (lambda (cQ344b@e) (let ((cQ344d@t cQ344b@e)) (let ((cQ344f@ls/false (cQ309c@syntax-dispatch cQ344d@t '(_ any any . each-any)))) (if cQ344f@ls/false (apply (lambda (cQ3451@test cQ3452@e cQ3453@e*) (cQ3052@bless (list 'if (list 'not cQ3451@test) (cons 'begin (cons cQ3452@e cQ3453@e*))))) cQ344f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ344d@t)))))) (set! cQ4b45@cQ3042@unless-macro cQ3042@unless-macro) (set! cQ3044@if-transformer (lambda (cQ3457@e cQ3458@r cQ3459@mr) (let ((cQ345d@t cQ3457@e)) (let ((cQ345f@ls/false (cQ309c@syntax-dispatch cQ345d@t '(_ any any any)))) (if cQ345f@ls/false (apply (lambda (cQ3461@e0 cQ3462@e1 cQ3463@e2) (list 'if (cQ30be@chi-expr cQ3461@e0 cQ3458@r cQ3459@mr) (cQ30be@chi-expr cQ3462@e1 cQ3458@r cQ3459@mr) (cQ30be@chi-expr cQ3463@e2 cQ3458@r cQ3459@mr))) cQ345f@ls/false) (let ((cQ3467@t cQ345d@t)) (let ((cQ3469@ls/false (cQ309c@syntax-dispatch cQ3467@t '(_ any any)))) (if cQ3469@ls/false (apply (lambda (cQ346b@e0 cQ346c@e1) (list 'if (cQ30be@chi-expr cQ346b@e0 cQ3458@r cQ3459@mr) (cQ30be@chi-expr cQ346c@e1 cQ3458@r cQ3459@mr) (cQ2dfb@cQ2d5c@build-void))) cQ3469@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3467@t))))))))) (set! cQ4b46@cQ3044@if-transformer cQ3044@if-transformer) (set! cQ3046@and-transformer (lambda (cQ346f@e cQ3470@r cQ3471@mr) (let ((cQ3475@t cQ346f@e)) (let ((cQ3477@ls/false (cQ309c@syntax-dispatch cQ3475@t '(_ . each-any)))) (if cQ3477@ls/false (apply (lambda (cQ3479@e*) (cons 'and (cQ30ba@chi-expr* cQ3479@e* cQ3470@r cQ3471@mr))) cQ3477@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3475@t)))))) (set! cQ4b47@cQ3046@and-transformer cQ3046@and-transformer) (set! cQ3048@or-transformer (lambda (cQ347b@e cQ347c@r cQ347d@mr) (let ((cQ3481@t cQ347b@e)) (let ((cQ3483@ls/false (cQ309c@syntax-dispatch cQ3481@t '(_ . each-any)))) (if cQ3483@ls/false (apply (lambda (cQ3485@e*) (cons 'or (cQ30ba@chi-expr* cQ3485@e* cQ347c@r cQ347d@mr))) cQ3483@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3481@t)))))) (set! cQ4b48@cQ3048@or-transformer cQ3048@or-transformer) (set! cQ304a@case-macro (lambda (cQ3487@e) (letrec* ((cQ348a@build-last (lambda (cQ34b1@cls) (let ((cQ34b3@t cQ34b1@cls)) (let ((cQ34b5@ls/false (cQ309c@syntax-dispatch cQ34b3@t '(#(scheme-id else) any . each-any)))) (if cQ34b5@ls/false (apply (lambda (cQ34b7@e cQ34b8@e*) (cons 'begin (cons cQ34b7@e cQ34b8@e*))) cQ34b5@ls/false) (let ((cQ34bb@t cQ34b3@t)) (let ((cQ34bd@ls/false (cQ309c@syntax-dispatch cQ34bb@t '_))) (if cQ34bd@ls/false (apply (lambda () (cQ348c@build-one cQ34b1@cls '(if #f #f))) cQ34bd@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ34bb@t))))))))) (cQ348c@build-one (lambda (cQ34a3@cls cQ34a4@k) (let ((cQ34a7@t cQ34a3@cls)) (let ((cQ34a9@ls/false (cQ309c@syntax-dispatch cQ34a7@t '(each-any any . each-any)))) (if cQ34a9@ls/false (apply (lambda (cQ34ab@d* cQ34ac@e cQ34ad@e*) (list 'if (list 'memv 't (list 'quote cQ34ab@d*)) (cons 'begin (cons cQ34ac@e cQ34ad@e*)) cQ34a4@k)) cQ34a9@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ34a7@t))))))) (let ((cQ348d@t cQ3487@e)) (let ((cQ348f@ls/false (cQ309c@syntax-dispatch cQ348d@t '(_ any)))) (if cQ348f@ls/false (apply (lambda (cQ3491@expr) (cQ3052@bless (cons 'let (cons (list (list 't cQ3491@expr)) '((if #f #f)))))) cQ348f@ls/false) (let ((cQ3493@t cQ348d@t)) (let ((cQ3495@ls/false (cQ309c@syntax-dispatch cQ3493@t '(_ any any . each-any)))) (if cQ3495@ls/false (apply (lambda (cQ3497@expr cQ3498@cls cQ3499@cls*) (cQ3052@bless (list 'let (list (list 't cQ3497@expr)) (let cQ34a1@f ((cQ349d@cls cQ3498@cls) (cQ349e@cls* cQ3499@cls*)) (if (null? cQ349e@cls*) (cQ348a@build-last cQ349d@cls) (cQ348c@build-one cQ349d@cls (cQ34a1@f (car cQ349e@cls*) (cdr cQ349e@cls*)))))))) cQ3495@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3493@t)))))))))) (set! cQ4b49@cQ304a@case-macro cQ304a@case-macro) (set! cQ304c@quote-transformer (lambda (cQ34bf@e cQ34c0@r cQ34c1@mr) (let ((cQ34c5@t cQ34bf@e)) (let ((cQ34c7@ls/false (cQ309c@syntax-dispatch cQ34c5@t '(_ any)))) (if cQ34c7@ls/false (apply (lambda (cQ34c9@datum) (list 'quote (cQ2ea9@stx->datum cQ34c9@datum))) cQ34c7@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ34c5@t)))))) (set! cQ4b4a@cQ304c@quote-transformer cQ304c@quote-transformer) (set! cQ304e@case-lambda-transformer (lambda (cQ34cb@e cQ34cc@r cQ34cd@mr) (let ((cQ34d1@t cQ34cb@e)) (let ((cQ34d3@ls/false (cQ309c@syntax-dispatch cQ34d1@t '(_ . #(each (any any . each-any)))))) (if cQ34d3@ls/false (apply (lambda (cQ34d5@fmls* cQ34d6@b* cQ34d7@b**) (call-with-values (lambda () (cQ30c6@chi-lambda-clause* cQ34cb@e cQ34d5@fmls* (map cons cQ34d6@b* cQ34d7@b**) cQ34cc@r cQ34cd@mr)) (lambda (cQ34df@cQ34dc cQ34e0@cQ34de) (let ((cQ34e3@body* cQ34e0@cQ34de) (cQ34e4@fmls* cQ34df@cQ34dc)) (cQ2df9@cQ2d2c@build-case-lambda '#f cQ34e4@fmls* cQ34e3@body*))))) cQ34d3@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ34d1@t)))))) (set! cQ4b4b@cQ304e@case-lambda-transformer cQ304e@case-lambda-transformer) (set! cQ3050@lambda-transformer (lambda (cQ34e7@e cQ34e8@r cQ34e9@mr) (let ((cQ34ed@t cQ34e7@e)) (let ((cQ34ef@ls/false (cQ309c@syntax-dispatch cQ34ed@t '(_ any any . each-any)))) (if cQ34ef@ls/false (apply (lambda (cQ34f1@fmls cQ34f2@b cQ34f3@b*) (call-with-values (lambda () (cQ30c4@chi-lambda-clause cQ34e7@e cQ34f1@fmls (cons cQ34f2@b cQ34f3@b*) cQ34e8@r cQ34e9@mr)) (lambda (cQ34fb@cQ34f8 cQ34fc@cQ34fa) (let ((cQ34ff@body cQ34fc@cQ34fa) (cQ3500@fmls cQ34fb@cQ34f8)) (cQ2df8@cQ2d2a@build-lambda '#f cQ3500@fmls cQ34ff@body))))) cQ34ef@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ34ed@t)))))) (set! cQ4b4c@cQ3050@lambda-transformer cQ3050@lambda-transformer) (set! cQ3052@bless (lambda (cQ3503@x) (cQ2e7d@mkstx (let cQ3507@f ((cQ3505@x cQ3503@x)) (if (cQ2e61@stx? cQ3505@x) cQ3505@x (if (pair? cQ3505@x) (cons (cQ3507@f (car cQ3505@x)) (cQ3507@f (cdr cQ3505@x))) (if (symbol? cQ3505@x) (cQ3024@scheme-stx cQ3505@x) (if (vector? cQ3505@x) (vector-map cQ3507@f cQ3505@x) cQ3505@x))))) '() '() '()))) (set! cQ4b4d@cQ3052@bless cQ3052@bless) (set! cQ3054@with-syntax-macro (lambda (cQ3509@e) (let ((cQ350b@t cQ3509@e)) (let ((cQ350d@ls/false (cQ309c@syntax-dispatch cQ350b@t '(_ #(each (any any)) any . each-any)))) (if cQ350d@ls/false (apply (lambda (cQ350f@pat* cQ3510@expr* cQ3511@b cQ3512@b*) (let ((cQ3517@idn* (let cQ351b@f ((cQ3519@pat* cQ350f@pat*)) (if (null? cQ3519@pat*) '() (call-with-values (lambda () (cQ309a@convert-pattern (car cQ3519@pat*) '())) (lambda (cQ3521@cQ351e cQ3522@cQ3520) (let ((cQ3525@idn* cQ3522@cQ3520) (cQ3526@pat cQ3521@cQ351e)) (append cQ3525@idn* (cQ351b@f (cdr cQ3519@pat*)))))))))) (begin (cQ30c2@verify-formals (map car cQ3517@idn*) cQ3509@e) (let ((cQ3529@t* (cQ316a@generate-temporaries cQ3510@expr*))) (cQ3052@bless (list 'let (map list cQ3529@t* cQ3510@expr*) (let cQ352f@f ((cQ352b@pat* cQ350f@pat*) (cQ352c@t* cQ3529@t*)) (if (null? cQ352b@pat*) (cons 'begin (cons '#f (cons cQ3511@b cQ3512@b*))) (list 'syntax-case (car cQ352c@t*) '() (list (car cQ352b@pat*) (cQ352f@f (cdr cQ352b@pat*) (cdr cQ352c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car cQ352b@pat*)) (car cQ352c@t*)))))))))))) cQ350d@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ350b@t)))))) (set! cQ4b4e@cQ3054@with-syntax-macro cQ3054@with-syntax-macro) (set! cQ3056@invalid-fmls-error (lambda (cQ3531@stx cQ3532@fmls) (let ((cQ3535@t cQ3532@fmls)) (let ((cQ3537@ls/false (cQ309c@syntax-dispatch cQ3535@t '#(each+ any () any)))) (if cQ3537@ls/false (apply (lambda (cQ3539@id* cQ353a@last) (let cQ353f@f ((cQ353d@id* (if (cQ2e95@id? cQ353a@last) (cons cQ353a@last cQ3539@id*) (if (cQ2e8b@syntax-null? cQ353a@last) cQ3539@id* (cQ317c@syntax-violation '#f '"not an identifier" cQ3531@stx cQ353a@last))))) (if (null? cQ353d@id*) (values) (if (not (cQ2e95@id? (car cQ353d@id*))) (cQ317c@syntax-violation '#f '"not an identifier" cQ3531@stx (car cQ353d@id*)) (begin (cQ353f@f (cdr cQ353d@id*)) (if (cQ2ea1@bound-id-member? (car cQ353d@id*) (cdr cQ353d@id*)) (cQ317c@syntax-violation '#f '"duplicate binding" cQ3531@stx (car cQ353d@id*)) (void))))))) cQ3537@ls/false) (let ((cQ3541@t cQ3535@t)) (let ((cQ3543@ls/false (cQ309c@syntax-dispatch cQ3541@t '_))) (if cQ3543@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"malformed binding form" cQ3531@stx cQ3532@fmls)) cQ3543@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3541@t))))))))) (set! cQ4b4f@cQ3056@invalid-fmls-error cQ3056@invalid-fmls-error) (set! cQ3058@let-macro (lambda (cQ3545@stx) (let ((cQ3547@t cQ3545@stx)) (let ((cQ3549@ls/false (cQ309c@syntax-dispatch cQ3547@t '(_ #(each (any any)) any . each-any)))) (if cQ3549@ls/false (apply (lambda (cQ354b@lhs* cQ354c@rhs* cQ354d@b cQ354e@b*) (if (cQ2e9d@valid-bound-ids? cQ354b@lhs*) (cQ3052@bless (cons (cons 'lambda (cons cQ354b@lhs* (cons cQ354d@b cQ354e@b*))) cQ354c@rhs*)) (cQ3056@invalid-fmls-error cQ3545@stx cQ354b@lhs*))) cQ3549@ls/false) (let ((cQ3553@t cQ3547@t)) (let ((cQ3555@ls/false (cQ309c@syntax-dispatch cQ3553@t '(_ any #(each (any any)) any . each-any)))) (if (and cQ3555@ls/false (apply (lambda (cQ3557@f cQ3558@lhs* cQ3559@rhs* cQ355a@b cQ355b@b*) (cQ2e95@id? cQ3557@f)) cQ3555@ls/false)) (apply (lambda (cQ3561@f cQ3562@lhs* cQ3563@rhs* cQ3564@b cQ3565@b*) (if (cQ2e9d@valid-bound-ids? cQ3562@lhs*) (cQ3052@bless (cons (list 'letrec (list (list cQ3561@f (cons 'lambda (cons cQ3562@lhs* (cons cQ3564@b cQ3565@b*))))) cQ3561@f) cQ3563@rhs*)) (cQ3056@invalid-fmls-error cQ3545@stx cQ3562@lhs*))) cQ3555@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3553@t))))))))) (set! cQ4b50@cQ3058@let-macro cQ3058@let-macro) (set! cQ305a@let-values-macro (lambda (cQ356b@stx) (letrec* ((cQ356e@rename (lambda (cQ35d3@x cQ35d4@old* cQ35d5@new*) (begin (if (not (cQ2e95@id? cQ35d3@x)) (cQ317c@syntax-violation '#f '"not an indentifier" cQ356b@stx cQ35d3@x) (void)) (if (cQ2ea1@bound-id-member? cQ35d3@x cQ35d4@old*) (cQ317c@syntax-violation '#f '"duplicate binding" cQ356b@stx cQ35d3@x) (void)) (let ((cQ35d9@y (gensym (cQ3182@syntax->datum cQ35d3@x)))) (values cQ35d9@y (cons cQ35d3@x cQ35d4@old*) (cons cQ35d9@y cQ35d5@new*)))))) (cQ3570@rename* (lambda (cQ35c1@x* cQ35c2@old* cQ35c3@new*) (if (null? cQ35c1@x*) (values '() cQ35c2@old* cQ35c3@new*) (call-with-values (lambda () (cQ356e@rename (car cQ35c1@x*) cQ35c2@old* cQ35c3@new*)) (lambda (cQ35c7@x cQ35c8@old* cQ35c9@new*) (call-with-values (lambda () (cQ3570@rename* (cdr cQ35c1@x*) cQ35c8@old* cQ35c9@new*)) (lambda (cQ35cd@x* cQ35ce@old* cQ35cf@new*) (values (cons cQ35c7@x cQ35cd@x*) cQ35ce@old* cQ35cf@new*))))))))) (let ((cQ3571@t cQ356b@stx)) (let ((cQ3573@ls/false (cQ309c@syntax-dispatch cQ3571@t '(_ () any . each-any)))) (if cQ3573@ls/false (apply (lambda (cQ3575@b cQ3576@b*) (cons* (cQ3052@bless 'let) '() cQ3575@b cQ3576@b*)) cQ3573@ls/false) (let ((cQ3579@t cQ3571@t)) (let ((cQ357b@ls/false (cQ309c@syntax-dispatch cQ3579@t '(_ #(each (any any)) any . each-any)))) (if cQ357b@ls/false (apply (lambda (cQ357d@lhs* cQ357e@rhs* cQ357f@b cQ3580@b*) (cQ3052@bless (let cQ358d@f ((cQ3585@lhs* cQ357d@lhs*) (cQ3586@rhs* cQ357e@rhs*) (cQ3587@old* '()) (cQ3588@new* '())) (if (null? cQ3585@lhs*) (cons 'let (cons (map list cQ3587@old* cQ3588@new*) (cons cQ357f@b cQ3580@b*))) (let ((cQ358f@t (car cQ3585@lhs*))) (let ((cQ3591@ls/false (cQ309c@syntax-dispatch cQ358f@t 'each-any))) (if cQ3591@ls/false (apply (lambda (cQ3593@x*) (call-with-values (lambda () (cQ3570@rename* cQ3593@x* cQ3587@old* cQ3588@new*)) (lambda (cQ359b@cQ3596 cQ359c@cQ3598 cQ359d@cQ359a) (let ((cQ35a1@new* cQ359d@cQ359a) (cQ35a2@old* cQ359c@cQ3598) (cQ35a3@y* cQ359b@cQ3596)) (list 'call-with-values (list 'lambda '() (car cQ3586@rhs*)) (list 'lambda cQ35a3@y* (cQ358d@f (cdr cQ3585@lhs*) (cdr cQ3586@rhs*) cQ35a2@old* cQ35a1@new*))))))) cQ3591@ls/false) (let ((cQ35a7@t cQ358f@t)) (let ((cQ35a9@ls/false (cQ309c@syntax-dispatch cQ35a7@t '#(each+ any () any)))) (if cQ35a9@ls/false (apply (lambda (cQ35ab@x* cQ35ac@x) (call-with-values (lambda () (cQ356e@rename cQ35ac@x cQ3587@old* cQ3588@new*)) (lambda (cQ35af@y cQ35b0@old* cQ35b1@new*) (call-with-values (lambda () (cQ3570@rename* cQ35ab@x* cQ35b0@old* cQ35b1@new*)) (lambda (cQ35b5@y* cQ35b6@old* cQ35b7@new*) (list 'call-with-values (list 'lambda '() (car cQ3586@rhs*)) (list 'lambda (append cQ35b5@y* cQ35af@y) (cQ358d@f (cdr cQ3585@lhs*) (cdr cQ3586@rhs*) cQ35b6@old* cQ35b7@new*)))))))) cQ35a9@ls/false) (let ((cQ35bb@t cQ35a7@t)) (let ((cQ35bd@ls/false (cQ309c@syntax-dispatch cQ35bb@t 'any))) (if cQ35bd@ls/false (apply (lambda (cQ35bf@others) (cQ317c@syntax-violation '#f '"malformed bindings" cQ356b@stx cQ35bf@others)) cQ35bd@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ35bb@t)))))))))))))) cQ357b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3579@t)))))))))) (set! cQ4b51@cQ305a@let-values-macro cQ305a@let-values-macro) (set! cQ305c@let*-values-macro (lambda (cQ35db@stx) (letrec* ((cQ35de@check (lambda (cQ360d@x*) (if (not (null? cQ360d@x*)) (let ((cQ360f@x (car cQ360d@x*))) (begin (if (not (cQ2e95@id? cQ360f@x)) (cQ317c@syntax-violation '#f '"not an identifier" cQ35db@stx cQ360f@x) (void)) (cQ35de@check (cdr cQ360d@x*)) (if (cQ2ea1@bound-id-member? cQ360f@x (cdr cQ360d@x*)) (cQ317c@syntax-violation '#f '"duplicate identifier" cQ35db@stx cQ360f@x) (void)))) (void))))) (let ((cQ35df@t cQ35db@stx)) (let ((cQ35e1@ls/false (cQ309c@syntax-dispatch cQ35df@t '(_ () any . each-any)))) (if cQ35e1@ls/false (apply (lambda (cQ35e3@b cQ35e4@b*) (cons* (cQ3052@bless 'let) '() cQ35e3@b cQ35e4@b*)) cQ35e1@ls/false) (let ((cQ35e7@t cQ35df@t)) (let ((cQ35e9@ls/false (cQ309c@syntax-dispatch cQ35e7@t '(_ #(each (any any)) any . each-any)))) (if cQ35e9@ls/false (apply (lambda (cQ35eb@lhs* cQ35ec@rhs* cQ35ed@b cQ35ee@b*) (cQ3052@bless (let cQ35f7@f ((cQ35f3@lhs* cQ35eb@lhs*) (cQ35f4@rhs* cQ35ec@rhs*)) (if (null? cQ35f3@lhs*) (cons 'begin (cons cQ35ed@b cQ35ee@b*)) (let ((cQ35f9@t (car cQ35f3@lhs*))) (let ((cQ35fb@ls/false (cQ309c@syntax-dispatch cQ35f9@t 'each-any))) (if cQ35fb@ls/false (apply (lambda (cQ35fd@x*) (begin (cQ35de@check cQ35fd@x*) (list 'call-with-values (list 'lambda '() (car cQ35f4@rhs*)) (list 'lambda cQ35fd@x* (cQ35f7@f (cdr cQ35f3@lhs*) (cdr cQ35f4@rhs*)))))) cQ35fb@ls/false) (let ((cQ35ff@t cQ35f9@t)) (let ((cQ3601@ls/false (cQ309c@syntax-dispatch cQ35ff@t '#(each+ any () any)))) (if cQ3601@ls/false (apply (lambda (cQ3603@x* cQ3604@x) (begin (cQ35de@check (cons cQ3604@x cQ3603@x*)) (list 'call-with-values (list 'lambda '() (car cQ35f4@rhs*)) (list 'lambda (append cQ3603@x* cQ3604@x) (cQ35f7@f (cdr cQ35f3@lhs*) (cdr cQ35f4@rhs*)))))) cQ3601@ls/false) (let ((cQ3607@t cQ35ff@t)) (let ((cQ3609@ls/false (cQ309c@syntax-dispatch cQ3607@t 'any))) (if cQ3609@ls/false (apply (lambda (cQ360b@others) (cQ317c@syntax-violation '#f '"malformed bindings" cQ35db@stx cQ360b@others)) cQ3609@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3607@t)))))))))))))) cQ35e9@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ35e7@t)))))))))) (set! cQ4b52@cQ305c@let*-values-macro cQ305c@let*-values-macro) (set! cQ305e@trace-lambda-macro (lambda (cQ3611@stx) (let ((cQ3613@t cQ3611@stx)) (let ((cQ3615@ls/false (cQ309c@syntax-dispatch cQ3613@t '(_ any each-any any . each-any)))) (if cQ3615@ls/false (apply (lambda (cQ3617@who cQ3618@fmls cQ3619@b cQ361a@b*) (if (cQ2e9d@valid-bound-ids? cQ3618@fmls) (cQ3052@bless (list 'make-traced-procedure (list 'quote cQ3617@who) (cons 'lambda (cons cQ3618@fmls (cons cQ3619@b cQ361a@b*))))) (cQ3056@invalid-fmls-error cQ3611@stx cQ3618@fmls))) cQ3615@ls/false) (let ((cQ361f@t cQ3613@t)) (let ((cQ3621@ls/false (cQ309c@syntax-dispatch cQ361f@t '(_ any #(each+ any () any) any . each-any)))) (if cQ3621@ls/false (apply (lambda (cQ3623@who cQ3624@fmls cQ3625@last cQ3626@b cQ3627@b*) (if (cQ2e9d@valid-bound-ids? (cons cQ3625@last cQ3624@fmls)) (cQ3052@bless (list 'make-traced-procedure (list 'quote cQ3623@who) (cons 'lambda (cons (append cQ3624@fmls cQ3625@last) (cons cQ3626@b cQ3627@b*))))) (cQ3056@invalid-fmls-error cQ3611@stx (append cQ3624@fmls cQ3625@last)))) cQ3621@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ361f@t))))))))) (set! cQ4b53@cQ305e@trace-lambda-macro cQ305e@trace-lambda-macro) (set! cQ3060@trace-define-macro (lambda (cQ362d@stx) (let ((cQ362f@t cQ362d@stx)) (let ((cQ3631@ls/false (cQ309c@syntax-dispatch cQ362f@t '(_ (any . each-any) any . each-any)))) (if cQ3631@ls/false (apply (lambda (cQ3633@who cQ3634@fmls cQ3635@b cQ3636@b*) (if (cQ2e9d@valid-bound-ids? cQ3634@fmls) (cQ3052@bless (list 'define cQ3633@who (list 'make-traced-procedure (list 'quote cQ3633@who) (cons 'lambda (cons cQ3634@fmls (cons cQ3635@b cQ3636@b*)))))) (cQ3056@invalid-fmls-error cQ362d@stx cQ3634@fmls))) cQ3631@ls/false) (let ((cQ363b@t cQ362f@t)) (let ((cQ363d@ls/false (cQ309c@syntax-dispatch cQ363b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if cQ363d@ls/false (apply (lambda (cQ363f@who cQ3640@fmls cQ3641@last cQ3642@b cQ3643@b*) (if (cQ2e9d@valid-bound-ids? (cons cQ3641@last cQ3640@fmls)) (cQ3052@bless (list 'define cQ363f@who (list 'make-traced-procedure (list 'quote cQ363f@who) (cons 'lambda (cons (append cQ3640@fmls cQ3641@last) (cons cQ3642@b cQ3643@b*)))))) (cQ3056@invalid-fmls-error cQ362d@stx (append cQ3640@fmls cQ3641@last)))) cQ363d@ls/false) (let ((cQ3649@t cQ363b@t)) (let ((cQ364b@ls/false (cQ309c@syntax-dispatch cQ3649@t '(_ any any)))) (if cQ364b@ls/false (apply (lambda (cQ364d@who cQ364e@expr) (if (cQ2e95@id? cQ364d@who) (cQ3052@bless (list 'define cQ364d@who (list 'let (list (list 'v cQ364e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote cQ364d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (cQ317c@syntax-violation '#f '"invalid name" cQ362d@stx))) cQ364b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3649@t)))))))))))) (set! cQ4b54@cQ3060@trace-define-macro cQ3060@trace-define-macro) (set! cQ3062@trace-define-syntax-macro (lambda (cQ3651@stx) (let ((cQ3653@t cQ3651@stx)) (let ((cQ3655@ls/false (cQ309c@syntax-dispatch cQ3653@t '(_ any any)))) (if cQ3655@ls/false (apply (lambda (cQ3657@who cQ3658@expr) (if (cQ2e95@id? cQ3657@who) (cQ3052@bless (list 'define-syntax cQ3657@who (list 'make-traced-macro (list 'quote cQ3657@who) cQ3658@expr))) (cQ317c@syntax-violation '#f '"invalid name" cQ3651@stx))) cQ3655@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3653@t)))))) (set! cQ4b55@cQ3062@trace-define-syntax-macro cQ3062@trace-define-syntax-macro) (set! cQ3064@trace-let/rec-syntax (lambda (cQ365b@who) (lambda (cQ365d@stx) (let ((cQ365f@t cQ365d@stx)) (let ((cQ3661@ls/false (cQ309c@syntax-dispatch cQ365f@t '(_ #(each (any any)) any . each-any)))) (if cQ3661@ls/false (apply (lambda (cQ3663@lhs* cQ3664@rhs* cQ3665@b cQ3666@b*) (if (cQ2e9d@valid-bound-ids? cQ3663@lhs*) (let ((cQ366b@rhs* (map (lambda (cQ366d@lhs cQ366e@rhs) (list 'make-traced-macro (list 'quote cQ366d@lhs) cQ366e@rhs)) cQ3663@lhs* cQ3664@rhs*))) (cQ3052@bless (cons cQ365b@who (cons (map list cQ3663@lhs* cQ366b@rhs*) (cons cQ3665@b cQ3666@b*))))) (cQ3056@invalid-fmls-error cQ365d@stx cQ3663@lhs*))) cQ3661@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ365f@t))))))) (set! cQ4b56@cQ3064@trace-let/rec-syntax cQ3064@trace-let/rec-syntax) (set! cQ3066@trace-let-syntax-macro (cQ3064@trace-let/rec-syntax 'let-syntax)) (set! cQ4b57@cQ3066@trace-let-syntax-macro cQ3066@trace-let-syntax-macro) (set! cQ3068@trace-letrec-syntax-macro (cQ3064@trace-let/rec-syntax 'letrec-syntax)) (set! cQ4b58@cQ3068@trace-letrec-syntax-macro cQ3068@trace-letrec-syntax-macro) (set! cQ306a@guard-macro (lambda (cQ3671@x) (letrec* ((cQ3674@gen-clauses (lambda (cQ368b@con cQ368c@outerk cQ368d@clause*) (letrec* ((cQ3692@f (lambda (cQ36cb@x cQ36cc@k) (let ((cQ36cf@t cQ36cb@x)) (let ((cQ36d1@ls/false (cQ309c@syntax-dispatch cQ36cf@t '(any #(scheme-id =>) any)))) (if cQ36d1@ls/false (apply (lambda (cQ36d3@e cQ36d4@p) (let ((cQ36d7@t (gensym))) (list 'let (list (list cQ36d7@t cQ36d3@e)) (list 'if cQ36d7@t (list cQ36d4@p cQ36d7@t) cQ36cc@k)))) cQ36d1@ls/false) (let ((cQ36d9@t cQ36cf@t)) (let ((cQ36db@ls/false (cQ309c@syntax-dispatch cQ36d9@t '(any)))) (if cQ36db@ls/false (apply (lambda (cQ36dd@e) (let ((cQ36df@t (gensym))) (list 'let (list (list cQ36df@t cQ36dd@e)) (list 'if cQ36df@t cQ36df@t cQ36cc@k)))) cQ36db@ls/false) (let ((cQ36e1@t cQ36d9@t)) (let ((cQ36e3@ls/false (cQ309c@syntax-dispatch cQ36e1@t '(any any . each-any)))) (if cQ36e3@ls/false (apply (lambda (cQ36e5@e cQ36e6@v cQ36e7@v*) (list 'if cQ36e5@e (cons 'begin (cons cQ36e6@v cQ36e7@v*)) cQ36cc@k)) cQ36e3@ls/false) (let ((cQ36eb@t cQ36e1@t)) (let ((cQ36ed@ls/false (cQ309c@syntax-dispatch cQ36eb@t '_))) (if cQ36ed@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid guard clause" cQ36cb@x)) cQ36ed@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ36eb@t))))))))))))))) (cQ3694@f* (lambda (cQ36a1@x*) (let ((cQ36a3@t cQ36a1@x*)) (let ((cQ36a5@ls/false (cQ309c@syntax-dispatch cQ36a3@t '()))) (if cQ36a5@ls/false (apply (lambda () (let ((cQ36a7@g (gensym))) (values (list cQ36a7@g (list 'lambda '() (list 'raise-continuable cQ368b@con))) cQ36a7@g))) cQ36a5@ls/false) (let ((cQ36a9@t cQ36a3@t)) (let ((cQ36ab@ls/false (cQ309c@syntax-dispatch cQ36a9@t '((#(scheme-id else) any . each-any))))) (if cQ36ab@ls/false (apply (lambda (cQ36ad@e cQ36ae@e*) (values (cons 'begin (cons cQ36ad@e cQ36ae@e*)) '#f)) cQ36ab@ls/false) (let ((cQ36b1@t cQ36a9@t)) (let ((cQ36b3@ls/false (cQ309c@syntax-dispatch cQ36b1@t '(any . any)))) (if cQ36b3@ls/false (apply (lambda (cQ36b5@cls cQ36b6@cls*) (call-with-values (lambda () (cQ3694@f* cQ36b6@cls*)) (lambda (cQ36bd@cQ36ba cQ36be@cQ36bc) (let ((cQ36c1@g cQ36be@cQ36bc) (cQ36c2@e cQ36bd@cQ36ba)) (values (cQ3692@f cQ36b5@cls cQ36c2@e) cQ36c1@g))))) cQ36b3@ls/false) (let ((cQ36c5@t cQ36b1@t)) (let ((cQ36c7@ls/false (cQ309c@syntax-dispatch cQ36c5@t 'any))) (if cQ36c7@ls/false (apply (lambda (cQ36c9@others) (cQ317c@syntax-violation '#f '"invalid guard clause" cQ36c9@others)) cQ36c7@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ36c5@t)))))))))))))))) (call-with-values (lambda () (cQ3694@f* cQ368d@clause*)) (lambda (cQ3699@cQ3696 cQ369a@cQ3698) (let ((cQ369d@raisek cQ369a@cQ3698) (cQ369e@code cQ3699@cQ3696)) (if cQ369d@raisek (list (list 'call/cc (list 'lambda (list cQ369d@raisek) (list cQ368c@outerk (list 'lambda '() cQ369e@code))))) (list cQ368c@outerk (list 'lambda '() cQ369e@code)))))))))) (let ((cQ3675@t cQ3671@x)) (let ((cQ3677@ls/false (cQ309c@syntax-dispatch cQ3675@t '(_ (any . each-any) any . each-any)))) (if (and cQ3677@ls/false (apply (lambda (cQ3679@con cQ367a@clause* cQ367b@b cQ367c@b*) (cQ2e95@id? cQ3679@con)) cQ3677@ls/false)) (apply (lambda (cQ3681@con cQ3682@clause* cQ3683@b cQ3684@b*) (let ((cQ3689@outerk (gensym))) (cQ3052@bless (list (list 'call/cc (list 'lambda (list cQ3689@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list cQ3681@con) (cQ3674@gen-clauses cQ3681@con cQ3689@outerk cQ3682@clause*)) (cons 'lambda (cons '() (cons cQ3683@b cQ3684@b*))))))))))) cQ3677@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3675@t))))))) (set! cQ4b59@cQ306a@guard-macro cQ306a@guard-macro) (set! cQ306c@define-enumeration-macro (lambda (cQ36ef@stx) (letrec* ((cQ36f2@set? (lambda (cQ370b@x) (or (null? cQ370b@x) (and (not (memq (car cQ370b@x) (cdr cQ370b@x))) (cQ36f2@set? (cdr cQ370b@x)))))) (cQ36f4@remove-dups (lambda (cQ3709@ls) (if (null? cQ3709@ls) '() (cons (car cQ3709@ls) (cQ36f4@remove-dups (remq (car cQ3709@ls) (cdr cQ3709@ls)))))))) (let ((cQ36f5@t cQ36ef@stx)) (let ((cQ36f7@ls/false (cQ309c@syntax-dispatch cQ36f5@t '(_ any each-any any)))) (if (and cQ36f7@ls/false (apply (lambda (cQ36f9@name cQ36fa@id* cQ36fb@maker) (and (cQ2e95@id? cQ36f9@name) (cQ2e95@id? cQ36fb@maker) (for-all cQ2e95@id? cQ36fa@id*))) cQ36f7@ls/false)) (apply (lambda (cQ36ff@name cQ3700@id* cQ3701@maker) (let ((cQ3705@name* (cQ36f4@remove-dups (cQ3182@syntax->datum cQ3700@id*))) (cQ3706@mk (gensym))) (cQ3052@bless (list 'begin (list 'define cQ3706@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote cQ3705@name*)))) (list 'define-syntax cQ36ff@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote cQ3705@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote cQ36ff@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax cQ3701@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote cQ3701@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote cQ3705@name*)) (cons 'syntax-violation (cons (list 'quote cQ3701@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons cQ3706@mk '('(n* ...))))))))))))) cQ36f7@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ36f5@t))))))) (set! cQ4b5a@cQ306c@define-enumeration-macro cQ306c@define-enumeration-macro) (set! cQ306e@time-macro (lambda (cQ370d@stx) (let ((cQ370f@t cQ370d@stx)) (let ((cQ3711@ls/false (cQ309c@syntax-dispatch cQ370f@t '(_ any)))) (if cQ3711@ls/false (apply (lambda (cQ3713@expr) (cQ3052@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() cQ3713@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) cQ3711@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ370f@t)))))) (set! cQ4b5b@cQ306e@time-macro cQ306e@time-macro) (set! cQ3070@delay-macro (lambda (cQ3715@stx) (let ((cQ3717@t cQ3715@stx)) (let ((cQ3719@ls/false (cQ309c@syntax-dispatch cQ3717@t '(_ any)))) (if cQ3719@ls/false (apply (lambda (cQ371b@expr) (cQ3052@bless (list 'make-promise (list 'lambda '() cQ371b@expr)))) cQ3719@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3717@t)))))) (set! cQ4b5c@cQ3070@delay-macro cQ3070@delay-macro) (set! cQ3072@assert-macro (lambda (cQ371d@stx) (let ((cQ371f@t cQ371d@stx)) (let ((cQ3721@ls/false (cQ309c@syntax-dispatch cQ371f@t '(_ any)))) (if cQ3721@ls/false (apply (lambda (cQ3723@expr) (let ((cQ3725@pos (or (cQ3174@expression-position cQ371d@stx) (cQ3174@expression-position cQ3723@expr)))) (cQ3052@bless (list 'let (list (list 'x cQ3723@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote cQ3723@expr) (list 'quote cQ3725@pos))))))) cQ3721@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ371f@t)))))) (set! cQ4b5d@cQ3072@assert-macro cQ3072@assert-macro) (set! cQ3074@endianness-macro (lambda (cQ3727@stx) (let ((cQ3729@t cQ3727@stx)) (let ((cQ372b@ls/false (cQ309c@syntax-dispatch cQ3729@t '(_ any)))) (if cQ372b@ls/false (apply (lambda (cQ372d@e) (let ((cQ372f@t (cQ3182@syntax->datum cQ372d@e))) (if (memv cQ372f@t '(little)) (cQ3052@bless ''little) (if (memv cQ372f@t '(big)) (cQ3052@bless ''big) (cQ317c@syntax-violation '#f '"endianness must be big or little" cQ3727@stx))))) cQ372b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3729@t)))))) (set! cQ4b5e@cQ3074@endianness-macro cQ3074@endianness-macro) (set! cQ3076@identifier-syntax-macro (lambda (cQ3731@stx) (let ((cQ3733@t cQ3731@stx)) (let ((cQ3735@ls/false (cQ309c@syntax-dispatch cQ3733@t '(_ any)))) (if cQ3735@ls/false (apply (lambda (cQ3737@expr) (cQ3052@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax cQ3737@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax cQ3737@expr) '((syntax (e* ...)))))))))) cQ3735@ls/false) (let ((cQ3739@t cQ3733@t)) (let ((cQ373b@ls/false (cQ309c@syntax-dispatch cQ3739@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and cQ373b@ls/false (apply (lambda (cQ373d@id1 cQ373e@expr1 cQ373f@id2 cQ3740@expr2 cQ3741@expr3) (and (cQ2e95@id? cQ373d@id1) (cQ2e95@id? cQ373f@id2) (cQ2e95@id? cQ3740@expr2))) cQ373b@ls/false)) (apply (lambda (cQ3747@id1 cQ3748@expr1 cQ3749@id2 cQ374a@expr2 cQ374b@expr3) (cQ3052@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax cQ3748@expr1)) (list (list 'set! 'id cQ374a@expr2) (list 'syntax cQ374b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons cQ3748@expr1 '(e* ...))))))))) cQ373b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3739@t))))))))) (set! cQ4b5f@cQ3076@identifier-syntax-macro cQ3076@identifier-syntax-macro) (set! cQ3078@do-macro (lambda (cQ3751@stx) (letrec* ((cQ3754@bind (lambda (cQ376b@x) (let ((cQ376d@t cQ376b@x)) (let ((cQ376f@ls/false (cQ309c@syntax-dispatch cQ376d@t '(any any)))) (if cQ376f@ls/false (apply (lambda (cQ3771@x cQ3772@init) (list cQ3771@x cQ3772@init cQ3771@x)) cQ376f@ls/false) (let ((cQ3775@t cQ376d@t)) (let ((cQ3777@ls/false (cQ309c@syntax-dispatch cQ3775@t '(any any any)))) (if cQ3777@ls/false (apply (lambda (cQ3779@x cQ377a@init cQ377b@step) (list cQ3779@x cQ377a@init cQ377b@step)) cQ3777@ls/false) (let ((cQ377f@t cQ3775@t)) (let ((cQ3781@ls/false (cQ309c@syntax-dispatch cQ377f@t '_))) (if cQ3781@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid binding" cQ3751@stx)) cQ3781@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ377f@t))))))))))))) (let ((cQ3755@t cQ3751@stx)) (let ((cQ3757@ls/false (cQ309c@syntax-dispatch cQ3755@t '(_ each-any (any . each-any) . each-any)))) (if cQ3757@ls/false (apply (lambda (cQ3759@binding* cQ375a@test cQ375b@expr* cQ375c@command*) (let ((cQ3761@t (map cQ3754@bind cQ3759@binding*))) (let ((cQ3763@ls/false (cQ309c@syntax-dispatch cQ3761@t '#(each (any any any))))) (if cQ3763@ls/false (apply (lambda (cQ3765@x* cQ3766@init* cQ3767@step*) (if (cQ2e9d@valid-bound-ids? cQ3765@x*) (cQ3052@bless (list 'letrec (list (list 'loop (list 'lambda cQ3765@x* (list 'if cQ375a@test (cons 'begin (cons '(if #f #f) cQ375b@expr*)) (cons 'begin (append cQ375c@command* (list (cons 'loop cQ3767@step*)))))))) (cons 'loop cQ3766@init*))) (cQ317c@syntax-violation '#f '"invalid bindings" cQ3751@stx))) cQ3763@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3761@t))))) cQ3757@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3755@t))))))) (set! cQ4b60@cQ3078@do-macro cQ3078@do-macro) (set! cQ307a@let*-macro (lambda (cQ3783@stx) (let ((cQ3785@t cQ3783@stx)) (let ((cQ3787@ls/false (cQ309c@syntax-dispatch cQ3785@t '(_ #(each (any any)) any . each-any)))) (if (and cQ3787@ls/false (apply (lambda (cQ3789@lhs* cQ378a@rhs* cQ378b@b cQ378c@b*) (for-all cQ2e95@id? cQ3789@lhs*)) cQ3787@ls/false)) (apply (lambda (cQ3791@lhs* cQ3792@rhs* cQ3793@b cQ3794@b*) (cQ3052@bless (let cQ379b@f ((cQ3799@x* (map list cQ3791@lhs* cQ3792@rhs*))) (if (null? cQ3799@x*) (cons 'let (cons '() (cons cQ3793@b cQ3794@b*))) (list 'let (list (car cQ3799@x*)) (cQ379b@f (cdr cQ3799@x*))))))) cQ3787@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3785@t)))))) (set! cQ4b61@cQ307a@let*-macro cQ307a@let*-macro) (set! cQ307c@or-macro (lambda (cQ379d@stx) (let ((cQ379f@t cQ379d@stx)) (let ((cQ37a1@ls/false (cQ309c@syntax-dispatch cQ379f@t '(_)))) (if cQ37a1@ls/false (apply (lambda () '#f) cQ37a1@ls/false) (let ((cQ37a3@t cQ379f@t)) (let ((cQ37a5@ls/false (cQ309c@syntax-dispatch cQ37a3@t '(_ any . each-any)))) (if cQ37a5@ls/false (apply (lambda (cQ37a7@e cQ37a8@e*) (cQ3052@bless (let cQ37af@f ((cQ37ab@e cQ37a7@e) (cQ37ac@e* cQ37a8@e*)) (if (null? cQ37ac@e*) (list 'begin '#f cQ37ab@e) (list 'let (list (list 't cQ37ab@e)) (list 'if 't 't (cQ37af@f (car cQ37ac@e*) (cdr cQ37ac@e*)))))))) cQ37a5@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ37a3@t))))))))) (set! cQ4b62@cQ307c@or-macro cQ307c@or-macro) (set! cQ307e@and-macro (lambda (cQ37b1@stx) (let ((cQ37b3@t cQ37b1@stx)) (let ((cQ37b5@ls/false (cQ309c@syntax-dispatch cQ37b3@t '(_)))) (if cQ37b5@ls/false (apply (lambda () '#t) cQ37b5@ls/false) (let ((cQ37b7@t cQ37b3@t)) (let ((cQ37b9@ls/false (cQ309c@syntax-dispatch cQ37b7@t '(_ any . each-any)))) (if cQ37b9@ls/false (apply (lambda (cQ37bb@e cQ37bc@e*) (cQ3052@bless (let cQ37c3@f ((cQ37bf@e cQ37bb@e) (cQ37c0@e* cQ37bc@e*)) (if (null? cQ37c0@e*) (list 'begin '#f cQ37bf@e) (cons 'if (cons cQ37bf@e (cons (cQ37c3@f (car cQ37c0@e*) (cdr cQ37c0@e*)) '(#f)))))))) cQ37b9@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ37b7@t))))))))) (set! cQ4b63@cQ307e@and-macro cQ307e@and-macro) (set! cQ3080@cond-macro (lambda (cQ37c5@stx) (let ((cQ37c7@t cQ37c5@stx)) (let ((cQ37c9@ls/false (cQ309c@syntax-dispatch cQ37c7@t '(_ any . each-any)))) (if cQ37c9@ls/false (apply (lambda (cQ37cb@cls cQ37cc@cls*) (cQ3052@bless (let cQ37d3@f ((cQ37cf@cls cQ37cb@cls) (cQ37d0@cls* cQ37cc@cls*)) (if (null? cQ37d0@cls*) (let ((cQ37d5@t cQ37cf@cls)) (let ((cQ37d7@ls/false (cQ309c@syntax-dispatch cQ37d5@t '(#(scheme-id else) any . each-any)))) (if cQ37d7@ls/false (apply (lambda (cQ37d9@e cQ37da@e*) (cons 'begin (cons cQ37d9@e cQ37da@e*))) cQ37d7@ls/false) (let ((cQ37dd@t cQ37d5@t)) (let ((cQ37df@ls/false (cQ309c@syntax-dispatch cQ37dd@t '(any #(scheme-id =>) any)))) (if cQ37df@ls/false (apply (lambda (cQ37e1@e cQ37e2@p) (list 'let (list (list 't cQ37e1@e)) (list 'if 't (cons cQ37e2@p '(t))))) cQ37df@ls/false) (let ((cQ37e5@t cQ37dd@t)) (let ((cQ37e7@ls/false (cQ309c@syntax-dispatch cQ37e5@t '(any)))) (if cQ37e7@ls/false (apply (lambda (cQ37e9@e) (cons 'or (cons cQ37e9@e '((if #f #f))))) cQ37e7@ls/false) (let ((cQ37eb@t cQ37e5@t)) (let ((cQ37ed@ls/false (cQ309c@syntax-dispatch cQ37eb@t '(any . each-any)))) (if cQ37ed@ls/false (apply (lambda (cQ37ef@e cQ37f0@e*) (list 'if cQ37ef@e (cons 'begin cQ37f0@e*))) cQ37ed@ls/false) (let ((cQ37f3@t cQ37eb@t)) (let ((cQ37f5@ls/false (cQ309c@syntax-dispatch cQ37f3@t '_))) (if cQ37f5@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid last clause" cQ37c5@stx)) cQ37f5@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ37f3@t)))))))))))))))) (let ((cQ37f7@t cQ37cf@cls)) (let ((cQ37f9@ls/false (cQ309c@syntax-dispatch cQ37f7@t '(#(scheme-id else) any . each-any)))) (if cQ37f9@ls/false (apply (lambda (cQ37fb@e cQ37fc@e*) (cQ317c@syntax-violation '#f '"incorrect position of keyword else" cQ37c5@stx)) cQ37f9@ls/false) (let ((cQ37ff@t cQ37f7@t)) (let ((cQ3801@ls/false (cQ309c@syntax-dispatch cQ37ff@t '(any #(scheme-id =>) any)))) (if cQ3801@ls/false (apply (lambda (cQ3803@e cQ3804@p) (list 'let (list (list 't cQ3803@e)) (list 'if 't (cons cQ3804@p '(t)) (cQ37d3@f (car cQ37d0@cls*) (cdr cQ37d0@cls*))))) cQ3801@ls/false) (let ((cQ3807@t cQ37ff@t)) (let ((cQ3809@ls/false (cQ309c@syntax-dispatch cQ3807@t '(any)))) (if cQ3809@ls/false (apply (lambda (cQ380b@e) (list 'or cQ380b@e (cQ37d3@f (car cQ37d0@cls*) (cdr cQ37d0@cls*)))) cQ3809@ls/false) (let ((cQ380d@t cQ3807@t)) (let ((cQ380f@ls/false (cQ309c@syntax-dispatch cQ380d@t '(any . each-any)))) (if cQ380f@ls/false (apply (lambda (cQ3811@e cQ3812@e*) (list 'if cQ3811@e (cons 'begin cQ3812@e*) (cQ37d3@f (car cQ37d0@cls*) (cdr cQ37d0@cls*)))) cQ380f@ls/false) (let ((cQ3815@t cQ380d@t)) (let ((cQ3817@ls/false (cQ309c@syntax-dispatch cQ3815@t '_))) (if cQ3817@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid last clause" cQ37c5@stx)) cQ3817@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3815@t)))))))))))))))))))) cQ37c9@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ37c7@t)))))) (set! cQ4b64@cQ3080@cond-macro cQ3080@cond-macro) (set! cQ3082@do-include (lambda (cQ3819@stx cQ381a@id cQ381b@filename) (let ((cQ381f@filename (cQ2ea9@stx->datum cQ381b@filename))) (begin (if (not (and (string? cQ381f@filename) (cQ2e95@id? cQ381a@id))) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3819@stx) (void)) (cons (cQ3052@bless 'begin) (with-input-from-file cQ381f@filename (lambda () (let cQ3823@f ((cQ3821@ls '())) (let ((cQ3825@x (cQ29c6@cQ2896@read-annotated))) (if (eof-object? cQ3825@x) (reverse cQ3821@ls) (cQ3823@f (cons (cQ2e75@datum->stx cQ381a@id cQ3825@x) cQ3821@ls)))))))))))) (set! cQ4b65@cQ3082@do-include cQ3082@do-include) (set! cQ3084@include-macro (lambda (cQ3827@e) (let ((cQ3829@t cQ3827@e)) (let ((cQ382b@ls/false (cQ309c@syntax-dispatch cQ3829@t '(any any)))) (if cQ382b@ls/false (apply (lambda (cQ382d@id cQ382e@filename) (cQ3082@do-include cQ3827@e cQ382d@id cQ382e@filename)) cQ382b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3829@t)))))) (set! cQ4b66@cQ3084@include-macro cQ3084@include-macro) (set! cQ3086@include-into-macro (lambda (cQ3831@e) (let ((cQ3833@t cQ3831@e)) (let ((cQ3835@ls/false (cQ309c@syntax-dispatch cQ3833@t '(_ any any)))) (if cQ3835@ls/false (apply (lambda (cQ3837@id cQ3838@filename) (cQ3082@do-include cQ3831@e cQ3837@id cQ3838@filename)) cQ3835@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3833@t)))))) (set! cQ4b67@cQ3086@include-into-macro cQ3086@include-into-macro) (set! cQ3088@syntax-rules-macro (lambda (cQ383b@e) (let ((cQ383d@t cQ383b@e)) (let ((cQ383f@ls/false (cQ309c@syntax-dispatch cQ383d@t '(_ each-any . #(each (any any)))))) (if cQ383f@ls/false (apply (lambda (cQ3841@lits cQ3842@pat* cQ3843@tmp*) (begin (cQ30a2@verify-literals cQ3841@lits cQ383b@e) (cQ3052@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons cQ3841@lits (map (lambda (cQ3847@pat cQ3848@tmp) (let ((cQ384b@t cQ3847@pat)) (let ((cQ384d@ls/false (cQ309c@syntax-dispatch cQ384b@t '(_ . any)))) (if cQ384d@ls/false (apply (lambda (cQ384f@rest) (list (cons 'g cQ384f@rest) (list 'syntax cQ3848@tmp))) cQ384d@ls/false) (let ((cQ3851@t cQ384b@t)) (let ((cQ3853@ls/false (cQ309c@syntax-dispatch cQ3851@t '_))) (if cQ3853@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid syntax-rules pattern" cQ383b@e cQ3847@pat)) cQ3853@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3851@t)))))))) cQ3842@pat* cQ3843@tmp*)))))))) cQ383f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ383d@t)))))) (set! cQ4b68@cQ3088@syntax-rules-macro cQ3088@syntax-rules-macro) (set! cQ308a@quasiquote-macro (letrec* ((cQ3856@datum (lambda (cQ3957@x) (list (cQ3024@scheme-stx 'quote) (cQ2e7d@mkstx cQ3957@x '() '() '())))) (cQ3872@quasicons* (lambda (cQ394f@x cQ3950@y) (let cQ3955@f ((cQ3953@x cQ394f@x)) (if (null? cQ3953@x) cQ3950@y (cQ3874@quasicons (car cQ3953@x) (cQ3955@f (cdr cQ3953@x))))))) (cQ3874@quasicons (lambda (cQ3929@x cQ392a@y) (let ((cQ392d@t cQ392a@y)) (let ((cQ392f@ls/false (cQ309c@syntax-dispatch cQ392d@t '(#(scheme-id quote) any)))) (if cQ392f@ls/false (apply (lambda (cQ3931@dy) (let ((cQ3933@t cQ3929@x)) (let ((cQ3935@ls/false (cQ309c@syntax-dispatch cQ3933@t '(#(scheme-id quote) any)))) (if cQ3935@ls/false (apply (lambda (cQ3937@dx) (list (cQ3024@scheme-stx 'quote) (cons cQ3937@dx cQ3931@dy))) cQ3935@ls/false) (let ((cQ3939@t cQ3933@t)) (let ((cQ393b@ls/false (cQ309c@syntax-dispatch cQ3939@t '_))) (if cQ393b@ls/false (apply (lambda () (let ((cQ393d@t cQ3931@dy)) (let ((cQ393f@ls/false (cQ309c@syntax-dispatch cQ393d@t '()))) (if cQ393f@ls/false (apply (lambda () (list (cQ3024@scheme-stx 'list) cQ3929@x)) cQ393f@ls/false) (let ((cQ3941@t cQ393d@t)) (let ((cQ3943@ls/false (cQ309c@syntax-dispatch cQ3941@t '_))) (if cQ3943@ls/false (apply (lambda () (list (cQ3024@scheme-stx 'cons) cQ3929@x cQ392a@y)) cQ3943@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3941@t)))))))) cQ393b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3939@t)))))))) cQ392f@ls/false) (let ((cQ3945@t cQ392d@t)) (let ((cQ3947@ls/false (cQ309c@syntax-dispatch cQ3945@t '(#(scheme-id list) . each-any)))) (if cQ3947@ls/false (apply (lambda (cQ3949@stuff) (cons* (cQ3024@scheme-stx 'list) cQ3929@x cQ3949@stuff)) cQ3947@ls/false) (let ((cQ394b@t cQ3945@t)) (let ((cQ394d@ls/false (cQ309c@syntax-dispatch cQ394b@t '_))) (if cQ394d@ls/false (apply (lambda () (list (cQ3024@scheme-stx 'cons) cQ3929@x cQ392a@y)) cQ394d@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ394b@t)))))))))))) (cQ3876@quasiappend (lambda (cQ390f@x cQ3910@y) (let ((cQ3913@ls (let cQ3917@f ((cQ3915@x cQ390f@x)) (if (null? cQ3915@x) (let ((cQ3919@t cQ3910@y)) (let ((cQ391b@ls/false (cQ309c@syntax-dispatch cQ3919@t '(#(scheme-id quote) ())))) (if cQ391b@ls/false (apply (lambda () '()) cQ391b@ls/false) (let ((cQ391d@t cQ3919@t)) (let ((cQ391f@ls/false (cQ309c@syntax-dispatch cQ391d@t '_))) (if cQ391f@ls/false (apply (lambda () (list cQ3910@y)) cQ391f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ391d@t))))))) (let ((cQ3921@t (car cQ3915@x))) (let ((cQ3923@ls/false (cQ309c@syntax-dispatch cQ3921@t '(#(scheme-id quote) ())))) (if cQ3923@ls/false (apply (lambda () (cQ3917@f (cdr cQ3915@x))) cQ3923@ls/false) (let ((cQ3925@t cQ3921@t)) (let ((cQ3927@ls/false (cQ309c@syntax-dispatch cQ3925@t '_))) (if cQ3927@ls/false (apply (lambda () (cons (car cQ3915@x) (cQ3917@f (cdr cQ3915@x)))) cQ3927@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3925@t))))))))))) (if (null? cQ3913@ls) (list (cQ3024@scheme-stx 'quote) '()) (if (null? (cdr cQ3913@ls)) (car cQ3913@ls) (cons* (cQ3024@scheme-stx 'append) cQ3913@ls)))))) (cQ3878@quasivector (lambda (cQ38dd@x) (let ((cQ38df@pat-x cQ38dd@x)) (let ((cQ38e1@t cQ38df@pat-x)) (let ((cQ38e3@ls/false (cQ309c@syntax-dispatch cQ38e1@t '(#(scheme-id quote) each-any)))) (if cQ38e3@ls/false (apply (lambda (cQ38e5@x*) (list (cQ3024@scheme-stx 'quote) (list->vector cQ38e5@x*))) cQ38e3@ls/false) (let ((cQ38e7@t cQ38e1@t)) (let ((cQ38e9@ls/false (cQ309c@syntax-dispatch cQ38e7@t '_))) (if cQ38e9@ls/false (apply (lambda () (let cQ38f1@f ((cQ38eb@x cQ38dd@x) (cQ38ec@k (lambda (cQ38ef@ls) (cons* (cQ3024@scheme-stx 'vector) cQ38ef@ls)))) (let ((cQ38f3@t cQ38eb@x)) (let ((cQ38f5@ls/false (cQ309c@syntax-dispatch cQ38f3@t '(#(scheme-id quote) each-any)))) (if cQ38f5@ls/false (apply (lambda (cQ38f7@x*) (cQ38ec@k (map (lambda (cQ38f9@x) (list (cQ3024@scheme-stx 'quote) cQ38f9@x)) cQ38f7@x*))) cQ38f5@ls/false) (let ((cQ38fb@t cQ38f3@t)) (let ((cQ38fd@ls/false (cQ309c@syntax-dispatch cQ38fb@t '(#(scheme-id list) . each-any)))) (if cQ38fd@ls/false (apply (lambda (cQ38ff@x*) (cQ38ec@k cQ38ff@x*)) cQ38fd@ls/false) (let ((cQ3901@t cQ38fb@t)) (let ((cQ3903@ls/false (cQ309c@syntax-dispatch cQ3901@t '(#(scheme-id cons) any any)))) (if cQ3903@ls/false (apply (lambda (cQ3905@x cQ3906@y) (cQ38f1@f cQ3906@y (lambda (cQ3909@ls) (cQ38ec@k (cons cQ3905@x cQ3909@ls))))) cQ3903@ls/false) (let ((cQ390b@t cQ3901@t)) (let ((cQ390d@ls/false (cQ309c@syntax-dispatch cQ390b@t '_))) (if cQ390d@ls/false (apply (lambda () (list (cQ3024@scheme-stx 'list->vector) cQ38df@pat-x)) cQ390d@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ390b@t))))))))))))))) cQ38e9@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ38e7@t)))))))))) (cQ387a@vquasi (lambda (cQ38bb@p cQ38bc@lev) (let ((cQ38bf@t cQ38bb@p)) (let ((cQ38c1@ls/false (cQ309c@syntax-dispatch cQ38bf@t '(any . any)))) (if cQ38c1@ls/false (apply (lambda (cQ38c3@p cQ38c4@q) (let ((cQ38c7@t cQ38c3@p)) (let ((cQ38c9@ls/false (cQ309c@syntax-dispatch cQ38c7@t '(#(scheme-id unquote) . each-any)))) (if cQ38c9@ls/false (apply (lambda (cQ38cb@p) (if (= cQ38bc@lev '0) (cQ3872@quasicons* cQ38cb@p (cQ387a@vquasi cQ38c4@q cQ38bc@lev)) (cQ3874@quasicons (cQ3874@quasicons (cQ3856@datum 'unquote) (cQ387c@quasi cQ38cb@p (- cQ38bc@lev '1))) (cQ387a@vquasi cQ38c4@q cQ38bc@lev)))) cQ38c9@ls/false) (let ((cQ38cd@t cQ38c7@t)) (let ((cQ38cf@ls/false (cQ309c@syntax-dispatch cQ38cd@t '(#(scheme-id unquote-splicing) . each-any)))) (if cQ38cf@ls/false (apply (lambda (cQ38d1@p) (if (= cQ38bc@lev '0) (cQ3876@quasiappend cQ38d1@p (cQ387a@vquasi cQ38c4@q cQ38bc@lev)) (cQ3874@quasicons (cQ3874@quasicons (cQ3856@datum 'unquote-splicing) (cQ387c@quasi cQ38d1@p (- cQ38bc@lev '1))) (cQ387a@vquasi cQ38c4@q cQ38bc@lev)))) cQ38cf@ls/false) (let ((cQ38d3@t cQ38cd@t)) (let ((cQ38d5@ls/false (cQ309c@syntax-dispatch cQ38d3@t 'any))) (if cQ38d5@ls/false (apply (lambda (cQ38d7@p) (cQ3874@quasicons (cQ387c@quasi cQ38d7@p cQ38bc@lev) (cQ387a@vquasi cQ38c4@q cQ38bc@lev))) cQ38d5@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ38d3@t))))))))))) cQ38c1@ls/false) (let ((cQ38d9@t cQ38bf@t)) (let ((cQ38db@ls/false (cQ309c@syntax-dispatch cQ38d9@t '()))) (if cQ38db@ls/false (apply (lambda () (list (cQ3024@scheme-stx 'quote) '())) cQ38db@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ38d9@t))))))))) (cQ387c@quasi (lambda (cQ3885@p cQ3886@lev) (let ((cQ3889@t cQ3885@p)) (let ((cQ388b@ls/false (cQ309c@syntax-dispatch cQ3889@t '(#(scheme-id unquote) any)))) (if cQ388b@ls/false (apply (lambda (cQ388d@p) (if (= cQ3886@lev '0) cQ388d@p (cQ3874@quasicons (cQ3856@datum 'unquote) (cQ387c@quasi (list cQ388d@p) (- cQ3886@lev '1))))) cQ388b@ls/false) (let ((cQ388f@t cQ3889@t)) (let ((cQ3891@ls/false (cQ309c@syntax-dispatch cQ388f@t '((#(scheme-id unquote) . each-any) . any)))) (if cQ3891@ls/false (apply (lambda (cQ3893@p cQ3894@q) (if (= cQ3886@lev '0) (cQ3872@quasicons* cQ3893@p (cQ387c@quasi cQ3894@q cQ3886@lev)) (cQ3874@quasicons (cQ3874@quasicons (cQ3856@datum 'unquote) (cQ387c@quasi cQ3893@p (- cQ3886@lev '1))) (cQ387c@quasi cQ3894@q cQ3886@lev)))) cQ3891@ls/false) (let ((cQ3897@t cQ388f@t)) (let ((cQ3899@ls/false (cQ309c@syntax-dispatch cQ3897@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if cQ3899@ls/false (apply (lambda (cQ389b@p cQ389c@q) (if (= cQ3886@lev '0) (cQ3876@quasiappend cQ389b@p (cQ387c@quasi cQ389c@q cQ3886@lev)) (cQ3874@quasicons (cQ3874@quasicons (cQ3856@datum 'unquote-splicing) (cQ387c@quasi cQ389b@p (- cQ3886@lev '1))) (cQ387c@quasi cQ389c@q cQ3886@lev)))) cQ3899@ls/false) (let ((cQ389f@t cQ3897@t)) (let ((cQ38a1@ls/false (cQ309c@syntax-dispatch cQ389f@t '(#(scheme-id quasiquote) any)))) (if cQ38a1@ls/false (apply (lambda (cQ38a3@p) (cQ3874@quasicons (cQ3856@datum 'quasiquote) (cQ387c@quasi (list cQ38a3@p) (+ cQ3886@lev '1)))) cQ38a1@ls/false) (let ((cQ38a5@t cQ389f@t)) (let ((cQ38a7@ls/false (cQ309c@syntax-dispatch cQ38a5@t '(any . any)))) (if cQ38a7@ls/false (apply (lambda (cQ38a9@p cQ38aa@q) (cQ3874@quasicons (cQ387c@quasi cQ38a9@p cQ3886@lev) (cQ387c@quasi cQ38aa@q cQ3886@lev))) cQ38a7@ls/false) (let ((cQ38ad@t cQ38a5@t)) (let ((cQ38af@ls/false (cQ309c@syntax-dispatch cQ38ad@t '#(vector each-any)))) (if (and cQ38af@ls/false (apply (lambda (cQ38b1@x) (not (cQ2e61@stx? cQ38b1@x))) cQ38af@ls/false)) (apply (lambda (cQ38b3@x) (cQ3878@quasivector (cQ387a@vquasi cQ38b3@x cQ3886@lev))) cQ38af@ls/false) (let ((cQ38b5@t cQ38ad@t)) (let ((cQ38b7@ls/false (cQ309c@syntax-dispatch cQ38b5@t 'any))) (if cQ38b7@ls/false (apply (lambda (cQ38b9@p) (list (cQ3024@scheme-stx 'quote) cQ38b9@p)) cQ38b7@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ38b5@t))))))))))))))))))))))))) (lambda (cQ387d@x) (let ((cQ387f@t cQ387d@x)) (let ((cQ3881@ls/false (cQ309c@syntax-dispatch cQ387f@t '(_ any)))) (if cQ3881@ls/false (apply (lambda (cQ3883@e) (cQ387c@quasi cQ3883@e '0)) cQ3881@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ387f@t))))))) (set! cQ4b69@cQ308a@quasiquote-macro cQ308a@quasiquote-macro) (set! cQ308c@quasisyntax-macro (letrec* ((cQ395a@quasi (lambda (cQ3975@p cQ3976@lev) (let ((cQ3979@t cQ3975@p)) (let ((cQ397b@ls/false (cQ309c@syntax-dispatch cQ3979@t '(#(scheme-id unsyntax) any)))) (if cQ397b@ls/false (apply (lambda (cQ397d@p) (if (= cQ3976@lev '0) (let ((cQ397f@g (gensym))) (values (list cQ397f@g) (list cQ397d@p) cQ397f@g)) (call-with-values (lambda () (cQ395a@quasi cQ397d@p (- cQ3976@lev '1))) (lambda (cQ3987@cQ3982 cQ3988@cQ3984 cQ3989@cQ3986) (let ((cQ398d@p cQ3989@cQ3986) (cQ398e@rhs* cQ3988@cQ3984) (cQ398f@lhs* cQ3987@cQ3982)) (values cQ398f@lhs* cQ398e@rhs* (list 'unsyntax cQ398d@p))))))) cQ397b@ls/false) (let ((cQ3993@t cQ3979@t)) (let ((cQ3995@ls/false (cQ309c@syntax-dispatch cQ3993@t '#(scheme-id unsyntax)))) (if (and cQ3995@ls/false (apply (lambda () (= cQ3976@lev '0)) cQ3995@ls/false)) (apply (lambda () (cQ317c@syntax-violation '#f '"incorrect use of unsyntax" cQ3975@p)) cQ3995@ls/false) (let ((cQ3997@t cQ3993@t)) (let ((cQ3999@ls/false (cQ309c@syntax-dispatch cQ3997@t '((#(scheme-id unsyntax) . each-any) . any)))) (if cQ3999@ls/false (apply (lambda (cQ399b@p* cQ399c@q) (call-with-values (lambda () (cQ395a@quasi cQ399c@q cQ3976@lev)) (lambda (cQ39a5@cQ39a0 cQ39a6@cQ39a2 cQ39a7@cQ39a4) (let ((cQ39ab@q cQ39a7@cQ39a4) (cQ39ac@rhs* cQ39a6@cQ39a2) (cQ39ad@lhs* cQ39a5@cQ39a0)) (if (= cQ3976@lev '0) (let ((cQ39b1@g* (map (lambda (cQ39b3@x) (gensym)) cQ399b@p*))) (values (append cQ39b1@g* cQ39ad@lhs*) (append cQ399b@p* cQ39ac@rhs*) (append cQ39b1@g* cQ39ab@q))) (call-with-values (lambda () (cQ395a@quasi cQ399b@p* (- cQ3976@lev '1))) (lambda (cQ39bb@cQ39b6 cQ39bc@cQ39b8 cQ39bd@cQ39ba) (let ((cQ39c1@p* cQ39bd@cQ39ba) (cQ39c2@rhs2* cQ39bc@cQ39b8) (cQ39c3@lhs2* cQ39bb@cQ39b6)) (values (append cQ39c3@lhs2* cQ39ad@lhs*) (append cQ39c2@rhs2* cQ39ac@rhs*) (cons (cons 'unsyntax cQ39c1@p*) cQ39ab@q)))))))))) cQ3999@ls/false) (let ((cQ39c7@t cQ3997@t)) (let ((cQ39c9@ls/false (cQ309c@syntax-dispatch cQ39c7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if cQ39c9@ls/false (apply (lambda (cQ39cb@p* cQ39cc@q) (call-with-values (lambda () (cQ395a@quasi cQ39cc@q cQ3976@lev)) (lambda (cQ39d5@cQ39d0 cQ39d6@cQ39d2 cQ39d7@cQ39d4) (let ((cQ39db@q cQ39d7@cQ39d4) (cQ39dc@rhs* cQ39d6@cQ39d2) (cQ39dd@lhs* cQ39d5@cQ39d0)) (if (= cQ3976@lev '0) (let ((cQ39e1@g* (map (lambda (cQ39e3@x) (gensym)) cQ39cb@p*))) (values (append (map (lambda (cQ39e5@g) (cons cQ39e5@g '(...))) cQ39e1@g*) cQ39dd@lhs*) (append cQ39cb@p* cQ39dc@rhs*) (append (apply append (map (lambda (cQ39e7@g) (cons cQ39e7@g '(...))) cQ39e1@g*)) cQ39db@q))) (call-with-values (lambda () (cQ395a@quasi cQ39cb@p* (- cQ3976@lev '1))) (lambda (cQ39ef@cQ39ea cQ39f0@cQ39ec cQ39f1@cQ39ee) (let ((cQ39f5@p* cQ39f1@cQ39ee) (cQ39f6@rhs2* cQ39f0@cQ39ec) (cQ39f7@lhs2* cQ39ef@cQ39ea)) (values (append cQ39f7@lhs2* cQ39dd@lhs*) (append cQ39f6@rhs2* cQ39dc@rhs*) (cons (cons 'unsyntax-splicing cQ39f5@p*) cQ39db@q)))))))))) cQ39c9@ls/false) (let ((cQ39fb@t cQ39c7@t)) (let ((cQ39fd@ls/false (cQ309c@syntax-dispatch cQ39fb@t '#(scheme-id unsyntax-splicing)))) (if (and cQ39fd@ls/false (apply (lambda () (= cQ3976@lev '0)) cQ39fd@ls/false)) (apply (lambda () (cQ317c@syntax-violation '#f '"incorrect use of unsyntax-splicing" cQ3975@p)) cQ39fd@ls/false) (let ((cQ39ff@t cQ39fb@t)) (let ((cQ3a01@ls/false (cQ309c@syntax-dispatch cQ39ff@t '(#(scheme-id quasisyntax) any)))) (if cQ3a01@ls/false (apply (lambda (cQ3a03@p) (call-with-values (lambda () (cQ395a@quasi cQ3a03@p (+ cQ3976@lev '1))) (lambda (cQ3a0b@cQ3a06 cQ3a0c@cQ3a08 cQ3a0d@cQ3a0a) (let ((cQ3a11@p cQ3a0d@cQ3a0a) (cQ3a12@rhs* cQ3a0c@cQ3a08) (cQ3a13@lhs* cQ3a0b@cQ3a06)) (values cQ3a13@lhs* cQ3a12@rhs* (list 'quasisyntax cQ3a11@p)))))) cQ3a01@ls/false) (let ((cQ3a17@t cQ39ff@t)) (let ((cQ3a19@ls/false (cQ309c@syntax-dispatch cQ3a17@t '(any . any)))) (if cQ3a19@ls/false (apply (lambda (cQ3a1b@p cQ3a1c@q) (call-with-values (lambda () (cQ395a@quasi cQ3a1b@p cQ3976@lev)) (lambda (cQ3a2b@cQ3a20 cQ3a2c@cQ3a22 cQ3a2d@cQ3a24) (call-with-values (lambda () (cQ395a@quasi cQ3a1c@q cQ3976@lev)) (lambda (cQ3a31@cQ3a26 cQ3a32@cQ3a28 cQ3a33@cQ3a2a) (let ((cQ3a37@q cQ3a33@cQ3a2a) (cQ3a38@rhs2* cQ3a32@cQ3a28) (cQ3a39@lhs2* cQ3a31@cQ3a26) (cQ3a3a@p cQ3a2d@cQ3a24) (cQ3a3b@rhs* cQ3a2c@cQ3a22) (cQ3a3c@lhs* cQ3a2b@cQ3a20)) (values (append cQ3a39@lhs2* cQ3a3c@lhs*) (append cQ3a38@rhs2* cQ3a3b@rhs*) (cons cQ3a3a@p cQ3a37@q)))))))) cQ3a19@ls/false) (let ((cQ3a43@t cQ3a17@t)) (let ((cQ3a45@ls/false (cQ309c@syntax-dispatch cQ3a43@t '#(vector each-any)))) (if cQ3a45@ls/false (apply (lambda (cQ3a47@x*) (call-with-values (lambda () (cQ395a@quasi cQ3a47@x* cQ3976@lev)) (lambda (cQ3a4f@cQ3a4a cQ3a50@cQ3a4c cQ3a51@cQ3a4e) (let ((cQ3a55@x* cQ3a51@cQ3a4e) (cQ3a56@rhs* cQ3a50@cQ3a4c) (cQ3a57@lhs* cQ3a4f@cQ3a4a)) (values cQ3a57@lhs* cQ3a56@rhs* (list->vector cQ3a55@x*)))))) cQ3a45@ls/false) (let ((cQ3a5b@t cQ3a43@t)) (let ((cQ3a5d@ls/false (cQ309c@syntax-dispatch cQ3a5b@t '_))) (if cQ3a5d@ls/false (apply (lambda () (values '() '() cQ3975@p)) cQ3a5d@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3a5b@t))))))))))))))))))))))))))))))) (lambda (cQ395b@x) (let ((cQ395d@t cQ395b@x)) (let ((cQ395f@ls/false (cQ309c@syntax-dispatch cQ395d@t '(_ any)))) (if cQ395f@ls/false (apply (lambda (cQ3961@e) (call-with-values (lambda () (cQ395a@quasi cQ3961@e '0)) (lambda (cQ3969@cQ3964 cQ396a@cQ3966 cQ396b@cQ3968) (let ((cQ396f@v cQ396b@cQ3968) (cQ3970@rhs* cQ396a@cQ3966) (cQ3971@lhs* cQ3969@cQ3964)) (cQ3052@bless (list 'syntax-case (cons 'list cQ3970@rhs*) '() (list cQ3971@lhs* (list 'syntax cQ396f@v)))))))) cQ395f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ395d@t))))))) (set! cQ4b6a@cQ308c@quasisyntax-macro cQ308c@quasisyntax-macro) (set! cQ308e@define-struct-macro (lambda (cQ3a5f@stx) (cQ317c@syntax-violation '#f '"define-struct not supported" cQ3a5f@stx))) (set! cQ4b6b@cQ308e@define-struct-macro cQ308e@define-struct-macro) (set! cQ3090@define-record-type-macro (lambda (cQ3a61@x) (letrec* ((cQ3a64@id (lambda (cQ3c57@ctxt . cQ3c59@str*) (cQ3180@datum->syntax cQ3c57@ctxt (string->symbol (apply string-append (map (lambda (cQ3c5b@x) (if (symbol? cQ3c5b@x) (symbol->string cQ3c5b@x) (if (string? cQ3c5b@x) cQ3c5b@x (assertion-violation 'define-record-type '"BUG")))) cQ3c59@str*)))))) (cQ3a66@get-record-name (lambda (cQ3c45@spec) (let ((cQ3c47@t cQ3c45@spec)) (let ((cQ3c49@ls/false (cQ309c@syntax-dispatch cQ3c47@t '(any any any)))) (if cQ3c49@ls/false (apply (lambda (cQ3c4b@foo cQ3c4c@make-foo cQ3c4d@foo?) cQ3c4b@foo) cQ3c49@ls/false) (let ((cQ3c51@t cQ3c47@t)) (let ((cQ3c53@ls/false (cQ309c@syntax-dispatch cQ3c51@t 'any))) (if cQ3c53@ls/false (apply (lambda (cQ3c55@foo) cQ3c55@foo) cQ3c53@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3c51@t))))))))) (cQ3a68@get-record-constructor-name (lambda (cQ3c31@spec) (let ((cQ3c33@t cQ3c31@spec)) (let ((cQ3c35@ls/false (cQ309c@syntax-dispatch cQ3c33@t '(any any any)))) (if cQ3c35@ls/false (apply (lambda (cQ3c37@foo cQ3c38@make-foo cQ3c39@foo?) cQ3c38@make-foo) cQ3c35@ls/false) (let ((cQ3c3d@t cQ3c33@t)) (let ((cQ3c3f@ls/false (cQ309c@syntax-dispatch cQ3c3d@t 'any))) (if (and cQ3c3f@ls/false (apply (lambda (cQ3c41@foo) (cQ2e95@id? cQ3c41@foo)) cQ3c3f@ls/false)) (apply (lambda (cQ3c43@foo) (cQ3a64@id cQ3c43@foo '"make-" (cQ2ea9@stx->datum cQ3c43@foo))) cQ3c3f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3c3d@t))))))))) (cQ3a6a@get-record-predicate-name (lambda (cQ3c1d@spec) (let ((cQ3c1f@t cQ3c1d@spec)) (let ((cQ3c21@ls/false (cQ309c@syntax-dispatch cQ3c1f@t '(any any any)))) (if cQ3c21@ls/false (apply (lambda (cQ3c23@foo cQ3c24@make-foo cQ3c25@foo?) cQ3c25@foo?) cQ3c21@ls/false) (let ((cQ3c29@t cQ3c1f@t)) (let ((cQ3c2b@ls/false (cQ309c@syntax-dispatch cQ3c29@t 'any))) (if (and cQ3c2b@ls/false (apply (lambda (cQ3c2d@foo) (cQ2e95@id? cQ3c2d@foo)) cQ3c2b@ls/false)) (apply (lambda (cQ3c2f@foo) (cQ3a64@id cQ3c2f@foo (cQ2ea9@stx->datum cQ3c2f@foo) '"?")) cQ3c2b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3c29@t))))))))) (cQ3a6c@get-clause (lambda (cQ3c0b@id cQ3c0c@ls) (let ((cQ3c0f@t cQ3c0c@ls)) (let ((cQ3c11@ls/false (cQ309c@syntax-dispatch cQ3c0f@t '()))) (if cQ3c11@ls/false (apply (lambda () '#f) cQ3c11@ls/false) (let ((cQ3c13@t cQ3c0f@t)) (let ((cQ3c15@ls/false (cQ309c@syntax-dispatch cQ3c13@t '((any . any) . any)))) (if cQ3c15@ls/false (apply (lambda (cQ3c17@x cQ3c18@rest cQ3c19@ls) (if (cQ2e9b@free-id=? (cQ3052@bless cQ3c0b@id) cQ3c17@x) (cons cQ3c17@x cQ3c18@rest) (cQ3a6c@get-clause cQ3c0b@id cQ3c19@ls))) cQ3c15@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3c13@t))))))))) (cQ3a6e@foo-rtd-code (lambda (cQ3bb9@name cQ3bba@clause* cQ3bbb@parent-rtd-code) (letrec* ((cQ3bc0@convert-field-spec* (lambda (cQ3bf1@ls) (list->vector (map (lambda (cQ3bf3@x) (let ((cQ3bf5@t cQ3bf3@x)) (let ((cQ3bf7@ls/false (cQ309c@syntax-dispatch cQ3bf5@t '(#(scheme-id mutable) any . any)))) (if cQ3bf7@ls/false (apply (lambda (cQ3bf9@name cQ3bfa@rest) (list 'mutable cQ3bf9@name)) cQ3bf7@ls/false) (let ((cQ3bfd@t cQ3bf5@t)) (let ((cQ3bff@ls/false (cQ309c@syntax-dispatch cQ3bfd@t '(#(scheme-id immutable) any . any)))) (if cQ3bff@ls/false (apply (lambda (cQ3c01@name cQ3c02@rest) (list 'immutable cQ3c01@name)) cQ3bff@ls/false) (let ((cQ3c05@t cQ3bfd@t)) (let ((cQ3c07@ls/false (cQ309c@syntax-dispatch cQ3c05@t 'any))) (if cQ3c07@ls/false (apply (lambda (cQ3c09@name) (list 'immutable cQ3c09@name)) cQ3c07@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3c05@t))))))))))) cQ3bf1@ls))))) (let ((cQ3bc1@uid-code (let ((cQ3bc9@t (cQ3a6c@get-clause 'nongenerative cQ3bba@clause*))) (let ((cQ3bcb@ls/false (cQ309c@syntax-dispatch cQ3bc9@t '(_)))) (if cQ3bcb@ls/false (apply (lambda () (list 'quote (gensym))) cQ3bcb@ls/false) (let ((cQ3bcd@t cQ3bc9@t)) (let ((cQ3bcf@ls/false (cQ309c@syntax-dispatch cQ3bcd@t '(_ any)))) (if cQ3bcf@ls/false (apply (lambda (cQ3bd1@uid) (list 'quote cQ3bd1@uid)) cQ3bcf@ls/false) (let ((cQ3bd3@t cQ3bcd@t)) (let ((cQ3bd5@ls/false (cQ309c@syntax-dispatch cQ3bd3@t '_))) (if cQ3bd5@ls/false (apply (lambda () '#f) cQ3bd5@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3bd3@t))))))))))) (cQ3bc2@sealed? (let ((cQ3bd7@t (cQ3a6c@get-clause 'sealed cQ3bba@clause*))) (let ((cQ3bd9@ls/false (cQ309c@syntax-dispatch cQ3bd7@t '(_ #(atom #t))))) (if cQ3bd9@ls/false (apply (lambda () '#t) cQ3bd9@ls/false) (let ((cQ3bdb@t cQ3bd7@t)) (let ((cQ3bdd@ls/false (cQ309c@syntax-dispatch cQ3bdb@t '_))) (if cQ3bdd@ls/false (apply (lambda () '#f) cQ3bdd@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3bdb@t)))))))) (cQ3bc3@opaque? (let ((cQ3bdf@t (cQ3a6c@get-clause 'opaque cQ3bba@clause*))) (let ((cQ3be1@ls/false (cQ309c@syntax-dispatch cQ3bdf@t '(_ #(atom #t))))) (if cQ3be1@ls/false (apply (lambda () '#t) cQ3be1@ls/false) (let ((cQ3be3@t cQ3bdf@t)) (let ((cQ3be5@ls/false (cQ309c@syntax-dispatch cQ3be3@t '_))) (if cQ3be5@ls/false (apply (lambda () '#f) cQ3be5@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3be3@t)))))))) (cQ3bc4@fields (let ((cQ3be7@t (cQ3a6c@get-clause 'fields cQ3bba@clause*))) (let ((cQ3be9@ls/false (cQ309c@syntax-dispatch cQ3be7@t '(_ . each-any)))) (if cQ3be9@ls/false (apply (lambda (cQ3beb@field-spec*) (list 'quote (cQ3bc0@convert-field-spec* cQ3beb@field-spec*))) cQ3be9@ls/false) (let ((cQ3bed@t cQ3be7@t)) (let ((cQ3bef@ls/false (cQ309c@syntax-dispatch cQ3bed@t '_))) (if cQ3bef@ls/false (apply (lambda () ''#()) cQ3bef@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3bed@t))))))))) (cQ3052@bless (list 'make-record-type-descriptor (list 'quote cQ3bb9@name) cQ3bbb@parent-rtd-code cQ3bc1@uid-code cQ3bc2@sealed? cQ3bc3@opaque? cQ3bc4@fields)))))) (cQ3a70@parent-rtd-code (lambda (cQ3ba1@clause*) (let ((cQ3ba3@t (cQ3a6c@get-clause 'parent cQ3ba1@clause*))) (let ((cQ3ba5@ls/false (cQ309c@syntax-dispatch cQ3ba3@t '(_ any)))) (if cQ3ba5@ls/false (apply (lambda (cQ3ba7@name) (list 'record-type-descriptor cQ3ba7@name)) cQ3ba5@ls/false) (let ((cQ3ba9@t cQ3ba3@t)) (let ((cQ3bab@ls/false (cQ309c@syntax-dispatch cQ3ba9@t '#(atom #f)))) (if cQ3bab@ls/false (apply (lambda () (let ((cQ3bad@t (cQ3a6c@get-clause 'parent-rtd cQ3ba1@clause*))) (let ((cQ3baf@ls/false (cQ309c@syntax-dispatch cQ3bad@t '(_ any any)))) (if cQ3baf@ls/false (apply (lambda (cQ3bb1@rtd cQ3bb2@rcd) cQ3bb1@rtd) cQ3baf@ls/false) (let ((cQ3bb5@t cQ3bad@t)) (let ((cQ3bb7@ls/false (cQ309c@syntax-dispatch cQ3bb5@t '#(atom #f)))) (if cQ3bb7@ls/false (apply (lambda () '#f) cQ3bb7@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3bb5@t)))))))) cQ3bab@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3ba9@t))))))))) (cQ3a72@parent-rcd-code (lambda (cQ3b89@clause*) (let ((cQ3b8b@t (cQ3a6c@get-clause 'parent cQ3b89@clause*))) (let ((cQ3b8d@ls/false (cQ309c@syntax-dispatch cQ3b8b@t '(_ any)))) (if cQ3b8d@ls/false (apply (lambda (cQ3b8f@name) (list 'record-constructor-descriptor cQ3b8f@name)) cQ3b8d@ls/false) (let ((cQ3b91@t cQ3b8b@t)) (let ((cQ3b93@ls/false (cQ309c@syntax-dispatch cQ3b91@t '#(atom #f)))) (if cQ3b93@ls/false (apply (lambda () (let ((cQ3b95@t (cQ3a6c@get-clause 'parent-rtd cQ3b89@clause*))) (let ((cQ3b97@ls/false (cQ309c@syntax-dispatch cQ3b95@t '(_ any any)))) (if cQ3b97@ls/false (apply (lambda (cQ3b99@rtd cQ3b9a@rcd) cQ3b9a@rcd) cQ3b97@ls/false) (let ((cQ3b9d@t cQ3b95@t)) (let ((cQ3b9f@ls/false (cQ309c@syntax-dispatch cQ3b9d@t '#(atom #f)))) (if cQ3b9f@ls/false (apply (lambda () '#f) cQ3b9f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3b9d@t)))))))) cQ3b93@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3b91@t))))))))) (cQ3a74@foo-rcd-code (lambda (cQ3b81@clause* cQ3b82@foo-rtd cQ3b83@protocol cQ3b84@parent-rcd-code) (list 'make-record-constructor-descriptor cQ3b82@foo-rtd cQ3b84@parent-rcd-code cQ3b83@protocol))) (cQ3a76@get-protocol-code (lambda (cQ3b75@clause*) (let ((cQ3b77@t (cQ3a6c@get-clause 'protocol cQ3b75@clause*))) (let ((cQ3b79@ls/false (cQ309c@syntax-dispatch cQ3b77@t '(_ any)))) (if cQ3b79@ls/false (apply (lambda (cQ3b7b@expr) cQ3b7b@expr) cQ3b79@ls/false) (let ((cQ3b7d@t cQ3b77@t)) (let ((cQ3b7f@ls/false (cQ309c@syntax-dispatch cQ3b7d@t '_))) (if cQ3b7f@ls/false (apply (lambda () '#f) cQ3b7f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3b7d@t))))))))) (cQ3a78@get-fields (lambda (cQ3b63@clause*) (let ((cQ3b65@t cQ3b63@clause*)) (let ((cQ3b67@ls/false (cQ309c@syntax-dispatch cQ3b65@t '()))) (if cQ3b67@ls/false (apply (lambda () '()) cQ3b67@ls/false) (let ((cQ3b69@t cQ3b65@t)) (let ((cQ3b6b@ls/false (cQ309c@syntax-dispatch cQ3b69@t '((#(scheme-id fields) . each-any) . _)))) (if cQ3b6b@ls/false (apply (lambda (cQ3b6d@f*) cQ3b6d@f*) cQ3b6b@ls/false) (let ((cQ3b6f@t cQ3b69@t)) (let ((cQ3b71@ls/false (cQ309c@syntax-dispatch cQ3b6f@t '(_ . any)))) (if cQ3b71@ls/false (apply (lambda (cQ3b73@rest) (cQ3a78@get-fields cQ3b73@rest)) cQ3b71@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3b6f@t)))))))))))) (cQ3a7a@get-mutator-indices (lambda (cQ3b4b@fields) (let cQ3b51@f ((cQ3b4d@fields cQ3b4b@fields) (cQ3b4e@i '0)) (let ((cQ3b53@t cQ3b4d@fields)) (let ((cQ3b55@ls/false (cQ309c@syntax-dispatch cQ3b53@t '()))) (if cQ3b55@ls/false (apply (lambda () '()) cQ3b55@ls/false) (let ((cQ3b57@t cQ3b53@t)) (let ((cQ3b59@ls/false (cQ309c@syntax-dispatch cQ3b57@t '((#(scheme-id mutable) . _) . any)))) (if cQ3b59@ls/false (apply (lambda (cQ3b5b@rest) (cons cQ3b4e@i (cQ3b51@f cQ3b5b@rest (+ cQ3b4e@i '1)))) cQ3b59@ls/false) (let ((cQ3b5d@t cQ3b57@t)) (let ((cQ3b5f@ls/false (cQ309c@syntax-dispatch cQ3b5d@t '(_ . any)))) (if cQ3b5f@ls/false (apply (lambda (cQ3b61@rest) (cQ3b51@f cQ3b61@rest (+ cQ3b4e@i '1))) cQ3b5f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3b5d@t))))))))))))) (cQ3a7c@get-mutators (lambda (cQ3b21@foo cQ3b22@fields) (letrec* ((cQ3b26@gen-name (lambda (cQ3b49@x) (cQ3180@datum->syntax cQ3b21@foo (string->symbol (string-append (symbol->string (cQ3182@syntax->datum cQ3b21@foo)) '"-" (symbol->string (cQ3182@syntax->datum cQ3b49@x)) '"-set!")))))) (let cQ3b29@f ((cQ3b27@fields cQ3b22@fields)) (let ((cQ3b2b@t cQ3b27@fields)) (let ((cQ3b2d@ls/false (cQ309c@syntax-dispatch cQ3b2b@t '()))) (if cQ3b2d@ls/false (apply (lambda () '()) cQ3b2d@ls/false) (let ((cQ3b2f@t cQ3b2b@t)) (let ((cQ3b31@ls/false (cQ309c@syntax-dispatch cQ3b2f@t '((#(scheme-id mutable) any any any) . any)))) (if cQ3b31@ls/false (apply (lambda (cQ3b33@name cQ3b34@accessor cQ3b35@mutator cQ3b36@rest) (cons cQ3b35@mutator (cQ3b29@f cQ3b36@rest))) cQ3b31@ls/false) (let ((cQ3b3b@t cQ3b2f@t)) (let ((cQ3b3d@ls/false (cQ309c@syntax-dispatch cQ3b3b@t '((#(scheme-id mutable) any) . any)))) (if cQ3b3d@ls/false (apply (lambda (cQ3b3f@name cQ3b40@rest) (cons (cQ3b26@gen-name cQ3b3f@name) (cQ3b29@f cQ3b40@rest))) cQ3b3d@ls/false) (let ((cQ3b43@t cQ3b3b@t)) (let ((cQ3b45@ls/false (cQ309c@syntax-dispatch cQ3b43@t '(_ . any)))) (if cQ3b45@ls/false (apply (lambda (cQ3b47@rest) (cQ3b29@f cQ3b47@rest)) cQ3b45@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3b43@t))))))))))))))))) (cQ3a7e@get-accessors (lambda (cQ3add@foo cQ3ade@fields) (letrec* ((cQ3ae2@gen-name (lambda (cQ3b1f@x) (cQ3180@datum->syntax cQ3add@foo (string->symbol (string-append (symbol->string (cQ3182@syntax->datum cQ3add@foo)) '"-" (symbol->string (cQ3182@syntax->datum cQ3b1f@x)))))))) (map (lambda (cQ3ae3@field) (let ((cQ3ae5@t cQ3ae3@field)) (let ((cQ3ae7@ls/false (cQ309c@syntax-dispatch cQ3ae5@t '(#(scheme-id mutable) any any any)))) (if (and cQ3ae7@ls/false (apply (lambda (cQ3ae9@name cQ3aea@accessor cQ3aeb@mutator) (cQ2e95@id? cQ3aea@accessor)) cQ3ae7@ls/false)) (apply (lambda (cQ3aef@name cQ3af0@accessor cQ3af1@mutator) cQ3af0@accessor) cQ3ae7@ls/false) (let ((cQ3af5@t cQ3ae5@t)) (let ((cQ3af7@ls/false (cQ309c@syntax-dispatch cQ3af5@t '(#(scheme-id immutable) any any)))) (if (and cQ3af7@ls/false (apply (lambda (cQ3af9@name cQ3afa@accessor) (cQ2e95@id? cQ3afa@accessor)) cQ3af7@ls/false)) (apply (lambda (cQ3afd@name cQ3afe@accessor) cQ3afe@accessor) cQ3af7@ls/false) (let ((cQ3b01@t cQ3af5@t)) (let ((cQ3b03@ls/false (cQ309c@syntax-dispatch cQ3b01@t '(#(scheme-id mutable) any)))) (if (and cQ3b03@ls/false (apply (lambda (cQ3b05@name) (cQ2e95@id? cQ3b05@name)) cQ3b03@ls/false)) (apply (lambda (cQ3b07@name) (cQ3ae2@gen-name cQ3b07@name)) cQ3b03@ls/false) (let ((cQ3b09@t cQ3b01@t)) (let ((cQ3b0b@ls/false (cQ309c@syntax-dispatch cQ3b09@t '(#(scheme-id immutable) any)))) (if (and cQ3b0b@ls/false (apply (lambda (cQ3b0d@name) (cQ2e95@id? cQ3b0d@name)) cQ3b0b@ls/false)) (apply (lambda (cQ3b0f@name) (cQ3ae2@gen-name cQ3b0f@name)) cQ3b0b@ls/false) (let ((cQ3b11@t cQ3b09@t)) (let ((cQ3b13@ls/false (cQ309c@syntax-dispatch cQ3b11@t 'any))) (if (and cQ3b13@ls/false (apply (lambda (cQ3b15@name) (cQ2e95@id? cQ3b15@name)) cQ3b13@ls/false)) (apply (lambda (cQ3b17@name) (cQ3ae2@gen-name cQ3b17@name)) cQ3b13@ls/false) (let ((cQ3b19@t cQ3b11@t)) (let ((cQ3b1b@ls/false (cQ309c@syntax-dispatch cQ3b19@t 'any))) (if cQ3b1b@ls/false (apply (lambda (cQ3b1d@others) (cQ317c@syntax-violation '#f '"invalid field spec" cQ3ae3@field)) cQ3b1b@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3b19@t)))))))))))))))))))) cQ3ade@fields)))) (cQ3a80@enumerate (lambda (cQ3ad5@ls) (let cQ3adb@f ((cQ3ad7@ls cQ3ad5@ls) (cQ3ad8@i '0)) (if (null? cQ3ad7@ls) '() (cons cQ3ad8@i (cQ3adb@f (cdr cQ3ad7@ls) (+ cQ3ad8@i '1))))))) (cQ3a82@do-define-record (lambda (cQ3aad@namespec cQ3aae@clause*) (let ((cQ3ab1@foo (cQ3a66@get-record-name cQ3aad@namespec))) (let ((cQ3ab3@foo-rtd (gensym))) (let ((cQ3ab5@foo-rcd (gensym))) (let ((cQ3ab7@protocol (gensym))) (let ((cQ3ab9@make-foo (cQ3a68@get-record-constructor-name cQ3aad@namespec))) (let ((cQ3abb@fields (cQ3a78@get-fields cQ3aae@clause*))) (let ((cQ3abd@idx* (cQ3a80@enumerate cQ3abb@fields))) (let ((cQ3abf@foo-x* (cQ3a7e@get-accessors cQ3ab1@foo cQ3abb@fields))) (let ((cQ3ac1@set-foo-x!* (cQ3a7c@get-mutators cQ3ab1@foo cQ3abb@fields))) (let ((cQ3ac3@set-foo-idx* (cQ3a7a@get-mutator-indices cQ3abb@fields))) (let ((cQ3ac5@foo? (cQ3a6a@get-record-predicate-name cQ3aad@namespec))) (let ((cQ3ac7@foo-rtd-code (cQ3a6e@foo-rtd-code cQ3ab1@foo cQ3aae@clause* (cQ3a70@parent-rtd-code cQ3aae@clause*)))) (let ((cQ3ac9@foo-rcd-code (cQ3a74@foo-rcd-code cQ3aae@clause* cQ3ab3@foo-rtd cQ3ab7@protocol (cQ3a72@parent-rcd-code cQ3aae@clause*)))) (let ((cQ3acb@protocol-code (cQ3a76@get-protocol-code cQ3aae@clause*))) (cQ3052@bless (cons 'begin (cons (list 'define cQ3ab3@foo-rtd cQ3ac7@foo-rtd-code) (cons (list 'define cQ3ab7@protocol cQ3acb@protocol-code) (cons (list 'define cQ3ab5@foo-rcd cQ3ac9@foo-rcd-code) (cons (list 'define-syntax cQ3ab1@foo (list 'list ''$rtd (list 'syntax cQ3ab3@foo-rtd) (list 'syntax cQ3ab5@foo-rcd))) (cons (list 'define cQ3ac5@foo? (list 'record-predicate cQ3ab3@foo-rtd)) (cons (list 'define cQ3ab9@make-foo (list 'record-constructor cQ3ab5@foo-rcd)) (append (map (lambda (cQ3acd@foo-x cQ3ace@idx) (list 'define cQ3acd@foo-x (list 'record-accessor cQ3ab3@foo-rtd cQ3ace@idx))) cQ3abf@foo-x* cQ3abd@idx*) (map (lambda (cQ3ad1@set-foo-x! cQ3ad2@idx) (list 'define cQ3ad1@set-foo-x! (list 'record-mutator cQ3ab3@foo-rtd cQ3ad2@idx))) cQ3ac1@set-foo-x!* cQ3ac3@set-foo-idx*)))))))))))))))))))))))))) (cQ3a84@verify-clauses (lambda (cQ3a8d@x cQ3a8e@cls*) (letrec* ((cQ3a92@valid-kwds (map cQ3052@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (cQ3a94@free-id-member? (lambda (cQ3aa9@x cQ3aaa@ls) (and (pair? cQ3aaa@ls) (or (cQ2e9b@free-id=? cQ3aa9@x (car cQ3aaa@ls)) (cQ3a94@free-id-member? cQ3aa9@x (cdr cQ3aaa@ls))))))) (let cQ3a99@f ((cQ3a95@cls* cQ3a8e@cls*) (cQ3a96@seen* '())) (if (not (null? cQ3a95@cls*)) (let ((cQ3a9b@t (car cQ3a95@cls*))) (let ((cQ3a9d@ls/false (cQ309c@syntax-dispatch cQ3a9b@t '(any . any)))) (if cQ3a9d@ls/false (apply (lambda (cQ3a9f@kwd cQ3aa0@rest) (if (or (not (cQ2e95@id? cQ3a9f@kwd)) (not (cQ3a94@free-id-member? cQ3a9f@kwd cQ3a92@valid-kwds))) (cQ317c@syntax-violation '#f '"not a valid define-record-type keyword" cQ3a9f@kwd) (if (cQ2ea1@bound-id-member? cQ3a9f@kwd cQ3a96@seen*) (cQ317c@syntax-violation '#f '"duplicate use of keyword " cQ3a8d@x cQ3a9f@kwd) (cQ3a99@f (cdr cQ3a95@cls*) (cons cQ3a9f@kwd cQ3a96@seen*))))) cQ3a9d@ls/false) (let ((cQ3aa3@t cQ3a9b@t)) (let ((cQ3aa5@ls/false (cQ309c@syntax-dispatch cQ3aa3@t 'any))) (if cQ3aa5@ls/false (apply (lambda (cQ3aa7@cls) (cQ317c@syntax-violation '#f '"malformed define-record-type clause" cQ3aa7@cls)) cQ3aa5@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3aa3@t))))))) (void))))))) (let ((cQ3a85@t cQ3a61@x)) (let ((cQ3a87@ls/false (cQ309c@syntax-dispatch cQ3a85@t '(_ any . each-any)))) (if cQ3a87@ls/false (apply (lambda (cQ3a89@namespec cQ3a8a@clause*) (begin (cQ3a84@verify-clauses cQ3a61@x cQ3a8a@clause*) (cQ3a82@do-define-record cQ3a89@namespec cQ3a8a@clause*))) cQ3a87@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3a85@t))))))) (set! cQ4b6c@cQ3090@define-record-type-macro cQ3090@define-record-type-macro) (set! cQ3092@define-condition-type-macro (lambda (cQ3c5d@x) (letrec* ((cQ3c60@mkname (lambda (cQ3c8d@name cQ3c8e@suffix) (cQ3180@datum->syntax cQ3c8d@name (string->symbol (string-append (symbol->string (cQ3182@syntax->datum cQ3c8d@name)) cQ3c8e@suffix)))))) (let ((cQ3c61@t cQ3c5d@x)) (let ((cQ3c63@ls/false (cQ309c@syntax-dispatch cQ3c61@t '(any any any any any . #(each (any any)))))) (if (and cQ3c63@ls/false (apply (lambda (cQ3c65@ctxt cQ3c66@name cQ3c67@super cQ3c68@constructor cQ3c69@predicate cQ3c6a@field* cQ3c6b@accessor*) (and (cQ2e95@id? cQ3c66@name) (cQ2e95@id? cQ3c67@super) (cQ2e95@id? cQ3c68@constructor) (cQ2e95@id? cQ3c69@predicate) (for-all cQ2e95@id? cQ3c6a@field*) (for-all cQ2e95@id? cQ3c6b@accessor*))) cQ3c63@ls/false)) (apply (lambda (cQ3c73@ctxt cQ3c74@name cQ3c75@super cQ3c76@constructor cQ3c77@predicate cQ3c78@field* cQ3c79@accessor*) (let ((cQ3c81@aux-accessor* (map (lambda (cQ3c83@x) (gensym)) cQ3c79@accessor*))) (cQ3052@bless (cons 'begin (cons (cons 'define-record-type (cons (list cQ3c74@name cQ3c76@constructor (gensym)) (cons (list 'parent cQ3c75@super) (cons (cons 'fields (map (lambda (cQ3c85@field cQ3c86@aux) (list 'immutable cQ3c85@field cQ3c86@aux)) cQ3c78@field* cQ3c81@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define cQ3c77@predicate (list 'condition-predicate (list 'record-type-descriptor cQ3c74@name))) (map (lambda (cQ3c89@accessor cQ3c8a@aux) (list 'define cQ3c89@accessor (list 'condition-accessor (list 'record-type-descriptor cQ3c74@name) cQ3c8a@aux))) cQ3c79@accessor* cQ3c81@aux-accessor*))))))) cQ3c63@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3c61@t))))))) (set! cQ4b6d@cQ3092@define-condition-type-macro cQ3092@define-condition-type-macro) (set! cQ3094@incorrect-usage-macro (lambda (cQ3c91@e) (cQ317c@syntax-violation '#f '"incorrect usage of auxiliary keyword" cQ3c91@e))) (set! cQ4b6e@cQ3094@incorrect-usage-macro cQ3094@incorrect-usage-macro) (set! cQ3096@parameterize-macro (lambda (cQ3c93@e) (let ((cQ3c95@t cQ3c93@e)) (let ((cQ3c97@ls/false (cQ309c@syntax-dispatch cQ3c95@t '(_ () any . each-any)))) (if cQ3c97@ls/false (apply (lambda (cQ3c99@b cQ3c9a@b*) (cQ3052@bless (cons 'let (cons '() (cons cQ3c99@b cQ3c9a@b*))))) cQ3c97@ls/false) (let ((cQ3c9d@t cQ3c95@t)) (let ((cQ3c9f@ls/false (cQ309c@syntax-dispatch cQ3c9d@t '(_ #(each (any any)) any . each-any)))) (if cQ3c9f@ls/false (apply (lambda (cQ3ca1@olhs* cQ3ca2@orhs* cQ3ca3@b cQ3ca4@b*) (let ((cQ3ca9@lhs* (cQ316a@generate-temporaries cQ3ca1@olhs*)) (cQ3caa@rhs* (cQ316a@generate-temporaries cQ3ca2@orhs*))) (cQ3052@bless (cons (list 'lambda (append cQ3ca9@lhs* cQ3caa@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (cQ3cad@lhs cQ3cae@rhs) (list 'let (list (list 't (list cQ3cad@lhs))) (list cQ3cad@lhs cQ3cae@rhs) (cons 'set! (cons cQ3cae@rhs '(t))))) cQ3ca9@lhs* cQ3caa@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons cQ3ca3@b cQ3ca4@b*))) '(swap)))))) (append cQ3ca1@olhs* cQ3ca2@orhs*))))) cQ3c9f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3c9d@t))))))))) (set! cQ4b6f@cQ3096@parameterize-macro cQ3096@parameterize-macro) (set! cQ3098@foreign-call-transformer (lambda (cQ3cb1@e cQ3cb2@r cQ3cb3@mr) (let ((cQ3cb7@t cQ3cb1@e)) (let ((cQ3cb9@ls/false (cQ309c@syntax-dispatch cQ3cb7@t '(_ any . each-any)))) (if cQ3cb9@ls/false (apply (lambda (cQ3cbb@name cQ3cbc@arg*) (cons 'foreign-call (cons (cQ30be@chi-expr cQ3cbb@name cQ3cb2@r cQ3cb3@mr) (cQ30ba@chi-expr* cQ3cbc@arg* cQ3cb2@r cQ3cb3@mr)))) cQ3cb9@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3cb7@t)))))) (set! cQ4b70@cQ3098@foreign-call-transformer cQ3098@foreign-call-transformer) (set! cQ309a@convert-pattern (lambda (cQ3cbf@pattern cQ3cc0@keys) (letrec* ((cQ3cc4@cvt* (lambda (cQ3d63@p* cQ3d64@n cQ3d65@ids) (if (null? cQ3d63@p*) (values '() cQ3d65@ids) (call-with-values (lambda () (cQ3cc4@cvt* (cdr cQ3d63@p*) cQ3d64@n cQ3d65@ids)) (lambda (cQ3d6d@cQ3d6a cQ3d6e@cQ3d6c) (let ((cQ3d71@ids cQ3d6e@cQ3d6c) (cQ3d72@y cQ3d6d@cQ3d6a)) (call-with-values (lambda () (cQ3cc6@cvt (car cQ3d63@p*) cQ3d64@n cQ3d71@ids)) (lambda (cQ3d79@cQ3d76 cQ3d7a@cQ3d78) (let ((cQ3d7d@ids cQ3d7a@cQ3d78) (cQ3d7e@x cQ3d79@cQ3d76)) (values (cons cQ3d7e@x cQ3d72@y) cQ3d7d@ids)))))))))) (cQ3cc6@cvt (lambda (cQ3cc7@p cQ3cc8@n cQ3cc9@ids) (let ((cQ3ccd@t cQ3cc7@p)) (let ((cQ3ccf@ls/false (cQ309c@syntax-dispatch cQ3ccd@t 'any))) (if (and cQ3ccf@ls/false (apply (lambda (cQ3cd1@id) (cQ2e95@id? cQ3cd1@id)) cQ3ccf@ls/false)) (apply (lambda (cQ3cd3@id) (if (cQ2ea1@bound-id-member? cQ3cc7@p cQ3cc0@keys) (values (vector 'free-id cQ3cc7@p) cQ3cc9@ids) (if (cQ2e9b@free-id=? cQ3cc7@p (cQ3024@scheme-stx '_)) (values '_ cQ3cc9@ids) (values 'any (cons (cons cQ3cc7@p cQ3cc8@n) cQ3cc9@ids))))) cQ3ccf@ls/false) (let ((cQ3cd5@t cQ3ccd@t)) (let ((cQ3cd7@ls/false (cQ309c@syntax-dispatch cQ3cd5@t '(any any)))) (if (and cQ3cd7@ls/false (apply (lambda (cQ3cd9@p cQ3cda@dots) (cQ309e@ellipsis? cQ3cda@dots)) cQ3cd7@ls/false)) (apply (lambda (cQ3cdd@p cQ3cde@dots) (call-with-values (lambda () (cQ3cc6@cvt cQ3cdd@p (+ cQ3cc8@n '1) cQ3cc9@ids)) (lambda (cQ3ce5@cQ3ce2 cQ3ce6@cQ3ce4) (let ((cQ3ce9@ids cQ3ce6@cQ3ce4) (cQ3cea@p cQ3ce5@cQ3ce2)) (values (if (eq? cQ3cea@p 'any) 'each-any (vector 'each cQ3cea@p)) cQ3ce9@ids))))) cQ3cd7@ls/false) (let ((cQ3ced@t cQ3cd5@t)) (let ((cQ3cef@ls/false (cQ309c@syntax-dispatch cQ3ced@t '(any any . #(each+ any () any))))) (if (and cQ3cef@ls/false (apply (lambda (cQ3cf1@x cQ3cf2@dots cQ3cf3@ys cQ3cf4@z) (cQ309e@ellipsis? cQ3cf2@dots)) cQ3cef@ls/false)) (apply (lambda (cQ3cf9@x cQ3cfa@dots cQ3cfb@ys cQ3cfc@z) (call-with-values (lambda () (cQ3cc6@cvt cQ3cfc@z cQ3cc8@n cQ3cc9@ids)) (lambda (cQ3d05@cQ3d02 cQ3d06@cQ3d04) (let ((cQ3d09@ids cQ3d06@cQ3d04) (cQ3d0a@z cQ3d05@cQ3d02)) (call-with-values (lambda () (cQ3cc4@cvt* cQ3cfb@ys cQ3cc8@n cQ3d09@ids)) (lambda (cQ3d11@cQ3d0e cQ3d12@cQ3d10) (let ((cQ3d15@ids cQ3d12@cQ3d10) (cQ3d16@ys cQ3d11@cQ3d0e)) (call-with-values (lambda () (cQ3cc6@cvt cQ3cf9@x (+ cQ3cc8@n '1) cQ3d15@ids)) (lambda (cQ3d1d@cQ3d1a cQ3d1e@cQ3d1c) (let ((cQ3d21@ids cQ3d1e@cQ3d1c) (cQ3d22@x cQ3d1d@cQ3d1a)) (values (vector 'each+ cQ3d22@x (reverse cQ3d16@ys) cQ3d0a@z) cQ3d21@ids))))))))))) cQ3cef@ls/false) (let ((cQ3d25@t cQ3ced@t)) (let ((cQ3d27@ls/false (cQ309c@syntax-dispatch cQ3d25@t '(any . any)))) (if cQ3d27@ls/false (apply (lambda (cQ3d29@x cQ3d2a@y) (call-with-values (lambda () (cQ3cc6@cvt cQ3d2a@y cQ3cc8@n cQ3cc9@ids)) (lambda (cQ3d31@cQ3d2e cQ3d32@cQ3d30) (let ((cQ3d35@ids cQ3d32@cQ3d30) (cQ3d36@y cQ3d31@cQ3d2e)) (call-with-values (lambda () (cQ3cc6@cvt cQ3d29@x cQ3cc8@n cQ3d35@ids)) (lambda (cQ3d3d@cQ3d3a cQ3d3e@cQ3d3c) (let ((cQ3d41@ids cQ3d3e@cQ3d3c) (cQ3d42@x cQ3d3d@cQ3d3a)) (values (cons cQ3d42@x cQ3d36@y) cQ3d41@ids)))))))) cQ3d27@ls/false) (let ((cQ3d45@t cQ3d25@t)) (let ((cQ3d47@ls/false (cQ309c@syntax-dispatch cQ3d45@t '()))) (if cQ3d47@ls/false (apply (lambda () (values '() cQ3cc9@ids)) cQ3d47@ls/false) (let ((cQ3d49@t cQ3d45@t)) (let ((cQ3d4b@ls/false (cQ309c@syntax-dispatch cQ3d49@t '#(vector each-any)))) (if (and cQ3d4b@ls/false (apply (lambda (cQ3d4d@p) (not (cQ2e61@stx? cQ3d4d@p))) cQ3d4b@ls/false)) (apply (lambda (cQ3d4f@p) (call-with-values (lambda () (cQ3cc6@cvt cQ3d4f@p cQ3cc8@n cQ3cc9@ids)) (lambda (cQ3d55@cQ3d52 cQ3d56@cQ3d54) (let ((cQ3d59@ids cQ3d56@cQ3d54) (cQ3d5a@p cQ3d55@cQ3d52)) (values (vector 'vector cQ3d5a@p) cQ3d59@ids))))) cQ3d4b@ls/false) (let ((cQ3d5d@t cQ3d49@t)) (let ((cQ3d5f@ls/false (cQ309c@syntax-dispatch cQ3d5d@t 'any))) (if cQ3d5f@ls/false (apply (lambda (cQ3d61@datum) (values (vector 'atom (cQ2ea9@stx->datum cQ3d61@datum)) cQ3cc9@ids)) cQ3d5f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3d5d@t))))))))))))))))))))))))) (cQ3cc6@cvt cQ3cbf@pattern '0 '())))) (set! cQ4b71@cQ309a@convert-pattern cQ309a@convert-pattern) (set! cQ309c@syntax-dispatch (letrec* ((cQ3d82@stx^ (lambda (cQ3e5d@e cQ3e5e@m* cQ3e5f@s* cQ3e60@ae*) (if (and (null? cQ3e5e@m*) (null? cQ3e5f@s*) (null? cQ3e60@ae*)) cQ3e5d@e (cQ2e7d@mkstx cQ3e5d@e cQ3e5e@m* cQ3e5f@s* cQ3e60@ae*)))) (cQ3d84@match-each (lambda (cQ3e3d@e cQ3e3e@p cQ3e3f@m* cQ3e40@s* cQ3e41@ae*) (if (pair? cQ3e3d@e) (let ((cQ3e47@first (cQ3d90@match (car cQ3e3d@e) cQ3e3e@p cQ3e3f@m* cQ3e40@s* cQ3e41@ae* '()))) (and cQ3e47@first (let ((cQ3e49@rest (cQ3d84@match-each (cdr cQ3e3d@e) cQ3e3e@p cQ3e3f@m* cQ3e40@s* cQ3e41@ae*))) (and cQ3e49@rest (cons cQ3e47@first cQ3e49@rest))))) (if (null? cQ3e3d@e) '() (if (cQ2e61@stx? cQ3e3d@e) (and (not (cQ2e1b@top-marked? cQ3e3f@m*)) (call-with-values (lambda () (join-wraps cQ3e3f@m* cQ3e40@s* cQ3e41@ae* cQ3e3d@e)) (lambda (cQ3e51@cQ3e4c cQ3e52@cQ3e4e cQ3e53@cQ3e50) (let ((cQ3e57@ae* cQ3e53@cQ3e50) (cQ3e58@s* cQ3e52@cQ3e4e) (cQ3e59@m* cQ3e51@cQ3e4c)) (cQ3d84@match-each (cQ2e63@stx-expr cQ3e3d@e) cQ3e3e@p cQ3e59@m* cQ3e58@s* cQ3e57@ae*))))) (if (cQ29c8@cQ289a@annotation? cQ3e3d@e) (cQ3d84@match-each (cQ29ca@cQ289e@annotation-expression cQ3e3d@e) cQ3e3e@p cQ3e3f@m* cQ3e40@s* cQ3e41@ae*) '#f)))))) (cQ3d86@match-each+ (lambda (cQ3dfd@e cQ3dfe@x-pat cQ3dff@y-pat cQ3e00@z-pat cQ3e01@m* cQ3e02@s* cQ3e03@ae* cQ3e04@r) (let cQ3e15@f ((cQ3e0d@e cQ3dfd@e) (cQ3e0e@m* cQ3e01@m*) (cQ3e0f@s* cQ3e02@s*) (cQ3e10@ae* cQ3e03@ae*)) (if (pair? cQ3e0d@e) (call-with-values (lambda () (cQ3e15@f (cdr cQ3e0d@e) cQ3e0e@m* cQ3e0f@s* cQ3e10@ae*)) (lambda (cQ3e1d@cQ3e18 cQ3e1e@cQ3e1a cQ3e1f@cQ3e1c) (let ((cQ3e23@r cQ3e1f@cQ3e1c) (cQ3e24@y-pat cQ3e1e@cQ3e1a) (cQ3e25@xr* cQ3e1d@cQ3e18)) (if cQ3e23@r (if (null? cQ3e24@y-pat) (let ((cQ3e29@xr (cQ3d90@match (car cQ3e0d@e) cQ3dfe@x-pat cQ3e0e@m* cQ3e0f@s* cQ3e10@ae* '()))) (if cQ3e29@xr (values (cons cQ3e29@xr cQ3e25@xr*) cQ3e24@y-pat cQ3e23@r) (values '#f '#f '#f))) (values '() (cdr cQ3e24@y-pat) (cQ3d90@match (car cQ3e0d@e) (car cQ3e24@y-pat) cQ3e0e@m* cQ3e0f@s* cQ3e10@ae* cQ3e23@r))) (values '#f '#f '#f))))) (if (cQ2e61@stx? cQ3e0d@e) (if (cQ2e1b@top-marked? cQ3e0e@m*) (values '() cQ3dff@y-pat (cQ3d90@match cQ3e0d@e cQ3e00@z-pat cQ3e0e@m* cQ3e0f@s* cQ3e10@ae* cQ3e04@r)) (call-with-values (lambda () (join-wraps cQ3e0e@m* cQ3e0f@s* cQ3e10@ae* cQ3e0d@e)) (lambda (cQ3e31@cQ3e2c cQ3e32@cQ3e2e cQ3e33@cQ3e30) (let ((cQ3e37@ae* cQ3e33@cQ3e30) (cQ3e38@s* cQ3e32@cQ3e2e) (cQ3e39@m* cQ3e31@cQ3e2c)) (cQ3e15@f (cQ2e63@stx-expr cQ3e0d@e) cQ3e39@m* cQ3e38@s* cQ3e37@ae*))))) (if (cQ29c8@cQ289a@annotation? cQ3e0d@e) (cQ3e15@f (cQ29ca@cQ289e@annotation-expression cQ3e0d@e) cQ3e0e@m* cQ3e0f@s* cQ3e10@ae*) (values '() cQ3dff@y-pat (cQ3d90@match cQ3e0d@e cQ3e00@z-pat cQ3e0e@m* cQ3e0f@s* cQ3e10@ae* cQ3e04@r)))))))) (cQ3d88@match-each-any (lambda (cQ3de1@e cQ3de2@m* cQ3de3@s* cQ3de4@ae*) (if (pair? cQ3de1@e) (let ((cQ3de9@l (cQ3d88@match-each-any (cdr cQ3de1@e) cQ3de2@m* cQ3de3@s* cQ3de4@ae*))) (and cQ3de9@l (cons (cQ3d82@stx^ (car cQ3de1@e) cQ3de2@m* cQ3de3@s* cQ3de4@ae*) cQ3de9@l))) (if (null? cQ3de1@e) '() (if (cQ2e61@stx? cQ3de1@e) (and (not (cQ2e1b@top-marked? cQ3de2@m*)) (call-with-values (lambda () (join-wraps cQ3de2@m* cQ3de3@s* cQ3de4@ae* cQ3de1@e)) (lambda (cQ3df1@cQ3dec cQ3df2@cQ3dee cQ3df3@cQ3df0) (let ((cQ3df7@ae* cQ3df3@cQ3df0) (cQ3df8@s* cQ3df2@cQ3dee) (cQ3df9@m* cQ3df1@cQ3dec)) (cQ3d88@match-each-any (cQ2e63@stx-expr cQ3de1@e) cQ3df9@m* cQ3df8@s* cQ3df7@ae*))))) (if (cQ29c8@cQ289a@annotation? cQ3de1@e) (cQ3d88@match-each-any (cQ29ca@cQ289e@annotation-expression cQ3de1@e) cQ3de2@m* cQ3de3@s* cQ3de4@ae*) '#f)))))) (cQ3d8a@match-empty (lambda (cQ3ddb@p cQ3ddc@r) (if (null? cQ3ddb@p) cQ3ddc@r (if (eq? cQ3ddb@p '_) cQ3ddc@r (if (eq? cQ3ddb@p 'any) (cons '() cQ3ddc@r) (if (pair? cQ3ddb@p) (cQ3d8a@match-empty (car cQ3ddb@p) (cQ3d8a@match-empty (cdr cQ3ddb@p) cQ3ddc@r)) (if (eq? cQ3ddb@p 'each-any) (cons '() cQ3ddc@r) (let ((cQ3ddf@t (vector-ref cQ3ddb@p '0))) (if (memv cQ3ddf@t '(each)) (cQ3d8a@match-empty (vector-ref cQ3ddb@p '1) cQ3ddc@r) (if (memv cQ3ddf@t '(each+)) (cQ3d8a@match-empty (vector-ref cQ3ddb@p '1) (cQ3d8a@match-empty (reverse (vector-ref cQ3ddb@p '2)) (cQ3d8a@match-empty (vector-ref cQ3ddb@p '3) cQ3ddc@r))) (if (memv cQ3ddf@t '(free-id atom)) cQ3ddc@r (if (memv cQ3ddf@t '(scheme-id atom)) cQ3ddc@r (if (memv cQ3ddf@t '(vector)) (cQ3d8a@match-empty (vector-ref cQ3ddb@p '1) cQ3ddc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" cQ3ddb@p)))))))))))))) (cQ3d8c@combine (lambda (cQ3dd7@r* cQ3dd8@r) (if (null? (car cQ3dd7@r*)) cQ3dd8@r (cons (map car cQ3dd7@r*) (cQ3d8c@combine (map cdr cQ3dd7@r*) cQ3dd8@r))))) (cQ3d8e@match* (lambda (cQ3db3@e cQ3db4@p cQ3db5@m* cQ3db6@s* cQ3db7@ae* cQ3db8@r) (if (null? cQ3db4@p) (and (null? cQ3db3@e) cQ3db8@r) (if (pair? cQ3db4@p) (and (pair? cQ3db3@e) (cQ3d90@match (car cQ3db3@e) (car cQ3db4@p) cQ3db5@m* cQ3db6@s* cQ3db7@ae* (cQ3d90@match (cdr cQ3db3@e) (cdr cQ3db4@p) cQ3db5@m* cQ3db6@s* cQ3db7@ae* cQ3db8@r))) (if (eq? cQ3db4@p 'each-any) (let ((cQ3dbf@l (cQ3d88@match-each-any cQ3db3@e cQ3db5@m* cQ3db6@s* cQ3db7@ae*))) (and cQ3dbf@l (cons cQ3dbf@l cQ3db8@r))) (let ((cQ3dc1@t (vector-ref cQ3db4@p '0))) (if (memv cQ3dc1@t '(each)) (if (null? cQ3db3@e) (cQ3d8a@match-empty (vector-ref cQ3db4@p '1) cQ3db8@r) (let ((cQ3dc3@r* (cQ3d84@match-each cQ3db3@e (vector-ref cQ3db4@p '1) cQ3db5@m* cQ3db6@s* cQ3db7@ae*))) (and cQ3dc3@r* (cQ3d8c@combine cQ3dc3@r* cQ3db8@r)))) (if (memv cQ3dc1@t '(free-id)) (and (symbol? cQ3db3@e) (cQ2e1b@top-marked? cQ3db5@m*) (cQ2e9b@free-id=? (cQ3d82@stx^ cQ3db3@e cQ3db5@m* cQ3db6@s* cQ3db7@ae*) (vector-ref cQ3db4@p '1)) cQ3db8@r) (if (memv cQ3dc1@t '(scheme-id)) (and (symbol? cQ3db3@e) (cQ2e1b@top-marked? cQ3db5@m*) (cQ2e9b@free-id=? (cQ3d82@stx^ cQ3db3@e cQ3db5@m* cQ3db6@s* cQ3db7@ae*) (cQ3024@scheme-stx (vector-ref cQ3db4@p '1))) cQ3db8@r) (if (memv cQ3dc1@t '(each+)) (call-with-values (lambda () (cQ3d86@match-each+ cQ3db3@e (vector-ref cQ3db4@p '1) (vector-ref cQ3db4@p '2) (vector-ref cQ3db4@p '3) cQ3db5@m* cQ3db6@s* cQ3db7@ae* cQ3db8@r)) (lambda (cQ3dcb@cQ3dc6 cQ3dcc@cQ3dc8 cQ3dcd@cQ3dca) (let ((cQ3dd1@r cQ3dcd@cQ3dca) (cQ3dd2@y-pat cQ3dcc@cQ3dc8) (cQ3dd3@xr* cQ3dcb@cQ3dc6)) (and cQ3dd1@r (null? cQ3dd2@y-pat) (if (null? cQ3dd3@xr*) (cQ3d8a@match-empty (vector-ref cQ3db4@p '1) cQ3dd1@r) (cQ3d8c@combine cQ3dd3@xr* cQ3dd1@r)))))) (if (memv cQ3dc1@t '(atom)) (and (fast-equal? (vector-ref cQ3db4@p '1) (cQ2ea7@strip cQ3db3@e cQ3db5@m*)) cQ3db8@r) (if (memv cQ3dc1@t '(vector)) (and (vector? cQ3db3@e) (cQ3d90@match (vector->list cQ3db3@e) (vector-ref cQ3db4@p '1) cQ3db5@m* cQ3db6@s* cQ3db7@ae* cQ3db8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" cQ3db4@p))))))))))))) (cQ3d90@match (lambda (cQ3d95@e cQ3d96@p cQ3d97@m* cQ3d98@s* cQ3d99@ae* cQ3d9a@r) (if (not cQ3d9a@r) '#f (if (eq? cQ3d96@p '_) cQ3d9a@r (if (eq? cQ3d96@p 'any) (cons (cQ3d82@stx^ cQ3d95@e cQ3d97@m* cQ3d98@s* cQ3d99@ae*) cQ3d9a@r) (if (cQ2e61@stx? cQ3d95@e) (and (not (cQ2e1b@top-marked? cQ3d97@m*)) (call-with-values (lambda () (join-wraps cQ3d97@m* cQ3d98@s* cQ3d99@ae* cQ3d95@e)) (lambda (cQ3da7@cQ3da2 cQ3da8@cQ3da4 cQ3da9@cQ3da6) (let ((cQ3dad@ae* cQ3da9@cQ3da6) (cQ3dae@s* cQ3da8@cQ3da4) (cQ3daf@m* cQ3da7@cQ3da2)) (cQ3d90@match (cQ2e63@stx-expr cQ3d95@e) cQ3d96@p cQ3daf@m* cQ3dae@s* cQ3dad@ae* cQ3d9a@r))))) (if (cQ29c8@cQ289a@annotation? cQ3d95@e) (cQ3d90@match (cQ29ca@cQ289e@annotation-expression cQ3d95@e) cQ3d96@p cQ3d97@m* cQ3d98@s* cQ3d99@ae* cQ3d9a@r) (cQ3d8e@match* cQ3d95@e cQ3d96@p cQ3d97@m* cQ3d98@s* cQ3d99@ae* cQ3d9a@r))))))))) (lambda (cQ3d91@e cQ3d92@p) (cQ3d90@match cQ3d91@e cQ3d92@p '() '() '() '())))) (set! cQ4b72@cQ309c@syntax-dispatch cQ309c@syntax-dispatch) (set! cQ309e@ellipsis? (lambda (cQ3e65@x) (and (cQ2e95@id? cQ3e65@x) (cQ2e9b@free-id=? cQ3e65@x (cQ3024@scheme-stx '...))))) (set! cQ4b73@cQ309e@ellipsis? cQ309e@ellipsis?) (set! cQ30a0@underscore? (lambda (cQ3e67@x) (and (cQ2e95@id? cQ3e67@x) (cQ2e9b@free-id=? cQ3e67@x (cQ3024@scheme-stx '_))))) (set! cQ4b74@cQ30a0@underscore? cQ30a0@underscore?) (set! cQ30a2@verify-literals (lambda (cQ3e69@lits cQ3e6a@expr) (for-each (lambda (cQ3e6d@x) (if (or (not (cQ2e95@id? cQ3e6d@x)) (cQ309e@ellipsis? cQ3e6d@x) (cQ30a0@underscore? cQ3e6d@x)) (cQ317c@syntax-violation '#f '"invalid literal" cQ3e6a@expr cQ3e6d@x) (void))) cQ3e69@lits))) (set! cQ4b75@cQ30a2@verify-literals cQ30a2@verify-literals) (set! cQ30a4@syntax-case-transformer (letrec* ((cQ3e70@build-dispatch-call (lambda (cQ3ee1@pvars cQ3ee2@expr cQ3ee3@y cQ3ee4@r cQ3ee5@mr) (let ((cQ3eeb@ids (map car cQ3ee1@pvars)) (cQ3eec@levels (map cdr cQ3ee1@pvars))) (let ((cQ3eef@labels (map cQ2e21@gen-label cQ3eeb@ids)) (cQ3ef0@new-vars (map cQ2e1d@gen-lexical cQ3eeb@ids))) (let ((cQ3ef3@body (cQ30be@chi-expr (cQ2e81@add-subst (cQ2e55@make-full-rib cQ3eeb@ids cQ3eef@labels) cQ3ee2@expr) (append (map (lambda (cQ3ef5@label cQ3ef6@var cQ3ef7@level) (cons cQ3ef5@label (cQ2eaf@make-binding 'syntax (cons cQ3ef6@var cQ3ef7@level)))) cQ3eef@labels cQ3ef0@new-vars (map cdr cQ3ee1@pvars)) cQ3ee4@r) cQ3ee5@mr))) (list '(primitive apply) (cQ2df8@cQ2d2a@build-lambda '#f cQ3ef0@new-vars cQ3ef3@body) cQ3ee3@y)))))) (cQ3e72@invalid-ids-error (lambda (cQ3ed5@id* cQ3ed6@e cQ3ed7@class) (let cQ3edf@find ((cQ3edb@id* cQ3ed5@id*) (cQ3edc@ok* '())) (if (null? cQ3edb@id*) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3ed6@e) (if (cQ2e95@id? (car cQ3edb@id*)) (if (cQ2ea1@bound-id-member? (car cQ3edb@id*) cQ3edc@ok*) (cQ3178@syntax-error (car cQ3edb@id*) '"duplicate " cQ3ed7@class) (cQ3edf@find (cdr cQ3edb@id*) (cons (car cQ3edb@id*) cQ3edc@ok*))) (cQ3178@syntax-error (car cQ3edb@id*) '"invalid " cQ3ed7@class)))))) (cQ3e74@gen-clause (lambda (cQ3ead@x cQ3eae@keys cQ3eaf@clauses cQ3eb0@r cQ3eb1@mr cQ3eb2@pat cQ3eb3@fender cQ3eb4@expr) (call-with-values (lambda () (cQ309a@convert-pattern cQ3eb2@pat cQ3eae@keys)) (lambda (cQ3ec1@cQ3ebe cQ3ec2@cQ3ec0) (let ((cQ3ec5@pvars cQ3ec2@cQ3ec0) (cQ3ec6@p cQ3ec1@cQ3ebe)) (if (not (cQ2e9f@distinct-bound-ids? (map car cQ3ec5@pvars))) (cQ3e72@invalid-ids-error (map car cQ3ec5@pvars) cQ3eb2@pat '"pattern variable") (if (not (for-all (lambda (cQ3ec9@x) (not (cQ309e@ellipsis? (car cQ3ec9@x)))) cQ3ec5@pvars)) (cQ317c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" cQ3eb2@pat) (let ((cQ3ecb@y (cQ2e1d@gen-lexical 'tmp))) (let ((cQ3ecd@test (if (eq? cQ3eb3@fender '#t) cQ3ecb@y (let ((cQ3ecf@call (cQ3e70@build-dispatch-call cQ3ec5@pvars cQ3eb3@fender cQ3ecb@y cQ3eb0@r cQ3eb1@mr))) (list 'if cQ3ecb@y cQ3ecf@call (list 'quote '#f)))))) (let ((cQ3ed1@conseq (cQ3e70@build-dispatch-call cQ3ec5@pvars cQ3eb4@expr cQ3ecb@y cQ3eb0@r cQ3eb1@mr))) (let ((cQ3ed3@altern (cQ3e76@gen-syntax-case cQ3ead@x cQ3eae@keys cQ3eaf@clauses cQ3eb0@r cQ3eb1@mr))) (list (cQ2df8@cQ2d2a@build-lambda '#f (list cQ3ecb@y) (list 'if cQ3ecd@test cQ3ed1@conseq cQ3ed3@altern)) (list '(primitive syntax-dispatch) cQ3ead@x (list 'quote cQ3ec6@p)))))))))))))) (cQ3e76@gen-syntax-case (lambda (cQ3e8b@x cQ3e8c@keys cQ3e8d@clauses cQ3e8e@r cQ3e8f@mr) (if (null? cQ3e8d@clauses) (list '(primitive syntax-error) cQ3e8b@x) (let ((cQ3e95@t (car cQ3e8d@clauses))) (let ((cQ3e97@ls/false (cQ309c@syntax-dispatch cQ3e95@t '(any any)))) (if cQ3e97@ls/false (apply (lambda (cQ3e99@pat cQ3e9a@expr) (if (and (cQ2e95@id? cQ3e99@pat) (not (cQ2ea1@bound-id-member? cQ3e99@pat cQ3e8c@keys)) (not (cQ309e@ellipsis? cQ3e99@pat))) (if (cQ2e9b@free-id=? cQ3e99@pat (cQ3024@scheme-stx '_)) (cQ30be@chi-expr cQ3e9a@expr cQ3e8e@r cQ3e8f@mr) (let ((cQ3e9d@lab (cQ2e21@gen-label cQ3e99@pat)) (cQ3e9e@lex (cQ2e1d@gen-lexical cQ3e99@pat))) (let ((cQ3ea1@body (cQ30be@chi-expr (cQ2e81@add-subst (cQ2e55@make-full-rib (list cQ3e99@pat) (list cQ3e9d@lab)) cQ3e9a@expr) (cons (cons cQ3e9d@lab (cQ2eaf@make-binding 'syntax (cons cQ3e9e@lex '0))) cQ3e8e@r) cQ3e8f@mr))) (list (cQ2df8@cQ2d2a@build-lambda '#f (list cQ3e9e@lex) cQ3ea1@body) cQ3e8b@x)))) (cQ3e74@gen-clause cQ3e8b@x cQ3e8c@keys (cdr cQ3e8d@clauses) cQ3e8e@r cQ3e8f@mr cQ3e99@pat '#t cQ3e9a@expr))) cQ3e97@ls/false) (let ((cQ3ea3@t cQ3e95@t)) (let ((cQ3ea5@ls/false (cQ309c@syntax-dispatch cQ3ea3@t '(any any any)))) (if cQ3ea5@ls/false (apply (lambda (cQ3ea7@pat cQ3ea8@fender cQ3ea9@expr) (cQ3e74@gen-clause cQ3e8b@x cQ3e8c@keys (cdr cQ3e8d@clauses) cQ3e8e@r cQ3e8f@mr cQ3ea7@pat cQ3ea8@fender cQ3ea9@expr)) cQ3ea5@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3ea3@t))))))))))) (lambda (cQ3e77@e cQ3e78@r cQ3e79@mr) (let ((cQ3e7d@t cQ3e77@e)) (let ((cQ3e7f@ls/false (cQ309c@syntax-dispatch cQ3e7d@t '(_ any each-any . each-any)))) (if cQ3e7f@ls/false (apply (lambda (cQ3e81@expr cQ3e82@keys cQ3e83@clauses) (begin (cQ30a2@verify-literals cQ3e82@keys cQ3e77@e) (let ((cQ3e87@x (cQ2e1d@gen-lexical 'tmp))) (let ((cQ3e89@body (cQ3e76@gen-syntax-case cQ3e87@x cQ3e82@keys cQ3e83@clauses cQ3e78@r cQ3e79@mr))) (list (cQ2df8@cQ2d2a@build-lambda '#f (list cQ3e87@x) cQ3e89@body) (cQ30be@chi-expr cQ3e81@expr cQ3e78@r cQ3e79@mr)))))) cQ3e7f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3e7d@t))))))) (set! cQ4b76@cQ30a4@syntax-case-transformer cQ30a4@syntax-case-transformer) (set! cQ30a6@ellipsis-map (lambda (cQ3efb@proc cQ3efc@ls . cQ3eff@ls*) (letrec* ((cQ3f02@who '...)) (begin (if (not (list? cQ3efc@ls)) (assertion-violation cQ3f02@who '"not a list" cQ3efc@ls) (void)) (if (not (null? cQ3eff@ls*)) (let ((cQ3f03@n (length cQ3efc@ls))) (for-each (lambda (cQ3f05@x) (begin (if (not (list? cQ3f05@x)) (assertion-violation cQ3f02@who '"not a list" cQ3f05@x) (void)) (if (not (= (length cQ3f05@x) cQ3f03@n)) (assertion-violation cQ3f02@who '"length mismatch" cQ3efc@ls cQ3f05@x) (void)))) cQ3eff@ls*)) (void)) (apply map cQ3efb@proc cQ3efc@ls cQ3eff@ls*))))) (set! cQ4b77@cQ30a6@ellipsis-map cQ30a6@ellipsis-map) (set! cQ30a8@syntax-transformer (letrec* ((cQ3f08@gen-syntax (lambda (cQ3f7f@src cQ3f80@e cQ3f81@r cQ3f82@maps cQ3f83@ellipsis? cQ3f84@vec?) (let ((cQ3f8b@t cQ3f80@e)) (let ((cQ3f8d@ls/false (cQ309c@syntax-dispatch cQ3f8b@t 'any))) (if (and cQ3f8d@ls/false (apply (lambda (cQ3f8f@dots) (cQ3f83@ellipsis? cQ3f8f@dots)) cQ3f8d@ls/false)) (apply (lambda (cQ3f91@dots) (cQ317c@syntax-violation '#f '"misplaced ellipsis in syntax form" cQ3f7f@src)) cQ3f8d@ls/false) (let ((cQ3f93@t cQ3f8b@t)) (let ((cQ3f95@ls/false (cQ309c@syntax-dispatch cQ3f93@t 'any))) (if (and cQ3f95@ls/false (apply (lambda (cQ3f97@id) (cQ2e95@id? cQ3f97@id)) cQ3f95@ls/false)) (apply (lambda (cQ3f99@id) (let ((cQ3f9b@label (cQ2eab@id->label cQ3f80@e))) (let ((cQ3f9d@b (cQ2ead@label->binding cQ3f9b@label cQ3f81@r))) (if (eq? (cQ2eb1@binding-type cQ3f9d@b) 'syntax) (call-with-values (lambda () (let ((cQ3fa3@var.lev (cQ2eb3@binding-value cQ3f9d@b))) (cQ3f0a@gen-ref cQ3f7f@src (car cQ3fa3@var.lev) (cdr cQ3fa3@var.lev) cQ3f82@maps))) (lambda (cQ3fa5@cQ3fa0 cQ3fa6@cQ3fa2) (let ((cQ3fa9@maps cQ3fa6@cQ3fa2) (cQ3faa@var cQ3fa5@cQ3fa0)) (values (list 'ref cQ3faa@var) cQ3fa9@maps)))) (values (list 'quote cQ3f80@e) cQ3f82@maps))))) cQ3f95@ls/false) (let ((cQ3fad@t cQ3f93@t)) (let ((cQ3faf@ls/false (cQ309c@syntax-dispatch cQ3fad@t '(any any)))) (if (and cQ3faf@ls/false (apply (lambda (cQ3fb1@dots cQ3fb2@e) (cQ3f83@ellipsis? cQ3fb1@dots)) cQ3faf@ls/false)) (apply (lambda (cQ3fb5@dots cQ3fb6@e) (if cQ3f84@vec? (cQ317c@syntax-violation '#f '"misplaced ellipsis in syntax form" cQ3f7f@src) (cQ3f08@gen-syntax cQ3f7f@src cQ3fb6@e cQ3f81@r cQ3f82@maps (lambda (cQ3fb9@x) '#f) '#f))) cQ3faf@ls/false) (let ((cQ3fbb@t cQ3fad@t)) (let ((cQ3fbd@ls/false (cQ309c@syntax-dispatch cQ3fbb@t '(any any . any)))) (if (and cQ3fbd@ls/false (apply (lambda (cQ3fbf@x cQ3fc0@dots cQ3fc1@y) (cQ3f83@ellipsis? cQ3fc0@dots)) cQ3fbd@ls/false)) (apply (lambda (cQ3fc5@x cQ3fc6@dots cQ3fc7@y) (let cQ3fdd@f ((cQ3fcb@y cQ3fc7@y) (cQ3fcc@k (lambda (cQ3fcf@maps) (call-with-values (lambda () (cQ3f08@gen-syntax cQ3f7f@src cQ3fc5@x cQ3f81@r (cons '() cQ3fcf@maps) cQ3f83@ellipsis? '#f)) (lambda (cQ3fd5@cQ3fd2 cQ3fd6@cQ3fd4) (let ((cQ3fd9@maps cQ3fd6@cQ3fd4) (cQ3fda@x cQ3fd5@cQ3fd2)) (if (null? (car cQ3fd9@maps)) (cQ317c@syntax-violation '#f '"extra ellipsis in syntax form" cQ3f7f@src) (values (cQ3f10@gen-map cQ3fda@x (car cQ3fd9@maps)) (cdr cQ3fd9@maps))))))))) (let ((cQ3fdf@t cQ3fcb@y)) (let ((cQ3fe1@ls/false (cQ309c@syntax-dispatch cQ3fdf@t '()))) (if cQ3fe1@ls/false (apply (lambda () (cQ3fcc@k cQ3f82@maps)) cQ3fe1@ls/false) (let ((cQ3fe3@t cQ3fdf@t)) (let ((cQ3fe5@ls/false (cQ309c@syntax-dispatch cQ3fe3@t '(any . any)))) (if (and cQ3fe5@ls/false (apply (lambda (cQ3fe7@dots cQ3fe8@y) (cQ3f83@ellipsis? cQ3fe7@dots)) cQ3fe5@ls/false)) (apply (lambda (cQ3feb@dots cQ3fec@y) (cQ3fdd@f cQ3fec@y (lambda (cQ3fef@maps) (call-with-values (lambda () (cQ3fcc@k (cons '() cQ3fef@maps))) (lambda (cQ3ff5@cQ3ff2 cQ3ff6@cQ3ff4) (let ((cQ3ff9@maps cQ3ff6@cQ3ff4) (cQ3ffa@x cQ3ff5@cQ3ff2)) (if (null? (car cQ3ff9@maps)) (cQ317c@syntax-violation '#f '"extra ellipsis in syntax form" cQ3f7f@src) (values (cQ3f0e@gen-mappend cQ3ffa@x (car cQ3ff9@maps)) (cdr cQ3ff9@maps))))))))) cQ3fe5@ls/false) (let ((cQ3ffd@t cQ3fe3@t)) (let ((cQ3fff@ls/false (cQ309c@syntax-dispatch cQ3ffd@t '_))) (if cQ3fff@ls/false (apply (lambda () (call-with-values (lambda () (cQ3f08@gen-syntax cQ3f7f@src cQ3fcb@y cQ3f81@r cQ3f82@maps cQ3f83@ellipsis? cQ3f84@vec?)) (lambda (cQ4005@cQ4002 cQ4006@cQ4004) (let ((cQ4009@maps cQ4006@cQ4004) (cQ400a@y cQ4005@cQ4002)) (call-with-values (lambda () (cQ3fcc@k cQ4009@maps)) (lambda (cQ4011@cQ400e cQ4012@cQ4010) (let ((cQ4015@maps cQ4012@cQ4010) (cQ4016@x cQ4011@cQ400e)) (values (cQ3f0c@gen-append cQ4016@x cQ400a@y) cQ4015@maps)))))))) cQ3fff@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3ffd@t)))))))))))) cQ3fbd@ls/false) (let ((cQ4019@t cQ3fbb@t)) (let ((cQ401b@ls/false (cQ309c@syntax-dispatch cQ4019@t '(any . any)))) (if cQ401b@ls/false (apply (lambda (cQ401d@x cQ401e@y) (call-with-values (lambda () (cQ3f08@gen-syntax cQ3f7f@src cQ401d@x cQ3f81@r cQ3f82@maps cQ3f83@ellipsis? '#f)) (lambda (cQ4025@cQ4022 cQ4026@cQ4024) (let ((cQ4029@maps cQ4026@cQ4024) (cQ402a@xnew cQ4025@cQ4022)) (call-with-values (lambda () (cQ3f08@gen-syntax cQ3f7f@src cQ401e@y cQ3f81@r cQ4029@maps cQ3f83@ellipsis? cQ3f84@vec?)) (lambda (cQ4031@cQ402e cQ4032@cQ4030) (let ((cQ4035@maps cQ4032@cQ4030) (cQ4036@ynew cQ4031@cQ402e)) (values (cQ3f12@gen-cons cQ3f80@e cQ401d@x cQ401e@y cQ402a@xnew cQ4036@ynew) cQ4035@maps)))))))) cQ401b@ls/false) (let ((cQ4039@t cQ4019@t)) (let ((cQ403b@ls/false (cQ309c@syntax-dispatch cQ4039@t '#(vector each-any)))) (if cQ403b@ls/false (apply (lambda (cQ403d@ls) (call-with-values (lambda () (cQ3f08@gen-syntax cQ3f7f@src cQ403d@ls cQ3f81@r cQ3f82@maps cQ3f83@ellipsis? '#t)) (lambda (cQ4043@cQ4040 cQ4044@cQ4042) (let ((cQ4047@maps cQ4044@cQ4042) (cQ4048@lsnew cQ4043@cQ4040)) (values (cQ3f14@gen-vector cQ3f80@e cQ403d@ls cQ4048@lsnew) cQ4047@maps))))) cQ403b@ls/false) (let ((cQ404b@t cQ4039@t)) (let ((cQ404d@ls/false (cQ309c@syntax-dispatch cQ404b@t '_))) (if cQ404d@ls/false (apply (lambda () (values (list 'quote cQ3f80@e) cQ3f82@maps)) cQ404d@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ404b@t)))))))))))))))))))))))) (cQ3f0a@gen-ref (lambda (cQ3f65@src cQ3f66@var cQ3f67@level cQ3f68@maps) (if (= cQ3f67@level '0) (values cQ3f66@var cQ3f68@maps) (if (null? cQ3f68@maps) (cQ317c@syntax-violation '#f '"missing ellipsis in syntax form" cQ3f65@src) (call-with-values (lambda () (cQ3f0a@gen-ref cQ3f65@src cQ3f66@var (- cQ3f67@level '1) (cdr cQ3f68@maps))) (lambda (cQ3f71@cQ3f6e cQ3f72@cQ3f70) (let ((cQ3f75@outer-maps cQ3f72@cQ3f70) (cQ3f76@outer-var cQ3f71@cQ3f6e)) (let ((cQ3f79@t (assq cQ3f76@outer-var (car cQ3f68@maps)))) (if cQ3f79@t ((lambda (cQ3f7b@b) (values (cdr cQ3f7b@b) cQ3f68@maps)) cQ3f79@t) (let ((cQ3f7d@inner-var (cQ2e1d@gen-lexical 'tmp))) (values cQ3f7d@inner-var (cons (cons (cons cQ3f76@outer-var cQ3f7d@inner-var) (car cQ3f68@maps)) cQ3f75@outer-maps)))))))))))) (cQ3f0c@gen-append (lambda (cQ3f61@x cQ3f62@y) (if (fast-equal? cQ3f62@y ''()) cQ3f61@x (list 'append cQ3f61@x cQ3f62@y)))) (cQ3f0e@gen-mappend (lambda (cQ3f5d@e cQ3f5e@map-env) (list 'apply '(primitive append) (cQ3f10@gen-map cQ3f5d@e cQ3f5e@map-env)))) (cQ3f10@gen-map (lambda (cQ3f4b@e cQ3f4c@map-env) (let ((cQ3f4f@formals (map cdr cQ3f4c@map-env)) (cQ3f50@actuals (map (lambda (cQ3f53@x) (list 'ref (car cQ3f53@x))) cQ3f4c@map-env))) (if (eq? (car cQ3f4b@e) 'ref) (car cQ3f50@actuals) (if (for-all (lambda (cQ3f55@x) (and (eq? (car cQ3f55@x) 'ref) (memq (cadr cQ3f55@x) cQ3f4f@formals))) (cdr cQ3f4b@e)) (let ((cQ3f57@args (map (let ((cQ3f59@r (map cons cQ3f4f@formals cQ3f50@actuals))) (lambda (cQ3f5b@x) (cdr (assq (cadr cQ3f5b@x) cQ3f59@r)))) (cdr cQ3f4b@e)))) (cons 'map (cons (list 'primitive (car cQ3f4b@e)) cQ3f57@args))) (cons* 'map (list 'lambda cQ3f4f@formals cQ3f4b@e) cQ3f50@actuals)))))) (cQ3f12@gen-cons (lambda (cQ3f3b@e cQ3f3c@x cQ3f3d@y cQ3f3e@xnew cQ3f3f@ynew) (let ((cQ3f45@t (car cQ3f3f@ynew))) (if (memv cQ3f45@t '(quote)) (if (eq? (car cQ3f3e@xnew) 'quote) (let ((cQ3f47@xnew (cadr cQ3f3e@xnew)) (cQ3f48@ynew (cadr cQ3f3f@ynew))) (if (and (eq? cQ3f47@xnew cQ3f3c@x) (eq? cQ3f48@ynew cQ3f3d@y)) (list 'quote cQ3f3b@e) (list 'quote (cons cQ3f47@xnew cQ3f48@ynew)))) (if (null? (cadr cQ3f3f@ynew)) (list 'list cQ3f3e@xnew) (list 'cons cQ3f3e@xnew cQ3f3f@ynew))) (if (memv cQ3f45@t '(list)) (cons 'list (cons cQ3f3e@xnew (cdr cQ3f3f@ynew))) (list 'cons cQ3f3e@xnew cQ3f3f@ynew)))))) (cQ3f14@gen-vector (lambda (cQ3f35@e cQ3f36@ls cQ3f37@lsnew) (if (eq? (car cQ3f37@lsnew) 'quote) (if (eq? (cadr cQ3f37@lsnew) cQ3f36@ls) (list 'quote cQ3f35@e) (list 'quote (list->vector (cadr cQ3f37@lsnew)))) (if (eq? (car cQ3f37@lsnew) 'list) (cons 'vector (cdr cQ3f37@lsnew)) (list 'list->vector cQ3f37@lsnew))))) (cQ3f16@regen (lambda (cQ3f2f@x) (let ((cQ3f31@t (car cQ3f2f@x))) (if (memv cQ3f31@t '(ref)) (cadr cQ3f2f@x) (if (memv cQ3f31@t '(primitive)) (list 'primitive (cadr cQ3f2f@x)) (if (memv cQ3f31@t '(quote)) (list 'quote (cadr cQ3f2f@x)) (if (memv cQ3f31@t '(lambda)) (cQ2df8@cQ2d2a@build-lambda '#f (cadr cQ3f2f@x) (cQ3f16@regen (caddr cQ3f2f@x))) (if (memv cQ3f31@t '(map)) (let ((cQ3f33@ls (map cQ3f16@regen (cdr cQ3f2f@x)))) (cons '(primitive ellipsis-map) cQ3f33@ls)) (cons (list 'primitive (car cQ3f2f@x)) (map cQ3f16@regen (cdr cQ3f2f@x)))))))))))) (lambda (cQ3f17@e cQ3f18@r cQ3f19@mr) (let ((cQ3f1d@t cQ3f17@e)) (let ((cQ3f1f@ls/false (cQ309c@syntax-dispatch cQ3f1d@t '(_ any)))) (if cQ3f1f@ls/false (apply (lambda (cQ3f21@x) (call-with-values (lambda () (cQ3f08@gen-syntax cQ3f17@e cQ3f21@x cQ3f18@r '() cQ309e@ellipsis? '#f)) (lambda (cQ3f27@cQ3f24 cQ3f28@cQ3f26) (let ((cQ3f2b@maps cQ3f28@cQ3f26) (cQ3f2c@e cQ3f27@cQ3f24)) (cQ3f16@regen cQ3f2c@e))))) cQ3f1f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ3f1d@t))))))) (set! cQ4b78@cQ30a8@syntax-transformer cQ30a8@syntax-transformer) (set! cQ30aa@core-macro-transformer (lambda (cQ404f@name) (let ((cQ4051@t cQ404f@name)) (if (memv cQ4051@t '(quote)) cQ304c@quote-transformer (if (memv cQ4051@t '(lambda)) cQ3050@lambda-transformer (if (memv cQ4051@t '(case-lambda)) cQ304e@case-lambda-transformer (if (memv cQ4051@t '(letrec)) cQ3034@letrec-transformer (if (memv cQ4051@t '(letrec*)) cQ3036@letrec*-transformer (if (memv cQ4051@t '(let)) cQ3032@let-transformer (if (memv cQ4051@t '(if)) cQ3044@if-transformer (if (memv cQ4051@t '(and)) cQ3046@and-transformer (if (memv cQ4051@t '(or)) cQ3048@or-transformer (if (memv cQ4051@t '(foreign-call)) cQ3098@foreign-call-transformer (if (memv cQ4051@t '(syntax-case)) cQ30a4@syntax-case-transformer (if (memv cQ4051@t '(syntax)) cQ30a8@syntax-transformer (if (memv cQ4051@t '(type-descriptor)) cQ303a@type-descriptor-transformer (if (memv cQ4051@t '(record-type-descriptor)) cQ303c@record-type-descriptor-transformer (if (memv cQ4051@t '(record-constructor-descriptor)) cQ303e@record-constructor-descriptor-transformer (if (memv cQ4051@t '(fluid-let-syntax)) cQ3038@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" cQ404f@name)))))))))))))))))))) (set! cQ4b79@cQ30aa@core-macro-transformer cQ30aa@core-macro-transformer) (set! cQ30ac@symbol-macro (lambda (cQ4053@x cQ4054@set) (let ((cQ4057@t cQ4053@x)) (let ((cQ4059@ls/false (cQ309c@syntax-dispatch cQ4057@t '(_ any)))) (if (and cQ4059@ls/false (apply (lambda (cQ405b@name) (and (cQ2e95@id? cQ405b@name) (memq (cQ2e97@id->sym cQ405b@name) cQ4054@set))) cQ4059@ls/false)) (apply (lambda (cQ405d@name) (cQ3052@bless (list 'quote cQ405d@name))) cQ4059@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4057@t)))))) (set! cQ4b7a@cQ30ac@symbol-macro cQ30ac@symbol-macro) (set! cQ30ae@macro-transformer (lambda (cQ405f@x) (if (procedure? cQ405f@x) cQ405f@x (if (symbol? cQ405f@x) (let ((cQ4061@t cQ405f@x)) (if (memv cQ4061@t '(define-record-type)) cQ3090@define-record-type-macro (if (memv cQ4061@t '(define-struct)) cQ308e@define-struct-macro (if (memv cQ4061@t '(include)) cQ3084@include-macro (if (memv cQ4061@t '(cond)) cQ3080@cond-macro (if (memv cQ4061@t '(let)) cQ3058@let-macro (if (memv cQ4061@t '(do)) cQ3078@do-macro (if (memv cQ4061@t '(or)) cQ307c@or-macro (if (memv cQ4061@t '(and)) cQ307e@and-macro (if (memv cQ4061@t '(let*)) cQ307a@let*-macro (if (memv cQ4061@t '(let-values)) cQ305a@let-values-macro (if (memv cQ4061@t '(let*-values)) cQ305c@let*-values-macro (if (memv cQ4061@t '(syntax-rules)) cQ3088@syntax-rules-macro (if (memv cQ4061@t '(quasiquote)) cQ308a@quasiquote-macro (if (memv cQ4061@t '(quasisyntax)) cQ308c@quasisyntax-macro (if (memv cQ4061@t '(with-syntax)) cQ3054@with-syntax-macro (if (memv cQ4061@t '(when)) cQ3040@when-macro (if (memv cQ4061@t '(unless)) cQ3042@unless-macro (if (memv cQ4061@t '(case)) cQ304a@case-macro (if (memv cQ4061@t '(identifier-syntax)) cQ3076@identifier-syntax-macro (if (memv cQ4061@t '(time)) cQ306e@time-macro (if (memv cQ4061@t '(delay)) cQ3070@delay-macro (if (memv cQ4061@t '(assert)) cQ3072@assert-macro (if (memv cQ4061@t '(endianness)) cQ3074@endianness-macro (if (memv cQ4061@t '(guard)) cQ306a@guard-macro (if (memv cQ4061@t '(define-enumeration)) cQ306c@define-enumeration-macro (if (memv cQ4061@t '(trace-lambda)) cQ305e@trace-lambda-macro (if (memv cQ4061@t '(trace-define)) cQ3060@trace-define-macro (if (memv cQ4061@t '(trace-define-syntax)) cQ3062@trace-define-syntax-macro (if (memv cQ4061@t '(trace-let-syntax)) cQ3066@trace-let-syntax-macro (if (memv cQ4061@t '(trace-letrec-syntax)) cQ3068@trace-letrec-syntax-macro (if (memv cQ4061@t '(define-condition-type)) cQ3092@define-condition-type-macro (if (memv cQ4061@t '(parameterize)) cQ3096@parameterize-macro (if (memv cQ4061@t '(include-into)) cQ3086@include-into-macro (if (memv cQ4061@t '(eol-style)) (lambda (cQ4063@x) (cQ30ac@symbol-macro cQ4063@x '(none lf cr crlf nel crnel ls))) (if (memv cQ4061@t '(error-handling-mode)) (lambda (cQ4065@x) (cQ30ac@symbol-macro cQ4065@x '(ignore raise replace))) (if (memv cQ4061@t '(buffer-mode)) (lambda (cQ4067@x) (cQ30ac@symbol-macro cQ4067@x '(none line block))) (if (memv cQ4061@t '(file-options)) cQ2e10@file-options-macro (if (memv cQ4061@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) cQ3094@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" cQ405f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" cQ405f@x))))) (set! cQ4b7b@cQ30ae@macro-transformer cQ30ae@macro-transformer) (set! cQ30b0@local-macro-transformer (lambda (cQ4069@x) (car cQ4069@x))) (set! cQ4b7c@cQ30b0@local-macro-transformer cQ30b0@local-macro-transformer) (set! cQ30b2@do-macro-call (lambda (cQ406b@transformer cQ406c@expr) (let ((cQ406f@out (cQ406b@transformer (cQ2e7f@add-mark cQ2e79@anti-mark cQ406c@expr '#f)))) (begin (let cQ4073@f ((cQ4071@x cQ406f@out)) (if (not (cQ2e61@stx? cQ4071@x)) (if (pair? cQ4071@x) (begin (cQ4073@f (car cQ4071@x)) (cQ4073@f (cdr cQ4071@x))) (if (vector? cQ4071@x) (vector-for-each cQ4073@f cQ4071@x) (if (symbol? cQ4071@x) (cQ317c@syntax-violation '#f '"raw symbol encountered in output of macro" cQ406c@expr cQ4071@x) (void)))) (void))) (cQ2e7f@add-mark (cQ2e77@gen-mark) cQ406f@out cQ406c@expr))))) (set! cQ4b7d@cQ30b2@do-macro-call cQ30b2@do-macro-call) (set! cQ30b4@chi-macro (lambda (cQ4075@p cQ4076@e) (cQ30b2@do-macro-call (cQ30ae@macro-transformer cQ4075@p) cQ4076@e))) (set! cQ4b7e@cQ30b4@chi-macro cQ30b4@chi-macro) (set! cQ30b6@chi-local-macro (lambda (cQ4079@p cQ407a@e) (cQ30b2@do-macro-call (cQ30b0@local-macro-transformer cQ4079@p) cQ407a@e))) (set! cQ4b7f@cQ30b6@chi-local-macro cQ30b6@chi-local-macro) (set! cQ30b8@chi-global-macro (lambda (cQ407d@p cQ407e@e) (let ((cQ4081@lib (car cQ407d@p)) (cQ4082@loc (cdr cQ407d@p))) (begin (cQ2cb1@cQ2af0@visit-library cQ4081@lib) (let ((cQ4085@x (symbol-value cQ4082@loc))) (let ((cQ4087@transformer (if (procedure? cQ4085@x) cQ4085@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" cQ4085@x)))) (cQ30b2@do-macro-call cQ4087@transformer cQ407e@e))))))) (set! cQ4b80@cQ30b8@chi-global-macro cQ30b8@chi-global-macro) (set! cQ30ba@chi-expr* (lambda (cQ4089@e* cQ408a@r cQ408b@mr) (if (null? cQ4089@e*) '() (let ((cQ408f@e (cQ30be@chi-expr (car cQ4089@e*) cQ408a@r cQ408b@mr))) (cons cQ408f@e (cQ30ba@chi-expr* (cdr cQ4089@e*) cQ408a@r cQ408b@mr)))))) (set! cQ4b81@cQ30ba@chi-expr* cQ30ba@chi-expr*) (set! cQ30bc@chi-application (lambda (cQ4091@e cQ4092@r cQ4093@mr) (let ((cQ4097@t cQ4091@e)) (let ((cQ4099@ls/false (cQ309c@syntax-dispatch cQ4097@t '(any . each-any)))) (if cQ4099@ls/false (apply (lambda (cQ409b@rator cQ409c@rands) (let ((cQ409f@rator (cQ30be@chi-expr cQ409b@rator cQ4092@r cQ4093@mr))) (cons cQ409f@rator (cQ30ba@chi-expr* cQ409c@rands cQ4092@r cQ4093@mr)))) cQ4099@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4097@t)))))) (set! cQ4b82@cQ30bc@chi-application cQ30bc@chi-application) (set! cQ30be@chi-expr (lambda (cQ40a1@e cQ40a2@r cQ40a3@mr) (call-with-values (lambda () (cQ2eb7@syntax-type cQ40a1@e cQ40a2@r)) (lambda (cQ40ad@cQ40a8 cQ40ae@cQ40aa cQ40af@cQ40ac) (let ((cQ40b3@kwd cQ40af@cQ40ac) (cQ40b4@value cQ40ae@cQ40aa) (cQ40b5@type cQ40ad@cQ40a8)) (let ((cQ40b9@t cQ40b5@type)) (if (memv cQ40b9@t '(core-macro)) (let ((cQ40bb@transformer (cQ30aa@core-macro-transformer cQ40b4@value))) (cQ40bb@transformer cQ40a1@e cQ40a2@r cQ40a3@mr)) (if (memv cQ40b9@t '(global)) (let ((cQ40bd@lib (car cQ40b4@value))) (let ((cQ40bf@loc (cdr cQ40b4@value))) (begin ((cQ3104@inv-collector) cQ40bd@lib) cQ40bf@loc))) (if (memv cQ40b9@t '(core-prim)) (let ((cQ40c1@name cQ40b4@value)) (list 'primitive cQ40c1@name)) (if (memv cQ40b9@t '(call)) (cQ30bc@chi-application cQ40a1@e cQ40a2@r cQ40a3@mr) (if (memv cQ40b9@t '(lexical)) (let ((cQ40c3@lex (cQ3026@lexical-var cQ40b4@value))) cQ40c3@lex) (if (memv cQ40b9@t '(global-macro global-macro!)) (cQ30be@chi-expr (cQ30b8@chi-global-macro cQ40b4@value cQ40a1@e) cQ40a2@r cQ40a3@mr) (if (memv cQ40b9@t '(local-macro local-macro!)) (cQ30be@chi-expr (cQ30b6@chi-local-macro cQ40b4@value cQ40a1@e) cQ40a2@r cQ40a3@mr) (if (memv cQ40b9@t '(macro macro!)) (cQ30be@chi-expr (cQ30b4@chi-macro cQ40b4@value cQ40a1@e) cQ40a2@r cQ40a3@mr) (if (memv cQ40b9@t '(constant)) (let ((cQ40c5@datum cQ40b4@value)) (list 'quote cQ40c5@datum)) (if (memv cQ40b9@t '(set!)) (cQ30c0@chi-set! cQ40a1@e cQ40a2@r cQ40a3@mr) (if (memv cQ40b9@t '(begin)) (let ((cQ40c7@t cQ40a1@e)) (let ((cQ40c9@ls/false (cQ309c@syntax-dispatch cQ40c7@t '(_ any . each-any)))) (if cQ40c9@ls/false (apply (lambda (cQ40cb@x cQ40cc@x*) (cQ2dfa@cQ2d5a@build-sequence '#f (cQ30ba@chi-expr* (cons cQ40cb@x cQ40cc@x*) cQ40a2@r cQ40a3@mr))) cQ40c9@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ40c7@t)))) (if (memv cQ40b9@t '(let-syntax letrec-syntax)) (let ((cQ40cf@t cQ40a1@e)) (let ((cQ40d1@ls/false (cQ309c@syntax-dispatch cQ40cf@t '(_ #(each (any any)) any . each-any)))) (if (and cQ40d1@ls/false (apply (lambda (cQ40d3@xlhs* cQ40d4@xrhs* cQ40d5@xbody cQ40d6@xbody*) (if (not (cQ2e9d@valid-bound-ids? cQ40d3@xlhs*)) (cQ317c@syntax-violation '#f '"invalid identifiers" cQ40a1@e) (void))) cQ40d1@ls/false)) (apply (lambda (cQ40db@xlhs* cQ40dc@xrhs* cQ40dd@xbody cQ40de@xbody*) (let ((cQ40e3@xlab* (map cQ2e21@gen-label cQ40db@xlhs*))) (let ((cQ40e5@xrib (cQ2e55@make-full-rib cQ40db@xlhs* cQ40e3@xlab*))) (let ((cQ40e7@xb* (map (lambda (cQ40e9@x) (cQ2ecd@make-eval-transformer (cQ30f6@expand-transformer (if (eq? cQ40b5@type 'let-syntax) cQ40e9@x (cQ2e81@add-subst cQ40e5@xrib cQ40e9@x)) cQ40a3@mr))) cQ40dc@xrhs*))) (cQ2dfa@cQ2d5a@build-sequence '#f (cQ30ba@chi-expr* (map (lambda (cQ40eb@x) (cQ2e81@add-subst cQ40e5@xrib cQ40eb@x)) (cons cQ40dd@xbody cQ40de@xbody*)) (append (map cons cQ40e3@xlab* cQ40e7@xb*) cQ40a2@r) (append (map cons cQ40e3@xlab* cQ40e7@xb*) cQ40a3@mr))))))) cQ40d1@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ40cf@t)))) (if (memv cQ40b9@t '(displaced-lexical)) (cQ317c@syntax-violation '#f '"identifier out of context" cQ40a1@e) (if (memv cQ40b9@t '(syntax)) (cQ317c@syntax-violation '#f '"reference to pattern variable outside a syntax form" cQ40a1@e) (if (memv cQ40b9@t '(define define-syntax module import library)) (cQ317c@syntax-violation '#f (string-append (let ((cQ40ed@t cQ40b5@type)) (if (memv cQ40ed@t '(define)) '"a definition" (if (memv cQ40ed@t '(define-syntax)) '"a define-syntax" (if (memv cQ40ed@t '(module)) '"a module definition" (if (memv cQ40ed@t '(library)) '"a library definition" (if (memv cQ40ed@t '(import)) '"an import declaration" (if (memv cQ40ed@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") cQ40a1@e) (if (memv cQ40b9@t '(mutable)) (cQ317c@syntax-violation '#f '"attempt to reference an unexportable variable" cQ40a1@e) (cQ317c@syntax-violation '#f '"invalid expression" cQ40a1@e))))))))))))))))))))))) (set! cQ4b83@cQ30be@chi-expr cQ30be@chi-expr) (set! cQ30c0@chi-set! (lambda (cQ40ef@e cQ40f0@r cQ40f1@mr) (let ((cQ40f5@t cQ40ef@e)) (let ((cQ40f7@ls/false (cQ309c@syntax-dispatch cQ40f5@t '(_ any any)))) (if (and cQ40f7@ls/false (apply (lambda (cQ40f9@x cQ40fa@v) (cQ2e95@id? cQ40f9@x)) cQ40f7@ls/false)) (apply (lambda (cQ40fd@x cQ40fe@v) (call-with-values (lambda () (cQ2eb7@syntax-type cQ40fd@x cQ40f0@r)) (lambda (cQ4107@cQ4102 cQ4108@cQ4104 cQ4109@cQ4106) (let ((cQ410d@kwd cQ4109@cQ4106) (cQ410e@value cQ4108@cQ4104) (cQ410f@type cQ4107@cQ4102)) (let ((cQ4113@t cQ410f@type)) (if (memv cQ4113@t '(lexical)) (begin (cQ302a@set-lexical-mutable! cQ410e@value '#t) (list 'set! (cQ3026@lexical-var cQ410e@value) (cQ30be@chi-expr cQ40fe@v cQ40f0@r cQ40f1@mr))) (if (memv cQ4113@t '(core-prim)) (cQ317c@syntax-violation '#f '"cannot modify imported core primitive" cQ40ef@e) (if (memv cQ4113@t '(global)) (cQ317c@syntax-violation '#f '"attempt to modify imported binding" cQ40ef@e) (if (memv cQ4113@t '(global-macro!)) (cQ30be@chi-expr (cQ30b8@chi-global-macro cQ410e@value cQ40ef@e) cQ40f0@r cQ40f1@mr) (if (memv cQ4113@t '(local-macro!)) (cQ30be@chi-expr (cQ30b6@chi-local-macro cQ410e@value cQ40ef@e) cQ40f0@r cQ40f1@mr) (if (memv cQ4113@t '(mutable)) (cQ317c@syntax-violation '#f '"attempt to assign to an unexportable variable" cQ40ef@e) (cQ317c@syntax-violation '#f '"invalid syntax" cQ40ef@e)))))))))))) cQ40f7@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ40f5@t)))))) (set! cQ4b84@cQ30c0@chi-set! cQ30c0@chi-set!) (set! cQ30c2@verify-formals (lambda (cQ4115@fmls cQ4116@stx) (let ((cQ4119@t cQ4115@fmls)) (let ((cQ411b@ls/false (cQ309c@syntax-dispatch cQ4119@t 'each-any))) (if cQ411b@ls/false (apply (lambda (cQ411d@x*) (if (not (cQ2e9d@valid-bound-ids? cQ411d@x*)) (cQ3056@invalid-fmls-error cQ4116@stx cQ4115@fmls) (void))) cQ411b@ls/false) (let ((cQ411f@t cQ4119@t)) (let ((cQ4121@ls/false (cQ309c@syntax-dispatch cQ411f@t '#(each+ any () any)))) (if cQ4121@ls/false (apply (lambda (cQ4123@x* cQ4124@x) (if (not (cQ2e9d@valid-bound-ids? (cons cQ4124@x cQ4123@x*))) (cQ3056@invalid-fmls-error cQ4116@stx cQ4115@fmls) (void))) cQ4121@ls/false) (let ((cQ4127@t cQ411f@t)) (let ((cQ4129@ls/false (cQ309c@syntax-dispatch cQ4127@t '_))) (if cQ4129@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid syntax" cQ4116@stx)) cQ4129@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4127@t)))))))))))) (set! cQ4b85@cQ30c2@verify-formals cQ30c2@verify-formals) (set! cQ30c4@chi-lambda-clause (lambda (cQ412b@stx cQ412c@fmls cQ412d@body* cQ412e@r cQ412f@mr) (let ((cQ4135@t cQ412c@fmls)) (let ((cQ4137@ls/false (cQ309c@syntax-dispatch cQ4135@t 'each-any))) (if cQ4137@ls/false (apply (lambda (cQ4139@x*) (begin (cQ30c2@verify-formals cQ412c@fmls cQ412b@stx) (let ((cQ413b@lex* (map cQ2e1d@gen-lexical cQ4139@x*)) (cQ413c@lab* (map cQ2e21@gen-label cQ4139@x*))) (values cQ413b@lex* (cQ30d4@chi-internal (cQ2e81@add-subst (cQ2e55@make-full-rib cQ4139@x* cQ413c@lab*) cQ412d@body*) (cQ302e@add-lexicals cQ413c@lab* cQ413b@lex* cQ412e@r) cQ412f@mr))))) cQ4137@ls/false) (let ((cQ413f@t cQ4135@t)) (let ((cQ4141@ls/false (cQ309c@syntax-dispatch cQ413f@t '#(each+ any () any)))) (if cQ4141@ls/false (apply (lambda (cQ4143@x* cQ4144@x) (begin (cQ30c2@verify-formals cQ412c@fmls cQ412b@stx) (let ((cQ4147@lex* (map cQ2e1d@gen-lexical cQ4143@x*)) (cQ4148@lab* (map cQ2e21@gen-label cQ4143@x*)) (cQ4149@lex (cQ2e1d@gen-lexical cQ4144@x)) (cQ414a@lab (cQ2e21@gen-label cQ4144@x))) (values (append cQ4147@lex* cQ4149@lex) (cQ30d4@chi-internal (cQ2e81@add-subst (cQ2e55@make-full-rib (cons cQ4144@x cQ4143@x*) (cons cQ414a@lab cQ4148@lab*)) cQ412d@body*) (cQ302e@add-lexicals (cons cQ414a@lab cQ4148@lab*) (cons cQ4149@lex cQ4147@lex*) cQ412e@r) cQ412f@mr))))) cQ4141@ls/false) (let ((cQ414f@t cQ413f@t)) (let ((cQ4151@ls/false (cQ309c@syntax-dispatch cQ414f@t '_))) (if cQ4151@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid syntax" cQ412c@fmls)) cQ4151@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ414f@t)))))))))))) (set! cQ4b86@cQ30c4@chi-lambda-clause cQ30c4@chi-lambda-clause) (set! cQ30c6@chi-lambda-clause* (lambda (cQ4153@stx cQ4154@fmls* cQ4155@body** cQ4156@r cQ4157@mr) (if (null? cQ4154@fmls*) (values '() '()) (call-with-values (lambda () (cQ30c4@chi-lambda-clause cQ4153@stx (car cQ4154@fmls*) (car cQ4155@body**) cQ4156@r cQ4157@mr)) (lambda (cQ4161@cQ415e cQ4162@cQ4160) (let ((cQ4165@b cQ4162@cQ4160) (cQ4166@a cQ4161@cQ415e)) (call-with-values (lambda () (cQ30c6@chi-lambda-clause* cQ4153@stx (cdr cQ4154@fmls*) (cdr cQ4155@body**) cQ4156@r cQ4157@mr)) (lambda (cQ416d@cQ416a cQ416e@cQ416c) (let ((cQ4171@b* cQ416e@cQ416c) (cQ4172@a* cQ416d@cQ416a)) (values (cons cQ4166@a cQ4172@a*) (cons cQ4165@b cQ4171@b*))))))))))) (set! cQ4b87@cQ30c6@chi-lambda-clause* cQ30c6@chi-lambda-clause*) (set! cQ30c8@chi-defun (lambda (cQ4175@x cQ4176@r cQ4177@mr) (let ((cQ417b@fmls (car cQ4175@x)) (cQ417c@body* (cdr cQ4175@x))) (call-with-values (lambda () (cQ30c4@chi-lambda-clause cQ417b@fmls cQ417b@fmls cQ417c@body* cQ4176@r cQ4177@mr)) (lambda (cQ4183@cQ4180 cQ4184@cQ4182) (let ((cQ4187@body cQ4184@cQ4182) (cQ4188@fmls cQ4183@cQ4180)) (cQ2df8@cQ2d2a@build-lambda '#f cQ4188@fmls cQ4187@body))))))) (set! cQ4b88@cQ30c8@chi-defun cQ30c8@chi-defun) (set! cQ30ca@chi-rhs (lambda (cQ418b@rhs cQ418c@r cQ418d@mr) (let ((cQ4191@t (car cQ418b@rhs))) (if (memv cQ4191@t '(defun)) (cQ30c8@chi-defun (cdr cQ418b@rhs) cQ418c@r cQ418d@mr) (if (memv cQ4191@t '(expr)) (let ((cQ4193@expr (cdr cQ418b@rhs))) (cQ30be@chi-expr cQ4193@expr cQ418c@r cQ418d@mr)) (if (memv cQ4191@t '(top-expr)) (let ((cQ4195@expr (cdr cQ418b@rhs))) (cQ2dfa@cQ2d5a@build-sequence '#f (list (cQ30be@chi-expr cQ4195@expr cQ418c@r cQ418d@mr) (cQ2dfb@cQ2d5c@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" cQ418b@rhs))))))) (set! cQ4b89@cQ30ca@chi-rhs cQ30ca@chi-rhs) (set! cQ30cc@expand-interaction-rhs*/init* (lambda (cQ4197@lhs* cQ4198@rhs* cQ4199@init* cQ419a@r cQ419b@mr) (let cQ41a5@f ((cQ41a1@lhs* cQ4197@lhs*) (cQ41a2@rhs* cQ4198@rhs*)) (if (null? cQ41a1@lhs*) (map (lambda (cQ41a7@x) (cQ30be@chi-expr cQ41a7@x cQ419a@r cQ419b@mr)) cQ4199@init*) (let ((cQ41a9@lhs (car cQ41a1@lhs*)) (cQ41aa@rhs (car cQ41a2@rhs*))) (let ((cQ41ad@t (car cQ41aa@rhs))) (if (memv cQ41ad@t '(defun)) (let ((cQ41af@rhs (cQ30c8@chi-defun (cdr cQ41aa@rhs) cQ419a@r cQ419b@mr))) (cons (list 'set! cQ41a9@lhs cQ41af@rhs) (cQ41a5@f (cdr cQ41a1@lhs*) (cdr cQ41a2@rhs*)))) (if (memv cQ41ad@t '(expr)) (let ((cQ41b1@rhs (cQ30be@chi-expr (cdr cQ41aa@rhs) cQ419a@r cQ419b@mr))) (cons (list 'set! cQ41a9@lhs cQ41b1@rhs) (cQ41a5@f (cdr cQ41a1@lhs*) (cdr cQ41a2@rhs*)))) (if (memv cQ41ad@t '(top-expr)) (let ((cQ41b3@e (cQ30be@chi-expr (cdr cQ41aa@rhs) cQ419a@r cQ419b@mr))) (cons cQ41b3@e (cQ41a5@f (cdr cQ41a1@lhs*) (cdr cQ41a2@rhs*)))) (error 'expand-interaction '"invallid" cQ41aa@rhs)))))))))) (set! cQ4b8a@cQ30cc@expand-interaction-rhs*/init* cQ30cc@expand-interaction-rhs*/init*) (set! cQ30ce@chi-rhs* (lambda (cQ41b5@rhs* cQ41b6@r cQ41b7@mr) (let cQ41bd@f ((cQ41bb@ls cQ41b5@rhs*)) (if (null? cQ41bb@ls) '() (let ((cQ41bf@a (cQ30ca@chi-rhs (car cQ41bb@ls) cQ41b6@r cQ41b7@mr))) (cons cQ41bf@a (cQ41bd@f (cdr cQ41bb@ls)))))))) (set! cQ4b8b@cQ30ce@chi-rhs* cQ30ce@chi-rhs*) (set! cQ30d0@find-bound=? (lambda (cQ41c1@x cQ41c2@lhs* cQ41c3@rhs*) (if (null? cQ41c2@lhs*) '#f (if (cQ2e99@bound-id=? cQ41c1@x (car cQ41c2@lhs*)) (car cQ41c3@rhs*) (cQ30d0@find-bound=? cQ41c1@x (cdr cQ41c2@lhs*) (cdr cQ41c3@rhs*)))))) (set! cQ4b8c@cQ30d0@find-bound=? cQ30d0@find-bound=?) (set! cQ30d2@find-dups (lambda (cQ41c7@ls) (let cQ41cd@f ((cQ41c9@ls cQ41c7@ls) (cQ41ca@dups '())) (if (null? cQ41c9@ls) cQ41ca@dups (let ((cQ41cf@t (cQ30d0@find-bound=? (car cQ41c9@ls) (cdr cQ41c9@ls) (cdr cQ41c9@ls)))) (if cQ41cf@t ((lambda (cQ41d1@x) (cQ41cd@f (cdr cQ41c9@ls) (cons (list (car cQ41c9@ls) cQ41d1@x) cQ41ca@dups))) cQ41cf@t) (cQ41cd@f (cdr cQ41c9@ls) cQ41ca@dups))))))) (set! cQ4b8d@cQ30d2@find-dups cQ30d2@find-dups) (set! cQ30d4@chi-internal (lambda (cQ41d3@e* cQ41d4@r cQ41d5@mr) (let ((cQ41d9@rib (cQ2e49@make-empty-rib))) (call-with-values (lambda () (cQ30f4@chi-body* (map (lambda (cQ41eb@x) (cQ2e81@add-subst cQ41d9@rib cQ41eb@x)) (cQ2e93@syntax->list cQ41d3@e*)) cQ41d4@r cQ41d5@mr '() '() '() '() '() cQ41d9@rib '#f)) (lambda (cQ41ed@cQ41dc cQ41ee@cQ41de cQ41ef@cQ41e0 cQ41f0@cQ41e2 cQ41f1@cQ41e4 cQ41f2@cQ41e6 cQ41f3@cQ41e8 cQ41f4@cQ41ea) (let ((cQ41fd@_exp* cQ41f4@cQ41ea) (cQ41fe@kwd* cQ41f3@cQ41e8) (cQ41ff@mod** cQ41f2@cQ41e6) (cQ4200@rhs* cQ41f1@cQ41e4) (cQ4201@lex* cQ41f0@cQ41e2) (cQ4202@mr cQ41ef@cQ41e0) (cQ4203@r cQ41ee@cQ41de) (cQ4204@e* cQ41ed@cQ41dc)) (begin (if (null? cQ4204@e*) (cQ317c@syntax-violation '#f '"no expression in body" cQ4204@e*) (void)) (let ((cQ420d@init* (cQ30ba@chi-expr* (append (apply append (reverse cQ41ff@mod**)) cQ4204@e*) cQ4203@r cQ4202@mr))) (let ((cQ420f@rhs* (cQ30ce@chi-rhs* cQ4200@rhs* cQ4203@r cQ4202@mr))) (cQ2dff@cQ2d64@build-letrec* '#f (reverse cQ4201@lex*) (reverse cQ420f@rhs*) (cQ2dfa@cQ2d5a@build-sequence '#f cQ420d@init*))))))))))) (set! cQ4b8e@cQ30d4@chi-internal cQ30d4@chi-internal) (set! cQ30d6@parse-module (lambda (cQ4211@e) (let ((cQ4213@t cQ4211@e)) (let ((cQ4215@ls/false (cQ309c@syntax-dispatch cQ4213@t '(_ each-any . each-any)))) (if cQ4215@ls/false (apply (lambda (cQ4217@export* cQ4218@b*) (begin (if (not (for-all cQ2e95@id? cQ4217@export*)) (cQ317c@syntax-violation '#f '"module exports must be identifiers" cQ4211@e) (void)) (values '#f (list->vector cQ4217@export*) cQ4218@b*))) cQ4215@ls/false) (let ((cQ421b@t cQ4213@t)) (let ((cQ421d@ls/false (cQ309c@syntax-dispatch cQ421b@t '(_ any each-any . each-any)))) (if cQ421d@ls/false (apply (lambda (cQ421f@name cQ4220@export* cQ4221@b*) (begin (if (not (cQ2e95@id? cQ421f@name)) (cQ317c@syntax-violation '#f '"module name must be an identifier" cQ4211@e) (void)) (if (not (for-all cQ2e95@id? cQ4220@export*)) (cQ317c@syntax-violation '#f '"module exports must be identifiers" cQ4211@e) (void)) (values cQ421f@name (list->vector cQ4220@export*) cQ4221@b*))) cQ421d@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ421b@t))))))))) (set! cQ4b8f@cQ30d6@parse-module cQ30d6@parse-module) (set! cQ30e0@module-interface? (lambda (cQ4225@x) (and (simple-struct? cQ4225@x) (eq? (simple-struct-name cQ4225@x) 'module-interface)))) (set! cQ4b90@cQ30e0@module-interface? cQ30e0@module-interface?) (set! cQ30e2@module-interface-first-mark (lambda (cQ4227@x) (simple-struct-ref cQ4227@x '0))) (set! cQ4b91@cQ30e2@module-interface-first-mark cQ30e2@module-interface-first-mark) (set! cQ30e4@set-module-interface-first-mark! (lambda (cQ4229@x cQ422a@val) (simple-struct-set! cQ4229@x '0 cQ422a@val))) (set! cQ4b92@cQ30e4@set-module-interface-first-mark! cQ30e4@set-module-interface-first-mark!) (set! cQ30e6@module-interface-exp-id-vec (lambda (cQ422d@x) (simple-struct-ref cQ422d@x '1))) (set! cQ4b93@cQ30e6@module-interface-exp-id-vec cQ30e6@module-interface-exp-id-vec) (set! cQ30e8@set-module-interface-exp-id-vec! (lambda (cQ422f@x cQ4230@val) (simple-struct-set! cQ422f@x '1 cQ4230@val))) (set! cQ4b94@cQ30e8@set-module-interface-exp-id-vec! cQ30e8@set-module-interface-exp-id-vec!) (set! cQ30ea@module-interface-exp-lab-vec (lambda (cQ4233@x) (simple-struct-ref cQ4233@x '2))) (set! cQ4b95@cQ30ea@module-interface-exp-lab-vec cQ30ea@module-interface-exp-lab-vec) (set! cQ30ec@set-module-interface-exp-lab-vec! (lambda (cQ4235@x cQ4236@val) (simple-struct-set! cQ4235@x '2 cQ4236@val))) (set! cQ4b96@cQ30ec@set-module-interface-exp-lab-vec! cQ30ec@set-module-interface-exp-lab-vec!) (set! cQ30ee@dummy '3) (set! cQ4b97@cQ30ee@dummy cQ30ee@dummy) (set! cQ30f0@module-interface-exp-id* (lambda (cQ4239@iface cQ423a@id) (letrec* ((cQ423e@diff-marks (lambda (cQ4245@ls cQ4246@x) (begin (if (null? cQ4245@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((cQ4249@a (car cQ4245@ls))) (if (eq? cQ4249@a cQ4246@x) '() (cons cQ4249@a (cQ423e@diff-marks (cdr cQ4245@ls) cQ4246@x)))))))) (let ((cQ423f@diff (cQ423e@diff-marks (cQ2e67@stx-mark* cQ423a@id) (cQ30e2@module-interface-first-mark cQ4239@iface))) (cQ4240@id-vec (cQ30e6@module-interface-exp-id-vec cQ4239@iface))) (if (null? cQ423f@diff) cQ4240@id-vec (vector-map (lambda (cQ4243@x) (make-simple-struct 'stx '5 (list (cQ2e63@stx-expr cQ4243@x) (append cQ423f@diff (cQ2e67@stx-mark* cQ4243@x)) '() '()))) cQ4240@id-vec)))))) (set! cQ4b98@cQ30f0@module-interface-exp-id* cQ30f0@module-interface-exp-id*) (set! cQ30f2@chi-internal-module (lambda (cQ424b@e cQ424c@r cQ424d@mr cQ424e@lex* cQ424f@rhs* cQ4250@mod** cQ4251@kwd*) (call-with-values (lambda () (cQ30d6@parse-module cQ424b@e)) (lambda (cQ425f@cQ425a cQ4260@cQ425c cQ4261@cQ425e) (let ((cQ4265@e* cQ4261@cQ425e) (cQ4266@exp-id* cQ4260@cQ425c) (cQ4267@name cQ425f@cQ425a)) (let ((cQ426b@rib (cQ2e49@make-empty-rib))) (let ((cQ426d@e* (map (lambda (cQ426f@x) (cQ2e81@add-subst cQ426b@rib cQ426f@x)) (cQ2e93@syntax->list cQ4265@e*)))) (call-with-values (lambda () (cQ30f4@chi-body* cQ426d@e* cQ424c@r cQ424d@mr cQ424e@lex* cQ424f@rhs* cQ4250@mod** cQ4251@kwd* '() cQ426b@rib '#f)) (lambda (cQ4281@cQ4272 cQ4282@cQ4274 cQ4283@cQ4276 cQ4284@cQ4278 cQ4285@cQ427a cQ4286@cQ427c cQ4287@cQ427e cQ4288@cQ4280) (let ((cQ4291@_exp* cQ4288@cQ4280) (cQ4292@kwd* cQ4287@cQ427e) (cQ4293@mod** cQ4286@cQ427c) (cQ4294@rhs* cQ4285@cQ427a) (cQ4295@lex* cQ4284@cQ4278) (cQ4296@mr cQ4283@cQ4276) (cQ4297@r cQ4282@cQ4274) (cQ4298@e* cQ4281@cQ4272)) (let ((cQ42a1@exp-lab* (vector-map (lambda (cQ42a5@x) (or (cQ2eab@id->label (make-simple-struct 'stx '5 (list (cQ2e97@id->sym cQ42a5@x) (cQ2e67@stx-mark* cQ42a5@x) (list cQ426b@rib) '()))) (cQ317c@syntax-violation '#f '"cannot find module export" cQ42a5@x))) cQ4266@exp-id*)) (cQ42a2@mod** (cons cQ4298@e* cQ4293@mod**))) (if (not cQ4267@name) (values cQ4295@lex* cQ4294@rhs* cQ4266@exp-id* cQ42a1@exp-lab* cQ4297@r cQ4296@mr cQ42a2@mod** cQ4292@kwd*) (let ((cQ42a7@lab (cQ2e21@gen-label 'module)) (cQ42a8@iface (make-simple-struct 'module-interface '4 (list (car (cQ2e67@stx-mark* cQ4267@name)) (vector-map (lambda (cQ42ab@x) (make-simple-struct 'stx '5 (list (cQ2e63@stx-expr cQ42ab@x) (cQ2e67@stx-mark* cQ42ab@x) '() '()))) cQ4266@exp-id*) cQ42a1@exp-lab*)))) (values cQ4295@lex* cQ4294@rhs* (vector cQ4267@name) (vector cQ42a7@lab) (cons (cons cQ42a7@lab (cons '$module cQ42a8@iface)) cQ4297@r) (cons (cons cQ42a7@lab (cons '$module cQ42a8@iface)) cQ4296@mr) cQ42a2@mod** cQ4292@kwd*)))))))))))))) (set! cQ4b99@cQ30f2@chi-internal-module cQ30f2@chi-internal-module) (set! cQ30f4@chi-body* (lambda (cQ42ad@e* cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42b3@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?) (if (null? cQ42ad@e*) (values cQ42ad@e* cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42b3@kwd* cQ42b4@exp*) (let ((cQ42c1@e (car cQ42ad@e*))) (call-with-values (lambda () (cQ2eb7@syntax-type cQ42c1@e cQ42ae@r)) (lambda (cQ42c9@cQ42c4 cQ42ca@cQ42c6 cQ42cb@cQ42c8) (let ((cQ42cf@kwd cQ42cb@cQ42c8) (cQ42d0@value cQ42ca@cQ42c6) (cQ42d1@type cQ42c9@cQ42c4)) (let ((cQ42d5@kwd* (if (cQ2e95@id? cQ42cf@kwd) (cons cQ42cf@kwd cQ42b3@kwd*) cQ42b3@kwd*))) (let ((cQ42d7@t cQ42d1@type)) (if (memv cQ42d7@t '(define)) (call-with-values (lambda () (cQ301e@parse-define cQ42c1@e)) (lambda (cQ42dd@cQ42da cQ42de@cQ42dc) (let ((cQ42e1@rhs cQ42de@cQ42dc) (cQ42e2@id cQ42dd@cQ42da)) (begin (if (cQ2ea1@bound-id-member? cQ42e2@id cQ42d5@kwd*) (cQ317c@syntax-violation '#f '"cannot redefine keyword" cQ42c1@e) (void)) (call-with-values (lambda () (cQ2e25@gen-define-label+loc cQ42e2@id cQ42b5@rib)) (lambda (cQ42e9@cQ42e6 cQ42ea@cQ42e8) (let ((cQ42ed@lex cQ42ea@cQ42e8) (cQ42ee@lab cQ42e9@cQ42e6)) (begin (cQ2e4b@extend-rib! cQ42b5@rib cQ42e2@id cQ42ee@lab) (cQ30f4@chi-body* (cdr cQ42ad@e*) (cQ302c@add-lexical cQ42ee@lab cQ42ed@lex cQ42ae@r) cQ42af@mr (cons cQ42ed@lex cQ42b0@lex*) (cons cQ42e1@rhs cQ42b1@rhs*) cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?))))))))) (if (memv cQ42d7@t '(define-syntax)) (call-with-values (lambda () (cQ3020@parse-define-syntax cQ42c1@e)) (lambda (cQ42f5@cQ42f2 cQ42f6@cQ42f4) (let ((cQ42f9@rhs cQ42f6@cQ42f4) (cQ42fa@id cQ42f5@cQ42f2)) (begin (if (cQ2ea1@bound-id-member? cQ42fa@id cQ42d5@kwd*) (cQ317c@syntax-violation '#f '"cannot redefine keyword" cQ42c1@e) (void)) (let ((cQ42fd@lab (cQ2e27@gen-define-label cQ42fa@id cQ42b5@rib)) (cQ42fe@expanded-rhs (cQ30f6@expand-transformer cQ42f9@rhs cQ42af@mr))) (begin (cQ2e4b@extend-rib! cQ42b5@rib cQ42fa@id cQ42fd@lab) (let ((cQ4301@b (cQ2ecd@make-eval-transformer cQ42fe@expanded-rhs))) (cQ30f4@chi-body* (cdr cQ42ad@e*) (cons (cons cQ42fd@lab cQ4301@b) cQ42ae@r) (cons (cons cQ42fd@lab cQ4301@b) cQ42af@mr) cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?)))))))) (if (memv cQ42d7@t '(let-syntax letrec-syntax)) (let ((cQ4303@t cQ42c1@e)) (let ((cQ4305@ls/false (cQ309c@syntax-dispatch cQ4303@t '(_ #(each (any any)) . each-any)))) (if (and cQ4305@ls/false (apply (lambda (cQ4307@xlhs* cQ4308@xrhs* cQ4309@xbody*) (if (not (cQ2e9d@valid-bound-ids? cQ4307@xlhs*)) (cQ317c@syntax-violation '#f '"invalid identifiers" cQ42c1@e) (void))) cQ4305@ls/false)) (apply (lambda (cQ430d@xlhs* cQ430e@xrhs* cQ430f@xbody*) (let ((cQ4313@xlab* (map cQ2e21@gen-label cQ430d@xlhs*))) (let ((cQ4315@xrib (cQ2e55@make-full-rib cQ430d@xlhs* cQ4313@xlab*))) (let ((cQ4317@xb* (map (lambda (cQ4319@x) (cQ2ecd@make-eval-transformer (cQ30f6@expand-transformer (if (eq? cQ42d1@type 'let-syntax) cQ4319@x (cQ2e81@add-subst cQ4315@xrib cQ4319@x)) cQ42af@mr))) cQ430e@xrhs*))) (cQ30f4@chi-body* (append (map (lambda (cQ431b@x) (cQ2e81@add-subst cQ4315@xrib cQ431b@x)) cQ430f@xbody*) (cdr cQ42ad@e*)) (append (map cons cQ4313@xlab* cQ4317@xb*) cQ42ae@r) (append (map cons cQ4313@xlab* cQ4317@xb*) cQ42af@mr) cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?))))) cQ4305@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4303@t)))) (if (memv cQ42d7@t '(begin)) (let ((cQ431d@t cQ42c1@e)) (let ((cQ431f@ls/false (cQ309c@syntax-dispatch cQ431d@t '(_ . each-any)))) (if cQ431f@ls/false (apply (lambda (cQ4321@x*) (cQ30f4@chi-body* (append cQ4321@x* (cdr cQ42ad@e*)) cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?)) cQ431f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ431d@t)))) (if (memv cQ42d7@t '(global-macro global-macro!)) (cQ30f4@chi-body* (cons (cQ2e81@add-subst cQ42b5@rib (cQ30b8@chi-global-macro cQ42d0@value cQ42c1@e)) (cdr cQ42ad@e*)) cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?) (if (memv cQ42d7@t '(local-macro local-macro!)) (cQ30f4@chi-body* (cons (cQ2e81@add-subst cQ42b5@rib (cQ30b6@chi-local-macro cQ42d0@value cQ42c1@e)) (cdr cQ42ad@e*)) cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?) (if (memv cQ42d7@t '(macro macro!)) (cQ30f4@chi-body* (cons (cQ2e81@add-subst cQ42b5@rib (cQ30b4@chi-macro cQ42d0@value cQ42c1@e)) (cdr cQ42ad@e*)) cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?) (if (memv cQ42d7@t '(module)) (call-with-values (lambda () (cQ30f2@chi-internal-module cQ42c1@e cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd*)) (lambda (cQ4333@cQ4324 cQ4334@cQ4326 cQ4335@cQ4328 cQ4336@cQ432a cQ4337@cQ432c cQ4338@cQ432e cQ4339@cQ4330 cQ433a@cQ4332) (let ((cQ4343@kwd* cQ433a@cQ4332) (cQ4344@mod** cQ4339@cQ4330) (cQ4345@mr cQ4338@cQ432e) (cQ4346@r cQ4337@cQ432c) (cQ4347@m-exp-lab* cQ4336@cQ432a) (cQ4348@m-exp-id* cQ4335@cQ4328) (cQ4349@rhs* cQ4334@cQ4326) (cQ434a@lex* cQ4333@cQ4324)) (begin (vector-for-each (lambda (cQ4353@id cQ4354@lab) (cQ2e4b@extend-rib! cQ42b5@rib cQ4353@id cQ4354@lab)) cQ4348@m-exp-id* cQ4347@m-exp-lab*) (cQ30f4@chi-body* (cdr cQ42ad@e*) cQ4346@r cQ4345@mr cQ434a@lex* cQ4349@rhs* cQ4344@mod** cQ4343@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?))))) (if (memv cQ42d7@t '(library)) (begin (cQ315e@library-expander (cQ2ea9@stx->datum cQ42c1@e)) (cQ30f4@chi-body* (cdr cQ42ad@e*) cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?)) (if (memv cQ42d7@t '(export)) (let ((cQ4357@t cQ42c1@e)) (let ((cQ4359@ls/false (cQ309c@syntax-dispatch cQ4357@t '(_ . each-any)))) (if cQ4359@ls/false (apply (lambda (cQ435b@exp-decl*) (cQ30f4@chi-body* (cdr cQ42ad@e*) cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* (append cQ435b@exp-decl* cQ42b4@exp*) cQ42b5@rib cQ42b6@top?)) cQ4359@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4357@t)))) (if (memv cQ42d7@t '(import)) (letrec* ((cQ435e@module-import? (lambda (cQ43b1@e) (let ((cQ43b3@t cQ43b1@e)) (let ((cQ43b5@ls/false (cQ309c@syntax-dispatch cQ43b3@t '(_ any)))) (if (and cQ43b5@ls/false (apply (lambda (cQ43b7@id) (cQ2e95@id? cQ43b7@id)) cQ43b5@ls/false)) (apply (lambda (cQ43b9@id) '#t) cQ43b5@ls/false) (let ((cQ43bb@t cQ43b3@t)) (let ((cQ43bd@ls/false (cQ309c@syntax-dispatch cQ43bb@t '(_ . each-any)))) (if cQ43bd@ls/false (apply (lambda (cQ43bf@imp*) '#f) cQ43bd@ls/false) (let ((cQ43c1@t cQ43bb@t)) (let ((cQ43c3@ls/false (cQ309c@syntax-dispatch cQ43c1@t '_))) (if cQ43c3@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"malformed import form" cQ43b1@e)) cQ43c3@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ43c1@t)))))))))))) (cQ4360@module-import (lambda (cQ438f@e cQ4390@r) (let ((cQ4393@t cQ438f@e)) (let ((cQ4395@ls/false (cQ309c@syntax-dispatch cQ4393@t '(_ any)))) (if (and cQ4395@ls/false (apply (lambda (cQ4397@id) (cQ2e95@id? cQ4397@id)) cQ4395@ls/false)) (apply (lambda (cQ4399@id) (call-with-values (lambda () (cQ2eb7@syntax-type cQ4399@id cQ4390@r)) (lambda (cQ43a1@cQ439c cQ43a2@cQ439e cQ43a3@cQ43a0) (let ((cQ43a7@kwd cQ43a3@cQ43a0) (cQ43a8@value cQ43a2@cQ439e) (cQ43a9@type cQ43a1@cQ439c)) (let ((cQ43ad@t cQ43a9@type)) (if (memv cQ43ad@t '($module)) (let ((cQ43af@iface cQ43a8@value)) (values (cQ30f0@module-interface-exp-id* cQ43af@iface cQ4399@id) (cQ30ea@module-interface-exp-lab-vec cQ43af@iface))) (cQ317c@syntax-violation '#f '"invalid import" cQ438f@e))))))) cQ4395@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4393@t)))))) (cQ4362@library-import (lambda (cQ4373@e) (let ((cQ4375@t cQ4373@e)) (let ((cQ4377@ls/false (cQ309c@syntax-dispatch cQ4375@t '(any . each-any)))) (if cQ4377@ls/false (apply (lambda (cQ4379@ctxt cQ437a@imp*) (call-with-values (lambda () (cQ30fe@parse-import-spec* (cQ3182@syntax->datum cQ437a@imp*))) (lambda (cQ4381@cQ437e cQ4382@cQ4380) (let ((cQ4385@subst-labels cQ4382@cQ4380) (cQ4386@subst-names cQ4381@cQ437e)) (values (vector-map (lambda (cQ4389@name) (cQ2e75@datum->stx cQ4379@ctxt cQ4389@name)) cQ4386@subst-names) cQ4385@subst-labels))))) cQ4377@ls/false) (let ((cQ438b@t cQ4375@t)) (let ((cQ438d@ls/false (cQ309c@syntax-dispatch cQ438b@t '_))) (if cQ438d@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid import form" cQ4373@e)) cQ438d@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ438b@t)))))))))) (begin (call-with-values (lambda () (if (cQ435e@module-import? cQ42c1@e) (cQ4360@module-import cQ42c1@e cQ42ae@r) (cQ4362@library-import cQ42c1@e))) (lambda (cQ4367@cQ4364 cQ4368@cQ4366) (let ((cQ436b@lab* cQ4368@cQ4366) (cQ436c@id* cQ4367@cQ4364)) (vector-for-each (lambda (cQ436f@id cQ4370@lab) (cQ2e4b@extend-rib! cQ42b5@rib cQ436f@id cQ4370@lab)) cQ436c@id* cQ436b@lab*)))) (cQ30f4@chi-body* (cdr cQ42ad@e*) cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?))) (if cQ42b6@top? (cQ30f4@chi-body* (cdr cQ42ad@e*) cQ42ae@r cQ42af@mr (cons (cQ2e1d@gen-lexical 'dummy) cQ42b0@lex*) (cons (cons 'top-expr cQ42c1@e) cQ42b1@rhs*) cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp* cQ42b5@rib cQ42b6@top?) (values cQ42ad@e* cQ42ae@r cQ42af@mr cQ42b0@lex* cQ42b1@rhs* cQ42b2@mod** cQ42d5@kwd* cQ42b4@exp*)))))))))))))))))))))) (set! cQ4b9a@cQ30f4@chi-body* cQ30f4@chi-body*) (set! cQ30f6@expand-transformer (lambda (cQ43c5@expr cQ43c6@r) (let ((cQ43c9@rtc (cQ3102@make-collector))) (let ((cQ43cb@expanded-rhs (let ((cQ43d5@cQ43ce cQ3104@inv-collector) (cQ43d6@cQ43d0 cQ3106@vis-collector) (cQ43d7@cQ43d2 cQ43c9@rtc) (cQ43d8@cQ43d4 (lambda (cQ43dd@x) (values)))) (let ((cQ43df@swap (lambda () (begin (let ((cQ43e1@t (cQ43d5@cQ43ce))) (begin (cQ43d5@cQ43ce cQ43d7@cQ43d2) (set! cQ43d7@cQ43d2 cQ43e1@t))) (let ((cQ43e3@t (cQ43d6@cQ43d0))) (begin (cQ43d6@cQ43d0 cQ43d8@cQ43d4) (set! cQ43d8@cQ43d4 cQ43e3@t))))))) (dynamic-wind cQ43df@swap (lambda () (cQ30be@chi-expr cQ43c5@expr cQ43c6@r cQ43c6@r)) cQ43df@swap))))) (begin (for-each (let ((cQ43e5@mark-visit (cQ3106@vis-collector))) (lambda (cQ43e7@x) (begin (cQ2cb0@cQ2aee@invoke-library cQ43e7@x) (cQ43e5@mark-visit cQ43e7@x)))) (cQ43c9@rtc)) cQ43cb@expanded-rhs))))) (set! cQ4b9b@cQ30f6@expand-transformer cQ30f6@expand-transformer) (set! cQ30f8@parse-exports (lambda (cQ43e9@exp*) (let cQ43f1@f ((cQ43eb@exp* cQ43e9@exp*) (cQ43ec@int* '()) (cQ43ed@ext* '())) (if (null? cQ43eb@exp*) (begin (if (not (cQ2e9d@valid-bound-ids? cQ43ed@ext*)) (cQ317c@syntax-violation 'export '"invalid exports" (cQ30d2@find-dups cQ43ed@ext*)) (void)) (values (map cQ3182@syntax->datum cQ43ed@ext*) cQ43ec@int*)) (let ((cQ43f3@t (car cQ43eb@exp*))) (let ((cQ43f5@ls/false (cQ309c@syntax-dispatch cQ43f3@t '(any . #(each (any any)))))) (if cQ43f5@ls/false (apply (lambda (cQ43f7@rename cQ43f8@i* cQ43f9@e*) (begin (if (not (and (eq? (cQ3182@syntax->datum cQ43f7@rename) 'rename) (for-all cQ2e95@id? cQ43f8@i*) (for-all cQ2e95@id? cQ43f9@e*))) (cQ317c@syntax-violation 'export '"invalid export specifier" (car cQ43eb@exp*)) (void)) (cQ43f1@f (cdr cQ43eb@exp*) (append cQ43f8@i* cQ43ec@int*) (append cQ43f9@e* cQ43ed@ext*)))) cQ43f5@ls/false) (let ((cQ43fd@t cQ43f3@t)) (let ((cQ43ff@ls/false (cQ309c@syntax-dispatch cQ43fd@t 'any))) (if cQ43ff@ls/false (apply (lambda (cQ4401@ie) (begin (if (not (cQ2e95@id? cQ4401@ie)) (cQ317c@syntax-violation 'export '"invalid export" cQ4401@ie) (void)) (cQ43f1@f (cdr cQ43eb@exp*) (cons cQ4401@ie cQ43ec@int*) (cons cQ4401@ie cQ43ed@ext*)))) cQ43ff@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ43fd@t))))))))))) (set! cQ4b9c@cQ30f8@parse-exports cQ30f8@parse-exports) (set! cQ30fa@parse-library-name (lambda (cQ4403@spec) (letrec* ((cQ4406@parse (lambda (cQ4413@x) (let ((cQ4415@t cQ4413@x)) (let ((cQ4417@ls/false (cQ309c@syntax-dispatch cQ4415@t '(each-any)))) (if (and cQ4417@ls/false (apply (lambda (cQ4419@v*) (for-all (lambda (cQ441b@x) (let ((cQ441d@x (cQ3182@syntax->datum cQ441b@x))) (and (integer? cQ441d@x) (exact? cQ441d@x)))) cQ4419@v*)) cQ4417@ls/false)) (apply (lambda (cQ441f@v*) (values '() (map cQ3182@syntax->datum cQ441f@v*))) cQ4417@ls/false) (let ((cQ4421@t cQ4415@t)) (let ((cQ4423@ls/false (cQ309c@syntax-dispatch cQ4421@t '(any . any)))) (if (and cQ4423@ls/false (apply (lambda (cQ4425@x cQ4426@rest) (symbol? (cQ3182@syntax->datum cQ4425@x))) cQ4423@ls/false)) (apply (lambda (cQ4429@x cQ442a@rest) (call-with-values (lambda () (cQ4406@parse cQ442a@rest)) (lambda (cQ4431@cQ442e cQ4432@cQ4430) (let ((cQ4435@v* cQ4432@cQ4430) (cQ4436@x* cQ4431@cQ442e)) (values (cons (cQ3182@syntax->datum cQ4429@x) cQ4436@x*) cQ4435@v*))))) cQ4423@ls/false) (let ((cQ4439@t cQ4421@t)) (let ((cQ443b@ls/false (cQ309c@syntax-dispatch cQ4439@t '()))) (if cQ443b@ls/false (apply (lambda () (values '() '())) cQ443b@ls/false) (let ((cQ443d@t cQ4439@t)) (let ((cQ443f@ls/false (cQ309c@syntax-dispatch cQ443d@t '_))) (if cQ443f@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid library name" cQ4403@spec)) cQ443f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ443d@t)))))))))))))))) (call-with-values (lambda () (cQ4406@parse cQ4403@spec)) (lambda (cQ440b@cQ4408 cQ440c@cQ440a) (let ((cQ440f@ver* cQ440c@cQ440a) (cQ4410@name* cQ440b@cQ4408)) (begin (if (null? cQ4410@name*) (cQ317c@syntax-violation '#f '"empty library name" cQ4403@spec) (void)) (values cQ4410@name* cQ440f@ver*)))))))) (set! cQ4b9d@cQ30fa@parse-library-name cQ30fa@parse-library-name) (set! cQ30fc@parse-library (lambda (cQ4441@e) (let ((cQ4443@t cQ4441@e)) (let ((cQ4445@ls/false (cQ309c@syntax-dispatch cQ4443@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and cQ4445@ls/false (apply (lambda (cQ4447@library cQ4448@name* cQ4449@export cQ444a@exp* cQ444b@import cQ444c@imp* cQ444d@b*) (and (eq? (cQ3182@syntax->datum cQ4449@export) 'export) (eq? (cQ3182@syntax->datum cQ444b@import) 'import) (eq? (cQ3182@syntax->datum cQ4447@library) 'library))) cQ4445@ls/false)) (apply (lambda (cQ4455@library cQ4456@name* cQ4457@export cQ4458@exp* cQ4459@import cQ445a@imp* cQ445b@b*) (values cQ4456@name* cQ4458@exp* cQ445a@imp* cQ445b@b*)) cQ4445@ls/false) (let ((cQ4463@t cQ4443@t)) (let ((cQ4465@ls/false (cQ309c@syntax-dispatch cQ4463@t '_))) (if cQ4465@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"malformed library" cQ4441@e)) cQ4465@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4463@t))))))))) (set! cQ4b9e@cQ30fc@parse-library cQ30fc@parse-library) (set! cQ30fe@parse-import-spec* (letrec* ((cQ4468@idsyn? (lambda (cQ4671@x) (symbol? (cQ3182@syntax->datum cQ4671@x)))) (cQ446a@dup-error (lambda (cQ466f@name) (cQ317c@syntax-violation 'import '"two imports with different bindings" cQ466f@name))) (cQ446c@merge-substs (lambda (cQ465d@s cQ465e@subst) (letrec* ((cQ4662@insert-to-subst (lambda (cQ4663@a cQ4664@subst) (let ((cQ4667@name (car cQ4663@a)) (cQ4668@label (cdr cQ4663@a))) (let ((cQ466b@t (assq cQ4667@name cQ4664@subst))) (if cQ466b@t ((lambda (cQ466d@x) (if (eq? (cdr cQ466d@x) cQ4668@label) cQ4664@subst (cQ446a@dup-error cQ4667@name))) cQ466b@t) (cons cQ4663@a cQ4664@subst))))))) (if (null? cQ465d@s) cQ465e@subst (cQ4662@insert-to-subst (car cQ465d@s) (cQ446c@merge-substs (cdr cQ465d@s) cQ465e@subst)))))) (cQ446e@exclude* (lambda (cQ462d@sym* cQ462e@subst) (letrec* ((cQ4632@exclude (lambda (cQ464b@sym cQ464c@subst) (if (null? cQ464c@subst) (cQ317c@syntax-violation 'import '"cannot rename unbound identifier" cQ464b@sym) (if (eq? cQ464b@sym (caar cQ464c@subst)) (values (cdar cQ464c@subst) (cdr cQ464c@subst)) (let ((cQ464f@a (car cQ464c@subst))) (call-with-values (lambda () (cQ4632@exclude cQ464b@sym (cdr cQ464c@subst))) (lambda (cQ4655@cQ4652 cQ4656@cQ4654) (let ((cQ4659@subst cQ4656@cQ4654) (cQ465a@old cQ4655@cQ4652)) (values cQ465a@old (cons cQ464f@a cQ4659@subst))))))))))) (if (null? cQ462d@sym*) (values '() cQ462e@subst) (call-with-values (lambda () (cQ4632@exclude (car cQ462d@sym*) cQ462e@subst)) (lambda (cQ4637@cQ4634 cQ4638@cQ4636) (let ((cQ463b@subst cQ4638@cQ4636) (cQ463c@old cQ4637@cQ4634)) (call-with-values (lambda () (cQ446e@exclude* (cdr cQ462d@sym*) cQ463b@subst)) (lambda (cQ4643@cQ4640 cQ4644@cQ4642) (let ((cQ4647@subst cQ4644@cQ4642) (cQ4648@old* cQ4643@cQ4640)) (values (cons cQ463c@old cQ4648@old*) cQ4647@subst))))))))))) (cQ4470@find* (lambda (cQ4625@sym* cQ4626@subst) (map (lambda (cQ4629@x) (let ((cQ462b@t (assq cQ4629@x cQ4626@subst))) (if cQ462b@t (cdr cQ462b@t) (cQ317c@syntax-violation 'import '"cannot find identifier" cQ4629@x)))) cQ4625@sym*))) (cQ4472@rem* (lambda (cQ461d@sym* cQ461e@subst) (let cQ4623@f ((cQ4621@subst cQ461e@subst)) (if (null? cQ4621@subst) '() (if (memq (caar cQ4621@subst) cQ461d@sym*) (cQ4623@f (cdr cQ4621@subst)) (cons (car cQ4621@subst) (cQ4623@f (cdr cQ4621@subst)))))))) (cQ4474@remove-dups (lambda (cQ461b@ls) (if (null? cQ461b@ls) '() (if (memq (car cQ461b@ls) (cdr cQ461b@ls)) (cQ4474@remove-dups (cdr cQ461b@ls)) (cons (car cQ461b@ls) (cQ4474@remove-dups (cdr cQ461b@ls))))))) (cQ4476@parse-library-name (lambda (cQ4533@spec) (letrec* ((cQ4536@subversion? (lambda (cQ4617@x) (let ((cQ4619@x (cQ3182@syntax->datum cQ4617@x))) (and (integer? cQ4619@x) (exact? cQ4619@x) (>= cQ4619@x '0))))) (cQ4538@subversion-pred (lambda (cQ45b7@x*) (let ((cQ45b9@t cQ45b7@x*)) (let ((cQ45bb@ls/false (cQ309c@syntax-dispatch cQ45b9@t 'any))) (if (and cQ45bb@ls/false (apply (lambda (cQ45bd@n) (cQ4536@subversion? cQ45bd@n)) cQ45bb@ls/false)) (apply (lambda (cQ45bf@n) (lambda (cQ45c1@x) (= cQ45c1@x (cQ3182@syntax->datum cQ45bf@n)))) cQ45bb@ls/false) (let ((cQ45c3@t cQ45b9@t)) (let ((cQ45c5@ls/false (cQ309c@syntax-dispatch cQ45c3@t '(any . each-any)))) (if (and cQ45c5@ls/false (apply (lambda (cQ45c7@p? cQ45c8@sub*) (eq? (cQ3182@syntax->datum cQ45c7@p?) 'and)) cQ45c5@ls/false)) (apply (lambda (cQ45cb@p? cQ45cc@sub*) (let ((cQ45cf@p* (map cQ4538@subversion-pred cQ45cc@sub*))) (lambda (cQ45d1@x) (for-all (lambda (cQ45d3@p) (cQ45d3@p cQ45d1@x)) cQ45cf@p*)))) cQ45c5@ls/false) (let ((cQ45d5@t cQ45c3@t)) (let ((cQ45d7@ls/false (cQ309c@syntax-dispatch cQ45d5@t '(any . each-any)))) (if (and cQ45d7@ls/false (apply (lambda (cQ45d9@p? cQ45da@sub*) (eq? (cQ3182@syntax->datum cQ45d9@p?) 'or)) cQ45d7@ls/false)) (apply (lambda (cQ45dd@p? cQ45de@sub*) (let ((cQ45e1@p* (map cQ4538@subversion-pred cQ45de@sub*))) (lambda (cQ45e3@x) (exists (lambda (cQ45e5@p) (cQ45e5@p cQ45e3@x)) cQ45e1@p*)))) cQ45d7@ls/false) (let ((cQ45e7@t cQ45d5@t)) (let ((cQ45e9@ls/false (cQ309c@syntax-dispatch cQ45e7@t '(any any)))) (if (and cQ45e9@ls/false (apply (lambda (cQ45eb@p? cQ45ec@sub) (eq? (cQ3182@syntax->datum cQ45eb@p?) 'not)) cQ45e9@ls/false)) (apply (lambda (cQ45ef@p? cQ45f0@sub) (let ((cQ45f3@p (cQ4538@subversion-pred cQ45f0@sub))) (lambda (cQ45f5@x) (not (cQ45f3@p cQ45f5@x))))) cQ45e9@ls/false) (let ((cQ45f7@t cQ45e7@t)) (let ((cQ45f9@ls/false (cQ309c@syntax-dispatch cQ45f7@t '(any any)))) (if (and cQ45f9@ls/false (apply (lambda (cQ45fb@p? cQ45fc@n) (and (eq? (cQ3182@syntax->datum cQ45fb@p?) '<=) (cQ4536@subversion? cQ45fc@n))) cQ45f9@ls/false)) (apply (lambda (cQ45ff@p? cQ4600@n) (lambda (cQ4603@x) (<= cQ4603@x (cQ3182@syntax->datum cQ4600@n)))) cQ45f9@ls/false) (let ((cQ4605@t cQ45f7@t)) (let ((cQ4607@ls/false (cQ309c@syntax-dispatch cQ4605@t '(any any)))) (if (and cQ4607@ls/false (apply (lambda (cQ4609@p? cQ460a@n) (and (eq? (cQ3182@syntax->datum cQ4609@p?) '>=) (cQ4536@subversion? cQ460a@n))) cQ4607@ls/false)) (apply (lambda (cQ460d@p? cQ460e@n) (lambda (cQ4611@x) (>= cQ4611@x (cQ3182@syntax->datum cQ460e@n)))) cQ4607@ls/false) (let ((cQ4613@t cQ4605@t)) (let ((cQ4615@ls/false (cQ309c@syntax-dispatch cQ4613@t '_))) (if cQ4615@ls/false (apply (lambda () (cQ317c@syntax-violation 'import '"invalid sub-version spec" cQ4533@spec cQ45b7@x*)) cQ4615@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4613@t)))))))))))))))))))))))) (cQ453a@version-pred (lambda (cQ4567@x*) (let ((cQ4569@t cQ4567@x*)) (let ((cQ456b@ls/false (cQ309c@syntax-dispatch cQ4569@t '()))) (if cQ456b@ls/false (apply (lambda () (lambda (cQ456d@x) '#t)) cQ456b@ls/false) (let ((cQ456f@t cQ4569@t)) (let ((cQ4571@ls/false (cQ309c@syntax-dispatch cQ456f@t '(any . each-any)))) (if (and cQ4571@ls/false (apply (lambda (cQ4573@c cQ4574@ver*) (eq? (cQ3182@syntax->datum cQ4573@c) 'and)) cQ4571@ls/false)) (apply (lambda (cQ4577@c cQ4578@ver*) (let ((cQ457b@p* (map cQ453a@version-pred cQ4578@ver*))) (lambda (cQ457d@x) (for-all (lambda (cQ457f@p) (cQ457f@p cQ457d@x)) cQ457b@p*)))) cQ4571@ls/false) (let ((cQ4581@t cQ456f@t)) (let ((cQ4583@ls/false (cQ309c@syntax-dispatch cQ4581@t '(any . each-any)))) (if (and cQ4583@ls/false (apply (lambda (cQ4585@c cQ4586@ver*) (eq? (cQ3182@syntax->datum cQ4585@c) 'or)) cQ4583@ls/false)) (apply (lambda (cQ4589@c cQ458a@ver*) (let ((cQ458d@p* (map cQ453a@version-pred cQ458a@ver*))) (lambda (cQ458f@x) (exists (lambda (cQ4591@p) (cQ4591@p cQ458f@x)) cQ458d@p*)))) cQ4583@ls/false) (let ((cQ4593@t cQ4581@t)) (let ((cQ4595@ls/false (cQ309c@syntax-dispatch cQ4593@t '(any any)))) (if (and cQ4595@ls/false (apply (lambda (cQ4597@c cQ4598@ver) (eq? (cQ3182@syntax->datum cQ4597@c) 'not)) cQ4595@ls/false)) (apply (lambda (cQ459b@c cQ459c@ver) (let ((cQ459f@p (cQ453a@version-pred cQ459c@ver))) (lambda (cQ45a1@x) (not (cQ459f@p cQ45a1@x))))) cQ4595@ls/false) (let ((cQ45a3@t cQ4593@t)) (let ((cQ45a5@ls/false (cQ309c@syntax-dispatch cQ45a3@t 'each-any))) (if cQ45a5@ls/false (apply (lambda (cQ45a7@sub*) (let ((cQ45a9@p* (map cQ4538@subversion-pred cQ45a7@sub*))) (lambda (cQ45ab@x) (let cQ45b1@f ((cQ45ad@p* cQ45a9@p*) (cQ45ae@x cQ45ab@x)) (if (null? cQ45ad@p*) '#t (if (null? cQ45ae@x) '#f (and ((car cQ45ad@p*) (car cQ45ae@x)) (cQ45b1@f (cdr cQ45ad@p*) (cdr cQ45ae@x))))))))) cQ45a5@ls/false) (let ((cQ45b3@t cQ45a3@t)) (let ((cQ45b5@ls/false (cQ309c@syntax-dispatch cQ45b3@t '_))) (if cQ45b5@ls/false (apply (lambda () (cQ317c@syntax-violation 'import '"invalid version spec" cQ4533@spec cQ4567@x*)) cQ45b5@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ45b3@t)))))))))))))))))))))) (let cQ453d@f ((cQ453b@x cQ4533@spec)) (let ((cQ453f@t cQ453b@x)) (let ((cQ4541@ls/false (cQ309c@syntax-dispatch cQ453f@t '(each-any)))) (if cQ4541@ls/false (apply (lambda (cQ4543@version-spec*) (values '() (cQ453a@version-pred cQ4543@version-spec*))) cQ4541@ls/false) (let ((cQ4545@t cQ453f@t)) (let ((cQ4547@ls/false (cQ309c@syntax-dispatch cQ4545@t '(any . any)))) (if (and cQ4547@ls/false (apply (lambda (cQ4549@x cQ454a@x*) (cQ4468@idsyn? cQ4549@x)) cQ4547@ls/false)) (apply (lambda (cQ454d@x cQ454e@x*) (call-with-values (lambda () (cQ453d@f cQ454e@x*)) (lambda (cQ4555@cQ4552 cQ4556@cQ4554) (let ((cQ4559@pred cQ4556@cQ4554) (cQ455a@name cQ4555@cQ4552)) (values (cons (cQ3182@syntax->datum cQ454d@x) cQ455a@name) cQ4559@pred))))) cQ4547@ls/false) (let ((cQ455d@t cQ4545@t)) (let ((cQ455f@ls/false (cQ309c@syntax-dispatch cQ455d@t '()))) (if cQ455f@ls/false (apply (lambda () (values '() (lambda (cQ4561@x) '#t))) cQ455f@ls/false) (let ((cQ4563@t cQ455d@t)) (let ((cQ4565@ls/false (cQ309c@syntax-dispatch cQ4563@t '_))) (if cQ4565@ls/false (apply (lambda () (cQ317c@syntax-violation '#f '"invalid import spec" cQ4533@spec)) cQ4565@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4563@t))))))))))))))))) (cQ4478@import-library (lambda (cQ4523@spec*) (call-with-values (lambda () (cQ4476@parse-library-name cQ4523@spec*)) (lambda (cQ4529@cQ4526 cQ452a@cQ4528) (let ((cQ452d@pred cQ452a@cQ4528) (cQ452e@name cQ4529@cQ4526)) (begin (if (null? cQ452e@name) (cQ317c@syntax-violation 'import '"empty library name" cQ4523@spec*) (void)) (let ((cQ4531@lib (cQ2ca9@cQ2ae0@find-library-by-name cQ452e@name))) (begin (if (not cQ4531@lib) (cQ317c@syntax-violation 'import '"cannot find library with required name" cQ452e@name) (void)) (if (not (cQ452d@pred (cQ2c83@cQ2a94@library-version cQ4531@lib))) (cQ317c@syntax-violation 'import '"library does not satisfy version specification" cQ4523@spec* cQ4531@lib) (void)) ((cQ3108@imp-collector) cQ4531@lib) (cQ2c8b@cQ2aa4@library-subst cQ4531@lib))))))))) (cQ447a@get-import (lambda (cQ4495@spec) (let ((cQ4497@t cQ4495@spec)) (let ((cQ4499@ls/false (cQ309c@syntax-dispatch cQ4497@t '(any . each-any)))) (if (and cQ4499@ls/false (apply (lambda (cQ449b@x cQ449c@x*) (not (memq (cQ3182@syntax->datum cQ449b@x) '(for rename except only prefix library)))) cQ4499@ls/false)) (apply (lambda (cQ449f@x cQ44a0@x*) (cQ4478@import-library (cons cQ449f@x cQ44a0@x*))) cQ4499@ls/false) (let ((cQ44a3@t cQ4497@t)) (let ((cQ44a5@ls/false (cQ309c@syntax-dispatch cQ44a3@t '(any any . #(each (any any)))))) (if (and cQ44a5@ls/false (apply (lambda (cQ44a7@rename cQ44a8@isp cQ44a9@old* cQ44aa@new*) (and (eq? (cQ3182@syntax->datum cQ44a7@rename) 'rename) (for-all cQ4468@idsyn? cQ44a9@old*) (for-all cQ4468@idsyn? cQ44aa@new*))) cQ44a5@ls/false)) (apply (lambda (cQ44af@rename cQ44b0@isp cQ44b1@old* cQ44b2@new*) (let ((cQ44b7@subst (cQ447a@get-import cQ44b0@isp)) (cQ44b8@old* (map cQ3182@syntax->datum cQ44b1@old*)) (cQ44b9@new* (map cQ3182@syntax->datum cQ44b2@new*))) (let ((cQ44bd@old-label* (cQ4470@find* cQ44b8@old* cQ44b7@subst))) (let ((cQ44bf@subst (cQ4472@rem* cQ44b8@old* cQ44b7@subst))) (cQ446c@merge-substs (map cons cQ44b9@new* cQ44bd@old-label*) cQ44bf@subst))))) cQ44a5@ls/false) (let ((cQ44c1@t cQ44a3@t)) (let ((cQ44c3@ls/false (cQ309c@syntax-dispatch cQ44c1@t '(any any . each-any)))) (if (and cQ44c3@ls/false (apply (lambda (cQ44c5@except cQ44c6@isp cQ44c7@sym*) (and (eq? (cQ3182@syntax->datum cQ44c5@except) 'except) (for-all cQ4468@idsyn? cQ44c7@sym*))) cQ44c3@ls/false)) (apply (lambda (cQ44cb@except cQ44cc@isp cQ44cd@sym*) (let ((cQ44d1@subst (cQ447a@get-import cQ44cc@isp))) (cQ4472@rem* (map cQ3182@syntax->datum cQ44cd@sym*) cQ44d1@subst))) cQ44c3@ls/false) (let ((cQ44d3@t cQ44c1@t)) (let ((cQ44d5@ls/false (cQ309c@syntax-dispatch cQ44d3@t '(any any . each-any)))) (if (and cQ44d5@ls/false (apply (lambda (cQ44d7@only cQ44d8@isp cQ44d9@sym*) (and (eq? (cQ3182@syntax->datum cQ44d7@only) 'only) (for-all cQ4468@idsyn? cQ44d9@sym*))) cQ44d5@ls/false)) (apply (lambda (cQ44dd@only cQ44de@isp cQ44df@sym*) (let ((cQ44e3@subst (cQ447a@get-import cQ44de@isp)) (cQ44e4@sym* (map cQ3182@syntax->datum cQ44df@sym*))) (let ((cQ44e7@sym* (cQ4474@remove-dups cQ44e4@sym*))) (let ((cQ44e9@lab* (cQ4470@find* cQ44e7@sym* cQ44e3@subst))) (map cons cQ44e7@sym* cQ44e9@lab*))))) cQ44d5@ls/false) (let ((cQ44eb@t cQ44d3@t)) (let ((cQ44ed@ls/false (cQ309c@syntax-dispatch cQ44eb@t '(any any any)))) (if (and cQ44ed@ls/false (apply (lambda (cQ44ef@prefix cQ44f0@isp cQ44f1@p) (and (eq? (cQ3182@syntax->datum cQ44ef@prefix) 'prefix) (cQ4468@idsyn? cQ44f1@p))) cQ44ed@ls/false)) (apply (lambda (cQ44f5@prefix cQ44f6@isp cQ44f7@p) (let ((cQ44fb@subst (cQ447a@get-import cQ44f6@isp)) (cQ44fc@prefix (symbol->string (cQ3182@syntax->datum cQ44f7@p)))) (map (lambda (cQ44ff@x) (cons (string->symbol (string-append cQ44fc@prefix (symbol->string (car cQ44ff@x)))) (cdr cQ44ff@x))) cQ44fb@subst))) cQ44ed@ls/false) (let ((cQ4501@t cQ44eb@t)) (let ((cQ4503@ls/false (cQ309c@syntax-dispatch cQ4501@t '(any each-any)))) (if (and cQ4503@ls/false (apply (lambda (cQ4505@library cQ4506@spec*) (eq? (cQ3182@syntax->datum cQ4505@library) 'library)) cQ4503@ls/false)) (apply (lambda (cQ4509@library cQ450a@spec*) (cQ4478@import-library cQ450a@spec*)) cQ4503@ls/false) (let ((cQ450d@t cQ4501@t)) (let ((cQ450f@ls/false (cQ309c@syntax-dispatch cQ450d@t '(any any . any)))) (if (and cQ450f@ls/false (apply (lambda (cQ4511@for cQ4512@isp cQ4513@rest) (eq? (cQ3182@syntax->datum cQ4511@for) 'for)) cQ450f@ls/false)) (apply (lambda (cQ4517@for cQ4518@isp cQ4519@rest) (cQ447a@get-import cQ4518@isp)) cQ450f@ls/false) (let ((cQ451d@t cQ450d@t)) (let ((cQ451f@ls/false (cQ309c@syntax-dispatch cQ451d@t 'any))) (if cQ451f@ls/false (apply (lambda (cQ4521@spec) (cQ317c@syntax-violation 'import '"invalid import spec" cQ4521@spec)) cQ451f@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ451d@t))))))))))))))))))))))))))) (cQ447c@add-imports! (lambda (cQ4485@imp cQ4486@h) (let ((cQ4489@subst (cQ447a@get-import cQ4485@imp))) (for-each (lambda (cQ448b@x) (let ((cQ448d@name (car cQ448b@x)) (cQ448e@label (cdr cQ448b@x))) (let ((cQ4491@t (hashtable-ref cQ4486@h cQ448d@name '#f))) (if cQ4491@t ((lambda (cQ4493@l) (if (not (eq? cQ4493@l cQ448e@label)) (cQ446a@dup-error cQ448d@name) (void))) cQ4491@t) (hashtable-set! cQ4486@h cQ448d@name cQ448e@label))))) cQ4489@subst))))) (lambda (cQ447d@imp*) (let cQ4483@f ((cQ447f@imp* cQ447d@imp*) (cQ4480@h (make-eq-hashtable))) (if (null? cQ447f@imp*) (hashtable-entries cQ4480@h) (begin (cQ447c@add-imports! (car cQ447f@imp*) cQ4480@h) (cQ4483@f (cdr cQ447f@imp*) cQ4480@h))))))) (set! cQ4b9f@cQ30fe@parse-import-spec* cQ30fe@parse-import-spec*) (set! cQ3100@make-top-rib (lambda (cQ4673@names cQ4674@labels) (let ((cQ4677@rib (cQ2e49@make-empty-rib))) (begin (vector-for-each (lambda (cQ4679@name cQ467a@label) (begin (if (not (symbol? cQ4679@name)) (error 'make-top-rib '"BUG: not a symbol" cQ4679@name) (void)) (cQ2e4d@extend-rib/nc! cQ4677@rib (make-simple-struct 'stx '5 (list cQ4679@name cQ2e19@top-mark* '() '())) cQ467a@label))) cQ4673@names cQ4674@labels) cQ4677@rib)))) (set! cQ4ba0@cQ3100@make-top-rib cQ3100@make-top-rib) (set! cQ3102@make-collector (lambda () (let ((cQ467d@ls '())) (lambda cQ4681 (let ((cQ4682 (length cQ4681))) (if (= cQ4682 '0) (apply (lambda () cQ467d@ls) cQ4681) (if (= cQ4682 '1) (apply (lambda (cQ467f@x) (set! cQ467d@ls (cQ2e12@set-cons cQ467f@x cQ467d@ls))) cQ4681) (error #1='apply '"invalid arg count")))))))) (set! cQ4ba1@cQ3102@make-collector cQ3102@make-collector) (set! cQ3104@inv-collector (cQ29d4@cQ28b2@make-parameter (lambda cQ4683@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (cQ4685@x) (begin (if (not (procedure? cQ4685@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" cQ4685@x) (void)) cQ4685@x)))) (set! cQ4ba2@cQ3104@inv-collector cQ3104@inv-collector) (set! cQ3106@vis-collector (cQ29d4@cQ28b2@make-parameter (lambda cQ4687@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (cQ4689@x) (begin (if (not (procedure? cQ4689@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" cQ4689@x) (void)) cQ4689@x)))) (set! cQ4ba3@cQ3106@vis-collector cQ3106@vis-collector) (set! cQ3108@imp-collector (cQ29d4@cQ28b2@make-parameter (lambda cQ468b@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (cQ468d@x) (begin (if (not (procedure? cQ468d@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" cQ468d@x) (void)) cQ468d@x)))) (set! cQ4ba4@cQ3108@imp-collector cQ3108@imp-collector) (set! cQ310a@chi-library-internal (lambda (cQ468f@e* cQ4690@rib cQ4691@top?) (call-with-values (lambda () (cQ30f4@chi-body* cQ468f@e* '() '() '() '() '() '() '() cQ4690@rib cQ4691@top?)) (lambda (cQ46a5@cQ4696 cQ46a6@cQ4698 cQ46a7@cQ469a cQ46a8@cQ469c cQ46a9@cQ469e cQ46aa@cQ46a0 cQ46ab@cQ46a2 cQ46ac@cQ46a4) (let ((cQ46b5@exp* cQ46ac@cQ46a4) (cQ46b6@_kwd* cQ46ab@cQ46a2) (cQ46b7@mod** cQ46aa@cQ46a0) (cQ46b8@rhs* cQ46a9@cQ469e) (cQ46b9@lex* cQ46a8@cQ469c) (cQ46ba@mr cQ46a7@cQ469a) (cQ46bb@r cQ46a6@cQ4698) (cQ46bc@e* cQ46a5@cQ4696)) (values (append (apply append (reverse cQ46b7@mod**)) cQ46bc@e*) cQ46bb@r cQ46ba@mr (reverse cQ46b9@lex*) (reverse cQ46b8@rhs*) cQ46b5@exp*)))))) (set! cQ4ba5@cQ310a@chi-library-internal cQ310a@chi-library-internal) (set! cQ310c@chi-interaction-expr (lambda (cQ46c5@e cQ46c6@rib cQ46c7@r) (call-with-values (lambda () (cQ30f4@chi-body* (list cQ46c5@e) cQ46c7@r cQ46c7@r '() '() '() '() '() cQ46c6@rib '#t)) (lambda (cQ46db@cQ46cc cQ46dc@cQ46ce cQ46dd@cQ46d0 cQ46de@cQ46d2 cQ46df@cQ46d4 cQ46e0@cQ46d6 cQ46e1@cQ46d8 cQ46e2@cQ46da) (let ((cQ46eb@_exp* cQ46e2@cQ46da) (cQ46ec@_kwd* cQ46e1@cQ46d8) (cQ46ed@mod** cQ46e0@cQ46d6) (cQ46ee@rhs* cQ46df@cQ46d4) (cQ46ef@lex* cQ46de@cQ46d2) (cQ46f0@mr cQ46dd@cQ46d0) (cQ46f1@r cQ46dc@cQ46ce) (cQ46f2@e* cQ46db@cQ46cc)) (let ((cQ46fb@e* (cQ30cc@expand-interaction-rhs*/init* (reverse cQ46ef@lex*) (reverse cQ46ee@rhs*) (append (apply append (reverse cQ46ed@mod**)) cQ46f2@e*) cQ46f1@r cQ46f0@mr))) (let ((cQ46fd@e (if (null? cQ46fb@e*) (cQ2dfb@cQ2d5c@build-void) (if (null? (cdr cQ46fb@e*)) (car cQ46fb@e*) (cQ2dfa@cQ2d5a@build-sequence '#f cQ46fb@e*))))) (values cQ46fd@e cQ46f1@r)))))))) (set! cQ4ba6@cQ310c@chi-interaction-expr cQ310c@chi-interaction-expr) (set! cQ310e@library-body-expander (lambda (cQ46ff@name cQ4700@main-exp* cQ4701@imp* cQ4702@b* cQ4703@top?) (letrec* ((cQ470a@itc (cQ3102@make-collector))) (let ((cQ4713@cQ470c cQ3108@imp-collector) (cQ4714@cQ470e cQ318c@top-level-context) (cQ4715@cQ4710 cQ470a@itc) (cQ4716@cQ4712 '#f)) (let ((cQ471b@swap (lambda () (begin (let ((cQ471d@t (cQ4713@cQ470c))) (begin (cQ4713@cQ470c cQ4715@cQ4710) (set! cQ4715@cQ4710 cQ471d@t))) (let ((cQ471f@t (cQ4714@cQ470e))) (begin (cQ4714@cQ470e cQ4716@cQ4712) (set! cQ4716@cQ4712 cQ471f@t))))))) (dynamic-wind cQ471b@swap (lambda () (call-with-values (lambda () (cQ30fe@parse-import-spec* cQ4701@imp*)) (lambda (cQ4725@cQ4722 cQ4726@cQ4724) (let ((cQ4729@subst-labels cQ4726@cQ4724) (cQ472a@subst-names cQ4725@cQ4722)) (let ((cQ472d@rib (cQ3100@make-top-rib cQ472a@subst-names cQ4729@subst-labels))) (letrec* ((cQ4730@wrap (lambda (cQ47ab@x) (make-simple-struct 'stx '5 (list cQ47ab@x cQ2e19@top-mark* (list cQ472d@rib) '()))))) (let ((cQ4731@b* (map cQ4730@wrap cQ4702@b*)) (cQ4732@main-exp* (map cQ4730@wrap cQ4700@main-exp*)) (cQ4733@rtc (cQ3102@make-collector)) (cQ4734@vtc (cQ3102@make-collector))) (let ((cQ4741@cQ473a cQ3104@inv-collector) (cQ4742@cQ473c cQ3106@vis-collector) (cQ4743@cQ473e cQ4733@rtc) (cQ4744@cQ4740 cQ4734@vtc)) (let ((cQ4749@swap (lambda () (begin (let ((cQ474b@t (cQ4741@cQ473a))) (begin (cQ4741@cQ473a cQ4743@cQ473e) (set! cQ4743@cQ473e cQ474b@t))) (let ((cQ474d@t (cQ4742@cQ473c))) (begin (cQ4742@cQ473c cQ4744@cQ4740) (set! cQ4744@cQ4740 cQ474d@t))))))) (dynamic-wind cQ4749@swap (lambda () (call-with-values (lambda () (cQ310a@chi-library-internal cQ4731@b* cQ472d@rib cQ4703@top?)) (lambda (cQ475b@cQ4750 cQ475c@cQ4752 cQ475d@cQ4754 cQ475e@cQ4756 cQ475f@cQ4758 cQ4760@cQ475a) (let ((cQ4767@internal-exp* cQ4760@cQ475a) (cQ4768@rhs* cQ475f@cQ4758) (cQ4769@lex* cQ475e@cQ4756) (cQ476a@mr cQ475d@cQ4754) (cQ476b@r cQ475c@cQ4752) (cQ476c@init* cQ475b@cQ4750)) (call-with-values (lambda () (cQ30f8@parse-exports (append cQ4732@main-exp* cQ4767@internal-exp*))) (lambda (cQ4777@cQ4774 cQ4778@cQ4776) (let ((cQ477b@exp-id* cQ4778@cQ4776) (cQ477c@exp-name* cQ4777@cQ4774)) (begin (cQ2e51@seal-rib! cQ472d@rib) (let ((cQ477f@init* (cQ30ba@chi-expr* cQ476c@init* cQ476b@r cQ476a@mr))) (let ((cQ4781@rhs* (cQ30ce@chi-rhs* cQ4768@rhs* cQ476b@r cQ476a@mr))) (begin (cQ2e53@unseal-rib! cQ472d@rib) (let ((cQ4783@loc* (map cQ2e1f@gen-global cQ4769@lex*)) (cQ4784@export-subst (cQ3166@make-export-subst cQ477c@exp-name* cQ477b@exp-id*))) (letrec* ((cQ4788@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (cQ3168@make-export-env/macros cQ4769@lex* cQ4783@loc* cQ476b@r)) (lambda (cQ478f@cQ478a cQ4790@cQ478c cQ4791@cQ478e) (let ((cQ4795@macro* cQ4791@cQ478e) (cQ4796@global* cQ4790@cQ478c) (cQ4797@export-env cQ478f@cQ478a)) (begin (for-each (lambda (cQ479b@s) (let ((cQ479d@name (car cQ479b@s)) (cQ479e@label (cdr cQ479b@s))) (let ((cQ47a1@p (assq cQ479e@label cQ4797@export-env))) (if cQ47a1@p (let ((cQ47a3@b (cdr cQ47a1@p))) (let ((cQ47a5@type (car cQ47a3@b))) (if (eq? cQ47a5@type 'mutable) (cQ317c@syntax-violation 'export cQ4788@errstr cQ479d@name) (void)))) (void))))) cQ4784@export-subst) (let ((cQ47a7@invoke-body (cQ2e00@cQ2d66@build-library-letrec* '#f cQ46ff@name cQ4769@lex* cQ4783@loc* cQ4781@rhs* (if (null? cQ477f@init*) (cQ2dfb@cQ2d5c@build-void) (cQ2dfa@cQ2d5a@build-sequence '#f cQ477f@init*)))) (cQ47a8@invoke-definitions (map cQ2df7@cQ2cb9@build-global-define (map cdr cQ4796@global*)))) (values (cQ470a@itc) (cQ4733@rtc) (cQ4734@vtc) (cQ2dfa@cQ2d5a@build-sequence '#f (append cQ47a8@invoke-definitions (list cQ47a7@invoke-body))) cQ4795@macro* cQ4784@export-subst cQ4797@export-env))))))))))))))))))) cQ4749@swap)))))))))) cQ471b@swap)))))) (set! cQ4ba7@cQ310e@library-body-expander cQ310e@library-body-expander) (set! cQ3110@core-library-expander (lambda (cQ47ad@e cQ47ae@verify-name) (call-with-values (lambda () (cQ30fc@parse-library cQ47ad@e)) (lambda (cQ47b9@cQ47b2 cQ47ba@cQ47b4 cQ47bb@cQ47b6 cQ47bc@cQ47b8) (let ((cQ47c1@b* cQ47bc@cQ47b8) (cQ47c2@imp* cQ47bb@cQ47b6) (cQ47c3@exp* cQ47ba@cQ47b4) (cQ47c4@name* cQ47b9@cQ47b2)) (call-with-values (lambda () (cQ30fa@parse-library-name cQ47c4@name*)) (lambda (cQ47cd@cQ47ca cQ47ce@cQ47cc) (let ((cQ47d1@ver cQ47ce@cQ47cc) (cQ47d2@name cQ47cd@cQ47ca)) (begin (cQ47ae@verify-name cQ47d2@name) (call-with-values (lambda () (cQ310e@library-body-expander cQ47d2@name cQ47c3@exp* cQ47c2@imp* cQ47c1@b* '#f)) (lambda (cQ47e3@cQ47d6 cQ47e4@cQ47d8 cQ47e5@cQ47da cQ47e6@cQ47dc cQ47e7@cQ47de cQ47e8@cQ47e0 cQ47e9@cQ47e2) (let ((cQ47f1@export-env cQ47e9@cQ47e2) (cQ47f2@export-subst cQ47e8@cQ47e0) (cQ47f3@visit-code cQ47e7@cQ47de) (cQ47f4@invoke-code cQ47e6@cQ47dc) (cQ47f5@visit-req* cQ47e5@cQ47da) (cQ47f6@invoke-req* cQ47e4@cQ47d8) (cQ47f7@imp* cQ47e3@cQ47d6)) (values cQ47d2@name cQ47d1@ver cQ47f7@imp* cQ47f6@invoke-req* cQ47f5@visit-req* cQ47f4@invoke-code cQ47f3@visit-code cQ47f2@export-subst cQ47f1@export-env))))))))))))) (set! cQ4ba8@cQ3110@core-library-expander cQ3110@core-library-expander) (set! cQ3112@parse-top-level-program (lambda (cQ47ff@e*) (let ((cQ4801@t cQ47ff@e*)) (let ((cQ4803@ls/false (cQ309c@syntax-dispatch cQ4801@t '((any . each-any) . each-any)))) (if (and cQ4803@ls/false (apply (lambda (cQ4805@import cQ4806@imp* cQ4807@b*) (eq? (cQ3182@syntax->datum cQ4805@import) 'import)) cQ4803@ls/false)) (apply (lambda (cQ480b@import cQ480c@imp* cQ480d@b*) (values cQ480c@imp* cQ480d@b*)) cQ4803@ls/false) (let ((cQ4811@t cQ4801@t)) (let ((cQ4813@ls/false (cQ309c@syntax-dispatch cQ4811@t '((any . any) . any)))) (if (and cQ4813@ls/false (apply (lambda (cQ4815@import cQ4816@x cQ4817@y) (eq? (cQ3182@syntax->datum cQ4815@import) 'import)) cQ4813@ls/false)) (apply (lambda (cQ481b@import cQ481c@x cQ481d@y) (cQ317c@syntax-violation 'expander '"invalid syntax of top-level program" (cQ2e8f@syntax-car cQ47ff@e*))) cQ4813@ls/false) (let ((cQ4821@t cQ4811@t)) (let ((cQ4823@ls/false (cQ309c@syntax-dispatch cQ4821@t '_))) (if cQ4823@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) cQ4823@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4821@t)))))))))))) (set! cQ4ba9@cQ3112@parse-top-level-program cQ3112@parse-top-level-program) (set! cQ3114@top-level-expander (lambda (cQ4825@e*) (call-with-values (lambda () (cQ3112@parse-top-level-program cQ4825@e*)) (lambda (cQ482b@cQ4828 cQ482c@cQ482a) (let ((cQ482f@b* cQ482c@cQ482a) (cQ4830@imp* cQ482b@cQ4828)) (call-with-values (lambda () (cQ310e@library-body-expander '() '() cQ4830@imp* cQ482f@b* '#t)) (lambda (cQ4841@cQ4834 cQ4842@cQ4836 cQ4843@cQ4838 cQ4844@cQ483a cQ4845@cQ483c cQ4846@cQ483e cQ4847@cQ4840) (let ((cQ484f@export-env cQ4847@cQ4840) (cQ4850@export-subst cQ4846@cQ483e) (cQ4851@visit-code cQ4845@cQ483c) (cQ4852@invoke-code cQ4844@cQ483a) (cQ4853@visit-req* cQ4843@cQ4838) (cQ4854@invoke-req* cQ4842@cQ4836) (cQ4855@imp* cQ4841@cQ4834)) (values cQ4854@invoke-req* cQ4852@invoke-code))))))))) (set! cQ4baa@cQ3114@top-level-expander cQ3114@top-level-expander) (set! cQ3116@rp (cQ29d1@cQ28ac@make-record-printer 'env (lambda (cQ485d@x cQ485e@p cQ485f@wr) (display '"#<environment>" cQ485e@p)))) (set! cQ4bab@cQ3116@rp cQ3116@rp) (set! cQ3120@env? (lambda (cQ4863@x) (and (simple-struct? cQ4863@x) (eq? (simple-struct-name cQ4863@x) 'env)))) (set! cQ4bac@cQ3120@env? cQ3120@env?) (set! cQ3122@env-names (lambda (cQ4865@x) (simple-struct-ref cQ4865@x '0))) (set! cQ4bad@cQ3122@env-names cQ3122@env-names) (set! cQ3124@set-env-names! (lambda (cQ4867@x cQ4868@val) (simple-struct-set! cQ4867@x '0 cQ4868@val))) (set! cQ4bae@cQ3124@set-env-names! cQ3124@set-env-names!) (set! cQ3126@env-labels (lambda (cQ486b@x) (simple-struct-ref cQ486b@x '1))) (set! cQ4baf@cQ3126@env-labels cQ3126@env-labels) (set! cQ3128@set-env-labels! (lambda (cQ486d@x cQ486e@val) (simple-struct-set! cQ486d@x '1 cQ486e@val))) (set! cQ4bb0@cQ3128@set-env-labels! cQ3128@set-env-labels!) (set! cQ312a@env-itc (lambda (cQ4871@x) (simple-struct-ref cQ4871@x '2))) (set! cQ4bb1@cQ312a@env-itc cQ312a@env-itc) (set! cQ312c@set-env-itc! (lambda (cQ4873@x cQ4874@val) (simple-struct-set! cQ4873@x '2 cQ4874@val))) (set! cQ4bb2@cQ312c@set-env-itc! cQ312c@set-env-itc!) (set! cQ312e@dummy '3) (set! cQ4bb3@cQ312e@dummy cQ312e@dummy) (set! cQ3130@rp (cQ29d1@cQ28ac@make-record-printer 'interaction-env (lambda (cQ4877@x cQ4878@p cQ4879@wr) (display '"#<environment>" cQ4878@p)))) (set! cQ4bb4@cQ3130@rp cQ3130@rp) (set! cQ313a@interaction-env? (lambda (cQ487d@x) (and (simple-struct? cQ487d@x) (eq? (simple-struct-name cQ487d@x) 'interaction-env)))) (set! cQ4bb5@cQ313a@interaction-env? cQ313a@interaction-env?) (set! cQ313c@interaction-env-rib (lambda (cQ487f@x) (simple-struct-ref cQ487f@x '0))) (set! cQ4bb6@cQ313c@interaction-env-rib cQ313c@interaction-env-rib) (set! cQ313e@set-interaction-env-rib! (lambda (cQ4881@x cQ4882@val) (simple-struct-set! cQ4881@x '0 cQ4882@val))) (set! cQ4bb7@cQ313e@set-interaction-env-rib! cQ313e@set-interaction-env-rib!) (set! cQ3140@interaction-env-r (lambda (cQ4885@x) (simple-struct-ref cQ4885@x '1))) (set! cQ4bb8@cQ3140@interaction-env-r cQ3140@interaction-env-r) (set! cQ3142@set-interaction-env-r! (lambda (cQ4887@x cQ4888@val) (simple-struct-set! cQ4887@x '1 cQ4888@val))) (set! cQ4bb9@cQ3142@set-interaction-env-r! cQ3142@set-interaction-env-r!) (set! cQ3144@interaction-env-locs (lambda (cQ488b@x) (simple-struct-ref cQ488b@x '2))) (set! cQ4bba@cQ3144@interaction-env-locs cQ3144@interaction-env-locs) (set! cQ3146@set-interaction-env-locs! (lambda (cQ488d@x cQ488e@val) (simple-struct-set! cQ488d@x '2 cQ488e@val))) (set! cQ4bbb@cQ3146@set-interaction-env-locs! cQ3146@set-interaction-env-locs!) (set! cQ3148@dummy '3) (set! cQ4bbc@cQ3148@dummy cQ3148@dummy) (set! cQ314a@interaction-environment-symbols (lambda () (cQ3152@environment-symbols (cQ318a@interaction-environment)))) (set! cQ4bbd@cQ314a@interaction-environment-symbols cQ314a@interaction-environment-symbols) (set! cQ314c@environment-bindings (lambda (cQ4891@e) (vector->list (vector-map (lambda (cQ4893@name cQ4894@label) (cQ314e@parse-binding (cons cQ4893@name (cQ2caf@cQ2aec@imported-label->binding cQ4894@label)))) (cQ3122@env-names cQ4891@e) (cQ3126@env-labels cQ4891@e))))) (set! cQ4bbe@cQ314c@environment-bindings cQ314c@environment-bindings) (set! cQ314e@parse-binding (lambda (cQ4897@b) (cons (car cQ4897@b) (let ((cQ4899@t (cadr cQ4897@b))) (if (memv cQ4899@t '(core-prim global)) 'procedure (if (memv cQ4899@t '(core-macro macro global-macro)) 'syntax (if (memv cQ4899@t '($core-rtd)) 'record (if (eq? (car cQ4897@b) (cadr cQ4897@b)) 'syntax 'unknown)))))))) (set! cQ4bbf@cQ314e@parse-binding cQ314e@parse-binding) (set! cQ3150@environment? (lambda (cQ489b@x) (or (cQ3120@env? cQ489b@x) (cQ313a@interaction-env? cQ489b@x)))) (set! cQ4bc0@cQ3150@environment? cQ3150@environment?) (set! cQ3152@environment-symbols (lambda (cQ489d@x) (if (cQ3120@env? cQ489d@x) (vector->list (cQ3122@env-names cQ489d@x)) (if (cQ313a@interaction-env? cQ489d@x) (map values (cQ2e33@rib-sym* (cQ313c@interaction-env-rib cQ489d@x))) (assertion-violation 'environment-symbols '"not an environment" cQ489d@x))))) (set! cQ4bc1@cQ3152@environment-symbols cQ3152@environment-symbols) (set! cQ3154@environment (lambda cQ489f@imp* (let ((cQ48a1@itc (cQ3102@make-collector))) (let ((cQ48a7@cQ48a4 cQ3108@imp-collector) (cQ48a8@cQ48a6 cQ48a1@itc)) (let ((cQ48ab@swap (lambda () (let ((cQ48ad@t (cQ48a7@cQ48a4))) (begin (cQ48a7@cQ48a4 cQ48a8@cQ48a6) (set! cQ48a8@cQ48a6 cQ48ad@t)))))) (dynamic-wind cQ48ab@swap (lambda () (call-with-values (lambda () (cQ30fe@parse-import-spec* cQ489f@imp*)) (lambda (cQ48b3@cQ48b0 cQ48b4@cQ48b2) (let ((cQ48b7@subst-labels cQ48b4@cQ48b2) (cQ48b8@subst-names cQ48b3@cQ48b0)) (make-simple-struct 'env '4 (list cQ48b8@subst-names cQ48b7@subst-labels cQ48a1@itc)))))) cQ48ab@swap)))))) (set! cQ4bc2@cQ3154@environment cQ3154@environment) (set! cQ3156@null-environment (lambda (cQ48bb@n) (begin (if (not (eqv? cQ48bb@n '5)) (assertion-violation 'null-environment '"not 5" cQ48bb@n) (void)) (cQ3154@environment '(psyntax null-environment-5))))) (set! cQ4bc3@cQ3156@null-environment cQ3156@null-environment) (set! cQ3158@scheme-report-environment (lambda (cQ48bd@n) (begin (if (not (eqv? cQ48bd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" cQ48bd@n) (void)) (cQ3154@environment '(psyntax scheme-report-environment-5))))) (set! cQ4bc4@cQ3158@scheme-report-environment cQ3158@scheme-report-environment) (set! cQ315a@expand (lambda (cQ48bf@x cQ48c0@env) (if (cQ3120@env? cQ48c0@env) (let ((cQ48c3@rib (cQ3100@make-top-rib (cQ3122@env-names cQ48c0@env) (cQ3126@env-labels cQ48c0@env)))) (let ((cQ48c5@x (make-simple-struct 'stx '5 (list cQ48bf@x cQ2e19@top-mark* (list cQ48c3@rib) '()))) (cQ48c6@itc (cQ312a@env-itc cQ48c0@env)) (cQ48c7@rtc (cQ3102@make-collector)) (cQ48c8@vtc (cQ3102@make-collector))) (let ((cQ48cd@x (let ((cQ48df@cQ48d0 cQ318c@top-level-context) (cQ48e0@cQ48d2 cQ3104@inv-collector) (cQ48e1@cQ48d4 cQ3106@vis-collector) (cQ48e2@cQ48d6 cQ3108@imp-collector) (cQ48e3@cQ48d8 '#f) (cQ48e4@cQ48da cQ48c7@rtc) (cQ48e5@cQ48dc cQ48c8@vtc) (cQ48e6@cQ48de cQ48c6@itc)) (let ((cQ48ef@swap (lambda () (begin (let ((cQ48f1@t (cQ48df@cQ48d0))) (begin (cQ48df@cQ48d0 cQ48e3@cQ48d8) (set! cQ48e3@cQ48d8 cQ48f1@t))) (let ((cQ48f3@t (cQ48e0@cQ48d2))) (begin (cQ48e0@cQ48d2 cQ48e4@cQ48da) (set! cQ48e4@cQ48da cQ48f3@t))) (let ((cQ48f5@t (cQ48e1@cQ48d4))) (begin (cQ48e1@cQ48d4 cQ48e5@cQ48dc) (set! cQ48e5@cQ48dc cQ48f5@t))) (let ((cQ48f7@t (cQ48e2@cQ48d6))) (begin (cQ48e2@cQ48d6 cQ48e6@cQ48de) (set! cQ48e6@cQ48de cQ48f7@t))))))) (dynamic-wind cQ48ef@swap (lambda () (cQ30be@chi-expr cQ48c5@x '() '())) cQ48ef@swap))))) (begin (cQ2e51@seal-rib! cQ48c3@rib) (values cQ48cd@x (cQ48c7@rtc)))))) (if (cQ313a@interaction-env? cQ48c0@env) (let ((cQ48f9@rib (cQ313c@interaction-env-rib cQ48c0@env)) (cQ48fa@r (cQ3140@interaction-env-r cQ48c0@env)) (cQ48fb@rtc (cQ3102@make-collector))) (let ((cQ48ff@x (make-simple-struct 'stx '5 (list cQ48bf@x cQ2e19@top-mark* (list cQ48f9@rib) '())))) (call-with-values (lambda () (let ((cQ4915@cQ4906 cQ318c@top-level-context) (cQ4916@cQ4908 cQ3104@inv-collector) (cQ4917@cQ490a cQ3106@vis-collector) (cQ4918@cQ490c cQ3108@imp-collector) (cQ4919@cQ490e cQ48c0@env) (cQ491a@cQ4910 cQ48fb@rtc) (cQ491b@cQ4912 (cQ3102@make-collector)) (cQ491c@cQ4914 (cQ3102@make-collector))) (let ((cQ4925@swap (lambda () (begin (let ((cQ4927@t (cQ4915@cQ4906))) (begin (cQ4915@cQ4906 cQ4919@cQ490e) (set! cQ4919@cQ490e cQ4927@t))) (let ((cQ4929@t (cQ4916@cQ4908))) (begin (cQ4916@cQ4908 cQ491a@cQ4910) (set! cQ491a@cQ4910 cQ4929@t))) (let ((cQ492b@t (cQ4917@cQ490a))) (begin (cQ4917@cQ490a cQ491b@cQ4912) (set! cQ491b@cQ4912 cQ492b@t))) (let ((cQ492d@t (cQ4918@cQ490c))) (begin (cQ4918@cQ490c cQ491c@cQ4914) (set! cQ491c@cQ4914 cQ492d@t))))))) (dynamic-wind cQ4925@swap (lambda () (cQ310c@chi-interaction-expr cQ48ff@x cQ48f9@rib cQ48fa@r)) cQ4925@swap)))) (lambda (cQ492f@cQ4902 cQ4930@cQ4904) (let ((cQ4933@r^ cQ4930@cQ4904) (cQ4934@e cQ492f@cQ4902)) (begin (cQ3142@set-interaction-env-r! cQ48c0@env cQ4933@r^) (values cQ4934@e (cQ48fb@rtc)))))))) (assertion-violation 'expand '"not an environment" cQ48c0@env))))) (set! cQ4bc5@cQ315a@expand cQ315a@expand) (set! cQ315c@eval (lambda (cQ4937@x cQ4938@env) (begin (if (not (cQ3150@environment? cQ4938@env)) (error 'eval '"not an environment" cQ4938@env) (void)) (call-with-values (lambda () (cQ315a@expand cQ4937@x cQ4938@env)) (lambda (cQ493f@cQ493c cQ4940@cQ493e) (let ((cQ4943@invoke-req* cQ4940@cQ493e) (cQ4944@x cQ493f@cQ493c)) (begin (for-each cQ2cb0@cQ2aee@invoke-library cQ4943@invoke-req*) (eval-core (cQ2a2a@cQ29e2@expanded->core cQ4944@x))))))))) (set! cQ4bc6@cQ315c@eval cQ315c@eval) (set! cQ315e@library-expander (lambda cQ49b5 (let ((cQ49b6 (length cQ49b5))) (if (= cQ49b6 '3) (apply (lambda (cQ4947@x cQ4948@filename cQ4949@verify-name) (letrec* ((cQ494e@build-visit-code (lambda (cQ49a3@macro*) (if (null? cQ49a3@macro*) (cQ2dfb@cQ2d5c@build-void) (cQ2dfa@cQ2d5a@build-sequence '#f (map (lambda (cQ49a5@x) (let ((cQ49a7@loc (car cQ49a5@x)) (cQ49a8@src (cddr cQ49a5@x))) (list 'set! cQ49a7@loc cQ49a8@src))) cQ49a3@macro*))))) (cQ4950@visit! (lambda (cQ499b@macro*) (for-each (lambda (cQ499d@x) (let ((cQ499f@loc (car cQ499d@x)) (cQ49a0@proc (cadr cQ499d@x))) (set-symbol-value! cQ499f@loc cQ49a0@proc))) cQ499b@macro*)))) (call-with-values (lambda () (cQ3110@core-library-expander cQ4947@x cQ4949@verify-name)) (lambda (cQ4963@cQ4952 cQ4964@cQ4954 cQ4965@cQ4956 cQ4966@cQ4958 cQ4967@cQ495a cQ4968@cQ495c cQ4969@cQ495e cQ496a@cQ4960 cQ496b@cQ4962) (let ((cQ4975@export-env cQ496b@cQ4962) (cQ4976@export-subst cQ496a@cQ4960) (cQ4977@macro* cQ4969@cQ495e) (cQ4978@invoke-code cQ4968@cQ495c) (cQ4979@vis* cQ4967@cQ495a) (cQ497a@inv* cQ4966@cQ4958) (cQ497b@imp* cQ4965@cQ4956) (cQ497c@ver cQ4964@cQ4954) (cQ497d@name cQ4963@cQ4952)) (let ((cQ4987@id (gensym)) (cQ4988@name cQ497d@name) (cQ4989@ver cQ497c@ver) (cQ498a@imp* (map cQ2cb5@cQ2af8@library-spec cQ497b@imp*)) (cQ498b@vis* (map cQ2cb5@cQ2af8@library-spec cQ4979@vis*)) (cQ498c@inv* (map cQ2cb5@cQ2af8@library-spec cQ497a@inv*)) (cQ498d@visit-proc (lambda () (cQ4950@visit! cQ4977@macro*))) (cQ498e@invoke-proc (lambda () (eval-core (cQ2a2a@cQ29e2@expanded->core cQ4978@invoke-code)))) (cQ498f@visit-code (cQ494e@build-visit-code cQ4977@macro*)) (cQ4990@invoke-code cQ4978@invoke-code)) (begin (cQ2cae@cQ2aea@install-library cQ4987@id cQ4988@name cQ4989@ver cQ498a@imp* cQ498b@vis* cQ498c@inv* cQ4976@export-subst cQ4975@export-env cQ498d@visit-proc cQ498e@invoke-proc cQ498f@visit-code cQ4990@invoke-code '#t cQ4948@filename) (values cQ4987@id cQ4988@name cQ4989@ver cQ498a@imp* cQ498b@vis* cQ498c@inv* cQ4990@invoke-code cQ498f@visit-code cQ4976@export-subst cQ4975@export-env)))))))) cQ49b5) (if (= cQ49b6 '2) (apply (lambda (cQ49ab@x cQ49ac@filename) (cQ315e@library-expander cQ49ab@x cQ49ac@filename (lambda (cQ49af@x) (values)))) cQ49b5) (if (= cQ49b6 '1) (apply (lambda (cQ49b1@x) (cQ315e@library-expander cQ49b1@x '#f (lambda (cQ49b3@x) (values)))) cQ49b5) (error #1# '"invalid arg count"))))))) (set! cQ4bc7@cQ315e@library-expander cQ315e@library-expander) (set! cQ3160@boot-library-expand (lambda (cQ49b7@x) (call-with-values (lambda () (cQ315e@library-expander cQ49b7@x)) (lambda (cQ49cd@cQ49ba cQ49ce@cQ49bc cQ49cf@cQ49be cQ49d0@cQ49c0 cQ49d1@cQ49c2 cQ49d2@cQ49c4 cQ49d3@cQ49c6 cQ49d4@cQ49c8 cQ49d5@cQ49ca cQ49d6@cQ49cc) (let ((cQ49e1@export-env cQ49d6@cQ49cc) (cQ49e2@export-subst cQ49d5@cQ49ca) (cQ49e3@visit-code cQ49d4@cQ49c8) (cQ49e4@invoke-code cQ49d3@cQ49c6) (cQ49e5@inv* cQ49d2@cQ49c4) (cQ49e6@vis* cQ49d1@cQ49c2) (cQ49e7@imp* cQ49d0@cQ49c0) (cQ49e8@ver cQ49cf@cQ49be) (cQ49e9@name cQ49ce@cQ49bc) (cQ49ea@id cQ49cd@cQ49ba)) (values cQ49e9@name cQ49e4@invoke-code cQ49e2@export-subst cQ49e1@export-env)))))) (set! cQ4bc8@cQ3160@boot-library-expand cQ3160@boot-library-expand) (set! cQ3162@rev-map-append (lambda (cQ49f5@f cQ49f6@ls cQ49f7@ac) (if (null? cQ49f6@ls) cQ49f7@ac (cQ3162@rev-map-append cQ49f5@f (cdr cQ49f6@ls) (cons (cQ49f5@f (car cQ49f6@ls)) cQ49f7@ac))))) (set! cQ4bc9@cQ3162@rev-map-append cQ3162@rev-map-append) (set! cQ3164@build-exports (lambda (cQ49fb@lex*+loc* cQ49fc@init*) (cQ2dfa@cQ2d5a@build-sequence '#f (cons (cQ2dfb@cQ2d5c@build-void) (cQ3162@rev-map-append (lambda (cQ49ff@x) (list 'set! (cdr cQ49ff@x) (car cQ49ff@x))) cQ49fb@lex*+loc* cQ49fc@init*))))) (set! cQ4bca@cQ3164@build-exports cQ3164@build-exports) (set! cQ3166@make-export-subst (lambda (cQ4a01@name* cQ4a02@id*) (map (lambda (cQ4a05@name cQ4a06@id) (let ((cQ4a09@label (cQ2eab@id->label cQ4a06@id))) (begin (if (not cQ4a09@label) (cQ317c@syntax-violation '#f '"cannot export unbound identifier" cQ4a06@id) (void)) (cons cQ4a05@name cQ4a09@label)))) cQ4a01@name* cQ4a02@id*))) (set! cQ4bcb@cQ3166@make-export-subst cQ3166@make-export-subst) (set! cQ3168@make-export-env/macros (lambda (cQ4a0b@lex* cQ4a0c@loc* cQ4a0d@r) (letrec* ((cQ4a12@lookup (lambda (cQ4a2f@x) (let cQ4a37@f ((cQ4a31@x cQ4a2f@x) (cQ4a32@lex* cQ4a0b@lex*) (cQ4a33@loc* cQ4a0c@loc*)) (if (pair? cQ4a32@lex*) (if (eq? cQ4a31@x (car cQ4a32@lex*)) (car cQ4a33@loc*) (cQ4a37@f cQ4a31@x (cdr cQ4a32@lex*) (cdr cQ4a33@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let cQ4a1b@f ((cQ4a13@r cQ4a0d@r) (cQ4a14@env '()) (cQ4a15@global* '()) (cQ4a16@macro* '())) (if (null? cQ4a13@r) (values cQ4a14@env cQ4a15@global* cQ4a16@macro*) (let ((cQ4a1d@x (car cQ4a13@r))) (let ((cQ4a1f@label (car cQ4a1d@x)) (cQ4a20@b (cdr cQ4a1d@x))) (let ((cQ4a23@t (cQ2eb1@binding-type cQ4a20@b))) (if (memv cQ4a23@t '(lexical)) (let ((cQ4a25@v (cQ2eb3@binding-value cQ4a20@b))) (let ((cQ4a27@loc (cQ4a12@lookup (cQ3026@lexical-var cQ4a25@v))) (cQ4a28@type (if (cQ3028@lexical-mutable? cQ4a25@v) 'mutable 'global))) (cQ4a1b@f (cdr cQ4a13@r) (cons (cons* cQ4a1f@label cQ4a28@type cQ4a27@loc) cQ4a14@env) (cons (cons (cQ3026@lexical-var cQ4a25@v) cQ4a27@loc) cQ4a15@global*) cQ4a16@macro*))) (if (memv cQ4a23@t '(local-macro)) (let ((cQ4a2b@loc (gensym))) (cQ4a1b@f (cdr cQ4a13@r) (cons (cons* cQ4a1f@label 'global-macro cQ4a2b@loc) cQ4a14@env) cQ4a15@global* (cons (cons cQ4a2b@loc (cQ2eb3@binding-value cQ4a20@b)) cQ4a16@macro*))) (if (memv cQ4a23@t '(local-macro!)) (let ((cQ4a2d@loc (gensym))) (cQ4a1b@f (cdr cQ4a13@r) (cons (cons* cQ4a1f@label 'global-macro! cQ4a2d@loc) cQ4a14@env) cQ4a15@global* (cons (cons cQ4a2d@loc (cQ2eb3@binding-value cQ4a20@b)) cQ4a16@macro*))) (if (memv cQ4a23@t '($rtd $module)) (cQ4a1b@f (cdr cQ4a13@r) (cons cQ4a1d@x cQ4a14@env) cQ4a15@global* cQ4a16@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (cQ2eb1@binding-type cQ4a20@b) (cQ2eb3@binding-value cQ4a20@b)))))))))))))) (set! cQ4bcc@cQ3168@make-export-env/macros cQ3168@make-export-env/macros) (set! cQ316a@generate-temporaries (lambda (cQ4a39@ls) (let ((cQ4a3b@t cQ4a39@ls)) (let ((cQ4a3d@ls/false (cQ309c@syntax-dispatch cQ4a3b@t 'each-any))) (if cQ4a3d@ls/false (apply (lambda (cQ4a3f@ls) (map (lambda (cQ4a41@x) (make-simple-struct 'stx '5 (list (let ((cQ4a43@x (cQ3182@syntax->datum cQ4a41@x))) (if (or (symbol? cQ4a43@x) (string? cQ4a43@x)) (gensym cQ4a43@x) (gensym 't))) cQ2e19@top-mark* '() '()))) cQ4a3f@ls)) cQ4a3d@ls/false) (let ((cQ4a45@t cQ4a3b@t)) (let ((cQ4a47@ls/false (cQ309c@syntax-dispatch cQ4a45@t '_))) (if cQ4a47@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) cQ4a47@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4a45@t))))))))) (set! cQ4bcd@cQ316a@generate-temporaries cQ316a@generate-temporaries) (set! cQ316c@free-identifier=? (lambda (cQ4a49@x cQ4a4a@y) (if (cQ2e95@id? cQ4a49@x) (if (cQ2e95@id? cQ4a4a@y) (cQ2e9b@free-id=? cQ4a49@x cQ4a4a@y) (assertion-violation 'free-identifier=? '"not an identifier" cQ4a4a@y)) (assertion-violation 'free-identifier=? '"not an identifier" cQ4a49@x)))) (set! cQ4bce@cQ316c@free-identifier=? cQ316c@free-identifier=?) (set! cQ316e@bound-identifier=? (lambda (cQ4a4d@x cQ4a4e@y) (if (cQ2e95@id? cQ4a4d@x) (if (cQ2e95@id? cQ4a4e@y) (cQ2e99@bound-id=? cQ4a4d@x cQ4a4e@y) (assertion-violation 'bound-identifier=? '"not an identifier" cQ4a4e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" cQ4a4d@x)))) (set! cQ4bcf@cQ316e@bound-identifier=? cQ316e@bound-identifier=?) (set! cQ3170@make-source-condition (lambda (cQ4a51@x) (letrec* ((cQ4a5b@cQ4a56 (make-record-type-descriptor '&source-information &condition-rtd 'cQ4a59 '#f '#f '#((immutable file-name) (immutable line)))) (cQ4a5d@cQ4a58 '#f) (cQ4a5f@cQ4a57 (make-record-constructor-descriptor cQ4a5b@cQ4a56 &condition-rcd cQ4a5d@cQ4a58)) (cQ4a62@cQ4a55 (record-predicate cQ4a5b@cQ4a56)) (cQ4a64@make-source-condition (record-constructor cQ4a5f@cQ4a57)) (cQ4a66@cQ4a53 (record-accessor cQ4a5b@cQ4a56 '0)) (cQ4a68@cQ4a54 (record-accessor cQ4a5b@cQ4a56 '1)) (cQ4a6a@source-condition? (condition-predicate cQ4a5b@cQ4a56)) (cQ4a6c@source-filename (condition-accessor cQ4a5b@cQ4a56 cQ4a66@cQ4a53)) (cQ4a6e@source-character (condition-accessor cQ4a5b@cQ4a56 cQ4a68@cQ4a54))) (if (and (pair? cQ4a51@x) (pair? (cdr cQ4a51@x))) (cQ4a64@make-source-condition (car cQ4a51@x) (cadr cQ4a51@x)) (condition))))) (set! cQ4bd0@cQ3170@make-source-condition cQ3170@make-source-condition) (set! cQ3172@extract-position-condition (lambda (cQ4a6f@x) (cQ3170@make-source-condition (cQ3174@expression-position cQ4a6f@x)))) (set! cQ4bd1@cQ3172@extract-position-condition cQ3172@extract-position-condition) (set! cQ3174@expression-position (lambda (cQ4a71@x) (and (cQ2e61@stx? cQ4a71@x) (let ((cQ4a73@x (cQ2e63@stx-expr cQ4a71@x))) (and (cQ29c8@cQ289a@annotation? cQ4a73@x) (cQ29c9@cQ289c@annotation-source cQ4a73@x)))))) (set! cQ4bd2@cQ3174@expression-position cQ3174@expression-position) (set! cQ3176@assertion-error (lambda (cQ4a75@expr cQ4a76@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list cQ4a75@expr)) (cQ3170@make-source-condition cQ4a76@pos))))) (set! cQ4bd3@cQ3176@assertion-error cQ3176@assertion-error) (set! cQ3178@syntax-error (lambda (cQ4a79@x . cQ4a7b@args) (begin (if (not (for-all string? cQ4a7b@args)) (assertion-violation 'syntax-error '"invalid argument" cQ4a7b@args) (void)) (raise (condition (make-message-condition (if (null? cQ4a7b@args) '"invalid syntax" (apply string-append cQ4a7b@args))) (make-syntax-violation (cQ3182@syntax->datum cQ4a79@x) '#f) (cQ3172@extract-position-condition cQ4a79@x)))))) (set! cQ4bd4@cQ3178@syntax-error cQ3178@syntax-error) (set! cQ317a@syntax-violation* (lambda (cQ4a7d@who cQ4a7e@msg cQ4a7f@form cQ4a80@condition-object) (begin (if (not (string? cQ4a7e@msg)) (assertion-violation 'syntax-violation '"message is not a string" cQ4a7e@msg) (void)) (let ((cQ4a85@who (if (or (string? cQ4a7d@who) (symbol? cQ4a7d@who)) cQ4a7d@who (if (not cQ4a7d@who) (let ((cQ4a87@t cQ4a7f@form)) (let ((cQ4a89@ls/false (cQ309c@syntax-dispatch cQ4a87@t 'any))) (if (and cQ4a89@ls/false (apply (lambda (cQ4a8b@id) (cQ2e95@id? cQ4a8b@id)) cQ4a89@ls/false)) (apply (lambda (cQ4a8d@id) (cQ3182@syntax->datum cQ4a8d@id)) cQ4a89@ls/false) (let ((cQ4a8f@t cQ4a87@t)) (let ((cQ4a91@ls/false (cQ309c@syntax-dispatch cQ4a8f@t '(any . any)))) (if (and cQ4a91@ls/false (apply (lambda (cQ4a93@id cQ4a94@rest) (cQ2e95@id? cQ4a93@id)) cQ4a91@ls/false)) (apply (lambda (cQ4a97@id cQ4a98@rest) (cQ3182@syntax->datum cQ4a97@id)) cQ4a91@ls/false) (let ((cQ4a9b@t cQ4a8f@t)) (let ((cQ4a9d@ls/false (cQ309c@syntax-dispatch cQ4a9b@t '_))) (if cQ4a9d@ls/false (apply (lambda () '#f) cQ4a9d@ls/false) (cQ317c@syntax-violation '#f '"invalid syntax" cQ4a9b@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" cQ4a7d@who))))) (raise (condition (if cQ4a85@who (make-who-condition cQ4a85@who) (condition)) (make-message-condition cQ4a7e@msg) cQ4a80@condition-object (cQ3172@extract-position-condition cQ4a7f@form))))))) (set! cQ4bd5@cQ317a@syntax-violation* cQ317a@syntax-violation*) (set! cQ317c@syntax-violation (lambda cQ4aad (let ((cQ4aae (length cQ4aad))) (if (= cQ4aae '3) (apply (lambda (cQ4a9f@who cQ4aa0@msg cQ4aa1@form) (cQ317c@syntax-violation cQ4a9f@who cQ4aa0@msg cQ4aa1@form '#f)) cQ4aad) (if (= cQ4aae '4) (apply (lambda (cQ4aa5@who cQ4aa6@msg cQ4aa7@form cQ4aa8@subform) (cQ317a@syntax-violation* cQ4aa5@who cQ4aa6@msg cQ4aa7@form (make-syntax-violation (cQ3182@syntax->datum cQ4aa7@form) (cQ3182@syntax->datum cQ4aa8@subform)))) cQ4aad) (error #1# '"invalid arg count")))))) (set! cQ4bd6@cQ317c@syntax-violation cQ317c@syntax-violation) (set! cQ317e@identifier? (lambda (cQ4aaf@x) (cQ2e95@id? cQ4aaf@x))) (set! cQ4bd7@cQ317e@identifier? cQ317e@identifier?) (set! cQ3180@datum->syntax (lambda (cQ4ab1@id cQ4ab2@datum) (if (cQ2e95@id? cQ4ab1@id) (cQ2e75@datum->stx cQ4ab1@id cQ4ab2@datum) (assertion-violation 'datum->syntax '"not an identifier" cQ4ab1@id)))) (set! cQ4bd8@cQ3180@datum->syntax cQ3180@datum->syntax) (set! cQ3182@syntax->datum (lambda (cQ4ab5@x) (cQ2ea9@stx->datum cQ4ab5@x))) (set! cQ4bd9@cQ3182@syntax->datum cQ3182@syntax->datum) (set! cQ3184@ungensym-all (lambda (cQ4ab7@code) (if (pair? cQ4ab7@code) (cons (cQ3184@ungensym-all (car cQ4ab7@code)) (cQ3184@ungensym-all (cdr cQ4ab7@code))) (if (symbol? cQ4ab7@code) (ungensym cQ4ab7@code) cQ4ab7@code)))) (set! cQ4bda@cQ3184@ungensym-all cQ3184@ungensym-all) (set! cQ3186@compile-r6rs-top-level (lambda (cQ4ab9@x*) (call-with-values (lambda () (cQ3114@top-level-expander cQ4ab9@x*)) (lambda (cQ4abf@cQ4abc cQ4ac0@cQ4abe) (let ((cQ4ac3@invoke-code cQ4ac0@cQ4abe) (cQ4ac4@lib* cQ4abf@cQ4abc)) (lambda () (begin (for-each cQ2cb0@cQ2aee@invoke-library cQ4ac4@lib*) (let ((cQ4ac7@expanded (cQ2a2a@cQ29e2@expanded->core cQ4ac3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (cQ3184@ungensym-all cQ4ac7@expanded)) (void)) (eval-core cQ4ac7@expanded)))))))))) (set! cQ4bdb@cQ3186@compile-r6rs-top-level cQ3186@compile-r6rs-top-level) (set! cQ3188@pre-compile-r6rs-top-level (lambda (cQ4ac9@x*) (call-with-values (lambda () (cQ3114@top-level-expander cQ4ac9@x*)) (lambda (cQ4acf@cQ4acc cQ4ad0@cQ4ace) (let ((cQ4ad3@invoke-code cQ4ad0@cQ4ace) (cQ4ad4@lib* cQ4acf@cQ4acc)) (begin (for-each cQ2cb0@cQ2aee@invoke-library cQ4ad4@lib*) (cQ29d2@cQ28ae@compile-core (cQ2a2a@cQ29e2@expanded->core cQ4ad3@invoke-code)))))))) (set! cQ4bdc@cQ3188@pre-compile-r6rs-top-level cQ3188@pre-compile-r6rs-top-level) (set! cQ318a@interaction-environment (let ((cQ4ad7@the-env '#f)) (lambda () (or cQ4ad7@the-env (let ((cQ4ad9@lib (cQ2ca9@cQ2ae0@find-library-by-name '(mosh interaction))) (cQ4ada@rib (cQ2e49@make-empty-rib))) (begin (let ((cQ4add@subst (cQ2c8b@cQ2aa4@library-subst cQ4ad9@lib))) (begin (cQ2e35@set-rib-sym*! cQ4ada@rib (map car cQ4add@subst)) (cQ2e39@set-rib-mark**! cQ4ada@rib (map (lambda (cQ4adf@x) cQ2e19@top-mark*) cQ4add@subst)) (cQ2e3d@set-rib-label*! cQ4ada@rib (map cdr cQ4add@subst)))) (let ((cQ4ae1@env (make-simple-struct 'interaction-env '4 (list cQ4ada@rib '() '())))) (begin (set! cQ4ad7@the-env cQ4ae1@env) cQ4ae1@env)))))))) (set! cQ4bdd@cQ318a@interaction-environment cQ318a@interaction-environment) (set! cQ318c@top-level-context (cQ29d4@cQ28b2@make-parameter '#f)) (set! cQ4bde@cQ318c@top-level-context cQ318c@top-level-context) (cQ2ca6@cQ2ada@current-library-expander cQ315e@library-expander))
(begin (begin (cQ2a27@cQ29dc@current-primitive-locations (lambda (cQ5126@x) (let ((cQ5128@t (assq cQ5126@x '((syntax-error . cQ4bd4@cQ3178@syntax-error) (syntax-dispatch . cQ4b72@cQ309c@syntax-dispatch) (load . cQ4d4d@cQ4c03@load) (interaction-environment . cQ4bdd@cQ318a@interaction-environment) (library-path . cQ2c9e@cQ2aca@library-path) (mosh-cache-dir . cQ29d5@cQ28b4@mosh-cache-dir) (make-parameter . cQ29d4@cQ28b2@make-parameter) (make-variable-transformer . cQ4b2f@cQ2ec7@make-variable-transformer) (identifier? . cQ4bd7@cQ317e@identifier?) (generate-temporaries . cQ4bcd@cQ316a@generate-temporaries) (free-identifier=? . cQ4bce@cQ316c@free-identifier=?) (syntax->datum . cQ4bd9@cQ3182@syntax->datum) (datum->syntax . cQ4bd8@cQ3180@datum->syntax) (bound-identifier=? . cQ4bcf@cQ316e@bound-identifier=?) (scheme-report-environment . cQ4bc4@cQ3158@scheme-report-environment) (null-environment . cQ4bc3@cQ3156@null-environment) (command-line . cQ4d4a@cQ4bfd@command-line) (eval . cQ4bc6@cQ315c@eval) (environment . cQ4bc2@cQ3154@environment) (syntax-violation . cQ4bd6@cQ317c@syntax-violation) (assertion-error . cQ4bd3@cQ3176@assertion-error))))) (if cQ5128@t (cdr cQ5128@t) '#f)))) (cQ2cae@cQ2aea@install-library 'cQ5103 '(mosh interaction) '() '() '() '() '(#1=(regexp? . cQ50c3) #2=(alist->eq-hash-table . cQ50bf) #3=(format . cQ50bc) #4=(string-split . cQ50b0) #5=(call-process . cQ50aa) #6=(set-current-directory! . cQ50a6) #7=(expand-path . cQ50a5) #8=(current-directory . cQ50a4) #9=(%spawn . cQ50a3) #10=(%waitpid . cQ50a2) #11=(simple-struct-name . cQ50a1) #12=(simple-struct-set! . cQ50a0) #13=(simple-struct-ref . cQ509f) #14=(make-simple-struct . cQ509e) #15=(simple-struct? . cQ509d) #16=(pointer-ref-c-int64 . cQ509c) #17=(pointer-ref-c-int32 . cQ509b) #18=(pointer-ref-c-int16 . cQ509a) #19=(pointer-ref-c-int8 . cQ5099) #20=(pointer-ref-c-uint64 . cQ5098) #21=(pointer-ref-c-uint32 . cQ5097) #22=(pointer-ref-c-uint16 . cQ5096) #23=(pointer-ref-c-uint8 . cQ5095) #24=(pointer-set-c-uint64! . cQ5094) #25=(pointer-set-c-uint32! . cQ5093) #26=(pointer-set-c-uint16! . cQ5092) #27=(pointer-set-c-uint8! . cQ5091) #28=(pointer-set-c-int64! . cQ5090) #29=(pointer-set-c-int32! . cQ508f) #30=(pointer-set-c-int16! . cQ508e) #31=(pointer-set-c-int8! . cQ508d) #32=(pointer-set-c-pointer! . cQ508c) #33=(pointer-set-c-double! . cQ508b) #34=(pointer-set-c-float! . cQ508a) #35=(pointer-set-c-long-long! . cQ5089) #36=(pointer-set-c-long! . cQ5088) #37=(pointer-set-c-int! . cQ5087) #38=(pointer-set-c-short! . cQ5086) #39=(pointer-set-c-char! . cQ5085) #40=(pointer-ref-c-pointer . cQ5084) #41=(pointer-ref-c-double . cQ5083) #42=(pointer-ref-c-float . cQ5082) #43=(pointer-ref-c-unsigned-long-long . cQ5081) #44=(pointer-ref-c-signed-long-long . cQ5080) #45=(pointer-ref-c-unsigned-long . cQ507f) #46=(pointer-ref-c-signed-long . cQ507e) #47=(pointer-ref-c-unsigned-int . cQ507d) #48=(pointer-ref-c-signed-int . cQ507c) #49=(pointer-ref-c-unsigned-short . cQ507b) #50=(pointer-ref-c-signed-short . cQ507a) #51=(pointer-ref-c-unsigned-char . cQ5079) #52=(pointer-ref-c-signed-char . cQ5078) #53=(pointer->integer . cQ5077) #54=(integer->pointer . cQ5076) #55=(pointer? . cQ5075) #56=(shared-errno . cQ5074) #57=(%ffi-supported? . cQ506a) #58=(%ffi-pointer->string . cQ5069) #59=(%ffi-call . cQ5068) #60=(%ffi-lookup . cQ5067) #61=(%ffi-open . cQ5066) #62=(null-terminated-utf8->string . cQ5065) #63=(null-terminated-bytevector->string . cQ5064) #64=(%exec . cQ5063) #65=(%fork . cQ5062) #66=(%pipe . cQ5061) #67=(p . cQ5060) #68=(whereis . cQ5044) #69=(register . cQ5043) #70=(vm-join! . cQ5042) #71=(vm-set-value! . cQ5041) #72=(vm? . cQ5040) #73=(main-vm? . cQ503f) #74=(vm-eval . cQ503e) #75=(vm-self . cQ503d) #76=(vm-start! . cQ503c) #77=(make-vm . cQ503b) #78=(mutex-try-lock! . cQ503a) #79=(mutex-unlock! . cQ5039) #80=(mutex-lock! . cQ5038) #81=(mutex? . cQ5037) #82=(make-mutex . cQ5036) #83=(condition-variable-notify-all! . cQ5035) #84=(condition-variable-notify! . cQ5034) #85=(condition-variable-wait! . cQ5033) #86=(make-condition-variable . cQ5032) #87=(string-upcase . cQ5015) #88=(string-titlecase . cQ5014) #89=(string-normalize-nfkd . cQ5013) #90=(string-normalize-nfkc . cQ5012) #91=(string-normalize-nfd . cQ5011) #92=(string-normalize-nfc . cQ5010) #93=(string-foldcase . cQ500f) #94=(string-downcase . cQ500e) #95=(string-ci>? . cQ500d) #96=(string-ci>=? . cQ500c) #97=(string-ci=? . cQ500b) #98=(string-ci<? . cQ500a) #99=(string-ci<=? . cQ5009) #100=(char-whitespace? . cQ5008) #101=(char-upper-case? . cQ5007) #102=(char-title-case? . cQ5006) #103=(char-numeric? . cQ5005) #104=(char-lower-case? . cQ5004) #105=(char-general-category . cQ5003) #106=(char-upcase . cQ5002) #107=(char-titlecase . cQ5001) #108=(char-foldcase . cQ5000) #109=(char-downcase . cQ4fff) #110=(char-ci>? . cQ4ffe) #111=(char-ci>=? . cQ4ffd) #112=(char-ci=? . cQ4ffc) #113=(char-ci<? . cQ4ffb) #114=(char-ci<=? . cQ4ffa) #115=(char-alphabetic? . cQ4ff9) #116=(make-variable-transformer . cQ2ec6) #117=(identifier? . cQ317d) #118=(generate-temporaries . cQ3169) #119=(free-identifier=? . cQ316b) #120=(syntax->datum . cQ3181) #121=(datum->syntax . cQ317f) #122=(bound-identifier=? . cQ316d) #123=(record-type-descriptor? . cQ4ff8) #124=(record-predicate . cQ4ff7) #125=(record-mutator . cQ4ff6) #126=(record-constructor . cQ4ff5) #127=(record-accessor . cQ4ff4) #128=(make-record-type-descriptor . cQ4ff3) #129=(make-record-constructor-descriptor . cQ4ff2) #130=(record? . cQ4ff1) #131=(record-type-uid . cQ4ff0) #132=(record-type-sealed? . cQ4fef) #133=(record-type-parent . cQ4fee) #134=(record-type-opaque? . cQ4fed) #135=(record-type-name . cQ4fec) #136=(record-type-generative? . cQ4feb) #137=(record-type-field-names . cQ4fea) #138=(record-rtd . cQ4fe9) #139=(record-field-mutable? . cQ4fe8) #140=(delete-file . cQ4fe7) #141=(file-exists? . cQ4fe6) #142=(vector-sort! . cQ4fe5) #143=(vector-sort . cQ4fe4) #144=(list-sort . cQ4fe3) #145=(symbol-hash . cQ4fe2) #146=(string-ci-hash . cQ4fe1) #147=(string-hash . cQ4fe0) #148=(equal-hash . cQ4fdf) #149=(hashtable-equivalence-function . cQ4fde) #150=(make-hashtable . cQ4fdd) #151=(hashtable-hash-function . cQ4fdc) #152=(make-eqv-hashtable . cQ4fdb) #153=(make-eq-hashtable . cQ4fda) #154=(hashtable? . cQ4fd9) #155=(hashtable-update! . cQ4fd8) #156=(hashtable-size . cQ4fd7) #157=(hashtable-set! . cQ4fd6) #158=(hashtable-ref . cQ4fd5) #159=(hashtable-mutable? . cQ4fd4) #160=(hashtable-keys . cQ4fd3) #161=(hashtable-entries . cQ4fd2) #162=(hashtable-delete! . cQ4fd1) #163=(hashtable-copy . cQ4fd0) #164=(hashtable-contains? . cQ4fcf) #165=(hashtable-clear! . cQ4fce) #166=(call-with-output-file . cQ4fcd) #167=(call-with-input-file . cQ4fcc) #168=(write-char . cQ4fcb) #169=(write . cQ4fca) #170=(with-output-to-file . cQ4fc9) #171=(with-input-from-file . cQ4fc8) #172=(read-char . cQ4fc7) #173=(read . cQ4fc6) #174=(peek-char . cQ4fc5) #175=(open-output-file . cQ4fc4) #176=(open-input-file . cQ4fc3) #177=(newline . cQ4fc2) #178=(display . cQ4fc1) #179=(close-output-port . cQ4fc0) #180=(close-input-port . cQ4fbf) #181=(eof-object? . cQ4fbe) #182=(eof-object . cQ4fbd) #183=(current-error-port . cQ4fbc) #184=(current-output-port . cQ4fbb) #185=(current-input-port . cQ4fba) #186=(output-port? . cQ4fb9) #187=(input-port? . cQ4fb8) #188=(utf-8-codec . cQ4fb7) #189=(utf-16-codec . cQ4fb6) #190=(transcoder-error-handling-mode . cQ4fb5) #191=(transcoder-eol-style . cQ4fb4) #192=(transcoder-codec . cQ4fb3) #193=(transcoded-port . cQ4fb2) #194=(textual-port? . cQ4fb1) #195=(string->bytevector . cQ4fb0) #196=(standard-output-port . cQ4faf) #197=(standard-input-port . cQ4fae) #198=(standard-error-port . cQ4fad) #199=(set-port-position! . cQ4fac) #200=(put-u8 . cQ4fab) #201=(put-string . cQ4faa) #202=(put-datum . cQ4fa9) #203=(put-char . cQ4fa8) #204=(put-bytevector . cQ4fa7) #205=(port? . cQ4fa6) #206=(port-transcoder . cQ4fa5) #207=(port-position . cQ4fa4) #208=(port-has-set-port-position!? . cQ4fa3) #209=(port-has-port-position? . cQ4fa2) #210=(port-eof? . cQ4fa1) #211=(output-port-buffer-mode . cQ4fa0) #212=(open-string-output-port . cQ4f9f) #213=(open-string-input-port . cQ4f9e) #214=(open-file-output-port . cQ4f9d) #215=(open-file-input/output-port . cQ4f9c) #216=(open-file-input-port . cQ4f9b) #217=(open-bytevector-output-port . cQ4f9a) #218=(open-bytevector-input-port . cQ4f99) #219=(native-transcoder . cQ4f98) #220=(native-eol-style . cQ4f97) #221=(make-transcoder . cQ4f96) #222=(latin-1-codec . cQ4f95) #223=(make-i/o-write-error . cQ4f94) #224=(make-i/o-read-error . cQ4f93) #225=(make-i/o-port-error . cQ4f92) #226=(make-i/o-invalid-position-error . cQ4f91) #227=(make-i/o-filename-error . cQ4f90) #228=(make-i/o-file-protection-error . cQ4f8f) #229=(make-i/o-file-is-read-only-error . cQ4f8e) #230=(make-i/o-file-does-not-exist-error . cQ4f8d) #231=(make-i/o-file-already-exists-error . cQ4f8c) #232=(make-i/o-error . cQ4f8b) #233=(make-i/o-encoding-error . cQ4f8a) #234=(make-i/o-decoding-error . cQ4f89) #235=(make-custom-textual-output-port . cQ4f88) #236=(make-custom-textual-input/output-port . cQ4f87) #237=(make-custom-textual-input-port . cQ4f86) #238=(make-custom-binary-output-port . cQ4f85) #239=(make-custom-binary-input/output-port . cQ4f84) #240=(make-custom-binary-input-port . cQ4f83) #241=(make-bytevector . cQ4f82) #242=(lookahead-u8 . cQ4f81) #243=(lookahead-char . cQ4f80) #244=(i/o-write-error? . cQ4f7f) #245=(i/o-read-error? . cQ4f7e) #246=(i/o-port-error? . cQ4f7d) #247=(i/o-invalid-position-error? . cQ4f7c) #248=(i/o-filename-error? . cQ4f7b) #249=(i/o-file-protection-error? . cQ4f7a) #250=(i/o-file-is-read-only-error? . cQ4f79) #251=(i/o-file-does-not-exist-error? . cQ4f78) #252=(i/o-file-already-exists-error? . cQ4f77) #253=(i/o-error? . cQ4f76) #254=(i/o-error-position . cQ4f75) #255=(i/o-error-port . cQ4f74) #256=(i/o-error-filename . cQ4f73) #257=(i/o-encoding-error? . cQ4f72) #258=(i/o-encoding-error-char . cQ4f71) #259=(i/o-decoding-error? . cQ4f70) #260=(get-u8 . cQ4f6f) #261=(get-string-n! . cQ4f6e) #262=(get-string-n . cQ4f6d) #263=(get-string-all . cQ4f6c) #264=(get-line . cQ4f6b) #265=(get-datum . cQ4f6a) #266=(get-char . cQ4f69) #267=(get-bytevector-some . cQ4f68) #268=(get-bytevector-n! . cQ4f67) #269=(get-bytevector-n . cQ4f66) #270=(get-bytevector-all . cQ4f65) #271=(flush-output-port . cQ4f64) #272=(close-port . cQ4f63) #273=(exit . cQ4f5b) #274=(command-line . cQ4bfc) #275=(string-fill! . cQ4f5a) #276=(string-set! . cQ4f59) #277=(set-cdr! . cQ4f58) #278=(set-car! . cQ4f57) #279=(remove . cQ4f56) #280=(remv . cQ4f55) #281=(remp . cQ4f54) #282=(remq . cQ4f53) #283=(partition . cQ4f52) #284=(memv . cQ4f51) #285=(memq . cQ4f50) #286=(memp . cQ4f4f) #287=(member . cQ4f4e) #288=(exists . cQ4f4d) #289=(for-all . cQ4f4c) #290=(fold-right . cQ4f4b) #291=(fold-left . cQ4f4a) #292=(find . cQ4f49) #293=(filter . cQ4f48) #294=(cons* . cQ4f47) #295=(assv . cQ4f46) #296=(assq . cQ4f45) #297=(assp . cQ4f44) #298=(assoc . cQ4f43) #299=(call-with-string-output-port . cQ4f42) #300=(call-with-port . cQ4f41) #301=(call-with-bytevector-output-port . cQ4f40) #302=(bytevector->string . cQ4f3f) #303=(buffer-mode? . cQ4f3e) #304=(binary-port? . cQ4f3d) #305=(with-exception-handler . cQ4f3c) #306=(raise-continuable . cQ4f3b) #307=(raise . cQ4f3a) #308=(eval . cQ315b) #309=(environment . cQ3153) #310=(make-enumeration . cQ4f39) #311=(enum-set=? . cQ4f38) #312=(enum-set-universe . cQ4f37) #313=(enum-set-union . cQ4f36) #314=(enum-set-subset? . cQ4f35) #315=(enum-set-projection . cQ4f34) #316=(enum-set-member? . cQ4f33) #317=(enum-set-intersection . cQ4f32) #318=(enum-set-indexer . cQ4f31) #319=(enum-set-difference . cQ4f30) #320=(enum-set-constructor . cQ4f2f) #321=(enum-set-complement . cQ4f2e) #322=(enum-set->list . cQ4f2d) #323=(who-condition? . cQ4f2c) #324=(warning? . cQ4f2b) #325=(violation? . cQ4f2a) #326=(undefined-violation? . cQ4f29) #327=(syntax-violation? . cQ4f28) #328=(syntax-violation-subform . cQ4f27) #329=(syntax-violation-form . cQ4f26) #330=(syntax-violation . cQ317b) #331=(simple-conditions . cQ4f25) #332=(serious-condition? . cQ4f24) #333=(non-continuable-violation? . cQ4f23) #334=(message-condition? . cQ4f22) #335=(make-who-condition . cQ4f21) #336=(make-warning . cQ4f20) #337=(make-violation . cQ4f1f) #338=(make-undefined-violation . cQ4f1e) #339=(make-syntax-violation . cQ4f1d) #340=(make-serious-condition . cQ4f1c) #341=(make-non-continuable-violation . cQ4f1b) #342=(make-message-condition . cQ4f1a) #343=(make-lexical-violation . cQ4f19) #344=(make-irritants-condition . cQ4f18) #345=(make-implementation-restriction-violation . cQ4f17) #346=(make-error . cQ4f16) #347=(make-assertion-violation . cQ4f15) #348=(lexical-violation? . cQ4f14) #349=(irritants-condition? . cQ4f13) #350=(implementation-restriction-violation? . cQ4f12) #351=(error? . cQ4f11) #352=(condition-who . cQ4f10) #353=(condition-predicate . cQ4f0f) #354=(condition-message . cQ4f0e) #355=(condition-irritants . cQ4f0d) #356=(condition-accessor . cQ4f0c) #357=(condition . cQ4f0b) #358=(assertion-violation? . cQ4f0a) #359=(condition? . cQ4f09) #360=(utf32->string . cQ4f08) #361=(utf16->string . cQ4f07) #362=(utf8->string . cQ4f06) #363=(uint-list->bytevector . cQ4f05) #364=(u8-list->bytevector . cQ4f04) #365=(string->utf8 . cQ4f03) #366=(string->utf32 . cQ4f02) #367=(string->utf16 . cQ4f01) #368=(sint-list->bytevector . cQ4f00) #369=(native-endianness . cQ4eff) #370=(bytevector? . cQ4efe) #371=(bytevector=? . cQ4efd) #372=(bytevector-uint-set! . cQ4efc) #373=(bytevector-uint-ref . cQ4efb) #374=(bytevector-u8-set! . cQ4efa) #375=(bytevector-u8-ref . cQ4ef9) #376=(bytevector-u64-set! . cQ4ef8) #377=(bytevector-u64-ref . cQ4ef7) #378=(bytevector-u64-native-set! . cQ4ef6) #379=(bytevector-u64-native-ref . cQ4ef5) #380=(bytevector-u32-set! . cQ4ef4) #381=(bytevector-u32-ref . cQ4ef3) #382=(bytevector-u32-native-set! . cQ4ef2) #383=(bytevector-u32-native-ref . cQ4ef1) #384=(bytevector-u16-set! . cQ4ef0) #385=(bytevector-u16-ref . cQ4eef) #386=(bytevector-u16-native-set! . cQ4eee) #387=(bytevector-u16-native-ref . cQ4eed) #388=(bytevector-sint-set! . cQ4eec) #389=(bytevector-sint-ref . cQ4eeb) #390=(bytevector-s8-set! . cQ4eea) #391=(bytevector-s8-ref . cQ4ee9) #392=(bytevector-s64-set! . cQ4ee8) #393=(bytevector-s64-ref . cQ4ee7) #394=(bytevector-s64-native-set! . cQ4ee6) #395=(bytevector-s64-native-ref . cQ4ee5) #396=(bytevector-s32-set! . cQ4ee4) #397=(bytevector-s32-ref . cQ4ee3) #398=(bytevector-s32-native-set! . cQ4ee2) #399=(bytevector-s32-native-ref . cQ4ee1) #400=(bytevector-s16-set! . cQ4ee0) #401=(bytevector-s16-ref . cQ4edf) #402=(bytevector-s16-native-set! . cQ4ede) #403=(bytevector-s16-native-ref . cQ4edd) #404=(bytevector-length . cQ4edc) #405=(bytevector-ieee-single-ref . cQ4edb) #406=(bytevector-ieee-single-set! . cQ4eda) #407=(bytevector-ieee-single-native-set! . cQ4ed9) #408=(bytevector-ieee-single-native-ref . cQ4ed8) #409=(bytevector-ieee-double-set! . cQ4ed7) #410=(bytevector-ieee-double-ref . cQ4ed6) #411=(bytevector-ieee-double-native-set! . cQ4ed5) #412=(bytevector-ieee-double-native-ref . cQ4ed4) #413=(bytevector-fill! . cQ4ed3) #414=(bytevector-copy! . cQ4ed2) #415=(bytevector-copy . cQ4ed1) #416=(bytevector->uint-list . cQ4ed0) #417=(bytevector->u8-list . cQ4ecf) #418=(bytevector->sint-list . cQ4ece) #419=(no-nans-violation? . cQ4ecd) #420=(no-infinities-violation? . cQ4ecc) #421=(make-no-nans-violation . cQ4ecb) #422=(make-no-infinities-violation . cQ4eca) #423=(real->flonum . cQ4ec9) #424=(flzero? . cQ4ec8) #425=(fltruncate . cQ4ec7) #426=(fltan . cQ4ec6) #427=(flsqrt . cQ4ec5) #428=(flsin . cQ4ec4) #429=(flround . cQ4ec3) #430=(flpositive? . cQ4ec2) #431=(flonum? . cQ4ec1) #432=(flodd? . cQ4ec0) #433=(flnumerator . cQ4ebf) #434=(flnegative? . cQ4ebe) #435=(flnan? . cQ4ebd) #436=(flmod0 . cQ4ebc) #437=(flmod . cQ4ebb) #438=(flmin . cQ4eba) #439=(flmax . cQ4eb9) #440=(fllog . cQ4eb8) #441=(flinteger? . cQ4eb7) #442=(flinfinite? . cQ4eb6) #443=(flfloor . cQ4eb5) #444=(flfinite? . cQ4eb4) #445=(flexpt . cQ4eb3) #446=(flexp . cQ4eb2) #447=(fleven? . cQ4eb1) #448=(fldiv0-and-mod0 . cQ4eb0) #449=(fldiv0 . cQ4eaf) #450=(fldiv-and-mod . cQ4eae) #451=(fldiv . cQ4ead) #452=(fldenominator . cQ4eac) #453=(flcos . cQ4eab) #454=(flceiling . cQ4eaa) #455=(flatan . cQ4ea9) #456=(flasin . cQ4ea8) #457=(flacos . cQ4ea7) #458=(flabs . cQ4ea6) #459=(fl>? . cQ4ea5) #460=(fl>=? . cQ4ea4) #461=(fl=? . cQ4ea3) #462=(fl<? . cQ4ea2) #463=(fl<=? . cQ4ea1) #464=(fl/ . cQ4ea0) #465=(fl- . cQ4e9f) #466=(fl+ . cQ4e9e) #467=(fl* . cQ4e9d) #468=(fixnum->flonum . cQ4e9c) #469=(fxzero? . cQ4e9b) #470=(fxxor . cQ4e9a) #471=(fxrotate-bit-field . cQ4e99) #472=(fxreverse-bit-field . cQ4e98) #473=(fxpositive? . cQ4e97) #474=(fxodd? . cQ4e96) #475=(fxnot . cQ4e95) #476=(fxnegative? . cQ4e94) #477=(fxmod0 . cQ4e93) #478=(fxmod . cQ4e92) #479=(fxmin . cQ4e91) #480=(fxmax . cQ4e90) #481=(fxlength . cQ4e8f) #482=(fxior . cQ4e8e) #483=(fxif . cQ4e8d) #484=(fxfirst-bit-set . cQ4e8c) #485=(fxeven? . cQ4e8b) #486=(fxdiv0-and-mod0 . cQ4e8a) #487=(fxdiv0 . cQ4e89) #488=(fxdiv-and-mod . cQ4e88) #489=(fxdiv . cQ4e87) #490=(fxcopy-bit-field . cQ4e86) #491=(fxcopy-bit . cQ4e85) #492=(fxbit-set? . cQ4e84) #493=(fxbit-field . cQ4e83) #494=(fxbit-count . cQ4e82) #495=(fxarithmetic-shift-right . cQ4e81) #496=(fxarithmetic-shift-left . cQ4e80) #497=(fxarithmetic-shift . cQ4e7f) #498=(fxand . cQ4e7e) #499=(fx>? . cQ4e7d) #500=(fx>=? . cQ4e7c) #501=(fx=? . cQ4e7b) #502=(fx<? . cQ4e7a) #503=(fx<=? . cQ4e79) #504=(fx-/carry . cQ4e78) #505=(fx- . cQ4e77) #506=(fx+/carry . cQ4e76) #507=(fx+ . cQ4e75) #508=(fx*/carry . cQ4e74) #509=(fx* . cQ4e73) #510=(greatest-fixnum . cQ4e72) #511=(least-fixnum . cQ4e71) #512=(fixnum-width . cQ4e70) #513=(fixnum? . cQ4e6f) #514=(bitwise-rotate-bit-field . cQ4e6e) #515=(bitwise-reverse-bit-field . cQ4e6d) #516=(bitwise-length . cQ4e6c) #517=(bitwise-if . cQ4e6b) #518=(bitwise-first-bit-set . cQ4e6a) #519=(bitwise-copy-bit-field . cQ4e69) #520=(bitwise-copy-bit . cQ4e68) #521=(bitwise-bit-set? . cQ4e67) #522=(bitwise-bit-field . cQ4e66) #523=(bitwise-bit-count . cQ4e65) #524=(bitwise-xor . cQ4e64) #525=(bitwise-ior . cQ4e63) #526=(bitwise-and . cQ4e62) #527=(bitwise-not . cQ4e61) #528=(bitwise-arithmetic-shift-right . cQ4e60) #529=(bitwise-arithmetic-shift-left . cQ4e5f) #530=(bitwise-arithmetic-shift . cQ4e5e) #531=(zero? . cQ4e5d) #532=(vector? . cQ4e5c) #533=(vector-set! . cQ4e5b) #534=(vector-ref . cQ4e5a) #535=(vector-map . cQ4e59) #536=(vector-length . cQ4e58) #537=(vector-for-each . cQ4e57) #538=(vector-fill! . cQ4e56) #539=(vector->list . cQ4e55) #540=(vector . cQ4e54) #541=(values . cQ4e53) #542=(truncate . cQ4e52) #543=(tan . cQ4e51) #544=(symbol? . cQ4e50) #545=(symbol=? . cQ4e4f) #546=(symbol->string . cQ4e4e) #547=(substring . cQ4e4d) #548=(string? . cQ4e4c) #549=(string>? . cQ4e4b) #550=(string>=? . cQ4e4a) #551=(string=? . cQ4e49) #552=(string<? . cQ4e48) #553=(string<=? . cQ4e47) #554=(string-ref . cQ4e46) #555=(string-length . cQ4e45) #556=(string-for-each . cQ4e44) #557=(string-copy . cQ4e43) #558=(string-append . cQ4e42) #559=(string->symbol . cQ4e41) #560=(string->number . cQ4e40) #561=(string->list . cQ4e3f) #562=(string . cQ4e3e) #563=(sqrt . cQ4e3d) #564=(sin . cQ4e3c) #565=(round . cQ4e3b) #566=(reverse . cQ4e3a) #567=(real? . cQ4e39) #568=(real-valued? . cQ4e38) #569=(real-part . cQ4e37) #570=(rationalize . cQ4e36) #571=(rational? . cQ4e35) #572=(rational-valued? . cQ4e34) #573=(procedure? . cQ4e33) #574=(positive? . cQ4e32) #575=(pair? . cQ4e31) #576=(odd? . cQ4e30) #577=(numerator . cQ4e2f) #578=(number? . cQ4e2e) #579=(number->string . cQ4e2d) #580=(null? . cQ4e2c) #581=(not . cQ4e2b) #582=(negative? . cQ4e2a) #583=(nan? . cQ4e29) #584=(min . cQ4e28) #585=(max . cQ4e27) #586=(map . cQ4e26) #587=(make-vector . cQ4e25) #588=(make-string . cQ4e24) #589=(make-rectangular . cQ4e23) #590=(make-polar . cQ4e22) #591=(magnitude . cQ4e21) #592=(log . cQ4e20) #593=(list? . cQ4e1f) #594=(list-tail . cQ4e1e) #595=(list-ref . cQ4e1d) #596=(list->vector . cQ4e1c) #597=(list->string . cQ4e1b) #598=(list . cQ4e1a) #599=(length . cQ4e19) #600=(lcm . cQ4e18) #601=(integer? . cQ4e17) #602=(integer-valued? . cQ4e16) #603=(integer->char . cQ4e15) #604=(infinite? . cQ4e14) #605=(inexact? . cQ4e13) #606=(inexact . cQ4e12) #607=(imag-part . cQ4e11) #608=(gcd . cQ4e10) #609=(for-each . cQ4e0f) #610=(floor . cQ4e0e) #611=(finite? . cQ4e0d) #612=(expt . cQ4e0c) #613=(exp . cQ4e0b) #614=(exact? . cQ4e0a) #615=(exact-integer-sqrt . cQ4e09) #616=(exact . cQ4e08) #617=(even? . cQ4e07) #618=(error . cQ4e06) #619=(eqv? . cQ4e05) #620=(equal? . cQ4e04) #621=(eq? . cQ4e03) #622=(dynamic-wind . cQ4e02) #623=(div0-and-mod0 . cQ4e01) #624=(mod0 . cQ4e00) #625=(div0 . cQ4dff) #626=(div-and-mod . cQ4dfe) #627=(mod . cQ4dfd) #628=(div . cQ4dfc) #629=(denominator . cQ4dfb) #630=(cos . cQ4dfa) #631=(cons . cQ4df9) #632=(complex? . cQ4df8) #633=(char? . cQ4df7) #634=(char>? . cQ4df6) #635=(char>=? . cQ4df5) #636=(char=? . cQ4df4) #637=(char<? . cQ4df3) #638=(char<=? . cQ4df2) #639=(char->integer . cQ4df1) #640=(ceiling . cQ4df0) #641=(call-with-values . cQ4def) #642=(call/cc . cQ4dee) #643=(call-with-current-continuation . cQ4ded) #644=(cddddr . cQ4dec) #645=(cdddar . cQ4deb) #646=(cddadr . cQ4dea) #647=(cddaar . cQ4de9) #648=(cdaddr . cQ4de8) #649=(cdadar . cQ4de7) #650=(cdaadr . cQ4de6) #651=(cdaaar . cQ4de5) #652=(cadddr . cQ4de4) #653=(caddar . cQ4de3) #654=(cadadr . cQ4de2) #655=(cadaar . cQ4de1) #656=(caaddr . cQ4de0) #657=(caadar . cQ4ddf) #658=(caaadr . cQ4dde) #659=(caaaar . cQ4ddd) #660=(cdddr . cQ4ddc) #661=(cddar . cQ4ddb) #662=(cdadr . cQ4dda) #663=(cdaar . cQ4dd9) #664=(caddr . cQ4dd8) #665=(cadar . cQ4dd7) #666=(caadr . cQ4dd6) #667=(caaar . cQ4dd5) #668=(cddr . cQ4dd4) #669=(cdar . cQ4dd3) #670=(cadr . cQ4dd2) #671=(caar . cQ4dd1) #672=(cdr . cQ4dd0) #673=(car . cQ4dcf) #674=(boolean? . cQ4dce) #675=(boolean=? . cQ4dcd) #676=(atan . cQ4dcc) #677=(assertion-violation . cQ4dcb) #678=(asin . cQ4dca) #679=(apply . cQ4dc9) #680=(append . cQ4dc8) #681=(angle . cQ4dc7) #682=(acos . cQ4dc6) #683=(abs . cQ4dc5) #684=(/ . cQ4dc4) #685=(* . cQ4dc3) #686=(- . cQ4dc2) #687=(+ . cQ4dc1) #688=(>= . cQ4dc0) #689=(> . cQ4dbf) #690=(= . cQ4dbe) #691=(<= . cQ4dbd) #692=(< . cQ4dbc) #693=(library . cQ4dbb) #694=(&no-nans . cQ4dba) #695=(&no-infinities . cQ4db9) #696=(&i/o-encoding . cQ4db8) #697=(&i/o-decoding . cQ4db7) #698=(&i/o-port . cQ4db6) #699=(&i/o-file-does-not-exist . cQ4db5) #700=(&i/o-file-already-exists . cQ4db4) #701=(&i/o-file-is-read-only . cQ4db3) #702=(&i/o-file-protection . cQ4db2) #703=(&i/o-filename . cQ4db1) #704=(&i/o-invalid-position . cQ4db0) #705=(&i/o-write . cQ4daf) #706=(&i/o-read . cQ4dae) #707=(&i/o . cQ4dad) #708=(&undefined . cQ4dac) #709=(&syntax . cQ4dab) #710=(&lexical . cQ4daa) #711=(&implementation-restriction . cQ4da9) #712=(&non-continuable . cQ4da8) #713=(&who . cQ4da7) #714=(&irritants . cQ4da6) #715=(&assertion . cQ4da5) #716=(&violation . cQ4da4) #717=(&error . cQ4da3) #718=(&serious . cQ4da2) #719=(&warning . cQ4da1) #720=(&message . cQ4da0) #721=(&condition . cQ4d9f) #722=(define-condition-type . cQ4d9e) #723=(define-enumeration . cQ4d9d) #724=(define-record-type . cQ4d9c) #725=(parent-rtd . cQ4d9b) #726=(nongenerative . cQ4d9a) #727=(opaque . cQ4d99) #728=(sealed . cQ4d98) #729=(protocol . cQ4d97) #730=(parent . cQ4d96) #731=(immutable . cQ4d95) #732=(mutable . cQ4d94) #733=(fields . cQ4d93) #734=(error-handling-mode . cQ4d92) #735=(file-options . cQ4d91) #736=(buffer-mode . cQ4d90) #737=(eol-style . cQ4d8f) #738=(guard . cQ4d8e) #739=(unsyntax-splicing . cQ4d8b) #740=(unsyntax . cQ4d8a) #741=(unquote-splicing . cQ4d89) #742=(unquote . cQ4d88) #743=(_ . cQ4d87) #744=(else . cQ4d86) #745=(=> . cQ4d85) #746=(... . cQ4d84) #747=(assert . cQ4d83) #748=(endianness . cQ4d82) #749=(time . cQ4d80) #750=(do . cQ4d7f) #751=(cond . cQ4d7e) #752=(let* . cQ4d7d) #753=(let*-values . cQ4d7c) #754=(let-values . cQ4d7b) #755=(identifier-syntax . cQ4d7a) #756=(with-syntax . cQ4d79) #757=(quasisyntax . cQ4d78) #758=(quasiquote . cQ4d77) #759=(syntax-rules . cQ4d76) #760=(include . cQ4d75) #761=(record-constructor-descriptor . cQ4d73) #762=(record-type-descriptor . cQ4d72) #763=(case . cQ4d71) #764=(unless . cQ4d6f) #765=(when . cQ4d6e) #766=(or . cQ4d6d) #767=(and . cQ4d6c) #768=(if . cQ4d6b) #769=(let . cQ4d6a) #770=(letrec* . cQ4d69) #771=(letrec . cQ4d68) #772=(case-lambda . cQ4d66) #773=(lambda . cQ4d65) #774=(syntax . cQ4d64) #775=(syntax-case . cQ4d63) #776=(quote . cQ4d62) #777=(letrec-syntax . cQ4d60) #778=(let-syntax . cQ4d5f) #779=(set! . cQ4d5e) #780=(import . cQ4d5d) #781=(begin . cQ4d5c) #782=(define-syntax . cQ4d5a) #783=(define . cQ4d59)) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5104 '(psyntax null-environment-5) '() '() '() '() '(#784=(make-promise . cQ4f5c) #741# #742# #743# #744# #745# #746# #785=(delay . cQ4d81) #750# #751# #752# #758# #759# #763# #766# #767# #768# #769# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5105 '(psyntax scheme-report-environment-5) '() '() '() '() '(#95# #96# #97# #98# #99# #100# #101# #103# #104# #106# #109# #110# #111# #112# #113# #114# #115# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #182# #184# #185# #186# #187# #786=(scheme-report-environment . cQ3157) #787=(quotient . cQ4f62) #788=(null-environment . cQ3155) #789=(remainder . cQ4f61) #790=(modulo . cQ4f60) #791=(inexact->exact . cQ4f5f) #792=(force . cQ4f5e) #793=(exact->inexact . cQ4f5d) #784# #275# #276# #277# #278# #284# #285# #287# #295# #296# #298# #308# #531# #532# #533# #534# #536# #538# #539# #540# #541# #542# #543# #544# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #569# #570# #571# #573# #574# #575# #576# #577# #578# #579# #581# #582# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #603# #605# #607# #608# #609# #610# #612# #613# #614# #617# #619# #620# #621# #622# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #676# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #741# #742# #744# #745# #746# #785# #750# #751# #752# #758# #759# #763# #766# #767# #768# #769# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5106 '(psyntax modules) '() '() '() '() '(#794=(module . cQ4d5b)) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5107 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5108 '(rnrs) '#795=(6) '() '() '() '(#1# #87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114# #115# #116# #117# #118# #119# #120# #121# #122# #123# #124# #125# #126# #127# #128# #129# #130# #131# #132# #133# #134# #135# #136# #137# #138# #139# #140# #141# #142# #143# #144# #145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #241# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #273# #274# #279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297# #298# #299# #300# #301# #302# #303# #304# #305# #306# #307# #310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513# #514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530# #531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# #738# #739# #740# #741# #742# #743# #744# #745# #746# #747# #748# #750# #751# #752# #753# #754# #755# #756# #757# #758# #759# #761# #762# #763# #764# #765# #766# #767# #768# #769# #770# #771# #772# #773# #774# #775# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5109 '(rnrs r5rs) '#795# '() '() '() '(#786# #787# #788# #789# #790# #791# #792# #793# #784# #785#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ510a '(rnrs control) '#795# '() '() '() '(#750# #764# #765# #772#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ510b '(rnrs eval) '#795# '() '() '() '(#308# #309#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ510c '(rnrs mutable-pairs) '#795# '() '() '() '(#277# #278#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ510d '(rnrs mutable-strings) '#795# '() '() '() '(#275# #276#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ510e '(rnrs programs) '#795# '() '() '() '(#273# #274#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ510f '(rnrs syntax-case) '#795# '() '() '() '(#116# #117# #118# #119# #120# #121# #122# #330# #739# #740# #743# #746# #756# #757# #774# #775#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5110 '(rnrs files) '#795# '() '() '() '(#140# #141# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5111 '(rnrs sorting) '#795# '() '() '() '(#142# #143# #144#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5112 '(rnrs base) '#795# '() '() '() '(#531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #741# #742# #743# #744# #745# #746# #747# #751# #752# #753# #754# #755# #758# #759# #763# #766# #767# #768# #769# #770# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5113 '(rnrs lists) '#795# '() '() '() '(#279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297# #298#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5114 '(rnrs io simple) '#795# '() '() '() '(#166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5115 '(rnrs bytevectors) '#795# '() '() '() '(#241# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #748#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5116 '(rnrs unicode) '#795# '() '() '() '(#87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114# #115#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5117 '(rnrs exceptions) '#795# '() '() '() '(#305# #306# #307# #738# #744# #745#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5118 '(rnrs arithmetic bitwise) '#795# '() '() '() '(#514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5119 '(rnrs arithmetic fixnums) '#795# '() '() '() '(#469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ511a '(rnrs arithmetic flonums) '#795# '() '() '() '(#419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #694# #695#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ511b '(rnrs hashtables) '#795# '() '() '() '(#145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ511c '(rnrs io ports) '#795# '() '() '() '(#181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #299# #300# #301# #302# #303# #304# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #734# #735# #736# #737#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ511d '(rnrs enums) '#795# '() '() '() '(#310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #723#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ511e '(rnrs conditions) '#795# '() '() '() '(#323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ511f '(rnrs records inspection) '#795# '() '() '() '(#130# #131# #132# #133# #134# #135# #136# #137# #138# #139#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5120 '(rnrs records procedural) '#795# '() '() '() '(#123# #124# #125# #126# #127# #128# #129#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5121 '(rnrs records syntactic) '#795# '() '() '() '(#724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #761# #762#) '() values values '#f '#f '#t '#f) (cQ2cae@cQ2aea@install-library 'cQ5122 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . cQ5102) (&no-nans-rtd . cQ5101) (&no-infinities-rcd . cQ5100) (&no-infinities-rtd . cQ50ff) (&i/o-encoding-rcd . cQ50fe) (&i/o-encoding-rtd . cQ50fd) (&i/o-decoding-rcd . cQ50fc) (&i/o-decoding-rtd . cQ50fb) (&i/o-port-rcd . cQ50fa) (&i/o-port-rtd . cQ50f9) (&i/o-file-does-not-exist-rcd . cQ50f8) (&i/o-file-does-not-exist-rtd . cQ50f7) (&i/o-file-already-exists-rcd . cQ50f6) (&i/o-file-already-exists-rtd . cQ50f5) (&i/o-file-is-read-only-rcd . cQ50f4) (&i/o-file-is-read-only-rtd . cQ50f3) (&i/o-file-protection-rcd . cQ50f2) (&i/o-file-protection-rtd . cQ50f1) (&i/o-filename-rcd . cQ50f0) (&i/o-filename-rtd . cQ50ef) (&i/o-invalid-position-rcd . cQ50ee) (&i/o-invalid-position-rtd . cQ50ed) (&i/o-write-rcd . cQ50ec) (&i/o-write-rtd . cQ50eb) (&i/o-read-rcd . cQ50ea) (&i/o-read-rtd . cQ50e9) (&i/o-rcd . cQ50e8) (&i/o-rtd . cQ50e7) (&undefined-rcd . cQ50e6) (&undefined-rtd . cQ50e5) (&syntax-rcd . cQ50e4) (&syntax-rtd . cQ50e3) (&lexical-rcd . cQ50e2) (&lexical-rtd . cQ50e1) (&implementation-restriction-rcd . cQ50e0) (&implementation-restriction-rtd . cQ50df) (&non-continuable-rcd . cQ50de) (&non-continuable-rtd . cQ50dd) (&who-rcd . cQ50dc) (&who-rtd . cQ50db) (&irritants-rcd . cQ50da) (&irritants-rtd . cQ50d9) (&assertion-rcd . cQ50d8) (&assertion-rtd . cQ50d7) (&violation-rcd . cQ50d6) (&violation-rtd . cQ50d5) (&error-rcd . cQ50d4) (&error-rtd . cQ50d3) (&serious-rcd . cQ50d2) (&serious-rtd . cQ50d1) (&warning-rcd . cQ50d0) (&warning-rtd . cQ50cf) (&message-rcd . cQ50ce) (&message-rtd . cQ50cd) (&condition-rcd . cQ50cc) (&condition-rtd . cQ50cb) (syntax-error . cQ3177) (syntax-dispatch . cQ309b) #796=(pretty-print . cQ50ca) #797=(eval-core . cQ50c9) #798=(set-symbol-value! . cQ50c8) #799=(symbol-value . cQ50c7) #800=(gensym . cQ50c6) #801=(void . cQ50c5) (load . cQ4c02) (interaction-environment . cQ3189) (char-ready? . cQ50c4) #1# #802=(read-line . cQ50c2) #803=(gensym-prefix-set! . cQ50c1) #804=(ungensym . cQ50c0) #2# #805=(assoc-ref . cQ50be) #806=(print . cQ50bd) #3# #807=(host-os . cQ50bb) #808=(library-path . cQ2ac9) #809=(standard-library-path . cQ50ba) #810=(file-newer? . cQ50b9) #811=(stat-mtime . cQ50b8) #812=(write-to-file . cQ50b7) #813=(file->sexp-list . cQ50b6) #814=(file->list . cQ50b5) #815=(file->string . cQ50b4) #816=(digit->integer . cQ50b3) #817=(call-with-string-input-port . cQ50b2) #818=(call-with-string-io . cQ50b1) #4# #819=(bytevector-for-each . cQ50af) #820=(string->regexp . cQ50ae) #821=(rxmatch . cQ50ad) #822=(regexp-replace-all . cQ50ac) #823=(hashtable-for-each . cQ50ab) #824=(mosh-cache-dir . cQ28b3) #5# #825=(local-tz-offset . cQ50a9) #826=(microseconds . cQ50a8) #827=(directory-list . cQ50a7) #6# #7# #8# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #828=(get-c-address . cQ5073) #829=(set-jit-compiled! . cQ5072) #830=(jit-compiled? . cQ5071) #831=(obj->integer . cQ5070) #832=(u8-list->c-procedure . cQ506f) #833=(%ffi-free-c-callback-trampoline . cQ506e) #834=(%ffi-make-c-callback-trampoline . cQ506d) #835=(%ffi-free . cQ506c) #836=(%ffi-malloc . cQ506b) #57# #58# #59# #60# #61# #62# #63# #64# #65# #66# #67# #837=(open-output-string . cQ505f) #838=(get-output-string . cQ505e) #839=(file-stat-ctime . cQ505d) #840=(file-stat-atime . cQ505c) #841=(file-stat-mtime . cQ505b) #842=(file-size-in-bytes . cQ505a) #843=(file-writable? . cQ5059) #844=(file-executable? . cQ5058) #845=(file-readable? . cQ5057) #846=(file-regular? . cQ5056) #847=(file-symbolic-link? . cQ5055) #848=(file-directory? . cQ5054) #849=(create-symbolic-link . cQ5053) #850=(rename-file . cQ5052) #851=(delete-directory . cQ5051) #852=(create-directory . cQ5050) #853=(create-mosh-cache-dir . cQ504f) #854=(get-environment-variables . cQ504e) #855=(current-exception-handler . cQ504d) #856=(get-environment-variable . cQ504c) #857=(join-wraps . cQ504b) #858=(id->real-label . cQ504a) #859=(same-marks? . cQ5049) #860=(same-marks*? . cQ5048) #861=(get-timeofday . cQ5047) #862=(get-command-line . cQ5046) #863=(sys-display . cQ5045) #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #86# #864=(mosh-executable-path . cQ5031) #865=(make-file-options . cQ5030) #866=(for-each-with-index . cQ502f) #867=(source-info . cQ502e) #868=(instruction? . cQ502d) #869=(instruction->integer . cQ502c) #870=(instruction->symbol . cQ502b) #871=(closure->list . cQ502a) #872=(make-compiler-instruction . cQ5029) #873=(make-instruction . cQ5028) #874=(set-source-info! . cQ5027) #875=(bignum? . cQ5026) #876=(fast-equal? . cQ5025) #877=(fasl-read . cQ5024) #878=(fasl-write . cQ5023) #879=(time-usage . cQ5022) #880=(os-constant . cQ5021) #881=(disasm . cQ5020) #882=(make-parameter . cQ28b1) #883=(socket-port . cQ501f) #884=(socket-shutdown . cQ501e) #885=(socket-close . cQ501d) #886=(socket-send . cQ501c) #887=(socket-recv! . cQ501b) #888=(socket-recv . cQ501a) #889=(make-server-socket . cQ5019) #890=(make-client-socket . cQ5018) #891=(socket-accept . cQ5017) #892=(socket? . cassertion-error . cQ3175) #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #693# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# #738# (trace-define . cQ4d8d) (trace-lambda . cQ4d8c) #739# #740# #741# #742# #743# #744# #745# #746# #747# #748# #785# #749# #750# #751# #752# #753# #754# #755# #756# #757# #758# #759# #760# (define-struct . cQ4d74) #761# #762# #763# #893=(parameterize . cQ4d70) #764# #765# #766# #767# #768# #769# #770# #771# (type-descriptor . cQ4d67) #772# #773# #774# #775# #776# (foreign-call . cQ4d61) #777# #778# #779# #780# #781# #794# #782# #783#) '((cQ5102 core-prim . &no-nans-rcd) (cQ5101 core-prim . &no-nans-rtd) (cQ5100 core-prim . &no-infinities-rcd) (cQ50ff core-prim . &no-infinities-rtd) (cQ50fe core-prim . &i/o-encoding-rcd) (cQ50fd core-prim . &i/o-encoding-rtd) (cQ50fc core-prim . &i/o-decoding-rcd) (cQ50fb core-prim . &i/o-decoding-rtd) (cQ50fa core-prim . &i/o-port-rcd) (cQ50f9 core-prim . &i/o-port-rtd) (cQ50f8 core-prim . &i/o-file-does-not-exist-rcd) (cQ50f7 core-prim . &i/o-file-does-not-exist-rtd) (cQ50f6 core-prim . &i/o-file-already-exists-rcd) (cQ50f5 core-prim . &i/o-file-already-exists-rtd) (cQ50f4 core-prim . &i/o-file-is-read-only-rcd) (cQ50f3 core-prim . &i/o-file-is-read-only-rtd) (cQ50f2 core-prim . &i/o-file-protection-rcd) (cQ50f1 core-prim . &i/o-file-protection-rtd) (cQ50f0 core-prim . &i/o-filename-rcd) (cQ50ef core-prim . &i/o-filename-rtd) (cQ50ee core-prim . &i/o-invalid-position-rcd) (cQ50ed core-prim . &i/o-invalid-position-rtd) (cQ50ec core-prim . &i/o-write-rcd) (cQ50eb core-prim . &i/o-write-rtd) (cQ50ea core-prim . &i/o-read-rcd) (cQ50e9 core-prim . &i/o-read-rtd) (cQ50e8 core-prim . &i/o-rcd) (cQ50e7 core-prim . &i/o-rtd) (cQ50e6 core-prim . &undefined-rcd) (cQ50e5 core-prim . &undefined-rtd) (cQ50e4 core-prim . &syntax-rcd) (cQ50e3 core-prim . &syntax-rtd) (cQ50e2 core-prim . &lexical-rcd) (cQ50e1 core-prim . &lexical-rtd) (cQ50e0 core-prim . &implementation-restriction-rcd) (cQ50df core-prim . &implementation-restriction-rtd) (cQ50de core-prim . &non-continuable-rcd) (cQ50dd core-prim . &non-continuable-rtd) (cQ50dc core-prim . &who-rcd) (cQ50db core-prim . &who-rtd) (cQ50da core-prim . &irritants-rcd) (cQ50d9 core-prim . &irritants-rtd) (cQ50d8 core-prim . &assertion-rcd) (cQ50d7 core-prim . &assertion-rtd) (cQ50d6 core-prim . &violation-rcd) (cQ50d5 core-prim . &violation-rtd) (cQ50d4 core-prim . &error-rcd) (cQ50d3 core-prim . &error-rtd) (cQ50d2 core-prim . &serious-rcd) (cQ50d1 core-prim . &serious-rtd) (cQ50d0 core-prim . &warning-rcd) (cQ50cf core-prim . &warning-rtd) (cQ50ce core-prim . &message-rcd) (cQ50cd core-prim . &message-rtd) (cQ50cc core-prim . &condition-rcd) (cQ50cb core-prim . &condition-rtd) (cQ3177 core-prim . syntax-error) (cQ309b core-prim . syntax-dispatch) (cQ50ca core-prim . pretty-print) (cQ50c9 core-prim . eval-core) (cQ50c8 core-prim . set-symbol-value!) (cQ50c7 core-prim . symbol-value) (cQ50c6 core-prim . gensym) (cQ50c5 core-prim . void) (cQ4c02 core-prim . load) (cQ3189 core-prim . interaction-environment) (cQ50c4 core-prim . char-ready?) (cQ50c3 core-prim . regexp?) (cQ50c2 core-prim . read-line) (cQ50c1 core-prim . gensym-prefix-set!) (cQ50c0 core-prim . ungensym) (cQ50bf core-prim . alist->eq-hash-table) (cQ50be core-prim . assoc-ref) (cQ50bd core-prim . print) (cQ50bc core-prim . format) (cQ50bb core-prim . host-os) (cQ2ac9 core-prim . library-path) (cQ50ba core-prim . standard-library-path) (cQ50b9 core-prim . file-newer?) (cQ50b8 core-prim . stat-mtime) (cQ50b7 core-prim . write-to-file) (cQ50b6 core-prim . file->sexp-list) (cQ50b5 core-prim . file->list) (cQ50b4 core-prim . file->string) (cQ50b3 core-prim . digit->integer) (cQ50b2 core-prim . call-with-string-input-port) (cQ50b1 core-prim . call-with-string-io) (cQ50b0 core-prim . string-split) (cQ50af core-prim . bytevector-for-each) (cQ50ae core-prim . string->regexp) (cQ50ad core-prim . rxmatch) (cQ50ac core-prim . regexp-replace-all) (cQ50ab core-prim . hashtable-for-each) (cQ28b3 core-prim . mosh-cache-dir) (cQ50aa core-prim . call-process) (cQ50a9 core-prim . local-tz-offset) (cQ50a8 core-prim . microseconds) (cQ50a7 core-prim . directory-list) (cQ50a6 core-prim . set-current-directory!) (cQ50a5 core-prim . expand-path) (cQ50a4 core-prim . current-directory) (cQ50a3 core-prim . %spawn) (cQ50a2 core-prim . %waitpid) (cQ50a1 core-prim . simple-struct-name) (cQ50a0 core-prim . simple-struct-set!) (cQ509f core-prim . simple-struct-ref) (cQ509e core-prim . make-simple-struct) (cQ509d core-prim . simple-struct?) (cQ509c core-prim . pointer-ref-c-int64) (cQ509b core-prim . pointer-ref-c-int32) (cQ509a core-prim . pointer-ref-c-int16) (cQ5099 core-prim . pointer-ref-c-int8) (cQ5098 core-prim . pointer-ref-c-uint64) (cQ5097 core-prim . pointer-ref-c-uint32) (cQ5096 core-prim . pointer-ref-c-uint16) (cQ5095 core-prim . pointer-ref-c-uint8) (cQ5094 core-prim . pointer-set-c-uint64!) (cQ5093 core-prim . pointer-set-c-uint32!) (cQ5092 core-prim . pointer-set-c-uint16!) (cQ5091 core-prim . pointer-set-c-uint8!) (cQ5090 core-prim . pointer-set-c-int64!) (cQ508f core-prim . pointer-set-c-int32!) (cQ508e core-prim . pointer-set-c-int16!) (cQ508d core-prim . pointer-set-c-int8!) (cQ508c core-prim . pointer-set-c-pointer!) (cQ508b core-prim . pointer-set-c-double!) (cQ508a core-prim . pointer-set-c-float!) (cQ5089 core-prim . pointer-set-c-long-long!) (cQ5088 core-prim . pointer-set-c-long!) (cQ5087 core-prim . pointer-set-c-int!) (cQ5086 core-prim . pointer-set-c-short!) (cQ5085 core-prim . pointer-set-c-char!) (cQ5084 core-prim . pointer-ref-c-pointer) (cQ5083 core-prim . pointer-ref-c-double) (cQ5082 core-prim . pointer-ref-c-float) (cQ5081 core-prim . pointer-ref-c-unsigned-long-long) (cQ5080 core-prim . pointer-ref-c-signed-long-long) (cQ507f core-prim . pointer-ref-c-unsigned-long) (cQ507e core-prim . pointer-ref-c-signed-long) (cQ507d core-prim . pointer-ref-c-unsigned-int) (cQ507c core-prim . pointer-ref-c-signed-int) (cQ507b core-prim . pointer-ref-c-unsigned-short) (cQ507a core-prim . pointer-ref-c-signed-short) (cQ5079 core-prim . pointer-ref-c-unsigned-char) (cQ5078 core-prim . pointer-ref-c-signed-char) (cQ5077 core-prim . pointer->integer) (cQ5076 core-prim . integer->pointer) (cQ5075 core-prim . pointer?) (cQ5074 core-prim . shared-errno) (cQ5073 core-prim . get-c-address) (cQ5072 core-prim . set-jit-compiled!) (cQ5071 core-prim . jit-compiled?) (cQ5070 core-prim . obj->integer) (cQ506f core-prim . u8-list->c-procedure) (cQ506e core-prim . %ffi-free-c-callback-trampoline) (cQ506d core-prim . %ffi-make-c-callback-trampoline) (cQ506c core-prim . %ffi-free) (cQ506b core-prim . %ffi-malloc) (cQ506a core-prim . %ffi-supported?) (cQ5069 core-prim . %ffi-pointer->string) (cQ5068 core-prim . %ffi-call) (cQ5067 core-prim . %ffi-lookup) (cQ5066 core-prim . %ffi-open) (cQ5065 core-prim . null-terminated-utf8->string) (cQ5064 core-prim . null-terminated-bytevector->string) (cQ5063 core-prim . %exec) (cQ5062 core-prim . %fork) (cQ5061 core-prim . %pipe) (cQ5060 core-prim . p) (cQ505f core-prim . open-output-string) (cQ505e core-prim . get-output-string) (cQ505d core-prim . file-stat-ctime) (cQ505c core-prim . file-stat-atime) (cQ505b core-prim . file-stat-mtime) (cQ505a core-prim . file-size-in-bytes) (cQ5059 core-prim . file-writable?) (cQ5058 core-prim . file-executable?) (cQ5057 core-prim . file-readable?) (cQ5056 core-prim . file-regular?) (cQ5055 core-prim . file-symbolic-link?) (cQ5054 core-prim . file-directory?) (cQ5053 core-prim . create-symbolic-link) (cQ5052 core-prim . rename-file) (cQ5051 core-prim . delete-directory) (cQ5050 core-prim . create-directory) (cQ504f core-prim . create-mosh-cache-dir) (cQ504e core-prim . get-environment-variables) (cQ504d core-prim . current-exception-handler) (cQ504c core-prim . get-environment-variable) (cQ504b core-prim . join-wraps) (cQ504a core-prim . id->real-label) (cQ5049 core-prim . same-marks?) (cQ5048 core-prim . same-marks*?) (cQ5047 core-prim . get-timeofday) (cQ5046 core-prim . get-command-line) (cQ5045 core-prim . sys-display) (cQ5044 core-prim . whereis) (cQ5043 core-prim . register) (cQ5042 core-prim . vm-join!) (cQ5041 core-prim . vm-set-value!) (cQ5040 core-prim . vm?) (cQ503f core-prim . main-vm?) (cQ503e core-prim . vm-eval) (cQ503d core-prim . vm-self) (cQ503c core-prim . vm-start!) (cQ503b core-prim . make-vm) (cQ503a core-prim . mutex-try-lock!) (cQ5039 core-prim . mutex-unlock!) (cQ5038 core-prim . mutex-lock!) (cQ5037 core-prim . mutex?) (cQ5036 core-prim . make-mutex) (cQ5035 core-prim . condition-variable-notify-all!) (cQ5034 core-prim . condition-variable-notify!) (cQ5033 core-prim . condition-variable-wait!) (cQ5032 core-prim . make-condition-variable) (cQ5031 core-prim . mosh-executable-path) (cQ5030 core-prim . make-file-options) (cQ502f core-prim . for-each-with-index) (cQ502e core-prim . source-info) (cQ502d core-prim . instruction?) (cQ502c core-prim . instruction->integer) (cQ502b core-prim . instruction->symbol) (cQ502a core-prim . closure->list) (cQ5029 core-prim . make-compiler-instruction) (cQ5028 core-prim . make-instruction) (cQ5027 core-prim . set-source-info!) (cQ5026 core-prim . bignum?) (cQ5025 core-prim . fast-equal?) (cQ5024 core-prim . fasl-read) (cQ5023 core-prim . fasl-write) (cQ5022 core-prim . time-usage) (cQ5021 core-prim . os-constant) (cQ5020 core-prim . disasm) (cQ28b1 core-prim . make-parameter) (cQ501f core-prim . socket-port) (cQ501e core-prim . socket-shutdown) (cQ501d core-prim . socket-close) (cQ501c core-prim . socket-send) (cQ501b core-prim . socket-recv!) (cQ501a core-prim . socket-recv) (cQ5019 core-prim . make-server-socket) (cQ5018 core-prim . make-client-socket) (cQ5017 core-prim . socket-accept) (cQ5016 core-prim . socket?) (cQ5015 core-prim . string-upcase) (cQ5014 core-prim . string-titlecase) (cQ5013 core-prim . string-normalize-nfkd) (cQ5012 core-prim . string-normalize-nfkc) (cQ5011 core-prim . string-normalize-nfd) (cQ5010 core-prim . string-normalize-nfc) (cQ500f core-prim . string-foldcase) (cQ500e core-prim . string-downcase) (cQ500d core-prim . string-ci>?) (cQ500c core-prim . string-ci>=?) (cQ500b core-prim . string-ci=?) (cQ500a core-prim . string-ci<?) (cQ5009 core-prim . string-ci<=?) (cQ5008 core-prim . char-whitespace?) (cQ5007 core-prim . char-upper-case?) (cQ5006 core-prim . char-title-case?) (cQ5005 core-prim . char-numeric?) (cQ5004 core-prim . char-lower-case?) (cQ5003 core-prim . char-general-category) (cQ5002 core-prim . char-upcase) (cQ5001 core-prim . char-titlecase) (cQ5000 core-prim . char-foldcase) (cQ4fff core-prim . char-downcase) (cQ4ffe core-prim . char-ci>?) (cQ4ffd core-prim . char-ci>=?) (cQ4ffc core-prim . char-ci=?) (cQ4ffb core-prim . char-ci<?) (cQ4ffa core-prim . char-ci<=?) (cQ4ff9 core-prim . char-alphabetic?) (cQ2ec6 core-prim . make-variable-transformer) (cQ317d core-prim . identifier?) (cQ3169 core-prim . generate-temporaries) (cQ316b core-prim . free-identifier=?) (cQ3181 core-prim . syntax->datum) (cQ317f core-prim . datum->syntax) (cQ316d core-prim . bound-identifier=?) (cQ4ff8 core-prim . record-type-descriptor?) (cQ4ff7 core-prim . record-predicate) (cQ4ff6 core-prim . record-mutator) (cQ4ff5 core-prim . record-constructor) (cQ4ff4 core-prim . record-accessor) (cQ4ff3 core-prim . make-record-type-descriptor) (cQ4ff2 core-prim . make-record-constructor-descriptor) (cQ4ff1 core-prim . record?) (cQ4ff0 core-prim . record-type-uid) (cQ4fef core-prim . record-type-sealed?) (cQ4fee core-prim . record-type-parent) (cQ4fed core-prim . record-type-opaque?) (cQ4fec core-prim . record-type-name) (cQ4feb core-prim . record-type-generative?) (cQ4fea core-prim . record-type-field-names) (cQ4fe9 core-prim . record-rtd) (cQ4fe8 core-prim . record-field-mutable?) (cQ4fe7 core-prim . delete-file) (cQ4fe6 core-prim . file-exists?) (cQ4fe5 core-prim . vector-sort!) (cQ4fe4 core-prim . vector-sort) (cQ4fe3 core-prim . list-sort) (cQ4fe2 core-prim . symbol-hash) (cQ4fe1 core-prim . string-ci-hash) (cQ4fe0 core-prim . string-hash) (cQ4fdf core-prim . equal-hash) (cQ4fde core-prim . hashtable-equivalence-function) (cQ4fdd core-prim . make-hashtable) (cQ4fdc core-prim . hashtable-hash-function) (cQ4fdb core-prim . make-eqv-hashtable) (cQ4fda core-prim . make-eq-hashtable) (cQ4fd9 core-prim . hashtable?) (cQ4fd8 core-prim . hashtable-update!) (cQ4fd7 core-prim . hashtable-size) (cQ4fd6 core-prim . hashtable-set!) (cQ4fd5 core-prim . hashtable-ref) (cQ4fd4 core-prim . hashtable-mutable?) (cQ4fd3 core-prim . hashtable-keys) (cQ4fd2 core-prim . hashtable-entries) (cQ4fd1 core-prim . hashtable-delete!) (cQ4fd0 core-prim . hashtable-copy) (cQ4fcf core-prim . hashtable-contains?) (cQ4fce core-prim . hashtable-clear!) (cQ4fcd core-prim . call-with-output-file) (cQ4fcc core-prim . call-with-input-file) (cQ4fcb core-prim . write-char) (cQ4fca core-prim . write) (cQ4fc9 core-prim . with-output-to-file) (cQ4fc8 core-prim . with-input-from-file) (cQ4fc7 core-prim . read-char) (cQ4fc6 core-prim . read) (cQ4fc5 core-prim . peek-char) (cQ4fc4 core-prim . open-output-file) (cQ4fc3 core-prim . open-input-file) (cQ4fc2 core-prim . newline) (cQ4fc1 core-prim . display) (cQ4fc0 core-prim . close-output-port) (cQ4fbf core-prim . close-input-port) (cQ4fbe core-prim . eof-object?) (cQ4fbd core-prim . eof-object) (cQ4fbc core-prim . current-error-port) (cQ4fbb core-prim . current-output-port) (cQ4fba core-prim . current-input-port) (cQ4fb9 core-prim . output-port?) (cQ4fb8 core-prim . input-port?) (cQ4fb7 core-prim . utf-8-codec) (cQ4fb6 core-prim . utf-16-codec) (cQ4fb5 core-prim . transcoder-error-handling-mode) (cQ4fb4 core-prim . transcoder-eol-style) (cQ4fb3 core-prim . transcoder-codec) (cQ4fb2 core-prim . transcoded-port) (cQ4fb1 core-prim . textual-port?) (cQ4fb0 core-prim . string->bytevector) (cQ4faf core-prim . standard-output-port) (cQ4fae core-prim . standard-input-port) (cQ4fad core-prim . standard-error-port) (cQ4fac core-prim . set-port-position!) (cQ4fab core-prim . put-u8) (cQ4faa core-prim . put-string) (cQ4fa9 core-prim . put-datum) (cQ4fa8 core-prim . put-char) (cQ4fa7 core-prim . put-bytevector) (cQ4fa6 core-prim . port?) (cQ4fa5 core-prim . port-transcoder) (cQ4fa4 core-prim . port-position) (cQ4fa3 core-prim . port-has-set-port-position!?) (cQ4fa2 core-prim . port-has-port-position?) (cQ4fa1 core-prim . port-eof?) (cQ4fa0 core-prim . output-port-buffer-mode) (cQ4f9f core-prim . open-string-output-port) (cQ4f9e core-prim . open-string-input-port) (cQ4f9d core-prim . open-file-output-port) (cQ4f9c core-prim . open-file-input/output-port) (cQ4f9b core-prim . open-file-input-port) (cQ4f9a core-prim . open-bytevector-output-port) (cQ4f99 core-prim . open-bytevector-input-port) (cQ4f98 core-prim . native-transcoder) (cQ4f97 core-prim . native-eol-style) (cQ4f96 core-prim . make-transcoder) (cQ4f95 core-prim . latin-1-codec) (cQ4f94 core-prim . make-i/o-write-error) (cQ4f93 core-prim . make-i/o-read-error) (cQ4f92 core-prim . make-i/o-port-error) (cQ4f91 core-prim . make-i/o-invalid-position-error) (cQ4f90 core-prim . make-i/o-filename-error) (cQ4f8f core-prim . make-i/o-file-protection-error) (cQ4f8e core-prim . make-i/o-file-is-read-only-error) (cQ4f8d core-prim . make-i/o-file-does-not-exist-error) (cQ4f8c core-prim . make-i/o-file-already-exists-error) (cQ4f8b core-prim . make-i/o-error) (cQ4f8a core-prim . make-i/o-encoding-error) (cQ4f89 core-prim . make-i/o-decoding-error) (cQ4f88 core-prim . make-custom-textual-output-port) (cQ4f87 core-prim . make-custom-textual-input/output-port) (cQ4f86 core-prim . make-custom-textual-input-port) (cQ4f85 core-prim . make-custom-binary-output-port) (cQ4f84 core-prim . make-custom-binary-input/output-port) (cQ4f83 core-prim . make-custom-binary-input-port) (cQ4f82 core-prim . make-bytevector) (cQ4f81 core-prim . lookahead-u8) (cQ4f80 core-prim . lookahead-char) (cQ4f7f core-prim . i/o-write-error?) (cQ4f7e core-prim . i/o-read-error?) (cQ4f7d core-prim . i/o-port-error?) (cQ4f7c core-prim . i/o-invalid-position-error?) (cQ4f7b core-prim . i/o-filename-error?) (cQ4f7a core-prim . i/o-file-protection-error?) (cQ4f79 core-prim . i/o-file-is-read-only-error?) (cQ4f78 core-prim . i/o-file-does-not-exist-error?) (cQ4f77 core-prim . i/o-file-already-exists-error?) (cQ4f76 core-prim . i/o-error?) (cQ4f75 core-prim . i/o-error-position) (cQ4f74 core-prim . i/o-error-port) (cQ4f73 core-prim . i/o-error-filename) (cQ4f72 core-prim . i/o-encoding-error?) (cQ4f71 core-prim . i/o-encoding-error-char) (cQ4f70 core-prim . i/o-decoding-error?) (cQ4f6f core-prim . get-u8) (cQ4f6e core-prim . get-string-n!) (cQ4f6d core-prim . get-string-n) (cQ4f6c core-prim . get-string-all) (cQ4f6b core-prim . get-line) (cQ4f6a core-prim . get-datum) (cQ4f69 core-prim . get-char) (cQ4f68 core-prim . get-bytevector-some) (cQ4f67 core-prim . get-bytevector-n!) (cQ4f66 core-prim . get-bytevector-n) (cQ4f65 core-prim . get-bytevector-all) (cQ4f64 core-prim . flush-output-port) (cQ4f63 core-prim . close-port) (cQ3157 core-prim . scheme-report-environment) (cQ4f62 core-prim . quotient) (cQ3155 core-prim . null-environment) (cQ4f61 core-prim . remainder) (cQ4f60 core-prim . modulo) (cQ4f5f core-prim . inexact->exact) (cQ4f5e core-prim . force) (cQ4f5d core-prim . exact->inexact) (cQ4f5c core-prim . make-promise) (cQ4f5b core-prim . exit) (cQ4bfc core-prim . command-line) (cQ4f5a core-prim . string-fill!) (cQ4f59 core-prim . string-set!) (cQ4f58 core-prim . set-cdr!) (cQ4f57 core-prim . set-car!) (cQ4f56 core-prim . remove) (cQ4f55 core-prim . remv) (cQ4f54 core-prim . remp) (cQ4f53 core-prim . remq) (cQ4f52 core-prim . partition) (cQ4f51 core-prim . memv) (cQ4f50 core-prim . memq) (cQ4f4f core-prim . memp) (cQ4f4e core-prim . member) (cQ4f4d core-prim . exists) (cQ4f4c core-prim . for-all) (cQ4f4b core-prim . fold-right) (cQ4f4a core-prim . fold-left) (cQ4f49 core-prim . find) (cQ4f48 core-prim . filter) (cQ4f47 core-prim . cons*) (cQ4f46 core-prim . assv) (cQ4f45 core-prim . assq) (cQ4f44 core-prim . assp) (cQ4f43 core-prim . assoc) (cQ4f42 core-prim . call-with-string-output-port) (cQ4f41 core-prim . call-with-port) (cQ4f40 core-prim . call-with-bytevector-output-port) (cQ4f3f core-prim . bytevector->string) (cQ4f3e core-prim . buffer-mode?) (cQ4f3d core-prim . binary-port?) (cQ4f3c core-prim . with-exception-handler) (cQ4f3b core-prim . raise-continuable) (cQ4f3a core-prim . raise) (cQ315b core-prim . eval) (cQ3153 core-prim . environment) (cQ4f39 core-prim . make-enumeration) (cQ4f38 core-prim . enum-set=?) (cQ4f37 core-prim . enum-set-universe) (cQ4f36 core-prim . enum-set-union) (cQ4f35 core-prim . enum-set-subset?) (cQ4f34 core-prim . enum-set-projection) (cQ4f33 core-prim . enum-set-member?) (cQ4f32 core-prim . enum-set-intersection) (cQ4f31 core-prim . enum-set-indexer) (cQ4f30 core-prim . enum-set-difference) (cQ4f2f core-prim . enum-set-constructor) (cQ4f2e core-prim . enum-set-complement) (cQ4f2d core-prim . enum-set->list) (cQ4f2c core-prim . who-condition?) (cQ4f2b core-prim . warning?) (cQ4f2a core-prim . violation?) (cQ4f29 core-prim . undefined-violation?) (cQ4f28 core-prim . syntax-violation?) (cQ4f27 core-prim . syntax-violation-subform) (cQ4f26 core-prim . syntax-violation-form) (cQ317b core-prim . syntax-violation) (cQ4f25 core-prim . simple-conditions) (cQ4f24 core-prim . serious-condition?) (cQ4f23 core-prim . non-continuable-violation?) (cQ4f22 core-prim . message-condition?) (cQ4f21 core-prim . make-who-condition) (cQ4f20 core-prim . make-warning) (cQ4f1f core-prim . make-violation) (cQ4f1e core-prim . make-undefined-violation) (cQ4f1d core-prim . make-syntax-violation) (cQ4f1c core-prim . make-serious-condition) (cQ4f1b core-prim . make-non-continuable-violation) (cQ4f1a core-prim . make-message-condition) (cQ4f19 core-prim . make-lexical-violation) (cQ4f18 core-prim . make-irritants-condition) (cQ4f17 core-prim . make-implementation-restriction-violation) (cQ4f16 core-prim . make-error) (cQ4f15 core-prim . make-assertion-violation) (cQ4f14 core-prim . lexical-violation?) (cQ4f13 core-prim . irritants-condition?) (cQ4f12 core-prim . implementation-restriction-violation?) (cQ4f11 core-prim . error?) (cQ4f10 core-prim . condition-who) (cQ4f0f core-prim . condition-predicate) (cQ4f0e core-prim . condition-message) (cQ4f0d core-prim . condition-irritants) (cQ4f0c core-prim . condition-accessor) (cQ4f0b core-prim . condition) (cQ4f0a core-prim . assertion-violation?) (cQ4f09 core-prim . condition?) (cQ4f08 core-prim . utf32->string) (cQ4f07 core-prim . utf16->string) (cQ4f06 core-prim . utf8->string) (cQ4f05 core-prim . uint-list->bytevector) (cQ4f04 core-prim . u8-list->bytevector) (cQ4f03 core-prim . string->utf8) (cQ4f02 core-prim . string->utf32) (cQ4f01 core-prim . string->utf16) (cQ4f00 core-prim . sint-list->bytevector) (cQ4eff core-prim . native-endianness) (cQ4efe core-prim . bytevector?) (cQ4efd core-prim . bytevector=?) (cQ4efc core-prim . bytevector-uint-set!) (cQ4efb core-prim . bytevector-uint-ref) (cQ4efa core-prim . bytevector-u8-set!) (cQ4ef9 core-prim . bytevector-u8-ref) (cQ4ef8 core-prim . bytevector-u64-set!) (cQ4ef7 core-prim . bytevector-u64-ref) (cQ4ef6 core-prim . bytevector-u64-native-set!) (cQ4ef5 core-prim . bytevector-u64-native-ref) (cQ4ef4 core-prim . bytevector-u32-set!) (cQ4ef3 core-prim . bytevector-u32-ref) (cQ4ef2 core-prim . bytevector-u32-native-set!) (cQ4ef1 core-prim . bytevector-u32-native-ref) (cQ4ef0 core-prim . bytevector-u16-set!) (cQ4eef core-prim . bytevector-u16-ref) (cQ4eee core-prim . bytevector-u16-native-set!) (cQ4eed core-prim . bytevector-u16-native-ref) (cQ4eec core-prim . bytevector-sint-set!) (cQ4eeb core-prim . bytevector-sint-ref) (cQ4eea core-prim . bytevector-s8-set!) (cQ4ee9 core-prim . bytevector-s8-ref) (cQ4ee8 core-prim . bytevector-s64-set!) (cQ4ee7 core-prim . bytevector-s64-ref) (cQ4ee6 core-prim . bytevector-s64-native-set!) (cQ4ee5 core-prim . bytevector-s64-native-ref) (cQ4ee4 core-prim . bytevector-s32-set!) (cQ4ee3 core-prim . bytevector-s32-ref) (cQ4ee2 core-prim . bytevector-s32-native-set!) (cQ4ee1 core-prim . bytevector-s32-native-ref) (cQ4ee0 core-prim . bytevector-s16-set!) (cQ4edf core-prim . bytevector-s16-ref) (cQ4ede core-prim . bytevector-s16-native-set!) (cQ4edd core-prim . bytevector-s16-native-ref) (cQ4edc core-prim . bytevector-length) (cQ4edb core-prim . bytevector-ieee-single-ref) (cQ4eda core-prim . bytevector-ieee-single-set!) (cQ4ed9 core-prim . bytevector-ieee-single-native-set!) (cQ4ed8 core-prim . bytevector-ieee-single-native-ref) (cQ4ed7 core-prim . bytevector-ieee-double-set!) (cQ4ed6 core-prim . bytevector-ieee-double-ref) (cQ4ed5 core-prim . bytevector-ieee-double-native-set!) (cQ4ed4 core-prim . bytevector-ieee-double-native-ref) (cQ4ed3 core-prim . bytevector-fill!) (cQ4ed2 core-prim . bytevector-copy!) (cQ4ed1 core-prim . bytevector-copy) (cQ4ed0 core-prim . bytevector->uint-list) (cQ4ecf core-prim . bytevector->u8-list) (cQ4ece core-prim . bytevector->sint-list) (cQ4ecd core-prim . no-nans-violation?) (cQ4ecc core-prim . no-infinities-violation?) (cQ4ecb core-prim . make-no-nans-violation) (cQ4eca core-prim . make-no-infinities-violation) (cQ4ec9 core-prim . real->flonum) (cQ4ec8 core-prim . flzero?) (cQ4ec7 core-prim . fltruncate) (cQ4ec6 core-prim . fltan) (cQ4ec5 core-prim . flsqrt) (cQ4ec4 core-prim . flsin) (cQ4ec3 core-prim . flround) (cQ4ec2 core-prim . flpositive?) (cQ4ec1 core-prim . flonum?) (cQ4ec0 core-prim . flodd?) (cQ4ebf core-prim . flnumerator) (cQ4ebe core-prim . flnegative?) (cQ4ebd core-prim . flnan?) (cQ4ebc core-prim . flmod0) (cQ4ebb core-prim . flmod) (cQ4eba core-prim . flmin) (cQ4eb9 core-prim . flmax) (cQ4eb8 core-prim . fllog) (cQ4eb7 core-prim . flinteger?) (cQ4eb6 core-prim . flinfinite?) (cQ4eb5 core-prim . flfloor) (cQ4eb4 core-prim . flfinite?) (cQ4eb3 core-prim . flexpt) (cQ4eb2 core-prim . flexp) (cQ4eb1 core-prim . fleven?) (cQ4eb0 core-prim . fldiv0-and-mod0) (cQ4eaf core-prim . fldiv0) (cQ4eae core-prim . fldiv-and-mod) (cQ4ead core-prim . fldiv) (cQ4eac core-prim . fldenominator) (cQ4eab core-prim . flcos) (cQ4eaa core-prim . flceiling) (cQ4ea9 core-prim . flatan) (cQ4ea8 core-prim . flasin) (cQ4ea7 core-prim . flacos) (cQ4ea6 core-prim . flabs) (cQ4ea5 core-prim . fl>?) (cQ4ea4 core-prim . fl>=?) (cQ4ea3 core-prim . fl=?) (cQ4ea2 core-prim . fl<?) (cQ4ea1 core-prim . fl<=?) (cQ4ea0 core-prim . fl/) (cQ4e9f core-prim . fl-) (cQ4e9e core-prim . fl+) (cQ4e9d core-prim . fl*) (cQ4e9c core-prim . fixnum->flonum) (cQ4e9b core-prim . fxzero?) (cQ4e9a core-prim . fxxor) (cQ4e99 core-prim . fxrotate-bit-field) (cQ4e98 core-prim . fxreverse-bit-field) (cQ4e97 core-prim . fxpositive?) (cQ4e96 core-prim . fxodd?) (cQ4e95 core-prim . fxnot) (cQ4e94 core-prim . fxnegative?) (cQ4e93 core-prim . fxmod0) (cQ4e92 core-prim . fxmod) (cQ4e91 core-prim . fxmin) (cQ4e90 core-prim . fxmax) (cQ4e8f core-prim . fxlength) (cQ4e8e core-prim . fxior) (cQ4e8d core-prim . fxif) (cQ4e8c core-prim . fxfirst-bit-set) (cQ4e8b core-prim . fxeven?) (cQ4e8a core-prim . fxdiv0-and-mod0) (cQ4e89 core-prim . fxdiv0) (cQ4e88 core-prim . fxdiv-and-mod) (cQ4e87 core-prim . fxdiv) (cQ4e86 core-prim . fxcopy-bit-field) (cQ4e85 core-prim . fxcopy-bit) (cQ4e84 core-prim . fxbit-set?) (cQ4e83 core-prim . fxbit-field) (cQ4e82 core-prim . fxbit-count) (cQ4e81 core-prim . fxarithmetic-shift-right) (cQ4e80 core-prim . fxarithmetic-shift-left) (cQ4e7f core-prim . fxarithmetic-shift) (cQ4e7e core-prim . fxand) (cQ4e7d core-prim . fx>?) (cQ4e7c core-prim . fx>=?) (cQ4e7b core-prim . fx=?) (cQ4e7a core-prim . fx<?) (cQ4e79 core-prim . fx<=?) (cQ4e78 core-prim . fx-/carry) (cQ4e77 core-prim . fx-) (cQ4e76 core-prim . fx+/carry) (cQ4e75 core-prim . fx+) (cQ4e74 core-prim . fx*/carry) (cQ4e73 core-prim . fx*) (cQ4e72 core-prim . greatest-fixnum) (cQ4e71 core-prim . least-fixnum) (cQ4e70 core-prim . fixnum-width) (cQ4e6f core-prim . fixnum?) (cQ4e6e core-prim . bitwise-rotate-bit-field) (cQ4e6d core-prim . bitwise-reverse-bit-field) (cQ4e6c core-prim . bitwise-length) (cQ4e6b core-prim . bitwise-if) (cQ4e6a core-prim . bitwise-first-bit-set) (cQ4e69 core-prim . bitwise-copy-bit-field) (cQ4e68 core-prim . bitwise-copy-bit) (cQ4e67 core-prim . bitwise-bit-set?) (cQ4e66 core-prim . bitwise-bit-field) (cQ4e65 core-prim . bitwise-bit-count) (cQ4e64 core-prim . bitwise-xor) (cQ4e63 core-prim . bitwise-ior) (cQ4e62 core-prim . bitwise-and) (cQ4e61 core-prim . bitwise-not) (cQ4e60 core-prim . bitwise-arithmetic-shift-right) (cQ4e5f core-prim . bitwise-arithmetic-shift-left) (cQ4e5e core-prim . bitwise-arithmetic-shift) (cQ4e5d core-prim . zero?) (cQ4e5c core-prim . vector?) (cQ4e5b core-prim . vector-set!) (cQ4e5a core-prim . vector-ref) (cQ4e59 core-prim . vector-map) (cQ4e58 core-prim . vector-length) (cQ4e57 core-prim . vector-for-each) (cQ4e56 core-prim . vector-fill!) (cQ4e55 core-prim . vector->list) (cQ4e54 core-prim . vector) (cQ4e53 core-prim . values) (cQ4e52 core-prim . truncate) (cQ4e51 core-prim . tan) (cQ4e50 core-prim . symbol?) (cQ4e4f core-prim . symbol=?) (cQ4e4e core-prim . symbol->string) (cQ4e4d core-prim . substring) (cQ4e4c core-prim . string?) (cQ4e4b core-prim . string>?) (cQ4e4a core-prim . string>=?) (cQ4e49 core-prim . string=?) (cQ4e48 core-prim . string<?) (cQ4e47 core-prim . string<=?) (cQ4e46 core-prim . string-ref) (cQ4e45 core-prim . string-length) (cQ4e44 core-prim . string-for-each) (cQ4e43 core-prim . string-copy) (cQ4e42 core-prim . string-append) (cQ4e41 core-prim . string->symbol) (cQ4e40 core-prim . string->number) (cQ4e3f core-prim . string->list) (cQ4e3e core-prim . string) (cQ4e3d core-prim . sqrt) (cQ4e3c core-prim . sin) (cQ4e3b core-prim . round) (cQ4e3a core-prim . reverse) (cQ4e39 core-prim . real?) (cQ4e38 core-prim . real-valued?) (cQ4e37 core-prim . real-part) (cQ4e36 core-prim . rationalize) (cQ4e35 core-prim . rational?) (cQ4e34 core-prim . rational-valued?) (cQ4e33 core-prim . procedure?) (cQ4e32 core-prim . positive?) (cQ4e31 core-prim . pair?) (cQ4e30 core-prim . odd?) (cQ4e2f core-prim . numerator) (cQ4e2e core-prim . number?) (cQ4e2d core-prim . number->string) (cQ4e2c core-prim . null?) (cQ4e2b core-prim . not) (cQ4e2a core-prim . negative?) (cQ4e29 core-prim . nan?) (cQ4e28 core-prim . min) (cQ4e27 core-prim . max) (cQ4e26 core-prim . map) (cQ4e25 core-prim . make-vector) (cQ4e24 core-prim . make-string) (cQ4e23 core-prim . make-rectangular) (cQ4e22 core-prim . make-polar) (cQ4e21 core-prim . magnitude) (cQ4e20 core-prim . log) (cQ4e1f core-prim . list?) (cQ4e1e core-prim . list-tail) (cQ4e1d core-prim . list-ref) (cQ4e1c core-prim . list->vector) (cQ4e1b core-prim . list->string) (cQ4e1a core-prim . list) (cQ4e19 core-prim . length) (cQ4e18 core-prim . lcm) (cQ4e17 core-prim . integer?) (cQ4e16 core-prim . integer-valued?) (cQ4e15 core-prim . integer->char) (cQ4e14 core-prim . infinite?) (cQ4e13 core-prim . inexact?) (cQ4e12 core-prim . inexact) (cQ4e11 core-prim . imag-part) (cQ4e10 core-prim . gcd) (cQ4e0f core-prim . for-each) (cQ4e0e core-prim . floor) (cQ4e0d core-prim . finite?) (cQ4e0c core-prim . expt) (cQ4e0b core-prim . exp) (cQ4e0a core-prim . exact?) (cQ4e09 core-prim . exact-integer-sqrt) (cQ4e08 core-prim . exact) (cQ4e07 core-prim . even?) (cQ4e06 core-prim . error) (cQ4e05 core-prim . eqv?) (cQ4e04 core-prim . equal?) (cQ4e03 core-prim . eq?) (cQ4e02 core-prim . dynamic-wind) (cQ4e01 core-prim . div0-and-mod0) (cQ4e00 core-prim . mod0) (cQ4dff core-prim . div0) (cQ4dfe core-prim . div-and-mod) (cQ4dfd core-prim . mod) (cQ4dfc core-prim . div) (cQ4dfb core-prim . denominator) (cQ4dfa core-prim . cos) (cQ4df9 core-prim . cons) (cQ4df8 core-prim . complex?) (cQ4df7 core-prim . char?) (cQ4df6 core-prim . char>?) (cQ4df5 core-prim . char>=?) (cQ4df4 core-prim . char=?) (cQ4df3 core-prim . char<?) (cQ4df2 core-prim . char<=?) (cQ4df1 core-prim . char->integer) (cQ4df0 core-prim . ceiling) (cQ4def core-prim . call-with-values) (cQ4dee core-prim . call/cc) (cQ4ded core-prim . call-with-current-continuation) (cQ4dec core-prim . cddddr) (cQ4deb core-prim . cdddar) (cQ4dea core-prim . cddadr) (cQ4de9 core-prim . cddaar) (cQ4de8 core-prim . cdaddr) (cQ4de7 core-prim . cdadar) (cQ4de6 core-prim . cdaadr) (cQ4de5 core-prim . cdaaar) (cQ4de4 core-prim . cadddr) (cQ4de3 core-prim . caddar) (cQ4de2 core-prim . cadadr) (cQ4de1 core-prim . cadaar) (cQ4de0 core-prim . caaddr) (cQ4ddf core-prim . caadar) (cQ4dde core-prim . caaadr) (cQ4ddd core-prim . caaaar) (cQ4ddc core-prim . cdddr) (cQ4ddb core-prim . cddar) (cQ4dda core-prim . cdadr) (cQ4dd9 core-prim . cdaar) (cQ4dd8 core-prim . caddr) (cQ4dd7 core-prim . cadar) (cQ4dd6 core-prim . caadr) (cQ4dd5 core-prim . caaar) (cQ4dd4 core-prim . cddr) (cQ4dd3 core-prim . cdar) (cQ4dd2 core-prim . cadr) (cQ4dd1 core-prim . caar) (cQ4dd0 core-prim . cdr) (cQ4dcf core-prim . car) (cQ4dce core-prim . boolean?) (cQ4dcd core-prim . boolean=?) (cQ4dcc core-prim . atan) (cQ4dcb core-prim . assertion-violation) (cQ3175 core-prim . assertion-error) (cQ4dca core-prim . asin) (cQ4dc9 core-prim . apply) (cQ4dc8 core-prim . append) (cQ4dc7 core-prim . angle) (cQ4dc6 core-prim . acos) (cQ4dc5 core-prim . abs) (cQ4dc4 core-prim . /) (cQ4dc3 core-prim . *) (cQ4dc2 core-prim . -) (cQ4dc1 core-prim . +) (cQ4dc0 core-prim . >=) (cQ4dbf core-prim . >) (cQ4dbe core-prim . =) (cQ4dbd core-prim . <=) (cQ4dbc core-prim . <) (cQ4dbb core-prim . library) (cQ4dba $core-rtd &no-nans-rtd &no-nans-rcd) (cQ4db9 $core-rtd &no-infinities-rtd &no-infinities-rcd) (cQ4db8 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (cQ4db7 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (cQ4db6 $core-rtd &i/o-port-rtd &i/o-port-rcd) (cQ4db5 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (cQ4db4 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (cQ4db3 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (cQ4db2 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (cQ4db1 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (cQ4db0 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (cQ4daf $core-rtd &i/o-write-rtd &i/o-write-rcd) (cQ4dae $core-rtd &i/o-read-rtd &i/o-read-rcd) (cQ4dad $core-rtd &i/o-rtd &i/o-rcd) (cQ4dac $core-rtd &undefined-rtd &undefined-rcd) (cQ4dab $core-rtd &syntax-rtd &syntax-rcd) (cQ4daa $core-rtd &lexical-rtd &lexical-rcd) (cQ4da9 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (cQ4da8 $core-rtd &non-continuable-rtd &non-continuable-rcd) (cQ4da7 $core-rtd &who-rtd &who-rcd) (cQ4da6 $core-rtd &irritants-rtd &irritants-rcd) (cQ4da5 $core-rtd &assertion-rtd &assertion-rcd) (cQ4da4 $core-rtd &violation-rtd &violation-rcd) (cQ4da3 $core-rtd &error-rtd &error-rcd) (cQ4da2 $core-rtd &serious-rtd &serious-rcd) (cQ4da1 $core-rtd &warning-rtd &warning-rcd) (cQ4da0 $core-rtd &message-rtd &message-rcd) (cQ4d9f $core-rtd &condition-rtd &condition-rcd) (cQ4d9e macro . define-condition-type) (cQ4d9d macro . define-enumeration) (cQ4d9c macro . define-record-type) (cQ4d9b macro . parent-rtd) (cQ4d9a macro . nongenerative) (cQ4d99 macro . opaque) (cQ4d98 macro . sealed) (cQ4d97 macro . protocol) (cQ4d96 macro . parent) (cQ4d95 macro . immutable) (cQ4d94 macro . mutable) (cQ4d93 macro . fields) (cQ4d92 macro . error-handling-mode) (cQ4d91 macro . file-options) (cQ4d90 macro . buffer-mode) (cQ4d8f macro . eol-style) (cQ4d8e macro . guard) (cQ4d8d macro . trace-define) (cQ4d8c macro . trace-lambda) (cQ4d8b macro . unsyntax-splicing) (cQ4d8a macro . unsyntax) (cQ4d89 macro . unquote-splicing) (cQ4d88 macro . unquote) (cQ4d87 macro . _) (cQ4d86 macro . else) (cQ4d85 macro . =>) (cQ4d84 macro . ...) (cQ4d83 macro . assert) (cQ4d82 macro . endianness) (cQ4d81 macro . delay) (cQ4d80 macro . time) (cQ4d7f macro . do) (cQ4d7e macro . cond) (cQ4d7d macro . let*) (cQ4d7c macro . let*-values) (cQ4d7b macro . let-values) (cQ4d7a macro . identifier-syntax) (cQ4d79 macro . with-syntax) (cQ4d78 macro . quasisyntax) (cQ4d77 macro . quasiquote) (cQ4d76 macro . syntax-rules) (cQ4d75 macro . include) (cQ4d74 macro . define-struct) (cQ4d73 core-macro . record-constructor-descriptor) (cQ4d72 core-macro . record-type-descriptor) (cQ4d71 macro . case) (cQ4d70 macro . parameterize) (cQ4d6f macro . unless) (cQ4d6e macro . when) (cQ4d6d core-macro . or) (cQ4d6c core-macro . and) (cQ4d6b core-macro . if) (cQ4d6a core-macro . let) (cQ4d69 core-macro . letrec*) (cQ4d68 core-macro . letrec) (cQ4d67 core-macro . type-descriptor) (cQ4d66 core-macro . case-lambda) (cQ4d65 core-macro . lambda) (cQ4d64 core-macro . syntax) (cQ4d63 core-macro . syntax-case) (cQ4d62 core-macro . quote) (cQ4d61 core-macro . foreign-call) (cQ4d60 letrec-syntax) (cQ4d5f let-syntax) (cQ4d5e set!) (cQ4d5d import) (cQ4d5c begin) (cQ4d5b module) (cQ4d5a define-syntax) (cQ4d59 define)) values values '#f '#f '#f '#f) (cQ2cae@cQ2aea@install-library 'cQ5123 '(psyntax system $bootstrap) '() '() '() '() '(#796# #797# #798# #799# #800# #801#) '() values values '#f '#f '#f '#f) (cQ2cae@cQ2aea@install-library 'cQ5124 '(mosh) '() '() '() '() '(#798# #799# #800# #1# #802# #804# #2# #805# #806# #3# #807# #808# #809# #810# #811# #816# #817# #818# #4# #819# #820# #821# #822# #823# #6# #7# #8# #67# #861# #862# #863# #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #86# #864# #865# #866# #867# #872# #873# #874# #875# #876# #877# #878# #879# #880# #749# #760#) '() values values '#f '#f '#f '#f) (cQ2cae@cQ2aea@install-library 'cQ5125 '(system) '() '() '() '() '(#803# #812# #813# #814# #815# #824# #5# #825# #826# #827# #7# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #828# #829# #830# #831# #832# #833# #834# #835# #836# #57# #58# #59# #60# #61# #62# #63# #64# #65# #66# #837# #838# #839# #840# #841# #842# #843# #844# #845# #846# #847# #848# #849# #850# #851# #852# #853# #854# #855# #856# #857# #858# #859# #860# #868# #869# #870# #871# #881# #882# #883# #884# #885# #886# #887# #888# #889# #890# #891# #892# #893#) '() values values '#f '#f '#f '#f)))
(begin (set! cQ4be9@ref (unspecified)) (set! cQ4beb@x* (unspecified)) (set! cQ4bed@add-library-path! (unspecified)) (set! cQ4bef@parse-and-add-library-path (unspecified)) (set! cQ4bf1@rpad (unspecified)) (set! cQ4bf3@condition-printer (unspecified)) (set! cQ4bf5@record->field-alist (unspecified)) (set! cQ4bf7@map-with-index (unspecified)) (set! cQ4bf9@repl (unspecified)) (set! cQ4bfb@trace-printer (unspecified)) (set! cQ4bfd@command-line (unspecified)) (set! cQ4bff@local-library-path (unspecified)) (set! cQ4c01@load/args (unspecified)) (set! cQ4c03@load (unspecified)) (set! cQ4c05@ironscheme-build (unspecified)) (set! cQ4c07@eval-top-level (unspecified)) (set! cQ4c09@compile-system-libraries (unspecified)) (set! cQ4c0b@compile (unspecified)) (set! cQ4c0d@compile->closure (unspecified)) (set! cQ4c0f@pre-compile-r6rs-file (unspecified)) (set! cQ4c11@load-r6rs-top-level (unspecified)) (set! cQ4c13@load-r6rs-top-level-sexp (unspecified)) (set! cQ4c15@prefix-inc (unspecified)) (set! cQ4c17@prefix-inc! (unspecified)) (set! cQ4be9@ref (lambda (cQ4c52@rtd cQ4c53@i cQ4c54@x) (let ((cQ4c58@val ((record-accessor cQ4c52@rtd cQ4c53@i) cQ4c54@x))) (if (symbol? cQ4c58@val) (ungensym cQ4c58@val) cQ4c58@val)))) (set! cQ4d40@cQ4be9@ref cQ4be9@ref) (set! cQ4beb@x* '()) (set! cQ4d41@cQ4beb@x* cQ4beb@x*) (set! cQ4bed@add-library-path! (lambda (cQ4c5a@path) (cQ2c9e@cQ2aca@library-path (append (cQ2c9e@cQ2aca@library-path) (list cQ4c5a@path))))) (set! cQ4d42@cQ4bed@add-library-path! cQ4bed@add-library-path!) (set! cQ4bef@parse-and-add-library-path (lambda (cQ4c5c@paths cQ4c5d@message) (letrec* ((cQ4c61@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((cQ4c62@t cQ4c5c@paths)) (if cQ4c62@t ((lambda (cQ4c64@paths) (for-each (lambda (cQ4c66@path) (if (file-exists? cQ4c66@path) (cQ4bed@add-library-path! (expand-path cQ4c66@path)) (format (current-error-port) cQ4c5d@message cQ4c66@path))) (string-split cQ4c64@paths cQ4c61@separator))) cQ4c62@t) (void)))))) (set! cQ4d43@cQ4bef@parse-and-add-library-path cQ4bef@parse-and-add-library-path) (set! cQ4bf1@rpad (lambda (cQ4c68@str cQ4c69@pad cQ4c6a@n) (let ((cQ4c6e@rest (- cQ4c6a@n (string-length (format '"~a" cQ4c68@str))))) (let cQ4c74@loop ((cQ4c70@rest cQ4c6e@rest) (cQ4c71@ret (format '"~a" cQ4c68@str))) (if (<= cQ4c70@rest '0) cQ4c71@ret (cQ4c74@loop (- cQ4c70@rest '1) (string-append cQ4c71@ret cQ4c69@pad))))))) (set! cQ4d44@cQ4bf1@rpad cQ4bf1@rpad) (set! cQ4bf3@condition-printer (lambda (cQ4c76@e cQ4c77@port) (letrec* ((cQ4c7b@max-condition-len (apply max (map (lambda (cQ4c8c@c) (string-length (symbol->string (record-type-name (record-rtd cQ4c8c@c))))) (simple-conditions cQ4c76@e))))) (begin (display '" Condition components:\n" cQ4c77@port) (for-each-with-index (lambda (cQ4c7c@i cQ4c7d@x) (let ((cQ4c80@rtd (record-rtd cQ4c7d@x)) (cQ4c81@fields-alist (cQ4bf5@record->field-alist cQ4c7d@x))) (begin (format cQ4c77@port '" ~d. ~a" (+ cQ4c7c@i '1) (cQ4bf1@rpad (symbol->string (record-type-name cQ4c80@rtd)) '" " cQ4c7b@max-condition-len)) (if (null? cQ4c81@fields-alist) (newline cQ4c77@port) (void)) (let cQ4c88@loop ((cQ4c84@first '#t) (cQ4c85@fields-alist cQ4c81@fields-alist)) (if (null? cQ4c85@fields-alist) '() (let ((cQ4c8a@field (car cQ4c85@fields-alist))) (begin (if (not cQ4c84@first) (display (cQ4bf1@rpad '"" '" " (+ '4 cQ4c7b@max-condition-len)) cQ4c77@port) (void)) (display '"       " cQ4c77@port) (display (car cQ4c8a@field) cQ4c77@port) (display '": " cQ4c77@port) (write (cdr cQ4c8a@field) cQ4c77@port) (newline cQ4c77@port) (cQ4c88@loop '#f (cdr cQ4c85@fields-alist))))))))) (simple-conditions cQ4c76@e)))))) (set! cQ4d45@cQ4bf3@condition-printer cQ4bf3@condition-printer) (set! cQ4bf5@record->field-alist (lambda (cQ4c8e@r) (letrec* ((cQ4c91@ref (lambda (cQ4c9c@rtd cQ4c9d@i cQ4c9e@x) (let ((cQ4ca2@val ((record-accessor cQ4c9c@rtd cQ4c9d@i) cQ4c9e@x))) (if (symbol? cQ4ca2@val) (ungensym cQ4ca2@val) cQ4ca2@val))))) (let cQ4c96@loop ((cQ4c92@ret '()) (cQ4c93@rtd (record-rtd cQ4c8e@r))) (if cQ4c93@rtd (cQ4c96@loop (append cQ4c92@ret (cQ4bf7@map-with-index (lambda (cQ4c98@i cQ4c99@field) (cons cQ4c99@field (cQ4c91@ref cQ4c93@rtd cQ4c98@i cQ4c8e@r))) (vector->list (record-type-field-names cQ4c93@rtd)))) (record-type-parent cQ4c93@rtd)) cQ4c92@ret))))) (set! cQ4d46@cQ4bf5@record->field-alist cQ4bf5@record->field-alist) (set! cQ4bf7@map-with-index (lambda (cQ4ca4@proc cQ4ca5@lst) (let cQ4cae@loop ((cQ4ca8@i '0) (cQ4ca9@lst cQ4ca5@lst) (cQ4caa@ret '())) (if (null? cQ4ca9@lst) (reverse cQ4caa@ret) (cQ4cae@loop (+ cQ4ca8@i '1) (cdr cQ4ca9@lst) (cons (cQ4ca4@proc cQ4ca8@i (car cQ4ca9@lst)) cQ4caa@ret)))))) (set! cQ4d47@cQ4bf7@map-with-index cQ4bf7@map-with-index) (set! cQ4bf9@repl (lambda cQ4cb0@x (letrec* ((cQ4cb3@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (cQ4cb6@cQ4cb4) (lambda () (with-exception-handler (lambda (cQ4cb8@e) ((call/cc (lambda (cQ4cba@cQ4cb5) (cQ4cb6@cQ4cb4 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? cQ4cb8@e) (cQ4bf3@condition-printer cQ4cb8@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" cQ4cb8@e))) (cQ4cba@cQ4cb5 (lambda () (raise-continuable cQ4cb8@e)))))))))) (lambda () (let cQ4cc0@loop ((cQ4cbc@line (get-line (current-input-port))) (cQ4cbd@accum '"")) (letrec* ((cQ4cc3@parentheses-ok? (lambda (cQ4cca@text) (let cQ4cd2@loop ((cQ4ccc@chars (string->list cQ4cca@text)) (cQ4ccd@p0 '0) (cQ4cce@p1 '0)) (if (null? cQ4ccc@chars) (= '0 cQ4ccd@p0 cQ4cce@p1) (let ((cQ4cd4@t (car cQ4ccc@chars))) (if (memv cQ4cd4@t '(#\()) (cQ4cd2@loop (cdr cQ4ccc@chars) (+ cQ4ccd@p0 '1) cQ4cce@p1) (if (memv cQ4cd4@t '(#\))) (cQ4cd2@loop (cdr cQ4ccc@chars) (- cQ4ccd@p0 '1) cQ4cce@p1) (if (memv cQ4cd4@t '(#\[)) (cQ4cd2@loop (cdr cQ4ccc@chars) cQ4ccd@p0 (+ cQ4cce@p1 '1)) (if (memv cQ4cd4@t '(#\])) (cQ4cd2@loop (cdr cQ4ccc@chars) cQ4ccd@p0 (- cQ4cce@p1 '1)) (cQ4cd2@loop (cdr cQ4ccc@chars) cQ4ccd@p0 cQ4cce@p1)))))))))) (cQ4cc5@eval-string-print (lambda (cQ4cc8@text) (if (not (or (string=? '"\n" cQ4cc8@text) (= '0 (string-length cQ4cc8@text)))) (write (cQ4c07@eval-top-level (call-with-port (open-string-input-port cQ4cc8@text) read))) (void))))) (if (eof-object? cQ4cbc@line) (begin (cQ4cc5@eval-string-print cQ4cbd@accum) (exit)) (let ((cQ4cc6@current (string-append cQ4cbd@accum cQ4cbc@line))) (if (cQ4cc3@parentheses-ok? cQ4cc6@current) (cQ4cc5@eval-string-print cQ4cc6@current) (cQ4cc0@loop (get-line (current-input-port)) cQ4cc6@current)))))))))))) (newline) (cQ4cb3@rec))))) (cQ4cb3@rec)))) (set! cQ4d48@cQ4bf9@repl cQ4bf9@repl) (set! cQ4bfb@trace-printer (cQ29d4@cQ28b2@make-parameter write)) (set! cQ4d49@cQ4bfb@trace-printer cQ4bfb@trace-printer) (set! cQ4bfd@command-line (cQ29d4@cQ28b2@make-parameter (get-command-line))) (set! cQ4d4a@cQ4bfd@command-line cQ4bfd@command-line) (set! cQ4bff@local-library-path (lambda (cQ4cd6@filename) (cQ2c9e@cQ2aca@library-path))) (set! cQ4d4b@cQ4bff@local-library-path cQ4bff@local-library-path) (set! cQ4c01@load/args (lambda (cQ4cd8@filename . cQ4cda@args) (begin (apply cQ4c11@load-r6rs-top-level cQ4cd8@filename 'load cQ4cda@args) (void)))) (set! cQ4d4c@cQ4c01@load/args cQ4c01@load/args) (set! cQ4c03@load (lambda (cQ4cdc@filename) (begin (apply cQ4c11@load-r6rs-top-level cQ4cdc@filename 'load (cQ4bfd@command-line)) (void)))) (set! cQ4d4d@cQ4c03@load cQ4c03@load) (set! cQ4c05@ironscheme-build (lambda () (cQ4c03@load '"ironscheme-buildscript.ss"))) (set! cQ4d4e@cQ4c05@ironscheme-build cQ4c05@ironscheme-build) (set! cQ4c07@eval-top-level (lambda (cQ4cde@x) (cQ4bc6@cQ315c@eval cQ4cde@x (cQ4bdd@cQ318a@interaction-environment)))) (set! cQ4d4f@cQ4c07@eval-top-level cQ4c07@eval-top-level) (set! cQ4c09@compile-system-libraries (lambda () (cQ4c07@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! cQ4d50@cQ4c09@compile-system-libraries cQ4c09@compile-system-libraries) (set! cQ4c0b@compile (lambda (cQ4ce0@filename) (cQ4c11@load-r6rs-top-level cQ4ce0@filename 'compile))) (set! cQ4d51@cQ4c0b@compile cQ4c0b@compile) (set! cQ4c0d@compile->closure (lambda (cQ4ce2@filename) (cQ4c11@load-r6rs-top-level cQ4ce2@filename 'closure))) (set! cQ4d52@cQ4c0d@compile->closure cQ4c0d@compile->closure) (set! cQ4c0f@pre-compile-r6rs-file (lambda (cQ4ce4@filename) (cQ4c11@load-r6rs-top-level cQ4ce4@filename 'compile))) (set! cQ4d53@cQ4c0f@pre-compile-r6rs-file cQ4c0f@pre-compile-r6rs-file) (set! cQ4c11@load-r6rs-top-level (lambda (cQ4ce6@filename cQ4ce7@how . cQ4cea@args) (begin (cQ2c9e@cQ2aca@library-path (cQ4bff@local-library-path cQ4ce6@filename)) (let ((cQ4cec@x* (with-input-from-file cQ4ce6@filename (lambda () (let cQ4cee@f () (let ((cQ4cf0@x (cQ29c6@cQ2896@read-annotated))) (if (eof-object? cQ4cf0@x) '() (cons cQ4cf0@x (cQ4cee@f))))))))) (let ((cQ4cf2@t cQ4ce7@how)) (if (memv cQ4cf2@t '(closure)) (cQ4bdc@cQ3188@pre-compile-r6rs-top-level cQ4cec@x*) (if (memv cQ4cf2@t '(load)) (begin (cQ4bfd@command-line (cons cQ4ce6@filename (car cQ4cea@args))) (cQ29d5@cQ28b4@mosh-cache-dir (create-mosh-cache-dir)) (if (cQ29d5@cQ28b4@mosh-cache-dir) (gensym-prefix-set! (cQ4c17@prefix-inc! (string-append (cQ29d5@cQ28b4@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (cQ4cf4@file) ((call/cc (lambda (cQ4cf8@cQ4cf6) (lambda () (with-exception-handler (lambda (cQ4cfa@c2) ((call/cc (lambda (cQ4cfc@cQ4cf7) (cQ4cf8@cQ4cf6 (lambda () (if '#t '#t (cQ4cfc@cQ4cf7 (lambda () (raise-continuable cQ4cfa@c2)))))))))) (lambda () (delete-file (string-append (cQ29d5@cQ28b4@mosh-cache-dir) '"/" cQ4cf4@file))))))))) (directory-list (cQ29d5@cQ28b4@mosh-cache-dir))) (void)) (let ((cQ4cfe@compiled (cQ4bdb@cQ3186@compile-r6rs-top-level cQ4cec@x*))) (begin (if (and (cQ29d5@cQ28b4@mosh-cache-dir) (not (symbol-value '%disable-acc))) (cQ2ca2@cQ2ad2@serialize-all cQ29cf@cQ28a8@serialize-library cQ2a2b@cQ29e4@compile-core-expr) (void)) (cQ4cfe@compiled)))) (if (memv cQ4cf2@t '(compile)) (begin (cQ4bdb@cQ3186@compile-r6rs-top-level cQ4cec@x*) (cQ2ca2@cQ2ad2@serialize-all cQ29cf@cQ28a8@serialize-library cQ2a2b@cQ29e4@compile-core-expr)) (if '#f '#f (void)))))))))) (set! cQ4d54@cQ4c11@load-r6rs-top-level cQ4c11@load-r6rs-top-level) (set! cQ4c13@load-r6rs-top-level-sexp (lambda (cQ4d00@import-spec cQ4d01@thunk) (let ((cQ4d0c@cQ4d05 cQ2c9e@cQ2aca@library-path) (cQ4d0d@cQ4d07 cQ29d5@cQ28b4@mosh-cache-dir) (cQ4d0e@cQ4d09 (cQ4bff@local-library-path '"")) (cQ4d0f@cQ4d0b (create-mosh-cache-dir))) (let ((cQ4d14@swap (lambda () (begin (let ((cQ4d16@t (cQ4d0c@cQ4d05))) (begin (cQ4d0c@cQ4d05 cQ4d0e@cQ4d09) (set! cQ4d0e@cQ4d09 cQ4d16@t))) (let ((cQ4d18@t (cQ4d0d@cQ4d07))) (begin (cQ4d0d@cQ4d07 cQ4d0f@cQ4d0b) (set! cQ4d0f@cQ4d0b cQ4d18@t))))))) (dynamic-wind cQ4d14@swap (lambda () (begin (if (cQ29d5@cQ28b4@mosh-cache-dir) (gensym-prefix-set! (cQ4c17@prefix-inc! (string-append (cQ29d5@cQ28b4@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((cQ4d1e@cQ4d1b cQ4bfd@command-line) (cQ4d1f@cQ4d1d '())) (let ((cQ4d22@swap (lambda () (let ((cQ4d24@t (cQ4d1e@cQ4d1b))) (begin (cQ4d1e@cQ4d1b cQ4d1f@cQ4d1d) (set! cQ4d1f@cQ4d1d cQ4d24@t)))))) (dynamic-wind cQ4d22@swap (lambda () ((cQ4bdb@cQ3186@compile-r6rs-top-level (list (cons 'import cQ4d00@import-spec) (list cQ4d01@thunk))))) cQ4d22@swap))))) cQ4d14@swap))))) (set! cQ4d55@cQ4c13@load-r6rs-top-level-sexp cQ4c13@load-r6rs-top-level-sexp) (set! cQ4c15@prefix-inc (lambda (cQ4d26@prefix-string) (let ((cQ4d28@prefix (symbol->string cQ4d26@prefix-string))) (let ((cQ4d2a@len (string-length cQ4d28@prefix))) (let cQ4d32@loop ((cQ4d2c@i (- cQ4d2a@len '1)) (cQ4d2d@carry? '#t) (cQ4d2e@accum '())) (if (< cQ4d2c@i '0) (string->symbol (list->string (if cQ4d2d@carry? (cons '#\a cQ4d2e@accum) cQ4d2e@accum))) (if cQ4d2d@carry? (let ((cQ4d34@next-integer (+ '1 (char->integer (string-ref cQ4d28@prefix cQ4d2c@i))))) (if (= cQ4d34@next-integer '123) (cQ4d32@loop (- cQ4d2c@i '1) '#f (cons '#\A cQ4d2e@accum)) (if (= cQ4d34@next-integer '91) (cQ4d32@loop (- cQ4d2c@i '1) '#t (cons '#\a cQ4d2e@accum)) (cQ4d32@loop (- cQ4d2c@i '1) '#f (cons (integer->char cQ4d34@next-integer) cQ4d2e@accum))))) (cQ4d32@loop (- cQ4d2c@i '1) '#f (cons (string-ref cQ4d28@prefix cQ4d2c@i) cQ4d2e@accum))))))))) (set! cQ4d56@cQ4c15@prefix-inc cQ4c15@prefix-inc) (set! cQ4c17@prefix-inc! (lambda (cQ4d36@file) (begin (if (not (file-exists? cQ4d36@file)) (call-with-output-file cQ4d36@file (lambda (cQ4d38@port) (write 'd cQ4d38@port))) (void)) (let ((cQ4d3a@prefix (call-with-input-file cQ4d36@file read))) (if (main-vm?) (let ((cQ4d3c@next-prefix (cQ4c15@prefix-inc cQ4d3a@prefix))) (begin (call-with-port (open-file-output-port cQ4d36@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (cQ4d3e@port) (write cQ4d3c@next-prefix cQ4d3e@port))) cQ4d3a@prefix)) cQ4d3a@prefix))))) (set! cQ4d57@cQ4c17@prefix-inc! cQ4c17@prefix-inc!) (begin (cQ2ca3@cQ2ad4@current-precompiled-library-loader cQ29d0@cQ28aa@load-serialized-library) (set-symbol-value! 'load cQ4c03@load) (set-symbol-value! 'pre-compile-r6rs-file cQ4c0f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs cQ4c07@eval-top-level) (set-symbol-value! 'int-env-syms cQ4bbd@cQ314a@interaction-environment-symbols) (set-symbol-value! 'expanded2core cQ2a2a@cQ29e2@expanded->core) (set-symbol-value! 'trace-printer cQ4bfb@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (cQ4c18@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list cQ4c18@c))))) (cQ4bef@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (cQ4bef@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (cQ4bed@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (cQ4bed@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (cQ4bed@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((cQ4c1a@prefix (lambda (cQ4c1c@ext cQ4c1d@ls) (append (map (lambda (cQ4c20@x) (string-append cQ4c1c@ext cQ4c20@x)) cQ4c1d@ls) cQ4c1d@ls)))) (cQ2c9f@cQ2acc@library-extensions (cQ4c1a@prefix '".mosh" (cQ2c9f@cQ2acc@library-extensions)))) (set-symbol-value! 'invoke-library-by-name cQ2cb3@cQ2af4@invoke-library-by-name) (with-exception-handler (lambda (cQ4c22@c) (begin (if (condition? cQ4c22@c) (cQ4bf3@condition-printer cQ4c22@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" cQ4c22@c)) cQ4c22@c)) (lambda () (if ((call/cc (lambda (cQ4c26@cQ4c24) (lambda () (with-exception-handler (lambda (cQ4c28@c3) ((call/cc (lambda (cQ4c2a@cQ4c25) (cQ4c26@cQ4c24 (lambda () (if '#t '#f (cQ4c2a@cQ4c25 (lambda () (raise-continuable cQ4c28@c3)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (cQ4c13@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (cQ4bfd@command-line)) (let ((cQ4c34@cQ4c2d cQ4bfd@command-line) (cQ4c35@cQ4c2f cQ29d5@cQ28b4@mosh-cache-dir) (cQ4c36@cQ4c31 '()) (cQ4c37@cQ4c33 (create-mosh-cache-dir))) (let ((cQ4c3c@swap (lambda () (begin (let ((cQ4c3e@t (cQ4c34@cQ4c2d))) (begin (cQ4c34@cQ4c2d cQ4c36@cQ4c31) (set! cQ4c36@cQ4c31 cQ4c3e@t))) (let ((cQ4c40@t (cQ4c35@cQ4c2f))) (begin (cQ4c35@cQ4c2f cQ4c37@cQ4c33) (set! cQ4c37@cQ4c33 cQ4c40@t))))))) (dynamic-wind cQ4c3c@swap (lambda () (begin (if (cQ29d5@cQ28b4@mosh-cache-dir) (gensym-prefix-set! (cQ4c17@prefix-inc! (string-append (cQ29d5@cQ28b4@mosh-cache-dir) '"/prefix.txt"))) (void)) (cQ4bf9@repl))) cQ4c3c@swap))) (begin (cQ2c9e@cQ2aca@library-path (cQ4bff@local-library-path (car (cQ4bfd@command-line)))) (set! cQ4beb@x* (with-input-from-file (car (cQ4bfd@command-line)) (lambda () (let cQ4c42@f () (let ((cQ4c44@x (cQ29c6@cQ2896@read-annotated))) (if (eof-object? cQ4c44@x) '() (cons cQ4c44@x (cQ4c42@f)))))))) (cQ4bfd@command-line (cons (car (cQ4bfd@command-line)) (cdr (cQ4bfd@command-line)))) (cQ29d5@cQ28b4@mosh-cache-dir (create-mosh-cache-dir)) (if (cQ29d5@cQ28b4@mosh-cache-dir) (gensym-prefix-set! (cQ4c17@prefix-inc! (string-append (cQ29d5@cQ28b4@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (cQ4c46@file) ((call/cc (lambda (cQ4c4a@cQ4c48) (lambda () (with-exception-handler (lambda (cQ4c4c@c4) ((call/cc (lambda (cQ4c4e@cQ4c49) (cQ4c4a@cQ4c48 (lambda () (if '#t '#t (cQ4c4e@cQ4c49 (lambda () (raise-continuable cQ4c4c@c4)))))))))) (lambda () (delete-file (string-append (cQ29d5@cQ28b4@mosh-cache-dir) '"/" cQ4c46@file))))))))) (directory-list (cQ29d5@cQ28b4@mosh-cache-dir))) (void)) (let ((cQ4c50@compiled (cQ4bdb@cQ3186@compile-r6rs-top-level cQ4beb@x*))) (begin (if (and (cQ29d5@cQ28b4@mosh-cache-dir) (not (symbol-value '%disable-acc))) (cQ2ca2@cQ2ad2@serialize-all cQ29cf@cQ28a8@serialize-library cQ2a2b@cQ29e4@compile-core-expr) (void)) (cQ4c50@compiled))))))))))
