;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! j588@library-file-path->cache-path (unspecified)) (set! j58a@read-annotated (unspecified)) (set! j58c@annotation-stripped (unspecified)) (set! j58e@annotation? (unspecified)) (set! j590@annotation-source (unspecified)) (set! j592@annotation-expression (unspecified)) (set! j594@scm->fasl (unspecified)) (set! j596@fasl-save (unspecified)) (set! j598@fasl-load (unspecified)) (set! j59a@verbose? (unspecified)) (set! j59c@serialize-library (unspecified)) (set! j59e@load-serialized-library (unspecified)) (set! j5a0@make-record-printer (unspecified)) (set! j5a2@compile-core (unspecified)) (set! j5a4@read-library-source-file (unspecified)) (set! j5a6@make-parameter (unspecified)) (set! j5a8@mosh-cache-dir (unspecified)) (set! j63e@file-options-spec (unspecified)) (set! j588@library-file-path->cache-path (lambda (j63f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (j645@j642 j646@j644) (let ((j649@extract j646@j644) (j64a@p j645@j642)) (letrec* ((j64e@display-hex (lambda (j657@n) (if (<= '0 j657@n '9) (display j657@n j64a@p) (display (integer->char (+ (char->integer '#\a) (- j657@n '10))) j64a@p))))) (begin (let j651@f ((j64f@ls (string-split j63f@x '#\/))) (if (not (null? j64f@ls)) (begin (display '"_" j64a@p) (for-each (lambda (j653@c) (if (or (char<=? '#\a j653@c '#\z) (char<=? '#\A j653@c '#\Z) (char<=? '#\0 j653@c '#\9) (memv j653@c '(#\- #\. #\_ #\~))) (display j653@c j64a@p) (begin (display '"%" j64a@p) (let ((j655@n (char->integer j653@c))) (begin (j64e@display-hex (quotient j655@n '16)) (j64e@display-hex (remainder j655@n '16))))))) (string->list (car j64f@ls))) (j651@f (cdr j64f@ls))) (void))) (j649@extract)))))))) (set! j6b9@j588@library-file-path->cache-path j588@library-file-path->cache-path) (set! j58a@read-annotated read) (set! j6ba@j58a@read-annotated j58a@read-annotated) (set! j58c@annotation-stripped (lambda (j659@x) (j592@annotation-expression j659@x))) (set! j6bb@j58c@annotation-stripped j58c@annotation-stripped) (set! j58e@annotation? (lambda (j65b@x) (source-info j65b@x))) (set! j6bc@j58e@annotation? j58e@annotation?) (set! j590@annotation-source (lambda (j65d@x) (source-info j65d@x))) (set! j6bd@j590@annotation-source j590@annotation-source) (set! j592@annotation-expression (lambda (j65f@x) (if (pair? j65f@x) (cons (car j65f@x) (cdr j65f@x)) (if (procedure? j65f@x) (set-source-info! j65f@x '#f) j65f@x)))) (set! j6be@j592@annotation-expression j592@annotation-expression) (set! j594@scm->fasl (lambda (j661@filename) (string-append (j5a8@mosh-cache-dir) '"/" (j588@library-file-path->cache-path j661@filename) '".mosh-fasl"))) (set! j6bf@j594@scm->fasl j594@scm->fasl) (set! j596@fasl-save (lambda (j663@filename j664@obj) (call-with-port (open-file-output-port j663@filename) (lambda (j667@port) ((symbol-value 'fasl-write!) j664@obj j667@port))))) (set! j6c0@j596@fasl-save j596@fasl-save) (set! j598@fasl-load (lambda (j669@filename) (call-with-port (open-file-input-port j669@filename) (symbol-value 'fasl-read!)))) (set! j6c1@j598@fasl-load j598@fasl-load) (set! j59a@verbose? (symbol-value '%verbose)) (set! j6c2@j59a@verbose? j59a@verbose?) (set! j59c@serialize-library (lambda (j66b@filename j66c@obj) (begin (if j59a@verbose? (format (current-error-port) '"serialize-library ~a\n..." j66b@filename) (void)) (let ((j66f@expanded2core (symbol-value 'expanded2core))) (let ((j671@compile (symbol-value 'compile-w/o-halt))) (let ((j673@code j66c@obj)) (let ((j675@pivot (cddddr (cddddr j673@code)))) (let ((j677@visit (j671@compile (j66f@expanded2core (car j675@pivot))))) (begin (set-car! j675@pivot j677@visit) (let ((j679@pivot (cdr j675@pivot))) (let ((j67b@invoke (j671@compile (j66f@expanded2core (car j679@pivot))))) (set-car! j679@pivot j67b@invoke))))))))) (let ((j67d@fasl-file (j594@scm->fasl j66b@filename))) (begin (if (file-exists? j67d@fasl-file) (delete-file j67d@fasl-file) (void)) ((call/cc (lambda (j681@j67f) (lambda () (with-exception-handler (lambda (j683@c) ((call/cc (lambda (j685@j680) (j681@j67f (lambda () (if '#t (begin (if j59a@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" j66b@filename) (void)) (if (file-exists? j67d@fasl-file) (delete-file j67d@fasl-file) (void)) '#f) (j685@j680 (lambda () (raise-continuable j683@c)))))))))) (lambda () (j596@fasl-save j67d@fasl-file j66c@obj)))))))))))) (set! j6c3@j59c@serialize-library j59c@serialize-library) (set! j59e@load-serialized-library (lambda (j687@filename j688@obj) (and (j5a8@mosh-cache-dir) (let ((j68b@fasl-file (j594@scm->fasl j687@filename))) (if (and (file-exists? j68b@fasl-file) ((symbol-value 'file-newer?) j68b@fasl-file j687@filename)) (let ((j68d@expanded2core (symbol-value 'expanded2core))) (let ((j68f@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((j691@code (j598@fasl-load j68b@fasl-file))) (let ((j693@pivot (cddddr (cddddr j691@code)))) (let ((j695@visit (car j693@pivot))) (let ((j697@visit-proc (lambda () (j68f@eval-compiled-core j695@visit)))) (begin (set-car! j693@pivot j697@visit-proc) (let ((j699@pivot (cdr j693@pivot))) (let ((j69b@invoke (car j699@pivot))) (begin (set-car! j699@pivot (lambda () (j68f@eval-compiled-core j69b@invoke))) (apply j688@obj j691@code))))))))))) '#f))))) (set! j6c4@j59e@load-serialized-library j59e@load-serialized-library) (set! j5a0@make-record-printer (lambda (j69d@name j69e@printer) (lambda j6a1@x (begin (display '"record printer") (for-each display j6a1@x))))) (set! j6c5@j5a0@make-record-printer j5a0@make-record-printer) (set! j5a2@compile-core (lambda j6a3@x (apply error 'comile-core '"not implementated" j6a3@x))) (set! j6c6@j5a2@compile-core j5a2@compile-core) (set! j5a4@read-library-source-file (lambda (j6a5@file-name) (with-input-from-file j6a5@file-name j58a@read-annotated))) (set! j6c7@j5a4@read-library-source-file j5a4@read-library-source-file) (set! j5a6@make-parameter (lambda j6b5 (let ((j6b6 (length j6b5))) (if (= j6b6 '1) (apply (lambda (j6a7@x) (j5a6@make-parameter j6a7@x (lambda (j6a9@x) j6a9@x))) j6b5) (if (= j6b6 '2) (apply (lambda (j6ab@x j6ac@fender) (let ((j6af@x (j6ac@fender j6ab@x))) (lambda j6b3 (let ((j6b4 (length j6b3))) (if (= j6b4 '0) (apply (lambda () j6af@x) j6b3) (if (= j6b4 '1) (apply (lambda (j6b1@v) (set! j6af@x (j6ac@fender j6b1@v))) j6b3) (error 'apply '"invalid arg count"))))))) j6b5) (error 'apply '"invalid arg count")))))) (set! j6c8@j5a6@make-parameter j5a6@make-parameter) (set! j5a8@mosh-cache-dir (j5a6@make-parameter '#f)) (set! j6c9@j5a8@mosh-cache-dir j5a8@mosh-cache-dir) (set! j63e@file-options-spec (lambda (j6b7@x) j6b7@x)) (set! j6ca@j63e@file-options-spec j63e@file-options-spec) (void))
(begin (set! j6d0@current-primitive-locations (unspecified)) (set! j6d2@mutable? (unspecified)) (set! j6d4@rewriter (unspecified)) (set! j6d6@expanded->core (unspecified)) (set! j6d8@compile-core-expr (unspecified)) (set! j6da@pretty-print (unspecified)) (set! j6dc@compile-core-expr-to-port (unspecified)) (set! j6d0@current-primitive-locations (j6c8@j5a6@make-parameter (lambda (j6dd@x) '#f) (lambda (j6df@p) j6df@p))) (set! j71b@j6d0@current-primitive-locations j6d0@current-primitive-locations) (set! j6d2@mutable? (lambda (j6e1@x) (or (pair? j6e1@x) (vector? j6e1@x) (hashtable? j6e1@x)))) (set! j71c@j6d2@mutable? j6d2@mutable?) (set! j6d4@rewriter (lambda (j6e3@quote-hack?) (letrec* ((j6e6@f (lambda (j6e7@x) (if (pair? j6e7@x) (let ((j6e9@t (car j6e7@x))) (if (memv j6e9@t '(quote)) (if (and j6e3@quote-hack? (j6d2@mutable? (cadr j6e7@x))) (let ((j6eb@g (gensym))) (begin (set-symbol-value! j6eb@g (cadr j6e7@x)) j6eb@g)) j6e7@x) (if (memv j6e9@t '(case-lambda)) (cons 'case-lambda (map (lambda (j6ed@x) (cons (car j6ed@x) (map j6e6@f (cdr j6ed@x)))) (cdr j6e7@x))) (if (memv j6e9@t '(lambda)) (cons* 'lambda (cadr j6e7@x) (map j6e6@f (cddr j6e7@x))) (if (memv j6e9@t '(letrec)) (let ((j6ef@bindings (cadr j6e7@x)) (j6f0@body* (cddr j6e7@x))) (let ((j6f3@lhs* (map car j6ef@bindings)) (j6f4@rhs* (map cadr j6ef@bindings))) (cons* 'letrec (map list j6f3@lhs* (map j6e6@f j6f4@rhs*)) (map j6e6@f j6f0@body*)))) (if (memv j6e9@t '(letrec*)) (let ((j6f7@bindings (cadr j6e7@x)) (j6f8@body* (cddr j6e7@x))) (let ((j6fb@lhs* (map car j6f7@bindings)) (j6fc@rhs* (map cadr j6f7@bindings))) (cons* 'letrec* (map list j6fb@lhs* (map j6e6@f j6fc@rhs*)) (map j6e6@f j6f8@body*)))) (if (memv j6e9@t '(library-letrec*)) (let ((j6ff@name (cadr j6e7@x)) (j700@x (cdr j6e7@x))) (let ((j703@bindings (cadr j700@x)) (j704@body* (cddr j700@x))) (let ((j707@lhs* (map car j703@bindings)) (j708@lhs** (map cadr j703@bindings)) (j709@rhs* (map caddr j703@bindings))) (cons* 'library-letrec* j6ff@name (map list j707@lhs* j708@lhs** (map j6e6@f j709@rhs*)) (map j6e6@f j704@body*))))) (if (memv j6e9@t '(begin)) (cons 'begin (map j6e6@f (cdr j6e7@x))) (if (memv j6e9@t '(set!)) (list 'set! (cadr j6e7@x) (j6e6@f (caddr j6e7@x))) (if (memv j6e9@t '(primitive)) (let ((j70d@op (cadr j6e7@x))) (let ((j70f@t ((j6d0@current-primitive-locations) j70d@op))) (if j70f@t ((lambda (j711@loc) j711@loc) j70f@t) j70d@op))) (if (memv j6e9@t '(define)) j6e7@x (if (list? j6e7@x) (map j6e6@f j6e7@x) (error 'rewrite '"invalid form ~s ~s" j6e7@x (list? j6e7@x)))))))))))))) j6e7@x)))) j6e6@f))) (set! j71d@j6d4@rewriter j6d4@rewriter) (set! j6d6@expanded->core (lambda (j713@x) ((j6d4@rewriter '#f) j713@x))) (set! j71e@j6d6@expanded->core j6d6@expanded->core) (set! j6d8@compile-core-expr (lambda (j715@x) ((j6d4@rewriter '#f) j715@x))) (set! j71f@j6d8@compile-core-expr j6d8@compile-core-expr) (set! j6da@pretty-print write) (set! j720@j6da@pretty-print j6da@pretty-print) (set! j6dc@compile-core-expr-to-port (lambda (j717@x j718@p) (j6da@pretty-print ((j6d4@rewriter '#f) j717@x) j718@p))) (set! j721@j6dc@compile-core-expr-to-port j6dc@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! j770@make-collection (unspecified)) (set! j772@current-library-collection (unspecified)) (set! j774@rp (unspecified)) (set! j77e@library? (unspecified)) (set! j780@library-id (unspecified)) (set! j782@set-library-id! (unspecified)) (set! j784@library-name (unspecified)) (set! j786@set-library-name! (unspecified)) (set! j788@library-version (unspecified)) (set! j78a@set-library-version! (unspecified)) (set! j78c@library-imp* (unspecified)) (set! j78e@set-library-imp*! (unspecified)) (set! j790@library-vis* (unspecified)) (set! j792@set-library-vis*! (unspecified)) (set! j794@library-inv* (unspecified)) (set! j796@set-library-inv*! (unspecified)) (set! j798@library-subst (unspecified)) (set! j79a@set-library-subst! (unspecified)) (set! j79c@library-env (unspecified)) (set! j79e@set-library-env! (unspecified)) (set! j7a0@library-visit-state (unspecified)) (set! j7a2@set-library-visit-state! (unspecified)) (set! j7a4@library-invoke-state (unspecified)) (set! j7a6@set-library-invoke-state! (unspecified)) (set! j7a8@library-visit-code (unspecified)) (set! j7aa@set-library-visit-code! (unspecified)) (set! j7ac@library-invoke-code (unspecified)) (set! j7ae@set-library-invoke-code! (unspecified)) (set! j7b0@library-visible? (unspecified)) (set! j7b2@set-library-visible?! (unspecified)) (set! j7b4@library-source-file-name (unspecified)) (set! j7b6@set-library-source-file-name! (unspecified)) (set! j7b8@dummy (unspecified)) (set! j7ba@find-dependencies (unspecified)) (set! j7bc@find-library-by (unspecified)) (set! j7be@library-path (unspecified)) (set! j7c0@library-extensions (unspecified)) (set! j7c2@library-name->file-name (unspecified)) (set! j7c4@file-locator (unspecified)) (set! j7c6@serialize-all (unspecified)) (set! j7c8@current-precompiled-library-loader (unspecified)) (set! j7ca@try-load-from-file (unspecified)) (set! j7cc@library-loader (unspecified)) (set! j7ce@current-library-expander (unspecified)) (set! j7d0@external-pending-libraries (unspecified)) (set! j7d2@find-external-library (unspecified)) (set! j7d4@find-library-by-name (unspecified)) (set! j7d6@library-exists? (unspecified)) (set! j7d8@find-library-by-spec/die (unspecified)) (set! j7da@label->binding-table (unspecified)) (set! j7dc@install-library-record (unspecified)) (set! j7de@install-library (unspecified)) (set! j7e0@imported-label->binding (unspecified)) (set! j7e2@invoke-library (unspecified)) (set! j7e4@visit-library (unspecified)) (set! j7e6@invoke-library-by-spec (unspecified)) (set! j7e8@installed-libraries (unspecified)) (set! j7ea@library-spec (unspecified)) (set! j770@make-collection (lambda () (let ((j7eb@set '())) (letrec* ((j7ee@set-cons (lambda (j7f3@x j7f4@ls) (if (memq j7f3@x j7f4@ls) j7f4@ls (cons j7f3@x j7f4@ls))))) (lambda j7f1 (let ((j7f2 (length j7f1))) (if (= j7f2 '0) (apply (lambda () j7eb@set) j7f1) (if (= j7f2 '1) (apply (lambda (j7ef@x) (set! j7eb@set (j7ee@set-cons j7ef@x j7eb@set))) j7f1) (error 'apply '"invalid arg count"))))))))) (set! j95f@j770@make-collection j770@make-collection) (set! j772@current-library-collection (j6c8@j5a6@make-parameter (j770@make-collection) (lambda (j7f7@x) (begin (if (not (procedure? j7f7@x)) (assertion-violation 'current-library-collection '"not a procedure" j7f7@x) (void)) j7f7@x)))) (set! j960@j772@current-library-collection j772@current-library-collection) (set! j774@rp (j6c5@j5a0@make-record-printer 'library (lambda (j7f9@x j7fa@p j7fb@wr) (begin (if (not (j77e@library? j7f9@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (j788@library-version j7f9@x)) (j784@library-name j7f9@x) (append (j784@library-name j7f9@x) (list (j788@library-version j7f9@x))))) j7fa@p))))) (set! j961@j774@rp j774@rp) (set! j77e@library? (lambda (j7ff@x) (and (simple-struct? j7ff@x) (eq? (simple-struct-name j7ff@x) 'library)))) (set! j962@j77e@library? j77e@library?) (set! j780@library-id (lambda (j801@x) (simple-struct-ref j801@x '0))) (set! j963@j780@library-id j780@library-id) (set! j782@set-library-id! (lambda (j803@x j804@val) (simple-struct-set! j803@x '0 j804@val))) (set! j964@j782@set-library-id! j782@set-library-id!) (set! j784@library-name (lambda (j807@x) (simple-struct-ref j807@x '1))) (set! j965@j784@library-name j784@library-name) (set! j786@set-library-name! (lambda (j809@x j80a@val) (simple-struct-set! j809@x '1 j80a@val))) (set! j966@j786@set-library-name! j786@set-library-name!) (set! j788@library-version (lambda (j80d@x) (simple-struct-ref j80d@x '2))) (set! j967@j788@library-version j788@library-version) (set! j78a@set-library-version! (lambda (j80f@x j810@val) (simple-struct-set! j80f@x '2 j810@val))) (set! j968@j78a@set-library-version! j78a@set-library-version!) (set! j78c@library-imp* (lambda (j813@x) (simple-struct-ref j813@x '3))) (set! j969@j78c@library-imp* j78c@library-imp*) (set! j78e@set-library-imp*! (lambda (j815@x j816@val) (simple-struct-set! j815@x '3 j816@val))) (set! j96a@j78e@set-library-imp*! j78e@set-library-imp*!) (set! j790@library-vis* (lambda (j819@x) (simple-struct-ref j819@x '4))) (set! j96b@j790@library-vis* j790@library-vis*) (set! j792@set-library-vis*! (lambda (j81b@x j81c@val) (simple-struct-set! j81b@x '4 j81c@val))) (set! j96c@j792@set-library-vis*! j792@set-library-vis*!) (set! j794@library-inv* (lambda (j81f@x) (simple-struct-ref j81f@x '5))) (set! j96d@j794@library-inv* j794@library-inv*) (set! j796@set-library-inv*! (lambda (j821@x j822@val) (simple-struct-set! j821@x '5 j822@val))) (set! j96e@j796@set-library-inv*! j796@set-library-inv*!) (set! j798@library-subst (lambda (j825@x) (simple-struct-ref j825@x '6))) (set! j96f@j798@library-subst j798@library-subst) (set! j79a@set-library-subst! (lambda (j827@x j828@val) (simple-struct-set! j827@x '6 j828@val))) (set! j970@j79a@set-library-subst! j79a@set-library-subst!) (set! j79c@library-env (lambda (j82b@x) (simple-struct-ref j82b@x '7))) (set! j971@j79c@library-env j79c@library-env) (set! j79e@set-library-env! (lambda (j82d@x j82e@val) (simple-struct-set! j82d@x '7 j82e@val))) (set! j972@j79e@set-library-env! j79e@set-library-env!) (set! j7a0@library-visit-state (lambda (j831@x) (simple-struct-ref j831@x '8))) (set! j973@j7a0@library-visit-state j7a0@library-visit-state) (set! j7a2@set-library-visit-state! (lambda (j833@x j834@val) (simple-struct-set! j833@x '8 j834@val))) (set! j974@j7a2@set-library-visit-state! j7a2@set-library-visit-state!) (set! j7a4@library-invoke-state (lambda (j837@x) (simple-struct-ref j837@x '9))) (set! j975@j7a4@library-invoke-state j7a4@library-invoke-state) (set! j7a6@set-library-invoke-state! (lambda (j839@x j83a@val) (simple-struct-set! j839@x '9 j83a@val))) (set! j976@j7a6@set-library-invoke-state! j7a6@set-library-invoke-state!) (set! j7a8@library-visit-code (lambda (j83d@x) (simple-struct-ref j83d@x '10))) (set! j977@j7a8@library-visit-code j7a8@library-visit-code) (set! j7aa@set-library-visit-code! (lambda (j83f@x j840@val) (simple-struct-set! j83f@x '10 j840@val))) (set! j978@j7aa@set-library-visit-code! j7aa@set-library-visit-code!) (set! j7ac@library-invoke-code (lambda (j843@x) (simple-struct-ref j843@x '11))) (set! j979@j7ac@library-invoke-code j7ac@library-invoke-code) (set! j7ae@set-library-invoke-code! (lambda (j845@x j846@val) (simple-struct-set! j845@x '11 j846@val))) (set! j97a@j7ae@set-library-invoke-code! j7ae@set-library-invoke-code!) (set! j7b0@library-visible? (lambda (j849@x) (simple-struct-ref j849@x '12))) (set! j97b@j7b0@library-visible? j7b0@library-visible?) (set! j7b2@set-library-visible?! (lambda (j84b@x j84c@val) (simple-struct-set! j84b@x '12 j84c@val))) (set! j97c@j7b2@set-library-visible?! j7b2@set-library-visible?!) (set! j7b4@library-source-file-name (lambda (j84f@x) (simple-struct-ref j84f@x '13))) (set! j97d@j7b4@library-source-file-name j7b4@library-source-file-name) (set! j7b6@set-library-source-file-name! (lambda (j851@x j852@val) (simple-struct-set! j851@x '13 j852@val))) (set! j97e@j7b6@set-library-source-file-name! j7b6@set-library-source-file-name!) (set! j7b8@dummy '3) (set! j97f@j7b8@dummy j7b8@dummy) (set! j7ba@find-dependencies (lambda (j855@ls) (if (null? j855@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! j980@j7ba@find-dependencies j7ba@find-dependencies) (set! j7bc@find-library-by (lambda (j857@pred) (let j85b@f ((j859@ls ((j772@current-library-collection)))) (if (null? j859@ls) '#f (if (j857@pred (car j859@ls)) (car j859@ls) (j85b@f (cdr j859@ls))))))) (set! j981@j7bc@find-library-by j7bc@find-library-by) (set! j7be@library-path (j6c8@j5a6@make-parameter '(".") (lambda (j85d@x) (if (and (list? j85d@x) (for-all string? j85d@x)) (map (lambda (j85f@x) j85f@x) j85d@x) (assertion-violation 'library-path '"not a list of strings" j85d@x))))) (set! j982@j7be@library-path j7be@library-path) (set! j7c0@library-extensions (j6c8@j5a6@make-parameter '(".sls" ".ss" ".scm") (lambda (j861@x) (if (and (list? j861@x) (for-all string? j861@x)) (map (lambda (j863@x) j863@x) j861@x) (assertion-violation 'library-extensions '"not a list of strings" j861@x))))) (set! j983@j7c0@library-extensions j7c0@library-extensions) (set! j7c2@library-name->file-name (lambda (j865@x) (call-with-values (lambda () (open-string-output-port)) (lambda (j86b@j868 j86c@j86a) (let ((j86f@extract j86c@j86a) (j870@p j86b@j868)) (letrec* ((j874@display-hex (lambda (j87d@n) (if (<= '0 j87d@n '9) (display j87d@n j870@p) (display (integer->char (+ (char->integer '#\a) (- j87d@n '10))) j870@p))))) (begin (let j877@f ((j875@ls j865@x)) (if (not (null? j875@ls)) (begin (display '"/" j870@p) (for-each (lambda (j879@c) (if (or (char<=? '#\a j879@c '#\z) (char<=? '#\A j879@c '#\Z) (char<=? '#\0 j879@c '#\9) (memv j879@c '(#\- #\. #\_ #\~))) (display j879@c j870@p) (begin (display '"%" j870@p) (let ((j87b@n (char->integer j879@c))) (begin (j874@display-hex (quotient j87b@n '16)) (j874@display-hex (remainder j87b@n '16))))))) (string->list (symbol->string (car j875@ls)))) (j877@f (cdr j875@ls))) (void))) (j86f@extract)))))))) (set! j984@j7c2@library-name->file-name j7c2@library-name->file-name) (set! j7c4@file-locator (j6c8@j5a6@make-parameter (lambda (j87f@x) (let ((j881@str (j7c2@library-name->file-name j87f@x))) (let j889@f ((j883@ls (j7be@library-path)) (j884@exts (j7c0@library-extensions)) (j885@failed-list '())) (if (null? j883@ls) (letrec* ((j893@j88e (make-record-type-descriptor '&library-resolution &condition-rtd 'j891 '#f '#f '#((immutable library) (immutable files)))) (j895@j890 '#f) (j897@j88f (make-record-constructor-descriptor j893@j88e &condition-rcd j895@j890)) (j89a@j88d (record-predicate j893@j88e)) (j89c@make-library-resolution-condition (record-constructor j897@j88f)) (j89e@j88b (record-accessor j893@j88e '0)) (j8a0@j88c (record-accessor j893@j88e '1)) (j8a2@library-resolution-condition? (condition-predicate j893@j88e)) (j8a4@condition-library (condition-accessor j893@j88e j89e@j88b)) (j8a6@condition-files (condition-accessor j893@j88e j8a0@j88c))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (j89c@make-library-resolution-condition j87f@x (reverse j885@failed-list))))) (if (null? j884@exts) (j889@f (cdr j883@ls) (j7c0@library-extensions) j885@failed-list) (let ((j8a7@name (string-append (car j883@ls) j881@str (car j884@exts)))) (if (file-exists? j8a7@name) j8a7@name (j889@f j883@ls (cdr j884@exts) (cons j8a7@name j885@failed-list))))))))) (lambda (j8a9@f) (if (procedure? j8a9@f) j8a9@f (assertion-violation 'file-locator '"not a procedure" j8a9@f))))) (set! j985@j7c4@file-locator j7c4@file-locator) (set! j7c6@serialize-all (lambda (j8ab@serialize j8ac@compile) (letrec* ((j8b0@library-desc (lambda (j8b3@x) (list (j780@library-id j8b3@x) (j784@library-name j8b3@x))))) (for-each (lambda (j8b1@x) (if (j7b4@library-source-file-name j8b1@x) (j8ab@serialize (j7b4@library-source-file-name j8b1@x) (list (j780@library-id j8b1@x) (j784@library-name j8b1@x) (j788@library-version j8b1@x) (map j8b0@library-desc (j78c@library-imp* j8b1@x)) (map j8b0@library-desc (j790@library-vis* j8b1@x)) (map j8b0@library-desc (j794@library-inv* j8b1@x)) (j798@library-subst j8b1@x) (j79c@library-env j8b1@x) (j8ac@compile (j7a8@library-visit-code j8b1@x)) (j8ac@compile (j7ac@library-invoke-code j8b1@x)) (j7b0@library-visible? j8b1@x))) (void))) ((j772@current-library-collection)))))) (set! j986@j7c6@serialize-all j7c6@serialize-all) (set! j7c8@current-precompiled-library-loader (j6c8@j5a6@make-parameter (lambda (j8b5@filename j8b6@sk) '#f))) (set! j987@j7c8@current-precompiled-library-loader j7c8@current-precompiled-library-loader) (set! j7ca@try-load-from-file (lambda (j8b9@filename) ((j7c8@current-precompiled-library-loader) j8b9@filename (lambda j8df (let ((j8e0 (length j8df))) (if (= j8e0 '11) (apply (lambda (j8bb@id j8bc@name j8bd@ver j8be@imp* j8bf@vis* j8c0@inv* j8c1@exp-subst j8c2@exp-env j8c3@visit-proc j8c4@invoke-proc j8c5@visible?) (let j8d3@f ((j8d1@deps (append j8be@imp* j8bf@vis* j8c0@inv*))) (if (null? j8d1@deps) (begin (j7de@install-library j8bb@id j8bc@name j8bd@ver j8be@imp* j8bf@vis* j8c0@inv* j8c1@exp-subst j8c2@exp-env j8c3@visit-proc j8c4@invoke-proc '#f '#f j8c5@visible? '#f) '#t) (let ((j8d5@d (car j8d1@deps))) (let ((j8d7@label (car j8d5@d)) (j8d8@dname (cadr j8d5@d))) (let ((j8db@l (j7d4@find-library-by-name j8d8@dname))) (if (and (j77e@library? j8db@l) (eq? j8d7@label (j780@library-id j8db@l))) (j8d3@f (cdr j8d1@deps)) (begin (if j6c2@j59a@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" j8bc@name j8d8@dname j8b9@filename) (void)) '#f)))))))) j8df) (if (>= j8e0 '0) (apply (lambda j8dd@others '#f) j8df) (error 'apply '"invalid arg count")))))))) (set! j988@j7ca@try-load-from-file j7ca@try-load-from-file) (set! j7cc@library-loader (j6c8@j5a6@make-parameter (lambda (j8e1@x) (let ((j8e3@file-name ((j7c4@file-locator) j8e1@x))) (if (not j8e3@file-name) (assertion-violation '#f '"cannot file library" j8e1@x) (or (j7ca@try-load-from-file j8e3@file-name) ((j7ce@current-library-expander) (j6c7@j5a4@read-library-source-file j8e3@file-name) j8e3@file-name (lambda (j8e5@name) (if (not (fast-equal? j8e5@name j8e1@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (j8eb@j8e8 j8ec@j8ea) (let ((j8ef@e j8ec@j8ea) (j8f0@p j8eb@j8e8)) (begin (display '"expected to find library " j8f0@p) (write j8e1@x j8f0@p) (display '" in file " j8f0@p) (display j8e3@file-name j8f0@p) (display '", found " j8f0@p) (write j8e5@name j8f0@p) (display '" instead" j8f0@p) (j8ef@e)))))) (void)))))))) (lambda (j8f3@f) (if (procedure? j8f3@f) j8f3@f (assertion-violation 'library-locator '"not a procedure" j8f3@f))))) (set! j989@j7cc@library-loader j7cc@library-loader) (set! j7ce@current-library-expander (j6c8@j5a6@make-parameter (lambda (j8f5@x) (assertion-violation 'library-expander '"not initialized")) (lambda (j8f7@f) (if (procedure? j8f7@f) j8f7@f (assertion-violation 'library-expander '"not a procedure" j8f7@f))))) (set! j98a@j7ce@current-library-expander j7ce@current-library-expander) (set! j7d0@external-pending-libraries (j6c8@j5a6@make-parameter '())) (set! j98b@j7d0@external-pending-libraries j7d0@external-pending-libraries) (set! j7d2@find-external-library (lambda (j8f9@name) (begin (if (member j8f9@name (j7d0@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" j8f9@name) (void)) (let ((j8ff@j8fc j7d0@external-pending-libraries) (j900@j8fe (cons j8f9@name (j7d0@external-pending-libraries)))) (let ((j903@swap (lambda () (let ((j905@t (j8ff@j8fc))) (begin (j8ff@j8fc j900@j8fe) (set! j900@j8fe j905@t)))))) (dynamic-wind j903@swap (lambda () (begin ((j7cc@library-loader) j8f9@name) (or (j7bc@find-library-by (lambda (j907@x) (fast-equal? (j784@library-name j907@x) j8f9@name))) (assertion-violation '#f '"handling external library did not yield the correct library" j8f9@name)))) j903@swap)))))) (set! j98c@j7d2@find-external-library j7d2@find-external-library) (set! j7d4@find-library-by-name (lambda (j909@name) (or (j7bc@find-library-by (lambda (j90b@x) (fast-equal? (j784@library-name j90b@x) j909@name))) (j7d2@find-external-library j909@name)))) (set! j98d@j7d4@find-library-by-name j7d4@find-library-by-name) (set! j7d6@library-exists? (lambda (j90d@name) (and (j7bc@find-library-by (lambda (j90f@x) (fast-equal? (j784@library-name j90f@x) j90d@name))) '#t))) (set! j98e@j7d6@library-exists? j7d6@library-exists?) (set! j7d8@find-library-by-spec/die (lambda (j911@spec) (let ((j913@id (car j911@spec))) (or (j7bc@find-library-by (lambda (j915@x) (eq? j913@id (j780@library-id j915@x)))) (assertion-violation '#f '"cannot find library with required spec" j911@spec))))) (set! j98f@j7d8@find-library-by-spec/die j7d8@find-library-by-spec/die) (set! j7da@label->binding-table (make-eq-hashtable)) (set! j990@j7da@label->binding-table j7da@label->binding-table) (set! j7dc@install-library-record (lambda (j917@lib) (begin (let ((j919@exp-env (j79c@library-env j917@lib))) (for-each (lambda (j91b@x) (let ((j91d@label (car j91b@x)) (j91e@binding (cdr j91b@x))) (let ((j921@binding (let ((j923@t (car j91e@binding))) (if (memv j923@t '(global)) (cons 'global (cons j917@lib (cdr j91e@binding))) (if (memv j923@t '(global-macro)) (cons 'global-macro (cons j917@lib (cdr j91e@binding))) (if (memv j923@t '(global-macro!)) (cons 'global-macro! (cons j917@lib (cdr j91e@binding))) j91e@binding)))))) (begin (if (hashtable-ref j7da@label->binding-table j91d@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" j91d@label (hashtable-ref j7da@label->binding-table j91d@label '#f) j921@binding) (exit)) (void)) (hashtable-set! j7da@label->binding-table j91d@label j921@binding))))) j919@exp-env)) ((j772@current-library-collection) j917@lib)))) (set! j991@j7dc@install-library-record j7dc@install-library-record) (set! j7de@install-library (lambda (j925@id j926@name j927@ver j928@imp* j929@vis* j92a@inv* j92b@exp-subst j92c@exp-env j92d@visit-proc j92e@invoke-proc j92f@visit-code j930@invoke-code j931@visible? j932@source-file-name) (let ((j941@imp-lib* (map j7d8@find-library-by-spec/die j928@imp*)) (j942@vis-lib* (map j7d8@find-library-by-spec/die j929@vis*)) (j943@inv-lib* (map j7d8@find-library-by-spec/die j92a@inv*))) (begin (if (not (and (symbol? j925@id) (list? j926@name) (list? j927@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" j925@id j926@name j927@ver) (void)) (if (j7d6@library-exists? j926@name) (assertion-violation 'install-library '"library is already installed" j926@name) (void)) (let ((j947@lib (make-simple-struct 'library '15 (list j925@id j926@name j927@ver j941@imp-lib* j942@vis-lib* j943@inv-lib* j92b@exp-subst j92c@exp-env j92d@visit-proc j92e@invoke-proc j92f@visit-code j930@invoke-code j931@visible? j932@source-file-name)))) (j7dc@install-library-record j947@lib)))))) (set! j992@j7de@install-library j7de@install-library) (set! j7e0@imported-label->binding (lambda (j949@lab) (hashtable-ref j7da@label->binding-table j949@lab '#f))) (set! j993@j7e0@imported-label->binding j7e0@imported-label->binding) (set! j7e2@invoke-library (lambda (j94b@lib) (let ((j94d@invoke (j7a4@library-invoke-state j94b@lib))) (if (procedure? j94d@invoke) (begin (j7a6@set-library-invoke-state! j94b@lib (lambda () (assertion-violation 'invoke '"circularity detected" j94b@lib))) (for-each j7e2@invoke-library (j794@library-inv* j94b@lib)) (j7a6@set-library-invoke-state! j94b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" j94b@lib))) (j94d@invoke) (j7a6@set-library-invoke-state! j94b@lib '#t)) (void))))) (set! j994@j7e2@invoke-library j7e2@invoke-library) (set! j7e4@visit-library (lambda (j94f@lib) (let ((j951@visit (j7a0@library-visit-state j94f@lib))) (if (procedure? j951@visit) (begin (j7a2@set-library-visit-state! j94f@lib (lambda () (assertion-violation 'visit '"circularity detected" j94f@lib))) (for-each j7e2@invoke-library (j790@library-vis* j94f@lib)) (j7a2@set-library-visit-state! j94f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" j94f@lib))) (j951@visit) (j7a2@set-library-visit-state! j94f@lib '#t)) (void))))) (set! j995@j7e4@visit-library j7e4@visit-library) (set! j7e6@invoke-library-by-spec (lambda (j953@spec) (j7e2@invoke-library (j7d8@find-library-by-spec/die j953@spec)))) (set! j996@j7e6@invoke-library-by-spec j7e6@invoke-library-by-spec) (set! j7e8@installed-libraries (lambda j95b (let ((j95c (length j95b))) (if (= j95c '1) (apply (lambda (j955@all?) (let j959@f ((j957@ls ((j772@current-library-collection)))) (if (null? j957@ls) '() (if (or j955@all? (j7b0@library-visible? (car j957@ls))) (cons (car j957@ls) (j959@f (cdr j957@ls))) (j959@f (cdr j957@ls)))))) j95b) (if (= j95c '0) (apply (lambda () (j7e8@installed-libraries '#f)) j95b) (error 'apply '"invalid arg count")))))) (set! j997@j7e8@installed-libraries j7e8@installed-libraries) (set! j7ea@library-spec (lambda (j95d@x) (begin (if (not (j77e@library? j95d@x)) (assertion-violation 'library-spec '"not a library" j95d@x) (void)) (list (j780@library-id j95d@x) (j784@library-name j95d@x) (j788@library-version j95d@x))))) (set! j998@j7ea@library-spec j7ea@library-spec) (void))
(begin (set! j99c@build-global-define (unspecified)) (set! ja0d@build-lambda (unspecified)) (set! ja0f@build-case-lambda (unspecified)) (set! ja3d@build-sequence (unspecified)) (set! ja3f@build-void (unspecified)) (set! ja41@build-letrec (unspecified)) (set! ja43@build-let (unspecified)) (set! ja45@build-named-let (unspecified)) (set! ja47@build-letrec* (unspecified)) (set! ja49@build-library-letrec* (unspecified)) (set! ja4b@build-receive (unspecified)) (set! j99c@build-global-define (lambda (ja4c@x) (ja3f@build-void))) (set! jada@j99c@build-global-define j99c@build-global-define) (set! ja0d@build-lambda (lambda (ja4e@ae ja4f@vars ja50@exp) (list 'lambda ja4f@vars ja50@exp))) (set! jadb@ja0d@build-lambda ja0d@build-lambda) (set! ja0f@build-case-lambda (lambda (ja54@ae ja55@vars* ja56@exp*) (letrec* ((ja5b@build-error (lambda (ja92@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (ja5d@build-pred (lambda (ja7a@ae ja7b@n ja7c@vars) (call-with-values (lambda () (let ja88@f ((ja84@vars ja7c@vars) (ja85@count '0)) (if (pair? ja84@vars) (ja88@f (cdr ja84@vars) (+ ja85@count '1)) (if (null? ja84@vars) (values ja85@count '=) (values ja85@count '>=))))) (lambda (ja8a@ja81 ja8b@ja83) (let ((ja8e@pred ja8b@ja83) (ja8f@count ja8a@ja81)) (list (list 'primitive ja8e@pred) ja7b@n (list 'quote ja8f@count))))))) (ja5f@build-apply (lambda (ja72@ae ja73@g ja74@vars ja75@exp) (list '(primitive apply) (ja0d@build-lambda ja72@ae ja74@vars ja75@exp) ja73@g))) (ja61@expand-case-lambda (lambda (ja62@ae ja63@vars ja64@exp*) (let ((ja68@g (gensym)) (ja69@n (gensym))) (list 'lambda ja68@g (ja43@build-let ja62@ae (list ja69@n) (list (list '(primitive length) ja68@g)) (let ja70@f ((ja6c@vars* ja55@vars*) (ja6d@exp* ja64@exp*)) (if (null? ja6c@vars*) (ja5b@build-error ja62@ae) (list 'if (ja5d@build-pred ja62@ae ja69@n (car ja6c@vars*)) (ja5f@build-apply ja62@ae ja68@g (car ja6c@vars*) (car ja6d@exp*)) (ja70@f (cdr ja6c@vars*) (cdr ja6d@exp*))))))))))) (if (= (length ja56@exp*) '1) (ja0d@build-lambda ja54@ae (car ja55@vars*) (car ja56@exp*)) (ja61@expand-case-lambda ja54@ae ja55@vars* ja56@exp*))))) (set! jadc@ja0f@build-case-lambda ja0f@build-case-lambda) (set! ja3d@build-sequence (lambda (ja94@ae ja95@exps) (let ja9a@loop ((ja98@exps ja95@exps)) (if (null? (cdr ja98@exps)) (car ja98@exps) (if (equal? (car ja98@exps) (ja3f@build-void)) (ja9a@loop (cdr ja98@exps)) (cons 'begin ja98@exps)))))) (set! jadd@ja3d@build-sequence ja3d@build-sequence) (set! ja3f@build-void (lambda () '((primitive void)))) (set! jade@ja3f@build-void ja3f@build-void) (set! ja41@build-letrec (lambda (ja9c@ae ja9d@vars ja9e@val-exps ja9f@body-exp) (if (null? ja9d@vars) ja9f@body-exp (list 'letrec (map list ja9d@vars ja9e@val-exps) ja9f@body-exp)))) (set! jadf@ja41@build-letrec ja41@build-letrec) (set! ja43@build-let (lambda (jaa4@ae jaa5@vars jaa6@val-exps jaa7@body-exp) (if (null? jaa5@vars) jaa7@body-exp (list 'let (map list jaa5@vars jaa6@val-exps) jaa7@body-exp)))) (set! jae0@ja43@build-let ja43@build-let) (set! ja45@build-named-let (lambda (jaac@ae jaad@name jaae@vars jaaf@val-exps jab0@body-exp) (list 'let jaad@name (map list jaae@vars jaaf@val-exps) jab0@body-exp))) (set! jae1@ja45@build-named-let ja45@build-named-let) (set! ja47@build-letrec* (lambda (jab6@ae jab7@vars jab8@val-exps jab9@body-exp) (if (null? jab7@vars) jab9@body-exp (list 'letrec* (map list jab7@vars jab8@val-exps) jab9@body-exp)))) (set! jae2@ja47@build-letrec* ja47@build-letrec*) (set! ja49@build-library-letrec* (lambda (jabe@ae jabf@name jac0@vars jac1@locs jac2@val-exps jac3@body-exp) (cons 'begin (append (map (lambda (jaca@var) (cons 'set! (cons jaca@var '((unspecified))))) jac0@vars) (append (apply append (map (lambda (jacc@var jacd@loc jace@val-exp) (list (list 'set! jacc@var jace@val-exp) (list 'set! jacd@loc jacc@var))) jac0@vars jac1@locs jac2@val-exps)) (list jac3@body-exp)))))) (set! jae3@ja49@build-library-letrec* ja49@build-library-letrec*) (set! ja4b@build-receive (lambda (jad2@ae jad3@vars jad4@producer jad5@body*) (begin (display '"************** in ") (cons 'receive (cons jad3@vars (cons jad4@producer jad5@body*)))))) (set! jae4@ja4b@build-receive ja4b@build-receive) (void))
(begin (set! jaf3@file-options-macro (unspecified)) (set! jaf5@set-cons (unspecified)) (set! jaf7@set-union (unspecified)) (set! jafc@top-mark* (unspecified)) (set! jafe@top-marked? (unspecified)) (set! jb00@gen-lexical (unspecified)) (set! jb02@gen-global (unspecified)) (set! jb04@gen-label (unspecified)) (set! jb06@gen-top-level-label (unspecified)) (set! jb08@gen-define-label+loc (unspecified)) (set! jb0a@gen-define-label (unspecified)) (set! jb14@rib? (unspecified)) (set! jb16@rib-sym* (unspecified)) (set! jb18@set-rib-sym*! (unspecified)) (set! jb1a@rib-mark** (unspecified)) (set! jb1c@set-rib-mark**! (unspecified)) (set! jb1e@rib-label* (unspecified)) (set! jb20@set-rib-label*! (unspecified)) (set! jb22@rib-sealed/freq (unspecified)) (set! jb24@set-rib-sealed/freq! (unspecified)) (set! jb26@rib-cache (unspecified)) (set! jb28@set-rib-cache! (unspecified)) (set! jb2a@dummy (unspecified)) (set! jb2c@make-empty-rib (unspecified)) (set! jb2e@extend-rib! (unspecified)) (set! jb30@extend-rib/nc! (unspecified)) (set! jb32@make-rib-map (unspecified)) (set! jb34@seal-rib! (unspecified)) (set! jb36@unseal-rib! (unspecified)) (set! jb38@make-full-rib (unspecified)) (set! jb3a@rp (unspecified)) (set! jb44@stx? (unspecified)) (set! jb46@stx-expr (unspecified)) (set! jb48@set-stx-expr! (unspecified)) (set! jb4a@stx-mark* (unspecified)) (set! jb4c@set-stx-mark*! (unspecified)) (set! jb4e@stx-subst* (unspecified)) (set! jb50@set-stx-subst*! (unspecified)) (set! jb52@stx-ae* (unspecified)) (set! jb54@set-stx-ae*! (unspecified)) (set! jb56@dummy (unspecified)) (set! jb58@datum->stx (unspecified)) (set! jb5a@gen-mark (unspecified)) (set! jb5c@anti-mark (unspecified)) (set! jb5e@anti-mark? (unspecified)) (set! jb60@mkstx (unspecified)) (set! jb62@add-subst (unspecified)) (set! jb64@add-mark (unspecified)) (set! jb66@syntax-kind? (unspecified)) (set! jb68@syntax-vector->list (unspecified)) (set! jb6a@syntax-pair? (unspecified)) (set! jb6c@syntax-vector? (unspecified)) (set! jb6e@syntax-null? (unspecified)) (set! jb70@syntax-list? (unspecified)) (set! jb72@syntax-car (unspecified)) (set! jb74@syntax-cdr (unspecified)) (set! jb76@syntax->list (unspecified)) (set! jb78@id? (unspecified)) (set! jb7a@id->sym (unspecified)) (set! jb7c@bound-id=? (unspecified)) (set! jb7e@free-id=? (unspecified)) (set! jb80@valid-bound-ids? (unspecified)) (set! jb82@distinct-bound-ids? (unspecified)) (set! jb84@bound-id-member? (unspecified)) (set! jb86@self-evaluating? (unspecified)) (set! jb88@strip-annotations (unspecified)) (set! jb8a@strip (unspecified)) (set! jb8c@stx->datum (unspecified)) (set! jb8e@id->label (unspecified)) (set! jb90@label->binding (unspecified)) (set! jb92@make-binding (unspecified)) (set! jb94@binding-type (unspecified)) (set! jb96@binding-value (unspecified)) (set! jb98@raise-unbound-error (unspecified)) (set! jb9a@syntax-type (unspecified)) (set! jba8@sanitize-binding (unspecified)) (set! jbaa@make-variable-transformer (unspecified)) (set! jbac@variable-transformer? (unspecified)) (set! jbae@variable-transformer-procedure (unspecified)) (set! jbb0@make-eval-transformer (unspecified)) (set! jd01@parse-define (unspecified)) (set! jd03@parse-define-syntax (unspecified)) (set! jd05@scheme-stx-hashtable (unspecified)) (set! jd07@scheme-stx (unspecified)) (set! jd09@lexical-var (unspecified)) (set! jd0b@lexical-mutable? (unspecified)) (set! jd0d@set-lexical-mutable! (unspecified)) (set! jd0f@add-lexical (unspecified)) (set! jd11@add-lexicals (unspecified)) (set! jd13@letrec-helper (unspecified)) (set! jd15@let-transformer (unspecified)) (set! jd17@letrec-transformer (unspecified)) (set! jd19@letrec*-transformer (unspecified)) (set! jd1b@fluid-let-syntax-transformer (unspecified)) (set! jd1d@type-descriptor-transformer (unspecified)) (set! jd1f@record-type-descriptor-transformer (unspecified)) (set! jd21@record-constructor-descriptor-transformer (unspecified)) (set! jd23@when-macro (unspecified)) (set! jd25@unless-macro (unspecified)) (set! jd27@if-transformer (unspecified)) (set! jd29@and-transformer (unspecified)) (set! jd2b@or-transformer (unspecified)) (set! jd2d@case-macro (unspecified)) (set! jd2f@quote-transformer (unspecified)) (set! jd31@case-lambda-transformer (unspecified)) (set! jd33@lambda-transformer (unspecified)) (set! jd35@bless (unspecified)) (set! jd37@with-syntax-macro (unspecified)) (set! jd39@invalid-fmls-error (unspecified)) (set! jd3b@let-macro (unspecified)) (set! jd3d@let-values-macro (unspecified)) (set! jd3f@let*-values-macro (unspecified)) (set! jd41@trace-lambda-macro (unspecified)) (set! jd43@trace-define-macro (unspecified)) (set! jd45@trace-define-syntax-macro (unspecified)) (set! jd47@trace-let/rec-syntax (unspecified)) (set! jd49@trace-let-syntax-macro (unspecified)) (set! jd4b@trace-letrec-syntax-macro (unspecified)) (set! jd4d@guard-macro (unspecified)) (set! jd4f@define-enumeration-macro (unspecified)) (set! jd51@time-macro (unspecified)) (set! jd53@delay-macro (unspecified)) (set! jd55@assert-macro (unspecified)) (set! jd57@endianness-macro (unspecified)) (set! jd59@identifier-syntax-macro (unspecified)) (set! jd5b@do-macro (unspecified)) (set! jd5d@let*-macro (unspecified)) (set! jd5f@or-macro (unspecified)) (set! jd61@and-macro (unspecified)) (set! jd63@cond-macro (unspecified)) (set! jd65@do-include (unspecified)) (set! jd67@include-macro (unspecified)) (set! jd69@include-into-macro (unspecified)) (set! jd6b@syntax-rules-macro (unspecified)) (set! jd6d@quasiquote-macro (unspecified)) (set! jd6f@quasisyntax-macro (unspecified)) (set! jd71@define-struct-macro (unspecified)) (set! jd73@define-record-type-macro (unspecified)) (set! jd75@define-condition-type-macro (unspecified)) (set! jd77@incorrect-usage-macro (unspecified)) (set! jd79@parameterize-macro (unspecified)) (set! jd7b@foreign-call-transformer (unspecified)) (set! jd7d@convert-pattern (unspecified)) (set! jd7f@syntax-dispatch (unspecified)) (set! jd81@ellipsis? (unspecified)) (set! jd83@underscore? (unspecified)) (set! jd85@verify-literals (unspecified)) (set! jd87@syntax-case-transformer (unspecified)) (set! jd89@ellipsis-map (unspecified)) (set! jd8b@syntax-transformer (unspecified)) (set! jd8d@core-macro-transformer (unspecified)) (set! jd8f@symbol-macro (unspecified)) (set! jd91@macro-transformer (unspecified)) (set! jd93@local-macro-transformer (unspecified)) (set! jd95@do-macro-call (unspecified)) (set! jd97@chi-macro (unspecified)) (set! jd99@chi-local-macro (unspecified)) (set! jd9b@chi-global-macro (unspecified)) (set! jd9d@chi-expr* (unspecified)) (set! jd9f@chi-application (unspecified)) (set! jda1@chi-expr (unspecified)) (set! jda3@chi-set! (unspecified)) (set! jda5@verify-formals (unspecified)) (set! jda7@chi-lambda-clause (unspecified)) (set! jda9@chi-lambda-clause* (unspecified)) (set! jdab@chi-defun (unspecified)) (set! jdad@chi-rhs (unspecified)) (set! jdaf@expand-interaction-rhs*/init* (unspecified)) (set! jdb1@chi-rhs* (unspecified)) (set! jdb3@find-bound=? (unspecified)) (set! jdb5@find-dups (unspecified)) (set! jdb7@chi-internal (unspecified)) (set! jdb9@parse-module (unspecified)) (set! jdc3@module-interface? (unspecified)) (set! jdc5@module-interface-first-mark (unspecified)) (set! jdc7@set-module-interface-first-mark! (unspecified)) (set! jdc9@module-interface-exp-id-vec (unspecified)) (set! jdcb@set-module-interface-exp-id-vec! (unspecified)) (set! jdcd@module-interface-exp-lab-vec (unspecified)) (set! jdcf@set-module-interface-exp-lab-vec! (unspecified)) (set! jdd1@dummy (unspecified)) (set! jdd3@module-interface-exp-id* (unspecified)) (set! jdd5@chi-internal-module (unspecified)) (set! jdd7@chi-body* (unspecified)) (set! jdd9@expand-transformer (unspecified)) (set! jddb@parse-exports (unspecified)) (set! jddd@parse-library-name (unspecified)) (set! jddf@parse-library (unspecified)) (set! jde1@parse-import-spec* (unspecified)) (set! jde3@make-top-rib (unspecified)) (set! jde5@make-collector (unspecified)) (set! jde7@inv-collector (unspecified)) (set! jde9@vis-collector (unspecified)) (set! jdeb@imp-collector (unspecified)) (set! jded@chi-library-internal (unspecified)) (set! jdef@chi-interaction-expr (unspecified)) (set! jdf1@library-body-expander (unspecified)) (set! jdf3@core-library-expander (unspecified)) (set! jdf5@parse-top-level-program (unspecified)) (set! jdf7@top-level-expander (unspecified)) (set! jdf9@rp (unspecified)) (set! je03@env? (unspecified)) (set! je05@env-names (unspecified)) (set! je07@set-env-names! (unspecified)) (set! je09@env-labels (unspecified)) (set! je0b@set-env-labels! (unspecified)) (set! je0d@env-itc (unspecified)) (set! je0f@set-env-itc! (unspecified)) (set! je11@dummy (unspecified)) (set! je13@rp (unspecified)) (set! je1d@interaction-env? (unspecified)) (set! je1f@interaction-env-rib (unspecified)) (set! je21@set-interaction-env-rib! (unspecified)) (set! je23@interaction-env-r (unspecified)) (set! je25@set-interaction-env-r! (unspecified)) (set! je27@interaction-env-locs (unspecified)) (set! je29@set-interaction-env-locs! (unspecified)) (set! je2b@dummy (unspecified)) (set! je2d@interaction-environment-symbols (unspecified)) (set! je2f@environment-bindings (unspecified)) (set! je31@parse-binding (unspecified)) (set! je33@environment? (unspecified)) (set! je35@environment-symbols (unspecified)) (set! je37@environment (unspecified)) (set! je39@null-environment (unspecified)) (set! je3b@scheme-report-environment (unspecified)) (set! je3d@expand (unspecified)) (set! je3f@eval (unspecified)) (set! je41@library-expander (unspecified)) (set! je43@boot-library-expand (unspecified)) (set! je45@rev-map-append (unspecified)) (set! je47@build-exports (unspecified)) (set! je49@make-export-subst (unspecified)) (set! je4b@make-export-env/macros (unspecified)) (set! je4d@generate-temporaries (unspecified)) (set! je4f@free-identifier=? (unspecified)) (set! je51@bound-identifier=? (unspecified)) (set! je53@make-source-condition (unspecified)) (set! je55@extract-position-condition (unspecified)) (set! je57@expression-position (unspecified)) (set! je59@assertion-error (unspecified)) (set! je5b@syntax-error (unspecified)) (set! je5d@syntax-violation* (unspecified)) (set! je5f@syntax-violation (unspecified)) (set! je61@identifier? (unspecified)) (set! je63@datum->syntax (unspecified)) (set! je65@syntax->datum (unspecified)) (set! je67@ungensym-all (unspecified)) (set! je69@compile-r6rs-top-level (unspecified)) (set! je6b@pre-compile-r6rs-top-level (unspecified)) (set! je6d@interaction-environment (unspecified)) (set! je6f@top-level-context (unspecified)) (set! jaf3@file-options-macro (lambda (je70@x) (letrec* ((je73@valid-option? (lambda (je7c@x) (and (jb78@id? je7c@x) (memq (jb7a@id->sym je7c@x) '(no-fail no-create no-truncate)))))) (let ((je74@t je70@x)) (let ((je76@ls/false (jd7f@syntax-dispatch je74@t '(_ . each-any)))) (if (and je76@ls/false (apply (lambda (je78@opt*) (for-all je73@valid-option? je78@opt*)) je76@ls/false)) (apply (lambda (je7a@opt*) (jd35@bless (list 'make-file-options (list 'quote je7a@opt*)))) je76@ls/false) (je5f@syntax-violation '#f '"invalid syntax" je74@t))))))) (set! j27fc@jaf3@file-options-macro jaf3@file-options-macro) (set! jaf5@set-cons (lambda (je7e@x je7f@ls) (if (memq je7e@x je7f@ls) je7f@ls (cons je7e@x je7f@ls)))) (set! j27fd@jaf5@set-cons jaf5@set-cons) (set! jaf7@set-union (lambda (je82@ls1 je83@ls2) (if (null? je82@ls1) je83@ls2 (if (memq (car je82@ls1) je83@ls2) (jaf7@set-union (cdr je82@ls1) je83@ls2) (cons (car je82@ls1) (jaf7@set-union (cdr je82@ls1) je83@ls2)))))) (set! j27fe@jaf7@set-union jaf7@set-union) (set! jafc@top-mark* '(top)) (set! j27ff@jafc@top-mark* jafc@top-mark*) (set! jafe@top-marked? (lambda (je86@m*) (memq 'top je86@m*))) (set! j2800@jafe@top-marked? jafe@top-marked?) (set! jb00@gen-lexical (lambda (je88@sym) (if (symbol? je88@sym) (gensym je88@sym) (if (jb44@stx? je88@sym) (jb00@gen-lexical (jb7a@id->sym je88@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" je88@sym))))) (set! j2801@jb00@gen-lexical jb00@gen-lexical) (set! jb02@gen-global (lambda (je8a@x) (jb00@gen-lexical je8a@x))) (set! j2802@jb02@gen-global jb02@gen-global) (set! jb04@gen-label (lambda (je8c@_) (gensym))) (set! j2803@jb04@gen-label jb04@gen-label) (set! jb06@gen-top-level-label (lambda (je8e@id je8f@rib) (letrec* ((je93@find (lambda (je9e@sym je9f@mark* jea0@sym* jea1@mark** jea2@label*) (and (pair? jea0@sym*) (if (and (eq? je9e@sym (car jea0@sym*)) (same-marks? je9f@mark* (car jea1@mark**))) (car jea2@label*) (je93@find je9e@sym je9f@mark* (cdr jea0@sym*) (cdr jea1@mark**) (cdr jea2@label*))))))) (let ((je94@sym (jb7a@id->sym je8e@id)) (je95@mark* (jb4a@stx-mark* je8e@id))) (let ((je98@sym* (jb16@rib-sym* je8f@rib))) (let ((je9a@t (and (memq je94@sym (jb16@rib-sym* je8f@rib)) (je93@find je94@sym je95@mark* je98@sym* (jb1a@rib-mark** je8f@rib) (jb1e@rib-label* je8f@rib))))) (if je9a@t ((lambda (je9c@label) (if (j993@j7e0@imported-label->binding je9c@label) (gensym) je9c@label)) je9a@t) (gensym)))))))) (set! j2804@jb06@gen-top-level-label jb06@gen-top-level-label) (set! jb08@gen-define-label+loc (lambda (jea8@id jea9@rib) (let ((jeac@t (je6f@top-level-context))) (if jeac@t ((lambda (jeae@env) (let ((jeb0@label (jb06@gen-top-level-label jea8@id jea9@rib)) (jeb1@locs (je27@interaction-env-locs jeae@env))) (values jeb0@label (let ((jeb4@t (assq jeb0@label jeb1@locs))) (if jeb4@t (cdr jeb4@t) (let ((jeb6@loc (jb00@gen-lexical jea8@id))) (begin (je29@set-interaction-env-locs! jeae@env (cons (cons jeb0@label jeb6@loc) jeb1@locs)) jeb6@loc))))))) jeac@t) (values (gensym) (jb00@gen-lexical jea8@id)))))) (set! j2805@jb08@gen-define-label+loc jb08@gen-define-label+loc) (set! jb0a@gen-define-label (lambda (jeb8@id jeb9@rib) (if (je6f@top-level-context) (jb06@gen-top-level-label jeb8@id jeb9@rib) (gensym)))) (set! j2806@jb0a@gen-define-label jb0a@gen-define-label) (set! jb14@rib? (lambda (jebc@x) (and (simple-struct? jebc@x) (eq? (simple-struct-name jebc@x) 'rib)))) (set! j2807@jb14@rib? jb14@rib?) (set! jb16@rib-sym* (lambda (jebe@x) (simple-struct-ref jebe@x '0))) (set! j2808@jb16@rib-sym* jb16@rib-sym*) (set! jb18@set-rib-sym*! (lambda (jec0@x jec1@val) (simple-struct-set! jec0@x '0 jec1@val))) (set! j2809@jb18@set-rib-sym*! jb18@set-rib-sym*!) (set! jb1a@rib-mark** (lambda (jec4@x) (simple-struct-ref jec4@x '1))) (set! j280a@jb1a@rib-mark** jb1a@rib-mark**) (set! jb1c@set-rib-mark**! (lambda (jec6@x jec7@val) (simple-struct-set! jec6@x '1 jec7@val))) (set! j280b@jb1c@set-rib-mark**! jb1c@set-rib-mark**!) (set! jb1e@rib-label* (lambda (jeca@x) (simple-struct-ref jeca@x '2))) (set! j280c@jb1e@rib-label* jb1e@rib-label*) (set! jb20@set-rib-label*! (lambda (jecc@x jecd@val) (simple-struct-set! jecc@x '2 jecd@val))) (set! j280d@jb20@set-rib-label*! jb20@set-rib-label*!) (set! jb22@rib-sealed/freq (lambda (jed0@x) (simple-struct-ref jed0@x '3))) (set! j280e@jb22@rib-sealed/freq jb22@rib-sealed/freq) (set! jb24@set-rib-sealed/freq! (lambda (jed2@x jed3@val) (simple-struct-set! jed2@x '3 jed3@val))) (set! j280f@jb24@set-rib-sealed/freq! jb24@set-rib-sealed/freq!) (set! jb26@rib-cache (lambda (jed6@x) (simple-struct-ref jed6@x '4))) (set! j2810@jb26@rib-cache jb26@rib-cache) (set! jb28@set-rib-cache! (lambda (jed8@x jed9@val) (simple-struct-set! jed8@x '4 jed9@val))) (set! j2811@jb28@set-rib-cache! jb28@set-rib-cache!) (set! jb2a@dummy '3) (set! j2812@jb2a@dummy jb2a@dummy) (set! jb2c@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! j2813@jb2c@make-empty-rib jb2c@make-empty-rib) (set! jb2e@extend-rib! (lambda (jedc@rib jedd@id jede@label) (letrec* ((jee3@find (lambda (jef0@sym jef1@mark* jef2@sym* jef3@mark** jef4@label*) (and (pair? jef2@sym*) (if (and (eq? jef0@sym (car jef2@sym*)) (same-marks? jef1@mark* (car jef3@mark**))) jef4@label* (jee3@find jef0@sym jef1@mark* (cdr jef2@sym*) (cdr jef3@mark**) (cdr jef4@label*))))))) (begin (if (jb22@rib-sealed/freq jedc@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" jedc@rib) (void)) (let ((jee4@sym (jb7a@id->sym jedd@id)) (jee5@mark* (jb4a@stx-mark* jedd@id))) (let ((jee8@sym* (jb16@rib-sym* jedc@rib))) (let ((jeea@t (and (memq jee4@sym (jb16@rib-sym* jedc@rib)) (jee3@find jee4@sym jee5@mark* jee8@sym* (jb1a@rib-mark** jedc@rib) (jb1e@rib-label* jedc@rib))))) (if jeea@t ((lambda (jeec@p) (if (not (eq? jede@label (car jeec@p))) (if (je6f@top-level-context) (set-car! jeec@p jede@label) (je5f@syntax-violation '#f '"multiple definitions of identifier" jedd@id)) (void))) jeea@t) (begin (if (jb26@rib-cache jedc@rib) (hashtable-update! (jb26@rib-cache jedc@rib) jee4@sym (lambda (jeee@e) (cons (cons jee5@mark* jede@label) jeee@e)) '()) (void)) (jb18@set-rib-sym*! jedc@rib (cons jee4@sym jee8@sym*)) (jb1c@set-rib-mark**! jedc@rib (cons jee5@mark* (jb1a@rib-mark** jedc@rib))) (jb20@set-rib-label*! jedc@rib (cons jede@label (jb1e@rib-label* jedc@rib)))))))))))) (set! j2814@jb2e@extend-rib! jb2e@extend-rib!) (set! jb30@extend-rib/nc! (lambda (jefa@rib jefb@id jefc@label) (let ((jf00@sym (jb7a@id->sym jefb@id)) (jf01@mark* (jb4a@stx-mark* jefb@id))) (let ((jf04@sym* (jb16@rib-sym* jefa@rib))) (begin (if (jb26@rib-cache jefa@rib) (hashtable-update! (jb26@rib-cache jefa@rib) jf00@sym (lambda (jf06@e) (cons (cons jf01@mark* jefc@label) jf06@e)) '()) (void)) (jb18@set-rib-sym*! jefa@rib (cons jf00@sym jf04@sym*)) (jb1c@set-rib-mark**! jefa@rib (cons jf01@mark* (jb1a@rib-mark** jefa@rib))) (jb20@set-rib-label*! jefa@rib (cons jefc@label (jb1e@rib-label* jefa@rib)))))))) (set! j2815@jb30@extend-rib/nc! jb30@extend-rib/nc!) (set! jb32@make-rib-map (lambda (jf08@sym*) (let ((jf0a@ht (make-eq-hashtable))) (let jf10@f ((jf0c@i '0) (jf0d@sym* jf08@sym*)) (if (null? jf0d@sym*) jf0a@ht (begin (hashtable-update! jf0a@ht (car jf0d@sym*) (lambda (jf12@x) (cons jf0c@i jf12@x)) '()) (jf10@f (+ jf0c@i '1) (cdr jf0d@sym*)))))))) (set! j2816@jb32@make-rib-map jb32@make-rib-map) (set! jb34@seal-rib! (lambda (jf14@rib) (let ((jf16@sym* (jb16@rib-sym* jf14@rib))) (if (not (null? jf16@sym*)) (begin (jb18@set-rib-sym*! jf14@rib (list->vector jf16@sym*)) (jb1c@set-rib-mark**! jf14@rib (list->vector (jb1a@rib-mark** jf14@rib))) (jb20@set-rib-label*! jf14@rib (list->vector (jb1e@rib-label* jf14@rib))) (jb24@set-rib-sealed/freq! jf14@rib (jb32@make-rib-map jf16@sym*))) (void))))) (set! j2817@jb34@seal-rib! jb34@seal-rib!) (set! jb36@unseal-rib! (lambda (jf18@rib) (if (jb22@rib-sealed/freq jf18@rib) (begin (jb24@set-rib-sealed/freq! jf18@rib '#f) (jb18@set-rib-sym*! jf18@rib (vector->list (jb16@rib-sym* jf18@rib))) (jb1c@set-rib-mark**! jf18@rib (vector->list (jb1a@rib-mark** jf18@rib))) (jb20@set-rib-label*! jf18@rib (vector->list (jb1e@rib-label* jf18@rib)))) (void)))) (set! j2818@jb36@unseal-rib! jb36@unseal-rib!) (set! jb38@make-full-rib (lambda (jf1a@id* jf1b@label*) (let ((jf1e@r (make-simple-struct 'rib '6 (list (map jb7a@id->sym jf1a@id*) (map jb4a@stx-mark* jf1a@id*) jf1b@label* '#f '#f)))) (begin (jb34@seal-rib! jf1e@r) jf1e@r)))) (set! j2819@jb38@make-full-rib jb38@make-full-rib) (set! jb3a@rp (j6c5@j5a0@make-record-printer 'stx (lambda (jf20@x jf21@p jf22@wr) (begin (display '"#<syntax " jf21@p) (write (jb8c@stx->datum jf20@x) jf21@p) (let ((jf26@expr (jb46@stx-expr jf20@x))) (if (j6bc@j58e@annotation? jf26@expr) (let ((jf28@src (j6bd@j590@annotation-source jf26@expr))) (if (pair? jf28@src) (begin (display '" [" jf21@p) (display (cdr jf28@src) jf21@p) (display '" of " jf21@p) (display (car jf28@src) jf21@p) (display '"]" jf21@p)) (void))) (void))) (display '">" jf21@p))))) (set! j281a@jb3a@rp jb3a@rp) (set! jb44@stx? (lambda (jf2a@x) (and (simple-struct? jf2a@x) (eq? (simple-struct-name jf2a@x) 'stx)))) (set! j281b@jb44@stx? jb44@stx?) (set! jb46@stx-expr (lambda (jf2c@x) (simple-struct-ref jf2c@x '0))) (set! j281c@jb46@stx-expr jb46@stx-expr) (set! jb48@set-stx-expr! (lambda (jf2e@x jf2f@val) (simple-struct-set! jf2e@x '0 jf2f@val))) (set! j281d@jb48@set-stx-expr! jb48@set-stx-expr!) (set! jb4a@stx-mark* (lambda (jf32@x) (simple-struct-ref jf32@x '1))) (set! j281e@jb4a@stx-mark* jb4a@stx-mark*) (set! jb4c@set-stx-mark*! (lambda (jf34@x jf35@val) (simple-struct-set! jf34@x '1 jf35@val))) (set! j281f@jb4c@set-stx-mark*! jb4c@set-stx-mark*!) (set! jb4e@stx-subst* (lambda (jf38@x) (simple-struct-ref jf38@x '2))) (set! j2820@jb4e@stx-subst* jb4e@stx-subst*) (set! jb50@set-stx-subst*! (lambda (jf3a@x jf3b@val) (simple-struct-set! jf3a@x '2 jf3b@val))) (set! j2821@jb50@set-stx-subst*! jb50@set-stx-subst*!) (set! jb52@stx-ae* (lambda (jf3e@x) (simple-struct-ref jf3e@x '3))) (set! j2822@jb52@stx-ae* jb52@stx-ae*) (set! jb54@set-stx-ae*! (lambda (jf40@x jf41@val) (simple-struct-set! jf40@x '3 jf41@val))) (set! j2823@jb54@set-stx-ae*! jb54@set-stx-ae*!) (set! jb56@dummy '3) (set! j2824@jb56@dummy jb56@dummy) (set! jb58@datum->stx (lambda (jf44@id jf45@datum) (make-simple-struct 'stx '5 (list jf45@datum (jb4a@stx-mark* jf44@id) (jb4e@stx-subst* jf44@id) (jb52@stx-ae* jf44@id))))) (set! j2825@jb58@datum->stx jb58@datum->stx) (set! jb5a@gen-mark (lambda () (string '#\m))) (set! j2826@jb5a@gen-mark jb5a@gen-mark) (set! jb5c@anti-mark '#f) (set! j2827@jb5c@anti-mark jb5c@anti-mark) (set! jb5e@anti-mark? not) (set! j2828@jb5e@anti-mark? jb5e@anti-mark?) (set! jb60@mkstx (lambda (jf48@e jf49@m* jf4a@s* jf4b@ae*) (if (and (jb44@stx? jf48@e) (not (jafe@top-marked? jf49@m*))) (call-with-values (lambda () (join-wraps jf49@m* jf4a@s* jf4b@ae* jf48@e)) (lambda (jf56@jf51 jf57@jf53 jf58@jf55) (let ((jf5c@ae* jf58@jf55) (jf5d@s* jf57@jf53) (jf5e@m* jf56@jf51)) (make-simple-struct 'stx '5 (list (jb46@stx-expr jf48@e) jf5e@m* jf5d@s* jf5c@ae*))))) (make-simple-struct 'stx '5 (list jf48@e jf49@m* jf4a@s* jf4b@ae*))))) (set! j2829@jb60@mkstx jb60@mkstx) (set! jb62@add-subst (lambda (jf62@subst jf63@e) (jb60@mkstx jf63@e '() (list jf62@subst) '()))) (set! j282a@jb62@add-subst jb62@add-subst) (set! jb64@add-mark (lambda (jf66@mark jf67@subst jf68@expr jf69@ae) (letrec* ((jf6f@merge-ae* (lambda (jf96@ls1 jf97@ls2) (if (and (pair? jf96@ls1) (pair? jf97@ls2) (not (car jf97@ls2))) (jf71@cancel jf96@ls1 jf97@ls2) (append jf96@ls1 jf97@ls2)))) (jf71@cancel (lambda (jf8c@ls1 jf8d@ls2) (let jf94@f ((jf90@x (car jf8c@ls1)) (jf91@ls1 (cdr jf8c@ls1))) (if (null? jf91@ls1) (cdr jf8d@ls2) (cons jf90@x (jf94@f (car jf91@ls1) (cdr jf91@ls1))))))) (jf73@f (lambda (jf74@e jf75@m jf76@s1* jf77@ae*) (if (pair? jf74@e) (let ((jf7c@a (jf73@f (car jf74@e) jf75@m jf76@s1* jf77@ae*)) (jf7d@d (jf73@f (cdr jf74@e) jf75@m jf76@s1* jf77@ae*))) (if (eq? jf7c@a jf7d@d) jf74@e (cons jf7c@a jf7d@d))) (if (vector? jf74@e) (let ((jf80@ls1 (vector->list jf74@e))) (let ((jf82@ls2 (map (lambda (jf84@x) (jf73@f jf84@x jf75@m jf76@s1* jf77@ae*)) jf80@ls1))) (if (for-all eq? jf80@ls1 jf82@ls2) jf74@e (list->vector jf82@ls2)))) (if (jb44@stx? jf74@e) (let ((jf86@m* (jb4a@stx-mark* jf74@e)) (jf87@s2* (jb4e@stx-subst* jf74@e))) (if (null? jf86@m*) (jf73@f (jb46@stx-expr jf74@e) jf75@m (append jf76@s1* jf87@s2*) (jf6f@merge-ae* jf77@ae* (jb52@stx-ae* jf74@e))) (if (eq? (car jf86@m*) jb5c@anti-mark) (make-simple-struct 'stx '5 (list (jb46@stx-expr jf74@e) (cdr jf86@m*) (cdr (append jf76@s1* jf87@s2*)) (jf6f@merge-ae* jf77@ae* (jb52@stx-ae* jf74@e)))) (make-simple-struct 'stx '5 (list (jb46@stx-expr jf74@e) (cons jf75@m jf86@m*) (let ((jf8a@s* (cons 'shift (append jf76@s1* jf87@s2*)))) (if jf67@subst (cons jf67@subst jf8a@s*) jf8a@s*)) (jf6f@merge-ae* jf77@ae* (jb52@stx-ae* jf74@e))))))) (if (symbol? jf74@e) (je5f@syntax-violation '#f '"raw symbol encountered in output of macro" jf68@expr jf74@e) (make-simple-struct 'stx '5 (list jf74@e (list jf75@m) jf76@s1* jf77@ae*))))))))) (jb60@mkstx (jf73@f jf68@expr jf66@mark '() '()) '() '() (list jf69@ae))))) (set! j282b@jb64@add-mark jb64@add-mark) (set! jb66@syntax-kind? (lambda (jf9a@x jf9b@p?) (if (jb44@stx? jf9a@x) (jb66@syntax-kind? (jb46@stx-expr jf9a@x) jf9b@p?) (if (j6bc@j58e@annotation? jf9a@x) (jb66@syntax-kind? (j6be@j592@annotation-expression jf9a@x) jf9b@p?) (jf9b@p? jf9a@x))))) (set! j282c@jb66@syntax-kind? jb66@syntax-kind?) (set! jb68@syntax-vector->list (lambda (jf9e@x) (if (jb44@stx? jf9e@x) (let ((jfa0@ls (jb68@syntax-vector->list (jb46@stx-expr jf9e@x))) (jfa1@m* (jb4a@stx-mark* jf9e@x)) (jfa2@s* (jb4e@stx-subst* jf9e@x)) (jfa3@ae* (jb52@stx-ae* jf9e@x))) (map (lambda (jfa8@x) (jb60@mkstx jfa8@x jfa1@m* jfa2@s* jfa3@ae*)) jfa0@ls)) (if (j6bc@j58e@annotation? jf9e@x) (jb68@syntax-vector->list (j6be@j592@annotation-expression jf9e@x)) (if (vector? jf9e@x) (vector->list jf9e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" jf9e@x)))))) (set! j282d@jb68@syntax-vector->list jb68@syntax-vector->list) (set! jb6a@syntax-pair? (lambda (jfaa@x) (jb66@syntax-kind? jfaa@x pair?))) (set! j282e@jb6a@syntax-pair? jb6a@syntax-pair?) (set! jb6c@syntax-vector? (lambda (jfac@x) (jb66@syntax-kind? jfac@x vector?))) (set! j282f@jb6c@syntax-vector? jb6c@syntax-vector?) (set! jb6e@syntax-null? (lambda (jfae@x) (jb66@syntax-kind? jfae@x null?))) (set! j2830@jb6e@syntax-null? jb6e@syntax-null?) (set! jb70@syntax-list? (lambda (jfb0@x) (or (jb6e@syntax-null? jfb0@x) (and (jb6a@syntax-pair? jfb0@x) (jb70@syntax-list? (jb74@syntax-cdr jfb0@x)))))) (set! j2831@jb70@syntax-list? jb70@syntax-list?) (set! jb72@syntax-car (lambda (jfb2@x) (if (jb44@stx? jfb2@x) (jb60@mkstx (jb72@syntax-car (jb46@stx-expr jfb2@x)) (jb4a@stx-mark* jfb2@x) (jb4e@stx-subst* jfb2@x) (jb52@stx-ae* jfb2@x)) (if (j6bc@j58e@annotation? jfb2@x) (jb72@syntax-car (j6be@j592@annotation-expression jfb2@x)) (if (pair? jfb2@x) (car jfb2@x) (assertion-violation 'syntax-car '"BUG: not a pair" jfb2@x)))))) (set! j2832@jb72@syntax-car jb72@syntax-car) (set! jb74@syntax-cdr (lambda (jfb4@x) (if (jb44@stx? jfb4@x) (jb60@mkstx (jb74@syntax-cdr (jb46@stx-expr jfb4@x)) (jb4a@stx-mark* jfb4@x) (jb4e@stx-subst* jfb4@x) (jb52@stx-ae* jfb4@x)) (if (j6bc@j58e@annotation? jfb4@x) (jb74@syntax-cdr (j6be@j592@annotation-expression jfb4@x)) (if (pair? jfb4@x) (cdr jfb4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" jfb4@x)))))) (set! j2833@jb74@syntax-cdr jb74@syntax-cdr) (set! jb76@syntax->list (lambda (jfb6@x) (if (jb6a@syntax-pair? jfb6@x) (cons (jb72@syntax-car jfb6@x) (jb76@syntax->list (jb74@syntax-cdr jfb6@x))) (if (jb6e@syntax-null? jfb6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" jfb6@x))))) (set! j2834@jb76@syntax->list jb76@syntax->list) (set! jb78@id? (lambda (jfb8@x) (and (jb44@stx? jfb8@x) (symbol? (jb46@stx-expr jfb8@x))))) (set! j2835@jb78@id? jb78@id?) (set! jb7a@id->sym (lambda (jfba@x) (jb46@stx-expr jfba@x))) (set! j2836@jb7a@id->sym jb7a@id->sym) (set! jb7c@bound-id=? (lambda (jfbc@x jfbd@y) (and (eq? (jb7a@id->sym jfbc@x) (jb7a@id->sym jfbd@y)) (same-marks? (jb4a@stx-mark* jfbc@x) (jb4a@stx-mark* jfbd@y))))) (set! j2837@jb7c@bound-id=? jb7c@bound-id=?) (set! jb7e@free-id=? (lambda (jfc0@i jfc1@j) (let ((jfc4@t0 (id->real-label jfc0@i)) (jfc5@t1 (id->real-label jfc1@j))) (if (or jfc4@t0 jfc5@t1) (eq? jfc4@t0 jfc5@t1) (eq? (jb7a@id->sym jfc0@i) (jb7a@id->sym jfc1@j)))))) (set! j2838@jb7e@free-id=? jb7e@free-id=?) (set! jb80@valid-bound-ids? (lambda (jfc8@id*) (and (for-all jb78@id? jfc8@id*) (jb82@distinct-bound-ids? jfc8@id*)))) (set! j2839@jb80@valid-bound-ids? jb80@valid-bound-ids?) (set! jb82@distinct-bound-ids? (lambda (jfca@id*) (or (null? jfca@id*) (and (not (jb84@bound-id-member? (car jfca@id*) (cdr jfca@id*))) (jb82@distinct-bound-ids? (cdr jfca@id*)))))) (set! j283a@jb82@distinct-bound-ids? jb82@distinct-bound-ids?) (set! jb84@bound-id-member? (lambda (jfcc@id jfcd@id*) (and (pair? jfcd@id*) (or (jb7c@bound-id=? jfcc@id (car jfcd@id*)) (jb84@bound-id-member? jfcc@id (cdr jfcd@id*)))))) (set! j283b@jb84@bound-id-member? jb84@bound-id-member?) (set! jb86@self-evaluating? (lambda (jfd0@x) (or (number? jfd0@x) (string? jfd0@x) (char? jfd0@x) (boolean? jfd0@x) (regexp? jfd0@x) (bytevector? jfd0@x)))) (set! j283c@jb86@self-evaluating? jb86@self-evaluating?) (set! jb88@strip-annotations (lambda (jfd2@x) (if (pair? jfd2@x) (cons (jb88@strip-annotations (car jfd2@x)) (jb88@strip-annotations (cdr jfd2@x))) (if (vector? jfd2@x) (vector-map jb88@strip-annotations jfd2@x) (if (j6bc@j58e@annotation? jfd2@x) (j6bb@j58c@annotation-stripped jfd2@x) jfd2@x))))) (set! j283d@jb88@strip-annotations jb88@strip-annotations) (set! jb8a@strip (lambda (jfd4@x jfd5@m*) (if (jafe@top-marked? jfd5@m*) (if (or (j6bc@j58e@annotation? jfd4@x) (and (pair? jfd4@x) (j6bc@j58e@annotation? (car jfd4@x))) (and (vector? jfd4@x) (> (vector-length jfd4@x) '0) (j6bc@j58e@annotation? (vector-ref jfd4@x '0)))) (jb88@strip-annotations jfd4@x) jfd4@x) (let jfda@f ((jfd8@x jfd4@x)) (if (jb44@stx? jfd8@x) (begin (if (pair? (jb46@stx-expr jfd8@x)) (begin (set-source-info! (jb46@stx-expr jfd8@x) '#f) (set-source-info! (cdr (jb46@stx-expr jfd8@x)) '#f) (set-source-info! (car (jb46@stx-expr jfd8@x)) '#f)) (void)) (jb8a@strip (jb46@stx-expr jfd8@x) (jb4a@stx-mark* jfd8@x))) (if (j6bc@j58e@annotation? jfd8@x) (j6bb@j58c@annotation-stripped jfd8@x) (if (pair? jfd8@x) (let ((jfdc@a (jfda@f (car jfd8@x))) (jfdd@d (jfda@f (cdr jfd8@x)))) (if (and (eq? jfdc@a (car jfd8@x)) (eq? jfdd@d (cdr jfd8@x))) jfd8@x (cons jfdc@a jfdd@d))) (if (vector? jfd8@x) (let ((jfe0@old (vector->list jfd8@x))) (let ((jfe2@new (map jfda@f jfe0@old))) (if (for-all eq? jfe0@old jfe2@new) jfd8@x (list->vector jfe2@new)))) jfd8@x)))))))) (set! j283e@jb8a@strip jb8a@strip) (set! jb8c@stx->datum (lambda (jfe4@x) (jb8a@strip jfe4@x '()))) (set! j283f@jb8c@stx->datum jb8c@stx->datum) (set! jb8e@id->label (lambda (jfe6@id) (or (id->real-label jfe6@id) (let ((jfe8@t (je6f@top-level-context))) (if jfe8@t ((lambda (jfea@env) (let ((jfec@rib (je1f@interaction-env-rib jfea@env))) (call-with-values (lambda () (jb08@gen-define-label+loc jfe6@id jfec@rib)) (lambda (jff2@jfef jff3@jff1) (let ((jff6@loc_ jff3@jff1) (jff7@lab jff2@jfef)) (begin (jb2e@extend-rib! jfec@rib jfe6@id jff7@lab) jff7@lab)))))) jfe8@t) '#f))))) (set! j2840@jb8e@id->label jb8e@id->label) (set! jb90@label->binding (lambda (jffa@x jffb@r) (let ((jffe@t (j993@j7e0@imported-label->binding jffa@x))) (if jffe@t ((lambda (j1000@b) (if (and (pair? j1000@b) (eq? (car j1000@b) '$core-rtd)) (cons '$rtd (map jd35@bless (cdr j1000@b))) (if (and (pair? j1000@b) (eq? (car j1000@b) 'global-rtd)) (let ((j1002@lib (cadr j1000@b)) (j1003@loc (cddr j1000@b))) (cons '$rtd (symbol-value j1003@loc))) j1000@b))) jffe@t) (let ((j1006@t (assq jffa@x jffb@r))) (if j1006@t (cdr j1006@t) (let ((j1008@t (je6f@top-level-context))) (if j1008@t ((lambda (j100a@env) (let ((j100c@t (assq jffa@x (je27@interaction-env-locs j100a@env)))) (if j100c@t ((lambda (j100e@p) (cons* 'lexical (cdr j100e@p) '#f)) j100c@t) '(displaced-lexical . #f)))) j1008@t) '(displaced-lexical . #f))))))))) (set! j2841@jb90@label->binding jb90@label->binding) (set! jb92@make-binding cons) (set! j2842@jb92@make-binding jb92@make-binding) (set! jb94@binding-type car) (set! j2843@jb94@binding-type jb94@binding-type) (set! jb96@binding-value cdr) (set! j2844@jb96@binding-value jb96@binding-value) (set! jb98@raise-unbound-error (lambda (j1010@id) (je5d@syntax-violation* '#f '"unbound identifier" j1010@id (make-undefined-violation)))) (set! j2845@jb98@raise-unbound-error jb98@raise-unbound-error) (set! jb9a@syntax-type (lambda (j1012@e j1013@r) (if (jb78@id? j1012@e) (let ((j1016@id j1012@e)) (let ((j1018@label (jb8e@id->label j1016@id))) (let ((j101a@b (jb90@label->binding j1018@label j1013@r))) (let ((j101c@type (jb94@binding-type j101a@b))) (begin (if (not j1018@label) (jb98@raise-unbound-error j1016@id) (void)) (let ((j101e@t j101c@type)) (if (memv j101e@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values j101c@type (jb96@binding-value j101a@b) j1016@id) (values 'other '#f '#f)))))))) (if (jb6a@syntax-pair? j1012@e) (let ((j1020@id (jb72@syntax-car j1012@e))) (if (jb78@id? j1020@id) (let ((j1022@label (jb8e@id->label j1020@id))) (let ((j1024@b (jb90@label->binding j1022@label j1013@r))) (let ((j1026@type (jb94@binding-type j1024@b))) (begin (if (not j1022@label) (jb98@raise-unbound-error j1020@id) (void)) (let ((j1028@t j1026@type)) (if (memv j1028@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values j1026@type (jb96@binding-value j1024@b) j1020@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((j102a@d (jb8c@stx->datum j1012@e))) (if (jb86@self-evaluating? j102a@d) (values 'constant j102a@d '#f) (values 'other '#f '#f))))))) (set! j2846@jb9a@syntax-type jb9a@syntax-type) (set! jba8@sanitize-binding (lambda (j102c@x j102d@src) (if (procedure? j102c@x) (cons* 'local-macro j102c@x j102d@src) (if (and (pair? j102c@x) (eq? (car j102c@x) 'macro!) (procedure? (cdr j102c@x))) (cons* 'local-macro! (cdr j102c@x) j102d@src) (if (and (pair? j102c@x) (eq? (car j102c@x) '$rtd)) j102c@x (assertion-violation 'expand '"invalid transformer" j102c@x)))))) (set! j2847@jba8@sanitize-binding jba8@sanitize-binding) (set! jbaa@make-variable-transformer (lambda (j1030@x) (if (procedure? j1030@x) (cons 'macro! j1030@x) (assertion-violation 'make-variable-transformer '"not a procedure" j1030@x)))) (set! j2848@jbaa@make-variable-transformer jbaa@make-variable-transformer) (set! jbac@variable-transformer? (lambda (j1032@x) (and (pair? j1032@x) (eq? (car j1032@x) 'macro!) (procedure? (cdr j1032@x))))) (set! j2849@jbac@variable-transformer? jbac@variable-transformer?) (set! jbae@variable-transformer-procedure (lambda (j1034@x) (if (jbac@variable-transformer? j1034@x) (cdr j1034@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" j1034@x)))) (set! j284a@jbae@variable-transformer-procedure jbae@variable-transformer-procedure) (set! jbb0@make-eval-transformer (lambda (j1036@x) (jba8@sanitize-binding (eval-core (j71e@j6d6@expanded->core j1036@x)) j1036@x))) (set! j284b@jbb0@make-eval-transformer jbb0@make-eval-transformer) (set! jd01@parse-define (lambda (j1038@x) (let ((j103a@t j1038@x)) (let ((j103c@ls/false (jd7f@syntax-dispatch j103a@t '(_ (any . any) any . each-any)))) (if (and j103c@ls/false (apply (lambda (j103e@id j103f@fmls j1040@b j1041@b*) (jb78@id? j103e@id)) j103c@ls/false)) (apply (lambda (j1046@id j1047@fmls j1048@b j1049@b*) (begin (jda5@verify-formals j1047@fmls j1038@x) (values j1046@id (cons 'defun (cons j1047@fmls (cons j1048@b j1049@b*)))))) j103c@ls/false) (let ((j104e@t j103a@t)) (let ((j1050@ls/false (jd7f@syntax-dispatch j104e@t '(_ any any)))) (if (and j1050@ls/false (apply (lambda (j1052@id j1053@val) (jb78@id? j1052@id)) j1050@ls/false)) (apply (lambda (j1056@id j1057@val) (values j1056@id (cons 'expr j1057@val))) j1050@ls/false) (let ((j105a@t j104e@t)) (let ((j105c@ls/false (jd7f@syntax-dispatch j105a@t '(_ any)))) (if (and j105c@ls/false (apply (lambda (j105e@id) (jb78@id? j105e@id)) j105c@ls/false)) (apply (lambda (j1060@id) (values j1060@id (cons 'expr (jd35@bless '(void))))) j105c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j105a@t)))))))))))) (set! j284c@jd01@parse-define jd01@parse-define) (set! jd03@parse-define-syntax (lambda (j1062@x) (let ((j1064@t j1062@x)) (let ((j1066@ls/false (jd7f@syntax-dispatch j1064@t '(_ any any)))) (if (and j1066@ls/false (apply (lambda (j1068@id j1069@val) (jb78@id? j1068@id)) j1066@ls/false)) (apply (lambda (j106c@id j106d@val) (values j106c@id j106d@val)) j1066@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1064@t)))))) (set! j284d@jd03@parse-define-syntax jd03@parse-define-syntax) (set! jd05@scheme-stx-hashtable (make-eq-hashtable)) (set! j284e@jd05@scheme-stx-hashtable jd05@scheme-stx-hashtable) (set! jd07@scheme-stx (lambda (j1070@sym) (or (hashtable-ref jd05@scheme-stx-hashtable j1070@sym '#f) (let ((j1072@subst (j96f@j798@library-subst (j98d@j7d4@find-library-by-name '(psyntax system $all))))) (let ((j1074@stx (make-simple-struct 'stx '5 (list j1070@sym jafc@top-mark* '() '())))) (let ((j1076@stx (let ((j1078@t (assq j1070@sym j1072@subst))) (if j1078@t ((lambda (j107a@x) (let ((j107c@name (car j107a@x)) (j107d@label (cdr j107a@x))) (jb62@add-subst (make-simple-struct 'rib '6 (list (list j107c@name) (list jafc@top-mark*) (list j107d@label) '#f '#f)) j1074@stx))) j1078@t) j1074@stx)))) (begin (hashtable-set! jd05@scheme-stx-hashtable j1070@sym j1076@stx) j1076@stx))))))) (set! j284f@jd07@scheme-stx jd07@scheme-stx) (set! jd09@lexical-var car) (set! j2850@jd09@lexical-var jd09@lexical-var) (set! jd0b@lexical-mutable? cdr) (set! j2851@jd0b@lexical-mutable? jd0b@lexical-mutable?) (set! jd0d@set-lexical-mutable! set-cdr!) (set! j2852@jd0d@set-lexical-mutable! jd0d@set-lexical-mutable!) (set! jd0f@add-lexical (lambda (j1080@lab j1081@lex j1082@r) (cons (cons* j1080@lab 'lexical j1081@lex '#f) j1082@r))) (set! j2853@jd0f@add-lexical jd0f@add-lexical) (set! jd11@add-lexicals (lambda (j1086@lab* j1087@lex* j1088@r) (if (null? j1086@lab*) j1088@r (jd11@add-lexicals (cdr j1086@lab*) (cdr j1087@lex*) (jd0f@add-lexical (car j1086@lab*) (car j1087@lex*) j1088@r))))) (set! j2854@jd11@add-lexicals jd11@add-lexicals) (set! jd13@letrec-helper (lambda (j108c@e j108d@r j108e@mr j108f@build) (let ((j1094@t j108c@e)) (let ((j1096@ls/false (jd7f@syntax-dispatch j1094@t '(_ #(each (any any)) any . each-any)))) (if j1096@ls/false (apply (lambda (j1098@lhs* j1099@rhs* j109a@b j109b@b*) (if (not (jb80@valid-bound-ids? j1098@lhs*)) (jd39@invalid-fmls-error j108c@e j1098@lhs*) (let ((j10a0@lex* (map jb00@gen-lexical j1098@lhs*)) (j10a1@lab* (map jb04@gen-label j1098@lhs*))) (let ((j10a4@rib (jb38@make-full-rib j1098@lhs* j10a1@lab*)) (j10a5@r (jd11@add-lexicals j10a1@lab* j10a0@lex* j108d@r))) (let ((j10a8@body (jdb7@chi-internal (jb62@add-subst j10a4@rib (cons j109a@b j109b@b*)) j10a5@r j108e@mr)) (j10a9@rhs* (jd9d@chi-expr* (map (lambda (j10ac@x) (jb62@add-subst j10a4@rib j10ac@x)) j1099@rhs*) j10a5@r j108e@mr))) (j108f@build '#f j10a0@lex* j10a9@rhs* j10a8@body)))))) j1096@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1094@t)))))) (set! j2855@jd13@letrec-helper jd13@letrec-helper) (set! jd15@let-transformer (lambda (j10ae@e j10af@r j10b0@mr) (let ((j10b4@t j10ae@e)) (let ((j10b6@ls/false (jd7f@syntax-dispatch j10b4@t '(_ #(each (any any)) any . each-any)))) (if j10b6@ls/false (apply (lambda (j10b8@lhs* j10b9@rhs* j10ba@b j10bb@b*) (if (not (jb80@valid-bound-ids? j10b8@lhs*)) (jd39@invalid-fmls-error j10ae@e j10b8@lhs*) (let ((j10c0@lex* (map jb00@gen-lexical j10b8@lhs*)) (j10c1@lab* (map jb04@gen-label j10b8@lhs*)) (j10c2@rhs* (jd9d@chi-expr* j10b9@rhs* j10af@r j10b0@mr))) (let ((j10c6@rib (jb38@make-full-rib j10b8@lhs* j10c1@lab*)) (j10c7@r (jd11@add-lexicals j10c1@lab* j10c0@lex* j10af@r))) (let ((j10ca@body (jdb7@chi-internal (jb62@add-subst j10c6@rib (cons j10ba@b j10bb@b*)) j10c7@r j10b0@mr))) (jae0@ja43@build-let '#f j10c0@lex* j10c2@rhs* j10ca@body)))))) j10b6@ls/false) (let ((j10cc@t j10b4@t)) (let ((j10ce@ls/false (jd7f@syntax-dispatch j10cc@t '(_ any #(each (any any)) any . each-any)))) (if j10ce@ls/false (apply (lambda (j10d0@loop j10d1@lhs* j10d2@rhs* j10d3@b j10d4@b*) (if (not (jb80@valid-bound-ids? j10d1@lhs*)) (jd39@invalid-fmls-error j10ae@e j10d1@lhs*) (let ((j10da@lex* (map jb00@gen-lexical j10d1@lhs*)) (j10db@lab* (map jb04@gen-label j10d1@lhs*)) (j10dc@rhs* (jd9d@chi-expr* j10d2@rhs* j10af@r j10b0@mr)) (j10dd@loop-lex (jb00@gen-lexical j10d0@loop)) (j10de@loop-lab (jb04@gen-label j10d0@loop))) (let ((j10e4@loop-rib (jb38@make-full-rib (list j10d0@loop) (list j10de@loop-lab))) (j10e5@rib (jb38@make-full-rib j10d1@lhs* j10db@lab*)) (j10e6@r (jd11@add-lexicals (cons j10de@loop-lab j10db@lab*) (cons j10dd@loop-lex j10da@lex*) j10af@r))) (let ((j10ea@body (jdb7@chi-internal (jb62@add-subst j10e4@loop-rib (jb62@add-subst j10e5@rib (cons j10d3@b j10d4@b*))) j10e6@r j10b0@mr))) (jae1@ja45@build-named-let '#f j10dd@loop-lex j10da@lex* j10dc@rhs* j10ea@body)))))) j10ce@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j10cc@t))))))))) (set! j2856@jd15@let-transformer jd15@let-transformer) (set! jd17@letrec-transformer (lambda (j10ec@e j10ed@r j10ee@mr) (jd13@letrec-helper j10ec@e j10ed@r j10ee@mr jadf@ja41@build-letrec))) (set! j2857@jd17@letrec-transformer jd17@letrec-transformer) (set! jd19@letrec*-transformer (lambda (j10f2@e j10f3@r j10f4@mr) (jd13@letrec-helper j10f2@e j10f3@r j10f4@mr jae2@ja47@build-letrec*))) (set! j2858@jd19@letrec*-transformer jd19@letrec*-transformer) (set! jd1b@fluid-let-syntax-transformer (lambda (j10f8@e j10f9@r j10fa@mr) (letrec* ((j10ff@lookup (lambda (j1112@x) (or (jb8e@id->label j1112@x) (je5f@syntax-violation '#f '"unbound identifier" j10f8@e j1112@x))))) (let ((j1100@t j10f8@e)) (let ((j1102@ls/false (jd7f@syntax-dispatch j1100@t '(_ #(each (any any)) any . each-any)))) (if j1102@ls/false (apply (lambda (j1104@lhs* j1105@rhs* j1106@b j1107@b*) (if (not (jb80@valid-bound-ids? j1104@lhs*)) (jd39@invalid-fmls-error j10f8@e j1104@lhs*) (let ((j110c@lab* (map j10ff@lookup j1104@lhs*)) (j110d@rhs* (map (lambda (j1110@x) (jbb0@make-eval-transformer (jdd9@expand-transformer j1110@x j10fa@mr))) j1105@rhs*))) (jdb7@chi-internal (cons j1106@b j1107@b*) (append (map cons j110c@lab* j110d@rhs*) j10f9@r) (append (map cons j110c@lab* j110d@rhs*) j10fa@mr))))) j1102@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1100@t))))))) (set! j2859@jd1b@fluid-let-syntax-transformer jd1b@fluid-let-syntax-transformer) (set! jd1d@type-descriptor-transformer (lambda (j1114@e j1115@r j1116@mr) (let ((j111a@t j1114@e)) (let ((j111c@ls/false (jd7f@syntax-dispatch j111a@t '(_ any)))) (if (and j111c@ls/false (apply (lambda (j111e@id) (jb78@id? j111e@id)) j111c@ls/false)) (apply (lambda (j1120@id) (let ((j1122@lab (jb8e@id->label j1120@id))) (let ((j1124@b (jb90@label->binding j1122@lab j1115@r))) (let ((j1126@type (jb94@binding-type j1124@b))) (begin (if (not j1122@lab) (jb98@raise-unbound-error j1120@id) (void)) (if (not (and (eq? j1126@type '$rtd) (not (list? (jb96@binding-value j1124@b))))) (je5f@syntax-violation '#f '"not a record type" j1114@e) (void)) (list 'quote (jb96@binding-value j1124@b))))))) j111c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j111a@t)))))) (set! j285a@jd1d@type-descriptor-transformer jd1d@type-descriptor-transformer) (set! jd1f@record-type-descriptor-transformer (lambda (j1128@e j1129@r j112a@mr) (let ((j112e@t j1128@e)) (let ((j1130@ls/false (jd7f@syntax-dispatch j112e@t '(_ any)))) (if (and j1130@ls/false (apply (lambda (j1132@id) (jb78@id? j1132@id)) j1130@ls/false)) (apply (lambda (j1134@id) (let ((j1136@lab (jb8e@id->label j1134@id))) (let ((j1138@b (jb90@label->binding j1136@lab j1129@r))) (let ((j113a@type (jb94@binding-type j1138@b))) (begin (if (not j1136@lab) (jb98@raise-unbound-error j1134@id) (void)) (if (not (and (eq? j113a@type '$rtd) (list? (jb96@binding-value j1138@b)))) (je5f@syntax-violation '#f '"not a record type" j1128@e) (void)) (jda1@chi-expr (car (jb96@binding-value j1138@b)) j1129@r j112a@mr)))))) j1130@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j112e@t)))))) (set! j285b@jd1f@record-type-descriptor-transformer jd1f@record-type-descriptor-transformer) (set! jd21@record-constructor-descriptor-transformer (lambda (j113c@e j113d@r j113e@mr) (let ((j1142@t j113c@e)) (let ((j1144@ls/false (jd7f@syntax-dispatch j1142@t '(_ any)))) (if (and j1144@ls/false (apply (lambda (j1146@id) (jb78@id? j1146@id)) j1144@ls/false)) (apply (lambda (j1148@id) (let ((j114a@lab (jb8e@id->label j1148@id))) (let ((j114c@b (jb90@label->binding j114a@lab j113d@r))) (let ((j114e@type (jb94@binding-type j114c@b))) (begin (if (not j114a@lab) (jb98@raise-unbound-error j1148@id) (void)) (if (not (and (eq? j114e@type '$rtd) (list? (jb96@binding-value j114c@b)))) (je5f@syntax-violation '#f '"invalid type" j113c@e) (void)) (jda1@chi-expr (cadr (jb96@binding-value j114c@b)) j113d@r j113e@mr)))))) j1144@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1142@t)))))) (set! j285c@jd21@record-constructor-descriptor-transformer jd21@record-constructor-descriptor-transformer) (set! jd23@when-macro (lambda (j1150@e) (let ((j1152@t j1150@e)) (let ((j1154@ls/false (jd7f@syntax-dispatch j1152@t '(_ any any . each-any)))) (if j1154@ls/false (apply (lambda (j1156@test j1157@e j1158@e*) (jd35@bless (list 'if j1156@test (cons 'begin (cons j1157@e j1158@e*))))) j1154@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1152@t)))))) (set! j285d@jd23@when-macro jd23@when-macro) (set! jd25@unless-macro (lambda (j115c@e) (let ((j115e@t j115c@e)) (let ((j1160@ls/false (jd7f@syntax-dispatch j115e@t '(_ any any . each-any)))) (if j1160@ls/false (apply (lambda (j1162@test j1163@e j1164@e*) (jd35@bless (list 'if (list 'not j1162@test) (cons 'begin (cons j1163@e j1164@e*))))) j1160@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j115e@t)))))) (set! j285e@jd25@unless-macro jd25@unless-macro) (set! jd27@if-transformer (lambda (j1168@e j1169@r j116a@mr) (let ((j116e@t j1168@e)) (let ((j1170@ls/false (jd7f@syntax-dispatch j116e@t '(_ any any any)))) (if j1170@ls/false (apply (lambda (j1172@e0 j1173@e1 j1174@e2) (list 'if (jda1@chi-expr j1172@e0 j1169@r j116a@mr) (jda1@chi-expr j1173@e1 j1169@r j116a@mr) (jda1@chi-expr j1174@e2 j1169@r j116a@mr))) j1170@ls/false) (let ((j1178@t j116e@t)) (let ((j117a@ls/false (jd7f@syntax-dispatch j1178@t '(_ any any)))) (if j117a@ls/false (apply (lambda (j117c@e0 j117d@e1) (list 'if (jda1@chi-expr j117c@e0 j1169@r j116a@mr) (jda1@chi-expr j117d@e1 j1169@r j116a@mr) (jade@ja3f@build-void))) j117a@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1178@t))))))))) (set! j285f@jd27@if-transformer jd27@if-transformer) (set! jd29@and-transformer (lambda (j1180@e j1181@r j1182@mr) (let ((j1186@t j1180@e)) (let ((j1188@ls/false (jd7f@syntax-dispatch j1186@t '(_ . each-any)))) (if j1188@ls/false (apply (lambda (j118a@e*) (cons 'and (jd9d@chi-expr* j118a@e* j1181@r j1182@mr))) j1188@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1186@t)))))) (set! j2860@jd29@and-transformer jd29@and-transformer) (set! jd2b@or-transformer (lambda (j118c@e j118d@r j118e@mr) (let ((j1192@t j118c@e)) (let ((j1194@ls/false (jd7f@syntax-dispatch j1192@t '(_ . each-any)))) (if j1194@ls/false (apply (lambda (j1196@e*) (cons 'or (jd9d@chi-expr* j1196@e* j118d@r j118e@mr))) j1194@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1192@t)))))) (set! j2861@jd2b@or-transformer jd2b@or-transformer) (set! jd2d@case-macro (lambda (j1198@e) (letrec* ((j119b@build-last (lambda (j11c2@cls) (let ((j11c4@t j11c2@cls)) (let ((j11c6@ls/false (jd7f@syntax-dispatch j11c4@t '(#(scheme-id else) any . each-any)))) (if j11c6@ls/false (apply (lambda (j11c8@e j11c9@e*) (cons 'begin (cons j11c8@e j11c9@e*))) j11c6@ls/false) (let ((j11cc@t j11c4@t)) (let ((j11ce@ls/false (jd7f@syntax-dispatch j11cc@t '_))) (if j11ce@ls/false (apply (lambda () (j119d@build-one j11c2@cls '(if #f #f))) j11ce@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j11cc@t))))))))) (j119d@build-one (lambda (j11b4@cls j11b5@k) (let ((j11b8@t j11b4@cls)) (let ((j11ba@ls/false (jd7f@syntax-dispatch j11b8@t '(each-any any . each-any)))) (if j11ba@ls/false (apply (lambda (j11bc@d* j11bd@e j11be@e*) (list 'if (list 'memv 't (list 'quote j11bc@d*)) (cons 'begin (cons j11bd@e j11be@e*)) j11b5@k)) j11ba@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j11b8@t))))))) (let ((j119e@t j1198@e)) (let ((j11a0@ls/false (jd7f@syntax-dispatch j119e@t '(_ any)))) (if j11a0@ls/false (apply (lambda (j11a2@expr) (jd35@bless (cons 'let (cons (list (list 't j11a2@expr)) '((if #f #f)))))) j11a0@ls/false) (let ((j11a4@t j119e@t)) (let ((j11a6@ls/false (jd7f@syntax-dispatch j11a4@t '(_ any any . each-any)))) (if j11a6@ls/false (apply (lambda (j11a8@expr j11a9@cls j11aa@cls*) (jd35@bless (list 'let (list (list 't j11a8@expr)) (let j11b2@f ((j11ae@cls j11a9@cls) (j11af@cls* j11aa@cls*)) (if (null? j11af@cls*) (j119b@build-last j11ae@cls) (j119d@build-one j11ae@cls (j11b2@f (car j11af@cls*) (cdr j11af@cls*)))))))) j11a6@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j11a4@t)))))))))) (set! j2862@jd2d@case-macro jd2d@case-macro) (set! jd2f@quote-transformer (lambda (j11d0@e j11d1@r j11d2@mr) (let ((j11d6@t j11d0@e)) (let ((j11d8@ls/false (jd7f@syntax-dispatch j11d6@t '(_ any)))) (if j11d8@ls/false (apply (lambda (j11da@datum) (list 'quote (jb8c@stx->datum j11da@datum))) j11d8@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j11d6@t)))))) (set! j2863@jd2f@quote-transformer jd2f@quote-transformer) (set! jd31@case-lambda-transformer (lambda (j11dc@e j11dd@r j11de@mr) (let ((j11e2@t j11dc@e)) (let ((j11e4@ls/false (jd7f@syntax-dispatch j11e2@t '(_ . #(each (any any . each-any)))))) (if j11e4@ls/false (apply (lambda (j11e6@fmls* j11e7@b* j11e8@b**) (call-with-values (lambda () (jda9@chi-lambda-clause* j11dc@e j11e6@fmls* (map cons j11e7@b* j11e8@b**) j11dd@r j11de@mr)) (lambda (j11f0@j11ed j11f1@j11ef) (let ((j11f4@body* j11f1@j11ef) (j11f5@fmls* j11f0@j11ed)) (jadc@ja0f@build-case-lambda '#f j11f5@fmls* j11f4@body*))))) j11e4@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j11e2@t)))))) (set! j2864@jd31@case-lambda-transformer jd31@case-lambda-transformer) (set! jd33@lambda-transformer (lambda (j11f8@e j11f9@r j11fa@mr) (let ((j11fe@t j11f8@e)) (let ((j1200@ls/false (jd7f@syntax-dispatch j11fe@t '(_ any any . each-any)))) (if j1200@ls/false (apply (lambda (j1202@fmls j1203@b j1204@b*) (call-with-values (lambda () (jda7@chi-lambda-clause j11f8@e j1202@fmls (cons j1203@b j1204@b*) j11f9@r j11fa@mr)) (lambda (j120c@j1209 j120d@j120b) (let ((j1210@body j120d@j120b) (j1211@fmls j120c@j1209)) (jadb@ja0d@build-lambda '#f j1211@fmls j1210@body))))) j1200@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j11fe@t)))))) (set! j2865@jd33@lambda-transformer jd33@lambda-transformer) (set! jd35@bless (lambda (j1214@x) (jb60@mkstx (let j1218@f ((j1216@x j1214@x)) (if (jb44@stx? j1216@x) j1216@x (if (pair? j1216@x) (cons (j1218@f (car j1216@x)) (j1218@f (cdr j1216@x))) (if (symbol? j1216@x) (jd07@scheme-stx j1216@x) (if (vector? j1216@x) (vector-map j1218@f j1216@x) j1216@x))))) '() '() '()))) (set! j2866@jd35@bless jd35@bless) (set! jd37@with-syntax-macro (lambda (j121a@e) (let ((j121c@t j121a@e)) (let ((j121e@ls/false (jd7f@syntax-dispatch j121c@t '(_ #(each (any any)) any . each-any)))) (if j121e@ls/false (apply (lambda (j1220@pat* j1221@expr* j1222@b j1223@b*) (let ((j1228@idn* (let j122c@f ((j122a@pat* j1220@pat*)) (if (null? j122a@pat*) '() (call-with-values (lambda () (jd7d@convert-pattern (car j122a@pat*) '())) (lambda (j1232@j122f j1233@j1231) (let ((j1236@idn* j1233@j1231) (j1237@pat j1232@j122f)) (append j1236@idn* (j122c@f (cdr j122a@pat*)))))))))) (begin (jda5@verify-formals (map car j1228@idn*) j121a@e) (let ((j123a@t* (je4d@generate-temporaries j1221@expr*))) (jd35@bless (list 'let (map list j123a@t* j1221@expr*) (let j1240@f ((j123c@pat* j1220@pat*) (j123d@t* j123a@t*)) (if (null? j123c@pat*) (cons 'begin (cons '#f (cons j1222@b j1223@b*))) (list 'syntax-case (car j123d@t*) '() (list (car j123c@pat*) (j1240@f (cdr j123c@pat*) (cdr j123d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car j123c@pat*)) (car j123d@t*)))))))))))) j121e@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j121c@t)))))) (set! j2867@jd37@with-syntax-macro jd37@with-syntax-macro) (set! jd39@invalid-fmls-error (lambda (j1242@stx j1243@fmls) (let ((j1246@t j1243@fmls)) (let ((j1248@ls/false (jd7f@syntax-dispatch j1246@t '#(each+ any () any)))) (if j1248@ls/false (apply (lambda (j124a@id* j124b@last) (let j1250@f ((j124e@id* (if (jb78@id? j124b@last) (cons j124b@last j124a@id*) (if (jb6e@syntax-null? j124b@last) j124a@id* (je5f@syntax-violation '#f '"not an identifier" j1242@stx j124b@last))))) (if (null? j124e@id*) (values) (if (not (jb78@id? (car j124e@id*))) (je5f@syntax-violation '#f '"not an identifier" j1242@stx (car j124e@id*)) (begin (j1250@f (cdr j124e@id*)) (if (jb84@bound-id-member? (car j124e@id*) (cdr j124e@id*)) (je5f@syntax-violation '#f '"duplicate binding" j1242@stx (car j124e@id*)) (void))))))) j1248@ls/false) (let ((j1252@t j1246@t)) (let ((j1254@ls/false (jd7f@syntax-dispatch j1252@t '_))) (if j1254@ls/false (apply (lambda () (je5f@syntax-violation '#f '"malformed binding form" j1242@stx j1243@fmls)) j1254@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1252@t))))))))) (set! j2868@jd39@invalid-fmls-error jd39@invalid-fmls-error) (set! jd3b@let-macro (lambda (j1256@stx) (let ((j1258@t j1256@stx)) (let ((j125a@ls/false (jd7f@syntax-dispatch j1258@t '(_ #(each (any any)) any . each-any)))) (if j125a@ls/false (apply (lambda (j125c@lhs* j125d@rhs* j125e@b j125f@b*) (if (jb80@valid-bound-ids? j125c@lhs*) (jd35@bless (cons (cons 'lambda (cons j125c@lhs* (cons j125e@b j125f@b*))) j125d@rhs*)) (jd39@invalid-fmls-error j1256@stx j125c@lhs*))) j125a@ls/false) (let ((j1264@t j1258@t)) (let ((j1266@ls/false (jd7f@syntax-dispatch j1264@t '(_ any #(each (any any)) any . each-any)))) (if (and j1266@ls/false (apply (lambda (j1268@f j1269@lhs* j126a@rhs* j126b@b j126c@b*) (jb78@id? j1268@f)) j1266@ls/false)) (apply (lambda (j1272@f j1273@lhs* j1274@rhs* j1275@b j1276@b*) (if (jb80@valid-bound-ids? j1273@lhs*) (jd35@bless (cons (list 'letrec (list (list j1272@f (cons 'lambda (cons j1273@lhs* (cons j1275@b j1276@b*))))) j1272@f) j1274@rhs*)) (jd39@invalid-fmls-error j1256@stx j1273@lhs*))) j1266@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1264@t))))))))) (set! j2869@jd3b@let-macro jd3b@let-macro) (set! jd3d@let-values-macro (lambda (j127c@stx) (letrec* ((j127f@rename (lambda (j12e4@x j12e5@old* j12e6@new*) (begin (if (not (jb78@id? j12e4@x)) (je5f@syntax-violation '#f '"not an indentifier" j127c@stx j12e4@x) (void)) (if (jb84@bound-id-member? j12e4@x j12e5@old*) (je5f@syntax-violation '#f '"duplicate binding" j127c@stx j12e4@x) (void)) (let ((j12ea@y (gensym (je65@syntax->datum j12e4@x)))) (values j12ea@y (cons j12e4@x j12e5@old*) (cons j12ea@y j12e6@new*)))))) (j1281@rename* (lambda (j12d2@x* j12d3@old* j12d4@new*) (if (null? j12d2@x*) (values '() j12d3@old* j12d4@new*) (call-with-values (lambda () (j127f@rename (car j12d2@x*) j12d3@old* j12d4@new*)) (lambda (j12d8@x j12d9@old* j12da@new*) (call-with-values (lambda () (j1281@rename* (cdr j12d2@x*) j12d9@old* j12da@new*)) (lambda (j12de@x* j12df@old* j12e0@new*) (values (cons j12d8@x j12de@x*) j12df@old* j12e0@new*))))))))) (let ((j1282@t j127c@stx)) (let ((j1284@ls/false (jd7f@syntax-dispatch j1282@t '(_ () any . each-any)))) (if j1284@ls/false (apply (lambda (j1286@b j1287@b*) (cons* (jd35@bless 'let) '() j1286@b j1287@b*)) j1284@ls/false) (let ((j128a@t j1282@t)) (let ((j128c@ls/false (jd7f@syntax-dispatch j128a@t '(_ #(each (any any)) any . each-any)))) (if j128c@ls/false (apply (lambda (j128e@lhs* j128f@rhs* j1290@b j1291@b*) (jd35@bless (let j129e@f ((j1296@lhs* j128e@lhs*) (j1297@rhs* j128f@rhs*) (j1298@old* '()) (j1299@new* '())) (if (null? j1296@lhs*) (cons 'let (cons (map list j1298@old* j1299@new*) (cons j1290@b j1291@b*))) (let ((j12a0@t (car j1296@lhs*))) (let ((j12a2@ls/false (jd7f@syntax-dispatch j12a0@t 'each-any))) (if j12a2@ls/false (apply (lambda (j12a4@x*) (call-with-values (lambda () (j1281@rename* j12a4@x* j1298@old* j1299@new*)) (lambda (j12ac@j12a7 j12ad@j12a9 j12ae@j12ab) (let ((j12b2@new* j12ae@j12ab) (j12b3@old* j12ad@j12a9) (j12b4@y* j12ac@j12a7)) (list 'call-with-values (list 'lambda '() (car j1297@rhs*)) (list 'lambda j12b4@y* (j129e@f (cdr j1296@lhs*) (cdr j1297@rhs*) j12b3@old* j12b2@new*))))))) j12a2@ls/false) (let ((j12b8@t j12a0@t)) (let ((j12ba@ls/false (jd7f@syntax-dispatch j12b8@t '#(each+ any () any)))) (if j12ba@ls/false (apply (lambda (j12bc@x* j12bd@x) (call-with-values (lambda () (j127f@rename j12bd@x j1298@old* j1299@new*)) (lambda (j12c0@y j12c1@old* j12c2@new*) (call-with-values (lambda () (j1281@rename* j12bc@x* j12c1@old* j12c2@new*)) (lambda (j12c6@y* j12c7@old* j12c8@new*) (list 'call-with-values (list 'lambda '() (car j1297@rhs*)) (list 'lambda (append j12c6@y* j12c0@y) (j129e@f (cdr j1296@lhs*) (cdr j1297@rhs*) j12c7@old* j12c8@new*)))))))) j12ba@ls/false) (let ((j12cc@t j12b8@t)) (let ((j12ce@ls/false (jd7f@syntax-dispatch j12cc@t 'any))) (if j12ce@ls/false (apply (lambda (j12d0@others) (je5f@syntax-violation '#f '"malformed bindings" j127c@stx j12d0@others)) j12ce@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j12cc@t)))))))))))))) j128c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j128a@t)))))))))) (set! j286a@jd3d@let-values-macro jd3d@let-values-macro) (set! jd3f@let*-values-macro (lambda (j12ec@stx) (letrec* ((j12ef@check (lambda (j131e@x*) (if (not (null? j131e@x*)) (let ((j1320@x (car j131e@x*))) (begin (if (not (jb78@id? j1320@x)) (je5f@syntax-violation '#f '"not an identifier" j12ec@stx j1320@x) (void)) (j12ef@check (cdr j131e@x*)) (if (jb84@bound-id-member? j1320@x (cdr j131e@x*)) (je5f@syntax-violation '#f '"duplicate identifier" j12ec@stx j1320@x) (void)))) (void))))) (let ((j12f0@t j12ec@stx)) (let ((j12f2@ls/false (jd7f@syntax-dispatch j12f0@t '(_ () any . each-any)))) (if j12f2@ls/false (apply (lambda (j12f4@b j12f5@b*) (cons* (jd35@bless 'let) '() j12f4@b j12f5@b*)) j12f2@ls/false) (let ((j12f8@t j12f0@t)) (let ((j12fa@ls/false (jd7f@syntax-dispatch j12f8@t '(_ #(each (any any)) any . each-any)))) (if j12fa@ls/false (apply (lambda (j12fc@lhs* j12fd@rhs* j12fe@b j12ff@b*) (jd35@bless (let j1308@f ((j1304@lhs* j12fc@lhs*) (j1305@rhs* j12fd@rhs*)) (if (null? j1304@lhs*) (cons 'begin (cons j12fe@b j12ff@b*)) (let ((j130a@t (car j1304@lhs*))) (let ((j130c@ls/false (jd7f@syntax-dispatch j130a@t 'each-any))) (if j130c@ls/false (apply (lambda (j130e@x*) (begin (j12ef@check j130e@x*) (list 'call-with-values (list 'lambda '() (car j1305@rhs*)) (list 'lambda j130e@x* (j1308@f (cdr j1304@lhs*) (cdr j1305@rhs*)))))) j130c@ls/false) (let ((j1310@t j130a@t)) (let ((j1312@ls/false (jd7f@syntax-dispatch j1310@t '#(each+ any () any)))) (if j1312@ls/false (apply (lambda (j1314@x* j1315@x) (begin (j12ef@check (cons j1315@x j1314@x*)) (list 'call-with-values (list 'lambda '() (car j1305@rhs*)) (list 'lambda (append j1314@x* j1315@x) (j1308@f (cdr j1304@lhs*) (cdr j1305@rhs*)))))) j1312@ls/false) (let ((j1318@t j1310@t)) (let ((j131a@ls/false (jd7f@syntax-dispatch j1318@t 'any))) (if j131a@ls/false (apply (lambda (j131c@others) (je5f@syntax-violation '#f '"malformed bindings" j12ec@stx j131c@others)) j131a@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1318@t)))))))))))))) j12fa@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j12f8@t)))))))))) (set! j286b@jd3f@let*-values-macro jd3f@let*-values-macro) (set! jd41@trace-lambda-macro (lambda (j1322@stx) (let ((j1324@t j1322@stx)) (let ((j1326@ls/false (jd7f@syntax-dispatch j1324@t '(_ any each-any any . each-any)))) (if j1326@ls/false (apply (lambda (j1328@who j1329@fmls j132a@b j132b@b*) (if (jb80@valid-bound-ids? j1329@fmls) (jd35@bless (list 'make-traced-procedure (list 'quote j1328@who) (cons 'lambda (cons j1329@fmls (cons j132a@b j132b@b*))))) (jd39@invalid-fmls-error j1322@stx j1329@fmls))) j1326@ls/false) (let ((j1330@t j1324@t)) (let ((j1332@ls/false (jd7f@syntax-dispatch j1330@t '(_ any #(each+ any () any) any . each-any)))) (if j1332@ls/false (apply (lambda (j1334@who j1335@fmls j1336@last j1337@b j1338@b*) (if (jb80@valid-bound-ids? (cons j1336@last j1335@fmls)) (jd35@bless (list 'make-traced-procedure (list 'quote j1334@who) (cons 'lambda (cons (append j1335@fmls j1336@last) (cons j1337@b j1338@b*))))) (jd39@invalid-fmls-error j1322@stx (append j1335@fmls j1336@last)))) j1332@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1330@t))))))))) (set! j286c@jd41@trace-lambda-macro jd41@trace-lambda-macro) (set! jd43@trace-define-macro (lambda (j133e@stx) (let ((j1340@t j133e@stx)) (let ((j1342@ls/false (jd7f@syntax-dispatch j1340@t '(_ (any . each-any) any . each-any)))) (if j1342@ls/false (apply (lambda (j1344@who j1345@fmls j1346@b j1347@b*) (if (jb80@valid-bound-ids? j1345@fmls) (jd35@bless (list 'define j1344@who (list 'make-traced-procedure (list 'quote j1344@who) (cons 'lambda (cons j1345@fmls (cons j1346@b j1347@b*)))))) (jd39@invalid-fmls-error j133e@stx j1345@fmls))) j1342@ls/false) (let ((j134c@t j1340@t)) (let ((j134e@ls/false (jd7f@syntax-dispatch j134c@t '(_ (any . #(each+ any () any)) any . each-any)))) (if j134e@ls/false (apply (lambda (j1350@who j1351@fmls j1352@last j1353@b j1354@b*) (if (jb80@valid-bound-ids? (cons j1352@last j1351@fmls)) (jd35@bless (list 'define j1350@who (list 'make-traced-procedure (list 'quote j1350@who) (cons 'lambda (cons (append j1351@fmls j1352@last) (cons j1353@b j1354@b*)))))) (jd39@invalid-fmls-error j133e@stx (append j1351@fmls j1352@last)))) j134e@ls/false) (let ((j135a@t j134c@t)) (let ((j135c@ls/false (jd7f@syntax-dispatch j135a@t '(_ any any)))) (if j135c@ls/false (apply (lambda (j135e@who j135f@expr) (if (jb78@id? j135e@who) (jd35@bless (list 'define j135e@who (list 'let (list (list 'v j135f@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote j135e@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (je5f@syntax-violation '#f '"invalid name" j133e@stx))) j135c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j135a@t)))))))))))) (set! j286d@jd43@trace-define-macro jd43@trace-define-macro) (set! jd45@trace-define-syntax-macro (lambda (j1362@stx) (let ((j1364@t j1362@stx)) (let ((j1366@ls/false (jd7f@syntax-dispatch j1364@t '(_ any any)))) (if j1366@ls/false (apply (lambda (j1368@who j1369@expr) (if (jb78@id? j1368@who) (jd35@bless (list 'define-syntax j1368@who (list 'make-traced-macro (list 'quote j1368@who) j1369@expr))) (je5f@syntax-violation '#f '"invalid name" j1362@stx))) j1366@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1364@t)))))) (set! j286e@jd45@trace-define-syntax-macro jd45@trace-define-syntax-macro) (set! jd47@trace-let/rec-syntax (lambda (j136c@who) (lambda (j136e@stx) (let ((j1370@t j136e@stx)) (let ((j1372@ls/false (jd7f@syntax-dispatch j1370@t '(_ #(each (any any)) any . each-any)))) (if j1372@ls/false (apply (lambda (j1374@lhs* j1375@rhs* j1376@b j1377@b*) (if (jb80@valid-bound-ids? j1374@lhs*) (let ((j137c@rhs* (map (lambda (j137e@lhs j137f@rhs) (list 'make-traced-macro (list 'quote j137e@lhs) j137f@rhs)) j1374@lhs* j1375@rhs*))) (jd35@bless (cons j136c@who (cons (map list j1374@lhs* j137c@rhs*) (cons j1376@b j1377@b*))))) (jd39@invalid-fmls-error j136e@stx j1374@lhs*))) j1372@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1370@t))))))) (set! j286f@jd47@trace-let/rec-syntax jd47@trace-let/rec-syntax) (set! jd49@trace-let-syntax-macro (jd47@trace-let/rec-syntax 'let-syntax)) (set! j2870@jd49@trace-let-syntax-macro jd49@trace-let-syntax-macro) (set! jd4b@trace-letrec-syntax-macro (jd47@trace-let/rec-syntax 'letrec-syntax)) (set! j2871@jd4b@trace-letrec-syntax-macro jd4b@trace-letrec-syntax-macro) (set! jd4d@guard-macro (lambda (j1382@x) (letrec* ((j1385@gen-clauses (lambda (j139c@con j139d@outerk j139e@clause*) (letrec* ((j13a3@f (lambda (j13dc@x j13dd@k) (let ((j13e0@t j13dc@x)) (let ((j13e2@ls/false (jd7f@syntax-dispatch j13e0@t '(any #(scheme-id =>) any)))) (if j13e2@ls/false (apply (lambda (j13e4@e j13e5@p) (let ((j13e8@t (gensym))) (list 'let (list (list j13e8@t j13e4@e)) (list 'if j13e8@t (list j13e5@p j13e8@t) j13dd@k)))) j13e2@ls/false) (let ((j13ea@t j13e0@t)) (let ((j13ec@ls/false (jd7f@syntax-dispatch j13ea@t '(any)))) (if j13ec@ls/false (apply (lambda (j13ee@e) (let ((j13f0@t (gensym))) (list 'let (list (list j13f0@t j13ee@e)) (list 'if j13f0@t j13f0@t j13dd@k)))) j13ec@ls/false) (let ((j13f2@t j13ea@t)) (let ((j13f4@ls/false (jd7f@syntax-dispatch j13f2@t '(any any . each-any)))) (if j13f4@ls/false (apply (lambda (j13f6@e j13f7@v j13f8@v*) (list 'if j13f6@e (cons 'begin (cons j13f7@v j13f8@v*)) j13dd@k)) j13f4@ls/false) (let ((j13fc@t j13f2@t)) (let ((j13fe@ls/false (jd7f@syntax-dispatch j13fc@t '_))) (if j13fe@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid guard clause" j13dc@x)) j13fe@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j13fc@t))))))))))))))) (j13a5@f* (lambda (j13b2@x*) (let ((j13b4@t j13b2@x*)) (let ((j13b6@ls/false (jd7f@syntax-dispatch j13b4@t '()))) (if j13b6@ls/false (apply (lambda () (let ((j13b8@g (gensym))) (values (list j13b8@g (list 'lambda '() (list 'raise-continuable j139c@con))) j13b8@g))) j13b6@ls/false) (let ((j13ba@t j13b4@t)) (let ((j13bc@ls/false (jd7f@syntax-dispatch j13ba@t '((#(scheme-id else) any . each-any))))) (if j13bc@ls/false (apply (lambda (j13be@e j13bf@e*) (values (cons 'begin (cons j13be@e j13bf@e*)) '#f)) j13bc@ls/false) (let ((j13c2@t j13ba@t)) (let ((j13c4@ls/false (jd7f@syntax-dispatch j13c2@t '(any . any)))) (if j13c4@ls/false (apply (lambda (j13c6@cls j13c7@cls*) (call-with-values (lambda () (j13a5@f* j13c7@cls*)) (lambda (j13ce@j13cb j13cf@j13cd) (let ((j13d2@g j13cf@j13cd) (j13d3@e j13ce@j13cb)) (values (j13a3@f j13c6@cls j13d3@e) j13d2@g))))) j13c4@ls/false) (let ((j13d6@t j13c2@t)) (let ((j13d8@ls/false (jd7f@syntax-dispatch j13d6@t 'any))) (if j13d8@ls/false (apply (lambda (j13da@others) (je5f@syntax-violation '#f '"invalid guard clause" j13da@others)) j13d8@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j13d6@t)))))))))))))))) (call-with-values (lambda () (j13a5@f* j139e@clause*)) (lambda (j13aa@j13a7 j13ab@j13a9) (let ((j13ae@raisek j13ab@j13a9) (j13af@code j13aa@j13a7)) (if j13ae@raisek (list (list 'call/cc (list 'lambda (list j13ae@raisek) (list j139d@outerk (list 'lambda '() j13af@code))))) (list j139d@outerk (list 'lambda '() j13af@code)))))))))) (let ((j1386@t j1382@x)) (let ((j1388@ls/false (jd7f@syntax-dispatch j1386@t '(_ (any . each-any) any . each-any)))) (if (and j1388@ls/false (apply (lambda (j138a@con j138b@clause* j138c@b j138d@b*) (jb78@id? j138a@con)) j1388@ls/false)) (apply (lambda (j1392@con j1393@clause* j1394@b j1395@b*) (let ((j139a@outerk (gensym))) (jd35@bless (list (list 'call/cc (list 'lambda (list j139a@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list j1392@con) (j1385@gen-clauses j1392@con j139a@outerk j1393@clause*)) (cons 'lambda (cons '() (cons j1394@b j1395@b*))))))))))) j1388@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1386@t))))))) (set! j2872@jd4d@guard-macro jd4d@guard-macro) (set! jd4f@define-enumeration-macro (lambda (j1400@stx) (letrec* ((j1403@set? (lambda (j141c@x) (or (null? j141c@x) (and (not (memq (car j141c@x) (cdr j141c@x))) (j1403@set? (cdr j141c@x)))))) (j1405@remove-dups (lambda (j141a@ls) (if (null? j141a@ls) '() (cons (car j141a@ls) (j1405@remove-dups (remq (car j141a@ls) (cdr j141a@ls)))))))) (let ((j1406@t j1400@stx)) (let ((j1408@ls/false (jd7f@syntax-dispatch j1406@t '(_ any each-any any)))) (if (and j1408@ls/false (apply (lambda (j140a@name j140b@id* j140c@maker) (and (jb78@id? j140a@name) (jb78@id? j140c@maker) (for-all jb78@id? j140b@id*))) j1408@ls/false)) (apply (lambda (j1410@name j1411@id* j1412@maker) (let ((j1416@name* (j1405@remove-dups (je65@syntax->datum j1411@id*))) (j1417@mk (gensym))) (jd35@bless (list 'begin (list 'define j1417@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote j1416@name*)))) (list 'define-syntax j1410@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote j1416@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote j1410@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax j1412@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote j1412@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote j1416@name*)) (cons 'syntax-violation (cons (list 'quote j1412@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons j1417@mk '('(n* ...))))))))))))) j1408@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1406@t))))))) (set! j2873@jd4f@define-enumeration-macro jd4f@define-enumeration-macro) (set! jd51@time-macro (lambda (j141e@stx) (let ((j1420@t j141e@stx)) (let ((j1422@ls/false (jd7f@syntax-dispatch j1420@t '(_ any)))) (if j1422@ls/false (apply (lambda (j1424@expr) (jd35@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() j1424@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) j1422@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1420@t)))))) (set! j2874@jd51@time-macro jd51@time-macro) (set! jd53@delay-macro (lambda (j1426@stx) (let ((j1428@t j1426@stx)) (let ((j142a@ls/false (jd7f@syntax-dispatch j1428@t '(_ any)))) (if j142a@ls/false (apply (lambda (j142c@expr) (jd35@bless (list 'make-promise (list 'lambda '() j142c@expr)))) j142a@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1428@t)))))) (set! j2875@jd53@delay-macro jd53@delay-macro) (set! jd55@assert-macro (lambda (j142e@stx) (let ((j1430@t j142e@stx)) (let ((j1432@ls/false (jd7f@syntax-dispatch j1430@t '(_ any)))) (if j1432@ls/false (apply (lambda (j1434@expr) (let ((j1436@pos (or (je57@expression-position j142e@stx) (je57@expression-position j1434@expr)))) (jd35@bless (list 'let (list (list 'x j1434@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote j1434@expr) (list 'quote j1436@pos))))))) j1432@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1430@t)))))) (set! j2876@jd55@assert-macro jd55@assert-macro) (set! jd57@endianness-macro (lambda (j1438@stx) (let ((j143a@t j1438@stx)) (let ((j143c@ls/false (jd7f@syntax-dispatch j143a@t '(_ any)))) (if j143c@ls/false (apply (lambda (j143e@e) (let ((j1440@t (je65@syntax->datum j143e@e))) (if (memv j1440@t '(little)) (jd35@bless ''little) (if (memv j1440@t '(big)) (jd35@bless ''big) (je5f@syntax-violation '#f '"endianness must be big or little" j1438@stx))))) j143c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j143a@t)))))) (set! j2877@jd57@endianness-macro jd57@endianness-macro) (set! jd59@identifier-syntax-macro (lambda (j1442@stx) (let ((j1444@t j1442@stx)) (let ((j1446@ls/false (jd7f@syntax-dispatch j1444@t '(_ any)))) (if j1446@ls/false (apply (lambda (j1448@expr) (jd35@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax j1448@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax j1448@expr) '((syntax (e* ...)))))))))) j1446@ls/false) (let ((j144a@t j1444@t)) (let ((j144c@ls/false (jd7f@syntax-dispatch j144a@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and j144c@ls/false (apply (lambda (j144e@id1 j144f@expr1 j1450@id2 j1451@expr2 j1452@expr3) (and (jb78@id? j144e@id1) (jb78@id? j1450@id2) (jb78@id? j1451@expr2))) j144c@ls/false)) (apply (lambda (j1458@id1 j1459@expr1 j145a@id2 j145b@expr2 j145c@expr3) (jd35@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax j1459@expr1)) (list (list 'set! 'id j145b@expr2) (list 'syntax j145c@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons j1459@expr1 '(e* ...))))))))) j144c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j144a@t))))))))) (set! j2878@jd59@identifier-syntax-macro jd59@identifier-syntax-macro) (set! jd5b@do-macro (lambda (j1462@stx) (letrec* ((j1465@bind (lambda (j147c@x) (let ((j147e@t j147c@x)) (let ((j1480@ls/false (jd7f@syntax-dispatch j147e@t '(any any)))) (if j1480@ls/false (apply (lambda (j1482@x j1483@init) (list j1482@x j1483@init j1482@x)) j1480@ls/false) (let ((j1486@t j147e@t)) (let ((j1488@ls/false (jd7f@syntax-dispatch j1486@t '(any any any)))) (if j1488@ls/false (apply (lambda (j148a@x j148b@init j148c@step) (list j148a@x j148b@init j148c@step)) j1488@ls/false) (let ((j1490@t j1486@t)) (let ((j1492@ls/false (jd7f@syntax-dispatch j1490@t '_))) (if j1492@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid binding" j1462@stx)) j1492@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1490@t))))))))))))) (let ((j1466@t j1462@stx)) (let ((j1468@ls/false (jd7f@syntax-dispatch j1466@t '(_ each-any (any . each-any) . each-any)))) (if j1468@ls/false (apply (lambda (j146a@binding* j146b@test j146c@expr* j146d@command*) (let ((j1472@t (map j1465@bind j146a@binding*))) (let ((j1474@ls/false (jd7f@syntax-dispatch j1472@t '#(each (any any any))))) (if j1474@ls/false (apply (lambda (j1476@x* j1477@init* j1478@step*) (if (jb80@valid-bound-ids? j1476@x*) (jd35@bless (list 'letrec (list (list 'loop (list 'lambda j1476@x* (list 'if j146b@test (cons 'begin (cons '(if #f #f) j146c@expr*)) (cons 'begin (append j146d@command* (list (cons 'loop j1478@step*)))))))) (cons 'loop j1477@init*))) (je5f@syntax-violation '#f '"invalid bindings" j1462@stx))) j1474@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1472@t))))) j1468@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1466@t))))))) (set! j2879@jd5b@do-macro jd5b@do-macro) (set! jd5d@let*-macro (lambda (j1494@stx) (let ((j1496@t j1494@stx)) (let ((j1498@ls/false (jd7f@syntax-dispatch j1496@t '(_ #(each (any any)) any . each-any)))) (if (and j1498@ls/false (apply (lambda (j149a@lhs* j149b@rhs* j149c@b j149d@b*) (for-all jb78@id? j149a@lhs*)) j1498@ls/false)) (apply (lambda (j14a2@lhs* j14a3@rhs* j14a4@b j14a5@b*) (jd35@bless (let j14ac@f ((j14aa@x* (map list j14a2@lhs* j14a3@rhs*))) (if (null? j14aa@x*) (cons 'let (cons '() (cons j14a4@b j14a5@b*))) (list 'let (list (car j14aa@x*)) (j14ac@f (cdr j14aa@x*))))))) j1498@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1496@t)))))) (set! j287a@jd5d@let*-macro jd5d@let*-macro) (set! jd5f@or-macro (lambda (j14ae@stx) (let ((j14b0@t j14ae@stx)) (let ((j14b2@ls/false (jd7f@syntax-dispatch j14b0@t '(_)))) (if j14b2@ls/false (apply (lambda () '#f) j14b2@ls/false) (let ((j14b4@t j14b0@t)) (let ((j14b6@ls/false (jd7f@syntax-dispatch j14b4@t '(_ any . each-any)))) (if j14b6@ls/false (apply (lambda (j14b8@e j14b9@e*) (jd35@bless (let j14c0@f ((j14bc@e j14b8@e) (j14bd@e* j14b9@e*)) (if (null? j14bd@e*) (list 'begin '#f j14bc@e) (list 'let (list (list 't j14bc@e)) (list 'if 't 't (j14c0@f (car j14bd@e*) (cdr j14bd@e*)))))))) j14b6@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j14b4@t))))))))) (set! j287b@jd5f@or-macro jd5f@or-macro) (set! jd61@and-macro (lambda (j14c2@stx) (let ((j14c4@t j14c2@stx)) (let ((j14c6@ls/false (jd7f@syntax-dispatch j14c4@t '(_)))) (if j14c6@ls/false (apply (lambda () '#t) j14c6@ls/false) (let ((j14c8@t j14c4@t)) (let ((j14ca@ls/false (jd7f@syntax-dispatch j14c8@t '(_ any . each-any)))) (if j14ca@ls/false (apply (lambda (j14cc@e j14cd@e*) (jd35@bless (let j14d4@f ((j14d0@e j14cc@e) (j14d1@e* j14cd@e*)) (if (null? j14d1@e*) (list 'begin '#f j14d0@e) (cons 'if (cons j14d0@e (cons (j14d4@f (car j14d1@e*) (cdr j14d1@e*)) '(#f)))))))) j14ca@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j14c8@t))))))))) (set! j287c@jd61@and-macro jd61@and-macro) (set! jd63@cond-macro (lambda (j14d6@stx) (let ((j14d8@t j14d6@stx)) (let ((j14da@ls/false (jd7f@syntax-dispatch j14d8@t '(_ any . each-any)))) (if j14da@ls/false (apply (lambda (j14dc@cls j14dd@cls*) (jd35@bless (let j14e4@f ((j14e0@cls j14dc@cls) (j14e1@cls* j14dd@cls*)) (if (null? j14e1@cls*) (let ((j14e6@t j14e0@cls)) (let ((j14e8@ls/false (jd7f@syntax-dispatch j14e6@t '(#(scheme-id else) any . each-any)))) (if j14e8@ls/false (apply (lambda (j14ea@e j14eb@e*) (cons 'begin (cons j14ea@e j14eb@e*))) j14e8@ls/false) (let ((j14ee@t j14e6@t)) (let ((j14f0@ls/false (jd7f@syntax-dispatch j14ee@t '(any #(scheme-id =>) any)))) (if j14f0@ls/false (apply (lambda (j14f2@e j14f3@p) (list 'let (list (list 't j14f2@e)) (list 'if 't (cons j14f3@p '(t))))) j14f0@ls/false) (let ((j14f6@t j14ee@t)) (let ((j14f8@ls/false (jd7f@syntax-dispatch j14f6@t '(any)))) (if j14f8@ls/false (apply (lambda (j14fa@e) (cons 'or (cons j14fa@e '((if #f #f))))) j14f8@ls/false) (let ((j14fc@t j14f6@t)) (let ((j14fe@ls/false (jd7f@syntax-dispatch j14fc@t '(any . each-any)))) (if j14fe@ls/false (apply (lambda (j1500@e j1501@e*) (list 'if j1500@e (cons 'begin j1501@e*))) j14fe@ls/false) (let ((j1504@t j14fc@t)) (let ((j1506@ls/false (jd7f@syntax-dispatch j1504@t '_))) (if j1506@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid last clause" j14d6@stx)) j1506@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1504@t)))))))))))))))) (let ((j1508@t j14e0@cls)) (let ((j150a@ls/false (jd7f@syntax-dispatch j1508@t '(#(scheme-id else) any . each-any)))) (if j150a@ls/false (apply (lambda (j150c@e j150d@e*) (je5f@syntax-violation '#f '"incorrect position of keyword else" j14d6@stx)) j150a@ls/false) (let ((j1510@t j1508@t)) (let ((j1512@ls/false (jd7f@syntax-dispatch j1510@t '(any #(scheme-id =>) any)))) (if j1512@ls/false (apply (lambda (j1514@e j1515@p) (list 'let (list (list 't j1514@e)) (list 'if 't (cons j1515@p '(t)) (j14e4@f (car j14e1@cls*) (cdr j14e1@cls*))))) j1512@ls/false) (let ((j1518@t j1510@t)) (let ((j151a@ls/false (jd7f@syntax-dispatch j1518@t '(any)))) (if j151a@ls/false (apply (lambda (j151c@e) (list 'or j151c@e (j14e4@f (car j14e1@cls*) (cdr j14e1@cls*)))) j151a@ls/false) (let ((j151e@t j1518@t)) (let ((j1520@ls/false (jd7f@syntax-dispatch j151e@t '(any . each-any)))) (if j1520@ls/false (apply (lambda (j1522@e j1523@e*) (list 'if j1522@e (cons 'begin j1523@e*) (j14e4@f (car j14e1@cls*) (cdr j14e1@cls*)))) j1520@ls/false) (let ((j1526@t j151e@t)) (let ((j1528@ls/false (jd7f@syntax-dispatch j1526@t '_))) (if j1528@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid last clause" j14d6@stx)) j1528@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1526@t)))))))))))))))))))) j14da@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j14d8@t)))))) (set! j287d@jd63@cond-macro jd63@cond-macro) (set! jd65@do-include (lambda (j152a@stx j152b@id j152c@filename) (let ((j1530@filename (jb8c@stx->datum j152c@filename))) (begin (if (not (and (string? j1530@filename) (jb78@id? j152b@id))) (je5f@syntax-violation '#f '"invalid syntax" j152a@stx) (void)) (cons (jd35@bless 'begin) (with-input-from-file j1530@filename (lambda () (let j1534@f ((j1532@ls '())) (let ((j1536@x (j6ba@j58a@read-annotated))) (if (eof-object? j1536@x) (reverse j1532@ls) (j1534@f (cons (jb58@datum->stx j152b@id j1536@x) j1532@ls)))))))))))) (set! j287e@jd65@do-include jd65@do-include) (set! jd67@include-macro (lambda (j1538@e) (let ((j153a@t j1538@e)) (let ((j153c@ls/false (jd7f@syntax-dispatch j153a@t '(any any)))) (if j153c@ls/false (apply (lambda (j153e@id j153f@filename) (jd65@do-include j1538@e j153e@id j153f@filename)) j153c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j153a@t)))))) (set! j287f@jd67@include-macro jd67@include-macro) (set! jd69@include-into-macro (lambda (j1542@e) (let ((j1544@t j1542@e)) (let ((j1546@ls/false (jd7f@syntax-dispatch j1544@t '(_ any any)))) (if j1546@ls/false (apply (lambda (j1548@id j1549@filename) (jd65@do-include j1542@e j1548@id j1549@filename)) j1546@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1544@t)))))) (set! j2880@jd69@include-into-macro jd69@include-into-macro) (set! jd6b@syntax-rules-macro (lambda (j154c@e) (let ((j154e@t j154c@e)) (let ((j1550@ls/false (jd7f@syntax-dispatch j154e@t '(_ each-any . #(each (any any)))))) (if j1550@ls/false (apply (lambda (j1552@lits j1553@pat* j1554@tmp*) (begin (jd85@verify-literals j1552@lits j154c@e) (jd35@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons j1552@lits (map (lambda (j1558@pat j1559@tmp) (let ((j155c@t j1558@pat)) (let ((j155e@ls/false (jd7f@syntax-dispatch j155c@t '(_ . any)))) (if j155e@ls/false (apply (lambda (j1560@rest) (list (cons 'g j1560@rest) (list 'syntax j1559@tmp))) j155e@ls/false) (let ((j1562@t j155c@t)) (let ((j1564@ls/false (jd7f@syntax-dispatch j1562@t '_))) (if j1564@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid syntax-rules pattern" j154c@e j1558@pat)) j1564@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1562@t)))))))) j1553@pat* j1554@tmp*)))))))) j1550@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j154e@t)))))) (set! j2881@jd6b@syntax-rules-macro jd6b@syntax-rules-macro) (set! jd6d@quasiquote-macro (letrec* ((j1567@datum (lambda (j1668@x) (list (jd07@scheme-stx 'quote) (jb60@mkstx j1668@x jafc@top-mark* '() '())))) (j1583@quasicons* (lambda (j1660@x j1661@y) (let j1666@f ((j1664@x j1660@x)) (if (null? j1664@x) j1661@y (j1585@quasicons (car j1664@x) (j1666@f (cdr j1664@x))))))) (j1585@quasicons (lambda (j163a@x j163b@y) (let ((j163e@t j163b@y)) (let ((j1640@ls/false (jd7f@syntax-dispatch j163e@t '(#(scheme-id quote) any)))) (if j1640@ls/false (apply (lambda (j1642@dy) (let ((j1644@t j163a@x)) (let ((j1646@ls/false (jd7f@syntax-dispatch j1644@t '(#(scheme-id quote) any)))) (if j1646@ls/false (apply (lambda (j1648@dx) (list (jd07@scheme-stx 'quote) (cons j1648@dx j1642@dy))) j1646@ls/false) (let ((j164a@t j1644@t)) (let ((j164c@ls/false (jd7f@syntax-dispatch j164a@t '_))) (if j164c@ls/false (apply (lambda () (let ((j164e@t j1642@dy)) (let ((j1650@ls/false (jd7f@syntax-dispatch j164e@t '()))) (if j1650@ls/false (apply (lambda () (list (jd07@scheme-stx 'list) j163a@x)) j1650@ls/false) (let ((j1652@t j164e@t)) (let ((j1654@ls/false (jd7f@syntax-dispatch j1652@t '_))) (if j1654@ls/false (apply (lambda () (list (jd07@scheme-stx 'cons) j163a@x j163b@y)) j1654@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1652@t)))))))) j164c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j164a@t)))))))) j1640@ls/false) (let ((j1656@t j163e@t)) (let ((j1658@ls/false (jd7f@syntax-dispatch j1656@t '(#(scheme-id list) . each-any)))) (if j1658@ls/false (apply (lambda (j165a@stuff) (cons* (jd07@scheme-stx 'list) j163a@x j165a@stuff)) j1658@ls/false) (let ((j165c@t j1656@t)) (let ((j165e@ls/false (jd7f@syntax-dispatch j165c@t '_))) (if j165e@ls/false (apply (lambda () (list (jd07@scheme-stx 'cons) j163a@x j163b@y)) j165e@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j165c@t)))))))))))) (j1587@quasiappend (lambda (j1620@x j1621@y) (let ((j1624@ls (let j1628@f ((j1626@x j1620@x)) (if (null? j1626@x) (let ((j162a@t j1621@y)) (let ((j162c@ls/false (jd7f@syntax-dispatch j162a@t '(#(scheme-id quote) ())))) (if j162c@ls/false (apply (lambda () '()) j162c@ls/false) (let ((j162e@t j162a@t)) (let ((j1630@ls/false (jd7f@syntax-dispatch j162e@t '_))) (if j1630@ls/false (apply (lambda () (list j1621@y)) j1630@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j162e@t))))))) (let ((j1632@t (car j1626@x))) (let ((j1634@ls/false (jd7f@syntax-dispatch j1632@t '(#(scheme-id quote) ())))) (if j1634@ls/false (apply (lambda () (j1628@f (cdr j1626@x))) j1634@ls/false) (let ((j1636@t j1632@t)) (let ((j1638@ls/false (jd7f@syntax-dispatch j1636@t '_))) (if j1638@ls/false (apply (lambda () (cons (car j1626@x) (j1628@f (cdr j1626@x)))) j1638@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1636@t))))))))))) (if (null? j1624@ls) (list (jd07@scheme-stx 'quote) '()) (if (null? (cdr j1624@ls)) (car j1624@ls) (cons* (jd07@scheme-stx 'append) j1624@ls)))))) (j1589@quasivector (lambda (j15ee@x) (let ((j15f0@pat-x j15ee@x)) (let ((j15f2@t j15f0@pat-x)) (let ((j15f4@ls/false (jd7f@syntax-dispatch j15f2@t '(#(scheme-id quote) each-any)))) (if j15f4@ls/false (apply (lambda (j15f6@x*) (list (jd07@scheme-stx 'quote) (list->vector j15f6@x*))) j15f4@ls/false) (let ((j15f8@t j15f2@t)) (let ((j15fa@ls/false (jd7f@syntax-dispatch j15f8@t '_))) (if j15fa@ls/false (apply (lambda () (let j1602@f ((j15fc@x j15ee@x) (j15fd@k (lambda (j1600@ls) (cons* (jd07@scheme-stx 'vector) j1600@ls)))) (let ((j1604@t j15fc@x)) (let ((j1606@ls/false (jd7f@syntax-dispatch j1604@t '(#(scheme-id quote) each-any)))) (if j1606@ls/false (apply (lambda (j1608@x*) (j15fd@k (map (lambda (j160a@x) (list (jd07@scheme-stx 'quote) j160a@x)) j1608@x*))) j1606@ls/false) (let ((j160c@t j1604@t)) (let ((j160e@ls/false (jd7f@syntax-dispatch j160c@t '(#(scheme-id list) . each-any)))) (if j160e@ls/false (apply (lambda (j1610@x*) (j15fd@k j1610@x*)) j160e@ls/false) (let ((j1612@t j160c@t)) (let ((j1614@ls/false (jd7f@syntax-dispatch j1612@t '(#(scheme-id cons) any any)))) (if j1614@ls/false (apply (lambda (j1616@x j1617@y) (j1602@f j1617@y (lambda (j161a@ls) (j15fd@k (cons j1616@x j161a@ls))))) j1614@ls/false) (let ((j161c@t j1612@t)) (let ((j161e@ls/false (jd7f@syntax-dispatch j161c@t '_))) (if j161e@ls/false (apply (lambda () (list (jd07@scheme-stx 'list->vector) j15f0@pat-x)) j161e@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j161c@t))))))))))))))) j15fa@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j15f8@t)))))))))) (j158b@vquasi (lambda (j15cc@p j15cd@lev) (let ((j15d0@t j15cc@p)) (let ((j15d2@ls/false (jd7f@syntax-dispatch j15d0@t '(any . any)))) (if j15d2@ls/false (apply (lambda (j15d4@p j15d5@q) (let ((j15d8@t j15d4@p)) (let ((j15da@ls/false (jd7f@syntax-dispatch j15d8@t '(#(scheme-id unquote) . each-any)))) (if j15da@ls/false (apply (lambda (j15dc@p) (if (= j15cd@lev '0) (j1583@quasicons* j15dc@p (j158b@vquasi j15d5@q j15cd@lev)) (j1585@quasicons (j1585@quasicons (j1567@datum 'unquote) (j158d@quasi j15dc@p (- j15cd@lev '1))) (j158b@vquasi j15d5@q j15cd@lev)))) j15da@ls/false) (let ((j15de@t j15d8@t)) (let ((j15e0@ls/false (jd7f@syntax-dispatch j15de@t '(#(scheme-id unquote-splicing) . each-any)))) (if j15e0@ls/false (apply (lambda (j15e2@p) (if (= j15cd@lev '0) (j1587@quasiappend j15e2@p (j158b@vquasi j15d5@q j15cd@lev)) (j1585@quasicons (j1585@quasicons (j1567@datum 'unquote-splicing) (j158d@quasi j15e2@p (- j15cd@lev '1))) (j158b@vquasi j15d5@q j15cd@lev)))) j15e0@ls/false) (let ((j15e4@t j15de@t)) (let ((j15e6@ls/false (jd7f@syntax-dispatch j15e4@t 'any))) (if j15e6@ls/false (apply (lambda (j15e8@p) (j1585@quasicons (j158d@quasi j15e8@p j15cd@lev) (j158b@vquasi j15d5@q j15cd@lev))) j15e6@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j15e4@t))))))))))) j15d2@ls/false) (let ((j15ea@t j15d0@t)) (let ((j15ec@ls/false (jd7f@syntax-dispatch j15ea@t '()))) (if j15ec@ls/false (apply (lambda () (list (jd07@scheme-stx 'quote) '())) j15ec@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j15ea@t))))))))) (j158d@quasi (lambda (j1596@p j1597@lev) (let ((j159a@t j1596@p)) (let ((j159c@ls/false (jd7f@syntax-dispatch j159a@t '(#(scheme-id unquote) any)))) (if j159c@ls/false (apply (lambda (j159e@p) (if (= j1597@lev '0) j159e@p (j1585@quasicons (j1567@datum 'unquote) (j158d@quasi (list j159e@p) (- j1597@lev '1))))) j159c@ls/false) (let ((j15a0@t j159a@t)) (let ((j15a2@ls/false (jd7f@syntax-dispatch j15a0@t '((#(scheme-id unquote) . each-any) . any)))) (if j15a2@ls/false (apply (lambda (j15a4@p j15a5@q) (if (= j1597@lev '0) (j1583@quasicons* j15a4@p (j158d@quasi j15a5@q j1597@lev)) (j1585@quasicons (j1585@quasicons (j1567@datum 'unquote) (j158d@quasi j15a4@p (- j1597@lev '1))) (j158d@quasi j15a5@q j1597@lev)))) j15a2@ls/false) (let ((j15a8@t j15a0@t)) (let ((j15aa@ls/false (jd7f@syntax-dispatch j15a8@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if j15aa@ls/false (apply (lambda (j15ac@p j15ad@q) (if (= j1597@lev '0) (j1587@quasiappend j15ac@p (j158d@quasi j15ad@q j1597@lev)) (j1585@quasicons (j1585@quasicons (j1567@datum 'unquote-splicing) (j158d@quasi j15ac@p (- j1597@lev '1))) (j158d@quasi j15ad@q j1597@lev)))) j15aa@ls/false) (let ((j15b0@t j15a8@t)) (let ((j15b2@ls/false (jd7f@syntax-dispatch j15b0@t '(#(scheme-id quasiquote) any)))) (if j15b2@ls/false (apply (lambda (j15b4@p) (j1585@quasicons (j1567@datum 'quasiquote) (j158d@quasi (list j15b4@p) (+ j1597@lev '1)))) j15b2@ls/false) (let ((j15b6@t j15b0@t)) (let ((j15b8@ls/false (jd7f@syntax-dispatch j15b6@t '(any . any)))) (if j15b8@ls/false (apply (lambda (j15ba@p j15bb@q) (j1585@quasicons (j158d@quasi j15ba@p j1597@lev) (j158d@quasi j15bb@q j1597@lev))) j15b8@ls/false) (let ((j15be@t j15b6@t)) (let ((j15c0@ls/false (jd7f@syntax-dispatch j15be@t '#(vector each-any)))) (if (and j15c0@ls/false (apply (lambda (j15c2@x) (not (jb44@stx? j15c2@x))) j15c0@ls/false)) (apply (lambda (j15c4@x) (j1589@quasivector (j158b@vquasi j15c4@x j1597@lev))) j15c0@ls/false) (let ((j15c6@t j15be@t)) (let ((j15c8@ls/false (jd7f@syntax-dispatch j15c6@t 'any))) (if j15c8@ls/false (apply (lambda (j15ca@p) (list (jd07@scheme-stx 'quote) j15ca@p)) j15c8@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j15c6@t))))))))))))))))))))))))) (lambda (j158e@x) (let ((j1590@t j158e@x)) (let ((j1592@ls/false (jd7f@syntax-dispatch j1590@t '(_ any)))) (if j1592@ls/false (apply (lambda (j1594@e) (j158d@quasi j1594@e '0)) j1592@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1590@t))))))) (set! j2882@jd6d@quasiquote-macro jd6d@quasiquote-macro) (set! jd6f@quasisyntax-macro (letrec* ((j166b@quasi (lambda (j1686@p j1687@lev) (let ((j168a@t j1686@p)) (let ((j168c@ls/false (jd7f@syntax-dispatch j168a@t '(#(scheme-id unsyntax) any)))) (if j168c@ls/false (apply (lambda (j168e@p) (if (= j1687@lev '0) (let ((j1690@g (gensym))) (values (list j1690@g) (list j168e@p) j1690@g)) (call-with-values (lambda () (j166b@quasi j168e@p (- j1687@lev '1))) (lambda (j1698@j1693 j1699@j1695 j169a@j1697) (let ((j169e@p j169a@j1697) (j169f@rhs* j1699@j1695) (j16a0@lhs* j1698@j1693)) (values j16a0@lhs* j169f@rhs* (list 'unsyntax j169e@p))))))) j168c@ls/false) (let ((j16a4@t j168a@t)) (let ((j16a6@ls/false (jd7f@syntax-dispatch j16a4@t '#(scheme-id unsyntax)))) (if (and j16a6@ls/false (apply (lambda () (= j1687@lev '0)) j16a6@ls/false)) (apply (lambda () (je5f@syntax-violation '#f '"incorrect use of unsyntax" j1686@p)) j16a6@ls/false) (let ((j16a8@t j16a4@t)) (let ((j16aa@ls/false (jd7f@syntax-dispatch j16a8@t '((#(scheme-id unsyntax) . each-any) . any)))) (if j16aa@ls/false (apply (lambda (j16ac@p* j16ad@q) (call-with-values (lambda () (j166b@quasi j16ad@q j1687@lev)) (lambda (j16b6@j16b1 j16b7@j16b3 j16b8@j16b5) (let ((j16bc@q j16b8@j16b5) (j16bd@rhs* j16b7@j16b3) (j16be@lhs* j16b6@j16b1)) (if (= j1687@lev '0) (let ((j16c2@g* (map (lambda (j16c4@x) (gensym)) j16ac@p*))) (values (append j16c2@g* j16be@lhs*) (append j16ac@p* j16bd@rhs*) (append j16c2@g* j16bc@q))) (call-with-values (lambda () (j166b@quasi j16ac@p* (- j1687@lev '1))) (lambda (j16cc@j16c7 j16cd@j16c9 j16ce@j16cb) (let ((j16d2@p* j16ce@j16cb) (j16d3@rhs2* j16cd@j16c9) (j16d4@lhs2* j16cc@j16c7)) (values (append j16d4@lhs2* j16be@lhs*) (append j16d3@rhs2* j16bd@rhs*) (cons (cons 'unsyntax j16d2@p*) j16bc@q)))))))))) j16aa@ls/false) (let ((j16d8@t j16a8@t)) (let ((j16da@ls/false (jd7f@syntax-dispatch j16d8@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if j16da@ls/false (apply (lambda (j16dc@p* j16dd@q) (call-with-values (lambda () (j166b@quasi j16dd@q j1687@lev)) (lambda (j16e6@j16e1 j16e7@j16e3 j16e8@j16e5) (let ((j16ec@q j16e8@j16e5) (j16ed@rhs* j16e7@j16e3) (j16ee@lhs* j16e6@j16e1)) (if (= j1687@lev '0) (let ((j16f2@g* (map (lambda (j16f4@x) (gensym)) j16dc@p*))) (values (append (map (lambda (j16f6@g) (cons j16f6@g '(...))) j16f2@g*) j16ee@lhs*) (append j16dc@p* j16ed@rhs*) (append (apply append (map (lambda (j16f8@g) (cons j16f8@g '(...))) j16f2@g*)) j16ec@q))) (call-with-values (lambda () (j166b@quasi j16dc@p* (- j1687@lev '1))) (lambda (j1700@j16fb j1701@j16fd j1702@j16ff) (let ((j1706@p* j1702@j16ff) (j1707@rhs2* j1701@j16fd) (j1708@lhs2* j1700@j16fb)) (values (append j1708@lhs2* j16ee@lhs*) (append j1707@rhs2* j16ed@rhs*) (cons (cons 'unsyntax-splicing j1706@p*) j16ec@q)))))))))) j16da@ls/false) (let ((j170c@t j16d8@t)) (let ((j170e@ls/false (jd7f@syntax-dispatch j170c@t '#(scheme-id unsyntax-splicing)))) (if (and j170e@ls/false (apply (lambda () (= j1687@lev '0)) j170e@ls/false)) (apply (lambda () (je5f@syntax-violation '#f '"incorrect use of unsyntax-splicing" j1686@p)) j170e@ls/false) (let ((j1710@t j170c@t)) (let ((j1712@ls/false (jd7f@syntax-dispatch j1710@t '(#(scheme-id quasisyntax) any)))) (if j1712@ls/false (apply (lambda (j1714@p) (call-with-values (lambda () (j166b@quasi j1714@p (+ j1687@lev '1))) (lambda (j171c@j1717 j171d@j1719 j171e@j171b) (let ((j1722@p j171e@j171b) (j1723@rhs* j171d@j1719) (j1724@lhs* j171c@j1717)) (values j1724@lhs* j1723@rhs* (list 'quasisyntax j1722@p)))))) j1712@ls/false) (let ((j1728@t j1710@t)) (let ((j172a@ls/false (jd7f@syntax-dispatch j1728@t '(any . any)))) (if j172a@ls/false (apply (lambda (j172c@p j172d@q) (call-with-values (lambda () (j166b@quasi j172c@p j1687@lev)) (lambda (j173c@j1731 j173d@j1733 j173e@j1735) (call-with-values (lambda () (j166b@quasi j172d@q j1687@lev)) (lambda (j1742@j1737 j1743@j1739 j1744@j173b) (let ((j1748@q j1744@j173b) (j1749@rhs2* j1743@j1739) (j174a@lhs2* j1742@j1737) (j174b@p j173e@j1735) (j174c@rhs* j173d@j1733) (j174d@lhs* j173c@j1731)) (values (append j174a@lhs2* j174d@lhs*) (append j1749@rhs2* j174c@rhs*) (cons j174b@p j1748@q)))))))) j172a@ls/false) (let ((j1754@t j1728@t)) (let ((j1756@ls/false (jd7f@syntax-dispatch j1754@t '#(vector each-any)))) (if j1756@ls/false (apply (lambda (j1758@x*) (call-with-values (lambda () (j166b@quasi j1758@x* j1687@lev)) (lambda (j1760@j175b j1761@j175d j1762@j175f) (let ((j1766@x* j1762@j175f) (j1767@rhs* j1761@j175d) (j1768@lhs* j1760@j175b)) (values j1768@lhs* j1767@rhs* (list->vector j1766@x*)))))) j1756@ls/false) (let ((j176c@t j1754@t)) (let ((j176e@ls/false (jd7f@syntax-dispatch j176c@t '_))) (if j176e@ls/false (apply (lambda () (values '() '() j1686@p)) j176e@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j176c@t))))))))))))))))))))))))))))))) (lambda (j166c@x) (let ((j166e@t j166c@x)) (let ((j1670@ls/false (jd7f@syntax-dispatch j166e@t '(_ any)))) (if j1670@ls/false (apply (lambda (j1672@e) (call-with-values (lambda () (j166b@quasi j1672@e '0)) (lambda (j167a@j1675 j167b@j1677 j167c@j1679) (let ((j1680@v j167c@j1679) (j1681@rhs* j167b@j1677) (j1682@lhs* j167a@j1675)) (jd35@bless (list 'syntax-case (cons 'list j1681@rhs*) '() (list j1682@lhs* (list 'syntax j1680@v)))))))) j1670@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j166e@t))))))) (set! j2883@jd6f@quasisyntax-macro jd6f@quasisyntax-macro) (set! jd71@define-struct-macro (lambda (j1770@stx) (je5f@syntax-violation '#f '"define-struct not supported" j1770@stx))) (set! j2884@jd71@define-struct-macro jd71@define-struct-macro) (set! jd73@define-record-type-macro (lambda (j1772@x) (letrec* ((j1775@id (lambda (j1968@ctxt . j196a@str*) (je63@datum->syntax j1968@ctxt (string->symbol (apply string-append (map (lambda (j196c@x) (if (symbol? j196c@x) (symbol->string j196c@x) (if (string? j196c@x) j196c@x (assertion-violation 'define-record-type '"BUG")))) j196a@str*)))))) (j1777@get-record-name (lambda (j1956@spec) (let ((j1958@t j1956@spec)) (let ((j195a@ls/false (jd7f@syntax-dispatch j1958@t '(any any any)))) (if j195a@ls/false (apply (lambda (j195c@foo j195d@make-foo j195e@foo?) j195c@foo) j195a@ls/false) (let ((j1962@t j1958@t)) (let ((j1964@ls/false (jd7f@syntax-dispatch j1962@t 'any))) (if j1964@ls/false (apply (lambda (j1966@foo) j1966@foo) j1964@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1962@t))))))))) (j1779@get-record-constructor-name (lambda (j1942@spec) (let ((j1944@t j1942@spec)) (let ((j1946@ls/false (jd7f@syntax-dispatch j1944@t '(any any any)))) (if j1946@ls/false (apply (lambda (j1948@foo j1949@make-foo j194a@foo?) j1949@make-foo) j1946@ls/false) (let ((j194e@t j1944@t)) (let ((j1950@ls/false (jd7f@syntax-dispatch j194e@t 'any))) (if (and j1950@ls/false (apply (lambda (j1952@foo) (jb78@id? j1952@foo)) j1950@ls/false)) (apply (lambda (j1954@foo) (j1775@id j1954@foo '"make-" (jb8c@stx->datum j1954@foo))) j1950@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j194e@t))))))))) (j177b@get-record-predicate-name (lambda (j192e@spec) (let ((j1930@t j192e@spec)) (let ((j1932@ls/false (jd7f@syntax-dispatch j1930@t '(any any any)))) (if j1932@ls/false (apply (lambda (j1934@foo j1935@make-foo j1936@foo?) j1936@foo?) j1932@ls/false) (let ((j193a@t j1930@t)) (let ((j193c@ls/false (jd7f@syntax-dispatch j193a@t 'any))) (if (and j193c@ls/false (apply (lambda (j193e@foo) (jb78@id? j193e@foo)) j193c@ls/false)) (apply (lambda (j1940@foo) (j1775@id j1940@foo (jb8c@stx->datum j1940@foo) '"?")) j193c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j193a@t))))))))) (j177d@get-clause (lambda (j191c@id j191d@ls) (let ((j1920@t j191d@ls)) (let ((j1922@ls/false (jd7f@syntax-dispatch j1920@t '()))) (if j1922@ls/false (apply (lambda () '#f) j1922@ls/false) (let ((j1924@t j1920@t)) (let ((j1926@ls/false (jd7f@syntax-dispatch j1924@t '((any . any) . any)))) (if j1926@ls/false (apply (lambda (j1928@x j1929@rest j192a@ls) (if (jb7e@free-id=? (jd35@bless j191c@id) j1928@x) (cons j1928@x j1929@rest) (j177d@get-clause j191c@id j192a@ls))) j1926@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1924@t))))))))) (j177f@foo-rtd-code (lambda (j18ca@name j18cb@clause* j18cc@parent-rtd-code) (letrec* ((j18d1@convert-field-spec* (lambda (j1902@ls) (list->vector (map (lambda (j1904@x) (let ((j1906@t j1904@x)) (let ((j1908@ls/false (jd7f@syntax-dispatch j1906@t '(#(scheme-id mutable) any . any)))) (if j1908@ls/false (apply (lambda (j190a@name j190b@rest) (list 'mutable j190a@name)) j1908@ls/false) (let ((j190e@t j1906@t)) (let ((j1910@ls/false (jd7f@syntax-dispatch j190e@t '(#(scheme-id immutable) any . any)))) (if j1910@ls/false (apply (lambda (j1912@name j1913@rest) (list 'immutable j1912@name)) j1910@ls/false) (let ((j1916@t j190e@t)) (let ((j1918@ls/false (jd7f@syntax-dispatch j1916@t 'any))) (if j1918@ls/false (apply (lambda (j191a@name) (list 'immutable j191a@name)) j1918@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1916@t))))))))))) j1902@ls))))) (let ((j18d2@uid-code (let ((j18da@t (j177d@get-clause 'nongenerative j18cb@clause*))) (let ((j18dc@ls/false (jd7f@syntax-dispatch j18da@t '(_)))) (if j18dc@ls/false (apply (lambda () (list 'quote (gensym))) j18dc@ls/false) (let ((j18de@t j18da@t)) (let ((j18e0@ls/false (jd7f@syntax-dispatch j18de@t '(_ any)))) (if j18e0@ls/false (apply (lambda (j18e2@uid) (list 'quote j18e2@uid)) j18e0@ls/false) (let ((j18e4@t j18de@t)) (let ((j18e6@ls/false (jd7f@syntax-dispatch j18e4@t '_))) (if j18e6@ls/false (apply (lambda () '#f) j18e6@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j18e4@t))))))))))) (j18d3@sealed? (let ((j18e8@t (j177d@get-clause 'sealed j18cb@clause*))) (let ((j18ea@ls/false (jd7f@syntax-dispatch j18e8@t '(_ #(atom #t))))) (if j18ea@ls/false (apply (lambda () '#t) j18ea@ls/false) (let ((j18ec@t j18e8@t)) (let ((j18ee@ls/false (jd7f@syntax-dispatch j18ec@t '_))) (if j18ee@ls/false (apply (lambda () '#f) j18ee@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j18ec@t)))))))) (j18d4@opaque? (let ((j18f0@t (j177d@get-clause 'opaque j18cb@clause*))) (let ((j18f2@ls/false (jd7f@syntax-dispatch j18f0@t '(_ #(atom #t))))) (if j18f2@ls/false (apply (lambda () '#t) j18f2@ls/false) (let ((j18f4@t j18f0@t)) (let ((j18f6@ls/false (jd7f@syntax-dispatch j18f4@t '_))) (if j18f6@ls/false (apply (lambda () '#f) j18f6@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j18f4@t)))))))) (j18d5@fields (let ((j18f8@t (j177d@get-clause 'fields j18cb@clause*))) (let ((j18fa@ls/false (jd7f@syntax-dispatch j18f8@t '(_ . each-any)))) (if j18fa@ls/false (apply (lambda (j18fc@field-spec*) (list 'quote (j18d1@convert-field-spec* j18fc@field-spec*))) j18fa@ls/false) (let ((j18fe@t j18f8@t)) (let ((j1900@ls/false (jd7f@syntax-dispatch j18fe@t '_))) (if j1900@ls/false (apply (lambda () ''#()) j1900@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j18fe@t))))))))) (jd35@bless (list 'make-record-type-descriptor (list 'quote j18ca@name) j18cc@parent-rtd-code j18d2@uid-code j18d3@sealed? j18d4@opaque? j18d5@fields)))))) (j1781@parent-rtd-code (lambda (j18b2@clause*) (let ((j18b4@t (j177d@get-clause 'parent j18b2@clause*))) (let ((j18b6@ls/false (jd7f@syntax-dispatch j18b4@t '(_ any)))) (if j18b6@ls/false (apply (lambda (j18b8@name) (list 'record-type-descriptor j18b8@name)) j18b6@ls/false) (let ((j18ba@t j18b4@t)) (let ((j18bc@ls/false (jd7f@syntax-dispatch j18ba@t '#(atom #f)))) (if j18bc@ls/false (apply (lambda () (let ((j18be@t (j177d@get-clause 'parent-rtd j18b2@clause*))) (let ((j18c0@ls/false (jd7f@syntax-dispatch j18be@t '(_ any any)))) (if j18c0@ls/false (apply (lambda (j18c2@rtd j18c3@rcd) j18c2@rtd) j18c0@ls/false) (let ((j18c6@t j18be@t)) (let ((j18c8@ls/false (jd7f@syntax-dispatch j18c6@t '#(atom #f)))) (if j18c8@ls/false (apply (lambda () '#f) j18c8@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j18c6@t)))))))) j18bc@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j18ba@t))))))))) (j1783@parent-rcd-code (lambda (j189a@clause*) (let ((j189c@t (j177d@get-clause 'parent j189a@clause*))) (let ((j189e@ls/false (jd7f@syntax-dispatch j189c@t '(_ any)))) (if j189e@ls/false (apply (lambda (j18a0@name) (list 'record-constructor-descriptor j18a0@name)) j189e@ls/false) (let ((j18a2@t j189c@t)) (let ((j18a4@ls/false (jd7f@syntax-dispatch j18a2@t '#(atom #f)))) (if j18a4@ls/false (apply (lambda () (let ((j18a6@t (j177d@get-clause 'parent-rtd j189a@clause*))) (let ((j18a8@ls/false (jd7f@syntax-dispatch j18a6@t '(_ any any)))) (if j18a8@ls/false (apply (lambda (j18aa@rtd j18ab@rcd) j18ab@rcd) j18a8@ls/false) (let ((j18ae@t j18a6@t)) (let ((j18b0@ls/false (jd7f@syntax-dispatch j18ae@t '#(atom #f)))) (if j18b0@ls/false (apply (lambda () '#f) j18b0@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j18ae@t)))))))) j18a4@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j18a2@t))))))))) (j1785@foo-rcd-code (lambda (j1892@clause* j1893@foo-rtd j1894@protocol j1895@parent-rcd-code) (list 'make-record-constructor-descriptor j1893@foo-rtd j1895@parent-rcd-code j1894@protocol))) (j1787@get-protocol-code (lambda (j1886@clause*) (let ((j1888@t (j177d@get-clause 'protocol j1886@clause*))) (let ((j188a@ls/false (jd7f@syntax-dispatch j1888@t '(_ any)))) (if j188a@ls/false (apply (lambda (j188c@expr) j188c@expr) j188a@ls/false) (let ((j188e@t j1888@t)) (let ((j1890@ls/false (jd7f@syntax-dispatch j188e@t '_))) (if j1890@ls/false (apply (lambda () '#f) j1890@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j188e@t))))))))) (j1789@get-fields (lambda (j1874@clause*) (let ((j1876@t j1874@clause*)) (let ((j1878@ls/false (jd7f@syntax-dispatch j1876@t '()))) (if j1878@ls/false (apply (lambda () '()) j1878@ls/false) (let ((j187a@t j1876@t)) (let ((j187c@ls/false (jd7f@syntax-dispatch j187a@t '((#(scheme-id fields) . each-any) . _)))) (if j187c@ls/false (apply (lambda (j187e@f*) j187e@f*) j187c@ls/false) (let ((j1880@t j187a@t)) (let ((j1882@ls/false (jd7f@syntax-dispatch j1880@t '(_ . any)))) (if j1882@ls/false (apply (lambda (j1884@rest) (j1789@get-fields j1884@rest)) j1882@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1880@t)))))))))))) (j178b@get-mutator-indices (lambda (j185c@fields) (let j1862@f ((j185e@fields j185c@fields) (j185f@i '0)) (let ((j1864@t j185e@fields)) (let ((j1866@ls/false (jd7f@syntax-dispatch j1864@t '()))) (if j1866@ls/false (apply (lambda () '()) j1866@ls/false) (let ((j1868@t j1864@t)) (let ((j186a@ls/false (jd7f@syntax-dispatch j1868@t '((#(scheme-id mutable) . _) . any)))) (if j186a@ls/false (apply (lambda (j186c@rest) (cons j185f@i (j1862@f j186c@rest (+ j185f@i '1)))) j186a@ls/false) (let ((j186e@t j1868@t)) (let ((j1870@ls/false (jd7f@syntax-dispatch j186e@t '(_ . any)))) (if j1870@ls/false (apply (lambda (j1872@rest) (j1862@f j1872@rest (+ j185f@i '1))) j1870@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j186e@t))))))))))))) (j178d@get-mutators (lambda (j1832@foo j1833@fields) (letrec* ((j1837@gen-name (lambda (j185a@x) (je63@datum->syntax j1832@foo (string->symbol (string-append (symbol->string (je65@syntax->datum j1832@foo)) '"-" (symbol->string (je65@syntax->datum j185a@x)) '"-set!")))))) (let j183a@f ((j1838@fields j1833@fields)) (let ((j183c@t j1838@fields)) (let ((j183e@ls/false (jd7f@syntax-dispatch j183c@t '()))) (if j183e@ls/false (apply (lambda () '()) j183e@ls/false) (let ((j1840@t j183c@t)) (let ((j1842@ls/false (jd7f@syntax-dispatch j1840@t '((#(scheme-id mutable) any any any) . any)))) (if j1842@ls/false (apply (lambda (j1844@name j1845@accessor j1846@mutator j1847@rest) (cons j1846@mutator (j183a@f j1847@rest))) j1842@ls/false) (let ((j184c@t j1840@t)) (let ((j184e@ls/false (jd7f@syntax-dispatch j184c@t '((#(scheme-id mutable) any) . any)))) (if j184e@ls/false (apply (lambda (j1850@name j1851@rest) (cons (j1837@gen-name j1850@name) (j183a@f j1851@rest))) j184e@ls/false) (let ((j1854@t j184c@t)) (let ((j1856@ls/false (jd7f@syntax-dispatch j1854@t '(_ . any)))) (if j1856@ls/false (apply (lambda (j1858@rest) (j183a@f j1858@rest)) j1856@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1854@t))))))))))))))))) (j178f@get-accessors (lambda (j17ee@foo j17ef@fields) (letrec* ((j17f3@gen-name (lambda (j1830@x) (je63@datum->syntax j17ee@foo (string->symbol (string-append (symbol->string (je65@syntax->datum j17ee@foo)) '"-" (symbol->string (je65@syntax->datum j1830@x)))))))) (map (lambda (j17f4@field) (let ((j17f6@t j17f4@field)) (let ((j17f8@ls/false (jd7f@syntax-dispatch j17f6@t '(#(scheme-id mutable) any any any)))) (if (and j17f8@ls/false (apply (lambda (j17fa@name j17fb@accessor j17fc@mutator) (jb78@id? j17fb@accessor)) j17f8@ls/false)) (apply (lambda (j1800@name j1801@accessor j1802@mutator) j1801@accessor) j17f8@ls/false) (let ((j1806@t j17f6@t)) (let ((j1808@ls/false (jd7f@syntax-dispatch j1806@t '(#(scheme-id immutable) any any)))) (if (and j1808@ls/false (apply (lambda (j180a@name j180b@accessor) (jb78@id? j180b@accessor)) j1808@ls/false)) (apply (lambda (j180e@name j180f@accessor) j180f@accessor) j1808@ls/false) (let ((j1812@t j1806@t)) (let ((j1814@ls/false (jd7f@syntax-dispatch j1812@t '(#(scheme-id mutable) any)))) (if (and j1814@ls/false (apply (lambda (j1816@name) (jb78@id? j1816@name)) j1814@ls/false)) (apply (lambda (j1818@name) (j17f3@gen-name j1818@name)) j1814@ls/false) (let ((j181a@t j1812@t)) (let ((j181c@ls/false (jd7f@syntax-dispatch j181a@t '(#(scheme-id immutable) any)))) (if (and j181c@ls/false (apply (lambda (j181e@name) (jb78@id? j181e@name)) j181c@ls/false)) (apply (lambda (j1820@name) (j17f3@gen-name j1820@name)) j181c@ls/false) (let ((j1822@t j181a@t)) (let ((j1824@ls/false (jd7f@syntax-dispatch j1822@t 'any))) (if (and j1824@ls/false (apply (lambda (j1826@name) (jb78@id? j1826@name)) j1824@ls/false)) (apply (lambda (j1828@name) (j17f3@gen-name j1828@name)) j1824@ls/false) (let ((j182a@t j1822@t)) (let ((j182c@ls/false (jd7f@syntax-dispatch j182a@t 'any))) (if j182c@ls/false (apply (lambda (j182e@others) (je5f@syntax-violation '#f '"invalid field spec" j17f4@field)) j182c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j182a@t)))))))))))))))))))) j17ef@fields)))) (j1791@enumerate (lambda (j17e6@ls) (let j17ec@f ((j17e8@ls j17e6@ls) (j17e9@i '0)) (if (null? j17e8@ls) '() (cons j17e9@i (j17ec@f (cdr j17e8@ls) (+ j17e9@i '1))))))) (j1793@do-define-record (lambda (j17be@namespec j17bf@clause*) (let ((j17c2@foo (j1777@get-record-name j17be@namespec))) (let ((j17c4@foo-rtd (gensym))) (let ((j17c6@foo-rcd (gensym))) (let ((j17c8@protocol (gensym))) (let ((j17ca@make-foo (j1779@get-record-constructor-name j17be@namespec))) (let ((j17cc@fields (j1789@get-fields j17bf@clause*))) (let ((j17ce@idx* (j1791@enumerate j17cc@fields))) (let ((j17d0@foo-x* (j178f@get-accessors j17c2@foo j17cc@fields))) (let ((j17d2@set-foo-x!* (j178d@get-mutators j17c2@foo j17cc@fields))) (let ((j17d4@set-foo-idx* (j178b@get-mutator-indices j17cc@fields))) (let ((j17d6@foo? (j177b@get-record-predicate-name j17be@namespec))) (let ((j17d8@foo-rtd-code (j177f@foo-rtd-code j17c2@foo j17bf@clause* (j1781@parent-rtd-code j17bf@clause*)))) (let ((j17da@foo-rcd-code (j1785@foo-rcd-code j17bf@clause* j17c4@foo-rtd j17c8@protocol (j1783@parent-rcd-code j17bf@clause*)))) (let ((j17dc@protocol-code (j1787@get-protocol-code j17bf@clause*))) (jd35@bless (cons 'begin (cons (list 'define j17c4@foo-rtd j17d8@foo-rtd-code) (cons (list 'define j17c8@protocol j17dc@protocol-code) (cons (list 'define j17c6@foo-rcd j17da@foo-rcd-code) (cons (list 'define-syntax j17c2@foo (list 'list ''$rtd (list 'syntax j17c4@foo-rtd) (list 'syntax j17c6@foo-rcd))) (cons (list 'define j17d6@foo? (list 'record-predicate j17c4@foo-rtd)) (cons (list 'define j17ca@make-foo (list 'record-constructor j17c6@foo-rcd)) (append (map (lambda (j17de@foo-x j17df@idx) (list 'define j17de@foo-x (list 'record-accessor j17c4@foo-rtd j17df@idx))) j17d0@foo-x* j17ce@idx*) (map (lambda (j17e2@set-foo-x! j17e3@idx) (list 'define j17e2@set-foo-x! (list 'record-mutator j17c4@foo-rtd j17e3@idx))) j17d2@set-foo-x!* j17d4@set-foo-idx*)))))))))))))))))))))))))) (j1795@verify-clauses (lambda (j179e@x j179f@cls*) (letrec* ((j17a3@valid-kwds (map jd35@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (j17a5@free-id-member? (lambda (j17ba@x j17bb@ls) (and (pair? j17bb@ls) (or (jb7e@free-id=? j17ba@x (car j17bb@ls)) (j17a5@free-id-member? j17ba@x (cdr j17bb@ls))))))) (let j17aa@f ((j17a6@cls* j179f@cls*) (j17a7@seen* '())) (if (not (null? j17a6@cls*)) (let ((j17ac@t (car j17a6@cls*))) (let ((j17ae@ls/false (jd7f@syntax-dispatch j17ac@t '(any . any)))) (if j17ae@ls/false (apply (lambda (j17b0@kwd j17b1@rest) (if (or (not (jb78@id? j17b0@kwd)) (not (j17a5@free-id-member? j17b0@kwd j17a3@valid-kwds))) (je5f@syntax-violation '#f '"not a valid define-record-type keyword" j17b0@kwd) (if (jb84@bound-id-member? j17b0@kwd j17a7@seen*) (je5f@syntax-violation '#f '"duplicate use of keyword " j179e@x j17b0@kwd) (j17aa@f (cdr j17a6@cls*) (cons j17b0@kwd j17a7@seen*))))) j17ae@ls/false) (let ((j17b4@t j17ac@t)) (let ((j17b6@ls/false (jd7f@syntax-dispatch j17b4@t 'any))) (if j17b6@ls/false (apply (lambda (j17b8@cls) (je5f@syntax-violation '#f '"malformed define-record-type clause" j17b8@cls)) j17b6@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j17b4@t))))))) (void))))))) (let ((j1796@t j1772@x)) (let ((j1798@ls/false (jd7f@syntax-dispatch j1796@t '(_ any . each-any)))) (if j1798@ls/false (apply (lambda (j179a@namespec j179b@clause*) (begin (j1795@verify-clauses j1772@x j179b@clause*) (j1793@do-define-record j179a@namespec j179b@clause*))) j1798@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1796@t))))))) (set! j2885@jd73@define-record-type-macro jd73@define-record-type-macro) (set! jd75@define-condition-type-macro (lambda (j196e@x) (letrec* ((j1971@mkname (lambda (j199e@name j199f@suffix) (je63@datum->syntax j199e@name (string->symbol (string-append (symbol->string (je65@syntax->datum j199e@name)) j199f@suffix)))))) (let ((j1972@t j196e@x)) (let ((j1974@ls/false (jd7f@syntax-dispatch j1972@t '(any any any any any . #(each (any any)))))) (if (and j1974@ls/false (apply (lambda (j1976@ctxt j1977@name j1978@super j1979@constructor j197a@predicate j197b@field* j197c@accessor*) (and (jb78@id? j1977@name) (jb78@id? j1978@super) (jb78@id? j1979@constructor) (jb78@id? j197a@predicate) (for-all jb78@id? j197b@field*) (for-all jb78@id? j197c@accessor*))) j1974@ls/false)) (apply (lambda (j1984@ctxt j1985@name j1986@super j1987@constructor j1988@predicate j1989@field* j198a@accessor*) (let ((j1992@aux-accessor* (map (lambda (j1994@x) (gensym)) j198a@accessor*))) (jd35@bless (cons 'begin (cons (cons 'define-record-type (cons (list j1985@name j1987@constructor (gensym)) (cons (list 'parent j1986@super) (cons (cons 'fields (map (lambda (j1996@field j1997@aux) (list 'immutable j1996@field j1997@aux)) j1989@field* j1992@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define j1988@predicate (list 'condition-predicate (list 'record-type-descriptor j1985@name))) (map (lambda (j199a@accessor j199b@aux) (list 'define j199a@accessor (list 'condition-accessor (list 'record-type-descriptor j1985@name) j199b@aux))) j198a@accessor* j1992@aux-accessor*))))))) j1974@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1972@t))))))) (set! j2886@jd75@define-condition-type-macro jd75@define-condition-type-macro) (set! jd77@incorrect-usage-macro (lambda (j19a2@e) (je5f@syntax-violation '#f '"incorrect usage of auxiliary keyword" j19a2@e))) (set! j2887@jd77@incorrect-usage-macro jd77@incorrect-usage-macro) (set! jd79@parameterize-macro (lambda (j19a4@e) (let ((j19a6@t j19a4@e)) (let ((j19a8@ls/false (jd7f@syntax-dispatch j19a6@t '(_ () any . each-any)))) (if j19a8@ls/false (apply (lambda (j19aa@b j19ab@b*) (jd35@bless (cons 'let (cons '() (cons j19aa@b j19ab@b*))))) j19a8@ls/false) (let ((j19ae@t j19a6@t)) (let ((j19b0@ls/false (jd7f@syntax-dispatch j19ae@t '(_ #(each (any any)) any . each-any)))) (if j19b0@ls/false (apply (lambda (j19b2@olhs* j19b3@orhs* j19b4@b j19b5@b*) (let ((j19ba@lhs* (je4d@generate-temporaries j19b2@olhs*)) (j19bb@rhs* (je4d@generate-temporaries j19b3@orhs*))) (jd35@bless (cons (list 'lambda (append j19ba@lhs* j19bb@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (j19be@lhs j19bf@rhs) (list 'let (list (list 't (list j19be@lhs))) (list j19be@lhs j19bf@rhs) (cons 'set! (cons j19bf@rhs '(t))))) j19ba@lhs* j19bb@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons j19b4@b j19b5@b*))) '(swap)))))) (append j19b2@olhs* j19b3@orhs*))))) j19b0@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j19ae@t))))))))) (set! j2888@jd79@parameterize-macro jd79@parameterize-macro) (set! jd7b@foreign-call-transformer (lambda (j19c2@e j19c3@r j19c4@mr) (let ((j19c8@t j19c2@e)) (let ((j19ca@ls/false (jd7f@syntax-dispatch j19c8@t '(_ any . each-any)))) (if j19ca@ls/false (apply (lambda (j19cc@name j19cd@arg*) (cons 'foreign-call (cons (jda1@chi-expr j19cc@name j19c3@r j19c4@mr) (jd9d@chi-expr* j19cd@arg* j19c3@r j19c4@mr)))) j19ca@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j19c8@t)))))) (set! j2889@jd7b@foreign-call-transformer jd7b@foreign-call-transformer) (set! jd7d@convert-pattern (lambda (j19d0@pattern j19d1@keys) (letrec* ((j19d5@cvt* (lambda (j1a74@p* j1a75@n j1a76@ids) (if (null? j1a74@p*) (values '() j1a76@ids) (call-with-values (lambda () (j19d5@cvt* (cdr j1a74@p*) j1a75@n j1a76@ids)) (lambda (j1a7e@j1a7b j1a7f@j1a7d) (let ((j1a82@ids j1a7f@j1a7d) (j1a83@y j1a7e@j1a7b)) (call-with-values (lambda () (j19d7@cvt (car j1a74@p*) j1a75@n j1a82@ids)) (lambda (j1a8a@j1a87 j1a8b@j1a89) (let ((j1a8e@ids j1a8b@j1a89) (j1a8f@x j1a8a@j1a87)) (values (cons j1a8f@x j1a83@y) j1a8e@ids)))))))))) (j19d7@cvt (lambda (j19d8@p j19d9@n j19da@ids) (let ((j19de@t j19d8@p)) (let ((j19e0@ls/false (jd7f@syntax-dispatch j19de@t 'any))) (if (and j19e0@ls/false (apply (lambda (j19e2@id) (jb78@id? j19e2@id)) j19e0@ls/false)) (apply (lambda (j19e4@id) (if (jb84@bound-id-member? j19d8@p j19d1@keys) (values (vector 'free-id j19d8@p) j19da@ids) (if (jb7e@free-id=? j19d8@p (jd07@scheme-stx '_)) (values '_ j19da@ids) (values 'any (cons (cons j19d8@p j19d9@n) j19da@ids))))) j19e0@ls/false) (let ((j19e6@t j19de@t)) (let ((j19e8@ls/false (jd7f@syntax-dispatch j19e6@t '(any any)))) (if (and j19e8@ls/false (apply (lambda (j19ea@p j19eb@dots) (jd81@ellipsis? j19eb@dots)) j19e8@ls/false)) (apply (lambda (j19ee@p j19ef@dots) (call-with-values (lambda () (j19d7@cvt j19ee@p (+ j19d9@n '1) j19da@ids)) (lambda (j19f6@j19f3 j19f7@j19f5) (let ((j19fa@ids j19f7@j19f5) (j19fb@p j19f6@j19f3)) (values (if (eq? j19fb@p 'any) 'each-any (vector 'each j19fb@p)) j19fa@ids))))) j19e8@ls/false) (let ((j19fe@t j19e6@t)) (let ((j1a00@ls/false (jd7f@syntax-dispatch j19fe@t '(any any . #(each+ any () any))))) (if (and j1a00@ls/false (apply (lambda (j1a02@x j1a03@dots j1a04@ys j1a05@z) (jd81@ellipsis? j1a03@dots)) j1a00@ls/false)) (apply (lambda (j1a0a@x j1a0b@dots j1a0c@ys j1a0d@z) (call-with-values (lambda () (j19d7@cvt j1a0d@z j19d9@n j19da@ids)) (lambda (j1a16@j1a13 j1a17@j1a15) (let ((j1a1a@ids j1a17@j1a15) (j1a1b@z j1a16@j1a13)) (call-with-values (lambda () (j19d5@cvt* j1a0c@ys j19d9@n j1a1a@ids)) (lambda (j1a22@j1a1f j1a23@j1a21) (let ((j1a26@ids j1a23@j1a21) (j1a27@ys j1a22@j1a1f)) (call-with-values (lambda () (j19d7@cvt j1a0a@x (+ j19d9@n '1) j1a26@ids)) (lambda (j1a2e@j1a2b j1a2f@j1a2d) (let ((j1a32@ids j1a2f@j1a2d) (j1a33@x j1a2e@j1a2b)) (values (vector 'each+ j1a33@x (reverse j1a27@ys) j1a1b@z) j1a32@ids))))))))))) j1a00@ls/false) (let ((j1a36@t j19fe@t)) (let ((j1a38@ls/false (jd7f@syntax-dispatch j1a36@t '(any . any)))) (if j1a38@ls/false (apply (lambda (j1a3a@x j1a3b@y) (call-with-values (lambda () (j19d7@cvt j1a3b@y j19d9@n j19da@ids)) (lambda (j1a42@j1a3f j1a43@j1a41) (let ((j1a46@ids j1a43@j1a41) (j1a47@y j1a42@j1a3f)) (call-with-values (lambda () (j19d7@cvt j1a3a@x j19d9@n j1a46@ids)) (lambda (j1a4e@j1a4b j1a4f@j1a4d) (let ((j1a52@ids j1a4f@j1a4d) (j1a53@x j1a4e@j1a4b)) (values (cons j1a53@x j1a47@y) j1a52@ids)))))))) j1a38@ls/false) (let ((j1a56@t j1a36@t)) (let ((j1a58@ls/false (jd7f@syntax-dispatch j1a56@t '()))) (if j1a58@ls/false (apply (lambda () (values '() j19da@ids)) j1a58@ls/false) (let ((j1a5a@t j1a56@t)) (let ((j1a5c@ls/false (jd7f@syntax-dispatch j1a5a@t '#(vector each-any)))) (if (and j1a5c@ls/false (apply (lambda (j1a5e@p) (not (jb44@stx? j1a5e@p))) j1a5c@ls/false)) (apply (lambda (j1a60@p) (call-with-values (lambda () (j19d7@cvt j1a60@p j19d9@n j19da@ids)) (lambda (j1a66@j1a63 j1a67@j1a65) (let ((j1a6a@ids j1a67@j1a65) (j1a6b@p j1a66@j1a63)) (values (vector 'vector j1a6b@p) j1a6a@ids))))) j1a5c@ls/false) (let ((j1a6e@t j1a5a@t)) (let ((j1a70@ls/false (jd7f@syntax-dispatch j1a6e@t 'any))) (if j1a70@ls/false (apply (lambda (j1a72@datum) (values (vector 'atom (jb8c@stx->datum j1a72@datum)) j19da@ids)) j1a70@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1a6e@t))))))))))))))))))))))))) (j19d7@cvt j19d0@pattern '0 '())))) (set! j288a@jd7d@convert-pattern jd7d@convert-pattern) (set! jd7f@syntax-dispatch (letrec* ((j1a93@stx^ (lambda (j1b6e@e j1b6f@m* j1b70@s* j1b71@ae*) (if (and (null? j1b6f@m*) (null? j1b70@s*) (null? j1b71@ae*)) j1b6e@e (jb60@mkstx j1b6e@e j1b6f@m* j1b70@s* j1b71@ae*)))) (j1a95@match-each (lambda (j1b4e@e j1b4f@p j1b50@m* j1b51@s* j1b52@ae*) (if (pair? j1b4e@e) (let ((j1b58@first (j1aa1@match (car j1b4e@e) j1b4f@p j1b50@m* j1b51@s* j1b52@ae* '()))) (and j1b58@first (let ((j1b5a@rest (j1a95@match-each (cdr j1b4e@e) j1b4f@p j1b50@m* j1b51@s* j1b52@ae*))) (and j1b5a@rest (cons j1b58@first j1b5a@rest))))) (if (null? j1b4e@e) '() (if (jb44@stx? j1b4e@e) (and (not (jafe@top-marked? j1b50@m*)) (call-with-values (lambda () (join-wraps j1b50@m* j1b51@s* j1b52@ae* j1b4e@e)) (lambda (j1b62@j1b5d j1b63@j1b5f j1b64@j1b61) (let ((j1b68@ae* j1b64@j1b61) (j1b69@s* j1b63@j1b5f) (j1b6a@m* j1b62@j1b5d)) (j1a95@match-each (jb46@stx-expr j1b4e@e) j1b4f@p j1b6a@m* j1b69@s* j1b68@ae*))))) (if (j6bc@j58e@annotation? j1b4e@e) (j1a95@match-each (j6be@j592@annotation-expression j1b4e@e) j1b4f@p j1b50@m* j1b51@s* j1b52@ae*) '#f)))))) (j1a97@match-each+ (lambda (j1b0e@e j1b0f@x-pat j1b10@y-pat j1b11@z-pat j1b12@m* j1b13@s* j1b14@ae* j1b15@r) (let j1b26@f ((j1b1e@e j1b0e@e) (j1b1f@m* j1b12@m*) (j1b20@s* j1b13@s*) (j1b21@ae* j1b14@ae*)) (if (pair? j1b1e@e) (call-with-values (lambda () (j1b26@f (cdr j1b1e@e) j1b1f@m* j1b20@s* j1b21@ae*)) (lambda (j1b2e@j1b29 j1b2f@j1b2b j1b30@j1b2d) (let ((j1b34@r j1b30@j1b2d) (j1b35@y-pat j1b2f@j1b2b) (j1b36@xr* j1b2e@j1b29)) (if j1b34@r (if (null? j1b35@y-pat) (let ((j1b3a@xr (j1aa1@match (car j1b1e@e) j1b0f@x-pat j1b1f@m* j1b20@s* j1b21@ae* '()))) (if j1b3a@xr (values (cons j1b3a@xr j1b36@xr*) j1b35@y-pat j1b34@r) (values '#f '#f '#f))) (values '() (cdr j1b35@y-pat) (j1aa1@match (car j1b1e@e) (car j1b35@y-pat) j1b1f@m* j1b20@s* j1b21@ae* j1b34@r))) (values '#f '#f '#f))))) (if (jb44@stx? j1b1e@e) (if (jafe@top-marked? j1b1f@m*) (values '() j1b10@y-pat (j1aa1@match j1b1e@e j1b11@z-pat j1b1f@m* j1b20@s* j1b21@ae* j1b15@r)) (call-with-values (lambda () (join-wraps j1b1f@m* j1b20@s* j1b21@ae* j1b1e@e)) (lambda (j1b42@j1b3d j1b43@j1b3f j1b44@j1b41) (let ((j1b48@ae* j1b44@j1b41) (j1b49@s* j1b43@j1b3f) (j1b4a@m* j1b42@j1b3d)) (j1b26@f (jb46@stx-expr j1b1e@e) j1b4a@m* j1b49@s* j1b48@ae*))))) (if (j6bc@j58e@annotation? j1b1e@e) (j1b26@f (j6be@j592@annotation-expression j1b1e@e) j1b1f@m* j1b20@s* j1b21@ae*) (values '() j1b10@y-pat (j1aa1@match j1b1e@e j1b11@z-pat j1b1f@m* j1b20@s* j1b21@ae* j1b15@r)))))))) (j1a99@match-each-any (lambda (j1af2@e j1af3@m* j1af4@s* j1af5@ae*) (if (pair? j1af2@e) (let ((j1afa@l (j1a99@match-each-any (cdr j1af2@e) j1af3@m* j1af4@s* j1af5@ae*))) (and j1afa@l (cons (j1a93@stx^ (car j1af2@e) j1af3@m* j1af4@s* j1af5@ae*) j1afa@l))) (if (null? j1af2@e) '() (if (jb44@stx? j1af2@e) (and (not (jafe@top-marked? j1af3@m*)) (call-with-values (lambda () (join-wraps j1af3@m* j1af4@s* j1af5@ae* j1af2@e)) (lambda (j1b02@j1afd j1b03@j1aff j1b04@j1b01) (let ((j1b08@ae* j1b04@j1b01) (j1b09@s* j1b03@j1aff) (j1b0a@m* j1b02@j1afd)) (j1a99@match-each-any (jb46@stx-expr j1af2@e) j1b0a@m* j1b09@s* j1b08@ae*))))) (if (j6bc@j58e@annotation? j1af2@e) (j1a99@match-each-any (j6be@j592@annotation-expression j1af2@e) j1af3@m* j1af4@s* j1af5@ae*) '#f)))))) (j1a9b@match-empty (lambda (j1aec@p j1aed@r) (if (null? j1aec@p) j1aed@r (if (eq? j1aec@p '_) j1aed@r (if (eq? j1aec@p 'any) (cons '() j1aed@r) (if (pair? j1aec@p) (j1a9b@match-empty (car j1aec@p) (j1a9b@match-empty (cdr j1aec@p) j1aed@r)) (if (eq? j1aec@p 'each-any) (cons '() j1aed@r) (let ((j1af0@t (vector-ref j1aec@p '0))) (if (memv j1af0@t '(each)) (j1a9b@match-empty (vector-ref j1aec@p '1) j1aed@r) (if (memv j1af0@t '(each+)) (j1a9b@match-empty (vector-ref j1aec@p '1) (j1a9b@match-empty (reverse (vector-ref j1aec@p '2)) (j1a9b@match-empty (vector-ref j1aec@p '3) j1aed@r))) (if (memv j1af0@t '(free-id atom)) j1aed@r (if (memv j1af0@t '(scheme-id atom)) j1aed@r (if (memv j1af0@t '(vector)) (j1a9b@match-empty (vector-ref j1aec@p '1) j1aed@r) (assertion-violation 'syntax-dispatch '"invalid pattern" j1aec@p)))))))))))))) (j1a9d@combine (lambda (j1ae8@r* j1ae9@r) (if (null? (car j1ae8@r*)) j1ae9@r (cons (map car j1ae8@r*) (j1a9d@combine (map cdr j1ae8@r*) j1ae9@r))))) (j1a9f@match* (lambda (j1ac4@e j1ac5@p j1ac6@m* j1ac7@s* j1ac8@ae* j1ac9@r) (if (null? j1ac5@p) (and (null? j1ac4@e) j1ac9@r) (if (pair? j1ac5@p) (and (pair? j1ac4@e) (j1aa1@match (car j1ac4@e) (car j1ac5@p) j1ac6@m* j1ac7@s* j1ac8@ae* (j1aa1@match (cdr j1ac4@e) (cdr j1ac5@p) j1ac6@m* j1ac7@s* j1ac8@ae* j1ac9@r))) (if (eq? j1ac5@p 'each-any) (let ((j1ad0@l (j1a99@match-each-any j1ac4@e j1ac6@m* j1ac7@s* j1ac8@ae*))) (and j1ad0@l (cons j1ad0@l j1ac9@r))) (let ((j1ad2@t (vector-ref j1ac5@p '0))) (if (memv j1ad2@t '(each)) (if (null? j1ac4@e) (j1a9b@match-empty (vector-ref j1ac5@p '1) j1ac9@r) (let ((j1ad4@r* (j1a95@match-each j1ac4@e (vector-ref j1ac5@p '1) j1ac6@m* j1ac7@s* j1ac8@ae*))) (and j1ad4@r* (j1a9d@combine j1ad4@r* j1ac9@r)))) (if (memv j1ad2@t '(free-id)) (and (symbol? j1ac4@e) (jafe@top-marked? j1ac6@m*) (jb7e@free-id=? (j1a93@stx^ j1ac4@e j1ac6@m* j1ac7@s* j1ac8@ae*) (vector-ref j1ac5@p '1)) j1ac9@r) (if (memv j1ad2@t '(scheme-id)) (and (symbol? j1ac4@e) (jafe@top-marked? j1ac6@m*) (jb7e@free-id=? (j1a93@stx^ j1ac4@e j1ac6@m* j1ac7@s* j1ac8@ae*) (jd07@scheme-stx (vector-ref j1ac5@p '1))) j1ac9@r) (if (memv j1ad2@t '(each+)) (call-with-values (lambda () (j1a97@match-each+ j1ac4@e (vector-ref j1ac5@p '1) (vector-ref j1ac5@p '2) (vector-ref j1ac5@p '3) j1ac6@m* j1ac7@s* j1ac8@ae* j1ac9@r)) (lambda (j1adc@j1ad7 j1add@j1ad9 j1ade@j1adb) (let ((j1ae2@r j1ade@j1adb) (j1ae3@y-pat j1add@j1ad9) (j1ae4@xr* j1adc@j1ad7)) (and j1ae2@r (null? j1ae3@y-pat) (if (null? j1ae4@xr*) (j1a9b@match-empty (vector-ref j1ac5@p '1) j1ae2@r) (j1a9d@combine j1ae4@xr* j1ae2@r)))))) (if (memv j1ad2@t '(atom)) (and (fast-equal? (vector-ref j1ac5@p '1) (jb8a@strip j1ac4@e j1ac6@m*)) j1ac9@r) (if (memv j1ad2@t '(vector)) (and (vector? j1ac4@e) (j1aa1@match (vector->list j1ac4@e) (vector-ref j1ac5@p '1) j1ac6@m* j1ac7@s* j1ac8@ae* j1ac9@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" j1ac5@p))))))))))))) (j1aa1@match (lambda (j1aa6@e j1aa7@p j1aa8@m* j1aa9@s* j1aaa@ae* j1aab@r) (if (not j1aab@r) '#f (if (eq? j1aa7@p '_) j1aab@r (if (eq? j1aa7@p 'any) (cons (j1a93@stx^ j1aa6@e j1aa8@m* j1aa9@s* j1aaa@ae*) j1aab@r) (if (jb44@stx? j1aa6@e) (and (not (jafe@top-marked? j1aa8@m*)) (call-with-values (lambda () (join-wraps j1aa8@m* j1aa9@s* j1aaa@ae* j1aa6@e)) (lambda (j1ab8@j1ab3 j1ab9@j1ab5 j1aba@j1ab7) (let ((j1abe@ae* j1aba@j1ab7) (j1abf@s* j1ab9@j1ab5) (j1ac0@m* j1ab8@j1ab3)) (j1aa1@match (jb46@stx-expr j1aa6@e) j1aa7@p j1ac0@m* j1abf@s* j1abe@ae* j1aab@r))))) (if (j6bc@j58e@annotation? j1aa6@e) (j1aa1@match (j6be@j592@annotation-expression j1aa6@e) j1aa7@p j1aa8@m* j1aa9@s* j1aaa@ae* j1aab@r) (j1a9f@match* j1aa6@e j1aa7@p j1aa8@m* j1aa9@s* j1aaa@ae* j1aab@r))))))))) (lambda (j1aa2@e j1aa3@p) (j1aa1@match j1aa2@e j1aa3@p '() '() '() '())))) (set! j288b@jd7f@syntax-dispatch jd7f@syntax-dispatch) (set! jd81@ellipsis? (lambda (j1b76@x) (and (jb78@id? j1b76@x) (jb7e@free-id=? j1b76@x (jd07@scheme-stx '...))))) (set! j288c@jd81@ellipsis? jd81@ellipsis?) (set! jd83@underscore? (lambda (j1b78@x) (and (jb78@id? j1b78@x) (jb7e@free-id=? j1b78@x (jd07@scheme-stx '_))))) (set! j288d@jd83@underscore? jd83@underscore?) (set! jd85@verify-literals (lambda (j1b7a@lits j1b7b@expr) (for-each (lambda (j1b7e@x) (if (or (not (jb78@id? j1b7e@x)) (jd81@ellipsis? j1b7e@x) (jd83@underscore? j1b7e@x)) (je5f@syntax-violation '#f '"invalid literal" j1b7b@expr j1b7e@x) (void))) j1b7a@lits))) (set! j288e@jd85@verify-literals jd85@verify-literals) (set! jd87@syntax-case-transformer (letrec* ((j1b81@build-dispatch-call (lambda (j1bf2@pvars j1bf3@expr j1bf4@y j1bf5@r j1bf6@mr) (let ((j1bfc@ids (map car j1bf2@pvars)) (j1bfd@levels (map cdr j1bf2@pvars))) (let ((j1c00@labels (map jb04@gen-label j1bfc@ids)) (j1c01@new-vars (map jb00@gen-lexical j1bfc@ids))) (let ((j1c04@body (jda1@chi-expr (jb62@add-subst (jb38@make-full-rib j1bfc@ids j1c00@labels) j1bf3@expr) (append (map (lambda (j1c06@label j1c07@var j1c08@level) (cons j1c06@label (jb92@make-binding 'syntax (cons j1c07@var j1c08@level)))) j1c00@labels j1c01@new-vars (map cdr j1bf2@pvars)) j1bf5@r) j1bf6@mr))) (list '(primitive apply) (jadb@ja0d@build-lambda '#f j1c01@new-vars j1c04@body) j1bf4@y)))))) (j1b83@invalid-ids-error (lambda (j1be6@id* j1be7@e j1be8@class) (let j1bf0@find ((j1bec@id* j1be6@id*) (j1bed@ok* '())) (if (null? j1bec@id*) (je5f@syntax-violation '#f '"invalid syntax" j1be7@e) (if (jb78@id? (car j1bec@id*)) (if (jb84@bound-id-member? (car j1bec@id*) j1bed@ok*) (je5b@syntax-error (car j1bec@id*) '"duplicate " j1be8@class) (j1bf0@find (cdr j1bec@id*) (cons (car j1bec@id*) j1bed@ok*))) (je5b@syntax-error (car j1bec@id*) '"invalid " j1be8@class)))))) (j1b85@gen-clause (lambda (j1bbe@x j1bbf@keys j1bc0@clauses j1bc1@r j1bc2@mr j1bc3@pat j1bc4@fender j1bc5@expr) (call-with-values (lambda () (jd7d@convert-pattern j1bc3@pat j1bbf@keys)) (lambda (j1bd2@j1bcf j1bd3@j1bd1) (let ((j1bd6@pvars j1bd3@j1bd1) (j1bd7@p j1bd2@j1bcf)) (if (not (jb82@distinct-bound-ids? (map car j1bd6@pvars))) (j1b83@invalid-ids-error (map car j1bd6@pvars) j1bc3@pat '"pattern variable") (if (not (for-all (lambda (j1bda@x) (not (jd81@ellipsis? (car j1bda@x)))) j1bd6@pvars)) (je5f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" j1bc3@pat) (let ((j1bdc@y (jb00@gen-lexical 'tmp))) (let ((j1bde@test (if (eq? j1bc4@fender '#t) j1bdc@y (let ((j1be0@call (j1b81@build-dispatch-call j1bd6@pvars j1bc4@fender j1bdc@y j1bc1@r j1bc2@mr))) (list 'if j1bdc@y j1be0@call (list 'quote '#f)))))) (let ((j1be2@conseq (j1b81@build-dispatch-call j1bd6@pvars j1bc5@expr j1bdc@y j1bc1@r j1bc2@mr))) (let ((j1be4@altern (j1b87@gen-syntax-case j1bbe@x j1bbf@keys j1bc0@clauses j1bc1@r j1bc2@mr))) (list (jadb@ja0d@build-lambda '#f (list j1bdc@y) (list 'if j1bde@test j1be2@conseq j1be4@altern)) (list '(primitive syntax-dispatch) j1bbe@x (list 'quote j1bd7@p)))))))))))))) (j1b87@gen-syntax-case (lambda (j1b9c@x j1b9d@keys j1b9e@clauses j1b9f@r j1ba0@mr) (if (null? j1b9e@clauses) (list '(primitive syntax-error) j1b9c@x) (let ((j1ba6@t (car j1b9e@clauses))) (let ((j1ba8@ls/false (jd7f@syntax-dispatch j1ba6@t '(any any)))) (if j1ba8@ls/false (apply (lambda (j1baa@pat j1bab@expr) (if (and (jb78@id? j1baa@pat) (not (jb84@bound-id-member? j1baa@pat j1b9d@keys)) (not (jd81@ellipsis? j1baa@pat))) (if (jb7e@free-id=? j1baa@pat (jd07@scheme-stx '_)) (jda1@chi-expr j1bab@expr j1b9f@r j1ba0@mr) (let ((j1bae@lab (jb04@gen-label j1baa@pat)) (j1baf@lex (jb00@gen-lexical j1baa@pat))) (let ((j1bb2@body (jda1@chi-expr (jb62@add-subst (jb38@make-full-rib (list j1baa@pat) (list j1bae@lab)) j1bab@expr) (cons (cons j1bae@lab (jb92@make-binding 'syntax (cons j1baf@lex '0))) j1b9f@r) j1ba0@mr))) (list (jadb@ja0d@build-lambda '#f (list j1baf@lex) j1bb2@body) j1b9c@x)))) (j1b85@gen-clause j1b9c@x j1b9d@keys (cdr j1b9e@clauses) j1b9f@r j1ba0@mr j1baa@pat '#t j1bab@expr))) j1ba8@ls/false) (let ((j1bb4@t j1ba6@t)) (let ((j1bb6@ls/false (jd7f@syntax-dispatch j1bb4@t '(any any any)))) (if j1bb6@ls/false (apply (lambda (j1bb8@pat j1bb9@fender j1bba@expr) (j1b85@gen-clause j1b9c@x j1b9d@keys (cdr j1b9e@clauses) j1b9f@r j1ba0@mr j1bb8@pat j1bb9@fender j1bba@expr)) j1bb6@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1bb4@t))))))))))) (lambda (j1b88@e j1b89@r j1b8a@mr) (let ((j1b8e@t j1b88@e)) (let ((j1b90@ls/false (jd7f@syntax-dispatch j1b8e@t '(_ any each-any . each-any)))) (if j1b90@ls/false (apply (lambda (j1b92@expr j1b93@keys j1b94@clauses) (begin (jd85@verify-literals j1b93@keys j1b88@e) (let ((j1b98@x (jb00@gen-lexical 'tmp))) (let ((j1b9a@body (j1b87@gen-syntax-case j1b98@x j1b93@keys j1b94@clauses j1b89@r j1b8a@mr))) (list (jadb@ja0d@build-lambda '#f (list j1b98@x) j1b9a@body) (jda1@chi-expr j1b92@expr j1b89@r j1b8a@mr)))))) j1b90@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1b8e@t))))))) (set! j288f@jd87@syntax-case-transformer jd87@syntax-case-transformer) (set! jd89@ellipsis-map (lambda (j1c0c@proc j1c0d@ls . j1c10@ls*) (letrec* ((j1c13@who '...)) (begin (if (not (list? j1c0d@ls)) (assertion-violation j1c13@who '"not a list" j1c0d@ls) (void)) (if (not (null? j1c10@ls*)) (let ((j1c14@n (length j1c0d@ls))) (for-each (lambda (j1c16@x) (begin (if (not (list? j1c16@x)) (assertion-violation j1c13@who '"not a list" j1c16@x) (void)) (if (not (= (length j1c16@x) j1c14@n)) (assertion-violation j1c13@who '"length mismatch" j1c0d@ls j1c16@x) (void)))) j1c10@ls*)) (void)) (apply map j1c0c@proc j1c0d@ls j1c10@ls*))))) (set! j2890@jd89@ellipsis-map jd89@ellipsis-map) (set! jd8b@syntax-transformer (letrec* ((j1c19@gen-syntax (lambda (j1c90@src j1c91@e j1c92@r j1c93@maps j1c94@ellipsis? j1c95@vec?) (let ((j1c9c@t j1c91@e)) (let ((j1c9e@ls/false (jd7f@syntax-dispatch j1c9c@t 'any))) (if (and j1c9e@ls/false (apply (lambda (j1ca0@dots) (j1c94@ellipsis? j1ca0@dots)) j1c9e@ls/false)) (apply (lambda (j1ca2@dots) (je5f@syntax-violation '#f '"misplaced ellipsis in syntax form" j1c90@src)) j1c9e@ls/false) (let ((j1ca4@t j1c9c@t)) (let ((j1ca6@ls/false (jd7f@syntax-dispatch j1ca4@t 'any))) (if (and j1ca6@ls/false (apply (lambda (j1ca8@id) (jb78@id? j1ca8@id)) j1ca6@ls/false)) (apply (lambda (j1caa@id) (let ((j1cac@label (jb8e@id->label j1c91@e))) (let ((j1cae@b (jb90@label->binding j1cac@label j1c92@r))) (if (eq? (jb94@binding-type j1cae@b) 'syntax) (call-with-values (lambda () (let ((j1cb4@var.lev (jb96@binding-value j1cae@b))) (j1c1b@gen-ref j1c90@src (car j1cb4@var.lev) (cdr j1cb4@var.lev) j1c93@maps))) (lambda (j1cb6@j1cb1 j1cb7@j1cb3) (let ((j1cba@maps j1cb7@j1cb3) (j1cbb@var j1cb6@j1cb1)) (values (list 'ref j1cbb@var) j1cba@maps)))) (values (list 'quote j1c91@e) j1c93@maps))))) j1ca6@ls/false) (let ((j1cbe@t j1ca4@t)) (let ((j1cc0@ls/false (jd7f@syntax-dispatch j1cbe@t '(any any)))) (if (and j1cc0@ls/false (apply (lambda (j1cc2@dots j1cc3@e) (j1c94@ellipsis? j1cc2@dots)) j1cc0@ls/false)) (apply (lambda (j1cc6@dots j1cc7@e) (if j1c95@vec? (je5f@syntax-violation '#f '"misplaced ellipsis in syntax form" j1c90@src) (j1c19@gen-syntax j1c90@src j1cc7@e j1c92@r j1c93@maps (lambda (j1cca@x) '#f) '#f))) j1cc0@ls/false) (let ((j1ccc@t j1cbe@t)) (let ((j1cce@ls/false (jd7f@syntax-dispatch j1ccc@t '(any any . any)))) (if (and j1cce@ls/false (apply (lambda (j1cd0@x j1cd1@dots j1cd2@y) (j1c94@ellipsis? j1cd1@dots)) j1cce@ls/false)) (apply (lambda (j1cd6@x j1cd7@dots j1cd8@y) (let j1cee@f ((j1cdc@y j1cd8@y) (j1cdd@k (lambda (j1ce0@maps) (call-with-values (lambda () (j1c19@gen-syntax j1c90@src j1cd6@x j1c92@r (cons '() j1ce0@maps) j1c94@ellipsis? '#f)) (lambda (j1ce6@j1ce3 j1ce7@j1ce5) (let ((j1cea@maps j1ce7@j1ce5) (j1ceb@x j1ce6@j1ce3)) (if (null? (car j1cea@maps)) (je5f@syntax-violation '#f '"extra ellipsis in syntax form" j1c90@src) (values (j1c21@gen-map j1ceb@x (car j1cea@maps)) (cdr j1cea@maps))))))))) (let ((j1cf0@t j1cdc@y)) (let ((j1cf2@ls/false (jd7f@syntax-dispatch j1cf0@t '()))) (if j1cf2@ls/false (apply (lambda () (j1cdd@k j1c93@maps)) j1cf2@ls/false) (let ((j1cf4@t j1cf0@t)) (let ((j1cf6@ls/false (jd7f@syntax-dispatch j1cf4@t '(any . any)))) (if (and j1cf6@ls/false (apply (lambda (j1cf8@dots j1cf9@y) (j1c94@ellipsis? j1cf8@dots)) j1cf6@ls/false)) (apply (lambda (j1cfc@dots j1cfd@y) (j1cee@f j1cfd@y (lambda (j1d00@maps) (call-with-values (lambda () (j1cdd@k (cons '() j1d00@maps))) (lambda (j1d06@j1d03 j1d07@j1d05) (let ((j1d0a@maps j1d07@j1d05) (j1d0b@x j1d06@j1d03)) (if (null? (car j1d0a@maps)) (je5f@syntax-violation '#f '"extra ellipsis in syntax form" j1c90@src) (values (j1c1f@gen-mappend j1d0b@x (car j1d0a@maps)) (cdr j1d0a@maps))))))))) j1cf6@ls/false) (let ((j1d0e@t j1cf4@t)) (let ((j1d10@ls/false (jd7f@syntax-dispatch j1d0e@t '_))) (if j1d10@ls/false (apply (lambda () (call-with-values (lambda () (j1c19@gen-syntax j1c90@src j1cdc@y j1c92@r j1c93@maps j1c94@ellipsis? j1c95@vec?)) (lambda (j1d16@j1d13 j1d17@j1d15) (let ((j1d1a@maps j1d17@j1d15) (j1d1b@y j1d16@j1d13)) (call-with-values (lambda () (j1cdd@k j1d1a@maps)) (lambda (j1d22@j1d1f j1d23@j1d21) (let ((j1d26@maps j1d23@j1d21) (j1d27@x j1d22@j1d1f)) (values (j1c1d@gen-append j1d27@x j1d1b@y) j1d26@maps)))))))) j1d10@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1d0e@t)))))))))))) j1cce@ls/false) (let ((j1d2a@t j1ccc@t)) (let ((j1d2c@ls/false (jd7f@syntax-dispatch j1d2a@t '(any . any)))) (if j1d2c@ls/false (apply (lambda (j1d2e@x j1d2f@y) (call-with-values (lambda () (j1c19@gen-syntax j1c90@src j1d2e@x j1c92@r j1c93@maps j1c94@ellipsis? '#f)) (lambda (j1d36@j1d33 j1d37@j1d35) (let ((j1d3a@maps j1d37@j1d35) (j1d3b@xnew j1d36@j1d33)) (call-with-values (lambda () (j1c19@gen-syntax j1c90@src j1d2f@y j1c92@r j1d3a@maps j1c94@ellipsis? j1c95@vec?)) (lambda (j1d42@j1d3f j1d43@j1d41) (let ((j1d46@maps j1d43@j1d41) (j1d47@ynew j1d42@j1d3f)) (values (j1c23@gen-cons j1c91@e j1d2e@x j1d2f@y j1d3b@xnew j1d47@ynew) j1d46@maps)))))))) j1d2c@ls/false) (let ((j1d4a@t j1d2a@t)) (let ((j1d4c@ls/false (jd7f@syntax-dispatch j1d4a@t '#(vector each-any)))) (if j1d4c@ls/false (apply (lambda (j1d4e@ls) (call-with-values (lambda () (j1c19@gen-syntax j1c90@src j1d4e@ls j1c92@r j1c93@maps j1c94@ellipsis? '#t)) (lambda (j1d54@j1d51 j1d55@j1d53) (let ((j1d58@maps j1d55@j1d53) (j1d59@lsnew j1d54@j1d51)) (values (j1c25@gen-vector j1c91@e j1d4e@ls j1d59@lsnew) j1d58@maps))))) j1d4c@ls/false) (let ((j1d5c@t j1d4a@t)) (let ((j1d5e@ls/false (jd7f@syntax-dispatch j1d5c@t '_))) (if j1d5e@ls/false (apply (lambda () (values (list 'quote j1c91@e) j1c93@maps)) j1d5e@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1d5c@t)))))))))))))))))))))))) (j1c1b@gen-ref (lambda (j1c76@src j1c77@var j1c78@level j1c79@maps) (if (= j1c78@level '0) (values j1c77@var j1c79@maps) (if (null? j1c79@maps) (je5f@syntax-violation '#f '"missing ellipsis in syntax form" j1c76@src) (call-with-values (lambda () (j1c1b@gen-ref j1c76@src j1c77@var (- j1c78@level '1) (cdr j1c79@maps))) (lambda (j1c82@j1c7f j1c83@j1c81) (let ((j1c86@outer-maps j1c83@j1c81) (j1c87@outer-var j1c82@j1c7f)) (let ((j1c8a@t (assq j1c87@outer-var (car j1c79@maps)))) (if j1c8a@t ((lambda (j1c8c@b) (values (cdr j1c8c@b) j1c79@maps)) j1c8a@t) (let ((j1c8e@inner-var (jb00@gen-lexical 'tmp))) (values j1c8e@inner-var (cons (cons (cons j1c87@outer-var j1c8e@inner-var) (car j1c79@maps)) j1c86@outer-maps)))))))))))) (j1c1d@gen-append (lambda (j1c72@x j1c73@y) (if (fast-equal? j1c73@y ''()) j1c72@x (list 'append j1c72@x j1c73@y)))) (j1c1f@gen-mappend (lambda (j1c6e@e j1c6f@map-env) (list 'apply '(primitive append) (j1c21@gen-map j1c6e@e j1c6f@map-env)))) (j1c21@gen-map (lambda (j1c5c@e j1c5d@map-env) (let ((j1c60@formals (map cdr j1c5d@map-env)) (j1c61@actuals (map (lambda (j1c64@x) (list 'ref (car j1c64@x))) j1c5d@map-env))) (if (eq? (car j1c5c@e) 'ref) (car j1c61@actuals) (if (for-all (lambda (j1c66@x) (and (eq? (car j1c66@x) 'ref) (memq (cadr j1c66@x) j1c60@formals))) (cdr j1c5c@e)) (let ((j1c68@args (map (let ((j1c6a@r (map cons j1c60@formals j1c61@actuals))) (lambda (j1c6c@x) (cdr (assq (cadr j1c6c@x) j1c6a@r)))) (cdr j1c5c@e)))) (cons 'map (cons (list 'primitive (car j1c5c@e)) j1c68@args))) (cons* 'map (list 'lambda j1c60@formals j1c5c@e) j1c61@actuals)))))) (j1c23@gen-cons (lambda (j1c4c@e j1c4d@x j1c4e@y j1c4f@xnew j1c50@ynew) (let ((j1c56@t (car j1c50@ynew))) (if (memv j1c56@t '(quote)) (if (eq? (car j1c4f@xnew) 'quote) (let ((j1c58@xnew (cadr j1c4f@xnew)) (j1c59@ynew (cadr j1c50@ynew))) (if (and (eq? j1c58@xnew j1c4d@x) (eq? j1c59@ynew j1c4e@y)) (list 'quote j1c4c@e) (list 'quote (cons j1c58@xnew j1c59@ynew)))) (if (null? (cadr j1c50@ynew)) (list 'list j1c4f@xnew) (list 'cons j1c4f@xnew j1c50@ynew))) (if (memv j1c56@t '(list)) (cons 'list (cons j1c4f@xnew (cdr j1c50@ynew))) (list 'cons j1c4f@xnew j1c50@ynew)))))) (j1c25@gen-vector (lambda (j1c46@e j1c47@ls j1c48@lsnew) (if (eq? (car j1c48@lsnew) 'quote) (if (eq? (cadr j1c48@lsnew) j1c47@ls) (list 'quote j1c46@e) (list 'quote (list->vector (cadr j1c48@lsnew)))) (if (eq? (car j1c48@lsnew) 'list) (cons 'vector (cdr j1c48@lsnew)) (list 'list->vector j1c48@lsnew))))) (j1c27@regen (lambda (j1c40@x) (let ((j1c42@t (car j1c40@x))) (if (memv j1c42@t '(ref)) (cadr j1c40@x) (if (memv j1c42@t '(primitive)) (list 'primitive (cadr j1c40@x)) (if (memv j1c42@t '(quote)) (list 'quote (cadr j1c40@x)) (if (memv j1c42@t '(lambda)) (jadb@ja0d@build-lambda '#f (cadr j1c40@x) (j1c27@regen (caddr j1c40@x))) (if (memv j1c42@t '(map)) (let ((j1c44@ls (map j1c27@regen (cdr j1c40@x)))) (cons '(primitive ellipsis-map) j1c44@ls)) (cons (list 'primitive (car j1c40@x)) (map j1c27@regen (cdr j1c40@x)))))))))))) (lambda (j1c28@e j1c29@r j1c2a@mr) (let ((j1c2e@t j1c28@e)) (let ((j1c30@ls/false (jd7f@syntax-dispatch j1c2e@t '(_ any)))) (if j1c30@ls/false (apply (lambda (j1c32@x) (call-with-values (lambda () (j1c19@gen-syntax j1c28@e j1c32@x j1c29@r '() jd81@ellipsis? '#f)) (lambda (j1c38@j1c35 j1c39@j1c37) (let ((j1c3c@maps j1c39@j1c37) (j1c3d@e j1c38@j1c35)) (j1c27@regen j1c3d@e))))) j1c30@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1c2e@t))))))) (set! j2891@jd8b@syntax-transformer jd8b@syntax-transformer) (set! jd8d@core-macro-transformer (lambda (j1d60@name) (let ((j1d62@t j1d60@name)) (if (memv j1d62@t '(quote)) jd2f@quote-transformer (if (memv j1d62@t '(lambda)) jd33@lambda-transformer (if (memv j1d62@t '(case-lambda)) jd31@case-lambda-transformer (if (memv j1d62@t '(letrec)) jd17@letrec-transformer (if (memv j1d62@t '(letrec*)) jd19@letrec*-transformer (if (memv j1d62@t '(let)) jd15@let-transformer (if (memv j1d62@t '(if)) jd27@if-transformer (if (memv j1d62@t '(and)) jd29@and-transformer (if (memv j1d62@t '(or)) jd2b@or-transformer (if (memv j1d62@t '(foreign-call)) jd7b@foreign-call-transformer (if (memv j1d62@t '(syntax-case)) jd87@syntax-case-transformer (if (memv j1d62@t '(syntax)) jd8b@syntax-transformer (if (memv j1d62@t '(type-descriptor)) jd1d@type-descriptor-transformer (if (memv j1d62@t '(record-type-descriptor)) jd1f@record-type-descriptor-transformer (if (memv j1d62@t '(record-constructor-descriptor)) jd21@record-constructor-descriptor-transformer (if (memv j1d62@t '(fluid-let-syntax)) jd1b@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" j1d60@name)))))))))))))))))))) (set! j2892@jd8d@core-macro-transformer jd8d@core-macro-transformer) (set! jd8f@symbol-macro (lambda (j1d64@x j1d65@set) (let ((j1d68@t j1d64@x)) (let ((j1d6a@ls/false (jd7f@syntax-dispatch j1d68@t '(_ any)))) (if (and j1d6a@ls/false (apply (lambda (j1d6c@name) (and (jb78@id? j1d6c@name) (memq (jb7a@id->sym j1d6c@name) j1d65@set))) j1d6a@ls/false)) (apply (lambda (j1d6e@name) (jd35@bless (list 'quote j1d6e@name))) j1d6a@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1d68@t)))))) (set! j2893@jd8f@symbol-macro jd8f@symbol-macro) (set! jd91@macro-transformer (lambda (j1d70@x) (if (procedure? j1d70@x) j1d70@x (if (symbol? j1d70@x) (let ((j1d72@t j1d70@x)) (if (memv j1d72@t '(define-record-type)) jd73@define-record-type-macro (if (memv j1d72@t '(define-struct)) jd71@define-struct-macro (if (memv j1d72@t '(include)) jd67@include-macro (if (memv j1d72@t '(cond)) jd63@cond-macro (if (memv j1d72@t '(let)) jd3b@let-macro (if (memv j1d72@t '(do)) jd5b@do-macro (if (memv j1d72@t '(or)) jd5f@or-macro (if (memv j1d72@t '(and)) jd61@and-macro (if (memv j1d72@t '(let*)) jd5d@let*-macro (if (memv j1d72@t '(let-values)) jd3d@let-values-macro (if (memv j1d72@t '(let*-values)) jd3f@let*-values-macro (if (memv j1d72@t '(syntax-rules)) jd6b@syntax-rules-macro (if (memv j1d72@t '(quasiquote)) jd6d@quasiquote-macro (if (memv j1d72@t '(quasisyntax)) jd6f@quasisyntax-macro (if (memv j1d72@t '(with-syntax)) jd37@with-syntax-macro (if (memv j1d72@t '(when)) jd23@when-macro (if (memv j1d72@t '(unless)) jd25@unless-macro (if (memv j1d72@t '(case)) jd2d@case-macro (if (memv j1d72@t '(identifier-syntax)) jd59@identifier-syntax-macro (if (memv j1d72@t '(time)) jd51@time-macro (if (memv j1d72@t '(delay)) jd53@delay-macro (if (memv j1d72@t '(assert)) jd55@assert-macro (if (memv j1d72@t '(endianness)) jd57@endianness-macro (if (memv j1d72@t '(guard)) jd4d@guard-macro (if (memv j1d72@t '(define-enumeration)) jd4f@define-enumeration-macro (if (memv j1d72@t '(trace-lambda)) jd41@trace-lambda-macro (if (memv j1d72@t '(trace-define)) jd43@trace-define-macro (if (memv j1d72@t '(trace-define-syntax)) jd45@trace-define-syntax-macro (if (memv j1d72@t '(trace-let-syntax)) jd49@trace-let-syntax-macro (if (memv j1d72@t '(trace-letrec-syntax)) jd4b@trace-letrec-syntax-macro (if (memv j1d72@t '(define-condition-type)) jd75@define-condition-type-macro (if (memv j1d72@t '(parameterize)) jd79@parameterize-macro (if (memv j1d72@t '(include-into)) jd69@include-into-macro (if (memv j1d72@t '(eol-style)) (lambda (j1d74@x) (jd8f@symbol-macro j1d74@x '(none lf cr crlf nel crnel ls))) (if (memv j1d72@t '(error-handling-mode)) (lambda (j1d76@x) (jd8f@symbol-macro j1d76@x '(ignore raise replace))) (if (memv j1d72@t '(buffer-mode)) (lambda (j1d78@x) (jd8f@symbol-macro j1d78@x '(none line block))) (if (memv j1d72@t '(file-options)) jaf3@file-options-macro (if (memv j1d72@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) jd77@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" j1d70@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" j1d70@x))))) (set! j2894@jd91@macro-transformer jd91@macro-transformer) (set! jd93@local-macro-transformer (lambda (j1d7a@x) (car j1d7a@x))) (set! j2895@jd93@local-macro-transformer jd93@local-macro-transformer) (set! jd95@do-macro-call (lambda (j1d7c@transformer j1d7d@expr j1d7e@rib) (let ((j1d82@out (j1d7c@transformer (jb64@add-mark jb5c@anti-mark '#f j1d7d@expr '#f)))) (begin (let j1d86@f ((j1d84@x j1d82@out)) (if (not (jb44@stx? j1d84@x)) (if (pair? j1d84@x) (begin (j1d86@f (car j1d84@x)) (j1d86@f (cdr j1d84@x))) (if (vector? j1d84@x) (vector-for-each j1d86@f j1d84@x) (if (symbol? j1d84@x) (je5f@syntax-violation '#f '"raw symbol encountered in output of macro" j1d7d@expr j1d84@x) (void)))) (void))) (jb64@add-mark (jb5a@gen-mark) j1d7e@rib j1d82@out j1d7d@expr))))) (set! j2896@jd95@do-macro-call jd95@do-macro-call) (set! jd97@chi-macro (lambda (j1d88@p j1d89@e j1d8a@rib) (jd95@do-macro-call (jd91@macro-transformer j1d88@p) j1d89@e j1d8a@rib))) (set! j2897@jd97@chi-macro jd97@chi-macro) (set! jd99@chi-local-macro (lambda (j1d8e@p j1d8f@e j1d90@rib) (jd95@do-macro-call (jd93@local-macro-transformer j1d8e@p) j1d8f@e j1d90@rib))) (set! j2898@jd99@chi-local-macro jd99@chi-local-macro) (set! jd9b@chi-global-macro (lambda (j1d94@p j1d95@e j1d96@rib) (let ((j1d9a@lib (car j1d94@p)) (j1d9b@loc (cdr j1d94@p))) (begin (j995@j7e4@visit-library j1d9a@lib) (let ((j1d9e@x (symbol-value j1d9b@loc))) (let ((j1da0@transformer (if (procedure? j1d9e@x) j1d9e@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" j1d9e@x)))) (jd95@do-macro-call j1da0@transformer j1d95@e j1d96@rib))))))) (set! j2899@jd9b@chi-global-macro jd9b@chi-global-macro) (set! jd9d@chi-expr* (lambda (j1da2@e* j1da3@r j1da4@mr) (if (null? j1da2@e*) '() (let ((j1da8@e (jda1@chi-expr (car j1da2@e*) j1da3@r j1da4@mr))) (cons j1da8@e (jd9d@chi-expr* (cdr j1da2@e*) j1da3@r j1da4@mr)))))) (set! j289a@jd9d@chi-expr* jd9d@chi-expr*) (set! jd9f@chi-application (lambda (j1daa@e j1dab@r j1dac@mr) (let ((j1db0@t j1daa@e)) (let ((j1db2@ls/false (jd7f@syntax-dispatch j1db0@t '(any . each-any)))) (if j1db2@ls/false (apply (lambda (j1db4@rator j1db5@rands) (let ((j1db8@rator (jda1@chi-expr j1db4@rator j1dab@r j1dac@mr))) (cons j1db8@rator (jd9d@chi-expr* j1db5@rands j1dab@r j1dac@mr)))) j1db2@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1db0@t)))))) (set! j289b@jd9f@chi-application jd9f@chi-application) (set! jda1@chi-expr (lambda (j1dba@e j1dbb@r j1dbc@mr) (call-with-values (lambda () (jb9a@syntax-type j1dba@e j1dbb@r)) (lambda (j1dc6@j1dc1 j1dc7@j1dc3 j1dc8@j1dc5) (let ((j1dcc@kwd j1dc8@j1dc5) (j1dcd@value j1dc7@j1dc3) (j1dce@type j1dc6@j1dc1)) (let ((j1dd2@t j1dce@type)) (if (memv j1dd2@t '(core-macro)) (let ((j1dd4@transformer (jd8d@core-macro-transformer j1dcd@value))) (j1dd4@transformer j1dba@e j1dbb@r j1dbc@mr)) (if (memv j1dd2@t '(global)) (let ((j1dd6@lib (car j1dcd@value))) (let ((j1dd8@loc (cdr j1dcd@value))) (begin ((jde7@inv-collector) j1dd6@lib) j1dd8@loc))) (if (memv j1dd2@t '(core-prim)) (let ((j1dda@name j1dcd@value)) (list 'primitive j1dda@name)) (if (memv j1dd2@t '(call)) (jd9f@chi-application j1dba@e j1dbb@r j1dbc@mr) (if (memv j1dd2@t '(lexical)) (let ((j1ddc@lex (jd09@lexical-var j1dcd@value))) j1ddc@lex) (if (memv j1dd2@t '(global-macro global-macro!)) (jda1@chi-expr (jd9b@chi-global-macro j1dcd@value j1dba@e '#f) j1dbb@r j1dbc@mr) (if (memv j1dd2@t '(local-macro local-macro!)) (jda1@chi-expr (jd99@chi-local-macro j1dcd@value j1dba@e '#f) j1dbb@r j1dbc@mr) (if (memv j1dd2@t '(macro macro!)) (jda1@chi-expr (jd97@chi-macro j1dcd@value j1dba@e '#f) j1dbb@r j1dbc@mr) (if (memv j1dd2@t '(constant)) (let ((j1dde@datum j1dcd@value)) (list 'quote j1dde@datum)) (if (memv j1dd2@t '(set!)) (jda3@chi-set! j1dba@e j1dbb@r j1dbc@mr) (if (memv j1dd2@t '(begin)) (let ((j1de0@t j1dba@e)) (let ((j1de2@ls/false (jd7f@syntax-dispatch j1de0@t '(_ any . each-any)))) (if j1de2@ls/false (apply (lambda (j1de4@x j1de5@x*) (jadd@ja3d@build-sequence '#f (jd9d@chi-expr* (cons j1de4@x j1de5@x*) j1dbb@r j1dbc@mr))) j1de2@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1de0@t)))) (if (memv j1dd2@t '(let-syntax letrec-syntax)) (let ((j1de8@t j1dba@e)) (let ((j1dea@ls/false (jd7f@syntax-dispatch j1de8@t '(_ #(each (any any)) any . each-any)))) (if (and j1dea@ls/false (apply (lambda (j1dec@xlhs* j1ded@xrhs* j1dee@xbody j1def@xbody*) (if (not (jb80@valid-bound-ids? j1dec@xlhs*)) (je5f@syntax-violation '#f '"invalid identifiers" j1dba@e) (void))) j1dea@ls/false)) (apply (lambda (j1df4@xlhs* j1df5@xrhs* j1df6@xbody j1df7@xbody*) (let ((j1dfc@xlab* (map jb04@gen-label j1df4@xlhs*))) (let ((j1dfe@xrib (jb38@make-full-rib j1df4@xlhs* j1dfc@xlab*))) (let ((j1e00@xb* (map (lambda (j1e02@x) (jbb0@make-eval-transformer (jdd9@expand-transformer (if (eq? j1dce@type 'let-syntax) j1e02@x (jb62@add-subst j1dfe@xrib j1e02@x)) j1dbc@mr))) j1df5@xrhs*))) (jadd@ja3d@build-sequence '#f (jd9d@chi-expr* (map (lambda (j1e04@x) (jb62@add-subst j1dfe@xrib j1e04@x)) (cons j1df6@xbody j1df7@xbody*)) (append (map cons j1dfc@xlab* j1e00@xb*) j1dbb@r) (append (map cons j1dfc@xlab* j1e00@xb*) j1dbc@mr))))))) j1dea@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1de8@t)))) (if (memv j1dd2@t '(displaced-lexical)) (je5f@syntax-violation '#f '"identifier out of context" j1dba@e) (if (memv j1dd2@t '(syntax)) (je5f@syntax-violation '#f '"reference to pattern variable outside a syntax form" j1dba@e) (if (memv j1dd2@t '(define define-syntax module import library)) (je5f@syntax-violation '#f (string-append (let ((j1e06@t j1dce@type)) (if (memv j1e06@t '(define)) '"a definition" (if (memv j1e06@t '(define-syntax)) '"a define-syntax" (if (memv j1e06@t '(module)) '"a module definition" (if (memv j1e06@t '(library)) '"a library definition" (if (memv j1e06@t '(import)) '"an import declaration" (if (memv j1e06@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") j1dba@e) (if (memv j1dd2@t '(mutable)) (je5f@syntax-violation '#f '"attempt to reference an unexportable variable" j1dba@e) (je5f@syntax-violation '#f '"invalid expression" j1dba@e))))))))))))))))))))))) (set! j289c@jda1@chi-expr jda1@chi-expr) (set! jda3@chi-set! (lambda (j1e08@e j1e09@r j1e0a@mr) (let ((j1e0e@t j1e08@e)) (let ((j1e10@ls/false (jd7f@syntax-dispatch j1e0e@t '(_ any any)))) (if (and j1e10@ls/false (apply (lambda (j1e12@x j1e13@v) (jb78@id? j1e12@x)) j1e10@ls/false)) (apply (lambda (j1e16@x j1e17@v) (call-with-values (lambda () (jb9a@syntax-type j1e16@x j1e09@r)) (lambda (j1e20@j1e1b j1e21@j1e1d j1e22@j1e1f) (let ((j1e26@kwd j1e22@j1e1f) (j1e27@value j1e21@j1e1d) (j1e28@type j1e20@j1e1b)) (let ((j1e2c@t j1e28@type)) (if (memv j1e2c@t '(lexical)) (begin (jd0d@set-lexical-mutable! j1e27@value '#t) (list 'set! (jd09@lexical-var j1e27@value) (jda1@chi-expr j1e17@v j1e09@r j1e0a@mr))) (if (memv j1e2c@t '(core-prim)) (je5f@syntax-violation '#f '"cannot modify imported core primitive" j1e08@e) (if (memv j1e2c@t '(global)) (je5f@syntax-violation '#f '"attempt to modify imported binding" j1e08@e) (if (memv j1e2c@t '(global-macro!)) (jda1@chi-expr (jd9b@chi-global-macro j1e27@value j1e08@e '#f) j1e09@r j1e0a@mr) (if (memv j1e2c@t '(local-macro!)) (jda1@chi-expr (jd99@chi-local-macro j1e27@value j1e08@e '#f) j1e09@r j1e0a@mr) (if (memv j1e2c@t '(mutable)) (je5f@syntax-violation '#f '"attempt to assign to an unexportable variable" j1e08@e) (je5f@syntax-violation '#f '"invalid syntax" j1e08@e)))))))))))) j1e10@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1e0e@t)))))) (set! j289d@jda3@chi-set! jda3@chi-set!) (set! jda5@verify-formals (lambda (j1e2e@fmls j1e2f@stx) (let ((j1e32@t j1e2e@fmls)) (let ((j1e34@ls/false (jd7f@syntax-dispatch j1e32@t 'each-any))) (if j1e34@ls/false (apply (lambda (j1e36@x*) (if (not (jb80@valid-bound-ids? j1e36@x*)) (jd39@invalid-fmls-error j1e2f@stx j1e2e@fmls) (void))) j1e34@ls/false) (let ((j1e38@t j1e32@t)) (let ((j1e3a@ls/false (jd7f@syntax-dispatch j1e38@t '#(each+ any () any)))) (if j1e3a@ls/false (apply (lambda (j1e3c@x* j1e3d@x) (if (not (jb80@valid-bound-ids? (cons j1e3d@x j1e3c@x*))) (jd39@invalid-fmls-error j1e2f@stx j1e2e@fmls) (void))) j1e3a@ls/false) (let ((j1e40@t j1e38@t)) (let ((j1e42@ls/false (jd7f@syntax-dispatch j1e40@t '_))) (if j1e42@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid syntax" j1e2f@stx)) j1e42@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1e40@t)))))))))))) (set! j289e@jda5@verify-formals jda5@verify-formals) (set! jda7@chi-lambda-clause (lambda (j1e44@stx j1e45@fmls j1e46@body* j1e47@r j1e48@mr) (let ((j1e4e@t j1e45@fmls)) (let ((j1e50@ls/false (jd7f@syntax-dispatch j1e4e@t 'each-any))) (if j1e50@ls/false (apply (lambda (j1e52@x*) (begin (jda5@verify-formals j1e45@fmls j1e44@stx) (let ((j1e54@lex* (map jb00@gen-lexical j1e52@x*)) (j1e55@lab* (map jb04@gen-label j1e52@x*))) (values j1e54@lex* (jdb7@chi-internal (jb62@add-subst (jb38@make-full-rib j1e52@x* j1e55@lab*) j1e46@body*) (jd11@add-lexicals j1e55@lab* j1e54@lex* j1e47@r) j1e48@mr))))) j1e50@ls/false) (let ((j1e58@t j1e4e@t)) (let ((j1e5a@ls/false (jd7f@syntax-dispatch j1e58@t '#(each+ any () any)))) (if j1e5a@ls/false (apply (lambda (j1e5c@x* j1e5d@x) (begin (jda5@verify-formals j1e45@fmls j1e44@stx) (let ((j1e60@lex* (map jb00@gen-lexical j1e5c@x*)) (j1e61@lab* (map jb04@gen-label j1e5c@x*)) (j1e62@lex (jb00@gen-lexical j1e5d@x)) (j1e63@lab (jb04@gen-label j1e5d@x))) (values (append j1e60@lex* j1e62@lex) (jdb7@chi-internal (jb62@add-subst (jb38@make-full-rib (cons j1e5d@x j1e5c@x*) (cons j1e63@lab j1e61@lab*)) j1e46@body*) (jd11@add-lexicals (cons j1e63@lab j1e61@lab*) (cons j1e62@lex j1e60@lex*) j1e47@r) j1e48@mr))))) j1e5a@ls/false) (let ((j1e68@t j1e58@t)) (let ((j1e6a@ls/false (jd7f@syntax-dispatch j1e68@t '_))) (if j1e6a@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid syntax" j1e45@fmls)) j1e6a@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1e68@t)))))))))))) (set! j289f@jda7@chi-lambda-clause jda7@chi-lambda-clause) (set! jda9@chi-lambda-clause* (lambda (j1e6c@stx j1e6d@fmls* j1e6e@body** j1e6f@r j1e70@mr) (if (null? j1e6d@fmls*) (values '() '()) (call-with-values (lambda () (jda7@chi-lambda-clause j1e6c@stx (car j1e6d@fmls*) (car j1e6e@body**) j1e6f@r j1e70@mr)) (lambda (j1e7a@j1e77 j1e7b@j1e79) (let ((j1e7e@b j1e7b@j1e79) (j1e7f@a j1e7a@j1e77)) (call-with-values (lambda () (jda9@chi-lambda-clause* j1e6c@stx (cdr j1e6d@fmls*) (cdr j1e6e@body**) j1e6f@r j1e70@mr)) (lambda (j1e86@j1e83 j1e87@j1e85) (let ((j1e8a@b* j1e87@j1e85) (j1e8b@a* j1e86@j1e83)) (values (cons j1e7f@a j1e8b@a*) (cons j1e7e@b j1e8a@b*))))))))))) (set! j28a0@jda9@chi-lambda-clause* jda9@chi-lambda-clause*) (set! jdab@chi-defun (lambda (j1e8e@x j1e8f@r j1e90@mr) (let ((j1e94@fmls (car j1e8e@x)) (j1e95@body* (cdr j1e8e@x))) (call-with-values (lambda () (jda7@chi-lambda-clause j1e94@fmls j1e94@fmls j1e95@body* j1e8f@r j1e90@mr)) (lambda (j1e9c@j1e99 j1e9d@j1e9b) (let ((j1ea0@body j1e9d@j1e9b) (j1ea1@fmls j1e9c@j1e99)) (jadb@ja0d@build-lambda '#f j1ea1@fmls j1ea0@body))))))) (set! j28a1@jdab@chi-defun jdab@chi-defun) (set! jdad@chi-rhs (lambda (j1ea4@rhs j1ea5@r j1ea6@mr) (let ((j1eaa@t (car j1ea4@rhs))) (if (memv j1eaa@t '(defun)) (jdab@chi-defun (cdr j1ea4@rhs) j1ea5@r j1ea6@mr) (if (memv j1eaa@t '(expr)) (let ((j1eac@expr (cdr j1ea4@rhs))) (jda1@chi-expr j1eac@expr j1ea5@r j1ea6@mr)) (if (memv j1eaa@t '(top-expr)) (let ((j1eae@expr (cdr j1ea4@rhs))) (jadd@ja3d@build-sequence '#f (list (jda1@chi-expr j1eae@expr j1ea5@r j1ea6@mr) (jade@ja3f@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" j1ea4@rhs))))))) (set! j28a2@jdad@chi-rhs jdad@chi-rhs) (set! jdaf@expand-interaction-rhs*/init* (lambda (j1eb0@lhs* j1eb1@rhs* j1eb2@init* j1eb3@r j1eb4@mr) (let j1ebe@f ((j1eba@lhs* j1eb0@lhs*) (j1ebb@rhs* j1eb1@rhs*)) (if (null? j1eba@lhs*) (map (lambda (j1ec0@x) (jda1@chi-expr j1ec0@x j1eb3@r j1eb4@mr)) j1eb2@init*) (let ((j1ec2@lhs (car j1eba@lhs*)) (j1ec3@rhs (car j1ebb@rhs*))) (let ((j1ec6@t (car j1ec3@rhs))) (if (memv j1ec6@t '(defun)) (let ((j1ec8@rhs (jdab@chi-defun (cdr j1ec3@rhs) j1eb3@r j1eb4@mr))) (cons (list 'set! j1ec2@lhs j1ec8@rhs) (j1ebe@f (cdr j1eba@lhs*) (cdr j1ebb@rhs*)))) (if (memv j1ec6@t '(expr)) (let ((j1eca@rhs (jda1@chi-expr (cdr j1ec3@rhs) j1eb3@r j1eb4@mr))) (cons (list 'set! j1ec2@lhs j1eca@rhs) (j1ebe@f (cdr j1eba@lhs*) (cdr j1ebb@rhs*)))) (if (memv j1ec6@t '(top-expr)) (let ((j1ecc@e (jda1@chi-expr (cdr j1ec3@rhs) j1eb3@r j1eb4@mr))) (cons j1ecc@e (j1ebe@f (cdr j1eba@lhs*) (cdr j1ebb@rhs*)))) (error 'expand-interaction '"invallid" j1ec3@rhs)))))))))) (set! j28a3@jdaf@expand-interaction-rhs*/init* jdaf@expand-interaction-rhs*/init*) (set! jdb1@chi-rhs* (lambda (j1ece@rhs* j1ecf@r j1ed0@mr) (let j1ed6@f ((j1ed4@ls j1ece@rhs*)) (if (null? j1ed4@ls) '() (let ((j1ed8@a (jdad@chi-rhs (car j1ed4@ls) j1ecf@r j1ed0@mr))) (cons j1ed8@a (j1ed6@f (cdr j1ed4@ls)))))))) (set! j28a4@jdb1@chi-rhs* jdb1@chi-rhs*) (set! jdb3@find-bound=? (lambda (j1eda@x j1edb@lhs* j1edc@rhs*) (if (null? j1edb@lhs*) '#f (if (jb7c@bound-id=? j1eda@x (car j1edb@lhs*)) (car j1edc@rhs*) (jdb3@find-bound=? j1eda@x (cdr j1edb@lhs*) (cdr j1edc@rhs*)))))) (set! j28a5@jdb3@find-bound=? jdb3@find-bound=?) (set! jdb5@find-dups (lambda (j1ee0@ls) (let j1ee6@f ((j1ee2@ls j1ee0@ls) (j1ee3@dups '())) (if (null? j1ee2@ls) j1ee3@dups (let ((j1ee8@t (jdb3@find-bound=? (car j1ee2@ls) (cdr j1ee2@ls) (cdr j1ee2@ls)))) (if j1ee8@t ((lambda (j1eea@x) (j1ee6@f (cdr j1ee2@ls) (cons (list (car j1ee2@ls) j1eea@x) j1ee3@dups))) j1ee8@t) (j1ee6@f (cdr j1ee2@ls) j1ee3@dups))))))) (set! j28a6@jdb5@find-dups jdb5@find-dups) (set! jdb7@chi-internal (lambda (j1eec@e* j1eed@r j1eee@mr) (let ((j1ef2@rib (jb2c@make-empty-rib))) (call-with-values (lambda () (jdd7@chi-body* (map (lambda (j1f04@x) (jb62@add-subst j1ef2@rib j1f04@x)) (jb76@syntax->list j1eec@e*)) j1eed@r j1eee@mr '() '() '() '() '() j1ef2@rib '#f)) (lambda (j1f06@j1ef5 j1f07@j1ef7 j1f08@j1ef9 j1f09@j1efb j1f0a@j1efd j1f0b@j1eff j1f0c@j1f01 j1f0d@j1f03) (let ((j1f16@_exp* j1f0d@j1f03) (j1f17@kwd* j1f0c@j1f01) (j1f18@mod** j1f0b@j1eff) (j1f19@rhs* j1f0a@j1efd) (j1f1a@lex* j1f09@j1efb) (j1f1b@mr j1f08@j1ef9) (j1f1c@r j1f07@j1ef7) (j1f1d@e* j1f06@j1ef5)) (begin (if (null? j1f1d@e*) (je5f@syntax-violation '#f '"no expression in body" j1f1d@e*) (void)) (let ((j1f26@init* (jd9d@chi-expr* (append (apply append (reverse j1f18@mod**)) j1f1d@e*) j1f1c@r j1f1b@mr))) (let ((j1f28@rhs* (jdb1@chi-rhs* j1f19@rhs* j1f1c@r j1f1b@mr))) (jae2@ja47@build-letrec* '#f (reverse j1f1a@lex*) (reverse j1f28@rhs*) (jadd@ja3d@build-sequence '#f j1f26@init*))))))))))) (set! j28a7@jdb7@chi-internal jdb7@chi-internal) (set! jdb9@parse-module (lambda (j1f2a@e) (let ((j1f2c@t j1f2a@e)) (let ((j1f2e@ls/false (jd7f@syntax-dispatch j1f2c@t '(_ each-any . each-any)))) (if j1f2e@ls/false (apply (lambda (j1f30@export* j1f31@b*) (begin (if (not (for-all jb78@id? j1f30@export*)) (je5f@syntax-violation '#f '"module exports must be identifiers" j1f2a@e) (void)) (values '#f (list->vector j1f30@export*) j1f31@b*))) j1f2e@ls/false) (let ((j1f34@t j1f2c@t)) (let ((j1f36@ls/false (jd7f@syntax-dispatch j1f34@t '(_ any each-any . each-any)))) (if j1f36@ls/false (apply (lambda (j1f38@name j1f39@export* j1f3a@b*) (begin (if (not (jb78@id? j1f38@name)) (je5f@syntax-violation '#f '"module name must be an identifier" j1f2a@e) (void)) (if (not (for-all jb78@id? j1f39@export*)) (je5f@syntax-violation '#f '"module exports must be identifiers" j1f2a@e) (void)) (values j1f38@name (list->vector j1f39@export*) j1f3a@b*))) j1f36@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j1f34@t))))))))) (set! j28a8@jdb9@parse-module jdb9@parse-module) (set! jdc3@module-interface? (lambda (j1f3e@x) (and (simple-struct? j1f3e@x) (eq? (simple-struct-name j1f3e@x) 'module-interface)))) (set! j28a9@jdc3@module-interface? jdc3@module-interface?) (set! jdc5@module-interface-first-mark (lambda (j1f40@x) (simple-struct-ref j1f40@x '0))) (set! j28aa@jdc5@module-interface-first-mark jdc5@module-interface-first-mark) (set! jdc7@set-module-interface-first-mark! (lambda (j1f42@x j1f43@val) (simple-struct-set! j1f42@x '0 j1f43@val))) (set! j28ab@jdc7@set-module-interface-first-mark! jdc7@set-module-interface-first-mark!) (set! jdc9@module-interface-exp-id-vec (lambda (j1f46@x) (simple-struct-ref j1f46@x '1))) (set! j28ac@jdc9@module-interface-exp-id-vec jdc9@module-interface-exp-id-vec) (set! jdcb@set-module-interface-exp-id-vec! (lambda (j1f48@x j1f49@val) (simple-struct-set! j1f48@x '1 j1f49@val))) (set! j28ad@jdcb@set-module-interface-exp-id-vec! jdcb@set-module-interface-exp-id-vec!) (set! jdcd@module-interface-exp-lab-vec (lambda (j1f4c@x) (simple-struct-ref j1f4c@x '2))) (set! j28ae@jdcd@module-interface-exp-lab-vec jdcd@module-interface-exp-lab-vec) (set! jdcf@set-module-interface-exp-lab-vec! (lambda (j1f4e@x j1f4f@val) (simple-struct-set! j1f4e@x '2 j1f4f@val))) (set! j28af@jdcf@set-module-interface-exp-lab-vec! jdcf@set-module-interface-exp-lab-vec!) (set! jdd1@dummy '3) (set! j28b0@jdd1@dummy jdd1@dummy) (set! jdd3@module-interface-exp-id* (lambda (j1f52@iface j1f53@id) (letrec* ((j1f57@diff-marks (lambda (j1f5e@ls j1f5f@x) (begin (if (null? j1f5e@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((j1f62@a (car j1f5e@ls))) (if (eq? j1f62@a j1f5f@x) '() (cons j1f62@a (j1f57@diff-marks (cdr j1f5e@ls) j1f5f@x)))))))) (let ((j1f58@diff (j1f57@diff-marks (jb4a@stx-mark* j1f53@id) (jdc5@module-interface-first-mark j1f52@iface))) (j1f59@id-vec (jdc9@module-interface-exp-id-vec j1f52@iface))) (if (null? j1f58@diff) j1f59@id-vec (vector-map (lambda (j1f5c@x) (make-simple-struct 'stx '5 (list (jb46@stx-expr j1f5c@x) (append j1f58@diff (jb4a@stx-mark* j1f5c@x)) '() '()))) j1f59@id-vec)))))) (set! j28b1@jdd3@module-interface-exp-id* jdd3@module-interface-exp-id*) (set! jdd5@chi-internal-module (lambda (j1f64@e j1f65@r j1f66@mr j1f67@lex* j1f68@rhs* j1f69@mod** j1f6a@kwd*) (call-with-values (lambda () (jdb9@parse-module j1f64@e)) (lambda (j1f78@j1f73 j1f79@j1f75 j1f7a@j1f77) (let ((j1f7e@e* j1f7a@j1f77) (j1f7f@exp-id* j1f79@j1f75) (j1f80@name j1f78@j1f73)) (let ((j1f84@rib (jb2c@make-empty-rib))) (let ((j1f86@e* (map (lambda (j1f88@x) (jb62@add-subst j1f84@rib j1f88@x)) (jb76@syntax->list j1f7e@e*)))) (call-with-values (lambda () (jdd7@chi-body* j1f86@e* j1f65@r j1f66@mr j1f67@lex* j1f68@rhs* j1f69@mod** j1f6a@kwd* '() j1f84@rib '#f)) (lambda (j1f9a@j1f8b j1f9b@j1f8d j1f9c@j1f8f j1f9d@j1f91 j1f9e@j1f93 j1f9f@j1f95 j1fa0@j1f97 j1fa1@j1f99) (let ((j1faa@_exp* j1fa1@j1f99) (j1fab@kwd* j1fa0@j1f97) (j1fac@mod** j1f9f@j1f95) (j1fad@rhs* j1f9e@j1f93) (j1fae@lex* j1f9d@j1f91) (j1faf@mr j1f9c@j1f8f) (j1fb0@r j1f9b@j1f8d) (j1fb1@e* j1f9a@j1f8b)) (let ((j1fba@exp-lab* (vector-map (lambda (j1fbe@x) (or (jb8e@id->label (make-simple-struct 'stx '5 (list (jb7a@id->sym j1fbe@x) (jb4a@stx-mark* j1fbe@x) (list j1f84@rib) '()))) (je5f@syntax-violation '#f '"cannot find module export" j1fbe@x))) j1f7f@exp-id*)) (j1fbb@mod** (cons j1fb1@e* j1fac@mod**))) (if (not j1f80@name) (values j1fae@lex* j1fad@rhs* j1f7f@exp-id* j1fba@exp-lab* j1fb0@r j1faf@mr j1fbb@mod** j1fab@kwd*) (let ((j1fc0@lab (jb04@gen-label 'module)) (j1fc1@iface (make-simple-struct 'module-interface '4 (list (car (jb4a@stx-mark* j1f80@name)) (vector-map (lambda (j1fc4@x) (make-simple-struct 'stx '5 (list (jb46@stx-expr j1fc4@x) (jb4a@stx-mark* j1fc4@x) '() '()))) j1f7f@exp-id*) j1fba@exp-lab*)))) (values j1fae@lex* j1fad@rhs* (vector j1f80@name) (vector j1fc0@lab) (cons (cons j1fc0@lab (cons '$module j1fc1@iface)) j1fb0@r) (cons (cons j1fc0@lab (cons '$module j1fc1@iface)) j1faf@mr) j1fbb@mod** j1fab@kwd*)))))))))))))) (set! j28b2@jdd5@chi-internal-module jdd5@chi-internal-module) (set! jdd7@chi-body* (lambda (j1fc6@e* j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fcc@kwd* j1fcd@exp* j1fce@rib j1fcf@top?) (if (null? j1fc6@e*) (values j1fc6@e* j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fcc@kwd* j1fcd@exp*) (let ((j1fda@e (car j1fc6@e*))) (call-with-values (lambda () (jb9a@syntax-type j1fda@e j1fc7@r)) (lambda (j1fe2@j1fdd j1fe3@j1fdf j1fe4@j1fe1) (let ((j1fe8@kwd j1fe4@j1fe1) (j1fe9@value j1fe3@j1fdf) (j1fea@type j1fe2@j1fdd)) (let ((j1fee@kwd* (if (jb78@id? j1fe8@kwd) (cons j1fe8@kwd j1fcc@kwd*) j1fcc@kwd*))) (let ((j1ff0@t j1fea@type)) (if (memv j1ff0@t '(define)) (call-with-values (lambda () (jd01@parse-define j1fda@e)) (lambda (j1ff6@j1ff3 j1ff7@j1ff5) (let ((j1ffa@rhs j1ff7@j1ff5) (j1ffb@id j1ff6@j1ff3)) (begin (if (jb84@bound-id-member? j1ffb@id j1fee@kwd*) (je5f@syntax-violation '#f '"cannot redefine keyword" j1fda@e) (void)) (call-with-values (lambda () (jb08@gen-define-label+loc j1ffb@id j1fce@rib)) (lambda (j2002@j1fff j2003@j2001) (let ((j2006@lex j2003@j2001) (j2007@lab j2002@j1fff)) (begin (jb2e@extend-rib! j1fce@rib j1ffb@id j2007@lab) (jdd7@chi-body* (cdr j1fc6@e*) (jd0f@add-lexical j2007@lab j2006@lex j1fc7@r) j1fc8@mr (cons j2006@lex j1fc9@lex*) (cons j1ffa@rhs j1fca@rhs*) j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?))))))))) (if (memv j1ff0@t '(define-syntax)) (call-with-values (lambda () (jd03@parse-define-syntax j1fda@e)) (lambda (j200e@j200b j200f@j200d) (let ((j2012@rhs j200f@j200d) (j2013@id j200e@j200b)) (begin (if (jb84@bound-id-member? j2013@id j1fee@kwd*) (je5f@syntax-violation '#f '"cannot redefine keyword" j1fda@e) (void)) (let ((j2016@lab (jb0a@gen-define-label j2013@id j1fce@rib)) (j2017@expanded-rhs (jdd9@expand-transformer j2012@rhs j1fc8@mr))) (begin (jb2e@extend-rib! j1fce@rib j2013@id j2016@lab) (let ((j201a@b (jbb0@make-eval-transformer j2017@expanded-rhs))) (jdd7@chi-body* (cdr j1fc6@e*) (cons (cons j2016@lab j201a@b) j1fc7@r) (cons (cons j2016@lab j201a@b) j1fc8@mr) j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?)))))))) (if (memv j1ff0@t '(let-syntax letrec-syntax)) (let ((j201c@t j1fda@e)) (let ((j201e@ls/false (jd7f@syntax-dispatch j201c@t '(_ #(each (any any)) . each-any)))) (if (and j201e@ls/false (apply (lambda (j2020@xlhs* j2021@xrhs* j2022@xbody*) (if (not (jb80@valid-bound-ids? j2020@xlhs*)) (je5f@syntax-violation '#f '"invalid identifiers" j1fda@e) (void))) j201e@ls/false)) (apply (lambda (j2026@xlhs* j2027@xrhs* j2028@xbody*) (let ((j202c@xlab* (map jb04@gen-label j2026@xlhs*))) (let ((j202e@xrib (jb38@make-full-rib j2026@xlhs* j202c@xlab*))) (let ((j2030@xb* (map (lambda (j2032@x) (jbb0@make-eval-transformer (jdd9@expand-transformer (if (eq? j1fea@type 'let-syntax) j2032@x (jb62@add-subst j202e@xrib j2032@x)) j1fc8@mr))) j2027@xrhs*))) (jdd7@chi-body* (append (map (lambda (j2034@x) (jb62@add-subst j202e@xrib j2034@x)) j2028@xbody*) (cdr j1fc6@e*)) (append (map cons j202c@xlab* j2030@xb*) j1fc7@r) (append (map cons j202c@xlab* j2030@xb*) j1fc8@mr) j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?))))) j201e@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j201c@t)))) (if (memv j1ff0@t '(begin)) (let ((j2036@t j1fda@e)) (let ((j2038@ls/false (jd7f@syntax-dispatch j2036@t '(_ . each-any)))) (if j2038@ls/false (apply (lambda (j203a@x*) (jdd7@chi-body* (append j203a@x* (cdr j1fc6@e*)) j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?)) j2038@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j2036@t)))) (if (memv j1ff0@t '(global-macro global-macro!)) (jdd7@chi-body* (cons (jd9b@chi-global-macro j1fe9@value j1fda@e j1fce@rib) (cdr j1fc6@e*)) j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?) (if (memv j1ff0@t '(local-macro local-macro!)) (jdd7@chi-body* (cons (jd99@chi-local-macro j1fe9@value j1fda@e j1fce@rib) (cdr j1fc6@e*)) j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?) (if (memv j1ff0@t '(macro macro!)) (jdd7@chi-body* (cons (jd97@chi-macro j1fe9@value j1fda@e j1fce@rib) (cdr j1fc6@e*)) j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?) (if (memv j1ff0@t '(module)) (call-with-values (lambda () (jdd5@chi-internal-module j1fda@e j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd*)) (lambda (j204c@j203d j204d@j203f j204e@j2041 j204f@j2043 j2050@j2045 j2051@j2047 j2052@j2049 j2053@j204b) (let ((j205c@kwd* j2053@j204b) (j205d@mod** j2052@j2049) (j205e@mr j2051@j2047) (j205f@r j2050@j2045) (j2060@m-exp-lab* j204f@j2043) (j2061@m-exp-id* j204e@j2041) (j2062@rhs* j204d@j203f) (j2063@lex* j204c@j203d)) (begin (vector-for-each (lambda (j206c@id j206d@lab) (jb2e@extend-rib! j1fce@rib j206c@id j206d@lab)) j2061@m-exp-id* j2060@m-exp-lab*) (jdd7@chi-body* (cdr j1fc6@e*) j205f@r j205e@mr j2063@lex* j2062@rhs* j205d@mod** j205c@kwd* j1fcd@exp* j1fce@rib j1fcf@top?))))) (if (memv j1ff0@t '(library)) (begin (je41@library-expander (jb8c@stx->datum j1fda@e)) (jdd7@chi-body* (cdr j1fc6@e*) j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?)) (if (memv j1ff0@t '(export)) (let ((j2070@t j1fda@e)) (let ((j2072@ls/false (jd7f@syntax-dispatch j2070@t '(_ . each-any)))) (if j2072@ls/false (apply (lambda (j2074@exp-decl*) (jdd7@chi-body* (cdr j1fc6@e*) j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* (append j2074@exp-decl* j1fcd@exp*) j1fce@rib j1fcf@top?)) j2072@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j2070@t)))) (if (memv j1ff0@t '(import)) (letrec* ((j2077@module-import? (lambda (j20ca@e) (let ((j20cc@t j20ca@e)) (let ((j20ce@ls/false (jd7f@syntax-dispatch j20cc@t '(_ any)))) (if (and j20ce@ls/false (apply (lambda (j20d0@id) (jb78@id? j20d0@id)) j20ce@ls/false)) (apply (lambda (j20d2@id) '#t) j20ce@ls/false) (let ((j20d4@t j20cc@t)) (let ((j20d6@ls/false (jd7f@syntax-dispatch j20d4@t '(_ . each-any)))) (if j20d6@ls/false (apply (lambda (j20d8@imp*) '#f) j20d6@ls/false) (let ((j20da@t j20d4@t)) (let ((j20dc@ls/false (jd7f@syntax-dispatch j20da@t '_))) (if j20dc@ls/false (apply (lambda () (je5f@syntax-violation '#f '"malformed import form" j20ca@e)) j20dc@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j20da@t)))))))))))) (j2079@module-import (lambda (j20a8@e j20a9@r) (let ((j20ac@t j20a8@e)) (let ((j20ae@ls/false (jd7f@syntax-dispatch j20ac@t '(_ any)))) (if (and j20ae@ls/false (apply (lambda (j20b0@id) (jb78@id? j20b0@id)) j20ae@ls/false)) (apply (lambda (j20b2@id) (call-with-values (lambda () (jb9a@syntax-type j20b2@id j20a9@r)) (lambda (j20ba@j20b5 j20bb@j20b7 j20bc@j20b9) (let ((j20c0@kwd j20bc@j20b9) (j20c1@value j20bb@j20b7) (j20c2@type j20ba@j20b5)) (let ((j20c6@t j20c2@type)) (if (memv j20c6@t '($module)) (let ((j20c8@iface j20c1@value)) (values (jdd3@module-interface-exp-id* j20c8@iface j20b2@id) (jdcd@module-interface-exp-lab-vec j20c8@iface))) (je5f@syntax-violation '#f '"invalid import" j20a8@e))))))) j20ae@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j20ac@t)))))) (j207b@library-import (lambda (j208c@e) (let ((j208e@t j208c@e)) (let ((j2090@ls/false (jd7f@syntax-dispatch j208e@t '(any . each-any)))) (if j2090@ls/false (apply (lambda (j2092@ctxt j2093@imp*) (call-with-values (lambda () (jde1@parse-import-spec* (je65@syntax->datum j2093@imp*))) (lambda (j209a@j2097 j209b@j2099) (let ((j209e@subst-labels j209b@j2099) (j209f@subst-names j209a@j2097)) (values (vector-map (lambda (j20a2@name) (jb58@datum->stx j2092@ctxt j20a2@name)) j209f@subst-names) j209e@subst-labels))))) j2090@ls/false) (let ((j20a4@t j208e@t)) (let ((j20a6@ls/false (jd7f@syntax-dispatch j20a4@t '_))) (if j20a6@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid import form" j208c@e)) j20a6@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j20a4@t)))))))))) (begin (call-with-values (lambda () (if (j2077@module-import? j1fda@e) (j2079@module-import j1fda@e j1fc7@r) (j207b@library-import j1fda@e))) (lambda (j2080@j207d j2081@j207f) (let ((j2084@lab* j2081@j207f) (j2085@id* j2080@j207d)) (vector-for-each (lambda (j2088@id j2089@lab) (jb2e@extend-rib! j1fce@rib j2088@id j2089@lab)) j2085@id* j2084@lab*)))) (jdd7@chi-body* (cdr j1fc6@e*) j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?))) (if j1fcf@top? (jdd7@chi-body* (cdr j1fc6@e*) j1fc7@r j1fc8@mr (cons (jb00@gen-lexical 'dummy) j1fc9@lex*) (cons (cons 'top-expr j1fda@e) j1fca@rhs*) j1fcb@mod** j1fee@kwd* j1fcd@exp* j1fce@rib j1fcf@top?) (values j1fc6@e* j1fc7@r j1fc8@mr j1fc9@lex* j1fca@rhs* j1fcb@mod** j1fee@kwd* j1fcd@exp*)))))))))))))))))))))) (set! j28b3@jdd7@chi-body* jdd7@chi-body*) (set! jdd9@expand-transformer (lambda (j20de@expr j20df@r) (let ((j20e2@rtc (jde5@make-collector))) (let ((j20e4@expanded-rhs (let ((j20ee@j20e7 jde7@inv-collector) (j20ef@j20e9 jde9@vis-collector) (j20f0@j20eb j20e2@rtc) (j20f1@j20ed (lambda (j20f6@x) (values)))) (let ((j20f8@swap (lambda () (begin (let ((j20fa@t (j20ee@j20e7))) (begin (j20ee@j20e7 j20f0@j20eb) (set! j20f0@j20eb j20fa@t))) (let ((j20fc@t (j20ef@j20e9))) (begin (j20ef@j20e9 j20f1@j20ed) (set! j20f1@j20ed j20fc@t))))))) (dynamic-wind j20f8@swap (lambda () (jda1@chi-expr j20de@expr j20df@r j20df@r)) j20f8@swap))))) (begin (for-each (let ((j20fe@mark-visit (jde9@vis-collector))) (lambda (j2100@x) (begin (j994@j7e2@invoke-library j2100@x) (j20fe@mark-visit j2100@x)))) (j20e2@rtc)) j20e4@expanded-rhs))))) (set! j28b4@jdd9@expand-transformer jdd9@expand-transformer) (set! jddb@parse-exports (lambda (j2102@exp*) (let j210a@f ((j2104@exp* j2102@exp*) (j2105@int* '()) (j2106@ext* '())) (if (null? j2104@exp*) (begin (if (not (jb80@valid-bound-ids? j2106@ext*)) (je5f@syntax-violation 'export '"invalid exports" (jdb5@find-dups j2106@ext*)) (void)) (values (map je65@syntax->datum j2106@ext*) j2105@int*)) (let ((j210c@t (car j2104@exp*))) (let ((j210e@ls/false (jd7f@syntax-dispatch j210c@t '(any . #(each (any any)))))) (if j210e@ls/false (apply (lambda (j2110@rename j2111@i* j2112@e*) (begin (if (not (and (eq? (je65@syntax->datum j2110@rename) 'rename) (for-all jb78@id? j2111@i*) (for-all jb78@id? j2112@e*))) (je5f@syntax-violation 'export '"invalid export specifier" (car j2104@exp*)) (void)) (j210a@f (cdr j2104@exp*) (append j2111@i* j2105@int*) (append j2112@e* j2106@ext*)))) j210e@ls/false) (let ((j2116@t j210c@t)) (let ((j2118@ls/false (jd7f@syntax-dispatch j2116@t 'any))) (if j2118@ls/false (apply (lambda (j211a@ie) (begin (if (not (jb78@id? j211a@ie)) (je5f@syntax-violation 'export '"invalid export" j211a@ie) (void)) (j210a@f (cdr j2104@exp*) (cons j211a@ie j2105@int*) (cons j211a@ie j2106@ext*)))) j2118@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j2116@t))))))))))) (set! j28b5@jddb@parse-exports jddb@parse-exports) (set! jddd@parse-library-name (lambda (j211c@spec) (letrec* ((j211f@parse (lambda (j212c@x) (let ((j212e@t j212c@x)) (let ((j2130@ls/false (jd7f@syntax-dispatch j212e@t '(each-any)))) (if (and j2130@ls/false (apply (lambda (j2132@v*) (for-all (lambda (j2134@x) (let ((j2136@x (je65@syntax->datum j2134@x))) (and (integer? j2136@x) (exact? j2136@x)))) j2132@v*)) j2130@ls/false)) (apply (lambda (j2138@v*) (values '() (map je65@syntax->datum j2138@v*))) j2130@ls/false) (let ((j213a@t j212e@t)) (let ((j213c@ls/false (jd7f@syntax-dispatch j213a@t '(any . any)))) (if (and j213c@ls/false (apply (lambda (j213e@x j213f@rest) (symbol? (je65@syntax->datum j213e@x))) j213c@ls/false)) (apply (lambda (j2142@x j2143@rest) (call-with-values (lambda () (j211f@parse j2143@rest)) (lambda (j214a@j2147 j214b@j2149) (let ((j214e@v* j214b@j2149) (j214f@x* j214a@j2147)) (values (cons (je65@syntax->datum j2142@x) j214f@x*) j214e@v*))))) j213c@ls/false) (let ((j2152@t j213a@t)) (let ((j2154@ls/false (jd7f@syntax-dispatch j2152@t '()))) (if j2154@ls/false (apply (lambda () (values '() '())) j2154@ls/false) (let ((j2156@t j2152@t)) (let ((j2158@ls/false (jd7f@syntax-dispatch j2156@t '_))) (if j2158@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid library name" j211c@spec)) j2158@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j2156@t)))))))))))))))) (call-with-values (lambda () (j211f@parse j211c@spec)) (lambda (j2124@j2121 j2125@j2123) (let ((j2128@ver* j2125@j2123) (j2129@name* j2124@j2121)) (begin (if (null? j2129@name*) (je5f@syntax-violation '#f '"empty library name" j211c@spec) (void)) (values j2129@name* j2128@ver*)))))))) (set! j28b6@jddd@parse-library-name jddd@parse-library-name) (set! jddf@parse-library (lambda (j215a@e) (let ((j215c@t j215a@e)) (let ((j215e@ls/false (jd7f@syntax-dispatch j215c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and j215e@ls/false (apply (lambda (j2160@library j2161@name* j2162@export j2163@exp* j2164@import j2165@imp* j2166@b*) (and (eq? (je65@syntax->datum j2162@export) 'export) (eq? (je65@syntax->datum j2164@import) 'import) (eq? (je65@syntax->datum j2160@library) 'library))) j215e@ls/false)) (apply (lambda (j216e@library j216f@name* j2170@export j2171@exp* j2172@import j2173@imp* j2174@b*) (values j216f@name* j2171@exp* j2173@imp* j2174@b*)) j215e@ls/false) (let ((j217c@t j215c@t)) (let ((j217e@ls/false (jd7f@syntax-dispatch j217c@t '_))) (if j217e@ls/false (apply (lambda () (je5f@syntax-violation '#f '"malformed library" j215a@e)) j217e@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j217c@t))))))))) (set! j28b7@jddf@parse-library jddf@parse-library) (set! jde1@parse-import-spec* (letrec* ((j2181@idsyn? (lambda (j238a@x) (symbol? (je65@syntax->datum j238a@x)))) (j2183@dup-error (lambda (j2388@name) (je5f@syntax-violation 'import '"two imports with different bindings" j2388@name))) (j2185@merge-substs (lambda (j2376@s j2377@subst) (letrec* ((j237b@insert-to-subst (lambda (j237c@a j237d@subst) (let ((j2380@name (car j237c@a)) (j2381@label (cdr j237c@a))) (let ((j2384@t (assq j2380@name j237d@subst))) (if j2384@t ((lambda (j2386@x) (if (eq? (cdr j2386@x) j2381@label) j237d@subst (j2183@dup-error j2380@name))) j2384@t) (cons j237c@a j237d@subst))))))) (if (null? j2376@s) j2377@subst (j237b@insert-to-subst (car j2376@s) (j2185@merge-substs (cdr j2376@s) j2377@subst)))))) (j2187@exclude* (lambda (j2346@sym* j2347@subst) (letrec* ((j234b@exclude (lambda (j2364@sym j2365@subst) (if (null? j2365@subst) (je5f@syntax-violation 'import '"cannot rename unbound identifier" j2364@sym) (if (eq? j2364@sym (caar j2365@subst)) (values (cdar j2365@subst) (cdr j2365@subst)) (let ((j2368@a (car j2365@subst))) (call-with-values (lambda () (j234b@exclude j2364@sym (cdr j2365@subst))) (lambda (j236e@j236b j236f@j236d) (let ((j2372@subst j236f@j236d) (j2373@old j236e@j236b)) (values j2373@old (cons j2368@a j2372@subst))))))))))) (if (null? j2346@sym*) (values '() j2347@subst) (call-with-values (lambda () (j234b@exclude (car j2346@sym*) j2347@subst)) (lambda (j2350@j234d j2351@j234f) (let ((j2354@subst j2351@j234f) (j2355@old j2350@j234d)) (call-with-values (lambda () (j2187@exclude* (cdr j2346@sym*) j2354@subst)) (lambda (j235c@j2359 j235d@j235b) (let ((j2360@subst j235d@j235b) (j2361@old* j235c@j2359)) (values (cons j2355@old j2361@old*) j2360@subst))))))))))) (j2189@find* (lambda (j233e@sym* j233f@subst) (map (lambda (j2342@x) (let ((j2344@t (assq j2342@x j233f@subst))) (if j2344@t (cdr j2344@t) (je5f@syntax-violation 'import '"cannot find identifier" j2342@x)))) j233e@sym*))) (j218b@rem* (lambda (j2336@sym* j2337@subst) (let j233c@f ((j233a@subst j2337@subst)) (if (null? j233a@subst) '() (if (memq (caar j233a@subst) j2336@sym*) (j233c@f (cdr j233a@subst)) (cons (car j233a@subst) (j233c@f (cdr j233a@subst)))))))) (j218d@remove-dups (lambda (j2334@ls) (if (null? j2334@ls) '() (if (memq (car j2334@ls) (cdr j2334@ls)) (j218d@remove-dups (cdr j2334@ls)) (cons (car j2334@ls) (j218d@remove-dups (cdr j2334@ls))))))) (j218f@parse-library-name (lambda (j224c@spec) (letrec* ((j224f@subversion? (lambda (j2330@x) (let ((j2332@x (je65@syntax->datum j2330@x))) (and (integer? j2332@x) (exact? j2332@x) (>= j2332@x '0))))) (j2251@subversion-pred (lambda (j22d0@x*) (let ((j22d2@t j22d0@x*)) (let ((j22d4@ls/false (jd7f@syntax-dispatch j22d2@t 'any))) (if (and j22d4@ls/false (apply (lambda (j22d6@n) (j224f@subversion? j22d6@n)) j22d4@ls/false)) (apply (lambda (j22d8@n) (lambda (j22da@x) (= j22da@x (je65@syntax->datum j22d8@n)))) j22d4@ls/false) (let ((j22dc@t j22d2@t)) (let ((j22de@ls/false (jd7f@syntax-dispatch j22dc@t '(any . each-any)))) (if (and j22de@ls/false (apply (lambda (j22e0@p? j22e1@sub*) (eq? (je65@syntax->datum j22e0@p?) 'and)) j22de@ls/false)) (apply (lambda (j22e4@p? j22e5@sub*) (let ((j22e8@p* (map j2251@subversion-pred j22e5@sub*))) (lambda (j22ea@x) (for-all (lambda (j22ec@p) (j22ec@p j22ea@x)) j22e8@p*)))) j22de@ls/false) (let ((j22ee@t j22dc@t)) (let ((j22f0@ls/false (jd7f@syntax-dispatch j22ee@t '(any . each-any)))) (if (and j22f0@ls/false (apply (lambda (j22f2@p? j22f3@sub*) (eq? (je65@syntax->datum j22f2@p?) 'or)) j22f0@ls/false)) (apply (lambda (j22f6@p? j22f7@sub*) (let ((j22fa@p* (map j2251@subversion-pred j22f7@sub*))) (lambda (j22fc@x) (exists (lambda (j22fe@p) (j22fe@p j22fc@x)) j22fa@p*)))) j22f0@ls/false) (let ((j2300@t j22ee@t)) (let ((j2302@ls/false (jd7f@syntax-dispatch j2300@t '(any any)))) (if (and j2302@ls/false (apply (lambda (j2304@p? j2305@sub) (eq? (je65@syntax->datum j2304@p?) 'not)) j2302@ls/false)) (apply (lambda (j2308@p? j2309@sub) (let ((j230c@p (j2251@subversion-pred j2309@sub))) (lambda (j230e@x) (not (j230c@p j230e@x))))) j2302@ls/false) (let ((j2310@t j2300@t)) (let ((j2312@ls/false (jd7f@syntax-dispatch j2310@t '(any any)))) (if (and j2312@ls/false (apply (lambda (j2314@p? j2315@n) (and (eq? (je65@syntax->datum j2314@p?) '<=) (j224f@subversion? j2315@n))) j2312@ls/false)) (apply (lambda (j2318@p? j2319@n) (lambda (j231c@x) (<= j231c@x (je65@syntax->datum j2319@n)))) j2312@ls/false) (let ((j231e@t j2310@t)) (let ((j2320@ls/false (jd7f@syntax-dispatch j231e@t '(any any)))) (if (and j2320@ls/false (apply (lambda (j2322@p? j2323@n) (and (eq? (je65@syntax->datum j2322@p?) '>=) (j224f@subversion? j2323@n))) j2320@ls/false)) (apply (lambda (j2326@p? j2327@n) (lambda (j232a@x) (>= j232a@x (je65@syntax->datum j2327@n)))) j2320@ls/false) (let ((j232c@t j231e@t)) (let ((j232e@ls/false (jd7f@syntax-dispatch j232c@t '_))) (if j232e@ls/false (apply (lambda () (je5f@syntax-violation 'import '"invalid sub-version spec" j224c@spec j22d0@x*)) j232e@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j232c@t)))))))))))))))))))))))) (j2253@version-pred (lambda (j2280@x*) (let ((j2282@t j2280@x*)) (let ((j2284@ls/false (jd7f@syntax-dispatch j2282@t '()))) (if j2284@ls/false (apply (lambda () (lambda (j2286@x) '#t)) j2284@ls/false) (let ((j2288@t j2282@t)) (let ((j228a@ls/false (jd7f@syntax-dispatch j2288@t '(any . each-any)))) (if (and j228a@ls/false (apply (lambda (j228c@c j228d@ver*) (eq? (je65@syntax->datum j228c@c) 'and)) j228a@ls/false)) (apply (lambda (j2290@c j2291@ver*) (let ((j2294@p* (map j2253@version-pred j2291@ver*))) (lambda (j2296@x) (for-all (lambda (j2298@p) (j2298@p j2296@x)) j2294@p*)))) j228a@ls/false) (let ((j229a@t j2288@t)) (let ((j229c@ls/false (jd7f@syntax-dispatch j229a@t '(any . each-any)))) (if (and j229c@ls/false (apply (lambda (j229e@c j229f@ver*) (eq? (je65@syntax->datum j229e@c) 'or)) j229c@ls/false)) (apply (lambda (j22a2@c j22a3@ver*) (let ((j22a6@p* (map j2253@version-pred j22a3@ver*))) (lambda (j22a8@x) (exists (lambda (j22aa@p) (j22aa@p j22a8@x)) j22a6@p*)))) j229c@ls/false) (let ((j22ac@t j229a@t)) (let ((j22ae@ls/false (jd7f@syntax-dispatch j22ac@t '(any any)))) (if (and j22ae@ls/false (apply (lambda (j22b0@c j22b1@ver) (eq? (je65@syntax->datum j22b0@c) 'not)) j22ae@ls/false)) (apply (lambda (j22b4@c j22b5@ver) (let ((j22b8@p (j2253@version-pred j22b5@ver))) (lambda (j22ba@x) (not (j22b8@p j22ba@x))))) j22ae@ls/false) (let ((j22bc@t j22ac@t)) (let ((j22be@ls/false (jd7f@syntax-dispatch j22bc@t 'each-any))) (if j22be@ls/false (apply (lambda (j22c0@sub*) (let ((j22c2@p* (map j2251@subversion-pred j22c0@sub*))) (lambda (j22c4@x) (let j22ca@f ((j22c6@p* j22c2@p*) (j22c7@x j22c4@x)) (if (null? j22c6@p*) '#t (if (null? j22c7@x) '#f (and ((car j22c6@p*) (car j22c7@x)) (j22ca@f (cdr j22c6@p*) (cdr j22c7@x))))))))) j22be@ls/false) (let ((j22cc@t j22bc@t)) (let ((j22ce@ls/false (jd7f@syntax-dispatch j22cc@t '_))) (if j22ce@ls/false (apply (lambda () (je5f@syntax-violation 'import '"invalid version spec" j224c@spec j2280@x*)) j22ce@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j22cc@t)))))))))))))))))))))) (let j2256@f ((j2254@x j224c@spec)) (let ((j2258@t j2254@x)) (let ((j225a@ls/false (jd7f@syntax-dispatch j2258@t '(each-any)))) (if j225a@ls/false (apply (lambda (j225c@version-spec*) (values '() (j2253@version-pred j225c@version-spec*))) j225a@ls/false) (let ((j225e@t j2258@t)) (let ((j2260@ls/false (jd7f@syntax-dispatch j225e@t '(any . any)))) (if (and j2260@ls/false (apply (lambda (j2262@x j2263@x*) (j2181@idsyn? j2262@x)) j2260@ls/false)) (apply (lambda (j2266@x j2267@x*) (call-with-values (lambda () (j2256@f j2267@x*)) (lambda (j226e@j226b j226f@j226d) (let ((j2272@pred j226f@j226d) (j2273@name j226e@j226b)) (values (cons (je65@syntax->datum j2266@x) j2273@name) j2272@pred))))) j2260@ls/false) (let ((j2276@t j225e@t)) (let ((j2278@ls/false (jd7f@syntax-dispatch j2276@t '()))) (if j2278@ls/false (apply (lambda () (values '() (lambda (j227a@x) '#t))) j2278@ls/false) (let ((j227c@t j2276@t)) (let ((j227e@ls/false (jd7f@syntax-dispatch j227c@t '_))) (if j227e@ls/false (apply (lambda () (je5f@syntax-violation '#f '"invalid import spec" j224c@spec)) j227e@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j227c@t))))))))))))))))) (j2191@import-library (lambda (j223c@spec*) (call-with-values (lambda () (j218f@parse-library-name j223c@spec*)) (lambda (j2242@j223f j2243@j2241) (let ((j2246@pred j2243@j2241) (j2247@name j2242@j223f)) (begin (if (null? j2247@name) (je5f@syntax-violation 'import '"empty library name" j223c@spec*) (void)) (let ((j224a@lib (j98d@j7d4@find-library-by-name j2247@name))) (begin (if (not j224a@lib) (je5f@syntax-violation 'import '"cannot find library with required name" j2247@name) (void)) (if (not (j2246@pred (j967@j788@library-version j224a@lib))) (je5f@syntax-violation 'import '"library does not satisfy version specification" j223c@spec* j224a@lib) (void)) ((jdeb@imp-collector) j224a@lib) (j96f@j798@library-subst j224a@lib))))))))) (j2193@get-import (lambda (j21ae@spec) (let ((j21b0@t j21ae@spec)) (let ((j21b2@ls/false (jd7f@syntax-dispatch j21b0@t '(any . each-any)))) (if (and j21b2@ls/false (apply (lambda (j21b4@x j21b5@x*) (not (memq (je65@syntax->datum j21b4@x) '(for rename except only prefix library)))) j21b2@ls/false)) (apply (lambda (j21b8@x j21b9@x*) (j2191@import-library (cons j21b8@x j21b9@x*))) j21b2@ls/false) (let ((j21bc@t j21b0@t)) (let ((j21be@ls/false (jd7f@syntax-dispatch j21bc@t '(any any . #(each (any any)))))) (if (and j21be@ls/false (apply (lambda (j21c0@rename j21c1@isp j21c2@old* j21c3@new*) (and (eq? (je65@syntax->datum j21c0@rename) 'rename) (for-all j2181@idsyn? j21c2@old*) (for-all j2181@idsyn? j21c3@new*))) j21be@ls/false)) (apply (lambda (j21c8@rename j21c9@isp j21ca@old* j21cb@new*) (let ((j21d0@subst (j2193@get-import j21c9@isp)) (j21d1@old* (map je65@syntax->datum j21ca@old*)) (j21d2@new* (map je65@syntax->datum j21cb@new*))) (let ((j21d6@old-label* (j2189@find* j21d1@old* j21d0@subst))) (let ((j21d8@subst (j218b@rem* j21d1@old* j21d0@subst))) (j2185@merge-substs (map cons j21d2@new* j21d6@old-label*) j21d8@subst))))) j21be@ls/false) (let ((j21da@t j21bc@t)) (let ((j21dc@ls/false (jd7f@syntax-dispatch j21da@t '(any any . each-any)))) (if (and j21dc@ls/false (apply (lambda (j21de@except j21df@isp j21e0@sym*) (and (eq? (je65@syntax->datum j21de@except) 'except) (for-all j2181@idsyn? j21e0@sym*))) j21dc@ls/false)) (apply (lambda (j21e4@except j21e5@isp j21e6@sym*) (let ((j21ea@subst (j2193@get-import j21e5@isp))) (j218b@rem* (map je65@syntax->datum j21e6@sym*) j21ea@subst))) j21dc@ls/false) (let ((j21ec@t j21da@t)) (let ((j21ee@ls/false (jd7f@syntax-dispatch j21ec@t '(any any . each-any)))) (if (and j21ee@ls/false (apply (lambda (j21f0@only j21f1@isp j21f2@sym*) (and (eq? (je65@syntax->datum j21f0@only) 'only) (for-all j2181@idsyn? j21f2@sym*))) j21ee@ls/false)) (apply (lambda (j21f6@only j21f7@isp j21f8@sym*) (let ((j21fc@subst (j2193@get-import j21f7@isp)) (j21fd@sym* (map je65@syntax->datum j21f8@sym*))) (let ((j2200@sym* (j218d@remove-dups j21fd@sym*))) (let ((j2202@lab* (j2189@find* j2200@sym* j21fc@subst))) (map cons j2200@sym* j2202@lab*))))) j21ee@ls/false) (let ((j2204@t j21ec@t)) (let ((j2206@ls/false (jd7f@syntax-dispatch j2204@t '(any any any)))) (if (and j2206@ls/false (apply (lambda (j2208@prefix j2209@isp j220a@p) (and (eq? (je65@syntax->datum j2208@prefix) 'prefix) (j2181@idsyn? j220a@p))) j2206@ls/false)) (apply (lambda (j220e@prefix j220f@isp j2210@p) (let ((j2214@subst (j2193@get-import j220f@isp)) (j2215@prefix (symbol->string (je65@syntax->datum j2210@p)))) (map (lambda (j2218@x) (cons (string->symbol (string-append j2215@prefix (symbol->string (car j2218@x)))) (cdr j2218@x))) j2214@subst))) j2206@ls/false) (let ((j221a@t j2204@t)) (let ((j221c@ls/false (jd7f@syntax-dispatch j221a@t '(any each-any)))) (if (and j221c@ls/false (apply (lambda (j221e@library j221f@spec*) (eq? (je65@syntax->datum j221e@library) 'library)) j221c@ls/false)) (apply (lambda (j2222@library j2223@spec*) (j2191@import-library j2223@spec*)) j221c@ls/false) (let ((j2226@t j221a@t)) (let ((j2228@ls/false (jd7f@syntax-dispatch j2226@t '(any any . any)))) (if (and j2228@ls/false (apply (lambda (j222a@for j222b@isp j222c@rest) (eq? (je65@syntax->datum j222a@for) 'for)) j2228@ls/false)) (apply (lambda (j2230@for j2231@isp j2232@rest) (j2193@get-import j2231@isp)) j2228@ls/false) (let ((j2236@t j2226@t)) (let ((j2238@ls/false (jd7f@syntax-dispatch j2236@t 'any))) (if j2238@ls/false (apply (lambda (j223a@spec) (je5f@syntax-violation 'import '"invalid import spec" j223a@spec)) j2238@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j2236@t))))))))))))))))))))))))))) (j2195@add-imports! (lambda (j219e@imp j219f@h) (let ((j21a2@subst (j2193@get-import j219e@imp))) (for-each (lambda (j21a4@x) (let ((j21a6@name (car j21a4@x)) (j21a7@label (cdr j21a4@x))) (let ((j21aa@t (hashtable-ref j219f@h j21a6@name '#f))) (if j21aa@t ((lambda (j21ac@l) (if (not (eq? j21ac@l j21a7@label)) (j2183@dup-error j21a6@name) (void))) j21aa@t) (hashtable-set! j219f@h j21a6@name j21a7@label))))) j21a2@subst))))) (lambda (j2196@imp*) (let j219c@f ((j2198@imp* j2196@imp*) (j2199@h (make-eq-hashtable))) (if (null? j2198@imp*) (hashtable-entries j2199@h) (begin (j2195@add-imports! (car j2198@imp*) j2199@h) (j219c@f (cdr j2198@imp*) j2199@h))))))) (set! j28b8@jde1@parse-import-spec* jde1@parse-import-spec*) (set! jde3@make-top-rib (lambda (j238c@names j238d@labels) (let ((j2390@rib (jb2c@make-empty-rib))) (begin (vector-for-each (lambda (j2392@name j2393@label) (begin (if (not (symbol? j2392@name)) (error 'make-top-rib '"BUG: not a symbol" j2392@name) (void)) (jb30@extend-rib/nc! j2390@rib (make-simple-struct 'stx '5 (list j2392@name jafc@top-mark* '() '())) j2393@label))) j238c@names j238d@labels) j2390@rib)))) (set! j28b9@jde3@make-top-rib jde3@make-top-rib) (set! jde5@make-collector (lambda () (let ((j2396@ls '())) (lambda j239a (let ((j239b (length j239a))) (if (= j239b '0) (apply (lambda () j2396@ls) j239a) (if (= j239b '1) (apply (lambda (j2398@x) (set! j2396@ls (jaf5@set-cons j2398@x j2396@ls))) j239a) (error 'apply '"invalid arg count")))))))) (set! j28ba@jde5@make-collector jde5@make-collector) (set! jde7@inv-collector (j6c8@j5a6@make-parameter (lambda j239c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (j239e@x) (begin (if (not (procedure? j239e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" j239e@x) (void)) j239e@x)))) (set! j28bb@jde7@inv-collector jde7@inv-collector) (set! jde9@vis-collector (j6c8@j5a6@make-parameter (lambda j23a0@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (j23a2@x) (begin (if (not (procedure? j23a2@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" j23a2@x) (void)) j23a2@x)))) (set! j28bc@jde9@vis-collector jde9@vis-collector) (set! jdeb@imp-collector (j6c8@j5a6@make-parameter (lambda j23a4@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (j23a6@x) (begin (if (not (procedure? j23a6@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" j23a6@x) (void)) j23a6@x)))) (set! j28bd@jdeb@imp-collector jdeb@imp-collector) (set! jded@chi-library-internal (lambda (j23a8@e* j23a9@rib j23aa@top?) (call-with-values (lambda () (jdd7@chi-body* j23a8@e* '() '() '() '() '() '() '() j23a9@rib j23aa@top?)) (lambda (j23be@j23af j23bf@j23b1 j23c0@j23b3 j23c1@j23b5 j23c2@j23b7 j23c3@j23b9 j23c4@j23bb j23c5@j23bd) (let ((j23ce@exp* j23c5@j23bd) (j23cf@_kwd* j23c4@j23bb) (j23d0@mod** j23c3@j23b9) (j23d1@rhs* j23c2@j23b7) (j23d2@lex* j23c1@j23b5) (j23d3@mr j23c0@j23b3) (j23d4@r j23bf@j23b1) (j23d5@e* j23be@j23af)) (values (append (apply append (reverse j23d0@mod**)) j23d5@e*) j23d4@r j23d3@mr (reverse j23d2@lex*) (reverse j23d1@rhs*) j23ce@exp*)))))) (set! j28be@jded@chi-library-internal jded@chi-library-internal) (set! jdef@chi-interaction-expr (lambda (j23de@e j23df@rib j23e0@r) (call-with-values (lambda () (jdd7@chi-body* (list j23de@e) j23e0@r j23e0@r '() '() '() '() '() j23df@rib '#t)) (lambda (j23f4@j23e5 j23f5@j23e7 j23f6@j23e9 j23f7@j23eb j23f8@j23ed j23f9@j23ef j23fa@j23f1 j23fb@j23f3) (let ((j2404@_exp* j23fb@j23f3) (j2405@_kwd* j23fa@j23f1) (j2406@mod** j23f9@j23ef) (j2407@rhs* j23f8@j23ed) (j2408@lex* j23f7@j23eb) (j2409@mr j23f6@j23e9) (j240a@r j23f5@j23e7) (j240b@e* j23f4@j23e5)) (let ((j2414@e* (jdaf@expand-interaction-rhs*/init* (reverse j2408@lex*) (reverse j2407@rhs*) (append (apply append (reverse j2406@mod**)) j240b@e*) j240a@r j2409@mr))) (let ((j2416@e (if (null? j2414@e*) (jade@ja3f@build-void) (if (null? (cdr j2414@e*)) (car j2414@e*) (jadd@ja3d@build-sequence '#f j2414@e*))))) (values j2416@e j240a@r)))))))) (set! j28bf@jdef@chi-interaction-expr jdef@chi-interaction-expr) (set! jdf1@library-body-expander (lambda (j2418@name j2419@main-exp* j241a@imp* j241b@b* j241c@top?) (letrec* ((j2423@itc (jde5@make-collector))) (let ((j242c@j2425 jdeb@imp-collector) (j242d@j2427 je6f@top-level-context) (j242e@j2429 j2423@itc) (j242f@j242b '#f)) (let ((j2434@swap (lambda () (begin (let ((j2436@t (j242c@j2425))) (begin (j242c@j2425 j242e@j2429) (set! j242e@j2429 j2436@t))) (let ((j2438@t (j242d@j2427))) (begin (j242d@j2427 j242f@j242b) (set! j242f@j242b j2438@t))))))) (dynamic-wind j2434@swap (lambda () (call-with-values (lambda () (jde1@parse-import-spec* j241a@imp*)) (lambda (j243e@j243b j243f@j243d) (let ((j2442@subst-labels j243f@j243d) (j2443@subst-names j243e@j243b)) (let ((j2446@rib (jde3@make-top-rib j2443@subst-names j2442@subst-labels))) (letrec* ((j2449@wrap (lambda (j24c4@x) (make-simple-struct 'stx '5 (list j24c4@x jafc@top-mark* (list j2446@rib) '()))))) (let ((j244a@b* (map j2449@wrap j241b@b*)) (j244b@main-exp* (map j2449@wrap j2419@main-exp*)) (j244c@rtc (jde5@make-collector)) (j244d@vtc (jde5@make-collector))) (let ((j245a@j2453 jde7@inv-collector) (j245b@j2455 jde9@vis-collector) (j245c@j2457 j244c@rtc) (j245d@j2459 j244d@vtc)) (let ((j2462@swap (lambda () (begin (let ((j2464@t (j245a@j2453))) (begin (j245a@j2453 j245c@j2457) (set! j245c@j2457 j2464@t))) (let ((j2466@t (j245b@j2455))) (begin (j245b@j2455 j245d@j2459) (set! j245d@j2459 j2466@t))))))) (dynamic-wind j2462@swap (lambda () (call-with-values (lambda () (jded@chi-library-internal j244a@b* j2446@rib j241c@top?)) (lambda (j2474@j2469 j2475@j246b j2476@j246d j2477@j246f j2478@j2471 j2479@j2473) (let ((j2480@internal-exp* j2479@j2473) (j2481@rhs* j2478@j2471) (j2482@lex* j2477@j246f) (j2483@mr j2476@j246d) (j2484@r j2475@j246b) (j2485@init* j2474@j2469)) (call-with-values (lambda () (jddb@parse-exports (append j244b@main-exp* j2480@internal-exp*))) (lambda (j2490@j248d j2491@j248f) (let ((j2494@exp-id* j2491@j248f) (j2495@exp-name* j2490@j248d)) (begin (jb34@seal-rib! j2446@rib) (let ((j2498@init* (jd9d@chi-expr* j2485@init* j2484@r j2483@mr))) (let ((j249a@rhs* (jdb1@chi-rhs* j2481@rhs* j2484@r j2483@mr))) (begin (jb36@unseal-rib! j2446@rib) (let ((j249c@loc* (map jb02@gen-global j2482@lex*)) (j249d@export-subst (je49@make-export-subst j2495@exp-name* j2494@exp-id*))) (letrec* ((j24a1@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (je4b@make-export-env/macros j2482@lex* j249c@loc* j2484@r)) (lambda (j24a8@j24a3 j24a9@j24a5 j24aa@j24a7) (let ((j24ae@macro* j24aa@j24a7) (j24af@global* j24a9@j24a5) (j24b0@export-env j24a8@j24a3)) (begin (for-each (lambda (j24b4@s) (let ((j24b6@name (car j24b4@s)) (j24b7@label (cdr j24b4@s))) (let ((j24ba@p (assq j24b7@label j24b0@export-env))) (if j24ba@p (let ((j24bc@b (cdr j24ba@p))) (let ((j24be@type (car j24bc@b))) (if (eq? j24be@type 'mutable) (je5f@syntax-violation 'export j24a1@errstr j24b6@name) (void)))) (void))))) j249d@export-subst) (let ((j24c0@invoke-body (jae3@ja49@build-library-letrec* '#f j2418@name j2482@lex* j249c@loc* j249a@rhs* (if (null? j2498@init*) (jade@ja3f@build-void) (jadd@ja3d@build-sequence '#f j2498@init*)))) (j24c1@invoke-definitions (map jada@j99c@build-global-define (map cdr j24af@global*)))) (values (j2423@itc) (j244c@rtc) (j244d@vtc) (jadd@ja3d@build-sequence '#f (append j24c1@invoke-definitions (list j24c0@invoke-body))) j24ae@macro* j249d@export-subst j24b0@export-env))))))))))))))))))) j2462@swap)))))))))) j2434@swap)))))) (set! j28c0@jdf1@library-body-expander jdf1@library-body-expander) (set! jdf3@core-library-expander (lambda (j24c6@e j24c7@verify-name) (call-with-values (lambda () (jddf@parse-library j24c6@e)) (lambda (j24d2@j24cb j24d3@j24cd j24d4@j24cf j24d5@j24d1) (let ((j24da@b* j24d5@j24d1) (j24db@imp* j24d4@j24cf) (j24dc@exp* j24d3@j24cd) (j24dd@name* j24d2@j24cb)) (call-with-values (lambda () (jddd@parse-library-name j24dd@name*)) (lambda (j24e6@j24e3 j24e7@j24e5) (let ((j24ea@ver j24e7@j24e5) (j24eb@name j24e6@j24e3)) (begin (j24c7@verify-name j24eb@name) (call-with-values (lambda () (jdf1@library-body-expander j24eb@name j24dc@exp* j24db@imp* j24da@b* '#f)) (lambda (j24fc@j24ef j24fd@j24f1 j24fe@j24f3 j24ff@j24f5 j2500@j24f7 j2501@j24f9 j2502@j24fb) (let ((j250a@export-env j2502@j24fb) (j250b@export-subst j2501@j24f9) (j250c@visit-code j2500@j24f7) (j250d@invoke-code j24ff@j24f5) (j250e@visit-req* j24fe@j24f3) (j250f@invoke-req* j24fd@j24f1) (j2510@imp* j24fc@j24ef)) (values j24eb@name j24ea@ver j2510@imp* j250f@invoke-req* j250e@visit-req* j250d@invoke-code j250c@visit-code j250b@export-subst j250a@export-env))))))))))))) (set! j28c1@jdf3@core-library-expander jdf3@core-library-expander) (set! jdf5@parse-top-level-program (lambda (j2518@e*) (let ((j251a@t j2518@e*)) (let ((j251c@ls/false (jd7f@syntax-dispatch j251a@t '((any . each-any) . each-any)))) (if (and j251c@ls/false (apply (lambda (j251e@import j251f@imp* j2520@b*) (eq? (je65@syntax->datum j251e@import) 'import)) j251c@ls/false)) (apply (lambda (j2524@import j2525@imp* j2526@b*) (values j2525@imp* j2526@b*)) j251c@ls/false) (let ((j252a@t j251a@t)) (let ((j252c@ls/false (jd7f@syntax-dispatch j252a@t '((any . any) . any)))) (if (and j252c@ls/false (apply (lambda (j252e@import j252f@x j2530@y) (eq? (je65@syntax->datum j252e@import) 'import)) j252c@ls/false)) (apply (lambda (j2534@import j2535@x j2536@y) (je5f@syntax-violation 'expander '"invalid syntax of top-level program" (jb72@syntax-car j2518@e*))) j252c@ls/false) (let ((j253a@t j252a@t)) (let ((j253c@ls/false (jd7f@syntax-dispatch j253a@t '_))) (if j253c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) j253c@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j253a@t)))))))))))) (set! j28c2@jdf5@parse-top-level-program jdf5@parse-top-level-program) (set! jdf7@top-level-expander (lambda (j253e@e*) (call-with-values (lambda () (jdf5@parse-top-level-program j253e@e*)) (lambda (j2544@j2541 j2545@j2543) (let ((j2548@b* j2545@j2543) (j2549@imp* j2544@j2541)) (call-with-values (lambda () (jdf1@library-body-expander '() '() j2549@imp* j2548@b* '#t)) (lambda (j255a@j254d j255b@j254f j255c@j2551 j255d@j2553 j255e@j2555 j255f@j2557 j2560@j2559) (let ((j2568@export-env j2560@j2559) (j2569@export-subst j255f@j2557) (j256a@visit-code j255e@j2555) (j256b@invoke-code j255d@j2553) (j256c@visit-req* j255c@j2551) (j256d@invoke-req* j255b@j254f) (j256e@imp* j255a@j254d)) (values j256d@invoke-req* j256b@invoke-code))))))))) (set! j28c3@jdf7@top-level-expander jdf7@top-level-expander) (set! jdf9@rp (j6c5@j5a0@make-record-printer 'env (lambda (j2576@x j2577@p j2578@wr) (display '"#<environment>" j2577@p)))) (set! j28c4@jdf9@rp jdf9@rp) (set! je03@env? (lambda (j257c@x) (and (simple-struct? j257c@x) (eq? (simple-struct-name j257c@x) 'env)))) (set! j28c5@je03@env? je03@env?) (set! je05@env-names (lambda (j257e@x) (simple-struct-ref j257e@x '0))) (set! j28c6@je05@env-names je05@env-names) (set! je07@set-env-names! (lambda (j2580@x j2581@val) (simple-struct-set! j2580@x '0 j2581@val))) (set! j28c7@je07@set-env-names! je07@set-env-names!) (set! je09@env-labels (lambda (j2584@x) (simple-struct-ref j2584@x '1))) (set! j28c8@je09@env-labels je09@env-labels) (set! je0b@set-env-labels! (lambda (j2586@x j2587@val) (simple-struct-set! j2586@x '1 j2587@val))) (set! j28c9@je0b@set-env-labels! je0b@set-env-labels!) (set! je0d@env-itc (lambda (j258a@x) (simple-struct-ref j258a@x '2))) (set! j28ca@je0d@env-itc je0d@env-itc) (set! je0f@set-env-itc! (lambda (j258c@x j258d@val) (simple-struct-set! j258c@x '2 j258d@val))) (set! j28cb@je0f@set-env-itc! je0f@set-env-itc!) (set! je11@dummy '3) (set! j28cc@je11@dummy je11@dummy) (set! je13@rp (j6c5@j5a0@make-record-printer 'interaction-env (lambda (j2590@x j2591@p j2592@wr) (display '"#<environment>" j2591@p)))) (set! j28cd@je13@rp je13@rp) (set! je1d@interaction-env? (lambda (j2596@x) (and (simple-struct? j2596@x) (eq? (simple-struct-name j2596@x) 'interaction-env)))) (set! j28ce@je1d@interaction-env? je1d@interaction-env?) (set! je1f@interaction-env-rib (lambda (j2598@x) (simple-struct-ref j2598@x '0))) (set! j28cf@je1f@interaction-env-rib je1f@interaction-env-rib) (set! je21@set-interaction-env-rib! (lambda (j259a@x j259b@val) (simple-struct-set! j259a@x '0 j259b@val))) (set! j28d0@je21@set-interaction-env-rib! je21@set-interaction-env-rib!) (set! je23@interaction-env-r (lambda (j259e@x) (simple-struct-ref j259e@x '1))) (set! j28d1@je23@interaction-env-r je23@interaction-env-r) (set! je25@set-interaction-env-r! (lambda (j25a0@x j25a1@val) (simple-struct-set! j25a0@x '1 j25a1@val))) (set! j28d2@je25@set-interaction-env-r! je25@set-interaction-env-r!) (set! je27@interaction-env-locs (lambda (j25a4@x) (simple-struct-ref j25a4@x '2))) (set! j28d3@je27@interaction-env-locs je27@interaction-env-locs) (set! je29@set-interaction-env-locs! (lambda (j25a6@x j25a7@val) (simple-struct-set! j25a6@x '2 j25a7@val))) (set! j28d4@je29@set-interaction-env-locs! je29@set-interaction-env-locs!) (set! je2b@dummy '3) (set! j28d5@je2b@dummy je2b@dummy) (set! je2d@interaction-environment-symbols (lambda () (je35@environment-symbols (je6d@interaction-environment)))) (set! j28d6@je2d@interaction-environment-symbols je2d@interaction-environment-symbols) (set! je2f@environment-bindings (lambda (j25aa@e) (vector->list (vector-map (lambda (j25ac@name j25ad@label) (je31@parse-binding (cons j25ac@name (j993@j7e0@imported-label->binding j25ad@label)))) (je05@env-names j25aa@e) (je09@env-labels j25aa@e))))) (set! j28d7@je2f@environment-bindings je2f@environment-bindings) (set! je31@parse-binding (lambda (j25b0@b) (cons (car j25b0@b) (let ((j25b2@t (cadr j25b0@b))) (if (memv j25b2@t '(core-prim global)) 'procedure (if (memv j25b2@t '(core-macro macro global-macro)) 'syntax (if (memv j25b2@t '($core-rtd)) 'record (if (eq? (car j25b0@b) (cadr j25b0@b)) 'syntax 'unknown)))))))) (set! j28d8@je31@parse-binding je31@parse-binding) (set! je33@environment? (lambda (j25b4@x) (or (je03@env? j25b4@x) (je1d@interaction-env? j25b4@x)))) (set! j28d9@je33@environment? je33@environment?) (set! je35@environment-symbols (lambda (j25b6@x) (if (je03@env? j25b6@x) (vector->list (je05@env-names j25b6@x)) (if (je1d@interaction-env? j25b6@x) (map values (jb16@rib-sym* (je1f@interaction-env-rib j25b6@x))) (assertion-violation 'environment-symbols '"not an environment" j25b6@x))))) (set! j28da@je35@environment-symbols je35@environment-symbols) (set! je37@environment (lambda j25b8@imp* (let ((j25ba@itc (jde5@make-collector))) (let ((j25c0@j25bd jdeb@imp-collector) (j25c1@j25bf j25ba@itc)) (let ((j25c4@swap (lambda () (let ((j25c6@t (j25c0@j25bd))) (begin (j25c0@j25bd j25c1@j25bf) (set! j25c1@j25bf j25c6@t)))))) (dynamic-wind j25c4@swap (lambda () (call-with-values (lambda () (jde1@parse-import-spec* j25b8@imp*)) (lambda (j25cc@j25c9 j25cd@j25cb) (let ((j25d0@subst-labels j25cd@j25cb) (j25d1@subst-names j25cc@j25c9)) (make-simple-struct 'env '4 (list j25d1@subst-names j25d0@subst-labels j25ba@itc)))))) j25c4@swap)))))) (set! j28db@je37@environment je37@environment) (set! je39@null-environment (lambda (j25d4@n) (begin (if (not (eqv? j25d4@n '5)) (assertion-violation 'null-environment '"not 5" j25d4@n) (void)) (je37@environment '(psyntax null-environment-5))))) (set! j28dc@je39@null-environment je39@null-environment) (set! je3b@scheme-report-environment (lambda (j25d6@n) (begin (if (not (eqv? j25d6@n '5)) (assertion-violation 'scheme-report-environment '"not 5" j25d6@n) (void)) (je37@environment '(psyntax scheme-report-environment-5))))) (set! j28dd@je3b@scheme-report-environment je3b@scheme-report-environment) (set! je3d@expand (lambda (j25d8@x j25d9@env) (if (je03@env? j25d9@env) (let ((j25dc@rib (jde3@make-top-rib (je05@env-names j25d9@env) (je09@env-labels j25d9@env)))) (let ((j25de@x (make-simple-struct 'stx '5 (list j25d8@x jafc@top-mark* (list j25dc@rib) '()))) (j25df@itc (je0d@env-itc j25d9@env)) (j25e0@rtc (jde5@make-collector)) (j25e1@vtc (jde5@make-collector))) (let ((j25e6@x (let ((j25f8@j25e9 je6f@top-level-context) (j25f9@j25eb jde7@inv-collector) (j25fa@j25ed jde9@vis-collector) (j25fb@j25ef jdeb@imp-collector) (j25fc@j25f1 '#f) (j25fd@j25f3 j25e0@rtc) (j25fe@j25f5 j25e1@vtc) (j25ff@j25f7 j25df@itc)) (let ((j2608@swap (lambda () (begin (let ((j260a@t (j25f8@j25e9))) (begin (j25f8@j25e9 j25fc@j25f1) (set! j25fc@j25f1 j260a@t))) (let ((j260c@t (j25f9@j25eb))) (begin (j25f9@j25eb j25fd@j25f3) (set! j25fd@j25f3 j260c@t))) (let ((j260e@t (j25fa@j25ed))) (begin (j25fa@j25ed j25fe@j25f5) (set! j25fe@j25f5 j260e@t))) (let ((j2610@t (j25fb@j25ef))) (begin (j25fb@j25ef j25ff@j25f7) (set! j25ff@j25f7 j2610@t))))))) (dynamic-wind j2608@swap (lambda () (jda1@chi-expr j25de@x '() '())) j2608@swap))))) (begin (jb34@seal-rib! j25dc@rib) (values j25e6@x (j25e0@rtc)))))) (if (je1d@interaction-env? j25d9@env) (let ((j2612@rib (je1f@interaction-env-rib j25d9@env)) (j2613@r (je23@interaction-env-r j25d9@env)) (j2614@rtc (jde5@make-collector))) (let ((j2618@x (make-simple-struct 'stx '5 (list j25d8@x jafc@top-mark* (list j2612@rib) '())))) (call-with-values (lambda () (let ((j262e@j261f je6f@top-level-context) (j262f@j2621 jde7@inv-collector) (j2630@j2623 jde9@vis-collector) (j2631@j2625 jdeb@imp-collector) (j2632@j2627 j25d9@env) (j2633@j2629 j2614@rtc) (j2634@j262b (jde5@make-collector)) (j2635@j262d (jde5@make-collector))) (let ((j263e@swap (lambda () (begin (let ((j2640@t (j262e@j261f))) (begin (j262e@j261f j2632@j2627) (set! j2632@j2627 j2640@t))) (let ((j2642@t (j262f@j2621))) (begin (j262f@j2621 j2633@j2629) (set! j2633@j2629 j2642@t))) (let ((j2644@t (j2630@j2623))) (begin (j2630@j2623 j2634@j262b) (set! j2634@j262b j2644@t))) (let ((j2646@t (j2631@j2625))) (begin (j2631@j2625 j2635@j262d) (set! j2635@j262d j2646@t))))))) (dynamic-wind j263e@swap (lambda () (jdef@chi-interaction-expr j2618@x j2612@rib j2613@r)) j263e@swap)))) (lambda (j2648@j261b j2649@j261d) (let ((j264c@r^ j2649@j261d) (j264d@e j2648@j261b)) (begin (je25@set-interaction-env-r! j25d9@env j264c@r^) (values j264d@e (j2614@rtc)))))))) (assertion-violation 'expand '"not an environment" j25d9@env))))) (set! j28de@je3d@expand je3d@expand) (set! je3f@eval (lambda (j2650@x j2651@env) (begin (if (not (je33@environment? j2651@env)) (error 'eval '"not an environment" j2651@env) (void)) (call-with-values (lambda () (je3d@expand j2650@x j2651@env)) (lambda (j2658@j2655 j2659@j2657) (let ((j265c@invoke-req* j2659@j2657) (j265d@x j2658@j2655)) (begin (for-each j994@j7e2@invoke-library j265c@invoke-req*) (eval-core (j71e@j6d6@expanded->core j265d@x))))))))) (set! j28df@je3f@eval je3f@eval) (set! je41@library-expander (lambda j26ce (let ((j26cf (length j26ce))) (if (= j26cf '3) (apply (lambda (j2660@x j2661@filename j2662@verify-name) (letrec* ((j2667@build-visit-code (lambda (j26bc@macro*) (if (null? j26bc@macro*) (jade@ja3f@build-void) (jadd@ja3d@build-sequence '#f (map (lambda (j26be@x) (let ((j26c0@loc (car j26be@x)) (j26c1@src (cddr j26be@x))) (list 'set! j26c0@loc j26c1@src))) j26bc@macro*))))) (j2669@visit! (lambda (j26b4@macro*) (for-each (lambda (j26b6@x) (let ((j26b8@loc (car j26b6@x)) (j26b9@proc (cadr j26b6@x))) (set-symbol-value! j26b8@loc j26b9@proc))) j26b4@macro*)))) (call-with-values (lambda () (jdf3@core-library-expander j2660@x j2662@verify-name)) (lambda (j267c@j266b j267d@j266d j267e@j266f j267f@j2671 j2680@j2673 j2681@j2675 j2682@j2677 j2683@j2679 j2684@j267b) (let ((j268e@export-env j2684@j267b) (j268f@export-subst j2683@j2679) (j2690@macro* j2682@j2677) (j2691@invoke-code j2681@j2675) (j2692@vis* j2680@j2673) (j2693@inv* j267f@j2671) (j2694@imp* j267e@j266f) (j2695@ver j267d@j266d) (j2696@name j267c@j266b)) (let ((j26a0@id (gensym)) (j26a1@name j2696@name) (j26a2@ver j2695@ver) (j26a3@imp* (map j998@j7ea@library-spec j2694@imp*)) (j26a4@vis* (map j998@j7ea@library-spec j2692@vis*)) (j26a5@inv* (map j998@j7ea@library-spec j2693@inv*)) (j26a6@visit-proc (lambda () (j2669@visit! j2690@macro*))) (j26a7@invoke-proc (lambda () (eval-core (j71e@j6d6@expanded->core j2691@invoke-code)))) (j26a8@visit-code (j2667@build-visit-code j2690@macro*)) (j26a9@invoke-code j2691@invoke-code)) (begin (j992@j7de@install-library j26a0@id j26a1@name j26a2@ver j26a3@imp* j26a4@vis* j26a5@inv* j268f@export-subst j268e@export-env j26a6@visit-proc j26a7@invoke-proc j26a8@visit-code j26a9@invoke-code '#t j2661@filename) (values j26a0@id j26a1@name j26a2@ver j26a3@imp* j26a4@vis* j26a5@inv* j26a9@invoke-code j26a8@visit-code j268f@export-subst j268e@export-env)))))))) j26ce) (if (= j26cf '2) (apply (lambda (j26c4@x j26c5@filename) (je41@library-expander j26c4@x j26c5@filename (lambda (j26c8@x) (values)))) j26ce) (if (= j26cf '1) (apply (lambda (j26ca@x) (je41@library-expander j26ca@x '#f (lambda (j26cc@x) (values)))) j26ce) (error 'apply '"invalid arg count"))))))) (set! j28e0@je41@library-expander je41@library-expander) (set! je43@boot-library-expand (lambda (j26d0@x) (call-with-values (lambda () (je41@library-expander j26d0@x)) (lambda (j26e6@j26d3 j26e7@j26d5 j26e8@j26d7 j26e9@j26d9 j26ea@j26db j26eb@j26dd j26ec@j26df j26ed@j26e1 j26ee@j26e3 j26ef@j26e5) (let ((j26fa@export-env j26ef@j26e5) (j26fb@export-subst j26ee@j26e3) (j26fc@visit-code j26ed@j26e1) (j26fd@invoke-code j26ec@j26df) (j26fe@inv* j26eb@j26dd) (j26ff@vis* j26ea@j26db) (j2700@imp* j26e9@j26d9) (j2701@ver j26e8@j26d7) (j2702@name j26e7@j26d5) (j2703@id j26e6@j26d3)) (values j2702@name j26fd@invoke-code j26fb@export-subst j26fa@export-env)))))) (set! j28e1@je43@boot-library-expand je43@boot-library-expand) (set! je45@rev-map-append (lambda (j270e@f j270f@ls j2710@ac) (if (null? j270f@ls) j2710@ac (je45@rev-map-append j270e@f (cdr j270f@ls) (cons (j270e@f (car j270f@ls)) j2710@ac))))) (set! j28e2@je45@rev-map-append je45@rev-map-append) (set! je47@build-exports (lambda (j2714@lex*+loc* j2715@init*) (jadd@ja3d@build-sequence '#f (cons (jade@ja3f@build-void) (je45@rev-map-append (lambda (j2718@x) (list 'set! (cdr j2718@x) (car j2718@x))) j2714@lex*+loc* j2715@init*))))) (set! j28e3@je47@build-exports je47@build-exports) (set! je49@make-export-subst (lambda (j271a@name* j271b@id*) (map (lambda (j271e@name j271f@id) (let ((j2722@label (jb8e@id->label j271f@id))) (begin (if (not j2722@label) (je5f@syntax-violation '#f '"cannot export unbound identifier" j271f@id) (void)) (cons j271e@name j2722@label)))) j271a@name* j271b@id*))) (set! j28e4@je49@make-export-subst je49@make-export-subst) (set! je4b@make-export-env/macros (lambda (j2724@lex* j2725@loc* j2726@r) (letrec* ((j272b@lookup (lambda (j2748@x) (let j2750@f ((j274a@x j2748@x) (j274b@lex* j2724@lex*) (j274c@loc* j2725@loc*)) (if (pair? j274b@lex*) (if (eq? j274a@x (car j274b@lex*)) (car j274c@loc*) (j2750@f j274a@x (cdr j274b@lex*) (cdr j274c@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let j2734@f ((j272c@r j2726@r) (j272d@env '()) (j272e@global* '()) (j272f@macro* '())) (if (null? j272c@r) (values j272d@env j272e@global* j272f@macro*) (let ((j2736@x (car j272c@r))) (let ((j2738@label (car j2736@x)) (j2739@b (cdr j2736@x))) (let ((j273c@t (jb94@binding-type j2739@b))) (if (memv j273c@t '(lexical)) (let ((j273e@v (jb96@binding-value j2739@b))) (let ((j2740@loc (j272b@lookup (jd09@lexical-var j273e@v))) (j2741@type (if (jd0b@lexical-mutable? j273e@v) 'mutable 'global))) (j2734@f (cdr j272c@r) (cons (cons* j2738@label j2741@type j2740@loc) j272d@env) (cons (cons (jd09@lexical-var j273e@v) j2740@loc) j272e@global*) j272f@macro*))) (if (memv j273c@t '(local-macro)) (let ((j2744@loc (gensym))) (j2734@f (cdr j272c@r) (cons (cons* j2738@label 'global-macro j2744@loc) j272d@env) j272e@global* (cons (cons j2744@loc (jb96@binding-value j2739@b)) j272f@macro*))) (if (memv j273c@t '(local-macro!)) (let ((j2746@loc (gensym))) (j2734@f (cdr j272c@r) (cons (cons* j2738@label 'global-macro! j2746@loc) j272d@env) j272e@global* (cons (cons j2746@loc (jb96@binding-value j2739@b)) j272f@macro*))) (if (memv j273c@t '($rtd $module)) (j2734@f (cdr j272c@r) (cons j2736@x j272d@env) j272e@global* j272f@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (jb94@binding-type j2739@b) (jb96@binding-value j2739@b)))))))))))))) (set! j28e5@je4b@make-export-env/macros je4b@make-export-env/macros) (set! je4d@generate-temporaries (lambda (j2752@ls) (let ((j2754@t j2752@ls)) (let ((j2756@ls/false (jd7f@syntax-dispatch j2754@t 'each-any))) (if j2756@ls/false (apply (lambda (j2758@ls) (map (lambda (j275a@x) (make-simple-struct 'stx '5 (list (let ((j275c@x (je65@syntax->datum j275a@x))) (if (or (symbol? j275c@x) (string? j275c@x)) (gensym j275c@x) (gensym 't))) jafc@top-mark* '() '()))) j2758@ls)) j2756@ls/false) (let ((j275e@t j2754@t)) (let ((j2760@ls/false (jd7f@syntax-dispatch j275e@t '_))) (if j2760@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) j2760@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j275e@t))))))))) (set! j28e6@je4d@generate-temporaries je4d@generate-temporaries) (set! je4f@free-identifier=? (lambda (j2762@x j2763@y) (if (jb78@id? j2762@x) (if (jb78@id? j2763@y) (jb7e@free-id=? j2762@x j2763@y) (assertion-violation 'free-identifier=? '"not an identifier" j2763@y)) (assertion-violation 'free-identifier=? '"not an identifier" j2762@x)))) (set! j28e7@je4f@free-identifier=? je4f@free-identifier=?) (set! je51@bound-identifier=? (lambda (j2766@x j2767@y) (if (jb78@id? j2766@x) (if (jb78@id? j2767@y) (jb7c@bound-id=? j2766@x j2767@y) (assertion-violation 'bound-identifier=? '"not an identifier" j2767@y)) (assertion-violation 'bound-identifier=? '"not an identifier" j2766@x)))) (set! j28e8@je51@bound-identifier=? je51@bound-identifier=?) (set! je53@make-source-condition (lambda (j276a@x) (letrec* ((j2774@j276f (make-record-type-descriptor '&source-information &condition-rtd 'j2772 '#f '#f '#((immutable file-name) (immutable line)))) (j2776@j2771 '#f) (j2778@j2770 (make-record-constructor-descriptor j2774@j276f &condition-rcd j2776@j2771)) (j277b@j276e (record-predicate j2774@j276f)) (j277d@make-source-condition (record-constructor j2778@j2770)) (j277f@j276c (record-accessor j2774@j276f '0)) (j2781@j276d (record-accessor j2774@j276f '1)) (j2783@source-condition? (condition-predicate j2774@j276f)) (j2785@source-filename (condition-accessor j2774@j276f j277f@j276c)) (j2787@source-character (condition-accessor j2774@j276f j2781@j276d))) (if (and (pair? j276a@x) (pair? (cdr j276a@x))) (j277d@make-source-condition (car j276a@x) (cadr j276a@x)) (condition))))) (set! j28e9@je53@make-source-condition je53@make-source-condition) (set! je55@extract-position-condition (lambda (j2788@x) (je53@make-source-condition (je57@expression-position j2788@x)))) (set! j28ea@je55@extract-position-condition je55@extract-position-condition) (set! je57@expression-position (lambda (j278a@x) (and (jb44@stx? j278a@x) (let ((j278c@x (jb46@stx-expr j278a@x))) (and (j6bc@j58e@annotation? j278c@x) (j6bd@j590@annotation-source j278c@x)))))) (set! j28eb@je57@expression-position je57@expression-position) (set! je59@assertion-error (lambda (j278e@expr j278f@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list j278e@expr)) (je53@make-source-condition j278f@pos))))) (set! j28ec@je59@assertion-error je59@assertion-error) (set! je5b@syntax-error (lambda (j2792@x . j2794@args) (begin (if (not (for-all string? j2794@args)) (assertion-violation 'syntax-error '"invalid argument" j2794@args) (void)) (raise (condition (make-message-condition (if (null? j2794@args) '"invalid syntax" (apply string-append j2794@args))) (make-syntax-violation (je65@syntax->datum j2792@x) '#f) (je55@extract-position-condition j2792@x)))))) (set! j28ed@je5b@syntax-error je5b@syntax-error) (set! je5d@syntax-violation* (lambda (j2796@who j2797@msg j2798@form j2799@condition-object) (begin (if (not (string? j2797@msg)) (assertion-violation 'syntax-violation '"message is not a string" j2797@msg) (void)) (let ((j279e@who (if (or (string? j2796@who) (symbol? j2796@who)) j2796@who (if (not j2796@who) (let ((j27a0@t j2798@form)) (let ((j27a2@ls/false (jd7f@syntax-dispatch j27a0@t 'any))) (if (and j27a2@ls/false (apply (lambda (j27a4@id) (jb78@id? j27a4@id)) j27a2@ls/false)) (apply (lambda (j27a6@id) (je65@syntax->datum j27a6@id)) j27a2@ls/false) (let ((j27a8@t j27a0@t)) (let ((j27aa@ls/false (jd7f@syntax-dispatch j27a8@t '(any . any)))) (if (and j27aa@ls/false (apply (lambda (j27ac@id j27ad@rest) (jb78@id? j27ac@id)) j27aa@ls/false)) (apply (lambda (j27b0@id j27b1@rest) (je65@syntax->datum j27b0@id)) j27aa@ls/false) (let ((j27b4@t j27a8@t)) (let ((j27b6@ls/false (jd7f@syntax-dispatch j27b4@t '_))) (if j27b6@ls/false (apply (lambda () '#f) j27b6@ls/false) (je5f@syntax-violation '#f '"invalid syntax" j27b4@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" j2796@who))))) (raise (condition (if j279e@who (make-who-condition j279e@who) (condition)) (make-message-condition j2797@msg) j2799@condition-object (je55@extract-position-condition j2798@form))))))) (set! j28ee@je5d@syntax-violation* je5d@syntax-violation*) (set! je5f@syntax-violation (lambda j27c6 (let ((j27c7 (length j27c6))) (if (= j27c7 '3) (apply (lambda (j27b8@who j27b9@msg j27ba@form) (je5f@syntax-violation j27b8@who j27b9@msg j27ba@form '#f)) j27c6) (if (= j27c7 '4) (apply (lambda (j27be@who j27bf@msg j27c0@form j27c1@subform) (je5d@syntax-violation* j27be@who j27bf@msg j27c0@form (make-syntax-violation (je65@syntax->datum j27c0@form) (je65@syntax->datum j27c1@subform)))) j27c6) (error 'apply '"invalid arg count")))))) (set! j28ef@je5f@syntax-violation je5f@syntax-violation) (set! je61@identifier? (lambda (j27c8@x) (jb78@id? j27c8@x))) (set! j28f0@je61@identifier? je61@identifier?) (set! je63@datum->syntax (lambda (j27ca@id j27cb@datum) (if (jb78@id? j27ca@id) (jb58@datum->stx j27ca@id j27cb@datum) (assertion-violation 'datum->syntax '"not an identifier" j27ca@id)))) (set! j28f1@je63@datum->syntax je63@datum->syntax) (set! je65@syntax->datum (lambda (j27ce@x) (jb8c@stx->datum j27ce@x))) (set! j28f2@je65@syntax->datum je65@syntax->datum) (set! je67@ungensym-all (lambda (j27d0@code) (if (pair? j27d0@code) (cons (je67@ungensym-all (car j27d0@code)) (je67@ungensym-all (cdr j27d0@code))) (if (symbol? j27d0@code) (ungensym j27d0@code) j27d0@code)))) (set! j28f3@je67@ungensym-all je67@ungensym-all) (set! je69@compile-r6rs-top-level (lambda (j27d2@x*) (call-with-values (lambda () (jdf7@top-level-expander j27d2@x*)) (lambda (j27d8@j27d5 j27d9@j27d7) (let ((j27dc@invoke-code j27d9@j27d7) (j27dd@lib* j27d8@j27d5)) (lambda () (begin (for-each j994@j7e2@invoke-library j27dd@lib*) (let ((j27e0@expanded (j71e@j6d6@expanded->core j27dc@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (je67@ungensym-all j27e0@expanded)) (void)) (eval-core j27e0@expanded)))))))))) (set! j28f4@je69@compile-r6rs-top-level je69@compile-r6rs-top-level) (set! je6b@pre-compile-r6rs-top-level (lambda (j27e2@x*) (call-with-values (lambda () (jdf7@top-level-expander j27e2@x*)) (lambda (j27e8@j27e5 j27e9@j27e7) (let ((j27ec@invoke-code j27e9@j27e7) (j27ed@lib* j27e8@j27e5)) (begin (for-each j994@j7e2@invoke-library j27ed@lib*) (j6c6@j5a2@compile-core (j71e@j6d6@expanded->core j27ec@invoke-code)))))))) (set! j28f5@je6b@pre-compile-r6rs-top-level je6b@pre-compile-r6rs-top-level) (set! je6d@interaction-environment (let ((j27f0@the-env '#f)) (lambda () (or j27f0@the-env (let ((j27f2@lib (j98d@j7d4@find-library-by-name '(mosh interaction))) (j27f3@rib (jb2c@make-empty-rib))) (begin (let ((j27f6@subst (j96f@j798@library-subst j27f2@lib))) (begin (jb18@set-rib-sym*! j27f3@rib (map car j27f6@subst)) (jb1c@set-rib-mark**! j27f3@rib (map (lambda (j27f8@x) jafc@top-mark*) j27f6@subst)) (jb20@set-rib-label*! j27f3@rib (map cdr j27f6@subst)))) (let ((j27fa@env (make-simple-struct 'interaction-env '4 (list j27f3@rib '() '())))) (begin (set! j27f0@the-env j27fa@env) j27fa@env)))))))) (set! j28f6@je6d@interaction-environment je6d@interaction-environment) (set! je6f@top-level-context (j6c8@j5a6@make-parameter '#f)) (set! j28f7@je6f@top-level-context je6f@top-level-context) (j98a@j7ce@current-library-expander je41@library-expander))
(begin (begin (j71b@j6d0@current-primitive-locations (lambda (j2e4d@x) (let ((j2e4f@t (assq j2e4d@x '((syntax-error . j28ed@je5b@syntax-error) (syntax-dispatch . j288b@jd7f@syntax-dispatch) (load . j2a77@j291e@load) (interaction-environment . j28f6@je6d@interaction-environment) (library-path . j982@j7be@library-path) (mosh-cache-dir . j6c9@j5a8@mosh-cache-dir) (make-parameter . j6c8@j5a6@make-parameter) (make-variable-transformer . j2848@jbaa@make-variable-transformer) (identifier? . j28f0@je61@identifier?) (generate-temporaries . j28e6@je4d@generate-temporaries) (free-identifier=? . j28e7@je4f@free-identifier=?) (syntax->datum . j28f2@je65@syntax->datum) (datum->syntax . j28f1@je63@datum->syntax) (bound-identifier=? . j28e8@je51@bound-identifier=?) (scheme-report-environment . j28dd@je3b@scheme-report-environment) (null-environment . j28dc@je39@null-environment) (command-line . j2a74@j2918@command-line) (eval . j28df@je3f@eval) (environment . j28db@je37@environment) (syntax-violation . j28ef@je5f@syntax-violation) (assertion-error . j28ec@je59@assertion-error))))) (if j2e4f@t (cdr j2e4f@t) '#f)))) (j992@j7de@install-library 'j2e2a '(mosh interaction) '() '() '() '() '((regexp? . j2dea) (alist->eq-hash-table . j2de6) (format . j2de3) (string-split . j2dd3) (call-process . j2dcc) (set-current-directory! . j2dc8) (expand-path . j2dc7) (current-directory . j2dc6) (%spawn . j2dc5) (%waitpid . j2dc4) (simple-struct-name . j2dc3) (simple-struct-set! . j2dc2) (simple-struct-ref . j2dc1) (make-simple-struct . j2dc0) (simple-struct? . j2dbf) (pointer-ref-c-int64 . j2dbe) (pointer-ref-c-int32 . j2dbd) (pointer-ref-c-int16 . j2dbc) (pointer-ref-c-int8 . j2dbb) (pointer-ref-c-uint64 . j2dba) (pointer-ref-c-uint32 . j2db9) (pointer-ref-c-uint16 . j2db8) (pointer-ref-c-uint8 . j2db7) (pointer-set-c-uint64! . j2db6) (pointer-set-c-uint32! . j2db5) (pointer-set-c-uint16! . j2db4) (pointer-set-c-uint8! . j2db3) (pointer-set-c-int64! . j2db2) (pointer-set-c-int32! . j2db1) (pointer-set-c-int16! . j2db0) (pointer-set-c-int8! . j2daf) (pointer-set-c-pointer! . j2dae) (pointer-set-c-double! . j2dad) (pointer-set-c-float! . j2dac) (pointer-set-c-long-long! . j2dab) (pointer-set-c-long! . j2daa) (pointer-set-c-int! . j2da9) (pointer-set-c-short! . j2da8) (pointer-set-c-char! . j2da7) (pointer-ref-c-pointer . j2da6) (pointer-ref-c-double . j2da5) (pointer-ref-c-float . j2da4) (pointer-ref-c-unsigned-long-long . j2da3) (pointer-ref-c-signed-long-long . j2da2) (pointer-ref-c-unsigned-long . j2da1) (pointer-ref-c-signed-long . j2da0) (pointer-ref-c-unsigned-int . j2d9f) (pointer-ref-c-signed-int . j2d9e) (pointer-ref-c-unsigned-short . j2d9d) (pointer-ref-c-signed-short . j2d9c) (pointer-ref-c-unsigned-char . j2d9b) (pointer-ref-c-signed-char . j2d9a) (pointer->integer . j2d99) (integer->pointer . j2d98) (pointer? . j2d97) (shared-errno . j2d96) (%ffi-supported? . j2d91) (%ffi-pointer->string . j2d90) (%ffi-call . j2d8f) (%ffi-lookup . j2d8e) (%ffi-open . j2d8d) (null-terminated-utf8->string . j2d8c) (null-terminated-bytevector->string . j2d8b) (%exec . j2d8a) (%fork . j2d89) (%pipe . j2d88) (p . j2d87) (whereis . j2d6b) (register . j2d6a) (vm-join! . j2d69) (vm-set-value! . j2d68) (vm? . j2d67) (main-vm? . j2d66) (vm-eval . j2d65) (vm-self . j2d64) (vm-start! . j2d63) (make-vm . j2d62) (mutex-try-lock! . j2d61) (mutex-unlock! . j2d60) (mutex-lock! . j2d5f) (mutex? . j2d5e) (make-mutex . j2d5d) (condition-variable-notify-all! . j2d5c) (condition-variable-notify! . j2d5b) (condition-variable-wait! . j2d5a) (make-condition-variable . j2d59) (write/ss . j2d58) (string-upcase . j2d3f) (string-titlecase . j2d3e) (string-normalize-nfkd . j2d3d) (string-normalize-nfkc . j2d3c) (string-normalize-nfd . j2d3b) (string-normalize-nfc . j2d3a) (string-foldcase . j2d39) (string-downcase . j2d38) (string-ci>? . j2d37) (string-ci>=? . j2d36) (string-ci=? . j2d35) (string-ci<? . j2d34) (string-ci<=? . j2d33) (char-whitespace? . j2d32) (char-upper-case? . j2d31) (char-title-case? . j2d30) (char-numeric? . j2d2f) (char-lower-case? . j2d2e) (char-general-category . j2d2d) (char-upcase . j2d2c) (char-titlecase . j2d2b) (char-foldcase . j2d2a) (char-downcase . j2d29) (char-ci>? . j2d28) (char-ci>=? . j2d27) (char-ci=? . j2d26) (char-ci<? . j2d25) (char-ci<=? . j2d24) (char-alphabetic? . j2d23) (make-variable-transformer . jba9) (identifier? . je60) (generate-temporaries . je4c) (free-identifier=? . je4e) (syntax->datum . je64) (datum->syntax . je62) (bound-identifier=? . je50) (record-type-descriptor? . j2d22) (record-predicate . j2d21) (record-mutator . j2d20) (record-constructor . j2d1f) (record-accessor . j2d1e) (make-record-type-descriptor . j2d1d) (make-record-constructor-descriptor . j2d1c) (record? . j2d1b) (record-type-uid . j2d1a) (record-type-sealed? . j2d19) (record-type-parent . j2d18) (record-type-opaque? . j2d17) (record-type-name . j2d16) (record-type-generative? . j2d15) (record-type-field-names . j2d14) (record-rtd . j2d13) (record-field-mutable? . j2d12) (delete-file . j2d11) (file-exists? . j2d10) (vector-sort! . j2d0f) (vector-sort . j2d0e) (list-sort . j2d0d) (symbol-hash . j2d0c) (string-ci-hash . j2d0b) (string-hash . j2d0a) (equal-hash . j2d09) (hashtable-equivalence-function . j2d08) (make-hashtable . j2d07) (hashtable-hash-function . j2d06) (make-eqv-hashtable . j2d05) (make-eq-hashtable . j2d04) (hashtable? . j2d03) (hashtable-update! . j2d02) (hashtable-size . j2d01) (hashtable-set! . j2d00) (hashtable-ref . j2cff) (hashtable-mutable? . j2cfe) (hashtable-keys . j2cfd) (hashtable-entries . j2cfc) (hashtable-delete! . j2cfb) (hashtable-copy . j2cfa) (hashtable-contains? . j2cf9) (hashtable-clear! . j2cf8) (call-with-output-file . j2cf7) (call-with-input-file . j2cf6) (write-char . j2cf5) (write . j2cf4) (with-output-to-file . j2cf3) (with-input-from-file . j2cf2) (read-char . j2cf1) (read . j2cf0) (peek-char . j2cef) (open-output-file . j2cee) (open-input-file . j2ced) (newline . j2cec) (display . j2ceb) (close-output-port . j2cea) (close-input-port . j2ce9) (eof-object? . j2ce8) (eof-object . j2ce7) (current-error-port . j2ce6) (current-output-port . j2ce5) (current-input-port . j2ce4) (output-port? . j2ce3) (input-port? . j2ce2) (utf-8-codec . j2ce1) (utf-16-codec . j2ce0) (transcoder-error-handling-mode . j2cdf) (transcoder-eol-style . j2cde) (transcoder-codec . j2cdd) (transcoded-port . j2cdc) (textual-port? . j2cdb) (string->bytevector . j2cda) (standard-output-port . j2cd9) (standard-input-port . j2cd8) (standard-error-port . j2cd7) (set-port-position! . j2cd6) (put-u8 . j2cd5) (put-string . j2cd4) (put-datum . j2cd3) (put-char . j2cd2) (put-bytevector . j2cd1) (port? . j2cd0) (port-transcoder . j2ccf) (port-position . j2cce) (port-has-set-port-position!? . j2ccd) (port-has-port-position? . j2ccc) (port-eof? . j2ccb) (output-port-buffer-mode . j2cca) (open-string-output-port . j2cc9) (open-string-input-port . j2cc8) (open-file-output-port . j2cc7) (open-file-input/output-port . j2cc6) (open-file-input-port . j2cc5) (open-bytevector-output-port . j2cc4) (open-bytevector-input-port . j2cc3) (native-transcoder . j2cc2) (native-eol-style . j2cc1) (make-transcoder . j2cc0) (latin-1-codec . j2cbf) (make-i/o-write-error . j2cbe) (make-i/o-read-error . j2cbd) (make-i/o-port-error . j2cbc) (make-i/o-invalid-position-error . j2cbb) (make-i/o-filename-error . j2cba) (make-i/o-file-protection-error . j2cb9) (make-i/o-file-is-read-only-error . j2cb8) (make-i/o-file-does-not-exist-error . j2cb7) (make-i/o-file-already-exists-error . j2cb6) (make-i/o-error . j2cb5) (make-i/o-encoding-error . j2cb4) (make-i/o-decoding-error . j2cb3) (make-custom-textual-output-port . j2cb2) (make-custom-textual-input/output-port . j2cb1) (make-custom-textual-input-port . j2cb0) (make-custom-binary-output-port . j2caf) (make-custom-binary-input/output-port . j2cae) (make-custom-binary-input-port . j2cad) (make-bytevector . j2cac) (lookahead-u8 . j2cab) (lookahead-char . j2caa) (i/o-write-error? . j2ca9) (i/o-read-error? . j2ca8) (i/o-port-error? . j2ca7) (i/o-invalid-position-error? . j2ca6) (i/o-filename-error? . j2ca5) (i/o-file-protection-error? . j2ca4) (i/o-file-is-read-only-error? . j2ca3) (i/o-file-does-not-exist-error? . j2ca2) (i/o-file-already-exists-error? . j2ca1) (i/o-error? . j2ca0) (i/o-error-position . j2c9f) (i/o-error-port . j2c9e) (i/o-error-filename . j2c9d) (i/o-encoding-error? . j2c9c) (i/o-encoding-error-char . j2c9b) (i/o-decoding-error? . j2c9a) (get-u8 . j2c99) (get-string-n! . j2c98) (get-string-n . j2c97) (get-string-all . j2c96) (get-line . j2c95) (get-datum . j2c94) (get-char . j2c93) (get-bytevector-some . j2c92) (get-bytevector-n! . j2c91) (get-bytevector-n . j2c90) (get-bytevector-all . j2c8f) (flush-output-port . j2c8e) (close-port . j2c8d) (exit . j2c85) (command-line . j2917) (string-fill! . j2c84) (string-set! . j2c83) (set-cdr! . j2c82) (set-car! . j2c81) (remove . j2c80) (remv . j2c7f) (remp . j2c7e) (remq . j2c7d) (partition . j2c7c) (memv . j2c7b) (memq . j2c7a) (memp . j2c79) (member . j2c78) (exists . j2c77) (for-all . j2c76) (fold-right . j2c75) (fold-left . j2c74) (find . j2c73) (filter . j2c72) (cons* . j2c71) (assv . j2c70) (assq . j2c6f) (assp . j2c6e) (assoc . j2c6d) (call-with-string-output-port . j2c6c) (call-with-port . j2c6b) (call-with-bytevector-output-port . j2c6a) (bytevector->string . j2c69) (buffer-mode? . j2c68) (binary-port? . j2c67) (with-exception-handler . j2c66) (raise-continuable . j2c65) (raise . j2c64) (eval . je3e) (environment . je36) (make-enumeration . j2c63) (enum-set=? . j2c62) (enum-set-universe . j2c61) (enum-set-union . j2c60) (enum-set-subset? . j2c5f) (enum-set-projection . j2c5e) (enum-set-member? . j2c5d) (enum-set-intersection . j2c5c) (enum-set-indexer . j2c5b) (enum-set-difference . j2c5a) (enum-set-constructor . j2c59) (enum-set-complement . j2c58) (enum-set->list . j2c57) (who-condition? . j2c56) (warning? . j2c55) (violation? . j2c54) (undefined-violation? . j2c53) (syntax-violation? . j2c52) (syntax-violation-subform . j2c51) (syntax-violation-form . j2c50) (syntax-violation . je5e) (simple-conditions . j2c4f) (serious-condition? . j2c4e) (non-continuable-violation? . j2c4d) (message-condition? . j2c4c) (make-who-condition . j2c4b) (make-warning . j2c4a) (make-violation . j2c49) (make-undefined-violation . j2c48) (make-syntax-violation . j2c47) (make-serious-condition . j2c46) (make-non-continuable-violation . j2c45) (make-message-condition . j2c44) (make-lexical-violation . j2c43) (make-irritants-condition . j2c42) (make-implementation-restriction-violation . j2c41) (make-error . j2c40) (make-assertion-violation . j2c3f) (lexical-violation? . j2c3e) (irritants-condition? . j2c3d) (implementation-restriction-violation? . j2c3c) (error? . j2c3b) (condition-who . j2c3a) (condition-predicate . j2c39) (condition-message . j2c38) (condition-irritants . j2c37) (condition-accessor . j2c36) (condition . j2c35) (assertion-violation? . j2c34) (condition? . j2c33) (utf32->string . j2c32) (utf16->string . j2c31) (utf8->string . j2c30) (uint-list->bytevector . j2c2f) (u8-list->bytevector . j2c2e) (string->utf8 . j2c2d) (string->utf32 . j2c2c) (string->utf16 . j2c2b) (sint-list->bytevector . j2c2a) (native-endianness . j2c29) (bytevector? . j2c28) (bytevector=? . j2c27) (bytevector-uint-set! . j2c26) (bytevector-uint-ref . j2c25) (bytevector-u8-set! . j2c24) (bytevector-u8-ref . j2c23) (bytevector-u64-set! . j2c22) (bytevector-u64-ref . j2c21) (bytevector-u64-native-set! . j2c20) (bytevector-u64-native-ref . j2c1f) (bytevector-u32-set! . j2c1e) (bytevector-u32-ref . j2c1d) (bytevector-u32-native-set! . j2c1c) (bytevector-u32-native-ref . j2c1b) (bytevector-u16-set! . j2c1a) (bytevector-u16-ref . j2c19) (bytevector-u16-native-set! . j2c18) (bytevector-u16-native-ref . j2c17) (bytevector-sint-set! . j2c16) (bytevector-sint-ref . j2c15) (bytevector-s8-set! . j2c14) (bytevector-s8-ref . j2c13) (bytevector-s64-set! . j2c12) (bytevector-s64-ref . j2c11) (bytevector-s64-native-set! . j2c10) (bytevector-s64-native-ref . j2c0f) (bytevector-s32-set! . j2c0e) (bytevector-s32-ref . j2c0d) (bytevector-s32-native-set! . j2c0c) (bytevector-s32-native-ref . j2c0b) (bytevector-s16-set! . j2c0a) (bytevector-s16-ref . j2c09) (bytevector-s16-native-set! . j2c08) (bytevector-s16-native-ref . j2c07) (bytevector-length . j2c06) (bytevector-ieee-single-ref . j2c05) (bytevector-ieee-single-set! . j2c04) (bytevector-ieee-single-native-set! . j2c03) (bytevector-ieee-single-native-ref . j2c02) (bytevector-ieee-double-set! . j2c01) (bytevector-ieee-double-ref . j2c00) (bytevector-ieee-double-native-set! . j2bff) (bytevector-ieee-double-native-ref . j2bfe) (bytevector-fill! . j2bfd) (bytevector-copy! . j2bfc) (bytevector-copy . j2bfb) (bytevector->uint-list . j2bfa) (bytevector->u8-list . j2bf9) (bytevector->sint-list . j2bf8) (no-nans-violation? . j2bf7) (no-infinities-violation? . j2bf6) (make-no-nans-violation . j2bf5) (make-no-infinities-violation . j2bf4) (real->flonum . j2bf3) (flzero? . j2bf2) (fltruncate . j2bf1) (fltan . j2bf0) (flsqrt . j2bef) (flsin . j2bee) (flround . j2bed) (flpositive? . j2bec) (flonum? . j2beb) (flodd? . j2bea) (flnumerator . j2be9) (flnegative? . j2be8) (flnan? . j2be7) (flmod0 . j2be6) (flmod . j2be5) (flmin . j2be4) (flmax . j2be3) (fllog . j2be2) (flinteger? . j2be1) (flinfinite? . j2be0) (flfloor . j2bdf) (flfinite? . j2bde) (flexpt . j2bdd) (flexp . j2bdc) (fleven? . j2bdb) (fldiv0-and-mod0 . j2bda) (fldiv0 . j2bd9) (fldiv-and-mod . j2bd8) (fldiv . j2bd7) (fldenominator . j2bd6) (flcos . j2bd5) (flceiling . j2bd4) (flatan . j2bd3) (flasin . j2bd2) (flacos . j2bd1) (flabs . j2bd0) (fl>? . j2bcf) (fl>=? . j2bce) (fl=? . j2bcd) (fl<? . j2bcc) (fl<=? . j2bcb) (fl/ . j2bca) (fl- . j2bc9) (fl+ . j2bc8) (fl* . j2bc7) (fixnum->flonum . j2bc6) (fxzero? . j2bc5) (fxxor . j2bc4) (fxrotate-bit-field . j2bc3) (fxreverse-bit-field . j2bc2) (fxpositive? . j2bc1) (fxodd? . j2bc0) (fxnot . j2bbf) (fxnegative? . j2bbe) (fxmod0 . j2bbd) (fxmod . j2bbc) (fxmin . j2bbb) (fxmax . j2bba) (fxlength . j2bb9) (fxior . j2bb8) (fxif . j2bb7) (fxfirst-bit-set . j2bb6) (fxeven? . j2bb5) (fxdiv0-and-mod0 . j2bb4) (fxdiv0 . j2bb3) (fxdiv-and-mod . j2bb2) (fxdiv . j2bb1) (fxcopy-bit-field . j2bb0) (fxcopy-bit . j2baf) (fxbit-set? . j2bae) (fxbit-field . j2bad) (fxbit-count . j2bac) (fxarithmetic-shift-right . j2bab) (fxarithmetic-shift-left . j2baa) (fxarithmetic-shift . j2ba9) (fxand . j2ba8) (fx>? . j2ba7) (fx>=? . j2ba6) (fx=? . j2ba5) (fx<? . j2ba4) (fx<=? . j2ba3) (fx-/carry . j2ba2) (fx- . j2ba1) (fx+/carry . j2ba0) (fx+ . j2b9f) (fx*/carry . j2b9e) (fx* . j2b9d) (greatest-fixnum . j2b9c) (least-fixnum . j2b9b) (fixnum-width . j2b9a) (fixnum? . j2b99) (bitwise-rotate-bit-field . j2b98) (bitwise-reverse-bit-field . j2b97) (bitwise-length . j2b96) (bitwise-if . j2b95) (bitwise-first-bit-set . j2b94) (bitwise-copy-bit-field . j2b93) (bitwise-copy-bit . j2b92) (bitwise-bit-set? . j2b91) (bitwise-bit-field . j2b90) (bitwise-bit-count . j2b8f) (bitwise-xor . j2b8e) (bitwise-ior . j2b8d) (bitwise-and . j2b8c) (bitwise-not . j2b8b) (bitwise-arithmetic-shift-right . j2b8a) (bitwise-arithmetic-shift-left . j2b89) (bitwise-arithmetic-shift . j2b88) (zero? . j2b87) (vector? . j2b86) (vector-set! . j2b85) (vector-ref . j2b84) (vector-map . j2b83) (vector-length . j2b82) (vector-for-each . j2b81) (vector-fill! . j2b80) (vector->list . j2b7f) (vector . j2b7e) (values . j2b7d) (truncate . j2b7c) (tan . j2b7b) (symbol? . j2b7a) (symbol=? . j2b79) (symbol->string . j2b78) (substring . j2b77) (string? . j2b76) (string>? . j2b75) (string>=? . j2b74) (string=? . j2b73) (string<? . j2b72) (string<=? . j2b71) (string-ref . j2b70) (string-length . j2b6f) (string-for-each . j2b6e) (string-copy . j2b6d) (string-append . j2b6c) (string->symbol . j2b6b) (string->number . j2b6a) (string->list . j2b69) (string . j2b68) (sqrt . j2b67) (sin . j2b66) (round . j2b65) (reverse . j2b64) (real? . j2b63) (real-valued? . j2b62) (real-part . j2b61) (rationalize . j2b60) (rational? . j2b5f) (rational-valued? . j2b5e) (procedure? . j2b5d) (positive? . j2b5c) (pair? . j2b5b) (odd? . j2b5a) (numerator . j2b59) (number? . j2b58) (number->string . j2b57) (null? . j2b56) (not . j2b55) (negative? . j2b54) (nan? . j2b53) (min . j2b52) (max . j2b51) (map . j2b50) (make-vector . j2b4f) (make-string . j2b4e) (make-rectangular . j2b4d) (make-polar . j2b4c) (magnitude . j2b4b) (log . j2b4a) (list? . j2b49) (list-tail . j2b48) (list-ref . j2b47) (list->vector . j2b46) (list->string . j2b45) (list . j2b44) (length . j2b43) (lcm . j2b42) (integer? . j2b41) (integer-valued? . j2b40) (integer->char . j2b3f) (infinite? . j2b3e) (inexact? . j2b3d) (inexact . j2b3c) (imag-part . j2b3b) (gcd . j2b3a) (for-each . j2b39) (floor . j2b38) (finite? . j2b37) (expt . j2b36) (exp . j2b35) (exact? . j2b34) (exact-integer-sqrt . j2b33) (exact . j2b32) (even? . j2b31) (error . j2b30) (eqv? . j2b2f) (equal? . j2b2e) (eq? . j2b2d) (dynamic-wind . j2b2c) (div0-and-mod0 . j2b2b) (mod0 . j2b2a) (div0 . j2b29) (div-and-mod . j2b28) (mod . j2b27) (div . j2b26) (denominator . j2b25) (cos . j2b24) (cons . j2b23) (complex? . j2b22) (char? . j2b21) (char>? . j2b20) (char>=? . j2b1f) (char=? . j2b1e) (char<? . j2b1d) (char<=? . j2b1c) (char->integer . j2b1b) (ceiling . j2b1a) (call-with-values . j2b19) (call/cc . j2b18) (call-with-current-continuation . j2b17) (cddddr . j2b16) (cdddar . j2b15) (cddadr . j2b14) (cddaar . j2b13) (cdaddr . j2b12) (cdadar . j2b11) (cdaadr . j2b10) (cdaaar . j2b0f) (cadddr . j2b0e) (caddar . j2b0d) (cadadr . j2b0c) (cadaar . j2b0b) (caaddr . j2b0a) (caadar . j2b09) (caaadr . j2b08) (caaaar . j2b07) (cdddr . j2b06) (cddar . j2b05) (cdadr . j2b04) (cdaar . j2b03) (caddr . j2b02) (cadar . j2b01) (caadr . j2b00) (caaar . j2aff) (cddr . j2afe) (cdar . j2afd) (cadr . j2afc) (caar . j2afb) (cdr . j2afa) (car . j2af9) (boolean? . j2af8) (boolean=? . j2af7) (atan . j2af6) (assertion-violation . j2af5) (asin . j2af4) (apply . j2af3) (append . j2af2) (angle . j2af1) (acos . j2af0) (abs . j2aef) (/ . j2aee) (* . j2aed) (- . j2aec) (+ . j2aeb) (>= . j2aea) (> . j2ae9) (= . j2ae8) (<= . j2ae7) (< . j2ae6) (library . j2ae5) (&no-nans . j2ae4) (&no-infinities . j2ae3) (&i/o-encoding . j2ae2) (&i/o-decoding . j2ae1) (&i/o-port . j2ae0) (&i/o-file-does-not-exist . j2adf) (&i/o-file-already-exists . j2ade) (&i/o-file-is-read-only . j2add) (&i/o-file-protection . j2adc) (&i/o-filename . j2adb) (&i/o-invalid-position . j2ada) (&i/o-write . j2ad9) (&i/o-read . j2ad8) (&i/o . j2ad7) (&undefined . j2ad6) (&syntax . j2ad5) (&lexical . j2ad4) (&implementation-restriction . j2ad3) (&non-continuable . j2ad2) (&who . j2ad1) (&irritants . j2ad0) (&assertion . j2acf) (&violation . j2ace) (&error . j2acd) (&serious . j2acc) (&warning . j2acb) (&message . j2aca) (&condition . j2ac9) (define-condition-type . j2ac8) (define-enumeration . j2ac7) (define-record-type . j2ac6) (parent-rtd . j2ac5) (nongenerative . j2ac4) (opaque . j2ac3) (sealed . j2ac2) (protocol . j2ac1) (parent . j2ac0) (immutable . j2abf) (mutable . j2abe) (fields . j2abd) (error-handling-mode . j2abc) (file-options . j2abb) (buffer-mode . j2aba) (eol-style . j2ab9) (guard . j2ab8) (unsyntax-splicing . j2ab5) (unsyntax . j2ab4) (unquote-splicing . j2ab3) (unquote . j2ab2) (_ . j2ab1) (else . j2ab0) (=> . j2aaf) (... . j2aae) (assert . j2aad) (endianness . j2aac) (time . j2aaa) (do . j2aa9) (cond . j2aa8) (let* . j2aa7) (let*-values . j2aa6) (let-values . j2aa5) (identifier-syntax . j2aa4) (with-syntax . j2aa3) (quasisyntax . j2aa2) (quasiquote . j2aa1) (syntax-rules . j2aa0) (include . j2a9f) (record-constructor-descriptor . j2a9d) (record-type-descriptor . j2a9c) (case . j2a9b) (unless . j2a99) (when . j2a98) (or . j2a97) (and . j2a96) (if . j2a95) (let . j2a94) (letrec* . j2a93) (letrec . j2a92) (case-lambda . j2a90) (lambda . j2a8f) (syntax . j2a8e) (syntax-case . j2a8d) (quote . j2a8c) (letrec-syntax . j2a8a) (let-syntax . j2a89) (set! . j2a88) (import . j2a87) (begin . j2a86) (define-syntax . j2a84) (define . j2a83)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e2b '(psyntax null-environment-5) '() '() '() '() '((make-promise . j2c86) (unquote-splicing . j2ab3) (unquote . j2ab2) (_ . j2ab1) (else . j2ab0) (=> . j2aaf) (... . j2aae) (delay . j2aab) (do . j2aa9) (cond . j2aa8) (let* . j2aa7) (quasiquote . j2aa1) (syntax-rules . j2aa0) (case . j2a9b) (or . j2a97) (and . j2a96) (if . j2a95) (let . j2a94) (letrec . j2a92) (lambda . j2a8f) (quote . j2a8c) (letrec-syntax . j2a8a) (let-syntax . j2a89) (set! . j2a88) (begin . j2a86) (define-syntax . j2a84) (define . j2a83)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e2c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . j2d37) (string-ci>=? . j2d36) (string-ci=? . j2d35) (string-ci<? . j2d34) (string-ci<=? . j2d33) (char-whitespace? . j2d32) (char-upper-case? . j2d31) (char-numeric? . j2d2f) (char-lower-case? . j2d2e) (char-upcase . j2d2c) (char-downcase . j2d29) (char-ci>? . j2d28) (char-ci>=? . j2d27) (char-ci=? . j2d26) (char-ci<? . j2d25) (char-ci<=? . j2d24) (char-alphabetic? . j2d23) (call-with-output-file . j2cf7) (call-with-input-file . j2cf6) (write-char . j2cf5) (write . j2cf4) (with-output-to-file . j2cf3) (with-input-from-file . j2cf2) (read-char . j2cf1) (read . j2cf0) (peek-char . j2cef) (open-output-file . j2cee) (open-input-file . j2ced) (newline . j2cec) (display . j2ceb) (close-output-port . j2cea) (close-input-port . j2ce9) (eof-object . j2ce7) (current-output-port . j2ce5) (current-input-port . j2ce4) (output-port? . j2ce3) (input-port? . j2ce2) (scheme-report-environment . je3a) (quotient . j2c8c) (null-environment . je38) (remainder . j2c8b) (modulo . j2c8a) (inexact->exact . j2c89) (force . j2c88) (exact->inexact . j2c87) (make-promise . j2c86) (string-fill! . j2c84) (string-set! . j2c83) (set-cdr! . j2c82) (set-car! . j2c81) (memv . j2c7b) (memq . j2c7a) (member . j2c78) (assv . j2c70) (assq . j2c6f) (assoc . j2c6d) (eval . je3e) (zero? . j2b87) (vector? . j2b86) (vector-set! . j2b85) (vector-ref . j2b84) (vector-length . j2b82) (vector-fill! . j2b80) (vector->list . j2b7f) (vector . j2b7e) (values . j2b7d) (truncate . j2b7c) (tan . j2b7b) (symbol? . j2b7a) (symbol->string . j2b78) (substring . j2b77) (string? . j2b76) (string>? . j2b75) (string>=? . j2b74) (string=? . j2b73) (string<? . j2b72) (string<=? . j2b71) (string-ref . j2b70) (string-length . j2b6f) (string-copy . j2b6d) (string-append . j2b6c) (string->symbol . j2b6b) (string->number . j2b6a) (string->list . j2b69) (string . j2b68) (sqrt . j2b67) (sin . j2b66) (round . j2b65) (reverse . j2b64) (real? . j2b63) (real-part . j2b61) (rationalize . j2b60) (rational? . j2b5f) (procedure? . j2b5d) (positive? . j2b5c) (pair? . j2b5b) (odd? . j2b5a) (numerator . j2b59) (number? . j2b58) (number->string . j2b57) (not . j2b55) (negative? . j2b54) (min . j2b52) (max . j2b51) (map . j2b50) (make-vector . j2b4f) (make-string . j2b4e) (make-rectangular . j2b4d) (make-polar . j2b4c) (magnitude . j2b4b) (log . j2b4a) (list? . j2b49) (list-tail . j2b48) (list-ref . j2b47) (list->vector . j2b46) (list->string . j2b45) (list . j2b44) (length . j2b43) (lcm . j2b42) (integer? . j2b41) (integer->char . j2b3f) (inexact? . j2b3d) (imag-part . j2b3b) (gcd . j2b3a) (for-each . j2b39) (floor . j2b38) (expt . j2b36) (exp . j2b35) (exact? . j2b34) (even? . j2b31) (eqv? . j2b2f) (equal? . j2b2e) (eq? . j2b2d) (dynamic-wind . j2b2c) (denominator . j2b25) (cos . j2b24) (cons . j2b23) (complex? . j2b22) (char? . j2b21) (char>? . j2b20) (char>=? . j2b1f) (char=? . j2b1e) (char<? . j2b1d) (char<=? . j2b1c) (char->integer . j2b1b) (ceiling . j2b1a) (call-with-values . j2b19) (call-with-current-continuation . j2b17) (cddddr . j2b16) (cdddar . j2b15) (cddadr . j2b14) (cddaar . j2b13) (cdaddr . j2b12) (cdadar . j2b11) (cdaadr . j2b10) (cdaaar . j2b0f) (cadddr . j2b0e) (caddar . j2b0d) (cadadr . j2b0c) (cadaar . j2b0b) (caaddr . j2b0a) (caadar . j2b09) (caaadr . j2b08) (caaaar . j2b07) (cdddr . j2b06) (cddar . j2b05) (cdadr . j2b04) (cdaar . j2b03) (caddr . j2b02) (cadar . j2b01) (caadr . j2b00) (caaar . j2aff) (cddr . j2afe) (cdar . j2afd) (cadr . j2afc) (caar . j2afb) (cdr . j2afa) (car . j2af9) (boolean? . j2af8) (atan . j2af6) (asin . j2af4) (apply . j2af3) (append . j2af2) (angle . j2af1) (acos . j2af0) (abs . j2aef) (/ . j2aee) (* . j2aed) (- . j2aec) (+ . j2aeb) (>= . j2aea) (> . j2ae9) (= . j2ae8) (<= . j2ae7) (< . j2ae6) (unquote-splicing . j2ab3) (unquote . j2ab2) (else . j2ab0) (=> . j2aaf) (... . j2aae) (delay . j2aab) (do . j2aa9) (cond . j2aa8) (let* . j2aa7) (quasiquote . j2aa1) (syntax-rules . j2aa0) (case . j2a9b) (or . j2a97) (and . j2a96) (if . j2a95) (let . j2a94) (letrec . j2a92) (lambda . j2a8f) (quote . j2a8c) (letrec-syntax . j2a8a) (let-syntax . j2a89) (set! . j2a88) (begin . j2a86) (define-syntax . j2a84) (define . j2a83)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e2d '(psyntax modules) '() '() '() '() '((module . j2a85)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e2e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e2f '(rnrs) '(6) '() '() '() '((regexp? . j2dea) (string-upcase . j2d3f) (string-titlecase . j2d3e) (string-normalize-nfkd . j2d3d) (string-normalize-nfkc . j2d3c) (string-normalize-nfd . j2d3b) (string-normalize-nfc . j2d3a) (string-foldcase . j2d39) (string-downcase . j2d38) (string-ci>? . j2d37) (string-ci>=? . j2d36) (string-ci=? . j2d35) (string-ci<? . j2d34) (string-ci<=? . j2d33) (char-whitespace? . j2d32) (char-upper-case? . j2d31) (char-title-case? . j2d30) (char-numeric? . j2d2f) (char-lower-case? . j2d2e) (char-general-category . j2d2d) (char-upcase . j2d2c) (char-titlecase . j2d2b) (char-foldcase . j2d2a) (char-downcase . j2d29) (char-ci>? . j2d28) (char-ci>=? . j2d27) (char-ci=? . j2d26) (char-ci<? . j2d25) (char-ci<=? . j2d24) (char-alphabetic? . j2d23) (make-variable-transformer . jba9) (identifier? . je60) (generate-temporaries . je4c) (free-identifier=? . je4e) (syntax->datum . je64) (datum->syntax . je62) (bound-identifier=? . je50) (record-type-descriptor? . j2d22) (record-predicate . j2d21) (record-mutator . j2d20) (record-constructor . j2d1f) (record-accessor . j2d1e) (make-record-type-descriptor . j2d1d) (make-record-constructor-descriptor . j2d1c) (record? . j2d1b) (record-type-uid . j2d1a) (record-type-sealed? . j2d19) (record-type-parent . j2d18) (record-type-opaque? . j2d17) (record-type-name . j2d16) (record-type-generative? . j2d15) (record-type-field-names . j2d14) (record-rtd . j2d13) (record-field-mutable? . j2d12) (delete-file . j2d11) (file-exists? . j2d10) (vector-sort! . j2d0f) (vector-sort . j2d0e) (list-sort . j2d0d) (symbol-hash . j2d0c) (string-ci-hash . j2d0b) (string-hash . j2d0a) (equal-hash . j2d09) (hashtable-equivalence-function . j2d08) (make-hashtable . j2d07) (hashtable-hash-function . j2d06) (make-eqv-hashtable . j2d05) (make-eq-hashtable . j2d04) (hashtable? . j2d03) (hashtable-update! . j2d02) (hashtable-size . j2d01) (hashtable-set! . j2d00) (hashtable-ref . j2cff) (hashtable-mutable? . j2cfe) (hashtable-keys . j2cfd) (hashtable-entries . j2cfc) (hashtable-delete! . j2cfb) (hashtable-copy . j2cfa) (hashtable-contains? . j2cf9) (hashtable-clear! . j2cf8) (call-with-output-file . j2cf7) (call-with-input-file . j2cf6) (write-char . j2cf5) (write . j2cf4) (with-output-to-file . j2cf3) (with-input-from-file . j2cf2) (read-char . j2cf1) (read . j2cf0) (peek-char . j2cef) (open-output-file . j2cee) (open-input-file . j2ced) (newline . j2cec) (display . j2ceb) (close-output-port . j2cea) (close-input-port . j2ce9) (eof-object? . j2ce8) (eof-object . j2ce7) (current-error-port . j2ce6) (current-output-port . j2ce5) (current-input-port . j2ce4) (output-port? . j2ce3) (input-port? . j2ce2) (utf-8-codec . j2ce1) (utf-16-codec . j2ce0) (transcoder-error-handling-mode . j2cdf) (transcoder-eol-style . j2cde) (transcoder-codec . j2cdd) (transcoded-port . j2cdc) (textual-port? . j2cdb) (string->bytevector . j2cda) (standard-output-port . j2cd9) (standard-input-port . j2cd8) (standard-error-port . j2cd7) (set-port-position! . j2cd6) (put-u8 . j2cd5) (put-string . j2cd4) (put-datum . j2cd3) (put-char . j2cd2) (put-bytevector . j2cd1) (port? . j2cd0) (port-transcoder . j2ccf) (port-position . j2cce) (port-has-set-port-position!? . j2ccd) (port-has-port-position? . j2ccc) (port-eof? . j2ccb) (output-port-buffer-mode . j2cca) (open-string-output-port . j2cc9) (open-string-input-port . j2cc8) (open-file-output-port . j2cc7) (open-file-input/output-port . j2cc6) (open-file-input-port . j2cc5) (open-bytevector-output-port . j2cc4) (open-bytevector-input-port . j2cc3) (native-transcoder . j2cc2) (native-eol-style . j2cc1) (make-transcoder . j2cc0) (latin-1-codec . j2cbf) (make-i/o-write-error . j2cbe) (make-i/o-read-error . j2cbd) (make-i/o-port-error . j2cbc) (make-i/o-invalid-position-error . j2cbb) (make-i/o-filename-error . j2cba) (make-i/o-file-protection-error . j2cb9) (make-i/o-file-is-read-only-error . j2cb8) (make-i/o-file-does-not-exist-error . j2cb7) (make-i/o-file-already-exists-error . j2cb6) (make-i/o-error . j2cb5) (make-i/o-encoding-error . j2cb4) (make-i/o-decoding-error . j2cb3) (make-custom-textual-output-port . j2cb2) (make-custom-textual-input/output-port . j2cb1) (make-custom-textual-input-port . j2cb0) (make-custom-binary-output-port . j2caf) (make-custom-binary-input/output-port . j2cae) (make-custom-binary-input-port . j2cad) (make-bytevector . j2cac) (lookahead-u8 . j2cab) (lookahead-char . j2caa) (i/o-write-error? . j2ca9) (i/o-read-error? . j2ca8) (i/o-port-error? . j2ca7) (i/o-invalid-position-error? . j2ca6) (i/o-filename-error? . j2ca5) (i/o-file-protection-error? . j2ca4) (i/o-file-is-read-only-error? . j2ca3) (i/o-file-does-not-exist-error? . j2ca2) (i/o-file-already-exists-error? . j2ca1) (i/o-error? . j2ca0) (i/o-error-position . j2c9f) (i/o-error-port . j2c9e) (i/o-error-filename . j2c9d) (i/o-encoding-error? . j2c9c) (i/o-encoding-error-char . j2c9b) (i/o-decoding-error? . j2c9a) (get-u8 . j2c99) (get-string-n! . j2c98) (get-string-n . j2c97) (get-string-all . j2c96) (get-line . j2c95) (get-datum . j2c94) (get-char . j2c93) (get-bytevector-some . j2c92) (get-bytevector-n! . j2c91) (get-bytevector-n . j2c90) (get-bytevector-all . j2c8f) (flush-output-port . j2c8e) (close-port . j2c8d) (exit . j2c85) (command-line . j2917) (remove . j2c80) (remv . j2c7f) (remp . j2c7e) (remq . j2c7d) (partition . j2c7c) (memv . j2c7b) (memq . j2c7a) (memp . j2c79) (member . j2c78) (exists . j2c77) (for-all . j2c76) (fold-right . j2c75) (fold-left . j2c74) (find . j2c73) (filter . j2c72) (cons* . j2c71) (assv . j2c70) (assq . j2c6f) (assp . j2c6e) (assoc . j2c6d) (call-with-string-output-port . j2c6c) (call-with-port . j2c6b) (call-with-bytevector-output-port . j2c6a) (bytevector->string . j2c69) (buffer-mode? . j2c68) (binary-port? . j2c67) (with-exception-handler . j2c66) (raise-continuable . j2c65) (raise . j2c64) (make-enumeration . j2c63) (enum-set=? . j2c62) (enum-set-universe . j2c61) (enum-set-union . j2c60) (enum-set-subset? . j2c5f) (enum-set-projection . j2c5e) (enum-set-member? . j2c5d) (enum-set-intersection . j2c5c) (enum-set-indexer . j2c5b) (enum-set-difference . j2c5a) (enum-set-constructor . j2c59) (enum-set-complement . j2c58) (enum-set->list . j2c57) (who-condition? . j2c56) (warning? . j2c55) (violation? . j2c54) (undefined-violation? . j2c53) (syntax-violation? . j2c52) (syntax-violation-subform . j2c51) (syntax-violation-form . j2c50) (syntax-violation . je5e) (simple-conditions . j2c4f) (serious-condition? . j2c4e) (non-continuable-violation? . j2c4d) (message-condition? . j2c4c) (make-who-condition . j2c4b) (make-warning . j2c4a) (make-violation . j2c49) (make-undefined-violation . j2c48) (make-syntax-violation . j2c47) (make-serious-condition . j2c46) (make-non-continuable-violation . j2c45) (make-message-condition . j2c44) (make-lexical-violation . j2c43) (make-irritants-condition . j2c42) (make-implementation-restriction-violation . j2c41) (make-error . j2c40) (make-assertion-violation . j2c3f) (lexical-violation? . j2c3e) (irritants-condition? . j2c3d) (implementation-restriction-violation? . j2c3c) (error? . j2c3b) (condition-who . j2c3a) (condition-predicate . j2c39) (condition-message . j2c38) (condition-irritants . j2c37) (condition-accessor . j2c36) (condition . j2c35) (assertion-violation? . j2c34) (condition? . j2c33) (utf32->string . j2c32) (utf16->string . j2c31) (utf8->string . j2c30) (uint-list->bytevector . j2c2f) (u8-list->bytevector . j2c2e) (string->utf8 . j2c2d) (string->utf32 . j2c2c) (string->utf16 . j2c2b) (sint-list->bytevector . j2c2a) (native-endianness . j2c29) (bytevector? . j2c28) (bytevector=? . j2c27) (bytevector-uint-set! . j2c26) (bytevector-uint-ref . j2c25) (bytevector-u8-set! . j2c24) (bytevector-u8-ref . j2c23) (bytevector-u64-set! . j2c22) (bytevector-u64-ref . j2c21) (bytevector-u64-native-set! . j2c20) (bytevector-u64-native-ref . j2c1f) (bytevector-u32-set! . j2c1e) (bytevector-u32-ref . j2c1d) (bytevector-u32-native-set! . j2c1c) (bytevector-u32-native-ref . j2c1b) (bytevector-u16-set! . j2c1a) (bytevector-u16-ref . j2c19) (bytevector-u16-native-set! . j2c18) (bytevector-u16-native-ref . j2c17) (bytevector-sint-set! . j2c16) (bytevector-sint-ref . j2c15) (bytevector-s8-set! . j2c14) (bytevector-s8-ref . j2c13) (bytevector-s64-set! . j2c12) (bytevector-s64-ref . j2c11) (bytevector-s64-native-set! . j2c10) (bytevector-s64-native-ref . j2c0f) (bytevector-s32-set! . j2c0e) (bytevector-s32-ref . j2c0d) (bytevector-s32-native-set! . j2c0c) (bytevector-s32-native-ref . j2c0b) (bytevector-s16-set! . j2c0a) (bytevector-s16-ref . j2c09) (bytevector-s16-native-set! . j2c08) (bytevector-s16-native-ref . j2c07) (bytevector-length . j2c06) (bytevector-ieee-single-ref . j2c05) (bytevector-ieee-single-set! . j2c04) (bytevector-ieee-single-native-set! . j2c03) (bytevector-ieee-single-native-ref . j2c02) (bytevector-ieee-double-set! . j2c01) (bytevector-ieee-double-ref . j2c00) (bytevector-ieee-double-native-set! . j2bff) (bytevector-ieee-double-native-ref . j2bfe) (bytevector-fill! . j2bfd) (bytevector-copy! . j2bfc) (bytevector-copy . j2bfb) (bytevector->uint-list . j2bfa) (bytevector->u8-list . j2bf9) (bytevector->sint-list . j2bf8) (no-nans-violation? . j2bf7) (no-infinities-violation? . j2bf6) (make-no-nans-violation . j2bf5) (make-no-infinities-violation . j2bf4) (real->flonum . j2bf3) (flzero? . j2bf2) (fltruncate . j2bf1) (fltan . j2bf0) (flsqrt . j2bef) (flsin . j2bee) (flround . j2bed) (flpositive? . j2bec) (flonum? . j2beb) (flodd? . j2bea) (flnumerator . j2be9) (flnegative? . j2be8) (flnan? . j2be7) (flmod0 . j2be6) (flmod . j2be5) (flmin . j2be4) (flmax . j2be3) (fllog . j2be2) (flinteger? . j2be1) (flinfinite? . j2be0) (flfloor . j2bdf) (flfinite? . j2bde) (flexpt . j2bdd) (flexp . j2bdc) (fleven? . j2bdb) (fldiv0-and-mod0 . j2bda) (fldiv0 . j2bd9) (fldiv-and-mod . j2bd8) (fldiv . j2bd7) (fldenominator . j2bd6) (flcos . j2bd5) (flceiling . j2bd4) (flatan . j2bd3) (flasin . j2bd2) (flacos . j2bd1) (flabs . j2bd0) (fl>? . j2bcf) (fl>=? . j2bce) (fl=? . j2bcd) (fl<? . j2bcc) (fl<=? . j2bcb) (fl/ . j2bca) (fl- . j2bc9) (fl+ . j2bc8) (fl* . j2bc7) (fixnum->flonum . j2bc6) (fxzero? . j2bc5) (fxxor . j2bc4) (fxrotate-bit-field . j2bc3) (fxreverse-bit-field . j2bc2) (fxpositive? . j2bc1) (fxodd? . j2bc0) (fxnot . j2bbf) (fxnegative? . j2bbe) (fxmod0 . j2bbd) (fxmod . j2bbc) (fxmin . j2bbb) (fxmax . j2bba) (fxlength . j2bb9) (fxior . j2bb8) (fxif . j2bb7) (fxfirst-bit-set . j2bb6) (fxeven? . j2bb5) (fxdiv0-and-mod0 . j2bb4) (fxdiv0 . j2bb3) (fxdiv-and-mod . j2bb2) (fxdiv . j2bb1) (fxcopy-bit-field . j2bb0) (fxcopy-bit . j2baf) (fxbit-set? . j2bae) (fxbit-field . j2bad) (fxbit-count . j2bac) (fxarithmetic-shift-right . j2bab) (fxarithmetic-shift-left . j2baa) (fxarithmetic-shift . j2ba9) (fxand . j2ba8) (fx>? . j2ba7) (fx>=? . j2ba6) (fx=? . j2ba5) (fx<? . j2ba4) (fx<=? . j2ba3) (fx-/carry . j2ba2) (fx- . j2ba1) (fx+/carry . j2ba0) (fx+ . j2b9f) (fx*/carry . j2b9e) (fx* . j2b9d) (greatest-fixnum . j2b9c) (least-fixnum . j2b9b) (fixnum-width . j2b9a) (fixnum? . j2b99) (bitwise-rotate-bit-field . j2b98) (bitwise-reverse-bit-field . j2b97) (bitwise-length . j2b96) (bitwise-if . j2b95) (bitwise-first-bit-set . j2b94) (bitwise-copy-bit-field . j2b93) (bitwise-copy-bit . j2b92) (bitwise-bit-set? . j2b91) (bitwise-bit-field . j2b90) (bitwise-bit-count . j2b8f) (bitwise-xor . j2b8e) (bitwise-ior . j2b8d) (bitwise-and . j2b8c) (bitwise-not . j2b8b) (bitwise-arithmetic-shift-right . j2b8a) (bitwise-arithmetic-shift-left . j2b89) (bitwise-arithmetic-shift . j2b88) (zero? . j2b87) (vector? . j2b86) (vector-set! . j2b85) (vector-ref . j2b84) (vector-map . j2b83) (vector-length . j2b82) (vector-for-each . j2b81) (vector-fill! . j2b80) (vector->list . j2b7f) (vector . j2b7e) (values . j2b7d) (truncate . j2b7c) (tan . j2b7b) (symbol? . j2b7a) (symbol=? . j2b79) (symbol->string . j2b78) (substring . j2b77) (string? . j2b76) (string>? . j2b75) (string>=? . j2b74) (string=? . j2b73) (string<? . j2b72) (string<=? . j2b71) (string-ref . j2b70) (string-length . j2b6f) (string-for-each . j2b6e) (string-copy . j2b6d) (string-append . j2b6c) (string->symbol . j2b6b) (string->number . j2b6a) (string->list . j2b69) (string . j2b68) (sqrt . j2b67) (sin . j2b66) (round . j2b65) (reverse . j2b64) (real? . j2b63) (real-valued? . j2b62) (real-part . j2b61) (rationalize . j2b60) (rational? . j2b5f) (rational-valued? . j2b5e) (procedure? . j2b5d) (positive? . j2b5c) (pair? . j2b5b) (odd? . j2b5a) (numerator . j2b59) (number? . j2b58) (number->string . j2b57) (null? . j2b56) (not . j2b55) (negative? . j2b54) (nan? . j2b53) (min . j2b52) (max . j2b51) (map . j2b50) (make-vector . j2b4f) (make-string . j2b4e) (make-rectangular . j2b4d) (make-polar . j2b4c) (magnitude . j2b4b) (log . j2b4a) (list? . j2b49) (list-tail . j2b48) (list-ref . j2b47) (list->vector . j2b46) (list->string . j2b45) (list . j2b44) (length . j2b43) (lcm . j2b42) (integer? . j2b41) (integer-valued? . j2b40) (integer->char . j2b3f) (infinite? . j2b3e) (inexact? . j2b3d) (inexact . j2b3c) (imag-part . j2b3b) (gcd . j2b3a) (for-each . j2b39) (floor . j2b38) (finite? . j2b37) (expt . j2b36) (exp . j2b35) (exact? . j2b34) (exact-integer-sqrt . j2b33) (exact . j2b32) (even? . j2b31) (error . j2b30) (eqv? . j2b2f) (equal? . j2b2e) (eq? . j2b2d) (dynamic-wind . j2b2c) (div0-and-mod0 . j2b2b) (mod0 . j2b2a) (div0 . j2b29) (div-and-mod . j2b28) (mod . j2b27) (div . j2b26) (denominator . j2b25) (cos . j2b24) (cons . j2b23) (complex? . j2b22) (char? . j2b21) (char>? . j2b20) (char>=? . j2b1f) (char=? . j2b1e) (char<? . j2b1d) (char<=? . j2b1c) (char->integer . j2b1b) (ceiling . j2b1a) (call-with-values . j2b19) (call/cc . j2b18) (call-with-current-continuation . j2b17) (cddddr . j2b16) (cdddar . j2b15) (cddadr . j2b14) (cddaar . j2b13) (cdaddr . j2b12) (cdadar . j2b11) (cdaadr . j2b10) (cdaaar . j2b0f) (cadddr . j2b0e) (caddar . j2b0d) (cadadr . j2b0c) (cadaar . j2b0b) (caaddr . j2b0a) (caadar . j2b09) (caaadr . j2b08) (caaaar . j2b07) (cdddr . j2b06) (cddar . j2b05) (cdadr . j2b04) (cdaar . j2b03) (caddr . j2b02) (cadar . j2b01) (caadr . j2b00) (caaar . j2aff) (cddr . j2afe) (cdar . j2afd) (cadr . j2afc) (caar . j2afb) (cdr . j2afa) (car . j2af9) (boolean? . j2af8) (boolean=? . j2af7) (atan . j2af6) (assertion-violation . j2af5) (asin . j2af4) (apply . j2af3) (append . j2af2) (angle . j2af1) (acos . j2af0) (abs . j2aef) (/ . j2aee) (* . j2aed) (- . j2aec) (+ . j2aeb) (>= . j2aea) (> . j2ae9) (= . j2ae8) (<= . j2ae7) (< . j2ae6) (&no-nans . j2ae4) (&no-infinities . j2ae3) (&i/o-encoding . j2ae2) (&i/o-decoding . j2ae1) (&i/o-port . j2ae0) (&i/o-file-does-not-exist . j2adf) (&i/o-file-already-exists . j2ade) (&i/o-file-is-read-only . j2add) (&i/o-file-protection . j2adc) (&i/o-filename . j2adb) (&i/o-invalid-position . j2ada) (&i/o-write . j2ad9) (&i/o-read . j2ad8) (&i/o . j2ad7) (&undefined . j2ad6) (&syntax . j2ad5) (&lexical . j2ad4) (&implementation-restriction . j2ad3) (&non-continuable . j2ad2) (&who . j2ad1) (&irritants . j2ad0) (&assertion . j2acf) (&violation . j2ace) (&error . j2acd) (&serious . j2acc) (&warning . j2acb) (&message . j2aca) (&condition . j2ac9) (define-condition-type . j2ac8) (define-enumeration . j2ac7) (define-record-type . j2ac6) (parent-rtd . j2ac5) (nongenerative . j2ac4) (opaque . j2ac3) (sealed . j2ac2) (protocol . j2ac1) (parent . j2ac0) (immutable . j2abf) (mutable . j2abe) (fields . j2abd) (error-handling-mode . j2abc) (file-options . j2abb) (buffer-mode . j2aba) (eol-style . j2ab9) (guard . j2ab8) (unsyntax-splicing . j2ab5) (unsyntax . j2ab4) (unquote-splicing . j2ab3) (unquote . j2ab2) (_ . j2ab1) (else . j2ab0) (=> . j2aaf) (... . j2aae) (assert . j2aad) (endianness . j2aac) (do . j2aa9) (cond . j2aa8) (let* . j2aa7) (let*-values . j2aa6) (let-values . j2aa5) (identifier-syntax . j2aa4) (with-syntax . j2aa3) (quasisyntax . j2aa2) (quasiquote . j2aa1) (syntax-rules . j2aa0) (record-constructor-descriptor . j2a9d) (record-type-descriptor . j2a9c) (case . j2a9b) (unless . j2a99) (when . j2a98) (or . j2a97) (and . j2a96) (if . j2a95) (let . j2a94) (letrec* . j2a93) (letrec . j2a92) (case-lambda . j2a90) (lambda . j2a8f) (syntax . j2a8e) (syntax-case . j2a8d) (quote . j2a8c) (letrec-syntax . j2a8a) (let-syntax . j2a89) (set! . j2a88) (begin . j2a86) (define-syntax . j2a84) (define . j2a83)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e30 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . je3a) (quotient . j2c8c) (null-environment . je38) (remainder . j2c8b) (modulo . j2c8a) (inexact->exact . j2c89) (force . j2c88) (exact->inexact . j2c87) (make-promise . j2c86) (delay . j2aab)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e31 '(rnrs control) '(6) '() '() '() '((do . j2aa9) (unless . j2a99) (when . j2a98) (case-lambda . j2a90)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e32 '(rnrs eval) '(6) '() '() '() '((eval . je3e) (environment . je36)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e33 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . j2c82) (set-car! . j2c81)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e34 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . j2c84) (string-set! . j2c83)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e35 '(rnrs programs) '(6) '() '() '() '((exit . j2c85) (command-line . j2917)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e36 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . jba9) (identifier? . je60) (generate-temporaries . je4c) (free-identifier=? . je4e) (syntax->datum . je64) (datum->syntax . je62) (bound-identifier=? . je50) (syntax-violation . je5e) (unsyntax-splicing . j2ab5) (unsyntax . j2ab4) (_ . j2ab1) (... . j2aae) (with-syntax . j2aa3) (quasisyntax . j2aa2) (syntax . j2a8e) (syntax-case . j2a8d)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e37 '(rnrs files) '(6) '() '() '() '((delete-file . j2d11) (file-exists? . j2d10) (make-i/o-write-error . j2cbe) (make-i/o-read-error . j2cbd) (make-i/o-port-error . j2cbc) (make-i/o-invalid-position-error . j2cbb) (make-i/o-filename-error . j2cba) (make-i/o-file-protection-error . j2cb9) (make-i/o-file-is-read-only-error . j2cb8) (make-i/o-file-does-not-exist-error . j2cb7) (make-i/o-file-already-exists-error . j2cb6) (make-i/o-error . j2cb5) (i/o-write-error? . j2ca9) (i/o-read-error? . j2ca8) (i/o-port-error? . j2ca7) (i/o-invalid-position-error? . j2ca6) (i/o-filename-error? . j2ca5) (i/o-file-protection-error? . j2ca4) (i/o-file-is-read-only-error? . j2ca3) (i/o-file-does-not-exist-error? . j2ca2) (i/o-file-already-exists-error? . j2ca1) (i/o-error? . j2ca0) (i/o-error-position . j2c9f) (i/o-error-port . j2c9e) (i/o-error-filename . j2c9d) (&i/o-port . j2ae0) (&i/o-file-does-not-exist . j2adf) (&i/o-file-already-exists . j2ade) (&i/o-file-is-read-only . j2add) (&i/o-file-protection . j2adc) (&i/o-filename . j2adb) (&i/o-invalid-position . j2ada) (&i/o-write . j2ad9) (&i/o-read . j2ad8) (&i/o . j2ad7)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e38 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . j2d0f) (vector-sort . j2d0e) (list-sort . j2d0d)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e39 '(rnrs base) '(6) '() '() '() '((zero? . j2b87) (vector? . j2b86) (vector-set! . j2b85) (vector-ref . j2b84) (vector-map . j2b83) (vector-length . j2b82) (vector-for-each . j2b81) (vector-fill! . j2b80) (vector->list . j2b7f) (vector . j2b7e) (values . j2b7d) (truncate . j2b7c) (tan . j2b7b) (symbol? . j2b7a) (symbol=? . j2b79) (symbol->string . j2b78) (substring . j2b77) (string? . j2b76) (string>? . j2b75) (string>=? . j2b74) (string=? . j2b73) (string<? . j2b72) (string<=? . j2b71) (string-ref . j2b70) (string-length . j2b6f) (string-for-each . j2b6e) (string-copy . j2b6d) (string-append . j2b6c) (string->symbol . j2b6b) (string->number . j2b6a) (string->list . j2b69) (string . j2b68) (sqrt . j2b67) (sin . j2b66) (round . j2b65) (reverse . j2b64) (real? . j2b63) (real-valued? . j2b62) (real-part . j2b61) (rationalize . j2b60) (rational? . j2b5f) (rational-valued? . j2b5e) (procedure? . j2b5d) (positive? . j2b5c) (pair? . j2b5b) (odd? . j2b5a) (numerator . j2b59) (number? . j2b58) (number->string . j2b57) (null? . j2b56) (not . j2b55) (negative? . j2b54) (nan? . j2b53) (min . j2b52) (max . j2b51) (map . j2b50) (make-vector . j2b4f) (make-string . j2b4e) (make-rectangular . j2b4d) (make-polar . j2b4c) (magnitude . j2b4b) (log . j2b4a) (list? . j2b49) (list-tail . j2b48) (list-ref . j2b47) (list->vector . j2b46) (list->string . j2b45) (list . j2b44) (length . j2b43) (lcm . j2b42) (integer? . j2b41) (integer-valued? . j2b40) (integer->char . j2b3f) (infinite? . j2b3e) (inexact? . j2b3d) (inexact . j2b3c) (imag-part . j2b3b) (gcd . j2b3a) (for-each . j2b39) (floor . j2b38) (finite? . j2b37) (expt . j2b36) (exp . j2b35) (exact? . j2b34) (exact-integer-sqrt . j2b33) (exact . j2b32) (even? . j2b31) (error . j2b30) (eqv? . j2b2f) (equal? . j2b2e) (eq? . j2b2d) (dynamic-wind . j2b2c) (div0-and-mod0 . j2b2b) (mod0 . j2b2a) (div0 . j2b29) (div-and-mod . j2b28) (mod . j2b27) (div . j2b26) (denominator . j2b25) (cos . j2b24) (cons . j2b23) (complex? . j2b22) (char? . j2b21) (char>? . j2b20) (char>=? . j2b1f) (char=? . j2b1e) (char<? . j2b1d) (char<=? . j2b1c) (char->integer . j2b1b) (ceiling . j2b1a) (call-with-values . j2b19) (call/cc . j2b18) (call-with-current-continuation . j2b17) (cddddr . j2b16) (cdddar . j2b15) (cddadr . j2b14) (cddaar . j2b13) (cdaddr . j2b12) (cdadar . j2b11) (cdaadr . j2b10) (cdaaar . j2b0f) (cadddr . j2b0e) (caddar . j2b0d) (cadadr . j2b0c) (cadaar . j2b0b) (caaddr . j2b0a) (caadar . j2b09) (caaadr . j2b08) (caaaar . j2b07) (cdddr . j2b06) (cddar . j2b05) (cdadr . j2b04) (cdaar . j2b03) (caddr . j2b02) (cadar . j2b01) (caadr . j2b00) (caaar . j2aff) (cddr . j2afe) (cdar . j2afd) (cadr . j2afc) (caar . j2afb) (cdr . j2afa) (car . j2af9) (boolean? . j2af8) (boolean=? . j2af7) (atan . j2af6) (assertion-violation . j2af5) (asin . j2af4) (apply . j2af3) (append . j2af2) (angle . j2af1) (acos . j2af0) (abs . j2aef) (/ . j2aee) (* . j2aed) (- . j2aec) (+ . j2aeb) (>= . j2aea) (> . j2ae9) (= . j2ae8) (<= . j2ae7) (< . j2ae6) (unquote-splicing . j2ab3) (unquote . j2ab2) (_ . j2ab1) (else . j2ab0) (=> . j2aaf) (... . j2aae) (assert . j2aad) (cond . j2aa8) (let* . j2aa7) (let*-values . j2aa6) (let-values . j2aa5) (identifier-syntax . j2aa4) (quasiquote . j2aa1) (syntax-rules . j2aa0) (case . j2a9b) (or . j2a97) (and . j2a96) (if . j2a95) (let . j2a94) (letrec* . j2a93) (letrec . j2a92) (lambda . j2a8f) (quote . j2a8c) (letrec-syntax . j2a8a) (let-syntax . j2a89) (set! . j2a88) (begin . j2a86) (define-syntax . j2a84) (define . j2a83)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e3a '(rnrs lists) '(6) '() '() '() '((remove . j2c80) (remv . j2c7f) (remp . j2c7e) (remq . j2c7d) (partition . j2c7c) (memv . j2c7b) (memq . j2c7a) (memp . j2c79) (member . j2c78) (exists . j2c77) (for-all . j2c76) (fold-right . j2c75) (fold-left . j2c74) (find . j2c73) (filter . j2c72) (cons* . j2c71) (assv . j2c70) (assq . j2c6f) (assp . j2c6e) (assoc . j2c6d)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e3b '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . j2cf7) (call-with-input-file . j2cf6) (write-char . j2cf5) (write . j2cf4) (with-output-to-file . j2cf3) (with-input-from-file . j2cf2) (read-char . j2cf1) (read . j2cf0) (peek-char . j2cef) (open-output-file . j2cee) (open-input-file . j2ced) (newline . j2cec) (display . j2ceb) (close-output-port . j2cea) (close-input-port . j2ce9) (eof-object? . j2ce8) (eof-object . j2ce7) (current-error-port . j2ce6) (current-output-port . j2ce5) (current-input-port . j2ce4) (output-port? . j2ce3) (input-port? . j2ce2) (make-i/o-write-error . j2cbe) (make-i/o-read-error . j2cbd) (make-i/o-port-error . j2cbc) (make-i/o-invalid-position-error . j2cbb) (make-i/o-filename-error . j2cba) (make-i/o-file-protection-error . j2cb9) (make-i/o-file-is-read-only-error . j2cb8) (make-i/o-file-does-not-exist-error . j2cb7) (make-i/o-file-already-exists-error . j2cb6) (make-i/o-error . j2cb5) (i/o-write-error? . j2ca9) (i/o-read-error? . j2ca8) (i/o-port-error? . j2ca7) (i/o-invalid-position-error? . j2ca6) (i/o-filename-error? . j2ca5) (i/o-file-protection-error? . j2ca4) (i/o-file-is-read-only-error? . j2ca3) (i/o-file-does-not-exist-error? . j2ca2) (i/o-file-already-exists-error? . j2ca1) (i/o-error? . j2ca0) (i/o-error-position . j2c9f) (i/o-error-port . j2c9e) (i/o-error-filename . j2c9d) (&i/o-port . j2ae0) (&i/o-file-does-not-exist . j2adf) (&i/o-file-already-exists . j2ade) (&i/o-file-is-read-only . j2add) (&i/o-file-protection . j2adc) (&i/o-filename . j2adb) (&i/o-invalid-position . j2ada) (&i/o-write . j2ad9) (&i/o-read . j2ad8) (&i/o . j2ad7)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e3c '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . j2cac) (utf32->string . j2c32) (utf16->string . j2c31) (utf8->string . j2c30) (uint-list->bytevector . j2c2f) (u8-list->bytevector . j2c2e) (string->utf8 . j2c2d) (string->utf32 . j2c2c) (string->utf16 . j2c2b) (sint-list->bytevector . j2c2a) (native-endianness . j2c29) (bytevector? . j2c28) (bytevector=? . j2c27) (bytevector-uint-set! . j2c26) (bytevector-uint-ref . j2c25) (bytevector-u8-set! . j2c24) (bytevector-u8-ref . j2c23) (bytevector-u64-set! . j2c22) (bytevector-u64-ref . j2c21) (bytevector-u64-native-set! . j2c20) (bytevector-u64-native-ref . j2c1f) (bytevector-u32-set! . j2c1e) (bytevector-u32-ref . j2c1d) (bytevector-u32-native-set! . j2c1c) (bytevector-u32-native-ref . j2c1b) (bytevector-u16-set! . j2c1a) (bytevector-u16-ref . j2c19) (bytevector-u16-native-set! . j2c18) (bytevector-u16-native-ref . j2c17) (bytevector-sint-set! . j2c16) (bytevector-sint-ref . j2c15) (bytevector-s8-set! . j2c14) (bytevector-s8-ref . j2c13) (bytevector-s64-set! . j2c12) (bytevector-s64-ref . j2c11) (bytevector-s64-native-set! . j2c10) (bytevector-s64-native-ref . j2c0f) (bytevector-s32-set! . j2c0e) (bytevector-s32-ref . j2c0d) (bytevector-s32-native-set! . j2c0c) (bytevector-s32-native-ref . j2c0b) (bytevector-s16-set! . j2c0a) (bytevector-s16-ref . j2c09) (bytevector-s16-native-set! . j2c08) (bytevector-s16-native-ref . j2c07) (bytevector-length . j2c06) (bytevector-ieee-single-ref . j2c05) (bytevector-ieee-single-set! . j2c04) (bytevector-ieee-single-native-set! . j2c03) (bytevector-ieee-single-native-ref . j2c02) (bytevector-ieee-double-set! . j2c01) (bytevector-ieee-double-ref . j2c00) (bytevector-ieee-double-native-set! . j2bff) (bytevector-ieee-double-native-ref . j2bfe) (bytevector-fill! . j2bfd) (bytevector-copy! . j2bfc) (bytevector-copy . j2bfb) (bytevector->uint-list . j2bfa) (bytevector->u8-list . j2bf9) (bytevector->sint-list . j2bf8) (endianness . j2aac)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e3d '(rnrs unicode) '(6) '() '() '() '((string-upcase . j2d3f) (string-titlecase . j2d3e) (string-normalize-nfkd . j2d3d) (string-normalize-nfkc . j2d3c) (string-normalize-nfd . j2d3b) (string-normalize-nfc . j2d3a) (string-foldcase . j2d39) (string-downcase . j2d38) (string-ci>? . j2d37) (string-ci>=? . j2d36) (string-ci=? . j2d35) (string-ci<? . j2d34) (string-ci<=? . j2d33) (char-whitespace? . j2d32) (char-upper-case? . j2d31) (char-title-case? . j2d30) (char-numeric? . j2d2f) (char-lower-case? . j2d2e) (char-general-category . j2d2d) (char-upcase . j2d2c) (char-titlecase . j2d2b) (char-foldcase . j2d2a) (char-downcase . j2d29) (char-ci>? . j2d28) (char-ci>=? . j2d27) (char-ci=? . j2d26) (char-ci<? . j2d25) (char-ci<=? . j2d24) (char-alphabetic? . j2d23)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e3e '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . j2c66) (raise-continuable . j2c65) (raise . j2c64) (guard . j2ab8) (else . j2ab0) (=> . j2aaf)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e3f '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . j2b98) (bitwise-reverse-bit-field . j2b97) (bitwise-length . j2b96) (bitwise-if . j2b95) (bitwise-first-bit-set . j2b94) (bitwise-copy-bit-field . j2b93) (bitwise-copy-bit . j2b92) (bitwise-bit-set? . j2b91) (bitwise-bit-field . j2b90) (bitwise-bit-count . j2b8f) (bitwise-xor . j2b8e) (bitwise-ior . j2b8d) (bitwise-and . j2b8c) (bitwise-not . j2b8b) (bitwise-arithmetic-shift-right . j2b8a) (bitwise-arithmetic-shift-left . j2b89) (bitwise-arithmetic-shift . j2b88)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e40 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . j2bc5) (fxxor . j2bc4) (fxrotate-bit-field . j2bc3) (fxreverse-bit-field . j2bc2) (fxpositive? . j2bc1) (fxodd? . j2bc0) (fxnot . j2bbf) (fxnegative? . j2bbe) (fxmod0 . j2bbd) (fxmod . j2bbc) (fxmin . j2bbb) (fxmax . j2bba) (fxlength . j2bb9) (fxior . j2bb8) (fxif . j2bb7) (fxfirst-bit-set . j2bb6) (fxeven? . j2bb5) (fxdiv0-and-mod0 . j2bb4) (fxdiv0 . j2bb3) (fxdiv-and-mod . j2bb2) (fxdiv . j2bb1) (fxcopy-bit-field . j2bb0) (fxcopy-bit . j2baf) (fxbit-set? . j2bae) (fxbit-field . j2bad) (fxbit-count . j2bac) (fxarithmetic-shift-right . j2bab) (fxarithmetic-shift-left . j2baa) (fxarithmetic-shift . j2ba9) (fxand . j2ba8) (fx>? . j2ba7) (fx>=? . j2ba6) (fx=? . j2ba5) (fx<? . j2ba4) (fx<=? . j2ba3) (fx-/carry . j2ba2) (fx- . j2ba1) (fx+/carry . j2ba0) (fx+ . j2b9f) (fx*/carry . j2b9e) (fx* . j2b9d) (greatest-fixnum . j2b9c) (least-fixnum . j2b9b) (fixnum-width . j2b9a) (fixnum? . j2b99)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e41 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . j2bf7) (no-infinities-violation? . j2bf6) (make-no-nans-violation . j2bf5) (make-no-infinities-violation . j2bf4) (real->flonum . j2bf3) (flzero? . j2bf2) (fltruncate . j2bf1) (fltan . j2bf0) (flsqrt . j2bef) (flsin . j2bee) (flround . j2bed) (flpositive? . j2bec) (flonum? . j2beb) (flodd? . j2bea) (flnumerator . j2be9) (flnegative? . j2be8) (flnan? . j2be7) (flmod0 . j2be6) (flmod . j2be5) (flmin . j2be4) (flmax . j2be3) (fllog . j2be2) (flinteger? . j2be1) (flinfinite? . j2be0) (flfloor . j2bdf) (flfinite? . j2bde) (flexpt . j2bdd) (flexp . j2bdc) (fleven? . j2bdb) (fldiv0-and-mod0 . j2bda) (fldiv0 . j2bd9) (fldiv-and-mod . j2bd8) (fldiv . j2bd7) (fldenominator . j2bd6) (flcos . j2bd5) (flceiling . j2bd4) (flatan . j2bd3) (flasin . j2bd2) (flacos . j2bd1) (flabs . j2bd0) (fl>? . j2bcf) (fl>=? . j2bce) (fl=? . j2bcd) (fl<? . j2bcc) (fl<=? . j2bcb) (fl/ . j2bca) (fl- . j2bc9) (fl+ . j2bc8) (fl* . j2bc7) (fixnum->flonum . j2bc6) (&no-nans . j2ae4) (&no-infinities . j2ae3)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e42 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . j2d0c) (string-ci-hash . j2d0b) (string-hash . j2d0a) (equal-hash . j2d09) (hashtable-equivalence-function . j2d08) (make-hashtable . j2d07) (hashtable-hash-function . j2d06) (make-eqv-hashtable . j2d05) (make-eq-hashtable . j2d04) (hashtable? . j2d03) (hashtable-update! . j2d02) (hashtable-size . j2d01) (hashtable-set! . j2d00) (hashtable-ref . j2cff) (hashtable-mutable? . j2cfe) (hashtable-keys . j2cfd) (hashtable-entries . j2cfc) (hashtable-delete! . j2cfb) (hashtable-copy . j2cfa) (hashtable-contains? . j2cf9) (hashtable-clear! . j2cf8)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e43 '(rnrs io ports) '(6) '() '() '() '((eof-object? . j2ce8) (eof-object . j2ce7) (current-error-port . j2ce6) (current-output-port . j2ce5) (current-input-port . j2ce4) (output-port? . j2ce3) (input-port? . j2ce2) (utf-8-codec . j2ce1) (utf-16-codec . j2ce0) (transcoder-error-handling-mode . j2cdf) (transcoder-eol-style . j2cde) (transcoder-codec . j2cdd) (transcoded-port . j2cdc) (textual-port? . j2cdb) (string->bytevector . j2cda) (standard-output-port . j2cd9) (standard-input-port . j2cd8) (standard-error-port . j2cd7) (set-port-position! . j2cd6) (put-u8 . j2cd5) (put-string . j2cd4) (put-datum . j2cd3) (put-char . j2cd2) (put-bytevector . j2cd1) (port? . j2cd0) (port-transcoder . j2ccf) (port-position . j2cce) (port-has-set-port-position!? . j2ccd) (port-has-port-position? . j2ccc) (port-eof? . j2ccb) (output-port-buffer-mode . j2cca) (open-string-output-port . j2cc9) (open-string-input-port . j2cc8) (open-file-output-port . j2cc7) (open-file-input/output-port . j2cc6) (open-file-input-port . j2cc5) (open-bytevector-output-port . j2cc4) (open-bytevector-input-port . j2cc3) (native-transcoder . j2cc2) (native-eol-style . j2cc1) (make-transcoder . j2cc0) (latin-1-codec . j2cbf) (make-i/o-write-error . j2cbe) (make-i/o-read-error . j2cbd) (make-i/o-port-error . j2cbc) (make-i/o-invalid-position-error . j2cbb) (make-i/o-filename-error . j2cba) (make-i/o-file-protection-error . j2cb9) (make-i/o-file-is-read-only-error . j2cb8) (make-i/o-file-does-not-exist-error . j2cb7) (make-i/o-file-already-exists-error . j2cb6) (make-i/o-error . j2cb5) (make-i/o-encoding-error . j2cb4) (make-i/o-decoding-error . j2cb3) (make-custom-textual-output-port . j2cb2) (make-custom-textual-input/output-port . j2cb1) (make-custom-textual-input-port . j2cb0) (make-custom-binary-output-port . j2caf) (make-custom-binary-input/output-port . j2cae) (make-custom-binary-input-port . j2cad) (lookahead-u8 . j2cab) (lookahead-char . j2caa) (i/o-write-error? . j2ca9) (i/o-read-error? . j2ca8) (i/o-port-error? . j2ca7) (i/o-invalid-position-error? . j2ca6) (i/o-filename-error? . j2ca5) (i/o-file-protection-error? . j2ca4) (i/o-file-is-read-only-error? . j2ca3) (i/o-file-does-not-exist-error? . j2ca2) (i/o-file-already-exists-error? . j2ca1) (i/o-error? . j2ca0) (i/o-error-position . j2c9f) (i/o-error-port . j2c9e) (i/o-error-filename . j2c9d) (i/o-encoding-error? . j2c9c) (i/o-encoding-error-char . j2c9b) (i/o-decoding-error? . j2c9a) (get-u8 . j2c99) (get-string-n! . j2c98) (get-string-n . j2c97) (get-string-all . j2c96) (get-line . j2c95) (get-datum . j2c94) (get-char . j2c93) (get-bytevector-some . j2c92) (get-bytevector-n! . j2c91) (get-bytevector-n . j2c90) (get-bytevector-all . j2c8f) (flush-output-port . j2c8e) (close-port . j2c8d) (call-with-string-output-port . j2c6c) (call-with-port . j2c6b) (call-with-bytevector-output-port . j2c6a) (bytevector->string . j2c69) (buffer-mode? . j2c68) (binary-port? . j2c67) (&i/o-encoding . j2ae2) (&i/o-decoding . j2ae1) (&i/o-port . j2ae0) (&i/o-file-does-not-exist . j2adf) (&i/o-file-already-exists . j2ade) (&i/o-file-is-read-only . j2add) (&i/o-file-protection . j2adc) (&i/o-filename . j2adb) (&i/o-invalid-position . j2ada) (&i/o-write . j2ad9) (&i/o-read . j2ad8) (&i/o . j2ad7) (error-handling-mode . j2abc) (file-options . j2abb) (buffer-mode . j2aba) (eol-style . j2ab9)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e44 '(rnrs enums) '(6) '() '() '() '((make-enumeration . j2c63) (enum-set=? . j2c62) (enum-set-universe . j2c61) (enum-set-union . j2c60) (enum-set-subset? . j2c5f) (enum-set-projection . j2c5e) (enum-set-member? . j2c5d) (enum-set-intersection . j2c5c) (enum-set-indexer . j2c5b) (enum-set-difference . j2c5a) (enum-set-constructor . j2c59) (enum-set-complement . j2c58) (enum-set->list . j2c57) (define-enumeration . j2ac7)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e45 '(rnrs conditions) '(6) '() '() '() '((who-condition? . j2c56) (warning? . j2c55) (violation? . j2c54) (undefined-violation? . j2c53) (syntax-violation? . j2c52) (syntax-violation-subform . j2c51) (syntax-violation-form . j2c50) (syntax-violation . je5e) (simple-conditions . j2c4f) (serious-condition? . j2c4e) (non-continuable-violation? . j2c4d) (message-condition? . j2c4c) (make-who-condition . j2c4b) (make-warning . j2c4a) (make-violation . j2c49) (make-undefined-violation . j2c48) (make-syntax-violation . j2c47) (make-serious-condition . j2c46) (make-non-continuable-violation . j2c45) (make-message-condition . j2c44) (make-lexical-violation . j2c43) (make-irritants-condition . j2c42) (make-implementation-restriction-violation . j2c41) (make-error . j2c40) (make-assertion-violation . j2c3f) (lexical-violation? . j2c3e) (irritants-condition? . j2c3d) (implementation-restriction-violation? . j2c3c) (error? . j2c3b) (condition-who . j2c3a) (condition-predicate . j2c39) (condition-message . j2c38) (condition-irritants . j2c37) (condition-accessor . j2c36) (condition . j2c35) (assertion-violation? . j2c34) (condition? . j2c33) (&undefined . j2ad6) (&syntax . j2ad5) (&lexical . j2ad4) (&implementation-restriction . j2ad3) (&non-continuable . j2ad2) (&who . j2ad1) (&irritants . j2ad0) (&assertion . j2acf) (&violation . j2ace) (&error . j2acd) (&serious . j2acc) (&warning . j2acb) (&message . j2aca) (&condition . j2ac9) (define-condition-type . j2ac8)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e46 '(rnrs records inspection) '(6) '() '() '() '((record? . j2d1b) (record-type-uid . j2d1a) (record-type-sealed? . j2d19) (record-type-parent . j2d18) (record-type-opaque? . j2d17) (record-type-name . j2d16) (record-type-generative? . j2d15) (record-type-field-names . j2d14) (record-rtd . j2d13) (record-field-mutable? . j2d12)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e47 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . j2d22) (record-predicate . j2d21) (record-mutator . j2d20) (record-constructor . j2d1f) (record-accessor . j2d1e) (make-record-type-descriptor . j2d1d) (make-record-constructor-descriptor . j2d1c)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e48 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . j2ac6) (parent-rtd . j2ac5) (nongenerative . j2ac4) (opaque . j2ac3) (sealed . j2ac2) (protocol . j2ac1) (parent . j2ac0) (immutable . j2abf) (mutable . j2abe) (fields . j2abd) (record-constructor-descriptor . j2a9d) (record-type-descriptor . j2a9c)) '() values values '#f '#f '#t '#f) (j992@j7de@install-library 'j2e49 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . j2e29) (&no-nans-rtd . j2e28) (&no-infinities-rcd . j2e27) (&no-infinities-rtd . j2e26) (&i/o-encoding-rcd . j2e25) (&i/o-encoding-rtd . j2e24) (&i/o-decoding-rcd . j2e23) (&i/o-decoding-rtd . j2e22) (&i/o-port-rcd . j2e21) (&i/o-port-rtd . j2e20) (&i/o-file-does-not-exist-rcd . j2e1f) (&i/o-file-does-not-exist-rtd . j2e1e) (&i/o-file-already-exists-rcd . j2e1d) (&i/o-file-already-exists-rtd . j2e1c) (&i/o-file-is-read-only-rcd . j2e1b) (&i/o-file-is-read-only-rtd . j2e1a) (&i/o-file-protection-rcd . j2e19) (&i/o-file-protection-rtd . j2e18) (&i/o-filename-rcd . j2e17) (&i/o-filename-rtd . j2e16) (&i/o-invalid-position-rcd . j2e15) (&i/o-invalid-position-rtd . j2e14) (&i/o-write-rcd . j2e13) (&i/o-write-rtd . j2e12) (&i/o-read-rcd . j2e11) (&i/o-read-rtd . j2e10) (&i/o-rcd . j2e0f) (&i/o-rtd . j2e0e) (&undefined-rcd . j2e0d) (&undefined-rtd . j2e0c) (&syntax-rcd . j2e0b) (&syntax-rtd . j2e0a) (&lexical-rcd . j2e09) (&lexical-rtd . j2e08) (&implementation-restriction-rcd . j2e07) (&implementation-restriction-rtd . j2e06) (&non-continuable-rcd . j2e05) (&non-continuable-rtd . j2e04) (&who-rcd . j2e03) (&who-rtd . j2e02) (&irritants-rcd . j2e01) (&irritants-rtd . j2e00) (&assertion-rcd . j2dff) (&assertion-rtd . j2dfe) (&violation-rcd . j2dfd) (&violation-rtd . j2dfc) (&error-rcd . j2dfb) (&error-rtd . j2dfa) (&serious-rcd . j2df9) (&serious-rtd . j2df8) (&warning-rcd . j2df7) (&warning-rtd . j2df6) (&message-rcd . j2df5) (&message-rtd . j2df4) (&condition-rcd . j2df3) (&condition-rtd . j2df2) (syntax-error . je5a) (syntax-dispatch . jd7e) (pretty-print . j2df1) (eval-core . j2df0) (set-symbol-value! . j2def) (symbol-value . j2dee) (gensym . j2ded) (void . j2dec) (load . j291d) (interaction-environment . je6c) (char-ready? . j2deb) (regexp? . j2dea) (read-line . j2de9) (gensym-prefix-set! . j2de8) (ungensym . j2de7) (alist->eq-hash-table . j2de6) (assoc-ref . j2de5) (print . j2de4) (format . j2de3) (host-os . j2de2) (library-path . j7bd) (standard-library-path . j2de1) (ssl-supported? . j2de0) (ssl-socket? . j2ddf) (socket-sslize! . j2dde) (%monapi-name-whereis . j2ddd) (%monapi-message-send . j2ddc) (file-newer? . j2ddb) (stat-mtime . j2dda) (write-to-file . j2dd9) (file->list . j2dd8) (file->string . j2dd7) (digit->integer . j2dd6) (call-with-string-input-port . j2dd5) (call-with-string-io . j2dd4) (string-split . j2dd3) (bytevector-for-each . j2dd2) (string->regexp . j2dd1) (rxmatch . j2dd0) (regexp-replace-all . j2dcf) (hashtable-fold-left . j2dce) (hashtable-for-each . j2dcd) (mosh-cache-dir . j5a7) (call-process . j2dcc) (local-tz-offset . j2dcb) (microseconds . j2dca) (directory-list . j2dc9) (set-current-directory! . j2dc8) (expand-path . j2dc7) (current-directory . j2dc6) (%spawn . j2dc5) (%waitpid . j2dc4) (simple-struct-name . j2dc3) (simple-struct-set! . j2dc2) (simple-struct-ref . j2dc1) (make-simple-struct . j2dc0) (simple-struct? . j2dbf) (pointer-ref-c-int64 . j2dbe) (pointer-ref-c-int32 . j2dbd) (pointer-ref-c-int16 . j2dbc) (pointer-ref-c-int8 . j2dbb) (pointer-ref-c-uint64 . j2dba) (pointer-ref-c-uint32 . j2db9) (pointer-ref-c-uint16 . j2db8) (pointer-ref-c-uint8 . j2db7) (pointer-set-c-uint64! . j2db6) (pointer-set-c-uint32! . j2db5) (pointer-set-c-uint16! . j2db4) (pointer-set-c-uint8! . j2db3) (pointer-set-c-int64! . j2db2) (pointer-set-c-int32! . j2db1) (pointer-set-c-int16! . j2db0) (pointer-set-c-int8! . j2daf) (pointer-set-c-pointer! . j2dae) (pointer-set-c-double! . j2dad) (pointer-set-c-float! . j2dac) (pointer-set-c-long-long! . j2dab) (pointer-set-c-long! . j2daa) (pointer-set-c-int! . j2da9) (pointer-set-c-short! . j2da8) (pointer-set-c-char! . j2da7) (pointer-ref-c-pointer . j2da6) (pointer-ref-c-double . j2da5) (pointer-ref-c-float . j2da4) (pointer-ref-c-unsigned-long-long . j2da3) (pointer-ref-c-signed-long-long . j2da2) (pointer-ref-c-unsigned-long . j2da1) (pointer-ref-c-signed-long . j2da0) (pointer-ref-c-unsigned-int . j2d9f) (pointer-ref-c-signed-int . j2d9e) (pointer-ref-c-unsigned-short . j2d9d) (pointer-ref-c-signed-short . j2d9c) (pointer-ref-c-unsigned-char . j2d9b) (pointer-ref-c-signed-char . j2d9a) (pointer->integer . j2d99) (integer->pointer . j2d98) (pointer? . j2d97) (shared-errno . j2d96) (%ffi-free-c-callback-trampoline . j2d95) (%ffi-make-c-callback-trampoline . j2d94) (%ffi-free . j2d93) (%ffi-malloc . j2d92) (%ffi-supported? . j2d91) (%ffi-pointer->string . j2d90) (%ffi-call . j2d8f) (%ffi-lookup . j2d8e) (%ffi-open . j2d8d) (null-terminated-utf8->string . j2d8c) (null-terminated-bytevector->string . j2d8b) (%exec . j2d8a) (%fork . j2d89) (%pipe . j2d88) (p . j2d87) (open-output-string . j2d86) (get-output-string . j2d85) (file-stat-ctime . j2d84) (file-stat-atime . j2d83) (file-stat-mtime . j2d82) (file-size-in-bytes . j2d81) (file-writable? . j2d80) (file-executable? . j2d7f) (file-readable? . j2d7e) (file-regular? . j2d7d) (file-symbolic-link? . j2d7c) (file-directory? . j2d7b) (create-symbolic-link . j2d7a) (rename-file . j2d79) (delete-directory . j2d78) (create-directory . j2d77) (create-mosh-cache-dir . j2d76) (get-environment-variables . j2d75) (current-exception-handler . j2d74) (get-environment-variable . j2d73) (join-wraps . j2d72) (id->real-label . j2d71) (same-marks? . j2d70) (same-marks*? . j2d6f) (get-timeofday . j2d6e) (get-command-line . j2d6d) (sys-display . j2d6c) (whereis . j2d6b) (register . j2d6a) (vm-join! . j2d69) (vm-set-value! . j2d68) (vm? . j2d67) (main-vm? . j2d66) (vm-eval . j2d65) (vm-self . j2d64) (vm-start! . j2d63) (make-vm . j2d62) (mutex-try-lock! . j2d61) (mutex-unlock! . j2d60) (mutex-lock! . j2d5f) (mutex? . j2d5e) (make-mutex . j2d5d) (condition-variable-notify-all! . j2d5c) (condition-variable-notify! . j2d5b) (condition-variable-wait! . j2d5a) (make-condition-variable . j2d59) (write/ss . j2d58) (mosh-executable-path . j2d57) (make-file-options . j2d56) (source-info . j2d55) (make-compiler-instruction . j2d54) (make-instruction . j2d53) (set-source-info! . j2d52) (bignum? . j2d51) (fast-equal? . j2d50) (fasl-read . j2d4f) (fasl-write . j2d4e) (time-usage . j2d4d) (os-constant . j2d4c) (condition-printer . j2d4b) (disasm . j2d4a) (make-parameter . j5a5) (socket-port . j2d49) (socket-shutdown . j2d48) (socket-close . j2d47) (socket-send . j2d46) (socket-recv! . j2d45) (socket-recv . j2d44) (make-server-socket . j2d43) (make-client-socket . j2d42) (socket-accept . j2d41) (socket? . j2d40) (string-upcase . j2d3f) (string-titlecase . j2d3e) (string-normalize-nfkd . j2d3d) (string-normalize-nfkc . j2d3c) (string-normalize-nfd . j2d3b) (string-normalize-nfc . j2d3a) (string-foldcase . j2d39) (string-downcase . j2d38) (string-ci>? . j2d37) (string-ci>=? . j2d36) (string-ci=? . j2d35) (string-ci<? . j2d34) (string-ci<=? . j2d33) (char-whitespace? . j2d32) (char-upper-case? . j2d31) (char-title-case? . j2d30) (char-numeric? . j2d2f) (char-lower-case? . j2d2e) (char-general-category . j2d2d) (char-upcase . j2d2c) (char-titlecase . j2d2b) (char-foldcase . j2d2a) (char-downcase . j2d29) (char-ci>? . j2d28) (char-ci>=? . j2d27) (char-ci=? . j2d26) (char-ci<? . j2d25) (char-ci<=? . j2d24) (char-alphabetic? . j2d23) (make-variable-transformer . jba9) (identifier? . je60) (generate-temporaries . je4c) (free-identifier=? . je4e) (syntax->datum . je64) (datum->syntax . je62) (bound-identifier=? . je50) (record-type-descriptor? . j2d22) (record-predicate . j2d21) (record-mutator . j2d20) (record-constructor . j2d1f) (record-accessor . j2d1e) (make-record-type-descriptor . j2d1d) (make-record-constructor-descriptor . j2d1c) (record? . j2d1b) (record-type-uid . j2d1a) (record-type-sealed? . j2d19) (record-type-parent . j2d18) (record-type-opaque? . j2d17) (record-type-name . j2d16) (record-type-generative? . j2d15) (record-type-field-names . j2d14) (record-rtd . j2d13) (record-field-mutable? . j2d12) (delete-file . j2d11) (file-exists? . j2d10) (vector-sort! . j2d0f) (vector-sort . j2d0e) (list-sort . j2d0d) (symbol-hash . j2d0c) (string-ci-hash . j2d0b) (string-hash . j2d0a) (equal-hash . j2d09) (hashtable-equivalence-function . j2d08) (make-hashtable . j2d07) (hashtable-hash-function . j2d06) (make-eqv-hashtable . j2d05) (make-eq-hashtable . j2d04) (hashtable? . j2d03) (hashtable-update! . j2d02) (hashtable-size . j2d01) (hashtable-set! . j2d00) (hashtable-ref . j2cff) (hashtable-mutable? . j2cfe) (hashtable-keys . j2cfd) (hashtable-entries . j2cfc) (hashtable-delete! . j2cfb) (hashtable-copy . j2cfa) (hashtable-contains? . j2cf9) (hashtable-clear! . j2cf8) (call-with-output-file . j2cf7) (call-with-input-file . j2cf6) (write-char . j2cf5) (write . j2cf4) (with-output-to-file . j2cf3) (with-input-from-file . j2cf2) (read-char . j2cf1) (read . j2cf0) (peek-char . j2cef) (open-output-file . j2cee) (open-input-file . j2ced) (newline . j2cec) (display . j2ceb) (close-output-port . j2cea) (close-input-port . j2ce9) (eof-object? . j2ce8) (eof-object . j2ce7) (current-error-port . j2ce6) (current-output-port . j2ce5) (current-input-port . j2ce4) (output-port? . j2ce3) (input-port? . j2ce2) (utf-8-codec . j2ce1) (utf-16-codec . j2ce0) (transcoder-error-handling-mode . j2cdf) (transcoder-eol-style . j2cde) (transcoder-codec . j2cdd) (transcoded-port . j2cdc) (textual-port? . j2cdb) (string->bytevector . j2cda) (standard-output-port . j2cd9) (standard-input-port . j2cd8) (standard-error-port . j2cd7) (set-port-position! . j2cd6) (put-u8 . j2cd5) (put-string . j2cd4) (put-datum . j2cd3) (put-char . j2cd2) (put-bytevector . j2cd1) (port? . j2cd0) (port-transcoder . j2ccf) (port-position . j2cce) (port-has-set-port-position!? . j2ccd) (port-has-port-position? . j2ccc) (port-eof? . j2ccb) (output-port-buffer-mode . j2cca) (open-string-output-port . j2cc9) (open-string-input-port . j2cc8) (open-file-output-port . j2cc7) (open-file-input/output-port . j2cc6) (open-file-input-port . j2cc5) (open-bytevector-output-port . j2cc4) (open-bytevector-input-port . j2cc3) (native-transcoder . j2cc2) (native-eol-style . j2cc1) (make-transcoder . j2cc0) (latin-1-codec . j2cbf) (make-i/o-write-error . j2cbe) (make-i/o-read-error . j2cbd) (make-i/o-port-error . j2cbc) (make-i/o-invalid-position-error . j2cbb) (make-i/o-filename-error . j2cba) (make-i/o-file-protection-error . j2cb9) (make-i/o-file-is-read-only-error . j2cb8) (make-i/o-file-does-not-exist-error . j2cb7) (make-i/o-file-already-exists-error . j2cb6) (make-i/o-error . j2cb5) (make-i/o-encoding-error . j2cb4) (make-i/o-decoding-error . j2cb3) (make-custom-textual-output-port . j2cb2) (make-custom-textual-input/output-port . j2cb1) (make-custom-textual-input-port . j2cb0) (make-custom-binary-output-port . j2caf) (make-custom-binary-input/output-port . j2cae) (make-custom-binary-input-port . j2cad) (make-bytevector . j2cac) (lookahead-u8 . j2cab) (lookahead-char . j2caa) (i/o-write-error? . j2ca9) (i/o-read-error? . j2ca8) (i/o-port-error? . j2ca7) (i/o-invalid-position-error? . j2ca6) (i/o-filename-error? . j2ca5) (i/o-file-protection-error? . j2ca4) (i/o-file-is-read-only-error? . j2ca3) (i/o-file-does-not-exist-error? . j2ca2) (i/o-file-already-exists-error? . j2ca1) (i/o-error? . j2ca0) (i/o-error-position . j2c9f) (i/o-error-port . j2c9e) (i/o-error-filename . j2c9d) (i/o-encoding-error? . j2c9c) (i/o-encoding-error-char . j2c9b) (i/o-decoding-error? . j2c9a) (get-u8 . j2c99) (get-string-n! . j2c98) (get-string-n . j2c97) (get-string-all . j2c96) (get-line . j2c95) (get-datum . j2c94) (get-char . j2c93) (get-bytevector-some . j2c92) (get-bytevector-n! . j2c91) (get-bytevector-n . j2c90) (get-bytevector-all . j2c8f) (flush-output-port . j2c8e) (close-port . j2c8d) (scheme-report-environment . je3a) (quotient . j2c8c) (null-environment . je38) (remainder . j2c8b) (modulo . j2c8a) (inexact->exact . j2c89) (force . j2c88) (exact->inexact . j2c87) (make-promise . j2c86) (exit . j2c85) (command-line . j2917) (string-fill! . j2c84) (string-set! . j2c83) (set-cdr! . j2c82) (set-car! . j2c81) (remove . j2c80) (remv . j2c7f) (remp . j2c7e) (remq . j2c7d) (partition . j2c7c) (memv . j2c7b) (memq . j2c7a) (memp . j2c79) (member . j2c78) (exists . j2c77) (for-all . j2c76) (fold-right . j2c75) (fold-left . j2c74) (find . j2c73) (filter . j2c72) (cons* . j2c71) (assv . j2c70) (assq . j2c6f) (assp . j2c6e) (assoc . j2c6d) (call-with-string-output-port . j2c6c) (call-with-port . j2c6b) (call-with-bytevector-output-port . j2c6a) (bytevector->string . j2c69) (buffer-mode? . j2c68) (binary-port? . j2c67) (with-exception-handler . j2c66) (raise-continuable . j2c65) (raise . j2c64) (eval . je3e) (environment . je36) (make-enumeration . j2c63) (enum-set=? . j2c62) (enum-set-universe . j2c61) (enum-set-union . j2c60) (enum-set-subset? . j2c5f) (enum-set-projection . j2c5e) (enum-set-member? . j2c5d) (enum-set-intersection . j2c5c) (enum-set-indexer . j2c5b) (enum-set-difference . j2c5a) (enum-set-constructor . j2c59) (enum-set-complement . j2c58) (enum-set->list . j2c57) (who-condition? . j2c56) (warning? . j2c55) (violation? . j2c54) (undefined-violation? . j2c53) (syntax-violation? . j2c52) (syntax-violation-subform . j2c51) (syntax-violation-form . j2c50) (syntax-violation . je5e) (simple-conditions . j2c4f) (serious-condition? . j2c4e) (non-continuable-violation? . j2c4d) (message-condition? . j2c4c) (make-who-condition . j2c4b) (make-warning . j2c4a) (make-violation . j2c49) (make-undefined-violation . j2c48) (make-syntax-violation . j2c47) (make-serious-condition . j2c46) (make-non-continuable-violation . j2c45) (make-message-condition . j2c44) (make-lexical-violation . j2c43) (make-irritants-condition . j2c42) (make-implementation-restriction-violation . j2c41) (make-error . j2c40) (make-assertion-violation . j2c3f) (lexical-violation? . j2c3e) (irritants-condition? . j2c3d) (implementation-restriction-violation? . j2c3c) (error? . j2c3b) (condition-who . j2c3a) (condition-predicate . j2c39) (condition-message . j2c38) (condition-irritants . j2c37) (condition-accessor . j2c36) (condition . j2c35) (assertion-violation? . j2c34) (condition? . j2c33) (utf32->string . j2c32) (utf16->string . j2c31) (utf8->string . j2c30) (uint-list->bytevector . j2c2f) (u8-list->bytevector . j2c2e) (string->utf8 . j2c2d) (string->utf32 . j2c2c) (string->utf16 . j2c2b) (sint-list->bytevector . j2c2a) (native-endianness . j2c29) (bytevector? . j2c28) (bytevector=? . j2c27) (bytevector-uint-set! . j2c26) (bytevector-uint-ref . j2c25) (bytevector-u8-set! . j2c24) (bytevector-u8-ref . j2c23) (bytevector-u64-set! . j2c22) (bytevector-u64-ref . j2c21) (bytevector-u64-native-set! . j2c20) (bytevector-u64-native-ref . j2c1f) (bytevector-u32-set! . j2c1e) (bytevector-u32-ref . j2c1d) (bytevector-u32-native-set! . j2c1c) (bytevector-u32-native-ref . j2c1b) (bytevector-u16-set! . j2c1a) (bytevector-u16-ref . j2c19) (bytevector-u16-native-set! . j2c18) (bytevector-u16-native-ref . j2c17) (bytevector-sint-set! . j2c16) (bytevector-sint-ref . j2c15) (bytevector-s8-set! . j2c14) (bytevector-s8-ref . j2c13) (bytevector-s64-set! . j2c12) (bytevector-s64-ref . j2c11) (bytevector-s64-native-set! . j2c10) (bytevector-s64-native-ref . j2c0f) (bytevector-s32-set! . j2c0e) (bytevector-s32-ref . j2c0d) (bytevector-s32-native-set! . j2c0c) (bytevector-s32-native-ref . j2c0b) (bytevector-s16-set! . j2c0a) (bytevector-s16-ref . j2c09) (bytevector-s16-native-set! . j2c08) (bytevector-s16-native-ref . j2c07) (bytevector-length . j2c06) (bytevector-ieee-single-ref . j2c05) (bytevector-ieee-single-set! . j2c04) (bytevector-ieee-single-native-set! . j2c03) (bytevector-ieee-single-native-ref . j2c02) (bytevector-ieee-double-set! . j2c01) (bytevector-ieee-double-ref . j2c00) (bytevector-ieee-double-native-set! . j2bff) (bytevector-ieee-double-native-ref . j2bfe) (bytevector-fill! . j2bfd) (bytevector-copy! . j2bfc) (bytevector-copy . j2bfb) (bytevector->uint-list . j2bfa) (bytevector->u8-list . j2bf9) (bytevector->sint-list . j2bf8) (no-nans-violation? . j2bf7) (no-infinities-violation? . j2bf6) (make-no-nans-violation . j2bf5) (make-no-infinities-violation . j2bf4) (real->flonum . j2bf3) (flzero? . j2bf2) (fltruncate . j2bf1) (fltan . j2bf0) (flsqrt . j2bef) (flsin . j2bee) (flround . j2bed) (flpositive? . j2bec) (flonum? . j2beb) (flodd? . j2bea) (flnumerator . j2be9) (flnegative? . j2be8) (flnan? . j2be7) (flmod0 . j2be6) (flmod . j2be5) (flmin . j2be4) (flmax . j2be3) (fllog . j2be2) (flinteger? . j2be1) (flinfinite? . j2be0) (flfloor . j2bdf) (flfinite? . j2bde) (flexpt . j2bdd) (flexp . j2bdc) (fleven? . j2bdb) (fldiv0-and-mod0 . j2bda) (fldiv0 . j2bd9) (fldiv-and-mod . j2bd8) (fldiv . j2bd7) (fldenominator . j2bd6) (flcos . j2bd5) (flceiling . j2bd4) (flatan . j2bd3) (flasin . j2bd2) (flacos . j2bd1) (flabs . j2bd0) (fl>? . j2bcf) (fl>=? . j2bce) (fl=? . j2bcd) (fl<? . j2bcc) (fl<=? . j2bcb) (fl/ . j2bca) (fl- . j2bc9) (fl+ . j2bc8) (fl* . j2bc7) (fixnum->flonum . j2bc6) (fxzero? . j2bc5) (fxxor . j2bc4) (fxrotate-bit-field . j2bc3) (fxreverse-bit-field . j2bc2) (fxpositive? . j2bc1) (fxodd? . j2bc0) (fxnot . j2bbf) (fxnegative? . j2bbe) (fxmod0 . j2bbd) (fxmod . j2bbc) (fxmin . j2bbb) (fxmax . j2bba) (fxlength . j2bb9) (fxior . j2bb8) (fxif . j2bb7) (fxfirst-bit-set . j2bb6) (fxeven? . j2bb5) (fxdiv0-and-mod0 . j2bb4) (fxdiv0 . j2bb3) (fxdiv-and-mod . j2bb2) (fxdiv . j2bb1) (fxcopy-bit-field . j2bb0) (fxcopy-bit . j2baf) (fxbit-set? . j2bae) (fxbit-field . j2bad) (fxbit-count . j2bac) (fxarithmetic-shift-right . j2bab) (fxarithmetic-shift-left . j2baa) (fxarithmetic-shift . j2ba9) (fxand . j2ba8) (fx>? . j2ba7) (fx>=? . j2ba6) (fx=? . j2ba5) (fx<? . j2ba4) (fx<=? . j2ba3) (fx-/carry . j2ba2) (fx- . j2ba1) (fx+/carry . j2ba0) (fx+ . j2b9f) (fx*/carry . j2b9e) (fx* . j2b9d) (greatest-fixnum . j2b9c) (least-fixnum . j2b9b) (fixnum-width . j2b9a) (fixnum? . j2b99) (bitwise-rotate-bit-field . j2b98) (bitwise-reverse-bit-field . j2b97) (bitwise-length . j2b96) (bitwise-if . j2b95) (bitwise-first-bit-set . j2b94) (bitwise-copy-bit-field . j2b93) (bitwise-copy-bit . j2b92) (bitwise-bit-set? . j2b91) (bitwise-bit-field . j2b90) (bitwise-bit-count . j2b8f) (bitwise-xor . j2b8e) (bitwise-ior . j2b8d) (bitwise-and . j2b8c) (bitwise-not . j2b8b) (bitwise-arithmetic-shift-right . j2b8a) (bitwise-arithmetic-shift-left . j2b89) (bitwise-arithmetic-shift . j2b88) (zero? . j2b87) (vector? . j2b86) (vector-set! . j2b85) (vector-ref . j2b84) (vector-map . j2b83) (vector-length . j2b82) (vector-for-each . j2b81) (vector-fill! . j2b80) (vector->list . j2b7f) (vector . j2b7e) (values . j2b7d) (truncate . j2b7c) (tan . j2b7b) (symbol? . j2b7a) (symbol=? . j2b79) (symbol->string . j2b78) (substring . j2b77) (string? . j2b76) (string>? . j2b75) (string>=? . j2b74) (string=? . j2b73) (string<? . j2b72) (string<=? . j2b71) (string-ref . j2b70) (string-length . j2b6f) (string-for-each . j2b6e) (string-copy . j2b6d) (string-append . j2b6c) (string->symbol . j2b6b) (string->number . j2b6a) (string->list . j2b69) (string . j2b68) (sqrt . j2b67) (sin . j2b66) (round . j2b65) (reverse . j2b64) (real? . j2b63) (real-valued? . j2b62) (real-part . j2b61) (rationalize . j2b60) (rational? . j2b5f) (rational-valued? . j2b5e) (procedure? . j2b5d) (positive? . j2b5c) (pair? . j2b5b) (odd? . j2b5a) (numerator . j2b59) (number? . j2b58) (number->string . j2b57) (null? . j2b56) (not . j2b55) (negative? . j2b54) (nan? . j2b53) (min . j2b52) (max . j2b51) (map . j2b50) (make-vector . j2b4f) (make-string . j2b4e) (make-rectangular . j2b4d) (make-polar . j2b4c) (magnitude . j2b4b) (log . j2b4a) (list? . j2b49) (list-tail . j2b48) (list-ref . j2b47) (list->vector . j2b46) (list->string . j2b45) (list . j2b44) (length . j2b43) (lcm . j2b42) (integer? . j2b41) (integer-valued? . j2b40) (integer->char . j2b3f) (infinite? . j2b3e) (inexact? . j2b3d) (inexact . j2b3c) (imag-part . j2b3b) (gcd . j2b3a) (for-each . j2b39) (floor . j2b38) (finite? . j2b37) (expt . j2b36) (exp . j2b35) (exact? . j2b34) (exact-integer-sqrt . j2b33) (exact . j2b32) (even? . j2b31) (error . j2b30) (eqv? . j2b2f) (equal? . j2b2e) (eq? . j2b2d) (dynamic-wind . j2b2c) (div0-and-mod0 . j2b2b) (mod0 . j2b2a) (div0 . j2b29) (div-and-mod . j2b28) (mod . j2b27) (div . j2b26) (denominator . j2b25) (cos . j2b24) (cons . j2b23) (complex? . j2b22) (char? . j2b21) (char>? . j2b20) (char>=? . j2b1f) (char=? . j2b1e) (char<? . j2b1d) (char<=? . j2b1c) (char->integer . j2b1b) (ceiling . j2b1a) (call-with-values . j2b19) (call/cc . j2b18) (call-with-current-continuation . j2b17) (cddddr . j2b16) (cdddar . j2b15) (cddadr . j2b14) (cddaar . j2b13) (cdaddr . j2b12) (cdadar . j2b11) (cdaadr . j2b10) (cdaaar . j2b0f) (cadddr . j2b0e) (caddar . j2b0d) (cadadr . j2b0c) (cadaar . j2b0b) (caaddr . j2b0a) (caadar . j2b09) (caaadr . j2b08) (caaaar . j2b07) (cdddr . j2b06) (cddar . j2b05) (cdadr . j2b04) (cdaar . j2b03) (caddr . j2b02) (cadar . j2b01) (caadr . j2b00) (caaar . j2aff) (cddr . j2afe) (cdar . j2afd) (cadr . j2afc) (caar . j2afb) (cdr . j2afa) (car . j2af9) (boolean? . j2af8) (boolean=? . j2af7) (atan . j2af6) (assertion-violation . j2af5) (assertion-error . je58) (asin . j2af4) (apply . j2af3) (append . j2af2) (angle . j2af1) (acos . j2af0) (abs . j2aef) (/ . j2aee) (* . j2aed) (- . j2aec) (+ . j2aeb) (>= . j2aea) (> . j2ae9) (= . j2ae8) (<= . j2ae7) (< . j2ae6) (library . j2ae5) (&no-nans . j2ae4) (&no-infinities . j2ae3) (&i/o-encoding . j2ae2) (&i/o-decoding . j2ae1) (&i/o-port . j2ae0) (&i/o-file-does-not-exist . j2adf) (&i/o-file-already-exists . j2ade) (&i/o-file-is-read-only . j2add) (&i/o-file-protection . j2adc) (&i/o-filename . j2adb) (&i/o-invalid-position . j2ada) (&i/o-write . j2ad9) (&i/o-read . j2ad8) (&i/o . j2ad7) (&undefined . j2ad6) (&syntax . j2ad5) (&lexical . j2ad4) (&implementation-restriction . j2ad3) (&non-continuable . j2ad2) (&who . j2ad1) (&irritants . j2ad0) (&assertion . j2acf) (&violation . j2ace) (&error . j2acd) (&serious . j2acc) (&warning . j2acb) (&message . j2aca) (&condition . j2ac9) (define-condition-type . j2ac8) (define-enumeration . j2ac7) (define-record-type . j2ac6) (parent-rtd . j2ac5) (nongenerative . j2ac4) (opaque . j2ac3) (sealed . j2ac2) (protocol . j2ac1) (parent . j2ac0) (immutable . j2abf) (mutable . j2abe) (fields . j2abd) (error-handling-mode . j2abc) (file-options . j2abb) (buffer-mode . j2aba) (eol-style . j2ab9) (guard . j2ab8) (trace-define . j2ab7) (trace-lambda . j2ab6) (unsyntax-splicing . j2ab5) (unsyntax . j2ab4) (unquote-splicing . j2ab3) (unquote . j2ab2) (_ . j2ab1) (else . j2ab0) (=> . j2aaf) (... . j2aae) (assert . j2aad) (endianness . j2aac) (delay . j2aab) (time . j2aaa) (do . j2aa9) (cond . j2aa8) (let* . j2aa7) (let*-values . j2aa6) (let-values . j2aa5) (identifier-syntax . j2aa4) (with-syntax . j2aa3) (quasisyntax . j2aa2) (quasiquote . j2aa1) (syntax-rules . j2aa0) (include . j2a9f) (define-struct . j2a9e) (record-constructor-descriptor . j2a9d) (record-type-descriptor . j2a9c) (case . j2a9b) (parameterize . j2a9a) (unless . j2a99) (when . j2a98) (or . j2a97) (and . j2a96) (if . j2a95) (let . j2a94) (letrec* . j2a93) (letrec . j2a92) (type-descriptor . j2a91) (case-lambda . j2a90) (lambda . j2a8f) (syntax . j2a8e) (syntax-case . j2a8d) (quote . j2a8c) (foreign-call . j2a8b) (letrec-syntax . j2a8a) (let-syntax . j2a89) (set! . j2a88) (import . j2a87) (begin . j2a86) (module . j2a85) (define-syntax . j2a84) (define . j2a83)) '((j2e29 core-prim . &no-nans-rcd) (j2e28 core-prim . &no-nans-rtd) (j2e27 core-prim . &no-infinities-rcd) (j2e26 core-prim . &no-infinities-rtd) (j2e25 core-prim . &i/o-encoding-rcd) (j2e24 core-prim . &i/o-encoding-rtd) (j2e23 core-prim . &i/o-decoding-rcd) (j2e22 core-prim . &i/o-decoding-rtd) (j2e21 core-prim . &i/o-port-rcd) (j2e20 core-prim . &i/o-port-rtd) (j2e1f core-prim . &i/o-file-does-not-exist-rcd) (j2e1e core-prim . &i/o-file-does-not-exist-rtd) (j2e1d core-prim . &i/o-file-already-exists-rcd) (j2e1c core-prim . &i/o-file-already-exists-rtd) (j2e1b core-prim . &i/o-file-is-read-only-rcd) (j2e1a core-prim . &i/o-file-is-read-only-rtd) (j2e19 core-prim . &i/o-file-protection-rcd) (j2e18 core-prim . &i/o-file-protection-rtd) (j2e17 core-prim . &i/o-filename-rcd) (j2e16 core-prim . &i/o-filename-rtd) (j2e15 core-prim . &i/o-invalid-position-rcd) (j2e14 core-prim . &i/o-invalid-position-rtd) (j2e13 core-prim . &i/o-write-rcd) (j2e12 core-prim . &i/o-write-rtd) (j2e11 core-prim . &i/o-read-rcd) (j2e10 core-prim . &i/o-read-rtd) (j2e0f core-prim . &i/o-rcd) (j2e0e core-prim . &i/o-rtd) (j2e0d core-prim . &undefined-rcd) (j2e0c core-prim . &undefined-rtd) (j2e0b core-prim . &syntax-rcd) (j2e0a core-prim . &syntax-rtd) (j2e09 core-prim . &lexical-rcd) (j2e08 core-prim . &lexical-rtd) (j2e07 core-prim . &implementation-restriction-rcd) (j2e06 core-prim . &implementation-restriction-rtd) (j2e05 core-prim . &non-continuable-rcd) (j2e04 core-prim . &non-continuable-rtd) (j2e03 core-prim . &who-rcd) (j2e02 core-prim . &who-rtd) (j2e01 core-prim . &irritants-rcd) (j2e00 core-prim . &irritants-rtd) (j2dff core-prim . &assertion-rcd) (j2dfe core-prim . &assertion-rtd) (j2dfd core-prim . &violation-rcd) (j2dfc core-prim . &violation-rtd) (j2dfb core-prim . &error-rcd) (j2dfa core-prim . &error-rtd) (j2df9 core-prim . &serious-rcd) (j2df8 core-prim . &serious-rtd) (j2df7 core-prim . &warning-rcd) (j2df6 core-prim . &warning-rtd) (j2df5 core-prim . &message-rcd) (j2df4 core-prim . &message-rtd) (j2df3 core-prim . &condition-rcd) (j2df2 core-prim . &condition-rtd) (je5a core-prim . syntax-error) (jd7e core-prim . syntax-dispatch) (j2df1 core-prim . pretty-print) (j2df0 core-prim . eval-core) (j2def core-prim . set-symbol-value!) (j2dee core-prim . symbol-value) (j2ded core-prim . gensym) (j2dec core-prim . void) (j291d core-prim . load) (je6c core-prim . interaction-environment) (j2deb core-prim . char-ready?) (j2dea core-prim . regexp?) (j2de9 core-prim . read-line) (j2de8 core-prim . gensym-prefix-set!) (j2de7 core-prim . ungensym) (j2de6 core-prim . alist->eq-hash-table) (j2de5 core-prim . assoc-ref) (j2de4 core-prim . print) (j2de3 core-prim . format) (j2de2 core-prim . host-os) (j7bd core-prim . library-path) (j2de1 core-prim . standard-library-path) (j2de0 core-prim . ssl-supported?) (j2ddf core-prim . ssl-socket?) (j2dde core-prim . socket-sslize!) (j2ddd core-prim . %monapi-name-whereis) (j2ddc core-prim . %monapi-message-send) (j2ddb core-prim . file-newer?) (j2dda core-prim . stat-mtime) (j2dd9 core-prim . write-to-file) (j2dd8 core-prim . file->list) (j2dd7 core-prim . file->string) (j2dd6 core-prim . digit->integer) (j2dd5 core-prim . call-with-string-input-port) (j2dd4 core-prim . call-with-string-io) (j2dd3 core-prim . string-split) (j2dd2 core-prim . bytevector-for-each) (j2dd1 core-prim . string->regexp) (j2dd0 core-prim . rxmatch) (j2dcf core-prim . regexp-replace-all) (j2dce core-prim . hashtable-fold-left) (j2dcd core-prim . hashtable-for-each) (j5a7 core-prim . mosh-cache-dir) (j2dcc core-prim . call-process) (j2dcb core-prim . local-tz-offset) (j2dca core-prim . microseconds) (j2dc9 core-prim . directory-list) (j2dc8 core-prim . set-current-directory!) (j2dc7 core-prim . expand-path) (j2dc6 core-prim . current-directory) (j2dc5 core-prim . %spawn) (j2dc4 core-prim . %waitpid) (j2dc3 core-prim . simple-struct-name) (j2dc2 core-prim . simple-struct-set!) (j2dc1 core-prim . simple-struct-ref) (j2dc0 core-prim . make-simple-struct) (j2dbf core-prim . simple-struct?) (j2dbe core-prim . pointer-ref-c-int64) (j2dbd core-prim . pointer-ref-c-int32) (j2dbc core-prim . pointer-ref-c-int16) (j2dbb core-prim . pointer-ref-c-int8) (j2dba core-prim . pointer-ref-c-uint64) (j2db9 core-prim . pointer-ref-c-uint32) (j2db8 core-prim . pointer-ref-c-uint16) (j2db7 core-prim . pointer-ref-c-uint8) (j2db6 core-prim . pointer-set-c-uint64!) (j2db5 core-prim . pointer-set-c-uint32!) (j2db4 core-prim . pointer-set-c-uint16!) (j2db3 core-prim . pointer-set-c-uint8!) (j2db2 core-prim . pointer-set-c-int64!) (j2db1 core-prim . pointer-set-c-int32!) (j2db0 core-prim . pointer-set-c-int16!) (j2daf core-prim . pointer-set-c-int8!) (j2dae core-prim . pointer-set-c-pointer!) (j2dad core-prim . pointer-set-c-double!) (j2dac core-prim . pointer-set-c-float!) (j2dab core-prim . pointer-set-c-long-long!) (j2daa core-prim . pointer-set-c-long!) (j2da9 core-prim . pointer-set-c-int!) (j2da8 core-prim . pointer-set-c-short!) (j2da7 core-prim . pointer-set-c-char!) (j2da6 core-prim . pointer-ref-c-pointer) (j2da5 core-prim . pointer-ref-c-double) (j2da4 core-prim . pointer-ref-c-float) (j2da3 core-prim . pointer-ref-c-unsigned-long-long) (j2da2 core-prim . pointer-ref-c-signed-long-long) (j2da1 core-prim . pointer-ref-c-unsigned-long) (j2da0 core-prim . pointer-ref-c-signed-long) (j2d9f core-prim . pointer-ref-c-unsigned-int) (j2d9e core-prim . pointer-ref-c-signed-int) (j2d9d core-prim . pointer-ref-c-unsigned-short) (j2d9c core-prim . pointer-ref-c-signed-short) (j2d9b core-prim . pointer-ref-c-unsigned-char) (j2d9a core-prim . pointer-ref-c-signed-char) (j2d99 core-prim . pointer->integer) (j2d98 core-prim . integer->pointer) (j2d97 core-prim . pointer?) (j2d96 core-prim . shared-errno) (j2d95 core-prim . %ffi-free-c-callback-trampoline) (j2d94 core-prim . %ffi-make-c-callback-trampoline) (j2d93 core-prim . %ffi-free) (j2d92 core-prim . %ffi-malloc) (j2d91 core-prim . %ffi-supported?) (j2d90 core-prim . %ffi-pointer->string) (j2d8f core-prim . %ffi-call) (j2d8e core-prim . %ffi-lookup) (j2d8d core-prim . %ffi-open) (j2d8c core-prim . null-terminated-utf8->string) (j2d8b core-prim . null-terminated-bytevector->string) (j2d8a core-prim . %exec) (j2d89 core-prim . %fork) (j2d88 core-prim . %pipe) (j2d87 core-prim . p) (j2d86 core-prim . open-output-string) (j2d85 core-prim . get-output-string) (j2d84 core-prim . file-stat-ctime) (j2d83 core-prim . file-stat-atime) (j2d82 core-prim . file-stat-mtime) (j2d81 core-prim . file-size-in-bytes) (j2d80 core-prim . file-writable?) (j2d7f core-prim . file-executable?) (j2d7e core-prim . file-readable?) (j2d7d core-prim . file-regular?) (j2d7c core-prim . file-symbolic-link?) (j2d7b core-prim . file-directory?) (j2d7a core-prim . create-symbolic-link) (j2d79 core-prim . rename-file) (j2d78 core-prim . delete-directory) (j2d77 core-prim . create-directory) (j2d76 core-prim . create-mosh-cache-dir) (j2d75 core-prim . get-environment-variables) (j2d74 core-prim . current-exception-handler) (j2d73 core-prim . get-environment-variable) (j2d72 core-prim . join-wraps) (j2d71 core-prim . id->real-label) (j2d70 core-prim . same-marks?) (j2d6f core-prim . same-marks*?) (j2d6e core-prim . get-timeofday) (j2d6d core-prim . get-command-line) (j2d6c core-prim . sys-display) (j2d6b core-prim . whereis) (j2d6a core-prim . register) (j2d69 core-prim . vm-join!) (j2d68 core-prim . vm-set-value!) (j2d67 core-prim . vm?) (j2d66 core-prim . main-vm?) (j2d65 core-prim . vm-eval) (j2d64 core-prim . vm-self) (j2d63 core-prim . vm-start!) (j2d62 core-prim . make-vm) (j2d61 core-prim . mutex-try-lock!) (j2d60 core-prim . mutex-unlock!) (j2d5f core-prim . mutex-lock!) (j2d5e core-prim . mutex?) (j2d5d core-prim . make-mutex) (j2d5c core-prim . condition-variable-notify-all!) (j2d5b core-prim . condition-variable-notify!) (j2d5a core-prim . condition-variable-wait!) (j2d59 core-prim . make-condition-variable) (j2d58 core-prim . write/ss) (j2d57 core-prim . mosh-executable-path) (j2d56 core-prim . make-file-options) (j2d55 core-prim . source-info) (j2d54 core-prim . make-compiler-instruction) (j2d53 core-prim . make-instruction) (j2d52 core-prim . set-source-info!) (j2d51 core-prim . bignum?) (j2d50 core-prim . fast-equal?) (j2d4f core-prim . fasl-read) (j2d4e core-prim . fasl-write) (j2d4d core-prim . time-usage) (j2d4c core-prim . os-constant) (j2d4b core-prim . condition-printer) (j2d4a core-prim . disasm) (j5a5 core-prim . make-parameter) (j2d49 core-prim . socket-port) (j2d48 core-prim . socket-shutdown) (j2d47 core-prim . socket-close) (j2d46 core-prim . socket-send) (j2d45 core-prim . socket-recv!) (j2d44 core-prim . socket-recv) (j2d43 core-prim . make-server-socket) (j2d42 core-prim . make-client-socket) (j2d41 core-prim . socket-accept) (j2d40 core-prim . socket?) (j2d3f core-prim . string-upcase) (j2d3e core-prim . string-titlecase) (j2d3d core-prim . string-normalize-nfkd) (j2d3c core-prim . string-normalize-nfkc) (j2d3b core-prim . string-normalize-nfd) (j2d3a core-prim . string-normalize-nfc) (j2d39 core-prim . string-foldcase) (j2d38 core-prim . string-downcase) (j2d37 core-prim . string-ci>?) (j2d36 core-prim . string-ci>=?) (j2d35 core-prim . string-ci=?) (j2d34 core-prim . string-ci<?) (j2d33 core-prim . string-ci<=?) (j2d32 core-prim . char-whitespace?) (j2d31 core-prim . char-upper-case?) (j2d30 core-prim . char-title-case?) (j2d2f core-prim . char-numeric?) (j2d2e core-prim . char-lower-case?) (j2d2d core-prim . char-general-category) (j2d2c core-prim . char-upcase) (j2d2b core-prim . char-titlecase) (j2d2a core-prim . char-foldcase) (j2d29 core-prim . char-downcase) (j2d28 core-prim . char-ci>?) (j2d27 core-prim . char-ci>=?) (j2d26 core-prim . char-ci=?) (j2d25 core-prim . char-ci<?) (j2d24 core-prim . char-ci<=?) (j2d23 core-prim . char-alphabetic?) (jba9 core-prim . make-variable-transformer) (je60 core-prim . identifier?) (je4c core-prim . generate-temporaries) (je4e core-prim . free-identifier=?) (je64 core-prim . syntax->datum) (je62 core-prim . datum->syntax) (je50 core-prim . bound-identifier=?) (j2d22 core-prim . record-type-descriptor?) (j2d21 core-prim . record-predicate) (j2d20 core-prim . record-mutator) (j2d1f core-prim . record-constructor) (j2d1e core-prim . record-accessor) (j2d1d core-prim . make-record-type-descriptor) (j2d1c core-prim . make-record-constructor-descriptor) (j2d1b core-prim . record?) (j2d1a core-prim . record-type-uid) (j2d19 core-prim . record-type-sealed?) (j2d18 core-prim . record-type-parent) (j2d17 core-prim . record-type-opaque?) (j2d16 core-prim . record-type-name) (j2d15 core-prim . record-type-generative?) (j2d14 core-prim . record-type-field-names) (j2d13 core-prim . record-rtd) (j2d12 core-prim . record-field-mutable?) (j2d11 core-prim . delete-file) (j2d10 core-prim . file-exists?) (j2d0f core-prim . vector-sort!) (j2d0e core-prim . vector-sort) (j2d0d core-prim . list-sort) (j2d0c core-prim . symbol-hash) (j2d0b core-prim . string-ci-hash) (j2d0a core-prim . string-hash) (j2d09 core-prim . equal-hash) (j2d08 core-prim . hashtable-equivalence-function) (j2d07 core-prim . make-hashtable) (j2d06 core-prim . hashtable-hash-function) (j2d05 core-prim . make-eqv-hashtable) (j2d04 core-prim . make-eq-hashtable) (j2d03 core-prim . hashtable?) (j2d02 core-prim . hashtable-update!) (j2d01 core-prim . hashtable-size) (j2d00 core-prim . hashtable-set!) (j2cff core-prim . hashtable-ref) (j2cfe core-prim . hashtable-mutable?) (j2cfd core-prim . hashtable-keys) (j2cfc core-prim . hashtable-entries) (j2cfb core-prim . hashtable-delete!) (j2cfa core-prim . hashtable-copy) (j2cf9 core-prim . hashtable-contains?) (j2cf8 core-prim . hashtable-clear!) (j2cf7 core-prim . call-with-output-file) (j2cf6 core-prim . call-with-input-file) (j2cf5 core-prim . write-char) (j2cf4 core-prim . write) (j2cf3 core-prim . with-output-to-file) (j2cf2 core-prim . with-input-from-file) (j2cf1 core-prim . read-char) (j2cf0 core-prim . read) (j2cef core-prim . peek-char) (j2cee core-prim . open-output-file) (j2ced core-prim . open-input-file) (j2cec core-prim . newline) (j2ceb core-prim . display) (j2cea core-prim . close-output-port) (j2ce9 core-prim . close-input-port) (j2ce8 core-prim . eof-object?) (j2ce7 core-prim . eof-object) (j2ce6 core-prim . current-error-port) (j2ce5 core-prim . current-output-port) (j2ce4 core-prim . current-input-port) (j2ce3 core-prim . output-port?) (j2ce2 core-prim . input-port?) (j2ce1 core-prim . utf-8-codec) (j2ce0 core-prim . utf-16-codec) (j2cdf core-prim . transcoder-error-handling-mode) (j2cde core-prim . transcoder-eol-style) (j2cdd core-prim . transcoder-codec) (j2cdc core-prim . transcoded-port) (j2cdb core-prim . textual-port?) (j2cda core-prim . string->bytevector) (j2cd9 core-prim . standard-output-port) (j2cd8 core-prim . standard-input-port) (j2cd7 core-prim . standard-error-port) (j2cd6 core-prim . set-port-position!) (j2cd5 core-prim . put-u8) (j2cd4 core-prim . put-string) (j2cd3 core-prim . put-datum) (j2cd2 core-prim . put-char) (j2cd1 core-prim . put-bytevector) (j2cd0 core-prim . port?) (j2ccf core-prim . port-transcoder) (j2cce core-prim . port-position) (j2ccd core-prim . port-has-set-port-position!?) (j2ccc core-prim . port-has-port-position?) (j2ccb core-prim . port-eof?) (j2cca core-prim . output-port-buffer-mode) (j2cc9 core-prim . open-string-output-port) (j2cc8 core-prim . open-string-input-port) (j2cc7 core-prim . open-file-output-port) (j2cc6 core-prim . open-file-input/output-port) (j2cc5 core-prim . open-file-input-port) (j2cc4 core-prim . open-bytevector-output-port) (j2cc3 core-prim . open-bytevector-input-port) (j2cc2 core-prim . native-transcoder) (j2cc1 core-prim . native-eol-style) (j2cc0 core-prim . make-transcoder) (j2cbf core-prim . latin-1-codec) (j2cbe core-prim . make-i/o-write-error) (j2cbd core-prim . make-i/o-read-error) (j2cbc core-prim . make-i/o-port-error) (j2cbb core-prim . make-i/o-invalid-position-error) (j2cba core-prim . make-i/o-filename-error) (j2cb9 core-prim . make-i/o-file-protection-error) (j2cb8 core-prim . make-i/o-file-is-read-only-error) (j2cb7 core-prim . make-i/o-file-does-not-exist-error) (j2cb6 core-prim . make-i/o-file-already-exists-error) (j2cb5 core-prim . make-i/o-error) (j2cb4 core-prim . make-i/o-encoding-error) (j2cb3 core-prim . make-i/o-decoding-error) (j2cb2 core-prim . make-custom-textual-output-port) (j2cb1 core-prim . make-custom-textual-input/output-port) (j2cb0 core-prim . make-custom-textual-input-port) (j2caf core-prim . make-custom-binary-output-port) (j2cae core-prim . make-custom-binary-input/output-port) (j2cad core-prim . make-custom-binary-input-port) (j2cac core-prim . make-bytevector) (j2cab core-prim . lookahead-u8) (j2caa core-prim . lookahead-char) (j2ca9 core-prim . i/o-write-error?) (j2ca8 core-prim . i/o-read-error?) (j2ca7 core-prim . i/o-port-error?) (j2ca6 core-prim . i/o-invalid-position-error?) (j2ca5 core-prim . i/o-filename-error?) (j2ca4 core-prim . i/o-file-protection-error?) (j2ca3 core-prim . i/o-file-is-read-only-error?) (j2ca2 core-prim . i/o-file-does-not-exist-error?) (j2ca1 core-prim . i/o-file-already-exists-error?) (j2ca0 core-prim . i/o-error?) (j2c9f core-prim . i/o-error-position) (j2c9e core-prim . i/o-error-port) (j2c9d core-prim . i/o-error-filename) (j2c9c core-prim . i/o-encoding-error?) (j2c9b core-prim . i/o-encoding-error-char) (j2c9a core-prim . i/o-decoding-error?) (j2c99 core-prim . get-u8) (j2c98 core-prim . get-string-n!) (j2c97 core-prim . get-string-n) (j2c96 core-prim . get-string-all) (j2c95 core-prim . get-line) (j2c94 core-prim . get-datum) (j2c93 core-prim . get-char) (j2c92 core-prim . get-bytevector-some) (j2c91 core-prim . get-bytevector-n!) (j2c90 core-prim . get-bytevector-n) (j2c8f core-prim . get-bytevector-all) (j2c8e core-prim . flush-output-port) (j2c8d core-prim . close-port) (je3a core-prim . scheme-report-environment) (j2c8c core-prim . quotient) (je38 core-prim . null-environment) (j2c8b core-prim . remainder) (j2c8a core-prim . modulo) (j2c89 core-prim . inexact->exact) (j2c88 core-prim . force) (j2c87 core-prim . exact->inexact) (j2c86 core-prim . make-promise) (j2c85 core-prim . exit) (j2917 core-prim . command-line) (j2c84 core-prim . string-fill!) (j2c83 core-prim . string-set!) (j2c82 core-prim . set-cdr!) (j2c81 core-prim . set-car!) (j2c80 core-prim . remove) (j2c7f core-prim . remv) (j2c7e core-prim . remp) (j2c7d core-prim . remq) (j2c7c core-prim . partition) (j2c7b core-prim . memv) (j2c7a core-prim . memq) (j2c79 core-prim . memp) (j2c78 core-prim . member) (j2c77 core-prim . exists) (j2c76 core-prim . for-all) (j2c75 core-prim . fold-right) (j2c74 core-prim . fold-left) (j2c73 core-prim . find) (j2c72 core-prim . filter) (j2c71 core-prim . cons*) (j2c70 core-prim . assv) (j2c6f core-prim . assq) (j2c6e core-prim . assp) (j2c6d core-prim . assoc) (j2c6c core-prim . call-with-string-output-port) (j2c6b core-prim . call-with-port) (j2c6a core-prim . call-with-bytevector-output-port) (j2c69 core-prim . bytevector->string) (j2c68 core-prim . buffer-mode?) (j2c67 core-prim . binary-port?) (j2c66 core-prim . with-exception-handler) (j2c65 core-prim . raise-continuable) (j2c64 core-prim . raise) (je3e core-prim . eval) (je36 core-prim . environment) (j2c63 core-prim . make-enumeration) (j2c62 core-prim . enum-set=?) (j2c61 core-prim . enum-set-universe) (j2c60 core-prim . enum-set-union) (j2c5f core-prim . enum-set-subset?) (j2c5e core-prim . enum-set-projection) (j2c5d core-prim . enum-set-member?) (j2c5c core-prim . enum-set-intersection) (j2c5b core-prim . enum-set-indexer) (j2c5a core-prim . enum-set-difference) (j2c59 core-prim . enum-set-constructor) (j2c58 core-prim . enum-set-complement) (j2c57 core-prim . enum-set->list) (j2c56 core-prim . who-condition?) (j2c55 core-prim . warning?) (j2c54 core-prim . violation?) (j2c53 core-prim . undefined-violation?) (j2c52 core-prim . syntax-violation?) (j2c51 core-prim . syntax-violation-subform) (j2c50 core-prim . syntax-violation-form) (je5e core-prim . syntax-violation) (j2c4f core-prim . simple-conditions) (j2c4e core-prim . serious-condition?) (j2c4d core-prim . non-continuable-violation?) (j2c4c core-prim . message-condition?) (j2c4b core-prim . make-who-condition) (j2c4a core-prim . make-warning) (j2c49 core-prim . make-violation) (j2c48 core-prim . make-undefined-violation) (j2c47 core-prim . make-syntax-violation) (j2c46 core-prim . make-serious-condition) (j2c45 core-prim . make-non-continuable-violation) (j2c44 core-prim . make-message-condition) (j2c43 core-prim . make-lexical-violation) (j2c42 core-prim . make-irritants-condition) (j2c41 core-prim . make-implementation-restriction-violation) (j2c40 core-prim . make-error) (j2c3f core-prim . make-assertion-violation) (j2c3e core-prim . lexical-violation?) (j2c3d core-prim . irritants-condition?) (j2c3c core-prim . implementation-restriction-violation?) (j2c3b core-prim . error?) (j2c3a core-prim . condition-who) (j2c39 core-prim . condition-predicate) (j2c38 core-prim . condition-message) (j2c37 core-prim . condition-irritants) (j2c36 core-prim . condition-accessor) (j2c35 core-prim . condition) (j2c34 core-prim . assertion-violation?) (j2c33 core-prim . condition?) (j2c32 core-prim . utf32->string) (j2c31 core-prim . utf16->string) (j2c30 core-prim . utf8->string) (j2c2f core-prim . uint-list->bytevector) (j2c2e core-prim . u8-list->bytevector) (j2c2d core-prim . string->utf8) (j2c2c core-prim . string->utf32) (j2c2b core-prim . string->utf16) (j2c2a core-prim . sint-list->bytevector) (j2c29 core-prim . native-endianness) (j2c28 core-prim . bytevector?) (j2c27 core-prim . bytevector=?) (j2c26 core-prim . bytevector-uint-set!) (j2c25 core-prim . bytevector-uint-ref) (j2c24 core-prim . bytevector-u8-set!) (j2c23 core-prim . bytevector-u8-ref) (j2c22 core-prim . bytevector-u64-set!) (j2c21 core-prim . bytevector-u64-ref) (j2c20 core-prim . bytevector-u64-native-set!) (j2c1f core-prim . bytevector-u64-native-ref) (j2c1e core-prim . bytevector-u32-set!) (j2c1d core-prim . bytevector-u32-ref) (j2c1c core-prim . bytevector-u32-native-set!) (j2c1b core-prim . bytevector-u32-native-ref) (j2c1a core-prim . bytevector-u16-set!) (j2c19 core-prim . bytevector-u16-ref) (j2c18 core-prim . bytevector-u16-native-set!) (j2c17 core-prim . bytevector-u16-native-ref) (j2c16 core-prim . bytevector-sint-set!) (j2c15 core-prim . bytevector-sint-ref) (j2c14 core-prim . bytevector-s8-set!) (j2c13 core-prim . bytevector-s8-ref) (j2c12 core-prim . bytevector-s64-set!) (j2c11 core-prim . bytevector-s64-ref) (j2c10 core-prim . bytevector-s64-native-set!) (j2c0f core-prim . bytevector-s64-native-ref) (j2c0e core-prim . bytevector-s32-set!) (j2c0d core-prim . bytevector-s32-ref) (j2c0c core-prim . bytevector-s32-native-set!) (j2c0b core-prim . bytevector-s32-native-ref) (j2c0a core-prim . bytevector-s16-set!) (j2c09 core-prim . bytevector-s16-ref) (j2c08 core-prim . bytevector-s16-native-set!) (j2c07 core-prim . bytevector-s16-native-ref) (j2c06 core-prim . bytevector-length) (j2c05 core-prim . bytevector-ieee-single-ref) (j2c04 core-prim . bytevector-ieee-single-set!) (j2c03 core-prim . bytevector-ieee-single-native-set!) (j2c02 core-prim . bytevector-ieee-single-native-ref) (j2c01 core-prim . bytevector-ieee-double-set!) (j2c00 core-prim . bytevector-ieee-double-ref) (j2bff core-prim . bytevector-ieee-double-native-set!) (j2bfe core-prim . bytevector-ieee-double-native-ref) (j2bfd core-prim . bytevector-fill!) (j2bfc core-prim . bytevector-copy!) (j2bfb core-prim . bytevector-copy) (j2bfa core-prim . bytevector->uint-list) (j2bf9 core-prim . bytevector->u8-list) (j2bf8 core-prim . bytevector->sint-list) (j2bf7 core-prim . no-nans-violation?) (j2bf6 core-prim . no-infinities-violation?) (j2bf5 core-prim . make-no-nans-violation) (j2bf4 core-prim . make-no-infinities-violation) (j2bf3 core-prim . real->flonum) (j2bf2 core-prim . flzero?) (j2bf1 core-prim . fltruncate) (j2bf0 core-prim . fltan) (j2bef core-prim . flsqrt) (j2bee core-prim . flsin) (j2bed core-prim . flround) (j2bec core-prim . flpositive?) (j2beb core-prim . flonum?) (j2bea core-prim . flodd?) (j2be9 core-prim . flnumerator) (j2be8 core-prim . flnegative?) (j2be7 core-prim . flnan?) (j2be6 core-prim . flmod0) (j2be5 core-prim . flmod) (j2be4 core-prim . flmin) (j2be3 core-prim . flmax) (j2be2 core-prim . fllog) (j2be1 core-prim . flinteger?) (j2be0 core-prim . flinfinite?) (j2bdf core-prim . flfloor) (j2bde core-prim . flfinite?) (j2bdd core-prim . flexpt) (j2bdc core-prim . flexp) (j2bdb core-prim . fleven?) (j2bda core-prim . fldiv0-and-mod0) (j2bd9 core-prim . fldiv0) (j2bd8 core-prim . fldiv-and-mod) (j2bd7 core-prim . fldiv) (j2bd6 core-prim . fldenominator) (j2bd5 core-prim . flcos) (j2bd4 core-prim . flceiling) (j2bd3 core-prim . flatan) (j2bd2 core-prim . flasin) (j2bd1 core-prim . flacos) (j2bd0 core-prim . flabs) (j2bcf core-prim . fl>?) (j2bce core-prim . fl>=?) (j2bcd core-prim . fl=?) (j2bcc core-prim . fl<?) (j2bcb core-prim . fl<=?) (j2bca core-prim . fl/) (j2bc9 core-prim . fl-) (j2bc8 core-prim . fl+) (j2bc7 core-prim . fl*) (j2bc6 core-prim . fixnum->flonum) (j2bc5 core-prim . fxzero?) (j2bc4 core-prim . fxxor) (j2bc3 core-prim . fxrotate-bit-field) (j2bc2 core-prim . fxreverse-bit-field) (j2bc1 core-prim . fxpositive?) (j2bc0 core-prim . fxodd?) (j2bbf core-prim . fxnot) (j2bbe core-prim . fxnegative?) (j2bbd core-prim . fxmod0) (j2bbc core-prim . fxmod) (j2bbb core-prim . fxmin) (j2bba core-prim . fxmax) (j2bb9 core-prim . fxlength) (j2bb8 core-prim . fxior) (j2bb7 core-prim . fxif) (j2bb6 core-prim . fxfirst-bit-set) (j2bb5 core-prim . fxeven?) (j2bb4 core-prim . fxdiv0-and-mod0) (j2bb3 core-prim . fxdiv0) (j2bb2 core-prim . fxdiv-and-mod) (j2bb1 core-prim . fxdiv) (j2bb0 core-prim . fxcopy-bit-field) (j2baf core-prim . fxcopy-bit) (j2bae core-prim . fxbit-set?) (j2bad core-prim . fxbit-field) (j2bac core-prim . fxbit-count) (j2bab core-prim . fxarithmetic-shift-right) (j2baa core-prim . fxarithmetic-shift-left) (j2ba9 core-prim . fxarithmetic-shift) (j2ba8 core-prim . fxand) (j2ba7 core-prim . fx>?) (j2ba6 core-prim . fx>=?) (j2ba5 core-prim . fx=?) (j2ba4 core-prim . fx<?) (j2ba3 core-prim . fx<=?) (j2ba2 core-prim . fx-/carry) (j2ba1 core-prim . fx-) (j2ba0 core-prim . fx+/carry) (j2b9f core-prim . fx+) (j2b9e core-prim . fx*/carry) (j2b9d core-prim . fx*) (j2b9c core-prim . greatest-fixnum) (j2b9b core-prim . least-fixnum) (j2b9a core-prim . fixnum-width) (j2b99 core-prim . fixnum?) (j2b98 core-prim . bitwise-rotate-bit-field) (j2b97 core-prim . bitwise-reverse-bit-field) (j2b96 core-prim . bitwise-length) (j2b95 core-prim . bitwise-if) (j2b94 core-prim . bitwise-first-bit-set) (j2b93 core-prim . bitwise-copy-bit-field) (j2b92 core-prim . bitwise-copy-bit) (j2b91 core-prim . bitwise-bit-set?) (j2b90 core-prim . bitwise-bit-field) (j2b8f core-prim . bitwise-bit-count) (j2b8e core-prim . bitwise-xor) (j2b8d core-prim . bitwise-ior) (j2b8c core-prim . bitwise-and) (j2b8b core-prim . bitwise-not) (j2b8a core-prim . bitwise-arithmetic-shift-right) (j2b89 core-prim . bitwise-arithmetic-shift-left) (j2b88 core-prim . bitwise-arithmetic-shift) (j2b87 core-prim . zero?) (j2b86 core-prim . vector?) (j2b85 core-prim . vector-set!) (j2b84 core-prim . vector-ref) (j2b83 core-prim . vector-map) (j2b82 core-prim . vector-length) (j2b81 core-prim . vector-for-each) (j2b80 core-prim . vector-fill!) (j2b7f core-prim . vector->list) (j2b7e core-prim . vector) (j2b7d core-prim . values) (j2b7c core-prim . truncate) (j2b7b core-prim . tan) (j2b7a core-prim . symbol?) (j2b79 core-prim . symbol=?) (j2b78 core-prim . symbol->string) (j2b77 core-prim . substring) (j2b76 core-prim . string?) (j2b75 core-prim . string>?) (j2b74 core-prim . string>=?) (j2b73 core-prim . string=?) (j2b72 core-prim . string<?) (j2b71 core-prim . string<=?) (j2b70 core-prim . string-ref) (j2b6f core-prim . string-length) (j2b6e core-prim . string-for-each) (j2b6d core-prim . string-copy) (j2b6c core-prim . string-append) (j2b6b core-prim . string->symbol) (j2b6a core-prim . string->number) (j2b69 core-prim . string->list) (j2b68 core-prim . string) (j2b67 core-prim . sqrt) (j2b66 core-prim . sin) (j2b65 core-prim . round) (j2b64 core-prim . reverse) (j2b63 core-prim . real?) (j2b62 core-prim . real-valued?) (j2b61 core-prim . real-part) (j2b60 core-prim . rationalize) (j2b5f core-prim . rational?) (j2b5e core-prim . rational-valued?) (j2b5d core-prim . procedure?) (j2b5c core-prim . positive?) (j2b5b core-prim . pair?) (j2b5a core-prim . odd?) (j2b59 core-prim . numerator) (j2b58 core-prim . number?) (j2b57 core-prim . number->string) (j2b56 core-prim . null?) (j2b55 core-prim . not) (j2b54 core-prim . negative?) (j2b53 core-prim . nan?) (j2b52 core-prim . min) (j2b51 core-prim . max) (j2b50 core-prim . map) (j2b4f core-prim . make-vector) (j2b4e core-prim . make-string) (j2b4d core-prim . make-rectangular) (j2b4c core-prim . make-polar) (j2b4b core-prim . magnitude) (j2b4a core-prim . log) (j2b49 core-prim . list?) (j2b48 core-prim . list-tail) (j2b47 core-prim . list-ref) (j2b46 core-prim . list->vector) (j2b45 core-prim . list->string) (j2b44 core-prim . list) (j2b43 core-prim . length) (j2b42 core-prim . lcm) (j2b41 core-prim . integer?) (j2b40 core-prim . integer-valued?) (j2b3f core-prim . integer->char) (j2b3e core-prim . infinite?) (j2b3d core-prim . inexact?) (j2b3c core-prim . inexact) (j2b3b core-prim . imag-part) (j2b3a core-prim . gcd) (j2b39 core-prim . for-each) (j2b38 core-prim . floor) (j2b37 core-prim . finite?) (j2b36 core-prim . expt) (j2b35 core-prim . exp) (j2b34 core-prim . exact?) (j2b33 core-prim . exact-integer-sqrt) (j2b32 core-prim . exact) (j2b31 core-prim . even?) (j2b30 core-prim . error) (j2b2f core-prim . eqv?) (j2b2e core-prim . equal?) (j2b2d core-prim . eq?) (j2b2c core-prim . dynamic-wind) (j2b2b core-prim . div0-and-mod0) (j2b2a core-prim . mod0) (j2b29 core-prim . div0) (j2b28 core-prim . div-and-mod) (j2b27 core-prim . mod) (j2b26 core-prim . div) (j2b25 core-prim . denominator) (j2b24 core-prim . cos) (j2b23 core-prim . cons) (j2b22 core-prim . complex?) (j2b21 core-prim . char?) (j2b20 core-prim . char>?) (j2b1f core-prim . char>=?) (j2b1e core-prim . char=?) (j2b1d core-prim . char<?) (j2b1c core-prim . char<=?) (j2b1b core-prim . char->integer) (j2b1a core-prim . ceiling) (j2b19 core-prim . call-with-values) (j2b18 core-prim . call/cc) (j2b17 core-prim . call-with-current-continuation) (j2b16 core-prim . cddddr) (j2b15 core-prim . cdddar) (j2b14 core-prim . cddadr) (j2b13 core-prim . cddaar) (j2b12 core-prim . cdaddr) (j2b11 core-prim . cdadar) (j2b10 core-prim . cdaadr) (j2b0f core-prim . cdaaar) (j2b0e core-prim . cadddr) (j2b0d core-prim . caddar) (j2b0c core-prim . cadadr) (j2b0b core-prim . cadaar) (j2b0a core-prim . caaddr) (j2b09 core-prim . caadar) (j2b08 core-prim . caaadr) (j2b07 core-prim . caaaar) (j2b06 core-prim . cdddr) (j2b05 core-prim . cddar) (j2b04 core-prim . cdadr) (j2b03 core-prim . cdaar) (j2b02 core-prim . caddr) (j2b01 core-prim . cadar) (j2b00 core-prim . caadr) (j2aff core-prim . caaar) (j2afe core-prim . cddr) (j2afd core-prim . cdar) (j2afc core-prim . cadr) (j2afb core-prim . caar) (j2afa core-prim . cdr) (j2af9 core-prim . car) (j2af8 core-prim . boolean?) (j2af7 core-prim . boolean=?) (j2af6 core-prim . atan) (j2af5 core-prim . assertion-violation) (je58 core-prim . assertion-error) (j2af4 core-prim . asin) (j2af3 core-prim . apply) (j2af2 core-prim . append) (j2af1 core-prim . angle) (j2af0 core-prim . acos) (j2aef core-prim . abs) (j2aee core-prim . /) (j2aed core-prim . *) (j2aec core-prim . -) (j2aeb core-prim . +) (j2aea core-prim . >=) (j2ae9 core-prim . >) (j2ae8 core-prim . =) (j2ae7 core-prim . <=) (j2ae6 core-prim . <) (j2ae5 core-prim . library) (j2ae4 $core-rtd &no-nans-rtd &no-nans-rcd) (j2ae3 $core-rtd &no-infinities-rtd &no-infinities-rcd) (j2ae2 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (j2ae1 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (j2ae0 $core-rtd &i/o-port-rtd &i/o-port-rcd) (j2adf $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (j2ade $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (j2add $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (j2adc $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (j2adb $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (j2ada $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (j2ad9 $core-rtd &i/o-write-rtd &i/o-write-rcd) (j2ad8 $core-rtd &i/o-read-rtd &i/o-read-rcd) (j2ad7 $core-rtd &i/o-rtd &i/o-rcd) (j2ad6 $core-rtd &undefined-rtd &undefined-rcd) (j2ad5 $core-rtd &syntax-rtd &syntax-rcd) (j2ad4 $core-rtd &lexical-rtd &lexical-rcd) (j2ad3 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (j2ad2 $core-rtd &non-continuable-rtd &non-continuable-rcd) (j2ad1 $core-rtd &who-rtd &who-rcd) (j2ad0 $core-rtd &irritants-rtd &irritants-rcd) (j2acf $core-rtd &assertion-rtd &assertion-rcd) (j2ace $core-rtd &violation-rtd &violation-rcd) (j2acd $core-rtd &error-rtd &error-rcd) (j2acc $core-rtd &serious-rtd &serious-rcd) (j2acb $core-rtd &warning-rtd &warning-rcd) (j2aca $core-rtd &message-rtd &message-rcd) (j2ac9 $core-rtd &condition-rtd &condition-rcd) (j2ac8 macro . define-condition-type) (j2ac7 macro . define-enumeration) (j2ac6 macro . define-record-type) (j2ac5 macro . parent-rtd) (j2ac4 macro . nongenerative) (j2ac3 macro . opaque) (j2ac2 macro . sealed) (j2ac1 macro . protocol) (j2ac0 macro . parent) (j2abf macro . immutable) (j2abe macro . mutable) (j2abd macro . fields) (j2abc macro . error-handling-mode) (j2abb macro . file-options) (j2aba macro . buffer-mode) (j2ab9 macro . eol-style) (j2ab8 macro . guard) (j2ab7 macro . trace-define) (j2ab6 macro . trace-lambda) (j2ab5 macro . unsyntax-splicing) (j2ab4 macro . unsyntax) (j2ab3 macro . unquote-splicing) (j2ab2 macro . unquote) (j2ab1 macro . _) (j2ab0 macro . else) (j2aaf macro . =>) (j2aae macro . ...) (j2aad macro . assert) (j2aac macro . endianness) (j2aab macro . delay) (j2aaa macro . time) (j2aa9 macro . do) (j2aa8 macro . cond) (j2aa7 macro . let*) (j2aa6 macro . let*-values) (j2aa5 macro . let-values) (j2aa4 macro . identifier-syntax) (j2aa3 macro . with-syntax) (j2aa2 macro . quasisyntax) (j2aa1 macro . quasiquote) (j2aa0 macro . syntax-rules) (j2a9f macro . include) (j2a9e macro . define-struct) (j2a9d core-macro . record-constructor-descriptor) (j2a9c core-macro . record-type-descriptor) (j2a9b macro . case) (j2a9a macro . parameterize) (j2a99 macro . unless) (j2a98 macro . when) (j2a97 core-macro . or) (j2a96 core-macro . and) (j2a95 core-macro . if) (j2a94 core-macro . let) (j2a93 core-macro . letrec*) (j2a92 core-macro . letrec) (j2a91 core-macro . type-descriptor) (j2a90 core-macro . case-lambda) (j2a8f core-macro . lambda) (j2a8e core-macro . syntax) (j2a8d core-macro . syntax-case) (j2a8c core-macro . quote) (j2a8b core-macro . foreign-call) (j2a8a letrec-syntax) (j2a89 let-syntax) (j2a88 set!) (j2a87 import) (j2a86 begin) (j2a85 module) (j2a84 define-syntax) (j2a83 define)) values values '#f '#f '#f '#f) (j992@j7de@install-library 'j2e4a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . j2df1) (eval-core . j2df0) (set-symbol-value! . j2def) (symbol-value . j2dee) (gensym . j2ded) (void . j2dec)) '() values values '#f '#f '#f '#f) (j992@j7de@install-library 'j2e4b '(mosh) '() '() '() '() '((set-symbol-value! . j2def) (symbol-value . j2dee) (regexp? . j2dea) (read-line . j2de9) (ungensym . j2de7) (alist->eq-hash-table . j2de6) (assoc-ref . j2de5) (print . j2de4) (format . j2de3) (host-os . j2de2) (library-path . j7bd) (standard-library-path . j2de1) (file-newer? . j2ddb) (stat-mtime . j2dda) (digit->integer . j2dd6) (call-with-string-input-port . j2dd5) (call-with-string-io . j2dd4) (string-split . j2dd3) (bytevector-for-each . j2dd2) (string->regexp . j2dd1) (rxmatch . j2dd0) (regexp-replace-all . j2dcf) (hashtable-fold-left . j2dce) (hashtable-for-each . j2dcd) (set-current-directory! . j2dc8) (expand-path . j2dc7) (current-directory . j2dc6) (p . j2d87) (get-timeofday . j2d6e) (get-command-line . j2d6d) (sys-display . j2d6c) (whereis . j2d6b) (register . j2d6a) (vm-join! . j2d69) (vm-set-value! . j2d68) (vm? . j2d67) (main-vm? . j2d66) (vm-eval . j2d65) (vm-self . j2d64) (vm-start! . j2d63) (make-vm . j2d62) (mutex-try-lock! . j2d61) (mutex-unlock! . j2d60) (mutex-lock! . j2d5f) (mutex? . j2d5e) (make-mutex . j2d5d) (condition-variable-notify-all! . j2d5c) (condition-variable-notify! . j2d5b) (condition-variable-wait! . j2d5a) (make-condition-variable . j2d59) (write/ss . j2d58) (mosh-executable-path . j2d57) (make-file-options . j2d56) (source-info . j2d55) (make-compiler-instruction . j2d54) (make-instruction . j2d53) (set-source-info! . j2d52) (bignum? . j2d51) (fast-equal? . j2d50) (fasl-read . j2d4f) (fasl-write . j2d4e) (time-usage . j2d4d) (os-constant . j2d4c) (condition-printer . j2d4b) (time . j2aaa) (include . j2a9f)) '() values values '#f '#f '#f '#f) (j992@j7de@install-library 'j2e4c '(system) '() '() '() '() '((gensym-prefix-set! . j2de8) (ssl-supported? . j2de0) (ssl-socket? . j2ddf) (socket-sslize! . j2dde) (%monapi-name-whereis . j2ddd) (%monapi-message-send . j2ddc) (write-to-file . j2dd9) (file->list . j2dd8) (file->string . j2dd7) (mosh-cache-dir . j5a7) (call-process . j2dcc) (local-tz-offset . j2dcb) (microseconds . j2dca) (directory-list . j2dc9) (expand-path . j2dc7) (%spawn . j2dc5) (%waitpid . j2dc4) (simple-struct-name . j2dc3) (simple-struct-set! . j2dc2) (simple-struct-ref . j2dc1) (make-simple-struct . j2dc0) (simple-struct? . j2dbf) (pointer-ref-c-int64 . j2dbe) (pointer-ref-c-int32 . j2dbd) (pointer-ref-c-int16 . j2dbc) (pointer-ref-c-int8 . j2dbb) (pointer-ref-c-uint64 . j2dba) (pointer-ref-c-uint32 . j2db9) (pointer-ref-c-uint16 . j2db8) (pointer-ref-c-uint8 . j2db7) (pointer-set-c-uint64! . j2db6) (pointer-set-c-uint32! . j2db5) (pointer-set-c-uint16! . j2db4) (pointer-set-c-uint8! . j2db3) (pointer-set-c-int64! . j2db2) (pointer-set-c-int32! . j2db1) (pointer-set-c-int16! . j2db0) (pointer-set-c-int8! . j2daf) (pointer-set-c-pointer! . j2dae) (pointer-set-c-double! . j2dad) (pointer-set-c-float! . j2dac) (pointer-set-c-long-long! . j2dab) (pointer-set-c-long! . j2daa) (pointer-set-c-int! . j2da9) (pointer-set-c-short! . j2da8) (pointer-set-c-char! . j2da7) (pointer-ref-c-pointer . j2da6) (pointer-ref-c-double . j2da5) (pointer-ref-c-float . j2da4) (pointer-ref-c-unsigned-long-long . j2da3) (pointer-ref-c-signed-long-long . j2da2) (pointer-ref-c-unsigned-long . j2da1) (pointer-ref-c-signed-long . j2da0) (pointer-ref-c-unsigned-int . j2d9f) (pointer-ref-c-signed-int . j2d9e) (pointer-ref-c-unsigned-short . j2d9d) (pointer-ref-c-signed-short . j2d9c) (pointer-ref-c-unsigned-char . j2d9b) (pointer-ref-c-signed-char . j2d9a) (pointer->integer . j2d99) (integer->pointer . j2d98) (pointer? . j2d97) (shared-errno . j2d96) (%ffi-free-c-callback-trampoline . j2d95) (%ffi-make-c-callback-trampoline . j2d94) (%ffi-free . j2d93) (%ffi-malloc . j2d92) (%ffi-supported? . j2d91) (%ffi-pointer->string . j2d90) (%ffi-call . j2d8f) (%ffi-lookup . j2d8e) (%ffi-open . j2d8d) (null-terminated-utf8->string . j2d8c) (null-terminated-bytevector->string . j2d8b) (%exec . j2d8a) (%fork . j2d89) (%pipe . j2d88) (open-output-string . j2d86) (get-output-string . j2d85) (file-stat-ctime . j2d84) (file-stat-atime . j2d83) (file-stat-mtime . j2d82) (file-size-in-bytes . j2d81) (file-writable? . j2d80) (file-executable? . j2d7f) (file-readable? . j2d7e) (file-regular? . j2d7d) (file-symbolic-link? . j2d7c) (file-directory? . j2d7b) (create-symbolic-link . j2d7a) (rename-file . j2d79) (delete-directory . j2d78) (create-directory . j2d77) (create-mosh-cache-dir . j2d76) (get-environment-variables . j2d75) (current-exception-handler . j2d74) (get-environment-variable . j2d73) (join-wraps . j2d72) (id->real-label . j2d71) (same-marks? . j2d70) (same-marks*? . j2d6f) (disasm . j2d4a) (make-parameter . j5a5) (socket-port . j2d49) (socket-shutdown . j2d48) (socket-close . j2d47) (socket-send . j2d46) (socket-recv! . j2d45) (socket-recv . j2d44) (make-server-socket . j2d43) (make-client-socket . j2d42) (socket-accept . j2d41) (socket? . j2d40) (parameterize . j2a9a)) '() values values '#f '#f '#f '#f)))
(begin (set! j2902@ref (unspecified)) (set! j2904@x* (unspecified)) (set! j2906@add-library-path! (unspecified)) (set! j2908@parse-and-add-library-path (unspecified)) (set! j290a@for-each-with-index (unspecified)) (set! j290c@rpad (unspecified)) (set! j290e@condition-printer/p (unspecified)) (set! j2910@record->field-alist (unspecified)) (set! j2912@map-with-index (unspecified)) (set! j2914@repl (unspecified)) (set! j2916@trace-printer (unspecified)) (set! j2918@command-line (unspecified)) (set! j291a@local-library-path (unspecified)) (set! j291c@load/args (unspecified)) (set! j291e@load (unspecified)) (set! j2920@ironscheme-build (unspecified)) (set! j2922@eval-top-level (unspecified)) (set! j2924@compile-system-libraries (unspecified)) (set! j2926@compile (unspecified)) (set! j2928@compile->closure (unspecified)) (set! j292a@pre-compile-r6rs-file (unspecified)) (set! j292c@load-r6rs-top-level (unspecified)) (set! j292e@load-r6rs-top-level-sexp (unspecified)) (set! j2930@prefix-inc (unspecified)) (set! j2932@prefix-inc! (unspecified)) (set! j2902@ref (lambda (j296d@rtd j296e@i j296f@x) (let ((j2973@val ((record-accessor j296d@rtd j296e@i) j296f@x))) (if (symbol? j2973@val) (ungensym j2973@val) j2973@val)))) (set! j2a69@j2902@ref j2902@ref) (set! j2904@x* '()) (set! j2a6a@j2904@x* j2904@x*) (set! j2906@add-library-path! (lambda (j2975@path) (j982@j7be@library-path (append (j982@j7be@library-path) (list j2975@path))))) (set! j2a6b@j2906@add-library-path! j2906@add-library-path!) (set! j2908@parse-and-add-library-path (lambda (j2977@paths j2978@message) (letrec* ((j297c@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((j297d@t j2977@paths)) (if j297d@t ((lambda (j297f@paths) (for-each (lambda (j2981@path) (if (file-exists? j2981@path) (j2906@add-library-path! (expand-path j2981@path)) (format (current-error-port) j2978@message j2981@path))) (string-split j297f@paths j297c@separator))) j297d@t) (void)))))) (set! j2a6c@j2908@parse-and-add-library-path j2908@parse-and-add-library-path) (set! j290a@for-each-with-index (lambda (j2983@proc j2984@lst) (letrec ((j2987@loop (lambda (j2989@i j298a@lst) (if (null? j298a@lst) (if '#f '#f (void)) (begin (j2983@proc j2989@i (car j298a@lst)) (j2987@loop (+ j2989@i '1) (cdr j298a@lst))))))) (j2987@loop '1 j2984@lst)))) (set! j2a6d@j290a@for-each-with-index j290a@for-each-with-index) (set! j290c@rpad (lambda (j298d@str j298e@pad j298f@n) (let ((j2993@rest (- j298f@n (string-length (format '"~a" j298d@str))))) (let j2999@loop ((j2995@rest j2993@rest) (j2996@ret (format '"~a" j298d@str))) (if (<= j2995@rest '0) j2996@ret (j2999@loop (- j2995@rest '1) (string-append j2996@ret j298e@pad))))))) (set! j2a6e@j290c@rpad j290c@rpad) (set! j290e@condition-printer/p (lambda (j299b@e j299c@port) (letrec* ((j29a0@max-condition-len (apply max (map (lambda (j29b1@c) (string-length (symbol->string (record-type-name (record-rtd j29b1@c))))) (simple-conditions j299b@e))))) (begin (display '" Condition components:\n" j299c@port) (j290a@for-each-with-index (lambda (j29a1@i j29a2@x) (let ((j29a5@rtd (record-rtd j29a2@x)) (j29a6@fields-alist (j2910@record->field-alist j29a2@x))) (begin (format j299c@port '" ~d. ~a" j29a1@i (j290c@rpad (symbol->string (record-type-name j29a5@rtd)) '" " j29a0@max-condition-len)) (if (null? j29a6@fields-alist) (newline j299c@port) (void)) (let j29ad@loop ((j29a9@first '#t) (j29aa@fields-alist j29a6@fields-alist)) (if (null? j29aa@fields-alist) '() (let ((j29af@field (car j29aa@fields-alist))) (begin (if (not j29a9@first) (display (j290c@rpad '"" '" " (+ '4 j29a0@max-condition-len)) j299c@port) (void)) (display '"       " j299c@port) (display (car j29af@field) j299c@port) (display '": " j299c@port) (write (cdr j29af@field) j299c@port) (newline j299c@port) (j29ad@loop '#f (cdr j29aa@fields-alist))))))))) (simple-conditions j299b@e)))))) (set! j2a6f@j290e@condition-printer/p j290e@condition-printer/p) (set! j2910@record->field-alist (lambda (j29b3@r) (letrec* ((j29b6@ref (lambda (j29c1@rtd j29c2@i j29c3@x) (let ((j29c7@val ((record-accessor j29c1@rtd j29c2@i) j29c3@x))) (if (symbol? j29c7@val) (ungensym j29c7@val) j29c7@val))))) (let j29bb@loop ((j29b7@ret '()) (j29b8@rtd (record-rtd j29b3@r))) (if j29b8@rtd (j29bb@loop (append j29b7@ret (j2912@map-with-index (lambda (j29bd@i j29be@field) (cons j29be@field (j29b6@ref j29b8@rtd j29bd@i j29b3@r))) (vector->list (record-type-field-names j29b8@rtd)))) (record-type-parent j29b8@rtd)) j29b7@ret))))) (set! j2a70@j2910@record->field-alist j2910@record->field-alist) (set! j2912@map-with-index (lambda (j29c9@proc j29ca@lst) (let j29d3@loop ((j29cd@i '0) (j29ce@lst j29ca@lst) (j29cf@ret '())) (if (null? j29ce@lst) (reverse j29cf@ret) (j29d3@loop (+ j29cd@i '1) (cdr j29ce@lst) (cons (j29c9@proc j29cd@i (car j29ce@lst)) j29cf@ret)))))) (set! j2a71@j2912@map-with-index j2912@map-with-index) (set! j2914@repl (lambda j29d5@x (letrec* ((j29d8@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (j29db@j29d9) (lambda () (with-exception-handler (lambda (j29dd@e) ((call/cc (lambda (j29df@j29da) (j29db@j29d9 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? j29dd@e) (j290e@condition-printer/p j29dd@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" j29dd@e))) (j29df@j29da (lambda () (raise-continuable j29dd@e)))))))))) (lambda () (let j29e5@loop ((j29e1@line (get-line (current-input-port))) (j29e2@accum '"")) (letrec* ((j29e8@parentheses-ok? (lambda (j29f3@text) (let j29fb@loop ((j29f5@chars (string->list j29f3@text)) (j29f6@p0 '0) (j29f7@p1 '0)) (if (null? j29f5@chars) (= '0 j29f6@p0 j29f7@p1) (let ((j29fd@t (car j29f5@chars))) (if (memv j29fd@t '(#\()) (j29fb@loop (cdr j29f5@chars) (+ j29f6@p0 '1) j29f7@p1) (if (memv j29fd@t '(#\))) (j29fb@loop (cdr j29f5@chars) (- j29f6@p0 '1) j29f7@p1) (if (memv j29fd@t '(#\[)) (j29fb@loop (cdr j29f5@chars) j29f6@p0 (+ j29f7@p1 '1)) (if (memv j29fd@t '(#\])) (j29fb@loop (cdr j29f5@chars) j29f6@p0 (- j29f7@p1 '1)) (j29fb@loop (cdr j29f5@chars) j29f6@p0 j29f7@p1)))))))))) (j29ea@eval-string-print (lambda (j29ed@text) (if (not (or (string=? '"\n" j29ed@text) (= '0 (string-length j29ed@text)))) (call-with-values (lambda () (j2922@eval-top-level (call-with-port (open-string-input-port j29ed@text) read))) (lambda j29ef@out* (for-each (lambda (j29f1@out) (begin (write j29f1@out) (newline))) j29ef@out*))) (void))))) (if (eof-object? j29e1@line) (begin (j29ea@eval-string-print j29e2@accum) (exit)) (let ((j29eb@current (string-append j29e2@accum j29e1@line))) (if (j29e8@parentheses-ok? j29eb@current) (j29ea@eval-string-print j29eb@current) (j29e5@loop (get-line (current-input-port)) j29eb@current)))))))))))) (newline) (j29d8@rec))))) (j29d8@rec)))) (set! j2a72@j2914@repl j2914@repl) (set! j2916@trace-printer (j6c8@j5a6@make-parameter write)) (set! j2a73@j2916@trace-printer j2916@trace-printer) (set! j2918@command-line (j6c8@j5a6@make-parameter (get-command-line))) (set! j2a74@j2918@command-line j2918@command-line) (set! j291a@local-library-path (lambda (j29ff@filename) (j982@j7be@library-path))) (set! j2a75@j291a@local-library-path j291a@local-library-path) (set! j291c@load/args (lambda (j2a01@filename . j2a03@args) (begin (apply j292c@load-r6rs-top-level j2a01@filename 'load j2a03@args) (void)))) (set! j2a76@j291c@load/args j291c@load/args) (set! j291e@load (lambda (j2a05@filename) (begin (apply j292c@load-r6rs-top-level j2a05@filename 'load (j2918@command-line)) (void)))) (set! j2a77@j291e@load j291e@load) (set! j2920@ironscheme-build (lambda () (j291e@load '"ironscheme-buildscript.ss"))) (set! j2a78@j2920@ironscheme-build j2920@ironscheme-build) (set! j2922@eval-top-level (lambda (j2a07@x) (j28df@je3f@eval j2a07@x (j28f6@je6d@interaction-environment)))) (set! j2a79@j2922@eval-top-level j2922@eval-top-level) (set! j2924@compile-system-libraries (lambda () (j2922@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! j2a7a@j2924@compile-system-libraries j2924@compile-system-libraries) (set! j2926@compile (lambda (j2a09@filename) (j292c@load-r6rs-top-level j2a09@filename 'compile))) (set! j2a7b@j2926@compile j2926@compile) (set! j2928@compile->closure (lambda (j2a0b@filename) (j292c@load-r6rs-top-level j2a0b@filename 'closure))) (set! j2a7c@j2928@compile->closure j2928@compile->closure) (set! j292a@pre-compile-r6rs-file (lambda (j2a0d@filename) (j292c@load-r6rs-top-level j2a0d@filename 'compile))) (set! j2a7d@j292a@pre-compile-r6rs-file j292a@pre-compile-r6rs-file) (set! j292c@load-r6rs-top-level (lambda (j2a0f@filename j2a10@how . j2a13@args) (begin (j982@j7be@library-path (j291a@local-library-path j2a0f@filename)) (let ((j2a15@x* (with-input-from-file j2a0f@filename (lambda () (let j2a17@f () (let ((j2a19@x (j6ba@j58a@read-annotated))) (if (eof-object? j2a19@x) '() (cons j2a19@x (j2a17@f))))))))) (let ((j2a1b@t j2a10@how)) (if (memv j2a1b@t '(closure)) (j28f5@je6b@pre-compile-r6rs-top-level j2a15@x*) (if (memv j2a1b@t '(load)) (begin (j2918@command-line (cons j2a0f@filename (car j2a13@args))) (j6c9@j5a8@mosh-cache-dir (create-mosh-cache-dir)) (if (j6c9@j5a8@mosh-cache-dir) (gensym-prefix-set! (j2932@prefix-inc! (string-append (j6c9@j5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (j2a1d@file) ((call/cc (lambda (j2a21@j2a1f) (lambda () (with-exception-handler (lambda (j2a23@c) ((call/cc (lambda (j2a25@j2a20) (j2a21@j2a1f (lambda () (if '#t '#t (j2a25@j2a20 (lambda () (raise-continuable j2a23@c)))))))))) (lambda () (delete-file (string-append (j6c9@j5a8@mosh-cache-dir) '"/" j2a1d@file))))))))) (directory-list (j6c9@j5a8@mosh-cache-dir))) (void)) (let ((j2a27@compiled (j28f4@je69@compile-r6rs-top-level j2a15@x*))) (begin (if (and (j6c9@j5a8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (j986@j7c6@serialize-all j6c3@j59c@serialize-library j71f@j6d8@compile-core-expr) (void)) (j2a27@compiled)))) (if (memv j2a1b@t '(compile)) (begin (j28f4@je69@compile-r6rs-top-level j2a15@x*) (j986@j7c6@serialize-all j6c3@j59c@serialize-library j71f@j6d8@compile-core-expr)) (if '#f '#f (void)))))))))) (set! j2a7e@j292c@load-r6rs-top-level j292c@load-r6rs-top-level) (set! j292e@load-r6rs-top-level-sexp (lambda (j2a29@import-spec j2a2a@thunk) (let ((j2a35@j2a2e j982@j7be@library-path) (j2a36@j2a30 j6c9@j5a8@mosh-cache-dir) (j2a37@j2a32 (j291a@local-library-path '"")) (j2a38@j2a34 (create-mosh-cache-dir))) (let ((j2a3d@swap (lambda () (begin (let ((j2a3f@t (j2a35@j2a2e))) (begin (j2a35@j2a2e j2a37@j2a32) (set! j2a37@j2a32 j2a3f@t))) (let ((j2a41@t (j2a36@j2a30))) (begin (j2a36@j2a30 j2a38@j2a34) (set! j2a38@j2a34 j2a41@t))))))) (dynamic-wind j2a3d@swap (lambda () (begin (if (j6c9@j5a8@mosh-cache-dir) (gensym-prefix-set! (j2932@prefix-inc! (string-append (j6c9@j5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((j2a47@j2a44 j2918@command-line) (j2a48@j2a46 '())) (let ((j2a4b@swap (lambda () (let ((j2a4d@t (j2a47@j2a44))) (begin (j2a47@j2a44 j2a48@j2a46) (set! j2a48@j2a46 j2a4d@t)))))) (dynamic-wind j2a4b@swap (lambda () ((j28f4@je69@compile-r6rs-top-level (list (cons 'import j2a29@import-spec) (list j2a2a@thunk))))) j2a4b@swap))))) j2a3d@swap))))) (set! j2a7f@j292e@load-r6rs-top-level-sexp j292e@load-r6rs-top-level-sexp) (set! j2930@prefix-inc (lambda (j2a4f@prefix-string) (let ((j2a51@prefix (symbol->string j2a4f@prefix-string))) (let ((j2a53@len (string-length j2a51@prefix))) (let j2a5b@loop ((j2a55@i (- j2a53@len '1)) (j2a56@carry? '#t) (j2a57@accum '())) (if (< j2a55@i '0) (string->symbol (list->string (if j2a56@carry? (cons '#\a j2a57@accum) j2a57@accum))) (if j2a56@carry? (let ((j2a5d@next-integer (+ '1 (char->integer (string-ref j2a51@prefix j2a55@i))))) (if (= j2a5d@next-integer '123) (j2a5b@loop (- j2a55@i '1) '#f (cons '#\A j2a57@accum)) (if (= j2a5d@next-integer '91) (j2a5b@loop (- j2a55@i '1) '#t (cons '#\a j2a57@accum)) (j2a5b@loop (- j2a55@i '1) '#f (cons (integer->char j2a5d@next-integer) j2a57@accum))))) (j2a5b@loop (- j2a55@i '1) '#f (cons (string-ref j2a51@prefix j2a55@i) j2a57@accum))))))))) (set! j2a80@j2930@prefix-inc j2930@prefix-inc) (set! j2932@prefix-inc! (lambda (j2a5f@file) (begin (if (not (file-exists? j2a5f@file)) (call-with-output-file j2a5f@file (lambda (j2a61@port) (write 'd j2a61@port))) (void)) (let ((j2a63@prefix (call-with-input-file j2a5f@file read))) (if (main-vm?) (let ((j2a65@next-prefix (j2930@prefix-inc j2a63@prefix))) (begin (call-with-port (open-file-output-port j2a5f@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (j2a67@port) (write j2a65@next-prefix j2a67@port))) j2a63@prefix)) j2a63@prefix))))) (set! j2a81@j2932@prefix-inc! j2932@prefix-inc!) (begin (j987@j7c8@current-precompiled-library-loader j6c4@j59e@load-serialized-library) (set-symbol-value! 'load j291e@load) (set-symbol-value! 'pre-compile-r6rs-file j292a@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs j2922@eval-top-level) (set-symbol-value! 'int-env-syms j28d6@je2d@interaction-environment-symbols) (set-symbol-value! 'expanded2core j71e@j6d6@expanded->core) (set-symbol-value! 'trace-printer j2916@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (j2933@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list j2933@c))))) (j2908@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (j2908@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (j2906@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (j2906@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (j2906@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((j2935@prefix (lambda (j2937@ext j2938@ls) (append (map (lambda (j293b@x) (string-append j2937@ext j293b@x)) j2938@ls) j2938@ls)))) (j983@j7c0@library-extensions (j2935@prefix '".mosh" (j983@j7c0@library-extensions)))) (current-exception-handler (lambda (j293d@c) (begin (if (condition? j293d@c) (j290e@condition-printer/p j293d@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" j293d@c)) j293d@c))) (if ((call/cc (lambda (j2941@j293f) (lambda () (with-exception-handler (lambda (j2943@c) ((call/cc (lambda (j2945@j2940) (j2941@j293f (lambda () (if '#t '#f (j2945@j2940 (lambda () (raise-continuable j2943@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (j292e@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (j2918@command-line)) (let ((j294f@j2948 j2918@command-line) (j2950@j294a j6c9@j5a8@mosh-cache-dir) (j2951@j294c '()) (j2952@j294e (create-mosh-cache-dir))) (let ((j2957@swap (lambda () (begin (let ((j2959@t (j294f@j2948))) (begin (j294f@j2948 j2951@j294c) (set! j2951@j294c j2959@t))) (let ((j295b@t (j2950@j294a))) (begin (j2950@j294a j2952@j294e) (set! j2952@j294e j295b@t))))))) (dynamic-wind j2957@swap (lambda () (begin (if (j6c9@j5a8@mosh-cache-dir) (gensym-prefix-set! (j2932@prefix-inc! (string-append (j6c9@j5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (j2914@repl))) j2957@swap))) (begin (j982@j7be@library-path (j291a@local-library-path (car (j2918@command-line)))) (set! j2904@x* (with-input-from-file (car (j2918@command-line)) (lambda () (let j295d@f () (let ((j295f@x (j6ba@j58a@read-annotated))) (if (eof-object? j295f@x) '() (cons j295f@x (j295d@f)))))))) (j2918@command-line (cons (car (j2918@command-line)) (cdr (j2918@command-line)))) (j6c9@j5a8@mosh-cache-dir (create-mosh-cache-dir)) (if (j6c9@j5a8@mosh-cache-dir) (gensym-prefix-set! (j2932@prefix-inc! (string-append (j6c9@j5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (j2961@file) ((call/cc (lambda (j2965@j2963) (lambda () (with-exception-handler (lambda (j2967@c) ((call/cc (lambda (j2969@j2964) (j2965@j2963 (lambda () (if '#t '#t (j2969@j2964 (lambda () (raise-continuable j2967@c)))))))))) (lambda () (delete-file (string-append (j6c9@j5a8@mosh-cache-dir) '"/" j2961@file))))))))) (directory-list (j6c9@j5a8@mosh-cache-dir))) (void)) (let ((j296b@compiled (j28f4@je69@compile-r6rs-top-level j2904@x*))) (begin (if (and (j6c9@j5a8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (j986@j7c6@serialize-all j6c3@j59c@serialize-library j71f@j6d8@compile-core-expr) (void)) (j296b@compiled))))))))
