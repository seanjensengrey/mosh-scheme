;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! H28c5@library-file-path->cache-path (unspecified)) (set! H28c7@read-annotated (unspecified)) (set! H28c9@annotation-stripped (unspecified)) (set! H28cb@annotation? (unspecified)) (set! H28cd@annotation-source (unspecified)) (set! H28cf@annotation-expression (unspecified)) (set! H28d1@scm->fasl (unspecified)) (set! H28d3@fasl-save (unspecified)) (set! H28d5@fasl-load (unspecified)) (set! H28d7@verbose? (unspecified)) (set! H28d9@serialize-library (unspecified)) (set! H28db@load-serialized-library (unspecified)) (set! H28dd@make-record-printer (unspecified)) (set! H28df@compile-core (unspecified)) (set! H28e1@read-library-source-file (unspecified)) (set! H28e3@make-parameter (unspecified)) (set! H28e5@mosh-cache-dir (unspecified)) (set! H297b@file-options-spec (unspecified)) (set! H28c5@library-file-path->cache-path (lambda (H297c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (H2982@H297f H2983@H2981) (let ((H2986@extract H2983@H2981) (H2987@p H2982@H297f)) (letrec* ((H298b@display-hex (lambda (H2994@n) (if (<= '0 H2994@n '9) (display H2994@n H2987@p) (display (integer->char (+ (char->integer '#\a) (- H2994@n '10))) H2987@p))))) (begin (let H298e@f ((H298c@ls (string-split H297c@x '#\/))) (if (not (null? H298c@ls)) (begin (display '"_" H2987@p) (for-each (lambda (H2990@c) (if (or (char<=? '#\a H2990@c '#\z) (char<=? '#\A H2990@c '#\Z) (char<=? '#\0 H2990@c '#\9) (memv H2990@c '(#\- #\. #\_ #\~))) (display H2990@c H2987@p) (begin (display '"%" H2987@p) (let ((H2992@n (char->integer H2990@c))) (begin (H298b@display-hex (quotient H2992@n '16)) (H298b@display-hex (remainder H2992@n '16))))))) (string->list (car H298c@ls))) (H298e@f (cdr H298c@ls))) (void))) (H2986@extract)))))))) (set! H29f6@H28c5@library-file-path->cache-path H28c5@library-file-path->cache-path) (set! H28c7@read-annotated read) (set! H29f7@H28c7@read-annotated H28c7@read-annotated) (set! H28c9@annotation-stripped (lambda (H2996@x) (H28cf@annotation-expression H2996@x))) (set! H29f8@H28c9@annotation-stripped H28c9@annotation-stripped) (set! H28cb@annotation? (lambda (H2998@x) (source-info H2998@x))) (set! H29f9@H28cb@annotation? H28cb@annotation?) (set! H28cd@annotation-source (lambda (H299a@x) (source-info H299a@x))) (set! H29fa@H28cd@annotation-source H28cd@annotation-source) (set! H28cf@annotation-expression (lambda (H299c@x) (if (pair? H299c@x) (cons (car H299c@x) (cdr H299c@x)) (if (procedure? H299c@x) (set-source-info! H299c@x '#f) H299c@x)))) (set! H29fb@H28cf@annotation-expression H28cf@annotation-expression) (set! H28d1@scm->fasl (lambda (H299e@filename) (string-append (H28e5@mosh-cache-dir) '"/" (H28c5@library-file-path->cache-path H299e@filename) '".mosh-fasl"))) (set! H29fc@H28d1@scm->fasl H28d1@scm->fasl) (set! H28d3@fasl-save (lambda (H29a0@filename H29a1@obj) (call-with-port (open-file-output-port H29a0@filename) (lambda (H29a4@port) ((symbol-value 'fasl-write!) H29a1@obj H29a4@port))))) (set! H29fd@H28d3@fasl-save H28d3@fasl-save) (set! H28d5@fasl-load (lambda (H29a6@filename) (call-with-port (open-file-input-port H29a6@filename) (symbol-value 'fasl-read!)))) (set! H29fe@H28d5@fasl-load H28d5@fasl-load) (set! H28d7@verbose? (symbol-value '%verbose)) (set! H29ff@H28d7@verbose? H28d7@verbose?) (set! H28d9@serialize-library (lambda (H29a8@filename H29a9@obj) (begin (if H28d7@verbose? (format (current-error-port) '"serialize-library ~a\n..." H29a8@filename) (void)) (let ((H29ac@expanded2core (symbol-value 'expanded2core))) (let ((H29ae@compile (symbol-value 'compile-w/o-halt))) (let ((H29b0@code H29a9@obj)) (let ((H29b2@pivot (cddddr (cddddr H29b0@code)))) (let ((H29b4@visit (H29ae@compile (H29ac@expanded2core (car H29b2@pivot))))) (begin (set-car! H29b2@pivot H29b4@visit) (let ((H29b6@pivot (cdr H29b2@pivot))) (let ((H29b8@invoke (H29ae@compile (H29ac@expanded2core (car H29b6@pivot))))) (set-car! H29b6@pivot H29b8@invoke))))))))) (let ((H29ba@fasl-file (H28d1@scm->fasl H29a8@filename))) (begin (if (file-exists? H29ba@fasl-file) (delete-file H29ba@fasl-file) (void)) ((call/cc (lambda (H29be@H29bc) (lambda () (with-exception-handler (lambda (H29c0@c) ((call/cc (lambda (H29c2@H29bd) (H29be@H29bc (lambda () (if '#t (begin (if H28d7@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" H29a8@filename) (void)) (if (file-exists? H29ba@fasl-file) (delete-file H29ba@fasl-file) (void)) '#f) (H29c2@H29bd (lambda () (raise-continuable H29c0@c)))))))))) (lambda () (H28d3@fasl-save H29ba@fasl-file H29a9@obj)))))))))))) (set! H2a00@H28d9@serialize-library H28d9@serialize-library) (set! H28db@load-serialized-library (lambda (H29c4@filename H29c5@obj) (and (H28e5@mosh-cache-dir) (let ((H29c8@fasl-file (H28d1@scm->fasl H29c4@filename))) (if (and (file-exists? H29c8@fasl-file) ((symbol-value 'file-newer?) H29c8@fasl-file H29c4@filename)) (let ((H29ca@expanded2core (symbol-value 'expanded2core))) (let ((H29cc@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((H29ce@code (H28d5@fasl-load H29c8@fasl-file))) (let ((H29d0@pivot (cddddr (cddddr H29ce@code)))) (let ((H29d2@visit (car H29d0@pivot))) (let ((H29d4@visit-proc (lambda () (H29cc@eval-compiled-core H29d2@visit)))) (begin (set-car! H29d0@pivot H29d4@visit-proc) (let ((H29d6@pivot (cdr H29d0@pivot))) (let ((H29d8@invoke (car H29d6@pivot))) (begin (set-car! H29d6@pivot (lambda () (H29cc@eval-compiled-core H29d8@invoke))) (apply H29c5@obj H29ce@code))))))))))) '#f))))) (set! H2a01@H28db@load-serialized-library H28db@load-serialized-library) (set! H28dd@make-record-printer (lambda (H29da@name H29db@printer) (lambda H29de@x (begin (display '"record printer") (for-each display H29de@x))))) (set! H2a02@H28dd@make-record-printer H28dd@make-record-printer) (set! H28df@compile-core (lambda H29e0@x (apply error 'comile-core '"not implementated" H29e0@x))) (set! H2a03@H28df@compile-core H28df@compile-core) (set! H28e1@read-library-source-file (lambda (H29e2@file-name) (with-input-from-file H29e2@file-name H28c7@read-annotated))) (set! H2a04@H28e1@read-library-source-file H28e1@read-library-source-file) (set! H28e3@make-parameter (lambda H29f2 (let ((H29f3 (length H29f2))) (if (= H29f3 '1) (apply (lambda (H29e4@x) (H28e3@make-parameter H29e4@x (lambda (H29e6@x) H29e6@x))) H29f2) (if (= H29f3 '2) (apply (lambda (H29e8@x H29e9@fender) (let ((H29ec@x (H29e9@fender H29e8@x))) (lambda H29f0 (let ((H29f1 (length H29f0))) (if (= H29f1 '0) (apply (lambda () H29ec@x) H29f0) (if (= H29f1 '1) (apply (lambda (H29ee@v) (set! H29ec@x (H29e9@fender H29ee@v))) H29f0) (error 'apply '"invalid arg count"))))))) H29f2) (error 'apply '"invalid arg count")))))) (set! H2a05@H28e3@make-parameter H28e3@make-parameter) (set! H28e5@mosh-cache-dir (H28e3@make-parameter '#f)) (set! H2a06@H28e5@mosh-cache-dir H28e5@mosh-cache-dir) (set! H297b@file-options-spec (lambda (H29f4@x) H29f4@x)) (set! H2a07@H297b@file-options-spec H297b@file-options-spec) (void))
(begin (set! H2a0d@current-primitive-locations (unspecified)) (set! H2a0f@mutable? (unspecified)) (set! H2a11@rewriter (unspecified)) (set! H2a13@expanded->core (unspecified)) (set! H2a15@compile-core-expr (unspecified)) (set! H2a17@pretty-print (unspecified)) (set! H2a19@compile-core-expr-to-port (unspecified)) (set! H2a0d@current-primitive-locations (H2a05@H28e3@make-parameter (lambda (H2a1a@x) '#f) (lambda (H2a1c@p) H2a1c@p))) (set! H2a58@H2a0d@current-primitive-locations H2a0d@current-primitive-locations) (set! H2a0f@mutable? (lambda (H2a1e@x) (or (pair? H2a1e@x) (vector? H2a1e@x) (hashtable? H2a1e@x)))) (set! H2a59@H2a0f@mutable? H2a0f@mutable?) (set! H2a11@rewriter (lambda (H2a20@quote-hack?) (letrec* ((H2a23@f (lambda (H2a24@x) (if (pair? H2a24@x) (let ((H2a26@t (car H2a24@x))) (if (memv H2a26@t '(quote)) (if (and H2a20@quote-hack? (H2a0f@mutable? (cadr H2a24@x))) (let ((H2a28@g (gensym))) (begin (set-symbol-value! H2a28@g (cadr H2a24@x)) H2a28@g)) H2a24@x) (if (memv H2a26@t '(case-lambda)) (cons 'case-lambda (map (lambda (H2a2a@x) (cons (car H2a2a@x) (map H2a23@f (cdr H2a2a@x)))) (cdr H2a24@x))) (if (memv H2a26@t '(lambda)) (cons* 'lambda (cadr H2a24@x) (map H2a23@f (cddr H2a24@x))) (if (memv H2a26@t '(letrec)) (let ((H2a2c@bindings (cadr H2a24@x)) (H2a2d@body* (cddr H2a24@x))) (let ((H2a30@lhs* (map car H2a2c@bindings)) (H2a31@rhs* (map cadr H2a2c@bindings))) (cons* 'letrec (map list H2a30@lhs* (map H2a23@f H2a31@rhs*)) (map H2a23@f H2a2d@body*)))) (if (memv H2a26@t '(letrec*)) (let ((H2a34@bindings (cadr H2a24@x)) (H2a35@body* (cddr H2a24@x))) (let ((H2a38@lhs* (map car H2a34@bindings)) (H2a39@rhs* (map cadr H2a34@bindings))) (cons* 'letrec* (map list H2a38@lhs* (map H2a23@f H2a39@rhs*)) (map H2a23@f H2a35@body*)))) (if (memv H2a26@t '(library-letrec*)) (let ((H2a3c@name (cadr H2a24@x)) (H2a3d@x (cdr H2a24@x))) (let ((H2a40@bindings (cadr H2a3d@x)) (H2a41@body* (cddr H2a3d@x))) (let ((H2a44@lhs* (map car H2a40@bindings)) (H2a45@lhs** (map cadr H2a40@bindings)) (H2a46@rhs* (map caddr H2a40@bindings))) (cons* 'library-letrec* H2a3c@name (map list H2a44@lhs* H2a45@lhs** (map H2a23@f H2a46@rhs*)) (map H2a23@f H2a41@body*))))) (if (memv H2a26@t '(begin)) (cons 'begin (map H2a23@f (cdr H2a24@x))) (if (memv H2a26@t '(set!)) (list 'set! (cadr H2a24@x) (H2a23@f (caddr H2a24@x))) (if (memv H2a26@t '(primitive)) (let ((H2a4a@op (cadr H2a24@x))) (let ((H2a4c@t ((H2a0d@current-primitive-locations) H2a4a@op))) (if H2a4c@t ((lambda (H2a4e@loc) H2a4e@loc) H2a4c@t) H2a4a@op))) (if (memv H2a26@t '(define)) H2a24@x (if (list? H2a24@x) (map H2a23@f H2a24@x) (error 'rewrite '"invalid form ~s ~s" H2a24@x (list? H2a24@x)))))))))))))) H2a24@x)))) H2a23@f))) (set! H2a5a@H2a11@rewriter H2a11@rewriter) (set! H2a13@expanded->core (lambda (H2a50@x) ((H2a11@rewriter '#f) H2a50@x))) (set! H2a5b@H2a13@expanded->core H2a13@expanded->core) (set! H2a15@compile-core-expr (lambda (H2a52@x) ((H2a11@rewriter '#f) H2a52@x))) (set! H2a5c@H2a15@compile-core-expr H2a15@compile-core-expr) (set! H2a17@pretty-print write) (set! H2a5d@H2a17@pretty-print H2a17@pretty-print) (set! H2a19@compile-core-expr-to-port (lambda (H2a54@x H2a55@p) (H2a17@pretty-print ((H2a11@rewriter '#f) H2a54@x) H2a55@p))) (set! H2a5e@H2a19@compile-core-expr-to-port H2a19@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! H2aad@make-collection (unspecified)) (set! H2aaf@current-library-collection (unspecified)) (set! H2ab1@rp (unspecified)) (set! H2abb@library? (unspecified)) (set! H2abd@library-id (unspecified)) (set! H2abf@set-library-id! (unspecified)) (set! H2ac1@library-name (unspecified)) (set! H2ac3@set-library-name! (unspecified)) (set! H2ac5@library-version (unspecified)) (set! H2ac7@set-library-version! (unspecified)) (set! H2ac9@library-imp* (unspecified)) (set! H2acb@set-library-imp*! (unspecified)) (set! H2acd@library-vis* (unspecified)) (set! H2acf@set-library-vis*! (unspecified)) (set! H2ad1@library-inv* (unspecified)) (set! H2ad3@set-library-inv*! (unspecified)) (set! H2ad5@library-subst (unspecified)) (set! H2ad7@set-library-subst! (unspecified)) (set! H2ad9@library-env (unspecified)) (set! H2adb@set-library-env! (unspecified)) (set! H2add@library-visit-state (unspecified)) (set! H2adf@set-library-visit-state! (unspecified)) (set! H2ae1@library-invoke-state (unspecified)) (set! H2ae3@set-library-invoke-state! (unspecified)) (set! H2ae5@library-visit-code (unspecified)) (set! H2ae7@set-library-visit-code! (unspecified)) (set! H2ae9@library-invoke-code (unspecified)) (set! H2aeb@set-library-invoke-code! (unspecified)) (set! H2aed@library-visible? (unspecified)) (set! H2aef@set-library-visible?! (unspecified)) (set! H2af1@library-source-file-name (unspecified)) (set! H2af3@set-library-source-file-name! (unspecified)) (set! H2af5@dummy (unspecified)) (set! H2af7@find-dependencies (unspecified)) (set! H2af9@find-library-by (unspecified)) (set! H2afb@library-path (unspecified)) (set! H2afd@library-extensions (unspecified)) (set! H2aff@library-name->file-name (unspecified)) (set! H2b01@file-locator (unspecified)) (set! H2b03@serialize-all (unspecified)) (set! H2b05@current-precompiled-library-loader (unspecified)) (set! H2b07@try-load-from-file (unspecified)) (set! H2b09@library-loader (unspecified)) (set! H2b0b@current-library-expander (unspecified)) (set! H2b0d@external-pending-libraries (unspecified)) (set! H2b0f@find-external-library (unspecified)) (set! H2b11@find-library-by-name (unspecified)) (set! H2b13@library-exists? (unspecified)) (set! H2b15@find-library-by-spec/die (unspecified)) (set! H2b17@label->binding-table (unspecified)) (set! H2b19@install-library-record (unspecified)) (set! H2b1b@install-library (unspecified)) (set! H2b1d@imported-label->binding (unspecified)) (set! H2b1f@invoke-library (unspecified)) (set! H2b21@visit-library (unspecified)) (set! H2b23@invoke-library-by-spec (unspecified)) (set! H2b25@installed-libraries (unspecified)) (set! H2b27@library-spec (unspecified)) (set! H2aad@make-collection (lambda () (let ((H2b28@set '())) (letrec* ((H2b2b@set-cons (lambda (H2b30@x H2b31@ls) (if (memq H2b30@x H2b31@ls) H2b31@ls (cons H2b30@x H2b31@ls))))) (lambda H2b2e (let ((H2b2f (length H2b2e))) (if (= H2b2f '0) (apply (lambda () H2b28@set) H2b2e) (if (= H2b2f '1) (apply (lambda (H2b2c@x) (set! H2b28@set (H2b2b@set-cons H2b2c@x H2b28@set))) H2b2e) (error 'apply '"invalid arg count"))))))))) (set! H2c9c@H2aad@make-collection H2aad@make-collection) (set! H2aaf@current-library-collection (H2a05@H28e3@make-parameter (H2aad@make-collection) (lambda (H2b34@x) (begin (if (not (procedure? H2b34@x)) (assertion-violation 'current-library-collection '"not a procedure" H2b34@x) (void)) H2b34@x)))) (set! H2c9d@H2aaf@current-library-collection H2aaf@current-library-collection) (set! H2ab1@rp (H2a02@H28dd@make-record-printer 'library (lambda (H2b36@x H2b37@p H2b38@wr) (begin (if (not (H2abb@library? H2b36@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (H2ac5@library-version H2b36@x)) (H2ac1@library-name H2b36@x) (append (H2ac1@library-name H2b36@x) (list (H2ac5@library-version H2b36@x))))) H2b37@p))))) (set! H2c9e@H2ab1@rp H2ab1@rp) (set! H2abb@library? (lambda (H2b3c@x) (and (simple-struct? H2b3c@x) (eq? (simple-struct-name H2b3c@x) 'library)))) (set! H2c9f@H2abb@library? H2abb@library?) (set! H2abd@library-id (lambda (H2b3e@x) (simple-struct-ref H2b3e@x '0))) (set! H2ca0@H2abd@library-id H2abd@library-id) (set! H2abf@set-library-id! (lambda (H2b40@x H2b41@val) (simple-struct-set! H2b40@x '0 H2b41@val))) (set! H2ca1@H2abf@set-library-id! H2abf@set-library-id!) (set! H2ac1@library-name (lambda (H2b44@x) (simple-struct-ref H2b44@x '1))) (set! H2ca2@H2ac1@library-name H2ac1@library-name) (set! H2ac3@set-library-name! (lambda (H2b46@x H2b47@val) (simple-struct-set! H2b46@x '1 H2b47@val))) (set! H2ca3@H2ac3@set-library-name! H2ac3@set-library-name!) (set! H2ac5@library-version (lambda (H2b4a@x) (simple-struct-ref H2b4a@x '2))) (set! H2ca4@H2ac5@library-version H2ac5@library-version) (set! H2ac7@set-library-version! (lambda (H2b4c@x H2b4d@val) (simple-struct-set! H2b4c@x '2 H2b4d@val))) (set! H2ca5@H2ac7@set-library-version! H2ac7@set-library-version!) (set! H2ac9@library-imp* (lambda (H2b50@x) (simple-struct-ref H2b50@x '3))) (set! H2ca6@H2ac9@library-imp* H2ac9@library-imp*) (set! H2acb@set-library-imp*! (lambda (H2b52@x H2b53@val) (simple-struct-set! H2b52@x '3 H2b53@val))) (set! H2ca7@H2acb@set-library-imp*! H2acb@set-library-imp*!) (set! H2acd@library-vis* (lambda (H2b56@x) (simple-struct-ref H2b56@x '4))) (set! H2ca8@H2acd@library-vis* H2acd@library-vis*) (set! H2acf@set-library-vis*! (lambda (H2b58@x H2b59@val) (simple-struct-set! H2b58@x '4 H2b59@val))) (set! H2ca9@H2acf@set-library-vis*! H2acf@set-library-vis*!) (set! H2ad1@library-inv* (lambda (H2b5c@x) (simple-struct-ref H2b5c@x '5))) (set! H2caa@H2ad1@library-inv* H2ad1@library-inv*) (set! H2ad3@set-library-inv*! (lambda (H2b5e@x H2b5f@val) (simple-struct-set! H2b5e@x '5 H2b5f@val))) (set! H2cab@H2ad3@set-library-inv*! H2ad3@set-library-inv*!) (set! H2ad5@library-subst (lambda (H2b62@x) (simple-struct-ref H2b62@x '6))) (set! H2cac@H2ad5@library-subst H2ad5@library-subst) (set! H2ad7@set-library-subst! (lambda (H2b64@x H2b65@val) (simple-struct-set! H2b64@x '6 H2b65@val))) (set! H2cad@H2ad7@set-library-subst! H2ad7@set-library-subst!) (set! H2ad9@library-env (lambda (H2b68@x) (simple-struct-ref H2b68@x '7))) (set! H2cae@H2ad9@library-env H2ad9@library-env) (set! H2adb@set-library-env! (lambda (H2b6a@x H2b6b@val) (simple-struct-set! H2b6a@x '7 H2b6b@val))) (set! H2caf@H2adb@set-library-env! H2adb@set-library-env!) (set! H2add@library-visit-state (lambda (H2b6e@x) (simple-struct-ref H2b6e@x '8))) (set! H2cb0@H2add@library-visit-state H2add@library-visit-state) (set! H2adf@set-library-visit-state! (lambda (H2b70@x H2b71@val) (simple-struct-set! H2b70@x '8 H2b71@val))) (set! H2cb1@H2adf@set-library-visit-state! H2adf@set-library-visit-state!) (set! H2ae1@library-invoke-state (lambda (H2b74@x) (simple-struct-ref H2b74@x '9))) (set! H2cb2@H2ae1@library-invoke-state H2ae1@library-invoke-state) (set! H2ae3@set-library-invoke-state! (lambda (H2b76@x H2b77@val) (simple-struct-set! H2b76@x '9 H2b77@val))) (set! H2cb3@H2ae3@set-library-invoke-state! H2ae3@set-library-invoke-state!) (set! H2ae5@library-visit-code (lambda (H2b7a@x) (simple-struct-ref H2b7a@x '10))) (set! H2cb4@H2ae5@library-visit-code H2ae5@library-visit-code) (set! H2ae7@set-library-visit-code! (lambda (H2b7c@x H2b7d@val) (simple-struct-set! H2b7c@x '10 H2b7d@val))) (set! H2cb5@H2ae7@set-library-visit-code! H2ae7@set-library-visit-code!) (set! H2ae9@library-invoke-code (lambda (H2b80@x) (simple-struct-ref H2b80@x '11))) (set! H2cb6@H2ae9@library-invoke-code H2ae9@library-invoke-code) (set! H2aeb@set-library-invoke-code! (lambda (H2b82@x H2b83@val) (simple-struct-set! H2b82@x '11 H2b83@val))) (set! H2cb7@H2aeb@set-library-invoke-code! H2aeb@set-library-invoke-code!) (set! H2aed@library-visible? (lambda (H2b86@x) (simple-struct-ref H2b86@x '12))) (set! H2cb8@H2aed@library-visible? H2aed@library-visible?) (set! H2aef@set-library-visible?! (lambda (H2b88@x H2b89@val) (simple-struct-set! H2b88@x '12 H2b89@val))) (set! H2cb9@H2aef@set-library-visible?! H2aef@set-library-visible?!) (set! H2af1@library-source-file-name (lambda (H2b8c@x) (simple-struct-ref H2b8c@x '13))) (set! H2cba@H2af1@library-source-file-name H2af1@library-source-file-name) (set! H2af3@set-library-source-file-name! (lambda (H2b8e@x H2b8f@val) (simple-struct-set! H2b8e@x '13 H2b8f@val))) (set! H2cbb@H2af3@set-library-source-file-name! H2af3@set-library-source-file-name!) (set! H2af5@dummy '3) (set! H2cbc@H2af5@dummy H2af5@dummy) (set! H2af7@find-dependencies (lambda (H2b92@ls) (if (null? H2b92@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! H2cbd@H2af7@find-dependencies H2af7@find-dependencies) (set! H2af9@find-library-by (lambda (H2b94@pred) (let H2b98@f ((H2b96@ls ((H2aaf@current-library-collection)))) (if (null? H2b96@ls) '#f (if (H2b94@pred (car H2b96@ls)) (car H2b96@ls) (H2b98@f (cdr H2b96@ls))))))) (set! H2cbe@H2af9@find-library-by H2af9@find-library-by) (set! H2afb@library-path (H2a05@H28e3@make-parameter '(".") (lambda (H2b9a@x) (if (and (list? H2b9a@x) (for-all string? H2b9a@x)) (map (lambda (H2b9c@x) H2b9c@x) H2b9a@x) (assertion-violation 'library-path '"not a list of strings" H2b9a@x))))) (set! H2cbf@H2afb@library-path H2afb@library-path) (set! H2afd@library-extensions (H2a05@H28e3@make-parameter '(".sls" ".ss" ".scm") (lambda (H2b9e@x) (if (and (list? H2b9e@x) (for-all string? H2b9e@x)) (map (lambda (H2ba0@x) H2ba0@x) H2b9e@x) (assertion-violation 'library-extensions '"not a list of strings" H2b9e@x))))) (set! H2cc0@H2afd@library-extensions H2afd@library-extensions) (set! H2aff@library-name->file-name (lambda (H2ba2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (H2ba8@H2ba5 H2ba9@H2ba7) (let ((H2bac@extract H2ba9@H2ba7) (H2bad@p H2ba8@H2ba5)) (letrec* ((H2bb1@display-hex (lambda (H2bba@n) (if (<= '0 H2bba@n '9) (display H2bba@n H2bad@p) (display (integer->char (+ (char->integer '#\a) (- H2bba@n '10))) H2bad@p))))) (begin (let H2bb4@f ((H2bb2@ls H2ba2@x)) (if (not (null? H2bb2@ls)) (begin (display '"/" H2bad@p) (for-each (lambda (H2bb6@c) (if (or (char<=? '#\a H2bb6@c '#\z) (char<=? '#\A H2bb6@c '#\Z) (char<=? '#\0 H2bb6@c '#\9) (memv H2bb6@c '(#\- #\. #\_ #\~))) (display H2bb6@c H2bad@p) (begin (display '"%" H2bad@p) (let ((H2bb8@n (char->integer H2bb6@c))) (begin (H2bb1@display-hex (quotient H2bb8@n '16)) (H2bb1@display-hex (remainder H2bb8@n '16))))))) (string->list (symbol->string (car H2bb2@ls)))) (H2bb4@f (cdr H2bb2@ls))) (void))) (H2bac@extract)))))))) (set! H2cc1@H2aff@library-name->file-name H2aff@library-name->file-name) (set! H2b01@file-locator (H2a05@H28e3@make-parameter (lambda (H2bbc@x) (let ((H2bbe@str (H2aff@library-name->file-name H2bbc@x))) (let H2bc6@f ((H2bc0@ls (H2afb@library-path)) (H2bc1@exts (H2afd@library-extensions)) (H2bc2@failed-list '())) (if (null? H2bc0@ls) (letrec* ((H2bd0@H2bcb (make-record-type-descriptor '&library-resolution &condition-rtd 'H2bce '#f '#f '#((immutable library) (immutable files)))) (H2bd2@H2bcd '#f) (H2bd4@H2bcc (make-record-constructor-descriptor H2bd0@H2bcb &condition-rcd H2bd2@H2bcd)) (H2bd7@H2bca (record-predicate H2bd0@H2bcb)) (H2bd9@make-library-resolution-condition (record-constructor H2bd4@H2bcc)) (H2bdb@H2bc8 (record-accessor H2bd0@H2bcb '0)) (H2bdd@H2bc9 (record-accessor H2bd0@H2bcb '1)) (H2bdf@library-resolution-condition? (condition-predicate H2bd0@H2bcb)) (H2be1@condition-library (condition-accessor H2bd0@H2bcb H2bdb@H2bc8)) (H2be3@condition-files (condition-accessor H2bd0@H2bcb H2bdd@H2bc9))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (H2bd9@make-library-resolution-condition H2bbc@x (reverse H2bc2@failed-list))))) (if (null? H2bc1@exts) (H2bc6@f (cdr H2bc0@ls) (H2afd@library-extensions) H2bc2@failed-list) (let ((H2be4@name (string-append (car H2bc0@ls) H2bbe@str (car H2bc1@exts)))) (if (file-exists? H2be4@name) H2be4@name (H2bc6@f H2bc0@ls (cdr H2bc1@exts) (cons H2be4@name H2bc2@failed-list))))))))) (lambda (H2be6@f) (if (procedure? H2be6@f) H2be6@f (assertion-violation 'file-locator '"not a procedure" H2be6@f))))) (set! H2cc2@H2b01@file-locator H2b01@file-locator) (set! H2b03@serialize-all (lambda (H2be8@serialize H2be9@compile) (letrec* ((H2bed@library-desc (lambda (H2bf0@x) (list (H2abd@library-id H2bf0@x) (H2ac1@library-name H2bf0@x))))) (for-each (lambda (H2bee@x) (if (H2af1@library-source-file-name H2bee@x) (H2be8@serialize (H2af1@library-source-file-name H2bee@x) (list (H2abd@library-id H2bee@x) (H2ac1@library-name H2bee@x) (H2ac5@library-version H2bee@x) (map H2bed@library-desc (H2ac9@library-imp* H2bee@x)) (map H2bed@library-desc (H2acd@library-vis* H2bee@x)) (map H2bed@library-desc (H2ad1@library-inv* H2bee@x)) (H2ad5@library-subst H2bee@x) (H2ad9@library-env H2bee@x) (H2be9@compile (H2ae5@library-visit-code H2bee@x)) (H2be9@compile (H2ae9@library-invoke-code H2bee@x)) (H2aed@library-visible? H2bee@x))) (void))) ((H2aaf@current-library-collection)))))) (set! H2cc3@H2b03@serialize-all H2b03@serialize-all) (set! H2b05@current-precompiled-library-loader (H2a05@H28e3@make-parameter (lambda (H2bf2@filename H2bf3@sk) '#f))) (set! H2cc4@H2b05@current-precompiled-library-loader H2b05@current-precompiled-library-loader) (set! H2b07@try-load-from-file (lambda (H2bf6@filename) ((H2b05@current-precompiled-library-loader) H2bf6@filename (lambda H2c1c (let ((H2c1d (length H2c1c))) (if (= H2c1d '11) (apply (lambda (H2bf8@id H2bf9@name H2bfa@ver H2bfb@imp* H2bfc@vis* H2bfd@inv* H2bfe@exp-subst H2bff@exp-env H2c00@visit-proc H2c01@invoke-proc H2c02@visible?) (let H2c10@f ((H2c0e@deps (append H2bfb@imp* H2bfc@vis* H2bfd@inv*))) (if (null? H2c0e@deps) (begin (H2b1b@install-library H2bf8@id H2bf9@name H2bfa@ver H2bfb@imp* H2bfc@vis* H2bfd@inv* H2bfe@exp-subst H2bff@exp-env H2c00@visit-proc H2c01@invoke-proc '#f '#f H2c02@visible? '#f) '#t) (let ((H2c12@d (car H2c0e@deps))) (let ((H2c14@label (car H2c12@d)) (H2c15@dname (cadr H2c12@d))) (let ((H2c18@l (H2b11@find-library-by-name H2c15@dname))) (if (and (H2abb@library? H2c18@l) (eq? H2c14@label (H2abd@library-id H2c18@l))) (H2c10@f (cdr H2c0e@deps)) (begin (if H29ff@H28d7@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" H2bf9@name H2c15@dname H2bf6@filename H2c18@l H2c14@label (H2abd@library-id H2c18@l)) (void)) '#f)))))))) H2c1c) (if (>= H2c1d '0) (apply (lambda H2c1a@others '#f) H2c1c) (error 'apply '"invalid arg count")))))))) (set! H2cc5@H2b07@try-load-from-file H2b07@try-load-from-file) (set! H2b09@library-loader (H2a05@H28e3@make-parameter (lambda (H2c1e@x) (let ((H2c20@file-name ((H2b01@file-locator) H2c1e@x))) (if (not H2c20@file-name) (assertion-violation '#f '"cannot file library" H2c1e@x) (or (H2b07@try-load-from-file H2c20@file-name) ((H2b0b@current-library-expander) (H2a04@H28e1@read-library-source-file H2c20@file-name) H2c20@file-name (lambda (H2c22@name) (if (not (fast-equal? H2c22@name H2c1e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (H2c28@H2c25 H2c29@H2c27) (let ((H2c2c@e H2c29@H2c27) (H2c2d@p H2c28@H2c25)) (begin (display '"expected to find library " H2c2d@p) (write H2c1e@x H2c2d@p) (display '" in file " H2c2d@p) (display H2c20@file-name H2c2d@p) (display '", found " H2c2d@p) (write H2c22@name H2c2d@p) (display '" instead" H2c2d@p) (H2c2c@e)))))) (void)))))))) (lambda (H2c30@f) (if (procedure? H2c30@f) H2c30@f (assertion-violation 'library-locator '"not a procedure" H2c30@f))))) (set! H2cc6@H2b09@library-loader H2b09@library-loader) (set! H2b0b@current-library-expander (H2a05@H28e3@make-parameter (lambda (H2c32@x) (assertion-violation 'library-expander '"not initialized")) (lambda (H2c34@f) (if (procedure? H2c34@f) H2c34@f (assertion-violation 'library-expander '"not a procedure" H2c34@f))))) (set! H2cc7@H2b0b@current-library-expander H2b0b@current-library-expander) (set! H2b0d@external-pending-libraries (H2a05@H28e3@make-parameter '())) (set! H2cc8@H2b0d@external-pending-libraries H2b0d@external-pending-libraries) (set! H2b0f@find-external-library (lambda (H2c36@name) (begin (if (member H2c36@name (H2b0d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" H2c36@name) (void)) (let ((H2c3c@H2c39 H2b0d@external-pending-libraries) (H2c3d@H2c3b (cons H2c36@name (H2b0d@external-pending-libraries)))) (let ((H2c40@swap (lambda () (let ((H2c42@t (H2c3c@H2c39))) (begin (H2c3c@H2c39 H2c3d@H2c3b) (set! H2c3d@H2c3b H2c42@t)))))) (dynamic-wind H2c40@swap (lambda () (begin ((H2b09@library-loader) H2c36@name) (or (H2af9@find-library-by (lambda (H2c44@x) (fast-equal? (H2ac1@library-name H2c44@x) H2c36@name))) (assertion-violation '#f '"handling external library did not yield the correct library" H2c36@name)))) H2c40@swap)))))) (set! H2cc9@H2b0f@find-external-library H2b0f@find-external-library) (set! H2b11@find-library-by-name (lambda (H2c46@name) (or (H2af9@find-library-by (lambda (H2c48@x) (fast-equal? (H2ac1@library-name H2c48@x) H2c46@name))) (H2b0f@find-external-library H2c46@name)))) (set! H2cca@H2b11@find-library-by-name H2b11@find-library-by-name) (set! H2b13@library-exists? (lambda (H2c4a@name) (and (H2af9@find-library-by (lambda (H2c4c@x) (fast-equal? (H2ac1@library-name H2c4c@x) H2c4a@name))) '#t))) (set! H2ccb@H2b13@library-exists? H2b13@library-exists?) (set! H2b15@find-library-by-spec/die (lambda (H2c4e@spec) (let ((H2c50@id (car H2c4e@spec))) (or (H2af9@find-library-by (lambda (H2c52@x) (eq? H2c50@id (H2abd@library-id H2c52@x)))) (assertion-violation '#f '"cannot find library with required spec" H2c4e@spec))))) (set! H2ccc@H2b15@find-library-by-spec/die H2b15@find-library-by-spec/die) (set! H2b17@label->binding-table (make-eq-hashtable)) (set! H2ccd@H2b17@label->binding-table H2b17@label->binding-table) (set! H2b19@install-library-record (lambda (H2c54@lib) (begin (let ((H2c56@exp-env (H2ad9@library-env H2c54@lib))) (for-each (lambda (H2c58@x) (let ((H2c5a@label (car H2c58@x)) (H2c5b@binding (cdr H2c58@x))) (let ((H2c5e@binding (let ((H2c60@t (car H2c5b@binding))) (if (memv H2c60@t '(global)) (cons 'global (cons H2c54@lib (cdr H2c5b@binding))) (if (memv H2c60@t '(global-macro)) (cons 'global-macro (cons H2c54@lib (cdr H2c5b@binding))) (if (memv H2c60@t '(global-macro!)) (cons 'global-macro! (cons H2c54@lib (cdr H2c5b@binding))) H2c5b@binding)))))) (begin (if (hashtable-ref H2b17@label->binding-table H2c5a@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" H2c5a@label (hashtable-ref H2b17@label->binding-table H2c5a@label '#f) H2c5e@binding) (exit)) (void)) (hashtable-set! H2b17@label->binding-table H2c5a@label H2c5e@binding))))) H2c56@exp-env)) ((H2aaf@current-library-collection) H2c54@lib)))) (set! H2cce@H2b19@install-library-record H2b19@install-library-record) (set! H2b1b@install-library (lambda (H2c62@id H2c63@name H2c64@ver H2c65@imp* H2c66@vis* H2c67@inv* H2c68@exp-subst H2c69@exp-env H2c6a@visit-proc H2c6b@invoke-proc H2c6c@visit-code H2c6d@invoke-code H2c6e@visible? H2c6f@source-file-name) (let ((H2c7e@imp-lib* (map H2b15@find-library-by-spec/die H2c65@imp*)) (H2c7f@vis-lib* (map H2b15@find-library-by-spec/die H2c66@vis*)) (H2c80@inv-lib* (map H2b15@find-library-by-spec/die H2c67@inv*))) (begin (if (not (and (symbol? H2c62@id) (list? H2c63@name) (list? H2c64@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" H2c62@id H2c63@name H2c64@ver) (void)) (if (H2b13@library-exists? H2c63@name) (assertion-violation 'install-library '"library is already installed" H2c63@name) (void)) (let ((H2c84@lib (make-simple-struct 'library '15 (list H2c62@id H2c63@name H2c64@ver H2c7e@imp-lib* H2c7f@vis-lib* H2c80@inv-lib* H2c68@exp-subst H2c69@exp-env H2c6a@visit-proc H2c6b@invoke-proc H2c6c@visit-code H2c6d@invoke-code H2c6e@visible? H2c6f@source-file-name)))) (H2b19@install-library-record H2c84@lib)))))) (set! H2ccf@H2b1b@install-library H2b1b@install-library) (set! H2b1d@imported-label->binding (lambda (H2c86@lab) (hashtable-ref H2b17@label->binding-table H2c86@lab '#f))) (set! H2cd0@H2b1d@imported-label->binding H2b1d@imported-label->binding) (set! H2b1f@invoke-library (lambda (H2c88@lib) (let ((H2c8a@invoke (H2ae1@library-invoke-state H2c88@lib))) (if (procedure? H2c8a@invoke) (begin (H2ae3@set-library-invoke-state! H2c88@lib (lambda () (assertion-violation 'invoke '"circularity detected" H2c88@lib))) (for-each H2b1f@invoke-library (H2ad1@library-inv* H2c88@lib)) (H2ae3@set-library-invoke-state! H2c88@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" H2c88@lib))) (H2c8a@invoke) (H2ae3@set-library-invoke-state! H2c88@lib '#t)) (void))))) (set! H2cd1@H2b1f@invoke-library H2b1f@invoke-library) (set! H2b21@visit-library (lambda (H2c8c@lib) (let ((H2c8e@visit (H2add@library-visit-state H2c8c@lib))) (if (procedure? H2c8e@visit) (begin (H2adf@set-library-visit-state! H2c8c@lib (lambda () (assertion-violation 'visit '"circularity detected" H2c8c@lib))) (for-each H2b1f@invoke-library (H2acd@library-vis* H2c8c@lib)) (H2adf@set-library-visit-state! H2c8c@lib (lambda () (assertion-violation 'invoke '"first visit did not return" H2c8c@lib))) (H2c8e@visit) (H2adf@set-library-visit-state! H2c8c@lib '#t)) (void))))) (set! H2cd2@H2b21@visit-library H2b21@visit-library) (set! H2b23@invoke-library-by-spec (lambda (H2c90@spec) (H2b1f@invoke-library (H2b15@find-library-by-spec/die H2c90@spec)))) (set! H2cd3@H2b23@invoke-library-by-spec H2b23@invoke-library-by-spec) (set! H2b25@installed-libraries (lambda H2c98 (let ((H2c99 (length H2c98))) (if (= H2c99 '1) (apply (lambda (H2c92@all?) (let H2c96@f ((H2c94@ls ((H2aaf@current-library-collection)))) (if (null? H2c94@ls) '() (if (or H2c92@all? (H2aed@library-visible? (car H2c94@ls))) (cons (car H2c94@ls) (H2c96@f (cdr H2c94@ls))) (H2c96@f (cdr H2c94@ls)))))) H2c98) (if (= H2c99 '0) (apply (lambda () (H2b25@installed-libraries '#f)) H2c98) (error 'apply '"invalid arg count")))))) (set! H2cd4@H2b25@installed-libraries H2b25@installed-libraries) (set! H2b27@library-spec (lambda (H2c9a@x) (begin (if (not (H2abb@library? H2c9a@x)) (assertion-violation 'library-spec '"not a library" H2c9a@x) (void)) (list (H2abd@library-id H2c9a@x) (H2ac1@library-name H2c9a@x) (H2ac5@library-version H2c9a@x))))) (set! H2cd5@H2b27@library-spec H2b27@library-spec) (void))
(begin (set! H2cd9@build-global-define (unspecified)) (set! H2d4a@build-lambda (unspecified)) (set! H2d4c@build-case-lambda (unspecified)) (set! H2d7a@build-sequence (unspecified)) (set! H2d7c@build-void (unspecified)) (set! H2d7e@build-letrec (unspecified)) (set! H2d80@build-let (unspecified)) (set! H2d82@build-named-let (unspecified)) (set! H2d84@build-letrec* (unspecified)) (set! H2d86@build-library-letrec* (unspecified)) (set! H2d88@build-receive (unspecified)) (set! H2cd9@build-global-define (lambda (H2d89@x) (H2d7c@build-void))) (set! H2e17@H2cd9@build-global-define H2cd9@build-global-define) (set! H2d4a@build-lambda (lambda (H2d8b@ae H2d8c@vars H2d8d@exp) (list 'lambda H2d8c@vars H2d8d@exp))) (set! H2e18@H2d4a@build-lambda H2d4a@build-lambda) (set! H2d4c@build-case-lambda (lambda (H2d91@ae H2d92@vars* H2d93@exp*) (letrec* ((H2d98@build-error (lambda (H2dcf@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (H2d9a@build-pred (lambda (H2db7@ae H2db8@n H2db9@vars) (call-with-values (lambda () (let H2dc5@f ((H2dc1@vars H2db9@vars) (H2dc2@count '0)) (if (pair? H2dc1@vars) (H2dc5@f (cdr H2dc1@vars) (+ H2dc2@count '1)) (if (null? H2dc1@vars) (values H2dc2@count '=) (values H2dc2@count '>=))))) (lambda (H2dc7@H2dbe H2dc8@H2dc0) (let ((H2dcb@pred H2dc8@H2dc0) (H2dcc@count H2dc7@H2dbe)) (list (list 'primitive H2dcb@pred) H2db8@n (list 'quote H2dcc@count))))))) (H2d9c@build-apply (lambda (H2daf@ae H2db0@g H2db1@vars H2db2@exp) (list '(primitive apply) (H2d4a@build-lambda H2daf@ae H2db1@vars H2db2@exp) H2db0@g))) (H2d9e@expand-case-lambda (lambda (H2d9f@ae H2da0@vars H2da1@exp*) (let ((H2da5@g (gensym)) (H2da6@n (gensym))) (list 'lambda H2da5@g (H2d80@build-let H2d9f@ae (list H2da6@n) (list (list '(primitive length) H2da5@g)) (let H2dad@f ((H2da9@vars* H2d92@vars*) (H2daa@exp* H2da1@exp*)) (if (null? H2da9@vars*) (H2d98@build-error H2d9f@ae) (list 'if (H2d9a@build-pred H2d9f@ae H2da6@n (car H2da9@vars*)) (H2d9c@build-apply H2d9f@ae H2da5@g (car H2da9@vars*) (car H2daa@exp*)) (H2dad@f (cdr H2da9@vars*) (cdr H2daa@exp*))))))))))) (if (= (length H2d93@exp*) '1) (H2d4a@build-lambda H2d91@ae (car H2d92@vars*) (car H2d93@exp*)) (H2d9e@expand-case-lambda H2d91@ae H2d92@vars* H2d93@exp*))))) (set! H2e19@H2d4c@build-case-lambda H2d4c@build-case-lambda) (set! H2d7a@build-sequence (lambda (H2dd1@ae H2dd2@exps) (let H2dd7@loop ((H2dd5@exps H2dd2@exps)) (if (null? (cdr H2dd5@exps)) (car H2dd5@exps) (if (equal? (car H2dd5@exps) (H2d7c@build-void)) (H2dd7@loop (cdr H2dd5@exps)) (cons 'begin H2dd5@exps)))))) (set! H2e1a@H2d7a@build-sequence H2d7a@build-sequence) (set! H2d7c@build-void (lambda () '((primitive void)))) (set! H2e1b@H2d7c@build-void H2d7c@build-void) (set! H2d7e@build-letrec (lambda (H2dd9@ae H2dda@vars H2ddb@val-exps H2ddc@body-exp) (if (null? H2dda@vars) H2ddc@body-exp (list 'letrec (map list H2dda@vars H2ddb@val-exps) H2ddc@body-exp)))) (set! H2e1c@H2d7e@build-letrec H2d7e@build-letrec) (set! H2d80@build-let (lambda (H2de1@ae H2de2@vars H2de3@val-exps H2de4@body-exp) (if (null? H2de2@vars) H2de4@body-exp (list 'let (map list H2de2@vars H2de3@val-exps) H2de4@body-exp)))) (set! H2e1d@H2d80@build-let H2d80@build-let) (set! H2d82@build-named-let (lambda (H2de9@ae H2dea@name H2deb@vars H2dec@val-exps H2ded@body-exp) (list 'let H2dea@name (map list H2deb@vars H2dec@val-exps) H2ded@body-exp))) (set! H2e1e@H2d82@build-named-let H2d82@build-named-let) (set! H2d84@build-letrec* (lambda (H2df3@ae H2df4@vars H2df5@val-exps H2df6@body-exp) (if (null? H2df4@vars) H2df6@body-exp (list 'letrec* (map list H2df4@vars H2df5@val-exps) H2df6@body-exp)))) (set! H2e1f@H2d84@build-letrec* H2d84@build-letrec*) (set! H2d86@build-library-letrec* (lambda (H2dfb@ae H2dfc@name H2dfd@vars H2dfe@locs H2dff@val-exps H2e00@body-exp) (cons 'begin (append (map (lambda (H2e07@var) (cons 'set! (cons H2e07@var '((unspecified))))) H2dfd@vars) (append (apply append (map (lambda (H2e09@var H2e0a@loc H2e0b@val-exp) (list (list 'set! H2e09@var H2e0b@val-exp) (list 'set! H2e0a@loc H2e09@var))) H2dfd@vars H2dfe@locs H2dff@val-exps)) (list H2e00@body-exp)))))) (set! H2e20@H2d86@build-library-letrec* H2d86@build-library-letrec*) (set! H2d88@build-receive (lambda (H2e0f@ae H2e10@vars H2e11@producer H2e12@body*) (begin (display '"************** in ") (cons 'receive (cons H2e10@vars (cons H2e11@producer H2e12@body*)))))) (set! H2e21@H2d88@build-receive H2d88@build-receive) (void))
(begin (set! H2e30@file-options-macro (unspecified)) (set! H2e32@set-cons (unspecified)) (set! H2e34@set-union (unspecified)) (set! H2e39@top-mark* (unspecified)) (set! H2e3b@top-marked? (unspecified)) (set! H2e3d@gen-lexical (unspecified)) (set! H2e3f@gen-global (unspecified)) (set! H2e41@gen-label (unspecified)) (set! H2e43@gen-top-level-label (unspecified)) (set! H2e45@gen-define-label+loc (unspecified)) (set! H2e47@gen-define-label (unspecified)) (set! H2e51@rib? (unspecified)) (set! H2e53@rib-sym* (unspecified)) (set! H2e55@set-rib-sym*! (unspecified)) (set! H2e57@rib-mark** (unspecified)) (set! H2e59@set-rib-mark**! (unspecified)) (set! H2e5b@rib-label* (unspecified)) (set! H2e5d@set-rib-label*! (unspecified)) (set! H2e5f@rib-sealed/freq (unspecified)) (set! H2e61@set-rib-sealed/freq! (unspecified)) (set! H2e63@rib-cache (unspecified)) (set! H2e65@set-rib-cache! (unspecified)) (set! H2e67@dummy (unspecified)) (set! H2e69@make-empty-rib (unspecified)) (set! H2e6b@extend-rib! (unspecified)) (set! H2e6d@extend-rib/nc! (unspecified)) (set! H2e6f@make-rib-map (unspecified)) (set! H2e71@seal-rib! (unspecified)) (set! H2e73@unseal-rib! (unspecified)) (set! H2e75@make-full-rib (unspecified)) (set! H2e77@rp (unspecified)) (set! H2e81@stx? (unspecified)) (set! H2e83@stx-expr (unspecified)) (set! H2e85@set-stx-expr! (unspecified)) (set! H2e87@stx-mark* (unspecified)) (set! H2e89@set-stx-mark*! (unspecified)) (set! H2e8b@stx-subst* (unspecified)) (set! H2e8d@set-stx-subst*! (unspecified)) (set! H2e8f@stx-ae* (unspecified)) (set! H2e91@set-stx-ae*! (unspecified)) (set! H2e93@dummy (unspecified)) (set! H2e95@datum->stx (unspecified)) (set! H2e97@gen-mark (unspecified)) (set! H2e99@anti-mark (unspecified)) (set! H2e9b@anti-mark? (unspecified)) (set! H2e9d@mkstx (unspecified)) (set! H2e9f@add-mark (unspecified)) (set! H2ea1@add-subst (unspecified)) (set! H2ea3@syntax-kind? (unspecified)) (set! H2ea5@syntax-vector->list (unspecified)) (set! H2ea7@syntax-pair? (unspecified)) (set! H2ea9@syntax-vector? (unspecified)) (set! H2eab@syntax-null? (unspecified)) (set! H2ead@syntax-list? (unspecified)) (set! H2eaf@syntax-car (unspecified)) (set! H2eb1@syntax-cdr (unspecified)) (set! H2eb3@syntax->list (unspecified)) (set! H2eb5@id? (unspecified)) (set! H2eb7@id->sym (unspecified)) (set! H2eb9@bound-id=? (unspecified)) (set! H2ebb@free-id=? (unspecified)) (set! H2ebd@valid-bound-ids? (unspecified)) (set! H2ebf@distinct-bound-ids? (unspecified)) (set! H2ec1@bound-id-member? (unspecified)) (set! H2ec3@self-evaluating? (unspecified)) (set! H2ec5@strip-annotations (unspecified)) (set! H2ec7@strip (unspecified)) (set! H2ec9@stx->datum (unspecified)) (set! H2ecb@id->label (unspecified)) (set! H2ecd@label->binding (unspecified)) (set! H2ecf@make-binding (unspecified)) (set! H2ed1@binding-type (unspecified)) (set! H2ed3@binding-value (unspecified)) (set! H2ed5@raise-unbound-error (unspecified)) (set! H2ed7@syntax-type (unspecified)) (set! H2ee5@sanitize-binding (unspecified)) (set! H2ee7@make-variable-transformer (unspecified)) (set! H2ee9@variable-transformer? (unspecified)) (set! H2eeb@variable-transformer-procedure (unspecified)) (set! H2eed@make-eval-transformer (unspecified)) (set! H303e@parse-define (unspecified)) (set! H3040@parse-define-syntax (unspecified)) (set! H3042@scheme-stx-hashtable (unspecified)) (set! H3044@scheme-stx (unspecified)) (set! H3046@lexical-var (unspecified)) (set! H3048@lexical-mutable? (unspecified)) (set! H304a@set-lexical-mutable! (unspecified)) (set! H304c@add-lexical (unspecified)) (set! H304e@add-lexicals (unspecified)) (set! H3050@letrec-helper (unspecified)) (set! H3052@let-transformer (unspecified)) (set! H3054@letrec-transformer (unspecified)) (set! H3056@letrec*-transformer (unspecified)) (set! H3058@fluid-let-syntax-transformer (unspecified)) (set! H305a@type-descriptor-transformer (unspecified)) (set! H305c@record-type-descriptor-transformer (unspecified)) (set! H305e@record-constructor-descriptor-transformer (unspecified)) (set! H3060@when-macro (unspecified)) (set! H3062@unless-macro (unspecified)) (set! H3064@if-transformer (unspecified)) (set! H3066@and-transformer (unspecified)) (set! H3068@or-transformer (unspecified)) (set! H306a@case-macro (unspecified)) (set! H306c@quote-transformer (unspecified)) (set! H306e@case-lambda-transformer (unspecified)) (set! H3070@lambda-transformer (unspecified)) (set! H3072@bless (unspecified)) (set! H3074@with-syntax-macro (unspecified)) (set! H3076@invalid-fmls-error (unspecified)) (set! H3078@let-macro (unspecified)) (set! H307a@let-values-macro (unspecified)) (set! H307c@let*-values-macro (unspecified)) (set! H307e@trace-lambda-macro (unspecified)) (set! H3080@trace-define-macro (unspecified)) (set! H3082@trace-define-syntax-macro (unspecified)) (set! H3084@trace-let/rec-syntax (unspecified)) (set! H3086@trace-let-syntax-macro (unspecified)) (set! H3088@trace-letrec-syntax-macro (unspecified)) (set! H308a@guard-macro (unspecified)) (set! H308c@define-enumeration-macro (unspecified)) (set! H308e@time-macro (unspecified)) (set! H3090@delay-macro (unspecified)) (set! H3092@assert-macro (unspecified)) (set! H3094@endianness-macro (unspecified)) (set! H3096@identifier-syntax-macro (unspecified)) (set! H3098@do-macro (unspecified)) (set! H309a@let*-macro (unspecified)) (set! H309c@or-macro (unspecified)) (set! H309e@and-macro (unspecified)) (set! H30a0@cond-macro (unspecified)) (set! H30a2@do-include (unspecified)) (set! H30a4@include-macro (unspecified)) (set! H30a6@include-into-macro (unspecified)) (set! H30a8@syntax-rules-macro (unspecified)) (set! H30aa@quasiquote-macro (unspecified)) (set! H30ac@quasisyntax-macro (unspecified)) (set! H30ae@define-struct-macro (unspecified)) (set! H30b0@define-record-type-macro (unspecified)) (set! H30b2@define-condition-type-macro (unspecified)) (set! H30b4@incorrect-usage-macro (unspecified)) (set! H30b6@parameterize-macro (unspecified)) (set! H30b8@foreign-call-transformer (unspecified)) (set! H30ba@convert-pattern (unspecified)) (set! H30bc@syntax-dispatch (unspecified)) (set! H30be@ellipsis? (unspecified)) (set! H30c0@underscore? (unspecified)) (set! H30c2@verify-literals (unspecified)) (set! H30c4@syntax-case-transformer (unspecified)) (set! H30c6@ellipsis-map (unspecified)) (set! H30c8@syntax-transformer (unspecified)) (set! H30ca@core-macro-transformer (unspecified)) (set! H30cc@symbol-macro (unspecified)) (set! H30ce@macro-transformer (unspecified)) (set! H30d0@local-macro-transformer (unspecified)) (set! H30d2@do-macro-call (unspecified)) (set! H30d4@chi-macro (unspecified)) (set! H30d6@chi-local-macro (unspecified)) (set! H30d8@chi-global-macro (unspecified)) (set! H30da@chi-expr* (unspecified)) (set! H30dc@chi-application (unspecified)) (set! H30de@chi-expr (unspecified)) (set! H30e0@chi-set! (unspecified)) (set! H30e2@verify-formals (unspecified)) (set! H30e4@chi-lambda-clause (unspecified)) (set! H30e6@chi-lambda-clause* (unspecified)) (set! H30e8@chi-defun (unspecified)) (set! H30ea@chi-rhs (unspecified)) (set! H30ec@expand-interaction-rhs*/init* (unspecified)) (set! H30ee@chi-rhs* (unspecified)) (set! H30f0@find-bound=? (unspecified)) (set! H30f2@find-dups (unspecified)) (set! H30f4@chi-internal (unspecified)) (set! H30f6@parse-module (unspecified)) (set! H3100@module-interface? (unspecified)) (set! H3102@module-interface-first-mark (unspecified)) (set! H3104@set-module-interface-first-mark! (unspecified)) (set! H3106@module-interface-exp-id-vec (unspecified)) (set! H3108@set-module-interface-exp-id-vec! (unspecified)) (set! H310a@module-interface-exp-lab-vec (unspecified)) (set! H310c@set-module-interface-exp-lab-vec! (unspecified)) (set! H310e@dummy (unspecified)) (set! H3110@module-interface-exp-id* (unspecified)) (set! H3112@chi-internal-module (unspecified)) (set! H3114@chi-body* (unspecified)) (set! H3116@expand-transformer (unspecified)) (set! H3118@parse-exports (unspecified)) (set! H311a@parse-library-name (unspecified)) (set! H311c@parse-library (unspecified)) (set! H311e@parse-import-spec* (unspecified)) (set! H3120@make-top-rib (unspecified)) (set! H3122@make-collector (unspecified)) (set! H3124@inv-collector (unspecified)) (set! H3126@vis-collector (unspecified)) (set! H3128@imp-collector (unspecified)) (set! H312a@chi-library-internal (unspecified)) (set! H312c@chi-interaction-expr (unspecified)) (set! H312e@library-body-expander (unspecified)) (set! H3130@core-library-expander (unspecified)) (set! H3132@parse-top-level-program (unspecified)) (set! H3134@top-level-expander (unspecified)) (set! H3136@rp (unspecified)) (set! H3140@env? (unspecified)) (set! H3142@env-names (unspecified)) (set! H3144@set-env-names! (unspecified)) (set! H3146@env-labels (unspecified)) (set! H3148@set-env-labels! (unspecified)) (set! H314a@env-itc (unspecified)) (set! H314c@set-env-itc! (unspecified)) (set! H314e@dummy (unspecified)) (set! H3150@rp (unspecified)) (set! H315a@interaction-env? (unspecified)) (set! H315c@interaction-env-rib (unspecified)) (set! H315e@set-interaction-env-rib! (unspecified)) (set! H3160@interaction-env-r (unspecified)) (set! H3162@set-interaction-env-r! (unspecified)) (set! H3164@interaction-env-locs (unspecified)) (set! H3166@set-interaction-env-locs! (unspecified)) (set! H3168@dummy (unspecified)) (set! H316a@interaction-environment-symbols (unspecified)) (set! H316c@environment-bindings (unspecified)) (set! H316e@parse-binding (unspecified)) (set! H3170@environment? (unspecified)) (set! H3172@environment-symbols (unspecified)) (set! H3174@environment (unspecified)) (set! H3176@null-environment (unspecified)) (set! H3178@scheme-report-environment (unspecified)) (set! H317a@expand (unspecified)) (set! H317c@eval (unspecified)) (set! H317e@library-expander (unspecified)) (set! H3180@boot-library-expand (unspecified)) (set! H3182@rev-map-append (unspecified)) (set! H3184@build-exports (unspecified)) (set! H3186@make-export-subst (unspecified)) (set! H3188@make-export-env/macros (unspecified)) (set! H318a@generate-temporaries (unspecified)) (set! H318c@free-identifier=? (unspecified)) (set! H318e@bound-identifier=? (unspecified)) (set! H3190@make-source-condition (unspecified)) (set! H3192@extract-position-condition (unspecified)) (set! H3194@expression-position (unspecified)) (set! H3196@assertion-error (unspecified)) (set! H3198@syntax-error (unspecified)) (set! H319a@syntax-violation* (unspecified)) (set! H319c@syntax-violation (unspecified)) (set! H319e@identifier? (unspecified)) (set! H31a0@datum->syntax (unspecified)) (set! H31a2@syntax->datum (unspecified)) (set! H31a4@ungensym-all (unspecified)) (set! H31a6@compile-r6rs-top-level (unspecified)) (set! H31a8@pre-compile-r6rs-top-level (unspecified)) (set! H31aa@interaction-environment (unspecified)) (set! H31ac@top-level-context (unspecified)) (set! H2e30@file-options-macro (lambda (H31ad@x) (letrec* ((H31b0@valid-option? (lambda (H31b9@x) (and (H2eb5@id? H31b9@x) (memq (H2eb7@id->sym H31b9@x) '(no-fail no-create no-truncate)))))) (let ((H31b1@t H31ad@x)) (let ((H31b3@ls/false (H30bc@syntax-dispatch H31b1@t '(_ . each-any)))) (if (and H31b3@ls/false (apply (lambda (H31b5@opt*) (for-all H31b0@valid-option? H31b5@opt*)) H31b3@ls/false)) (apply (lambda (H31b7@opt*) (H3072@bless (list 'make-file-options (list 'quote H31b7@opt*)))) H31b3@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H31b1@t))))))) (set! H4b03@H2e30@file-options-macro H2e30@file-options-macro) (set! H2e32@set-cons (lambda (H31bb@x H31bc@ls) (if (memq H31bb@x H31bc@ls) H31bc@ls (cons H31bb@x H31bc@ls)))) (set! H4b04@H2e32@set-cons H2e32@set-cons) (set! H2e34@set-union (lambda (H31bf@ls1 H31c0@ls2) (if (null? H31bf@ls1) H31c0@ls2 (if (memq (car H31bf@ls1) H31c0@ls2) (H2e34@set-union (cdr H31bf@ls1) H31c0@ls2) (cons (car H31bf@ls1) (H2e34@set-union (cdr H31bf@ls1) H31c0@ls2)))))) (set! H4b05@H2e34@set-union H2e34@set-union) (set! H2e39@top-mark* '(top)) (set! H4b06@H2e39@top-mark* H2e39@top-mark*) (set! H2e3b@top-marked? (lambda (H31c3@m*) (memq 'top H31c3@m*))) (set! H4b07@H2e3b@top-marked? H2e3b@top-marked?) (set! H2e3d@gen-lexical (lambda (H31c5@sym) (if (symbol? H31c5@sym) (gensym H31c5@sym) (if (H2e81@stx? H31c5@sym) (H2e3d@gen-lexical (H2eb7@id->sym H31c5@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" H31c5@sym))))) (set! H4b08@H2e3d@gen-lexical H2e3d@gen-lexical) (set! H2e3f@gen-global (lambda (H31c7@x) (H2e3d@gen-lexical H31c7@x))) (set! H4b09@H2e3f@gen-global H2e3f@gen-global) (set! H2e41@gen-label (lambda (H31c9@_) (gensym))) (set! H4b0a@H2e41@gen-label H2e41@gen-label) (set! H2e43@gen-top-level-label (lambda (H31cb@id H31cc@rib) (letrec* ((H31d0@find (lambda (H31db@sym H31dc@mark* H31dd@sym* H31de@mark** H31df@label*) (and (pair? H31dd@sym*) (if (and (eq? H31db@sym (car H31dd@sym*)) (same-marks? H31dc@mark* (car H31de@mark**))) (car H31df@label*) (H31d0@find H31db@sym H31dc@mark* (cdr H31dd@sym*) (cdr H31de@mark**) (cdr H31df@label*))))))) (let ((H31d1@sym (H2eb7@id->sym H31cb@id)) (H31d2@mark* (H2e87@stx-mark* H31cb@id))) (let ((H31d5@sym* (H2e53@rib-sym* H31cc@rib))) (let ((H31d7@t (and (memq H31d1@sym (H2e53@rib-sym* H31cc@rib)) (H31d0@find H31d1@sym H31d2@mark* H31d5@sym* (H2e57@rib-mark** H31cc@rib) (H2e5b@rib-label* H31cc@rib))))) (if H31d7@t ((lambda (H31d9@label) (if (H2cd0@H2b1d@imported-label->binding H31d9@label) (gensym) H31d9@label)) H31d7@t) (gensym)))))))) (set! H4b0b@H2e43@gen-top-level-label H2e43@gen-top-level-label) (set! H2e45@gen-define-label+loc (lambda (H31e5@id H31e6@rib) (let ((H31e9@t (H31ac@top-level-context))) (if H31e9@t ((lambda (H31eb@env) (let ((H31ed@label (H2e43@gen-top-level-label H31e5@id H31e6@rib)) (H31ee@locs (H3164@interaction-env-locs H31eb@env))) (values H31ed@label (let ((H31f1@t (assq H31ed@label H31ee@locs))) (if H31f1@t (cdr H31f1@t) (let ((H31f3@loc (H2e3d@gen-lexical H31e5@id))) (begin (H3166@set-interaction-env-locs! H31eb@env (cons (cons H31ed@label H31f3@loc) H31ee@locs)) H31f3@loc))))))) H31e9@t) (values (gensym) (H2e3d@gen-lexical H31e5@id)))))) (set! H4b0c@H2e45@gen-define-label+loc H2e45@gen-define-label+loc) (set! H2e47@gen-define-label (lambda (H31f5@id H31f6@rib) (if (H31ac@top-level-context) (H2e43@gen-top-level-label H31f5@id H31f6@rib) (gensym)))) (set! H4b0d@H2e47@gen-define-label H2e47@gen-define-label) (set! H2e51@rib? (lambda (H31f9@x) (and (simple-struct? H31f9@x) (eq? (simple-struct-name H31f9@x) 'rib)))) (set! H4b0e@H2e51@rib? H2e51@rib?) (set! H2e53@rib-sym* (lambda (H31fb@x) (simple-struct-ref H31fb@x '0))) (set! H4b0f@H2e53@rib-sym* H2e53@rib-sym*) (set! H2e55@set-rib-sym*! (lambda (H31fd@x H31fe@val) (simple-struct-set! H31fd@x '0 H31fe@val))) (set! H4b10@H2e55@set-rib-sym*! H2e55@set-rib-sym*!) (set! H2e57@rib-mark** (lambda (H3201@x) (simple-struct-ref H3201@x '1))) (set! H4b11@H2e57@rib-mark** H2e57@rib-mark**) (set! H2e59@set-rib-mark**! (lambda (H3203@x H3204@val) (simple-struct-set! H3203@x '1 H3204@val))) (set! H4b12@H2e59@set-rib-mark**! H2e59@set-rib-mark**!) (set! H2e5b@rib-label* (lambda (H3207@x) (simple-struct-ref H3207@x '2))) (set! H4b13@H2e5b@rib-label* H2e5b@rib-label*) (set! H2e5d@set-rib-label*! (lambda (H3209@x H320a@val) (simple-struct-set! H3209@x '2 H320a@val))) (set! H4b14@H2e5d@set-rib-label*! H2e5d@set-rib-label*!) (set! H2e5f@rib-sealed/freq (lambda (H320d@x) (simple-struct-ref H320d@x '3))) (set! H4b15@H2e5f@rib-sealed/freq H2e5f@rib-sealed/freq) (set! H2e61@set-rib-sealed/freq! (lambda (H320f@x H3210@val) (simple-struct-set! H320f@x '3 H3210@val))) (set! H4b16@H2e61@set-rib-sealed/freq! H2e61@set-rib-sealed/freq!) (set! H2e63@rib-cache (lambda (H3213@x) (simple-struct-ref H3213@x '4))) (set! H4b17@H2e63@rib-cache H2e63@rib-cache) (set! H2e65@set-rib-cache! (lambda (H3215@x H3216@val) (simple-struct-set! H3215@x '4 H3216@val))) (set! H4b18@H2e65@set-rib-cache! H2e65@set-rib-cache!) (set! H2e67@dummy '3) (set! H4b19@H2e67@dummy H2e67@dummy) (set! H2e69@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! H4b1a@H2e69@make-empty-rib H2e69@make-empty-rib) (set! H2e6b@extend-rib! (lambda (H3219@rib H321a@id H321b@label) (letrec* ((H3220@find (lambda (H322d@sym H322e@mark* H322f@sym* H3230@mark** H3231@label*) (and (pair? H322f@sym*) (if (and (eq? H322d@sym (car H322f@sym*)) (same-marks? H322e@mark* (car H3230@mark**))) H3231@label* (H3220@find H322d@sym H322e@mark* (cdr H322f@sym*) (cdr H3230@mark**) (cdr H3231@label*))))))) (begin (if (H2e5f@rib-sealed/freq H3219@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" H3219@rib) (void)) (let ((H3221@sym (H2eb7@id->sym H321a@id)) (H3222@mark* (H2e87@stx-mark* H321a@id))) (let ((H3225@sym* (H2e53@rib-sym* H3219@rib))) (let ((H3227@t (and (memq H3221@sym (H2e53@rib-sym* H3219@rib)) (H3220@find H3221@sym H3222@mark* H3225@sym* (H2e57@rib-mark** H3219@rib) (H2e5b@rib-label* H3219@rib))))) (if H3227@t ((lambda (H3229@p) (if (not (eq? H321b@label (car H3229@p))) (if (H31ac@top-level-context) (set-car! H3229@p H321b@label) (H319c@syntax-violation '#f '"multiple definitions of identifier" H321a@id)) (void))) H3227@t) (begin (if (H2e63@rib-cache H3219@rib) (hashtable-update! (H2e63@rib-cache H3219@rib) H3221@sym (lambda (H322b@e) (cons (cons H3222@mark* H321b@label) H322b@e)) '()) (void)) (H2e55@set-rib-sym*! H3219@rib (cons H3221@sym H3225@sym*)) (H2e59@set-rib-mark**! H3219@rib (cons H3222@mark* (H2e57@rib-mark** H3219@rib))) (H2e5d@set-rib-label*! H3219@rib (cons H321b@label (H2e5b@rib-label* H3219@rib)))))))))))) (set! H4b1b@H2e6b@extend-rib! H2e6b@extend-rib!) (set! H2e6d@extend-rib/nc! (lambda (H3237@rib H3238@id H3239@label) (let ((H323d@sym (H2eb7@id->sym H3238@id)) (H323e@mark* (H2e87@stx-mark* H3238@id))) (let ((H3241@sym* (H2e53@rib-sym* H3237@rib))) (begin (if (H2e63@rib-cache H3237@rib) (hashtable-update! (H2e63@rib-cache H3237@rib) H323d@sym (lambda (H3243@e) (cons (cons H323e@mark* H3239@label) H3243@e)) '()) (void)) (H2e55@set-rib-sym*! H3237@rib (cons H323d@sym H3241@sym*)) (H2e59@set-rib-mark**! H3237@rib (cons H323e@mark* (H2e57@rib-mark** H3237@rib))) (H2e5d@set-rib-label*! H3237@rib (cons H3239@label (H2e5b@rib-label* H3237@rib)))))))) (set! H4b1c@H2e6d@extend-rib/nc! H2e6d@extend-rib/nc!) (set! H2e6f@make-rib-map (lambda (H3245@sym*) (let ((H3247@ht (make-eq-hashtable))) (let H324d@f ((H3249@i '0) (H324a@sym* H3245@sym*)) (if (null? H324a@sym*) H3247@ht (begin (hashtable-update! H3247@ht (car H324a@sym*) (lambda (H324f@x) (cons H3249@i H324f@x)) '()) (H324d@f (+ H3249@i '1) (cdr H324a@sym*)))))))) (set! H4b1d@H2e6f@make-rib-map H2e6f@make-rib-map) (set! H2e71@seal-rib! (lambda (H3251@rib) (let ((H3253@sym* (H2e53@rib-sym* H3251@rib))) (if (not (null? H3253@sym*)) (begin (H2e55@set-rib-sym*! H3251@rib (list->vector H3253@sym*)) (H2e59@set-rib-mark**! H3251@rib (list->vector (H2e57@rib-mark** H3251@rib))) (H2e5d@set-rib-label*! H3251@rib (list->vector (H2e5b@rib-label* H3251@rib))) (H2e61@set-rib-sealed/freq! H3251@rib (H2e6f@make-rib-map H3253@sym*))) (void))))) (set! H4b1e@H2e71@seal-rib! H2e71@seal-rib!) (set! H2e73@unseal-rib! (lambda (H3255@rib) (if (H2e5f@rib-sealed/freq H3255@rib) (begin (H2e61@set-rib-sealed/freq! H3255@rib '#f) (H2e55@set-rib-sym*! H3255@rib (vector->list (H2e53@rib-sym* H3255@rib))) (H2e59@set-rib-mark**! H3255@rib (vector->list (H2e57@rib-mark** H3255@rib))) (H2e5d@set-rib-label*! H3255@rib (vector->list (H2e5b@rib-label* H3255@rib)))) (void)))) (set! H4b1f@H2e73@unseal-rib! H2e73@unseal-rib!) (set! H2e75@make-full-rib (lambda (H3257@id* H3258@label*) (let ((H325b@r (make-simple-struct 'rib '6 (list (map H2eb7@id->sym H3257@id*) (map H2e87@stx-mark* H3257@id*) H3258@label* '#f '#f)))) (begin (H2e71@seal-rib! H325b@r) H325b@r)))) (set! H4b20@H2e75@make-full-rib H2e75@make-full-rib) (set! H2e77@rp (H2a02@H28dd@make-record-printer 'stx (lambda (H325d@x H325e@p H325f@wr) (begin (display '"#<syntax " H325e@p) (write (H2ec9@stx->datum H325d@x) H325e@p) (let ((H3263@expr (H2e83@stx-expr H325d@x))) (if (H29f9@H28cb@annotation? H3263@expr) (let ((H3265@src (H29fa@H28cd@annotation-source H3263@expr))) (if (pair? H3265@src) (begin (display '" [" H325e@p) (display (cdr H3265@src) H325e@p) (display '" of " H325e@p) (display (car H3265@src) H325e@p) (display '"]" H325e@p)) (void))) (void))) (display '">" H325e@p))))) (set! H4b21@H2e77@rp H2e77@rp) (set! H2e81@stx? (lambda (H3267@x) (and (simple-struct? H3267@x) (eq? (simple-struct-name H3267@x) 'stx)))) (set! H4b22@H2e81@stx? H2e81@stx?) (set! H2e83@stx-expr (lambda (H3269@x) (simple-struct-ref H3269@x '0))) (set! H4b23@H2e83@stx-expr H2e83@stx-expr) (set! H2e85@set-stx-expr! (lambda (H326b@x H326c@val) (simple-struct-set! H326b@x '0 H326c@val))) (set! H4b24@H2e85@set-stx-expr! H2e85@set-stx-expr!) (set! H2e87@stx-mark* (lambda (H326f@x) (simple-struct-ref H326f@x '1))) (set! H4b25@H2e87@stx-mark* H2e87@stx-mark*) (set! H2e89@set-stx-mark*! (lambda (H3271@x H3272@val) (simple-struct-set! H3271@x '1 H3272@val))) (set! H4b26@H2e89@set-stx-mark*! H2e89@set-stx-mark*!) (set! H2e8b@stx-subst* (lambda (H3275@x) (simple-struct-ref H3275@x '2))) (set! H4b27@H2e8b@stx-subst* H2e8b@stx-subst*) (set! H2e8d@set-stx-subst*! (lambda (H3277@x H3278@val) (simple-struct-set! H3277@x '2 H3278@val))) (set! H4b28@H2e8d@set-stx-subst*! H2e8d@set-stx-subst*!) (set! H2e8f@stx-ae* (lambda (H327b@x) (simple-struct-ref H327b@x '3))) (set! H4b29@H2e8f@stx-ae* H2e8f@stx-ae*) (set! H2e91@set-stx-ae*! (lambda (H327d@x H327e@val) (simple-struct-set! H327d@x '3 H327e@val))) (set! H4b2a@H2e91@set-stx-ae*! H2e91@set-stx-ae*!) (set! H2e93@dummy '3) (set! H4b2b@H2e93@dummy H2e93@dummy) (set! H2e95@datum->stx (lambda (H3281@id H3282@datum) (make-simple-struct 'stx '5 (list H3282@datum (H2e87@stx-mark* H3281@id) (H2e8b@stx-subst* H3281@id) (H2e8f@stx-ae* H3281@id))))) (set! H4b2c@H2e95@datum->stx H2e95@datum->stx) (set! H2e97@gen-mark (lambda () (string '#\m))) (set! H4b2d@H2e97@gen-mark H2e97@gen-mark) (set! H2e99@anti-mark '#f) (set! H4b2e@H2e99@anti-mark H2e99@anti-mark) (set! H2e9b@anti-mark? not) (set! H4b2f@H2e9b@anti-mark? H2e9b@anti-mark?) (set! H2e9d@mkstx (lambda (H3285@e H3286@m* H3287@s* H3288@ae*) (if (and (H2e81@stx? H3285@e) (not (H2e3b@top-marked? H3286@m*))) (call-with-values (lambda () (join-wraps H3286@m* H3287@s* H3288@ae* H3285@e)) (lambda (H3293@H328e H3294@H3290 H3295@H3292) (let ((H3299@ae* H3295@H3292) (H329a@s* H3294@H3290) (H329b@m* H3293@H328e)) (make-simple-struct 'stx '5 (list (H2e83@stx-expr H3285@e) H329b@m* H329a@s* H3299@ae*))))) (make-simple-struct 'stx '5 (list H3285@e H3286@m* H3287@s* H3288@ae*))))) (set! H4b30@H2e9d@mkstx H2e9d@mkstx) (set! H2e9f@add-mark (lambda (H329f@m H32a0@e H32a1@ae) (H2e9d@mkstx H32a0@e (list H329f@m) '(shift) (list H32a1@ae)))) (set! H4b31@H2e9f@add-mark H2e9f@add-mark) (set! H2ea1@add-subst (lambda (H32a5@subst H32a6@e) (H2e9d@mkstx H32a6@e '() (list H32a5@subst) '()))) (set! H4b32@H2ea1@add-subst H2ea1@add-subst) (set! H2ea3@syntax-kind? (lambda (H32a9@x H32aa@p?) (if (H2e81@stx? H32a9@x) (H2ea3@syntax-kind? (H2e83@stx-expr H32a9@x) H32aa@p?) (if (H29f9@H28cb@annotation? H32a9@x) (H2ea3@syntax-kind? (H29fb@H28cf@annotation-expression H32a9@x) H32aa@p?) (H32aa@p? H32a9@x))))) (set! H4b33@H2ea3@syntax-kind? H2ea3@syntax-kind?) (set! H2ea5@syntax-vector->list (lambda (H32ad@x) (if (H2e81@stx? H32ad@x) (let ((H32af@ls (H2ea5@syntax-vector->list (H2e83@stx-expr H32ad@x))) (H32b0@m* (H2e87@stx-mark* H32ad@x)) (H32b1@s* (H2e8b@stx-subst* H32ad@x)) (H32b2@ae* (H2e8f@stx-ae* H32ad@x))) (map (lambda (H32b7@x) (H2e9d@mkstx H32b7@x H32b0@m* H32b1@s* H32b2@ae*)) H32af@ls)) (if (H29f9@H28cb@annotation? H32ad@x) (H2ea5@syntax-vector->list (H29fb@H28cf@annotation-expression H32ad@x)) (if (vector? H32ad@x) (vector->list H32ad@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" H32ad@x)))))) (set! H4b34@H2ea5@syntax-vector->list H2ea5@syntax-vector->list) (set! H2ea7@syntax-pair? (lambda (H32b9@x) (H2ea3@syntax-kind? H32b9@x pair?))) (set! H4b35@H2ea7@syntax-pair? H2ea7@syntax-pair?) (set! H2ea9@syntax-vector? (lambda (H32bb@x) (H2ea3@syntax-kind? H32bb@x vector?))) (set! H4b36@H2ea9@syntax-vector? H2ea9@syntax-vector?) (set! H2eab@syntax-null? (lambda (H32bd@x) (H2ea3@syntax-kind? H32bd@x null?))) (set! H4b37@H2eab@syntax-null? H2eab@syntax-null?) (set! H2ead@syntax-list? (lambda (H32bf@x) (or (H2eab@syntax-null? H32bf@x) (and (H2ea7@syntax-pair? H32bf@x) (H2ead@syntax-list? (H2eb1@syntax-cdr H32bf@x)))))) (set! H4b38@H2ead@syntax-list? H2ead@syntax-list?) (set! H2eaf@syntax-car (lambda (H32c1@x) (if (H2e81@stx? H32c1@x) (H2e9d@mkstx (H2eaf@syntax-car (H2e83@stx-expr H32c1@x)) (H2e87@stx-mark* H32c1@x) (H2e8b@stx-subst* H32c1@x) (H2e8f@stx-ae* H32c1@x)) (if (H29f9@H28cb@annotation? H32c1@x) (H2eaf@syntax-car (H29fb@H28cf@annotation-expression H32c1@x)) (if (pair? H32c1@x) (car H32c1@x) (assertion-violation 'syntax-car '"BUG: not a pair" H32c1@x)))))) (set! H4b39@H2eaf@syntax-car H2eaf@syntax-car) (set! H2eb1@syntax-cdr (lambda (H32c3@x) (if (H2e81@stx? H32c3@x) (H2e9d@mkstx (H2eb1@syntax-cdr (H2e83@stx-expr H32c3@x)) (H2e87@stx-mark* H32c3@x) (H2e8b@stx-subst* H32c3@x) (H2e8f@stx-ae* H32c3@x)) (if (H29f9@H28cb@annotation? H32c3@x) (H2eb1@syntax-cdr (H29fb@H28cf@annotation-expression H32c3@x)) (if (pair? H32c3@x) (cdr H32c3@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" H32c3@x)))))) (set! H4b3a@H2eb1@syntax-cdr H2eb1@syntax-cdr) (set! H2eb3@syntax->list (lambda (H32c5@x) (if (H2ea7@syntax-pair? H32c5@x) (cons (H2eaf@syntax-car H32c5@x) (H2eb3@syntax->list (H2eb1@syntax-cdr H32c5@x))) (if (H2eab@syntax-null? H32c5@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" H32c5@x))))) (set! H4b3b@H2eb3@syntax->list H2eb3@syntax->list) (set! H2eb5@id? (lambda (H32c7@x) (and (H2e81@stx? H32c7@x) (symbol? (H2e83@stx-expr H32c7@x))))) (set! H4b3c@H2eb5@id? H2eb5@id?) (set! H2eb7@id->sym (lambda (H32c9@x) (H2e83@stx-expr H32c9@x))) (set! H4b3d@H2eb7@id->sym H2eb7@id->sym) (set! H2eb9@bound-id=? (lambda (H32cb@x H32cc@y) (and (eq? (H2eb7@id->sym H32cb@x) (H2eb7@id->sym H32cc@y)) (same-marks? (H2e87@stx-mark* H32cb@x) (H2e87@stx-mark* H32cc@y))))) (set! H4b3e@H2eb9@bound-id=? H2eb9@bound-id=?) (set! H2ebb@free-id=? (lambda (H32cf@i H32d0@j) (let ((H32d3@t0 (id->real-label H32cf@i)) (H32d4@t1 (id->real-label H32d0@j))) (if (or H32d3@t0 H32d4@t1) (eq? H32d3@t0 H32d4@t1) (eq? (H2eb7@id->sym H32cf@i) (H2eb7@id->sym H32d0@j)))))) (set! H4b3f@H2ebb@free-id=? H2ebb@free-id=?) (set! H2ebd@valid-bound-ids? (lambda (H32d7@id*) (and (for-all H2eb5@id? H32d7@id*) (H2ebf@distinct-bound-ids? H32d7@id*)))) (set! H4b40@H2ebd@valid-bound-ids? H2ebd@valid-bound-ids?) (set! H2ebf@distinct-bound-ids? (lambda (H32d9@id*) (or (null? H32d9@id*) (and (not (H2ec1@bound-id-member? (car H32d9@id*) (cdr H32d9@id*))) (H2ebf@distinct-bound-ids? (cdr H32d9@id*)))))) (set! H4b41@H2ebf@distinct-bound-ids? H2ebf@distinct-bound-ids?) (set! H2ec1@bound-id-member? (lambda (H32db@id H32dc@id*) (and (pair? H32dc@id*) (or (H2eb9@bound-id=? H32db@id (car H32dc@id*)) (H2ec1@bound-id-member? H32db@id (cdr H32dc@id*)))))) (set! H4b42@H2ec1@bound-id-member? H2ec1@bound-id-member?) (set! H2ec3@self-evaluating? (lambda (H32df@x) (or (number? H32df@x) (string? H32df@x) (char? H32df@x) (boolean? H32df@x) (regexp? H32df@x) (bytevector? H32df@x)))) (set! H4b43@H2ec3@self-evaluating? H2ec3@self-evaluating?) (set! H2ec5@strip-annotations (lambda (H32e1@x) (if (pair? H32e1@x) (cons (H2ec5@strip-annotations (car H32e1@x)) (H2ec5@strip-annotations (cdr H32e1@x))) (if (vector? H32e1@x) (vector-map H2ec5@strip-annotations H32e1@x) (if (H29f9@H28cb@annotation? H32e1@x) (H29f8@H28c9@annotation-stripped H32e1@x) H32e1@x))))) (set! H4b44@H2ec5@strip-annotations H2ec5@strip-annotations) (set! H2ec7@strip (lambda (H32e3@x H32e4@m*) (if (H2e3b@top-marked? H32e4@m*) (if (or (H29f9@H28cb@annotation? H32e3@x) (and (pair? H32e3@x) (H29f9@H28cb@annotation? (car H32e3@x))) (and (vector? H32e3@x) (> (vector-length H32e3@x) '0) (H29f9@H28cb@annotation? (vector-ref H32e3@x '0)))) (H2ec5@strip-annotations H32e3@x) H32e3@x) (let H32e9@f ((H32e7@x H32e3@x)) (if (H2e81@stx? H32e7@x) (begin (if (pair? (H2e83@stx-expr H32e7@x)) (begin (set-source-info! (H2e83@stx-expr H32e7@x) '#f) (set-source-info! (cdr (H2e83@stx-expr H32e7@x)) '#f) (set-source-info! (car (H2e83@stx-expr H32e7@x)) '#f)) (void)) (H2ec7@strip (H2e83@stx-expr H32e7@x) (H2e87@stx-mark* H32e7@x))) (if (H29f9@H28cb@annotation? H32e7@x) (H29f8@H28c9@annotation-stripped H32e7@x) (if (pair? H32e7@x) (let ((H32eb@a (H32e9@f (car H32e7@x))) (H32ec@d (H32e9@f (cdr H32e7@x)))) (if (and (eq? H32eb@a (car H32e7@x)) (eq? H32ec@d (cdr H32e7@x))) H32e7@x (cons H32eb@a H32ec@d))) (if (vector? H32e7@x) (let ((H32ef@old (vector->list H32e7@x))) (let ((H32f1@new (map H32e9@f H32ef@old))) (if (for-all eq? H32ef@old H32f1@new) H32e7@x (list->vector H32f1@new)))) H32e7@x)))))))) (set! H4b45@H2ec7@strip H2ec7@strip) (set! H2ec9@stx->datum (lambda (H32f3@x) (H2ec7@strip H32f3@x '()))) (set! H4b46@H2ec9@stx->datum H2ec9@stx->datum) (set! H2ecb@id->label (lambda (H32f5@id) (or (id->real-label H32f5@id) (let ((H32f7@t (H31ac@top-level-context))) (if H32f7@t ((lambda (H32f9@env) (let ((H32fb@rib (H315c@interaction-env-rib H32f9@env))) (call-with-values (lambda () (H2e45@gen-define-label+loc H32f5@id H32fb@rib)) (lambda (H3301@H32fe H3302@H3300) (let ((H3305@loc_ H3302@H3300) (H3306@lab H3301@H32fe)) (begin (H2e6b@extend-rib! H32fb@rib H32f5@id H3306@lab) H3306@lab)))))) H32f7@t) '#f))))) (set! H4b47@H2ecb@id->label H2ecb@id->label) (set! H2ecd@label->binding (lambda (H3309@x H330a@r) (let ((H330d@t (H2cd0@H2b1d@imported-label->binding H3309@x))) (if H330d@t ((lambda (H330f@b) (if (and (pair? H330f@b) (eq? (car H330f@b) '$core-rtd)) (cons '$rtd (map H3072@bless (cdr H330f@b))) (if (and (pair? H330f@b) (eq? (car H330f@b) 'global-rtd)) (let ((H3311@lib (cadr H330f@b)) (H3312@loc (cddr H330f@b))) (cons '$rtd (symbol-value H3312@loc))) H330f@b))) H330d@t) (let ((H3315@t (assq H3309@x H330a@r))) (if H3315@t (cdr H3315@t) (let ((H3317@t (H31ac@top-level-context))) (if H3317@t ((lambda (H3319@env) (let ((H331b@t (assq H3309@x (H3164@interaction-env-locs H3319@env)))) (if H331b@t ((lambda (H331d@p) (cons* 'lexical (cdr H331d@p) '#f)) H331b@t) '(displaced-lexical . #f)))) H3317@t) '(displaced-lexical . #f))))))))) (set! H4b48@H2ecd@label->binding H2ecd@label->binding) (set! H2ecf@make-binding cons) (set! H4b49@H2ecf@make-binding H2ecf@make-binding) (set! H2ed1@binding-type car) (set! H4b4a@H2ed1@binding-type H2ed1@binding-type) (set! H2ed3@binding-value cdr) (set! H4b4b@H2ed3@binding-value H2ed3@binding-value) (set! H2ed5@raise-unbound-error (lambda (H331f@id) (H319a@syntax-violation* '#f '"unbound identifier" H331f@id (make-undefined-violation)))) (set! H4b4c@H2ed5@raise-unbound-error H2ed5@raise-unbound-error) (set! H2ed7@syntax-type (lambda (H3321@e H3322@r) (if (H2eb5@id? H3321@e) (let ((H3325@id H3321@e)) (let ((H3327@label (H2ecb@id->label H3325@id))) (let ((H3329@b (H2ecd@label->binding H3327@label H3322@r))) (let ((H332b@type (H2ed1@binding-type H3329@b))) (begin (if (not H3327@label) (H2ed5@raise-unbound-error H3325@id) (void)) (let ((H332d@t H332b@type)) (if (memv H332d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values H332b@type (H2ed3@binding-value H3329@b) H3325@id) (values 'other '#f '#f)))))))) (if (H2ea7@syntax-pair? H3321@e) (let ((H332f@id (H2eaf@syntax-car H3321@e))) (if (H2eb5@id? H332f@id) (let ((H3331@label (H2ecb@id->label H332f@id))) (let ((H3333@b (H2ecd@label->binding H3331@label H3322@r))) (let ((H3335@type (H2ed1@binding-type H3333@b))) (begin (if (not H3331@label) (H2ed5@raise-unbound-error H332f@id) (void)) (let ((H3337@t H3335@type)) (if (memv H3337@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values H3335@type (H2ed3@binding-value H3333@b) H332f@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((H3339@d (H2ec9@stx->datum H3321@e))) (if (H2ec3@self-evaluating? H3339@d) (values 'constant H3339@d '#f) (values 'other '#f '#f))))))) (set! H4b4d@H2ed7@syntax-type H2ed7@syntax-type) (set! H2ee5@sanitize-binding (lambda (H333b@x H333c@src) (if (procedure? H333b@x) (cons* 'local-macro H333b@x H333c@src) (if (and (pair? H333b@x) (eq? (car H333b@x) 'macro!) (procedure? (cdr H333b@x))) (cons* 'local-macro! (cdr H333b@x) H333c@src) (if (and (pair? H333b@x) (eq? (car H333b@x) '$rtd)) H333b@x (assertion-violation 'expand '"invalid transformer" H333b@x)))))) (set! H4b4e@H2ee5@sanitize-binding H2ee5@sanitize-binding) (set! H2ee7@make-variable-transformer (lambda (H333f@x) (if (procedure? H333f@x) (cons 'macro! H333f@x) (assertion-violation 'make-variable-transformer '"not a procedure" H333f@x)))) (set! H4b4f@H2ee7@make-variable-transformer H2ee7@make-variable-transformer) (set! H2ee9@variable-transformer? (lambda (H3341@x) (and (pair? H3341@x) (eq? (car H3341@x) 'macro!) (procedure? (cdr H3341@x))))) (set! H4b50@H2ee9@variable-transformer? H2ee9@variable-transformer?) (set! H2eeb@variable-transformer-procedure (lambda (H3343@x) (if (H2ee9@variable-transformer? H3343@x) (cdr H3343@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" H3343@x)))) (set! H4b51@H2eeb@variable-transformer-procedure H2eeb@variable-transformer-procedure) (set! H2eed@make-eval-transformer (lambda (H3345@x) (H2ee5@sanitize-binding (eval-core (H2a5b@H2a13@expanded->core H3345@x)) H3345@x))) (set! H4b52@H2eed@make-eval-transformer H2eed@make-eval-transformer) (set! H303e@parse-define (lambda (H3347@x) (let ((H3349@t H3347@x)) (let ((H334b@ls/false (H30bc@syntax-dispatch H3349@t '(_ (any . any) any . each-any)))) (if (and H334b@ls/false (apply (lambda (H334d@id H334e@fmls H334f@b H3350@b*) (H2eb5@id? H334d@id)) H334b@ls/false)) (apply (lambda (H3355@id H3356@fmls H3357@b H3358@b*) (begin (H30e2@verify-formals H3356@fmls H3347@x) (values H3355@id (cons 'defun (cons H3356@fmls (cons H3357@b H3358@b*)))))) H334b@ls/false) (let ((H335d@t H3349@t)) (let ((H335f@ls/false (H30bc@syntax-dispatch H335d@t '(_ any any)))) (if (and H335f@ls/false (apply (lambda (H3361@id H3362@val) (H2eb5@id? H3361@id)) H335f@ls/false)) (apply (lambda (H3365@id H3366@val) (values H3365@id (cons 'expr H3366@val))) H335f@ls/false) (let ((H3369@t H335d@t)) (let ((H336b@ls/false (H30bc@syntax-dispatch H3369@t '(_ any)))) (if (and H336b@ls/false (apply (lambda (H336d@id) (H2eb5@id? H336d@id)) H336b@ls/false)) (apply (lambda (H336f@id) (values H336f@id (cons 'expr (H3072@bless '(void))))) H336b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3369@t)))))))))))) (set! H4b53@H303e@parse-define H303e@parse-define) (set! H3040@parse-define-syntax (lambda (H3371@x) (let ((H3373@t H3371@x)) (let ((H3375@ls/false (H30bc@syntax-dispatch H3373@t '(_ any any)))) (if (and H3375@ls/false (apply (lambda (H3377@id H3378@val) (H2eb5@id? H3377@id)) H3375@ls/false)) (apply (lambda (H337b@id H337c@val) (values H337b@id H337c@val)) H3375@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3373@t)))))) (set! H4b54@H3040@parse-define-syntax H3040@parse-define-syntax) (set! H3042@scheme-stx-hashtable (make-eq-hashtable)) (set! H4b55@H3042@scheme-stx-hashtable H3042@scheme-stx-hashtable) (set! H3044@scheme-stx (lambda (H337f@sym) (or (hashtable-ref H3042@scheme-stx-hashtable H337f@sym '#f) (let ((H3381@subst (H2cac@H2ad5@library-subst (H2cca@H2b11@find-library-by-name '(psyntax system $all))))) (let ((H3383@stx (make-simple-struct 'stx '5 (list H337f@sym H2e39@top-mark* '() '())))) (let ((H3385@stx (let ((H3387@t (assq H337f@sym H3381@subst))) (if H3387@t ((lambda (H3389@x) (let ((H338b@name (car H3389@x)) (H338c@label (cdr H3389@x))) (H2ea1@add-subst (make-simple-struct 'rib '6 (list (list H338b@name) (list H2e39@top-mark*) (list H338c@label) '#f '#f)) H3383@stx))) H3387@t) H3383@stx)))) (begin (hashtable-set! H3042@scheme-stx-hashtable H337f@sym H3385@stx) H3385@stx))))))) (set! H4b56@H3044@scheme-stx H3044@scheme-stx) (set! H3046@lexical-var car) (set! H4b57@H3046@lexical-var H3046@lexical-var) (set! H3048@lexical-mutable? cdr) (set! H4b58@H3048@lexical-mutable? H3048@lexical-mutable?) (set! H304a@set-lexical-mutable! set-cdr!) (set! H4b59@H304a@set-lexical-mutable! H304a@set-lexical-mutable!) (set! H304c@add-lexical (lambda (H338f@lab H3390@lex H3391@r) (cons (cons* H338f@lab 'lexical H3390@lex '#f) H3391@r))) (set! H4b5a@H304c@add-lexical H304c@add-lexical) (set! H304e@add-lexicals (lambda (H3395@lab* H3396@lex* H3397@r) (if (null? H3395@lab*) H3397@r (H304e@add-lexicals (cdr H3395@lab*) (cdr H3396@lex*) (H304c@add-lexical (car H3395@lab*) (car H3396@lex*) H3397@r))))) (set! H4b5b@H304e@add-lexicals H304e@add-lexicals) (set! H3050@letrec-helper (lambda (H339b@e H339c@r H339d@mr H339e@build) (let ((H33a3@t H339b@e)) (let ((H33a5@ls/false (H30bc@syntax-dispatch H33a3@t '(_ #(each (any any)) any . each-any)))) (if H33a5@ls/false (apply (lambda (H33a7@lhs* H33a8@rhs* H33a9@b H33aa@b*) (if (not (H2ebd@valid-bound-ids? H33a7@lhs*)) (H3076@invalid-fmls-error H339b@e H33a7@lhs*) (let ((H33af@lex* (map H2e3d@gen-lexical H33a7@lhs*)) (H33b0@lab* (map H2e41@gen-label H33a7@lhs*))) (let ((H33b3@rib (H2e75@make-full-rib H33a7@lhs* H33b0@lab*)) (H33b4@r (H304e@add-lexicals H33b0@lab* H33af@lex* H339c@r))) (let ((H33b7@body (H30f4@chi-internal (H2ea1@add-subst H33b3@rib (cons H33a9@b H33aa@b*)) H33b4@r H339d@mr)) (H33b8@rhs* (H30da@chi-expr* (map (lambda (H33bb@x) (H2ea1@add-subst H33b3@rib H33bb@x)) H33a8@rhs*) H33b4@r H339d@mr))) (H339e@build '#f H33af@lex* H33b8@rhs* H33b7@body)))))) H33a5@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H33a3@t)))))) (set! H4b5c@H3050@letrec-helper H3050@letrec-helper) (set! H3052@let-transformer (lambda (H33bd@e H33be@r H33bf@mr) (let ((H33c3@t H33bd@e)) (let ((H33c5@ls/false (H30bc@syntax-dispatch H33c3@t '(_ #(each (any any)) any . each-any)))) (if H33c5@ls/false (apply (lambda (H33c7@lhs* H33c8@rhs* H33c9@b H33ca@b*) (if (not (H2ebd@valid-bound-ids? H33c7@lhs*)) (H3076@invalid-fmls-error H33bd@e H33c7@lhs*) (let ((H33cf@lex* (map H2e3d@gen-lexical H33c7@lhs*)) (H33d0@lab* (map H2e41@gen-label H33c7@lhs*)) (H33d1@rhs* (H30da@chi-expr* H33c8@rhs* H33be@r H33bf@mr))) (let ((H33d5@rib (H2e75@make-full-rib H33c7@lhs* H33d0@lab*)) (H33d6@r (H304e@add-lexicals H33d0@lab* H33cf@lex* H33be@r))) (let ((H33d9@body (H30f4@chi-internal (H2ea1@add-subst H33d5@rib (cons H33c9@b H33ca@b*)) H33d6@r H33bf@mr))) (H2e1d@H2d80@build-let '#f H33cf@lex* H33d1@rhs* H33d9@body)))))) H33c5@ls/false) (let ((H33db@t H33c3@t)) (let ((H33dd@ls/false (H30bc@syntax-dispatch H33db@t '(_ any #(each (any any)) any . each-any)))) (if H33dd@ls/false (apply (lambda (H33df@loop H33e0@lhs* H33e1@rhs* H33e2@b H33e3@b*) (if (not (H2ebd@valid-bound-ids? H33e0@lhs*)) (H3076@invalid-fmls-error H33bd@e H33e0@lhs*) (let ((H33e9@lex* (map H2e3d@gen-lexical H33e0@lhs*)) (H33ea@lab* (map H2e41@gen-label H33e0@lhs*)) (H33eb@rhs* (H30da@chi-expr* H33e1@rhs* H33be@r H33bf@mr)) (H33ec@loop-lex (H2e3d@gen-lexical H33df@loop)) (H33ed@loop-lab (H2e41@gen-label H33df@loop))) (let ((H33f3@loop-rib (H2e75@make-full-rib (list H33df@loop) (list H33ed@loop-lab))) (H33f4@rib (H2e75@make-full-rib H33e0@lhs* H33ea@lab*)) (H33f5@r (H304e@add-lexicals (cons H33ed@loop-lab H33ea@lab*) (cons H33ec@loop-lex H33e9@lex*) H33be@r))) (let ((H33f9@body (H30f4@chi-internal (H2ea1@add-subst H33f3@loop-rib (H2ea1@add-subst H33f4@rib (cons H33e2@b H33e3@b*))) H33f5@r H33bf@mr))) (H2e1e@H2d82@build-named-let '#f H33ec@loop-lex H33e9@lex* H33eb@rhs* H33f9@body)))))) H33dd@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H33db@t))))))))) (set! H4b5d@H3052@let-transformer H3052@let-transformer) (set! H3054@letrec-transformer (lambda (H33fb@e H33fc@r H33fd@mr) (H3050@letrec-helper H33fb@e H33fc@r H33fd@mr H2e1c@H2d7e@build-letrec))) (set! H4b5e@H3054@letrec-transformer H3054@letrec-transformer) (set! H3056@letrec*-transformer (lambda (H3401@e H3402@r H3403@mr) (H3050@letrec-helper H3401@e H3402@r H3403@mr H2e1f@H2d84@build-letrec*))) (set! H4b5f@H3056@letrec*-transformer H3056@letrec*-transformer) (set! H3058@fluid-let-syntax-transformer (lambda (H3407@e H3408@r H3409@mr) (letrec* ((H340e@lookup (lambda (H3421@x) (or (H2ecb@id->label H3421@x) (H319c@syntax-violation '#f '"unbound identifier" H3407@e H3421@x))))) (let ((H340f@t H3407@e)) (let ((H3411@ls/false (H30bc@syntax-dispatch H340f@t '(_ #(each (any any)) any . each-any)))) (if H3411@ls/false (apply (lambda (H3413@lhs* H3414@rhs* H3415@b H3416@b*) (if (not (H2ebd@valid-bound-ids? H3413@lhs*)) (H3076@invalid-fmls-error H3407@e H3413@lhs*) (let ((H341b@lab* (map H340e@lookup H3413@lhs*)) (H341c@rhs* (map (lambda (H341f@x) (H2eed@make-eval-transformer (H3116@expand-transformer H341f@x H3409@mr))) H3414@rhs*))) (H30f4@chi-internal (cons H3415@b H3416@b*) (append (map cons H341b@lab* H341c@rhs*) H3408@r) (append (map cons H341b@lab* H341c@rhs*) H3409@mr))))) H3411@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H340f@t))))))) (set! H4b60@H3058@fluid-let-syntax-transformer H3058@fluid-let-syntax-transformer) (set! H305a@type-descriptor-transformer (lambda (H3423@e H3424@r H3425@mr) (let ((H3429@t H3423@e)) (let ((H342b@ls/false (H30bc@syntax-dispatch H3429@t '(_ any)))) (if (and H342b@ls/false (apply (lambda (H342d@id) (H2eb5@id? H342d@id)) H342b@ls/false)) (apply (lambda (H342f@id) (let ((H3431@lab (H2ecb@id->label H342f@id))) (let ((H3433@b (H2ecd@label->binding H3431@lab H3424@r))) (let ((H3435@type (H2ed1@binding-type H3433@b))) (begin (if (not H3431@lab) (H2ed5@raise-unbound-error H342f@id) (void)) (if (not (and (eq? H3435@type '$rtd) (not (list? (H2ed3@binding-value H3433@b))))) (H319c@syntax-violation '#f '"not a record type" H3423@e) (void)) (list 'quote (H2ed3@binding-value H3433@b))))))) H342b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3429@t)))))) (set! H4b61@H305a@type-descriptor-transformer H305a@type-descriptor-transformer) (set! H305c@record-type-descriptor-transformer (lambda (H3437@e H3438@r H3439@mr) (let ((H343d@t H3437@e)) (let ((H343f@ls/false (H30bc@syntax-dispatch H343d@t '(_ any)))) (if (and H343f@ls/false (apply (lambda (H3441@id) (H2eb5@id? H3441@id)) H343f@ls/false)) (apply (lambda (H3443@id) (let ((H3445@lab (H2ecb@id->label H3443@id))) (let ((H3447@b (H2ecd@label->binding H3445@lab H3438@r))) (let ((H3449@type (H2ed1@binding-type H3447@b))) (begin (if (not H3445@lab) (H2ed5@raise-unbound-error H3443@id) (void)) (if (not (and (eq? H3449@type '$rtd) (list? (H2ed3@binding-value H3447@b)))) (H319c@syntax-violation '#f '"not a record type" H3437@e) (void)) (H30de@chi-expr (car (H2ed3@binding-value H3447@b)) H3438@r H3439@mr)))))) H343f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H343d@t)))))) (set! H4b62@H305c@record-type-descriptor-transformer H305c@record-type-descriptor-transformer) (set! H305e@record-constructor-descriptor-transformer (lambda (H344b@e H344c@r H344d@mr) (let ((H3451@t H344b@e)) (let ((H3453@ls/false (H30bc@syntax-dispatch H3451@t '(_ any)))) (if (and H3453@ls/false (apply (lambda (H3455@id) (H2eb5@id? H3455@id)) H3453@ls/false)) (apply (lambda (H3457@id) (let ((H3459@lab (H2ecb@id->label H3457@id))) (let ((H345b@b (H2ecd@label->binding H3459@lab H344c@r))) (let ((H345d@type (H2ed1@binding-type H345b@b))) (begin (if (not H3459@lab) (H2ed5@raise-unbound-error H3457@id) (void)) (if (not (and (eq? H345d@type '$rtd) (list? (H2ed3@binding-value H345b@b)))) (H319c@syntax-violation '#f '"invalid type" H344b@e) (void)) (H30de@chi-expr (cadr (H2ed3@binding-value H345b@b)) H344c@r H344d@mr)))))) H3453@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3451@t)))))) (set! H4b63@H305e@record-constructor-descriptor-transformer H305e@record-constructor-descriptor-transformer) (set! H3060@when-macro (lambda (H345f@e) (let ((H3461@t H345f@e)) (let ((H3463@ls/false (H30bc@syntax-dispatch H3461@t '(_ any any . each-any)))) (if H3463@ls/false (apply (lambda (H3465@test H3466@e H3467@e*) (H3072@bless (list 'if H3465@test (cons 'begin (cons H3466@e H3467@e*))))) H3463@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3461@t)))))) (set! H4b64@H3060@when-macro H3060@when-macro) (set! H3062@unless-macro (lambda (H346b@e) (let ((H346d@t H346b@e)) (let ((H346f@ls/false (H30bc@syntax-dispatch H346d@t '(_ any any . each-any)))) (if H346f@ls/false (apply (lambda (H3471@test H3472@e H3473@e*) (H3072@bless (list 'if (list 'not H3471@test) (cons 'begin (cons H3472@e H3473@e*))))) H346f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H346d@t)))))) (set! H4b65@H3062@unless-macro H3062@unless-macro) (set! H3064@if-transformer (lambda (H3477@e H3478@r H3479@mr) (let ((H347d@t H3477@e)) (let ((H347f@ls/false (H30bc@syntax-dispatch H347d@t '(_ any any any)))) (if H347f@ls/false (apply (lambda (H3481@e0 H3482@e1 H3483@e2) (list 'if (H30de@chi-expr H3481@e0 H3478@r H3479@mr) (H30de@chi-expr H3482@e1 H3478@r H3479@mr) (H30de@chi-expr H3483@e2 H3478@r H3479@mr))) H347f@ls/false) (let ((H3487@t H347d@t)) (let ((H3489@ls/false (H30bc@syntax-dispatch H3487@t '(_ any any)))) (if H3489@ls/false (apply (lambda (H348b@e0 H348c@e1) (list 'if (H30de@chi-expr H348b@e0 H3478@r H3479@mr) (H30de@chi-expr H348c@e1 H3478@r H3479@mr) (H2e1b@H2d7c@build-void))) H3489@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3487@t))))))))) (set! H4b66@H3064@if-transformer H3064@if-transformer) (set! H3066@and-transformer (lambda (H348f@e H3490@r H3491@mr) (let ((H3495@t H348f@e)) (let ((H3497@ls/false (H30bc@syntax-dispatch H3495@t '(_ . each-any)))) (if H3497@ls/false (apply (lambda (H3499@e*) (cons 'and (H30da@chi-expr* H3499@e* H3490@r H3491@mr))) H3497@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3495@t)))))) (set! H4b67@H3066@and-transformer H3066@and-transformer) (set! H3068@or-transformer (lambda (H349b@e H349c@r H349d@mr) (let ((H34a1@t H349b@e)) (let ((H34a3@ls/false (H30bc@syntax-dispatch H34a1@t '(_ . each-any)))) (if H34a3@ls/false (apply (lambda (H34a5@e*) (cons 'or (H30da@chi-expr* H34a5@e* H349c@r H349d@mr))) H34a3@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H34a1@t)))))) (set! H4b68@H3068@or-transformer H3068@or-transformer) (set! H306a@case-macro (lambda (H34a7@e) (letrec* ((H34aa@build-last (lambda (H34d1@cls) (let ((H34d3@t H34d1@cls)) (let ((H34d5@ls/false (H30bc@syntax-dispatch H34d3@t '(#(scheme-id else) any . each-any)))) (if H34d5@ls/false (apply (lambda (H34d7@e H34d8@e*) (cons 'begin (cons H34d7@e H34d8@e*))) H34d5@ls/false) (let ((H34db@t H34d3@t)) (let ((H34dd@ls/false (H30bc@syntax-dispatch H34db@t '_))) (if H34dd@ls/false (apply (lambda () (H34ac@build-one H34d1@cls '(if #f #f))) H34dd@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H34db@t))))))))) (H34ac@build-one (lambda (H34c3@cls H34c4@k) (let ((H34c7@t H34c3@cls)) (let ((H34c9@ls/false (H30bc@syntax-dispatch H34c7@t '(each-any any . each-any)))) (if H34c9@ls/false (apply (lambda (H34cb@d* H34cc@e H34cd@e*) (list 'if (list 'memv 't (list 'quote H34cb@d*)) (cons 'begin (cons H34cc@e H34cd@e*)) H34c4@k)) H34c9@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H34c7@t))))))) (let ((H34ad@t H34a7@e)) (let ((H34af@ls/false (H30bc@syntax-dispatch H34ad@t '(_ any)))) (if H34af@ls/false (apply (lambda (H34b1@expr) (H3072@bless (cons 'let (cons (list (list 't H34b1@expr)) '((if #f #f)))))) H34af@ls/false) (let ((H34b3@t H34ad@t)) (let ((H34b5@ls/false (H30bc@syntax-dispatch H34b3@t '(_ any any . each-any)))) (if H34b5@ls/false (apply (lambda (H34b7@expr H34b8@cls H34b9@cls*) (H3072@bless (list 'let (list (list 't H34b7@expr)) (let H34c1@f ((H34bd@cls H34b8@cls) (H34be@cls* H34b9@cls*)) (if (null? H34be@cls*) (H34aa@build-last H34bd@cls) (H34ac@build-one H34bd@cls (H34c1@f (car H34be@cls*) (cdr H34be@cls*)))))))) H34b5@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H34b3@t)))))))))) (set! H4b69@H306a@case-macro H306a@case-macro) (set! H306c@quote-transformer (lambda (H34df@e H34e0@r H34e1@mr) (let ((H34e5@t H34df@e)) (let ((H34e7@ls/false (H30bc@syntax-dispatch H34e5@t '(_ any)))) (if H34e7@ls/false (apply (lambda (H34e9@datum) (list 'quote (H2ec9@stx->datum H34e9@datum))) H34e7@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H34e5@t)))))) (set! H4b6a@H306c@quote-transformer H306c@quote-transformer) (set! H306e@case-lambda-transformer (lambda (H34eb@e H34ec@r H34ed@mr) (let ((H34f1@t H34eb@e)) (let ((H34f3@ls/false (H30bc@syntax-dispatch H34f1@t '(_ . #(each (any any . each-any)))))) (if H34f3@ls/false (apply (lambda (H34f5@fmls* H34f6@b* H34f7@b**) (call-with-values (lambda () (H30e6@chi-lambda-clause* H34eb@e H34f5@fmls* (map cons H34f6@b* H34f7@b**) H34ec@r H34ed@mr)) (lambda (H34ff@H34fc H3500@H34fe) (let ((H3503@body* H3500@H34fe) (H3504@fmls* H34ff@H34fc)) (H2e19@H2d4c@build-case-lambda '#f H3504@fmls* H3503@body*))))) H34f3@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H34f1@t)))))) (set! H4b6b@H306e@case-lambda-transformer H306e@case-lambda-transformer) (set! H3070@lambda-transformer (lambda (H3507@e H3508@r H3509@mr) (let ((H350d@t H3507@e)) (let ((H350f@ls/false (H30bc@syntax-dispatch H350d@t '(_ any any . each-any)))) (if H350f@ls/false (apply (lambda (H3511@fmls H3512@b H3513@b*) (call-with-values (lambda () (H30e4@chi-lambda-clause H3507@e H3511@fmls (cons H3512@b H3513@b*) H3508@r H3509@mr)) (lambda (H351b@H3518 H351c@H351a) (let ((H351f@body H351c@H351a) (H3520@fmls H351b@H3518)) (H2e18@H2d4a@build-lambda '#f H3520@fmls H351f@body))))) H350f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H350d@t)))))) (set! H4b6c@H3070@lambda-transformer H3070@lambda-transformer) (set! H3072@bless (lambda (H3523@x) (H2e9d@mkstx (let H3527@f ((H3525@x H3523@x)) (if (H2e81@stx? H3525@x) H3525@x (if (pair? H3525@x) (cons (H3527@f (car H3525@x)) (H3527@f (cdr H3525@x))) (if (symbol? H3525@x) (H3044@scheme-stx H3525@x) (if (vector? H3525@x) (vector-map H3527@f H3525@x) H3525@x))))) '() '() '()))) (set! H4b6d@H3072@bless H3072@bless) (set! H3074@with-syntax-macro (lambda (H3529@e) (let ((H352b@t H3529@e)) (let ((H352d@ls/false (H30bc@syntax-dispatch H352b@t '(_ #(each (any any)) any . each-any)))) (if H352d@ls/false (apply (lambda (H352f@pat* H3530@expr* H3531@b H3532@b*) (let ((H3537@idn* (let H353b@f ((H3539@pat* H352f@pat*)) (if (null? H3539@pat*) '() (call-with-values (lambda () (H30ba@convert-pattern (car H3539@pat*) '())) (lambda (H3541@H353e H3542@H3540) (let ((H3545@idn* H3542@H3540) (H3546@pat H3541@H353e)) (append H3545@idn* (H353b@f (cdr H3539@pat*)))))))))) (begin (H30e2@verify-formals (map car H3537@idn*) H3529@e) (let ((H3549@t* (H318a@generate-temporaries H3530@expr*))) (H3072@bless (list 'let (map list H3549@t* H3530@expr*) (let H354f@f ((H354b@pat* H352f@pat*) (H354c@t* H3549@t*)) (if (null? H354b@pat*) (cons 'begin (cons '#f (cons H3531@b H3532@b*))) (list 'syntax-case (car H354c@t*) '() (list (car H354b@pat*) (H354f@f (cdr H354b@pat*) (cdr H354c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car H354b@pat*)) (car H354c@t*)))))))))))) H352d@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H352b@t)))))) (set! H4b6e@H3074@with-syntax-macro H3074@with-syntax-macro) (set! H3076@invalid-fmls-error (lambda (H3551@stx H3552@fmls) (let ((H3555@t H3552@fmls)) (let ((H3557@ls/false (H30bc@syntax-dispatch H3555@t '#(each+ any () any)))) (if H3557@ls/false (apply (lambda (H3559@id* H355a@last) (let H355f@f ((H355d@id* (if (H2eb5@id? H355a@last) (cons H355a@last H3559@id*) (if (H2eab@syntax-null? H355a@last) H3559@id* (H319c@syntax-violation '#f '"not an identifier" H3551@stx H355a@last))))) (if (null? H355d@id*) (values) (if (not (H2eb5@id? (car H355d@id*))) (H319c@syntax-violation '#f '"not an identifier" H3551@stx (car H355d@id*)) (begin (H355f@f (cdr H355d@id*)) (if (H2ec1@bound-id-member? (car H355d@id*) (cdr H355d@id*)) (H319c@syntax-violation '#f '"duplicate binding" H3551@stx (car H355d@id*)) (void))))))) H3557@ls/false) (let ((H3561@t H3555@t)) (let ((H3563@ls/false (H30bc@syntax-dispatch H3561@t '_))) (if H3563@ls/false (apply (lambda () (H319c@syntax-violation '#f '"malformed binding form" H3551@stx H3552@fmls)) H3563@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3561@t))))))))) (set! H4b6f@H3076@invalid-fmls-error H3076@invalid-fmls-error) (set! H3078@let-macro (lambda (H3565@stx) (let ((H3567@t H3565@stx)) (let ((H3569@ls/false (H30bc@syntax-dispatch H3567@t '(_ #(each (any any)) any . each-any)))) (if H3569@ls/false (apply (lambda (H356b@lhs* H356c@rhs* H356d@b H356e@b*) (if (H2ebd@valid-bound-ids? H356b@lhs*) (H3072@bless (cons (cons 'lambda (cons H356b@lhs* (cons H356d@b H356e@b*))) H356c@rhs*)) (H3076@invalid-fmls-error H3565@stx H356b@lhs*))) H3569@ls/false) (let ((H3573@t H3567@t)) (let ((H3575@ls/false (H30bc@syntax-dispatch H3573@t '(_ any #(each (any any)) any . each-any)))) (if (and H3575@ls/false (apply (lambda (H3577@f H3578@lhs* H3579@rhs* H357a@b H357b@b*) (H2eb5@id? H3577@f)) H3575@ls/false)) (apply (lambda (H3581@f H3582@lhs* H3583@rhs* H3584@b H3585@b*) (if (H2ebd@valid-bound-ids? H3582@lhs*) (H3072@bless (cons (list 'letrec (list (list H3581@f (cons 'lambda (cons H3582@lhs* (cons H3584@b H3585@b*))))) H3581@f) H3583@rhs*)) (H3076@invalid-fmls-error H3565@stx H3582@lhs*))) H3575@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3573@t))))))))) (set! H4b70@H3078@let-macro H3078@let-macro) (set! H307a@let-values-macro (lambda (H358b@stx) (letrec* ((H358e@rename (lambda (H35f3@x H35f4@old* H35f5@new*) (begin (if (not (H2eb5@id? H35f3@x)) (H319c@syntax-violation '#f '"not an indentifier" H358b@stx H35f3@x) (void)) (if (H2ec1@bound-id-member? H35f3@x H35f4@old*) (H319c@syntax-violation '#f '"duplicate binding" H358b@stx H35f3@x) (void)) (let ((H35f9@y (gensym (H31a2@syntax->datum H35f3@x)))) (values H35f9@y (cons H35f3@x H35f4@old*) (cons H35f9@y H35f5@new*)))))) (H3590@rename* (lambda (H35e1@x* H35e2@old* H35e3@new*) (if (null? H35e1@x*) (values '() H35e2@old* H35e3@new*) (call-with-values (lambda () (H358e@rename (car H35e1@x*) H35e2@old* H35e3@new*)) (lambda (H35e7@x H35e8@old* H35e9@new*) (call-with-values (lambda () (H3590@rename* (cdr H35e1@x*) H35e8@old* H35e9@new*)) (lambda (H35ed@x* H35ee@old* H35ef@new*) (values (cons H35e7@x H35ed@x*) H35ee@old* H35ef@new*))))))))) (let ((H3591@t H358b@stx)) (let ((H3593@ls/false (H30bc@syntax-dispatch H3591@t '(_ () any . each-any)))) (if H3593@ls/false (apply (lambda (H3595@b H3596@b*) (cons* (H3072@bless 'let) '() H3595@b H3596@b*)) H3593@ls/false) (let ((H3599@t H3591@t)) (let ((H359b@ls/false (H30bc@syntax-dispatch H3599@t '(_ #(each (any any)) any . each-any)))) (if H359b@ls/false (apply (lambda (H359d@lhs* H359e@rhs* H359f@b H35a0@b*) (H3072@bless (let H35ad@f ((H35a5@lhs* H359d@lhs*) (H35a6@rhs* H359e@rhs*) (H35a7@old* '()) (H35a8@new* '())) (if (null? H35a5@lhs*) (cons 'let (cons (map list H35a7@old* H35a8@new*) (cons H359f@b H35a0@b*))) (let ((H35af@t (car H35a5@lhs*))) (let ((H35b1@ls/false (H30bc@syntax-dispatch H35af@t 'each-any))) (if H35b1@ls/false (apply (lambda (H35b3@x*) (call-with-values (lambda () (H3590@rename* H35b3@x* H35a7@old* H35a8@new*)) (lambda (H35bb@H35b6 H35bc@H35b8 H35bd@H35ba) (let ((H35c1@new* H35bd@H35ba) (H35c2@old* H35bc@H35b8) (H35c3@y* H35bb@H35b6)) (list 'call-with-values (list 'lambda '() (car H35a6@rhs*)) (list 'lambda H35c3@y* (H35ad@f (cdr H35a5@lhs*) (cdr H35a6@rhs*) H35c2@old* H35c1@new*))))))) H35b1@ls/false) (let ((H35c7@t H35af@t)) (let ((H35c9@ls/false (H30bc@syntax-dispatch H35c7@t '#(each+ any () any)))) (if H35c9@ls/false (apply (lambda (H35cb@x* H35cc@x) (call-with-values (lambda () (H358e@rename H35cc@x H35a7@old* H35a8@new*)) (lambda (H35cf@y H35d0@old* H35d1@new*) (call-with-values (lambda () (H3590@rename* H35cb@x* H35d0@old* H35d1@new*)) (lambda (H35d5@y* H35d6@old* H35d7@new*) (list 'call-with-values (list 'lambda '() (car H35a6@rhs*)) (list 'lambda (append H35d5@y* H35cf@y) (H35ad@f (cdr H35a5@lhs*) (cdr H35a6@rhs*) H35d6@old* H35d7@new*)))))))) H35c9@ls/false) (let ((H35db@t H35c7@t)) (let ((H35dd@ls/false (H30bc@syntax-dispatch H35db@t 'any))) (if H35dd@ls/false (apply (lambda (H35df@others) (H319c@syntax-violation '#f '"malformed bindings" H358b@stx H35df@others)) H35dd@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H35db@t)))))))))))))) H359b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3599@t)))))))))) (set! H4b71@H307a@let-values-macro H307a@let-values-macro) (set! H307c@let*-values-macro (lambda (H35fb@stx) (letrec* ((H35fe@check (lambda (H362d@x*) (if (not (null? H362d@x*)) (let ((H362f@x (car H362d@x*))) (begin (if (not (H2eb5@id? H362f@x)) (H319c@syntax-violation '#f '"not an identifier" H35fb@stx H362f@x) (void)) (H35fe@check (cdr H362d@x*)) (if (H2ec1@bound-id-member? H362f@x (cdr H362d@x*)) (H319c@syntax-violation '#f '"duplicate identifier" H35fb@stx H362f@x) (void)))) (void))))) (let ((H35ff@t H35fb@stx)) (let ((H3601@ls/false (H30bc@syntax-dispatch H35ff@t '(_ () any . each-any)))) (if H3601@ls/false (apply (lambda (H3603@b H3604@b*) (cons* (H3072@bless 'let) '() H3603@b H3604@b*)) H3601@ls/false) (let ((H3607@t H35ff@t)) (let ((H3609@ls/false (H30bc@syntax-dispatch H3607@t '(_ #(each (any any)) any . each-any)))) (if H3609@ls/false (apply (lambda (H360b@lhs* H360c@rhs* H360d@b H360e@b*) (H3072@bless (let H3617@f ((H3613@lhs* H360b@lhs*) (H3614@rhs* H360c@rhs*)) (if (null? H3613@lhs*) (cons 'begin (cons H360d@b H360e@b*)) (let ((H3619@t (car H3613@lhs*))) (let ((H361b@ls/false (H30bc@syntax-dispatch H3619@t 'each-any))) (if H361b@ls/false (apply (lambda (H361d@x*) (begin (H35fe@check H361d@x*) (list 'call-with-values (list 'lambda '() (car H3614@rhs*)) (list 'lambda H361d@x* (H3617@f (cdr H3613@lhs*) (cdr H3614@rhs*)))))) H361b@ls/false) (let ((H361f@t H3619@t)) (let ((H3621@ls/false (H30bc@syntax-dispatch H361f@t '#(each+ any () any)))) (if H3621@ls/false (apply (lambda (H3623@x* H3624@x) (begin (H35fe@check (cons H3624@x H3623@x*)) (list 'call-with-values (list 'lambda '() (car H3614@rhs*)) (list 'lambda (append H3623@x* H3624@x) (H3617@f (cdr H3613@lhs*) (cdr H3614@rhs*)))))) H3621@ls/false) (let ((H3627@t H361f@t)) (let ((H3629@ls/false (H30bc@syntax-dispatch H3627@t 'any))) (if H3629@ls/false (apply (lambda (H362b@others) (H319c@syntax-violation '#f '"malformed bindings" H35fb@stx H362b@others)) H3629@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3627@t)))))))))))))) H3609@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3607@t)))))))))) (set! H4b72@H307c@let*-values-macro H307c@let*-values-macro) (set! H307e@trace-lambda-macro (lambda (H3631@stx) (let ((H3633@t H3631@stx)) (let ((H3635@ls/false (H30bc@syntax-dispatch H3633@t '(_ any each-any any . each-any)))) (if H3635@ls/false (apply (lambda (H3637@who H3638@fmls H3639@b H363a@b*) (if (H2ebd@valid-bound-ids? H3638@fmls) (H3072@bless (list 'make-traced-procedure (list 'quote H3637@who) (cons 'lambda (cons H3638@fmls (cons H3639@b H363a@b*))))) (H3076@invalid-fmls-error H3631@stx H3638@fmls))) H3635@ls/false) (let ((H363f@t H3633@t)) (let ((H3641@ls/false (H30bc@syntax-dispatch H363f@t '(_ any #(each+ any () any) any . each-any)))) (if H3641@ls/false (apply (lambda (H3643@who H3644@fmls H3645@last H3646@b H3647@b*) (if (H2ebd@valid-bound-ids? (cons H3645@last H3644@fmls)) (H3072@bless (list 'make-traced-procedure (list 'quote H3643@who) (cons 'lambda (cons (append H3644@fmls H3645@last) (cons H3646@b H3647@b*))))) (H3076@invalid-fmls-error H3631@stx (append H3644@fmls H3645@last)))) H3641@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H363f@t))))))))) (set! H4b73@H307e@trace-lambda-macro H307e@trace-lambda-macro) (set! H3080@trace-define-macro (lambda (H364d@stx) (let ((H364f@t H364d@stx)) (let ((H3651@ls/false (H30bc@syntax-dispatch H364f@t '(_ (any . each-any) any . each-any)))) (if H3651@ls/false (apply (lambda (H3653@who H3654@fmls H3655@b H3656@b*) (if (H2ebd@valid-bound-ids? H3654@fmls) (H3072@bless (list 'define H3653@who (list 'make-traced-procedure (list 'quote H3653@who) (cons 'lambda (cons H3654@fmls (cons H3655@b H3656@b*)))))) (H3076@invalid-fmls-error H364d@stx H3654@fmls))) H3651@ls/false) (let ((H365b@t H364f@t)) (let ((H365d@ls/false (H30bc@syntax-dispatch H365b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if H365d@ls/false (apply (lambda (H365f@who H3660@fmls H3661@last H3662@b H3663@b*) (if (H2ebd@valid-bound-ids? (cons H3661@last H3660@fmls)) (H3072@bless (list 'define H365f@who (list 'make-traced-procedure (list 'quote H365f@who) (cons 'lambda (cons (append H3660@fmls H3661@last) (cons H3662@b H3663@b*)))))) (H3076@invalid-fmls-error H364d@stx (append H3660@fmls H3661@last)))) H365d@ls/false) (let ((H3669@t H365b@t)) (let ((H366b@ls/false (H30bc@syntax-dispatch H3669@t '(_ any any)))) (if H366b@ls/false (apply (lambda (H366d@who H366e@expr) (if (H2eb5@id? H366d@who) (H3072@bless (list 'define H366d@who (list 'let (list (list 'v H366e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote H366d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (H319c@syntax-violation '#f '"invalid name" H364d@stx))) H366b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3669@t)))))))))))) (set! H4b74@H3080@trace-define-macro H3080@trace-define-macro) (set! H3082@trace-define-syntax-macro (lambda (H3671@stx) (let ((H3673@t H3671@stx)) (let ((H3675@ls/false (H30bc@syntax-dispatch H3673@t '(_ any any)))) (if H3675@ls/false (apply (lambda (H3677@who H3678@expr) (if (H2eb5@id? H3677@who) (H3072@bless (list 'define-syntax H3677@who (list 'make-traced-macro (list 'quote H3677@who) H3678@expr))) (H319c@syntax-violation '#f '"invalid name" H3671@stx))) H3675@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3673@t)))))) (set! H4b75@H3082@trace-define-syntax-macro H3082@trace-define-syntax-macro) (set! H3084@trace-let/rec-syntax (lambda (H367b@who) (lambda (H367d@stx) (let ((H367f@t H367d@stx)) (let ((H3681@ls/false (H30bc@syntax-dispatch H367f@t '(_ #(each (any any)) any . each-any)))) (if H3681@ls/false (apply (lambda (H3683@lhs* H3684@rhs* H3685@b H3686@b*) (if (H2ebd@valid-bound-ids? H3683@lhs*) (let ((H368b@rhs* (map (lambda (H368d@lhs H368e@rhs) (list 'make-traced-macro (list 'quote H368d@lhs) H368e@rhs)) H3683@lhs* H3684@rhs*))) (H3072@bless (cons H367b@who (cons (map list H3683@lhs* H368b@rhs*) (cons H3685@b H3686@b*))))) (H3076@invalid-fmls-error H367d@stx H3683@lhs*))) H3681@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H367f@t))))))) (set! H4b76@H3084@trace-let/rec-syntax H3084@trace-let/rec-syntax) (set! H3086@trace-let-syntax-macro (H3084@trace-let/rec-syntax 'let-syntax)) (set! H4b77@H3086@trace-let-syntax-macro H3086@trace-let-syntax-macro) (set! H3088@trace-letrec-syntax-macro (H3084@trace-let/rec-syntax 'letrec-syntax)) (set! H4b78@H3088@trace-letrec-syntax-macro H3088@trace-letrec-syntax-macro) (set! H308a@guard-macro (lambda (H3691@x) (letrec* ((H3694@gen-clauses (lambda (H36ab@con H36ac@outerk H36ad@clause*) (letrec* ((H36b2@f (lambda (H36eb@x H36ec@k) (let ((H36ef@t H36eb@x)) (let ((H36f1@ls/false (H30bc@syntax-dispatch H36ef@t '(any #(scheme-id =>) any)))) (if H36f1@ls/false (apply (lambda (H36f3@e H36f4@p) (let ((H36f7@t (gensym))) (list 'let (list (list H36f7@t H36f3@e)) (list 'if H36f7@t (list H36f4@p H36f7@t) H36ec@k)))) H36f1@ls/false) (let ((H36f9@t H36ef@t)) (let ((H36fb@ls/false (H30bc@syntax-dispatch H36f9@t '(any)))) (if H36fb@ls/false (apply (lambda (H36fd@e) (let ((H36ff@t (gensym))) (list 'let (list (list H36ff@t H36fd@e)) (list 'if H36ff@t H36ff@t H36ec@k)))) H36fb@ls/false) (let ((H3701@t H36f9@t)) (let ((H3703@ls/false (H30bc@syntax-dispatch H3701@t '(any any . each-any)))) (if H3703@ls/false (apply (lambda (H3705@e H3706@v H3707@v*) (list 'if H3705@e (cons 'begin (cons H3706@v H3707@v*)) H36ec@k)) H3703@ls/false) (let ((H370b@t H3701@t)) (let ((H370d@ls/false (H30bc@syntax-dispatch H370b@t '_))) (if H370d@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid guard clause" H36eb@x)) H370d@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H370b@t))))))))))))))) (H36b4@f* (lambda (H36c1@x*) (let ((H36c3@t H36c1@x*)) (let ((H36c5@ls/false (H30bc@syntax-dispatch H36c3@t '()))) (if H36c5@ls/false (apply (lambda () (let ((H36c7@g (gensym))) (values (list H36c7@g (list 'lambda '() (list 'raise-continuable H36ab@con))) H36c7@g))) H36c5@ls/false) (let ((H36c9@t H36c3@t)) (let ((H36cb@ls/false (H30bc@syntax-dispatch H36c9@t '((#(scheme-id else) any . each-any))))) (if H36cb@ls/false (apply (lambda (H36cd@e H36ce@e*) (values (cons 'begin (cons H36cd@e H36ce@e*)) '#f)) H36cb@ls/false) (let ((H36d1@t H36c9@t)) (let ((H36d3@ls/false (H30bc@syntax-dispatch H36d1@t '(any . any)))) (if H36d3@ls/false (apply (lambda (H36d5@cls H36d6@cls*) (call-with-values (lambda () (H36b4@f* H36d6@cls*)) (lambda (H36dd@H36da H36de@H36dc) (let ((H36e1@g H36de@H36dc) (H36e2@e H36dd@H36da)) (values (H36b2@f H36d5@cls H36e2@e) H36e1@g))))) H36d3@ls/false) (let ((H36e5@t H36d1@t)) (let ((H36e7@ls/false (H30bc@syntax-dispatch H36e5@t 'any))) (if H36e7@ls/false (apply (lambda (H36e9@others) (H319c@syntax-violation '#f '"invalid guard clause" H36e9@others)) H36e7@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H36e5@t)))))))))))))))) (call-with-values (lambda () (H36b4@f* H36ad@clause*)) (lambda (H36b9@H36b6 H36ba@H36b8) (let ((H36bd@raisek H36ba@H36b8) (H36be@code H36b9@H36b6)) (if H36bd@raisek (list (list 'call/cc (list 'lambda (list H36bd@raisek) (list H36ac@outerk (list 'lambda '() H36be@code))))) (list H36ac@outerk (list 'lambda '() H36be@code)))))))))) (let ((H3695@t H3691@x)) (let ((H3697@ls/false (H30bc@syntax-dispatch H3695@t '(_ (any . each-any) any . each-any)))) (if (and H3697@ls/false (apply (lambda (H3699@con H369a@clause* H369b@b H369c@b*) (H2eb5@id? H3699@con)) H3697@ls/false)) (apply (lambda (H36a1@con H36a2@clause* H36a3@b H36a4@b*) (let ((H36a9@outerk (gensym))) (H3072@bless (list (list 'call/cc (list 'lambda (list H36a9@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list H36a1@con) (H3694@gen-clauses H36a1@con H36a9@outerk H36a2@clause*)) (cons 'lambda (cons '() (cons H36a3@b H36a4@b*))))))))))) H3697@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3695@t))))))) (set! H4b79@H308a@guard-macro H308a@guard-macro) (set! H308c@define-enumeration-macro (lambda (H370f@stx) (letrec* ((H3712@set? (lambda (H372b@x) (or (null? H372b@x) (and (not (memq (car H372b@x) (cdr H372b@x))) (H3712@set? (cdr H372b@x)))))) (H3714@remove-dups (lambda (H3729@ls) (if (null? H3729@ls) '() (cons (car H3729@ls) (H3714@remove-dups (remq (car H3729@ls) (cdr H3729@ls)))))))) (let ((H3715@t H370f@stx)) (let ((H3717@ls/false (H30bc@syntax-dispatch H3715@t '(_ any each-any any)))) (if (and H3717@ls/false (apply (lambda (H3719@name H371a@id* H371b@maker) (and (H2eb5@id? H3719@name) (H2eb5@id? H371b@maker) (for-all H2eb5@id? H371a@id*))) H3717@ls/false)) (apply (lambda (H371f@name H3720@id* H3721@maker) (let ((H3725@name* (H3714@remove-dups (H31a2@syntax->datum H3720@id*))) (H3726@mk (gensym))) (H3072@bless (list 'begin (list 'define H3726@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote H3725@name*)))) (list 'define-syntax H371f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote H3725@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote H371f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax H3721@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote H3721@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote H3725@name*)) (cons 'syntax-violation (cons (list 'quote H3721@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons H3726@mk '('(n* ...))))))))))))) H3717@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3715@t))))))) (set! H4b7a@H308c@define-enumeration-macro H308c@define-enumeration-macro) (set! H308e@time-macro (lambda (H372d@stx) (let ((H372f@t H372d@stx)) (let ((H3731@ls/false (H30bc@syntax-dispatch H372f@t '(_ any)))) (if H3731@ls/false (apply (lambda (H3733@expr) (H3072@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() H3733@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) H3731@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H372f@t)))))) (set! H4b7b@H308e@time-macro H308e@time-macro) (set! H3090@delay-macro (lambda (H3735@stx) (let ((H3737@t H3735@stx)) (let ((H3739@ls/false (H30bc@syntax-dispatch H3737@t '(_ any)))) (if H3739@ls/false (apply (lambda (H373b@expr) (H3072@bless (list 'make-promise (list 'lambda '() H373b@expr)))) H3739@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3737@t)))))) (set! H4b7c@H3090@delay-macro H3090@delay-macro) (set! H3092@assert-macro (lambda (H373d@stx) (let ((H373f@t H373d@stx)) (let ((H3741@ls/false (H30bc@syntax-dispatch H373f@t '(_ any)))) (if H3741@ls/false (apply (lambda (H3743@expr) (let ((H3745@pos (or (H3194@expression-position H373d@stx) (H3194@expression-position H3743@expr)))) (H3072@bless (list 'let (list (list 'x H3743@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote H3743@expr) (list 'quote H3745@pos))))))) H3741@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H373f@t)))))) (set! H4b7d@H3092@assert-macro H3092@assert-macro) (set! H3094@endianness-macro (lambda (H3747@stx) (let ((H3749@t H3747@stx)) (let ((H374b@ls/false (H30bc@syntax-dispatch H3749@t '(_ any)))) (if H374b@ls/false (apply (lambda (H374d@e) (let ((H374f@t (H31a2@syntax->datum H374d@e))) (if (memv H374f@t '(little)) (H3072@bless ''little) (if (memv H374f@t '(big)) (H3072@bless ''big) (H319c@syntax-violation '#f '"endianness must be big or little" H3747@stx))))) H374b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3749@t)))))) (set! H4b7e@H3094@endianness-macro H3094@endianness-macro) (set! H3096@identifier-syntax-macro (lambda (H3751@stx) (let ((H3753@t H3751@stx)) (let ((H3755@ls/false (H30bc@syntax-dispatch H3753@t '(_ any)))) (if H3755@ls/false (apply (lambda (H3757@expr) (H3072@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax H3757@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax H3757@expr) '((syntax (e* ...)))))))))) H3755@ls/false) (let ((H3759@t H3753@t)) (let ((H375b@ls/false (H30bc@syntax-dispatch H3759@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and H375b@ls/false (apply (lambda (H375d@id1 H375e@expr1 H375f@id2 H3760@expr2 H3761@expr3) (and (H2eb5@id? H375d@id1) (H2eb5@id? H375f@id2) (H2eb5@id? H3760@expr2))) H375b@ls/false)) (apply (lambda (H3767@id1 H3768@expr1 H3769@id2 H376a@expr2 H376b@expr3) (H3072@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax H3768@expr1)) (list (list 'set! 'id H376a@expr2) (list 'syntax H376b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons H3768@expr1 '(e* ...))))))))) H375b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3759@t))))))))) (set! H4b7f@H3096@identifier-syntax-macro H3096@identifier-syntax-macro) (set! H3098@do-macro (lambda (H3771@stx) (letrec* ((H3774@bind (lambda (H378b@x) (let ((H378d@t H378b@x)) (let ((H378f@ls/false (H30bc@syntax-dispatch H378d@t '(any any)))) (if H378f@ls/false (apply (lambda (H3791@x H3792@init) (list H3791@x H3792@init H3791@x)) H378f@ls/false) (let ((H3795@t H378d@t)) (let ((H3797@ls/false (H30bc@syntax-dispatch H3795@t '(any any any)))) (if H3797@ls/false (apply (lambda (H3799@x H379a@init H379b@step) (list H3799@x H379a@init H379b@step)) H3797@ls/false) (let ((H379f@t H3795@t)) (let ((H37a1@ls/false (H30bc@syntax-dispatch H379f@t '_))) (if H37a1@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid binding" H3771@stx)) H37a1@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H379f@t))))))))))))) (let ((H3775@t H3771@stx)) (let ((H3777@ls/false (H30bc@syntax-dispatch H3775@t '(_ each-any (any . each-any) . each-any)))) (if H3777@ls/false (apply (lambda (H3779@binding* H377a@test H377b@expr* H377c@command*) (let ((H3781@t (map H3774@bind H3779@binding*))) (let ((H3783@ls/false (H30bc@syntax-dispatch H3781@t '#(each (any any any))))) (if H3783@ls/false (apply (lambda (H3785@x* H3786@init* H3787@step*) (if (H2ebd@valid-bound-ids? H3785@x*) (H3072@bless (list 'letrec (list (list 'loop (list 'lambda H3785@x* (list 'if H377a@test (cons 'begin (cons '(if #f #f) H377b@expr*)) (cons 'begin (append H377c@command* (list (cons 'loop H3787@step*)))))))) (cons 'loop H3786@init*))) (H319c@syntax-violation '#f '"invalid bindings" H3771@stx))) H3783@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3781@t))))) H3777@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3775@t))))))) (set! H4b80@H3098@do-macro H3098@do-macro) (set! H309a@let*-macro (lambda (H37a3@stx) (let ((H37a5@t H37a3@stx)) (let ((H37a7@ls/false (H30bc@syntax-dispatch H37a5@t '(_ #(each (any any)) any . each-any)))) (if (and H37a7@ls/false (apply (lambda (H37a9@lhs* H37aa@rhs* H37ab@b H37ac@b*) (for-all H2eb5@id? H37a9@lhs*)) H37a7@ls/false)) (apply (lambda (H37b1@lhs* H37b2@rhs* H37b3@b H37b4@b*) (H3072@bless (let H37bb@f ((H37b9@x* (map list H37b1@lhs* H37b2@rhs*))) (if (null? H37b9@x*) (cons 'let (cons '() (cons H37b3@b H37b4@b*))) (list 'let (list (car H37b9@x*)) (H37bb@f (cdr H37b9@x*))))))) H37a7@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H37a5@t)))))) (set! H4b81@H309a@let*-macro H309a@let*-macro) (set! H309c@or-macro (lambda (H37bd@stx) (let ((H37bf@t H37bd@stx)) (let ((H37c1@ls/false (H30bc@syntax-dispatch H37bf@t '(_)))) (if H37c1@ls/false (apply (lambda () '#f) H37c1@ls/false) (let ((H37c3@t H37bf@t)) (let ((H37c5@ls/false (H30bc@syntax-dispatch H37c3@t '(_ any . each-any)))) (if H37c5@ls/false (apply (lambda (H37c7@e H37c8@e*) (H3072@bless (let H37cf@f ((H37cb@e H37c7@e) (H37cc@e* H37c8@e*)) (if (null? H37cc@e*) (list 'begin '#f H37cb@e) (list 'let (list (list 't H37cb@e)) (list 'if 't 't (H37cf@f (car H37cc@e*) (cdr H37cc@e*)))))))) H37c5@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H37c3@t))))))))) (set! H4b82@H309c@or-macro H309c@or-macro) (set! H309e@and-macro (lambda (H37d1@stx) (let ((H37d3@t H37d1@stx)) (let ((H37d5@ls/false (H30bc@syntax-dispatch H37d3@t '(_)))) (if H37d5@ls/false (apply (lambda () '#t) H37d5@ls/false) (let ((H37d7@t H37d3@t)) (let ((H37d9@ls/false (H30bc@syntax-dispatch H37d7@t '(_ any . each-any)))) (if H37d9@ls/false (apply (lambda (H37db@e H37dc@e*) (H3072@bless (let H37e3@f ((H37df@e H37db@e) (H37e0@e* H37dc@e*)) (if (null? H37e0@e*) (list 'begin '#f H37df@e) (cons 'if (cons H37df@e (cons (H37e3@f (car H37e0@e*) (cdr H37e0@e*)) '(#f)))))))) H37d9@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H37d7@t))))))))) (set! H4b83@H309e@and-macro H309e@and-macro) (set! H30a0@cond-macro (lambda (H37e5@stx) (let ((H37e7@t H37e5@stx)) (let ((H37e9@ls/false (H30bc@syntax-dispatch H37e7@t '(_ any . each-any)))) (if H37e9@ls/false (apply (lambda (H37eb@cls H37ec@cls*) (H3072@bless (let H37f3@f ((H37ef@cls H37eb@cls) (H37f0@cls* H37ec@cls*)) (if (null? H37f0@cls*) (let ((H37f5@t H37ef@cls)) (let ((H37f7@ls/false (H30bc@syntax-dispatch H37f5@t '(#(scheme-id else) any . each-any)))) (if H37f7@ls/false (apply (lambda (H37f9@e H37fa@e*) (cons 'begin (cons H37f9@e H37fa@e*))) H37f7@ls/false) (let ((H37fd@t H37f5@t)) (let ((H37ff@ls/false (H30bc@syntax-dispatch H37fd@t '(any #(scheme-id =>) any)))) (if H37ff@ls/false (apply (lambda (H3801@e H3802@p) (list 'let (list (list 't H3801@e)) (list 'if 't (cons H3802@p '(t))))) H37ff@ls/false) (let ((H3805@t H37fd@t)) (let ((H3807@ls/false (H30bc@syntax-dispatch H3805@t '(any)))) (if H3807@ls/false (apply (lambda (H3809@e) (cons 'or (cons H3809@e '((if #f #f))))) H3807@ls/false) (let ((H380b@t H3805@t)) (let ((H380d@ls/false (H30bc@syntax-dispatch H380b@t '(any . each-any)))) (if H380d@ls/false (apply (lambda (H380f@e H3810@e*) (list 'if H380f@e (cons 'begin H3810@e*))) H380d@ls/false) (let ((H3813@t H380b@t)) (let ((H3815@ls/false (H30bc@syntax-dispatch H3813@t '_))) (if H3815@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid last clause" H37e5@stx)) H3815@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3813@t)))))))))))))))) (let ((H3817@t H37ef@cls)) (let ((H3819@ls/false (H30bc@syntax-dispatch H3817@t '(#(scheme-id else) any . each-any)))) (if H3819@ls/false (apply (lambda (H381b@e H381c@e*) (H319c@syntax-violation '#f '"incorrect position of keyword else" H37e5@stx)) H3819@ls/false) (let ((H381f@t H3817@t)) (let ((H3821@ls/false (H30bc@syntax-dispatch H381f@t '(any #(scheme-id =>) any)))) (if H3821@ls/false (apply (lambda (H3823@e H3824@p) (list 'let (list (list 't H3823@e)) (list 'if 't (cons H3824@p '(t)) (H37f3@f (car H37f0@cls*) (cdr H37f0@cls*))))) H3821@ls/false) (let ((H3827@t H381f@t)) (let ((H3829@ls/false (H30bc@syntax-dispatch H3827@t '(any)))) (if H3829@ls/false (apply (lambda (H382b@e) (list 'or H382b@e (H37f3@f (car H37f0@cls*) (cdr H37f0@cls*)))) H3829@ls/false) (let ((H382d@t H3827@t)) (let ((H382f@ls/false (H30bc@syntax-dispatch H382d@t '(any . each-any)))) (if H382f@ls/false (apply (lambda (H3831@e H3832@e*) (list 'if H3831@e (cons 'begin H3832@e*) (H37f3@f (car H37f0@cls*) (cdr H37f0@cls*)))) H382f@ls/false) (let ((H3835@t H382d@t)) (let ((H3837@ls/false (H30bc@syntax-dispatch H3835@t '_))) (if H3837@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid last clause" H37e5@stx)) H3837@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3835@t)))))))))))))))))))) H37e9@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H37e7@t)))))) (set! H4b84@H30a0@cond-macro H30a0@cond-macro) (set! H30a2@do-include (lambda (H3839@stx H383a@id H383b@filename) (let ((H383f@filename (H2ec9@stx->datum H383b@filename))) (begin (if (not (and (string? H383f@filename) (H2eb5@id? H383a@id))) (H319c@syntax-violation '#f '"invalid syntax" H3839@stx) (void)) (cons (H3072@bless 'begin) (with-input-from-file H383f@filename (lambda () (let H3843@f ((H3841@ls '())) (let ((H3845@x (H29f7@H28c7@read-annotated))) (if (eof-object? H3845@x) (reverse H3841@ls) (H3843@f (cons (H2e95@datum->stx H383a@id H3845@x) H3841@ls)))))))))))) (set! H4b85@H30a2@do-include H30a2@do-include) (set! H30a4@include-macro (lambda (H3847@e) (let ((H3849@t H3847@e)) (let ((H384b@ls/false (H30bc@syntax-dispatch H3849@t '(any any)))) (if H384b@ls/false (apply (lambda (H384d@id H384e@filename) (H30a2@do-include H3847@e H384d@id H384e@filename)) H384b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3849@t)))))) (set! H4b86@H30a4@include-macro H30a4@include-macro) (set! H30a6@include-into-macro (lambda (H3851@e) (let ((H3853@t H3851@e)) (let ((H3855@ls/false (H30bc@syntax-dispatch H3853@t '(_ any any)))) (if H3855@ls/false (apply (lambda (H3857@id H3858@filename) (H30a2@do-include H3851@e H3857@id H3858@filename)) H3855@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3853@t)))))) (set! H4b87@H30a6@include-into-macro H30a6@include-into-macro) (set! H30a8@syntax-rules-macro (lambda (H385b@e) (let ((H385d@t H385b@e)) (let ((H385f@ls/false (H30bc@syntax-dispatch H385d@t '(_ each-any . #(each (any any)))))) (if H385f@ls/false (apply (lambda (H3861@lits H3862@pat* H3863@tmp*) (begin (H30c2@verify-literals H3861@lits H385b@e) (H3072@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons H3861@lits (map (lambda (H3867@pat H3868@tmp) (let ((H386b@t H3867@pat)) (let ((H386d@ls/false (H30bc@syntax-dispatch H386b@t '(_ . any)))) (if H386d@ls/false (apply (lambda (H386f@rest) (list (cons 'g H386f@rest) (list 'syntax H3868@tmp))) H386d@ls/false) (let ((H3871@t H386b@t)) (let ((H3873@ls/false (H30bc@syntax-dispatch H3871@t '_))) (if H3873@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid syntax-rules pattern" H385b@e H3867@pat)) H3873@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3871@t)))))))) H3862@pat* H3863@tmp*)))))))) H385f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H385d@t)))))) (set! H4b88@H30a8@syntax-rules-macro H30a8@syntax-rules-macro) (set! H30aa@quasiquote-macro (letrec* ((H3876@datum (lambda (H3977@x) (list (H3044@scheme-stx 'quote) (H2e9d@mkstx H3977@x '() '() '())))) (H3892@quasicons* (lambda (H396f@x H3970@y) (let H3975@f ((H3973@x H396f@x)) (if (null? H3973@x) H3970@y (H3894@quasicons (car H3973@x) (H3975@f (cdr H3973@x))))))) (H3894@quasicons (lambda (H3949@x H394a@y) (let ((H394d@t H394a@y)) (let ((H394f@ls/false (H30bc@syntax-dispatch H394d@t '(#(scheme-id quote) any)))) (if H394f@ls/false (apply (lambda (H3951@dy) (let ((H3953@t H3949@x)) (let ((H3955@ls/false (H30bc@syntax-dispatch H3953@t '(#(scheme-id quote) any)))) (if H3955@ls/false (apply (lambda (H3957@dx) (list (H3044@scheme-stx 'quote) (cons H3957@dx H3951@dy))) H3955@ls/false) (let ((H3959@t H3953@t)) (let ((H395b@ls/false (H30bc@syntax-dispatch H3959@t '_))) (if H395b@ls/false (apply (lambda () (let ((H395d@t H3951@dy)) (let ((H395f@ls/false (H30bc@syntax-dispatch H395d@t '()))) (if H395f@ls/false (apply (lambda () (list (H3044@scheme-stx 'list) H3949@x)) H395f@ls/false) (let ((H3961@t H395d@t)) (let ((H3963@ls/false (H30bc@syntax-dispatch H3961@t '_))) (if H3963@ls/false (apply (lambda () (list (H3044@scheme-stx 'cons) H3949@x H394a@y)) H3963@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3961@t)))))))) H395b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3959@t)))))))) H394f@ls/false) (let ((H3965@t H394d@t)) (let ((H3967@ls/false (H30bc@syntax-dispatch H3965@t '(#(scheme-id list) . each-any)))) (if H3967@ls/false (apply (lambda (H3969@stuff) (cons* (H3044@scheme-stx 'list) H3949@x H3969@stuff)) H3967@ls/false) (let ((H396b@t H3965@t)) (let ((H396d@ls/false (H30bc@syntax-dispatch H396b@t '_))) (if H396d@ls/false (apply (lambda () (list (H3044@scheme-stx 'cons) H3949@x H394a@y)) H396d@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H396b@t)))))))))))) (H3896@quasiappend (lambda (H392f@x H3930@y) (let ((H3933@ls (let H3937@f ((H3935@x H392f@x)) (if (null? H3935@x) (let ((H3939@t H3930@y)) (let ((H393b@ls/false (H30bc@syntax-dispatch H3939@t '(#(scheme-id quote) ())))) (if H393b@ls/false (apply (lambda () '()) H393b@ls/false) (let ((H393d@t H3939@t)) (let ((H393f@ls/false (H30bc@syntax-dispatch H393d@t '_))) (if H393f@ls/false (apply (lambda () (list H3930@y)) H393f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H393d@t))))))) (let ((H3941@t (car H3935@x))) (let ((H3943@ls/false (H30bc@syntax-dispatch H3941@t '(#(scheme-id quote) ())))) (if H3943@ls/false (apply (lambda () (H3937@f (cdr H3935@x))) H3943@ls/false) (let ((H3945@t H3941@t)) (let ((H3947@ls/false (H30bc@syntax-dispatch H3945@t '_))) (if H3947@ls/false (apply (lambda () (cons (car H3935@x) (H3937@f (cdr H3935@x)))) H3947@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3945@t))))))))))) (if (null? H3933@ls) (list (H3044@scheme-stx 'quote) '()) (if (null? (cdr H3933@ls)) (car H3933@ls) (cons* (H3044@scheme-stx 'append) H3933@ls)))))) (H3898@quasivector (lambda (H38fd@x) (let ((H38ff@pat-x H38fd@x)) (let ((H3901@t H38ff@pat-x)) (let ((H3903@ls/false (H30bc@syntax-dispatch H3901@t '(#(scheme-id quote) each-any)))) (if H3903@ls/false (apply (lambda (H3905@x*) (list (H3044@scheme-stx 'quote) (list->vector H3905@x*))) H3903@ls/false) (let ((H3907@t H3901@t)) (let ((H3909@ls/false (H30bc@syntax-dispatch H3907@t '_))) (if H3909@ls/false (apply (lambda () (let H3911@f ((H390b@x H38fd@x) (H390c@k (lambda (H390f@ls) (cons* (H3044@scheme-stx 'vector) H390f@ls)))) (let ((H3913@t H390b@x)) (let ((H3915@ls/false (H30bc@syntax-dispatch H3913@t '(#(scheme-id quote) each-any)))) (if H3915@ls/false (apply (lambda (H3917@x*) (H390c@k (map (lambda (H3919@x) (list (H3044@scheme-stx 'quote) H3919@x)) H3917@x*))) H3915@ls/false) (let ((H391b@t H3913@t)) (let ((H391d@ls/false (H30bc@syntax-dispatch H391b@t '(#(scheme-id list) . each-any)))) (if H391d@ls/false (apply (lambda (H391f@x*) (H390c@k H391f@x*)) H391d@ls/false) (let ((H3921@t H391b@t)) (let ((H3923@ls/false (H30bc@syntax-dispatch H3921@t '(#(scheme-id cons) any any)))) (if H3923@ls/false (apply (lambda (H3925@x H3926@y) (H3911@f H3926@y (lambda (H3929@ls) (H390c@k (cons H3925@x H3929@ls))))) H3923@ls/false) (let ((H392b@t H3921@t)) (let ((H392d@ls/false (H30bc@syntax-dispatch H392b@t '_))) (if H392d@ls/false (apply (lambda () (list (H3044@scheme-stx 'list->vector) H38ff@pat-x)) H392d@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H392b@t))))))))))))))) H3909@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3907@t)))))))))) (H389a@vquasi (lambda (H38db@p H38dc@lev) (let ((H38df@t H38db@p)) (let ((H38e1@ls/false (H30bc@syntax-dispatch H38df@t '(any . any)))) (if H38e1@ls/false (apply (lambda (H38e3@p H38e4@q) (let ((H38e7@t H38e3@p)) (let ((H38e9@ls/false (H30bc@syntax-dispatch H38e7@t '(#(scheme-id unquote) . each-any)))) (if H38e9@ls/false (apply (lambda (H38eb@p) (if (= H38dc@lev '0) (H3892@quasicons* H38eb@p (H389a@vquasi H38e4@q H38dc@lev)) (H3894@quasicons (H3894@quasicons (H3876@datum 'unquote) (H389c@quasi H38eb@p (- H38dc@lev '1))) (H389a@vquasi H38e4@q H38dc@lev)))) H38e9@ls/false) (let ((H38ed@t H38e7@t)) (let ((H38ef@ls/false (H30bc@syntax-dispatch H38ed@t '(#(scheme-id unquote-splicing) . each-any)))) (if H38ef@ls/false (apply (lambda (H38f1@p) (if (= H38dc@lev '0) (H3896@quasiappend H38f1@p (H389a@vquasi H38e4@q H38dc@lev)) (H3894@quasicons (H3894@quasicons (H3876@datum 'unquote-splicing) (H389c@quasi H38f1@p (- H38dc@lev '1))) (H389a@vquasi H38e4@q H38dc@lev)))) H38ef@ls/false) (let ((H38f3@t H38ed@t)) (let ((H38f5@ls/false (H30bc@syntax-dispatch H38f3@t 'any))) (if H38f5@ls/false (apply (lambda (H38f7@p) (H3894@quasicons (H389c@quasi H38f7@p H38dc@lev) (H389a@vquasi H38e4@q H38dc@lev))) H38f5@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H38f3@t))))))))))) H38e1@ls/false) (let ((H38f9@t H38df@t)) (let ((H38fb@ls/false (H30bc@syntax-dispatch H38f9@t '()))) (if H38fb@ls/false (apply (lambda () (list (H3044@scheme-stx 'quote) '())) H38fb@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H38f9@t))))))))) (H389c@quasi (lambda (H38a5@p H38a6@lev) (let ((H38a9@t H38a5@p)) (let ((H38ab@ls/false (H30bc@syntax-dispatch H38a9@t '(#(scheme-id unquote) any)))) (if H38ab@ls/false (apply (lambda (H38ad@p) (if (= H38a6@lev '0) H38ad@p (H3894@quasicons (H3876@datum 'unquote) (H389c@quasi (list H38ad@p) (- H38a6@lev '1))))) H38ab@ls/false) (let ((H38af@t H38a9@t)) (let ((H38b1@ls/false (H30bc@syntax-dispatch H38af@t '((#(scheme-id unquote) . each-any) . any)))) (if H38b1@ls/false (apply (lambda (H38b3@p H38b4@q) (if (= H38a6@lev '0) (H3892@quasicons* H38b3@p (H389c@quasi H38b4@q H38a6@lev)) (H3894@quasicons (H3894@quasicons (H3876@datum 'unquote) (H389c@quasi H38b3@p (- H38a6@lev '1))) (H389c@quasi H38b4@q H38a6@lev)))) H38b1@ls/false) (let ((H38b7@t H38af@t)) (let ((H38b9@ls/false (H30bc@syntax-dispatch H38b7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if H38b9@ls/false (apply (lambda (H38bb@p H38bc@q) (if (= H38a6@lev '0) (H3896@quasiappend H38bb@p (H389c@quasi H38bc@q H38a6@lev)) (H3894@quasicons (H3894@quasicons (H3876@datum 'unquote-splicing) (H389c@quasi H38bb@p (- H38a6@lev '1))) (H389c@quasi H38bc@q H38a6@lev)))) H38b9@ls/false) (let ((H38bf@t H38b7@t)) (let ((H38c1@ls/false (H30bc@syntax-dispatch H38bf@t '(#(scheme-id quasiquote) any)))) (if H38c1@ls/false (apply (lambda (H38c3@p) (H3894@quasicons (H3876@datum 'quasiquote) (H389c@quasi (list H38c3@p) (+ H38a6@lev '1)))) H38c1@ls/false) (let ((H38c5@t H38bf@t)) (let ((H38c7@ls/false (H30bc@syntax-dispatch H38c5@t '(any . any)))) (if H38c7@ls/false (apply (lambda (H38c9@p H38ca@q) (H3894@quasicons (H389c@quasi H38c9@p H38a6@lev) (H389c@quasi H38ca@q H38a6@lev))) H38c7@ls/false) (let ((H38cd@t H38c5@t)) (let ((H38cf@ls/false (H30bc@syntax-dispatch H38cd@t '#(vector each-any)))) (if (and H38cf@ls/false (apply (lambda (H38d1@x) (not (H2e81@stx? H38d1@x))) H38cf@ls/false)) (apply (lambda (H38d3@x) (H3898@quasivector (H389a@vquasi H38d3@x H38a6@lev))) H38cf@ls/false) (let ((H38d5@t H38cd@t)) (let ((H38d7@ls/false (H30bc@syntax-dispatch H38d5@t 'any))) (if H38d7@ls/false (apply (lambda (H38d9@p) (list (H3044@scheme-stx 'quote) H38d9@p)) H38d7@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H38d5@t))))))))))))))))))))))))) (lambda (H389d@x) (let ((H389f@t H389d@x)) (let ((H38a1@ls/false (H30bc@syntax-dispatch H389f@t '(_ any)))) (if H38a1@ls/false (apply (lambda (H38a3@e) (H389c@quasi H38a3@e '0)) H38a1@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H389f@t))))))) (set! H4b89@H30aa@quasiquote-macro H30aa@quasiquote-macro) (set! H30ac@quasisyntax-macro (letrec* ((H397a@quasi (lambda (H3995@p H3996@lev) (let ((H3999@t H3995@p)) (let ((H399b@ls/false (H30bc@syntax-dispatch H3999@t '(#(scheme-id unsyntax) any)))) (if H399b@ls/false (apply (lambda (H399d@p) (if (= H3996@lev '0) (let ((H399f@g (gensym))) (values (list H399f@g) (list H399d@p) H399f@g)) (call-with-values (lambda () (H397a@quasi H399d@p (- H3996@lev '1))) (lambda (H39a7@H39a2 H39a8@H39a4 H39a9@H39a6) (let ((H39ad@p H39a9@H39a6) (H39ae@rhs* H39a8@H39a4) (H39af@lhs* H39a7@H39a2)) (values H39af@lhs* H39ae@rhs* (list 'unsyntax H39ad@p))))))) H399b@ls/false) (let ((H39b3@t H3999@t)) (let ((H39b5@ls/false (H30bc@syntax-dispatch H39b3@t '#(scheme-id unsyntax)))) (if (and H39b5@ls/false (apply (lambda () (= H3996@lev '0)) H39b5@ls/false)) (apply (lambda () (H319c@syntax-violation '#f '"incorrect use of unsyntax" H3995@p)) H39b5@ls/false) (let ((H39b7@t H39b3@t)) (let ((H39b9@ls/false (H30bc@syntax-dispatch H39b7@t '((#(scheme-id unsyntax) . each-any) . any)))) (if H39b9@ls/false (apply (lambda (H39bb@p* H39bc@q) (call-with-values (lambda () (H397a@quasi H39bc@q H3996@lev)) (lambda (H39c5@H39c0 H39c6@H39c2 H39c7@H39c4) (let ((H39cb@q H39c7@H39c4) (H39cc@rhs* H39c6@H39c2) (H39cd@lhs* H39c5@H39c0)) (if (= H3996@lev '0) (let ((H39d1@g* (map (lambda (H39d3@x) (gensym)) H39bb@p*))) (values (append H39d1@g* H39cd@lhs*) (append H39bb@p* H39cc@rhs*) (append H39d1@g* H39cb@q))) (call-with-values (lambda () (H397a@quasi H39bb@p* (- H3996@lev '1))) (lambda (H39db@H39d6 H39dc@H39d8 H39dd@H39da) (let ((H39e1@p* H39dd@H39da) (H39e2@rhs2* H39dc@H39d8) (H39e3@lhs2* H39db@H39d6)) (values (append H39e3@lhs2* H39cd@lhs*) (append H39e2@rhs2* H39cc@rhs*) (cons (cons 'unsyntax H39e1@p*) H39cb@q)))))))))) H39b9@ls/false) (let ((H39e7@t H39b7@t)) (let ((H39e9@ls/false (H30bc@syntax-dispatch H39e7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if H39e9@ls/false (apply (lambda (H39eb@p* H39ec@q) (call-with-values (lambda () (H397a@quasi H39ec@q H3996@lev)) (lambda (H39f5@H39f0 H39f6@H39f2 H39f7@H39f4) (let ((H39fb@q H39f7@H39f4) (H39fc@rhs* H39f6@H39f2) (H39fd@lhs* H39f5@H39f0)) (if (= H3996@lev '0) (let ((H3a01@g* (map (lambda (H3a03@x) (gensym)) H39eb@p*))) (values (append (map (lambda (H3a05@g) (cons H3a05@g '(...))) H3a01@g*) H39fd@lhs*) (append H39eb@p* H39fc@rhs*) (append (apply append (map (lambda (H3a07@g) (cons H3a07@g '(...))) H3a01@g*)) H39fb@q))) (call-with-values (lambda () (H397a@quasi H39eb@p* (- H3996@lev '1))) (lambda (H3a0f@H3a0a H3a10@H3a0c H3a11@H3a0e) (let ((H3a15@p* H3a11@H3a0e) (H3a16@rhs2* H3a10@H3a0c) (H3a17@lhs2* H3a0f@H3a0a)) (values (append H3a17@lhs2* H39fd@lhs*) (append H3a16@rhs2* H39fc@rhs*) (cons (cons 'unsyntax-splicing H3a15@p*) H39fb@q)))))))))) H39e9@ls/false) (let ((H3a1b@t H39e7@t)) (let ((H3a1d@ls/false (H30bc@syntax-dispatch H3a1b@t '#(scheme-id unsyntax-splicing)))) (if (and H3a1d@ls/false (apply (lambda () (= H3996@lev '0)) H3a1d@ls/false)) (apply (lambda () (H319c@syntax-violation '#f '"incorrect use of unsyntax-splicing" H3995@p)) H3a1d@ls/false) (let ((H3a1f@t H3a1b@t)) (let ((H3a21@ls/false (H30bc@syntax-dispatch H3a1f@t '(#(scheme-id quasisyntax) any)))) (if H3a21@ls/false (apply (lambda (H3a23@p) (call-with-values (lambda () (H397a@quasi H3a23@p (+ H3996@lev '1))) (lambda (H3a2b@H3a26 H3a2c@H3a28 H3a2d@H3a2a) (let ((H3a31@p H3a2d@H3a2a) (H3a32@rhs* H3a2c@H3a28) (H3a33@lhs* H3a2b@H3a26)) (values H3a33@lhs* H3a32@rhs* (list 'quasisyntax H3a31@p)))))) H3a21@ls/false) (let ((H3a37@t H3a1f@t)) (let ((H3a39@ls/false (H30bc@syntax-dispatch H3a37@t '(any . any)))) (if H3a39@ls/false (apply (lambda (H3a3b@p H3a3c@q) (call-with-values (lambda () (H397a@quasi H3a3b@p H3996@lev)) (lambda (H3a4b@H3a40 H3a4c@H3a42 H3a4d@H3a44) (call-with-values (lambda () (H397a@quasi H3a3c@q H3996@lev)) (lambda (H3a51@H3a46 H3a52@H3a48 H3a53@H3a4a) (let ((H3a57@q H3a53@H3a4a) (H3a58@rhs2* H3a52@H3a48) (H3a59@lhs2* H3a51@H3a46) (H3a5a@p H3a4d@H3a44) (H3a5b@rhs* H3a4c@H3a42) (H3a5c@lhs* H3a4b@H3a40)) (values (append H3a59@lhs2* H3a5c@lhs*) (append H3a58@rhs2* H3a5b@rhs*) (cons H3a5a@p H3a57@q)))))))) H3a39@ls/false) (let ((H3a63@t H3a37@t)) (let ((H3a65@ls/false (H30bc@syntax-dispatch H3a63@t '#(vector each-any)))) (if H3a65@ls/false (apply (lambda (H3a67@x*) (call-with-values (lambda () (H397a@quasi H3a67@x* H3996@lev)) (lambda (H3a6f@H3a6a H3a70@H3a6c H3a71@H3a6e) (let ((H3a75@x* H3a71@H3a6e) (H3a76@rhs* H3a70@H3a6c) (H3a77@lhs* H3a6f@H3a6a)) (values H3a77@lhs* H3a76@rhs* (list->vector H3a75@x*)))))) H3a65@ls/false) (let ((H3a7b@t H3a63@t)) (let ((H3a7d@ls/false (H30bc@syntax-dispatch H3a7b@t '_))) (if H3a7d@ls/false (apply (lambda () (values '() '() H3995@p)) H3a7d@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3a7b@t))))))))))))))))))))))))))))))) (lambda (H397b@x) (let ((H397d@t H397b@x)) (let ((H397f@ls/false (H30bc@syntax-dispatch H397d@t '(_ any)))) (if H397f@ls/false (apply (lambda (H3981@e) (call-with-values (lambda () (H397a@quasi H3981@e '0)) (lambda (H3989@H3984 H398a@H3986 H398b@H3988) (let ((H398f@v H398b@H3988) (H3990@rhs* H398a@H3986) (H3991@lhs* H3989@H3984)) (H3072@bless (list 'syntax-case (cons 'list H3990@rhs*) '() (list H3991@lhs* (list 'syntax H398f@v)))))))) H397f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H397d@t))))))) (set! H4b8a@H30ac@quasisyntax-macro H30ac@quasisyntax-macro) (set! H30ae@define-struct-macro (lambda (H3a7f@stx) (H319c@syntax-violation '#f '"define-struct not supported" H3a7f@stx))) (set! H4b8b@H30ae@define-struct-macro H30ae@define-struct-macro) (set! H30b0@define-record-type-macro (lambda (H3a81@x) (letrec* ((H3a84@id (lambda (H3c77@ctxt . H3c79@str*) (H31a0@datum->syntax H3c77@ctxt (string->symbol (apply string-append (map (lambda (H3c7b@x) (if (symbol? H3c7b@x) (symbol->string H3c7b@x) (if (string? H3c7b@x) H3c7b@x (assertion-violation 'define-record-type '"BUG")))) H3c79@str*)))))) (H3a86@get-record-name (lambda (H3c65@spec) (let ((H3c67@t H3c65@spec)) (let ((H3c69@ls/false (H30bc@syntax-dispatch H3c67@t '(any any any)))) (if H3c69@ls/false (apply (lambda (H3c6b@foo H3c6c@make-foo H3c6d@foo?) H3c6b@foo) H3c69@ls/false) (let ((H3c71@t H3c67@t)) (let ((H3c73@ls/false (H30bc@syntax-dispatch H3c71@t 'any))) (if H3c73@ls/false (apply (lambda (H3c75@foo) H3c75@foo) H3c73@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3c71@t))))))))) (H3a88@get-record-constructor-name (lambda (H3c51@spec) (let ((H3c53@t H3c51@spec)) (let ((H3c55@ls/false (H30bc@syntax-dispatch H3c53@t '(any any any)))) (if H3c55@ls/false (apply (lambda (H3c57@foo H3c58@make-foo H3c59@foo?) H3c58@make-foo) H3c55@ls/false) (let ((H3c5d@t H3c53@t)) (let ((H3c5f@ls/false (H30bc@syntax-dispatch H3c5d@t 'any))) (if (and H3c5f@ls/false (apply (lambda (H3c61@foo) (H2eb5@id? H3c61@foo)) H3c5f@ls/false)) (apply (lambda (H3c63@foo) (H3a84@id H3c63@foo '"make-" (H2ec9@stx->datum H3c63@foo))) H3c5f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3c5d@t))))))))) (H3a8a@get-record-predicate-name (lambda (H3c3d@spec) (let ((H3c3f@t H3c3d@spec)) (let ((H3c41@ls/false (H30bc@syntax-dispatch H3c3f@t '(any any any)))) (if H3c41@ls/false (apply (lambda (H3c43@foo H3c44@make-foo H3c45@foo?) H3c45@foo?) H3c41@ls/false) (let ((H3c49@t H3c3f@t)) (let ((H3c4b@ls/false (H30bc@syntax-dispatch H3c49@t 'any))) (if (and H3c4b@ls/false (apply (lambda (H3c4d@foo) (H2eb5@id? H3c4d@foo)) H3c4b@ls/false)) (apply (lambda (H3c4f@foo) (H3a84@id H3c4f@foo (H2ec9@stx->datum H3c4f@foo) '"?")) H3c4b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3c49@t))))))))) (H3a8c@get-clause (lambda (H3c2b@id H3c2c@ls) (let ((H3c2f@t H3c2c@ls)) (let ((H3c31@ls/false (H30bc@syntax-dispatch H3c2f@t '()))) (if H3c31@ls/false (apply (lambda () '#f) H3c31@ls/false) (let ((H3c33@t H3c2f@t)) (let ((H3c35@ls/false (H30bc@syntax-dispatch H3c33@t '((any . any) . any)))) (if H3c35@ls/false (apply (lambda (H3c37@x H3c38@rest H3c39@ls) (if (H2ebb@free-id=? (H3072@bless H3c2b@id) H3c37@x) (cons H3c37@x H3c38@rest) (H3a8c@get-clause H3c2b@id H3c39@ls))) H3c35@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3c33@t))))))))) (H3a8e@foo-rtd-code (lambda (H3bd9@name H3bda@clause* H3bdb@parent-rtd-code) (letrec* ((H3be0@convert-field-spec* (lambda (H3c11@ls) (list->vector (map (lambda (H3c13@x) (let ((H3c15@t H3c13@x)) (let ((H3c17@ls/false (H30bc@syntax-dispatch H3c15@t '(#(scheme-id mutable) any . any)))) (if H3c17@ls/false (apply (lambda (H3c19@name H3c1a@rest) (list 'mutable H3c19@name)) H3c17@ls/false) (let ((H3c1d@t H3c15@t)) (let ((H3c1f@ls/false (H30bc@syntax-dispatch H3c1d@t '(#(scheme-id immutable) any . any)))) (if H3c1f@ls/false (apply (lambda (H3c21@name H3c22@rest) (list 'immutable H3c21@name)) H3c1f@ls/false) (let ((H3c25@t H3c1d@t)) (let ((H3c27@ls/false (H30bc@syntax-dispatch H3c25@t 'any))) (if H3c27@ls/false (apply (lambda (H3c29@name) (list 'immutable H3c29@name)) H3c27@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3c25@t))))))))))) H3c11@ls))))) (let ((H3be1@uid-code (let ((H3be9@t (H3a8c@get-clause 'nongenerative H3bda@clause*))) (let ((H3beb@ls/false (H30bc@syntax-dispatch H3be9@t '(_)))) (if H3beb@ls/false (apply (lambda () (list 'quote (gensym))) H3beb@ls/false) (let ((H3bed@t H3be9@t)) (let ((H3bef@ls/false (H30bc@syntax-dispatch H3bed@t '(_ any)))) (if H3bef@ls/false (apply (lambda (H3bf1@uid) (list 'quote H3bf1@uid)) H3bef@ls/false) (let ((H3bf3@t H3bed@t)) (let ((H3bf5@ls/false (H30bc@syntax-dispatch H3bf3@t '_))) (if H3bf5@ls/false (apply (lambda () '#f) H3bf5@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3bf3@t))))))))))) (H3be2@sealed? (let ((H3bf7@t (H3a8c@get-clause 'sealed H3bda@clause*))) (let ((H3bf9@ls/false (H30bc@syntax-dispatch H3bf7@t '(_ #(atom #t))))) (if H3bf9@ls/false (apply (lambda () '#t) H3bf9@ls/false) (let ((H3bfb@t H3bf7@t)) (let ((H3bfd@ls/false (H30bc@syntax-dispatch H3bfb@t '_))) (if H3bfd@ls/false (apply (lambda () '#f) H3bfd@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3bfb@t)))))))) (H3be3@opaque? (let ((H3bff@t (H3a8c@get-clause 'opaque H3bda@clause*))) (let ((H3c01@ls/false (H30bc@syntax-dispatch H3bff@t '(_ #(atom #t))))) (if H3c01@ls/false (apply (lambda () '#t) H3c01@ls/false) (let ((H3c03@t H3bff@t)) (let ((H3c05@ls/false (H30bc@syntax-dispatch H3c03@t '_))) (if H3c05@ls/false (apply (lambda () '#f) H3c05@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3c03@t)))))))) (H3be4@fields (let ((H3c07@t (H3a8c@get-clause 'fields H3bda@clause*))) (let ((H3c09@ls/false (H30bc@syntax-dispatch H3c07@t '(_ . each-any)))) (if H3c09@ls/false (apply (lambda (H3c0b@field-spec*) (list 'quote (H3be0@convert-field-spec* H3c0b@field-spec*))) H3c09@ls/false) (let ((H3c0d@t H3c07@t)) (let ((H3c0f@ls/false (H30bc@syntax-dispatch H3c0d@t '_))) (if H3c0f@ls/false (apply (lambda () ''#()) H3c0f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3c0d@t))))))))) (H3072@bless (list 'make-record-type-descriptor (list 'quote H3bd9@name) H3bdb@parent-rtd-code H3be1@uid-code H3be2@sealed? H3be3@opaque? H3be4@fields)))))) (H3a90@parent-rtd-code (lambda (H3bc1@clause*) (let ((H3bc3@t (H3a8c@get-clause 'parent H3bc1@clause*))) (let ((H3bc5@ls/false (H30bc@syntax-dispatch H3bc3@t '(_ any)))) (if H3bc5@ls/false (apply (lambda (H3bc7@name) (list 'record-type-descriptor H3bc7@name)) H3bc5@ls/false) (let ((H3bc9@t H3bc3@t)) (let ((H3bcb@ls/false (H30bc@syntax-dispatch H3bc9@t '#(atom #f)))) (if H3bcb@ls/false (apply (lambda () (let ((H3bcd@t (H3a8c@get-clause 'parent-rtd H3bc1@clause*))) (let ((H3bcf@ls/false (H30bc@syntax-dispatch H3bcd@t '(_ any any)))) (if H3bcf@ls/false (apply (lambda (H3bd1@rtd H3bd2@rcd) H3bd1@rtd) H3bcf@ls/false) (let ((H3bd5@t H3bcd@t)) (let ((H3bd7@ls/false (H30bc@syntax-dispatch H3bd5@t '#(atom #f)))) (if H3bd7@ls/false (apply (lambda () '#f) H3bd7@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3bd5@t)))))))) H3bcb@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3bc9@t))))))))) (H3a92@parent-rcd-code (lambda (H3ba9@clause*) (let ((H3bab@t (H3a8c@get-clause 'parent H3ba9@clause*))) (let ((H3bad@ls/false (H30bc@syntax-dispatch H3bab@t '(_ any)))) (if H3bad@ls/false (apply (lambda (H3baf@name) (list 'record-constructor-descriptor H3baf@name)) H3bad@ls/false) (let ((H3bb1@t H3bab@t)) (let ((H3bb3@ls/false (H30bc@syntax-dispatch H3bb1@t '#(atom #f)))) (if H3bb3@ls/false (apply (lambda () (let ((H3bb5@t (H3a8c@get-clause 'parent-rtd H3ba9@clause*))) (let ((H3bb7@ls/false (H30bc@syntax-dispatch H3bb5@t '(_ any any)))) (if H3bb7@ls/false (apply (lambda (H3bb9@rtd H3bba@rcd) H3bba@rcd) H3bb7@ls/false) (let ((H3bbd@t H3bb5@t)) (let ((H3bbf@ls/false (H30bc@syntax-dispatch H3bbd@t '#(atom #f)))) (if H3bbf@ls/false (apply (lambda () '#f) H3bbf@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3bbd@t)))))))) H3bb3@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3bb1@t))))))))) (H3a94@foo-rcd-code (lambda (H3ba1@clause* H3ba2@foo-rtd H3ba3@protocol H3ba4@parent-rcd-code) (list 'make-record-constructor-descriptor H3ba2@foo-rtd H3ba4@parent-rcd-code H3ba3@protocol))) (H3a96@get-protocol-code (lambda (H3b95@clause*) (let ((H3b97@t (H3a8c@get-clause 'protocol H3b95@clause*))) (let ((H3b99@ls/false (H30bc@syntax-dispatch H3b97@t '(_ any)))) (if H3b99@ls/false (apply (lambda (H3b9b@expr) H3b9b@expr) H3b99@ls/false) (let ((H3b9d@t H3b97@t)) (let ((H3b9f@ls/false (H30bc@syntax-dispatch H3b9d@t '_))) (if H3b9f@ls/false (apply (lambda () '#f) H3b9f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3b9d@t))))))))) (H3a98@get-fields (lambda (H3b83@clause*) (let ((H3b85@t H3b83@clause*)) (let ((H3b87@ls/false (H30bc@syntax-dispatch H3b85@t '()))) (if H3b87@ls/false (apply (lambda () '()) H3b87@ls/false) (let ((H3b89@t H3b85@t)) (let ((H3b8b@ls/false (H30bc@syntax-dispatch H3b89@t '((#(scheme-id fields) . each-any) . _)))) (if H3b8b@ls/false (apply (lambda (H3b8d@f*) H3b8d@f*) H3b8b@ls/false) (let ((H3b8f@t H3b89@t)) (let ((H3b91@ls/false (H30bc@syntax-dispatch H3b8f@t '(_ . any)))) (if H3b91@ls/false (apply (lambda (H3b93@rest) (H3a98@get-fields H3b93@rest)) H3b91@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3b8f@t)))))))))))) (H3a9a@get-mutator-indices (lambda (H3b6b@fields) (let H3b71@f ((H3b6d@fields H3b6b@fields) (H3b6e@i '0)) (let ((H3b73@t H3b6d@fields)) (let ((H3b75@ls/false (H30bc@syntax-dispatch H3b73@t '()))) (if H3b75@ls/false (apply (lambda () '()) H3b75@ls/false) (let ((H3b77@t H3b73@t)) (let ((H3b79@ls/false (H30bc@syntax-dispatch H3b77@t '((#(scheme-id mutable) . _) . any)))) (if H3b79@ls/false (apply (lambda (H3b7b@rest) (cons H3b6e@i (H3b71@f H3b7b@rest (+ H3b6e@i '1)))) H3b79@ls/false) (let ((H3b7d@t H3b77@t)) (let ((H3b7f@ls/false (H30bc@syntax-dispatch H3b7d@t '(_ . any)))) (if H3b7f@ls/false (apply (lambda (H3b81@rest) (H3b71@f H3b81@rest (+ H3b6e@i '1))) H3b7f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3b7d@t))))))))))))) (H3a9c@get-mutators (lambda (H3b41@foo H3b42@fields) (letrec* ((H3b46@gen-name (lambda (H3b69@x) (H31a0@datum->syntax H3b41@foo (string->symbol (string-append (symbol->string (H31a2@syntax->datum H3b41@foo)) '"-" (symbol->string (H31a2@syntax->datum H3b69@x)) '"-set!")))))) (let H3b49@f ((H3b47@fields H3b42@fields)) (let ((H3b4b@t H3b47@fields)) (let ((H3b4d@ls/false (H30bc@syntax-dispatch H3b4b@t '()))) (if H3b4d@ls/false (apply (lambda () '()) H3b4d@ls/false) (let ((H3b4f@t H3b4b@t)) (let ((H3b51@ls/false (H30bc@syntax-dispatch H3b4f@t '((#(scheme-id mutable) any any any) . any)))) (if H3b51@ls/false (apply (lambda (H3b53@name H3b54@accessor H3b55@mutator H3b56@rest) (cons H3b55@mutator (H3b49@f H3b56@rest))) H3b51@ls/false) (let ((H3b5b@t H3b4f@t)) (let ((H3b5d@ls/false (H30bc@syntax-dispatch H3b5b@t '((#(scheme-id mutable) any) . any)))) (if H3b5d@ls/false (apply (lambda (H3b5f@name H3b60@rest) (cons (H3b46@gen-name H3b5f@name) (H3b49@f H3b60@rest))) H3b5d@ls/false) (let ((H3b63@t H3b5b@t)) (let ((H3b65@ls/false (H30bc@syntax-dispatch H3b63@t '(_ . any)))) (if H3b65@ls/false (apply (lambda (H3b67@rest) (H3b49@f H3b67@rest)) H3b65@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3b63@t))))))))))))))))) (H3a9e@get-accessors (lambda (H3afd@foo H3afe@fields) (letrec* ((H3b02@gen-name (lambda (H3b3f@x) (H31a0@datum->syntax H3afd@foo (string->symbol (string-append (symbol->string (H31a2@syntax->datum H3afd@foo)) '"-" (symbol->string (H31a2@syntax->datum H3b3f@x)))))))) (map (lambda (H3b03@field) (let ((H3b05@t H3b03@field)) (let ((H3b07@ls/false (H30bc@syntax-dispatch H3b05@t '(#(scheme-id mutable) any any any)))) (if (and H3b07@ls/false (apply (lambda (H3b09@name H3b0a@accessor H3b0b@mutator) (H2eb5@id? H3b0a@accessor)) H3b07@ls/false)) (apply (lambda (H3b0f@name H3b10@accessor H3b11@mutator) H3b10@accessor) H3b07@ls/false) (let ((H3b15@t H3b05@t)) (let ((H3b17@ls/false (H30bc@syntax-dispatch H3b15@t '(#(scheme-id immutable) any any)))) (if (and H3b17@ls/false (apply (lambda (H3b19@name H3b1a@accessor) (H2eb5@id? H3b1a@accessor)) H3b17@ls/false)) (apply (lambda (H3b1d@name H3b1e@accessor) H3b1e@accessor) H3b17@ls/false) (let ((H3b21@t H3b15@t)) (let ((H3b23@ls/false (H30bc@syntax-dispatch H3b21@t '(#(scheme-id mutable) any)))) (if (and H3b23@ls/false (apply (lambda (H3b25@name) (H2eb5@id? H3b25@name)) H3b23@ls/false)) (apply (lambda (H3b27@name) (H3b02@gen-name H3b27@name)) H3b23@ls/false) (let ((H3b29@t H3b21@t)) (let ((H3b2b@ls/false (H30bc@syntax-dispatch H3b29@t '(#(scheme-id immutable) any)))) (if (and H3b2b@ls/false (apply (lambda (H3b2d@name) (H2eb5@id? H3b2d@name)) H3b2b@ls/false)) (apply (lambda (H3b2f@name) (H3b02@gen-name H3b2f@name)) H3b2b@ls/false) (let ((H3b31@t H3b29@t)) (let ((H3b33@ls/false (H30bc@syntax-dispatch H3b31@t 'any))) (if (and H3b33@ls/false (apply (lambda (H3b35@name) (H2eb5@id? H3b35@name)) H3b33@ls/false)) (apply (lambda (H3b37@name) (H3b02@gen-name H3b37@name)) H3b33@ls/false) (let ((H3b39@t H3b31@t)) (let ((H3b3b@ls/false (H30bc@syntax-dispatch H3b39@t 'any))) (if H3b3b@ls/false (apply (lambda (H3b3d@others) (H319c@syntax-violation '#f '"invalid field spec" H3b03@field)) H3b3b@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3b39@t)))))))))))))))))))) H3afe@fields)))) (H3aa0@enumerate (lambda (H3af5@ls) (let H3afb@f ((H3af7@ls H3af5@ls) (H3af8@i '0)) (if (null? H3af7@ls) '() (cons H3af8@i (H3afb@f (cdr H3af7@ls) (+ H3af8@i '1))))))) (H3aa2@do-define-record (lambda (H3acd@namespec H3ace@clause*) (let ((H3ad1@foo (H3a86@get-record-name H3acd@namespec))) (let ((H3ad3@foo-rtd (gensym))) (let ((H3ad5@foo-rcd (gensym))) (let ((H3ad7@protocol (gensym))) (let ((H3ad9@make-foo (H3a88@get-record-constructor-name H3acd@namespec))) (let ((H3adb@fields (H3a98@get-fields H3ace@clause*))) (let ((H3add@idx* (H3aa0@enumerate H3adb@fields))) (let ((H3adf@foo-x* (H3a9e@get-accessors H3ad1@foo H3adb@fields))) (let ((H3ae1@set-foo-x!* (H3a9c@get-mutators H3ad1@foo H3adb@fields))) (let ((H3ae3@set-foo-idx* (H3a9a@get-mutator-indices H3adb@fields))) (let ((H3ae5@foo? (H3a8a@get-record-predicate-name H3acd@namespec))) (let ((H3ae7@foo-rtd-code (H3a8e@foo-rtd-code H3ad1@foo H3ace@clause* (H3a90@parent-rtd-code H3ace@clause*)))) (let ((H3ae9@foo-rcd-code (H3a94@foo-rcd-code H3ace@clause* H3ad3@foo-rtd H3ad7@protocol (H3a92@parent-rcd-code H3ace@clause*)))) (let ((H3aeb@protocol-code (H3a96@get-protocol-code H3ace@clause*))) (H3072@bless (cons 'begin (cons (list 'define H3ad3@foo-rtd H3ae7@foo-rtd-code) (cons (list 'define H3ad7@protocol H3aeb@protocol-code) (cons (list 'define H3ad5@foo-rcd H3ae9@foo-rcd-code) (cons (list 'define-syntax H3ad1@foo (list 'list ''$rtd (list 'syntax H3ad3@foo-rtd) (list 'syntax H3ad5@foo-rcd))) (cons (list 'define H3ae5@foo? (list 'record-predicate H3ad3@foo-rtd)) (cons (list 'define H3ad9@make-foo (list 'record-constructor H3ad5@foo-rcd)) (append (map (lambda (H3aed@foo-x H3aee@idx) (list 'define H3aed@foo-x (list 'record-accessor H3ad3@foo-rtd H3aee@idx))) H3adf@foo-x* H3add@idx*) (map (lambda (H3af1@set-foo-x! H3af2@idx) (list 'define H3af1@set-foo-x! (list 'record-mutator H3ad3@foo-rtd H3af2@idx))) H3ae1@set-foo-x!* H3ae3@set-foo-idx*)))))))))))))))))))))))))) (H3aa4@verify-clauses (lambda (H3aad@x H3aae@cls*) (letrec* ((H3ab2@valid-kwds (map H3072@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (H3ab4@free-id-member? (lambda (H3ac9@x H3aca@ls) (and (pair? H3aca@ls) (or (H2ebb@free-id=? H3ac9@x (car H3aca@ls)) (H3ab4@free-id-member? H3ac9@x (cdr H3aca@ls))))))) (let H3ab9@f ((H3ab5@cls* H3aae@cls*) (H3ab6@seen* '())) (if (not (null? H3ab5@cls*)) (let ((H3abb@t (car H3ab5@cls*))) (let ((H3abd@ls/false (H30bc@syntax-dispatch H3abb@t '(any . any)))) (if H3abd@ls/false (apply (lambda (H3abf@kwd H3ac0@rest) (if (or (not (H2eb5@id? H3abf@kwd)) (not (H3ab4@free-id-member? H3abf@kwd H3ab2@valid-kwds))) (H319c@syntax-violation '#f '"not a valid define-record-type keyword" H3abf@kwd) (if (H2ec1@bound-id-member? H3abf@kwd H3ab6@seen*) (H319c@syntax-violation '#f '"duplicate use of keyword " H3aad@x H3abf@kwd) (H3ab9@f (cdr H3ab5@cls*) (cons H3abf@kwd H3ab6@seen*))))) H3abd@ls/false) (let ((H3ac3@t H3abb@t)) (let ((H3ac5@ls/false (H30bc@syntax-dispatch H3ac3@t 'any))) (if H3ac5@ls/false (apply (lambda (H3ac7@cls) (H319c@syntax-violation '#f '"malformed define-record-type clause" H3ac7@cls)) H3ac5@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3ac3@t))))))) (void))))))) (let ((H3aa5@t H3a81@x)) (let ((H3aa7@ls/false (H30bc@syntax-dispatch H3aa5@t '(_ any . each-any)))) (if H3aa7@ls/false (apply (lambda (H3aa9@namespec H3aaa@clause*) (begin (H3aa4@verify-clauses H3a81@x H3aaa@clause*) (H3aa2@do-define-record H3aa9@namespec H3aaa@clause*))) H3aa7@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3aa5@t))))))) (set! H4b8c@H30b0@define-record-type-macro H30b0@define-record-type-macro) (set! H30b2@define-condition-type-macro (lambda (H3c7d@x) (letrec* ((H3c80@mkname (lambda (H3cad@name H3cae@suffix) (H31a0@datum->syntax H3cad@name (string->symbol (string-append (symbol->string (H31a2@syntax->datum H3cad@name)) H3cae@suffix)))))) (let ((H3c81@t H3c7d@x)) (let ((H3c83@ls/false (H30bc@syntax-dispatch H3c81@t '(any any any any any . #(each (any any)))))) (if (and H3c83@ls/false (apply (lambda (H3c85@ctxt H3c86@name H3c87@super H3c88@constructor H3c89@predicate H3c8a@field* H3c8b@accessor*) (and (H2eb5@id? H3c86@name) (H2eb5@id? H3c87@super) (H2eb5@id? H3c88@constructor) (H2eb5@id? H3c89@predicate) (for-all H2eb5@id? H3c8a@field*) (for-all H2eb5@id? H3c8b@accessor*))) H3c83@ls/false)) (apply (lambda (H3c93@ctxt H3c94@name H3c95@super H3c96@constructor H3c97@predicate H3c98@field* H3c99@accessor*) (let ((H3ca1@aux-accessor* (map (lambda (H3ca3@x) (gensym)) H3c99@accessor*))) (H3072@bless (cons 'begin (cons (cons 'define-record-type (cons (list H3c94@name H3c96@constructor (gensym)) (cons (list 'parent H3c95@super) (cons (cons 'fields (map (lambda (H3ca5@field H3ca6@aux) (list 'immutable H3ca5@field H3ca6@aux)) H3c98@field* H3ca1@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define H3c97@predicate (list 'condition-predicate (list 'record-type-descriptor H3c94@name))) (map (lambda (H3ca9@accessor H3caa@aux) (list 'define H3ca9@accessor (list 'condition-accessor (list 'record-type-descriptor H3c94@name) H3caa@aux))) H3c99@accessor* H3ca1@aux-accessor*))))))) H3c83@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3c81@t))))))) (set! H4b8d@H30b2@define-condition-type-macro H30b2@define-condition-type-macro) (set! H30b4@incorrect-usage-macro (lambda (H3cb1@e) (H319c@syntax-violation '#f '"incorrect usage of auxiliary keyword" H3cb1@e))) (set! H4b8e@H30b4@incorrect-usage-macro H30b4@incorrect-usage-macro) (set! H30b6@parameterize-macro (lambda (H3cb3@e) (let ((H3cb5@t H3cb3@e)) (let ((H3cb7@ls/false (H30bc@syntax-dispatch H3cb5@t '(_ () any . each-any)))) (if H3cb7@ls/false (apply (lambda (H3cb9@b H3cba@b*) (H3072@bless (cons 'let (cons '() (cons H3cb9@b H3cba@b*))))) H3cb7@ls/false) (let ((H3cbd@t H3cb5@t)) (let ((H3cbf@ls/false (H30bc@syntax-dispatch H3cbd@t '(_ #(each (any any)) any . each-any)))) (if H3cbf@ls/false (apply (lambda (H3cc1@olhs* H3cc2@orhs* H3cc3@b H3cc4@b*) (let ((H3cc9@lhs* (H318a@generate-temporaries H3cc1@olhs*)) (H3cca@rhs* (H318a@generate-temporaries H3cc2@orhs*))) (H3072@bless (cons (list 'lambda (append H3cc9@lhs* H3cca@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (H3ccd@lhs H3cce@rhs) (list 'let (list (list 't (list H3ccd@lhs))) (list H3ccd@lhs H3cce@rhs) (cons 'set! (cons H3cce@rhs '(t))))) H3cc9@lhs* H3cca@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons H3cc3@b H3cc4@b*))) '(swap)))))) (append H3cc1@olhs* H3cc2@orhs*))))) H3cbf@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3cbd@t))))))))) (set! H4b8f@H30b6@parameterize-macro H30b6@parameterize-macro) (set! H30b8@foreign-call-transformer (lambda (H3cd1@e H3cd2@r H3cd3@mr) (let ((H3cd7@t H3cd1@e)) (let ((H3cd9@ls/false (H30bc@syntax-dispatch H3cd7@t '(_ any . each-any)))) (if H3cd9@ls/false (apply (lambda (H3cdb@name H3cdc@arg*) (cons 'foreign-call (cons (H30de@chi-expr H3cdb@name H3cd2@r H3cd3@mr) (H30da@chi-expr* H3cdc@arg* H3cd2@r H3cd3@mr)))) H3cd9@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3cd7@t)))))) (set! H4b90@H30b8@foreign-call-transformer H30b8@foreign-call-transformer) (set! H30ba@convert-pattern (lambda (H3cdf@pattern H3ce0@keys) (letrec* ((H3ce4@cvt* (lambda (H3d83@p* H3d84@n H3d85@ids) (if (null? H3d83@p*) (values '() H3d85@ids) (call-with-values (lambda () (H3ce4@cvt* (cdr H3d83@p*) H3d84@n H3d85@ids)) (lambda (H3d8d@H3d8a H3d8e@H3d8c) (let ((H3d91@ids H3d8e@H3d8c) (H3d92@y H3d8d@H3d8a)) (call-with-values (lambda () (H3ce6@cvt (car H3d83@p*) H3d84@n H3d91@ids)) (lambda (H3d99@H3d96 H3d9a@H3d98) (let ((H3d9d@ids H3d9a@H3d98) (H3d9e@x H3d99@H3d96)) (values (cons H3d9e@x H3d92@y) H3d9d@ids)))))))))) (H3ce6@cvt (lambda (H3ce7@p H3ce8@n H3ce9@ids) (let ((H3ced@t H3ce7@p)) (let ((H3cef@ls/false (H30bc@syntax-dispatch H3ced@t 'any))) (if (and H3cef@ls/false (apply (lambda (H3cf1@id) (H2eb5@id? H3cf1@id)) H3cef@ls/false)) (apply (lambda (H3cf3@id) (if (H2ec1@bound-id-member? H3ce7@p H3ce0@keys) (values (vector 'free-id H3ce7@p) H3ce9@ids) (if (H2ebb@free-id=? H3ce7@p (H3044@scheme-stx '_)) (values '_ H3ce9@ids) (values 'any (cons (cons H3ce7@p H3ce8@n) H3ce9@ids))))) H3cef@ls/false) (let ((H3cf5@t H3ced@t)) (let ((H3cf7@ls/false (H30bc@syntax-dispatch H3cf5@t '(any any)))) (if (and H3cf7@ls/false (apply (lambda (H3cf9@p H3cfa@dots) (H30be@ellipsis? H3cfa@dots)) H3cf7@ls/false)) (apply (lambda (H3cfd@p H3cfe@dots) (call-with-values (lambda () (H3ce6@cvt H3cfd@p (+ H3ce8@n '1) H3ce9@ids)) (lambda (H3d05@H3d02 H3d06@H3d04) (let ((H3d09@ids H3d06@H3d04) (H3d0a@p H3d05@H3d02)) (values (if (eq? H3d0a@p 'any) 'each-any (vector 'each H3d0a@p)) H3d09@ids))))) H3cf7@ls/false) (let ((H3d0d@t H3cf5@t)) (let ((H3d0f@ls/false (H30bc@syntax-dispatch H3d0d@t '(any any . #(each+ any () any))))) (if (and H3d0f@ls/false (apply (lambda (H3d11@x H3d12@dots H3d13@ys H3d14@z) (H30be@ellipsis? H3d12@dots)) H3d0f@ls/false)) (apply (lambda (H3d19@x H3d1a@dots H3d1b@ys H3d1c@z) (call-with-values (lambda () (H3ce6@cvt H3d1c@z H3ce8@n H3ce9@ids)) (lambda (H3d25@H3d22 H3d26@H3d24) (let ((H3d29@ids H3d26@H3d24) (H3d2a@z H3d25@H3d22)) (call-with-values (lambda () (H3ce4@cvt* H3d1b@ys H3ce8@n H3d29@ids)) (lambda (H3d31@H3d2e H3d32@H3d30) (let ((H3d35@ids H3d32@H3d30) (H3d36@ys H3d31@H3d2e)) (call-with-values (lambda () (H3ce6@cvt H3d19@x (+ H3ce8@n '1) H3d35@ids)) (lambda (H3d3d@H3d3a H3d3e@H3d3c) (let ((H3d41@ids H3d3e@H3d3c) (H3d42@x H3d3d@H3d3a)) (values (vector 'each+ H3d42@x (reverse H3d36@ys) H3d2a@z) H3d41@ids))))))))))) H3d0f@ls/false) (let ((H3d45@t H3d0d@t)) (let ((H3d47@ls/false (H30bc@syntax-dispatch H3d45@t '(any . any)))) (if H3d47@ls/false (apply (lambda (H3d49@x H3d4a@y) (call-with-values (lambda () (H3ce6@cvt H3d4a@y H3ce8@n H3ce9@ids)) (lambda (H3d51@H3d4e H3d52@H3d50) (let ((H3d55@ids H3d52@H3d50) (H3d56@y H3d51@H3d4e)) (call-with-values (lambda () (H3ce6@cvt H3d49@x H3ce8@n H3d55@ids)) (lambda (H3d5d@H3d5a H3d5e@H3d5c) (let ((H3d61@ids H3d5e@H3d5c) (H3d62@x H3d5d@H3d5a)) (values (cons H3d62@x H3d56@y) H3d61@ids)))))))) H3d47@ls/false) (let ((H3d65@t H3d45@t)) (let ((H3d67@ls/false (H30bc@syntax-dispatch H3d65@t '()))) (if H3d67@ls/false (apply (lambda () (values '() H3ce9@ids)) H3d67@ls/false) (let ((H3d69@t H3d65@t)) (let ((H3d6b@ls/false (H30bc@syntax-dispatch H3d69@t '#(vector each-any)))) (if (and H3d6b@ls/false (apply (lambda (H3d6d@p) (not (H2e81@stx? H3d6d@p))) H3d6b@ls/false)) (apply (lambda (H3d6f@p) (call-with-values (lambda () (H3ce6@cvt H3d6f@p H3ce8@n H3ce9@ids)) (lambda (H3d75@H3d72 H3d76@H3d74) (let ((H3d79@ids H3d76@H3d74) (H3d7a@p H3d75@H3d72)) (values (vector 'vector H3d7a@p) H3d79@ids))))) H3d6b@ls/false) (let ((H3d7d@t H3d69@t)) (let ((H3d7f@ls/false (H30bc@syntax-dispatch H3d7d@t 'any))) (if H3d7f@ls/false (apply (lambda (H3d81@datum) (values (vector 'atom (H2ec9@stx->datum H3d81@datum)) H3ce9@ids)) H3d7f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3d7d@t))))))))))))))))))))))))) (H3ce6@cvt H3cdf@pattern '0 '())))) (set! H4b91@H30ba@convert-pattern H30ba@convert-pattern) (set! H30bc@syntax-dispatch (letrec* ((H3da2@stx^ (lambda (H3e7d@e H3e7e@m* H3e7f@s* H3e80@ae*) (if (and (null? H3e7e@m*) (null? H3e7f@s*) (null? H3e80@ae*)) H3e7d@e (H2e9d@mkstx H3e7d@e H3e7e@m* H3e7f@s* H3e80@ae*)))) (H3da4@match-each (lambda (H3e5d@e H3e5e@p H3e5f@m* H3e60@s* H3e61@ae*) (if (pair? H3e5d@e) (let ((H3e67@first (H3db0@match (car H3e5d@e) H3e5e@p H3e5f@m* H3e60@s* H3e61@ae* '()))) (and H3e67@first (let ((H3e69@rest (H3da4@match-each (cdr H3e5d@e) H3e5e@p H3e5f@m* H3e60@s* H3e61@ae*))) (and H3e69@rest (cons H3e67@first H3e69@rest))))) (if (null? H3e5d@e) '() (if (H2e81@stx? H3e5d@e) (and (not (H2e3b@top-marked? H3e5f@m*)) (call-with-values (lambda () (join-wraps H3e5f@m* H3e60@s* H3e61@ae* H3e5d@e)) (lambda (H3e71@H3e6c H3e72@H3e6e H3e73@H3e70) (let ((H3e77@ae* H3e73@H3e70) (H3e78@s* H3e72@H3e6e) (H3e79@m* H3e71@H3e6c)) (H3da4@match-each (H2e83@stx-expr H3e5d@e) H3e5e@p H3e79@m* H3e78@s* H3e77@ae*))))) (if (H29f9@H28cb@annotation? H3e5d@e) (H3da4@match-each (H29fb@H28cf@annotation-expression H3e5d@e) H3e5e@p H3e5f@m* H3e60@s* H3e61@ae*) '#f)))))) (H3da6@match-each+ (lambda (H3e1d@e H3e1e@x-pat H3e1f@y-pat H3e20@z-pat H3e21@m* H3e22@s* H3e23@ae* H3e24@r) (let H3e35@f ((H3e2d@e H3e1d@e) (H3e2e@m* H3e21@m*) (H3e2f@s* H3e22@s*) (H3e30@ae* H3e23@ae*)) (if (pair? H3e2d@e) (call-with-values (lambda () (H3e35@f (cdr H3e2d@e) H3e2e@m* H3e2f@s* H3e30@ae*)) (lambda (H3e3d@H3e38 H3e3e@H3e3a H3e3f@H3e3c) (let ((H3e43@r H3e3f@H3e3c) (H3e44@y-pat H3e3e@H3e3a) (H3e45@xr* H3e3d@H3e38)) (if H3e43@r (if (null? H3e44@y-pat) (let ((H3e49@xr (H3db0@match (car H3e2d@e) H3e1e@x-pat H3e2e@m* H3e2f@s* H3e30@ae* '()))) (if H3e49@xr (values (cons H3e49@xr H3e45@xr*) H3e44@y-pat H3e43@r) (values '#f '#f '#f))) (values '() (cdr H3e44@y-pat) (H3db0@match (car H3e2d@e) (car H3e44@y-pat) H3e2e@m* H3e2f@s* H3e30@ae* H3e43@r))) (values '#f '#f '#f))))) (if (H2e81@stx? H3e2d@e) (if (H2e3b@top-marked? H3e2e@m*) (values '() H3e1f@y-pat (H3db0@match H3e2d@e H3e20@z-pat H3e2e@m* H3e2f@s* H3e30@ae* H3e24@r)) (call-with-values (lambda () (join-wraps H3e2e@m* H3e2f@s* H3e30@ae* H3e2d@e)) (lambda (H3e51@H3e4c H3e52@H3e4e H3e53@H3e50) (let ((H3e57@ae* H3e53@H3e50) (H3e58@s* H3e52@H3e4e) (H3e59@m* H3e51@H3e4c)) (H3e35@f (H2e83@stx-expr H3e2d@e) H3e59@m* H3e58@s* H3e57@ae*))))) (if (H29f9@H28cb@annotation? H3e2d@e) (H3e35@f (H29fb@H28cf@annotation-expression H3e2d@e) H3e2e@m* H3e2f@s* H3e30@ae*) (values '() H3e1f@y-pat (H3db0@match H3e2d@e H3e20@z-pat H3e2e@m* H3e2f@s* H3e30@ae* H3e24@r)))))))) (H3da8@match-each-any (lambda (H3e01@e H3e02@m* H3e03@s* H3e04@ae*) (if (pair? H3e01@e) (let ((H3e09@l (H3da8@match-each-any (cdr H3e01@e) H3e02@m* H3e03@s* H3e04@ae*))) (and H3e09@l (cons (H3da2@stx^ (car H3e01@e) H3e02@m* H3e03@s* H3e04@ae*) H3e09@l))) (if (null? H3e01@e) '() (if (H2e81@stx? H3e01@e) (and (not (H2e3b@top-marked? H3e02@m*)) (call-with-values (lambda () (join-wraps H3e02@m* H3e03@s* H3e04@ae* H3e01@e)) (lambda (H3e11@H3e0c H3e12@H3e0e H3e13@H3e10) (let ((H3e17@ae* H3e13@H3e10) (H3e18@s* H3e12@H3e0e) (H3e19@m* H3e11@H3e0c)) (H3da8@match-each-any (H2e83@stx-expr H3e01@e) H3e19@m* H3e18@s* H3e17@ae*))))) (if (H29f9@H28cb@annotation? H3e01@e) (H3da8@match-each-any (H29fb@H28cf@annotation-expression H3e01@e) H3e02@m* H3e03@s* H3e04@ae*) '#f)))))) (H3daa@match-empty (lambda (H3dfb@p H3dfc@r) (if (null? H3dfb@p) H3dfc@r (if (eq? H3dfb@p '_) H3dfc@r (if (eq? H3dfb@p 'any) (cons '() H3dfc@r) (if (pair? H3dfb@p) (H3daa@match-empty (car H3dfb@p) (H3daa@match-empty (cdr H3dfb@p) H3dfc@r)) (if (eq? H3dfb@p 'each-any) (cons '() H3dfc@r) (let ((H3dff@t (vector-ref H3dfb@p '0))) (if (memv H3dff@t '(each)) (H3daa@match-empty (vector-ref H3dfb@p '1) H3dfc@r) (if (memv H3dff@t '(each+)) (H3daa@match-empty (vector-ref H3dfb@p '1) (H3daa@match-empty (reverse (vector-ref H3dfb@p '2)) (H3daa@match-empty (vector-ref H3dfb@p '3) H3dfc@r))) (if (memv H3dff@t '(free-id atom)) H3dfc@r (if (memv H3dff@t '(scheme-id atom)) H3dfc@r (if (memv H3dff@t '(vector)) (H3daa@match-empty (vector-ref H3dfb@p '1) H3dfc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" H3dfb@p)))))))))))))) (H3dac@combine (lambda (H3df7@r* H3df8@r) (if (null? (car H3df7@r*)) H3df8@r (cons (map car H3df7@r*) (H3dac@combine (map cdr H3df7@r*) H3df8@r))))) (H3dae@match* (lambda (H3dd3@e H3dd4@p H3dd5@m* H3dd6@s* H3dd7@ae* H3dd8@r) (if (null? H3dd4@p) (and (null? H3dd3@e) H3dd8@r) (if (pair? H3dd4@p) (and (pair? H3dd3@e) (H3db0@match (car H3dd3@e) (car H3dd4@p) H3dd5@m* H3dd6@s* H3dd7@ae* (H3db0@match (cdr H3dd3@e) (cdr H3dd4@p) H3dd5@m* H3dd6@s* H3dd7@ae* H3dd8@r))) (if (eq? H3dd4@p 'each-any) (let ((H3ddf@l (H3da8@match-each-any H3dd3@e H3dd5@m* H3dd6@s* H3dd7@ae*))) (and H3ddf@l (cons H3ddf@l H3dd8@r))) (let ((H3de1@t (vector-ref H3dd4@p '0))) (if (memv H3de1@t '(each)) (if (null? H3dd3@e) (H3daa@match-empty (vector-ref H3dd4@p '1) H3dd8@r) (let ((H3de3@r* (H3da4@match-each H3dd3@e (vector-ref H3dd4@p '1) H3dd5@m* H3dd6@s* H3dd7@ae*))) (and H3de3@r* (H3dac@combine H3de3@r* H3dd8@r)))) (if (memv H3de1@t '(free-id)) (and (symbol? H3dd3@e) (H2e3b@top-marked? H3dd5@m*) (H2ebb@free-id=? (H3da2@stx^ H3dd3@e H3dd5@m* H3dd6@s* H3dd7@ae*) (vector-ref H3dd4@p '1)) H3dd8@r) (if (memv H3de1@t '(scheme-id)) (and (symbol? H3dd3@e) (H2e3b@top-marked? H3dd5@m*) (H2ebb@free-id=? (H3da2@stx^ H3dd3@e H3dd5@m* H3dd6@s* H3dd7@ae*) (H3044@scheme-stx (vector-ref H3dd4@p '1))) H3dd8@r) (if (memv H3de1@t '(each+)) (call-with-values (lambda () (H3da6@match-each+ H3dd3@e (vector-ref H3dd4@p '1) (vector-ref H3dd4@p '2) (vector-ref H3dd4@p '3) H3dd5@m* H3dd6@s* H3dd7@ae* H3dd8@r)) (lambda (H3deb@H3de6 H3dec@H3de8 H3ded@H3dea) (let ((H3df1@r H3ded@H3dea) (H3df2@y-pat H3dec@H3de8) (H3df3@xr* H3deb@H3de6)) (and H3df1@r (null? H3df2@y-pat) (if (null? H3df3@xr*) (H3daa@match-empty (vector-ref H3dd4@p '1) H3df1@r) (H3dac@combine H3df3@xr* H3df1@r)))))) (if (memv H3de1@t '(atom)) (and (fast-equal? (vector-ref H3dd4@p '1) (H2ec7@strip H3dd3@e H3dd5@m*)) H3dd8@r) (if (memv H3de1@t '(vector)) (and (vector? H3dd3@e) (H3db0@match (vector->list H3dd3@e) (vector-ref H3dd4@p '1) H3dd5@m* H3dd6@s* H3dd7@ae* H3dd8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" H3dd4@p))))))))))))) (H3db0@match (lambda (H3db5@e H3db6@p H3db7@m* H3db8@s* H3db9@ae* H3dba@r) (if (not H3dba@r) '#f (if (eq? H3db6@p '_) H3dba@r (if (eq? H3db6@p 'any) (cons (H3da2@stx^ H3db5@e H3db7@m* H3db8@s* H3db9@ae*) H3dba@r) (if (H2e81@stx? H3db5@e) (and (not (H2e3b@top-marked? H3db7@m*)) (call-with-values (lambda () (join-wraps H3db7@m* H3db8@s* H3db9@ae* H3db5@e)) (lambda (H3dc7@H3dc2 H3dc8@H3dc4 H3dc9@H3dc6) (let ((H3dcd@ae* H3dc9@H3dc6) (H3dce@s* H3dc8@H3dc4) (H3dcf@m* H3dc7@H3dc2)) (H3db0@match (H2e83@stx-expr H3db5@e) H3db6@p H3dcf@m* H3dce@s* H3dcd@ae* H3dba@r))))) (if (H29f9@H28cb@annotation? H3db5@e) (H3db0@match (H29fb@H28cf@annotation-expression H3db5@e) H3db6@p H3db7@m* H3db8@s* H3db9@ae* H3dba@r) (H3dae@match* H3db5@e H3db6@p H3db7@m* H3db8@s* H3db9@ae* H3dba@r))))))))) (lambda (H3db1@e H3db2@p) (H3db0@match H3db1@e H3db2@p '() '() '() '())))) (set! H4b92@H30bc@syntax-dispatch H30bc@syntax-dispatch) (set! H30be@ellipsis? (lambda (H3e85@x) (and (H2eb5@id? H3e85@x) (H2ebb@free-id=? H3e85@x (H3044@scheme-stx '...))))) (set! H4b93@H30be@ellipsis? H30be@ellipsis?) (set! H30c0@underscore? (lambda (H3e87@x) (and (H2eb5@id? H3e87@x) (H2ebb@free-id=? H3e87@x (H3044@scheme-stx '_))))) (set! H4b94@H30c0@underscore? H30c0@underscore?) (set! H30c2@verify-literals (lambda (H3e89@lits H3e8a@expr) (for-each (lambda (H3e8d@x) (if (or (not (H2eb5@id? H3e8d@x)) (H30be@ellipsis? H3e8d@x) (H30c0@underscore? H3e8d@x)) (H319c@syntax-violation '#f '"invalid literal" H3e8a@expr H3e8d@x) (void))) H3e89@lits))) (set! H4b95@H30c2@verify-literals H30c2@verify-literals) (set! H30c4@syntax-case-transformer (letrec* ((H3e90@build-dispatch-call (lambda (H3f01@pvars H3f02@expr H3f03@y H3f04@r H3f05@mr) (let ((H3f0b@ids (map car H3f01@pvars)) (H3f0c@levels (map cdr H3f01@pvars))) (let ((H3f0f@labels (map H2e41@gen-label H3f0b@ids)) (H3f10@new-vars (map H2e3d@gen-lexical H3f0b@ids))) (let ((H3f13@body (H30de@chi-expr (H2ea1@add-subst (H2e75@make-full-rib H3f0b@ids H3f0f@labels) H3f02@expr) (append (map (lambda (H3f15@label H3f16@var H3f17@level) (cons H3f15@label (H2ecf@make-binding 'syntax (cons H3f16@var H3f17@level)))) H3f0f@labels H3f10@new-vars (map cdr H3f01@pvars)) H3f04@r) H3f05@mr))) (list '(primitive apply) (H2e18@H2d4a@build-lambda '#f H3f10@new-vars H3f13@body) H3f03@y)))))) (H3e92@invalid-ids-error (lambda (H3ef5@id* H3ef6@e H3ef7@class) (let H3eff@find ((H3efb@id* H3ef5@id*) (H3efc@ok* '())) (if (null? H3efb@id*) (H319c@syntax-violation '#f '"invalid syntax" H3ef6@e) (if (H2eb5@id? (car H3efb@id*)) (if (H2ec1@bound-id-member? (car H3efb@id*) H3efc@ok*) (H3198@syntax-error (car H3efb@id*) '"duplicate " H3ef7@class) (H3eff@find (cdr H3efb@id*) (cons (car H3efb@id*) H3efc@ok*))) (H3198@syntax-error (car H3efb@id*) '"invalid " H3ef7@class)))))) (H3e94@gen-clause (lambda (H3ecd@x H3ece@keys H3ecf@clauses H3ed0@r H3ed1@mr H3ed2@pat H3ed3@fender H3ed4@expr) (call-with-values (lambda () (H30ba@convert-pattern H3ed2@pat H3ece@keys)) (lambda (H3ee1@H3ede H3ee2@H3ee0) (let ((H3ee5@pvars H3ee2@H3ee0) (H3ee6@p H3ee1@H3ede)) (if (not (H2ebf@distinct-bound-ids? (map car H3ee5@pvars))) (H3e92@invalid-ids-error (map car H3ee5@pvars) H3ed2@pat '"pattern variable") (if (not (for-all (lambda (H3ee9@x) (not (H30be@ellipsis? (car H3ee9@x)))) H3ee5@pvars)) (H319c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" H3ed2@pat) (let ((H3eeb@y (H2e3d@gen-lexical 'tmp))) (let ((H3eed@test (if (eq? H3ed3@fender '#t) H3eeb@y (let ((H3eef@call (H3e90@build-dispatch-call H3ee5@pvars H3ed3@fender H3eeb@y H3ed0@r H3ed1@mr))) (list 'if H3eeb@y H3eef@call (list 'quote '#f)))))) (let ((H3ef1@conseq (H3e90@build-dispatch-call H3ee5@pvars H3ed4@expr H3eeb@y H3ed0@r H3ed1@mr))) (let ((H3ef3@altern (H3e96@gen-syntax-case H3ecd@x H3ece@keys H3ecf@clauses H3ed0@r H3ed1@mr))) (list (H2e18@H2d4a@build-lambda '#f (list H3eeb@y) (list 'if H3eed@test H3ef1@conseq H3ef3@altern)) (list '(primitive syntax-dispatch) H3ecd@x (list 'quote H3ee6@p)))))))))))))) (H3e96@gen-syntax-case (lambda (H3eab@x H3eac@keys H3ead@clauses H3eae@r H3eaf@mr) (if (null? H3ead@clauses) (list '(primitive syntax-error) H3eab@x) (let ((H3eb5@t (car H3ead@clauses))) (let ((H3eb7@ls/false (H30bc@syntax-dispatch H3eb5@t '(any any)))) (if H3eb7@ls/false (apply (lambda (H3eb9@pat H3eba@expr) (if (and (H2eb5@id? H3eb9@pat) (not (H2ec1@bound-id-member? H3eb9@pat H3eac@keys)) (not (H30be@ellipsis? H3eb9@pat))) (if (H2ebb@free-id=? H3eb9@pat (H3044@scheme-stx '_)) (H30de@chi-expr H3eba@expr H3eae@r H3eaf@mr) (let ((H3ebd@lab (H2e41@gen-label H3eb9@pat)) (H3ebe@lex (H2e3d@gen-lexical H3eb9@pat))) (let ((H3ec1@body (H30de@chi-expr (H2ea1@add-subst (H2e75@make-full-rib (list H3eb9@pat) (list H3ebd@lab)) H3eba@expr) (cons (cons H3ebd@lab (H2ecf@make-binding 'syntax (cons H3ebe@lex '0))) H3eae@r) H3eaf@mr))) (list (H2e18@H2d4a@build-lambda '#f (list H3ebe@lex) H3ec1@body) H3eab@x)))) (H3e94@gen-clause H3eab@x H3eac@keys (cdr H3ead@clauses) H3eae@r H3eaf@mr H3eb9@pat '#t H3eba@expr))) H3eb7@ls/false) (let ((H3ec3@t H3eb5@t)) (let ((H3ec5@ls/false (H30bc@syntax-dispatch H3ec3@t '(any any any)))) (if H3ec5@ls/false (apply (lambda (H3ec7@pat H3ec8@fender H3ec9@expr) (H3e94@gen-clause H3eab@x H3eac@keys (cdr H3ead@clauses) H3eae@r H3eaf@mr H3ec7@pat H3ec8@fender H3ec9@expr)) H3ec5@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3ec3@t))))))))))) (lambda (H3e97@e H3e98@r H3e99@mr) (let ((H3e9d@t H3e97@e)) (let ((H3e9f@ls/false (H30bc@syntax-dispatch H3e9d@t '(_ any each-any . each-any)))) (if H3e9f@ls/false (apply (lambda (H3ea1@expr H3ea2@keys H3ea3@clauses) (begin (H30c2@verify-literals H3ea2@keys H3e97@e) (let ((H3ea7@x (H2e3d@gen-lexical 'tmp))) (let ((H3ea9@body (H3e96@gen-syntax-case H3ea7@x H3ea2@keys H3ea3@clauses H3e98@r H3e99@mr))) (list (H2e18@H2d4a@build-lambda '#f (list H3ea7@x) H3ea9@body) (H30de@chi-expr H3ea1@expr H3e98@r H3e99@mr)))))) H3e9f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3e9d@t))))))) (set! H4b96@H30c4@syntax-case-transformer H30c4@syntax-case-transformer) (set! H30c6@ellipsis-map (lambda (H3f1b@proc H3f1c@ls . H3f1f@ls*) (letrec* ((H3f22@who '...)) (begin (if (not (list? H3f1c@ls)) (assertion-violation H3f22@who '"not a list" H3f1c@ls) (void)) (if (not (null? H3f1f@ls*)) (let ((H3f23@n (length H3f1c@ls))) (for-each (lambda (H3f25@x) (begin (if (not (list? H3f25@x)) (assertion-violation H3f22@who '"not a list" H3f25@x) (void)) (if (not (= (length H3f25@x) H3f23@n)) (assertion-violation H3f22@who '"length mismatch" H3f1c@ls H3f25@x) (void)))) H3f1f@ls*)) (void)) (apply map H3f1b@proc H3f1c@ls H3f1f@ls*))))) (set! H4b97@H30c6@ellipsis-map H30c6@ellipsis-map) (set! H30c8@syntax-transformer (letrec* ((H3f28@gen-syntax (lambda (H3f9f@src H3fa0@e H3fa1@r H3fa2@maps H3fa3@ellipsis? H3fa4@vec?) (let ((H3fab@t H3fa0@e)) (let ((H3fad@ls/false (H30bc@syntax-dispatch H3fab@t 'any))) (if (and H3fad@ls/false (apply (lambda (H3faf@dots) (H3fa3@ellipsis? H3faf@dots)) H3fad@ls/false)) (apply (lambda (H3fb1@dots) (H319c@syntax-violation '#f '"misplaced ellipsis in syntax form" H3f9f@src)) H3fad@ls/false) (let ((H3fb3@t H3fab@t)) (let ((H3fb5@ls/false (H30bc@syntax-dispatch H3fb3@t 'any))) (if (and H3fb5@ls/false (apply (lambda (H3fb7@id) (H2eb5@id? H3fb7@id)) H3fb5@ls/false)) (apply (lambda (H3fb9@id) (let ((H3fbb@label (H2ecb@id->label H3fa0@e))) (let ((H3fbd@b (H2ecd@label->binding H3fbb@label H3fa1@r))) (if (eq? (H2ed1@binding-type H3fbd@b) 'syntax) (call-with-values (lambda () (let ((H3fc3@var.lev (H2ed3@binding-value H3fbd@b))) (H3f2a@gen-ref H3f9f@src (car H3fc3@var.lev) (cdr H3fc3@var.lev) H3fa2@maps))) (lambda (H3fc5@H3fc0 H3fc6@H3fc2) (let ((H3fc9@maps H3fc6@H3fc2) (H3fca@var H3fc5@H3fc0)) (values (list 'ref H3fca@var) H3fc9@maps)))) (values (list 'quote H3fa0@e) H3fa2@maps))))) H3fb5@ls/false) (let ((H3fcd@t H3fb3@t)) (let ((H3fcf@ls/false (H30bc@syntax-dispatch H3fcd@t '(any any)))) (if (and H3fcf@ls/false (apply (lambda (H3fd1@dots H3fd2@e) (H3fa3@ellipsis? H3fd1@dots)) H3fcf@ls/false)) (apply (lambda (H3fd5@dots H3fd6@e) (if H3fa4@vec? (H319c@syntax-violation '#f '"misplaced ellipsis in syntax form" H3f9f@src) (H3f28@gen-syntax H3f9f@src H3fd6@e H3fa1@r H3fa2@maps (lambda (H3fd9@x) '#f) '#f))) H3fcf@ls/false) (let ((H3fdb@t H3fcd@t)) (let ((H3fdd@ls/false (H30bc@syntax-dispatch H3fdb@t '(any any . any)))) (if (and H3fdd@ls/false (apply (lambda (H3fdf@x H3fe0@dots H3fe1@y) (H3fa3@ellipsis? H3fe0@dots)) H3fdd@ls/false)) (apply (lambda (H3fe5@x H3fe6@dots H3fe7@y) (let H3ffd@f ((H3feb@y H3fe7@y) (H3fec@k (lambda (H3fef@maps) (call-with-values (lambda () (H3f28@gen-syntax H3f9f@src H3fe5@x H3fa1@r (cons '() H3fef@maps) H3fa3@ellipsis? '#f)) (lambda (H3ff5@H3ff2 H3ff6@H3ff4) (let ((H3ff9@maps H3ff6@H3ff4) (H3ffa@x H3ff5@H3ff2)) (if (null? (car H3ff9@maps)) (H319c@syntax-violation '#f '"extra ellipsis in syntax form" H3f9f@src) (values (H3f30@gen-map H3ffa@x (car H3ff9@maps)) (cdr H3ff9@maps))))))))) (let ((H3fff@t H3feb@y)) (let ((H4001@ls/false (H30bc@syntax-dispatch H3fff@t '()))) (if H4001@ls/false (apply (lambda () (H3fec@k H3fa2@maps)) H4001@ls/false) (let ((H4003@t H3fff@t)) (let ((H4005@ls/false (H30bc@syntax-dispatch H4003@t '(any . any)))) (if (and H4005@ls/false (apply (lambda (H4007@dots H4008@y) (H3fa3@ellipsis? H4007@dots)) H4005@ls/false)) (apply (lambda (H400b@dots H400c@y) (H3ffd@f H400c@y (lambda (H400f@maps) (call-with-values (lambda () (H3fec@k (cons '() H400f@maps))) (lambda (H4015@H4012 H4016@H4014) (let ((H4019@maps H4016@H4014) (H401a@x H4015@H4012)) (if (null? (car H4019@maps)) (H319c@syntax-violation '#f '"extra ellipsis in syntax form" H3f9f@src) (values (H3f2e@gen-mappend H401a@x (car H4019@maps)) (cdr H4019@maps))))))))) H4005@ls/false) (let ((H401d@t H4003@t)) (let ((H401f@ls/false (H30bc@syntax-dispatch H401d@t '_))) (if H401f@ls/false (apply (lambda () (call-with-values (lambda () (H3f28@gen-syntax H3f9f@src H3feb@y H3fa1@r H3fa2@maps H3fa3@ellipsis? H3fa4@vec?)) (lambda (H4025@H4022 H4026@H4024) (let ((H4029@maps H4026@H4024) (H402a@y H4025@H4022)) (call-with-values (lambda () (H3fec@k H4029@maps)) (lambda (H4031@H402e H4032@H4030) (let ((H4035@maps H4032@H4030) (H4036@x H4031@H402e)) (values (H3f2c@gen-append H4036@x H402a@y) H4035@maps)))))))) H401f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H401d@t)))))))))))) H3fdd@ls/false) (let ((H4039@t H3fdb@t)) (let ((H403b@ls/false (H30bc@syntax-dispatch H4039@t '(any . any)))) (if H403b@ls/false (apply (lambda (H403d@x H403e@y) (call-with-values (lambda () (H3f28@gen-syntax H3f9f@src H403d@x H3fa1@r H3fa2@maps H3fa3@ellipsis? '#f)) (lambda (H4045@H4042 H4046@H4044) (let ((H4049@maps H4046@H4044) (H404a@xnew H4045@H4042)) (call-with-values (lambda () (H3f28@gen-syntax H3f9f@src H403e@y H3fa1@r H4049@maps H3fa3@ellipsis? H3fa4@vec?)) (lambda (H4051@H404e H4052@H4050) (let ((H4055@maps H4052@H4050) (H4056@ynew H4051@H404e)) (values (H3f32@gen-cons H3fa0@e H403d@x H403e@y H404a@xnew H4056@ynew) H4055@maps)))))))) H403b@ls/false) (let ((H4059@t H4039@t)) (let ((H405b@ls/false (H30bc@syntax-dispatch H4059@t '#(vector each-any)))) (if H405b@ls/false (apply (lambda (H405d@ls) (call-with-values (lambda () (H3f28@gen-syntax H3f9f@src H405d@ls H3fa1@r H3fa2@maps H3fa3@ellipsis? '#t)) (lambda (H4063@H4060 H4064@H4062) (let ((H4067@maps H4064@H4062) (H4068@lsnew H4063@H4060)) (values (H3f34@gen-vector H3fa0@e H405d@ls H4068@lsnew) H4067@maps))))) H405b@ls/false) (let ((H406b@t H4059@t)) (let ((H406d@ls/false (H30bc@syntax-dispatch H406b@t '_))) (if H406d@ls/false (apply (lambda () (values (list 'quote H3fa0@e) H3fa2@maps)) H406d@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H406b@t)))))))))))))))))))))))) (H3f2a@gen-ref (lambda (H3f85@src H3f86@var H3f87@level H3f88@maps) (if (= H3f87@level '0) (values H3f86@var H3f88@maps) (if (null? H3f88@maps) (H319c@syntax-violation '#f '"missing ellipsis in syntax form" H3f85@src) (call-with-values (lambda () (H3f2a@gen-ref H3f85@src H3f86@var (- H3f87@level '1) (cdr H3f88@maps))) (lambda (H3f91@H3f8e H3f92@H3f90) (let ((H3f95@outer-maps H3f92@H3f90) (H3f96@outer-var H3f91@H3f8e)) (let ((H3f99@t (assq H3f96@outer-var (car H3f88@maps)))) (if H3f99@t ((lambda (H3f9b@b) (values (cdr H3f9b@b) H3f88@maps)) H3f99@t) (let ((H3f9d@inner-var (H2e3d@gen-lexical 'tmp))) (values H3f9d@inner-var (cons (cons (cons H3f96@outer-var H3f9d@inner-var) (car H3f88@maps)) H3f95@outer-maps)))))))))))) (H3f2c@gen-append (lambda (H3f81@x H3f82@y) (if (fast-equal? H3f82@y ''()) H3f81@x (list 'append H3f81@x H3f82@y)))) (H3f2e@gen-mappend (lambda (H3f7d@e H3f7e@map-env) (list 'apply '(primitive append) (H3f30@gen-map H3f7d@e H3f7e@map-env)))) (H3f30@gen-map (lambda (H3f6b@e H3f6c@map-env) (let ((H3f6f@formals (map cdr H3f6c@map-env)) (H3f70@actuals (map (lambda (H3f73@x) (list 'ref (car H3f73@x))) H3f6c@map-env))) (if (eq? (car H3f6b@e) 'ref) (car H3f70@actuals) (if (for-all (lambda (H3f75@x) (and (eq? (car H3f75@x) 'ref) (memq (cadr H3f75@x) H3f6f@formals))) (cdr H3f6b@e)) (let ((H3f77@args (map (let ((H3f79@r (map cons H3f6f@formals H3f70@actuals))) (lambda (H3f7b@x) (cdr (assq (cadr H3f7b@x) H3f79@r)))) (cdr H3f6b@e)))) (cons 'map (cons (list 'primitive (car H3f6b@e)) H3f77@args))) (cons* 'map (list 'lambda H3f6f@formals H3f6b@e) H3f70@actuals)))))) (H3f32@gen-cons (lambda (H3f5b@e H3f5c@x H3f5d@y H3f5e@xnew H3f5f@ynew) (let ((H3f65@t (car H3f5f@ynew))) (if (memv H3f65@t '(quote)) (if (eq? (car H3f5e@xnew) 'quote) (let ((H3f67@xnew (cadr H3f5e@xnew)) (H3f68@ynew (cadr H3f5f@ynew))) (if (and (eq? H3f67@xnew H3f5c@x) (eq? H3f68@ynew H3f5d@y)) (list 'quote H3f5b@e) (list 'quote (cons H3f67@xnew H3f68@ynew)))) (if (null? (cadr H3f5f@ynew)) (list 'list H3f5e@xnew) (list 'cons H3f5e@xnew H3f5f@ynew))) (if (memv H3f65@t '(list)) (cons 'list (cons H3f5e@xnew (cdr H3f5f@ynew))) (list 'cons H3f5e@xnew H3f5f@ynew)))))) (H3f34@gen-vector (lambda (H3f55@e H3f56@ls H3f57@lsnew) (if (eq? (car H3f57@lsnew) 'quote) (if (eq? (cadr H3f57@lsnew) H3f56@ls) (list 'quote H3f55@e) (list 'quote (list->vector (cadr H3f57@lsnew)))) (if (eq? (car H3f57@lsnew) 'list) (cons 'vector (cdr H3f57@lsnew)) (list 'list->vector H3f57@lsnew))))) (H3f36@regen (lambda (H3f4f@x) (let ((H3f51@t (car H3f4f@x))) (if (memv H3f51@t '(ref)) (cadr H3f4f@x) (if (memv H3f51@t '(primitive)) (list 'primitive (cadr H3f4f@x)) (if (memv H3f51@t '(quote)) (list 'quote (cadr H3f4f@x)) (if (memv H3f51@t '(lambda)) (H2e18@H2d4a@build-lambda '#f (cadr H3f4f@x) (H3f36@regen (caddr H3f4f@x))) (if (memv H3f51@t '(map)) (let ((H3f53@ls (map H3f36@regen (cdr H3f4f@x)))) (cons '(primitive ellipsis-map) H3f53@ls)) (cons (list 'primitive (car H3f4f@x)) (map H3f36@regen (cdr H3f4f@x)))))))))))) (lambda (H3f37@e H3f38@r H3f39@mr) (let ((H3f3d@t H3f37@e)) (let ((H3f3f@ls/false (H30bc@syntax-dispatch H3f3d@t '(_ any)))) (if H3f3f@ls/false (apply (lambda (H3f41@x) (call-with-values (lambda () (H3f28@gen-syntax H3f37@e H3f41@x H3f38@r '() H30be@ellipsis? '#f)) (lambda (H3f47@H3f44 H3f48@H3f46) (let ((H3f4b@maps H3f48@H3f46) (H3f4c@e H3f47@H3f44)) (H3f36@regen H3f4c@e))))) H3f3f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H3f3d@t))))))) (set! H4b98@H30c8@syntax-transformer H30c8@syntax-transformer) (set! H30ca@core-macro-transformer (lambda (H406f@name) (let ((H4071@t H406f@name)) (if (memv H4071@t '(quote)) H306c@quote-transformer (if (memv H4071@t '(lambda)) H3070@lambda-transformer (if (memv H4071@t '(case-lambda)) H306e@case-lambda-transformer (if (memv H4071@t '(letrec)) H3054@letrec-transformer (if (memv H4071@t '(letrec*)) H3056@letrec*-transformer (if (memv H4071@t '(let)) H3052@let-transformer (if (memv H4071@t '(if)) H3064@if-transformer (if (memv H4071@t '(and)) H3066@and-transformer (if (memv H4071@t '(or)) H3068@or-transformer (if (memv H4071@t '(foreign-call)) H30b8@foreign-call-transformer (if (memv H4071@t '(syntax-case)) H30c4@syntax-case-transformer (if (memv H4071@t '(syntax)) H30c8@syntax-transformer (if (memv H4071@t '(type-descriptor)) H305a@type-descriptor-transformer (if (memv H4071@t '(record-type-descriptor)) H305c@record-type-descriptor-transformer (if (memv H4071@t '(record-constructor-descriptor)) H305e@record-constructor-descriptor-transformer (if (memv H4071@t '(fluid-let-syntax)) H3058@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" H406f@name)))))))))))))))))))) (set! H4b99@H30ca@core-macro-transformer H30ca@core-macro-transformer) (set! H30cc@symbol-macro (lambda (H4073@x H4074@set) (let ((H4077@t H4073@x)) (let ((H4079@ls/false (H30bc@syntax-dispatch H4077@t '(_ any)))) (if (and H4079@ls/false (apply (lambda (H407b@name) (and (H2eb5@id? H407b@name) (memq (H2eb7@id->sym H407b@name) H4074@set))) H4079@ls/false)) (apply (lambda (H407d@name) (H3072@bless (list 'quote H407d@name))) H4079@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4077@t)))))) (set! H4b9a@H30cc@symbol-macro H30cc@symbol-macro) (set! H30ce@macro-transformer (lambda (H407f@x) (if (procedure? H407f@x) H407f@x (if (symbol? H407f@x) (let ((H4081@t H407f@x)) (if (memv H4081@t '(define-record-type)) H30b0@define-record-type-macro (if (memv H4081@t '(define-struct)) H30ae@define-struct-macro (if (memv H4081@t '(include)) H30a4@include-macro (if (memv H4081@t '(cond)) H30a0@cond-macro (if (memv H4081@t '(let)) H3078@let-macro (if (memv H4081@t '(do)) H3098@do-macro (if (memv H4081@t '(or)) H309c@or-macro (if (memv H4081@t '(and)) H309e@and-macro (if (memv H4081@t '(let*)) H309a@let*-macro (if (memv H4081@t '(let-values)) H307a@let-values-macro (if (memv H4081@t '(let*-values)) H307c@let*-values-macro (if (memv H4081@t '(syntax-rules)) H30a8@syntax-rules-macro (if (memv H4081@t '(quasiquote)) H30aa@quasiquote-macro (if (memv H4081@t '(quasisyntax)) H30ac@quasisyntax-macro (if (memv H4081@t '(with-syntax)) H3074@with-syntax-macro (if (memv H4081@t '(when)) H3060@when-macro (if (memv H4081@t '(unless)) H3062@unless-macro (if (memv H4081@t '(case)) H306a@case-macro (if (memv H4081@t '(identifier-syntax)) H3096@identifier-syntax-macro (if (memv H4081@t '(time)) H308e@time-macro (if (memv H4081@t '(delay)) H3090@delay-macro (if (memv H4081@t '(assert)) H3092@assert-macro (if (memv H4081@t '(endianness)) H3094@endianness-macro (if (memv H4081@t '(guard)) H308a@guard-macro (if (memv H4081@t '(define-enumeration)) H308c@define-enumeration-macro (if (memv H4081@t '(trace-lambda)) H307e@trace-lambda-macro (if (memv H4081@t '(trace-define)) H3080@trace-define-macro (if (memv H4081@t '(trace-define-syntax)) H3082@trace-define-syntax-macro (if (memv H4081@t '(trace-let-syntax)) H3086@trace-let-syntax-macro (if (memv H4081@t '(trace-letrec-syntax)) H3088@trace-letrec-syntax-macro (if (memv H4081@t '(define-condition-type)) H30b2@define-condition-type-macro (if (memv H4081@t '(parameterize)) H30b6@parameterize-macro (if (memv H4081@t '(include-into)) H30a6@include-into-macro (if (memv H4081@t '(eol-style)) (lambda (H4083@x) (H30cc@symbol-macro H4083@x '(none lf cr crlf nel crnel ls))) (if (memv H4081@t '(error-handling-mode)) (lambda (H4085@x) (H30cc@symbol-macro H4085@x '(ignore raise replace))) (if (memv H4081@t '(buffer-mode)) (lambda (H4087@x) (H30cc@symbol-macro H4087@x '(none line block))) (if (memv H4081@t '(file-options)) H2e30@file-options-macro (if (memv H4081@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) H30b4@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" H407f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" H407f@x))))) (set! H4b9b@H30ce@macro-transformer H30ce@macro-transformer) (set! H30d0@local-macro-transformer (lambda (H4089@x) (car H4089@x))) (set! H4b9c@H30d0@local-macro-transformer H30d0@local-macro-transformer) (set! H30d2@do-macro-call (lambda (H408b@transformer H408c@expr) (let ((H408f@out (H408b@transformer (H2e9f@add-mark H2e99@anti-mark H408c@expr '#f)))) (begin (let H4093@f ((H4091@x H408f@out)) (if (not (H2e81@stx? H4091@x)) (if (pair? H4091@x) (begin (H4093@f (car H4091@x)) (H4093@f (cdr H4091@x))) (if (vector? H4091@x) (vector-for-each H4093@f H4091@x) (if (symbol? H4091@x) (H319c@syntax-violation '#f '"raw symbol encountered in output of macro" H408c@expr H4091@x) (void)))) (void))) (H2e9f@add-mark (H2e97@gen-mark) H408f@out H408c@expr))))) (set! H4b9d@H30d2@do-macro-call H30d2@do-macro-call) (set! H30d4@chi-macro (lambda (H4095@p H4096@e) (H30d2@do-macro-call (H30ce@macro-transformer H4095@p) H4096@e))) (set! H4b9e@H30d4@chi-macro H30d4@chi-macro) (set! H30d6@chi-local-macro (lambda (H4099@p H409a@e) (H30d2@do-macro-call (H30d0@local-macro-transformer H4099@p) H409a@e))) (set! H4b9f@H30d6@chi-local-macro H30d6@chi-local-macro) (set! H30d8@chi-global-macro (lambda (H409d@p H409e@e) (let ((H40a1@lib (car H409d@p)) (H40a2@loc (cdr H409d@p))) (begin (H2cd2@H2b21@visit-library H40a1@lib) (let ((H40a5@x (symbol-value H40a2@loc))) (let ((H40a7@transformer (if (procedure? H40a5@x) H40a5@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" H40a5@x)))) (H30d2@do-macro-call H40a7@transformer H409e@e))))))) (set! H4ba0@H30d8@chi-global-macro H30d8@chi-global-macro) (set! H30da@chi-expr* (lambda (H40a9@e* H40aa@r H40ab@mr) (if (null? H40a9@e*) '() (let ((H40af@e (H30de@chi-expr (car H40a9@e*) H40aa@r H40ab@mr))) (cons H40af@e (H30da@chi-expr* (cdr H40a9@e*) H40aa@r H40ab@mr)))))) (set! H4ba1@H30da@chi-expr* H30da@chi-expr*) (set! H30dc@chi-application (lambda (H40b1@e H40b2@r H40b3@mr) (let ((H40b7@t H40b1@e)) (let ((H40b9@ls/false (H30bc@syntax-dispatch H40b7@t '(any . each-any)))) (if H40b9@ls/false (apply (lambda (H40bb@rator H40bc@rands) (let ((H40bf@rator (H30de@chi-expr H40bb@rator H40b2@r H40b3@mr))) (cons H40bf@rator (H30da@chi-expr* H40bc@rands H40b2@r H40b3@mr)))) H40b9@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H40b7@t)))))) (set! H4ba2@H30dc@chi-application H30dc@chi-application) (set! H30de@chi-expr (lambda (H40c1@e H40c2@r H40c3@mr) (call-with-values (lambda () (H2ed7@syntax-type H40c1@e H40c2@r)) (lambda (H40cd@H40c8 H40ce@H40ca H40cf@H40cc) (let ((H40d3@kwd H40cf@H40cc) (H40d4@value H40ce@H40ca) (H40d5@type H40cd@H40c8)) (let ((H40d9@t H40d5@type)) (if (memv H40d9@t '(core-macro)) (let ((H40db@transformer (H30ca@core-macro-transformer H40d4@value))) (H40db@transformer H40c1@e H40c2@r H40c3@mr)) (if (memv H40d9@t '(global)) (let ((H40dd@lib (car H40d4@value))) (let ((H40df@loc (cdr H40d4@value))) (begin ((H3124@inv-collector) H40dd@lib) H40df@loc))) (if (memv H40d9@t '(core-prim)) (let ((H40e1@name H40d4@value)) (list 'primitive H40e1@name)) (if (memv H40d9@t '(call)) (H30dc@chi-application H40c1@e H40c2@r H40c3@mr) (if (memv H40d9@t '(lexical)) (let ((H40e3@lex (H3046@lexical-var H40d4@value))) H40e3@lex) (if (memv H40d9@t '(global-macro global-macro!)) (H30de@chi-expr (H30d8@chi-global-macro H40d4@value H40c1@e) H40c2@r H40c3@mr) (if (memv H40d9@t '(local-macro local-macro!)) (H30de@chi-expr (H30d6@chi-local-macro H40d4@value H40c1@e) H40c2@r H40c3@mr) (if (memv H40d9@t '(macro macro!)) (H30de@chi-expr (H30d4@chi-macro H40d4@value H40c1@e) H40c2@r H40c3@mr) (if (memv H40d9@t '(constant)) (let ((H40e5@datum H40d4@value)) (list 'quote H40e5@datum)) (if (memv H40d9@t '(set!)) (H30e0@chi-set! H40c1@e H40c2@r H40c3@mr) (if (memv H40d9@t '(begin)) (let ((H40e7@t H40c1@e)) (let ((H40e9@ls/false (H30bc@syntax-dispatch H40e7@t '(_ any . each-any)))) (if H40e9@ls/false (apply (lambda (H40eb@x H40ec@x*) (H2e1a@H2d7a@build-sequence '#f (H30da@chi-expr* (cons H40eb@x H40ec@x*) H40c2@r H40c3@mr))) H40e9@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H40e7@t)))) (if (memv H40d9@t '(let-syntax letrec-syntax)) (let ((H40ef@t H40c1@e)) (let ((H40f1@ls/false (H30bc@syntax-dispatch H40ef@t '(_ #(each (any any)) any . each-any)))) (if (and H40f1@ls/false (apply (lambda (H40f3@xlhs* H40f4@xrhs* H40f5@xbody H40f6@xbody*) (if (not (H2ebd@valid-bound-ids? H40f3@xlhs*)) (H319c@syntax-violation '#f '"invalid identifiers" H40c1@e) (void))) H40f1@ls/false)) (apply (lambda (H40fb@xlhs* H40fc@xrhs* H40fd@xbody H40fe@xbody*) (let ((H4103@xlab* (map H2e41@gen-label H40fb@xlhs*))) (let ((H4105@xrib (H2e75@make-full-rib H40fb@xlhs* H4103@xlab*))) (let ((H4107@xb* (map (lambda (H4109@x) (H2eed@make-eval-transformer (H3116@expand-transformer (if (eq? H40d5@type 'let-syntax) H4109@x (H2ea1@add-subst H4105@xrib H4109@x)) H40c3@mr))) H40fc@xrhs*))) (H2e1a@H2d7a@build-sequence '#f (H30da@chi-expr* (map (lambda (H410b@x) (H2ea1@add-subst H4105@xrib H410b@x)) (cons H40fd@xbody H40fe@xbody*)) (append (map cons H4103@xlab* H4107@xb*) H40c2@r) (append (map cons H4103@xlab* H4107@xb*) H40c3@mr))))))) H40f1@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H40ef@t)))) (if (memv H40d9@t '(displaced-lexical)) (H319c@syntax-violation '#f '"identifier out of context" H40c1@e) (if (memv H40d9@t '(syntax)) (H319c@syntax-violation '#f '"reference to pattern variable outside a syntax form" H40c1@e) (if (memv H40d9@t '(define define-syntax module import library)) (H319c@syntax-violation '#f (string-append (let ((H410d@t H40d5@type)) (if (memv H410d@t '(define)) '"a definition" (if (memv H410d@t '(define-syntax)) '"a define-syntax" (if (memv H410d@t '(module)) '"a module definition" (if (memv H410d@t '(library)) '"a library definition" (if (memv H410d@t '(import)) '"an import declaration" (if (memv H410d@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") H40c1@e) (if (memv H40d9@t '(mutable)) (H319c@syntax-violation '#f '"attempt to reference an unexportable variable" H40c1@e) (H319c@syntax-violation '#f '"invalid expression" H40c1@e))))))))))))))))))))))) (set! H4ba3@H30de@chi-expr H30de@chi-expr) (set! H30e0@chi-set! (lambda (H410f@e H4110@r H4111@mr) (let ((H4115@t H410f@e)) (let ((H4117@ls/false (H30bc@syntax-dispatch H4115@t '(_ any any)))) (if (and H4117@ls/false (apply (lambda (H4119@x H411a@v) (H2eb5@id? H4119@x)) H4117@ls/false)) (apply (lambda (H411d@x H411e@v) (call-with-values (lambda () (H2ed7@syntax-type H411d@x H4110@r)) (lambda (H4127@H4122 H4128@H4124 H4129@H4126) (let ((H412d@kwd H4129@H4126) (H412e@value H4128@H4124) (H412f@type H4127@H4122)) (let ((H4133@t H412f@type)) (if (memv H4133@t '(lexical)) (begin (H304a@set-lexical-mutable! H412e@value '#t) (list 'set! (H3046@lexical-var H412e@value) (H30de@chi-expr H411e@v H4110@r H4111@mr))) (if (memv H4133@t '(core-prim)) (H319c@syntax-violation '#f '"cannot modify imported core primitive" H410f@e) (if (memv H4133@t '(global)) (H319c@syntax-violation '#f '"attempt to modify imported binding" H410f@e) (if (memv H4133@t '(global-macro!)) (H30de@chi-expr (H30d8@chi-global-macro H412e@value H410f@e) H4110@r H4111@mr) (if (memv H4133@t '(local-macro!)) (H30de@chi-expr (H30d6@chi-local-macro H412e@value H410f@e) H4110@r H4111@mr) (if (memv H4133@t '(mutable)) (H319c@syntax-violation '#f '"attempt to assign to an unexportable variable" H410f@e) (H319c@syntax-violation '#f '"invalid syntax" H410f@e)))))))))))) H4117@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4115@t)))))) (set! H4ba4@H30e0@chi-set! H30e0@chi-set!) (set! H30e2@verify-formals (lambda (H4135@fmls H4136@stx) (let ((H4139@t H4135@fmls)) (let ((H413b@ls/false (H30bc@syntax-dispatch H4139@t 'each-any))) (if H413b@ls/false (apply (lambda (H413d@x*) (if (not (H2ebd@valid-bound-ids? H413d@x*)) (H3076@invalid-fmls-error H4136@stx H4135@fmls) (void))) H413b@ls/false) (let ((H413f@t H4139@t)) (let ((H4141@ls/false (H30bc@syntax-dispatch H413f@t '#(each+ any () any)))) (if H4141@ls/false (apply (lambda (H4143@x* H4144@x) (if (not (H2ebd@valid-bound-ids? (cons H4144@x H4143@x*))) (H3076@invalid-fmls-error H4136@stx H4135@fmls) (void))) H4141@ls/false) (let ((H4147@t H413f@t)) (let ((H4149@ls/false (H30bc@syntax-dispatch H4147@t '_))) (if H4149@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid syntax" H4136@stx)) H4149@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4147@t)))))))))))) (set! H4ba5@H30e2@verify-formals H30e2@verify-formals) (set! H30e4@chi-lambda-clause (lambda (H414b@stx H414c@fmls H414d@body* H414e@r H414f@mr) (let ((H4155@t H414c@fmls)) (let ((H4157@ls/false (H30bc@syntax-dispatch H4155@t 'each-any))) (if H4157@ls/false (apply (lambda (H4159@x*) (begin (H30e2@verify-formals H414c@fmls H414b@stx) (let ((H415b@lex* (map H2e3d@gen-lexical H4159@x*)) (H415c@lab* (map H2e41@gen-label H4159@x*))) (values H415b@lex* (H30f4@chi-internal (H2ea1@add-subst (H2e75@make-full-rib H4159@x* H415c@lab*) H414d@body*) (H304e@add-lexicals H415c@lab* H415b@lex* H414e@r) H414f@mr))))) H4157@ls/false) (let ((H415f@t H4155@t)) (let ((H4161@ls/false (H30bc@syntax-dispatch H415f@t '#(each+ any () any)))) (if H4161@ls/false (apply (lambda (H4163@x* H4164@x) (begin (H30e2@verify-formals H414c@fmls H414b@stx) (let ((H4167@lex* (map H2e3d@gen-lexical H4163@x*)) (H4168@lab* (map H2e41@gen-label H4163@x*)) (H4169@lex (H2e3d@gen-lexical H4164@x)) (H416a@lab (H2e41@gen-label H4164@x))) (values (append H4167@lex* H4169@lex) (H30f4@chi-internal (H2ea1@add-subst (H2e75@make-full-rib (cons H4164@x H4163@x*) (cons H416a@lab H4168@lab*)) H414d@body*) (H304e@add-lexicals (cons H416a@lab H4168@lab*) (cons H4169@lex H4167@lex*) H414e@r) H414f@mr))))) H4161@ls/false) (let ((H416f@t H415f@t)) (let ((H4171@ls/false (H30bc@syntax-dispatch H416f@t '_))) (if H4171@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid syntax" H414c@fmls)) H4171@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H416f@t)))))))))))) (set! H4ba6@H30e4@chi-lambda-clause H30e4@chi-lambda-clause) (set! H30e6@chi-lambda-clause* (lambda (H4173@stx H4174@fmls* H4175@body** H4176@r H4177@mr) (if (null? H4174@fmls*) (values '() '()) (call-with-values (lambda () (H30e4@chi-lambda-clause H4173@stx (car H4174@fmls*) (car H4175@body**) H4176@r H4177@mr)) (lambda (H4181@H417e H4182@H4180) (let ((H4185@b H4182@H4180) (H4186@a H4181@H417e)) (call-with-values (lambda () (H30e6@chi-lambda-clause* H4173@stx (cdr H4174@fmls*) (cdr H4175@body**) H4176@r H4177@mr)) (lambda (H418d@H418a H418e@H418c) (let ((H4191@b* H418e@H418c) (H4192@a* H418d@H418a)) (values (cons H4186@a H4192@a*) (cons H4185@b H4191@b*))))))))))) (set! H4ba7@H30e6@chi-lambda-clause* H30e6@chi-lambda-clause*) (set! H30e8@chi-defun (lambda (H4195@x H4196@r H4197@mr) (let ((H419b@fmls (car H4195@x)) (H419c@body* (cdr H4195@x))) (call-with-values (lambda () (H30e4@chi-lambda-clause H419b@fmls H419b@fmls H419c@body* H4196@r H4197@mr)) (lambda (H41a3@H41a0 H41a4@H41a2) (let ((H41a7@body H41a4@H41a2) (H41a8@fmls H41a3@H41a0)) (H2e18@H2d4a@build-lambda '#f H41a8@fmls H41a7@body))))))) (set! H4ba8@H30e8@chi-defun H30e8@chi-defun) (set! H30ea@chi-rhs (lambda (H41ab@rhs H41ac@r H41ad@mr) (let ((H41b1@t (car H41ab@rhs))) (if (memv H41b1@t '(defun)) (H30e8@chi-defun (cdr H41ab@rhs) H41ac@r H41ad@mr) (if (memv H41b1@t '(expr)) (let ((H41b3@expr (cdr H41ab@rhs))) (H30de@chi-expr H41b3@expr H41ac@r H41ad@mr)) (if (memv H41b1@t '(top-expr)) (let ((H41b5@expr (cdr H41ab@rhs))) (H2e1a@H2d7a@build-sequence '#f (list (H30de@chi-expr H41b5@expr H41ac@r H41ad@mr) (H2e1b@H2d7c@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" H41ab@rhs))))))) (set! H4ba9@H30ea@chi-rhs H30ea@chi-rhs) (set! H30ec@expand-interaction-rhs*/init* (lambda (H41b7@lhs* H41b8@rhs* H41b9@init* H41ba@r H41bb@mr) (let H41c5@f ((H41c1@lhs* H41b7@lhs*) (H41c2@rhs* H41b8@rhs*)) (if (null? H41c1@lhs*) (map (lambda (H41c7@x) (H30de@chi-expr H41c7@x H41ba@r H41bb@mr)) H41b9@init*) (let ((H41c9@lhs (car H41c1@lhs*)) (H41ca@rhs (car H41c2@rhs*))) (let ((H41cd@t (car H41ca@rhs))) (if (memv H41cd@t '(defun)) (let ((H41cf@rhs (H30e8@chi-defun (cdr H41ca@rhs) H41ba@r H41bb@mr))) (cons (list 'set! H41c9@lhs H41cf@rhs) (H41c5@f (cdr H41c1@lhs*) (cdr H41c2@rhs*)))) (if (memv H41cd@t '(expr)) (let ((H41d1@rhs (H30de@chi-expr (cdr H41ca@rhs) H41ba@r H41bb@mr))) (cons (list 'set! H41c9@lhs H41d1@rhs) (H41c5@f (cdr H41c1@lhs*) (cdr H41c2@rhs*)))) (if (memv H41cd@t '(top-expr)) (let ((H41d3@e (H30de@chi-expr (cdr H41ca@rhs) H41ba@r H41bb@mr))) (cons H41d3@e (H41c5@f (cdr H41c1@lhs*) (cdr H41c2@rhs*)))) (error 'expand-interaction '"invallid" H41ca@rhs)))))))))) (set! H4baa@H30ec@expand-interaction-rhs*/init* H30ec@expand-interaction-rhs*/init*) (set! H30ee@chi-rhs* (lambda (H41d5@rhs* H41d6@r H41d7@mr) (let H41dd@f ((H41db@ls H41d5@rhs*)) (if (null? H41db@ls) '() (let ((H41df@a (H30ea@chi-rhs (car H41db@ls) H41d6@r H41d7@mr))) (cons H41df@a (H41dd@f (cdr H41db@ls)))))))) (set! H4bab@H30ee@chi-rhs* H30ee@chi-rhs*) (set! H30f0@find-bound=? (lambda (H41e1@x H41e2@lhs* H41e3@rhs*) (if (null? H41e2@lhs*) '#f (if (H2eb9@bound-id=? H41e1@x (car H41e2@lhs*)) (car H41e3@rhs*) (H30f0@find-bound=? H41e1@x (cdr H41e2@lhs*) (cdr H41e3@rhs*)))))) (set! H4bac@H30f0@find-bound=? H30f0@find-bound=?) (set! H30f2@find-dups (lambda (H41e7@ls) (let H41ed@f ((H41e9@ls H41e7@ls) (H41ea@dups '())) (if (null? H41e9@ls) H41ea@dups (let ((H41ef@t (H30f0@find-bound=? (car H41e9@ls) (cdr H41e9@ls) (cdr H41e9@ls)))) (if H41ef@t ((lambda (H41f1@x) (H41ed@f (cdr H41e9@ls) (cons (list (car H41e9@ls) H41f1@x) H41ea@dups))) H41ef@t) (H41ed@f (cdr H41e9@ls) H41ea@dups))))))) (set! H4bad@H30f2@find-dups H30f2@find-dups) (set! H30f4@chi-internal (lambda (H41f3@e* H41f4@r H41f5@mr) (let ((H41f9@rib (H2e69@make-empty-rib))) (call-with-values (lambda () (H3114@chi-body* (map (lambda (H420b@x) (H2ea1@add-subst H41f9@rib H420b@x)) (H2eb3@syntax->list H41f3@e*)) H41f4@r H41f5@mr '() '() '() '() '() H41f9@rib '#f)) (lambda (H420d@H41fc H420e@H41fe H420f@H4200 H4210@H4202 H4211@H4204 H4212@H4206 H4213@H4208 H4214@H420a) (let ((H421d@_exp* H4214@H420a) (H421e@kwd* H4213@H4208) (H421f@mod** H4212@H4206) (H4220@rhs* H4211@H4204) (H4221@lex* H4210@H4202) (H4222@mr H420f@H4200) (H4223@r H420e@H41fe) (H4224@e* H420d@H41fc)) (begin (if (null? H4224@e*) (H319c@syntax-violation '#f '"no expression in body" H4224@e*) (void)) (let ((H422d@init* (H30da@chi-expr* (append (apply append (reverse H421f@mod**)) H4224@e*) H4223@r H4222@mr))) (let ((H422f@rhs* (H30ee@chi-rhs* H4220@rhs* H4223@r H4222@mr))) (H2e1f@H2d84@build-letrec* '#f (reverse H4221@lex*) (reverse H422f@rhs*) (H2e1a@H2d7a@build-sequence '#f H422d@init*))))))))))) (set! H4bae@H30f4@chi-internal H30f4@chi-internal) (set! H30f6@parse-module (lambda (H4231@e) (let ((H4233@t H4231@e)) (let ((H4235@ls/false (H30bc@syntax-dispatch H4233@t '(_ each-any . each-any)))) (if H4235@ls/false (apply (lambda (H4237@export* H4238@b*) (begin (if (not (for-all H2eb5@id? H4237@export*)) (H319c@syntax-violation '#f '"module exports must be identifiers" H4231@e) (void)) (values '#f (list->vector H4237@export*) H4238@b*))) H4235@ls/false) (let ((H423b@t H4233@t)) (let ((H423d@ls/false (H30bc@syntax-dispatch H423b@t '(_ any each-any . each-any)))) (if H423d@ls/false (apply (lambda (H423f@name H4240@export* H4241@b*) (begin (if (not (H2eb5@id? H423f@name)) (H319c@syntax-violation '#f '"module name must be an identifier" H4231@e) (void)) (if (not (for-all H2eb5@id? H4240@export*)) (H319c@syntax-violation '#f '"module exports must be identifiers" H4231@e) (void)) (values H423f@name (list->vector H4240@export*) H4241@b*))) H423d@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H423b@t))))))))) (set! H4baf@H30f6@parse-module H30f6@parse-module) (set! H3100@module-interface? (lambda (H4245@x) (and (simple-struct? H4245@x) (eq? (simple-struct-name H4245@x) 'module-interface)))) (set! H4bb0@H3100@module-interface? H3100@module-interface?) (set! H3102@module-interface-first-mark (lambda (H4247@x) (simple-struct-ref H4247@x '0))) (set! H4bb1@H3102@module-interface-first-mark H3102@module-interface-first-mark) (set! H3104@set-module-interface-first-mark! (lambda (H4249@x H424a@val) (simple-struct-set! H4249@x '0 H424a@val))) (set! H4bb2@H3104@set-module-interface-first-mark! H3104@set-module-interface-first-mark!) (set! H3106@module-interface-exp-id-vec (lambda (H424d@x) (simple-struct-ref H424d@x '1))) (set! H4bb3@H3106@module-interface-exp-id-vec H3106@module-interface-exp-id-vec) (set! H3108@set-module-interface-exp-id-vec! (lambda (H424f@x H4250@val) (simple-struct-set! H424f@x '1 H4250@val))) (set! H4bb4@H3108@set-module-interface-exp-id-vec! H3108@set-module-interface-exp-id-vec!) (set! H310a@module-interface-exp-lab-vec (lambda (H4253@x) (simple-struct-ref H4253@x '2))) (set! H4bb5@H310a@module-interface-exp-lab-vec H310a@module-interface-exp-lab-vec) (set! H310c@set-module-interface-exp-lab-vec! (lambda (H4255@x H4256@val) (simple-struct-set! H4255@x '2 H4256@val))) (set! H4bb6@H310c@set-module-interface-exp-lab-vec! H310c@set-module-interface-exp-lab-vec!) (set! H310e@dummy '3) (set! H4bb7@H310e@dummy H310e@dummy) (set! H3110@module-interface-exp-id* (lambda (H4259@iface H425a@id) (letrec* ((H425e@diff-marks (lambda (H4265@ls H4266@x) (begin (if (null? H4265@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((H4269@a (car H4265@ls))) (if (eq? H4269@a H4266@x) '() (cons H4269@a (H425e@diff-marks (cdr H4265@ls) H4266@x)))))))) (let ((H425f@diff (H425e@diff-marks (H2e87@stx-mark* H425a@id) (H3102@module-interface-first-mark H4259@iface))) (H4260@id-vec (H3106@module-interface-exp-id-vec H4259@iface))) (if (null? H425f@diff) H4260@id-vec (vector-map (lambda (H4263@x) (make-simple-struct 'stx '5 (list (H2e83@stx-expr H4263@x) (append H425f@diff (H2e87@stx-mark* H4263@x)) '() '()))) H4260@id-vec)))))) (set! H4bb8@H3110@module-interface-exp-id* H3110@module-interface-exp-id*) (set! H3112@chi-internal-module (lambda (H426b@e H426c@r H426d@mr H426e@lex* H426f@rhs* H4270@mod** H4271@kwd*) (call-with-values (lambda () (H30f6@parse-module H426b@e)) (lambda (H427f@H427a H4280@H427c H4281@H427e) (let ((H4285@e* H4281@H427e) (H4286@exp-id* H4280@H427c) (H4287@name H427f@H427a)) (let ((H428b@rib (H2e69@make-empty-rib))) (let ((H428d@e* (map (lambda (H428f@x) (H2ea1@add-subst H428b@rib H428f@x)) (H2eb3@syntax->list H4285@e*)))) (call-with-values (lambda () (H3114@chi-body* H428d@e* H426c@r H426d@mr H426e@lex* H426f@rhs* H4270@mod** H4271@kwd* '() H428b@rib '#f)) (lambda (H42a1@H4292 H42a2@H4294 H42a3@H4296 H42a4@H4298 H42a5@H429a H42a6@H429c H42a7@H429e H42a8@H42a0) (let ((H42b1@_exp* H42a8@H42a0) (H42b2@kwd* H42a7@H429e) (H42b3@mod** H42a6@H429c) (H42b4@rhs* H42a5@H429a) (H42b5@lex* H42a4@H4298) (H42b6@mr H42a3@H4296) (H42b7@r H42a2@H4294) (H42b8@e* H42a1@H4292)) (let ((H42c1@exp-lab* (vector-map (lambda (H42c5@x) (or (H2ecb@id->label (make-simple-struct 'stx '5 (list (H2eb7@id->sym H42c5@x) (H2e87@stx-mark* H42c5@x) (list H428b@rib) '()))) (H319c@syntax-violation '#f '"cannot find module export" H42c5@x))) H4286@exp-id*)) (H42c2@mod** (cons H42b8@e* H42b3@mod**))) (if (not H4287@name) (values H42b5@lex* H42b4@rhs* H4286@exp-id* H42c1@exp-lab* H42b7@r H42b6@mr H42c2@mod** H42b2@kwd*) (let ((H42c7@lab (H2e41@gen-label 'module)) (H42c8@iface (make-simple-struct 'module-interface '4 (list (car (H2e87@stx-mark* H4287@name)) (vector-map (lambda (H42cb@x) (make-simple-struct 'stx '5 (list (H2e83@stx-expr H42cb@x) (H2e87@stx-mark* H42cb@x) '() '()))) H4286@exp-id*) H42c1@exp-lab*)))) (values H42b5@lex* H42b4@rhs* (vector H4287@name) (vector H42c7@lab) (cons (cons H42c7@lab (cons '$module H42c8@iface)) H42b7@r) (cons (cons H42c7@lab (cons '$module H42c8@iface)) H42b6@mr) H42c2@mod** H42b2@kwd*)))))))))))))) (set! H4bb9@H3112@chi-internal-module H3112@chi-internal-module) (set! H3114@chi-body* (lambda (H42cd@e* H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42d3@kwd* H42d4@exp* H42d5@rib H42d6@top?) (if (null? H42cd@e*) (values H42cd@e* H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42d3@kwd* H42d4@exp*) (let ((H42e1@e (car H42cd@e*))) (call-with-values (lambda () (H2ed7@syntax-type H42e1@e H42ce@r)) (lambda (H42e9@H42e4 H42ea@H42e6 H42eb@H42e8) (let ((H42ef@kwd H42eb@H42e8) (H42f0@value H42ea@H42e6) (H42f1@type H42e9@H42e4)) (let ((H42f5@kwd* (if (H2eb5@id? H42ef@kwd) (cons H42ef@kwd H42d3@kwd*) H42d3@kwd*))) (let ((H42f7@t H42f1@type)) (if (memv H42f7@t '(define)) (call-with-values (lambda () (H303e@parse-define H42e1@e)) (lambda (H42fd@H42fa H42fe@H42fc) (let ((H4301@rhs H42fe@H42fc) (H4302@id H42fd@H42fa)) (begin (if (H2ec1@bound-id-member? H4302@id H42f5@kwd*) (H319c@syntax-violation '#f '"cannot redefine keyword" H42e1@e) (void)) (call-with-values (lambda () (H2e45@gen-define-label+loc H4302@id H42d5@rib)) (lambda (H4309@H4306 H430a@H4308) (let ((H430d@lex H430a@H4308) (H430e@lab H4309@H4306)) (begin (H2e6b@extend-rib! H42d5@rib H4302@id H430e@lab) (H3114@chi-body* (cdr H42cd@e*) (H304c@add-lexical H430e@lab H430d@lex H42ce@r) H42cf@mr (cons H430d@lex H42d0@lex*) (cons H4301@rhs H42d1@rhs*) H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?))))))))) (if (memv H42f7@t '(define-syntax)) (call-with-values (lambda () (H3040@parse-define-syntax H42e1@e)) (lambda (H4315@H4312 H4316@H4314) (let ((H4319@rhs H4316@H4314) (H431a@id H4315@H4312)) (begin (if (H2ec1@bound-id-member? H431a@id H42f5@kwd*) (H319c@syntax-violation '#f '"cannot redefine keyword" H42e1@e) (void)) (let ((H431d@lab (H2e47@gen-define-label H431a@id H42d5@rib)) (H431e@expanded-rhs (H3116@expand-transformer H4319@rhs H42cf@mr))) (begin (H2e6b@extend-rib! H42d5@rib H431a@id H431d@lab) (let ((H4321@b (H2eed@make-eval-transformer H431e@expanded-rhs))) (H3114@chi-body* (cdr H42cd@e*) (cons (cons H431d@lab H4321@b) H42ce@r) (cons (cons H431d@lab H4321@b) H42cf@mr) H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?)))))))) (if (memv H42f7@t '(let-syntax letrec-syntax)) (let ((H4323@t H42e1@e)) (let ((H4325@ls/false (H30bc@syntax-dispatch H4323@t '(_ #(each (any any)) . each-any)))) (if (and H4325@ls/false (apply (lambda (H4327@xlhs* H4328@xrhs* H4329@xbody*) (if (not (H2ebd@valid-bound-ids? H4327@xlhs*)) (H319c@syntax-violation '#f '"invalid identifiers" H42e1@e) (void))) H4325@ls/false)) (apply (lambda (H432d@xlhs* H432e@xrhs* H432f@xbody*) (let ((H4333@xlab* (map H2e41@gen-label H432d@xlhs*))) (let ((H4335@xrib (H2e75@make-full-rib H432d@xlhs* H4333@xlab*))) (let ((H4337@xb* (map (lambda (H4339@x) (H2eed@make-eval-transformer (H3116@expand-transformer (if (eq? H42f1@type 'let-syntax) H4339@x (H2ea1@add-subst H4335@xrib H4339@x)) H42cf@mr))) H432e@xrhs*))) (H3114@chi-body* (append (map (lambda (H433b@x) (H2ea1@add-subst H4335@xrib H433b@x)) H432f@xbody*) (cdr H42cd@e*)) (append (map cons H4333@xlab* H4337@xb*) H42ce@r) (append (map cons H4333@xlab* H4337@xb*) H42cf@mr) H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?))))) H4325@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4323@t)))) (if (memv H42f7@t '(begin)) (let ((H433d@t H42e1@e)) (let ((H433f@ls/false (H30bc@syntax-dispatch H433d@t '(_ . each-any)))) (if H433f@ls/false (apply (lambda (H4341@x*) (H3114@chi-body* (append H4341@x* (cdr H42cd@e*)) H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?)) H433f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H433d@t)))) (if (memv H42f7@t '(global-macro global-macro!)) (H3114@chi-body* (cons (H2ea1@add-subst H42d5@rib (H30d8@chi-global-macro H42f0@value H42e1@e)) (cdr H42cd@e*)) H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?) (if (memv H42f7@t '(local-macro local-macro!)) (H3114@chi-body* (cons (H2ea1@add-subst H42d5@rib (H30d6@chi-local-macro H42f0@value H42e1@e)) (cdr H42cd@e*)) H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?) (if (memv H42f7@t '(macro macro!)) (H3114@chi-body* (cons (H2ea1@add-subst H42d5@rib (H30d4@chi-macro H42f0@value H42e1@e)) (cdr H42cd@e*)) H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?) (if (memv H42f7@t '(module)) (call-with-values (lambda () (H3112@chi-internal-module H42e1@e H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd*)) (lambda (H4353@H4344 H4354@H4346 H4355@H4348 H4356@H434a H4357@H434c H4358@H434e H4359@H4350 H435a@H4352) (let ((H4363@kwd* H435a@H4352) (H4364@mod** H4359@H4350) (H4365@mr H4358@H434e) (H4366@r H4357@H434c) (H4367@m-exp-lab* H4356@H434a) (H4368@m-exp-id* H4355@H4348) (H4369@rhs* H4354@H4346) (H436a@lex* H4353@H4344)) (begin (vector-for-each (lambda (H4373@id H4374@lab) (H2e6b@extend-rib! H42d5@rib H4373@id H4374@lab)) H4368@m-exp-id* H4367@m-exp-lab*) (H3114@chi-body* (cdr H42cd@e*) H4366@r H4365@mr H436a@lex* H4369@rhs* H4364@mod** H4363@kwd* H42d4@exp* H42d5@rib H42d6@top?))))) (if (memv H42f7@t '(library)) (begin (H317e@library-expander (H2ec9@stx->datum H42e1@e)) (H3114@chi-body* (cdr H42cd@e*) H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?)) (if (memv H42f7@t '(export)) (let ((H4377@t H42e1@e)) (let ((H4379@ls/false (H30bc@syntax-dispatch H4377@t '(_ . each-any)))) (if H4379@ls/false (apply (lambda (H437b@exp-decl*) (H3114@chi-body* (cdr H42cd@e*) H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* (append H437b@exp-decl* H42d4@exp*) H42d5@rib H42d6@top?)) H4379@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4377@t)))) (if (memv H42f7@t '(import)) (letrec* ((H437e@module-import? (lambda (H43d1@e) (let ((H43d3@t H43d1@e)) (let ((H43d5@ls/false (H30bc@syntax-dispatch H43d3@t '(_ any)))) (if (and H43d5@ls/false (apply (lambda (H43d7@id) (H2eb5@id? H43d7@id)) H43d5@ls/false)) (apply (lambda (H43d9@id) '#t) H43d5@ls/false) (let ((H43db@t H43d3@t)) (let ((H43dd@ls/false (H30bc@syntax-dispatch H43db@t '(_ . each-any)))) (if H43dd@ls/false (apply (lambda (H43df@imp*) '#f) H43dd@ls/false) (let ((H43e1@t H43db@t)) (let ((H43e3@ls/false (H30bc@syntax-dispatch H43e1@t '_))) (if H43e3@ls/false (apply (lambda () (H319c@syntax-violation '#f '"malformed import form" H43d1@e)) H43e3@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H43e1@t)))))))))))) (H4380@module-import (lambda (H43af@e H43b0@r) (let ((H43b3@t H43af@e)) (let ((H43b5@ls/false (H30bc@syntax-dispatch H43b3@t '(_ any)))) (if (and H43b5@ls/false (apply (lambda (H43b7@id) (H2eb5@id? H43b7@id)) H43b5@ls/false)) (apply (lambda (H43b9@id) (call-with-values (lambda () (H2ed7@syntax-type H43b9@id H43b0@r)) (lambda (H43c1@H43bc H43c2@H43be H43c3@H43c0) (let ((H43c7@kwd H43c3@H43c0) (H43c8@value H43c2@H43be) (H43c9@type H43c1@H43bc)) (let ((H43cd@t H43c9@type)) (if (memv H43cd@t '($module)) (let ((H43cf@iface H43c8@value)) (values (H3110@module-interface-exp-id* H43cf@iface H43b9@id) (H310a@module-interface-exp-lab-vec H43cf@iface))) (H319c@syntax-violation '#f '"invalid import" H43af@e))))))) H43b5@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H43b3@t)))))) (H4382@library-import (lambda (H4393@e) (let ((H4395@t H4393@e)) (let ((H4397@ls/false (H30bc@syntax-dispatch H4395@t '(any . each-any)))) (if H4397@ls/false (apply (lambda (H4399@ctxt H439a@imp*) (call-with-values (lambda () (H311e@parse-import-spec* (H31a2@syntax->datum H439a@imp*))) (lambda (H43a1@H439e H43a2@H43a0) (let ((H43a5@subst-labels H43a2@H43a0) (H43a6@subst-names H43a1@H439e)) (values (vector-map (lambda (H43a9@name) (H2e95@datum->stx H4399@ctxt H43a9@name)) H43a6@subst-names) H43a5@subst-labels))))) H4397@ls/false) (let ((H43ab@t H4395@t)) (let ((H43ad@ls/false (H30bc@syntax-dispatch H43ab@t '_))) (if H43ad@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid import form" H4393@e)) H43ad@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H43ab@t)))))))))) (begin (call-with-values (lambda () (if (H437e@module-import? H42e1@e) (H4380@module-import H42e1@e H42ce@r) (H4382@library-import H42e1@e))) (lambda (H4387@H4384 H4388@H4386) (let ((H438b@lab* H4388@H4386) (H438c@id* H4387@H4384)) (vector-for-each (lambda (H438f@id H4390@lab) (H2e6b@extend-rib! H42d5@rib H438f@id H4390@lab)) H438c@id* H438b@lab*)))) (H3114@chi-body* (cdr H42cd@e*) H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?))) (if H42d6@top? (H3114@chi-body* (cdr H42cd@e*) H42ce@r H42cf@mr (cons (H2e3d@gen-lexical 'dummy) H42d0@lex*) (cons (cons 'top-expr H42e1@e) H42d1@rhs*) H42d2@mod** H42f5@kwd* H42d4@exp* H42d5@rib H42d6@top?) (values H42cd@e* H42ce@r H42cf@mr H42d0@lex* H42d1@rhs* H42d2@mod** H42f5@kwd* H42d4@exp*)))))))))))))))))))))) (set! H4bba@H3114@chi-body* H3114@chi-body*) (set! H3116@expand-transformer (lambda (H43e5@expr H43e6@r) (let ((H43e9@rtc (H3122@make-collector))) (let ((H43eb@expanded-rhs (let ((H43f5@H43ee H3124@inv-collector) (H43f6@H43f0 H3126@vis-collector) (H43f7@H43f2 H43e9@rtc) (H43f8@H43f4 (lambda (H43fd@x) (values)))) (let ((H43ff@swap (lambda () (begin (let ((H4401@t (H43f5@H43ee))) (begin (H43f5@H43ee H43f7@H43f2) (set! H43f7@H43f2 H4401@t))) (let ((H4403@t (H43f6@H43f0))) (begin (H43f6@H43f0 H43f8@H43f4) (set! H43f8@H43f4 H4403@t))))))) (dynamic-wind H43ff@swap (lambda () (H30de@chi-expr H43e5@expr H43e6@r H43e6@r)) H43ff@swap))))) (begin (for-each (let ((H4405@mark-visit (H3126@vis-collector))) (lambda (H4407@x) (begin (H2cd1@H2b1f@invoke-library H4407@x) (H4405@mark-visit H4407@x)))) (H43e9@rtc)) H43eb@expanded-rhs))))) (set! H4bbb@H3116@expand-transformer H3116@expand-transformer) (set! H3118@parse-exports (lambda (H4409@exp*) (let H4411@f ((H440b@exp* H4409@exp*) (H440c@int* '()) (H440d@ext* '())) (if (null? H440b@exp*) (begin (if (not (H2ebd@valid-bound-ids? H440d@ext*)) (H319c@syntax-violation 'export '"invalid exports" (H30f2@find-dups H440d@ext*)) (void)) (values (map H31a2@syntax->datum H440d@ext*) H440c@int*)) (let ((H4413@t (car H440b@exp*))) (let ((H4415@ls/false (H30bc@syntax-dispatch H4413@t '(any . #(each (any any)))))) (if H4415@ls/false (apply (lambda (H4417@rename H4418@i* H4419@e*) (begin (if (not (and (eq? (H31a2@syntax->datum H4417@rename) 'rename) (for-all H2eb5@id? H4418@i*) (for-all H2eb5@id? H4419@e*))) (H319c@syntax-violation 'export '"invalid export specifier" (car H440b@exp*)) (void)) (H4411@f (cdr H440b@exp*) (append H4418@i* H440c@int*) (append H4419@e* H440d@ext*)))) H4415@ls/false) (let ((H441d@t H4413@t)) (let ((H441f@ls/false (H30bc@syntax-dispatch H441d@t 'any))) (if H441f@ls/false (apply (lambda (H4421@ie) (begin (if (not (H2eb5@id? H4421@ie)) (H319c@syntax-violation 'export '"invalid export" H4421@ie) (void)) (H4411@f (cdr H440b@exp*) (cons H4421@ie H440c@int*) (cons H4421@ie H440d@ext*)))) H441f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H441d@t))))))))))) (set! H4bbc@H3118@parse-exports H3118@parse-exports) (set! H311a@parse-library-name (lambda (H4423@spec) (letrec* ((H4426@parse (lambda (H4433@x) (let ((H4435@t H4433@x)) (let ((H4437@ls/false (H30bc@syntax-dispatch H4435@t '(each-any)))) (if (and H4437@ls/false (apply (lambda (H4439@v*) (for-all (lambda (H443b@x) (let ((H443d@x (H31a2@syntax->datum H443b@x))) (and (integer? H443d@x) (exact? H443d@x)))) H4439@v*)) H4437@ls/false)) (apply (lambda (H443f@v*) (values '() (map H31a2@syntax->datum H443f@v*))) H4437@ls/false) (let ((H4441@t H4435@t)) (let ((H4443@ls/false (H30bc@syntax-dispatch H4441@t '(any . any)))) (if (and H4443@ls/false (apply (lambda (H4445@x H4446@rest) (symbol? (H31a2@syntax->datum H4445@x))) H4443@ls/false)) (apply (lambda (H4449@x H444a@rest) (call-with-values (lambda () (H4426@parse H444a@rest)) (lambda (H4451@H444e H4452@H4450) (let ((H4455@v* H4452@H4450) (H4456@x* H4451@H444e)) (values (cons (H31a2@syntax->datum H4449@x) H4456@x*) H4455@v*))))) H4443@ls/false) (let ((H4459@t H4441@t)) (let ((H445b@ls/false (H30bc@syntax-dispatch H4459@t '()))) (if H445b@ls/false (apply (lambda () (values '() '())) H445b@ls/false) (let ((H445d@t H4459@t)) (let ((H445f@ls/false (H30bc@syntax-dispatch H445d@t '_))) (if H445f@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid library name" H4423@spec)) H445f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H445d@t)))))))))))))))) (call-with-values (lambda () (H4426@parse H4423@spec)) (lambda (H442b@H4428 H442c@H442a) (let ((H442f@ver* H442c@H442a) (H4430@name* H442b@H4428)) (begin (if (null? H4430@name*) (H319c@syntax-violation '#f '"empty library name" H4423@spec) (void)) (values H4430@name* H442f@ver*)))))))) (set! H4bbd@H311a@parse-library-name H311a@parse-library-name) (set! H311c@parse-library (lambda (H4461@e) (let ((H4463@t H4461@e)) (let ((H4465@ls/false (H30bc@syntax-dispatch H4463@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and H4465@ls/false (apply (lambda (H4467@library H4468@name* H4469@export H446a@exp* H446b@import H446c@imp* H446d@b*) (and (eq? (H31a2@syntax->datum H4469@export) 'export) (eq? (H31a2@syntax->datum H446b@import) 'import) (eq? (H31a2@syntax->datum H4467@library) 'library))) H4465@ls/false)) (apply (lambda (H4475@library H4476@name* H4477@export H4478@exp* H4479@import H447a@imp* H447b@b*) (values H4476@name* H4478@exp* H447a@imp* H447b@b*)) H4465@ls/false) (let ((H4483@t H4463@t)) (let ((H4485@ls/false (H30bc@syntax-dispatch H4483@t '_))) (if H4485@ls/false (apply (lambda () (H319c@syntax-violation '#f '"malformed library" H4461@e)) H4485@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4483@t))))))))) (set! H4bbe@H311c@parse-library H311c@parse-library) (set! H311e@parse-import-spec* (letrec* ((H4488@idsyn? (lambda (H4691@x) (symbol? (H31a2@syntax->datum H4691@x)))) (H448a@dup-error (lambda (H468f@name) (H319c@syntax-violation 'import '"two imports with different bindings" H468f@name))) (H448c@merge-substs (lambda (H467d@s H467e@subst) (letrec* ((H4682@insert-to-subst (lambda (H4683@a H4684@subst) (let ((H4687@name (car H4683@a)) (H4688@label (cdr H4683@a))) (let ((H468b@t (assq H4687@name H4684@subst))) (if H468b@t ((lambda (H468d@x) (if (eq? (cdr H468d@x) H4688@label) H4684@subst (H448a@dup-error H4687@name))) H468b@t) (cons H4683@a H4684@subst))))))) (if (null? H467d@s) H467e@subst (H4682@insert-to-subst (car H467d@s) (H448c@merge-substs (cdr H467d@s) H467e@subst)))))) (H448e@exclude* (lambda (H464d@sym* H464e@subst) (letrec* ((H4652@exclude (lambda (H466b@sym H466c@subst) (if (null? H466c@subst) (H319c@syntax-violation 'import '"cannot rename unbound identifier" H466b@sym) (if (eq? H466b@sym (caar H466c@subst)) (values (cdar H466c@subst) (cdr H466c@subst)) (let ((H466f@a (car H466c@subst))) (call-with-values (lambda () (H4652@exclude H466b@sym (cdr H466c@subst))) (lambda (H4675@H4672 H4676@H4674) (let ((H4679@subst H4676@H4674) (H467a@old H4675@H4672)) (values H467a@old (cons H466f@a H4679@subst))))))))))) (if (null? H464d@sym*) (values '() H464e@subst) (call-with-values (lambda () (H4652@exclude (car H464d@sym*) H464e@subst)) (lambda (H4657@H4654 H4658@H4656) (let ((H465b@subst H4658@H4656) (H465c@old H4657@H4654)) (call-with-values (lambda () (H448e@exclude* (cdr H464d@sym*) H465b@subst)) (lambda (H4663@H4660 H4664@H4662) (let ((H4667@subst H4664@H4662) (H4668@old* H4663@H4660)) (values (cons H465c@old H4668@old*) H4667@subst))))))))))) (H4490@find* (lambda (H4645@sym* H4646@subst) (map (lambda (H4649@x) (let ((H464b@t (assq H4649@x H4646@subst))) (if H464b@t (cdr H464b@t) (H319c@syntax-violation 'import '"cannot find identifier" H4649@x)))) H4645@sym*))) (H4492@rem* (lambda (H463d@sym* H463e@subst) (let H4643@f ((H4641@subst H463e@subst)) (if (null? H4641@subst) '() (if (memq (caar H4641@subst) H463d@sym*) (H4643@f (cdr H4641@subst)) (cons (car H4641@subst) (H4643@f (cdr H4641@subst)))))))) (H4494@remove-dups (lambda (H463b@ls) (if (null? H463b@ls) '() (if (memq (car H463b@ls) (cdr H463b@ls)) (H4494@remove-dups (cdr H463b@ls)) (cons (car H463b@ls) (H4494@remove-dups (cdr H463b@ls))))))) (H4496@parse-library-name (lambda (H4553@spec) (letrec* ((H4556@subversion? (lambda (H4637@x) (let ((H4639@x (H31a2@syntax->datum H4637@x))) (and (integer? H4639@x) (exact? H4639@x) (>= H4639@x '0))))) (H4558@subversion-pred (lambda (H45d7@x*) (let ((H45d9@t H45d7@x*)) (let ((H45db@ls/false (H30bc@syntax-dispatch H45d9@t 'any))) (if (and H45db@ls/false (apply (lambda (H45dd@n) (H4556@subversion? H45dd@n)) H45db@ls/false)) (apply (lambda (H45df@n) (lambda (H45e1@x) (= H45e1@x (H31a2@syntax->datum H45df@n)))) H45db@ls/false) (let ((H45e3@t H45d9@t)) (let ((H45e5@ls/false (H30bc@syntax-dispatch H45e3@t '(any . each-any)))) (if (and H45e5@ls/false (apply (lambda (H45e7@p? H45e8@sub*) (eq? (H31a2@syntax->datum H45e7@p?) 'and)) H45e5@ls/false)) (apply (lambda (H45eb@p? H45ec@sub*) (let ((H45ef@p* (map H4558@subversion-pred H45ec@sub*))) (lambda (H45f1@x) (for-all (lambda (H45f3@p) (H45f3@p H45f1@x)) H45ef@p*)))) H45e5@ls/false) (let ((H45f5@t H45e3@t)) (let ((H45f7@ls/false (H30bc@syntax-dispatch H45f5@t '(any . each-any)))) (if (and H45f7@ls/false (apply (lambda (H45f9@p? H45fa@sub*) (eq? (H31a2@syntax->datum H45f9@p?) 'or)) H45f7@ls/false)) (apply (lambda (H45fd@p? H45fe@sub*) (let ((H4601@p* (map H4558@subversion-pred H45fe@sub*))) (lambda (H4603@x) (exists (lambda (H4605@p) (H4605@p H4603@x)) H4601@p*)))) H45f7@ls/false) (let ((H4607@t H45f5@t)) (let ((H4609@ls/false (H30bc@syntax-dispatch H4607@t '(any any)))) (if (and H4609@ls/false (apply (lambda (H460b@p? H460c@sub) (eq? (H31a2@syntax->datum H460b@p?) 'not)) H4609@ls/false)) (apply (lambda (H460f@p? H4610@sub) (let ((H4613@p (H4558@subversion-pred H4610@sub))) (lambda (H4615@x) (not (H4613@p H4615@x))))) H4609@ls/false) (let ((H4617@t H4607@t)) (let ((H4619@ls/false (H30bc@syntax-dispatch H4617@t '(any any)))) (if (and H4619@ls/false (apply (lambda (H461b@p? H461c@n) (and (eq? (H31a2@syntax->datum H461b@p?) '<=) (H4556@subversion? H461c@n))) H4619@ls/false)) (apply (lambda (H461f@p? H4620@n) (lambda (H4623@x) (<= H4623@x (H31a2@syntax->datum H4620@n)))) H4619@ls/false) (let ((H4625@t H4617@t)) (let ((H4627@ls/false (H30bc@syntax-dispatch H4625@t '(any any)))) (if (and H4627@ls/false (apply (lambda (H4629@p? H462a@n) (and (eq? (H31a2@syntax->datum H4629@p?) '>=) (H4556@subversion? H462a@n))) H4627@ls/false)) (apply (lambda (H462d@p? H462e@n) (lambda (H4631@x) (>= H4631@x (H31a2@syntax->datum H462e@n)))) H4627@ls/false) (let ((H4633@t H4625@t)) (let ((H4635@ls/false (H30bc@syntax-dispatch H4633@t '_))) (if H4635@ls/false (apply (lambda () (H319c@syntax-violation 'import '"invalid sub-version spec" H4553@spec H45d7@x*)) H4635@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4633@t)))))))))))))))))))))))) (H455a@version-pred (lambda (H4587@x*) (let ((H4589@t H4587@x*)) (let ((H458b@ls/false (H30bc@syntax-dispatch H4589@t '()))) (if H458b@ls/false (apply (lambda () (lambda (H458d@x) '#t)) H458b@ls/false) (let ((H458f@t H4589@t)) (let ((H4591@ls/false (H30bc@syntax-dispatch H458f@t '(any . each-any)))) (if (and H4591@ls/false (apply (lambda (H4593@c H4594@ver*) (eq? (H31a2@syntax->datum H4593@c) 'and)) H4591@ls/false)) (apply (lambda (H4597@c H4598@ver*) (let ((H459b@p* (map H455a@version-pred H4598@ver*))) (lambda (H459d@x) (for-all (lambda (H459f@p) (H459f@p H459d@x)) H459b@p*)))) H4591@ls/false) (let ((H45a1@t H458f@t)) (let ((H45a3@ls/false (H30bc@syntax-dispatch H45a1@t '(any . each-any)))) (if (and H45a3@ls/false (apply (lambda (H45a5@c H45a6@ver*) (eq? (H31a2@syntax->datum H45a5@c) 'or)) H45a3@ls/false)) (apply (lambda (H45a9@c H45aa@ver*) (let ((H45ad@p* (map H455a@version-pred H45aa@ver*))) (lambda (H45af@x) (exists (lambda (H45b1@p) (H45b1@p H45af@x)) H45ad@p*)))) H45a3@ls/false) (let ((H45b3@t H45a1@t)) (let ((H45b5@ls/false (H30bc@syntax-dispatch H45b3@t '(any any)))) (if (and H45b5@ls/false (apply (lambda (H45b7@c H45b8@ver) (eq? (H31a2@syntax->datum H45b7@c) 'not)) H45b5@ls/false)) (apply (lambda (H45bb@c H45bc@ver) (let ((H45bf@p (H455a@version-pred H45bc@ver))) (lambda (H45c1@x) (not (H45bf@p H45c1@x))))) H45b5@ls/false) (let ((H45c3@t H45b3@t)) (let ((H45c5@ls/false (H30bc@syntax-dispatch H45c3@t 'each-any))) (if H45c5@ls/false (apply (lambda (H45c7@sub*) (let ((H45c9@p* (map H4558@subversion-pred H45c7@sub*))) (lambda (H45cb@x) (let H45d1@f ((H45cd@p* H45c9@p*) (H45ce@x H45cb@x)) (if (null? H45cd@p*) '#t (if (null? H45ce@x) '#f (and ((car H45cd@p*) (car H45ce@x)) (H45d1@f (cdr H45cd@p*) (cdr H45ce@x))))))))) H45c5@ls/false) (let ((H45d3@t H45c3@t)) (let ((H45d5@ls/false (H30bc@syntax-dispatch H45d3@t '_))) (if H45d5@ls/false (apply (lambda () (H319c@syntax-violation 'import '"invalid version spec" H4553@spec H4587@x*)) H45d5@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H45d3@t)))))))))))))))))))))) (let H455d@f ((H455b@x H4553@spec)) (let ((H455f@t H455b@x)) (let ((H4561@ls/false (H30bc@syntax-dispatch H455f@t '(each-any)))) (if H4561@ls/false (apply (lambda (H4563@version-spec*) (values '() (H455a@version-pred H4563@version-spec*))) H4561@ls/false) (let ((H4565@t H455f@t)) (let ((H4567@ls/false (H30bc@syntax-dispatch H4565@t '(any . any)))) (if (and H4567@ls/false (apply (lambda (H4569@x H456a@x*) (H4488@idsyn? H4569@x)) H4567@ls/false)) (apply (lambda (H456d@x H456e@x*) (call-with-values (lambda () (H455d@f H456e@x*)) (lambda (H4575@H4572 H4576@H4574) (let ((H4579@pred H4576@H4574) (H457a@name H4575@H4572)) (values (cons (H31a2@syntax->datum H456d@x) H457a@name) H4579@pred))))) H4567@ls/false) (let ((H457d@t H4565@t)) (let ((H457f@ls/false (H30bc@syntax-dispatch H457d@t '()))) (if H457f@ls/false (apply (lambda () (values '() (lambda (H4581@x) '#t))) H457f@ls/false) (let ((H4583@t H457d@t)) (let ((H4585@ls/false (H30bc@syntax-dispatch H4583@t '_))) (if H4585@ls/false (apply (lambda () (H319c@syntax-violation '#f '"invalid import spec" H4553@spec)) H4585@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4583@t))))))))))))))))) (H4498@import-library (lambda (H4543@spec*) (call-with-values (lambda () (H4496@parse-library-name H4543@spec*)) (lambda (H4549@H4546 H454a@H4548) (let ((H454d@pred H454a@H4548) (H454e@name H4549@H4546)) (begin (if (null? H454e@name) (H319c@syntax-violation 'import '"empty library name" H4543@spec*) (void)) (let ((H4551@lib (H2cca@H2b11@find-library-by-name H454e@name))) (begin (if (not H4551@lib) (H319c@syntax-violation 'import '"cannot find library with required name" H454e@name) (void)) (if (not (H454d@pred (H2ca4@H2ac5@library-version H4551@lib))) (H319c@syntax-violation 'import '"library does not satisfy version specification" H4543@spec* H4551@lib) (void)) ((H3128@imp-collector) H4551@lib) (H2cac@H2ad5@library-subst H4551@lib))))))))) (H449a@get-import (lambda (H44b5@spec) (let ((H44b7@t H44b5@spec)) (let ((H44b9@ls/false (H30bc@syntax-dispatch H44b7@t '(any . each-any)))) (if (and H44b9@ls/false (apply (lambda (H44bb@x H44bc@x*) (not (memq (H31a2@syntax->datum H44bb@x) '(for rename except only prefix library)))) H44b9@ls/false)) (apply (lambda (H44bf@x H44c0@x*) (H4498@import-library (cons H44bf@x H44c0@x*))) H44b9@ls/false) (let ((H44c3@t H44b7@t)) (let ((H44c5@ls/false (H30bc@syntax-dispatch H44c3@t '(any any . #(each (any any)))))) (if (and H44c5@ls/false (apply (lambda (H44c7@rename H44c8@isp H44c9@old* H44ca@new*) (and (eq? (H31a2@syntax->datum H44c7@rename) 'rename) (for-all H4488@idsyn? H44c9@old*) (for-all H4488@idsyn? H44ca@new*))) H44c5@ls/false)) (apply (lambda (H44cf@rename H44d0@isp H44d1@old* H44d2@new*) (let ((H44d7@subst (H449a@get-import H44d0@isp)) (H44d8@old* (map H31a2@syntax->datum H44d1@old*)) (H44d9@new* (map H31a2@syntax->datum H44d2@new*))) (let ((H44dd@old-label* (H4490@find* H44d8@old* H44d7@subst))) (let ((H44df@subst (H4492@rem* H44d8@old* H44d7@subst))) (H448c@merge-substs (map cons H44d9@new* H44dd@old-label*) H44df@subst))))) H44c5@ls/false) (let ((H44e1@t H44c3@t)) (let ((H44e3@ls/false (H30bc@syntax-dispatch H44e1@t '(any any . each-any)))) (if (and H44e3@ls/false (apply (lambda (H44e5@except H44e6@isp H44e7@sym*) (and (eq? (H31a2@syntax->datum H44e5@except) 'except) (for-all H4488@idsyn? H44e7@sym*))) H44e3@ls/false)) (apply (lambda (H44eb@except H44ec@isp H44ed@sym*) (let ((H44f1@subst (H449a@get-import H44ec@isp))) (H4492@rem* (map H31a2@syntax->datum H44ed@sym*) H44f1@subst))) H44e3@ls/false) (let ((H44f3@t H44e1@t)) (let ((H44f5@ls/false (H30bc@syntax-dispatch H44f3@t '(any any . each-any)))) (if (and H44f5@ls/false (apply (lambda (H44f7@only H44f8@isp H44f9@sym*) (and (eq? (H31a2@syntax->datum H44f7@only) 'only) (for-all H4488@idsyn? H44f9@sym*))) H44f5@ls/false)) (apply (lambda (H44fd@only H44fe@isp H44ff@sym*) (let ((H4503@subst (H449a@get-import H44fe@isp)) (H4504@sym* (map H31a2@syntax->datum H44ff@sym*))) (let ((H4507@sym* (H4494@remove-dups H4504@sym*))) (let ((H4509@lab* (H4490@find* H4507@sym* H4503@subst))) (map cons H4507@sym* H4509@lab*))))) H44f5@ls/false) (let ((H450b@t H44f3@t)) (let ((H450d@ls/false (H30bc@syntax-dispatch H450b@t '(any any any)))) (if (and H450d@ls/false (apply (lambda (H450f@prefix H4510@isp H4511@p) (and (eq? (H31a2@syntax->datum H450f@prefix) 'prefix) (H4488@idsyn? H4511@p))) H450d@ls/false)) (apply (lambda (H4515@prefix H4516@isp H4517@p) (let ((H451b@subst (H449a@get-import H4516@isp)) (H451c@prefix (symbol->string (H31a2@syntax->datum H4517@p)))) (map (lambda (H451f@x) (cons (string->symbol (string-append H451c@prefix (symbol->string (car H451f@x)))) (cdr H451f@x))) H451b@subst))) H450d@ls/false) (let ((H4521@t H450b@t)) (let ((H4523@ls/false (H30bc@syntax-dispatch H4521@t '(any each-any)))) (if (and H4523@ls/false (apply (lambda (H4525@library H4526@spec*) (eq? (H31a2@syntax->datum H4525@library) 'library)) H4523@ls/false)) (apply (lambda (H4529@library H452a@spec*) (H4498@import-library H452a@spec*)) H4523@ls/false) (let ((H452d@t H4521@t)) (let ((H452f@ls/false (H30bc@syntax-dispatch H452d@t '(any any . any)))) (if (and H452f@ls/false (apply (lambda (H4531@for H4532@isp H4533@rest) (eq? (H31a2@syntax->datum H4531@for) 'for)) H452f@ls/false)) (apply (lambda (H4537@for H4538@isp H4539@rest) (H449a@get-import H4538@isp)) H452f@ls/false) (let ((H453d@t H452d@t)) (let ((H453f@ls/false (H30bc@syntax-dispatch H453d@t 'any))) (if H453f@ls/false (apply (lambda (H4541@spec) (H319c@syntax-violation 'import '"invalid import spec" H4541@spec)) H453f@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H453d@t))))))))))))))))))))))))))) (H449c@add-imports! (lambda (H44a5@imp H44a6@h) (let ((H44a9@subst (H449a@get-import H44a5@imp))) (for-each (lambda (H44ab@x) (let ((H44ad@name (car H44ab@x)) (H44ae@label (cdr H44ab@x))) (let ((H44b1@t (hashtable-ref H44a6@h H44ad@name '#f))) (if H44b1@t ((lambda (H44b3@l) (if (not (eq? H44b3@l H44ae@label)) (H448a@dup-error H44ad@name) (void))) H44b1@t) (hashtable-set! H44a6@h H44ad@name H44ae@label))))) H44a9@subst))))) (lambda (H449d@imp*) (let H44a3@f ((H449f@imp* H449d@imp*) (H44a0@h (make-eq-hashtable))) (if (null? H449f@imp*) (hashtable-entries H44a0@h) (begin (H449c@add-imports! (car H449f@imp*) H44a0@h) (H44a3@f (cdr H449f@imp*) H44a0@h))))))) (set! H4bbf@H311e@parse-import-spec* H311e@parse-import-spec*) (set! H3120@make-top-rib (lambda (H4693@names H4694@labels) (let ((H4697@rib (H2e69@make-empty-rib))) (begin (vector-for-each (lambda (H4699@name H469a@label) (begin (if (not (symbol? H4699@name)) (error 'make-top-rib '"BUG: not a symbol" H4699@name) (void)) (H2e6d@extend-rib/nc! H4697@rib (make-simple-struct 'stx '5 (list H4699@name H2e39@top-mark* '() '())) H469a@label))) H4693@names H4694@labels) H4697@rib)))) (set! H4bc0@H3120@make-top-rib H3120@make-top-rib) (set! H3122@make-collector (lambda () (let ((H469d@ls '())) (lambda H46a1 (let ((H46a2 (length H46a1))) (if (= H46a2 '0) (apply (lambda () H469d@ls) H46a1) (if (= H46a2 '1) (apply (lambda (H469f@x) (set! H469d@ls (H2e32@set-cons H469f@x H469d@ls))) H46a1) (error 'apply '"invalid arg count")))))))) (set! H4bc1@H3122@make-collector H3122@make-collector) (set! H3124@inv-collector (H2a05@H28e3@make-parameter (lambda H46a3@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (H46a5@x) (begin (if (not (procedure? H46a5@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" H46a5@x) (void)) H46a5@x)))) (set! H4bc2@H3124@inv-collector H3124@inv-collector) (set! H3126@vis-collector (H2a05@H28e3@make-parameter (lambda H46a7@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (H46a9@x) (begin (if (not (procedure? H46a9@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" H46a9@x) (void)) H46a9@x)))) (set! H4bc3@H3126@vis-collector H3126@vis-collector) (set! H3128@imp-collector (H2a05@H28e3@make-parameter (lambda H46ab@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (H46ad@x) (begin (if (not (procedure? H46ad@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" H46ad@x) (void)) H46ad@x)))) (set! H4bc4@H3128@imp-collector H3128@imp-collector) (set! H312a@chi-library-internal (lambda (H46af@e* H46b0@rib H46b1@top?) (call-with-values (lambda () (H3114@chi-body* H46af@e* '() '() '() '() '() '() '() H46b0@rib H46b1@top?)) (lambda (H46c5@H46b6 H46c6@H46b8 H46c7@H46ba H46c8@H46bc H46c9@H46be H46ca@H46c0 H46cb@H46c2 H46cc@H46c4) (let ((H46d5@exp* H46cc@H46c4) (H46d6@_kwd* H46cb@H46c2) (H46d7@mod** H46ca@H46c0) (H46d8@rhs* H46c9@H46be) (H46d9@lex* H46c8@H46bc) (H46da@mr H46c7@H46ba) (H46db@r H46c6@H46b8) (H46dc@e* H46c5@H46b6)) (values (append (apply append (reverse H46d7@mod**)) H46dc@e*) H46db@r H46da@mr (reverse H46d9@lex*) (reverse H46d8@rhs*) H46d5@exp*)))))) (set! H4bc5@H312a@chi-library-internal H312a@chi-library-internal) (set! H312c@chi-interaction-expr (lambda (H46e5@e H46e6@rib H46e7@r) (call-with-values (lambda () (H3114@chi-body* (list H46e5@e) H46e7@r H46e7@r '() '() '() '() '() H46e6@rib '#t)) (lambda (H46fb@H46ec H46fc@H46ee H46fd@H46f0 H46fe@H46f2 H46ff@H46f4 H4700@H46f6 H4701@H46f8 H4702@H46fa) (let ((H470b@_exp* H4702@H46fa) (H470c@_kwd* H4701@H46f8) (H470d@mod** H4700@H46f6) (H470e@rhs* H46ff@H46f4) (H470f@lex* H46fe@H46f2) (H4710@mr H46fd@H46f0) (H4711@r H46fc@H46ee) (H4712@e* H46fb@H46ec)) (let ((H471b@e* (H30ec@expand-interaction-rhs*/init* (reverse H470f@lex*) (reverse H470e@rhs*) (append (apply append (reverse H470d@mod**)) H4712@e*) H4711@r H4710@mr))) (let ((H471d@e (if (null? H471b@e*) (H2e1b@H2d7c@build-void) (if (null? (cdr H471b@e*)) (car H471b@e*) (H2e1a@H2d7a@build-sequence '#f H471b@e*))))) (values H471d@e H4711@r)))))))) (set! H4bc6@H312c@chi-interaction-expr H312c@chi-interaction-expr) (set! H312e@library-body-expander (lambda (H471f@name H4720@main-exp* H4721@imp* H4722@b* H4723@top?) (letrec* ((H472a@itc (H3122@make-collector))) (let ((H4733@H472c H3128@imp-collector) (H4734@H472e H31ac@top-level-context) (H4735@H4730 H472a@itc) (H4736@H4732 '#f)) (let ((H473b@swap (lambda () (begin (let ((H473d@t (H4733@H472c))) (begin (H4733@H472c H4735@H4730) (set! H4735@H4730 H473d@t))) (let ((H473f@t (H4734@H472e))) (begin (H4734@H472e H4736@H4732) (set! H4736@H4732 H473f@t))))))) (dynamic-wind H473b@swap (lambda () (call-with-values (lambda () (H311e@parse-import-spec* H4721@imp*)) (lambda (H4745@H4742 H4746@H4744) (let ((H4749@subst-labels H4746@H4744) (H474a@subst-names H4745@H4742)) (let ((H474d@rib (H3120@make-top-rib H474a@subst-names H4749@subst-labels))) (letrec* ((H4750@wrap (lambda (H47cb@x) (make-simple-struct 'stx '5 (list H47cb@x H2e39@top-mark* (list H474d@rib) '()))))) (let ((H4751@b* (map H4750@wrap H4722@b*)) (H4752@main-exp* (map H4750@wrap H4720@main-exp*)) (H4753@rtc (H3122@make-collector)) (H4754@vtc (H3122@make-collector))) (let ((H4761@H475a H3124@inv-collector) (H4762@H475c H3126@vis-collector) (H4763@H475e H4753@rtc) (H4764@H4760 H4754@vtc)) (let ((H4769@swap (lambda () (begin (let ((H476b@t (H4761@H475a))) (begin (H4761@H475a H4763@H475e) (set! H4763@H475e H476b@t))) (let ((H476d@t (H4762@H475c))) (begin (H4762@H475c H4764@H4760) (set! H4764@H4760 H476d@t))))))) (dynamic-wind H4769@swap (lambda () (call-with-values (lambda () (H312a@chi-library-internal H4751@b* H474d@rib H4723@top?)) (lambda (H477b@H4770 H477c@H4772 H477d@H4774 H477e@H4776 H477f@H4778 H4780@H477a) (let ((H4787@internal-exp* H4780@H477a) (H4788@rhs* H477f@H4778) (H4789@lex* H477e@H4776) (H478a@mr H477d@H4774) (H478b@r H477c@H4772) (H478c@init* H477b@H4770)) (call-with-values (lambda () (H3118@parse-exports (append H4752@main-exp* H4787@internal-exp*))) (lambda (H4797@H4794 H4798@H4796) (let ((H479b@exp-id* H4798@H4796) (H479c@exp-name* H4797@H4794)) (begin (H2e71@seal-rib! H474d@rib) (let ((H479f@init* (H30da@chi-expr* H478c@init* H478b@r H478a@mr))) (let ((H47a1@rhs* (H30ee@chi-rhs* H4788@rhs* H478b@r H478a@mr))) (begin (H2e73@unseal-rib! H474d@rib) (let ((H47a3@loc* (map H2e3f@gen-global H4789@lex*)) (H47a4@export-subst (H3186@make-export-subst H479c@exp-name* H479b@exp-id*))) (letrec* ((H47a8@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (H3188@make-export-env/macros H4789@lex* H47a3@loc* H478b@r)) (lambda (H47af@H47aa H47b0@H47ac H47b1@H47ae) (let ((H47b5@macro* H47b1@H47ae) (H47b6@global* H47b0@H47ac) (H47b7@export-env H47af@H47aa)) (begin (for-each (lambda (H47bb@s) (let ((H47bd@name (car H47bb@s)) (H47be@label (cdr H47bb@s))) (let ((H47c1@p (assq H47be@label H47b7@export-env))) (if H47c1@p (let ((H47c3@b (cdr H47c1@p))) (let ((H47c5@type (car H47c3@b))) (if (eq? H47c5@type 'mutable) (H319c@syntax-violation 'export H47a8@errstr H47bd@name) (void)))) (void))))) H47a4@export-subst) (let ((H47c7@invoke-body (H2e20@H2d86@build-library-letrec* '#f H471f@name H4789@lex* H47a3@loc* H47a1@rhs* (if (null? H479f@init*) (H2e1b@H2d7c@build-void) (H2e1a@H2d7a@build-sequence '#f H479f@init*)))) (H47c8@invoke-definitions (map H2e17@H2cd9@build-global-define (map cdr H47b6@global*)))) (values (H472a@itc) (H4753@rtc) (H4754@vtc) (H2e1a@H2d7a@build-sequence '#f (append H47c8@invoke-definitions (list H47c7@invoke-body))) H47b5@macro* H47a4@export-subst H47b7@export-env))))))))))))))))))) H4769@swap)))))))))) H473b@swap)))))) (set! H4bc7@H312e@library-body-expander H312e@library-body-expander) (set! H3130@core-library-expander (lambda (H47cd@e H47ce@verify-name) (call-with-values (lambda () (H311c@parse-library H47cd@e)) (lambda (H47d9@H47d2 H47da@H47d4 H47db@H47d6 H47dc@H47d8) (let ((H47e1@b* H47dc@H47d8) (H47e2@imp* H47db@H47d6) (H47e3@exp* H47da@H47d4) (H47e4@name* H47d9@H47d2)) (call-with-values (lambda () (H311a@parse-library-name H47e4@name*)) (lambda (H47ed@H47ea H47ee@H47ec) (let ((H47f1@ver H47ee@H47ec) (H47f2@name H47ed@H47ea)) (begin (H47ce@verify-name H47f2@name) (call-with-values (lambda () (H312e@library-body-expander H47f2@name H47e3@exp* H47e2@imp* H47e1@b* '#f)) (lambda (H4803@H47f6 H4804@H47f8 H4805@H47fa H4806@H47fc H4807@H47fe H4808@H4800 H4809@H4802) (let ((H4811@export-env H4809@H4802) (H4812@export-subst H4808@H4800) (H4813@visit-code H4807@H47fe) (H4814@invoke-code H4806@H47fc) (H4815@visit-req* H4805@H47fa) (H4816@invoke-req* H4804@H47f8) (H4817@imp* H4803@H47f6)) (values H47f2@name H47f1@ver H4817@imp* H4816@invoke-req* H4815@visit-req* H4814@invoke-code H4813@visit-code H4812@export-subst H4811@export-env))))))))))))) (set! H4bc8@H3130@core-library-expander H3130@core-library-expander) (set! H3132@parse-top-level-program (lambda (H481f@e*) (let ((H4821@t H481f@e*)) (let ((H4823@ls/false (H30bc@syntax-dispatch H4821@t '((any . each-any) . each-any)))) (if (and H4823@ls/false (apply (lambda (H4825@import H4826@imp* H4827@b*) (eq? (H31a2@syntax->datum H4825@import) 'import)) H4823@ls/false)) (apply (lambda (H482b@import H482c@imp* H482d@b*) (values H482c@imp* H482d@b*)) H4823@ls/false) (let ((H4831@t H4821@t)) (let ((H4833@ls/false (H30bc@syntax-dispatch H4831@t '((any . any) . any)))) (if (and H4833@ls/false (apply (lambda (H4835@import H4836@x H4837@y) (eq? (H31a2@syntax->datum H4835@import) 'import)) H4833@ls/false)) (apply (lambda (H483b@import H483c@x H483d@y) (H319c@syntax-violation 'expander '"invalid syntax of top-level program" (H2eaf@syntax-car H481f@e*))) H4833@ls/false) (let ((H4841@t H4831@t)) (let ((H4843@ls/false (H30bc@syntax-dispatch H4841@t '_))) (if H4843@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) H4843@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4841@t)))))))))))) (set! H4bc9@H3132@parse-top-level-program H3132@parse-top-level-program) (set! H3134@top-level-expander (lambda (H4845@e*) (call-with-values (lambda () (H3132@parse-top-level-program H4845@e*)) (lambda (H484b@H4848 H484c@H484a) (let ((H484f@b* H484c@H484a) (H4850@imp* H484b@H4848)) (call-with-values (lambda () (H312e@library-body-expander '() '() H4850@imp* H484f@b* '#t)) (lambda (H4861@H4854 H4862@H4856 H4863@H4858 H4864@H485a H4865@H485c H4866@H485e H4867@H4860) (let ((H486f@export-env H4867@H4860) (H4870@export-subst H4866@H485e) (H4871@visit-code H4865@H485c) (H4872@invoke-code H4864@H485a) (H4873@visit-req* H4863@H4858) (H4874@invoke-req* H4862@H4856) (H4875@imp* H4861@H4854)) (values H4874@invoke-req* H4872@invoke-code))))))))) (set! H4bca@H3134@top-level-expander H3134@top-level-expander) (set! H3136@rp (H2a02@H28dd@make-record-printer 'env (lambda (H487d@x H487e@p H487f@wr) (display '"#<environment>" H487e@p)))) (set! H4bcb@H3136@rp H3136@rp) (set! H3140@env? (lambda (H4883@x) (and (simple-struct? H4883@x) (eq? (simple-struct-name H4883@x) 'env)))) (set! H4bcc@H3140@env? H3140@env?) (set! H3142@env-names (lambda (H4885@x) (simple-struct-ref H4885@x '0))) (set! H4bcd@H3142@env-names H3142@env-names) (set! H3144@set-env-names! (lambda (H4887@x H4888@val) (simple-struct-set! H4887@x '0 H4888@val))) (set! H4bce@H3144@set-env-names! H3144@set-env-names!) (set! H3146@env-labels (lambda (H488b@x) (simple-struct-ref H488b@x '1))) (set! H4bcf@H3146@env-labels H3146@env-labels) (set! H3148@set-env-labels! (lambda (H488d@x H488e@val) (simple-struct-set! H488d@x '1 H488e@val))) (set! H4bd0@H3148@set-env-labels! H3148@set-env-labels!) (set! H314a@env-itc (lambda (H4891@x) (simple-struct-ref H4891@x '2))) (set! H4bd1@H314a@env-itc H314a@env-itc) (set! H314c@set-env-itc! (lambda (H4893@x H4894@val) (simple-struct-set! H4893@x '2 H4894@val))) (set! H4bd2@H314c@set-env-itc! H314c@set-env-itc!) (set! H314e@dummy '3) (set! H4bd3@H314e@dummy H314e@dummy) (set! H3150@rp (H2a02@H28dd@make-record-printer 'interaction-env (lambda (H4897@x H4898@p H4899@wr) (display '"#<environment>" H4898@p)))) (set! H4bd4@H3150@rp H3150@rp) (set! H315a@interaction-env? (lambda (H489d@x) (and (simple-struct? H489d@x) (eq? (simple-struct-name H489d@x) 'interaction-env)))) (set! H4bd5@H315a@interaction-env? H315a@interaction-env?) (set! H315c@interaction-env-rib (lambda (H489f@x) (simple-struct-ref H489f@x '0))) (set! H4bd6@H315c@interaction-env-rib H315c@interaction-env-rib) (set! H315e@set-interaction-env-rib! (lambda (H48a1@x H48a2@val) (simple-struct-set! H48a1@x '0 H48a2@val))) (set! H4bd7@H315e@set-interaction-env-rib! H315e@set-interaction-env-rib!) (set! H3160@interaction-env-r (lambda (H48a5@x) (simple-struct-ref H48a5@x '1))) (set! H4bd8@H3160@interaction-env-r H3160@interaction-env-r) (set! H3162@set-interaction-env-r! (lambda (H48a7@x H48a8@val) (simple-struct-set! H48a7@x '1 H48a8@val))) (set! H4bd9@H3162@set-interaction-env-r! H3162@set-interaction-env-r!) (set! H3164@interaction-env-locs (lambda (H48ab@x) (simple-struct-ref H48ab@x '2))) (set! H4bda@H3164@interaction-env-locs H3164@interaction-env-locs) (set! H3166@set-interaction-env-locs! (lambda (H48ad@x H48ae@val) (simple-struct-set! H48ad@x '2 H48ae@val))) (set! H4bdb@H3166@set-interaction-env-locs! H3166@set-interaction-env-locs!) (set! H3168@dummy '3) (set! H4bdc@H3168@dummy H3168@dummy) (set! H316a@interaction-environment-symbols (lambda () (H3172@environment-symbols (H31aa@interaction-environment)))) (set! H4bdd@H316a@interaction-environment-symbols H316a@interaction-environment-symbols) (set! H316c@environment-bindings (lambda (H48b1@e) (vector->list (vector-map (lambda (H48b3@name H48b4@label) (H316e@parse-binding (cons H48b3@name (H2cd0@H2b1d@imported-label->binding H48b4@label)))) (H3142@env-names H48b1@e) (H3146@env-labels H48b1@e))))) (set! H4bde@H316c@environment-bindings H316c@environment-bindings) (set! H316e@parse-binding (lambda (H48b7@b) (cons (car H48b7@b) (let ((H48b9@t (cadr H48b7@b))) (if (memv H48b9@t '(core-prim global)) 'procedure (if (memv H48b9@t '(core-macro macro global-macro)) 'syntax (if (memv H48b9@t '($core-rtd)) 'record (if (eq? (car H48b7@b) (cadr H48b7@b)) 'syntax 'unknown)))))))) (set! H4bdf@H316e@parse-binding H316e@parse-binding) (set! H3170@environment? (lambda (H48bb@x) (or (H3140@env? H48bb@x) (H315a@interaction-env? H48bb@x)))) (set! H4be0@H3170@environment? H3170@environment?) (set! H3172@environment-symbols (lambda (H48bd@x) (if (H3140@env? H48bd@x) (vector->list (H3142@env-names H48bd@x)) (if (H315a@interaction-env? H48bd@x) (map values (H2e53@rib-sym* (H315c@interaction-env-rib H48bd@x))) (assertion-violation 'environment-symbols '"not an environment" H48bd@x))))) (set! H4be1@H3172@environment-symbols H3172@environment-symbols) (set! H3174@environment (lambda H48bf@imp* (let ((H48c1@itc (H3122@make-collector))) (let ((H48c7@H48c4 H3128@imp-collector) (H48c8@H48c6 H48c1@itc)) (let ((H48cb@swap (lambda () (let ((H48cd@t (H48c7@H48c4))) (begin (H48c7@H48c4 H48c8@H48c6) (set! H48c8@H48c6 H48cd@t)))))) (dynamic-wind H48cb@swap (lambda () (call-with-values (lambda () (H311e@parse-import-spec* H48bf@imp*)) (lambda (H48d3@H48d0 H48d4@H48d2) (let ((H48d7@subst-labels H48d4@H48d2) (H48d8@subst-names H48d3@H48d0)) (make-simple-struct 'env '4 (list H48d8@subst-names H48d7@subst-labels H48c1@itc)))))) H48cb@swap)))))) (set! H4be2@H3174@environment H3174@environment) (set! H3176@null-environment (lambda (H48db@n) (begin (if (not (eqv? H48db@n '5)) (assertion-violation 'null-environment '"not 5" H48db@n) (void)) (H3174@environment '(psyntax null-environment-5))))) (set! H4be3@H3176@null-environment H3176@null-environment) (set! H3178@scheme-report-environment (lambda (H48dd@n) (begin (if (not (eqv? H48dd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" H48dd@n) (void)) (H3174@environment '(psyntax scheme-report-environment-5))))) (set! H4be4@H3178@scheme-report-environment H3178@scheme-report-environment) (set! H317a@expand (lambda (H48df@x H48e0@env) (if (H3140@env? H48e0@env) (let ((H48e3@rib (H3120@make-top-rib (H3142@env-names H48e0@env) (H3146@env-labels H48e0@env)))) (let ((H48e5@x (make-simple-struct 'stx '5 (list H48df@x H2e39@top-mark* (list H48e3@rib) '()))) (H48e6@itc (H314a@env-itc H48e0@env)) (H48e7@rtc (H3122@make-collector)) (H48e8@vtc (H3122@make-collector))) (let ((H48ed@x (let ((H48ff@H48f0 H31ac@top-level-context) (H4900@H48f2 H3124@inv-collector) (H4901@H48f4 H3126@vis-collector) (H4902@H48f6 H3128@imp-collector) (H4903@H48f8 '#f) (H4904@H48fa H48e7@rtc) (H4905@H48fc H48e8@vtc) (H4906@H48fe H48e6@itc)) (let ((H490f@swap (lambda () (begin (let ((H4911@t (H48ff@H48f0))) (begin (H48ff@H48f0 H4903@H48f8) (set! H4903@H48f8 H4911@t))) (let ((H4913@t (H4900@H48f2))) (begin (H4900@H48f2 H4904@H48fa) (set! H4904@H48fa H4913@t))) (let ((H4915@t (H4901@H48f4))) (begin (H4901@H48f4 H4905@H48fc) (set! H4905@H48fc H4915@t))) (let ((H4917@t (H4902@H48f6))) (begin (H4902@H48f6 H4906@H48fe) (set! H4906@H48fe H4917@t))))))) (dynamic-wind H490f@swap (lambda () (H30de@chi-expr H48e5@x '() '())) H490f@swap))))) (begin (H2e71@seal-rib! H48e3@rib) (values H48ed@x (H48e7@rtc)))))) (if (H315a@interaction-env? H48e0@env) (let ((H4919@rib (H315c@interaction-env-rib H48e0@env)) (H491a@r (H3160@interaction-env-r H48e0@env)) (H491b@rtc (H3122@make-collector))) (let ((H491f@x (make-simple-struct 'stx '5 (list H48df@x H2e39@top-mark* (list H4919@rib) '())))) (call-with-values (lambda () (let ((H4935@H4926 H31ac@top-level-context) (H4936@H4928 H3124@inv-collector) (H4937@H492a H3126@vis-collector) (H4938@H492c H3128@imp-collector) (H4939@H492e H48e0@env) (H493a@H4930 H491b@rtc) (H493b@H4932 (H3122@make-collector)) (H493c@H4934 (H3122@make-collector))) (let ((H4945@swap (lambda () (begin (let ((H4947@t (H4935@H4926))) (begin (H4935@H4926 H4939@H492e) (set! H4939@H492e H4947@t))) (let ((H4949@t (H4936@H4928))) (begin (H4936@H4928 H493a@H4930) (set! H493a@H4930 H4949@t))) (let ((H494b@t (H4937@H492a))) (begin (H4937@H492a H493b@H4932) (set! H493b@H4932 H494b@t))) (let ((H494d@t (H4938@H492c))) (begin (H4938@H492c H493c@H4934) (set! H493c@H4934 H494d@t))))))) (dynamic-wind H4945@swap (lambda () (H312c@chi-interaction-expr H491f@x H4919@rib H491a@r)) H4945@swap)))) (lambda (H494f@H4922 H4950@H4924) (let ((H4953@r^ H4950@H4924) (H4954@e H494f@H4922)) (begin (H3162@set-interaction-env-r! H48e0@env H4953@r^) (values H4954@e (H491b@rtc)))))))) (assertion-violation 'expand '"not an environment" H48e0@env))))) (set! H4be5@H317a@expand H317a@expand) (set! H317c@eval (lambda (H4957@x H4958@env) (begin (if (not (H3170@environment? H4958@env)) (error 'eval '"not an environment" H4958@env) (void)) (call-with-values (lambda () (H317a@expand H4957@x H4958@env)) (lambda (H495f@H495c H4960@H495e) (let ((H4963@invoke-req* H4960@H495e) (H4964@x H495f@H495c)) (begin (for-each H2cd1@H2b1f@invoke-library H4963@invoke-req*) (eval-core (H2a5b@H2a13@expanded->core H4964@x))))))))) (set! H4be6@H317c@eval H317c@eval) (set! H317e@library-expander (lambda H49d5 (let ((H49d6 (length H49d5))) (if (= H49d6 '3) (apply (lambda (H4967@x H4968@filename H4969@verify-name) (letrec* ((H496e@build-visit-code (lambda (H49c3@macro*) (if (null? H49c3@macro*) (H2e1b@H2d7c@build-void) (H2e1a@H2d7a@build-sequence '#f (map (lambda (H49c5@x) (let ((H49c7@loc (car H49c5@x)) (H49c8@src (cddr H49c5@x))) (list 'set! H49c7@loc H49c8@src))) H49c3@macro*))))) (H4970@visit! (lambda (H49bb@macro*) (for-each (lambda (H49bd@x) (let ((H49bf@loc (car H49bd@x)) (H49c0@proc (cadr H49bd@x))) (set-symbol-value! H49bf@loc H49c0@proc))) H49bb@macro*)))) (call-with-values (lambda () (H3130@core-library-expander H4967@x H4969@verify-name)) (lambda (H4983@H4972 H4984@H4974 H4985@H4976 H4986@H4978 H4987@H497a H4988@H497c H4989@H497e H498a@H4980 H498b@H4982) (let ((H4995@export-env H498b@H4982) (H4996@export-subst H498a@H4980) (H4997@macro* H4989@H497e) (H4998@invoke-code H4988@H497c) (H4999@vis* H4987@H497a) (H499a@inv* H4986@H4978) (H499b@imp* H4985@H4976) (H499c@ver H4984@H4974) (H499d@name H4983@H4972)) (let ((H49a7@id (gensym)) (H49a8@name H499d@name) (H49a9@ver H499c@ver) (H49aa@imp* (map H2cd5@H2b27@library-spec H499b@imp*)) (H49ab@vis* (map H2cd5@H2b27@library-spec H4999@vis*)) (H49ac@inv* (map H2cd5@H2b27@library-spec H499a@inv*)) (H49ad@visit-proc (lambda () (H4970@visit! H4997@macro*))) (H49ae@invoke-proc (lambda () (eval-core (H2a5b@H2a13@expanded->core H4998@invoke-code)))) (H49af@visit-code (H496e@build-visit-code H4997@macro*)) (H49b0@invoke-code H4998@invoke-code)) (begin (H2ccf@H2b1b@install-library H49a7@id H49a8@name H49a9@ver H49aa@imp* H49ab@vis* H49ac@inv* H4996@export-subst H4995@export-env H49ad@visit-proc H49ae@invoke-proc H49af@visit-code H49b0@invoke-code '#t H4968@filename) (values H49a7@id H49a8@name H49a9@ver H49aa@imp* H49ab@vis* H49ac@inv* H49b0@invoke-code H49af@visit-code H4996@export-subst H4995@export-env)))))))) H49d5) (if (= H49d6 '2) (apply (lambda (H49cb@x H49cc@filename) (H317e@library-expander H49cb@x H49cc@filename (lambda (H49cf@x) (values)))) H49d5) (if (= H49d6 '1) (apply (lambda (H49d1@x) (H317e@library-expander H49d1@x '#f (lambda (H49d3@x) (values)))) H49d5) (error 'apply '"invalid arg count"))))))) (set! H4be7@H317e@library-expander H317e@library-expander) (set! H3180@boot-library-expand (lambda (H49d7@x) (call-with-values (lambda () (H317e@library-expander H49d7@x)) (lambda (H49ed@H49da H49ee@H49dc H49ef@H49de H49f0@H49e0 H49f1@H49e2 H49f2@H49e4 H49f3@H49e6 H49f4@H49e8 H49f5@H49ea H49f6@H49ec) (let ((H4a01@export-env H49f6@H49ec) (H4a02@export-subst H49f5@H49ea) (H4a03@visit-code H49f4@H49e8) (H4a04@invoke-code H49f3@H49e6) (H4a05@inv* H49f2@H49e4) (H4a06@vis* H49f1@H49e2) (H4a07@imp* H49f0@H49e0) (H4a08@ver H49ef@H49de) (H4a09@name H49ee@H49dc) (H4a0a@id H49ed@H49da)) (values H4a09@name H4a04@invoke-code H4a02@export-subst H4a01@export-env)))))) (set! H4be8@H3180@boot-library-expand H3180@boot-library-expand) (set! H3182@rev-map-append (lambda (H4a15@f H4a16@ls H4a17@ac) (if (null? H4a16@ls) H4a17@ac (H3182@rev-map-append H4a15@f (cdr H4a16@ls) (cons (H4a15@f (car H4a16@ls)) H4a17@ac))))) (set! H4be9@H3182@rev-map-append H3182@rev-map-append) (set! H3184@build-exports (lambda (H4a1b@lex*+loc* H4a1c@init*) (H2e1a@H2d7a@build-sequence '#f (cons (H2e1b@H2d7c@build-void) (H3182@rev-map-append (lambda (H4a1f@x) (list 'set! (cdr H4a1f@x) (car H4a1f@x))) H4a1b@lex*+loc* H4a1c@init*))))) (set! H4bea@H3184@build-exports H3184@build-exports) (set! H3186@make-export-subst (lambda (H4a21@name* H4a22@id*) (map (lambda (H4a25@name H4a26@id) (let ((H4a29@label (H2ecb@id->label H4a26@id))) (begin (if (not H4a29@label) (H319c@syntax-violation '#f '"cannot export unbound identifier" H4a26@id) (void)) (cons H4a25@name H4a29@label)))) H4a21@name* H4a22@id*))) (set! H4beb@H3186@make-export-subst H3186@make-export-subst) (set! H3188@make-export-env/macros (lambda (H4a2b@lex* H4a2c@loc* H4a2d@r) (letrec* ((H4a32@lookup (lambda (H4a4f@x) (let H4a57@f ((H4a51@x H4a4f@x) (H4a52@lex* H4a2b@lex*) (H4a53@loc* H4a2c@loc*)) (if (pair? H4a52@lex*) (if (eq? H4a51@x (car H4a52@lex*)) (car H4a53@loc*) (H4a57@f H4a51@x (cdr H4a52@lex*) (cdr H4a53@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let H4a3b@f ((H4a33@r H4a2d@r) (H4a34@env '()) (H4a35@global* '()) (H4a36@macro* '())) (if (null? H4a33@r) (values H4a34@env H4a35@global* H4a36@macro*) (let ((H4a3d@x (car H4a33@r))) (let ((H4a3f@label (car H4a3d@x)) (H4a40@b (cdr H4a3d@x))) (let ((H4a43@t (H2ed1@binding-type H4a40@b))) (if (memv H4a43@t '(lexical)) (let ((H4a45@v (H2ed3@binding-value H4a40@b))) (let ((H4a47@loc (H4a32@lookup (H3046@lexical-var H4a45@v))) (H4a48@type (if (H3048@lexical-mutable? H4a45@v) 'mutable 'global))) (H4a3b@f (cdr H4a33@r) (cons (cons* H4a3f@label H4a48@type H4a47@loc) H4a34@env) (cons (cons (H3046@lexical-var H4a45@v) H4a47@loc) H4a35@global*) H4a36@macro*))) (if (memv H4a43@t '(local-macro)) (let ((H4a4b@loc (gensym))) (H4a3b@f (cdr H4a33@r) (cons (cons* H4a3f@label 'global-macro H4a4b@loc) H4a34@env) H4a35@global* (cons (cons H4a4b@loc (H2ed3@binding-value H4a40@b)) H4a36@macro*))) (if (memv H4a43@t '(local-macro!)) (let ((H4a4d@loc (gensym))) (H4a3b@f (cdr H4a33@r) (cons (cons* H4a3f@label 'global-macro! H4a4d@loc) H4a34@env) H4a35@global* (cons (cons H4a4d@loc (H2ed3@binding-value H4a40@b)) H4a36@macro*))) (if (memv H4a43@t '($rtd $module)) (H4a3b@f (cdr H4a33@r) (cons H4a3d@x H4a34@env) H4a35@global* H4a36@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (H2ed1@binding-type H4a40@b) (H2ed3@binding-value H4a40@b)))))))))))))) (set! H4bec@H3188@make-export-env/macros H3188@make-export-env/macros) (set! H318a@generate-temporaries (lambda (H4a59@ls) (let ((H4a5b@t H4a59@ls)) (let ((H4a5d@ls/false (H30bc@syntax-dispatch H4a5b@t 'each-any))) (if H4a5d@ls/false (apply (lambda (H4a5f@ls) (map (lambda (H4a61@x) (make-simple-struct 'stx '5 (list (let ((H4a63@x (H31a2@syntax->datum H4a61@x))) (if (or (symbol? H4a63@x) (string? H4a63@x)) (gensym H4a63@x) (gensym 't))) H2e39@top-mark* '() '()))) H4a5f@ls)) H4a5d@ls/false) (let ((H4a65@t H4a5b@t)) (let ((H4a67@ls/false (H30bc@syntax-dispatch H4a65@t '_))) (if H4a67@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) H4a67@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4a65@t))))))))) (set! H4bed@H318a@generate-temporaries H318a@generate-temporaries) (set! H318c@free-identifier=? (lambda (H4a69@x H4a6a@y) (if (H2eb5@id? H4a69@x) (if (H2eb5@id? H4a6a@y) (H2ebb@free-id=? H4a69@x H4a6a@y) (assertion-violation 'free-identifier=? '"not an identifier" H4a6a@y)) (assertion-violation 'free-identifier=? '"not an identifier" H4a69@x)))) (set! H4bee@H318c@free-identifier=? H318c@free-identifier=?) (set! H318e@bound-identifier=? (lambda (H4a6d@x H4a6e@y) (if (H2eb5@id? H4a6d@x) (if (H2eb5@id? H4a6e@y) (H2eb9@bound-id=? H4a6d@x H4a6e@y) (assertion-violation 'bound-identifier=? '"not an identifier" H4a6e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" H4a6d@x)))) (set! H4bef@H318e@bound-identifier=? H318e@bound-identifier=?) (set! H3190@make-source-condition (lambda (H4a71@x) (letrec* ((H4a7b@H4a76 (make-record-type-descriptor '&source-information &condition-rtd 'H4a79 '#f '#f '#((immutable file-name) (immutable line)))) (H4a7d@H4a78 '#f) (H4a7f@H4a77 (make-record-constructor-descriptor H4a7b@H4a76 &condition-rcd H4a7d@H4a78)) (H4a82@H4a75 (record-predicate H4a7b@H4a76)) (H4a84@make-source-condition (record-constructor H4a7f@H4a77)) (H4a86@H4a73 (record-accessor H4a7b@H4a76 '0)) (H4a88@H4a74 (record-accessor H4a7b@H4a76 '1)) (H4a8a@source-condition? (condition-predicate H4a7b@H4a76)) (H4a8c@source-filename (condition-accessor H4a7b@H4a76 H4a86@H4a73)) (H4a8e@source-character (condition-accessor H4a7b@H4a76 H4a88@H4a74))) (if (and (pair? H4a71@x) (pair? (cdr H4a71@x))) (H4a84@make-source-condition (car H4a71@x) (cadr H4a71@x)) (condition))))) (set! H4bf0@H3190@make-source-condition H3190@make-source-condition) (set! H3192@extract-position-condition (lambda (H4a8f@x) (H3190@make-source-condition (H3194@expression-position H4a8f@x)))) (set! H4bf1@H3192@extract-position-condition H3192@extract-position-condition) (set! H3194@expression-position (lambda (H4a91@x) (and (H2e81@stx? H4a91@x) (let ((H4a93@x (H2e83@stx-expr H4a91@x))) (and (H29f9@H28cb@annotation? H4a93@x) (H29fa@H28cd@annotation-source H4a93@x)))))) (set! H4bf2@H3194@expression-position H3194@expression-position) (set! H3196@assertion-error (lambda (H4a95@expr H4a96@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list H4a95@expr)) (H3190@make-source-condition H4a96@pos))))) (set! H4bf3@H3196@assertion-error H3196@assertion-error) (set! H3198@syntax-error (lambda (H4a99@x . H4a9b@args) (begin (if (not (for-all string? H4a9b@args)) (assertion-violation 'syntax-error '"invalid argument" H4a9b@args) (void)) (raise (condition (make-message-condition (if (null? H4a9b@args) '"invalid syntax" (apply string-append H4a9b@args))) (make-syntax-violation (H31a2@syntax->datum H4a99@x) '#f) (H3192@extract-position-condition H4a99@x)))))) (set! H4bf4@H3198@syntax-error H3198@syntax-error) (set! H319a@syntax-violation* (lambda (H4a9d@who H4a9e@msg H4a9f@form H4aa0@condition-object) (begin (if (not (string? H4a9e@msg)) (assertion-violation 'syntax-violation '"message is not a string" H4a9e@msg) (void)) (let ((H4aa5@who (if (or (string? H4a9d@who) (symbol? H4a9d@who)) H4a9d@who (if (not H4a9d@who) (let ((H4aa7@t H4a9f@form)) (let ((H4aa9@ls/false (H30bc@syntax-dispatch H4aa7@t 'any))) (if (and H4aa9@ls/false (apply (lambda (H4aab@id) (H2eb5@id? H4aab@id)) H4aa9@ls/false)) (apply (lambda (H4aad@id) (H31a2@syntax->datum H4aad@id)) H4aa9@ls/false) (let ((H4aaf@t H4aa7@t)) (let ((H4ab1@ls/false (H30bc@syntax-dispatch H4aaf@t '(any . any)))) (if (and H4ab1@ls/false (apply (lambda (H4ab3@id H4ab4@rest) (H2eb5@id? H4ab3@id)) H4ab1@ls/false)) (apply (lambda (H4ab7@id H4ab8@rest) (H31a2@syntax->datum H4ab7@id)) H4ab1@ls/false) (let ((H4abb@t H4aaf@t)) (let ((H4abd@ls/false (H30bc@syntax-dispatch H4abb@t '_))) (if H4abd@ls/false (apply (lambda () '#f) H4abd@ls/false) (H319c@syntax-violation '#f '"invalid syntax" H4abb@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" H4a9d@who))))) (raise (condition (if H4aa5@who (make-who-condition H4aa5@who) (condition)) (make-message-condition H4a9e@msg) H4aa0@condition-object (H3192@extract-position-condition H4a9f@form))))))) (set! H4bf5@H319a@syntax-violation* H319a@syntax-violation*) (set! H319c@syntax-violation (lambda H4acd (let ((H4ace (length H4acd))) (if (= H4ace '3) (apply (lambda (H4abf@who H4ac0@msg H4ac1@form) (H319c@syntax-violation H4abf@who H4ac0@msg H4ac1@form '#f)) H4acd) (if (= H4ace '4) (apply (lambda (H4ac5@who H4ac6@msg H4ac7@form H4ac8@subform) (H319a@syntax-violation* H4ac5@who H4ac6@msg H4ac7@form (make-syntax-violation (H31a2@syntax->datum H4ac7@form) (H31a2@syntax->datum H4ac8@subform)))) H4acd) (error 'apply '"invalid arg count")))))) (set! H4bf6@H319c@syntax-violation H319c@syntax-violation) (set! H319e@identifier? (lambda (H4acf@x) (H2eb5@id? H4acf@x))) (set! H4bf7@H319e@identifier? H319e@identifier?) (set! H31a0@datum->syntax (lambda (H4ad1@id H4ad2@datum) (if (H2eb5@id? H4ad1@id) (H2e95@datum->stx H4ad1@id H4ad2@datum) (assertion-violation 'datum->syntax '"not an identifier" H4ad1@id)))) (set! H4bf8@H31a0@datum->syntax H31a0@datum->syntax) (set! H31a2@syntax->datum (lambda (H4ad5@x) (H2ec9@stx->datum H4ad5@x))) (set! H4bf9@H31a2@syntax->datum H31a2@syntax->datum) (set! H31a4@ungensym-all (lambda (H4ad7@code) (if (pair? H4ad7@code) (cons (H31a4@ungensym-all (car H4ad7@code)) (H31a4@ungensym-all (cdr H4ad7@code))) (if (symbol? H4ad7@code) (ungensym H4ad7@code) H4ad7@code)))) (set! H4bfa@H31a4@ungensym-all H31a4@ungensym-all) (set! H31a6@compile-r6rs-top-level (lambda (H4ad9@x*) (call-with-values (lambda () (H3134@top-level-expander H4ad9@x*)) (lambda (H4adf@H4adc H4ae0@H4ade) (let ((H4ae3@invoke-code H4ae0@H4ade) (H4ae4@lib* H4adf@H4adc)) (lambda () (begin (for-each H2cd1@H2b1f@invoke-library H4ae4@lib*) (let ((H4ae7@expanded (H2a5b@H2a13@expanded->core H4ae3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (H31a4@ungensym-all H4ae7@expanded)) (void)) (eval-core H4ae7@expanded)))))))))) (set! H4bfb@H31a6@compile-r6rs-top-level H31a6@compile-r6rs-top-level) (set! H31a8@pre-compile-r6rs-top-level (lambda (H4ae9@x*) (call-with-values (lambda () (H3134@top-level-expander H4ae9@x*)) (lambda (H4aef@H4aec H4af0@H4aee) (let ((H4af3@invoke-code H4af0@H4aee) (H4af4@lib* H4aef@H4aec)) (begin (for-each H2cd1@H2b1f@invoke-library H4af4@lib*) (H2a03@H28df@compile-core (H2a5b@H2a13@expanded->core H4af3@invoke-code)))))))) (set! H4bfc@H31a8@pre-compile-r6rs-top-level H31a8@pre-compile-r6rs-top-level) (set! H31aa@interaction-environment (let ((H4af7@the-env '#f)) (lambda () (or H4af7@the-env (let ((H4af9@lib (H2cca@H2b11@find-library-by-name '(mosh interaction))) (H4afa@rib (H2e69@make-empty-rib))) (begin (let ((H4afd@subst (H2cac@H2ad5@library-subst H4af9@lib))) (begin (H2e55@set-rib-sym*! H4afa@rib (map car H4afd@subst)) (H2e59@set-rib-mark**! H4afa@rib (map (lambda (H4aff@x) H2e39@top-mark*) H4afd@subst)) (H2e5d@set-rib-label*! H4afa@rib (map cdr H4afd@subst)))) (let ((H4b01@env (make-simple-struct 'interaction-env '4 (list H4afa@rib '() '())))) (begin (set! H4af7@the-env H4b01@env) H4b01@env)))))))) (set! H4bfd@H31aa@interaction-environment H31aa@interaction-environment) (set! H31ac@top-level-context (H2a05@H28e3@make-parameter '#f)) (set! H4bfe@H31ac@top-level-context H31ac@top-level-context) (H2cc7@H2b0b@current-library-expander H317e@library-expander))
(begin (begin (H2a58@H2a0d@current-primitive-locations (lambda (H5149@x) (let ((H514b@t (assq H5149@x '((syntax-error . H4bf4@H3198@syntax-error) (syntax-dispatch . H4b92@H30bc@syntax-dispatch) (load . H4d7a@H4c25@load) (interaction-environment . H4bfd@H31aa@interaction-environment) (library-path . H2cbf@H2afb@library-path) (mosh-cache-dir . H2a06@H28e5@mosh-cache-dir) (make-parameter . H2a05@H28e3@make-parameter) (make-variable-transformer . H4b4f@H2ee7@make-variable-transformer) (identifier? . H4bf7@H319e@identifier?) (generate-temporaries . H4bed@H318a@generate-temporaries) (free-identifier=? . H4bee@H318c@free-identifier=?) (syntax->datum . H4bf9@H31a2@syntax->datum) (datum->syntax . H4bf8@H31a0@datum->syntax) (bound-identifier=? . H4bef@H318e@bound-identifier=?) (scheme-report-environment . H4be4@H3178@scheme-report-environment) (null-environment . H4be3@H3176@null-environment) (command-line . H4d77@H4c1f@command-line) (eval . H4be6@H317c@eval) (environment . H4be2@H3174@environment) (syntax-violation . H4bf6@H319c@syntax-violation) (assertion-error . H4bf3@H3196@assertion-error))))) (if H514b@t (cdr H514b@t) '#f)))) (H2ccf@H2b1b@install-library 'H5126 '(mosh interaction) '() '() '() '() '((regexp? . H50e6) (alist->eq-hash-table . H50e2) (format . H50df) (string-split . H50d4) (call-process . H50ce) (set-current-directory! . H50ca) (expand-path . H50c9) (current-directory . H50c8) (%spawn . H50c7) (%waitpid . H50c6) (simple-struct-name . H50c5) (simple-struct-set! . H50c4) (simple-struct-ref . H50c3) (make-simple-struct . H50c2) (simple-struct? . H50c1) (pointer-ref-c-int64 . H50c0) (pointer-ref-c-int32 . H50bf) (pointer-ref-c-int16 . H50be) (pointer-ref-c-int8 . H50bd) (pointer-ref-c-uint64 . H50bc) (pointer-ref-c-uint32 . H50bb) (pointer-ref-c-uint16 . H50ba) (pointer-ref-c-uint8 . H50b9) (pointer-set-c-uint64! . H50b8) (pointer-set-c-uint32! . H50b7) (pointer-set-c-uint16! . H50b6) (pointer-set-c-uint8! . H50b5) (pointer-set-c-int64! . H50b4) (pointer-set-c-int32! . H50b3) (pointer-set-c-int16! . H50b2) (pointer-set-c-int8! . H50b1) (pointer-set-c-pointer! . H50b0) (pointer-set-c-double! . H50af) (pointer-set-c-float! . H50ae) (pointer-set-c-long-long! . H50ad) (pointer-set-c-long! . H50ac) (pointer-set-c-int! . H50ab) (pointer-set-c-short! . H50aa) (pointer-set-c-char! . H50a9) (pointer-ref-c-pointer . H50a8) (pointer-ref-c-double . H50a7) (pointer-ref-c-float . H50a6) (pointer-ref-c-unsigned-long-long . H50a5) (pointer-ref-c-signed-long-long . H50a4) (pointer-ref-c-unsigned-long . H50a3) (pointer-ref-c-signed-long . H50a2) (pointer-ref-c-unsigned-int . H50a1) (pointer-ref-c-signed-int . H50a0) (pointer-ref-c-unsigned-short . H509f) (pointer-ref-c-signed-short . H509e) (pointer-ref-c-unsigned-char . H509d) (pointer-ref-c-signed-char . H509c) (pointer->integer . H509b) (integer->pointer . H509a) (pointer? . H5099) (shared-errno . H5098) (%ffi-supported? . H5093) (%ffi-pointer->string . H5092) (%ffi-call . H5091) (%ffi-lookup . H5090) (%ffi-open . H508f) (null-terminated-utf8->string . H508e) (null-terminated-bytevector->string . H508d) (%exec . H508c) (%fork . H508b) (%pipe . H508a) (p . H5089) (whereis . H506d) (register . H506c) (vm-join! . H506b) (vm-set-value! . H506a) (vm? . H5069) (main-vm? . H5068) (vm-eval . H5067) (vm-self . H5066) (vm-start! . H5065) (make-vm . H5064) (mutex-try-lock! . H5063) (mutex-unlock! . H5062) (mutex-lock! . H5061) (mutex? . H5060) (make-mutex . H505f) (condition-variable-notify-all! . H505e) (condition-variable-notify! . H505d) (condition-variable-wait! . H505c) (make-condition-variable . H505b) (write/ss . H505a) (string-upcase . H5042) (string-titlecase . H5041) (string-normalize-nfkd . H5040) (string-normalize-nfkc . H503f) (string-normalize-nfd . H503e) (string-normalize-nfc . H503d) (string-foldcase . H503c) (string-downcase . H503b) (string-ci>? . H503a) (string-ci>=? . H5039) (string-ci=? . H5038) (string-ci<? . H5037) (string-ci<=? . H5036) (char-whitespace? . H5035) (char-upper-case? . H5034) (char-title-case? . H5033) (char-numeric? . H5032) (char-lower-case? . H5031) (char-general-category . H5030) (char-upcase . H502f) (char-titlecase . H502e) (char-foldcase . H502d) (char-downcase . H502c) (char-ci>? . H502b) (char-ci>=? . H502a) (char-ci=? . H5029) (char-ci<? . H5028) (char-ci<=? . H5027) (char-alphabetic? . H5026) (make-variable-transformer . H2ee6) (identifier? . H319d) (generate-temporaries . H3189) (free-identifier=? . H318b) (syntax->datum . H31a1) (datum->syntax . H319f) (bound-identifier=? . H318d) (record-type-descriptor? . H5025) (record-predicate . H5024) (record-mutator . H5023) (record-constructor . H5022) (record-accessor . H5021) (make-record-type-descriptor . H5020) (make-record-constructor-descriptor . H501f) (record? . H501e) (record-type-uid . H501d) (record-type-sealed? . H501c) (record-type-parent . H501b) (record-type-opaque? . H501a) (record-type-name . H5019) (record-type-generative? . H5018) (record-type-field-names . H5017) (record-rtd . H5016) (record-field-mutable? . H5015) (delete-file . H5014) (file-exists? . H5013) (vector-sort! . H5012) (vector-sort . H5011) (list-sort . H5010) (symbol-hash . H500f) (string-ci-hash . H500e) (string-hash . H500d) (equal-hash . H500c) (hashtable-equivalence-function . H500b) (make-hashtable . H500a) (hashtable-hash-function . H5009) (make-eqv-hashtable . H5008) (make-eq-hashtable . H5007) (hashtable? . H5006) (hashtable-update! . H5005) (hashtable-size . H5004) (hashtable-set! . H5003) (hashtable-ref . H5002) (hashtable-mutable? . H5001) (hashtable-keys . H5000) (hashtable-entries . H4fff) (hashtable-delete! . H4ffe) (hashtable-copy . H4ffd) (hashtable-contains? . H4ffc) (hashtable-clear! . H4ffb) (call-with-output-file . H4ffa) (call-with-input-file . H4ff9) (write-char . H4ff8) (write . H4ff7) (with-output-to-file . H4ff6) (with-input-from-file . H4ff5) (read-char . H4ff4) (read . H4ff3) (peek-char . H4ff2) (open-output-file . H4ff1) (open-input-file . H4ff0) (newline . H4fef) (display . H4fee) (close-output-port . H4fed) (close-input-port . H4fec) (eof-object? . H4feb) (eof-object . H4fea) (current-error-port . H4fe9) (current-output-port . H4fe8) (current-input-port . H4fe7) (output-port? . H4fe6) (input-port? . H4fe5) (utf-8-codec . H4fe4) (utf-16-codec . H4fe3) (transcoder-error-handling-mode . H4fe2) (transcoder-eol-style . H4fe1) (transcoder-codec . H4fe0) (transcoded-port . H4fdf) (textual-port? . H4fde) (string->bytevector . H4fdd) (standard-output-port . H4fdc) (standard-input-port . H4fdb) (standard-error-port . H4fda) (set-port-position! . H4fd9) (put-u8 . H4fd8) (put-string . H4fd7) (put-datum . H4fd6) (put-char . H4fd5) (put-bytevector . H4fd4) (port? . H4fd3) (port-transcoder . H4fd2) (port-position . H4fd1) (port-has-set-port-position!? . H4fd0) (port-has-port-position? . H4fcf) (port-eof? . H4fce) (output-port-buffer-mode . H4fcd) (open-string-output-port . H4fcc) (open-string-input-port . H4fcb) (open-file-output-port . H4fca) (open-file-input/output-port . H4fc9) (open-file-input-port . H4fc8) (open-bytevector-output-port . H4fc7) (open-bytevector-input-port . H4fc6) (native-transcoder . H4fc5) (native-eol-style . H4fc4) (make-transcoder . H4fc3) (latin-1-codec . H4fc2) (make-i/o-write-error . H4fc1) (make-i/o-read-error . H4fc0) (make-i/o-port-error . H4fbf) (make-i/o-invalid-position-error . H4fbe) (make-i/o-filename-error . H4fbd) (make-i/o-file-protection-error . H4fbc) (make-i/o-file-is-read-only-error . H4fbb) (make-i/o-file-does-not-exist-error . H4fba) (make-i/o-file-already-exists-error . H4fb9) (make-i/o-error . H4fb8) (make-i/o-encoding-error . H4fb7) (make-i/o-decoding-error . H4fb6) (make-custom-textual-output-port . H4fb5) (make-custom-textual-input/output-port . H4fb4) (make-custom-textual-input-port . H4fb3) (make-custom-binary-output-port . H4fb2) (make-custom-binary-input/output-port . H4fb1) (make-custom-binary-input-port . H4fb0) (make-bytevector . H4faf) (lookahead-u8 . H4fae) (lookahead-char . H4fad) (i/o-write-error? . H4fac) (i/o-read-error? . H4fab) (i/o-port-error? . H4faa) (i/o-invalid-position-error? . H4fa9) (i/o-filename-error? . H4fa8) (i/o-file-protection-error? . H4fa7) (i/o-file-is-read-only-error? . H4fa6) (i/o-file-does-not-exist-error? . H4fa5) (i/o-file-already-exists-error? . H4fa4) (i/o-error? . H4fa3) (i/o-error-position . H4fa2) (i/o-error-port . H4fa1) (i/o-error-filename . H4fa0) (i/o-encoding-error? . H4f9f) (i/o-encoding-error-char . H4f9e) (i/o-decoding-error? . H4f9d) (get-u8 . H4f9c) (get-string-n! . H4f9b) (get-string-n . H4f9a) (get-string-all . H4f99) (get-line . H4f98) (get-datum . H4f97) (get-char . H4f96) (get-bytevector-some . H4f95) (get-bytevector-n! . H4f94) (get-bytevector-n . H4f93) (get-bytevector-all . H4f92) (flush-output-port . H4f91) (close-port . H4f90) (exit . H4f88) (command-line . H4c1e) (string-fill! . H4f87) (string-set! . H4f86) (set-cdr! . H4f85) (set-car! . H4f84) (remove . H4f83) (remv . H4f82) (remp . H4f81) (remq . H4f80) (partition . H4f7f) (memv . H4f7e) (memq . H4f7d) (memp . H4f7c) (member . H4f7b) (exists . H4f7a) (for-all . H4f79) (fold-right . H4f78) (fold-left . H4f77) (find . H4f76) (filter . H4f75) (cons* . H4f74) (assv . H4f73) (assq . H4f72) (assp . H4f71) (assoc . H4f70) (call-with-string-output-port . H4f6f) (call-with-port . H4f6e) (call-with-bytevector-output-port . H4f6d) (bytevector->string . H4f6c) (buffer-mode? . H4f6b) (binary-port? . H4f6a) (with-exception-handler . H4f69) (raise-continuable . H4f68) (raise . H4f67) (eval . H317b) (environment . H3173) (make-enumeration . H4f66) (enum-set=? . H4f65) (enum-set-universe . H4f64) (enum-set-union . H4f63) (enum-set-subset? . H4f62) (enum-set-projection . H4f61) (enum-set-member? . H4f60) (enum-set-intersection . H4f5f) (enum-set-indexer . H4f5e) (enum-set-difference . H4f5d) (enum-set-constructor . H4f5c) (enum-set-complement . H4f5b) (enum-set->list . H4f5a) (who-condition? . H4f59) (warning? . H4f58) (violation? . H4f57) (undefined-violation? . H4f56) (syntax-violation? . H4f55) (syntax-violation-subform . H4f54) (syntax-violation-form . H4f53) (syntax-violation . H319b) (simple-conditions . H4f52) (serious-condition? . H4f51) (non-continuable-violation? . H4f50) (message-condition? . H4f4f) (make-who-condition . H4f4e) (make-warning . H4f4d) (make-violation . H4f4c) (make-undefined-violation . H4f4b) (make-syntax-violation . H4f4a) (make-serious-condition . H4f49) (make-non-continuable-violation . H4f48) (make-message-condition . H4f47) (make-lexical-violation . H4f46) (make-irritants-condition . H4f45) (make-implementation-restriction-violation . H4f44) (make-error . H4f43) (make-assertion-violation . H4f42) (lexical-violation? . H4f41) (irritants-condition? . H4f40) (implementation-restriction-violation? . H4f3f) (error? . H4f3e) (condition-who . H4f3d) (condition-predicate . H4f3c) (condition-message . H4f3b) (condition-irritants . H4f3a) (condition-accessor . H4f39) (condition . H4f38) (assertion-violation? . H4f37) (condition? . H4f36) (utf32->string . H4f35) (utf16->string . H4f34) (utf8->string . H4f33) (uint-list->bytevector . H4f32) (u8-list->bytevector . H4f31) (string->utf8 . H4f30) (string->utf32 . H4f2f) (string->utf16 . H4f2e) (sint-list->bytevector . H4f2d) (native-endianness . H4f2c) (bytevector? . H4f2b) (bytevector=? . H4f2a) (bytevector-uint-set! . H4f29) (bytevector-uint-ref . H4f28) (bytevector-u8-set! . H4f27) (bytevector-u8-ref . H4f26) (bytevector-u64-set! . H4f25) (bytevector-u64-ref . H4f24) (bytevector-u64-native-set! . H4f23) (bytevector-u64-native-ref . H4f22) (bytevector-u32-set! . H4f21) (bytevector-u32-ref . H4f20) (bytevector-u32-native-set! . H4f1f) (bytevector-u32-native-ref . H4f1e) (bytevector-u16-set! . H4f1d) (bytevector-u16-ref . H4f1c) (bytevector-u16-native-set! . H4f1b) (bytevector-u16-native-ref . H4f1a) (bytevector-sint-set! . H4f19) (bytevector-sint-ref . H4f18) (bytevector-s8-set! . H4f17) (bytevector-s8-ref . H4f16) (bytevector-s64-set! . H4f15) (bytevector-s64-ref . H4f14) (bytevector-s64-native-set! . H4f13) (bytevector-s64-native-ref . H4f12) (bytevector-s32-set! . H4f11) (bytevector-s32-ref . H4f10) (bytevector-s32-native-set! . H4f0f) (bytevector-s32-native-ref . H4f0e) (bytevector-s16-set! . H4f0d) (bytevector-s16-ref . H4f0c) (bytevector-s16-native-set! . H4f0b) (bytevector-s16-native-ref . H4f0a) (bytevector-length . H4f09) (bytevector-ieee-single-ref . H4f08) (bytevector-ieee-single-set! . H4f07) (bytevector-ieee-single-native-set! . H4f06) (bytevector-ieee-single-native-ref . H4f05) (bytevector-ieee-double-set! . H4f04) (bytevector-ieee-double-ref . H4f03) (bytevector-ieee-double-native-set! . H4f02) (bytevector-ieee-double-native-ref . H4f01) (bytevector-fill! . H4f00) (bytevector-copy! . H4eff) (bytevector-copy . H4efe) (bytevector->uint-list . H4efd) (bytevector->u8-list . H4efc) (bytevector->sint-list . H4efb) (no-nans-violation? . H4efa) (no-infinities-violation? . H4ef9) (make-no-nans-violation . H4ef8) (make-no-infinities-violation . H4ef7) (real->flonum . H4ef6) (flzero? . H4ef5) (fltruncate . H4ef4) (fltan . H4ef3) (flsqrt . H4ef2) (flsin . H4ef1) (flround . H4ef0) (flpositive? . H4eef) (flonum? . H4eee) (flodd? . H4eed) (flnumerator . H4eec) (flnegative? . H4eeb) (flnan? . H4eea) (flmod0 . H4ee9) (flmod . H4ee8) (flmin . H4ee7) (flmax . H4ee6) (fllog . H4ee5) (flinteger? . H4ee4) (flinfinite? . H4ee3) (flfloor . H4ee2) (flfinite? . H4ee1) (flexpt . H4ee0) (flexp . H4edf) (fleven? . H4ede) (fldiv0-and-mod0 . H4edd) (fldiv0 . H4edc) (fldiv-and-mod . H4edb) (fldiv . H4eda) (fldenominator . H4ed9) (flcos . H4ed8) (flceiling . H4ed7) (flatan . H4ed6) (flasin . H4ed5) (flacos . H4ed4) (flabs . H4ed3) (fl>? . H4ed2) (fl>=? . H4ed1) (fl=? . H4ed0) (fl<? . H4ecf) (fl<=? . H4ece) (fl/ . H4ecd) (fl- . H4ecc) (fl+ . H4ecb) (fl* . H4eca) (fixnum->flonum . H4ec9) (fxzero? . H4ec8) (fxxor . H4ec7) (fxrotate-bit-field . H4ec6) (fxreverse-bit-field . H4ec5) (fxpositive? . H4ec4) (fxodd? . H4ec3) (fxnot . H4ec2) (fxnegative? . H4ec1) (fxmod0 . H4ec0) (fxmod . H4ebf) (fxmin . H4ebe) (fxmax . H4ebd) (fxlength . H4ebc) (fxior . H4ebb) (fxif . H4eba) (fxfirst-bit-set . H4eb9) (fxeven? . H4eb8) (fxdiv0-and-mod0 . H4eb7) (fxdiv0 . H4eb6) (fxdiv-and-mod . H4eb5) (fxdiv . H4eb4) (fxcopy-bit-field . H4eb3) (fxcopy-bit . H4eb2) (fxbit-set? . H4eb1) (fxbit-field . H4eb0) (fxbit-count . H4eaf) (fxarithmetic-shift-right . H4eae) (fxarithmetic-shift-left . H4ead) (fxarithmetic-shift . H4eac) (fxand . H4eab) (fx>? . H4eaa) (fx>=? . H4ea9) (fx=? . H4ea8) (fx<? . H4ea7) (fx<=? . H4ea6) (fx-/carry . H4ea5) (fx- . H4ea4) (fx+/carry . H4ea3) (fx+ . H4ea2) (fx*/carry . H4ea1) (fx* . H4ea0) (greatest-fixnum . H4e9f) (least-fixnum . H4e9e) (fixnum-width . H4e9d) (fixnum? . H4e9c) (bitwise-rotate-bit-field . H4e9b) (bitwise-reverse-bit-field . H4e9a) (bitwise-length . H4e99) (bitwise-if . H4e98) (bitwise-first-bit-set . H4e97) (bitwise-copy-bit-field . H4e96) (bitwise-copy-bit . H4e95) (bitwise-bit-set? . H4e94) (bitwise-bit-field . H4e93) (bitwise-bit-count . H4e92) (bitwise-xor . H4e91) (bitwise-ior . H4e90) (bitwise-and . H4e8f) (bitwise-not . H4e8e) (bitwise-arithmetic-shift-right . H4e8d) (bitwise-arithmetic-shift-left . H4e8c) (bitwise-arithmetic-shift . H4e8b) (zero? . H4e8a) (vector? . H4e89) (vector-set! . H4e88) (vector-ref . H4e87) (vector-map . H4e86) (vector-length . H4e85) (vector-for-each . H4e84) (vector-fill! . H4e83) (vector->list . H4e82) (vector . H4e81) (values . H4e80) (truncate . H4e7f) (tan . H4e7e) (symbol? . H4e7d) (symbol=? . H4e7c) (symbol->string . H4e7b) (substring . H4e7a) (string? . H4e79) (string>? . H4e78) (string>=? . H4e77) (string=? . H4e76) (string<? . H4e75) (string<=? . H4e74) (string-ref . H4e73) (string-length . H4e72) (string-for-each . H4e71) (string-copy . H4e70) (string-append . H4e6f) (string->symbol . H4e6e) (string->number . H4e6d) (string->list . H4e6c) (string . H4e6b) (sqrt . H4e6a) (sin . H4e69) (round . H4e68) (reverse . H4e67) (real? . H4e66) (real-valued? . H4e65) (real-part . H4e64) (rationalize . H4e63) (rational? . H4e62) (rational-valued? . H4e61) (procedure? . H4e60) (positive? . H4e5f) (pair? . H4e5e) (odd? . H4e5d) (numerator . H4e5c) (number? . H4e5b) (number->string . H4e5a) (null? . H4e59) (not . H4e58) (negative? . H4e57) (nan? . H4e56) (min . H4e55) (max . H4e54) (map . H4e53) (make-vector . H4e52) (make-string . H4e51) (make-rectangular . H4e50) (make-polar . H4e4f) (magnitude . H4e4e) (log . H4e4d) (list? . H4e4c) (list-tail . H4e4b) (list-ref . H4e4a) (list->vector . H4e49) (list->string . H4e48) (list . H4e47) (length . H4e46) (lcm . H4e45) (integer? . H4e44) (integer-valued? . H4e43) (integer->char . H4e42) (infinite? . H4e41) (inexact? . H4e40) (inexact . H4e3f) (imag-part . H4e3e) (gcd . H4e3d) (for-each . H4e3c) (floor . H4e3b) (finite? . H4e3a) (expt . H4e39) (exp . H4e38) (exact? . H4e37) (exact-integer-sqrt . H4e36) (exact . H4e35) (even? . H4e34) (error . H4e33) (eqv? . H4e32) (equal? . H4e31) (eq? . H4e30) (dynamic-wind . H4e2f) (div0-and-mod0 . H4e2e) (mod0 . H4e2d) (div0 . H4e2c) (div-and-mod . H4e2b) (mod . H4e2a) (div . H4e29) (denominator . H4e28) (cos . H4e27) (cons . H4e26) (complex? . H4e25) (char? . H4e24) (char>? . H4e23) (char>=? . H4e22) (char=? . H4e21) (char<? . H4e20) (char<=? . H4e1f) (char->integer . H4e1e) (ceiling . H4e1d) (call-with-values . H4e1c) (call/cc . H4e1b) (call-with-current-continuation . H4e1a) (cddddr . H4e19) (cdddar . H4e18) (cddadr . H4e17) (cddaar . H4e16) (cdaddr . H4e15) (cdadar . H4e14) (cdaadr . H4e13) (cdaaar . H4e12) (cadddr . H4e11) (caddar . H4e10) (cadadr . H4e0f) (cadaar . H4e0e) (caaddr . H4e0d) (caadar . H4e0c) (caaadr . H4e0b) (caaaar . H4e0a) (cdddr . H4e09) (cddar . H4e08) (cdadr . H4e07) (cdaar . H4e06) (caddr . H4e05) (cadar . H4e04) (caadr . H4e03) (caaar . H4e02) (cddr . H4e01) (cdar . H4e00) (cadr . H4dff) (caar . H4dfe) (cdr . H4dfd) (car . H4dfc) (boolean? . H4dfb) (boolean=? . H4dfa) (atan . H4df9) (assertion-violation . H4df8) (asin . H4df7) (apply . H4df6) (append . H4df5) (angle . H4df4) (acos . H4df3) (abs . H4df2) (/ . H4df1) (* . H4df0) (- . H4def) (+ . H4dee) (>= . H4ded) (> . H4dec) (= . H4deb) (<= . H4dea) (< . H4de9) (library . H4de8) (&no-nans . H4de7) (&no-infinities . H4de6) (&i/o-encoding . H4de5) (&i/o-decoding . H4de4) (&i/o-port . H4de3) (&i/o-file-does-not-exist . H4de2) (&i/o-file-already-exists . H4de1) (&i/o-file-is-read-only . H4de0) (&i/o-file-protection . H4ddf) (&i/o-filename . H4dde) (&i/o-invalid-position . H4ddd) (&i/o-write . H4ddc) (&i/o-read . H4ddb) (&i/o . H4dda) (&undefined . H4dd9) (&syntax . H4dd8) (&lexical . H4dd7) (&implementation-restriction . H4dd6) (&non-continuable . H4dd5) (&who . H4dd4) (&irritants . H4dd3) (&assertion . H4dd2) (&violation . H4dd1) (&error . H4dd0) (&serious . H4dcf) (&warning . H4dce) (&message . H4dcd) (&condition . H4dcc) (define-condition-type . H4dcb) (define-enumeration . H4dca) (define-record-type . H4dc9) (parent-rtd . H4dc8) (nongenerative . H4dc7) (opaque . H4dc6) (sealed . H4dc5) (protocol . H4dc4) (parent . H4dc3) (immutable . H4dc2) (mutable . H4dc1) (fields . H4dc0) (error-handling-mode . H4dbf) (file-options . H4dbe) (buffer-mode . H4dbd) (eol-style . H4dbc) (guard . H4dbb) (unsyntax-splicing . H4db8) (unsyntax . H4db7) (unquote-splicing . H4db6) (unquote . H4db5) (_ . H4db4) (else . H4db3) (=> . H4db2) (... . H4db1) (assert . H4db0) (endianness . H4daf) (time . H4dad) (do . H4dac) (cond . H4dab) (let* . H4daa) (let*-values . H4da9) (let-values . H4da8) (identifier-syntax . H4da7) (with-syntax . H4da6) (quasisyntax . H4da5) (quasiquote . H4da4) (syntax-rules . H4da3) (include . H4da2) (record-constructor-descriptor . H4da0) (record-type-descriptor . H4d9f) (case . H4d9e) (unless . H4d9c) (when . H4d9b) (or . H4d9a) (and . H4d99) (if . H4d98) (let . H4d97) (letrec* . H4d96) (letrec . H4d95) (case-lambda . H4d93) (lambda . H4d92) (syntax . H4d91) (syntax-case . H4d90) (quote . H4d8f) (letrec-syntax . H4d8d) (let-syntax . H4d8c) (set! . H4d8b) (import . H4d8a) (begin . H4d89) (define-syntax . H4d87) (define . H4d86)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5127 '(psyntax null-environment-5) '() '() '() '() '((make-promise . H4f89) (unquote-splicing . H4db6) (unquote . H4db5) (_ . H4db4) (else . H4db3) (=> . H4db2) (... . H4db1) (delay . H4dae) (do . H4dac) (cond . H4dab) (let* . H4daa) (quasiquote . H4da4) (syntax-rules . H4da3) (case . H4d9e) (or . H4d9a) (and . H4d99) (if . H4d98) (let . H4d97) (letrec . H4d95) (lambda . H4d92) (quote . H4d8f) (letrec-syntax . H4d8d) (let-syntax . H4d8c) (set! . H4d8b) (begin . H4d89) (define-syntax . H4d87) (define . H4d86)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5128 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . H503a) (string-ci>=? . H5039) (string-ci=? . H5038) (string-ci<? . H5037) (string-ci<=? . H5036) (char-whitespace? . H5035) (char-upper-case? . H5034) (char-numeric? . H5032) (char-lower-case? . H5031) (char-upcase . H502f) (char-downcase . H502c) (char-ci>? . H502b) (char-ci>=? . H502a) (char-ci=? . H5029) (char-ci<? . H5028) (char-ci<=? . H5027) (char-alphabetic? . H5026) (call-with-output-file . H4ffa) (call-with-input-file . H4ff9) (write-char . H4ff8) (write . H4ff7) (with-output-to-file . H4ff6) (with-input-from-file . H4ff5) (read-char . H4ff4) (read . H4ff3) (peek-char . H4ff2) (open-output-file . H4ff1) (open-input-file . H4ff0) (newline . H4fef) (display . H4fee) (close-output-port . H4fed) (close-input-port . H4fec) (eof-object . H4fea) (current-output-port . H4fe8) (current-input-port . H4fe7) (output-port? . H4fe6) (input-port? . H4fe5) (scheme-report-environment . H3177) (quotient . H4f8f) (null-environment . H3175) (remainder . H4f8e) (modulo . H4f8d) (inexact->exact . H4f8c) (force . H4f8b) (exact->inexact . H4f8a) (make-promise . H4f89) (string-fill! . H4f87) (string-set! . H4f86) (set-cdr! . H4f85) (set-car! . H4f84) (memv . H4f7e) (memq . H4f7d) (member . H4f7b) (assv . H4f73) (assq . H4f72) (assoc . H4f70) (eval . H317b) (zero? . H4e8a) (vector? . H4e89) (vector-set! . H4e88) (vector-ref . H4e87) (vector-length . H4e85) (vector-fill! . H4e83) (vector->list . H4e82) (vector . H4e81) (values . H4e80) (truncate . H4e7f) (tan . H4e7e) (symbol? . H4e7d) (symbol->string . H4e7b) (substring . H4e7a) (string? . H4e79) (string>? . H4e78) (string>=? . H4e77) (string=? . H4e76) (string<? . H4e75) (string<=? . H4e74) (string-ref . H4e73) (string-length . H4e72) (string-copy . H4e70) (string-append . H4e6f) (string->symbol . H4e6e) (string->number . H4e6d) (string->list . H4e6c) (string . H4e6b) (sqrt . H4e6a) (sin . H4e69) (round . H4e68) (reverse . H4e67) (real? . H4e66) (real-part . H4e64) (rationalize . H4e63) (rational? . H4e62) (procedure? . H4e60) (positive? . H4e5f) (pair? . H4e5e) (odd? . H4e5d) (numerator . H4e5c) (number? . H4e5b) (number->string . H4e5a) (not . H4e58) (negative? . H4e57) (min . H4e55) (max . H4e54) (map . H4e53) (make-vector . H4e52) (make-string . H4e51) (make-rectangular . H4e50) (make-polar . H4e4f) (magnitude . H4e4e) (log . H4e4d) (list? . H4e4c) (list-tail . H4e4b) (list-ref . H4e4a) (list->vector . H4e49) (list->string . H4e48) (list . H4e47) (length . H4e46) (lcm . H4e45) (integer? . H4e44) (integer->char . H4e42) (inexact? . H4e40) (imag-part . H4e3e) (gcd . H4e3d) (for-each . H4e3c) (floor . H4e3b) (expt . H4e39) (exp . H4e38) (exact? . H4e37) (even? . H4e34) (eqv? . H4e32) (equal? . H4e31) (eq? . H4e30) (dynamic-wind . H4e2f) (denominator . H4e28) (cos . H4e27) (cons . H4e26) (complex? . H4e25) (char? . H4e24) (char>? . H4e23) (char>=? . H4e22) (char=? . H4e21) (char<? . H4e20) (char<=? . H4e1f) (char->integer . H4e1e) (ceiling . H4e1d) (call-with-values . H4e1c) (call-with-current-continuation . H4e1a) (cddddr . H4e19) (cdddar . H4e18) (cddadr . H4e17) (cddaar . H4e16) (cdaddr . H4e15) (cdadar . H4e14) (cdaadr . H4e13) (cdaaar . H4e12) (cadddr . H4e11) (caddar . H4e10) (cadadr . H4e0f) (cadaar . H4e0e) (caaddr . H4e0d) (caadar . H4e0c) (caaadr . H4e0b) (caaaar . H4e0a) (cdddr . H4e09) (cddar . H4e08) (cdadr . H4e07) (cdaar . H4e06) (caddr . H4e05) (cadar . H4e04) (caadr . H4e03) (caaar . H4e02) (cddr . H4e01) (cdar . H4e00) (cadr . H4dff) (caar . H4dfe) (cdr . H4dfd) (car . H4dfc) (boolean? . H4dfb) (atan . H4df9) (asin . H4df7) (apply . H4df6) (append . H4df5) (angle . H4df4) (acos . H4df3) (abs . H4df2) (/ . H4df1) (* . H4df0) (- . H4def) (+ . H4dee) (>= . H4ded) (> . H4dec) (= . H4deb) (<= . H4dea) (< . H4de9) (unquote-splicing . H4db6) (unquote . H4db5) (else . H4db3) (=> . H4db2) (... . H4db1) (delay . H4dae) (do . H4dac) (cond . H4dab) (let* . H4daa) (quasiquote . H4da4) (syntax-rules . H4da3) (case . H4d9e) (or . H4d9a) (and . H4d99) (if . H4d98) (let . H4d97) (letrec . H4d95) (lambda . H4d92) (quote . H4d8f) (letrec-syntax . H4d8d) (let-syntax . H4d8c) (set! . H4d8b) (begin . H4d89) (define-syntax . H4d87) (define . H4d86)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5129 '(psyntax modules) '() '() '() '() '((module . H4d88)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H512a '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H512b '(rnrs) '(6) '() '() '() '((regexp? . H50e6) (string-upcase . H5042) (string-titlecase . H5041) (string-normalize-nfkd . H5040) (string-normalize-nfkc . H503f) (string-normalize-nfd . H503e) (string-normalize-nfc . H503d) (string-foldcase . H503c) (string-downcase . H503b) (string-ci>? . H503a) (string-ci>=? . H5039) (string-ci=? . H5038) (string-ci<? . H5037) (string-ci<=? . H5036) (char-whitespace? . H5035) (char-upper-case? . H5034) (char-title-case? . H5033) (char-numeric? . H5032) (char-lower-case? . H5031) (char-general-category . H5030) (char-upcase . H502f) (char-titlecase . H502e) (char-foldcase . H502d) (char-downcase . H502c) (char-ci>? . H502b) (char-ci>=? . H502a) (char-ci=? . H5029) (char-ci<? . H5028) (char-ci<=? . H5027) (char-alphabetic? . H5026) (make-variable-transformer . H2ee6) (identifier? . H319d) (generate-temporaries . H3189) (free-identifier=? . H318b) (syntax->datum . H31a1) (datum->syntax . H319f) (bound-identifier=? . H318d) (record-type-descriptor? . H5025) (record-predicate . H5024) (record-mutator . H5023) (record-constructor . H5022) (record-accessor . H5021) (make-record-type-descriptor . H5020) (make-record-constructor-descriptor . H501f) (record? . H501e) (record-type-uid . H501d) (record-type-sealed? . H501c) (record-type-parent . H501b) (record-type-opaque? . H501a) (record-type-name . H5019) (record-type-generative? . H5018) (record-type-field-names . H5017) (record-rtd . H5016) (record-field-mutable? . H5015) (delete-file . H5014) (file-exists? . H5013) (vector-sort! . H5012) (vector-sort . H5011) (list-sort . H5010) (symbol-hash . H500f) (string-ci-hash . H500e) (string-hash . H500d) (equal-hash . H500c) (hashtable-equivalence-function . H500b) (make-hashtable . H500a) (hashtable-hash-function . H5009) (make-eqv-hashtable . H5008) (make-eq-hashtable . H5007) (hashtable? . H5006) (hashtable-update! . H5005) (hashtable-size . H5004) (hashtable-set! . H5003) (hashtable-ref . H5002) (hashtable-mutable? . H5001) (hashtable-keys . H5000) (hashtable-entries . H4fff) (hashtable-delete! . H4ffe) (hashtable-copy . H4ffd) (hashtable-contains? . H4ffc) (hashtable-clear! . H4ffb) (call-with-output-file . H4ffa) (call-with-input-file . H4ff9) (write-char . H4ff8) (write . H4ff7) (with-output-to-file . H4ff6) (with-input-from-file . H4ff5) (read-char . H4ff4) (read . H4ff3) (peek-char . H4ff2) (open-output-file . H4ff1) (open-input-file . H4ff0) (newline . H4fef) (display . H4fee) (close-output-port . H4fed) (close-input-port . H4fec) (eof-object? . H4feb) (eof-object . H4fea) (current-error-port . H4fe9) (current-output-port . H4fe8) (current-input-port . H4fe7) (output-port? . H4fe6) (input-port? . H4fe5) (utf-8-codec . H4fe4) (utf-16-codec . H4fe3) (transcoder-error-handling-mode . H4fe2) (transcoder-eol-style . H4fe1) (transcoder-codec . H4fe0) (transcoded-port . H4fdf) (textual-port? . H4fde) (string->bytevector . H4fdd) (standard-output-port . H4fdc) (standard-input-port . H4fdb) (standard-error-port . H4fda) (set-port-position! . H4fd9) (put-u8 . H4fd8) (put-string . H4fd7) (put-datum . H4fd6) (put-char . H4fd5) (put-bytevector . H4fd4) (port? . H4fd3) (port-transcoder . H4fd2) (port-position . H4fd1) (port-has-set-port-position!? . H4fd0) (port-has-port-position? . H4fcf) (port-eof? . H4fce) (output-port-buffer-mode . H4fcd) (open-string-output-port . H4fcc) (open-string-input-port . H4fcb) (open-file-output-port . H4fca) (open-file-input/output-port . H4fc9) (open-file-input-port . H4fc8) (open-bytevector-output-port . H4fc7) (open-bytevector-input-port . H4fc6) (native-transcoder . H4fc5) (native-eol-style . H4fc4) (make-transcoder . H4fc3) (latin-1-codec . H4fc2) (make-i/o-write-error . H4fc1) (make-i/o-read-error . H4fc0) (make-i/o-port-error . H4fbf) (make-i/o-invalid-position-error . H4fbe) (make-i/o-filename-error . H4fbd) (make-i/o-file-protection-error . H4fbc) (make-i/o-file-is-read-only-error . H4fbb) (make-i/o-file-does-not-exist-error . H4fba) (make-i/o-file-already-exists-error . H4fb9) (make-i/o-error . H4fb8) (make-i/o-encoding-error . H4fb7) (make-i/o-decoding-error . H4fb6) (make-custom-textual-output-port . H4fb5) (make-custom-textual-input/output-port . H4fb4) (make-custom-textual-input-port . H4fb3) (make-custom-binary-output-port . H4fb2) (make-custom-binary-input/output-port . H4fb1) (make-custom-binary-input-port . H4fb0) (make-bytevector . H4faf) (lookahead-u8 . H4fae) (lookahead-char . H4fad) (i/o-write-error? . H4fac) (i/o-read-error? . H4fab) (i/o-port-error? . H4faa) (i/o-invalid-position-error? . H4fa9) (i/o-filename-error? . H4fa8) (i/o-file-protection-error? . H4fa7) (i/o-file-is-read-only-error? . H4fa6) (i/o-file-does-not-exist-error? . H4fa5) (i/o-file-already-exists-error? . H4fa4) (i/o-error? . H4fa3) (i/o-error-position . H4fa2) (i/o-error-port . H4fa1) (i/o-error-filename . H4fa0) (i/o-encoding-error? . H4f9f) (i/o-encoding-error-char . H4f9e) (i/o-decoding-error? . H4f9d) (get-u8 . H4f9c) (get-string-n! . H4f9b) (get-string-n . H4f9a) (get-string-all . H4f99) (get-line . H4f98) (get-datum . H4f97) (get-char . H4f96) (get-bytevector-some . H4f95) (get-bytevector-n! . H4f94) (get-bytevector-n . H4f93) (get-bytevector-all . H4f92) (flush-output-port . H4f91) (close-port . H4f90) (exit . H4f88) (command-line . H4c1e) (remove . H4f83) (remv . H4f82) (remp . H4f81) (remq . H4f80) (partition . H4f7f) (memv . H4f7e) (memq . H4f7d) (memp . H4f7c) (member . H4f7b) (exists . H4f7a) (for-all . H4f79) (fold-right . H4f78) (fold-left . H4f77) (find . H4f76) (filter . H4f75) (cons* . H4f74) (assv . H4f73) (assq . H4f72) (assp . H4f71) (assoc . H4f70) (call-with-string-output-port . H4f6f) (call-with-port . H4f6e) (call-with-bytevector-output-port . H4f6d) (bytevector->string . H4f6c) (buffer-mode? . H4f6b) (binary-port? . H4f6a) (with-exception-handler . H4f69) (raise-continuable . H4f68) (raise . H4f67) (make-enumeration . H4f66) (enum-set=? . H4f65) (enum-set-universe . H4f64) (enum-set-union . H4f63) (enum-set-subset? . H4f62) (enum-set-projection . H4f61) (enum-set-member? . H4f60) (enum-set-intersection . H4f5f) (enum-set-indexer . H4f5e) (enum-set-difference . H4f5d) (enum-set-constructor . H4f5c) (enum-set-complement . H4f5b) (enum-set->list . H4f5a) (who-condition? . H4f59) (warning? . H4f58) (violation? . H4f57) (undefined-violation? . H4f56) (syntax-violation? . H4f55) (syntax-violation-subform . H4f54) (syntax-violation-form . H4f53) (syntax-violation . H319b) (simple-conditions . H4f52) (serious-condition? . H4f51) (non-continuable-violation? . H4f50) (message-condition? . H4f4f) (make-who-condition . H4f4e) (make-warning . H4f4d) (make-violation . H4f4c) (make-undefined-violation . H4f4b) (make-syntax-violation . H4f4a) (make-serious-condition . H4f49) (make-non-continuable-violation . H4f48) (make-message-condition . H4f47) (make-lexical-violation . H4f46) (make-irritants-condition . H4f45) (make-implementation-restriction-violation . H4f44) (make-error . H4f43) (make-assertion-violation . H4f42) (lexical-violation? . H4f41) (irritants-condition? . H4f40) (implementation-restriction-violation? . H4f3f) (error? . H4f3e) (condition-who . H4f3d) (condition-predicate . H4f3c) (condition-message . H4f3b) (condition-irritants . H4f3a) (condition-accessor . H4f39) (condition . H4f38) (assertion-violation? . H4f37) (condition? . H4f36) (utf32->string . H4f35) (utf16->string . H4f34) (utf8->string . H4f33) (uint-list->bytevector . H4f32) (u8-list->bytevector . H4f31) (string->utf8 . H4f30) (string->utf32 . H4f2f) (string->utf16 . H4f2e) (sint-list->bytevector . H4f2d) (native-endianness . H4f2c) (bytevector? . H4f2b) (bytevector=? . H4f2a) (bytevector-uint-set! . H4f29) (bytevector-uint-ref . H4f28) (bytevector-u8-set! . H4f27) (bytevector-u8-ref . H4f26) (bytevector-u64-set! . H4f25) (bytevector-u64-ref . H4f24) (bytevector-u64-native-set! . H4f23) (bytevector-u64-native-ref . H4f22) (bytevector-u32-set! . H4f21) (bytevector-u32-ref . H4f20) (bytevector-u32-native-set! . H4f1f) (bytevector-u32-native-ref . H4f1e) (bytevector-u16-set! . H4f1d) (bytevector-u16-ref . H4f1c) (bytevector-u16-native-set! . H4f1b) (bytevector-u16-native-ref . H4f1a) (bytevector-sint-set! . H4f19) (bytevector-sint-ref . H4f18) (bytevector-s8-set! . H4f17) (bytevector-s8-ref . H4f16) (bytevector-s64-set! . H4f15) (bytevector-s64-ref . H4f14) (bytevector-s64-native-set! . H4f13) (bytevector-s64-native-ref . H4f12) (bytevector-s32-set! . H4f11) (bytevector-s32-ref . H4f10) (bytevector-s32-native-set! . H4f0f) (bytevector-s32-native-ref . H4f0e) (bytevector-s16-set! . H4f0d) (bytevector-s16-ref . H4f0c) (bytevector-s16-native-set! . H4f0b) (bytevector-s16-native-ref . H4f0a) (bytevector-length . H4f09) (bytevector-ieee-single-ref . H4f08) (bytevector-ieee-single-set! . H4f07) (bytevector-ieee-single-native-set! . H4f06) (bytevector-ieee-single-native-ref . H4f05) (bytevector-ieee-double-set! . H4f04) (bytevector-ieee-double-ref . H4f03) (bytevector-ieee-double-native-set! . H4f02) (bytevector-ieee-double-native-ref . H4f01) (bytevector-fill! . H4f00) (bytevector-copy! . H4eff) (bytevector-copy . H4efe) (bytevector->uint-list . H4efd) (bytevector->u8-list . H4efc) (bytevector->sint-list . H4efb) (no-nans-violation? . H4efa) (no-infinities-violation? . H4ef9) (make-no-nans-violation . H4ef8) (make-no-infinities-violation . H4ef7) (real->flonum . H4ef6) (flzero? . H4ef5) (fltruncate . H4ef4) (fltan . H4ef3) (flsqrt . H4ef2) (flsin . H4ef1) (flround . H4ef0) (flpositive? . H4eef) (flonum? . H4eee) (flodd? . H4eed) (flnumerator . H4eec) (flnegative? . H4eeb) (flnan? . H4eea) (flmod0 . H4ee9) (flmod . H4ee8) (flmin . H4ee7) (flmax . H4ee6) (fllog . H4ee5) (flinteger? . H4ee4) (flinfinite? . H4ee3) (flfloor . H4ee2) (flfinite? . H4ee1) (flexpt . H4ee0) (flexp . H4edf) (fleven? . H4ede) (fldiv0-and-mod0 . H4edd) (fldiv0 . H4edc) (fldiv-and-mod . H4edb) (fldiv . H4eda) (fldenominator . H4ed9) (flcos . H4ed8) (flceiling . H4ed7) (flatan . H4ed6) (flasin . H4ed5) (flacos . H4ed4) (flabs . H4ed3) (fl>? . H4ed2) (fl>=? . H4ed1) (fl=? . H4ed0) (fl<? . H4ecf) (fl<=? . H4ece) (fl/ . H4ecd) (fl- . H4ecc) (fl+ . H4ecb) (fl* . H4eca) (fixnum->flonum . H4ec9) (fxzero? . H4ec8) (fxxor . H4ec7) (fxrotate-bit-field . H4ec6) (fxreverse-bit-field . H4ec5) (fxpositive? . H4ec4) (fxodd? . H4ec3) (fxnot . H4ec2) (fxnegative? . H4ec1) (fxmod0 . H4ec0) (fxmod . H4ebf) (fxmin . H4ebe) (fxmax . H4ebd) (fxlength . H4ebc) (fxior . H4ebb) (fxif . H4eba) (fxfirst-bit-set . H4eb9) (fxeven? . H4eb8) (fxdiv0-and-mod0 . H4eb7) (fxdiv0 . H4eb6) (fxdiv-and-mod . H4eb5) (fxdiv . H4eb4) (fxcopy-bit-field . H4eb3) (fxcopy-bit . H4eb2) (fxbit-set? . H4eb1) (fxbit-field . H4eb0) (fxbit-count . H4eaf) (fxarithmetic-shift-right . H4eae) (fxarithmetic-shift-left . H4ead) (fxarithmetic-shift . H4eac) (fxand . H4eab) (fx>? . H4eaa) (fx>=? . H4ea9) (fx=? . H4ea8) (fx<? . H4ea7) (fx<=? . H4ea6) (fx-/carry . H4ea5) (fx- . H4ea4) (fx+/carry . H4ea3) (fx+ . H4ea2) (fx*/carry . H4ea1) (fx* . H4ea0) (greatest-fixnum . H4e9f) (least-fixnum . H4e9e) (fixnum-width . H4e9d) (fixnum? . H4e9c) (bitwise-rotate-bit-field . H4e9b) (bitwise-reverse-bit-field . H4e9a) (bitwise-length . H4e99) (bitwise-if . H4e98) (bitwise-first-bit-set . H4e97) (bitwise-copy-bit-field . H4e96) (bitwise-copy-bit . H4e95) (bitwise-bit-set? . H4e94) (bitwise-bit-field . H4e93) (bitwise-bit-count . H4e92) (bitwise-xor . H4e91) (bitwise-ior . H4e90) (bitwise-and . H4e8f) (bitwise-not . H4e8e) (bitwise-arithmetic-shift-right . H4e8d) (bitwise-arithmetic-shift-left . H4e8c) (bitwise-arithmetic-shift . H4e8b) (zero? . H4e8a) (vector? . H4e89) (vector-set! . H4e88) (vector-ref . H4e87) (vector-map . H4e86) (vector-length . H4e85) (vector-for-each . H4e84) (vector-fill! . H4e83) (vector->list . H4e82) (vector . H4e81) (values . H4e80) (truncate . H4e7f) (tan . H4e7e) (symbol? . H4e7d) (symbol=? . H4e7c) (symbol->string . H4e7b) (substring . H4e7a) (string? . H4e79) (string>? . H4e78) (string>=? . H4e77) (string=? . H4e76) (string<? . H4e75) (string<=? . H4e74) (string-ref . H4e73) (string-length . H4e72) (string-for-each . H4e71) (string-copy . H4e70) (string-append . H4e6f) (string->symbol . H4e6e) (string->number . H4e6d) (string->list . H4e6c) (string . H4e6b) (sqrt . H4e6a) (sin . H4e69) (round . H4e68) (reverse . H4e67) (real? . H4e66) (real-valued? . H4e65) (real-part . H4e64) (rationalize . H4e63) (rational? . H4e62) (rational-valued? . H4e61) (procedure? . H4e60) (positive? . H4e5f) (pair? . H4e5e) (odd? . H4e5d) (numerator . H4e5c) (number? . H4e5b) (number->string . H4e5a) (null? . H4e59) (not . H4e58) (negative? . H4e57) (nan? . H4e56) (min . H4e55) (max . H4e54) (map . H4e53) (make-vector . H4e52) (make-string . H4e51) (make-rectangular . H4e50) (make-polar . H4e4f) (magnitude . H4e4e) (log . H4e4d) (list? . H4e4c) (list-tail . H4e4b) (list-ref . H4e4a) (list->vector . H4e49) (list->string . H4e48) (list . H4e47) (length . H4e46) (lcm . H4e45) (integer? . H4e44) (integer-valued? . H4e43) (integer->char . H4e42) (infinite? . H4e41) (inexact? . H4e40) (inexact . H4e3f) (imag-part . H4e3e) (gcd . H4e3d) (for-each . H4e3c) (floor . H4e3b) (finite? . H4e3a) (expt . H4e39) (exp . H4e38) (exact? . H4e37) (exact-integer-sqrt . H4e36) (exact . H4e35) (even? . H4e34) (error . H4e33) (eqv? . H4e32) (equal? . H4e31) (eq? . H4e30) (dynamic-wind . H4e2f) (div0-and-mod0 . H4e2e) (mod0 . H4e2d) (div0 . H4e2c) (div-and-mod . H4e2b) (mod . H4e2a) (div . H4e29) (denominator . H4e28) (cos . H4e27) (cons . H4e26) (complex? . H4e25) (char? . H4e24) (char>? . H4e23) (char>=? . H4e22) (char=? . H4e21) (char<? . H4e20) (char<=? . H4e1f) (char->integer . H4e1e) (ceiling . H4e1d) (call-with-values . H4e1c) (call/cc . H4e1b) (call-with-current-continuation . H4e1a) (cddddr . H4e19) (cdddar . H4e18) (cddadr . H4e17) (cddaar . H4e16) (cdaddr . H4e15) (cdadar . H4e14) (cdaadr . H4e13) (cdaaar . H4e12) (cadddr . H4e11) (caddar . H4e10) (cadadr . H4e0f) (cadaar . H4e0e) (caaddr . H4e0d) (caadar . H4e0c) (caaadr . H4e0b) (caaaar . H4e0a) (cdddr . H4e09) (cddar . H4e08) (cdadr . H4e07) (cdaar . H4e06) (caddr . H4e05) (cadar . H4e04) (caadr . H4e03) (caaar . H4e02) (cddr . H4e01) (cdar . H4e00) (cadr . H4dff) (caar . H4dfe) (cdr . H4dfd) (car . H4dfc) (boolean? . H4dfb) (boolean=? . H4dfa) (atan . H4df9) (assertion-violation . H4df8) (asin . H4df7) (apply . H4df6) (append . H4df5) (angle . H4df4) (acos . H4df3) (abs . H4df2) (/ . H4df1) (* . H4df0) (- . H4def) (+ . H4dee) (>= . H4ded) (> . H4dec) (= . H4deb) (<= . H4dea) (< . H4de9) (&no-nans . H4de7) (&no-infinities . H4de6) (&i/o-encoding . H4de5) (&i/o-decoding . H4de4) (&i/o-port . H4de3) (&i/o-file-does-not-exist . H4de2) (&i/o-file-already-exists . H4de1) (&i/o-file-is-read-only . H4de0) (&i/o-file-protection . H4ddf) (&i/o-filename . H4dde) (&i/o-invalid-position . H4ddd) (&i/o-write . H4ddc) (&i/o-read . H4ddb) (&i/o . H4dda) (&undefined . H4dd9) (&syntax . H4dd8) (&lexical . H4dd7) (&implementation-restriction . H4dd6) (&non-continuable . H4dd5) (&who . H4dd4) (&irritants . H4dd3) (&assertion . H4dd2) (&violation . H4dd1) (&error . H4dd0) (&serious . H4dcf) (&warning . H4dce) (&message . H4dcd) (&condition . H4dcc) (define-condition-type . H4dcb) (define-enumeration . H4dca) (define-record-type . H4dc9) (parent-rtd . H4dc8) (nongenerative . H4dc7) (opaque . H4dc6) (sealed . H4dc5) (protocol . H4dc4) (parent . H4dc3) (immutable . H4dc2) (mutable . H4dc1) (fields . H4dc0) (error-handling-mode . H4dbf) (file-options . H4dbe) (buffer-mode . H4dbd) (eol-style . H4dbc) (guard . H4dbb) (unsyntax-splicing . H4db8) (unsyntax . H4db7) (unquote-splicing . H4db6) (unquote . H4db5) (_ . H4db4) (else . H4db3) (=> . H4db2) (... . H4db1) (assert . H4db0) (endianness . H4daf) (do . H4dac) (cond . H4dab) (let* . H4daa) (let*-values . H4da9) (let-values . H4da8) (identifier-syntax . H4da7) (with-syntax . H4da6) (quasisyntax . H4da5) (quasiquote . H4da4) (syntax-rules . H4da3) (record-constructor-descriptor . H4da0) (record-type-descriptor . H4d9f) (case . H4d9e) (unless . H4d9c) (when . H4d9b) (or . H4d9a) (and . H4d99) (if . H4d98) (let . H4d97) (letrec* . H4d96) (letrec . H4d95) (case-lambda . H4d93) (lambda . H4d92) (syntax . H4d91) (syntax-case . H4d90) (quote . H4d8f) (letrec-syntax . H4d8d) (let-syntax . H4d8c) (set! . H4d8b) (begin . H4d89) (define-syntax . H4d87) (define . H4d86)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H512c '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . H3177) (quotient . H4f8f) (null-environment . H3175) (remainder . H4f8e) (modulo . H4f8d) (inexact->exact . H4f8c) (force . H4f8b) (exact->inexact . H4f8a) (make-promise . H4f89) (delay . H4dae)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H512d '(rnrs control) '(6) '() '() '() '((do . H4dac) (unless . H4d9c) (when . H4d9b) (case-lambda . H4d93)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H512e '(rnrs eval) '(6) '() '() '() '((eval . H317b) (environment . H3173)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H512f '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . H4f85) (set-car! . H4f84)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5130 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . H4f87) (string-set! . H4f86)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5131 '(rnrs programs) '(6) '() '() '() '((exit . H4f88) (command-line . H4c1e)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5132 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . H2ee6) (identifier? . H319d) (generate-temporaries . H3189) (free-identifier=? . H318b) (syntax->datum . H31a1) (datum->syntax . H319f) (bound-identifier=? . H318d) (syntax-violation . H319b) (unsyntax-splicing . H4db8) (unsyntax . H4db7) (_ . H4db4) (... . H4db1) (with-syntax . H4da6) (quasisyntax . H4da5) (syntax . H4d91) (syntax-case . H4d90)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5133 '(rnrs files) '(6) '() '() '() '((delete-file . H5014) (file-exists? . H5013) (make-i/o-write-error . H4fc1) (make-i/o-read-error . H4fc0) (make-i/o-port-error . H4fbf) (make-i/o-invalid-position-error . H4fbe) (make-i/o-filename-error . H4fbd) (make-i/o-file-protection-error . H4fbc) (make-i/o-file-is-read-only-error . H4fbb) (make-i/o-file-does-not-exist-error . H4fba) (make-i/o-file-already-exists-error . H4fb9) (make-i/o-error . H4fb8) (i/o-write-error? . H4fac) (i/o-read-error? . H4fab) (i/o-port-error? . H4faa) (i/o-invalid-position-error? . H4fa9) (i/o-filename-error? . H4fa8) (i/o-file-protection-error? . H4fa7) (i/o-file-is-read-only-error? . H4fa6) (i/o-file-does-not-exist-error? . H4fa5) (i/o-file-already-exists-error? . H4fa4) (i/o-error? . H4fa3) (i/o-error-position . H4fa2) (i/o-error-port . H4fa1) (i/o-error-filename . H4fa0) (&i/o-port . H4de3) (&i/o-file-does-not-exist . H4de2) (&i/o-file-already-exists . H4de1) (&i/o-file-is-read-only . H4de0) (&i/o-file-protection . H4ddf) (&i/o-filename . H4dde) (&i/o-invalid-position . H4ddd) (&i/o-write . H4ddc) (&i/o-read . H4ddb) (&i/o . H4dda)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5134 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . H5012) (vector-sort . H5011) (list-sort . H5010)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5135 '(rnrs base) '(6) '() '() '() '((zero? . H4e8a) (vector? . H4e89) (vector-set! . H4e88) (vector-ref . H4e87) (vector-map . H4e86) (vector-length . H4e85) (vector-for-each . H4e84) (vector-fill! . H4e83) (vector->list . H4e82) (vector . H4e81) (values . H4e80) (truncate . H4e7f) (tan . H4e7e) (symbol? . H4e7d) (symbol=? . H4e7c) (symbol->string . H4e7b) (substring . H4e7a) (string? . H4e79) (string>? . H4e78) (string>=? . H4e77) (string=? . H4e76) (string<? . H4e75) (string<=? . H4e74) (string-ref . H4e73) (string-length . H4e72) (string-for-each . H4e71) (string-copy . H4e70) (string-append . H4e6f) (string->symbol . H4e6e) (string->number . H4e6d) (string->list . H4e6c) (string . H4e6b) (sqrt . H4e6a) (sin . H4e69) (round . H4e68) (reverse . H4e67) (real? . H4e66) (real-valued? . H4e65) (real-part . H4e64) (rationalize . H4e63) (rational? . H4e62) (rational-valued? . H4e61) (procedure? . H4e60) (positive? . H4e5f) (pair? . H4e5e) (odd? . H4e5d) (numerator . H4e5c) (number? . H4e5b) (number->string . H4e5a) (null? . H4e59) (not . H4e58) (negative? . H4e57) (nan? . H4e56) (min . H4e55) (max . H4e54) (map . H4e53) (make-vector . H4e52) (make-string . H4e51) (make-rectangular . H4e50) (make-polar . H4e4f) (magnitude . H4e4e) (log . H4e4d) (list? . H4e4c) (list-tail . H4e4b) (list-ref . H4e4a) (list->vector . H4e49) (list->string . H4e48) (list . H4e47) (length . H4e46) (lcm . H4e45) (integer? . H4e44) (integer-valued? . H4e43) (integer->char . H4e42) (infinite? . H4e41) (inexact? . H4e40) (inexact . H4e3f) (imag-part . H4e3e) (gcd . H4e3d) (for-each . H4e3c) (floor . H4e3b) (finite? . H4e3a) (expt . H4e39) (exp . H4e38) (exact? . H4e37) (exact-integer-sqrt . H4e36) (exact . H4e35) (even? . H4e34) (error . H4e33) (eqv? . H4e32) (equal? . H4e31) (eq? . H4e30) (dynamic-wind . H4e2f) (div0-and-mod0 . H4e2e) (mod0 . H4e2d) (div0 . H4e2c) (div-and-mod . H4e2b) (mod . H4e2a) (div . H4e29) (denominator . H4e28) (cos . H4e27) (cons . H4e26) (complex? . H4e25) (char? . H4e24) (char>? . H4e23) (char>=? . H4e22) (char=? . H4e21) (char<? . H4e20) (char<=? . H4e1f) (char->integer . H4e1e) (ceiling . H4e1d) (call-with-values . H4e1c) (call/cc . H4e1b) (call-with-current-continuation . H4e1a) (cddddr . H4e19) (cdddar . H4e18) (cddadr . H4e17) (cddaar . H4e16) (cdaddr . H4e15) (cdadar . H4e14) (cdaadr . H4e13) (cdaaar . H4e12) (cadddr . H4e11) (caddar . H4e10) (cadadr . H4e0f) (cadaar . H4e0e) (caaddr . H4e0d) (caadar . H4e0c) (caaadr . H4e0b) (caaaar . H4e0a) (cdddr . H4e09) (cddar . H4e08) (cdadr . H4e07) (cdaar . H4e06) (caddr . H4e05) (cadar . H4e04) (caadr . H4e03) (caaar . H4e02) (cddr . H4e01) (cdar . H4e00) (cadr . H4dff) (caar . H4dfe) (cdr . H4dfd) (car . H4dfc) (boolean? . H4dfb) (boolean=? . H4dfa) (atan . H4df9) (assertion-violation . H4df8) (asin . H4df7) (apply . H4df6) (append . H4df5) (angle . H4df4) (acos . H4df3) (abs . H4df2) (/ . H4df1) (* . H4df0) (- . H4def) (+ . H4dee) (>= . H4ded) (> . H4dec) (= . H4deb) (<= . H4dea) (< . H4de9) (unquote-splicing . H4db6) (unquote . H4db5) (_ . H4db4) (else . H4db3) (=> . H4db2) (... . H4db1) (assert . H4db0) (cond . H4dab) (let* . H4daa) (let*-values . H4da9) (let-values . H4da8) (identifier-syntax . H4da7) (quasiquote . H4da4) (syntax-rules . H4da3) (case . H4d9e) (or . H4d9a) (and . H4d99) (if . H4d98) (let . H4d97) (letrec* . H4d96) (letrec . H4d95) (lambda . H4d92) (quote . H4d8f) (letrec-syntax . H4d8d) (let-syntax . H4d8c) (set! . H4d8b) (begin . H4d89) (define-syntax . H4d87) (define . H4d86)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5136 '(rnrs lists) '(6) '() '() '() '((remove . H4f83) (remv . H4f82) (remp . H4f81) (remq . H4f80) (partition . H4f7f) (memv . H4f7e) (memq . H4f7d) (memp . H4f7c) (member . H4f7b) (exists . H4f7a) (for-all . H4f79) (fold-right . H4f78) (fold-left . H4f77) (find . H4f76) (filter . H4f75) (cons* . H4f74) (assv . H4f73) (assq . H4f72) (assp . H4f71) (assoc . H4f70)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5137 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . H4ffa) (call-with-input-file . H4ff9) (write-char . H4ff8) (write . H4ff7) (with-output-to-file . H4ff6) (with-input-from-file . H4ff5) (read-char . H4ff4) (read . H4ff3) (peek-char . H4ff2) (open-output-file . H4ff1) (open-input-file . H4ff0) (newline . H4fef) (display . H4fee) (close-output-port . H4fed) (close-input-port . H4fec) (eof-object? . H4feb) (eof-object . H4fea) (current-error-port . H4fe9) (current-output-port . H4fe8) (current-input-port . H4fe7) (output-port? . H4fe6) (input-port? . H4fe5) (make-i/o-write-error . H4fc1) (make-i/o-read-error . H4fc0) (make-i/o-port-error . H4fbf) (make-i/o-invalid-position-error . H4fbe) (make-i/o-filename-error . H4fbd) (make-i/o-file-protection-error . H4fbc) (make-i/o-file-is-read-only-error . H4fbb) (make-i/o-file-does-not-exist-error . H4fba) (make-i/o-file-already-exists-error . H4fb9) (make-i/o-error . H4fb8) (i/o-write-error? . H4fac) (i/o-read-error? . H4fab) (i/o-port-error? . H4faa) (i/o-invalid-position-error? . H4fa9) (i/o-filename-error? . H4fa8) (i/o-file-protection-error? . H4fa7) (i/o-file-is-read-only-error? . H4fa6) (i/o-file-does-not-exist-error? . H4fa5) (i/o-file-already-exists-error? . H4fa4) (i/o-error? . H4fa3) (i/o-error-position . H4fa2) (i/o-error-port . H4fa1) (i/o-error-filename . H4fa0) (&i/o-port . H4de3) (&i/o-file-does-not-exist . H4de2) (&i/o-file-already-exists . H4de1) (&i/o-file-is-read-only . H4de0) (&i/o-file-protection . H4ddf) (&i/o-filename . H4dde) (&i/o-invalid-position . H4ddd) (&i/o-write . H4ddc) (&i/o-read . H4ddb) (&i/o . H4dda)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5138 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . H4faf) (utf32->string . H4f35) (utf16->string . H4f34) (utf8->string . H4f33) (uint-list->bytevector . H4f32) (u8-list->bytevector . H4f31) (string->utf8 . H4f30) (string->utf32 . H4f2f) (string->utf16 . H4f2e) (sint-list->bytevector . H4f2d) (native-endianness . H4f2c) (bytevector? . H4f2b) (bytevector=? . H4f2a) (bytevector-uint-set! . H4f29) (bytevector-uint-ref . H4f28) (bytevector-u8-set! . H4f27) (bytevector-u8-ref . H4f26) (bytevector-u64-set! . H4f25) (bytevector-u64-ref . H4f24) (bytevector-u64-native-set! . H4f23) (bytevector-u64-native-ref . H4f22) (bytevector-u32-set! . H4f21) (bytevector-u32-ref . H4f20) (bytevector-u32-native-set! . H4f1f) (bytevector-u32-native-ref . H4f1e) (bytevector-u16-set! . H4f1d) (bytevector-u16-ref . H4f1c) (bytevector-u16-native-set! . H4f1b) (bytevector-u16-native-ref . H4f1a) (bytevector-sint-set! . H4f19) (bytevector-sint-ref . H4f18) (bytevector-s8-set! . H4f17) (bytevector-s8-ref . H4f16) (bytevector-s64-set! . H4f15) (bytevector-s64-ref . H4f14) (bytevector-s64-native-set! . H4f13) (bytevector-s64-native-ref . H4f12) (bytevector-s32-set! . H4f11) (bytevector-s32-ref . H4f10) (bytevector-s32-native-set! . H4f0f) (bytevector-s32-native-ref . H4f0e) (bytevector-s16-set! . H4f0d) (bytevector-s16-ref . H4f0c) (bytevector-s16-native-set! . H4f0b) (bytevector-s16-native-ref . H4f0a) (bytevector-length . H4f09) (bytevector-ieee-single-ref . H4f08) (bytevector-ieee-single-set! . H4f07) (bytevector-ieee-single-native-set! . H4f06) (bytevector-ieee-single-native-ref . H4f05) (bytevector-ieee-double-set! . H4f04) (bytevector-ieee-double-ref . H4f03) (bytevector-ieee-double-native-set! . H4f02) (bytevector-ieee-double-native-ref . H4f01) (bytevector-fill! . H4f00) (bytevector-copy! . H4eff) (bytevector-copy . H4efe) (bytevector->uint-list . H4efd) (bytevector->u8-list . H4efc) (bytevector->sint-list . H4efb) (endianness . H4daf)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5139 '(rnrs unicode) '(6) '() '() '() '((string-upcase . H5042) (string-titlecase . H5041) (string-normalize-nfkd . H5040) (string-normalize-nfkc . H503f) (string-normalize-nfd . H503e) (string-normalize-nfc . H503d) (string-foldcase . H503c) (string-downcase . H503b) (string-ci>? . H503a) (string-ci>=? . H5039) (string-ci=? . H5038) (string-ci<? . H5037) (string-ci<=? . H5036) (char-whitespace? . H5035) (char-upper-case? . H5034) (char-title-case? . H5033) (char-numeric? . H5032) (char-lower-case? . H5031) (char-general-category . H5030) (char-upcase . H502f) (char-titlecase . H502e) (char-foldcase . H502d) (char-downcase . H502c) (char-ci>? . H502b) (char-ci>=? . H502a) (char-ci=? . H5029) (char-ci<? . H5028) (char-ci<=? . H5027) (char-alphabetic? . H5026)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H513a '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . H4f69) (raise-continuable . H4f68) (raise . H4f67) (guard . H4dbb) (else . H4db3) (=> . H4db2)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H513b '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . H4e9b) (bitwise-reverse-bit-field . H4e9a) (bitwise-length . H4e99) (bitwise-if . H4e98) (bitwise-first-bit-set . H4e97) (bitwise-copy-bit-field . H4e96) (bitwise-copy-bit . H4e95) (bitwise-bit-set? . H4e94) (bitwise-bit-field . H4e93) (bitwise-bit-count . H4e92) (bitwise-xor . H4e91) (bitwise-ior . H4e90) (bitwise-and . H4e8f) (bitwise-not . H4e8e) (bitwise-arithmetic-shift-right . H4e8d) (bitwise-arithmetic-shift-left . H4e8c) (bitwise-arithmetic-shift . H4e8b)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H513c '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . H4ec8) (fxxor . H4ec7) (fxrotate-bit-field . H4ec6) (fxreverse-bit-field . H4ec5) (fxpositive? . H4ec4) (fxodd? . H4ec3) (fxnot . H4ec2) (fxnegative? . H4ec1) (fxmod0 . H4ec0) (fxmod . H4ebf) (fxmin . H4ebe) (fxmax . H4ebd) (fxlength . H4ebc) (fxior . H4ebb) (fxif . H4eba) (fxfirst-bit-set . H4eb9) (fxeven? . H4eb8) (fxdiv0-and-mod0 . H4eb7) (fxdiv0 . H4eb6) (fxdiv-and-mod . H4eb5) (fxdiv . H4eb4) (fxcopy-bit-field . H4eb3) (fxcopy-bit . H4eb2) (fxbit-set? . H4eb1) (fxbit-field . H4eb0) (fxbit-count . H4eaf) (fxarithmetic-shift-right . H4eae) (fxarithmetic-shift-left . H4ead) (fxarithmetic-shift . H4eac) (fxand . H4eab) (fx>? . H4eaa) (fx>=? . H4ea9) (fx=? . H4ea8) (fx<? . H4ea7) (fx<=? . H4ea6) (fx-/carry . H4ea5) (fx- . H4ea4) (fx+/carry . H4ea3) (fx+ . H4ea2) (fx*/carry . H4ea1) (fx* . H4ea0) (greatest-fixnum . H4e9f) (least-fixnum . H4e9e) (fixnum-width . H4e9d) (fixnum? . H4e9c)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H513d '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . H4efa) (no-infinities-violation? . H4ef9) (make-no-nans-violation . H4ef8) (make-no-infinities-violation . H4ef7) (real->flonum . H4ef6) (flzero? . H4ef5) (fltruncate . H4ef4) (fltan . H4ef3) (flsqrt . H4ef2) (flsin . H4ef1) (flround . H4ef0) (flpositive? . H4eef) (flonum? . H4eee) (flodd? . H4eed) (flnumerator . H4eec) (flnegative? . H4eeb) (flnan? . H4eea) (flmod0 . H4ee9) (flmod . H4ee8) (flmin . H4ee7) (flmax . H4ee6) (fllog . H4ee5) (flinteger? . H4ee4) (flinfinite? . H4ee3) (flfloor . H4ee2) (flfinite? . H4ee1) (flexpt . H4ee0) (flexp . H4edf) (fleven? . H4ede) (fldiv0-and-mod0 . H4edd) (fldiv0 . H4edc) (fldiv-and-mod . H4edb) (fldiv . H4eda) (fldenominator . H4ed9) (flcos . H4ed8) (flceiling . H4ed7) (flatan . H4ed6) (flasin . H4ed5) (flacos . H4ed4) (flabs . H4ed3) (fl>? . H4ed2) (fl>=? . H4ed1) (fl=? . H4ed0) (fl<? . H4ecf) (fl<=? . H4ece) (fl/ . H4ecd) (fl- . H4ecc) (fl+ . H4ecb) (fl* . H4eca) (fixnum->flonum . H4ec9) (&no-nans . H4de7) (&no-infinities . H4de6)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H513e '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . H500f) (string-ci-hash . H500e) (string-hash . H500d) (equal-hash . H500c) (hashtable-equivalence-function . H500b) (make-hashtable . H500a) (hashtable-hash-function . H5009) (make-eqv-hashtable . H5008) (make-eq-hashtable . H5007) (hashtable? . H5006) (hashtable-update! . H5005) (hashtable-size . H5004) (hashtable-set! . H5003) (hashtable-ref . H5002) (hashtable-mutable? . H5001) (hashtable-keys . H5000) (hashtable-entries . H4fff) (hashtable-delete! . H4ffe) (hashtable-copy . H4ffd) (hashtable-contains? . H4ffc) (hashtable-clear! . H4ffb)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H513f '(rnrs io ports) '(6) '() '() '() '((eof-object? . H4feb) (eof-object . H4fea) (current-error-port . H4fe9) (current-output-port . H4fe8) (current-input-port . H4fe7) (output-port? . H4fe6) (input-port? . H4fe5) (utf-8-codec . H4fe4) (utf-16-codec . H4fe3) (transcoder-error-handling-mode . H4fe2) (transcoder-eol-style . H4fe1) (transcoder-codec . H4fe0) (transcoded-port . H4fdf) (textual-port? . H4fde) (string->bytevector . H4fdd) (standard-output-port . H4fdc) (standard-input-port . H4fdb) (standard-error-port . H4fda) (set-port-position! . H4fd9) (put-u8 . H4fd8) (put-string . H4fd7) (put-datum . H4fd6) (put-char . H4fd5) (put-bytevector . H4fd4) (port? . H4fd3) (port-transcoder . H4fd2) (port-position . H4fd1) (port-has-set-port-position!? . H4fd0) (port-has-port-position? . H4fcf) (port-eof? . H4fce) (output-port-buffer-mode . H4fcd) (open-string-output-port . H4fcc) (open-string-input-port . H4fcb) (open-file-output-port . H4fca) (open-file-input/output-port . H4fc9) (open-file-input-port . H4fc8) (open-bytevector-output-port . H4fc7) (open-bytevector-input-port . H4fc6) (native-transcoder . H4fc5) (native-eol-style . H4fc4) (make-transcoder . H4fc3) (latin-1-codec . H4fc2) (make-i/o-write-error . H4fc1) (make-i/o-read-error . H4fc0) (make-i/o-port-error . H4fbf) (make-i/o-invalid-position-error . H4fbe) (make-i/o-filename-error . H4fbd) (make-i/o-file-protection-error . H4fbc) (make-i/o-file-is-read-only-error . H4fbb) (make-i/o-file-does-not-exist-error . H4fba) (make-i/o-file-already-exists-error . H4fb9) (make-i/o-error . H4fb8) (make-i/o-encoding-error . H4fb7) (make-i/o-decoding-error . H4fb6) (make-custom-textual-output-port . H4fb5) (make-custom-textual-input/output-port . H4fb4) (make-custom-textual-input-port . H4fb3) (make-custom-binary-output-port . H4fb2) (make-custom-binary-input/output-port . H4fb1) (make-custom-binary-input-port . H4fb0) (lookahead-u8 . H4fae) (lookahead-char . H4fad) (i/o-write-error? . H4fac) (i/o-read-error? . H4fab) (i/o-port-error? . H4faa) (i/o-invalid-position-error? . H4fa9) (i/o-filename-error? . H4fa8) (i/o-file-protection-error? . H4fa7) (i/o-file-is-read-only-error? . H4fa6) (i/o-file-does-not-exist-error? . H4fa5) (i/o-file-already-exists-error? . H4fa4) (i/o-error? . H4fa3) (i/o-error-position . H4fa2) (i/o-error-port . H4fa1) (i/o-error-filename . H4fa0) (i/o-encoding-error? . H4f9f) (i/o-encoding-error-char . H4f9e) (i/o-decoding-error? . H4f9d) (get-u8 . H4f9c) (get-string-n! . H4f9b) (get-string-n . H4f9a) (get-string-all . H4f99) (get-line . H4f98) (get-datum . H4f97) (get-char . H4f96) (get-bytevector-some . H4f95) (get-bytevector-n! . H4f94) (get-bytevector-n . H4f93) (get-bytevector-all . H4f92) (flush-output-port . H4f91) (close-port . H4f90) (call-with-string-output-port . H4f6f) (call-with-port . H4f6e) (call-with-bytevector-output-port . H4f6d) (bytevector->string . H4f6c) (buffer-mode? . H4f6b) (binary-port? . H4f6a) (&i/o-encoding . H4de5) (&i/o-decoding . H4de4) (&i/o-port . H4de3) (&i/o-file-does-not-exist . H4de2) (&i/o-file-already-exists . H4de1) (&i/o-file-is-read-only . H4de0) (&i/o-file-protection . H4ddf) (&i/o-filename . H4dde) (&i/o-invalid-position . H4ddd) (&i/o-write . H4ddc) (&i/o-read . H4ddb) (&i/o . H4dda) (error-handling-mode . H4dbf) (file-options . H4dbe) (buffer-mode . H4dbd) (eol-style . H4dbc)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5140 '(rnrs enums) '(6) '() '() '() '((make-enumeration . H4f66) (enum-set=? . H4f65) (enum-set-universe . H4f64) (enum-set-union . H4f63) (enum-set-subset? . H4f62) (enum-set-projection . H4f61) (enum-set-member? . H4f60) (enum-set-intersection . H4f5f) (enum-set-indexer . H4f5e) (enum-set-difference . H4f5d) (enum-set-constructor . H4f5c) (enum-set-complement . H4f5b) (enum-set->list . H4f5a) (define-enumeration . H4dca)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5141 '(rnrs conditions) '(6) '() '() '() '((who-condition? . H4f59) (warning? . H4f58) (violation? . H4f57) (undefined-violation? . H4f56) (syntax-violation? . H4f55) (syntax-violation-subform . H4f54) (syntax-violation-form . H4f53) (syntax-violation . H319b) (simple-conditions . H4f52) (serious-condition? . H4f51) (non-continuable-violation? . H4f50) (message-condition? . H4f4f) (make-who-condition . H4f4e) (make-warning . H4f4d) (make-violation . H4f4c) (make-undefined-violation . H4f4b) (make-syntax-violation . H4f4a) (make-serious-condition . H4f49) (make-non-continuable-violation . H4f48) (make-message-condition . H4f47) (make-lexical-violation . H4f46) (make-irritants-condition . H4f45) (make-implementation-restriction-violation . H4f44) (make-error . H4f43) (make-assertion-violation . H4f42) (lexical-violation? . H4f41) (irritants-condition? . H4f40) (implementation-restriction-violation? . H4f3f) (error? . H4f3e) (condition-who . H4f3d) (condition-predicate . H4f3c) (condition-message . H4f3b) (condition-irritants . H4f3a) (condition-accessor . H4f39) (condition . H4f38) (assertion-violation? . H4f37) (condition? . H4f36) (&undefined . H4dd9) (&syntax . H4dd8) (&lexical . H4dd7) (&implementation-restriction . H4dd6) (&non-continuable . H4dd5) (&who . H4dd4) (&irritants . H4dd3) (&assertion . H4dd2) (&violation . H4dd1) (&error . H4dd0) (&serious . H4dcf) (&warning . H4dce) (&message . H4dcd) (&condition . H4dcc) (define-condition-type . H4dcb)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5142 '(rnrs records inspection) '(6) '() '() '() '((record? . H501e) (record-type-uid . H501d) (record-type-sealed? . H501c) (record-type-parent . H501b) (record-type-opaque? . H501a) (record-type-name . H5019) (record-type-generative? . H5018) (record-type-field-names . H5017) (record-rtd . H5016) (record-field-mutable? . H5015)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5143 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . H5025) (record-predicate . H5024) (record-mutator . H5023) (record-constructor . H5022) (record-accessor . H5021) (make-record-type-descriptor . H5020) (make-record-constructor-descriptor . H501f)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5144 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . H4dc9) (parent-rtd . H4dc8) (nongenerative . H4dc7) (opaque . H4dc6) (sealed . H4dc5) (protocol . H4dc4) (parent . H4dc3) (immutable . H4dc2) (mutable . H4dc1) (fields . H4dc0) (record-constructor-descriptor . H4da0) (record-type-descriptor . H4d9f)) '() values values '#f '#f '#t '#f) (H2ccf@H2b1b@install-library 'H5145 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . H5125) (&no-nans-rtd . H5124) (&no-infinities-rcd . H5123) (&no-infinities-rtd . H5122) (&i/o-encoding-rcd . H5121) (&i/o-encoding-rtd . H5120) (&i/o-decoding-rcd . H511f) (&i/o-decoding-rtd . H511e) (&i/o-port-rcd . H511d) (&i/o-port-rtd . H511c) (&i/o-file-does-not-exist-rcd . H511b) (&i/o-file-does-not-exist-rtd . H511a) (&i/o-file-already-exists-rcd . H5119) (&i/o-file-already-exists-rtd . H5118) (&i/o-file-is-read-only-rcd . H5117) (&i/o-file-is-read-only-rtd . H5116) (&i/o-file-protection-rcd . H5115) (&i/o-file-protection-rtd . H5114) (&i/o-filename-rcd . H5113) (&i/o-filename-rtd . H5112) (&i/o-invalid-position-rcd . H5111) (&i/o-invalid-position-rtd . H5110) (&i/o-write-rcd . H510f) (&i/o-write-rtd . H510e) (&i/o-read-rcd . H510d) (&i/o-read-rtd . H510c) (&i/o-rcd . H510b) (&i/o-rtd . H510a) (&undefined-rcd . H5109) (&undefined-rtd . H5108) (&syntax-rcd . H5107) (&syntax-rtd . H5106) (&lexical-rcd . H5105) (&lexical-rtd . H5104) (&implementation-restriction-rcd . H5103) (&implementation-restriction-rtd . H5102) (&non-continuable-rcd . H5101) (&non-continuable-rtd . H5100) (&who-rcd . H50ff) (&who-rtd . H50fe) (&irritants-rcd . H50fd) (&irritants-rtd . H50fc) (&assertion-rcd . H50fb) (&assertion-rtd . H50fa) (&violation-rcd . H50f9) (&violation-rtd . H50f8) (&error-rcd . H50f7) (&error-rtd . H50f6) (&serious-rcd . H50f5) (&serious-rtd . H50f4) (&warning-rcd . H50f3) (&warning-rtd . H50f2) (&message-rcd . H50f1) (&message-rtd . H50f0) (&condition-rcd . H50ef) (&condition-rtd . H50ee) (syntax-error . H3197) (syntax-dispatch . H30bb) (pretty-print . H50ed) (eval-core . H50ec) (set-symbol-value! . H50eb) (symbol-value . H50ea) (gensym . H50e9) (void . H50e8) (load . H4c24) (interaction-environment . H31a9) (char-ready? . H50e7) (regexp? . H50e6) (read-line . H50e5) (gensym-prefix-set! . H50e4) (ungensym . H50e3) (alist->eq-hash-table . H50e2) (assoc-ref . H50e1) (print . H50e0) (format . H50df) (host-os . H50de) (library-path . H2afa) (standard-library-path . H50dd) (file-newer? . H50dc) (stat-mtime . H50db) (write-to-file . H50da) (file->list . H50d9) (file->string . H50d8) (digit->integer . H50d7) (call-with-string-input-port . H50d6) (call-with-string-io . H50d5) (string-split . H50d4) (bytevector-for-each . H50d3) (string->regexp . H50d2) (rxmatch . H50d1) (regexp-replace-all . H50d0) (hashtable-for-each . H50cf) (mosh-cache-dir . H28e4) (call-process . H50ce) (local-tz-offset . H50cd) (microseconds . H50cc) (directory-list . H50cb) (set-current-directory! . H50ca) (expand-path . H50c9) (current-directory . H50c8) (%spawn . H50c7) (%waitpid . H50c6) (simple-struct-name . H50c5) (simple-struct-set! . H50c4) (simple-struct-ref . H50c3) (make-simple-struct . H50c2) (simple-struct? . H50c1) (pointer-ref-c-int64 . H50c0) (pointer-ref-c-int32 . H50bf) (pointer-ref-c-int16 . H50be) (pointer-ref-c-int8 . H50bd) (pointer-ref-c-uint64 . H50bc) (pointer-ref-c-uint32 . H50bb) (pointer-ref-c-uint16 . H50ba) (pointer-ref-c-uint8 . H50b9) (pointer-set-c-uint64! . H50b8) (pointer-set-c-uint32! . H50b7) (pointer-set-c-uint16! . H50b6) (pointer-set-c-uint8! . H50b5) (pointer-set-c-int64! . H50b4) (pointer-set-c-int32! . H50b3) (pointer-set-c-int16! . H50b2) (pointer-set-c-int8! . H50b1) (pointer-set-c-pointer! . H50b0) (pointer-set-c-double! . H50af) (pointer-set-c-float! . H50ae) (pointer-set-c-long-long! . H50ad) (pointer-set-c-long! . H50ac) (pointer-set-c-int! . H50ab) (pointer-set-c-short! . H50aa) (pointer-set-c-char! . H50a9) (pointer-ref-c-pointer . H50a8) (pointer-ref-c-double . H50a7) (pointer-ref-c-float . H50a6) (pointer-ref-c-unsigned-long-long . H50a5) (pointer-ref-c-signed-long-long . H50a4) (pointer-ref-c-unsigned-long . H50a3) (pointer-ref-c-signed-long . H50a2) (pointer-ref-c-unsigned-int . H50a1) (pointer-ref-c-signed-int . H50a0) (pointer-ref-c-unsigned-short . H509f) (pointer-ref-c-signed-short . H509e) (pointer-ref-c-unsigned-char . H509d) (pointer-ref-c-signed-char . H509c) (pointer->integer . H509b) (integer->pointer . H509a) (pointer? . H5099) (shared-errno . H5098) (%ffi-free-c-callback-trampoline . H5097) (%ffi-make-c-callback-trampoline . H5096) (%ffi-free . H5095) (%ffi-malloc . H5094) (%ffi-supported? . H5093) (%ffi-pointer->string . H5092) (%ffi-call . H5091) (%ffi-lookup . H5090) (%ffi-open . H508f) (null-terminated-utf8->string . H508e) (null-terminated-bytevector->string . H508d) (%exec . H508c) (%fork . H508b) (%pipe . H508a) (p . H5089) (open-output-string . H5088) (get-output-string . H5087) (file-stat-ctime . H5086) (file-stat-atime . H5085) (file-stat-mtime . H5084) (file-size-in-bytes . H5083) (file-writable? . H5082) (file-executable? . H5081) (file-readable? . H5080) (file-regular? . H507f) (file-symbolic-link? . H507e) (file-directory? . H507d) (create-symbolic-link . H507c) (rename-file . H507b) (delete-directory . H507a) (create-directory . H5079) (create-mosh-cache-dir . H5078) (get-environment-variables . H5077) (current-exception-handler . H5076) (get-environment-variable . H5075) (join-wraps . H5074) (id->real-label . H5073) (same-marks? . H5072) (same-marks*? . H5071) (get-timeofday . H5070) (get-command-line . H506f) (sys-display . H506e) (whereis . H506d) (register . H506c) (vm-join! . H506b) (vm-set-value! . H506a) (vm? . H5069) (main-vm? . H5068) (vm-eval . H5067) (vm-self . H5066) (vm-start! . H5065) (make-vm . H5064) (mutex-try-lock! . H5063) (mutex-unlock! . H5062) (mutex-lock! . H5061) (mutex? . H5060) (make-mutex . H505f) (condition-variable-notify-all! . H505e) (condition-variable-notify! . H505d) (condition-variable-wait! . H505c) (make-condition-variable . H505b) (write/ss . H505a) (mosh-executable-path . H5059) (make-file-options . H5058) (source-info . H5057) (make-compiler-instruction . H5056) (make-instruction . H5055) (set-source-info! . H5054) (bignum? . H5053) (fast-equal? . H5052) (fasl-read . H5051) (fasl-write . H5050) (time-usage . H504f) (os-constant . H504e) (disasm . H504d) (make-parameter . H28e2) (socket-port . H504c) (socket-shutdown . H504b) (socket-close . H504a) (socket-send . H5049) (socket-recv! . H5048) (socket-recv . H5047) (make-server-socket . H5046) (make-client-socket . H5045) (socket-accept . H5044) (socket? . H5043) (string-upcase . H5042) (string-titlecase . H5041) (string-normalize-nfkd . H5040) (string-normalize-nfkc . H503f) (string-normalize-nfd . H503e) (string-normalize-nfc . H503d) (string-foldcase . H503c) (string-downcase . H503b) (string-ci>? . H503a) (string-ci>=? . H5039) (string-ci=? . H5038) (string-ci<? . H5037) (string-ci<=? . H5036) (char-whitespace? . H5035) (char-upper-case? . H5034) (char-title-case? . H5033) (char-numeric? . H5032) (char-lower-case? . H5031) (char-general-category . H5030) (char-upcase . H502f) (char-titlecase . H502e) (char-foldcase . H502d) (char-downcase . H502c) (char-ci>? . H502b) (char-ci>=? . H502a) (char-ci=? . H5029) (char-ci<? . H5028) (char-ci<=? . H5027) (char-alphabetic? . H5026) (make-variable-transformer . H2ee6) (identifier? . H319d) (generate-temporaries . H3189) (free-identifier=? . H318b) (syntax->datum . H31a1) (datum->syntax . H319f) (bound-identifier=? . H318d) (record-type-descriptor? . H5025) (record-predicate . H5024) (record-mutator . H5023) (record-constructor . H5022) (record-accessor . H5021) (make-record-type-descriptor . H5020) (make-record-constructor-descriptor . H501f) (record? . H501e) (record-type-uid . H501d) (record-type-sealed? . H501c) (record-type-parent . H501b) (record-type-opaque? . H501a) (record-type-name . H5019) (record-type-generative? . H5018) (record-type-field-names . H5017) (record-rtd . H5016) (record-field-mutable? . H5015) (delete-file . H5014) (file-exists? . H5013) (vector-sort! . H5012) (vector-sort . H5011) (list-sort . H5010) (symbol-hash . H500f) (string-ci-hash . H500e) (string-hash . H500d) (equal-hash . H500c) (hashtable-equivalence-function . H500b) (make-hashtable . H500a) (hashtable-hash-function . H5009) (make-eqv-hashtable . H5008) (make-eq-hashtable . H5007) (hashtable? . H5006) (hashtable-update! . H5005) (hashtable-size . H5004) (hashtable-set! . H5003) (hashtable-ref . H5002) (hashtable-mutable? . H5001) (hashtable-keys . H5000) (hashtable-entries . H4fff) (hashtable-delete! . H4ffe) (hashtable-copy . H4ffd) (hashtable-contains? . H4ffc) (hashtable-clear! . H4ffb) (call-with-output-file . H4ffa) (call-with-input-file . H4ff9) (write-char . H4ff8) (write . H4ff7) (with-output-to-file . H4ff6) (with-input-from-file . H4ff5) (read-char . H4ff4) (read . H4ff3) (peek-char . H4ff2) (open-output-file . H4ff1) (open-input-file . H4ff0) (newline . H4fef) (display . H4fee) (close-output-port . H4fed) (close-input-port . H4fec) (eof-object? . H4feb) (eof-object . H4fea) (current-error-port . H4fe9) (current-output-port . H4fe8) (current-input-port . H4fe7) (output-port? . H4fe6) (input-port? . H4fe5) (utf-8-codec . H4fe4) (utf-16-codec . H4fe3) (transcoder-error-handling-mode . H4fe2) (transcoder-eol-style . H4fe1) (transcoder-codec . H4fe0) (transcoded-port . H4fdf) (textual-port? . H4fde) (string->bytevector . H4fdd) (standard-output-port . H4fdc) (standard-input-port . H4fdb) (standard-error-port . H4fda) (set-port-position! . H4fd9) (put-u8 . H4fd8) (put-string . H4fd7) (put-datum . H4fd6) (put-char . H4fd5) (put-bytevector . H4fd4) (port? . H4fd3) (port-transcoder . H4fd2) (port-position . H4fd1) (port-has-set-port-position!? . H4fd0) (port-has-port-position? . H4fcf) (port-eof? . H4fce) (output-port-buffer-mode . H4fcd) (open-string-output-port . H4fcc) (open-string-input-port . H4fcb) (open-file-output-port . H4fca) (open-file-input/output-port . H4fc9) (open-file-input-port . H4fc8) (open-bytevector-output-port . H4fc7) (open-bytevector-input-port . H4fc6) (native-transcoder . H4fc5) (native-eol-style . H4fc4) (make-transcoder . H4fc3) (latin-1-codec . H4fc2) (make-i/o-write-error . H4fc1) (make-i/o-read-error . H4fc0) (make-i/o-port-error . H4fbf) (make-i/o-invalid-position-error . H4fbe) (make-i/o-filename-error . H4fbd) (make-i/o-file-protection-error . H4fbc) (make-i/o-file-is-read-only-error . H4fbb) (make-i/o-file-does-not-exist-error . H4fba) (make-i/o-file-already-exists-error . H4fb9) (make-i/o-error . H4fb8) (make-i/o-encoding-error . H4fb7) (make-i/o-decoding-error . H4fb6) (make-custom-textual-output-port . H4fb5) (make-custom-textual-input/output-port . H4fb4) (make-custom-textual-input-port . H4fb3) (make-custom-binary-output-port . H4fb2) (make-custom-binary-input/output-port . H4fb1) (make-custom-binary-input-port . H4fb0) (make-bytevector . H4faf) (lookahead-u8 . H4fae) (lookahead-char . H4fad) (i/o-write-error? . H4fac) (i/o-read-error? . H4fab) (i/o-port-error? . H4faa) (i/o-invalid-position-error? . H4fa9) (i/o-filename-error? . H4fa8) (i/o-file-protection-error? . H4fa7) (i/o-file-is-read-only-error? . H4fa6) (i/o-file-does-not-exist-error? . H4fa5) (i/o-file-already-exists-error? . H4fa4) (i/o-error? . H4fa3) (i/o-error-position . H4fa2) (i/o-error-port . H4fa1) (i/o-error-filename . H4fa0) (i/o-encoding-error? . H4f9f) (i/o-encoding-error-char . H4f9e) (i/o-decoding-error? . H4f9d) (get-u8 . H4f9c) (get-string-n! . H4f9b) (get-string-n . H4f9a) (get-string-all . H4f99) (get-line . H4f98) (get-datum . H4f97) (get-char . H4f96) (get-bytevector-some . H4f95) (get-bytevector-n! . H4f94) (get-bytevector-n . H4f93) (get-bytevector-all . H4f92) (flush-output-port . H4f91) (close-port . H4f90) (scheme-report-environment . H3177) (quotient . H4f8f) (null-environment . H3175) (remainder . H4f8e) (modulo . H4f8d) (inexact->exact . H4f8c) (force . H4f8b) (exact->inexact . H4f8a) (make-promise . H4f89) (exit . H4f88) (command-line . H4c1e) (string-fill! . H4f87) (string-set! . H4f86) (set-cdr! . H4f85) (set-car! . H4f84) (remove . H4f83) (remv . H4f82) (remp . H4f81) (remq . H4f80) (partition . H4f7f) (memv . H4f7e) (memq . H4f7d) (memp . H4f7c) (member . H4f7b) (exists . H4f7a) (for-all . H4f79) (fold-right . H4f78) (fold-left . H4f77) (find . H4f76) (filter . H4f75) (cons* . H4f74) (assv . H4f73) (assq . H4f72) (assp . H4f71) (assoc . H4f70) (call-with-string-output-port . H4f6f) (call-with-port . H4f6e) (call-with-bytevector-output-port . H4f6d) (bytevector->string . H4f6c) (buffer-mode? . H4f6b) (binary-port? . H4f6a) (with-exception-handler . H4f69) (raise-continuable . H4f68) (raise . H4f67) (eval . H317b) (environment . H3173) (make-enumeration . H4f66) (enum-set=? . H4f65) (enum-set-universe . H4f64) (enum-set-union . H4f63) (enum-set-subset? . H4f62) (enum-set-projection . H4f61) (enum-set-member? . H4f60) (enum-set-intersection . H4f5f) (enum-set-indexer . H4f5e) (enum-set-difference . H4f5d) (enum-set-constructor . H4f5c) (enum-set-complement . H4f5b) (enum-set->list . H4f5a) (who-condition? . H4f59) (warning? . H4f58) (violation? . H4f57) (undefined-violation? . H4f56) (syntax-violation? . H4f55) (syntax-violation-subform . H4f54) (syntax-violation-form . H4f53) (syntax-violation . H319b) (simple-conditions . H4f52) (serious-condition? . H4f51) (non-continuable-violation? . H4f50) (message-condition? . H4f4f) (make-who-condition . H4f4e) (make-warning . H4f4d) (make-violation . H4f4c) (make-undefined-violation . H4f4b) (make-syntax-violation . H4f4a) (make-serious-condition . H4f49) (make-non-continuable-violation . H4f48) (make-message-condition . H4f47) (make-lexical-violation . H4f46) (make-irritants-condition . H4f45) (make-implementation-restriction-violation . H4f44) (make-error . H4f43) (make-assertion-violation . H4f42) (lexical-violation? . H4f41) (irritants-condition? . H4f40) (implementation-restriction-violation? . H4f3f) (error? . H4f3e) (condition-who . H4f3d) (condition-predicate . H4f3c) (condition-message . H4f3b) (condition-irritants . H4f3a) (condition-accessor . H4f39) (condition . H4f38) (assertion-violation? . H4f37) (condition? . H4f36) (utf32->string . H4f35) (utf16->string . H4f34) (utf8->string . H4f33) (uint-list->bytevector . H4f32) (u8-list->bytevector . H4f31) (string->utf8 . H4f30) (string->utf32 . H4f2f) (string->utf16 . H4f2e) (sint-list->bytevector . H4f2d) (native-endianness . H4f2c) (bytevector? . H4f2b) (bytevector=? . H4f2a) (bytevector-uint-set! . H4f29) (bytevector-uint-ref . H4f28) (bytevector-u8-set! . H4f27) (bytevector-u8-ref . H4f26) (bytevector-u64-set! . H4f25) (bytevector-u64-ref . H4f24) (bytevector-u64-native-set! . H4f23) (bytevector-u64-native-ref . H4f22) (bytevector-u32-set! . H4f21) (bytevector-u32-ref . H4f20) (bytevector-u32-native-set! . H4f1f) (bytevector-u32-native-ref . H4f1e) (bytevector-u16-set! . H4f1d) (bytevector-u16-ref . H4f1c) (bytevector-u16-native-set! . H4f1b) (bytevector-u16-native-ref . H4f1a) (bytevector-sint-set! . H4f19) (bytevector-sint-ref . H4f18) (bytevector-s8-set! . H4f17) (bytevector-s8-ref . H4f16) (bytevector-s64-set! . H4f15) (bytevector-s64-ref . H4f14) (bytevector-s64-native-set! . H4f13) (bytevector-s64-native-ref . H4f12) (bytevector-s32-set! . H4f11) (bytevector-s32-ref . H4f10) (bytevector-s32-native-set! . H4f0f) (bytevector-s32-native-ref . H4f0e) (bytevector-s16-set! . H4f0d) (bytevector-s16-ref . H4f0c) (bytevector-s16-native-set! . H4f0b) (bytevector-s16-native-ref . H4f0a) (bytevector-length . H4f09) (bytevector-ieee-single-ref . H4f08) (bytevector-ieee-single-set! . H4f07) (bytevector-ieee-single-native-set! . H4f06) (bytevector-ieee-single-native-ref . H4f05) (bytevector-ieee-double-set! . H4f04) (bytevector-ieee-double-ref . H4f03) (bytevector-ieee-double-native-set! . H4f02) (bytevector-ieee-double-native-ref . H4f01) (bytevector-fill! . H4f00) (bytevector-copy! . H4eff) (bytevector-copy . H4efe) (bytevector->uint-list . H4efd) (bytevector->u8-list . H4efc) (bytevector->sint-list . H4efb) (no-nans-violation? . H4efa) (no-infinities-violation? . H4ef9) (make-no-nans-violation . H4ef8) (make-no-infinities-violation . H4ef7) (real->flonum . H4ef6) (flzero? . H4ef5) (fltruncate . H4ef4) (fltan . H4ef3) (flsqrt . H4ef2) (flsin . H4ef1) (flround . H4ef0) (flpositive? . H4eef) (flonum? . H4eee) (flodd? . H4eed) (flnumerator . H4eec) (flnegative? . H4eeb) (flnan? . H4eea) (flmod0 . H4ee9) (flmod . H4ee8) (flmin . H4ee7) (flmax . H4ee6) (fllog . H4ee5) (flinteger? . H4ee4) (flinfinite? . H4ee3) (flfloor . H4ee2) (flfinite? . H4ee1) (flexpt . H4ee0) (flexp . H4edf) (fleven? . H4ede) (fldiv0-and-mod0 . H4edd) (fldiv0 . H4edc) (fldiv-and-mod . H4edb) (fldiv . H4eda) (fldenominator . H4ed9) (flcos . H4ed8) (flceiling . H4ed7) (flatan . H4ed6) (flasin . H4ed5) (flacos . H4ed4) (flabs . H4ed3) (fl>? . H4ed2) (fl>=? . H4ed1) (fl=? . H4ed0) (fl<? . H4ecf) (fl<=? . H4ece) (fl/ . H4ecd) (fl- . H4ecc) (fl+ . H4ecb) (fl* . H4eca) (fixnum->flonum . H4ec9) (fxzero? . H4ec8) (fxxor . H4ec7) (fxrotate-bit-field . H4ec6) (fxreverse-bit-field . H4ec5) (fxpositive? . H4ec4) (fxodd? . H4ec3) (fxnot . H4ec2) (fxnegative? . H4ec1) (fxmod0 . H4ec0) (fxmod . H4ebf) (fxmin . H4ebe) (fxmax . H4ebd) (fxlength . H4ebc) (fxior . H4ebb) (fxif . H4eba) (fxfirst-bit-set . H4eb9) (fxeven? . H4eb8) (fxdiv0-and-mod0 . H4eb7) (fxdiv0 . H4eb6) (fxdiv-and-mod . H4eb5) (fxdiv . H4eb4) (fxcopy-bit-field . H4eb3) (fxcopy-bit . H4eb2) (fxbit-set? . H4eb1) (fxbit-field . H4eb0) (fxbit-count . H4eaf) (fxarithmetic-shift-right . H4eae) (fxarithmetic-shift-left . H4ead) (fxarithmetic-shift . H4eac) (fxand . H4eab) (fx>? . H4eaa) (fx>=? . H4ea9) (fx=? . H4ea8) (fx<? . H4ea7) (fx<=? . H4ea6) (fx-/carry . H4ea5) (fx- . H4ea4) (fx+/carry . H4ea3) (fx+ . H4ea2) (fx*/carry . H4ea1) (fx* . H4ea0) (greatest-fixnum . H4e9f) (least-fixnum . H4e9e) (fixnum-width . H4e9d) (fixnum? . H4e9c) (bitwise-rotate-bit-field . H4e9b) (bitwise-reverse-bit-field . H4e9a) (bitwise-length . H4e99) (bitwise-if . H4e98) (bitwise-first-bit-set . H4e97) (bitwise-copy-bit-field . H4e96) (bitwise-copy-bit . H4e95) (bitwise-bit-set? . H4e94) (bitwise-bit-field . H4e93) (bitwise-bit-count . H4e92) (bitwise-xor . H4e91) (bitwise-ior . H4e90) (bitwise-and . H4e8f) (bitwise-not . H4e8e) (bitwise-arithmetic-shift-right . H4e8d) (bitwise-arithmetic-shift-left . H4e8c) (bitwise-arithmetic-shift . H4e8b) (zero? . H4e8a) (vector? . H4e89) (vector-set! . H4e88) (vector-ref . H4e87) (vector-map . H4e86) (vector-length . H4e85) (vector-for-each . H4e84) (vector-fill! . H4e83) (vector->list . H4e82) (vector . H4e81) (values . H4e80) (truncate . H4e7f) (tan . H4e7e) (symbol? . H4e7d) (symbol=? . H4e7c) (symbol->string . H4e7b) (substring . H4e7a) (string? . H4e79) (string>? . H4e78) (string>=? . H4e77) (string=? . H4e76) (string<? . H4e75) (string<=? . H4e74) (string-ref . H4e73) (string-length . H4e72) (string-for-each . H4e71) (string-copy . H4e70) (string-append . H4e6f) (string->symbol . H4e6e) (string->number . H4e6d) (string->list . H4e6c) (string . H4e6b) (sqrt . H4e6a) (sin . H4e69) (round . H4e68) (reverse . H4e67) (real? . H4e66) (real-valued? . H4e65) (real-part . H4e64) (rationalize . H4e63) (rational? . H4e62) (rational-valued? . H4e61) (procedure? . H4e60) (positive? . H4e5f) (pair? . H4e5e) (odd? . H4e5d) (numerator . H4e5c) (number? . H4e5b) (number->string . H4e5a) (null? . H4e59) (not . H4e58) (negative? . H4e57) (nan? . H4e56) (min . H4e55) (max . H4e54) (map . H4e53) (make-vector . H4e52) (make-string . H4e51) (make-rectangular . H4e50) (make-polar . H4e4f) (magnitude . H4e4e) (log . H4e4d) (list? . H4e4c) (list-tail . H4e4b) (list-ref . H4e4a) (list->vector . H4e49) (list->string . H4e48) (list . H4e47) (length . H4e46) (lcm . H4e45) (integer? . H4e44) (integer-valued? . H4e43) (integer->char . H4e42) (infinite? . H4e41) (inexact? . H4e40) (inexact . H4e3f) (imag-part . H4e3e) (gcd . H4e3d) (for-each . H4e3c) (floor . H4e3b) (finite? . H4e3a) (expt . H4e39) (exp . H4e38) (exact? . H4e37) (exact-integer-sqrt . H4e36) (exact . H4e35) (even? . H4e34) (error . H4e33) (eqv? . H4e32) (equal? . H4e31) (eq? . H4e30) (dynamic-wind . H4e2f) (div0-and-mod0 . H4e2e) (mod0 . H4e2d) (div0 . H4e2c) (div-and-mod . H4e2b) (mod . H4e2a) (div . H4e29) (denominator . H4e28) (cos . H4e27) (cons . H4e26) (complex? . H4e25) (char? . H4e24) (char>? . H4e23) (char>=? . H4e22) (char=? . H4e21) (char<? . H4e20) (char<=? . H4e1f) (char->integer . H4e1e) (ceiling . H4e1d) (call-with-values . H4e1c) (call/cc . H4e1b) (call-with-current-continuation . H4e1a) (cddddr . H4e19) (cdddar . H4e18) (cddadr . H4e17) (cddaar . H4e16) (cdaddr . H4e15) (cdadar . H4e14) (cdaadr . H4e13) (cdaaar . H4e12) (cadddr . H4e11) (caddar . H4e10) (cadadr . H4e0f) (cadaar . H4e0e) (caaddr . H4e0d) (caadar . H4e0c) (caaadr . H4e0b) (caaaar . H4e0a) (cdddr . H4e09) (cddar . H4e08) (cdadr . H4e07) (cdaar . H4e06) (caddr . H4e05) (cadar . H4e04) (caadr . H4e03) (caaar . H4e02) (cddr . H4e01) (cdar . H4e00) (cadr . H4dff) (caar . H4dfe) (cdr . H4dfd) (car . H4dfc) (boolean? . H4dfb) (boolean=? . H4dfa) (atan . H4df9) (assertion-violation . H4df8) (assertion-error . H3195) (asin . H4df7) (apply . H4df6) (append . H4df5) (angle . H4df4) (acos . H4df3) (abs . H4df2) (/ . H4df1) (* . H4df0) (- . H4def) (+ . H4dee) (>= . H4ded) (> . H4dec) (= . H4deb) (<= . H4dea) (< . H4de9) (library . H4de8) (&no-nans . H4de7) (&no-infinities . H4de6) (&i/o-encoding . H4de5) (&i/o-decoding . H4de4) (&i/o-port . H4de3) (&i/o-file-does-not-exist . H4de2) (&i/o-file-already-exists . H4de1) (&i/o-file-is-read-only . H4de0) (&i/o-file-protection . H4ddf) (&i/o-filename . H4dde) (&i/o-invalid-position . H4ddd) (&i/o-write . H4ddc) (&i/o-read . H4ddb) (&i/o . H4dda) (&undefined . H4dd9) (&syntax . H4dd8) (&lexical . H4dd7) (&implementation-restriction . H4dd6) (&non-continuable . H4dd5) (&who . H4dd4) (&irritants . H4dd3) (&assertion . H4dd2) (&violation . H4dd1) (&error . H4dd0) (&serious . H4dcf) (&warning . H4dce) (&message . H4dcd) (&condition . H4dcc) (define-condition-type . H4dcb) (define-enumeration . H4dca) (define-record-type . H4dc9) (parent-rtd . H4dc8) (nongenerative . H4dc7) (opaque . H4dc6) (sealed . H4dc5) (protocol . H4dc4) (parent . H4dc3) (immutable . H4dc2) (mutable . H4dc1) (fields . H4dc0) (error-handling-mode . H4dbf) (file-options . H4dbe) (buffer-mode . H4dbd) (eol-style . H4dbc) (guard . H4dbb) (trace-define . H4dba) (trace-lambda . H4db9) (unsyntax-splicing . H4db8) (unsyntax . H4db7) (unquote-splicing . H4db6) (unquote . H4db5) (_ . H4db4) (else . H4db3) (=> . H4db2) (... . H4db1) (assert . H4db0) (endianness . H4daf) (delay . H4dae) (time . H4dad) (do . H4dac) (cond . H4dab) (let* . H4daa) (let*-values . H4da9) (let-values . H4da8) (identifier-syntax . H4da7) (with-syntax . H4da6) (quasisyntax . H4da5) (quasiquote . H4da4) (syntax-rules . H4da3) (include . H4da2) (define-struct . H4da1) (record-constructor-descriptor . H4da0) (record-type-descriptor . H4d9f) (case . H4d9e) (parameterize . H4d9d) (unless . H4d9c) (when . H4d9b) (or . H4d9a) (and . H4d99) (if . H4d98) (let . H4d97) (letrec* . H4d96) (letrec . H4d95) (type-descriptor . H4d94) (case-lambda . H4d93) (lambda . H4d92) (syntax . H4d91) (syntax-case . H4d90) (quote . H4d8f) (foreign-call . H4d8e) (letrec-syntax . H4d8d) (let-syntax . H4d8c) (set! . H4d8b) (import . H4d8a) (begin . H4d89) (module . H4d88) (define-syntax . H4d87) (define . H4d86)) '((H5125 core-prim . &no-nans-rcd) (H5124 core-prim . &no-nans-rtd) (H5123 core-prim . &no-infinities-rcd) (H5122 core-prim . &no-infinities-rtd) (H5121 core-prim . &i/o-encoding-rcd) (H5120 core-prim . &i/o-encoding-rtd) (H511f core-prim . &i/o-decoding-rcd) (H511e core-prim . &i/o-decoding-rtd) (H511d core-prim . &i/o-port-rcd) (H511c core-prim . &i/o-port-rtd) (H511b core-prim . &i/o-file-does-not-exist-rcd) (H511a core-prim . &i/o-file-does-not-exist-rtd) (H5119 core-prim . &i/o-file-already-exists-rcd) (H5118 core-prim . &i/o-file-already-exists-rtd) (H5117 core-prim . &i/o-file-is-read-only-rcd) (H5116 core-prim . &i/o-file-is-read-only-rtd) (H5115 core-prim . &i/o-file-protection-rcd) (H5114 core-prim . &i/o-file-protection-rtd) (H5113 core-prim . &i/o-filename-rcd) (H5112 core-prim . &i/o-filename-rtd) (H5111 core-prim . &i/o-invalid-position-rcd) (H5110 core-prim . &i/o-invalid-position-rtd) (H510f core-prim . &i/o-write-rcd) (H510e core-prim . &i/o-write-rtd) (H510d core-prim . &i/o-read-rcd) (H510c core-prim . &i/o-read-rtd) (H510b core-prim . &i/o-rcd) (H510a core-prim . &i/o-rtd) (H5109 core-prim . &undefined-rcd) (H5108 core-prim . &undefined-rtd) (H5107 core-prim . &syntax-rcd) (H5106 core-prim . &syntax-rtd) (H5105 core-prim . &lexical-rcd) (H5104 core-prim . &lexical-rtd) (H5103 core-prim . &implementation-restriction-rcd) (H5102 core-prim . &implementation-restriction-rtd) (H5101 core-prim . &non-continuable-rcd) (H5100 core-prim . &non-continuable-rtd) (H50ff core-prim . &who-rcd) (H50fe core-prim . &who-rtd) (H50fd core-prim . &irritants-rcd) (H50fc core-prim . &irritants-rtd) (H50fb core-prim . &assertion-rcd) (H50fa core-prim . &assertion-rtd) (H50f9 core-prim . &violation-rcd) (H50f8 core-prim . &violation-rtd) (H50f7 core-prim . &error-rcd) (H50f6 core-prim . &error-rtd) (H50f5 core-prim . &serious-rcd) (H50f4 core-prim . &serious-rtd) (H50f3 core-prim . &warning-rcd) (H50f2 core-prim . &warning-rtd) (H50f1 core-prim . &message-rcd) (H50f0 core-prim . &message-rtd) (H50ef core-prim . &condition-rcd) (H50ee core-prim . &condition-rtd) (H3197 core-prim . syntax-error) (H30bb core-prim . syntax-dispatch) (H50ed core-prim . pretty-print) (H50ec core-prim . eval-core) (H50eb core-prim . set-symbol-value!) (H50ea core-prim . symbol-value) (H50e9 core-prim . gensym) (H50e8 core-prim . void) (H4c24 core-prim . load) (H31a9 core-prim . interaction-environment) (H50e7 core-prim . char-ready?) (H50e6 core-prim . regexp?) (H50e5 core-prim . read-line) (H50e4 core-prim . gensym-prefix-set!) (H50e3 core-prim . ungensym) (H50e2 core-prim . alist->eq-hash-table) (H50e1 core-prim . assoc-ref) (H50e0 core-prim . print) (H50df core-prim . format) (H50de core-prim . host-os) (H2afa core-prim . library-path) (H50dd core-prim . standard-library-path) (H50dc core-prim . file-newer?) (H50db core-prim . stat-mtime) (H50da core-prim . write-to-file) (H50d9 core-prim . file->list) (H50d8 core-prim . file->string) (H50d7 core-prim . digit->integer) (H50d6 core-prim . call-with-string-input-port) (H50d5 core-prim . call-with-string-io) (H50d4 core-prim . string-split) (H50d3 core-prim . bytevector-for-each) (H50d2 core-prim . string->regexp) (H50d1 core-prim . rxmatch) (H50d0 core-prim . regexp-replace-all) (H50cf core-prim . hashtable-for-each) (H28e4 core-prim . mosh-cache-dir) (H50ce core-prim . call-process) (H50cd core-prim . local-tz-offset) (H50cc core-prim . microseconds) (H50cb core-prim . directory-list) (H50ca core-prim . set-current-directory!) (H50c9 core-prim . expand-path) (H50c8 core-prim . current-directory) (H50c7 core-prim . %spawn) (H50c6 core-prim . %waitpid) (H50c5 core-prim . simple-struct-name) (H50c4 core-prim . simple-struct-set!) (H50c3 core-prim . simple-struct-ref) (H50c2 core-prim . make-simple-struct) (H50c1 core-prim . simple-struct?) (H50c0 core-prim . pointer-ref-c-int64) (H50bf core-prim . pointer-ref-c-int32) (H50be core-prim . pointer-ref-c-int16) (H50bd core-prim . pointer-ref-c-int8) (H50bc core-prim . pointer-ref-c-uint64) (H50bb core-prim . pointer-ref-c-uint32) (H50ba core-prim . pointer-ref-c-uint16) (H50b9 core-prim . pointer-ref-c-uint8) (H50b8 core-prim . pointer-set-c-uint64!) (H50b7 core-prim . pointer-set-c-uint32!) (H50b6 core-prim . pointer-set-c-uint16!) (H50b5 core-prim . pointer-set-c-uint8!) (H50b4 core-prim . pointer-set-c-int64!) (H50b3 core-prim . pointer-set-c-int32!) (H50b2 core-prim . pointer-set-c-int16!) (H50b1 core-prim . pointer-set-c-int8!) (H50b0 core-prim . pointer-set-c-pointer!) (H50af core-prim . pointer-set-c-double!) (H50ae core-prim . pointer-set-c-float!) (H50ad core-prim . pointer-set-c-long-long!) (H50ac core-prim . pointer-set-c-long!) (H50ab core-prim . pointer-set-c-int!) (H50aa core-prim . pointer-set-c-short!) (H50a9 core-prim . pointer-set-c-char!) (H50a8 core-prim . pointer-ref-c-pointer) (H50a7 core-prim . pointer-ref-c-double) (H50a6 core-prim . pointer-ref-c-float) (H50a5 core-prim . pointer-ref-c-unsigned-long-long) (H50a4 core-prim . pointer-ref-c-signed-long-long) (H50a3 core-prim . pointer-ref-c-unsigned-long) (H50a2 core-prim . pointer-ref-c-signed-long) (H50a1 core-prim . pointer-ref-c-unsigned-int) (H50a0 core-prim . pointer-ref-c-signed-int) (H509f core-prim . pointer-ref-c-unsigned-short) (H509e core-prim . pointer-ref-c-signed-short) (H509d core-prim . pointer-ref-c-unsigned-char) (H509c core-prim . pointer-ref-c-signed-char) (H509b core-prim . pointer->integer) (H509a core-prim . integer->pointer) (H5099 core-prim . pointer?) (H5098 core-prim . shared-errno) (H5097 core-prim . %ffi-free-c-callback-trampoline) (H5096 core-prim . %ffi-make-c-callback-trampoline) (H5095 core-prim . %ffi-free) (H5094 core-prim . %ffi-malloc) (H5093 core-prim . %ffi-supported?) (H5092 core-prim . %ffi-pointer->string) (H5091 core-prim . %ffi-call) (H5090 core-prim . %ffi-lookup) (H508f core-prim . %ffi-open) (H508e core-prim . null-terminated-utf8->string) (H508d core-prim . null-terminated-bytevector->string) (H508c core-prim . %exec) (H508b core-prim . %fork) (H508a core-prim . %pipe) (H5089 core-prim . p) (H5088 core-prim . open-output-string) (H5087 core-prim . get-output-string) (H5086 core-prim . file-stat-ctime) (H5085 core-prim . file-stat-atime) (H5084 core-prim . file-stat-mtime) (H5083 core-prim . file-size-in-bytes) (H5082 core-prim . file-writable?) (H5081 core-prim . file-executable?) (H5080 core-prim . file-readable?) (H507f core-prim . file-regular?) (H507e core-prim . file-symbolic-link?) (H507d core-prim . file-directory?) (H507c core-prim . create-symbolic-link) (H507b core-prim . rename-file) (H507a core-prim . delete-directory) (H5079 core-prim . create-directory) (H5078 core-prim . create-mosh-cache-dir) (H5077 core-prim . get-environment-variables) (H5076 core-prim . current-exception-handler) (H5075 core-prim . get-environment-variable) (H5074 core-prim . join-wraps) (H5073 core-prim . id->real-label) (H5072 core-prim . same-marks?) (H5071 core-prim . same-marks*?) (H5070 core-prim . get-timeofday) (H506f core-prim . get-command-line) (H506e core-prim . sys-display) (H506d core-prim . whereis) (H506c core-prim . register) (H506b core-prim . vm-join!) (H506a core-prim . vm-set-value!) (H5069 core-prim . vm?) (H5068 core-prim . main-vm?) (H5067 core-prim . vm-eval) (H5066 core-prim . vm-self) (H5065 core-prim . vm-start!) (H5064 core-prim . make-vm) (H5063 core-prim . mutex-try-lock!) (H5062 core-prim . mutex-unlock!) (H5061 core-prim . mutex-lock!) (H5060 core-prim . mutex?) (H505f core-prim . make-mutex) (H505e core-prim . condition-variable-notify-all!) (H505d core-prim . condition-variable-notify!) (H505c core-prim . condition-variable-wait!) (H505b core-prim . make-condition-variable) (H505a core-prim . write/ss) (H5059 core-prim . mosh-executable-path) (H5058 core-prim . make-file-options) (H5057 core-prim . source-info) (H5056 core-prim . make-compiler-instruction) (H5055 core-prim . make-instruction) (H5054 core-prim . set-source-info!) (H5053 core-prim . bignum?) (H5052 core-prim . fast-equal?) (H5051 core-prim . fasl-read) (H5050 core-prim . fasl-write) (H504f core-prim . time-usage) (H504e core-prim . os-constant) (H504d core-prim . disasm) (H28e2 core-prim . make-parameter) (H504c core-prim . socket-port) (H504b core-prim . socket-shutdown) (H504a core-prim . socket-close) (H5049 core-prim . socket-send) (H5048 core-prim . socket-recv!) (H5047 core-prim . socket-recv) (H5046 core-prim . make-server-socket) (H5045 core-prim . make-client-socket) (H5044 core-prim . socket-accept) (H5043 core-prim . socket?) (H5042 core-prim . string-upcase) (H5041 core-prim . string-titlecase) (H5040 core-prim . string-normalize-nfkd) (H503f core-prim . string-normalize-nfkc) (H503e core-prim . string-normalize-nfd) (H503d core-prim . string-normalize-nfc) (H503c core-prim . string-foldcase) (H503b core-prim . string-downcase) (H503a core-prim . string-ci>?) (H5039 core-prim . string-ci>=?) (H5038 core-prim . string-ci=?) (H5037 core-prim . string-ci<?) (H5036 core-prim . string-ci<=?) (H5035 core-prim . char-whitespace?) (H5034 core-prim . char-upper-case?) (H5033 core-prim . char-title-case?) (H5032 core-prim . char-numeric?) (H5031 core-prim . char-lower-case?) (H5030 core-prim . char-general-category) (H502f core-prim . char-upcase) (H502e core-prim . char-titlecase) (H502d core-prim . char-foldcase) (H502c core-prim . char-downcase) (H502b core-prim . char-ci>?) (H502a core-prim . char-ci>=?) (H5029 core-prim . char-ci=?) (H5028 core-prim . char-ci<?) (H5027 core-prim . char-ci<=?) (H5026 core-prim . char-alphabetic?) (H2ee6 core-prim . make-variable-transformer) (H319d core-prim . identifier?) (H3189 core-prim . generate-temporaries) (H318b core-prim . free-identifier=?) (H31a1 core-prim . syntax->datum) (H319f core-prim . datum->syntax) (H318d core-prim . bound-identifier=?) (H5025 core-prim . record-type-descriptor?) (H5024 core-prim . record-predicate) (H5023 core-prim . record-mutator) (H5022 core-prim . record-constructor) (H5021 core-prim . record-accessor) (H5020 core-prim . make-record-type-descriptor) (H501f core-prim . make-record-constructor-descriptor) (H501e core-prim . record?) (H501d core-prim . record-type-uid) (H501c core-prim . record-type-sealed?) (H501b core-prim . record-type-parent) (H501a core-prim . record-type-opaque?) (H5019 core-prim . record-type-name) (H5018 core-prim . record-type-generative?) (H5017 core-prim . record-type-field-names) (H5016 core-prim . record-rtd) (H5015 core-prim . record-field-mutable?) (H5014 core-prim . delete-file) (H5013 core-prim . file-exists?) (H5012 core-prim . vector-sort!) (H5011 core-prim . vector-sort) (H5010 core-prim . list-sort) (H500f core-prim . symbol-hash) (H500e core-prim . string-ci-hash) (H500d core-prim . string-hash) (H500c core-prim . equal-hash) (H500b core-prim . hashtable-equivalence-function) (H500a core-prim . make-hashtable) (H5009 core-prim . hashtable-hash-function) (H5008 core-prim . make-eqv-hashtable) (H5007 core-prim . make-eq-hashtable) (H5006 core-prim . hashtable?) (H5005 core-prim . hashtable-update!) (H5004 core-prim . hashtable-size) (H5003 core-prim . hashtable-set!) (H5002 core-prim . hashtable-ref) (H5001 core-prim . hashtable-mutable?) (H5000 core-prim . hashtable-keys) (H4fff core-prim . hashtable-entries) (H4ffe core-prim . hashtable-delete!) (H4ffd core-prim . hashtable-copy) (H4ffc core-prim . hashtable-contains?) (H4ffb core-prim . hashtable-clear!) (H4ffa core-prim . call-with-output-file) (H4ff9 core-prim . call-with-input-file) (H4ff8 core-prim . write-char) (H4ff7 core-prim . write) (H4ff6 core-prim . with-output-to-file) (H4ff5 core-prim . with-input-from-file) (H4ff4 core-prim . read-char) (H4ff3 core-prim . read) (H4ff2 core-prim . peek-char) (H4ff1 core-prim . open-output-file) (H4ff0 core-prim . open-input-file) (H4fef core-prim . newline) (H4fee core-prim . display) (H4fed core-prim . close-output-port) (H4fec core-prim . close-input-port) (H4feb core-prim . eof-object?) (H4fea core-prim . eof-object) (H4fe9 core-prim . current-error-port) (H4fe8 core-prim . current-output-port) (H4fe7 core-prim . current-input-port) (H4fe6 core-prim . output-port?) (H4fe5 core-prim . input-port?) (H4fe4 core-prim . utf-8-codec) (H4fe3 core-prim . utf-16-codec) (H4fe2 core-prim . transcoder-error-handling-mode) (H4fe1 core-prim . transcoder-eol-style) (H4fe0 core-prim . transcoder-codec) (H4fdf core-prim . transcoded-port) (H4fde core-prim . textual-port?) (H4fdd core-prim . string->bytevector) (H4fdc core-prim . standard-output-port) (H4fdb core-prim . standard-input-port) (H4fda core-prim . standard-error-port) (H4fd9 core-prim . set-port-position!) (H4fd8 core-prim . put-u8) (H4fd7 core-prim . put-string) (H4fd6 core-prim . put-datum) (H4fd5 core-prim . put-char) (H4fd4 core-prim . put-bytevector) (H4fd3 core-prim . port?) (H4fd2 core-prim . port-transcoder) (H4fd1 core-prim . port-position) (H4fd0 core-prim . port-has-set-port-position!?) (H4fcf core-prim . port-has-port-position?) (H4fce core-prim . port-eof?) (H4fcd core-prim . output-port-buffer-mode) (H4fcc core-prim . open-string-output-port) (H4fcb core-prim . open-string-input-port) (H4fca core-prim . open-file-output-port) (H4fc9 core-prim . open-file-input/output-port) (H4fc8 core-prim . open-file-input-port) (H4fc7 core-prim . open-bytevector-output-port) (H4fc6 core-prim . open-bytevector-input-port) (H4fc5 core-prim . native-transcoder) (H4fc4 core-prim . native-eol-style) (H4fc3 core-prim . make-transcoder) (H4fc2 core-prim . latin-1-codec) (H4fc1 core-prim . make-i/o-write-error) (H4fc0 core-prim . make-i/o-read-error) (H4fbf core-prim . make-i/o-port-error) (H4fbe core-prim . make-i/o-invalid-position-error) (H4fbd core-prim . make-i/o-filename-error) (H4fbc core-prim . make-i/o-file-protection-error) (H4fbb core-prim . make-i/o-file-is-read-only-error) (H4fba core-prim . make-i/o-file-does-not-exist-error) (H4fb9 core-prim . make-i/o-file-already-exists-error) (H4fb8 core-prim . make-i/o-error) (H4fb7 core-prim . make-i/o-encoding-error) (H4fb6 core-prim . make-i/o-decoding-error) (H4fb5 core-prim . make-custom-textual-output-port) (H4fb4 core-prim . make-custom-textual-input/output-port) (H4fb3 core-prim . make-custom-textual-input-port) (H4fb2 core-prim . make-custom-binary-output-port) (H4fb1 core-prim . make-custom-binary-input/output-port) (H4fb0 core-prim . make-custom-binary-input-port) (H4faf core-prim . make-bytevector) (H4fae core-prim . lookahead-u8) (H4fad core-prim . lookahead-char) (H4fac core-prim . i/o-write-error?) (H4fab core-prim . i/o-read-error?) (H4faa core-prim . i/o-port-error?) (H4fa9 core-prim . i/o-invalid-position-error?) (H4fa8 core-prim . i/o-filename-error?) (H4fa7 core-prim . i/o-file-protection-error?) (H4fa6 core-prim . i/o-file-is-read-only-error?) (H4fa5 core-prim . i/o-file-does-not-exist-error?) (H4fa4 core-prim . i/o-file-already-exists-error?) (H4fa3 core-prim . i/o-error?) (H4fa2 core-prim . i/o-error-position) (H4fa1 core-prim . i/o-error-port) (H4fa0 core-prim . i/o-error-filename) (H4f9f core-prim . i/o-encoding-error?) (H4f9e core-prim . i/o-encoding-error-char) (H4f9d core-prim . i/o-decoding-error?) (H4f9c core-prim . get-u8) (H4f9b core-prim . get-string-n!) (H4f9a core-prim . get-string-n) (H4f99 core-prim . get-string-all) (H4f98 core-prim . get-line) (H4f97 core-prim . get-datum) (H4f96 core-prim . get-char) (H4f95 core-prim . get-bytevector-some) (H4f94 core-prim . get-bytevector-n!) (H4f93 core-prim . get-bytevector-n) (H4f92 core-prim . get-bytevector-all) (H4f91 core-prim . flush-output-port) (H4f90 core-prim . close-port) (H3177 core-prim . scheme-report-environment) (H4f8f core-prim . quotient) (H3175 core-prim . null-environment) (H4f8e core-prim . remainder) (H4f8d core-prim . modulo) (H4f8c core-prim . inexact->exact) (H4f8b core-prim . force) (H4f8a core-prim . exact->inexact) (H4f89 core-prim . make-promise) (H4f88 core-prim . exit) (H4c1e core-prim . command-line) (H4f87 core-prim . string-fill!) (H4f86 core-prim . string-set!) (H4f85 core-prim . set-cdr!) (H4f84 core-prim . set-car!) (H4f83 core-prim . remove) (H4f82 core-prim . remv) (H4f81 core-prim . remp) (H4f80 core-prim . remq) (H4f7f core-prim . partition) (H4f7e core-prim . memv) (H4f7d core-prim . memq) (H4f7c core-prim . memp) (H4f7b core-prim . member) (H4f7a core-prim . exists) (H4f79 core-prim . for-all) (H4f78 core-prim . fold-right) (H4f77 core-prim . fold-left) (H4f76 core-prim . find) (H4f75 core-prim . filter) (H4f74 core-prim . cons*) (H4f73 core-prim . assv) (H4f72 core-prim . assq) (H4f71 core-prim . assp) (H4f70 core-prim . assoc) (H4f6f core-prim . call-with-string-output-port) (H4f6e core-prim . call-with-port) (H4f6d core-prim . call-with-bytevector-output-port) (H4f6c core-prim . bytevector->string) (H4f6b core-prim . buffer-mode?) (H4f6a core-prim . binary-port?) (H4f69 core-prim . with-exception-handler) (H4f68 core-prim . raise-continuable) (H4f67 core-prim . raise) (H317b core-prim . eval) (H3173 core-prim . environment) (H4f66 core-prim . make-enumeration) (H4f65 core-prim . enum-set=?) (H4f64 core-prim . enum-set-universe) (H4f63 core-prim . enum-set-union) (H4f62 core-prim . enum-set-subset?) (H4f61 core-prim . enum-set-projection) (H4f60 core-prim . enum-set-member?) (H4f5f core-prim . enum-set-intersection) (H4f5e core-prim . enum-set-indexer) (H4f5d core-prim . enum-set-difference) (H4f5c core-prim . enum-set-constructor) (H4f5b core-prim . enum-set-complement) (H4f5a core-prim . enum-set->list) (H4f59 core-prim . who-condition?) (H4f58 core-prim . warning?) (H4f57 core-prim . violation?) (H4f56 core-prim . undefined-violation?) (H4f55 core-prim . syntax-violation?) (H4f54 core-prim . syntax-violation-subform) (H4f53 core-prim . syntax-violation-form) (H319b core-prim . syntax-violation) (H4f52 core-prim . simple-conditions) (H4f51 core-prim . serious-condition?) (H4f50 core-prim . non-continuable-violation?) (H4f4f core-prim . message-condition?) (H4f4e core-prim . make-who-condition) (H4f4d core-prim . make-warning) (H4f4c core-prim . make-violation) (H4f4b core-prim . make-undefined-violation) (H4f4a core-prim . make-syntax-violation) (H4f49 core-prim . make-serious-condition) (H4f48 core-prim . make-non-continuable-violation) (H4f47 core-prim . make-message-condition) (H4f46 core-prim . make-lexical-violation) (H4f45 core-prim . make-irritants-condition) (H4f44 core-prim . make-implementation-restriction-violation) (H4f43 core-prim . make-error) (H4f42 core-prim . make-assertion-violation) (H4f41 core-prim . lexical-violation?) (H4f40 core-prim . irritants-condition?) (H4f3f core-prim . implementation-restriction-violation?) (H4f3e core-prim . error?) (H4f3d core-prim . condition-who) (H4f3c core-prim . condition-predicate) (H4f3b core-prim . condition-message) (H4f3a core-prim . condition-irritants) (H4f39 core-prim . condition-accessor) (H4f38 core-prim . condition) (H4f37 core-prim . assertion-violation?) (H4f36 core-prim . condition?) (H4f35 core-prim . utf32->string) (H4f34 core-prim . utf16->string) (H4f33 core-prim . utf8->string) (H4f32 core-prim . uint-list->bytevector) (H4f31 core-prim . u8-list->bytevector) (H4f30 core-prim . string->utf8) (H4f2f core-prim . string->utf32) (H4f2e core-prim . string->utf16) (H4f2d core-prim . sint-list->bytevector) (H4f2c core-prim . native-endianness) (H4f2b core-prim . bytevector?) (H4f2a core-prim . bytevector=?) (H4f29 core-prim . bytevector-uint-set!) (H4f28 core-prim . bytevector-uint-ref) (H4f27 core-prim . bytevector-u8-set!) (H4f26 core-prim . bytevector-u8-ref) (H4f25 core-prim . bytevector-u64-set!) (H4f24 core-prim . bytevector-u64-ref) (H4f23 core-prim . bytevector-u64-native-set!) (H4f22 core-prim . bytevector-u64-native-ref) (H4f21 core-prim . bytevector-u32-set!) (H4f20 core-prim . bytevector-u32-ref) (H4f1f core-prim . bytevector-u32-native-set!) (H4f1e core-prim . bytevector-u32-native-ref) (H4f1d core-prim . bytevector-u16-set!) (H4f1c core-prim . bytevector-u16-ref) (H4f1b core-prim . bytevector-u16-native-set!) (H4f1a core-prim . bytevector-u16-native-ref) (H4f19 core-prim . bytevector-sint-set!) (H4f18 core-prim . bytevector-sint-ref) (H4f17 core-prim . bytevector-s8-set!) (H4f16 core-prim . bytevector-s8-ref) (H4f15 core-prim . bytevector-s64-set!) (H4f14 core-prim . bytevector-s64-ref) (H4f13 core-prim . bytevector-s64-native-set!) (H4f12 core-prim . bytevector-s64-native-ref) (H4f11 core-prim . bytevector-s32-set!) (H4f10 core-prim . bytevector-s32-ref) (H4f0f core-prim . bytevector-s32-native-set!) (H4f0e core-prim . bytevector-s32-native-ref) (H4f0d core-prim . bytevector-s16-set!) (H4f0c core-prim . bytevector-s16-ref) (H4f0b core-prim . bytevector-s16-native-set!) (H4f0a core-prim . bytevector-s16-native-ref) (H4f09 core-prim . bytevector-length) (H4f08 core-prim . bytevector-ieee-single-ref) (H4f07 core-prim . bytevector-ieee-single-set!) (H4f06 core-prim . bytevector-ieee-single-native-set!) (H4f05 core-prim . bytevector-ieee-single-native-ref) (H4f04 core-prim . bytevector-ieee-double-set!) (H4f03 core-prim . bytevector-ieee-double-ref) (H4f02 core-prim . bytevector-ieee-double-native-set!) (H4f01 core-prim . bytevector-ieee-double-native-ref) (H4f00 core-prim . bytevector-fill!) (H4eff core-prim . bytevector-copy!) (H4efe core-prim . bytevector-copy) (H4efd core-prim . bytevector->uint-list) (H4efc core-prim . bytevector->u8-list) (H4efb core-prim . bytevector->sint-list) (H4efa core-prim . no-nans-violation?) (H4ef9 core-prim . no-infinities-violation?) (H4ef8 core-prim . make-no-nans-violation) (H4ef7 core-prim . make-no-infinities-violation) (H4ef6 core-prim . real->flonum) (H4ef5 core-prim . flzero?) (H4ef4 core-prim . fltruncate) (H4ef3 core-prim . fltan) (H4ef2 core-prim . flsqrt) (H4ef1 core-prim . flsin) (H4ef0 core-prim . flround) (H4eef core-prim . flpositive?) (H4eee core-prim . flonum?) (H4eed core-prim . flodd?) (H4eec core-prim . flnumerator) (H4eeb core-prim . flnegative?) (H4eea core-prim . flnan?) (H4ee9 core-prim . flmod0) (H4ee8 core-prim . flmod) (H4ee7 core-prim . flmin) (H4ee6 core-prim . flmax) (H4ee5 core-prim . fllog) (H4ee4 core-prim . flinteger?) (H4ee3 core-prim . flinfinite?) (H4ee2 core-prim . flfloor) (H4ee1 core-prim . flfinite?) (H4ee0 core-prim . flexpt) (H4edf core-prim . flexp) (H4ede core-prim . fleven?) (H4edd core-prim . fldiv0-and-mod0) (H4edc core-prim . fldiv0) (H4edb core-prim . fldiv-and-mod) (H4eda core-prim . fldiv) (H4ed9 core-prim . fldenominator) (H4ed8 core-prim . flcos) (H4ed7 core-prim . flceiling) (H4ed6 core-prim . flatan) (H4ed5 core-prim . flasin) (H4ed4 core-prim . flacos) (H4ed3 core-prim . flabs) (H4ed2 core-prim . fl>?) (H4ed1 core-prim . fl>=?) (H4ed0 core-prim . fl=?) (H4ecf core-prim . fl<?) (H4ece core-prim . fl<=?) (H4ecd core-prim . fl/) (H4ecc core-prim . fl-) (H4ecb core-prim . fl+) (H4eca core-prim . fl*) (H4ec9 core-prim . fixnum->flonum) (H4ec8 core-prim . fxzero?) (H4ec7 core-prim . fxxor) (H4ec6 core-prim . fxrotate-bit-field) (H4ec5 core-prim . fxreverse-bit-field) (H4ec4 core-prim . fxpositive?) (H4ec3 core-prim . fxodd?) (H4ec2 core-prim . fxnot) (H4ec1 core-prim . fxnegative?) (H4ec0 core-prim . fxmod0) (H4ebf core-prim . fxmod) (H4ebe core-prim . fxmin) (H4ebd core-prim . fxmax) (H4ebc core-prim . fxlength) (H4ebb core-prim . fxior) (H4eba core-prim . fxif) (H4eb9 core-prim . fxfirst-bit-set) (H4eb8 core-prim . fxeven?) (H4eb7 core-prim . fxdiv0-and-mod0) (H4eb6 core-prim . fxdiv0) (H4eb5 core-prim . fxdiv-and-mod) (H4eb4 core-prim . fxdiv) (H4eb3 core-prim . fxcopy-bit-field) (H4eb2 core-prim . fxcopy-bit) (H4eb1 core-prim . fxbit-set?) (H4eb0 core-prim . fxbit-field) (H4eaf core-prim . fxbit-count) (H4eae core-prim . fxarithmetic-shift-right) (H4ead core-prim . fxarithmetic-shift-left) (H4eac core-prim . fxarithmetic-shift) (H4eab core-prim . fxand) (H4eaa core-prim . fx>?) (H4ea9 core-prim . fx>=?) (H4ea8 core-prim . fx=?) (H4ea7 core-prim . fx<?) (H4ea6 core-prim . fx<=?) (H4ea5 core-prim . fx-/carry) (H4ea4 core-prim . fx-) (H4ea3 core-prim . fx+/carry) (H4ea2 core-prim . fx+) (H4ea1 core-prim . fx*/carry) (H4ea0 core-prim . fx*) (H4e9f core-prim . greatest-fixnum) (H4e9e core-prim . least-fixnum) (H4e9d core-prim . fixnum-width) (H4e9c core-prim . fixnum?) (H4e9b core-prim . bitwise-rotate-bit-field) (H4e9a core-prim . bitwise-reverse-bit-field) (H4e99 core-prim . bitwise-length) (H4e98 core-prim . bitwise-if) (H4e97 core-prim . bitwise-first-bit-set) (H4e96 core-prim . bitwise-copy-bit-field) (H4e95 core-prim . bitwise-copy-bit) (H4e94 core-prim . bitwise-bit-set?) (H4e93 core-prim . bitwise-bit-field) (H4e92 core-prim . bitwise-bit-count) (H4e91 core-prim . bitwise-xor) (H4e90 core-prim . bitwise-ior) (H4e8f core-prim . bitwise-and) (H4e8e core-prim . bitwise-not) (H4e8d core-prim . bitwise-arithmetic-shift-right) (H4e8c core-prim . bitwise-arithmetic-shift-left) (H4e8b core-prim . bitwise-arithmetic-shift) (H4e8a core-prim . zero?) (H4e89 core-prim . vector?) (H4e88 core-prim . vector-set!) (H4e87 core-prim . vector-ref) (H4e86 core-prim . vector-map) (H4e85 core-prim . vector-length) (H4e84 core-prim . vector-for-each) (H4e83 core-prim . vector-fill!) (H4e82 core-prim . vector->list) (H4e81 core-prim . vector) (H4e80 core-prim . values) (H4e7f core-prim . truncate) (H4e7e core-prim . tan) (H4e7d core-prim . symbol?) (H4e7c core-prim . symbol=?) (H4e7b core-prim . symbol->string) (H4e7a core-prim . substring) (H4e79 core-prim . string?) (H4e78 core-prim . string>?) (H4e77 core-prim . string>=?) (H4e76 core-prim . string=?) (H4e75 core-prim . string<?) (H4e74 core-prim . string<=?) (H4e73 core-prim . string-ref) (H4e72 core-prim . string-length) (H4e71 core-prim . string-for-each) (H4e70 core-prim . string-copy) (H4e6f core-prim . string-append) (H4e6e core-prim . string->symbol) (H4e6d core-prim . string->number) (H4e6c core-prim . string->list) (H4e6b core-prim . string) (H4e6a core-prim . sqrt) (H4e69 core-prim . sin) (H4e68 core-prim . round) (H4e67 core-prim . reverse) (H4e66 core-prim . real?) (H4e65 core-prim . real-valued?) (H4e64 core-prim . real-part) (H4e63 core-prim . rationalize) (H4e62 core-prim . rational?) (H4e61 core-prim . rational-valued?) (H4e60 core-prim . procedure?) (H4e5f core-prim . positive?) (H4e5e core-prim . pair?) (H4e5d core-prim . odd?) (H4e5c core-prim . numerator) (H4e5b core-prim . number?) (H4e5a core-prim . number->string) (H4e59 core-prim . null?) (H4e58 core-prim . not) (H4e57 core-prim . negative?) (H4e56 core-prim . nan?) (H4e55 core-prim . min) (H4e54 core-prim . max) (H4e53 core-prim . map) (H4e52 core-prim . make-vector) (H4e51 core-prim . make-string) (H4e50 core-prim . make-rectangular) (H4e4f core-prim . make-polar) (H4e4e core-prim . magnitude) (H4e4d core-prim . log) (H4e4c core-prim . list?) (H4e4b core-prim . list-tail) (H4e4a core-prim . list-ref) (H4e49 core-prim . list->vector) (H4e48 core-prim . list->string) (H4e47 core-prim . list) (H4e46 core-prim . length) (H4e45 core-prim . lcm) (H4e44 core-prim . integer?) (H4e43 core-prim . integer-valued?) (H4e42 core-prim . integer->char) (H4e41 core-prim . infinite?) (H4e40 core-prim . inexact?) (H4e3f core-prim . inexact) (H4e3e core-prim . imag-part) (H4e3d core-prim . gcd) (H4e3c core-prim . for-each) (H4e3b core-prim . floor) (H4e3a core-prim . finite?) (H4e39 core-prim . expt) (H4e38 core-prim . exp) (H4e37 core-prim . exact?) (H4e36 core-prim . exact-integer-sqrt) (H4e35 core-prim . exact) (H4e34 core-prim . even?) (H4e33 core-prim . error) (H4e32 core-prim . eqv?) (H4e31 core-prim . equal?) (H4e30 core-prim . eq?) (H4e2f core-prim . dynamic-wind) (H4e2e core-prim . div0-and-mod0) (H4e2d core-prim . mod0) (H4e2c core-prim . div0) (H4e2b core-prim . div-and-mod) (H4e2a core-prim . mod) (H4e29 core-prim . div) (H4e28 core-prim . denominator) (H4e27 core-prim . cos) (H4e26 core-prim . cons) (H4e25 core-prim . complex?) (H4e24 core-prim . char?) (H4e23 core-prim . char>?) (H4e22 core-prim . char>=?) (H4e21 core-prim . char=?) (H4e20 core-prim . char<?) (H4e1f core-prim . char<=?) (H4e1e core-prim . char->integer) (H4e1d core-prim . ceiling) (H4e1c core-prim . call-with-values) (H4e1b core-prim . call/cc) (H4e1a core-prim . call-with-current-continuation) (H4e19 core-prim . cddddr) (H4e18 core-prim . cdddar) (H4e17 core-prim . cddadr) (H4e16 core-prim . cddaar) (H4e15 core-prim . cdaddr) (H4e14 core-prim . cdadar) (H4e13 core-prim . cdaadr) (H4e12 core-prim . cdaaar) (H4e11 core-prim . cadddr) (H4e10 core-prim . caddar) (H4e0f core-prim . cadadr) (H4e0e core-prim . cadaar) (H4e0d core-prim . caaddr) (H4e0c core-prim . caadar) (H4e0b core-prim . caaadr) (H4e0a core-prim . caaaar) (H4e09 core-prim . cdddr) (H4e08 core-prim . cddar) (H4e07 core-prim . cdadr) (H4e06 core-prim . cdaar) (H4e05 core-prim . caddr) (H4e04 core-prim . cadar) (H4e03 core-prim . caadr) (H4e02 core-prim . caaar) (H4e01 core-prim . cddr) (H4e00 core-prim . cdar) (H4dff core-prim . cadr) (H4dfe core-prim . caar) (H4dfd core-prim . cdr) (H4dfc core-prim . car) (H4dfb core-prim . boolean?) (H4dfa core-prim . boolean=?) (H4df9 core-prim . atan) (H4df8 core-prim . assertion-violation) (H3195 core-prim . assertion-error) (H4df7 core-prim . asin) (H4df6 core-prim . apply) (H4df5 core-prim . append) (H4df4 core-prim . angle) (H4df3 core-prim . acos) (H4df2 core-prim . abs) (H4df1 core-prim . /) (H4df0 core-prim . *) (H4def core-prim . -) (H4dee core-prim . +) (H4ded core-prim . >=) (H4dec core-prim . >) (H4deb core-prim . =) (H4dea core-prim . <=) (H4de9 core-prim . <) (H4de8 core-prim . library) (H4de7 $core-rtd &no-nans-rtd &no-nans-rcd) (H4de6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (H4de5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (H4de4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (H4de3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (H4de2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (H4de1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (H4de0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (H4ddf $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (H4dde $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (H4ddd $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (H4ddc $core-rtd &i/o-write-rtd &i/o-write-rcd) (H4ddb $core-rtd &i/o-read-rtd &i/o-read-rcd) (H4dda $core-rtd &i/o-rtd &i/o-rcd) (H4dd9 $core-rtd &undefined-rtd &undefined-rcd) (H4dd8 $core-rtd &syntax-rtd &syntax-rcd) (H4dd7 $core-rtd &lexical-rtd &lexical-rcd) (H4dd6 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (H4dd5 $core-rtd &non-continuable-rtd &non-continuable-rcd) (H4dd4 $core-rtd &who-rtd &who-rcd) (H4dd3 $core-rtd &irritants-rtd &irritants-rcd) (H4dd2 $core-rtd &assertion-rtd &assertion-rcd) (H4dd1 $core-rtd &violation-rtd &violation-rcd) (H4dd0 $core-rtd &error-rtd &error-rcd) (H4dcf $core-rtd &serious-rtd &serious-rcd) (H4dce $core-rtd &warning-rtd &warning-rcd) (H4dcd $core-rtd &message-rtd &message-rcd) (H4dcc $core-rtd &condition-rtd &condition-rcd) (H4dcb macro . define-condition-type) (H4dca macro . define-enumeration) (H4dc9 macro . define-record-type) (H4dc8 macro . parent-rtd) (H4dc7 macro . nongenerative) (H4dc6 macro . opaque) (H4dc5 macro . sealed) (H4dc4 macro . protocol) (H4dc3 macro . parent) (H4dc2 macro . immutable) (H4dc1 macro . mutable) (H4dc0 macro . fields) (H4dbf macro . error-handling-mode) (H4dbe macro . file-options) (H4dbd macro . buffer-mode) (H4dbc macro . eol-style) (H4dbb macro . guard) (H4dba macro . trace-define) (H4db9 macro . trace-lambda) (H4db8 macro . unsyntax-splicing) (H4db7 macro . unsyntax) (H4db6 macro . unquote-splicing) (H4db5 macro . unquote) (H4db4 macro . _) (H4db3 macro . else) (H4db2 macro . =>) (H4db1 macro . ...) (H4db0 macro . assert) (H4daf macro . endianness) (H4dae macro . delay) (H4dad macro . time) (H4dac macro . do) (H4dab macro . cond) (H4daa macro . let*) (H4da9 macro . let*-values) (H4da8 macro . let-values) (H4da7 macro . identifier-syntax) (H4da6 macro . with-syntax) (H4da5 macro . quasisyntax) (H4da4 macro . quasiquote) (H4da3 macro . syntax-rules) (H4da2 macro . include) (H4da1 macro . define-struct) (H4da0 core-macro . record-constructor-descriptor) (H4d9f core-macro . record-type-descriptor) (H4d9e macro . case) (H4d9d macro . parameterize) (H4d9c macro . unless) (H4d9b macro . when) (H4d9a core-macro . or) (H4d99 core-macro . and) (H4d98 core-macro . if) (H4d97 core-macro . let) (H4d96 core-macro . letrec*) (H4d95 core-macro . letrec) (H4d94 core-macro . type-descriptor) (H4d93 core-macro . case-lambda) (H4d92 core-macro . lambda) (H4d91 core-macro . syntax) (H4d90 core-macro . syntax-case) (H4d8f core-macro . quote) (H4d8e core-macro . foreign-call) (H4d8d letrec-syntax) (H4d8c let-syntax) (H4d8b set!) (H4d8a import) (H4d89 begin) (H4d88 module) (H4d87 define-syntax) (H4d86 define)) values values '#f '#f '#f '#f) (H2ccf@H2b1b@install-library 'H5146 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . H50ed) (eval-core . H50ec) (set-symbol-value! . H50eb) (symbol-value . H50ea) (gensym . H50e9) (void . H50e8)) '() values values '#f '#f '#f '#f) (H2ccf@H2b1b@install-library 'H5147 '(mosh) '() '() '() '() '((set-symbol-value! . H50eb) (symbol-value . H50ea) (regexp? . H50e6) (read-line . H50e5) (ungensym . H50e3) (alist->eq-hash-table . H50e2) (assoc-ref . H50e1) (print . H50e0) (format . H50df) (host-os . H50de) (library-path . H2afa) (standard-library-path . H50dd) (file-newer? . H50dc) (stat-mtime . H50db) (digit->integer . H50d7) (call-with-string-input-port . H50d6) (call-with-string-io . H50d5) (string-split . H50d4) (bytevector-for-each . H50d3) (string->regexp . H50d2) (rxmatch . H50d1) (regexp-replace-all . H50d0) (hashtable-for-each . H50cf) (set-current-directory! . H50ca) (expand-path . H50c9) (current-directory . H50c8) (p . H5089) (get-timeofday . H5070) (get-command-line . H506f) (sys-display . H506e) (whereis . H506d) (register . H506c) (vm-join! . H506b) (vm-set-value! . H506a) (vm? . H5069) (main-vm? . H5068) (vm-eval . H5067) (vm-self . H5066) (vm-start! . H5065) (make-vm . H5064) (mutex-try-lock! . H5063) (mutex-unlock! . H5062) (mutex-lock! . H5061) (mutex? . H5060) (make-mutex . H505f) (condition-variable-notify-all! . H505e) (condition-variable-notify! . H505d) (condition-variable-wait! . H505c) (make-condition-variable . H505b) (write/ss . H505a) (mosh-executable-path . H5059) (make-file-options . H5058) (source-info . H5057) (make-compiler-instruction . H5056) (make-instruction . H5055) (set-source-info! . H5054) (bignum? . H5053) (fast-equal? . H5052) (fasl-read . H5051) (fasl-write . H5050) (time-usage . H504f) (os-constant . H504e) (time . H4dad) (include . H4da2)) '() values values '#f '#f '#f '#f) (H2ccf@H2b1b@install-library 'H5148 '(system) '() '() '() '() '((gensym-prefix-set! . H50e4) (write-to-file . H50da) (file->list . H50d9) (file->string . H50d8) (mosh-cache-dir . H28e4) (call-process . H50ce) (local-tz-offset . H50cd) (microseconds . H50cc) (directory-list . H50cb) (expand-path . H50c9) (%spawn . H50c7) (%waitpid . H50c6) (simple-struct-name . H50c5) (simple-struct-set! . H50c4) (simple-struct-ref . H50c3) (make-simple-struct . H50c2) (simple-struct? . H50c1) (pointer-ref-c-int64 . H50c0) (pointer-ref-c-int32 . H50bf) (pointer-ref-c-int16 . H50be) (pointer-ref-c-int8 . H50bd) (pointer-ref-c-uint64 . H50bc) (pointer-ref-c-uint32 . H50bb) (pointer-ref-c-uint16 . H50ba) (pointer-ref-c-uint8 . H50b9) (pointer-set-c-uint64! . H50b8) (pointer-set-c-uint32! . H50b7) (pointer-set-c-uint16! . H50b6) (pointer-set-c-uint8! . H50b5) (pointer-set-c-int64! . H50b4) (pointer-set-c-int32! . H50b3) (pointer-set-c-int16! . H50b2) (pointer-set-c-int8! . H50b1) (pointer-set-c-pointer! . H50b0) (pointer-set-c-double! . H50af) (pointer-set-c-float! . H50ae) (pointer-set-c-long-long! . H50ad) (pointer-set-c-long! . H50ac) (pointer-set-c-int! . H50ab) (pointer-set-c-short! . H50aa) (pointer-set-c-char! . H50a9) (pointer-ref-c-pointer . H50a8) (pointer-ref-c-double . H50a7) (pointer-ref-c-float . H50a6) (pointer-ref-c-unsigned-long-long . H50a5) (pointer-ref-c-signed-long-long . H50a4) (pointer-ref-c-unsigned-long . H50a3) (pointer-ref-c-signed-long . H50a2) (pointer-ref-c-unsigned-int . H50a1) (pointer-ref-c-signed-int . H50a0) (pointer-ref-c-unsigned-short . H509f) (pointer-ref-c-signed-short . H509e) (pointer-ref-c-unsigned-char . H509d) (pointer-ref-c-signed-char . H509c) (pointer->integer . H509b) (integer->pointer . H509a) (pointer? . H5099) (shared-errno . H5098) (%ffi-free-c-callback-trampoline . H5097) (%ffi-make-c-callback-trampoline . H5096) (%ffi-free . H5095) (%ffi-malloc . H5094) (%ffi-supported? . H5093) (%ffi-pointer->string . H5092) (%ffi-call . H5091) (%ffi-lookup . H5090) (%ffi-open . H508f) (null-terminated-utf8->string . H508e) (null-terminated-bytevector->string . H508d) (%exec . H508c) (%fork . H508b) (%pipe . H508a) (open-output-string . H5088) (get-output-string . H5087) (file-stat-ctime . H5086) (file-stat-atime . H5085) (file-stat-mtime . H5084) (file-size-in-bytes . H5083) (file-writable? . H5082) (file-executable? . H5081) (file-readable? . H5080) (file-regular? . H507f) (file-symbolic-link? . H507e) (file-directory? . H507d) (create-symbolic-link . H507c) (rename-file . H507b) (delete-directory . H507a) (create-directory . H5079) (create-mosh-cache-dir . H5078) (get-environment-variables . H5077) (current-exception-handler . H5076) (get-environment-variable . H5075) (join-wraps . H5074) (id->real-label . H5073) (same-marks? . H5072) (same-marks*? . H5071) (disasm . H504d) (make-parameter . H28e2) (socket-port . H504c) (socket-shutdown . H504b) (socket-close . H504a) (socket-send . H5049) (socket-recv! . H5048) (socket-recv . H5047) (make-server-socket . H5046) (make-client-socket . H5045) (socket-accept . H5044) (socket? . H5043) (parameterize . H4d9d)) '() values values '#f '#f '#f '#f)))
(begin (set! H4c09@ref (unspecified)) (set! H4c0b@x* (unspecified)) (set! H4c0d@add-library-path! (unspecified)) (set! H4c0f@parse-and-add-library-path (unspecified)) (set! H4c11@for-each-with-index (unspecified)) (set! H4c13@rpad (unspecified)) (set! H4c15@condition-printer (unspecified)) (set! H4c17@record->field-alist (unspecified)) (set! H4c19@map-with-index (unspecified)) (set! H4c1b@repl (unspecified)) (set! H4c1d@trace-printer (unspecified)) (set! H4c1f@command-line (unspecified)) (set! H4c21@local-library-path (unspecified)) (set! H4c23@load/args (unspecified)) (set! H4c25@load (unspecified)) (set! H4c27@ironscheme-build (unspecified)) (set! H4c29@eval-top-level (unspecified)) (set! H4c2b@compile-system-libraries (unspecified)) (set! H4c2d@compile (unspecified)) (set! H4c2f@compile->closure (unspecified)) (set! H4c31@pre-compile-r6rs-file (unspecified)) (set! H4c33@load-r6rs-top-level (unspecified)) (set! H4c35@load-r6rs-top-level-sexp (unspecified)) (set! H4c37@prefix-inc (unspecified)) (set! H4c39@prefix-inc! (unspecified)) (set! H4c09@ref (lambda (H4c74@rtd H4c75@i H4c76@x) (let ((H4c7a@val ((record-accessor H4c74@rtd H4c75@i) H4c76@x))) (if (symbol? H4c7a@val) (ungensym H4c7a@val) H4c7a@val)))) (set! H4d6c@H4c09@ref H4c09@ref) (set! H4c0b@x* '()) (set! H4d6d@H4c0b@x* H4c0b@x*) (set! H4c0d@add-library-path! (lambda (H4c7c@path) (H2cbf@H2afb@library-path (append (H2cbf@H2afb@library-path) (list H4c7c@path))))) (set! H4d6e@H4c0d@add-library-path! H4c0d@add-library-path!) (set! H4c0f@parse-and-add-library-path (lambda (H4c7e@paths H4c7f@message) (letrec* ((H4c83@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((H4c84@t H4c7e@paths)) (if H4c84@t ((lambda (H4c86@paths) (for-each (lambda (H4c88@path) (if (file-exists? H4c88@path) (H4c0d@add-library-path! (expand-path H4c88@path)) (format (current-error-port) H4c7f@message H4c88@path))) (string-split H4c86@paths H4c83@separator))) H4c84@t) (void)))))) (set! H4d6f@H4c0f@parse-and-add-library-path H4c0f@parse-and-add-library-path) (set! H4c11@for-each-with-index (lambda (H4c8a@proc H4c8b@lst) (letrec ((H4c8e@loop (lambda (H4c90@i H4c91@lst) (if (null? H4c91@lst) (if '#f '#f (void)) (begin (H4c8a@proc H4c90@i (car H4c91@lst)) (H4c8e@loop (+ H4c90@i '1) (cdr H4c91@lst))))))) (H4c8e@loop '1 H4c8b@lst)))) (set! H4d70@H4c11@for-each-with-index H4c11@for-each-with-index) (set! H4c13@rpad (lambda (H4c94@str H4c95@pad H4c96@n) (let ((H4c9a@rest (- H4c96@n (string-length (format '"~w" H4c94@str))))) (let H4ca0@loop ((H4c9c@rest H4c9a@rest) (H4c9d@ret (format '"~w" H4c94@str))) (if (<= H4c9c@rest '0) H4c9d@ret (H4ca0@loop (- H4c9c@rest '1) (string-append H4c9d@ret H4c95@pad))))))) (set! H4d71@H4c13@rpad H4c13@rpad) (set! H4c15@condition-printer (lambda (H4ca2@e H4ca3@port) (letrec* ((H4ca7@max-condition-len (apply max (map (lambda (H4cb8@c) (string-length (symbol->string (record-type-name (record-rtd H4cb8@c))))) (simple-conditions H4ca2@e))))) (begin (display '" Condition components:\n" H4ca3@port) (H4c11@for-each-with-index (lambda (H4ca8@i H4ca9@x) (let ((H4cac@rtd (record-rtd H4ca9@x)) (H4cad@fields-alist (H4c17@record->field-alist H4ca9@x))) (begin (format H4ca3@port '" ~d. ~a" H4ca8@i (H4c13@rpad (symbol->string (record-type-name H4cac@rtd)) '" " H4ca7@max-condition-len)) (if (null? H4cad@fields-alist) (newline H4ca3@port) (void)) (let H4cb4@loop ((H4cb0@first '#t) (H4cb1@fields-alist H4cad@fields-alist)) (if (null? H4cb1@fields-alist) '() (let ((H4cb6@field (car H4cb1@fields-alist))) (begin (if (not H4cb0@first) (display (H4c13@rpad '"" '" " (+ '4 H4ca7@max-condition-len)) H4ca3@port) (void)) (display '"       " H4ca3@port) (display (car H4cb6@field) H4ca3@port) (display '": " H4ca3@port) (write (cdr H4cb6@field) H4ca3@port) (newline H4ca3@port) (H4cb4@loop '#f (cdr H4cb1@fields-alist))))))))) (simple-conditions H4ca2@e)))))) (set! H4d72@H4c15@condition-printer H4c15@condition-printer) (set! H4c17@record->field-alist (lambda (H4cba@r) (letrec* ((H4cbd@ref (lambda (H4cc8@rtd H4cc9@i H4cca@x) (let ((H4cce@val ((record-accessor H4cc8@rtd H4cc9@i) H4cca@x))) (if (symbol? H4cce@val) (ungensym H4cce@val) H4cce@val))))) (let H4cc2@loop ((H4cbe@ret '()) (H4cbf@rtd (record-rtd H4cba@r))) (if H4cbf@rtd (H4cc2@loop (append H4cbe@ret (H4c19@map-with-index (lambda (H4cc4@i H4cc5@field) (cons H4cc5@field (H4cbd@ref H4cbf@rtd H4cc4@i H4cba@r))) (vector->list (record-type-field-names H4cbf@rtd)))) (record-type-parent H4cbf@rtd)) H4cbe@ret))))) (set! H4d73@H4c17@record->field-alist H4c17@record->field-alist) (set! H4c19@map-with-index (lambda (H4cd0@proc H4cd1@lst) (let H4cda@loop ((H4cd4@i '0) (H4cd5@lst H4cd1@lst) (H4cd6@ret '())) (if (null? H4cd5@lst) (reverse H4cd6@ret) (H4cda@loop (+ H4cd4@i '1) (cdr H4cd5@lst) (cons (H4cd0@proc H4cd4@i (car H4cd5@lst)) H4cd6@ret)))))) (set! H4d74@H4c19@map-with-index H4c19@map-with-index) (set! H4c1b@repl (lambda H4cdc@x (letrec* ((H4cdf@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (H4ce2@H4ce0) (lambda () (with-exception-handler (lambda (H4ce4@e) ((call/cc (lambda (H4ce6@H4ce1) (H4ce2@H4ce0 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? H4ce4@e) (H4c15@condition-printer H4ce4@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~w\n" H4ce4@e))) (H4ce6@H4ce1 (lambda () (raise-continuable H4ce4@e)))))))))) (lambda () (let H4cec@loop ((H4ce8@line (get-line (current-input-port))) (H4ce9@accum '"")) (letrec* ((H4cef@parentheses-ok? (lambda (H4cf6@text) (let H4cfe@loop ((H4cf8@chars (string->list H4cf6@text)) (H4cf9@p0 '0) (H4cfa@p1 '0)) (if (null? H4cf8@chars) (= '0 H4cf9@p0 H4cfa@p1) (let ((H4d00@t (car H4cf8@chars))) (if (memv H4d00@t '(#\()) (H4cfe@loop (cdr H4cf8@chars) (+ H4cf9@p0 '1) H4cfa@p1) (if (memv H4d00@t '(#\))) (H4cfe@loop (cdr H4cf8@chars) (- H4cf9@p0 '1) H4cfa@p1) (if (memv H4d00@t '(#\[)) (H4cfe@loop (cdr H4cf8@chars) H4cf9@p0 (+ H4cfa@p1 '1)) (if (memv H4d00@t '(#\])) (H4cfe@loop (cdr H4cf8@chars) H4cf9@p0 (- H4cfa@p1 '1)) (H4cfe@loop (cdr H4cf8@chars) H4cf9@p0 H4cfa@p1)))))))))) (H4cf1@eval-string-print (lambda (H4cf4@text) (if (not (or (string=? '"\n" H4cf4@text) (= '0 (string-length H4cf4@text)))) (write (H4c29@eval-top-level (call-with-port (open-string-input-port H4cf4@text) read))) (void))))) (if (eof-object? H4ce8@line) (begin (H4cf1@eval-string-print H4ce9@accum) (exit)) (let ((H4cf2@current (string-append H4ce9@accum H4ce8@line))) (if (H4cef@parentheses-ok? H4cf2@current) (H4cf1@eval-string-print H4cf2@current) (H4cec@loop (get-line (current-input-port)) H4cf2@current)))))))))))) (newline) (H4cdf@rec))))) (H4cdf@rec)))) (set! H4d75@H4c1b@repl H4c1b@repl) (set! H4c1d@trace-printer (H2a05@H28e3@make-parameter write)) (set! H4d76@H4c1d@trace-printer H4c1d@trace-printer) (set! H4c1f@command-line (H2a05@H28e3@make-parameter (get-command-line))) (set! H4d77@H4c1f@command-line H4c1f@command-line) (set! H4c21@local-library-path (lambda (H4d02@filename) (H2cbf@H2afb@library-path))) (set! H4d78@H4c21@local-library-path H4c21@local-library-path) (set! H4c23@load/args (lambda (H4d04@filename . H4d06@args) (begin (apply H4c33@load-r6rs-top-level H4d04@filename 'load H4d06@args) (void)))) (set! H4d79@H4c23@load/args H4c23@load/args) (set! H4c25@load (lambda (H4d08@filename) (begin (apply H4c33@load-r6rs-top-level H4d08@filename 'load (H4c1f@command-line)) (void)))) (set! H4d7a@H4c25@load H4c25@load) (set! H4c27@ironscheme-build (lambda () (H4c25@load '"ironscheme-buildscript.ss"))) (set! H4d7b@H4c27@ironscheme-build H4c27@ironscheme-build) (set! H4c29@eval-top-level (lambda (H4d0a@x) (H4be6@H317c@eval H4d0a@x (H4bfd@H31aa@interaction-environment)))) (set! H4d7c@H4c29@eval-top-level H4c29@eval-top-level) (set! H4c2b@compile-system-libraries (lambda () (H4c29@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! H4d7d@H4c2b@compile-system-libraries H4c2b@compile-system-libraries) (set! H4c2d@compile (lambda (H4d0c@filename) (H4c33@load-r6rs-top-level H4d0c@filename 'compile))) (set! H4d7e@H4c2d@compile H4c2d@compile) (set! H4c2f@compile->closure (lambda (H4d0e@filename) (H4c33@load-r6rs-top-level H4d0e@filename 'closure))) (set! H4d7f@H4c2f@compile->closure H4c2f@compile->closure) (set! H4c31@pre-compile-r6rs-file (lambda (H4d10@filename) (H4c33@load-r6rs-top-level H4d10@filename 'compile))) (set! H4d80@H4c31@pre-compile-r6rs-file H4c31@pre-compile-r6rs-file) (set! H4c33@load-r6rs-top-level (lambda (H4d12@filename H4d13@how . H4d16@args) (begin (H2cbf@H2afb@library-path (H4c21@local-library-path H4d12@filename)) (let ((H4d18@x* (with-input-from-file H4d12@filename (lambda () (let H4d1a@f () (let ((H4d1c@x (H29f7@H28c7@read-annotated))) (if (eof-object? H4d1c@x) '() (cons H4d1c@x (H4d1a@f))))))))) (let ((H4d1e@t H4d13@how)) (if (memv H4d1e@t '(closure)) (H4bfc@H31a8@pre-compile-r6rs-top-level H4d18@x*) (if (memv H4d1e@t '(load)) (begin (H4c1f@command-line (cons H4d12@filename (car H4d16@args))) (H2a06@H28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (H2a06@H28e5@mosh-cache-dir) (gensym-prefix-set! (H4c39@prefix-inc! (string-append (H2a06@H28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (H4d20@file) ((call/cc (lambda (H4d24@H4d22) (lambda () (with-exception-handler (lambda (H4d26@c) ((call/cc (lambda (H4d28@H4d23) (H4d24@H4d22 (lambda () (if '#t '#t (H4d28@H4d23 (lambda () (raise-continuable H4d26@c)))))))))) (lambda () (delete-file (string-append (H2a06@H28e5@mosh-cache-dir) '"/" H4d20@file))))))))) (directory-list (H2a06@H28e5@mosh-cache-dir))) (void)) (let ((H4d2a@compiled (H4bfb@H31a6@compile-r6rs-top-level H4d18@x*))) (begin (if (and (H2a06@H28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (H2cc3@H2b03@serialize-all H2a00@H28d9@serialize-library H2a5c@H2a15@compile-core-expr) (void)) (H4d2a@compiled)))) (if (memv H4d1e@t '(compile)) (begin (H4bfb@H31a6@compile-r6rs-top-level H4d18@x*) (H2cc3@H2b03@serialize-all H2a00@H28d9@serialize-library H2a5c@H2a15@compile-core-expr)) (if '#f '#f (void)))))))))) (set! H4d81@H4c33@load-r6rs-top-level H4c33@load-r6rs-top-level) (set! H4c35@load-r6rs-top-level-sexp (lambda (H4d2c@import-spec H4d2d@thunk) (let ((H4d38@H4d31 H2cbf@H2afb@library-path) (H4d39@H4d33 H2a06@H28e5@mosh-cache-dir) (H4d3a@H4d35 (H4c21@local-library-path '"")) (H4d3b@H4d37 (create-mosh-cache-dir))) (let ((H4d40@swap (lambda () (begin (let ((H4d42@t (H4d38@H4d31))) (begin (H4d38@H4d31 H4d3a@H4d35) (set! H4d3a@H4d35 H4d42@t))) (let ((H4d44@t (H4d39@H4d33))) (begin (H4d39@H4d33 H4d3b@H4d37) (set! H4d3b@H4d37 H4d44@t))))))) (dynamic-wind H4d40@swap (lambda () (begin (if (H2a06@H28e5@mosh-cache-dir) (gensym-prefix-set! (H4c39@prefix-inc! (string-append (H2a06@H28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((H4d4a@H4d47 H4c1f@command-line) (H4d4b@H4d49 '())) (let ((H4d4e@swap (lambda () (let ((H4d50@t (H4d4a@H4d47))) (begin (H4d4a@H4d47 H4d4b@H4d49) (set! H4d4b@H4d49 H4d50@t)))))) (dynamic-wind H4d4e@swap (lambda () ((H4bfb@H31a6@compile-r6rs-top-level (list (cons 'import H4d2c@import-spec) (list H4d2d@thunk))))) H4d4e@swap))))) H4d40@swap))))) (set! H4d82@H4c35@load-r6rs-top-level-sexp H4c35@load-r6rs-top-level-sexp) (set! H4c37@prefix-inc (lambda (H4d52@prefix-string) (let ((H4d54@prefix (symbol->string H4d52@prefix-string))) (let ((H4d56@len (string-length H4d54@prefix))) (let H4d5e@loop ((H4d58@i (- H4d56@len '1)) (H4d59@carry? '#t) (H4d5a@accum '())) (if (< H4d58@i '0) (string->symbol (list->string (if H4d59@carry? (cons '#\a H4d5a@accum) H4d5a@accum))) (if H4d59@carry? (let ((H4d60@next-integer (+ '1 (char->integer (string-ref H4d54@prefix H4d58@i))))) (if (= H4d60@next-integer '123) (H4d5e@loop (- H4d58@i '1) '#f (cons '#\A H4d5a@accum)) (if (= H4d60@next-integer '91) (H4d5e@loop (- H4d58@i '1) '#t (cons '#\a H4d5a@accum)) (H4d5e@loop (- H4d58@i '1) '#f (cons (integer->char H4d60@next-integer) H4d5a@accum))))) (H4d5e@loop (- H4d58@i '1) '#f (cons (string-ref H4d54@prefix H4d58@i) H4d5a@accum))))))))) (set! H4d83@H4c37@prefix-inc H4c37@prefix-inc) (set! H4c39@prefix-inc! (lambda (H4d62@file) (begin (if (not (file-exists? H4d62@file)) (call-with-output-file H4d62@file (lambda (H4d64@port) (write 'd H4d64@port))) (void)) (let ((H4d66@prefix (call-with-input-file H4d62@file read))) (if (main-vm?) (let ((H4d68@next-prefix (H4c37@prefix-inc H4d66@prefix))) (begin (call-with-port (open-file-output-port H4d62@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (H4d6a@port) (write H4d68@next-prefix H4d6a@port))) H4d66@prefix)) H4d66@prefix))))) (set! H4d84@H4c39@prefix-inc! H4c39@prefix-inc!) (begin (H2cc4@H2b05@current-precompiled-library-loader H2a01@H28db@load-serialized-library) (set-symbol-value! 'load H4c25@load) (set-symbol-value! 'pre-compile-r6rs-file H4c31@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs H4c29@eval-top-level) (set-symbol-value! 'int-env-syms H4bdd@H316a@interaction-environment-symbols) (set-symbol-value! 'expanded2core H2a5b@H2a13@expanded->core) (set-symbol-value! 'trace-printer H4c1d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (H4c3a@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list H4c3a@c))))) (H4c0f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (H4c0f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (H4c0d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (H4c0d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (H4c0d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((H4c3c@prefix (lambda (H4c3e@ext H4c3f@ls) (append (map (lambda (H4c42@x) (string-append H4c3e@ext H4c42@x)) H4c3f@ls) H4c3f@ls)))) (H2cc0@H2afd@library-extensions (H4c3c@prefix '".mosh" (H2cc0@H2afd@library-extensions)))) (current-exception-handler (lambda (H4c44@c) (begin (if (condition? H4c44@c) (H4c15@condition-printer H4c44@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~w\n" H4c44@c)) H4c44@c))) (if ((call/cc (lambda (H4c48@H4c46) (lambda () (with-exception-handler (lambda (H4c4a@c) ((call/cc (lambda (H4c4c@H4c47) (H4c48@H4c46 (lambda () (if '#t '#f (H4c4c@H4c47 (lambda () (raise-continuable H4c4a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (H4c35@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (H4c1f@command-line)) (let ((H4c56@H4c4f H4c1f@command-line) (H4c57@H4c51 H2a06@H28e5@mosh-cache-dir) (H4c58@H4c53 '()) (H4c59@H4c55 (create-mosh-cache-dir))) (let ((H4c5e@swap (lambda () (begin (let ((H4c60@t (H4c56@H4c4f))) (begin (H4c56@H4c4f H4c58@H4c53) (set! H4c58@H4c53 H4c60@t))) (let ((H4c62@t (H4c57@H4c51))) (begin (H4c57@H4c51 H4c59@H4c55) (set! H4c59@H4c55 H4c62@t))))))) (dynamic-wind H4c5e@swap (lambda () (begin (if (H2a06@H28e5@mosh-cache-dir) (gensym-prefix-set! (H4c39@prefix-inc! (string-append (H2a06@H28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (H4c1b@repl))) H4c5e@swap))) (begin (H2cbf@H2afb@library-path (H4c21@local-library-path (car (H4c1f@command-line)))) (set! H4c0b@x* (with-input-from-file (car (H4c1f@command-line)) (lambda () (let H4c64@f () (let ((H4c66@x (H29f7@H28c7@read-annotated))) (if (eof-object? H4c66@x) '() (cons H4c66@x (H4c64@f)))))))) (H4c1f@command-line (cons (car (H4c1f@command-line)) (cdr (H4c1f@command-line)))) (H2a06@H28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (H2a06@H28e5@mosh-cache-dir) (gensym-prefix-set! (H4c39@prefix-inc! (string-append (H2a06@H28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (H4c68@file) ((call/cc (lambda (H4c6c@H4c6a) (lambda () (with-exception-handler (lambda (H4c6e@c) ((call/cc (lambda (H4c70@H4c6b) (H4c6c@H4c6a (lambda () (if '#t '#t (H4c70@H4c6b (lambda () (raise-continuable H4c6e@c)))))))))) (lambda () (delete-file (string-append (H2a06@H28e5@mosh-cache-dir) '"/" H4c68@file))))))))) (directory-list (H2a06@H28e5@mosh-cache-dir))) (void)) (let ((H4c72@compiled (H4bfb@H31a6@compile-r6rs-top-level H4c0b@x*))) (begin (if (and (H2a06@H28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (H2cc3@H2b03@serialize-all H2a00@H28d9@serialize-library H2a5c@H2a15@compile-core-expr) (void)) (H4c72@compiled))))))))
