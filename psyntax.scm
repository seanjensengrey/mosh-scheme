;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! aK28c7@library-file-path->cache-path (unspecified)) (set! aK28c9@read-annotated (unspecified)) (set! aK28cb@annotation-stripped (unspecified)) (set! aK28cd@annotation? (unspecified)) (set! aK28cf@annotation-source (unspecified)) (set! aK28d1@annotation-expression (unspecified)) (set! aK28d3@scm->fasl (unspecified)) (set! aK28d5@fasl-save (unspecified)) (set! aK28d7@fasl-load (unspecified)) (set! aK28d9@verbose? (unspecified)) (set! aK28db@serialize-library (unspecified)) (set! aK28dd@load-serialized-library (unspecified)) (set! aK28df@make-record-printer (unspecified)) (set! aK28e1@compile-core (unspecified)) (set! aK28e3@read-library-source-file (unspecified)) (set! aK28e5@make-parameter (unspecified)) (set! aK28e7@mosh-cache-dir (unspecified)) (set! aK297d@file-options-spec (unspecified)) (set! aK28c7@library-file-path->cache-path (lambda (aK297e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aK2984@aK2981 aK2985@aK2983) (let ((aK2988@extract aK2985@aK2983) (aK2989@p aK2984@aK2981)) (letrec* ((aK298d@display-hex (lambda (aK2996@n) (if (<= '0 aK2996@n '9) (display aK2996@n aK2989@p) (display (integer->char (+ (char->integer '#\a) (- aK2996@n '10))) aK2989@p))))) (begin (let aK2990@f ((aK298e@ls (string-split aK297e@x '#\/))) (if (not (null? aK298e@ls)) (begin (display '"_" aK2989@p) (for-each (lambda (aK2992@c) (if (or (char<=? '#\a aK2992@c '#\z) (char<=? '#\A aK2992@c '#\Z) (char<=? '#\0 aK2992@c '#\9) (memv aK2992@c '(#\- #\. #\_ #\~))) (display aK2992@c aK2989@p) (begin (display '"%" aK2989@p) (let ((aK2994@n (char->integer aK2992@c))) (begin (aK298d@display-hex (quotient aK2994@n '16)) (aK298d@display-hex (remainder aK2994@n '16))))))) (string->list (car aK298e@ls))) (aK2990@f (cdr aK298e@ls))) (void))) (aK2988@extract)))))))) (set! aK29f8@aK28c7@library-file-path->cache-path aK28c7@library-file-path->cache-path) (set! aK28c9@read-annotated read) (set! aK29f9@aK28c9@read-annotated aK28c9@read-annotated) (set! aK28cb@annotation-stripped (lambda (aK2998@x) (aK28d1@annotation-expression aK2998@x))) (set! aK29fa@aK28cb@annotation-stripped aK28cb@annotation-stripped) (set! aK28cd@annotation? (lambda (aK299a@x) (source-info aK299a@x))) (set! aK29fb@aK28cd@annotation? aK28cd@annotation?) (set! aK28cf@annotation-source (lambda (aK299c@x) (source-info aK299c@x))) (set! aK29fc@aK28cf@annotation-source aK28cf@annotation-source) (set! aK28d1@annotation-expression (lambda (aK299e@x) (if (pair? aK299e@x) (cons (car aK299e@x) (cdr aK299e@x)) (if (procedure? aK299e@x) (set-source-info! aK299e@x '#f) aK299e@x)))) (set! aK29fd@aK28d1@annotation-expression aK28d1@annotation-expression) (set! aK28d3@scm->fasl (lambda (aK29a0@filename) (string-append (aK28e7@mosh-cache-dir) '"/" (aK28c7@library-file-path->cache-path aK29a0@filename) '".mosh-fasl"))) (set! aK29fe@aK28d3@scm->fasl aK28d3@scm->fasl) (set! aK28d5@fasl-save (lambda (aK29a2@filename aK29a3@obj) (call-with-port (open-file-output-port aK29a2@filename) (lambda (aK29a6@port) ((symbol-value 'fasl-write!) aK29a3@obj aK29a6@port))))) (set! aK29ff@aK28d5@fasl-save aK28d5@fasl-save) (set! aK28d7@fasl-load (lambda (aK29a8@filename) (call-with-port (open-file-input-port aK29a8@filename) (symbol-value 'fasl-read!)))) (set! aK2a00@aK28d7@fasl-load aK28d7@fasl-load) (set! aK28d9@verbose? (symbol-value '%verbose)) (set! aK2a01@aK28d9@verbose? aK28d9@verbose?) (set! aK28db@serialize-library (lambda (aK29aa@filename aK29ab@obj) (begin (if aK28d9@verbose? (format (current-error-port) '"serialize-library ~a\n..." aK29aa@filename) (void)) (let ((aK29ae@expanded2core (symbol-value 'expanded2core))) (let ((aK29b0@compile (symbol-value 'compile-w/o-halt))) (let ((aK29b2@code aK29ab@obj)) (let ((aK29b4@pivot (cddddr (cddddr aK29b2@code)))) (let ((aK29b6@visit (aK29b0@compile (aK29ae@expanded2core (car aK29b4@pivot))))) (begin (set-car! aK29b4@pivot aK29b6@visit) (let ((aK29b8@pivot (cdr aK29b4@pivot))) (let ((aK29ba@invoke (aK29b0@compile (aK29ae@expanded2core (car aK29b8@pivot))))) (set-car! aK29b8@pivot aK29ba@invoke))))))))) (let ((aK29bc@fasl-file (aK28d3@scm->fasl aK29aa@filename))) (begin (if (file-exists? aK29bc@fasl-file) (delete-file aK29bc@fasl-file) (void)) ((call/cc (lambda (aK29c0@aK29be) (lambda () (with-exception-handler (lambda (aK29c2@c) ((call/cc (lambda (aK29c4@aK29bf) (aK29c0@aK29be (lambda () (if '#t (begin (if aK28d9@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" aK29aa@filename) (void)) (if (file-exists? aK29bc@fasl-file) (delete-file aK29bc@fasl-file) (void)) '#f) (aK29c4@aK29bf (lambda () (raise-continuable aK29c2@c)))))))))) (lambda () (aK28d5@fasl-save aK29bc@fasl-file aK29ab@obj)))))))))))) (set! aK2a02@aK28db@serialize-library aK28db@serialize-library) (set! aK28dd@load-serialized-library (lambda (aK29c6@filename aK29c7@obj) (and (aK28e7@mosh-cache-dir) (let ((aK29ca@fasl-file (aK28d3@scm->fasl aK29c6@filename))) (if (and (file-exists? aK29ca@fasl-file) ((symbol-value 'file-newer?) aK29ca@fasl-file aK29c6@filename)) (let ((aK29cc@expanded2core (symbol-value 'expanded2core))) (let ((aK29ce@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((aK29d0@code (aK28d7@fasl-load aK29ca@fasl-file))) (let ((aK29d2@pivot (cddddr (cddddr aK29d0@code)))) (let ((aK29d4@visit (car aK29d2@pivot))) (let ((aK29d6@visit-proc (lambda () (aK29ce@eval-compiled-core aK29d4@visit)))) (begin (set-car! aK29d2@pivot aK29d6@visit-proc) (let ((aK29d8@pivot (cdr aK29d2@pivot))) (let ((aK29da@invoke (car aK29d8@pivot))) (begin (set-car! aK29d8@pivot (lambda () (aK29ce@eval-compiled-core aK29da@invoke))) (apply aK29c7@obj aK29d0@code))))))))))) '#f))))) (set! aK2a03@aK28dd@load-serialized-library aK28dd@load-serialized-library) (set! aK28df@make-record-printer (lambda (aK29dc@name aK29dd@printer) (lambda aK29e0@x (begin (display '"record printer") (for-each display aK29e0@x))))) (set! aK2a04@aK28df@make-record-printer aK28df@make-record-printer) (set! aK28e1@compile-core (lambda aK29e2@x (apply error 'comile-core '"not implementated" aK29e2@x))) (set! aK2a05@aK28e1@compile-core aK28e1@compile-core) (set! aK28e3@read-library-source-file (lambda (aK29e4@file-name) (with-input-from-file aK29e4@file-name aK28c9@read-annotated))) (set! aK2a06@aK28e3@read-library-source-file aK28e3@read-library-source-file) (set! aK28e5@make-parameter (lambda aK29f4 (let ((aK29f5 (length aK29f4))) (if (= aK29f5 '1) (apply (lambda (aK29e6@x) (aK28e5@make-parameter aK29e6@x (lambda (aK29e8@x) aK29e8@x))) aK29f4) (if (= aK29f5 '2) (apply (lambda (aK29ea@x aK29eb@fender) (let ((aK29ee@x (aK29eb@fender aK29ea@x))) (lambda aK29f2 (let ((aK29f3 (length aK29f2))) (if (= aK29f3 '0) (apply (lambda () aK29ee@x) aK29f2) (if (= aK29f3 '1) (apply (lambda (aK29f0@v) (set! aK29ee@x (aK29eb@fender aK29f0@v))) aK29f2) (error 'apply '"invalid arg count"))))))) aK29f4) (error 'apply '"invalid arg count")))))) (set! aK2a07@aK28e5@make-parameter aK28e5@make-parameter) (set! aK28e7@mosh-cache-dir (aK28e5@make-parameter '#f)) (set! aK2a08@aK28e7@mosh-cache-dir aK28e7@mosh-cache-dir) (set! aK297d@file-options-spec (lambda (aK29f6@x) aK29f6@x)) (set! aK2a09@aK297d@file-options-spec aK297d@file-options-spec) (void))
(begin (set! aK2a0f@current-primitive-locations (unspecified)) (set! aK2a11@mutable? (unspecified)) (set! aK2a13@rewriter (unspecified)) (set! aK2a15@expanded->core (unspecified)) (set! aK2a17@compile-core-expr (unspecified)) (set! aK2a19@pretty-print (unspecified)) (set! aK2a1b@compile-core-expr-to-port (unspecified)) (set! aK2a0f@current-primitive-locations (aK2a07@aK28e5@make-parameter (lambda (aK2a1c@x) '#f) (lambda (aK2a1e@p) aK2a1e@p))) (set! aK2a5a@aK2a0f@current-primitive-locations aK2a0f@current-primitive-locations) (set! aK2a11@mutable? (lambda (aK2a20@x) (or (pair? aK2a20@x) (vector? aK2a20@x) (hashtable? aK2a20@x)))) (set! aK2a5b@aK2a11@mutable? aK2a11@mutable?) (set! aK2a13@rewriter (lambda (aK2a22@quote-hack?) (letrec* ((aK2a25@f (lambda (aK2a26@x) (if (pair? aK2a26@x) (let ((aK2a28@t (car aK2a26@x))) (if (memv aK2a28@t '(quote)) (if (and aK2a22@quote-hack? (aK2a11@mutable? (cadr aK2a26@x))) (let ((aK2a2a@g (gensym))) (begin (set-symbol-value! aK2a2a@g (cadr aK2a26@x)) aK2a2a@g)) aK2a26@x) (if (memv aK2a28@t '(case-lambda)) (cons 'case-lambda (map (lambda (aK2a2c@x) (cons (car aK2a2c@x) (map aK2a25@f (cdr aK2a2c@x)))) (cdr aK2a26@x))) (if (memv aK2a28@t '(lambda)) (cons* 'lambda (cadr aK2a26@x) (map aK2a25@f (cddr aK2a26@x))) (if (memv aK2a28@t '(letrec)) (let ((aK2a2e@bindings (cadr aK2a26@x)) (aK2a2f@body* (cddr aK2a26@x))) (let ((aK2a32@lhs* (map car aK2a2e@bindings)) (aK2a33@rhs* (map cadr aK2a2e@bindings))) (cons* 'letrec (map list aK2a32@lhs* (map aK2a25@f aK2a33@rhs*)) (map aK2a25@f aK2a2f@body*)))) (if (memv aK2a28@t '(letrec*)) (let ((aK2a36@bindings (cadr aK2a26@x)) (aK2a37@body* (cddr aK2a26@x))) (let ((aK2a3a@lhs* (map car aK2a36@bindings)) (aK2a3b@rhs* (map cadr aK2a36@bindings))) (cons* 'letrec* (map list aK2a3a@lhs* (map aK2a25@f aK2a3b@rhs*)) (map aK2a25@f aK2a37@body*)))) (if (memv aK2a28@t '(library-letrec*)) (let ((aK2a3e@name (cadr aK2a26@x)) (aK2a3f@x (cdr aK2a26@x))) (let ((aK2a42@bindings (cadr aK2a3f@x)) (aK2a43@body* (cddr aK2a3f@x))) (let ((aK2a46@lhs* (map car aK2a42@bindings)) (aK2a47@lhs** (map cadr aK2a42@bindings)) (aK2a48@rhs* (map caddr aK2a42@bindings))) (cons* 'library-letrec* aK2a3e@name (map list aK2a46@lhs* aK2a47@lhs** (map aK2a25@f aK2a48@rhs*)) (map aK2a25@f aK2a43@body*))))) (if (memv aK2a28@t '(begin)) (cons 'begin (map aK2a25@f (cdr aK2a26@x))) (if (memv aK2a28@t '(set!)) (list 'set! (cadr aK2a26@x) (aK2a25@f (caddr aK2a26@x))) (if (memv aK2a28@t '(primitive)) (let ((aK2a4c@op (cadr aK2a26@x))) (let ((aK2a4e@t ((aK2a0f@current-primitive-locations) aK2a4c@op))) (if aK2a4e@t ((lambda (aK2a50@loc) aK2a50@loc) aK2a4e@t) aK2a4c@op))) (if (memv aK2a28@t '(define)) aK2a26@x (if (list? aK2a26@x) (map aK2a25@f aK2a26@x) (error 'rewrite '"invalid form ~s ~s" aK2a26@x (list? aK2a26@x)))))))))))))) aK2a26@x)))) aK2a25@f))) (set! aK2a5c@aK2a13@rewriter aK2a13@rewriter) (set! aK2a15@expanded->core (lambda (aK2a52@x) ((aK2a13@rewriter '#f) aK2a52@x))) (set! aK2a5d@aK2a15@expanded->core aK2a15@expanded->core) (set! aK2a17@compile-core-expr (lambda (aK2a54@x) ((aK2a13@rewriter '#f) aK2a54@x))) (set! aK2a5e@aK2a17@compile-core-expr aK2a17@compile-core-expr) (set! aK2a19@pretty-print write) (set! aK2a5f@aK2a19@pretty-print aK2a19@pretty-print) (set! aK2a1b@compile-core-expr-to-port (lambda (aK2a56@x aK2a57@p) (aK2a19@pretty-print ((aK2a13@rewriter '#f) aK2a56@x) aK2a57@p))) (set! aK2a60@aK2a1b@compile-core-expr-to-port aK2a1b@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! aK2aaf@make-collection (unspecified)) (set! aK2ab1@current-library-collection (unspecified)) (set! aK2ab3@rp (unspecified)) (set! aK2abd@library? (unspecified)) (set! aK2abf@library-id (unspecified)) (set! aK2ac1@set-library-id! (unspecified)) (set! aK2ac3@library-name (unspecified)) (set! aK2ac5@set-library-name! (unspecified)) (set! aK2ac7@library-version (unspecified)) (set! aK2ac9@set-library-version! (unspecified)) (set! aK2acb@library-imp* (unspecified)) (set! aK2acd@set-library-imp*! (unspecified)) (set! aK2acf@library-vis* (unspecified)) (set! aK2ad1@set-library-vis*! (unspecified)) (set! aK2ad3@library-inv* (unspecified)) (set! aK2ad5@set-library-inv*! (unspecified)) (set! aK2ad7@library-subst (unspecified)) (set! aK2ad9@set-library-subst! (unspecified)) (set! aK2adb@library-env (unspecified)) (set! aK2add@set-library-env! (unspecified)) (set! aK2adf@library-visit-state (unspecified)) (set! aK2ae1@set-library-visit-state! (unspecified)) (set! aK2ae3@library-invoke-state (unspecified)) (set! aK2ae5@set-library-invoke-state! (unspecified)) (set! aK2ae7@library-visit-code (unspecified)) (set! aK2ae9@set-library-visit-code! (unspecified)) (set! aK2aeb@library-invoke-code (unspecified)) (set! aK2aed@set-library-invoke-code! (unspecified)) (set! aK2aef@library-visible? (unspecified)) (set! aK2af1@set-library-visible?! (unspecified)) (set! aK2af3@library-source-file-name (unspecified)) (set! aK2af5@set-library-source-file-name! (unspecified)) (set! aK2af7@dummy (unspecified)) (set! aK2af9@find-dependencies (unspecified)) (set! aK2afb@find-library-by (unspecified)) (set! aK2afd@library-path (unspecified)) (set! aK2aff@library-extensions (unspecified)) (set! aK2b01@library-name->file-name (unspecified)) (set! aK2b03@file-locator (unspecified)) (set! aK2b05@serialize-all (unspecified)) (set! aK2b07@current-precompiled-library-loader (unspecified)) (set! aK2b09@try-load-from-file (unspecified)) (set! aK2b0b@library-loader (unspecified)) (set! aK2b0d@current-library-expander (unspecified)) (set! aK2b0f@external-pending-libraries (unspecified)) (set! aK2b11@find-external-library (unspecified)) (set! aK2b13@find-library-by-name (unspecified)) (set! aK2b15@library-exists? (unspecified)) (set! aK2b17@find-library-by-spec/die (unspecified)) (set! aK2b19@label->binding-table (unspecified)) (set! aK2b1b@install-library-record (unspecified)) (set! aK2b1d@install-library (unspecified)) (set! aK2b1f@imported-label->binding (unspecified)) (set! aK2b21@invoke-library (unspecified)) (set! aK2b23@visit-library (unspecified)) (set! aK2b25@invoke-library-by-spec (unspecified)) (set! aK2b27@installed-libraries (unspecified)) (set! aK2b29@library-spec (unspecified)) (set! aK2aaf@make-collection (lambda () (let ((aK2b2a@set '())) (letrec* ((aK2b2d@set-cons (lambda (aK2b32@x aK2b33@ls) (if (memq aK2b32@x aK2b33@ls) aK2b33@ls (cons aK2b32@x aK2b33@ls))))) (lambda aK2b30 (let ((aK2b31 (length aK2b30))) (if (= aK2b31 '0) (apply (lambda () aK2b2a@set) aK2b30) (if (= aK2b31 '1) (apply (lambda (aK2b2e@x) (set! aK2b2a@set (aK2b2d@set-cons aK2b2e@x aK2b2a@set))) aK2b30) (error 'apply '"invalid arg count"))))))))) (set! aK2c9e@aK2aaf@make-collection aK2aaf@make-collection) (set! aK2ab1@current-library-collection (aK2a07@aK28e5@make-parameter (aK2aaf@make-collection) (lambda (aK2b36@x) (begin (if (not (procedure? aK2b36@x)) (assertion-violation 'current-library-collection '"not a procedure" aK2b36@x) (void)) aK2b36@x)))) (set! aK2c9f@aK2ab1@current-library-collection aK2ab1@current-library-collection) (set! aK2ab3@rp (aK2a04@aK28df@make-record-printer 'library (lambda (aK2b38@x aK2b39@p aK2b3a@wr) (begin (if (not (aK2abd@library? aK2b38@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (aK2ac7@library-version aK2b38@x)) (aK2ac3@library-name aK2b38@x) (append (aK2ac3@library-name aK2b38@x) (list (aK2ac7@library-version aK2b38@x))))) aK2b39@p))))) (set! aK2ca0@aK2ab3@rp aK2ab3@rp) (set! aK2abd@library? (lambda (aK2b3e@x) (and (simple-struct? aK2b3e@x) (eq? (simple-struct-name aK2b3e@x) 'library)))) (set! aK2ca1@aK2abd@library? aK2abd@library?) (set! aK2abf@library-id (lambda (aK2b40@x) (simple-struct-ref aK2b40@x '0))) (set! aK2ca2@aK2abf@library-id aK2abf@library-id) (set! aK2ac1@set-library-id! (lambda (aK2b42@x aK2b43@val) (simple-struct-set! aK2b42@x '0 aK2b43@val))) (set! aK2ca3@aK2ac1@set-library-id! aK2ac1@set-library-id!) (set! aK2ac3@library-name (lambda (aK2b46@x) (simple-struct-ref aK2b46@x '1))) (set! aK2ca4@aK2ac3@library-name aK2ac3@library-name) (set! aK2ac5@set-library-name! (lambda (aK2b48@x aK2b49@val) (simple-struct-set! aK2b48@x '1 aK2b49@val))) (set! aK2ca5@aK2ac5@set-library-name! aK2ac5@set-library-name!) (set! aK2ac7@library-version (lambda (aK2b4c@x) (simple-struct-ref aK2b4c@x '2))) (set! aK2ca6@aK2ac7@library-version aK2ac7@library-version) (set! aK2ac9@set-library-version! (lambda (aK2b4e@x aK2b4f@val) (simple-struct-set! aK2b4e@x '2 aK2b4f@val))) (set! aK2ca7@aK2ac9@set-library-version! aK2ac9@set-library-version!) (set! aK2acb@library-imp* (lambda (aK2b52@x) (simple-struct-ref aK2b52@x '3))) (set! aK2ca8@aK2acb@library-imp* aK2acb@library-imp*) (set! aK2acd@set-library-imp*! (lambda (aK2b54@x aK2b55@val) (simple-struct-set! aK2b54@x '3 aK2b55@val))) (set! aK2ca9@aK2acd@set-library-imp*! aK2acd@set-library-imp*!) (set! aK2acf@library-vis* (lambda (aK2b58@x) (simple-struct-ref aK2b58@x '4))) (set! aK2caa@aK2acf@library-vis* aK2acf@library-vis*) (set! aK2ad1@set-library-vis*! (lambda (aK2b5a@x aK2b5b@val) (simple-struct-set! aK2b5a@x '4 aK2b5b@val))) (set! aK2cab@aK2ad1@set-library-vis*! aK2ad1@set-library-vis*!) (set! aK2ad3@library-inv* (lambda (aK2b5e@x) (simple-struct-ref aK2b5e@x '5))) (set! aK2cac@aK2ad3@library-inv* aK2ad3@library-inv*) (set! aK2ad5@set-library-inv*! (lambda (aK2b60@x aK2b61@val) (simple-struct-set! aK2b60@x '5 aK2b61@val))) (set! aK2cad@aK2ad5@set-library-inv*! aK2ad5@set-library-inv*!) (set! aK2ad7@library-subst (lambda (aK2b64@x) (simple-struct-ref aK2b64@x '6))) (set! aK2cae@aK2ad7@library-subst aK2ad7@library-subst) (set! aK2ad9@set-library-subst! (lambda (aK2b66@x aK2b67@val) (simple-struct-set! aK2b66@x '6 aK2b67@val))) (set! aK2caf@aK2ad9@set-library-subst! aK2ad9@set-library-subst!) (set! aK2adb@library-env (lambda (aK2b6a@x) (simple-struct-ref aK2b6a@x '7))) (set! aK2cb0@aK2adb@library-env aK2adb@library-env) (set! aK2add@set-library-env! (lambda (aK2b6c@x aK2b6d@val) (simple-struct-set! aK2b6c@x '7 aK2b6d@val))) (set! aK2cb1@aK2add@set-library-env! aK2add@set-library-env!) (set! aK2adf@library-visit-state (lambda (aK2b70@x) (simple-struct-ref aK2b70@x '8))) (set! aK2cb2@aK2adf@library-visit-state aK2adf@library-visit-state) (set! aK2ae1@set-library-visit-state! (lambda (aK2b72@x aK2b73@val) (simple-struct-set! aK2b72@x '8 aK2b73@val))) (set! aK2cb3@aK2ae1@set-library-visit-state! aK2ae1@set-library-visit-state!) (set! aK2ae3@library-invoke-state (lambda (aK2b76@x) (simple-struct-ref aK2b76@x '9))) (set! aK2cb4@aK2ae3@library-invoke-state aK2ae3@library-invoke-state) (set! aK2ae5@set-library-invoke-state! (lambda (aK2b78@x aK2b79@val) (simple-struct-set! aK2b78@x '9 aK2b79@val))) (set! aK2cb5@aK2ae5@set-library-invoke-state! aK2ae5@set-library-invoke-state!) (set! aK2ae7@library-visit-code (lambda (aK2b7c@x) (simple-struct-ref aK2b7c@x '10))) (set! aK2cb6@aK2ae7@library-visit-code aK2ae7@library-visit-code) (set! aK2ae9@set-library-visit-code! (lambda (aK2b7e@x aK2b7f@val) (simple-struct-set! aK2b7e@x '10 aK2b7f@val))) (set! aK2cb7@aK2ae9@set-library-visit-code! aK2ae9@set-library-visit-code!) (set! aK2aeb@library-invoke-code (lambda (aK2b82@x) (simple-struct-ref aK2b82@x '11))) (set! aK2cb8@aK2aeb@library-invoke-code aK2aeb@library-invoke-code) (set! aK2aed@set-library-invoke-code! (lambda (aK2b84@x aK2b85@val) (simple-struct-set! aK2b84@x '11 aK2b85@val))) (set! aK2cb9@aK2aed@set-library-invoke-code! aK2aed@set-library-invoke-code!) (set! aK2aef@library-visible? (lambda (aK2b88@x) (simple-struct-ref aK2b88@x '12))) (set! aK2cba@aK2aef@library-visible? aK2aef@library-visible?) (set! aK2af1@set-library-visible?! (lambda (aK2b8a@x aK2b8b@val) (simple-struct-set! aK2b8a@x '12 aK2b8b@val))) (set! aK2cbb@aK2af1@set-library-visible?! aK2af1@set-library-visible?!) (set! aK2af3@library-source-file-name (lambda (aK2b8e@x) (simple-struct-ref aK2b8e@x '13))) (set! aK2cbc@aK2af3@library-source-file-name aK2af3@library-source-file-name) (set! aK2af5@set-library-source-file-name! (lambda (aK2b90@x aK2b91@val) (simple-struct-set! aK2b90@x '13 aK2b91@val))) (set! aK2cbd@aK2af5@set-library-source-file-name! aK2af5@set-library-source-file-name!) (set! aK2af7@dummy '3) (set! aK2cbe@aK2af7@dummy aK2af7@dummy) (set! aK2af9@find-dependencies (lambda (aK2b94@ls) (if (null? aK2b94@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! aK2cbf@aK2af9@find-dependencies aK2af9@find-dependencies) (set! aK2afb@find-library-by (lambda (aK2b96@pred) (let aK2b9a@f ((aK2b98@ls ((aK2ab1@current-library-collection)))) (if (null? aK2b98@ls) '#f (if (aK2b96@pred (car aK2b98@ls)) (car aK2b98@ls) (aK2b9a@f (cdr aK2b98@ls))))))) (set! aK2cc0@aK2afb@find-library-by aK2afb@find-library-by) (set! aK2afd@library-path (aK2a07@aK28e5@make-parameter '(".") (lambda (aK2b9c@x) (if (and (list? aK2b9c@x) (for-all string? aK2b9c@x)) (map (lambda (aK2b9e@x) aK2b9e@x) aK2b9c@x) (assertion-violation 'library-path '"not a list of strings" aK2b9c@x))))) (set! aK2cc1@aK2afd@library-path aK2afd@library-path) (set! aK2aff@library-extensions (aK2a07@aK28e5@make-parameter '(".sls" ".ss" ".scm") (lambda (aK2ba0@x) (if (and (list? aK2ba0@x) (for-all string? aK2ba0@x)) (map (lambda (aK2ba2@x) aK2ba2@x) aK2ba0@x) (assertion-violation 'library-extensions '"not a list of strings" aK2ba0@x))))) (set! aK2cc2@aK2aff@library-extensions aK2aff@library-extensions) (set! aK2b01@library-name->file-name (lambda (aK2ba4@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aK2baa@aK2ba7 aK2bab@aK2ba9) (let ((aK2bae@extract aK2bab@aK2ba9) (aK2baf@p aK2baa@aK2ba7)) (letrec* ((aK2bb3@display-hex (lambda (aK2bbc@n) (if (<= '0 aK2bbc@n '9) (display aK2bbc@n aK2baf@p) (display (integer->char (+ (char->integer '#\a) (- aK2bbc@n '10))) aK2baf@p))))) (begin (let aK2bb6@f ((aK2bb4@ls aK2ba4@x)) (if (not (null? aK2bb4@ls)) (begin (display '"/" aK2baf@p) (for-each (lambda (aK2bb8@c) (if (or (char<=? '#\a aK2bb8@c '#\z) (char<=? '#\A aK2bb8@c '#\Z) (char<=? '#\0 aK2bb8@c '#\9) (memv aK2bb8@c '(#\- #\. #\_ #\~))) (display aK2bb8@c aK2baf@p) (begin (display '"%" aK2baf@p) (let ((aK2bba@n (char->integer aK2bb8@c))) (begin (aK2bb3@display-hex (quotient aK2bba@n '16)) (aK2bb3@display-hex (remainder aK2bba@n '16))))))) (string->list (symbol->string (car aK2bb4@ls)))) (aK2bb6@f (cdr aK2bb4@ls))) (void))) (aK2bae@extract)))))))) (set! aK2cc3@aK2b01@library-name->file-name aK2b01@library-name->file-name) (set! aK2b03@file-locator (aK2a07@aK28e5@make-parameter (lambda (aK2bbe@x) (let ((aK2bc0@str (aK2b01@library-name->file-name aK2bbe@x))) (let aK2bc8@f ((aK2bc2@ls (aK2afd@library-path)) (aK2bc3@exts (aK2aff@library-extensions)) (aK2bc4@failed-list '())) (if (null? aK2bc2@ls) (letrec* ((aK2bd2@aK2bcd (make-record-type-descriptor '&library-resolution &condition-rtd 'aK2bd0 '#f '#f '#((immutable library) (immutable files)))) (aK2bd4@aK2bcf '#f) (aK2bd6@aK2bce (make-record-constructor-descriptor aK2bd2@aK2bcd &condition-rcd aK2bd4@aK2bcf)) (aK2bd9@aK2bcc (record-predicate aK2bd2@aK2bcd)) (aK2bdb@make-library-resolution-condition (record-constructor aK2bd6@aK2bce)) (aK2bdd@aK2bca (record-accessor aK2bd2@aK2bcd '0)) (aK2bdf@aK2bcb (record-accessor aK2bd2@aK2bcd '1)) (aK2be1@library-resolution-condition? (condition-predicate aK2bd2@aK2bcd)) (aK2be3@condition-library (condition-accessor aK2bd2@aK2bcd aK2bdd@aK2bca)) (aK2be5@condition-files (condition-accessor aK2bd2@aK2bcd aK2bdf@aK2bcb))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (aK2bdb@make-library-resolution-condition aK2bbe@x (reverse aK2bc4@failed-list))))) (if (null? aK2bc3@exts) (aK2bc8@f (cdr aK2bc2@ls) (aK2aff@library-extensions) aK2bc4@failed-list) (let ((aK2be6@name (string-append (car aK2bc2@ls) aK2bc0@str (car aK2bc3@exts)))) (if (file-exists? aK2be6@name) aK2be6@name (aK2bc8@f aK2bc2@ls (cdr aK2bc3@exts) (cons aK2be6@name aK2bc4@failed-list))))))))) (lambda (aK2be8@f) (if (procedure? aK2be8@f) aK2be8@f (assertion-violation 'file-locator '"not a procedure" aK2be8@f))))) (set! aK2cc4@aK2b03@file-locator aK2b03@file-locator) (set! aK2b05@serialize-all (lambda (aK2bea@serialize aK2beb@compile) (letrec* ((aK2bef@library-desc (lambda (aK2bf2@x) (list (aK2abf@library-id aK2bf2@x) (aK2ac3@library-name aK2bf2@x))))) (for-each (lambda (aK2bf0@x) (if (aK2af3@library-source-file-name aK2bf0@x) (aK2bea@serialize (aK2af3@library-source-file-name aK2bf0@x) (list (aK2abf@library-id aK2bf0@x) (aK2ac3@library-name aK2bf0@x) (aK2ac7@library-version aK2bf0@x) (map aK2bef@library-desc (aK2acb@library-imp* aK2bf0@x)) (map aK2bef@library-desc (aK2acf@library-vis* aK2bf0@x)) (map aK2bef@library-desc (aK2ad3@library-inv* aK2bf0@x)) (aK2ad7@library-subst aK2bf0@x) (aK2adb@library-env aK2bf0@x) (aK2beb@compile (aK2ae7@library-visit-code aK2bf0@x)) (aK2beb@compile (aK2aeb@library-invoke-code aK2bf0@x)) (aK2aef@library-visible? aK2bf0@x))) (void))) ((aK2ab1@current-library-collection)))))) (set! aK2cc5@aK2b05@serialize-all aK2b05@serialize-all) (set! aK2b07@current-precompiled-library-loader (aK2a07@aK28e5@make-parameter (lambda (aK2bf4@filename aK2bf5@sk) '#f))) (set! aK2cc6@aK2b07@current-precompiled-library-loader aK2b07@current-precompiled-library-loader) (set! aK2b09@try-load-from-file (lambda (aK2bf8@filename) ((aK2b07@current-precompiled-library-loader) aK2bf8@filename (lambda aK2c1e (let ((aK2c1f (length aK2c1e))) (if (= aK2c1f '11) (apply (lambda (aK2bfa@id aK2bfb@name aK2bfc@ver aK2bfd@imp* aK2bfe@vis* aK2bff@inv* aK2c00@exp-subst aK2c01@exp-env aK2c02@visit-proc aK2c03@invoke-proc aK2c04@visible?) (let aK2c12@f ((aK2c10@deps (append aK2bfd@imp* aK2bfe@vis* aK2bff@inv*))) (if (null? aK2c10@deps) (begin (aK2b1d@install-library aK2bfa@id aK2bfb@name aK2bfc@ver aK2bfd@imp* aK2bfe@vis* aK2bff@inv* aK2c00@exp-subst aK2c01@exp-env aK2c02@visit-proc aK2c03@invoke-proc '#f '#f aK2c04@visible? '#f) '#t) (let ((aK2c14@d (car aK2c10@deps))) (let ((aK2c16@label (car aK2c14@d)) (aK2c17@dname (cadr aK2c14@d))) (let ((aK2c1a@l (aK2b13@find-library-by-name aK2c17@dname))) (if (and (aK2abd@library? aK2c1a@l) (eq? aK2c16@label (aK2abf@library-id aK2c1a@l))) (aK2c12@f (cdr aK2c10@deps)) (begin (if aK2a01@aK28d9@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" aK2bfb@name aK2c17@dname aK2bf8@filename) (void)) '#f)))))))) aK2c1e) (if (>= aK2c1f '0) (apply (lambda aK2c1c@others '#f) aK2c1e) (error 'apply '"invalid arg count")))))))) (set! aK2cc7@aK2b09@try-load-from-file aK2b09@try-load-from-file) (set! aK2b0b@library-loader (aK2a07@aK28e5@make-parameter (lambda (aK2c20@x) (let ((aK2c22@file-name ((aK2b03@file-locator) aK2c20@x))) (if (not aK2c22@file-name) (assertion-violation '#f '"cannot file library" aK2c20@x) (or (aK2b09@try-load-from-file aK2c22@file-name) ((aK2b0d@current-library-expander) (aK2a06@aK28e3@read-library-source-file aK2c22@file-name) aK2c22@file-name (lambda (aK2c24@name) (if (not (fast-equal? aK2c24@name aK2c20@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (aK2c2a@aK2c27 aK2c2b@aK2c29) (let ((aK2c2e@e aK2c2b@aK2c29) (aK2c2f@p aK2c2a@aK2c27)) (begin (display '"expected to find library " aK2c2f@p) (write aK2c20@x aK2c2f@p) (display '" in file " aK2c2f@p) (display aK2c22@file-name aK2c2f@p) (display '", found " aK2c2f@p) (write aK2c24@name aK2c2f@p) (display '" instead" aK2c2f@p) (aK2c2e@e)))))) (void)))))))) (lambda (aK2c32@f) (if (procedure? aK2c32@f) aK2c32@f (assertion-violation 'library-locator '"not a procedure" aK2c32@f))))) (set! aK2cc8@aK2b0b@library-loader aK2b0b@library-loader) (set! aK2b0d@current-library-expander (aK2a07@aK28e5@make-parameter (lambda (aK2c34@x) (assertion-violation 'library-expander '"not initialized")) (lambda (aK2c36@f) (if (procedure? aK2c36@f) aK2c36@f (assertion-violation 'library-expander '"not a procedure" aK2c36@f))))) (set! aK2cc9@aK2b0d@current-library-expander aK2b0d@current-library-expander) (set! aK2b0f@external-pending-libraries (aK2a07@aK28e5@make-parameter '())) (set! aK2cca@aK2b0f@external-pending-libraries aK2b0f@external-pending-libraries) (set! aK2b11@find-external-library (lambda (aK2c38@name) (begin (if (member aK2c38@name (aK2b0f@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" aK2c38@name) (void)) (let ((aK2c3e@aK2c3b aK2b0f@external-pending-libraries) (aK2c3f@aK2c3d (cons aK2c38@name (aK2b0f@external-pending-libraries)))) (let ((aK2c42@swap (lambda () (let ((aK2c44@t (aK2c3e@aK2c3b))) (begin (aK2c3e@aK2c3b aK2c3f@aK2c3d) (set! aK2c3f@aK2c3d aK2c44@t)))))) (dynamic-wind aK2c42@swap (lambda () (begin ((aK2b0b@library-loader) aK2c38@name) (or (aK2afb@find-library-by (lambda (aK2c46@x) (fast-equal? (aK2ac3@library-name aK2c46@x) aK2c38@name))) (assertion-violation '#f '"handling external library did not yield the correct library" aK2c38@name)))) aK2c42@swap)))))) (set! aK2ccb@aK2b11@find-external-library aK2b11@find-external-library) (set! aK2b13@find-library-by-name (lambda (aK2c48@name) (or (aK2afb@find-library-by (lambda (aK2c4a@x) (fast-equal? (aK2ac3@library-name aK2c4a@x) aK2c48@name))) (aK2b11@find-external-library aK2c48@name)))) (set! aK2ccc@aK2b13@find-library-by-name aK2b13@find-library-by-name) (set! aK2b15@library-exists? (lambda (aK2c4c@name) (and (aK2afb@find-library-by (lambda (aK2c4e@x) (fast-equal? (aK2ac3@library-name aK2c4e@x) aK2c4c@name))) '#t))) (set! aK2ccd@aK2b15@library-exists? aK2b15@library-exists?) (set! aK2b17@find-library-by-spec/die (lambda (aK2c50@spec) (let ((aK2c52@id (car aK2c50@spec))) (or (aK2afb@find-library-by (lambda (aK2c54@x) (eq? aK2c52@id (aK2abf@library-id aK2c54@x)))) (assertion-violation '#f '"cannot find library with required spec" aK2c50@spec))))) (set! aK2cce@aK2b17@find-library-by-spec/die aK2b17@find-library-by-spec/die) (set! aK2b19@label->binding-table (make-eq-hashtable)) (set! aK2ccf@aK2b19@label->binding-table aK2b19@label->binding-table) (set! aK2b1b@install-library-record (lambda (aK2c56@lib) (begin (let ((aK2c58@exp-env (aK2adb@library-env aK2c56@lib))) (for-each (lambda (aK2c5a@x) (let ((aK2c5c@label (car aK2c5a@x)) (aK2c5d@binding (cdr aK2c5a@x))) (let ((aK2c60@binding (let ((aK2c62@t (car aK2c5d@binding))) (if (memv aK2c62@t '(global)) (cons 'global (cons aK2c56@lib (cdr aK2c5d@binding))) (if (memv aK2c62@t '(global-macro)) (cons 'global-macro (cons aK2c56@lib (cdr aK2c5d@binding))) (if (memv aK2c62@t '(global-macro!)) (cons 'global-macro! (cons aK2c56@lib (cdr aK2c5d@binding))) aK2c5d@binding)))))) (begin (if (hashtable-ref aK2b19@label->binding-table aK2c5c@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" aK2c5c@label (hashtable-ref aK2b19@label->binding-table aK2c5c@label '#f) aK2c60@binding) (exit)) (void)) (hashtable-set! aK2b19@label->binding-table aK2c5c@label aK2c60@binding))))) aK2c58@exp-env)) ((aK2ab1@current-library-collection) aK2c56@lib)))) (set! aK2cd0@aK2b1b@install-library-record aK2b1b@install-library-record) (set! aK2b1d@install-library (lambda (aK2c64@id aK2c65@name aK2c66@ver aK2c67@imp* aK2c68@vis* aK2c69@inv* aK2c6a@exp-subst aK2c6b@exp-env aK2c6c@visit-proc aK2c6d@invoke-proc aK2c6e@visit-code aK2c6f@invoke-code aK2c70@visible? aK2c71@source-file-name) (let ((aK2c80@imp-lib* (map aK2b17@find-library-by-spec/die aK2c67@imp*)) (aK2c81@vis-lib* (map aK2b17@find-library-by-spec/die aK2c68@vis*)) (aK2c82@inv-lib* (map aK2b17@find-library-by-spec/die aK2c69@inv*))) (begin (if (not (and (symbol? aK2c64@id) (list? aK2c65@name) (list? aK2c66@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" aK2c64@id aK2c65@name aK2c66@ver) (void)) (if (aK2b15@library-exists? aK2c65@name) (assertion-violation 'install-library '"library is already installed" aK2c65@name) (void)) (let ((aK2c86@lib (make-simple-struct 'library '15 (list aK2c64@id aK2c65@name aK2c66@ver aK2c80@imp-lib* aK2c81@vis-lib* aK2c82@inv-lib* aK2c6a@exp-subst aK2c6b@exp-env aK2c6c@visit-proc aK2c6d@invoke-proc aK2c6e@visit-code aK2c6f@invoke-code aK2c70@visible? aK2c71@source-file-name)))) (aK2b1b@install-library-record aK2c86@lib)))))) (set! aK2cd1@aK2b1d@install-library aK2b1d@install-library) (set! aK2b1f@imported-label->binding (lambda (aK2c88@lab) (hashtable-ref aK2b19@label->binding-table aK2c88@lab '#f))) (set! aK2cd2@aK2b1f@imported-label->binding aK2b1f@imported-label->binding) (set! aK2b21@invoke-library (lambda (aK2c8a@lib) (let ((aK2c8c@invoke (aK2ae3@library-invoke-state aK2c8a@lib))) (if (procedure? aK2c8c@invoke) (begin (aK2ae5@set-library-invoke-state! aK2c8a@lib (lambda () (assertion-violation 'invoke '"circularity detected" aK2c8a@lib))) (for-each aK2b21@invoke-library (aK2ad3@library-inv* aK2c8a@lib)) (aK2ae5@set-library-invoke-state! aK2c8a@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" aK2c8a@lib))) (aK2c8c@invoke) (aK2ae5@set-library-invoke-state! aK2c8a@lib '#t)) (void))))) (set! aK2cd3@aK2b21@invoke-library aK2b21@invoke-library) (set! aK2b23@visit-library (lambda (aK2c8e@lib) (let ((aK2c90@visit (aK2adf@library-visit-state aK2c8e@lib))) (if (procedure? aK2c90@visit) (begin (aK2ae1@set-library-visit-state! aK2c8e@lib (lambda () (assertion-violation 'visit '"circularity detected" aK2c8e@lib))) (for-each aK2b21@invoke-library (aK2acf@library-vis* aK2c8e@lib)) (aK2ae1@set-library-visit-state! aK2c8e@lib (lambda () (assertion-violation 'invoke '"first visit did not return" aK2c8e@lib))) (aK2c90@visit) (aK2ae1@set-library-visit-state! aK2c8e@lib '#t)) (void))))) (set! aK2cd4@aK2b23@visit-library aK2b23@visit-library) (set! aK2b25@invoke-library-by-spec (lambda (aK2c92@spec) (aK2b21@invoke-library (aK2b17@find-library-by-spec/die aK2c92@spec)))) (set! aK2cd5@aK2b25@invoke-library-by-spec aK2b25@invoke-library-by-spec) (set! aK2b27@installed-libraries (lambda aK2c9a (let ((aK2c9b (length aK2c9a))) (if (= aK2c9b '1) (apply (lambda (aK2c94@all?) (let aK2c98@f ((aK2c96@ls ((aK2ab1@current-library-collection)))) (if (null? aK2c96@ls) '() (if (or aK2c94@all? (aK2aef@library-visible? (car aK2c96@ls))) (cons (car aK2c96@ls) (aK2c98@f (cdr aK2c96@ls))) (aK2c98@f (cdr aK2c96@ls)))))) aK2c9a) (if (= aK2c9b '0) (apply (lambda () (aK2b27@installed-libraries '#f)) aK2c9a) (error 'apply '"invalid arg count")))))) (set! aK2cd6@aK2b27@installed-libraries aK2b27@installed-libraries) (set! aK2b29@library-spec (lambda (aK2c9c@x) (begin (if (not (aK2abd@library? aK2c9c@x)) (assertion-violation 'library-spec '"not a library" aK2c9c@x) (void)) (list (aK2abf@library-id aK2c9c@x) (aK2ac3@library-name aK2c9c@x) (aK2ac7@library-version aK2c9c@x))))) (set! aK2cd7@aK2b29@library-spec aK2b29@library-spec) (void))
(begin (set! aK2cdb@build-global-define (unspecified)) (set! aK2d4c@build-lambda (unspecified)) (set! aK2d4e@build-case-lambda (unspecified)) (set! aK2d7c@build-sequence (unspecified)) (set! aK2d7e@build-void (unspecified)) (set! aK2d80@build-letrec (unspecified)) (set! aK2d82@build-let (unspecified)) (set! aK2d84@build-named-let (unspecified)) (set! aK2d86@build-letrec* (unspecified)) (set! aK2d88@build-library-letrec* (unspecified)) (set! aK2d8a@build-receive (unspecified)) (set! aK2cdb@build-global-define (lambda (aK2d8b@x) (aK2d7e@build-void))) (set! aK2e19@aK2cdb@build-global-define aK2cdb@build-global-define) (set! aK2d4c@build-lambda (lambda (aK2d8d@ae aK2d8e@vars aK2d8f@exp) (list 'lambda aK2d8e@vars aK2d8f@exp))) (set! aK2e1a@aK2d4c@build-lambda aK2d4c@build-lambda) (set! aK2d4e@build-case-lambda (lambda (aK2d93@ae aK2d94@vars* aK2d95@exp*) (letrec* ((aK2d9a@build-error (lambda (aK2dd1@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (aK2d9c@build-pred (lambda (aK2db9@ae aK2dba@n aK2dbb@vars) (call-with-values (lambda () (let aK2dc7@f ((aK2dc3@vars aK2dbb@vars) (aK2dc4@count '0)) (if (pair? aK2dc3@vars) (aK2dc7@f (cdr aK2dc3@vars) (+ aK2dc4@count '1)) (if (null? aK2dc3@vars) (values aK2dc4@count '=) (values aK2dc4@count '>=))))) (lambda (aK2dc9@aK2dc0 aK2dca@aK2dc2) (let ((aK2dcd@pred aK2dca@aK2dc2) (aK2dce@count aK2dc9@aK2dc0)) (list (list 'primitive aK2dcd@pred) aK2dba@n (list 'quote aK2dce@count))))))) (aK2d9e@build-apply (lambda (aK2db1@ae aK2db2@g aK2db3@vars aK2db4@exp) (list '(primitive apply) (aK2d4c@build-lambda aK2db1@ae aK2db3@vars aK2db4@exp) aK2db2@g))) (aK2da0@expand-case-lambda (lambda (aK2da1@ae aK2da2@vars aK2da3@exp*) (let ((aK2da7@g (gensym)) (aK2da8@n (gensym))) (list 'lambda aK2da7@g (aK2d82@build-let aK2da1@ae (list aK2da8@n) (list (list '(primitive length) aK2da7@g)) (let aK2daf@f ((aK2dab@vars* aK2d94@vars*) (aK2dac@exp* aK2da3@exp*)) (if (null? aK2dab@vars*) (aK2d9a@build-error aK2da1@ae) (list 'if (aK2d9c@build-pred aK2da1@ae aK2da8@n (car aK2dab@vars*)) (aK2d9e@build-apply aK2da1@ae aK2da7@g (car aK2dab@vars*) (car aK2dac@exp*)) (aK2daf@f (cdr aK2dab@vars*) (cdr aK2dac@exp*))))))))))) (if (= (length aK2d95@exp*) '1) (aK2d4c@build-lambda aK2d93@ae (car aK2d94@vars*) (car aK2d95@exp*)) (aK2da0@expand-case-lambda aK2d93@ae aK2d94@vars* aK2d95@exp*))))) (set! aK2e1b@aK2d4e@build-case-lambda aK2d4e@build-case-lambda) (set! aK2d7c@build-sequence (lambda (aK2dd3@ae aK2dd4@exps) (let aK2dd9@loop ((aK2dd7@exps aK2dd4@exps)) (if (null? (cdr aK2dd7@exps)) (car aK2dd7@exps) (if (equal? (car aK2dd7@exps) (aK2d7e@build-void)) (aK2dd9@loop (cdr aK2dd7@exps)) (cons 'begin aK2dd7@exps)))))) (set! aK2e1c@aK2d7c@build-sequence aK2d7c@build-sequence) (set! aK2d7e@build-void (lambda () '((primitive void)))) (set! aK2e1d@aK2d7e@build-void aK2d7e@build-void) (set! aK2d80@build-letrec (lambda (aK2ddb@ae aK2ddc@vars aK2ddd@val-exps aK2dde@body-exp) (if (null? aK2ddc@vars) aK2dde@body-exp (list 'letrec (map list aK2ddc@vars aK2ddd@val-exps) aK2dde@body-exp)))) (set! aK2e1e@aK2d80@build-letrec aK2d80@build-letrec) (set! aK2d82@build-let (lambda (aK2de3@ae aK2de4@vars aK2de5@val-exps aK2de6@body-exp) (if (null? aK2de4@vars) aK2de6@body-exp (list 'let (map list aK2de4@vars aK2de5@val-exps) aK2de6@body-exp)))) (set! aK2e1f@aK2d82@build-let aK2d82@build-let) (set! aK2d84@build-named-let (lambda (aK2deb@ae aK2dec@name aK2ded@vars aK2dee@val-exps aK2def@body-exp) (list 'let aK2dec@name (map list aK2ded@vars aK2dee@val-exps) aK2def@body-exp))) (set! aK2e20@aK2d84@build-named-let aK2d84@build-named-let) (set! aK2d86@build-letrec* (lambda (aK2df5@ae aK2df6@vars aK2df7@val-exps aK2df8@body-exp) (if (null? aK2df6@vars) aK2df8@body-exp (list 'letrec* (map list aK2df6@vars aK2df7@val-exps) aK2df8@body-exp)))) (set! aK2e21@aK2d86@build-letrec* aK2d86@build-letrec*) (set! aK2d88@build-library-letrec* (lambda (aK2dfd@ae aK2dfe@name aK2dff@vars aK2e00@locs aK2e01@val-exps aK2e02@body-exp) (cons 'begin (append (map (lambda (aK2e09@var) (cons 'set! (cons aK2e09@var '((unspecified))))) aK2dff@vars) (append (apply append (map (lambda (aK2e0b@var aK2e0c@loc aK2e0d@val-exp) (list (list 'set! aK2e0b@var aK2e0d@val-exp) (list 'set! aK2e0c@loc aK2e0b@var))) aK2dff@vars aK2e00@locs aK2e01@val-exps)) (list aK2e02@body-exp)))))) (set! aK2e22@aK2d88@build-library-letrec* aK2d88@build-library-letrec*) (set! aK2d8a@build-receive (lambda (aK2e11@ae aK2e12@vars aK2e13@producer aK2e14@body*) (begin (display '"************** in ") (cons 'receive (cons aK2e12@vars (cons aK2e13@producer aK2e14@body*)))))) (set! aK2e23@aK2d8a@build-receive aK2d8a@build-receive) (void))
(begin (set! aK2e32@file-options-macro (unspecified)) (set! aK2e34@set-cons (unspecified)) (set! aK2e36@set-union (unspecified)) (set! aK2e3b@top-mark* (unspecified)) (set! aK2e3d@top-marked? (unspecified)) (set! aK2e3f@gen-lexical (unspecified)) (set! aK2e41@gen-global (unspecified)) (set! aK2e43@gen-label (unspecified)) (set! aK2e45@gen-top-level-label (unspecified)) (set! aK2e47@gen-define-label+loc (unspecified)) (set! aK2e49@gen-define-label (unspecified)) (set! aK2e53@rib? (unspecified)) (set! aK2e55@rib-sym* (unspecified)) (set! aK2e57@set-rib-sym*! (unspecified)) (set! aK2e59@rib-mark** (unspecified)) (set! aK2e5b@set-rib-mark**! (unspecified)) (set! aK2e5d@rib-label* (unspecified)) (set! aK2e5f@set-rib-label*! (unspecified)) (set! aK2e61@rib-sealed/freq (unspecified)) (set! aK2e63@set-rib-sealed/freq! (unspecified)) (set! aK2e65@rib-cache (unspecified)) (set! aK2e67@set-rib-cache! (unspecified)) (set! aK2e69@dummy (unspecified)) (set! aK2e6b@make-empty-rib (unspecified)) (set! aK2e6d@extend-rib! (unspecified)) (set! aK2e6f@extend-rib/nc! (unspecified)) (set! aK2e71@make-rib-map (unspecified)) (set! aK2e73@seal-rib! (unspecified)) (set! aK2e75@unseal-rib! (unspecified)) (set! aK2e77@make-full-rib (unspecified)) (set! aK2e79@rp (unspecified)) (set! aK2e83@stx? (unspecified)) (set! aK2e85@stx-expr (unspecified)) (set! aK2e87@set-stx-expr! (unspecified)) (set! aK2e89@stx-mark* (unspecified)) (set! aK2e8b@set-stx-mark*! (unspecified)) (set! aK2e8d@stx-subst* (unspecified)) (set! aK2e8f@set-stx-subst*! (unspecified)) (set! aK2e91@stx-ae* (unspecified)) (set! aK2e93@set-stx-ae*! (unspecified)) (set! aK2e95@dummy (unspecified)) (set! aK2e97@datum->stx (unspecified)) (set! aK2e99@gen-mark (unspecified)) (set! aK2e9b@anti-mark (unspecified)) (set! aK2e9d@anti-mark? (unspecified)) (set! aK2e9f@mkstx (unspecified)) (set! aK2ea1@add-mark (unspecified)) (set! aK2ea3@add-subst (unspecified)) (set! aK2ea5@syntax-kind? (unspecified)) (set! aK2ea7@syntax-vector->list (unspecified)) (set! aK2ea9@syntax-pair? (unspecified)) (set! aK2eab@syntax-vector? (unspecified)) (set! aK2ead@syntax-null? (unspecified)) (set! aK2eaf@syntax-list? (unspecified)) (set! aK2eb1@syntax-car (unspecified)) (set! aK2eb3@syntax-cdr (unspecified)) (set! aK2eb5@syntax->list (unspecified)) (set! aK2eb7@id? (unspecified)) (set! aK2eb9@id->sym (unspecified)) (set! aK2ebb@bound-id=? (unspecified)) (set! aK2ebd@free-id=? (unspecified)) (set! aK2ebf@valid-bound-ids? (unspecified)) (set! aK2ec1@distinct-bound-ids? (unspecified)) (set! aK2ec3@bound-id-member? (unspecified)) (set! aK2ec5@self-evaluating? (unspecified)) (set! aK2ec7@strip-annotations (unspecified)) (set! aK2ec9@strip (unspecified)) (set! aK2ecb@stx->datum (unspecified)) (set! aK2ecd@id->label (unspecified)) (set! aK2ecf@label->binding (unspecified)) (set! aK2ed1@make-binding (unspecified)) (set! aK2ed3@binding-type (unspecified)) (set! aK2ed5@binding-value (unspecified)) (set! aK2ed7@raise-unbound-error (unspecified)) (set! aK2ed9@syntax-type (unspecified)) (set! aK2ee7@sanitize-binding (unspecified)) (set! aK2ee9@make-variable-transformer (unspecified)) (set! aK2eeb@variable-transformer? (unspecified)) (set! aK2eed@variable-transformer-procedure (unspecified)) (set! aK2eef@make-eval-transformer (unspecified)) (set! aK3040@parse-define (unspecified)) (set! aK3042@parse-define-syntax (unspecified)) (set! aK3044@scheme-stx-hashtable (unspecified)) (set! aK3046@scheme-stx (unspecified)) (set! aK3048@lexical-var (unspecified)) (set! aK304a@lexical-mutable? (unspecified)) (set! aK304c@set-lexical-mutable! (unspecified)) (set! aK304e@add-lexical (unspecified)) (set! aK3050@add-lexicals (unspecified)) (set! aK3052@letrec-helper (unspecified)) (set! aK3054@let-transformer (unspecified)) (set! aK3056@letrec-transformer (unspecified)) (set! aK3058@letrec*-transformer (unspecified)) (set! aK305a@fluid-let-syntax-transformer (unspecified)) (set! aK305c@type-descriptor-transformer (unspecified)) (set! aK305e@record-type-descriptor-transformer (unspecified)) (set! aK3060@record-constructor-descriptor-transformer (unspecified)) (set! aK3062@when-macro (unspecified)) (set! aK3064@unless-macro (unspecified)) (set! aK3066@if-transformer (unspecified)) (set! aK3068@and-transformer (unspecified)) (set! aK306a@or-transformer (unspecified)) (set! aK306c@case-macro (unspecified)) (set! aK306e@quote-transformer (unspecified)) (set! aK3070@case-lambda-transformer (unspecified)) (set! aK3072@lambda-transformer (unspecified)) (set! aK3074@bless (unspecified)) (set! aK3076@with-syntax-macro (unspecified)) (set! aK3078@invalid-fmls-error (unspecified)) (set! aK307a@let-macro (unspecified)) (set! aK307c@let-values-macro (unspecified)) (set! aK307e@let*-values-macro (unspecified)) (set! aK3080@trace-lambda-macro (unspecified)) (set! aK3082@trace-define-macro (unspecified)) (set! aK3084@trace-define-syntax-macro (unspecified)) (set! aK3086@trace-let/rec-syntax (unspecified)) (set! aK3088@trace-let-syntax-macro (unspecified)) (set! aK308a@trace-letrec-syntax-macro (unspecified)) (set! aK308c@guard-macro (unspecified)) (set! aK308e@define-enumeration-macro (unspecified)) (set! aK3090@time-macro (unspecified)) (set! aK3092@delay-macro (unspecified)) (set! aK3094@assert-macro (unspecified)) (set! aK3096@endianness-macro (unspecified)) (set! aK3098@identifier-syntax-macro (unspecified)) (set! aK309a@do-macro (unspecified)) (set! aK309c@let*-macro (unspecified)) (set! aK309e@or-macro (unspecified)) (set! aK30a0@and-macro (unspecified)) (set! aK30a2@cond-macro (unspecified)) (set! aK30a4@do-include (unspecified)) (set! aK30a6@include-macro (unspecified)) (set! aK30a8@include-into-macro (unspecified)) (set! aK30aa@syntax-rules-macro (unspecified)) (set! aK30ac@quasiquote-macro (unspecified)) (set! aK30ae@quasisyntax-macro (unspecified)) (set! aK30b0@define-struct-macro (unspecified)) (set! aK30b2@define-record-type-macro (unspecified)) (set! aK30b4@define-condition-type-macro (unspecified)) (set! aK30b6@incorrect-usage-macro (unspecified)) (set! aK30b8@parameterize-macro (unspecified)) (set! aK30ba@foreign-call-transformer (unspecified)) (set! aK30bc@convert-pattern (unspecified)) (set! aK30be@syntax-dispatch (unspecified)) (set! aK30c0@ellipsis? (unspecified)) (set! aK30c2@underscore? (unspecified)) (set! aK30c4@verify-literals (unspecified)) (set! aK30c6@syntax-case-transformer (unspecified)) (set! aK30c8@ellipsis-map (unspecified)) (set! aK30ca@syntax-transformer (unspecified)) (set! aK30cc@core-macro-transformer (unspecified)) (set! aK30ce@symbol-macro (unspecified)) (set! aK30d0@macro-transformer (unspecified)) (set! aK30d2@local-macro-transformer (unspecified)) (set! aK30d4@do-macro-call (unspecified)) (set! aK30d6@chi-macro (unspecified)) (set! aK30d8@chi-local-macro (unspecified)) (set! aK30da@chi-global-macro (unspecified)) (set! aK30dc@chi-expr* (unspecified)) (set! aK30de@chi-application (unspecified)) (set! aK30e0@chi-expr (unspecified)) (set! aK30e2@chi-set! (unspecified)) (set! aK30e4@verify-formals (unspecified)) (set! aK30e6@chi-lambda-clause (unspecified)) (set! aK30e8@chi-lambda-clause* (unspecified)) (set! aK30ea@chi-defun (unspecified)) (set! aK30ec@chi-rhs (unspecified)) (set! aK30ee@expand-interaction-rhs*/init* (unspecified)) (set! aK30f0@chi-rhs* (unspecified)) (set! aK30f2@find-bound=? (unspecified)) (set! aK30f4@find-dups (unspecified)) (set! aK30f6@chi-internal (unspecified)) (set! aK30f8@parse-module (unspecified)) (set! aK3102@module-interface? (unspecified)) (set! aK3104@module-interface-first-mark (unspecified)) (set! aK3106@set-module-interface-first-mark! (unspecified)) (set! aK3108@module-interface-exp-id-vec (unspecified)) (set! aK310a@set-module-interface-exp-id-vec! (unspecified)) (set! aK310c@module-interface-exp-lab-vec (unspecified)) (set! aK310e@set-module-interface-exp-lab-vec! (unspecified)) (set! aK3110@dummy (unspecified)) (set! aK3112@module-interface-exp-id* (unspecified)) (set! aK3114@chi-internal-module (unspecified)) (set! aK3116@chi-body* (unspecified)) (set! aK3118@expand-transformer (unspecified)) (set! aK311a@parse-exports (unspecified)) (set! aK311c@parse-library-name (unspecified)) (set! aK311e@parse-library (unspecified)) (set! aK3120@parse-import-spec* (unspecified)) (set! aK3122@make-top-rib (unspecified)) (set! aK3124@make-collector (unspecified)) (set! aK3126@inv-collector (unspecified)) (set! aK3128@vis-collector (unspecified)) (set! aK312a@imp-collector (unspecified)) (set! aK312c@chi-library-internal (unspecified)) (set! aK312e@chi-interaction-expr (unspecified)) (set! aK3130@library-body-expander (unspecified)) (set! aK3132@core-library-expander (unspecified)) (set! aK3134@parse-top-level-program (unspecified)) (set! aK3136@top-level-expander (unspecified)) (set! aK3138@rp (unspecified)) (set! aK3142@env? (unspecified)) (set! aK3144@env-names (unspecified)) (set! aK3146@set-env-names! (unspecified)) (set! aK3148@env-labels (unspecified)) (set! aK314a@set-env-labels! (unspecified)) (set! aK314c@env-itc (unspecified)) (set! aK314e@set-env-itc! (unspecified)) (set! aK3150@dummy (unspecified)) (set! aK3152@rp (unspecified)) (set! aK315c@interaction-env? (unspecified)) (set! aK315e@interaction-env-rib (unspecified)) (set! aK3160@set-interaction-env-rib! (unspecified)) (set! aK3162@interaction-env-r (unspecified)) (set! aK3164@set-interaction-env-r! (unspecified)) (set! aK3166@interaction-env-locs (unspecified)) (set! aK3168@set-interaction-env-locs! (unspecified)) (set! aK316a@dummy (unspecified)) (set! aK316c@interaction-environment-symbols (unspecified)) (set! aK316e@environment-bindings (unspecified)) (set! aK3170@parse-binding (unspecified)) (set! aK3172@environment? (unspecified)) (set! aK3174@environment-symbols (unspecified)) (set! aK3176@environment (unspecified)) (set! aK3178@null-environment (unspecified)) (set! aK317a@scheme-report-environment (unspecified)) (set! aK317c@expand (unspecified)) (set! aK317e@eval (unspecified)) (set! aK3180@library-expander (unspecified)) (set! aK3182@boot-library-expand (unspecified)) (set! aK3184@rev-map-append (unspecified)) (set! aK3186@build-exports (unspecified)) (set! aK3188@make-export-subst (unspecified)) (set! aK318a@make-export-env/macros (unspecified)) (set! aK318c@generate-temporaries (unspecified)) (set! aK318e@free-identifier=? (unspecified)) (set! aK3190@bound-identifier=? (unspecified)) (set! aK3192@make-source-condition (unspecified)) (set! aK3194@extract-position-condition (unspecified)) (set! aK3196@expression-position (unspecified)) (set! aK3198@assertion-error (unspecified)) (set! aK319a@syntax-error (unspecified)) (set! aK319c@syntax-violation* (unspecified)) (set! aK319e@syntax-violation (unspecified)) (set! aK31a0@identifier? (unspecified)) (set! aK31a2@datum->syntax (unspecified)) (set! aK31a4@syntax->datum (unspecified)) (set! aK31a6@ungensym-all (unspecified)) (set! aK31a8@compile-r6rs-top-level (unspecified)) (set! aK31aa@pre-compile-r6rs-top-level (unspecified)) (set! aK31ac@interaction-environment (unspecified)) (set! aK31ae@top-level-context (unspecified)) (set! aK2e32@file-options-macro (lambda (aK31af@x) (letrec* ((aK31b2@valid-option? (lambda (aK31bb@x) (and (aK2eb7@id? aK31bb@x) (memq (aK2eb9@id->sym aK31bb@x) '(no-fail no-create no-truncate)))))) (let ((aK31b3@t aK31af@x)) (let ((aK31b5@ls/false (aK30be@syntax-dispatch aK31b3@t '(_ . each-any)))) (if (and aK31b5@ls/false (apply (lambda (aK31b7@opt*) (for-all aK31b2@valid-option? aK31b7@opt*)) aK31b5@ls/false)) (apply (lambda (aK31b9@opt*) (aK3074@bless (list 'make-file-options (list 'quote aK31b9@opt*)))) aK31b5@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK31b3@t))))))) (set! aK4b05@aK2e32@file-options-macro aK2e32@file-options-macro) (set! aK2e34@set-cons (lambda (aK31bd@x aK31be@ls) (if (memq aK31bd@x aK31be@ls) aK31be@ls (cons aK31bd@x aK31be@ls)))) (set! aK4b06@aK2e34@set-cons aK2e34@set-cons) (set! aK2e36@set-union (lambda (aK31c1@ls1 aK31c2@ls2) (if (null? aK31c1@ls1) aK31c2@ls2 (if (memq (car aK31c1@ls1) aK31c2@ls2) (aK2e36@set-union (cdr aK31c1@ls1) aK31c2@ls2) (cons (car aK31c1@ls1) (aK2e36@set-union (cdr aK31c1@ls1) aK31c2@ls2)))))) (set! aK4b07@aK2e36@set-union aK2e36@set-union) (set! aK2e3b@top-mark* '(top)) (set! aK4b08@aK2e3b@top-mark* aK2e3b@top-mark*) (set! aK2e3d@top-marked? (lambda (aK31c5@m*) (memq 'top aK31c5@m*))) (set! aK4b09@aK2e3d@top-marked? aK2e3d@top-marked?) (set! aK2e3f@gen-lexical (lambda (aK31c7@sym) (if (symbol? aK31c7@sym) (gensym aK31c7@sym) (if (aK2e83@stx? aK31c7@sym) (aK2e3f@gen-lexical (aK2eb9@id->sym aK31c7@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" aK31c7@sym))))) (set! aK4b0a@aK2e3f@gen-lexical aK2e3f@gen-lexical) (set! aK2e41@gen-global (lambda (aK31c9@x) (aK2e3f@gen-lexical aK31c9@x))) (set! aK4b0b@aK2e41@gen-global aK2e41@gen-global) (set! aK2e43@gen-label (lambda (aK31cb@_) (gensym))) (set! aK4b0c@aK2e43@gen-label aK2e43@gen-label) (set! aK2e45@gen-top-level-label (lambda (aK31cd@id aK31ce@rib) (letrec* ((aK31d2@find (lambda (aK31dd@sym aK31de@mark* aK31df@sym* aK31e0@mark** aK31e1@label*) (and (pair? aK31df@sym*) (if (and (eq? aK31dd@sym (car aK31df@sym*)) (same-marks? aK31de@mark* (car aK31e0@mark**))) (car aK31e1@label*) (aK31d2@find aK31dd@sym aK31de@mark* (cdr aK31df@sym*) (cdr aK31e0@mark**) (cdr aK31e1@label*))))))) (let ((aK31d3@sym (aK2eb9@id->sym aK31cd@id)) (aK31d4@mark* (aK2e89@stx-mark* aK31cd@id))) (let ((aK31d7@sym* (aK2e55@rib-sym* aK31ce@rib))) (let ((aK31d9@t (and (memq aK31d3@sym (aK2e55@rib-sym* aK31ce@rib)) (aK31d2@find aK31d3@sym aK31d4@mark* aK31d7@sym* (aK2e59@rib-mark** aK31ce@rib) (aK2e5d@rib-label* aK31ce@rib))))) (if aK31d9@t ((lambda (aK31db@label) (if (aK2cd2@aK2b1f@imported-label->binding aK31db@label) (gensym) aK31db@label)) aK31d9@t) (gensym)))))))) (set! aK4b0d@aK2e45@gen-top-level-label aK2e45@gen-top-level-label) (set! aK2e47@gen-define-label+loc (lambda (aK31e7@id aK31e8@rib) (let ((aK31eb@t (aK31ae@top-level-context))) (if aK31eb@t ((lambda (aK31ed@env) (let ((aK31ef@label (aK2e45@gen-top-level-label aK31e7@id aK31e8@rib)) (aK31f0@locs (aK3166@interaction-env-locs aK31ed@env))) (values aK31ef@label (let ((aK31f3@t (assq aK31ef@label aK31f0@locs))) (if aK31f3@t (cdr aK31f3@t) (let ((aK31f5@loc (aK2e3f@gen-lexical aK31e7@id))) (begin (aK3168@set-interaction-env-locs! aK31ed@env (cons (cons aK31ef@label aK31f5@loc) aK31f0@locs)) aK31f5@loc))))))) aK31eb@t) (values (gensym) (aK2e3f@gen-lexical aK31e7@id)))))) (set! aK4b0e@aK2e47@gen-define-label+loc aK2e47@gen-define-label+loc) (set! aK2e49@gen-define-label (lambda (aK31f7@id aK31f8@rib) (if (aK31ae@top-level-context) (aK2e45@gen-top-level-label aK31f7@id aK31f8@rib) (gensym)))) (set! aK4b0f@aK2e49@gen-define-label aK2e49@gen-define-label) (set! aK2e53@rib? (lambda (aK31fb@x) (and (simple-struct? aK31fb@x) (eq? (simple-struct-name aK31fb@x) 'rib)))) (set! aK4b10@aK2e53@rib? aK2e53@rib?) (set! aK2e55@rib-sym* (lambda (aK31fd@x) (simple-struct-ref aK31fd@x '0))) (set! aK4b11@aK2e55@rib-sym* aK2e55@rib-sym*) (set! aK2e57@set-rib-sym*! (lambda (aK31ff@x aK3200@val) (simple-struct-set! aK31ff@x '0 aK3200@val))) (set! aK4b12@aK2e57@set-rib-sym*! aK2e57@set-rib-sym*!) (set! aK2e59@rib-mark** (lambda (aK3203@x) (simple-struct-ref aK3203@x '1))) (set! aK4b13@aK2e59@rib-mark** aK2e59@rib-mark**) (set! aK2e5b@set-rib-mark**! (lambda (aK3205@x aK3206@val) (simple-struct-set! aK3205@x '1 aK3206@val))) (set! aK4b14@aK2e5b@set-rib-mark**! aK2e5b@set-rib-mark**!) (set! aK2e5d@rib-label* (lambda (aK3209@x) (simple-struct-ref aK3209@x '2))) (set! aK4b15@aK2e5d@rib-label* aK2e5d@rib-label*) (set! aK2e5f@set-rib-label*! (lambda (aK320b@x aK320c@val) (simple-struct-set! aK320b@x '2 aK320c@val))) (set! aK4b16@aK2e5f@set-rib-label*! aK2e5f@set-rib-label*!) (set! aK2e61@rib-sealed/freq (lambda (aK320f@x) (simple-struct-ref aK320f@x '3))) (set! aK4b17@aK2e61@rib-sealed/freq aK2e61@rib-sealed/freq) (set! aK2e63@set-rib-sealed/freq! (lambda (aK3211@x aK3212@val) (simple-struct-set! aK3211@x '3 aK3212@val))) (set! aK4b18@aK2e63@set-rib-sealed/freq! aK2e63@set-rib-sealed/freq!) (set! aK2e65@rib-cache (lambda (aK3215@x) (simple-struct-ref aK3215@x '4))) (set! aK4b19@aK2e65@rib-cache aK2e65@rib-cache) (set! aK2e67@set-rib-cache! (lambda (aK3217@x aK3218@val) (simple-struct-set! aK3217@x '4 aK3218@val))) (set! aK4b1a@aK2e67@set-rib-cache! aK2e67@set-rib-cache!) (set! aK2e69@dummy '3) (set! aK4b1b@aK2e69@dummy aK2e69@dummy) (set! aK2e6b@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! aK4b1c@aK2e6b@make-empty-rib aK2e6b@make-empty-rib) (set! aK2e6d@extend-rib! (lambda (aK321b@rib aK321c@id aK321d@label) (letrec* ((aK3222@find (lambda (aK322f@sym aK3230@mark* aK3231@sym* aK3232@mark** aK3233@label*) (and (pair? aK3231@sym*) (if (and (eq? aK322f@sym (car aK3231@sym*)) (same-marks? aK3230@mark* (car aK3232@mark**))) aK3233@label* (aK3222@find aK322f@sym aK3230@mark* (cdr aK3231@sym*) (cdr aK3232@mark**) (cdr aK3233@label*))))))) (begin (if (aK2e61@rib-sealed/freq aK321b@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" aK321b@rib) (void)) (let ((aK3223@sym (aK2eb9@id->sym aK321c@id)) (aK3224@mark* (aK2e89@stx-mark* aK321c@id))) (let ((aK3227@sym* (aK2e55@rib-sym* aK321b@rib))) (let ((aK3229@t (and (memq aK3223@sym (aK2e55@rib-sym* aK321b@rib)) (aK3222@find aK3223@sym aK3224@mark* aK3227@sym* (aK2e59@rib-mark** aK321b@rib) (aK2e5d@rib-label* aK321b@rib))))) (if aK3229@t ((lambda (aK322b@p) (if (not (eq? aK321d@label (car aK322b@p))) (if (aK31ae@top-level-context) (set-car! aK322b@p aK321d@label) (aK319e@syntax-violation '#f '"multiple definitions of identifier" aK321c@id)) (void))) aK3229@t) (begin (if (aK2e65@rib-cache aK321b@rib) (hashtable-update! (aK2e65@rib-cache aK321b@rib) aK3223@sym (lambda (aK322d@e) (cons (cons aK3224@mark* aK321d@label) aK322d@e)) '()) (void)) (aK2e57@set-rib-sym*! aK321b@rib (cons aK3223@sym aK3227@sym*)) (aK2e5b@set-rib-mark**! aK321b@rib (cons aK3224@mark* (aK2e59@rib-mark** aK321b@rib))) (aK2e5f@set-rib-label*! aK321b@rib (cons aK321d@label (aK2e5d@rib-label* aK321b@rib)))))))))))) (set! aK4b1d@aK2e6d@extend-rib! aK2e6d@extend-rib!) (set! aK2e6f@extend-rib/nc! (lambda (aK3239@rib aK323a@id aK323b@label) (let ((aK323f@sym (aK2eb9@id->sym aK323a@id)) (aK3240@mark* (aK2e89@stx-mark* aK323a@id))) (let ((aK3243@sym* (aK2e55@rib-sym* aK3239@rib))) (begin (if (aK2e65@rib-cache aK3239@rib) (hashtable-update! (aK2e65@rib-cache aK3239@rib) aK323f@sym (lambda (aK3245@e) (cons (cons aK3240@mark* aK323b@label) aK3245@e)) '()) (void)) (aK2e57@set-rib-sym*! aK3239@rib (cons aK323f@sym aK3243@sym*)) (aK2e5b@set-rib-mark**! aK3239@rib (cons aK3240@mark* (aK2e59@rib-mark** aK3239@rib))) (aK2e5f@set-rib-label*! aK3239@rib (cons aK323b@label (aK2e5d@rib-label* aK3239@rib)))))))) (set! aK4b1e@aK2e6f@extend-rib/nc! aK2e6f@extend-rib/nc!) (set! aK2e71@make-rib-map (lambda (aK3247@sym*) (let ((aK3249@ht (make-eq-hashtable))) (let aK324f@f ((aK324b@i '0) (aK324c@sym* aK3247@sym*)) (if (null? aK324c@sym*) aK3249@ht (begin (hashtable-update! aK3249@ht (car aK324c@sym*) (lambda (aK3251@x) (cons aK324b@i aK3251@x)) '()) (aK324f@f (+ aK324b@i '1) (cdr aK324c@sym*)))))))) (set! aK4b1f@aK2e71@make-rib-map aK2e71@make-rib-map) (set! aK2e73@seal-rib! (lambda (aK3253@rib) (let ((aK3255@sym* (aK2e55@rib-sym* aK3253@rib))) (if (not (null? aK3255@sym*)) (begin (aK2e57@set-rib-sym*! aK3253@rib (list->vector aK3255@sym*)) (aK2e5b@set-rib-mark**! aK3253@rib (list->vector (aK2e59@rib-mark** aK3253@rib))) (aK2e5f@set-rib-label*! aK3253@rib (list->vector (aK2e5d@rib-label* aK3253@rib))) (aK2e63@set-rib-sealed/freq! aK3253@rib (aK2e71@make-rib-map aK3255@sym*))) (void))))) (set! aK4b20@aK2e73@seal-rib! aK2e73@seal-rib!) (set! aK2e75@unseal-rib! (lambda (aK3257@rib) (if (aK2e61@rib-sealed/freq aK3257@rib) (begin (aK2e63@set-rib-sealed/freq! aK3257@rib '#f) (aK2e57@set-rib-sym*! aK3257@rib (vector->list (aK2e55@rib-sym* aK3257@rib))) (aK2e5b@set-rib-mark**! aK3257@rib (vector->list (aK2e59@rib-mark** aK3257@rib))) (aK2e5f@set-rib-label*! aK3257@rib (vector->list (aK2e5d@rib-label* aK3257@rib)))) (void)))) (set! aK4b21@aK2e75@unseal-rib! aK2e75@unseal-rib!) (set! aK2e77@make-full-rib (lambda (aK3259@id* aK325a@label*) (let ((aK325d@r (make-simple-struct 'rib '6 (list (map aK2eb9@id->sym aK3259@id*) (map aK2e89@stx-mark* aK3259@id*) aK325a@label* '#f '#f)))) (begin (aK2e73@seal-rib! aK325d@r) aK325d@r)))) (set! aK4b22@aK2e77@make-full-rib aK2e77@make-full-rib) (set! aK2e79@rp (aK2a04@aK28df@make-record-printer 'stx (lambda (aK325f@x aK3260@p aK3261@wr) (begin (display '"#<syntax " aK3260@p) (write (aK2ecb@stx->datum aK325f@x) aK3260@p) (let ((aK3265@expr (aK2e85@stx-expr aK325f@x))) (if (aK29fb@aK28cd@annotation? aK3265@expr) (let ((aK3267@src (aK29fc@aK28cf@annotation-source aK3265@expr))) (if (pair? aK3267@src) (begin (display '" [" aK3260@p) (display (cdr aK3267@src) aK3260@p) (display '" of " aK3260@p) (display (car aK3267@src) aK3260@p) (display '"]" aK3260@p)) (void))) (void))) (display '">" aK3260@p))))) (set! aK4b23@aK2e79@rp aK2e79@rp) (set! aK2e83@stx? (lambda (aK3269@x) (and (simple-struct? aK3269@x) (eq? (simple-struct-name aK3269@x) 'stx)))) (set! aK4b24@aK2e83@stx? aK2e83@stx?) (set! aK2e85@stx-expr (lambda (aK326b@x) (simple-struct-ref aK326b@x '0))) (set! aK4b25@aK2e85@stx-expr aK2e85@stx-expr) (set! aK2e87@set-stx-expr! (lambda (aK326d@x aK326e@val) (simple-struct-set! aK326d@x '0 aK326e@val))) (set! aK4b26@aK2e87@set-stx-expr! aK2e87@set-stx-expr!) (set! aK2e89@stx-mark* (lambda (aK3271@x) (simple-struct-ref aK3271@x '1))) (set! aK4b27@aK2e89@stx-mark* aK2e89@stx-mark*) (set! aK2e8b@set-stx-mark*! (lambda (aK3273@x aK3274@val) (simple-struct-set! aK3273@x '1 aK3274@val))) (set! aK4b28@aK2e8b@set-stx-mark*! aK2e8b@set-stx-mark*!) (set! aK2e8d@stx-subst* (lambda (aK3277@x) (simple-struct-ref aK3277@x '2))) (set! aK4b29@aK2e8d@stx-subst* aK2e8d@stx-subst*) (set! aK2e8f@set-stx-subst*! (lambda (aK3279@x aK327a@val) (simple-struct-set! aK3279@x '2 aK327a@val))) (set! aK4b2a@aK2e8f@set-stx-subst*! aK2e8f@set-stx-subst*!) (set! aK2e91@stx-ae* (lambda (aK327d@x) (simple-struct-ref aK327d@x '3))) (set! aK4b2b@aK2e91@stx-ae* aK2e91@stx-ae*) (set! aK2e93@set-stx-ae*! (lambda (aK327f@x aK3280@val) (simple-struct-set! aK327f@x '3 aK3280@val))) (set! aK4b2c@aK2e93@set-stx-ae*! aK2e93@set-stx-ae*!) (set! aK2e95@dummy '3) (set! aK4b2d@aK2e95@dummy aK2e95@dummy) (set! aK2e97@datum->stx (lambda (aK3283@id aK3284@datum) (make-simple-struct 'stx '5 (list aK3284@datum (aK2e89@stx-mark* aK3283@id) (aK2e8d@stx-subst* aK3283@id) (aK2e91@stx-ae* aK3283@id))))) (set! aK4b2e@aK2e97@datum->stx aK2e97@datum->stx) (set! aK2e99@gen-mark (lambda () (string '#\m))) (set! aK4b2f@aK2e99@gen-mark aK2e99@gen-mark) (set! aK2e9b@anti-mark '#f) (set! aK4b30@aK2e9b@anti-mark aK2e9b@anti-mark) (set! aK2e9d@anti-mark? not) (set! aK4b31@aK2e9d@anti-mark? aK2e9d@anti-mark?) (set! aK2e9f@mkstx (lambda (aK3287@e aK3288@m* aK3289@s* aK328a@ae*) (if (and (aK2e83@stx? aK3287@e) (not (aK2e3d@top-marked? aK3288@m*))) (call-with-values (lambda () (join-wraps aK3288@m* aK3289@s* aK328a@ae* aK3287@e)) (lambda (aK3295@aK3290 aK3296@aK3292 aK3297@aK3294) (let ((aK329b@ae* aK3297@aK3294) (aK329c@s* aK3296@aK3292) (aK329d@m* aK3295@aK3290)) (make-simple-struct 'stx '5 (list (aK2e85@stx-expr aK3287@e) aK329d@m* aK329c@s* aK329b@ae*))))) (make-simple-struct 'stx '5 (list aK3287@e aK3288@m* aK3289@s* aK328a@ae*))))) (set! aK4b32@aK2e9f@mkstx aK2e9f@mkstx) (set! aK2ea1@add-mark (lambda (aK32a1@m aK32a2@e aK32a3@ae) (aK2e9f@mkstx aK32a2@e (list aK32a1@m) '(shift) (list aK32a3@ae)))) (set! aK4b33@aK2ea1@add-mark aK2ea1@add-mark) (set! aK2ea3@add-subst (lambda (aK32a7@subst aK32a8@e) (aK2e9f@mkstx aK32a8@e '() (list aK32a7@subst) '()))) (set! aK4b34@aK2ea3@add-subst aK2ea3@add-subst) (set! aK2ea5@syntax-kind? (lambda (aK32ab@x aK32ac@p?) (if (aK2e83@stx? aK32ab@x) (aK2ea5@syntax-kind? (aK2e85@stx-expr aK32ab@x) aK32ac@p?) (if (aK29fb@aK28cd@annotation? aK32ab@x) (aK2ea5@syntax-kind? (aK29fd@aK28d1@annotation-expression aK32ab@x) aK32ac@p?) (aK32ac@p? aK32ab@x))))) (set! aK4b35@aK2ea5@syntax-kind? aK2ea5@syntax-kind?) (set! aK2ea7@syntax-vector->list (lambda (aK32af@x) (if (aK2e83@stx? aK32af@x) (let ((aK32b1@ls (aK2ea7@syntax-vector->list (aK2e85@stx-expr aK32af@x))) (aK32b2@m* (aK2e89@stx-mark* aK32af@x)) (aK32b3@s* (aK2e8d@stx-subst* aK32af@x)) (aK32b4@ae* (aK2e91@stx-ae* aK32af@x))) (map (lambda (aK32b9@x) (aK2e9f@mkstx aK32b9@x aK32b2@m* aK32b3@s* aK32b4@ae*)) aK32b1@ls)) (if (aK29fb@aK28cd@annotation? aK32af@x) (aK2ea7@syntax-vector->list (aK29fd@aK28d1@annotation-expression aK32af@x)) (if (vector? aK32af@x) (vector->list aK32af@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" aK32af@x)))))) (set! aK4b36@aK2ea7@syntax-vector->list aK2ea7@syntax-vector->list) (set! aK2ea9@syntax-pair? (lambda (aK32bb@x) (aK2ea5@syntax-kind? aK32bb@x pair?))) (set! aK4b37@aK2ea9@syntax-pair? aK2ea9@syntax-pair?) (set! aK2eab@syntax-vector? (lambda (aK32bd@x) (aK2ea5@syntax-kind? aK32bd@x vector?))) (set! aK4b38@aK2eab@syntax-vector? aK2eab@syntax-vector?) (set! aK2ead@syntax-null? (lambda (aK32bf@x) (aK2ea5@syntax-kind? aK32bf@x null?))) (set! aK4b39@aK2ead@syntax-null? aK2ead@syntax-null?) (set! aK2eaf@syntax-list? (lambda (aK32c1@x) (or (aK2ead@syntax-null? aK32c1@x) (and (aK2ea9@syntax-pair? aK32c1@x) (aK2eaf@syntax-list? (aK2eb3@syntax-cdr aK32c1@x)))))) (set! aK4b3a@aK2eaf@syntax-list? aK2eaf@syntax-list?) (set! aK2eb1@syntax-car (lambda (aK32c3@x) (if (aK2e83@stx? aK32c3@x) (aK2e9f@mkstx (aK2eb1@syntax-car (aK2e85@stx-expr aK32c3@x)) (aK2e89@stx-mark* aK32c3@x) (aK2e8d@stx-subst* aK32c3@x) (aK2e91@stx-ae* aK32c3@x)) (if (aK29fb@aK28cd@annotation? aK32c3@x) (aK2eb1@syntax-car (aK29fd@aK28d1@annotation-expression aK32c3@x)) (if (pair? aK32c3@x) (car aK32c3@x) (assertion-violation 'syntax-car '"BUG: not a pair" aK32c3@x)))))) (set! aK4b3b@aK2eb1@syntax-car aK2eb1@syntax-car) (set! aK2eb3@syntax-cdr (lambda (aK32c5@x) (if (aK2e83@stx? aK32c5@x) (aK2e9f@mkstx (aK2eb3@syntax-cdr (aK2e85@stx-expr aK32c5@x)) (aK2e89@stx-mark* aK32c5@x) (aK2e8d@stx-subst* aK32c5@x) (aK2e91@stx-ae* aK32c5@x)) (if (aK29fb@aK28cd@annotation? aK32c5@x) (aK2eb3@syntax-cdr (aK29fd@aK28d1@annotation-expression aK32c5@x)) (if (pair? aK32c5@x) (cdr aK32c5@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" aK32c5@x)))))) (set! aK4b3c@aK2eb3@syntax-cdr aK2eb3@syntax-cdr) (set! aK2eb5@syntax->list (lambda (aK32c7@x) (if (aK2ea9@syntax-pair? aK32c7@x) (cons (aK2eb1@syntax-car aK32c7@x) (aK2eb5@syntax->list (aK2eb3@syntax-cdr aK32c7@x))) (if (aK2ead@syntax-null? aK32c7@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" aK32c7@x))))) (set! aK4b3d@aK2eb5@syntax->list aK2eb5@syntax->list) (set! aK2eb7@id? (lambda (aK32c9@x) (and (aK2e83@stx? aK32c9@x) (symbol? (aK2e85@stx-expr aK32c9@x))))) (set! aK4b3e@aK2eb7@id? aK2eb7@id?) (set! aK2eb9@id->sym (lambda (aK32cb@x) (aK2e85@stx-expr aK32cb@x))) (set! aK4b3f@aK2eb9@id->sym aK2eb9@id->sym) (set! aK2ebb@bound-id=? (lambda (aK32cd@x aK32ce@y) (and (eq? (aK2eb9@id->sym aK32cd@x) (aK2eb9@id->sym aK32ce@y)) (same-marks? (aK2e89@stx-mark* aK32cd@x) (aK2e89@stx-mark* aK32ce@y))))) (set! aK4b40@aK2ebb@bound-id=? aK2ebb@bound-id=?) (set! aK2ebd@free-id=? (lambda (aK32d1@i aK32d2@j) (let ((aK32d5@t0 (id->real-label aK32d1@i)) (aK32d6@t1 (id->real-label aK32d2@j))) (if (or aK32d5@t0 aK32d6@t1) (eq? aK32d5@t0 aK32d6@t1) (eq? (aK2eb9@id->sym aK32d1@i) (aK2eb9@id->sym aK32d2@j)))))) (set! aK4b41@aK2ebd@free-id=? aK2ebd@free-id=?) (set! aK2ebf@valid-bound-ids? (lambda (aK32d9@id*) (and (for-all aK2eb7@id? aK32d9@id*) (aK2ec1@distinct-bound-ids? aK32d9@id*)))) (set! aK4b42@aK2ebf@valid-bound-ids? aK2ebf@valid-bound-ids?) (set! aK2ec1@distinct-bound-ids? (lambda (aK32db@id*) (or (null? aK32db@id*) (and (not (aK2ec3@bound-id-member? (car aK32db@id*) (cdr aK32db@id*))) (aK2ec1@distinct-bound-ids? (cdr aK32db@id*)))))) (set! aK4b43@aK2ec1@distinct-bound-ids? aK2ec1@distinct-bound-ids?) (set! aK2ec3@bound-id-member? (lambda (aK32dd@id aK32de@id*) (and (pair? aK32de@id*) (or (aK2ebb@bound-id=? aK32dd@id (car aK32de@id*)) (aK2ec3@bound-id-member? aK32dd@id (cdr aK32de@id*)))))) (set! aK4b44@aK2ec3@bound-id-member? aK2ec3@bound-id-member?) (set! aK2ec5@self-evaluating? (lambda (aK32e1@x) (or (number? aK32e1@x) (string? aK32e1@x) (char? aK32e1@x) (boolean? aK32e1@x) (regexp? aK32e1@x) (bytevector? aK32e1@x)))) (set! aK4b45@aK2ec5@self-evaluating? aK2ec5@self-evaluating?) (set! aK2ec7@strip-annotations (lambda (aK32e3@x) (if (pair? aK32e3@x) (cons (aK2ec7@strip-annotations (car aK32e3@x)) (aK2ec7@strip-annotations (cdr aK32e3@x))) (if (vector? aK32e3@x) (vector-map aK2ec7@strip-annotations aK32e3@x) (if (aK29fb@aK28cd@annotation? aK32e3@x) (aK29fa@aK28cb@annotation-stripped aK32e3@x) aK32e3@x))))) (set! aK4b46@aK2ec7@strip-annotations aK2ec7@strip-annotations) (set! aK2ec9@strip (lambda (aK32e5@x aK32e6@m*) (if (aK2e3d@top-marked? aK32e6@m*) (if (or (aK29fb@aK28cd@annotation? aK32e5@x) (and (pair? aK32e5@x) (aK29fb@aK28cd@annotation? (car aK32e5@x))) (and (vector? aK32e5@x) (> (vector-length aK32e5@x) '0) (aK29fb@aK28cd@annotation? (vector-ref aK32e5@x '0)))) (aK2ec7@strip-annotations aK32e5@x) aK32e5@x) (let aK32eb@f ((aK32e9@x aK32e5@x)) (if (aK2e83@stx? aK32e9@x) (begin (if (pair? (aK2e85@stx-expr aK32e9@x)) (begin (set-source-info! (aK2e85@stx-expr aK32e9@x) '#f) (set-source-info! (cdr (aK2e85@stx-expr aK32e9@x)) '#f) (set-source-info! (car (aK2e85@stx-expr aK32e9@x)) '#f)) (void)) (aK2ec9@strip (aK2e85@stx-expr aK32e9@x) (aK2e89@stx-mark* aK32e9@x))) (if (aK29fb@aK28cd@annotation? aK32e9@x) (aK29fa@aK28cb@annotation-stripped aK32e9@x) (if (pair? aK32e9@x) (let ((aK32ed@a (aK32eb@f (car aK32e9@x))) (aK32ee@d (aK32eb@f (cdr aK32e9@x)))) (if (and (eq? aK32ed@a (car aK32e9@x)) (eq? aK32ee@d (cdr aK32e9@x))) aK32e9@x (cons aK32ed@a aK32ee@d))) (if (vector? aK32e9@x) (let ((aK32f1@old (vector->list aK32e9@x))) (let ((aK32f3@new (map aK32eb@f aK32f1@old))) (if (for-all eq? aK32f1@old aK32f3@new) aK32e9@x (list->vector aK32f3@new)))) aK32e9@x)))))))) (set! aK4b47@aK2ec9@strip aK2ec9@strip) (set! aK2ecb@stx->datum (lambda (aK32f5@x) (aK2ec9@strip aK32f5@x '()))) (set! aK4b48@aK2ecb@stx->datum aK2ecb@stx->datum) (set! aK2ecd@id->label (lambda (aK32f7@id) (or (id->real-label aK32f7@id) (let ((aK32f9@t (aK31ae@top-level-context))) (if aK32f9@t ((lambda (aK32fb@env) (let ((aK32fd@rib (aK315e@interaction-env-rib aK32fb@env))) (call-with-values (lambda () (aK2e47@gen-define-label+loc aK32f7@id aK32fd@rib)) (lambda (aK3303@aK3300 aK3304@aK3302) (let ((aK3307@loc_ aK3304@aK3302) (aK3308@lab aK3303@aK3300)) (begin (aK2e6d@extend-rib! aK32fd@rib aK32f7@id aK3308@lab) aK3308@lab)))))) aK32f9@t) '#f))))) (set! aK4b49@aK2ecd@id->label aK2ecd@id->label) (set! aK2ecf@label->binding (lambda (aK330b@x aK330c@r) (let ((aK330f@t (aK2cd2@aK2b1f@imported-label->binding aK330b@x))) (if aK330f@t ((lambda (aK3311@b) (if (and (pair? aK3311@b) (eq? (car aK3311@b) '$core-rtd)) (cons '$rtd (map aK3074@bless (cdr aK3311@b))) (if (and (pair? aK3311@b) (eq? (car aK3311@b) 'global-rtd)) (let ((aK3313@lib (cadr aK3311@b)) (aK3314@loc (cddr aK3311@b))) (cons '$rtd (symbol-value aK3314@loc))) aK3311@b))) aK330f@t) (let ((aK3317@t (assq aK330b@x aK330c@r))) (if aK3317@t (cdr aK3317@t) (let ((aK3319@t (aK31ae@top-level-context))) (if aK3319@t ((lambda (aK331b@env) (let ((aK331d@t (assq aK330b@x (aK3166@interaction-env-locs aK331b@env)))) (if aK331d@t ((lambda (aK331f@p) (cons* 'lexical (cdr aK331f@p) '#f)) aK331d@t) '(displaced-lexical . #f)))) aK3319@t) '(displaced-lexical . #f))))))))) (set! aK4b4a@aK2ecf@label->binding aK2ecf@label->binding) (set! aK2ed1@make-binding cons) (set! aK4b4b@aK2ed1@make-binding aK2ed1@make-binding) (set! aK2ed3@binding-type car) (set! aK4b4c@aK2ed3@binding-type aK2ed3@binding-type) (set! aK2ed5@binding-value cdr) (set! aK4b4d@aK2ed5@binding-value aK2ed5@binding-value) (set! aK2ed7@raise-unbound-error (lambda (aK3321@id) (aK319c@syntax-violation* '#f '"unbound identifier" aK3321@id (make-undefined-violation)))) (set! aK4b4e@aK2ed7@raise-unbound-error aK2ed7@raise-unbound-error) (set! aK2ed9@syntax-type (lambda (aK3323@e aK3324@r) (if (aK2eb7@id? aK3323@e) (let ((aK3327@id aK3323@e)) (let ((aK3329@label (aK2ecd@id->label aK3327@id))) (let ((aK332b@b (aK2ecf@label->binding aK3329@label aK3324@r))) (let ((aK332d@type (aK2ed3@binding-type aK332b@b))) (begin (if (not aK3329@label) (aK2ed7@raise-unbound-error aK3327@id) (void)) (let ((aK332f@t aK332d@type)) (if (memv aK332f@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values aK332d@type (aK2ed5@binding-value aK332b@b) aK3327@id) (values 'other '#f '#f)))))))) (if (aK2ea9@syntax-pair? aK3323@e) (let ((aK3331@id (aK2eb1@syntax-car aK3323@e))) (if (aK2eb7@id? aK3331@id) (let ((aK3333@label (aK2ecd@id->label aK3331@id))) (let ((aK3335@b (aK2ecf@label->binding aK3333@label aK3324@r))) (let ((aK3337@type (aK2ed3@binding-type aK3335@b))) (begin (if (not aK3333@label) (aK2ed7@raise-unbound-error aK3331@id) (void)) (let ((aK3339@t aK3337@type)) (if (memv aK3339@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values aK3337@type (aK2ed5@binding-value aK3335@b) aK3331@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((aK333b@d (aK2ecb@stx->datum aK3323@e))) (if (aK2ec5@self-evaluating? aK333b@d) (values 'constant aK333b@d '#f) (values 'other '#f '#f))))))) (set! aK4b4f@aK2ed9@syntax-type aK2ed9@syntax-type) (set! aK2ee7@sanitize-binding (lambda (aK333d@x aK333e@src) (if (procedure? aK333d@x) (cons* 'local-macro aK333d@x aK333e@src) (if (and (pair? aK333d@x) (eq? (car aK333d@x) 'macro!) (procedure? (cdr aK333d@x))) (cons* 'local-macro! (cdr aK333d@x) aK333e@src) (if (and (pair? aK333d@x) (eq? (car aK333d@x) '$rtd)) aK333d@x (assertion-violation 'expand '"invalid transformer" aK333d@x)))))) (set! aK4b50@aK2ee7@sanitize-binding aK2ee7@sanitize-binding) (set! aK2ee9@make-variable-transformer (lambda (aK3341@x) (if (procedure? aK3341@x) (cons 'macro! aK3341@x) (assertion-violation 'make-variable-transformer '"not a procedure" aK3341@x)))) (set! aK4b51@aK2ee9@make-variable-transformer aK2ee9@make-variable-transformer) (set! aK2eeb@variable-transformer? (lambda (aK3343@x) (and (pair? aK3343@x) (eq? (car aK3343@x) 'macro!) (procedure? (cdr aK3343@x))))) (set! aK4b52@aK2eeb@variable-transformer? aK2eeb@variable-transformer?) (set! aK2eed@variable-transformer-procedure (lambda (aK3345@x) (if (aK2eeb@variable-transformer? aK3345@x) (cdr aK3345@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" aK3345@x)))) (set! aK4b53@aK2eed@variable-transformer-procedure aK2eed@variable-transformer-procedure) (set! aK2eef@make-eval-transformer (lambda (aK3347@x) (aK2ee7@sanitize-binding (eval-core (aK2a5d@aK2a15@expanded->core aK3347@x)) aK3347@x))) (set! aK4b54@aK2eef@make-eval-transformer aK2eef@make-eval-transformer) (set! aK3040@parse-define (lambda (aK3349@x) (let ((aK334b@t aK3349@x)) (let ((aK334d@ls/false (aK30be@syntax-dispatch aK334b@t '(_ (any . any) any . each-any)))) (if (and aK334d@ls/false (apply (lambda (aK334f@id aK3350@fmls aK3351@b aK3352@b*) (aK2eb7@id? aK334f@id)) aK334d@ls/false)) (apply (lambda (aK3357@id aK3358@fmls aK3359@b aK335a@b*) (begin (aK30e4@verify-formals aK3358@fmls aK3349@x) (values aK3357@id (cons 'defun (cons aK3358@fmls (cons aK3359@b aK335a@b*)))))) aK334d@ls/false) (let ((aK335f@t aK334b@t)) (let ((aK3361@ls/false (aK30be@syntax-dispatch aK335f@t '(_ any any)))) (if (and aK3361@ls/false (apply (lambda (aK3363@id aK3364@val) (aK2eb7@id? aK3363@id)) aK3361@ls/false)) (apply (lambda (aK3367@id aK3368@val) (values aK3367@id (cons 'expr aK3368@val))) aK3361@ls/false) (let ((aK336b@t aK335f@t)) (let ((aK336d@ls/false (aK30be@syntax-dispatch aK336b@t '(_ any)))) (if (and aK336d@ls/false (apply (lambda (aK336f@id) (aK2eb7@id? aK336f@id)) aK336d@ls/false)) (apply (lambda (aK3371@id) (values aK3371@id (cons 'expr (aK3074@bless '(void))))) aK336d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK336b@t)))))))))))) (set! aK4b55@aK3040@parse-define aK3040@parse-define) (set! aK3042@parse-define-syntax (lambda (aK3373@x) (let ((aK3375@t aK3373@x)) (let ((aK3377@ls/false (aK30be@syntax-dispatch aK3375@t '(_ any any)))) (if (and aK3377@ls/false (apply (lambda (aK3379@id aK337a@val) (aK2eb7@id? aK3379@id)) aK3377@ls/false)) (apply (lambda (aK337d@id aK337e@val) (values aK337d@id aK337e@val)) aK3377@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3375@t)))))) (set! aK4b56@aK3042@parse-define-syntax aK3042@parse-define-syntax) (set! aK3044@scheme-stx-hashtable (make-eq-hashtable)) (set! aK4b57@aK3044@scheme-stx-hashtable aK3044@scheme-stx-hashtable) (set! aK3046@scheme-stx (lambda (aK3381@sym) (or (hashtable-ref aK3044@scheme-stx-hashtable aK3381@sym '#f) (let ((aK3383@subst (aK2cae@aK2ad7@library-subst (aK2ccc@aK2b13@find-library-by-name '(psyntax system $all))))) (let ((aK3385@stx (make-simple-struct 'stx '5 (list aK3381@sym aK2e3b@top-mark* '() '())))) (let ((aK3387@stx (let ((aK3389@t (assq aK3381@sym aK3383@subst))) (if aK3389@t ((lambda (aK338b@x) (let ((aK338d@name (car aK338b@x)) (aK338e@label (cdr aK338b@x))) (aK2ea3@add-subst (make-simple-struct 'rib '6 (list (list aK338d@name) (list aK2e3b@top-mark*) (list aK338e@label) '#f '#f)) aK3385@stx))) aK3389@t) aK3385@stx)))) (begin (hashtable-set! aK3044@scheme-stx-hashtable aK3381@sym aK3387@stx) aK3387@stx))))))) (set! aK4b58@aK3046@scheme-stx aK3046@scheme-stx) (set! aK3048@lexical-var car) (set! aK4b59@aK3048@lexical-var aK3048@lexical-var) (set! aK304a@lexical-mutable? cdr) (set! aK4b5a@aK304a@lexical-mutable? aK304a@lexical-mutable?) (set! aK304c@set-lexical-mutable! set-cdr!) (set! aK4b5b@aK304c@set-lexical-mutable! aK304c@set-lexical-mutable!) (set! aK304e@add-lexical (lambda (aK3391@lab aK3392@lex aK3393@r) (cons (cons* aK3391@lab 'lexical aK3392@lex '#f) aK3393@r))) (set! aK4b5c@aK304e@add-lexical aK304e@add-lexical) (set! aK3050@add-lexicals (lambda (aK3397@lab* aK3398@lex* aK3399@r) (if (null? aK3397@lab*) aK3399@r (aK3050@add-lexicals (cdr aK3397@lab*) (cdr aK3398@lex*) (aK304e@add-lexical (car aK3397@lab*) (car aK3398@lex*) aK3399@r))))) (set! aK4b5d@aK3050@add-lexicals aK3050@add-lexicals) (set! aK3052@letrec-helper (lambda (aK339d@e aK339e@r aK339f@mr aK33a0@build) (let ((aK33a5@t aK339d@e)) (let ((aK33a7@ls/false (aK30be@syntax-dispatch aK33a5@t '(_ #(each (any any)) any . each-any)))) (if aK33a7@ls/false (apply (lambda (aK33a9@lhs* aK33aa@rhs* aK33ab@b aK33ac@b*) (if (not (aK2ebf@valid-bound-ids? aK33a9@lhs*)) (aK3078@invalid-fmls-error aK339d@e aK33a9@lhs*) (let ((aK33b1@lex* (map aK2e3f@gen-lexical aK33a9@lhs*)) (aK33b2@lab* (map aK2e43@gen-label aK33a9@lhs*))) (let ((aK33b5@rib (aK2e77@make-full-rib aK33a9@lhs* aK33b2@lab*)) (aK33b6@r (aK3050@add-lexicals aK33b2@lab* aK33b1@lex* aK339e@r))) (let ((aK33b9@body (aK30f6@chi-internal (aK2ea3@add-subst aK33b5@rib (cons aK33ab@b aK33ac@b*)) aK33b6@r aK339f@mr)) (aK33ba@rhs* (aK30dc@chi-expr* (map (lambda (aK33bd@x) (aK2ea3@add-subst aK33b5@rib aK33bd@x)) aK33aa@rhs*) aK33b6@r aK339f@mr))) (aK33a0@build '#f aK33b1@lex* aK33ba@rhs* aK33b9@body)))))) aK33a7@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK33a5@t)))))) (set! aK4b5e@aK3052@letrec-helper aK3052@letrec-helper) (set! aK3054@let-transformer (lambda (aK33bf@e aK33c0@r aK33c1@mr) (let ((aK33c5@t aK33bf@e)) (let ((aK33c7@ls/false (aK30be@syntax-dispatch aK33c5@t '(_ #(each (any any)) any . each-any)))) (if aK33c7@ls/false (apply (lambda (aK33c9@lhs* aK33ca@rhs* aK33cb@b aK33cc@b*) (if (not (aK2ebf@valid-bound-ids? aK33c9@lhs*)) (aK3078@invalid-fmls-error aK33bf@e aK33c9@lhs*) (let ((aK33d1@lex* (map aK2e3f@gen-lexical aK33c9@lhs*)) (aK33d2@lab* (map aK2e43@gen-label aK33c9@lhs*)) (aK33d3@rhs* (aK30dc@chi-expr* aK33ca@rhs* aK33c0@r aK33c1@mr))) (let ((aK33d7@rib (aK2e77@make-full-rib aK33c9@lhs* aK33d2@lab*)) (aK33d8@r (aK3050@add-lexicals aK33d2@lab* aK33d1@lex* aK33c0@r))) (let ((aK33db@body (aK30f6@chi-internal (aK2ea3@add-subst aK33d7@rib (cons aK33cb@b aK33cc@b*)) aK33d8@r aK33c1@mr))) (aK2e1f@aK2d82@build-let '#f aK33d1@lex* aK33d3@rhs* aK33db@body)))))) aK33c7@ls/false) (let ((aK33dd@t aK33c5@t)) (let ((aK33df@ls/false (aK30be@syntax-dispatch aK33dd@t '(_ any #(each (any any)) any . each-any)))) (if aK33df@ls/false (apply (lambda (aK33e1@loop aK33e2@lhs* aK33e3@rhs* aK33e4@b aK33e5@b*) (if (not (aK2ebf@valid-bound-ids? aK33e2@lhs*)) (aK3078@invalid-fmls-error aK33bf@e aK33e2@lhs*) (let ((aK33eb@lex* (map aK2e3f@gen-lexical aK33e2@lhs*)) (aK33ec@lab* (map aK2e43@gen-label aK33e2@lhs*)) (aK33ed@rhs* (aK30dc@chi-expr* aK33e3@rhs* aK33c0@r aK33c1@mr)) (aK33ee@loop-lex (aK2e3f@gen-lexical aK33e1@loop)) (aK33ef@loop-lab (aK2e43@gen-label aK33e1@loop))) (let ((aK33f5@loop-rib (aK2e77@make-full-rib (list aK33e1@loop) (list aK33ef@loop-lab))) (aK33f6@rib (aK2e77@make-full-rib aK33e2@lhs* aK33ec@lab*)) (aK33f7@r (aK3050@add-lexicals (cons aK33ef@loop-lab aK33ec@lab*) (cons aK33ee@loop-lex aK33eb@lex*) aK33c0@r))) (let ((aK33fb@body (aK30f6@chi-internal (aK2ea3@add-subst aK33f5@loop-rib (aK2ea3@add-subst aK33f6@rib (cons aK33e4@b aK33e5@b*))) aK33f7@r aK33c1@mr))) (aK2e20@aK2d84@build-named-let '#f aK33ee@loop-lex aK33eb@lex* aK33ed@rhs* aK33fb@body)))))) aK33df@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK33dd@t))))))))) (set! aK4b5f@aK3054@let-transformer aK3054@let-transformer) (set! aK3056@letrec-transformer (lambda (aK33fd@e aK33fe@r aK33ff@mr) (aK3052@letrec-helper aK33fd@e aK33fe@r aK33ff@mr aK2e1e@aK2d80@build-letrec))) (set! aK4b60@aK3056@letrec-transformer aK3056@letrec-transformer) (set! aK3058@letrec*-transformer (lambda (aK3403@e aK3404@r aK3405@mr) (aK3052@letrec-helper aK3403@e aK3404@r aK3405@mr aK2e21@aK2d86@build-letrec*))) (set! aK4b61@aK3058@letrec*-transformer aK3058@letrec*-transformer) (set! aK305a@fluid-let-syntax-transformer (lambda (aK3409@e aK340a@r aK340b@mr) (letrec* ((aK3410@lookup (lambda (aK3423@x) (or (aK2ecd@id->label aK3423@x) (aK319e@syntax-violation '#f '"unbound identifier" aK3409@e aK3423@x))))) (let ((aK3411@t aK3409@e)) (let ((aK3413@ls/false (aK30be@syntax-dispatch aK3411@t '(_ #(each (any any)) any . each-any)))) (if aK3413@ls/false (apply (lambda (aK3415@lhs* aK3416@rhs* aK3417@b aK3418@b*) (if (not (aK2ebf@valid-bound-ids? aK3415@lhs*)) (aK3078@invalid-fmls-error aK3409@e aK3415@lhs*) (let ((aK341d@lab* (map aK3410@lookup aK3415@lhs*)) (aK341e@rhs* (map (lambda (aK3421@x) (aK2eef@make-eval-transformer (aK3118@expand-transformer aK3421@x aK340b@mr))) aK3416@rhs*))) (aK30f6@chi-internal (cons aK3417@b aK3418@b*) (append (map cons aK341d@lab* aK341e@rhs*) aK340a@r) (append (map cons aK341d@lab* aK341e@rhs*) aK340b@mr))))) aK3413@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3411@t))))))) (set! aK4b62@aK305a@fluid-let-syntax-transformer aK305a@fluid-let-syntax-transformer) (set! aK305c@type-descriptor-transformer (lambda (aK3425@e aK3426@r aK3427@mr) (let ((aK342b@t aK3425@e)) (let ((aK342d@ls/false (aK30be@syntax-dispatch aK342b@t '(_ any)))) (if (and aK342d@ls/false (apply (lambda (aK342f@id) (aK2eb7@id? aK342f@id)) aK342d@ls/false)) (apply (lambda (aK3431@id) (let ((aK3433@lab (aK2ecd@id->label aK3431@id))) (let ((aK3435@b (aK2ecf@label->binding aK3433@lab aK3426@r))) (let ((aK3437@type (aK2ed3@binding-type aK3435@b))) (begin (if (not aK3433@lab) (aK2ed7@raise-unbound-error aK3431@id) (void)) (if (not (and (eq? aK3437@type '$rtd) (not (list? (aK2ed5@binding-value aK3435@b))))) (aK319e@syntax-violation '#f '"not a record type" aK3425@e) (void)) (list 'quote (aK2ed5@binding-value aK3435@b))))))) aK342d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK342b@t)))))) (set! aK4b63@aK305c@type-descriptor-transformer aK305c@type-descriptor-transformer) (set! aK305e@record-type-descriptor-transformer (lambda (aK3439@e aK343a@r aK343b@mr) (let ((aK343f@t aK3439@e)) (let ((aK3441@ls/false (aK30be@syntax-dispatch aK343f@t '(_ any)))) (if (and aK3441@ls/false (apply (lambda (aK3443@id) (aK2eb7@id? aK3443@id)) aK3441@ls/false)) (apply (lambda (aK3445@id) (let ((aK3447@lab (aK2ecd@id->label aK3445@id))) (let ((aK3449@b (aK2ecf@label->binding aK3447@lab aK343a@r))) (let ((aK344b@type (aK2ed3@binding-type aK3449@b))) (begin (if (not aK3447@lab) (aK2ed7@raise-unbound-error aK3445@id) (void)) (if (not (and (eq? aK344b@type '$rtd) (list? (aK2ed5@binding-value aK3449@b)))) (aK319e@syntax-violation '#f '"not a record type" aK3439@e) (void)) (aK30e0@chi-expr (car (aK2ed5@binding-value aK3449@b)) aK343a@r aK343b@mr)))))) aK3441@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK343f@t)))))) (set! aK4b64@aK305e@record-type-descriptor-transformer aK305e@record-type-descriptor-transformer) (set! aK3060@record-constructor-descriptor-transformer (lambda (aK344d@e aK344e@r aK344f@mr) (let ((aK3453@t aK344d@e)) (let ((aK3455@ls/false (aK30be@syntax-dispatch aK3453@t '(_ any)))) (if (and aK3455@ls/false (apply (lambda (aK3457@id) (aK2eb7@id? aK3457@id)) aK3455@ls/false)) (apply (lambda (aK3459@id) (let ((aK345b@lab (aK2ecd@id->label aK3459@id))) (let ((aK345d@b (aK2ecf@label->binding aK345b@lab aK344e@r))) (let ((aK345f@type (aK2ed3@binding-type aK345d@b))) (begin (if (not aK345b@lab) (aK2ed7@raise-unbound-error aK3459@id) (void)) (if (not (and (eq? aK345f@type '$rtd) (list? (aK2ed5@binding-value aK345d@b)))) (aK319e@syntax-violation '#f '"invalid type" aK344d@e) (void)) (aK30e0@chi-expr (cadr (aK2ed5@binding-value aK345d@b)) aK344e@r aK344f@mr)))))) aK3455@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3453@t)))))) (set! aK4b65@aK3060@record-constructor-descriptor-transformer aK3060@record-constructor-descriptor-transformer) (set! aK3062@when-macro (lambda (aK3461@e) (let ((aK3463@t aK3461@e)) (let ((aK3465@ls/false (aK30be@syntax-dispatch aK3463@t '(_ any any . each-any)))) (if aK3465@ls/false (apply (lambda (aK3467@test aK3468@e aK3469@e*) (aK3074@bless (list 'if aK3467@test (cons 'begin (cons aK3468@e aK3469@e*))))) aK3465@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3463@t)))))) (set! aK4b66@aK3062@when-macro aK3062@when-macro) (set! aK3064@unless-macro (lambda (aK346d@e) (let ((aK346f@t aK346d@e)) (let ((aK3471@ls/false (aK30be@syntax-dispatch aK346f@t '(_ any any . each-any)))) (if aK3471@ls/false (apply (lambda (aK3473@test aK3474@e aK3475@e*) (aK3074@bless (list 'if (list 'not aK3473@test) (cons 'begin (cons aK3474@e aK3475@e*))))) aK3471@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK346f@t)))))) (set! aK4b67@aK3064@unless-macro aK3064@unless-macro) (set! aK3066@if-transformer (lambda (aK3479@e aK347a@r aK347b@mr) (let ((aK347f@t aK3479@e)) (let ((aK3481@ls/false (aK30be@syntax-dispatch aK347f@t '(_ any any any)))) (if aK3481@ls/false (apply (lambda (aK3483@e0 aK3484@e1 aK3485@e2) (list 'if (aK30e0@chi-expr aK3483@e0 aK347a@r aK347b@mr) (aK30e0@chi-expr aK3484@e1 aK347a@r aK347b@mr) (aK30e0@chi-expr aK3485@e2 aK347a@r aK347b@mr))) aK3481@ls/false) (let ((aK3489@t aK347f@t)) (let ((aK348b@ls/false (aK30be@syntax-dispatch aK3489@t '(_ any any)))) (if aK348b@ls/false (apply (lambda (aK348d@e0 aK348e@e1) (list 'if (aK30e0@chi-expr aK348d@e0 aK347a@r aK347b@mr) (aK30e0@chi-expr aK348e@e1 aK347a@r aK347b@mr) (aK2e1d@aK2d7e@build-void))) aK348b@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3489@t))))))))) (set! aK4b68@aK3066@if-transformer aK3066@if-transformer) (set! aK3068@and-transformer (lambda (aK3491@e aK3492@r aK3493@mr) (let ((aK3497@t aK3491@e)) (let ((aK3499@ls/false (aK30be@syntax-dispatch aK3497@t '(_ . each-any)))) (if aK3499@ls/false (apply (lambda (aK349b@e*) (cons 'and (aK30dc@chi-expr* aK349b@e* aK3492@r aK3493@mr))) aK3499@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3497@t)))))) (set! aK4b69@aK3068@and-transformer aK3068@and-transformer) (set! aK306a@or-transformer (lambda (aK349d@e aK349e@r aK349f@mr) (let ((aK34a3@t aK349d@e)) (let ((aK34a5@ls/false (aK30be@syntax-dispatch aK34a3@t '(_ . each-any)))) (if aK34a5@ls/false (apply (lambda (aK34a7@e*) (cons 'or (aK30dc@chi-expr* aK34a7@e* aK349e@r aK349f@mr))) aK34a5@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK34a3@t)))))) (set! aK4b6a@aK306a@or-transformer aK306a@or-transformer) (set! aK306c@case-macro (lambda (aK34a9@e) (letrec* ((aK34ac@build-last (lambda (aK34d3@cls) (let ((aK34d5@t aK34d3@cls)) (let ((aK34d7@ls/false (aK30be@syntax-dispatch aK34d5@t '(#(scheme-id else) any . each-any)))) (if aK34d7@ls/false (apply (lambda (aK34d9@e aK34da@e*) (cons 'begin (cons aK34d9@e aK34da@e*))) aK34d7@ls/false) (let ((aK34dd@t aK34d5@t)) (let ((aK34df@ls/false (aK30be@syntax-dispatch aK34dd@t '_))) (if aK34df@ls/false (apply (lambda () (aK34ae@build-one aK34d3@cls '(if #f #f))) aK34df@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK34dd@t))))))))) (aK34ae@build-one (lambda (aK34c5@cls aK34c6@k) (let ((aK34c9@t aK34c5@cls)) (let ((aK34cb@ls/false (aK30be@syntax-dispatch aK34c9@t '(each-any any . each-any)))) (if aK34cb@ls/false (apply (lambda (aK34cd@d* aK34ce@e aK34cf@e*) (list 'if (list 'memv 't (list 'quote aK34cd@d*)) (cons 'begin (cons aK34ce@e aK34cf@e*)) aK34c6@k)) aK34cb@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK34c9@t))))))) (let ((aK34af@t aK34a9@e)) (let ((aK34b1@ls/false (aK30be@syntax-dispatch aK34af@t '(_ any)))) (if aK34b1@ls/false (apply (lambda (aK34b3@expr) (aK3074@bless (cons 'let (cons (list (list 't aK34b3@expr)) '((if #f #f)))))) aK34b1@ls/false) (let ((aK34b5@t aK34af@t)) (let ((aK34b7@ls/false (aK30be@syntax-dispatch aK34b5@t '(_ any any . each-any)))) (if aK34b7@ls/false (apply (lambda (aK34b9@expr aK34ba@cls aK34bb@cls*) (aK3074@bless (list 'let (list (list 't aK34b9@expr)) (let aK34c3@f ((aK34bf@cls aK34ba@cls) (aK34c0@cls* aK34bb@cls*)) (if (null? aK34c0@cls*) (aK34ac@build-last aK34bf@cls) (aK34ae@build-one aK34bf@cls (aK34c3@f (car aK34c0@cls*) (cdr aK34c0@cls*)))))))) aK34b7@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK34b5@t)))))))))) (set! aK4b6b@aK306c@case-macro aK306c@case-macro) (set! aK306e@quote-transformer (lambda (aK34e1@e aK34e2@r aK34e3@mr) (let ((aK34e7@t aK34e1@e)) (let ((aK34e9@ls/false (aK30be@syntax-dispatch aK34e7@t '(_ any)))) (if aK34e9@ls/false (apply (lambda (aK34eb@datum) (list 'quote (aK2ecb@stx->datum aK34eb@datum))) aK34e9@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK34e7@t)))))) (set! aK4b6c@aK306e@quote-transformer aK306e@quote-transformer) (set! aK3070@case-lambda-transformer (lambda (aK34ed@e aK34ee@r aK34ef@mr) (let ((aK34f3@t aK34ed@e)) (let ((aK34f5@ls/false (aK30be@syntax-dispatch aK34f3@t '(_ . #(each (any any . each-any)))))) (if aK34f5@ls/false (apply (lambda (aK34f7@fmls* aK34f8@b* aK34f9@b**) (call-with-values (lambda () (aK30e8@chi-lambda-clause* aK34ed@e aK34f7@fmls* (map cons aK34f8@b* aK34f9@b**) aK34ee@r aK34ef@mr)) (lambda (aK3501@aK34fe aK3502@aK3500) (let ((aK3505@body* aK3502@aK3500) (aK3506@fmls* aK3501@aK34fe)) (aK2e1b@aK2d4e@build-case-lambda '#f aK3506@fmls* aK3505@body*))))) aK34f5@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK34f3@t)))))) (set! aK4b6d@aK3070@case-lambda-transformer aK3070@case-lambda-transformer) (set! aK3072@lambda-transformer (lambda (aK3509@e aK350a@r aK350b@mr) (let ((aK350f@t aK3509@e)) (let ((aK3511@ls/false (aK30be@syntax-dispatch aK350f@t '(_ any any . each-any)))) (if aK3511@ls/false (apply (lambda (aK3513@fmls aK3514@b aK3515@b*) (call-with-values (lambda () (aK30e6@chi-lambda-clause aK3509@e aK3513@fmls (cons aK3514@b aK3515@b*) aK350a@r aK350b@mr)) (lambda (aK351d@aK351a aK351e@aK351c) (let ((aK3521@body aK351e@aK351c) (aK3522@fmls aK351d@aK351a)) (aK2e1a@aK2d4c@build-lambda '#f aK3522@fmls aK3521@body))))) aK3511@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK350f@t)))))) (set! aK4b6e@aK3072@lambda-transformer aK3072@lambda-transformer) (set! aK3074@bless (lambda (aK3525@x) (aK2e9f@mkstx (let aK3529@f ((aK3527@x aK3525@x)) (if (aK2e83@stx? aK3527@x) aK3527@x (if (pair? aK3527@x) (cons (aK3529@f (car aK3527@x)) (aK3529@f (cdr aK3527@x))) (if (symbol? aK3527@x) (aK3046@scheme-stx aK3527@x) (if (vector? aK3527@x) (vector-map aK3529@f aK3527@x) aK3527@x))))) '() '() '()))) (set! aK4b6f@aK3074@bless aK3074@bless) (set! aK3076@with-syntax-macro (lambda (aK352b@e) (let ((aK352d@t aK352b@e)) (let ((aK352f@ls/false (aK30be@syntax-dispatch aK352d@t '(_ #(each (any any)) any . each-any)))) (if aK352f@ls/false (apply (lambda (aK3531@pat* aK3532@expr* aK3533@b aK3534@b*) (let ((aK3539@idn* (let aK353d@f ((aK353b@pat* aK3531@pat*)) (if (null? aK353b@pat*) '() (call-with-values (lambda () (aK30bc@convert-pattern (car aK353b@pat*) '())) (lambda (aK3543@aK3540 aK3544@aK3542) (let ((aK3547@idn* aK3544@aK3542) (aK3548@pat aK3543@aK3540)) (append aK3547@idn* (aK353d@f (cdr aK353b@pat*)))))))))) (begin (aK30e4@verify-formals (map car aK3539@idn*) aK352b@e) (let ((aK354b@t* (aK318c@generate-temporaries aK3532@expr*))) (aK3074@bless (list 'let (map list aK354b@t* aK3532@expr*) (let aK3551@f ((aK354d@pat* aK3531@pat*) (aK354e@t* aK354b@t*)) (if (null? aK354d@pat*) (cons 'begin (cons '#f (cons aK3533@b aK3534@b*))) (list 'syntax-case (car aK354e@t*) '() (list (car aK354d@pat*) (aK3551@f (cdr aK354d@pat*) (cdr aK354e@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car aK354d@pat*)) (car aK354e@t*)))))))))))) aK352f@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK352d@t)))))) (set! aK4b70@aK3076@with-syntax-macro aK3076@with-syntax-macro) (set! aK3078@invalid-fmls-error (lambda (aK3553@stx aK3554@fmls) (let ((aK3557@t aK3554@fmls)) (let ((aK3559@ls/false (aK30be@syntax-dispatch aK3557@t '#(each+ any () any)))) (if aK3559@ls/false (apply (lambda (aK355b@id* aK355c@last) (let aK3561@f ((aK355f@id* (if (aK2eb7@id? aK355c@last) (cons aK355c@last aK355b@id*) (if (aK2ead@syntax-null? aK355c@last) aK355b@id* (aK319e@syntax-violation '#f '"not an identifier" aK3553@stx aK355c@last))))) (if (null? aK355f@id*) (values) (if (not (aK2eb7@id? (car aK355f@id*))) (aK319e@syntax-violation '#f '"not an identifier" aK3553@stx (car aK355f@id*)) (begin (aK3561@f (cdr aK355f@id*)) (if (aK2ec3@bound-id-member? (car aK355f@id*) (cdr aK355f@id*)) (aK319e@syntax-violation '#f '"duplicate binding" aK3553@stx (car aK355f@id*)) (void))))))) aK3559@ls/false) (let ((aK3563@t aK3557@t)) (let ((aK3565@ls/false (aK30be@syntax-dispatch aK3563@t '_))) (if aK3565@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"malformed binding form" aK3553@stx aK3554@fmls)) aK3565@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3563@t))))))))) (set! aK4b71@aK3078@invalid-fmls-error aK3078@invalid-fmls-error) (set! aK307a@let-macro (lambda (aK3567@stx) (let ((aK3569@t aK3567@stx)) (let ((aK356b@ls/false (aK30be@syntax-dispatch aK3569@t '(_ #(each (any any)) any . each-any)))) (if aK356b@ls/false (apply (lambda (aK356d@lhs* aK356e@rhs* aK356f@b aK3570@b*) (if (aK2ebf@valid-bound-ids? aK356d@lhs*) (aK3074@bless (cons (cons 'lambda (cons aK356d@lhs* (cons aK356f@b aK3570@b*))) aK356e@rhs*)) (aK3078@invalid-fmls-error aK3567@stx aK356d@lhs*))) aK356b@ls/false) (let ((aK3575@t aK3569@t)) (let ((aK3577@ls/false (aK30be@syntax-dispatch aK3575@t '(_ any #(each (any any)) any . each-any)))) (if (and aK3577@ls/false (apply (lambda (aK3579@f aK357a@lhs* aK357b@rhs* aK357c@b aK357d@b*) (aK2eb7@id? aK3579@f)) aK3577@ls/false)) (apply (lambda (aK3583@f aK3584@lhs* aK3585@rhs* aK3586@b aK3587@b*) (if (aK2ebf@valid-bound-ids? aK3584@lhs*) (aK3074@bless (cons (list 'letrec (list (list aK3583@f (cons 'lambda (cons aK3584@lhs* (cons aK3586@b aK3587@b*))))) aK3583@f) aK3585@rhs*)) (aK3078@invalid-fmls-error aK3567@stx aK3584@lhs*))) aK3577@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3575@t))))))))) (set! aK4b72@aK307a@let-macro aK307a@let-macro) (set! aK307c@let-values-macro (lambda (aK358d@stx) (letrec* ((aK3590@rename (lambda (aK35f5@x aK35f6@old* aK35f7@new*) (begin (if (not (aK2eb7@id? aK35f5@x)) (aK319e@syntax-violation '#f '"not an indentifier" aK358d@stx aK35f5@x) (void)) (if (aK2ec3@bound-id-member? aK35f5@x aK35f6@old*) (aK319e@syntax-violation '#f '"duplicate binding" aK358d@stx aK35f5@x) (void)) (let ((aK35fb@y (gensym (aK31a4@syntax->datum aK35f5@x)))) (values aK35fb@y (cons aK35f5@x aK35f6@old*) (cons aK35fb@y aK35f7@new*)))))) (aK3592@rename* (lambda (aK35e3@x* aK35e4@old* aK35e5@new*) (if (null? aK35e3@x*) (values '() aK35e4@old* aK35e5@new*) (call-with-values (lambda () (aK3590@rename (car aK35e3@x*) aK35e4@old* aK35e5@new*)) (lambda (aK35e9@x aK35ea@old* aK35eb@new*) (call-with-values (lambda () (aK3592@rename* (cdr aK35e3@x*) aK35ea@old* aK35eb@new*)) (lambda (aK35ef@x* aK35f0@old* aK35f1@new*) (values (cons aK35e9@x aK35ef@x*) aK35f0@old* aK35f1@new*))))))))) (let ((aK3593@t aK358d@stx)) (let ((aK3595@ls/false (aK30be@syntax-dispatch aK3593@t '(_ () any . each-any)))) (if aK3595@ls/false (apply (lambda (aK3597@b aK3598@b*) (cons* (aK3074@bless 'let) '() aK3597@b aK3598@b*)) aK3595@ls/false) (let ((aK359b@t aK3593@t)) (let ((aK359d@ls/false (aK30be@syntax-dispatch aK359b@t '(_ #(each (any any)) any . each-any)))) (if aK359d@ls/false (apply (lambda (aK359f@lhs* aK35a0@rhs* aK35a1@b aK35a2@b*) (aK3074@bless (let aK35af@f ((aK35a7@lhs* aK359f@lhs*) (aK35a8@rhs* aK35a0@rhs*) (aK35a9@old* '()) (aK35aa@new* '())) (if (null? aK35a7@lhs*) (cons 'let (cons (map list aK35a9@old* aK35aa@new*) (cons aK35a1@b aK35a2@b*))) (let ((aK35b1@t (car aK35a7@lhs*))) (let ((aK35b3@ls/false (aK30be@syntax-dispatch aK35b1@t 'each-any))) (if aK35b3@ls/false (apply (lambda (aK35b5@x*) (call-with-values (lambda () (aK3592@rename* aK35b5@x* aK35a9@old* aK35aa@new*)) (lambda (aK35bd@aK35b8 aK35be@aK35ba aK35bf@aK35bc) (let ((aK35c3@new* aK35bf@aK35bc) (aK35c4@old* aK35be@aK35ba) (aK35c5@y* aK35bd@aK35b8)) (list 'call-with-values (list 'lambda '() (car aK35a8@rhs*)) (list 'lambda aK35c5@y* (aK35af@f (cdr aK35a7@lhs*) (cdr aK35a8@rhs*) aK35c4@old* aK35c3@new*))))))) aK35b3@ls/false) (let ((aK35c9@t aK35b1@t)) (let ((aK35cb@ls/false (aK30be@syntax-dispatch aK35c9@t '#(each+ any () any)))) (if aK35cb@ls/false (apply (lambda (aK35cd@x* aK35ce@x) (call-with-values (lambda () (aK3590@rename aK35ce@x aK35a9@old* aK35aa@new*)) (lambda (aK35d1@y aK35d2@old* aK35d3@new*) (call-with-values (lambda () (aK3592@rename* aK35cd@x* aK35d2@old* aK35d3@new*)) (lambda (aK35d7@y* aK35d8@old* aK35d9@new*) (list 'call-with-values (list 'lambda '() (car aK35a8@rhs*)) (list 'lambda (append aK35d7@y* aK35d1@y) (aK35af@f (cdr aK35a7@lhs*) (cdr aK35a8@rhs*) aK35d8@old* aK35d9@new*)))))))) aK35cb@ls/false) (let ((aK35dd@t aK35c9@t)) (let ((aK35df@ls/false (aK30be@syntax-dispatch aK35dd@t 'any))) (if aK35df@ls/false (apply (lambda (aK35e1@others) (aK319e@syntax-violation '#f '"malformed bindings" aK358d@stx aK35e1@others)) aK35df@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK35dd@t)))))))))))))) aK359d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK359b@t)))))))))) (set! aK4b73@aK307c@let-values-macro aK307c@let-values-macro) (set! aK307e@let*-values-macro (lambda (aK35fd@stx) (letrec* ((aK3600@check (lambda (aK362f@x*) (if (not (null? aK362f@x*)) (let ((aK3631@x (car aK362f@x*))) (begin (if (not (aK2eb7@id? aK3631@x)) (aK319e@syntax-violation '#f '"not an identifier" aK35fd@stx aK3631@x) (void)) (aK3600@check (cdr aK362f@x*)) (if (aK2ec3@bound-id-member? aK3631@x (cdr aK362f@x*)) (aK319e@syntax-violation '#f '"duplicate identifier" aK35fd@stx aK3631@x) (void)))) (void))))) (let ((aK3601@t aK35fd@stx)) (let ((aK3603@ls/false (aK30be@syntax-dispatch aK3601@t '(_ () any . each-any)))) (if aK3603@ls/false (apply (lambda (aK3605@b aK3606@b*) (cons* (aK3074@bless 'let) '() aK3605@b aK3606@b*)) aK3603@ls/false) (let ((aK3609@t aK3601@t)) (let ((aK360b@ls/false (aK30be@syntax-dispatch aK3609@t '(_ #(each (any any)) any . each-any)))) (if aK360b@ls/false (apply (lambda (aK360d@lhs* aK360e@rhs* aK360f@b aK3610@b*) (aK3074@bless (let aK3619@f ((aK3615@lhs* aK360d@lhs*) (aK3616@rhs* aK360e@rhs*)) (if (null? aK3615@lhs*) (cons 'begin (cons aK360f@b aK3610@b*)) (let ((aK361b@t (car aK3615@lhs*))) (let ((aK361d@ls/false (aK30be@syntax-dispatch aK361b@t 'each-any))) (if aK361d@ls/false (apply (lambda (aK361f@x*) (begin (aK3600@check aK361f@x*) (list 'call-with-values (list 'lambda '() (car aK3616@rhs*)) (list 'lambda aK361f@x* (aK3619@f (cdr aK3615@lhs*) (cdr aK3616@rhs*)))))) aK361d@ls/false) (let ((aK3621@t aK361b@t)) (let ((aK3623@ls/false (aK30be@syntax-dispatch aK3621@t '#(each+ any () any)))) (if aK3623@ls/false (apply (lambda (aK3625@x* aK3626@x) (begin (aK3600@check (cons aK3626@x aK3625@x*)) (list 'call-with-values (list 'lambda '() (car aK3616@rhs*)) (list 'lambda (append aK3625@x* aK3626@x) (aK3619@f (cdr aK3615@lhs*) (cdr aK3616@rhs*)))))) aK3623@ls/false) (let ((aK3629@t aK3621@t)) (let ((aK362b@ls/false (aK30be@syntax-dispatch aK3629@t 'any))) (if aK362b@ls/false (apply (lambda (aK362d@others) (aK319e@syntax-violation '#f '"malformed bindings" aK35fd@stx aK362d@others)) aK362b@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3629@t)))))))))))))) aK360b@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3609@t)))))))))) (set! aK4b74@aK307e@let*-values-macro aK307e@let*-values-macro) (set! aK3080@trace-lambda-macro (lambda (aK3633@stx) (let ((aK3635@t aK3633@stx)) (let ((aK3637@ls/false (aK30be@syntax-dispatch aK3635@t '(_ any each-any any . each-any)))) (if aK3637@ls/false (apply (lambda (aK3639@who aK363a@fmls aK363b@b aK363c@b*) (if (aK2ebf@valid-bound-ids? aK363a@fmls) (aK3074@bless (list 'make-traced-procedure (list 'quote aK3639@who) (cons 'lambda (cons aK363a@fmls (cons aK363b@b aK363c@b*))))) (aK3078@invalid-fmls-error aK3633@stx aK363a@fmls))) aK3637@ls/false) (let ((aK3641@t aK3635@t)) (let ((aK3643@ls/false (aK30be@syntax-dispatch aK3641@t '(_ any #(each+ any () any) any . each-any)))) (if aK3643@ls/false (apply (lambda (aK3645@who aK3646@fmls aK3647@last aK3648@b aK3649@b*) (if (aK2ebf@valid-bound-ids? (cons aK3647@last aK3646@fmls)) (aK3074@bless (list 'make-traced-procedure (list 'quote aK3645@who) (cons 'lambda (cons (append aK3646@fmls aK3647@last) (cons aK3648@b aK3649@b*))))) (aK3078@invalid-fmls-error aK3633@stx (append aK3646@fmls aK3647@last)))) aK3643@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3641@t))))))))) (set! aK4b75@aK3080@trace-lambda-macro aK3080@trace-lambda-macro) (set! aK3082@trace-define-macro (lambda (aK364f@stx) (let ((aK3651@t aK364f@stx)) (let ((aK3653@ls/false (aK30be@syntax-dispatch aK3651@t '(_ (any . each-any) any . each-any)))) (if aK3653@ls/false (apply (lambda (aK3655@who aK3656@fmls aK3657@b aK3658@b*) (if (aK2ebf@valid-bound-ids? aK3656@fmls) (aK3074@bless (list 'define aK3655@who (list 'make-traced-procedure (list 'quote aK3655@who) (cons 'lambda (cons aK3656@fmls (cons aK3657@b aK3658@b*)))))) (aK3078@invalid-fmls-error aK364f@stx aK3656@fmls))) aK3653@ls/false) (let ((aK365d@t aK3651@t)) (let ((aK365f@ls/false (aK30be@syntax-dispatch aK365d@t '(_ (any . #(each+ any () any)) any . each-any)))) (if aK365f@ls/false (apply (lambda (aK3661@who aK3662@fmls aK3663@last aK3664@b aK3665@b*) (if (aK2ebf@valid-bound-ids? (cons aK3663@last aK3662@fmls)) (aK3074@bless (list 'define aK3661@who (list 'make-traced-procedure (list 'quote aK3661@who) (cons 'lambda (cons (append aK3662@fmls aK3663@last) (cons aK3664@b aK3665@b*)))))) (aK3078@invalid-fmls-error aK364f@stx (append aK3662@fmls aK3663@last)))) aK365f@ls/false) (let ((aK366b@t aK365d@t)) (let ((aK366d@ls/false (aK30be@syntax-dispatch aK366b@t '(_ any any)))) (if aK366d@ls/false (apply (lambda (aK366f@who aK3670@expr) (if (aK2eb7@id? aK366f@who) (aK3074@bless (list 'define aK366f@who (list 'let (list (list 'v aK3670@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote aK366f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (aK319e@syntax-violation '#f '"invalid name" aK364f@stx))) aK366d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK366b@t)))))))))))) (set! aK4b76@aK3082@trace-define-macro aK3082@trace-define-macro) (set! aK3084@trace-define-syntax-macro (lambda (aK3673@stx) (let ((aK3675@t aK3673@stx)) (let ((aK3677@ls/false (aK30be@syntax-dispatch aK3675@t '(_ any any)))) (if aK3677@ls/false (apply (lambda (aK3679@who aK367a@expr) (if (aK2eb7@id? aK3679@who) (aK3074@bless (list 'define-syntax aK3679@who (list 'make-traced-macro (list 'quote aK3679@who) aK367a@expr))) (aK319e@syntax-violation '#f '"invalid name" aK3673@stx))) aK3677@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3675@t)))))) (set! aK4b77@aK3084@trace-define-syntax-macro aK3084@trace-define-syntax-macro) (set! aK3086@trace-let/rec-syntax (lambda (aK367d@who) (lambda (aK367f@stx) (let ((aK3681@t aK367f@stx)) (let ((aK3683@ls/false (aK30be@syntax-dispatch aK3681@t '(_ #(each (any any)) any . each-any)))) (if aK3683@ls/false (apply (lambda (aK3685@lhs* aK3686@rhs* aK3687@b aK3688@b*) (if (aK2ebf@valid-bound-ids? aK3685@lhs*) (let ((aK368d@rhs* (map (lambda (aK368f@lhs aK3690@rhs) (list 'make-traced-macro (list 'quote aK368f@lhs) aK3690@rhs)) aK3685@lhs* aK3686@rhs*))) (aK3074@bless (cons aK367d@who (cons (map list aK3685@lhs* aK368d@rhs*) (cons aK3687@b aK3688@b*))))) (aK3078@invalid-fmls-error aK367f@stx aK3685@lhs*))) aK3683@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3681@t))))))) (set! aK4b78@aK3086@trace-let/rec-syntax aK3086@trace-let/rec-syntax) (set! aK3088@trace-let-syntax-macro (aK3086@trace-let/rec-syntax 'let-syntax)) (set! aK4b79@aK3088@trace-let-syntax-macro aK3088@trace-let-syntax-macro) (set! aK308a@trace-letrec-syntax-macro (aK3086@trace-let/rec-syntax 'letrec-syntax)) (set! aK4b7a@aK308a@trace-letrec-syntax-macro aK308a@trace-letrec-syntax-macro) (set! aK308c@guard-macro (lambda (aK3693@x) (letrec* ((aK3696@gen-clauses (lambda (aK36ad@con aK36ae@outerk aK36af@clause*) (letrec* ((aK36b4@f (lambda (aK36ed@x aK36ee@k) (let ((aK36f1@t aK36ed@x)) (let ((aK36f3@ls/false (aK30be@syntax-dispatch aK36f1@t '(any #(scheme-id =>) any)))) (if aK36f3@ls/false (apply (lambda (aK36f5@e aK36f6@p) (let ((aK36f9@t (gensym))) (list 'let (list (list aK36f9@t aK36f5@e)) (list 'if aK36f9@t (list aK36f6@p aK36f9@t) aK36ee@k)))) aK36f3@ls/false) (let ((aK36fb@t aK36f1@t)) (let ((aK36fd@ls/false (aK30be@syntax-dispatch aK36fb@t '(any)))) (if aK36fd@ls/false (apply (lambda (aK36ff@e) (let ((aK3701@t (gensym))) (list 'let (list (list aK3701@t aK36ff@e)) (list 'if aK3701@t aK3701@t aK36ee@k)))) aK36fd@ls/false) (let ((aK3703@t aK36fb@t)) (let ((aK3705@ls/false (aK30be@syntax-dispatch aK3703@t '(any any . each-any)))) (if aK3705@ls/false (apply (lambda (aK3707@e aK3708@v aK3709@v*) (list 'if aK3707@e (cons 'begin (cons aK3708@v aK3709@v*)) aK36ee@k)) aK3705@ls/false) (let ((aK370d@t aK3703@t)) (let ((aK370f@ls/false (aK30be@syntax-dispatch aK370d@t '_))) (if aK370f@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid guard clause" aK36ed@x)) aK370f@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK370d@t))))))))))))))) (aK36b6@f* (lambda (aK36c3@x*) (let ((aK36c5@t aK36c3@x*)) (let ((aK36c7@ls/false (aK30be@syntax-dispatch aK36c5@t '()))) (if aK36c7@ls/false (apply (lambda () (let ((aK36c9@g (gensym))) (values (list aK36c9@g (list 'lambda '() (list 'raise-continuable aK36ad@con))) aK36c9@g))) aK36c7@ls/false) (let ((aK36cb@t aK36c5@t)) (let ((aK36cd@ls/false (aK30be@syntax-dispatch aK36cb@t '((#(scheme-id else) any . each-any))))) (if aK36cd@ls/false (apply (lambda (aK36cf@e aK36d0@e*) (values (cons 'begin (cons aK36cf@e aK36d0@e*)) '#f)) aK36cd@ls/false) (let ((aK36d3@t aK36cb@t)) (let ((aK36d5@ls/false (aK30be@syntax-dispatch aK36d3@t '(any . any)))) (if aK36d5@ls/false (apply (lambda (aK36d7@cls aK36d8@cls*) (call-with-values (lambda () (aK36b6@f* aK36d8@cls*)) (lambda (aK36df@aK36dc aK36e0@aK36de) (let ((aK36e3@g aK36e0@aK36de) (aK36e4@e aK36df@aK36dc)) (values (aK36b4@f aK36d7@cls aK36e4@e) aK36e3@g))))) aK36d5@ls/false) (let ((aK36e7@t aK36d3@t)) (let ((aK36e9@ls/false (aK30be@syntax-dispatch aK36e7@t 'any))) (if aK36e9@ls/false (apply (lambda (aK36eb@others) (aK319e@syntax-violation '#f '"invalid guard clause" aK36eb@others)) aK36e9@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK36e7@t)))))))))))))))) (call-with-values (lambda () (aK36b6@f* aK36af@clause*)) (lambda (aK36bb@aK36b8 aK36bc@aK36ba) (let ((aK36bf@raisek aK36bc@aK36ba) (aK36c0@code aK36bb@aK36b8)) (if aK36bf@raisek (list (list 'call/cc (list 'lambda (list aK36bf@raisek) (list aK36ae@outerk (list 'lambda '() aK36c0@code))))) (list aK36ae@outerk (list 'lambda '() aK36c0@code)))))))))) (let ((aK3697@t aK3693@x)) (let ((aK3699@ls/false (aK30be@syntax-dispatch aK3697@t '(_ (any . each-any) any . each-any)))) (if (and aK3699@ls/false (apply (lambda (aK369b@con aK369c@clause* aK369d@b aK369e@b*) (aK2eb7@id? aK369b@con)) aK3699@ls/false)) (apply (lambda (aK36a3@con aK36a4@clause* aK36a5@b aK36a6@b*) (let ((aK36ab@outerk (gensym))) (aK3074@bless (list (list 'call/cc (list 'lambda (list aK36ab@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list aK36a3@con) (aK3696@gen-clauses aK36a3@con aK36ab@outerk aK36a4@clause*)) (cons 'lambda (cons '() (cons aK36a5@b aK36a6@b*))))))))))) aK3699@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3697@t))))))) (set! aK4b7b@aK308c@guard-macro aK308c@guard-macro) (set! aK308e@define-enumeration-macro (lambda (aK3711@stx) (letrec* ((aK3714@set? (lambda (aK372d@x) (or (null? aK372d@x) (and (not (memq (car aK372d@x) (cdr aK372d@x))) (aK3714@set? (cdr aK372d@x)))))) (aK3716@remove-dups (lambda (aK372b@ls) (if (null? aK372b@ls) '() (cons (car aK372b@ls) (aK3716@remove-dups (remq (car aK372b@ls) (cdr aK372b@ls)))))))) (let ((aK3717@t aK3711@stx)) (let ((aK3719@ls/false (aK30be@syntax-dispatch aK3717@t '(_ any each-any any)))) (if (and aK3719@ls/false (apply (lambda (aK371b@name aK371c@id* aK371d@maker) (and (aK2eb7@id? aK371b@name) (aK2eb7@id? aK371d@maker) (for-all aK2eb7@id? aK371c@id*))) aK3719@ls/false)) (apply (lambda (aK3721@name aK3722@id* aK3723@maker) (let ((aK3727@name* (aK3716@remove-dups (aK31a4@syntax->datum aK3722@id*))) (aK3728@mk (gensym))) (aK3074@bless (list 'begin (list 'define aK3728@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote aK3727@name*)))) (list 'define-syntax aK3721@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote aK3727@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote aK3721@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax aK3723@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote aK3723@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote aK3727@name*)) (cons 'syntax-violation (cons (list 'quote aK3723@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons aK3728@mk '('(n* ...))))))))))))) aK3719@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3717@t))))))) (set! aK4b7c@aK308e@define-enumeration-macro aK308e@define-enumeration-macro) (set! aK3090@time-macro (lambda (aK372f@stx) (let ((aK3731@t aK372f@stx)) (let ((aK3733@ls/false (aK30be@syntax-dispatch aK3731@t '(_ any)))) (if aK3733@ls/false (apply (lambda (aK3735@expr) (aK3074@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() aK3735@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) aK3733@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3731@t)))))) (set! aK4b7d@aK3090@time-macro aK3090@time-macro) (set! aK3092@delay-macro (lambda (aK3737@stx) (let ((aK3739@t aK3737@stx)) (let ((aK373b@ls/false (aK30be@syntax-dispatch aK3739@t '(_ any)))) (if aK373b@ls/false (apply (lambda (aK373d@expr) (aK3074@bless (list 'make-promise (list 'lambda '() aK373d@expr)))) aK373b@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3739@t)))))) (set! aK4b7e@aK3092@delay-macro aK3092@delay-macro) (set! aK3094@assert-macro (lambda (aK373f@stx) (let ((aK3741@t aK373f@stx)) (let ((aK3743@ls/false (aK30be@syntax-dispatch aK3741@t '(_ any)))) (if aK3743@ls/false (apply (lambda (aK3745@expr) (let ((aK3747@pos (or (aK3196@expression-position aK373f@stx) (aK3196@expression-position aK3745@expr)))) (aK3074@bless (list 'let (list (list 'x aK3745@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote aK3745@expr) (list 'quote aK3747@pos))))))) aK3743@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3741@t)))))) (set! aK4b7f@aK3094@assert-macro aK3094@assert-macro) (set! aK3096@endianness-macro (lambda (aK3749@stx) (let ((aK374b@t aK3749@stx)) (let ((aK374d@ls/false (aK30be@syntax-dispatch aK374b@t '(_ any)))) (if aK374d@ls/false (apply (lambda (aK374f@e) (let ((aK3751@t (aK31a4@syntax->datum aK374f@e))) (if (memv aK3751@t '(little)) (aK3074@bless ''little) (if (memv aK3751@t '(big)) (aK3074@bless ''big) (aK319e@syntax-violation '#f '"endianness must be big or little" aK3749@stx))))) aK374d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK374b@t)))))) (set! aK4b80@aK3096@endianness-macro aK3096@endianness-macro) (set! aK3098@identifier-syntax-macro (lambda (aK3753@stx) (let ((aK3755@t aK3753@stx)) (let ((aK3757@ls/false (aK30be@syntax-dispatch aK3755@t '(_ any)))) (if aK3757@ls/false (apply (lambda (aK3759@expr) (aK3074@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax aK3759@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax aK3759@expr) '((syntax (e* ...)))))))))) aK3757@ls/false) (let ((aK375b@t aK3755@t)) (let ((aK375d@ls/false (aK30be@syntax-dispatch aK375b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and aK375d@ls/false (apply (lambda (aK375f@id1 aK3760@expr1 aK3761@id2 aK3762@expr2 aK3763@expr3) (and (aK2eb7@id? aK375f@id1) (aK2eb7@id? aK3761@id2) (aK2eb7@id? aK3762@expr2))) aK375d@ls/false)) (apply (lambda (aK3769@id1 aK376a@expr1 aK376b@id2 aK376c@expr2 aK376d@expr3) (aK3074@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax aK376a@expr1)) (list (list 'set! 'id aK376c@expr2) (list 'syntax aK376d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons aK376a@expr1 '(e* ...))))))))) aK375d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK375b@t))))))))) (set! aK4b81@aK3098@identifier-syntax-macro aK3098@identifier-syntax-macro) (set! aK309a@do-macro (lambda (aK3773@stx) (letrec* ((aK3776@bind (lambda (aK378d@x) (let ((aK378f@t aK378d@x)) (let ((aK3791@ls/false (aK30be@syntax-dispatch aK378f@t '(any any)))) (if aK3791@ls/false (apply (lambda (aK3793@x aK3794@init) (list aK3793@x aK3794@init aK3793@x)) aK3791@ls/false) (let ((aK3797@t aK378f@t)) (let ((aK3799@ls/false (aK30be@syntax-dispatch aK3797@t '(any any any)))) (if aK3799@ls/false (apply (lambda (aK379b@x aK379c@init aK379d@step) (list aK379b@x aK379c@init aK379d@step)) aK3799@ls/false) (let ((aK37a1@t aK3797@t)) (let ((aK37a3@ls/false (aK30be@syntax-dispatch aK37a1@t '_))) (if aK37a3@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid binding" aK3773@stx)) aK37a3@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK37a1@t))))))))))))) (let ((aK3777@t aK3773@stx)) (let ((aK3779@ls/false (aK30be@syntax-dispatch aK3777@t '(_ each-any (any . each-any) . each-any)))) (if aK3779@ls/false (apply (lambda (aK377b@binding* aK377c@test aK377d@expr* aK377e@command*) (let ((aK3783@t (map aK3776@bind aK377b@binding*))) (let ((aK3785@ls/false (aK30be@syntax-dispatch aK3783@t '#(each (any any any))))) (if aK3785@ls/false (apply (lambda (aK3787@x* aK3788@init* aK3789@step*) (if (aK2ebf@valid-bound-ids? aK3787@x*) (aK3074@bless (list 'letrec (list (list 'loop (list 'lambda aK3787@x* (list 'if aK377c@test (cons 'begin (cons '(if #f #f) aK377d@expr*)) (cons 'begin (append aK377e@command* (list (cons 'loop aK3789@step*)))))))) (cons 'loop aK3788@init*))) (aK319e@syntax-violation '#f '"invalid bindings" aK3773@stx))) aK3785@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3783@t))))) aK3779@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3777@t))))))) (set! aK4b82@aK309a@do-macro aK309a@do-macro) (set! aK309c@let*-macro (lambda (aK37a5@stx) (let ((aK37a7@t aK37a5@stx)) (let ((aK37a9@ls/false (aK30be@syntax-dispatch aK37a7@t '(_ #(each (any any)) any . each-any)))) (if (and aK37a9@ls/false (apply (lambda (aK37ab@lhs* aK37ac@rhs* aK37ad@b aK37ae@b*) (for-all aK2eb7@id? aK37ab@lhs*)) aK37a9@ls/false)) (apply (lambda (aK37b3@lhs* aK37b4@rhs* aK37b5@b aK37b6@b*) (aK3074@bless (let aK37bd@f ((aK37bb@x* (map list aK37b3@lhs* aK37b4@rhs*))) (if (null? aK37bb@x*) (cons 'let (cons '() (cons aK37b5@b aK37b6@b*))) (list 'let (list (car aK37bb@x*)) (aK37bd@f (cdr aK37bb@x*))))))) aK37a9@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK37a7@t)))))) (set! aK4b83@aK309c@let*-macro aK309c@let*-macro) (set! aK309e@or-macro (lambda (aK37bf@stx) (let ((aK37c1@t aK37bf@stx)) (let ((aK37c3@ls/false (aK30be@syntax-dispatch aK37c1@t '(_)))) (if aK37c3@ls/false (apply (lambda () '#f) aK37c3@ls/false) (let ((aK37c5@t aK37c1@t)) (let ((aK37c7@ls/false (aK30be@syntax-dispatch aK37c5@t '(_ any . each-any)))) (if aK37c7@ls/false (apply (lambda (aK37c9@e aK37ca@e*) (aK3074@bless (let aK37d1@f ((aK37cd@e aK37c9@e) (aK37ce@e* aK37ca@e*)) (if (null? aK37ce@e*) (list 'begin '#f aK37cd@e) (list 'let (list (list 't aK37cd@e)) (list 'if 't 't (aK37d1@f (car aK37ce@e*) (cdr aK37ce@e*)))))))) aK37c7@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK37c5@t))))))))) (set! aK4b84@aK309e@or-macro aK309e@or-macro) (set! aK30a0@and-macro (lambda (aK37d3@stx) (let ((aK37d5@t aK37d3@stx)) (let ((aK37d7@ls/false (aK30be@syntax-dispatch aK37d5@t '(_)))) (if aK37d7@ls/false (apply (lambda () '#t) aK37d7@ls/false) (let ((aK37d9@t aK37d5@t)) (let ((aK37db@ls/false (aK30be@syntax-dispatch aK37d9@t '(_ any . each-any)))) (if aK37db@ls/false (apply (lambda (aK37dd@e aK37de@e*) (aK3074@bless (let aK37e5@f ((aK37e1@e aK37dd@e) (aK37e2@e* aK37de@e*)) (if (null? aK37e2@e*) (list 'begin '#f aK37e1@e) (cons 'if (cons aK37e1@e (cons (aK37e5@f (car aK37e2@e*) (cdr aK37e2@e*)) '(#f)))))))) aK37db@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK37d9@t))))))))) (set! aK4b85@aK30a0@and-macro aK30a0@and-macro) (set! aK30a2@cond-macro (lambda (aK37e7@stx) (let ((aK37e9@t aK37e7@stx)) (let ((aK37eb@ls/false (aK30be@syntax-dispatch aK37e9@t '(_ any . each-any)))) (if aK37eb@ls/false (apply (lambda (aK37ed@cls aK37ee@cls*) (aK3074@bless (let aK37f5@f ((aK37f1@cls aK37ed@cls) (aK37f2@cls* aK37ee@cls*)) (if (null? aK37f2@cls*) (let ((aK37f7@t aK37f1@cls)) (let ((aK37f9@ls/false (aK30be@syntax-dispatch aK37f7@t '(#(scheme-id else) any . each-any)))) (if aK37f9@ls/false (apply (lambda (aK37fb@e aK37fc@e*) (cons 'begin (cons aK37fb@e aK37fc@e*))) aK37f9@ls/false) (let ((aK37ff@t aK37f7@t)) (let ((aK3801@ls/false (aK30be@syntax-dispatch aK37ff@t '(any #(scheme-id =>) any)))) (if aK3801@ls/false (apply (lambda (aK3803@e aK3804@p) (list 'let (list (list 't aK3803@e)) (list 'if 't (cons aK3804@p '(t))))) aK3801@ls/false) (let ((aK3807@t aK37ff@t)) (let ((aK3809@ls/false (aK30be@syntax-dispatch aK3807@t '(any)))) (if aK3809@ls/false (apply (lambda (aK380b@e) (cons 'or (cons aK380b@e '((if #f #f))))) aK3809@ls/false) (let ((aK380d@t aK3807@t)) (let ((aK380f@ls/false (aK30be@syntax-dispatch aK380d@t '(any . each-any)))) (if aK380f@ls/false (apply (lambda (aK3811@e aK3812@e*) (list 'if aK3811@e (cons 'begin aK3812@e*))) aK380f@ls/false) (let ((aK3815@t aK380d@t)) (let ((aK3817@ls/false (aK30be@syntax-dispatch aK3815@t '_))) (if aK3817@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid last clause" aK37e7@stx)) aK3817@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3815@t)))))))))))))))) (let ((aK3819@t aK37f1@cls)) (let ((aK381b@ls/false (aK30be@syntax-dispatch aK3819@t '(#(scheme-id else) any . each-any)))) (if aK381b@ls/false (apply (lambda (aK381d@e aK381e@e*) (aK319e@syntax-violation '#f '"incorrect position of keyword else" aK37e7@stx)) aK381b@ls/false) (let ((aK3821@t aK3819@t)) (let ((aK3823@ls/false (aK30be@syntax-dispatch aK3821@t '(any #(scheme-id =>) any)))) (if aK3823@ls/false (apply (lambda (aK3825@e aK3826@p) (list 'let (list (list 't aK3825@e)) (list 'if 't (cons aK3826@p '(t)) (aK37f5@f (car aK37f2@cls*) (cdr aK37f2@cls*))))) aK3823@ls/false) (let ((aK3829@t aK3821@t)) (let ((aK382b@ls/false (aK30be@syntax-dispatch aK3829@t '(any)))) (if aK382b@ls/false (apply (lambda (aK382d@e) (list 'or aK382d@e (aK37f5@f (car aK37f2@cls*) (cdr aK37f2@cls*)))) aK382b@ls/false) (let ((aK382f@t aK3829@t)) (let ((aK3831@ls/false (aK30be@syntax-dispatch aK382f@t '(any . each-any)))) (if aK3831@ls/false (apply (lambda (aK3833@e aK3834@e*) (list 'if aK3833@e (cons 'begin aK3834@e*) (aK37f5@f (car aK37f2@cls*) (cdr aK37f2@cls*)))) aK3831@ls/false) (let ((aK3837@t aK382f@t)) (let ((aK3839@ls/false (aK30be@syntax-dispatch aK3837@t '_))) (if aK3839@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid last clause" aK37e7@stx)) aK3839@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3837@t)))))))))))))))))))) aK37eb@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK37e9@t)))))) (set! aK4b86@aK30a2@cond-macro aK30a2@cond-macro) (set! aK30a4@do-include (lambda (aK383b@stx aK383c@id aK383d@filename) (let ((aK3841@filename (aK2ecb@stx->datum aK383d@filename))) (begin (if (not (and (string? aK3841@filename) (aK2eb7@id? aK383c@id))) (aK319e@syntax-violation '#f '"invalid syntax" aK383b@stx) (void)) (cons (aK3074@bless 'begin) (with-input-from-file aK3841@filename (lambda () (let aK3845@f ((aK3843@ls '())) (let ((aK3847@x (aK29f9@aK28c9@read-annotated))) (if (eof-object? aK3847@x) (reverse aK3843@ls) (aK3845@f (cons (aK2e97@datum->stx aK383c@id aK3847@x) aK3843@ls)))))))))))) (set! aK4b87@aK30a4@do-include aK30a4@do-include) (set! aK30a6@include-macro (lambda (aK3849@e) (let ((aK384b@t aK3849@e)) (let ((aK384d@ls/false (aK30be@syntax-dispatch aK384b@t '(any any)))) (if aK384d@ls/false (apply (lambda (aK384f@id aK3850@filename) (aK30a4@do-include aK3849@e aK384f@id aK3850@filename)) aK384d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK384b@t)))))) (set! aK4b88@aK30a6@include-macro aK30a6@include-macro) (set! aK30a8@include-into-macro (lambda (aK3853@e) (let ((aK3855@t aK3853@e)) (let ((aK3857@ls/false (aK30be@syntax-dispatch aK3855@t '(_ any any)))) (if aK3857@ls/false (apply (lambda (aK3859@id aK385a@filename) (aK30a4@do-include aK3853@e aK3859@id aK385a@filename)) aK3857@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3855@t)))))) (set! aK4b89@aK30a8@include-into-macro aK30a8@include-into-macro) (set! aK30aa@syntax-rules-macro (lambda (aK385d@e) (let ((aK385f@t aK385d@e)) (let ((aK3861@ls/false (aK30be@syntax-dispatch aK385f@t '(_ each-any . #(each (any any)))))) (if aK3861@ls/false (apply (lambda (aK3863@lits aK3864@pat* aK3865@tmp*) (begin (aK30c4@verify-literals aK3863@lits aK385d@e) (aK3074@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons aK3863@lits (map (lambda (aK3869@pat aK386a@tmp) (let ((aK386d@t aK3869@pat)) (let ((aK386f@ls/false (aK30be@syntax-dispatch aK386d@t '(_ . any)))) (if aK386f@ls/false (apply (lambda (aK3871@rest) (list (cons 'g aK3871@rest) (list 'syntax aK386a@tmp))) aK386f@ls/false) (let ((aK3873@t aK386d@t)) (let ((aK3875@ls/false (aK30be@syntax-dispatch aK3873@t '_))) (if aK3875@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid syntax-rules pattern" aK385d@e aK3869@pat)) aK3875@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3873@t)))))))) aK3864@pat* aK3865@tmp*)))))))) aK3861@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK385f@t)))))) (set! aK4b8a@aK30aa@syntax-rules-macro aK30aa@syntax-rules-macro) (set! aK30ac@quasiquote-macro (letrec* ((aK3878@datum (lambda (aK3979@x) (list (aK3046@scheme-stx 'quote) (aK2e9f@mkstx aK3979@x '() '() '())))) (aK3894@quasicons* (lambda (aK3971@x aK3972@y) (let aK3977@f ((aK3975@x aK3971@x)) (if (null? aK3975@x) aK3972@y (aK3896@quasicons (car aK3975@x) (aK3977@f (cdr aK3975@x))))))) (aK3896@quasicons (lambda (aK394b@x aK394c@y) (let ((aK394f@t aK394c@y)) (let ((aK3951@ls/false (aK30be@syntax-dispatch aK394f@t '(#(scheme-id quote) any)))) (if aK3951@ls/false (apply (lambda (aK3953@dy) (let ((aK3955@t aK394b@x)) (let ((aK3957@ls/false (aK30be@syntax-dispatch aK3955@t '(#(scheme-id quote) any)))) (if aK3957@ls/false (apply (lambda (aK3959@dx) (list (aK3046@scheme-stx 'quote) (cons aK3959@dx aK3953@dy))) aK3957@ls/false) (let ((aK395b@t aK3955@t)) (let ((aK395d@ls/false (aK30be@syntax-dispatch aK395b@t '_))) (if aK395d@ls/false (apply (lambda () (let ((aK395f@t aK3953@dy)) (let ((aK3961@ls/false (aK30be@syntax-dispatch aK395f@t '()))) (if aK3961@ls/false (apply (lambda () (list (aK3046@scheme-stx 'list) aK394b@x)) aK3961@ls/false) (let ((aK3963@t aK395f@t)) (let ((aK3965@ls/false (aK30be@syntax-dispatch aK3963@t '_))) (if aK3965@ls/false (apply (lambda () (list (aK3046@scheme-stx 'cons) aK394b@x aK394c@y)) aK3965@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3963@t)))))))) aK395d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK395b@t)))))))) aK3951@ls/false) (let ((aK3967@t aK394f@t)) (let ((aK3969@ls/false (aK30be@syntax-dispatch aK3967@t '(#(scheme-id list) . each-any)))) (if aK3969@ls/false (apply (lambda (aK396b@stuff) (cons* (aK3046@scheme-stx 'list) aK394b@x aK396b@stuff)) aK3969@ls/false) (let ((aK396d@t aK3967@t)) (let ((aK396f@ls/false (aK30be@syntax-dispatch aK396d@t '_))) (if aK396f@ls/false (apply (lambda () (list (aK3046@scheme-stx 'cons) aK394b@x aK394c@y)) aK396f@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK396d@t)))))))))))) (aK3898@quasiappend (lambda (aK3931@x aK3932@y) (let ((aK3935@ls (let aK3939@f ((aK3937@x aK3931@x)) (if (null? aK3937@x) (let ((aK393b@t aK3932@y)) (let ((aK393d@ls/false (aK30be@syntax-dispatch aK393b@t '(#(scheme-id quote) ())))) (if aK393d@ls/false (apply (lambda () '()) aK393d@ls/false) (let ((aK393f@t aK393b@t)) (let ((aK3941@ls/false (aK30be@syntax-dispatch aK393f@t '_))) (if aK3941@ls/false (apply (lambda () (list aK3932@y)) aK3941@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK393f@t))))))) (let ((aK3943@t (car aK3937@x))) (let ((aK3945@ls/false (aK30be@syntax-dispatch aK3943@t '(#(scheme-id quote) ())))) (if aK3945@ls/false (apply (lambda () (aK3939@f (cdr aK3937@x))) aK3945@ls/false) (let ((aK3947@t aK3943@t)) (let ((aK3949@ls/false (aK30be@syntax-dispatch aK3947@t '_))) (if aK3949@ls/false (apply (lambda () (cons (car aK3937@x) (aK3939@f (cdr aK3937@x)))) aK3949@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3947@t))))))))))) (if (null? aK3935@ls) (list (aK3046@scheme-stx 'quote) '()) (if (null? (cdr aK3935@ls)) (car aK3935@ls) (cons* (aK3046@scheme-stx 'append) aK3935@ls)))))) (aK389a@quasivector (lambda (aK38ff@x) (let ((aK3901@pat-x aK38ff@x)) (let ((aK3903@t aK3901@pat-x)) (let ((aK3905@ls/false (aK30be@syntax-dispatch aK3903@t '(#(scheme-id quote) each-any)))) (if aK3905@ls/false (apply (lambda (aK3907@x*) (list (aK3046@scheme-stx 'quote) (list->vector aK3907@x*))) aK3905@ls/false) (let ((aK3909@t aK3903@t)) (let ((aK390b@ls/false (aK30be@syntax-dispatch aK3909@t '_))) (if aK390b@ls/false (apply (lambda () (let aK3913@f ((aK390d@x aK38ff@x) (aK390e@k (lambda (aK3911@ls) (cons* (aK3046@scheme-stx 'vector) aK3911@ls)))) (let ((aK3915@t aK390d@x)) (let ((aK3917@ls/false (aK30be@syntax-dispatch aK3915@t '(#(scheme-id quote) each-any)))) (if aK3917@ls/false (apply (lambda (aK3919@x*) (aK390e@k (map (lambda (aK391b@x) (list (aK3046@scheme-stx 'quote) aK391b@x)) aK3919@x*))) aK3917@ls/false) (let ((aK391d@t aK3915@t)) (let ((aK391f@ls/false (aK30be@syntax-dispatch aK391d@t '(#(scheme-id list) . each-any)))) (if aK391f@ls/false (apply (lambda (aK3921@x*) (aK390e@k aK3921@x*)) aK391f@ls/false) (let ((aK3923@t aK391d@t)) (let ((aK3925@ls/false (aK30be@syntax-dispatch aK3923@t '(#(scheme-id cons) any any)))) (if aK3925@ls/false (apply (lambda (aK3927@x aK3928@y) (aK3913@f aK3928@y (lambda (aK392b@ls) (aK390e@k (cons aK3927@x aK392b@ls))))) aK3925@ls/false) (let ((aK392d@t aK3923@t)) (let ((aK392f@ls/false (aK30be@syntax-dispatch aK392d@t '_))) (if aK392f@ls/false (apply (lambda () (list (aK3046@scheme-stx 'list->vector) aK3901@pat-x)) aK392f@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK392d@t))))))))))))))) aK390b@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3909@t)))))))))) (aK389c@vquasi (lambda (aK38dd@p aK38de@lev) (let ((aK38e1@t aK38dd@p)) (let ((aK38e3@ls/false (aK30be@syntax-dispatch aK38e1@t '(any . any)))) (if aK38e3@ls/false (apply (lambda (aK38e5@p aK38e6@q) (let ((aK38e9@t aK38e5@p)) (let ((aK38eb@ls/false (aK30be@syntax-dispatch aK38e9@t '(#(scheme-id unquote) . each-any)))) (if aK38eb@ls/false (apply (lambda (aK38ed@p) (if (= aK38de@lev '0) (aK3894@quasicons* aK38ed@p (aK389c@vquasi aK38e6@q aK38de@lev)) (aK3896@quasicons (aK3896@quasicons (aK3878@datum 'unquote) (aK389e@quasi aK38ed@p (- aK38de@lev '1))) (aK389c@vquasi aK38e6@q aK38de@lev)))) aK38eb@ls/false) (let ((aK38ef@t aK38e9@t)) (let ((aK38f1@ls/false (aK30be@syntax-dispatch aK38ef@t '(#(scheme-id unquote-splicing) . each-any)))) (if aK38f1@ls/false (apply (lambda (aK38f3@p) (if (= aK38de@lev '0) (aK3898@quasiappend aK38f3@p (aK389c@vquasi aK38e6@q aK38de@lev)) (aK3896@quasicons (aK3896@quasicons (aK3878@datum 'unquote-splicing) (aK389e@quasi aK38f3@p (- aK38de@lev '1))) (aK389c@vquasi aK38e6@q aK38de@lev)))) aK38f1@ls/false) (let ((aK38f5@t aK38ef@t)) (let ((aK38f7@ls/false (aK30be@syntax-dispatch aK38f5@t 'any))) (if aK38f7@ls/false (apply (lambda (aK38f9@p) (aK3896@quasicons (aK389e@quasi aK38f9@p aK38de@lev) (aK389c@vquasi aK38e6@q aK38de@lev))) aK38f7@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK38f5@t))))))))))) aK38e3@ls/false) (let ((aK38fb@t aK38e1@t)) (let ((aK38fd@ls/false (aK30be@syntax-dispatch aK38fb@t '()))) (if aK38fd@ls/false (apply (lambda () (list (aK3046@scheme-stx 'quote) '())) aK38fd@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK38fb@t))))))))) (aK389e@quasi (lambda (aK38a7@p aK38a8@lev) (let ((aK38ab@t aK38a7@p)) (let ((aK38ad@ls/false (aK30be@syntax-dispatch aK38ab@t '(#(scheme-id unquote) any)))) (if aK38ad@ls/false (apply (lambda (aK38af@p) (if (= aK38a8@lev '0) aK38af@p (aK3896@quasicons (aK3878@datum 'unquote) (aK389e@quasi (list aK38af@p) (- aK38a8@lev '1))))) aK38ad@ls/false) (let ((aK38b1@t aK38ab@t)) (let ((aK38b3@ls/false (aK30be@syntax-dispatch aK38b1@t '((#(scheme-id unquote) . each-any) . any)))) (if aK38b3@ls/false (apply (lambda (aK38b5@p aK38b6@q) (if (= aK38a8@lev '0) (aK3894@quasicons* aK38b5@p (aK389e@quasi aK38b6@q aK38a8@lev)) (aK3896@quasicons (aK3896@quasicons (aK3878@datum 'unquote) (aK389e@quasi aK38b5@p (- aK38a8@lev '1))) (aK389e@quasi aK38b6@q aK38a8@lev)))) aK38b3@ls/false) (let ((aK38b9@t aK38b1@t)) (let ((aK38bb@ls/false (aK30be@syntax-dispatch aK38b9@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if aK38bb@ls/false (apply (lambda (aK38bd@p aK38be@q) (if (= aK38a8@lev '0) (aK3898@quasiappend aK38bd@p (aK389e@quasi aK38be@q aK38a8@lev)) (aK3896@quasicons (aK3896@quasicons (aK3878@datum 'unquote-splicing) (aK389e@quasi aK38bd@p (- aK38a8@lev '1))) (aK389e@quasi aK38be@q aK38a8@lev)))) aK38bb@ls/false) (let ((aK38c1@t aK38b9@t)) (let ((aK38c3@ls/false (aK30be@syntax-dispatch aK38c1@t '(#(scheme-id quasiquote) any)))) (if aK38c3@ls/false (apply (lambda (aK38c5@p) (aK3896@quasicons (aK3878@datum 'quasiquote) (aK389e@quasi (list aK38c5@p) (+ aK38a8@lev '1)))) aK38c3@ls/false) (let ((aK38c7@t aK38c1@t)) (let ((aK38c9@ls/false (aK30be@syntax-dispatch aK38c7@t '(any . any)))) (if aK38c9@ls/false (apply (lambda (aK38cb@p aK38cc@q) (aK3896@quasicons (aK389e@quasi aK38cb@p aK38a8@lev) (aK389e@quasi aK38cc@q aK38a8@lev))) aK38c9@ls/false) (let ((aK38cf@t aK38c7@t)) (let ((aK38d1@ls/false (aK30be@syntax-dispatch aK38cf@t '#(vector each-any)))) (if (and aK38d1@ls/false (apply (lambda (aK38d3@x) (not (aK2e83@stx? aK38d3@x))) aK38d1@ls/false)) (apply (lambda (aK38d5@x) (aK389a@quasivector (aK389c@vquasi aK38d5@x aK38a8@lev))) aK38d1@ls/false) (let ((aK38d7@t aK38cf@t)) (let ((aK38d9@ls/false (aK30be@syntax-dispatch aK38d7@t 'any))) (if aK38d9@ls/false (apply (lambda (aK38db@p) (list (aK3046@scheme-stx 'quote) aK38db@p)) aK38d9@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK38d7@t))))))))))))))))))))))))) (lambda (aK389f@x) (let ((aK38a1@t aK389f@x)) (let ((aK38a3@ls/false (aK30be@syntax-dispatch aK38a1@t '(_ any)))) (if aK38a3@ls/false (apply (lambda (aK38a5@e) (aK389e@quasi aK38a5@e '0)) aK38a3@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK38a1@t))))))) (set! aK4b8b@aK30ac@quasiquote-macro aK30ac@quasiquote-macro) (set! aK30ae@quasisyntax-macro (letrec* ((aK397c@quasi (lambda (aK3997@p aK3998@lev) (let ((aK399b@t aK3997@p)) (let ((aK399d@ls/false (aK30be@syntax-dispatch aK399b@t '(#(scheme-id unsyntax) any)))) (if aK399d@ls/false (apply (lambda (aK399f@p) (if (= aK3998@lev '0) (let ((aK39a1@g (gensym))) (values (list aK39a1@g) (list aK399f@p) aK39a1@g)) (call-with-values (lambda () (aK397c@quasi aK399f@p (- aK3998@lev '1))) (lambda (aK39a9@aK39a4 aK39aa@aK39a6 aK39ab@aK39a8) (let ((aK39af@p aK39ab@aK39a8) (aK39b0@rhs* aK39aa@aK39a6) (aK39b1@lhs* aK39a9@aK39a4)) (values aK39b1@lhs* aK39b0@rhs* (list 'unsyntax aK39af@p))))))) aK399d@ls/false) (let ((aK39b5@t aK399b@t)) (let ((aK39b7@ls/false (aK30be@syntax-dispatch aK39b5@t '#(scheme-id unsyntax)))) (if (and aK39b7@ls/false (apply (lambda () (= aK3998@lev '0)) aK39b7@ls/false)) (apply (lambda () (aK319e@syntax-violation '#f '"incorrect use of unsyntax" aK3997@p)) aK39b7@ls/false) (let ((aK39b9@t aK39b5@t)) (let ((aK39bb@ls/false (aK30be@syntax-dispatch aK39b9@t '((#(scheme-id unsyntax) . each-any) . any)))) (if aK39bb@ls/false (apply (lambda (aK39bd@p* aK39be@q) (call-with-values (lambda () (aK397c@quasi aK39be@q aK3998@lev)) (lambda (aK39c7@aK39c2 aK39c8@aK39c4 aK39c9@aK39c6) (let ((aK39cd@q aK39c9@aK39c6) (aK39ce@rhs* aK39c8@aK39c4) (aK39cf@lhs* aK39c7@aK39c2)) (if (= aK3998@lev '0) (let ((aK39d3@g* (map (lambda (aK39d5@x) (gensym)) aK39bd@p*))) (values (append aK39d3@g* aK39cf@lhs*) (append aK39bd@p* aK39ce@rhs*) (append aK39d3@g* aK39cd@q))) (call-with-values (lambda () (aK397c@quasi aK39bd@p* (- aK3998@lev '1))) (lambda (aK39dd@aK39d8 aK39de@aK39da aK39df@aK39dc) (let ((aK39e3@p* aK39df@aK39dc) (aK39e4@rhs2* aK39de@aK39da) (aK39e5@lhs2* aK39dd@aK39d8)) (values (append aK39e5@lhs2* aK39cf@lhs*) (append aK39e4@rhs2* aK39ce@rhs*) (cons (cons 'unsyntax aK39e3@p*) aK39cd@q)))))))))) aK39bb@ls/false) (let ((aK39e9@t aK39b9@t)) (let ((aK39eb@ls/false (aK30be@syntax-dispatch aK39e9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if aK39eb@ls/false (apply (lambda (aK39ed@p* aK39ee@q) (call-with-values (lambda () (aK397c@quasi aK39ee@q aK3998@lev)) (lambda (aK39f7@aK39f2 aK39f8@aK39f4 aK39f9@aK39f6) (let ((aK39fd@q aK39f9@aK39f6) (aK39fe@rhs* aK39f8@aK39f4) (aK39ff@lhs* aK39f7@aK39f2)) (if (= aK3998@lev '0) (let ((aK3a03@g* (map (lambda (aK3a05@x) (gensym)) aK39ed@p*))) (values (append (map (lambda (aK3a07@g) (cons aK3a07@g '(...))) aK3a03@g*) aK39ff@lhs*) (append aK39ed@p* aK39fe@rhs*) (append (apply append (map (lambda (aK3a09@g) (cons aK3a09@g '(...))) aK3a03@g*)) aK39fd@q))) (call-with-values (lambda () (aK397c@quasi aK39ed@p* (- aK3998@lev '1))) (lambda (aK3a11@aK3a0c aK3a12@aK3a0e aK3a13@aK3a10) (let ((aK3a17@p* aK3a13@aK3a10) (aK3a18@rhs2* aK3a12@aK3a0e) (aK3a19@lhs2* aK3a11@aK3a0c)) (values (append aK3a19@lhs2* aK39ff@lhs*) (append aK3a18@rhs2* aK39fe@rhs*) (cons (cons 'unsyntax-splicing aK3a17@p*) aK39fd@q)))))))))) aK39eb@ls/false) (let ((aK3a1d@t aK39e9@t)) (let ((aK3a1f@ls/false (aK30be@syntax-dispatch aK3a1d@t '#(scheme-id unsyntax-splicing)))) (if (and aK3a1f@ls/false (apply (lambda () (= aK3998@lev '0)) aK3a1f@ls/false)) (apply (lambda () (aK319e@syntax-violation '#f '"incorrect use of unsyntax-splicing" aK3997@p)) aK3a1f@ls/false) (let ((aK3a21@t aK3a1d@t)) (let ((aK3a23@ls/false (aK30be@syntax-dispatch aK3a21@t '(#(scheme-id quasisyntax) any)))) (if aK3a23@ls/false (apply (lambda (aK3a25@p) (call-with-values (lambda () (aK397c@quasi aK3a25@p (+ aK3998@lev '1))) (lambda (aK3a2d@aK3a28 aK3a2e@aK3a2a aK3a2f@aK3a2c) (let ((aK3a33@p aK3a2f@aK3a2c) (aK3a34@rhs* aK3a2e@aK3a2a) (aK3a35@lhs* aK3a2d@aK3a28)) (values aK3a35@lhs* aK3a34@rhs* (list 'quasisyntax aK3a33@p)))))) aK3a23@ls/false) (let ((aK3a39@t aK3a21@t)) (let ((aK3a3b@ls/false (aK30be@syntax-dispatch aK3a39@t '(any . any)))) (if aK3a3b@ls/false (apply (lambda (aK3a3d@p aK3a3e@q) (call-with-values (lambda () (aK397c@quasi aK3a3d@p aK3998@lev)) (lambda (aK3a4d@aK3a42 aK3a4e@aK3a44 aK3a4f@aK3a46) (call-with-values (lambda () (aK397c@quasi aK3a3e@q aK3998@lev)) (lambda (aK3a53@aK3a48 aK3a54@aK3a4a aK3a55@aK3a4c) (let ((aK3a59@q aK3a55@aK3a4c) (aK3a5a@rhs2* aK3a54@aK3a4a) (aK3a5b@lhs2* aK3a53@aK3a48) (aK3a5c@p aK3a4f@aK3a46) (aK3a5d@rhs* aK3a4e@aK3a44) (aK3a5e@lhs* aK3a4d@aK3a42)) (values (append aK3a5b@lhs2* aK3a5e@lhs*) (append aK3a5a@rhs2* aK3a5d@rhs*) (cons aK3a5c@p aK3a59@q)))))))) aK3a3b@ls/false) (let ((aK3a65@t aK3a39@t)) (let ((aK3a67@ls/false (aK30be@syntax-dispatch aK3a65@t '#(vector each-any)))) (if aK3a67@ls/false (apply (lambda (aK3a69@x*) (call-with-values (lambda () (aK397c@quasi aK3a69@x* aK3998@lev)) (lambda (aK3a71@aK3a6c aK3a72@aK3a6e aK3a73@aK3a70) (let ((aK3a77@x* aK3a73@aK3a70) (aK3a78@rhs* aK3a72@aK3a6e) (aK3a79@lhs* aK3a71@aK3a6c)) (values aK3a79@lhs* aK3a78@rhs* (list->vector aK3a77@x*)))))) aK3a67@ls/false) (let ((aK3a7d@t aK3a65@t)) (let ((aK3a7f@ls/false (aK30be@syntax-dispatch aK3a7d@t '_))) (if aK3a7f@ls/false (apply (lambda () (values '() '() aK3997@p)) aK3a7f@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3a7d@t))))))))))))))))))))))))))))))) (lambda (aK397d@x) (let ((aK397f@t aK397d@x)) (let ((aK3981@ls/false (aK30be@syntax-dispatch aK397f@t '(_ any)))) (if aK3981@ls/false (apply (lambda (aK3983@e) (call-with-values (lambda () (aK397c@quasi aK3983@e '0)) (lambda (aK398b@aK3986 aK398c@aK3988 aK398d@aK398a) (let ((aK3991@v aK398d@aK398a) (aK3992@rhs* aK398c@aK3988) (aK3993@lhs* aK398b@aK3986)) (aK3074@bless (list 'syntax-case (cons 'list aK3992@rhs*) '() (list aK3993@lhs* (list 'syntax aK3991@v)))))))) aK3981@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK397f@t))))))) (set! aK4b8c@aK30ae@quasisyntax-macro aK30ae@quasisyntax-macro) (set! aK30b0@define-struct-macro (lambda (aK3a81@stx) (aK319e@syntax-violation '#f '"define-struct not supported" aK3a81@stx))) (set! aK4b8d@aK30b0@define-struct-macro aK30b0@define-struct-macro) (set! aK30b2@define-record-type-macro (lambda (aK3a83@x) (letrec* ((aK3a86@id (lambda (aK3c79@ctxt . aK3c7b@str*) (aK31a2@datum->syntax aK3c79@ctxt (string->symbol (apply string-append (map (lambda (aK3c7d@x) (if (symbol? aK3c7d@x) (symbol->string aK3c7d@x) (if (string? aK3c7d@x) aK3c7d@x (assertion-violation 'define-record-type '"BUG")))) aK3c7b@str*)))))) (aK3a88@get-record-name (lambda (aK3c67@spec) (let ((aK3c69@t aK3c67@spec)) (let ((aK3c6b@ls/false (aK30be@syntax-dispatch aK3c69@t '(any any any)))) (if aK3c6b@ls/false (apply (lambda (aK3c6d@foo aK3c6e@make-foo aK3c6f@foo?) aK3c6d@foo) aK3c6b@ls/false) (let ((aK3c73@t aK3c69@t)) (let ((aK3c75@ls/false (aK30be@syntax-dispatch aK3c73@t 'any))) (if aK3c75@ls/false (apply (lambda (aK3c77@foo) aK3c77@foo) aK3c75@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3c73@t))))))))) (aK3a8a@get-record-constructor-name (lambda (aK3c53@spec) (let ((aK3c55@t aK3c53@spec)) (let ((aK3c57@ls/false (aK30be@syntax-dispatch aK3c55@t '(any any any)))) (if aK3c57@ls/false (apply (lambda (aK3c59@foo aK3c5a@make-foo aK3c5b@foo?) aK3c5a@make-foo) aK3c57@ls/false) (let ((aK3c5f@t aK3c55@t)) (let ((aK3c61@ls/false (aK30be@syntax-dispatch aK3c5f@t 'any))) (if (and aK3c61@ls/false (apply (lambda (aK3c63@foo) (aK2eb7@id? aK3c63@foo)) aK3c61@ls/false)) (apply (lambda (aK3c65@foo) (aK3a86@id aK3c65@foo '"make-" (aK2ecb@stx->datum aK3c65@foo))) aK3c61@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3c5f@t))))))))) (aK3a8c@get-record-predicate-name (lambda (aK3c3f@spec) (let ((aK3c41@t aK3c3f@spec)) (let ((aK3c43@ls/false (aK30be@syntax-dispatch aK3c41@t '(any any any)))) (if aK3c43@ls/false (apply (lambda (aK3c45@foo aK3c46@make-foo aK3c47@foo?) aK3c47@foo?) aK3c43@ls/false) (let ((aK3c4b@t aK3c41@t)) (let ((aK3c4d@ls/false (aK30be@syntax-dispatch aK3c4b@t 'any))) (if (and aK3c4d@ls/false (apply (lambda (aK3c4f@foo) (aK2eb7@id? aK3c4f@foo)) aK3c4d@ls/false)) (apply (lambda (aK3c51@foo) (aK3a86@id aK3c51@foo (aK2ecb@stx->datum aK3c51@foo) '"?")) aK3c4d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3c4b@t))))))))) (aK3a8e@get-clause (lambda (aK3c2d@id aK3c2e@ls) (let ((aK3c31@t aK3c2e@ls)) (let ((aK3c33@ls/false (aK30be@syntax-dispatch aK3c31@t '()))) (if aK3c33@ls/false (apply (lambda () '#f) aK3c33@ls/false) (let ((aK3c35@t aK3c31@t)) (let ((aK3c37@ls/false (aK30be@syntax-dispatch aK3c35@t '((any . any) . any)))) (if aK3c37@ls/false (apply (lambda (aK3c39@x aK3c3a@rest aK3c3b@ls) (if (aK2ebd@free-id=? (aK3074@bless aK3c2d@id) aK3c39@x) (cons aK3c39@x aK3c3a@rest) (aK3a8e@get-clause aK3c2d@id aK3c3b@ls))) aK3c37@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3c35@t))))))))) (aK3a90@foo-rtd-code (lambda (aK3bdb@name aK3bdc@clause* aK3bdd@parent-rtd-code) (letrec* ((aK3be2@convert-field-spec* (lambda (aK3c13@ls) (list->vector (map (lambda (aK3c15@x) (let ((aK3c17@t aK3c15@x)) (let ((aK3c19@ls/false (aK30be@syntax-dispatch aK3c17@t '(#(scheme-id mutable) any . any)))) (if aK3c19@ls/false (apply (lambda (aK3c1b@name aK3c1c@rest) (list 'mutable aK3c1b@name)) aK3c19@ls/false) (let ((aK3c1f@t aK3c17@t)) (let ((aK3c21@ls/false (aK30be@syntax-dispatch aK3c1f@t '(#(scheme-id immutable) any . any)))) (if aK3c21@ls/false (apply (lambda (aK3c23@name aK3c24@rest) (list 'immutable aK3c23@name)) aK3c21@ls/false) (let ((aK3c27@t aK3c1f@t)) (let ((aK3c29@ls/false (aK30be@syntax-dispatch aK3c27@t 'any))) (if aK3c29@ls/false (apply (lambda (aK3c2b@name) (list 'immutable aK3c2b@name)) aK3c29@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3c27@t))))))))))) aK3c13@ls))))) (let ((aK3be3@uid-code (let ((aK3beb@t (aK3a8e@get-clause 'nongenerative aK3bdc@clause*))) (let ((aK3bed@ls/false (aK30be@syntax-dispatch aK3beb@t '(_)))) (if aK3bed@ls/false (apply (lambda () (list 'quote (gensym))) aK3bed@ls/false) (let ((aK3bef@t aK3beb@t)) (let ((aK3bf1@ls/false (aK30be@syntax-dispatch aK3bef@t '(_ any)))) (if aK3bf1@ls/false (apply (lambda (aK3bf3@uid) (list 'quote aK3bf3@uid)) aK3bf1@ls/false) (let ((aK3bf5@t aK3bef@t)) (let ((aK3bf7@ls/false (aK30be@syntax-dispatch aK3bf5@t '_))) (if aK3bf7@ls/false (apply (lambda () '#f) aK3bf7@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3bf5@t))))))))))) (aK3be4@sealed? (let ((aK3bf9@t (aK3a8e@get-clause 'sealed aK3bdc@clause*))) (let ((aK3bfb@ls/false (aK30be@syntax-dispatch aK3bf9@t '(_ #(atom #t))))) (if aK3bfb@ls/false (apply (lambda () '#t) aK3bfb@ls/false) (let ((aK3bfd@t aK3bf9@t)) (let ((aK3bff@ls/false (aK30be@syntax-dispatch aK3bfd@t '_))) (if aK3bff@ls/false (apply (lambda () '#f) aK3bff@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3bfd@t)))))))) (aK3be5@opaque? (let ((aK3c01@t (aK3a8e@get-clause 'opaque aK3bdc@clause*))) (let ((aK3c03@ls/false (aK30be@syntax-dispatch aK3c01@t '(_ #(atom #t))))) (if aK3c03@ls/false (apply (lambda () '#t) aK3c03@ls/false) (let ((aK3c05@t aK3c01@t)) (let ((aK3c07@ls/false (aK30be@syntax-dispatch aK3c05@t '_))) (if aK3c07@ls/false (apply (lambda () '#f) aK3c07@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3c05@t)))))))) (aK3be6@fields (let ((aK3c09@t (aK3a8e@get-clause 'fields aK3bdc@clause*))) (let ((aK3c0b@ls/false (aK30be@syntax-dispatch aK3c09@t '(_ . each-any)))) (if aK3c0b@ls/false (apply (lambda (aK3c0d@field-spec*) (list 'quote (aK3be2@convert-field-spec* aK3c0d@field-spec*))) aK3c0b@ls/false) (let ((aK3c0f@t aK3c09@t)) (let ((aK3c11@ls/false (aK30be@syntax-dispatch aK3c0f@t '_))) (if aK3c11@ls/false (apply (lambda () ''#()) aK3c11@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3c0f@t))))))))) (aK3074@bless (list 'make-record-type-descriptor (list 'quote aK3bdb@name) aK3bdd@parent-rtd-code aK3be3@uid-code aK3be4@sealed? aK3be5@opaque? aK3be6@fields)))))) (aK3a92@parent-rtd-code (lambda (aK3bc3@clause*) (let ((aK3bc5@t (aK3a8e@get-clause 'parent aK3bc3@clause*))) (let ((aK3bc7@ls/false (aK30be@syntax-dispatch aK3bc5@t '(_ any)))) (if aK3bc7@ls/false (apply (lambda (aK3bc9@name) (list 'record-type-descriptor aK3bc9@name)) aK3bc7@ls/false) (let ((aK3bcb@t aK3bc5@t)) (let ((aK3bcd@ls/false (aK30be@syntax-dispatch aK3bcb@t '#(atom #f)))) (if aK3bcd@ls/false (apply (lambda () (let ((aK3bcf@t (aK3a8e@get-clause 'parent-rtd aK3bc3@clause*))) (let ((aK3bd1@ls/false (aK30be@syntax-dispatch aK3bcf@t '(_ any any)))) (if aK3bd1@ls/false (apply (lambda (aK3bd3@rtd aK3bd4@rcd) aK3bd3@rtd) aK3bd1@ls/false) (let ((aK3bd7@t aK3bcf@t)) (let ((aK3bd9@ls/false (aK30be@syntax-dispatch aK3bd7@t '#(atom #f)))) (if aK3bd9@ls/false (apply (lambda () '#f) aK3bd9@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3bd7@t)))))))) aK3bcd@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3bcb@t))))))))) (aK3a94@parent-rcd-code (lambda (aK3bab@clause*) (let ((aK3bad@t (aK3a8e@get-clause 'parent aK3bab@clause*))) (let ((aK3baf@ls/false (aK30be@syntax-dispatch aK3bad@t '(_ any)))) (if aK3baf@ls/false (apply (lambda (aK3bb1@name) (list 'record-constructor-descriptor aK3bb1@name)) aK3baf@ls/false) (let ((aK3bb3@t aK3bad@t)) (let ((aK3bb5@ls/false (aK30be@syntax-dispatch aK3bb3@t '#(atom #f)))) (if aK3bb5@ls/false (apply (lambda () (let ((aK3bb7@t (aK3a8e@get-clause 'parent-rtd aK3bab@clause*))) (let ((aK3bb9@ls/false (aK30be@syntax-dispatch aK3bb7@t '(_ any any)))) (if aK3bb9@ls/false (apply (lambda (aK3bbb@rtd aK3bbc@rcd) aK3bbc@rcd) aK3bb9@ls/false) (let ((aK3bbf@t aK3bb7@t)) (let ((aK3bc1@ls/false (aK30be@syntax-dispatch aK3bbf@t '#(atom #f)))) (if aK3bc1@ls/false (apply (lambda () '#f) aK3bc1@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3bbf@t)))))))) aK3bb5@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3bb3@t))))))))) (aK3a96@foo-rcd-code (lambda (aK3ba3@clause* aK3ba4@foo-rtd aK3ba5@protocol aK3ba6@parent-rcd-code) (list 'make-record-constructor-descriptor aK3ba4@foo-rtd aK3ba6@parent-rcd-code aK3ba5@protocol))) (aK3a98@get-protocol-code (lambda (aK3b97@clause*) (let ((aK3b99@t (aK3a8e@get-clause 'protocol aK3b97@clause*))) (let ((aK3b9b@ls/false (aK30be@syntax-dispatch aK3b99@t '(_ any)))) (if aK3b9b@ls/false (apply (lambda (aK3b9d@expr) aK3b9d@expr) aK3b9b@ls/false) (let ((aK3b9f@t aK3b99@t)) (let ((aK3ba1@ls/false (aK30be@syntax-dispatch aK3b9f@t '_))) (if aK3ba1@ls/false (apply (lambda () '#f) aK3ba1@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3b9f@t))))))))) (aK3a9a@get-fields (lambda (aK3b85@clause*) (let ((aK3b87@t aK3b85@clause*)) (let ((aK3b89@ls/false (aK30be@syntax-dispatch aK3b87@t '()))) (if aK3b89@ls/false (apply (lambda () '()) aK3b89@ls/false) (let ((aK3b8b@t aK3b87@t)) (let ((aK3b8d@ls/false (aK30be@syntax-dispatch aK3b8b@t '((#(scheme-id fields) . each-any) . _)))) (if aK3b8d@ls/false (apply (lambda (aK3b8f@f*) aK3b8f@f*) aK3b8d@ls/false) (let ((aK3b91@t aK3b8b@t)) (let ((aK3b93@ls/false (aK30be@syntax-dispatch aK3b91@t '(_ . any)))) (if aK3b93@ls/false (apply (lambda (aK3b95@rest) (aK3a9a@get-fields aK3b95@rest)) aK3b93@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3b91@t)))))))))))) (aK3a9c@get-mutator-indices (lambda (aK3b6d@fields) (let aK3b73@f ((aK3b6f@fields aK3b6d@fields) (aK3b70@i '0)) (let ((aK3b75@t aK3b6f@fields)) (let ((aK3b77@ls/false (aK30be@syntax-dispatch aK3b75@t '()))) (if aK3b77@ls/false (apply (lambda () '()) aK3b77@ls/false) (let ((aK3b79@t aK3b75@t)) (let ((aK3b7b@ls/false (aK30be@syntax-dispatch aK3b79@t '((#(scheme-id mutable) . _) . any)))) (if aK3b7b@ls/false (apply (lambda (aK3b7d@rest) (cons aK3b70@i (aK3b73@f aK3b7d@rest (+ aK3b70@i '1)))) aK3b7b@ls/false) (let ((aK3b7f@t aK3b79@t)) (let ((aK3b81@ls/false (aK30be@syntax-dispatch aK3b7f@t '(_ . any)))) (if aK3b81@ls/false (apply (lambda (aK3b83@rest) (aK3b73@f aK3b83@rest (+ aK3b70@i '1))) aK3b81@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3b7f@t))))))))))))) (aK3a9e@get-mutators (lambda (aK3b43@foo aK3b44@fields) (letrec* ((aK3b48@gen-name (lambda (aK3b6b@x) (aK31a2@datum->syntax aK3b43@foo (string->symbol (string-append (symbol->string (aK31a4@syntax->datum aK3b43@foo)) '"-" (symbol->string (aK31a4@syntax->datum aK3b6b@x)) '"-set!")))))) (let aK3b4b@f ((aK3b49@fields aK3b44@fields)) (let ((aK3b4d@t aK3b49@fields)) (let ((aK3b4f@ls/false (aK30be@syntax-dispatch aK3b4d@t '()))) (if aK3b4f@ls/false (apply (lambda () '()) aK3b4f@ls/false) (let ((aK3b51@t aK3b4d@t)) (let ((aK3b53@ls/false (aK30be@syntax-dispatch aK3b51@t '((#(scheme-id mutable) any any any) . any)))) (if aK3b53@ls/false (apply (lambda (aK3b55@name aK3b56@accessor aK3b57@mutator aK3b58@rest) (cons aK3b57@mutator (aK3b4b@f aK3b58@rest))) aK3b53@ls/false) (let ((aK3b5d@t aK3b51@t)) (let ((aK3b5f@ls/false (aK30be@syntax-dispatch aK3b5d@t '((#(scheme-id mutable) any) . any)))) (if aK3b5f@ls/false (apply (lambda (aK3b61@name aK3b62@rest) (cons (aK3b48@gen-name aK3b61@name) (aK3b4b@f aK3b62@rest))) aK3b5f@ls/false) (let ((aK3b65@t aK3b5d@t)) (let ((aK3b67@ls/false (aK30be@syntax-dispatch aK3b65@t '(_ . any)))) (if aK3b67@ls/false (apply (lambda (aK3b69@rest) (aK3b4b@f aK3b69@rest)) aK3b67@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3b65@t))))))))))))))))) (aK3aa0@get-accessors (lambda (aK3aff@foo aK3b00@fields) (letrec* ((aK3b04@gen-name (lambda (aK3b41@x) (aK31a2@datum->syntax aK3aff@foo (string->symbol (string-append (symbol->string (aK31a4@syntax->datum aK3aff@foo)) '"-" (symbol->string (aK31a4@syntax->datum aK3b41@x)))))))) (map (lambda (aK3b05@field) (let ((aK3b07@t aK3b05@field)) (let ((aK3b09@ls/false (aK30be@syntax-dispatch aK3b07@t '(#(scheme-id mutable) any any any)))) (if (and aK3b09@ls/false (apply (lambda (aK3b0b@name aK3b0c@accessor aK3b0d@mutator) (aK2eb7@id? aK3b0c@accessor)) aK3b09@ls/false)) (apply (lambda (aK3b11@name aK3b12@accessor aK3b13@mutator) aK3b12@accessor) aK3b09@ls/false) (let ((aK3b17@t aK3b07@t)) (let ((aK3b19@ls/false (aK30be@syntax-dispatch aK3b17@t '(#(scheme-id immutable) any any)))) (if (and aK3b19@ls/false (apply (lambda (aK3b1b@name aK3b1c@accessor) (aK2eb7@id? aK3b1c@accessor)) aK3b19@ls/false)) (apply (lambda (aK3b1f@name aK3b20@accessor) aK3b20@accessor) aK3b19@ls/false) (let ((aK3b23@t aK3b17@t)) (let ((aK3b25@ls/false (aK30be@syntax-dispatch aK3b23@t '(#(scheme-id mutable) any)))) (if (and aK3b25@ls/false (apply (lambda (aK3b27@name) (aK2eb7@id? aK3b27@name)) aK3b25@ls/false)) (apply (lambda (aK3b29@name) (aK3b04@gen-name aK3b29@name)) aK3b25@ls/false) (let ((aK3b2b@t aK3b23@t)) (let ((aK3b2d@ls/false (aK30be@syntax-dispatch aK3b2b@t '(#(scheme-id immutable) any)))) (if (and aK3b2d@ls/false (apply (lambda (aK3b2f@name) (aK2eb7@id? aK3b2f@name)) aK3b2d@ls/false)) (apply (lambda (aK3b31@name) (aK3b04@gen-name aK3b31@name)) aK3b2d@ls/false) (let ((aK3b33@t aK3b2b@t)) (let ((aK3b35@ls/false (aK30be@syntax-dispatch aK3b33@t 'any))) (if (and aK3b35@ls/false (apply (lambda (aK3b37@name) (aK2eb7@id? aK3b37@name)) aK3b35@ls/false)) (apply (lambda (aK3b39@name) (aK3b04@gen-name aK3b39@name)) aK3b35@ls/false) (let ((aK3b3b@t aK3b33@t)) (let ((aK3b3d@ls/false (aK30be@syntax-dispatch aK3b3b@t 'any))) (if aK3b3d@ls/false (apply (lambda (aK3b3f@others) (aK319e@syntax-violation '#f '"invalid field spec" aK3b05@field)) aK3b3d@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3b3b@t)))))))))))))))))))) aK3b00@fields)))) (aK3aa2@enumerate (lambda (aK3af7@ls) (let aK3afd@f ((aK3af9@ls aK3af7@ls) (aK3afa@i '0)) (if (null? aK3af9@ls) '() (cons aK3afa@i (aK3afd@f (cdr aK3af9@ls) (+ aK3afa@i '1))))))) (aK3aa4@do-define-record (lambda (aK3acf@namespec aK3ad0@clause*) (let ((aK3ad3@foo (aK3a88@get-record-name aK3acf@namespec))) (let ((aK3ad5@foo-rtd (gensym))) (let ((aK3ad7@foo-rcd (gensym))) (let ((aK3ad9@protocol (gensym))) (let ((aK3adb@make-foo (aK3a8a@get-record-constructor-name aK3acf@namespec))) (let ((aK3add@fields (aK3a9a@get-fields aK3ad0@clause*))) (let ((aK3adf@idx* (aK3aa2@enumerate aK3add@fields))) (let ((aK3ae1@foo-x* (aK3aa0@get-accessors aK3ad3@foo aK3add@fields))) (let ((aK3ae3@set-foo-x!* (aK3a9e@get-mutators aK3ad3@foo aK3add@fields))) (let ((aK3ae5@set-foo-idx* (aK3a9c@get-mutator-indices aK3add@fields))) (let ((aK3ae7@foo? (aK3a8c@get-record-predicate-name aK3acf@namespec))) (let ((aK3ae9@foo-rtd-code (aK3a90@foo-rtd-code aK3ad3@foo aK3ad0@clause* (aK3a92@parent-rtd-code aK3ad0@clause*)))) (let ((aK3aeb@foo-rcd-code (aK3a96@foo-rcd-code aK3ad0@clause* aK3ad5@foo-rtd aK3ad9@protocol (aK3a94@parent-rcd-code aK3ad0@clause*)))) (let ((aK3aed@protocol-code (aK3a98@get-protocol-code aK3ad0@clause*))) (aK3074@bless (cons 'begin (cons (list 'define aK3ad5@foo-rtd aK3ae9@foo-rtd-code) (cons (list 'define aK3ad9@protocol aK3aed@protocol-code) (cons (list 'define aK3ad7@foo-rcd aK3aeb@foo-rcd-code) (cons (list 'define-syntax aK3ad3@foo (list 'list ''$rtd (list 'syntax aK3ad5@foo-rtd) (list 'syntax aK3ad7@foo-rcd))) (cons (list 'define aK3ae7@foo? (list 'record-predicate aK3ad5@foo-rtd)) (cons (list 'define aK3adb@make-foo (list 'record-constructor aK3ad7@foo-rcd)) (append (map (lambda (aK3aef@foo-x aK3af0@idx) (list 'define aK3aef@foo-x (list 'record-accessor aK3ad5@foo-rtd aK3af0@idx))) aK3ae1@foo-x* aK3adf@idx*) (map (lambda (aK3af3@set-foo-x! aK3af4@idx) (list 'define aK3af3@set-foo-x! (list 'record-mutator aK3ad5@foo-rtd aK3af4@idx))) aK3ae3@set-foo-x!* aK3ae5@set-foo-idx*)))))))))))))))))))))))))) (aK3aa6@verify-clauses (lambda (aK3aaf@x aK3ab0@cls*) (letrec* ((aK3ab4@valid-kwds (map aK3074@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (aK3ab6@free-id-member? (lambda (aK3acb@x aK3acc@ls) (and (pair? aK3acc@ls) (or (aK2ebd@free-id=? aK3acb@x (car aK3acc@ls)) (aK3ab6@free-id-member? aK3acb@x (cdr aK3acc@ls))))))) (let aK3abb@f ((aK3ab7@cls* aK3ab0@cls*) (aK3ab8@seen* '())) (if (not (null? aK3ab7@cls*)) (let ((aK3abd@t (car aK3ab7@cls*))) (let ((aK3abf@ls/false (aK30be@syntax-dispatch aK3abd@t '(any . any)))) (if aK3abf@ls/false (apply (lambda (aK3ac1@kwd aK3ac2@rest) (if (or (not (aK2eb7@id? aK3ac1@kwd)) (not (aK3ab6@free-id-member? aK3ac1@kwd aK3ab4@valid-kwds))) (aK319e@syntax-violation '#f '"not a valid define-record-type keyword" aK3ac1@kwd) (if (aK2ec3@bound-id-member? aK3ac1@kwd aK3ab8@seen*) (aK319e@syntax-violation '#f '"duplicate use of keyword " aK3aaf@x aK3ac1@kwd) (aK3abb@f (cdr aK3ab7@cls*) (cons aK3ac1@kwd aK3ab8@seen*))))) aK3abf@ls/false) (let ((aK3ac5@t aK3abd@t)) (let ((aK3ac7@ls/false (aK30be@syntax-dispatch aK3ac5@t 'any))) (if aK3ac7@ls/false (apply (lambda (aK3ac9@cls) (aK319e@syntax-violation '#f '"malformed define-record-type clause" aK3ac9@cls)) aK3ac7@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3ac5@t))))))) (void))))))) (let ((aK3aa7@t aK3a83@x)) (let ((aK3aa9@ls/false (aK30be@syntax-dispatch aK3aa7@t '(_ any . each-any)))) (if aK3aa9@ls/false (apply (lambda (aK3aab@namespec aK3aac@clause*) (begin (aK3aa6@verify-clauses aK3a83@x aK3aac@clause*) (aK3aa4@do-define-record aK3aab@namespec aK3aac@clause*))) aK3aa9@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3aa7@t))))))) (set! aK4b8e@aK30b2@define-record-type-macro aK30b2@define-record-type-macro) (set! aK30b4@define-condition-type-macro (lambda (aK3c7f@x) (letrec* ((aK3c82@mkname (lambda (aK3caf@name aK3cb0@suffix) (aK31a2@datum->syntax aK3caf@name (string->symbol (string-append (symbol->string (aK31a4@syntax->datum aK3caf@name)) aK3cb0@suffix)))))) (let ((aK3c83@t aK3c7f@x)) (let ((aK3c85@ls/false (aK30be@syntax-dispatch aK3c83@t '(any any any any any . #(each (any any)))))) (if (and aK3c85@ls/false (apply (lambda (aK3c87@ctxt aK3c88@name aK3c89@super aK3c8a@constructor aK3c8b@predicate aK3c8c@field* aK3c8d@accessor*) (and (aK2eb7@id? aK3c88@name) (aK2eb7@id? aK3c89@super) (aK2eb7@id? aK3c8a@constructor) (aK2eb7@id? aK3c8b@predicate) (for-all aK2eb7@id? aK3c8c@field*) (for-all aK2eb7@id? aK3c8d@accessor*))) aK3c85@ls/false)) (apply (lambda (aK3c95@ctxt aK3c96@name aK3c97@super aK3c98@constructor aK3c99@predicate aK3c9a@field* aK3c9b@accessor*) (let ((aK3ca3@aux-accessor* (map (lambda (aK3ca5@x) (gensym)) aK3c9b@accessor*))) (aK3074@bless (cons 'begin (cons (cons 'define-record-type (cons (list aK3c96@name aK3c98@constructor (gensym)) (cons (list 'parent aK3c97@super) (cons (cons 'fields (map (lambda (aK3ca7@field aK3ca8@aux) (list 'immutable aK3ca7@field aK3ca8@aux)) aK3c9a@field* aK3ca3@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define aK3c99@predicate (list 'condition-predicate (list 'record-type-descriptor aK3c96@name))) (map (lambda (aK3cab@accessor aK3cac@aux) (list 'define aK3cab@accessor (list 'condition-accessor (list 'record-type-descriptor aK3c96@name) aK3cac@aux))) aK3c9b@accessor* aK3ca3@aux-accessor*))))))) aK3c85@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3c83@t))))))) (set! aK4b8f@aK30b4@define-condition-type-macro aK30b4@define-condition-type-macro) (set! aK30b6@incorrect-usage-macro (lambda (aK3cb3@e) (aK319e@syntax-violation '#f '"incorrect usage of auxiliary keyword" aK3cb3@e))) (set! aK4b90@aK30b6@incorrect-usage-macro aK30b6@incorrect-usage-macro) (set! aK30b8@parameterize-macro (lambda (aK3cb5@e) (let ((aK3cb7@t aK3cb5@e)) (let ((aK3cb9@ls/false (aK30be@syntax-dispatch aK3cb7@t '(_ () any . each-any)))) (if aK3cb9@ls/false (apply (lambda (aK3cbb@b aK3cbc@b*) (aK3074@bless (cons 'let (cons '() (cons aK3cbb@b aK3cbc@b*))))) aK3cb9@ls/false) (let ((aK3cbf@t aK3cb7@t)) (let ((aK3cc1@ls/false (aK30be@syntax-dispatch aK3cbf@t '(_ #(each (any any)) any . each-any)))) (if aK3cc1@ls/false (apply (lambda (aK3cc3@olhs* aK3cc4@orhs* aK3cc5@b aK3cc6@b*) (let ((aK3ccb@lhs* (aK318c@generate-temporaries aK3cc3@olhs*)) (aK3ccc@rhs* (aK318c@generate-temporaries aK3cc4@orhs*))) (aK3074@bless (cons (list 'lambda (append aK3ccb@lhs* aK3ccc@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (aK3ccf@lhs aK3cd0@rhs) (list 'let (list (list 't (list aK3ccf@lhs))) (list aK3ccf@lhs aK3cd0@rhs) (cons 'set! (cons aK3cd0@rhs '(t))))) aK3ccb@lhs* aK3ccc@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons aK3cc5@b aK3cc6@b*))) '(swap)))))) (append aK3cc3@olhs* aK3cc4@orhs*))))) aK3cc1@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3cbf@t))))))))) (set! aK4b91@aK30b8@parameterize-macro aK30b8@parameterize-macro) (set! aK30ba@foreign-call-transformer (lambda (aK3cd3@e aK3cd4@r aK3cd5@mr) (let ((aK3cd9@t aK3cd3@e)) (let ((aK3cdb@ls/false (aK30be@syntax-dispatch aK3cd9@t '(_ any . each-any)))) (if aK3cdb@ls/false (apply (lambda (aK3cdd@name aK3cde@arg*) (cons 'foreign-call (cons (aK30e0@chi-expr aK3cdd@name aK3cd4@r aK3cd5@mr) (aK30dc@chi-expr* aK3cde@arg* aK3cd4@r aK3cd5@mr)))) aK3cdb@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3cd9@t)))))) (set! aK4b92@aK30ba@foreign-call-transformer aK30ba@foreign-call-transformer) (set! aK30bc@convert-pattern (lambda (aK3ce1@pattern aK3ce2@keys) (letrec* ((aK3ce6@cvt* (lambda (aK3d85@p* aK3d86@n aK3d87@ids) (if (null? aK3d85@p*) (values '() aK3d87@ids) (call-with-values (lambda () (aK3ce6@cvt* (cdr aK3d85@p*) aK3d86@n aK3d87@ids)) (lambda (aK3d8f@aK3d8c aK3d90@aK3d8e) (let ((aK3d93@ids aK3d90@aK3d8e) (aK3d94@y aK3d8f@aK3d8c)) (call-with-values (lambda () (aK3ce8@cvt (car aK3d85@p*) aK3d86@n aK3d93@ids)) (lambda (aK3d9b@aK3d98 aK3d9c@aK3d9a) (let ((aK3d9f@ids aK3d9c@aK3d9a) (aK3da0@x aK3d9b@aK3d98)) (values (cons aK3da0@x aK3d94@y) aK3d9f@ids)))))))))) (aK3ce8@cvt (lambda (aK3ce9@p aK3cea@n aK3ceb@ids) (let ((aK3cef@t aK3ce9@p)) (let ((aK3cf1@ls/false (aK30be@syntax-dispatch aK3cef@t 'any))) (if (and aK3cf1@ls/false (apply (lambda (aK3cf3@id) (aK2eb7@id? aK3cf3@id)) aK3cf1@ls/false)) (apply (lambda (aK3cf5@id) (if (aK2ec3@bound-id-member? aK3ce9@p aK3ce2@keys) (values (vector 'free-id aK3ce9@p) aK3ceb@ids) (if (aK2ebd@free-id=? aK3ce9@p (aK3046@scheme-stx '_)) (values '_ aK3ceb@ids) (values 'any (cons (cons aK3ce9@p aK3cea@n) aK3ceb@ids))))) aK3cf1@ls/false) (let ((aK3cf7@t aK3cef@t)) (let ((aK3cf9@ls/false (aK30be@syntax-dispatch aK3cf7@t '(any any)))) (if (and aK3cf9@ls/false (apply (lambda (aK3cfb@p aK3cfc@dots) (aK30c0@ellipsis? aK3cfc@dots)) aK3cf9@ls/false)) (apply (lambda (aK3cff@p aK3d00@dots) (call-with-values (lambda () (aK3ce8@cvt aK3cff@p (+ aK3cea@n '1) aK3ceb@ids)) (lambda (aK3d07@aK3d04 aK3d08@aK3d06) (let ((aK3d0b@ids aK3d08@aK3d06) (aK3d0c@p aK3d07@aK3d04)) (values (if (eq? aK3d0c@p 'any) 'each-any (vector 'each aK3d0c@p)) aK3d0b@ids))))) aK3cf9@ls/false) (let ((aK3d0f@t aK3cf7@t)) (let ((aK3d11@ls/false (aK30be@syntax-dispatch aK3d0f@t '(any any . #(each+ any () any))))) (if (and aK3d11@ls/false (apply (lambda (aK3d13@x aK3d14@dots aK3d15@ys aK3d16@z) (aK30c0@ellipsis? aK3d14@dots)) aK3d11@ls/false)) (apply (lambda (aK3d1b@x aK3d1c@dots aK3d1d@ys aK3d1e@z) (call-with-values (lambda () (aK3ce8@cvt aK3d1e@z aK3cea@n aK3ceb@ids)) (lambda (aK3d27@aK3d24 aK3d28@aK3d26) (let ((aK3d2b@ids aK3d28@aK3d26) (aK3d2c@z aK3d27@aK3d24)) (call-with-values (lambda () (aK3ce6@cvt* aK3d1d@ys aK3cea@n aK3d2b@ids)) (lambda (aK3d33@aK3d30 aK3d34@aK3d32) (let ((aK3d37@ids aK3d34@aK3d32) (aK3d38@ys aK3d33@aK3d30)) (call-with-values (lambda () (aK3ce8@cvt aK3d1b@x (+ aK3cea@n '1) aK3d37@ids)) (lambda (aK3d3f@aK3d3c aK3d40@aK3d3e) (let ((aK3d43@ids aK3d40@aK3d3e) (aK3d44@x aK3d3f@aK3d3c)) (values (vector 'each+ aK3d44@x (reverse aK3d38@ys) aK3d2c@z) aK3d43@ids))))))))))) aK3d11@ls/false) (let ((aK3d47@t aK3d0f@t)) (let ((aK3d49@ls/false (aK30be@syntax-dispatch aK3d47@t '(any . any)))) (if aK3d49@ls/false (apply (lambda (aK3d4b@x aK3d4c@y) (call-with-values (lambda () (aK3ce8@cvt aK3d4c@y aK3cea@n aK3ceb@ids)) (lambda (aK3d53@aK3d50 aK3d54@aK3d52) (let ((aK3d57@ids aK3d54@aK3d52) (aK3d58@y aK3d53@aK3d50)) (call-with-values (lambda () (aK3ce8@cvt aK3d4b@x aK3cea@n aK3d57@ids)) (lambda (aK3d5f@aK3d5c aK3d60@aK3d5e) (let ((aK3d63@ids aK3d60@aK3d5e) (aK3d64@x aK3d5f@aK3d5c)) (values (cons aK3d64@x aK3d58@y) aK3d63@ids)))))))) aK3d49@ls/false) (let ((aK3d67@t aK3d47@t)) (let ((aK3d69@ls/false (aK30be@syntax-dispatch aK3d67@t '()))) (if aK3d69@ls/false (apply (lambda () (values '() aK3ceb@ids)) aK3d69@ls/false) (let ((aK3d6b@t aK3d67@t)) (let ((aK3d6d@ls/false (aK30be@syntax-dispatch aK3d6b@t '#(vector each-any)))) (if (and aK3d6d@ls/false (apply (lambda (aK3d6f@p) (not (aK2e83@stx? aK3d6f@p))) aK3d6d@ls/false)) (apply (lambda (aK3d71@p) (call-with-values (lambda () (aK3ce8@cvt aK3d71@p aK3cea@n aK3ceb@ids)) (lambda (aK3d77@aK3d74 aK3d78@aK3d76) (let ((aK3d7b@ids aK3d78@aK3d76) (aK3d7c@p aK3d77@aK3d74)) (values (vector 'vector aK3d7c@p) aK3d7b@ids))))) aK3d6d@ls/false) (let ((aK3d7f@t aK3d6b@t)) (let ((aK3d81@ls/false (aK30be@syntax-dispatch aK3d7f@t 'any))) (if aK3d81@ls/false (apply (lambda (aK3d83@datum) (values (vector 'atom (aK2ecb@stx->datum aK3d83@datum)) aK3ceb@ids)) aK3d81@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3d7f@t))))))))))))))))))))))))) (aK3ce8@cvt aK3ce1@pattern '0 '())))) (set! aK4b93@aK30bc@convert-pattern aK30bc@convert-pattern) (set! aK30be@syntax-dispatch (letrec* ((aK3da4@stx^ (lambda (aK3e7f@e aK3e80@m* aK3e81@s* aK3e82@ae*) (if (and (null? aK3e80@m*) (null? aK3e81@s*) (null? aK3e82@ae*)) aK3e7f@e (aK2e9f@mkstx aK3e7f@e aK3e80@m* aK3e81@s* aK3e82@ae*)))) (aK3da6@match-each (lambda (aK3e5f@e aK3e60@p aK3e61@m* aK3e62@s* aK3e63@ae*) (if (pair? aK3e5f@e) (let ((aK3e69@first (aK3db2@match (car aK3e5f@e) aK3e60@p aK3e61@m* aK3e62@s* aK3e63@ae* '()))) (and aK3e69@first (let ((aK3e6b@rest (aK3da6@match-each (cdr aK3e5f@e) aK3e60@p aK3e61@m* aK3e62@s* aK3e63@ae*))) (and aK3e6b@rest (cons aK3e69@first aK3e6b@rest))))) (if (null? aK3e5f@e) '() (if (aK2e83@stx? aK3e5f@e) (and (not (aK2e3d@top-marked? aK3e61@m*)) (call-with-values (lambda () (join-wraps aK3e61@m* aK3e62@s* aK3e63@ae* aK3e5f@e)) (lambda (aK3e73@aK3e6e aK3e74@aK3e70 aK3e75@aK3e72) (let ((aK3e79@ae* aK3e75@aK3e72) (aK3e7a@s* aK3e74@aK3e70) (aK3e7b@m* aK3e73@aK3e6e)) (aK3da6@match-each (aK2e85@stx-expr aK3e5f@e) aK3e60@p aK3e7b@m* aK3e7a@s* aK3e79@ae*))))) (if (aK29fb@aK28cd@annotation? aK3e5f@e) (aK3da6@match-each (aK29fd@aK28d1@annotation-expression aK3e5f@e) aK3e60@p aK3e61@m* aK3e62@s* aK3e63@ae*) '#f)))))) (aK3da8@match-each+ (lambda (aK3e1f@e aK3e20@x-pat aK3e21@y-pat aK3e22@z-pat aK3e23@m* aK3e24@s* aK3e25@ae* aK3e26@r) (let aK3e37@f ((aK3e2f@e aK3e1f@e) (aK3e30@m* aK3e23@m*) (aK3e31@s* aK3e24@s*) (aK3e32@ae* aK3e25@ae*)) (if (pair? aK3e2f@e) (call-with-values (lambda () (aK3e37@f (cdr aK3e2f@e) aK3e30@m* aK3e31@s* aK3e32@ae*)) (lambda (aK3e3f@aK3e3a aK3e40@aK3e3c aK3e41@aK3e3e) (let ((aK3e45@r aK3e41@aK3e3e) (aK3e46@y-pat aK3e40@aK3e3c) (aK3e47@xr* aK3e3f@aK3e3a)) (if aK3e45@r (if (null? aK3e46@y-pat) (let ((aK3e4b@xr (aK3db2@match (car aK3e2f@e) aK3e20@x-pat aK3e30@m* aK3e31@s* aK3e32@ae* '()))) (if aK3e4b@xr (values (cons aK3e4b@xr aK3e47@xr*) aK3e46@y-pat aK3e45@r) (values '#f '#f '#f))) (values '() (cdr aK3e46@y-pat) (aK3db2@match (car aK3e2f@e) (car aK3e46@y-pat) aK3e30@m* aK3e31@s* aK3e32@ae* aK3e45@r))) (values '#f '#f '#f))))) (if (aK2e83@stx? aK3e2f@e) (if (aK2e3d@top-marked? aK3e30@m*) (values '() aK3e21@y-pat (aK3db2@match aK3e2f@e aK3e22@z-pat aK3e30@m* aK3e31@s* aK3e32@ae* aK3e26@r)) (call-with-values (lambda () (join-wraps aK3e30@m* aK3e31@s* aK3e32@ae* aK3e2f@e)) (lambda (aK3e53@aK3e4e aK3e54@aK3e50 aK3e55@aK3e52) (let ((aK3e59@ae* aK3e55@aK3e52) (aK3e5a@s* aK3e54@aK3e50) (aK3e5b@m* aK3e53@aK3e4e)) (aK3e37@f (aK2e85@stx-expr aK3e2f@e) aK3e5b@m* aK3e5a@s* aK3e59@ae*))))) (if (aK29fb@aK28cd@annotation? aK3e2f@e) (aK3e37@f (aK29fd@aK28d1@annotation-expression aK3e2f@e) aK3e30@m* aK3e31@s* aK3e32@ae*) (values '() aK3e21@y-pat (aK3db2@match aK3e2f@e aK3e22@z-pat aK3e30@m* aK3e31@s* aK3e32@ae* aK3e26@r)))))))) (aK3daa@match-each-any (lambda (aK3e03@e aK3e04@m* aK3e05@s* aK3e06@ae*) (if (pair? aK3e03@e) (let ((aK3e0b@l (aK3daa@match-each-any (cdr aK3e03@e) aK3e04@m* aK3e05@s* aK3e06@ae*))) (and aK3e0b@l (cons (aK3da4@stx^ (car aK3e03@e) aK3e04@m* aK3e05@s* aK3e06@ae*) aK3e0b@l))) (if (null? aK3e03@e) '() (if (aK2e83@stx? aK3e03@e) (and (not (aK2e3d@top-marked? aK3e04@m*)) (call-with-values (lambda () (join-wraps aK3e04@m* aK3e05@s* aK3e06@ae* aK3e03@e)) (lambda (aK3e13@aK3e0e aK3e14@aK3e10 aK3e15@aK3e12) (let ((aK3e19@ae* aK3e15@aK3e12) (aK3e1a@s* aK3e14@aK3e10) (aK3e1b@m* aK3e13@aK3e0e)) (aK3daa@match-each-any (aK2e85@stx-expr aK3e03@e) aK3e1b@m* aK3e1a@s* aK3e19@ae*))))) (if (aK29fb@aK28cd@annotation? aK3e03@e) (aK3daa@match-each-any (aK29fd@aK28d1@annotation-expression aK3e03@e) aK3e04@m* aK3e05@s* aK3e06@ae*) '#f)))))) (aK3dac@match-empty (lambda (aK3dfd@p aK3dfe@r) (if (null? aK3dfd@p) aK3dfe@r (if (eq? aK3dfd@p '_) aK3dfe@r (if (eq? aK3dfd@p 'any) (cons '() aK3dfe@r) (if (pair? aK3dfd@p) (aK3dac@match-empty (car aK3dfd@p) (aK3dac@match-empty (cdr aK3dfd@p) aK3dfe@r)) (if (eq? aK3dfd@p 'each-any) (cons '() aK3dfe@r) (let ((aK3e01@t (vector-ref aK3dfd@p '0))) (if (memv aK3e01@t '(each)) (aK3dac@match-empty (vector-ref aK3dfd@p '1) aK3dfe@r) (if (memv aK3e01@t '(each+)) (aK3dac@match-empty (vector-ref aK3dfd@p '1) (aK3dac@match-empty (reverse (vector-ref aK3dfd@p '2)) (aK3dac@match-empty (vector-ref aK3dfd@p '3) aK3dfe@r))) (if (memv aK3e01@t '(free-id atom)) aK3dfe@r (if (memv aK3e01@t '(scheme-id atom)) aK3dfe@r (if (memv aK3e01@t '(vector)) (aK3dac@match-empty (vector-ref aK3dfd@p '1) aK3dfe@r) (assertion-violation 'syntax-dispatch '"invalid pattern" aK3dfd@p)))))))))))))) (aK3dae@combine (lambda (aK3df9@r* aK3dfa@r) (if (null? (car aK3df9@r*)) aK3dfa@r (cons (map car aK3df9@r*) (aK3dae@combine (map cdr aK3df9@r*) aK3dfa@r))))) (aK3db0@match* (lambda (aK3dd5@e aK3dd6@p aK3dd7@m* aK3dd8@s* aK3dd9@ae* aK3dda@r) (if (null? aK3dd6@p) (and (null? aK3dd5@e) aK3dda@r) (if (pair? aK3dd6@p) (and (pair? aK3dd5@e) (aK3db2@match (car aK3dd5@e) (car aK3dd6@p) aK3dd7@m* aK3dd8@s* aK3dd9@ae* (aK3db2@match (cdr aK3dd5@e) (cdr aK3dd6@p) aK3dd7@m* aK3dd8@s* aK3dd9@ae* aK3dda@r))) (if (eq? aK3dd6@p 'each-any) (let ((aK3de1@l (aK3daa@match-each-any aK3dd5@e aK3dd7@m* aK3dd8@s* aK3dd9@ae*))) (and aK3de1@l (cons aK3de1@l aK3dda@r))) (let ((aK3de3@t (vector-ref aK3dd6@p '0))) (if (memv aK3de3@t '(each)) (if (null? aK3dd5@e) (aK3dac@match-empty (vector-ref aK3dd6@p '1) aK3dda@r) (let ((aK3de5@r* (aK3da6@match-each aK3dd5@e (vector-ref aK3dd6@p '1) aK3dd7@m* aK3dd8@s* aK3dd9@ae*))) (and aK3de5@r* (aK3dae@combine aK3de5@r* aK3dda@r)))) (if (memv aK3de3@t '(free-id)) (and (symbol? aK3dd5@e) (aK2e3d@top-marked? aK3dd7@m*) (aK2ebd@free-id=? (aK3da4@stx^ aK3dd5@e aK3dd7@m* aK3dd8@s* aK3dd9@ae*) (vector-ref aK3dd6@p '1)) aK3dda@r) (if (memv aK3de3@t '(scheme-id)) (and (symbol? aK3dd5@e) (aK2e3d@top-marked? aK3dd7@m*) (aK2ebd@free-id=? (aK3da4@stx^ aK3dd5@e aK3dd7@m* aK3dd8@s* aK3dd9@ae*) (aK3046@scheme-stx (vector-ref aK3dd6@p '1))) aK3dda@r) (if (memv aK3de3@t '(each+)) (call-with-values (lambda () (aK3da8@match-each+ aK3dd5@e (vector-ref aK3dd6@p '1) (vector-ref aK3dd6@p '2) (vector-ref aK3dd6@p '3) aK3dd7@m* aK3dd8@s* aK3dd9@ae* aK3dda@r)) (lambda (aK3ded@aK3de8 aK3dee@aK3dea aK3def@aK3dec) (let ((aK3df3@r aK3def@aK3dec) (aK3df4@y-pat aK3dee@aK3dea) (aK3df5@xr* aK3ded@aK3de8)) (and aK3df3@r (null? aK3df4@y-pat) (if (null? aK3df5@xr*) (aK3dac@match-empty (vector-ref aK3dd6@p '1) aK3df3@r) (aK3dae@combine aK3df5@xr* aK3df3@r)))))) (if (memv aK3de3@t '(atom)) (and (fast-equal? (vector-ref aK3dd6@p '1) (aK2ec9@strip aK3dd5@e aK3dd7@m*)) aK3dda@r) (if (memv aK3de3@t '(vector)) (and (vector? aK3dd5@e) (aK3db2@match (vector->list aK3dd5@e) (vector-ref aK3dd6@p '1) aK3dd7@m* aK3dd8@s* aK3dd9@ae* aK3dda@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" aK3dd6@p))))))))))))) (aK3db2@match (lambda (aK3db7@e aK3db8@p aK3db9@m* aK3dba@s* aK3dbb@ae* aK3dbc@r) (if (not aK3dbc@r) '#f (if (eq? aK3db8@p '_) aK3dbc@r (if (eq? aK3db8@p 'any) (cons (aK3da4@stx^ aK3db7@e aK3db9@m* aK3dba@s* aK3dbb@ae*) aK3dbc@r) (if (aK2e83@stx? aK3db7@e) (and (not (aK2e3d@top-marked? aK3db9@m*)) (call-with-values (lambda () (join-wraps aK3db9@m* aK3dba@s* aK3dbb@ae* aK3db7@e)) (lambda (aK3dc9@aK3dc4 aK3dca@aK3dc6 aK3dcb@aK3dc8) (let ((aK3dcf@ae* aK3dcb@aK3dc8) (aK3dd0@s* aK3dca@aK3dc6) (aK3dd1@m* aK3dc9@aK3dc4)) (aK3db2@match (aK2e85@stx-expr aK3db7@e) aK3db8@p aK3dd1@m* aK3dd0@s* aK3dcf@ae* aK3dbc@r))))) (if (aK29fb@aK28cd@annotation? aK3db7@e) (aK3db2@match (aK29fd@aK28d1@annotation-expression aK3db7@e) aK3db8@p aK3db9@m* aK3dba@s* aK3dbb@ae* aK3dbc@r) (aK3db0@match* aK3db7@e aK3db8@p aK3db9@m* aK3dba@s* aK3dbb@ae* aK3dbc@r))))))))) (lambda (aK3db3@e aK3db4@p) (aK3db2@match aK3db3@e aK3db4@p '() '() '() '())))) (set! aK4b94@aK30be@syntax-dispatch aK30be@syntax-dispatch) (set! aK30c0@ellipsis? (lambda (aK3e87@x) (and (aK2eb7@id? aK3e87@x) (aK2ebd@free-id=? aK3e87@x (aK3046@scheme-stx '...))))) (set! aK4b95@aK30c0@ellipsis? aK30c0@ellipsis?) (set! aK30c2@underscore? (lambda (aK3e89@x) (and (aK2eb7@id? aK3e89@x) (aK2ebd@free-id=? aK3e89@x (aK3046@scheme-stx '_))))) (set! aK4b96@aK30c2@underscore? aK30c2@underscore?) (set! aK30c4@verify-literals (lambda (aK3e8b@lits aK3e8c@expr) (for-each (lambda (aK3e8f@x) (if (or (not (aK2eb7@id? aK3e8f@x)) (aK30c0@ellipsis? aK3e8f@x) (aK30c2@underscore? aK3e8f@x)) (aK319e@syntax-violation '#f '"invalid literal" aK3e8c@expr aK3e8f@x) (void))) aK3e8b@lits))) (set! aK4b97@aK30c4@verify-literals aK30c4@verify-literals) (set! aK30c6@syntax-case-transformer (letrec* ((aK3e92@build-dispatch-call (lambda (aK3f03@pvars aK3f04@expr aK3f05@y aK3f06@r aK3f07@mr) (let ((aK3f0d@ids (map car aK3f03@pvars)) (aK3f0e@levels (map cdr aK3f03@pvars))) (let ((aK3f11@labels (map aK2e43@gen-label aK3f0d@ids)) (aK3f12@new-vars (map aK2e3f@gen-lexical aK3f0d@ids))) (let ((aK3f15@body (aK30e0@chi-expr (aK2ea3@add-subst (aK2e77@make-full-rib aK3f0d@ids aK3f11@labels) aK3f04@expr) (append (map (lambda (aK3f17@label aK3f18@var aK3f19@level) (cons aK3f17@label (aK2ed1@make-binding 'syntax (cons aK3f18@var aK3f19@level)))) aK3f11@labels aK3f12@new-vars (map cdr aK3f03@pvars)) aK3f06@r) aK3f07@mr))) (list '(primitive apply) (aK2e1a@aK2d4c@build-lambda '#f aK3f12@new-vars aK3f15@body) aK3f05@y)))))) (aK3e94@invalid-ids-error (lambda (aK3ef7@id* aK3ef8@e aK3ef9@class) (let aK3f01@find ((aK3efd@id* aK3ef7@id*) (aK3efe@ok* '())) (if (null? aK3efd@id*) (aK319e@syntax-violation '#f '"invalid syntax" aK3ef8@e) (if (aK2eb7@id? (car aK3efd@id*)) (if (aK2ec3@bound-id-member? (car aK3efd@id*) aK3efe@ok*) (aK319a@syntax-error (car aK3efd@id*) '"duplicate " aK3ef9@class) (aK3f01@find (cdr aK3efd@id*) (cons (car aK3efd@id*) aK3efe@ok*))) (aK319a@syntax-error (car aK3efd@id*) '"invalid " aK3ef9@class)))))) (aK3e96@gen-clause (lambda (aK3ecf@x aK3ed0@keys aK3ed1@clauses aK3ed2@r aK3ed3@mr aK3ed4@pat aK3ed5@fender aK3ed6@expr) (call-with-values (lambda () (aK30bc@convert-pattern aK3ed4@pat aK3ed0@keys)) (lambda (aK3ee3@aK3ee0 aK3ee4@aK3ee2) (let ((aK3ee7@pvars aK3ee4@aK3ee2) (aK3ee8@p aK3ee3@aK3ee0)) (if (not (aK2ec1@distinct-bound-ids? (map car aK3ee7@pvars))) (aK3e94@invalid-ids-error (map car aK3ee7@pvars) aK3ed4@pat '"pattern variable") (if (not (for-all (lambda (aK3eeb@x) (not (aK30c0@ellipsis? (car aK3eeb@x)))) aK3ee7@pvars)) (aK319e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" aK3ed4@pat) (let ((aK3eed@y (aK2e3f@gen-lexical 'tmp))) (let ((aK3eef@test (if (eq? aK3ed5@fender '#t) aK3eed@y (let ((aK3ef1@call (aK3e92@build-dispatch-call aK3ee7@pvars aK3ed5@fender aK3eed@y aK3ed2@r aK3ed3@mr))) (list 'if aK3eed@y aK3ef1@call (list 'quote '#f)))))) (let ((aK3ef3@conseq (aK3e92@build-dispatch-call aK3ee7@pvars aK3ed6@expr aK3eed@y aK3ed2@r aK3ed3@mr))) (let ((aK3ef5@altern (aK3e98@gen-syntax-case aK3ecf@x aK3ed0@keys aK3ed1@clauses aK3ed2@r aK3ed3@mr))) (list (aK2e1a@aK2d4c@build-lambda '#f (list aK3eed@y) (list 'if aK3eef@test aK3ef3@conseq aK3ef5@altern)) (list '(primitive syntax-dispatch) aK3ecf@x (list 'quote aK3ee8@p)))))))))))))) (aK3e98@gen-syntax-case (lambda (aK3ead@x aK3eae@keys aK3eaf@clauses aK3eb0@r aK3eb1@mr) (if (null? aK3eaf@clauses) (list '(primitive syntax-error) aK3ead@x) (let ((aK3eb7@t (car aK3eaf@clauses))) (let ((aK3eb9@ls/false (aK30be@syntax-dispatch aK3eb7@t '(any any)))) (if aK3eb9@ls/false (apply (lambda (aK3ebb@pat aK3ebc@expr) (if (and (aK2eb7@id? aK3ebb@pat) (not (aK2ec3@bound-id-member? aK3ebb@pat aK3eae@keys)) (not (aK30c0@ellipsis? aK3ebb@pat))) (if (aK2ebd@free-id=? aK3ebb@pat (aK3046@scheme-stx '_)) (aK30e0@chi-expr aK3ebc@expr aK3eb0@r aK3eb1@mr) (let ((aK3ebf@lab (aK2e43@gen-label aK3ebb@pat)) (aK3ec0@lex (aK2e3f@gen-lexical aK3ebb@pat))) (let ((aK3ec3@body (aK30e0@chi-expr (aK2ea3@add-subst (aK2e77@make-full-rib (list aK3ebb@pat) (list aK3ebf@lab)) aK3ebc@expr) (cons (cons aK3ebf@lab (aK2ed1@make-binding 'syntax (cons aK3ec0@lex '0))) aK3eb0@r) aK3eb1@mr))) (list (aK2e1a@aK2d4c@build-lambda '#f (list aK3ec0@lex) aK3ec3@body) aK3ead@x)))) (aK3e96@gen-clause aK3ead@x aK3eae@keys (cdr aK3eaf@clauses) aK3eb0@r aK3eb1@mr aK3ebb@pat '#t aK3ebc@expr))) aK3eb9@ls/false) (let ((aK3ec5@t aK3eb7@t)) (let ((aK3ec7@ls/false (aK30be@syntax-dispatch aK3ec5@t '(any any any)))) (if aK3ec7@ls/false (apply (lambda (aK3ec9@pat aK3eca@fender aK3ecb@expr) (aK3e96@gen-clause aK3ead@x aK3eae@keys (cdr aK3eaf@clauses) aK3eb0@r aK3eb1@mr aK3ec9@pat aK3eca@fender aK3ecb@expr)) aK3ec7@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3ec5@t))))))))))) (lambda (aK3e99@e aK3e9a@r aK3e9b@mr) (let ((aK3e9f@t aK3e99@e)) (let ((aK3ea1@ls/false (aK30be@syntax-dispatch aK3e9f@t '(_ any each-any . each-any)))) (if aK3ea1@ls/false (apply (lambda (aK3ea3@expr aK3ea4@keys aK3ea5@clauses) (begin (aK30c4@verify-literals aK3ea4@keys aK3e99@e) (let ((aK3ea9@x (aK2e3f@gen-lexical 'tmp))) (let ((aK3eab@body (aK3e98@gen-syntax-case aK3ea9@x aK3ea4@keys aK3ea5@clauses aK3e9a@r aK3e9b@mr))) (list (aK2e1a@aK2d4c@build-lambda '#f (list aK3ea9@x) aK3eab@body) (aK30e0@chi-expr aK3ea3@expr aK3e9a@r aK3e9b@mr)))))) aK3ea1@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3e9f@t))))))) (set! aK4b98@aK30c6@syntax-case-transformer aK30c6@syntax-case-transformer) (set! aK30c8@ellipsis-map (lambda (aK3f1d@proc aK3f1e@ls . aK3f21@ls*) (letrec* ((aK3f24@who '...)) (begin (if (not (list? aK3f1e@ls)) (assertion-violation aK3f24@who '"not a list" aK3f1e@ls) (void)) (if (not (null? aK3f21@ls*)) (let ((aK3f25@n (length aK3f1e@ls))) (for-each (lambda (aK3f27@x) (begin (if (not (list? aK3f27@x)) (assertion-violation aK3f24@who '"not a list" aK3f27@x) (void)) (if (not (= (length aK3f27@x) aK3f25@n)) (assertion-violation aK3f24@who '"length mismatch" aK3f1e@ls aK3f27@x) (void)))) aK3f21@ls*)) (void)) (apply map aK3f1d@proc aK3f1e@ls aK3f21@ls*))))) (set! aK4b99@aK30c8@ellipsis-map aK30c8@ellipsis-map) (set! aK30ca@syntax-transformer (letrec* ((aK3f2a@gen-syntax (lambda (aK3fa1@src aK3fa2@e aK3fa3@r aK3fa4@maps aK3fa5@ellipsis? aK3fa6@vec?) (let ((aK3fad@t aK3fa2@e)) (let ((aK3faf@ls/false (aK30be@syntax-dispatch aK3fad@t 'any))) (if (and aK3faf@ls/false (apply (lambda (aK3fb1@dots) (aK3fa5@ellipsis? aK3fb1@dots)) aK3faf@ls/false)) (apply (lambda (aK3fb3@dots) (aK319e@syntax-violation '#f '"misplaced ellipsis in syntax form" aK3fa1@src)) aK3faf@ls/false) (let ((aK3fb5@t aK3fad@t)) (let ((aK3fb7@ls/false (aK30be@syntax-dispatch aK3fb5@t 'any))) (if (and aK3fb7@ls/false (apply (lambda (aK3fb9@id) (aK2eb7@id? aK3fb9@id)) aK3fb7@ls/false)) (apply (lambda (aK3fbb@id) (let ((aK3fbd@label (aK2ecd@id->label aK3fa2@e))) (let ((aK3fbf@b (aK2ecf@label->binding aK3fbd@label aK3fa3@r))) (if (eq? (aK2ed3@binding-type aK3fbf@b) 'syntax) (call-with-values (lambda () (let ((aK3fc5@var.lev (aK2ed5@binding-value aK3fbf@b))) (aK3f2c@gen-ref aK3fa1@src (car aK3fc5@var.lev) (cdr aK3fc5@var.lev) aK3fa4@maps))) (lambda (aK3fc7@aK3fc2 aK3fc8@aK3fc4) (let ((aK3fcb@maps aK3fc8@aK3fc4) (aK3fcc@var aK3fc7@aK3fc2)) (values (list 'ref aK3fcc@var) aK3fcb@maps)))) (values (list 'quote aK3fa2@e) aK3fa4@maps))))) aK3fb7@ls/false) (let ((aK3fcf@t aK3fb5@t)) (let ((aK3fd1@ls/false (aK30be@syntax-dispatch aK3fcf@t '(any any)))) (if (and aK3fd1@ls/false (apply (lambda (aK3fd3@dots aK3fd4@e) (aK3fa5@ellipsis? aK3fd3@dots)) aK3fd1@ls/false)) (apply (lambda (aK3fd7@dots aK3fd8@e) (if aK3fa6@vec? (aK319e@syntax-violation '#f '"misplaced ellipsis in syntax form" aK3fa1@src) (aK3f2a@gen-syntax aK3fa1@src aK3fd8@e aK3fa3@r aK3fa4@maps (lambda (aK3fdb@x) '#f) '#f))) aK3fd1@ls/false) (let ((aK3fdd@t aK3fcf@t)) (let ((aK3fdf@ls/false (aK30be@syntax-dispatch aK3fdd@t '(any any . any)))) (if (and aK3fdf@ls/false (apply (lambda (aK3fe1@x aK3fe2@dots aK3fe3@y) (aK3fa5@ellipsis? aK3fe2@dots)) aK3fdf@ls/false)) (apply (lambda (aK3fe7@x aK3fe8@dots aK3fe9@y) (let aK3fff@f ((aK3fed@y aK3fe9@y) (aK3fee@k (lambda (aK3ff1@maps) (call-with-values (lambda () (aK3f2a@gen-syntax aK3fa1@src aK3fe7@x aK3fa3@r (cons '() aK3ff1@maps) aK3fa5@ellipsis? '#f)) (lambda (aK3ff7@aK3ff4 aK3ff8@aK3ff6) (let ((aK3ffb@maps aK3ff8@aK3ff6) (aK3ffc@x aK3ff7@aK3ff4)) (if (null? (car aK3ffb@maps)) (aK319e@syntax-violation '#f '"extra ellipsis in syntax form" aK3fa1@src) (values (aK3f32@gen-map aK3ffc@x (car aK3ffb@maps)) (cdr aK3ffb@maps))))))))) (let ((aK4001@t aK3fed@y)) (let ((aK4003@ls/false (aK30be@syntax-dispatch aK4001@t '()))) (if aK4003@ls/false (apply (lambda () (aK3fee@k aK3fa4@maps)) aK4003@ls/false) (let ((aK4005@t aK4001@t)) (let ((aK4007@ls/false (aK30be@syntax-dispatch aK4005@t '(any . any)))) (if (and aK4007@ls/false (apply (lambda (aK4009@dots aK400a@y) (aK3fa5@ellipsis? aK4009@dots)) aK4007@ls/false)) (apply (lambda (aK400d@dots aK400e@y) (aK3fff@f aK400e@y (lambda (aK4011@maps) (call-with-values (lambda () (aK3fee@k (cons '() aK4011@maps))) (lambda (aK4017@aK4014 aK4018@aK4016) (let ((aK401b@maps aK4018@aK4016) (aK401c@x aK4017@aK4014)) (if (null? (car aK401b@maps)) (aK319e@syntax-violation '#f '"extra ellipsis in syntax form" aK3fa1@src) (values (aK3f30@gen-mappend aK401c@x (car aK401b@maps)) (cdr aK401b@maps))))))))) aK4007@ls/false) (let ((aK401f@t aK4005@t)) (let ((aK4021@ls/false (aK30be@syntax-dispatch aK401f@t '_))) (if aK4021@ls/false (apply (lambda () (call-with-values (lambda () (aK3f2a@gen-syntax aK3fa1@src aK3fed@y aK3fa3@r aK3fa4@maps aK3fa5@ellipsis? aK3fa6@vec?)) (lambda (aK4027@aK4024 aK4028@aK4026) (let ((aK402b@maps aK4028@aK4026) (aK402c@y aK4027@aK4024)) (call-with-values (lambda () (aK3fee@k aK402b@maps)) (lambda (aK4033@aK4030 aK4034@aK4032) (let ((aK4037@maps aK4034@aK4032) (aK4038@x aK4033@aK4030)) (values (aK3f2e@gen-append aK4038@x aK402c@y) aK4037@maps)))))))) aK4021@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK401f@t)))))))))))) aK3fdf@ls/false) (let ((aK403b@t aK3fdd@t)) (let ((aK403d@ls/false (aK30be@syntax-dispatch aK403b@t '(any . any)))) (if aK403d@ls/false (apply (lambda (aK403f@x aK4040@y) (call-with-values (lambda () (aK3f2a@gen-syntax aK3fa1@src aK403f@x aK3fa3@r aK3fa4@maps aK3fa5@ellipsis? '#f)) (lambda (aK4047@aK4044 aK4048@aK4046) (let ((aK404b@maps aK4048@aK4046) (aK404c@xnew aK4047@aK4044)) (call-with-values (lambda () (aK3f2a@gen-syntax aK3fa1@src aK4040@y aK3fa3@r aK404b@maps aK3fa5@ellipsis? aK3fa6@vec?)) (lambda (aK4053@aK4050 aK4054@aK4052) (let ((aK4057@maps aK4054@aK4052) (aK4058@ynew aK4053@aK4050)) (values (aK3f34@gen-cons aK3fa2@e aK403f@x aK4040@y aK404c@xnew aK4058@ynew) aK4057@maps)))))))) aK403d@ls/false) (let ((aK405b@t aK403b@t)) (let ((aK405d@ls/false (aK30be@syntax-dispatch aK405b@t '#(vector each-any)))) (if aK405d@ls/false (apply (lambda (aK405f@ls) (call-with-values (lambda () (aK3f2a@gen-syntax aK3fa1@src aK405f@ls aK3fa3@r aK3fa4@maps aK3fa5@ellipsis? '#t)) (lambda (aK4065@aK4062 aK4066@aK4064) (let ((aK4069@maps aK4066@aK4064) (aK406a@lsnew aK4065@aK4062)) (values (aK3f36@gen-vector aK3fa2@e aK405f@ls aK406a@lsnew) aK4069@maps))))) aK405d@ls/false) (let ((aK406d@t aK405b@t)) (let ((aK406f@ls/false (aK30be@syntax-dispatch aK406d@t '_))) (if aK406f@ls/false (apply (lambda () (values (list 'quote aK3fa2@e) aK3fa4@maps)) aK406f@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK406d@t)))))))))))))))))))))))) (aK3f2c@gen-ref (lambda (aK3f87@src aK3f88@var aK3f89@level aK3f8a@maps) (if (= aK3f89@level '0) (values aK3f88@var aK3f8a@maps) (if (null? aK3f8a@maps) (aK319e@syntax-violation '#f '"missing ellipsis in syntax form" aK3f87@src) (call-with-values (lambda () (aK3f2c@gen-ref aK3f87@src aK3f88@var (- aK3f89@level '1) (cdr aK3f8a@maps))) (lambda (aK3f93@aK3f90 aK3f94@aK3f92) (let ((aK3f97@outer-maps aK3f94@aK3f92) (aK3f98@outer-var aK3f93@aK3f90)) (let ((aK3f9b@t (assq aK3f98@outer-var (car aK3f8a@maps)))) (if aK3f9b@t ((lambda (aK3f9d@b) (values (cdr aK3f9d@b) aK3f8a@maps)) aK3f9b@t) (let ((aK3f9f@inner-var (aK2e3f@gen-lexical 'tmp))) (values aK3f9f@inner-var (cons (cons (cons aK3f98@outer-var aK3f9f@inner-var) (car aK3f8a@maps)) aK3f97@outer-maps)))))))))))) (aK3f2e@gen-append (lambda (aK3f83@x aK3f84@y) (if (fast-equal? aK3f84@y ''()) aK3f83@x (list 'append aK3f83@x aK3f84@y)))) (aK3f30@gen-mappend (lambda (aK3f7f@e aK3f80@map-env) (list 'apply '(primitive append) (aK3f32@gen-map aK3f7f@e aK3f80@map-env)))) (aK3f32@gen-map (lambda (aK3f6d@e aK3f6e@map-env) (let ((aK3f71@formals (map cdr aK3f6e@map-env)) (aK3f72@actuals (map (lambda (aK3f75@x) (list 'ref (car aK3f75@x))) aK3f6e@map-env))) (if (eq? (car aK3f6d@e) 'ref) (car aK3f72@actuals) (if (for-all (lambda (aK3f77@x) (and (eq? (car aK3f77@x) 'ref) (memq (cadr aK3f77@x) aK3f71@formals))) (cdr aK3f6d@e)) (let ((aK3f79@args (map (let ((aK3f7b@r (map cons aK3f71@formals aK3f72@actuals))) (lambda (aK3f7d@x) (cdr (assq (cadr aK3f7d@x) aK3f7b@r)))) (cdr aK3f6d@e)))) (cons 'map (cons (list 'primitive (car aK3f6d@e)) aK3f79@args))) (cons* 'map (list 'lambda aK3f71@formals aK3f6d@e) aK3f72@actuals)))))) (aK3f34@gen-cons (lambda (aK3f5d@e aK3f5e@x aK3f5f@y aK3f60@xnew aK3f61@ynew) (let ((aK3f67@t (car aK3f61@ynew))) (if (memv aK3f67@t '(quote)) (if (eq? (car aK3f60@xnew) 'quote) (let ((aK3f69@xnew (cadr aK3f60@xnew)) (aK3f6a@ynew (cadr aK3f61@ynew))) (if (and (eq? aK3f69@xnew aK3f5e@x) (eq? aK3f6a@ynew aK3f5f@y)) (list 'quote aK3f5d@e) (list 'quote (cons aK3f69@xnew aK3f6a@ynew)))) (if (null? (cadr aK3f61@ynew)) (list 'list aK3f60@xnew) (list 'cons aK3f60@xnew aK3f61@ynew))) (if (memv aK3f67@t '(list)) (cons 'list (cons aK3f60@xnew (cdr aK3f61@ynew))) (list 'cons aK3f60@xnew aK3f61@ynew)))))) (aK3f36@gen-vector (lambda (aK3f57@e aK3f58@ls aK3f59@lsnew) (if (eq? (car aK3f59@lsnew) 'quote) (if (eq? (cadr aK3f59@lsnew) aK3f58@ls) (list 'quote aK3f57@e) (list 'quote (list->vector (cadr aK3f59@lsnew)))) (if (eq? (car aK3f59@lsnew) 'list) (cons 'vector (cdr aK3f59@lsnew)) (list 'list->vector aK3f59@lsnew))))) (aK3f38@regen (lambda (aK3f51@x) (let ((aK3f53@t (car aK3f51@x))) (if (memv aK3f53@t '(ref)) (cadr aK3f51@x) (if (memv aK3f53@t '(primitive)) (list 'primitive (cadr aK3f51@x)) (if (memv aK3f53@t '(quote)) (list 'quote (cadr aK3f51@x)) (if (memv aK3f53@t '(lambda)) (aK2e1a@aK2d4c@build-lambda '#f (cadr aK3f51@x) (aK3f38@regen (caddr aK3f51@x))) (if (memv aK3f53@t '(map)) (let ((aK3f55@ls (map aK3f38@regen (cdr aK3f51@x)))) (cons '(primitive ellipsis-map) aK3f55@ls)) (cons (list 'primitive (car aK3f51@x)) (map aK3f38@regen (cdr aK3f51@x)))))))))))) (lambda (aK3f39@e aK3f3a@r aK3f3b@mr) (let ((aK3f3f@t aK3f39@e)) (let ((aK3f41@ls/false (aK30be@syntax-dispatch aK3f3f@t '(_ any)))) (if aK3f41@ls/false (apply (lambda (aK3f43@x) (call-with-values (lambda () (aK3f2a@gen-syntax aK3f39@e aK3f43@x aK3f3a@r '() aK30c0@ellipsis? '#f)) (lambda (aK3f49@aK3f46 aK3f4a@aK3f48) (let ((aK3f4d@maps aK3f4a@aK3f48) (aK3f4e@e aK3f49@aK3f46)) (aK3f38@regen aK3f4e@e))))) aK3f41@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK3f3f@t))))))) (set! aK4b9a@aK30ca@syntax-transformer aK30ca@syntax-transformer) (set! aK30cc@core-macro-transformer (lambda (aK4071@name) (let ((aK4073@t aK4071@name)) (if (memv aK4073@t '(quote)) aK306e@quote-transformer (if (memv aK4073@t '(lambda)) aK3072@lambda-transformer (if (memv aK4073@t '(case-lambda)) aK3070@case-lambda-transformer (if (memv aK4073@t '(letrec)) aK3056@letrec-transformer (if (memv aK4073@t '(letrec*)) aK3058@letrec*-transformer (if (memv aK4073@t '(let)) aK3054@let-transformer (if (memv aK4073@t '(if)) aK3066@if-transformer (if (memv aK4073@t '(and)) aK3068@and-transformer (if (memv aK4073@t '(or)) aK306a@or-transformer (if (memv aK4073@t '(foreign-call)) aK30ba@foreign-call-transformer (if (memv aK4073@t '(syntax-case)) aK30c6@syntax-case-transformer (if (memv aK4073@t '(syntax)) aK30ca@syntax-transformer (if (memv aK4073@t '(type-descriptor)) aK305c@type-descriptor-transformer (if (memv aK4073@t '(record-type-descriptor)) aK305e@record-type-descriptor-transformer (if (memv aK4073@t '(record-constructor-descriptor)) aK3060@record-constructor-descriptor-transformer (if (memv aK4073@t '(fluid-let-syntax)) aK305a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" aK4071@name)))))))))))))))))))) (set! aK4b9b@aK30cc@core-macro-transformer aK30cc@core-macro-transformer) (set! aK30ce@symbol-macro (lambda (aK4075@x aK4076@set) (let ((aK4079@t aK4075@x)) (let ((aK407b@ls/false (aK30be@syntax-dispatch aK4079@t '(_ any)))) (if (and aK407b@ls/false (apply (lambda (aK407d@name) (and (aK2eb7@id? aK407d@name) (memq (aK2eb9@id->sym aK407d@name) aK4076@set))) aK407b@ls/false)) (apply (lambda (aK407f@name) (aK3074@bless (list 'quote aK407f@name))) aK407b@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4079@t)))))) (set! aK4b9c@aK30ce@symbol-macro aK30ce@symbol-macro) (set! aK30d0@macro-transformer (lambda (aK4081@x) (if (procedure? aK4081@x) aK4081@x (if (symbol? aK4081@x) (let ((aK4083@t aK4081@x)) (if (memv aK4083@t '(define-record-type)) aK30b2@define-record-type-macro (if (memv aK4083@t '(define-struct)) aK30b0@define-struct-macro (if (memv aK4083@t '(include)) aK30a6@include-macro (if (memv aK4083@t '(cond)) aK30a2@cond-macro (if (memv aK4083@t '(let)) aK307a@let-macro (if (memv aK4083@t '(do)) aK309a@do-macro (if (memv aK4083@t '(or)) aK309e@or-macro (if (memv aK4083@t '(and)) aK30a0@and-macro (if (memv aK4083@t '(let*)) aK309c@let*-macro (if (memv aK4083@t '(let-values)) aK307c@let-values-macro (if (memv aK4083@t '(let*-values)) aK307e@let*-values-macro (if (memv aK4083@t '(syntax-rules)) aK30aa@syntax-rules-macro (if (memv aK4083@t '(quasiquote)) aK30ac@quasiquote-macro (if (memv aK4083@t '(quasisyntax)) aK30ae@quasisyntax-macro (if (memv aK4083@t '(with-syntax)) aK3076@with-syntax-macro (if (memv aK4083@t '(when)) aK3062@when-macro (if (memv aK4083@t '(unless)) aK3064@unless-macro (if (memv aK4083@t '(case)) aK306c@case-macro (if (memv aK4083@t '(identifier-syntax)) aK3098@identifier-syntax-macro (if (memv aK4083@t '(time)) aK3090@time-macro (if (memv aK4083@t '(delay)) aK3092@delay-macro (if (memv aK4083@t '(assert)) aK3094@assert-macro (if (memv aK4083@t '(endianness)) aK3096@endianness-macro (if (memv aK4083@t '(guard)) aK308c@guard-macro (if (memv aK4083@t '(define-enumeration)) aK308e@define-enumeration-macro (if (memv aK4083@t '(trace-lambda)) aK3080@trace-lambda-macro (if (memv aK4083@t '(trace-define)) aK3082@trace-define-macro (if (memv aK4083@t '(trace-define-syntax)) aK3084@trace-define-syntax-macro (if (memv aK4083@t '(trace-let-syntax)) aK3088@trace-let-syntax-macro (if (memv aK4083@t '(trace-letrec-syntax)) aK308a@trace-letrec-syntax-macro (if (memv aK4083@t '(define-condition-type)) aK30b4@define-condition-type-macro (if (memv aK4083@t '(parameterize)) aK30b8@parameterize-macro (if (memv aK4083@t '(include-into)) aK30a8@include-into-macro (if (memv aK4083@t '(eol-style)) (lambda (aK4085@x) (aK30ce@symbol-macro aK4085@x '(none lf cr crlf nel crnel ls))) (if (memv aK4083@t '(error-handling-mode)) (lambda (aK4087@x) (aK30ce@symbol-macro aK4087@x '(ignore raise replace))) (if (memv aK4083@t '(buffer-mode)) (lambda (aK4089@x) (aK30ce@symbol-macro aK4089@x '(none line block))) (if (memv aK4083@t '(file-options)) aK2e32@file-options-macro (if (memv aK4083@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) aK30b6@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" aK4081@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" aK4081@x))))) (set! aK4b9d@aK30d0@macro-transformer aK30d0@macro-transformer) (set! aK30d2@local-macro-transformer (lambda (aK408b@x) (car aK408b@x))) (set! aK4b9e@aK30d2@local-macro-transformer aK30d2@local-macro-transformer) (set! aK30d4@do-macro-call (lambda (aK408d@transformer aK408e@expr) (let ((aK4091@out (aK408d@transformer (aK2ea1@add-mark aK2e9b@anti-mark aK408e@expr '#f)))) (begin (let aK4095@f ((aK4093@x aK4091@out)) (if (not (aK2e83@stx? aK4093@x)) (if (pair? aK4093@x) (begin (aK4095@f (car aK4093@x)) (aK4095@f (cdr aK4093@x))) (if (vector? aK4093@x) (vector-for-each aK4095@f aK4093@x) (if (symbol? aK4093@x) (aK319e@syntax-violation '#f '"raw symbol encountered in output of macro" aK408e@expr aK4093@x) (void)))) (void))) (aK2ea1@add-mark (aK2e99@gen-mark) aK4091@out aK408e@expr))))) (set! aK4b9f@aK30d4@do-macro-call aK30d4@do-macro-call) (set! aK30d6@chi-macro (lambda (aK4097@p aK4098@e) (aK30d4@do-macro-call (aK30d0@macro-transformer aK4097@p) aK4098@e))) (set! aK4ba0@aK30d6@chi-macro aK30d6@chi-macro) (set! aK30d8@chi-local-macro (lambda (aK409b@p aK409c@e) (aK30d4@do-macro-call (aK30d2@local-macro-transformer aK409b@p) aK409c@e))) (set! aK4ba1@aK30d8@chi-local-macro aK30d8@chi-local-macro) (set! aK30da@chi-global-macro (lambda (aK409f@p aK40a0@e) (let ((aK40a3@lib (car aK409f@p)) (aK40a4@loc (cdr aK409f@p))) (begin (aK2cd4@aK2b23@visit-library aK40a3@lib) (let ((aK40a7@x (symbol-value aK40a4@loc))) (let ((aK40a9@transformer (if (procedure? aK40a7@x) aK40a7@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" aK40a7@x)))) (aK30d4@do-macro-call aK40a9@transformer aK40a0@e))))))) (set! aK4ba2@aK30da@chi-global-macro aK30da@chi-global-macro) (set! aK30dc@chi-expr* (lambda (aK40ab@e* aK40ac@r aK40ad@mr) (if (null? aK40ab@e*) '() (let ((aK40b1@e (aK30e0@chi-expr (car aK40ab@e*) aK40ac@r aK40ad@mr))) (cons aK40b1@e (aK30dc@chi-expr* (cdr aK40ab@e*) aK40ac@r aK40ad@mr)))))) (set! aK4ba3@aK30dc@chi-expr* aK30dc@chi-expr*) (set! aK30de@chi-application (lambda (aK40b3@e aK40b4@r aK40b5@mr) (let ((aK40b9@t aK40b3@e)) (let ((aK40bb@ls/false (aK30be@syntax-dispatch aK40b9@t '(any . each-any)))) (if aK40bb@ls/false (apply (lambda (aK40bd@rator aK40be@rands) (let ((aK40c1@rator (aK30e0@chi-expr aK40bd@rator aK40b4@r aK40b5@mr))) (cons aK40c1@rator (aK30dc@chi-expr* aK40be@rands aK40b4@r aK40b5@mr)))) aK40bb@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK40b9@t)))))) (set! aK4ba4@aK30de@chi-application aK30de@chi-application) (set! aK30e0@chi-expr (lambda (aK40c3@e aK40c4@r aK40c5@mr) (call-with-values (lambda () (aK2ed9@syntax-type aK40c3@e aK40c4@r)) (lambda (aK40cf@aK40ca aK40d0@aK40cc aK40d1@aK40ce) (let ((aK40d5@kwd aK40d1@aK40ce) (aK40d6@value aK40d0@aK40cc) (aK40d7@type aK40cf@aK40ca)) (let ((aK40db@t aK40d7@type)) (if (memv aK40db@t '(core-macro)) (let ((aK40dd@transformer (aK30cc@core-macro-transformer aK40d6@value))) (aK40dd@transformer aK40c3@e aK40c4@r aK40c5@mr)) (if (memv aK40db@t '(global)) (let ((aK40df@lib (car aK40d6@value))) (let ((aK40e1@loc (cdr aK40d6@value))) (begin ((aK3126@inv-collector) aK40df@lib) aK40e1@loc))) (if (memv aK40db@t '(core-prim)) (let ((aK40e3@name aK40d6@value)) (list 'primitive aK40e3@name)) (if (memv aK40db@t '(call)) (aK30de@chi-application aK40c3@e aK40c4@r aK40c5@mr) (if (memv aK40db@t '(lexical)) (let ((aK40e5@lex (aK3048@lexical-var aK40d6@value))) aK40e5@lex) (if (memv aK40db@t '(global-macro global-macro!)) (aK30e0@chi-expr (aK30da@chi-global-macro aK40d6@value aK40c3@e) aK40c4@r aK40c5@mr) (if (memv aK40db@t '(local-macro local-macro!)) (aK30e0@chi-expr (aK30d8@chi-local-macro aK40d6@value aK40c3@e) aK40c4@r aK40c5@mr) (if (memv aK40db@t '(macro macro!)) (aK30e0@chi-expr (aK30d6@chi-macro aK40d6@value aK40c3@e) aK40c4@r aK40c5@mr) (if (memv aK40db@t '(constant)) (let ((aK40e7@datum aK40d6@value)) (list 'quote aK40e7@datum)) (if (memv aK40db@t '(set!)) (aK30e2@chi-set! aK40c3@e aK40c4@r aK40c5@mr) (if (memv aK40db@t '(begin)) (let ((aK40e9@t aK40c3@e)) (let ((aK40eb@ls/false (aK30be@syntax-dispatch aK40e9@t '(_ any . each-any)))) (if aK40eb@ls/false (apply (lambda (aK40ed@x aK40ee@x*) (aK2e1c@aK2d7c@build-sequence '#f (aK30dc@chi-expr* (cons aK40ed@x aK40ee@x*) aK40c4@r aK40c5@mr))) aK40eb@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK40e9@t)))) (if (memv aK40db@t '(let-syntax letrec-syntax)) (let ((aK40f1@t aK40c3@e)) (let ((aK40f3@ls/false (aK30be@syntax-dispatch aK40f1@t '(_ #(each (any any)) any . each-any)))) (if (and aK40f3@ls/false (apply (lambda (aK40f5@xlhs* aK40f6@xrhs* aK40f7@xbody aK40f8@xbody*) (if (not (aK2ebf@valid-bound-ids? aK40f5@xlhs*)) (aK319e@syntax-violation '#f '"invalid identifiers" aK40c3@e) (void))) aK40f3@ls/false)) (apply (lambda (aK40fd@xlhs* aK40fe@xrhs* aK40ff@xbody aK4100@xbody*) (let ((aK4105@xlab* (map aK2e43@gen-label aK40fd@xlhs*))) (let ((aK4107@xrib (aK2e77@make-full-rib aK40fd@xlhs* aK4105@xlab*))) (let ((aK4109@xb* (map (lambda (aK410b@x) (aK2eef@make-eval-transformer (aK3118@expand-transformer (if (eq? aK40d7@type 'let-syntax) aK410b@x (aK2ea3@add-subst aK4107@xrib aK410b@x)) aK40c5@mr))) aK40fe@xrhs*))) (aK2e1c@aK2d7c@build-sequence '#f (aK30dc@chi-expr* (map (lambda (aK410d@x) (aK2ea3@add-subst aK4107@xrib aK410d@x)) (cons aK40ff@xbody aK4100@xbody*)) (append (map cons aK4105@xlab* aK4109@xb*) aK40c4@r) (append (map cons aK4105@xlab* aK4109@xb*) aK40c5@mr))))))) aK40f3@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK40f1@t)))) (if (memv aK40db@t '(displaced-lexical)) (aK319e@syntax-violation '#f '"identifier out of context" aK40c3@e) (if (memv aK40db@t '(syntax)) (aK319e@syntax-violation '#f '"reference to pattern variable outside a syntax form" aK40c3@e) (if (memv aK40db@t '(define define-syntax module import library)) (aK319e@syntax-violation '#f (string-append (let ((aK410f@t aK40d7@type)) (if (memv aK410f@t '(define)) '"a definition" (if (memv aK410f@t '(define-syntax)) '"a define-syntax" (if (memv aK410f@t '(module)) '"a module definition" (if (memv aK410f@t '(library)) '"a library definition" (if (memv aK410f@t '(import)) '"an import declaration" (if (memv aK410f@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") aK40c3@e) (if (memv aK40db@t '(mutable)) (aK319e@syntax-violation '#f '"attempt to reference an unexportable variable" aK40c3@e) (aK319e@syntax-violation '#f '"invalid expression" aK40c3@e))))))))))))))))))))))) (set! aK4ba5@aK30e0@chi-expr aK30e0@chi-expr) (set! aK30e2@chi-set! (lambda (aK4111@e aK4112@r aK4113@mr) (let ((aK4117@t aK4111@e)) (let ((aK4119@ls/false (aK30be@syntax-dispatch aK4117@t '(_ any any)))) (if (and aK4119@ls/false (apply (lambda (aK411b@x aK411c@v) (aK2eb7@id? aK411b@x)) aK4119@ls/false)) (apply (lambda (aK411f@x aK4120@v) (call-with-values (lambda () (aK2ed9@syntax-type aK411f@x aK4112@r)) (lambda (aK4129@aK4124 aK412a@aK4126 aK412b@aK4128) (let ((aK412f@kwd aK412b@aK4128) (aK4130@value aK412a@aK4126) (aK4131@type aK4129@aK4124)) (let ((aK4135@t aK4131@type)) (if (memv aK4135@t '(lexical)) (begin (aK304c@set-lexical-mutable! aK4130@value '#t) (list 'set! (aK3048@lexical-var aK4130@value) (aK30e0@chi-expr aK4120@v aK4112@r aK4113@mr))) (if (memv aK4135@t '(core-prim)) (aK319e@syntax-violation '#f '"cannot modify imported core primitive" aK4111@e) (if (memv aK4135@t '(global)) (aK319e@syntax-violation '#f '"attempt to modify imported binding" aK4111@e) (if (memv aK4135@t '(global-macro!)) (aK30e0@chi-expr (aK30da@chi-global-macro aK4130@value aK4111@e) aK4112@r aK4113@mr) (if (memv aK4135@t '(local-macro!)) (aK30e0@chi-expr (aK30d8@chi-local-macro aK4130@value aK4111@e) aK4112@r aK4113@mr) (if (memv aK4135@t '(mutable)) (aK319e@syntax-violation '#f '"attempt to assign to an unexportable variable" aK4111@e) (aK319e@syntax-violation '#f '"invalid syntax" aK4111@e)))))))))))) aK4119@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4117@t)))))) (set! aK4ba6@aK30e2@chi-set! aK30e2@chi-set!) (set! aK30e4@verify-formals (lambda (aK4137@fmls aK4138@stx) (let ((aK413b@t aK4137@fmls)) (let ((aK413d@ls/false (aK30be@syntax-dispatch aK413b@t 'each-any))) (if aK413d@ls/false (apply (lambda (aK413f@x*) (if (not (aK2ebf@valid-bound-ids? aK413f@x*)) (aK3078@invalid-fmls-error aK4138@stx aK4137@fmls) (void))) aK413d@ls/false) (let ((aK4141@t aK413b@t)) (let ((aK4143@ls/false (aK30be@syntax-dispatch aK4141@t '#(each+ any () any)))) (if aK4143@ls/false (apply (lambda (aK4145@x* aK4146@x) (if (not (aK2ebf@valid-bound-ids? (cons aK4146@x aK4145@x*))) (aK3078@invalid-fmls-error aK4138@stx aK4137@fmls) (void))) aK4143@ls/false) (let ((aK4149@t aK4141@t)) (let ((aK414b@ls/false (aK30be@syntax-dispatch aK4149@t '_))) (if aK414b@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid syntax" aK4138@stx)) aK414b@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4149@t)))))))))))) (set! aK4ba7@aK30e4@verify-formals aK30e4@verify-formals) (set! aK30e6@chi-lambda-clause (lambda (aK414d@stx aK414e@fmls aK414f@body* aK4150@r aK4151@mr) (let ((aK4157@t aK414e@fmls)) (let ((aK4159@ls/false (aK30be@syntax-dispatch aK4157@t 'each-any))) (if aK4159@ls/false (apply (lambda (aK415b@x*) (begin (aK30e4@verify-formals aK414e@fmls aK414d@stx) (let ((aK415d@lex* (map aK2e3f@gen-lexical aK415b@x*)) (aK415e@lab* (map aK2e43@gen-label aK415b@x*))) (values aK415d@lex* (aK30f6@chi-internal (aK2ea3@add-subst (aK2e77@make-full-rib aK415b@x* aK415e@lab*) aK414f@body*) (aK3050@add-lexicals aK415e@lab* aK415d@lex* aK4150@r) aK4151@mr))))) aK4159@ls/false) (let ((aK4161@t aK4157@t)) (let ((aK4163@ls/false (aK30be@syntax-dispatch aK4161@t '#(each+ any () any)))) (if aK4163@ls/false (apply (lambda (aK4165@x* aK4166@x) (begin (aK30e4@verify-formals aK414e@fmls aK414d@stx) (let ((aK4169@lex* (map aK2e3f@gen-lexical aK4165@x*)) (aK416a@lab* (map aK2e43@gen-label aK4165@x*)) (aK416b@lex (aK2e3f@gen-lexical aK4166@x)) (aK416c@lab (aK2e43@gen-label aK4166@x))) (values (append aK4169@lex* aK416b@lex) (aK30f6@chi-internal (aK2ea3@add-subst (aK2e77@make-full-rib (cons aK4166@x aK4165@x*) (cons aK416c@lab aK416a@lab*)) aK414f@body*) (aK3050@add-lexicals (cons aK416c@lab aK416a@lab*) (cons aK416b@lex aK4169@lex*) aK4150@r) aK4151@mr))))) aK4163@ls/false) (let ((aK4171@t aK4161@t)) (let ((aK4173@ls/false (aK30be@syntax-dispatch aK4171@t '_))) (if aK4173@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid syntax" aK414e@fmls)) aK4173@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4171@t)))))))))))) (set! aK4ba8@aK30e6@chi-lambda-clause aK30e6@chi-lambda-clause) (set! aK30e8@chi-lambda-clause* (lambda (aK4175@stx aK4176@fmls* aK4177@body** aK4178@r aK4179@mr) (if (null? aK4176@fmls*) (values '() '()) (call-with-values (lambda () (aK30e6@chi-lambda-clause aK4175@stx (car aK4176@fmls*) (car aK4177@body**) aK4178@r aK4179@mr)) (lambda (aK4183@aK4180 aK4184@aK4182) (let ((aK4187@b aK4184@aK4182) (aK4188@a aK4183@aK4180)) (call-with-values (lambda () (aK30e8@chi-lambda-clause* aK4175@stx (cdr aK4176@fmls*) (cdr aK4177@body**) aK4178@r aK4179@mr)) (lambda (aK418f@aK418c aK4190@aK418e) (let ((aK4193@b* aK4190@aK418e) (aK4194@a* aK418f@aK418c)) (values (cons aK4188@a aK4194@a*) (cons aK4187@b aK4193@b*))))))))))) (set! aK4ba9@aK30e8@chi-lambda-clause* aK30e8@chi-lambda-clause*) (set! aK30ea@chi-defun (lambda (aK4197@x aK4198@r aK4199@mr) (let ((aK419d@fmls (car aK4197@x)) (aK419e@body* (cdr aK4197@x))) (call-with-values (lambda () (aK30e6@chi-lambda-clause aK419d@fmls aK419d@fmls aK419e@body* aK4198@r aK4199@mr)) (lambda (aK41a5@aK41a2 aK41a6@aK41a4) (let ((aK41a9@body aK41a6@aK41a4) (aK41aa@fmls aK41a5@aK41a2)) (aK2e1a@aK2d4c@build-lambda '#f aK41aa@fmls aK41a9@body))))))) (set! aK4baa@aK30ea@chi-defun aK30ea@chi-defun) (set! aK30ec@chi-rhs (lambda (aK41ad@rhs aK41ae@r aK41af@mr) (let ((aK41b3@t (car aK41ad@rhs))) (if (memv aK41b3@t '(defun)) (aK30ea@chi-defun (cdr aK41ad@rhs) aK41ae@r aK41af@mr) (if (memv aK41b3@t '(expr)) (let ((aK41b5@expr (cdr aK41ad@rhs))) (aK30e0@chi-expr aK41b5@expr aK41ae@r aK41af@mr)) (if (memv aK41b3@t '(top-expr)) (let ((aK41b7@expr (cdr aK41ad@rhs))) (aK2e1c@aK2d7c@build-sequence '#f (list (aK30e0@chi-expr aK41b7@expr aK41ae@r aK41af@mr) (aK2e1d@aK2d7e@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" aK41ad@rhs))))))) (set! aK4bab@aK30ec@chi-rhs aK30ec@chi-rhs) (set! aK30ee@expand-interaction-rhs*/init* (lambda (aK41b9@lhs* aK41ba@rhs* aK41bb@init* aK41bc@r aK41bd@mr) (let aK41c7@f ((aK41c3@lhs* aK41b9@lhs*) (aK41c4@rhs* aK41ba@rhs*)) (if (null? aK41c3@lhs*) (map (lambda (aK41c9@x) (aK30e0@chi-expr aK41c9@x aK41bc@r aK41bd@mr)) aK41bb@init*) (let ((aK41cb@lhs (car aK41c3@lhs*)) (aK41cc@rhs (car aK41c4@rhs*))) (let ((aK41cf@t (car aK41cc@rhs))) (if (memv aK41cf@t '(defun)) (let ((aK41d1@rhs (aK30ea@chi-defun (cdr aK41cc@rhs) aK41bc@r aK41bd@mr))) (cons (list 'set! aK41cb@lhs aK41d1@rhs) (aK41c7@f (cdr aK41c3@lhs*) (cdr aK41c4@rhs*)))) (if (memv aK41cf@t '(expr)) (let ((aK41d3@rhs (aK30e0@chi-expr (cdr aK41cc@rhs) aK41bc@r aK41bd@mr))) (cons (list 'set! aK41cb@lhs aK41d3@rhs) (aK41c7@f (cdr aK41c3@lhs*) (cdr aK41c4@rhs*)))) (if (memv aK41cf@t '(top-expr)) (let ((aK41d5@e (aK30e0@chi-expr (cdr aK41cc@rhs) aK41bc@r aK41bd@mr))) (cons aK41d5@e (aK41c7@f (cdr aK41c3@lhs*) (cdr aK41c4@rhs*)))) (error 'expand-interaction '"invallid" aK41cc@rhs)))))))))) (set! aK4bac@aK30ee@expand-interaction-rhs*/init* aK30ee@expand-interaction-rhs*/init*) (set! aK30f0@chi-rhs* (lambda (aK41d7@rhs* aK41d8@r aK41d9@mr) (let aK41df@f ((aK41dd@ls aK41d7@rhs*)) (if (null? aK41dd@ls) '() (let ((aK41e1@a (aK30ec@chi-rhs (car aK41dd@ls) aK41d8@r aK41d9@mr))) (cons aK41e1@a (aK41df@f (cdr aK41dd@ls)))))))) (set! aK4bad@aK30f0@chi-rhs* aK30f0@chi-rhs*) (set! aK30f2@find-bound=? (lambda (aK41e3@x aK41e4@lhs* aK41e5@rhs*) (if (null? aK41e4@lhs*) '#f (if (aK2ebb@bound-id=? aK41e3@x (car aK41e4@lhs*)) (car aK41e5@rhs*) (aK30f2@find-bound=? aK41e3@x (cdr aK41e4@lhs*) (cdr aK41e5@rhs*)))))) (set! aK4bae@aK30f2@find-bound=? aK30f2@find-bound=?) (set! aK30f4@find-dups (lambda (aK41e9@ls) (let aK41ef@f ((aK41eb@ls aK41e9@ls) (aK41ec@dups '())) (if (null? aK41eb@ls) aK41ec@dups (let ((aK41f1@t (aK30f2@find-bound=? (car aK41eb@ls) (cdr aK41eb@ls) (cdr aK41eb@ls)))) (if aK41f1@t ((lambda (aK41f3@x) (aK41ef@f (cdr aK41eb@ls) (cons (list (car aK41eb@ls) aK41f3@x) aK41ec@dups))) aK41f1@t) (aK41ef@f (cdr aK41eb@ls) aK41ec@dups))))))) (set! aK4baf@aK30f4@find-dups aK30f4@find-dups) (set! aK30f6@chi-internal (lambda (aK41f5@e* aK41f6@r aK41f7@mr) (let ((aK41fb@rib (aK2e6b@make-empty-rib))) (call-with-values (lambda () (aK3116@chi-body* (map (lambda (aK420d@x) (aK2ea3@add-subst aK41fb@rib aK420d@x)) (aK2eb5@syntax->list aK41f5@e*)) aK41f6@r aK41f7@mr '() '() '() '() '() aK41fb@rib '#f)) (lambda (aK420f@aK41fe aK4210@aK4200 aK4211@aK4202 aK4212@aK4204 aK4213@aK4206 aK4214@aK4208 aK4215@aK420a aK4216@aK420c) (let ((aK421f@_exp* aK4216@aK420c) (aK4220@kwd* aK4215@aK420a) (aK4221@mod** aK4214@aK4208) (aK4222@rhs* aK4213@aK4206) (aK4223@lex* aK4212@aK4204) (aK4224@mr aK4211@aK4202) (aK4225@r aK4210@aK4200) (aK4226@e* aK420f@aK41fe)) (begin (if (null? aK4226@e*) (aK319e@syntax-violation '#f '"no expression in body" aK4226@e*) (void)) (let ((aK422f@init* (aK30dc@chi-expr* (append (apply append (reverse aK4221@mod**)) aK4226@e*) aK4225@r aK4224@mr))) (let ((aK4231@rhs* (aK30f0@chi-rhs* aK4222@rhs* aK4225@r aK4224@mr))) (aK2e21@aK2d86@build-letrec* '#f (reverse aK4223@lex*) (reverse aK4231@rhs*) (aK2e1c@aK2d7c@build-sequence '#f aK422f@init*))))))))))) (set! aK4bb0@aK30f6@chi-internal aK30f6@chi-internal) (set! aK30f8@parse-module (lambda (aK4233@e) (let ((aK4235@t aK4233@e)) (let ((aK4237@ls/false (aK30be@syntax-dispatch aK4235@t '(_ each-any . each-any)))) (if aK4237@ls/false (apply (lambda (aK4239@export* aK423a@b*) (begin (if (not (for-all aK2eb7@id? aK4239@export*)) (aK319e@syntax-violation '#f '"module exports must be identifiers" aK4233@e) (void)) (values '#f (list->vector aK4239@export*) aK423a@b*))) aK4237@ls/false) (let ((aK423d@t aK4235@t)) (let ((aK423f@ls/false (aK30be@syntax-dispatch aK423d@t '(_ any each-any . each-any)))) (if aK423f@ls/false (apply (lambda (aK4241@name aK4242@export* aK4243@b*) (begin (if (not (aK2eb7@id? aK4241@name)) (aK319e@syntax-violation '#f '"module name must be an identifier" aK4233@e) (void)) (if (not (for-all aK2eb7@id? aK4242@export*)) (aK319e@syntax-violation '#f '"module exports must be identifiers" aK4233@e) (void)) (values aK4241@name (list->vector aK4242@export*) aK4243@b*))) aK423f@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK423d@t))))))))) (set! aK4bb1@aK30f8@parse-module aK30f8@parse-module) (set! aK3102@module-interface? (lambda (aK4247@x) (and (simple-struct? aK4247@x) (eq? (simple-struct-name aK4247@x) 'module-interface)))) (set! aK4bb2@aK3102@module-interface? aK3102@module-interface?) (set! aK3104@module-interface-first-mark (lambda (aK4249@x) (simple-struct-ref aK4249@x '0))) (set! aK4bb3@aK3104@module-interface-first-mark aK3104@module-interface-first-mark) (set! aK3106@set-module-interface-first-mark! (lambda (aK424b@x aK424c@val) (simple-struct-set! aK424b@x '0 aK424c@val))) (set! aK4bb4@aK3106@set-module-interface-first-mark! aK3106@set-module-interface-first-mark!) (set! aK3108@module-interface-exp-id-vec (lambda (aK424f@x) (simple-struct-ref aK424f@x '1))) (set! aK4bb5@aK3108@module-interface-exp-id-vec aK3108@module-interface-exp-id-vec) (set! aK310a@set-module-interface-exp-id-vec! (lambda (aK4251@x aK4252@val) (simple-struct-set! aK4251@x '1 aK4252@val))) (set! aK4bb6@aK310a@set-module-interface-exp-id-vec! aK310a@set-module-interface-exp-id-vec!) (set! aK310c@module-interface-exp-lab-vec (lambda (aK4255@x) (simple-struct-ref aK4255@x '2))) (set! aK4bb7@aK310c@module-interface-exp-lab-vec aK310c@module-interface-exp-lab-vec) (set! aK310e@set-module-interface-exp-lab-vec! (lambda (aK4257@x aK4258@val) (simple-struct-set! aK4257@x '2 aK4258@val))) (set! aK4bb8@aK310e@set-module-interface-exp-lab-vec! aK310e@set-module-interface-exp-lab-vec!) (set! aK3110@dummy '3) (set! aK4bb9@aK3110@dummy aK3110@dummy) (set! aK3112@module-interface-exp-id* (lambda (aK425b@iface aK425c@id) (letrec* ((aK4260@diff-marks (lambda (aK4267@ls aK4268@x) (begin (if (null? aK4267@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((aK426b@a (car aK4267@ls))) (if (eq? aK426b@a aK4268@x) '() (cons aK426b@a (aK4260@diff-marks (cdr aK4267@ls) aK4268@x)))))))) (let ((aK4261@diff (aK4260@diff-marks (aK2e89@stx-mark* aK425c@id) (aK3104@module-interface-first-mark aK425b@iface))) (aK4262@id-vec (aK3108@module-interface-exp-id-vec aK425b@iface))) (if (null? aK4261@diff) aK4262@id-vec (vector-map (lambda (aK4265@x) (make-simple-struct 'stx '5 (list (aK2e85@stx-expr aK4265@x) (append aK4261@diff (aK2e89@stx-mark* aK4265@x)) '() '()))) aK4262@id-vec)))))) (set! aK4bba@aK3112@module-interface-exp-id* aK3112@module-interface-exp-id*) (set! aK3114@chi-internal-module (lambda (aK426d@e aK426e@r aK426f@mr aK4270@lex* aK4271@rhs* aK4272@mod** aK4273@kwd*) (call-with-values (lambda () (aK30f8@parse-module aK426d@e)) (lambda (aK4281@aK427c aK4282@aK427e aK4283@aK4280) (let ((aK4287@e* aK4283@aK4280) (aK4288@exp-id* aK4282@aK427e) (aK4289@name aK4281@aK427c)) (let ((aK428d@rib (aK2e6b@make-empty-rib))) (let ((aK428f@e* (map (lambda (aK4291@x) (aK2ea3@add-subst aK428d@rib aK4291@x)) (aK2eb5@syntax->list aK4287@e*)))) (call-with-values (lambda () (aK3116@chi-body* aK428f@e* aK426e@r aK426f@mr aK4270@lex* aK4271@rhs* aK4272@mod** aK4273@kwd* '() aK428d@rib '#f)) (lambda (aK42a3@aK4294 aK42a4@aK4296 aK42a5@aK4298 aK42a6@aK429a aK42a7@aK429c aK42a8@aK429e aK42a9@aK42a0 aK42aa@aK42a2) (let ((aK42b3@_exp* aK42aa@aK42a2) (aK42b4@kwd* aK42a9@aK42a0) (aK42b5@mod** aK42a8@aK429e) (aK42b6@rhs* aK42a7@aK429c) (aK42b7@lex* aK42a6@aK429a) (aK42b8@mr aK42a5@aK4298) (aK42b9@r aK42a4@aK4296) (aK42ba@e* aK42a3@aK4294)) (let ((aK42c3@exp-lab* (vector-map (lambda (aK42c7@x) (or (aK2ecd@id->label (make-simple-struct 'stx '5 (list (aK2eb9@id->sym aK42c7@x) (aK2e89@stx-mark* aK42c7@x) (list aK428d@rib) '()))) (aK319e@syntax-violation '#f '"cannot find module export" aK42c7@x))) aK4288@exp-id*)) (aK42c4@mod** (cons aK42ba@e* aK42b5@mod**))) (if (not aK4289@name) (values aK42b7@lex* aK42b6@rhs* aK4288@exp-id* aK42c3@exp-lab* aK42b9@r aK42b8@mr aK42c4@mod** aK42b4@kwd*) (let ((aK42c9@lab (aK2e43@gen-label 'module)) (aK42ca@iface (make-simple-struct 'module-interface '4 (list (car (aK2e89@stx-mark* aK4289@name)) (vector-map (lambda (aK42cd@x) (make-simple-struct 'stx '5 (list (aK2e85@stx-expr aK42cd@x) (aK2e89@stx-mark* aK42cd@x) '() '()))) aK4288@exp-id*) aK42c3@exp-lab*)))) (values aK42b7@lex* aK42b6@rhs* (vector aK4289@name) (vector aK42c9@lab) (cons (cons aK42c9@lab (cons '$module aK42ca@iface)) aK42b9@r) (cons (cons aK42c9@lab (cons '$module aK42ca@iface)) aK42b8@mr) aK42c4@mod** aK42b4@kwd*)))))))))))))) (set! aK4bbb@aK3114@chi-internal-module aK3114@chi-internal-module) (set! aK3116@chi-body* (lambda (aK42cf@e* aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42d5@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?) (if (null? aK42cf@e*) (values aK42cf@e* aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42d5@kwd* aK42d6@exp*) (let ((aK42e3@e (car aK42cf@e*))) (call-with-values (lambda () (aK2ed9@syntax-type aK42e3@e aK42d0@r)) (lambda (aK42eb@aK42e6 aK42ec@aK42e8 aK42ed@aK42ea) (let ((aK42f1@kwd aK42ed@aK42ea) (aK42f2@value aK42ec@aK42e8) (aK42f3@type aK42eb@aK42e6)) (let ((aK42f7@kwd* (if (aK2eb7@id? aK42f1@kwd) (cons aK42f1@kwd aK42d5@kwd*) aK42d5@kwd*))) (let ((aK42f9@t aK42f3@type)) (if (memv aK42f9@t '(define)) (call-with-values (lambda () (aK3040@parse-define aK42e3@e)) (lambda (aK42ff@aK42fc aK4300@aK42fe) (let ((aK4303@rhs aK4300@aK42fe) (aK4304@id aK42ff@aK42fc)) (begin (if (aK2ec3@bound-id-member? aK4304@id aK42f7@kwd*) (aK319e@syntax-violation '#f '"cannot redefine keyword" aK42e3@e) (void)) (call-with-values (lambda () (aK2e47@gen-define-label+loc aK4304@id aK42d7@rib)) (lambda (aK430b@aK4308 aK430c@aK430a) (let ((aK430f@lex aK430c@aK430a) (aK4310@lab aK430b@aK4308)) (begin (aK2e6d@extend-rib! aK42d7@rib aK4304@id aK4310@lab) (aK3116@chi-body* (cdr aK42cf@e*) (aK304e@add-lexical aK4310@lab aK430f@lex aK42d0@r) aK42d1@mr (cons aK430f@lex aK42d2@lex*) (cons aK4303@rhs aK42d3@rhs*) aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?))))))))) (if (memv aK42f9@t '(define-syntax)) (call-with-values (lambda () (aK3042@parse-define-syntax aK42e3@e)) (lambda (aK4317@aK4314 aK4318@aK4316) (let ((aK431b@rhs aK4318@aK4316) (aK431c@id aK4317@aK4314)) (begin (if (aK2ec3@bound-id-member? aK431c@id aK42f7@kwd*) (aK319e@syntax-violation '#f '"cannot redefine keyword" aK42e3@e) (void)) (let ((aK431f@lab (aK2e49@gen-define-label aK431c@id aK42d7@rib)) (aK4320@expanded-rhs (aK3118@expand-transformer aK431b@rhs aK42d1@mr))) (begin (aK2e6d@extend-rib! aK42d7@rib aK431c@id aK431f@lab) (let ((aK4323@b (aK2eef@make-eval-transformer aK4320@expanded-rhs))) (aK3116@chi-body* (cdr aK42cf@e*) (cons (cons aK431f@lab aK4323@b) aK42d0@r) (cons (cons aK431f@lab aK4323@b) aK42d1@mr) aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?)))))))) (if (memv aK42f9@t '(let-syntax letrec-syntax)) (let ((aK4325@t aK42e3@e)) (let ((aK4327@ls/false (aK30be@syntax-dispatch aK4325@t '(_ #(each (any any)) . each-any)))) (if (and aK4327@ls/false (apply (lambda (aK4329@xlhs* aK432a@xrhs* aK432b@xbody*) (if (not (aK2ebf@valid-bound-ids? aK4329@xlhs*)) (aK319e@syntax-violation '#f '"invalid identifiers" aK42e3@e) (void))) aK4327@ls/false)) (apply (lambda (aK432f@xlhs* aK4330@xrhs* aK4331@xbody*) (let ((aK4335@xlab* (map aK2e43@gen-label aK432f@xlhs*))) (let ((aK4337@xrib (aK2e77@make-full-rib aK432f@xlhs* aK4335@xlab*))) (let ((aK4339@xb* (map (lambda (aK433b@x) (aK2eef@make-eval-transformer (aK3118@expand-transformer (if (eq? aK42f3@type 'let-syntax) aK433b@x (aK2ea3@add-subst aK4337@xrib aK433b@x)) aK42d1@mr))) aK4330@xrhs*))) (aK3116@chi-body* (append (map (lambda (aK433d@x) (aK2ea3@add-subst aK4337@xrib aK433d@x)) aK4331@xbody*) (cdr aK42cf@e*)) (append (map cons aK4335@xlab* aK4339@xb*) aK42d0@r) (append (map cons aK4335@xlab* aK4339@xb*) aK42d1@mr) aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?))))) aK4327@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4325@t)))) (if (memv aK42f9@t '(begin)) (let ((aK433f@t aK42e3@e)) (let ((aK4341@ls/false (aK30be@syntax-dispatch aK433f@t '(_ . each-any)))) (if aK4341@ls/false (apply (lambda (aK4343@x*) (aK3116@chi-body* (append aK4343@x* (cdr aK42cf@e*)) aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?)) aK4341@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK433f@t)))) (if (memv aK42f9@t '(global-macro global-macro!)) (aK3116@chi-body* (cons (aK2ea3@add-subst aK42d7@rib (aK30da@chi-global-macro aK42f2@value aK42e3@e)) (cdr aK42cf@e*)) aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?) (if (memv aK42f9@t '(local-macro local-macro!)) (aK3116@chi-body* (cons (aK2ea3@add-subst aK42d7@rib (aK30d8@chi-local-macro aK42f2@value aK42e3@e)) (cdr aK42cf@e*)) aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?) (if (memv aK42f9@t '(macro macro!)) (aK3116@chi-body* (cons (aK2ea3@add-subst aK42d7@rib (aK30d6@chi-macro aK42f2@value aK42e3@e)) (cdr aK42cf@e*)) aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?) (if (memv aK42f9@t '(module)) (call-with-values (lambda () (aK3114@chi-internal-module aK42e3@e aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd*)) (lambda (aK4355@aK4346 aK4356@aK4348 aK4357@aK434a aK4358@aK434c aK4359@aK434e aK435a@aK4350 aK435b@aK4352 aK435c@aK4354) (let ((aK4365@kwd* aK435c@aK4354) (aK4366@mod** aK435b@aK4352) (aK4367@mr aK435a@aK4350) (aK4368@r aK4359@aK434e) (aK4369@m-exp-lab* aK4358@aK434c) (aK436a@m-exp-id* aK4357@aK434a) (aK436b@rhs* aK4356@aK4348) (aK436c@lex* aK4355@aK4346)) (begin (vector-for-each (lambda (aK4375@id aK4376@lab) (aK2e6d@extend-rib! aK42d7@rib aK4375@id aK4376@lab)) aK436a@m-exp-id* aK4369@m-exp-lab*) (aK3116@chi-body* (cdr aK42cf@e*) aK4368@r aK4367@mr aK436c@lex* aK436b@rhs* aK4366@mod** aK4365@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?))))) (if (memv aK42f9@t '(library)) (begin (aK3180@library-expander (aK2ecb@stx->datum aK42e3@e)) (aK3116@chi-body* (cdr aK42cf@e*) aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?)) (if (memv aK42f9@t '(export)) (let ((aK4379@t aK42e3@e)) (let ((aK437b@ls/false (aK30be@syntax-dispatch aK4379@t '(_ . each-any)))) (if aK437b@ls/false (apply (lambda (aK437d@exp-decl*) (aK3116@chi-body* (cdr aK42cf@e*) aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* (append aK437d@exp-decl* aK42d6@exp*) aK42d7@rib aK42d8@top?)) aK437b@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4379@t)))) (if (memv aK42f9@t '(import)) (letrec* ((aK4380@module-import? (lambda (aK43d3@e) (let ((aK43d5@t aK43d3@e)) (let ((aK43d7@ls/false (aK30be@syntax-dispatch aK43d5@t '(_ any)))) (if (and aK43d7@ls/false (apply (lambda (aK43d9@id) (aK2eb7@id? aK43d9@id)) aK43d7@ls/false)) (apply (lambda (aK43db@id) '#t) aK43d7@ls/false) (let ((aK43dd@t aK43d5@t)) (let ((aK43df@ls/false (aK30be@syntax-dispatch aK43dd@t '(_ . each-any)))) (if aK43df@ls/false (apply (lambda (aK43e1@imp*) '#f) aK43df@ls/false) (let ((aK43e3@t aK43dd@t)) (let ((aK43e5@ls/false (aK30be@syntax-dispatch aK43e3@t '_))) (if aK43e5@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"malformed import form" aK43d3@e)) aK43e5@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK43e3@t)))))))))))) (aK4382@module-import (lambda (aK43b1@e aK43b2@r) (let ((aK43b5@t aK43b1@e)) (let ((aK43b7@ls/false (aK30be@syntax-dispatch aK43b5@t '(_ any)))) (if (and aK43b7@ls/false (apply (lambda (aK43b9@id) (aK2eb7@id? aK43b9@id)) aK43b7@ls/false)) (apply (lambda (aK43bb@id) (call-with-values (lambda () (aK2ed9@syntax-type aK43bb@id aK43b2@r)) (lambda (aK43c3@aK43be aK43c4@aK43c0 aK43c5@aK43c2) (let ((aK43c9@kwd aK43c5@aK43c2) (aK43ca@value aK43c4@aK43c0) (aK43cb@type aK43c3@aK43be)) (let ((aK43cf@t aK43cb@type)) (if (memv aK43cf@t '($module)) (let ((aK43d1@iface aK43ca@value)) (values (aK3112@module-interface-exp-id* aK43d1@iface aK43bb@id) (aK310c@module-interface-exp-lab-vec aK43d1@iface))) (aK319e@syntax-violation '#f '"invalid import" aK43b1@e))))))) aK43b7@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK43b5@t)))))) (aK4384@library-import (lambda (aK4395@e) (let ((aK4397@t aK4395@e)) (let ((aK4399@ls/false (aK30be@syntax-dispatch aK4397@t '(any . each-any)))) (if aK4399@ls/false (apply (lambda (aK439b@ctxt aK439c@imp*) (call-with-values (lambda () (aK3120@parse-import-spec* (aK31a4@syntax->datum aK439c@imp*))) (lambda (aK43a3@aK43a0 aK43a4@aK43a2) (let ((aK43a7@subst-labels aK43a4@aK43a2) (aK43a8@subst-names aK43a3@aK43a0)) (values (vector-map (lambda (aK43ab@name) (aK2e97@datum->stx aK439b@ctxt aK43ab@name)) aK43a8@subst-names) aK43a7@subst-labels))))) aK4399@ls/false) (let ((aK43ad@t aK4397@t)) (let ((aK43af@ls/false (aK30be@syntax-dispatch aK43ad@t '_))) (if aK43af@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid import form" aK4395@e)) aK43af@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK43ad@t)))))))))) (begin (call-with-values (lambda () (if (aK4380@module-import? aK42e3@e) (aK4382@module-import aK42e3@e aK42d0@r) (aK4384@library-import aK42e3@e))) (lambda (aK4389@aK4386 aK438a@aK4388) (let ((aK438d@lab* aK438a@aK4388) (aK438e@id* aK4389@aK4386)) (vector-for-each (lambda (aK4391@id aK4392@lab) (aK2e6d@extend-rib! aK42d7@rib aK4391@id aK4392@lab)) aK438e@id* aK438d@lab*)))) (aK3116@chi-body* (cdr aK42cf@e*) aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?))) (if aK42d8@top? (aK3116@chi-body* (cdr aK42cf@e*) aK42d0@r aK42d1@mr (cons (aK2e3f@gen-lexical 'dummy) aK42d2@lex*) (cons (cons 'top-expr aK42e3@e) aK42d3@rhs*) aK42d4@mod** aK42f7@kwd* aK42d6@exp* aK42d7@rib aK42d8@top?) (values aK42cf@e* aK42d0@r aK42d1@mr aK42d2@lex* aK42d3@rhs* aK42d4@mod** aK42f7@kwd* aK42d6@exp*)))))))))))))))))))))) (set! aK4bbc@aK3116@chi-body* aK3116@chi-body*) (set! aK3118@expand-transformer (lambda (aK43e7@expr aK43e8@r) (let ((aK43eb@rtc (aK3124@make-collector))) (let ((aK43ed@expanded-rhs (let ((aK43f7@aK43f0 aK3126@inv-collector) (aK43f8@aK43f2 aK3128@vis-collector) (aK43f9@aK43f4 aK43eb@rtc) (aK43fa@aK43f6 (lambda (aK43ff@x) (values)))) (let ((aK4401@swap (lambda () (begin (let ((aK4403@t (aK43f7@aK43f0))) (begin (aK43f7@aK43f0 aK43f9@aK43f4) (set! aK43f9@aK43f4 aK4403@t))) (let ((aK4405@t (aK43f8@aK43f2))) (begin (aK43f8@aK43f2 aK43fa@aK43f6) (set! aK43fa@aK43f6 aK4405@t))))))) (dynamic-wind aK4401@swap (lambda () (aK30e0@chi-expr aK43e7@expr aK43e8@r aK43e8@r)) aK4401@swap))))) (begin (for-each (let ((aK4407@mark-visit (aK3128@vis-collector))) (lambda (aK4409@x) (begin (aK2cd3@aK2b21@invoke-library aK4409@x) (aK4407@mark-visit aK4409@x)))) (aK43eb@rtc)) aK43ed@expanded-rhs))))) (set! aK4bbd@aK3118@expand-transformer aK3118@expand-transformer) (set! aK311a@parse-exports (lambda (aK440b@exp*) (let aK4413@f ((aK440d@exp* aK440b@exp*) (aK440e@int* '()) (aK440f@ext* '())) (if (null? aK440d@exp*) (begin (if (not (aK2ebf@valid-bound-ids? aK440f@ext*)) (aK319e@syntax-violation 'export '"invalid exports" (aK30f4@find-dups aK440f@ext*)) (void)) (values (map aK31a4@syntax->datum aK440f@ext*) aK440e@int*)) (let ((aK4415@t (car aK440d@exp*))) (let ((aK4417@ls/false (aK30be@syntax-dispatch aK4415@t '(any . #(each (any any)))))) (if aK4417@ls/false (apply (lambda (aK4419@rename aK441a@i* aK441b@e*) (begin (if (not (and (eq? (aK31a4@syntax->datum aK4419@rename) 'rename) (for-all aK2eb7@id? aK441a@i*) (for-all aK2eb7@id? aK441b@e*))) (aK319e@syntax-violation 'export '"invalid export specifier" (car aK440d@exp*)) (void)) (aK4413@f (cdr aK440d@exp*) (append aK441a@i* aK440e@int*) (append aK441b@e* aK440f@ext*)))) aK4417@ls/false) (let ((aK441f@t aK4415@t)) (let ((aK4421@ls/false (aK30be@syntax-dispatch aK441f@t 'any))) (if aK4421@ls/false (apply (lambda (aK4423@ie) (begin (if (not (aK2eb7@id? aK4423@ie)) (aK319e@syntax-violation 'export '"invalid export" aK4423@ie) (void)) (aK4413@f (cdr aK440d@exp*) (cons aK4423@ie aK440e@int*) (cons aK4423@ie aK440f@ext*)))) aK4421@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK441f@t))))))))))) (set! aK4bbe@aK311a@parse-exports aK311a@parse-exports) (set! aK311c@parse-library-name (lambda (aK4425@spec) (letrec* ((aK4428@parse (lambda (aK4435@x) (let ((aK4437@t aK4435@x)) (let ((aK4439@ls/false (aK30be@syntax-dispatch aK4437@t '(each-any)))) (if (and aK4439@ls/false (apply (lambda (aK443b@v*) (for-all (lambda (aK443d@x) (let ((aK443f@x (aK31a4@syntax->datum aK443d@x))) (and (integer? aK443f@x) (exact? aK443f@x)))) aK443b@v*)) aK4439@ls/false)) (apply (lambda (aK4441@v*) (values '() (map aK31a4@syntax->datum aK4441@v*))) aK4439@ls/false) (let ((aK4443@t aK4437@t)) (let ((aK4445@ls/false (aK30be@syntax-dispatch aK4443@t '(any . any)))) (if (and aK4445@ls/false (apply (lambda (aK4447@x aK4448@rest) (symbol? (aK31a4@syntax->datum aK4447@x))) aK4445@ls/false)) (apply (lambda (aK444b@x aK444c@rest) (call-with-values (lambda () (aK4428@parse aK444c@rest)) (lambda (aK4453@aK4450 aK4454@aK4452) (let ((aK4457@v* aK4454@aK4452) (aK4458@x* aK4453@aK4450)) (values (cons (aK31a4@syntax->datum aK444b@x) aK4458@x*) aK4457@v*))))) aK4445@ls/false) (let ((aK445b@t aK4443@t)) (let ((aK445d@ls/false (aK30be@syntax-dispatch aK445b@t '()))) (if aK445d@ls/false (apply (lambda () (values '() '())) aK445d@ls/false) (let ((aK445f@t aK445b@t)) (let ((aK4461@ls/false (aK30be@syntax-dispatch aK445f@t '_))) (if aK4461@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid library name" aK4425@spec)) aK4461@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK445f@t)))))))))))))))) (call-with-values (lambda () (aK4428@parse aK4425@spec)) (lambda (aK442d@aK442a aK442e@aK442c) (let ((aK4431@ver* aK442e@aK442c) (aK4432@name* aK442d@aK442a)) (begin (if (null? aK4432@name*) (aK319e@syntax-violation '#f '"empty library name" aK4425@spec) (void)) (values aK4432@name* aK4431@ver*)))))))) (set! aK4bbf@aK311c@parse-library-name aK311c@parse-library-name) (set! aK311e@parse-library (lambda (aK4463@e) (let ((aK4465@t aK4463@e)) (let ((aK4467@ls/false (aK30be@syntax-dispatch aK4465@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and aK4467@ls/false (apply (lambda (aK4469@library aK446a@name* aK446b@export aK446c@exp* aK446d@import aK446e@imp* aK446f@b*) (and (eq? (aK31a4@syntax->datum aK446b@export) 'export) (eq? (aK31a4@syntax->datum aK446d@import) 'import) (eq? (aK31a4@syntax->datum aK4469@library) 'library))) aK4467@ls/false)) (apply (lambda (aK4477@library aK4478@name* aK4479@export aK447a@exp* aK447b@import aK447c@imp* aK447d@b*) (values aK4478@name* aK447a@exp* aK447c@imp* aK447d@b*)) aK4467@ls/false) (let ((aK4485@t aK4465@t)) (let ((aK4487@ls/false (aK30be@syntax-dispatch aK4485@t '_))) (if aK4487@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"malformed library" aK4463@e)) aK4487@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4485@t))))))))) (set! aK4bc0@aK311e@parse-library aK311e@parse-library) (set! aK3120@parse-import-spec* (letrec* ((aK448a@idsyn? (lambda (aK4693@x) (symbol? (aK31a4@syntax->datum aK4693@x)))) (aK448c@dup-error (lambda (aK4691@name) (aK319e@syntax-violation 'import '"two imports with different bindings" aK4691@name))) (aK448e@merge-substs (lambda (aK467f@s aK4680@subst) (letrec* ((aK4684@insert-to-subst (lambda (aK4685@a aK4686@subst) (let ((aK4689@name (car aK4685@a)) (aK468a@label (cdr aK4685@a))) (let ((aK468d@t (assq aK4689@name aK4686@subst))) (if aK468d@t ((lambda (aK468f@x) (if (eq? (cdr aK468f@x) aK468a@label) aK4686@subst (aK448c@dup-error aK4689@name))) aK468d@t) (cons aK4685@a aK4686@subst))))))) (if (null? aK467f@s) aK4680@subst (aK4684@insert-to-subst (car aK467f@s) (aK448e@merge-substs (cdr aK467f@s) aK4680@subst)))))) (aK4490@exclude* (lambda (aK464f@sym* aK4650@subst) (letrec* ((aK4654@exclude (lambda (aK466d@sym aK466e@subst) (if (null? aK466e@subst) (aK319e@syntax-violation 'import '"cannot rename unbound identifier" aK466d@sym) (if (eq? aK466d@sym (caar aK466e@subst)) (values (cdar aK466e@subst) (cdr aK466e@subst)) (let ((aK4671@a (car aK466e@subst))) (call-with-values (lambda () (aK4654@exclude aK466d@sym (cdr aK466e@subst))) (lambda (aK4677@aK4674 aK4678@aK4676) (let ((aK467b@subst aK4678@aK4676) (aK467c@old aK4677@aK4674)) (values aK467c@old (cons aK4671@a aK467b@subst))))))))))) (if (null? aK464f@sym*) (values '() aK4650@subst) (call-with-values (lambda () (aK4654@exclude (car aK464f@sym*) aK4650@subst)) (lambda (aK4659@aK4656 aK465a@aK4658) (let ((aK465d@subst aK465a@aK4658) (aK465e@old aK4659@aK4656)) (call-with-values (lambda () (aK4490@exclude* (cdr aK464f@sym*) aK465d@subst)) (lambda (aK4665@aK4662 aK4666@aK4664) (let ((aK4669@subst aK4666@aK4664) (aK466a@old* aK4665@aK4662)) (values (cons aK465e@old aK466a@old*) aK4669@subst))))))))))) (aK4492@find* (lambda (aK4647@sym* aK4648@subst) (map (lambda (aK464b@x) (let ((aK464d@t (assq aK464b@x aK4648@subst))) (if aK464d@t (cdr aK464d@t) (aK319e@syntax-violation 'import '"cannot find identifier" aK464b@x)))) aK4647@sym*))) (aK4494@rem* (lambda (aK463f@sym* aK4640@subst) (let aK4645@f ((aK4643@subst aK4640@subst)) (if (null? aK4643@subst) '() (if (memq (caar aK4643@subst) aK463f@sym*) (aK4645@f (cdr aK4643@subst)) (cons (car aK4643@subst) (aK4645@f (cdr aK4643@subst)))))))) (aK4496@remove-dups (lambda (aK463d@ls) (if (null? aK463d@ls) '() (if (memq (car aK463d@ls) (cdr aK463d@ls)) (aK4496@remove-dups (cdr aK463d@ls)) (cons (car aK463d@ls) (aK4496@remove-dups (cdr aK463d@ls))))))) (aK4498@parse-library-name (lambda (aK4555@spec) (letrec* ((aK4558@subversion? (lambda (aK4639@x) (let ((aK463b@x (aK31a4@syntax->datum aK4639@x))) (and (integer? aK463b@x) (exact? aK463b@x) (>= aK463b@x '0))))) (aK455a@subversion-pred (lambda (aK45d9@x*) (let ((aK45db@t aK45d9@x*)) (let ((aK45dd@ls/false (aK30be@syntax-dispatch aK45db@t 'any))) (if (and aK45dd@ls/false (apply (lambda (aK45df@n) (aK4558@subversion? aK45df@n)) aK45dd@ls/false)) (apply (lambda (aK45e1@n) (lambda (aK45e3@x) (= aK45e3@x (aK31a4@syntax->datum aK45e1@n)))) aK45dd@ls/false) (let ((aK45e5@t aK45db@t)) (let ((aK45e7@ls/false (aK30be@syntax-dispatch aK45e5@t '(any . each-any)))) (if (and aK45e7@ls/false (apply (lambda (aK45e9@p? aK45ea@sub*) (eq? (aK31a4@syntax->datum aK45e9@p?) 'and)) aK45e7@ls/false)) (apply (lambda (aK45ed@p? aK45ee@sub*) (let ((aK45f1@p* (map aK455a@subversion-pred aK45ee@sub*))) (lambda (aK45f3@x) (for-all (lambda (aK45f5@p) (aK45f5@p aK45f3@x)) aK45f1@p*)))) aK45e7@ls/false) (let ((aK45f7@t aK45e5@t)) (let ((aK45f9@ls/false (aK30be@syntax-dispatch aK45f7@t '(any . each-any)))) (if (and aK45f9@ls/false (apply (lambda (aK45fb@p? aK45fc@sub*) (eq? (aK31a4@syntax->datum aK45fb@p?) 'or)) aK45f9@ls/false)) (apply (lambda (aK45ff@p? aK4600@sub*) (let ((aK4603@p* (map aK455a@subversion-pred aK4600@sub*))) (lambda (aK4605@x) (exists (lambda (aK4607@p) (aK4607@p aK4605@x)) aK4603@p*)))) aK45f9@ls/false) (let ((aK4609@t aK45f7@t)) (let ((aK460b@ls/false (aK30be@syntax-dispatch aK4609@t '(any any)))) (if (and aK460b@ls/false (apply (lambda (aK460d@p? aK460e@sub) (eq? (aK31a4@syntax->datum aK460d@p?) 'not)) aK460b@ls/false)) (apply (lambda (aK4611@p? aK4612@sub) (let ((aK4615@p (aK455a@subversion-pred aK4612@sub))) (lambda (aK4617@x) (not (aK4615@p aK4617@x))))) aK460b@ls/false) (let ((aK4619@t aK4609@t)) (let ((aK461b@ls/false (aK30be@syntax-dispatch aK4619@t '(any any)))) (if (and aK461b@ls/false (apply (lambda (aK461d@p? aK461e@n) (and (eq? (aK31a4@syntax->datum aK461d@p?) '<=) (aK4558@subversion? aK461e@n))) aK461b@ls/false)) (apply (lambda (aK4621@p? aK4622@n) (lambda (aK4625@x) (<= aK4625@x (aK31a4@syntax->datum aK4622@n)))) aK461b@ls/false) (let ((aK4627@t aK4619@t)) (let ((aK4629@ls/false (aK30be@syntax-dispatch aK4627@t '(any any)))) (if (and aK4629@ls/false (apply (lambda (aK462b@p? aK462c@n) (and (eq? (aK31a4@syntax->datum aK462b@p?) '>=) (aK4558@subversion? aK462c@n))) aK4629@ls/false)) (apply (lambda (aK462f@p? aK4630@n) (lambda (aK4633@x) (>= aK4633@x (aK31a4@syntax->datum aK4630@n)))) aK4629@ls/false) (let ((aK4635@t aK4627@t)) (let ((aK4637@ls/false (aK30be@syntax-dispatch aK4635@t '_))) (if aK4637@ls/false (apply (lambda () (aK319e@syntax-violation 'import '"invalid sub-version spec" aK4555@spec aK45d9@x*)) aK4637@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4635@t)))))))))))))))))))))))) (aK455c@version-pred (lambda (aK4589@x*) (let ((aK458b@t aK4589@x*)) (let ((aK458d@ls/false (aK30be@syntax-dispatch aK458b@t '()))) (if aK458d@ls/false (apply (lambda () (lambda (aK458f@x) '#t)) aK458d@ls/false) (let ((aK4591@t aK458b@t)) (let ((aK4593@ls/false (aK30be@syntax-dispatch aK4591@t '(any . each-any)))) (if (and aK4593@ls/false (apply (lambda (aK4595@c aK4596@ver*) (eq? (aK31a4@syntax->datum aK4595@c) 'and)) aK4593@ls/false)) (apply (lambda (aK4599@c aK459a@ver*) (let ((aK459d@p* (map aK455c@version-pred aK459a@ver*))) (lambda (aK459f@x) (for-all (lambda (aK45a1@p) (aK45a1@p aK459f@x)) aK459d@p*)))) aK4593@ls/false) (let ((aK45a3@t aK4591@t)) (let ((aK45a5@ls/false (aK30be@syntax-dispatch aK45a3@t '(any . each-any)))) (if (and aK45a5@ls/false (apply (lambda (aK45a7@c aK45a8@ver*) (eq? (aK31a4@syntax->datum aK45a7@c) 'or)) aK45a5@ls/false)) (apply (lambda (aK45ab@c aK45ac@ver*) (let ((aK45af@p* (map aK455c@version-pred aK45ac@ver*))) (lambda (aK45b1@x) (exists (lambda (aK45b3@p) (aK45b3@p aK45b1@x)) aK45af@p*)))) aK45a5@ls/false) (let ((aK45b5@t aK45a3@t)) (let ((aK45b7@ls/false (aK30be@syntax-dispatch aK45b5@t '(any any)))) (if (and aK45b7@ls/false (apply (lambda (aK45b9@c aK45ba@ver) (eq? (aK31a4@syntax->datum aK45b9@c) 'not)) aK45b7@ls/false)) (apply (lambda (aK45bd@c aK45be@ver) (let ((aK45c1@p (aK455c@version-pred aK45be@ver))) (lambda (aK45c3@x) (not (aK45c1@p aK45c3@x))))) aK45b7@ls/false) (let ((aK45c5@t aK45b5@t)) (let ((aK45c7@ls/false (aK30be@syntax-dispatch aK45c5@t 'each-any))) (if aK45c7@ls/false (apply (lambda (aK45c9@sub*) (let ((aK45cb@p* (map aK455a@subversion-pred aK45c9@sub*))) (lambda (aK45cd@x) (let aK45d3@f ((aK45cf@p* aK45cb@p*) (aK45d0@x aK45cd@x)) (if (null? aK45cf@p*) '#t (if (null? aK45d0@x) '#f (and ((car aK45cf@p*) (car aK45d0@x)) (aK45d3@f (cdr aK45cf@p*) (cdr aK45d0@x))))))))) aK45c7@ls/false) (let ((aK45d5@t aK45c5@t)) (let ((aK45d7@ls/false (aK30be@syntax-dispatch aK45d5@t '_))) (if aK45d7@ls/false (apply (lambda () (aK319e@syntax-violation 'import '"invalid version spec" aK4555@spec aK4589@x*)) aK45d7@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK45d5@t)))))))))))))))))))))) (let aK455f@f ((aK455d@x aK4555@spec)) (let ((aK4561@t aK455d@x)) (let ((aK4563@ls/false (aK30be@syntax-dispatch aK4561@t '(each-any)))) (if aK4563@ls/false (apply (lambda (aK4565@version-spec*) (values '() (aK455c@version-pred aK4565@version-spec*))) aK4563@ls/false) (let ((aK4567@t aK4561@t)) (let ((aK4569@ls/false (aK30be@syntax-dispatch aK4567@t '(any . any)))) (if (and aK4569@ls/false (apply (lambda (aK456b@x aK456c@x*) (aK448a@idsyn? aK456b@x)) aK4569@ls/false)) (apply (lambda (aK456f@x aK4570@x*) (call-with-values (lambda () (aK455f@f aK4570@x*)) (lambda (aK4577@aK4574 aK4578@aK4576) (let ((aK457b@pred aK4578@aK4576) (aK457c@name aK4577@aK4574)) (values (cons (aK31a4@syntax->datum aK456f@x) aK457c@name) aK457b@pred))))) aK4569@ls/false) (let ((aK457f@t aK4567@t)) (let ((aK4581@ls/false (aK30be@syntax-dispatch aK457f@t '()))) (if aK4581@ls/false (apply (lambda () (values '() (lambda (aK4583@x) '#t))) aK4581@ls/false) (let ((aK4585@t aK457f@t)) (let ((aK4587@ls/false (aK30be@syntax-dispatch aK4585@t '_))) (if aK4587@ls/false (apply (lambda () (aK319e@syntax-violation '#f '"invalid import spec" aK4555@spec)) aK4587@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4585@t))))))))))))))))) (aK449a@import-library (lambda (aK4545@spec*) (call-with-values (lambda () (aK4498@parse-library-name aK4545@spec*)) (lambda (aK454b@aK4548 aK454c@aK454a) (let ((aK454f@pred aK454c@aK454a) (aK4550@name aK454b@aK4548)) (begin (if (null? aK4550@name) (aK319e@syntax-violation 'import '"empty library name" aK4545@spec*) (void)) (let ((aK4553@lib (aK2ccc@aK2b13@find-library-by-name aK4550@name))) (begin (if (not aK4553@lib) (aK319e@syntax-violation 'import '"cannot find library with required name" aK4550@name) (void)) (if (not (aK454f@pred (aK2ca6@aK2ac7@library-version aK4553@lib))) (aK319e@syntax-violation 'import '"library does not satisfy version specification" aK4545@spec* aK4553@lib) (void)) ((aK312a@imp-collector) aK4553@lib) (aK2cae@aK2ad7@library-subst aK4553@lib))))))))) (aK449c@get-import (lambda (aK44b7@spec) (let ((aK44b9@t aK44b7@spec)) (let ((aK44bb@ls/false (aK30be@syntax-dispatch aK44b9@t '(any . each-any)))) (if (and aK44bb@ls/false (apply (lambda (aK44bd@x aK44be@x*) (not (memq (aK31a4@syntax->datum aK44bd@x) '(for rename except only prefix library)))) aK44bb@ls/false)) (apply (lambda (aK44c1@x aK44c2@x*) (aK449a@import-library (cons aK44c1@x aK44c2@x*))) aK44bb@ls/false) (let ((aK44c5@t aK44b9@t)) (let ((aK44c7@ls/false (aK30be@syntax-dispatch aK44c5@t '(any any . #(each (any any)))))) (if (and aK44c7@ls/false (apply (lambda (aK44c9@rename aK44ca@isp aK44cb@old* aK44cc@new*) (and (eq? (aK31a4@syntax->datum aK44c9@rename) 'rename) (for-all aK448a@idsyn? aK44cb@old*) (for-all aK448a@idsyn? aK44cc@new*))) aK44c7@ls/false)) (apply (lambda (aK44d1@rename aK44d2@isp aK44d3@old* aK44d4@new*) (let ((aK44d9@subst (aK449c@get-import aK44d2@isp)) (aK44da@old* (map aK31a4@syntax->datum aK44d3@old*)) (aK44db@new* (map aK31a4@syntax->datum aK44d4@new*))) (let ((aK44df@old-label* (aK4492@find* aK44da@old* aK44d9@subst))) (let ((aK44e1@subst (aK4494@rem* aK44da@old* aK44d9@subst))) (aK448e@merge-substs (map cons aK44db@new* aK44df@old-label*) aK44e1@subst))))) aK44c7@ls/false) (let ((aK44e3@t aK44c5@t)) (let ((aK44e5@ls/false (aK30be@syntax-dispatch aK44e3@t '(any any . each-any)))) (if (and aK44e5@ls/false (apply (lambda (aK44e7@except aK44e8@isp aK44e9@sym*) (and (eq? (aK31a4@syntax->datum aK44e7@except) 'except) (for-all aK448a@idsyn? aK44e9@sym*))) aK44e5@ls/false)) (apply (lambda (aK44ed@except aK44ee@isp aK44ef@sym*) (let ((aK44f3@subst (aK449c@get-import aK44ee@isp))) (aK4494@rem* (map aK31a4@syntax->datum aK44ef@sym*) aK44f3@subst))) aK44e5@ls/false) (let ((aK44f5@t aK44e3@t)) (let ((aK44f7@ls/false (aK30be@syntax-dispatch aK44f5@t '(any any . each-any)))) (if (and aK44f7@ls/false (apply (lambda (aK44f9@only aK44fa@isp aK44fb@sym*) (and (eq? (aK31a4@syntax->datum aK44f9@only) 'only) (for-all aK448a@idsyn? aK44fb@sym*))) aK44f7@ls/false)) (apply (lambda (aK44ff@only aK4500@isp aK4501@sym*) (let ((aK4505@subst (aK449c@get-import aK4500@isp)) (aK4506@sym* (map aK31a4@syntax->datum aK4501@sym*))) (let ((aK4509@sym* (aK4496@remove-dups aK4506@sym*))) (let ((aK450b@lab* (aK4492@find* aK4509@sym* aK4505@subst))) (map cons aK4509@sym* aK450b@lab*))))) aK44f7@ls/false) (let ((aK450d@t aK44f5@t)) (let ((aK450f@ls/false (aK30be@syntax-dispatch aK450d@t '(any any any)))) (if (and aK450f@ls/false (apply (lambda (aK4511@prefix aK4512@isp aK4513@p) (and (eq? (aK31a4@syntax->datum aK4511@prefix) 'prefix) (aK448a@idsyn? aK4513@p))) aK450f@ls/false)) (apply (lambda (aK4517@prefix aK4518@isp aK4519@p) (let ((aK451d@subst (aK449c@get-import aK4518@isp)) (aK451e@prefix (symbol->string (aK31a4@syntax->datum aK4519@p)))) (map (lambda (aK4521@x) (cons (string->symbol (string-append aK451e@prefix (symbol->string (car aK4521@x)))) (cdr aK4521@x))) aK451d@subst))) aK450f@ls/false) (let ((aK4523@t aK450d@t)) (let ((aK4525@ls/false (aK30be@syntax-dispatch aK4523@t '(any each-any)))) (if (and aK4525@ls/false (apply (lambda (aK4527@library aK4528@spec*) (eq? (aK31a4@syntax->datum aK4527@library) 'library)) aK4525@ls/false)) (apply (lambda (aK452b@library aK452c@spec*) (aK449a@import-library aK452c@spec*)) aK4525@ls/false) (let ((aK452f@t aK4523@t)) (let ((aK4531@ls/false (aK30be@syntax-dispatch aK452f@t '(any any . any)))) (if (and aK4531@ls/false (apply (lambda (aK4533@for aK4534@isp aK4535@rest) (eq? (aK31a4@syntax->datum aK4533@for) 'for)) aK4531@ls/false)) (apply (lambda (aK4539@for aK453a@isp aK453b@rest) (aK449c@get-import aK453a@isp)) aK4531@ls/false) (let ((aK453f@t aK452f@t)) (let ((aK4541@ls/false (aK30be@syntax-dispatch aK453f@t 'any))) (if aK4541@ls/false (apply (lambda (aK4543@spec) (aK319e@syntax-violation 'import '"invalid import spec" aK4543@spec)) aK4541@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK453f@t))))))))))))))))))))))))))) (aK449e@add-imports! (lambda (aK44a7@imp aK44a8@h) (let ((aK44ab@subst (aK449c@get-import aK44a7@imp))) (for-each (lambda (aK44ad@x) (let ((aK44af@name (car aK44ad@x)) (aK44b0@label (cdr aK44ad@x))) (let ((aK44b3@t (hashtable-ref aK44a8@h aK44af@name '#f))) (if aK44b3@t ((lambda (aK44b5@l) (if (not (eq? aK44b5@l aK44b0@label)) (aK448c@dup-error aK44af@name) (void))) aK44b3@t) (hashtable-set! aK44a8@h aK44af@name aK44b0@label))))) aK44ab@subst))))) (lambda (aK449f@imp*) (let aK44a5@f ((aK44a1@imp* aK449f@imp*) (aK44a2@h (make-eq-hashtable))) (if (null? aK44a1@imp*) (hashtable-entries aK44a2@h) (begin (aK449e@add-imports! (car aK44a1@imp*) aK44a2@h) (aK44a5@f (cdr aK44a1@imp*) aK44a2@h))))))) (set! aK4bc1@aK3120@parse-import-spec* aK3120@parse-import-spec*) (set! aK3122@make-top-rib (lambda (aK4695@names aK4696@labels) (let ((aK4699@rib (aK2e6b@make-empty-rib))) (begin (vector-for-each (lambda (aK469b@name aK469c@label) (begin (if (not (symbol? aK469b@name)) (error 'make-top-rib '"BUG: not a symbol" aK469b@name) (void)) (aK2e6f@extend-rib/nc! aK4699@rib (make-simple-struct 'stx '5 (list aK469b@name aK2e3b@top-mark* '() '())) aK469c@label))) aK4695@names aK4696@labels) aK4699@rib)))) (set! aK4bc2@aK3122@make-top-rib aK3122@make-top-rib) (set! aK3124@make-collector (lambda () (let ((aK469f@ls '())) (lambda aK46a3 (let ((aK46a4 (length aK46a3))) (if (= aK46a4 '0) (apply (lambda () aK469f@ls) aK46a3) (if (= aK46a4 '1) (apply (lambda (aK46a1@x) (set! aK469f@ls (aK2e34@set-cons aK46a1@x aK469f@ls))) aK46a3) (error 'apply '"invalid arg count")))))))) (set! aK4bc3@aK3124@make-collector aK3124@make-collector) (set! aK3126@inv-collector (aK2a07@aK28e5@make-parameter (lambda aK46a5@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (aK46a7@x) (begin (if (not (procedure? aK46a7@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" aK46a7@x) (void)) aK46a7@x)))) (set! aK4bc4@aK3126@inv-collector aK3126@inv-collector) (set! aK3128@vis-collector (aK2a07@aK28e5@make-parameter (lambda aK46a9@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (aK46ab@x) (begin (if (not (procedure? aK46ab@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" aK46ab@x) (void)) aK46ab@x)))) (set! aK4bc5@aK3128@vis-collector aK3128@vis-collector) (set! aK312a@imp-collector (aK2a07@aK28e5@make-parameter (lambda aK46ad@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (aK46af@x) (begin (if (not (procedure? aK46af@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" aK46af@x) (void)) aK46af@x)))) (set! aK4bc6@aK312a@imp-collector aK312a@imp-collector) (set! aK312c@chi-library-internal (lambda (aK46b1@e* aK46b2@rib aK46b3@top?) (call-with-values (lambda () (aK3116@chi-body* aK46b1@e* '() '() '() '() '() '() '() aK46b2@rib aK46b3@top?)) (lambda (aK46c7@aK46b8 aK46c8@aK46ba aK46c9@aK46bc aK46ca@aK46be aK46cb@aK46c0 aK46cc@aK46c2 aK46cd@aK46c4 aK46ce@aK46c6) (let ((aK46d7@exp* aK46ce@aK46c6) (aK46d8@_kwd* aK46cd@aK46c4) (aK46d9@mod** aK46cc@aK46c2) (aK46da@rhs* aK46cb@aK46c0) (aK46db@lex* aK46ca@aK46be) (aK46dc@mr aK46c9@aK46bc) (aK46dd@r aK46c8@aK46ba) (aK46de@e* aK46c7@aK46b8)) (values (append (apply append (reverse aK46d9@mod**)) aK46de@e*) aK46dd@r aK46dc@mr (reverse aK46db@lex*) (reverse aK46da@rhs*) aK46d7@exp*)))))) (set! aK4bc7@aK312c@chi-library-internal aK312c@chi-library-internal) (set! aK312e@chi-interaction-expr (lambda (aK46e7@e aK46e8@rib aK46e9@r) (call-with-values (lambda () (aK3116@chi-body* (list aK46e7@e) aK46e9@r aK46e9@r '() '() '() '() '() aK46e8@rib '#t)) (lambda (aK46fd@aK46ee aK46fe@aK46f0 aK46ff@aK46f2 aK4700@aK46f4 aK4701@aK46f6 aK4702@aK46f8 aK4703@aK46fa aK4704@aK46fc) (let ((aK470d@_exp* aK4704@aK46fc) (aK470e@_kwd* aK4703@aK46fa) (aK470f@mod** aK4702@aK46f8) (aK4710@rhs* aK4701@aK46f6) (aK4711@lex* aK4700@aK46f4) (aK4712@mr aK46ff@aK46f2) (aK4713@r aK46fe@aK46f0) (aK4714@e* aK46fd@aK46ee)) (let ((aK471d@e* (aK30ee@expand-interaction-rhs*/init* (reverse aK4711@lex*) (reverse aK4710@rhs*) (append (apply append (reverse aK470f@mod**)) aK4714@e*) aK4713@r aK4712@mr))) (let ((aK471f@e (if (null? aK471d@e*) (aK2e1d@aK2d7e@build-void) (if (null? (cdr aK471d@e*)) (car aK471d@e*) (aK2e1c@aK2d7c@build-sequence '#f aK471d@e*))))) (values aK471f@e aK4713@r)))))))) (set! aK4bc8@aK312e@chi-interaction-expr aK312e@chi-interaction-expr) (set! aK3130@library-body-expander (lambda (aK4721@name aK4722@main-exp* aK4723@imp* aK4724@b* aK4725@top?) (letrec* ((aK472c@itc (aK3124@make-collector))) (let ((aK4735@aK472e aK312a@imp-collector) (aK4736@aK4730 aK31ae@top-level-context) (aK4737@aK4732 aK472c@itc) (aK4738@aK4734 '#f)) (let ((aK473d@swap (lambda () (begin (let ((aK473f@t (aK4735@aK472e))) (begin (aK4735@aK472e aK4737@aK4732) (set! aK4737@aK4732 aK473f@t))) (let ((aK4741@t (aK4736@aK4730))) (begin (aK4736@aK4730 aK4738@aK4734) (set! aK4738@aK4734 aK4741@t))))))) (dynamic-wind aK473d@swap (lambda () (call-with-values (lambda () (aK3120@parse-import-spec* aK4723@imp*)) (lambda (aK4747@aK4744 aK4748@aK4746) (let ((aK474b@subst-labels aK4748@aK4746) (aK474c@subst-names aK4747@aK4744)) (let ((aK474f@rib (aK3122@make-top-rib aK474c@subst-names aK474b@subst-labels))) (letrec* ((aK4752@wrap (lambda (aK47cd@x) (make-simple-struct 'stx '5 (list aK47cd@x aK2e3b@top-mark* (list aK474f@rib) '()))))) (let ((aK4753@b* (map aK4752@wrap aK4724@b*)) (aK4754@main-exp* (map aK4752@wrap aK4722@main-exp*)) (aK4755@rtc (aK3124@make-collector)) (aK4756@vtc (aK3124@make-collector))) (let ((aK4763@aK475c aK3126@inv-collector) (aK4764@aK475e aK3128@vis-collector) (aK4765@aK4760 aK4755@rtc) (aK4766@aK4762 aK4756@vtc)) (let ((aK476b@swap (lambda () (begin (let ((aK476d@t (aK4763@aK475c))) (begin (aK4763@aK475c aK4765@aK4760) (set! aK4765@aK4760 aK476d@t))) (let ((aK476f@t (aK4764@aK475e))) (begin (aK4764@aK475e aK4766@aK4762) (set! aK4766@aK4762 aK476f@t))))))) (dynamic-wind aK476b@swap (lambda () (call-with-values (lambda () (aK312c@chi-library-internal aK4753@b* aK474f@rib aK4725@top?)) (lambda (aK477d@aK4772 aK477e@aK4774 aK477f@aK4776 aK4780@aK4778 aK4781@aK477a aK4782@aK477c) (let ((aK4789@internal-exp* aK4782@aK477c) (aK478a@rhs* aK4781@aK477a) (aK478b@lex* aK4780@aK4778) (aK478c@mr aK477f@aK4776) (aK478d@r aK477e@aK4774) (aK478e@init* aK477d@aK4772)) (call-with-values (lambda () (aK311a@parse-exports (append aK4754@main-exp* aK4789@internal-exp*))) (lambda (aK4799@aK4796 aK479a@aK4798) (let ((aK479d@exp-id* aK479a@aK4798) (aK479e@exp-name* aK4799@aK4796)) (begin (aK2e73@seal-rib! aK474f@rib) (let ((aK47a1@init* (aK30dc@chi-expr* aK478e@init* aK478d@r aK478c@mr))) (let ((aK47a3@rhs* (aK30f0@chi-rhs* aK478a@rhs* aK478d@r aK478c@mr))) (begin (aK2e75@unseal-rib! aK474f@rib) (let ((aK47a5@loc* (map aK2e41@gen-global aK478b@lex*)) (aK47a6@export-subst (aK3188@make-export-subst aK479e@exp-name* aK479d@exp-id*))) (letrec* ((aK47aa@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (aK318a@make-export-env/macros aK478b@lex* aK47a5@loc* aK478d@r)) (lambda (aK47b1@aK47ac aK47b2@aK47ae aK47b3@aK47b0) (let ((aK47b7@macro* aK47b3@aK47b0) (aK47b8@global* aK47b2@aK47ae) (aK47b9@export-env aK47b1@aK47ac)) (begin (for-each (lambda (aK47bd@s) (let ((aK47bf@name (car aK47bd@s)) (aK47c0@label (cdr aK47bd@s))) (let ((aK47c3@p (assq aK47c0@label aK47b9@export-env))) (if aK47c3@p (let ((aK47c5@b (cdr aK47c3@p))) (let ((aK47c7@type (car aK47c5@b))) (if (eq? aK47c7@type 'mutable) (aK319e@syntax-violation 'export aK47aa@errstr aK47bf@name) (void)))) (void))))) aK47a6@export-subst) (let ((aK47c9@invoke-body (aK2e22@aK2d88@build-library-letrec* '#f aK4721@name aK478b@lex* aK47a5@loc* aK47a3@rhs* (if (null? aK47a1@init*) (aK2e1d@aK2d7e@build-void) (aK2e1c@aK2d7c@build-sequence '#f aK47a1@init*)))) (aK47ca@invoke-definitions (map aK2e19@aK2cdb@build-global-define (map cdr aK47b8@global*)))) (values (aK472c@itc) (aK4755@rtc) (aK4756@vtc) (aK2e1c@aK2d7c@build-sequence '#f (append aK47ca@invoke-definitions (list aK47c9@invoke-body))) aK47b7@macro* aK47a6@export-subst aK47b9@export-env))))))))))))))))))) aK476b@swap)))))))))) aK473d@swap)))))) (set! aK4bc9@aK3130@library-body-expander aK3130@library-body-expander) (set! aK3132@core-library-expander (lambda (aK47cf@e aK47d0@verify-name) (call-with-values (lambda () (aK311e@parse-library aK47cf@e)) (lambda (aK47db@aK47d4 aK47dc@aK47d6 aK47dd@aK47d8 aK47de@aK47da) (let ((aK47e3@b* aK47de@aK47da) (aK47e4@imp* aK47dd@aK47d8) (aK47e5@exp* aK47dc@aK47d6) (aK47e6@name* aK47db@aK47d4)) (call-with-values (lambda () (aK311c@parse-library-name aK47e6@name*)) (lambda (aK47ef@aK47ec aK47f0@aK47ee) (let ((aK47f3@ver aK47f0@aK47ee) (aK47f4@name aK47ef@aK47ec)) (begin (aK47d0@verify-name aK47f4@name) (call-with-values (lambda () (aK3130@library-body-expander aK47f4@name aK47e5@exp* aK47e4@imp* aK47e3@b* '#f)) (lambda (aK4805@aK47f8 aK4806@aK47fa aK4807@aK47fc aK4808@aK47fe aK4809@aK4800 aK480a@aK4802 aK480b@aK4804) (let ((aK4813@export-env aK480b@aK4804) (aK4814@export-subst aK480a@aK4802) (aK4815@visit-code aK4809@aK4800) (aK4816@invoke-code aK4808@aK47fe) (aK4817@visit-req* aK4807@aK47fc) (aK4818@invoke-req* aK4806@aK47fa) (aK4819@imp* aK4805@aK47f8)) (values aK47f4@name aK47f3@ver aK4819@imp* aK4818@invoke-req* aK4817@visit-req* aK4816@invoke-code aK4815@visit-code aK4814@export-subst aK4813@export-env))))))))))))) (set! aK4bca@aK3132@core-library-expander aK3132@core-library-expander) (set! aK3134@parse-top-level-program (lambda (aK4821@e*) (let ((aK4823@t aK4821@e*)) (let ((aK4825@ls/false (aK30be@syntax-dispatch aK4823@t '((any . each-any) . each-any)))) (if (and aK4825@ls/false (apply (lambda (aK4827@import aK4828@imp* aK4829@b*) (eq? (aK31a4@syntax->datum aK4827@import) 'import)) aK4825@ls/false)) (apply (lambda (aK482d@import aK482e@imp* aK482f@b*) (values aK482e@imp* aK482f@b*)) aK4825@ls/false) (let ((aK4833@t aK4823@t)) (let ((aK4835@ls/false (aK30be@syntax-dispatch aK4833@t '((any . any) . any)))) (if (and aK4835@ls/false (apply (lambda (aK4837@import aK4838@x aK4839@y) (eq? (aK31a4@syntax->datum aK4837@import) 'import)) aK4835@ls/false)) (apply (lambda (aK483d@import aK483e@x aK483f@y) (aK319e@syntax-violation 'expander '"invalid syntax of top-level program" (aK2eb1@syntax-car aK4821@e*))) aK4835@ls/false) (let ((aK4843@t aK4833@t)) (let ((aK4845@ls/false (aK30be@syntax-dispatch aK4843@t '_))) (if aK4845@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) aK4845@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4843@t)))))))))))) (set! aK4bcb@aK3134@parse-top-level-program aK3134@parse-top-level-program) (set! aK3136@top-level-expander (lambda (aK4847@e*) (call-with-values (lambda () (aK3134@parse-top-level-program aK4847@e*)) (lambda (aK484d@aK484a aK484e@aK484c) (let ((aK4851@b* aK484e@aK484c) (aK4852@imp* aK484d@aK484a)) (call-with-values (lambda () (aK3130@library-body-expander '() '() aK4852@imp* aK4851@b* '#t)) (lambda (aK4863@aK4856 aK4864@aK4858 aK4865@aK485a aK4866@aK485c aK4867@aK485e aK4868@aK4860 aK4869@aK4862) (let ((aK4871@export-env aK4869@aK4862) (aK4872@export-subst aK4868@aK4860) (aK4873@visit-code aK4867@aK485e) (aK4874@invoke-code aK4866@aK485c) (aK4875@visit-req* aK4865@aK485a) (aK4876@invoke-req* aK4864@aK4858) (aK4877@imp* aK4863@aK4856)) (values aK4876@invoke-req* aK4874@invoke-code))))))))) (set! aK4bcc@aK3136@top-level-expander aK3136@top-level-expander) (set! aK3138@rp (aK2a04@aK28df@make-record-printer 'env (lambda (aK487f@x aK4880@p aK4881@wr) (display '"#<environment>" aK4880@p)))) (set! aK4bcd@aK3138@rp aK3138@rp) (set! aK3142@env? (lambda (aK4885@x) (and (simple-struct? aK4885@x) (eq? (simple-struct-name aK4885@x) 'env)))) (set! aK4bce@aK3142@env? aK3142@env?) (set! aK3144@env-names (lambda (aK4887@x) (simple-struct-ref aK4887@x '0))) (set! aK4bcf@aK3144@env-names aK3144@env-names) (set! aK3146@set-env-names! (lambda (aK4889@x aK488a@val) (simple-struct-set! aK4889@x '0 aK488a@val))) (set! aK4bd0@aK3146@set-env-names! aK3146@set-env-names!) (set! aK3148@env-labels (lambda (aK488d@x) (simple-struct-ref aK488d@x '1))) (set! aK4bd1@aK3148@env-labels aK3148@env-labels) (set! aK314a@set-env-labels! (lambda (aK488f@x aK4890@val) (simple-struct-set! aK488f@x '1 aK4890@val))) (set! aK4bd2@aK314a@set-env-labels! aK314a@set-env-labels!) (set! aK314c@env-itc (lambda (aK4893@x) (simple-struct-ref aK4893@x '2))) (set! aK4bd3@aK314c@env-itc aK314c@env-itc) (set! aK314e@set-env-itc! (lambda (aK4895@x aK4896@val) (simple-struct-set! aK4895@x '2 aK4896@val))) (set! aK4bd4@aK314e@set-env-itc! aK314e@set-env-itc!) (set! aK3150@dummy '3) (set! aK4bd5@aK3150@dummy aK3150@dummy) (set! aK3152@rp (aK2a04@aK28df@make-record-printer 'interaction-env (lambda (aK4899@x aK489a@p aK489b@wr) (display '"#<environment>" aK489a@p)))) (set! aK4bd6@aK3152@rp aK3152@rp) (set! aK315c@interaction-env? (lambda (aK489f@x) (and (simple-struct? aK489f@x) (eq? (simple-struct-name aK489f@x) 'interaction-env)))) (set! aK4bd7@aK315c@interaction-env? aK315c@interaction-env?) (set! aK315e@interaction-env-rib (lambda (aK48a1@x) (simple-struct-ref aK48a1@x '0))) (set! aK4bd8@aK315e@interaction-env-rib aK315e@interaction-env-rib) (set! aK3160@set-interaction-env-rib! (lambda (aK48a3@x aK48a4@val) (simple-struct-set! aK48a3@x '0 aK48a4@val))) (set! aK4bd9@aK3160@set-interaction-env-rib! aK3160@set-interaction-env-rib!) (set! aK3162@interaction-env-r (lambda (aK48a7@x) (simple-struct-ref aK48a7@x '1))) (set! aK4bda@aK3162@interaction-env-r aK3162@interaction-env-r) (set! aK3164@set-interaction-env-r! (lambda (aK48a9@x aK48aa@val) (simple-struct-set! aK48a9@x '1 aK48aa@val))) (set! aK4bdb@aK3164@set-interaction-env-r! aK3164@set-interaction-env-r!) (set! aK3166@interaction-env-locs (lambda (aK48ad@x) (simple-struct-ref aK48ad@x '2))) (set! aK4bdc@aK3166@interaction-env-locs aK3166@interaction-env-locs) (set! aK3168@set-interaction-env-locs! (lambda (aK48af@x aK48b0@val) (simple-struct-set! aK48af@x '2 aK48b0@val))) (set! aK4bdd@aK3168@set-interaction-env-locs! aK3168@set-interaction-env-locs!) (set! aK316a@dummy '3) (set! aK4bde@aK316a@dummy aK316a@dummy) (set! aK316c@interaction-environment-symbols (lambda () (aK3174@environment-symbols (aK31ac@interaction-environment)))) (set! aK4bdf@aK316c@interaction-environment-symbols aK316c@interaction-environment-symbols) (set! aK316e@environment-bindings (lambda (aK48b3@e) (vector->list (vector-map (lambda (aK48b5@name aK48b6@label) (aK3170@parse-binding (cons aK48b5@name (aK2cd2@aK2b1f@imported-label->binding aK48b6@label)))) (aK3144@env-names aK48b3@e) (aK3148@env-labels aK48b3@e))))) (set! aK4be0@aK316e@environment-bindings aK316e@environment-bindings) (set! aK3170@parse-binding (lambda (aK48b9@b) (cons (car aK48b9@b) (let ((aK48bb@t (cadr aK48b9@b))) (if (memv aK48bb@t '(core-prim global)) 'procedure (if (memv aK48bb@t '(core-macro macro global-macro)) 'syntax (if (memv aK48bb@t '($core-rtd)) 'record (if (eq? (car aK48b9@b) (cadr aK48b9@b)) 'syntax 'unknown)))))))) (set! aK4be1@aK3170@parse-binding aK3170@parse-binding) (set! aK3172@environment? (lambda (aK48bd@x) (or (aK3142@env? aK48bd@x) (aK315c@interaction-env? aK48bd@x)))) (set! aK4be2@aK3172@environment? aK3172@environment?) (set! aK3174@environment-symbols (lambda (aK48bf@x) (if (aK3142@env? aK48bf@x) (vector->list (aK3144@env-names aK48bf@x)) (if (aK315c@interaction-env? aK48bf@x) (map values (aK2e55@rib-sym* (aK315e@interaction-env-rib aK48bf@x))) (assertion-violation 'environment-symbols '"not an environment" aK48bf@x))))) (set! aK4be3@aK3174@environment-symbols aK3174@environment-symbols) (set! aK3176@environment (lambda aK48c1@imp* (let ((aK48c3@itc (aK3124@make-collector))) (let ((aK48c9@aK48c6 aK312a@imp-collector) (aK48ca@aK48c8 aK48c3@itc)) (let ((aK48cd@swap (lambda () (let ((aK48cf@t (aK48c9@aK48c6))) (begin (aK48c9@aK48c6 aK48ca@aK48c8) (set! aK48ca@aK48c8 aK48cf@t)))))) (dynamic-wind aK48cd@swap (lambda () (call-with-values (lambda () (aK3120@parse-import-spec* aK48c1@imp*)) (lambda (aK48d5@aK48d2 aK48d6@aK48d4) (let ((aK48d9@subst-labels aK48d6@aK48d4) (aK48da@subst-names aK48d5@aK48d2)) (make-simple-struct 'env '4 (list aK48da@subst-names aK48d9@subst-labels aK48c3@itc)))))) aK48cd@swap)))))) (set! aK4be4@aK3176@environment aK3176@environment) (set! aK3178@null-environment (lambda (aK48dd@n) (begin (if (not (eqv? aK48dd@n '5)) (assertion-violation 'null-environment '"not 5" aK48dd@n) (void)) (aK3176@environment '(psyntax null-environment-5))))) (set! aK4be5@aK3178@null-environment aK3178@null-environment) (set! aK317a@scheme-report-environment (lambda (aK48df@n) (begin (if (not (eqv? aK48df@n '5)) (assertion-violation 'scheme-report-environment '"not 5" aK48df@n) (void)) (aK3176@environment '(psyntax scheme-report-environment-5))))) (set! aK4be6@aK317a@scheme-report-environment aK317a@scheme-report-environment) (set! aK317c@expand (lambda (aK48e1@x aK48e2@env) (if (aK3142@env? aK48e2@env) (let ((aK48e5@rib (aK3122@make-top-rib (aK3144@env-names aK48e2@env) (aK3148@env-labels aK48e2@env)))) (let ((aK48e7@x (make-simple-struct 'stx '5 (list aK48e1@x aK2e3b@top-mark* (list aK48e5@rib) '()))) (aK48e8@itc (aK314c@env-itc aK48e2@env)) (aK48e9@rtc (aK3124@make-collector)) (aK48ea@vtc (aK3124@make-collector))) (let ((aK48ef@x (let ((aK4901@aK48f2 aK31ae@top-level-context) (aK4902@aK48f4 aK3126@inv-collector) (aK4903@aK48f6 aK3128@vis-collector) (aK4904@aK48f8 aK312a@imp-collector) (aK4905@aK48fa '#f) (aK4906@aK48fc aK48e9@rtc) (aK4907@aK48fe aK48ea@vtc) (aK4908@aK4900 aK48e8@itc)) (let ((aK4911@swap (lambda () (begin (let ((aK4913@t (aK4901@aK48f2))) (begin (aK4901@aK48f2 aK4905@aK48fa) (set! aK4905@aK48fa aK4913@t))) (let ((aK4915@t (aK4902@aK48f4))) (begin (aK4902@aK48f4 aK4906@aK48fc) (set! aK4906@aK48fc aK4915@t))) (let ((aK4917@t (aK4903@aK48f6))) (begin (aK4903@aK48f6 aK4907@aK48fe) (set! aK4907@aK48fe aK4917@t))) (let ((aK4919@t (aK4904@aK48f8))) (begin (aK4904@aK48f8 aK4908@aK4900) (set! aK4908@aK4900 aK4919@t))))))) (dynamic-wind aK4911@swap (lambda () (aK30e0@chi-expr aK48e7@x '() '())) aK4911@swap))))) (begin (aK2e73@seal-rib! aK48e5@rib) (values aK48ef@x (aK48e9@rtc)))))) (if (aK315c@interaction-env? aK48e2@env) (let ((aK491b@rib (aK315e@interaction-env-rib aK48e2@env)) (aK491c@r (aK3162@interaction-env-r aK48e2@env)) (aK491d@rtc (aK3124@make-collector))) (let ((aK4921@x (make-simple-struct 'stx '5 (list aK48e1@x aK2e3b@top-mark* (list aK491b@rib) '())))) (call-with-values (lambda () (let ((aK4937@aK4928 aK31ae@top-level-context) (aK4938@aK492a aK3126@inv-collector) (aK4939@aK492c aK3128@vis-collector) (aK493a@aK492e aK312a@imp-collector) (aK493b@aK4930 aK48e2@env) (aK493c@aK4932 aK491d@rtc) (aK493d@aK4934 (aK3124@make-collector)) (aK493e@aK4936 (aK3124@make-collector))) (let ((aK4947@swap (lambda () (begin (let ((aK4949@t (aK4937@aK4928))) (begin (aK4937@aK4928 aK493b@aK4930) (set! aK493b@aK4930 aK4949@t))) (let ((aK494b@t (aK4938@aK492a))) (begin (aK4938@aK492a aK493c@aK4932) (set! aK493c@aK4932 aK494b@t))) (let ((aK494d@t (aK4939@aK492c))) (begin (aK4939@aK492c aK493d@aK4934) (set! aK493d@aK4934 aK494d@t))) (let ((aK494f@t (aK493a@aK492e))) (begin (aK493a@aK492e aK493e@aK4936) (set! aK493e@aK4936 aK494f@t))))))) (dynamic-wind aK4947@swap (lambda () (aK312e@chi-interaction-expr aK4921@x aK491b@rib aK491c@r)) aK4947@swap)))) (lambda (aK4951@aK4924 aK4952@aK4926) (let ((aK4955@r^ aK4952@aK4926) (aK4956@e aK4951@aK4924)) (begin (aK3164@set-interaction-env-r! aK48e2@env aK4955@r^) (values aK4956@e (aK491d@rtc)))))))) (assertion-violation 'expand '"not an environment" aK48e2@env))))) (set! aK4be7@aK317c@expand aK317c@expand) (set! aK317e@eval (lambda (aK4959@x aK495a@env) (begin (if (not (aK3172@environment? aK495a@env)) (error 'eval '"not an environment" aK495a@env) (void)) (call-with-values (lambda () (aK317c@expand aK4959@x aK495a@env)) (lambda (aK4961@aK495e aK4962@aK4960) (let ((aK4965@invoke-req* aK4962@aK4960) (aK4966@x aK4961@aK495e)) (begin (for-each aK2cd3@aK2b21@invoke-library aK4965@invoke-req*) (eval-core (aK2a5d@aK2a15@expanded->core aK4966@x))))))))) (set! aK4be8@aK317e@eval aK317e@eval) (set! aK3180@library-expander (lambda aK49d7 (let ((aK49d8 (length aK49d7))) (if (= aK49d8 '3) (apply (lambda (aK4969@x aK496a@filename aK496b@verify-name) (letrec* ((aK4970@build-visit-code (lambda (aK49c5@macro*) (if (null? aK49c5@macro*) (aK2e1d@aK2d7e@build-void) (aK2e1c@aK2d7c@build-sequence '#f (map (lambda (aK49c7@x) (let ((aK49c9@loc (car aK49c7@x)) (aK49ca@src (cddr aK49c7@x))) (list 'set! aK49c9@loc aK49ca@src))) aK49c5@macro*))))) (aK4972@visit! (lambda (aK49bd@macro*) (for-each (lambda (aK49bf@x) (let ((aK49c1@loc (car aK49bf@x)) (aK49c2@proc (cadr aK49bf@x))) (set-symbol-value! aK49c1@loc aK49c2@proc))) aK49bd@macro*)))) (call-with-values (lambda () (aK3132@core-library-expander aK4969@x aK496b@verify-name)) (lambda (aK4985@aK4974 aK4986@aK4976 aK4987@aK4978 aK4988@aK497a aK4989@aK497c aK498a@aK497e aK498b@aK4980 aK498c@aK4982 aK498d@aK4984) (let ((aK4997@export-env aK498d@aK4984) (aK4998@export-subst aK498c@aK4982) (aK4999@macro* aK498b@aK4980) (aK499a@invoke-code aK498a@aK497e) (aK499b@vis* aK4989@aK497c) (aK499c@inv* aK4988@aK497a) (aK499d@imp* aK4987@aK4978) (aK499e@ver aK4986@aK4976) (aK499f@name aK4985@aK4974)) (let ((aK49a9@id (gensym)) (aK49aa@name aK499f@name) (aK49ab@ver aK499e@ver) (aK49ac@imp* (map aK2cd7@aK2b29@library-spec aK499d@imp*)) (aK49ad@vis* (map aK2cd7@aK2b29@library-spec aK499b@vis*)) (aK49ae@inv* (map aK2cd7@aK2b29@library-spec aK499c@inv*)) (aK49af@visit-proc (lambda () (aK4972@visit! aK4999@macro*))) (aK49b0@invoke-proc (lambda () (eval-core (aK2a5d@aK2a15@expanded->core aK499a@invoke-code)))) (aK49b1@visit-code (aK4970@build-visit-code aK4999@macro*)) (aK49b2@invoke-code aK499a@invoke-code)) (begin (aK2cd1@aK2b1d@install-library aK49a9@id aK49aa@name aK49ab@ver aK49ac@imp* aK49ad@vis* aK49ae@inv* aK4998@export-subst aK4997@export-env aK49af@visit-proc aK49b0@invoke-proc aK49b1@visit-code aK49b2@invoke-code '#t aK496a@filename) (values aK49a9@id aK49aa@name aK49ab@ver aK49ac@imp* aK49ad@vis* aK49ae@inv* aK49b2@invoke-code aK49b1@visit-code aK4998@export-subst aK4997@export-env)))))))) aK49d7) (if (= aK49d8 '2) (apply (lambda (aK49cd@x aK49ce@filename) (aK3180@library-expander aK49cd@x aK49ce@filename (lambda (aK49d1@x) (values)))) aK49d7) (if (= aK49d8 '1) (apply (lambda (aK49d3@x) (aK3180@library-expander aK49d3@x '#f (lambda (aK49d5@x) (values)))) aK49d7) (error 'apply '"invalid arg count"))))))) (set! aK4be9@aK3180@library-expander aK3180@library-expander) (set! aK3182@boot-library-expand (lambda (aK49d9@x) (call-with-values (lambda () (aK3180@library-expander aK49d9@x)) (lambda (aK49ef@aK49dc aK49f0@aK49de aK49f1@aK49e0 aK49f2@aK49e2 aK49f3@aK49e4 aK49f4@aK49e6 aK49f5@aK49e8 aK49f6@aK49ea aK49f7@aK49ec aK49f8@aK49ee) (let ((aK4a03@export-env aK49f8@aK49ee) (aK4a04@export-subst aK49f7@aK49ec) (aK4a05@visit-code aK49f6@aK49ea) (aK4a06@invoke-code aK49f5@aK49e8) (aK4a07@inv* aK49f4@aK49e6) (aK4a08@vis* aK49f3@aK49e4) (aK4a09@imp* aK49f2@aK49e2) (aK4a0a@ver aK49f1@aK49e0) (aK4a0b@name aK49f0@aK49de) (aK4a0c@id aK49ef@aK49dc)) (values aK4a0b@name aK4a06@invoke-code aK4a04@export-subst aK4a03@export-env)))))) (set! aK4bea@aK3182@boot-library-expand aK3182@boot-library-expand) (set! aK3184@rev-map-append (lambda (aK4a17@f aK4a18@ls aK4a19@ac) (if (null? aK4a18@ls) aK4a19@ac (aK3184@rev-map-append aK4a17@f (cdr aK4a18@ls) (cons (aK4a17@f (car aK4a18@ls)) aK4a19@ac))))) (set! aK4beb@aK3184@rev-map-append aK3184@rev-map-append) (set! aK3186@build-exports (lambda (aK4a1d@lex*+loc* aK4a1e@init*) (aK2e1c@aK2d7c@build-sequence '#f (cons (aK2e1d@aK2d7e@build-void) (aK3184@rev-map-append (lambda (aK4a21@x) (list 'set! (cdr aK4a21@x) (car aK4a21@x))) aK4a1d@lex*+loc* aK4a1e@init*))))) (set! aK4bec@aK3186@build-exports aK3186@build-exports) (set! aK3188@make-export-subst (lambda (aK4a23@name* aK4a24@id*) (map (lambda (aK4a27@name aK4a28@id) (let ((aK4a2b@label (aK2ecd@id->label aK4a28@id))) (begin (if (not aK4a2b@label) (aK319e@syntax-violation '#f '"cannot export unbound identifier" aK4a28@id) (void)) (cons aK4a27@name aK4a2b@label)))) aK4a23@name* aK4a24@id*))) (set! aK4bed@aK3188@make-export-subst aK3188@make-export-subst) (set! aK318a@make-export-env/macros (lambda (aK4a2d@lex* aK4a2e@loc* aK4a2f@r) (letrec* ((aK4a34@lookup (lambda (aK4a51@x) (let aK4a59@f ((aK4a53@x aK4a51@x) (aK4a54@lex* aK4a2d@lex*) (aK4a55@loc* aK4a2e@loc*)) (if (pair? aK4a54@lex*) (if (eq? aK4a53@x (car aK4a54@lex*)) (car aK4a55@loc*) (aK4a59@f aK4a53@x (cdr aK4a54@lex*) (cdr aK4a55@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let aK4a3d@f ((aK4a35@r aK4a2f@r) (aK4a36@env '()) (aK4a37@global* '()) (aK4a38@macro* '())) (if (null? aK4a35@r) (values aK4a36@env aK4a37@global* aK4a38@macro*) (let ((aK4a3f@x (car aK4a35@r))) (let ((aK4a41@label (car aK4a3f@x)) (aK4a42@b (cdr aK4a3f@x))) (let ((aK4a45@t (aK2ed3@binding-type aK4a42@b))) (if (memv aK4a45@t '(lexical)) (let ((aK4a47@v (aK2ed5@binding-value aK4a42@b))) (let ((aK4a49@loc (aK4a34@lookup (aK3048@lexical-var aK4a47@v))) (aK4a4a@type (if (aK304a@lexical-mutable? aK4a47@v) 'mutable 'global))) (aK4a3d@f (cdr aK4a35@r) (cons (cons* aK4a41@label aK4a4a@type aK4a49@loc) aK4a36@env) (cons (cons (aK3048@lexical-var aK4a47@v) aK4a49@loc) aK4a37@global*) aK4a38@macro*))) (if (memv aK4a45@t '(local-macro)) (let ((aK4a4d@loc (gensym))) (aK4a3d@f (cdr aK4a35@r) (cons (cons* aK4a41@label 'global-macro aK4a4d@loc) aK4a36@env) aK4a37@global* (cons (cons aK4a4d@loc (aK2ed5@binding-value aK4a42@b)) aK4a38@macro*))) (if (memv aK4a45@t '(local-macro!)) (let ((aK4a4f@loc (gensym))) (aK4a3d@f (cdr aK4a35@r) (cons (cons* aK4a41@label 'global-macro! aK4a4f@loc) aK4a36@env) aK4a37@global* (cons (cons aK4a4f@loc (aK2ed5@binding-value aK4a42@b)) aK4a38@macro*))) (if (memv aK4a45@t '($rtd $module)) (aK4a3d@f (cdr aK4a35@r) (cons aK4a3f@x aK4a36@env) aK4a37@global* aK4a38@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (aK2ed3@binding-type aK4a42@b) (aK2ed5@binding-value aK4a42@b)))))))))))))) (set! aK4bee@aK318a@make-export-env/macros aK318a@make-export-env/macros) (set! aK318c@generate-temporaries (lambda (aK4a5b@ls) (let ((aK4a5d@t aK4a5b@ls)) (let ((aK4a5f@ls/false (aK30be@syntax-dispatch aK4a5d@t 'each-any))) (if aK4a5f@ls/false (apply (lambda (aK4a61@ls) (map (lambda (aK4a63@x) (make-simple-struct 'stx '5 (list (let ((aK4a65@x (aK31a4@syntax->datum aK4a63@x))) (if (or (symbol? aK4a65@x) (string? aK4a65@x)) (gensym aK4a65@x) (gensym 't))) aK2e3b@top-mark* '() '()))) aK4a61@ls)) aK4a5f@ls/false) (let ((aK4a67@t aK4a5d@t)) (let ((aK4a69@ls/false (aK30be@syntax-dispatch aK4a67@t '_))) (if aK4a69@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) aK4a69@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4a67@t))))))))) (set! aK4bef@aK318c@generate-temporaries aK318c@generate-temporaries) (set! aK318e@free-identifier=? (lambda (aK4a6b@x aK4a6c@y) (if (aK2eb7@id? aK4a6b@x) (if (aK2eb7@id? aK4a6c@y) (aK2ebd@free-id=? aK4a6b@x aK4a6c@y) (assertion-violation 'free-identifier=? '"not an identifier" aK4a6c@y)) (assertion-violation 'free-identifier=? '"not an identifier" aK4a6b@x)))) (set! aK4bf0@aK318e@free-identifier=? aK318e@free-identifier=?) (set! aK3190@bound-identifier=? (lambda (aK4a6f@x aK4a70@y) (if (aK2eb7@id? aK4a6f@x) (if (aK2eb7@id? aK4a70@y) (aK2ebb@bound-id=? aK4a6f@x aK4a70@y) (assertion-violation 'bound-identifier=? '"not an identifier" aK4a70@y)) (assertion-violation 'bound-identifier=? '"not an identifier" aK4a6f@x)))) (set! aK4bf1@aK3190@bound-identifier=? aK3190@bound-identifier=?) (set! aK3192@make-source-condition (lambda (aK4a73@x) (letrec* ((aK4a7d@aK4a78 (make-record-type-descriptor '&source-information &condition-rtd 'aK4a7b '#f '#f '#((immutable file-name) (immutable line)))) (aK4a7f@aK4a7a '#f) (aK4a81@aK4a79 (make-record-constructor-descriptor aK4a7d@aK4a78 &condition-rcd aK4a7f@aK4a7a)) (aK4a84@aK4a77 (record-predicate aK4a7d@aK4a78)) (aK4a86@make-source-condition (record-constructor aK4a81@aK4a79)) (aK4a88@aK4a75 (record-accessor aK4a7d@aK4a78 '0)) (aK4a8a@aK4a76 (record-accessor aK4a7d@aK4a78 '1)) (aK4a8c@source-condition? (condition-predicate aK4a7d@aK4a78)) (aK4a8e@source-filename (condition-accessor aK4a7d@aK4a78 aK4a88@aK4a75)) (aK4a90@source-character (condition-accessor aK4a7d@aK4a78 aK4a8a@aK4a76))) (if (and (pair? aK4a73@x) (pair? (cdr aK4a73@x))) (aK4a86@make-source-condition (car aK4a73@x) (cadr aK4a73@x)) (condition))))) (set! aK4bf2@aK3192@make-source-condition aK3192@make-source-condition) (set! aK3194@extract-position-condition (lambda (aK4a91@x) (aK3192@make-source-condition (aK3196@expression-position aK4a91@x)))) (set! aK4bf3@aK3194@extract-position-condition aK3194@extract-position-condition) (set! aK3196@expression-position (lambda (aK4a93@x) (and (aK2e83@stx? aK4a93@x) (let ((aK4a95@x (aK2e85@stx-expr aK4a93@x))) (and (aK29fb@aK28cd@annotation? aK4a95@x) (aK29fc@aK28cf@annotation-source aK4a95@x)))))) (set! aK4bf4@aK3196@expression-position aK3196@expression-position) (set! aK3198@assertion-error (lambda (aK4a97@expr aK4a98@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list aK4a97@expr)) (aK3192@make-source-condition aK4a98@pos))))) (set! aK4bf5@aK3198@assertion-error aK3198@assertion-error) (set! aK319a@syntax-error (lambda (aK4a9b@x . aK4a9d@args) (begin (if (not (for-all string? aK4a9d@args)) (assertion-violation 'syntax-error '"invalid argument" aK4a9d@args) (void)) (raise (condition (make-message-condition (if (null? aK4a9d@args) '"invalid syntax" (apply string-append aK4a9d@args))) (make-syntax-violation (aK31a4@syntax->datum aK4a9b@x) '#f) (aK3194@extract-position-condition aK4a9b@x)))))) (set! aK4bf6@aK319a@syntax-error aK319a@syntax-error) (set! aK319c@syntax-violation* (lambda (aK4a9f@who aK4aa0@msg aK4aa1@form aK4aa2@condition-object) (begin (if (not (string? aK4aa0@msg)) (assertion-violation 'syntax-violation '"message is not a string" aK4aa0@msg) (void)) (let ((aK4aa7@who (if (or (string? aK4a9f@who) (symbol? aK4a9f@who)) aK4a9f@who (if (not aK4a9f@who) (let ((aK4aa9@t aK4aa1@form)) (let ((aK4aab@ls/false (aK30be@syntax-dispatch aK4aa9@t 'any))) (if (and aK4aab@ls/false (apply (lambda (aK4aad@id) (aK2eb7@id? aK4aad@id)) aK4aab@ls/false)) (apply (lambda (aK4aaf@id) (aK31a4@syntax->datum aK4aaf@id)) aK4aab@ls/false) (let ((aK4ab1@t aK4aa9@t)) (let ((aK4ab3@ls/false (aK30be@syntax-dispatch aK4ab1@t '(any . any)))) (if (and aK4ab3@ls/false (apply (lambda (aK4ab5@id aK4ab6@rest) (aK2eb7@id? aK4ab5@id)) aK4ab3@ls/false)) (apply (lambda (aK4ab9@id aK4aba@rest) (aK31a4@syntax->datum aK4ab9@id)) aK4ab3@ls/false) (let ((aK4abd@t aK4ab1@t)) (let ((aK4abf@ls/false (aK30be@syntax-dispatch aK4abd@t '_))) (if aK4abf@ls/false (apply (lambda () '#f) aK4abf@ls/false) (aK319e@syntax-violation '#f '"invalid syntax" aK4abd@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" aK4a9f@who))))) (raise (condition (if aK4aa7@who (make-who-condition aK4aa7@who) (condition)) (make-message-condition aK4aa0@msg) aK4aa2@condition-object (aK3194@extract-position-condition aK4aa1@form))))))) (set! aK4bf7@aK319c@syntax-violation* aK319c@syntax-violation*) (set! aK319e@syntax-violation (lambda aK4acf (let ((aK4ad0 (length aK4acf))) (if (= aK4ad0 '3) (apply (lambda (aK4ac1@who aK4ac2@msg aK4ac3@form) (aK319e@syntax-violation aK4ac1@who aK4ac2@msg aK4ac3@form '#f)) aK4acf) (if (= aK4ad0 '4) (apply (lambda (aK4ac7@who aK4ac8@msg aK4ac9@form aK4aca@subform) (aK319c@syntax-violation* aK4ac7@who aK4ac8@msg aK4ac9@form (make-syntax-violation (aK31a4@syntax->datum aK4ac9@form) (aK31a4@syntax->datum aK4aca@subform)))) aK4acf) (error 'apply '"invalid arg count")))))) (set! aK4bf8@aK319e@syntax-violation aK319e@syntax-violation) (set! aK31a0@identifier? (lambda (aK4ad1@x) (aK2eb7@id? aK4ad1@x))) (set! aK4bf9@aK31a0@identifier? aK31a0@identifier?) (set! aK31a2@datum->syntax (lambda (aK4ad3@id aK4ad4@datum) (if (aK2eb7@id? aK4ad3@id) (aK2e97@datum->stx aK4ad3@id aK4ad4@datum) (assertion-violation 'datum->syntax '"not an identifier" aK4ad3@id)))) (set! aK4bfa@aK31a2@datum->syntax aK31a2@datum->syntax) (set! aK31a4@syntax->datum (lambda (aK4ad7@x) (aK2ecb@stx->datum aK4ad7@x))) (set! aK4bfb@aK31a4@syntax->datum aK31a4@syntax->datum) (set! aK31a6@ungensym-all (lambda (aK4ad9@code) (if (pair? aK4ad9@code) (cons (aK31a6@ungensym-all (car aK4ad9@code)) (aK31a6@ungensym-all (cdr aK4ad9@code))) (if (symbol? aK4ad9@code) (ungensym aK4ad9@code) aK4ad9@code)))) (set! aK4bfc@aK31a6@ungensym-all aK31a6@ungensym-all) (set! aK31a8@compile-r6rs-top-level (lambda (aK4adb@x*) (call-with-values (lambda () (aK3136@top-level-expander aK4adb@x*)) (lambda (aK4ae1@aK4ade aK4ae2@aK4ae0) (let ((aK4ae5@invoke-code aK4ae2@aK4ae0) (aK4ae6@lib* aK4ae1@aK4ade)) (lambda () (begin (for-each aK2cd3@aK2b21@invoke-library aK4ae6@lib*) (let ((aK4ae9@expanded (aK2a5d@aK2a15@expanded->core aK4ae5@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (aK31a6@ungensym-all aK4ae9@expanded)) (void)) (eval-core aK4ae9@expanded)))))))))) (set! aK4bfd@aK31a8@compile-r6rs-top-level aK31a8@compile-r6rs-top-level) (set! aK31aa@pre-compile-r6rs-top-level (lambda (aK4aeb@x*) (call-with-values (lambda () (aK3136@top-level-expander aK4aeb@x*)) (lambda (aK4af1@aK4aee aK4af2@aK4af0) (let ((aK4af5@invoke-code aK4af2@aK4af0) (aK4af6@lib* aK4af1@aK4aee)) (begin (for-each aK2cd3@aK2b21@invoke-library aK4af6@lib*) (aK2a05@aK28e1@compile-core (aK2a5d@aK2a15@expanded->core aK4af5@invoke-code)))))))) (set! aK4bfe@aK31aa@pre-compile-r6rs-top-level aK31aa@pre-compile-r6rs-top-level) (set! aK31ac@interaction-environment (let ((aK4af9@the-env '#f)) (lambda () (or aK4af9@the-env (let ((aK4afb@lib (aK2ccc@aK2b13@find-library-by-name '(mosh interaction))) (aK4afc@rib (aK2e6b@make-empty-rib))) (begin (let ((aK4aff@subst (aK2cae@aK2ad7@library-subst aK4afb@lib))) (begin (aK2e57@set-rib-sym*! aK4afc@rib (map car aK4aff@subst)) (aK2e5b@set-rib-mark**! aK4afc@rib (map (lambda (aK4b01@x) aK2e3b@top-mark*) aK4aff@subst)) (aK2e5f@set-rib-label*! aK4afc@rib (map cdr aK4aff@subst)))) (let ((aK4b03@env (make-simple-struct 'interaction-env '4 (list aK4afc@rib '() '())))) (begin (set! aK4af9@the-env aK4b03@env) aK4b03@env)))))))) (set! aK4bff@aK31ac@interaction-environment aK31ac@interaction-environment) (set! aK31ae@top-level-context (aK2a07@aK28e5@make-parameter '#f)) (set! aK4c00@aK31ae@top-level-context aK31ae@top-level-context) (aK2cc9@aK2b0d@current-library-expander aK3180@library-expander))
(begin (begin (aK2a5a@aK2a0f@current-primitive-locations (lambda (aK5151@x) (let ((aK5153@t (assq aK5151@x '((syntax-error . aK4bf6@aK319a@syntax-error) (syntax-dispatch . aK4b94@aK30be@syntax-dispatch) (load . aK4d80@aK4c27@load) (interaction-environment . aK4bff@aK31ac@interaction-environment) (library-path . aK2cc1@aK2afd@library-path) (mosh-cache-dir . aK2a08@aK28e7@mosh-cache-dir) (make-parameter . aK2a07@aK28e5@make-parameter) (make-variable-transformer . aK4b51@aK2ee9@make-variable-transformer) (identifier? . aK4bf9@aK31a0@identifier?) (generate-temporaries . aK4bef@aK318c@generate-temporaries) (free-identifier=? . aK4bf0@aK318e@free-identifier=?) (syntax->datum . aK4bfb@aK31a4@syntax->datum) (datum->syntax . aK4bfa@aK31a2@datum->syntax) (bound-identifier=? . aK4bf1@aK3190@bound-identifier=?) (scheme-report-environment . aK4be6@aK317a@scheme-report-environment) (null-environment . aK4be5@aK3178@null-environment) (command-line . aK4d7d@aK4c21@command-line) (eval . aK4be8@aK317e@eval) (environment . aK4be4@aK3176@environment) (syntax-violation . aK4bf8@aK319e@syntax-violation) (assertion-error . aK4bf5@aK3198@assertion-error))))) (if aK5153@t (cdr aK5153@t) '#f)))) (aK2cd1@aK2b1d@install-library 'aK512e '(mosh interaction) '() '() '() '() '((regexp? . aK50ee) (alist->eq-hash-table . aK50ea) (format . aK50e7) (string-split . aK50da) (call-process . aK50d4) (set-current-directory! . aK50d0) (expand-path . aK50cf) (current-directory . aK50ce) (%spawn . aK50cd) (%waitpid . aK50cc) (simple-struct-name . aK50cb) (simple-struct-set! . aK50ca) (simple-struct-ref . aK50c9) (make-simple-struct . aK50c8) (simple-struct? . aK50c7) (pointer-ref-c-int64 . aK50c6) (pointer-ref-c-int32 . aK50c5) (pointer-ref-c-int16 . aK50c4) (pointer-ref-c-int8 . aK50c3) (pointer-ref-c-uint64 . aK50c2) (pointer-ref-c-uint32 . aK50c1) (pointer-ref-c-uint16 . aK50c0) (pointer-ref-c-uint8 . aK50bf) (pointer-set-c-uint64! . aK50be) (pointer-set-c-uint32! . aK50bd) (pointer-set-c-uint16! . aK50bc) (pointer-set-c-uint8! . aK50bb) (pointer-set-c-int64! . aK50ba) (pointer-set-c-int32! . aK50b9) (pointer-set-c-int16! . aK50b8) (pointer-set-c-int8! . aK50b7) (pointer-set-c-pointer! . aK50b6) (pointer-set-c-double! . aK50b5) (pointer-set-c-float! . aK50b4) (pointer-set-c-long-long! . aK50b3) (pointer-set-c-long! . aK50b2) (pointer-set-c-int! . aK50b1) (pointer-set-c-short! . aK50b0) (pointer-set-c-char! . aK50af) (pointer-ref-c-pointer . aK50ae) (pointer-ref-c-double . aK50ad) (pointer-ref-c-float . aK50ac) (pointer-ref-c-unsigned-long-long . aK50ab) (pointer-ref-c-signed-long-long . aK50aa) (pointer-ref-c-unsigned-long . aK50a9) (pointer-ref-c-signed-long . aK50a8) (pointer-ref-c-unsigned-int . aK50a7) (pointer-ref-c-signed-int . aK50a6) (pointer-ref-c-unsigned-short . aK50a5) (pointer-ref-c-signed-short . aK50a4) (pointer-ref-c-unsigned-char . aK50a3) (pointer-ref-c-signed-char . aK50a2) (pointer->integer . aK50a1) (integer->pointer . aK50a0) (pointer? . aK509f) (shared-errno . aK509e) (%ffi-supported? . aK5099) (%ffi-pointer->string . aK5098) (%ffi-call . aK5097) (%ffi-lookup . aK5096) (%ffi-open . aK5095) (null-terminated-utf8->string . aK5094) (null-terminated-bytevector->string . aK5093) (%exec . aK5092) (%fork . aK5091) (%pipe . aK5090) (p . aK508f) (whereis . aK5073) (register . aK5072) (vm-join! . aK5071) (vm-set-value! . aK5070) (vm? . aK506f) (main-vm? . aK506e) (vm-eval . aK506d) (vm-self . aK506c) (vm-start! . aK506b) (make-vm . aK506a) (mutex-try-lock! . aK5069) (mutex-unlock! . aK5068) (mutex-lock! . aK5067) (mutex? . aK5066) (make-mutex . aK5065) (condition-variable-notify-all! . aK5064) (condition-variable-notify! . aK5063) (condition-variable-wait! . aK5062) (make-condition-variable . aK5061) (write/ss . aK5060) (string-upcase . aK5048) (string-titlecase . aK5047) (string-normalize-nfkd . aK5046) (string-normalize-nfkc . aK5045) (string-normalize-nfd . aK5044) (string-normalize-nfc . aK5043) (string-foldcase . aK5042) (string-downcase . aK5041) (string-ci>? . aK5040) (string-ci>=? . aK503f) (string-ci=? . aK503e) (string-ci<? . aK503d) (string-ci<=? . aK503c) (char-whitespace? . aK503b) (char-upper-case? . aK503a) (char-title-case? . aK5039) (char-numeric? . aK5038) (char-lower-case? . aK5037) (char-general-category . aK5036) (char-upcase . aK5035) (char-titlecase . aK5034) (char-foldcase . aK5033) (char-downcase . aK5032) (char-ci>? . aK5031) (char-ci>=? . aK5030) (char-ci=? . aK502f) (char-ci<? . aK502e) (char-ci<=? . aK502d) (char-alphabetic? . aK502c) (make-variable-transformer . aK2ee8) (identifier? . aK319f) (generate-temporaries . aK318b) (free-identifier=? . aK318d) (syntax->datum . aK31a3) (datum->syntax . aK31a1) (bound-identifier=? . aK318f) (record-type-descriptor? . aK502b) (record-predicate . aK502a) (record-mutator . aK5029) (record-constructor . aK5028) (record-accessor . aK5027) (make-record-type-descriptor . aK5026) (make-record-constructor-descriptor . aK5025) (record? . aK5024) (record-type-uid . aK5023) (record-type-sealed? . aK5022) (record-type-parent . aK5021) (record-type-opaque? . aK5020) (record-type-name . aK501f) (record-type-generative? . aK501e) (record-type-field-names . aK501d) (record-rtd . aK501c) (record-field-mutable? . aK501b) (delete-file . aK501a) (file-exists? . aK5019) (vector-sort! . aK5018) (vector-sort . aK5017) (list-sort . aK5016) (symbol-hash . aK5015) (string-ci-hash . aK5014) (string-hash . aK5013) (equal-hash . aK5012) (hashtable-equivalence-function . aK5011) (make-hashtable . aK5010) (hashtable-hash-function . aK500f) (make-eqv-hashtable . aK500e) (make-eq-hashtable . aK500d) (hashtable? . aK500c) (hashtable-update! . aK500b) (hashtable-size . aK500a) (hashtable-set! . aK5009) (hashtable-ref . aK5008) (hashtable-mutable? . aK5007) (hashtable-keys . aK5006) (hashtable-entries . aK5005) (hashtable-delete! . aK5004) (hashtable-copy . aK5003) (hashtable-contains? . aK5002) (hashtable-clear! . aK5001) (call-with-output-file . aK5000) (call-with-input-file . aK4fff) (write-char . aK4ffe) (write . aK4ffd) (with-output-to-file . aK4ffc) (with-input-from-file . aK4ffb) (read-char . aK4ffa) (read . aK4ff9) (peek-char . aK4ff8) (open-output-file . aK4ff7) (open-input-file . aK4ff6) (newline . aK4ff5) (display . aK4ff4) (close-output-port . aK4ff3) (close-input-port . aK4ff2) (eof-object? . aK4ff1) (eof-object . aK4ff0) (current-error-port . aK4fef) (current-output-port . aK4fee) (current-input-port . aK4fed) (output-port? . aK4fec) (input-port? . aK4feb) (utf-8-codec . aK4fea) (utf-16-codec . aK4fe9) (transcoder-error-handling-mode . aK4fe8) (transcoder-eol-style . aK4fe7) (transcoder-codec . aK4fe6) (transcoded-port . aK4fe5) (textual-port? . aK4fe4) (string->bytevector . aK4fe3) (standard-output-port . aK4fe2) (standard-input-port . aK4fe1) (standard-error-port . aK4fe0) (set-port-position! . aK4fdf) (put-u8 . aK4fde) (put-string . aK4fdd) (put-datum . aK4fdc) (put-char . aK4fdb) (put-bytevector . aK4fda) (port? . aK4fd9) (port-transcoder . aK4fd8) (port-position . aK4fd7) (port-has-set-port-position!? . aK4fd6) (port-has-port-position? . aK4fd5) (port-eof? . aK4fd4) (output-port-buffer-mode . aK4fd3) (open-string-output-port . aK4fd2) (open-string-input-port . aK4fd1) (open-file-output-port . aK4fd0) (open-file-input/output-port . aK4fcf) (open-file-input-port . aK4fce) (open-bytevector-output-port . aK4fcd) (open-bytevector-input-port . aK4fcc) (native-transcoder . aK4fcb) (native-eol-style . aK4fca) (make-transcoder . aK4fc9) (latin-1-codec . aK4fc8) (make-i/o-write-error . aK4fc7) (make-i/o-read-error . aK4fc6) (make-i/o-port-error . aK4fc5) (make-i/o-invalid-position-error . aK4fc4) (make-i/o-filename-error . aK4fc3) (make-i/o-file-protection-error . aK4fc2) (make-i/o-file-is-read-only-error . aK4fc1) (make-i/o-file-does-not-exist-error . aK4fc0) (make-i/o-file-already-exists-error . aK4fbf) (make-i/o-error . aK4fbe) (make-i/o-encoding-error . aK4fbd) (make-i/o-decoding-error . aK4fbc) (make-custom-textual-output-port . aK4fbb) (make-custom-textual-input/output-port . aK4fba) (make-custom-textual-input-port . aK4fb9) (make-custom-binary-output-port . aK4fb8) (make-custom-binary-input/output-port . aK4fb7) (make-custom-binary-input-port . aK4fb6) (make-bytevector . aK4fb5) (lookahead-u8 . aK4fb4) (lookahead-char . aK4fb3) (i/o-write-error? . aK4fb2) (i/o-read-error? . aK4fb1) (i/o-port-error? . aK4fb0) (i/o-invalid-position-error? . aK4faf) (i/o-filename-error? . aK4fae) (i/o-file-protection-error? . aK4fad) (i/o-file-is-read-only-error? . aK4fac) (i/o-file-does-not-exist-error? . aK4fab) (i/o-file-already-exists-error? . aK4faa) (i/o-error? . aK4fa9) (i/o-error-position . aK4fa8) (i/o-error-port . aK4fa7) (i/o-error-filename . aK4fa6) (i/o-encoding-error? . aK4fa5) (i/o-encoding-error-char . aK4fa4) (i/o-decoding-error? . aK4fa3) (get-u8 . aK4fa2) (get-string-n! . aK4fa1) (get-string-n . aK4fa0) (get-string-all . aK4f9f) (get-line . aK4f9e) (get-datum . aK4f9d) (get-char . aK4f9c) (get-bytevector-some . aK4f9b) (get-bytevector-n! . aK4f9a) (get-bytevector-n . aK4f99) (get-bytevector-all . aK4f98) (flush-output-port . aK4f97) (close-port . aK4f96) (exit . aK4f8e) (command-line . aK4c20) (string-fill! . aK4f8d) (string-set! . aK4f8c) (set-cdr! . aK4f8b) (set-car! . aK4f8a) (remove . aK4f89) (remv . aK4f88) (remp . aK4f87) (remq . aK4f86) (partition . aK4f85) (memv . aK4f84) (memq . aK4f83) (memp . aK4f82) (member . aK4f81) (exists . aK4f80) (for-all . aK4f7f) (fold-right . aK4f7e) (fold-left . aK4f7d) (find . aK4f7c) (filter . aK4f7b) (cons* . aK4f7a) (assv . aK4f79) (assq . aK4f78) (assp . aK4f77) (assoc . aK4f76) (call-with-string-output-port . aK4f75) (call-with-port . aK4f74) (call-with-bytevector-output-port . aK4f73) (bytevector->string . aK4f72) (buffer-mode? . aK4f71) (binary-port? . aK4f70) (with-exception-handler . aK4f6f) (raise-continuable . aK4f6e) (raise . aK4f6d) (eval . aK317d) (environment . aK3175) (make-enumeration . aK4f6c) (enum-set=? . aK4f6b) (enum-set-universe . aK4f6a) (enum-set-union . aK4f69) (enum-set-subset? . aK4f68) (enum-set-projection . aK4f67) (enum-set-member? . aK4f66) (enum-set-intersection . aK4f65) (enum-set-indexer . aK4f64) (enum-set-difference . aK4f63) (enum-set-constructor . aK4f62) (enum-set-complement . aK4f61) (enum-set->list . aK4f60) (who-condition? . aK4f5f) (warning? . aK4f5e) (violation? . aK4f5d) (undefined-violation? . aK4f5c) (syntax-violation? . aK4f5b) (syntax-violation-subform . aK4f5a) (syntax-violation-form . aK4f59) (syntax-violation . aK319d) (simple-conditions . aK4f58) (serious-condition? . aK4f57) (non-continuable-violation? . aK4f56) (message-condition? . aK4f55) (make-who-condition . aK4f54) (make-warning . aK4f53) (make-violation . aK4f52) (make-undefined-violation . aK4f51) (make-syntax-violation . aK4f50) (make-serious-condition . aK4f4f) (make-non-continuable-violation . aK4f4e) (make-message-condition . aK4f4d) (make-lexical-violation . aK4f4c) (make-irritants-condition . aK4f4b) (make-implementation-restriction-violation . aK4f4a) (make-error . aK4f49) (make-assertion-violation . aK4f48) (lexical-violation? . aK4f47) (irritants-condition? . aK4f46) (implementation-restriction-violation? . aK4f45) (error? . aK4f44) (condition-who . aK4f43) (condition-predicate . aK4f42) (condition-message . aK4f41) (condition-irritants . aK4f40) (condition-accessor . aK4f3f) (condition . aK4f3e) (assertion-violation? . aK4f3d) (condition? . aK4f3c) (utf32->string . aK4f3b) (utf16->string . aK4f3a) (utf8->string . aK4f39) (uint-list->bytevector . aK4f38) (u8-list->bytevector . aK4f37) (string->utf8 . aK4f36) (string->utf32 . aK4f35) (string->utf16 . aK4f34) (sint-list->bytevector . aK4f33) (native-endianness . aK4f32) (bytevector? . aK4f31) (bytevector=? . aK4f30) (bytevector-uint-set! . aK4f2f) (bytevector-uint-ref . aK4f2e) (bytevector-u8-set! . aK4f2d) (bytevector-u8-ref . aK4f2c) (bytevector-u64-set! . aK4f2b) (bytevector-u64-ref . aK4f2a) (bytevector-u64-native-set! . aK4f29) (bytevector-u64-native-ref . aK4f28) (bytevector-u32-set! . aK4f27) (bytevector-u32-ref . aK4f26) (bytevector-u32-native-set! . aK4f25) (bytevector-u32-native-ref . aK4f24) (bytevector-u16-set! . aK4f23) (bytevector-u16-ref . aK4f22) (bytevector-u16-native-set! . aK4f21) (bytevector-u16-native-ref . aK4f20) (bytevector-sint-set! . aK4f1f) (bytevector-sint-ref . aK4f1e) (bytevector-s8-set! . aK4f1d) (bytevector-s8-ref . aK4f1c) (bytevector-s64-set! . aK4f1b) (bytevector-s64-ref . aK4f1a) (bytevector-s64-native-set! . aK4f19) (bytevector-s64-native-ref . aK4f18) (bytevector-s32-set! . aK4f17) (bytevector-s32-ref . aK4f16) (bytevector-s32-native-set! . aK4f15) (bytevector-s32-native-ref . aK4f14) (bytevector-s16-set! . aK4f13) (bytevector-s16-ref . aK4f12) (bytevector-s16-native-set! . aK4f11) (bytevector-s16-native-ref . aK4f10) (bytevector-length . aK4f0f) (bytevector-ieee-single-ref . aK4f0e) (bytevector-ieee-single-set! . aK4f0d) (bytevector-ieee-single-native-set! . aK4f0c) (bytevector-ieee-single-native-ref . aK4f0b) (bytevector-ieee-double-set! . aK4f0a) (bytevector-ieee-double-ref . aK4f09) (bytevector-ieee-double-native-set! . aK4f08) (bytevector-ieee-double-native-ref . aK4f07) (bytevector-fill! . aK4f06) (bytevector-copy! . aK4f05) (bytevector-copy . aK4f04) (bytevector->uint-list . aK4f03) (bytevector->u8-list . aK4f02) (bytevector->sint-list . aK4f01) (no-nans-violation? . aK4f00) (no-infinities-violation? . aK4eff) (make-no-nans-violation . aK4efe) (make-no-infinities-violation . aK4efd) (real->flonum . aK4efc) (flzero? . aK4efb) (fltruncate . aK4efa) (fltan . aK4ef9) (flsqrt . aK4ef8) (flsin . aK4ef7) (flround . aK4ef6) (flpositive? . aK4ef5) (flonum? . aK4ef4) (flodd? . aK4ef3) (flnumerator . aK4ef2) (flnegative? . aK4ef1) (flnan? . aK4ef0) (flmod0 . aK4eef) (flmod . aK4eee) (flmin . aK4eed) (flmax . aK4eec) (fllog . aK4eeb) (flinteger? . aK4eea) (flinfinite? . aK4ee9) (flfloor . aK4ee8) (flfinite? . aK4ee7) (flexpt . aK4ee6) (flexp . aK4ee5) (fleven? . aK4ee4) (fldiv0-and-mod0 . aK4ee3) (fldiv0 . aK4ee2) (fldiv-and-mod . aK4ee1) (fldiv . aK4ee0) (fldenominator . aK4edf) (flcos . aK4ede) (flceiling . aK4edd) (flatan . aK4edc) (flasin . aK4edb) (flacos . aK4eda) (flabs . aK4ed9) (fl>? . aK4ed8) (fl>=? . aK4ed7) (fl=? . aK4ed6) (fl<? . aK4ed5) (fl<=? . aK4ed4) (fl/ . aK4ed3) (fl- . aK4ed2) (fl+ . aK4ed1) (fl* . aK4ed0) (fixnum->flonum . aK4ecf) (fxzero? . aK4ece) (fxxor . aK4ecd) (fxrotate-bit-field . aK4ecc) (fxreverse-bit-field . aK4ecb) (fxpositive? . aK4eca) (fxodd? . aK4ec9) (fxnot . aK4ec8) (fxnegative? . aK4ec7) (fxmod0 . aK4ec6) (fxmod . aK4ec5) (fxmin . aK4ec4) (fxmax . aK4ec3) (fxlength . aK4ec2) (fxior . aK4ec1) (fxif . aK4ec0) (fxfirst-bit-set . aK4ebf) (fxeven? . aK4ebe) (fxdiv0-and-mod0 . aK4ebd) (fxdiv0 . aK4ebc) (fxdiv-and-mod . aK4ebb) (fxdiv . aK4eba) (fxcopy-bit-field . aK4eb9) (fxcopy-bit . aK4eb8) (fxbit-set? . aK4eb7) (fxbit-field . aK4eb6) (fxbit-count . aK4eb5) (fxarithmetic-shift-right . aK4eb4) (fxarithmetic-shift-left . aK4eb3) (fxarithmetic-shift . aK4eb2) (fxand . aK4eb1) (fx>? . aK4eb0) (fx>=? . aK4eaf) (fx=? . aK4eae) (fx<? . aK4ead) (fx<=? . aK4eac) (fx-/carry . aK4eab) (fx- . aK4eaa) (fx+/carry . aK4ea9) (fx+ . aK4ea8) (fx*/carry . aK4ea7) (fx* . aK4ea6) (greatest-fixnum . aK4ea5) (least-fixnum . aK4ea4) (fixnum-width . aK4ea3) (fixnum? . aK4ea2) (bitwise-rotate-bit-field . aK4ea1) (bitwise-reverse-bit-field . aK4ea0) (bitwise-length . aK4e9f) (bitwise-if . aK4e9e) (bitwise-first-bit-set . aK4e9d) (bitwise-copy-bit-field . aK4e9c) (bitwise-copy-bit . aK4e9b) (bitwise-bit-set? . aK4e9a) (bitwise-bit-field . aK4e99) (bitwise-bit-count . aK4e98) (bitwise-xor . aK4e97) (bitwise-ior . aK4e96) (bitwise-and . aK4e95) (bitwise-not . aK4e94) (bitwise-arithmetic-shift-right . aK4e93) (bitwise-arithmetic-shift-left . aK4e92) (bitwise-arithmetic-shift . aK4e91) (zero? . aK4e90) (vector? . aK4e8f) (vector-set! . aK4e8e) (vector-ref . aK4e8d) (vector-map . aK4e8c) (vector-length . aK4e8b) (vector-for-each . aK4e8a) (vector-fill! . aK4e89) (vector->list . aK4e88) (vector . aK4e87) (values . aK4e86) (truncate . aK4e85) (tan . aK4e84) (symbol? . aK4e83) (symbol=? . aK4e82) (symbol->string . aK4e81) (substring . aK4e80) (string? . aK4e7f) (string>? . aK4e7e) (string>=? . aK4e7d) (string=? . aK4e7c) (string<? . aK4e7b) (string<=? . aK4e7a) (string-ref . aK4e79) (string-length . aK4e78) (string-for-each . aK4e77) (string-copy . aK4e76) (string-append . aK4e75) (string->symbol . aK4e74) (string->number . aK4e73) (string->list . aK4e72) (string . aK4e71) (sqrt . aK4e70) (sin . aK4e6f) (round . aK4e6e) (reverse . aK4e6d) (real? . aK4e6c) (real-valued? . aK4e6b) (real-part . aK4e6a) (rationalize . aK4e69) (rational? . aK4e68) (rational-valued? . aK4e67) (procedure? . aK4e66) (positive? . aK4e65) (pair? . aK4e64) (odd? . aK4e63) (numerator . aK4e62) (number? . aK4e61) (number->string . aK4e60) (null? . aK4e5f) (not . aK4e5e) (negative? . aK4e5d) (nan? . aK4e5c) (min . aK4e5b) (max . aK4e5a) (map . aK4e59) (make-vector . aK4e58) (make-string . aK4e57) (make-rectangular . aK4e56) (make-polar . aK4e55) (magnitude . aK4e54) (log . aK4e53) (list? . aK4e52) (list-tail . aK4e51) (list-ref . aK4e50) (list->vector . aK4e4f) (list->string . aK4e4e) (list . aK4e4d) (length . aK4e4c) (lcm . aK4e4b) (integer? . aK4e4a) (integer-valued? . aK4e49) (integer->char . aK4e48) (infinite? . aK4e47) (inexact? . aK4e46) (inexact . aK4e45) (imag-part . aK4e44) (gcd . aK4e43) (for-each . aK4e42) (floor . aK4e41) (finite? . aK4e40) (expt . aK4e3f) (exp . aK4e3e) (exact? . aK4e3d) (exact-integer-sqrt . aK4e3c) (exact . aK4e3b) (even? . aK4e3a) (error . aK4e39) (eqv? . aK4e38) (equal? . aK4e37) (eq? . aK4e36) (dynamic-wind . aK4e35) (div0-and-mod0 . aK4e34) (mod0 . aK4e33) (div0 . aK4e32) (div-and-mod . aK4e31) (mod . aK4e30) (div . aK4e2f) (denominator . aK4e2e) (cos . aK4e2d) (cons . aK4e2c) (complex? . aK4e2b) (char? . aK4e2a) (char>? . aK4e29) (char>=? . aK4e28) (char=? . aK4e27) (char<? . aK4e26) (char<=? . aK4e25) (char->integer . aK4e24) (ceiling . aK4e23) (call-with-values . aK4e22) (call/cc . aK4e21) (call-with-current-continuation . aK4e20) (cddddr . aK4e1f) (cdddar . aK4e1e) (cddadr . aK4e1d) (cddaar . aK4e1c) (cdaddr . aK4e1b) (cdadar . aK4e1a) (cdaadr . aK4e19) (cdaaar . aK4e18) (cadddr . aK4e17) (caddar . aK4e16) (cadadr . aK4e15) (cadaar . aK4e14) (caaddr . aK4e13) (caadar . aK4e12) (caaadr . aK4e11) (caaaar . aK4e10) (cdddr . aK4e0f) (cddar . aK4e0e) (cdadr . aK4e0d) (cdaar . aK4e0c) (caddr . aK4e0b) (cadar . aK4e0a) (caadr . aK4e09) (caaar . aK4e08) (cddr . aK4e07) (cdar . aK4e06) (cadr . aK4e05) (caar . aK4e04) (cdr . aK4e03) (car . aK4e02) (boolean? . aK4e01) (boolean=? . aK4e00) (atan . aK4dff) (assertion-violation . aK4dfe) (asin . aK4dfd) (apply . aK4dfc) (append . aK4dfb) (angle . aK4dfa) (acos . aK4df9) (abs . aK4df8) (/ . aK4df7) (* . aK4df6) (- . aK4df5) (+ . aK4df4) (>= . aK4df3) (> . aK4df2) (= . aK4df1) (<= . aK4df0) (< . aK4def) (library . aK4dee) (&no-nans . aK4ded) (&no-infinities . aK4dec) (&i/o-encoding . aK4deb) (&i/o-decoding . aK4dea) (&i/o-port . aK4de9) (&i/o-file-does-not-exist . aK4de8) (&i/o-file-already-exists . aK4de7) (&i/o-file-is-read-only . aK4de6) (&i/o-file-protection . aK4de5) (&i/o-filename . aK4de4) (&i/o-invalid-position . aK4de3) (&i/o-write . aK4de2) (&i/o-read . aK4de1) (&i/o . aK4de0) (&undefined . aK4ddf) (&syntax . aK4dde) (&lexical . aK4ddd) (&implementation-restriction . aK4ddc) (&non-continuable . aK4ddb) (&who . aK4dda) (&irritants . aK4dd9) (&assertion . aK4dd8) (&violation . aK4dd7) (&error . aK4dd6) (&serious . aK4dd5) (&warning . aK4dd4) (&message . aK4dd3) (&condition . aK4dd2) (define-condition-type . aK4dd1) (define-enumeration . aK4dd0) (define-record-type . aK4dcf) (parent-rtd . aK4dce) (nongenerative . aK4dcd) (opaque . aK4dcc) (sealed . aK4dcb) (protocol . aK4dca) (parent . aK4dc9) (immutable . aK4dc8) (mutable . aK4dc7) (fields . aK4dc6) (error-handling-mode . aK4dc5) (file-options . aK4dc4) (buffer-mode . aK4dc3) (eol-style . aK4dc2) (guard . aK4dc1) (unsyntax-splicing . aK4dbe) (unsyntax . aK4dbd) (unquote-splicing . aK4dbc) (unquote . aK4dbb) (_ . aK4dba) (else . aK4db9) (=> . aK4db8) (... . aK4db7) (assert . aK4db6) (endianness . aK4db5) (time . aK4db3) (do . aK4db2) (cond . aK4db1) (let* . aK4db0) (let*-values . aK4daf) (let-values . aK4dae) (identifier-syntax . aK4dad) (with-syntax . aK4dac) (quasisyntax . aK4dab) (quasiquote . aK4daa) (syntax-rules . aK4da9) (include . aK4da8) (record-constructor-descriptor . aK4da6) (record-type-descriptor . aK4da5) (case . aK4da4) (unless . aK4da2) (when . aK4da1) (or . aK4da0) (and . aK4d9f) (if . aK4d9e) (let . aK4d9d) (letrec* . aK4d9c) (letrec . aK4d9b) (case-lambda . aK4d99) (lambda . aK4d98) (syntax . aK4d97) (syntax-case . aK4d96) (quote . aK4d95) (letrec-syntax . aK4d93) (let-syntax . aK4d92) (set! . aK4d91) (import . aK4d90) (begin . aK4d8f) (define-syntax . aK4d8d) (define . aK4d8c)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK512f '(psyntax null-environment-5) '() '() '() '() '((make-promise . aK4f8f) (unquote-splicing . aK4dbc) (unquote . aK4dbb) (_ . aK4dba) (else . aK4db9) (=> . aK4db8) (... . aK4db7) (delay . aK4db4) (do . aK4db2) (cond . aK4db1) (let* . aK4db0) (quasiquote . aK4daa) (syntax-rules . aK4da9) (case . aK4da4) (or . aK4da0) (and . aK4d9f) (if . aK4d9e) (let . aK4d9d) (letrec . aK4d9b) (lambda . aK4d98) (quote . aK4d95) (letrec-syntax . aK4d93) (let-syntax . aK4d92) (set! . aK4d91) (begin . aK4d8f) (define-syntax . aK4d8d) (define . aK4d8c)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5130 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . aK5040) (string-ci>=? . aK503f) (string-ci=? . aK503e) (string-ci<? . aK503d) (string-ci<=? . aK503c) (char-whitespace? . aK503b) (char-upper-case? . aK503a) (char-numeric? . aK5038) (char-lower-case? . aK5037) (char-upcase . aK5035) (char-downcase . aK5032) (char-ci>? . aK5031) (char-ci>=? . aK5030) (char-ci=? . aK502f) (char-ci<? . aK502e) (char-ci<=? . aK502d) (char-alphabetic? . aK502c) (call-with-output-file . aK5000) (call-with-input-file . aK4fff) (write-char . aK4ffe) (write . aK4ffd) (with-output-to-file . aK4ffc) (with-input-from-file . aK4ffb) (read-char . aK4ffa) (read . aK4ff9) (peek-char . aK4ff8) (open-output-file . aK4ff7) (open-input-file . aK4ff6) (newline . aK4ff5) (display . aK4ff4) (close-output-port . aK4ff3) (close-input-port . aK4ff2) (eof-object . aK4ff0) (current-output-port . aK4fee) (current-input-port . aK4fed) (output-port? . aK4fec) (input-port? . aK4feb) (scheme-report-environment . aK3179) (quotient . aK4f95) (null-environment . aK3177) (remainder . aK4f94) (modulo . aK4f93) (inexact->exact . aK4f92) (force . aK4f91) (exact->inexact . aK4f90) (make-promise . aK4f8f) (string-fill! . aK4f8d) (string-set! . aK4f8c) (set-cdr! . aK4f8b) (set-car! . aK4f8a) (memv . aK4f84) (memq . aK4f83) (member . aK4f81) (assv . aK4f79) (assq . aK4f78) (assoc . aK4f76) (eval . aK317d) (zero? . aK4e90) (vector? . aK4e8f) (vector-set! . aK4e8e) (vector-ref . aK4e8d) (vector-length . aK4e8b) (vector-fill! . aK4e89) (vector->list . aK4e88) (vector . aK4e87) (values . aK4e86) (truncate . aK4e85) (tan . aK4e84) (symbol? . aK4e83) (symbol->string . aK4e81) (substring . aK4e80) (string? . aK4e7f) (string>? . aK4e7e) (string>=? . aK4e7d) (string=? . aK4e7c) (string<? . aK4e7b) (string<=? . aK4e7a) (string-ref . aK4e79) (string-length . aK4e78) (string-copy . aK4e76) (string-append . aK4e75) (string->symbol . aK4e74) (string->number . aK4e73) (string->list . aK4e72) (string . aK4e71) (sqrt . aK4e70) (sin . aK4e6f) (round . aK4e6e) (reverse . aK4e6d) (real? . aK4e6c) (real-part . aK4e6a) (rationalize . aK4e69) (rational? . aK4e68) (procedure? . aK4e66) (positive? . aK4e65) (pair? . aK4e64) (odd? . aK4e63) (numerator . aK4e62) (number? . aK4e61) (number->string . aK4e60) (not . aK4e5e) (negative? . aK4e5d) (min . aK4e5b) (max . aK4e5a) (map . aK4e59) (make-vector . aK4e58) (make-string . aK4e57) (make-rectangular . aK4e56) (make-polar . aK4e55) (magnitude . aK4e54) (log . aK4e53) (list? . aK4e52) (list-tail . aK4e51) (list-ref . aK4e50) (list->vector . aK4e4f) (list->string . aK4e4e) (list . aK4e4d) (length . aK4e4c) (lcm . aK4e4b) (integer? . aK4e4a) (integer->char . aK4e48) (inexact? . aK4e46) (imag-part . aK4e44) (gcd . aK4e43) (for-each . aK4e42) (floor . aK4e41) (expt . aK4e3f) (exp . aK4e3e) (exact? . aK4e3d) (even? . aK4e3a) (eqv? . aK4e38) (equal? . aK4e37) (eq? . aK4e36) (dynamic-wind . aK4e35) (denominator . aK4e2e) (cos . aK4e2d) (cons . aK4e2c) (complex? . aK4e2b) (char? . aK4e2a) (char>? . aK4e29) (char>=? . aK4e28) (char=? . aK4e27) (char<? . aK4e26) (char<=? . aK4e25) (char->integer . aK4e24) (ceiling . aK4e23) (call-with-values . aK4e22) (call-with-current-continuation . aK4e20) (cddddr . aK4e1f) (cdddar . aK4e1e) (cddadr . aK4e1d) (cddaar . aK4e1c) (cdaddr . aK4e1b) (cdadar . aK4e1a) (cdaadr . aK4e19) (cdaaar . aK4e18) (cadddr . aK4e17) (caddar . aK4e16) (cadadr . aK4e15) (cadaar . aK4e14) (caaddr . aK4e13) (caadar . aK4e12) (caaadr . aK4e11) (caaaar . aK4e10) (cdddr . aK4e0f) (cddar . aK4e0e) (cdadr . aK4e0d) (cdaar . aK4e0c) (caddr . aK4e0b) (cadar . aK4e0a) (caadr . aK4e09) (caaar . aK4e08) (cddr . aK4e07) (cdar . aK4e06) (cadr . aK4e05) (caar . aK4e04) (cdr . aK4e03) (car . aK4e02) (boolean? . aK4e01) (atan . aK4dff) (asin . aK4dfd) (apply . aK4dfc) (append . aK4dfb) (angle . aK4dfa) (acos . aK4df9) (abs . aK4df8) (/ . aK4df7) (* . aK4df6) (- . aK4df5) (+ . aK4df4) (>= . aK4df3) (> . aK4df2) (= . aK4df1) (<= . aK4df0) (< . aK4def) (unquote-splicing . aK4dbc) (unquote . aK4dbb) (else . aK4db9) (=> . aK4db8) (... . aK4db7) (delay . aK4db4) (do . aK4db2) (cond . aK4db1) (let* . aK4db0) (quasiquote . aK4daa) (syntax-rules . aK4da9) (case . aK4da4) (or . aK4da0) (and . aK4d9f) (if . aK4d9e) (let . aK4d9d) (letrec . aK4d9b) (lambda . aK4d98) (quote . aK4d95) (letrec-syntax . aK4d93) (let-syntax . aK4d92) (set! . aK4d91) (begin . aK4d8f) (define-syntax . aK4d8d) (define . aK4d8c)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5131 '(psyntax modules) '() '() '() '() '((module . aK4d8e)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5132 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5133 '(rnrs) '(6) '() '() '() '((regexp? . aK50ee) (string-upcase . aK5048) (string-titlecase . aK5047) (string-normalize-nfkd . aK5046) (string-normalize-nfkc . aK5045) (string-normalize-nfd . aK5044) (string-normalize-nfc . aK5043) (string-foldcase . aK5042) (string-downcase . aK5041) (string-ci>? . aK5040) (string-ci>=? . aK503f) (string-ci=? . aK503e) (string-ci<? . aK503d) (string-ci<=? . aK503c) (char-whitespace? . aK503b) (char-upper-case? . aK503a) (char-title-case? . aK5039) (char-numeric? . aK5038) (char-lower-case? . aK5037) (char-general-category . aK5036) (char-upcase . aK5035) (char-titlecase . aK5034) (char-foldcase . aK5033) (char-downcase . aK5032) (char-ci>? . aK5031) (char-ci>=? . aK5030) (char-ci=? . aK502f) (char-ci<? . aK502e) (char-ci<=? . aK502d) (char-alphabetic? . aK502c) (make-variable-transformer . aK2ee8) (identifier? . aK319f) (generate-temporaries . aK318b) (free-identifier=? . aK318d) (syntax->datum . aK31a3) (datum->syntax . aK31a1) (bound-identifier=? . aK318f) (record-type-descriptor? . aK502b) (record-predicate . aK502a) (record-mutator . aK5029) (record-constructor . aK5028) (record-accessor . aK5027) (make-record-type-descriptor . aK5026) (make-record-constructor-descriptor . aK5025) (record? . aK5024) (record-type-uid . aK5023) (record-type-sealed? . aK5022) (record-type-parent . aK5021) (record-type-opaque? . aK5020) (record-type-name . aK501f) (record-type-generative? . aK501e) (record-type-field-names . aK501d) (record-rtd . aK501c) (record-field-mutable? . aK501b) (delete-file . aK501a) (file-exists? . aK5019) (vector-sort! . aK5018) (vector-sort . aK5017) (list-sort . aK5016) (symbol-hash . aK5015) (string-ci-hash . aK5014) (string-hash . aK5013) (equal-hash . aK5012) (hashtable-equivalence-function . aK5011) (make-hashtable . aK5010) (hashtable-hash-function . aK500f) (make-eqv-hashtable . aK500e) (make-eq-hashtable . aK500d) (hashtable? . aK500c) (hashtable-update! . aK500b) (hashtable-size . aK500a) (hashtable-set! . aK5009) (hashtable-ref . aK5008) (hashtable-mutable? . aK5007) (hashtable-keys . aK5006) (hashtable-entries . aK5005) (hashtable-delete! . aK5004) (hashtable-copy . aK5003) (hashtable-contains? . aK5002) (hashtable-clear! . aK5001) (call-with-output-file . aK5000) (call-with-input-file . aK4fff) (write-char . aK4ffe) (write . aK4ffd) (with-output-to-file . aK4ffc) (with-input-from-file . aK4ffb) (read-char . aK4ffa) (read . aK4ff9) (peek-char . aK4ff8) (open-output-file . aK4ff7) (open-input-file . aK4ff6) (newline . aK4ff5) (display . aK4ff4) (close-output-port . aK4ff3) (close-input-port . aK4ff2) (eof-object? . aK4ff1) (eof-object . aK4ff0) (current-error-port . aK4fef) (current-output-port . aK4fee) (current-input-port . aK4fed) (output-port? . aK4fec) (input-port? . aK4feb) (utf-8-codec . aK4fea) (utf-16-codec . aK4fe9) (transcoder-error-handling-mode . aK4fe8) (transcoder-eol-style . aK4fe7) (transcoder-codec . aK4fe6) (transcoded-port . aK4fe5) (textual-port? . aK4fe4) (string->bytevector . aK4fe3) (standard-output-port . aK4fe2) (standard-input-port . aK4fe1) (standard-error-port . aK4fe0) (set-port-position! . aK4fdf) (put-u8 . aK4fde) (put-string . aK4fdd) (put-datum . aK4fdc) (put-char . aK4fdb) (put-bytevector . aK4fda) (port? . aK4fd9) (port-transcoder . aK4fd8) (port-position . aK4fd7) (port-has-set-port-position!? . aK4fd6) (port-has-port-position? . aK4fd5) (port-eof? . aK4fd4) (output-port-buffer-mode . aK4fd3) (open-string-output-port . aK4fd2) (open-string-input-port . aK4fd1) (open-file-output-port . aK4fd0) (open-file-input/output-port . aK4fcf) (open-file-input-port . aK4fce) (open-bytevector-output-port . aK4fcd) (open-bytevector-input-port . aK4fcc) (native-transcoder . aK4fcb) (native-eol-style . aK4fca) (make-transcoder . aK4fc9) (latin-1-codec . aK4fc8) (make-i/o-write-error . aK4fc7) (make-i/o-read-error . aK4fc6) (make-i/o-port-error . aK4fc5) (make-i/o-invalid-position-error . aK4fc4) (make-i/o-filename-error . aK4fc3) (make-i/o-file-protection-error . aK4fc2) (make-i/o-file-is-read-only-error . aK4fc1) (make-i/o-file-does-not-exist-error . aK4fc0) (make-i/o-file-already-exists-error . aK4fbf) (make-i/o-error . aK4fbe) (make-i/o-encoding-error . aK4fbd) (make-i/o-decoding-error . aK4fbc) (make-custom-textual-output-port . aK4fbb) (make-custom-textual-input/output-port . aK4fba) (make-custom-textual-input-port . aK4fb9) (make-custom-binary-output-port . aK4fb8) (make-custom-binary-input/output-port . aK4fb7) (make-custom-binary-input-port . aK4fb6) (make-bytevector . aK4fb5) (lookahead-u8 . aK4fb4) (lookahead-char . aK4fb3) (i/o-write-error? . aK4fb2) (i/o-read-error? . aK4fb1) (i/o-port-error? . aK4fb0) (i/o-invalid-position-error? . aK4faf) (i/o-filename-error? . aK4fae) (i/o-file-protection-error? . aK4fad) (i/o-file-is-read-only-error? . aK4fac) (i/o-file-does-not-exist-error? . aK4fab) (i/o-file-already-exists-error? . aK4faa) (i/o-error? . aK4fa9) (i/o-error-position . aK4fa8) (i/o-error-port . aK4fa7) (i/o-error-filename . aK4fa6) (i/o-encoding-error? . aK4fa5) (i/o-encoding-error-char . aK4fa4) (i/o-decoding-error? . aK4fa3) (get-u8 . aK4fa2) (get-string-n! . aK4fa1) (get-string-n . aK4fa0) (get-string-all . aK4f9f) (get-line . aK4f9e) (get-datum . aK4f9d) (get-char . aK4f9c) (get-bytevector-some . aK4f9b) (get-bytevector-n! . aK4f9a) (get-bytevector-n . aK4f99) (get-bytevector-all . aK4f98) (flush-output-port . aK4f97) (close-port . aK4f96) (exit . aK4f8e) (command-line . aK4c20) (remove . aK4f89) (remv . aK4f88) (remp . aK4f87) (remq . aK4f86) (partition . aK4f85) (memv . aK4f84) (memq . aK4f83) (memp . aK4f82) (member . aK4f81) (exists . aK4f80) (for-all . aK4f7f) (fold-right . aK4f7e) (fold-left . aK4f7d) (find . aK4f7c) (filter . aK4f7b) (cons* . aK4f7a) (assv . aK4f79) (assq . aK4f78) (assp . aK4f77) (assoc . aK4f76) (call-with-string-output-port . aK4f75) (call-with-port . aK4f74) (call-with-bytevector-output-port . aK4f73) (bytevector->string . aK4f72) (buffer-mode? . aK4f71) (binary-port? . aK4f70) (with-exception-handler . aK4f6f) (raise-continuable . aK4f6e) (raise . aK4f6d) (make-enumeration . aK4f6c) (enum-set=? . aK4f6b) (enum-set-universe . aK4f6a) (enum-set-union . aK4f69) (enum-set-subset? . aK4f68) (enum-set-projection . aK4f67) (enum-set-member? . aK4f66) (enum-set-intersection . aK4f65) (enum-set-indexer . aK4f64) (enum-set-difference . aK4f63) (enum-set-constructor . aK4f62) (enum-set-complement . aK4f61) (enum-set->list . aK4f60) (who-condition? . aK4f5f) (warning? . aK4f5e) (violation? . aK4f5d) (undefined-violation? . aK4f5c) (syntax-violation? . aK4f5b) (syntax-violation-subform . aK4f5a) (syntax-violation-form . aK4f59) (syntax-violation . aK319d) (simple-conditions . aK4f58) (serious-condition? . aK4f57) (non-continuable-violation? . aK4f56) (message-condition? . aK4f55) (make-who-condition . aK4f54) (make-warning . aK4f53) (make-violation . aK4f52) (make-undefined-violation . aK4f51) (make-syntax-violation . aK4f50) (make-serious-condition . aK4f4f) (make-non-continuable-violation . aK4f4e) (make-message-condition . aK4f4d) (make-lexical-violation . aK4f4c) (make-irritants-condition . aK4f4b) (make-implementation-restriction-violation . aK4f4a) (make-error . aK4f49) (make-assertion-violation . aK4f48) (lexical-violation? . aK4f47) (irritants-condition? . aK4f46) (implementation-restriction-violation? . aK4f45) (error? . aK4f44) (condition-who . aK4f43) (condition-predicate . aK4f42) (condition-message . aK4f41) (condition-irritants . aK4f40) (condition-accessor . aK4f3f) (condition . aK4f3e) (assertion-violation? . aK4f3d) (condition? . aK4f3c) (utf32->string . aK4f3b) (utf16->string . aK4f3a) (utf8->string . aK4f39) (uint-list->bytevector . aK4f38) (u8-list->bytevector . aK4f37) (string->utf8 . aK4f36) (string->utf32 . aK4f35) (string->utf16 . aK4f34) (sint-list->bytevector . aK4f33) (native-endianness . aK4f32) (bytevector? . aK4f31) (bytevector=? . aK4f30) (bytevector-uint-set! . aK4f2f) (bytevector-uint-ref . aK4f2e) (bytevector-u8-set! . aK4f2d) (bytevector-u8-ref . aK4f2c) (bytevector-u64-set! . aK4f2b) (bytevector-u64-ref . aK4f2a) (bytevector-u64-native-set! . aK4f29) (bytevector-u64-native-ref . aK4f28) (bytevector-u32-set! . aK4f27) (bytevector-u32-ref . aK4f26) (bytevector-u32-native-set! . aK4f25) (bytevector-u32-native-ref . aK4f24) (bytevector-u16-set! . aK4f23) (bytevector-u16-ref . aK4f22) (bytevector-u16-native-set! . aK4f21) (bytevector-u16-native-ref . aK4f20) (bytevector-sint-set! . aK4f1f) (bytevector-sint-ref . aK4f1e) (bytevector-s8-set! . aK4f1d) (bytevector-s8-ref . aK4f1c) (bytevector-s64-set! . aK4f1b) (bytevector-s64-ref . aK4f1a) (bytevector-s64-native-set! . aK4f19) (bytevector-s64-native-ref . aK4f18) (bytevector-s32-set! . aK4f17) (bytevector-s32-ref . aK4f16) (bytevector-s32-native-set! . aK4f15) (bytevector-s32-native-ref . aK4f14) (bytevector-s16-set! . aK4f13) (bytevector-s16-ref . aK4f12) (bytevector-s16-native-set! . aK4f11) (bytevector-s16-native-ref . aK4f10) (bytevector-length . aK4f0f) (bytevector-ieee-single-ref . aK4f0e) (bytevector-ieee-single-set! . aK4f0d) (bytevector-ieee-single-native-set! . aK4f0c) (bytevector-ieee-single-native-ref . aK4f0b) (bytevector-ieee-double-set! . aK4f0a) (bytevector-ieee-double-ref . aK4f09) (bytevector-ieee-double-native-set! . aK4f08) (bytevector-ieee-double-native-ref . aK4f07) (bytevector-fill! . aK4f06) (bytevector-copy! . aK4f05) (bytevector-copy . aK4f04) (bytevector->uint-list . aK4f03) (bytevector->u8-list . aK4f02) (bytevector->sint-list . aK4f01) (no-nans-violation? . aK4f00) (no-infinities-violation? . aK4eff) (make-no-nans-violation . aK4efe) (make-no-infinities-violation . aK4efd) (real->flonum . aK4efc) (flzero? . aK4efb) (fltruncate . aK4efa) (fltan . aK4ef9) (flsqrt . aK4ef8) (flsin . aK4ef7) (flround . aK4ef6) (flpositive? . aK4ef5) (flonum? . aK4ef4) (flodd? . aK4ef3) (flnumerator . aK4ef2) (flnegative? . aK4ef1) (flnan? . aK4ef0) (flmod0 . aK4eef) (flmod . aK4eee) (flmin . aK4eed) (flmax . aK4eec) (fllog . aK4eeb) (flinteger? . aK4eea) (flinfinite? . aK4ee9) (flfloor . aK4ee8) (flfinite? . aK4ee7) (flexpt . aK4ee6) (flexp . aK4ee5) (fleven? . aK4ee4) (fldiv0-and-mod0 . aK4ee3) (fldiv0 . aK4ee2) (fldiv-and-mod . aK4ee1) (fldiv . aK4ee0) (fldenominator . aK4edf) (flcos . aK4ede) (flceiling . aK4edd) (flatan . aK4edc) (flasin . aK4edb) (flacos . aK4eda) (flabs . aK4ed9) (fl>? . aK4ed8) (fl>=? . aK4ed7) (fl=? . aK4ed6) (fl<? . aK4ed5) (fl<=? . aK4ed4) (fl/ . aK4ed3) (fl- . aK4ed2) (fl+ . aK4ed1) (fl* . aK4ed0) (fixnum->flonum . aK4ecf) (fxzero? . aK4ece) (fxxor . aK4ecd) (fxrotate-bit-field . aK4ecc) (fxreverse-bit-field . aK4ecb) (fxpositive? . aK4eca) (fxodd? . aK4ec9) (fxnot . aK4ec8) (fxnegative? . aK4ec7) (fxmod0 . aK4ec6) (fxmod . aK4ec5) (fxmin . aK4ec4) (fxmax . aK4ec3) (fxlength . aK4ec2) (fxior . aK4ec1) (fxif . aK4ec0) (fxfirst-bit-set . aK4ebf) (fxeven? . aK4ebe) (fxdiv0-and-mod0 . aK4ebd) (fxdiv0 . aK4ebc) (fxdiv-and-mod . aK4ebb) (fxdiv . aK4eba) (fxcopy-bit-field . aK4eb9) (fxcopy-bit . aK4eb8) (fxbit-set? . aK4eb7) (fxbit-field . aK4eb6) (fxbit-count . aK4eb5) (fxarithmetic-shift-right . aK4eb4) (fxarithmetic-shift-left . aK4eb3) (fxarithmetic-shift . aK4eb2) (fxand . aK4eb1) (fx>? . aK4eb0) (fx>=? . aK4eaf) (fx=? . aK4eae) (fx<? . aK4ead) (fx<=? . aK4eac) (fx-/carry . aK4eab) (fx- . aK4eaa) (fx+/carry . aK4ea9) (fx+ . aK4ea8) (fx*/carry . aK4ea7) (fx* . aK4ea6) (greatest-fixnum . aK4ea5) (least-fixnum . aK4ea4) (fixnum-width . aK4ea3) (fixnum? . aK4ea2) (bitwise-rotate-bit-field . aK4ea1) (bitwise-reverse-bit-field . aK4ea0) (bitwise-length . aK4e9f) (bitwise-if . aK4e9e) (bitwise-first-bit-set . aK4e9d) (bitwise-copy-bit-field . aK4e9c) (bitwise-copy-bit . aK4e9b) (bitwise-bit-set? . aK4e9a) (bitwise-bit-field . aK4e99) (bitwise-bit-count . aK4e98) (bitwise-xor . aK4e97) (bitwise-ior . aK4e96) (bitwise-and . aK4e95) (bitwise-not . aK4e94) (bitwise-arithmetic-shift-right . aK4e93) (bitwise-arithmetic-shift-left . aK4e92) (bitwise-arithmetic-shift . aK4e91) (zero? . aK4e90) (vector? . aK4e8f) (vector-set! . aK4e8e) (vector-ref . aK4e8d) (vector-map . aK4e8c) (vector-length . aK4e8b) (vector-for-each . aK4e8a) (vector-fill! . aK4e89) (vector->list . aK4e88) (vector . aK4e87) (values . aK4e86) (truncate . aK4e85) (tan . aK4e84) (symbol? . aK4e83) (symbol=? . aK4e82) (symbol->string . aK4e81) (substring . aK4e80) (string? . aK4e7f) (string>? . aK4e7e) (string>=? . aK4e7d) (string=? . aK4e7c) (string<? . aK4e7b) (string<=? . aK4e7a) (string-ref . aK4e79) (string-length . aK4e78) (string-for-each . aK4e77) (string-copy . aK4e76) (string-append . aK4e75) (string->symbol . aK4e74) (string->number . aK4e73) (string->list . aK4e72) (string . aK4e71) (sqrt . aK4e70) (sin . aK4e6f) (round . aK4e6e) (reverse . aK4e6d) (real? . aK4e6c) (real-valued? . aK4e6b) (real-part . aK4e6a) (rationalize . aK4e69) (rational? . aK4e68) (rational-valued? . aK4e67) (procedure? . aK4e66) (positive? . aK4e65) (pair? . aK4e64) (odd? . aK4e63) (numerator . aK4e62) (number? . aK4e61) (number->string . aK4e60) (null? . aK4e5f) (not . aK4e5e) (negative? . aK4e5d) (nan? . aK4e5c) (min . aK4e5b) (max . aK4e5a) (map . aK4e59) (make-vector . aK4e58) (make-string . aK4e57) (make-rectangular . aK4e56) (make-polar . aK4e55) (magnitude . aK4e54) (log . aK4e53) (list? . aK4e52) (list-tail . aK4e51) (list-ref . aK4e50) (list->vector . aK4e4f) (list->string . aK4e4e) (list . aK4e4d) (length . aK4e4c) (lcm . aK4e4b) (integer? . aK4e4a) (integer-valued? . aK4e49) (integer->char . aK4e48) (infinite? . aK4e47) (inexact? . aK4e46) (inexact . aK4e45) (imag-part . aK4e44) (gcd . aK4e43) (for-each . aK4e42) (floor . aK4e41) (finite? . aK4e40) (expt . aK4e3f) (exp . aK4e3e) (exact? . aK4e3d) (exact-integer-sqrt . aK4e3c) (exact . aK4e3b) (even? . aK4e3a) (error . aK4e39) (eqv? . aK4e38) (equal? . aK4e37) (eq? . aK4e36) (dynamic-wind . aK4e35) (div0-and-mod0 . aK4e34) (mod0 . aK4e33) (div0 . aK4e32) (div-and-mod . aK4e31) (mod . aK4e30) (div . aK4e2f) (denominator . aK4e2e) (cos . aK4e2d) (cons . aK4e2c) (complex? . aK4e2b) (char? . aK4e2a) (char>? . aK4e29) (char>=? . aK4e28) (char=? . aK4e27) (char<? . aK4e26) (char<=? . aK4e25) (char->integer . aK4e24) (ceiling . aK4e23) (call-with-values . aK4e22) (call/cc . aK4e21) (call-with-current-continuation . aK4e20) (cddddr . aK4e1f) (cdddar . aK4e1e) (cddadr . aK4e1d) (cddaar . aK4e1c) (cdaddr . aK4e1b) (cdadar . aK4e1a) (cdaadr . aK4e19) (cdaaar . aK4e18) (cadddr . aK4e17) (caddar . aK4e16) (cadadr . aK4e15) (cadaar . aK4e14) (caaddr . aK4e13) (caadar . aK4e12) (caaadr . aK4e11) (caaaar . aK4e10) (cdddr . aK4e0f) (cddar . aK4e0e) (cdadr . aK4e0d) (cdaar . aK4e0c) (caddr . aK4e0b) (cadar . aK4e0a) (caadr . aK4e09) (caaar . aK4e08) (cddr . aK4e07) (cdar . aK4e06) (cadr . aK4e05) (caar . aK4e04) (cdr . aK4e03) (car . aK4e02) (boolean? . aK4e01) (boolean=? . aK4e00) (atan . aK4dff) (assertion-violation . aK4dfe) (asin . aK4dfd) (apply . aK4dfc) (append . aK4dfb) (angle . aK4dfa) (acos . aK4df9) (abs . aK4df8) (/ . aK4df7) (* . aK4df6) (- . aK4df5) (+ . aK4df4) (>= . aK4df3) (> . aK4df2) (= . aK4df1) (<= . aK4df0) (< . aK4def) (&no-nans . aK4ded) (&no-infinities . aK4dec) (&i/o-encoding . aK4deb) (&i/o-decoding . aK4dea) (&i/o-port . aK4de9) (&i/o-file-does-not-exist . aK4de8) (&i/o-file-already-exists . aK4de7) (&i/o-file-is-read-only . aK4de6) (&i/o-file-protection . aK4de5) (&i/o-filename . aK4de4) (&i/o-invalid-position . aK4de3) (&i/o-write . aK4de2) (&i/o-read . aK4de1) (&i/o . aK4de0) (&undefined . aK4ddf) (&syntax . aK4dde) (&lexical . aK4ddd) (&implementation-restriction . aK4ddc) (&non-continuable . aK4ddb) (&who . aK4dda) (&irritants . aK4dd9) (&assertion . aK4dd8) (&violation . aK4dd7) (&error . aK4dd6) (&serious . aK4dd5) (&warning . aK4dd4) (&message . aK4dd3) (&condition . aK4dd2) (define-condition-type . aK4dd1) (define-enumeration . aK4dd0) (define-record-type . aK4dcf) (parent-rtd . aK4dce) (nongenerative . aK4dcd) (opaque . aK4dcc) (sealed . aK4dcb) (protocol . aK4dca) (parent . aK4dc9) (immutable . aK4dc8) (mutable . aK4dc7) (fields . aK4dc6) (error-handling-mode . aK4dc5) (file-options . aK4dc4) (buffer-mode . aK4dc3) (eol-style . aK4dc2) (guard . aK4dc1) (unsyntax-splicing . aK4dbe) (unsyntax . aK4dbd) (unquote-splicing . aK4dbc) (unquote . aK4dbb) (_ . aK4dba) (else . aK4db9) (=> . aK4db8) (... . aK4db7) (assert . aK4db6) (endianness . aK4db5) (do . aK4db2) (cond . aK4db1) (let* . aK4db0) (let*-values . aK4daf) (let-values . aK4dae) (identifier-syntax . aK4dad) (with-syntax . aK4dac) (quasisyntax . aK4dab) (quasiquote . aK4daa) (syntax-rules . aK4da9) (record-constructor-descriptor . aK4da6) (record-type-descriptor . aK4da5) (case . aK4da4) (unless . aK4da2) (when . aK4da1) (or . aK4da0) (and . aK4d9f) (if . aK4d9e) (let . aK4d9d) (letrec* . aK4d9c) (letrec . aK4d9b) (case-lambda . aK4d99) (lambda . aK4d98) (syntax . aK4d97) (syntax-case . aK4d96) (quote . aK4d95) (letrec-syntax . aK4d93) (let-syntax . aK4d92) (set! . aK4d91) (begin . aK4d8f) (define-syntax . aK4d8d) (define . aK4d8c)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5134 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . aK3179) (quotient . aK4f95) (null-environment . aK3177) (remainder . aK4f94) (modulo . aK4f93) (inexact->exact . aK4f92) (force . aK4f91) (exact->inexact . aK4f90) (make-promise . aK4f8f) (delay . aK4db4)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5135 '(rnrs control) '(6) '() '() '() '((do . aK4db2) (unless . aK4da2) (when . aK4da1) (case-lambda . aK4d99)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5136 '(rnrs eval) '(6) '() '() '() '((eval . aK317d) (environment . aK3175)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5137 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . aK4f8b) (set-car! . aK4f8a)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5138 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . aK4f8d) (string-set! . aK4f8c)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5139 '(rnrs programs) '(6) '() '() '() '((exit . aK4f8e) (command-line . aK4c20)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK513a '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . aK2ee8) (identifier? . aK319f) (generate-temporaries . aK318b) (free-identifier=? . aK318d) (syntax->datum . aK31a3) (datum->syntax . aK31a1) (bound-identifier=? . aK318f) (syntax-violation . aK319d) (unsyntax-splicing . aK4dbe) (unsyntax . aK4dbd) (_ . aK4dba) (... . aK4db7) (with-syntax . aK4dac) (quasisyntax . aK4dab) (syntax . aK4d97) (syntax-case . aK4d96)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK513b '(rnrs files) '(6) '() '() '() '((delete-file . aK501a) (file-exists? . aK5019) (make-i/o-write-error . aK4fc7) (make-i/o-read-error . aK4fc6) (make-i/o-port-error . aK4fc5) (make-i/o-invalid-position-error . aK4fc4) (make-i/o-filename-error . aK4fc3) (make-i/o-file-protection-error . aK4fc2) (make-i/o-file-is-read-only-error . aK4fc1) (make-i/o-file-does-not-exist-error . aK4fc0) (make-i/o-file-already-exists-error . aK4fbf) (make-i/o-error . aK4fbe) (i/o-write-error? . aK4fb2) (i/o-read-error? . aK4fb1) (i/o-port-error? . aK4fb0) (i/o-invalid-position-error? . aK4faf) (i/o-filename-error? . aK4fae) (i/o-file-protection-error? . aK4fad) (i/o-file-is-read-only-error? . aK4fac) (i/o-file-does-not-exist-error? . aK4fab) (i/o-file-already-exists-error? . aK4faa) (i/o-error? . aK4fa9) (i/o-error-position . aK4fa8) (i/o-error-port . aK4fa7) (i/o-error-filename . aK4fa6) (&i/o-port . aK4de9) (&i/o-file-does-not-exist . aK4de8) (&i/o-file-already-exists . aK4de7) (&i/o-file-is-read-only . aK4de6) (&i/o-file-protection . aK4de5) (&i/o-filename . aK4de4) (&i/o-invalid-position . aK4de3) (&i/o-write . aK4de2) (&i/o-read . aK4de1) (&i/o . aK4de0)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK513c '(rnrs sorting) '(6) '() '() '() '((vector-sort! . aK5018) (vector-sort . aK5017) (list-sort . aK5016)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK513d '(rnrs base) '(6) '() '() '() '((zero? . aK4e90) (vector? . aK4e8f) (vector-set! . aK4e8e) (vector-ref . aK4e8d) (vector-map . aK4e8c) (vector-length . aK4e8b) (vector-for-each . aK4e8a) (vector-fill! . aK4e89) (vector->list . aK4e88) (vector . aK4e87) (values . aK4e86) (truncate . aK4e85) (tan . aK4e84) (symbol? . aK4e83) (symbol=? . aK4e82) (symbol->string . aK4e81) (substring . aK4e80) (string? . aK4e7f) (string>? . aK4e7e) (string>=? . aK4e7d) (string=? . aK4e7c) (string<? . aK4e7b) (string<=? . aK4e7a) (string-ref . aK4e79) (string-length . aK4e78) (string-for-each . aK4e77) (string-copy . aK4e76) (string-append . aK4e75) (string->symbol . aK4e74) (string->number . aK4e73) (string->list . aK4e72) (string . aK4e71) (sqrt . aK4e70) (sin . aK4e6f) (round . aK4e6e) (reverse . aK4e6d) (real? . aK4e6c) (real-valued? . aK4e6b) (real-part . aK4e6a) (rationalize . aK4e69) (rational? . aK4e68) (rational-valued? . aK4e67) (procedure? . aK4e66) (positive? . aK4e65) (pair? . aK4e64) (odd? . aK4e63) (numerator . aK4e62) (number? . aK4e61) (number->string . aK4e60) (null? . aK4e5f) (not . aK4e5e) (negative? . aK4e5d) (nan? . aK4e5c) (min . aK4e5b) (max . aK4e5a) (map . aK4e59) (make-vector . aK4e58) (make-string . aK4e57) (make-rectangular . aK4e56) (make-polar . aK4e55) (magnitude . aK4e54) (log . aK4e53) (list? . aK4e52) (list-tail . aK4e51) (list-ref . aK4e50) (list->vector . aK4e4f) (list->string . aK4e4e) (list . aK4e4d) (length . aK4e4c) (lcm . aK4e4b) (integer? . aK4e4a) (integer-valued? . aK4e49) (integer->char . aK4e48) (infinite? . aK4e47) (inexact? . aK4e46) (inexact . aK4e45) (imag-part . aK4e44) (gcd . aK4e43) (for-each . aK4e42) (floor . aK4e41) (finite? . aK4e40) (expt . aK4e3f) (exp . aK4e3e) (exact? . aK4e3d) (exact-integer-sqrt . aK4e3c) (exact . aK4e3b) (even? . aK4e3a) (error . aK4e39) (eqv? . aK4e38) (equal? . aK4e37) (eq? . aK4e36) (dynamic-wind . aK4e35) (div0-and-mod0 . aK4e34) (mod0 . aK4e33) (div0 . aK4e32) (div-and-mod . aK4e31) (mod . aK4e30) (div . aK4e2f) (denominator . aK4e2e) (cos . aK4e2d) (cons . aK4e2c) (complex? . aK4e2b) (char? . aK4e2a) (char>? . aK4e29) (char>=? . aK4e28) (char=? . aK4e27) (char<? . aK4e26) (char<=? . aK4e25) (char->integer . aK4e24) (ceiling . aK4e23) (call-with-values . aK4e22) (call/cc . aK4e21) (call-with-current-continuation . aK4e20) (cddddr . aK4e1f) (cdddar . aK4e1e) (cddadr . aK4e1d) (cddaar . aK4e1c) (cdaddr . aK4e1b) (cdadar . aK4e1a) (cdaadr . aK4e19) (cdaaar . aK4e18) (cadddr . aK4e17) (caddar . aK4e16) (cadadr . aK4e15) (cadaar . aK4e14) (caaddr . aK4e13) (caadar . aK4e12) (caaadr . aK4e11) (caaaar . aK4e10) (cdddr . aK4e0f) (cddar . aK4e0e) (cdadr . aK4e0d) (cdaar . aK4e0c) (caddr . aK4e0b) (cadar . aK4e0a) (caadr . aK4e09) (caaar . aK4e08) (cddr . aK4e07) (cdar . aK4e06) (cadr . aK4e05) (caar . aK4e04) (cdr . aK4e03) (car . aK4e02) (boolean? . aK4e01) (boolean=? . aK4e00) (atan . aK4dff) (assertion-violation . aK4dfe) (asin . aK4dfd) (apply . aK4dfc) (append . aK4dfb) (angle . aK4dfa) (acos . aK4df9) (abs . aK4df8) (/ . aK4df7) (* . aK4df6) (- . aK4df5) (+ . aK4df4) (>= . aK4df3) (> . aK4df2) (= . aK4df1) (<= . aK4df0) (< . aK4def) (unquote-splicing . aK4dbc) (unquote . aK4dbb) (_ . aK4dba) (else . aK4db9) (=> . aK4db8) (... . aK4db7) (assert . aK4db6) (cond . aK4db1) (let* . aK4db0) (let*-values . aK4daf) (let-values . aK4dae) (identifier-syntax . aK4dad) (quasiquote . aK4daa) (syntax-rules . aK4da9) (case . aK4da4) (or . aK4da0) (and . aK4d9f) (if . aK4d9e) (let . aK4d9d) (letrec* . aK4d9c) (letrec . aK4d9b) (lambda . aK4d98) (quote . aK4d95) (letrec-syntax . aK4d93) (let-syntax . aK4d92) (set! . aK4d91) (begin . aK4d8f) (define-syntax . aK4d8d) (define . aK4d8c)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK513e '(rnrs lists) '(6) '() '() '() '((remove . aK4f89) (remv . aK4f88) (remp . aK4f87) (remq . aK4f86) (partition . aK4f85) (memv . aK4f84) (memq . aK4f83) (memp . aK4f82) (member . aK4f81) (exists . aK4f80) (for-all . aK4f7f) (fold-right . aK4f7e) (fold-left . aK4f7d) (find . aK4f7c) (filter . aK4f7b) (cons* . aK4f7a) (assv . aK4f79) (assq . aK4f78) (assp . aK4f77) (assoc . aK4f76)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK513f '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . aK5000) (call-with-input-file . aK4fff) (write-char . aK4ffe) (write . aK4ffd) (with-output-to-file . aK4ffc) (with-input-from-file . aK4ffb) (read-char . aK4ffa) (read . aK4ff9) (peek-char . aK4ff8) (open-output-file . aK4ff7) (open-input-file . aK4ff6) (newline . aK4ff5) (display . aK4ff4) (close-output-port . aK4ff3) (close-input-port . aK4ff2) (eof-object? . aK4ff1) (eof-object . aK4ff0) (current-error-port . aK4fef) (current-output-port . aK4fee) (current-input-port . aK4fed) (output-port? . aK4fec) (input-port? . aK4feb) (make-i/o-write-error . aK4fc7) (make-i/o-read-error . aK4fc6) (make-i/o-port-error . aK4fc5) (make-i/o-invalid-position-error . aK4fc4) (make-i/o-filename-error . aK4fc3) (make-i/o-file-protection-error . aK4fc2) (make-i/o-file-is-read-only-error . aK4fc1) (make-i/o-file-does-not-exist-error . aK4fc0) (make-i/o-file-already-exists-error . aK4fbf) (make-i/o-error . aK4fbe) (i/o-write-error? . aK4fb2) (i/o-read-error? . aK4fb1) (i/o-port-error? . aK4fb0) (i/o-invalid-position-error? . aK4faf) (i/o-filename-error? . aK4fae) (i/o-file-protection-error? . aK4fad) (i/o-file-is-read-only-error? . aK4fac) (i/o-file-does-not-exist-error? . aK4fab) (i/o-file-already-exists-error? . aK4faa) (i/o-error? . aK4fa9) (i/o-error-position . aK4fa8) (i/o-error-port . aK4fa7) (i/o-error-filename . aK4fa6) (&i/o-port . aK4de9) (&i/o-file-does-not-exist . aK4de8) (&i/o-file-already-exists . aK4de7) (&i/o-file-is-read-only . aK4de6) (&i/o-file-protection . aK4de5) (&i/o-filename . aK4de4) (&i/o-invalid-position . aK4de3) (&i/o-write . aK4de2) (&i/o-read . aK4de1) (&i/o . aK4de0)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5140 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . aK4fb5) (utf32->string . aK4f3b) (utf16->string . aK4f3a) (utf8->string . aK4f39) (uint-list->bytevector . aK4f38) (u8-list->bytevector . aK4f37) (string->utf8 . aK4f36) (string->utf32 . aK4f35) (string->utf16 . aK4f34) (sint-list->bytevector . aK4f33) (native-endianness . aK4f32) (bytevector? . aK4f31) (bytevector=? . aK4f30) (bytevector-uint-set! . aK4f2f) (bytevector-uint-ref . aK4f2e) (bytevector-u8-set! . aK4f2d) (bytevector-u8-ref . aK4f2c) (bytevector-u64-set! . aK4f2b) (bytevector-u64-ref . aK4f2a) (bytevector-u64-native-set! . aK4f29) (bytevector-u64-native-ref . aK4f28) (bytevector-u32-set! . aK4f27) (bytevector-u32-ref . aK4f26) (bytevector-u32-native-set! . aK4f25) (bytevector-u32-native-ref . aK4f24) (bytevector-u16-set! . aK4f23) (bytevector-u16-ref . aK4f22) (bytevector-u16-native-set! . aK4f21) (bytevector-u16-native-ref . aK4f20) (bytevector-sint-set! . aK4f1f) (bytevector-sint-ref . aK4f1e) (bytevector-s8-set! . aK4f1d) (bytevector-s8-ref . aK4f1c) (bytevector-s64-set! . aK4f1b) (bytevector-s64-ref . aK4f1a) (bytevector-s64-native-set! . aK4f19) (bytevector-s64-native-ref . aK4f18) (bytevector-s32-set! . aK4f17) (bytevector-s32-ref . aK4f16) (bytevector-s32-native-set! . aK4f15) (bytevector-s32-native-ref . aK4f14) (bytevector-s16-set! . aK4f13) (bytevector-s16-ref . aK4f12) (bytevector-s16-native-set! . aK4f11) (bytevector-s16-native-ref . aK4f10) (bytevector-length . aK4f0f) (bytevector-ieee-single-ref . aK4f0e) (bytevector-ieee-single-set! . aK4f0d) (bytevector-ieee-single-native-set! . aK4f0c) (bytevector-ieee-single-native-ref . aK4f0b) (bytevector-ieee-double-set! . aK4f0a) (bytevector-ieee-double-ref . aK4f09) (bytevector-ieee-double-native-set! . aK4f08) (bytevector-ieee-double-native-ref . aK4f07) (bytevector-fill! . aK4f06) (bytevector-copy! . aK4f05) (bytevector-copy . aK4f04) (bytevector->uint-list . aK4f03) (bytevector->u8-list . aK4f02) (bytevector->sint-list . aK4f01) (endianness . aK4db5)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5141 '(rnrs unicode) '(6) '() '() '() '((string-upcase . aK5048) (string-titlecase . aK5047) (string-normalize-nfkd . aK5046) (string-normalize-nfkc . aK5045) (string-normalize-nfd . aK5044) (string-normalize-nfc . aK5043) (string-foldcase . aK5042) (string-downcase . aK5041) (string-ci>? . aK5040) (string-ci>=? . aK503f) (string-ci=? . aK503e) (string-ci<? . aK503d) (string-ci<=? . aK503c) (char-whitespace? . aK503b) (char-upper-case? . aK503a) (char-title-case? . aK5039) (char-numeric? . aK5038) (char-lower-case? . aK5037) (char-general-category . aK5036) (char-upcase . aK5035) (char-titlecase . aK5034) (char-foldcase . aK5033) (char-downcase . aK5032) (char-ci>? . aK5031) (char-ci>=? . aK5030) (char-ci=? . aK502f) (char-ci<? . aK502e) (char-ci<=? . aK502d) (char-alphabetic? . aK502c)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5142 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . aK4f6f) (raise-continuable . aK4f6e) (raise . aK4f6d) (guard . aK4dc1) (else . aK4db9) (=> . aK4db8)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5143 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . aK4ea1) (bitwise-reverse-bit-field . aK4ea0) (bitwise-length . aK4e9f) (bitwise-if . aK4e9e) (bitwise-first-bit-set . aK4e9d) (bitwise-copy-bit-field . aK4e9c) (bitwise-copy-bit . aK4e9b) (bitwise-bit-set? . aK4e9a) (bitwise-bit-field . aK4e99) (bitwise-bit-count . aK4e98) (bitwise-xor . aK4e97) (bitwise-ior . aK4e96) (bitwise-and . aK4e95) (bitwise-not . aK4e94) (bitwise-arithmetic-shift-right . aK4e93) (bitwise-arithmetic-shift-left . aK4e92) (bitwise-arithmetic-shift . aK4e91)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5144 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . aK4ece) (fxxor . aK4ecd) (fxrotate-bit-field . aK4ecc) (fxreverse-bit-field . aK4ecb) (fxpositive? . aK4eca) (fxodd? . aK4ec9) (fxnot . aK4ec8) (fxnegative? . aK4ec7) (fxmod0 . aK4ec6) (fxmod . aK4ec5) (fxmin . aK4ec4) (fxmax . aK4ec3) (fxlength . aK4ec2) (fxior . aK4ec1) (fxif . aK4ec0) (fxfirst-bit-set . aK4ebf) (fxeven? . aK4ebe) (fxdiv0-and-mod0 . aK4ebd) (fxdiv0 . aK4ebc) (fxdiv-and-mod . aK4ebb) (fxdiv . aK4eba) (fxcopy-bit-field . aK4eb9) (fxcopy-bit . aK4eb8) (fxbit-set? . aK4eb7) (fxbit-field . aK4eb6) (fxbit-count . aK4eb5) (fxarithmetic-shift-right . aK4eb4) (fxarithmetic-shift-left . aK4eb3) (fxarithmetic-shift . aK4eb2) (fxand . aK4eb1) (fx>? . aK4eb0) (fx>=? . aK4eaf) (fx=? . aK4eae) (fx<? . aK4ead) (fx<=? . aK4eac) (fx-/carry . aK4eab) (fx- . aK4eaa) (fx+/carry . aK4ea9) (fx+ . aK4ea8) (fx*/carry . aK4ea7) (fx* . aK4ea6) (greatest-fixnum . aK4ea5) (least-fixnum . aK4ea4) (fixnum-width . aK4ea3) (fixnum? . aK4ea2)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5145 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . aK4f00) (no-infinities-violation? . aK4eff) (make-no-nans-violation . aK4efe) (make-no-infinities-violation . aK4efd) (real->flonum . aK4efc) (flzero? . aK4efb) (fltruncate . aK4efa) (fltan . aK4ef9) (flsqrt . aK4ef8) (flsin . aK4ef7) (flround . aK4ef6) (flpositive? . aK4ef5) (flonum? . aK4ef4) (flodd? . aK4ef3) (flnumerator . aK4ef2) (flnegative? . aK4ef1) (flnan? . aK4ef0) (flmod0 . aK4eef) (flmod . aK4eee) (flmin . aK4eed) (flmax . aK4eec) (fllog . aK4eeb) (flinteger? . aK4eea) (flinfinite? . aK4ee9) (flfloor . aK4ee8) (flfinite? . aK4ee7) (flexpt . aK4ee6) (flexp . aK4ee5) (fleven? . aK4ee4) (fldiv0-and-mod0 . aK4ee3) (fldiv0 . aK4ee2) (fldiv-and-mod . aK4ee1) (fldiv . aK4ee0) (fldenominator . aK4edf) (flcos . aK4ede) (flceiling . aK4edd) (flatan . aK4edc) (flasin . aK4edb) (flacos . aK4eda) (flabs . aK4ed9) (fl>? . aK4ed8) (fl>=? . aK4ed7) (fl=? . aK4ed6) (fl<? . aK4ed5) (fl<=? . aK4ed4) (fl/ . aK4ed3) (fl- . aK4ed2) (fl+ . aK4ed1) (fl* . aK4ed0) (fixnum->flonum . aK4ecf) (&no-nans . aK4ded) (&no-infinities . aK4dec)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5146 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . aK5015) (string-ci-hash . aK5014) (string-hash . aK5013) (equal-hash . aK5012) (hashtable-equivalence-function . aK5011) (make-hashtable . aK5010) (hashtable-hash-function . aK500f) (make-eqv-hashtable . aK500e) (make-eq-hashtable . aK500d) (hashtable? . aK500c) (hashtable-update! . aK500b) (hashtable-size . aK500a) (hashtable-set! . aK5009) (hashtable-ref . aK5008) (hashtable-mutable? . aK5007) (hashtable-keys . aK5006) (hashtable-entries . aK5005) (hashtable-delete! . aK5004) (hashtable-copy . aK5003) (hashtable-contains? . aK5002) (hashtable-clear! . aK5001)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5147 '(rnrs io ports) '(6) '() '() '() '((eof-object? . aK4ff1) (eof-object . aK4ff0) (current-error-port . aK4fef) (current-output-port . aK4fee) (current-input-port . aK4fed) (output-port? . aK4fec) (input-port? . aK4feb) (utf-8-codec . aK4fea) (utf-16-codec . aK4fe9) (transcoder-error-handling-mode . aK4fe8) (transcoder-eol-style . aK4fe7) (transcoder-codec . aK4fe6) (transcoded-port . aK4fe5) (textual-port? . aK4fe4) (string->bytevector . aK4fe3) (standard-output-port . aK4fe2) (standard-input-port . aK4fe1) (standard-error-port . aK4fe0) (set-port-position! . aK4fdf) (put-u8 . aK4fde) (put-string . aK4fdd) (put-datum . aK4fdc) (put-char . aK4fdb) (put-bytevector . aK4fda) (port? . aK4fd9) (port-transcoder . aK4fd8) (port-position . aK4fd7) (port-has-set-port-position!? . aK4fd6) (port-has-port-position? . aK4fd5) (port-eof? . aK4fd4) (output-port-buffer-mode . aK4fd3) (open-string-output-port . aK4fd2) (open-string-input-port . aK4fd1) (open-file-output-port . aK4fd0) (open-file-input/output-port . aK4fcf) (open-file-input-port . aK4fce) (open-bytevector-output-port . aK4fcd) (open-bytevector-input-port . aK4fcc) (native-transcoder . aK4fcb) (native-eol-style . aK4fca) (make-transcoder . aK4fc9) (latin-1-codec . aK4fc8) (make-i/o-write-error . aK4fc7) (make-i/o-read-error . aK4fc6) (make-i/o-port-error . aK4fc5) (make-i/o-invalid-position-error . aK4fc4) (make-i/o-filename-error . aK4fc3) (make-i/o-file-protection-error . aK4fc2) (make-i/o-file-is-read-only-error . aK4fc1) (make-i/o-file-does-not-exist-error . aK4fc0) (make-i/o-file-already-exists-error . aK4fbf) (make-i/o-error . aK4fbe) (make-i/o-encoding-error . aK4fbd) (make-i/o-decoding-error . aK4fbc) (make-custom-textual-output-port . aK4fbb) (make-custom-textual-input/output-port . aK4fba) (make-custom-textual-input-port . aK4fb9) (make-custom-binary-output-port . aK4fb8) (make-custom-binary-input/output-port . aK4fb7) (make-custom-binary-input-port . aK4fb6) (lookahead-u8 . aK4fb4) (lookahead-char . aK4fb3) (i/o-write-error? . aK4fb2) (i/o-read-error? . aK4fb1) (i/o-port-error? . aK4fb0) (i/o-invalid-position-error? . aK4faf) (i/o-filename-error? . aK4fae) (i/o-file-protection-error? . aK4fad) (i/o-file-is-read-only-error? . aK4fac) (i/o-file-does-not-exist-error? . aK4fab) (i/o-file-already-exists-error? . aK4faa) (i/o-error? . aK4fa9) (i/o-error-position . aK4fa8) (i/o-error-port . aK4fa7) (i/o-error-filename . aK4fa6) (i/o-encoding-error? . aK4fa5) (i/o-encoding-error-char . aK4fa4) (i/o-decoding-error? . aK4fa3) (get-u8 . aK4fa2) (get-string-n! . aK4fa1) (get-string-n . aK4fa0) (get-string-all . aK4f9f) (get-line . aK4f9e) (get-datum . aK4f9d) (get-char . aK4f9c) (get-bytevector-some . aK4f9b) (get-bytevector-n! . aK4f9a) (get-bytevector-n . aK4f99) (get-bytevector-all . aK4f98) (flush-output-port . aK4f97) (close-port . aK4f96) (call-with-string-output-port . aK4f75) (call-with-port . aK4f74) (call-with-bytevector-output-port . aK4f73) (bytevector->string . aK4f72) (buffer-mode? . aK4f71) (binary-port? . aK4f70) (&i/o-encoding . aK4deb) (&i/o-decoding . aK4dea) (&i/o-port . aK4de9) (&i/o-file-does-not-exist . aK4de8) (&i/o-file-already-exists . aK4de7) (&i/o-file-is-read-only . aK4de6) (&i/o-file-protection . aK4de5) (&i/o-filename . aK4de4) (&i/o-invalid-position . aK4de3) (&i/o-write . aK4de2) (&i/o-read . aK4de1) (&i/o . aK4de0) (error-handling-mode . aK4dc5) (file-options . aK4dc4) (buffer-mode . aK4dc3) (eol-style . aK4dc2)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5148 '(rnrs enums) '(6) '() '() '() '((make-enumeration . aK4f6c) (enum-set=? . aK4f6b) (enum-set-universe . aK4f6a) (enum-set-union . aK4f69) (enum-set-subset? . aK4f68) (enum-set-projection . aK4f67) (enum-set-member? . aK4f66) (enum-set-intersection . aK4f65) (enum-set-indexer . aK4f64) (enum-set-difference . aK4f63) (enum-set-constructor . aK4f62) (enum-set-complement . aK4f61) (enum-set->list . aK4f60) (define-enumeration . aK4dd0)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK5149 '(rnrs conditions) '(6) '() '() '() '((who-condition? . aK4f5f) (warning? . aK4f5e) (violation? . aK4f5d) (undefined-violation? . aK4f5c) (syntax-violation? . aK4f5b) (syntax-violation-subform . aK4f5a) (syntax-violation-form . aK4f59) (syntax-violation . aK319d) (simple-conditions . aK4f58) (serious-condition? . aK4f57) (non-continuable-violation? . aK4f56) (message-condition? . aK4f55) (make-who-condition . aK4f54) (make-warning . aK4f53) (make-violation . aK4f52) (make-undefined-violation . aK4f51) (make-syntax-violation . aK4f50) (make-serious-condition . aK4f4f) (make-non-continuable-violation . aK4f4e) (make-message-condition . aK4f4d) (make-lexical-violation . aK4f4c) (make-irritants-condition . aK4f4b) (make-implementation-restriction-violation . aK4f4a) (make-error . aK4f49) (make-assertion-violation . aK4f48) (lexical-violation? . aK4f47) (irritants-condition? . aK4f46) (implementation-restriction-violation? . aK4f45) (error? . aK4f44) (condition-who . aK4f43) (condition-predicate . aK4f42) (condition-message . aK4f41) (condition-irritants . aK4f40) (condition-accessor . aK4f3f) (condition . aK4f3e) (assertion-violation? . aK4f3d) (condition? . aK4f3c) (&undefined . aK4ddf) (&syntax . aK4dde) (&lexical . aK4ddd) (&implementation-restriction . aK4ddc) (&non-continuable . aK4ddb) (&who . aK4dda) (&irritants . aK4dd9) (&assertion . aK4dd8) (&violation . aK4dd7) (&error . aK4dd6) (&serious . aK4dd5) (&warning . aK4dd4) (&message . aK4dd3) (&condition . aK4dd2) (define-condition-type . aK4dd1)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK514a '(rnrs records inspection) '(6) '() '() '() '((record? . aK5024) (record-type-uid . aK5023) (record-type-sealed? . aK5022) (record-type-parent . aK5021) (record-type-opaque? . aK5020) (record-type-name . aK501f) (record-type-generative? . aK501e) (record-type-field-names . aK501d) (record-rtd . aK501c) (record-field-mutable? . aK501b)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK514b '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . aK502b) (record-predicate . aK502a) (record-mutator . aK5029) (record-constructor . aK5028) (record-accessor . aK5027) (make-record-type-descriptor . aK5026) (make-record-constructor-descriptor . aK5025)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK514c '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . aK4dcf) (parent-rtd . aK4dce) (nongenerative . aK4dcd) (opaque . aK4dcc) (sealed . aK4dcb) (protocol . aK4dca) (parent . aK4dc9) (immutable . aK4dc8) (mutable . aK4dc7) (fields . aK4dc6) (record-constructor-descriptor . aK4da6) (record-type-descriptor . aK4da5)) '() values values '#f '#f '#t '#f) (aK2cd1@aK2b1d@install-library 'aK514d '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . aK512d) (&no-nans-rtd . aK512c) (&no-infinities-rcd . aK512b) (&no-infinities-rtd . aK512a) (&i/o-encoding-rcd . aK5129) (&i/o-encoding-rtd . aK5128) (&i/o-decoding-rcd . aK5127) (&i/o-decoding-rtd . aK5126) (&i/o-port-rcd . aK5125) (&i/o-port-rtd . aK5124) (&i/o-file-does-not-exist-rcd . aK5123) (&i/o-file-does-not-exist-rtd . aK5122) (&i/o-file-already-exists-rcd . aK5121) (&i/o-file-already-exists-rtd . aK5120) (&i/o-file-is-read-only-rcd . aK511f) (&i/o-file-is-read-only-rtd . aK511e) (&i/o-file-protection-rcd . aK511d) (&i/o-file-protection-rtd . aK511c) (&i/o-filename-rcd . aK511b) (&i/o-filename-rtd . aK511a) (&i/o-invalid-position-rcd . aK5119) (&i/o-invalid-position-rtd . aK5118) (&i/o-write-rcd . aK5117) (&i/o-write-rtd . aK5116) (&i/o-read-rcd . aK5115) (&i/o-read-rtd . aK5114) (&i/o-rcd . aK5113) (&i/o-rtd . aK5112) (&undefined-rcd . aK5111) (&undefined-rtd . aK5110) (&syntax-rcd . aK510f) (&syntax-rtd . aK510e) (&lexical-rcd . aK510d) (&lexical-rtd . aK510c) (&implementation-restriction-rcd . aK510b) (&implementation-restriction-rtd . aK510a) (&non-continuable-rcd . aK5109) (&non-continuable-rtd . aK5108) (&who-rcd . aK5107) (&who-rtd . aK5106) (&irritants-rcd . aK5105) (&irritants-rtd . aK5104) (&assertion-rcd . aK5103) (&assertion-rtd . aK5102) (&violation-rcd . aK5101) (&violation-rtd . aK5100) (&error-rcd . aK50ff) (&error-rtd . aK50fe) (&serious-rcd . aK50fd) (&serious-rtd . aK50fc) (&warning-rcd . aK50fb) (&warning-rtd . aK50fa) (&message-rcd . aK50f9) (&message-rtd . aK50f8) (&condition-rcd . aK50f7) (&condition-rtd . aK50f6) (syntax-error . aK3199) (syntax-dispatch . aK30bd) (pretty-print . aK50f5) (eval-core . aK50f4) (set-symbol-value! . aK50f3) (symbol-value . aK50f2) (gensym . aK50f1) (void . aK50f0) (load . aK4c26) (interaction-environment . aK31ab) (char-ready? . aK50ef) (regexp? . aK50ee) (read-line . aK50ed) (gensym-prefix-set! . aK50ec) (ungensym . aK50eb) (alist->eq-hash-table . aK50ea) (assoc-ref . aK50e9) (print . aK50e8) (format . aK50e7) (host-os . aK50e6) (library-path . aK2afc) (standard-library-path . aK50e5) (%monapi-name-whereis . aK50e4) (%monapi-message-send . aK50e3) (file-newer? . aK50e2) (stat-mtime . aK50e1) (write-to-file . aK50e0) (file->list . aK50df) (file->string . aK50de) (digit->integer . aK50dd) (call-with-string-input-port . aK50dc) (call-with-string-io . aK50db) (string-split . aK50da) (bytevector-for-each . aK50d9) (string->regexp . aK50d8) (rxmatch . aK50d7) (regexp-replace-all . aK50d6) (hashtable-for-each . aK50d5) (mosh-cache-dir . aK28e6) (call-process . aK50d4) (local-tz-offset . aK50d3) (microseconds . aK50d2) (directory-list . aK50d1) (set-current-directory! . aK50d0) (expand-path . aK50cf) (current-directory . aK50ce) (%spawn . aK50cd) (%waitpid . aK50cc) (simple-struct-name . aK50cb) (simple-struct-set! . aK50ca) (simple-struct-ref . aK50c9) (make-simple-struct . aK50c8) (simple-struct? . aK50c7) (pointer-ref-c-int64 . aK50c6) (pointer-ref-c-int32 . aK50c5) (pointer-ref-c-int16 . aK50c4) (pointer-ref-c-int8 . aK50c3) (pointer-ref-c-uint64 . aK50c2) (pointer-ref-c-uint32 . aK50c1) (pointer-ref-c-uint16 . aK50c0) (pointer-ref-c-uint8 . aK50bf) (pointer-set-c-uint64! . aK50be) (pointer-set-c-uint32! . aK50bd) (pointer-set-c-uint16! . aK50bc) (pointer-set-c-uint8! . aK50bb) (pointer-set-c-int64! . aK50ba) (pointer-set-c-int32! . aK50b9) (pointer-set-c-int16! . aK50b8) (pointer-set-c-int8! . aK50b7) (pointer-set-c-pointer! . aK50b6) (pointer-set-c-double! . aK50b5) (pointer-set-c-float! . aK50b4) (pointer-set-c-long-long! . aK50b3) (pointer-set-c-long! . aK50b2) (pointer-set-c-int! . aK50b1) (pointer-set-c-short! . aK50b0) (pointer-set-c-char! . aK50af) (pointer-ref-c-pointer . aK50ae) (pointer-ref-c-double . aK50ad) (pointer-ref-c-float . aK50ac) (pointer-ref-c-unsigned-long-long . aK50ab) (pointer-ref-c-signed-long-long . aK50aa) (pointer-ref-c-unsigned-long . aK50a9) (pointer-ref-c-signed-long . aK50a8) (pointer-ref-c-unsigned-int . aK50a7) (pointer-ref-c-signed-int . aK50a6) (pointer-ref-c-unsigned-short . aK50a5) (pointer-ref-c-signed-short . aK50a4) (pointer-ref-c-unsigned-char . aK50a3) (pointer-ref-c-signed-char . aK50a2) (pointer->integer . aK50a1) (integer->pointer . aK50a0) (pointer? . aK509f) (shared-errno . aK509e) (%ffi-free-c-callback-trampoline . aK509d) (%ffi-make-c-callback-trampoline . aK509c) (%ffi-free . aK509b) (%ffi-malloc . aK509a) (%ffi-supported? . aK5099) (%ffi-pointer->string . aK5098) (%ffi-call . aK5097) (%ffi-lookup . aK5096) (%ffi-open . aK5095) (null-terminated-utf8->string . aK5094) (null-terminated-bytevector->string . aK5093) (%exec . aK5092) (%fork . aK5091) (%pipe . aK5090) (p . aK508f) (open-output-string . aK508e) (get-output-string . aK508d) (file-stat-ctime . aK508c) (file-stat-atime . aK508b) (file-stat-mtime . aK508a) (file-size-in-bytes . aK5089) (file-writable? . aK5088) (file-executable? . aK5087) (file-readable? . aK5086) (file-regular? . aK5085) (file-symbolic-link? . aK5084) (file-directory? . aK5083) (create-symbolic-link . aK5082) (rename-file . aK5081) (delete-directory . aK5080) (create-directory . aK507f) (create-mosh-cache-dir . aK507e) (get-environment-variables . aK507d) (current-exception-handler . aK507c) (get-environment-variable . aK507b) (join-wraps . aK507a) (id->real-label . aK5079) (same-marks? . aK5078) (same-marks*? . aK5077) (get-timeofday . aK5076) (get-command-line . aK5075) (sys-display . aK5074) (whereis . aK5073) (register . aK5072) (vm-join! . aK5071) (vm-set-value! . aK5070) (vm? . aK506f) (main-vm? . aK506e) (vm-eval . aK506d) (vm-self . aK506c) (vm-start! . aK506b) (make-vm . aK506a) (mutex-try-lock! . aK5069) (mutex-unlock! . aK5068) (mutex-lock! . aK5067) (mutex? . aK5066) (make-mutex . aK5065) (condition-variable-notify-all! . aK5064) (condition-variable-notify! . aK5063) (condition-variable-wait! . aK5062) (make-condition-variable . aK5061) (write/ss . aK5060) (mosh-executable-path . aK505f) (make-file-options . aK505e) (source-info . aK505d) (make-compiler-instruction . aK505c) (make-instruction . aK505b) (set-source-info! . aK505a) (bignum? . aK5059) (fast-equal? . aK5058) (fasl-read . aK5057) (fasl-write . aK5056) (time-usage . aK5055) (os-constant . aK5054) (disasm . aK5053) (make-parameter . aK28e4) (socket-port . aK5052) (socket-shutdown . aK5051) (socket-close . aK5050) (socket-send . aK504f) (socket-recv! . aK504e) (socket-recv . aK504d) (make-server-socket . aK504c) (make-client-socket . aK504b) (socket-accept . aK504a) (socket? . aK5049) (string-upcase . aK5048) (string-titlecase . aK5047) (string-normalize-nfkd . aK5046) (string-normalize-nfkc . aK5045) (string-normalize-nfd . aK5044) (string-normalize-nfc . aK5043) (string-foldcase . aK5042) (string-downcase . aK5041) (string-ci>? . aK5040) (string-ci>=? . aK503f) (string-ci=? . aK503e) (string-ci<? . aK503d) (string-ci<=? . aK503c) (char-whitespace? . aK503b) (char-upper-case? . aK503a) (char-title-case? . aK5039) (char-numeric? . aK5038) (char-lower-case? . aK5037) (char-general-category . aK5036) (char-upcase . aK5035) (char-titlecase . aK5034) (char-foldcase . aK5033) (char-downcase . aK5032) (char-ci>? . aK5031) (char-ci>=? . aK5030) (char-ci=? . aK502f) (char-ci<? . aK502e) (char-ci<=? . aK502d) (char-alphabetic? . aK502c) (make-variable-transformer . aK2ee8) (identifier? . aK319f) (generate-temporaries . aK318b) (free-identifier=? . aK318d) (syntax->datum . aK31a3) (datum->syntax . aK31a1) (bound-identifier=? . aK318f) (record-type-descriptor? . aK502b) (record-predicate . aK502a) (record-mutator . aK5029) (record-constructor . aK5028) (record-accessor . aK5027) (make-record-type-descriptor . aK5026) (make-record-constructor-descriptor . aK5025) (record? . aK5024) (record-type-uid . aK5023) (record-type-sealed? . aK5022) (record-type-parent . aK5021) (record-type-opaque? . aK5020) (record-type-name . aK501f) (record-type-generative? . aK501e) (record-type-field-names . aK501d) (record-rtd . aK501c) (record-field-mutable? . aK501b) (delete-file . aK501a) (file-exists? . aK5019) (vector-sort! . aK5018) (vector-sort . aK5017) (list-sort . aK5016) (symbol-hash . aK5015) (string-ci-hash . aK5014) (string-hash . aK5013) (equal-hash . aK5012) (hashtable-equivalence-function . aK5011) (make-hashtable . aK5010) (hashtable-hash-function . aK500f) (make-eqv-hashtable . aK500e) (make-eq-hashtable . aK500d) (hashtable? . aK500c) (hashtable-update! . aK500b) (hashtable-size . aK500a) (hashtable-set! . aK5009) (hashtable-ref . aK5008) (hashtable-mutable? . aK5007) (hashtable-keys . aK5006) (hashtable-entries . aK5005) (hashtable-delete! . aK5004) (hashtable-copy . aK5003) (hashtable-contains? . aK5002) (hashtable-clear! . aK5001) (call-with-output-file . aK5000) (call-with-input-file . aK4fff) (write-char . aK4ffe) (write . aK4ffd) (with-output-to-file . aK4ffc) (with-input-from-file . aK4ffb) (read-char . aK4ffa) (read . aK4ff9) (peek-char . aK4ff8) (open-output-file . aK4ff7) (open-input-file . aK4ff6) (newline . aK4ff5) (display . aK4ff4) (close-output-port . aK4ff3) (close-input-port . aK4ff2) (eof-object? . aK4ff1) (eof-object . aK4ff0) (current-error-port . aK4fef) (current-output-port . aK4fee) (current-input-port . aK4fed) (output-port? . aK4fec) (input-port? . aK4feb) (utf-8-codec . aK4fea) (utf-16-codec . aK4fe9) (transcoder-error-handling-mode . aK4fe8) (transcoder-eol-style . aK4fe7) (transcoder-codec . aK4fe6) (transcoded-port . aK4fe5) (textual-port? . aK4fe4) (string->bytevector . aK4fe3) (standard-output-port . aK4fe2) (standard-input-port . aK4fe1) (standard-error-port . aK4fe0) (set-port-position! . aK4fdf) (put-u8 . aK4fde) (put-string . aK4fdd) (put-datum . aK4fdc) (put-char . aK4fdb) (put-bytevector . aK4fda) (port? . aK4fd9) (port-transcoder . aK4fd8) (port-position . aK4fd7) (port-has-set-port-position!? . aK4fd6) (port-has-port-position? . aK4fd5) (port-eof? . aK4fd4) (output-port-buffer-mode . aK4fd3) (open-string-output-port . aK4fd2) (open-string-input-port . aK4fd1) (open-file-output-port . aK4fd0) (open-file-input/output-port . aK4fcf) (open-file-input-port . aK4fce) (open-bytevector-output-port . aK4fcd) (open-bytevector-input-port . aK4fcc) (native-transcoder . aK4fcb) (native-eol-style . aK4fca) (make-transcoder . aK4fc9) (latin-1-codec . aK4fc8) (make-i/o-write-error . aK4fc7) (make-i/o-read-error . aK4fc6) (make-i/o-port-error . aK4fc5) (make-i/o-invalid-position-error . aK4fc4) (make-i/o-filename-error . aK4fc3) (make-i/o-file-protection-error . aK4fc2) (make-i/o-file-is-read-only-error . aK4fc1) (make-i/o-file-does-not-exist-error . aK4fc0) (make-i/o-file-already-exists-error . aK4fbf) (make-i/o-error . aK4fbe) (make-i/o-encoding-error . aK4fbd) (make-i/o-decoding-error . aK4fbc) (make-custom-textual-output-port . aK4fbb) (make-custom-textual-input/output-port . aK4fba) (make-custom-textual-input-port . aK4fb9) (make-custom-binary-output-port . aK4fb8) (make-custom-binary-input/output-port . aK4fb7) (make-custom-binary-input-port . aK4fb6) (make-bytevector . aK4fb5) (lookahead-u8 . aK4fb4) (lookahead-char . aK4fb3) (i/o-write-error? . aK4fb2) (i/o-read-error? . aK4fb1) (i/o-port-error? . aK4fb0) (i/o-invalid-position-error? . aK4faf) (i/o-filename-error? . aK4fae) (i/o-file-protection-error? . aK4fad) (i/o-file-is-read-only-error? . aK4fac) (i/o-file-does-not-exist-error? . aK4fab) (i/o-file-already-exists-error? . aK4faa) (i/o-error? . aK4fa9) (i/o-error-position . aK4fa8) (i/o-error-port . aK4fa7) (i/o-error-filename . aK4fa6) (i/o-encoding-error? . aK4fa5) (i/o-encoding-error-char . aK4fa4) (i/o-decoding-error? . aK4fa3) (get-u8 . aK4fa2) (get-string-n! . aK4fa1) (get-string-n . aK4fa0) (get-string-all . aK4f9f) (get-line . aK4f9e) (get-datum . aK4f9d) (get-char . aK4f9c) (get-bytevector-some . aK4f9b) (get-bytevector-n! . aK4f9a) (get-bytevector-n . aK4f99) (get-bytevector-all . aK4f98) (flush-output-port . aK4f97) (close-port . aK4f96) (scheme-report-environment . aK3179) (quotient . aK4f95) (null-environment . aK3177) (remainder . aK4f94) (modulo . aK4f93) (inexact->exact . aK4f92) (force . aK4f91) (exact->inexact . aK4f90) (make-promise . aK4f8f) (exit . aK4f8e) (command-line . aK4c20) (string-fill! . aK4f8d) (string-set! . aK4f8c) (set-cdr! . aK4f8b) (set-car! . aK4f8a) (remove . aK4f89) (remv . aK4f88) (remp . aK4f87) (remq . aK4f86) (partition . aK4f85) (memv . aK4f84) (memq . aK4f83) (memp . aK4f82) (member . aK4f81) (exists . aK4f80) (for-all . aK4f7f) (fold-right . aK4f7e) (fold-left . aK4f7d) (find . aK4f7c) (filter . aK4f7b) (cons* . aK4f7a) (assv . aK4f79) (assq . aK4f78) (assp . aK4f77) (assoc . aK4f76) (call-with-string-output-port . aK4f75) (call-with-port . aK4f74) (call-with-bytevector-output-port . aK4f73) (bytevector->string . aK4f72) (buffer-mode? . aK4f71) (binary-port? . aK4f70) (with-exception-handler . aK4f6f) (raise-continuable . aK4f6e) (raise . aK4f6d) (eval . aK317d) (environment . aK3175) (make-enumeration . aK4f6c) (enum-set=? . aK4f6b) (enum-set-universe . aK4f6a) (enum-set-union . aK4f69) (enum-set-subset? . aK4f68) (enum-set-projection . aK4f67) (enum-set-member? . aK4f66) (enum-set-intersection . aK4f65) (enum-set-indexer . aK4f64) (enum-set-difference . aK4f63) (enum-set-constructor . aK4f62) (enum-set-complement . aK4f61) (enum-set->list . aK4f60) (who-condition? . aK4f5f) (warning? . aK4f5e) (violation? . aK4f5d) (undefined-violation? . aK4f5c) (syntax-violation? . aK4f5b) (syntax-violation-subform . aK4f5a) (syntax-violation-form . aK4f59) (syntax-violation . aK319d) (simple-conditions . aK4f58) (serious-condition? . aK4f57) (non-continuable-violation? . aK4f56) (message-condition? . aK4f55) (make-who-condition . aK4f54) (make-warning . aK4f53) (make-violation . aK4f52) (make-undefined-violation . aK4f51) (make-syntax-violation . aK4f50) (make-serious-condition . aK4f4f) (make-non-continuable-violation . aK4f4e) (make-message-condition . aK4f4d) (make-lexical-violation . aK4f4c) (make-irritants-condition . aK4f4b) (make-implementation-restriction-violation . aK4f4a) (make-error . aK4f49) (make-assertion-violation . aK4f48) (lexical-violation? . aK4f47) (irritants-condition? . aK4f46) (implementation-restriction-violation? . aK4f45) (error? . aK4f44) (condition-who . aK4f43) (condition-predicate . aK4f42) (condition-message . aK4f41) (condition-irritants . aK4f40) (condition-accessor . aK4f3f) (condition . aK4f3e) (assertion-violation? . aK4f3d) (condition? . aK4f3c) (utf32->string . aK4f3b) (utf16->string . aK4f3a) (utf8->string . aK4f39) (uint-list->bytevector . aK4f38) (u8-list->bytevector . aK4f37) (string->utf8 . aK4f36) (string->utf32 . aK4f35) (string->utf16 . aK4f34) (sint-list->bytevector . aK4f33) (native-endianness . aK4f32) (bytevector? . aK4f31) (bytevector=? . aK4f30) (bytevector-uint-set! . aK4f2f) (bytevector-uint-ref . aK4f2e) (bytevector-u8-set! . aK4f2d) (bytevector-u8-ref . aK4f2c) (bytevector-u64-set! . aK4f2b) (bytevector-u64-ref . aK4f2a) (bytevector-u64-native-set! . aK4f29) (bytevector-u64-native-ref . aK4f28) (bytevector-u32-set! . aK4f27) (bytevector-u32-ref . aK4f26) (bytevector-u32-native-set! . aK4f25) (bytevector-u32-native-ref . aK4f24) (bytevector-u16-set! . aK4f23) (bytevector-u16-ref . aK4f22) (bytevector-u16-native-set! . aK4f21) (bytevector-u16-native-ref . aK4f20) (bytevector-sint-set! . aK4f1f) (bytevector-sint-ref . aK4f1e) (bytevector-s8-set! . aK4f1d) (bytevector-s8-ref . aK4f1c) (bytevector-s64-set! . aK4f1b) (bytevector-s64-ref . aK4f1a) (bytevector-s64-native-set! . aK4f19) (bytevector-s64-native-ref . aK4f18) (bytevector-s32-set! . aK4f17) (bytevector-s32-ref . aK4f16) (bytevector-s32-native-set! . aK4f15) (bytevector-s32-native-ref . aK4f14) (bytevector-s16-set! . aK4f13) (bytevector-s16-ref . aK4f12) (bytevector-s16-native-set! . aK4f11) (bytevector-s16-native-ref . aK4f10) (bytevector-length . aK4f0f) (bytevector-ieee-single-ref . aK4f0e) (bytevector-ieee-single-set! . aK4f0d) (bytevector-ieee-single-native-set! . aK4f0c) (bytevector-ieee-single-native-ref . aK4f0b) (bytevector-ieee-double-set! . aK4f0a) (bytevector-ieee-double-ref . aK4f09) (bytevector-ieee-double-native-set! . aK4f08) (bytevector-ieee-double-native-ref . aK4f07) (bytevector-fill! . aK4f06) (bytevector-copy! . aK4f05) (bytevector-copy . aK4f04) (bytevector->uint-list . aK4f03) (bytevector->u8-list . aK4f02) (bytevector->sint-list . aK4f01) (no-nans-violation? . aK4f00) (no-infinities-violation? . aK4eff) (make-no-nans-violation . aK4efe) (make-no-infinities-violation . aK4efd) (real->flonum . aK4efc) (flzero? . aK4efb) (fltruncate . aK4efa) (fltan . aK4ef9) (flsqrt . aK4ef8) (flsin . aK4ef7) (flround . aK4ef6) (flpositive? . aK4ef5) (flonum? . aK4ef4) (flodd? . aK4ef3) (flnumerator . aK4ef2) (flnegative? . aK4ef1) (flnan? . aK4ef0) (flmod0 . aK4eef) (flmod . aK4eee) (flmin . aK4eed) (flmax . aK4eec) (fllog . aK4eeb) (flinteger? . aK4eea) (flinfinite? . aK4ee9) (flfloor . aK4ee8) (flfinite? . aK4ee7) (flexpt . aK4ee6) (flexp . aK4ee5) (fleven? . aK4ee4) (fldiv0-and-mod0 . aK4ee3) (fldiv0 . aK4ee2) (fldiv-and-mod . aK4ee1) (fldiv . aK4ee0) (fldenominator . aK4edf) (flcos . aK4ede) (flceiling . aK4edd) (flatan . aK4edc) (flasin . aK4edb) (flacos . aK4eda) (flabs . aK4ed9) (fl>? . aK4ed8) (fl>=? . aK4ed7) (fl=? . aK4ed6) (fl<? . aK4ed5) (fl<=? . aK4ed4) (fl/ . aK4ed3) (fl- . aK4ed2) (fl+ . aK4ed1) (fl* . aK4ed0) (fixnum->flonum . aK4ecf) (fxzero? . aK4ece) (fxxor . aK4ecd) (fxrotate-bit-field . aK4ecc) (fxreverse-bit-field . aK4ecb) (fxpositive? . aK4eca) (fxodd? . aK4ec9) (fxnot . aK4ec8) (fxnegative? . aK4ec7) (fxmod0 . aK4ec6) (fxmod . aK4ec5) (fxmin . aK4ec4) (fxmax . aK4ec3) (fxlength . aK4ec2) (fxior . aK4ec1) (fxif . aK4ec0) (fxfirst-bit-set . aK4ebf) (fxeven? . aK4ebe) (fxdiv0-and-mod0 . aK4ebd) (fxdiv0 . aK4ebc) (fxdiv-and-mod . aK4ebb) (fxdiv . aK4eba) (fxcopy-bit-field . aK4eb9) (fxcopy-bit . aK4eb8) (fxbit-set? . aK4eb7) (fxbit-field . aK4eb6) (fxbit-count . aK4eb5) (fxarithmetic-shift-right . aK4eb4) (fxarithmetic-shift-left . aK4eb3) (fxarithmetic-shift . aK4eb2) (fxand . aK4eb1) (fx>? . aK4eb0) (fx>=? . aK4eaf) (fx=? . aK4eae) (fx<? . aK4ead) (fx<=? . aK4eac) (fx-/carry . aK4eab) (fx- . aK4eaa) (fx+/carry . aK4ea9) (fx+ . aK4ea8) (fx*/carry . aK4ea7) (fx* . aK4ea6) (greatest-fixnum . aK4ea5) (least-fixnum . aK4ea4) (fixnum-width . aK4ea3) (fixnum? . aK4ea2) (bitwise-rotate-bit-field . aK4ea1) (bitwise-reverse-bit-field . aK4ea0) (bitwise-length . aK4e9f) (bitwise-if . aK4e9e) (bitwise-first-bit-set . aK4e9d) (bitwise-copy-bit-field . aK4e9c) (bitwise-copy-bit . aK4e9b) (bitwise-bit-set? . aK4e9a) (bitwise-bit-field . aK4e99) (bitwise-bit-count . aK4e98) (bitwise-xor . aK4e97) (bitwise-ior . aK4e96) (bitwise-and . aK4e95) (bitwise-not . aK4e94) (bitwise-arithmetic-shift-right . aK4e93) (bitwise-arithmetic-shift-left . aK4e92) (bitwise-arithmetic-shift . aK4e91) (zero? . aK4e90) (vector? . aK4e8f) (vector-set! . aK4e8e) (vector-ref . aK4e8d) (vector-map . aK4e8c) (vector-length . aK4e8b) (vector-for-each . aK4e8a) (vector-fill! . aK4e89) (vector->list . aK4e88) (vector . aK4e87) (values . aK4e86) (truncate . aK4e85) (tan . aK4e84) (symbol? . aK4e83) (symbol=? . aK4e82) (symbol->string . aK4e81) (substring . aK4e80) (string? . aK4e7f) (string>? . aK4e7e) (string>=? . aK4e7d) (string=? . aK4e7c) (string<? . aK4e7b) (string<=? . aK4e7a) (string-ref . aK4e79) (string-length . aK4e78) (string-for-each . aK4e77) (string-copy . aK4e76) (string-append . aK4e75) (string->symbol . aK4e74) (string->number . aK4e73) (string->list . aK4e72) (string . aK4e71) (sqrt . aK4e70) (sin . aK4e6f) (round . aK4e6e) (reverse . aK4e6d) (real? . aK4e6c) (real-valued? . aK4e6b) (real-part . aK4e6a) (rationalize . aK4e69) (rational? . aK4e68) (rational-valued? . aK4e67) (procedure? . aK4e66) (positive? . aK4e65) (pair? . aK4e64) (odd? . aK4e63) (numerator . aK4e62) (number? . aK4e61) (number->string . aK4e60) (null? . aK4e5f) (not . aK4e5e) (negative? . aK4e5d) (nan? . aK4e5c) (min . aK4e5b) (max . aK4e5a) (map . aK4e59) (make-vector . aK4e58) (make-string . aK4e57) (make-rectangular . aK4e56) (make-polar . aK4e55) (magnitude . aK4e54) (log . aK4e53) (list? . aK4e52) (list-tail . aK4e51) (list-ref . aK4e50) (list->vector . aK4e4f) (list->string . aK4e4e) (list . aK4e4d) (length . aK4e4c) (lcm . aK4e4b) (integer? . aK4e4a) (integer-valued? . aK4e49) (integer->char . aK4e48) (infinite? . aK4e47) (inexact? . aK4e46) (inexact . aK4e45) (imag-part . aK4e44) (gcd . aK4e43) (for-each . aK4e42) (floor . aK4e41) (finite? . aK4e40) (expt . aK4e3f) (exp . aK4e3e) (exact? . aK4e3d) (exact-integer-sqrt . aK4e3c) (exact . aK4e3b) (even? . aK4e3a) (error . aK4e39) (eqv? . aK4e38) (equal? . aK4e37) (eq? . aK4e36) (dynamic-wind . aK4e35) (div0-and-mod0 . aK4e34) (mod0 . aK4e33) (div0 . aK4e32) (div-and-mod . aK4e31) (mod . aK4e30) (div . aK4e2f) (denominator . aK4e2e) (cos . aK4e2d) (cons . aK4e2c) (complex? . aK4e2b) (char? . aK4e2a) (char>? . aK4e29) (char>=? . aK4e28) (char=? . aK4e27) (char<? . aK4e26) (char<=? . aK4e25) (char->integer . aK4e24) (ceiling . aK4e23) (call-with-values . aK4e22) (call/cc . aK4e21) (call-with-current-continuation . aK4e20) (cddddr . aK4e1f) (cdddar . aK4e1e) (cddadr . aK4e1d) (cddaar . aK4e1c) (cdaddr . aK4e1b) (cdadar . aK4e1a) (cdaadr . aK4e19) (cdaaar . aK4e18) (cadddr . aK4e17) (caddar . aK4e16) (cadadr . aK4e15) (cadaar . aK4e14) (caaddr . aK4e13) (caadar . aK4e12) (caaadr . aK4e11) (caaaar . aK4e10) (cdddr . aK4e0f) (cddar . aK4e0e) (cdadr . aK4e0d) (cdaar . aK4e0c) (caddr . aK4e0b) (cadar . aK4e0a) (caadr . aK4e09) (caaar . aK4e08) (cddr . aK4e07) (cdar . aK4e06) (cadr . aK4e05) (caar . aK4e04) (cdr . aK4e03) (car . aK4e02) (boolean? . aK4e01) (boolean=? . aK4e00) (atan . aK4dff) (assertion-violation . aK4dfe) (assertion-error . aK3197) (asin . aK4dfd) (apply . aK4dfc) (append . aK4dfb) (angle . aK4dfa) (acos . aK4df9) (abs . aK4df8) (/ . aK4df7) (* . aK4df6) (- . aK4df5) (+ . aK4df4) (>= . aK4df3) (> . aK4df2) (= . aK4df1) (<= . aK4df0) (< . aK4def) (library . aK4dee) (&no-nans . aK4ded) (&no-infinities . aK4dec) (&i/o-encoding . aK4deb) (&i/o-decoding . aK4dea) (&i/o-port . aK4de9) (&i/o-file-does-not-exist . aK4de8) (&i/o-file-already-exists . aK4de7) (&i/o-file-is-read-only . aK4de6) (&i/o-file-protection . aK4de5) (&i/o-filename . aK4de4) (&i/o-invalid-position . aK4de3) (&i/o-write . aK4de2) (&i/o-read . aK4de1) (&i/o . aK4de0) (&undefined . aK4ddf) (&syntax . aK4dde) (&lexical . aK4ddd) (&implementation-restriction . aK4ddc) (&non-continuable . aK4ddb) (&who . aK4dda) (&irritants . aK4dd9) (&assertion . aK4dd8) (&violation . aK4dd7) (&error . aK4dd6) (&serious . aK4dd5) (&warning . aK4dd4) (&message . aK4dd3) (&condition . aK4dd2) (define-condition-type . aK4dd1) (define-enumeration . aK4dd0) (define-record-type . aK4dcf) (parent-rtd . aK4dce) (nongenerative . aK4dcd) (opaque . aK4dcc) (sealed . aK4dcb) (protocol . aK4dca) (parent . aK4dc9) (immutable . aK4dc8) (mutable . aK4dc7) (fields . aK4dc6) (error-handling-mode . aK4dc5) (file-options . aK4dc4) (buffer-mode . aK4dc3) (eol-style . aK4dc2) (guard . aK4dc1) (trace-define . aK4dc0) (trace-lambda . aK4dbf) (unsyntax-splicing . aK4dbe) (unsyntax . aK4dbd) (unquote-splicing . aK4dbc) (unquote . aK4dbb) (_ . aK4dba) (else . aK4db9) (=> . aK4db8) (... . aK4db7) (assert . aK4db6) (endianness . aK4db5) (delay . aK4db4) (time . aK4db3) (do . aK4db2) (cond . aK4db1) (let* . aK4db0) (let*-values . aK4daf) (let-values . aK4dae) (identifier-syntax . aK4dad) (with-syntax . aK4dac) (quasisyntax . aK4dab) (quasiquote . aK4daa) (syntax-rules . aK4da9) (include . aK4da8) (define-struct . aK4da7) (record-constructor-descriptor . aK4da6) (record-type-descriptor . aK4da5) (case . aK4da4) (parameterize . aK4da3) (unless . aK4da2) (when . aK4da1) (or . aK4da0) (and . aK4d9f) (if . aK4d9e) (let . aK4d9d) (letrec* . aK4d9c) (letrec . aK4d9b) (type-descriptor . aK4d9a) (case-lambda . aK4d99) (lambda . aK4d98) (syntax . aK4d97) (syntax-case . aK4d96) (quote . aK4d95) (foreign-call . aK4d94) (letrec-syntax . aK4d93) (let-syntax . aK4d92) (set! . aK4d91) (import . aK4d90) (begin . aK4d8f) (module . aK4d8e) (define-syntax . aK4d8d) (define . aK4d8c)) '((aK512d core-prim . &no-nans-rcd) (aK512c core-prim . &no-nans-rtd) (aK512b core-prim . &no-infinities-rcd) (aK512a core-prim . &no-infinities-rtd) (aK5129 core-prim . &i/o-encoding-rcd) (aK5128 core-prim . &i/o-encoding-rtd) (aK5127 core-prim . &i/o-decoding-rcd) (aK5126 core-prim . &i/o-decoding-rtd) (aK5125 core-prim . &i/o-port-rcd) (aK5124 core-prim . &i/o-port-rtd) (aK5123 core-prim . &i/o-file-does-not-exist-rcd) (aK5122 core-prim . &i/o-file-does-not-exist-rtd) (aK5121 core-prim . &i/o-file-already-exists-rcd) (aK5120 core-prim . &i/o-file-already-exists-rtd) (aK511f core-prim . &i/o-file-is-read-only-rcd) (aK511e core-prim . &i/o-file-is-read-only-rtd) (aK511d core-prim . &i/o-file-protection-rcd) (aK511c core-prim . &i/o-file-protection-rtd) (aK511b core-prim . &i/o-filename-rcd) (aK511a core-prim . &i/o-filename-rtd) (aK5119 core-prim . &i/o-invalid-position-rcd) (aK5118 core-prim . &i/o-invalid-position-rtd) (aK5117 core-prim . &i/o-write-rcd) (aK5116 core-prim . &i/o-write-rtd) (aK5115 core-prim . &i/o-read-rcd) (aK5114 core-prim . &i/o-read-rtd) (aK5113 core-prim . &i/o-rcd) (aK5112 core-prim . &i/o-rtd) (aK5111 core-prim . &undefined-rcd) (aK5110 core-prim . &undefined-rtd) (aK510f core-prim . &syntax-rcd) (aK510e core-prim . &syntax-rtd) (aK510d core-prim . &lexical-rcd) (aK510c core-prim . &lexical-rtd) (aK510b core-prim . &implementation-restriction-rcd) (aK510a core-prim . &implementation-restriction-rtd) (aK5109 core-prim . &non-continuable-rcd) (aK5108 core-prim . &non-continuable-rtd) (aK5107 core-prim . &who-rcd) (aK5106 core-prim . &who-rtd) (aK5105 core-prim . &irritants-rcd) (aK5104 core-prim . &irritants-rtd) (aK5103 core-prim . &assertion-rcd) (aK5102 core-prim . &assertion-rtd) (aK5101 core-prim . &violation-rcd) (aK5100 core-prim . &violation-rtd) (aK50ff core-prim . &error-rcd) (aK50fe core-prim . &error-rtd) (aK50fd core-prim . &serious-rcd) (aK50fc core-prim . &serious-rtd) (aK50fb core-prim . &warning-rcd) (aK50fa core-prim . &warning-rtd) (aK50f9 core-prim . &message-rcd) (aK50f8 core-prim . &message-rtd) (aK50f7 core-prim . &condition-rcd) (aK50f6 core-prim . &condition-rtd) (aK3199 core-prim . syntax-error) (aK30bd core-prim . syntax-dispatch) (aK50f5 core-prim . pretty-print) (aK50f4 core-prim . eval-core) (aK50f3 core-prim . set-symbol-value!) (aK50f2 core-prim . symbol-value) (aK50f1 core-prim . gensym) (aK50f0 core-prim . void) (aK4c26 core-prim . load) (aK31ab core-prim . interaction-environment) (aK50ef core-prim . char-ready?) (aK50ee core-prim . regexp?) (aK50ed core-prim . read-line) (aK50ec core-prim . gensym-prefix-set!) (aK50eb core-prim . ungensym) (aK50ea core-prim . alist->eq-hash-table) (aK50e9 core-prim . assoc-ref) (aK50e8 core-prim . print) (aK50e7 core-prim . format) (aK50e6 core-prim . host-os) (aK2afc core-prim . library-path) (aK50e5 core-prim . standard-library-path) (aK50e4 core-prim . %monapi-name-whereis) (aK50e3 core-prim . %monapi-message-send) (aK50e2 core-prim . file-newer?) (aK50e1 core-prim . stat-mtime) (aK50e0 core-prim . write-to-file) (aK50df core-prim . file->list) (aK50de core-prim . file->string) (aK50dd core-prim . digit->integer) (aK50dc core-prim . call-with-string-input-port) (aK50db core-prim . call-with-string-io) (aK50da core-prim . string-split) (aK50d9 core-prim . bytevector-for-each) (aK50d8 core-prim . string->regexp) (aK50d7 core-prim . rxmatch) (aK50d6 core-prim . regexp-replace-all) (aK50d5 core-prim . hashtable-for-each) (aK28e6 core-prim . mosh-cache-dir) (aK50d4 core-prim . call-process) (aK50d3 core-prim . local-tz-offset) (aK50d2 core-prim . microseconds) (aK50d1 core-prim . directory-list) (aK50d0 core-prim . set-current-directory!) (aK50cf core-prim . expand-path) (aK50ce core-prim . current-directory) (aK50cd core-prim . %spawn) (aK50cc core-prim . %waitpid) (aK50cb core-prim . simple-struct-name) (aK50ca core-prim . simple-struct-set!) (aK50c9 core-prim . simple-struct-ref) (aK50c8 core-prim . make-simple-struct) (aK50c7 core-prim . simple-struct?) (aK50c6 core-prim . pointer-ref-c-int64) (aK50c5 core-prim . pointer-ref-c-int32) (aK50c4 core-prim . pointer-ref-c-int16) (aK50c3 core-prim . pointer-ref-c-int8) (aK50c2 core-prim . pointer-ref-c-uint64) (aK50c1 core-prim . pointer-ref-c-uint32) (aK50c0 core-prim . pointer-ref-c-uint16) (aK50bf core-prim . pointer-ref-c-uint8) (aK50be core-prim . pointer-set-c-uint64!) (aK50bd core-prim . pointer-set-c-uint32!) (aK50bc core-prim . pointer-set-c-uint16!) (aK50bb core-prim . pointer-set-c-uint8!) (aK50ba core-prim . pointer-set-c-int64!) (aK50b9 core-prim . pointer-set-c-int32!) (aK50b8 core-prim . pointer-set-c-int16!) (aK50b7 core-prim . pointer-set-c-int8!) (aK50b6 core-prim . pointer-set-c-pointer!) (aK50b5 core-prim . pointer-set-c-double!) (aK50b4 core-prim . pointer-set-c-float!) (aK50b3 core-prim . pointer-set-c-long-long!) (aK50b2 core-prim . pointer-set-c-long!) (aK50b1 core-prim . pointer-set-c-int!) (aK50b0 core-prim . pointer-set-c-short!) (aK50af core-prim . pointer-set-c-char!) (aK50ae core-prim . pointer-ref-c-pointer) (aK50ad core-prim . pointer-ref-c-double) (aK50ac core-prim . pointer-ref-c-float) (aK50ab core-prim . pointer-ref-c-unsigned-long-long) (aK50aa core-prim . pointer-ref-c-signed-long-long) (aK50a9 core-prim . pointer-ref-c-unsigned-long) (aK50a8 core-prim . pointer-ref-c-signed-long) (aK50a7 core-prim . pointer-ref-c-unsigned-int) (aK50a6 core-prim . pointer-ref-c-signed-int) (aK50a5 core-prim . pointer-ref-c-unsigned-short) (aK50a4 core-prim . pointer-ref-c-signed-short) (aK50a3 core-prim . pointer-ref-c-unsigned-char) (aK50a2 core-prim . pointer-ref-c-signed-char) (aK50a1 core-prim . pointer->integer) (aK50a0 core-prim . integer->pointer) (aK509f core-prim . pointer?) (aK509e core-prim . shared-errno) (aK509d core-prim . %ffi-free-c-callback-trampoline) (aK509c core-prim . %ffi-make-c-callback-trampoline) (aK509b core-prim . %ffi-free) (aK509a core-prim . %ffi-malloc) (aK5099 core-prim . %ffi-supported?) (aK5098 core-prim . %ffi-pointer->string) (aK5097 core-prim . %ffi-call) (aK5096 core-prim . %ffi-lookup) (aK5095 core-prim . %ffi-open) (aK5094 core-prim . null-terminated-utf8->string) (aK5093 core-prim . null-terminated-bytevector->string) (aK5092 core-prim . %exec) (aK5091 core-prim . %fork) (aK5090 core-prim . %pipe) (aK508f core-prim . p) (aK508e core-prim . open-output-string) (aK508d core-prim . get-output-string) (aK508c core-prim . file-stat-ctime) (aK508b core-prim . file-stat-atime) (aK508a core-prim . file-stat-mtime) (aK5089 core-prim . file-size-in-bytes) (aK5088 core-prim . file-writable?) (aK5087 core-prim . file-executable?) (aK5086 core-prim . file-readable?) (aK5085 core-prim . file-regular?) (aK5084 core-prim . file-symbolic-link?) (aK5083 core-prim . file-directory?) (aK5082 core-prim . create-symbolic-link) (aK5081 core-prim . rename-file) (aK5080 core-prim . delete-directory) (aK507f core-prim . create-directory) (aK507e core-prim . create-mosh-cache-dir) (aK507d core-prim . get-environment-variables) (aK507c core-prim . current-exception-handler) (aK507b core-prim . get-environment-variable) (aK507a core-prim . join-wraps) (aK5079 core-prim . id->real-label) (aK5078 core-prim . same-marks?) (aK5077 core-prim . same-marks*?) (aK5076 core-prim . get-timeofday) (aK5075 core-prim . get-command-line) (aK5074 core-prim . sys-display) (aK5073 core-prim . whereis) (aK5072 core-prim . register) (aK5071 core-prim . vm-join!) (aK5070 core-prim . vm-set-value!) (aK506f core-prim . vm?) (aK506e core-prim . main-vm?) (aK506d core-prim . vm-eval) (aK506c core-prim . vm-self) (aK506b core-prim . vm-start!) (aK506a core-prim . make-vm) (aK5069 core-prim . mutex-try-lock!) (aK5068 core-prim . mutex-unlock!) (aK5067 core-prim . mutex-lock!) (aK5066 core-prim . mutex?) (aK5065 core-prim . make-mutex) (aK5064 core-prim . condition-variable-notify-all!) (aK5063 core-prim . condition-variable-notify!) (aK5062 core-prim . condition-variable-wait!) (aK5061 core-prim . make-condition-variable) (aK5060 core-prim . write/ss) (aK505f core-prim . mosh-executable-path) (aK505e core-prim . make-file-options) (aK505d core-prim . source-info) (aK505c core-prim . make-compiler-instruction) (aK505b core-prim . make-instruction) (aK505a core-prim . set-source-info!) (aK5059 core-prim . bignum?) (aK5058 core-prim . fast-equal?) (aK5057 core-prim . fasl-read) (aK5056 core-prim . fasl-write) (aK5055 core-prim . time-usage) (aK5054 core-prim . os-constant) (aK5053 core-prim . disasm) (aK28e4 core-prim . make-parameter) (aK5052 core-prim . socket-port) (aK5051 core-prim . socket-shutdown) (aK5050 core-prim . socket-close) (aK504f core-prim . socket-send) (aK504e core-prim . socket-recv!) (aK504d core-prim . socket-recv) (aK504c core-prim . make-server-socket) (aK504b core-prim . make-client-socket) (aK504a core-prim . socket-accept) (aK5049 core-prim . socket?) (aK5048 core-prim . string-upcase) (aK5047 core-prim . string-titlecase) (aK5046 core-prim . string-normalize-nfkd) (aK5045 core-prim . string-normalize-nfkc) (aK5044 core-prim . string-normalize-nfd) (aK5043 core-prim . string-normalize-nfc) (aK5042 core-prim . string-foldcase) (aK5041 core-prim . string-downcase) (aK5040 core-prim . string-ci>?) (aK503f core-prim . string-ci>=?) (aK503e core-prim . string-ci=?) (aK503d core-prim . string-ci<?) (aK503c core-prim . string-ci<=?) (aK503b core-prim . char-whitespace?) (aK503a core-prim . char-upper-case?) (aK5039 core-prim . char-title-case?) (aK5038 core-prim . char-numeric?) (aK5037 core-prim . char-lower-case?) (aK5036 core-prim . char-general-category) (aK5035 core-prim . char-upcase) (aK5034 core-prim . char-titlecase) (aK5033 core-prim . char-foldcase) (aK5032 core-prim . char-downcase) (aK5031 core-prim . char-ci>?) (aK5030 core-prim . char-ci>=?) (aK502f core-prim . char-ci=?) (aK502e core-prim . char-ci<?) (aK502d core-prim . char-ci<=?) (aK502c core-prim . char-alphabetic?) (aK2ee8 core-prim . make-variable-transformer) (aK319f core-prim . identifier?) (aK318b core-prim . generate-temporaries) (aK318d core-prim . free-identifier=?) (aK31a3 core-prim . syntax->datum) (aK31a1 core-prim . datum->syntax) (aK318f core-prim . bound-identifier=?) (aK502b core-prim . record-type-descriptor?) (aK502a core-prim . record-predicate) (aK5029 core-prim . record-mutator) (aK5028 core-prim . record-constructor) (aK5027 core-prim . record-accessor) (aK5026 core-prim . make-record-type-descriptor) (aK5025 core-prim . make-record-constructor-descriptor) (aK5024 core-prim . record?) (aK5023 core-prim . record-type-uid) (aK5022 core-prim . record-type-sealed?) (aK5021 core-prim . record-type-parent) (aK5020 core-prim . record-type-opaque?) (aK501f core-prim . record-type-name) (aK501e core-prim . record-type-generative?) (aK501d core-prim . record-type-field-names) (aK501c core-prim . record-rtd) (aK501b core-prim . record-field-mutable?) (aK501a core-prim . delete-file) (aK5019 core-prim . file-exists?) (aK5018 core-prim . vector-sort!) (aK5017 core-prim . vector-sort) (aK5016 core-prim . list-sort) (aK5015 core-prim . symbol-hash) (aK5014 core-prim . string-ci-hash) (aK5013 core-prim . string-hash) (aK5012 core-prim . equal-hash) (aK5011 core-prim . hashtable-equivalence-function) (aK5010 core-prim . make-hashtable) (aK500f core-prim . hashtable-hash-function) (aK500e core-prim . make-eqv-hashtable) (aK500d core-prim . make-eq-hashtable) (aK500c core-prim . hashtable?) (aK500b core-prim . hashtable-update!) (aK500a core-prim . hashtable-size) (aK5009 core-prim . hashtable-set!) (aK5008 core-prim . hashtable-ref) (aK5007 core-prim . hashtable-mutable?) (aK5006 core-prim . hashtable-keys) (aK5005 core-prim . hashtable-entries) (aK5004 core-prim . hashtable-delete!) (aK5003 core-prim . hashtable-copy) (aK5002 core-prim . hashtable-contains?) (aK5001 core-prim . hashtable-clear!) (aK5000 core-prim . call-with-output-file) (aK4fff core-prim . call-with-input-file) (aK4ffe core-prim . write-char) (aK4ffd core-prim . write) (aK4ffc core-prim . with-output-to-file) (aK4ffb core-prim . with-input-from-file) (aK4ffa core-prim . read-char) (aK4ff9 core-prim . read) (aK4ff8 core-prim . peek-char) (aK4ff7 core-prim . open-output-file) (aK4ff6 core-prim . open-input-file) (aK4ff5 core-prim . newline) (aK4ff4 core-prim . display) (aK4ff3 core-prim . close-output-port) (aK4ff2 core-prim . close-input-port) (aK4ff1 core-prim . eof-object?) (aK4ff0 core-prim . eof-object) (aK4fef core-prim . current-error-port) (aK4fee core-prim . current-output-port) (aK4fed core-prim . current-input-port) (aK4fec core-prim . output-port?) (aK4feb core-prim . input-port?) (aK4fea core-prim . utf-8-codec) (aK4fe9 core-prim . utf-16-codec) (aK4fe8 core-prim . transcoder-error-handling-mode) (aK4fe7 core-prim . transcoder-eol-style) (aK4fe6 core-prim . transcoder-codec) (aK4fe5 core-prim . transcoded-port) (aK4fe4 core-prim . textual-port?) (aK4fe3 core-prim . string->bytevector) (aK4fe2 core-prim . standard-output-port) (aK4fe1 core-prim . standard-input-port) (aK4fe0 core-prim . standard-error-port) (aK4fdf core-prim . set-port-position!) (aK4fde core-prim . put-u8) (aK4fdd core-prim . put-string) (aK4fdc core-prim . put-datum) (aK4fdb core-prim . put-char) (aK4fda core-prim . put-bytevector) (aK4fd9 core-prim . port?) (aK4fd8 core-prim . port-transcoder) (aK4fd7 core-prim . port-position) (aK4fd6 core-prim . port-has-set-port-position!?) (aK4fd5 core-prim . port-has-port-position?) (aK4fd4 core-prim . port-eof?) (aK4fd3 core-prim . output-port-buffer-mode) (aK4fd2 core-prim . open-string-output-port) (aK4fd1 core-prim . open-string-input-port) (aK4fd0 core-prim . open-file-output-port) (aK4fcf core-prim . open-file-input/output-port) (aK4fce core-prim . open-file-input-port) (aK4fcd core-prim . open-bytevector-output-port) (aK4fcc core-prim . open-bytevector-input-port) (aK4fcb core-prim . native-transcoder) (aK4fca core-prim . native-eol-style) (aK4fc9 core-prim . make-transcoder) (aK4fc8 core-prim . latin-1-codec) (aK4fc7 core-prim . make-i/o-write-error) (aK4fc6 core-prim . make-i/o-read-error) (aK4fc5 core-prim . make-i/o-port-error) (aK4fc4 core-prim . make-i/o-invalid-position-error) (aK4fc3 core-prim . make-i/o-filename-error) (aK4fc2 core-prim . make-i/o-file-protection-error) (aK4fc1 core-prim . make-i/o-file-is-read-only-error) (aK4fc0 core-prim . make-i/o-file-does-not-exist-error) (aK4fbf core-prim . make-i/o-file-already-exists-error) (aK4fbe core-prim . make-i/o-error) (aK4fbd core-prim . make-i/o-encoding-error) (aK4fbc core-prim . make-i/o-decoding-error) (aK4fbb core-prim . make-custom-textual-output-port) (aK4fba core-prim . make-custom-textual-input/output-port) (aK4fb9 core-prim . make-custom-textual-input-port) (aK4fb8 core-prim . make-custom-binary-output-port) (aK4fb7 core-prim . make-custom-binary-input/output-port) (aK4fb6 core-prim . make-custom-binary-input-port) (aK4fb5 core-prim . make-bytevector) (aK4fb4 core-prim . lookahead-u8) (aK4fb3 core-prim . lookahead-char) (aK4fb2 core-prim . i/o-write-error?) (aK4fb1 core-prim . i/o-read-error?) (aK4fb0 core-prim . i/o-port-error?) (aK4faf core-prim . i/o-invalid-position-error?) (aK4fae core-prim . i/o-filename-error?) (aK4fad core-prim . i/o-file-protection-error?) (aK4fac core-prim . i/o-file-is-read-only-error?) (aK4fab core-prim . i/o-file-does-not-exist-error?) (aK4faa core-prim . i/o-file-already-exists-error?) (aK4fa9 core-prim . i/o-error?) (aK4fa8 core-prim . i/o-error-position) (aK4fa7 core-prim . i/o-error-port) (aK4fa6 core-prim . i/o-error-filename) (aK4fa5 core-prim . i/o-encoding-error?) (aK4fa4 core-prim . i/o-encoding-error-char) (aK4fa3 core-prim . i/o-decoding-error?) (aK4fa2 core-prim . get-u8) (aK4fa1 core-prim . get-string-n!) (aK4fa0 core-prim . get-string-n) (aK4f9f core-prim . get-string-all) (aK4f9e core-prim . get-line) (aK4f9d core-prim . get-datum) (aK4f9c core-prim . get-char) (aK4f9b core-prim . get-bytevector-some) (aK4f9a core-prim . get-bytevector-n!) (aK4f99 core-prim . get-bytevector-n) (aK4f98 core-prim . get-bytevector-all) (aK4f97 core-prim . flush-output-port) (aK4f96 core-prim . close-port) (aK3179 core-prim . scheme-report-environment) (aK4f95 core-prim . quotient) (aK3177 core-prim . null-environment) (aK4f94 core-prim . remainder) (aK4f93 core-prim . modulo) (aK4f92 core-prim . inexact->exact) (aK4f91 core-prim . force) (aK4f90 core-prim . exact->inexact) (aK4f8f core-prim . make-promise) (aK4f8e core-prim . exit) (aK4c20 core-prim . command-line) (aK4f8d core-prim . string-fill!) (aK4f8c core-prim . string-set!) (aK4f8b core-prim . set-cdr!) (aK4f8a core-prim . set-car!) (aK4f89 core-prim . remove) (aK4f88 core-prim . remv) (aK4f87 core-prim . remp) (aK4f86 core-prim . remq) (aK4f85 core-prim . partition) (aK4f84 core-prim . memv) (aK4f83 core-prim . memq) (aK4f82 core-prim . memp) (aK4f81 core-prim . member) (aK4f80 core-prim . exists) (aK4f7f core-prim . for-all) (aK4f7e core-prim . fold-right) (aK4f7d core-prim . fold-left) (aK4f7c core-prim . find) (aK4f7b core-prim . filter) (aK4f7a core-prim . cons*) (aK4f79 core-prim . assv) (aK4f78 core-prim . assq) (aK4f77 core-prim . assp) (aK4f76 core-prim . assoc) (aK4f75 core-prim . call-with-string-output-port) (aK4f74 core-prim . call-with-port) (aK4f73 core-prim . call-with-bytevector-output-port) (aK4f72 core-prim . bytevector->string) (aK4f71 core-prim . buffer-mode?) (aK4f70 core-prim . binary-port?) (aK4f6f core-prim . with-exception-handler) (aK4f6e core-prim . raise-continuable) (aK4f6d core-prim . raise) (aK317d core-prim . eval) (aK3175 core-prim . environment) (aK4f6c core-prim . make-enumeration) (aK4f6b core-prim . enum-set=?) (aK4f6a core-prim . enum-set-universe) (aK4f69 core-prim . enum-set-union) (aK4f68 core-prim . enum-set-subset?) (aK4f67 core-prim . enum-set-projection) (aK4f66 core-prim . enum-set-member?) (aK4f65 core-prim . enum-set-intersection) (aK4f64 core-prim . enum-set-indexer) (aK4f63 core-prim . enum-set-difference) (aK4f62 core-prim . enum-set-constructor) (aK4f61 core-prim . enum-set-complement) (aK4f60 core-prim . enum-set->list) (aK4f5f core-prim . who-condition?) (aK4f5e core-prim . warning?) (aK4f5d core-prim . violation?) (aK4f5c core-prim . undefined-violation?) (aK4f5b core-prim . syntax-violation?) (aK4f5a core-prim . syntax-violation-subform) (aK4f59 core-prim . syntax-violation-form) (aK319d core-prim . syntax-violation) (aK4f58 core-prim . simple-conditions) (aK4f57 core-prim . serious-condition?) (aK4f56 core-prim . non-continuable-violation?) (aK4f55 core-prim . message-condition?) (aK4f54 core-prim . make-who-condition) (aK4f53 core-prim . make-warning) (aK4f52 core-prim . make-violation) (aK4f51 core-prim . make-undefined-violation) (aK4f50 core-prim . make-syntax-violation) (aK4f4f core-prim . make-serious-condition) (aK4f4e core-prim . make-non-continuable-violation) (aK4f4d core-prim . make-message-condition) (aK4f4c core-prim . make-lexical-violation) (aK4f4b core-prim . make-irritants-condition) (aK4f4a core-prim . make-implementation-restriction-violation) (aK4f49 core-prim . make-error) (aK4f48 core-prim . make-assertion-violation) (aK4f47 core-prim . lexical-violation?) (aK4f46 core-prim . irritants-condition?) (aK4f45 core-prim . implementation-restriction-violation?) (aK4f44 core-prim . error?) (aK4f43 core-prim . condition-who) (aK4f42 core-prim . condition-predicate) (aK4f41 core-prim . condition-message) (aK4f40 core-prim . condition-irritants) (aK4f3f core-prim . condition-accessor) (aK4f3e core-prim . condition) (aK4f3d core-prim . assertion-violation?) (aK4f3c core-prim . condition?) (aK4f3b core-prim . utf32->string) (aK4f3a core-prim . utf16->string) (aK4f39 core-prim . utf8->string) (aK4f38 core-prim . uint-list->bytevector) (aK4f37 core-prim . u8-list->bytevector) (aK4f36 core-prim . string->utf8) (aK4f35 core-prim . string->utf32) (aK4f34 core-prim . string->utf16) (aK4f33 core-prim . sint-list->bytevector) (aK4f32 core-prim . native-endianness) (aK4f31 core-prim . bytevector?) (aK4f30 core-prim . bytevector=?) (aK4f2f core-prim . bytevector-uint-set!) (aK4f2e core-prim . bytevector-uint-ref) (aK4f2d core-prim . bytevector-u8-set!) (aK4f2c core-prim . bytevector-u8-ref) (aK4f2b core-prim . bytevector-u64-set!) (aK4f2a core-prim . bytevector-u64-ref) (aK4f29 core-prim . bytevector-u64-native-set!) (aK4f28 core-prim . bytevector-u64-native-ref) (aK4f27 core-prim . bytevector-u32-set!) (aK4f26 core-prim . bytevector-u32-ref) (aK4f25 core-prim . bytevector-u32-native-set!) (aK4f24 core-prim . bytevector-u32-native-ref) (aK4f23 core-prim . bytevector-u16-set!) (aK4f22 core-prim . bytevector-u16-ref) (aK4f21 core-prim . bytevector-u16-native-set!) (aK4f20 core-prim . bytevector-u16-native-ref) (aK4f1f core-prim . bytevector-sint-set!) (aK4f1e core-prim . bytevector-sint-ref) (aK4f1d core-prim . bytevector-s8-set!) (aK4f1c core-prim . bytevector-s8-ref) (aK4f1b core-prim . bytevector-s64-set!) (aK4f1a core-prim . bytevector-s64-ref) (aK4f19 core-prim . bytevector-s64-native-set!) (aK4f18 core-prim . bytevector-s64-native-ref) (aK4f17 core-prim . bytevector-s32-set!) (aK4f16 core-prim . bytevector-s32-ref) (aK4f15 core-prim . bytevector-s32-native-set!) (aK4f14 core-prim . bytevector-s32-native-ref) (aK4f13 core-prim . bytevector-s16-set!) (aK4f12 core-prim . bytevector-s16-ref) (aK4f11 core-prim . bytevector-s16-native-set!) (aK4f10 core-prim . bytevector-s16-native-ref) (aK4f0f core-prim . bytevector-length) (aK4f0e core-prim . bytevector-ieee-single-ref) (aK4f0d core-prim . bytevector-ieee-single-set!) (aK4f0c core-prim . bytevector-ieee-single-native-set!) (aK4f0b core-prim . bytevector-ieee-single-native-ref) (aK4f0a core-prim . bytevector-ieee-double-set!) (aK4f09 core-prim . bytevector-ieee-double-ref) (aK4f08 core-prim . bytevector-ieee-double-native-set!) (aK4f07 core-prim . bytevector-ieee-double-native-ref) (aK4f06 core-prim . bytevector-fill!) (aK4f05 core-prim . bytevector-copy!) (aK4f04 core-prim . bytevector-copy) (aK4f03 core-prim . bytevector->uint-list) (aK4f02 core-prim . bytevector->u8-list) (aK4f01 core-prim . bytevector->sint-list) (aK4f00 core-prim . no-nans-violation?) (aK4eff core-prim . no-infinities-violation?) (aK4efe core-prim . make-no-nans-violation) (aK4efd core-prim . make-no-infinities-violation) (aK4efc core-prim . real->flonum) (aK4efb core-prim . flzero?) (aK4efa core-prim . fltruncate) (aK4ef9 core-prim . fltan) (aK4ef8 core-prim . flsqrt) (aK4ef7 core-prim . flsin) (aK4ef6 core-prim . flround) (aK4ef5 core-prim . flpositive?) (aK4ef4 core-prim . flonum?) (aK4ef3 core-prim . flodd?) (aK4ef2 core-prim . flnumerator) (aK4ef1 core-prim . flnegative?) (aK4ef0 core-prim . flnan?) (aK4eef core-prim . flmod0) (aK4eee core-prim . flmod) (aK4eed core-prim . flmin) (aK4eec core-prim . flmax) (aK4eeb core-prim . fllog) (aK4eea core-prim . flinteger?) (aK4ee9 core-prim . flinfinite?) (aK4ee8 core-prim . flfloor) (aK4ee7 core-prim . flfinite?) (aK4ee6 core-prim . flexpt) (aK4ee5 core-prim . flexp) (aK4ee4 core-prim . fleven?) (aK4ee3 core-prim . fldiv0-and-mod0) (aK4ee2 core-prim . fldiv0) (aK4ee1 core-prim . fldiv-and-mod) (aK4ee0 core-prim . fldiv) (aK4edf core-prim . fldenominator) (aK4ede core-prim . flcos) (aK4edd core-prim . flceiling) (aK4edc core-prim . flatan) (aK4edb core-prim . flasin) (aK4eda core-prim . flacos) (aK4ed9 core-prim . flabs) (aK4ed8 core-prim . fl>?) (aK4ed7 core-prim . fl>=?) (aK4ed6 core-prim . fl=?) (aK4ed5 core-prim . fl<?) (aK4ed4 core-prim . fl<=?) (aK4ed3 core-prim . fl/) (aK4ed2 core-prim . fl-) (aK4ed1 core-prim . fl+) (aK4ed0 core-prim . fl*) (aK4ecf core-prim . fixnum->flonum) (aK4ece core-prim . fxzero?) (aK4ecd core-prim . fxxor) (aK4ecc core-prim . fxrotate-bit-field) (aK4ecb core-prim . fxreverse-bit-field) (aK4eca core-prim . fxpositive?) (aK4ec9 core-prim . fxodd?) (aK4ec8 core-prim . fxnot) (aK4ec7 core-prim . fxnegative?) (aK4ec6 core-prim . fxmod0) (aK4ec5 core-prim . fxmod) (aK4ec4 core-prim . fxmin) (aK4ec3 core-prim . fxmax) (aK4ec2 core-prim . fxlength) (aK4ec1 core-prim . fxior) (aK4ec0 core-prim . fxif) (aK4ebf core-prim . fxfirst-bit-set) (aK4ebe core-prim . fxeven?) (aK4ebd core-prim . fxdiv0-and-mod0) (aK4ebc core-prim . fxdiv0) (aK4ebb core-prim . fxdiv-and-mod) (aK4eba core-prim . fxdiv) (aK4eb9 core-prim . fxcopy-bit-field) (aK4eb8 core-prim . fxcopy-bit) (aK4eb7 core-prim . fxbit-set?) (aK4eb6 core-prim . fxbit-field) (aK4eb5 core-prim . fxbit-count) (aK4eb4 core-prim . fxarithmetic-shift-right) (aK4eb3 core-prim . fxarithmetic-shift-left) (aK4eb2 core-prim . fxarithmetic-shift) (aK4eb1 core-prim . fxand) (aK4eb0 core-prim . fx>?) (aK4eaf core-prim . fx>=?) (aK4eae core-prim . fx=?) (aK4ead core-prim . fx<?) (aK4eac core-prim . fx<=?) (aK4eab core-prim . fx-/carry) (aK4eaa core-prim . fx-) (aK4ea9 core-prim . fx+/carry) (aK4ea8 core-prim . fx+) (aK4ea7 core-prim . fx*/carry) (aK4ea6 core-prim . fx*) (aK4ea5 core-prim . greatest-fixnum) (aK4ea4 core-prim . least-fixnum) (aK4ea3 core-prim . fixnum-width) (aK4ea2 core-prim . fixnum?) (aK4ea1 core-prim . bitwise-rotate-bit-field) (aK4ea0 core-prim . bitwise-reverse-bit-field) (aK4e9f core-prim . bitwise-length) (aK4e9e core-prim . bitwise-if) (aK4e9d core-prim . bitwise-first-bit-set) (aK4e9c core-prim . bitwise-copy-bit-field) (aK4e9b core-prim . bitwise-copy-bit) (aK4e9a core-prim . bitwise-bit-set?) (aK4e99 core-prim . bitwise-bit-field) (aK4e98 core-prim . bitwise-bit-count) (aK4e97 core-prim . bitwise-xor) (aK4e96 core-prim . bitwise-ior) (aK4e95 core-prim . bitwise-and) (aK4e94 core-prim . bitwise-not) (aK4e93 core-prim . bitwise-arithmetic-shift-right) (aK4e92 core-prim . bitwise-arithmetic-shift-left) (aK4e91 core-prim . bitwise-arithmetic-shift) (aK4e90 core-prim . zero?) (aK4e8f core-prim . vector?) (aK4e8e core-prim . vector-set!) (aK4e8d core-prim . vector-ref) (aK4e8c core-prim . vector-map) (aK4e8b core-prim . vector-length) (aK4e8a core-prim . vector-for-each) (aK4e89 core-prim . vector-fill!) (aK4e88 core-prim . vector->list) (aK4e87 core-prim . vector) (aK4e86 core-prim . values) (aK4e85 core-prim . truncate) (aK4e84 core-prim . tan) (aK4e83 core-prim . symbol?) (aK4e82 core-prim . symbol=?) (aK4e81 core-prim . symbol->string) (aK4e80 core-prim . substring) (aK4e7f core-prim . string?) (aK4e7e core-prim . string>?) (aK4e7d core-prim . string>=?) (aK4e7c core-prim . string=?) (aK4e7b core-prim . string<?) (aK4e7a core-prim . string<=?) (aK4e79 core-prim . string-ref) (aK4e78 core-prim . string-length) (aK4e77 core-prim . string-for-each) (aK4e76 core-prim . string-copy) (aK4e75 core-prim . string-append) (aK4e74 core-prim . string->symbol) (aK4e73 core-prim . string->number) (aK4e72 core-prim . string->list) (aK4e71 core-prim . string) (aK4e70 core-prim . sqrt) (aK4e6f core-prim . sin) (aK4e6e core-prim . round) (aK4e6d core-prim . reverse) (aK4e6c core-prim . real?) (aK4e6b core-prim . real-valued?) (aK4e6a core-prim . real-part) (aK4e69 core-prim . rationalize) (aK4e68 core-prim . rational?) (aK4e67 core-prim . rational-valued?) (aK4e66 core-prim . procedure?) (aK4e65 core-prim . positive?) (aK4e64 core-prim . pair?) (aK4e63 core-prim . odd?) (aK4e62 core-prim . numerator) (aK4e61 core-prim . number?) (aK4e60 core-prim . number->string) (aK4e5f core-prim . null?) (aK4e5e core-prim . not) (aK4e5d core-prim . negative?) (aK4e5c core-prim . nan?) (aK4e5b core-prim . min) (aK4e5a core-prim . max) (aK4e59 core-prim . map) (aK4e58 core-prim . make-vector) (aK4e57 core-prim . make-string) (aK4e56 core-prim . make-rectangular) (aK4e55 core-prim . make-polar) (aK4e54 core-prim . magnitude) (aK4e53 core-prim . log) (aK4e52 core-prim . list?) (aK4e51 core-prim . list-tail) (aK4e50 core-prim . list-ref) (aK4e4f core-prim . list->vector) (aK4e4e core-prim . list->string) (aK4e4d core-prim . list) (aK4e4c core-prim . length) (aK4e4b core-prim . lcm) (aK4e4a core-prim . integer?) (aK4e49 core-prim . integer-valued?) (aK4e48 core-prim . integer->char) (aK4e47 core-prim . infinite?) (aK4e46 core-prim . inexact?) (aK4e45 core-prim . inexact) (aK4e44 core-prim . imag-part) (aK4e43 core-prim . gcd) (aK4e42 core-prim . for-each) (aK4e41 core-prim . floor) (aK4e40 core-prim . finite?) (aK4e3f core-prim . expt) (aK4e3e core-prim . exp) (aK4e3d core-prim . exact?) (aK4e3c core-prim . exact-integer-sqrt) (aK4e3b core-prim . exact) (aK4e3a core-prim . even?) (aK4e39 core-prim . error) (aK4e38 core-prim . eqv?) (aK4e37 core-prim . equal?) (aK4e36 core-prim . eq?) (aK4e35 core-prim . dynamic-wind) (aK4e34 core-prim . div0-and-mod0) (aK4e33 core-prim . mod0) (aK4e32 core-prim . div0) (aK4e31 core-prim . div-and-mod) (aK4e30 core-prim . mod) (aK4e2f core-prim . div) (aK4e2e core-prim . denominator) (aK4e2d core-prim . cos) (aK4e2c core-prim . cons) (aK4e2b core-prim . complex?) (aK4e2a core-prim . char?) (aK4e29 core-prim . char>?) (aK4e28 core-prim . char>=?) (aK4e27 core-prim . char=?) (aK4e26 core-prim . char<?) (aK4e25 core-prim . char<=?) (aK4e24 core-prim . char->integer) (aK4e23 core-prim . ceiling) (aK4e22 core-prim . call-with-values) (aK4e21 core-prim . call/cc) (aK4e20 core-prim . call-with-current-continuation) (aK4e1f core-prim . cddddr) (aK4e1e core-prim . cdddar) (aK4e1d core-prim . cddadr) (aK4e1c core-prim . cddaar) (aK4e1b core-prim . cdaddr) (aK4e1a core-prim . cdadar) (aK4e19 core-prim . cdaadr) (aK4e18 core-prim . cdaaar) (aK4e17 core-prim . cadddr) (aK4e16 core-prim . caddar) (aK4e15 core-prim . cadadr) (aK4e14 core-prim . cadaar) (aK4e13 core-prim . caaddr) (aK4e12 core-prim . caadar) (aK4e11 core-prim . caaadr) (aK4e10 core-prim . caaaar) (aK4e0f core-prim . cdddr) (aK4e0e core-prim . cddar) (aK4e0d core-prim . cdadr) (aK4e0c core-prim . cdaar) (aK4e0b core-prim . caddr) (aK4e0a core-prim . cadar) (aK4e09 core-prim . caadr) (aK4e08 core-prim . caaar) (aK4e07 core-prim . cddr) (aK4e06 core-prim . cdar) (aK4e05 core-prim . cadr) (aK4e04 core-prim . caar) (aK4e03 core-prim . cdr) (aK4e02 core-prim . car) (aK4e01 core-prim . boolean?) (aK4e00 core-prim . boolean=?) (aK4dff core-prim . atan) (aK4dfe core-prim . assertion-violation) (aK3197 core-prim . assertion-error) (aK4dfd core-prim . asin) (aK4dfc core-prim . apply) (aK4dfb core-prim . append) (aK4dfa core-prim . angle) (aK4df9 core-prim . acos) (aK4df8 core-prim . abs) (aK4df7 core-prim . /) (aK4df6 core-prim . *) (aK4df5 core-prim . -) (aK4df4 core-prim . +) (aK4df3 core-prim . >=) (aK4df2 core-prim . >) (aK4df1 core-prim . =) (aK4df0 core-prim . <=) (aK4def core-prim . <) (aK4dee core-prim . library) (aK4ded $core-rtd &no-nans-rtd &no-nans-rcd) (aK4dec $core-rtd &no-infinities-rtd &no-infinities-rcd) (aK4deb $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (aK4dea $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (aK4de9 $core-rtd &i/o-port-rtd &i/o-port-rcd) (aK4de8 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (aK4de7 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (aK4de6 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (aK4de5 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (aK4de4 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (aK4de3 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (aK4de2 $core-rtd &i/o-write-rtd &i/o-write-rcd) (aK4de1 $core-rtd &i/o-read-rtd &i/o-read-rcd) (aK4de0 $core-rtd &i/o-rtd &i/o-rcd) (aK4ddf $core-rtd &undefined-rtd &undefined-rcd) (aK4dde $core-rtd &syntax-rtd &syntax-rcd) (aK4ddd $core-rtd &lexical-rtd &lexical-rcd) (aK4ddc $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (aK4ddb $core-rtd &non-continuable-rtd &non-continuable-rcd) (aK4dda $core-rtd &who-rtd &who-rcd) (aK4dd9 $core-rtd &irritants-rtd &irritants-rcd) (aK4dd8 $core-rtd &assertion-rtd &assertion-rcd) (aK4dd7 $core-rtd &violation-rtd &violation-rcd) (aK4dd6 $core-rtd &error-rtd &error-rcd) (aK4dd5 $core-rtd &serious-rtd &serious-rcd) (aK4dd4 $core-rtd &warning-rtd &warning-rcd) (aK4dd3 $core-rtd &message-rtd &message-rcd) (aK4dd2 $core-rtd &condition-rtd &condition-rcd) (aK4dd1 macro . define-condition-type) (aK4dd0 macro . define-enumeration) (aK4dcf macro . define-record-type) (aK4dce macro . parent-rtd) (aK4dcd macro . nongenerative) (aK4dcc macro . opaque) (aK4dcb macro . sealed) (aK4dca macro . protocol) (aK4dc9 macro . parent) (aK4dc8 macro . immutable) (aK4dc7 macro . mutable) (aK4dc6 macro . fields) (aK4dc5 macro . error-handling-mode) (aK4dc4 macro . file-options) (aK4dc3 macro . buffer-mode) (aK4dc2 macro . eol-style) (aK4dc1 macro . guard) (aK4dc0 macro . trace-define) (aK4dbf macro . trace-lambda) (aK4dbe macro . unsyntax-splicing) (aK4dbd macro . unsyntax) (aK4dbc macro . unquote-splicing) (aK4dbb macro . unquote) (aK4dba macro . _) (aK4db9 macro . else) (aK4db8 macro . =>) (aK4db7 macro . ...) (aK4db6 macro . assert) (aK4db5 macro . endianness) (aK4db4 macro . delay) (aK4db3 macro . time) (aK4db2 macro . do) (aK4db1 macro . cond) (aK4db0 macro . let*) (aK4daf macro . let*-values) (aK4dae macro . let-values) (aK4dad macro . identifier-syntax) (aK4dac macro . with-syntax) (aK4dab macro . quasisyntax) (aK4daa macro . quasiquote) (aK4da9 macro . syntax-rules) (aK4da8 macro . include) (aK4da7 macro . define-struct) (aK4da6 core-macro . record-constructor-descriptor) (aK4da5 core-macro . record-type-descriptor) (aK4da4 macro . case) (aK4da3 macro . parameterize) (aK4da2 macro . unless) (aK4da1 macro . when) (aK4da0 core-macro . or) (aK4d9f core-macro . and) (aK4d9e core-macro . if) (aK4d9d core-macro . let) (aK4d9c core-macro . letrec*) (aK4d9b core-macro . letrec) (aK4d9a core-macro . type-descriptor) (aK4d99 core-macro . case-lambda) (aK4d98 core-macro . lambda) (aK4d97 core-macro . syntax) (aK4d96 core-macro . syntax-case) (aK4d95 core-macro . quote) (aK4d94 core-macro . foreign-call) (aK4d93 letrec-syntax) (aK4d92 let-syntax) (aK4d91 set!) (aK4d90 import) (aK4d8f begin) (aK4d8e module) (aK4d8d define-syntax) (aK4d8c define)) values values '#f '#f '#f '#f) (aK2cd1@aK2b1d@install-library 'aK514e '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . aK50f5) (eval-core . aK50f4) (set-symbol-value! . aK50f3) (symbol-value . aK50f2) (gensym . aK50f1) (void . aK50f0)) '() values values '#f '#f '#f '#f) (aK2cd1@aK2b1d@install-library 'aK514f '(mosh) '() '() '() '() '((set-symbol-value! . aK50f3) (symbol-value . aK50f2) (regexp? . aK50ee) (read-line . aK50ed) (ungensym . aK50eb) (alist->eq-hash-table . aK50ea) (assoc-ref . aK50e9) (print . aK50e8) (format . aK50e7) (host-os . aK50e6) (library-path . aK2afc) (standard-library-path . aK50e5) (file-newer? . aK50e2) (stat-mtime . aK50e1) (digit->integer . aK50dd) (call-with-string-input-port . aK50dc) (call-with-string-io . aK50db) (string-split . aK50da) (bytevector-for-each . aK50d9) (string->regexp . aK50d8) (rxmatch . aK50d7) (regexp-replace-all . aK50d6) (hashtable-for-each . aK50d5) (set-current-directory! . aK50d0) (expand-path . aK50cf) (current-directory . aK50ce) (p . aK508f) (get-timeofday . aK5076) (get-command-line . aK5075) (sys-display . aK5074) (whereis . aK5073) (register . aK5072) (vm-join! . aK5071) (vm-set-value! . aK5070) (vm? . aK506f) (main-vm? . aK506e) (vm-eval . aK506d) (vm-self . aK506c) (vm-start! . aK506b) (make-vm . aK506a) (mutex-try-lock! . aK5069) (mutex-unlock! . aK5068) (mutex-lock! . aK5067) (mutex? . aK5066) (make-mutex . aK5065) (condition-variable-notify-all! . aK5064) (condition-variable-notify! . aK5063) (condition-variable-wait! . aK5062) (make-condition-variable . aK5061) (write/ss . aK5060) (mosh-executable-path . aK505f) (make-file-options . aK505e) (source-info . aK505d) (make-compiler-instruction . aK505c) (make-instruction . aK505b) (set-source-info! . aK505a) (bignum? . aK5059) (fast-equal? . aK5058) (fasl-read . aK5057) (fasl-write . aK5056) (time-usage . aK5055) (os-constant . aK5054) (time . aK4db3) (include . aK4da8)) '() values values '#f '#f '#f '#f) (aK2cd1@aK2b1d@install-library 'aK5150 '(system) '() '() '() '() '((gensym-prefix-set! . aK50ec) (%monapi-name-whereis . aK50e4) (%monapi-message-send . aK50e3) (write-to-file . aK50e0) (file->list . aK50df) (file->string . aK50de) (mosh-cache-dir . aK28e6) (call-process . aK50d4) (local-tz-offset . aK50d3) (microseconds . aK50d2) (directory-list . aK50d1) (expand-path . aK50cf) (%spawn . aK50cd) (%waitpid . aK50cc) (simple-struct-name . aK50cb) (simple-struct-set! . aK50ca) (simple-struct-ref . aK50c9) (make-simple-struct . aK50c8) (simple-struct? . aK50c7) (pointer-ref-c-int64 . aK50c6) (pointer-ref-c-int32 . aK50c5) (pointer-ref-c-int16 . aK50c4) (pointer-ref-c-int8 . aK50c3) (pointer-ref-c-uint64 . aK50c2) (pointer-ref-c-uint32 . aK50c1) (pointer-ref-c-uint16 . aK50c0) (pointer-ref-c-uint8 . aK50bf) (pointer-set-c-uint64! . aK50be) (pointer-set-c-uint32! . aK50bd) (pointer-set-c-uint16! . aK50bc) (pointer-set-c-uint8! . aK50bb) (pointer-set-c-int64! . aK50ba) (pointer-set-c-int32! . aK50b9) (pointer-set-c-int16! . aK50b8) (pointer-set-c-int8! . aK50b7) (pointer-set-c-pointer! . aK50b6) (pointer-set-c-double! . aK50b5) (pointer-set-c-float! . aK50b4) (pointer-set-c-long-long! . aK50b3) (pointer-set-c-long! . aK50b2) (pointer-set-c-int! . aK50b1) (pointer-set-c-short! . aK50b0) (pointer-set-c-char! . aK50af) (pointer-ref-c-pointer . aK50ae) (pointer-ref-c-double . aK50ad) (pointer-ref-c-float . aK50ac) (pointer-ref-c-unsigned-long-long . aK50ab) (pointer-ref-c-signed-long-long . aK50aa) (pointer-ref-c-unsigned-long . aK50a9) (pointer-ref-c-signed-long . aK50a8) (pointer-ref-c-unsigned-int . aK50a7) (pointer-ref-c-signed-int . aK50a6) (pointer-ref-c-unsigned-short . aK50a5) (pointer-ref-c-signed-short . aK50a4) (pointer-ref-c-unsigned-char . aK50a3) (pointer-ref-c-signed-char . aK50a2) (pointer->integer . aK50a1) (integer->pointer . aK50a0) (pointer? . aK509f) (shared-errno . aK509e) (%ffi-free-c-callback-trampoline . aK509d) (%ffi-make-c-callback-trampoline . aK509c) (%ffi-free . aK509b) (%ffi-malloc . aK509a) (%ffi-supported? . aK5099) (%ffi-pointer->string . aK5098) (%ffi-call . aK5097) (%ffi-lookup . aK5096) (%ffi-open . aK5095) (null-terminated-utf8->string . aK5094) (null-terminated-bytevector->string . aK5093) (%exec . aK5092) (%fork . aK5091) (%pipe . aK5090) (open-output-string . aK508e) (get-output-string . aK508d) (file-stat-ctime . aK508c) (file-stat-atime . aK508b) (file-stat-mtime . aK508a) (file-size-in-bytes . aK5089) (file-writable? . aK5088) (file-executable? . aK5087) (file-readable? . aK5086) (file-regular? . aK5085) (file-symbolic-link? . aK5084) (file-directory? . aK5083) (create-symbolic-link . aK5082) (rename-file . aK5081) (delete-directory . aK5080) (create-directory . aK507f) (create-mosh-cache-dir . aK507e) (get-environment-variables . aK507d) (current-exception-handler . aK507c) (get-environment-variable . aK507b) (join-wraps . aK507a) (id->real-label . aK5079) (same-marks? . aK5078) (same-marks*? . aK5077) (disasm . aK5053) (make-parameter . aK28e4) (socket-port . aK5052) (socket-shutdown . aK5051) (socket-close . aK5050) (socket-send . aK504f) (socket-recv! . aK504e) (socket-recv . aK504d) (make-server-socket . aK504c) (make-client-socket . aK504b) (socket-accept . aK504a) (socket? . aK5049) (parameterize . aK4da3)) '() values values '#f '#f '#f '#f)))
(begin (set! aK4c0b@ref (unspecified)) (set! aK4c0d@x* (unspecified)) (set! aK4c0f@add-library-path! (unspecified)) (set! aK4c11@parse-and-add-library-path (unspecified)) (set! aK4c13@for-each-with-index (unspecified)) (set! aK4c15@rpad (unspecified)) (set! aK4c17@condition-printer (unspecified)) (set! aK4c19@record->field-alist (unspecified)) (set! aK4c1b@map-with-index (unspecified)) (set! aK4c1d@repl (unspecified)) (set! aK4c1f@trace-printer (unspecified)) (set! aK4c21@command-line (unspecified)) (set! aK4c23@local-library-path (unspecified)) (set! aK4c25@load/args (unspecified)) (set! aK4c27@load (unspecified)) (set! aK4c29@ironscheme-build (unspecified)) (set! aK4c2b@eval-top-level (unspecified)) (set! aK4c2d@compile-system-libraries (unspecified)) (set! aK4c2f@compile (unspecified)) (set! aK4c31@compile->closure (unspecified)) (set! aK4c33@pre-compile-r6rs-file (unspecified)) (set! aK4c35@load-r6rs-top-level (unspecified)) (set! aK4c37@load-r6rs-top-level-sexp (unspecified)) (set! aK4c39@prefix-inc (unspecified)) (set! aK4c3b@prefix-inc! (unspecified)) (set! aK4c0b@ref (lambda (aK4c76@rtd aK4c77@i aK4c78@x) (let ((aK4c7c@val ((record-accessor aK4c76@rtd aK4c77@i) aK4c78@x))) (if (symbol? aK4c7c@val) (ungensym aK4c7c@val) aK4c7c@val)))) (set! aK4d72@aK4c0b@ref aK4c0b@ref) (set! aK4c0d@x* '()) (set! aK4d73@aK4c0d@x* aK4c0d@x*) (set! aK4c0f@add-library-path! (lambda (aK4c7e@path) (aK2cc1@aK2afd@library-path (append (aK2cc1@aK2afd@library-path) (list aK4c7e@path))))) (set! aK4d74@aK4c0f@add-library-path! aK4c0f@add-library-path!) (set! aK4c11@parse-and-add-library-path (lambda (aK4c80@paths aK4c81@message) (letrec* ((aK4c85@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((aK4c86@t aK4c80@paths)) (if aK4c86@t ((lambda (aK4c88@paths) (for-each (lambda (aK4c8a@path) (if (file-exists? aK4c8a@path) (aK4c0f@add-library-path! (expand-path aK4c8a@path)) (format (current-error-port) aK4c81@message aK4c8a@path))) (string-split aK4c88@paths aK4c85@separator))) aK4c86@t) (void)))))) (set! aK4d75@aK4c11@parse-and-add-library-path aK4c11@parse-and-add-library-path) (set! aK4c13@for-each-with-index (lambda (aK4c8c@proc aK4c8d@lst) (letrec ((aK4c90@loop (lambda (aK4c92@i aK4c93@lst) (if (null? aK4c93@lst) (if '#f '#f (void)) (begin (aK4c8c@proc aK4c92@i (car aK4c93@lst)) (aK4c90@loop (+ aK4c92@i '1) (cdr aK4c93@lst))))))) (aK4c90@loop '1 aK4c8d@lst)))) (set! aK4d76@aK4c13@for-each-with-index aK4c13@for-each-with-index) (set! aK4c15@rpad (lambda (aK4c96@str aK4c97@pad aK4c98@n) (let ((aK4c9c@rest (- aK4c98@n (string-length (format '"~a" aK4c96@str))))) (let aK4ca2@loop ((aK4c9e@rest aK4c9c@rest) (aK4c9f@ret (format '"~a" aK4c96@str))) (if (<= aK4c9e@rest '0) aK4c9f@ret (aK4ca2@loop (- aK4c9e@rest '1) (string-append aK4c9f@ret aK4c97@pad))))))) (set! aK4d77@aK4c15@rpad aK4c15@rpad) (set! aK4c17@condition-printer (lambda (aK4ca4@e aK4ca5@port) (letrec* ((aK4ca9@max-condition-len (apply max (map (lambda (aK4cba@c) (string-length (symbol->string (record-type-name (record-rtd aK4cba@c))))) (simple-conditions aK4ca4@e))))) (begin (display '" Condition components:\n" aK4ca5@port) (aK4c13@for-each-with-index (lambda (aK4caa@i aK4cab@x) (let ((aK4cae@rtd (record-rtd aK4cab@x)) (aK4caf@fields-alist (aK4c19@record->field-alist aK4cab@x))) (begin (format aK4ca5@port '" ~d. ~a" aK4caa@i (aK4c15@rpad (symbol->string (record-type-name aK4cae@rtd)) '" " aK4ca9@max-condition-len)) (if (null? aK4caf@fields-alist) (newline aK4ca5@port) (void)) (let aK4cb6@loop ((aK4cb2@first '#t) (aK4cb3@fields-alist aK4caf@fields-alist)) (if (null? aK4cb3@fields-alist) '() (let ((aK4cb8@field (car aK4cb3@fields-alist))) (begin (if (not aK4cb2@first) (display (aK4c15@rpad '"" '" " (+ '4 aK4ca9@max-condition-len)) aK4ca5@port) (void)) (display '"       " aK4ca5@port) (display (car aK4cb8@field) aK4ca5@port) (display '": " aK4ca5@port) (write (cdr aK4cb8@field) aK4ca5@port) (newline aK4ca5@port) (aK4cb6@loop '#f (cdr aK4cb3@fields-alist))))))))) (simple-conditions aK4ca4@e)))))) (set! aK4d78@aK4c17@condition-printer aK4c17@condition-printer) (set! aK4c19@record->field-alist (lambda (aK4cbc@r) (letrec* ((aK4cbf@ref (lambda (aK4cca@rtd aK4ccb@i aK4ccc@x) (let ((aK4cd0@val ((record-accessor aK4cca@rtd aK4ccb@i) aK4ccc@x))) (if (symbol? aK4cd0@val) (ungensym aK4cd0@val) aK4cd0@val))))) (let aK4cc4@loop ((aK4cc0@ret '()) (aK4cc1@rtd (record-rtd aK4cbc@r))) (if aK4cc1@rtd (aK4cc4@loop (append aK4cc0@ret (aK4c1b@map-with-index (lambda (aK4cc6@i aK4cc7@field) (cons aK4cc7@field (aK4cbf@ref aK4cc1@rtd aK4cc6@i aK4cbc@r))) (vector->list (record-type-field-names aK4cc1@rtd)))) (record-type-parent aK4cc1@rtd)) aK4cc0@ret))))) (set! aK4d79@aK4c19@record->field-alist aK4c19@record->field-alist) (set! aK4c1b@map-with-index (lambda (aK4cd2@proc aK4cd3@lst) (let aK4cdc@loop ((aK4cd6@i '0) (aK4cd7@lst aK4cd3@lst) (aK4cd8@ret '())) (if (null? aK4cd7@lst) (reverse aK4cd8@ret) (aK4cdc@loop (+ aK4cd6@i '1) (cdr aK4cd7@lst) (cons (aK4cd2@proc aK4cd6@i (car aK4cd7@lst)) aK4cd8@ret)))))) (set! aK4d7a@aK4c1b@map-with-index aK4c1b@map-with-index) (set! aK4c1d@repl (lambda aK4cde@x (letrec* ((aK4ce1@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (aK4ce4@aK4ce2) (lambda () (with-exception-handler (lambda (aK4ce6@e) ((call/cc (lambda (aK4ce8@aK4ce3) (aK4ce4@aK4ce2 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? aK4ce6@e) (aK4c17@condition-printer aK4ce6@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" aK4ce6@e))) (aK4ce8@aK4ce3 (lambda () (raise-continuable aK4ce6@e)))))))))) (lambda () (let aK4cee@loop ((aK4cea@line (get-line (current-input-port))) (aK4ceb@accum '"")) (letrec* ((aK4cf1@parentheses-ok? (lambda (aK4cfc@text) (let aK4d04@loop ((aK4cfe@chars (string->list aK4cfc@text)) (aK4cff@p0 '0) (aK4d00@p1 '0)) (if (null? aK4cfe@chars) (= '0 aK4cff@p0 aK4d00@p1) (let ((aK4d06@t (car aK4cfe@chars))) (if (memv aK4d06@t '(#\()) (aK4d04@loop (cdr aK4cfe@chars) (+ aK4cff@p0 '1) aK4d00@p1) (if (memv aK4d06@t '(#\))) (aK4d04@loop (cdr aK4cfe@chars) (- aK4cff@p0 '1) aK4d00@p1) (if (memv aK4d06@t '(#\[)) (aK4d04@loop (cdr aK4cfe@chars) aK4cff@p0 (+ aK4d00@p1 '1)) (if (memv aK4d06@t '(#\])) (aK4d04@loop (cdr aK4cfe@chars) aK4cff@p0 (- aK4d00@p1 '1)) (aK4d04@loop (cdr aK4cfe@chars) aK4cff@p0 aK4d00@p1)))))))))) (aK4cf3@eval-string-print (lambda (aK4cf6@text) (if (not (or (string=? '"\n" aK4cf6@text) (= '0 (string-length aK4cf6@text)))) (call-with-values (lambda () (aK4c2b@eval-top-level (call-with-port (open-string-input-port aK4cf6@text) read))) (lambda aK4cf8@out* (for-each (lambda (aK4cfa@out) (begin (write aK4cfa@out) (newline))) aK4cf8@out*))) (void))))) (if (eof-object? aK4cea@line) (begin (aK4cf3@eval-string-print aK4ceb@accum) (exit)) (let ((aK4cf4@current (string-append aK4ceb@accum aK4cea@line))) (if (aK4cf1@parentheses-ok? aK4cf4@current) (aK4cf3@eval-string-print aK4cf4@current) (aK4cee@loop (get-line (current-input-port)) aK4cf4@current)))))))))))) (newline) (aK4ce1@rec))))) (aK4ce1@rec)))) (set! aK4d7b@aK4c1d@repl aK4c1d@repl) (set! aK4c1f@trace-printer (aK2a07@aK28e5@make-parameter write)) (set! aK4d7c@aK4c1f@trace-printer aK4c1f@trace-printer) (set! aK4c21@command-line (aK2a07@aK28e5@make-parameter (get-command-line))) (set! aK4d7d@aK4c21@command-line aK4c21@command-line) (set! aK4c23@local-library-path (lambda (aK4d08@filename) (aK2cc1@aK2afd@library-path))) (set! aK4d7e@aK4c23@local-library-path aK4c23@local-library-path) (set! aK4c25@load/args (lambda (aK4d0a@filename . aK4d0c@args) (begin (apply aK4c35@load-r6rs-top-level aK4d0a@filename 'load aK4d0c@args) (void)))) (set! aK4d7f@aK4c25@load/args aK4c25@load/args) (set! aK4c27@load (lambda (aK4d0e@filename) (begin (apply aK4c35@load-r6rs-top-level aK4d0e@filename 'load (aK4c21@command-line)) (void)))) (set! aK4d80@aK4c27@load aK4c27@load) (set! aK4c29@ironscheme-build (lambda () (aK4c27@load '"ironscheme-buildscript.ss"))) (set! aK4d81@aK4c29@ironscheme-build aK4c29@ironscheme-build) (set! aK4c2b@eval-top-level (lambda (aK4d10@x) (aK4be8@aK317e@eval aK4d10@x (aK4bff@aK31ac@interaction-environment)))) (set! aK4d82@aK4c2b@eval-top-level aK4c2b@eval-top-level) (set! aK4c2d@compile-system-libraries (lambda () (aK4c2b@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! aK4d83@aK4c2d@compile-system-libraries aK4c2d@compile-system-libraries) (set! aK4c2f@compile (lambda (aK4d12@filename) (aK4c35@load-r6rs-top-level aK4d12@filename 'compile))) (set! aK4d84@aK4c2f@compile aK4c2f@compile) (set! aK4c31@compile->closure (lambda (aK4d14@filename) (aK4c35@load-r6rs-top-level aK4d14@filename 'closure))) (set! aK4d85@aK4c31@compile->closure aK4c31@compile->closure) (set! aK4c33@pre-compile-r6rs-file (lambda (aK4d16@filename) (aK4c35@load-r6rs-top-level aK4d16@filename 'compile))) (set! aK4d86@aK4c33@pre-compile-r6rs-file aK4c33@pre-compile-r6rs-file) (set! aK4c35@load-r6rs-top-level (lambda (aK4d18@filename aK4d19@how . aK4d1c@args) (begin (aK2cc1@aK2afd@library-path (aK4c23@local-library-path aK4d18@filename)) (let ((aK4d1e@x* (with-input-from-file aK4d18@filename (lambda () (let aK4d20@f () (let ((aK4d22@x (aK29f9@aK28c9@read-annotated))) (if (eof-object? aK4d22@x) '() (cons aK4d22@x (aK4d20@f))))))))) (let ((aK4d24@t aK4d19@how)) (if (memv aK4d24@t '(closure)) (aK4bfe@aK31aa@pre-compile-r6rs-top-level aK4d1e@x*) (if (memv aK4d24@t '(load)) (begin (aK4c21@command-line (cons aK4d18@filename (car aK4d1c@args))) (aK2a08@aK28e7@mosh-cache-dir (create-mosh-cache-dir)) (if (aK2a08@aK28e7@mosh-cache-dir) (gensym-prefix-set! (aK4c3b@prefix-inc! (string-append (aK2a08@aK28e7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aK4d26@file) ((call/cc (lambda (aK4d2a@aK4d28) (lambda () (with-exception-handler (lambda (aK4d2c@c) ((call/cc (lambda (aK4d2e@aK4d29) (aK4d2a@aK4d28 (lambda () (if '#t '#t (aK4d2e@aK4d29 (lambda () (raise-continuable aK4d2c@c)))))))))) (lambda () (delete-file (string-append (aK2a08@aK28e7@mosh-cache-dir) '"/" aK4d26@file))))))))) (directory-list (aK2a08@aK28e7@mosh-cache-dir))) (void)) (let ((aK4d30@compiled (aK4bfd@aK31a8@compile-r6rs-top-level aK4d1e@x*))) (begin (if (and (aK2a08@aK28e7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aK2cc5@aK2b05@serialize-all aK2a02@aK28db@serialize-library aK2a5e@aK2a17@compile-core-expr) (void)) (aK4d30@compiled)))) (if (memv aK4d24@t '(compile)) (begin (aK4bfd@aK31a8@compile-r6rs-top-level aK4d1e@x*) (aK2cc5@aK2b05@serialize-all aK2a02@aK28db@serialize-library aK2a5e@aK2a17@compile-core-expr)) (if '#f '#f (void)))))))))) (set! aK4d87@aK4c35@load-r6rs-top-level aK4c35@load-r6rs-top-level) (set! aK4c37@load-r6rs-top-level-sexp (lambda (aK4d32@import-spec aK4d33@thunk) (let ((aK4d3e@aK4d37 aK2cc1@aK2afd@library-path) (aK4d3f@aK4d39 aK2a08@aK28e7@mosh-cache-dir) (aK4d40@aK4d3b (aK4c23@local-library-path '"")) (aK4d41@aK4d3d (create-mosh-cache-dir))) (let ((aK4d46@swap (lambda () (begin (let ((aK4d48@t (aK4d3e@aK4d37))) (begin (aK4d3e@aK4d37 aK4d40@aK4d3b) (set! aK4d40@aK4d3b aK4d48@t))) (let ((aK4d4a@t (aK4d3f@aK4d39))) (begin (aK4d3f@aK4d39 aK4d41@aK4d3d) (set! aK4d41@aK4d3d aK4d4a@t))))))) (dynamic-wind aK4d46@swap (lambda () (begin (if (aK2a08@aK28e7@mosh-cache-dir) (gensym-prefix-set! (aK4c3b@prefix-inc! (string-append (aK2a08@aK28e7@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((aK4d50@aK4d4d aK4c21@command-line) (aK4d51@aK4d4f '())) (let ((aK4d54@swap (lambda () (let ((aK4d56@t (aK4d50@aK4d4d))) (begin (aK4d50@aK4d4d aK4d51@aK4d4f) (set! aK4d51@aK4d4f aK4d56@t)))))) (dynamic-wind aK4d54@swap (lambda () ((aK4bfd@aK31a8@compile-r6rs-top-level (list (cons 'import aK4d32@import-spec) (list aK4d33@thunk))))) aK4d54@swap))))) aK4d46@swap))))) (set! aK4d88@aK4c37@load-r6rs-top-level-sexp aK4c37@load-r6rs-top-level-sexp) (set! aK4c39@prefix-inc (lambda (aK4d58@prefix-string) (let ((aK4d5a@prefix (symbol->string aK4d58@prefix-string))) (let ((aK4d5c@len (string-length aK4d5a@prefix))) (let aK4d64@loop ((aK4d5e@i (- aK4d5c@len '1)) (aK4d5f@carry? '#t) (aK4d60@accum '())) (if (< aK4d5e@i '0) (string->symbol (list->string (if aK4d5f@carry? (cons '#\a aK4d60@accum) aK4d60@accum))) (if aK4d5f@carry? (let ((aK4d66@next-integer (+ '1 (char->integer (string-ref aK4d5a@prefix aK4d5e@i))))) (if (= aK4d66@next-integer '123) (aK4d64@loop (- aK4d5e@i '1) '#f (cons '#\A aK4d60@accum)) (if (= aK4d66@next-integer '91) (aK4d64@loop (- aK4d5e@i '1) '#t (cons '#\a aK4d60@accum)) (aK4d64@loop (- aK4d5e@i '1) '#f (cons (integer->char aK4d66@next-integer) aK4d60@accum))))) (aK4d64@loop (- aK4d5e@i '1) '#f (cons (string-ref aK4d5a@prefix aK4d5e@i) aK4d60@accum))))))))) (set! aK4d89@aK4c39@prefix-inc aK4c39@prefix-inc) (set! aK4c3b@prefix-inc! (lambda (aK4d68@file) (begin (if (not (file-exists? aK4d68@file)) (call-with-output-file aK4d68@file (lambda (aK4d6a@port) (write 'd aK4d6a@port))) (void)) (let ((aK4d6c@prefix (call-with-input-file aK4d68@file read))) (if (main-vm?) (let ((aK4d6e@next-prefix (aK4c39@prefix-inc aK4d6c@prefix))) (begin (call-with-port (open-file-output-port aK4d68@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (aK4d70@port) (write aK4d6e@next-prefix aK4d70@port))) aK4d6c@prefix)) aK4d6c@prefix))))) (set! aK4d8a@aK4c3b@prefix-inc! aK4c3b@prefix-inc!) (begin (aK2cc6@aK2b07@current-precompiled-library-loader aK2a03@aK28dd@load-serialized-library) (set-symbol-value! 'load aK4c27@load) (set-symbol-value! 'pre-compile-r6rs-file aK4c33@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs aK4c2b@eval-top-level) (set-symbol-value! 'int-env-syms aK4bdf@aK316c@interaction-environment-symbols) (set-symbol-value! 'expanded2core aK2a5d@aK2a15@expanded->core) (set-symbol-value! 'trace-printer aK4c1f@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (aK4c3c@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list aK4c3c@c))))) (aK4c11@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (aK4c11@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (aK4c0f@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (aK4c0f@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (aK4c0f@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((aK4c3e@prefix (lambda (aK4c40@ext aK4c41@ls) (append (map (lambda (aK4c44@x) (string-append aK4c40@ext aK4c44@x)) aK4c41@ls) aK4c41@ls)))) (aK2cc2@aK2aff@library-extensions (aK4c3e@prefix '".mosh" (aK2cc2@aK2aff@library-extensions)))) (current-exception-handler (lambda (aK4c46@c) (begin (if (condition? aK4c46@c) (aK4c17@condition-printer aK4c46@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" aK4c46@c)) aK4c46@c))) (if ((call/cc (lambda (aK4c4a@aK4c48) (lambda () (with-exception-handler (lambda (aK4c4c@c) ((call/cc (lambda (aK4c4e@aK4c49) (aK4c4a@aK4c48 (lambda () (if '#t '#f (aK4c4e@aK4c49 (lambda () (raise-continuable aK4c4c@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (aK4c37@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (aK4c21@command-line)) (let ((aK4c58@aK4c51 aK4c21@command-line) (aK4c59@aK4c53 aK2a08@aK28e7@mosh-cache-dir) (aK4c5a@aK4c55 '()) (aK4c5b@aK4c57 (create-mosh-cache-dir))) (let ((aK4c60@swap (lambda () (begin (let ((aK4c62@t (aK4c58@aK4c51))) (begin (aK4c58@aK4c51 aK4c5a@aK4c55) (set! aK4c5a@aK4c55 aK4c62@t))) (let ((aK4c64@t (aK4c59@aK4c53))) (begin (aK4c59@aK4c53 aK4c5b@aK4c57) (set! aK4c5b@aK4c57 aK4c64@t))))))) (dynamic-wind aK4c60@swap (lambda () (begin (if (aK2a08@aK28e7@mosh-cache-dir) (gensym-prefix-set! (aK4c3b@prefix-inc! (string-append (aK2a08@aK28e7@mosh-cache-dir) '"/prefix.txt"))) (void)) (aK4c1d@repl))) aK4c60@swap))) (begin (aK2cc1@aK2afd@library-path (aK4c23@local-library-path (car (aK4c21@command-line)))) (set! aK4c0d@x* (with-input-from-file (car (aK4c21@command-line)) (lambda () (let aK4c66@f () (let ((aK4c68@x (aK29f9@aK28c9@read-annotated))) (if (eof-object? aK4c68@x) '() (cons aK4c68@x (aK4c66@f)))))))) (aK4c21@command-line (cons (car (aK4c21@command-line)) (cdr (aK4c21@command-line)))) (aK2a08@aK28e7@mosh-cache-dir (create-mosh-cache-dir)) (if (aK2a08@aK28e7@mosh-cache-dir) (gensym-prefix-set! (aK4c3b@prefix-inc! (string-append (aK2a08@aK28e7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aK4c6a@file) ((call/cc (lambda (aK4c6e@aK4c6c) (lambda () (with-exception-handler (lambda (aK4c70@c) ((call/cc (lambda (aK4c72@aK4c6d) (aK4c6e@aK4c6c (lambda () (if '#t '#t (aK4c72@aK4c6d (lambda () (raise-continuable aK4c70@c)))))))))) (lambda () (delete-file (string-append (aK2a08@aK28e7@mosh-cache-dir) '"/" aK4c6a@file))))))))) (directory-list (aK2a08@aK28e7@mosh-cache-dir))) (void)) (let ((aK4c74@compiled (aK4bfd@aK31a8@compile-r6rs-top-level aK4c0d@x*))) (begin (if (and (aK2a08@aK28e7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aK2cc5@aK2b05@serialize-all aK2a02@aK28db@serialize-library aK2a5e@aK2a17@compile-core-expr) (void)) (aK4c74@compiled))))))))
