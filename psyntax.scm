;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! lc28c3@library-file-path->cache-path (unspecified)) (set! lc28c5@read-annotated (unspecified)) (set! lc28c7@annotation-stripped (unspecified)) (set! lc28c9@annotation? (unspecified)) (set! lc28cb@annotation-source (unspecified)) (set! lc28cd@annotation-expression (unspecified)) (set! lc28cf@scm->fasl (unspecified)) (set! lc28d1@fasl-save (unspecified)) (set! lc28d3@fasl-load (unspecified)) (set! lc28d5@verbose? (unspecified)) (set! lc28d7@serialize-library (unspecified)) (set! lc28d9@load-serialized-library (unspecified)) (set! lc28db@make-record-printer (unspecified)) (set! lc28dd@compile-core (unspecified)) (set! lc28df@read-library-source-file (unspecified)) (set! lc28e1@make-parameter (unspecified)) (set! lc28e3@mosh-cache-dir (unspecified)) (set! lc2979@file-options-spec (unspecified)) (set! lc28c3@library-file-path->cache-path (lambda (lc297a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lc2980@lc297d lc2981@lc297f) (let ((lc2984@extract lc2981@lc297f) (lc2985@p lc2980@lc297d)) (letrec* ((lc2989@display-hex (lambda (lc2992@n) (if (<= '0 lc2992@n '9) (display lc2992@n lc2985@p) (display (integer->char (+ (char->integer '#\a) (- lc2992@n '10))) lc2985@p))))) (begin (let lc298c@f ((lc298a@ls (string-split lc297a@x '#\/))) (if (not (null? lc298a@ls)) (begin (display '"_" lc2985@p) (for-each (lambda (lc298e@c) (if (or (char<=? '#\a lc298e@c '#\z) (char<=? '#\A lc298e@c '#\Z) (char<=? '#\0 lc298e@c '#\9) (memv lc298e@c '(#\- #\. #\_ #\~))) (display lc298e@c lc2985@p) (begin (display '"%" lc2985@p) (let ((lc2990@n (char->integer lc298e@c))) (begin (lc2989@display-hex (quotient lc2990@n '16)) (lc2989@display-hex (remainder lc2990@n '16))))))) (string->list (car lc298a@ls))) (lc298c@f (cdr lc298a@ls))) (void))) (lc2984@extract)))))))) (set! lc29f4@lc28c3@library-file-path->cache-path lc28c3@library-file-path->cache-path) (set! lc28c5@read-annotated read) (set! lc29f5@lc28c5@read-annotated lc28c5@read-annotated) (set! lc28c7@annotation-stripped (lambda (lc2994@x) (lc28cd@annotation-expression lc2994@x))) (set! lc29f6@lc28c7@annotation-stripped lc28c7@annotation-stripped) (set! lc28c9@annotation? (lambda (lc2996@x) (source-info lc2996@x))) (set! lc29f7@lc28c9@annotation? lc28c9@annotation?) (set! lc28cb@annotation-source (lambda (lc2998@x) (source-info lc2998@x))) (set! lc29f8@lc28cb@annotation-source lc28cb@annotation-source) (set! lc28cd@annotation-expression (lambda (lc299a@x) (if (pair? lc299a@x) (cons (car lc299a@x) (cdr lc299a@x)) (if (procedure? lc299a@x) (set-source-info! lc299a@x '#f) lc299a@x)))) (set! lc29f9@lc28cd@annotation-expression lc28cd@annotation-expression) (set! lc28cf@scm->fasl (lambda (lc299c@filename) (string-append (lc28e3@mosh-cache-dir) '"/" (lc28c3@library-file-path->cache-path lc299c@filename) '".mosh-fasl"))) (set! lc29fa@lc28cf@scm->fasl lc28cf@scm->fasl) (set! lc28d1@fasl-save (lambda (lc299e@filename lc299f@obj) (call-with-port (open-file-output-port lc299e@filename) (lambda (lc29a2@port) ((symbol-value 'fasl-write!) lc299f@obj lc29a2@port))))) (set! lc29fb@lc28d1@fasl-save lc28d1@fasl-save) (set! lc28d3@fasl-load (lambda (lc29a4@filename) (call-with-port (open-file-input-port lc29a4@filename) (symbol-value 'fasl-read!)))) (set! lc29fc@lc28d3@fasl-load lc28d3@fasl-load) (set! lc28d5@verbose? (symbol-value '%verbose)) (set! lc29fd@lc28d5@verbose? lc28d5@verbose?) (set! lc28d7@serialize-library (lambda (lc29a6@filename lc29a7@obj) (begin (if lc28d5@verbose? (format (current-error-port) '"serialize-library ~a\n..." lc29a6@filename) (void)) (let ((lc29aa@expanded2core (symbol-value 'expanded2core))) (let ((lc29ac@compile (symbol-value 'compile-w/o-halt))) (let ((lc29ae@code lc29a7@obj)) (let ((lc29b0@pivot (cddddr (cddddr lc29ae@code)))) (let ((lc29b2@visit (lc29ac@compile (lc29aa@expanded2core (car lc29b0@pivot))))) (begin (set-car! lc29b0@pivot lc29b2@visit) (let ((lc29b4@pivot (cdr lc29b0@pivot))) (let ((lc29b6@invoke (lc29ac@compile (lc29aa@expanded2core (car lc29b4@pivot))))) (set-car! lc29b4@pivot lc29b6@invoke))))))))) (let ((lc29b8@fasl-file (lc28cf@scm->fasl lc29a6@filename))) (begin (if (file-exists? lc29b8@fasl-file) (delete-file lc29b8@fasl-file) (void)) ((call/cc (lambda (lc29bc@lc29ba) (lambda () (with-exception-handler (lambda (lc29be@c) ((call/cc (lambda (lc29c0@lc29bb) (lc29bc@lc29ba (lambda () (if '#t (begin (if lc28d5@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" lc29a6@filename) (void)) (if (file-exists? lc29b8@fasl-file) (delete-file lc29b8@fasl-file) (void)) '#f) (lc29c0@lc29bb (lambda () (raise-continuable lc29be@c)))))))))) (lambda () (lc28d1@fasl-save lc29b8@fasl-file lc29a7@obj)))))))))))) (set! lc29fe@lc28d7@serialize-library lc28d7@serialize-library) (set! lc28d9@load-serialized-library (lambda (lc29c2@filename lc29c3@obj) (and (lc28e3@mosh-cache-dir) (let ((lc29c6@fasl-file (lc28cf@scm->fasl lc29c2@filename))) (if (and (file-exists? lc29c6@fasl-file) ((symbol-value 'file-newer?) lc29c6@fasl-file lc29c2@filename)) (let ((lc29c8@expanded2core (symbol-value 'expanded2core))) (let ((lc29ca@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((lc29cc@code (lc28d3@fasl-load lc29c6@fasl-file))) (let ((lc29ce@pivot (cddddr (cddddr lc29cc@code)))) (let ((lc29d0@visit (car lc29ce@pivot))) (let ((lc29d2@visit-proc (lambda () (lc29ca@eval-compiled-core lc29d0@visit)))) (begin (set-car! lc29ce@pivot lc29d2@visit-proc) (let ((lc29d4@pivot (cdr lc29ce@pivot))) (let ((lc29d6@invoke (car lc29d4@pivot))) (begin (set-car! lc29d4@pivot (lambda () (lc29ca@eval-compiled-core lc29d6@invoke))) (apply lc29c3@obj lc29cc@code))))))))))) '#f))))) (set! lc29ff@lc28d9@load-serialized-library lc28d9@load-serialized-library) (set! lc28db@make-record-printer (lambda (lc29d8@name lc29d9@printer) (lambda lc29dc@x (begin (display '"record printer") (for-each display lc29dc@x))))) (set! lc2a00@lc28db@make-record-printer lc28db@make-record-printer) (set! lc28dd@compile-core (lambda lc29de@x (apply error 'comile-core '"not implementated" lc29de@x))) (set! lc2a01@lc28dd@compile-core lc28dd@compile-core) (set! lc28df@read-library-source-file (lambda (lc29e0@file-name) (with-input-from-file lc29e0@file-name lc28c5@read-annotated))) (set! lc2a02@lc28df@read-library-source-file lc28df@read-library-source-file) (set! lc28e1@make-parameter (lambda lc29f0 (let ((lc29f1 (length lc29f0))) (if (= lc29f1 '1) (apply (lambda (lc29e2@x) (lc28e1@make-parameter lc29e2@x (lambda (lc29e4@x) lc29e4@x))) lc29f0) (if (= lc29f1 '2) (apply (lambda (lc29e6@x lc29e7@fender) (let ((lc29ea@x (lc29e7@fender lc29e6@x))) (lambda lc29ee (let ((lc29ef (length lc29ee))) (if (= lc29ef '0) (apply (lambda () lc29ea@x) lc29ee) (if (= lc29ef '1) (apply (lambda (lc29ec@v) (set! lc29ea@x (lc29e7@fender lc29ec@v))) lc29ee) (error 'apply '"invalid arg count"))))))) lc29f0) (error 'apply '"invalid arg count")))))) (set! lc2a03@lc28e1@make-parameter lc28e1@make-parameter) (set! lc28e3@mosh-cache-dir (lc28e1@make-parameter '#f)) (set! lc2a04@lc28e3@mosh-cache-dir lc28e3@mosh-cache-dir) (set! lc2979@file-options-spec (lambda (lc29f2@x) lc29f2@x)) (set! lc2a05@lc2979@file-options-spec lc2979@file-options-spec) (void))
(begin (set! lc2a0b@current-primitive-locations (unspecified)) (set! lc2a0d@mutable? (unspecified)) (set! lc2a0f@rewriter (unspecified)) (set! lc2a11@expanded->core (unspecified)) (set! lc2a13@compile-core-expr (unspecified)) (set! lc2a15@pretty-print (unspecified)) (set! lc2a17@compile-core-expr-to-port (unspecified)) (set! lc2a0b@current-primitive-locations (lc2a03@lc28e1@make-parameter (lambda (lc2a18@x) '#f) (lambda (lc2a1a@p) lc2a1a@p))) (set! lc2a56@lc2a0b@current-primitive-locations lc2a0b@current-primitive-locations) (set! lc2a0d@mutable? (lambda (lc2a1c@x) (or (pair? lc2a1c@x) (vector? lc2a1c@x) (hashtable? lc2a1c@x)))) (set! lc2a57@lc2a0d@mutable? lc2a0d@mutable?) (set! lc2a0f@rewriter (lambda (lc2a1e@quote-hack?) (letrec* ((lc2a21@f (lambda (lc2a22@x) (if (pair? lc2a22@x) (let ((lc2a24@t (car lc2a22@x))) (if (memv lc2a24@t '(quote)) (if (and lc2a1e@quote-hack? (lc2a0d@mutable? (cadr lc2a22@x))) (let ((lc2a26@g (gensym))) (begin (set-symbol-value! lc2a26@g (cadr lc2a22@x)) lc2a26@g)) lc2a22@x) (if (memv lc2a24@t '(case-lambda)) (cons 'case-lambda (map (lambda (lc2a28@x) (cons (car lc2a28@x) (map lc2a21@f (cdr lc2a28@x)))) (cdr lc2a22@x))) (if (memv lc2a24@t '(lambda)) (cons* 'lambda (cadr lc2a22@x) (map lc2a21@f (cddr lc2a22@x))) (if (memv lc2a24@t '(letrec)) (let ((lc2a2a@bindings (cadr lc2a22@x)) (lc2a2b@body* (cddr lc2a22@x))) (let ((lc2a2e@lhs* (map car lc2a2a@bindings)) (lc2a2f@rhs* (map cadr lc2a2a@bindings))) (cons* 'letrec (map list lc2a2e@lhs* (map lc2a21@f lc2a2f@rhs*)) (map lc2a21@f lc2a2b@body*)))) (if (memv lc2a24@t '(letrec*)) (let ((lc2a32@bindings (cadr lc2a22@x)) (lc2a33@body* (cddr lc2a22@x))) (let ((lc2a36@lhs* (map car lc2a32@bindings)) (lc2a37@rhs* (map cadr lc2a32@bindings))) (cons* 'letrec* (map list lc2a36@lhs* (map lc2a21@f lc2a37@rhs*)) (map lc2a21@f lc2a33@body*)))) (if (memv lc2a24@t '(library-letrec*)) (let ((lc2a3a@name (cadr lc2a22@x)) (lc2a3b@x (cdr lc2a22@x))) (let ((lc2a3e@bindings (cadr lc2a3b@x)) (lc2a3f@body* (cddr lc2a3b@x))) (let ((lc2a42@lhs* (map car lc2a3e@bindings)) (lc2a43@lhs** (map cadr lc2a3e@bindings)) (lc2a44@rhs* (map caddr lc2a3e@bindings))) (cons* 'library-letrec* lc2a3a@name (map list lc2a42@lhs* lc2a43@lhs** (map lc2a21@f lc2a44@rhs*)) (map lc2a21@f lc2a3f@body*))))) (if (memv lc2a24@t '(begin)) (cons 'begin (map lc2a21@f (cdr lc2a22@x))) (if (memv lc2a24@t '(set!)) (list 'set! (cadr lc2a22@x) (lc2a21@f (caddr lc2a22@x))) (if (memv lc2a24@t '(primitive)) (let ((lc2a48@op (cadr lc2a22@x))) (let ((lc2a4a@t ((lc2a0b@current-primitive-locations) lc2a48@op))) (if lc2a4a@t ((lambda (lc2a4c@loc) lc2a4c@loc) lc2a4a@t) lc2a48@op))) (if (memv lc2a24@t '(define)) lc2a22@x (if (list? lc2a22@x) (map lc2a21@f lc2a22@x) (error 'rewrite '"invalid form ~s ~s" lc2a22@x (list? lc2a22@x)))))))))))))) lc2a22@x)))) lc2a21@f))) (set! lc2a58@lc2a0f@rewriter lc2a0f@rewriter) (set! lc2a11@expanded->core (lambda (lc2a4e@x) ((lc2a0f@rewriter '#f) lc2a4e@x))) (set! lc2a59@lc2a11@expanded->core lc2a11@expanded->core) (set! lc2a13@compile-core-expr (lambda (lc2a50@x) ((lc2a0f@rewriter '#f) lc2a50@x))) (set! lc2a5a@lc2a13@compile-core-expr lc2a13@compile-core-expr) (set! lc2a15@pretty-print write) (set! lc2a5b@lc2a15@pretty-print lc2a15@pretty-print) (set! lc2a17@compile-core-expr-to-port (lambda (lc2a52@x lc2a53@p) (lc2a15@pretty-print ((lc2a0f@rewriter '#f) lc2a52@x) lc2a53@p))) (set! lc2a5c@lc2a17@compile-core-expr-to-port lc2a17@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! lc2aab@make-collection (unspecified)) (set! lc2aad@current-library-collection (unspecified)) (set! lc2aaf@rp (unspecified)) (set! lc2ab9@library? (unspecified)) (set! lc2abb@library-id (unspecified)) (set! lc2abd@set-library-id! (unspecified)) (set! lc2abf@library-name (unspecified)) (set! lc2ac1@set-library-name! (unspecified)) (set! lc2ac3@library-version (unspecified)) (set! lc2ac5@set-library-version! (unspecified)) (set! lc2ac7@library-imp* (unspecified)) (set! lc2ac9@set-library-imp*! (unspecified)) (set! lc2acb@library-vis* (unspecified)) (set! lc2acd@set-library-vis*! (unspecified)) (set! lc2acf@library-inv* (unspecified)) (set! lc2ad1@set-library-inv*! (unspecified)) (set! lc2ad3@library-subst (unspecified)) (set! lc2ad5@set-library-subst! (unspecified)) (set! lc2ad7@library-env (unspecified)) (set! lc2ad9@set-library-env! (unspecified)) (set! lc2adb@library-visit-state (unspecified)) (set! lc2add@set-library-visit-state! (unspecified)) (set! lc2adf@library-invoke-state (unspecified)) (set! lc2ae1@set-library-invoke-state! (unspecified)) (set! lc2ae3@library-visit-code (unspecified)) (set! lc2ae5@set-library-visit-code! (unspecified)) (set! lc2ae7@library-invoke-code (unspecified)) (set! lc2ae9@set-library-invoke-code! (unspecified)) (set! lc2aeb@library-visible? (unspecified)) (set! lc2aed@set-library-visible?! (unspecified)) (set! lc2aef@library-source-file-name (unspecified)) (set! lc2af1@set-library-source-file-name! (unspecified)) (set! lc2af3@dummy (unspecified)) (set! lc2af5@find-dependencies (unspecified)) (set! lc2af7@find-library-by (unspecified)) (set! lc2af9@library-path (unspecified)) (set! lc2afb@library-extensions (unspecified)) (set! lc2afd@library-name->file-name (unspecified)) (set! lc2aff@file-locator (unspecified)) (set! lc2b01@serialize-all (unspecified)) (set! lc2b03@current-precompiled-library-loader (unspecified)) (set! lc2b05@try-load-from-file (unspecified)) (set! lc2b07@library-loader (unspecified)) (set! lc2b09@current-library-expander (unspecified)) (set! lc2b0b@external-pending-libraries (unspecified)) (set! lc2b0d@find-external-library (unspecified)) (set! lc2b0f@find-library-by-name (unspecified)) (set! lc2b11@library-exists? (unspecified)) (set! lc2b13@find-library-by-spec/die (unspecified)) (set! lc2b15@label->binding-table (unspecified)) (set! lc2b17@install-library-record (unspecified)) (set! lc2b19@install-library (unspecified)) (set! lc2b1b@imported-label->binding (unspecified)) (set! lc2b1d@invoke-library (unspecified)) (set! lc2b1f@visit-library (unspecified)) (set! lc2b21@invoke-library-by-spec (unspecified)) (set! lc2b23@installed-libraries (unspecified)) (set! lc2b25@library-spec (unspecified)) (set! lc2aab@make-collection (lambda () (let ((lc2b26@set '())) (letrec* ((lc2b29@set-cons (lambda (lc2b2e@x lc2b2f@ls) (if (memq lc2b2e@x lc2b2f@ls) lc2b2f@ls (cons lc2b2e@x lc2b2f@ls))))) (lambda lc2b2c (let ((lc2b2d (length lc2b2c))) (if (= lc2b2d '0) (apply (lambda () lc2b26@set) lc2b2c) (if (= lc2b2d '1) (apply (lambda (lc2b2a@x) (set! lc2b26@set (lc2b29@set-cons lc2b2a@x lc2b26@set))) lc2b2c) (error 'apply '"invalid arg count"))))))))) (set! lc2c9a@lc2aab@make-collection lc2aab@make-collection) (set! lc2aad@current-library-collection (lc2a03@lc28e1@make-parameter (lc2aab@make-collection) (lambda (lc2b32@x) (begin (if (not (procedure? lc2b32@x)) (assertion-violation 'current-library-collection '"not a procedure" lc2b32@x) (void)) lc2b32@x)))) (set! lc2c9b@lc2aad@current-library-collection lc2aad@current-library-collection) (set! lc2aaf@rp (lc2a00@lc28db@make-record-printer 'library (lambda (lc2b34@x lc2b35@p lc2b36@wr) (begin (if (not (lc2ab9@library? lc2b34@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (lc2ac3@library-version lc2b34@x)) (lc2abf@library-name lc2b34@x) (append (lc2abf@library-name lc2b34@x) (list (lc2ac3@library-version lc2b34@x))))) lc2b35@p))))) (set! lc2c9c@lc2aaf@rp lc2aaf@rp) (set! lc2ab9@library? (lambda (lc2b3a@x) (and (simple-struct? lc2b3a@x) (eq? (simple-struct-name lc2b3a@x) 'library)))) (set! lc2c9d@lc2ab9@library? lc2ab9@library?) (set! lc2abb@library-id (lambda (lc2b3c@x) (simple-struct-ref lc2b3c@x '0))) (set! lc2c9e@lc2abb@library-id lc2abb@library-id) (set! lc2abd@set-library-id! (lambda (lc2b3e@x lc2b3f@val) (simple-struct-set! lc2b3e@x '0 lc2b3f@val))) (set! lc2c9f@lc2abd@set-library-id! lc2abd@set-library-id!) (set! lc2abf@library-name (lambda (lc2b42@x) (simple-struct-ref lc2b42@x '1))) (set! lc2ca0@lc2abf@library-name lc2abf@library-name) (set! lc2ac1@set-library-name! (lambda (lc2b44@x lc2b45@val) (simple-struct-set! lc2b44@x '1 lc2b45@val))) (set! lc2ca1@lc2ac1@set-library-name! lc2ac1@set-library-name!) (set! lc2ac3@library-version (lambda (lc2b48@x) (simple-struct-ref lc2b48@x '2))) (set! lc2ca2@lc2ac3@library-version lc2ac3@library-version) (set! lc2ac5@set-library-version! (lambda (lc2b4a@x lc2b4b@val) (simple-struct-set! lc2b4a@x '2 lc2b4b@val))) (set! lc2ca3@lc2ac5@set-library-version! lc2ac5@set-library-version!) (set! lc2ac7@library-imp* (lambda (lc2b4e@x) (simple-struct-ref lc2b4e@x '3))) (set! lc2ca4@lc2ac7@library-imp* lc2ac7@library-imp*) (set! lc2ac9@set-library-imp*! (lambda (lc2b50@x lc2b51@val) (simple-struct-set! lc2b50@x '3 lc2b51@val))) (set! lc2ca5@lc2ac9@set-library-imp*! lc2ac9@set-library-imp*!) (set! lc2acb@library-vis* (lambda (lc2b54@x) (simple-struct-ref lc2b54@x '4))) (set! lc2ca6@lc2acb@library-vis* lc2acb@library-vis*) (set! lc2acd@set-library-vis*! (lambda (lc2b56@x lc2b57@val) (simple-struct-set! lc2b56@x '4 lc2b57@val))) (set! lc2ca7@lc2acd@set-library-vis*! lc2acd@set-library-vis*!) (set! lc2acf@library-inv* (lambda (lc2b5a@x) (simple-struct-ref lc2b5a@x '5))) (set! lc2ca8@lc2acf@library-inv* lc2acf@library-inv*) (set! lc2ad1@set-library-inv*! (lambda (lc2b5c@x lc2b5d@val) (simple-struct-set! lc2b5c@x '5 lc2b5d@val))) (set! lc2ca9@lc2ad1@set-library-inv*! lc2ad1@set-library-inv*!) (set! lc2ad3@library-subst (lambda (lc2b60@x) (simple-struct-ref lc2b60@x '6))) (set! lc2caa@lc2ad3@library-subst lc2ad3@library-subst) (set! lc2ad5@set-library-subst! (lambda (lc2b62@x lc2b63@val) (simple-struct-set! lc2b62@x '6 lc2b63@val))) (set! lc2cab@lc2ad5@set-library-subst! lc2ad5@set-library-subst!) (set! lc2ad7@library-env (lambda (lc2b66@x) (simple-struct-ref lc2b66@x '7))) (set! lc2cac@lc2ad7@library-env lc2ad7@library-env) (set! lc2ad9@set-library-env! (lambda (lc2b68@x lc2b69@val) (simple-struct-set! lc2b68@x '7 lc2b69@val))) (set! lc2cad@lc2ad9@set-library-env! lc2ad9@set-library-env!) (set! lc2adb@library-visit-state (lambda (lc2b6c@x) (simple-struct-ref lc2b6c@x '8))) (set! lc2cae@lc2adb@library-visit-state lc2adb@library-visit-state) (set! lc2add@set-library-visit-state! (lambda (lc2b6e@x lc2b6f@val) (simple-struct-set! lc2b6e@x '8 lc2b6f@val))) (set! lc2caf@lc2add@set-library-visit-state! lc2add@set-library-visit-state!) (set! lc2adf@library-invoke-state (lambda (lc2b72@x) (simple-struct-ref lc2b72@x '9))) (set! lc2cb0@lc2adf@library-invoke-state lc2adf@library-invoke-state) (set! lc2ae1@set-library-invoke-state! (lambda (lc2b74@x lc2b75@val) (simple-struct-set! lc2b74@x '9 lc2b75@val))) (set! lc2cb1@lc2ae1@set-library-invoke-state! lc2ae1@set-library-invoke-state!) (set! lc2ae3@library-visit-code (lambda (lc2b78@x) (simple-struct-ref lc2b78@x '10))) (set! lc2cb2@lc2ae3@library-visit-code lc2ae3@library-visit-code) (set! lc2ae5@set-library-visit-code! (lambda (lc2b7a@x lc2b7b@val) (simple-struct-set! lc2b7a@x '10 lc2b7b@val))) (set! lc2cb3@lc2ae5@set-library-visit-code! lc2ae5@set-library-visit-code!) (set! lc2ae7@library-invoke-code (lambda (lc2b7e@x) (simple-struct-ref lc2b7e@x '11))) (set! lc2cb4@lc2ae7@library-invoke-code lc2ae7@library-invoke-code) (set! lc2ae9@set-library-invoke-code! (lambda (lc2b80@x lc2b81@val) (simple-struct-set! lc2b80@x '11 lc2b81@val))) (set! lc2cb5@lc2ae9@set-library-invoke-code! lc2ae9@set-library-invoke-code!) (set! lc2aeb@library-visible? (lambda (lc2b84@x) (simple-struct-ref lc2b84@x '12))) (set! lc2cb6@lc2aeb@library-visible? lc2aeb@library-visible?) (set! lc2aed@set-library-visible?! (lambda (lc2b86@x lc2b87@val) (simple-struct-set! lc2b86@x '12 lc2b87@val))) (set! lc2cb7@lc2aed@set-library-visible?! lc2aed@set-library-visible?!) (set! lc2aef@library-source-file-name (lambda (lc2b8a@x) (simple-struct-ref lc2b8a@x '13))) (set! lc2cb8@lc2aef@library-source-file-name lc2aef@library-source-file-name) (set! lc2af1@set-library-source-file-name! (lambda (lc2b8c@x lc2b8d@val) (simple-struct-set! lc2b8c@x '13 lc2b8d@val))) (set! lc2cb9@lc2af1@set-library-source-file-name! lc2af1@set-library-source-file-name!) (set! lc2af3@dummy '3) (set! lc2cba@lc2af3@dummy lc2af3@dummy) (set! lc2af5@find-dependencies (lambda (lc2b90@ls) (if (null? lc2b90@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! lc2cbb@lc2af5@find-dependencies lc2af5@find-dependencies) (set! lc2af7@find-library-by (lambda (lc2b92@pred) (let lc2b96@f ((lc2b94@ls ((lc2aad@current-library-collection)))) (if (null? lc2b94@ls) '#f (if (lc2b92@pred (car lc2b94@ls)) (car lc2b94@ls) (lc2b96@f (cdr lc2b94@ls))))))) (set! lc2cbc@lc2af7@find-library-by lc2af7@find-library-by) (set! lc2af9@library-path (lc2a03@lc28e1@make-parameter '(".") (lambda (lc2b98@x) (if (and (list? lc2b98@x) (for-all string? lc2b98@x)) (map (lambda (lc2b9a@x) lc2b9a@x) lc2b98@x) (assertion-violation 'library-path '"not a list of strings" lc2b98@x))))) (set! lc2cbd@lc2af9@library-path lc2af9@library-path) (set! lc2afb@library-extensions (lc2a03@lc28e1@make-parameter '(".sls" ".ss" ".scm") (lambda (lc2b9c@x) (if (and (list? lc2b9c@x) (for-all string? lc2b9c@x)) (map (lambda (lc2b9e@x) lc2b9e@x) lc2b9c@x) (assertion-violation 'library-extensions '"not a list of strings" lc2b9c@x))))) (set! lc2cbe@lc2afb@library-extensions lc2afb@library-extensions) (set! lc2afd@library-name->file-name (lambda (lc2ba0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lc2ba6@lc2ba3 lc2ba7@lc2ba5) (let ((lc2baa@extract lc2ba7@lc2ba5) (lc2bab@p lc2ba6@lc2ba3)) (letrec* ((lc2baf@display-hex (lambda (lc2bb8@n) (if (<= '0 lc2bb8@n '9) (display lc2bb8@n lc2bab@p) (display (integer->char (+ (char->integer '#\a) (- lc2bb8@n '10))) lc2bab@p))))) (begin (let lc2bb2@f ((lc2bb0@ls lc2ba0@x)) (if (not (null? lc2bb0@ls)) (begin (display '"/" lc2bab@p) (for-each (lambda (lc2bb4@c) (if (or (char<=? '#\a lc2bb4@c '#\z) (char<=? '#\A lc2bb4@c '#\Z) (char<=? '#\0 lc2bb4@c '#\9) (memv lc2bb4@c '(#\- #\. #\_ #\~))) (display lc2bb4@c lc2bab@p) (begin (display '"%" lc2bab@p) (let ((lc2bb6@n (char->integer lc2bb4@c))) (begin (lc2baf@display-hex (quotient lc2bb6@n '16)) (lc2baf@display-hex (remainder lc2bb6@n '16))))))) (string->list (symbol->string (car lc2bb0@ls)))) (lc2bb2@f (cdr lc2bb0@ls))) (void))) (lc2baa@extract)))))))) (set! lc2cbf@lc2afd@library-name->file-name lc2afd@library-name->file-name) (set! lc2aff@file-locator (lc2a03@lc28e1@make-parameter (lambda (lc2bba@x) (let ((lc2bbc@str (lc2afd@library-name->file-name lc2bba@x))) (let lc2bc4@f ((lc2bbe@ls (lc2af9@library-path)) (lc2bbf@exts (lc2afb@library-extensions)) (lc2bc0@failed-list '())) (if (null? lc2bbe@ls) (letrec* ((lc2bce@lc2bc9 (make-record-type-descriptor '&library-resolution lc4ecf@lc4c16@&condition-rtd 'lc2bcc '#f '#f '#((immutable library) (immutable files)))) (lc2bd0@lc2bcb '#f) (lc2bd2@lc2bca (make-record-constructor-descriptor lc2bce@lc2bc9 lc4ed0@lc4c18@&condition-rcd lc2bd0@lc2bcb)) (lc2bd5@lc2bc8 (record-predicate lc2bce@lc2bc9)) (lc2bd7@make-library-resolution-condition (record-constructor lc2bd2@lc2bca)) (lc2bd9@lc2bc6 (record-accessor lc2bce@lc2bc9 '0)) (lc2bdb@lc2bc7 (record-accessor lc2bce@lc2bc9 '1)) (lc2bdd@library-resolution-condition? (condition-predicate lc2bce@lc2bc9)) (lc2bdf@condition-library (condition-accessor lc2bce@lc2bc9 lc2bd9@lc2bc6)) (lc2be1@condition-files (condition-accessor lc2bce@lc2bc9 lc2bdb@lc2bc7))) (raise (condition (lc4eef@lc4cb0@make-error) (lc4f11@lc4d0c@make-who-condition 'expander) (lc4ed5@lc4c6d@make-message-condition '"cannot locate library in library-path") (lc2bd7@make-library-resolution-condition lc2bba@x (reverse lc2bc0@failed-list))))) (if (null? lc2bbf@exts) (lc2bc4@f (cdr lc2bbe@ls) (lc2afb@library-extensions) lc2bc0@failed-list) (let ((lc2be2@name (string-append (car lc2bbe@ls) lc2bbc@str (car lc2bbf@exts)))) (if (file-exists? lc2be2@name) lc2be2@name (lc2bc4@f lc2bbe@ls (cdr lc2bbf@exts) (cons lc2be2@name lc2bc0@failed-list))))))))) (lambda (lc2be4@f) (if (procedure? lc2be4@f) lc2be4@f (assertion-violation 'file-locator '"not a procedure" lc2be4@f))))) (set! lc2cc0@lc2aff@file-locator lc2aff@file-locator) (set! lc2b01@serialize-all (lambda (lc2be6@serialize lc2be7@compile) (letrec* ((lc2beb@library-desc (lambda (lc2bee@x) (list (lc2abb@library-id lc2bee@x) (lc2abf@library-name lc2bee@x))))) (for-each (lambda (lc2bec@x) (if (lc2aef@library-source-file-name lc2bec@x) (lc2be6@serialize (lc2aef@library-source-file-name lc2bec@x) (list (lc2abb@library-id lc2bec@x) (lc2abf@library-name lc2bec@x) (lc2ac3@library-version lc2bec@x) (map lc2beb@library-desc (lc2ac7@library-imp* lc2bec@x)) (map lc2beb@library-desc (lc2acb@library-vis* lc2bec@x)) (map lc2beb@library-desc (lc2acf@library-inv* lc2bec@x)) (lc2ad3@library-subst lc2bec@x) (lc2ad7@library-env lc2bec@x) (lc2be7@compile (lc2ae3@library-visit-code lc2bec@x)) (lc2be7@compile (lc2ae7@library-invoke-code lc2bec@x)) (lc2aeb@library-visible? lc2bec@x))) (void))) ((lc2aad@current-library-collection)))))) (set! lc2cc1@lc2b01@serialize-all lc2b01@serialize-all) (set! lc2b03@current-precompiled-library-loader (lc2a03@lc28e1@make-parameter (lambda (lc2bf0@filename lc2bf1@sk) '#f))) (set! lc2cc2@lc2b03@current-precompiled-library-loader lc2b03@current-precompiled-library-loader) (set! lc2b05@try-load-from-file (lambda (lc2bf4@filename) ((lc2b03@current-precompiled-library-loader) lc2bf4@filename (lambda lc2c1a (let ((lc2c1b (length lc2c1a))) (if (= lc2c1b '11) (apply (lambda (lc2bf6@id lc2bf7@name lc2bf8@ver lc2bf9@imp* lc2bfa@vis* lc2bfb@inv* lc2bfc@exp-subst lc2bfd@exp-env lc2bfe@visit-proc lc2bff@invoke-proc lc2c00@visible?) (let lc2c0e@f ((lc2c0c@deps (append lc2bf9@imp* lc2bfa@vis* lc2bfb@inv*))) (if (null? lc2c0c@deps) (begin (lc2b19@install-library lc2bf6@id lc2bf7@name lc2bf8@ver lc2bf9@imp* lc2bfa@vis* lc2bfb@inv* lc2bfc@exp-subst lc2bfd@exp-env lc2bfe@visit-proc lc2bff@invoke-proc '#f '#f lc2c00@visible? '#f) '#t) (let ((lc2c10@d (car lc2c0c@deps))) (let ((lc2c12@label (car lc2c10@d)) (lc2c13@dname (cadr lc2c10@d))) (let ((lc2c16@l (lc2b0f@find-library-by-name lc2c13@dname))) (if (and (lc2ab9@library? lc2c16@l) (eq? lc2c12@label (lc2abb@library-id lc2c16@l))) (lc2c0e@f (cdr lc2c0c@deps)) (begin (if lc29fd@lc28d5@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" lc2bf7@name lc2c13@dname lc2bf4@filename lc2c16@l lc2c12@label (lc2abb@library-id lc2c16@l)) (void)) '#f)))))))) lc2c1a) (if (>= lc2c1b '0) (apply (lambda lc2c18@others '#f) lc2c1a) (error 'apply '"invalid arg count")))))))) (set! lc2cc3@lc2b05@try-load-from-file lc2b05@try-load-from-file) (set! lc2b07@library-loader (lc2a03@lc28e1@make-parameter (lambda (lc2c1c@x) (let ((lc2c1e@file-name ((lc2aff@file-locator) lc2c1c@x))) (if (not lc2c1e@file-name) (assertion-violation '#f '"cannot file library" lc2c1c@x) (or (lc2b05@try-load-from-file lc2c1e@file-name) ((lc2b09@current-library-expander) (lc2a02@lc28df@read-library-source-file lc2c1e@file-name) lc2c1e@file-name (lambda (lc2c20@name) (if (not (fast-equal? lc2c20@name lc2c1c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (lc2c26@lc2c23 lc2c27@lc2c25) (let ((lc2c2a@e lc2c27@lc2c25) (lc2c2b@p lc2c26@lc2c23)) (begin (display '"expected to find library " lc2c2b@p) (write lc2c1c@x lc2c2b@p) (display '" in file " lc2c2b@p) (display lc2c1e@file-name lc2c2b@p) (display '", found " lc2c2b@p) (write lc2c20@name lc2c2b@p) (display '" instead" lc2c2b@p) (lc2c2a@e)))))) (void)))))))) (lambda (lc2c2e@f) (if (procedure? lc2c2e@f) lc2c2e@f (assertion-violation 'library-locator '"not a procedure" lc2c2e@f))))) (set! lc2cc4@lc2b07@library-loader lc2b07@library-loader) (set! lc2b09@current-library-expander (lc2a03@lc28e1@make-parameter (lambda (lc2c30@x) (assertion-violation 'library-expander '"not initialized")) (lambda (lc2c32@f) (if (procedure? lc2c32@f) lc2c32@f (assertion-violation 'library-expander '"not a procedure" lc2c32@f))))) (set! lc2cc5@lc2b09@current-library-expander lc2b09@current-library-expander) (set! lc2b0b@external-pending-libraries (lc2a03@lc28e1@make-parameter '())) (set! lc2cc6@lc2b0b@external-pending-libraries lc2b0b@external-pending-libraries) (set! lc2b0d@find-external-library (lambda (lc2c34@name) (begin (if (member lc2c34@name (lc2b0b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" lc2c34@name) (void)) (let ((lc2c3a@lc2c37 lc2b0b@external-pending-libraries) (lc2c3b@lc2c39 (cons lc2c34@name (lc2b0b@external-pending-libraries)))) (let ((lc2c3e@swap (lambda () (let ((lc2c40@t (lc2c3a@lc2c37))) (begin (lc2c3a@lc2c37 lc2c3b@lc2c39) (set! lc2c3b@lc2c39 lc2c40@t)))))) (dynamic-wind lc2c3e@swap (lambda () (begin ((lc2b07@library-loader) lc2c34@name) (or (lc2af7@find-library-by (lambda (lc2c42@x) (fast-equal? (lc2abf@library-name lc2c42@x) lc2c34@name))) (assertion-violation '#f '"handling external library did not yield the correct library" lc2c34@name)))) lc2c3e@swap)))))) (set! lc2cc7@lc2b0d@find-external-library lc2b0d@find-external-library) (set! lc2b0f@find-library-by-name (lambda (lc2c44@name) (or (lc2af7@find-library-by (lambda (lc2c46@x) (fast-equal? (lc2abf@library-name lc2c46@x) lc2c44@name))) (lc2b0d@find-external-library lc2c44@name)))) (set! lc2cc8@lc2b0f@find-library-by-name lc2b0f@find-library-by-name) (set! lc2b11@library-exists? (lambda (lc2c48@name) (and (lc2af7@find-library-by (lambda (lc2c4a@x) (fast-equal? (lc2abf@library-name lc2c4a@x) lc2c48@name))) '#t))) (set! lc2cc9@lc2b11@library-exists? lc2b11@library-exists?) (set! lc2b13@find-library-by-spec/die (lambda (lc2c4c@spec) (let ((lc2c4e@id (car lc2c4c@spec))) (or (lc2af7@find-library-by (lambda (lc2c50@x) (eq? lc2c4e@id (lc2abb@library-id lc2c50@x)))) (assertion-violation '#f '"cannot find library with required spec" lc2c4c@spec))))) (set! lc2cca@lc2b13@find-library-by-spec/die lc2b13@find-library-by-spec/die) (set! lc2b15@label->binding-table (make-eq-hashtable)) (set! lc2ccb@lc2b15@label->binding-table lc2b15@label->binding-table) (set! lc2b17@install-library-record (lambda (lc2c52@lib) (begin (let ((lc2c54@exp-env (lc2ad7@library-env lc2c52@lib))) (for-each (lambda (lc2c56@x) (let ((lc2c58@label (car lc2c56@x)) (lc2c59@binding (cdr lc2c56@x))) (let ((lc2c5c@binding (let ((lc2c5e@t (car lc2c59@binding))) (if (memv lc2c5e@t '(global)) (cons 'global (cons lc2c52@lib (cdr lc2c59@binding))) (if (memv lc2c5e@t '(global-macro)) (cons 'global-macro (cons lc2c52@lib (cdr lc2c59@binding))) (if (memv lc2c5e@t '(global-macro!)) (cons 'global-macro! (cons lc2c52@lib (cdr lc2c59@binding))) lc2c59@binding)))))) (begin (if (hashtable-ref lc2b15@label->binding-table lc2c58@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" lc2c58@label (hashtable-ref lc2b15@label->binding-table lc2c58@label '#f) lc2c5c@binding) (exit)) (void)) (hashtable-set! lc2b15@label->binding-table lc2c58@label lc2c5c@binding))))) lc2c54@exp-env)) ((lc2aad@current-library-collection) lc2c52@lib)))) (set! lc2ccc@lc2b17@install-library-record lc2b17@install-library-record) (set! lc2b19@install-library (lambda (lc2c60@id lc2c61@name lc2c62@ver lc2c63@imp* lc2c64@vis* lc2c65@inv* lc2c66@exp-subst lc2c67@exp-env lc2c68@visit-proc lc2c69@invoke-proc lc2c6a@visit-code lc2c6b@invoke-code lc2c6c@visible? lc2c6d@source-file-name) (let ((lc2c7c@imp-lib* (map lc2b13@find-library-by-spec/die lc2c63@imp*)) (lc2c7d@vis-lib* (map lc2b13@find-library-by-spec/die lc2c64@vis*)) (lc2c7e@inv-lib* (map lc2b13@find-library-by-spec/die lc2c65@inv*))) (begin (if (not (and (symbol? lc2c60@id) (list? lc2c61@name) (list? lc2c62@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" lc2c60@id lc2c61@name lc2c62@ver) (void)) (if (lc2b11@library-exists? lc2c61@name) (assertion-violation 'install-library '"library is already installed" lc2c61@name) (void)) (let ((lc2c82@lib (make-simple-struct 'library '15 (list lc2c60@id lc2c61@name lc2c62@ver lc2c7c@imp-lib* lc2c7d@vis-lib* lc2c7e@inv-lib* lc2c66@exp-subst lc2c67@exp-env lc2c68@visit-proc lc2c69@invoke-proc lc2c6a@visit-code lc2c6b@invoke-code lc2c6c@visible? lc2c6d@source-file-name)))) (lc2b17@install-library-record lc2c82@lib)))))) (set! lc2ccd@lc2b19@install-library lc2b19@install-library) (set! lc2b1b@imported-label->binding (lambda (lc2c84@lab) (hashtable-ref lc2b15@label->binding-table lc2c84@lab '#f))) (set! lc2cce@lc2b1b@imported-label->binding lc2b1b@imported-label->binding) (set! lc2b1d@invoke-library (lambda (lc2c86@lib) (let ((lc2c88@invoke (lc2adf@library-invoke-state lc2c86@lib))) (if (procedure? lc2c88@invoke) (begin (lc2ae1@set-library-invoke-state! lc2c86@lib (lambda () (assertion-violation 'invoke '"circularity detected" lc2c86@lib))) (for-each lc2b1d@invoke-library (lc2acf@library-inv* lc2c86@lib)) (lc2ae1@set-library-invoke-state! lc2c86@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" lc2c86@lib))) (lc2c88@invoke) (lc2ae1@set-library-invoke-state! lc2c86@lib '#t)) (void))))) (set! lc2ccf@lc2b1d@invoke-library lc2b1d@invoke-library) (set! lc2b1f@visit-library (lambda (lc2c8a@lib) (let ((lc2c8c@visit (lc2adb@library-visit-state lc2c8a@lib))) (if (procedure? lc2c8c@visit) (begin (lc2add@set-library-visit-state! lc2c8a@lib (lambda () (assertion-violation 'visit '"circularity detected" lc2c8a@lib))) (for-each lc2b1d@invoke-library (lc2acb@library-vis* lc2c8a@lib)) (lc2add@set-library-visit-state! lc2c8a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" lc2c8a@lib))) (lc2c8c@visit) (lc2add@set-library-visit-state! lc2c8a@lib '#t)) (void))))) (set! lc2cd0@lc2b1f@visit-library lc2b1f@visit-library) (set! lc2b21@invoke-library-by-spec (lambda (lc2c8e@spec) (lc2b1d@invoke-library (lc2b13@find-library-by-spec/die lc2c8e@spec)))) (set! lc2cd1@lc2b21@invoke-library-by-spec lc2b21@invoke-library-by-spec) (set! lc2b23@installed-libraries (lambda lc2c96 (let ((lc2c97 (length lc2c96))) (if (= lc2c97 '1) (apply (lambda (lc2c90@all?) (let lc2c94@f ((lc2c92@ls ((lc2aad@current-library-collection)))) (if (null? lc2c92@ls) '() (if (or lc2c90@all? (lc2aeb@library-visible? (car lc2c92@ls))) (cons (car lc2c92@ls) (lc2c94@f (cdr lc2c92@ls))) (lc2c94@f (cdr lc2c92@ls)))))) lc2c96) (if (= lc2c97 '0) (apply (lambda () (lc2b23@installed-libraries '#f)) lc2c96) (error 'apply '"invalid arg count")))))) (set! lc2cd2@lc2b23@installed-libraries lc2b23@installed-libraries) (set! lc2b25@library-spec (lambda (lc2c98@x) (begin (if (not (lc2ab9@library? lc2c98@x)) (assertion-violation 'library-spec '"not a library" lc2c98@x) (void)) (list (lc2abb@library-id lc2c98@x) (lc2abf@library-name lc2c98@x) (lc2ac3@library-version lc2c98@x))))) (set! lc2cd3@lc2b25@library-spec lc2b25@library-spec) (void))
(begin (set! lc2cd7@build-global-define (unspecified)) (set! lc2d48@build-lambda (unspecified)) (set! lc2d4a@build-case-lambda (unspecified)) (set! lc2d78@build-sequence (unspecified)) (set! lc2d7a@build-void (unspecified)) (set! lc2d7c@build-letrec (unspecified)) (set! lc2d7e@build-let (unspecified)) (set! lc2d80@build-named-let (unspecified)) (set! lc2d82@build-letrec* (unspecified)) (set! lc2d84@build-library-letrec* (unspecified)) (set! lc2d86@build-receive (unspecified)) (set! lc2cd7@build-global-define (lambda (lc2d87@x) (lc2d7a@build-void))) (set! lc2e15@lc2cd7@build-global-define lc2cd7@build-global-define) (set! lc2d48@build-lambda (lambda (lc2d89@ae lc2d8a@vars lc2d8b@exp) (list 'lambda lc2d8a@vars lc2d8b@exp))) (set! lc2e16@lc2d48@build-lambda lc2d48@build-lambda) (set! lc2d4a@build-case-lambda (lambda (lc2d8f@ae lc2d90@vars* lc2d91@exp*) (letrec* ((lc2d96@build-error (lambda (lc2dcd@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (lc2d98@build-pred (lambda (lc2db5@ae lc2db6@n lc2db7@vars) (call-with-values (lambda () (let lc2dc3@f ((lc2dbf@vars lc2db7@vars) (lc2dc0@count '0)) (if (pair? lc2dbf@vars) (lc2dc3@f (cdr lc2dbf@vars) (+ lc2dc0@count '1)) (if (null? lc2dbf@vars) (values lc2dc0@count '=) (values lc2dc0@count '>=))))) (lambda (lc2dc5@lc2dbc lc2dc6@lc2dbe) (let ((lc2dc9@pred lc2dc6@lc2dbe) (lc2dca@count lc2dc5@lc2dbc)) (list (list 'primitive lc2dc9@pred) lc2db6@n (list 'quote lc2dca@count))))))) (lc2d9a@build-apply (lambda (lc2dad@ae lc2dae@g lc2daf@vars lc2db0@exp) (list '(primitive apply) (lc2d48@build-lambda lc2dad@ae lc2daf@vars lc2db0@exp) lc2dae@g))) (lc2d9c@expand-case-lambda (lambda (lc2d9d@ae lc2d9e@vars lc2d9f@exp*) (let ((lc2da3@g (gensym)) (lc2da4@n (gensym))) (list 'lambda lc2da3@g (lc2d7e@build-let lc2d9d@ae (list lc2da4@n) (list (list '(primitive length) lc2da3@g)) (let lc2dab@f ((lc2da7@vars* lc2d90@vars*) (lc2da8@exp* lc2d9f@exp*)) (if (null? lc2da7@vars*) (lc2d96@build-error lc2d9d@ae) (list 'if (lc2d98@build-pred lc2d9d@ae lc2da4@n (car lc2da7@vars*)) (lc2d9a@build-apply lc2d9d@ae lc2da3@g (car lc2da7@vars*) (car lc2da8@exp*)) (lc2dab@f (cdr lc2da7@vars*) (cdr lc2da8@exp*))))))))))) (if (= (length lc2d91@exp*) '1) (lc2d48@build-lambda lc2d8f@ae (car lc2d90@vars*) (car lc2d91@exp*)) (lc2d9c@expand-case-lambda lc2d8f@ae lc2d90@vars* lc2d91@exp*))))) (set! lc2e17@lc2d4a@build-case-lambda lc2d4a@build-case-lambda) (set! lc2d78@build-sequence (lambda (lc2dcf@ae lc2dd0@exps) (let lc2dd5@loop ((lc2dd3@exps lc2dd0@exps)) (if (null? (cdr lc2dd3@exps)) (car lc2dd3@exps) (if (equal? (car lc2dd3@exps) (lc2d7a@build-void)) (lc2dd5@loop (cdr lc2dd3@exps)) (cons 'begin lc2dd3@exps)))))) (set! lc2e18@lc2d78@build-sequence lc2d78@build-sequence) (set! lc2d7a@build-void (lambda () '((primitive void)))) (set! lc2e19@lc2d7a@build-void lc2d7a@build-void) (set! lc2d7c@build-letrec (lambda (lc2dd7@ae lc2dd8@vars lc2dd9@val-exps lc2dda@body-exp) (if (null? lc2dd8@vars) lc2dda@body-exp (list 'letrec (map list lc2dd8@vars lc2dd9@val-exps) lc2dda@body-exp)))) (set! lc2e1a@lc2d7c@build-letrec lc2d7c@build-letrec) (set! lc2d7e@build-let (lambda (lc2ddf@ae lc2de0@vars lc2de1@val-exps lc2de2@body-exp) (if (null? lc2de0@vars) lc2de2@body-exp (list 'let (map list lc2de0@vars lc2de1@val-exps) lc2de2@body-exp)))) (set! lc2e1b@lc2d7e@build-let lc2d7e@build-let) (set! lc2d80@build-named-let (lambda (lc2de7@ae lc2de8@name lc2de9@vars lc2dea@val-exps lc2deb@body-exp) (list 'let lc2de8@name (map list lc2de9@vars lc2dea@val-exps) lc2deb@body-exp))) (set! lc2e1c@lc2d80@build-named-let lc2d80@build-named-let) (set! lc2d82@build-letrec* (lambda (lc2df1@ae lc2df2@vars lc2df3@val-exps lc2df4@body-exp) (if (null? lc2df2@vars) lc2df4@body-exp (list 'letrec* (map list lc2df2@vars lc2df3@val-exps) lc2df4@body-exp)))) (set! lc2e1d@lc2d82@build-letrec* lc2d82@build-letrec*) (set! lc2d84@build-library-letrec* (lambda (lc2df9@ae lc2dfa@name lc2dfb@vars lc2dfc@locs lc2dfd@val-exps lc2dfe@body-exp) (cons 'begin (append (map (lambda (lc2e05@var) (cons 'set! (cons lc2e05@var '((unspecified))))) lc2dfb@vars) (append (apply append (map (lambda (lc2e07@var lc2e08@loc lc2e09@val-exp) (list (list 'set! lc2e07@var lc2e09@val-exp) (list 'set! lc2e08@loc lc2e07@var))) lc2dfb@vars lc2dfc@locs lc2dfd@val-exps)) (list lc2dfe@body-exp)))))) (set! lc2e1e@lc2d84@build-library-letrec* lc2d84@build-library-letrec*) (set! lc2d86@build-receive (lambda (lc2e0d@ae lc2e0e@vars lc2e0f@producer lc2e10@body*) (begin (display '"************** in ") (cons 'receive (cons lc2e0e@vars (cons lc2e0f@producer lc2e10@body*)))))) (set! lc2e1f@lc2d86@build-receive lc2d86@build-receive) (void))
(begin (set! lc2e2e@file-options-macro (unspecified)) (set! lc2e30@set-cons (unspecified)) (set! lc2e32@set-union (unspecified)) (set! lc2e37@top-mark* (unspecified)) (set! lc2e39@top-marked? (unspecified)) (set! lc2e3b@gen-lexical (unspecified)) (set! lc2e3d@gen-global (unspecified)) (set! lc2e3f@gen-label (unspecified)) (set! lc2e41@gen-top-level-label (unspecified)) (set! lc2e43@gen-define-label+loc (unspecified)) (set! lc2e45@gen-define-label (unspecified)) (set! lc2e4f@rib? (unspecified)) (set! lc2e51@rib-sym* (unspecified)) (set! lc2e53@set-rib-sym*! (unspecified)) (set! lc2e55@rib-mark** (unspecified)) (set! lc2e57@set-rib-mark**! (unspecified)) (set! lc2e59@rib-label* (unspecified)) (set! lc2e5b@set-rib-label*! (unspecified)) (set! lc2e5d@rib-sealed/freq (unspecified)) (set! lc2e5f@set-rib-sealed/freq! (unspecified)) (set! lc2e61@rib-cache (unspecified)) (set! lc2e63@set-rib-cache! (unspecified)) (set! lc2e65@dummy (unspecified)) (set! lc2e67@make-empty-rib (unspecified)) (set! lc2e69@extend-rib! (unspecified)) (set! lc2e6b@extend-rib/nc! (unspecified)) (set! lc2e6d@make-rib-map (unspecified)) (set! lc2e6f@seal-rib! (unspecified)) (set! lc2e71@unseal-rib! (unspecified)) (set! lc2e73@make-full-rib (unspecified)) (set! lc2e75@rp (unspecified)) (set! lc2e7f@stx? (unspecified)) (set! lc2e81@stx-expr (unspecified)) (set! lc2e83@set-stx-expr! (unspecified)) (set! lc2e85@stx-mark* (unspecified)) (set! lc2e87@set-stx-mark*! (unspecified)) (set! lc2e89@stx-subst* (unspecified)) (set! lc2e8b@set-stx-subst*! (unspecified)) (set! lc2e8d@stx-ae* (unspecified)) (set! lc2e8f@set-stx-ae*! (unspecified)) (set! lc2e91@dummy (unspecified)) (set! lc2e93@datum->stx (unspecified)) (set! lc2e95@gen-mark (unspecified)) (set! lc2e97@anti-mark (unspecified)) (set! lc2e99@anti-mark? (unspecified)) (set! lc2e9b@mkstx (unspecified)) (set! lc2e9d@add-mark (unspecified)) (set! lc2e9f@add-subst (unspecified)) (set! lc2ea1@syntax-kind? (unspecified)) (set! lc2ea3@syntax-vector->list (unspecified)) (set! lc2ea5@syntax-pair? (unspecified)) (set! lc2ea7@syntax-vector? (unspecified)) (set! lc2ea9@syntax-null? (unspecified)) (set! lc2eab@syntax-list? (unspecified)) (set! lc2ead@syntax-car (unspecified)) (set! lc2eaf@syntax-cdr (unspecified)) (set! lc2eb1@syntax->list (unspecified)) (set! lc2eb3@id? (unspecified)) (set! lc2eb5@id->sym (unspecified)) (set! lc2eb7@bound-id=? (unspecified)) (set! lc2eb9@free-id=? (unspecified)) (set! lc2ebb@valid-bound-ids? (unspecified)) (set! lc2ebd@distinct-bound-ids? (unspecified)) (set! lc2ebf@bound-id-member? (unspecified)) (set! lc2ec1@self-evaluating? (unspecified)) (set! lc2ec3@strip-annotations (unspecified)) (set! lc2ec5@strip (unspecified)) (set! lc2ec7@stx->datum (unspecified)) (set! lc2ec9@id->label (unspecified)) (set! lc2ecb@label->binding (unspecified)) (set! lc2ecd@make-binding (unspecified)) (set! lc2ecf@binding-type (unspecified)) (set! lc2ed1@binding-value (unspecified)) (set! lc2ed3@raise-unbound-error (unspecified)) (set! lc2ed5@syntax-type (unspecified)) (set! lc2ee3@sanitize-binding (unspecified)) (set! lc2ee5@make-variable-transformer (unspecified)) (set! lc2ee7@variable-transformer? (unspecified)) (set! lc2ee9@variable-transformer-procedure (unspecified)) (set! lc2eeb@make-eval-transformer (unspecified)) (set! lc303c@parse-define (unspecified)) (set! lc303e@parse-define-syntax (unspecified)) (set! lc3040@scheme-stx-hashtable (unspecified)) (set! lc3042@scheme-stx (unspecified)) (set! lc3044@lexical-var (unspecified)) (set! lc3046@lexical-mutable? (unspecified)) (set! lc3048@set-lexical-mutable! (unspecified)) (set! lc304a@add-lexical (unspecified)) (set! lc304c@add-lexicals (unspecified)) (set! lc304e@letrec-helper (unspecified)) (set! lc3050@let-transformer (unspecified)) (set! lc3052@letrec-transformer (unspecified)) (set! lc3054@letrec*-transformer (unspecified)) (set! lc3056@fluid-let-syntax-transformer (unspecified)) (set! lc3058@type-descriptor-transformer (unspecified)) (set! lc305a@record-type-descriptor-transformer (unspecified)) (set! lc305c@record-constructor-descriptor-transformer (unspecified)) (set! lc305e@when-macro (unspecified)) (set! lc3060@unless-macro (unspecified)) (set! lc3062@if-transformer (unspecified)) (set! lc3064@and-transformer (unspecified)) (set! lc3066@or-transformer (unspecified)) (set! lc3068@case-macro (unspecified)) (set! lc306a@quote-transformer (unspecified)) (set! lc306c@case-lambda-transformer (unspecified)) (set! lc306e@lambda-transformer (unspecified)) (set! lc3070@bless (unspecified)) (set! lc3072@with-syntax-macro (unspecified)) (set! lc3074@invalid-fmls-error (unspecified)) (set! lc3076@let-macro (unspecified)) (set! lc3078@let-values-macro (unspecified)) (set! lc307a@let*-values-macro (unspecified)) (set! lc307c@trace-lambda-macro (unspecified)) (set! lc307e@trace-define-macro (unspecified)) (set! lc3080@trace-define-syntax-macro (unspecified)) (set! lc3082@trace-let/rec-syntax (unspecified)) (set! lc3084@trace-let-syntax-macro (unspecified)) (set! lc3086@trace-letrec-syntax-macro (unspecified)) (set! lc3088@guard-macro (unspecified)) (set! lc308a@define-enumeration-macro (unspecified)) (set! lc308c@time-macro (unspecified)) (set! lc308e@delay-macro (unspecified)) (set! lc3090@assert-macro (unspecified)) (set! lc3092@endianness-macro (unspecified)) (set! lc3094@identifier-syntax-macro (unspecified)) (set! lc3096@do-macro (unspecified)) (set! lc3098@let*-macro (unspecified)) (set! lc309a@or-macro (unspecified)) (set! lc309c@and-macro (unspecified)) (set! lc309e@cond-macro (unspecified)) (set! lc30a0@do-include (unspecified)) (set! lc30a2@include-macro (unspecified)) (set! lc30a4@include-into-macro (unspecified)) (set! lc30a6@syntax-rules-macro (unspecified)) (set! lc30a8@quasiquote-macro (unspecified)) (set! lc30aa@quasisyntax-macro (unspecified)) (set! lc30ac@define-struct-macro (unspecified)) (set! lc30ae@define-record-type-macro (unspecified)) (set! lc30b0@define-condition-type-macro (unspecified)) (set! lc30b2@incorrect-usage-macro (unspecified)) (set! lc30b4@parameterize-macro (unspecified)) (set! lc30b6@foreign-call-transformer (unspecified)) (set! lc30b8@convert-pattern (unspecified)) (set! lc30ba@syntax-dispatch (unspecified)) (set! lc30bc@ellipsis? (unspecified)) (set! lc30be@underscore? (unspecified)) (set! lc30c0@verify-literals (unspecified)) (set! lc30c2@syntax-case-transformer (unspecified)) (set! lc30c4@ellipsis-map (unspecified)) (set! lc30c6@syntax-transformer (unspecified)) (set! lc30c8@core-macro-transformer (unspecified)) (set! lc30ca@symbol-macro (unspecified)) (set! lc30cc@macro-transformer (unspecified)) (set! lc30ce@local-macro-transformer (unspecified)) (set! lc30d0@do-macro-call (unspecified)) (set! lc30d2@chi-macro (unspecified)) (set! lc30d4@chi-local-macro (unspecified)) (set! lc30d6@chi-global-macro (unspecified)) (set! lc30d8@chi-expr* (unspecified)) (set! lc30da@chi-application (unspecified)) (set! lc30dc@chi-expr (unspecified)) (set! lc30de@chi-set! (unspecified)) (set! lc30e0@verify-formals (unspecified)) (set! lc30e2@chi-lambda-clause (unspecified)) (set! lc30e4@chi-lambda-clause* (unspecified)) (set! lc30e6@chi-defun (unspecified)) (set! lc30e8@chi-rhs (unspecified)) (set! lc30ea@expand-interaction-rhs*/init* (unspecified)) (set! lc30ec@chi-rhs* (unspecified)) (set! lc30ee@find-bound=? (unspecified)) (set! lc30f0@find-dups (unspecified)) (set! lc30f2@chi-internal (unspecified)) (set! lc30f4@parse-module (unspecified)) (set! lc30fe@module-interface? (unspecified)) (set! lc3100@module-interface-first-mark (unspecified)) (set! lc3102@set-module-interface-first-mark! (unspecified)) (set! lc3104@module-interface-exp-id-vec (unspecified)) (set! lc3106@set-module-interface-exp-id-vec! (unspecified)) (set! lc3108@module-interface-exp-lab-vec (unspecified)) (set! lc310a@set-module-interface-exp-lab-vec! (unspecified)) (set! lc310c@dummy (unspecified)) (set! lc310e@module-interface-exp-id* (unspecified)) (set! lc3110@chi-internal-module (unspecified)) (set! lc3112@chi-body* (unspecified)) (set! lc3114@expand-transformer (unspecified)) (set! lc3116@parse-exports (unspecified)) (set! lc3118@parse-library-name (unspecified)) (set! lc311a@parse-library (unspecified)) (set! lc311c@parse-import-spec* (unspecified)) (set! lc311e@make-top-rib (unspecified)) (set! lc3120@make-collector (unspecified)) (set! lc3122@inv-collector (unspecified)) (set! lc3124@vis-collector (unspecified)) (set! lc3126@imp-collector (unspecified)) (set! lc3128@chi-library-internal (unspecified)) (set! lc312a@chi-interaction-expr (unspecified)) (set! lc312c@library-body-expander (unspecified)) (set! lc312e@core-library-expander (unspecified)) (set! lc3130@parse-top-level-program (unspecified)) (set! lc3132@top-level-expander (unspecified)) (set! lc3134@rp (unspecified)) (set! lc313e@env? (unspecified)) (set! lc3140@env-names (unspecified)) (set! lc3142@set-env-names! (unspecified)) (set! lc3144@env-labels (unspecified)) (set! lc3146@set-env-labels! (unspecified)) (set! lc3148@env-itc (unspecified)) (set! lc314a@set-env-itc! (unspecified)) (set! lc314c@dummy (unspecified)) (set! lc314e@rp (unspecified)) (set! lc3158@interaction-env? (unspecified)) (set! lc315a@interaction-env-rib (unspecified)) (set! lc315c@set-interaction-env-rib! (unspecified)) (set! lc315e@interaction-env-r (unspecified)) (set! lc3160@set-interaction-env-r! (unspecified)) (set! lc3162@interaction-env-locs (unspecified)) (set! lc3164@set-interaction-env-locs! (unspecified)) (set! lc3166@dummy (unspecified)) (set! lc3168@interaction-environment-symbols (unspecified)) (set! lc316a@environment-bindings (unspecified)) (set! lc316c@parse-binding (unspecified)) (set! lc316e@environment? (unspecified)) (set! lc3170@environment-symbols (unspecified)) (set! lc3172@environment (unspecified)) (set! lc3174@null-environment (unspecified)) (set! lc3176@scheme-report-environment (unspecified)) (set! lc3178@expand (unspecified)) (set! lc317a@eval (unspecified)) (set! lc317c@library-expander (unspecified)) (set! lc317e@boot-library-expand (unspecified)) (set! lc3180@rev-map-append (unspecified)) (set! lc3182@build-exports (unspecified)) (set! lc3184@make-export-subst (unspecified)) (set! lc3186@make-export-env/macros (unspecified)) (set! lc3188@generate-temporaries (unspecified)) (set! lc318a@free-identifier=? (unspecified)) (set! lc318c@bound-identifier=? (unspecified)) (set! lc318e@make-source-condition (unspecified)) (set! lc3190@extract-position-condition (unspecified)) (set! lc3192@expression-position (unspecified)) (set! lc3194@assertion-error (unspecified)) (set! lc3196@syntax-error (unspecified)) (set! lc3198@syntax-violation* (unspecified)) (set! lc319a@syntax-violation (unspecified)) (set! lc319c@identifier? (unspecified)) (set! lc319e@datum->syntax (unspecified)) (set! lc31a0@syntax->datum (unspecified)) (set! lc31a2@ungensym-all (unspecified)) (set! lc31a4@compile-r6rs-top-level (unspecified)) (set! lc31a6@pre-compile-r6rs-top-level (unspecified)) (set! lc31a8@interaction-environment (unspecified)) (set! lc31aa@top-level-context (unspecified)) (set! lc2e2e@file-options-macro (lambda (lc31ab@x) (letrec* ((lc31ae@valid-option? (lambda (lc31b7@x) (and (lc2eb3@id? lc31b7@x) (memq (lc2eb5@id->sym lc31b7@x) '(no-fail no-create no-truncate)))))) (let ((lc31af@t lc31ab@x)) (let ((lc31b1@ls/false (lc30ba@syntax-dispatch lc31af@t '(_ . each-any)))) (if (and lc31b1@ls/false (apply (lambda (lc31b3@opt*) (for-all lc31ae@valid-option? lc31b3@opt*)) lc31b1@ls/false)) (apply (lambda (lc31b5@opt*) (lc3070@bless (list 'make-file-options (list 'quote lc31b5@opt*)))) lc31b1@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc31af@t))))))) (set! lc4b01@lc2e2e@file-options-macro lc2e2e@file-options-macro) (set! lc2e30@set-cons (lambda (lc31b9@x lc31ba@ls) (if (memq lc31b9@x lc31ba@ls) lc31ba@ls (cons lc31b9@x lc31ba@ls)))) (set! lc4b02@lc2e30@set-cons lc2e30@set-cons) (set! lc2e32@set-union (lambda (lc31bd@ls1 lc31be@ls2) (if (null? lc31bd@ls1) lc31be@ls2 (if (memq (car lc31bd@ls1) lc31be@ls2) (lc2e32@set-union (cdr lc31bd@ls1) lc31be@ls2) (cons (car lc31bd@ls1) (lc2e32@set-union (cdr lc31bd@ls1) lc31be@ls2)))))) (set! lc4b03@lc2e32@set-union lc2e32@set-union) (set! lc2e37@top-mark* '(top)) (set! lc4b04@lc2e37@top-mark* lc2e37@top-mark*) (set! lc2e39@top-marked? (lambda (lc31c1@m*) (memq 'top lc31c1@m*))) (set! lc4b05@lc2e39@top-marked? lc2e39@top-marked?) (set! lc2e3b@gen-lexical (lambda (lc31c3@sym) (if (symbol? lc31c3@sym) (gensym lc31c3@sym) (if (lc2e7f@stx? lc31c3@sym) (lc2e3b@gen-lexical (lc2eb5@id->sym lc31c3@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" lc31c3@sym))))) (set! lc4b06@lc2e3b@gen-lexical lc2e3b@gen-lexical) (set! lc2e3d@gen-global (lambda (lc31c5@x) (lc2e3b@gen-lexical lc31c5@x))) (set! lc4b07@lc2e3d@gen-global lc2e3d@gen-global) (set! lc2e3f@gen-label (lambda (lc31c7@_) (gensym))) (set! lc4b08@lc2e3f@gen-label lc2e3f@gen-label) (set! lc2e41@gen-top-level-label (lambda (lc31c9@id lc31ca@rib) (letrec* ((lc31ce@find (lambda (lc31d9@sym lc31da@mark* lc31db@sym* lc31dc@mark** lc31dd@label*) (and (pair? lc31db@sym*) (if (and (eq? lc31d9@sym (car lc31db@sym*)) (same-marks? lc31da@mark* (car lc31dc@mark**))) (car lc31dd@label*) (lc31ce@find lc31d9@sym lc31da@mark* (cdr lc31db@sym*) (cdr lc31dc@mark**) (cdr lc31dd@label*))))))) (let ((lc31cf@sym (lc2eb5@id->sym lc31c9@id)) (lc31d0@mark* (lc2e85@stx-mark* lc31c9@id))) (let ((lc31d3@sym* (lc2e51@rib-sym* lc31ca@rib))) (let ((lc31d5@t (and (memq lc31cf@sym (lc2e51@rib-sym* lc31ca@rib)) (lc31ce@find lc31cf@sym lc31d0@mark* lc31d3@sym* (lc2e55@rib-mark** lc31ca@rib) (lc2e59@rib-label* lc31ca@rib))))) (if lc31d5@t ((lambda (lc31d7@label) (if (lc2cce@lc2b1b@imported-label->binding lc31d7@label) (gensym) lc31d7@label)) lc31d5@t) (gensym)))))))) (set! lc4b09@lc2e41@gen-top-level-label lc2e41@gen-top-level-label) (set! lc2e43@gen-define-label+loc (lambda (lc31e3@id lc31e4@rib) (let ((lc31e7@t (lc31aa@top-level-context))) (if lc31e7@t ((lambda (lc31e9@env) (let ((lc31eb@label (lc2e41@gen-top-level-label lc31e3@id lc31e4@rib)) (lc31ec@locs (lc3162@interaction-env-locs lc31e9@env))) (values lc31eb@label (let ((lc31ef@t (assq lc31eb@label lc31ec@locs))) (if lc31ef@t (cdr lc31ef@t) (let ((lc31f1@loc (lc2e3b@gen-lexical lc31e3@id))) (begin (lc3164@set-interaction-env-locs! lc31e9@env (cons (cons lc31eb@label lc31f1@loc) lc31ec@locs)) lc31f1@loc))))))) lc31e7@t) (values (gensym) (lc2e3b@gen-lexical lc31e3@id)))))) (set! lc4b0a@lc2e43@gen-define-label+loc lc2e43@gen-define-label+loc) (set! lc2e45@gen-define-label (lambda (lc31f3@id lc31f4@rib) (if (lc31aa@top-level-context) (lc2e41@gen-top-level-label lc31f3@id lc31f4@rib) (gensym)))) (set! lc4b0b@lc2e45@gen-define-label lc2e45@gen-define-label) (set! lc2e4f@rib? (lambda (lc31f7@x) (and (simple-struct? lc31f7@x) (eq? (simple-struct-name lc31f7@x) 'rib)))) (set! lc4b0c@lc2e4f@rib? lc2e4f@rib?) (set! lc2e51@rib-sym* (lambda (lc31f9@x) (simple-struct-ref lc31f9@x '0))) (set! lc4b0d@lc2e51@rib-sym* lc2e51@rib-sym*) (set! lc2e53@set-rib-sym*! (lambda (lc31fb@x lc31fc@val) (simple-struct-set! lc31fb@x '0 lc31fc@val))) (set! lc4b0e@lc2e53@set-rib-sym*! lc2e53@set-rib-sym*!) (set! lc2e55@rib-mark** (lambda (lc31ff@x) (simple-struct-ref lc31ff@x '1))) (set! lc4b0f@lc2e55@rib-mark** lc2e55@rib-mark**) (set! lc2e57@set-rib-mark**! (lambda (lc3201@x lc3202@val) (simple-struct-set! lc3201@x '1 lc3202@val))) (set! lc4b10@lc2e57@set-rib-mark**! lc2e57@set-rib-mark**!) (set! lc2e59@rib-label* (lambda (lc3205@x) (simple-struct-ref lc3205@x '2))) (set! lc4b11@lc2e59@rib-label* lc2e59@rib-label*) (set! lc2e5b@set-rib-label*! (lambda (lc3207@x lc3208@val) (simple-struct-set! lc3207@x '2 lc3208@val))) (set! lc4b12@lc2e5b@set-rib-label*! lc2e5b@set-rib-label*!) (set! lc2e5d@rib-sealed/freq (lambda (lc320b@x) (simple-struct-ref lc320b@x '3))) (set! lc4b13@lc2e5d@rib-sealed/freq lc2e5d@rib-sealed/freq) (set! lc2e5f@set-rib-sealed/freq! (lambda (lc320d@x lc320e@val) (simple-struct-set! lc320d@x '3 lc320e@val))) (set! lc4b14@lc2e5f@set-rib-sealed/freq! lc2e5f@set-rib-sealed/freq!) (set! lc2e61@rib-cache (lambda (lc3211@x) (simple-struct-ref lc3211@x '4))) (set! lc4b15@lc2e61@rib-cache lc2e61@rib-cache) (set! lc2e63@set-rib-cache! (lambda (lc3213@x lc3214@val) (simple-struct-set! lc3213@x '4 lc3214@val))) (set! lc4b16@lc2e63@set-rib-cache! lc2e63@set-rib-cache!) (set! lc2e65@dummy '3) (set! lc4b17@lc2e65@dummy lc2e65@dummy) (set! lc2e67@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! lc4b18@lc2e67@make-empty-rib lc2e67@make-empty-rib) (set! lc2e69@extend-rib! (lambda (lc3217@rib lc3218@id lc3219@label) (letrec* ((lc321e@find (lambda (lc322b@sym lc322c@mark* lc322d@sym* lc322e@mark** lc322f@label*) (and (pair? lc322d@sym*) (if (and (eq? lc322b@sym (car lc322d@sym*)) (same-marks? lc322c@mark* (car lc322e@mark**))) lc322f@label* (lc321e@find lc322b@sym lc322c@mark* (cdr lc322d@sym*) (cdr lc322e@mark**) (cdr lc322f@label*))))))) (begin (if (lc2e5d@rib-sealed/freq lc3217@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" lc3217@rib) (void)) (let ((lc321f@sym (lc2eb5@id->sym lc3218@id)) (lc3220@mark* (lc2e85@stx-mark* lc3218@id))) (let ((lc3223@sym* (lc2e51@rib-sym* lc3217@rib))) (let ((lc3225@t (and (memq lc321f@sym (lc2e51@rib-sym* lc3217@rib)) (lc321e@find lc321f@sym lc3220@mark* lc3223@sym* (lc2e55@rib-mark** lc3217@rib) (lc2e59@rib-label* lc3217@rib))))) (if lc3225@t ((lambda (lc3227@p) (if (not (eq? lc3219@label (car lc3227@p))) (if (lc31aa@top-level-context) (set-car! lc3227@p lc3219@label) (lc319a@syntax-violation '#f '"multiple definitions of identifier" lc3218@id)) (void))) lc3225@t) (begin (if (lc2e61@rib-cache lc3217@rib) (hashtable-update! (lc2e61@rib-cache lc3217@rib) lc321f@sym (lambda (lc3229@e) (cons (cons lc3220@mark* lc3219@label) lc3229@e)) '()) (void)) (lc2e53@set-rib-sym*! lc3217@rib (cons lc321f@sym lc3223@sym*)) (lc2e57@set-rib-mark**! lc3217@rib (cons lc3220@mark* (lc2e55@rib-mark** lc3217@rib))) (lc2e5b@set-rib-label*! lc3217@rib (cons lc3219@label (lc2e59@rib-label* lc3217@rib)))))))))))) (set! lc4b19@lc2e69@extend-rib! lc2e69@extend-rib!) (set! lc2e6b@extend-rib/nc! (lambda (lc3235@rib lc3236@id lc3237@label) (let ((lc323b@sym (lc2eb5@id->sym lc3236@id)) (lc323c@mark* (lc2e85@stx-mark* lc3236@id))) (let ((lc323f@sym* (lc2e51@rib-sym* lc3235@rib))) (begin (if (lc2e61@rib-cache lc3235@rib) (hashtable-update! (lc2e61@rib-cache lc3235@rib) lc323b@sym (lambda (lc3241@e) (cons (cons lc323c@mark* lc3237@label) lc3241@e)) '()) (void)) (lc2e53@set-rib-sym*! lc3235@rib (cons lc323b@sym lc323f@sym*)) (lc2e57@set-rib-mark**! lc3235@rib (cons lc323c@mark* (lc2e55@rib-mark** lc3235@rib))) (lc2e5b@set-rib-label*! lc3235@rib (cons lc3237@label (lc2e59@rib-label* lc3235@rib)))))))) (set! lc4b1a@lc2e6b@extend-rib/nc! lc2e6b@extend-rib/nc!) (set! lc2e6d@make-rib-map (lambda (lc3243@sym*) (let ((lc3245@ht (make-eq-hashtable))) (let lc324b@f ((lc3247@i '0) (lc3248@sym* lc3243@sym*)) (if (null? lc3248@sym*) lc3245@ht (begin (hashtable-update! lc3245@ht (car lc3248@sym*) (lambda (lc324d@x) (cons lc3247@i lc324d@x)) '()) (lc324b@f (+ lc3247@i '1) (cdr lc3248@sym*)))))))) (set! lc4b1b@lc2e6d@make-rib-map lc2e6d@make-rib-map) (set! lc2e6f@seal-rib! (lambda (lc324f@rib) (let ((lc3251@sym* (lc2e51@rib-sym* lc324f@rib))) (if (not (null? lc3251@sym*)) (begin (lc2e53@set-rib-sym*! lc324f@rib (list->vector lc3251@sym*)) (lc2e57@set-rib-mark**! lc324f@rib (list->vector (lc2e55@rib-mark** lc324f@rib))) (lc2e5b@set-rib-label*! lc324f@rib (list->vector (lc2e59@rib-label* lc324f@rib))) (lc2e5f@set-rib-sealed/freq! lc324f@rib (lc2e6d@make-rib-map lc3251@sym*))) (void))))) (set! lc4b1c@lc2e6f@seal-rib! lc2e6f@seal-rib!) (set! lc2e71@unseal-rib! (lambda (lc3253@rib) (if (lc2e5d@rib-sealed/freq lc3253@rib) (begin (lc2e5f@set-rib-sealed/freq! lc3253@rib '#f) (lc2e53@set-rib-sym*! lc3253@rib (vector->list (lc2e51@rib-sym* lc3253@rib))) (lc2e57@set-rib-mark**! lc3253@rib (vector->list (lc2e55@rib-mark** lc3253@rib))) (lc2e5b@set-rib-label*! lc3253@rib (vector->list (lc2e59@rib-label* lc3253@rib)))) (void)))) (set! lc4b1d@lc2e71@unseal-rib! lc2e71@unseal-rib!) (set! lc2e73@make-full-rib (lambda (lc3255@id* lc3256@label*) (let ((lc3259@r (make-simple-struct 'rib '6 (list (map lc2eb5@id->sym lc3255@id*) (map lc2e85@stx-mark* lc3255@id*) lc3256@label* '#f '#f)))) (begin (lc2e6f@seal-rib! lc3259@r) lc3259@r)))) (set! lc4b1e@lc2e73@make-full-rib lc2e73@make-full-rib) (set! lc2e75@rp (lc2a00@lc28db@make-record-printer 'stx (lambda (lc325b@x lc325c@p lc325d@wr) (begin (display '"#<syntax " lc325c@p) (write (lc2ec7@stx->datum lc325b@x) lc325c@p) (let ((lc3261@expr (lc2e81@stx-expr lc325b@x))) (if (lc29f7@lc28c9@annotation? lc3261@expr) (let ((lc3263@src (lc29f8@lc28cb@annotation-source lc3261@expr))) (if (pair? lc3263@src) (begin (display '" [" lc325c@p) (display (cdr lc3263@src) lc325c@p) (display '" of " lc325c@p) (display (car lc3263@src) lc325c@p) (display '"]" lc325c@p)) (void))) (void))) (display '">" lc325c@p))))) (set! lc4b1f@lc2e75@rp lc2e75@rp) (set! lc2e7f@stx? (lambda (lc3265@x) (and (simple-struct? lc3265@x) (eq? (simple-struct-name lc3265@x) 'stx)))) (set! lc4b20@lc2e7f@stx? lc2e7f@stx?) (set! lc2e81@stx-expr (lambda (lc3267@x) (simple-struct-ref lc3267@x '0))) (set! lc4b21@lc2e81@stx-expr lc2e81@stx-expr) (set! lc2e83@set-stx-expr! (lambda (lc3269@x lc326a@val) (simple-struct-set! lc3269@x '0 lc326a@val))) (set! lc4b22@lc2e83@set-stx-expr! lc2e83@set-stx-expr!) (set! lc2e85@stx-mark* (lambda (lc326d@x) (simple-struct-ref lc326d@x '1))) (set! lc4b23@lc2e85@stx-mark* lc2e85@stx-mark*) (set! lc2e87@set-stx-mark*! (lambda (lc326f@x lc3270@val) (simple-struct-set! lc326f@x '1 lc3270@val))) (set! lc4b24@lc2e87@set-stx-mark*! lc2e87@set-stx-mark*!) (set! lc2e89@stx-subst* (lambda (lc3273@x) (simple-struct-ref lc3273@x '2))) (set! lc4b25@lc2e89@stx-subst* lc2e89@stx-subst*) (set! lc2e8b@set-stx-subst*! (lambda (lc3275@x lc3276@val) (simple-struct-set! lc3275@x '2 lc3276@val))) (set! lc4b26@lc2e8b@set-stx-subst*! lc2e8b@set-stx-subst*!) (set! lc2e8d@stx-ae* (lambda (lc3279@x) (simple-struct-ref lc3279@x '3))) (set! lc4b27@lc2e8d@stx-ae* lc2e8d@stx-ae*) (set! lc2e8f@set-stx-ae*! (lambda (lc327b@x lc327c@val) (simple-struct-set! lc327b@x '3 lc327c@val))) (set! lc4b28@lc2e8f@set-stx-ae*! lc2e8f@set-stx-ae*!) (set! lc2e91@dummy '3) (set! lc4b29@lc2e91@dummy lc2e91@dummy) (set! lc2e93@datum->stx (lambda (lc327f@id lc3280@datum) (make-simple-struct 'stx '5 (list lc3280@datum (lc2e85@stx-mark* lc327f@id) (lc2e89@stx-subst* lc327f@id) (lc2e8d@stx-ae* lc327f@id))))) (set! lc4b2a@lc2e93@datum->stx lc2e93@datum->stx) (set! lc2e95@gen-mark (lambda () (string '#\m))) (set! lc4b2b@lc2e95@gen-mark lc2e95@gen-mark) (set! lc2e97@anti-mark '#f) (set! lc4b2c@lc2e97@anti-mark lc2e97@anti-mark) (set! lc2e99@anti-mark? not) (set! lc4b2d@lc2e99@anti-mark? lc2e99@anti-mark?) (set! lc2e9b@mkstx (lambda (lc3283@e lc3284@m* lc3285@s* lc3286@ae*) (if (and (lc2e7f@stx? lc3283@e) (not (lc2e39@top-marked? lc3284@m*))) (call-with-values (lambda () (join-wraps lc3284@m* lc3285@s* lc3286@ae* lc3283@e)) (lambda (lc3291@lc328c lc3292@lc328e lc3293@lc3290) (let ((lc3297@ae* lc3293@lc3290) (lc3298@s* lc3292@lc328e) (lc3299@m* lc3291@lc328c)) (make-simple-struct 'stx '5 (list (lc2e81@stx-expr lc3283@e) lc3299@m* lc3298@s* lc3297@ae*))))) (make-simple-struct 'stx '5 (list lc3283@e lc3284@m* lc3285@s* lc3286@ae*))))) (set! lc4b2e@lc2e9b@mkstx lc2e9b@mkstx) (set! lc2e9d@add-mark (lambda (lc329d@m lc329e@e lc329f@ae) (lc2e9b@mkstx lc329e@e (list lc329d@m) '(shift) (list lc329f@ae)))) (set! lc4b2f@lc2e9d@add-mark lc2e9d@add-mark) (set! lc2e9f@add-subst (lambda (lc32a3@subst lc32a4@e) (lc2e9b@mkstx lc32a4@e '() (list lc32a3@subst) '()))) (set! lc4b30@lc2e9f@add-subst lc2e9f@add-subst) (set! lc2ea1@syntax-kind? (lambda (lc32a7@x lc32a8@p?) (if (lc2e7f@stx? lc32a7@x) (lc2ea1@syntax-kind? (lc2e81@stx-expr lc32a7@x) lc32a8@p?) (if (lc29f7@lc28c9@annotation? lc32a7@x) (lc2ea1@syntax-kind? (lc29f9@lc28cd@annotation-expression lc32a7@x) lc32a8@p?) (lc32a8@p? lc32a7@x))))) (set! lc4b31@lc2ea1@syntax-kind? lc2ea1@syntax-kind?) (set! lc2ea3@syntax-vector->list (lambda (lc32ab@x) (if (lc2e7f@stx? lc32ab@x) (let ((lc32ad@ls (lc2ea3@syntax-vector->list (lc2e81@stx-expr lc32ab@x))) (lc32ae@m* (lc2e85@stx-mark* lc32ab@x)) (lc32af@s* (lc2e89@stx-subst* lc32ab@x)) (lc32b0@ae* (lc2e8d@stx-ae* lc32ab@x))) (map (lambda (lc32b5@x) (lc2e9b@mkstx lc32b5@x lc32ae@m* lc32af@s* lc32b0@ae*)) lc32ad@ls)) (if (lc29f7@lc28c9@annotation? lc32ab@x) (lc2ea3@syntax-vector->list (lc29f9@lc28cd@annotation-expression lc32ab@x)) (if (vector? lc32ab@x) (vector->list lc32ab@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" lc32ab@x)))))) (set! lc4b32@lc2ea3@syntax-vector->list lc2ea3@syntax-vector->list) (set! lc2ea5@syntax-pair? (lambda (lc32b7@x) (lc2ea1@syntax-kind? lc32b7@x pair?))) (set! lc4b33@lc2ea5@syntax-pair? lc2ea5@syntax-pair?) (set! lc2ea7@syntax-vector? (lambda (lc32b9@x) (lc2ea1@syntax-kind? lc32b9@x vector?))) (set! lc4b34@lc2ea7@syntax-vector? lc2ea7@syntax-vector?) (set! lc2ea9@syntax-null? (lambda (lc32bb@x) (lc2ea1@syntax-kind? lc32bb@x null?))) (set! lc4b35@lc2ea9@syntax-null? lc2ea9@syntax-null?) (set! lc2eab@syntax-list? (lambda (lc32bd@x) (or (lc2ea9@syntax-null? lc32bd@x) (and (lc2ea5@syntax-pair? lc32bd@x) (lc2eab@syntax-list? (lc2eaf@syntax-cdr lc32bd@x)))))) (set! lc4b36@lc2eab@syntax-list? lc2eab@syntax-list?) (set! lc2ead@syntax-car (lambda (lc32bf@x) (if (lc2e7f@stx? lc32bf@x) (lc2e9b@mkstx (lc2ead@syntax-car (lc2e81@stx-expr lc32bf@x)) (lc2e85@stx-mark* lc32bf@x) (lc2e89@stx-subst* lc32bf@x) (lc2e8d@stx-ae* lc32bf@x)) (if (lc29f7@lc28c9@annotation? lc32bf@x) (lc2ead@syntax-car (lc29f9@lc28cd@annotation-expression lc32bf@x)) (if (pair? lc32bf@x) (car lc32bf@x) (assertion-violation 'syntax-car '"BUG: not a pair" lc32bf@x)))))) (set! lc4b37@lc2ead@syntax-car lc2ead@syntax-car) (set! lc2eaf@syntax-cdr (lambda (lc32c1@x) (if (lc2e7f@stx? lc32c1@x) (lc2e9b@mkstx (lc2eaf@syntax-cdr (lc2e81@stx-expr lc32c1@x)) (lc2e85@stx-mark* lc32c1@x) (lc2e89@stx-subst* lc32c1@x) (lc2e8d@stx-ae* lc32c1@x)) (if (lc29f7@lc28c9@annotation? lc32c1@x) (lc2eaf@syntax-cdr (lc29f9@lc28cd@annotation-expression lc32c1@x)) (if (pair? lc32c1@x) (cdr lc32c1@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" lc32c1@x)))))) (set! lc4b38@lc2eaf@syntax-cdr lc2eaf@syntax-cdr) (set! lc2eb1@syntax->list (lambda (lc32c3@x) (if (lc2ea5@syntax-pair? lc32c3@x) (cons (lc2ead@syntax-car lc32c3@x) (lc2eb1@syntax->list (lc2eaf@syntax-cdr lc32c3@x))) (if (lc2ea9@syntax-null? lc32c3@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" lc32c3@x))))) (set! lc4b39@lc2eb1@syntax->list lc2eb1@syntax->list) (set! lc2eb3@id? (lambda (lc32c5@x) (and (lc2e7f@stx? lc32c5@x) (symbol? (lc2e81@stx-expr lc32c5@x))))) (set! lc4b3a@lc2eb3@id? lc2eb3@id?) (set! lc2eb5@id->sym (lambda (lc32c7@x) (lc2e81@stx-expr lc32c7@x))) (set! lc4b3b@lc2eb5@id->sym lc2eb5@id->sym) (set! lc2eb7@bound-id=? (lambda (lc32c9@x lc32ca@y) (and (eq? (lc2eb5@id->sym lc32c9@x) (lc2eb5@id->sym lc32ca@y)) (same-marks? (lc2e85@stx-mark* lc32c9@x) (lc2e85@stx-mark* lc32ca@y))))) (set! lc4b3c@lc2eb7@bound-id=? lc2eb7@bound-id=?) (set! lc2eb9@free-id=? (lambda (lc32cd@i lc32ce@j) (let ((lc32d1@t0 (id->real-label lc32cd@i)) (lc32d2@t1 (id->real-label lc32ce@j))) (if (or lc32d1@t0 lc32d2@t1) (eq? lc32d1@t0 lc32d2@t1) (eq? (lc2eb5@id->sym lc32cd@i) (lc2eb5@id->sym lc32ce@j)))))) (set! lc4b3d@lc2eb9@free-id=? lc2eb9@free-id=?) (set! lc2ebb@valid-bound-ids? (lambda (lc32d5@id*) (and (for-all lc2eb3@id? lc32d5@id*) (lc2ebd@distinct-bound-ids? lc32d5@id*)))) (set! lc4b3e@lc2ebb@valid-bound-ids? lc2ebb@valid-bound-ids?) (set! lc2ebd@distinct-bound-ids? (lambda (lc32d7@id*) (or (null? lc32d7@id*) (and (not (lc2ebf@bound-id-member? (car lc32d7@id*) (cdr lc32d7@id*))) (lc2ebd@distinct-bound-ids? (cdr lc32d7@id*)))))) (set! lc4b3f@lc2ebd@distinct-bound-ids? lc2ebd@distinct-bound-ids?) (set! lc2ebf@bound-id-member? (lambda (lc32d9@id lc32da@id*) (and (pair? lc32da@id*) (or (lc2eb7@bound-id=? lc32d9@id (car lc32da@id*)) (lc2ebf@bound-id-member? lc32d9@id (cdr lc32da@id*)))))) (set! lc4b40@lc2ebf@bound-id-member? lc2ebf@bound-id-member?) (set! lc2ec1@self-evaluating? (lambda (lc32dd@x) (or (number? lc32dd@x) (string? lc32dd@x) (char? lc32dd@x) (boolean? lc32dd@x) (regexp? lc32dd@x) (bytevector? lc32dd@x)))) (set! lc4b41@lc2ec1@self-evaluating? lc2ec1@self-evaluating?) (set! lc2ec3@strip-annotations (lambda (lc32df@x) (if (pair? lc32df@x) (cons (lc2ec3@strip-annotations (car lc32df@x)) (lc2ec3@strip-annotations (cdr lc32df@x))) (if (vector? lc32df@x) (vector-map lc2ec3@strip-annotations lc32df@x) (if (lc29f7@lc28c9@annotation? lc32df@x) (lc29f6@lc28c7@annotation-stripped lc32df@x) lc32df@x))))) (set! lc4b42@lc2ec3@strip-annotations lc2ec3@strip-annotations) (set! lc2ec5@strip (lambda (lc32e1@x lc32e2@m*) (if (lc2e39@top-marked? lc32e2@m*) (if (or (lc29f7@lc28c9@annotation? lc32e1@x) (and (pair? lc32e1@x) (lc29f7@lc28c9@annotation? (car lc32e1@x))) (and (vector? lc32e1@x) (> (vector-length lc32e1@x) '0) (lc29f7@lc28c9@annotation? (vector-ref lc32e1@x '0)))) (lc2ec3@strip-annotations lc32e1@x) lc32e1@x) (let lc32e7@f ((lc32e5@x lc32e1@x)) (if (lc2e7f@stx? lc32e5@x) (lc2ec5@strip (lc2e81@stx-expr lc32e5@x) (lc2e85@stx-mark* lc32e5@x)) (if (lc29f7@lc28c9@annotation? lc32e5@x) (lc29f6@lc28c7@annotation-stripped lc32e5@x) (if (pair? lc32e5@x) (let ((lc32e9@a (lc32e7@f (car lc32e5@x))) (lc32ea@d (lc32e7@f (cdr lc32e5@x)))) (if (and (eq? lc32e9@a (car lc32e5@x)) (eq? lc32ea@d (cdr lc32e5@x))) lc32e5@x (cons lc32e9@a lc32ea@d))) (if (vector? lc32e5@x) (let ((lc32ed@old (vector->list lc32e5@x))) (let ((lc32ef@new (map lc32e7@f lc32ed@old))) (if (for-all eq? lc32ed@old lc32ef@new) lc32e5@x (list->vector lc32ef@new)))) lc32e5@x)))))))) (set! lc4b43@lc2ec5@strip lc2ec5@strip) (set! lc2ec7@stx->datum (lambda (lc32f1@x) (lc2ec5@strip lc32f1@x '()))) (set! lc4b44@lc2ec7@stx->datum lc2ec7@stx->datum) (set! lc2ec9@id->label (lambda (lc32f3@id) (or (id->real-label lc32f3@id) (let ((lc32f5@t (lc31aa@top-level-context))) (if lc32f5@t ((lambda (lc32f7@env) (let ((lc32f9@rib (lc315a@interaction-env-rib lc32f7@env))) (call-with-values (lambda () (lc2e43@gen-define-label+loc lc32f3@id lc32f9@rib)) (lambda (lc32ff@lc32fc lc3300@lc32fe) (let ((lc3303@loc_ lc3300@lc32fe) (lc3304@lab lc32ff@lc32fc)) (begin (lc2e69@extend-rib! lc32f9@rib lc32f3@id lc3304@lab) lc3304@lab)))))) lc32f5@t) '#f))))) (set! lc4b45@lc2ec9@id->label lc2ec9@id->label) (set! lc2ecb@label->binding (lambda (lc3307@x lc3308@r) (let ((lc330b@t (lc2cce@lc2b1b@imported-label->binding lc3307@x))) (if lc330b@t ((lambda (lc330d@b) (if (and (pair? lc330d@b) (eq? (car lc330d@b) '$core-rtd)) (cons '$rtd (map lc3070@bless (cdr lc330d@b))) (if (and (pair? lc330d@b) (eq? (car lc330d@b) 'global-rtd)) (let ((lc330f@lib (cadr lc330d@b)) (lc3310@loc (cddr lc330d@b))) (cons '$rtd (symbol-value lc3310@loc))) lc330d@b))) lc330b@t) (let ((lc3313@t (assq lc3307@x lc3308@r))) (if lc3313@t (cdr lc3313@t) (let ((lc3315@t (lc31aa@top-level-context))) (if lc3315@t ((lambda (lc3317@env) (let ((lc3319@t (assq lc3307@x (lc3162@interaction-env-locs lc3317@env)))) (if lc3319@t ((lambda (lc331b@p) (cons* 'lexical (cdr lc331b@p) '#f)) lc3319@t) '(displaced-lexical . #f)))) lc3315@t) '(displaced-lexical . #f))))))))) (set! lc4b46@lc2ecb@label->binding lc2ecb@label->binding) (set! lc2ecd@make-binding cons) (set! lc4b47@lc2ecd@make-binding lc2ecd@make-binding) (set! lc2ecf@binding-type car) (set! lc4b48@lc2ecf@binding-type lc2ecf@binding-type) (set! lc2ed1@binding-value cdr) (set! lc4b49@lc2ed1@binding-value lc2ed1@binding-value) (set! lc2ed3@raise-unbound-error (lambda (lc331d@id) (lc3198@syntax-violation* '#f '"unbound identifier" lc331d@id (lc4f3f@lc4d85@make-undefined-violation)))) (set! lc4b4a@lc2ed3@raise-unbound-error lc2ed3@raise-unbound-error) (set! lc2ed5@syntax-type (lambda (lc331f@e lc3320@r) (if (lc2eb3@id? lc331f@e) (let ((lc3323@id lc331f@e)) (let ((lc3325@label (lc2ec9@id->label lc3323@id))) (let ((lc3327@b (lc2ecb@label->binding lc3325@label lc3320@r))) (let ((lc3329@type (lc2ecf@binding-type lc3327@b))) (begin (if (not lc3325@label) (lc2ed3@raise-unbound-error lc3323@id) (void)) (let ((lc332b@t lc3329@type)) (if (memv lc332b@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values lc3329@type (lc2ed1@binding-value lc3327@b) lc3323@id) (values 'other '#f '#f)))))))) (if (lc2ea5@syntax-pair? lc331f@e) (let ((lc332d@id (lc2ead@syntax-car lc331f@e))) (if (lc2eb3@id? lc332d@id) (let ((lc332f@label (lc2ec9@id->label lc332d@id))) (let ((lc3331@b (lc2ecb@label->binding lc332f@label lc3320@r))) (let ((lc3333@type (lc2ecf@binding-type lc3331@b))) (begin (if (not lc332f@label) (lc2ed3@raise-unbound-error lc332d@id) (void)) (let ((lc3335@t lc3333@type)) (if (memv lc3335@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values lc3333@type (lc2ed1@binding-value lc3331@b) lc332d@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((lc3337@d (lc2ec7@stx->datum lc331f@e))) (if (lc2ec1@self-evaluating? lc3337@d) (values 'constant lc3337@d '#f) (values 'other '#f '#f))))))) (set! lc4b4b@lc2ed5@syntax-type lc2ed5@syntax-type) (set! lc2ee3@sanitize-binding (lambda (lc3339@x lc333a@src) (if (procedure? lc3339@x) (cons* 'local-macro lc3339@x lc333a@src) (if (and (pair? lc3339@x) (eq? (car lc3339@x) 'macro!) (procedure? (cdr lc3339@x))) (cons* 'local-macro! (cdr lc3339@x) lc333a@src) (if (and (pair? lc3339@x) (eq? (car lc3339@x) '$rtd)) lc3339@x (assertion-violation 'expand '"invalid transformer" lc3339@x)))))) (set! lc4b4c@lc2ee3@sanitize-binding lc2ee3@sanitize-binding) (set! lc2ee5@make-variable-transformer (lambda (lc333d@x) (if (procedure? lc333d@x) (cons 'macro! lc333d@x) (assertion-violation 'make-variable-transformer '"not a procedure" lc333d@x)))) (set! lc4b4d@lc2ee5@make-variable-transformer lc2ee5@make-variable-transformer) (set! lc2ee7@variable-transformer? (lambda (lc333f@x) (and (pair? lc333f@x) (eq? (car lc333f@x) 'macro!) (procedure? (cdr lc333f@x))))) (set! lc4b4e@lc2ee7@variable-transformer? lc2ee7@variable-transformer?) (set! lc2ee9@variable-transformer-procedure (lambda (lc3341@x) (if (lc2ee7@variable-transformer? lc3341@x) (cdr lc3341@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" lc3341@x)))) (set! lc4b4f@lc2ee9@variable-transformer-procedure lc2ee9@variable-transformer-procedure) (set! lc2eeb@make-eval-transformer (lambda (lc3343@x) (lc2ee3@sanitize-binding (eval-core (lc2a59@lc2a11@expanded->core lc3343@x)) lc3343@x))) (set! lc4b50@lc2eeb@make-eval-transformer lc2eeb@make-eval-transformer) (set! lc303c@parse-define (lambda (lc3345@x) (let ((lc3347@t lc3345@x)) (let ((lc3349@ls/false (lc30ba@syntax-dispatch lc3347@t '(_ (any . any) any . each-any)))) (if (and lc3349@ls/false (apply (lambda (lc334b@id lc334c@fmls lc334d@b lc334e@b*) (lc2eb3@id? lc334b@id)) lc3349@ls/false)) (apply (lambda (lc3353@id lc3354@fmls lc3355@b lc3356@b*) (begin (lc30e0@verify-formals lc3354@fmls lc3345@x) (values lc3353@id (cons 'defun (cons lc3354@fmls (cons lc3355@b lc3356@b*)))))) lc3349@ls/false) (let ((lc335b@t lc3347@t)) (let ((lc335d@ls/false (lc30ba@syntax-dispatch lc335b@t '(_ any any)))) (if (and lc335d@ls/false (apply (lambda (lc335f@id lc3360@val) (lc2eb3@id? lc335f@id)) lc335d@ls/false)) (apply (lambda (lc3363@id lc3364@val) (values lc3363@id (cons 'expr lc3364@val))) lc335d@ls/false) (let ((lc3367@t lc335b@t)) (let ((lc3369@ls/false (lc30ba@syntax-dispatch lc3367@t '(_ any)))) (if (and lc3369@ls/false (apply (lambda (lc336b@id) (lc2eb3@id? lc336b@id)) lc3369@ls/false)) (apply (lambda (lc336d@id) (values lc336d@id (cons 'expr (lc3070@bless '(void))))) lc3369@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3367@t)))))))))))) (set! lc4b51@lc303c@parse-define lc303c@parse-define) (set! lc303e@parse-define-syntax (lambda (lc336f@x) (let ((lc3371@t lc336f@x)) (let ((lc3373@ls/false (lc30ba@syntax-dispatch lc3371@t '(_ any any)))) (if (and lc3373@ls/false (apply (lambda (lc3375@id lc3376@val) (lc2eb3@id? lc3375@id)) lc3373@ls/false)) (apply (lambda (lc3379@id lc337a@val) (values lc3379@id lc337a@val)) lc3373@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3371@t)))))) (set! lc4b52@lc303e@parse-define-syntax lc303e@parse-define-syntax) (set! lc3040@scheme-stx-hashtable (make-eq-hashtable)) (set! lc4b53@lc3040@scheme-stx-hashtable lc3040@scheme-stx-hashtable) (set! lc3042@scheme-stx (lambda (lc337d@sym) (or (hashtable-ref lc3040@scheme-stx-hashtable lc337d@sym '#f) (let ((lc337f@subst (lc2caa@lc2ad3@library-subst (lc2cc8@lc2b0f@find-library-by-name '(psyntax system $all))))) (let ((lc3381@stx (make-simple-struct 'stx '5 (list lc337d@sym lc2e37@top-mark* '() '())))) (let ((lc3383@stx (let ((lc3385@t (assq lc337d@sym lc337f@subst))) (if lc3385@t ((lambda (lc3387@x) (let ((lc3389@name (car lc3387@x)) (lc338a@label (cdr lc3387@x))) (lc2e9f@add-subst (make-simple-struct 'rib '6 (list (list lc3389@name) (list lc2e37@top-mark*) (list lc338a@label) '#f '#f)) lc3381@stx))) lc3385@t) lc3381@stx)))) (begin (hashtable-set! lc3040@scheme-stx-hashtable lc337d@sym lc3383@stx) lc3383@stx))))))) (set! lc4b54@lc3042@scheme-stx lc3042@scheme-stx) (set! lc3044@lexical-var car) (set! lc4b55@lc3044@lexical-var lc3044@lexical-var) (set! lc3046@lexical-mutable? cdr) (set! lc4b56@lc3046@lexical-mutable? lc3046@lexical-mutable?) (set! lc3048@set-lexical-mutable! set-cdr!) (set! lc4b57@lc3048@set-lexical-mutable! lc3048@set-lexical-mutable!) (set! lc304a@add-lexical (lambda (lc338d@lab lc338e@lex lc338f@r) (cons (cons* lc338d@lab 'lexical lc338e@lex '#f) lc338f@r))) (set! lc4b58@lc304a@add-lexical lc304a@add-lexical) (set! lc304c@add-lexicals (lambda (lc3393@lab* lc3394@lex* lc3395@r) (if (null? lc3393@lab*) lc3395@r (lc304c@add-lexicals (cdr lc3393@lab*) (cdr lc3394@lex*) (lc304a@add-lexical (car lc3393@lab*) (car lc3394@lex*) lc3395@r))))) (set! lc4b59@lc304c@add-lexicals lc304c@add-lexicals) (set! lc304e@letrec-helper (lambda (lc3399@e lc339a@r lc339b@mr lc339c@build) (let ((lc33a1@t lc3399@e)) (let ((lc33a3@ls/false (lc30ba@syntax-dispatch lc33a1@t '(_ #(each (any any)) any . each-any)))) (if lc33a3@ls/false (apply (lambda (lc33a5@lhs* lc33a6@rhs* lc33a7@b lc33a8@b*) (if (not (lc2ebb@valid-bound-ids? lc33a5@lhs*)) (lc3074@invalid-fmls-error lc3399@e lc33a5@lhs*) (let ((lc33ad@lex* (map lc2e3b@gen-lexical lc33a5@lhs*)) (lc33ae@lab* (map lc2e3f@gen-label lc33a5@lhs*))) (let ((lc33b1@rib (lc2e73@make-full-rib lc33a5@lhs* lc33ae@lab*)) (lc33b2@r (lc304c@add-lexicals lc33ae@lab* lc33ad@lex* lc339a@r))) (let ((lc33b5@body (lc30f2@chi-internal (lc2e9f@add-subst lc33b1@rib (cons lc33a7@b lc33a8@b*)) lc33b2@r lc339b@mr)) (lc33b6@rhs* (lc30d8@chi-expr* (map (lambda (lc33b9@x) (lc2e9f@add-subst lc33b1@rib lc33b9@x)) lc33a6@rhs*) lc33b2@r lc339b@mr))) (lc339c@build '#f lc33ad@lex* lc33b6@rhs* lc33b5@body)))))) lc33a3@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc33a1@t)))))) (set! lc4b5a@lc304e@letrec-helper lc304e@letrec-helper) (set! lc3050@let-transformer (lambda (lc33bb@e lc33bc@r lc33bd@mr) (let ((lc33c1@t lc33bb@e)) (let ((lc33c3@ls/false (lc30ba@syntax-dispatch lc33c1@t '(_ #(each (any any)) any . each-any)))) (if lc33c3@ls/false (apply (lambda (lc33c5@lhs* lc33c6@rhs* lc33c7@b lc33c8@b*) (if (not (lc2ebb@valid-bound-ids? lc33c5@lhs*)) (lc3074@invalid-fmls-error lc33bb@e lc33c5@lhs*) (let ((lc33cd@lex* (map lc2e3b@gen-lexical lc33c5@lhs*)) (lc33ce@lab* (map lc2e3f@gen-label lc33c5@lhs*)) (lc33cf@rhs* (lc30d8@chi-expr* lc33c6@rhs* lc33bc@r lc33bd@mr))) (let ((lc33d3@rib (lc2e73@make-full-rib lc33c5@lhs* lc33ce@lab*)) (lc33d4@r (lc304c@add-lexicals lc33ce@lab* lc33cd@lex* lc33bc@r))) (let ((lc33d7@body (lc30f2@chi-internal (lc2e9f@add-subst lc33d3@rib (cons lc33c7@b lc33c8@b*)) lc33d4@r lc33bd@mr))) (lc2e1b@lc2d7e@build-let '#f lc33cd@lex* lc33cf@rhs* lc33d7@body)))))) lc33c3@ls/false) (let ((lc33d9@t lc33c1@t)) (let ((lc33db@ls/false (lc30ba@syntax-dispatch lc33d9@t '(_ any #(each (any any)) any . each-any)))) (if lc33db@ls/false (apply (lambda (lc33dd@loop lc33de@lhs* lc33df@rhs* lc33e0@b lc33e1@b*) (if (not (lc2ebb@valid-bound-ids? lc33de@lhs*)) (lc3074@invalid-fmls-error lc33bb@e lc33de@lhs*) (let ((lc33e7@lex* (map lc2e3b@gen-lexical lc33de@lhs*)) (lc33e8@lab* (map lc2e3f@gen-label lc33de@lhs*)) (lc33e9@rhs* (lc30d8@chi-expr* lc33df@rhs* lc33bc@r lc33bd@mr)) (lc33ea@loop-lex (lc2e3b@gen-lexical lc33dd@loop)) (lc33eb@loop-lab (lc2e3f@gen-label lc33dd@loop))) (let ((lc33f1@loop-rib (lc2e73@make-full-rib (list lc33dd@loop) (list lc33eb@loop-lab))) (lc33f2@rib (lc2e73@make-full-rib lc33de@lhs* lc33e8@lab*)) (lc33f3@r (lc304c@add-lexicals (cons lc33eb@loop-lab lc33e8@lab*) (cons lc33ea@loop-lex lc33e7@lex*) lc33bc@r))) (let ((lc33f7@body (lc30f2@chi-internal (lc2e9f@add-subst lc33f1@loop-rib (lc2e9f@add-subst lc33f2@rib (cons lc33e0@b lc33e1@b*))) lc33f3@r lc33bd@mr))) (lc2e1c@lc2d80@build-named-let '#f lc33ea@loop-lex lc33e7@lex* lc33e9@rhs* lc33f7@body)))))) lc33db@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc33d9@t))))))))) (set! lc4b5b@lc3050@let-transformer lc3050@let-transformer) (set! lc3052@letrec-transformer (lambda (lc33f9@e lc33fa@r lc33fb@mr) (lc304e@letrec-helper lc33f9@e lc33fa@r lc33fb@mr lc2e1a@lc2d7c@build-letrec))) (set! lc4b5c@lc3052@letrec-transformer lc3052@letrec-transformer) (set! lc3054@letrec*-transformer (lambda (lc33ff@e lc3400@r lc3401@mr) (lc304e@letrec-helper lc33ff@e lc3400@r lc3401@mr lc2e1d@lc2d82@build-letrec*))) (set! lc4b5d@lc3054@letrec*-transformer lc3054@letrec*-transformer) (set! lc3056@fluid-let-syntax-transformer (lambda (lc3405@e lc3406@r lc3407@mr) (letrec* ((lc340c@lookup (lambda (lc341f@x) (or (lc2ec9@id->label lc341f@x) (lc319a@syntax-violation '#f '"unbound identifier" lc3405@e lc341f@x))))) (let ((lc340d@t lc3405@e)) (let ((lc340f@ls/false (lc30ba@syntax-dispatch lc340d@t '(_ #(each (any any)) any . each-any)))) (if lc340f@ls/false (apply (lambda (lc3411@lhs* lc3412@rhs* lc3413@b lc3414@b*) (if (not (lc2ebb@valid-bound-ids? lc3411@lhs*)) (lc3074@invalid-fmls-error lc3405@e lc3411@lhs*) (let ((lc3419@lab* (map lc340c@lookup lc3411@lhs*)) (lc341a@rhs* (map (lambda (lc341d@x) (lc2eeb@make-eval-transformer (lc3114@expand-transformer lc341d@x lc3407@mr))) lc3412@rhs*))) (lc30f2@chi-internal (cons lc3413@b lc3414@b*) (append (map cons lc3419@lab* lc341a@rhs*) lc3406@r) (append (map cons lc3419@lab* lc341a@rhs*) lc3407@mr))))) lc340f@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc340d@t))))))) (set! lc4b5e@lc3056@fluid-let-syntax-transformer lc3056@fluid-let-syntax-transformer) (set! lc3058@type-descriptor-transformer (lambda (lc3421@e lc3422@r lc3423@mr) (let ((lc3427@t lc3421@e)) (let ((lc3429@ls/false (lc30ba@syntax-dispatch lc3427@t '(_ any)))) (if (and lc3429@ls/false (apply (lambda (lc342b@id) (lc2eb3@id? lc342b@id)) lc3429@ls/false)) (apply (lambda (lc342d@id) (let ((lc342f@lab (lc2ec9@id->label lc342d@id))) (let ((lc3431@b (lc2ecb@label->binding lc342f@lab lc3422@r))) (let ((lc3433@type (lc2ecf@binding-type lc3431@b))) (begin (if (not lc342f@lab) (lc2ed3@raise-unbound-error lc342d@id) (void)) (if (not (and (eq? lc3433@type '$rtd) (not (list? (lc2ed1@binding-value lc3431@b))))) (lc319a@syntax-violation '#f '"not a record type" lc3421@e) (void)) (list 'quote (lc2ed1@binding-value lc3431@b))))))) lc3429@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3427@t)))))) (set! lc4b5f@lc3058@type-descriptor-transformer lc3058@type-descriptor-transformer) (set! lc305a@record-type-descriptor-transformer (lambda (lc3435@e lc3436@r lc3437@mr) (let ((lc343b@t lc3435@e)) (let ((lc343d@ls/false (lc30ba@syntax-dispatch lc343b@t '(_ any)))) (if (and lc343d@ls/false (apply (lambda (lc343f@id) (lc2eb3@id? lc343f@id)) lc343d@ls/false)) (apply (lambda (lc3441@id) (let ((lc3443@lab (lc2ec9@id->label lc3441@id))) (let ((lc3445@b (lc2ecb@label->binding lc3443@lab lc3436@r))) (let ((lc3447@type (lc2ecf@binding-type lc3445@b))) (begin (if (not lc3443@lab) (lc2ed3@raise-unbound-error lc3441@id) (void)) (if (not (and (eq? lc3447@type '$rtd) (list? (lc2ed1@binding-value lc3445@b)))) (lc319a@syntax-violation '#f '"not a record type" lc3435@e) (void)) (lc30dc@chi-expr (car (lc2ed1@binding-value lc3445@b)) lc3436@r lc3437@mr)))))) lc343d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc343b@t)))))) (set! lc4b60@lc305a@record-type-descriptor-transformer lc305a@record-type-descriptor-transformer) (set! lc305c@record-constructor-descriptor-transformer (lambda (lc3449@e lc344a@r lc344b@mr) (let ((lc344f@t lc3449@e)) (let ((lc3451@ls/false (lc30ba@syntax-dispatch lc344f@t '(_ any)))) (if (and lc3451@ls/false (apply (lambda (lc3453@id) (lc2eb3@id? lc3453@id)) lc3451@ls/false)) (apply (lambda (lc3455@id) (let ((lc3457@lab (lc2ec9@id->label lc3455@id))) (let ((lc3459@b (lc2ecb@label->binding lc3457@lab lc344a@r))) (let ((lc345b@type (lc2ecf@binding-type lc3459@b))) (begin (if (not lc3457@lab) (lc2ed3@raise-unbound-error lc3455@id) (void)) (if (not (and (eq? lc345b@type '$rtd) (list? (lc2ed1@binding-value lc3459@b)))) (lc319a@syntax-violation '#f '"invalid type" lc3449@e) (void)) (lc30dc@chi-expr (cadr (lc2ed1@binding-value lc3459@b)) lc344a@r lc344b@mr)))))) lc3451@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc344f@t)))))) (set! lc4b61@lc305c@record-constructor-descriptor-transformer lc305c@record-constructor-descriptor-transformer) (set! lc305e@when-macro (lambda (lc345d@e) (let ((lc345f@t lc345d@e)) (let ((lc3461@ls/false (lc30ba@syntax-dispatch lc345f@t '(_ any any . each-any)))) (if lc3461@ls/false (apply (lambda (lc3463@test lc3464@e lc3465@e*) (lc3070@bless (list 'if lc3463@test (cons 'begin (cons lc3464@e lc3465@e*))))) lc3461@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc345f@t)))))) (set! lc4b62@lc305e@when-macro lc305e@when-macro) (set! lc3060@unless-macro (lambda (lc3469@e) (let ((lc346b@t lc3469@e)) (let ((lc346d@ls/false (lc30ba@syntax-dispatch lc346b@t '(_ any any . each-any)))) (if lc346d@ls/false (apply (lambda (lc346f@test lc3470@e lc3471@e*) (lc3070@bless (list 'if (list 'not lc346f@test) (cons 'begin (cons lc3470@e lc3471@e*))))) lc346d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc346b@t)))))) (set! lc4b63@lc3060@unless-macro lc3060@unless-macro) (set! lc3062@if-transformer (lambda (lc3475@e lc3476@r lc3477@mr) (let ((lc347b@t lc3475@e)) (let ((lc347d@ls/false (lc30ba@syntax-dispatch lc347b@t '(_ any any any)))) (if lc347d@ls/false (apply (lambda (lc347f@e0 lc3480@e1 lc3481@e2) (list 'if (lc30dc@chi-expr lc347f@e0 lc3476@r lc3477@mr) (lc30dc@chi-expr lc3480@e1 lc3476@r lc3477@mr) (lc30dc@chi-expr lc3481@e2 lc3476@r lc3477@mr))) lc347d@ls/false) (let ((lc3485@t lc347b@t)) (let ((lc3487@ls/false (lc30ba@syntax-dispatch lc3485@t '(_ any any)))) (if lc3487@ls/false (apply (lambda (lc3489@e0 lc348a@e1) (list 'if (lc30dc@chi-expr lc3489@e0 lc3476@r lc3477@mr) (lc30dc@chi-expr lc348a@e1 lc3476@r lc3477@mr) (lc2e19@lc2d7a@build-void))) lc3487@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3485@t))))))))) (set! lc4b64@lc3062@if-transformer lc3062@if-transformer) (set! lc3064@and-transformer (lambda (lc348d@e lc348e@r lc348f@mr) (let ((lc3493@t lc348d@e)) (let ((lc3495@ls/false (lc30ba@syntax-dispatch lc3493@t '(_ . each-any)))) (if lc3495@ls/false (apply (lambda (lc3497@e*) (cons 'and (lc30d8@chi-expr* lc3497@e* lc348e@r lc348f@mr))) lc3495@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3493@t)))))) (set! lc4b65@lc3064@and-transformer lc3064@and-transformer) (set! lc3066@or-transformer (lambda (lc3499@e lc349a@r lc349b@mr) (let ((lc349f@t lc3499@e)) (let ((lc34a1@ls/false (lc30ba@syntax-dispatch lc349f@t '(_ . each-any)))) (if lc34a1@ls/false (apply (lambda (lc34a3@e*) (cons 'or (lc30d8@chi-expr* lc34a3@e* lc349a@r lc349b@mr))) lc34a1@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc349f@t)))))) (set! lc4b66@lc3066@or-transformer lc3066@or-transformer) (set! lc3068@case-macro (lambda (lc34a5@e) (letrec* ((lc34a8@build-last (lambda (lc34cf@cls) (let ((lc34d1@t lc34cf@cls)) (let ((lc34d3@ls/false (lc30ba@syntax-dispatch lc34d1@t '(#(scheme-id else) any . each-any)))) (if lc34d3@ls/false (apply (lambda (lc34d5@e lc34d6@e*) (cons 'begin (cons lc34d5@e lc34d6@e*))) lc34d3@ls/false) (let ((lc34d9@t lc34d1@t)) (let ((lc34db@ls/false (lc30ba@syntax-dispatch lc34d9@t '_))) (if lc34db@ls/false (apply (lambda () (lc34aa@build-one lc34cf@cls '(if #f #f))) lc34db@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc34d9@t))))))))) (lc34aa@build-one (lambda (lc34c1@cls lc34c2@k) (let ((lc34c5@t lc34c1@cls)) (let ((lc34c7@ls/false (lc30ba@syntax-dispatch lc34c5@t '(each-any any . each-any)))) (if lc34c7@ls/false (apply (lambda (lc34c9@d* lc34ca@e lc34cb@e*) (list 'if (list 'memv 't (list 'quote lc34c9@d*)) (cons 'begin (cons lc34ca@e lc34cb@e*)) lc34c2@k)) lc34c7@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc34c5@t))))))) (let ((lc34ab@t lc34a5@e)) (let ((lc34ad@ls/false (lc30ba@syntax-dispatch lc34ab@t '(_ any)))) (if lc34ad@ls/false (apply (lambda (lc34af@expr) (lc3070@bless (cons 'let (cons (list (list 't lc34af@expr)) '((if #f #f)))))) lc34ad@ls/false) (let ((lc34b1@t lc34ab@t)) (let ((lc34b3@ls/false (lc30ba@syntax-dispatch lc34b1@t '(_ any any . each-any)))) (if lc34b3@ls/false (apply (lambda (lc34b5@expr lc34b6@cls lc34b7@cls*) (lc3070@bless (list 'let (list (list 't lc34b5@expr)) (let lc34bf@f ((lc34bb@cls lc34b6@cls) (lc34bc@cls* lc34b7@cls*)) (if (null? lc34bc@cls*) (lc34a8@build-last lc34bb@cls) (lc34aa@build-one lc34bb@cls (lc34bf@f (car lc34bc@cls*) (cdr lc34bc@cls*)))))))) lc34b3@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc34b1@t)))))))))) (set! lc4b67@lc3068@case-macro lc3068@case-macro) (set! lc306a@quote-transformer (lambda (lc34dd@e lc34de@r lc34df@mr) (let ((lc34e3@t lc34dd@e)) (let ((lc34e5@ls/false (lc30ba@syntax-dispatch lc34e3@t '(_ any)))) (if lc34e5@ls/false (apply (lambda (lc34e7@datum) (list 'quote (lc2ec7@stx->datum lc34e7@datum))) lc34e5@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc34e3@t)))))) (set! lc4b68@lc306a@quote-transformer lc306a@quote-transformer) (set! lc306c@case-lambda-transformer (lambda (lc34e9@e lc34ea@r lc34eb@mr) (let ((lc34ef@t lc34e9@e)) (let ((lc34f1@ls/false (lc30ba@syntax-dispatch lc34ef@t '(_ . #(each (any any . each-any)))))) (if lc34f1@ls/false (apply (lambda (lc34f3@fmls* lc34f4@b* lc34f5@b**) (call-with-values (lambda () (lc30e4@chi-lambda-clause* lc34e9@e lc34f3@fmls* (map cons lc34f4@b* lc34f5@b**) lc34ea@r lc34eb@mr)) (lambda (lc34fd@lc34fa lc34fe@lc34fc) (let ((lc3501@body* lc34fe@lc34fc) (lc3502@fmls* lc34fd@lc34fa)) (lc2e17@lc2d4a@build-case-lambda '#f lc3502@fmls* lc3501@body*))))) lc34f1@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc34ef@t)))))) (set! lc4b69@lc306c@case-lambda-transformer lc306c@case-lambda-transformer) (set! lc306e@lambda-transformer (lambda (lc3505@e lc3506@r lc3507@mr) (let ((lc350b@t lc3505@e)) (let ((lc350d@ls/false (lc30ba@syntax-dispatch lc350b@t '(_ any any . each-any)))) (if lc350d@ls/false (apply (lambda (lc350f@fmls lc3510@b lc3511@b*) (call-with-values (lambda () (lc30e2@chi-lambda-clause lc3505@e lc350f@fmls (cons lc3510@b lc3511@b*) lc3506@r lc3507@mr)) (lambda (lc3519@lc3516 lc351a@lc3518) (let ((lc351d@body lc351a@lc3518) (lc351e@fmls lc3519@lc3516)) (lc2e16@lc2d48@build-lambda '#f lc351e@fmls lc351d@body))))) lc350d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc350b@t)))))) (set! lc4b6a@lc306e@lambda-transformer lc306e@lambda-transformer) (set! lc3070@bless (lambda (lc3521@x) (lc2e9b@mkstx (let lc3525@f ((lc3523@x lc3521@x)) (if (lc2e7f@stx? lc3523@x) lc3523@x (if (pair? lc3523@x) (cons (lc3525@f (car lc3523@x)) (lc3525@f (cdr lc3523@x))) (if (symbol? lc3523@x) (lc3042@scheme-stx lc3523@x) (if (vector? lc3523@x) (vector-map lc3525@f lc3523@x) lc3523@x))))) '() '() '()))) (set! lc4b6b@lc3070@bless lc3070@bless) (set! lc3072@with-syntax-macro (lambda (lc3527@e) (let ((lc3529@t lc3527@e)) (let ((lc352b@ls/false (lc30ba@syntax-dispatch lc3529@t '(_ #(each (any any)) any . each-any)))) (if lc352b@ls/false (apply (lambda (lc352d@pat* lc352e@expr* lc352f@b lc3530@b*) (let ((lc3535@idn* (let lc3539@f ((lc3537@pat* lc352d@pat*)) (if (null? lc3537@pat*) '() (call-with-values (lambda () (lc30b8@convert-pattern (car lc3537@pat*) '())) (lambda (lc353f@lc353c lc3540@lc353e) (let ((lc3543@idn* lc3540@lc353e) (lc3544@pat lc353f@lc353c)) (append lc3543@idn* (lc3539@f (cdr lc3537@pat*)))))))))) (begin (lc30e0@verify-formals (map car lc3535@idn*) lc3527@e) (let ((lc3547@t* (lc3188@generate-temporaries lc352e@expr*))) (lc3070@bless (list 'let (map list lc3547@t* lc352e@expr*) (let lc354d@f ((lc3549@pat* lc352d@pat*) (lc354a@t* lc3547@t*)) (if (null? lc3549@pat*) (cons 'begin (cons '#f (cons lc352f@b lc3530@b*))) (list 'syntax-case (car lc354a@t*) '() (list (car lc3549@pat*) (lc354d@f (cdr lc3549@pat*) (cdr lc354a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car lc3549@pat*)) (car lc354a@t*)))))))))))) lc352b@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3529@t)))))) (set! lc4b6c@lc3072@with-syntax-macro lc3072@with-syntax-macro) (set! lc3074@invalid-fmls-error (lambda (lc354f@stx lc3550@fmls) (let ((lc3553@t lc3550@fmls)) (let ((lc3555@ls/false (lc30ba@syntax-dispatch lc3553@t '#(each+ any () any)))) (if lc3555@ls/false (apply (lambda (lc3557@id* lc3558@last) (let lc355d@f ((lc355b@id* (if (lc2eb3@id? lc3558@last) (cons lc3558@last lc3557@id*) (if (lc2ea9@syntax-null? lc3558@last) lc3557@id* (lc319a@syntax-violation '#f '"not an identifier" lc354f@stx lc3558@last))))) (if (null? lc355b@id*) (values) (if (not (lc2eb3@id? (car lc355b@id*))) (lc319a@syntax-violation '#f '"not an identifier" lc354f@stx (car lc355b@id*)) (begin (lc355d@f (cdr lc355b@id*)) (if (lc2ebf@bound-id-member? (car lc355b@id*) (cdr lc355b@id*)) (lc319a@syntax-violation '#f '"duplicate binding" lc354f@stx (car lc355b@id*)) (void))))))) lc3555@ls/false) (let ((lc355f@t lc3553@t)) (let ((lc3561@ls/false (lc30ba@syntax-dispatch lc355f@t '_))) (if lc3561@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"malformed binding form" lc354f@stx lc3550@fmls)) lc3561@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc355f@t))))))))) (set! lc4b6d@lc3074@invalid-fmls-error lc3074@invalid-fmls-error) (set! lc3076@let-macro (lambda (lc3563@stx) (let ((lc3565@t lc3563@stx)) (let ((lc3567@ls/false (lc30ba@syntax-dispatch lc3565@t '(_ #(each (any any)) any . each-any)))) (if lc3567@ls/false (apply (lambda (lc3569@lhs* lc356a@rhs* lc356b@b lc356c@b*) (if (lc2ebb@valid-bound-ids? lc3569@lhs*) (lc3070@bless (cons (cons 'lambda (cons lc3569@lhs* (cons lc356b@b lc356c@b*))) lc356a@rhs*)) (lc3074@invalid-fmls-error lc3563@stx lc3569@lhs*))) lc3567@ls/false) (let ((lc3571@t lc3565@t)) (let ((lc3573@ls/false (lc30ba@syntax-dispatch lc3571@t '(_ any #(each (any any)) any . each-any)))) (if (and lc3573@ls/false (apply (lambda (lc3575@f lc3576@lhs* lc3577@rhs* lc3578@b lc3579@b*) (lc2eb3@id? lc3575@f)) lc3573@ls/false)) (apply (lambda (lc357f@f lc3580@lhs* lc3581@rhs* lc3582@b lc3583@b*) (if (lc2ebb@valid-bound-ids? lc3580@lhs*) (lc3070@bless (cons (list 'letrec (list (list lc357f@f (cons 'lambda (cons lc3580@lhs* (cons lc3582@b lc3583@b*))))) lc357f@f) lc3581@rhs*)) (lc3074@invalid-fmls-error lc3563@stx lc3580@lhs*))) lc3573@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3571@t))))))))) (set! lc4b6e@lc3076@let-macro lc3076@let-macro) (set! lc3078@let-values-macro (lambda (lc3589@stx) (letrec* ((lc358c@rename (lambda (lc35f1@x lc35f2@old* lc35f3@new*) (begin (if (not (lc2eb3@id? lc35f1@x)) (lc319a@syntax-violation '#f '"not an indentifier" lc3589@stx lc35f1@x) (void)) (if (lc2ebf@bound-id-member? lc35f1@x lc35f2@old*) (lc319a@syntax-violation '#f '"duplicate binding" lc3589@stx lc35f1@x) (void)) (let ((lc35f7@y (gensym (lc31a0@syntax->datum lc35f1@x)))) (values lc35f7@y (cons lc35f1@x lc35f2@old*) (cons lc35f7@y lc35f3@new*)))))) (lc358e@rename* (lambda (lc35df@x* lc35e0@old* lc35e1@new*) (if (null? lc35df@x*) (values '() lc35e0@old* lc35e1@new*) (call-with-values (lambda () (lc358c@rename (car lc35df@x*) lc35e0@old* lc35e1@new*)) (lambda (lc35e5@x lc35e6@old* lc35e7@new*) (call-with-values (lambda () (lc358e@rename* (cdr lc35df@x*) lc35e6@old* lc35e7@new*)) (lambda (lc35eb@x* lc35ec@old* lc35ed@new*) (values (cons lc35e5@x lc35eb@x*) lc35ec@old* lc35ed@new*))))))))) (let ((lc358f@t lc3589@stx)) (let ((lc3591@ls/false (lc30ba@syntax-dispatch lc358f@t '(_ () any . each-any)))) (if lc3591@ls/false (apply (lambda (lc3593@b lc3594@b*) (cons* (lc3070@bless 'let) '() lc3593@b lc3594@b*)) lc3591@ls/false) (let ((lc3597@t lc358f@t)) (let ((lc3599@ls/false (lc30ba@syntax-dispatch lc3597@t '(_ #(each (any any)) any . each-any)))) (if lc3599@ls/false (apply (lambda (lc359b@lhs* lc359c@rhs* lc359d@b lc359e@b*) (lc3070@bless (let lc35ab@f ((lc35a3@lhs* lc359b@lhs*) (lc35a4@rhs* lc359c@rhs*) (lc35a5@old* '()) (lc35a6@new* '())) (if (null? lc35a3@lhs*) (cons 'let (cons (map list lc35a5@old* lc35a6@new*) (cons lc359d@b lc359e@b*))) (let ((lc35ad@t (car lc35a3@lhs*))) (let ((lc35af@ls/false (lc30ba@syntax-dispatch lc35ad@t 'each-any))) (if lc35af@ls/false (apply (lambda (lc35b1@x*) (call-with-values (lambda () (lc358e@rename* lc35b1@x* lc35a5@old* lc35a6@new*)) (lambda (lc35b9@lc35b4 lc35ba@lc35b6 lc35bb@lc35b8) (let ((lc35bf@new* lc35bb@lc35b8) (lc35c0@old* lc35ba@lc35b6) (lc35c1@y* lc35b9@lc35b4)) (list 'call-with-values (list 'lambda '() (car lc35a4@rhs*)) (list 'lambda lc35c1@y* (lc35ab@f (cdr lc35a3@lhs*) (cdr lc35a4@rhs*) lc35c0@old* lc35bf@new*))))))) lc35af@ls/false) (let ((lc35c5@t lc35ad@t)) (let ((lc35c7@ls/false (lc30ba@syntax-dispatch lc35c5@t '#(each+ any () any)))) (if lc35c7@ls/false (apply (lambda (lc35c9@x* lc35ca@x) (call-with-values (lambda () (lc358c@rename lc35ca@x lc35a5@old* lc35a6@new*)) (lambda (lc35cd@y lc35ce@old* lc35cf@new*) (call-with-values (lambda () (lc358e@rename* lc35c9@x* lc35ce@old* lc35cf@new*)) (lambda (lc35d3@y* lc35d4@old* lc35d5@new*) (list 'call-with-values (list 'lambda '() (car lc35a4@rhs*)) (list 'lambda (append lc35d3@y* lc35cd@y) (lc35ab@f (cdr lc35a3@lhs*) (cdr lc35a4@rhs*) lc35d4@old* lc35d5@new*)))))))) lc35c7@ls/false) (let ((lc35d9@t lc35c5@t)) (let ((lc35db@ls/false (lc30ba@syntax-dispatch lc35d9@t 'any))) (if lc35db@ls/false (apply (lambda (lc35dd@others) (lc319a@syntax-violation '#f '"malformed bindings" lc3589@stx lc35dd@others)) lc35db@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc35d9@t)))))))))))))) lc3599@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3597@t)))))))))) (set! lc4b6f@lc3078@let-values-macro lc3078@let-values-macro) (set! lc307a@let*-values-macro (lambda (lc35f9@stx) (letrec* ((lc35fc@check (lambda (lc362b@x*) (if (not (null? lc362b@x*)) (let ((lc362d@x (car lc362b@x*))) (begin (if (not (lc2eb3@id? lc362d@x)) (lc319a@syntax-violation '#f '"not an identifier" lc35f9@stx lc362d@x) (void)) (lc35fc@check (cdr lc362b@x*)) (if (lc2ebf@bound-id-member? lc362d@x (cdr lc362b@x*)) (lc319a@syntax-violation '#f '"duplicate identifier" lc35f9@stx lc362d@x) (void)))) (void))))) (let ((lc35fd@t lc35f9@stx)) (let ((lc35ff@ls/false (lc30ba@syntax-dispatch lc35fd@t '(_ () any . each-any)))) (if lc35ff@ls/false (apply (lambda (lc3601@b lc3602@b*) (cons* (lc3070@bless 'let) '() lc3601@b lc3602@b*)) lc35ff@ls/false) (let ((lc3605@t lc35fd@t)) (let ((lc3607@ls/false (lc30ba@syntax-dispatch lc3605@t '(_ #(each (any any)) any . each-any)))) (if lc3607@ls/false (apply (lambda (lc3609@lhs* lc360a@rhs* lc360b@b lc360c@b*) (lc3070@bless (let lc3615@f ((lc3611@lhs* lc3609@lhs*) (lc3612@rhs* lc360a@rhs*)) (if (null? lc3611@lhs*) (cons 'begin (cons lc360b@b lc360c@b*)) (let ((lc3617@t (car lc3611@lhs*))) (let ((lc3619@ls/false (lc30ba@syntax-dispatch lc3617@t 'each-any))) (if lc3619@ls/false (apply (lambda (lc361b@x*) (begin (lc35fc@check lc361b@x*) (list 'call-with-values (list 'lambda '() (car lc3612@rhs*)) (list 'lambda lc361b@x* (lc3615@f (cdr lc3611@lhs*) (cdr lc3612@rhs*)))))) lc3619@ls/false) (let ((lc361d@t lc3617@t)) (let ((lc361f@ls/false (lc30ba@syntax-dispatch lc361d@t '#(each+ any () any)))) (if lc361f@ls/false (apply (lambda (lc3621@x* lc3622@x) (begin (lc35fc@check (cons lc3622@x lc3621@x*)) (list 'call-with-values (list 'lambda '() (car lc3612@rhs*)) (list 'lambda (append lc3621@x* lc3622@x) (lc3615@f (cdr lc3611@lhs*) (cdr lc3612@rhs*)))))) lc361f@ls/false) (let ((lc3625@t lc361d@t)) (let ((lc3627@ls/false (lc30ba@syntax-dispatch lc3625@t 'any))) (if lc3627@ls/false (apply (lambda (lc3629@others) (lc319a@syntax-violation '#f '"malformed bindings" lc35f9@stx lc3629@others)) lc3627@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3625@t)))))))))))))) lc3607@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3605@t)))))))))) (set! lc4b70@lc307a@let*-values-macro lc307a@let*-values-macro) (set! lc307c@trace-lambda-macro (lambda (lc362f@stx) (let ((lc3631@t lc362f@stx)) (let ((lc3633@ls/false (lc30ba@syntax-dispatch lc3631@t '(_ any each-any any . each-any)))) (if lc3633@ls/false (apply (lambda (lc3635@who lc3636@fmls lc3637@b lc3638@b*) (if (lc2ebb@valid-bound-ids? lc3636@fmls) (lc3070@bless (list 'make-traced-procedure (list 'quote lc3635@who) (cons 'lambda (cons lc3636@fmls (cons lc3637@b lc3638@b*))))) (lc3074@invalid-fmls-error lc362f@stx lc3636@fmls))) lc3633@ls/false) (let ((lc363d@t lc3631@t)) (let ((lc363f@ls/false (lc30ba@syntax-dispatch lc363d@t '(_ any #(each+ any () any) any . each-any)))) (if lc363f@ls/false (apply (lambda (lc3641@who lc3642@fmls lc3643@last lc3644@b lc3645@b*) (if (lc2ebb@valid-bound-ids? (cons lc3643@last lc3642@fmls)) (lc3070@bless (list 'make-traced-procedure (list 'quote lc3641@who) (cons 'lambda (cons (append lc3642@fmls lc3643@last) (cons lc3644@b lc3645@b*))))) (lc3074@invalid-fmls-error lc362f@stx (append lc3642@fmls lc3643@last)))) lc363f@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc363d@t))))))))) (set! lc4b71@lc307c@trace-lambda-macro lc307c@trace-lambda-macro) (set! lc307e@trace-define-macro (lambda (lc364b@stx) (let ((lc364d@t lc364b@stx)) (let ((lc364f@ls/false (lc30ba@syntax-dispatch lc364d@t '(_ (any . each-any) any . each-any)))) (if lc364f@ls/false (apply (lambda (lc3651@who lc3652@fmls lc3653@b lc3654@b*) (if (lc2ebb@valid-bound-ids? lc3652@fmls) (lc3070@bless (list 'define lc3651@who (list 'make-traced-procedure (list 'quote lc3651@who) (cons 'lambda (cons lc3652@fmls (cons lc3653@b lc3654@b*)))))) (lc3074@invalid-fmls-error lc364b@stx lc3652@fmls))) lc364f@ls/false) (let ((lc3659@t lc364d@t)) (let ((lc365b@ls/false (lc30ba@syntax-dispatch lc3659@t '(_ (any . #(each+ any () any)) any . each-any)))) (if lc365b@ls/false (apply (lambda (lc365d@who lc365e@fmls lc365f@last lc3660@b lc3661@b*) (if (lc2ebb@valid-bound-ids? (cons lc365f@last lc365e@fmls)) (lc3070@bless (list 'define lc365d@who (list 'make-traced-procedure (list 'quote lc365d@who) (cons 'lambda (cons (append lc365e@fmls lc365f@last) (cons lc3660@b lc3661@b*)))))) (lc3074@invalid-fmls-error lc364b@stx (append lc365e@fmls lc365f@last)))) lc365b@ls/false) (let ((lc3667@t lc3659@t)) (let ((lc3669@ls/false (lc30ba@syntax-dispatch lc3667@t '(_ any any)))) (if lc3669@ls/false (apply (lambda (lc366b@who lc366c@expr) (if (lc2eb3@id? lc366b@who) (lc3070@bless (list 'define lc366b@who (list 'let (list (list 'v lc366c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote lc366b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (lc319a@syntax-violation '#f '"invalid name" lc364b@stx))) lc3669@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3667@t)))))))))))) (set! lc4b72@lc307e@trace-define-macro lc307e@trace-define-macro) (set! lc3080@trace-define-syntax-macro (lambda (lc366f@stx) (let ((lc3671@t lc366f@stx)) (let ((lc3673@ls/false (lc30ba@syntax-dispatch lc3671@t '(_ any any)))) (if lc3673@ls/false (apply (lambda (lc3675@who lc3676@expr) (if (lc2eb3@id? lc3675@who) (lc3070@bless (list 'define-syntax lc3675@who (list 'make-traced-macro (list 'quote lc3675@who) lc3676@expr))) (lc319a@syntax-violation '#f '"invalid name" lc366f@stx))) lc3673@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3671@t)))))) (set! lc4b73@lc3080@trace-define-syntax-macro lc3080@trace-define-syntax-macro) (set! lc3082@trace-let/rec-syntax (lambda (lc3679@who) (lambda (lc367b@stx) (let ((lc367d@t lc367b@stx)) (let ((lc367f@ls/false (lc30ba@syntax-dispatch lc367d@t '(_ #(each (any any)) any . each-any)))) (if lc367f@ls/false (apply (lambda (lc3681@lhs* lc3682@rhs* lc3683@b lc3684@b*) (if (lc2ebb@valid-bound-ids? lc3681@lhs*) (let ((lc3689@rhs* (map (lambda (lc368b@lhs lc368c@rhs) (list 'make-traced-macro (list 'quote lc368b@lhs) lc368c@rhs)) lc3681@lhs* lc3682@rhs*))) (lc3070@bless (cons lc3679@who (cons (map list lc3681@lhs* lc3689@rhs*) (cons lc3683@b lc3684@b*))))) (lc3074@invalid-fmls-error lc367b@stx lc3681@lhs*))) lc367f@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc367d@t))))))) (set! lc4b74@lc3082@trace-let/rec-syntax lc3082@trace-let/rec-syntax) (set! lc3084@trace-let-syntax-macro (lc3082@trace-let/rec-syntax 'let-syntax)) (set! lc4b75@lc3084@trace-let-syntax-macro lc3084@trace-let-syntax-macro) (set! lc3086@trace-letrec-syntax-macro (lc3082@trace-let/rec-syntax 'letrec-syntax)) (set! lc4b76@lc3086@trace-letrec-syntax-macro lc3086@trace-letrec-syntax-macro) (set! lc3088@guard-macro (lambda (lc368f@x) (letrec* ((lc3692@gen-clauses (lambda (lc36a9@con lc36aa@outerk lc36ab@clause*) (letrec* ((lc36b0@f (lambda (lc36e9@x lc36ea@k) (let ((lc36ed@t lc36e9@x)) (let ((lc36ef@ls/false (lc30ba@syntax-dispatch lc36ed@t '(any #(scheme-id =>) any)))) (if lc36ef@ls/false (apply (lambda (lc36f1@e lc36f2@p) (let ((lc36f5@t (gensym))) (list 'let (list (list lc36f5@t lc36f1@e)) (list 'if lc36f5@t (list lc36f2@p lc36f5@t) lc36ea@k)))) lc36ef@ls/false) (let ((lc36f7@t lc36ed@t)) (let ((lc36f9@ls/false (lc30ba@syntax-dispatch lc36f7@t '(any)))) (if lc36f9@ls/false (apply (lambda (lc36fb@e) (let ((lc36fd@t (gensym))) (list 'let (list (list lc36fd@t lc36fb@e)) (list 'if lc36fd@t lc36fd@t lc36ea@k)))) lc36f9@ls/false) (let ((lc36ff@t lc36f7@t)) (let ((lc3701@ls/false (lc30ba@syntax-dispatch lc36ff@t '(any any . each-any)))) (if lc3701@ls/false (apply (lambda (lc3703@e lc3704@v lc3705@v*) (list 'if lc3703@e (cons 'begin (cons lc3704@v lc3705@v*)) lc36ea@k)) lc3701@ls/false) (let ((lc3709@t lc36ff@t)) (let ((lc370b@ls/false (lc30ba@syntax-dispatch lc3709@t '_))) (if lc370b@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid guard clause" lc36e9@x)) lc370b@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3709@t))))))))))))))) (lc36b2@f* (lambda (lc36bf@x*) (let ((lc36c1@t lc36bf@x*)) (let ((lc36c3@ls/false (lc30ba@syntax-dispatch lc36c1@t '()))) (if lc36c3@ls/false (apply (lambda () (let ((lc36c5@g (gensym))) (values (list lc36c5@g (list 'lambda '() (list 'raise-continuable lc36a9@con))) lc36c5@g))) lc36c3@ls/false) (let ((lc36c7@t lc36c1@t)) (let ((lc36c9@ls/false (lc30ba@syntax-dispatch lc36c7@t '((#(scheme-id else) any . each-any))))) (if lc36c9@ls/false (apply (lambda (lc36cb@e lc36cc@e*) (values (cons 'begin (cons lc36cb@e lc36cc@e*)) '#f)) lc36c9@ls/false) (let ((lc36cf@t lc36c7@t)) (let ((lc36d1@ls/false (lc30ba@syntax-dispatch lc36cf@t '(any . any)))) (if lc36d1@ls/false (apply (lambda (lc36d3@cls lc36d4@cls*) (call-with-values (lambda () (lc36b2@f* lc36d4@cls*)) (lambda (lc36db@lc36d8 lc36dc@lc36da) (let ((lc36df@g lc36dc@lc36da) (lc36e0@e lc36db@lc36d8)) (values (lc36b0@f lc36d3@cls lc36e0@e) lc36df@g))))) lc36d1@ls/false) (let ((lc36e3@t lc36cf@t)) (let ((lc36e5@ls/false (lc30ba@syntax-dispatch lc36e3@t 'any))) (if lc36e5@ls/false (apply (lambda (lc36e7@others) (lc319a@syntax-violation '#f '"invalid guard clause" lc36e7@others)) lc36e5@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc36e3@t)))))))))))))))) (call-with-values (lambda () (lc36b2@f* lc36ab@clause*)) (lambda (lc36b7@lc36b4 lc36b8@lc36b6) (let ((lc36bb@raisek lc36b8@lc36b6) (lc36bc@code lc36b7@lc36b4)) (if lc36bb@raisek (list (list 'call/cc (list 'lambda (list lc36bb@raisek) (list lc36aa@outerk (list 'lambda '() lc36bc@code))))) (list lc36aa@outerk (list 'lambda '() lc36bc@code)))))))))) (let ((lc3693@t lc368f@x)) (let ((lc3695@ls/false (lc30ba@syntax-dispatch lc3693@t '(_ (any . each-any) any . each-any)))) (if (and lc3695@ls/false (apply (lambda (lc3697@con lc3698@clause* lc3699@b lc369a@b*) (lc2eb3@id? lc3697@con)) lc3695@ls/false)) (apply (lambda (lc369f@con lc36a0@clause* lc36a1@b lc36a2@b*) (let ((lc36a7@outerk (gensym))) (lc3070@bless (list (list 'call/cc (list 'lambda (list lc36a7@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list lc369f@con) (lc3692@gen-clauses lc369f@con lc36a7@outerk lc36a0@clause*)) (cons 'lambda (cons '() (cons lc36a1@b lc36a2@b*))))))))))) lc3695@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3693@t))))))) (set! lc4b77@lc3088@guard-macro lc3088@guard-macro) (set! lc308a@define-enumeration-macro (lambda (lc370d@stx) (letrec* ((lc3710@set? (lambda (lc3729@x) (or (null? lc3729@x) (and (not (memq (car lc3729@x) (cdr lc3729@x))) (lc3710@set? (cdr lc3729@x)))))) (lc3712@remove-dups (lambda (lc3727@ls) (if (null? lc3727@ls) '() (cons (car lc3727@ls) (lc3712@remove-dups (remq (car lc3727@ls) (cdr lc3727@ls)))))))) (let ((lc3713@t lc370d@stx)) (let ((lc3715@ls/false (lc30ba@syntax-dispatch lc3713@t '(_ any each-any any)))) (if (and lc3715@ls/false (apply (lambda (lc3717@name lc3718@id* lc3719@maker) (and (lc2eb3@id? lc3717@name) (lc2eb3@id? lc3719@maker) (for-all lc2eb3@id? lc3718@id*))) lc3715@ls/false)) (apply (lambda (lc371d@name lc371e@id* lc371f@maker) (let ((lc3723@name* (lc3712@remove-dups (lc31a0@syntax->datum lc371e@id*))) (lc3724@mk (gensym))) (lc3070@bless (list 'begin (list 'define lc3724@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote lc3723@name*)))) (list 'define-syntax lc371d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote lc3723@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote lc371d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax lc371f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote lc371f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote lc3723@name*)) (cons 'syntax-violation (cons (list 'quote lc371f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons lc3724@mk '('(n* ...))))))))))))) lc3715@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3713@t))))))) (set! lc4b78@lc308a@define-enumeration-macro lc308a@define-enumeration-macro) (set! lc308c@time-macro (lambda (lc372b@stx) (let ((lc372d@t lc372b@stx)) (let ((lc372f@ls/false (lc30ba@syntax-dispatch lc372d@t '(_ any)))) (if lc372f@ls/false (apply (lambda (lc3731@expr) (lc3070@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() lc3731@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) lc372f@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc372d@t)))))) (set! lc4b79@lc308c@time-macro lc308c@time-macro) (set! lc308e@delay-macro (lambda (lc3733@stx) (let ((lc3735@t lc3733@stx)) (let ((lc3737@ls/false (lc30ba@syntax-dispatch lc3735@t '(_ any)))) (if lc3737@ls/false (apply (lambda (lc3739@expr) (lc3070@bless (list 'make-promise (list 'lambda '() lc3739@expr)))) lc3737@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3735@t)))))) (set! lc4b7a@lc308e@delay-macro lc308e@delay-macro) (set! lc3090@assert-macro (lambda (lc373b@stx) (let ((lc373d@t lc373b@stx)) (let ((lc373f@ls/false (lc30ba@syntax-dispatch lc373d@t '(_ any)))) (if lc373f@ls/false (apply (lambda (lc3741@expr) (let ((lc3743@pos (or (lc3192@expression-position lc373b@stx) (lc3192@expression-position lc3741@expr)))) (lc3070@bless (list 'let (list (list 'x lc3741@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote lc3741@expr) (list 'quote lc3743@pos))))))) lc373f@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc373d@t)))))) (set! lc4b7b@lc3090@assert-macro lc3090@assert-macro) (set! lc3092@endianness-macro (lambda (lc3745@stx) (let ((lc3747@t lc3745@stx)) (let ((lc3749@ls/false (lc30ba@syntax-dispatch lc3747@t '(_ any)))) (if lc3749@ls/false (apply (lambda (lc374b@e) (let ((lc374d@t (lc31a0@syntax->datum lc374b@e))) (if (memv lc374d@t '(little)) (lc3070@bless ''little) (if (memv lc374d@t '(big)) (lc3070@bless ''big) (lc319a@syntax-violation '#f '"endianness must be big or little" lc3745@stx))))) lc3749@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3747@t)))))) (set! lc4b7c@lc3092@endianness-macro lc3092@endianness-macro) (set! lc3094@identifier-syntax-macro (lambda (lc374f@stx) (let ((lc3751@t lc374f@stx)) (let ((lc3753@ls/false (lc30ba@syntax-dispatch lc3751@t '(_ any)))) (if lc3753@ls/false (apply (lambda (lc3755@expr) (lc3070@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax lc3755@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax lc3755@expr) '((syntax (e* ...)))))))))) lc3753@ls/false) (let ((lc3757@t lc3751@t)) (let ((lc3759@ls/false (lc30ba@syntax-dispatch lc3757@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and lc3759@ls/false (apply (lambda (lc375b@id1 lc375c@expr1 lc375d@id2 lc375e@expr2 lc375f@expr3) (and (lc2eb3@id? lc375b@id1) (lc2eb3@id? lc375d@id2) (lc2eb3@id? lc375e@expr2))) lc3759@ls/false)) (apply (lambda (lc3765@id1 lc3766@expr1 lc3767@id2 lc3768@expr2 lc3769@expr3) (lc3070@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax lc3766@expr1)) (list (list 'set! 'id lc3768@expr2) (list 'syntax lc3769@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons lc3766@expr1 '(e* ...))))))))) lc3759@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3757@t))))))))) (set! lc4b7d@lc3094@identifier-syntax-macro lc3094@identifier-syntax-macro) (set! lc3096@do-macro (lambda (lc376f@stx) (letrec* ((lc3772@bind (lambda (lc3789@x) (let ((lc378b@t lc3789@x)) (let ((lc378d@ls/false (lc30ba@syntax-dispatch lc378b@t '(any any)))) (if lc378d@ls/false (apply (lambda (lc378f@x lc3790@init) (list lc378f@x lc3790@init lc378f@x)) lc378d@ls/false) (let ((lc3793@t lc378b@t)) (let ((lc3795@ls/false (lc30ba@syntax-dispatch lc3793@t '(any any any)))) (if lc3795@ls/false (apply (lambda (lc3797@x lc3798@init lc3799@step) (list lc3797@x lc3798@init lc3799@step)) lc3795@ls/false) (let ((lc379d@t lc3793@t)) (let ((lc379f@ls/false (lc30ba@syntax-dispatch lc379d@t '_))) (if lc379f@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid binding" lc376f@stx)) lc379f@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc379d@t))))))))))))) (let ((lc3773@t lc376f@stx)) (let ((lc3775@ls/false (lc30ba@syntax-dispatch lc3773@t '(_ each-any (any . each-any) . each-any)))) (if lc3775@ls/false (apply (lambda (lc3777@binding* lc3778@test lc3779@expr* lc377a@command*) (let ((lc377f@t (map lc3772@bind lc3777@binding*))) (let ((lc3781@ls/false (lc30ba@syntax-dispatch lc377f@t '#(each (any any any))))) (if lc3781@ls/false (apply (lambda (lc3783@x* lc3784@init* lc3785@step*) (if (lc2ebb@valid-bound-ids? lc3783@x*) (lc3070@bless (list 'letrec (list (list 'loop (list 'lambda lc3783@x* (list 'if lc3778@test (cons 'begin (cons '(if #f #f) lc3779@expr*)) (cons 'begin (append lc377a@command* (list (cons 'loop lc3785@step*)))))))) (cons 'loop lc3784@init*))) (lc319a@syntax-violation '#f '"invalid bindings" lc376f@stx))) lc3781@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc377f@t))))) lc3775@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3773@t))))))) (set! lc4b7e@lc3096@do-macro lc3096@do-macro) (set! lc3098@let*-macro (lambda (lc37a1@stx) (let ((lc37a3@t lc37a1@stx)) (let ((lc37a5@ls/false (lc30ba@syntax-dispatch lc37a3@t '(_ #(each (any any)) any . each-any)))) (if (and lc37a5@ls/false (apply (lambda (lc37a7@lhs* lc37a8@rhs* lc37a9@b lc37aa@b*) (for-all lc2eb3@id? lc37a7@lhs*)) lc37a5@ls/false)) (apply (lambda (lc37af@lhs* lc37b0@rhs* lc37b1@b lc37b2@b*) (lc3070@bless (let lc37b9@f ((lc37b7@x* (map list lc37af@lhs* lc37b0@rhs*))) (if (null? lc37b7@x*) (cons 'let (cons '() (cons lc37b1@b lc37b2@b*))) (list 'let (list (car lc37b7@x*)) (lc37b9@f (cdr lc37b7@x*))))))) lc37a5@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc37a3@t)))))) (set! lc4b7f@lc3098@let*-macro lc3098@let*-macro) (set! lc309a@or-macro (lambda (lc37bb@stx) (let ((lc37bd@t lc37bb@stx)) (let ((lc37bf@ls/false (lc30ba@syntax-dispatch lc37bd@t '(_)))) (if lc37bf@ls/false (apply (lambda () '#f) lc37bf@ls/false) (let ((lc37c1@t lc37bd@t)) (let ((lc37c3@ls/false (lc30ba@syntax-dispatch lc37c1@t '(_ any . each-any)))) (if lc37c3@ls/false (apply (lambda (lc37c5@e lc37c6@e*) (lc3070@bless (let lc37cd@f ((lc37c9@e lc37c5@e) (lc37ca@e* lc37c6@e*)) (if (null? lc37ca@e*) (list 'begin '#f lc37c9@e) (list 'let (list (list 't lc37c9@e)) (list 'if 't 't (lc37cd@f (car lc37ca@e*) (cdr lc37ca@e*)))))))) lc37c3@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc37c1@t))))))))) (set! lc4b80@lc309a@or-macro lc309a@or-macro) (set! lc309c@and-macro (lambda (lc37cf@stx) (let ((lc37d1@t lc37cf@stx)) (let ((lc37d3@ls/false (lc30ba@syntax-dispatch lc37d1@t '(_)))) (if lc37d3@ls/false (apply (lambda () '#t) lc37d3@ls/false) (let ((lc37d5@t lc37d1@t)) (let ((lc37d7@ls/false (lc30ba@syntax-dispatch lc37d5@t '(_ any . each-any)))) (if lc37d7@ls/false (apply (lambda (lc37d9@e lc37da@e*) (lc3070@bless (let lc37e1@f ((lc37dd@e lc37d9@e) (lc37de@e* lc37da@e*)) (if (null? lc37de@e*) (list 'begin '#f lc37dd@e) (cons 'if (cons lc37dd@e (cons (lc37e1@f (car lc37de@e*) (cdr lc37de@e*)) '(#f)))))))) lc37d7@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc37d5@t))))))))) (set! lc4b81@lc309c@and-macro lc309c@and-macro) (set! lc309e@cond-macro (lambda (lc37e3@stx) (let ((lc37e5@t lc37e3@stx)) (let ((lc37e7@ls/false (lc30ba@syntax-dispatch lc37e5@t '(_ any . each-any)))) (if lc37e7@ls/false (apply (lambda (lc37e9@cls lc37ea@cls*) (lc3070@bless (let lc37f1@f ((lc37ed@cls lc37e9@cls) (lc37ee@cls* lc37ea@cls*)) (if (null? lc37ee@cls*) (let ((lc37f3@t lc37ed@cls)) (let ((lc37f5@ls/false (lc30ba@syntax-dispatch lc37f3@t '(#(scheme-id else) any . each-any)))) (if lc37f5@ls/false (apply (lambda (lc37f7@e lc37f8@e*) (cons 'begin (cons lc37f7@e lc37f8@e*))) lc37f5@ls/false) (let ((lc37fb@t lc37f3@t)) (let ((lc37fd@ls/false (lc30ba@syntax-dispatch lc37fb@t '(any #(scheme-id =>) any)))) (if lc37fd@ls/false (apply (lambda (lc37ff@e lc3800@p) (list 'let (list (list 't lc37ff@e)) (list 'if 't (cons lc3800@p '(t))))) lc37fd@ls/false) (let ((lc3803@t lc37fb@t)) (let ((lc3805@ls/false (lc30ba@syntax-dispatch lc3803@t '(any)))) (if lc3805@ls/false (apply (lambda (lc3807@e) (cons 'or (cons lc3807@e '((if #f #f))))) lc3805@ls/false) (let ((lc3809@t lc3803@t)) (let ((lc380b@ls/false (lc30ba@syntax-dispatch lc3809@t '(any . each-any)))) (if lc380b@ls/false (apply (lambda (lc380d@e lc380e@e*) (list 'if lc380d@e (cons 'begin lc380e@e*))) lc380b@ls/false) (let ((lc3811@t lc3809@t)) (let ((lc3813@ls/false (lc30ba@syntax-dispatch lc3811@t '_))) (if lc3813@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid last clause" lc37e3@stx)) lc3813@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3811@t)))))))))))))))) (let ((lc3815@t lc37ed@cls)) (let ((lc3817@ls/false (lc30ba@syntax-dispatch lc3815@t '(#(scheme-id else) any . each-any)))) (if lc3817@ls/false (apply (lambda (lc3819@e lc381a@e*) (lc319a@syntax-violation '#f '"incorrect position of keyword else" lc37e3@stx)) lc3817@ls/false) (let ((lc381d@t lc3815@t)) (let ((lc381f@ls/false (lc30ba@syntax-dispatch lc381d@t '(any #(scheme-id =>) any)))) (if lc381f@ls/false (apply (lambda (lc3821@e lc3822@p) (list 'let (list (list 't lc3821@e)) (list 'if 't (cons lc3822@p '(t)) (lc37f1@f (car lc37ee@cls*) (cdr lc37ee@cls*))))) lc381f@ls/false) (let ((lc3825@t lc381d@t)) (let ((lc3827@ls/false (lc30ba@syntax-dispatch lc3825@t '(any)))) (if lc3827@ls/false (apply (lambda (lc3829@e) (list 'or lc3829@e (lc37f1@f (car lc37ee@cls*) (cdr lc37ee@cls*)))) lc3827@ls/false) (let ((lc382b@t lc3825@t)) (let ((lc382d@ls/false (lc30ba@syntax-dispatch lc382b@t '(any . each-any)))) (if lc382d@ls/false (apply (lambda (lc382f@e lc3830@e*) (list 'if lc382f@e (cons 'begin lc3830@e*) (lc37f1@f (car lc37ee@cls*) (cdr lc37ee@cls*)))) lc382d@ls/false) (let ((lc3833@t lc382b@t)) (let ((lc3835@ls/false (lc30ba@syntax-dispatch lc3833@t '_))) (if lc3835@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid last clause" lc37e3@stx)) lc3835@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3833@t)))))))))))))))))))) lc37e7@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc37e5@t)))))) (set! lc4b82@lc309e@cond-macro lc309e@cond-macro) (set! lc30a0@do-include (lambda (lc3837@stx lc3838@id lc3839@filename) (let ((lc383d@filename (lc2ec7@stx->datum lc3839@filename))) (begin (if (not (and (string? lc383d@filename) (lc2eb3@id? lc3838@id))) (lc319a@syntax-violation '#f '"invalid syntax" lc3837@stx) (void)) (cons (lc3070@bless 'begin) (with-input-from-file lc383d@filename (lambda () (let lc3841@f ((lc383f@ls '())) (let ((lc3843@x (lc29f5@lc28c5@read-annotated))) (if (eof-object? lc3843@x) (reverse lc383f@ls) (lc3841@f (cons (lc2e93@datum->stx lc3838@id lc3843@x) lc383f@ls)))))))))))) (set! lc4b83@lc30a0@do-include lc30a0@do-include) (set! lc30a2@include-macro (lambda (lc3845@e) (let ((lc3847@t lc3845@e)) (let ((lc3849@ls/false (lc30ba@syntax-dispatch lc3847@t '(any any)))) (if lc3849@ls/false (apply (lambda (lc384b@id lc384c@filename) (lc30a0@do-include lc3845@e lc384b@id lc384c@filename)) lc3849@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3847@t)))))) (set! lc4b84@lc30a2@include-macro lc30a2@include-macro) (set! lc30a4@include-into-macro (lambda (lc384f@e) (let ((lc3851@t lc384f@e)) (let ((lc3853@ls/false (lc30ba@syntax-dispatch lc3851@t '(_ any any)))) (if lc3853@ls/false (apply (lambda (lc3855@id lc3856@filename) (lc30a0@do-include lc384f@e lc3855@id lc3856@filename)) lc3853@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3851@t)))))) (set! lc4b85@lc30a4@include-into-macro lc30a4@include-into-macro) (set! lc30a6@syntax-rules-macro (lambda (lc3859@e) (let ((lc385b@t lc3859@e)) (let ((lc385d@ls/false (lc30ba@syntax-dispatch lc385b@t '(_ each-any . #(each (any any)))))) (if lc385d@ls/false (apply (lambda (lc385f@lits lc3860@pat* lc3861@tmp*) (begin (lc30c0@verify-literals lc385f@lits lc3859@e) (lc3070@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons lc385f@lits (map (lambda (lc3865@pat lc3866@tmp) (let ((lc3869@t lc3865@pat)) (let ((lc386b@ls/false (lc30ba@syntax-dispatch lc3869@t '(_ . any)))) (if lc386b@ls/false (apply (lambda (lc386d@rest) (list (cons 'g lc386d@rest) (list 'syntax lc3866@tmp))) lc386b@ls/false) (let ((lc386f@t lc3869@t)) (let ((lc3871@ls/false (lc30ba@syntax-dispatch lc386f@t '_))) (if lc3871@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid syntax-rules pattern" lc3859@e lc3865@pat)) lc3871@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc386f@t)))))))) lc3860@pat* lc3861@tmp*)))))))) lc385d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc385b@t)))))) (set! lc4b86@lc30a6@syntax-rules-macro lc30a6@syntax-rules-macro) (set! lc30a8@quasiquote-macro (letrec* ((lc3874@datum (lambda (lc3975@x) (list (lc3042@scheme-stx 'quote) (lc2e9b@mkstx lc3975@x '() '() '())))) (lc3890@quasicons* (lambda (lc396d@x lc396e@y) (let lc3973@f ((lc3971@x lc396d@x)) (if (null? lc3971@x) lc396e@y (lc3892@quasicons (car lc3971@x) (lc3973@f (cdr lc3971@x))))))) (lc3892@quasicons (lambda (lc3947@x lc3948@y) (let ((lc394b@t lc3948@y)) (let ((lc394d@ls/false (lc30ba@syntax-dispatch lc394b@t '(#(scheme-id quote) any)))) (if lc394d@ls/false (apply (lambda (lc394f@dy) (let ((lc3951@t lc3947@x)) (let ((lc3953@ls/false (lc30ba@syntax-dispatch lc3951@t '(#(scheme-id quote) any)))) (if lc3953@ls/false (apply (lambda (lc3955@dx) (list (lc3042@scheme-stx 'quote) (cons lc3955@dx lc394f@dy))) lc3953@ls/false) (let ((lc3957@t lc3951@t)) (let ((lc3959@ls/false (lc30ba@syntax-dispatch lc3957@t '_))) (if lc3959@ls/false (apply (lambda () (let ((lc395b@t lc394f@dy)) (let ((lc395d@ls/false (lc30ba@syntax-dispatch lc395b@t '()))) (if lc395d@ls/false (apply (lambda () (list (lc3042@scheme-stx 'list) lc3947@x)) lc395d@ls/false) (let ((lc395f@t lc395b@t)) (let ((lc3961@ls/false (lc30ba@syntax-dispatch lc395f@t '_))) (if lc3961@ls/false (apply (lambda () (list (lc3042@scheme-stx 'cons) lc3947@x lc3948@y)) lc3961@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc395f@t)))))))) lc3959@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3957@t)))))))) lc394d@ls/false) (let ((lc3963@t lc394b@t)) (let ((lc3965@ls/false (lc30ba@syntax-dispatch lc3963@t '(#(scheme-id list) . each-any)))) (if lc3965@ls/false (apply (lambda (lc3967@stuff) (cons* (lc3042@scheme-stx 'list) lc3947@x lc3967@stuff)) lc3965@ls/false) (let ((lc3969@t lc3963@t)) (let ((lc396b@ls/false (lc30ba@syntax-dispatch lc3969@t '_))) (if lc396b@ls/false (apply (lambda () (list (lc3042@scheme-stx 'cons) lc3947@x lc3948@y)) lc396b@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3969@t)))))))))))) (lc3894@quasiappend (lambda (lc392d@x lc392e@y) (let ((lc3931@ls (let lc3935@f ((lc3933@x lc392d@x)) (if (null? lc3933@x) (let ((lc3937@t lc392e@y)) (let ((lc3939@ls/false (lc30ba@syntax-dispatch lc3937@t '(#(scheme-id quote) ())))) (if lc3939@ls/false (apply (lambda () '()) lc3939@ls/false) (let ((lc393b@t lc3937@t)) (let ((lc393d@ls/false (lc30ba@syntax-dispatch lc393b@t '_))) (if lc393d@ls/false (apply (lambda () (list lc392e@y)) lc393d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc393b@t))))))) (let ((lc393f@t (car lc3933@x))) (let ((lc3941@ls/false (lc30ba@syntax-dispatch lc393f@t '(#(scheme-id quote) ())))) (if lc3941@ls/false (apply (lambda () (lc3935@f (cdr lc3933@x))) lc3941@ls/false) (let ((lc3943@t lc393f@t)) (let ((lc3945@ls/false (lc30ba@syntax-dispatch lc3943@t '_))) (if lc3945@ls/false (apply (lambda () (cons (car lc3933@x) (lc3935@f (cdr lc3933@x)))) lc3945@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3943@t))))))))))) (if (null? lc3931@ls) (list (lc3042@scheme-stx 'quote) '()) (if (null? (cdr lc3931@ls)) (car lc3931@ls) (cons* (lc3042@scheme-stx 'append) lc3931@ls)))))) (lc3896@quasivector (lambda (lc38fb@x) (let ((lc38fd@pat-x lc38fb@x)) (let ((lc38ff@t lc38fd@pat-x)) (let ((lc3901@ls/false (lc30ba@syntax-dispatch lc38ff@t '(#(scheme-id quote) each-any)))) (if lc3901@ls/false (apply (lambda (lc3903@x*) (list (lc3042@scheme-stx 'quote) (list->vector lc3903@x*))) lc3901@ls/false) (let ((lc3905@t lc38ff@t)) (let ((lc3907@ls/false (lc30ba@syntax-dispatch lc3905@t '_))) (if lc3907@ls/false (apply (lambda () (let lc390f@f ((lc3909@x lc38fb@x) (lc390a@k (lambda (lc390d@ls) (cons* (lc3042@scheme-stx 'vector) lc390d@ls)))) (let ((lc3911@t lc3909@x)) (let ((lc3913@ls/false (lc30ba@syntax-dispatch lc3911@t '(#(scheme-id quote) each-any)))) (if lc3913@ls/false (apply (lambda (lc3915@x*) (lc390a@k (map (lambda (lc3917@x) (list (lc3042@scheme-stx 'quote) lc3917@x)) lc3915@x*))) lc3913@ls/false) (let ((lc3919@t lc3911@t)) (let ((lc391b@ls/false (lc30ba@syntax-dispatch lc3919@t '(#(scheme-id list) . each-any)))) (if lc391b@ls/false (apply (lambda (lc391d@x*) (lc390a@k lc391d@x*)) lc391b@ls/false) (let ((lc391f@t lc3919@t)) (let ((lc3921@ls/false (lc30ba@syntax-dispatch lc391f@t '(#(scheme-id cons) any any)))) (if lc3921@ls/false (apply (lambda (lc3923@x lc3924@y) (lc390f@f lc3924@y (lambda (lc3927@ls) (lc390a@k (cons lc3923@x lc3927@ls))))) lc3921@ls/false) (let ((lc3929@t lc391f@t)) (let ((lc392b@ls/false (lc30ba@syntax-dispatch lc3929@t '_))) (if lc392b@ls/false (apply (lambda () (list (lc3042@scheme-stx 'list->vector) lc38fd@pat-x)) lc392b@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3929@t))))))))))))))) lc3907@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3905@t)))))))))) (lc3898@vquasi (lambda (lc38d9@p lc38da@lev) (let ((lc38dd@t lc38d9@p)) (let ((lc38df@ls/false (lc30ba@syntax-dispatch lc38dd@t '(any . any)))) (if lc38df@ls/false (apply (lambda (lc38e1@p lc38e2@q) (let ((lc38e5@t lc38e1@p)) (let ((lc38e7@ls/false (lc30ba@syntax-dispatch lc38e5@t '(#(scheme-id unquote) . each-any)))) (if lc38e7@ls/false (apply (lambda (lc38e9@p) (if (= lc38da@lev '0) (lc3890@quasicons* lc38e9@p (lc3898@vquasi lc38e2@q lc38da@lev)) (lc3892@quasicons (lc3892@quasicons (lc3874@datum 'unquote) (lc389a@quasi lc38e9@p (- lc38da@lev '1))) (lc3898@vquasi lc38e2@q lc38da@lev)))) lc38e7@ls/false) (let ((lc38eb@t lc38e5@t)) (let ((lc38ed@ls/false (lc30ba@syntax-dispatch lc38eb@t '(#(scheme-id unquote-splicing) . each-any)))) (if lc38ed@ls/false (apply (lambda (lc38ef@p) (if (= lc38da@lev '0) (lc3894@quasiappend lc38ef@p (lc3898@vquasi lc38e2@q lc38da@lev)) (lc3892@quasicons (lc3892@quasicons (lc3874@datum 'unquote-splicing) (lc389a@quasi lc38ef@p (- lc38da@lev '1))) (lc3898@vquasi lc38e2@q lc38da@lev)))) lc38ed@ls/false) (let ((lc38f1@t lc38eb@t)) (let ((lc38f3@ls/false (lc30ba@syntax-dispatch lc38f1@t 'any))) (if lc38f3@ls/false (apply (lambda (lc38f5@p) (lc3892@quasicons (lc389a@quasi lc38f5@p lc38da@lev) (lc3898@vquasi lc38e2@q lc38da@lev))) lc38f3@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc38f1@t))))))))))) lc38df@ls/false) (let ((lc38f7@t lc38dd@t)) (let ((lc38f9@ls/false (lc30ba@syntax-dispatch lc38f7@t '()))) (if lc38f9@ls/false (apply (lambda () (list (lc3042@scheme-stx 'quote) '())) lc38f9@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc38f7@t))))))))) (lc389a@quasi (lambda (lc38a3@p lc38a4@lev) (let ((lc38a7@t lc38a3@p)) (let ((lc38a9@ls/false (lc30ba@syntax-dispatch lc38a7@t '(#(scheme-id unquote) any)))) (if lc38a9@ls/false (apply (lambda (lc38ab@p) (if (= lc38a4@lev '0) lc38ab@p (lc3892@quasicons (lc3874@datum 'unquote) (lc389a@quasi (list lc38ab@p) (- lc38a4@lev '1))))) lc38a9@ls/false) (let ((lc38ad@t lc38a7@t)) (let ((lc38af@ls/false (lc30ba@syntax-dispatch lc38ad@t '((#(scheme-id unquote) . each-any) . any)))) (if lc38af@ls/false (apply (lambda (lc38b1@p lc38b2@q) (if (= lc38a4@lev '0) (lc3890@quasicons* lc38b1@p (lc389a@quasi lc38b2@q lc38a4@lev)) (lc3892@quasicons (lc3892@quasicons (lc3874@datum 'unquote) (lc389a@quasi lc38b1@p (- lc38a4@lev '1))) (lc389a@quasi lc38b2@q lc38a4@lev)))) lc38af@ls/false) (let ((lc38b5@t lc38ad@t)) (let ((lc38b7@ls/false (lc30ba@syntax-dispatch lc38b5@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if lc38b7@ls/false (apply (lambda (lc38b9@p lc38ba@q) (if (= lc38a4@lev '0) (lc3894@quasiappend lc38b9@p (lc389a@quasi lc38ba@q lc38a4@lev)) (lc3892@quasicons (lc3892@quasicons (lc3874@datum 'unquote-splicing) (lc389a@quasi lc38b9@p (- lc38a4@lev '1))) (lc389a@quasi lc38ba@q lc38a4@lev)))) lc38b7@ls/false) (let ((lc38bd@t lc38b5@t)) (let ((lc38bf@ls/false (lc30ba@syntax-dispatch lc38bd@t '(#(scheme-id quasiquote) any)))) (if lc38bf@ls/false (apply (lambda (lc38c1@p) (lc3892@quasicons (lc3874@datum 'quasiquote) (lc389a@quasi (list lc38c1@p) (+ lc38a4@lev '1)))) lc38bf@ls/false) (let ((lc38c3@t lc38bd@t)) (let ((lc38c5@ls/false (lc30ba@syntax-dispatch lc38c3@t '(any . any)))) (if lc38c5@ls/false (apply (lambda (lc38c7@p lc38c8@q) (lc3892@quasicons (lc389a@quasi lc38c7@p lc38a4@lev) (lc389a@quasi lc38c8@q lc38a4@lev))) lc38c5@ls/false) (let ((lc38cb@t lc38c3@t)) (let ((lc38cd@ls/false (lc30ba@syntax-dispatch lc38cb@t '#(vector each-any)))) (if (and lc38cd@ls/false (apply (lambda (lc38cf@x) (not (lc2e7f@stx? lc38cf@x))) lc38cd@ls/false)) (apply (lambda (lc38d1@x) (lc3896@quasivector (lc3898@vquasi lc38d1@x lc38a4@lev))) lc38cd@ls/false) (let ((lc38d3@t lc38cb@t)) (let ((lc38d5@ls/false (lc30ba@syntax-dispatch lc38d3@t 'any))) (if lc38d5@ls/false (apply (lambda (lc38d7@p) (list (lc3042@scheme-stx 'quote) lc38d7@p)) lc38d5@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc38d3@t))))))))))))))))))))))))) (lambda (lc389b@x) (let ((lc389d@t lc389b@x)) (let ((lc389f@ls/false (lc30ba@syntax-dispatch lc389d@t '(_ any)))) (if lc389f@ls/false (apply (lambda (lc38a1@e) (lc389a@quasi lc38a1@e '0)) lc389f@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc389d@t))))))) (set! lc4b87@lc30a8@quasiquote-macro lc30a8@quasiquote-macro) (set! lc30aa@quasisyntax-macro (letrec* ((lc3978@quasi (lambda (lc3993@p lc3994@lev) (let ((lc3997@t lc3993@p)) (let ((lc3999@ls/false (lc30ba@syntax-dispatch lc3997@t '(#(scheme-id unsyntax) any)))) (if lc3999@ls/false (apply (lambda (lc399b@p) (if (= lc3994@lev '0) (let ((lc399d@g (gensym))) (values (list lc399d@g) (list lc399b@p) lc399d@g)) (call-with-values (lambda () (lc3978@quasi lc399b@p (- lc3994@lev '1))) (lambda (lc39a5@lc39a0 lc39a6@lc39a2 lc39a7@lc39a4) (let ((lc39ab@p lc39a7@lc39a4) (lc39ac@rhs* lc39a6@lc39a2) (lc39ad@lhs* lc39a5@lc39a0)) (values lc39ad@lhs* lc39ac@rhs* (list 'unsyntax lc39ab@p))))))) lc3999@ls/false) (let ((lc39b1@t lc3997@t)) (let ((lc39b3@ls/false (lc30ba@syntax-dispatch lc39b1@t '#(scheme-id unsyntax)))) (if (and lc39b3@ls/false (apply (lambda () (= lc3994@lev '0)) lc39b3@ls/false)) (apply (lambda () (lc319a@syntax-violation '#f '"incorrect use of unsyntax" lc3993@p)) lc39b3@ls/false) (let ((lc39b5@t lc39b1@t)) (let ((lc39b7@ls/false (lc30ba@syntax-dispatch lc39b5@t '((#(scheme-id unsyntax) . each-any) . any)))) (if lc39b7@ls/false (apply (lambda (lc39b9@p* lc39ba@q) (call-with-values (lambda () (lc3978@quasi lc39ba@q lc3994@lev)) (lambda (lc39c3@lc39be lc39c4@lc39c0 lc39c5@lc39c2) (let ((lc39c9@q lc39c5@lc39c2) (lc39ca@rhs* lc39c4@lc39c0) (lc39cb@lhs* lc39c3@lc39be)) (if (= lc3994@lev '0) (let ((lc39cf@g* (map (lambda (lc39d1@x) (gensym)) lc39b9@p*))) (values (append lc39cf@g* lc39cb@lhs*) (append lc39b9@p* lc39ca@rhs*) (append lc39cf@g* lc39c9@q))) (call-with-values (lambda () (lc3978@quasi lc39b9@p* (- lc3994@lev '1))) (lambda (lc39d9@lc39d4 lc39da@lc39d6 lc39db@lc39d8) (let ((lc39df@p* lc39db@lc39d8) (lc39e0@rhs2* lc39da@lc39d6) (lc39e1@lhs2* lc39d9@lc39d4)) (values (append lc39e1@lhs2* lc39cb@lhs*) (append lc39e0@rhs2* lc39ca@rhs*) (cons (cons 'unsyntax lc39df@p*) lc39c9@q)))))))))) lc39b7@ls/false) (let ((lc39e5@t lc39b5@t)) (let ((lc39e7@ls/false (lc30ba@syntax-dispatch lc39e5@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if lc39e7@ls/false (apply (lambda (lc39e9@p* lc39ea@q) (call-with-values (lambda () (lc3978@quasi lc39ea@q lc3994@lev)) (lambda (lc39f3@lc39ee lc39f4@lc39f0 lc39f5@lc39f2) (let ((lc39f9@q lc39f5@lc39f2) (lc39fa@rhs* lc39f4@lc39f0) (lc39fb@lhs* lc39f3@lc39ee)) (if (= lc3994@lev '0) (let ((lc39ff@g* (map (lambda (lc3a01@x) (gensym)) lc39e9@p*))) (values (append (map (lambda (lc3a03@g) (cons lc3a03@g '(...))) lc39ff@g*) lc39fb@lhs*) (append lc39e9@p* lc39fa@rhs*) (append (apply append (map (lambda (lc3a05@g) (cons lc3a05@g '(...))) lc39ff@g*)) lc39f9@q))) (call-with-values (lambda () (lc3978@quasi lc39e9@p* (- lc3994@lev '1))) (lambda (lc3a0d@lc3a08 lc3a0e@lc3a0a lc3a0f@lc3a0c) (let ((lc3a13@p* lc3a0f@lc3a0c) (lc3a14@rhs2* lc3a0e@lc3a0a) (lc3a15@lhs2* lc3a0d@lc3a08)) (values (append lc3a15@lhs2* lc39fb@lhs*) (append lc3a14@rhs2* lc39fa@rhs*) (cons (cons 'unsyntax-splicing lc3a13@p*) lc39f9@q)))))))))) lc39e7@ls/false) (let ((lc3a19@t lc39e5@t)) (let ((lc3a1b@ls/false (lc30ba@syntax-dispatch lc3a19@t '#(scheme-id unsyntax-splicing)))) (if (and lc3a1b@ls/false (apply (lambda () (= lc3994@lev '0)) lc3a1b@ls/false)) (apply (lambda () (lc319a@syntax-violation '#f '"incorrect use of unsyntax-splicing" lc3993@p)) lc3a1b@ls/false) (let ((lc3a1d@t lc3a19@t)) (let ((lc3a1f@ls/false (lc30ba@syntax-dispatch lc3a1d@t '(#(scheme-id quasisyntax) any)))) (if lc3a1f@ls/false (apply (lambda (lc3a21@p) (call-with-values (lambda () (lc3978@quasi lc3a21@p (+ lc3994@lev '1))) (lambda (lc3a29@lc3a24 lc3a2a@lc3a26 lc3a2b@lc3a28) (let ((lc3a2f@p lc3a2b@lc3a28) (lc3a30@rhs* lc3a2a@lc3a26) (lc3a31@lhs* lc3a29@lc3a24)) (values lc3a31@lhs* lc3a30@rhs* (list 'quasisyntax lc3a2f@p)))))) lc3a1f@ls/false) (let ((lc3a35@t lc3a1d@t)) (let ((lc3a37@ls/false (lc30ba@syntax-dispatch lc3a35@t '(any . any)))) (if lc3a37@ls/false (apply (lambda (lc3a39@p lc3a3a@q) (call-with-values (lambda () (lc3978@quasi lc3a39@p lc3994@lev)) (lambda (lc3a49@lc3a3e lc3a4a@lc3a40 lc3a4b@lc3a42) (call-with-values (lambda () (lc3978@quasi lc3a3a@q lc3994@lev)) (lambda (lc3a4f@lc3a44 lc3a50@lc3a46 lc3a51@lc3a48) (let ((lc3a55@q lc3a51@lc3a48) (lc3a56@rhs2* lc3a50@lc3a46) (lc3a57@lhs2* lc3a4f@lc3a44) (lc3a58@p lc3a4b@lc3a42) (lc3a59@rhs* lc3a4a@lc3a40) (lc3a5a@lhs* lc3a49@lc3a3e)) (values (append lc3a57@lhs2* lc3a5a@lhs*) (append lc3a56@rhs2* lc3a59@rhs*) (cons lc3a58@p lc3a55@q)))))))) lc3a37@ls/false) (let ((lc3a61@t lc3a35@t)) (let ((lc3a63@ls/false (lc30ba@syntax-dispatch lc3a61@t '#(vector each-any)))) (if lc3a63@ls/false (apply (lambda (lc3a65@x*) (call-with-values (lambda () (lc3978@quasi lc3a65@x* lc3994@lev)) (lambda (lc3a6d@lc3a68 lc3a6e@lc3a6a lc3a6f@lc3a6c) (let ((lc3a73@x* lc3a6f@lc3a6c) (lc3a74@rhs* lc3a6e@lc3a6a) (lc3a75@lhs* lc3a6d@lc3a68)) (values lc3a75@lhs* lc3a74@rhs* (list->vector lc3a73@x*)))))) lc3a63@ls/false) (let ((lc3a79@t lc3a61@t)) (let ((lc3a7b@ls/false (lc30ba@syntax-dispatch lc3a79@t '_))) (if lc3a7b@ls/false (apply (lambda () (values '() '() lc3993@p)) lc3a7b@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3a79@t))))))))))))))))))))))))))))))) (lambda (lc3979@x) (let ((lc397b@t lc3979@x)) (let ((lc397d@ls/false (lc30ba@syntax-dispatch lc397b@t '(_ any)))) (if lc397d@ls/false (apply (lambda (lc397f@e) (call-with-values (lambda () (lc3978@quasi lc397f@e '0)) (lambda (lc3987@lc3982 lc3988@lc3984 lc3989@lc3986) (let ((lc398d@v lc3989@lc3986) (lc398e@rhs* lc3988@lc3984) (lc398f@lhs* lc3987@lc3982)) (lc3070@bless (list 'syntax-case (cons 'list lc398e@rhs*) '() (list lc398f@lhs* (list 'syntax lc398d@v)))))))) lc397d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc397b@t))))))) (set! lc4b88@lc30aa@quasisyntax-macro lc30aa@quasisyntax-macro) (set! lc30ac@define-struct-macro (lambda (lc3a7d@stx) (lc319a@syntax-violation '#f '"define-struct not supported" lc3a7d@stx))) (set! lc4b89@lc30ac@define-struct-macro lc30ac@define-struct-macro) (set! lc30ae@define-record-type-macro (lambda (lc3a7f@x) (letrec* ((lc3a82@id (lambda (lc3c75@ctxt . lc3c77@str*) (lc319e@datum->syntax lc3c75@ctxt (string->symbol (apply string-append (map (lambda (lc3c79@x) (if (symbol? lc3c79@x) (symbol->string lc3c79@x) (if (string? lc3c79@x) lc3c79@x (assertion-violation 'define-record-type '"BUG")))) lc3c77@str*)))))) (lc3a84@get-record-name (lambda (lc3c63@spec) (let ((lc3c65@t lc3c63@spec)) (let ((lc3c67@ls/false (lc30ba@syntax-dispatch lc3c65@t '(any any any)))) (if lc3c67@ls/false (apply (lambda (lc3c69@foo lc3c6a@make-foo lc3c6b@foo?) lc3c69@foo) lc3c67@ls/false) (let ((lc3c6f@t lc3c65@t)) (let ((lc3c71@ls/false (lc30ba@syntax-dispatch lc3c6f@t 'any))) (if lc3c71@ls/false (apply (lambda (lc3c73@foo) lc3c73@foo) lc3c71@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3c6f@t))))))))) (lc3a86@get-record-constructor-name (lambda (lc3c4f@spec) (let ((lc3c51@t lc3c4f@spec)) (let ((lc3c53@ls/false (lc30ba@syntax-dispatch lc3c51@t '(any any any)))) (if lc3c53@ls/false (apply (lambda (lc3c55@foo lc3c56@make-foo lc3c57@foo?) lc3c56@make-foo) lc3c53@ls/false) (let ((lc3c5b@t lc3c51@t)) (let ((lc3c5d@ls/false (lc30ba@syntax-dispatch lc3c5b@t 'any))) (if (and lc3c5d@ls/false (apply (lambda (lc3c5f@foo) (lc2eb3@id? lc3c5f@foo)) lc3c5d@ls/false)) (apply (lambda (lc3c61@foo) (lc3a82@id lc3c61@foo '"make-" (lc2ec7@stx->datum lc3c61@foo))) lc3c5d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3c5b@t))))))))) (lc3a88@get-record-predicate-name (lambda (lc3c3b@spec) (let ((lc3c3d@t lc3c3b@spec)) (let ((lc3c3f@ls/false (lc30ba@syntax-dispatch lc3c3d@t '(any any any)))) (if lc3c3f@ls/false (apply (lambda (lc3c41@foo lc3c42@make-foo lc3c43@foo?) lc3c43@foo?) lc3c3f@ls/false) (let ((lc3c47@t lc3c3d@t)) (let ((lc3c49@ls/false (lc30ba@syntax-dispatch lc3c47@t 'any))) (if (and lc3c49@ls/false (apply (lambda (lc3c4b@foo) (lc2eb3@id? lc3c4b@foo)) lc3c49@ls/false)) (apply (lambda (lc3c4d@foo) (lc3a82@id lc3c4d@foo (lc2ec7@stx->datum lc3c4d@foo) '"?")) lc3c49@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3c47@t))))))))) (lc3a8a@get-clause (lambda (lc3c29@id lc3c2a@ls) (let ((lc3c2d@t lc3c2a@ls)) (let ((lc3c2f@ls/false (lc30ba@syntax-dispatch lc3c2d@t '()))) (if lc3c2f@ls/false (apply (lambda () '#f) lc3c2f@ls/false) (let ((lc3c31@t lc3c2d@t)) (let ((lc3c33@ls/false (lc30ba@syntax-dispatch lc3c31@t '((any . any) . any)))) (if lc3c33@ls/false (apply (lambda (lc3c35@x lc3c36@rest lc3c37@ls) (if (lc2eb9@free-id=? (lc3070@bless lc3c29@id) lc3c35@x) (cons lc3c35@x lc3c36@rest) (lc3a8a@get-clause lc3c29@id lc3c37@ls))) lc3c33@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3c31@t))))))))) (lc3a8c@foo-rtd-code (lambda (lc3bd7@name lc3bd8@clause* lc3bd9@parent-rtd-code) (letrec* ((lc3bde@convert-field-spec* (lambda (lc3c0f@ls) (list->vector (map (lambda (lc3c11@x) (let ((lc3c13@t lc3c11@x)) (let ((lc3c15@ls/false (lc30ba@syntax-dispatch lc3c13@t '(#(scheme-id mutable) any . any)))) (if lc3c15@ls/false (apply (lambda (lc3c17@name lc3c18@rest) (list 'mutable lc3c17@name)) lc3c15@ls/false) (let ((lc3c1b@t lc3c13@t)) (let ((lc3c1d@ls/false (lc30ba@syntax-dispatch lc3c1b@t '(#(scheme-id immutable) any . any)))) (if lc3c1d@ls/false (apply (lambda (lc3c1f@name lc3c20@rest) (list 'immutable lc3c1f@name)) lc3c1d@ls/false) (let ((lc3c23@t lc3c1b@t)) (let ((lc3c25@ls/false (lc30ba@syntax-dispatch lc3c23@t 'any))) (if lc3c25@ls/false (apply (lambda (lc3c27@name) (list 'immutable lc3c27@name)) lc3c25@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3c23@t))))))))))) lc3c0f@ls))))) (let ((lc3bdf@uid-code (let ((lc3be7@t (lc3a8a@get-clause 'nongenerative lc3bd8@clause*))) (let ((lc3be9@ls/false (lc30ba@syntax-dispatch lc3be7@t '(_)))) (if lc3be9@ls/false (apply (lambda () (list 'quote (gensym))) lc3be9@ls/false) (let ((lc3beb@t lc3be7@t)) (let ((lc3bed@ls/false (lc30ba@syntax-dispatch lc3beb@t '(_ any)))) (if lc3bed@ls/false (apply (lambda (lc3bef@uid) (list 'quote lc3bef@uid)) lc3bed@ls/false) (let ((lc3bf1@t lc3beb@t)) (let ((lc3bf3@ls/false (lc30ba@syntax-dispatch lc3bf1@t '_))) (if lc3bf3@ls/false (apply (lambda () '#f) lc3bf3@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3bf1@t))))))))))) (lc3be0@sealed? (let ((lc3bf5@t (lc3a8a@get-clause 'sealed lc3bd8@clause*))) (let ((lc3bf7@ls/false (lc30ba@syntax-dispatch lc3bf5@t '(_ #(atom #t))))) (if lc3bf7@ls/false (apply (lambda () '#t) lc3bf7@ls/false) (let ((lc3bf9@t lc3bf5@t)) (let ((lc3bfb@ls/false (lc30ba@syntax-dispatch lc3bf9@t '_))) (if lc3bfb@ls/false (apply (lambda () '#f) lc3bfb@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3bf9@t)))))))) (lc3be1@opaque? (let ((lc3bfd@t (lc3a8a@get-clause 'opaque lc3bd8@clause*))) (let ((lc3bff@ls/false (lc30ba@syntax-dispatch lc3bfd@t '(_ #(atom #t))))) (if lc3bff@ls/false (apply (lambda () '#t) lc3bff@ls/false) (let ((lc3c01@t lc3bfd@t)) (let ((lc3c03@ls/false (lc30ba@syntax-dispatch lc3c01@t '_))) (if lc3c03@ls/false (apply (lambda () '#f) lc3c03@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3c01@t)))))))) (lc3be2@fields (let ((lc3c05@t (lc3a8a@get-clause 'fields lc3bd8@clause*))) (let ((lc3c07@ls/false (lc30ba@syntax-dispatch lc3c05@t '(_ . each-any)))) (if lc3c07@ls/false (apply (lambda (lc3c09@field-spec*) (list 'quote (lc3bde@convert-field-spec* lc3c09@field-spec*))) lc3c07@ls/false) (let ((lc3c0b@t lc3c05@t)) (let ((lc3c0d@ls/false (lc30ba@syntax-dispatch lc3c0b@t '_))) (if lc3c0d@ls/false (apply (lambda () ''#()) lc3c0d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3c0b@t))))))))) (lc3070@bless (list 'make-record-type-descriptor (list 'quote lc3bd7@name) lc3bd9@parent-rtd-code lc3bdf@uid-code lc3be0@sealed? lc3be1@opaque? lc3be2@fields)))))) (lc3a8e@parent-rtd-code (lambda (lc3bbf@clause*) (let ((lc3bc1@t (lc3a8a@get-clause 'parent lc3bbf@clause*))) (let ((lc3bc3@ls/false (lc30ba@syntax-dispatch lc3bc1@t '(_ any)))) (if lc3bc3@ls/false (apply (lambda (lc3bc5@name) (list 'record-type-descriptor lc3bc5@name)) lc3bc3@ls/false) (let ((lc3bc7@t lc3bc1@t)) (let ((lc3bc9@ls/false (lc30ba@syntax-dispatch lc3bc7@t '#(atom #f)))) (if lc3bc9@ls/false (apply (lambda () (let ((lc3bcb@t (lc3a8a@get-clause 'parent-rtd lc3bbf@clause*))) (let ((lc3bcd@ls/false (lc30ba@syntax-dispatch lc3bcb@t '(_ any any)))) (if lc3bcd@ls/false (apply (lambda (lc3bcf@rtd lc3bd0@rcd) lc3bcf@rtd) lc3bcd@ls/false) (let ((lc3bd3@t lc3bcb@t)) (let ((lc3bd5@ls/false (lc30ba@syntax-dispatch lc3bd3@t '#(atom #f)))) (if lc3bd5@ls/false (apply (lambda () '#f) lc3bd5@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3bd3@t)))))))) lc3bc9@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3bc7@t))))))))) (lc3a90@parent-rcd-code (lambda (lc3ba7@clause*) (let ((lc3ba9@t (lc3a8a@get-clause 'parent lc3ba7@clause*))) (let ((lc3bab@ls/false (lc30ba@syntax-dispatch lc3ba9@t '(_ any)))) (if lc3bab@ls/false (apply (lambda (lc3bad@name) (list 'record-constructor-descriptor lc3bad@name)) lc3bab@ls/false) (let ((lc3baf@t lc3ba9@t)) (let ((lc3bb1@ls/false (lc30ba@syntax-dispatch lc3baf@t '#(atom #f)))) (if lc3bb1@ls/false (apply (lambda () (let ((lc3bb3@t (lc3a8a@get-clause 'parent-rtd lc3ba7@clause*))) (let ((lc3bb5@ls/false (lc30ba@syntax-dispatch lc3bb3@t '(_ any any)))) (if lc3bb5@ls/false (apply (lambda (lc3bb7@rtd lc3bb8@rcd) lc3bb8@rcd) lc3bb5@ls/false) (let ((lc3bbb@t lc3bb3@t)) (let ((lc3bbd@ls/false (lc30ba@syntax-dispatch lc3bbb@t '#(atom #f)))) (if lc3bbd@ls/false (apply (lambda () '#f) lc3bbd@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3bbb@t)))))))) lc3bb1@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3baf@t))))))))) (lc3a92@foo-rcd-code (lambda (lc3b9f@clause* lc3ba0@foo-rtd lc3ba1@protocol lc3ba2@parent-rcd-code) (list 'make-record-constructor-descriptor lc3ba0@foo-rtd lc3ba2@parent-rcd-code lc3ba1@protocol))) (lc3a94@get-protocol-code (lambda (lc3b93@clause*) (let ((lc3b95@t (lc3a8a@get-clause 'protocol lc3b93@clause*))) (let ((lc3b97@ls/false (lc30ba@syntax-dispatch lc3b95@t '(_ any)))) (if lc3b97@ls/false (apply (lambda (lc3b99@expr) lc3b99@expr) lc3b97@ls/false) (let ((lc3b9b@t lc3b95@t)) (let ((lc3b9d@ls/false (lc30ba@syntax-dispatch lc3b9b@t '_))) (if lc3b9d@ls/false (apply (lambda () '#f) lc3b9d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3b9b@t))))))))) (lc3a96@get-fields (lambda (lc3b81@clause*) (let ((lc3b83@t lc3b81@clause*)) (let ((lc3b85@ls/false (lc30ba@syntax-dispatch lc3b83@t '()))) (if lc3b85@ls/false (apply (lambda () '()) lc3b85@ls/false) (let ((lc3b87@t lc3b83@t)) (let ((lc3b89@ls/false (lc30ba@syntax-dispatch lc3b87@t '((#(scheme-id fields) . each-any) . _)))) (if lc3b89@ls/false (apply (lambda (lc3b8b@f*) lc3b8b@f*) lc3b89@ls/false) (let ((lc3b8d@t lc3b87@t)) (let ((lc3b8f@ls/false (lc30ba@syntax-dispatch lc3b8d@t '(_ . any)))) (if lc3b8f@ls/false (apply (lambda (lc3b91@rest) (lc3a96@get-fields lc3b91@rest)) lc3b8f@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3b8d@t)))))))))))) (lc3a98@get-mutator-indices (lambda (lc3b69@fields) (let lc3b6f@f ((lc3b6b@fields lc3b69@fields) (lc3b6c@i '0)) (let ((lc3b71@t lc3b6b@fields)) (let ((lc3b73@ls/false (lc30ba@syntax-dispatch lc3b71@t '()))) (if lc3b73@ls/false (apply (lambda () '()) lc3b73@ls/false) (let ((lc3b75@t lc3b71@t)) (let ((lc3b77@ls/false (lc30ba@syntax-dispatch lc3b75@t '((#(scheme-id mutable) . _) . any)))) (if lc3b77@ls/false (apply (lambda (lc3b79@rest) (cons lc3b6c@i (lc3b6f@f lc3b79@rest (+ lc3b6c@i '1)))) lc3b77@ls/false) (let ((lc3b7b@t lc3b75@t)) (let ((lc3b7d@ls/false (lc30ba@syntax-dispatch lc3b7b@t '(_ . any)))) (if lc3b7d@ls/false (apply (lambda (lc3b7f@rest) (lc3b6f@f lc3b7f@rest (+ lc3b6c@i '1))) lc3b7d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3b7b@t))))))))))))) (lc3a9a@get-mutators (lambda (lc3b3f@foo lc3b40@fields) (letrec* ((lc3b44@gen-name (lambda (lc3b67@x) (lc319e@datum->syntax lc3b3f@foo (string->symbol (string-append (symbol->string (lc31a0@syntax->datum lc3b3f@foo)) '"-" (symbol->string (lc31a0@syntax->datum lc3b67@x)) '"-set!")))))) (let lc3b47@f ((lc3b45@fields lc3b40@fields)) (let ((lc3b49@t lc3b45@fields)) (let ((lc3b4b@ls/false (lc30ba@syntax-dispatch lc3b49@t '()))) (if lc3b4b@ls/false (apply (lambda () '()) lc3b4b@ls/false) (let ((lc3b4d@t lc3b49@t)) (let ((lc3b4f@ls/false (lc30ba@syntax-dispatch lc3b4d@t '((#(scheme-id mutable) any any any) . any)))) (if lc3b4f@ls/false (apply (lambda (lc3b51@name lc3b52@accessor lc3b53@mutator lc3b54@rest) (cons lc3b53@mutator (lc3b47@f lc3b54@rest))) lc3b4f@ls/false) (let ((lc3b59@t lc3b4d@t)) (let ((lc3b5b@ls/false (lc30ba@syntax-dispatch lc3b59@t '((#(scheme-id mutable) any) . any)))) (if lc3b5b@ls/false (apply (lambda (lc3b5d@name lc3b5e@rest) (cons (lc3b44@gen-name lc3b5d@name) (lc3b47@f lc3b5e@rest))) lc3b5b@ls/false) (let ((lc3b61@t lc3b59@t)) (let ((lc3b63@ls/false (lc30ba@syntax-dispatch lc3b61@t '(_ . any)))) (if lc3b63@ls/false (apply (lambda (lc3b65@rest) (lc3b47@f lc3b65@rest)) lc3b63@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3b61@t))))))))))))))))) (lc3a9c@get-accessors (lambda (lc3afb@foo lc3afc@fields) (letrec* ((lc3b00@gen-name (lambda (lc3b3d@x) (lc319e@datum->syntax lc3afb@foo (string->symbol (string-append (symbol->string (lc31a0@syntax->datum lc3afb@foo)) '"-" (symbol->string (lc31a0@syntax->datum lc3b3d@x)))))))) (map (lambda (lc3b01@field) (let ((lc3b03@t lc3b01@field)) (let ((lc3b05@ls/false (lc30ba@syntax-dispatch lc3b03@t '(#(scheme-id mutable) any any any)))) (if (and lc3b05@ls/false (apply (lambda (lc3b07@name lc3b08@accessor lc3b09@mutator) (lc2eb3@id? lc3b08@accessor)) lc3b05@ls/false)) (apply (lambda (lc3b0d@name lc3b0e@accessor lc3b0f@mutator) lc3b0e@accessor) lc3b05@ls/false) (let ((lc3b13@t lc3b03@t)) (let ((lc3b15@ls/false (lc30ba@syntax-dispatch lc3b13@t '(#(scheme-id immutable) any any)))) (if (and lc3b15@ls/false (apply (lambda (lc3b17@name lc3b18@accessor) (lc2eb3@id? lc3b18@accessor)) lc3b15@ls/false)) (apply (lambda (lc3b1b@name lc3b1c@accessor) lc3b1c@accessor) lc3b15@ls/false) (let ((lc3b1f@t lc3b13@t)) (let ((lc3b21@ls/false (lc30ba@syntax-dispatch lc3b1f@t '(#(scheme-id mutable) any)))) (if (and lc3b21@ls/false (apply (lambda (lc3b23@name) (lc2eb3@id? lc3b23@name)) lc3b21@ls/false)) (apply (lambda (lc3b25@name) (lc3b00@gen-name lc3b25@name)) lc3b21@ls/false) (let ((lc3b27@t lc3b1f@t)) (let ((lc3b29@ls/false (lc30ba@syntax-dispatch lc3b27@t '(#(scheme-id immutable) any)))) (if (and lc3b29@ls/false (apply (lambda (lc3b2b@name) (lc2eb3@id? lc3b2b@name)) lc3b29@ls/false)) (apply (lambda (lc3b2d@name) (lc3b00@gen-name lc3b2d@name)) lc3b29@ls/false) (let ((lc3b2f@t lc3b27@t)) (let ((lc3b31@ls/false (lc30ba@syntax-dispatch lc3b2f@t 'any))) (if (and lc3b31@ls/false (apply (lambda (lc3b33@name) (lc2eb3@id? lc3b33@name)) lc3b31@ls/false)) (apply (lambda (lc3b35@name) (lc3b00@gen-name lc3b35@name)) lc3b31@ls/false) (let ((lc3b37@t lc3b2f@t)) (let ((lc3b39@ls/false (lc30ba@syntax-dispatch lc3b37@t 'any))) (if lc3b39@ls/false (apply (lambda (lc3b3b@others) (lc319a@syntax-violation '#f '"invalid field spec" lc3b01@field)) lc3b39@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3b37@t)))))))))))))))))))) lc3afc@fields)))) (lc3a9e@enumerate (lambda (lc3af3@ls) (let lc3af9@f ((lc3af5@ls lc3af3@ls) (lc3af6@i '0)) (if (null? lc3af5@ls) '() (cons lc3af6@i (lc3af9@f (cdr lc3af5@ls) (+ lc3af6@i '1))))))) (lc3aa0@do-define-record (lambda (lc3acb@namespec lc3acc@clause*) (let ((lc3acf@foo (lc3a84@get-record-name lc3acb@namespec))) (let ((lc3ad1@foo-rtd (gensym))) (let ((lc3ad3@foo-rcd (gensym))) (let ((lc3ad5@protocol (gensym))) (let ((lc3ad7@make-foo (lc3a86@get-record-constructor-name lc3acb@namespec))) (let ((lc3ad9@fields (lc3a96@get-fields lc3acc@clause*))) (let ((lc3adb@idx* (lc3a9e@enumerate lc3ad9@fields))) (let ((lc3add@foo-x* (lc3a9c@get-accessors lc3acf@foo lc3ad9@fields))) (let ((lc3adf@set-foo-x!* (lc3a9a@get-mutators lc3acf@foo lc3ad9@fields))) (let ((lc3ae1@set-foo-idx* (lc3a98@get-mutator-indices lc3ad9@fields))) (let ((lc3ae3@foo? (lc3a88@get-record-predicate-name lc3acb@namespec))) (let ((lc3ae5@foo-rtd-code (lc3a8c@foo-rtd-code lc3acf@foo lc3acc@clause* (lc3a8e@parent-rtd-code lc3acc@clause*)))) (let ((lc3ae7@foo-rcd-code (lc3a92@foo-rcd-code lc3acc@clause* lc3ad1@foo-rtd lc3ad5@protocol (lc3a90@parent-rcd-code lc3acc@clause*)))) (let ((lc3ae9@protocol-code (lc3a94@get-protocol-code lc3acc@clause*))) (lc3070@bless (cons 'begin (cons (list 'define lc3ad1@foo-rtd lc3ae5@foo-rtd-code) (cons (list 'define lc3ad5@protocol lc3ae9@protocol-code) (cons (list 'define lc3ad3@foo-rcd lc3ae7@foo-rcd-code) (cons (list 'define-syntax lc3acf@foo (list 'list ''$rtd (list 'syntax lc3ad1@foo-rtd) (list 'syntax lc3ad3@foo-rcd))) (cons (list 'define lc3ae3@foo? (list 'record-predicate lc3ad1@foo-rtd)) (cons (list 'define lc3ad7@make-foo (list 'record-constructor lc3ad3@foo-rcd)) (append (map (lambda (lc3aeb@foo-x lc3aec@idx) (list 'define lc3aeb@foo-x (list 'record-accessor lc3ad1@foo-rtd lc3aec@idx))) lc3add@foo-x* lc3adb@idx*) (map (lambda (lc3aef@set-foo-x! lc3af0@idx) (list 'define lc3aef@set-foo-x! (list 'record-mutator lc3ad1@foo-rtd lc3af0@idx))) lc3adf@set-foo-x!* lc3ae1@set-foo-idx*)))))))))))))))))))))))))) (lc3aa2@verify-clauses (lambda (lc3aab@x lc3aac@cls*) (letrec* ((lc3ab0@valid-kwds (map lc3070@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (lc3ab2@free-id-member? (lambda (lc3ac7@x lc3ac8@ls) (and (pair? lc3ac8@ls) (or (lc2eb9@free-id=? lc3ac7@x (car lc3ac8@ls)) (lc3ab2@free-id-member? lc3ac7@x (cdr lc3ac8@ls))))))) (let lc3ab7@f ((lc3ab3@cls* lc3aac@cls*) (lc3ab4@seen* '())) (if (not (null? lc3ab3@cls*)) (let ((lc3ab9@t (car lc3ab3@cls*))) (let ((lc3abb@ls/false (lc30ba@syntax-dispatch lc3ab9@t '(any . any)))) (if lc3abb@ls/false (apply (lambda (lc3abd@kwd lc3abe@rest) (if (or (not (lc2eb3@id? lc3abd@kwd)) (not (lc3ab2@free-id-member? lc3abd@kwd lc3ab0@valid-kwds))) (lc319a@syntax-violation '#f '"not a valid define-record-type keyword" lc3abd@kwd) (if (lc2ebf@bound-id-member? lc3abd@kwd lc3ab4@seen*) (lc319a@syntax-violation '#f '"duplicate use of keyword " lc3aab@x lc3abd@kwd) (lc3ab7@f (cdr lc3ab3@cls*) (cons lc3abd@kwd lc3ab4@seen*))))) lc3abb@ls/false) (let ((lc3ac1@t lc3ab9@t)) (let ((lc3ac3@ls/false (lc30ba@syntax-dispatch lc3ac1@t 'any))) (if lc3ac3@ls/false (apply (lambda (lc3ac5@cls) (lc319a@syntax-violation '#f '"malformed define-record-type clause" lc3ac5@cls)) lc3ac3@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3ac1@t))))))) (void))))))) (let ((lc3aa3@t lc3a7f@x)) (let ((lc3aa5@ls/false (lc30ba@syntax-dispatch lc3aa3@t '(_ any . each-any)))) (if lc3aa5@ls/false (apply (lambda (lc3aa7@namespec lc3aa8@clause*) (begin (lc3aa2@verify-clauses lc3a7f@x lc3aa8@clause*) (lc3aa0@do-define-record lc3aa7@namespec lc3aa8@clause*))) lc3aa5@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3aa3@t))))))) (set! lc4b8a@lc30ae@define-record-type-macro lc30ae@define-record-type-macro) (set! lc30b0@define-condition-type-macro (lambda (lc3c7b@x) (letrec* ((lc3c7e@mkname (lambda (lc3cab@name lc3cac@suffix) (lc319e@datum->syntax lc3cab@name (string->symbol (string-append (symbol->string (lc31a0@syntax->datum lc3cab@name)) lc3cac@suffix)))))) (let ((lc3c7f@t lc3c7b@x)) (let ((lc3c81@ls/false (lc30ba@syntax-dispatch lc3c7f@t '(any any any any any . #(each (any any)))))) (if (and lc3c81@ls/false (apply (lambda (lc3c83@ctxt lc3c84@name lc3c85@super lc3c86@constructor lc3c87@predicate lc3c88@field* lc3c89@accessor*) (and (lc2eb3@id? lc3c84@name) (lc2eb3@id? lc3c85@super) (lc2eb3@id? lc3c86@constructor) (lc2eb3@id? lc3c87@predicate) (for-all lc2eb3@id? lc3c88@field*) (for-all lc2eb3@id? lc3c89@accessor*))) lc3c81@ls/false)) (apply (lambda (lc3c91@ctxt lc3c92@name lc3c93@super lc3c94@constructor lc3c95@predicate lc3c96@field* lc3c97@accessor*) (let ((lc3c9f@aux-accessor* (map (lambda (lc3ca1@x) (gensym)) lc3c97@accessor*))) (lc3070@bless (cons 'begin (cons (cons 'define-record-type (cons (list lc3c92@name lc3c94@constructor (gensym)) (cons (list 'parent lc3c93@super) (cons (cons 'fields (map (lambda (lc3ca3@field lc3ca4@aux) (list 'immutable lc3ca3@field lc3ca4@aux)) lc3c96@field* lc3c9f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define lc3c95@predicate (list 'condition-predicate (list 'record-type-descriptor lc3c92@name))) (map (lambda (lc3ca7@accessor lc3ca8@aux) (list 'define lc3ca7@accessor (list 'condition-accessor (list 'record-type-descriptor lc3c92@name) lc3ca8@aux))) lc3c97@accessor* lc3c9f@aux-accessor*))))))) lc3c81@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3c7f@t))))))) (set! lc4b8b@lc30b0@define-condition-type-macro lc30b0@define-condition-type-macro) (set! lc30b2@incorrect-usage-macro (lambda (lc3caf@e) (lc319a@syntax-violation '#f '"incorrect usage of auxiliary keyword" lc3caf@e))) (set! lc4b8c@lc30b2@incorrect-usage-macro lc30b2@incorrect-usage-macro) (set! lc30b4@parameterize-macro (lambda (lc3cb1@e) (let ((lc3cb3@t lc3cb1@e)) (let ((lc3cb5@ls/false (lc30ba@syntax-dispatch lc3cb3@t '(_ () any . each-any)))) (if lc3cb5@ls/false (apply (lambda (lc3cb7@b lc3cb8@b*) (lc3070@bless (cons 'let (cons '() (cons lc3cb7@b lc3cb8@b*))))) lc3cb5@ls/false) (let ((lc3cbb@t lc3cb3@t)) (let ((lc3cbd@ls/false (lc30ba@syntax-dispatch lc3cbb@t '(_ #(each (any any)) any . each-any)))) (if lc3cbd@ls/false (apply (lambda (lc3cbf@olhs* lc3cc0@orhs* lc3cc1@b lc3cc2@b*) (let ((lc3cc7@lhs* (lc3188@generate-temporaries lc3cbf@olhs*)) (lc3cc8@rhs* (lc3188@generate-temporaries lc3cc0@orhs*))) (lc3070@bless (cons (list 'lambda (append lc3cc7@lhs* lc3cc8@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (lc3ccb@lhs lc3ccc@rhs) (list 'let (list (list 't (list lc3ccb@lhs))) (list lc3ccb@lhs lc3ccc@rhs) (cons 'set! (cons lc3ccc@rhs '(t))))) lc3cc7@lhs* lc3cc8@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons lc3cc1@b lc3cc2@b*))) '(swap)))))) (append lc3cbf@olhs* lc3cc0@orhs*))))) lc3cbd@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3cbb@t))))))))) (set! lc4b8d@lc30b4@parameterize-macro lc30b4@parameterize-macro) (set! lc30b6@foreign-call-transformer (lambda (lc3ccf@e lc3cd0@r lc3cd1@mr) (let ((lc3cd5@t lc3ccf@e)) (let ((lc3cd7@ls/false (lc30ba@syntax-dispatch lc3cd5@t '(_ any . each-any)))) (if lc3cd7@ls/false (apply (lambda (lc3cd9@name lc3cda@arg*) (cons 'foreign-call (cons (lc30dc@chi-expr lc3cd9@name lc3cd0@r lc3cd1@mr) (lc30d8@chi-expr* lc3cda@arg* lc3cd0@r lc3cd1@mr)))) lc3cd7@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3cd5@t)))))) (set! lc4b8e@lc30b6@foreign-call-transformer lc30b6@foreign-call-transformer) (set! lc30b8@convert-pattern (lambda (lc3cdd@pattern lc3cde@keys) (letrec* ((lc3ce2@cvt* (lambda (lc3d81@p* lc3d82@n lc3d83@ids) (if (null? lc3d81@p*) (values '() lc3d83@ids) (call-with-values (lambda () (lc3ce2@cvt* (cdr lc3d81@p*) lc3d82@n lc3d83@ids)) (lambda (lc3d8b@lc3d88 lc3d8c@lc3d8a) (let ((lc3d8f@ids lc3d8c@lc3d8a) (lc3d90@y lc3d8b@lc3d88)) (call-with-values (lambda () (lc3ce4@cvt (car lc3d81@p*) lc3d82@n lc3d8f@ids)) (lambda (lc3d97@lc3d94 lc3d98@lc3d96) (let ((lc3d9b@ids lc3d98@lc3d96) (lc3d9c@x lc3d97@lc3d94)) (values (cons lc3d9c@x lc3d90@y) lc3d9b@ids)))))))))) (lc3ce4@cvt (lambda (lc3ce5@p lc3ce6@n lc3ce7@ids) (let ((lc3ceb@t lc3ce5@p)) (let ((lc3ced@ls/false (lc30ba@syntax-dispatch lc3ceb@t 'any))) (if (and lc3ced@ls/false (apply (lambda (lc3cef@id) (lc2eb3@id? lc3cef@id)) lc3ced@ls/false)) (apply (lambda (lc3cf1@id) (if (lc2ebf@bound-id-member? lc3ce5@p lc3cde@keys) (values (vector 'free-id lc3ce5@p) lc3ce7@ids) (if (lc2eb9@free-id=? lc3ce5@p (lc3042@scheme-stx '_)) (values '_ lc3ce7@ids) (values 'any (cons (cons lc3ce5@p lc3ce6@n) lc3ce7@ids))))) lc3ced@ls/false) (let ((lc3cf3@t lc3ceb@t)) (let ((lc3cf5@ls/false (lc30ba@syntax-dispatch lc3cf3@t '(any any)))) (if (and lc3cf5@ls/false (apply (lambda (lc3cf7@p lc3cf8@dots) (lc30bc@ellipsis? lc3cf8@dots)) lc3cf5@ls/false)) (apply (lambda (lc3cfb@p lc3cfc@dots) (call-with-values (lambda () (lc3ce4@cvt lc3cfb@p (+ lc3ce6@n '1) lc3ce7@ids)) (lambda (lc3d03@lc3d00 lc3d04@lc3d02) (let ((lc3d07@ids lc3d04@lc3d02) (lc3d08@p lc3d03@lc3d00)) (values (if (eq? lc3d08@p 'any) 'each-any (vector 'each lc3d08@p)) lc3d07@ids))))) lc3cf5@ls/false) (let ((lc3d0b@t lc3cf3@t)) (let ((lc3d0d@ls/false (lc30ba@syntax-dispatch lc3d0b@t '(any any . #(each+ any () any))))) (if (and lc3d0d@ls/false (apply (lambda (lc3d0f@x lc3d10@dots lc3d11@ys lc3d12@z) (lc30bc@ellipsis? lc3d10@dots)) lc3d0d@ls/false)) (apply (lambda (lc3d17@x lc3d18@dots lc3d19@ys lc3d1a@z) (call-with-values (lambda () (lc3ce4@cvt lc3d1a@z lc3ce6@n lc3ce7@ids)) (lambda (lc3d23@lc3d20 lc3d24@lc3d22) (let ((lc3d27@ids lc3d24@lc3d22) (lc3d28@z lc3d23@lc3d20)) (call-with-values (lambda () (lc3ce2@cvt* lc3d19@ys lc3ce6@n lc3d27@ids)) (lambda (lc3d2f@lc3d2c lc3d30@lc3d2e) (let ((lc3d33@ids lc3d30@lc3d2e) (lc3d34@ys lc3d2f@lc3d2c)) (call-with-values (lambda () (lc3ce4@cvt lc3d17@x (+ lc3ce6@n '1) lc3d33@ids)) (lambda (lc3d3b@lc3d38 lc3d3c@lc3d3a) (let ((lc3d3f@ids lc3d3c@lc3d3a) (lc3d40@x lc3d3b@lc3d38)) (values (vector 'each+ lc3d40@x (reverse lc3d34@ys) lc3d28@z) lc3d3f@ids))))))))))) lc3d0d@ls/false) (let ((lc3d43@t lc3d0b@t)) (let ((lc3d45@ls/false (lc30ba@syntax-dispatch lc3d43@t '(any . any)))) (if lc3d45@ls/false (apply (lambda (lc3d47@x lc3d48@y) (call-with-values (lambda () (lc3ce4@cvt lc3d48@y lc3ce6@n lc3ce7@ids)) (lambda (lc3d4f@lc3d4c lc3d50@lc3d4e) (let ((lc3d53@ids lc3d50@lc3d4e) (lc3d54@y lc3d4f@lc3d4c)) (call-with-values (lambda () (lc3ce4@cvt lc3d47@x lc3ce6@n lc3d53@ids)) (lambda (lc3d5b@lc3d58 lc3d5c@lc3d5a) (let ((lc3d5f@ids lc3d5c@lc3d5a) (lc3d60@x lc3d5b@lc3d58)) (values (cons lc3d60@x lc3d54@y) lc3d5f@ids)))))))) lc3d45@ls/false) (let ((lc3d63@t lc3d43@t)) (let ((lc3d65@ls/false (lc30ba@syntax-dispatch lc3d63@t '()))) (if lc3d65@ls/false (apply (lambda () (values '() lc3ce7@ids)) lc3d65@ls/false) (let ((lc3d67@t lc3d63@t)) (let ((lc3d69@ls/false (lc30ba@syntax-dispatch lc3d67@t '#(vector each-any)))) (if (and lc3d69@ls/false (apply (lambda (lc3d6b@p) (not (lc2e7f@stx? lc3d6b@p))) lc3d69@ls/false)) (apply (lambda (lc3d6d@p) (call-with-values (lambda () (lc3ce4@cvt lc3d6d@p lc3ce6@n lc3ce7@ids)) (lambda (lc3d73@lc3d70 lc3d74@lc3d72) (let ((lc3d77@ids lc3d74@lc3d72) (lc3d78@p lc3d73@lc3d70)) (values (vector 'vector lc3d78@p) lc3d77@ids))))) lc3d69@ls/false) (let ((lc3d7b@t lc3d67@t)) (let ((lc3d7d@ls/false (lc30ba@syntax-dispatch lc3d7b@t 'any))) (if lc3d7d@ls/false (apply (lambda (lc3d7f@datum) (values (vector 'atom (lc2ec7@stx->datum lc3d7f@datum)) lc3ce7@ids)) lc3d7d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3d7b@t))))))))))))))))))))))))) (lc3ce4@cvt lc3cdd@pattern '0 '())))) (set! lc4b8f@lc30b8@convert-pattern lc30b8@convert-pattern) (set! lc30ba@syntax-dispatch (letrec* ((lc3da0@stx^ (lambda (lc3e7b@e lc3e7c@m* lc3e7d@s* lc3e7e@ae*) (if (and (null? lc3e7c@m*) (null? lc3e7d@s*) (null? lc3e7e@ae*)) lc3e7b@e (lc2e9b@mkstx lc3e7b@e lc3e7c@m* lc3e7d@s* lc3e7e@ae*)))) (lc3da2@match-each (lambda (lc3e5b@e lc3e5c@p lc3e5d@m* lc3e5e@s* lc3e5f@ae*) (if (pair? lc3e5b@e) (let ((lc3e65@first (lc3dae@match (car lc3e5b@e) lc3e5c@p lc3e5d@m* lc3e5e@s* lc3e5f@ae* '()))) (and lc3e65@first (let ((lc3e67@rest (lc3da2@match-each (cdr lc3e5b@e) lc3e5c@p lc3e5d@m* lc3e5e@s* lc3e5f@ae*))) (and lc3e67@rest (cons lc3e65@first lc3e67@rest))))) (if (null? lc3e5b@e) '() (if (lc2e7f@stx? lc3e5b@e) (and (not (lc2e39@top-marked? lc3e5d@m*)) (call-with-values (lambda () (join-wraps lc3e5d@m* lc3e5e@s* lc3e5f@ae* lc3e5b@e)) (lambda (lc3e6f@lc3e6a lc3e70@lc3e6c lc3e71@lc3e6e) (let ((lc3e75@ae* lc3e71@lc3e6e) (lc3e76@s* lc3e70@lc3e6c) (lc3e77@m* lc3e6f@lc3e6a)) (lc3da2@match-each (lc2e81@stx-expr lc3e5b@e) lc3e5c@p lc3e77@m* lc3e76@s* lc3e75@ae*))))) (if (lc29f7@lc28c9@annotation? lc3e5b@e) (lc3da2@match-each (lc29f9@lc28cd@annotation-expression lc3e5b@e) lc3e5c@p lc3e5d@m* lc3e5e@s* lc3e5f@ae*) '#f)))))) (lc3da4@match-each+ (lambda (lc3e1b@e lc3e1c@x-pat lc3e1d@y-pat lc3e1e@z-pat lc3e1f@m* lc3e20@s* lc3e21@ae* lc3e22@r) (let lc3e33@f ((lc3e2b@e lc3e1b@e) (lc3e2c@m* lc3e1f@m*) (lc3e2d@s* lc3e20@s*) (lc3e2e@ae* lc3e21@ae*)) (if (pair? lc3e2b@e) (call-with-values (lambda () (lc3e33@f (cdr lc3e2b@e) lc3e2c@m* lc3e2d@s* lc3e2e@ae*)) (lambda (lc3e3b@lc3e36 lc3e3c@lc3e38 lc3e3d@lc3e3a) (let ((lc3e41@r lc3e3d@lc3e3a) (lc3e42@y-pat lc3e3c@lc3e38) (lc3e43@xr* lc3e3b@lc3e36)) (if lc3e41@r (if (null? lc3e42@y-pat) (let ((lc3e47@xr (lc3dae@match (car lc3e2b@e) lc3e1c@x-pat lc3e2c@m* lc3e2d@s* lc3e2e@ae* '()))) (if lc3e47@xr (values (cons lc3e47@xr lc3e43@xr*) lc3e42@y-pat lc3e41@r) (values '#f '#f '#f))) (values '() (cdr lc3e42@y-pat) (lc3dae@match (car lc3e2b@e) (car lc3e42@y-pat) lc3e2c@m* lc3e2d@s* lc3e2e@ae* lc3e41@r))) (values '#f '#f '#f))))) (if (lc2e7f@stx? lc3e2b@e) (if (lc2e39@top-marked? lc3e2c@m*) (values '() lc3e1d@y-pat (lc3dae@match lc3e2b@e lc3e1e@z-pat lc3e2c@m* lc3e2d@s* lc3e2e@ae* lc3e22@r)) (call-with-values (lambda () (join-wraps lc3e2c@m* lc3e2d@s* lc3e2e@ae* lc3e2b@e)) (lambda (lc3e4f@lc3e4a lc3e50@lc3e4c lc3e51@lc3e4e) (let ((lc3e55@ae* lc3e51@lc3e4e) (lc3e56@s* lc3e50@lc3e4c) (lc3e57@m* lc3e4f@lc3e4a)) (lc3e33@f (lc2e81@stx-expr lc3e2b@e) lc3e57@m* lc3e56@s* lc3e55@ae*))))) (if (lc29f7@lc28c9@annotation? lc3e2b@e) (lc3e33@f (lc29f9@lc28cd@annotation-expression lc3e2b@e) lc3e2c@m* lc3e2d@s* lc3e2e@ae*) (values '() lc3e1d@y-pat (lc3dae@match lc3e2b@e lc3e1e@z-pat lc3e2c@m* lc3e2d@s* lc3e2e@ae* lc3e22@r)))))))) (lc3da6@match-each-any (lambda (lc3dff@e lc3e00@m* lc3e01@s* lc3e02@ae*) (if (pair? lc3dff@e) (let ((lc3e07@l (lc3da6@match-each-any (cdr lc3dff@e) lc3e00@m* lc3e01@s* lc3e02@ae*))) (and lc3e07@l (cons (lc3da0@stx^ (car lc3dff@e) lc3e00@m* lc3e01@s* lc3e02@ae*) lc3e07@l))) (if (null? lc3dff@e) '() (if (lc2e7f@stx? lc3dff@e) (and (not (lc2e39@top-marked? lc3e00@m*)) (call-with-values (lambda () (join-wraps lc3e00@m* lc3e01@s* lc3e02@ae* lc3dff@e)) (lambda (lc3e0f@lc3e0a lc3e10@lc3e0c lc3e11@lc3e0e) (let ((lc3e15@ae* lc3e11@lc3e0e) (lc3e16@s* lc3e10@lc3e0c) (lc3e17@m* lc3e0f@lc3e0a)) (lc3da6@match-each-any (lc2e81@stx-expr lc3dff@e) lc3e17@m* lc3e16@s* lc3e15@ae*))))) (if (lc29f7@lc28c9@annotation? lc3dff@e) (lc3da6@match-each-any (lc29f9@lc28cd@annotation-expression lc3dff@e) lc3e00@m* lc3e01@s* lc3e02@ae*) '#f)))))) (lc3da8@match-empty (lambda (lc3df9@p lc3dfa@r) (if (null? lc3df9@p) lc3dfa@r (if (eq? lc3df9@p '_) lc3dfa@r (if (eq? lc3df9@p 'any) (cons '() lc3dfa@r) (if (pair? lc3df9@p) (lc3da8@match-empty (car lc3df9@p) (lc3da8@match-empty (cdr lc3df9@p) lc3dfa@r)) (if (eq? lc3df9@p 'each-any) (cons '() lc3dfa@r) (let ((lc3dfd@t (vector-ref lc3df9@p '0))) (if (memv lc3dfd@t '(each)) (lc3da8@match-empty (vector-ref lc3df9@p '1) lc3dfa@r) (if (memv lc3dfd@t '(each+)) (lc3da8@match-empty (vector-ref lc3df9@p '1) (lc3da8@match-empty (reverse (vector-ref lc3df9@p '2)) (lc3da8@match-empty (vector-ref lc3df9@p '3) lc3dfa@r))) (if (memv lc3dfd@t '(free-id atom)) lc3dfa@r (if (memv lc3dfd@t '(scheme-id atom)) lc3dfa@r (if (memv lc3dfd@t '(vector)) (lc3da8@match-empty (vector-ref lc3df9@p '1) lc3dfa@r) (assertion-violation 'syntax-dispatch '"invalid pattern" lc3df9@p)))))))))))))) (lc3daa@combine (lambda (lc3df5@r* lc3df6@r) (if (null? (car lc3df5@r*)) lc3df6@r (cons (map car lc3df5@r*) (lc3daa@combine (map cdr lc3df5@r*) lc3df6@r))))) (lc3dac@match* (lambda (lc3dd1@e lc3dd2@p lc3dd3@m* lc3dd4@s* lc3dd5@ae* lc3dd6@r) (if (null? lc3dd2@p) (and (null? lc3dd1@e) lc3dd6@r) (if (pair? lc3dd2@p) (and (pair? lc3dd1@e) (lc3dae@match (car lc3dd1@e) (car lc3dd2@p) lc3dd3@m* lc3dd4@s* lc3dd5@ae* (lc3dae@match (cdr lc3dd1@e) (cdr lc3dd2@p) lc3dd3@m* lc3dd4@s* lc3dd5@ae* lc3dd6@r))) (if (eq? lc3dd2@p 'each-any) (let ((lc3ddd@l (lc3da6@match-each-any lc3dd1@e lc3dd3@m* lc3dd4@s* lc3dd5@ae*))) (and lc3ddd@l (cons lc3ddd@l lc3dd6@r))) (let ((lc3ddf@t (vector-ref lc3dd2@p '0))) (if (memv lc3ddf@t '(each)) (if (null? lc3dd1@e) (lc3da8@match-empty (vector-ref lc3dd2@p '1) lc3dd6@r) (let ((lc3de1@r* (lc3da2@match-each lc3dd1@e (vector-ref lc3dd2@p '1) lc3dd3@m* lc3dd4@s* lc3dd5@ae*))) (and lc3de1@r* (lc3daa@combine lc3de1@r* lc3dd6@r)))) (if (memv lc3ddf@t '(free-id)) (and (symbol? lc3dd1@e) (lc2e39@top-marked? lc3dd3@m*) (lc2eb9@free-id=? (lc3da0@stx^ lc3dd1@e lc3dd3@m* lc3dd4@s* lc3dd5@ae*) (vector-ref lc3dd2@p '1)) lc3dd6@r) (if (memv lc3ddf@t '(scheme-id)) (and (symbol? lc3dd1@e) (lc2e39@top-marked? lc3dd3@m*) (lc2eb9@free-id=? (lc3da0@stx^ lc3dd1@e lc3dd3@m* lc3dd4@s* lc3dd5@ae*) (lc3042@scheme-stx (vector-ref lc3dd2@p '1))) lc3dd6@r) (if (memv lc3ddf@t '(each+)) (call-with-values (lambda () (lc3da4@match-each+ lc3dd1@e (vector-ref lc3dd2@p '1) (vector-ref lc3dd2@p '2) (vector-ref lc3dd2@p '3) lc3dd3@m* lc3dd4@s* lc3dd5@ae* lc3dd6@r)) (lambda (lc3de9@lc3de4 lc3dea@lc3de6 lc3deb@lc3de8) (let ((lc3def@r lc3deb@lc3de8) (lc3df0@y-pat lc3dea@lc3de6) (lc3df1@xr* lc3de9@lc3de4)) (and lc3def@r (null? lc3df0@y-pat) (if (null? lc3df1@xr*) (lc3da8@match-empty (vector-ref lc3dd2@p '1) lc3def@r) (lc3daa@combine lc3df1@xr* lc3def@r)))))) (if (memv lc3ddf@t '(atom)) (and (fast-equal? (vector-ref lc3dd2@p '1) (lc2ec5@strip lc3dd1@e lc3dd3@m*)) lc3dd6@r) (if (memv lc3ddf@t '(vector)) (and (vector? lc3dd1@e) (lc3dae@match (vector->list lc3dd1@e) (vector-ref lc3dd2@p '1) lc3dd3@m* lc3dd4@s* lc3dd5@ae* lc3dd6@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" lc3dd2@p))))))))))))) (lc3dae@match (lambda (lc3db3@e lc3db4@p lc3db5@m* lc3db6@s* lc3db7@ae* lc3db8@r) (if (not lc3db8@r) '#f (if (eq? lc3db4@p '_) lc3db8@r (if (eq? lc3db4@p 'any) (cons (lc3da0@stx^ lc3db3@e lc3db5@m* lc3db6@s* lc3db7@ae*) lc3db8@r) (if (lc2e7f@stx? lc3db3@e) (and (not (lc2e39@top-marked? lc3db5@m*)) (call-with-values (lambda () (join-wraps lc3db5@m* lc3db6@s* lc3db7@ae* lc3db3@e)) (lambda (lc3dc5@lc3dc0 lc3dc6@lc3dc2 lc3dc7@lc3dc4) (let ((lc3dcb@ae* lc3dc7@lc3dc4) (lc3dcc@s* lc3dc6@lc3dc2) (lc3dcd@m* lc3dc5@lc3dc0)) (lc3dae@match (lc2e81@stx-expr lc3db3@e) lc3db4@p lc3dcd@m* lc3dcc@s* lc3dcb@ae* lc3db8@r))))) (if (lc29f7@lc28c9@annotation? lc3db3@e) (lc3dae@match (lc29f9@lc28cd@annotation-expression lc3db3@e) lc3db4@p lc3db5@m* lc3db6@s* lc3db7@ae* lc3db8@r) (lc3dac@match* lc3db3@e lc3db4@p lc3db5@m* lc3db6@s* lc3db7@ae* lc3db8@r))))))))) (lambda (lc3daf@e lc3db0@p) (lc3dae@match lc3daf@e lc3db0@p '() '() '() '())))) (set! lc4b90@lc30ba@syntax-dispatch lc30ba@syntax-dispatch) (set! lc30bc@ellipsis? (lambda (lc3e83@x) (and (lc2eb3@id? lc3e83@x) (lc2eb9@free-id=? lc3e83@x (lc3042@scheme-stx '...))))) (set! lc4b91@lc30bc@ellipsis? lc30bc@ellipsis?) (set! lc30be@underscore? (lambda (lc3e85@x) (and (lc2eb3@id? lc3e85@x) (lc2eb9@free-id=? lc3e85@x (lc3042@scheme-stx '_))))) (set! lc4b92@lc30be@underscore? lc30be@underscore?) (set! lc30c0@verify-literals (lambda (lc3e87@lits lc3e88@expr) (for-each (lambda (lc3e8b@x) (if (or (not (lc2eb3@id? lc3e8b@x)) (lc30bc@ellipsis? lc3e8b@x) (lc30be@underscore? lc3e8b@x)) (lc319a@syntax-violation '#f '"invalid literal" lc3e88@expr lc3e8b@x) (void))) lc3e87@lits))) (set! lc4b93@lc30c0@verify-literals lc30c0@verify-literals) (set! lc30c2@syntax-case-transformer (letrec* ((lc3e8e@build-dispatch-call (lambda (lc3eff@pvars lc3f00@expr lc3f01@y lc3f02@r lc3f03@mr) (let ((lc3f09@ids (map car lc3eff@pvars)) (lc3f0a@levels (map cdr lc3eff@pvars))) (let ((lc3f0d@labels (map lc2e3f@gen-label lc3f09@ids)) (lc3f0e@new-vars (map lc2e3b@gen-lexical lc3f09@ids))) (let ((lc3f11@body (lc30dc@chi-expr (lc2e9f@add-subst (lc2e73@make-full-rib lc3f09@ids lc3f0d@labels) lc3f00@expr) (append (map (lambda (lc3f13@label lc3f14@var lc3f15@level) (cons lc3f13@label (lc2ecd@make-binding 'syntax (cons lc3f14@var lc3f15@level)))) lc3f0d@labels lc3f0e@new-vars (map cdr lc3eff@pvars)) lc3f02@r) lc3f03@mr))) (list '(primitive apply) (lc2e16@lc2d48@build-lambda '#f lc3f0e@new-vars lc3f11@body) lc3f01@y)))))) (lc3e90@invalid-ids-error (lambda (lc3ef3@id* lc3ef4@e lc3ef5@class) (let lc3efd@find ((lc3ef9@id* lc3ef3@id*) (lc3efa@ok* '())) (if (null? lc3ef9@id*) (lc319a@syntax-violation '#f '"invalid syntax" lc3ef4@e) (if (lc2eb3@id? (car lc3ef9@id*)) (if (lc2ebf@bound-id-member? (car lc3ef9@id*) lc3efa@ok*) (lc3196@syntax-error (car lc3ef9@id*) '"duplicate " lc3ef5@class) (lc3efd@find (cdr lc3ef9@id*) (cons (car lc3ef9@id*) lc3efa@ok*))) (lc3196@syntax-error (car lc3ef9@id*) '"invalid " lc3ef5@class)))))) (lc3e92@gen-clause (lambda (lc3ecb@x lc3ecc@keys lc3ecd@clauses lc3ece@r lc3ecf@mr lc3ed0@pat lc3ed1@fender lc3ed2@expr) (call-with-values (lambda () (lc30b8@convert-pattern lc3ed0@pat lc3ecc@keys)) (lambda (lc3edf@lc3edc lc3ee0@lc3ede) (let ((lc3ee3@pvars lc3ee0@lc3ede) (lc3ee4@p lc3edf@lc3edc)) (if (not (lc2ebd@distinct-bound-ids? (map car lc3ee3@pvars))) (lc3e90@invalid-ids-error (map car lc3ee3@pvars) lc3ed0@pat '"pattern variable") (if (not (for-all (lambda (lc3ee7@x) (not (lc30bc@ellipsis? (car lc3ee7@x)))) lc3ee3@pvars)) (lc319a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" lc3ed0@pat) (let ((lc3ee9@y (lc2e3b@gen-lexical 'tmp))) (let ((lc3eeb@test (if (eq? lc3ed1@fender '#t) lc3ee9@y (let ((lc3eed@call (lc3e8e@build-dispatch-call lc3ee3@pvars lc3ed1@fender lc3ee9@y lc3ece@r lc3ecf@mr))) (list 'if lc3ee9@y lc3eed@call (list 'quote '#f)))))) (let ((lc3eef@conseq (lc3e8e@build-dispatch-call lc3ee3@pvars lc3ed2@expr lc3ee9@y lc3ece@r lc3ecf@mr))) (let ((lc3ef1@altern (lc3e94@gen-syntax-case lc3ecb@x lc3ecc@keys lc3ecd@clauses lc3ece@r lc3ecf@mr))) (list (lc2e16@lc2d48@build-lambda '#f (list lc3ee9@y) (list 'if lc3eeb@test lc3eef@conseq lc3ef1@altern)) (list '(primitive syntax-dispatch) lc3ecb@x (list 'quote lc3ee4@p)))))))))))))) (lc3e94@gen-syntax-case (lambda (lc3ea9@x lc3eaa@keys lc3eab@clauses lc3eac@r lc3ead@mr) (if (null? lc3eab@clauses) (list '(primitive syntax-error) lc3ea9@x) (let ((lc3eb3@t (car lc3eab@clauses))) (let ((lc3eb5@ls/false (lc30ba@syntax-dispatch lc3eb3@t '(any any)))) (if lc3eb5@ls/false (apply (lambda (lc3eb7@pat lc3eb8@expr) (if (and (lc2eb3@id? lc3eb7@pat) (not (lc2ebf@bound-id-member? lc3eb7@pat lc3eaa@keys)) (not (lc30bc@ellipsis? lc3eb7@pat))) (if (lc2eb9@free-id=? lc3eb7@pat (lc3042@scheme-stx '_)) (lc30dc@chi-expr lc3eb8@expr lc3eac@r lc3ead@mr) (let ((lc3ebb@lab (lc2e3f@gen-label lc3eb7@pat)) (lc3ebc@lex (lc2e3b@gen-lexical lc3eb7@pat))) (let ((lc3ebf@body (lc30dc@chi-expr (lc2e9f@add-subst (lc2e73@make-full-rib (list lc3eb7@pat) (list lc3ebb@lab)) lc3eb8@expr) (cons (cons lc3ebb@lab (lc2ecd@make-binding 'syntax (cons lc3ebc@lex '0))) lc3eac@r) lc3ead@mr))) (list (lc2e16@lc2d48@build-lambda '#f (list lc3ebc@lex) lc3ebf@body) lc3ea9@x)))) (lc3e92@gen-clause lc3ea9@x lc3eaa@keys (cdr lc3eab@clauses) lc3eac@r lc3ead@mr lc3eb7@pat '#t lc3eb8@expr))) lc3eb5@ls/false) (let ((lc3ec1@t lc3eb3@t)) (let ((lc3ec3@ls/false (lc30ba@syntax-dispatch lc3ec1@t '(any any any)))) (if lc3ec3@ls/false (apply (lambda (lc3ec5@pat lc3ec6@fender lc3ec7@expr) (lc3e92@gen-clause lc3ea9@x lc3eaa@keys (cdr lc3eab@clauses) lc3eac@r lc3ead@mr lc3ec5@pat lc3ec6@fender lc3ec7@expr)) lc3ec3@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3ec1@t))))))))))) (lambda (lc3e95@e lc3e96@r lc3e97@mr) (let ((lc3e9b@t lc3e95@e)) (let ((lc3e9d@ls/false (lc30ba@syntax-dispatch lc3e9b@t '(_ any each-any . each-any)))) (if lc3e9d@ls/false (apply (lambda (lc3e9f@expr lc3ea0@keys lc3ea1@clauses) (begin (lc30c0@verify-literals lc3ea0@keys lc3e95@e) (let ((lc3ea5@x (lc2e3b@gen-lexical 'tmp))) (let ((lc3ea7@body (lc3e94@gen-syntax-case lc3ea5@x lc3ea0@keys lc3ea1@clauses lc3e96@r lc3e97@mr))) (list (lc2e16@lc2d48@build-lambda '#f (list lc3ea5@x) lc3ea7@body) (lc30dc@chi-expr lc3e9f@expr lc3e96@r lc3e97@mr)))))) lc3e9d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3e9b@t))))))) (set! lc4b94@lc30c2@syntax-case-transformer lc30c2@syntax-case-transformer) (set! lc30c4@ellipsis-map (lambda (lc3f19@proc lc3f1a@ls . lc3f1d@ls*) (letrec* ((lc3f20@who '...)) (begin (if (not (list? lc3f1a@ls)) (assertion-violation lc3f20@who '"not a list" lc3f1a@ls) (void)) (if (not (null? lc3f1d@ls*)) (let ((lc3f21@n (length lc3f1a@ls))) (for-each (lambda (lc3f23@x) (begin (if (not (list? lc3f23@x)) (assertion-violation lc3f20@who '"not a list" lc3f23@x) (void)) (if (not (= (length lc3f23@x) lc3f21@n)) (assertion-violation lc3f20@who '"length mismatch" lc3f1a@ls lc3f23@x) (void)))) lc3f1d@ls*)) (void)) (apply map lc3f19@proc lc3f1a@ls lc3f1d@ls*))))) (set! lc4b95@lc30c4@ellipsis-map lc30c4@ellipsis-map) (set! lc30c6@syntax-transformer (letrec* ((lc3f26@gen-syntax (lambda (lc3f9d@src lc3f9e@e lc3f9f@r lc3fa0@maps lc3fa1@ellipsis? lc3fa2@vec?) (let ((lc3fa9@t lc3f9e@e)) (let ((lc3fab@ls/false (lc30ba@syntax-dispatch lc3fa9@t 'any))) (if (and lc3fab@ls/false (apply (lambda (lc3fad@dots) (lc3fa1@ellipsis? lc3fad@dots)) lc3fab@ls/false)) (apply (lambda (lc3faf@dots) (lc319a@syntax-violation '#f '"misplaced ellipsis in syntax form" lc3f9d@src)) lc3fab@ls/false) (let ((lc3fb1@t lc3fa9@t)) (let ((lc3fb3@ls/false (lc30ba@syntax-dispatch lc3fb1@t 'any))) (if (and lc3fb3@ls/false (apply (lambda (lc3fb5@id) (lc2eb3@id? lc3fb5@id)) lc3fb3@ls/false)) (apply (lambda (lc3fb7@id) (let ((lc3fb9@label (lc2ec9@id->label lc3f9e@e))) (let ((lc3fbb@b (lc2ecb@label->binding lc3fb9@label lc3f9f@r))) (if (eq? (lc2ecf@binding-type lc3fbb@b) 'syntax) (call-with-values (lambda () (let ((lc3fc1@var.lev (lc2ed1@binding-value lc3fbb@b))) (lc3f28@gen-ref lc3f9d@src (car lc3fc1@var.lev) (cdr lc3fc1@var.lev) lc3fa0@maps))) (lambda (lc3fc3@lc3fbe lc3fc4@lc3fc0) (let ((lc3fc7@maps lc3fc4@lc3fc0) (lc3fc8@var lc3fc3@lc3fbe)) (values (list 'ref lc3fc8@var) lc3fc7@maps)))) (values (list 'quote lc3f9e@e) lc3fa0@maps))))) lc3fb3@ls/false) (let ((lc3fcb@t lc3fb1@t)) (let ((lc3fcd@ls/false (lc30ba@syntax-dispatch lc3fcb@t '(any any)))) (if (and lc3fcd@ls/false (apply (lambda (lc3fcf@dots lc3fd0@e) (lc3fa1@ellipsis? lc3fcf@dots)) lc3fcd@ls/false)) (apply (lambda (lc3fd3@dots lc3fd4@e) (if lc3fa2@vec? (lc319a@syntax-violation '#f '"misplaced ellipsis in syntax form" lc3f9d@src) (lc3f26@gen-syntax lc3f9d@src lc3fd4@e lc3f9f@r lc3fa0@maps (lambda (lc3fd7@x) '#f) '#f))) lc3fcd@ls/false) (let ((lc3fd9@t lc3fcb@t)) (let ((lc3fdb@ls/false (lc30ba@syntax-dispatch lc3fd9@t '(any any . any)))) (if (and lc3fdb@ls/false (apply (lambda (lc3fdd@x lc3fde@dots lc3fdf@y) (lc3fa1@ellipsis? lc3fde@dots)) lc3fdb@ls/false)) (apply (lambda (lc3fe3@x lc3fe4@dots lc3fe5@y) (let lc3ffb@f ((lc3fe9@y lc3fe5@y) (lc3fea@k (lambda (lc3fed@maps) (call-with-values (lambda () (lc3f26@gen-syntax lc3f9d@src lc3fe3@x lc3f9f@r (cons '() lc3fed@maps) lc3fa1@ellipsis? '#f)) (lambda (lc3ff3@lc3ff0 lc3ff4@lc3ff2) (let ((lc3ff7@maps lc3ff4@lc3ff2) (lc3ff8@x lc3ff3@lc3ff0)) (if (null? (car lc3ff7@maps)) (lc319a@syntax-violation '#f '"extra ellipsis in syntax form" lc3f9d@src) (values (lc3f2e@gen-map lc3ff8@x (car lc3ff7@maps)) (cdr lc3ff7@maps))))))))) (let ((lc3ffd@t lc3fe9@y)) (let ((lc3fff@ls/false (lc30ba@syntax-dispatch lc3ffd@t '()))) (if lc3fff@ls/false (apply (lambda () (lc3fea@k lc3fa0@maps)) lc3fff@ls/false) (let ((lc4001@t lc3ffd@t)) (let ((lc4003@ls/false (lc30ba@syntax-dispatch lc4001@t '(any . any)))) (if (and lc4003@ls/false (apply (lambda (lc4005@dots lc4006@y) (lc3fa1@ellipsis? lc4005@dots)) lc4003@ls/false)) (apply (lambda (lc4009@dots lc400a@y) (lc3ffb@f lc400a@y (lambda (lc400d@maps) (call-with-values (lambda () (lc3fea@k (cons '() lc400d@maps))) (lambda (lc4013@lc4010 lc4014@lc4012) (let ((lc4017@maps lc4014@lc4012) (lc4018@x lc4013@lc4010)) (if (null? (car lc4017@maps)) (lc319a@syntax-violation '#f '"extra ellipsis in syntax form" lc3f9d@src) (values (lc3f2c@gen-mappend lc4018@x (car lc4017@maps)) (cdr lc4017@maps))))))))) lc4003@ls/false) (let ((lc401b@t lc4001@t)) (let ((lc401d@ls/false (lc30ba@syntax-dispatch lc401b@t '_))) (if lc401d@ls/false (apply (lambda () (call-with-values (lambda () (lc3f26@gen-syntax lc3f9d@src lc3fe9@y lc3f9f@r lc3fa0@maps lc3fa1@ellipsis? lc3fa2@vec?)) (lambda (lc4023@lc4020 lc4024@lc4022) (let ((lc4027@maps lc4024@lc4022) (lc4028@y lc4023@lc4020)) (call-with-values (lambda () (lc3fea@k lc4027@maps)) (lambda (lc402f@lc402c lc4030@lc402e) (let ((lc4033@maps lc4030@lc402e) (lc4034@x lc402f@lc402c)) (values (lc3f2a@gen-append lc4034@x lc4028@y) lc4033@maps)))))))) lc401d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc401b@t)))))))))))) lc3fdb@ls/false) (let ((lc4037@t lc3fd9@t)) (let ((lc4039@ls/false (lc30ba@syntax-dispatch lc4037@t '(any . any)))) (if lc4039@ls/false (apply (lambda (lc403b@x lc403c@y) (call-with-values (lambda () (lc3f26@gen-syntax lc3f9d@src lc403b@x lc3f9f@r lc3fa0@maps lc3fa1@ellipsis? '#f)) (lambda (lc4043@lc4040 lc4044@lc4042) (let ((lc4047@maps lc4044@lc4042) (lc4048@xnew lc4043@lc4040)) (call-with-values (lambda () (lc3f26@gen-syntax lc3f9d@src lc403c@y lc3f9f@r lc4047@maps lc3fa1@ellipsis? lc3fa2@vec?)) (lambda (lc404f@lc404c lc4050@lc404e) (let ((lc4053@maps lc4050@lc404e) (lc4054@ynew lc404f@lc404c)) (values (lc3f30@gen-cons lc3f9e@e lc403b@x lc403c@y lc4048@xnew lc4054@ynew) lc4053@maps)))))))) lc4039@ls/false) (let ((lc4057@t lc4037@t)) (let ((lc4059@ls/false (lc30ba@syntax-dispatch lc4057@t '#(vector each-any)))) (if lc4059@ls/false (apply (lambda (lc405b@ls) (call-with-values (lambda () (lc3f26@gen-syntax lc3f9d@src lc405b@ls lc3f9f@r lc3fa0@maps lc3fa1@ellipsis? '#t)) (lambda (lc4061@lc405e lc4062@lc4060) (let ((lc4065@maps lc4062@lc4060) (lc4066@lsnew lc4061@lc405e)) (values (lc3f32@gen-vector lc3f9e@e lc405b@ls lc4066@lsnew) lc4065@maps))))) lc4059@ls/false) (let ((lc4069@t lc4057@t)) (let ((lc406b@ls/false (lc30ba@syntax-dispatch lc4069@t '_))) (if lc406b@ls/false (apply (lambda () (values (list 'quote lc3f9e@e) lc3fa0@maps)) lc406b@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4069@t)))))))))))))))))))))))) (lc3f28@gen-ref (lambda (lc3f83@src lc3f84@var lc3f85@level lc3f86@maps) (if (= lc3f85@level '0) (values lc3f84@var lc3f86@maps) (if (null? lc3f86@maps) (lc319a@syntax-violation '#f '"missing ellipsis in syntax form" lc3f83@src) (call-with-values (lambda () (lc3f28@gen-ref lc3f83@src lc3f84@var (- lc3f85@level '1) (cdr lc3f86@maps))) (lambda (lc3f8f@lc3f8c lc3f90@lc3f8e) (let ((lc3f93@outer-maps lc3f90@lc3f8e) (lc3f94@outer-var lc3f8f@lc3f8c)) (let ((lc3f97@t (assq lc3f94@outer-var (car lc3f86@maps)))) (if lc3f97@t ((lambda (lc3f99@b) (values (cdr lc3f99@b) lc3f86@maps)) lc3f97@t) (let ((lc3f9b@inner-var (lc2e3b@gen-lexical 'tmp))) (values lc3f9b@inner-var (cons (cons (cons lc3f94@outer-var lc3f9b@inner-var) (car lc3f86@maps)) lc3f93@outer-maps)))))))))))) (lc3f2a@gen-append (lambda (lc3f7f@x lc3f80@y) (if (fast-equal? lc3f80@y ''()) lc3f7f@x (list 'append lc3f7f@x lc3f80@y)))) (lc3f2c@gen-mappend (lambda (lc3f7b@e lc3f7c@map-env) (list 'apply '(primitive append) (lc3f2e@gen-map lc3f7b@e lc3f7c@map-env)))) (lc3f2e@gen-map (lambda (lc3f69@e lc3f6a@map-env) (let ((lc3f6d@formals (map cdr lc3f6a@map-env)) (lc3f6e@actuals (map (lambda (lc3f71@x) (list 'ref (car lc3f71@x))) lc3f6a@map-env))) (if (eq? (car lc3f69@e) 'ref) (car lc3f6e@actuals) (if (for-all (lambda (lc3f73@x) (and (eq? (car lc3f73@x) 'ref) (memq (cadr lc3f73@x) lc3f6d@formals))) (cdr lc3f69@e)) (let ((lc3f75@args (map (let ((lc3f77@r (map cons lc3f6d@formals lc3f6e@actuals))) (lambda (lc3f79@x) (cdr (assq (cadr lc3f79@x) lc3f77@r)))) (cdr lc3f69@e)))) (cons 'map (cons (list 'primitive (car lc3f69@e)) lc3f75@args))) (cons* 'map (list 'lambda lc3f6d@formals lc3f69@e) lc3f6e@actuals)))))) (lc3f30@gen-cons (lambda (lc3f59@e lc3f5a@x lc3f5b@y lc3f5c@xnew lc3f5d@ynew) (let ((lc3f63@t (car lc3f5d@ynew))) (if (memv lc3f63@t '(quote)) (if (eq? (car lc3f5c@xnew) 'quote) (let ((lc3f65@xnew (cadr lc3f5c@xnew)) (lc3f66@ynew (cadr lc3f5d@ynew))) (if (and (eq? lc3f65@xnew lc3f5a@x) (eq? lc3f66@ynew lc3f5b@y)) (list 'quote lc3f59@e) (list 'quote (cons lc3f65@xnew lc3f66@ynew)))) (if (null? (cadr lc3f5d@ynew)) (list 'list lc3f5c@xnew) (list 'cons lc3f5c@xnew lc3f5d@ynew))) (if (memv lc3f63@t '(list)) (cons 'list (cons lc3f5c@xnew (cdr lc3f5d@ynew))) (list 'cons lc3f5c@xnew lc3f5d@ynew)))))) (lc3f32@gen-vector (lambda (lc3f53@e lc3f54@ls lc3f55@lsnew) (if (eq? (car lc3f55@lsnew) 'quote) (if (eq? (cadr lc3f55@lsnew) lc3f54@ls) (list 'quote lc3f53@e) (list 'quote (list->vector (cadr lc3f55@lsnew)))) (if (eq? (car lc3f55@lsnew) 'list) (cons 'vector (cdr lc3f55@lsnew)) (list 'list->vector lc3f55@lsnew))))) (lc3f34@regen (lambda (lc3f4d@x) (let ((lc3f4f@t (car lc3f4d@x))) (if (memv lc3f4f@t '(ref)) (cadr lc3f4d@x) (if (memv lc3f4f@t '(primitive)) (list 'primitive (cadr lc3f4d@x)) (if (memv lc3f4f@t '(quote)) (list 'quote (cadr lc3f4d@x)) (if (memv lc3f4f@t '(lambda)) (lc2e16@lc2d48@build-lambda '#f (cadr lc3f4d@x) (lc3f34@regen (caddr lc3f4d@x))) (if (memv lc3f4f@t '(map)) (let ((lc3f51@ls (map lc3f34@regen (cdr lc3f4d@x)))) (cons '(primitive ellipsis-map) lc3f51@ls)) (cons (list 'primitive (car lc3f4d@x)) (map lc3f34@regen (cdr lc3f4d@x)))))))))))) (lambda (lc3f35@e lc3f36@r lc3f37@mr) (let ((lc3f3b@t lc3f35@e)) (let ((lc3f3d@ls/false (lc30ba@syntax-dispatch lc3f3b@t '(_ any)))) (if lc3f3d@ls/false (apply (lambda (lc3f3f@x) (call-with-values (lambda () (lc3f26@gen-syntax lc3f35@e lc3f3f@x lc3f36@r '() lc30bc@ellipsis? '#f)) (lambda (lc3f45@lc3f42 lc3f46@lc3f44) (let ((lc3f49@maps lc3f46@lc3f44) (lc3f4a@e lc3f45@lc3f42)) (lc3f34@regen lc3f4a@e))))) lc3f3d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc3f3b@t))))))) (set! lc4b96@lc30c6@syntax-transformer lc30c6@syntax-transformer) (set! lc30c8@core-macro-transformer (lambda (lc406d@name) (let ((lc406f@t lc406d@name)) (if (memv lc406f@t '(quote)) lc306a@quote-transformer (if (memv lc406f@t '(lambda)) lc306e@lambda-transformer (if (memv lc406f@t '(case-lambda)) lc306c@case-lambda-transformer (if (memv lc406f@t '(letrec)) lc3052@letrec-transformer (if (memv lc406f@t '(letrec*)) lc3054@letrec*-transformer (if (memv lc406f@t '(let)) lc3050@let-transformer (if (memv lc406f@t '(if)) lc3062@if-transformer (if (memv lc406f@t '(and)) lc3064@and-transformer (if (memv lc406f@t '(or)) lc3066@or-transformer (if (memv lc406f@t '(foreign-call)) lc30b6@foreign-call-transformer (if (memv lc406f@t '(syntax-case)) lc30c2@syntax-case-transformer (if (memv lc406f@t '(syntax)) lc30c6@syntax-transformer (if (memv lc406f@t '(type-descriptor)) lc3058@type-descriptor-transformer (if (memv lc406f@t '(record-type-descriptor)) lc305a@record-type-descriptor-transformer (if (memv lc406f@t '(record-constructor-descriptor)) lc305c@record-constructor-descriptor-transformer (if (memv lc406f@t '(fluid-let-syntax)) lc3056@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" lc406d@name)))))))))))))))))))) (set! lc4b97@lc30c8@core-macro-transformer lc30c8@core-macro-transformer) (set! lc30ca@symbol-macro (lambda (lc4071@x lc4072@set) (let ((lc4075@t lc4071@x)) (let ((lc4077@ls/false (lc30ba@syntax-dispatch lc4075@t '(_ any)))) (if (and lc4077@ls/false (apply (lambda (lc4079@name) (and (lc2eb3@id? lc4079@name) (memq (lc2eb5@id->sym lc4079@name) lc4072@set))) lc4077@ls/false)) (apply (lambda (lc407b@name) (lc3070@bless (list 'quote lc407b@name))) lc4077@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4075@t)))))) (set! lc4b98@lc30ca@symbol-macro lc30ca@symbol-macro) (set! lc30cc@macro-transformer (lambda (lc407d@x) (if (procedure? lc407d@x) lc407d@x (if (symbol? lc407d@x) (let ((lc407f@t lc407d@x)) (if (memv lc407f@t '(define-record-type)) lc30ae@define-record-type-macro (if (memv lc407f@t '(define-struct)) lc30ac@define-struct-macro (if (memv lc407f@t '(include)) lc30a2@include-macro (if (memv lc407f@t '(cond)) lc309e@cond-macro (if (memv lc407f@t '(let)) lc3076@let-macro (if (memv lc407f@t '(do)) lc3096@do-macro (if (memv lc407f@t '(or)) lc309a@or-macro (if (memv lc407f@t '(and)) lc309c@and-macro (if (memv lc407f@t '(let*)) lc3098@let*-macro (if (memv lc407f@t '(let-values)) lc3078@let-values-macro (if (memv lc407f@t '(let*-values)) lc307a@let*-values-macro (if (memv lc407f@t '(syntax-rules)) lc30a6@syntax-rules-macro (if (memv lc407f@t '(quasiquote)) lc30a8@quasiquote-macro (if (memv lc407f@t '(quasisyntax)) lc30aa@quasisyntax-macro (if (memv lc407f@t '(with-syntax)) lc3072@with-syntax-macro (if (memv lc407f@t '(when)) lc305e@when-macro (if (memv lc407f@t '(unless)) lc3060@unless-macro (if (memv lc407f@t '(case)) lc3068@case-macro (if (memv lc407f@t '(identifier-syntax)) lc3094@identifier-syntax-macro (if (memv lc407f@t '(time)) lc308c@time-macro (if (memv lc407f@t '(delay)) lc308e@delay-macro (if (memv lc407f@t '(assert)) lc3090@assert-macro (if (memv lc407f@t '(endianness)) lc3092@endianness-macro (if (memv lc407f@t '(guard)) lc3088@guard-macro (if (memv lc407f@t '(define-enumeration)) lc308a@define-enumeration-macro (if (memv lc407f@t '(trace-lambda)) lc307c@trace-lambda-macro (if (memv lc407f@t '(trace-define)) lc307e@trace-define-macro (if (memv lc407f@t '(trace-define-syntax)) lc3080@trace-define-syntax-macro (if (memv lc407f@t '(trace-let-syntax)) lc3084@trace-let-syntax-macro (if (memv lc407f@t '(trace-letrec-syntax)) lc3086@trace-letrec-syntax-macro (if (memv lc407f@t '(define-condition-type)) lc30b0@define-condition-type-macro (if (memv lc407f@t '(parameterize)) lc30b4@parameterize-macro (if (memv lc407f@t '(include-into)) lc30a4@include-into-macro (if (memv lc407f@t '(eol-style)) (lambda (lc4081@x) (lc30ca@symbol-macro lc4081@x '(none lf cr crlf nel crnel ls))) (if (memv lc407f@t '(error-handling-mode)) (lambda (lc4083@x) (lc30ca@symbol-macro lc4083@x '(ignore raise replace))) (if (memv lc407f@t '(buffer-mode)) (lambda (lc4085@x) (lc30ca@symbol-macro lc4085@x '(none line block))) (if (memv lc407f@t '(file-options)) lc2e2e@file-options-macro (if (memv lc407f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) lc30b2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" lc407d@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" lc407d@x))))) (set! lc4b99@lc30cc@macro-transformer lc30cc@macro-transformer) (set! lc30ce@local-macro-transformer (lambda (lc4087@x) (car lc4087@x))) (set! lc4b9a@lc30ce@local-macro-transformer lc30ce@local-macro-transformer) (set! lc30d0@do-macro-call (lambda (lc4089@transformer lc408a@expr) (let ((lc408d@out (lc4089@transformer (lc2e9d@add-mark lc2e97@anti-mark lc408a@expr '#f)))) (begin (let lc4091@f ((lc408f@x lc408d@out)) (if (not (lc2e7f@stx? lc408f@x)) (if (pair? lc408f@x) (begin (lc4091@f (car lc408f@x)) (lc4091@f (cdr lc408f@x))) (if (vector? lc408f@x) (vector-for-each lc4091@f lc408f@x) (if (symbol? lc408f@x) (lc319a@syntax-violation '#f '"raw symbol encountered in output of macro" lc408a@expr lc408f@x) (void)))) (void))) (lc2e9d@add-mark (lc2e95@gen-mark) lc408d@out lc408a@expr))))) (set! lc4b9b@lc30d0@do-macro-call lc30d0@do-macro-call) (set! lc30d2@chi-macro (lambda (lc4093@p lc4094@e) (lc30d0@do-macro-call (lc30cc@macro-transformer lc4093@p) lc4094@e))) (set! lc4b9c@lc30d2@chi-macro lc30d2@chi-macro) (set! lc30d4@chi-local-macro (lambda (lc4097@p lc4098@e) (lc30d0@do-macro-call (lc30ce@local-macro-transformer lc4097@p) lc4098@e))) (set! lc4b9d@lc30d4@chi-local-macro lc30d4@chi-local-macro) (set! lc30d6@chi-global-macro (lambda (lc409b@p lc409c@e) (let ((lc409f@lib (car lc409b@p)) (lc40a0@loc (cdr lc409b@p))) (begin (lc2cd0@lc2b1f@visit-library lc409f@lib) (let ((lc40a3@x (symbol-value lc40a0@loc))) (let ((lc40a5@transformer (if (procedure? lc40a3@x) lc40a3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" lc40a3@x)))) (lc30d0@do-macro-call lc40a5@transformer lc409c@e))))))) (set! lc4b9e@lc30d6@chi-global-macro lc30d6@chi-global-macro) (set! lc30d8@chi-expr* (lambda (lc40a7@e* lc40a8@r lc40a9@mr) (if (null? lc40a7@e*) '() (let ((lc40ad@e (lc30dc@chi-expr (car lc40a7@e*) lc40a8@r lc40a9@mr))) (cons lc40ad@e (lc30d8@chi-expr* (cdr lc40a7@e*) lc40a8@r lc40a9@mr)))))) (set! lc4b9f@lc30d8@chi-expr* lc30d8@chi-expr*) (set! lc30da@chi-application (lambda (lc40af@e lc40b0@r lc40b1@mr) (let ((lc40b5@t lc40af@e)) (let ((lc40b7@ls/false (lc30ba@syntax-dispatch lc40b5@t '(any . each-any)))) (if lc40b7@ls/false (apply (lambda (lc40b9@rator lc40ba@rands) (let ((lc40bd@rator (lc30dc@chi-expr lc40b9@rator lc40b0@r lc40b1@mr))) (cons lc40bd@rator (lc30d8@chi-expr* lc40ba@rands lc40b0@r lc40b1@mr)))) lc40b7@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc40b5@t)))))) (set! lc4ba0@lc30da@chi-application lc30da@chi-application) (set! lc30dc@chi-expr (lambda (lc40bf@e lc40c0@r lc40c1@mr) (call-with-values (lambda () (lc2ed5@syntax-type lc40bf@e lc40c0@r)) (lambda (lc40cb@lc40c6 lc40cc@lc40c8 lc40cd@lc40ca) (let ((lc40d1@kwd lc40cd@lc40ca) (lc40d2@value lc40cc@lc40c8) (lc40d3@type lc40cb@lc40c6)) (let ((lc40d7@t lc40d3@type)) (if (memv lc40d7@t '(core-macro)) (let ((lc40d9@transformer (lc30c8@core-macro-transformer lc40d2@value))) (lc40d9@transformer lc40bf@e lc40c0@r lc40c1@mr)) (if (memv lc40d7@t '(global)) (let ((lc40db@lib (car lc40d2@value))) (let ((lc40dd@loc (cdr lc40d2@value))) (begin ((lc3122@inv-collector) lc40db@lib) lc40dd@loc))) (if (memv lc40d7@t '(core-prim)) (let ((lc40df@name lc40d2@value)) (list 'primitive lc40df@name)) (if (memv lc40d7@t '(call)) (lc30da@chi-application lc40bf@e lc40c0@r lc40c1@mr) (if (memv lc40d7@t '(lexical)) (let ((lc40e1@lex (lc3044@lexical-var lc40d2@value))) lc40e1@lex) (if (memv lc40d7@t '(global-macro global-macro!)) (lc30dc@chi-expr (lc30d6@chi-global-macro lc40d2@value lc40bf@e) lc40c0@r lc40c1@mr) (if (memv lc40d7@t '(local-macro local-macro!)) (lc30dc@chi-expr (lc30d4@chi-local-macro lc40d2@value lc40bf@e) lc40c0@r lc40c1@mr) (if (memv lc40d7@t '(macro macro!)) (lc30dc@chi-expr (lc30d2@chi-macro lc40d2@value lc40bf@e) lc40c0@r lc40c1@mr) (if (memv lc40d7@t '(constant)) (let ((lc40e3@datum lc40d2@value)) (list 'quote lc40e3@datum)) (if (memv lc40d7@t '(set!)) (lc30de@chi-set! lc40bf@e lc40c0@r lc40c1@mr) (if (memv lc40d7@t '(begin)) (let ((lc40e5@t lc40bf@e)) (let ((lc40e7@ls/false (lc30ba@syntax-dispatch lc40e5@t '(_ any . each-any)))) (if lc40e7@ls/false (apply (lambda (lc40e9@x lc40ea@x*) (lc2e18@lc2d78@build-sequence '#f (lc30d8@chi-expr* (cons lc40e9@x lc40ea@x*) lc40c0@r lc40c1@mr))) lc40e7@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc40e5@t)))) (if (memv lc40d7@t '(let-syntax letrec-syntax)) (let ((lc40ed@t lc40bf@e)) (let ((lc40ef@ls/false (lc30ba@syntax-dispatch lc40ed@t '(_ #(each (any any)) any . each-any)))) (if (and lc40ef@ls/false (apply (lambda (lc40f1@xlhs* lc40f2@xrhs* lc40f3@xbody lc40f4@xbody*) (if (not (lc2ebb@valid-bound-ids? lc40f1@xlhs*)) (lc319a@syntax-violation '#f '"invalid identifiers" lc40bf@e) (void))) lc40ef@ls/false)) (apply (lambda (lc40f9@xlhs* lc40fa@xrhs* lc40fb@xbody lc40fc@xbody*) (let ((lc4101@xlab* (map lc2e3f@gen-label lc40f9@xlhs*))) (let ((lc4103@xrib (lc2e73@make-full-rib lc40f9@xlhs* lc4101@xlab*))) (let ((lc4105@xb* (map (lambda (lc4107@x) (lc2eeb@make-eval-transformer (lc3114@expand-transformer (if (eq? lc40d3@type 'let-syntax) lc4107@x (lc2e9f@add-subst lc4103@xrib lc4107@x)) lc40c1@mr))) lc40fa@xrhs*))) (lc2e18@lc2d78@build-sequence '#f (lc30d8@chi-expr* (map (lambda (lc4109@x) (lc2e9f@add-subst lc4103@xrib lc4109@x)) (cons lc40fb@xbody lc40fc@xbody*)) (append (map cons lc4101@xlab* lc4105@xb*) lc40c0@r) (append (map cons lc4101@xlab* lc4105@xb*) lc40c1@mr))))))) lc40ef@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc40ed@t)))) (if (memv lc40d7@t '(displaced-lexical)) (lc319a@syntax-violation '#f '"identifier out of context" lc40bf@e) (if (memv lc40d7@t '(syntax)) (lc319a@syntax-violation '#f '"reference to pattern variable outside a syntax form" lc40bf@e) (if (memv lc40d7@t '(define define-syntax module import library)) (lc319a@syntax-violation '#f (string-append (let ((lc410b@t lc40d3@type)) (if (memv lc410b@t '(define)) '"a definition" (if (memv lc410b@t '(define-syntax)) '"a define-syntax" (if (memv lc410b@t '(module)) '"a module definition" (if (memv lc410b@t '(library)) '"a library definition" (if (memv lc410b@t '(import)) '"an import declaration" (if (memv lc410b@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") lc40bf@e) (if (memv lc40d7@t '(mutable)) (lc319a@syntax-violation '#f '"attempt to reference an unexportable variable" lc40bf@e) (lc319a@syntax-violation '#f '"invalid expression" lc40bf@e))))))))))))))))))))))) (set! lc4ba1@lc30dc@chi-expr lc30dc@chi-expr) (set! lc30de@chi-set! (lambda (lc410d@e lc410e@r lc410f@mr) (let ((lc4113@t lc410d@e)) (let ((lc4115@ls/false (lc30ba@syntax-dispatch lc4113@t '(_ any any)))) (if (and lc4115@ls/false (apply (lambda (lc4117@x lc4118@v) (lc2eb3@id? lc4117@x)) lc4115@ls/false)) (apply (lambda (lc411b@x lc411c@v) (call-with-values (lambda () (lc2ed5@syntax-type lc411b@x lc410e@r)) (lambda (lc4125@lc4120 lc4126@lc4122 lc4127@lc4124) (let ((lc412b@kwd lc4127@lc4124) (lc412c@value lc4126@lc4122) (lc412d@type lc4125@lc4120)) (let ((lc4131@t lc412d@type)) (if (memv lc4131@t '(lexical)) (begin (lc3048@set-lexical-mutable! lc412c@value '#t) (list 'set! (lc3044@lexical-var lc412c@value) (lc30dc@chi-expr lc411c@v lc410e@r lc410f@mr))) (if (memv lc4131@t '(core-prim)) (lc319a@syntax-violation '#f '"cannot modify imported core primitive" lc410d@e) (if (memv lc4131@t '(global)) (lc319a@syntax-violation '#f '"attempt to modify imported binding" lc410d@e) (if (memv lc4131@t '(global-macro!)) (lc30dc@chi-expr (lc30d6@chi-global-macro lc412c@value lc410d@e) lc410e@r lc410f@mr) (if (memv lc4131@t '(local-macro!)) (lc30dc@chi-expr (lc30d4@chi-local-macro lc412c@value lc410d@e) lc410e@r lc410f@mr) (if (memv lc4131@t '(mutable)) (lc319a@syntax-violation '#f '"attempt to assign to an unexportable variable" lc410d@e) (lc319a@syntax-violation '#f '"invalid syntax" lc410d@e)))))))))))) lc4115@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4113@t)))))) (set! lc4ba2@lc30de@chi-set! lc30de@chi-set!) (set! lc30e0@verify-formals (lambda (lc4133@fmls lc4134@stx) (let ((lc4137@t lc4133@fmls)) (let ((lc4139@ls/false (lc30ba@syntax-dispatch lc4137@t 'each-any))) (if lc4139@ls/false (apply (lambda (lc413b@x*) (if (not (lc2ebb@valid-bound-ids? lc413b@x*)) (lc3074@invalid-fmls-error lc4134@stx lc4133@fmls) (void))) lc4139@ls/false) (let ((lc413d@t lc4137@t)) (let ((lc413f@ls/false (lc30ba@syntax-dispatch lc413d@t '#(each+ any () any)))) (if lc413f@ls/false (apply (lambda (lc4141@x* lc4142@x) (if (not (lc2ebb@valid-bound-ids? (cons lc4142@x lc4141@x*))) (lc3074@invalid-fmls-error lc4134@stx lc4133@fmls) (void))) lc413f@ls/false) (let ((lc4145@t lc413d@t)) (let ((lc4147@ls/false (lc30ba@syntax-dispatch lc4145@t '_))) (if lc4147@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid syntax" lc4134@stx)) lc4147@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4145@t)))))))))))) (set! lc4ba3@lc30e0@verify-formals lc30e0@verify-formals) (set! lc30e2@chi-lambda-clause (lambda (lc4149@stx lc414a@fmls lc414b@body* lc414c@r lc414d@mr) (let ((lc4153@t lc414a@fmls)) (let ((lc4155@ls/false (lc30ba@syntax-dispatch lc4153@t 'each-any))) (if lc4155@ls/false (apply (lambda (lc4157@x*) (begin (lc30e0@verify-formals lc414a@fmls lc4149@stx) (let ((lc4159@lex* (map lc2e3b@gen-lexical lc4157@x*)) (lc415a@lab* (map lc2e3f@gen-label lc4157@x*))) (values lc4159@lex* (lc30f2@chi-internal (lc2e9f@add-subst (lc2e73@make-full-rib lc4157@x* lc415a@lab*) lc414b@body*) (lc304c@add-lexicals lc415a@lab* lc4159@lex* lc414c@r) lc414d@mr))))) lc4155@ls/false) (let ((lc415d@t lc4153@t)) (let ((lc415f@ls/false (lc30ba@syntax-dispatch lc415d@t '#(each+ any () any)))) (if lc415f@ls/false (apply (lambda (lc4161@x* lc4162@x) (begin (lc30e0@verify-formals lc414a@fmls lc4149@stx) (let ((lc4165@lex* (map lc2e3b@gen-lexical lc4161@x*)) (lc4166@lab* (map lc2e3f@gen-label lc4161@x*)) (lc4167@lex (lc2e3b@gen-lexical lc4162@x)) (lc4168@lab (lc2e3f@gen-label lc4162@x))) (values (append lc4165@lex* lc4167@lex) (lc30f2@chi-internal (lc2e9f@add-subst (lc2e73@make-full-rib (cons lc4162@x lc4161@x*) (cons lc4168@lab lc4166@lab*)) lc414b@body*) (lc304c@add-lexicals (cons lc4168@lab lc4166@lab*) (cons lc4167@lex lc4165@lex*) lc414c@r) lc414d@mr))))) lc415f@ls/false) (let ((lc416d@t lc415d@t)) (let ((lc416f@ls/false (lc30ba@syntax-dispatch lc416d@t '_))) (if lc416f@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid syntax" lc414a@fmls)) lc416f@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc416d@t)))))))))))) (set! lc4ba4@lc30e2@chi-lambda-clause lc30e2@chi-lambda-clause) (set! lc30e4@chi-lambda-clause* (lambda (lc4171@stx lc4172@fmls* lc4173@body** lc4174@r lc4175@mr) (if (null? lc4172@fmls*) (values '() '()) (call-with-values (lambda () (lc30e2@chi-lambda-clause lc4171@stx (car lc4172@fmls*) (car lc4173@body**) lc4174@r lc4175@mr)) (lambda (lc417f@lc417c lc4180@lc417e) (let ((lc4183@b lc4180@lc417e) (lc4184@a lc417f@lc417c)) (call-with-values (lambda () (lc30e4@chi-lambda-clause* lc4171@stx (cdr lc4172@fmls*) (cdr lc4173@body**) lc4174@r lc4175@mr)) (lambda (lc418b@lc4188 lc418c@lc418a) (let ((lc418f@b* lc418c@lc418a) (lc4190@a* lc418b@lc4188)) (values (cons lc4184@a lc4190@a*) (cons lc4183@b lc418f@b*))))))))))) (set! lc4ba5@lc30e4@chi-lambda-clause* lc30e4@chi-lambda-clause*) (set! lc30e6@chi-defun (lambda (lc4193@x lc4194@r lc4195@mr) (let ((lc4199@fmls (car lc4193@x)) (lc419a@body* (cdr lc4193@x))) (call-with-values (lambda () (lc30e2@chi-lambda-clause lc4199@fmls lc4199@fmls lc419a@body* lc4194@r lc4195@mr)) (lambda (lc41a1@lc419e lc41a2@lc41a0) (let ((lc41a5@body lc41a2@lc41a0) (lc41a6@fmls lc41a1@lc419e)) (lc2e16@lc2d48@build-lambda '#f lc41a6@fmls lc41a5@body))))))) (set! lc4ba6@lc30e6@chi-defun lc30e6@chi-defun) (set! lc30e8@chi-rhs (lambda (lc41a9@rhs lc41aa@r lc41ab@mr) (let ((lc41af@t (car lc41a9@rhs))) (if (memv lc41af@t '(defun)) (lc30e6@chi-defun (cdr lc41a9@rhs) lc41aa@r lc41ab@mr) (if (memv lc41af@t '(expr)) (let ((lc41b1@expr (cdr lc41a9@rhs))) (lc30dc@chi-expr lc41b1@expr lc41aa@r lc41ab@mr)) (if (memv lc41af@t '(top-expr)) (let ((lc41b3@expr (cdr lc41a9@rhs))) (lc2e18@lc2d78@build-sequence '#f (list (lc30dc@chi-expr lc41b3@expr lc41aa@r lc41ab@mr) (lc2e19@lc2d7a@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" lc41a9@rhs))))))) (set! lc4ba7@lc30e8@chi-rhs lc30e8@chi-rhs) (set! lc30ea@expand-interaction-rhs*/init* (lambda (lc41b5@lhs* lc41b6@rhs* lc41b7@init* lc41b8@r lc41b9@mr) (let lc41c3@f ((lc41bf@lhs* lc41b5@lhs*) (lc41c0@rhs* lc41b6@rhs*)) (if (null? lc41bf@lhs*) (map (lambda (lc41c5@x) (lc30dc@chi-expr lc41c5@x lc41b8@r lc41b9@mr)) lc41b7@init*) (let ((lc41c7@lhs (car lc41bf@lhs*)) (lc41c8@rhs (car lc41c0@rhs*))) (let ((lc41cb@t (car lc41c8@rhs))) (if (memv lc41cb@t '(defun)) (let ((lc41cd@rhs (lc30e6@chi-defun (cdr lc41c8@rhs) lc41b8@r lc41b9@mr))) (cons (list 'set! lc41c7@lhs lc41cd@rhs) (lc41c3@f (cdr lc41bf@lhs*) (cdr lc41c0@rhs*)))) (if (memv lc41cb@t '(expr)) (let ((lc41cf@rhs (lc30dc@chi-expr (cdr lc41c8@rhs) lc41b8@r lc41b9@mr))) (cons (list 'set! lc41c7@lhs lc41cf@rhs) (lc41c3@f (cdr lc41bf@lhs*) (cdr lc41c0@rhs*)))) (if (memv lc41cb@t '(top-expr)) (let ((lc41d1@e (lc30dc@chi-expr (cdr lc41c8@rhs) lc41b8@r lc41b9@mr))) (cons lc41d1@e (lc41c3@f (cdr lc41bf@lhs*) (cdr lc41c0@rhs*)))) (error 'expand-interaction '"invallid" lc41c8@rhs)))))))))) (set! lc4ba8@lc30ea@expand-interaction-rhs*/init* lc30ea@expand-interaction-rhs*/init*) (set! lc30ec@chi-rhs* (lambda (lc41d3@rhs* lc41d4@r lc41d5@mr) (let lc41db@f ((lc41d9@ls lc41d3@rhs*)) (if (null? lc41d9@ls) '() (let ((lc41dd@a (lc30e8@chi-rhs (car lc41d9@ls) lc41d4@r lc41d5@mr))) (cons lc41dd@a (lc41db@f (cdr lc41d9@ls)))))))) (set! lc4ba9@lc30ec@chi-rhs* lc30ec@chi-rhs*) (set! lc30ee@find-bound=? (lambda (lc41df@x lc41e0@lhs* lc41e1@rhs*) (if (null? lc41e0@lhs*) '#f (if (lc2eb7@bound-id=? lc41df@x (car lc41e0@lhs*)) (car lc41e1@rhs*) (lc30ee@find-bound=? lc41df@x (cdr lc41e0@lhs*) (cdr lc41e1@rhs*)))))) (set! lc4baa@lc30ee@find-bound=? lc30ee@find-bound=?) (set! lc30f0@find-dups (lambda (lc41e5@ls) (let lc41eb@f ((lc41e7@ls lc41e5@ls) (lc41e8@dups '())) (if (null? lc41e7@ls) lc41e8@dups (let ((lc41ed@t (lc30ee@find-bound=? (car lc41e7@ls) (cdr lc41e7@ls) (cdr lc41e7@ls)))) (if lc41ed@t ((lambda (lc41ef@x) (lc41eb@f (cdr lc41e7@ls) (cons (list (car lc41e7@ls) lc41ef@x) lc41e8@dups))) lc41ed@t) (lc41eb@f (cdr lc41e7@ls) lc41e8@dups))))))) (set! lc4bab@lc30f0@find-dups lc30f0@find-dups) (set! lc30f2@chi-internal (lambda (lc41f1@e* lc41f2@r lc41f3@mr) (let ((lc41f7@rib (lc2e67@make-empty-rib))) (call-with-values (lambda () (lc3112@chi-body* (map (lambda (lc4209@x) (lc2e9f@add-subst lc41f7@rib lc4209@x)) (lc2eb1@syntax->list lc41f1@e*)) lc41f2@r lc41f3@mr '() '() '() '() '() lc41f7@rib '#f)) (lambda (lc420b@lc41fa lc420c@lc41fc lc420d@lc41fe lc420e@lc4200 lc420f@lc4202 lc4210@lc4204 lc4211@lc4206 lc4212@lc4208) (let ((lc421b@_exp* lc4212@lc4208) (lc421c@kwd* lc4211@lc4206) (lc421d@mod** lc4210@lc4204) (lc421e@rhs* lc420f@lc4202) (lc421f@lex* lc420e@lc4200) (lc4220@mr lc420d@lc41fe) (lc4221@r lc420c@lc41fc) (lc4222@e* lc420b@lc41fa)) (begin (if (null? lc4222@e*) (lc319a@syntax-violation '#f '"no expression in body" lc4222@e*) (void)) (let ((lc422b@init* (lc30d8@chi-expr* (append (apply append (reverse lc421d@mod**)) lc4222@e*) lc4221@r lc4220@mr))) (let ((lc422d@rhs* (lc30ec@chi-rhs* lc421e@rhs* lc4221@r lc4220@mr))) (lc2e1d@lc2d82@build-letrec* '#f (reverse lc421f@lex*) (reverse lc422d@rhs*) (lc2e18@lc2d78@build-sequence '#f lc422b@init*))))))))))) (set! lc4bac@lc30f2@chi-internal lc30f2@chi-internal) (set! lc30f4@parse-module (lambda (lc422f@e) (let ((lc4231@t lc422f@e)) (let ((lc4233@ls/false (lc30ba@syntax-dispatch lc4231@t '(_ each-any . each-any)))) (if lc4233@ls/false (apply (lambda (lc4235@export* lc4236@b*) (begin (if (not (for-all lc2eb3@id? lc4235@export*)) (lc319a@syntax-violation '#f '"module exports must be identifiers" lc422f@e) (void)) (values '#f (list->vector lc4235@export*) lc4236@b*))) lc4233@ls/false) (let ((lc4239@t lc4231@t)) (let ((lc423b@ls/false (lc30ba@syntax-dispatch lc4239@t '(_ any each-any . each-any)))) (if lc423b@ls/false (apply (lambda (lc423d@name lc423e@export* lc423f@b*) (begin (if (not (lc2eb3@id? lc423d@name)) (lc319a@syntax-violation '#f '"module name must be an identifier" lc422f@e) (void)) (if (not (for-all lc2eb3@id? lc423e@export*)) (lc319a@syntax-violation '#f '"module exports must be identifiers" lc422f@e) (void)) (values lc423d@name (list->vector lc423e@export*) lc423f@b*))) lc423b@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4239@t))))))))) (set! lc4bad@lc30f4@parse-module lc30f4@parse-module) (set! lc30fe@module-interface? (lambda (lc4243@x) (and (simple-struct? lc4243@x) (eq? (simple-struct-name lc4243@x) 'module-interface)))) (set! lc4bae@lc30fe@module-interface? lc30fe@module-interface?) (set! lc3100@module-interface-first-mark (lambda (lc4245@x) (simple-struct-ref lc4245@x '0))) (set! lc4baf@lc3100@module-interface-first-mark lc3100@module-interface-first-mark) (set! lc3102@set-module-interface-first-mark! (lambda (lc4247@x lc4248@val) (simple-struct-set! lc4247@x '0 lc4248@val))) (set! lc4bb0@lc3102@set-module-interface-first-mark! lc3102@set-module-interface-first-mark!) (set! lc3104@module-interface-exp-id-vec (lambda (lc424b@x) (simple-struct-ref lc424b@x '1))) (set! lc4bb1@lc3104@module-interface-exp-id-vec lc3104@module-interface-exp-id-vec) (set! lc3106@set-module-interface-exp-id-vec! (lambda (lc424d@x lc424e@val) (simple-struct-set! lc424d@x '1 lc424e@val))) (set! lc4bb2@lc3106@set-module-interface-exp-id-vec! lc3106@set-module-interface-exp-id-vec!) (set! lc3108@module-interface-exp-lab-vec (lambda (lc4251@x) (simple-struct-ref lc4251@x '2))) (set! lc4bb3@lc3108@module-interface-exp-lab-vec lc3108@module-interface-exp-lab-vec) (set! lc310a@set-module-interface-exp-lab-vec! (lambda (lc4253@x lc4254@val) (simple-struct-set! lc4253@x '2 lc4254@val))) (set! lc4bb4@lc310a@set-module-interface-exp-lab-vec! lc310a@set-module-interface-exp-lab-vec!) (set! lc310c@dummy '3) (set! lc4bb5@lc310c@dummy lc310c@dummy) (set! lc310e@module-interface-exp-id* (lambda (lc4257@iface lc4258@id) (letrec* ((lc425c@diff-marks (lambda (lc4263@ls lc4264@x) (begin (if (null? lc4263@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((lc4267@a (car lc4263@ls))) (if (eq? lc4267@a lc4264@x) '() (cons lc4267@a (lc425c@diff-marks (cdr lc4263@ls) lc4264@x)))))))) (let ((lc425d@diff (lc425c@diff-marks (lc2e85@stx-mark* lc4258@id) (lc3100@module-interface-first-mark lc4257@iface))) (lc425e@id-vec (lc3104@module-interface-exp-id-vec lc4257@iface))) (if (null? lc425d@diff) lc425e@id-vec (vector-map (lambda (lc4261@x) (make-simple-struct 'stx '5 (list (lc2e81@stx-expr lc4261@x) (append lc425d@diff (lc2e85@stx-mark* lc4261@x)) '() '()))) lc425e@id-vec)))))) (set! lc4bb6@lc310e@module-interface-exp-id* lc310e@module-interface-exp-id*) (set! lc3110@chi-internal-module (lambda (lc4269@e lc426a@r lc426b@mr lc426c@lex* lc426d@rhs* lc426e@mod** lc426f@kwd*) (call-with-values (lambda () (lc30f4@parse-module lc4269@e)) (lambda (lc427d@lc4278 lc427e@lc427a lc427f@lc427c) (let ((lc4283@e* lc427f@lc427c) (lc4284@exp-id* lc427e@lc427a) (lc4285@name lc427d@lc4278)) (let ((lc4289@rib (lc2e67@make-empty-rib))) (let ((lc428b@e* (map (lambda (lc428d@x) (lc2e9f@add-subst lc4289@rib lc428d@x)) (lc2eb1@syntax->list lc4283@e*)))) (call-with-values (lambda () (lc3112@chi-body* lc428b@e* lc426a@r lc426b@mr lc426c@lex* lc426d@rhs* lc426e@mod** lc426f@kwd* '() lc4289@rib '#f)) (lambda (lc429f@lc4290 lc42a0@lc4292 lc42a1@lc4294 lc42a2@lc4296 lc42a3@lc4298 lc42a4@lc429a lc42a5@lc429c lc42a6@lc429e) (let ((lc42af@_exp* lc42a6@lc429e) (lc42b0@kwd* lc42a5@lc429c) (lc42b1@mod** lc42a4@lc429a) (lc42b2@rhs* lc42a3@lc4298) (lc42b3@lex* lc42a2@lc4296) (lc42b4@mr lc42a1@lc4294) (lc42b5@r lc42a0@lc4292) (lc42b6@e* lc429f@lc4290)) (let ((lc42bf@exp-lab* (vector-map (lambda (lc42c3@x) (or (lc2ec9@id->label (make-simple-struct 'stx '5 (list (lc2eb5@id->sym lc42c3@x) (lc2e85@stx-mark* lc42c3@x) (list lc4289@rib) '()))) (lc319a@syntax-violation '#f '"cannot find module export" lc42c3@x))) lc4284@exp-id*)) (lc42c0@mod** (cons lc42b6@e* lc42b1@mod**))) (if (not lc4285@name) (values lc42b3@lex* lc42b2@rhs* lc4284@exp-id* lc42bf@exp-lab* lc42b5@r lc42b4@mr lc42c0@mod** lc42b0@kwd*) (let ((lc42c5@lab (lc2e3f@gen-label 'module)) (lc42c6@iface (make-simple-struct 'module-interface '4 (list (car (lc2e85@stx-mark* lc4285@name)) (vector-map (lambda (lc42c9@x) (make-simple-struct 'stx '5 (list (lc2e81@stx-expr lc42c9@x) (lc2e85@stx-mark* lc42c9@x) '() '()))) lc4284@exp-id*) lc42bf@exp-lab*)))) (values lc42b3@lex* lc42b2@rhs* (vector lc4285@name) (vector lc42c5@lab) (cons (cons lc42c5@lab (cons '$module lc42c6@iface)) lc42b5@r) (cons (cons lc42c5@lab (cons '$module lc42c6@iface)) lc42b4@mr) lc42c0@mod** lc42b0@kwd*)))))))))))))) (set! lc4bb7@lc3110@chi-internal-module lc3110@chi-internal-module) (set! lc3112@chi-body* (lambda (lc42cb@e* lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42d1@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?) (if (null? lc42cb@e*) (values lc42cb@e* lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42d1@kwd* lc42d2@exp*) (let ((lc42df@e (car lc42cb@e*))) (call-with-values (lambda () (lc2ed5@syntax-type lc42df@e lc42cc@r)) (lambda (lc42e7@lc42e2 lc42e8@lc42e4 lc42e9@lc42e6) (let ((lc42ed@kwd lc42e9@lc42e6) (lc42ee@value lc42e8@lc42e4) (lc42ef@type lc42e7@lc42e2)) (let ((lc42f3@kwd* (if (lc2eb3@id? lc42ed@kwd) (cons lc42ed@kwd lc42d1@kwd*) lc42d1@kwd*))) (let ((lc42f5@t lc42ef@type)) (if (memv lc42f5@t '(define)) (call-with-values (lambda () (lc303c@parse-define lc42df@e)) (lambda (lc42fb@lc42f8 lc42fc@lc42fa) (let ((lc42ff@rhs lc42fc@lc42fa) (lc4300@id lc42fb@lc42f8)) (begin (if (lc2ebf@bound-id-member? lc4300@id lc42f3@kwd*) (lc319a@syntax-violation '#f '"cannot redefine keyword" lc42df@e) (void)) (call-with-values (lambda () (lc2e43@gen-define-label+loc lc4300@id lc42d3@rib)) (lambda (lc4307@lc4304 lc4308@lc4306) (let ((lc430b@lex lc4308@lc4306) (lc430c@lab lc4307@lc4304)) (begin (lc2e69@extend-rib! lc42d3@rib lc4300@id lc430c@lab) (lc3112@chi-body* (cdr lc42cb@e*) (lc304a@add-lexical lc430c@lab lc430b@lex lc42cc@r) lc42cd@mr (cons lc430b@lex lc42ce@lex*) (cons lc42ff@rhs lc42cf@rhs*) lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?))))))))) (if (memv lc42f5@t '(define-syntax)) (call-with-values (lambda () (lc303e@parse-define-syntax lc42df@e)) (lambda (lc4313@lc4310 lc4314@lc4312) (let ((lc4317@rhs lc4314@lc4312) (lc4318@id lc4313@lc4310)) (begin (if (lc2ebf@bound-id-member? lc4318@id lc42f3@kwd*) (lc319a@syntax-violation '#f '"cannot redefine keyword" lc42df@e) (void)) (let ((lc431b@lab (lc2e45@gen-define-label lc4318@id lc42d3@rib)) (lc431c@expanded-rhs (lc3114@expand-transformer lc4317@rhs lc42cd@mr))) (begin (lc2e69@extend-rib! lc42d3@rib lc4318@id lc431b@lab) (let ((lc431f@b (lc2eeb@make-eval-transformer lc431c@expanded-rhs))) (lc3112@chi-body* (cdr lc42cb@e*) (cons (cons lc431b@lab lc431f@b) lc42cc@r) (cons (cons lc431b@lab lc431f@b) lc42cd@mr) lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?)))))))) (if (memv lc42f5@t '(let-syntax letrec-syntax)) (let ((lc4321@t lc42df@e)) (let ((lc4323@ls/false (lc30ba@syntax-dispatch lc4321@t '(_ #(each (any any)) . each-any)))) (if (and lc4323@ls/false (apply (lambda (lc4325@xlhs* lc4326@xrhs* lc4327@xbody*) (if (not (lc2ebb@valid-bound-ids? lc4325@xlhs*)) (lc319a@syntax-violation '#f '"invalid identifiers" lc42df@e) (void))) lc4323@ls/false)) (apply (lambda (lc432b@xlhs* lc432c@xrhs* lc432d@xbody*) (let ((lc4331@xlab* (map lc2e3f@gen-label lc432b@xlhs*))) (let ((lc4333@xrib (lc2e73@make-full-rib lc432b@xlhs* lc4331@xlab*))) (let ((lc4335@xb* (map (lambda (lc4337@x) (lc2eeb@make-eval-transformer (lc3114@expand-transformer (if (eq? lc42ef@type 'let-syntax) lc4337@x (lc2e9f@add-subst lc4333@xrib lc4337@x)) lc42cd@mr))) lc432c@xrhs*))) (lc3112@chi-body* (append (map (lambda (lc4339@x) (lc2e9f@add-subst lc4333@xrib lc4339@x)) lc432d@xbody*) (cdr lc42cb@e*)) (append (map cons lc4331@xlab* lc4335@xb*) lc42cc@r) (append (map cons lc4331@xlab* lc4335@xb*) lc42cd@mr) lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?))))) lc4323@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4321@t)))) (if (memv lc42f5@t '(begin)) (let ((lc433b@t lc42df@e)) (let ((lc433d@ls/false (lc30ba@syntax-dispatch lc433b@t '(_ . each-any)))) (if lc433d@ls/false (apply (lambda (lc433f@x*) (lc3112@chi-body* (append lc433f@x* (cdr lc42cb@e*)) lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?)) lc433d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc433b@t)))) (if (memv lc42f5@t '(global-macro global-macro!)) (lc3112@chi-body* (cons (lc2e9f@add-subst lc42d3@rib (lc30d6@chi-global-macro lc42ee@value lc42df@e)) (cdr lc42cb@e*)) lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?) (if (memv lc42f5@t '(local-macro local-macro!)) (lc3112@chi-body* (cons (lc2e9f@add-subst lc42d3@rib (lc30d4@chi-local-macro lc42ee@value lc42df@e)) (cdr lc42cb@e*)) lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?) (if (memv lc42f5@t '(macro macro!)) (lc3112@chi-body* (cons (lc2e9f@add-subst lc42d3@rib (lc30d2@chi-macro lc42ee@value lc42df@e)) (cdr lc42cb@e*)) lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?) (if (memv lc42f5@t '(module)) (call-with-values (lambda () (lc3110@chi-internal-module lc42df@e lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd*)) (lambda (lc4351@lc4342 lc4352@lc4344 lc4353@lc4346 lc4354@lc4348 lc4355@lc434a lc4356@lc434c lc4357@lc434e lc4358@lc4350) (let ((lc4361@kwd* lc4358@lc4350) (lc4362@mod** lc4357@lc434e) (lc4363@mr lc4356@lc434c) (lc4364@r lc4355@lc434a) (lc4365@m-exp-lab* lc4354@lc4348) (lc4366@m-exp-id* lc4353@lc4346) (lc4367@rhs* lc4352@lc4344) (lc4368@lex* lc4351@lc4342)) (begin (vector-for-each (lambda (lc4371@id lc4372@lab) (lc2e69@extend-rib! lc42d3@rib lc4371@id lc4372@lab)) lc4366@m-exp-id* lc4365@m-exp-lab*) (lc3112@chi-body* (cdr lc42cb@e*) lc4364@r lc4363@mr lc4368@lex* lc4367@rhs* lc4362@mod** lc4361@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?))))) (if (memv lc42f5@t '(library)) (begin (lc317c@library-expander (lc2ec7@stx->datum lc42df@e)) (lc3112@chi-body* (cdr lc42cb@e*) lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?)) (if (memv lc42f5@t '(export)) (let ((lc4375@t lc42df@e)) (let ((lc4377@ls/false (lc30ba@syntax-dispatch lc4375@t '(_ . each-any)))) (if lc4377@ls/false (apply (lambda (lc4379@exp-decl*) (lc3112@chi-body* (cdr lc42cb@e*) lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* (append lc4379@exp-decl* lc42d2@exp*) lc42d3@rib lc42d4@top?)) lc4377@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4375@t)))) (if (memv lc42f5@t '(import)) (letrec* ((lc437c@module-import? (lambda (lc43cf@e) (let ((lc43d1@t lc43cf@e)) (let ((lc43d3@ls/false (lc30ba@syntax-dispatch lc43d1@t '(_ any)))) (if (and lc43d3@ls/false (apply (lambda (lc43d5@id) (lc2eb3@id? lc43d5@id)) lc43d3@ls/false)) (apply (lambda (lc43d7@id) '#t) lc43d3@ls/false) (let ((lc43d9@t lc43d1@t)) (let ((lc43db@ls/false (lc30ba@syntax-dispatch lc43d9@t '(_ . each-any)))) (if lc43db@ls/false (apply (lambda (lc43dd@imp*) '#f) lc43db@ls/false) (let ((lc43df@t lc43d9@t)) (let ((lc43e1@ls/false (lc30ba@syntax-dispatch lc43df@t '_))) (if lc43e1@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"malformed import form" lc43cf@e)) lc43e1@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc43df@t)))))))))))) (lc437e@module-import (lambda (lc43ad@e lc43ae@r) (let ((lc43b1@t lc43ad@e)) (let ((lc43b3@ls/false (lc30ba@syntax-dispatch lc43b1@t '(_ any)))) (if (and lc43b3@ls/false (apply (lambda (lc43b5@id) (lc2eb3@id? lc43b5@id)) lc43b3@ls/false)) (apply (lambda (lc43b7@id) (call-with-values (lambda () (lc2ed5@syntax-type lc43b7@id lc43ae@r)) (lambda (lc43bf@lc43ba lc43c0@lc43bc lc43c1@lc43be) (let ((lc43c5@kwd lc43c1@lc43be) (lc43c6@value lc43c0@lc43bc) (lc43c7@type lc43bf@lc43ba)) (let ((lc43cb@t lc43c7@type)) (if (memv lc43cb@t '($module)) (let ((lc43cd@iface lc43c6@value)) (values (lc310e@module-interface-exp-id* lc43cd@iface lc43b7@id) (lc3108@module-interface-exp-lab-vec lc43cd@iface))) (lc319a@syntax-violation '#f '"invalid import" lc43ad@e))))))) lc43b3@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc43b1@t)))))) (lc4380@library-import (lambda (lc4391@e) (let ((lc4393@t lc4391@e)) (let ((lc4395@ls/false (lc30ba@syntax-dispatch lc4393@t '(any . each-any)))) (if lc4395@ls/false (apply (lambda (lc4397@ctxt lc4398@imp*) (call-with-values (lambda () (lc311c@parse-import-spec* (lc31a0@syntax->datum lc4398@imp*))) (lambda (lc439f@lc439c lc43a0@lc439e) (let ((lc43a3@subst-labels lc43a0@lc439e) (lc43a4@subst-names lc439f@lc439c)) (values (vector-map (lambda (lc43a7@name) (lc2e93@datum->stx lc4397@ctxt lc43a7@name)) lc43a4@subst-names) lc43a3@subst-labels))))) lc4395@ls/false) (let ((lc43a9@t lc4393@t)) (let ((lc43ab@ls/false (lc30ba@syntax-dispatch lc43a9@t '_))) (if lc43ab@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid import form" lc4391@e)) lc43ab@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc43a9@t)))))))))) (begin (call-with-values (lambda () (if (lc437c@module-import? lc42df@e) (lc437e@module-import lc42df@e lc42cc@r) (lc4380@library-import lc42df@e))) (lambda (lc4385@lc4382 lc4386@lc4384) (let ((lc4389@lab* lc4386@lc4384) (lc438a@id* lc4385@lc4382)) (vector-for-each (lambda (lc438d@id lc438e@lab) (lc2e69@extend-rib! lc42d3@rib lc438d@id lc438e@lab)) lc438a@id* lc4389@lab*)))) (lc3112@chi-body* (cdr lc42cb@e*) lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?))) (if lc42d4@top? (lc3112@chi-body* (cdr lc42cb@e*) lc42cc@r lc42cd@mr (cons (lc2e3b@gen-lexical 'dummy) lc42ce@lex*) (cons (cons 'top-expr lc42df@e) lc42cf@rhs*) lc42d0@mod** lc42f3@kwd* lc42d2@exp* lc42d3@rib lc42d4@top?) (values lc42cb@e* lc42cc@r lc42cd@mr lc42ce@lex* lc42cf@rhs* lc42d0@mod** lc42f3@kwd* lc42d2@exp*)))))))))))))))))))))) (set! lc4bb8@lc3112@chi-body* lc3112@chi-body*) (set! lc3114@expand-transformer (lambda (lc43e3@expr lc43e4@r) (let ((lc43e7@rtc (lc3120@make-collector))) (let ((lc43e9@expanded-rhs (let ((lc43f3@lc43ec lc3122@inv-collector) (lc43f4@lc43ee lc3124@vis-collector) (lc43f5@lc43f0 lc43e7@rtc) (lc43f6@lc43f2 (lambda (lc43fb@x) (values)))) (let ((lc43fd@swap (lambda () (begin (let ((lc43ff@t (lc43f3@lc43ec))) (begin (lc43f3@lc43ec lc43f5@lc43f0) (set! lc43f5@lc43f0 lc43ff@t))) (let ((lc4401@t (lc43f4@lc43ee))) (begin (lc43f4@lc43ee lc43f6@lc43f2) (set! lc43f6@lc43f2 lc4401@t))))))) (dynamic-wind lc43fd@swap (lambda () (lc30dc@chi-expr lc43e3@expr lc43e4@r lc43e4@r)) lc43fd@swap))))) (begin (for-each (let ((lc4403@mark-visit (lc3124@vis-collector))) (lambda (lc4405@x) (begin (lc2ccf@lc2b1d@invoke-library lc4405@x) (lc4403@mark-visit lc4405@x)))) (lc43e7@rtc)) lc43e9@expanded-rhs))))) (set! lc4bb9@lc3114@expand-transformer lc3114@expand-transformer) (set! lc3116@parse-exports (lambda (lc4407@exp*) (let lc440f@f ((lc4409@exp* lc4407@exp*) (lc440a@int* '()) (lc440b@ext* '())) (if (null? lc4409@exp*) (begin (if (not (lc2ebb@valid-bound-ids? lc440b@ext*)) (lc319a@syntax-violation 'export '"invalid exports" (lc30f0@find-dups lc440b@ext*)) (void)) (values (map lc31a0@syntax->datum lc440b@ext*) lc440a@int*)) (let ((lc4411@t (car lc4409@exp*))) (let ((lc4413@ls/false (lc30ba@syntax-dispatch lc4411@t '(any . #(each (any any)))))) (if lc4413@ls/false (apply (lambda (lc4415@rename lc4416@i* lc4417@e*) (begin (if (not (and (eq? (lc31a0@syntax->datum lc4415@rename) 'rename) (for-all lc2eb3@id? lc4416@i*) (for-all lc2eb3@id? lc4417@e*))) (lc319a@syntax-violation 'export '"invalid export specifier" (car lc4409@exp*)) (void)) (lc440f@f (cdr lc4409@exp*) (append lc4416@i* lc440a@int*) (append lc4417@e* lc440b@ext*)))) lc4413@ls/false) (let ((lc441b@t lc4411@t)) (let ((lc441d@ls/false (lc30ba@syntax-dispatch lc441b@t 'any))) (if lc441d@ls/false (apply (lambda (lc441f@ie) (begin (if (not (lc2eb3@id? lc441f@ie)) (lc319a@syntax-violation 'export '"invalid export" lc441f@ie) (void)) (lc440f@f (cdr lc4409@exp*) (cons lc441f@ie lc440a@int*) (cons lc441f@ie lc440b@ext*)))) lc441d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc441b@t))))))))))) (set! lc4bba@lc3116@parse-exports lc3116@parse-exports) (set! lc3118@parse-library-name (lambda (lc4421@spec) (letrec* ((lc4424@parse (lambda (lc4431@x) (let ((lc4433@t lc4431@x)) (let ((lc4435@ls/false (lc30ba@syntax-dispatch lc4433@t '(each-any)))) (if (and lc4435@ls/false (apply (lambda (lc4437@v*) (for-all (lambda (lc4439@x) (let ((lc443b@x (lc31a0@syntax->datum lc4439@x))) (and (integer? lc443b@x) (exact? lc443b@x)))) lc4437@v*)) lc4435@ls/false)) (apply (lambda (lc443d@v*) (values '() (map lc31a0@syntax->datum lc443d@v*))) lc4435@ls/false) (let ((lc443f@t lc4433@t)) (let ((lc4441@ls/false (lc30ba@syntax-dispatch lc443f@t '(any . any)))) (if (and lc4441@ls/false (apply (lambda (lc4443@x lc4444@rest) (symbol? (lc31a0@syntax->datum lc4443@x))) lc4441@ls/false)) (apply (lambda (lc4447@x lc4448@rest) (call-with-values (lambda () (lc4424@parse lc4448@rest)) (lambda (lc444f@lc444c lc4450@lc444e) (let ((lc4453@v* lc4450@lc444e) (lc4454@x* lc444f@lc444c)) (values (cons (lc31a0@syntax->datum lc4447@x) lc4454@x*) lc4453@v*))))) lc4441@ls/false) (let ((lc4457@t lc443f@t)) (let ((lc4459@ls/false (lc30ba@syntax-dispatch lc4457@t '()))) (if lc4459@ls/false (apply (lambda () (values '() '())) lc4459@ls/false) (let ((lc445b@t lc4457@t)) (let ((lc445d@ls/false (lc30ba@syntax-dispatch lc445b@t '_))) (if lc445d@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid library name" lc4421@spec)) lc445d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc445b@t)))))))))))))))) (call-with-values (lambda () (lc4424@parse lc4421@spec)) (lambda (lc4429@lc4426 lc442a@lc4428) (let ((lc442d@ver* lc442a@lc4428) (lc442e@name* lc4429@lc4426)) (begin (if (null? lc442e@name*) (lc319a@syntax-violation '#f '"empty library name" lc4421@spec) (void)) (values lc442e@name* lc442d@ver*)))))))) (set! lc4bbb@lc3118@parse-library-name lc3118@parse-library-name) (set! lc311a@parse-library (lambda (lc445f@e) (let ((lc4461@t lc445f@e)) (let ((lc4463@ls/false (lc30ba@syntax-dispatch lc4461@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and lc4463@ls/false (apply (lambda (lc4465@library lc4466@name* lc4467@export lc4468@exp* lc4469@import lc446a@imp* lc446b@b*) (and (eq? (lc31a0@syntax->datum lc4467@export) 'export) (eq? (lc31a0@syntax->datum lc4469@import) 'import) (eq? (lc31a0@syntax->datum lc4465@library) 'library))) lc4463@ls/false)) (apply (lambda (lc4473@library lc4474@name* lc4475@export lc4476@exp* lc4477@import lc4478@imp* lc4479@b*) (values lc4474@name* lc4476@exp* lc4478@imp* lc4479@b*)) lc4463@ls/false) (let ((lc4481@t lc4461@t)) (let ((lc4483@ls/false (lc30ba@syntax-dispatch lc4481@t '_))) (if lc4483@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"malformed library" lc445f@e)) lc4483@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4481@t))))))))) (set! lc4bbc@lc311a@parse-library lc311a@parse-library) (set! lc311c@parse-import-spec* (letrec* ((lc4486@idsyn? (lambda (lc468f@x) (symbol? (lc31a0@syntax->datum lc468f@x)))) (lc4488@dup-error (lambda (lc468d@name) (lc319a@syntax-violation 'import '"two imports with different bindings" lc468d@name))) (lc448a@merge-substs (lambda (lc467b@s lc467c@subst) (letrec* ((lc4680@insert-to-subst (lambda (lc4681@a lc4682@subst) (let ((lc4685@name (car lc4681@a)) (lc4686@label (cdr lc4681@a))) (let ((lc4689@t (assq lc4685@name lc4682@subst))) (if lc4689@t ((lambda (lc468b@x) (if (eq? (cdr lc468b@x) lc4686@label) lc4682@subst (lc4488@dup-error lc4685@name))) lc4689@t) (cons lc4681@a lc4682@subst))))))) (if (null? lc467b@s) lc467c@subst (lc4680@insert-to-subst (car lc467b@s) (lc448a@merge-substs (cdr lc467b@s) lc467c@subst)))))) (lc448c@exclude* (lambda (lc464b@sym* lc464c@subst) (letrec* ((lc4650@exclude (lambda (lc4669@sym lc466a@subst) (if (null? lc466a@subst) (lc319a@syntax-violation 'import '"cannot rename unbound identifier" lc4669@sym) (if (eq? lc4669@sym (caar lc466a@subst)) (values (cdar lc466a@subst) (cdr lc466a@subst)) (let ((lc466d@a (car lc466a@subst))) (call-with-values (lambda () (lc4650@exclude lc4669@sym (cdr lc466a@subst))) (lambda (lc4673@lc4670 lc4674@lc4672) (let ((lc4677@subst lc4674@lc4672) (lc4678@old lc4673@lc4670)) (values lc4678@old (cons lc466d@a lc4677@subst))))))))))) (if (null? lc464b@sym*) (values '() lc464c@subst) (call-with-values (lambda () (lc4650@exclude (car lc464b@sym*) lc464c@subst)) (lambda (lc4655@lc4652 lc4656@lc4654) (let ((lc4659@subst lc4656@lc4654) (lc465a@old lc4655@lc4652)) (call-with-values (lambda () (lc448c@exclude* (cdr lc464b@sym*) lc4659@subst)) (lambda (lc4661@lc465e lc4662@lc4660) (let ((lc4665@subst lc4662@lc4660) (lc4666@old* lc4661@lc465e)) (values (cons lc465a@old lc4666@old*) lc4665@subst))))))))))) (lc448e@find* (lambda (lc4643@sym* lc4644@subst) (map (lambda (lc4647@x) (let ((lc4649@t (assq lc4647@x lc4644@subst))) (if lc4649@t (cdr lc4649@t) (lc319a@syntax-violation 'import '"cannot find identifier" lc4647@x)))) lc4643@sym*))) (lc4490@rem* (lambda (lc463b@sym* lc463c@subst) (let lc4641@f ((lc463f@subst lc463c@subst)) (if (null? lc463f@subst) '() (if (memq (caar lc463f@subst) lc463b@sym*) (lc4641@f (cdr lc463f@subst)) (cons (car lc463f@subst) (lc4641@f (cdr lc463f@subst)))))))) (lc4492@remove-dups (lambda (lc4639@ls) (if (null? lc4639@ls) '() (if (memq (car lc4639@ls) (cdr lc4639@ls)) (lc4492@remove-dups (cdr lc4639@ls)) (cons (car lc4639@ls) (lc4492@remove-dups (cdr lc4639@ls))))))) (lc4494@parse-library-name (lambda (lc4551@spec) (letrec* ((lc4554@subversion? (lambda (lc4635@x) (let ((lc4637@x (lc31a0@syntax->datum lc4635@x))) (and (integer? lc4637@x) (exact? lc4637@x) (>= lc4637@x '0))))) (lc4556@subversion-pred (lambda (lc45d5@x*) (let ((lc45d7@t lc45d5@x*)) (let ((lc45d9@ls/false (lc30ba@syntax-dispatch lc45d7@t 'any))) (if (and lc45d9@ls/false (apply (lambda (lc45db@n) (lc4554@subversion? lc45db@n)) lc45d9@ls/false)) (apply (lambda (lc45dd@n) (lambda (lc45df@x) (= lc45df@x (lc31a0@syntax->datum lc45dd@n)))) lc45d9@ls/false) (let ((lc45e1@t lc45d7@t)) (let ((lc45e3@ls/false (lc30ba@syntax-dispatch lc45e1@t '(any . each-any)))) (if (and lc45e3@ls/false (apply (lambda (lc45e5@p? lc45e6@sub*) (eq? (lc31a0@syntax->datum lc45e5@p?) 'and)) lc45e3@ls/false)) (apply (lambda (lc45e9@p? lc45ea@sub*) (let ((lc45ed@p* (map lc4556@subversion-pred lc45ea@sub*))) (lambda (lc45ef@x) (for-all (lambda (lc45f1@p) (lc45f1@p lc45ef@x)) lc45ed@p*)))) lc45e3@ls/false) (let ((lc45f3@t lc45e1@t)) (let ((lc45f5@ls/false (lc30ba@syntax-dispatch lc45f3@t '(any . each-any)))) (if (and lc45f5@ls/false (apply (lambda (lc45f7@p? lc45f8@sub*) (eq? (lc31a0@syntax->datum lc45f7@p?) 'or)) lc45f5@ls/false)) (apply (lambda (lc45fb@p? lc45fc@sub*) (let ((lc45ff@p* (map lc4556@subversion-pred lc45fc@sub*))) (lambda (lc4601@x) (exists (lambda (lc4603@p) (lc4603@p lc4601@x)) lc45ff@p*)))) lc45f5@ls/false) (let ((lc4605@t lc45f3@t)) (let ((lc4607@ls/false (lc30ba@syntax-dispatch lc4605@t '(any any)))) (if (and lc4607@ls/false (apply (lambda (lc4609@p? lc460a@sub) (eq? (lc31a0@syntax->datum lc4609@p?) 'not)) lc4607@ls/false)) (apply (lambda (lc460d@p? lc460e@sub) (let ((lc4611@p (lc4556@subversion-pred lc460e@sub))) (lambda (lc4613@x) (not (lc4611@p lc4613@x))))) lc4607@ls/false) (let ((lc4615@t lc4605@t)) (let ((lc4617@ls/false (lc30ba@syntax-dispatch lc4615@t '(any any)))) (if (and lc4617@ls/false (apply (lambda (lc4619@p? lc461a@n) (and (eq? (lc31a0@syntax->datum lc4619@p?) '<=) (lc4554@subversion? lc461a@n))) lc4617@ls/false)) (apply (lambda (lc461d@p? lc461e@n) (lambda (lc4621@x) (<= lc4621@x (lc31a0@syntax->datum lc461e@n)))) lc4617@ls/false) (let ((lc4623@t lc4615@t)) (let ((lc4625@ls/false (lc30ba@syntax-dispatch lc4623@t '(any any)))) (if (and lc4625@ls/false (apply (lambda (lc4627@p? lc4628@n) (and (eq? (lc31a0@syntax->datum lc4627@p?) '>=) (lc4554@subversion? lc4628@n))) lc4625@ls/false)) (apply (lambda (lc462b@p? lc462c@n) (lambda (lc462f@x) (>= lc462f@x (lc31a0@syntax->datum lc462c@n)))) lc4625@ls/false) (let ((lc4631@t lc4623@t)) (let ((lc4633@ls/false (lc30ba@syntax-dispatch lc4631@t '_))) (if lc4633@ls/false (apply (lambda () (lc319a@syntax-violation 'import '"invalid sub-version spec" lc4551@spec lc45d5@x*)) lc4633@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4631@t)))))))))))))))))))))))) (lc4558@version-pred (lambda (lc4585@x*) (let ((lc4587@t lc4585@x*)) (let ((lc4589@ls/false (lc30ba@syntax-dispatch lc4587@t '()))) (if lc4589@ls/false (apply (lambda () (lambda (lc458b@x) '#t)) lc4589@ls/false) (let ((lc458d@t lc4587@t)) (let ((lc458f@ls/false (lc30ba@syntax-dispatch lc458d@t '(any . each-any)))) (if (and lc458f@ls/false (apply (lambda (lc4591@c lc4592@ver*) (eq? (lc31a0@syntax->datum lc4591@c) 'and)) lc458f@ls/false)) (apply (lambda (lc4595@c lc4596@ver*) (let ((lc4599@p* (map lc4558@version-pred lc4596@ver*))) (lambda (lc459b@x) (for-all (lambda (lc459d@p) (lc459d@p lc459b@x)) lc4599@p*)))) lc458f@ls/false) (let ((lc459f@t lc458d@t)) (let ((lc45a1@ls/false (lc30ba@syntax-dispatch lc459f@t '(any . each-any)))) (if (and lc45a1@ls/false (apply (lambda (lc45a3@c lc45a4@ver*) (eq? (lc31a0@syntax->datum lc45a3@c) 'or)) lc45a1@ls/false)) (apply (lambda (lc45a7@c lc45a8@ver*) (let ((lc45ab@p* (map lc4558@version-pred lc45a8@ver*))) (lambda (lc45ad@x) (exists (lambda (lc45af@p) (lc45af@p lc45ad@x)) lc45ab@p*)))) lc45a1@ls/false) (let ((lc45b1@t lc459f@t)) (let ((lc45b3@ls/false (lc30ba@syntax-dispatch lc45b1@t '(any any)))) (if (and lc45b3@ls/false (apply (lambda (lc45b5@c lc45b6@ver) (eq? (lc31a0@syntax->datum lc45b5@c) 'not)) lc45b3@ls/false)) (apply (lambda (lc45b9@c lc45ba@ver) (let ((lc45bd@p (lc4558@version-pred lc45ba@ver))) (lambda (lc45bf@x) (not (lc45bd@p lc45bf@x))))) lc45b3@ls/false) (let ((lc45c1@t lc45b1@t)) (let ((lc45c3@ls/false (lc30ba@syntax-dispatch lc45c1@t 'each-any))) (if lc45c3@ls/false (apply (lambda (lc45c5@sub*) (let ((lc45c7@p* (map lc4556@subversion-pred lc45c5@sub*))) (lambda (lc45c9@x) (let lc45cf@f ((lc45cb@p* lc45c7@p*) (lc45cc@x lc45c9@x)) (if (null? lc45cb@p*) '#t (if (null? lc45cc@x) '#f (and ((car lc45cb@p*) (car lc45cc@x)) (lc45cf@f (cdr lc45cb@p*) (cdr lc45cc@x))))))))) lc45c3@ls/false) (let ((lc45d1@t lc45c1@t)) (let ((lc45d3@ls/false (lc30ba@syntax-dispatch lc45d1@t '_))) (if lc45d3@ls/false (apply (lambda () (lc319a@syntax-violation 'import '"invalid version spec" lc4551@spec lc4585@x*)) lc45d3@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc45d1@t)))))))))))))))))))))) (let lc455b@f ((lc4559@x lc4551@spec)) (let ((lc455d@t lc4559@x)) (let ((lc455f@ls/false (lc30ba@syntax-dispatch lc455d@t '(each-any)))) (if lc455f@ls/false (apply (lambda (lc4561@version-spec*) (values '() (lc4558@version-pred lc4561@version-spec*))) lc455f@ls/false) (let ((lc4563@t lc455d@t)) (let ((lc4565@ls/false (lc30ba@syntax-dispatch lc4563@t '(any . any)))) (if (and lc4565@ls/false (apply (lambda (lc4567@x lc4568@x*) (lc4486@idsyn? lc4567@x)) lc4565@ls/false)) (apply (lambda (lc456b@x lc456c@x*) (call-with-values (lambda () (lc455b@f lc456c@x*)) (lambda (lc4573@lc4570 lc4574@lc4572) (let ((lc4577@pred lc4574@lc4572) (lc4578@name lc4573@lc4570)) (values (cons (lc31a0@syntax->datum lc456b@x) lc4578@name) lc4577@pred))))) lc4565@ls/false) (let ((lc457b@t lc4563@t)) (let ((lc457d@ls/false (lc30ba@syntax-dispatch lc457b@t '()))) (if lc457d@ls/false (apply (lambda () (values '() (lambda (lc457f@x) '#t))) lc457d@ls/false) (let ((lc4581@t lc457b@t)) (let ((lc4583@ls/false (lc30ba@syntax-dispatch lc4581@t '_))) (if lc4583@ls/false (apply (lambda () (lc319a@syntax-violation '#f '"invalid import spec" lc4551@spec)) lc4583@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4581@t))))))))))))))))) (lc4496@import-library (lambda (lc4541@spec*) (call-with-values (lambda () (lc4494@parse-library-name lc4541@spec*)) (lambda (lc4547@lc4544 lc4548@lc4546) (let ((lc454b@pred lc4548@lc4546) (lc454c@name lc4547@lc4544)) (begin (if (null? lc454c@name) (lc319a@syntax-violation 'import '"empty library name" lc4541@spec*) (void)) (let ((lc454f@lib (lc2cc8@lc2b0f@find-library-by-name lc454c@name))) (begin (if (not lc454f@lib) (lc319a@syntax-violation 'import '"cannot find library with required name" lc454c@name) (void)) (if (not (lc454b@pred (lc2ca2@lc2ac3@library-version lc454f@lib))) (lc319a@syntax-violation 'import '"library does not satisfy version specification" lc4541@spec* lc454f@lib) (void)) ((lc3126@imp-collector) lc454f@lib) (lc2caa@lc2ad3@library-subst lc454f@lib))))))))) (lc4498@get-import (lambda (lc44b3@spec) (let ((lc44b5@t lc44b3@spec)) (let ((lc44b7@ls/false (lc30ba@syntax-dispatch lc44b5@t '(any . each-any)))) (if (and lc44b7@ls/false (apply (lambda (lc44b9@x lc44ba@x*) (not (memq (lc31a0@syntax->datum lc44b9@x) '(for rename except only prefix library)))) lc44b7@ls/false)) (apply (lambda (lc44bd@x lc44be@x*) (lc4496@import-library (cons lc44bd@x lc44be@x*))) lc44b7@ls/false) (let ((lc44c1@t lc44b5@t)) (let ((lc44c3@ls/false (lc30ba@syntax-dispatch lc44c1@t '(any any . #(each (any any)))))) (if (and lc44c3@ls/false (apply (lambda (lc44c5@rename lc44c6@isp lc44c7@old* lc44c8@new*) (and (eq? (lc31a0@syntax->datum lc44c5@rename) 'rename) (for-all lc4486@idsyn? lc44c7@old*) (for-all lc4486@idsyn? lc44c8@new*))) lc44c3@ls/false)) (apply (lambda (lc44cd@rename lc44ce@isp lc44cf@old* lc44d0@new*) (let ((lc44d5@subst (lc4498@get-import lc44ce@isp)) (lc44d6@old* (map lc31a0@syntax->datum lc44cf@old*)) (lc44d7@new* (map lc31a0@syntax->datum lc44d0@new*))) (let ((lc44db@old-label* (lc448e@find* lc44d6@old* lc44d5@subst))) (let ((lc44dd@subst (lc4490@rem* lc44d6@old* lc44d5@subst))) (lc448a@merge-substs (map cons lc44d7@new* lc44db@old-label*) lc44dd@subst))))) lc44c3@ls/false) (let ((lc44df@t lc44c1@t)) (let ((lc44e1@ls/false (lc30ba@syntax-dispatch lc44df@t '(any any . each-any)))) (if (and lc44e1@ls/false (apply (lambda (lc44e3@except lc44e4@isp lc44e5@sym*) (and (eq? (lc31a0@syntax->datum lc44e3@except) 'except) (for-all lc4486@idsyn? lc44e5@sym*))) lc44e1@ls/false)) (apply (lambda (lc44e9@except lc44ea@isp lc44eb@sym*) (let ((lc44ef@subst (lc4498@get-import lc44ea@isp))) (lc4490@rem* (map lc31a0@syntax->datum lc44eb@sym*) lc44ef@subst))) lc44e1@ls/false) (let ((lc44f1@t lc44df@t)) (let ((lc44f3@ls/false (lc30ba@syntax-dispatch lc44f1@t '(any any . each-any)))) (if (and lc44f3@ls/false (apply (lambda (lc44f5@only lc44f6@isp lc44f7@sym*) (and (eq? (lc31a0@syntax->datum lc44f5@only) 'only) (for-all lc4486@idsyn? lc44f7@sym*))) lc44f3@ls/false)) (apply (lambda (lc44fb@only lc44fc@isp lc44fd@sym*) (let ((lc4501@subst (lc4498@get-import lc44fc@isp)) (lc4502@sym* (map lc31a0@syntax->datum lc44fd@sym*))) (let ((lc4505@sym* (lc4492@remove-dups lc4502@sym*))) (let ((lc4507@lab* (lc448e@find* lc4505@sym* lc4501@subst))) (map cons lc4505@sym* lc4507@lab*))))) lc44f3@ls/false) (let ((lc4509@t lc44f1@t)) (let ((lc450b@ls/false (lc30ba@syntax-dispatch lc4509@t '(any any any)))) (if (and lc450b@ls/false (apply (lambda (lc450d@prefix lc450e@isp lc450f@p) (and (eq? (lc31a0@syntax->datum lc450d@prefix) 'prefix) (lc4486@idsyn? lc450f@p))) lc450b@ls/false)) (apply (lambda (lc4513@prefix lc4514@isp lc4515@p) (let ((lc4519@subst (lc4498@get-import lc4514@isp)) (lc451a@prefix (symbol->string (lc31a0@syntax->datum lc4515@p)))) (map (lambda (lc451d@x) (cons (string->symbol (string-append lc451a@prefix (symbol->string (car lc451d@x)))) (cdr lc451d@x))) lc4519@subst))) lc450b@ls/false) (let ((lc451f@t lc4509@t)) (let ((lc4521@ls/false (lc30ba@syntax-dispatch lc451f@t '(any each-any)))) (if (and lc4521@ls/false (apply (lambda (lc4523@library lc4524@spec*) (eq? (lc31a0@syntax->datum lc4523@library) 'library)) lc4521@ls/false)) (apply (lambda (lc4527@library lc4528@spec*) (lc4496@import-library lc4528@spec*)) lc4521@ls/false) (let ((lc452b@t lc451f@t)) (let ((lc452d@ls/false (lc30ba@syntax-dispatch lc452b@t '(any any . any)))) (if (and lc452d@ls/false (apply (lambda (lc452f@for lc4530@isp lc4531@rest) (eq? (lc31a0@syntax->datum lc452f@for) 'for)) lc452d@ls/false)) (apply (lambda (lc4535@for lc4536@isp lc4537@rest) (lc4498@get-import lc4536@isp)) lc452d@ls/false) (let ((lc453b@t lc452b@t)) (let ((lc453d@ls/false (lc30ba@syntax-dispatch lc453b@t 'any))) (if lc453d@ls/false (apply (lambda (lc453f@spec) (lc319a@syntax-violation 'import '"invalid import spec" lc453f@spec)) lc453d@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc453b@t))))))))))))))))))))))))))) (lc449a@add-imports! (lambda (lc44a3@imp lc44a4@h) (let ((lc44a7@subst (lc4498@get-import lc44a3@imp))) (for-each (lambda (lc44a9@x) (let ((lc44ab@name (car lc44a9@x)) (lc44ac@label (cdr lc44a9@x))) (let ((lc44af@t (hashtable-ref lc44a4@h lc44ab@name '#f))) (if lc44af@t ((lambda (lc44b1@l) (if (not (eq? lc44b1@l lc44ac@label)) (lc4488@dup-error lc44ab@name) (void))) lc44af@t) (hashtable-set! lc44a4@h lc44ab@name lc44ac@label))))) lc44a7@subst))))) (lambda (lc449b@imp*) (let lc44a1@f ((lc449d@imp* lc449b@imp*) (lc449e@h (make-eq-hashtable))) (if (null? lc449d@imp*) (hashtable-entries lc449e@h) (begin (lc449a@add-imports! (car lc449d@imp*) lc449e@h) (lc44a1@f (cdr lc449d@imp*) lc449e@h))))))) (set! lc4bbd@lc311c@parse-import-spec* lc311c@parse-import-spec*) (set! lc311e@make-top-rib (lambda (lc4691@names lc4692@labels) (let ((lc4695@rib (lc2e67@make-empty-rib))) (begin (vector-for-each (lambda (lc4697@name lc4698@label) (begin (if (not (symbol? lc4697@name)) (error 'make-top-rib '"BUG: not a symbol" lc4697@name) (void)) (lc2e6b@extend-rib/nc! lc4695@rib (make-simple-struct 'stx '5 (list lc4697@name lc2e37@top-mark* '() '())) lc4698@label))) lc4691@names lc4692@labels) lc4695@rib)))) (set! lc4bbe@lc311e@make-top-rib lc311e@make-top-rib) (set! lc3120@make-collector (lambda () (let ((lc469b@ls '())) (lambda lc469f (let ((lc46a0 (length lc469f))) (if (= lc46a0 '0) (apply (lambda () lc469b@ls) lc469f) (if (= lc46a0 '1) (apply (lambda (lc469d@x) (set! lc469b@ls (lc2e30@set-cons lc469d@x lc469b@ls))) lc469f) (error 'apply '"invalid arg count")))))))) (set! lc4bbf@lc3120@make-collector lc3120@make-collector) (set! lc3122@inv-collector (lc2a03@lc28e1@make-parameter (lambda lc46a1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (lc46a3@x) (begin (if (not (procedure? lc46a3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" lc46a3@x) (void)) lc46a3@x)))) (set! lc4bc0@lc3122@inv-collector lc3122@inv-collector) (set! lc3124@vis-collector (lc2a03@lc28e1@make-parameter (lambda lc46a5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (lc46a7@x) (begin (if (not (procedure? lc46a7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" lc46a7@x) (void)) lc46a7@x)))) (set! lc4bc1@lc3124@vis-collector lc3124@vis-collector) (set! lc3126@imp-collector (lc2a03@lc28e1@make-parameter (lambda lc46a9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (lc46ab@x) (begin (if (not (procedure? lc46ab@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" lc46ab@x) (void)) lc46ab@x)))) (set! lc4bc2@lc3126@imp-collector lc3126@imp-collector) (set! lc3128@chi-library-internal (lambda (lc46ad@e* lc46ae@rib lc46af@top?) (call-with-values (lambda () (lc3112@chi-body* lc46ad@e* '() '() '() '() '() '() '() lc46ae@rib lc46af@top?)) (lambda (lc46c3@lc46b4 lc46c4@lc46b6 lc46c5@lc46b8 lc46c6@lc46ba lc46c7@lc46bc lc46c8@lc46be lc46c9@lc46c0 lc46ca@lc46c2) (let ((lc46d3@exp* lc46ca@lc46c2) (lc46d4@_kwd* lc46c9@lc46c0) (lc46d5@mod** lc46c8@lc46be) (lc46d6@rhs* lc46c7@lc46bc) (lc46d7@lex* lc46c6@lc46ba) (lc46d8@mr lc46c5@lc46b8) (lc46d9@r lc46c4@lc46b6) (lc46da@e* lc46c3@lc46b4)) (values (append (apply append (reverse lc46d5@mod**)) lc46da@e*) lc46d9@r lc46d8@mr (reverse lc46d7@lex*) (reverse lc46d6@rhs*) lc46d3@exp*)))))) (set! lc4bc3@lc3128@chi-library-internal lc3128@chi-library-internal) (set! lc312a@chi-interaction-expr (lambda (lc46e3@e lc46e4@rib lc46e5@r) (call-with-values (lambda () (lc3112@chi-body* (list lc46e3@e) lc46e5@r lc46e5@r '() '() '() '() '() lc46e4@rib '#t)) (lambda (lc46f9@lc46ea lc46fa@lc46ec lc46fb@lc46ee lc46fc@lc46f0 lc46fd@lc46f2 lc46fe@lc46f4 lc46ff@lc46f6 lc4700@lc46f8) (let ((lc4709@_exp* lc4700@lc46f8) (lc470a@_kwd* lc46ff@lc46f6) (lc470b@mod** lc46fe@lc46f4) (lc470c@rhs* lc46fd@lc46f2) (lc470d@lex* lc46fc@lc46f0) (lc470e@mr lc46fb@lc46ee) (lc470f@r lc46fa@lc46ec) (lc4710@e* lc46f9@lc46ea)) (let ((lc4719@e* (lc30ea@expand-interaction-rhs*/init* (reverse lc470d@lex*) (reverse lc470c@rhs*) (append (apply append (reverse lc470b@mod**)) lc4710@e*) lc470f@r lc470e@mr))) (let ((lc471b@e (if (null? lc4719@e*) (lc2e19@lc2d7a@build-void) (if (null? (cdr lc4719@e*)) (car lc4719@e*) (lc2e18@lc2d78@build-sequence '#f lc4719@e*))))) (values lc471b@e lc470f@r)))))))) (set! lc4bc4@lc312a@chi-interaction-expr lc312a@chi-interaction-expr) (set! lc312c@library-body-expander (lambda (lc471d@name lc471e@main-exp* lc471f@imp* lc4720@b* lc4721@top?) (letrec* ((lc4728@itc (lc3120@make-collector))) (let ((lc4731@lc472a lc3126@imp-collector) (lc4732@lc472c lc31aa@top-level-context) (lc4733@lc472e lc4728@itc) (lc4734@lc4730 '#f)) (let ((lc4739@swap (lambda () (begin (let ((lc473b@t (lc4731@lc472a))) (begin (lc4731@lc472a lc4733@lc472e) (set! lc4733@lc472e lc473b@t))) (let ((lc473d@t (lc4732@lc472c))) (begin (lc4732@lc472c lc4734@lc4730) (set! lc4734@lc4730 lc473d@t))))))) (dynamic-wind lc4739@swap (lambda () (call-with-values (lambda () (lc311c@parse-import-spec* lc471f@imp*)) (lambda (lc4743@lc4740 lc4744@lc4742) (let ((lc4747@subst-labels lc4744@lc4742) (lc4748@subst-names lc4743@lc4740)) (let ((lc474b@rib (lc311e@make-top-rib lc4748@subst-names lc4747@subst-labels))) (letrec* ((lc474e@wrap (lambda (lc47c9@x) (make-simple-struct 'stx '5 (list lc47c9@x lc2e37@top-mark* (list lc474b@rib) '()))))) (let ((lc474f@b* (map lc474e@wrap lc4720@b*)) (lc4750@main-exp* (map lc474e@wrap lc471e@main-exp*)) (lc4751@rtc (lc3120@make-collector)) (lc4752@vtc (lc3120@make-collector))) (let ((lc475f@lc4758 lc3122@inv-collector) (lc4760@lc475a lc3124@vis-collector) (lc4761@lc475c lc4751@rtc) (lc4762@lc475e lc4752@vtc)) (let ((lc4767@swap (lambda () (begin (let ((lc4769@t (lc475f@lc4758))) (begin (lc475f@lc4758 lc4761@lc475c) (set! lc4761@lc475c lc4769@t))) (let ((lc476b@t (lc4760@lc475a))) (begin (lc4760@lc475a lc4762@lc475e) (set! lc4762@lc475e lc476b@t))))))) (dynamic-wind lc4767@swap (lambda () (call-with-values (lambda () (lc3128@chi-library-internal lc474f@b* lc474b@rib lc4721@top?)) (lambda (lc4779@lc476e lc477a@lc4770 lc477b@lc4772 lc477c@lc4774 lc477d@lc4776 lc477e@lc4778) (let ((lc4785@internal-exp* lc477e@lc4778) (lc4786@rhs* lc477d@lc4776) (lc4787@lex* lc477c@lc4774) (lc4788@mr lc477b@lc4772) (lc4789@r lc477a@lc4770) (lc478a@init* lc4779@lc476e)) (call-with-values (lambda () (lc3116@parse-exports (append lc4750@main-exp* lc4785@internal-exp*))) (lambda (lc4795@lc4792 lc4796@lc4794) (let ((lc4799@exp-id* lc4796@lc4794) (lc479a@exp-name* lc4795@lc4792)) (begin (lc2e6f@seal-rib! lc474b@rib) (let ((lc479d@init* (lc30d8@chi-expr* lc478a@init* lc4789@r lc4788@mr))) (let ((lc479f@rhs* (lc30ec@chi-rhs* lc4786@rhs* lc4789@r lc4788@mr))) (begin (lc2e71@unseal-rib! lc474b@rib) (let ((lc47a1@loc* (map lc2e3d@gen-global lc4787@lex*)) (lc47a2@export-subst (lc3184@make-export-subst lc479a@exp-name* lc4799@exp-id*))) (letrec* ((lc47a6@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (lc3186@make-export-env/macros lc4787@lex* lc47a1@loc* lc4789@r)) (lambda (lc47ad@lc47a8 lc47ae@lc47aa lc47af@lc47ac) (let ((lc47b3@macro* lc47af@lc47ac) (lc47b4@global* lc47ae@lc47aa) (lc47b5@export-env lc47ad@lc47a8)) (begin (for-each (lambda (lc47b9@s) (let ((lc47bb@name (car lc47b9@s)) (lc47bc@label (cdr lc47b9@s))) (let ((lc47bf@p (assq lc47bc@label lc47b5@export-env))) (if lc47bf@p (let ((lc47c1@b (cdr lc47bf@p))) (let ((lc47c3@type (car lc47c1@b))) (if (eq? lc47c3@type 'mutable) (lc319a@syntax-violation 'export lc47a6@errstr lc47bb@name) (void)))) (void))))) lc47a2@export-subst) (let ((lc47c5@invoke-body (lc2e1e@lc2d84@build-library-letrec* '#f lc471d@name lc4787@lex* lc47a1@loc* lc479f@rhs* (if (null? lc479d@init*) (lc2e19@lc2d7a@build-void) (lc2e18@lc2d78@build-sequence '#f lc479d@init*)))) (lc47c6@invoke-definitions (map lc2e15@lc2cd7@build-global-define (map cdr lc47b4@global*)))) (values (lc4728@itc) (lc4751@rtc) (lc4752@vtc) (lc2e18@lc2d78@build-sequence '#f (append lc47c6@invoke-definitions (list lc47c5@invoke-body))) lc47b3@macro* lc47a2@export-subst lc47b5@export-env))))))))))))))))))) lc4767@swap)))))))))) lc4739@swap)))))) (set! lc4bc5@lc312c@library-body-expander lc312c@library-body-expander) (set! lc312e@core-library-expander (lambda (lc47cb@e lc47cc@verify-name) (call-with-values (lambda () (lc311a@parse-library lc47cb@e)) (lambda (lc47d7@lc47d0 lc47d8@lc47d2 lc47d9@lc47d4 lc47da@lc47d6) (let ((lc47df@b* lc47da@lc47d6) (lc47e0@imp* lc47d9@lc47d4) (lc47e1@exp* lc47d8@lc47d2) (lc47e2@name* lc47d7@lc47d0)) (call-with-values (lambda () (lc3118@parse-library-name lc47e2@name*)) (lambda (lc47eb@lc47e8 lc47ec@lc47ea) (let ((lc47ef@ver lc47ec@lc47ea) (lc47f0@name lc47eb@lc47e8)) (begin (lc47cc@verify-name lc47f0@name) (call-with-values (lambda () (lc312c@library-body-expander lc47f0@name lc47e1@exp* lc47e0@imp* lc47df@b* '#f)) (lambda (lc4801@lc47f4 lc4802@lc47f6 lc4803@lc47f8 lc4804@lc47fa lc4805@lc47fc lc4806@lc47fe lc4807@lc4800) (let ((lc480f@export-env lc4807@lc4800) (lc4810@export-subst lc4806@lc47fe) (lc4811@visit-code lc4805@lc47fc) (lc4812@invoke-code lc4804@lc47fa) (lc4813@visit-req* lc4803@lc47f8) (lc4814@invoke-req* lc4802@lc47f6) (lc4815@imp* lc4801@lc47f4)) (values lc47f0@name lc47ef@ver lc4815@imp* lc4814@invoke-req* lc4813@visit-req* lc4812@invoke-code lc4811@visit-code lc4810@export-subst lc480f@export-env))))))))))))) (set! lc4bc6@lc312e@core-library-expander lc312e@core-library-expander) (set! lc3130@parse-top-level-program (lambda (lc481d@e*) (let ((lc481f@t lc481d@e*)) (let ((lc4821@ls/false (lc30ba@syntax-dispatch lc481f@t '((any . each-any) . each-any)))) (if (and lc4821@ls/false (apply (lambda (lc4823@import lc4824@imp* lc4825@b*) (eq? (lc31a0@syntax->datum lc4823@import) 'import)) lc4821@ls/false)) (apply (lambda (lc4829@import lc482a@imp* lc482b@b*) (values lc482a@imp* lc482b@b*)) lc4821@ls/false) (let ((lc482f@t lc481f@t)) (let ((lc4831@ls/false (lc30ba@syntax-dispatch lc482f@t '((any . any) . any)))) (if (and lc4831@ls/false (apply (lambda (lc4833@import lc4834@x lc4835@y) (eq? (lc31a0@syntax->datum lc4833@import) 'import)) lc4831@ls/false)) (apply (lambda (lc4839@import lc483a@x lc483b@y) (lc319a@syntax-violation 'expander '"invalid syntax of top-level program" (lc2ead@syntax-car lc481d@e*))) lc4831@ls/false) (let ((lc483f@t lc482f@t)) (let ((lc4841@ls/false (lc30ba@syntax-dispatch lc483f@t '_))) (if lc4841@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) lc4841@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc483f@t)))))))))))) (set! lc4bc7@lc3130@parse-top-level-program lc3130@parse-top-level-program) (set! lc3132@top-level-expander (lambda (lc4843@e*) (call-with-values (lambda () (lc3130@parse-top-level-program lc4843@e*)) (lambda (lc4849@lc4846 lc484a@lc4848) (let ((lc484d@b* lc484a@lc4848) (lc484e@imp* lc4849@lc4846)) (call-with-values (lambda () (lc312c@library-body-expander '() '() lc484e@imp* lc484d@b* '#t)) (lambda (lc485f@lc4852 lc4860@lc4854 lc4861@lc4856 lc4862@lc4858 lc4863@lc485a lc4864@lc485c lc4865@lc485e) (let ((lc486d@export-env lc4865@lc485e) (lc486e@export-subst lc4864@lc485c) (lc486f@visit-code lc4863@lc485a) (lc4870@invoke-code lc4862@lc4858) (lc4871@visit-req* lc4861@lc4856) (lc4872@invoke-req* lc4860@lc4854) (lc4873@imp* lc485f@lc4852)) (values lc4872@invoke-req* lc4870@invoke-code))))))))) (set! lc4bc8@lc3132@top-level-expander lc3132@top-level-expander) (set! lc3134@rp (lc2a00@lc28db@make-record-printer 'env (lambda (lc487b@x lc487c@p lc487d@wr) (display '"#<environment>" lc487c@p)))) (set! lc4bc9@lc3134@rp lc3134@rp) (set! lc313e@env? (lambda (lc4881@x) (and (simple-struct? lc4881@x) (eq? (simple-struct-name lc4881@x) 'env)))) (set! lc4bca@lc313e@env? lc313e@env?) (set! lc3140@env-names (lambda (lc4883@x) (simple-struct-ref lc4883@x '0))) (set! lc4bcb@lc3140@env-names lc3140@env-names) (set! lc3142@set-env-names! (lambda (lc4885@x lc4886@val) (simple-struct-set! lc4885@x '0 lc4886@val))) (set! lc4bcc@lc3142@set-env-names! lc3142@set-env-names!) (set! lc3144@env-labels (lambda (lc4889@x) (simple-struct-ref lc4889@x '1))) (set! lc4bcd@lc3144@env-labels lc3144@env-labels) (set! lc3146@set-env-labels! (lambda (lc488b@x lc488c@val) (simple-struct-set! lc488b@x '1 lc488c@val))) (set! lc4bce@lc3146@set-env-labels! lc3146@set-env-labels!) (set! lc3148@env-itc (lambda (lc488f@x) (simple-struct-ref lc488f@x '2))) (set! lc4bcf@lc3148@env-itc lc3148@env-itc) (set! lc314a@set-env-itc! (lambda (lc4891@x lc4892@val) (simple-struct-set! lc4891@x '2 lc4892@val))) (set! lc4bd0@lc314a@set-env-itc! lc314a@set-env-itc!) (set! lc314c@dummy '3) (set! lc4bd1@lc314c@dummy lc314c@dummy) (set! lc314e@rp (lc2a00@lc28db@make-record-printer 'interaction-env (lambda (lc4895@x lc4896@p lc4897@wr) (display '"#<environment>" lc4896@p)))) (set! lc4bd2@lc314e@rp lc314e@rp) (set! lc3158@interaction-env? (lambda (lc489b@x) (and (simple-struct? lc489b@x) (eq? (simple-struct-name lc489b@x) 'interaction-env)))) (set! lc4bd3@lc3158@interaction-env? lc3158@interaction-env?) (set! lc315a@interaction-env-rib (lambda (lc489d@x) (simple-struct-ref lc489d@x '0))) (set! lc4bd4@lc315a@interaction-env-rib lc315a@interaction-env-rib) (set! lc315c@set-interaction-env-rib! (lambda (lc489f@x lc48a0@val) (simple-struct-set! lc489f@x '0 lc48a0@val))) (set! lc4bd5@lc315c@set-interaction-env-rib! lc315c@set-interaction-env-rib!) (set! lc315e@interaction-env-r (lambda (lc48a3@x) (simple-struct-ref lc48a3@x '1))) (set! lc4bd6@lc315e@interaction-env-r lc315e@interaction-env-r) (set! lc3160@set-interaction-env-r! (lambda (lc48a5@x lc48a6@val) (simple-struct-set! lc48a5@x '1 lc48a6@val))) (set! lc4bd7@lc3160@set-interaction-env-r! lc3160@set-interaction-env-r!) (set! lc3162@interaction-env-locs (lambda (lc48a9@x) (simple-struct-ref lc48a9@x '2))) (set! lc4bd8@lc3162@interaction-env-locs lc3162@interaction-env-locs) (set! lc3164@set-interaction-env-locs! (lambda (lc48ab@x lc48ac@val) (simple-struct-set! lc48ab@x '2 lc48ac@val))) (set! lc4bd9@lc3164@set-interaction-env-locs! lc3164@set-interaction-env-locs!) (set! lc3166@dummy '3) (set! lc4bda@lc3166@dummy lc3166@dummy) (set! lc3168@interaction-environment-symbols (lambda () (lc3170@environment-symbols (lc31a8@interaction-environment)))) (set! lc4bdb@lc3168@interaction-environment-symbols lc3168@interaction-environment-symbols) (set! lc316a@environment-bindings (lambda (lc48af@e) (vector->list (vector-map (lambda (lc48b1@name lc48b2@label) (lc316c@parse-binding (cons lc48b1@name (lc2cce@lc2b1b@imported-label->binding lc48b2@label)))) (lc3140@env-names lc48af@e) (lc3144@env-labels lc48af@e))))) (set! lc4bdc@lc316a@environment-bindings lc316a@environment-bindings) (set! lc316c@parse-binding (lambda (lc48b5@b) (cons (car lc48b5@b) (let ((lc48b7@t (cadr lc48b5@b))) (if (memv lc48b7@t '(core-prim global)) 'procedure (if (memv lc48b7@t '(core-macro macro global-macro)) 'syntax (if (memv lc48b7@t '($core-rtd)) 'record (if (eq? (car lc48b5@b) (cadr lc48b5@b)) 'syntax 'unknown)))))))) (set! lc4bdd@lc316c@parse-binding lc316c@parse-binding) (set! lc316e@environment? (lambda (lc48b9@x) (or (lc313e@env? lc48b9@x) (lc3158@interaction-env? lc48b9@x)))) (set! lc4bde@lc316e@environment? lc316e@environment?) (set! lc3170@environment-symbols (lambda (lc48bb@x) (if (lc313e@env? lc48bb@x) (vector->list (lc3140@env-names lc48bb@x)) (if (lc3158@interaction-env? lc48bb@x) (map values (lc2e51@rib-sym* (lc315a@interaction-env-rib lc48bb@x))) (assertion-violation 'environment-symbols '"not an environment" lc48bb@x))))) (set! lc4bdf@lc3170@environment-symbols lc3170@environment-symbols) (set! lc3172@environment (lambda lc48bd@imp* (let ((lc48bf@itc (lc3120@make-collector))) (let ((lc48c5@lc48c2 lc3126@imp-collector) (lc48c6@lc48c4 lc48bf@itc)) (let ((lc48c9@swap (lambda () (let ((lc48cb@t (lc48c5@lc48c2))) (begin (lc48c5@lc48c2 lc48c6@lc48c4) (set! lc48c6@lc48c4 lc48cb@t)))))) (dynamic-wind lc48c9@swap (lambda () (call-with-values (lambda () (lc311c@parse-import-spec* lc48bd@imp*)) (lambda (lc48d1@lc48ce lc48d2@lc48d0) (let ((lc48d5@subst-labels lc48d2@lc48d0) (lc48d6@subst-names lc48d1@lc48ce)) (make-simple-struct 'env '4 (list lc48d6@subst-names lc48d5@subst-labels lc48bf@itc)))))) lc48c9@swap)))))) (set! lc4be0@lc3172@environment lc3172@environment) (set! lc3174@null-environment (lambda (lc48d9@n) (begin (if (not (eqv? lc48d9@n '5)) (assertion-violation 'null-environment '"not 5" lc48d9@n) (void)) (lc3172@environment '(psyntax null-environment-5))))) (set! lc4be1@lc3174@null-environment lc3174@null-environment) (set! lc3176@scheme-report-environment (lambda (lc48db@n) (begin (if (not (eqv? lc48db@n '5)) (assertion-violation 'scheme-report-environment '"not 5" lc48db@n) (void)) (lc3172@environment '(psyntax scheme-report-environment-5))))) (set! lc4be2@lc3176@scheme-report-environment lc3176@scheme-report-environment) (set! lc3178@expand (lambda (lc48dd@x lc48de@env) (if (lc313e@env? lc48de@env) (let ((lc48e1@rib (lc311e@make-top-rib (lc3140@env-names lc48de@env) (lc3144@env-labels lc48de@env)))) (let ((lc48e3@x (make-simple-struct 'stx '5 (list lc48dd@x lc2e37@top-mark* (list lc48e1@rib) '()))) (lc48e4@itc (lc3148@env-itc lc48de@env)) (lc48e5@rtc (lc3120@make-collector)) (lc48e6@vtc (lc3120@make-collector))) (let ((lc48eb@x (let ((lc48fd@lc48ee lc31aa@top-level-context) (lc48fe@lc48f0 lc3122@inv-collector) (lc48ff@lc48f2 lc3124@vis-collector) (lc4900@lc48f4 lc3126@imp-collector) (lc4901@lc48f6 '#f) (lc4902@lc48f8 lc48e5@rtc) (lc4903@lc48fa lc48e6@vtc) (lc4904@lc48fc lc48e4@itc)) (let ((lc490d@swap (lambda () (begin (let ((lc490f@t (lc48fd@lc48ee))) (begin (lc48fd@lc48ee lc4901@lc48f6) (set! lc4901@lc48f6 lc490f@t))) (let ((lc4911@t (lc48fe@lc48f0))) (begin (lc48fe@lc48f0 lc4902@lc48f8) (set! lc4902@lc48f8 lc4911@t))) (let ((lc4913@t (lc48ff@lc48f2))) (begin (lc48ff@lc48f2 lc4903@lc48fa) (set! lc4903@lc48fa lc4913@t))) (let ((lc4915@t (lc4900@lc48f4))) (begin (lc4900@lc48f4 lc4904@lc48fc) (set! lc4904@lc48fc lc4915@t))))))) (dynamic-wind lc490d@swap (lambda () (lc30dc@chi-expr lc48e3@x '() '())) lc490d@swap))))) (begin (lc2e6f@seal-rib! lc48e1@rib) (values lc48eb@x (lc48e5@rtc)))))) (if (lc3158@interaction-env? lc48de@env) (let ((lc4917@rib (lc315a@interaction-env-rib lc48de@env)) (lc4918@r (lc315e@interaction-env-r lc48de@env)) (lc4919@rtc (lc3120@make-collector))) (let ((lc491d@x (make-simple-struct 'stx '5 (list lc48dd@x lc2e37@top-mark* (list lc4917@rib) '())))) (call-with-values (lambda () (let ((lc4933@lc4924 lc31aa@top-level-context) (lc4934@lc4926 lc3122@inv-collector) (lc4935@lc4928 lc3124@vis-collector) (lc4936@lc492a lc3126@imp-collector) (lc4937@lc492c lc48de@env) (lc4938@lc492e lc4919@rtc) (lc4939@lc4930 (lc3120@make-collector)) (lc493a@lc4932 (lc3120@make-collector))) (let ((lc4943@swap (lambda () (begin (let ((lc4945@t (lc4933@lc4924))) (begin (lc4933@lc4924 lc4937@lc492c) (set! lc4937@lc492c lc4945@t))) (let ((lc4947@t (lc4934@lc4926))) (begin (lc4934@lc4926 lc4938@lc492e) (set! lc4938@lc492e lc4947@t))) (let ((lc4949@t (lc4935@lc4928))) (begin (lc4935@lc4928 lc4939@lc4930) (set! lc4939@lc4930 lc4949@t))) (let ((lc494b@t (lc4936@lc492a))) (begin (lc4936@lc492a lc493a@lc4932) (set! lc493a@lc4932 lc494b@t))))))) (dynamic-wind lc4943@swap (lambda () (lc312a@chi-interaction-expr lc491d@x lc4917@rib lc4918@r)) lc4943@swap)))) (lambda (lc494d@lc4920 lc494e@lc4922) (let ((lc4951@r^ lc494e@lc4922) (lc4952@e lc494d@lc4920)) (begin (lc3160@set-interaction-env-r! lc48de@env lc4951@r^) (values lc4952@e (lc4919@rtc)))))))) (assertion-violation 'expand '"not an environment" lc48de@env))))) (set! lc4be3@lc3178@expand lc3178@expand) (set! lc317a@eval (lambda (lc4955@x lc4956@env) (begin (if (not (lc316e@environment? lc4956@env)) (error 'eval '"not an environment" lc4956@env) (void)) (call-with-values (lambda () (lc3178@expand lc4955@x lc4956@env)) (lambda (lc495d@lc495a lc495e@lc495c) (let ((lc4961@invoke-req* lc495e@lc495c) (lc4962@x lc495d@lc495a)) (begin (for-each lc2ccf@lc2b1d@invoke-library lc4961@invoke-req*) (eval-core (lc2a59@lc2a11@expanded->core lc4962@x))))))))) (set! lc4be4@lc317a@eval lc317a@eval) (set! lc317c@library-expander (lambda lc49d3 (let ((lc49d4 (length lc49d3))) (if (= lc49d4 '3) (apply (lambda (lc4965@x lc4966@filename lc4967@verify-name) (letrec* ((lc496c@build-visit-code (lambda (lc49c1@macro*) (if (null? lc49c1@macro*) (lc2e19@lc2d7a@build-void) (lc2e18@lc2d78@build-sequence '#f (map (lambda (lc49c3@x) (let ((lc49c5@loc (car lc49c3@x)) (lc49c6@src (cddr lc49c3@x))) (list 'set! lc49c5@loc lc49c6@src))) lc49c1@macro*))))) (lc496e@visit! (lambda (lc49b9@macro*) (for-each (lambda (lc49bb@x) (let ((lc49bd@loc (car lc49bb@x)) (lc49be@proc (cadr lc49bb@x))) (set-symbol-value! lc49bd@loc lc49be@proc))) lc49b9@macro*)))) (call-with-values (lambda () (lc312e@core-library-expander lc4965@x lc4967@verify-name)) (lambda (lc4981@lc4970 lc4982@lc4972 lc4983@lc4974 lc4984@lc4976 lc4985@lc4978 lc4986@lc497a lc4987@lc497c lc4988@lc497e lc4989@lc4980) (let ((lc4993@export-env lc4989@lc4980) (lc4994@export-subst lc4988@lc497e) (lc4995@macro* lc4987@lc497c) (lc4996@invoke-code lc4986@lc497a) (lc4997@vis* lc4985@lc4978) (lc4998@inv* lc4984@lc4976) (lc4999@imp* lc4983@lc4974) (lc499a@ver lc4982@lc4972) (lc499b@name lc4981@lc4970)) (let ((lc49a5@id (gensym)) (lc49a6@name lc499b@name) (lc49a7@ver lc499a@ver) (lc49a8@imp* (map lc2cd3@lc2b25@library-spec lc4999@imp*)) (lc49a9@vis* (map lc2cd3@lc2b25@library-spec lc4997@vis*)) (lc49aa@inv* (map lc2cd3@lc2b25@library-spec lc4998@inv*)) (lc49ab@visit-proc (lambda () (lc496e@visit! lc4995@macro*))) (lc49ac@invoke-proc (lambda () (eval-core (lc2a59@lc2a11@expanded->core lc4996@invoke-code)))) (lc49ad@visit-code (lc496c@build-visit-code lc4995@macro*)) (lc49ae@invoke-code lc4996@invoke-code)) (begin (lc2ccd@lc2b19@install-library lc49a5@id lc49a6@name lc49a7@ver lc49a8@imp* lc49a9@vis* lc49aa@inv* lc4994@export-subst lc4993@export-env lc49ab@visit-proc lc49ac@invoke-proc lc49ad@visit-code lc49ae@invoke-code '#t lc4966@filename) (values lc49a5@id lc49a6@name lc49a7@ver lc49a8@imp* lc49a9@vis* lc49aa@inv* lc49ae@invoke-code lc49ad@visit-code lc4994@export-subst lc4993@export-env)))))))) lc49d3) (if (= lc49d4 '2) (apply (lambda (lc49c9@x lc49ca@filename) (lc317c@library-expander lc49c9@x lc49ca@filename (lambda (lc49cd@x) (values)))) lc49d3) (if (= lc49d4 '1) (apply (lambda (lc49cf@x) (lc317c@library-expander lc49cf@x '#f (lambda (lc49d1@x) (values)))) lc49d3) (error 'apply '"invalid arg count"))))))) (set! lc4be5@lc317c@library-expander lc317c@library-expander) (set! lc317e@boot-library-expand (lambda (lc49d5@x) (call-with-values (lambda () (lc317c@library-expander lc49d5@x)) (lambda (lc49eb@lc49d8 lc49ec@lc49da lc49ed@lc49dc lc49ee@lc49de lc49ef@lc49e0 lc49f0@lc49e2 lc49f1@lc49e4 lc49f2@lc49e6 lc49f3@lc49e8 lc49f4@lc49ea) (let ((lc49ff@export-env lc49f4@lc49ea) (lc4a00@export-subst lc49f3@lc49e8) (lc4a01@visit-code lc49f2@lc49e6) (lc4a02@invoke-code lc49f1@lc49e4) (lc4a03@inv* lc49f0@lc49e2) (lc4a04@vis* lc49ef@lc49e0) (lc4a05@imp* lc49ee@lc49de) (lc4a06@ver lc49ed@lc49dc) (lc4a07@name lc49ec@lc49da) (lc4a08@id lc49eb@lc49d8)) (values lc4a07@name lc4a02@invoke-code lc4a00@export-subst lc49ff@export-env)))))) (set! lc4be6@lc317e@boot-library-expand lc317e@boot-library-expand) (set! lc3180@rev-map-append (lambda (lc4a13@f lc4a14@ls lc4a15@ac) (if (null? lc4a14@ls) lc4a15@ac (lc3180@rev-map-append lc4a13@f (cdr lc4a14@ls) (cons (lc4a13@f (car lc4a14@ls)) lc4a15@ac))))) (set! lc4be7@lc3180@rev-map-append lc3180@rev-map-append) (set! lc3182@build-exports (lambda (lc4a19@lex*+loc* lc4a1a@init*) (lc2e18@lc2d78@build-sequence '#f (cons (lc2e19@lc2d7a@build-void) (lc3180@rev-map-append (lambda (lc4a1d@x) (list 'set! (cdr lc4a1d@x) (car lc4a1d@x))) lc4a19@lex*+loc* lc4a1a@init*))))) (set! lc4be8@lc3182@build-exports lc3182@build-exports) (set! lc3184@make-export-subst (lambda (lc4a1f@name* lc4a20@id*) (map (lambda (lc4a23@name lc4a24@id) (let ((lc4a27@label (lc2ec9@id->label lc4a24@id))) (begin (if (not lc4a27@label) (lc319a@syntax-violation '#f '"cannot export unbound identifier" lc4a24@id) (void)) (cons lc4a23@name lc4a27@label)))) lc4a1f@name* lc4a20@id*))) (set! lc4be9@lc3184@make-export-subst lc3184@make-export-subst) (set! lc3186@make-export-env/macros (lambda (lc4a29@lex* lc4a2a@loc* lc4a2b@r) (letrec* ((lc4a30@lookup (lambda (lc4a4d@x) (let lc4a55@f ((lc4a4f@x lc4a4d@x) (lc4a50@lex* lc4a29@lex*) (lc4a51@loc* lc4a2a@loc*)) (if (pair? lc4a50@lex*) (if (eq? lc4a4f@x (car lc4a50@lex*)) (car lc4a51@loc*) (lc4a55@f lc4a4f@x (cdr lc4a50@lex*) (cdr lc4a51@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let lc4a39@f ((lc4a31@r lc4a2b@r) (lc4a32@env '()) (lc4a33@global* '()) (lc4a34@macro* '())) (if (null? lc4a31@r) (values lc4a32@env lc4a33@global* lc4a34@macro*) (let ((lc4a3b@x (car lc4a31@r))) (let ((lc4a3d@label (car lc4a3b@x)) (lc4a3e@b (cdr lc4a3b@x))) (let ((lc4a41@t (lc2ecf@binding-type lc4a3e@b))) (if (memv lc4a41@t '(lexical)) (let ((lc4a43@v (lc2ed1@binding-value lc4a3e@b))) (let ((lc4a45@loc (lc4a30@lookup (lc3044@lexical-var lc4a43@v))) (lc4a46@type (if (lc3046@lexical-mutable? lc4a43@v) 'mutable 'global))) (lc4a39@f (cdr lc4a31@r) (cons (cons* lc4a3d@label lc4a46@type lc4a45@loc) lc4a32@env) (cons (cons (lc3044@lexical-var lc4a43@v) lc4a45@loc) lc4a33@global*) lc4a34@macro*))) (if (memv lc4a41@t '(local-macro)) (let ((lc4a49@loc (gensym))) (lc4a39@f (cdr lc4a31@r) (cons (cons* lc4a3d@label 'global-macro lc4a49@loc) lc4a32@env) lc4a33@global* (cons (cons lc4a49@loc (lc2ed1@binding-value lc4a3e@b)) lc4a34@macro*))) (if (memv lc4a41@t '(local-macro!)) (let ((lc4a4b@loc (gensym))) (lc4a39@f (cdr lc4a31@r) (cons (cons* lc4a3d@label 'global-macro! lc4a4b@loc) lc4a32@env) lc4a33@global* (cons (cons lc4a4b@loc (lc2ed1@binding-value lc4a3e@b)) lc4a34@macro*))) (if (memv lc4a41@t '($rtd $module)) (lc4a39@f (cdr lc4a31@r) (cons lc4a3b@x lc4a32@env) lc4a33@global* lc4a34@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (lc2ecf@binding-type lc4a3e@b) (lc2ed1@binding-value lc4a3e@b)))))))))))))) (set! lc4bea@lc3186@make-export-env/macros lc3186@make-export-env/macros) (set! lc3188@generate-temporaries (lambda (lc4a57@ls) (let ((lc4a59@t lc4a57@ls)) (let ((lc4a5b@ls/false (lc30ba@syntax-dispatch lc4a59@t 'each-any))) (if lc4a5b@ls/false (apply (lambda (lc4a5d@ls) (map (lambda (lc4a5f@x) (make-simple-struct 'stx '5 (list (let ((lc4a61@x (lc31a0@syntax->datum lc4a5f@x))) (if (or (symbol? lc4a61@x) (string? lc4a61@x)) (gensym lc4a61@x) (gensym 't))) lc2e37@top-mark* '() '()))) lc4a5d@ls)) lc4a5b@ls/false) (let ((lc4a63@t lc4a59@t)) (let ((lc4a65@ls/false (lc30ba@syntax-dispatch lc4a63@t '_))) (if lc4a65@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) lc4a65@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4a63@t))))))))) (set! lc4beb@lc3188@generate-temporaries lc3188@generate-temporaries) (set! lc318a@free-identifier=? (lambda (lc4a67@x lc4a68@y) (if (lc2eb3@id? lc4a67@x) (if (lc2eb3@id? lc4a68@y) (lc2eb9@free-id=? lc4a67@x lc4a68@y) (assertion-violation 'free-identifier=? '"not an identifier" lc4a68@y)) (assertion-violation 'free-identifier=? '"not an identifier" lc4a67@x)))) (set! lc4bec@lc318a@free-identifier=? lc318a@free-identifier=?) (set! lc318c@bound-identifier=? (lambda (lc4a6b@x lc4a6c@y) (if (lc2eb3@id? lc4a6b@x) (if (lc2eb3@id? lc4a6c@y) (lc2eb7@bound-id=? lc4a6b@x lc4a6c@y) (assertion-violation 'bound-identifier=? '"not an identifier" lc4a6c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" lc4a6b@x)))) (set! lc4bed@lc318c@bound-identifier=? lc318c@bound-identifier=?) (set! lc318e@make-source-condition (lambda (lc4a6f@x) (letrec* ((lc4a79@lc4a74 (make-record-type-descriptor '&source-information lc4ecf@lc4c16@&condition-rtd 'lc4a77 '#f '#f '#((immutable file-name) (immutable character)))) (lc4a7b@lc4a76 '#f) (lc4a7d@lc4a75 (make-record-constructor-descriptor lc4a79@lc4a74 lc4ed0@lc4c18@&condition-rcd lc4a7b@lc4a76)) (lc4a80@lc4a73 (record-predicate lc4a79@lc4a74)) (lc4a82@make-source-condition (record-constructor lc4a7d@lc4a75)) (lc4a84@lc4a71 (record-accessor lc4a79@lc4a74 '0)) (lc4a86@lc4a72 (record-accessor lc4a79@lc4a74 '1)) (lc4a88@source-condition? (condition-predicate lc4a79@lc4a74)) (lc4a8a@source-filename (condition-accessor lc4a79@lc4a74 lc4a84@lc4a71)) (lc4a8c@source-character (condition-accessor lc4a79@lc4a74 lc4a86@lc4a72))) (if (pair? lc4a6f@x) (lc4a82@make-source-condition (car lc4a6f@x) (cdr lc4a6f@x)) (condition))))) (set! lc4bee@lc318e@make-source-condition lc318e@make-source-condition) (set! lc3190@extract-position-condition (lambda (lc4a8d@x) (lc318e@make-source-condition (lc3192@expression-position lc4a8d@x)))) (set! lc4bef@lc3190@extract-position-condition lc3190@extract-position-condition) (set! lc3192@expression-position (lambda (lc4a8f@x) (and (lc2e7f@stx? lc4a8f@x) (let ((lc4a91@x (lc2e81@stx-expr lc4a8f@x))) (and (lc29f7@lc28c9@annotation? lc4a91@x) (lc29f8@lc28cb@annotation-source lc4a91@x)))))) (set! lc4bf0@lc3192@expression-position lc3192@expression-position) (set! lc3194@assertion-error (lambda (lc4a93@expr lc4a94@pos) (raise (condition (lc4eff@lc4cda@make-assertion-violation) (lc4f11@lc4d0c@make-who-condition 'assert) (lc4ed5@lc4c6d@make-message-condition '"assertion failed") (lc4f07@lc4cf1@make-irritants-condition (list lc4a93@expr)) (lc318e@make-source-condition lc4a94@pos))))) (set! lc4bf1@lc3194@assertion-error lc3194@assertion-error) (set! lc3196@syntax-error (lambda (lc4a97@x . lc4a99@args) (begin (if (not (for-all string? lc4a99@args)) (assertion-violation 'syntax-error '"invalid argument" lc4a99@args) (void)) (raise (condition (lc4ed5@lc4c6d@make-message-condition (if (null? lc4a99@args) '"invalid syntax" (apply string-append lc4a99@args))) (lc4f33@lc4d68@make-syntax-violation (lc31a0@syntax->datum lc4a97@x) '#f) (lc3190@extract-position-condition lc4a97@x)))))) (set! lc4bf2@lc3196@syntax-error lc3196@syntax-error) (set! lc3198@syntax-violation* (lambda (lc4a9b@who lc4a9c@msg lc4a9d@form lc4a9e@condition-object) (begin (if (not (string? lc4a9c@msg)) (assertion-violation 'syntax-violation '"message is not a string" lc4a9c@msg) (void)) (let ((lc4aa3@who (if (or (string? lc4a9b@who) (symbol? lc4a9b@who)) lc4a9b@who (if (not lc4a9b@who) (let ((lc4aa5@t lc4a9d@form)) (let ((lc4aa7@ls/false (lc30ba@syntax-dispatch lc4aa5@t 'any))) (if (and lc4aa7@ls/false (apply (lambda (lc4aa9@id) (lc2eb3@id? lc4aa9@id)) lc4aa7@ls/false)) (apply (lambda (lc4aab@id) (lc31a0@syntax->datum lc4aab@id)) lc4aa7@ls/false) (let ((lc4aad@t lc4aa5@t)) (let ((lc4aaf@ls/false (lc30ba@syntax-dispatch lc4aad@t '(any . any)))) (if (and lc4aaf@ls/false (apply (lambda (lc4ab1@id lc4ab2@rest) (lc2eb3@id? lc4ab1@id)) lc4aaf@ls/false)) (apply (lambda (lc4ab5@id lc4ab6@rest) (lc31a0@syntax->datum lc4ab5@id)) lc4aaf@ls/false) (let ((lc4ab9@t lc4aad@t)) (let ((lc4abb@ls/false (lc30ba@syntax-dispatch lc4ab9@t '_))) (if lc4abb@ls/false (apply (lambda () '#f) lc4abb@ls/false) (lc319a@syntax-violation '#f '"invalid syntax" lc4ab9@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" lc4a9b@who))))) (raise (condition (if lc4aa3@who (lc4f11@lc4d0c@make-who-condition lc4aa3@who) (condition)) (lc4ed5@lc4c6d@make-message-condition lc4a9c@msg) lc4a9e@condition-object (lc3190@extract-position-condition lc4a9d@form))))))) (set! lc4bf3@lc3198@syntax-violation* lc3198@syntax-violation*) (set! lc319a@syntax-violation (lambda lc4acb (let ((lc4acc (length lc4acb))) (if (= lc4acc '3) (apply (lambda (lc4abd@who lc4abe@msg lc4abf@form) (lc319a@syntax-violation lc4abd@who lc4abe@msg lc4abf@form '#f)) lc4acb) (if (= lc4acc '4) (apply (lambda (lc4ac3@who lc4ac4@msg lc4ac5@form lc4ac6@subform) (lc3198@syntax-violation* lc4ac3@who lc4ac4@msg lc4ac5@form (lc4f33@lc4d68@make-syntax-violation (lc31a0@syntax->datum lc4ac5@form) (lc31a0@syntax->datum lc4ac6@subform)))) lc4acb) (error 'apply '"invalid arg count")))))) (set! lc4bf4@lc319a@syntax-violation lc319a@syntax-violation) (set! lc319c@identifier? (lambda (lc4acd@x) (lc2eb3@id? lc4acd@x))) (set! lc4bf5@lc319c@identifier? lc319c@identifier?) (set! lc319e@datum->syntax (lambda (lc4acf@id lc4ad0@datum) (if (lc2eb3@id? lc4acf@id) (lc2e93@datum->stx lc4acf@id lc4ad0@datum) (assertion-violation 'datum->syntax '"not an identifier" lc4acf@id)))) (set! lc4bf6@lc319e@datum->syntax lc319e@datum->syntax) (set! lc31a0@syntax->datum (lambda (lc4ad3@x) (lc2ec7@stx->datum lc4ad3@x))) (set! lc4bf7@lc31a0@syntax->datum lc31a0@syntax->datum) (set! lc31a2@ungensym-all (lambda (lc4ad5@code) (if (pair? lc4ad5@code) (cons (lc31a2@ungensym-all (car lc4ad5@code)) (lc31a2@ungensym-all (cdr lc4ad5@code))) (if (symbol? lc4ad5@code) (ungensym lc4ad5@code) lc4ad5@code)))) (set! lc4bf8@lc31a2@ungensym-all lc31a2@ungensym-all) (set! lc31a4@compile-r6rs-top-level (lambda (lc4ad7@x*) (call-with-values (lambda () (lc3132@top-level-expander lc4ad7@x*)) (lambda (lc4add@lc4ada lc4ade@lc4adc) (let ((lc4ae1@invoke-code lc4ade@lc4adc) (lc4ae2@lib* lc4add@lc4ada)) (lambda () (begin (for-each lc2ccf@lc2b1d@invoke-library lc4ae2@lib*) (let ((lc4ae5@expanded (lc2a59@lc2a11@expanded->core lc4ae1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (lc31a2@ungensym-all lc4ae5@expanded)) (void)) (eval-core lc4ae5@expanded)))))))))) (set! lc4bf9@lc31a4@compile-r6rs-top-level lc31a4@compile-r6rs-top-level) (set! lc31a6@pre-compile-r6rs-top-level (lambda (lc4ae7@x*) (call-with-values (lambda () (lc3132@top-level-expander lc4ae7@x*)) (lambda (lc4aed@lc4aea lc4aee@lc4aec) (let ((lc4af1@invoke-code lc4aee@lc4aec) (lc4af2@lib* lc4aed@lc4aea)) (begin (for-each lc2ccf@lc2b1d@invoke-library lc4af2@lib*) (lc2a01@lc28dd@compile-core (lc2a59@lc2a11@expanded->core lc4af1@invoke-code)))))))) (set! lc4bfa@lc31a6@pre-compile-r6rs-top-level lc31a6@pre-compile-r6rs-top-level) (set! lc31a8@interaction-environment (let ((lc4af5@the-env '#f)) (lambda () (or lc4af5@the-env (let ((lc4af7@lib (lc2cc8@lc2b0f@find-library-by-name '(mosh interaction))) (lc4af8@rib (lc2e67@make-empty-rib))) (begin (let ((lc4afb@subst (lc2caa@lc2ad3@library-subst lc4af7@lib))) (begin (lc2e53@set-rib-sym*! lc4af8@rib (map car lc4afb@subst)) (lc2e57@set-rib-mark**! lc4af8@rib (map (lambda (lc4afd@x) lc2e37@top-mark*) lc4afb@subst)) (lc2e5b@set-rib-label*! lc4af8@rib (map cdr lc4afb@subst)))) (let ((lc4aff@env (make-simple-struct 'interaction-env '4 (list lc4af8@rib '() '())))) (begin (set! lc4af5@the-env lc4aff@env) lc4aff@env)))))))) (set! lc4bfb@lc31a8@interaction-environment lc31a8@interaction-environment) (set! lc31aa@top-level-context (lc2a03@lc28e1@make-parameter '#f)) (set! lc4bfc@lc31aa@top-level-context lc31aa@top-level-context) (lc2cc5@lc2b09@current-library-expander lc317c@library-expander))
(begin (set! lc4c0b@lc4c06 (unspecified)) (set! lc4c0d@lc4c08 (unspecified)) (set! lc4c0f@lc4c07 (unspecified)) (set! lc4c12@&condition? (unspecified)) (set! lc4c14@make-&condition (unspecified)) (set! lc4c16@&condition-rtd (unspecified)) (set! lc4c18@&condition-rcd (unspecified)) (set! lc4c64@lc4c5f (unspecified)) (set! lc4c66@lc4c61 (unspecified)) (set! lc4c68@lc4c60 (unspecified)) (set! lc4c6b@p? (unspecified)) (set! lc4c6d@make-message-condition (unspecified)) (set! lc4c6f@lc4c5e (unspecified)) (set! lc4c71@message-condition? (unspecified)) (set! lc4c73@condition-message (unspecified)) (set! lc4c75@&message-rtd (unspecified)) (set! lc4c77@&message-rcd (unspecified)) (set! lc4c7d@lc4c78 (unspecified)) (set! lc4c7f@lc4c7a (unspecified)) (set! lc4c81@lc4c79 (unspecified)) (set! lc4c84@p? (unspecified)) (set! lc4c86@make-warning (unspecified)) (set! lc4c88@warning? (unspecified)) (set! lc4c8a@&warning-rtd (unspecified)) (set! lc4c8c@&warning-rcd (unspecified)) (set! lc4c92@lc4c8d (unspecified)) (set! lc4c94@lc4c8f (unspecified)) (set! lc4c96@lc4c8e (unspecified)) (set! lc4c99@p? (unspecified)) (set! lc4c9b@make-serious-condition (unspecified)) (set! lc4c9d@serious-condition? (unspecified)) (set! lc4c9f@&serious-rtd (unspecified)) (set! lc4ca1@&serious-rcd (unspecified)) (set! lc4ca7@lc4ca2 (unspecified)) (set! lc4ca9@lc4ca4 (unspecified)) (set! lc4cab@lc4ca3 (unspecified)) (set! lc4cae@p? (unspecified)) (set! lc4cb0@make-error (unspecified)) (set! lc4cb2@error? (unspecified)) (set! lc4cb4@&error-rtd (unspecified)) (set! lc4cb6@&error-rcd (unspecified)) (set! lc4cbc@lc4cb7 (unspecified)) (set! lc4cbe@lc4cb9 (unspecified)) (set! lc4cc0@lc4cb8 (unspecified)) (set! lc4cc3@p? (unspecified)) (set! lc4cc5@make-violation (unspecified)) (set! lc4cc7@violation? (unspecified)) (set! lc4cc9@&violation-rtd (unspecified)) (set! lc4ccb@&violation-rcd (unspecified)) (set! lc4cd1@lc4ccc (unspecified)) (set! lc4cd3@lc4cce (unspecified)) (set! lc4cd5@lc4ccd (unspecified)) (set! lc4cd8@p? (unspecified)) (set! lc4cda@make-assertion-violation (unspecified)) (set! lc4cdc@assertion-violation? (unspecified)) (set! lc4cde@&assertion-rtd (unspecified)) (set! lc4ce0@&assertion-rcd (unspecified)) (set! lc4ce8@lc4ce3 (unspecified)) (set! lc4cea@lc4ce5 (unspecified)) (set! lc4cec@lc4ce4 (unspecified)) (set! lc4cef@p? (unspecified)) (set! lc4cf1@make-irritants-condition (unspecified)) (set! lc4cf3@lc4ce2 (unspecified)) (set! lc4cf5@irritants-condition? (unspecified)) (set! lc4cf7@condition-irritants (unspecified)) (set! lc4cf9@&irritants-rtd (unspecified)) (set! lc4cfb@&irritants-rcd (unspecified)) (set! lc4d03@lc4cfe (unspecified)) (set! lc4d05@lc4d00 (unspecified)) (set! lc4d07@lc4cff (unspecified)) (set! lc4d0a@p? (unspecified)) (set! lc4d0c@make-who-condition (unspecified)) (set! lc4d0e@lc4cfd (unspecified)) (set! lc4d10@who-condition? (unspecified)) (set! lc4d12@condition-who (unspecified)) (set! lc4d14@&who-rtd (unspecified)) (set! lc4d16@&who-rcd (unspecified)) (set! lc4d1c@lc4d17 (unspecified)) (set! lc4d1e@lc4d19 (unspecified)) (set! lc4d20@lc4d18 (unspecified)) (set! lc4d23@p? (unspecified)) (set! lc4d25@make-non-continuable-violation (unspecified)) (set! lc4d27@non-continuable-violation? (unspecified)) (set! lc4d29@&non-continuable-rtd (unspecified)) (set! lc4d2b@&non-continuable-rcd (unspecified)) (set! lc4d31@lc4d2c (unspecified)) (set! lc4d33@lc4d2e (unspecified)) (set! lc4d35@lc4d2d (unspecified)) (set! lc4d38@p? (unspecified)) (set! lc4d3a@make-implementation-restriction-violation (unspecified)) (set! lc4d3c@implementation-restriction-violation? (unspecified)) (set! lc4d3e@&implementation-restriction-rtd (unspecified)) (set! lc4d40@&implementation-restriction-rcd (unspecified)) (set! lc4d46@lc4d41 (unspecified)) (set! lc4d48@lc4d43 (unspecified)) (set! lc4d4a@lc4d42 (unspecified)) (set! lc4d4d@p? (unspecified)) (set! lc4d4f@make-lexical-violation (unspecified)) (set! lc4d51@lexical-violation? (unspecified)) (set! lc4d53@&lexical-rtd (unspecified)) (set! lc4d55@&lexical-rcd (unspecified)) (set! lc4d5f@lc4d5a (unspecified)) (set! lc4d61@lc4d5c (unspecified)) (set! lc4d63@lc4d5b (unspecified)) (set! lc4d66@p? (unspecified)) (set! lc4d68@make-syntax-violation (unspecified)) (set! lc4d6a@lc4d57 (unspecified)) (set! lc4d6c@lc4d59 (unspecified)) (set! lc4d6e@syntax-violation? (unspecified)) (set! lc4d70@syntax-violation-form (unspecified)) (set! lc4d72@syntax-violation-subform (unspecified)) (set! lc4d74@&syntax-rtd (unspecified)) (set! lc4d76@&syntax-rcd (unspecified)) (set! lc4d7c@lc4d77 (unspecified)) (set! lc4d7e@lc4d79 (unspecified)) (set! lc4d80@lc4d78 (unspecified)) (set! lc4d83@p? (unspecified)) (set! lc4d85@make-undefined-violation (unspecified)) (set! lc4d87@undefined-violation? (unspecified)) (set! lc4d89@&undefined-rtd (unspecified)) (set! lc4d8b@&undefined-rcd (unspecified)) (set! lc4d91@lc4d8c (unspecified)) (set! lc4d93@lc4d8e (unspecified)) (set! lc4d95@lc4d8d (unspecified)) (set! lc4d98@p? (unspecified)) (set! lc4d9a@make-i/o-error (unspecified)) (set! lc4d9c@i/o-error? (unspecified)) (set! lc4d9e@&i/o-rtd (unspecified)) (set! lc4da0@&i/o-rcd (unspecified)) (set! lc4da6@lc4da1 (unspecified)) (set! lc4da8@lc4da3 (unspecified)) (set! lc4daa@lc4da2 (unspecified)) (set! lc4dad@p? (unspecified)) (set! lc4daf@make-i/o-read-error (unspecified)) (set! lc4db1@i/o-read-error? (unspecified)) (set! lc4db3@&i/o-read-rtd (unspecified)) (set! lc4db5@&i/o-read-rcd (unspecified)) (set! lc4dbb@lc4db6 (unspecified)) (set! lc4dbd@lc4db8 (unspecified)) (set! lc4dbf@lc4db7 (unspecified)) (set! lc4dc2@p? (unspecified)) (set! lc4dc4@make-i/o-write-error (unspecified)) (set! lc4dc6@i/o-write-error? (unspecified)) (set! lc4dc8@&i/o-write-rtd (unspecified)) (set! lc4dca@&i/o-write-rcd (unspecified)) (set! lc4dd2@lc4dcd (unspecified)) (set! lc4dd4@lc4dcf (unspecified)) (set! lc4dd6@lc4dce (unspecified)) (set! lc4dd9@p? (unspecified)) (set! lc4ddb@make-i/o-invalid-position-error (unspecified)) (set! lc4ddd@lc4dcc (unspecified)) (set! lc4ddf@i/o-invalid-position-error? (unspecified)) (set! lc4de1@i/o-error-position (unspecified)) (set! lc4de3@&i/o-invalid-position-rtd (unspecified)) (set! lc4de5@&i/o-invalid-position-rcd (unspecified)) (set! lc4ded@lc4de8 (unspecified)) (set! lc4def@lc4dea (unspecified)) (set! lc4df1@lc4de9 (unspecified)) (set! lc4df4@p? (unspecified)) (set! lc4df6@make-i/o-filename-error (unspecified)) (set! lc4df8@lc4de7 (unspecified)) (set! lc4dfa@i/o-filename-error? (unspecified)) (set! lc4dfc@i/o-error-filename (unspecified)) (set! lc4dfe@&i/o-filename-rtd (unspecified)) (set! lc4e00@&i/o-filename-rcd (unspecified)) (set! lc4e06@lc4e01 (unspecified)) (set! lc4e08@lc4e03 (unspecified)) (set! lc4e0a@lc4e02 (unspecified)) (set! lc4e0d@p? (unspecified)) (set! lc4e0f@make-i/o-file-protection-error (unspecified)) (set! lc4e11@i/o-file-protection-error? (unspecified)) (set! lc4e13@&i/o-file-protection-rtd (unspecified)) (set! lc4e15@&i/o-file-protection-rcd (unspecified)) (set! lc4e1b@lc4e16 (unspecified)) (set! lc4e1d@lc4e18 (unspecified)) (set! lc4e1f@lc4e17 (unspecified)) (set! lc4e22@p? (unspecified)) (set! lc4e24@make-i/o-file-is-read-only-error (unspecified)) (set! lc4e26@i/o-file-is-read-only-error? (unspecified)) (set! lc4e28@&i/o-file-is-read-only-rtd (unspecified)) (set! lc4e2a@&i/o-file-is-read-only-rcd (unspecified)) (set! lc4e30@lc4e2b (unspecified)) (set! lc4e32@lc4e2d (unspecified)) (set! lc4e34@lc4e2c (unspecified)) (set! lc4e37@p? (unspecified)) (set! lc4e39@make-i/o-file-already-exists-error (unspecified)) (set! lc4e3b@i/o-file-already-exists-error? (unspecified)) (set! lc4e3d@&i/o-file-already-exists-rtd (unspecified)) (set! lc4e3f@&i/o-file-already-exists-rcd (unspecified)) (set! lc4e45@lc4e40 (unspecified)) (set! lc4e47@lc4e42 (unspecified)) (set! lc4e49@lc4e41 (unspecified)) (set! lc4e4c@p? (unspecified)) (set! lc4e4e@make-i/o-file-does-not-exist-error (unspecified)) (set! lc4e50@i/o-file-does-not-exist-error? (unspecified)) (set! lc4e52@&i/o-file-does-not-exist-rtd (unspecified)) (set! lc4e54@&i/o-file-does-not-exist-rcd (unspecified)) (set! lc4e5c@lc4e57 (unspecified)) (set! lc4e5e@lc4e59 (unspecified)) (set! lc4e60@lc4e58 (unspecified)) (set! lc4e63@p? (unspecified)) (set! lc4e65@make-i/o-port-error (unspecified)) (set! lc4e67@lc4e56 (unspecified)) (set! lc4e69@i/o-port-error? (unspecified)) (set! lc4e6b@i/o-error-port (unspecified)) (set! lc4e6d@&i/o-port-rtd (unspecified)) (set! lc4e6f@&i/o-port-rcd (unspecified)) (set! lc4e75@lc4e70 (unspecified)) (set! lc4e77@lc4e72 (unspecified)) (set! lc4e79@lc4e71 (unspecified)) (set! lc4e7c@p? (unspecified)) (set! lc4e7e@make-i/o-decoding-error (unspecified)) (set! lc4e80@i/o-decoding-error? (unspecified)) (set! lc4e82@&i/o-decoding-rtd (unspecified)) (set! lc4e84@&i/o-decoding-rcd (unspecified)) (set! lc4e8c@lc4e87 (unspecified)) (set! lc4e8e@lc4e89 (unspecified)) (set! lc4e90@lc4e88 (unspecified)) (set! lc4e93@p? (unspecified)) (set! lc4e95@make-i/o-encoding-error (unspecified)) (set! lc4e97@lc4e86 (unspecified)) (set! lc4e99@i/o-encoding-error? (unspecified)) (set! lc4e9b@i/o-encoding-error-char (unspecified)) (set! lc4e9d@&i/o-encoding-rtd (unspecified)) (set! lc4e9f@&i/o-encoding-rcd (unspecified)) (set! lc4ea5@lc4ea0 (unspecified)) (set! lc4ea7@lc4ea2 (unspecified)) (set! lc4ea9@lc4ea1 (unspecified)) (set! lc4eac@p? (unspecified)) (set! lc4eae@make-no-infinities-violation (unspecified)) (set! lc4eb0@no-infinities-violation? (unspecified)) (set! lc4eb2@&no-infinities-rtd (unspecified)) (set! lc4eb4@&no-infinities-rcd (unspecified)) (set! lc4eba@lc4eb5 (unspecified)) (set! lc4ebc@lc4eb7 (unspecified)) (set! lc4ebe@lc4eb6 (unspecified)) (set! lc4ec1@p? (unspecified)) (set! lc4ec3@make-no-nans-violation (unspecified)) (set! lc4ec5@no-nans-violation? (unspecified)) (set! lc4ec7@&no-nans-rtd (unspecified)) (set! lc4ec9@&no-nans-rcd (unspecified)) (set! lc4c0b@lc4c06 (make-record-type-descriptor '&condition '#f 'lc4c09 '#f '#f '#())) (set! lc4eca@lc4c0b@lc4c06 lc4c0b@lc4c06) (set! lc4c0d@lc4c08 '#f) (set! lc4ecb@lc4c0d@lc4c08 lc4c0d@lc4c08) (set! lc4c0f@lc4c07 (make-record-constructor-descriptor lc4c0b@lc4c06 '#f lc4c0d@lc4c08)) (set! lc4ecc@lc4c0f@lc4c07 lc4c0f@lc4c07) (set! lc4c12@&condition? (record-predicate lc4c0b@lc4c06)) (set! lc4ecd@lc4c12@&condition? lc4c12@&condition?) (set! lc4c14@make-&condition (record-constructor lc4c0f@lc4c07)) (set! lc4ece@lc4c14@make-&condition lc4c14@make-&condition) (set! lc4c16@&condition-rtd lc4c0b@lc4c06) (set! lc4ecf@lc4c16@&condition-rtd lc4c16@&condition-rtd) (set! lc4c18@&condition-rcd lc4c0f@lc4c07) (set! lc4ed0@lc4c18@&condition-rcd lc4c18@&condition-rcd) (set! lc4c64@lc4c5f (make-record-type-descriptor '&message lc4c0b@lc4c06 'lc4c62 '#f '#f '#((immutable message)))) (set! lc4ed1@lc4c64@lc4c5f lc4c64@lc4c5f) (set! lc4c66@lc4c61 '#f) (set! lc4ed2@lc4c66@lc4c61 lc4c66@lc4c61) (set! lc4c68@lc4c60 (make-record-constructor-descriptor lc4c64@lc4c5f lc4c0f@lc4c07 lc4c66@lc4c61)) (set! lc4ed3@lc4c68@lc4c60 lc4c68@lc4c60) (set! lc4c6b@p? (record-predicate lc4c64@lc4c5f)) (set! lc4ed4@lc4c6b@p? lc4c6b@p?) (set! lc4c6d@make-message-condition (record-constructor lc4c68@lc4c60)) (set! lc4ed5@lc4c6d@make-message-condition lc4c6d@make-message-condition) (set! lc4c6f@lc4c5e (record-accessor lc4c64@lc4c5f '0)) (set! lc4ed6@lc4c6f@lc4c5e lc4c6f@lc4c5e) (set! lc4c71@message-condition? (condition-predicate lc4c64@lc4c5f)) (set! lc4ed7@lc4c71@message-condition? lc4c71@message-condition?) (set! lc4c73@condition-message (condition-accessor lc4c64@lc4c5f lc4c6f@lc4c5e)) (set! lc4ed8@lc4c73@condition-message lc4c73@condition-message) (set! lc4c75@&message-rtd lc4c64@lc4c5f) (set! lc4ed9@lc4c75@&message-rtd lc4c75@&message-rtd) (set! lc4c77@&message-rcd lc4c68@lc4c60) (set! lc4eda@lc4c77@&message-rcd lc4c77@&message-rcd) (set! lc4c7d@lc4c78 (make-record-type-descriptor '&warning lc4c0b@lc4c06 'lc4c7b '#f '#f '#())) (set! lc4edb@lc4c7d@lc4c78 lc4c7d@lc4c78) (set! lc4c7f@lc4c7a '#f) (set! lc4edc@lc4c7f@lc4c7a lc4c7f@lc4c7a) (set! lc4c81@lc4c79 (make-record-constructor-descriptor lc4c7d@lc4c78 lc4c0f@lc4c07 lc4c7f@lc4c7a)) (set! lc4edd@lc4c81@lc4c79 lc4c81@lc4c79) (set! lc4c84@p? (record-predicate lc4c7d@lc4c78)) (set! lc4ede@lc4c84@p? lc4c84@p?) (set! lc4c86@make-warning (record-constructor lc4c81@lc4c79)) (set! lc4edf@lc4c86@make-warning lc4c86@make-warning) (set! lc4c88@warning? (condition-predicate lc4c7d@lc4c78)) (set! lc4ee0@lc4c88@warning? lc4c88@warning?) (set! lc4c8a@&warning-rtd lc4c7d@lc4c78) (set! lc4ee1@lc4c8a@&warning-rtd lc4c8a@&warning-rtd) (set! lc4c8c@&warning-rcd lc4c81@lc4c79) (set! lc4ee2@lc4c8c@&warning-rcd lc4c8c@&warning-rcd) (set! lc4c92@lc4c8d (make-record-type-descriptor '&serious lc4c0b@lc4c06 'lc4c90 '#f '#f '#())) (set! lc4ee3@lc4c92@lc4c8d lc4c92@lc4c8d) (set! lc4c94@lc4c8f '#f) (set! lc4ee4@lc4c94@lc4c8f lc4c94@lc4c8f) (set! lc4c96@lc4c8e (make-record-constructor-descriptor lc4c92@lc4c8d lc4c0f@lc4c07 lc4c94@lc4c8f)) (set! lc4ee5@lc4c96@lc4c8e lc4c96@lc4c8e) (set! lc4c99@p? (record-predicate lc4c92@lc4c8d)) (set! lc4ee6@lc4c99@p? lc4c99@p?) (set! lc4c9b@make-serious-condition (record-constructor lc4c96@lc4c8e)) (set! lc4ee7@lc4c9b@make-serious-condition lc4c9b@make-serious-condition) (set! lc4c9d@serious-condition? (condition-predicate lc4c92@lc4c8d)) (set! lc4ee8@lc4c9d@serious-condition? lc4c9d@serious-condition?) (set! lc4c9f@&serious-rtd lc4c92@lc4c8d) (set! lc4ee9@lc4c9f@&serious-rtd lc4c9f@&serious-rtd) (set! lc4ca1@&serious-rcd lc4c96@lc4c8e) (set! lc4eea@lc4ca1@&serious-rcd lc4ca1@&serious-rcd) (set! lc4ca7@lc4ca2 (make-record-type-descriptor '&error lc4c92@lc4c8d 'lc4ca5 '#f '#f '#())) (set! lc4eeb@lc4ca7@lc4ca2 lc4ca7@lc4ca2) (set! lc4ca9@lc4ca4 '#f) (set! lc4eec@lc4ca9@lc4ca4 lc4ca9@lc4ca4) (set! lc4cab@lc4ca3 (make-record-constructor-descriptor lc4ca7@lc4ca2 lc4c96@lc4c8e lc4ca9@lc4ca4)) (set! lc4eed@lc4cab@lc4ca3 lc4cab@lc4ca3) (set! lc4cae@p? (record-predicate lc4ca7@lc4ca2)) (set! lc4eee@lc4cae@p? lc4cae@p?) (set! lc4cb0@make-error (record-constructor lc4cab@lc4ca3)) (set! lc4eef@lc4cb0@make-error lc4cb0@make-error) (set! lc4cb2@error? (condition-predicate lc4ca7@lc4ca2)) (set! lc4ef0@lc4cb2@error? lc4cb2@error?) (set! lc4cb4@&error-rtd lc4ca7@lc4ca2) (set! lc4ef1@lc4cb4@&error-rtd lc4cb4@&error-rtd) (set! lc4cb6@&error-rcd lc4cab@lc4ca3) (set! lc4ef2@lc4cb6@&error-rcd lc4cb6@&error-rcd) (set! lc4cbc@lc4cb7 (make-record-type-descriptor '&violation lc4c92@lc4c8d 'lc4cba '#f '#f '#())) (set! lc4ef3@lc4cbc@lc4cb7 lc4cbc@lc4cb7) (set! lc4cbe@lc4cb9 '#f) (set! lc4ef4@lc4cbe@lc4cb9 lc4cbe@lc4cb9) (set! lc4cc0@lc4cb8 (make-record-constructor-descriptor lc4cbc@lc4cb7 lc4c96@lc4c8e lc4cbe@lc4cb9)) (set! lc4ef5@lc4cc0@lc4cb8 lc4cc0@lc4cb8) (set! lc4cc3@p? (record-predicate lc4cbc@lc4cb7)) (set! lc4ef6@lc4cc3@p? lc4cc3@p?) (set! lc4cc5@make-violation (record-constructor lc4cc0@lc4cb8)) (set! lc4ef7@lc4cc5@make-violation lc4cc5@make-violation) (set! lc4cc7@violation? (condition-predicate lc4cbc@lc4cb7)) (set! lc4ef8@lc4cc7@violation? lc4cc7@violation?) (set! lc4cc9@&violation-rtd lc4cbc@lc4cb7) (set! lc4ef9@lc4cc9@&violation-rtd lc4cc9@&violation-rtd) (set! lc4ccb@&violation-rcd lc4cc0@lc4cb8) (set! lc4efa@lc4ccb@&violation-rcd lc4ccb@&violation-rcd) (set! lc4cd1@lc4ccc (make-record-type-descriptor '&assertion lc4cbc@lc4cb7 'lc4ccf '#f '#f '#())) (set! lc4efb@lc4cd1@lc4ccc lc4cd1@lc4ccc) (set! lc4cd3@lc4cce '#f) (set! lc4efc@lc4cd3@lc4cce lc4cd3@lc4cce) (set! lc4cd5@lc4ccd (make-record-constructor-descriptor lc4cd1@lc4ccc lc4cc0@lc4cb8 lc4cd3@lc4cce)) (set! lc4efd@lc4cd5@lc4ccd lc4cd5@lc4ccd) (set! lc4cd8@p? (record-predicate lc4cd1@lc4ccc)) (set! lc4efe@lc4cd8@p? lc4cd8@p?) (set! lc4cda@make-assertion-violation (record-constructor lc4cd5@lc4ccd)) (set! lc4eff@lc4cda@make-assertion-violation lc4cda@make-assertion-violation) (set! lc4cdc@assertion-violation? (condition-predicate lc4cd1@lc4ccc)) (set! lc4f00@lc4cdc@assertion-violation? lc4cdc@assertion-violation?) (set! lc4cde@&assertion-rtd lc4cd1@lc4ccc) (set! lc4f01@lc4cde@&assertion-rtd lc4cde@&assertion-rtd) (set! lc4ce0@&assertion-rcd lc4cd5@lc4ccd) (set! lc4f02@lc4ce0@&assertion-rcd lc4ce0@&assertion-rcd) (set! lc4ce8@lc4ce3 (make-record-type-descriptor '&irritants lc4c0b@lc4c06 'lc4ce6 '#f '#f '#((immutable irritants)))) (set! lc4f03@lc4ce8@lc4ce3 lc4ce8@lc4ce3) (set! lc4cea@lc4ce5 '#f) (set! lc4f04@lc4cea@lc4ce5 lc4cea@lc4ce5) (set! lc4cec@lc4ce4 (make-record-constructor-descriptor lc4ce8@lc4ce3 lc4c0f@lc4c07 lc4cea@lc4ce5)) (set! lc4f05@lc4cec@lc4ce4 lc4cec@lc4ce4) (set! lc4cef@p? (record-predicate lc4ce8@lc4ce3)) (set! lc4f06@lc4cef@p? lc4cef@p?) (set! lc4cf1@make-irritants-condition (record-constructor lc4cec@lc4ce4)) (set! lc4f07@lc4cf1@make-irritants-condition lc4cf1@make-irritants-condition) (set! lc4cf3@lc4ce2 (record-accessor lc4ce8@lc4ce3 '0)) (set! lc4f08@lc4cf3@lc4ce2 lc4cf3@lc4ce2) (set! lc4cf5@irritants-condition? (condition-predicate lc4ce8@lc4ce3)) (set! lc4f09@lc4cf5@irritants-condition? lc4cf5@irritants-condition?) (set! lc4cf7@condition-irritants (condition-accessor lc4ce8@lc4ce3 lc4cf3@lc4ce2)) (set! lc4f0a@lc4cf7@condition-irritants lc4cf7@condition-irritants) (set! lc4cf9@&irritants-rtd lc4ce8@lc4ce3) (set! lc4f0b@lc4cf9@&irritants-rtd lc4cf9@&irritants-rtd) (set! lc4cfb@&irritants-rcd lc4cec@lc4ce4) (set! lc4f0c@lc4cfb@&irritants-rcd lc4cfb@&irritants-rcd) (set! lc4d03@lc4cfe (make-record-type-descriptor '&who lc4c0b@lc4c06 'lc4d01 '#f '#f '#((immutable who)))) (set! lc4f0d@lc4d03@lc4cfe lc4d03@lc4cfe) (set! lc4d05@lc4d00 '#f) (set! lc4f0e@lc4d05@lc4d00 lc4d05@lc4d00) (set! lc4d07@lc4cff (make-record-constructor-descriptor lc4d03@lc4cfe lc4c0f@lc4c07 lc4d05@lc4d00)) (set! lc4f0f@lc4d07@lc4cff lc4d07@lc4cff) (set! lc4d0a@p? (record-predicate lc4d03@lc4cfe)) (set! lc4f10@lc4d0a@p? lc4d0a@p?) (set! lc4d0c@make-who-condition (record-constructor lc4d07@lc4cff)) (set! lc4f11@lc4d0c@make-who-condition lc4d0c@make-who-condition) (set! lc4d0e@lc4cfd (record-accessor lc4d03@lc4cfe '0)) (set! lc4f12@lc4d0e@lc4cfd lc4d0e@lc4cfd) (set! lc4d10@who-condition? (condition-predicate lc4d03@lc4cfe)) (set! lc4f13@lc4d10@who-condition? lc4d10@who-condition?) (set! lc4d12@condition-who (condition-accessor lc4d03@lc4cfe lc4d0e@lc4cfd)) (set! lc4f14@lc4d12@condition-who lc4d12@condition-who) (set! lc4d14@&who-rtd lc4d03@lc4cfe) (set! lc4f15@lc4d14@&who-rtd lc4d14@&who-rtd) (set! lc4d16@&who-rcd lc4d07@lc4cff) (set! lc4f16@lc4d16@&who-rcd lc4d16@&who-rcd) (set! lc4d1c@lc4d17 (make-record-type-descriptor '&non-continuable lc4cbc@lc4cb7 'lc4d1a '#f '#f '#())) (set! lc4f17@lc4d1c@lc4d17 lc4d1c@lc4d17) (set! lc4d1e@lc4d19 '#f) (set! lc4f18@lc4d1e@lc4d19 lc4d1e@lc4d19) (set! lc4d20@lc4d18 (make-record-constructor-descriptor lc4d1c@lc4d17 lc4cc0@lc4cb8 lc4d1e@lc4d19)) (set! lc4f19@lc4d20@lc4d18 lc4d20@lc4d18) (set! lc4d23@p? (record-predicate lc4d1c@lc4d17)) (set! lc4f1a@lc4d23@p? lc4d23@p?) (set! lc4d25@make-non-continuable-violation (record-constructor lc4d20@lc4d18)) (set! lc4f1b@lc4d25@make-non-continuable-violation lc4d25@make-non-continuable-violation) (set! lc4d27@non-continuable-violation? (condition-predicate lc4d1c@lc4d17)) (set! lc4f1c@lc4d27@non-continuable-violation? lc4d27@non-continuable-violation?) (set! lc4d29@&non-continuable-rtd lc4d1c@lc4d17) (set! lc4f1d@lc4d29@&non-continuable-rtd lc4d29@&non-continuable-rtd) (set! lc4d2b@&non-continuable-rcd lc4d20@lc4d18) (set! lc4f1e@lc4d2b@&non-continuable-rcd lc4d2b@&non-continuable-rcd) (set! lc4d31@lc4d2c (make-record-type-descriptor '&implementation-restriction lc4cbc@lc4cb7 'lc4d2f '#f '#f '#())) (set! lc4f1f@lc4d31@lc4d2c lc4d31@lc4d2c) (set! lc4d33@lc4d2e '#f) (set! lc4f20@lc4d33@lc4d2e lc4d33@lc4d2e) (set! lc4d35@lc4d2d (make-record-constructor-descriptor lc4d31@lc4d2c lc4cc0@lc4cb8 lc4d33@lc4d2e)) (set! lc4f21@lc4d35@lc4d2d lc4d35@lc4d2d) (set! lc4d38@p? (record-predicate lc4d31@lc4d2c)) (set! lc4f22@lc4d38@p? lc4d38@p?) (set! lc4d3a@make-implementation-restriction-violation (record-constructor lc4d35@lc4d2d)) (set! lc4f23@lc4d3a@make-implementation-restriction-violation lc4d3a@make-implementation-restriction-violation) (set! lc4d3c@implementation-restriction-violation? (condition-predicate lc4d31@lc4d2c)) (set! lc4f24@lc4d3c@implementation-restriction-violation? lc4d3c@implementation-restriction-violation?) (set! lc4d3e@&implementation-restriction-rtd lc4d31@lc4d2c) (set! lc4f25@lc4d3e@&implementation-restriction-rtd lc4d3e@&implementation-restriction-rtd) (set! lc4d40@&implementation-restriction-rcd lc4d35@lc4d2d) (set! lc4f26@lc4d40@&implementation-restriction-rcd lc4d40@&implementation-restriction-rcd) (set! lc4d46@lc4d41 (make-record-type-descriptor '&lexical lc4cbc@lc4cb7 'lc4d44 '#f '#f '#())) (set! lc4f27@lc4d46@lc4d41 lc4d46@lc4d41) (set! lc4d48@lc4d43 '#f) (set! lc4f28@lc4d48@lc4d43 lc4d48@lc4d43) (set! lc4d4a@lc4d42 (make-record-constructor-descriptor lc4d46@lc4d41 lc4cc0@lc4cb8 lc4d48@lc4d43)) (set! lc4f29@lc4d4a@lc4d42 lc4d4a@lc4d42) (set! lc4d4d@p? (record-predicate lc4d46@lc4d41)) (set! lc4f2a@lc4d4d@p? lc4d4d@p?) (set! lc4d4f@make-lexical-violation (record-constructor lc4d4a@lc4d42)) (set! lc4f2b@lc4d4f@make-lexical-violation lc4d4f@make-lexical-violation) (set! lc4d51@lexical-violation? (condition-predicate lc4d46@lc4d41)) (set! lc4f2c@lc4d51@lexical-violation? lc4d51@lexical-violation?) (set! lc4d53@&lexical-rtd lc4d46@lc4d41) (set! lc4f2d@lc4d53@&lexical-rtd lc4d53@&lexical-rtd) (set! lc4d55@&lexical-rcd lc4d4a@lc4d42) (set! lc4f2e@lc4d55@&lexical-rcd lc4d55@&lexical-rcd) (set! lc4d5f@lc4d5a (make-record-type-descriptor '&syntax lc4cbc@lc4cb7 'lc4d5d '#f '#f '#((immutable form) (immutable subform)))) (set! lc4f2f@lc4d5f@lc4d5a lc4d5f@lc4d5a) (set! lc4d61@lc4d5c '#f) (set! lc4f30@lc4d61@lc4d5c lc4d61@lc4d5c) (set! lc4d63@lc4d5b (make-record-constructor-descriptor lc4d5f@lc4d5a lc4cc0@lc4cb8 lc4d61@lc4d5c)) (set! lc4f31@lc4d63@lc4d5b lc4d63@lc4d5b) (set! lc4d66@p? (record-predicate lc4d5f@lc4d5a)) (set! lc4f32@lc4d66@p? lc4d66@p?) (set! lc4d68@make-syntax-violation (record-constructor lc4d63@lc4d5b)) (set! lc4f33@lc4d68@make-syntax-violation lc4d68@make-syntax-violation) (set! lc4d6a@lc4d57 (record-accessor lc4d5f@lc4d5a '0)) (set! lc4f34@lc4d6a@lc4d57 lc4d6a@lc4d57) (set! lc4d6c@lc4d59 (record-accessor lc4d5f@lc4d5a '1)) (set! lc4f35@lc4d6c@lc4d59 lc4d6c@lc4d59) (set! lc4d6e@syntax-violation? (condition-predicate lc4d5f@lc4d5a)) (set! lc4f36@lc4d6e@syntax-violation? lc4d6e@syntax-violation?) (set! lc4d70@syntax-violation-form (condition-accessor lc4d5f@lc4d5a lc4d6a@lc4d57)) (set! lc4f37@lc4d70@syntax-violation-form lc4d70@syntax-violation-form) (set! lc4d72@syntax-violation-subform (condition-accessor lc4d5f@lc4d5a lc4d6c@lc4d59)) (set! lc4f38@lc4d72@syntax-violation-subform lc4d72@syntax-violation-subform) (set! lc4d74@&syntax-rtd lc4d5f@lc4d5a) (set! lc4f39@lc4d74@&syntax-rtd lc4d74@&syntax-rtd) (set! lc4d76@&syntax-rcd lc4d63@lc4d5b) (set! lc4f3a@lc4d76@&syntax-rcd lc4d76@&syntax-rcd) (set! lc4d7c@lc4d77 (make-record-type-descriptor '&undefined lc4cbc@lc4cb7 'lc4d7a '#f '#f '#())) (set! lc4f3b@lc4d7c@lc4d77 lc4d7c@lc4d77) (set! lc4d7e@lc4d79 '#f) (set! lc4f3c@lc4d7e@lc4d79 lc4d7e@lc4d79) (set! lc4d80@lc4d78 (make-record-constructor-descriptor lc4d7c@lc4d77 lc4cc0@lc4cb8 lc4d7e@lc4d79)) (set! lc4f3d@lc4d80@lc4d78 lc4d80@lc4d78) (set! lc4d83@p? (record-predicate lc4d7c@lc4d77)) (set! lc4f3e@lc4d83@p? lc4d83@p?) (set! lc4d85@make-undefined-violation (record-constructor lc4d80@lc4d78)) (set! lc4f3f@lc4d85@make-undefined-violation lc4d85@make-undefined-violation) (set! lc4d87@undefined-violation? (condition-predicate lc4d7c@lc4d77)) (set! lc4f40@lc4d87@undefined-violation? lc4d87@undefined-violation?) (set! lc4d89@&undefined-rtd lc4d7c@lc4d77) (set! lc4f41@lc4d89@&undefined-rtd lc4d89@&undefined-rtd) (set! lc4d8b@&undefined-rcd lc4d80@lc4d78) (set! lc4f42@lc4d8b@&undefined-rcd lc4d8b@&undefined-rcd) (set! lc4d91@lc4d8c (make-record-type-descriptor '&i/o lc4ca7@lc4ca2 'lc4d8f '#f '#f '#())) (set! lc4f43@lc4d91@lc4d8c lc4d91@lc4d8c) (set! lc4d93@lc4d8e '#f) (set! lc4f44@lc4d93@lc4d8e lc4d93@lc4d8e) (set! lc4d95@lc4d8d (make-record-constructor-descriptor lc4d91@lc4d8c lc4cab@lc4ca3 lc4d93@lc4d8e)) (set! lc4f45@lc4d95@lc4d8d lc4d95@lc4d8d) (set! lc4d98@p? (record-predicate lc4d91@lc4d8c)) (set! lc4f46@lc4d98@p? lc4d98@p?) (set! lc4d9a@make-i/o-error (record-constructor lc4d95@lc4d8d)) (set! lc4f47@lc4d9a@make-i/o-error lc4d9a@make-i/o-error) (set! lc4d9c@i/o-error? (condition-predicate lc4d91@lc4d8c)) (set! lc4f48@lc4d9c@i/o-error? lc4d9c@i/o-error?) (set! lc4d9e@&i/o-rtd lc4d91@lc4d8c) (set! lc4f49@lc4d9e@&i/o-rtd lc4d9e@&i/o-rtd) (set! lc4da0@&i/o-rcd lc4d95@lc4d8d) (set! lc4f4a@lc4da0@&i/o-rcd lc4da0@&i/o-rcd) (set! lc4da6@lc4da1 (make-record-type-descriptor '&i/o-read lc4d91@lc4d8c 'lc4da4 '#f '#f '#())) (set! lc4f4b@lc4da6@lc4da1 lc4da6@lc4da1) (set! lc4da8@lc4da3 '#f) (set! lc4f4c@lc4da8@lc4da3 lc4da8@lc4da3) (set! lc4daa@lc4da2 (make-record-constructor-descriptor lc4da6@lc4da1 lc4d95@lc4d8d lc4da8@lc4da3)) (set! lc4f4d@lc4daa@lc4da2 lc4daa@lc4da2) (set! lc4dad@p? (record-predicate lc4da6@lc4da1)) (set! lc4f4e@lc4dad@p? lc4dad@p?) (set! lc4daf@make-i/o-read-error (record-constructor lc4daa@lc4da2)) (set! lc4f4f@lc4daf@make-i/o-read-error lc4daf@make-i/o-read-error) (set! lc4db1@i/o-read-error? (condition-predicate lc4da6@lc4da1)) (set! lc4f50@lc4db1@i/o-read-error? lc4db1@i/o-read-error?) (set! lc4db3@&i/o-read-rtd lc4da6@lc4da1) (set! lc4f51@lc4db3@&i/o-read-rtd lc4db3@&i/o-read-rtd) (set! lc4db5@&i/o-read-rcd lc4daa@lc4da2) (set! lc4f52@lc4db5@&i/o-read-rcd lc4db5@&i/o-read-rcd) (set! lc4dbb@lc4db6 (make-record-type-descriptor '&i/o-write lc4d91@lc4d8c 'lc4db9 '#f '#f '#())) (set! lc4f53@lc4dbb@lc4db6 lc4dbb@lc4db6) (set! lc4dbd@lc4db8 '#f) (set! lc4f54@lc4dbd@lc4db8 lc4dbd@lc4db8) (set! lc4dbf@lc4db7 (make-record-constructor-descriptor lc4dbb@lc4db6 lc4d95@lc4d8d lc4dbd@lc4db8)) (set! lc4f55@lc4dbf@lc4db7 lc4dbf@lc4db7) (set! lc4dc2@p? (record-predicate lc4dbb@lc4db6)) (set! lc4f56@lc4dc2@p? lc4dc2@p?) (set! lc4dc4@make-i/o-write-error (record-constructor lc4dbf@lc4db7)) (set! lc4f57@lc4dc4@make-i/o-write-error lc4dc4@make-i/o-write-error) (set! lc4dc6@i/o-write-error? (condition-predicate lc4dbb@lc4db6)) (set! lc4f58@lc4dc6@i/o-write-error? lc4dc6@i/o-write-error?) (set! lc4dc8@&i/o-write-rtd lc4dbb@lc4db6) (set! lc4f59@lc4dc8@&i/o-write-rtd lc4dc8@&i/o-write-rtd) (set! lc4dca@&i/o-write-rcd lc4dbf@lc4db7) (set! lc4f5a@lc4dca@&i/o-write-rcd lc4dca@&i/o-write-rcd) (set! lc4dd2@lc4dcd (make-record-type-descriptor '&i/o-invalid-position lc4d91@lc4d8c 'lc4dd0 '#f '#f '#((immutable position)))) (set! lc4f5b@lc4dd2@lc4dcd lc4dd2@lc4dcd) (set! lc4dd4@lc4dcf '#f) (set! lc4f5c@lc4dd4@lc4dcf lc4dd4@lc4dcf) (set! lc4dd6@lc4dce (make-record-constructor-descriptor lc4dd2@lc4dcd lc4d95@lc4d8d lc4dd4@lc4dcf)) (set! lc4f5d@lc4dd6@lc4dce lc4dd6@lc4dce) (set! lc4dd9@p? (record-predicate lc4dd2@lc4dcd)) (set! lc4f5e@lc4dd9@p? lc4dd9@p?) (set! lc4ddb@make-i/o-invalid-position-error (record-constructor lc4dd6@lc4dce)) (set! lc4f5f@lc4ddb@make-i/o-invalid-position-error lc4ddb@make-i/o-invalid-position-error) (set! lc4ddd@lc4dcc (record-accessor lc4dd2@lc4dcd '0)) (set! lc4f60@lc4ddd@lc4dcc lc4ddd@lc4dcc) (set! lc4ddf@i/o-invalid-position-error? (condition-predicate lc4dd2@lc4dcd)) (set! lc4f61@lc4ddf@i/o-invalid-position-error? lc4ddf@i/o-invalid-position-error?) (set! lc4de1@i/o-error-position (condition-accessor lc4dd2@lc4dcd lc4ddd@lc4dcc)) (set! lc4f62@lc4de1@i/o-error-position lc4de1@i/o-error-position) (set! lc4de3@&i/o-invalid-position-rtd lc4dd2@lc4dcd) (set! lc4f63@lc4de3@&i/o-invalid-position-rtd lc4de3@&i/o-invalid-position-rtd) (set! lc4de5@&i/o-invalid-position-rcd lc4dd6@lc4dce) (set! lc4f64@lc4de5@&i/o-invalid-position-rcd lc4de5@&i/o-invalid-position-rcd) (set! lc4ded@lc4de8 (make-record-type-descriptor '&i/o-filename lc4d91@lc4d8c 'lc4deb '#f '#f '#((immutable filename)))) (set! lc4f65@lc4ded@lc4de8 lc4ded@lc4de8) (set! lc4def@lc4dea '#f) (set! lc4f66@lc4def@lc4dea lc4def@lc4dea) (set! lc4df1@lc4de9 (make-record-constructor-descriptor lc4ded@lc4de8 lc4d95@lc4d8d lc4def@lc4dea)) (set! lc4f67@lc4df1@lc4de9 lc4df1@lc4de9) (set! lc4df4@p? (record-predicate lc4ded@lc4de8)) (set! lc4f68@lc4df4@p? lc4df4@p?) (set! lc4df6@make-i/o-filename-error (record-constructor lc4df1@lc4de9)) (set! lc4f69@lc4df6@make-i/o-filename-error lc4df6@make-i/o-filename-error) (set! lc4df8@lc4de7 (record-accessor lc4ded@lc4de8 '0)) (set! lc4f6a@lc4df8@lc4de7 lc4df8@lc4de7) (set! lc4dfa@i/o-filename-error? (condition-predicate lc4ded@lc4de8)) (set! lc4f6b@lc4dfa@i/o-filename-error? lc4dfa@i/o-filename-error?) (set! lc4dfc@i/o-error-filename (condition-accessor lc4ded@lc4de8 lc4df8@lc4de7)) (set! lc4f6c@lc4dfc@i/o-error-filename lc4dfc@i/o-error-filename) (set! lc4dfe@&i/o-filename-rtd lc4ded@lc4de8) (set! lc4f6d@lc4dfe@&i/o-filename-rtd lc4dfe@&i/o-filename-rtd) (set! lc4e00@&i/o-filename-rcd lc4df1@lc4de9) (set! lc4f6e@lc4e00@&i/o-filename-rcd lc4e00@&i/o-filename-rcd) (set! lc4e06@lc4e01 (make-record-type-descriptor '&i/o-file-protection lc4ded@lc4de8 'lc4e04 '#f '#f '#())) (set! lc4f6f@lc4e06@lc4e01 lc4e06@lc4e01) (set! lc4e08@lc4e03 '#f) (set! lc4f70@lc4e08@lc4e03 lc4e08@lc4e03) (set! lc4e0a@lc4e02 (make-record-constructor-descriptor lc4e06@lc4e01 lc4df1@lc4de9 lc4e08@lc4e03)) (set! lc4f71@lc4e0a@lc4e02 lc4e0a@lc4e02) (set! lc4e0d@p? (record-predicate lc4e06@lc4e01)) (set! lc4f72@lc4e0d@p? lc4e0d@p?) (set! lc4e0f@make-i/o-file-protection-error (record-constructor lc4e0a@lc4e02)) (set! lc4f73@lc4e0f@make-i/o-file-protection-error lc4e0f@make-i/o-file-protection-error) (set! lc4e11@i/o-file-protection-error? (condition-predicate lc4e06@lc4e01)) (set! lc4f74@lc4e11@i/o-file-protection-error? lc4e11@i/o-file-protection-error?) (set! lc4e13@&i/o-file-protection-rtd lc4e06@lc4e01) (set! lc4f75@lc4e13@&i/o-file-protection-rtd lc4e13@&i/o-file-protection-rtd) (set! lc4e15@&i/o-file-protection-rcd lc4e0a@lc4e02) (set! lc4f76@lc4e15@&i/o-file-protection-rcd lc4e15@&i/o-file-protection-rcd) (set! lc4e1b@lc4e16 (make-record-type-descriptor '&i/o-file-is-read-only lc4e06@lc4e01 'lc4e19 '#f '#f '#())) (set! lc4f77@lc4e1b@lc4e16 lc4e1b@lc4e16) (set! lc4e1d@lc4e18 '#f) (set! lc4f78@lc4e1d@lc4e18 lc4e1d@lc4e18) (set! lc4e1f@lc4e17 (make-record-constructor-descriptor lc4e1b@lc4e16 lc4e0a@lc4e02 lc4e1d@lc4e18)) (set! lc4f79@lc4e1f@lc4e17 lc4e1f@lc4e17) (set! lc4e22@p? (record-predicate lc4e1b@lc4e16)) (set! lc4f7a@lc4e22@p? lc4e22@p?) (set! lc4e24@make-i/o-file-is-read-only-error (record-constructor lc4e1f@lc4e17)) (set! lc4f7b@lc4e24@make-i/o-file-is-read-only-error lc4e24@make-i/o-file-is-read-only-error) (set! lc4e26@i/o-file-is-read-only-error? (condition-predicate lc4e1b@lc4e16)) (set! lc4f7c@lc4e26@i/o-file-is-read-only-error? lc4e26@i/o-file-is-read-only-error?) (set! lc4e28@&i/o-file-is-read-only-rtd lc4e1b@lc4e16) (set! lc4f7d@lc4e28@&i/o-file-is-read-only-rtd lc4e28@&i/o-file-is-read-only-rtd) (set! lc4e2a@&i/o-file-is-read-only-rcd lc4e1f@lc4e17) (set! lc4f7e@lc4e2a@&i/o-file-is-read-only-rcd lc4e2a@&i/o-file-is-read-only-rcd) (set! lc4e30@lc4e2b (make-record-type-descriptor '&i/o-file-already-exists lc4ded@lc4de8 'lc4e2e '#f '#f '#())) (set! lc4f7f@lc4e30@lc4e2b lc4e30@lc4e2b) (set! lc4e32@lc4e2d '#f) (set! lc4f80@lc4e32@lc4e2d lc4e32@lc4e2d) (set! lc4e34@lc4e2c (make-record-constructor-descriptor lc4e30@lc4e2b lc4df1@lc4de9 lc4e32@lc4e2d)) (set! lc4f81@lc4e34@lc4e2c lc4e34@lc4e2c) (set! lc4e37@p? (record-predicate lc4e30@lc4e2b)) (set! lc4f82@lc4e37@p? lc4e37@p?) (set! lc4e39@make-i/o-file-already-exists-error (record-constructor lc4e34@lc4e2c)) (set! lc4f83@lc4e39@make-i/o-file-already-exists-error lc4e39@make-i/o-file-already-exists-error) (set! lc4e3b@i/o-file-already-exists-error? (condition-predicate lc4e30@lc4e2b)) (set! lc4f84@lc4e3b@i/o-file-already-exists-error? lc4e3b@i/o-file-already-exists-error?) (set! lc4e3d@&i/o-file-already-exists-rtd lc4e30@lc4e2b) (set! lc4f85@lc4e3d@&i/o-file-already-exists-rtd lc4e3d@&i/o-file-already-exists-rtd) (set! lc4e3f@&i/o-file-already-exists-rcd lc4e34@lc4e2c) (set! lc4f86@lc4e3f@&i/o-file-already-exists-rcd lc4e3f@&i/o-file-already-exists-rcd) (set! lc4e45@lc4e40 (make-record-type-descriptor '&i/o-file-does-not-exist lc4ded@lc4de8 'lc4e43 '#f '#f '#())) (set! lc4f87@lc4e45@lc4e40 lc4e45@lc4e40) (set! lc4e47@lc4e42 '#f) (set! lc4f88@lc4e47@lc4e42 lc4e47@lc4e42) (set! lc4e49@lc4e41 (make-record-constructor-descriptor lc4e45@lc4e40 lc4df1@lc4de9 lc4e47@lc4e42)) (set! lc4f89@lc4e49@lc4e41 lc4e49@lc4e41) (set! lc4e4c@p? (record-predicate lc4e45@lc4e40)) (set! lc4f8a@lc4e4c@p? lc4e4c@p?) (set! lc4e4e@make-i/o-file-does-not-exist-error (record-constructor lc4e49@lc4e41)) (set! lc4f8b@lc4e4e@make-i/o-file-does-not-exist-error lc4e4e@make-i/o-file-does-not-exist-error) (set! lc4e50@i/o-file-does-not-exist-error? (condition-predicate lc4e45@lc4e40)) (set! lc4f8c@lc4e50@i/o-file-does-not-exist-error? lc4e50@i/o-file-does-not-exist-error?) (set! lc4e52@&i/o-file-does-not-exist-rtd lc4e45@lc4e40) (set! lc4f8d@lc4e52@&i/o-file-does-not-exist-rtd lc4e52@&i/o-file-does-not-exist-rtd) (set! lc4e54@&i/o-file-does-not-exist-rcd lc4e49@lc4e41) (set! lc4f8e@lc4e54@&i/o-file-does-not-exist-rcd lc4e54@&i/o-file-does-not-exist-rcd) (set! lc4e5c@lc4e57 (make-record-type-descriptor '&i/o-port lc4d91@lc4d8c 'lc4e5a '#f '#f '#((immutable port)))) (set! lc4f8f@lc4e5c@lc4e57 lc4e5c@lc4e57) (set! lc4e5e@lc4e59 '#f) (set! lc4f90@lc4e5e@lc4e59 lc4e5e@lc4e59) (set! lc4e60@lc4e58 (make-record-constructor-descriptor lc4e5c@lc4e57 lc4d95@lc4d8d lc4e5e@lc4e59)) (set! lc4f91@lc4e60@lc4e58 lc4e60@lc4e58) (set! lc4e63@p? (record-predicate lc4e5c@lc4e57)) (set! lc4f92@lc4e63@p? lc4e63@p?) (set! lc4e65@make-i/o-port-error (record-constructor lc4e60@lc4e58)) (set! lc4f93@lc4e65@make-i/o-port-error lc4e65@make-i/o-port-error) (set! lc4e67@lc4e56 (record-accessor lc4e5c@lc4e57 '0)) (set! lc4f94@lc4e67@lc4e56 lc4e67@lc4e56) (set! lc4e69@i/o-port-error? (condition-predicate lc4e5c@lc4e57)) (set! lc4f95@lc4e69@i/o-port-error? lc4e69@i/o-port-error?) (set! lc4e6b@i/o-error-port (condition-accessor lc4e5c@lc4e57 lc4e67@lc4e56)) (set! lc4f96@lc4e6b@i/o-error-port lc4e6b@i/o-error-port) (set! lc4e6d@&i/o-port-rtd lc4e5c@lc4e57) (set! lc4f97@lc4e6d@&i/o-port-rtd lc4e6d@&i/o-port-rtd) (set! lc4e6f@&i/o-port-rcd lc4e60@lc4e58) (set! lc4f98@lc4e6f@&i/o-port-rcd lc4e6f@&i/o-port-rcd) (set! lc4e75@lc4e70 (make-record-type-descriptor '&i/o-decoding lc4e5c@lc4e57 'lc4e73 '#f '#f '#())) (set! lc4f99@lc4e75@lc4e70 lc4e75@lc4e70) (set! lc4e77@lc4e72 '#f) (set! lc4f9a@lc4e77@lc4e72 lc4e77@lc4e72) (set! lc4e79@lc4e71 (make-record-constructor-descriptor lc4e75@lc4e70 lc4e60@lc4e58 lc4e77@lc4e72)) (set! lc4f9b@lc4e79@lc4e71 lc4e79@lc4e71) (set! lc4e7c@p? (record-predicate lc4e75@lc4e70)) (set! lc4f9c@lc4e7c@p? lc4e7c@p?) (set! lc4e7e@make-i/o-decoding-error (record-constructor lc4e79@lc4e71)) (set! lc4f9d@lc4e7e@make-i/o-decoding-error lc4e7e@make-i/o-decoding-error) (set! lc4e80@i/o-decoding-error? (condition-predicate lc4e75@lc4e70)) (set! lc4f9e@lc4e80@i/o-decoding-error? lc4e80@i/o-decoding-error?) (set! lc4e82@&i/o-decoding-rtd lc4e75@lc4e70) (set! lc4f9f@lc4e82@&i/o-decoding-rtd lc4e82@&i/o-decoding-rtd) (set! lc4e84@&i/o-decoding-rcd lc4e79@lc4e71) (set! lc4fa0@lc4e84@&i/o-decoding-rcd lc4e84@&i/o-decoding-rcd) (set! lc4e8c@lc4e87 (make-record-type-descriptor '&i/o-encoding lc4e5c@lc4e57 'lc4e8a '#f '#f '#((immutable char)))) (set! lc4fa1@lc4e8c@lc4e87 lc4e8c@lc4e87) (set! lc4e8e@lc4e89 '#f) (set! lc4fa2@lc4e8e@lc4e89 lc4e8e@lc4e89) (set! lc4e90@lc4e88 (make-record-constructor-descriptor lc4e8c@lc4e87 lc4e60@lc4e58 lc4e8e@lc4e89)) (set! lc4fa3@lc4e90@lc4e88 lc4e90@lc4e88) (set! lc4e93@p? (record-predicate lc4e8c@lc4e87)) (set! lc4fa4@lc4e93@p? lc4e93@p?) (set! lc4e95@make-i/o-encoding-error (record-constructor lc4e90@lc4e88)) (set! lc4fa5@lc4e95@make-i/o-encoding-error lc4e95@make-i/o-encoding-error) (set! lc4e97@lc4e86 (record-accessor lc4e8c@lc4e87 '0)) (set! lc4fa6@lc4e97@lc4e86 lc4e97@lc4e86) (set! lc4e99@i/o-encoding-error? (condition-predicate lc4e8c@lc4e87)) (set! lc4fa7@lc4e99@i/o-encoding-error? lc4e99@i/o-encoding-error?) (set! lc4e9b@i/o-encoding-error-char (condition-accessor lc4e8c@lc4e87 lc4e97@lc4e86)) (set! lc4fa8@lc4e9b@i/o-encoding-error-char lc4e9b@i/o-encoding-error-char) (set! lc4e9d@&i/o-encoding-rtd lc4e8c@lc4e87) (set! lc4fa9@lc4e9d@&i/o-encoding-rtd lc4e9d@&i/o-encoding-rtd) (set! lc4e9f@&i/o-encoding-rcd lc4e90@lc4e88) (set! lc4faa@lc4e9f@&i/o-encoding-rcd lc4e9f@&i/o-encoding-rcd) (set! lc4ea5@lc4ea0 (make-record-type-descriptor '&no-infinities lc4d31@lc4d2c 'lc4ea3 '#f '#f '#())) (set! lc4fab@lc4ea5@lc4ea0 lc4ea5@lc4ea0) (set! lc4ea7@lc4ea2 '#f) (set! lc4fac@lc4ea7@lc4ea2 lc4ea7@lc4ea2) (set! lc4ea9@lc4ea1 (make-record-constructor-descriptor lc4ea5@lc4ea0 lc4d35@lc4d2d lc4ea7@lc4ea2)) (set! lc4fad@lc4ea9@lc4ea1 lc4ea9@lc4ea1) (set! lc4eac@p? (record-predicate lc4ea5@lc4ea0)) (set! lc4fae@lc4eac@p? lc4eac@p?) (set! lc4eae@make-no-infinities-violation (record-constructor lc4ea9@lc4ea1)) (set! lc4faf@lc4eae@make-no-infinities-violation lc4eae@make-no-infinities-violation) (set! lc4eb0@no-infinities-violation? (condition-predicate lc4ea5@lc4ea0)) (set! lc4fb0@lc4eb0@no-infinities-violation? lc4eb0@no-infinities-violation?) (set! lc4eb2@&no-infinities-rtd lc4ea5@lc4ea0) (set! lc4fb1@lc4eb2@&no-infinities-rtd lc4eb2@&no-infinities-rtd) (set! lc4eb4@&no-infinities-rcd lc4ea9@lc4ea1) (set! lc4fb2@lc4eb4@&no-infinities-rcd lc4eb4@&no-infinities-rcd) (set! lc4eba@lc4eb5 (make-record-type-descriptor '&no-nans lc4d31@lc4d2c 'lc4eb8 '#f '#f '#())) (set! lc4fb3@lc4eba@lc4eb5 lc4eba@lc4eb5) (set! lc4ebc@lc4eb7 '#f) (set! lc4fb4@lc4ebc@lc4eb7 lc4ebc@lc4eb7) (set! lc4ebe@lc4eb6 (make-record-constructor-descriptor lc4eba@lc4eb5 lc4d35@lc4d2d lc4ebc@lc4eb7)) (set! lc4fb5@lc4ebe@lc4eb6 lc4ebe@lc4eb6) (set! lc4ec1@p? (record-predicate lc4eba@lc4eb5)) (set! lc4fb6@lc4ec1@p? lc4ec1@p?) (set! lc4ec3@make-no-nans-violation (record-constructor lc4ebe@lc4eb6)) (set! lc4fb7@lc4ec3@make-no-nans-violation lc4ec3@make-no-nans-violation) (set! lc4ec5@no-nans-violation? (condition-predicate lc4eba@lc4eb5)) (set! lc4fb8@lc4ec5@no-nans-violation? lc4ec5@no-nans-violation?) (set! lc4ec7@&no-nans-rtd lc4eba@lc4eb5) (set! lc4fb9@lc4ec7@&no-nans-rtd lc4ec7@&no-nans-rtd) (set! lc4ec9@&no-nans-rcd lc4ebe@lc4eb6) (set! lc4fba@lc4ec9@&no-nans-rcd lc4ec9@&no-nans-rcd) (void))
(begin (begin (lc2a56@lc2a0b@current-primitive-locations (lambda (lc5485@x) (let ((lc5487@t (assq lc5485@x '((&no-nans-rcd . lc4fba@lc4ec9@&no-nans-rcd) (&no-nans-rtd . lc4fb9@lc4ec7@&no-nans-rtd) (&no-infinities-rcd . lc4fb2@lc4eb4@&no-infinities-rcd) (&no-infinities-rtd . lc4fb1@lc4eb2@&no-infinities-rtd) (&i/o-encoding-rcd . lc4faa@lc4e9f@&i/o-encoding-rcd) (&i/o-encoding-rtd . lc4fa9@lc4e9d@&i/o-encoding-rtd) (&i/o-decoding-rcd . lc4fa0@lc4e84@&i/o-decoding-rcd) (&i/o-decoding-rtd . lc4f9f@lc4e82@&i/o-decoding-rtd) (&i/o-port-rcd . lc4f98@lc4e6f@&i/o-port-rcd) (&i/o-port-rtd . lc4f97@lc4e6d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . lc4f8e@lc4e54@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . lc4f8d@lc4e52@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . lc4f86@lc4e3f@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . lc4f85@lc4e3d@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . lc4f7e@lc4e2a@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . lc4f7d@lc4e28@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . lc4f76@lc4e15@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . lc4f75@lc4e13@&i/o-file-protection-rtd) (&i/o-filename-rcd . lc4f6e@lc4e00@&i/o-filename-rcd) (&i/o-filename-rtd . lc4f6d@lc4dfe@&i/o-filename-rtd) (&i/o-invalid-position-rcd . lc4f64@lc4de5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . lc4f63@lc4de3@&i/o-invalid-position-rtd) (&i/o-write-rcd . lc4f5a@lc4dca@&i/o-write-rcd) (&i/o-write-rtd . lc4f59@lc4dc8@&i/o-write-rtd) (&i/o-read-rcd . lc4f52@lc4db5@&i/o-read-rcd) (&i/o-read-rtd . lc4f51@lc4db3@&i/o-read-rtd) (&i/o-rcd . lc4f4a@lc4da0@&i/o-rcd) (&i/o-rtd . lc4f49@lc4d9e@&i/o-rtd) (&undefined-rcd . lc4f42@lc4d8b@&undefined-rcd) (&undefined-rtd . lc4f41@lc4d89@&undefined-rtd) (&syntax-rcd . lc4f3a@lc4d76@&syntax-rcd) (&syntax-rtd . lc4f39@lc4d74@&syntax-rtd) (&lexical-rcd . lc4f2e@lc4d55@&lexical-rcd) (&lexical-rtd . lc4f2d@lc4d53@&lexical-rtd) (&implementation-restriction-rcd . lc4f26@lc4d40@&implementation-restriction-rcd) (&implementation-restriction-rtd . lc4f25@lc4d3e@&implementation-restriction-rtd) (&non-continuable-rcd . lc4f1e@lc4d2b@&non-continuable-rcd) (&non-continuable-rtd . lc4f1d@lc4d29@&non-continuable-rtd) (&who-rcd . lc4f16@lc4d16@&who-rcd) (&who-rtd . lc4f15@lc4d14@&who-rtd) (&irritants-rcd . lc4f0c@lc4cfb@&irritants-rcd) (&irritants-rtd . lc4f0b@lc4cf9@&irritants-rtd) (&assertion-rcd . lc4f02@lc4ce0@&assertion-rcd) (&assertion-rtd . lc4f01@lc4cde@&assertion-rtd) (&violation-rcd . lc4efa@lc4ccb@&violation-rcd) (&violation-rtd . lc4ef9@lc4cc9@&violation-rtd) (&error-rcd . lc4ef2@lc4cb6@&error-rcd) (&error-rtd . lc4ef1@lc4cb4@&error-rtd) (&serious-rcd . lc4eea@lc4ca1@&serious-rcd) (&serious-rtd . lc4ee9@lc4c9f@&serious-rtd) (&warning-rcd . lc4ee2@lc4c8c@&warning-rcd) (&warning-rtd . lc4ee1@lc4c8a@&warning-rtd) (&message-rcd . lc4eda@lc4c77@&message-rcd) (&message-rtd . lc4ed9@lc4c75@&message-rtd) (&condition-rcd . lc4ed0@lc4c18@&condition-rcd) (&condition-rtd . lc4ecf@lc4c16@&condition-rtd) (syntax-error . lc4bf2@lc3196@syntax-error) (syntax-dispatch . lc4b90@lc30ba@syntax-dispatch) (load . lc512f@lc4fda@load) (interaction-environment . lc4bfb@lc31a8@interaction-environment) (library-path . lc2cbd@lc2af9@library-path) (mosh-cache-dir . lc2a04@lc28e3@mosh-cache-dir) (make-parameter . lc2a03@lc28e1@make-parameter) (make-variable-transformer . lc4b4d@lc2ee5@make-variable-transformer) (identifier? . lc4bf5@lc319c@identifier?) (generate-temporaries . lc4beb@lc3188@generate-temporaries) (free-identifier=? . lc4bec@lc318a@free-identifier=?) (syntax->datum . lc4bf7@lc31a0@syntax->datum) (datum->syntax . lc4bf6@lc319e@datum->syntax) (bound-identifier=? . lc4bed@lc318c@bound-identifier=?) (make-i/o-write-error . lc4f57@lc4dc4@make-i/o-write-error) (make-i/o-read-error . lc4f4f@lc4daf@make-i/o-read-error) (make-i/o-port-error . lc4f93@lc4e65@make-i/o-port-error) (make-i/o-invalid-position-error . lc4f5f@lc4ddb@make-i/o-invalid-position-error) (make-i/o-filename-error . lc4f69@lc4df6@make-i/o-filename-error) (make-i/o-file-protection-error . lc4f73@lc4e0f@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . lc4f7b@lc4e24@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . lc4f8b@lc4e4e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . lc4f83@lc4e39@make-i/o-file-already-exists-error) (make-i/o-error . lc4f47@lc4d9a@make-i/o-error) (make-i/o-encoding-error . lc4fa5@lc4e95@make-i/o-encoding-error) (make-i/o-decoding-error . lc4f9d@lc4e7e@make-i/o-decoding-error) (i/o-write-error? . lc4f58@lc4dc6@i/o-write-error?) (i/o-read-error? . lc4f50@lc4db1@i/o-read-error?) (i/o-port-error? . lc4f95@lc4e69@i/o-port-error?) (i/o-invalid-position-error? . lc4f61@lc4ddf@i/o-invalid-position-error?) (i/o-filename-error? . lc4f6b@lc4dfa@i/o-filename-error?) (i/o-file-protection-error? . lc4f74@lc4e11@i/o-file-protection-error?) (i/o-file-is-read-only-error? . lc4f7c@lc4e26@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . lc4f8c@lc4e50@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . lc4f84@lc4e3b@i/o-file-already-exists-error?) (i/o-error? . lc4f48@lc4d9c@i/o-error?) (i/o-error-position . lc4f62@lc4de1@i/o-error-position) (i/o-error-port . lc4f96@lc4e6b@i/o-error-port) (i/o-error-filename . lc4f6c@lc4dfc@i/o-error-filename) (i/o-encoding-error? . lc4fa7@lc4e99@i/o-encoding-error?) (i/o-encoding-error-char . lc4fa8@lc4e9b@i/o-encoding-error-char) (i/o-decoding-error? . lc4f9e@lc4e80@i/o-decoding-error?) (scheme-report-environment . lc4be2@lc3176@scheme-report-environment) (null-environment . lc4be1@lc3174@null-environment) (command-line . lc512c@lc4fd4@command-line) (eval . lc4be4@lc317a@eval) (environment . lc4be0@lc3172@environment) (who-condition? . lc4f13@lc4d10@who-condition?) (warning? . lc4ee0@lc4c88@warning?) (violation? . lc4ef8@lc4cc7@violation?) (undefined-violation? . lc4f40@lc4d87@undefined-violation?) (syntax-violation? . lc4f36@lc4d6e@syntax-violation?) (syntax-violation-subform . lc4f38@lc4d72@syntax-violation-subform) (syntax-violation-form . lc4f37@lc4d70@syntax-violation-form) (syntax-violation . lc4bf4@lc319a@syntax-violation) (serious-condition? . lc4ee8@lc4c9d@serious-condition?) (non-continuable-violation? . lc4f1c@lc4d27@non-continuable-violation?) (message-condition? . lc4ed7@lc4c71@message-condition?) (make-who-condition . lc4f11@lc4d0c@make-who-condition) (make-warning . lc4edf@lc4c86@make-warning) (make-violation . lc4ef7@lc4cc5@make-violation) (make-undefined-violation . lc4f3f@lc4d85@make-undefined-violation) (make-syntax-violation . lc4f33@lc4d68@make-syntax-violation) (make-serious-condition . lc4ee7@lc4c9b@make-serious-condition) (make-non-continuable-violation . lc4f1b@lc4d25@make-non-continuable-violation) (make-message-condition . lc4ed5@lc4c6d@make-message-condition) (make-lexical-violation . lc4f2b@lc4d4f@make-lexical-violation) (make-irritants-condition . lc4f07@lc4cf1@make-irritants-condition) (make-implementation-restriction-violation . lc4f23@lc4d3a@make-implementation-restriction-violation) (make-error . lc4eef@lc4cb0@make-error) (make-assertion-violation . lc4eff@lc4cda@make-assertion-violation) (lexical-violation? . lc4f2c@lc4d51@lexical-violation?) (irritants-condition? . lc4f09@lc4cf5@irritants-condition?) (implementation-restriction-violation? . lc4f24@lc4d3c@implementation-restriction-violation?) (error? . lc4ef0@lc4cb2@error?) (condition-who . lc4f14@lc4d12@condition-who) (condition-message . lc4ed8@lc4c73@condition-message) (condition-irritants . lc4f0a@lc4cf7@condition-irritants) (assertion-violation? . lc4f00@lc4cdc@assertion-violation?) (no-nans-violation? . lc4fb8@lc4ec5@no-nans-violation?) (no-infinities-violation? . lc4fb0@lc4eb0@no-infinities-violation?) (make-no-nans-violation . lc4fb7@lc4ec3@make-no-nans-violation) (make-no-infinities-violation . lc4faf@lc4eae@make-no-infinities-violation) (assertion-error . lc4bf1@lc3194@assertion-error))))) (if lc5487@t (cdr lc5487@t) '#f)))) (lc2ccd@lc2b19@install-library 'lc5462 '(mosh interaction) '() '() '() '() '((regexp? . lc545a) (alist->eq-hash-table . lc5456) (format . lc5453) (string-split . lc5448) (call-process . lc5442) (set-current-directory! . lc543e) (expand-path . lc543d) (current-directory . lc543c) (%spawn . lc543b) (%waitpid . lc543a) (simple-struct-name . lc5439) (simple-struct-set! . lc5438) (simple-struct-ref . lc5437) (make-simple-struct . lc5436) (simple-struct? . lc5435) (pointer-ref-c-int64 . lc5434) (pointer-ref-c-int32 . lc5433) (pointer-ref-c-int16 . lc5432) (pointer-ref-c-int8 . lc5431) (pointer-ref-c-uint64 . lc5430) (pointer-ref-c-uint32 . lc542f) (pointer-ref-c-uint16 . lc542e) (pointer-ref-c-uint8 . lc542d) (pointer-set-c-uint64! . lc542c) (pointer-set-c-uint32! . lc542b) (pointer-set-c-uint16! . lc542a) (pointer-set-c-uint8! . lc5429) (pointer-set-c-int64! . lc5428) (pointer-set-c-int32! . lc5427) (pointer-set-c-int16! . lc5426) (pointer-set-c-int8! . lc5425) (pointer-set-c-pointer! . lc5424) (pointer-set-c-double! . lc5423) (pointer-set-c-float! . lc5422) (pointer-set-c-long-long! . lc5421) (pointer-set-c-long! . lc5420) (pointer-set-c-int! . lc541f) (pointer-set-c-short! . lc541e) (pointer-set-c-char! . lc541d) (pointer-ref-c-pointer . lc541c) (pointer-ref-c-double . lc541b) (pointer-ref-c-float . lc541a) (pointer-ref-c-unsigned-long-long . lc5419) (pointer-ref-c-signed-long-long . lc5418) (pointer-ref-c-unsigned-long . lc5417) (pointer-ref-c-signed-long . lc5416) (pointer-ref-c-unsigned-int . lc5415) (pointer-ref-c-signed-int . lc5414) (pointer-ref-c-unsigned-short . lc5413) (pointer-ref-c-signed-short . lc5412) (pointer-ref-c-unsigned-char . lc5411) (pointer-ref-c-signed-char . lc5410) (pointer->integer . lc540f) (integer->pointer . lc540e) (pointer? . lc540d) (shared-errno . lc540c) (%ffi-supported? . lc5407) (%ffi-pointer->string . lc5406) (%ffi-call . lc5405) (%ffi-lookup . lc5404) (%ffi-open . lc5403) (null-terminated-utf8->string . lc5402) (null-terminated-bytevector->string . lc5401) (%fork . lc5400) (%pipe . lc53ff) (p . lc53fe) (whereis . lc53e2) (register . lc53e1) (vm-join! . lc53e0) (vm-set-value! . lc53df) (vm? . lc53de) (main-vm? . lc53dd) (vm-eval . lc53dc) (vm-self . lc53db) (vm-start! . lc53da) (make-vm . lc53d9) (mutex-try-lock! . lc53d8) (mutex-unlock! . lc53d7) (mutex-lock! . lc53d6) (mutex? . lc53d5) (make-mutex . lc53d4) (condition-variable-notify-all! . lc53d3) (condition-variable-notify! . lc53d2) (condition-variable-wait! . lc53d1) (make-condition-variable . lc53d0) (string-upcase . lc53b8) (string-titlecase . lc53b7) (string-normalize-nfkd . lc53b6) (string-normalize-nfkc . lc53b5) (string-normalize-nfd . lc53b4) (string-normalize-nfc . lc53b3) (string-foldcase . lc53b2) (string-downcase . lc53b1) (string-ci>? . lc53b0) (string-ci>=? . lc53af) (string-ci=? . lc53ae) (string-ci<? . lc53ad) (string-ci<=? . lc53ac) (char-whitespace? . lc53ab) (char-upper-case? . lc53aa) (char-title-case? . lc53a9) (char-numeric? . lc53a8) (char-lower-case? . lc53a7) (char-general-category . lc53a6) (char-upcase . lc53a5) (char-titlecase . lc53a4) (char-foldcase . lc53a3) (char-downcase . lc53a2) (char-ci>? . lc53a1) (char-ci>=? . lc53a0) (char-ci=? . lc539f) (char-ci<? . lc539e) (char-ci<=? . lc539d) (char-alphabetic? . lc539c) (make-variable-transformer . lc2ee4) (identifier? . lc319b) (generate-temporaries . lc3187) (free-identifier=? . lc3189) (syntax->datum . lc319f) (datum->syntax . lc319d) (bound-identifier=? . lc318b) (record-type-descriptor? . lc539b) (record-predicate . lc539a) (record-mutator . lc5399) (record-constructor . lc5398) (record-accessor . lc5397) (make-record-type-descriptor . lc5396) (make-record-constructor-descriptor . lc5395) (record? . lc5394) (record-type-uid . lc5393) (record-type-sealed? . lc5392) (record-type-parent . lc5391) (record-type-opaque? . lc5390) (record-type-name . lc538f) (record-type-generative? . lc538e) (record-type-field-names . lc538d) (record-rtd . lc538c) (record-field-mutable? . lc538b) (delete-file . lc538a) (file-exists? . lc5389) (vector-sort! . lc5388) (vector-sort . lc5387) (list-sort . lc5386) (symbol-hash . lc5385) (string-ci-hash . lc5384) (string-hash . lc5383) (equal-hash . lc5382) (hashtable-equivalence-function . lc5381) (make-hashtable . lc5380) (hashtable-hash-function . lc537f) (make-eqv-hashtable . lc537e) (make-eq-hashtable . lc537d) (hashtable? . lc537c) (hashtable-update! . lc537b) (hashtable-size . lc537a) (hashtable-set! . lc5379) (hashtable-ref . lc5378) (hashtable-mutable? . lc5377) (hashtable-keys . lc5376) (hashtable-entries . lc5375) (hashtable-delete! . lc5374) (hashtable-copy . lc5373) (hashtable-contains? . lc5372) (hashtable-clear! . lc5371) (call-with-output-file . lc5370) (call-with-input-file . lc536f) (write-char . lc536e) (write . lc536d) (with-output-to-file . lc536c) (with-input-from-file . lc536b) (read-char . lc536a) (read . lc5369) (peek-char . lc5368) (open-output-file . lc5367) (open-input-file . lc5366) (newline . lc5365) (display . lc5364) (close-output-port . lc5363) (close-input-port . lc5362) (eof-object? . lc5361) (eof-object . lc5360) (current-error-port . lc535f) (current-output-port . lc535e) (current-input-port . lc535d) (output-port? . lc535c) (input-port? . lc535b) (utf-8-codec . lc535a) (utf-16-codec . lc5359) (transcoder-error-handling-mode . lc5358) (transcoder-eol-style . lc5357) (transcoder-codec . lc5356) (transcoded-port . lc5355) (textual-port? . lc5354) (string->bytevector . lc5353) (standard-output-port . lc5352) (standard-input-port . lc5351) (standard-error-port . lc5350) (set-port-position! . lc534f) (put-u8 . lc534e) (put-string . lc534d) (put-datum . lc534c) (put-char . lc534b) (put-bytevector . lc534a) (port? . lc5349) (port-transcoder . lc5348) (port-position . lc5347) (port-has-set-port-position!? . lc5346) (port-has-port-position? . lc5345) (port-eof? . lc5344) (output-port-buffer-mode . lc5343) (open-string-output-port . lc5342) (open-string-input-port . lc5341) (open-file-output-port . lc5340) (open-file-input/output-port . lc533f) (open-file-input-port . lc533e) (open-bytevector-output-port . lc533d) (open-bytevector-input-port . lc533c) (native-transcoder . lc533b) (native-eol-style . lc533a) (make-transcoder . lc5339) (latin-1-codec . lc5338) (make-i/o-write-error . lc4dc3) (make-i/o-read-error . lc4dae) (make-i/o-port-error . lc4e64) (make-i/o-invalid-position-error . lc4dda) (make-i/o-filename-error . lc4df5) (make-i/o-file-protection-error . lc4e0e) (make-i/o-file-is-read-only-error . lc4e23) (make-i/o-file-does-not-exist-error . lc4e4d) (make-i/o-file-already-exists-error . lc4e38) (make-i/o-error . lc4d99) (make-i/o-encoding-error . lc4e94) (make-i/o-decoding-error . lc4e7d) (make-custom-textual-output-port . lc5337) (make-custom-textual-input/output-port . lc5336) (make-custom-textual-input-port . lc5335) (make-custom-binary-output-port . lc5334) (make-custom-binary-input/output-port . lc5333) (make-custom-binary-input-port . lc5332) (make-bytevector . lc5331) (lookahead-u8 . lc5330) (lookahead-char . lc532f) (i/o-write-error? . lc4dc5) (i/o-read-error? . lc4db0) (i/o-port-error? . lc4e68) (i/o-invalid-position-error? . lc4dde) (i/o-filename-error? . lc4df9) (i/o-file-protection-error? . lc4e10) (i/o-file-is-read-only-error? . lc4e25) (i/o-file-does-not-exist-error? . lc4e4f) (i/o-file-already-exists-error? . lc4e3a) (i/o-error? . lc4d9b) (i/o-error-position . lc4de0) (i/o-error-port . lc4e6a) (i/o-error-filename . lc4dfb) (i/o-encoding-error? . lc4e98) (i/o-encoding-error-char . lc4e9a) (i/o-decoding-error? . lc4e7f) (get-u8 . lc532e) (get-string-n! . lc532d) (get-string-n . lc532c) (get-string-all . lc532b) (get-line . lc532a) (get-datum . lc5329) (get-char . lc5328) (get-bytevector-some . lc5327) (get-bytevector-n! . lc5326) (get-bytevector-n . lc5325) (get-bytevector-all . lc5324) (flush-output-port . lc5323) (close-port . lc5322) (exit . lc531a) (command-line . lc4fd3) (string-fill! . lc5319) (string-set! . lc5318) (set-cdr! . lc5317) (set-car! . lc5316) (remove . lc5315) (remv . lc5314) (remp . lc5313) (remq . lc5312) (partition . lc5311) (memv . lc5310) (memq . lc530f) (memp . lc530e) (member . lc530d) (exists . lc530c) (for-all . lc530b) (fold-right . lc530a) (fold-left . lc5309) (find . lc5308) (filter . lc5307) (cons* . lc5306) (assv . lc5305) (assq . lc5304) (assp . lc5303) (assoc . lc5302) (call-with-string-output-port . lc5301) (call-with-port . lc5300) (call-with-bytevector-output-port . lc52ff) (bytevector->string . lc52fe) (buffer-mode? . lc52fd) (binary-port? . lc52fc) (with-exception-handler . lc52fb) (raise-continuable . lc52fa) (raise . lc52f9) (eval . lc3179) (environment . lc3171) (make-enumeration . lc52f8) (enum-set=? . lc52f7) (enum-set-universe . lc52f6) (enum-set-union . lc52f5) (enum-set-subset? . lc52f4) (enum-set-projection . lc52f3) (enum-set-member? . lc52f2) (enum-set-intersection . lc52f1) (enum-set-indexer . lc52f0) (enum-set-difference . lc52ef) (enum-set-constructor . lc52ee) (enum-set-complement . lc52ed) (enum-set->list . lc52ec) (who-condition? . lc4d0f) (warning? . lc4c87) (violation? . lc4cc6) (undefined-violation? . lc4d86) (syntax-violation? . lc4d6d) (syntax-violation-subform . lc4d71) (syntax-violation-form . lc4d6f) (syntax-violation . lc3199) (simple-conditions . lc52eb) (serious-condition? . lc4c9c) (non-continuable-violation? . lc4d26) (message-condition? . lc4c70) (make-who-condition . lc4d0b) (make-warning . lc4c85) (make-violation . lc4cc4) (make-undefined-violation . lc4d84) (make-syntax-violation . lc4d67) (make-serious-condition . lc4c9a) (make-non-continuable-violation . lc4d24) (make-message-condition . lc4c6c) (make-lexical-violation . lc4d4e) (make-irritants-condition . lc4cf0) (make-implementation-restriction-violation . lc4d39) (make-error . lc4caf) (make-assertion-violation . lc4cd9) (lexical-violation? . lc4d50) (irritants-condition? . lc4cf4) (implementation-restriction-violation? . lc4d3b) (error? . lc4cb1) (condition-who . lc4d11) (condition-predicate . lc52ea) (condition-message . lc4c72) (condition-irritants . lc4cf6) (condition-accessor . lc52e9) (condition . lc52e8) (assertion-violation? . lc4cdb) (condition? . lc52e7) (utf32->string . lc52e6) (utf16->string . lc52e5) (utf8->string . lc52e4) (uint-list->bytevector . lc52e3) (u8-list->bytevector . lc52e2) (string->utf8 . lc52e1) (string->utf32 . lc52e0) (string->utf16 . lc52df) (sint-list->bytevector . lc52de) (native-endianness . lc52dd) (bytevector? . lc52dc) (bytevector=? . lc52db) (bytevector-uint-set! . lc52da) (bytevector-uint-ref . lc52d9) (bytevector-u8-set! . lc52d8) (bytevector-u8-ref . lc52d7) (bytevector-u64-set! . lc52d6) (bytevector-u64-ref . lc52d5) (bytevector-u64-native-set! . lc52d4) (bytevector-u64-native-ref . lc52d3) (bytevector-u32-set! . lc52d2) (bytevector-u32-ref . lc52d1) (bytevector-u32-native-set! . lc52d0) (bytevector-u32-native-ref . lc52cf) (bytevector-u16-set! . lc52ce) (bytevector-u16-ref . lc52cd) (bytevector-u16-native-set! . lc52cc) (bytevector-u16-native-ref . lc52cb) (bytevector-sint-set! . lc52ca) (bytevector-sint-ref . lc52c9) (bytevector-s8-set! . lc52c8) (bytevector-s8-ref . lc52c7) (bytevector-s64-set! . lc52c6) (bytevector-s64-ref . lc52c5) (bytevector-s64-native-set! . lc52c4) (bytevector-s64-native-ref . lc52c3) (bytevector-s32-set! . lc52c2) (bytevector-s32-ref . lc52c1) (bytevector-s32-native-set! . lc52c0) (bytevector-s32-native-ref . lc52bf) (bytevector-s16-set! . lc52be) (bytevector-s16-ref . lc52bd) (bytevector-s16-native-set! . lc52bc) (bytevector-s16-native-ref . lc52bb) (bytevector-length . lc52ba) (bytevector-ieee-single-ref . lc52b9) (bytevector-ieee-single-set! . lc52b8) (bytevector-ieee-single-native-set! . lc52b7) (bytevector-ieee-single-native-ref . lc52b6) (bytevector-ieee-double-set! . lc52b5) (bytevector-ieee-double-ref . lc52b4) (bytevector-ieee-double-native-set! . lc52b3) (bytevector-ieee-double-native-ref . lc52b2) (bytevector-fill! . lc52b1) (bytevector-copy! . lc52b0) (bytevector-copy . lc52af) (bytevector->uint-list . lc52ae) (bytevector->u8-list . lc52ad) (bytevector->sint-list . lc52ac) (no-nans-violation? . lc4ec4) (no-infinities-violation? . lc4eaf) (make-no-nans-violation . lc4ec2) (make-no-infinities-violation . lc4ead) (real->flonum . lc52ab) (flzero? . lc52aa) (fltruncate . lc52a9) (fltan . lc52a8) (flsqrt . lc52a7) (flsin . lc52a6) (flround . lc52a5) (flpositive? . lc52a4) (flonum? . lc52a3) (flodd? . lc52a2) (flnumerator . lc52a1) (flnegative? . lc52a0) (flnan? . lc529f) (flmod0 . lc529e) (flmod . lc529d) (flmin . lc529c) (flmax . lc529b) (fllog . lc529a) (flinteger? . lc5299) (flinfinite? . lc5298) (flfloor . lc5297) (flfinite? . lc5296) (flexpt . lc5295) (flexp . lc5294) (fleven? . lc5293) (fldiv0-and-mod0 . lc5292) (fldiv0 . lc5291) (fldiv-and-mod . lc5290) (fldiv . lc528f) (fldenominator . lc528e) (flcos . lc528d) (flceiling . lc528c) (flatan . lc528b) (flasin . lc528a) (flacos . lc5289) (flabs . lc5288) (fl>? . lc5287) (fl>=? . lc5286) (fl=? . lc5285) (fl<? . lc5284) (fl<=? . lc5283) (fl/ . lc5282) (fl- . lc5281) (fl+ . lc5280) (fl* . lc527f) (fixnum->flonum . lc527e) (fxzero? . lc527d) (fxxor . lc527c) (fxrotate-bit-field . lc527b) (fxreverse-bit-field . lc527a) (fxpositive? . lc5279) (fxodd? . lc5278) (fxnot . lc5277) (fxnegative? . lc5276) (fxmod0 . lc5275) (fxmod . lc5274) (fxmin . lc5273) (fxmax . lc5272) (fxlength . lc5271) (fxior . lc5270) (fxif . lc526f) (fxfirst-bit-set . lc526e) (fxeven? . lc526d) (fxdiv0-and-mod0 . lc526c) (fxdiv0 . lc526b) (fxdiv-and-mod . lc526a) (fxdiv . lc5269) (fxcopy-bit-field . lc5268) (fxcopy-bit . lc5267) (fxbit-set? . lc5266) (fxbit-field . lc5265) (fxbit-count . lc5264) (fxarithmetic-shift-right . lc5263) (fxarithmetic-shift-left . lc5262) (fxarithmetic-shift . lc5261) (fxand . lc5260) (fx>? . lc525f) (fx>=? . lc525e) (fx=? . lc525d) (fx<? . lc525c) (fx<=? . lc525b) (fx-/carry . lc525a) (fx- . lc5259) (fx+/carry . lc5258) (fx+ . lc5257) (fx*/carry . lc5256) (fx* . lc5255) (greatest-fixnum . lc5254) (least-fixnum . lc5253) (fixnum-width . lc5252) (fixnum? . lc5251) (bitwise-rotate-bit-field . lc5250) (bitwise-reverse-bit-field . lc524f) (bitwise-length . lc524e) (bitwise-if . lc524d) (bitwise-first-bit-set . lc524c) (bitwise-copy-bit-field . lc524b) (bitwise-copy-bit . lc524a) (bitwise-bit-set? . lc5249) (bitwise-bit-field . lc5248) (bitwise-bit-count . lc5247) (bitwise-xor . lc5246) (bitwise-ior . lc5245) (bitwise-and . lc5244) (bitwise-not . lc5243) (bitwise-arithmetic-shift-right . lc5242) (bitwise-arithmetic-shift-left . lc5241) (bitwise-arithmetic-shift . lc5240) (zero? . lc523f) (vector? . lc523e) (vector-set! . lc523d) (vector-ref . lc523c) (vector-map . lc523b) (vector-length . lc523a) (vector-for-each . lc5239) (vector-fill! . lc5238) (vector->list . lc5237) (vector . lc5236) (values . lc5235) (truncate . lc5234) (tan . lc5233) (symbol? . lc5232) (symbol=? . lc5231) (symbol->string . lc5230) (substring . lc522f) (string? . lc522e) (string>? . lc522d) (string>=? . lc522c) (string=? . lc522b) (string<? . lc522a) (string<=? . lc5229) (string-ref . lc5228) (string-length . lc5227) (string-for-each . lc5226) (string-copy . lc5225) (string-append . lc5224) (string->symbol . lc5223) (string->number . lc5222) (string->list . lc5221) (string . lc5220) (sqrt . lc521f) (sin . lc521e) (round . lc521d) (reverse . lc521c) (real? . lc521b) (real-valued? . lc521a) (real-part . lc5219) (rationalize . lc5218) (rational? . lc5217) (rational-valued? . lc5216) (procedure? . lc5215) (positive? . lc5214) (pair? . lc5213) (odd? . lc5212) (numerator . lc5211) (number? . lc5210) (number->string . lc520f) (null? . lc520e) (not . lc520d) (negative? . lc520c) (nan? . lc520b) (min . lc520a) (max . lc5209) (map . lc5208) (make-vector . lc5207) (make-string . lc5206) (make-rectangular . lc5205) (make-polar . lc5204) (magnitude . lc5203) (log . lc5202) (list? . lc5201) (list-tail . lc5200) (list-ref . lc51ff) (list->vector . lc51fe) (list->string . lc51fd) (list . lc51fc) (length . lc51fb) (lcm . lc51fa) (integer? . lc51f9) (integer-valued? . lc51f8) (integer->char . lc51f7) (infinite? . lc51f6) (inexact? . lc51f5) (inexact . lc51f4) (imag-part . lc51f3) (gcd . lc51f2) (for-each . lc51f1) (floor . lc51f0) (finite? . lc51ef) (expt . lc51ee) (exp . lc51ed) (exact? . lc51ec) (exact-integer-sqrt . lc51eb) (exact . lc51ea) (even? . lc51e9) (error . lc51e8) (eqv? . lc51e7) (equal? . lc51e6) (eq? . lc51e5) (dynamic-wind . lc51e4) (div0-and-mod0 . lc51e3) (mod0 . lc51e2) (div0 . lc51e1) (div-and-mod . lc51e0) (mod . lc51df) (div . lc51de) (denominator . lc51dd) (cos . lc51dc) (cons . lc51db) (complex? . lc51da) (char? . lc51d9) (char>? . lc51d8) (char>=? . lc51d7) (char=? . lc51d6) (char<? . lc51d5) (char<=? . lc51d4) (char->integer . lc51d3) (ceiling . lc51d2) (call-with-values . lc51d1) (call/cc . lc51d0) (call-with-current-continuation . lc51cf) (cddddr . lc51ce) (cdddar . lc51cd) (cddadr . lc51cc) (cddaar . lc51cb) (cdaddr . lc51ca) (cdadar . lc51c9) (cdaadr . lc51c8) (cdaaar . lc51c7) (cadddr . lc51c6) (caddar . lc51c5) (cadadr . lc51c4) (cadaar . lc51c3) (caaddr . lc51c2) (caadar . lc51c1) (caaadr . lc51c0) (caaaar . lc51bf) (cdddr . lc51be) (cddar . lc51bd) (cdadr . lc51bc) (cdaar . lc51bb) (caddr . lc51ba) (cadar . lc51b9) (caadr . lc51b8) (caaar . lc51b7) (cddr . lc51b6) (cdar . lc51b5) (cadr . lc51b4) (caar . lc51b3) (cdr . lc51b2) (car . lc51b1) (boolean? . lc51b0) (boolean=? . lc51af) (atan . lc51ae) (assertion-violation . lc51ad) (asin . lc51ac) (apply . lc51ab) (append . lc51aa) (angle . lc51a9) (acos . lc51a8) (abs . lc51a7) (/ . lc51a6) (* . lc51a5) (- . lc51a4) (+ . lc51a3) (>= . lc51a2) (> . lc51a1) (= . lc51a0) (<= . lc519f) (< . lc519e) (library . lc519d) (&no-nans . lc519c) (&no-infinities . lc519b) (&i/o-encoding . lc519a) (&i/o-decoding . lc5199) (&i/o-port . lc5198) (&i/o-file-does-not-exist . lc5197) (&i/o-file-already-exists . lc5196) (&i/o-file-is-read-only . lc5195) (&i/o-file-protection . lc5194) (&i/o-filename . lc5193) (&i/o-invalid-position . lc5192) (&i/o-write . lc5191) (&i/o-read . lc5190) (&i/o . lc518f) (&undefined . lc518e) (&syntax . lc518d) (&lexical . lc518c) (&implementation-restriction . lc518b) (&non-continuable . lc518a) (&who . lc5189) (&irritants . lc5188) (&assertion . lc5187) (&violation . lc5186) (&error . lc5185) (&serious . lc5184) (&warning . lc5183) (&message . lc5182) (&condition . lc5181) (define-condition-type . lc5180) (define-enumeration . lc517f) (define-record-type . lc517e) (parent-rtd . lc517d) (nongenerative . lc517c) (opaque . lc517b) (sealed . lc517a) (protocol . lc5179) (parent . lc5178) (immutable . lc5177) (mutable . lc5176) (fields . lc5175) (error-handling-mode . lc5174) (file-options . lc5173) (buffer-mode . lc5172) (eol-style . lc5171) (guard . lc5170) (unsyntax-splicing . lc516d) (unsyntax . lc516c) (unquote-splicing . lc516b) (unquote . lc516a) (_ . lc5169) (else . lc5168) (=> . lc5167) (... . lc5166) (assert . lc5165) (endianness . lc5164) (time . lc5162) (do . lc5161) (cond . lc5160) (let* . lc515f) (let*-values . lc515e) (let-values . lc515d) (identifier-syntax . lc515c) (with-syntax . lc515b) (quasisyntax . lc515a) (quasiquote . lc5159) (syntax-rules . lc5158) (include . lc5157) (record-constructor-descriptor . lc5155) (record-type-descriptor . lc5154) (case . lc5153) (unless . lc5151) (when . lc5150) (or . lc514f) (and . lc514e) (if . lc514d) (let . lc514c) (letrec* . lc514b) (letrec . lc514a) (case-lambda . lc5148) (lambda . lc5147) (syntax . lc5146) (syntax-case . lc5145) (quote . lc5144) (letrec-syntax . lc5142) (let-syntax . lc5141) (set! . lc5140) (import . lc513f) (begin . lc513e) (define-syntax . lc513c) (define . lc513b)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5463 '(psyntax null-environment-5) '() '() '() '() '((make-promise . lc531b) (unquote-splicing . lc516b) (unquote . lc516a) (_ . lc5169) (else . lc5168) (=> . lc5167) (... . lc5166) (delay . lc5163) (do . lc5161) (cond . lc5160) (let* . lc515f) (quasiquote . lc5159) (syntax-rules . lc5158) (case . lc5153) (or . lc514f) (and . lc514e) (if . lc514d) (let . lc514c) (letrec . lc514a) (lambda . lc5147) (quote . lc5144) (letrec-syntax . lc5142) (let-syntax . lc5141) (set! . lc5140) (begin . lc513e) (define-syntax . lc513c) (define . lc513b)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5464 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . lc53b0) (string-ci>=? . lc53af) (string-ci=? . lc53ae) (string-ci<? . lc53ad) (string-ci<=? . lc53ac) (char-whitespace? . lc53ab) (char-upper-case? . lc53aa) (char-numeric? . lc53a8) (char-lower-case? . lc53a7) (char-upcase . lc53a5) (char-downcase . lc53a2) (char-ci>? . lc53a1) (char-ci>=? . lc53a0) (char-ci=? . lc539f) (char-ci<? . lc539e) (char-ci<=? . lc539d) (char-alphabetic? . lc539c) (call-with-output-file . lc5370) (call-with-input-file . lc536f) (write-char . lc536e) (write . lc536d) (with-output-to-file . lc536c) (with-input-from-file . lc536b) (read-char . lc536a) (read . lc5369) (peek-char . lc5368) (open-output-file . lc5367) (open-input-file . lc5366) (newline . lc5365) (display . lc5364) (close-output-port . lc5363) (close-input-port . lc5362) (eof-object . lc5360) (current-output-port . lc535e) (current-input-port . lc535d) (output-port? . lc535c) (input-port? . lc535b) (scheme-report-environment . lc3175) (quotient . lc5321) (null-environment . lc3173) (remainder . lc5320) (modulo . lc531f) (inexact->exact . lc531e) (force . lc531d) (exact->inexact . lc531c) (make-promise . lc531b) (string-fill! . lc5319) (string-set! . lc5318) (set-cdr! . lc5317) (set-car! . lc5316) (memv . lc5310) (memq . lc530f) (member . lc530d) (assv . lc5305) (assq . lc5304) (assoc . lc5302) (eval . lc3179) (zero? . lc523f) (vector? . lc523e) (vector-set! . lc523d) (vector-ref . lc523c) (vector-length . lc523a) (vector-fill! . lc5238) (vector->list . lc5237) (vector . lc5236) (values . lc5235) (truncate . lc5234) (tan . lc5233) (symbol? . lc5232) (symbol->string . lc5230) (substring . lc522f) (string? . lc522e) (string>? . lc522d) (string>=? . lc522c) (string=? . lc522b) (string<? . lc522a) (string<=? . lc5229) (string-ref . lc5228) (string-length . lc5227) (string-copy . lc5225) (string-append . lc5224) (string->symbol . lc5223) (string->number . lc5222) (string->list . lc5221) (string . lc5220) (sqrt . lc521f) (sin . lc521e) (round . lc521d) (reverse . lc521c) (real? . lc521b) (real-part . lc5219) (rationalize . lc5218) (rational? . lc5217) (procedure? . lc5215) (positive? . lc5214) (pair? . lc5213) (odd? . lc5212) (numerator . lc5211) (number? . lc5210) (number->string . lc520f) (not . lc520d) (negative? . lc520c) (min . lc520a) (max . lc5209) (map . lc5208) (make-vector . lc5207) (make-string . lc5206) (make-rectangular . lc5205) (make-polar . lc5204) (magnitude . lc5203) (log . lc5202) (list? . lc5201) (list-tail . lc5200) (list-ref . lc51ff) (list->vector . lc51fe) (list->string . lc51fd) (list . lc51fc) (length . lc51fb) (lcm . lc51fa) (integer? . lc51f9) (integer->char . lc51f7) (inexact? . lc51f5) (imag-part . lc51f3) (gcd . lc51f2) (for-each . lc51f1) (floor . lc51f0) (expt . lc51ee) (exp . lc51ed) (exact? . lc51ec) (even? . lc51e9) (eqv? . lc51e7) (equal? . lc51e6) (eq? . lc51e5) (dynamic-wind . lc51e4) (denominator . lc51dd) (cos . lc51dc) (cons . lc51db) (complex? . lc51da) (char? . lc51d9) (char>? . lc51d8) (char>=? . lc51d7) (char=? . lc51d6) (char<? . lc51d5) (char<=? . lc51d4) (char->integer . lc51d3) (ceiling . lc51d2) (call-with-values . lc51d1) (call-with-current-continuation . lc51cf) (cddddr . lc51ce) (cdddar . lc51cd) (cddadr . lc51cc) (cddaar . lc51cb) (cdaddr . lc51ca) (cdadar . lc51c9) (cdaadr . lc51c8) (cdaaar . lc51c7) (cadddr . lc51c6) (caddar . lc51c5) (cadadr . lc51c4) (cadaar . lc51c3) (caaddr . lc51c2) (caadar . lc51c1) (caaadr . lc51c0) (caaaar . lc51bf) (cdddr . lc51be) (cddar . lc51bd) (cdadr . lc51bc) (cdaar . lc51bb) (caddr . lc51ba) (cadar . lc51b9) (caadr . lc51b8) (caaar . lc51b7) (cddr . lc51b6) (cdar . lc51b5) (cadr . lc51b4) (caar . lc51b3) (cdr . lc51b2) (car . lc51b1) (boolean? . lc51b0) (atan . lc51ae) (asin . lc51ac) (apply . lc51ab) (append . lc51aa) (angle . lc51a9) (acos . lc51a8) (abs . lc51a7) (/ . lc51a6) (* . lc51a5) (- . lc51a4) (+ . lc51a3) (>= . lc51a2) (> . lc51a1) (= . lc51a0) (<= . lc519f) (< . lc519e) (unquote-splicing . lc516b) (unquote . lc516a) (else . lc5168) (=> . lc5167) (... . lc5166) (delay . lc5163) (do . lc5161) (cond . lc5160) (let* . lc515f) (quasiquote . lc5159) (syntax-rules . lc5158) (case . lc5153) (or . lc514f) (and . lc514e) (if . lc514d) (let . lc514c) (letrec . lc514a) (lambda . lc5147) (quote . lc5144) (letrec-syntax . lc5142) (let-syntax . lc5141) (set! . lc5140) (begin . lc513e) (define-syntax . lc513c) (define . lc513b)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5465 '(psyntax modules) '() '() '() '() '((module . lc513d)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5466 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5467 '(rnrs) '(6) '() '() '() '((regexp? . lc545a) (string-upcase . lc53b8) (string-titlecase . lc53b7) (string-normalize-nfkd . lc53b6) (string-normalize-nfkc . lc53b5) (string-normalize-nfd . lc53b4) (string-normalize-nfc . lc53b3) (string-foldcase . lc53b2) (string-downcase . lc53b1) (string-ci>? . lc53b0) (string-ci>=? . lc53af) (string-ci=? . lc53ae) (string-ci<? . lc53ad) (string-ci<=? . lc53ac) (char-whitespace? . lc53ab) (char-upper-case? . lc53aa) (char-title-case? . lc53a9) (char-numeric? . lc53a8) (char-lower-case? . lc53a7) (char-general-category . lc53a6) (char-upcase . lc53a5) (char-titlecase . lc53a4) (char-foldcase . lc53a3) (char-downcase . lc53a2) (char-ci>? . lc53a1) (char-ci>=? . lc53a0) (char-ci=? . lc539f) (char-ci<? . lc539e) (char-ci<=? . lc539d) (char-alphabetic? . lc539c) (make-variable-transformer . lc2ee4) (identifier? . lc319b) (generate-temporaries . lc3187) (free-identifier=? . lc3189) (syntax->datum . lc319f) (datum->syntax . lc319d) (bound-identifier=? . lc318b) (record-type-descriptor? . lc539b) (record-predicate . lc539a) (record-mutator . lc5399) (record-constructor . lc5398) (record-accessor . lc5397) (make-record-type-descriptor . lc5396) (make-record-constructor-descriptor . lc5395) (record? . lc5394) (record-type-uid . lc5393) (record-type-sealed? . lc5392) (record-type-parent . lc5391) (record-type-opaque? . lc5390) (record-type-name . lc538f) (record-type-generative? . lc538e) (record-type-field-names . lc538d) (record-rtd . lc538c) (record-field-mutable? . lc538b) (delete-file . lc538a) (file-exists? . lc5389) (vector-sort! . lc5388) (vector-sort . lc5387) (list-sort . lc5386) (symbol-hash . lc5385) (string-ci-hash . lc5384) (string-hash . lc5383) (equal-hash . lc5382) (hashtable-equivalence-function . lc5381) (make-hashtable . lc5380) (hashtable-hash-function . lc537f) (make-eqv-hashtable . lc537e) (make-eq-hashtable . lc537d) (hashtable? . lc537c) (hashtable-update! . lc537b) (hashtable-size . lc537a) (hashtable-set! . lc5379) (hashtable-ref . lc5378) (hashtable-mutable? . lc5377) (hashtable-keys . lc5376) (hashtable-entries . lc5375) (hashtable-delete! . lc5374) (hashtable-copy . lc5373) (hashtable-contains? . lc5372) (hashtable-clear! . lc5371) (call-with-output-file . lc5370) (call-with-input-file . lc536f) (write-char . lc536e) (write . lc536d) (with-output-to-file . lc536c) (with-input-from-file . lc536b) (read-char . lc536a) (read . lc5369) (peek-char . lc5368) (open-output-file . lc5367) (open-input-file . lc5366) (newline . lc5365) (display . lc5364) (close-output-port . lc5363) (close-input-port . lc5362) (eof-object? . lc5361) (eof-object . lc5360) (current-error-port . lc535f) (current-output-port . lc535e) (current-input-port . lc535d) (output-port? . lc535c) (input-port? . lc535b) (utf-8-codec . lc535a) (utf-16-codec . lc5359) (transcoder-error-handling-mode . lc5358) (transcoder-eol-style . lc5357) (transcoder-codec . lc5356) (transcoded-port . lc5355) (textual-port? . lc5354) (string->bytevector . lc5353) (standard-output-port . lc5352) (standard-input-port . lc5351) (standard-error-port . lc5350) (set-port-position! . lc534f) (put-u8 . lc534e) (put-string . lc534d) (put-datum . lc534c) (put-char . lc534b) (put-bytevector . lc534a) (port? . lc5349) (port-transcoder . lc5348) (port-position . lc5347) (port-has-set-port-position!? . lc5346) (port-has-port-position? . lc5345) (port-eof? . lc5344) (output-port-buffer-mode . lc5343) (open-string-output-port . lc5342) (open-string-input-port . lc5341) (open-file-output-port . lc5340) (open-file-input/output-port . lc533f) (open-file-input-port . lc533e) (open-bytevector-output-port . lc533d) (open-bytevector-input-port . lc533c) (native-transcoder . lc533b) (native-eol-style . lc533a) (make-transcoder . lc5339) (latin-1-codec . lc5338) (make-i/o-write-error . lc4dc3) (make-i/o-read-error . lc4dae) (make-i/o-port-error . lc4e64) (make-i/o-invalid-position-error . lc4dda) (make-i/o-filename-error . lc4df5) (make-i/o-file-protection-error . lc4e0e) (make-i/o-file-is-read-only-error . lc4e23) (make-i/o-file-does-not-exist-error . lc4e4d) (make-i/o-file-already-exists-error . lc4e38) (make-i/o-error . lc4d99) (make-i/o-encoding-error . lc4e94) (make-i/o-decoding-error . lc4e7d) (make-custom-textual-output-port . lc5337) (make-custom-textual-input/output-port . lc5336) (make-custom-textual-input-port . lc5335) (make-custom-binary-output-port . lc5334) (make-custom-binary-input/output-port . lc5333) (make-custom-binary-input-port . lc5332) (make-bytevector . lc5331) (lookahead-u8 . lc5330) (lookahead-char . lc532f) (i/o-write-error? . lc4dc5) (i/o-read-error? . lc4db0) (i/o-port-error? . lc4e68) (i/o-invalid-position-error? . lc4dde) (i/o-filename-error? . lc4df9) (i/o-file-protection-error? . lc4e10) (i/o-file-is-read-only-error? . lc4e25) (i/o-file-does-not-exist-error? . lc4e4f) (i/o-file-already-exists-error? . lc4e3a) (i/o-error? . lc4d9b) (i/o-error-position . lc4de0) (i/o-error-port . lc4e6a) (i/o-error-filename . lc4dfb) (i/o-encoding-error? . lc4e98) (i/o-encoding-error-char . lc4e9a) (i/o-decoding-error? . lc4e7f) (get-u8 . lc532e) (get-string-n! . lc532d) (get-string-n . lc532c) (get-string-all . lc532b) (get-line . lc532a) (get-datum . lc5329) (get-char . lc5328) (get-bytevector-some . lc5327) (get-bytevector-n! . lc5326) (get-bytevector-n . lc5325) (get-bytevector-all . lc5324) (flush-output-port . lc5323) (close-port . lc5322) (exit . lc531a) (command-line . lc4fd3) (remove . lc5315) (remv . lc5314) (remp . lc5313) (remq . lc5312) (partition . lc5311) (memv . lc5310) (memq . lc530f) (memp . lc530e) (member . lc530d) (exists . lc530c) (for-all . lc530b) (fold-right . lc530a) (fold-left . lc5309) (find . lc5308) (filter . lc5307) (cons* . lc5306) (assv . lc5305) (assq . lc5304) (assp . lc5303) (assoc . lc5302) (call-with-string-output-port . lc5301) (call-with-port . lc5300) (call-with-bytevector-output-port . lc52ff) (bytevector->string . lc52fe) (buffer-mode? . lc52fd) (binary-port? . lc52fc) (with-exception-handler . lc52fb) (raise-continuable . lc52fa) (raise . lc52f9) (make-enumeration . lc52f8) (enum-set=? . lc52f7) (enum-set-universe . lc52f6) (enum-set-union . lc52f5) (enum-set-subset? . lc52f4) (enum-set-projection . lc52f3) (enum-set-member? . lc52f2) (enum-set-intersection . lc52f1) (enum-set-indexer . lc52f0) (enum-set-difference . lc52ef) (enum-set-constructor . lc52ee) (enum-set-complement . lc52ed) (enum-set->list . lc52ec) (who-condition? . lc4d0f) (warning? . lc4c87) (violation? . lc4cc6) (undefined-violation? . lc4d86) (syntax-violation? . lc4d6d) (syntax-violation-subform . lc4d71) (syntax-violation-form . lc4d6f) (syntax-violation . lc3199) (simple-conditions . lc52eb) (serious-condition? . lc4c9c) (non-continuable-violation? . lc4d26) (message-condition? . lc4c70) (make-who-condition . lc4d0b) (make-warning . lc4c85) (make-violation . lc4cc4) (make-undefined-violation . lc4d84) (make-syntax-violation . lc4d67) (make-serious-condition . lc4c9a) (make-non-continuable-violation . lc4d24) (make-message-condition . lc4c6c) (make-lexical-violation . lc4d4e) (make-irritants-condition . lc4cf0) (make-implementation-restriction-violation . lc4d39) (make-error . lc4caf) (make-assertion-violation . lc4cd9) (lexical-violation? . lc4d50) (irritants-condition? . lc4cf4) (implementation-restriction-violation? . lc4d3b) (error? . lc4cb1) (condition-who . lc4d11) (condition-predicate . lc52ea) (condition-message . lc4c72) (condition-irritants . lc4cf6) (condition-accessor . lc52e9) (condition . lc52e8) (assertion-violation? . lc4cdb) (condition? . lc52e7) (utf32->string . lc52e6) (utf16->string . lc52e5) (utf8->string . lc52e4) (uint-list->bytevector . lc52e3) (u8-list->bytevector . lc52e2) (string->utf8 . lc52e1) (string->utf32 . lc52e0) (string->utf16 . lc52df) (sint-list->bytevector . lc52de) (native-endianness . lc52dd) (bytevector? . lc52dc) (bytevector=? . lc52db) (bytevector-uint-set! . lc52da) (bytevector-uint-ref . lc52d9) (bytevector-u8-set! . lc52d8) (bytevector-u8-ref . lc52d7) (bytevector-u64-set! . lc52d6) (bytevector-u64-ref . lc52d5) (bytevector-u64-native-set! . lc52d4) (bytevector-u64-native-ref . lc52d3) (bytevector-u32-set! . lc52d2) (bytevector-u32-ref . lc52d1) (bytevector-u32-native-set! . lc52d0) (bytevector-u32-native-ref . lc52cf) (bytevector-u16-set! . lc52ce) (bytevector-u16-ref . lc52cd) (bytevector-u16-native-set! . lc52cc) (bytevector-u16-native-ref . lc52cb) (bytevector-sint-set! . lc52ca) (bytevector-sint-ref . lc52c9) (bytevector-s8-set! . lc52c8) (bytevector-s8-ref . lc52c7) (bytevector-s64-set! . lc52c6) (bytevector-s64-ref . lc52c5) (bytevector-s64-native-set! . lc52c4) (bytevector-s64-native-ref . lc52c3) (bytevector-s32-set! . lc52c2) (bytevector-s32-ref . lc52c1) (bytevector-s32-native-set! . lc52c0) (bytevector-s32-native-ref . lc52bf) (bytevector-s16-set! . lc52be) (bytevector-s16-ref . lc52bd) (bytevector-s16-native-set! . lc52bc) (bytevector-s16-native-ref . lc52bb) (bytevector-length . lc52ba) (bytevector-ieee-single-ref . lc52b9) (bytevector-ieee-single-set! . lc52b8) (bytevector-ieee-single-native-set! . lc52b7) (bytevector-ieee-single-native-ref . lc52b6) (bytevector-ieee-double-set! . lc52b5) (bytevector-ieee-double-ref . lc52b4) (bytevector-ieee-double-native-set! . lc52b3) (bytevector-ieee-double-native-ref . lc52b2) (bytevector-fill! . lc52b1) (bytevector-copy! . lc52b0) (bytevector-copy . lc52af) (bytevector->uint-list . lc52ae) (bytevector->u8-list . lc52ad) (bytevector->sint-list . lc52ac) (no-nans-violation? . lc4ec4) (no-infinities-violation? . lc4eaf) (make-no-nans-violation . lc4ec2) (make-no-infinities-violation . lc4ead) (real->flonum . lc52ab) (flzero? . lc52aa) (fltruncate . lc52a9) (fltan . lc52a8) (flsqrt . lc52a7) (flsin . lc52a6) (flround . lc52a5) (flpositive? . lc52a4) (flonum? . lc52a3) (flodd? . lc52a2) (flnumerator . lc52a1) (flnegative? . lc52a0) (flnan? . lc529f) (flmod0 . lc529e) (flmod . lc529d) (flmin . lc529c) (flmax . lc529b) (fllog . lc529a) (flinteger? . lc5299) (flinfinite? . lc5298) (flfloor . lc5297) (flfinite? . lc5296) (flexpt . lc5295) (flexp . lc5294) (fleven? . lc5293) (fldiv0-and-mod0 . lc5292) (fldiv0 . lc5291) (fldiv-and-mod . lc5290) (fldiv . lc528f) (fldenominator . lc528e) (flcos . lc528d) (flceiling . lc528c) (flatan . lc528b) (flasin . lc528a) (flacos . lc5289) (flabs . lc5288) (fl>? . lc5287) (fl>=? . lc5286) (fl=? . lc5285) (fl<? . lc5284) (fl<=? . lc5283) (fl/ . lc5282) (fl- . lc5281) (fl+ . lc5280) (fl* . lc527f) (fixnum->flonum . lc527e) (fxzero? . lc527d) (fxxor . lc527c) (fxrotate-bit-field . lc527b) (fxreverse-bit-field . lc527a) (fxpositive? . lc5279) (fxodd? . lc5278) (fxnot . lc5277) (fxnegative? . lc5276) (fxmod0 . lc5275) (fxmod . lc5274) (fxmin . lc5273) (fxmax . lc5272) (fxlength . lc5271) (fxior . lc5270) (fxif . lc526f) (fxfirst-bit-set . lc526e) (fxeven? . lc526d) (fxdiv0-and-mod0 . lc526c) (fxdiv0 . lc526b) (fxdiv-and-mod . lc526a) (fxdiv . lc5269) (fxcopy-bit-field . lc5268) (fxcopy-bit . lc5267) (fxbit-set? . lc5266) (fxbit-field . lc5265) (fxbit-count . lc5264) (fxarithmetic-shift-right . lc5263) (fxarithmetic-shift-left . lc5262) (fxarithmetic-shift . lc5261) (fxand . lc5260) (fx>? . lc525f) (fx>=? . lc525e) (fx=? . lc525d) (fx<? . lc525c) (fx<=? . lc525b) (fx-/carry . lc525a) (fx- . lc5259) (fx+/carry . lc5258) (fx+ . lc5257) (fx*/carry . lc5256) (fx* . lc5255) (greatest-fixnum . lc5254) (least-fixnum . lc5253) (fixnum-width . lc5252) (fixnum? . lc5251) (bitwise-rotate-bit-field . lc5250) (bitwise-reverse-bit-field . lc524f) (bitwise-length . lc524e) (bitwise-if . lc524d) (bitwise-first-bit-set . lc524c) (bitwise-copy-bit-field . lc524b) (bitwise-copy-bit . lc524a) (bitwise-bit-set? . lc5249) (bitwise-bit-field . lc5248) (bitwise-bit-count . lc5247) (bitwise-xor . lc5246) (bitwise-ior . lc5245) (bitwise-and . lc5244) (bitwise-not . lc5243) (bitwise-arithmetic-shift-right . lc5242) (bitwise-arithmetic-shift-left . lc5241) (bitwise-arithmetic-shift . lc5240) (zero? . lc523f) (vector? . lc523e) (vector-set! . lc523d) (vector-ref . lc523c) (vector-map . lc523b) (vector-length . lc523a) (vector-for-each . lc5239) (vector-fill! . lc5238) (vector->list . lc5237) (vector . lc5236) (values . lc5235) (truncate . lc5234) (tan . lc5233) (symbol? . lc5232) (symbol=? . lc5231) (symbol->string . lc5230) (substring . lc522f) (string? . lc522e) (string>? . lc522d) (string>=? . lc522c) (string=? . lc522b) (string<? . lc522a) (string<=? . lc5229) (string-ref . lc5228) (string-length . lc5227) (string-for-each . lc5226) (string-copy . lc5225) (string-append . lc5224) (string->symbol . lc5223) (string->number . lc5222) (string->list . lc5221) (string . lc5220) (sqrt . lc521f) (sin . lc521e) (round . lc521d) (reverse . lc521c) (real? . lc521b) (real-valued? . lc521a) (real-part . lc5219) (rationalize . lc5218) (rational? . lc5217) (rational-valued? . lc5216) (procedure? . lc5215) (positive? . lc5214) (pair? . lc5213) (odd? . lc5212) (numerator . lc5211) (number? . lc5210) (number->string . lc520f) (null? . lc520e) (not . lc520d) (negative? . lc520c) (nan? . lc520b) (min . lc520a) (max . lc5209) (map . lc5208) (make-vector . lc5207) (make-string . lc5206) (make-rectangular . lc5205) (make-polar . lc5204) (magnitude . lc5203) (log . lc5202) (list? . lc5201) (list-tail . lc5200) (list-ref . lc51ff) (list->vector . lc51fe) (list->string . lc51fd) (list . lc51fc) (length . lc51fb) (lcm . lc51fa) (integer? . lc51f9) (integer-valued? . lc51f8) (integer->char . lc51f7) (infinite? . lc51f6) (inexact? . lc51f5) (inexact . lc51f4) (imag-part . lc51f3) (gcd . lc51f2) (for-each . lc51f1) (floor . lc51f0) (finite? . lc51ef) (expt . lc51ee) (exp . lc51ed) (exact? . lc51ec) (exact-integer-sqrt . lc51eb) (exact . lc51ea) (even? . lc51e9) (error . lc51e8) (eqv? . lc51e7) (equal? . lc51e6) (eq? . lc51e5) (dynamic-wind . lc51e4) (div0-and-mod0 . lc51e3) (mod0 . lc51e2) (div0 . lc51e1) (div-and-mod . lc51e0) (mod . lc51df) (div . lc51de) (denominator . lc51dd) (cos . lc51dc) (cons . lc51db) (complex? . lc51da) (char? . lc51d9) (char>? . lc51d8) (char>=? . lc51d7) (char=? . lc51d6) (char<? . lc51d5) (char<=? . lc51d4) (char->integer . lc51d3) (ceiling . lc51d2) (call-with-values . lc51d1) (call/cc . lc51d0) (call-with-current-continuation . lc51cf) (cddddr . lc51ce) (cdddar . lc51cd) (cddadr . lc51cc) (cddaar . lc51cb) (cdaddr . lc51ca) (cdadar . lc51c9) (cdaadr . lc51c8) (cdaaar . lc51c7) (cadddr . lc51c6) (caddar . lc51c5) (cadadr . lc51c4) (cadaar . lc51c3) (caaddr . lc51c2) (caadar . lc51c1) (caaadr . lc51c0) (caaaar . lc51bf) (cdddr . lc51be) (cddar . lc51bd) (cdadr . lc51bc) (cdaar . lc51bb) (caddr . lc51ba) (cadar . lc51b9) (caadr . lc51b8) (caaar . lc51b7) (cddr . lc51b6) (cdar . lc51b5) (cadr . lc51b4) (caar . lc51b3) (cdr . lc51b2) (car . lc51b1) (boolean? . lc51b0) (boolean=? . lc51af) (atan . lc51ae) (assertion-violation . lc51ad) (asin . lc51ac) (apply . lc51ab) (append . lc51aa) (angle . lc51a9) (acos . lc51a8) (abs . lc51a7) (/ . lc51a6) (* . lc51a5) (- . lc51a4) (+ . lc51a3) (>= . lc51a2) (> . lc51a1) (= . lc51a0) (<= . lc519f) (< . lc519e) (&no-nans . lc519c) (&no-infinities . lc519b) (&i/o-encoding . lc519a) (&i/o-decoding . lc5199) (&i/o-port . lc5198) (&i/o-file-does-not-exist . lc5197) (&i/o-file-already-exists . lc5196) (&i/o-file-is-read-only . lc5195) (&i/o-file-protection . lc5194) (&i/o-filename . lc5193) (&i/o-invalid-position . lc5192) (&i/o-write . lc5191) (&i/o-read . lc5190) (&i/o . lc518f) (&undefined . lc518e) (&syntax . lc518d) (&lexical . lc518c) (&implementation-restriction . lc518b) (&non-continuable . lc518a) (&who . lc5189) (&irritants . lc5188) (&assertion . lc5187) (&violation . lc5186) (&error . lc5185) (&serious . lc5184) (&warning . lc5183) (&message . lc5182) (&condition . lc5181) (define-condition-type . lc5180) (define-enumeration . lc517f) (define-record-type . lc517e) (parent-rtd . lc517d) (nongenerative . lc517c) (opaque . lc517b) (sealed . lc517a) (protocol . lc5179) (parent . lc5178) (immutable . lc5177) (mutable . lc5176) (fields . lc5175) (error-handling-mode . lc5174) (file-options . lc5173) (buffer-mode . lc5172) (eol-style . lc5171) (guard . lc5170) (unsyntax-splicing . lc516d) (unsyntax . lc516c) (unquote-splicing . lc516b) (unquote . lc516a) (_ . lc5169) (else . lc5168) (=> . lc5167) (... . lc5166) (assert . lc5165) (endianness . lc5164) (do . lc5161) (cond . lc5160) (let* . lc515f) (let*-values . lc515e) (let-values . lc515d) (identifier-syntax . lc515c) (with-syntax . lc515b) (quasisyntax . lc515a) (quasiquote . lc5159) (syntax-rules . lc5158) (record-constructor-descriptor . lc5155) (record-type-descriptor . lc5154) (case . lc5153) (unless . lc5151) (when . lc5150) (or . lc514f) (and . lc514e) (if . lc514d) (let . lc514c) (letrec* . lc514b) (letrec . lc514a) (case-lambda . lc5148) (lambda . lc5147) (syntax . lc5146) (syntax-case . lc5145) (quote . lc5144) (letrec-syntax . lc5142) (let-syntax . lc5141) (set! . lc5140) (begin . lc513e) (define-syntax . lc513c) (define . lc513b)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5468 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . lc3175) (quotient . lc5321) (null-environment . lc3173) (remainder . lc5320) (modulo . lc531f) (inexact->exact . lc531e) (force . lc531d) (exact->inexact . lc531c) (make-promise . lc531b) (delay . lc5163)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5469 '(rnrs control) '(6) '() '() '() '((do . lc5161) (unless . lc5151) (when . lc5150) (case-lambda . lc5148)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc546a '(rnrs eval) '(6) '() '() '() '((eval . lc3179) (environment . lc3171)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc546b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . lc5317) (set-car! . lc5316)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc546c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . lc5319) (string-set! . lc5318)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc546d '(rnrs programs) '(6) '() '() '() '((exit . lc531a) (command-line . lc4fd3)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc546e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . lc2ee4) (identifier? . lc319b) (generate-temporaries . lc3187) (free-identifier=? . lc3189) (syntax->datum . lc319f) (datum->syntax . lc319d) (bound-identifier=? . lc318b) (syntax-violation . lc3199) (unsyntax-splicing . lc516d) (unsyntax . lc516c) (_ . lc5169) (... . lc5166) (with-syntax . lc515b) (quasisyntax . lc515a) (syntax . lc5146) (syntax-case . lc5145)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc546f '(rnrs files) '(6) '() '() '() '((delete-file . lc538a) (file-exists? . lc5389) (make-i/o-write-error . lc4dc3) (make-i/o-read-error . lc4dae) (make-i/o-port-error . lc4e64) (make-i/o-invalid-position-error . lc4dda) (make-i/o-filename-error . lc4df5) (make-i/o-file-protection-error . lc4e0e) (make-i/o-file-is-read-only-error . lc4e23) (make-i/o-file-does-not-exist-error . lc4e4d) (make-i/o-file-already-exists-error . lc4e38) (make-i/o-error . lc4d99) (i/o-write-error? . lc4dc5) (i/o-read-error? . lc4db0) (i/o-port-error? . lc4e68) (i/o-invalid-position-error? . lc4dde) (i/o-filename-error? . lc4df9) (i/o-file-protection-error? . lc4e10) (i/o-file-is-read-only-error? . lc4e25) (i/o-file-does-not-exist-error? . lc4e4f) (i/o-file-already-exists-error? . lc4e3a) (i/o-error? . lc4d9b) (i/o-error-position . lc4de0) (i/o-error-port . lc4e6a) (i/o-error-filename . lc4dfb) (&i/o-port . lc5198) (&i/o-file-does-not-exist . lc5197) (&i/o-file-already-exists . lc5196) (&i/o-file-is-read-only . lc5195) (&i/o-file-protection . lc5194) (&i/o-filename . lc5193) (&i/o-invalid-position . lc5192) (&i/o-write . lc5191) (&i/o-read . lc5190) (&i/o . lc518f)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5470 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . lc5388) (vector-sort . lc5387) (list-sort . lc5386)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5471 '(rnrs base) '(6) '() '() '() '((zero? . lc523f) (vector? . lc523e) (vector-set! . lc523d) (vector-ref . lc523c) (vector-map . lc523b) (vector-length . lc523a) (vector-for-each . lc5239) (vector-fill! . lc5238) (vector->list . lc5237) (vector . lc5236) (values . lc5235) (truncate . lc5234) (tan . lc5233) (symbol? . lc5232) (symbol=? . lc5231) (symbol->string . lc5230) (substring . lc522f) (string? . lc522e) (string>? . lc522d) (string>=? . lc522c) (string=? . lc522b) (string<? . lc522a) (string<=? . lc5229) (string-ref . lc5228) (string-length . lc5227) (string-for-each . lc5226) (string-copy . lc5225) (string-append . lc5224) (string->symbol . lc5223) (string->number . lc5222) (string->list . lc5221) (string . lc5220) (sqrt . lc521f) (sin . lc521e) (round . lc521d) (reverse . lc521c) (real? . lc521b) (real-valued? . lc521a) (real-part . lc5219) (rationalize . lc5218) (rational? . lc5217) (rational-valued? . lc5216) (procedure? . lc5215) (positive? . lc5214) (pair? . lc5213) (odd? . lc5212) (numerator . lc5211) (number? . lc5210) (number->string . lc520f) (null? . lc520e) (not . lc520d) (negative? . lc520c) (nan? . lc520b) (min . lc520a) (max . lc5209) (map . lc5208) (make-vector . lc5207) (make-string . lc5206) (make-rectangular . lc5205) (make-polar . lc5204) (magnitude . lc5203) (log . lc5202) (list? . lc5201) (list-tail . lc5200) (list-ref . lc51ff) (list->vector . lc51fe) (list->string . lc51fd) (list . lc51fc) (length . lc51fb) (lcm . lc51fa) (integer? . lc51f9) (integer-valued? . lc51f8) (integer->char . lc51f7) (infinite? . lc51f6) (inexact? . lc51f5) (inexact . lc51f4) (imag-part . lc51f3) (gcd . lc51f2) (for-each . lc51f1) (floor . lc51f0) (finite? . lc51ef) (expt . lc51ee) (exp . lc51ed) (exact? . lc51ec) (exact-integer-sqrt . lc51eb) (exact . lc51ea) (even? . lc51e9) (error . lc51e8) (eqv? . lc51e7) (equal? . lc51e6) (eq? . lc51e5) (dynamic-wind . lc51e4) (div0-and-mod0 . lc51e3) (mod0 . lc51e2) (div0 . lc51e1) (div-and-mod . lc51e0) (mod . lc51df) (div . lc51de) (denominator . lc51dd) (cos . lc51dc) (cons . lc51db) (complex? . lc51da) (char? . lc51d9) (char>? . lc51d8) (char>=? . lc51d7) (char=? . lc51d6) (char<? . lc51d5) (char<=? . lc51d4) (char->integer . lc51d3) (ceiling . lc51d2) (call-with-values . lc51d1) (call/cc . lc51d0) (call-with-current-continuation . lc51cf) (cddddr . lc51ce) (cdddar . lc51cd) (cddadr . lc51cc) (cddaar . lc51cb) (cdaddr . lc51ca) (cdadar . lc51c9) (cdaadr . lc51c8) (cdaaar . lc51c7) (cadddr . lc51c6) (caddar . lc51c5) (cadadr . lc51c4) (cadaar . lc51c3) (caaddr . lc51c2) (caadar . lc51c1) (caaadr . lc51c0) (caaaar . lc51bf) (cdddr . lc51be) (cddar . lc51bd) (cdadr . lc51bc) (cdaar . lc51bb) (caddr . lc51ba) (cadar . lc51b9) (caadr . lc51b8) (caaar . lc51b7) (cddr . lc51b6) (cdar . lc51b5) (cadr . lc51b4) (caar . lc51b3) (cdr . lc51b2) (car . lc51b1) (boolean? . lc51b0) (boolean=? . lc51af) (atan . lc51ae) (assertion-violation . lc51ad) (asin . lc51ac) (apply . lc51ab) (append . lc51aa) (angle . lc51a9) (acos . lc51a8) (abs . lc51a7) (/ . lc51a6) (* . lc51a5) (- . lc51a4) (+ . lc51a3) (>= . lc51a2) (> . lc51a1) (= . lc51a0) (<= . lc519f) (< . lc519e) (unquote-splicing . lc516b) (unquote . lc516a) (_ . lc5169) (else . lc5168) (=> . lc5167) (... . lc5166) (assert . lc5165) (cond . lc5160) (let* . lc515f) (let*-values . lc515e) (let-values . lc515d) (identifier-syntax . lc515c) (quasiquote . lc5159) (syntax-rules . lc5158) (case . lc5153) (or . lc514f) (and . lc514e) (if . lc514d) (let . lc514c) (letrec* . lc514b) (letrec . lc514a) (lambda . lc5147) (quote . lc5144) (letrec-syntax . lc5142) (let-syntax . lc5141) (set! . lc5140) (begin . lc513e) (define-syntax . lc513c) (define . lc513b)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5472 '(rnrs lists) '(6) '() '() '() '((remove . lc5315) (remv . lc5314) (remp . lc5313) (remq . lc5312) (partition . lc5311) (memv . lc5310) (memq . lc530f) (memp . lc530e) (member . lc530d) (exists . lc530c) (for-all . lc530b) (fold-right . lc530a) (fold-left . lc5309) (find . lc5308) (filter . lc5307) (cons* . lc5306) (assv . lc5305) (assq . lc5304) (assp . lc5303) (assoc . lc5302)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5473 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . lc5370) (call-with-input-file . lc536f) (write-char . lc536e) (write . lc536d) (with-output-to-file . lc536c) (with-input-from-file . lc536b) (read-char . lc536a) (read . lc5369) (peek-char . lc5368) (open-output-file . lc5367) (open-input-file . lc5366) (newline . lc5365) (display . lc5364) (close-output-port . lc5363) (close-input-port . lc5362) (eof-object? . lc5361) (eof-object . lc5360) (current-error-port . lc535f) (current-output-port . lc535e) (current-input-port . lc535d) (output-port? . lc535c) (input-port? . lc535b) (make-i/o-write-error . lc4dc3) (make-i/o-read-error . lc4dae) (make-i/o-port-error . lc4e64) (make-i/o-invalid-position-error . lc4dda) (make-i/o-filename-error . lc4df5) (make-i/o-file-protection-error . lc4e0e) (make-i/o-file-is-read-only-error . lc4e23) (make-i/o-file-does-not-exist-error . lc4e4d) (make-i/o-file-already-exists-error . lc4e38) (make-i/o-error . lc4d99) (i/o-write-error? . lc4dc5) (i/o-read-error? . lc4db0) (i/o-port-error? . lc4e68) (i/o-invalid-position-error? . lc4dde) (i/o-filename-error? . lc4df9) (i/o-file-protection-error? . lc4e10) (i/o-file-is-read-only-error? . lc4e25) (i/o-file-does-not-exist-error? . lc4e4f) (i/o-file-already-exists-error? . lc4e3a) (i/o-error? . lc4d9b) (i/o-error-position . lc4de0) (i/o-error-port . lc4e6a) (i/o-error-filename . lc4dfb) (&i/o-port . lc5198) (&i/o-file-does-not-exist . lc5197) (&i/o-file-already-exists . lc5196) (&i/o-file-is-read-only . lc5195) (&i/o-file-protection . lc5194) (&i/o-filename . lc5193) (&i/o-invalid-position . lc5192) (&i/o-write . lc5191) (&i/o-read . lc5190) (&i/o . lc518f)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5474 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . lc5331) (utf32->string . lc52e6) (utf16->string . lc52e5) (utf8->string . lc52e4) (uint-list->bytevector . lc52e3) (u8-list->bytevector . lc52e2) (string->utf8 . lc52e1) (string->utf32 . lc52e0) (string->utf16 . lc52df) (sint-list->bytevector . lc52de) (native-endianness . lc52dd) (bytevector? . lc52dc) (bytevector=? . lc52db) (bytevector-uint-set! . lc52da) (bytevector-uint-ref . lc52d9) (bytevector-u8-set! . lc52d8) (bytevector-u8-ref . lc52d7) (bytevector-u64-set! . lc52d6) (bytevector-u64-ref . lc52d5) (bytevector-u64-native-set! . lc52d4) (bytevector-u64-native-ref . lc52d3) (bytevector-u32-set! . lc52d2) (bytevector-u32-ref . lc52d1) (bytevector-u32-native-set! . lc52d0) (bytevector-u32-native-ref . lc52cf) (bytevector-u16-set! . lc52ce) (bytevector-u16-ref . lc52cd) (bytevector-u16-native-set! . lc52cc) (bytevector-u16-native-ref . lc52cb) (bytevector-sint-set! . lc52ca) (bytevector-sint-ref . lc52c9) (bytevector-s8-set! . lc52c8) (bytevector-s8-ref . lc52c7) (bytevector-s64-set! . lc52c6) (bytevector-s64-ref . lc52c5) (bytevector-s64-native-set! . lc52c4) (bytevector-s64-native-ref . lc52c3) (bytevector-s32-set! . lc52c2) (bytevector-s32-ref . lc52c1) (bytevector-s32-native-set! . lc52c0) (bytevector-s32-native-ref . lc52bf) (bytevector-s16-set! . lc52be) (bytevector-s16-ref . lc52bd) (bytevector-s16-native-set! . lc52bc) (bytevector-s16-native-ref . lc52bb) (bytevector-length . lc52ba) (bytevector-ieee-single-ref . lc52b9) (bytevector-ieee-single-set! . lc52b8) (bytevector-ieee-single-native-set! . lc52b7) (bytevector-ieee-single-native-ref . lc52b6) (bytevector-ieee-double-set! . lc52b5) (bytevector-ieee-double-ref . lc52b4) (bytevector-ieee-double-native-set! . lc52b3) (bytevector-ieee-double-native-ref . lc52b2) (bytevector-fill! . lc52b1) (bytevector-copy! . lc52b0) (bytevector-copy . lc52af) (bytevector->uint-list . lc52ae) (bytevector->u8-list . lc52ad) (bytevector->sint-list . lc52ac) (endianness . lc5164)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5475 '(rnrs unicode) '(6) '() '() '() '((string-upcase . lc53b8) (string-titlecase . lc53b7) (string-normalize-nfkd . lc53b6) (string-normalize-nfkc . lc53b5) (string-normalize-nfd . lc53b4) (string-normalize-nfc . lc53b3) (string-foldcase . lc53b2) (string-downcase . lc53b1) (string-ci>? . lc53b0) (string-ci>=? . lc53af) (string-ci=? . lc53ae) (string-ci<? . lc53ad) (string-ci<=? . lc53ac) (char-whitespace? . lc53ab) (char-upper-case? . lc53aa) (char-title-case? . lc53a9) (char-numeric? . lc53a8) (char-lower-case? . lc53a7) (char-general-category . lc53a6) (char-upcase . lc53a5) (char-titlecase . lc53a4) (char-foldcase . lc53a3) (char-downcase . lc53a2) (char-ci>? . lc53a1) (char-ci>=? . lc53a0) (char-ci=? . lc539f) (char-ci<? . lc539e) (char-ci<=? . lc539d) (char-alphabetic? . lc539c)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5476 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . lc52fb) (raise-continuable . lc52fa) (raise . lc52f9) (guard . lc5170) (else . lc5168) (=> . lc5167)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5477 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . lc5250) (bitwise-reverse-bit-field . lc524f) (bitwise-length . lc524e) (bitwise-if . lc524d) (bitwise-first-bit-set . lc524c) (bitwise-copy-bit-field . lc524b) (bitwise-copy-bit . lc524a) (bitwise-bit-set? . lc5249) (bitwise-bit-field . lc5248) (bitwise-bit-count . lc5247) (bitwise-xor . lc5246) (bitwise-ior . lc5245) (bitwise-and . lc5244) (bitwise-not . lc5243) (bitwise-arithmetic-shift-right . lc5242) (bitwise-arithmetic-shift-left . lc5241) (bitwise-arithmetic-shift . lc5240)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5478 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . lc527d) (fxxor . lc527c) (fxrotate-bit-field . lc527b) (fxreverse-bit-field . lc527a) (fxpositive? . lc5279) (fxodd? . lc5278) (fxnot . lc5277) (fxnegative? . lc5276) (fxmod0 . lc5275) (fxmod . lc5274) (fxmin . lc5273) (fxmax . lc5272) (fxlength . lc5271) (fxior . lc5270) (fxif . lc526f) (fxfirst-bit-set . lc526e) (fxeven? . lc526d) (fxdiv0-and-mod0 . lc526c) (fxdiv0 . lc526b) (fxdiv-and-mod . lc526a) (fxdiv . lc5269) (fxcopy-bit-field . lc5268) (fxcopy-bit . lc5267) (fxbit-set? . lc5266) (fxbit-field . lc5265) (fxbit-count . lc5264) (fxarithmetic-shift-right . lc5263) (fxarithmetic-shift-left . lc5262) (fxarithmetic-shift . lc5261) (fxand . lc5260) (fx>? . lc525f) (fx>=? . lc525e) (fx=? . lc525d) (fx<? . lc525c) (fx<=? . lc525b) (fx-/carry . lc525a) (fx- . lc5259) (fx+/carry . lc5258) (fx+ . lc5257) (fx*/carry . lc5256) (fx* . lc5255) (greatest-fixnum . lc5254) (least-fixnum . lc5253) (fixnum-width . lc5252) (fixnum? . lc5251)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5479 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . lc4ec4) (no-infinities-violation? . lc4eaf) (make-no-nans-violation . lc4ec2) (make-no-infinities-violation . lc4ead) (real->flonum . lc52ab) (flzero? . lc52aa) (fltruncate . lc52a9) (fltan . lc52a8) (flsqrt . lc52a7) (flsin . lc52a6) (flround . lc52a5) (flpositive? . lc52a4) (flonum? . lc52a3) (flodd? . lc52a2) (flnumerator . lc52a1) (flnegative? . lc52a0) (flnan? . lc529f) (flmod0 . lc529e) (flmod . lc529d) (flmin . lc529c) (flmax . lc529b) (fllog . lc529a) (flinteger? . lc5299) (flinfinite? . lc5298) (flfloor . lc5297) (flfinite? . lc5296) (flexpt . lc5295) (flexp . lc5294) (fleven? . lc5293) (fldiv0-and-mod0 . lc5292) (fldiv0 . lc5291) (fldiv-and-mod . lc5290) (fldiv . lc528f) (fldenominator . lc528e) (flcos . lc528d) (flceiling . lc528c) (flatan . lc528b) (flasin . lc528a) (flacos . lc5289) (flabs . lc5288) (fl>? . lc5287) (fl>=? . lc5286) (fl=? . lc5285) (fl<? . lc5284) (fl<=? . lc5283) (fl/ . lc5282) (fl- . lc5281) (fl+ . lc5280) (fl* . lc527f) (fixnum->flonum . lc527e) (&no-nans . lc519c) (&no-infinities . lc519b)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc547a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . lc5385) (string-ci-hash . lc5384) (string-hash . lc5383) (equal-hash . lc5382) (hashtable-equivalence-function . lc5381) (make-hashtable . lc5380) (hashtable-hash-function . lc537f) (make-eqv-hashtable . lc537e) (make-eq-hashtable . lc537d) (hashtable? . lc537c) (hashtable-update! . lc537b) (hashtable-size . lc537a) (hashtable-set! . lc5379) (hashtable-ref . lc5378) (hashtable-mutable? . lc5377) (hashtable-keys . lc5376) (hashtable-entries . lc5375) (hashtable-delete! . lc5374) (hashtable-copy . lc5373) (hashtable-contains? . lc5372) (hashtable-clear! . lc5371)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc547b '(rnrs io ports) '(6) '() '() '() '((eof-object? . lc5361) (eof-object . lc5360) (current-error-port . lc535f) (current-output-port . lc535e) (current-input-port . lc535d) (output-port? . lc535c) (input-port? . lc535b) (utf-8-codec . lc535a) (utf-16-codec . lc5359) (transcoder-error-handling-mode . lc5358) (transcoder-eol-style . lc5357) (transcoder-codec . lc5356) (transcoded-port . lc5355) (textual-port? . lc5354) (string->bytevector . lc5353) (standard-output-port . lc5352) (standard-input-port . lc5351) (standard-error-port . lc5350) (set-port-position! . lc534f) (put-u8 . lc534e) (put-string . lc534d) (put-datum . lc534c) (put-char . lc534b) (put-bytevector . lc534a) (port? . lc5349) (port-transcoder . lc5348) (port-position . lc5347) (port-has-set-port-position!? . lc5346) (port-has-port-position? . lc5345) (port-eof? . lc5344) (output-port-buffer-mode . lc5343) (open-string-output-port . lc5342) (open-string-input-port . lc5341) (open-file-output-port . lc5340) (open-file-input/output-port . lc533f) (open-file-input-port . lc533e) (open-bytevector-output-port . lc533d) (open-bytevector-input-port . lc533c) (native-transcoder . lc533b) (native-eol-style . lc533a) (make-transcoder . lc5339) (latin-1-codec . lc5338) (make-i/o-write-error . lc4dc3) (make-i/o-read-error . lc4dae) (make-i/o-port-error . lc4e64) (make-i/o-invalid-position-error . lc4dda) (make-i/o-filename-error . lc4df5) (make-i/o-file-protection-error . lc4e0e) (make-i/o-file-is-read-only-error . lc4e23) (make-i/o-file-does-not-exist-error . lc4e4d) (make-i/o-file-already-exists-error . lc4e38) (make-i/o-error . lc4d99) (make-i/o-encoding-error . lc4e94) (make-i/o-decoding-error . lc4e7d) (make-custom-textual-output-port . lc5337) (make-custom-textual-input/output-port . lc5336) (make-custom-textual-input-port . lc5335) (make-custom-binary-output-port . lc5334) (make-custom-binary-input/output-port . lc5333) (make-custom-binary-input-port . lc5332) (lookahead-u8 . lc5330) (lookahead-char . lc532f) (i/o-write-error? . lc4dc5) (i/o-read-error? . lc4db0) (i/o-port-error? . lc4e68) (i/o-invalid-position-error? . lc4dde) (i/o-filename-error? . lc4df9) (i/o-file-protection-error? . lc4e10) (i/o-file-is-read-only-error? . lc4e25) (i/o-file-does-not-exist-error? . lc4e4f) (i/o-file-already-exists-error? . lc4e3a) (i/o-error? . lc4d9b) (i/o-error-position . lc4de0) (i/o-error-port . lc4e6a) (i/o-error-filename . lc4dfb) (i/o-encoding-error? . lc4e98) (i/o-encoding-error-char . lc4e9a) (i/o-decoding-error? . lc4e7f) (get-u8 . lc532e) (get-string-n! . lc532d) (get-string-n . lc532c) (get-string-all . lc532b) (get-line . lc532a) (get-datum . lc5329) (get-char . lc5328) (get-bytevector-some . lc5327) (get-bytevector-n! . lc5326) (get-bytevector-n . lc5325) (get-bytevector-all . lc5324) (flush-output-port . lc5323) (close-port . lc5322) (call-with-string-output-port . lc5301) (call-with-port . lc5300) (call-with-bytevector-output-port . lc52ff) (bytevector->string . lc52fe) (buffer-mode? . lc52fd) (binary-port? . lc52fc) (&i/o-encoding . lc519a) (&i/o-decoding . lc5199) (&i/o-port . lc5198) (&i/o-file-does-not-exist . lc5197) (&i/o-file-already-exists . lc5196) (&i/o-file-is-read-only . lc5195) (&i/o-file-protection . lc5194) (&i/o-filename . lc5193) (&i/o-invalid-position . lc5192) (&i/o-write . lc5191) (&i/o-read . lc5190) (&i/o . lc518f) (error-handling-mode . lc5174) (file-options . lc5173) (buffer-mode . lc5172) (eol-style . lc5171)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc547c '(rnrs enums) '(6) '() '() '() '((make-enumeration . lc52f8) (enum-set=? . lc52f7) (enum-set-universe . lc52f6) (enum-set-union . lc52f5) (enum-set-subset? . lc52f4) (enum-set-projection . lc52f3) (enum-set-member? . lc52f2) (enum-set-intersection . lc52f1) (enum-set-indexer . lc52f0) (enum-set-difference . lc52ef) (enum-set-constructor . lc52ee) (enum-set-complement . lc52ed) (enum-set->list . lc52ec) (define-enumeration . lc517f)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc547d '(rnrs conditions) '(6) '() '() '() '((who-condition? . lc4d0f) (warning? . lc4c87) (violation? . lc4cc6) (undefined-violation? . lc4d86) (syntax-violation? . lc4d6d) (syntax-violation-subform . lc4d71) (syntax-violation-form . lc4d6f) (syntax-violation . lc3199) (simple-conditions . lc52eb) (serious-condition? . lc4c9c) (non-continuable-violation? . lc4d26) (message-condition? . lc4c70) (make-who-condition . lc4d0b) (make-warning . lc4c85) (make-violation . lc4cc4) (make-undefined-violation . lc4d84) (make-syntax-violation . lc4d67) (make-serious-condition . lc4c9a) (make-non-continuable-violation . lc4d24) (make-message-condition . lc4c6c) (make-lexical-violation . lc4d4e) (make-irritants-condition . lc4cf0) (make-implementation-restriction-violation . lc4d39) (make-error . lc4caf) (make-assertion-violation . lc4cd9) (lexical-violation? . lc4d50) (irritants-condition? . lc4cf4) (implementation-restriction-violation? . lc4d3b) (error? . lc4cb1) (condition-who . lc4d11) (condition-predicate . lc52ea) (condition-message . lc4c72) (condition-irritants . lc4cf6) (condition-accessor . lc52e9) (condition . lc52e8) (assertion-violation? . lc4cdb) (condition? . lc52e7) (&undefined . lc518e) (&syntax . lc518d) (&lexical . lc518c) (&implementation-restriction . lc518b) (&non-continuable . lc518a) (&who . lc5189) (&irritants . lc5188) (&assertion . lc5187) (&violation . lc5186) (&error . lc5185) (&serious . lc5184) (&warning . lc5183) (&message . lc5182) (&condition . lc5181) (define-condition-type . lc5180)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc547e '(rnrs records inspection) '(6) '() '() '() '((record? . lc5394) (record-type-uid . lc5393) (record-type-sealed? . lc5392) (record-type-parent . lc5391) (record-type-opaque? . lc5390) (record-type-name . lc538f) (record-type-generative? . lc538e) (record-type-field-names . lc538d) (record-rtd . lc538c) (record-field-mutable? . lc538b)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc547f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . lc539b) (record-predicate . lc539a) (record-mutator . lc5399) (record-constructor . lc5398) (record-accessor . lc5397) (make-record-type-descriptor . lc5396) (make-record-constructor-descriptor . lc5395)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5480 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . lc517e) (parent-rtd . lc517d) (nongenerative . lc517c) (opaque . lc517b) (sealed . lc517a) (protocol . lc5179) (parent . lc5178) (immutable . lc5177) (mutable . lc5176) (fields . lc5175) (record-constructor-descriptor . lc5155) (record-type-descriptor . lc5154)) '() values values '#f '#f '#t '#f) (lc2ccd@lc2b19@install-library 'lc5481 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . lc4ec8) (&no-nans-rtd . lc4ec6) (&no-infinities-rcd . lc4eb3) (&no-infinities-rtd . lc4eb1) (&i/o-encoding-rcd . lc4e9e) (&i/o-encoding-rtd . lc4e9c) (&i/o-decoding-rcd . lc4e83) (&i/o-decoding-rtd . lc4e81) (&i/o-port-rcd . lc4e6e) (&i/o-port-rtd . lc4e6c) (&i/o-file-does-not-exist-rcd . lc4e53) (&i/o-file-does-not-exist-rtd . lc4e51) (&i/o-file-already-exists-rcd . lc4e3e) (&i/o-file-already-exists-rtd . lc4e3c) (&i/o-file-is-read-only-rcd . lc4e29) (&i/o-file-is-read-only-rtd . lc4e27) (&i/o-file-protection-rcd . lc4e14) (&i/o-file-protection-rtd . lc4e12) (&i/o-filename-rcd . lc4dff) (&i/o-filename-rtd . lc4dfd) (&i/o-invalid-position-rcd . lc4de4) (&i/o-invalid-position-rtd . lc4de2) (&i/o-write-rcd . lc4dc9) (&i/o-write-rtd . lc4dc7) (&i/o-read-rcd . lc4db4) (&i/o-read-rtd . lc4db2) (&i/o-rcd . lc4d9f) (&i/o-rtd . lc4d9d) (&undefined-rcd . lc4d8a) (&undefined-rtd . lc4d88) (&syntax-rcd . lc4d75) (&syntax-rtd . lc4d73) (&lexical-rcd . lc4d54) (&lexical-rtd . lc4d52) (&implementation-restriction-rcd . lc4d3f) (&implementation-restriction-rtd . lc4d3d) (&non-continuable-rcd . lc4d2a) (&non-continuable-rtd . lc4d28) (&who-rcd . lc4d15) (&who-rtd . lc4d13) (&irritants-rcd . lc4cfa) (&irritants-rtd . lc4cf8) (&assertion-rcd . lc4cdf) (&assertion-rtd . lc4cdd) (&violation-rcd . lc4cca) (&violation-rtd . lc4cc8) (&error-rcd . lc4cb5) (&error-rtd . lc4cb3) (&serious-rcd . lc4ca0) (&serious-rtd . lc4c9e) (&warning-rcd . lc4c8b) (&warning-rtd . lc4c89) (&message-rcd . lc4c76) (&message-rtd . lc4c74) (&condition-rcd . lc4c17) (&condition-rtd . lc4c15) (syntax-error . lc3195) (syntax-dispatch . lc30b9) (pretty-print . lc5461) (eval-core . lc5460) (set-symbol-value! . lc545f) (symbol-value . lc545e) (gensym . lc545d) (void . lc545c) (load . lc4fd9) (interaction-environment . lc31a7) (char-ready? . lc545b) (regexp? . lc545a) (read-line . lc5459) (gensym-prefix-set! . lc5458) (ungensym . lc5457) (alist->eq-hash-table . lc5456) (assoc-ref . lc5455) (print . lc5454) (format . lc5453) (host-os . lc5452) (library-path . lc2af8) (standard-library-path . lc5451) (file-newer? . lc5450) (stat-mtime . lc544f) (write-to-file . lc544e) (file->list . lc544d) (file->string . lc544c) (digit->integer . lc544b) (call-with-string-input-port . lc544a) (call-with-string-io . lc5449) (string-split . lc5448) (bytevector-for-each . lc5447) (string->regexp . lc5446) (rxmatch . lc5445) (regexp-replace-all . lc5444) (hashtable-for-each . lc5443) (mosh-cache-dir . lc28e2) (call-process . lc5442) (local-tz-offset . lc5441) (microseconds . lc5440) (directory-list . lc543f) (set-current-directory! . lc543e) (expand-path . lc543d) (current-directory . lc543c) (%spawn . lc543b) (%waitpid . lc543a) (simple-struct-name . lc5439) (simple-struct-set! . lc5438) (simple-struct-ref . lc5437) (make-simple-struct . lc5436) (simple-struct? . lc5435) (pointer-ref-c-int64 . lc5434) (pointer-ref-c-int32 . lc5433) (pointer-ref-c-int16 . lc5432) (pointer-ref-c-int8 . lc5431) (pointer-ref-c-uint64 . lc5430) (pointer-ref-c-uint32 . lc542f) (pointer-ref-c-uint16 . lc542e) (pointer-ref-c-uint8 . lc542d) (pointer-set-c-uint64! . lc542c) (pointer-set-c-uint32! . lc542b) (pointer-set-c-uint16! . lc542a) (pointer-set-c-uint8! . lc5429) (pointer-set-c-int64! . lc5428) (pointer-set-c-int32! . lc5427) (pointer-set-c-int16! . lc5426) (pointer-set-c-int8! . lc5425) (pointer-set-c-pointer! . lc5424) (pointer-set-c-double! . lc5423) (pointer-set-c-float! . lc5422) (pointer-set-c-long-long! . lc5421) (pointer-set-c-long! . lc5420) (pointer-set-c-int! . lc541f) (pointer-set-c-short! . lc541e) (pointer-set-c-char! . lc541d) (pointer-ref-c-pointer . lc541c) (pointer-ref-c-double . lc541b) (pointer-ref-c-float . lc541a) (pointer-ref-c-unsigned-long-long . lc5419) (pointer-ref-c-signed-long-long . lc5418) (pointer-ref-c-unsigned-long . lc5417) (pointer-ref-c-signed-long . lc5416) (pointer-ref-c-unsigned-int . lc5415) (pointer-ref-c-signed-int . lc5414) (pointer-ref-c-unsigned-short . lc5413) (pointer-ref-c-signed-short . lc5412) (pointer-ref-c-unsigned-char . lc5411) (pointer-ref-c-signed-char . lc5410) (pointer->integer . lc540f) (integer->pointer . lc540e) (pointer? . lc540d) (shared-errno . lc540c) (%ffi-free-c-callback-trampoline . lc540b) (%ffi-make-c-callback-trampoline . lc540a) (%ffi-free . lc5409) (%ffi-malloc . lc5408) (%ffi-supported? . lc5407) (%ffi-pointer->string . lc5406) (%ffi-call . lc5405) (%ffi-lookup . lc5404) (%ffi-open . lc5403) (null-terminated-utf8->string . lc5402) (null-terminated-bytevector->string . lc5401) (%fork . lc5400) (%pipe . lc53ff) (p . lc53fe) (open-output-string . lc53fd) (get-output-string . lc53fc) (file-stat-ctime . lc53fb) (file-stat-atime . lc53fa) (file-stat-mtime . lc53f9) (file-size-in-bytes . lc53f8) (file-writable? . lc53f7) (file-executable? . lc53f6) (file-readable? . lc53f5) (file-regular? . lc53f4) (file-symbolic-link? . lc53f3) (file-directory? . lc53f2) (create-symbolic-link . lc53f1) (rename-file . lc53f0) (delete-directory . lc53ef) (create-directory . lc53ee) (create-mosh-cache-dir . lc53ed) (get-environment-variables . lc53ec) (current-exception-handler . lc53eb) (get-environment-variable . lc53ea) (join-wraps . lc53e9) (id->real-label . lc53e8) (same-marks? . lc53e7) (same-marks*? . lc53e6) (get-timeofday . lc53e5) (get-command-line . lc53e4) (sys-display . lc53e3) (whereis . lc53e2) (register . lc53e1) (vm-join! . lc53e0) (vm-set-value! . lc53df) (vm? . lc53de) (main-vm? . lc53dd) (vm-eval . lc53dc) (vm-self . lc53db) (vm-start! . lc53da) (make-vm . lc53d9) (mutex-try-lock! . lc53d8) (mutex-unlock! . lc53d7) (mutex-lock! . lc53d6) (mutex? . lc53d5) (make-mutex . lc53d4) (condition-variable-notify-all! . lc53d3) (condition-variable-notify! . lc53d2) (condition-variable-wait! . lc53d1) (make-condition-variable . lc53d0) (mosh-executable-path . lc53cf) (make-file-options . lc53ce) (source-info . lc53cd) (make-compiler-instruction . lc53cc) (make-instruction . lc53cb) (set-source-info! . lc53ca) (bignum? . lc53c9) (fast-equal? . lc53c8) (fasl-read . lc53c7) (fasl-write . lc53c6) (time-usage . lc53c5) (os-constant . lc53c4) (disasm . lc53c3) (make-parameter . lc28e0) (socket-port . lc53c2) (socket-shutdown . lc53c1) (socket-close . lc53c0) (socket-send . lc53bf) (socket-recv! . lc53be) (socket-recv . lc53bd) (make-server-socket . lc53bc) (make-client-socket . lc53bb) (socket-accept . lc53ba) (socket? . lc53b9) (string-upcase . lc53b8) (string-titlecase . lc53b7) (string-normalize-nfkd . lc53b6) (string-normalize-nfkc . lc53b5) (string-normalize-nfd . lc53b4) (string-normalize-nfc . lc53b3) (string-foldcase . lc53b2) (string-downcase . lc53b1) (string-ci>? . lc53b0) (string-ci>=? . lc53af) (string-ci=? . lc53ae) (string-ci<? . lc53ad) (string-ci<=? . lc53ac) (char-whitespace? . lc53ab) (char-upper-case? . lc53aa) (char-title-case? . lc53a9) (char-numeric? . lc53a8) (char-lower-case? . lc53a7) (char-general-category . lc53a6) (char-upcase . lc53a5) (char-titlecase . lc53a4) (char-foldcase . lc53a3) (char-downcase . lc53a2) (char-ci>? . lc53a1) (char-ci>=? . lc53a0) (char-ci=? . lc539f) (char-ci<? . lc539e) (char-ci<=? . lc539d) (char-alphabetic? . lc539c) (make-variable-transformer . lc2ee4) (identifier? . lc319b) (generate-temporaries . lc3187) (free-identifier=? . lc3189) (syntax->datum . lc319f) (datum->syntax . lc319d) (bound-identifier=? . lc318b) (record-type-descriptor? . lc539b) (record-predicate . lc539a) (record-mutator . lc5399) (record-constructor . lc5398) (record-accessor . lc5397) (make-record-type-descriptor . lc5396) (make-record-constructor-descriptor . lc5395) (record? . lc5394) (record-type-uid . lc5393) (record-type-sealed? . lc5392) (record-type-parent . lc5391) (record-type-opaque? . lc5390) (record-type-name . lc538f) (record-type-generative? . lc538e) (record-type-field-names . lc538d) (record-rtd . lc538c) (record-field-mutable? . lc538b) (delete-file . lc538a) (file-exists? . lc5389) (vector-sort! . lc5388) (vector-sort . lc5387) (list-sort . lc5386) (symbol-hash . lc5385) (string-ci-hash . lc5384) (string-hash . lc5383) (equal-hash . lc5382) (hashtable-equivalence-function . lc5381) (make-hashtable . lc5380) (hashtable-hash-function . lc537f) (make-eqv-hashtable . lc537e) (make-eq-hashtable . lc537d) (hashtable? . lc537c) (hashtable-update! . lc537b) (hashtable-size . lc537a) (hashtable-set! . lc5379) (hashtable-ref . lc5378) (hashtable-mutable? . lc5377) (hashtable-keys . lc5376) (hashtable-entries . lc5375) (hashtable-delete! . lc5374) (hashtable-copy . lc5373) (hashtable-contains? . lc5372) (hashtable-clear! . lc5371) (call-with-output-file . lc5370) (call-with-input-file . lc536f) (write-char . lc536e) (write . lc536d) (with-output-to-file . lc536c) (with-input-from-file . lc536b) (read-char . lc536a) (read . lc5369) (peek-char . lc5368) (open-output-file . lc5367) (open-input-file . lc5366) (newline . lc5365) (display . lc5364) (close-output-port . lc5363) (close-input-port . lc5362) (eof-object? . lc5361) (eof-object . lc5360) (current-error-port . lc535f) (current-output-port . lc535e) (current-input-port . lc535d) (output-port? . lc535c) (input-port? . lc535b) (utf-8-codec . lc535a) (utf-16-codec . lc5359) (transcoder-error-handling-mode . lc5358) (transcoder-eol-style . lc5357) (transcoder-codec . lc5356) (transcoded-port . lc5355) (textual-port? . lc5354) (string->bytevector . lc5353) (standard-output-port . lc5352) (standard-input-port . lc5351) (standard-error-port . lc5350) (set-port-position! . lc534f) (put-u8 . lc534e) (put-string . lc534d) (put-datum . lc534c) (put-char . lc534b) (put-bytevector . lc534a) (port? . lc5349) (port-transcoder . lc5348) (port-position . lc5347) (port-has-set-port-position!? . lc5346) (port-has-port-position? . lc5345) (port-eof? . lc5344) (output-port-buffer-mode . lc5343) (open-string-output-port . lc5342) (open-string-input-port . lc5341) (open-file-output-port . lc5340) (open-file-input/output-port . lc533f) (open-file-input-port . lc533e) (open-bytevector-output-port . lc533d) (open-bytevector-input-port . lc533c) (native-transcoder . lc533b) (native-eol-style . lc533a) (make-transcoder . lc5339) (latin-1-codec . lc5338) (make-i/o-write-error . lc4dc3) (make-i/o-read-error . lc4dae) (make-i/o-port-error . lc4e64) (make-i/o-invalid-position-error . lc4dda) (make-i/o-filename-error . lc4df5) (make-i/o-file-protection-error . lc4e0e) (make-i/o-file-is-read-only-error . lc4e23) (make-i/o-file-does-not-exist-error . lc4e4d) (make-i/o-file-already-exists-error . lc4e38) (make-i/o-error . lc4d99) (make-i/o-encoding-error . lc4e94) (make-i/o-decoding-error . lc4e7d) (make-custom-textual-output-port . lc5337) (make-custom-textual-input/output-port . lc5336) (make-custom-textual-input-port . lc5335) (make-custom-binary-output-port . lc5334) (make-custom-binary-input/output-port . lc5333) (make-custom-binary-input-port . lc5332) (make-bytevector . lc5331) (lookahead-u8 . lc5330) (lookahead-char . lc532f) (i/o-write-error? . lc4dc5) (i/o-read-error? . lc4db0) (i/o-port-error? . lc4e68) (i/o-invalid-position-error? . lc4dde) (i/o-filename-error? . lc4df9) (i/o-file-protection-error? . lc4e10) (i/o-file-is-read-only-error? . lc4e25) (i/o-file-does-not-exist-error? . lc4e4f) (i/o-file-already-exists-error? . lc4e3a) (i/o-error? . lc4d9b) (i/o-error-position . lc4de0) (i/o-error-port . lc4e6a) (i/o-error-filename . lc4dfb) (i/o-encoding-error? . lc4e98) (i/o-encoding-error-char . lc4e9a) (i/o-decoding-error? . lc4e7f) (get-u8 . lc532e) (get-string-n! . lc532d) (get-string-n . lc532c) (get-string-all . lc532b) (get-line . lc532a) (get-datum . lc5329) (get-char . lc5328) (get-bytevector-some . lc5327) (get-bytevector-n! . lc5326) (get-bytevector-n . lc5325) (get-bytevector-all . lc5324) (flush-output-port . lc5323) (close-port . lc5322) (scheme-report-environment . lc3175) (quotient . lc5321) (null-environment . lc3173) (remainder . lc5320) (modulo . lc531f) (inexact->exact . lc531e) (force . lc531d) (exact->inexact . lc531c) (make-promise . lc531b) (exit . lc531a) (command-line . lc4fd3) (string-fill! . lc5319) (string-set! . lc5318) (set-cdr! . lc5317) (set-car! . lc5316) (remove . lc5315) (remv . lc5314) (remp . lc5313) (remq . lc5312) (partition . lc5311) (memv . lc5310) (memq . lc530f) (memp . lc530e) (member . lc530d) (exists . lc530c) (for-all . lc530b) (fold-right . lc530a) (fold-left . lc5309) (find . lc5308) (filter . lc5307) (cons* . lc5306) (assv . lc5305) (assq . lc5304) (assp . lc5303) (assoc . lc5302) (call-with-string-output-port . lc5301) (call-with-port . lc5300) (call-with-bytevector-output-port . lc52ff) (bytevector->string . lc52fe) (buffer-mode? . lc52fd) (binary-port? . lc52fc) (with-exception-handler . lc52fb) (raise-continuable . lc52fa) (raise . lc52f9) (eval . lc3179) (environment . lc3171) (make-enumeration . lc52f8) (enum-set=? . lc52f7) (enum-set-universe . lc52f6) (enum-set-union . lc52f5) (enum-set-subset? . lc52f4) (enum-set-projection . lc52f3) (enum-set-member? . lc52f2) (enum-set-intersection . lc52f1) (enum-set-indexer . lc52f0) (enum-set-difference . lc52ef) (enum-set-constructor . lc52ee) (enum-set-complement . lc52ed) (enum-set->list . lc52ec) (who-condition? . lc4d0f) (warning? . lc4c87) (violation? . lc4cc6) (undefined-violation? . lc4d86) (syntax-violation? . lc4d6d) (syntax-violation-subform . lc4d71) (syntax-violation-form . lc4d6f) (syntax-violation . lc3199) (simple-conditions . lc52eb) (serious-condition? . lc4c9c) (non-continuable-violation? . lc4d26) (message-condition? . lc4c70) (make-who-condition . lc4d0b) (make-warning . lc4c85) (make-violation . lc4cc4) (make-undefined-violation . lc4d84) (make-syntax-violation . lc4d67) (make-serious-condition . lc4c9a) (make-non-continuable-violation . lc4d24) (make-message-condition . lc4c6c) (make-lexical-violation . lc4d4e) (make-irritants-condition . lc4cf0) (make-implementation-restriction-violation . lc4d39) (make-error . lc4caf) (make-assertion-violation . lc4cd9) (lexical-violation? . lc4d50) (irritants-condition? . lc4cf4) (implementation-restriction-violation? . lc4d3b) (error? . lc4cb1) (condition-who . lc4d11) (condition-predicate . lc52ea) (condition-message . lc4c72) (condition-irritants . lc4cf6) (condition-accessor . lc52e9) (condition . lc52e8) (assertion-violation? . lc4cdb) (condition? . lc52e7) (utf32->string . lc52e6) (utf16->string . lc52e5) (utf8->string . lc52e4) (uint-list->bytevector . lc52e3) (u8-list->bytevector . lc52e2) (string->utf8 . lc52e1) (string->utf32 . lc52e0) (string->utf16 . lc52df) (sint-list->bytevector . lc52de) (native-endianness . lc52dd) (bytevector? . lc52dc) (bytevector=? . lc52db) (bytevector-uint-set! . lc52da) (bytevector-uint-ref . lc52d9) (bytevector-u8-set! . lc52d8) (bytevector-u8-ref . lc52d7) (bytevector-u64-set! . lc52d6) (bytevector-u64-ref . lc52d5) (bytevector-u64-native-set! . lc52d4) (bytevector-u64-native-ref . lc52d3) (bytevector-u32-set! . lc52d2) (bytevector-u32-ref . lc52d1) (bytevector-u32-native-set! . lc52d0) (bytevector-u32-native-ref . lc52cf) (bytevector-u16-set! . lc52ce) (bytevector-u16-ref . lc52cd) (bytevector-u16-native-set! . lc52cc) (bytevector-u16-native-ref . lc52cb) (bytevector-sint-set! . lc52ca) (bytevector-sint-ref . lc52c9) (bytevector-s8-set! . lc52c8) (bytevector-s8-ref . lc52c7) (bytevector-s64-set! . lc52c6) (bytevector-s64-ref . lc52c5) (bytevector-s64-native-set! . lc52c4) (bytevector-s64-native-ref . lc52c3) (bytevector-s32-set! . lc52c2) (bytevector-s32-ref . lc52c1) (bytevector-s32-native-set! . lc52c0) (bytevector-s32-native-ref . lc52bf) (bytevector-s16-set! . lc52be) (bytevector-s16-ref . lc52bd) (bytevector-s16-native-set! . lc52bc) (bytevector-s16-native-ref . lc52bb) (bytevector-length . lc52ba) (bytevector-ieee-single-ref . lc52b9) (bytevector-ieee-single-set! . lc52b8) (bytevector-ieee-single-native-set! . lc52b7) (bytevector-ieee-single-native-ref . lc52b6) (bytevector-ieee-double-set! . lc52b5) (bytevector-ieee-double-ref . lc52b4) (bytevector-ieee-double-native-set! . lc52b3) (bytevector-ieee-double-native-ref . lc52b2) (bytevector-fill! . lc52b1) (bytevector-copy! . lc52b0) (bytevector-copy . lc52af) (bytevector->uint-list . lc52ae) (bytevector->u8-list . lc52ad) (bytevector->sint-list . lc52ac) (no-nans-violation? . lc4ec4) (no-infinities-violation? . lc4eaf) (make-no-nans-violation . lc4ec2) (make-no-infinities-violation . lc4ead) (real->flonum . lc52ab) (flzero? . lc52aa) (fltruncate . lc52a9) (fltan . lc52a8) (flsqrt . lc52a7) (flsin . lc52a6) (flround . lc52a5) (flpositive? . lc52a4) (flonum? . lc52a3) (flodd? . lc52a2) (flnumerator . lc52a1) (flnegative? . lc52a0) (flnan? . lc529f) (flmod0 . lc529e) (flmod . lc529d) (flmin . lc529c) (flmax . lc529b) (fllog . lc529a) (flinteger? . lc5299) (flinfinite? . lc5298) (flfloor . lc5297) (flfinite? . lc5296) (flexpt . lc5295) (flexp . lc5294) (fleven? . lc5293) (fldiv0-and-mod0 . lc5292) (fldiv0 . lc5291) (fldiv-and-mod . lc5290) (fldiv . lc528f) (fldenominator . lc528e) (flcos . lc528d) (flceiling . lc528c) (flatan . lc528b) (flasin . lc528a) (flacos . lc5289) (flabs . lc5288) (fl>? . lc5287) (fl>=? . lc5286) (fl=? . lc5285) (fl<? . lc5284) (fl<=? . lc5283) (fl/ . lc5282) (fl- . lc5281) (fl+ . lc5280) (fl* . lc527f) (fixnum->flonum . lc527e) (fxzero? . lc527d) (fxxor . lc527c) (fxrotate-bit-field . lc527b) (fxreverse-bit-field . lc527a) (fxpositive? . lc5279) (fxodd? . lc5278) (fxnot . lc5277) (fxnegative? . lc5276) (fxmod0 . lc5275) (fxmod . lc5274) (fxmin . lc5273) (fxmax . lc5272) (fxlength . lc5271) (fxior . lc5270) (fxif . lc526f) (fxfirst-bit-set . lc526e) (fxeven? . lc526d) (fxdiv0-and-mod0 . lc526c) (fxdiv0 . lc526b) (fxdiv-and-mod . lc526a) (fxdiv . lc5269) (fxcopy-bit-field . lc5268) (fxcopy-bit . lc5267) (fxbit-set? . lc5266) (fxbit-field . lc5265) (fxbit-count . lc5264) (fxarithmetic-shift-right . lc5263) (fxarithmetic-shift-left . lc5262) (fxarithmetic-shift . lc5261) (fxand . lc5260) (fx>? . lc525f) (fx>=? . lc525e) (fx=? . lc525d) (fx<? . lc525c) (fx<=? . lc525b) (fx-/carry . lc525a) (fx- . lc5259) (fx+/carry . lc5258) (fx+ . lc5257) (fx*/carry . lc5256) (fx* . lc5255) (greatest-fixnum . lc5254) (least-fixnum . lc5253) (fixnum-width . lc5252) (fixnum? . lc5251) (bitwise-rotate-bit-field . lc5250) (bitwise-reverse-bit-field . lc524f) (bitwise-length . lc524e) (bitwise-if . lc524d) (bitwise-first-bit-set . lc524c) (bitwise-copy-bit-field . lc524b) (bitwise-copy-bit . lc524a) (bitwise-bit-set? . lc5249) (bitwise-bit-field . lc5248) (bitwise-bit-count . lc5247) (bitwise-xor . lc5246) (bitwise-ior . lc5245) (bitwise-and . lc5244) (bitwise-not . lc5243) (bitwise-arithmetic-shift-right . lc5242) (bitwise-arithmetic-shift-left . lc5241) (bitwise-arithmetic-shift . lc5240) (zero? . lc523f) (vector? . lc523e) (vector-set! . lc523d) (vector-ref . lc523c) (vector-map . lc523b) (vector-length . lc523a) (vector-for-each . lc5239) (vector-fill! . lc5238) (vector->list . lc5237) (vector . lc5236) (values . lc5235) (truncate . lc5234) (tan . lc5233) (symbol? . lc5232) (symbol=? . lc5231) (symbol->string . lc5230) (substring . lc522f) (string? . lc522e) (string>? . lc522d) (string>=? . lc522c) (string=? . lc522b) (string<? . lc522a) (string<=? . lc5229) (string-ref . lc5228) (string-length . lc5227) (string-for-each . lc5226) (string-copy . lc5225) (string-append . lc5224) (string->symbol . lc5223) (string->number . lc5222) (string->list . lc5221) (string . lc5220) (sqrt . lc521f) (sin . lc521e) (round . lc521d) (reverse . lc521c) (real? . lc521b) (real-valued? . lc521a) (real-part . lc5219) (rationalize . lc5218) (rational? . lc5217) (rational-valued? . lc5216) (procedure? . lc5215) (positive? . lc5214) (pair? . lc5213) (odd? . lc5212) (numerator . lc5211) (number? . lc5210) (number->string . lc520f) (null? . lc520e) (not . lc520d) (negative? . lc520c) (nan? . lc520b) (min . lc520a) (max . lc5209) (map . lc5208) (make-vector . lc5207) (make-string . lc5206) (make-rectangular . lc5205) (make-polar . lc5204) (magnitude . lc5203) (log . lc5202) (list? . lc5201) (list-tail . lc5200) (list-ref . lc51ff) (list->vector . lc51fe) (list->string . lc51fd) (list . lc51fc) (length . lc51fb) (lcm . lc51fa) (integer? . lc51f9) (integer-valued? . lc51f8) (integer->char . lc51f7) (infinite? . lc51f6) (inexact? . lc51f5) (inexact . lc51f4) (imag-part . lc51f3) (gcd . lc51f2) (for-each . lc51f1) (floor . lc51f0) (finite? . lc51ef) (expt . lc51ee) (exp . lc51ed) (exact? . lc51ec) (exact-integer-sqrt . lc51eb) (exact . lc51ea) (even? . lc51e9) (error . lc51e8) (eqv? . lc51e7) (equal? . lc51e6) (eq? . lc51e5) (dynamic-wind . lc51e4) (div0-and-mod0 . lc51e3) (mod0 . lc51e2) (div0 . lc51e1) (div-and-mod . lc51e0) (mod . lc51df) (div . lc51de) (denominator . lc51dd) (cos . lc51dc) (cons . lc51db) (complex? . lc51da) (char? . lc51d9) (char>? . lc51d8) (char>=? . lc51d7) (char=? . lc51d6) (char<? . lc51d5) (char<=? . lc51d4) (char->integer . lc51d3) (ceiling . lc51d2) (call-with-values . lc51d1) (call/cc . lc51d0) (call-with-current-continuation . lc51cf) (cddddr . lc51ce) (cdddar . lc51cd) (cddadr . lc51cc) (cddaar . lc51cb) (cdaddr . lc51ca) (cdadar . lc51c9) (cdaadr . lc51c8) (cdaaar . lc51c7) (cadddr . lc51c6) (caddar . lc51c5) (cadadr . lc51c4) (cadaar . lc51c3) (caaddr . lc51c2) (caadar . lc51c1) (caaadr . lc51c0) (caaaar . lc51bf) (cdddr . lc51be) (cddar . lc51bd) (cdadr . lc51bc) (cdaar . lc51bb) (caddr . lc51ba) (cadar . lc51b9) (caadr . lc51b8) (caaar . lc51b7) (cddr . lc51b6) (cdar . lc51b5) (cadr . lc51b4) (caar . lc51b3) (cdr . lc51b2) (car . lc51b1) (boolean? . lc51b0) (boolean=? . lc51af) (atan . lc51ae) (assertion-violation . lc51ad) (assertion-error . lc3193) (asin . lc51ac) (apply . lc51ab) (append . lc51aa) (angle . lc51a9) (acos . lc51a8) (abs . lc51a7) (/ . lc51a6) (* . lc51a5) (- . lc51a4) (+ . lc51a3) (>= . lc51a2) (> . lc51a1) (= . lc51a0) (<= . lc519f) (< . lc519e) (library . lc519d) (&no-nans . lc519c) (&no-infinities . lc519b) (&i/o-encoding . lc519a) (&i/o-decoding . lc5199) (&i/o-port . lc5198) (&i/o-file-does-not-exist . lc5197) (&i/o-file-already-exists . lc5196) (&i/o-file-is-read-only . lc5195) (&i/o-file-protection . lc5194) (&i/o-filename . lc5193) (&i/o-invalid-position . lc5192) (&i/o-write . lc5191) (&i/o-read . lc5190) (&i/o . lc518f) (&undefined . lc518e) (&syntax . lc518d) (&lexical . lc518c) (&implementation-restriction . lc518b) (&non-continuable . lc518a) (&who . lc5189) (&irritants . lc5188) (&assertion . lc5187) (&violation . lc5186) (&error . lc5185) (&serious . lc5184) (&warning . lc5183) (&message . lc5182) (&condition . lc5181) (define-condition-type . lc5180) (define-enumeration . lc517f) (define-record-type . lc517e) (parent-rtd . lc517d) (nongenerative . lc517c) (opaque . lc517b) (sealed . lc517a) (protocol . lc5179) (parent . lc5178) (immutable . lc5177) (mutable . lc5176) (fields . lc5175) (error-handling-mode . lc5174) (file-options . lc5173) (buffer-mode . lc5172) (eol-style . lc5171) (guard . lc5170) (trace-define . lc516f) (trace-lambda . lc516e) (unsyntax-splicing . lc516d) (unsyntax . lc516c) (unquote-splicing . lc516b) (unquote . lc516a) (_ . lc5169) (else . lc5168) (=> . lc5167) (... . lc5166) (assert . lc5165) (endianness . lc5164) (delay . lc5163) (time . lc5162) (do . lc5161) (cond . lc5160) (let* . lc515f) (let*-values . lc515e) (let-values . lc515d) (identifier-syntax . lc515c) (with-syntax . lc515b) (quasisyntax . lc515a) (quasiquote . lc5159) (syntax-rules . lc5158) (include . lc5157) (define-struct . lc5156) (record-constructor-descriptor . lc5155) (record-type-descriptor . lc5154) (case . lc5153) (parameterize . lc5152) (unless . lc5151) (when . lc5150) (or . lc514f) (and . lc514e) (if . lc514d) (let . lc514c) (letrec* . lc514b) (letrec . lc514a) (type-descriptor . lc5149) (case-lambda . lc5148) (lambda . lc5147) (syntax . lc5146) (syntax-case . lc5145) (quote . lc5144) (foreign-call . lc5143) (letrec-syntax . lc5142) (let-syntax . lc5141) (set! . lc5140) (import . lc513f) (begin . lc513e) (module . lc513d) (define-syntax . lc513c) (define . lc513b)) '((lc4ec8 core-prim . &no-nans-rcd) (lc4ec6 core-prim . &no-nans-rtd) (lc4eb3 core-prim . &no-infinities-rcd) (lc4eb1 core-prim . &no-infinities-rtd) (lc4e9e core-prim . &i/o-encoding-rcd) (lc4e9c core-prim . &i/o-encoding-rtd) (lc4e83 core-prim . &i/o-decoding-rcd) (lc4e81 core-prim . &i/o-decoding-rtd) (lc4e6e core-prim . &i/o-port-rcd) (lc4e6c core-prim . &i/o-port-rtd) (lc4e53 core-prim . &i/o-file-does-not-exist-rcd) (lc4e51 core-prim . &i/o-file-does-not-exist-rtd) (lc4e3e core-prim . &i/o-file-already-exists-rcd) (lc4e3c core-prim . &i/o-file-already-exists-rtd) (lc4e29 core-prim . &i/o-file-is-read-only-rcd) (lc4e27 core-prim . &i/o-file-is-read-only-rtd) (lc4e14 core-prim . &i/o-file-protection-rcd) (lc4e12 core-prim . &i/o-file-protection-rtd) (lc4dff core-prim . &i/o-filename-rcd) (lc4dfd core-prim . &i/o-filename-rtd) (lc4de4 core-prim . &i/o-invalid-position-rcd) (lc4de2 core-prim . &i/o-invalid-position-rtd) (lc4dc9 core-prim . &i/o-write-rcd) (lc4dc7 core-prim . &i/o-write-rtd) (lc4db4 core-prim . &i/o-read-rcd) (lc4db2 core-prim . &i/o-read-rtd) (lc4d9f core-prim . &i/o-rcd) (lc4d9d core-prim . &i/o-rtd) (lc4d8a core-prim . &undefined-rcd) (lc4d88 core-prim . &undefined-rtd) (lc4d75 core-prim . &syntax-rcd) (lc4d73 core-prim . &syntax-rtd) (lc4d54 core-prim . &lexical-rcd) (lc4d52 core-prim . &lexical-rtd) (lc4d3f core-prim . &implementation-restriction-rcd) (lc4d3d core-prim . &implementation-restriction-rtd) (lc4d2a core-prim . &non-continuable-rcd) (lc4d28 core-prim . &non-continuable-rtd) (lc4d15 core-prim . &who-rcd) (lc4d13 core-prim . &who-rtd) (lc4cfa core-prim . &irritants-rcd) (lc4cf8 core-prim . &irritants-rtd) (lc4cdf core-prim . &assertion-rcd) (lc4cdd core-prim . &assertion-rtd) (lc4cca core-prim . &violation-rcd) (lc4cc8 core-prim . &violation-rtd) (lc4cb5 core-prim . &error-rcd) (lc4cb3 core-prim . &error-rtd) (lc4ca0 core-prim . &serious-rcd) (lc4c9e core-prim . &serious-rtd) (lc4c8b core-prim . &warning-rcd) (lc4c89 core-prim . &warning-rtd) (lc4c76 core-prim . &message-rcd) (lc4c74 core-prim . &message-rtd) (lc4c17 core-prim . &condition-rcd) (lc4c15 core-prim . &condition-rtd) (lc3195 core-prim . syntax-error) (lc30b9 core-prim . syntax-dispatch) (lc5461 core-prim . pretty-print) (lc5460 core-prim . eval-core) (lc545f core-prim . set-symbol-value!) (lc545e core-prim . symbol-value) (lc545d core-prim . gensym) (lc545c core-prim . void) (lc4fd9 core-prim . load) (lc31a7 core-prim . interaction-environment) (lc545b core-prim . char-ready?) (lc545a core-prim . regexp?) (lc5459 core-prim . read-line) (lc5458 core-prim . gensym-prefix-set!) (lc5457 core-prim . ungensym) (lc5456 core-prim . alist->eq-hash-table) (lc5455 core-prim . assoc-ref) (lc5454 core-prim . print) (lc5453 core-prim . format) (lc5452 core-prim . host-os) (lc2af8 core-prim . library-path) (lc5451 core-prim . standard-library-path) (lc5450 core-prim . file-newer?) (lc544f core-prim . stat-mtime) (lc544e core-prim . write-to-file) (lc544d core-prim . file->list) (lc544c core-prim . file->string) (lc544b core-prim . digit->integer) (lc544a core-prim . call-with-string-input-port) (lc5449 core-prim . call-with-string-io) (lc5448 core-prim . string-split) (lc5447 core-prim . bytevector-for-each) (lc5446 core-prim . string->regexp) (lc5445 core-prim . rxmatch) (lc5444 core-prim . regexp-replace-all) (lc5443 core-prim . hashtable-for-each) (lc28e2 core-prim . mosh-cache-dir) (lc5442 core-prim . call-process) (lc5441 core-prim . local-tz-offset) (lc5440 core-prim . microseconds) (lc543f core-prim . directory-list) (lc543e core-prim . set-current-directory!) (lc543d core-prim . expand-path) (lc543c core-prim . current-directory) (lc543b core-prim . %spawn) (lc543a core-prim . %waitpid) (lc5439 core-prim . simple-struct-name) (lc5438 core-prim . simple-struct-set!) (lc5437 core-prim . simple-struct-ref) (lc5436 core-prim . make-simple-struct) (lc5435 core-prim . simple-struct?) (lc5434 core-prim . pointer-ref-c-int64) (lc5433 core-prim . pointer-ref-c-int32) (lc5432 core-prim . pointer-ref-c-int16) (lc5431 core-prim . pointer-ref-c-int8) (lc5430 core-prim . pointer-ref-c-uint64) (lc542f core-prim . pointer-ref-c-uint32) (lc542e core-prim . pointer-ref-c-uint16) (lc542d core-prim . pointer-ref-c-uint8) (lc542c core-prim . pointer-set-c-uint64!) (lc542b core-prim . pointer-set-c-uint32!) (lc542a core-prim . pointer-set-c-uint16!) (lc5429 core-prim . pointer-set-c-uint8!) (lc5428 core-prim . pointer-set-c-int64!) (lc5427 core-prim . pointer-set-c-int32!) (lc5426 core-prim . pointer-set-c-int16!) (lc5425 core-prim . pointer-set-c-int8!) (lc5424 core-prim . pointer-set-c-pointer!) (lc5423 core-prim . pointer-set-c-double!) (lc5422 core-prim . pointer-set-c-float!) (lc5421 core-prim . pointer-set-c-long-long!) (lc5420 core-prim . pointer-set-c-long!) (lc541f core-prim . pointer-set-c-int!) (lc541e core-prim . pointer-set-c-short!) (lc541d core-prim . pointer-set-c-char!) (lc541c core-prim . pointer-ref-c-pointer) (lc541b core-prim . pointer-ref-c-double) (lc541a core-prim . pointer-ref-c-float) (lc5419 core-prim . pointer-ref-c-unsigned-long-long) (lc5418 core-prim . pointer-ref-c-signed-long-long) (lc5417 core-prim . pointer-ref-c-unsigned-long) (lc5416 core-prim . pointer-ref-c-signed-long) (lc5415 core-prim . pointer-ref-c-unsigned-int) (lc5414 core-prim . pointer-ref-c-signed-int) (lc5413 core-prim . pointer-ref-c-unsigned-short) (lc5412 core-prim . pointer-ref-c-signed-short) (lc5411 core-prim . pointer-ref-c-unsigned-char) (lc5410 core-prim . pointer-ref-c-signed-char) (lc540f core-prim . pointer->integer) (lc540e core-prim . integer->pointer) (lc540d core-prim . pointer?) (lc540c core-prim . shared-errno) (lc540b core-prim . %ffi-free-c-callback-trampoline) (lc540a core-prim . %ffi-make-c-callback-trampoline) (lc5409 core-prim . %ffi-free) (lc5408 core-prim . %ffi-malloc) (lc5407 core-prim . %ffi-supported?) (lc5406 core-prim . %ffi-pointer->string) (lc5405 core-prim . %ffi-call) (lc5404 core-prim . %ffi-lookup) (lc5403 core-prim . %ffi-open) (lc5402 core-prim . null-terminated-utf8->string) (lc5401 core-prim . null-terminated-bytevector->string) (lc5400 core-prim . %fork) (lc53ff core-prim . %pipe) (lc53fe core-prim . p) (lc53fd core-prim . open-output-string) (lc53fc core-prim . get-output-string) (lc53fb core-prim . file-stat-ctime) (lc53fa core-prim . file-stat-atime) (lc53f9 core-prim . file-stat-mtime) (lc53f8 core-prim . file-size-in-bytes) (lc53f7 core-prim . file-writable?) (lc53f6 core-prim . file-executable?) (lc53f5 core-prim . file-readable?) (lc53f4 core-prim . file-regular?) (lc53f3 core-prim . file-symbolic-link?) (lc53f2 core-prim . file-directory?) (lc53f1 core-prim . create-symbolic-link) (lc53f0 core-prim . rename-file) (lc53ef core-prim . delete-directory) (lc53ee core-prim . create-directory) (lc53ed core-prim . create-mosh-cache-dir) (lc53ec core-prim . get-environment-variables) (lc53eb core-prim . current-exception-handler) (lc53ea core-prim . get-environment-variable) (lc53e9 core-prim . join-wraps) (lc53e8 core-prim . id->real-label) (lc53e7 core-prim . same-marks?) (lc53e6 core-prim . same-marks*?) (lc53e5 core-prim . get-timeofday) (lc53e4 core-prim . get-command-line) (lc53e3 core-prim . sys-display) (lc53e2 core-prim . whereis) (lc53e1 core-prim . register) (lc53e0 core-prim . vm-join!) (lc53df core-prim . vm-set-value!) (lc53de core-prim . vm?) (lc53dd core-prim . main-vm?) (lc53dc core-prim . vm-eval) (lc53db core-prim . vm-self) (lc53da core-prim . vm-start!) (lc53d9 core-prim . make-vm) (lc53d8 core-prim . mutex-try-lock!) (lc53d7 core-prim . mutex-unlock!) (lc53d6 core-prim . mutex-lock!) (lc53d5 core-prim . mutex?) (lc53d4 core-prim . make-mutex) (lc53d3 core-prim . condition-variable-notify-all!) (lc53d2 core-prim . condition-variable-notify!) (lc53d1 core-prim . condition-variable-wait!) (lc53d0 core-prim . make-condition-variable) (lc53cf core-prim . mosh-executable-path) (lc53ce core-prim . make-file-options) (lc53cd core-prim . source-info) (lc53cc core-prim . make-compiler-instruction) (lc53cb core-prim . make-instruction) (lc53ca core-prim . set-source-info!) (lc53c9 core-prim . bignum?) (lc53c8 core-prim . fast-equal?) (lc53c7 core-prim . fasl-read) (lc53c6 core-prim . fasl-write) (lc53c5 core-prim . time-usage) (lc53c4 core-prim . os-constant) (lc53c3 core-prim . disasm) (lc28e0 core-prim . make-parameter) (lc53c2 core-prim . socket-port) (lc53c1 core-prim . socket-shutdown) (lc53c0 core-prim . socket-close) (lc53bf core-prim . socket-send) (lc53be core-prim . socket-recv!) (lc53bd core-prim . socket-recv) (lc53bc core-prim . make-server-socket) (lc53bb core-prim . make-client-socket) (lc53ba core-prim . socket-accept) (lc53b9 core-prim . socket?) (lc53b8 core-prim . string-upcase) (lc53b7 core-prim . string-titlecase) (lc53b6 core-prim . string-normalize-nfkd) (lc53b5 core-prim . string-normalize-nfkc) (lc53b4 core-prim . string-normalize-nfd) (lc53b3 core-prim . string-normalize-nfc) (lc53b2 core-prim . string-foldcase) (lc53b1 core-prim . string-downcase) (lc53b0 core-prim . string-ci>?) (lc53af core-prim . string-ci>=?) (lc53ae core-prim . string-ci=?) (lc53ad core-prim . string-ci<?) (lc53ac core-prim . string-ci<=?) (lc53ab core-prim . char-whitespace?) (lc53aa core-prim . char-upper-case?) (lc53a9 core-prim . char-title-case?) (lc53a8 core-prim . char-numeric?) (lc53a7 core-prim . char-lower-case?) (lc53a6 core-prim . char-general-category) (lc53a5 core-prim . char-upcase) (lc53a4 core-prim . char-titlecase) (lc53a3 core-prim . char-foldcase) (lc53a2 core-prim . char-downcase) (lc53a1 core-prim . char-ci>?) (lc53a0 core-prim . char-ci>=?) (lc539f core-prim . char-ci=?) (lc539e core-prim . char-ci<?) (lc539d core-prim . char-ci<=?) (lc539c core-prim . char-alphabetic?) (lc2ee4 core-prim . make-variable-transformer) (lc319b core-prim . identifier?) (lc3187 core-prim . generate-temporaries) (lc3189 core-prim . free-identifier=?) (lc319f core-prim . syntax->datum) (lc319d core-prim . datum->syntax) (lc318b core-prim . bound-identifier=?) (lc539b core-prim . record-type-descriptor?) (lc539a core-prim . record-predicate) (lc5399 core-prim . record-mutator) (lc5398 core-prim . record-constructor) (lc5397 core-prim . record-accessor) (lc5396 core-prim . make-record-type-descriptor) (lc5395 core-prim . make-record-constructor-descriptor) (lc5394 core-prim . record?) (lc5393 core-prim . record-type-uid) (lc5392 core-prim . record-type-sealed?) (lc5391 core-prim . record-type-parent) (lc5390 core-prim . record-type-opaque?) (lc538f core-prim . record-type-name) (lc538e core-prim . record-type-generative?) (lc538d core-prim . record-type-field-names) (lc538c core-prim . record-rtd) (lc538b core-prim . record-field-mutable?) (lc538a core-prim . delete-file) (lc5389 core-prim . file-exists?) (lc5388 core-prim . vector-sort!) (lc5387 core-prim . vector-sort) (lc5386 core-prim . list-sort) (lc5385 core-prim . symbol-hash) (lc5384 core-prim . string-ci-hash) (lc5383 core-prim . string-hash) (lc5382 core-prim . equal-hash) (lc5381 core-prim . hashtable-equivalence-function) (lc5380 core-prim . make-hashtable) (lc537f core-prim . hashtable-hash-function) (lc537e core-prim . make-eqv-hashtable) (lc537d core-prim . make-eq-hashtable) (lc537c core-prim . hashtable?) (lc537b core-prim . hashtable-update!) (lc537a core-prim . hashtable-size) (lc5379 core-prim . hashtable-set!) (lc5378 core-prim . hashtable-ref) (lc5377 core-prim . hashtable-mutable?) (lc5376 core-prim . hashtable-keys) (lc5375 core-prim . hashtable-entries) (lc5374 core-prim . hashtable-delete!) (lc5373 core-prim . hashtable-copy) (lc5372 core-prim . hashtable-contains?) (lc5371 core-prim . hashtable-clear!) (lc5370 core-prim . call-with-output-file) (lc536f core-prim . call-with-input-file) (lc536e core-prim . write-char) (lc536d core-prim . write) (lc536c core-prim . with-output-to-file) (lc536b core-prim . with-input-from-file) (lc536a core-prim . read-char) (lc5369 core-prim . read) (lc5368 core-prim . peek-char) (lc5367 core-prim . open-output-file) (lc5366 core-prim . open-input-file) (lc5365 core-prim . newline) (lc5364 core-prim . display) (lc5363 core-prim . close-output-port) (lc5362 core-prim . close-input-port) (lc5361 core-prim . eof-object?) (lc5360 core-prim . eof-object) (lc535f core-prim . current-error-port) (lc535e core-prim . current-output-port) (lc535d core-prim . current-input-port) (lc535c core-prim . output-port?) (lc535b core-prim . input-port?) (lc535a core-prim . utf-8-codec) (lc5359 core-prim . utf-16-codec) (lc5358 core-prim . transcoder-error-handling-mode) (lc5357 core-prim . transcoder-eol-style) (lc5356 core-prim . transcoder-codec) (lc5355 core-prim . transcoded-port) (lc5354 core-prim . textual-port?) (lc5353 core-prim . string->bytevector) (lc5352 core-prim . standard-output-port) (lc5351 core-prim . standard-input-port) (lc5350 core-prim . standard-error-port) (lc534f core-prim . set-port-position!) (lc534e core-prim . put-u8) (lc534d core-prim . put-string) (lc534c core-prim . put-datum) (lc534b core-prim . put-char) (lc534a core-prim . put-bytevector) (lc5349 core-prim . port?) (lc5348 core-prim . port-transcoder) (lc5347 core-prim . port-position) (lc5346 core-prim . port-has-set-port-position!?) (lc5345 core-prim . port-has-port-position?) (lc5344 core-prim . port-eof?) (lc5343 core-prim . output-port-buffer-mode) (lc5342 core-prim . open-string-output-port) (lc5341 core-prim . open-string-input-port) (lc5340 core-prim . open-file-output-port) (lc533f core-prim . open-file-input/output-port) (lc533e core-prim . open-file-input-port) (lc533d core-prim . open-bytevector-output-port) (lc533c core-prim . open-bytevector-input-port) (lc533b core-prim . native-transcoder) (lc533a core-prim . native-eol-style) (lc5339 core-prim . make-transcoder) (lc5338 core-prim . latin-1-codec) (lc4dc3 core-prim . make-i/o-write-error) (lc4dae core-prim . make-i/o-read-error) (lc4e64 core-prim . make-i/o-port-error) (lc4dda core-prim . make-i/o-invalid-position-error) (lc4df5 core-prim . make-i/o-filename-error) (lc4e0e core-prim . make-i/o-file-protection-error) (lc4e23 core-prim . make-i/o-file-is-read-only-error) (lc4e4d core-prim . make-i/o-file-does-not-exist-error) (lc4e38 core-prim . make-i/o-file-already-exists-error) (lc4d99 core-prim . make-i/o-error) (lc4e94 core-prim . make-i/o-encoding-error) (lc4e7d core-prim . make-i/o-decoding-error) (lc5337 core-prim . make-custom-textual-output-port) (lc5336 core-prim . make-custom-textual-input/output-port) (lc5335 core-prim . make-custom-textual-input-port) (lc5334 core-prim . make-custom-binary-output-port) (lc5333 core-prim . make-custom-binary-input/output-port) (lc5332 core-prim . make-custom-binary-input-port) (lc5331 core-prim . make-bytevector) (lc5330 core-prim . lookahead-u8) (lc532f core-prim . lookahead-char) (lc4dc5 core-prim . i/o-write-error?) (lc4db0 core-prim . i/o-read-error?) (lc4e68 core-prim . i/o-port-error?) (lc4dde core-prim . i/o-invalid-position-error?) (lc4df9 core-prim . i/o-filename-error?) (lc4e10 core-prim . i/o-file-protection-error?) (lc4e25 core-prim . i/o-file-is-read-only-error?) (lc4e4f core-prim . i/o-file-does-not-exist-error?) (lc4e3a core-prim . i/o-file-already-exists-error?) (lc4d9b core-prim . i/o-error?) (lc4de0 core-prim . i/o-error-position) (lc4e6a core-prim . i/o-error-port) (lc4dfb core-prim . i/o-error-filename) (lc4e98 core-prim . i/o-encoding-error?) (lc4e9a core-prim . i/o-encoding-error-char) (lc4e7f core-prim . i/o-decoding-error?) (lc532e core-prim . get-u8) (lc532d core-prim . get-string-n!) (lc532c core-prim . get-string-n) (lc532b core-prim . get-string-all) (lc532a core-prim . get-line) (lc5329 core-prim . get-datum) (lc5328 core-prim . get-char) (lc5327 core-prim . get-bytevector-some) (lc5326 core-prim . get-bytevector-n!) (lc5325 core-prim . get-bytevector-n) (lc5324 core-prim . get-bytevector-all) (lc5323 core-prim . flush-output-port) (lc5322 core-prim . close-port) (lc3175 core-prim . scheme-report-environment) (lc5321 core-prim . quotient) (lc3173 core-prim . null-environment) (lc5320 core-prim . remainder) (lc531f core-prim . modulo) (lc531e core-prim . inexact->exact) (lc531d core-prim . force) (lc531c core-prim . exact->inexact) (lc531b core-prim . make-promise) (lc531a core-prim . exit) (lc4fd3 core-prim . command-line) (lc5319 core-prim . string-fill!) (lc5318 core-prim . string-set!) (lc5317 core-prim . set-cdr!) (lc5316 core-prim . set-car!) (lc5315 core-prim . remove) (lc5314 core-prim . remv) (lc5313 core-prim . remp) (lc5312 core-prim . remq) (lc5311 core-prim . partition) (lc5310 core-prim . memv) (lc530f core-prim . memq) (lc530e core-prim . memp) (lc530d core-prim . member) (lc530c core-prim . exists) (lc530b core-prim . for-all) (lc530a core-prim . fold-right) (lc5309 core-prim . fold-left) (lc5308 core-prim . find) (lc5307 core-prim . filter) (lc5306 core-prim . cons*) (lc5305 core-prim . assv) (lc5304 core-prim . assq) (lc5303 core-prim . assp) (lc5302 core-prim . assoc) (lc5301 core-prim . call-with-string-output-port) (lc5300 core-prim . call-with-port) (lc52ff core-prim . call-with-bytevector-output-port) (lc52fe core-prim . bytevector->string) (lc52fd core-prim . buffer-mode?) (lc52fc core-prim . binary-port?) (lc52fb core-prim . with-exception-handler) (lc52fa core-prim . raise-continuable) (lc52f9 core-prim . raise) (lc3179 core-prim . eval) (lc3171 core-prim . environment) (lc52f8 core-prim . make-enumeration) (lc52f7 core-prim . enum-set=?) (lc52f6 core-prim . enum-set-universe) (lc52f5 core-prim . enum-set-union) (lc52f4 core-prim . enum-set-subset?) (lc52f3 core-prim . enum-set-projection) (lc52f2 core-prim . enum-set-member?) (lc52f1 core-prim . enum-set-intersection) (lc52f0 core-prim . enum-set-indexer) (lc52ef core-prim . enum-set-difference) (lc52ee core-prim . enum-set-constructor) (lc52ed core-prim . enum-set-complement) (lc52ec core-prim . enum-set->list) (lc4d0f core-prim . who-condition?) (lc4c87 core-prim . warning?) (lc4cc6 core-prim . violation?) (lc4d86 core-prim . undefined-violation?) (lc4d6d core-prim . syntax-violation?) (lc4d71 core-prim . syntax-violation-subform) (lc4d6f core-prim . syntax-violation-form) (lc3199 core-prim . syntax-violation) (lc52eb core-prim . simple-conditions) (lc4c9c core-prim . serious-condition?) (lc4d26 core-prim . non-continuable-violation?) (lc4c70 core-prim . message-condition?) (lc4d0b core-prim . make-who-condition) (lc4c85 core-prim . make-warning) (lc4cc4 core-prim . make-violation) (lc4d84 core-prim . make-undefined-violation) (lc4d67 core-prim . make-syntax-violation) (lc4c9a core-prim . make-serious-condition) (lc4d24 core-prim . make-non-continuable-violation) (lc4c6c core-prim . make-message-condition) (lc4d4e core-prim . make-lexical-violation) (lc4cf0 core-prim . make-irritants-condition) (lc4d39 core-prim . make-implementation-restriction-violation) (lc4caf core-prim . make-error) (lc4cd9 core-prim . make-assertion-violation) (lc4d50 core-prim . lexical-violation?) (lc4cf4 core-prim . irritants-condition?) (lc4d3b core-prim . implementation-restriction-violation?) (lc4cb1 core-prim . error?) (lc4d11 core-prim . condition-who) (lc52ea core-prim . condition-predicate) (lc4c72 core-prim . condition-message) (lc4cf6 core-prim . condition-irritants) (lc52e9 core-prim . condition-accessor) (lc52e8 core-prim . condition) (lc4cdb core-prim . assertion-violation?) (lc52e7 core-prim . condition?) (lc52e6 core-prim . utf32->string) (lc52e5 core-prim . utf16->string) (lc52e4 core-prim . utf8->string) (lc52e3 core-prim . uint-list->bytevector) (lc52e2 core-prim . u8-list->bytevector) (lc52e1 core-prim . string->utf8) (lc52e0 core-prim . string->utf32) (lc52df core-prim . string->utf16) (lc52de core-prim . sint-list->bytevector) (lc52dd core-prim . native-endianness) (lc52dc core-prim . bytevector?) (lc52db core-prim . bytevector=?) (lc52da core-prim . bytevector-uint-set!) (lc52d9 core-prim . bytevector-uint-ref) (lc52d8 core-prim . bytevector-u8-set!) (lc52d7 core-prim . bytevector-u8-ref) (lc52d6 core-prim . bytevector-u64-set!) (lc52d5 core-prim . bytevector-u64-ref) (lc52d4 core-prim . bytevector-u64-native-set!) (lc52d3 core-prim . bytevector-u64-native-ref) (lc52d2 core-prim . bytevector-u32-set!) (lc52d1 core-prim . bytevector-u32-ref) (lc52d0 core-prim . bytevector-u32-native-set!) (lc52cf core-prim . bytevector-u32-native-ref) (lc52ce core-prim . bytevector-u16-set!) (lc52cd core-prim . bytevector-u16-ref) (lc52cc core-prim . bytevector-u16-native-set!) (lc52cb core-prim . bytevector-u16-native-ref) (lc52ca core-prim . bytevector-sint-set!) (lc52c9 core-prim . bytevector-sint-ref) (lc52c8 core-prim . bytevector-s8-set!) (lc52c7 core-prim . bytevector-s8-ref) (lc52c6 core-prim . bytevector-s64-set!) (lc52c5 core-prim . bytevector-s64-ref) (lc52c4 core-prim . bytevector-s64-native-set!) (lc52c3 core-prim . bytevector-s64-native-ref) (lc52c2 core-prim . bytevector-s32-set!) (lc52c1 core-prim . bytevector-s32-ref) (lc52c0 core-prim . bytevector-s32-native-set!) (lc52bf core-prim . bytevector-s32-native-ref) (lc52be core-prim . bytevector-s16-set!) (lc52bd core-prim . bytevector-s16-ref) (lc52bc core-prim . bytevector-s16-native-set!) (lc52bb core-prim . bytevector-s16-native-ref) (lc52ba core-prim . bytevector-length) (lc52b9 core-prim . bytevector-ieee-single-ref) (lc52b8 core-prim . bytevector-ieee-single-set!) (lc52b7 core-prim . bytevector-ieee-single-native-set!) (lc52b6 core-prim . bytevector-ieee-single-native-ref) (lc52b5 core-prim . bytevector-ieee-double-set!) (lc52b4 core-prim . bytevector-ieee-double-ref) (lc52b3 core-prim . bytevector-ieee-double-native-set!) (lc52b2 core-prim . bytevector-ieee-double-native-ref) (lc52b1 core-prim . bytevector-fill!) (lc52b0 core-prim . bytevector-copy!) (lc52af core-prim . bytevector-copy) (lc52ae core-prim . bytevector->uint-list) (lc52ad core-prim . bytevector->u8-list) (lc52ac core-prim . bytevector->sint-list) (lc4ec4 core-prim . no-nans-violation?) (lc4eaf core-prim . no-infinities-violation?) (lc4ec2 core-prim . make-no-nans-violation) (lc4ead core-prim . make-no-infinities-violation) (lc52ab core-prim . real->flonum) (lc52aa core-prim . flzero?) (lc52a9 core-prim . fltruncate) (lc52a8 core-prim . fltan) (lc52a7 core-prim . flsqrt) (lc52a6 core-prim . flsin) (lc52a5 core-prim . flround) (lc52a4 core-prim . flpositive?) (lc52a3 core-prim . flonum?) (lc52a2 core-prim . flodd?) (lc52a1 core-prim . flnumerator) (lc52a0 core-prim . flnegative?) (lc529f core-prim . flnan?) (lc529e core-prim . flmod0) (lc529d core-prim . flmod) (lc529c core-prim . flmin) (lc529b core-prim . flmax) (lc529a core-prim . fllog) (lc5299 core-prim . flinteger?) (lc5298 core-prim . flinfinite?) (lc5297 core-prim . flfloor) (lc5296 core-prim . flfinite?) (lc5295 core-prim . flexpt) (lc5294 core-prim . flexp) (lc5293 core-prim . fleven?) (lc5292 core-prim . fldiv0-and-mod0) (lc5291 core-prim . fldiv0) (lc5290 core-prim . fldiv-and-mod) (lc528f core-prim . fldiv) (lc528e core-prim . fldenominator) (lc528d core-prim . flcos) (lc528c core-prim . flceiling) (lc528b core-prim . flatan) (lc528a core-prim . flasin) (lc5289 core-prim . flacos) (lc5288 core-prim . flabs) (lc5287 core-prim . fl>?) (lc5286 core-prim . fl>=?) (lc5285 core-prim . fl=?) (lc5284 core-prim . fl<?) (lc5283 core-prim . fl<=?) (lc5282 core-prim . fl/) (lc5281 core-prim . fl-) (lc5280 core-prim . fl+) (lc527f core-prim . fl*) (lc527e core-prim . fixnum->flonum) (lc527d core-prim . fxzero?) (lc527c core-prim . fxxor) (lc527b core-prim . fxrotate-bit-field) (lc527a core-prim . fxreverse-bit-field) (lc5279 core-prim . fxpositive?) (lc5278 core-prim . fxodd?) (lc5277 core-prim . fxnot) (lc5276 core-prim . fxnegative?) (lc5275 core-prim . fxmod0) (lc5274 core-prim . fxmod) (lc5273 core-prim . fxmin) (lc5272 core-prim . fxmax) (lc5271 core-prim . fxlength) (lc5270 core-prim . fxior) (lc526f core-prim . fxif) (lc526e core-prim . fxfirst-bit-set) (lc526d core-prim . fxeven?) (lc526c core-prim . fxdiv0-and-mod0) (lc526b core-prim . fxdiv0) (lc526a core-prim . fxdiv-and-mod) (lc5269 core-prim . fxdiv) (lc5268 core-prim . fxcopy-bit-field) (lc5267 core-prim . fxcopy-bit) (lc5266 core-prim . fxbit-set?) (lc5265 core-prim . fxbit-field) (lc5264 core-prim . fxbit-count) (lc5263 core-prim . fxarithmetic-shift-right) (lc5262 core-prim . fxarithmetic-shift-left) (lc5261 core-prim . fxarithmetic-shift) (lc5260 core-prim . fxand) (lc525f core-prim . fx>?) (lc525e core-prim . fx>=?) (lc525d core-prim . fx=?) (lc525c core-prim . fx<?) (lc525b core-prim . fx<=?) (lc525a core-prim . fx-/carry) (lc5259 core-prim . fx-) (lc5258 core-prim . fx+/carry) (lc5257 core-prim . fx+) (lc5256 core-prim . fx*/carry) (lc5255 core-prim . fx*) (lc5254 core-prim . greatest-fixnum) (lc5253 core-prim . least-fixnum) (lc5252 core-prim . fixnum-width) (lc5251 core-prim . fixnum?) (lc5250 core-prim . bitwise-rotate-bit-field) (lc524f core-prim . bitwise-reverse-bit-field) (lc524e core-prim . bitwise-length) (lc524d core-prim . bitwise-if) (lc524c core-prim . bitwise-first-bit-set) (lc524b core-prim . bitwise-copy-bit-field) (lc524a core-prim . bitwise-copy-bit) (lc5249 core-prim . bitwise-bit-set?) (lc5248 core-prim . bitwise-bit-field) (lc5247 core-prim . bitwise-bit-count) (lc5246 core-prim . bitwise-xor) (lc5245 core-prim . bitwise-ior) (lc5244 core-prim . bitwise-and) (lc5243 core-prim . bitwise-not) (lc5242 core-prim . bitwise-arithmetic-shift-right) (lc5241 core-prim . bitwise-arithmetic-shift-left) (lc5240 core-prim . bitwise-arithmetic-shift) (lc523f core-prim . zero?) (lc523e core-prim . vector?) (lc523d core-prim . vector-set!) (lc523c core-prim . vector-ref) (lc523b core-prim . vector-map) (lc523a core-prim . vector-length) (lc5239 core-prim . vector-for-each) (lc5238 core-prim . vector-fill!) (lc5237 core-prim . vector->list) (lc5236 core-prim . vector) (lc5235 core-prim . values) (lc5234 core-prim . truncate) (lc5233 core-prim . tan) (lc5232 core-prim . symbol?) (lc5231 core-prim . symbol=?) (lc5230 core-prim . symbol->string) (lc522f core-prim . substring) (lc522e core-prim . string?) (lc522d core-prim . string>?) (lc522c core-prim . string>=?) (lc522b core-prim . string=?) (lc522a core-prim . string<?) (lc5229 core-prim . string<=?) (lc5228 core-prim . string-ref) (lc5227 core-prim . string-length) (lc5226 core-prim . string-for-each) (lc5225 core-prim . string-copy) (lc5224 core-prim . string-append) (lc5223 core-prim . string->symbol) (lc5222 core-prim . string->number) (lc5221 core-prim . string->list) (lc5220 core-prim . string) (lc521f core-prim . sqrt) (lc521e core-prim . sin) (lc521d core-prim . round) (lc521c core-prim . reverse) (lc521b core-prim . real?) (lc521a core-prim . real-valued?) (lc5219 core-prim . real-part) (lc5218 core-prim . rationalize) (lc5217 core-prim . rational?) (lc5216 core-prim . rational-valued?) (lc5215 core-prim . procedure?) (lc5214 core-prim . positive?) (lc5213 core-prim . pair?) (lc5212 core-prim . odd?) (lc5211 core-prim . numerator) (lc5210 core-prim . number?) (lc520f core-prim . number->string) (lc520e core-prim . null?) (lc520d core-prim . not) (lc520c core-prim . negative?) (lc520b core-prim . nan?) (lc520a core-prim . min) (lc5209 core-prim . max) (lc5208 core-prim . map) (lc5207 core-prim . make-vector) (lc5206 core-prim . make-string) (lc5205 core-prim . make-rectangular) (lc5204 core-prim . make-polar) (lc5203 core-prim . magnitude) (lc5202 core-prim . log) (lc5201 core-prim . list?) (lc5200 core-prim . list-tail) (lc51ff core-prim . list-ref) (lc51fe core-prim . list->vector) (lc51fd core-prim . list->string) (lc51fc core-prim . list) (lc51fb core-prim . length) (lc51fa core-prim . lcm) (lc51f9 core-prim . integer?) (lc51f8 core-prim . integer-valued?) (lc51f7 core-prim . integer->char) (lc51f6 core-prim . infinite?) (lc51f5 core-prim . inexact?) (lc51f4 core-prim . inexact) (lc51f3 core-prim . imag-part) (lc51f2 core-prim . gcd) (lc51f1 core-prim . for-each) (lc51f0 core-prim . floor) (lc51ef core-prim . finite?) (lc51ee core-prim . expt) (lc51ed core-prim . exp) (lc51ec core-prim . exact?) (lc51eb core-prim . exact-integer-sqrt) (lc51ea core-prim . exact) (lc51e9 core-prim . even?) (lc51e8 core-prim . error) (lc51e7 core-prim . eqv?) (lc51e6 core-prim . equal?) (lc51e5 core-prim . eq?) (lc51e4 core-prim . dynamic-wind) (lc51e3 core-prim . div0-and-mod0) (lc51e2 core-prim . mod0) (lc51e1 core-prim . div0) (lc51e0 core-prim . div-and-mod) (lc51df core-prim . mod) (lc51de core-prim . div) (lc51dd core-prim . denominator) (lc51dc core-prim . cos) (lc51db core-prim . cons) (lc51da core-prim . complex?) (lc51d9 core-prim . char?) (lc51d8 core-prim . char>?) (lc51d7 core-prim . char>=?) (lc51d6 core-prim . char=?) (lc51d5 core-prim . char<?) (lc51d4 core-prim . char<=?) (lc51d3 core-prim . char->integer) (lc51d2 core-prim . ceiling) (lc51d1 core-prim . call-with-values) (lc51d0 core-prim . call/cc) (lc51cf core-prim . call-with-current-continuation) (lc51ce core-prim . cddddr) (lc51cd core-prim . cdddar) (lc51cc core-prim . cddadr) (lc51cb core-prim . cddaar) (lc51ca core-prim . cdaddr) (lc51c9 core-prim . cdadar) (lc51c8 core-prim . cdaadr) (lc51c7 core-prim . cdaaar) (lc51c6 core-prim . cadddr) (lc51c5 core-prim . caddar) (lc51c4 core-prim . cadadr) (lc51c3 core-prim . cadaar) (lc51c2 core-prim . caaddr) (lc51c1 core-prim . caadar) (lc51c0 core-prim . caaadr) (lc51bf core-prim . caaaar) (lc51be core-prim . cdddr) (lc51bd core-prim . cddar) (lc51bc core-prim . cdadr) (lc51bb core-prim . cdaar) (lc51ba core-prim . caddr) (lc51b9 core-prim . cadar) (lc51b8 core-prim . caadr) (lc51b7 core-prim . caaar) (lc51b6 core-prim . cddr) (lc51b5 core-prim . cdar) (lc51b4 core-prim . cadr) (lc51b3 core-prim . caar) (lc51b2 core-prim . cdr) (lc51b1 core-prim . car) (lc51b0 core-prim . boolean?) (lc51af core-prim . boolean=?) (lc51ae core-prim . atan) (lc51ad core-prim . assertion-violation) (lc3193 core-prim . assertion-error) (lc51ac core-prim . asin) (lc51ab core-prim . apply) (lc51aa core-prim . append) (lc51a9 core-prim . angle) (lc51a8 core-prim . acos) (lc51a7 core-prim . abs) (lc51a6 core-prim . /) (lc51a5 core-prim . *) (lc51a4 core-prim . -) (lc51a3 core-prim . +) (lc51a2 core-prim . >=) (lc51a1 core-prim . >) (lc51a0 core-prim . =) (lc519f core-prim . <=) (lc519e core-prim . <) (lc519d core-prim . library) (lc519c $core-rtd &no-nans-rtd &no-nans-rcd) (lc519b $core-rtd &no-infinities-rtd &no-infinities-rcd) (lc519a $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (lc5199 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (lc5198 $core-rtd &i/o-port-rtd &i/o-port-rcd) (lc5197 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (lc5196 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (lc5195 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (lc5194 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (lc5193 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (lc5192 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (lc5191 $core-rtd &i/o-write-rtd &i/o-write-rcd) (lc5190 $core-rtd &i/o-read-rtd &i/o-read-rcd) (lc518f $core-rtd &i/o-rtd &i/o-rcd) (lc518e $core-rtd &undefined-rtd &undefined-rcd) (lc518d $core-rtd &syntax-rtd &syntax-rcd) (lc518c $core-rtd &lexical-rtd &lexical-rcd) (lc518b $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (lc518a $core-rtd &non-continuable-rtd &non-continuable-rcd) (lc5189 $core-rtd &who-rtd &who-rcd) (lc5188 $core-rtd &irritants-rtd &irritants-rcd) (lc5187 $core-rtd &assertion-rtd &assertion-rcd) (lc5186 $core-rtd &violation-rtd &violation-rcd) (lc5185 $core-rtd &error-rtd &error-rcd) (lc5184 $core-rtd &serious-rtd &serious-rcd) (lc5183 $core-rtd &warning-rtd &warning-rcd) (lc5182 $core-rtd &message-rtd &message-rcd) (lc5181 $core-rtd &condition-rtd &condition-rcd) (lc5180 macro . define-condition-type) (lc517f macro . define-enumeration) (lc517e macro . define-record-type) (lc517d macro . parent-rtd) (lc517c macro . nongenerative) (lc517b macro . opaque) (lc517a macro . sealed) (lc5179 macro . protocol) (lc5178 macro . parent) (lc5177 macro . immutable) (lc5176 macro . mutable) (lc5175 macro . fields) (lc5174 macro . error-handling-mode) (lc5173 macro . file-options) (lc5172 macro . buffer-mode) (lc5171 macro . eol-style) (lc5170 macro . guard) (lc516f macro . trace-define) (lc516e macro . trace-lambda) (lc516d macro . unsyntax-splicing) (lc516c macro . unsyntax) (lc516b macro . unquote-splicing) (lc516a macro . unquote) (lc5169 macro . _) (lc5168 macro . else) (lc5167 macro . =>) (lc5166 macro . ...) (lc5165 macro . assert) (lc5164 macro . endianness) (lc5163 macro . delay) (lc5162 macro . time) (lc5161 macro . do) (lc5160 macro . cond) (lc515f macro . let*) (lc515e macro . let*-values) (lc515d macro . let-values) (lc515c macro . identifier-syntax) (lc515b macro . with-syntax) (lc515a macro . quasisyntax) (lc5159 macro . quasiquote) (lc5158 macro . syntax-rules) (lc5157 macro . include) (lc5156 macro . define-struct) (lc5155 core-macro . record-constructor-descriptor) (lc5154 core-macro . record-type-descriptor) (lc5153 macro . case) (lc5152 macro . parameterize) (lc5151 macro . unless) (lc5150 macro . when) (lc514f core-macro . or) (lc514e core-macro . and) (lc514d core-macro . if) (lc514c core-macro . let) (lc514b core-macro . letrec*) (lc514a core-macro . letrec) (lc5149 core-macro . type-descriptor) (lc5148 core-macro . case-lambda) (lc5147 core-macro . lambda) (lc5146 core-macro . syntax) (lc5145 core-macro . syntax-case) (lc5144 core-macro . quote) (lc5143 core-macro . foreign-call) (lc5142 letrec-syntax) (lc5141 let-syntax) (lc5140 set!) (lc513f import) (lc513e begin) (lc513d module) (lc513c define-syntax) (lc513b define)) values values '#f '#f '#f '#f) (lc2ccd@lc2b19@install-library 'lc5482 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . lc5461) (eval-core . lc5460) (set-symbol-value! . lc545f) (symbol-value . lc545e) (gensym . lc545d) (void . lc545c)) '() values values '#f '#f '#f '#f) (lc2ccd@lc2b19@install-library 'lc5483 '(mosh) '() '() '() '() '((set-symbol-value! . lc545f) (symbol-value . lc545e) (regexp? . lc545a) (read-line . lc5459) (ungensym . lc5457) (alist->eq-hash-table . lc5456) (assoc-ref . lc5455) (print . lc5454) (format . lc5453) (host-os . lc5452) (library-path . lc2af8) (standard-library-path . lc5451) (file-newer? . lc5450) (stat-mtime . lc544f) (digit->integer . lc544b) (call-with-string-input-port . lc544a) (call-with-string-io . lc5449) (string-split . lc5448) (bytevector-for-each . lc5447) (string->regexp . lc5446) (rxmatch . lc5445) (regexp-replace-all . lc5444) (hashtable-for-each . lc5443) (set-current-directory! . lc543e) (expand-path . lc543d) (current-directory . lc543c) (p . lc53fe) (get-timeofday . lc53e5) (get-command-line . lc53e4) (sys-display . lc53e3) (whereis . lc53e2) (register . lc53e1) (vm-join! . lc53e0) (vm-set-value! . lc53df) (vm? . lc53de) (main-vm? . lc53dd) (vm-eval . lc53dc) (vm-self . lc53db) (vm-start! . lc53da) (make-vm . lc53d9) (mutex-try-lock! . lc53d8) (mutex-unlock! . lc53d7) (mutex-lock! . lc53d6) (mutex? . lc53d5) (make-mutex . lc53d4) (condition-variable-notify-all! . lc53d3) (condition-variable-notify! . lc53d2) (condition-variable-wait! . lc53d1) (make-condition-variable . lc53d0) (mosh-executable-path . lc53cf) (make-file-options . lc53ce) (source-info . lc53cd) (make-compiler-instruction . lc53cc) (make-instruction . lc53cb) (set-source-info! . lc53ca) (bignum? . lc53c9) (fast-equal? . lc53c8) (fasl-read . lc53c7) (fasl-write . lc53c6) (time-usage . lc53c5) (os-constant . lc53c4) (time . lc5162) (include . lc5157)) '() values values '#f '#f '#f '#f) (lc2ccd@lc2b19@install-library 'lc5484 '(system) '() '() '() '() '((gensym-prefix-set! . lc5458) (write-to-file . lc544e) (file->list . lc544d) (file->string . lc544c) (mosh-cache-dir . lc28e2) (call-process . lc5442) (local-tz-offset . lc5441) (microseconds . lc5440) (directory-list . lc543f) (expand-path . lc543d) (%spawn . lc543b) (%waitpid . lc543a) (simple-struct-name . lc5439) (simple-struct-set! . lc5438) (simple-struct-ref . lc5437) (make-simple-struct . lc5436) (simple-struct? . lc5435) (pointer-ref-c-int64 . lc5434) (pointer-ref-c-int32 . lc5433) (pointer-ref-c-int16 . lc5432) (pointer-ref-c-int8 . lc5431) (pointer-ref-c-uint64 . lc5430) (pointer-ref-c-uint32 . lc542f) (pointer-ref-c-uint16 . lc542e) (pointer-ref-c-uint8 . lc542d) (pointer-set-c-uint64! . lc542c) (pointer-set-c-uint32! . lc542b) (pointer-set-c-uint16! . lc542a) (pointer-set-c-uint8! . lc5429) (pointer-set-c-int64! . lc5428) (pointer-set-c-int32! . lc5427) (pointer-set-c-int16! . lc5426) (pointer-set-c-int8! . lc5425) (pointer-set-c-pointer! . lc5424) (pointer-set-c-double! . lc5423) (pointer-set-c-float! . lc5422) (pointer-set-c-long-long! . lc5421) (pointer-set-c-long! . lc5420) (pointer-set-c-int! . lc541f) (pointer-set-c-short! . lc541e) (pointer-set-c-char! . lc541d) (pointer-ref-c-pointer . lc541c) (pointer-ref-c-double . lc541b) (pointer-ref-c-float . lc541a) (pointer-ref-c-unsigned-long-long . lc5419) (pointer-ref-c-signed-long-long . lc5418) (pointer-ref-c-unsigned-long . lc5417) (pointer-ref-c-signed-long . lc5416) (pointer-ref-c-unsigned-int . lc5415) (pointer-ref-c-signed-int . lc5414) (pointer-ref-c-unsigned-short . lc5413) (pointer-ref-c-signed-short . lc5412) (pointer-ref-c-unsigned-char . lc5411) (pointer-ref-c-signed-char . lc5410) (pointer->integer . lc540f) (integer->pointer . lc540e) (pointer? . lc540d) (shared-errno . lc540c) (%ffi-free-c-callback-trampoline . lc540b) (%ffi-make-c-callback-trampoline . lc540a) (%ffi-free . lc5409) (%ffi-malloc . lc5408) (%ffi-supported? . lc5407) (%ffi-pointer->string . lc5406) (%ffi-call . lc5405) (%ffi-lookup . lc5404) (%ffi-open . lc5403) (null-terminated-utf8->string . lc5402) (null-terminated-bytevector->string . lc5401) (%fork . lc5400) (%pipe . lc53ff) (open-output-string . lc53fd) (get-output-string . lc53fc) (file-stat-ctime . lc53fb) (file-stat-atime . lc53fa) (file-stat-mtime . lc53f9) (file-size-in-bytes . lc53f8) (file-writable? . lc53f7) (file-executable? . lc53f6) (file-readable? . lc53f5) (file-regular? . lc53f4) (file-symbolic-link? . lc53f3) (file-directory? . lc53f2) (create-symbolic-link . lc53f1) (rename-file . lc53f0) (delete-directory . lc53ef) (create-directory . lc53ee) (create-mosh-cache-dir . lc53ed) (get-environment-variables . lc53ec) (current-exception-handler . lc53eb) (get-environment-variable . lc53ea) (join-wraps . lc53e9) (id->real-label . lc53e8) (same-marks? . lc53e7) (same-marks*? . lc53e6) (disasm . lc53c3) (make-parameter . lc28e0) (socket-port . lc53c2) (socket-shutdown . lc53c1) (socket-close . lc53c0) (socket-send . lc53bf) (socket-recv! . lc53be) (socket-recv . lc53bd) (make-server-socket . lc53bc) (make-client-socket . lc53bb) (socket-accept . lc53ba) (socket? . lc53b9) (parameterize . lc5152)) '() values values '#f '#f '#f '#f)))
(begin (set! lc4fbe@ref (unspecified)) (set! lc4fc0@x* (unspecified)) (set! lc4fc2@add-library-path! (unspecified)) (set! lc4fc4@parse-and-add-library-path (unspecified)) (set! lc4fc6@for-each-with-index (unspecified)) (set! lc4fc8@rpad (unspecified)) (set! lc4fca@condition-printer (unspecified)) (set! lc4fcc@record->field-alist (unspecified)) (set! lc4fce@map-with-index (unspecified)) (set! lc4fd0@repl (unspecified)) (set! lc4fd2@trace-printer (unspecified)) (set! lc4fd4@command-line (unspecified)) (set! lc4fd6@local-library-path (unspecified)) (set! lc4fd8@load/args (unspecified)) (set! lc4fda@load (unspecified)) (set! lc4fdc@ironscheme-build (unspecified)) (set! lc4fde@eval-top-level (unspecified)) (set! lc4fe0@compile-system-libraries (unspecified)) (set! lc4fe2@compile (unspecified)) (set! lc4fe4@compile->closure (unspecified)) (set! lc4fe6@pre-compile-r6rs-file (unspecified)) (set! lc4fe8@load-r6rs-top-level (unspecified)) (set! lc4fea@load-r6rs-top-level-sexp (unspecified)) (set! lc4fec@prefix-inc (unspecified)) (set! lc4fee@prefix-inc! (unspecified)) (set! lc4fbe@ref (lambda (lc5029@rtd lc502a@i lc502b@x) (let ((lc502f@val ((record-accessor lc5029@rtd lc502a@i) lc502b@x))) (if (symbol? lc502f@val) (ungensym lc502f@val) lc502f@val)))) (set! lc5121@lc4fbe@ref lc4fbe@ref) (set! lc4fc0@x* '()) (set! lc5122@lc4fc0@x* lc4fc0@x*) (set! lc4fc2@add-library-path! (lambda (lc5031@path) (lc2cbd@lc2af9@library-path (append (lc2cbd@lc2af9@library-path) (list lc5031@path))))) (set! lc5123@lc4fc2@add-library-path! lc4fc2@add-library-path!) (set! lc4fc4@parse-and-add-library-path (lambda (lc5033@paths lc5034@message) (letrec* ((lc5038@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((lc5039@t lc5033@paths)) (if lc5039@t ((lambda (lc503b@paths) (for-each (lambda (lc503d@path) (if (file-exists? lc503d@path) (lc4fc2@add-library-path! (expand-path lc503d@path)) (format (current-error-port) lc5034@message lc503d@path))) (string-split lc503b@paths lc5038@separator))) lc5039@t) (void)))))) (set! lc5124@lc4fc4@parse-and-add-library-path lc4fc4@parse-and-add-library-path) (set! lc4fc6@for-each-with-index (lambda (lc503f@proc lc5040@lst) (letrec ((lc5043@loop (lambda (lc5045@i lc5046@lst) (if (null? lc5046@lst) (if '#f '#f (void)) (begin (lc503f@proc lc5045@i (car lc5046@lst)) (lc5043@loop (+ lc5045@i '1) (cdr lc5046@lst))))))) (lc5043@loop '1 lc5040@lst)))) (set! lc5125@lc4fc6@for-each-with-index lc4fc6@for-each-with-index) (set! lc4fc8@rpad (lambda (lc5049@str lc504a@pad lc504b@n) (let ((lc504f@rest (- lc504b@n (string-length (format '"~a" lc5049@str))))) (let lc5055@loop ((lc5051@rest lc504f@rest) (lc5052@ret (format '"~a" lc5049@str))) (if (<= lc5051@rest '0) lc5052@ret (lc5055@loop (- lc5051@rest '1) (string-append lc5052@ret lc504a@pad))))))) (set! lc5126@lc4fc8@rpad lc4fc8@rpad) (set! lc4fca@condition-printer (lambda (lc5057@e lc5058@port) (letrec* ((lc505c@max-condition-len (apply max (map (lambda (lc506d@c) (string-length (symbol->string (record-type-name (record-rtd lc506d@c))))) (simple-conditions lc5057@e))))) (begin (display '" Condition components:\n" lc5058@port) (lc4fc6@for-each-with-index (lambda (lc505d@i lc505e@x) (let ((lc5061@rtd (record-rtd lc505e@x)) (lc5062@fields-alist (lc4fcc@record->field-alist lc505e@x))) (begin (format lc5058@port '" ~d. ~a" lc505d@i (lc4fc8@rpad (symbol->string (record-type-name lc5061@rtd)) '" " lc505c@max-condition-len)) (if (null? lc5062@fields-alist) (newline lc5058@port) (void)) (let lc5069@loop ((lc5065@first '#t) (lc5066@fields-alist lc5062@fields-alist)) (if (null? lc5066@fields-alist) '() (let ((lc506b@field (car lc5066@fields-alist))) (begin (if (not lc5065@first) (display (lc4fc8@rpad '"" '" " (+ '4 lc505c@max-condition-len)) lc5058@port) (void)) (display '"       " lc5058@port) (display (car lc506b@field) lc5058@port) (display '": " lc5058@port) (write (cdr lc506b@field) lc5058@port) (newline lc5058@port) (lc5069@loop '#f (cdr lc5066@fields-alist))))))))) (simple-conditions lc5057@e)))))) (set! lc5127@lc4fca@condition-printer lc4fca@condition-printer) (set! lc4fcc@record->field-alist (lambda (lc506f@r) (letrec* ((lc5072@ref (lambda (lc507d@rtd lc507e@i lc507f@x) (let ((lc5083@val ((record-accessor lc507d@rtd lc507e@i) lc507f@x))) (if (symbol? lc5083@val) (ungensym lc5083@val) lc5083@val))))) (let lc5077@loop ((lc5073@ret '()) (lc5074@rtd (record-rtd lc506f@r))) (if lc5074@rtd (lc5077@loop (append lc5073@ret (lc4fce@map-with-index (lambda (lc5079@i lc507a@field) (cons lc507a@field (lc5072@ref lc5074@rtd lc5079@i lc506f@r))) (vector->list (record-type-field-names lc5074@rtd)))) (record-type-parent lc5074@rtd)) lc5073@ret))))) (set! lc5128@lc4fcc@record->field-alist lc4fcc@record->field-alist) (set! lc4fce@map-with-index (lambda (lc5085@proc lc5086@lst) (let lc508f@loop ((lc5089@i '0) (lc508a@lst lc5086@lst) (lc508b@ret '())) (if (null? lc508a@lst) (reverse lc508b@ret) (lc508f@loop (+ lc5089@i '1) (cdr lc508a@lst) (cons (lc5085@proc lc5089@i (car lc508a@lst)) lc508b@ret)))))) (set! lc5129@lc4fce@map-with-index lc4fce@map-with-index) (set! lc4fd0@repl (lambda lc5091@x (letrec* ((lc5094@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (lc5097@lc5095) (lambda () (with-exception-handler (lambda (lc5099@e) ((call/cc (lambda (lc509b@lc5096) (lc5097@lc5095 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? lc5099@e) (lc4fca@condition-printer lc5099@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" lc5099@e))) (lc509b@lc5096 (lambda () (raise-continuable lc5099@e)))))))))) (lambda () (let lc50a1@loop ((lc509d@line (get-line (current-input-port))) (lc509e@accum '"")) (letrec* ((lc50a4@parentheses-ok? (lambda (lc50ab@text) (let lc50b3@loop ((lc50ad@chars (string->list lc50ab@text)) (lc50ae@p0 '0) (lc50af@p1 '0)) (if (null? lc50ad@chars) (= '0 lc50ae@p0 lc50af@p1) (let ((lc50b5@t (car lc50ad@chars))) (if (memv lc50b5@t '(#\()) (lc50b3@loop (cdr lc50ad@chars) (+ lc50ae@p0 '1) lc50af@p1) (if (memv lc50b5@t '(#\))) (lc50b3@loop (cdr lc50ad@chars) (- lc50ae@p0 '1) lc50af@p1) (if (memv lc50b5@t '(#\[)) (lc50b3@loop (cdr lc50ad@chars) lc50ae@p0 (+ lc50af@p1 '1)) (if (memv lc50b5@t '(#\])) (lc50b3@loop (cdr lc50ad@chars) lc50ae@p0 (- lc50af@p1 '1)) (lc50b3@loop (cdr lc50ad@chars) lc50ae@p0 lc50af@p1)))))))))) (lc50a6@eval-string-print (lambda (lc50a9@text) (if (not (or (string=? '"\n" lc50a9@text) (= '0 (string-length lc50a9@text)))) (write (lc4fde@eval-top-level (call-with-port (open-string-input-port lc50a9@text) read))) (void))))) (if (eof-object? lc509d@line) (begin (lc50a6@eval-string-print lc509e@accum) (exit)) (let ((lc50a7@current (string-append lc509e@accum lc509d@line))) (if (lc50a4@parentheses-ok? lc50a7@current) (lc50a6@eval-string-print lc50a7@current) (lc50a1@loop (get-line (current-input-port)) lc50a7@current)))))))))))) (newline) (lc5094@rec))))) (lc5094@rec)))) (set! lc512a@lc4fd0@repl lc4fd0@repl) (set! lc4fd2@trace-printer (lc2a03@lc28e1@make-parameter write)) (set! lc512b@lc4fd2@trace-printer lc4fd2@trace-printer) (set! lc4fd4@command-line (lc2a03@lc28e1@make-parameter (get-command-line))) (set! lc512c@lc4fd4@command-line lc4fd4@command-line) (set! lc4fd6@local-library-path (lambda (lc50b7@filename) (lc2cbd@lc2af9@library-path))) (set! lc512d@lc4fd6@local-library-path lc4fd6@local-library-path) (set! lc4fd8@load/args (lambda (lc50b9@filename . lc50bb@args) (begin (apply lc4fe8@load-r6rs-top-level lc50b9@filename 'load lc50bb@args) (void)))) (set! lc512e@lc4fd8@load/args lc4fd8@load/args) (set! lc4fda@load (lambda (lc50bd@filename) (begin (apply lc4fe8@load-r6rs-top-level lc50bd@filename 'load (lc4fd4@command-line)) (void)))) (set! lc512f@lc4fda@load lc4fda@load) (set! lc4fdc@ironscheme-build (lambda () (lc4fda@load '"ironscheme-buildscript.ss"))) (set! lc5130@lc4fdc@ironscheme-build lc4fdc@ironscheme-build) (set! lc4fde@eval-top-level (lambda (lc50bf@x) (lc4be4@lc317a@eval lc50bf@x (lc4bfb@lc31a8@interaction-environment)))) (set! lc5131@lc4fde@eval-top-level lc4fde@eval-top-level) (set! lc4fe0@compile-system-libraries (lambda () (lc4fde@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! lc5132@lc4fe0@compile-system-libraries lc4fe0@compile-system-libraries) (set! lc4fe2@compile (lambda (lc50c1@filename) (lc4fe8@load-r6rs-top-level lc50c1@filename 'compile))) (set! lc5133@lc4fe2@compile lc4fe2@compile) (set! lc4fe4@compile->closure (lambda (lc50c3@filename) (lc4fe8@load-r6rs-top-level lc50c3@filename 'closure))) (set! lc5134@lc4fe4@compile->closure lc4fe4@compile->closure) (set! lc4fe6@pre-compile-r6rs-file (lambda (lc50c5@filename) (lc4fe8@load-r6rs-top-level lc50c5@filename 'compile))) (set! lc5135@lc4fe6@pre-compile-r6rs-file lc4fe6@pre-compile-r6rs-file) (set! lc4fe8@load-r6rs-top-level (lambda (lc50c7@filename lc50c8@how . lc50cb@args) (begin (lc2cbd@lc2af9@library-path (lc4fd6@local-library-path lc50c7@filename)) (let ((lc50cd@x* (with-input-from-file lc50c7@filename (lambda () (let lc50cf@f () (let ((lc50d1@x (lc29f5@lc28c5@read-annotated))) (if (eof-object? lc50d1@x) '() (cons lc50d1@x (lc50cf@f))))))))) (let ((lc50d3@t lc50c8@how)) (if (memv lc50d3@t '(closure)) (lc4bfa@lc31a6@pre-compile-r6rs-top-level lc50cd@x*) (if (memv lc50d3@t '(load)) (begin (lc4fd4@command-line (cons lc50c7@filename (car lc50cb@args))) (lc2a04@lc28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (lc2a04@lc28e3@mosh-cache-dir) (gensym-prefix-set! (lc4fee@prefix-inc! (string-append (lc2a04@lc28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lc50d5@file) ((call/cc (lambda (lc50d9@lc50d7) (lambda () (with-exception-handler (lambda (lc50db@c) ((call/cc (lambda (lc50dd@lc50d8) (lc50d9@lc50d7 (lambda () (if '#t '#t (lc50dd@lc50d8 (lambda () (raise-continuable lc50db@c)))))))))) (lambda () (delete-file (string-append (lc2a04@lc28e3@mosh-cache-dir) '"/" lc50d5@file))))))))) (directory-list (lc2a04@lc28e3@mosh-cache-dir))) (void)) (let ((lc50df@compiled (lc4bf9@lc31a4@compile-r6rs-top-level lc50cd@x*))) (begin (if (and (lc2a04@lc28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lc2cc1@lc2b01@serialize-all lc29fe@lc28d7@serialize-library lc2a5a@lc2a13@compile-core-expr) (void)) (lc50df@compiled)))) (if (memv lc50d3@t '(compile)) (begin (lc4bf9@lc31a4@compile-r6rs-top-level lc50cd@x*) (lc2cc1@lc2b01@serialize-all lc29fe@lc28d7@serialize-library lc2a5a@lc2a13@compile-core-expr)) (if '#f '#f (void)))))))))) (set! lc5136@lc4fe8@load-r6rs-top-level lc4fe8@load-r6rs-top-level) (set! lc4fea@load-r6rs-top-level-sexp (lambda (lc50e1@import-spec lc50e2@thunk) (let ((lc50ed@lc50e6 lc2cbd@lc2af9@library-path) (lc50ee@lc50e8 lc2a04@lc28e3@mosh-cache-dir) (lc50ef@lc50ea (lc4fd6@local-library-path '"")) (lc50f0@lc50ec (create-mosh-cache-dir))) (let ((lc50f5@swap (lambda () (begin (let ((lc50f7@t (lc50ed@lc50e6))) (begin (lc50ed@lc50e6 lc50ef@lc50ea) (set! lc50ef@lc50ea lc50f7@t))) (let ((lc50f9@t (lc50ee@lc50e8))) (begin (lc50ee@lc50e8 lc50f0@lc50ec) (set! lc50f0@lc50ec lc50f9@t))))))) (dynamic-wind lc50f5@swap (lambda () (begin (if (lc2a04@lc28e3@mosh-cache-dir) (gensym-prefix-set! (lc4fee@prefix-inc! (string-append (lc2a04@lc28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((lc50ff@lc50fc lc4fd4@command-line) (lc5100@lc50fe '())) (let ((lc5103@swap (lambda () (let ((lc5105@t (lc50ff@lc50fc))) (begin (lc50ff@lc50fc lc5100@lc50fe) (set! lc5100@lc50fe lc5105@t)))))) (dynamic-wind lc5103@swap (lambda () ((lc4bf9@lc31a4@compile-r6rs-top-level (list (cons 'import lc50e1@import-spec) (list lc50e2@thunk))))) lc5103@swap))))) lc50f5@swap))))) (set! lc5137@lc4fea@load-r6rs-top-level-sexp lc4fea@load-r6rs-top-level-sexp) (set! lc4fec@prefix-inc (lambda (lc5107@prefix-string) (let ((lc5109@prefix (symbol->string lc5107@prefix-string))) (let ((lc510b@len (string-length lc5109@prefix))) (let lc5113@loop ((lc510d@i (- lc510b@len '1)) (lc510e@carry? '#t) (lc510f@accum '())) (if (< lc510d@i '0) (string->symbol (list->string (if lc510e@carry? (cons '#\a lc510f@accum) lc510f@accum))) (if lc510e@carry? (let ((lc5115@next-integer (+ '1 (char->integer (string-ref lc5109@prefix lc510d@i))))) (if (= lc5115@next-integer '123) (lc5113@loop (- lc510d@i '1) '#f (cons '#\A lc510f@accum)) (if (= lc5115@next-integer '91) (lc5113@loop (- lc510d@i '1) '#t (cons '#\a lc510f@accum)) (lc5113@loop (- lc510d@i '1) '#f (cons (integer->char lc5115@next-integer) lc510f@accum))))) (lc5113@loop (- lc510d@i '1) '#f (cons (string-ref lc5109@prefix lc510d@i) lc510f@accum))))))))) (set! lc5138@lc4fec@prefix-inc lc4fec@prefix-inc) (set! lc4fee@prefix-inc! (lambda (lc5117@file) (begin (if (not (file-exists? lc5117@file)) (call-with-output-file lc5117@file (lambda (lc5119@port) (write 'd lc5119@port))) (void)) (let ((lc511b@prefix (call-with-input-file lc5117@file read))) (if (main-vm?) (let ((lc511d@next-prefix (lc4fec@prefix-inc lc511b@prefix))) (begin (call-with-port (open-file-output-port lc5117@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (lc511f@port) (write lc511d@next-prefix lc511f@port))) lc511b@prefix)) lc511b@prefix))))) (set! lc5139@lc4fee@prefix-inc! lc4fee@prefix-inc!) (begin (lc2cc2@lc2b03@current-precompiled-library-loader lc29ff@lc28d9@load-serialized-library) (set-symbol-value! 'load lc4fda@load) (set-symbol-value! 'pre-compile-r6rs-file lc4fe6@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs lc4fde@eval-top-level) (set-symbol-value! 'int-env-syms lc4bdb@lc3168@interaction-environment-symbols) (set-symbol-value! 'expanded2core lc2a59@lc2a11@expanded->core) (set-symbol-value! 'trace-printer lc4fd2@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (lc4fef@c) (condition (lc4f1b@lc4d25@make-non-continuable-violation) (lc4f11@lc4d0c@make-who-condition 'raise) (lc4ed5@lc4c6d@make-message-condition '"returned from non-continuable exception") (lc4f07@lc4cf1@make-irritants-condition (list lc4fef@c))))) (lc4fc4@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (lc4fc4@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (lc4fc2@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (lc4fc2@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (lc4fc2@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((lc4ff1@prefix (lambda (lc4ff3@ext lc4ff4@ls) (append (map (lambda (lc4ff7@x) (string-append lc4ff3@ext lc4ff7@x)) lc4ff4@ls) lc4ff4@ls)))) (lc2cbe@lc2afb@library-extensions (lc4ff1@prefix '".mosh" (lc2cbe@lc2afb@library-extensions)))) (current-exception-handler (lambda (lc4ff9@c) (begin (if (condition? lc4ff9@c) (lc4fca@condition-printer lc4ff9@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" lc4ff9@c)) lc4ff9@c))) (if ((call/cc (lambda (lc4ffd@lc4ffb) (lambda () (with-exception-handler (lambda (lc4fff@c) ((call/cc (lambda (lc5001@lc4ffc) (lc4ffd@lc4ffb (lambda () (if '#t '#f (lc5001@lc4ffc (lambda () (raise-continuable lc4fff@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (lc4fea@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (lc4fd4@command-line)) (let ((lc500b@lc5004 lc4fd4@command-line) (lc500c@lc5006 lc2a04@lc28e3@mosh-cache-dir) (lc500d@lc5008 '()) (lc500e@lc500a (create-mosh-cache-dir))) (let ((lc5013@swap (lambda () (begin (let ((lc5015@t (lc500b@lc5004))) (begin (lc500b@lc5004 lc500d@lc5008) (set! lc500d@lc5008 lc5015@t))) (let ((lc5017@t (lc500c@lc5006))) (begin (lc500c@lc5006 lc500e@lc500a) (set! lc500e@lc500a lc5017@t))))))) (dynamic-wind lc5013@swap (lambda () (begin (if (lc2a04@lc28e3@mosh-cache-dir) (gensym-prefix-set! (lc4fee@prefix-inc! (string-append (lc2a04@lc28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (lc4fd0@repl))) lc5013@swap))) (begin (lc2cbd@lc2af9@library-path (lc4fd6@local-library-path (car (lc4fd4@command-line)))) (set! lc4fc0@x* (with-input-from-file (car (lc4fd4@command-line)) (lambda () (let lc5019@f () (let ((lc501b@x (lc29f5@lc28c5@read-annotated))) (if (eof-object? lc501b@x) '() (cons lc501b@x (lc5019@f)))))))) (lc4fd4@command-line (cons (car (lc4fd4@command-line)) (cdr (lc4fd4@command-line)))) (lc2a04@lc28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (lc2a04@lc28e3@mosh-cache-dir) (gensym-prefix-set! (lc4fee@prefix-inc! (string-append (lc2a04@lc28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lc501d@file) ((call/cc (lambda (lc5021@lc501f) (lambda () (with-exception-handler (lambda (lc5023@c) ((call/cc (lambda (lc5025@lc5020) (lc5021@lc501f (lambda () (if '#t '#t (lc5025@lc5020 (lambda () (raise-continuable lc5023@c)))))))))) (lambda () (delete-file (string-append (lc2a04@lc28e3@mosh-cache-dir) '"/" lc501d@file))))))))) (directory-list (lc2a04@lc28e3@mosh-cache-dir))) (void)) (let ((lc5027@compiled (lc4bf9@lc31a4@compile-r6rs-top-level lc4fc0@x*))) (begin (if (and (lc2a04@lc28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lc2cc1@lc2b01@serialize-all lc29fe@lc28d7@serialize-library lc2a5a@lc2a13@compile-core-expr) (void)) (lc5027@compiled))))))))
