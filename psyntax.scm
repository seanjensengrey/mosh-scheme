;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! F28e5@library-file-path->cache-path (unspecified)) (set! F28e7@read-annotated (unspecified)) (set! F28e9@annotation-stripped (unspecified)) (set! F28eb@annotation? (unspecified)) (set! F28ed@annotation-source (unspecified)) (set! F28ef@annotation-expression (unspecified)) (set! F28f1@scm->fasl (unspecified)) (set! F28f3@fasl-save (unspecified)) (set! F28f5@fasl-load (unspecified)) (set! F28f7@verbose? (unspecified)) (set! F28f9@serialize-library (unspecified)) (set! F28fb@load-serialized-library (unspecified)) (set! F28fd@make-record-printer (unspecified)) (set! F28ff@compile-core (unspecified)) (set! F2901@read-library-source-file (unspecified)) (set! F2903@make-parameter (unspecified)) (set! F2905@mosh-cache-dir (unspecified)) (set! F299b@file-options-spec (unspecified)) (set! F28e5@library-file-path->cache-path (lambda (F299c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (F29a2@F299f F29a3@F29a1) (let ((F29a6@extract F29a3@F29a1) (F29a7@p F29a2@F299f)) (let ((F29ab@display-hex '#f)) (begin (set! F29ab@display-hex (lambda (F29b4@n) (if (<= '0 F29b4@n '9) (display F29b4@n F29a7@p) (display (integer->char (+ (char->integer '#\a) (- F29b4@n '10))) F29a7@p)))) (begin (let F29ae@f ((F29ac@ls (string-split F299c@x '#\/))) (if (not (null? F29ac@ls)) (begin (display '"_" F29a7@p) (for-each (lambda (F29b0@c) (if (or (char<=? '#\a F29b0@c '#\z) (char<=? '#\A F29b0@c '#\Z) (char<=? '#\0 F29b0@c '#\9) (memv F29b0@c '(#\- #\. #\_ #\~))) (display F29b0@c F29a7@p) (begin (display '"%" F29a7@p) (let ((F29b2@n (char->integer F29b0@c))) (begin (F29ab@display-hex (quotient F29b2@n '16)) (F29ab@display-hex (remainder F29b2@n '16))))))) (string->list (car F29ac@ls))) (F29ae@f (cdr F29ac@ls))) (void))) (F29a6@extract))))))))) (set! F2a16@F28e5@library-file-path->cache-path F28e5@library-file-path->cache-path) (set! F28e7@read-annotated read) (set! F2a17@F28e7@read-annotated F28e7@read-annotated) (set! F28e9@annotation-stripped (lambda (F29b6@x) (F28ef@annotation-expression F29b6@x))) (set! F2a18@F28e9@annotation-stripped F28e9@annotation-stripped) (set! F28eb@annotation? (lambda (F29b8@x) (source-info F29b8@x))) (set! F2a19@F28eb@annotation? F28eb@annotation?) (set! F28ed@annotation-source (lambda (F29ba@x) (source-info F29ba@x))) (set! F2a1a@F28ed@annotation-source F28ed@annotation-source) (set! F28ef@annotation-expression (lambda (F29bc@x) (if (pair? F29bc@x) (cons (car F29bc@x) (cdr F29bc@x)) (if (procedure? F29bc@x) (set-source-info! F29bc@x '#f) F29bc@x)))) (set! F2a1b@F28ef@annotation-expression F28ef@annotation-expression) (set! F28f1@scm->fasl (lambda (F29be@filename) (string-append (F2905@mosh-cache-dir) '"/" (F28e5@library-file-path->cache-path F29be@filename) '".mosh-fasl"))) (set! F2a1c@F28f1@scm->fasl F28f1@scm->fasl) (set! F28f3@fasl-save (lambda (F29c0@filename F29c1@obj) (call-with-port (open-file-output-port F29c0@filename) (lambda (F29c4@port) ((symbol-value 'fasl-write!) F29c1@obj F29c4@port))))) (set! F2a1d@F28f3@fasl-save F28f3@fasl-save) (set! F28f5@fasl-load (lambda (F29c6@filename) (call-with-port (open-file-input-port F29c6@filename) (symbol-value 'fasl-read!)))) (set! F2a1e@F28f5@fasl-load F28f5@fasl-load) (set! F28f7@verbose? (symbol-value '%verbose)) (set! F2a1f@F28f7@verbose? F28f7@verbose?) (set! F28f9@serialize-library (lambda (F29c8@filename F29c9@obj) (begin (if F28f7@verbose? (format (current-error-port) '"serialize-library ~a\n..." F29c8@filename) (void)) (let ((F29cc@expanded2core (symbol-value 'expanded2core))) (let ((F29ce@compile (symbol-value 'compile-w/o-halt))) (let ((F29d0@code F29c9@obj)) (let ((F29d2@pivot (cddddr (cddddr F29d0@code)))) (let ((F29d4@visit (F29ce@compile (F29cc@expanded2core (car F29d2@pivot))))) (begin (set-car! F29d2@pivot F29d4@visit) (let ((F29d6@pivot (cdr F29d2@pivot))) (let ((F29d8@invoke (F29ce@compile (F29cc@expanded2core (car F29d6@pivot))))) (set-car! F29d6@pivot F29d8@invoke))))))))) (let ((F29da@fasl-file (F28f1@scm->fasl F29c8@filename))) (begin (if (file-exists? F29da@fasl-file) (delete-file F29da@fasl-file) (void)) ((call/cc (lambda (F29de@F29dc) (lambda () (with-exception-handler (lambda (F29e0@c1) ((call/cc (lambda (F29e2@F29dd) (F29de@F29dc (lambda () (if '#t (begin (if F28f7@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" F29c8@filename) (void)) (if (file-exists? F29da@fasl-file) (delete-file F29da@fasl-file) (void)) '#f) (F29e2@F29dd (lambda () (raise-continuable F29e0@c1)))))))))) (lambda () (F28f3@fasl-save F29da@fasl-file F29c9@obj)))))))))))) (set! F2a20@F28f9@serialize-library F28f9@serialize-library) (set! F28fb@load-serialized-library (lambda (F29e4@filename F29e5@obj) (and (F2905@mosh-cache-dir) (let ((F29e8@fasl-file (F28f1@scm->fasl F29e4@filename))) (if (and (file-exists? F29e8@fasl-file) ((symbol-value 'file-newer?) F29e8@fasl-file F29e4@filename)) (let ((F29ea@expanded2core (symbol-value 'expanded2core))) (let ((F29ec@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((F29ee@code (F28f5@fasl-load F29e8@fasl-file))) (let ((F29f0@pivot (cddddr (cddddr F29ee@code)))) (let ((F29f2@visit (car F29f0@pivot))) (let ((F29f4@visit-proc (lambda () (F29ec@eval-compiled-core F29f2@visit)))) (begin (set-car! F29f0@pivot F29f4@visit-proc) (let ((F29f6@pivot (cdr F29f0@pivot))) (let ((F29f8@invoke (car F29f6@pivot))) (begin (set-car! F29f6@pivot (lambda () (F29ec@eval-compiled-core F29f8@invoke))) (apply F29e5@obj F29ee@code))))))))))) '#f))))) (set! F2a21@F28fb@load-serialized-library F28fb@load-serialized-library) (set! F28fd@make-record-printer (lambda (F29fa@name F29fb@printer) (lambda F29fe@x (begin (display '"record printer") (for-each display F29fe@x))))) (set! F2a22@F28fd@make-record-printer F28fd@make-record-printer) (set! F28ff@compile-core (lambda F2a00@x (apply error 'comile-core '"not implementated" F2a00@x))) (set! F2a23@F28ff@compile-core F28ff@compile-core) (set! F2901@read-library-source-file (lambda (F2a02@file-name) (with-input-from-file F2a02@file-name F28e7@read-annotated))) (set! F2a24@F2901@read-library-source-file F2901@read-library-source-file) (set! F2903@make-parameter (lambda F2a12 (let ((F2a13 (length F2a12))) (if (= F2a13 '1) (apply (lambda (F2a04@x) (F2903@make-parameter F2a04@x (lambda (F2a06@x) F2a06@x))) F2a12) (if (= F2a13 '2) (apply (lambda (F2a08@x F2a09@fender) (let ((F2a0c@x (F2a09@fender F2a08@x))) (lambda F2a10 (let ((F2a11 (length F2a10))) (if (= F2a11 '0) (apply (lambda () F2a0c@x) F2a10) (if (= F2a11 '1) (apply (lambda (F2a0e@v) (set! F2a0c@x (F2a09@fender F2a0e@v))) F2a10) (error 'apply '"invalid arg count"))))))) F2a12) (error 'apply '"invalid arg count")))))) (set! F2a25@F2903@make-parameter F2903@make-parameter) (set! F2905@mosh-cache-dir (F2903@make-parameter '#f)) (set! F2a26@F2905@mosh-cache-dir F2905@mosh-cache-dir) (set! F299b@file-options-spec (lambda (F2a14@x) F2a14@x)) (set! F2a27@F299b@file-options-spec F299b@file-options-spec) (void))
(begin (set! F2a2d@current-primitive-locations (unspecified)) (set! F2a2f@mutable? (unspecified)) (set! F2a31@rewriter (unspecified)) (set! F2a33@expanded->core (unspecified)) (set! F2a35@compile-core-expr (unspecified)) (set! F2a37@pretty-print (unspecified)) (set! F2a39@compile-core-expr-to-port (unspecified)) (set! F2a2d@current-primitive-locations (F2a25@F2903@make-parameter (lambda (F2a3a@x) '#f) (lambda (F2a3c@p) F2a3c@p))) (set! F2a78@F2a2d@current-primitive-locations F2a2d@current-primitive-locations) (set! F2a2f@mutable? (lambda (F2a3e@x) (or (pair? F2a3e@x) (vector? F2a3e@x) (hashtable? F2a3e@x)))) (set! F2a79@F2a2f@mutable? F2a2f@mutable?) (set! F2a31@rewriter (lambda (F2a40@quote-hack?) (let ((F2a43@f '#f)) (begin (set! F2a43@f (lambda (F2a44@x) (if (pair? F2a44@x) (let ((F2a46@t (car F2a44@x))) (if (memv F2a46@t '(quote)) (if (and F2a40@quote-hack? (F2a2f@mutable? (cadr F2a44@x))) (let ((F2a48@g (gensym))) (begin (set-symbol-value! F2a48@g (cadr F2a44@x)) F2a48@g)) F2a44@x) (if (memv F2a46@t '(case-lambda)) (cons 'case-lambda (map (lambda (F2a4a@x) (cons (car F2a4a@x) (map F2a43@f (cdr F2a4a@x)))) (cdr F2a44@x))) (if (memv F2a46@t '(lambda)) (cons* 'lambda (cadr F2a44@x) (map F2a43@f (cddr F2a44@x))) (if (memv F2a46@t '(letrec)) (let ((F2a4c@bindings (cadr F2a44@x)) (F2a4d@body* (cddr F2a44@x))) (let ((F2a50@lhs* (map car F2a4c@bindings)) (F2a51@rhs* (map cadr F2a4c@bindings))) (cons* 'letrec (map list F2a50@lhs* (map F2a43@f F2a51@rhs*)) (map F2a43@f F2a4d@body*)))) (if (memv F2a46@t '(letrec*)) (let ((F2a54@bindings (cadr F2a44@x)) (F2a55@body* (cddr F2a44@x))) (let ((F2a58@lhs* (map car F2a54@bindings)) (F2a59@rhs* (map cadr F2a54@bindings))) (cons* 'letrec* (map list F2a58@lhs* (map F2a43@f F2a59@rhs*)) (map F2a43@f F2a55@body*)))) (if (memv F2a46@t '(library-letrec*)) (let ((F2a5c@name (cadr F2a44@x)) (F2a5d@x (cdr F2a44@x))) (let ((F2a60@bindings (cadr F2a5d@x)) (F2a61@body* (cddr F2a5d@x))) (let ((F2a64@lhs* (map car F2a60@bindings)) (F2a65@lhs** (map cadr F2a60@bindings)) (F2a66@rhs* (map caddr F2a60@bindings))) (cons* 'library-letrec* F2a5c@name (map list F2a64@lhs* F2a65@lhs** (map F2a43@f F2a66@rhs*)) (map F2a43@f F2a61@body*))))) (if (memv F2a46@t '(begin)) (cons 'begin (map F2a43@f (cdr F2a44@x))) (if (memv F2a46@t '(set!)) (list 'set! (cadr F2a44@x) (F2a43@f (caddr F2a44@x))) (if (memv F2a46@t '(primitive)) (let ((F2a6a@op (cadr F2a44@x))) (let ((F2a6c@t ((F2a2d@current-primitive-locations) F2a6a@op))) (if F2a6c@t ((lambda (F2a6e@loc) F2a6e@loc) F2a6c@t) F2a6a@op))) (if (memv F2a46@t '(define)) F2a44@x (if (list? F2a44@x) (map F2a43@f F2a44@x) (error 'rewrite '"invalid form ~s ~s" F2a44@x (list? F2a44@x)))))))))))))) F2a44@x))) F2a43@f)))) (set! F2a7a@F2a31@rewriter F2a31@rewriter) (set! F2a33@expanded->core (lambda (F2a70@x) ((F2a31@rewriter '#f) F2a70@x))) (set! F2a7b@F2a33@expanded->core F2a33@expanded->core) (set! F2a35@compile-core-expr (lambda (F2a72@x) ((F2a31@rewriter '#f) F2a72@x))) (set! F2a7c@F2a35@compile-core-expr F2a35@compile-core-expr) (set! F2a37@pretty-print write) (set! F2a7d@F2a37@pretty-print F2a37@pretty-print) (set! F2a39@compile-core-expr-to-port (lambda (F2a74@x F2a75@p) (F2a37@pretty-print ((F2a31@rewriter '#f) F2a74@x) F2a75@p))) (set! F2a7e@F2a39@compile-core-expr-to-port F2a39@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! F2acd@make-collection (unspecified)) (set! F2acf@current-library-collection (unspecified)) (set! F2ad1@rp (unspecified)) (set! F2adb@library? (unspecified)) (set! F2add@library-id (unspecified)) (set! F2adf@set-library-id! (unspecified)) (set! F2ae1@library-name (unspecified)) (set! F2ae3@set-library-name! (unspecified)) (set! F2ae5@library-version (unspecified)) (set! F2ae7@set-library-version! (unspecified)) (set! F2ae9@library-imp* (unspecified)) (set! F2aeb@set-library-imp*! (unspecified)) (set! F2aed@library-vis* (unspecified)) (set! F2aef@set-library-vis*! (unspecified)) (set! F2af1@library-inv* (unspecified)) (set! F2af3@set-library-inv*! (unspecified)) (set! F2af5@library-subst (unspecified)) (set! F2af7@set-library-subst! (unspecified)) (set! F2af9@library-env (unspecified)) (set! F2afb@set-library-env! (unspecified)) (set! F2afd@library-visit-state (unspecified)) (set! F2aff@set-library-visit-state! (unspecified)) (set! F2b01@library-invoke-state (unspecified)) (set! F2b03@set-library-invoke-state! (unspecified)) (set! F2b05@library-visit-code (unspecified)) (set! F2b07@set-library-visit-code! (unspecified)) (set! F2b09@library-invoke-code (unspecified)) (set! F2b0b@set-library-invoke-code! (unspecified)) (set! F2b0d@library-visible? (unspecified)) (set! F2b0f@set-library-visible?! (unspecified)) (set! F2b11@library-source-file-name (unspecified)) (set! F2b13@set-library-source-file-name! (unspecified)) (set! F2b15@dummy (unspecified)) (set! F2b17@find-dependencies (unspecified)) (set! F2b19@find-library-by (unspecified)) (set! F2b1b@library-path (unspecified)) (set! F2b1d@library-extensions (unspecified)) (set! F2b1f@library-name->file-name (unspecified)) (set! F2b21@file-locator (unspecified)) (set! F2b23@serialize-all (unspecified)) (set! F2b25@current-precompiled-library-loader (unspecified)) (set! F2b27@try-load-from-file (unspecified)) (set! F2b29@library-loader (unspecified)) (set! F2b2b@current-library-expander (unspecified)) (set! F2b2d@external-pending-libraries (unspecified)) (set! F2b2f@find-external-library (unspecified)) (set! F2b31@find-library-by-name (unspecified)) (set! F2b33@library-exists? (unspecified)) (set! F2b35@find-library-by-spec/die (unspecified)) (set! F2b37@label->binding-table (unspecified)) (set! F2b39@install-library-record (unspecified)) (set! F2b3b@install-library (unspecified)) (set! F2b3d@imported-label->binding (unspecified)) (set! F2b3f@invoke-library (unspecified)) (set! F2b41@visit-library (unspecified)) (set! F2b43@invoke-library-by-spec (unspecified)) (set! F2b45@invoke-library-by-name (unspecified)) (set! F2b47@installed-libraries (unspecified)) (set! F2b49@library-spec (unspecified)) (set! F2acd@make-collection (lambda () (let ((F2b4a@set '())) (let ((F2b4d@set-cons '#f)) (begin (set! F2b4d@set-cons (lambda (F2b52@x F2b53@ls) (if (memq F2b52@x F2b53@ls) F2b53@ls (cons F2b52@x F2b53@ls)))) (lambda F2b50 (let ((F2b51 (length F2b50))) (if (= F2b51 '0) (apply (lambda () F2b4a@set) F2b50) (if (= F2b51 '1) (apply (lambda (F2b4e@x) (set! F2b4a@set (F2b4d@set-cons F2b4e@x F2b4a@set))) F2b50) (error 'apply '"invalid arg count")))))))))) (set! F2ccc@F2acd@make-collection F2acd@make-collection) (set! F2acf@current-library-collection (F2a25@F2903@make-parameter (F2acd@make-collection) (lambda (F2b56@x) (begin (if (not (procedure? F2b56@x)) (assertion-violation 'current-library-collection '"not a procedure" F2b56@x) (void)) F2b56@x)))) (set! F2ccd@F2acf@current-library-collection F2acf@current-library-collection) (set! F2ad1@rp (F2a22@F28fd@make-record-printer 'library (lambda (F2b58@x F2b59@p F2b5a@wr) (begin (if (not (F2adb@library? F2b58@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (F2ae5@library-version F2b58@x)) (F2ae1@library-name F2b58@x) (append (F2ae1@library-name F2b58@x) (list (F2ae5@library-version F2b58@x))))) F2b59@p))))) (set! F2cce@F2ad1@rp F2ad1@rp) (set! F2adb@library? (lambda (F2b5e@x) (and (simple-struct? F2b5e@x) (eq? (simple-struct-name F2b5e@x) 'library)))) (set! F2ccf@F2adb@library? F2adb@library?) (set! F2add@library-id (lambda (F2b60@x) (simple-struct-ref F2b60@x '0))) (set! F2cd0@F2add@library-id F2add@library-id) (set! F2adf@set-library-id! (lambda (F2b62@x F2b63@val) (simple-struct-set! F2b62@x '0 F2b63@val))) (set! F2cd1@F2adf@set-library-id! F2adf@set-library-id!) (set! F2ae1@library-name (lambda (F2b66@x) (simple-struct-ref F2b66@x '1))) (set! F2cd2@F2ae1@library-name F2ae1@library-name) (set! F2ae3@set-library-name! (lambda (F2b68@x F2b69@val) (simple-struct-set! F2b68@x '1 F2b69@val))) (set! F2cd3@F2ae3@set-library-name! F2ae3@set-library-name!) (set! F2ae5@library-version (lambda (F2b6c@x) (simple-struct-ref F2b6c@x '2))) (set! F2cd4@F2ae5@library-version F2ae5@library-version) (set! F2ae7@set-library-version! (lambda (F2b6e@x F2b6f@val) (simple-struct-set! F2b6e@x '2 F2b6f@val))) (set! F2cd5@F2ae7@set-library-version! F2ae7@set-library-version!) (set! F2ae9@library-imp* (lambda (F2b72@x) (simple-struct-ref F2b72@x '3))) (set! F2cd6@F2ae9@library-imp* F2ae9@library-imp*) (set! F2aeb@set-library-imp*! (lambda (F2b74@x F2b75@val) (simple-struct-set! F2b74@x '3 F2b75@val))) (set! F2cd7@F2aeb@set-library-imp*! F2aeb@set-library-imp*!) (set! F2aed@library-vis* (lambda (F2b78@x) (simple-struct-ref F2b78@x '4))) (set! F2cd8@F2aed@library-vis* F2aed@library-vis*) (set! F2aef@set-library-vis*! (lambda (F2b7a@x F2b7b@val) (simple-struct-set! F2b7a@x '4 F2b7b@val))) (set! F2cd9@F2aef@set-library-vis*! F2aef@set-library-vis*!) (set! F2af1@library-inv* (lambda (F2b7e@x) (simple-struct-ref F2b7e@x '5))) (set! F2cda@F2af1@library-inv* F2af1@library-inv*) (set! F2af3@set-library-inv*! (lambda (F2b80@x F2b81@val) (simple-struct-set! F2b80@x '5 F2b81@val))) (set! F2cdb@F2af3@set-library-inv*! F2af3@set-library-inv*!) (set! F2af5@library-subst (lambda (F2b84@x) (simple-struct-ref F2b84@x '6))) (set! F2cdc@F2af5@library-subst F2af5@library-subst) (set! F2af7@set-library-subst! (lambda (F2b86@x F2b87@val) (simple-struct-set! F2b86@x '6 F2b87@val))) (set! F2cdd@F2af7@set-library-subst! F2af7@set-library-subst!) (set! F2af9@library-env (lambda (F2b8a@x) (simple-struct-ref F2b8a@x '7))) (set! F2cde@F2af9@library-env F2af9@library-env) (set! F2afb@set-library-env! (lambda (F2b8c@x F2b8d@val) (simple-struct-set! F2b8c@x '7 F2b8d@val))) (set! F2cdf@F2afb@set-library-env! F2afb@set-library-env!) (set! F2afd@library-visit-state (lambda (F2b90@x) (simple-struct-ref F2b90@x '8))) (set! F2ce0@F2afd@library-visit-state F2afd@library-visit-state) (set! F2aff@set-library-visit-state! (lambda (F2b92@x F2b93@val) (simple-struct-set! F2b92@x '8 F2b93@val))) (set! F2ce1@F2aff@set-library-visit-state! F2aff@set-library-visit-state!) (set! F2b01@library-invoke-state (lambda (F2b96@x) (simple-struct-ref F2b96@x '9))) (set! F2ce2@F2b01@library-invoke-state F2b01@library-invoke-state) (set! F2b03@set-library-invoke-state! (lambda (F2b98@x F2b99@val) (simple-struct-set! F2b98@x '9 F2b99@val))) (set! F2ce3@F2b03@set-library-invoke-state! F2b03@set-library-invoke-state!) (set! F2b05@library-visit-code (lambda (F2b9c@x) (simple-struct-ref F2b9c@x '10))) (set! F2ce4@F2b05@library-visit-code F2b05@library-visit-code) (set! F2b07@set-library-visit-code! (lambda (F2b9e@x F2b9f@val) (simple-struct-set! F2b9e@x '10 F2b9f@val))) (set! F2ce5@F2b07@set-library-visit-code! F2b07@set-library-visit-code!) (set! F2b09@library-invoke-code (lambda (F2ba2@x) (simple-struct-ref F2ba2@x '11))) (set! F2ce6@F2b09@library-invoke-code F2b09@library-invoke-code) (set! F2b0b@set-library-invoke-code! (lambda (F2ba4@x F2ba5@val) (simple-struct-set! F2ba4@x '11 F2ba5@val))) (set! F2ce7@F2b0b@set-library-invoke-code! F2b0b@set-library-invoke-code!) (set! F2b0d@library-visible? (lambda (F2ba8@x) (simple-struct-ref F2ba8@x '12))) (set! F2ce8@F2b0d@library-visible? F2b0d@library-visible?) (set! F2b0f@set-library-visible?! (lambda (F2baa@x F2bab@val) (simple-struct-set! F2baa@x '12 F2bab@val))) (set! F2ce9@F2b0f@set-library-visible?! F2b0f@set-library-visible?!) (set! F2b11@library-source-file-name (lambda (F2bae@x) (simple-struct-ref F2bae@x '13))) (set! F2cea@F2b11@library-source-file-name F2b11@library-source-file-name) (set! F2b13@set-library-source-file-name! (lambda (F2bb0@x F2bb1@val) (simple-struct-set! F2bb0@x '13 F2bb1@val))) (set! F2ceb@F2b13@set-library-source-file-name! F2b13@set-library-source-file-name!) (set! F2b15@dummy '3) (set! F2cec@F2b15@dummy F2b15@dummy) (set! F2b17@find-dependencies (lambda (F2bb4@ls) (if (null? F2bb4@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! F2ced@F2b17@find-dependencies F2b17@find-dependencies) (set! F2b19@find-library-by (lambda (F2bb6@pred) (let F2bba@f ((F2bb8@ls ((F2acf@current-library-collection)))) (if (null? F2bb8@ls) '#f (if (F2bb6@pred (car F2bb8@ls)) (car F2bb8@ls) (F2bba@f (cdr F2bb8@ls))))))) (set! F2cee@F2b19@find-library-by F2b19@find-library-by) (set! F2b1b@library-path (F2a25@F2903@make-parameter '(".") (lambda (F2bbc@x) (if (and (list? F2bbc@x) (for-all string? F2bbc@x)) (map (lambda (F2bbe@x) F2bbe@x) F2bbc@x) (assertion-violation 'library-path '"not a list of strings" F2bbc@x))))) (set! F2cef@F2b1b@library-path F2b1b@library-path) (set! F2b1d@library-extensions (F2a25@F2903@make-parameter '(".sls" ".ss" ".scm") (lambda (F2bc0@x) (if (and (list? F2bc0@x) (for-all string? F2bc0@x)) (map (lambda (F2bc2@x) F2bc2@x) F2bc0@x) (assertion-violation 'library-extensions '"not a list of strings" F2bc0@x))))) (set! F2cf0@F2b1d@library-extensions F2b1d@library-extensions) (set! F2b1f@library-name->file-name (lambda (F2bc4@x) (call-with-values (lambda () (open-string-output-port)) (lambda (F2bca@F2bc7 F2bcb@F2bc9) (let ((F2bce@extract F2bcb@F2bc9) (F2bcf@p F2bca@F2bc7)) (let ((F2bd3@display-hex '#f)) (begin (set! F2bd3@display-hex (lambda (F2bdc@n) (if (<= '0 F2bdc@n '9) (display F2bdc@n F2bcf@p) (display (integer->char (+ (char->integer '#\a) (- F2bdc@n '10))) F2bcf@p)))) (begin (let F2bd6@f ((F2bd4@ls F2bc4@x)) (if (not (null? F2bd4@ls)) (begin (display '"/" F2bcf@p) (for-each (lambda (F2bd8@c) (if (or (char<=? '#\a F2bd8@c '#\z) (char<=? '#\A F2bd8@c '#\Z) (char<=? '#\0 F2bd8@c '#\9) (memv F2bd8@c '(#\- #\. #\_ #\~))) (display F2bd8@c F2bcf@p) (begin (display '"%" F2bcf@p) (let ((F2bda@n (char->integer F2bd8@c))) (begin (F2bd3@display-hex (quotient F2bda@n '16)) (F2bd3@display-hex (remainder F2bda@n '16))))))) (string->list (symbol->string (car F2bd4@ls)))) (F2bd6@f (cdr F2bd4@ls))) (void))) (F2bce@extract))))))))) (set! F2cf1@F2b1f@library-name->file-name F2b1f@library-name->file-name) (set! F2b21@file-locator (F2a25@F2903@make-parameter (lambda (F2bde@x) (let ((F2be0@str (F2b1f@library-name->file-name F2bde@x))) (let F2be8@f ((F2be2@ls (F2b1b@library-path)) (F2be3@exts (F2b1d@library-extensions)) (F2be4@failed-list '())) (if (null? F2be2@ls) (let ((F2bf2@F2bed '#f) (F2bf4@F2bef '#f) (F2bf6@F2bee '#f) (F2bf9@F2bec '#f) (F2bfb@make-library-resolution-condition '#f) (F2bfd@F2bea '#f) (F2bff@F2beb '#f) (F2c01@library-resolution-condition? '#f) (F2c03@condition-library '#f) (F2c05@condition-files '#f)) (begin (set! F2bf2@F2bed (make-record-type-descriptor '&library-resolution F4f08@F4c4f@&condition-rtd 'F2bf0 '#f '#f '#((immutable library) (immutable files)))) (set! F2bf4@F2bef '#f) (set! F2bf6@F2bee (make-record-constructor-descriptor F2bf2@F2bed F4f09@F4c51@&condition-rcd F2bf4@F2bef)) (set! F2bf9@F2bec (record-predicate F2bf2@F2bed)) (set! F2bfb@make-library-resolution-condition (record-constructor F2bf6@F2bee)) (set! F2bfd@F2bea (record-accessor F2bf2@F2bed '0)) (set! F2bff@F2beb (record-accessor F2bf2@F2bed '1)) (set! F2c01@library-resolution-condition? (condition-predicate F2bf2@F2bed)) (set! F2c03@condition-library (condition-accessor F2bf2@F2bed F2bfd@F2bea)) (set! F2c05@condition-files (condition-accessor F2bf2@F2bed F2bff@F2beb)) (raise (condition (F4f28@F4ce9@make-error) (F4f4a@F4d45@make-who-condition 'expander) (F4f0e@F4ca6@make-message-condition '"cannot locate library in library-path") (F2bfb@make-library-resolution-condition F2bde@x (reverse F2be4@failed-list)))))) (if (null? F2be3@exts) (F2be8@f (cdr F2be2@ls) (F2b1d@library-extensions) F2be4@failed-list) (let ((F2c06@name (string-append (car F2be2@ls) F2be0@str (car F2be3@exts)))) (if (file-exists? F2c06@name) F2c06@name (F2be8@f F2be2@ls (cdr F2be3@exts) (cons F2c06@name F2be4@failed-list))))))))) (lambda (F2c08@f) (if (procedure? F2c08@f) F2c08@f (assertion-violation 'file-locator '"not a procedure" F2c08@f))))) (set! F2cf2@F2b21@file-locator F2b21@file-locator) (set! F2b23@serialize-all (lambda (F2c0a@serialize F2c0b@compile) (let ((F2c0f@library-desc '#f)) (begin (set! F2c0f@library-desc (lambda (F2c12@x) (list (F2add@library-id F2c12@x) (F2ae1@library-name F2c12@x)))) (for-each (lambda (F2c10@x) (if (F2b11@library-source-file-name F2c10@x) (F2c0a@serialize (F2b11@library-source-file-name F2c10@x) (list (F2add@library-id F2c10@x) (F2ae1@library-name F2c10@x) (F2ae5@library-version F2c10@x) (map F2c0f@library-desc (F2ae9@library-imp* F2c10@x)) (map F2c0f@library-desc (F2aed@library-vis* F2c10@x)) (map F2c0f@library-desc (F2af1@library-inv* F2c10@x)) (F2af5@library-subst F2c10@x) (F2af9@library-env F2c10@x) (F2c0b@compile (F2b05@library-visit-code F2c10@x)) (F2c0b@compile (F2b09@library-invoke-code F2c10@x)) (F2b0d@library-visible? F2c10@x))) (void))) ((F2acf@current-library-collection))))))) (set! F2cf3@F2b23@serialize-all F2b23@serialize-all) (set! F2b25@current-precompiled-library-loader (F2a25@F2903@make-parameter (lambda (F2c14@filename F2c15@sk) '#f))) (set! F2cf4@F2b25@current-precompiled-library-loader F2b25@current-precompiled-library-loader) (set! F2b27@try-load-from-file (lambda (F2c18@filename) ((F2b25@current-precompiled-library-loader) F2c18@filename (lambda F2c3e (let ((F2c3f (length F2c3e))) (if (= F2c3f '11) (apply (lambda (F2c1a@id F2c1b@name F2c1c@ver F2c1d@imp* F2c1e@vis* F2c1f@inv* F2c20@exp-subst F2c21@exp-env F2c22@visit-proc F2c23@invoke-proc F2c24@visible?) (let F2c32@f ((F2c30@deps (append F2c1d@imp* F2c1e@vis* F2c1f@inv*))) (if (null? F2c30@deps) (begin (F2b3b@install-library F2c1a@id F2c1b@name F2c1c@ver F2c1d@imp* F2c1e@vis* F2c1f@inv* F2c20@exp-subst F2c21@exp-env F2c22@visit-proc F2c23@invoke-proc '#f '#f F2c24@visible? '#f) '#t) (let ((F2c34@d (car F2c30@deps))) (let ((F2c36@label (car F2c34@d)) (F2c37@dname (cadr F2c34@d))) (let ((F2c3a@l (F2b31@find-library-by-name F2c37@dname))) (if (and (F2adb@library? F2c3a@l) (eq? F2c36@label (F2add@library-id F2c3a@l))) (F2c32@f (cdr F2c30@deps)) (begin (if F2a1f@F28f7@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" F2c1b@name F2c37@dname F2c18@filename F2c3a@l F2c36@label (F2add@library-id F2c3a@l)) (void)) '#f)))))))) F2c3e) (if (>= F2c3f '0) (apply (lambda F2c3c@others '#f) F2c3e) (error 'apply '"invalid arg count")))))))) (set! F2cf5@F2b27@try-load-from-file F2b27@try-load-from-file) (set! F2b29@library-loader (F2a25@F2903@make-parameter (lambda (F2c40@x) (let ((F2c42@file-name ((F2b21@file-locator) F2c40@x))) (if (not F2c42@file-name) (assertion-violation '#f '"cannot file library" F2c40@x) (or (F2b27@try-load-from-file F2c42@file-name) ((F2b2b@current-library-expander) (F2a24@F2901@read-library-source-file F2c42@file-name) F2c42@file-name (lambda (F2c44@name) (if (not (fast-equal? F2c44@name F2c40@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (F2c4a@F2c47 F2c4b@F2c49) (let ((F2c4e@e F2c4b@F2c49) (F2c4f@p F2c4a@F2c47)) (begin (display '"expected to find library " F2c4f@p) (write F2c40@x F2c4f@p) (display '" in file " F2c4f@p) (display F2c42@file-name F2c4f@p) (display '", found " F2c4f@p) (write F2c44@name F2c4f@p) (display '" instead" F2c4f@p) (F2c4e@e)))))) (void)))))))) (lambda (F2c52@f) (if (procedure? F2c52@f) F2c52@f (assertion-violation 'library-locator '"not a procedure" F2c52@f))))) (set! F2cf6@F2b29@library-loader F2b29@library-loader) (set! F2b2b@current-library-expander (F2a25@F2903@make-parameter (lambda (F2c54@x) (assertion-violation 'library-expander '"not initialized")) (lambda (F2c56@f) (if (procedure? F2c56@f) F2c56@f (assertion-violation 'library-expander '"not a procedure" F2c56@f))))) (set! F2cf7@F2b2b@current-library-expander F2b2b@current-library-expander) (set! F2b2d@external-pending-libraries (F2a25@F2903@make-parameter '())) (set! F2cf8@F2b2d@external-pending-libraries F2b2d@external-pending-libraries) (set! F2b2f@find-external-library (lambda (F2c58@name) (begin (if (member F2c58@name (F2b2d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" F2c58@name) (void)) (let ((F2c5e@F2c5b F2b2d@external-pending-libraries) (F2c5f@F2c5d (cons F2c58@name (F2b2d@external-pending-libraries)))) (let ((F2c62@swap (lambda () (let ((F2c64@t (F2c5e@F2c5b))) (begin (F2c5e@F2c5b F2c5f@F2c5d) (set! F2c5f@F2c5d F2c64@t)))))) (dynamic-wind F2c62@swap (lambda () (begin ((F2b29@library-loader) F2c58@name) (or (F2b19@find-library-by (lambda (F2c66@x) (fast-equal? (F2ae1@library-name F2c66@x) F2c58@name))) (assertion-violation '#f '"handling external library did not yield the correct library" F2c58@name)))) F2c62@swap)))))) (set! F2cf9@F2b2f@find-external-library F2b2f@find-external-library) (set! F2b31@find-library-by-name (lambda (F2c68@name) (or (F2b19@find-library-by (lambda (F2c6a@x) (fast-equal? (F2ae1@library-name F2c6a@x) F2c68@name))) (F2b2f@find-external-library F2c68@name)))) (set! F2cfa@F2b31@find-library-by-name F2b31@find-library-by-name) (set! F2b33@library-exists? (lambda (F2c6c@name) (and (F2b19@find-library-by (lambda (F2c6e@x) (fast-equal? (F2ae1@library-name F2c6e@x) F2c6c@name))) '#t))) (set! F2cfb@F2b33@library-exists? F2b33@library-exists?) (set! F2b35@find-library-by-spec/die (lambda (F2c70@spec) (let ((F2c72@id (car F2c70@spec))) (or (F2b19@find-library-by (lambda (F2c74@x) (eq? F2c72@id (F2add@library-id F2c74@x)))) (assertion-violation '#f '"cannot find library with required spec" F2c70@spec))))) (set! F2cfc@F2b35@find-library-by-spec/die F2b35@find-library-by-spec/die) (set! F2b37@label->binding-table (make-eq-hashtable)) (set! F2cfd@F2b37@label->binding-table F2b37@label->binding-table) (set! F2b39@install-library-record (lambda (F2c76@lib) (begin (let ((F2c78@exp-env (F2af9@library-env F2c76@lib))) (for-each (lambda (F2c7a@x) (let ((F2c7c@label (car F2c7a@x)) (F2c7d@binding (cdr F2c7a@x))) (let ((F2c80@binding (let ((F2c82@t (car F2c7d@binding))) (if (memv F2c82@t '(global)) (cons 'global (cons F2c76@lib (cdr F2c7d@binding))) (if (memv F2c82@t '(global-macro)) (cons 'global-macro (cons F2c76@lib (cdr F2c7d@binding))) (if (memv F2c82@t '(global-macro!)) (cons 'global-macro! (cons F2c76@lib (cdr F2c7d@binding))) F2c7d@binding)))))) (begin (if (hashtable-ref F2b37@label->binding-table F2c7c@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" F2c7c@label (hashtable-ref F2b37@label->binding-table F2c7c@label '#f) F2c80@binding) (exit)) (void)) (hashtable-set! F2b37@label->binding-table F2c7c@label F2c80@binding))))) F2c78@exp-env)) ((F2acf@current-library-collection) F2c76@lib)))) (set! F2cfe@F2b39@install-library-record F2b39@install-library-record) (set! F2b3b@install-library (lambda (F2c84@id F2c85@name F2c86@ver F2c87@imp* F2c88@vis* F2c89@inv* F2c8a@exp-subst F2c8b@exp-env F2c8c@visit-proc F2c8d@invoke-proc F2c8e@visit-code F2c8f@invoke-code F2c90@visible? F2c91@source-file-name) (let ((F2ca0@imp-lib* (map F2b35@find-library-by-spec/die F2c87@imp*)) (F2ca1@vis-lib* (map F2b35@find-library-by-spec/die F2c88@vis*)) (F2ca2@inv-lib* (map F2b35@find-library-by-spec/die F2c89@inv*))) (begin (if (not (and (symbol? F2c84@id) (list? F2c85@name) (list? F2c86@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" F2c84@id F2c85@name F2c86@ver) (void)) (if (F2b33@library-exists? F2c85@name) (assertion-violation 'install-library '"library is already installed" F2c85@name) (void)) (let ((F2ca6@lib (make-simple-struct 'library '15 (list F2c84@id F2c85@name F2c86@ver F2ca0@imp-lib* F2ca1@vis-lib* F2ca2@inv-lib* F2c8a@exp-subst F2c8b@exp-env F2c8c@visit-proc F2c8d@invoke-proc F2c8e@visit-code F2c8f@invoke-code F2c90@visible? F2c91@source-file-name)))) (F2b39@install-library-record F2ca6@lib)))))) (set! F2cff@F2b3b@install-library F2b3b@install-library) (set! F2b3d@imported-label->binding (lambda (F2ca8@lab) (hashtable-ref F2b37@label->binding-table F2ca8@lab '#f))) (set! F2d00@F2b3d@imported-label->binding F2b3d@imported-label->binding) (set! F2b3f@invoke-library (lambda (F2caa@lib) (let ((F2cac@invoke (F2b01@library-invoke-state F2caa@lib))) (if (procedure? F2cac@invoke) (begin (F2b03@set-library-invoke-state! F2caa@lib (lambda () (assertion-violation 'invoke '"circularity detected" F2caa@lib))) (for-each F2b3f@invoke-library (F2af1@library-inv* F2caa@lib)) (F2b03@set-library-invoke-state! F2caa@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" F2caa@lib))) (F2cac@invoke) (F2b03@set-library-invoke-state! F2caa@lib '#t)) (void))))) (set! F2d01@F2b3f@invoke-library F2b3f@invoke-library) (set! F2b41@visit-library (lambda (F2cae@lib) (let ((F2cb0@visit (F2afd@library-visit-state F2cae@lib))) (if (procedure? F2cb0@visit) (begin (F2aff@set-library-visit-state! F2cae@lib (lambda () (assertion-violation 'visit '"circularity detected" F2cae@lib))) (for-each F2b3f@invoke-library (F2aed@library-vis* F2cae@lib)) (F2aff@set-library-visit-state! F2cae@lib (lambda () (assertion-violation 'invoke '"first visit did not return" F2cae@lib))) (F2cb0@visit) (F2aff@set-library-visit-state! F2cae@lib '#t)) (void))))) (set! F2d02@F2b41@visit-library F2b41@visit-library) (set! F2b43@invoke-library-by-spec (lambda (F2cb2@spec) (F2b3f@invoke-library (F2b35@find-library-by-spec/die F2cb2@spec)))) (set! F2d03@F2b43@invoke-library-by-spec F2b43@invoke-library-by-spec) (set! F2b45@invoke-library-by-name (lambda (F2cb4@name) (let ((F2cba@F2cb7 F2a26@F2905@mosh-cache-dir) (F2cbb@F2cb9 (create-mosh-cache-dir))) (let ((F2cbe@swap (lambda () (let ((F2cc0@t (F2cba@F2cb7))) (begin (F2cba@F2cb7 F2cbb@F2cb9) (set! F2cbb@F2cb9 F2cc0@t)))))) (dynamic-wind F2cbe@swap (lambda () (F2b3f@invoke-library (F2b31@find-library-by-name F2cb4@name))) F2cbe@swap))))) (set! F2d04@F2b45@invoke-library-by-name F2b45@invoke-library-by-name) (set! F2b47@installed-libraries (lambda F2cc8 (let ((F2cc9 (length F2cc8))) (if (= F2cc9 '1) (apply (lambda (F2cc2@all?) (let F2cc6@f ((F2cc4@ls ((F2acf@current-library-collection)))) (if (null? F2cc4@ls) '() (if (or F2cc2@all? (F2b0d@library-visible? (car F2cc4@ls))) (cons (car F2cc4@ls) (F2cc6@f (cdr F2cc4@ls))) (F2cc6@f (cdr F2cc4@ls)))))) F2cc8) (if (= F2cc9 '0) (apply (lambda () (F2b47@installed-libraries '#f)) F2cc8) (error 'apply '"invalid arg count")))))) (set! F2d05@F2b47@installed-libraries F2b47@installed-libraries) (set! F2b49@library-spec (lambda (F2cca@x) (begin (if (not (F2adb@library? F2cca@x)) (assertion-violation 'library-spec '"not a library" F2cca@x) (void)) (list (F2add@library-id F2cca@x) (F2ae1@library-name F2cca@x) (F2ae5@library-version F2cca@x))))) (set! F2d06@F2b49@library-spec F2b49@library-spec) (void))
(begin (set! F2d0a@build-global-define (unspecified)) (set! F2d7b@build-lambda (unspecified)) (set! F2d7d@build-case-lambda (unspecified)) (set! F2dab@build-sequence (unspecified)) (set! F2dad@build-void (unspecified)) (set! F2daf@build-letrec (unspecified)) (set! F2db1@build-let (unspecified)) (set! F2db3@build-named-let (unspecified)) (set! F2db5@build-letrec* (unspecified)) (set! F2db7@build-library-letrec* (unspecified)) (set! F2db9@build-receive (unspecified)) (set! F2d0a@build-global-define (lambda (F2dba@x) (F2dad@build-void))) (set! F2e4e@F2d0a@build-global-define F2d0a@build-global-define) (set! F2d7b@build-lambda (lambda (F2dbc@ae F2dbd@vars F2dbe@exp) (list 'lambda F2dbd@vars F2dbe@exp))) (set! F2e4f@F2d7b@build-lambda F2d7b@build-lambda) (set! F2d7d@build-case-lambda (lambda (F2dc2@ae F2dc3@vars* F2dc4@exp*) (let ((F2dc9@build-error '#f) (F2dcb@build-pred '#f) (F2dcd@build-apply '#f) (F2dcf@expand-case-lambda '#f)) (begin (set! F2dc9@build-error (lambda (F2e00@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! F2dcb@build-pred (lambda (F2de8@ae F2de9@n F2dea@vars) (call-with-values (lambda () (let F2df6@f ((F2df2@vars F2dea@vars) (F2df3@count '0)) (if (pair? F2df2@vars) (F2df6@f (cdr F2df2@vars) (+ F2df3@count '1)) (if (null? F2df2@vars) (values F2df3@count '=) (values F2df3@count '>=))))) (lambda (F2df8@F2def F2df9@F2df1) (let ((F2dfc@pred F2df9@F2df1) (F2dfd@count F2df8@F2def)) (list (list 'primitive F2dfc@pred) F2de9@n (list 'quote F2dfd@count))))))) (set! F2dcd@build-apply (lambda (F2de0@ae F2de1@g F2de2@vars F2de3@exp) (list '(primitive apply) (F2d7b@build-lambda F2de0@ae F2de2@vars F2de3@exp) F2de1@g))) (set! F2dcf@expand-case-lambda (lambda (F2dd0@ae F2dd1@vars F2dd2@exp*) (let ((F2dd6@g (gensym)) (F2dd7@n (gensym))) (list 'lambda F2dd6@g (F2db1@build-let F2dd0@ae (list F2dd7@n) (list (list '(primitive length) F2dd6@g)) (let F2dde@f ((F2dda@vars* F2dc3@vars*) (F2ddb@exp* F2dd2@exp*)) (if (null? F2dda@vars*) (F2dc9@build-error F2dd0@ae) (list 'if (F2dcb@build-pred F2dd0@ae F2dd7@n (car F2dda@vars*)) (F2dcd@build-apply F2dd0@ae F2dd6@g (car F2dda@vars*) (car F2ddb@exp*)) (F2dde@f (cdr F2dda@vars*) (cdr F2ddb@exp*)))))))))) (if (= (length F2dc4@exp*) '1) (F2d7b@build-lambda F2dc2@ae (car F2dc3@vars*) (car F2dc4@exp*)) (F2dcf@expand-case-lambda F2dc2@ae F2dc3@vars* F2dc4@exp*)))))) (set! F2e50@F2d7d@build-case-lambda F2d7d@build-case-lambda) (set! F2dab@build-sequence (lambda (F2e02@ae F2e03@exps) (let F2e08@loop ((F2e06@exps F2e03@exps)) (if (null? (cdr F2e06@exps)) (car F2e06@exps) (if (equal? (car F2e06@exps) (F2dad@build-void)) (F2e08@loop (cdr F2e06@exps)) (cons 'begin F2e06@exps)))))) (set! F2e51@F2dab@build-sequence F2dab@build-sequence) (set! F2dad@build-void (lambda () '((primitive void)))) (set! F2e52@F2dad@build-void F2dad@build-void) (set! F2daf@build-letrec (lambda (F2e0a@ae F2e0b@vars F2e0c@val-exps F2e0d@body-exp) (if (null? F2e0b@vars) F2e0d@body-exp (list 'letrec (map list F2e0b@vars F2e0c@val-exps) F2e0d@body-exp)))) (set! F2e53@F2daf@build-letrec F2daf@build-letrec) (set! F2db1@build-let (lambda (F2e12@ae F2e13@vars F2e14@val-exps F2e15@body-exp) (if (null? F2e13@vars) F2e15@body-exp (list 'let (map list F2e13@vars F2e14@val-exps) F2e15@body-exp)))) (set! F2e54@F2db1@build-let F2db1@build-let) (set! F2db3@build-named-let (lambda (F2e1a@ae F2e1b@name F2e1c@vars F2e1d@val-exps F2e1e@body-exp) (list 'let F2e1b@name (map list F2e1c@vars F2e1d@val-exps) F2e1e@body-exp))) (set! F2e55@F2db3@build-named-let F2db3@build-named-let) (set! F2db5@build-letrec* (lambda (F2e24@ae F2e25@vars F2e26@val-exps F2e27@body-exp) (if (null? F2e25@vars) F2e27@body-exp (F2db1@build-let F2e24@ae F2e25@vars (map (lambda (F2e2c@x) (list 'quote '#f)) F2e25@vars) (F2dab@build-sequence F2e24@ae (append (map (lambda (F2e2e@lhs F2e2f@rhs) (list 'set! F2e2e@lhs F2e2f@rhs)) F2e25@vars F2e26@val-exps) (list F2e27@body-exp))))))) (set! F2e56@F2db5@build-letrec* F2db5@build-letrec*) (set! F2db7@build-library-letrec* (lambda (F2e32@ae F2e33@name F2e34@vars F2e35@locs F2e36@val-exps F2e37@body-exp) (cons 'begin (append (map (lambda (F2e3e@var) (cons 'set! (cons F2e3e@var '((unspecified))))) F2e34@vars) (append (apply append (map (lambda (F2e40@var F2e41@loc F2e42@val-exp) (list (list 'set! F2e40@var F2e42@val-exp) (list 'set! F2e41@loc F2e40@var))) F2e34@vars F2e35@locs F2e36@val-exps)) (list F2e37@body-exp)))))) (set! F2e57@F2db7@build-library-letrec* F2db7@build-library-letrec*) (set! F2db9@build-receive (lambda (F2e46@ae F2e47@vars F2e48@producer F2e49@body*) (begin (display '"************** in ") (cons 'receive (cons F2e47@vars (cons F2e48@producer F2e49@body*)))))) (set! F2e58@F2db9@build-receive F2db9@build-receive) (void))
(begin (set! F2e67@file-options-macro (unspecified)) (set! F2e69@set-cons (unspecified)) (set! F2e6b@set-union (unspecified)) (set! F2e70@top-mark* (unspecified)) (set! F2e72@top-marked? (unspecified)) (set! F2e74@gen-lexical (unspecified)) (set! F2e76@gen-global (unspecified)) (set! F2e78@gen-label (unspecified)) (set! F2e7a@gen-top-level-label (unspecified)) (set! F2e7c@gen-define-label+loc (unspecified)) (set! F2e7e@gen-define-label (unspecified)) (set! F2e88@rib? (unspecified)) (set! F2e8a@rib-sym* (unspecified)) (set! F2e8c@set-rib-sym*! (unspecified)) (set! F2e8e@rib-mark** (unspecified)) (set! F2e90@set-rib-mark**! (unspecified)) (set! F2e92@rib-label* (unspecified)) (set! F2e94@set-rib-label*! (unspecified)) (set! F2e96@rib-sealed/freq (unspecified)) (set! F2e98@set-rib-sealed/freq! (unspecified)) (set! F2e9a@rib-cache (unspecified)) (set! F2e9c@set-rib-cache! (unspecified)) (set! F2e9e@dummy (unspecified)) (set! F2ea0@make-empty-rib (unspecified)) (set! F2ea2@extend-rib! (unspecified)) (set! F2ea4@extend-rib/nc! (unspecified)) (set! F2ea6@make-rib-map (unspecified)) (set! F2ea8@seal-rib! (unspecified)) (set! F2eaa@unseal-rib! (unspecified)) (set! F2eac@make-full-rib (unspecified)) (set! F2eae@rp (unspecified)) (set! F2eb8@stx? (unspecified)) (set! F2eba@stx-expr (unspecified)) (set! F2ebc@set-stx-expr! (unspecified)) (set! F2ebe@stx-mark* (unspecified)) (set! F2ec0@set-stx-mark*! (unspecified)) (set! F2ec2@stx-subst* (unspecified)) (set! F2ec4@set-stx-subst*! (unspecified)) (set! F2ec6@stx-ae* (unspecified)) (set! F2ec8@set-stx-ae*! (unspecified)) (set! F2eca@dummy (unspecified)) (set! F2ecc@datum->stx (unspecified)) (set! F2ece@gen-mark (unspecified)) (set! F2ed0@anti-mark (unspecified)) (set! F2ed2@anti-mark? (unspecified)) (set! F2ed4@mkstx (unspecified)) (set! F2ed6@add-mark (unspecified)) (set! F2ed8@add-subst (unspecified)) (set! F2eda@syntax-kind? (unspecified)) (set! F2edc@syntax-vector->list (unspecified)) (set! F2ede@syntax-pair? (unspecified)) (set! F2ee0@syntax-vector? (unspecified)) (set! F2ee2@syntax-null? (unspecified)) (set! F2ee4@syntax-list? (unspecified)) (set! F2ee6@syntax-car (unspecified)) (set! F2ee8@syntax-cdr (unspecified)) (set! F2eea@syntax->list (unspecified)) (set! F2eec@id? (unspecified)) (set! F2eee@id->sym (unspecified)) (set! F2ef0@bound-id=? (unspecified)) (set! F2ef2@free-id=? (unspecified)) (set! F2ef4@valid-bound-ids? (unspecified)) (set! F2ef6@distinct-bound-ids? (unspecified)) (set! F2ef8@bound-id-member? (unspecified)) (set! F2efa@self-evaluating? (unspecified)) (set! F2efc@strip-annotations (unspecified)) (set! F2efe@strip (unspecified)) (set! F2f00@stx->datum (unspecified)) (set! F2f02@id->label (unspecified)) (set! F2f04@label->binding (unspecified)) (set! F2f06@make-binding (unspecified)) (set! F2f08@binding-type (unspecified)) (set! F2f0a@binding-value (unspecified)) (set! F2f0c@raise-unbound-error (unspecified)) (set! F2f0e@syntax-type (unspecified)) (set! F2f1c@sanitize-binding (unspecified)) (set! F2f1e@make-variable-transformer (unspecified)) (set! F2f20@variable-transformer? (unspecified)) (set! F2f22@variable-transformer-procedure (unspecified)) (set! F2f24@make-eval-transformer (unspecified)) (set! F3075@parse-define (unspecified)) (set! F3077@parse-define-syntax (unspecified)) (set! F3079@scheme-stx-hashtable (unspecified)) (set! F307b@scheme-stx (unspecified)) (set! F307d@lexical-var (unspecified)) (set! F307f@lexical-mutable? (unspecified)) (set! F3081@set-lexical-mutable! (unspecified)) (set! F3083@add-lexical (unspecified)) (set! F3085@add-lexicals (unspecified)) (set! F3087@letrec-helper (unspecified)) (set! F3089@let-transformer (unspecified)) (set! F308b@letrec-transformer (unspecified)) (set! F308d@letrec*-transformer (unspecified)) (set! F308f@fluid-let-syntax-transformer (unspecified)) (set! F3091@type-descriptor-transformer (unspecified)) (set! F3093@record-type-descriptor-transformer (unspecified)) (set! F3095@record-constructor-descriptor-transformer (unspecified)) (set! F3097@when-macro (unspecified)) (set! F3099@unless-macro (unspecified)) (set! F309b@if-transformer (unspecified)) (set! F309d@and-transformer (unspecified)) (set! F309f@or-transformer (unspecified)) (set! F30a1@case-macro (unspecified)) (set! F30a3@quote-transformer (unspecified)) (set! F30a5@case-lambda-transformer (unspecified)) (set! F30a7@lambda-transformer (unspecified)) (set! F30a9@bless (unspecified)) (set! F30ab@with-syntax-macro (unspecified)) (set! F30ad@invalid-fmls-error (unspecified)) (set! F30af@let-macro (unspecified)) (set! F30b1@let-values-macro (unspecified)) (set! F30b3@let*-values-macro (unspecified)) (set! F30b5@trace-lambda-macro (unspecified)) (set! F30b7@trace-define-macro (unspecified)) (set! F30b9@trace-define-syntax-macro (unspecified)) (set! F30bb@trace-let/rec-syntax (unspecified)) (set! F30bd@trace-let-syntax-macro (unspecified)) (set! F30bf@trace-letrec-syntax-macro (unspecified)) (set! F30c1@guard-macro (unspecified)) (set! F30c3@define-enumeration-macro (unspecified)) (set! F30c5@time-macro (unspecified)) (set! F30c7@delay-macro (unspecified)) (set! F30c9@assert-macro (unspecified)) (set! F30cb@endianness-macro (unspecified)) (set! F30cd@identifier-syntax-macro (unspecified)) (set! F30cf@do-macro (unspecified)) (set! F30d1@let*-macro (unspecified)) (set! F30d3@or-macro (unspecified)) (set! F30d5@and-macro (unspecified)) (set! F30d7@cond-macro (unspecified)) (set! F30d9@do-include (unspecified)) (set! F30db@include-macro (unspecified)) (set! F30dd@include-into-macro (unspecified)) (set! F30df@syntax-rules-macro (unspecified)) (set! F30e1@quasiquote-macro (unspecified)) (set! F30e3@quasisyntax-macro (unspecified)) (set! F30e5@define-struct-macro (unspecified)) (set! F30e7@define-record-type-macro (unspecified)) (set! F30e9@define-condition-type-macro (unspecified)) (set! F30eb@incorrect-usage-macro (unspecified)) (set! F30ed@parameterize-macro (unspecified)) (set! F30ef@foreign-call-transformer (unspecified)) (set! F30f1@convert-pattern (unspecified)) (set! F30f3@syntax-dispatch (unspecified)) (set! F30f5@ellipsis? (unspecified)) (set! F30f7@underscore? (unspecified)) (set! F30f9@verify-literals (unspecified)) (set! F30fb@syntax-case-transformer (unspecified)) (set! F30fd@ellipsis-map (unspecified)) (set! F30ff@syntax-transformer (unspecified)) (set! F3101@core-macro-transformer (unspecified)) (set! F3103@symbol-macro (unspecified)) (set! F3105@macro-transformer (unspecified)) (set! F3107@local-macro-transformer (unspecified)) (set! F3109@do-macro-call (unspecified)) (set! F310b@chi-macro (unspecified)) (set! F310d@chi-local-macro (unspecified)) (set! F310f@chi-global-macro (unspecified)) (set! F3111@chi-expr* (unspecified)) (set! F3113@chi-application (unspecified)) (set! F3115@chi-expr (unspecified)) (set! F3117@chi-set! (unspecified)) (set! F3119@verify-formals (unspecified)) (set! F311b@chi-lambda-clause (unspecified)) (set! F311d@chi-lambda-clause* (unspecified)) (set! F311f@chi-defun (unspecified)) (set! F3121@chi-rhs (unspecified)) (set! F3123@expand-interaction-rhs*/init* (unspecified)) (set! F3125@chi-rhs* (unspecified)) (set! F3127@find-bound=? (unspecified)) (set! F3129@find-dups (unspecified)) (set! F312b@chi-internal (unspecified)) (set! F312d@parse-module (unspecified)) (set! F3137@module-interface? (unspecified)) (set! F3139@module-interface-first-mark (unspecified)) (set! F313b@set-module-interface-first-mark! (unspecified)) (set! F313d@module-interface-exp-id-vec (unspecified)) (set! F313f@set-module-interface-exp-id-vec! (unspecified)) (set! F3141@module-interface-exp-lab-vec (unspecified)) (set! F3143@set-module-interface-exp-lab-vec! (unspecified)) (set! F3145@dummy (unspecified)) (set! F3147@module-interface-exp-id* (unspecified)) (set! F3149@chi-internal-module (unspecified)) (set! F314b@chi-body* (unspecified)) (set! F314d@expand-transformer (unspecified)) (set! F314f@parse-exports (unspecified)) (set! F3151@parse-library-name (unspecified)) (set! F3153@parse-library (unspecified)) (set! F3155@parse-import-spec* (unspecified)) (set! F3157@make-top-rib (unspecified)) (set! F3159@make-collector (unspecified)) (set! F315b@inv-collector (unspecified)) (set! F315d@vis-collector (unspecified)) (set! F315f@imp-collector (unspecified)) (set! F3161@chi-library-internal (unspecified)) (set! F3163@chi-interaction-expr (unspecified)) (set! F3165@library-body-expander (unspecified)) (set! F3167@core-library-expander (unspecified)) (set! F3169@parse-top-level-program (unspecified)) (set! F316b@top-level-expander (unspecified)) (set! F316d@rp (unspecified)) (set! F3177@env? (unspecified)) (set! F3179@env-names (unspecified)) (set! F317b@set-env-names! (unspecified)) (set! F317d@env-labels (unspecified)) (set! F317f@set-env-labels! (unspecified)) (set! F3181@env-itc (unspecified)) (set! F3183@set-env-itc! (unspecified)) (set! F3185@dummy (unspecified)) (set! F3187@rp (unspecified)) (set! F3191@interaction-env? (unspecified)) (set! F3193@interaction-env-rib (unspecified)) (set! F3195@set-interaction-env-rib! (unspecified)) (set! F3197@interaction-env-r (unspecified)) (set! F3199@set-interaction-env-r! (unspecified)) (set! F319b@interaction-env-locs (unspecified)) (set! F319d@set-interaction-env-locs! (unspecified)) (set! F319f@dummy (unspecified)) (set! F31a1@interaction-environment-symbols (unspecified)) (set! F31a3@environment-bindings (unspecified)) (set! F31a5@parse-binding (unspecified)) (set! F31a7@environment? (unspecified)) (set! F31a9@environment-symbols (unspecified)) (set! F31ab@environment (unspecified)) (set! F31ad@null-environment (unspecified)) (set! F31af@scheme-report-environment (unspecified)) (set! F31b1@expand (unspecified)) (set! F31b3@eval (unspecified)) (set! F31b5@library-expander (unspecified)) (set! F31b7@boot-library-expand (unspecified)) (set! F31b9@rev-map-append (unspecified)) (set! F31bb@build-exports (unspecified)) (set! F31bd@make-export-subst (unspecified)) (set! F31bf@make-export-env/macros (unspecified)) (set! F31c1@generate-temporaries (unspecified)) (set! F31c3@free-identifier=? (unspecified)) (set! F31c5@bound-identifier=? (unspecified)) (set! F31c7@make-source-condition (unspecified)) (set! F31c9@extract-position-condition (unspecified)) (set! F31cb@expression-position (unspecified)) (set! F31cd@assertion-error (unspecified)) (set! F31cf@syntax-error (unspecified)) (set! F31d1@syntax-violation* (unspecified)) (set! F31d3@syntax-violation (unspecified)) (set! F31d5@identifier? (unspecified)) (set! F31d7@datum->syntax (unspecified)) (set! F31d9@syntax->datum (unspecified)) (set! F31db@ungensym-all (unspecified)) (set! F31dd@compile-r6rs-top-level (unspecified)) (set! F31df@pre-compile-r6rs-top-level (unspecified)) (set! F31e1@interaction-environment (unspecified)) (set! F31e3@top-level-context (unspecified)) (set! F2e67@file-options-macro (lambda (F31e4@x) (let ((F31e7@valid-option? '#f)) (begin (set! F31e7@valid-option? (lambda (F31f0@x) (and (F2eec@id? F31f0@x) (memq (F2eee@id->sym F31f0@x) '(no-fail no-create no-truncate))))) (let ((F31e8@t F31e4@x)) (let ((F31ea@ls/false (F30f3@syntax-dispatch F31e8@t '(_ . each-any)))) (if (and F31ea@ls/false (apply (lambda (F31ec@opt*) (for-all F31e7@valid-option? F31ec@opt*)) F31ea@ls/false)) (apply (lambda (F31ee@opt*) (F30a9@bless (list 'make-file-options (list 'quote F31ee@opt*)))) F31ea@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F31e8@t)))))))) (set! F4b3a@F2e67@file-options-macro F2e67@file-options-macro) (set! F2e69@set-cons (lambda (F31f2@x F31f3@ls) (if (memq F31f2@x F31f3@ls) F31f3@ls (cons F31f2@x F31f3@ls)))) (set! F4b3b@F2e69@set-cons F2e69@set-cons) (set! F2e6b@set-union (lambda (F31f6@ls1 F31f7@ls2) (if (null? F31f6@ls1) F31f7@ls2 (if (memq (car F31f6@ls1) F31f7@ls2) (F2e6b@set-union (cdr F31f6@ls1) F31f7@ls2) (cons (car F31f6@ls1) (F2e6b@set-union (cdr F31f6@ls1) F31f7@ls2)))))) (set! F4b3c@F2e6b@set-union F2e6b@set-union) (set! F2e70@top-mark* '(top)) (set! F4b3d@F2e70@top-mark* F2e70@top-mark*) (set! F2e72@top-marked? (lambda (F31fa@m*) (memq 'top F31fa@m*))) (set! F4b3e@F2e72@top-marked? F2e72@top-marked?) (set! F2e74@gen-lexical (lambda (F31fc@sym) (if (symbol? F31fc@sym) (gensym F31fc@sym) (if (F2eb8@stx? F31fc@sym) (F2e74@gen-lexical (F2eee@id->sym F31fc@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" F31fc@sym))))) (set! F4b3f@F2e74@gen-lexical F2e74@gen-lexical) (set! F2e76@gen-global (lambda (F31fe@x) (F2e74@gen-lexical F31fe@x))) (set! F4b40@F2e76@gen-global F2e76@gen-global) (set! F2e78@gen-label (lambda (F3200@_) (gensym))) (set! F4b41@F2e78@gen-label F2e78@gen-label) (set! F2e7a@gen-top-level-label (lambda (F3202@id F3203@rib) (let ((F3207@find '#f)) (begin (set! F3207@find (lambda (F3212@sym F3213@mark* F3214@sym* F3215@mark** F3216@label*) (and (pair? F3214@sym*) (if (and (eq? F3212@sym (car F3214@sym*)) (same-marks? F3213@mark* (car F3215@mark**))) (car F3216@label*) (F3207@find F3212@sym F3213@mark* (cdr F3214@sym*) (cdr F3215@mark**) (cdr F3216@label*)))))) (let ((F3208@sym (F2eee@id->sym F3202@id)) (F3209@mark* (F2ebe@stx-mark* F3202@id))) (let ((F320c@sym* (F2e8a@rib-sym* F3203@rib))) (let ((F320e@t (and (memq F3208@sym (F2e8a@rib-sym* F3203@rib)) (F3207@find F3208@sym F3209@mark* F320c@sym* (F2e8e@rib-mark** F3203@rib) (F2e92@rib-label* F3203@rib))))) (if F320e@t ((lambda (F3210@label) (if (F2d00@F2b3d@imported-label->binding F3210@label) (gensym) F3210@label)) F320e@t) (gensym))))))))) (set! F4b42@F2e7a@gen-top-level-label F2e7a@gen-top-level-label) (set! F2e7c@gen-define-label+loc (lambda (F321c@id F321d@rib) (let ((F3220@t (F31e3@top-level-context))) (if F3220@t ((lambda (F3222@env) (let ((F3224@label (F2e7a@gen-top-level-label F321c@id F321d@rib)) (F3225@locs (F319b@interaction-env-locs F3222@env))) (values F3224@label (let ((F3228@t (assq F3224@label F3225@locs))) (if F3228@t (cdr F3228@t) (let ((F322a@loc (F2e74@gen-lexical F321c@id))) (begin (F319d@set-interaction-env-locs! F3222@env (cons (cons F3224@label F322a@loc) F3225@locs)) F322a@loc))))))) F3220@t) (values (gensym) (F2e74@gen-lexical F321c@id)))))) (set! F4b43@F2e7c@gen-define-label+loc F2e7c@gen-define-label+loc) (set! F2e7e@gen-define-label (lambda (F322c@id F322d@rib) (if (F31e3@top-level-context) (F2e7a@gen-top-level-label F322c@id F322d@rib) (gensym)))) (set! F4b44@F2e7e@gen-define-label F2e7e@gen-define-label) (set! F2e88@rib? (lambda (F3230@x) (and (simple-struct? F3230@x) (eq? (simple-struct-name F3230@x) 'rib)))) (set! F4b45@F2e88@rib? F2e88@rib?) (set! F2e8a@rib-sym* (lambda (F3232@x) (simple-struct-ref F3232@x '0))) (set! F4b46@F2e8a@rib-sym* F2e8a@rib-sym*) (set! F2e8c@set-rib-sym*! (lambda (F3234@x F3235@val) (simple-struct-set! F3234@x '0 F3235@val))) (set! F4b47@F2e8c@set-rib-sym*! F2e8c@set-rib-sym*!) (set! F2e8e@rib-mark** (lambda (F3238@x) (simple-struct-ref F3238@x '1))) (set! F4b48@F2e8e@rib-mark** F2e8e@rib-mark**) (set! F2e90@set-rib-mark**! (lambda (F323a@x F323b@val) (simple-struct-set! F323a@x '1 F323b@val))) (set! F4b49@F2e90@set-rib-mark**! F2e90@set-rib-mark**!) (set! F2e92@rib-label* (lambda (F323e@x) (simple-struct-ref F323e@x '2))) (set! F4b4a@F2e92@rib-label* F2e92@rib-label*) (set! F2e94@set-rib-label*! (lambda (F3240@x F3241@val) (simple-struct-set! F3240@x '2 F3241@val))) (set! F4b4b@F2e94@set-rib-label*! F2e94@set-rib-label*!) (set! F2e96@rib-sealed/freq (lambda (F3244@x) (simple-struct-ref F3244@x '3))) (set! F4b4c@F2e96@rib-sealed/freq F2e96@rib-sealed/freq) (set! F2e98@set-rib-sealed/freq! (lambda (F3246@x F3247@val) (simple-struct-set! F3246@x '3 F3247@val))) (set! F4b4d@F2e98@set-rib-sealed/freq! F2e98@set-rib-sealed/freq!) (set! F2e9a@rib-cache (lambda (F324a@x) (simple-struct-ref F324a@x '4))) (set! F4b4e@F2e9a@rib-cache F2e9a@rib-cache) (set! F2e9c@set-rib-cache! (lambda (F324c@x F324d@val) (simple-struct-set! F324c@x '4 F324d@val))) (set! F4b4f@F2e9c@set-rib-cache! F2e9c@set-rib-cache!) (set! F2e9e@dummy '3) (set! F4b50@F2e9e@dummy F2e9e@dummy) (set! F2ea0@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! F4b51@F2ea0@make-empty-rib F2ea0@make-empty-rib) (set! F2ea2@extend-rib! (lambda (F3250@rib F3251@id F3252@label) (let ((F3257@find '#f)) (begin (set! F3257@find (lambda (F3264@sym F3265@mark* F3266@sym* F3267@mark** F3268@label*) (and (pair? F3266@sym*) (if (and (eq? F3264@sym (car F3266@sym*)) (same-marks? F3265@mark* (car F3267@mark**))) F3268@label* (F3257@find F3264@sym F3265@mark* (cdr F3266@sym*) (cdr F3267@mark**) (cdr F3268@label*)))))) (begin (if (F2e96@rib-sealed/freq F3250@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" F3250@rib) (void)) (let ((F3258@sym (F2eee@id->sym F3251@id)) (F3259@mark* (F2ebe@stx-mark* F3251@id))) (let ((F325c@sym* (F2e8a@rib-sym* F3250@rib))) (let ((F325e@t (and (memq F3258@sym (F2e8a@rib-sym* F3250@rib)) (F3257@find F3258@sym F3259@mark* F325c@sym* (F2e8e@rib-mark** F3250@rib) (F2e92@rib-label* F3250@rib))))) (if F325e@t ((lambda (F3260@p) (if (not (eq? F3252@label (car F3260@p))) (if (F31e3@top-level-context) (set-car! F3260@p F3252@label) (F31d3@syntax-violation '#f '"multiple definitions of identifier" F3251@id)) (void))) F325e@t) (begin (if (F2e9a@rib-cache F3250@rib) (hashtable-update! (F2e9a@rib-cache F3250@rib) F3258@sym (lambda (F3262@e) (cons (cons F3259@mark* F3252@label) F3262@e)) '()) (void)) (F2e8c@set-rib-sym*! F3250@rib (cons F3258@sym F325c@sym*)) (F2e90@set-rib-mark**! F3250@rib (cons F3259@mark* (F2e8e@rib-mark** F3250@rib))) (F2e94@set-rib-label*! F3250@rib (cons F3252@label (F2e92@rib-label* F3250@rib))))))))))))) (set! F4b52@F2ea2@extend-rib! F2ea2@extend-rib!) (set! F2ea4@extend-rib/nc! (lambda (F326e@rib F326f@id F3270@label) (let ((F3274@sym (F2eee@id->sym F326f@id)) (F3275@mark* (F2ebe@stx-mark* F326f@id))) (let ((F3278@sym* (F2e8a@rib-sym* F326e@rib))) (begin (if (F2e9a@rib-cache F326e@rib) (hashtable-update! (F2e9a@rib-cache F326e@rib) F3274@sym (lambda (F327a@e) (cons (cons F3275@mark* F3270@label) F327a@e)) '()) (void)) (F2e8c@set-rib-sym*! F326e@rib (cons F3274@sym F3278@sym*)) (F2e90@set-rib-mark**! F326e@rib (cons F3275@mark* (F2e8e@rib-mark** F326e@rib))) (F2e94@set-rib-label*! F326e@rib (cons F3270@label (F2e92@rib-label* F326e@rib)))))))) (set! F4b53@F2ea4@extend-rib/nc! F2ea4@extend-rib/nc!) (set! F2ea6@make-rib-map (lambda (F327c@sym*) (let ((F327e@ht (make-eq-hashtable))) (let F3284@f ((F3280@i '0) (F3281@sym* F327c@sym*)) (if (null? F3281@sym*) F327e@ht (begin (hashtable-update! F327e@ht (car F3281@sym*) (lambda (F3286@x) (cons F3280@i F3286@x)) '()) (F3284@f (+ F3280@i '1) (cdr F3281@sym*)))))))) (set! F4b54@F2ea6@make-rib-map F2ea6@make-rib-map) (set! F2ea8@seal-rib! (lambda (F3288@rib) (let ((F328a@sym* (F2e8a@rib-sym* F3288@rib))) (if (not (null? F328a@sym*)) (begin (F2e8c@set-rib-sym*! F3288@rib (list->vector F328a@sym*)) (F2e90@set-rib-mark**! F3288@rib (list->vector (F2e8e@rib-mark** F3288@rib))) (F2e94@set-rib-label*! F3288@rib (list->vector (F2e92@rib-label* F3288@rib))) (F2e98@set-rib-sealed/freq! F3288@rib (F2ea6@make-rib-map F328a@sym*))) (void))))) (set! F4b55@F2ea8@seal-rib! F2ea8@seal-rib!) (set! F2eaa@unseal-rib! (lambda (F328c@rib) (if (F2e96@rib-sealed/freq F328c@rib) (begin (F2e98@set-rib-sealed/freq! F328c@rib '#f) (F2e8c@set-rib-sym*! F328c@rib (vector->list (F2e8a@rib-sym* F328c@rib))) (F2e90@set-rib-mark**! F328c@rib (vector->list (F2e8e@rib-mark** F328c@rib))) (F2e94@set-rib-label*! F328c@rib (vector->list (F2e92@rib-label* F328c@rib)))) (void)))) (set! F4b56@F2eaa@unseal-rib! F2eaa@unseal-rib!) (set! F2eac@make-full-rib (lambda (F328e@id* F328f@label*) (let ((F3292@r (make-simple-struct 'rib '6 (list (map F2eee@id->sym F328e@id*) (map F2ebe@stx-mark* F328e@id*) F328f@label* '#f '#f)))) (begin (F2ea8@seal-rib! F3292@r) F3292@r)))) (set! F4b57@F2eac@make-full-rib F2eac@make-full-rib) (set! F2eae@rp (F2a22@F28fd@make-record-printer 'stx (lambda (F3294@x F3295@p F3296@wr) (begin (display '"#<syntax " F3295@p) (write (F2f00@stx->datum F3294@x) F3295@p) (let ((F329a@expr (F2eba@stx-expr F3294@x))) (if (F2a19@F28eb@annotation? F329a@expr) (let ((F329c@src (F2a1a@F28ed@annotation-source F329a@expr))) (if (pair? F329c@src) (begin (display '" [" F3295@p) (display (cdr F329c@src) F3295@p) (display '" of " F3295@p) (display (car F329c@src) F3295@p) (display '"]" F3295@p)) (void))) (void))) (display '">" F3295@p))))) (set! F4b58@F2eae@rp F2eae@rp) (set! F2eb8@stx? (lambda (F329e@x) (and (simple-struct? F329e@x) (eq? (simple-struct-name F329e@x) 'stx)))) (set! F4b59@F2eb8@stx? F2eb8@stx?) (set! F2eba@stx-expr (lambda (F32a0@x) (simple-struct-ref F32a0@x '0))) (set! F4b5a@F2eba@stx-expr F2eba@stx-expr) (set! F2ebc@set-stx-expr! (lambda (F32a2@x F32a3@val) (simple-struct-set! F32a2@x '0 F32a3@val))) (set! F4b5b@F2ebc@set-stx-expr! F2ebc@set-stx-expr!) (set! F2ebe@stx-mark* (lambda (F32a6@x) (simple-struct-ref F32a6@x '1))) (set! F4b5c@F2ebe@stx-mark* F2ebe@stx-mark*) (set! F2ec0@set-stx-mark*! (lambda (F32a8@x F32a9@val) (simple-struct-set! F32a8@x '1 F32a9@val))) (set! F4b5d@F2ec0@set-stx-mark*! F2ec0@set-stx-mark*!) (set! F2ec2@stx-subst* (lambda (F32ac@x) (simple-struct-ref F32ac@x '2))) (set! F4b5e@F2ec2@stx-subst* F2ec2@stx-subst*) (set! F2ec4@set-stx-subst*! (lambda (F32ae@x F32af@val) (simple-struct-set! F32ae@x '2 F32af@val))) (set! F4b5f@F2ec4@set-stx-subst*! F2ec4@set-stx-subst*!) (set! F2ec6@stx-ae* (lambda (F32b2@x) (simple-struct-ref F32b2@x '3))) (set! F4b60@F2ec6@stx-ae* F2ec6@stx-ae*) (set! F2ec8@set-stx-ae*! (lambda (F32b4@x F32b5@val) (simple-struct-set! F32b4@x '3 F32b5@val))) (set! F4b61@F2ec8@set-stx-ae*! F2ec8@set-stx-ae*!) (set! F2eca@dummy '3) (set! F4b62@F2eca@dummy F2eca@dummy) (set! F2ecc@datum->stx (lambda (F32b8@id F32b9@datum) (make-simple-struct 'stx '5 (list F32b9@datum (F2ebe@stx-mark* F32b8@id) (F2ec2@stx-subst* F32b8@id) (F2ec6@stx-ae* F32b8@id))))) (set! F4b63@F2ecc@datum->stx F2ecc@datum->stx) (set! F2ece@gen-mark (lambda () (string '#\m))) (set! F4b64@F2ece@gen-mark F2ece@gen-mark) (set! F2ed0@anti-mark '#f) (set! F4b65@F2ed0@anti-mark F2ed0@anti-mark) (set! F2ed2@anti-mark? not) (set! F4b66@F2ed2@anti-mark? F2ed2@anti-mark?) (set! F2ed4@mkstx (lambda (F32bc@e F32bd@m* F32be@s* F32bf@ae*) (if (and (F2eb8@stx? F32bc@e) (not (F2e72@top-marked? F32bd@m*))) (call-with-values (lambda () (join-wraps F32bd@m* F32be@s* F32bf@ae* F32bc@e)) (lambda (F32ca@F32c5 F32cb@F32c7 F32cc@F32c9) (let ((F32d0@ae* F32cc@F32c9) (F32d1@s* F32cb@F32c7) (F32d2@m* F32ca@F32c5)) (make-simple-struct 'stx '5 (list (F2eba@stx-expr F32bc@e) F32d2@m* F32d1@s* F32d0@ae*))))) (make-simple-struct 'stx '5 (list F32bc@e F32bd@m* F32be@s* F32bf@ae*))))) (set! F4b67@F2ed4@mkstx F2ed4@mkstx) (set! F2ed6@add-mark (lambda (F32d6@m F32d7@e F32d8@ae) (F2ed4@mkstx F32d7@e (list F32d6@m) '(shift) (list F32d8@ae)))) (set! F4b68@F2ed6@add-mark F2ed6@add-mark) (set! F2ed8@add-subst (lambda (F32dc@subst F32dd@e) (F2ed4@mkstx F32dd@e '() (list F32dc@subst) '()))) (set! F4b69@F2ed8@add-subst F2ed8@add-subst) (set! F2eda@syntax-kind? (lambda (F32e0@x F32e1@p?) (if (F2eb8@stx? F32e0@x) (F2eda@syntax-kind? (F2eba@stx-expr F32e0@x) F32e1@p?) (if (F2a19@F28eb@annotation? F32e0@x) (F2eda@syntax-kind? (F2a1b@F28ef@annotation-expression F32e0@x) F32e1@p?) (F32e1@p? F32e0@x))))) (set! F4b6a@F2eda@syntax-kind? F2eda@syntax-kind?) (set! F2edc@syntax-vector->list (lambda (F32e4@x) (if (F2eb8@stx? F32e4@x) (let ((F32e6@ls (F2edc@syntax-vector->list (F2eba@stx-expr F32e4@x))) (F32e7@m* (F2ebe@stx-mark* F32e4@x)) (F32e8@s* (F2ec2@stx-subst* F32e4@x)) (F32e9@ae* (F2ec6@stx-ae* F32e4@x))) (map (lambda (F32ee@x) (F2ed4@mkstx F32ee@x F32e7@m* F32e8@s* F32e9@ae*)) F32e6@ls)) (if (F2a19@F28eb@annotation? F32e4@x) (F2edc@syntax-vector->list (F2a1b@F28ef@annotation-expression F32e4@x)) (if (vector? F32e4@x) (vector->list F32e4@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" F32e4@x)))))) (set! F4b6b@F2edc@syntax-vector->list F2edc@syntax-vector->list) (set! F2ede@syntax-pair? (lambda (F32f0@x) (F2eda@syntax-kind? F32f0@x pair?))) (set! F4b6c@F2ede@syntax-pair? F2ede@syntax-pair?) (set! F2ee0@syntax-vector? (lambda (F32f2@x) (F2eda@syntax-kind? F32f2@x vector?))) (set! F4b6d@F2ee0@syntax-vector? F2ee0@syntax-vector?) (set! F2ee2@syntax-null? (lambda (F32f4@x) (F2eda@syntax-kind? F32f4@x null?))) (set! F4b6e@F2ee2@syntax-null? F2ee2@syntax-null?) (set! F2ee4@syntax-list? (lambda (F32f6@x) (or (F2ee2@syntax-null? F32f6@x) (and (F2ede@syntax-pair? F32f6@x) (F2ee4@syntax-list? (F2ee8@syntax-cdr F32f6@x)))))) (set! F4b6f@F2ee4@syntax-list? F2ee4@syntax-list?) (set! F2ee6@syntax-car (lambda (F32f8@x) (if (F2eb8@stx? F32f8@x) (F2ed4@mkstx (F2ee6@syntax-car (F2eba@stx-expr F32f8@x)) (F2ebe@stx-mark* F32f8@x) (F2ec2@stx-subst* F32f8@x) (F2ec6@stx-ae* F32f8@x)) (if (F2a19@F28eb@annotation? F32f8@x) (F2ee6@syntax-car (F2a1b@F28ef@annotation-expression F32f8@x)) (if (pair? F32f8@x) (car F32f8@x) (assertion-violation 'syntax-car '"BUG: not a pair" F32f8@x)))))) (set! F4b70@F2ee6@syntax-car F2ee6@syntax-car) (set! F2ee8@syntax-cdr (lambda (F32fa@x) (if (F2eb8@stx? F32fa@x) (F2ed4@mkstx (F2ee8@syntax-cdr (F2eba@stx-expr F32fa@x)) (F2ebe@stx-mark* F32fa@x) (F2ec2@stx-subst* F32fa@x) (F2ec6@stx-ae* F32fa@x)) (if (F2a19@F28eb@annotation? F32fa@x) (F2ee8@syntax-cdr (F2a1b@F28ef@annotation-expression F32fa@x)) (if (pair? F32fa@x) (cdr F32fa@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" F32fa@x)))))) (set! F4b71@F2ee8@syntax-cdr F2ee8@syntax-cdr) (set! F2eea@syntax->list (lambda (F32fc@x) (if (F2ede@syntax-pair? F32fc@x) (cons (F2ee6@syntax-car F32fc@x) (F2eea@syntax->list (F2ee8@syntax-cdr F32fc@x))) (if (F2ee2@syntax-null? F32fc@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" F32fc@x))))) (set! F4b72@F2eea@syntax->list F2eea@syntax->list) (set! F2eec@id? (lambda (F32fe@x) (and (F2eb8@stx? F32fe@x) (symbol? (F2eba@stx-expr F32fe@x))))) (set! F4b73@F2eec@id? F2eec@id?) (set! F2eee@id->sym (lambda (F3300@x) (F2eba@stx-expr F3300@x))) (set! F4b74@F2eee@id->sym F2eee@id->sym) (set! F2ef0@bound-id=? (lambda (F3302@x F3303@y) (and (eq? (F2eee@id->sym F3302@x) (F2eee@id->sym F3303@y)) (same-marks? (F2ebe@stx-mark* F3302@x) (F2ebe@stx-mark* F3303@y))))) (set! F4b75@F2ef0@bound-id=? F2ef0@bound-id=?) (set! F2ef2@free-id=? (lambda (F3306@i F3307@j) (let ((F330a@t0 (id->real-label F3306@i)) (F330b@t1 (id->real-label F3307@j))) (if (or F330a@t0 F330b@t1) (eq? F330a@t0 F330b@t1) (eq? (F2eee@id->sym F3306@i) (F2eee@id->sym F3307@j)))))) (set! F4b76@F2ef2@free-id=? F2ef2@free-id=?) (set! F2ef4@valid-bound-ids? (lambda (F330e@id*) (and (for-all F2eec@id? F330e@id*) (F2ef6@distinct-bound-ids? F330e@id*)))) (set! F4b77@F2ef4@valid-bound-ids? F2ef4@valid-bound-ids?) (set! F2ef6@distinct-bound-ids? (lambda (F3310@id*) (or (null? F3310@id*) (and (not (F2ef8@bound-id-member? (car F3310@id*) (cdr F3310@id*))) (F2ef6@distinct-bound-ids? (cdr F3310@id*)))))) (set! F4b78@F2ef6@distinct-bound-ids? F2ef6@distinct-bound-ids?) (set! F2ef8@bound-id-member? (lambda (F3312@id F3313@id*) (and (pair? F3313@id*) (or (F2ef0@bound-id=? F3312@id (car F3313@id*)) (F2ef8@bound-id-member? F3312@id (cdr F3313@id*)))))) (set! F4b79@F2ef8@bound-id-member? F2ef8@bound-id-member?) (set! F2efa@self-evaluating? (lambda (F3316@x) (or (number? F3316@x) (string? F3316@x) (char? F3316@x) (boolean? F3316@x) (regexp? F3316@x) (bytevector? F3316@x)))) (set! F4b7a@F2efa@self-evaluating? F2efa@self-evaluating?) (set! F2efc@strip-annotations (lambda (F3318@x) (if (pair? F3318@x) (cons (F2efc@strip-annotations (car F3318@x)) (F2efc@strip-annotations (cdr F3318@x))) (if (vector? F3318@x) (vector-map F2efc@strip-annotations F3318@x) (if (F2a19@F28eb@annotation? F3318@x) (F2a18@F28e9@annotation-stripped F3318@x) F3318@x))))) (set! F4b7b@F2efc@strip-annotations F2efc@strip-annotations) (set! F2efe@strip (lambda (F331a@x F331b@m*) (if (F2e72@top-marked? F331b@m*) (if (or (F2a19@F28eb@annotation? F331a@x) (and (pair? F331a@x) (F2a19@F28eb@annotation? (car F331a@x))) (and (vector? F331a@x) (> (vector-length F331a@x) '0) (F2a19@F28eb@annotation? (vector-ref F331a@x '0)))) (F2efc@strip-annotations F331a@x) F331a@x) (let F3320@f ((F331e@x F331a@x)) (if (F2eb8@stx? F331e@x) (F2efe@strip (F2eba@stx-expr F331e@x) (F2ebe@stx-mark* F331e@x)) (if (F2a19@F28eb@annotation? F331e@x) (F2a18@F28e9@annotation-stripped F331e@x) (if (pair? F331e@x) (let ((F3322@a (F3320@f (car F331e@x))) (F3323@d (F3320@f (cdr F331e@x)))) (if (and (eq? F3322@a (car F331e@x)) (eq? F3323@d (cdr F331e@x))) F331e@x (cons F3322@a F3323@d))) (if (vector? F331e@x) (let ((F3326@old (vector->list F331e@x))) (let ((F3328@new (map F3320@f F3326@old))) (if (for-all eq? F3326@old F3328@new) F331e@x (list->vector F3328@new)))) F331e@x)))))))) (set! F4b7c@F2efe@strip F2efe@strip) (set! F2f00@stx->datum (lambda (F332a@x) (F2efe@strip F332a@x '()))) (set! F4b7d@F2f00@stx->datum F2f00@stx->datum) (set! F2f02@id->label (lambda (F332c@id) (or (id->real-label F332c@id) (let ((F332e@t (F31e3@top-level-context))) (if F332e@t ((lambda (F3330@env) (let ((F3332@rib (F3193@interaction-env-rib F3330@env))) (call-with-values (lambda () (F2e7c@gen-define-label+loc F332c@id F3332@rib)) (lambda (F3338@F3335 F3339@F3337) (let ((F333c@loc_ F3339@F3337) (F333d@lab F3338@F3335)) (begin (F2ea2@extend-rib! F3332@rib F332c@id F333d@lab) F333d@lab)))))) F332e@t) '#f))))) (set! F4b7e@F2f02@id->label F2f02@id->label) (set! F2f04@label->binding (lambda (F3340@x F3341@r) (let ((F3344@t (F2d00@F2b3d@imported-label->binding F3340@x))) (if F3344@t ((lambda (F3346@b) (if (and (pair? F3346@b) (eq? (car F3346@b) '$core-rtd)) (cons '$rtd (map F30a9@bless (cdr F3346@b))) (if (and (pair? F3346@b) (eq? (car F3346@b) 'global-rtd)) (let ((F3348@lib (cadr F3346@b)) (F3349@loc (cddr F3346@b))) (cons '$rtd (symbol-value F3349@loc))) F3346@b))) F3344@t) (let ((F334c@t (assq F3340@x F3341@r))) (if F334c@t (cdr F334c@t) (let ((F334e@t (F31e3@top-level-context))) (if F334e@t ((lambda (F3350@env) (let ((F3352@t (assq F3340@x (F319b@interaction-env-locs F3350@env)))) (if F3352@t ((lambda (F3354@p) (cons* 'lexical (cdr F3354@p) '#f)) F3352@t) '(displaced-lexical . #f)))) F334e@t) '(displaced-lexical . #f))))))))) (set! F4b7f@F2f04@label->binding F2f04@label->binding) (set! F2f06@make-binding cons) (set! F4b80@F2f06@make-binding F2f06@make-binding) (set! F2f08@binding-type car) (set! F4b81@F2f08@binding-type F2f08@binding-type) (set! F2f0a@binding-value cdr) (set! F4b82@F2f0a@binding-value F2f0a@binding-value) (set! F2f0c@raise-unbound-error (lambda (F3356@id) (F31d1@syntax-violation* '#f '"unbound identifier" F3356@id (F4f78@F4dbe@make-undefined-violation)))) (set! F4b83@F2f0c@raise-unbound-error F2f0c@raise-unbound-error) (set! F2f0e@syntax-type (lambda (F3358@e F3359@r) (if (F2eec@id? F3358@e) (let ((F335c@id F3358@e)) (let ((F335e@label (F2f02@id->label F335c@id))) (let ((F3360@b (F2f04@label->binding F335e@label F3359@r))) (let ((F3362@type (F2f08@binding-type F3360@b))) (begin (if (not F335e@label) (F2f0c@raise-unbound-error F335c@id) (void)) (let ((F3364@t F3362@type)) (if (memv F3364@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values F3362@type (F2f0a@binding-value F3360@b) F335c@id) (values 'other '#f '#f)))))))) (if (F2ede@syntax-pair? F3358@e) (let ((F3366@id (F2ee6@syntax-car F3358@e))) (if (F2eec@id? F3366@id) (let ((F3368@label (F2f02@id->label F3366@id))) (let ((F336a@b (F2f04@label->binding F3368@label F3359@r))) (let ((F336c@type (F2f08@binding-type F336a@b))) (begin (if (not F3368@label) (F2f0c@raise-unbound-error F3366@id) (void)) (let ((F336e@t F336c@type)) (if (memv F336e@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values F336c@type (F2f0a@binding-value F336a@b) F3366@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((F3370@d (F2f00@stx->datum F3358@e))) (if (F2efa@self-evaluating? F3370@d) (values 'constant F3370@d '#f) (values 'other '#f '#f))))))) (set! F4b84@F2f0e@syntax-type F2f0e@syntax-type) (set! F2f1c@sanitize-binding (lambda (F3372@x F3373@src) (if (procedure? F3372@x) (cons* 'local-macro F3372@x F3373@src) (if (and (pair? F3372@x) (eq? (car F3372@x) 'macro!) (procedure? (cdr F3372@x))) (cons* 'local-macro! (cdr F3372@x) F3373@src) (if (and (pair? F3372@x) (eq? (car F3372@x) '$rtd)) F3372@x (assertion-violation 'expand '"invalid transformer" F3372@x)))))) (set! F4b85@F2f1c@sanitize-binding F2f1c@sanitize-binding) (set! F2f1e@make-variable-transformer (lambda (F3376@x) (if (procedure? F3376@x) (cons 'macro! F3376@x) (assertion-violation 'make-variable-transformer '"not a procedure" F3376@x)))) (set! F4b86@F2f1e@make-variable-transformer F2f1e@make-variable-transformer) (set! F2f20@variable-transformer? (lambda (F3378@x) (and (pair? F3378@x) (eq? (car F3378@x) 'macro!) (procedure? (cdr F3378@x))))) (set! F4b87@F2f20@variable-transformer? F2f20@variable-transformer?) (set! F2f22@variable-transformer-procedure (lambda (F337a@x) (if (F2f20@variable-transformer? F337a@x) (cdr F337a@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" F337a@x)))) (set! F4b88@F2f22@variable-transformer-procedure F2f22@variable-transformer-procedure) (set! F2f24@make-eval-transformer (lambda (F337c@x) (F2f1c@sanitize-binding (eval-core (F2a7b@F2a33@expanded->core F337c@x)) F337c@x))) (set! F4b89@F2f24@make-eval-transformer F2f24@make-eval-transformer) (set! F3075@parse-define (lambda (F337e@x) (let ((F3380@t F337e@x)) (let ((F3382@ls/false (F30f3@syntax-dispatch F3380@t '(_ (any . any) any . each-any)))) (if (and F3382@ls/false (apply (lambda (F3384@id F3385@fmls F3386@b F3387@b*) (F2eec@id? F3384@id)) F3382@ls/false)) (apply (lambda (F338c@id F338d@fmls F338e@b F338f@b*) (begin (F3119@verify-formals F338d@fmls F337e@x) (values F338c@id (cons 'defun (cons F338d@fmls (cons F338e@b F338f@b*)))))) F3382@ls/false) (let ((F3394@t F3380@t)) (let ((F3396@ls/false (F30f3@syntax-dispatch F3394@t '(_ any any)))) (if (and F3396@ls/false (apply (lambda (F3398@id F3399@val) (F2eec@id? F3398@id)) F3396@ls/false)) (apply (lambda (F339c@id F339d@val) (values F339c@id (cons 'expr F339d@val))) F3396@ls/false) (let ((F33a0@t F3394@t)) (let ((F33a2@ls/false (F30f3@syntax-dispatch F33a0@t '(_ any)))) (if (and F33a2@ls/false (apply (lambda (F33a4@id) (F2eec@id? F33a4@id)) F33a2@ls/false)) (apply (lambda (F33a6@id) (values F33a6@id (cons 'expr (F30a9@bless '(void))))) F33a2@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F33a0@t)))))))))))) (set! F4b8a@F3075@parse-define F3075@parse-define) (set! F3077@parse-define-syntax (lambda (F33a8@x) (let ((F33aa@t F33a8@x)) (let ((F33ac@ls/false (F30f3@syntax-dispatch F33aa@t '(_ any any)))) (if (and F33ac@ls/false (apply (lambda (F33ae@id F33af@val) (F2eec@id? F33ae@id)) F33ac@ls/false)) (apply (lambda (F33b2@id F33b3@val) (values F33b2@id F33b3@val)) F33ac@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F33aa@t)))))) (set! F4b8b@F3077@parse-define-syntax F3077@parse-define-syntax) (set! F3079@scheme-stx-hashtable (make-eq-hashtable)) (set! F4b8c@F3079@scheme-stx-hashtable F3079@scheme-stx-hashtable) (set! F307b@scheme-stx (lambda (F33b6@sym) (or (hashtable-ref F3079@scheme-stx-hashtable F33b6@sym '#f) (let ((F33b8@subst (F2cdc@F2af5@library-subst (F2cfa@F2b31@find-library-by-name '(psyntax system $all))))) (let ((F33ba@stx (make-simple-struct 'stx '5 (list F33b6@sym F2e70@top-mark* '() '())))) (let ((F33bc@stx (let ((F33be@t (assq F33b6@sym F33b8@subst))) (if F33be@t ((lambda (F33c0@x) (let ((F33c2@name (car F33c0@x)) (F33c3@label (cdr F33c0@x))) (F2ed8@add-subst (make-simple-struct 'rib '6 (list (list F33c2@name) (list F2e70@top-mark*) (list F33c3@label) '#f '#f)) F33ba@stx))) F33be@t) F33ba@stx)))) (begin (hashtable-set! F3079@scheme-stx-hashtable F33b6@sym F33bc@stx) F33bc@stx))))))) (set! F4b8d@F307b@scheme-stx F307b@scheme-stx) (set! F307d@lexical-var car) (set! F4b8e@F307d@lexical-var F307d@lexical-var) (set! F307f@lexical-mutable? cdr) (set! F4b8f@F307f@lexical-mutable? F307f@lexical-mutable?) (set! F3081@set-lexical-mutable! set-cdr!) (set! F4b90@F3081@set-lexical-mutable! F3081@set-lexical-mutable!) (set! F3083@add-lexical (lambda (F33c6@lab F33c7@lex F33c8@r) (cons (cons* F33c6@lab 'lexical F33c7@lex '#f) F33c8@r))) (set! F4b91@F3083@add-lexical F3083@add-lexical) (set! F3085@add-lexicals (lambda (F33cc@lab* F33cd@lex* F33ce@r) (if (null? F33cc@lab*) F33ce@r (F3085@add-lexicals (cdr F33cc@lab*) (cdr F33cd@lex*) (F3083@add-lexical (car F33cc@lab*) (car F33cd@lex*) F33ce@r))))) (set! F4b92@F3085@add-lexicals F3085@add-lexicals) (set! F3087@letrec-helper (lambda (F33d2@e F33d3@r F33d4@mr F33d5@build) (let ((F33da@t F33d2@e)) (let ((F33dc@ls/false (F30f3@syntax-dispatch F33da@t '(_ #(each (any any)) any . each-any)))) (if F33dc@ls/false (apply (lambda (F33de@lhs* F33df@rhs* F33e0@b F33e1@b*) (if (not (F2ef4@valid-bound-ids? F33de@lhs*)) (F30ad@invalid-fmls-error F33d2@e F33de@lhs*) (let ((F33e6@lex* (map F2e74@gen-lexical F33de@lhs*)) (F33e7@lab* (map F2e78@gen-label F33de@lhs*))) (let ((F33ea@rib (F2eac@make-full-rib F33de@lhs* F33e7@lab*)) (F33eb@r (F3085@add-lexicals F33e7@lab* F33e6@lex* F33d3@r))) (let ((F33ee@body (F312b@chi-internal (F2ed8@add-subst F33ea@rib (cons F33e0@b F33e1@b*)) F33eb@r F33d4@mr)) (F33ef@rhs* (F3111@chi-expr* (map (lambda (F33f2@x) (F2ed8@add-subst F33ea@rib F33f2@x)) F33df@rhs*) F33eb@r F33d4@mr))) (F33d5@build '#f F33e6@lex* F33ef@rhs* F33ee@body)))))) F33dc@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F33da@t)))))) (set! F4b93@F3087@letrec-helper F3087@letrec-helper) (set! F3089@let-transformer (lambda (F33f4@e F33f5@r F33f6@mr) (let ((F33fa@t F33f4@e)) (let ((F33fc@ls/false (F30f3@syntax-dispatch F33fa@t '(_ #(each (any any)) any . each-any)))) (if F33fc@ls/false (apply (lambda (F33fe@lhs* F33ff@rhs* F3400@b F3401@b*) (if (not (F2ef4@valid-bound-ids? F33fe@lhs*)) (F30ad@invalid-fmls-error F33f4@e F33fe@lhs*) (let ((F3406@lex* (map F2e74@gen-lexical F33fe@lhs*)) (F3407@lab* (map F2e78@gen-label F33fe@lhs*)) (F3408@rhs* (F3111@chi-expr* F33ff@rhs* F33f5@r F33f6@mr))) (let ((F340c@rib (F2eac@make-full-rib F33fe@lhs* F3407@lab*)) (F340d@r (F3085@add-lexicals F3407@lab* F3406@lex* F33f5@r))) (let ((F3410@body (F312b@chi-internal (F2ed8@add-subst F340c@rib (cons F3400@b F3401@b*)) F340d@r F33f6@mr))) (F2e54@F2db1@build-let '#f F3406@lex* F3408@rhs* F3410@body)))))) F33fc@ls/false) (let ((F3412@t F33fa@t)) (let ((F3414@ls/false (F30f3@syntax-dispatch F3412@t '(_ any #(each (any any)) any . each-any)))) (if F3414@ls/false (apply (lambda (F3416@loop F3417@lhs* F3418@rhs* F3419@b F341a@b*) (if (not (F2ef4@valid-bound-ids? F3417@lhs*)) (F30ad@invalid-fmls-error F33f4@e F3417@lhs*) (let ((F3420@lex* (map F2e74@gen-lexical F3417@lhs*)) (F3421@lab* (map F2e78@gen-label F3417@lhs*)) (F3422@rhs* (F3111@chi-expr* F3418@rhs* F33f5@r F33f6@mr)) (F3423@loop-lex (F2e74@gen-lexical F3416@loop)) (F3424@loop-lab (F2e78@gen-label F3416@loop))) (let ((F342a@loop-rib (F2eac@make-full-rib (list F3416@loop) (list F3424@loop-lab))) (F342b@rib (F2eac@make-full-rib F3417@lhs* F3421@lab*)) (F342c@r (F3085@add-lexicals (cons F3424@loop-lab F3421@lab*) (cons F3423@loop-lex F3420@lex*) F33f5@r))) (let ((F3430@body (F312b@chi-internal (F2ed8@add-subst F342a@loop-rib (F2ed8@add-subst F342b@rib (cons F3419@b F341a@b*))) F342c@r F33f6@mr))) (F2e55@F2db3@build-named-let '#f F3423@loop-lex F3420@lex* F3422@rhs* F3430@body)))))) F3414@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3412@t))))))))) (set! F4b94@F3089@let-transformer F3089@let-transformer) (set! F308b@letrec-transformer (lambda (F3432@e F3433@r F3434@mr) (F3087@letrec-helper F3432@e F3433@r F3434@mr F2e53@F2daf@build-letrec))) (set! F4b95@F308b@letrec-transformer F308b@letrec-transformer) (set! F308d@letrec*-transformer (lambda (F3438@e F3439@r F343a@mr) (F3087@letrec-helper F3438@e F3439@r F343a@mr F2e56@F2db5@build-letrec*))) (set! F4b96@F308d@letrec*-transformer F308d@letrec*-transformer) (set! F308f@fluid-let-syntax-transformer (lambda (F343e@e F343f@r F3440@mr) (let ((F3445@lookup '#f)) (begin (set! F3445@lookup (lambda (F3458@x) (or (F2f02@id->label F3458@x) (F31d3@syntax-violation '#f '"unbound identifier" F343e@e F3458@x)))) (let ((F3446@t F343e@e)) (let ((F3448@ls/false (F30f3@syntax-dispatch F3446@t '(_ #(each (any any)) any . each-any)))) (if F3448@ls/false (apply (lambda (F344a@lhs* F344b@rhs* F344c@b F344d@b*) (if (not (F2ef4@valid-bound-ids? F344a@lhs*)) (F30ad@invalid-fmls-error F343e@e F344a@lhs*) (let ((F3452@lab* (map F3445@lookup F344a@lhs*)) (F3453@rhs* (map (lambda (F3456@x) (F2f24@make-eval-transformer (F314d@expand-transformer F3456@x F3440@mr))) F344b@rhs*))) (F312b@chi-internal (cons F344c@b F344d@b*) (append (map cons F3452@lab* F3453@rhs*) F343f@r) (append (map cons F3452@lab* F3453@rhs*) F3440@mr))))) F3448@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3446@t)))))))) (set! F4b97@F308f@fluid-let-syntax-transformer F308f@fluid-let-syntax-transformer) (set! F3091@type-descriptor-transformer (lambda (F345a@e F345b@r F345c@mr) (let ((F3460@t F345a@e)) (let ((F3462@ls/false (F30f3@syntax-dispatch F3460@t '(_ any)))) (if (and F3462@ls/false (apply (lambda (F3464@id) (F2eec@id? F3464@id)) F3462@ls/false)) (apply (lambda (F3466@id) (let ((F3468@lab (F2f02@id->label F3466@id))) (let ((F346a@b (F2f04@label->binding F3468@lab F345b@r))) (let ((F346c@type (F2f08@binding-type F346a@b))) (begin (if (not F3468@lab) (F2f0c@raise-unbound-error F3466@id) (void)) (if (not (and (eq? F346c@type '$rtd) (not (list? (F2f0a@binding-value F346a@b))))) (F31d3@syntax-violation '#f '"not a record type" F345a@e) (void)) (list 'quote (F2f0a@binding-value F346a@b))))))) F3462@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3460@t)))))) (set! F4b98@F3091@type-descriptor-transformer F3091@type-descriptor-transformer) (set! F3093@record-type-descriptor-transformer (lambda (F346e@e F346f@r F3470@mr) (let ((F3474@t F346e@e)) (let ((F3476@ls/false (F30f3@syntax-dispatch F3474@t '(_ any)))) (if (and F3476@ls/false (apply (lambda (F3478@id) (F2eec@id? F3478@id)) F3476@ls/false)) (apply (lambda (F347a@id) (let ((F347c@lab (F2f02@id->label F347a@id))) (let ((F347e@b (F2f04@label->binding F347c@lab F346f@r))) (let ((F3480@type (F2f08@binding-type F347e@b))) (begin (if (not F347c@lab) (F2f0c@raise-unbound-error F347a@id) (void)) (if (not (and (eq? F3480@type '$rtd) (list? (F2f0a@binding-value F347e@b)))) (F31d3@syntax-violation '#f '"not a record type" F346e@e) (void)) (F3115@chi-expr (car (F2f0a@binding-value F347e@b)) F346f@r F3470@mr)))))) F3476@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3474@t)))))) (set! F4b99@F3093@record-type-descriptor-transformer F3093@record-type-descriptor-transformer) (set! F3095@record-constructor-descriptor-transformer (lambda (F3482@e F3483@r F3484@mr) (let ((F3488@t F3482@e)) (let ((F348a@ls/false (F30f3@syntax-dispatch F3488@t '(_ any)))) (if (and F348a@ls/false (apply (lambda (F348c@id) (F2eec@id? F348c@id)) F348a@ls/false)) (apply (lambda (F348e@id) (let ((F3490@lab (F2f02@id->label F348e@id))) (let ((F3492@b (F2f04@label->binding F3490@lab F3483@r))) (let ((F3494@type (F2f08@binding-type F3492@b))) (begin (if (not F3490@lab) (F2f0c@raise-unbound-error F348e@id) (void)) (if (not (and (eq? F3494@type '$rtd) (list? (F2f0a@binding-value F3492@b)))) (F31d3@syntax-violation '#f '"invalid type" F3482@e) (void)) (F3115@chi-expr (cadr (F2f0a@binding-value F3492@b)) F3483@r F3484@mr)))))) F348a@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3488@t)))))) (set! F4b9a@F3095@record-constructor-descriptor-transformer F3095@record-constructor-descriptor-transformer) (set! F3097@when-macro (lambda (F3496@e) (let ((F3498@t F3496@e)) (let ((F349a@ls/false (F30f3@syntax-dispatch F3498@t '(_ any any . each-any)))) (if F349a@ls/false (apply (lambda (F349c@test F349d@e F349e@e*) (F30a9@bless (list 'if F349c@test (cons 'begin (cons F349d@e F349e@e*))))) F349a@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3498@t)))))) (set! F4b9b@F3097@when-macro F3097@when-macro) (set! F3099@unless-macro (lambda (F34a2@e) (let ((F34a4@t F34a2@e)) (let ((F34a6@ls/false (F30f3@syntax-dispatch F34a4@t '(_ any any . each-any)))) (if F34a6@ls/false (apply (lambda (F34a8@test F34a9@e F34aa@e*) (F30a9@bless (list 'if (list 'not F34a8@test) (cons 'begin (cons F34a9@e F34aa@e*))))) F34a6@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F34a4@t)))))) (set! F4b9c@F3099@unless-macro F3099@unless-macro) (set! F309b@if-transformer (lambda (F34ae@e F34af@r F34b0@mr) (let ((F34b4@t F34ae@e)) (let ((F34b6@ls/false (F30f3@syntax-dispatch F34b4@t '(_ any any any)))) (if F34b6@ls/false (apply (lambda (F34b8@e0 F34b9@e1 F34ba@e2) (list 'if (F3115@chi-expr F34b8@e0 F34af@r F34b0@mr) (F3115@chi-expr F34b9@e1 F34af@r F34b0@mr) (F3115@chi-expr F34ba@e2 F34af@r F34b0@mr))) F34b6@ls/false) (let ((F34be@t F34b4@t)) (let ((F34c0@ls/false (F30f3@syntax-dispatch F34be@t '(_ any any)))) (if F34c0@ls/false (apply (lambda (F34c2@e0 F34c3@e1) (list 'if (F3115@chi-expr F34c2@e0 F34af@r F34b0@mr) (F3115@chi-expr F34c3@e1 F34af@r F34b0@mr) (F2e52@F2dad@build-void))) F34c0@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F34be@t))))))))) (set! F4b9d@F309b@if-transformer F309b@if-transformer) (set! F309d@and-transformer (lambda (F34c6@e F34c7@r F34c8@mr) (let ((F34cc@t F34c6@e)) (let ((F34ce@ls/false (F30f3@syntax-dispatch F34cc@t '(_ . each-any)))) (if F34ce@ls/false (apply (lambda (F34d0@e*) (cons 'and (F3111@chi-expr* F34d0@e* F34c7@r F34c8@mr))) F34ce@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F34cc@t)))))) (set! F4b9e@F309d@and-transformer F309d@and-transformer) (set! F309f@or-transformer (lambda (F34d2@e F34d3@r F34d4@mr) (let ((F34d8@t F34d2@e)) (let ((F34da@ls/false (F30f3@syntax-dispatch F34d8@t '(_ . each-any)))) (if F34da@ls/false (apply (lambda (F34dc@e*) (cons 'or (F3111@chi-expr* F34dc@e* F34d3@r F34d4@mr))) F34da@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F34d8@t)))))) (set! F4b9f@F309f@or-transformer F309f@or-transformer) (set! F30a1@case-macro (lambda (F34de@e) (let ((F34e1@build-last '#f) (F34e3@build-one '#f)) (begin (set! F34e1@build-last (lambda (F3508@cls) (let ((F350a@t F3508@cls)) (let ((F350c@ls/false (F30f3@syntax-dispatch F350a@t '(#(scheme-id else) any . each-any)))) (if F350c@ls/false (apply (lambda (F350e@e F350f@e*) (cons 'begin (cons F350e@e F350f@e*))) F350c@ls/false) (let ((F3512@t F350a@t)) (let ((F3514@ls/false (F30f3@syntax-dispatch F3512@t '_))) (if F3514@ls/false (apply (lambda () (F34e3@build-one F3508@cls '(if #f #f))) F3514@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3512@t))))))))) (set! F34e3@build-one (lambda (F34fa@cls F34fb@k) (let ((F34fe@t F34fa@cls)) (let ((F3500@ls/false (F30f3@syntax-dispatch F34fe@t '(each-any any . each-any)))) (if F3500@ls/false (apply (lambda (F3502@d* F3503@e F3504@e*) (list 'if (list 'memv 't (list 'quote F3502@d*)) (cons 'begin (cons F3503@e F3504@e*)) F34fb@k)) F3500@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F34fe@t)))))) (let ((F34e4@t F34de@e)) (let ((F34e6@ls/false (F30f3@syntax-dispatch F34e4@t '(_ any)))) (if F34e6@ls/false (apply (lambda (F34e8@expr) (F30a9@bless (cons 'let (cons (list (list 't F34e8@expr)) '((if #f #f)))))) F34e6@ls/false) (let ((F34ea@t F34e4@t)) (let ((F34ec@ls/false (F30f3@syntax-dispatch F34ea@t '(_ any any . each-any)))) (if F34ec@ls/false (apply (lambda (F34ee@expr F34ef@cls F34f0@cls*) (F30a9@bless (list 'let (list (list 't F34ee@expr)) (let F34f8@f ((F34f4@cls F34ef@cls) (F34f5@cls* F34f0@cls*)) (if (null? F34f5@cls*) (F34e1@build-last F34f4@cls) (F34e3@build-one F34f4@cls (F34f8@f (car F34f5@cls*) (cdr F34f5@cls*)))))))) F34ec@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F34ea@t))))))))))) (set! F4ba0@F30a1@case-macro F30a1@case-macro) (set! F30a3@quote-transformer (lambda (F3516@e F3517@r F3518@mr) (let ((F351c@t F3516@e)) (let ((F351e@ls/false (F30f3@syntax-dispatch F351c@t '(_ any)))) (if F351e@ls/false (apply (lambda (F3520@datum) (list 'quote (F2f00@stx->datum F3520@datum))) F351e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F351c@t)))))) (set! F4ba1@F30a3@quote-transformer F30a3@quote-transformer) (set! F30a5@case-lambda-transformer (lambda (F3522@e F3523@r F3524@mr) (let ((F3528@t F3522@e)) (let ((F352a@ls/false (F30f3@syntax-dispatch F3528@t '(_ . #(each (any any . each-any)))))) (if F352a@ls/false (apply (lambda (F352c@fmls* F352d@b* F352e@b**) (call-with-values (lambda () (F311d@chi-lambda-clause* F3522@e F352c@fmls* (map cons F352d@b* F352e@b**) F3523@r F3524@mr)) (lambda (F3536@F3533 F3537@F3535) (let ((F353a@body* F3537@F3535) (F353b@fmls* F3536@F3533)) (F2e50@F2d7d@build-case-lambda '#f F353b@fmls* F353a@body*))))) F352a@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3528@t)))))) (set! F4ba2@F30a5@case-lambda-transformer F30a5@case-lambda-transformer) (set! F30a7@lambda-transformer (lambda (F353e@e F353f@r F3540@mr) (let ((F3544@t F353e@e)) (let ((F3546@ls/false (F30f3@syntax-dispatch F3544@t '(_ any any . each-any)))) (if F3546@ls/false (apply (lambda (F3548@fmls F3549@b F354a@b*) (call-with-values (lambda () (F311b@chi-lambda-clause F353e@e F3548@fmls (cons F3549@b F354a@b*) F353f@r F3540@mr)) (lambda (F3552@F354f F3553@F3551) (let ((F3556@body F3553@F3551) (F3557@fmls F3552@F354f)) (F2e4f@F2d7b@build-lambda '#f F3557@fmls F3556@body))))) F3546@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3544@t)))))) (set! F4ba3@F30a7@lambda-transformer F30a7@lambda-transformer) (set! F30a9@bless (lambda (F355a@x) (F2ed4@mkstx (let F355e@f ((F355c@x F355a@x)) (if (F2eb8@stx? F355c@x) F355c@x (if (pair? F355c@x) (cons (F355e@f (car F355c@x)) (F355e@f (cdr F355c@x))) (if (symbol? F355c@x) (F307b@scheme-stx F355c@x) (if (vector? F355c@x) (vector-map F355e@f F355c@x) F355c@x))))) '() '() '()))) (set! F4ba4@F30a9@bless F30a9@bless) (set! F30ab@with-syntax-macro (lambda (F3560@e) (let ((F3562@t F3560@e)) (let ((F3564@ls/false (F30f3@syntax-dispatch F3562@t '(_ #(each (any any)) any . each-any)))) (if F3564@ls/false (apply (lambda (F3566@pat* F3567@expr* F3568@b F3569@b*) (let ((F356e@idn* (let F3572@f ((F3570@pat* F3566@pat*)) (if (null? F3570@pat*) '() (call-with-values (lambda () (F30f1@convert-pattern (car F3570@pat*) '())) (lambda (F3578@F3575 F3579@F3577) (let ((F357c@idn* F3579@F3577) (F357d@pat F3578@F3575)) (append F357c@idn* (F3572@f (cdr F3570@pat*)))))))))) (begin (F3119@verify-formals (map car F356e@idn*) F3560@e) (let ((F3580@t* (F31c1@generate-temporaries F3567@expr*))) (F30a9@bless (list 'let (map list F3580@t* F3567@expr*) (let F3586@f ((F3582@pat* F3566@pat*) (F3583@t* F3580@t*)) (if (null? F3582@pat*) (cons 'begin (cons '#f (cons F3568@b F3569@b*))) (list 'syntax-case (car F3583@t*) '() (list (car F3582@pat*) (F3586@f (cdr F3582@pat*) (cdr F3583@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car F3582@pat*)) (car F3583@t*)))))))))))) F3564@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3562@t)))))) (set! F4ba5@F30ab@with-syntax-macro F30ab@with-syntax-macro) (set! F30ad@invalid-fmls-error (lambda (F3588@stx F3589@fmls) (let ((F358c@t F3589@fmls)) (let ((F358e@ls/false (F30f3@syntax-dispatch F358c@t '#(each+ any () any)))) (if F358e@ls/false (apply (lambda (F3590@id* F3591@last) (let F3596@f ((F3594@id* (if (F2eec@id? F3591@last) (cons F3591@last F3590@id*) (if (F2ee2@syntax-null? F3591@last) F3590@id* (F31d3@syntax-violation '#f '"not an identifier" F3588@stx F3591@last))))) (if (null? F3594@id*) (values) (if (not (F2eec@id? (car F3594@id*))) (F31d3@syntax-violation '#f '"not an identifier" F3588@stx (car F3594@id*)) (begin (F3596@f (cdr F3594@id*)) (if (F2ef8@bound-id-member? (car F3594@id*) (cdr F3594@id*)) (F31d3@syntax-violation '#f '"duplicate binding" F3588@stx (car F3594@id*)) (void))))))) F358e@ls/false) (let ((F3598@t F358c@t)) (let ((F359a@ls/false (F30f3@syntax-dispatch F3598@t '_))) (if F359a@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"malformed binding form" F3588@stx F3589@fmls)) F359a@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3598@t))))))))) (set! F4ba6@F30ad@invalid-fmls-error F30ad@invalid-fmls-error) (set! F30af@let-macro (lambda (F359c@stx) (let ((F359e@t F359c@stx)) (let ((F35a0@ls/false (F30f3@syntax-dispatch F359e@t '(_ #(each (any any)) any . each-any)))) (if F35a0@ls/false (apply (lambda (F35a2@lhs* F35a3@rhs* F35a4@b F35a5@b*) (if (F2ef4@valid-bound-ids? F35a2@lhs*) (F30a9@bless (cons (cons 'lambda (cons F35a2@lhs* (cons F35a4@b F35a5@b*))) F35a3@rhs*)) (F30ad@invalid-fmls-error F359c@stx F35a2@lhs*))) F35a0@ls/false) (let ((F35aa@t F359e@t)) (let ((F35ac@ls/false (F30f3@syntax-dispatch F35aa@t '(_ any #(each (any any)) any . each-any)))) (if (and F35ac@ls/false (apply (lambda (F35ae@f F35af@lhs* F35b0@rhs* F35b1@b F35b2@b*) (F2eec@id? F35ae@f)) F35ac@ls/false)) (apply (lambda (F35b8@f F35b9@lhs* F35ba@rhs* F35bb@b F35bc@b*) (if (F2ef4@valid-bound-ids? F35b9@lhs*) (F30a9@bless (cons (list 'letrec (list (list F35b8@f (cons 'lambda (cons F35b9@lhs* (cons F35bb@b F35bc@b*))))) F35b8@f) F35ba@rhs*)) (F30ad@invalid-fmls-error F359c@stx F35b9@lhs*))) F35ac@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F35aa@t))))))))) (set! F4ba7@F30af@let-macro F30af@let-macro) (set! F30b1@let-values-macro (lambda (F35c2@stx) (let ((F35c5@rename '#f) (F35c7@rename* '#f)) (begin (set! F35c5@rename (lambda (F362a@x F362b@old* F362c@new*) (begin (if (not (F2eec@id? F362a@x)) (F31d3@syntax-violation '#f '"not an indentifier" F35c2@stx F362a@x) (void)) (if (F2ef8@bound-id-member? F362a@x F362b@old*) (F31d3@syntax-violation '#f '"duplicate binding" F35c2@stx F362a@x) (void)) (let ((F3630@y (gensym (F31d9@syntax->datum F362a@x)))) (values F3630@y (cons F362a@x F362b@old*) (cons F3630@y F362c@new*)))))) (set! F35c7@rename* (lambda (F3618@x* F3619@old* F361a@new*) (if (null? F3618@x*) (values '() F3619@old* F361a@new*) (call-with-values (lambda () (F35c5@rename (car F3618@x*) F3619@old* F361a@new*)) (lambda (F361e@x F361f@old* F3620@new*) (call-with-values (lambda () (F35c7@rename* (cdr F3618@x*) F361f@old* F3620@new*)) (lambda (F3624@x* F3625@old* F3626@new*) (values (cons F361e@x F3624@x*) F3625@old* F3626@new*)))))))) (let ((F35c8@t F35c2@stx)) (let ((F35ca@ls/false (F30f3@syntax-dispatch F35c8@t '(_ () any . each-any)))) (if F35ca@ls/false (apply (lambda (F35cc@b F35cd@b*) (cons* (F30a9@bless 'let) '() F35cc@b F35cd@b*)) F35ca@ls/false) (let ((F35d0@t F35c8@t)) (let ((F35d2@ls/false (F30f3@syntax-dispatch F35d0@t '(_ #(each (any any)) any . each-any)))) (if F35d2@ls/false (apply (lambda (F35d4@lhs* F35d5@rhs* F35d6@b F35d7@b*) (F30a9@bless (let F35e4@f ((F35dc@lhs* F35d4@lhs*) (F35dd@rhs* F35d5@rhs*) (F35de@old* '()) (F35df@new* '())) (if (null? F35dc@lhs*) (cons 'let (cons (map list F35de@old* F35df@new*) (cons F35d6@b F35d7@b*))) (let ((F35e6@t (car F35dc@lhs*))) (let ((F35e8@ls/false (F30f3@syntax-dispatch F35e6@t 'each-any))) (if F35e8@ls/false (apply (lambda (F35ea@x*) (call-with-values (lambda () (F35c7@rename* F35ea@x* F35de@old* F35df@new*)) (lambda (F35f2@F35ed F35f3@F35ef F35f4@F35f1) (let ((F35f8@new* F35f4@F35f1) (F35f9@old* F35f3@F35ef) (F35fa@y* F35f2@F35ed)) (list 'call-with-values (list 'lambda '() (car F35dd@rhs*)) (list 'lambda F35fa@y* (F35e4@f (cdr F35dc@lhs*) (cdr F35dd@rhs*) F35f9@old* F35f8@new*))))))) F35e8@ls/false) (let ((F35fe@t F35e6@t)) (let ((F3600@ls/false (F30f3@syntax-dispatch F35fe@t '#(each+ any () any)))) (if F3600@ls/false (apply (lambda (F3602@x* F3603@x) (call-with-values (lambda () (F35c5@rename F3603@x F35de@old* F35df@new*)) (lambda (F3606@y F3607@old* F3608@new*) (call-with-values (lambda () (F35c7@rename* F3602@x* F3607@old* F3608@new*)) (lambda (F360c@y* F360d@old* F360e@new*) (list 'call-with-values (list 'lambda '() (car F35dd@rhs*)) (list 'lambda (append F360c@y* F3606@y) (F35e4@f (cdr F35dc@lhs*) (cdr F35dd@rhs*) F360d@old* F360e@new*)))))))) F3600@ls/false) (let ((F3612@t F35fe@t)) (let ((F3614@ls/false (F30f3@syntax-dispatch F3612@t 'any))) (if F3614@ls/false (apply (lambda (F3616@others) (F31d3@syntax-violation '#f '"malformed bindings" F35c2@stx F3616@others)) F3614@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3612@t)))))))))))))) F35d2@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F35d0@t))))))))))) (set! F4ba8@F30b1@let-values-macro F30b1@let-values-macro) (set! F30b3@let*-values-macro (lambda (F3632@stx) (let ((F3635@check '#f)) (begin (set! F3635@check (lambda (F3664@x*) (if (not (null? F3664@x*)) (let ((F3666@x (car F3664@x*))) (begin (if (not (F2eec@id? F3666@x)) (F31d3@syntax-violation '#f '"not an identifier" F3632@stx F3666@x) (void)) (F3635@check (cdr F3664@x*)) (if (F2ef8@bound-id-member? F3666@x (cdr F3664@x*)) (F31d3@syntax-violation '#f '"duplicate identifier" F3632@stx F3666@x) (void)))) (void)))) (let ((F3636@t F3632@stx)) (let ((F3638@ls/false (F30f3@syntax-dispatch F3636@t '(_ () any . each-any)))) (if F3638@ls/false (apply (lambda (F363a@b F363b@b*) (cons* (F30a9@bless 'let) '() F363a@b F363b@b*)) F3638@ls/false) (let ((F363e@t F3636@t)) (let ((F3640@ls/false (F30f3@syntax-dispatch F363e@t '(_ #(each (any any)) any . each-any)))) (if F3640@ls/false (apply (lambda (F3642@lhs* F3643@rhs* F3644@b F3645@b*) (F30a9@bless (let F364e@f ((F364a@lhs* F3642@lhs*) (F364b@rhs* F3643@rhs*)) (if (null? F364a@lhs*) (cons 'begin (cons F3644@b F3645@b*)) (let ((F3650@t (car F364a@lhs*))) (let ((F3652@ls/false (F30f3@syntax-dispatch F3650@t 'each-any))) (if F3652@ls/false (apply (lambda (F3654@x*) (begin (F3635@check F3654@x*) (list 'call-with-values (list 'lambda '() (car F364b@rhs*)) (list 'lambda F3654@x* (F364e@f (cdr F364a@lhs*) (cdr F364b@rhs*)))))) F3652@ls/false) (let ((F3656@t F3650@t)) (let ((F3658@ls/false (F30f3@syntax-dispatch F3656@t '#(each+ any () any)))) (if F3658@ls/false (apply (lambda (F365a@x* F365b@x) (begin (F3635@check (cons F365b@x F365a@x*)) (list 'call-with-values (list 'lambda '() (car F364b@rhs*)) (list 'lambda (append F365a@x* F365b@x) (F364e@f (cdr F364a@lhs*) (cdr F364b@rhs*)))))) F3658@ls/false) (let ((F365e@t F3656@t)) (let ((F3660@ls/false (F30f3@syntax-dispatch F365e@t 'any))) (if F3660@ls/false (apply (lambda (F3662@others) (F31d3@syntax-violation '#f '"malformed bindings" F3632@stx F3662@others)) F3660@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F365e@t)))))))))))))) F3640@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F363e@t))))))))))) (set! F4ba9@F30b3@let*-values-macro F30b3@let*-values-macro) (set! F30b5@trace-lambda-macro (lambda (F3668@stx) (let ((F366a@t F3668@stx)) (let ((F366c@ls/false (F30f3@syntax-dispatch F366a@t '(_ any each-any any . each-any)))) (if F366c@ls/false (apply (lambda (F366e@who F366f@fmls F3670@b F3671@b*) (if (F2ef4@valid-bound-ids? F366f@fmls) (F30a9@bless (list 'make-traced-procedure (list 'quote F366e@who) (cons 'lambda (cons F366f@fmls (cons F3670@b F3671@b*))))) (F30ad@invalid-fmls-error F3668@stx F366f@fmls))) F366c@ls/false) (let ((F3676@t F366a@t)) (let ((F3678@ls/false (F30f3@syntax-dispatch F3676@t '(_ any #(each+ any () any) any . each-any)))) (if F3678@ls/false (apply (lambda (F367a@who F367b@fmls F367c@last F367d@b F367e@b*) (if (F2ef4@valid-bound-ids? (cons F367c@last F367b@fmls)) (F30a9@bless (list 'make-traced-procedure (list 'quote F367a@who) (cons 'lambda (cons (append F367b@fmls F367c@last) (cons F367d@b F367e@b*))))) (F30ad@invalid-fmls-error F3668@stx (append F367b@fmls F367c@last)))) F3678@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3676@t))))))))) (set! F4baa@F30b5@trace-lambda-macro F30b5@trace-lambda-macro) (set! F30b7@trace-define-macro (lambda (F3684@stx) (let ((F3686@t F3684@stx)) (let ((F3688@ls/false (F30f3@syntax-dispatch F3686@t '(_ (any . each-any) any . each-any)))) (if F3688@ls/false (apply (lambda (F368a@who F368b@fmls F368c@b F368d@b*) (if (F2ef4@valid-bound-ids? F368b@fmls) (F30a9@bless (list 'define F368a@who (list 'make-traced-procedure (list 'quote F368a@who) (cons 'lambda (cons F368b@fmls (cons F368c@b F368d@b*)))))) (F30ad@invalid-fmls-error F3684@stx F368b@fmls))) F3688@ls/false) (let ((F3692@t F3686@t)) (let ((F3694@ls/false (F30f3@syntax-dispatch F3692@t '(_ (any . #(each+ any () any)) any . each-any)))) (if F3694@ls/false (apply (lambda (F3696@who F3697@fmls F3698@last F3699@b F369a@b*) (if (F2ef4@valid-bound-ids? (cons F3698@last F3697@fmls)) (F30a9@bless (list 'define F3696@who (list 'make-traced-procedure (list 'quote F3696@who) (cons 'lambda (cons (append F3697@fmls F3698@last) (cons F3699@b F369a@b*)))))) (F30ad@invalid-fmls-error F3684@stx (append F3697@fmls F3698@last)))) F3694@ls/false) (let ((F36a0@t F3692@t)) (let ((F36a2@ls/false (F30f3@syntax-dispatch F36a0@t '(_ any any)))) (if F36a2@ls/false (apply (lambda (F36a4@who F36a5@expr) (if (F2eec@id? F36a4@who) (F30a9@bless (list 'define F36a4@who (list 'let (list (list 'v F36a5@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote F36a4@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (F31d3@syntax-violation '#f '"invalid name" F3684@stx))) F36a2@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F36a0@t)))))))))))) (set! F4bab@F30b7@trace-define-macro F30b7@trace-define-macro) (set! F30b9@trace-define-syntax-macro (lambda (F36a8@stx) (let ((F36aa@t F36a8@stx)) (let ((F36ac@ls/false (F30f3@syntax-dispatch F36aa@t '(_ any any)))) (if F36ac@ls/false (apply (lambda (F36ae@who F36af@expr) (if (F2eec@id? F36ae@who) (F30a9@bless (list 'define-syntax F36ae@who (list 'make-traced-macro (list 'quote F36ae@who) F36af@expr))) (F31d3@syntax-violation '#f '"invalid name" F36a8@stx))) F36ac@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F36aa@t)))))) (set! F4bac@F30b9@trace-define-syntax-macro F30b9@trace-define-syntax-macro) (set! F30bb@trace-let/rec-syntax (lambda (F36b2@who) (lambda (F36b4@stx) (let ((F36b6@t F36b4@stx)) (let ((F36b8@ls/false (F30f3@syntax-dispatch F36b6@t '(_ #(each (any any)) any . each-any)))) (if F36b8@ls/false (apply (lambda (F36ba@lhs* F36bb@rhs* F36bc@b F36bd@b*) (if (F2ef4@valid-bound-ids? F36ba@lhs*) (let ((F36c2@rhs* (map (lambda (F36c4@lhs F36c5@rhs) (list 'make-traced-macro (list 'quote F36c4@lhs) F36c5@rhs)) F36ba@lhs* F36bb@rhs*))) (F30a9@bless (cons F36b2@who (cons (map list F36ba@lhs* F36c2@rhs*) (cons F36bc@b F36bd@b*))))) (F30ad@invalid-fmls-error F36b4@stx F36ba@lhs*))) F36b8@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F36b6@t))))))) (set! F4bad@F30bb@trace-let/rec-syntax F30bb@trace-let/rec-syntax) (set! F30bd@trace-let-syntax-macro (F30bb@trace-let/rec-syntax 'let-syntax)) (set! F4bae@F30bd@trace-let-syntax-macro F30bd@trace-let-syntax-macro) (set! F30bf@trace-letrec-syntax-macro (F30bb@trace-let/rec-syntax 'letrec-syntax)) (set! F4baf@F30bf@trace-letrec-syntax-macro F30bf@trace-letrec-syntax-macro) (set! F30c1@guard-macro (lambda (F36c8@x) (let ((F36cb@gen-clauses '#f)) (begin (set! F36cb@gen-clauses (lambda (F36e2@con F36e3@outerk F36e4@clause*) (let ((F36e9@f '#f) (F36eb@f* '#f)) (begin (set! F36e9@f (lambda (F3722@x F3723@k) (let ((F3726@t F3722@x)) (let ((F3728@ls/false (F30f3@syntax-dispatch F3726@t '(any #(scheme-id =>) any)))) (if F3728@ls/false (apply (lambda (F372a@e F372b@p) (let ((F372e@t (gensym))) (list 'let (list (list F372e@t F372a@e)) (list 'if F372e@t (list F372b@p F372e@t) F3723@k)))) F3728@ls/false) (let ((F3730@t F3726@t)) (let ((F3732@ls/false (F30f3@syntax-dispatch F3730@t '(any)))) (if F3732@ls/false (apply (lambda (F3734@e) (let ((F3736@t (gensym))) (list 'let (list (list F3736@t F3734@e)) (list 'if F3736@t F3736@t F3723@k)))) F3732@ls/false) (let ((F3738@t F3730@t)) (let ((F373a@ls/false (F30f3@syntax-dispatch F3738@t '(any any . each-any)))) (if F373a@ls/false (apply (lambda (F373c@e F373d@v F373e@v*) (list 'if F373c@e (cons 'begin (cons F373d@v F373e@v*)) F3723@k)) F373a@ls/false) (let ((F3742@t F3738@t)) (let ((F3744@ls/false (F30f3@syntax-dispatch F3742@t '_))) (if F3744@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid guard clause" F3722@x)) F3744@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3742@t))))))))))))))) (set! F36eb@f* (lambda (F36f8@x*) (let ((F36fa@t F36f8@x*)) (let ((F36fc@ls/false (F30f3@syntax-dispatch F36fa@t '()))) (if F36fc@ls/false (apply (lambda () (let ((F36fe@g (gensym))) (values (list F36fe@g (list 'lambda '() (list 'raise-continuable F36e2@con))) F36fe@g))) F36fc@ls/false) (let ((F3700@t F36fa@t)) (let ((F3702@ls/false (F30f3@syntax-dispatch F3700@t '((#(scheme-id else) any . each-any))))) (if F3702@ls/false (apply (lambda (F3704@e F3705@e*) (values (cons 'begin (cons F3704@e F3705@e*)) '#f)) F3702@ls/false) (let ((F3708@t F3700@t)) (let ((F370a@ls/false (F30f3@syntax-dispatch F3708@t '(any . any)))) (if F370a@ls/false (apply (lambda (F370c@cls F370d@cls*) (call-with-values (lambda () (F36eb@f* F370d@cls*)) (lambda (F3714@F3711 F3715@F3713) (let ((F3718@g F3715@F3713) (F3719@e F3714@F3711)) (values (F36e9@f F370c@cls F3719@e) F3718@g))))) F370a@ls/false) (let ((F371c@t F3708@t)) (let ((F371e@ls/false (F30f3@syntax-dispatch F371c@t 'any))) (if F371e@ls/false (apply (lambda (F3720@others) (F31d3@syntax-violation '#f '"invalid guard clause" F3720@others)) F371e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F371c@t))))))))))))))) (call-with-values (lambda () (F36eb@f* F36e4@clause*)) (lambda (F36f0@F36ed F36f1@F36ef) (let ((F36f4@raisek F36f1@F36ef) (F36f5@code F36f0@F36ed)) (if F36f4@raisek (list (list 'call/cc (list 'lambda (list F36f4@raisek) (list F36e3@outerk (list 'lambda '() F36f5@code))))) (list F36e3@outerk (list 'lambda '() F36f5@code)))))))))) (let ((F36cc@t F36c8@x)) (let ((F36ce@ls/false (F30f3@syntax-dispatch F36cc@t '(_ (any . each-any) any . each-any)))) (if (and F36ce@ls/false (apply (lambda (F36d0@con F36d1@clause* F36d2@b F36d3@b*) (F2eec@id? F36d0@con)) F36ce@ls/false)) (apply (lambda (F36d8@con F36d9@clause* F36da@b F36db@b*) (let ((F36e0@outerk (gensym))) (F30a9@bless (list (list 'call/cc (list 'lambda (list F36e0@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list F36d8@con) (F36cb@gen-clauses F36d8@con F36e0@outerk F36d9@clause*)) (cons 'lambda (cons '() (cons F36da@b F36db@b*))))))))))) F36ce@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F36cc@t)))))))) (set! F4bb0@F30c1@guard-macro F30c1@guard-macro) (set! F30c3@define-enumeration-macro (lambda (F3746@stx) (let ((F3749@set? '#f) (F374b@remove-dups '#f)) (begin (set! F3749@set? (lambda (F3762@x) (or (null? F3762@x) (and (not (memq (car F3762@x) (cdr F3762@x))) (F3749@set? (cdr F3762@x)))))) (set! F374b@remove-dups (lambda (F3760@ls) (if (null? F3760@ls) '() (cons (car F3760@ls) (F374b@remove-dups (remq (car F3760@ls) (cdr F3760@ls))))))) (let ((F374c@t F3746@stx)) (let ((F374e@ls/false (F30f3@syntax-dispatch F374c@t '(_ any each-any any)))) (if (and F374e@ls/false (apply (lambda (F3750@name F3751@id* F3752@maker) (and (F2eec@id? F3750@name) (F2eec@id? F3752@maker) (for-all F2eec@id? F3751@id*))) F374e@ls/false)) (apply (lambda (F3756@name F3757@id* F3758@maker) (let ((F375c@name* (F374b@remove-dups (F31d9@syntax->datum F3757@id*))) (F375d@mk (gensym))) (F30a9@bless (list 'begin (list 'define F375d@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote F375c@name*)))) (list 'define-syntax F3756@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote F375c@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote F3756@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax F3758@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote F3758@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote F375c@name*)) (cons 'syntax-violation (cons (list 'quote F3758@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons F375d@mk '('(n* ...))))))))))))) F374e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F374c@t)))))))) (set! F4bb1@F30c3@define-enumeration-macro F30c3@define-enumeration-macro) (set! F30c5@time-macro (lambda (F3764@stx) (let ((F3766@t F3764@stx)) (let ((F3768@ls/false (F30f3@syntax-dispatch F3766@t '(_ any)))) (if F3768@ls/false (apply (lambda (F376a@expr) (F30a9@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() F376a@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) F3768@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3766@t)))))) (set! F4bb2@F30c5@time-macro F30c5@time-macro) (set! F30c7@delay-macro (lambda (F376c@stx) (let ((F376e@t F376c@stx)) (let ((F3770@ls/false (F30f3@syntax-dispatch F376e@t '(_ any)))) (if F3770@ls/false (apply (lambda (F3772@expr) (F30a9@bless (list 'make-promise (list 'lambda '() F3772@expr)))) F3770@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F376e@t)))))) (set! F4bb3@F30c7@delay-macro F30c7@delay-macro) (set! F30c9@assert-macro (lambda (F3774@stx) (let ((F3776@t F3774@stx)) (let ((F3778@ls/false (F30f3@syntax-dispatch F3776@t '(_ any)))) (if F3778@ls/false (apply (lambda (F377a@expr) (let ((F377c@pos (or (F31cb@expression-position F3774@stx) (F31cb@expression-position F377a@expr)))) (F30a9@bless (list 'let (list (list 'x F377a@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote F377a@expr) (list 'quote F377c@pos))))))) F3778@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3776@t)))))) (set! F4bb4@F30c9@assert-macro F30c9@assert-macro) (set! F30cb@endianness-macro (lambda (F377e@stx) (let ((F3780@t F377e@stx)) (let ((F3782@ls/false (F30f3@syntax-dispatch F3780@t '(_ any)))) (if F3782@ls/false (apply (lambda (F3784@e) (let ((F3786@t (F31d9@syntax->datum F3784@e))) (if (memv F3786@t '(little)) (F30a9@bless ''little) (if (memv F3786@t '(big)) (F30a9@bless ''big) (F31d3@syntax-violation '#f '"endianness must be big or little" F377e@stx))))) F3782@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3780@t)))))) (set! F4bb5@F30cb@endianness-macro F30cb@endianness-macro) (set! F30cd@identifier-syntax-macro (lambda (F3788@stx) (let ((F378a@t F3788@stx)) (let ((F378c@ls/false (F30f3@syntax-dispatch F378a@t '(_ any)))) (if F378c@ls/false (apply (lambda (F378e@expr) (F30a9@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax F378e@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax F378e@expr) '((syntax (e* ...)))))))))) F378c@ls/false) (let ((F3790@t F378a@t)) (let ((F3792@ls/false (F30f3@syntax-dispatch F3790@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and F3792@ls/false (apply (lambda (F3794@id1 F3795@expr1 F3796@id2 F3797@expr2 F3798@expr3) (and (F2eec@id? F3794@id1) (F2eec@id? F3796@id2) (F2eec@id? F3797@expr2))) F3792@ls/false)) (apply (lambda (F379e@id1 F379f@expr1 F37a0@id2 F37a1@expr2 F37a2@expr3) (F30a9@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax F379f@expr1)) (list (list 'set! 'id F37a1@expr2) (list 'syntax F37a2@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons F379f@expr1 '(e* ...))))))))) F3792@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3790@t))))))))) (set! F4bb6@F30cd@identifier-syntax-macro F30cd@identifier-syntax-macro) (set! F30cf@do-macro (lambda (F37a8@stx) (let ((F37ab@bind '#f)) (begin (set! F37ab@bind (lambda (F37c2@x) (let ((F37c4@t F37c2@x)) (let ((F37c6@ls/false (F30f3@syntax-dispatch F37c4@t '(any any)))) (if F37c6@ls/false (apply (lambda (F37c8@x F37c9@init) (list F37c8@x F37c9@init F37c8@x)) F37c6@ls/false) (let ((F37cc@t F37c4@t)) (let ((F37ce@ls/false (F30f3@syntax-dispatch F37cc@t '(any any any)))) (if F37ce@ls/false (apply (lambda (F37d0@x F37d1@init F37d2@step) (list F37d0@x F37d1@init F37d2@step)) F37ce@ls/false) (let ((F37d6@t F37cc@t)) (let ((F37d8@ls/false (F30f3@syntax-dispatch F37d6@t '_))) (if F37d8@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid binding" F37a8@stx)) F37d8@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F37d6@t)))))))))))) (let ((F37ac@t F37a8@stx)) (let ((F37ae@ls/false (F30f3@syntax-dispatch F37ac@t '(_ each-any (any . each-any) . each-any)))) (if F37ae@ls/false (apply (lambda (F37b0@binding* F37b1@test F37b2@expr* F37b3@command*) (let ((F37b8@t (map F37ab@bind F37b0@binding*))) (let ((F37ba@ls/false (F30f3@syntax-dispatch F37b8@t '#(each (any any any))))) (if F37ba@ls/false (apply (lambda (F37bc@x* F37bd@init* F37be@step*) (if (F2ef4@valid-bound-ids? F37bc@x*) (F30a9@bless (list 'letrec (list (list 'loop (list 'lambda F37bc@x* (list 'if F37b1@test (cons 'begin (cons '(if #f #f) F37b2@expr*)) (cons 'begin (append F37b3@command* (list (cons 'loop F37be@step*)))))))) (cons 'loop F37bd@init*))) (F31d3@syntax-violation '#f '"invalid bindings" F37a8@stx))) F37ba@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F37b8@t))))) F37ae@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F37ac@t)))))))) (set! F4bb7@F30cf@do-macro F30cf@do-macro) (set! F30d1@let*-macro (lambda (F37da@stx) (let ((F37dc@t F37da@stx)) (let ((F37de@ls/false (F30f3@syntax-dispatch F37dc@t '(_ #(each (any any)) any . each-any)))) (if (and F37de@ls/false (apply (lambda (F37e0@lhs* F37e1@rhs* F37e2@b F37e3@b*) (for-all F2eec@id? F37e0@lhs*)) F37de@ls/false)) (apply (lambda (F37e8@lhs* F37e9@rhs* F37ea@b F37eb@b*) (F30a9@bless (let F37f2@f ((F37f0@x* (map list F37e8@lhs* F37e9@rhs*))) (if (null? F37f0@x*) (cons 'let (cons '() (cons F37ea@b F37eb@b*))) (list 'let (list (car F37f0@x*)) (F37f2@f (cdr F37f0@x*))))))) F37de@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F37dc@t)))))) (set! F4bb8@F30d1@let*-macro F30d1@let*-macro) (set! F30d3@or-macro (lambda (F37f4@stx) (let ((F37f6@t F37f4@stx)) (let ((F37f8@ls/false (F30f3@syntax-dispatch F37f6@t '(_)))) (if F37f8@ls/false (apply (lambda () '#f) F37f8@ls/false) (let ((F37fa@t F37f6@t)) (let ((F37fc@ls/false (F30f3@syntax-dispatch F37fa@t '(_ any . each-any)))) (if F37fc@ls/false (apply (lambda (F37fe@e F37ff@e*) (F30a9@bless (let F3806@f ((F3802@e F37fe@e) (F3803@e* F37ff@e*)) (if (null? F3803@e*) (list 'begin '#f F3802@e) (list 'let (list (list 't F3802@e)) (list 'if 't 't (F3806@f (car F3803@e*) (cdr F3803@e*)))))))) F37fc@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F37fa@t))))))))) (set! F4bb9@F30d3@or-macro F30d3@or-macro) (set! F30d5@and-macro (lambda (F3808@stx) (let ((F380a@t F3808@stx)) (let ((F380c@ls/false (F30f3@syntax-dispatch F380a@t '(_)))) (if F380c@ls/false (apply (lambda () '#t) F380c@ls/false) (let ((F380e@t F380a@t)) (let ((F3810@ls/false (F30f3@syntax-dispatch F380e@t '(_ any . each-any)))) (if F3810@ls/false (apply (lambda (F3812@e F3813@e*) (F30a9@bless (let F381a@f ((F3816@e F3812@e) (F3817@e* F3813@e*)) (if (null? F3817@e*) (list 'begin '#f F3816@e) (cons 'if (cons F3816@e (cons (F381a@f (car F3817@e*) (cdr F3817@e*)) '(#f)))))))) F3810@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F380e@t))))))))) (set! F4bba@F30d5@and-macro F30d5@and-macro) (set! F30d7@cond-macro (lambda (F381c@stx) (let ((F381e@t F381c@stx)) (let ((F3820@ls/false (F30f3@syntax-dispatch F381e@t '(_ any . each-any)))) (if F3820@ls/false (apply (lambda (F3822@cls F3823@cls*) (F30a9@bless (let F382a@f ((F3826@cls F3822@cls) (F3827@cls* F3823@cls*)) (if (null? F3827@cls*) (let ((F382c@t F3826@cls)) (let ((F382e@ls/false (F30f3@syntax-dispatch F382c@t '(#(scheme-id else) any . each-any)))) (if F382e@ls/false (apply (lambda (F3830@e F3831@e*) (cons 'begin (cons F3830@e F3831@e*))) F382e@ls/false) (let ((F3834@t F382c@t)) (let ((F3836@ls/false (F30f3@syntax-dispatch F3834@t '(any #(scheme-id =>) any)))) (if F3836@ls/false (apply (lambda (F3838@e F3839@p) (list 'let (list (list 't F3838@e)) (list 'if 't (cons F3839@p '(t))))) F3836@ls/false) (let ((F383c@t F3834@t)) (let ((F383e@ls/false (F30f3@syntax-dispatch F383c@t '(any)))) (if F383e@ls/false (apply (lambda (F3840@e) (cons 'or (cons F3840@e '((if #f #f))))) F383e@ls/false) (let ((F3842@t F383c@t)) (let ((F3844@ls/false (F30f3@syntax-dispatch F3842@t '(any . each-any)))) (if F3844@ls/false (apply (lambda (F3846@e F3847@e*) (list 'if F3846@e (cons 'begin F3847@e*))) F3844@ls/false) (let ((F384a@t F3842@t)) (let ((F384c@ls/false (F30f3@syntax-dispatch F384a@t '_))) (if F384c@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid last clause" F381c@stx)) F384c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F384a@t)))))))))))))))) (let ((F384e@t F3826@cls)) (let ((F3850@ls/false (F30f3@syntax-dispatch F384e@t '(#(scheme-id else) any . each-any)))) (if F3850@ls/false (apply (lambda (F3852@e F3853@e*) (F31d3@syntax-violation '#f '"incorrect position of keyword else" F381c@stx)) F3850@ls/false) (let ((F3856@t F384e@t)) (let ((F3858@ls/false (F30f3@syntax-dispatch F3856@t '(any #(scheme-id =>) any)))) (if F3858@ls/false (apply (lambda (F385a@e F385b@p) (list 'let (list (list 't F385a@e)) (list 'if 't (cons F385b@p '(t)) (F382a@f (car F3827@cls*) (cdr F3827@cls*))))) F3858@ls/false) (let ((F385e@t F3856@t)) (let ((F3860@ls/false (F30f3@syntax-dispatch F385e@t '(any)))) (if F3860@ls/false (apply (lambda (F3862@e) (list 'or F3862@e (F382a@f (car F3827@cls*) (cdr F3827@cls*)))) F3860@ls/false) (let ((F3864@t F385e@t)) (let ((F3866@ls/false (F30f3@syntax-dispatch F3864@t '(any . each-any)))) (if F3866@ls/false (apply (lambda (F3868@e F3869@e*) (list 'if F3868@e (cons 'begin F3869@e*) (F382a@f (car F3827@cls*) (cdr F3827@cls*)))) F3866@ls/false) (let ((F386c@t F3864@t)) (let ((F386e@ls/false (F30f3@syntax-dispatch F386c@t '_))) (if F386e@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid last clause" F381c@stx)) F386e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F386c@t)))))))))))))))))))) F3820@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F381e@t)))))) (set! F4bbb@F30d7@cond-macro F30d7@cond-macro) (set! F30d9@do-include (lambda (F3870@stx F3871@id F3872@filename) (let ((F3876@filename (F2f00@stx->datum F3872@filename))) (begin (if (not (and (string? F3876@filename) (F2eec@id? F3871@id))) (F31d3@syntax-violation '#f '"invalid syntax" F3870@stx) (void)) (cons (F30a9@bless 'begin) (with-input-from-file F3876@filename (lambda () (let F387a@f ((F3878@ls '())) (let ((F387c@x (F2a17@F28e7@read-annotated))) (if (eof-object? F387c@x) (reverse F3878@ls) (F387a@f (cons (F2ecc@datum->stx F3871@id F387c@x) F3878@ls)))))))))))) (set! F4bbc@F30d9@do-include F30d9@do-include) (set! F30db@include-macro (lambda (F387e@e) (let ((F3880@t F387e@e)) (let ((F3882@ls/false (F30f3@syntax-dispatch F3880@t '(any any)))) (if F3882@ls/false (apply (lambda (F3884@id F3885@filename) (F30d9@do-include F387e@e F3884@id F3885@filename)) F3882@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3880@t)))))) (set! F4bbd@F30db@include-macro F30db@include-macro) (set! F30dd@include-into-macro (lambda (F3888@e) (let ((F388a@t F3888@e)) (let ((F388c@ls/false (F30f3@syntax-dispatch F388a@t '(_ any any)))) (if F388c@ls/false (apply (lambda (F388e@id F388f@filename) (F30d9@do-include F3888@e F388e@id F388f@filename)) F388c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F388a@t)))))) (set! F4bbe@F30dd@include-into-macro F30dd@include-into-macro) (set! F30df@syntax-rules-macro (lambda (F3892@e) (let ((F3894@t F3892@e)) (let ((F3896@ls/false (F30f3@syntax-dispatch F3894@t '(_ each-any . #(each (any any)))))) (if F3896@ls/false (apply (lambda (F3898@lits F3899@pat* F389a@tmp*) (begin (F30f9@verify-literals F3898@lits F3892@e) (F30a9@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons F3898@lits (map (lambda (F389e@pat F389f@tmp) (let ((F38a2@t F389e@pat)) (let ((F38a4@ls/false (F30f3@syntax-dispatch F38a2@t '(_ . any)))) (if F38a4@ls/false (apply (lambda (F38a6@rest) (list (cons 'g F38a6@rest) (list 'syntax F389f@tmp))) F38a4@ls/false) (let ((F38a8@t F38a2@t)) (let ((F38aa@ls/false (F30f3@syntax-dispatch F38a8@t '_))) (if F38aa@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid syntax-rules pattern" F3892@e F389e@pat)) F38aa@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F38a8@t)))))))) F3899@pat* F389a@tmp*)))))))) F3896@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3894@t)))))) (set! F4bbf@F30df@syntax-rules-macro F30df@syntax-rules-macro) (set! F30e1@quasiquote-macro (let ((F38ad@datum '#f) (F38c9@quasicons* '#f) (F38cb@quasicons '#f) (F38cd@quasiappend '#f) (F38cf@quasivector '#f) (F38d1@vquasi '#f) (F38d3@quasi '#f)) (begin (set! F38ad@datum (lambda (F39ae@x) (list (F307b@scheme-stx 'quote) (F2ed4@mkstx F39ae@x '() '() '())))) (set! F38c9@quasicons* (lambda (F39a6@x F39a7@y) (let F39ac@f ((F39aa@x F39a6@x)) (if (null? F39aa@x) F39a7@y (F38cb@quasicons (car F39aa@x) (F39ac@f (cdr F39aa@x))))))) (set! F38cb@quasicons (lambda (F3980@x F3981@y) (let ((F3984@t F3981@y)) (let ((F3986@ls/false (F30f3@syntax-dispatch F3984@t '(#(scheme-id quote) any)))) (if F3986@ls/false (apply (lambda (F3988@dy) (let ((F398a@t F3980@x)) (let ((F398c@ls/false (F30f3@syntax-dispatch F398a@t '(#(scheme-id quote) any)))) (if F398c@ls/false (apply (lambda (F398e@dx) (list (F307b@scheme-stx 'quote) (cons F398e@dx F3988@dy))) F398c@ls/false) (let ((F3990@t F398a@t)) (let ((F3992@ls/false (F30f3@syntax-dispatch F3990@t '_))) (if F3992@ls/false (apply (lambda () (let ((F3994@t F3988@dy)) (let ((F3996@ls/false (F30f3@syntax-dispatch F3994@t '()))) (if F3996@ls/false (apply (lambda () (list (F307b@scheme-stx 'list) F3980@x)) F3996@ls/false) (let ((F3998@t F3994@t)) (let ((F399a@ls/false (F30f3@syntax-dispatch F3998@t '_))) (if F399a@ls/false (apply (lambda () (list (F307b@scheme-stx 'cons) F3980@x F3981@y)) F399a@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3998@t)))))))) F3992@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3990@t)))))))) F3986@ls/false) (let ((F399c@t F3984@t)) (let ((F399e@ls/false (F30f3@syntax-dispatch F399c@t '(#(scheme-id list) . each-any)))) (if F399e@ls/false (apply (lambda (F39a0@stuff) (cons* (F307b@scheme-stx 'list) F3980@x F39a0@stuff)) F399e@ls/false) (let ((F39a2@t F399c@t)) (let ((F39a4@ls/false (F30f3@syntax-dispatch F39a2@t '_))) (if F39a4@ls/false (apply (lambda () (list (F307b@scheme-stx 'cons) F3980@x F3981@y)) F39a4@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F39a2@t)))))))))))) (set! F38cd@quasiappend (lambda (F3966@x F3967@y) (let ((F396a@ls (let F396e@f ((F396c@x F3966@x)) (if (null? F396c@x) (let ((F3970@t F3967@y)) (let ((F3972@ls/false (F30f3@syntax-dispatch F3970@t '(#(scheme-id quote) ())))) (if F3972@ls/false (apply (lambda () '()) F3972@ls/false) (let ((F3974@t F3970@t)) (let ((F3976@ls/false (F30f3@syntax-dispatch F3974@t '_))) (if F3976@ls/false (apply (lambda () (list F3967@y)) F3976@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3974@t))))))) (let ((F3978@t (car F396c@x))) (let ((F397a@ls/false (F30f3@syntax-dispatch F3978@t '(#(scheme-id quote) ())))) (if F397a@ls/false (apply (lambda () (F396e@f (cdr F396c@x))) F397a@ls/false) (let ((F397c@t F3978@t)) (let ((F397e@ls/false (F30f3@syntax-dispatch F397c@t '_))) (if F397e@ls/false (apply (lambda () (cons (car F396c@x) (F396e@f (cdr F396c@x)))) F397e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F397c@t))))))))))) (if (null? F396a@ls) (list (F307b@scheme-stx 'quote) '()) (if (null? (cdr F396a@ls)) (car F396a@ls) (cons* (F307b@scheme-stx 'append) F396a@ls)))))) (set! F38cf@quasivector (lambda (F3934@x) (let ((F3936@pat-x F3934@x)) (let ((F3938@t F3936@pat-x)) (let ((F393a@ls/false (F30f3@syntax-dispatch F3938@t '(#(scheme-id quote) each-any)))) (if F393a@ls/false (apply (lambda (F393c@x*) (list (F307b@scheme-stx 'quote) (list->vector F393c@x*))) F393a@ls/false) (let ((F393e@t F3938@t)) (let ((F3940@ls/false (F30f3@syntax-dispatch F393e@t '_))) (if F3940@ls/false (apply (lambda () (let F3948@f ((F3942@x F3934@x) (F3943@k (lambda (F3946@ls) (cons* (F307b@scheme-stx 'vector) F3946@ls)))) (let ((F394a@t F3942@x)) (let ((F394c@ls/false (F30f3@syntax-dispatch F394a@t '(#(scheme-id quote) each-any)))) (if F394c@ls/false (apply (lambda (F394e@x*) (F3943@k (map (lambda (F3950@x) (list (F307b@scheme-stx 'quote) F3950@x)) F394e@x*))) F394c@ls/false) (let ((F3952@t F394a@t)) (let ((F3954@ls/false (F30f3@syntax-dispatch F3952@t '(#(scheme-id list) . each-any)))) (if F3954@ls/false (apply (lambda (F3956@x*) (F3943@k F3956@x*)) F3954@ls/false) (let ((F3958@t F3952@t)) (let ((F395a@ls/false (F30f3@syntax-dispatch F3958@t '(#(scheme-id cons) any any)))) (if F395a@ls/false (apply (lambda (F395c@x F395d@y) (F3948@f F395d@y (lambda (F3960@ls) (F3943@k (cons F395c@x F3960@ls))))) F395a@ls/false) (let ((F3962@t F3958@t)) (let ((F3964@ls/false (F30f3@syntax-dispatch F3962@t '_))) (if F3964@ls/false (apply (lambda () (list (F307b@scheme-stx 'list->vector) F3936@pat-x)) F3964@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3962@t))))))))))))))) F3940@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F393e@t)))))))))) (set! F38d1@vquasi (lambda (F3912@p F3913@lev) (let ((F3916@t F3912@p)) (let ((F3918@ls/false (F30f3@syntax-dispatch F3916@t '(any . any)))) (if F3918@ls/false (apply (lambda (F391a@p F391b@q) (let ((F391e@t F391a@p)) (let ((F3920@ls/false (F30f3@syntax-dispatch F391e@t '(#(scheme-id unquote) . each-any)))) (if F3920@ls/false (apply (lambda (F3922@p) (if (= F3913@lev '0) (F38c9@quasicons* F3922@p (F38d1@vquasi F391b@q F3913@lev)) (F38cb@quasicons (F38cb@quasicons (F38ad@datum 'unquote) (F38d3@quasi F3922@p (- F3913@lev '1))) (F38d1@vquasi F391b@q F3913@lev)))) F3920@ls/false) (let ((F3924@t F391e@t)) (let ((F3926@ls/false (F30f3@syntax-dispatch F3924@t '(#(scheme-id unquote-splicing) . each-any)))) (if F3926@ls/false (apply (lambda (F3928@p) (if (= F3913@lev '0) (F38cd@quasiappend F3928@p (F38d1@vquasi F391b@q F3913@lev)) (F38cb@quasicons (F38cb@quasicons (F38ad@datum 'unquote-splicing) (F38d3@quasi F3928@p (- F3913@lev '1))) (F38d1@vquasi F391b@q F3913@lev)))) F3926@ls/false) (let ((F392a@t F3924@t)) (let ((F392c@ls/false (F30f3@syntax-dispatch F392a@t 'any))) (if F392c@ls/false (apply (lambda (F392e@p) (F38cb@quasicons (F38d3@quasi F392e@p F3913@lev) (F38d1@vquasi F391b@q F3913@lev))) F392c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F392a@t))))))))))) F3918@ls/false) (let ((F3930@t F3916@t)) (let ((F3932@ls/false (F30f3@syntax-dispatch F3930@t '()))) (if F3932@ls/false (apply (lambda () (list (F307b@scheme-stx 'quote) '())) F3932@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3930@t))))))))) (set! F38d3@quasi (lambda (F38dc@p F38dd@lev) (let ((F38e0@t F38dc@p)) (let ((F38e2@ls/false (F30f3@syntax-dispatch F38e0@t '(#(scheme-id unquote) any)))) (if F38e2@ls/false (apply (lambda (F38e4@p) (if (= F38dd@lev '0) F38e4@p (F38cb@quasicons (F38ad@datum 'unquote) (F38d3@quasi (list F38e4@p) (- F38dd@lev '1))))) F38e2@ls/false) (let ((F38e6@t F38e0@t)) (let ((F38e8@ls/false (F30f3@syntax-dispatch F38e6@t '((#(scheme-id unquote) . each-any) . any)))) (if F38e8@ls/false (apply (lambda (F38ea@p F38eb@q) (if (= F38dd@lev '0) (F38c9@quasicons* F38ea@p (F38d3@quasi F38eb@q F38dd@lev)) (F38cb@quasicons (F38cb@quasicons (F38ad@datum 'unquote) (F38d3@quasi F38ea@p (- F38dd@lev '1))) (F38d3@quasi F38eb@q F38dd@lev)))) F38e8@ls/false) (let ((F38ee@t F38e6@t)) (let ((F38f0@ls/false (F30f3@syntax-dispatch F38ee@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if F38f0@ls/false (apply (lambda (F38f2@p F38f3@q) (if (= F38dd@lev '0) (F38cd@quasiappend F38f2@p (F38d3@quasi F38f3@q F38dd@lev)) (F38cb@quasicons (F38cb@quasicons (F38ad@datum 'unquote-splicing) (F38d3@quasi F38f2@p (- F38dd@lev '1))) (F38d3@quasi F38f3@q F38dd@lev)))) F38f0@ls/false) (let ((F38f6@t F38ee@t)) (let ((F38f8@ls/false (F30f3@syntax-dispatch F38f6@t '(#(scheme-id quasiquote) any)))) (if F38f8@ls/false (apply (lambda (F38fa@p) (F38cb@quasicons (F38ad@datum 'quasiquote) (F38d3@quasi (list F38fa@p) (+ F38dd@lev '1)))) F38f8@ls/false) (let ((F38fc@t F38f6@t)) (let ((F38fe@ls/false (F30f3@syntax-dispatch F38fc@t '(any . any)))) (if F38fe@ls/false (apply (lambda (F3900@p F3901@q) (F38cb@quasicons (F38d3@quasi F3900@p F38dd@lev) (F38d3@quasi F3901@q F38dd@lev))) F38fe@ls/false) (let ((F3904@t F38fc@t)) (let ((F3906@ls/false (F30f3@syntax-dispatch F3904@t '#(vector each-any)))) (if (and F3906@ls/false (apply (lambda (F3908@x) (not (F2eb8@stx? F3908@x))) F3906@ls/false)) (apply (lambda (F390a@x) (F38cf@quasivector (F38d1@vquasi F390a@x F38dd@lev))) F3906@ls/false) (let ((F390c@t F3904@t)) (let ((F390e@ls/false (F30f3@syntax-dispatch F390c@t 'any))) (if F390e@ls/false (apply (lambda (F3910@p) (list (F307b@scheme-stx 'quote) F3910@p)) F390e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F390c@t)))))))))))))))))))))))) (lambda (F38d4@x) (let ((F38d6@t F38d4@x)) (let ((F38d8@ls/false (F30f3@syntax-dispatch F38d6@t '(_ any)))) (if F38d8@ls/false (apply (lambda (F38da@e) (F38d3@quasi F38da@e '0)) F38d8@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F38d6@t)))))))) (set! F4bc0@F30e1@quasiquote-macro F30e1@quasiquote-macro) (set! F30e3@quasisyntax-macro (let ((F39b1@quasi '#f)) (begin (set! F39b1@quasi (lambda (F39cc@p F39cd@lev) (let ((F39d0@t F39cc@p)) (let ((F39d2@ls/false (F30f3@syntax-dispatch F39d0@t '(#(scheme-id unsyntax) any)))) (if F39d2@ls/false (apply (lambda (F39d4@p) (if (= F39cd@lev '0) (let ((F39d6@g (gensym))) (values (list F39d6@g) (list F39d4@p) F39d6@g)) (call-with-values (lambda () (F39b1@quasi F39d4@p (- F39cd@lev '1))) (lambda (F39de@F39d9 F39df@F39db F39e0@F39dd) (let ((F39e4@p F39e0@F39dd) (F39e5@rhs* F39df@F39db) (F39e6@lhs* F39de@F39d9)) (values F39e6@lhs* F39e5@rhs* (list 'unsyntax F39e4@p))))))) F39d2@ls/false) (let ((F39ea@t F39d0@t)) (let ((F39ec@ls/false (F30f3@syntax-dispatch F39ea@t '#(scheme-id unsyntax)))) (if (and F39ec@ls/false (apply (lambda () (= F39cd@lev '0)) F39ec@ls/false)) (apply (lambda () (F31d3@syntax-violation '#f '"incorrect use of unsyntax" F39cc@p)) F39ec@ls/false) (let ((F39ee@t F39ea@t)) (let ((F39f0@ls/false (F30f3@syntax-dispatch F39ee@t '((#(scheme-id unsyntax) . each-any) . any)))) (if F39f0@ls/false (apply (lambda (F39f2@p* F39f3@q) (call-with-values (lambda () (F39b1@quasi F39f3@q F39cd@lev)) (lambda (F39fc@F39f7 F39fd@F39f9 F39fe@F39fb) (let ((F3a02@q F39fe@F39fb) (F3a03@rhs* F39fd@F39f9) (F3a04@lhs* F39fc@F39f7)) (if (= F39cd@lev '0) (let ((F3a08@g* (map (lambda (F3a0a@x) (gensym)) F39f2@p*))) (values (append F3a08@g* F3a04@lhs*) (append F39f2@p* F3a03@rhs*) (append F3a08@g* F3a02@q))) (call-with-values (lambda () (F39b1@quasi F39f2@p* (- F39cd@lev '1))) (lambda (F3a12@F3a0d F3a13@F3a0f F3a14@F3a11) (let ((F3a18@p* F3a14@F3a11) (F3a19@rhs2* F3a13@F3a0f) (F3a1a@lhs2* F3a12@F3a0d)) (values (append F3a1a@lhs2* F3a04@lhs*) (append F3a19@rhs2* F3a03@rhs*) (cons (cons 'unsyntax F3a18@p*) F3a02@q)))))))))) F39f0@ls/false) (let ((F3a1e@t F39ee@t)) (let ((F3a20@ls/false (F30f3@syntax-dispatch F3a1e@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if F3a20@ls/false (apply (lambda (F3a22@p* F3a23@q) (call-with-values (lambda () (F39b1@quasi F3a23@q F39cd@lev)) (lambda (F3a2c@F3a27 F3a2d@F3a29 F3a2e@F3a2b) (let ((F3a32@q F3a2e@F3a2b) (F3a33@rhs* F3a2d@F3a29) (F3a34@lhs* F3a2c@F3a27)) (if (= F39cd@lev '0) (let ((F3a38@g* (map (lambda (F3a3a@x) (gensym)) F3a22@p*))) (values (append (map (lambda (F3a3c@g) (cons F3a3c@g '(...))) F3a38@g*) F3a34@lhs*) (append F3a22@p* F3a33@rhs*) (append (apply append (map (lambda (F3a3e@g) (cons F3a3e@g '(...))) F3a38@g*)) F3a32@q))) (call-with-values (lambda () (F39b1@quasi F3a22@p* (- F39cd@lev '1))) (lambda (F3a46@F3a41 F3a47@F3a43 F3a48@F3a45) (let ((F3a4c@p* F3a48@F3a45) (F3a4d@rhs2* F3a47@F3a43) (F3a4e@lhs2* F3a46@F3a41)) (values (append F3a4e@lhs2* F3a34@lhs*) (append F3a4d@rhs2* F3a33@rhs*) (cons (cons 'unsyntax-splicing F3a4c@p*) F3a32@q)))))))))) F3a20@ls/false) (let ((F3a52@t F3a1e@t)) (let ((F3a54@ls/false (F30f3@syntax-dispatch F3a52@t '#(scheme-id unsyntax-splicing)))) (if (and F3a54@ls/false (apply (lambda () (= F39cd@lev '0)) F3a54@ls/false)) (apply (lambda () (F31d3@syntax-violation '#f '"incorrect use of unsyntax-splicing" F39cc@p)) F3a54@ls/false) (let ((F3a56@t F3a52@t)) (let ((F3a58@ls/false (F30f3@syntax-dispatch F3a56@t '(#(scheme-id quasisyntax) any)))) (if F3a58@ls/false (apply (lambda (F3a5a@p) (call-with-values (lambda () (F39b1@quasi F3a5a@p (+ F39cd@lev '1))) (lambda (F3a62@F3a5d F3a63@F3a5f F3a64@F3a61) (let ((F3a68@p F3a64@F3a61) (F3a69@rhs* F3a63@F3a5f) (F3a6a@lhs* F3a62@F3a5d)) (values F3a6a@lhs* F3a69@rhs* (list 'quasisyntax F3a68@p)))))) F3a58@ls/false) (let ((F3a6e@t F3a56@t)) (let ((F3a70@ls/false (F30f3@syntax-dispatch F3a6e@t '(any . any)))) (if F3a70@ls/false (apply (lambda (F3a72@p F3a73@q) (call-with-values (lambda () (F39b1@quasi F3a72@p F39cd@lev)) (lambda (F3a82@F3a77 F3a83@F3a79 F3a84@F3a7b) (call-with-values (lambda () (F39b1@quasi F3a73@q F39cd@lev)) (lambda (F3a88@F3a7d F3a89@F3a7f F3a8a@F3a81) (let ((F3a8e@q F3a8a@F3a81) (F3a8f@rhs2* F3a89@F3a7f) (F3a90@lhs2* F3a88@F3a7d) (F3a91@p F3a84@F3a7b) (F3a92@rhs* F3a83@F3a79) (F3a93@lhs* F3a82@F3a77)) (values (append F3a90@lhs2* F3a93@lhs*) (append F3a8f@rhs2* F3a92@rhs*) (cons F3a91@p F3a8e@q)))))))) F3a70@ls/false) (let ((F3a9a@t F3a6e@t)) (let ((F3a9c@ls/false (F30f3@syntax-dispatch F3a9a@t '#(vector each-any)))) (if F3a9c@ls/false (apply (lambda (F3a9e@x*) (call-with-values (lambda () (F39b1@quasi F3a9e@x* F39cd@lev)) (lambda (F3aa6@F3aa1 F3aa7@F3aa3 F3aa8@F3aa5) (let ((F3aac@x* F3aa8@F3aa5) (F3aad@rhs* F3aa7@F3aa3) (F3aae@lhs* F3aa6@F3aa1)) (values F3aae@lhs* F3aad@rhs* (list->vector F3aac@x*)))))) F3a9c@ls/false) (let ((F3ab2@t F3a9a@t)) (let ((F3ab4@ls/false (F30f3@syntax-dispatch F3ab2@t '_))) (if F3ab4@ls/false (apply (lambda () (values '() '() F39cc@p)) F3ab4@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3ab2@t)))))))))))))))))))))))))))))) (lambda (F39b2@x) (let ((F39b4@t F39b2@x)) (let ((F39b6@ls/false (F30f3@syntax-dispatch F39b4@t '(_ any)))) (if F39b6@ls/false (apply (lambda (F39b8@e) (call-with-values (lambda () (F39b1@quasi F39b8@e '0)) (lambda (F39c0@F39bb F39c1@F39bd F39c2@F39bf) (let ((F39c6@v F39c2@F39bf) (F39c7@rhs* F39c1@F39bd) (F39c8@lhs* F39c0@F39bb)) (F30a9@bless (list 'syntax-case (cons 'list F39c7@rhs*) '() (list F39c8@lhs* (list 'syntax F39c6@v)))))))) F39b6@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F39b4@t)))))))) (set! F4bc1@F30e3@quasisyntax-macro F30e3@quasisyntax-macro) (set! F30e5@define-struct-macro (lambda (F3ab6@stx) (F31d3@syntax-violation '#f '"define-struct not supported" F3ab6@stx))) (set! F4bc2@F30e5@define-struct-macro F30e5@define-struct-macro) (set! F30e7@define-record-type-macro (lambda (F3ab8@x) (let ((F3abb@id '#f) (F3abd@get-record-name '#f) (F3abf@get-record-constructor-name '#f) (F3ac1@get-record-predicate-name '#f) (F3ac3@get-clause '#f) (F3ac5@foo-rtd-code '#f) (F3ac7@parent-rtd-code '#f) (F3ac9@parent-rcd-code '#f) (F3acb@foo-rcd-code '#f) (F3acd@get-protocol-code '#f) (F3acf@get-fields '#f) (F3ad1@get-mutator-indices '#f) (F3ad3@get-mutators '#f) (F3ad5@get-accessors '#f) (F3ad7@enumerate '#f) (F3ad9@do-define-record '#f) (F3adb@verify-clauses '#f)) (begin (set! F3abb@id (lambda (F3cae@ctxt . F3cb0@str*) (F31d7@datum->syntax F3cae@ctxt (string->symbol (apply string-append (map (lambda (F3cb2@x) (if (symbol? F3cb2@x) (symbol->string F3cb2@x) (if (string? F3cb2@x) F3cb2@x (assertion-violation 'define-record-type '"BUG")))) F3cb0@str*)))))) (set! F3abd@get-record-name (lambda (F3c9c@spec) (let ((F3c9e@t F3c9c@spec)) (let ((F3ca0@ls/false (F30f3@syntax-dispatch F3c9e@t '(any any any)))) (if F3ca0@ls/false (apply (lambda (F3ca2@foo F3ca3@make-foo F3ca4@foo?) F3ca2@foo) F3ca0@ls/false) (let ((F3ca8@t F3c9e@t)) (let ((F3caa@ls/false (F30f3@syntax-dispatch F3ca8@t 'any))) (if F3caa@ls/false (apply (lambda (F3cac@foo) F3cac@foo) F3caa@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3ca8@t))))))))) (set! F3abf@get-record-constructor-name (lambda (F3c88@spec) (let ((F3c8a@t F3c88@spec)) (let ((F3c8c@ls/false (F30f3@syntax-dispatch F3c8a@t '(any any any)))) (if F3c8c@ls/false (apply (lambda (F3c8e@foo F3c8f@make-foo F3c90@foo?) F3c8f@make-foo) F3c8c@ls/false) (let ((F3c94@t F3c8a@t)) (let ((F3c96@ls/false (F30f3@syntax-dispatch F3c94@t 'any))) (if (and F3c96@ls/false (apply (lambda (F3c98@foo) (F2eec@id? F3c98@foo)) F3c96@ls/false)) (apply (lambda (F3c9a@foo) (F3abb@id F3c9a@foo '"make-" (F2f00@stx->datum F3c9a@foo))) F3c96@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c94@t))))))))) (set! F3ac1@get-record-predicate-name (lambda (F3c74@spec) (let ((F3c76@t F3c74@spec)) (let ((F3c78@ls/false (F30f3@syntax-dispatch F3c76@t '(any any any)))) (if F3c78@ls/false (apply (lambda (F3c7a@foo F3c7b@make-foo F3c7c@foo?) F3c7c@foo?) F3c78@ls/false) (let ((F3c80@t F3c76@t)) (let ((F3c82@ls/false (F30f3@syntax-dispatch F3c80@t 'any))) (if (and F3c82@ls/false (apply (lambda (F3c84@foo) (F2eec@id? F3c84@foo)) F3c82@ls/false)) (apply (lambda (F3c86@foo) (F3abb@id F3c86@foo (F2f00@stx->datum F3c86@foo) '"?")) F3c82@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c80@t))))))))) (set! F3ac3@get-clause (lambda (F3c62@id F3c63@ls) (let ((F3c66@t F3c63@ls)) (let ((F3c68@ls/false (F30f3@syntax-dispatch F3c66@t '()))) (if F3c68@ls/false (apply (lambda () '#f) F3c68@ls/false) (let ((F3c6a@t F3c66@t)) (let ((F3c6c@ls/false (F30f3@syntax-dispatch F3c6a@t '((any . any) . any)))) (if F3c6c@ls/false (apply (lambda (F3c6e@x F3c6f@rest F3c70@ls) (if (F2ef2@free-id=? (F30a9@bless F3c62@id) F3c6e@x) (cons F3c6e@x F3c6f@rest) (F3ac3@get-clause F3c62@id F3c70@ls))) F3c6c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c6a@t))))))))) (set! F3ac5@foo-rtd-code (lambda (F3c10@name F3c11@clause* F3c12@parent-rtd-code) (let ((F3c17@convert-field-spec* '#f)) (begin (set! F3c17@convert-field-spec* (lambda (F3c48@ls) (list->vector (map (lambda (F3c4a@x) (let ((F3c4c@t F3c4a@x)) (let ((F3c4e@ls/false (F30f3@syntax-dispatch F3c4c@t '(#(scheme-id mutable) any . any)))) (if F3c4e@ls/false (apply (lambda (F3c50@name F3c51@rest) (list 'mutable F3c50@name)) F3c4e@ls/false) (let ((F3c54@t F3c4c@t)) (let ((F3c56@ls/false (F30f3@syntax-dispatch F3c54@t '(#(scheme-id immutable) any . any)))) (if F3c56@ls/false (apply (lambda (F3c58@name F3c59@rest) (list 'immutable F3c58@name)) F3c56@ls/false) (let ((F3c5c@t F3c54@t)) (let ((F3c5e@ls/false (F30f3@syntax-dispatch F3c5c@t 'any))) (if F3c5e@ls/false (apply (lambda (F3c60@name) (list 'immutable F3c60@name)) F3c5e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c5c@t))))))))))) F3c48@ls)))) (let ((F3c18@uid-code (let ((F3c20@t (F3ac3@get-clause 'nongenerative F3c11@clause*))) (let ((F3c22@ls/false (F30f3@syntax-dispatch F3c20@t '(_)))) (if F3c22@ls/false (apply (lambda () (list 'quote (gensym))) F3c22@ls/false) (let ((F3c24@t F3c20@t)) (let ((F3c26@ls/false (F30f3@syntax-dispatch F3c24@t '(_ any)))) (if F3c26@ls/false (apply (lambda (F3c28@uid) (list 'quote F3c28@uid)) F3c26@ls/false) (let ((F3c2a@t F3c24@t)) (let ((F3c2c@ls/false (F30f3@syntax-dispatch F3c2a@t '_))) (if F3c2c@ls/false (apply (lambda () '#f) F3c2c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c2a@t))))))))))) (F3c19@sealed? (let ((F3c2e@t (F3ac3@get-clause 'sealed F3c11@clause*))) (let ((F3c30@ls/false (F30f3@syntax-dispatch F3c2e@t '(_ #(atom #t))))) (if F3c30@ls/false (apply (lambda () '#t) F3c30@ls/false) (let ((F3c32@t F3c2e@t)) (let ((F3c34@ls/false (F30f3@syntax-dispatch F3c32@t '_))) (if F3c34@ls/false (apply (lambda () '#f) F3c34@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c32@t)))))))) (F3c1a@opaque? (let ((F3c36@t (F3ac3@get-clause 'opaque F3c11@clause*))) (let ((F3c38@ls/false (F30f3@syntax-dispatch F3c36@t '(_ #(atom #t))))) (if F3c38@ls/false (apply (lambda () '#t) F3c38@ls/false) (let ((F3c3a@t F3c36@t)) (let ((F3c3c@ls/false (F30f3@syntax-dispatch F3c3a@t '_))) (if F3c3c@ls/false (apply (lambda () '#f) F3c3c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c3a@t)))))))) (F3c1b@fields (let ((F3c3e@t (F3ac3@get-clause 'fields F3c11@clause*))) (let ((F3c40@ls/false (F30f3@syntax-dispatch F3c3e@t '(_ . each-any)))) (if F3c40@ls/false (apply (lambda (F3c42@field-spec*) (list 'quote (F3c17@convert-field-spec* F3c42@field-spec*))) F3c40@ls/false) (let ((F3c44@t F3c3e@t)) (let ((F3c46@ls/false (F30f3@syntax-dispatch F3c44@t '_))) (if F3c46@ls/false (apply (lambda () ''#()) F3c46@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c44@t))))))))) (F30a9@bless (list 'make-record-type-descriptor (list 'quote F3c10@name) F3c12@parent-rtd-code F3c18@uid-code F3c19@sealed? F3c1a@opaque? F3c1b@fields))))))) (set! F3ac7@parent-rtd-code (lambda (F3bf8@clause*) (let ((F3bfa@t (F3ac3@get-clause 'parent F3bf8@clause*))) (let ((F3bfc@ls/false (F30f3@syntax-dispatch F3bfa@t '(_ any)))) (if F3bfc@ls/false (apply (lambda (F3bfe@name) (list 'record-type-descriptor F3bfe@name)) F3bfc@ls/false) (let ((F3c00@t F3bfa@t)) (let ((F3c02@ls/false (F30f3@syntax-dispatch F3c00@t '#(atom #f)))) (if F3c02@ls/false (apply (lambda () (let ((F3c04@t (F3ac3@get-clause 'parent-rtd F3bf8@clause*))) (let ((F3c06@ls/false (F30f3@syntax-dispatch F3c04@t '(_ any any)))) (if F3c06@ls/false (apply (lambda (F3c08@rtd F3c09@rcd) F3c08@rtd) F3c06@ls/false) (let ((F3c0c@t F3c04@t)) (let ((F3c0e@ls/false (F30f3@syntax-dispatch F3c0c@t '#(atom #f)))) (if F3c0e@ls/false (apply (lambda () '#f) F3c0e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c0c@t)))))))) F3c02@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3c00@t))))))))) (set! F3ac9@parent-rcd-code (lambda (F3be0@clause*) (let ((F3be2@t (F3ac3@get-clause 'parent F3be0@clause*))) (let ((F3be4@ls/false (F30f3@syntax-dispatch F3be2@t '(_ any)))) (if F3be4@ls/false (apply (lambda (F3be6@name) (list 'record-constructor-descriptor F3be6@name)) F3be4@ls/false) (let ((F3be8@t F3be2@t)) (let ((F3bea@ls/false (F30f3@syntax-dispatch F3be8@t '#(atom #f)))) (if F3bea@ls/false (apply (lambda () (let ((F3bec@t (F3ac3@get-clause 'parent-rtd F3be0@clause*))) (let ((F3bee@ls/false (F30f3@syntax-dispatch F3bec@t '(_ any any)))) (if F3bee@ls/false (apply (lambda (F3bf0@rtd F3bf1@rcd) F3bf1@rcd) F3bee@ls/false) (let ((F3bf4@t F3bec@t)) (let ((F3bf6@ls/false (F30f3@syntax-dispatch F3bf4@t '#(atom #f)))) (if F3bf6@ls/false (apply (lambda () '#f) F3bf6@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3bf4@t)))))))) F3bea@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3be8@t))))))))) (set! F3acb@foo-rcd-code (lambda (F3bd8@clause* F3bd9@foo-rtd F3bda@protocol F3bdb@parent-rcd-code) (list 'make-record-constructor-descriptor F3bd9@foo-rtd F3bdb@parent-rcd-code F3bda@protocol))) (set! F3acd@get-protocol-code (lambda (F3bcc@clause*) (let ((F3bce@t (F3ac3@get-clause 'protocol F3bcc@clause*))) (let ((F3bd0@ls/false (F30f3@syntax-dispatch F3bce@t '(_ any)))) (if F3bd0@ls/false (apply (lambda (F3bd2@expr) F3bd2@expr) F3bd0@ls/false) (let ((F3bd4@t F3bce@t)) (let ((F3bd6@ls/false (F30f3@syntax-dispatch F3bd4@t '_))) (if F3bd6@ls/false (apply (lambda () '#f) F3bd6@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3bd4@t))))))))) (set! F3acf@get-fields (lambda (F3bba@clause*) (let ((F3bbc@t F3bba@clause*)) (let ((F3bbe@ls/false (F30f3@syntax-dispatch F3bbc@t '()))) (if F3bbe@ls/false (apply (lambda () '()) F3bbe@ls/false) (let ((F3bc0@t F3bbc@t)) (let ((F3bc2@ls/false (F30f3@syntax-dispatch F3bc0@t '((#(scheme-id fields) . each-any) . _)))) (if F3bc2@ls/false (apply (lambda (F3bc4@f*) F3bc4@f*) F3bc2@ls/false) (let ((F3bc6@t F3bc0@t)) (let ((F3bc8@ls/false (F30f3@syntax-dispatch F3bc6@t '(_ . any)))) (if F3bc8@ls/false (apply (lambda (F3bca@rest) (F3acf@get-fields F3bca@rest)) F3bc8@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3bc6@t)))))))))))) (set! F3ad1@get-mutator-indices (lambda (F3ba2@fields) (let F3ba8@f ((F3ba4@fields F3ba2@fields) (F3ba5@i '0)) (let ((F3baa@t F3ba4@fields)) (let ((F3bac@ls/false (F30f3@syntax-dispatch F3baa@t '()))) (if F3bac@ls/false (apply (lambda () '()) F3bac@ls/false) (let ((F3bae@t F3baa@t)) (let ((F3bb0@ls/false (F30f3@syntax-dispatch F3bae@t '((#(scheme-id mutable) . _) . any)))) (if F3bb0@ls/false (apply (lambda (F3bb2@rest) (cons F3ba5@i (F3ba8@f F3bb2@rest (+ F3ba5@i '1)))) F3bb0@ls/false) (let ((F3bb4@t F3bae@t)) (let ((F3bb6@ls/false (F30f3@syntax-dispatch F3bb4@t '(_ . any)))) (if F3bb6@ls/false (apply (lambda (F3bb8@rest) (F3ba8@f F3bb8@rest (+ F3ba5@i '1))) F3bb6@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3bb4@t))))))))))))) (set! F3ad3@get-mutators (lambda (F3b78@foo F3b79@fields) (let ((F3b7d@gen-name '#f)) (begin (set! F3b7d@gen-name (lambda (F3ba0@x) (F31d7@datum->syntax F3b78@foo (string->symbol (string-append (symbol->string (F31d9@syntax->datum F3b78@foo)) '"-" (symbol->string (F31d9@syntax->datum F3ba0@x)) '"-set!"))))) (let F3b80@f ((F3b7e@fields F3b79@fields)) (let ((F3b82@t F3b7e@fields)) (let ((F3b84@ls/false (F30f3@syntax-dispatch F3b82@t '()))) (if F3b84@ls/false (apply (lambda () '()) F3b84@ls/false) (let ((F3b86@t F3b82@t)) (let ((F3b88@ls/false (F30f3@syntax-dispatch F3b86@t '((#(scheme-id mutable) any any any) . any)))) (if F3b88@ls/false (apply (lambda (F3b8a@name F3b8b@accessor F3b8c@mutator F3b8d@rest) (cons F3b8c@mutator (F3b80@f F3b8d@rest))) F3b88@ls/false) (let ((F3b92@t F3b86@t)) (let ((F3b94@ls/false (F30f3@syntax-dispatch F3b92@t '((#(scheme-id mutable) any) . any)))) (if F3b94@ls/false (apply (lambda (F3b96@name F3b97@rest) (cons (F3b7d@gen-name F3b96@name) (F3b80@f F3b97@rest))) F3b94@ls/false) (let ((F3b9a@t F3b92@t)) (let ((F3b9c@ls/false (F30f3@syntax-dispatch F3b9a@t '(_ . any)))) (if F3b9c@ls/false (apply (lambda (F3b9e@rest) (F3b80@f F3b9e@rest)) F3b9c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3b9a@t)))))))))))))))))) (set! F3ad5@get-accessors (lambda (F3b34@foo F3b35@fields) (let ((F3b39@gen-name '#f)) (begin (set! F3b39@gen-name (lambda (F3b76@x) (F31d7@datum->syntax F3b34@foo (string->symbol (string-append (symbol->string (F31d9@syntax->datum F3b34@foo)) '"-" (symbol->string (F31d9@syntax->datum F3b76@x))))))) (map (lambda (F3b3a@field) (let ((F3b3c@t F3b3a@field)) (let ((F3b3e@ls/false (F30f3@syntax-dispatch F3b3c@t '(#(scheme-id mutable) any any any)))) (if (and F3b3e@ls/false (apply (lambda (F3b40@name F3b41@accessor F3b42@mutator) (F2eec@id? F3b41@accessor)) F3b3e@ls/false)) (apply (lambda (F3b46@name F3b47@accessor F3b48@mutator) F3b47@accessor) F3b3e@ls/false) (let ((F3b4c@t F3b3c@t)) (let ((F3b4e@ls/false (F30f3@syntax-dispatch F3b4c@t '(#(scheme-id immutable) any any)))) (if (and F3b4e@ls/false (apply (lambda (F3b50@name F3b51@accessor) (F2eec@id? F3b51@accessor)) F3b4e@ls/false)) (apply (lambda (F3b54@name F3b55@accessor) F3b55@accessor) F3b4e@ls/false) (let ((F3b58@t F3b4c@t)) (let ((F3b5a@ls/false (F30f3@syntax-dispatch F3b58@t '(#(scheme-id mutable) any)))) (if (and F3b5a@ls/false (apply (lambda (F3b5c@name) (F2eec@id? F3b5c@name)) F3b5a@ls/false)) (apply (lambda (F3b5e@name) (F3b39@gen-name F3b5e@name)) F3b5a@ls/false) (let ((F3b60@t F3b58@t)) (let ((F3b62@ls/false (F30f3@syntax-dispatch F3b60@t '(#(scheme-id immutable) any)))) (if (and F3b62@ls/false (apply (lambda (F3b64@name) (F2eec@id? F3b64@name)) F3b62@ls/false)) (apply (lambda (F3b66@name) (F3b39@gen-name F3b66@name)) F3b62@ls/false) (let ((F3b68@t F3b60@t)) (let ((F3b6a@ls/false (F30f3@syntax-dispatch F3b68@t 'any))) (if (and F3b6a@ls/false (apply (lambda (F3b6c@name) (F2eec@id? F3b6c@name)) F3b6a@ls/false)) (apply (lambda (F3b6e@name) (F3b39@gen-name F3b6e@name)) F3b6a@ls/false) (let ((F3b70@t F3b68@t)) (let ((F3b72@ls/false (F30f3@syntax-dispatch F3b70@t 'any))) (if F3b72@ls/false (apply (lambda (F3b74@others) (F31d3@syntax-violation '#f '"invalid field spec" F3b3a@field)) F3b72@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3b70@t)))))))))))))))))))) F3b35@fields))))) (set! F3ad7@enumerate (lambda (F3b2c@ls) (let F3b32@f ((F3b2e@ls F3b2c@ls) (F3b2f@i '0)) (if (null? F3b2e@ls) '() (cons F3b2f@i (F3b32@f (cdr F3b2e@ls) (+ F3b2f@i '1))))))) (set! F3ad9@do-define-record (lambda (F3b04@namespec F3b05@clause*) (let ((F3b08@foo (F3abd@get-record-name F3b04@namespec))) (let ((F3b0a@foo-rtd (gensym))) (let ((F3b0c@foo-rcd (gensym))) (let ((F3b0e@protocol (gensym))) (let ((F3b10@make-foo (F3abf@get-record-constructor-name F3b04@namespec))) (let ((F3b12@fields (F3acf@get-fields F3b05@clause*))) (let ((F3b14@idx* (F3ad7@enumerate F3b12@fields))) (let ((F3b16@foo-x* (F3ad5@get-accessors F3b08@foo F3b12@fields))) (let ((F3b18@set-foo-x!* (F3ad3@get-mutators F3b08@foo F3b12@fields))) (let ((F3b1a@set-foo-idx* (F3ad1@get-mutator-indices F3b12@fields))) (let ((F3b1c@foo? (F3ac1@get-record-predicate-name F3b04@namespec))) (let ((F3b1e@foo-rtd-code (F3ac5@foo-rtd-code F3b08@foo F3b05@clause* (F3ac7@parent-rtd-code F3b05@clause*)))) (let ((F3b20@foo-rcd-code (F3acb@foo-rcd-code F3b05@clause* F3b0a@foo-rtd F3b0e@protocol (F3ac9@parent-rcd-code F3b05@clause*)))) (let ((F3b22@protocol-code (F3acd@get-protocol-code F3b05@clause*))) (F30a9@bless (cons 'begin (cons (list 'define F3b0a@foo-rtd F3b1e@foo-rtd-code) (cons (list 'define F3b0e@protocol F3b22@protocol-code) (cons (list 'define F3b0c@foo-rcd F3b20@foo-rcd-code) (cons (list 'define-syntax F3b08@foo (list 'list ''$rtd (list 'syntax F3b0a@foo-rtd) (list 'syntax F3b0c@foo-rcd))) (cons (list 'define F3b1c@foo? (list 'record-predicate F3b0a@foo-rtd)) (cons (list 'define F3b10@make-foo (list 'record-constructor F3b0c@foo-rcd)) (append (map (lambda (F3b24@foo-x F3b25@idx) (list 'define F3b24@foo-x (list 'record-accessor F3b0a@foo-rtd F3b25@idx))) F3b16@foo-x* F3b14@idx*) (map (lambda (F3b28@set-foo-x! F3b29@idx) (list 'define F3b28@set-foo-x! (list 'record-mutator F3b0a@foo-rtd F3b29@idx))) F3b18@set-foo-x!* F3b1a@set-foo-idx*)))))))))))))))))))))))))) (set! F3adb@verify-clauses (lambda (F3ae4@x F3ae5@cls*) (let ((F3ae9@valid-kwds '#f) (F3aeb@free-id-member? '#f)) (begin (set! F3ae9@valid-kwds (map F30a9@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! F3aeb@free-id-member? (lambda (F3b00@x F3b01@ls) (and (pair? F3b01@ls) (or (F2ef2@free-id=? F3b00@x (car F3b01@ls)) (F3aeb@free-id-member? F3b00@x (cdr F3b01@ls)))))) (let F3af0@f ((F3aec@cls* F3ae5@cls*) (F3aed@seen* '())) (if (not (null? F3aec@cls*)) (let ((F3af2@t (car F3aec@cls*))) (let ((F3af4@ls/false (F30f3@syntax-dispatch F3af2@t '(any . any)))) (if F3af4@ls/false (apply (lambda (F3af6@kwd F3af7@rest) (if (or (not (F2eec@id? F3af6@kwd)) (not (F3aeb@free-id-member? F3af6@kwd F3ae9@valid-kwds))) (F31d3@syntax-violation '#f '"not a valid define-record-type keyword" F3af6@kwd) (if (F2ef8@bound-id-member? F3af6@kwd F3aed@seen*) (F31d3@syntax-violation '#f '"duplicate use of keyword " F3ae4@x F3af6@kwd) (F3af0@f (cdr F3aec@cls*) (cons F3af6@kwd F3aed@seen*))))) F3af4@ls/false) (let ((F3afa@t F3af2@t)) (let ((F3afc@ls/false (F30f3@syntax-dispatch F3afa@t 'any))) (if F3afc@ls/false (apply (lambda (F3afe@cls) (F31d3@syntax-violation '#f '"malformed define-record-type clause" F3afe@cls)) F3afc@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3afa@t))))))) (void))))))) (let ((F3adc@t F3ab8@x)) (let ((F3ade@ls/false (F30f3@syntax-dispatch F3adc@t '(_ any . each-any)))) (if F3ade@ls/false (apply (lambda (F3ae0@namespec F3ae1@clause*) (begin (F3adb@verify-clauses F3ab8@x F3ae1@clause*) (F3ad9@do-define-record F3ae0@namespec F3ae1@clause*))) F3ade@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3adc@t)))))))) (set! F4bc3@F30e7@define-record-type-macro F30e7@define-record-type-macro) (set! F30e9@define-condition-type-macro (lambda (F3cb4@x) (let ((F3cb7@mkname '#f)) (begin (set! F3cb7@mkname (lambda (F3ce4@name F3ce5@suffix) (F31d7@datum->syntax F3ce4@name (string->symbol (string-append (symbol->string (F31d9@syntax->datum F3ce4@name)) F3ce5@suffix))))) (let ((F3cb8@t F3cb4@x)) (let ((F3cba@ls/false (F30f3@syntax-dispatch F3cb8@t '(any any any any any . #(each (any any)))))) (if (and F3cba@ls/false (apply (lambda (F3cbc@ctxt F3cbd@name F3cbe@super F3cbf@constructor F3cc0@predicate F3cc1@field* F3cc2@accessor*) (and (F2eec@id? F3cbd@name) (F2eec@id? F3cbe@super) (F2eec@id? F3cbf@constructor) (F2eec@id? F3cc0@predicate) (for-all F2eec@id? F3cc1@field*) (for-all F2eec@id? F3cc2@accessor*))) F3cba@ls/false)) (apply (lambda (F3cca@ctxt F3ccb@name F3ccc@super F3ccd@constructor F3cce@predicate F3ccf@field* F3cd0@accessor*) (let ((F3cd8@aux-accessor* (map (lambda (F3cda@x) (gensym)) F3cd0@accessor*))) (F30a9@bless (cons 'begin (cons (cons 'define-record-type (cons (list F3ccb@name F3ccd@constructor (gensym)) (cons (list 'parent F3ccc@super) (cons (cons 'fields (map (lambda (F3cdc@field F3cdd@aux) (list 'immutable F3cdc@field F3cdd@aux)) F3ccf@field* F3cd8@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define F3cce@predicate (list 'condition-predicate (list 'record-type-descriptor F3ccb@name))) (map (lambda (F3ce0@accessor F3ce1@aux) (list 'define F3ce0@accessor (list 'condition-accessor (list 'record-type-descriptor F3ccb@name) F3ce1@aux))) F3cd0@accessor* F3cd8@aux-accessor*))))))) F3cba@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3cb8@t)))))))) (set! F4bc4@F30e9@define-condition-type-macro F30e9@define-condition-type-macro) (set! F30eb@incorrect-usage-macro (lambda (F3ce8@e) (F31d3@syntax-violation '#f '"incorrect usage of auxiliary keyword" F3ce8@e))) (set! F4bc5@F30eb@incorrect-usage-macro F30eb@incorrect-usage-macro) (set! F30ed@parameterize-macro (lambda (F3cea@e) (let ((F3cec@t F3cea@e)) (let ((F3cee@ls/false (F30f3@syntax-dispatch F3cec@t '(_ () any . each-any)))) (if F3cee@ls/false (apply (lambda (F3cf0@b F3cf1@b*) (F30a9@bless (cons 'let (cons '() (cons F3cf0@b F3cf1@b*))))) F3cee@ls/false) (let ((F3cf4@t F3cec@t)) (let ((F3cf6@ls/false (F30f3@syntax-dispatch F3cf4@t '(_ #(each (any any)) any . each-any)))) (if F3cf6@ls/false (apply (lambda (F3cf8@olhs* F3cf9@orhs* F3cfa@b F3cfb@b*) (let ((F3d00@lhs* (F31c1@generate-temporaries F3cf8@olhs*)) (F3d01@rhs* (F31c1@generate-temporaries F3cf9@orhs*))) (F30a9@bless (cons (list 'lambda (append F3d00@lhs* F3d01@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (F3d04@lhs F3d05@rhs) (list 'let (list (list 't (list F3d04@lhs))) (list F3d04@lhs F3d05@rhs) (cons 'set! (cons F3d05@rhs '(t))))) F3d00@lhs* F3d01@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons F3cfa@b F3cfb@b*))) '(swap)))))) (append F3cf8@olhs* F3cf9@orhs*))))) F3cf6@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3cf4@t))))))))) (set! F4bc6@F30ed@parameterize-macro F30ed@parameterize-macro) (set! F30ef@foreign-call-transformer (lambda (F3d08@e F3d09@r F3d0a@mr) (let ((F3d0e@t F3d08@e)) (let ((F3d10@ls/false (F30f3@syntax-dispatch F3d0e@t '(_ any . each-any)))) (if F3d10@ls/false (apply (lambda (F3d12@name F3d13@arg*) (cons 'foreign-call (cons (F3115@chi-expr F3d12@name F3d09@r F3d0a@mr) (F3111@chi-expr* F3d13@arg* F3d09@r F3d0a@mr)))) F3d10@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3d0e@t)))))) (set! F4bc7@F30ef@foreign-call-transformer F30ef@foreign-call-transformer) (set! F30f1@convert-pattern (lambda (F3d16@pattern F3d17@keys) (let ((F3d1b@cvt* '#f) (F3d1d@cvt '#f)) (begin (set! F3d1b@cvt* (lambda (F3dba@p* F3dbb@n F3dbc@ids) (if (null? F3dba@p*) (values '() F3dbc@ids) (call-with-values (lambda () (F3d1b@cvt* (cdr F3dba@p*) F3dbb@n F3dbc@ids)) (lambda (F3dc4@F3dc1 F3dc5@F3dc3) (let ((F3dc8@ids F3dc5@F3dc3) (F3dc9@y F3dc4@F3dc1)) (call-with-values (lambda () (F3d1d@cvt (car F3dba@p*) F3dbb@n F3dc8@ids)) (lambda (F3dd0@F3dcd F3dd1@F3dcf) (let ((F3dd4@ids F3dd1@F3dcf) (F3dd5@x F3dd0@F3dcd)) (values (cons F3dd5@x F3dc9@y) F3dd4@ids)))))))))) (set! F3d1d@cvt (lambda (F3d1e@p F3d1f@n F3d20@ids) (let ((F3d24@t F3d1e@p)) (let ((F3d26@ls/false (F30f3@syntax-dispatch F3d24@t 'any))) (if (and F3d26@ls/false (apply (lambda (F3d28@id) (F2eec@id? F3d28@id)) F3d26@ls/false)) (apply (lambda (F3d2a@id) (if (F2ef8@bound-id-member? F3d1e@p F3d17@keys) (values (vector 'free-id F3d1e@p) F3d20@ids) (if (F2ef2@free-id=? F3d1e@p (F307b@scheme-stx '_)) (values '_ F3d20@ids) (values 'any (cons (cons F3d1e@p F3d1f@n) F3d20@ids))))) F3d26@ls/false) (let ((F3d2c@t F3d24@t)) (let ((F3d2e@ls/false (F30f3@syntax-dispatch F3d2c@t '(any any)))) (if (and F3d2e@ls/false (apply (lambda (F3d30@p F3d31@dots) (F30f5@ellipsis? F3d31@dots)) F3d2e@ls/false)) (apply (lambda (F3d34@p F3d35@dots) (call-with-values (lambda () (F3d1d@cvt F3d34@p (+ F3d1f@n '1) F3d20@ids)) (lambda (F3d3c@F3d39 F3d3d@F3d3b) (let ((F3d40@ids F3d3d@F3d3b) (F3d41@p F3d3c@F3d39)) (values (if (eq? F3d41@p 'any) 'each-any (vector 'each F3d41@p)) F3d40@ids))))) F3d2e@ls/false) (let ((F3d44@t F3d2c@t)) (let ((F3d46@ls/false (F30f3@syntax-dispatch F3d44@t '(any any . #(each+ any () any))))) (if (and F3d46@ls/false (apply (lambda (F3d48@x F3d49@dots F3d4a@ys F3d4b@z) (F30f5@ellipsis? F3d49@dots)) F3d46@ls/false)) (apply (lambda (F3d50@x F3d51@dots F3d52@ys F3d53@z) (call-with-values (lambda () (F3d1d@cvt F3d53@z F3d1f@n F3d20@ids)) (lambda (F3d5c@F3d59 F3d5d@F3d5b) (let ((F3d60@ids F3d5d@F3d5b) (F3d61@z F3d5c@F3d59)) (call-with-values (lambda () (F3d1b@cvt* F3d52@ys F3d1f@n F3d60@ids)) (lambda (F3d68@F3d65 F3d69@F3d67) (let ((F3d6c@ids F3d69@F3d67) (F3d6d@ys F3d68@F3d65)) (call-with-values (lambda () (F3d1d@cvt F3d50@x (+ F3d1f@n '1) F3d6c@ids)) (lambda (F3d74@F3d71 F3d75@F3d73) (let ((F3d78@ids F3d75@F3d73) (F3d79@x F3d74@F3d71)) (values (vector 'each+ F3d79@x (reverse F3d6d@ys) F3d61@z) F3d78@ids))))))))))) F3d46@ls/false) (let ((F3d7c@t F3d44@t)) (let ((F3d7e@ls/false (F30f3@syntax-dispatch F3d7c@t '(any . any)))) (if F3d7e@ls/false (apply (lambda (F3d80@x F3d81@y) (call-with-values (lambda () (F3d1d@cvt F3d81@y F3d1f@n F3d20@ids)) (lambda (F3d88@F3d85 F3d89@F3d87) (let ((F3d8c@ids F3d89@F3d87) (F3d8d@y F3d88@F3d85)) (call-with-values (lambda () (F3d1d@cvt F3d80@x F3d1f@n F3d8c@ids)) (lambda (F3d94@F3d91 F3d95@F3d93) (let ((F3d98@ids F3d95@F3d93) (F3d99@x F3d94@F3d91)) (values (cons F3d99@x F3d8d@y) F3d98@ids)))))))) F3d7e@ls/false) (let ((F3d9c@t F3d7c@t)) (let ((F3d9e@ls/false (F30f3@syntax-dispatch F3d9c@t '()))) (if F3d9e@ls/false (apply (lambda () (values '() F3d20@ids)) F3d9e@ls/false) (let ((F3da0@t F3d9c@t)) (let ((F3da2@ls/false (F30f3@syntax-dispatch F3da0@t '#(vector each-any)))) (if (and F3da2@ls/false (apply (lambda (F3da4@p) (not (F2eb8@stx? F3da4@p))) F3da2@ls/false)) (apply (lambda (F3da6@p) (call-with-values (lambda () (F3d1d@cvt F3da6@p F3d1f@n F3d20@ids)) (lambda (F3dac@F3da9 F3dad@F3dab) (let ((F3db0@ids F3dad@F3dab) (F3db1@p F3dac@F3da9)) (values (vector 'vector F3db1@p) F3db0@ids))))) F3da2@ls/false) (let ((F3db4@t F3da0@t)) (let ((F3db6@ls/false (F30f3@syntax-dispatch F3db4@t 'any))) (if F3db6@ls/false (apply (lambda (F3db8@datum) (values (vector 'atom (F2f00@stx->datum F3db8@datum)) F3d20@ids)) F3db6@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3db4@t)))))))))))))))))))))))) (F3d1d@cvt F3d16@pattern '0 '()))))) (set! F4bc8@F30f1@convert-pattern F30f1@convert-pattern) (set! F30f3@syntax-dispatch (let ((F3dd9@stx^ '#f) (F3ddb@match-each '#f) (F3ddd@match-each+ '#f) (F3ddf@match-each-any '#f) (F3de1@match-empty '#f) (F3de3@combine '#f) (F3de5@match* '#f) (F3de7@match '#f)) (begin (set! F3dd9@stx^ (lambda (F3eb4@e F3eb5@m* F3eb6@s* F3eb7@ae*) (if (and (null? F3eb5@m*) (null? F3eb6@s*) (null? F3eb7@ae*)) F3eb4@e (F2ed4@mkstx F3eb4@e F3eb5@m* F3eb6@s* F3eb7@ae*)))) (set! F3ddb@match-each (lambda (F3e94@e F3e95@p F3e96@m* F3e97@s* F3e98@ae*) (if (pair? F3e94@e) (let ((F3e9e@first (F3de7@match (car F3e94@e) F3e95@p F3e96@m* F3e97@s* F3e98@ae* '()))) (and F3e9e@first (let ((F3ea0@rest (F3ddb@match-each (cdr F3e94@e) F3e95@p F3e96@m* F3e97@s* F3e98@ae*))) (and F3ea0@rest (cons F3e9e@first F3ea0@rest))))) (if (null? F3e94@e) '() (if (F2eb8@stx? F3e94@e) (and (not (F2e72@top-marked? F3e96@m*)) (call-with-values (lambda () (join-wraps F3e96@m* F3e97@s* F3e98@ae* F3e94@e)) (lambda (F3ea8@F3ea3 F3ea9@F3ea5 F3eaa@F3ea7) (let ((F3eae@ae* F3eaa@F3ea7) (F3eaf@s* F3ea9@F3ea5) (F3eb0@m* F3ea8@F3ea3)) (F3ddb@match-each (F2eba@stx-expr F3e94@e) F3e95@p F3eb0@m* F3eaf@s* F3eae@ae*))))) (if (F2a19@F28eb@annotation? F3e94@e) (F3ddb@match-each (F2a1b@F28ef@annotation-expression F3e94@e) F3e95@p F3e96@m* F3e97@s* F3e98@ae*) '#f)))))) (set! F3ddd@match-each+ (lambda (F3e54@e F3e55@x-pat F3e56@y-pat F3e57@z-pat F3e58@m* F3e59@s* F3e5a@ae* F3e5b@r) (let F3e6c@f ((F3e64@e F3e54@e) (F3e65@m* F3e58@m*) (F3e66@s* F3e59@s*) (F3e67@ae* F3e5a@ae*)) (if (pair? F3e64@e) (call-with-values (lambda () (F3e6c@f (cdr F3e64@e) F3e65@m* F3e66@s* F3e67@ae*)) (lambda (F3e74@F3e6f F3e75@F3e71 F3e76@F3e73) (let ((F3e7a@r F3e76@F3e73) (F3e7b@y-pat F3e75@F3e71) (F3e7c@xr* F3e74@F3e6f)) (if F3e7a@r (if (null? F3e7b@y-pat) (let ((F3e80@xr (F3de7@match (car F3e64@e) F3e55@x-pat F3e65@m* F3e66@s* F3e67@ae* '()))) (if F3e80@xr (values (cons F3e80@xr F3e7c@xr*) F3e7b@y-pat F3e7a@r) (values '#f '#f '#f))) (values '() (cdr F3e7b@y-pat) (F3de7@match (car F3e64@e) (car F3e7b@y-pat) F3e65@m* F3e66@s* F3e67@ae* F3e7a@r))) (values '#f '#f '#f))))) (if (F2eb8@stx? F3e64@e) (if (F2e72@top-marked? F3e65@m*) (values '() F3e56@y-pat (F3de7@match F3e64@e F3e57@z-pat F3e65@m* F3e66@s* F3e67@ae* F3e5b@r)) (call-with-values (lambda () (join-wraps F3e65@m* F3e66@s* F3e67@ae* F3e64@e)) (lambda (F3e88@F3e83 F3e89@F3e85 F3e8a@F3e87) (let ((F3e8e@ae* F3e8a@F3e87) (F3e8f@s* F3e89@F3e85) (F3e90@m* F3e88@F3e83)) (F3e6c@f (F2eba@stx-expr F3e64@e) F3e90@m* F3e8f@s* F3e8e@ae*))))) (if (F2a19@F28eb@annotation? F3e64@e) (F3e6c@f (F2a1b@F28ef@annotation-expression F3e64@e) F3e65@m* F3e66@s* F3e67@ae*) (values '() F3e56@y-pat (F3de7@match F3e64@e F3e57@z-pat F3e65@m* F3e66@s* F3e67@ae* F3e5b@r)))))))) (set! F3ddf@match-each-any (lambda (F3e38@e F3e39@m* F3e3a@s* F3e3b@ae*) (if (pair? F3e38@e) (let ((F3e40@l (F3ddf@match-each-any (cdr F3e38@e) F3e39@m* F3e3a@s* F3e3b@ae*))) (and F3e40@l (cons (F3dd9@stx^ (car F3e38@e) F3e39@m* F3e3a@s* F3e3b@ae*) F3e40@l))) (if (null? F3e38@e) '() (if (F2eb8@stx? F3e38@e) (and (not (F2e72@top-marked? F3e39@m*)) (call-with-values (lambda () (join-wraps F3e39@m* F3e3a@s* F3e3b@ae* F3e38@e)) (lambda (F3e48@F3e43 F3e49@F3e45 F3e4a@F3e47) (let ((F3e4e@ae* F3e4a@F3e47) (F3e4f@s* F3e49@F3e45) (F3e50@m* F3e48@F3e43)) (F3ddf@match-each-any (F2eba@stx-expr F3e38@e) F3e50@m* F3e4f@s* F3e4e@ae*))))) (if (F2a19@F28eb@annotation? F3e38@e) (F3ddf@match-each-any (F2a1b@F28ef@annotation-expression F3e38@e) F3e39@m* F3e3a@s* F3e3b@ae*) '#f)))))) (set! F3de1@match-empty (lambda (F3e32@p F3e33@r) (if (null? F3e32@p) F3e33@r (if (eq? F3e32@p '_) F3e33@r (if (eq? F3e32@p 'any) (cons '() F3e33@r) (if (pair? F3e32@p) (F3de1@match-empty (car F3e32@p) (F3de1@match-empty (cdr F3e32@p) F3e33@r)) (if (eq? F3e32@p 'each-any) (cons '() F3e33@r) (let ((F3e36@t (vector-ref F3e32@p '0))) (if (memv F3e36@t '(each)) (F3de1@match-empty (vector-ref F3e32@p '1) F3e33@r) (if (memv F3e36@t '(each+)) (F3de1@match-empty (vector-ref F3e32@p '1) (F3de1@match-empty (reverse (vector-ref F3e32@p '2)) (F3de1@match-empty (vector-ref F3e32@p '3) F3e33@r))) (if (memv F3e36@t '(free-id atom)) F3e33@r (if (memv F3e36@t '(scheme-id atom)) F3e33@r (if (memv F3e36@t '(vector)) (F3de1@match-empty (vector-ref F3e32@p '1) F3e33@r) (assertion-violation 'syntax-dispatch '"invalid pattern" F3e32@p)))))))))))))) (set! F3de3@combine (lambda (F3e2e@r* F3e2f@r) (if (null? (car F3e2e@r*)) F3e2f@r (cons (map car F3e2e@r*) (F3de3@combine (map cdr F3e2e@r*) F3e2f@r))))) (set! F3de5@match* (lambda (F3e0a@e F3e0b@p F3e0c@m* F3e0d@s* F3e0e@ae* F3e0f@r) (if (null? F3e0b@p) (and (null? F3e0a@e) F3e0f@r) (if (pair? F3e0b@p) (and (pair? F3e0a@e) (F3de7@match (car F3e0a@e) (car F3e0b@p) F3e0c@m* F3e0d@s* F3e0e@ae* (F3de7@match (cdr F3e0a@e) (cdr F3e0b@p) F3e0c@m* F3e0d@s* F3e0e@ae* F3e0f@r))) (if (eq? F3e0b@p 'each-any) (let ((F3e16@l (F3ddf@match-each-any F3e0a@e F3e0c@m* F3e0d@s* F3e0e@ae*))) (and F3e16@l (cons F3e16@l F3e0f@r))) (let ((F3e18@t (vector-ref F3e0b@p '0))) (if (memv F3e18@t '(each)) (if (null? F3e0a@e) (F3de1@match-empty (vector-ref F3e0b@p '1) F3e0f@r) (let ((F3e1a@r* (F3ddb@match-each F3e0a@e (vector-ref F3e0b@p '1) F3e0c@m* F3e0d@s* F3e0e@ae*))) (and F3e1a@r* (F3de3@combine F3e1a@r* F3e0f@r)))) (if (memv F3e18@t '(free-id)) (and (symbol? F3e0a@e) (F2e72@top-marked? F3e0c@m*) (F2ef2@free-id=? (F3dd9@stx^ F3e0a@e F3e0c@m* F3e0d@s* F3e0e@ae*) (vector-ref F3e0b@p '1)) F3e0f@r) (if (memv F3e18@t '(scheme-id)) (and (symbol? F3e0a@e) (F2e72@top-marked? F3e0c@m*) (F2ef2@free-id=? (F3dd9@stx^ F3e0a@e F3e0c@m* F3e0d@s* F3e0e@ae*) (F307b@scheme-stx (vector-ref F3e0b@p '1))) F3e0f@r) (if (memv F3e18@t '(each+)) (call-with-values (lambda () (F3ddd@match-each+ F3e0a@e (vector-ref F3e0b@p '1) (vector-ref F3e0b@p '2) (vector-ref F3e0b@p '3) F3e0c@m* F3e0d@s* F3e0e@ae* F3e0f@r)) (lambda (F3e22@F3e1d F3e23@F3e1f F3e24@F3e21) (let ((F3e28@r F3e24@F3e21) (F3e29@y-pat F3e23@F3e1f) (F3e2a@xr* F3e22@F3e1d)) (and F3e28@r (null? F3e29@y-pat) (if (null? F3e2a@xr*) (F3de1@match-empty (vector-ref F3e0b@p '1) F3e28@r) (F3de3@combine F3e2a@xr* F3e28@r)))))) (if (memv F3e18@t '(atom)) (and (fast-equal? (vector-ref F3e0b@p '1) (F2efe@strip F3e0a@e F3e0c@m*)) F3e0f@r) (if (memv F3e18@t '(vector)) (and (vector? F3e0a@e) (F3de7@match (vector->list F3e0a@e) (vector-ref F3e0b@p '1) F3e0c@m* F3e0d@s* F3e0e@ae* F3e0f@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" F3e0b@p))))))))))))) (set! F3de7@match (lambda (F3dec@e F3ded@p F3dee@m* F3def@s* F3df0@ae* F3df1@r) (if (not F3df1@r) '#f (if (eq? F3ded@p '_) F3df1@r (if (eq? F3ded@p 'any) (cons (F3dd9@stx^ F3dec@e F3dee@m* F3def@s* F3df0@ae*) F3df1@r) (if (F2eb8@stx? F3dec@e) (and (not (F2e72@top-marked? F3dee@m*)) (call-with-values (lambda () (join-wraps F3dee@m* F3def@s* F3df0@ae* F3dec@e)) (lambda (F3dfe@F3df9 F3dff@F3dfb F3e00@F3dfd) (let ((F3e04@ae* F3e00@F3dfd) (F3e05@s* F3dff@F3dfb) (F3e06@m* F3dfe@F3df9)) (F3de7@match (F2eba@stx-expr F3dec@e) F3ded@p F3e06@m* F3e05@s* F3e04@ae* F3df1@r))))) (if (F2a19@F28eb@annotation? F3dec@e) (F3de7@match (F2a1b@F28ef@annotation-expression F3dec@e) F3ded@p F3dee@m* F3def@s* F3df0@ae* F3df1@r) (F3de5@match* F3dec@e F3ded@p F3dee@m* F3def@s* F3df0@ae* F3df1@r)))))))) (lambda (F3de8@e F3de9@p) (F3de7@match F3de8@e F3de9@p '() '() '() '()))))) (set! F4bc9@F30f3@syntax-dispatch F30f3@syntax-dispatch) (set! F30f5@ellipsis? (lambda (F3ebc@x) (and (F2eec@id? F3ebc@x) (F2ef2@free-id=? F3ebc@x (F307b@scheme-stx '...))))) (set! F4bca@F30f5@ellipsis? F30f5@ellipsis?) (set! F30f7@underscore? (lambda (F3ebe@x) (and (F2eec@id? F3ebe@x) (F2ef2@free-id=? F3ebe@x (F307b@scheme-stx '_))))) (set! F4bcb@F30f7@underscore? F30f7@underscore?) (set! F30f9@verify-literals (lambda (F3ec0@lits F3ec1@expr) (for-each (lambda (F3ec4@x) (if (or (not (F2eec@id? F3ec4@x)) (F30f5@ellipsis? F3ec4@x) (F30f7@underscore? F3ec4@x)) (F31d3@syntax-violation '#f '"invalid literal" F3ec1@expr F3ec4@x) (void))) F3ec0@lits))) (set! F4bcc@F30f9@verify-literals F30f9@verify-literals) (set! F30fb@syntax-case-transformer (let ((F3ec7@build-dispatch-call '#f) (F3ec9@invalid-ids-error '#f) (F3ecb@gen-clause '#f) (F3ecd@gen-syntax-case '#f)) (begin (set! F3ec7@build-dispatch-call (lambda (F3f38@pvars F3f39@expr F3f3a@y F3f3b@r F3f3c@mr) (let ((F3f42@ids (map car F3f38@pvars)) (F3f43@levels (map cdr F3f38@pvars))) (let ((F3f46@labels (map F2e78@gen-label F3f42@ids)) (F3f47@new-vars (map F2e74@gen-lexical F3f42@ids))) (let ((F3f4a@body (F3115@chi-expr (F2ed8@add-subst (F2eac@make-full-rib F3f42@ids F3f46@labels) F3f39@expr) (append (map (lambda (F3f4c@label F3f4d@var F3f4e@level) (cons F3f4c@label (F2f06@make-binding 'syntax (cons F3f4d@var F3f4e@level)))) F3f46@labels F3f47@new-vars (map cdr F3f38@pvars)) F3f3b@r) F3f3c@mr))) (list '(primitive apply) (F2e4f@F2d7b@build-lambda '#f F3f47@new-vars F3f4a@body) F3f3a@y)))))) (set! F3ec9@invalid-ids-error (lambda (F3f2c@id* F3f2d@e F3f2e@class) (let F3f36@find ((F3f32@id* F3f2c@id*) (F3f33@ok* '())) (if (null? F3f32@id*) (F31d3@syntax-violation '#f '"invalid syntax" F3f2d@e) (if (F2eec@id? (car F3f32@id*)) (if (F2ef8@bound-id-member? (car F3f32@id*) F3f33@ok*) (F31cf@syntax-error (car F3f32@id*) '"duplicate " F3f2e@class) (F3f36@find (cdr F3f32@id*) (cons (car F3f32@id*) F3f33@ok*))) (F31cf@syntax-error (car F3f32@id*) '"invalid " F3f2e@class)))))) (set! F3ecb@gen-clause (lambda (F3f04@x F3f05@keys F3f06@clauses F3f07@r F3f08@mr F3f09@pat F3f0a@fender F3f0b@expr) (call-with-values (lambda () (F30f1@convert-pattern F3f09@pat F3f05@keys)) (lambda (F3f18@F3f15 F3f19@F3f17) (let ((F3f1c@pvars F3f19@F3f17) (F3f1d@p F3f18@F3f15)) (if (not (F2ef6@distinct-bound-ids? (map car F3f1c@pvars))) (F3ec9@invalid-ids-error (map car F3f1c@pvars) F3f09@pat '"pattern variable") (if (not (for-all (lambda (F3f20@x) (not (F30f5@ellipsis? (car F3f20@x)))) F3f1c@pvars)) (F31d3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" F3f09@pat) (let ((F3f22@y (F2e74@gen-lexical 'tmp))) (let ((F3f24@test (if (eq? F3f0a@fender '#t) F3f22@y (let ((F3f26@call (F3ec7@build-dispatch-call F3f1c@pvars F3f0a@fender F3f22@y F3f07@r F3f08@mr))) (list 'if F3f22@y F3f26@call (list 'quote '#f)))))) (let ((F3f28@conseq (F3ec7@build-dispatch-call F3f1c@pvars F3f0b@expr F3f22@y F3f07@r F3f08@mr))) (let ((F3f2a@altern (F3ecd@gen-syntax-case F3f04@x F3f05@keys F3f06@clauses F3f07@r F3f08@mr))) (list (F2e4f@F2d7b@build-lambda '#f (list F3f22@y) (list 'if F3f24@test F3f28@conseq F3f2a@altern)) (list '(primitive syntax-dispatch) F3f04@x (list 'quote F3f1d@p)))))))))))))) (set! F3ecd@gen-syntax-case (lambda (F3ee2@x F3ee3@keys F3ee4@clauses F3ee5@r F3ee6@mr) (if (null? F3ee4@clauses) (list '(primitive syntax-error) F3ee2@x) (let ((F3eec@t (car F3ee4@clauses))) (let ((F3eee@ls/false (F30f3@syntax-dispatch F3eec@t '(any any)))) (if F3eee@ls/false (apply (lambda (F3ef0@pat F3ef1@expr) (if (and (F2eec@id? F3ef0@pat) (not (F2ef8@bound-id-member? F3ef0@pat F3ee3@keys)) (not (F30f5@ellipsis? F3ef0@pat))) (if (F2ef2@free-id=? F3ef0@pat (F307b@scheme-stx '_)) (F3115@chi-expr F3ef1@expr F3ee5@r F3ee6@mr) (let ((F3ef4@lab (F2e78@gen-label F3ef0@pat)) (F3ef5@lex (F2e74@gen-lexical F3ef0@pat))) (let ((F3ef8@body (F3115@chi-expr (F2ed8@add-subst (F2eac@make-full-rib (list F3ef0@pat) (list F3ef4@lab)) F3ef1@expr) (cons (cons F3ef4@lab (F2f06@make-binding 'syntax (cons F3ef5@lex '0))) F3ee5@r) F3ee6@mr))) (list (F2e4f@F2d7b@build-lambda '#f (list F3ef5@lex) F3ef8@body) F3ee2@x)))) (F3ecb@gen-clause F3ee2@x F3ee3@keys (cdr F3ee4@clauses) F3ee5@r F3ee6@mr F3ef0@pat '#t F3ef1@expr))) F3eee@ls/false) (let ((F3efa@t F3eec@t)) (let ((F3efc@ls/false (F30f3@syntax-dispatch F3efa@t '(any any any)))) (if F3efc@ls/false (apply (lambda (F3efe@pat F3eff@fender F3f00@expr) (F3ecb@gen-clause F3ee2@x F3ee3@keys (cdr F3ee4@clauses) F3ee5@r F3ee6@mr F3efe@pat F3eff@fender F3f00@expr)) F3efc@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3efa@t)))))))))) (lambda (F3ece@e F3ecf@r F3ed0@mr) (let ((F3ed4@t F3ece@e)) (let ((F3ed6@ls/false (F30f3@syntax-dispatch F3ed4@t '(_ any each-any . each-any)))) (if F3ed6@ls/false (apply (lambda (F3ed8@expr F3ed9@keys F3eda@clauses) (begin (F30f9@verify-literals F3ed9@keys F3ece@e) (let ((F3ede@x (F2e74@gen-lexical 'tmp))) (let ((F3ee0@body (F3ecd@gen-syntax-case F3ede@x F3ed9@keys F3eda@clauses F3ecf@r F3ed0@mr))) (list (F2e4f@F2d7b@build-lambda '#f (list F3ede@x) F3ee0@body) (F3115@chi-expr F3ed8@expr F3ecf@r F3ed0@mr)))))) F3ed6@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3ed4@t)))))))) (set! F4bcd@F30fb@syntax-case-transformer F30fb@syntax-case-transformer) (set! F30fd@ellipsis-map (lambda (F3f52@proc F3f53@ls . F3f56@ls*) (let ((F3f59@who '#f)) (begin (set! F3f59@who '...) (begin (if (not (list? F3f53@ls)) (assertion-violation F3f59@who '"not a list" F3f53@ls) (void)) (if (not (null? F3f56@ls*)) (let ((F3f5a@n (length F3f53@ls))) (for-each (lambda (F3f5c@x) (begin (if (not (list? F3f5c@x)) (assertion-violation F3f59@who '"not a list" F3f5c@x) (void)) (if (not (= (length F3f5c@x) F3f5a@n)) (assertion-violation F3f59@who '"length mismatch" F3f53@ls F3f5c@x) (void)))) F3f56@ls*)) (void)) (apply map F3f52@proc F3f53@ls F3f56@ls*)))))) (set! F4bce@F30fd@ellipsis-map F30fd@ellipsis-map) (set! F30ff@syntax-transformer (let ((F3f5f@gen-syntax '#f) (F3f61@gen-ref '#f) (F3f63@gen-append '#f) (F3f65@gen-mappend '#f) (F3f67@gen-map '#f) (F3f69@gen-cons '#f) (F3f6b@gen-vector '#f) (F3f6d@regen '#f)) (begin (set! F3f5f@gen-syntax (lambda (F3fd6@src F3fd7@e F3fd8@r F3fd9@maps F3fda@ellipsis? F3fdb@vec?) (let ((F3fe2@t F3fd7@e)) (let ((F3fe4@ls/false (F30f3@syntax-dispatch F3fe2@t 'any))) (if (and F3fe4@ls/false (apply (lambda (F3fe6@dots) (F3fda@ellipsis? F3fe6@dots)) F3fe4@ls/false)) (apply (lambda (F3fe8@dots) (F31d3@syntax-violation '#f '"misplaced ellipsis in syntax form" F3fd6@src)) F3fe4@ls/false) (let ((F3fea@t F3fe2@t)) (let ((F3fec@ls/false (F30f3@syntax-dispatch F3fea@t 'any))) (if (and F3fec@ls/false (apply (lambda (F3fee@id) (F2eec@id? F3fee@id)) F3fec@ls/false)) (apply (lambda (F3ff0@id) (let ((F3ff2@label (F2f02@id->label F3fd7@e))) (let ((F3ff4@b (F2f04@label->binding F3ff2@label F3fd8@r))) (if (eq? (F2f08@binding-type F3ff4@b) 'syntax) (call-with-values (lambda () (let ((F3ffa@var.lev (F2f0a@binding-value F3ff4@b))) (F3f61@gen-ref F3fd6@src (car F3ffa@var.lev) (cdr F3ffa@var.lev) F3fd9@maps))) (lambda (F3ffc@F3ff7 F3ffd@F3ff9) (let ((F4000@maps F3ffd@F3ff9) (F4001@var F3ffc@F3ff7)) (values (list 'ref F4001@var) F4000@maps)))) (values (list 'quote F3fd7@e) F3fd9@maps))))) F3fec@ls/false) (let ((F4004@t F3fea@t)) (let ((F4006@ls/false (F30f3@syntax-dispatch F4004@t '(any any)))) (if (and F4006@ls/false (apply (lambda (F4008@dots F4009@e) (F3fda@ellipsis? F4008@dots)) F4006@ls/false)) (apply (lambda (F400c@dots F400d@e) (if F3fdb@vec? (F31d3@syntax-violation '#f '"misplaced ellipsis in syntax form" F3fd6@src) (F3f5f@gen-syntax F3fd6@src F400d@e F3fd8@r F3fd9@maps (lambda (F4010@x) '#f) '#f))) F4006@ls/false) (let ((F4012@t F4004@t)) (let ((F4014@ls/false (F30f3@syntax-dispatch F4012@t '(any any . any)))) (if (and F4014@ls/false (apply (lambda (F4016@x F4017@dots F4018@y) (F3fda@ellipsis? F4017@dots)) F4014@ls/false)) (apply (lambda (F401c@x F401d@dots F401e@y) (let F4034@f ((F4022@y F401e@y) (F4023@k (lambda (F4026@maps) (call-with-values (lambda () (F3f5f@gen-syntax F3fd6@src F401c@x F3fd8@r (cons '() F4026@maps) F3fda@ellipsis? '#f)) (lambda (F402c@F4029 F402d@F402b) (let ((F4030@maps F402d@F402b) (F4031@x F402c@F4029)) (if (null? (car F4030@maps)) (F31d3@syntax-violation '#f '"extra ellipsis in syntax form" F3fd6@src) (values (F3f67@gen-map F4031@x (car F4030@maps)) (cdr F4030@maps))))))))) (let ((F4036@t F4022@y)) (let ((F4038@ls/false (F30f3@syntax-dispatch F4036@t '()))) (if F4038@ls/false (apply (lambda () (F4023@k F3fd9@maps)) F4038@ls/false) (let ((F403a@t F4036@t)) (let ((F403c@ls/false (F30f3@syntax-dispatch F403a@t '(any . any)))) (if (and F403c@ls/false (apply (lambda (F403e@dots F403f@y) (F3fda@ellipsis? F403e@dots)) F403c@ls/false)) (apply (lambda (F4042@dots F4043@y) (F4034@f F4043@y (lambda (F4046@maps) (call-with-values (lambda () (F4023@k (cons '() F4046@maps))) (lambda (F404c@F4049 F404d@F404b) (let ((F4050@maps F404d@F404b) (F4051@x F404c@F4049)) (if (null? (car F4050@maps)) (F31d3@syntax-violation '#f '"extra ellipsis in syntax form" F3fd6@src) (values (F3f65@gen-mappend F4051@x (car F4050@maps)) (cdr F4050@maps))))))))) F403c@ls/false) (let ((F4054@t F403a@t)) (let ((F4056@ls/false (F30f3@syntax-dispatch F4054@t '_))) (if F4056@ls/false (apply (lambda () (call-with-values (lambda () (F3f5f@gen-syntax F3fd6@src F4022@y F3fd8@r F3fd9@maps F3fda@ellipsis? F3fdb@vec?)) (lambda (F405c@F4059 F405d@F405b) (let ((F4060@maps F405d@F405b) (F4061@y F405c@F4059)) (call-with-values (lambda () (F4023@k F4060@maps)) (lambda (F4068@F4065 F4069@F4067) (let ((F406c@maps F4069@F4067) (F406d@x F4068@F4065)) (values (F3f63@gen-append F406d@x F4061@y) F406c@maps)))))))) F4056@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4054@t)))))))))))) F4014@ls/false) (let ((F4070@t F4012@t)) (let ((F4072@ls/false (F30f3@syntax-dispatch F4070@t '(any . any)))) (if F4072@ls/false (apply (lambda (F4074@x F4075@y) (call-with-values (lambda () (F3f5f@gen-syntax F3fd6@src F4074@x F3fd8@r F3fd9@maps F3fda@ellipsis? '#f)) (lambda (F407c@F4079 F407d@F407b) (let ((F4080@maps F407d@F407b) (F4081@xnew F407c@F4079)) (call-with-values (lambda () (F3f5f@gen-syntax F3fd6@src F4075@y F3fd8@r F4080@maps F3fda@ellipsis? F3fdb@vec?)) (lambda (F4088@F4085 F4089@F4087) (let ((F408c@maps F4089@F4087) (F408d@ynew F4088@F4085)) (values (F3f69@gen-cons F3fd7@e F4074@x F4075@y F4081@xnew F408d@ynew) F408c@maps)))))))) F4072@ls/false) (let ((F4090@t F4070@t)) (let ((F4092@ls/false (F30f3@syntax-dispatch F4090@t '#(vector each-any)))) (if F4092@ls/false (apply (lambda (F4094@ls) (call-with-values (lambda () (F3f5f@gen-syntax F3fd6@src F4094@ls F3fd8@r F3fd9@maps F3fda@ellipsis? '#t)) (lambda (F409a@F4097 F409b@F4099) (let ((F409e@maps F409b@F4099) (F409f@lsnew F409a@F4097)) (values (F3f6b@gen-vector F3fd7@e F4094@ls F409f@lsnew) F409e@maps))))) F4092@ls/false) (let ((F40a2@t F4090@t)) (let ((F40a4@ls/false (F30f3@syntax-dispatch F40a2@t '_))) (if F40a4@ls/false (apply (lambda () (values (list 'quote F3fd7@e) F3fd9@maps)) F40a4@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F40a2@t)))))))))))))))))))))))) (set! F3f61@gen-ref (lambda (F3fbc@src F3fbd@var F3fbe@level F3fbf@maps) (if (= F3fbe@level '0) (values F3fbd@var F3fbf@maps) (if (null? F3fbf@maps) (F31d3@syntax-violation '#f '"missing ellipsis in syntax form" F3fbc@src) (call-with-values (lambda () (F3f61@gen-ref F3fbc@src F3fbd@var (- F3fbe@level '1) (cdr F3fbf@maps))) (lambda (F3fc8@F3fc5 F3fc9@F3fc7) (let ((F3fcc@outer-maps F3fc9@F3fc7) (F3fcd@outer-var F3fc8@F3fc5)) (let ((F3fd0@t (assq F3fcd@outer-var (car F3fbf@maps)))) (if F3fd0@t ((lambda (F3fd2@b) (values (cdr F3fd2@b) F3fbf@maps)) F3fd0@t) (let ((F3fd4@inner-var (F2e74@gen-lexical 'tmp))) (values F3fd4@inner-var (cons (cons (cons F3fcd@outer-var F3fd4@inner-var) (car F3fbf@maps)) F3fcc@outer-maps)))))))))))) (set! F3f63@gen-append (lambda (F3fb8@x F3fb9@y) (if (fast-equal? F3fb9@y ''()) F3fb8@x (list 'append F3fb8@x F3fb9@y)))) (set! F3f65@gen-mappend (lambda (F3fb4@e F3fb5@map-env) (list 'apply '(primitive append) (F3f67@gen-map F3fb4@e F3fb5@map-env)))) (set! F3f67@gen-map (lambda (F3fa2@e F3fa3@map-env) (let ((F3fa6@formals (map cdr F3fa3@map-env)) (F3fa7@actuals (map (lambda (F3faa@x) (list 'ref (car F3faa@x))) F3fa3@map-env))) (if (eq? (car F3fa2@e) 'ref) (car F3fa7@actuals) (if (for-all (lambda (F3fac@x) (and (eq? (car F3fac@x) 'ref) (memq (cadr F3fac@x) F3fa6@formals))) (cdr F3fa2@e)) (let ((F3fae@args (map (let ((F3fb0@r (map cons F3fa6@formals F3fa7@actuals))) (lambda (F3fb2@x) (cdr (assq (cadr F3fb2@x) F3fb0@r)))) (cdr F3fa2@e)))) (cons 'map (cons (list 'primitive (car F3fa2@e)) F3fae@args))) (cons* 'map (list 'lambda F3fa6@formals F3fa2@e) F3fa7@actuals)))))) (set! F3f69@gen-cons (lambda (F3f92@e F3f93@x F3f94@y F3f95@xnew F3f96@ynew) (let ((F3f9c@t (car F3f96@ynew))) (if (memv F3f9c@t '(quote)) (if (eq? (car F3f95@xnew) 'quote) (let ((F3f9e@xnew (cadr F3f95@xnew)) (F3f9f@ynew (cadr F3f96@ynew))) (if (and (eq? F3f9e@xnew F3f93@x) (eq? F3f9f@ynew F3f94@y)) (list 'quote F3f92@e) (list 'quote (cons F3f9e@xnew F3f9f@ynew)))) (if (null? (cadr F3f96@ynew)) (list 'list F3f95@xnew) (list 'cons F3f95@xnew F3f96@ynew))) (if (memv F3f9c@t '(list)) (cons 'list (cons F3f95@xnew (cdr F3f96@ynew))) (list 'cons F3f95@xnew F3f96@ynew)))))) (set! F3f6b@gen-vector (lambda (F3f8c@e F3f8d@ls F3f8e@lsnew) (if (eq? (car F3f8e@lsnew) 'quote) (if (eq? (cadr F3f8e@lsnew) F3f8d@ls) (list 'quote F3f8c@e) (list 'quote (list->vector (cadr F3f8e@lsnew)))) (if (eq? (car F3f8e@lsnew) 'list) (cons 'vector (cdr F3f8e@lsnew)) (list 'list->vector F3f8e@lsnew))))) (set! F3f6d@regen (lambda (F3f86@x) (let ((F3f88@t (car F3f86@x))) (if (memv F3f88@t '(ref)) (cadr F3f86@x) (if (memv F3f88@t '(primitive)) (list 'primitive (cadr F3f86@x)) (if (memv F3f88@t '(quote)) (list 'quote (cadr F3f86@x)) (if (memv F3f88@t '(lambda)) (F2e4f@F2d7b@build-lambda '#f (cadr F3f86@x) (F3f6d@regen (caddr F3f86@x))) (if (memv F3f88@t '(map)) (let ((F3f8a@ls (map F3f6d@regen (cdr F3f86@x)))) (cons '(primitive ellipsis-map) F3f8a@ls)) (cons (list 'primitive (car F3f86@x)) (map F3f6d@regen (cdr F3f86@x))))))))))) (lambda (F3f6e@e F3f6f@r F3f70@mr) (let ((F3f74@t F3f6e@e)) (let ((F3f76@ls/false (F30f3@syntax-dispatch F3f74@t '(_ any)))) (if F3f76@ls/false (apply (lambda (F3f78@x) (call-with-values (lambda () (F3f5f@gen-syntax F3f6e@e F3f78@x F3f6f@r '() F30f5@ellipsis? '#f)) (lambda (F3f7e@F3f7b F3f7f@F3f7d) (let ((F3f82@maps F3f7f@F3f7d) (F3f83@e F3f7e@F3f7b)) (F3f6d@regen F3f83@e))))) F3f76@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F3f74@t)))))))) (set! F4bcf@F30ff@syntax-transformer F30ff@syntax-transformer) (set! F3101@core-macro-transformer (lambda (F40a6@name) (let ((F40a8@t F40a6@name)) (if (memv F40a8@t '(quote)) F30a3@quote-transformer (if (memv F40a8@t '(lambda)) F30a7@lambda-transformer (if (memv F40a8@t '(case-lambda)) F30a5@case-lambda-transformer (if (memv F40a8@t '(letrec)) F308b@letrec-transformer (if (memv F40a8@t '(letrec*)) F308d@letrec*-transformer (if (memv F40a8@t '(let)) F3089@let-transformer (if (memv F40a8@t '(if)) F309b@if-transformer (if (memv F40a8@t '(and)) F309d@and-transformer (if (memv F40a8@t '(or)) F309f@or-transformer (if (memv F40a8@t '(foreign-call)) F30ef@foreign-call-transformer (if (memv F40a8@t '(syntax-case)) F30fb@syntax-case-transformer (if (memv F40a8@t '(syntax)) F30ff@syntax-transformer (if (memv F40a8@t '(type-descriptor)) F3091@type-descriptor-transformer (if (memv F40a8@t '(record-type-descriptor)) F3093@record-type-descriptor-transformer (if (memv F40a8@t '(record-constructor-descriptor)) F3095@record-constructor-descriptor-transformer (if (memv F40a8@t '(fluid-let-syntax)) F308f@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" F40a6@name)))))))))))))))))))) (set! F4bd0@F3101@core-macro-transformer F3101@core-macro-transformer) (set! F3103@symbol-macro (lambda (F40aa@x F40ab@set) (let ((F40ae@t F40aa@x)) (let ((F40b0@ls/false (F30f3@syntax-dispatch F40ae@t '(_ any)))) (if (and F40b0@ls/false (apply (lambda (F40b2@name) (and (F2eec@id? F40b2@name) (memq (F2eee@id->sym F40b2@name) F40ab@set))) F40b0@ls/false)) (apply (lambda (F40b4@name) (F30a9@bless (list 'quote F40b4@name))) F40b0@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F40ae@t)))))) (set! F4bd1@F3103@symbol-macro F3103@symbol-macro) (set! F3105@macro-transformer (lambda (F40b6@x) (if (procedure? F40b6@x) F40b6@x (if (symbol? F40b6@x) (let ((F40b8@t F40b6@x)) (if (memv F40b8@t '(define-record-type)) F30e7@define-record-type-macro (if (memv F40b8@t '(define-struct)) F30e5@define-struct-macro (if (memv F40b8@t '(include)) F30db@include-macro (if (memv F40b8@t '(cond)) F30d7@cond-macro (if (memv F40b8@t '(let)) F30af@let-macro (if (memv F40b8@t '(do)) F30cf@do-macro (if (memv F40b8@t '(or)) F30d3@or-macro (if (memv F40b8@t '(and)) F30d5@and-macro (if (memv F40b8@t '(let*)) F30d1@let*-macro (if (memv F40b8@t '(let-values)) F30b1@let-values-macro (if (memv F40b8@t '(let*-values)) F30b3@let*-values-macro (if (memv F40b8@t '(syntax-rules)) F30df@syntax-rules-macro (if (memv F40b8@t '(quasiquote)) F30e1@quasiquote-macro (if (memv F40b8@t '(quasisyntax)) F30e3@quasisyntax-macro (if (memv F40b8@t '(with-syntax)) F30ab@with-syntax-macro (if (memv F40b8@t '(when)) F3097@when-macro (if (memv F40b8@t '(unless)) F3099@unless-macro (if (memv F40b8@t '(case)) F30a1@case-macro (if (memv F40b8@t '(identifier-syntax)) F30cd@identifier-syntax-macro (if (memv F40b8@t '(time)) F30c5@time-macro (if (memv F40b8@t '(delay)) F30c7@delay-macro (if (memv F40b8@t '(assert)) F30c9@assert-macro (if (memv F40b8@t '(endianness)) F30cb@endianness-macro (if (memv F40b8@t '(guard)) F30c1@guard-macro (if (memv F40b8@t '(define-enumeration)) F30c3@define-enumeration-macro (if (memv F40b8@t '(trace-lambda)) F30b5@trace-lambda-macro (if (memv F40b8@t '(trace-define)) F30b7@trace-define-macro (if (memv F40b8@t '(trace-define-syntax)) F30b9@trace-define-syntax-macro (if (memv F40b8@t '(trace-let-syntax)) F30bd@trace-let-syntax-macro (if (memv F40b8@t '(trace-letrec-syntax)) F30bf@trace-letrec-syntax-macro (if (memv F40b8@t '(define-condition-type)) F30e9@define-condition-type-macro (if (memv F40b8@t '(parameterize)) F30ed@parameterize-macro (if (memv F40b8@t '(include-into)) F30dd@include-into-macro (if (memv F40b8@t '(eol-style)) (lambda (F40ba@x) (F3103@symbol-macro F40ba@x '(none lf cr crlf nel crnel ls))) (if (memv F40b8@t '(error-handling-mode)) (lambda (F40bc@x) (F3103@symbol-macro F40bc@x '(ignore raise replace))) (if (memv F40b8@t '(buffer-mode)) (lambda (F40be@x) (F3103@symbol-macro F40be@x '(none line block))) (if (memv F40b8@t '(file-options)) F2e67@file-options-macro (if (memv F40b8@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) F30eb@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" F40b6@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" F40b6@x))))) (set! F4bd2@F3105@macro-transformer F3105@macro-transformer) (set! F3107@local-macro-transformer (lambda (F40c0@x) (car F40c0@x))) (set! F4bd3@F3107@local-macro-transformer F3107@local-macro-transformer) (set! F3109@do-macro-call (lambda (F40c2@transformer F40c3@expr) (let ((F40c6@out (F40c2@transformer (F2ed6@add-mark F2ed0@anti-mark F40c3@expr '#f)))) (begin (let F40ca@f ((F40c8@x F40c6@out)) (if (not (F2eb8@stx? F40c8@x)) (if (pair? F40c8@x) (begin (F40ca@f (car F40c8@x)) (F40ca@f (cdr F40c8@x))) (if (vector? F40c8@x) (vector-for-each F40ca@f F40c8@x) (if (symbol? F40c8@x) (F31d3@syntax-violation '#f '"raw symbol encountered in output of macro" F40c3@expr F40c8@x) (void)))) (void))) (F2ed6@add-mark (F2ece@gen-mark) F40c6@out F40c3@expr))))) (set! F4bd4@F3109@do-macro-call F3109@do-macro-call) (set! F310b@chi-macro (lambda (F40cc@p F40cd@e) (F3109@do-macro-call (F3105@macro-transformer F40cc@p) F40cd@e))) (set! F4bd5@F310b@chi-macro F310b@chi-macro) (set! F310d@chi-local-macro (lambda (F40d0@p F40d1@e) (F3109@do-macro-call (F3107@local-macro-transformer F40d0@p) F40d1@e))) (set! F4bd6@F310d@chi-local-macro F310d@chi-local-macro) (set! F310f@chi-global-macro (lambda (F40d4@p F40d5@e) (let ((F40d8@lib (car F40d4@p)) (F40d9@loc (cdr F40d4@p))) (begin (F2d02@F2b41@visit-library F40d8@lib) (let ((F40dc@x (symbol-value F40d9@loc))) (let ((F40de@transformer (if (procedure? F40dc@x) F40dc@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" F40dc@x)))) (F3109@do-macro-call F40de@transformer F40d5@e))))))) (set! F4bd7@F310f@chi-global-macro F310f@chi-global-macro) (set! F3111@chi-expr* (lambda (F40e0@e* F40e1@r F40e2@mr) (if (null? F40e0@e*) '() (let ((F40e6@e (F3115@chi-expr (car F40e0@e*) F40e1@r F40e2@mr))) (cons F40e6@e (F3111@chi-expr* (cdr F40e0@e*) F40e1@r F40e2@mr)))))) (set! F4bd8@F3111@chi-expr* F3111@chi-expr*) (set! F3113@chi-application (lambda (F40e8@e F40e9@r F40ea@mr) (let ((F40ee@t F40e8@e)) (let ((F40f0@ls/false (F30f3@syntax-dispatch F40ee@t '(any . each-any)))) (if F40f0@ls/false (apply (lambda (F40f2@rator F40f3@rands) (let ((F40f6@rator (F3115@chi-expr F40f2@rator F40e9@r F40ea@mr))) (cons F40f6@rator (F3111@chi-expr* F40f3@rands F40e9@r F40ea@mr)))) F40f0@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F40ee@t)))))) (set! F4bd9@F3113@chi-application F3113@chi-application) (set! F3115@chi-expr (lambda (F40f8@e F40f9@r F40fa@mr) (call-with-values (lambda () (F2f0e@syntax-type F40f8@e F40f9@r)) (lambda (F4104@F40ff F4105@F4101 F4106@F4103) (let ((F410a@kwd F4106@F4103) (F410b@value F4105@F4101) (F410c@type F4104@F40ff)) (let ((F4110@t F410c@type)) (if (memv F4110@t '(core-macro)) (let ((F4112@transformer (F3101@core-macro-transformer F410b@value))) (F4112@transformer F40f8@e F40f9@r F40fa@mr)) (if (memv F4110@t '(global)) (let ((F4114@lib (car F410b@value))) (let ((F4116@loc (cdr F410b@value))) (begin ((F315b@inv-collector) F4114@lib) F4116@loc))) (if (memv F4110@t '(core-prim)) (let ((F4118@name F410b@value)) (list 'primitive F4118@name)) (if (memv F4110@t '(call)) (F3113@chi-application F40f8@e F40f9@r F40fa@mr) (if (memv F4110@t '(lexical)) (let ((F411a@lex (F307d@lexical-var F410b@value))) F411a@lex) (if (memv F4110@t '(global-macro global-macro!)) (F3115@chi-expr (F310f@chi-global-macro F410b@value F40f8@e) F40f9@r F40fa@mr) (if (memv F4110@t '(local-macro local-macro!)) (F3115@chi-expr (F310d@chi-local-macro F410b@value F40f8@e) F40f9@r F40fa@mr) (if (memv F4110@t '(macro macro!)) (F3115@chi-expr (F310b@chi-macro F410b@value F40f8@e) F40f9@r F40fa@mr) (if (memv F4110@t '(constant)) (let ((F411c@datum F410b@value)) (list 'quote F411c@datum)) (if (memv F4110@t '(set!)) (F3117@chi-set! F40f8@e F40f9@r F40fa@mr) (if (memv F4110@t '(begin)) (let ((F411e@t F40f8@e)) (let ((F4120@ls/false (F30f3@syntax-dispatch F411e@t '(_ any . each-any)))) (if F4120@ls/false (apply (lambda (F4122@x F4123@x*) (F2e51@F2dab@build-sequence '#f (F3111@chi-expr* (cons F4122@x F4123@x*) F40f9@r F40fa@mr))) F4120@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F411e@t)))) (if (memv F4110@t '(let-syntax letrec-syntax)) (let ((F4126@t F40f8@e)) (let ((F4128@ls/false (F30f3@syntax-dispatch F4126@t '(_ #(each (any any)) any . each-any)))) (if (and F4128@ls/false (apply (lambda (F412a@xlhs* F412b@xrhs* F412c@xbody F412d@xbody*) (if (not (F2ef4@valid-bound-ids? F412a@xlhs*)) (F31d3@syntax-violation '#f '"invalid identifiers" F40f8@e) (void))) F4128@ls/false)) (apply (lambda (F4132@xlhs* F4133@xrhs* F4134@xbody F4135@xbody*) (let ((F413a@xlab* (map F2e78@gen-label F4132@xlhs*))) (let ((F413c@xrib (F2eac@make-full-rib F4132@xlhs* F413a@xlab*))) (let ((F413e@xb* (map (lambda (F4140@x) (F2f24@make-eval-transformer (F314d@expand-transformer (if (eq? F410c@type 'let-syntax) F4140@x (F2ed8@add-subst F413c@xrib F4140@x)) F40fa@mr))) F4133@xrhs*))) (F2e51@F2dab@build-sequence '#f (F3111@chi-expr* (map (lambda (F4142@x) (F2ed8@add-subst F413c@xrib F4142@x)) (cons F4134@xbody F4135@xbody*)) (append (map cons F413a@xlab* F413e@xb*) F40f9@r) (append (map cons F413a@xlab* F413e@xb*) F40fa@mr))))))) F4128@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4126@t)))) (if (memv F4110@t '(displaced-lexical)) (F31d3@syntax-violation '#f '"identifier out of context" F40f8@e) (if (memv F4110@t '(syntax)) (F31d3@syntax-violation '#f '"reference to pattern variable outside a syntax form" F40f8@e) (if (memv F4110@t '(define define-syntax module import library)) (F31d3@syntax-violation '#f (string-append (let ((F4144@t F410c@type)) (if (memv F4144@t '(define)) '"a definition" (if (memv F4144@t '(define-syntax)) '"a define-syntax" (if (memv F4144@t '(module)) '"a module definition" (if (memv F4144@t '(library)) '"a library definition" (if (memv F4144@t '(import)) '"an import declaration" (if (memv F4144@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") F40f8@e) (if (memv F4110@t '(mutable)) (F31d3@syntax-violation '#f '"attempt to reference an unexportable variable" F40f8@e) (F31d3@syntax-violation '#f '"invalid expression" F40f8@e))))))))))))))))))))))) (set! F4bda@F3115@chi-expr F3115@chi-expr) (set! F3117@chi-set! (lambda (F4146@e F4147@r F4148@mr) (let ((F414c@t F4146@e)) (let ((F414e@ls/false (F30f3@syntax-dispatch F414c@t '(_ any any)))) (if (and F414e@ls/false (apply (lambda (F4150@x F4151@v) (F2eec@id? F4150@x)) F414e@ls/false)) (apply (lambda (F4154@x F4155@v) (call-with-values (lambda () (F2f0e@syntax-type F4154@x F4147@r)) (lambda (F415e@F4159 F415f@F415b F4160@F415d) (let ((F4164@kwd F4160@F415d) (F4165@value F415f@F415b) (F4166@type F415e@F4159)) (let ((F416a@t F4166@type)) (if (memv F416a@t '(lexical)) (begin (F3081@set-lexical-mutable! F4165@value '#t) (list 'set! (F307d@lexical-var F4165@value) (F3115@chi-expr F4155@v F4147@r F4148@mr))) (if (memv F416a@t '(core-prim)) (F31d3@syntax-violation '#f '"cannot modify imported core primitive" F4146@e) (if (memv F416a@t '(global)) (F31d3@syntax-violation '#f '"attempt to modify imported binding" F4146@e) (if (memv F416a@t '(global-macro!)) (F3115@chi-expr (F310f@chi-global-macro F4165@value F4146@e) F4147@r F4148@mr) (if (memv F416a@t '(local-macro!)) (F3115@chi-expr (F310d@chi-local-macro F4165@value F4146@e) F4147@r F4148@mr) (if (memv F416a@t '(mutable)) (F31d3@syntax-violation '#f '"attempt to assign to an unexportable variable" F4146@e) (F31d3@syntax-violation '#f '"invalid syntax" F4146@e)))))))))))) F414e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F414c@t)))))) (set! F4bdb@F3117@chi-set! F3117@chi-set!) (set! F3119@verify-formals (lambda (F416c@fmls F416d@stx) (let ((F4170@t F416c@fmls)) (let ((F4172@ls/false (F30f3@syntax-dispatch F4170@t 'each-any))) (if F4172@ls/false (apply (lambda (F4174@x*) (if (not (F2ef4@valid-bound-ids? F4174@x*)) (F30ad@invalid-fmls-error F416d@stx F416c@fmls) (void))) F4172@ls/false) (let ((F4176@t F4170@t)) (let ((F4178@ls/false (F30f3@syntax-dispatch F4176@t '#(each+ any () any)))) (if F4178@ls/false (apply (lambda (F417a@x* F417b@x) (if (not (F2ef4@valid-bound-ids? (cons F417b@x F417a@x*))) (F30ad@invalid-fmls-error F416d@stx F416c@fmls) (void))) F4178@ls/false) (let ((F417e@t F4176@t)) (let ((F4180@ls/false (F30f3@syntax-dispatch F417e@t '_))) (if F4180@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid syntax" F416d@stx)) F4180@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F417e@t)))))))))))) (set! F4bdc@F3119@verify-formals F3119@verify-formals) (set! F311b@chi-lambda-clause (lambda (F4182@stx F4183@fmls F4184@body* F4185@r F4186@mr) (let ((F418c@t F4183@fmls)) (let ((F418e@ls/false (F30f3@syntax-dispatch F418c@t 'each-any))) (if F418e@ls/false (apply (lambda (F4190@x*) (begin (F3119@verify-formals F4183@fmls F4182@stx) (let ((F4192@lex* (map F2e74@gen-lexical F4190@x*)) (F4193@lab* (map F2e78@gen-label F4190@x*))) (values F4192@lex* (F312b@chi-internal (F2ed8@add-subst (F2eac@make-full-rib F4190@x* F4193@lab*) F4184@body*) (F3085@add-lexicals F4193@lab* F4192@lex* F4185@r) F4186@mr))))) F418e@ls/false) (let ((F4196@t F418c@t)) (let ((F4198@ls/false (F30f3@syntax-dispatch F4196@t '#(each+ any () any)))) (if F4198@ls/false (apply (lambda (F419a@x* F419b@x) (begin (F3119@verify-formals F4183@fmls F4182@stx) (let ((F419e@lex* (map F2e74@gen-lexical F419a@x*)) (F419f@lab* (map F2e78@gen-label F419a@x*)) (F41a0@lex (F2e74@gen-lexical F419b@x)) (F41a1@lab (F2e78@gen-label F419b@x))) (values (append F419e@lex* F41a0@lex) (F312b@chi-internal (F2ed8@add-subst (F2eac@make-full-rib (cons F419b@x F419a@x*) (cons F41a1@lab F419f@lab*)) F4184@body*) (F3085@add-lexicals (cons F41a1@lab F419f@lab*) (cons F41a0@lex F419e@lex*) F4185@r) F4186@mr))))) F4198@ls/false) (let ((F41a6@t F4196@t)) (let ((F41a8@ls/false (F30f3@syntax-dispatch F41a6@t '_))) (if F41a8@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid syntax" F4183@fmls)) F41a8@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F41a6@t)))))))))))) (set! F4bdd@F311b@chi-lambda-clause F311b@chi-lambda-clause) (set! F311d@chi-lambda-clause* (lambda (F41aa@stx F41ab@fmls* F41ac@body** F41ad@r F41ae@mr) (if (null? F41ab@fmls*) (values '() '()) (call-with-values (lambda () (F311b@chi-lambda-clause F41aa@stx (car F41ab@fmls*) (car F41ac@body**) F41ad@r F41ae@mr)) (lambda (F41b8@F41b5 F41b9@F41b7) (let ((F41bc@b F41b9@F41b7) (F41bd@a F41b8@F41b5)) (call-with-values (lambda () (F311d@chi-lambda-clause* F41aa@stx (cdr F41ab@fmls*) (cdr F41ac@body**) F41ad@r F41ae@mr)) (lambda (F41c4@F41c1 F41c5@F41c3) (let ((F41c8@b* F41c5@F41c3) (F41c9@a* F41c4@F41c1)) (values (cons F41bd@a F41c9@a*) (cons F41bc@b F41c8@b*))))))))))) (set! F4bde@F311d@chi-lambda-clause* F311d@chi-lambda-clause*) (set! F311f@chi-defun (lambda (F41cc@x F41cd@r F41ce@mr) (let ((F41d2@fmls (car F41cc@x)) (F41d3@body* (cdr F41cc@x))) (call-with-values (lambda () (F311b@chi-lambda-clause F41d2@fmls F41d2@fmls F41d3@body* F41cd@r F41ce@mr)) (lambda (F41da@F41d7 F41db@F41d9) (let ((F41de@body F41db@F41d9) (F41df@fmls F41da@F41d7)) (F2e4f@F2d7b@build-lambda '#f F41df@fmls F41de@body))))))) (set! F4bdf@F311f@chi-defun F311f@chi-defun) (set! F3121@chi-rhs (lambda (F41e2@rhs F41e3@r F41e4@mr) (let ((F41e8@t (car F41e2@rhs))) (if (memv F41e8@t '(defun)) (F311f@chi-defun (cdr F41e2@rhs) F41e3@r F41e4@mr) (if (memv F41e8@t '(expr)) (let ((F41ea@expr (cdr F41e2@rhs))) (F3115@chi-expr F41ea@expr F41e3@r F41e4@mr)) (if (memv F41e8@t '(top-expr)) (let ((F41ec@expr (cdr F41e2@rhs))) (F2e51@F2dab@build-sequence '#f (list (F3115@chi-expr F41ec@expr F41e3@r F41e4@mr) (F2e52@F2dad@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" F41e2@rhs))))))) (set! F4be0@F3121@chi-rhs F3121@chi-rhs) (set! F3123@expand-interaction-rhs*/init* (lambda (F41ee@lhs* F41ef@rhs* F41f0@init* F41f1@r F41f2@mr) (let F41fc@f ((F41f8@lhs* F41ee@lhs*) (F41f9@rhs* F41ef@rhs*)) (if (null? F41f8@lhs*) (map (lambda (F41fe@x) (F3115@chi-expr F41fe@x F41f1@r F41f2@mr)) F41f0@init*) (let ((F4200@lhs (car F41f8@lhs*)) (F4201@rhs (car F41f9@rhs*))) (let ((F4204@t (car F4201@rhs))) (if (memv F4204@t '(defun)) (let ((F4206@rhs (F311f@chi-defun (cdr F4201@rhs) F41f1@r F41f2@mr))) (cons (list 'set! F4200@lhs F4206@rhs) (F41fc@f (cdr F41f8@lhs*) (cdr F41f9@rhs*)))) (if (memv F4204@t '(expr)) (let ((F4208@rhs (F3115@chi-expr (cdr F4201@rhs) F41f1@r F41f2@mr))) (cons (list 'set! F4200@lhs F4208@rhs) (F41fc@f (cdr F41f8@lhs*) (cdr F41f9@rhs*)))) (if (memv F4204@t '(top-expr)) (let ((F420a@e (F3115@chi-expr (cdr F4201@rhs) F41f1@r F41f2@mr))) (cons F420a@e (F41fc@f (cdr F41f8@lhs*) (cdr F41f9@rhs*)))) (error 'expand-interaction '"invallid" F4201@rhs)))))))))) (set! F4be1@F3123@expand-interaction-rhs*/init* F3123@expand-interaction-rhs*/init*) (set! F3125@chi-rhs* (lambda (F420c@rhs* F420d@r F420e@mr) (let F4214@f ((F4212@ls F420c@rhs*)) (if (null? F4212@ls) '() (let ((F4216@a (F3121@chi-rhs (car F4212@ls) F420d@r F420e@mr))) (cons F4216@a (F4214@f (cdr F4212@ls)))))))) (set! F4be2@F3125@chi-rhs* F3125@chi-rhs*) (set! F3127@find-bound=? (lambda (F4218@x F4219@lhs* F421a@rhs*) (if (null? F4219@lhs*) '#f (if (F2ef0@bound-id=? F4218@x (car F4219@lhs*)) (car F421a@rhs*) (F3127@find-bound=? F4218@x (cdr F4219@lhs*) (cdr F421a@rhs*)))))) (set! F4be3@F3127@find-bound=? F3127@find-bound=?) (set! F3129@find-dups (lambda (F421e@ls) (let F4224@f ((F4220@ls F421e@ls) (F4221@dups '())) (if (null? F4220@ls) F4221@dups (let ((F4226@t (F3127@find-bound=? (car F4220@ls) (cdr F4220@ls) (cdr F4220@ls)))) (if F4226@t ((lambda (F4228@x) (F4224@f (cdr F4220@ls) (cons (list (car F4220@ls) F4228@x) F4221@dups))) F4226@t) (F4224@f (cdr F4220@ls) F4221@dups))))))) (set! F4be4@F3129@find-dups F3129@find-dups) (set! F312b@chi-internal (lambda (F422a@e* F422b@r F422c@mr) (let ((F4230@rib (F2ea0@make-empty-rib))) (call-with-values (lambda () (F314b@chi-body* (map (lambda (F4242@x) (F2ed8@add-subst F4230@rib F4242@x)) (F2eea@syntax->list F422a@e*)) F422b@r F422c@mr '() '() '() '() '() F4230@rib '#f)) (lambda (F4244@F4233 F4245@F4235 F4246@F4237 F4247@F4239 F4248@F423b F4249@F423d F424a@F423f F424b@F4241) (let ((F4254@_exp* F424b@F4241) (F4255@kwd* F424a@F423f) (F4256@mod** F4249@F423d) (F4257@rhs* F4248@F423b) (F4258@lex* F4247@F4239) (F4259@mr F4246@F4237) (F425a@r F4245@F4235) (F425b@e* F4244@F4233)) (begin (if (null? F425b@e*) (F31d3@syntax-violation '#f '"no expression in body" F425b@e*) (void)) (let ((F4264@init* (F3111@chi-expr* (append (apply append (reverse F4256@mod**)) F425b@e*) F425a@r F4259@mr))) (let ((F4266@rhs* (F3125@chi-rhs* F4257@rhs* F425a@r F4259@mr))) (F2e56@F2db5@build-letrec* '#f (reverse F4258@lex*) (reverse F4266@rhs*) (F2e51@F2dab@build-sequence '#f F4264@init*))))))))))) (set! F4be5@F312b@chi-internal F312b@chi-internal) (set! F312d@parse-module (lambda (F4268@e) (let ((F426a@t F4268@e)) (let ((F426c@ls/false (F30f3@syntax-dispatch F426a@t '(_ each-any . each-any)))) (if F426c@ls/false (apply (lambda (F426e@export* F426f@b*) (begin (if (not (for-all F2eec@id? F426e@export*)) (F31d3@syntax-violation '#f '"module exports must be identifiers" F4268@e) (void)) (values '#f (list->vector F426e@export*) F426f@b*))) F426c@ls/false) (let ((F4272@t F426a@t)) (let ((F4274@ls/false (F30f3@syntax-dispatch F4272@t '(_ any each-any . each-any)))) (if F4274@ls/false (apply (lambda (F4276@name F4277@export* F4278@b*) (begin (if (not (F2eec@id? F4276@name)) (F31d3@syntax-violation '#f '"module name must be an identifier" F4268@e) (void)) (if (not (for-all F2eec@id? F4277@export*)) (F31d3@syntax-violation '#f '"module exports must be identifiers" F4268@e) (void)) (values F4276@name (list->vector F4277@export*) F4278@b*))) F4274@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4272@t))))))))) (set! F4be6@F312d@parse-module F312d@parse-module) (set! F3137@module-interface? (lambda (F427c@x) (and (simple-struct? F427c@x) (eq? (simple-struct-name F427c@x) 'module-interface)))) (set! F4be7@F3137@module-interface? F3137@module-interface?) (set! F3139@module-interface-first-mark (lambda (F427e@x) (simple-struct-ref F427e@x '0))) (set! F4be8@F3139@module-interface-first-mark F3139@module-interface-first-mark) (set! F313b@set-module-interface-first-mark! (lambda (F4280@x F4281@val) (simple-struct-set! F4280@x '0 F4281@val))) (set! F4be9@F313b@set-module-interface-first-mark! F313b@set-module-interface-first-mark!) (set! F313d@module-interface-exp-id-vec (lambda (F4284@x) (simple-struct-ref F4284@x '1))) (set! F4bea@F313d@module-interface-exp-id-vec F313d@module-interface-exp-id-vec) (set! F313f@set-module-interface-exp-id-vec! (lambda (F4286@x F4287@val) (simple-struct-set! F4286@x '1 F4287@val))) (set! F4beb@F313f@set-module-interface-exp-id-vec! F313f@set-module-interface-exp-id-vec!) (set! F3141@module-interface-exp-lab-vec (lambda (F428a@x) (simple-struct-ref F428a@x '2))) (set! F4bec@F3141@module-interface-exp-lab-vec F3141@module-interface-exp-lab-vec) (set! F3143@set-module-interface-exp-lab-vec! (lambda (F428c@x F428d@val) (simple-struct-set! F428c@x '2 F428d@val))) (set! F4bed@F3143@set-module-interface-exp-lab-vec! F3143@set-module-interface-exp-lab-vec!) (set! F3145@dummy '3) (set! F4bee@F3145@dummy F3145@dummy) (set! F3147@module-interface-exp-id* (lambda (F4290@iface F4291@id) (let ((F4295@diff-marks '#f)) (begin (set! F4295@diff-marks (lambda (F429c@ls F429d@x) (begin (if (null? F429c@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((F42a0@a (car F429c@ls))) (if (eq? F42a0@a F429d@x) '() (cons F42a0@a (F4295@diff-marks (cdr F429c@ls) F429d@x))))))) (let ((F4296@diff (F4295@diff-marks (F2ebe@stx-mark* F4291@id) (F3139@module-interface-first-mark F4290@iface))) (F4297@id-vec (F313d@module-interface-exp-id-vec F4290@iface))) (if (null? F4296@diff) F4297@id-vec (vector-map (lambda (F429a@x) (make-simple-struct 'stx '5 (list (F2eba@stx-expr F429a@x) (append F4296@diff (F2ebe@stx-mark* F429a@x)) '() '()))) F4297@id-vec))))))) (set! F4bef@F3147@module-interface-exp-id* F3147@module-interface-exp-id*) (set! F3149@chi-internal-module (lambda (F42a2@e F42a3@r F42a4@mr F42a5@lex* F42a6@rhs* F42a7@mod** F42a8@kwd*) (call-with-values (lambda () (F312d@parse-module F42a2@e)) (lambda (F42b6@F42b1 F42b7@F42b3 F42b8@F42b5) (let ((F42bc@e* F42b8@F42b5) (F42bd@exp-id* F42b7@F42b3) (F42be@name F42b6@F42b1)) (let ((F42c2@rib (F2ea0@make-empty-rib))) (let ((F42c4@e* (map (lambda (F42c6@x) (F2ed8@add-subst F42c2@rib F42c6@x)) (F2eea@syntax->list F42bc@e*)))) (call-with-values (lambda () (F314b@chi-body* F42c4@e* F42a3@r F42a4@mr F42a5@lex* F42a6@rhs* F42a7@mod** F42a8@kwd* '() F42c2@rib '#f)) (lambda (F42d8@F42c9 F42d9@F42cb F42da@F42cd F42db@F42cf F42dc@F42d1 F42dd@F42d3 F42de@F42d5 F42df@F42d7) (let ((F42e8@_exp* F42df@F42d7) (F42e9@kwd* F42de@F42d5) (F42ea@mod** F42dd@F42d3) (F42eb@rhs* F42dc@F42d1) (F42ec@lex* F42db@F42cf) (F42ed@mr F42da@F42cd) (F42ee@r F42d9@F42cb) (F42ef@e* F42d8@F42c9)) (let ((F42f8@exp-lab* (vector-map (lambda (F42fc@x) (or (F2f02@id->label (make-simple-struct 'stx '5 (list (F2eee@id->sym F42fc@x) (F2ebe@stx-mark* F42fc@x) (list F42c2@rib) '()))) (F31d3@syntax-violation '#f '"cannot find module export" F42fc@x))) F42bd@exp-id*)) (F42f9@mod** (cons F42ef@e* F42ea@mod**))) (if (not F42be@name) (values F42ec@lex* F42eb@rhs* F42bd@exp-id* F42f8@exp-lab* F42ee@r F42ed@mr F42f9@mod** F42e9@kwd*) (let ((F42fe@lab (F2e78@gen-label 'module)) (F42ff@iface (make-simple-struct 'module-interface '4 (list (car (F2ebe@stx-mark* F42be@name)) (vector-map (lambda (F4302@x) (make-simple-struct 'stx '5 (list (F2eba@stx-expr F4302@x) (F2ebe@stx-mark* F4302@x) '() '()))) F42bd@exp-id*) F42f8@exp-lab*)))) (values F42ec@lex* F42eb@rhs* (vector F42be@name) (vector F42fe@lab) (cons (cons F42fe@lab (cons '$module F42ff@iface)) F42ee@r) (cons (cons F42fe@lab (cons '$module F42ff@iface)) F42ed@mr) F42f9@mod** F42e9@kwd*)))))))))))))) (set! F4bf0@F3149@chi-internal-module F3149@chi-internal-module) (set! F314b@chi-body* (lambda (F4304@e* F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F430a@kwd* F430b@exp* F430c@rib F430d@top?) (if (null? F4304@e*) (values F4304@e* F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F430a@kwd* F430b@exp*) (let ((F4318@e (car F4304@e*))) (call-with-values (lambda () (F2f0e@syntax-type F4318@e F4305@r)) (lambda (F4320@F431b F4321@F431d F4322@F431f) (let ((F4326@kwd F4322@F431f) (F4327@value F4321@F431d) (F4328@type F4320@F431b)) (let ((F432c@kwd* (if (F2eec@id? F4326@kwd) (cons F4326@kwd F430a@kwd*) F430a@kwd*))) (let ((F432e@t F4328@type)) (if (memv F432e@t '(define)) (call-with-values (lambda () (F3075@parse-define F4318@e)) (lambda (F4334@F4331 F4335@F4333) (let ((F4338@rhs F4335@F4333) (F4339@id F4334@F4331)) (begin (if (F2ef8@bound-id-member? F4339@id F432c@kwd*) (F31d3@syntax-violation '#f '"cannot redefine keyword" F4318@e) (void)) (call-with-values (lambda () (F2e7c@gen-define-label+loc F4339@id F430c@rib)) (lambda (F4340@F433d F4341@F433f) (let ((F4344@lex F4341@F433f) (F4345@lab F4340@F433d)) (begin (F2ea2@extend-rib! F430c@rib F4339@id F4345@lab) (F314b@chi-body* (cdr F4304@e*) (F3083@add-lexical F4345@lab F4344@lex F4305@r) F4306@mr (cons F4344@lex F4307@lex*) (cons F4338@rhs F4308@rhs*) F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?))))))))) (if (memv F432e@t '(define-syntax)) (call-with-values (lambda () (F3077@parse-define-syntax F4318@e)) (lambda (F434c@F4349 F434d@F434b) (let ((F4350@rhs F434d@F434b) (F4351@id F434c@F4349)) (begin (if (F2ef8@bound-id-member? F4351@id F432c@kwd*) (F31d3@syntax-violation '#f '"cannot redefine keyword" F4318@e) (void)) (let ((F4354@lab (F2e7e@gen-define-label F4351@id F430c@rib)) (F4355@expanded-rhs (F314d@expand-transformer F4350@rhs F4306@mr))) (begin (F2ea2@extend-rib! F430c@rib F4351@id F4354@lab) (let ((F4358@b (F2f24@make-eval-transformer F4355@expanded-rhs))) (F314b@chi-body* (cdr F4304@e*) (cons (cons F4354@lab F4358@b) F4305@r) (cons (cons F4354@lab F4358@b) F4306@mr) F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?)))))))) (if (memv F432e@t '(let-syntax letrec-syntax)) (let ((F435a@t F4318@e)) (let ((F435c@ls/false (F30f3@syntax-dispatch F435a@t '(_ #(each (any any)) . each-any)))) (if (and F435c@ls/false (apply (lambda (F435e@xlhs* F435f@xrhs* F4360@xbody*) (if (not (F2ef4@valid-bound-ids? F435e@xlhs*)) (F31d3@syntax-violation '#f '"invalid identifiers" F4318@e) (void))) F435c@ls/false)) (apply (lambda (F4364@xlhs* F4365@xrhs* F4366@xbody*) (let ((F436a@xlab* (map F2e78@gen-label F4364@xlhs*))) (let ((F436c@xrib (F2eac@make-full-rib F4364@xlhs* F436a@xlab*))) (let ((F436e@xb* (map (lambda (F4370@x) (F2f24@make-eval-transformer (F314d@expand-transformer (if (eq? F4328@type 'let-syntax) F4370@x (F2ed8@add-subst F436c@xrib F4370@x)) F4306@mr))) F4365@xrhs*))) (F314b@chi-body* (append (map (lambda (F4372@x) (F2ed8@add-subst F436c@xrib F4372@x)) F4366@xbody*) (cdr F4304@e*)) (append (map cons F436a@xlab* F436e@xb*) F4305@r) (append (map cons F436a@xlab* F436e@xb*) F4306@mr) F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?))))) F435c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F435a@t)))) (if (memv F432e@t '(begin)) (let ((F4374@t F4318@e)) (let ((F4376@ls/false (F30f3@syntax-dispatch F4374@t '(_ . each-any)))) (if F4376@ls/false (apply (lambda (F4378@x*) (F314b@chi-body* (append F4378@x* (cdr F4304@e*)) F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?)) F4376@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4374@t)))) (if (memv F432e@t '(global-macro global-macro!)) (F314b@chi-body* (cons (F2ed8@add-subst F430c@rib (F310f@chi-global-macro F4327@value F4318@e)) (cdr F4304@e*)) F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?) (if (memv F432e@t '(local-macro local-macro!)) (F314b@chi-body* (cons (F2ed8@add-subst F430c@rib (F310d@chi-local-macro F4327@value F4318@e)) (cdr F4304@e*)) F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?) (if (memv F432e@t '(macro macro!)) (F314b@chi-body* (cons (F2ed8@add-subst F430c@rib (F310b@chi-macro F4327@value F4318@e)) (cdr F4304@e*)) F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?) (if (memv F432e@t '(module)) (call-with-values (lambda () (F3149@chi-internal-module F4318@e F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F432c@kwd*)) (lambda (F438a@F437b F438b@F437d F438c@F437f F438d@F4381 F438e@F4383 F438f@F4385 F4390@F4387 F4391@F4389) (let ((F439a@kwd* F4391@F4389) (F439b@mod** F4390@F4387) (F439c@mr F438f@F4385) (F439d@r F438e@F4383) (F439e@m-exp-lab* F438d@F4381) (F439f@m-exp-id* F438c@F437f) (F43a0@rhs* F438b@F437d) (F43a1@lex* F438a@F437b)) (begin (vector-for-each (lambda (F43aa@id F43ab@lab) (F2ea2@extend-rib! F430c@rib F43aa@id F43ab@lab)) F439f@m-exp-id* F439e@m-exp-lab*) (F314b@chi-body* (cdr F4304@e*) F439d@r F439c@mr F43a1@lex* F43a0@rhs* F439b@mod** F439a@kwd* F430b@exp* F430c@rib F430d@top?))))) (if (memv F432e@t '(library)) (begin (F31b5@library-expander (F2f00@stx->datum F4318@e)) (F314b@chi-body* (cdr F4304@e*) F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?)) (if (memv F432e@t '(export)) (let ((F43ae@t F4318@e)) (let ((F43b0@ls/false (F30f3@syntax-dispatch F43ae@t '(_ . each-any)))) (if F43b0@ls/false (apply (lambda (F43b2@exp-decl*) (F314b@chi-body* (cdr F4304@e*) F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* (append F43b2@exp-decl* F430b@exp*) F430c@rib F430d@top?)) F43b0@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F43ae@t)))) (if (memv F432e@t '(import)) (let ((F43b5@module-import? '#f) (F43b7@module-import '#f) (F43b9@library-import '#f)) (begin (set! F43b5@module-import? (lambda (F4408@e) (let ((F440a@t F4408@e)) (let ((F440c@ls/false (F30f3@syntax-dispatch F440a@t '(_ any)))) (if (and F440c@ls/false (apply (lambda (F440e@id) (F2eec@id? F440e@id)) F440c@ls/false)) (apply (lambda (F4410@id) '#t) F440c@ls/false) (let ((F4412@t F440a@t)) (let ((F4414@ls/false (F30f3@syntax-dispatch F4412@t '(_ . each-any)))) (if F4414@ls/false (apply (lambda (F4416@imp*) '#f) F4414@ls/false) (let ((F4418@t F4412@t)) (let ((F441a@ls/false (F30f3@syntax-dispatch F4418@t '_))) (if F441a@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"malformed import form" F4408@e)) F441a@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4418@t)))))))))))) (set! F43b7@module-import (lambda (F43e6@e F43e7@r) (let ((F43ea@t F43e6@e)) (let ((F43ec@ls/false (F30f3@syntax-dispatch F43ea@t '(_ any)))) (if (and F43ec@ls/false (apply (lambda (F43ee@id) (F2eec@id? F43ee@id)) F43ec@ls/false)) (apply (lambda (F43f0@id) (call-with-values (lambda () (F2f0e@syntax-type F43f0@id F43e7@r)) (lambda (F43f8@F43f3 F43f9@F43f5 F43fa@F43f7) (let ((F43fe@kwd F43fa@F43f7) (F43ff@value F43f9@F43f5) (F4400@type F43f8@F43f3)) (let ((F4404@t F4400@type)) (if (memv F4404@t '($module)) (let ((F4406@iface F43ff@value)) (values (F3147@module-interface-exp-id* F4406@iface F43f0@id) (F3141@module-interface-exp-lab-vec F4406@iface))) (F31d3@syntax-violation '#f '"invalid import" F43e6@e))))))) F43ec@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F43ea@t)))))) (set! F43b9@library-import (lambda (F43ca@e) (let ((F43cc@t F43ca@e)) (let ((F43ce@ls/false (F30f3@syntax-dispatch F43cc@t '(any . each-any)))) (if F43ce@ls/false (apply (lambda (F43d0@ctxt F43d1@imp*) (call-with-values (lambda () (F3155@parse-import-spec* (F31d9@syntax->datum F43d1@imp*))) (lambda (F43d8@F43d5 F43d9@F43d7) (let ((F43dc@subst-labels F43d9@F43d7) (F43dd@subst-names F43d8@F43d5)) (values (vector-map (lambda (F43e0@name) (F2ecc@datum->stx F43d0@ctxt F43e0@name)) F43dd@subst-names) F43dc@subst-labels))))) F43ce@ls/false) (let ((F43e2@t F43cc@t)) (let ((F43e4@ls/false (F30f3@syntax-dispatch F43e2@t '_))) (if F43e4@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid import form" F43ca@e)) F43e4@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F43e2@t))))))))) (begin (call-with-values (lambda () (if (F43b5@module-import? F4318@e) (F43b7@module-import F4318@e F4305@r) (F43b9@library-import F4318@e))) (lambda (F43be@F43bb F43bf@F43bd) (let ((F43c2@lab* F43bf@F43bd) (F43c3@id* F43be@F43bb)) (vector-for-each (lambda (F43c6@id F43c7@lab) (F2ea2@extend-rib! F430c@rib F43c6@id F43c7@lab)) F43c3@id* F43c2@lab*)))) (F314b@chi-body* (cdr F4304@e*) F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?)))) (if F430d@top? (F314b@chi-body* (cdr F4304@e*) F4305@r F4306@mr (cons (F2e74@gen-lexical 'dummy) F4307@lex*) (cons (cons 'top-expr F4318@e) F4308@rhs*) F4309@mod** F432c@kwd* F430b@exp* F430c@rib F430d@top?) (values F4304@e* F4305@r F4306@mr F4307@lex* F4308@rhs* F4309@mod** F432c@kwd* F430b@exp*)))))))))))))))))))))) (set! F4bf1@F314b@chi-body* F314b@chi-body*) (set! F314d@expand-transformer (lambda (F441c@expr F441d@r) (let ((F4420@rtc (F3159@make-collector))) (let ((F4422@expanded-rhs (let ((F442c@F4425 F315b@inv-collector) (F442d@F4427 F315d@vis-collector) (F442e@F4429 F4420@rtc) (F442f@F442b (lambda (F4434@x) (values)))) (let ((F4436@swap (lambda () (begin (let ((F4438@t (F442c@F4425))) (begin (F442c@F4425 F442e@F4429) (set! F442e@F4429 F4438@t))) (let ((F443a@t (F442d@F4427))) (begin (F442d@F4427 F442f@F442b) (set! F442f@F442b F443a@t))))))) (dynamic-wind F4436@swap (lambda () (F3115@chi-expr F441c@expr F441d@r F441d@r)) F4436@swap))))) (begin (for-each (let ((F443c@mark-visit (F315d@vis-collector))) (lambda (F443e@x) (begin (F2d01@F2b3f@invoke-library F443e@x) (F443c@mark-visit F443e@x)))) (F4420@rtc)) F4422@expanded-rhs))))) (set! F4bf2@F314d@expand-transformer F314d@expand-transformer) (set! F314f@parse-exports (lambda (F4440@exp*) (let F4448@f ((F4442@exp* F4440@exp*) (F4443@int* '()) (F4444@ext* '())) (if (null? F4442@exp*) (begin (if (not (F2ef4@valid-bound-ids? F4444@ext*)) (F31d3@syntax-violation 'export '"invalid exports" (F3129@find-dups F4444@ext*)) (void)) (values (map F31d9@syntax->datum F4444@ext*) F4443@int*)) (let ((F444a@t (car F4442@exp*))) (let ((F444c@ls/false (F30f3@syntax-dispatch F444a@t '(any . #(each (any any)))))) (if F444c@ls/false (apply (lambda (F444e@rename F444f@i* F4450@e*) (begin (if (not (and (eq? (F31d9@syntax->datum F444e@rename) 'rename) (for-all F2eec@id? F444f@i*) (for-all F2eec@id? F4450@e*))) (F31d3@syntax-violation 'export '"invalid export specifier" (car F4442@exp*)) (void)) (F4448@f (cdr F4442@exp*) (append F444f@i* F4443@int*) (append F4450@e* F4444@ext*)))) F444c@ls/false) (let ((F4454@t F444a@t)) (let ((F4456@ls/false (F30f3@syntax-dispatch F4454@t 'any))) (if F4456@ls/false (apply (lambda (F4458@ie) (begin (if (not (F2eec@id? F4458@ie)) (F31d3@syntax-violation 'export '"invalid export" F4458@ie) (void)) (F4448@f (cdr F4442@exp*) (cons F4458@ie F4443@int*) (cons F4458@ie F4444@ext*)))) F4456@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4454@t))))))))))) (set! F4bf3@F314f@parse-exports F314f@parse-exports) (set! F3151@parse-library-name (lambda (F445a@spec) (let ((F445d@parse '#f)) (begin (set! F445d@parse (lambda (F446a@x) (let ((F446c@t F446a@x)) (let ((F446e@ls/false (F30f3@syntax-dispatch F446c@t '(each-any)))) (if (and F446e@ls/false (apply (lambda (F4470@v*) (for-all (lambda (F4472@x) (let ((F4474@x (F31d9@syntax->datum F4472@x))) (and (integer? F4474@x) (exact? F4474@x)))) F4470@v*)) F446e@ls/false)) (apply (lambda (F4476@v*) (values '() (map F31d9@syntax->datum F4476@v*))) F446e@ls/false) (let ((F4478@t F446c@t)) (let ((F447a@ls/false (F30f3@syntax-dispatch F4478@t '(any . any)))) (if (and F447a@ls/false (apply (lambda (F447c@x F447d@rest) (symbol? (F31d9@syntax->datum F447c@x))) F447a@ls/false)) (apply (lambda (F4480@x F4481@rest) (call-with-values (lambda () (F445d@parse F4481@rest)) (lambda (F4488@F4485 F4489@F4487) (let ((F448c@v* F4489@F4487) (F448d@x* F4488@F4485)) (values (cons (F31d9@syntax->datum F4480@x) F448d@x*) F448c@v*))))) F447a@ls/false) (let ((F4490@t F4478@t)) (let ((F4492@ls/false (F30f3@syntax-dispatch F4490@t '()))) (if F4492@ls/false (apply (lambda () (values '() '())) F4492@ls/false) (let ((F4494@t F4490@t)) (let ((F4496@ls/false (F30f3@syntax-dispatch F4494@t '_))) (if F4496@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid library name" F445a@spec)) F4496@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4494@t))))))))))))))) (call-with-values (lambda () (F445d@parse F445a@spec)) (lambda (F4462@F445f F4463@F4461) (let ((F4466@ver* F4463@F4461) (F4467@name* F4462@F445f)) (begin (if (null? F4467@name*) (F31d3@syntax-violation '#f '"empty library name" F445a@spec) (void)) (values F4467@name* F4466@ver*))))))))) (set! F4bf4@F3151@parse-library-name F3151@parse-library-name) (set! F3153@parse-library (lambda (F4498@e) (let ((F449a@t F4498@e)) (let ((F449c@ls/false (F30f3@syntax-dispatch F449a@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and F449c@ls/false (apply (lambda (F449e@library F449f@name* F44a0@export F44a1@exp* F44a2@import F44a3@imp* F44a4@b*) (and (eq? (F31d9@syntax->datum F44a0@export) 'export) (eq? (F31d9@syntax->datum F44a2@import) 'import) (eq? (F31d9@syntax->datum F449e@library) 'library))) F449c@ls/false)) (apply (lambda (F44ac@library F44ad@name* F44ae@export F44af@exp* F44b0@import F44b1@imp* F44b2@b*) (values F44ad@name* F44af@exp* F44b1@imp* F44b2@b*)) F449c@ls/false) (let ((F44ba@t F449a@t)) (let ((F44bc@ls/false (F30f3@syntax-dispatch F44ba@t '_))) (if F44bc@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"malformed library" F4498@e)) F44bc@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F44ba@t))))))))) (set! F4bf5@F3153@parse-library F3153@parse-library) (set! F3155@parse-import-spec* (let ((F44bf@idsyn? '#f) (F44c1@dup-error '#f) (F44c3@merge-substs '#f) (F44c5@exclude* '#f) (F44c7@find* '#f) (F44c9@rem* '#f) (F44cb@remove-dups '#f) (F44cd@parse-library-name '#f) (F44cf@import-library '#f) (F44d1@get-import '#f) (F44d3@add-imports! '#f)) (begin (set! F44bf@idsyn? (lambda (F46c8@x) (symbol? (F31d9@syntax->datum F46c8@x)))) (set! F44c1@dup-error (lambda (F46c6@name) (F31d3@syntax-violation 'import '"two imports with different bindings" F46c6@name))) (set! F44c3@merge-substs (lambda (F46b4@s F46b5@subst) (let ((F46b9@insert-to-subst '#f)) (begin (set! F46b9@insert-to-subst (lambda (F46ba@a F46bb@subst) (let ((F46be@name (car F46ba@a)) (F46bf@label (cdr F46ba@a))) (let ((F46c2@t (assq F46be@name F46bb@subst))) (if F46c2@t ((lambda (F46c4@x) (if (eq? (cdr F46c4@x) F46bf@label) F46bb@subst (F44c1@dup-error F46be@name))) F46c2@t) (cons F46ba@a F46bb@subst)))))) (if (null? F46b4@s) F46b5@subst (F46b9@insert-to-subst (car F46b4@s) (F44c3@merge-substs (cdr F46b4@s) F46b5@subst))))))) (set! F44c5@exclude* (lambda (F4684@sym* F4685@subst) (let ((F4689@exclude '#f)) (begin (set! F4689@exclude (lambda (F46a2@sym F46a3@subst) (if (null? F46a3@subst) (F31d3@syntax-violation 'import '"cannot rename unbound identifier" F46a2@sym) (if (eq? F46a2@sym (caar F46a3@subst)) (values (cdar F46a3@subst) (cdr F46a3@subst)) (let ((F46a6@a (car F46a3@subst))) (call-with-values (lambda () (F4689@exclude F46a2@sym (cdr F46a3@subst))) (lambda (F46ac@F46a9 F46ad@F46ab) (let ((F46b0@subst F46ad@F46ab) (F46b1@old F46ac@F46a9)) (values F46b1@old (cons F46a6@a F46b0@subst)))))))))) (if (null? F4684@sym*) (values '() F4685@subst) (call-with-values (lambda () (F4689@exclude (car F4684@sym*) F4685@subst)) (lambda (F468e@F468b F468f@F468d) (let ((F4692@subst F468f@F468d) (F4693@old F468e@F468b)) (call-with-values (lambda () (F44c5@exclude* (cdr F4684@sym*) F4692@subst)) (lambda (F469a@F4697 F469b@F4699) (let ((F469e@subst F469b@F4699) (F469f@old* F469a@F4697)) (values (cons F4693@old F469f@old*) F469e@subst)))))))))))) (set! F44c7@find* (lambda (F467c@sym* F467d@subst) (map (lambda (F4680@x) (let ((F4682@t (assq F4680@x F467d@subst))) (if F4682@t (cdr F4682@t) (F31d3@syntax-violation 'import '"cannot find identifier" F4680@x)))) F467c@sym*))) (set! F44c9@rem* (lambda (F4674@sym* F4675@subst) (let F467a@f ((F4678@subst F4675@subst)) (if (null? F4678@subst) '() (if (memq (caar F4678@subst) F4674@sym*) (F467a@f (cdr F4678@subst)) (cons (car F4678@subst) (F467a@f (cdr F4678@subst)))))))) (set! F44cb@remove-dups (lambda (F4672@ls) (if (null? F4672@ls) '() (if (memq (car F4672@ls) (cdr F4672@ls)) (F44cb@remove-dups (cdr F4672@ls)) (cons (car F4672@ls) (F44cb@remove-dups (cdr F4672@ls))))))) (set! F44cd@parse-library-name (lambda (F458a@spec) (let ((F458d@subversion? '#f) (F458f@subversion-pred '#f) (F4591@version-pred '#f)) (begin (set! F458d@subversion? (lambda (F466e@x) (let ((F4670@x (F31d9@syntax->datum F466e@x))) (and (integer? F4670@x) (exact? F4670@x) (>= F4670@x '0))))) (set! F458f@subversion-pred (lambda (F460e@x*) (let ((F4610@t F460e@x*)) (let ((F4612@ls/false (F30f3@syntax-dispatch F4610@t 'any))) (if (and F4612@ls/false (apply (lambda (F4614@n) (F458d@subversion? F4614@n)) F4612@ls/false)) (apply (lambda (F4616@n) (lambda (F4618@x) (= F4618@x (F31d9@syntax->datum F4616@n)))) F4612@ls/false) (let ((F461a@t F4610@t)) (let ((F461c@ls/false (F30f3@syntax-dispatch F461a@t '(any . each-any)))) (if (and F461c@ls/false (apply (lambda (F461e@p? F461f@sub*) (eq? (F31d9@syntax->datum F461e@p?) 'and)) F461c@ls/false)) (apply (lambda (F4622@p? F4623@sub*) (let ((F4626@p* (map F458f@subversion-pred F4623@sub*))) (lambda (F4628@x) (for-all (lambda (F462a@p) (F462a@p F4628@x)) F4626@p*)))) F461c@ls/false) (let ((F462c@t F461a@t)) (let ((F462e@ls/false (F30f3@syntax-dispatch F462c@t '(any . each-any)))) (if (and F462e@ls/false (apply (lambda (F4630@p? F4631@sub*) (eq? (F31d9@syntax->datum F4630@p?) 'or)) F462e@ls/false)) (apply (lambda (F4634@p? F4635@sub*) (let ((F4638@p* (map F458f@subversion-pred F4635@sub*))) (lambda (F463a@x) (exists (lambda (F463c@p) (F463c@p F463a@x)) F4638@p*)))) F462e@ls/false) (let ((F463e@t F462c@t)) (let ((F4640@ls/false (F30f3@syntax-dispatch F463e@t '(any any)))) (if (and F4640@ls/false (apply (lambda (F4642@p? F4643@sub) (eq? (F31d9@syntax->datum F4642@p?) 'not)) F4640@ls/false)) (apply (lambda (F4646@p? F4647@sub) (let ((F464a@p (F458f@subversion-pred F4647@sub))) (lambda (F464c@x) (not (F464a@p F464c@x))))) F4640@ls/false) (let ((F464e@t F463e@t)) (let ((F4650@ls/false (F30f3@syntax-dispatch F464e@t '(any any)))) (if (and F4650@ls/false (apply (lambda (F4652@p? F4653@n) (and (eq? (F31d9@syntax->datum F4652@p?) '<=) (F458d@subversion? F4653@n))) F4650@ls/false)) (apply (lambda (F4656@p? F4657@n) (lambda (F465a@x) (<= F465a@x (F31d9@syntax->datum F4657@n)))) F4650@ls/false) (let ((F465c@t F464e@t)) (let ((F465e@ls/false (F30f3@syntax-dispatch F465c@t '(any any)))) (if (and F465e@ls/false (apply (lambda (F4660@p? F4661@n) (and (eq? (F31d9@syntax->datum F4660@p?) '>=) (F458d@subversion? F4661@n))) F465e@ls/false)) (apply (lambda (F4664@p? F4665@n) (lambda (F4668@x) (>= F4668@x (F31d9@syntax->datum F4665@n)))) F465e@ls/false) (let ((F466a@t F465c@t)) (let ((F466c@ls/false (F30f3@syntax-dispatch F466a@t '_))) (if F466c@ls/false (apply (lambda () (F31d3@syntax-violation 'import '"invalid sub-version spec" F458a@spec F460e@x*)) F466c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F466a@t)))))))))))))))))))))))) (set! F4591@version-pred (lambda (F45be@x*) (let ((F45c0@t F45be@x*)) (let ((F45c2@ls/false (F30f3@syntax-dispatch F45c0@t '()))) (if F45c2@ls/false (apply (lambda () (lambda (F45c4@x) '#t)) F45c2@ls/false) (let ((F45c6@t F45c0@t)) (let ((F45c8@ls/false (F30f3@syntax-dispatch F45c6@t '(any . each-any)))) (if (and F45c8@ls/false (apply (lambda (F45ca@c F45cb@ver*) (eq? (F31d9@syntax->datum F45ca@c) 'and)) F45c8@ls/false)) (apply (lambda (F45ce@c F45cf@ver*) (let ((F45d2@p* (map F4591@version-pred F45cf@ver*))) (lambda (F45d4@x) (for-all (lambda (F45d6@p) (F45d6@p F45d4@x)) F45d2@p*)))) F45c8@ls/false) (let ((F45d8@t F45c6@t)) (let ((F45da@ls/false (F30f3@syntax-dispatch F45d8@t '(any . each-any)))) (if (and F45da@ls/false (apply (lambda (F45dc@c F45dd@ver*) (eq? (F31d9@syntax->datum F45dc@c) 'or)) F45da@ls/false)) (apply (lambda (F45e0@c F45e1@ver*) (let ((F45e4@p* (map F4591@version-pred F45e1@ver*))) (lambda (F45e6@x) (exists (lambda (F45e8@p) (F45e8@p F45e6@x)) F45e4@p*)))) F45da@ls/false) (let ((F45ea@t F45d8@t)) (let ((F45ec@ls/false (F30f3@syntax-dispatch F45ea@t '(any any)))) (if (and F45ec@ls/false (apply (lambda (F45ee@c F45ef@ver) (eq? (F31d9@syntax->datum F45ee@c) 'not)) F45ec@ls/false)) (apply (lambda (F45f2@c F45f3@ver) (let ((F45f6@p (F4591@version-pred F45f3@ver))) (lambda (F45f8@x) (not (F45f6@p F45f8@x))))) F45ec@ls/false) (let ((F45fa@t F45ea@t)) (let ((F45fc@ls/false (F30f3@syntax-dispatch F45fa@t 'each-any))) (if F45fc@ls/false (apply (lambda (F45fe@sub*) (let ((F4600@p* (map F458f@subversion-pred F45fe@sub*))) (lambda (F4602@x) (let F4608@f ((F4604@p* F4600@p*) (F4605@x F4602@x)) (if (null? F4604@p*) '#t (if (null? F4605@x) '#f (and ((car F4604@p*) (car F4605@x)) (F4608@f (cdr F4604@p*) (cdr F4605@x))))))))) F45fc@ls/false) (let ((F460a@t F45fa@t)) (let ((F460c@ls/false (F30f3@syntax-dispatch F460a@t '_))) (if F460c@ls/false (apply (lambda () (F31d3@syntax-violation 'import '"invalid version spec" F458a@spec F45be@x*)) F460c@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F460a@t))))))))))))))))))))) (let F4594@f ((F4592@x F458a@spec)) (let ((F4596@t F4592@x)) (let ((F4598@ls/false (F30f3@syntax-dispatch F4596@t '(each-any)))) (if F4598@ls/false (apply (lambda (F459a@version-spec*) (values '() (F4591@version-pred F459a@version-spec*))) F4598@ls/false) (let ((F459c@t F4596@t)) (let ((F459e@ls/false (F30f3@syntax-dispatch F459c@t '(any . any)))) (if (and F459e@ls/false (apply (lambda (F45a0@x F45a1@x*) (F44bf@idsyn? F45a0@x)) F459e@ls/false)) (apply (lambda (F45a4@x F45a5@x*) (call-with-values (lambda () (F4594@f F45a5@x*)) (lambda (F45ac@F45a9 F45ad@F45ab) (let ((F45b0@pred F45ad@F45ab) (F45b1@name F45ac@F45a9)) (values (cons (F31d9@syntax->datum F45a4@x) F45b1@name) F45b0@pred))))) F459e@ls/false) (let ((F45b4@t F459c@t)) (let ((F45b6@ls/false (F30f3@syntax-dispatch F45b4@t '()))) (if F45b6@ls/false (apply (lambda () (values '() (lambda (F45b8@x) '#t))) F45b6@ls/false) (let ((F45ba@t F45b4@t)) (let ((F45bc@ls/false (F30f3@syntax-dispatch F45ba@t '_))) (if F45bc@ls/false (apply (lambda () (F31d3@syntax-violation '#f '"invalid import spec" F458a@spec)) F45bc@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F45ba@t)))))))))))))))))) (set! F44cf@import-library (lambda (F457a@spec*) (call-with-values (lambda () (F44cd@parse-library-name F457a@spec*)) (lambda (F4580@F457d F4581@F457f) (let ((F4584@pred F4581@F457f) (F4585@name F4580@F457d)) (begin (if (null? F4585@name) (F31d3@syntax-violation 'import '"empty library name" F457a@spec*) (void)) (let ((F4588@lib (F2cfa@F2b31@find-library-by-name F4585@name))) (begin (if (not F4588@lib) (F31d3@syntax-violation 'import '"cannot find library with required name" F4585@name) (void)) (if (not (F4584@pred (F2cd4@F2ae5@library-version F4588@lib))) (F31d3@syntax-violation 'import '"library does not satisfy version specification" F457a@spec* F4588@lib) (void)) ((F315f@imp-collector) F4588@lib) (F2cdc@F2af5@library-subst F4588@lib))))))))) (set! F44d1@get-import (lambda (F44ec@spec) (let ((F44ee@t F44ec@spec)) (let ((F44f0@ls/false (F30f3@syntax-dispatch F44ee@t '(any . each-any)))) (if (and F44f0@ls/false (apply (lambda (F44f2@x F44f3@x*) (not (memq (F31d9@syntax->datum F44f2@x) '(for rename except only prefix library)))) F44f0@ls/false)) (apply (lambda (F44f6@x F44f7@x*) (F44cf@import-library (cons F44f6@x F44f7@x*))) F44f0@ls/false) (let ((F44fa@t F44ee@t)) (let ((F44fc@ls/false (F30f3@syntax-dispatch F44fa@t '(any any . #(each (any any)))))) (if (and F44fc@ls/false (apply (lambda (F44fe@rename F44ff@isp F4500@old* F4501@new*) (and (eq? (F31d9@syntax->datum F44fe@rename) 'rename) (for-all F44bf@idsyn? F4500@old*) (for-all F44bf@idsyn? F4501@new*))) F44fc@ls/false)) (apply (lambda (F4506@rename F4507@isp F4508@old* F4509@new*) (let ((F450e@subst (F44d1@get-import F4507@isp)) (F450f@old* (map F31d9@syntax->datum F4508@old*)) (F4510@new* (map F31d9@syntax->datum F4509@new*))) (let ((F4514@old-label* (F44c7@find* F450f@old* F450e@subst))) (let ((F4516@subst (F44c9@rem* F450f@old* F450e@subst))) (F44c3@merge-substs (map cons F4510@new* F4514@old-label*) F4516@subst))))) F44fc@ls/false) (let ((F4518@t F44fa@t)) (let ((F451a@ls/false (F30f3@syntax-dispatch F4518@t '(any any . each-any)))) (if (and F451a@ls/false (apply (lambda (F451c@except F451d@isp F451e@sym*) (and (eq? (F31d9@syntax->datum F451c@except) 'except) (for-all F44bf@idsyn? F451e@sym*))) F451a@ls/false)) (apply (lambda (F4522@except F4523@isp F4524@sym*) (let ((F4528@subst (F44d1@get-import F4523@isp))) (F44c9@rem* (map F31d9@syntax->datum F4524@sym*) F4528@subst))) F451a@ls/false) (let ((F452a@t F4518@t)) (let ((F452c@ls/false (F30f3@syntax-dispatch F452a@t '(any any . each-any)))) (if (and F452c@ls/false (apply (lambda (F452e@only F452f@isp F4530@sym*) (and (eq? (F31d9@syntax->datum F452e@only) 'only) (for-all F44bf@idsyn? F4530@sym*))) F452c@ls/false)) (apply (lambda (F4534@only F4535@isp F4536@sym*) (let ((F453a@subst (F44d1@get-import F4535@isp)) (F453b@sym* (map F31d9@syntax->datum F4536@sym*))) (let ((F453e@sym* (F44cb@remove-dups F453b@sym*))) (let ((F4540@lab* (F44c7@find* F453e@sym* F453a@subst))) (map cons F453e@sym* F4540@lab*))))) F452c@ls/false) (let ((F4542@t F452a@t)) (let ((F4544@ls/false (F30f3@syntax-dispatch F4542@t '(any any any)))) (if (and F4544@ls/false (apply (lambda (F4546@prefix F4547@isp F4548@p) (and (eq? (F31d9@syntax->datum F4546@prefix) 'prefix) (F44bf@idsyn? F4548@p))) F4544@ls/false)) (apply (lambda (F454c@prefix F454d@isp F454e@p) (let ((F4552@subst (F44d1@get-import F454d@isp)) (F4553@prefix (symbol->string (F31d9@syntax->datum F454e@p)))) (map (lambda (F4556@x) (cons (string->symbol (string-append F4553@prefix (symbol->string (car F4556@x)))) (cdr F4556@x))) F4552@subst))) F4544@ls/false) (let ((F4558@t F4542@t)) (let ((F455a@ls/false (F30f3@syntax-dispatch F4558@t '(any each-any)))) (if (and F455a@ls/false (apply (lambda (F455c@library F455d@spec*) (eq? (F31d9@syntax->datum F455c@library) 'library)) F455a@ls/false)) (apply (lambda (F4560@library F4561@spec*) (F44cf@import-library F4561@spec*)) F455a@ls/false) (let ((F4564@t F4558@t)) (let ((F4566@ls/false (F30f3@syntax-dispatch F4564@t '(any any . any)))) (if (and F4566@ls/false (apply (lambda (F4568@for F4569@isp F456a@rest) (eq? (F31d9@syntax->datum F4568@for) 'for)) F4566@ls/false)) (apply (lambda (F456e@for F456f@isp F4570@rest) (F44d1@get-import F456f@isp)) F4566@ls/false) (let ((F4574@t F4564@t)) (let ((F4576@ls/false (F30f3@syntax-dispatch F4574@t 'any))) (if F4576@ls/false (apply (lambda (F4578@spec) (F31d3@syntax-violation 'import '"invalid import spec" F4578@spec)) F4576@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4574@t))))))))))))))))))))))))))) (set! F44d3@add-imports! (lambda (F44dc@imp F44dd@h) (let ((F44e0@subst (F44d1@get-import F44dc@imp))) (for-each (lambda (F44e2@x) (let ((F44e4@name (car F44e2@x)) (F44e5@label (cdr F44e2@x))) (let ((F44e8@t (hashtable-ref F44dd@h F44e4@name '#f))) (if F44e8@t ((lambda (F44ea@l) (if (not (eq? F44ea@l F44e5@label)) (F44c1@dup-error F44e4@name) (void))) F44e8@t) (hashtable-set! F44dd@h F44e4@name F44e5@label))))) F44e0@subst)))) (lambda (F44d4@imp*) (let F44da@f ((F44d6@imp* F44d4@imp*) (F44d7@h (make-eq-hashtable))) (if (null? F44d6@imp*) (hashtable-entries F44d7@h) (begin (F44d3@add-imports! (car F44d6@imp*) F44d7@h) (F44da@f (cdr F44d6@imp*) F44d7@h)))))))) (set! F4bf6@F3155@parse-import-spec* F3155@parse-import-spec*) (set! F3157@make-top-rib (lambda (F46ca@names F46cb@labels) (let ((F46ce@rib (F2ea0@make-empty-rib))) (begin (vector-for-each (lambda (F46d0@name F46d1@label) (begin (if (not (symbol? F46d0@name)) (error 'make-top-rib '"BUG: not a symbol" F46d0@name) (void)) (F2ea4@extend-rib/nc! F46ce@rib (make-simple-struct 'stx '5 (list F46d0@name F2e70@top-mark* '() '())) F46d1@label))) F46ca@names F46cb@labels) F46ce@rib)))) (set! F4bf7@F3157@make-top-rib F3157@make-top-rib) (set! F3159@make-collector (lambda () (let ((F46d4@ls '())) (lambda F46d8 (let ((F46d9 (length F46d8))) (if (= F46d9 '0) (apply (lambda () F46d4@ls) F46d8) (if (= F46d9 '1) (apply (lambda (F46d6@x) (set! F46d4@ls (F2e69@set-cons F46d6@x F46d4@ls))) F46d8) (error 'apply '"invalid arg count")))))))) (set! F4bf8@F3159@make-collector F3159@make-collector) (set! F315b@inv-collector (F2a25@F2903@make-parameter (lambda F46da@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (F46dc@x) (begin (if (not (procedure? F46dc@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" F46dc@x) (void)) F46dc@x)))) (set! F4bf9@F315b@inv-collector F315b@inv-collector) (set! F315d@vis-collector (F2a25@F2903@make-parameter (lambda F46de@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (F46e0@x) (begin (if (not (procedure? F46e0@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" F46e0@x) (void)) F46e0@x)))) (set! F4bfa@F315d@vis-collector F315d@vis-collector) (set! F315f@imp-collector (F2a25@F2903@make-parameter (lambda F46e2@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (F46e4@x) (begin (if (not (procedure? F46e4@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" F46e4@x) (void)) F46e4@x)))) (set! F4bfb@F315f@imp-collector F315f@imp-collector) (set! F3161@chi-library-internal (lambda (F46e6@e* F46e7@rib F46e8@top?) (call-with-values (lambda () (F314b@chi-body* F46e6@e* '() '() '() '() '() '() '() F46e7@rib F46e8@top?)) (lambda (F46fc@F46ed F46fd@F46ef F46fe@F46f1 F46ff@F46f3 F4700@F46f5 F4701@F46f7 F4702@F46f9 F4703@F46fb) (let ((F470c@exp* F4703@F46fb) (F470d@_kwd* F4702@F46f9) (F470e@mod** F4701@F46f7) (F470f@rhs* F4700@F46f5) (F4710@lex* F46ff@F46f3) (F4711@mr F46fe@F46f1) (F4712@r F46fd@F46ef) (F4713@e* F46fc@F46ed)) (values (append (apply append (reverse F470e@mod**)) F4713@e*) F4712@r F4711@mr (reverse F4710@lex*) (reverse F470f@rhs*) F470c@exp*)))))) (set! F4bfc@F3161@chi-library-internal F3161@chi-library-internal) (set! F3163@chi-interaction-expr (lambda (F471c@e F471d@rib F471e@r) (call-with-values (lambda () (F314b@chi-body* (list F471c@e) F471e@r F471e@r '() '() '() '() '() F471d@rib '#t)) (lambda (F4732@F4723 F4733@F4725 F4734@F4727 F4735@F4729 F4736@F472b F4737@F472d F4738@F472f F4739@F4731) (let ((F4742@_exp* F4739@F4731) (F4743@_kwd* F4738@F472f) (F4744@mod** F4737@F472d) (F4745@rhs* F4736@F472b) (F4746@lex* F4735@F4729) (F4747@mr F4734@F4727) (F4748@r F4733@F4725) (F4749@e* F4732@F4723)) (let ((F4752@e* (F3123@expand-interaction-rhs*/init* (reverse F4746@lex*) (reverse F4745@rhs*) (append (apply append (reverse F4744@mod**)) F4749@e*) F4748@r F4747@mr))) (let ((F4754@e (if (null? F4752@e*) (F2e52@F2dad@build-void) (if (null? (cdr F4752@e*)) (car F4752@e*) (F2e51@F2dab@build-sequence '#f F4752@e*))))) (values F4754@e F4748@r)))))))) (set! F4bfd@F3163@chi-interaction-expr F3163@chi-interaction-expr) (set! F3165@library-body-expander (lambda (F4756@name F4757@main-exp* F4758@imp* F4759@b* F475a@top?) (let ((F4761@itc '#f)) (begin (set! F4761@itc (F3159@make-collector)) (let ((F476a@F4763 F315f@imp-collector) (F476b@F4765 F31e3@top-level-context) (F476c@F4767 F4761@itc) (F476d@F4769 '#f)) (let ((F4772@swap (lambda () (begin (let ((F4774@t (F476a@F4763))) (begin (F476a@F4763 F476c@F4767) (set! F476c@F4767 F4774@t))) (let ((F4776@t (F476b@F4765))) (begin (F476b@F4765 F476d@F4769) (set! F476d@F4769 F4776@t))))))) (dynamic-wind F4772@swap (lambda () (call-with-values (lambda () (F3155@parse-import-spec* F4758@imp*)) (lambda (F477c@F4779 F477d@F477b) (let ((F4780@subst-labels F477d@F477b) (F4781@subst-names F477c@F4779)) (let ((F4784@rib (F3157@make-top-rib F4781@subst-names F4780@subst-labels))) (let ((F4787@wrap '#f)) (begin (set! F4787@wrap (lambda (F4802@x) (make-simple-struct 'stx '5 (list F4802@x F2e70@top-mark* (list F4784@rib) '())))) (let ((F4788@b* (map F4787@wrap F4759@b*)) (F4789@main-exp* (map F4787@wrap F4757@main-exp*)) (F478a@rtc (F3159@make-collector)) (F478b@vtc (F3159@make-collector))) (let ((F4798@F4791 F315b@inv-collector) (F4799@F4793 F315d@vis-collector) (F479a@F4795 F478a@rtc) (F479b@F4797 F478b@vtc)) (let ((F47a0@swap (lambda () (begin (let ((F47a2@t (F4798@F4791))) (begin (F4798@F4791 F479a@F4795) (set! F479a@F4795 F47a2@t))) (let ((F47a4@t (F4799@F4793))) (begin (F4799@F4793 F479b@F4797) (set! F479b@F4797 F47a4@t))))))) (dynamic-wind F47a0@swap (lambda () (call-with-values (lambda () (F3161@chi-library-internal F4788@b* F4784@rib F475a@top?)) (lambda (F47b2@F47a7 F47b3@F47a9 F47b4@F47ab F47b5@F47ad F47b6@F47af F47b7@F47b1) (let ((F47be@internal-exp* F47b7@F47b1) (F47bf@rhs* F47b6@F47af) (F47c0@lex* F47b5@F47ad) (F47c1@mr F47b4@F47ab) (F47c2@r F47b3@F47a9) (F47c3@init* F47b2@F47a7)) (call-with-values (lambda () (F314f@parse-exports (append F4789@main-exp* F47be@internal-exp*))) (lambda (F47ce@F47cb F47cf@F47cd) (let ((F47d2@exp-id* F47cf@F47cd) (F47d3@exp-name* F47ce@F47cb)) (begin (F2ea8@seal-rib! F4784@rib) (let ((F47d6@init* (F3111@chi-expr* F47c3@init* F47c2@r F47c1@mr))) (let ((F47d8@rhs* (F3125@chi-rhs* F47bf@rhs* F47c2@r F47c1@mr))) (begin (F2eaa@unseal-rib! F4784@rib) (let ((F47da@loc* (map F2e76@gen-global F47c0@lex*)) (F47db@export-subst (F31bd@make-export-subst F47d3@exp-name* F47d2@exp-id*))) (let ((F47df@errstr '#f)) (begin (set! F47df@errstr '"attempt to export mutated variable") (call-with-values (lambda () (F31bf@make-export-env/macros F47c0@lex* F47da@loc* F47c2@r)) (lambda (F47e6@F47e1 F47e7@F47e3 F47e8@F47e5) (let ((F47ec@macro* F47e8@F47e5) (F47ed@global* F47e7@F47e3) (F47ee@export-env F47e6@F47e1)) (begin (for-each (lambda (F47f2@s) (let ((F47f4@name (car F47f2@s)) (F47f5@label (cdr F47f2@s))) (let ((F47f8@p (assq F47f5@label F47ee@export-env))) (if F47f8@p (let ((F47fa@b (cdr F47f8@p))) (let ((F47fc@type (car F47fa@b))) (if (eq? F47fc@type 'mutable) (F31d3@syntax-violation 'export F47df@errstr F47f4@name) (void)))) (void))))) F47db@export-subst) (let ((F47fe@invoke-body (F2e57@F2db7@build-library-letrec* '#f F4756@name F47c0@lex* F47da@loc* F47d8@rhs* (if (null? F47d6@init*) (F2e52@F2dad@build-void) (F2e51@F2dab@build-sequence '#f F47d6@init*)))) (F47ff@invoke-definitions (map F2e4e@F2d0a@build-global-define (map cdr F47ed@global*)))) (values (F4761@itc) (F478a@rtc) (F478b@vtc) (F2e51@F2dab@build-sequence '#f (append F47ff@invoke-definitions (list F47fe@invoke-body))) F47ec@macro* F47db@export-subst F47ee@export-env)))))))))))))))))))) F47a0@swap))))))))))) F4772@swap))))))) (set! F4bfe@F3165@library-body-expander F3165@library-body-expander) (set! F3167@core-library-expander (lambda (F4804@e F4805@verify-name) (call-with-values (lambda () (F3153@parse-library F4804@e)) (lambda (F4810@F4809 F4811@F480b F4812@F480d F4813@F480f) (let ((F4818@b* F4813@F480f) (F4819@imp* F4812@F480d) (F481a@exp* F4811@F480b) (F481b@name* F4810@F4809)) (call-with-values (lambda () (F3151@parse-library-name F481b@name*)) (lambda (F4824@F4821 F4825@F4823) (let ((F4828@ver F4825@F4823) (F4829@name F4824@F4821)) (begin (F4805@verify-name F4829@name) (call-with-values (lambda () (F3165@library-body-expander F4829@name F481a@exp* F4819@imp* F4818@b* '#f)) (lambda (F483a@F482d F483b@F482f F483c@F4831 F483d@F4833 F483e@F4835 F483f@F4837 F4840@F4839) (let ((F4848@export-env F4840@F4839) (F4849@export-subst F483f@F4837) (F484a@visit-code F483e@F4835) (F484b@invoke-code F483d@F4833) (F484c@visit-req* F483c@F4831) (F484d@invoke-req* F483b@F482f) (F484e@imp* F483a@F482d)) (values F4829@name F4828@ver F484e@imp* F484d@invoke-req* F484c@visit-req* F484b@invoke-code F484a@visit-code F4849@export-subst F4848@export-env))))))))))))) (set! F4bff@F3167@core-library-expander F3167@core-library-expander) (set! F3169@parse-top-level-program (lambda (F4856@e*) (let ((F4858@t F4856@e*)) (let ((F485a@ls/false (F30f3@syntax-dispatch F4858@t '((any . each-any) . each-any)))) (if (and F485a@ls/false (apply (lambda (F485c@import F485d@imp* F485e@b*) (eq? (F31d9@syntax->datum F485c@import) 'import)) F485a@ls/false)) (apply (lambda (F4862@import F4863@imp* F4864@b*) (values F4863@imp* F4864@b*)) F485a@ls/false) (let ((F4868@t F4858@t)) (let ((F486a@ls/false (F30f3@syntax-dispatch F4868@t '((any . any) . any)))) (if (and F486a@ls/false (apply (lambda (F486c@import F486d@x F486e@y) (eq? (F31d9@syntax->datum F486c@import) 'import)) F486a@ls/false)) (apply (lambda (F4872@import F4873@x F4874@y) (F31d3@syntax-violation 'expander '"invalid syntax of top-level program" (F2ee6@syntax-car F4856@e*))) F486a@ls/false) (let ((F4878@t F4868@t)) (let ((F487a@ls/false (F30f3@syntax-dispatch F4878@t '_))) (if F487a@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) F487a@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4878@t)))))))))))) (set! F4c00@F3169@parse-top-level-program F3169@parse-top-level-program) (set! F316b@top-level-expander (lambda (F487c@e*) (call-with-values (lambda () (F3169@parse-top-level-program F487c@e*)) (lambda (F4882@F487f F4883@F4881) (let ((F4886@b* F4883@F4881) (F4887@imp* F4882@F487f)) (call-with-values (lambda () (F3165@library-body-expander '() '() F4887@imp* F4886@b* '#t)) (lambda (F4898@F488b F4899@F488d F489a@F488f F489b@F4891 F489c@F4893 F489d@F4895 F489e@F4897) (let ((F48a6@export-env F489e@F4897) (F48a7@export-subst F489d@F4895) (F48a8@visit-code F489c@F4893) (F48a9@invoke-code F489b@F4891) (F48aa@visit-req* F489a@F488f) (F48ab@invoke-req* F4899@F488d) (F48ac@imp* F4898@F488b)) (values F48ab@invoke-req* F48a9@invoke-code))))))))) (set! F4c01@F316b@top-level-expander F316b@top-level-expander) (set! F316d@rp (F2a22@F28fd@make-record-printer 'env (lambda (F48b4@x F48b5@p F48b6@wr) (display '"#<environment>" F48b5@p)))) (set! F4c02@F316d@rp F316d@rp) (set! F3177@env? (lambda (F48ba@x) (and (simple-struct? F48ba@x) (eq? (simple-struct-name F48ba@x) 'env)))) (set! F4c03@F3177@env? F3177@env?) (set! F3179@env-names (lambda (F48bc@x) (simple-struct-ref F48bc@x '0))) (set! F4c04@F3179@env-names F3179@env-names) (set! F317b@set-env-names! (lambda (F48be@x F48bf@val) (simple-struct-set! F48be@x '0 F48bf@val))) (set! F4c05@F317b@set-env-names! F317b@set-env-names!) (set! F317d@env-labels (lambda (F48c2@x) (simple-struct-ref F48c2@x '1))) (set! F4c06@F317d@env-labels F317d@env-labels) (set! F317f@set-env-labels! (lambda (F48c4@x F48c5@val) (simple-struct-set! F48c4@x '1 F48c5@val))) (set! F4c07@F317f@set-env-labels! F317f@set-env-labels!) (set! F3181@env-itc (lambda (F48c8@x) (simple-struct-ref F48c8@x '2))) (set! F4c08@F3181@env-itc F3181@env-itc) (set! F3183@set-env-itc! (lambda (F48ca@x F48cb@val) (simple-struct-set! F48ca@x '2 F48cb@val))) (set! F4c09@F3183@set-env-itc! F3183@set-env-itc!) (set! F3185@dummy '3) (set! F4c0a@F3185@dummy F3185@dummy) (set! F3187@rp (F2a22@F28fd@make-record-printer 'interaction-env (lambda (F48ce@x F48cf@p F48d0@wr) (display '"#<environment>" F48cf@p)))) (set! F4c0b@F3187@rp F3187@rp) (set! F3191@interaction-env? (lambda (F48d4@x) (and (simple-struct? F48d4@x) (eq? (simple-struct-name F48d4@x) 'interaction-env)))) (set! F4c0c@F3191@interaction-env? F3191@interaction-env?) (set! F3193@interaction-env-rib (lambda (F48d6@x) (simple-struct-ref F48d6@x '0))) (set! F4c0d@F3193@interaction-env-rib F3193@interaction-env-rib) (set! F3195@set-interaction-env-rib! (lambda (F48d8@x F48d9@val) (simple-struct-set! F48d8@x '0 F48d9@val))) (set! F4c0e@F3195@set-interaction-env-rib! F3195@set-interaction-env-rib!) (set! F3197@interaction-env-r (lambda (F48dc@x) (simple-struct-ref F48dc@x '1))) (set! F4c0f@F3197@interaction-env-r F3197@interaction-env-r) (set! F3199@set-interaction-env-r! (lambda (F48de@x F48df@val) (simple-struct-set! F48de@x '1 F48df@val))) (set! F4c10@F3199@set-interaction-env-r! F3199@set-interaction-env-r!) (set! F319b@interaction-env-locs (lambda (F48e2@x) (simple-struct-ref F48e2@x '2))) (set! F4c11@F319b@interaction-env-locs F319b@interaction-env-locs) (set! F319d@set-interaction-env-locs! (lambda (F48e4@x F48e5@val) (simple-struct-set! F48e4@x '2 F48e5@val))) (set! F4c12@F319d@set-interaction-env-locs! F319d@set-interaction-env-locs!) (set! F319f@dummy '3) (set! F4c13@F319f@dummy F319f@dummy) (set! F31a1@interaction-environment-symbols (lambda () (F31a9@environment-symbols (F31e1@interaction-environment)))) (set! F4c14@F31a1@interaction-environment-symbols F31a1@interaction-environment-symbols) (set! F31a3@environment-bindings (lambda (F48e8@e) (vector->list (vector-map (lambda (F48ea@name F48eb@label) (F31a5@parse-binding (cons F48ea@name (F2d00@F2b3d@imported-label->binding F48eb@label)))) (F3179@env-names F48e8@e) (F317d@env-labels F48e8@e))))) (set! F4c15@F31a3@environment-bindings F31a3@environment-bindings) (set! F31a5@parse-binding (lambda (F48ee@b) (cons (car F48ee@b) (let ((F48f0@t (cadr F48ee@b))) (if (memv F48f0@t '(core-prim global)) 'procedure (if (memv F48f0@t '(core-macro macro global-macro)) 'syntax (if (memv F48f0@t '($core-rtd)) 'record (if (eq? (car F48ee@b) (cadr F48ee@b)) 'syntax 'unknown)))))))) (set! F4c16@F31a5@parse-binding F31a5@parse-binding) (set! F31a7@environment? (lambda (F48f2@x) (or (F3177@env? F48f2@x) (F3191@interaction-env? F48f2@x)))) (set! F4c17@F31a7@environment? F31a7@environment?) (set! F31a9@environment-symbols (lambda (F48f4@x) (if (F3177@env? F48f4@x) (vector->list (F3179@env-names F48f4@x)) (if (F3191@interaction-env? F48f4@x) (map values (F2e8a@rib-sym* (F3193@interaction-env-rib F48f4@x))) (assertion-violation 'environment-symbols '"not an environment" F48f4@x))))) (set! F4c18@F31a9@environment-symbols F31a9@environment-symbols) (set! F31ab@environment (lambda F48f6@imp* (let ((F48f8@itc (F3159@make-collector))) (let ((F48fe@F48fb F315f@imp-collector) (F48ff@F48fd F48f8@itc)) (let ((F4902@swap (lambda () (let ((F4904@t (F48fe@F48fb))) (begin (F48fe@F48fb F48ff@F48fd) (set! F48ff@F48fd F4904@t)))))) (dynamic-wind F4902@swap (lambda () (call-with-values (lambda () (F3155@parse-import-spec* F48f6@imp*)) (lambda (F490a@F4907 F490b@F4909) (let ((F490e@subst-labels F490b@F4909) (F490f@subst-names F490a@F4907)) (make-simple-struct 'env '4 (list F490f@subst-names F490e@subst-labels F48f8@itc)))))) F4902@swap)))))) (set! F4c19@F31ab@environment F31ab@environment) (set! F31ad@null-environment (lambda (F4912@n) (begin (if (not (eqv? F4912@n '5)) (assertion-violation 'null-environment '"not 5" F4912@n) (void)) (F31ab@environment '(psyntax null-environment-5))))) (set! F4c1a@F31ad@null-environment F31ad@null-environment) (set! F31af@scheme-report-environment (lambda (F4914@n) (begin (if (not (eqv? F4914@n '5)) (assertion-violation 'scheme-report-environment '"not 5" F4914@n) (void)) (F31ab@environment '(psyntax scheme-report-environment-5))))) (set! F4c1b@F31af@scheme-report-environment F31af@scheme-report-environment) (set! F31b1@expand (lambda (F4916@x F4917@env) (if (F3177@env? F4917@env) (let ((F491a@rib (F3157@make-top-rib (F3179@env-names F4917@env) (F317d@env-labels F4917@env)))) (let ((F491c@x (make-simple-struct 'stx '5 (list F4916@x F2e70@top-mark* (list F491a@rib) '()))) (F491d@itc (F3181@env-itc F4917@env)) (F491e@rtc (F3159@make-collector)) (F491f@vtc (F3159@make-collector))) (let ((F4924@x (let ((F4936@F4927 F31e3@top-level-context) (F4937@F4929 F315b@inv-collector) (F4938@F492b F315d@vis-collector) (F4939@F492d F315f@imp-collector) (F493a@F492f '#f) (F493b@F4931 F491e@rtc) (F493c@F4933 F491f@vtc) (F493d@F4935 F491d@itc)) (let ((F4946@swap (lambda () (begin (let ((F4948@t (F4936@F4927))) (begin (F4936@F4927 F493a@F492f) (set! F493a@F492f F4948@t))) (let ((F494a@t (F4937@F4929))) (begin (F4937@F4929 F493b@F4931) (set! F493b@F4931 F494a@t))) (let ((F494c@t (F4938@F492b))) (begin (F4938@F492b F493c@F4933) (set! F493c@F4933 F494c@t))) (let ((F494e@t (F4939@F492d))) (begin (F4939@F492d F493d@F4935) (set! F493d@F4935 F494e@t))))))) (dynamic-wind F4946@swap (lambda () (F3115@chi-expr F491c@x '() '())) F4946@swap))))) (begin (F2ea8@seal-rib! F491a@rib) (values F4924@x (F491e@rtc)))))) (if (F3191@interaction-env? F4917@env) (let ((F4950@rib (F3193@interaction-env-rib F4917@env)) (F4951@r (F3197@interaction-env-r F4917@env)) (F4952@rtc (F3159@make-collector))) (let ((F4956@x (make-simple-struct 'stx '5 (list F4916@x F2e70@top-mark* (list F4950@rib) '())))) (call-with-values (lambda () (let ((F496c@F495d F31e3@top-level-context) (F496d@F495f F315b@inv-collector) (F496e@F4961 F315d@vis-collector) (F496f@F4963 F315f@imp-collector) (F4970@F4965 F4917@env) (F4971@F4967 F4952@rtc) (F4972@F4969 (F3159@make-collector)) (F4973@F496b (F3159@make-collector))) (let ((F497c@swap (lambda () (begin (let ((F497e@t (F496c@F495d))) (begin (F496c@F495d F4970@F4965) (set! F4970@F4965 F497e@t))) (let ((F4980@t (F496d@F495f))) (begin (F496d@F495f F4971@F4967) (set! F4971@F4967 F4980@t))) (let ((F4982@t (F496e@F4961))) (begin (F496e@F4961 F4972@F4969) (set! F4972@F4969 F4982@t))) (let ((F4984@t (F496f@F4963))) (begin (F496f@F4963 F4973@F496b) (set! F4973@F496b F4984@t))))))) (dynamic-wind F497c@swap (lambda () (F3163@chi-interaction-expr F4956@x F4950@rib F4951@r)) F497c@swap)))) (lambda (F4986@F4959 F4987@F495b) (let ((F498a@r^ F4987@F495b) (F498b@e F4986@F4959)) (begin (F3199@set-interaction-env-r! F4917@env F498a@r^) (values F498b@e (F4952@rtc)))))))) (assertion-violation 'expand '"not an environment" F4917@env))))) (set! F4c1c@F31b1@expand F31b1@expand) (set! F31b3@eval (lambda (F498e@x F498f@env) (begin (if (not (F31a7@environment? F498f@env)) (error 'eval '"not an environment" F498f@env) (void)) (call-with-values (lambda () (F31b1@expand F498e@x F498f@env)) (lambda (F4996@F4993 F4997@F4995) (let ((F499a@invoke-req* F4997@F4995) (F499b@x F4996@F4993)) (begin (for-each F2d01@F2b3f@invoke-library F499a@invoke-req*) (eval-core (F2a7b@F2a33@expanded->core F499b@x))))))))) (set! F4c1d@F31b3@eval F31b3@eval) (set! F31b5@library-expander (lambda F4a0c (let ((F4a0d (length F4a0c))) (if (= F4a0d '3) (apply (lambda (F499e@x F499f@filename F49a0@verify-name) (let ((F49a5@build-visit-code '#f) (F49a7@visit! '#f)) (begin (set! F49a5@build-visit-code (lambda (F49fa@macro*) (if (null? F49fa@macro*) (F2e52@F2dad@build-void) (F2e51@F2dab@build-sequence '#f (map (lambda (F49fc@x) (let ((F49fe@loc (car F49fc@x)) (F49ff@src (cddr F49fc@x))) (list 'set! F49fe@loc F49ff@src))) F49fa@macro*))))) (set! F49a7@visit! (lambda (F49f2@macro*) (for-each (lambda (F49f4@x) (let ((F49f6@loc (car F49f4@x)) (F49f7@proc (cadr F49f4@x))) (set-symbol-value! F49f6@loc F49f7@proc))) F49f2@macro*))) (call-with-values (lambda () (F3167@core-library-expander F499e@x F49a0@verify-name)) (lambda (F49ba@F49a9 F49bb@F49ab F49bc@F49ad F49bd@F49af F49be@F49b1 F49bf@F49b3 F49c0@F49b5 F49c1@F49b7 F49c2@F49b9) (let ((F49cc@export-env F49c2@F49b9) (F49cd@export-subst F49c1@F49b7) (F49ce@macro* F49c0@F49b5) (F49cf@invoke-code F49bf@F49b3) (F49d0@vis* F49be@F49b1) (F49d1@inv* F49bd@F49af) (F49d2@imp* F49bc@F49ad) (F49d3@ver F49bb@F49ab) (F49d4@name F49ba@F49a9)) (let ((F49de@id (gensym)) (F49df@name F49d4@name) (F49e0@ver F49d3@ver) (F49e1@imp* (map F2d06@F2b49@library-spec F49d2@imp*)) (F49e2@vis* (map F2d06@F2b49@library-spec F49d0@vis*)) (F49e3@inv* (map F2d06@F2b49@library-spec F49d1@inv*)) (F49e4@visit-proc (lambda () (F49a7@visit! F49ce@macro*))) (F49e5@invoke-proc (lambda () (eval-core (F2a7b@F2a33@expanded->core F49cf@invoke-code)))) (F49e6@visit-code (F49a5@build-visit-code F49ce@macro*)) (F49e7@invoke-code F49cf@invoke-code)) (begin (F2cff@F2b3b@install-library F49de@id F49df@name F49e0@ver F49e1@imp* F49e2@vis* F49e3@inv* F49cd@export-subst F49cc@export-env F49e4@visit-proc F49e5@invoke-proc F49e6@visit-code F49e7@invoke-code '#t F499f@filename) (values F49de@id F49df@name F49e0@ver F49e1@imp* F49e2@vis* F49e3@inv* F49e7@invoke-code F49e6@visit-code F49cd@export-subst F49cc@export-env))))))))) F4a0c) (if (= F4a0d '2) (apply (lambda (F4a02@x F4a03@filename) (F31b5@library-expander F4a02@x F4a03@filename (lambda (F4a06@x) (values)))) F4a0c) (if (= F4a0d '1) (apply (lambda (F4a08@x) (F31b5@library-expander F4a08@x '#f (lambda (F4a0a@x) (values)))) F4a0c) (error 'apply '"invalid arg count"))))))) (set! F4c1e@F31b5@library-expander F31b5@library-expander) (set! F31b7@boot-library-expand (lambda (F4a0e@x) (call-with-values (lambda () (F31b5@library-expander F4a0e@x)) (lambda (F4a24@F4a11 F4a25@F4a13 F4a26@F4a15 F4a27@F4a17 F4a28@F4a19 F4a29@F4a1b F4a2a@F4a1d F4a2b@F4a1f F4a2c@F4a21 F4a2d@F4a23) (let ((F4a38@export-env F4a2d@F4a23) (F4a39@export-subst F4a2c@F4a21) (F4a3a@visit-code F4a2b@F4a1f) (F4a3b@invoke-code F4a2a@F4a1d) (F4a3c@inv* F4a29@F4a1b) (F4a3d@vis* F4a28@F4a19) (F4a3e@imp* F4a27@F4a17) (F4a3f@ver F4a26@F4a15) (F4a40@name F4a25@F4a13) (F4a41@id F4a24@F4a11)) (values F4a40@name F4a3b@invoke-code F4a39@export-subst F4a38@export-env)))))) (set! F4c1f@F31b7@boot-library-expand F31b7@boot-library-expand) (set! F31b9@rev-map-append (lambda (F4a4c@f F4a4d@ls F4a4e@ac) (if (null? F4a4d@ls) F4a4e@ac (F31b9@rev-map-append F4a4c@f (cdr F4a4d@ls) (cons (F4a4c@f (car F4a4d@ls)) F4a4e@ac))))) (set! F4c20@F31b9@rev-map-append F31b9@rev-map-append) (set! F31bb@build-exports (lambda (F4a52@lex*+loc* F4a53@init*) (F2e51@F2dab@build-sequence '#f (cons (F2e52@F2dad@build-void) (F31b9@rev-map-append (lambda (F4a56@x) (list 'set! (cdr F4a56@x) (car F4a56@x))) F4a52@lex*+loc* F4a53@init*))))) (set! F4c21@F31bb@build-exports F31bb@build-exports) (set! F31bd@make-export-subst (lambda (F4a58@name* F4a59@id*) (map (lambda (F4a5c@name F4a5d@id) (let ((F4a60@label (F2f02@id->label F4a5d@id))) (begin (if (not F4a60@label) (F31d3@syntax-violation '#f '"cannot export unbound identifier" F4a5d@id) (void)) (cons F4a5c@name F4a60@label)))) F4a58@name* F4a59@id*))) (set! F4c22@F31bd@make-export-subst F31bd@make-export-subst) (set! F31bf@make-export-env/macros (lambda (F4a62@lex* F4a63@loc* F4a64@r) (let ((F4a69@lookup '#f)) (begin (set! F4a69@lookup (lambda (F4a86@x) (let F4a8e@f ((F4a88@x F4a86@x) (F4a89@lex* F4a62@lex*) (F4a8a@loc* F4a63@loc*)) (if (pair? F4a89@lex*) (if (eq? F4a88@x (car F4a89@lex*)) (car F4a8a@loc*) (F4a8e@f F4a88@x (cdr F4a89@lex*) (cdr F4a8a@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let F4a72@f ((F4a6a@r F4a64@r) (F4a6b@env '()) (F4a6c@global* '()) (F4a6d@macro* '())) (if (null? F4a6a@r) (values F4a6b@env F4a6c@global* F4a6d@macro*) (let ((F4a74@x (car F4a6a@r))) (let ((F4a76@label (car F4a74@x)) (F4a77@b (cdr F4a74@x))) (let ((F4a7a@t (F2f08@binding-type F4a77@b))) (if (memv F4a7a@t '(lexical)) (let ((F4a7c@v (F2f0a@binding-value F4a77@b))) (let ((F4a7e@loc (F4a69@lookup (F307d@lexical-var F4a7c@v))) (F4a7f@type (if (F307f@lexical-mutable? F4a7c@v) 'mutable 'global))) (F4a72@f (cdr F4a6a@r) (cons (cons* F4a76@label F4a7f@type F4a7e@loc) F4a6b@env) (cons (cons (F307d@lexical-var F4a7c@v) F4a7e@loc) F4a6c@global*) F4a6d@macro*))) (if (memv F4a7a@t '(local-macro)) (let ((F4a82@loc (gensym))) (F4a72@f (cdr F4a6a@r) (cons (cons* F4a76@label 'global-macro F4a82@loc) F4a6b@env) F4a6c@global* (cons (cons F4a82@loc (F2f0a@binding-value F4a77@b)) F4a6d@macro*))) (if (memv F4a7a@t '(local-macro!)) (let ((F4a84@loc (gensym))) (F4a72@f (cdr F4a6a@r) (cons (cons* F4a76@label 'global-macro! F4a84@loc) F4a6b@env) F4a6c@global* (cons (cons F4a84@loc (F2f0a@binding-value F4a77@b)) F4a6d@macro*))) (if (memv F4a7a@t '($rtd $module)) (F4a72@f (cdr F4a6a@r) (cons F4a74@x F4a6b@env) F4a6c@global* F4a6d@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (F2f08@binding-type F4a77@b) (F2f0a@binding-value F4a77@b))))))))))))))) (set! F4c23@F31bf@make-export-env/macros F31bf@make-export-env/macros) (set! F31c1@generate-temporaries (lambda (F4a90@ls) (let ((F4a92@t F4a90@ls)) (let ((F4a94@ls/false (F30f3@syntax-dispatch F4a92@t 'each-any))) (if F4a94@ls/false (apply (lambda (F4a96@ls) (map (lambda (F4a98@x) (make-simple-struct 'stx '5 (list (let ((F4a9a@x (F31d9@syntax->datum F4a98@x))) (if (or (symbol? F4a9a@x) (string? F4a9a@x)) (gensym F4a9a@x) (gensym 't))) F2e70@top-mark* '() '()))) F4a96@ls)) F4a94@ls/false) (let ((F4a9c@t F4a92@t)) (let ((F4a9e@ls/false (F30f3@syntax-dispatch F4a9c@t '_))) (if F4a9e@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) F4a9e@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4a9c@t))))))))) (set! F4c24@F31c1@generate-temporaries F31c1@generate-temporaries) (set! F31c3@free-identifier=? (lambda (F4aa0@x F4aa1@y) (if (F2eec@id? F4aa0@x) (if (F2eec@id? F4aa1@y) (F2ef2@free-id=? F4aa0@x F4aa1@y) (assertion-violation 'free-identifier=? '"not an identifier" F4aa1@y)) (assertion-violation 'free-identifier=? '"not an identifier" F4aa0@x)))) (set! F4c25@F31c3@free-identifier=? F31c3@free-identifier=?) (set! F31c5@bound-identifier=? (lambda (F4aa4@x F4aa5@y) (if (F2eec@id? F4aa4@x) (if (F2eec@id? F4aa5@y) (F2ef0@bound-id=? F4aa4@x F4aa5@y) (assertion-violation 'bound-identifier=? '"not an identifier" F4aa5@y)) (assertion-violation 'bound-identifier=? '"not an identifier" F4aa4@x)))) (set! F4c26@F31c5@bound-identifier=? F31c5@bound-identifier=?) (set! F31c7@make-source-condition (lambda (F4aa8@x) (let ((F4ab2@F4aad '#f) (F4ab4@F4aaf '#f) (F4ab6@F4aae '#f) (F4ab9@F4aac '#f) (F4abb@make-source-condition '#f) (F4abd@F4aaa '#f) (F4abf@F4aab '#f) (F4ac1@source-condition? '#f) (F4ac3@source-filename '#f) (F4ac5@source-character '#f)) (begin (set! F4ab2@F4aad (make-record-type-descriptor '&source-information F4f08@F4c4f@&condition-rtd 'F4ab0 '#f '#f '#((immutable file-name) (immutable character)))) (set! F4ab4@F4aaf '#f) (set! F4ab6@F4aae (make-record-constructor-descriptor F4ab2@F4aad F4f09@F4c51@&condition-rcd F4ab4@F4aaf)) (set! F4ab9@F4aac (record-predicate F4ab2@F4aad)) (set! F4abb@make-source-condition (record-constructor F4ab6@F4aae)) (set! F4abd@F4aaa (record-accessor F4ab2@F4aad '0)) (set! F4abf@F4aab (record-accessor F4ab2@F4aad '1)) (set! F4ac1@source-condition? (condition-predicate F4ab2@F4aad)) (set! F4ac3@source-filename (condition-accessor F4ab2@F4aad F4abd@F4aaa)) (set! F4ac5@source-character (condition-accessor F4ab2@F4aad F4abf@F4aab)) (if (pair? F4aa8@x) (F4abb@make-source-condition (car F4aa8@x) (cdr F4aa8@x)) (condition)))))) (set! F4c27@F31c7@make-source-condition F31c7@make-source-condition) (set! F31c9@extract-position-condition (lambda (F4ac6@x) (F31c7@make-source-condition (F31cb@expression-position F4ac6@x)))) (set! F4c28@F31c9@extract-position-condition F31c9@extract-position-condition) (set! F31cb@expression-position (lambda (F4ac8@x) (and (F2eb8@stx? F4ac8@x) (let ((F4aca@x (F2eba@stx-expr F4ac8@x))) (and (F2a19@F28eb@annotation? F4aca@x) (F2a1a@F28ed@annotation-source F4aca@x)))))) (set! F4c29@F31cb@expression-position F31cb@expression-position) (set! F31cd@assertion-error (lambda (F4acc@expr F4acd@pos) (raise (condition (F4f38@F4d13@make-assertion-violation) (F4f4a@F4d45@make-who-condition 'assert) (F4f0e@F4ca6@make-message-condition '"assertion failed") (F4f40@F4d2a@make-irritants-condition (list F4acc@expr)) (F31c7@make-source-condition F4acd@pos))))) (set! F4c2a@F31cd@assertion-error F31cd@assertion-error) (set! F31cf@syntax-error (lambda (F4ad0@x . F4ad2@args) (begin (if (not (for-all string? F4ad2@args)) (assertion-violation 'syntax-error '"invalid argument" F4ad2@args) (void)) (raise (condition (F4f0e@F4ca6@make-message-condition (if (null? F4ad2@args) '"invalid syntax" (apply string-append F4ad2@args))) (F4f6c@F4da1@make-syntax-violation (F31d9@syntax->datum F4ad0@x) '#f) (F31c9@extract-position-condition F4ad0@x)))))) (set! F4c2b@F31cf@syntax-error F31cf@syntax-error) (set! F31d1@syntax-violation* (lambda (F4ad4@who F4ad5@msg F4ad6@form F4ad7@condition-object) (begin (if (not (string? F4ad5@msg)) (assertion-violation 'syntax-violation '"message is not a string" F4ad5@msg) (void)) (let ((F4adc@who (if (or (string? F4ad4@who) (symbol? F4ad4@who)) F4ad4@who (if (not F4ad4@who) (let ((F4ade@t F4ad6@form)) (let ((F4ae0@ls/false (F30f3@syntax-dispatch F4ade@t 'any))) (if (and F4ae0@ls/false (apply (lambda (F4ae2@id) (F2eec@id? F4ae2@id)) F4ae0@ls/false)) (apply (lambda (F4ae4@id) (F31d9@syntax->datum F4ae4@id)) F4ae0@ls/false) (let ((F4ae6@t F4ade@t)) (let ((F4ae8@ls/false (F30f3@syntax-dispatch F4ae6@t '(any . any)))) (if (and F4ae8@ls/false (apply (lambda (F4aea@id F4aeb@rest) (F2eec@id? F4aea@id)) F4ae8@ls/false)) (apply (lambda (F4aee@id F4aef@rest) (F31d9@syntax->datum F4aee@id)) F4ae8@ls/false) (let ((F4af2@t F4ae6@t)) (let ((F4af4@ls/false (F30f3@syntax-dispatch F4af2@t '_))) (if F4af4@ls/false (apply (lambda () '#f) F4af4@ls/false) (F31d3@syntax-violation '#f '"invalid syntax" F4af2@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" F4ad4@who))))) (raise (condition (if F4adc@who (F4f4a@F4d45@make-who-condition F4adc@who) (condition)) (F4f0e@F4ca6@make-message-condition F4ad5@msg) F4ad7@condition-object (F31c9@extract-position-condition F4ad6@form))))))) (set! F4c2c@F31d1@syntax-violation* F31d1@syntax-violation*) (set! F31d3@syntax-violation (lambda F4b04 (let ((F4b05 (length F4b04))) (if (= F4b05 '3) (apply (lambda (F4af6@who F4af7@msg F4af8@form) (F31d3@syntax-violation F4af6@who F4af7@msg F4af8@form '#f)) F4b04) (if (= F4b05 '4) (apply (lambda (F4afc@who F4afd@msg F4afe@form F4aff@subform) (F31d1@syntax-violation* F4afc@who F4afd@msg F4afe@form (F4f6c@F4da1@make-syntax-violation (F31d9@syntax->datum F4afe@form) (F31d9@syntax->datum F4aff@subform)))) F4b04) (error 'apply '"invalid arg count")))))) (set! F4c2d@F31d3@syntax-violation F31d3@syntax-violation) (set! F31d5@identifier? (lambda (F4b06@x) (F2eec@id? F4b06@x))) (set! F4c2e@F31d5@identifier? F31d5@identifier?) (set! F31d7@datum->syntax (lambda (F4b08@id F4b09@datum) (if (F2eec@id? F4b08@id) (F2ecc@datum->stx F4b08@id F4b09@datum) (assertion-violation 'datum->syntax '"not an identifier" F4b08@id)))) (set! F4c2f@F31d7@datum->syntax F31d7@datum->syntax) (set! F31d9@syntax->datum (lambda (F4b0c@x) (F2f00@stx->datum F4b0c@x))) (set! F4c30@F31d9@syntax->datum F31d9@syntax->datum) (set! F31db@ungensym-all (lambda (F4b0e@code) (if (pair? F4b0e@code) (cons (F31db@ungensym-all (car F4b0e@code)) (F31db@ungensym-all (cdr F4b0e@code))) (if (symbol? F4b0e@code) (ungensym F4b0e@code) F4b0e@code)))) (set! F4c31@F31db@ungensym-all F31db@ungensym-all) (set! F31dd@compile-r6rs-top-level (lambda (F4b10@x*) (call-with-values (lambda () (F316b@top-level-expander F4b10@x*)) (lambda (F4b16@F4b13 F4b17@F4b15) (let ((F4b1a@invoke-code F4b17@F4b15) (F4b1b@lib* F4b16@F4b13)) (lambda () (begin (for-each F2d01@F2b3f@invoke-library F4b1b@lib*) (let ((F4b1e@expanded (F2a7b@F2a33@expanded->core F4b1a@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (F31db@ungensym-all F4b1e@expanded)) (void)) (eval-core F4b1e@expanded)))))))))) (set! F4c32@F31dd@compile-r6rs-top-level F31dd@compile-r6rs-top-level) (set! F31df@pre-compile-r6rs-top-level (lambda (F4b20@x*) (call-with-values (lambda () (F316b@top-level-expander F4b20@x*)) (lambda (F4b26@F4b23 F4b27@F4b25) (let ((F4b2a@invoke-code F4b27@F4b25) (F4b2b@lib* F4b26@F4b23)) (begin (for-each F2d01@F2b3f@invoke-library F4b2b@lib*) (F2a23@F28ff@compile-core (F2a7b@F2a33@expanded->core F4b2a@invoke-code)))))))) (set! F4c33@F31df@pre-compile-r6rs-top-level F31df@pre-compile-r6rs-top-level) (set! F31e1@interaction-environment (let ((F4b2e@the-env '#f)) (lambda () (or F4b2e@the-env (let ((F4b30@lib (F2cfa@F2b31@find-library-by-name '(mosh interaction))) (F4b31@rib (F2ea0@make-empty-rib))) (begin (let ((F4b34@subst (F2cdc@F2af5@library-subst F4b30@lib))) (begin (F2e8c@set-rib-sym*! F4b31@rib (map car F4b34@subst)) (F2e90@set-rib-mark**! F4b31@rib (map (lambda (F4b36@x) F2e70@top-mark*) F4b34@subst)) (F2e94@set-rib-label*! F4b31@rib (map cdr F4b34@subst)))) (let ((F4b38@env (make-simple-struct 'interaction-env '4 (list F4b31@rib '() '())))) (begin (set! F4b2e@the-env F4b38@env) F4b38@env)))))))) (set! F4c34@F31e1@interaction-environment F31e1@interaction-environment) (set! F31e3@top-level-context (F2a25@F2903@make-parameter '#f)) (set! F4c35@F31e3@top-level-context F31e3@top-level-context) (F2cf7@F2b2b@current-library-expander F31b5@library-expander))
(begin (set! F4c44@F4c3f (unspecified)) (set! F4c46@F4c41 (unspecified)) (set! F4c48@F4c40 (unspecified)) (set! F4c4b@&condition? (unspecified)) (set! F4c4d@make-&condition (unspecified)) (set! F4c4f@&condition-rtd (unspecified)) (set! F4c51@&condition-rcd (unspecified)) (set! F4c9d@F4c98 (unspecified)) (set! F4c9f@F4c9a (unspecified)) (set! F4ca1@F4c99 (unspecified)) (set! F4ca4@p? (unspecified)) (set! F4ca6@make-message-condition (unspecified)) (set! F4ca8@F4c97 (unspecified)) (set! F4caa@message-condition? (unspecified)) (set! F4cac@condition-message (unspecified)) (set! F4cae@&message-rtd (unspecified)) (set! F4cb0@&message-rcd (unspecified)) (set! F4cb6@F4cb1 (unspecified)) (set! F4cb8@F4cb3 (unspecified)) (set! F4cba@F4cb2 (unspecified)) (set! F4cbd@p? (unspecified)) (set! F4cbf@make-warning (unspecified)) (set! F4cc1@warning? (unspecified)) (set! F4cc3@&warning-rtd (unspecified)) (set! F4cc5@&warning-rcd (unspecified)) (set! F4ccb@F4cc6 (unspecified)) (set! F4ccd@F4cc8 (unspecified)) (set! F4ccf@F4cc7 (unspecified)) (set! F4cd2@p? (unspecified)) (set! F4cd4@make-serious-condition (unspecified)) (set! F4cd6@serious-condition? (unspecified)) (set! F4cd8@&serious-rtd (unspecified)) (set! F4cda@&serious-rcd (unspecified)) (set! F4ce0@F4cdb (unspecified)) (set! F4ce2@F4cdd (unspecified)) (set! F4ce4@F4cdc (unspecified)) (set! F4ce7@p? (unspecified)) (set! F4ce9@make-error (unspecified)) (set! F4ceb@error? (unspecified)) (set! F4ced@&error-rtd (unspecified)) (set! F4cef@&error-rcd (unspecified)) (set! F4cf5@F4cf0 (unspecified)) (set! F4cf7@F4cf2 (unspecified)) (set! F4cf9@F4cf1 (unspecified)) (set! F4cfc@p? (unspecified)) (set! F4cfe@make-violation (unspecified)) (set! F4d00@violation? (unspecified)) (set! F4d02@&violation-rtd (unspecified)) (set! F4d04@&violation-rcd (unspecified)) (set! F4d0a@F4d05 (unspecified)) (set! F4d0c@F4d07 (unspecified)) (set! F4d0e@F4d06 (unspecified)) (set! F4d11@p? (unspecified)) (set! F4d13@make-assertion-violation (unspecified)) (set! F4d15@assertion-violation? (unspecified)) (set! F4d17@&assertion-rtd (unspecified)) (set! F4d19@&assertion-rcd (unspecified)) (set! F4d21@F4d1c (unspecified)) (set! F4d23@F4d1e (unspecified)) (set! F4d25@F4d1d (unspecified)) (set! F4d28@p? (unspecified)) (set! F4d2a@make-irritants-condition (unspecified)) (set! F4d2c@F4d1b (unspecified)) (set! F4d2e@irritants-condition? (unspecified)) (set! F4d30@condition-irritants (unspecified)) (set! F4d32@&irritants-rtd (unspecified)) (set! F4d34@&irritants-rcd (unspecified)) (set! F4d3c@F4d37 (unspecified)) (set! F4d3e@F4d39 (unspecified)) (set! F4d40@F4d38 (unspecified)) (set! F4d43@p? (unspecified)) (set! F4d45@make-who-condition (unspecified)) (set! F4d47@F4d36 (unspecified)) (set! F4d49@who-condition? (unspecified)) (set! F4d4b@condition-who (unspecified)) (set! F4d4d@&who-rtd (unspecified)) (set! F4d4f@&who-rcd (unspecified)) (set! F4d55@F4d50 (unspecified)) (set! F4d57@F4d52 (unspecified)) (set! F4d59@F4d51 (unspecified)) (set! F4d5c@p? (unspecified)) (set! F4d5e@make-non-continuable-violation (unspecified)) (set! F4d60@non-continuable-violation? (unspecified)) (set! F4d62@&non-continuable-rtd (unspecified)) (set! F4d64@&non-continuable-rcd (unspecified)) (set! F4d6a@F4d65 (unspecified)) (set! F4d6c@F4d67 (unspecified)) (set! F4d6e@F4d66 (unspecified)) (set! F4d71@p? (unspecified)) (set! F4d73@make-implementation-restriction-violation (unspecified)) (set! F4d75@implementation-restriction-violation? (unspecified)) (set! F4d77@&implementation-restriction-rtd (unspecified)) (set! F4d79@&implementation-restriction-rcd (unspecified)) (set! F4d7f@F4d7a (unspecified)) (set! F4d81@F4d7c (unspecified)) (set! F4d83@F4d7b (unspecified)) (set! F4d86@p? (unspecified)) (set! F4d88@make-lexical-violation (unspecified)) (set! F4d8a@lexical-violation? (unspecified)) (set! F4d8c@&lexical-rtd (unspecified)) (set! F4d8e@&lexical-rcd (unspecified)) (set! F4d98@F4d93 (unspecified)) (set! F4d9a@F4d95 (unspecified)) (set! F4d9c@F4d94 (unspecified)) (set! F4d9f@p? (unspecified)) (set! F4da1@make-syntax-violation (unspecified)) (set! F4da3@F4d90 (unspecified)) (set! F4da5@F4d92 (unspecified)) (set! F4da7@syntax-violation? (unspecified)) (set! F4da9@syntax-violation-form (unspecified)) (set! F4dab@syntax-violation-subform (unspecified)) (set! F4dad@&syntax-rtd (unspecified)) (set! F4daf@&syntax-rcd (unspecified)) (set! F4db5@F4db0 (unspecified)) (set! F4db7@F4db2 (unspecified)) (set! F4db9@F4db1 (unspecified)) (set! F4dbc@p? (unspecified)) (set! F4dbe@make-undefined-violation (unspecified)) (set! F4dc0@undefined-violation? (unspecified)) (set! F4dc2@&undefined-rtd (unspecified)) (set! F4dc4@&undefined-rcd (unspecified)) (set! F4dca@F4dc5 (unspecified)) (set! F4dcc@F4dc7 (unspecified)) (set! F4dce@F4dc6 (unspecified)) (set! F4dd1@p? (unspecified)) (set! F4dd3@make-i/o-error (unspecified)) (set! F4dd5@i/o-error? (unspecified)) (set! F4dd7@&i/o-rtd (unspecified)) (set! F4dd9@&i/o-rcd (unspecified)) (set! F4ddf@F4dda (unspecified)) (set! F4de1@F4ddc (unspecified)) (set! F4de3@F4ddb (unspecified)) (set! F4de6@p? (unspecified)) (set! F4de8@make-i/o-read-error (unspecified)) (set! F4dea@i/o-read-error? (unspecified)) (set! F4dec@&i/o-read-rtd (unspecified)) (set! F4dee@&i/o-read-rcd (unspecified)) (set! F4df4@F4def (unspecified)) (set! F4df6@F4df1 (unspecified)) (set! F4df8@F4df0 (unspecified)) (set! F4dfb@p? (unspecified)) (set! F4dfd@make-i/o-write-error (unspecified)) (set! F4dff@i/o-write-error? (unspecified)) (set! F4e01@&i/o-write-rtd (unspecified)) (set! F4e03@&i/o-write-rcd (unspecified)) (set! F4e0b@F4e06 (unspecified)) (set! F4e0d@F4e08 (unspecified)) (set! F4e0f@F4e07 (unspecified)) (set! F4e12@p? (unspecified)) (set! F4e14@make-i/o-invalid-position-error (unspecified)) (set! F4e16@F4e05 (unspecified)) (set! F4e18@i/o-invalid-position-error? (unspecified)) (set! F4e1a@i/o-error-position (unspecified)) (set! F4e1c@&i/o-invalid-position-rtd (unspecified)) (set! F4e1e@&i/o-invalid-position-rcd (unspecified)) (set! F4e26@F4e21 (unspecified)) (set! F4e28@F4e23 (unspecified)) (set! F4e2a@F4e22 (unspecified)) (set! F4e2d@p? (unspecified)) (set! F4e2f@make-i/o-filename-error (unspecified)) (set! F4e31@F4e20 (unspecified)) (set! F4e33@i/o-filename-error? (unspecified)) (set! F4e35@i/o-error-filename (unspecified)) (set! F4e37@&i/o-filename-rtd (unspecified)) (set! F4e39@&i/o-filename-rcd (unspecified)) (set! F4e3f@F4e3a (unspecified)) (set! F4e41@F4e3c (unspecified)) (set! F4e43@F4e3b (unspecified)) (set! F4e46@p? (unspecified)) (set! F4e48@make-i/o-file-protection-error (unspecified)) (set! F4e4a@i/o-file-protection-error? (unspecified)) (set! F4e4c@&i/o-file-protection-rtd (unspecified)) (set! F4e4e@&i/o-file-protection-rcd (unspecified)) (set! F4e54@F4e4f (unspecified)) (set! F4e56@F4e51 (unspecified)) (set! F4e58@F4e50 (unspecified)) (set! F4e5b@p? (unspecified)) (set! F4e5d@make-i/o-file-is-read-only-error (unspecified)) (set! F4e5f@i/o-file-is-read-only-error? (unspecified)) (set! F4e61@&i/o-file-is-read-only-rtd (unspecified)) (set! F4e63@&i/o-file-is-read-only-rcd (unspecified)) (set! F4e69@F4e64 (unspecified)) (set! F4e6b@F4e66 (unspecified)) (set! F4e6d@F4e65 (unspecified)) (set! F4e70@p? (unspecified)) (set! F4e72@make-i/o-file-already-exists-error (unspecified)) (set! F4e74@i/o-file-already-exists-error? (unspecified)) (set! F4e76@&i/o-file-already-exists-rtd (unspecified)) (set! F4e78@&i/o-file-already-exists-rcd (unspecified)) (set! F4e7e@F4e79 (unspecified)) (set! F4e80@F4e7b (unspecified)) (set! F4e82@F4e7a (unspecified)) (set! F4e85@p? (unspecified)) (set! F4e87@make-i/o-file-does-not-exist-error (unspecified)) (set! F4e89@i/o-file-does-not-exist-error? (unspecified)) (set! F4e8b@&i/o-file-does-not-exist-rtd (unspecified)) (set! F4e8d@&i/o-file-does-not-exist-rcd (unspecified)) (set! F4e95@F4e90 (unspecified)) (set! F4e97@F4e92 (unspecified)) (set! F4e99@F4e91 (unspecified)) (set! F4e9c@p? (unspecified)) (set! F4e9e@make-i/o-port-error (unspecified)) (set! F4ea0@F4e8f (unspecified)) (set! F4ea2@i/o-port-error? (unspecified)) (set! F4ea4@i/o-error-port (unspecified)) (set! F4ea6@&i/o-port-rtd (unspecified)) (set! F4ea8@&i/o-port-rcd (unspecified)) (set! F4eae@F4ea9 (unspecified)) (set! F4eb0@F4eab (unspecified)) (set! F4eb2@F4eaa (unspecified)) (set! F4eb5@p? (unspecified)) (set! F4eb7@make-i/o-decoding-error (unspecified)) (set! F4eb9@i/o-decoding-error? (unspecified)) (set! F4ebb@&i/o-decoding-rtd (unspecified)) (set! F4ebd@&i/o-decoding-rcd (unspecified)) (set! F4ec5@F4ec0 (unspecified)) (set! F4ec7@F4ec2 (unspecified)) (set! F4ec9@F4ec1 (unspecified)) (set! F4ecc@p? (unspecified)) (set! F4ece@make-i/o-encoding-error (unspecified)) (set! F4ed0@F4ebf (unspecified)) (set! F4ed2@i/o-encoding-error? (unspecified)) (set! F4ed4@i/o-encoding-error-char (unspecified)) (set! F4ed6@&i/o-encoding-rtd (unspecified)) (set! F4ed8@&i/o-encoding-rcd (unspecified)) (set! F4ede@F4ed9 (unspecified)) (set! F4ee0@F4edb (unspecified)) (set! F4ee2@F4eda (unspecified)) (set! F4ee5@p? (unspecified)) (set! F4ee7@make-no-infinities-violation (unspecified)) (set! F4ee9@no-infinities-violation? (unspecified)) (set! F4eeb@&no-infinities-rtd (unspecified)) (set! F4eed@&no-infinities-rcd (unspecified)) (set! F4ef3@F4eee (unspecified)) (set! F4ef5@F4ef0 (unspecified)) (set! F4ef7@F4eef (unspecified)) (set! F4efa@p? (unspecified)) (set! F4efc@make-no-nans-violation (unspecified)) (set! F4efe@no-nans-violation? (unspecified)) (set! F4f00@&no-nans-rtd (unspecified)) (set! F4f02@&no-nans-rcd (unspecified)) (set! F4c44@F4c3f (make-record-type-descriptor '&condition '#f 'F4c42 '#f '#f '#())) (set! F4f03@F4c44@F4c3f F4c44@F4c3f) (set! F4c46@F4c41 '#f) (set! F4f04@F4c46@F4c41 F4c46@F4c41) (set! F4c48@F4c40 (make-record-constructor-descriptor F4c44@F4c3f '#f F4c46@F4c41)) (set! F4f05@F4c48@F4c40 F4c48@F4c40) (set! F4c4b@&condition? (record-predicate F4c44@F4c3f)) (set! F4f06@F4c4b@&condition? F4c4b@&condition?) (set! F4c4d@make-&condition (record-constructor F4c48@F4c40)) (set! F4f07@F4c4d@make-&condition F4c4d@make-&condition) (set! F4c4f@&condition-rtd F4c44@F4c3f) (set! F4f08@F4c4f@&condition-rtd F4c4f@&condition-rtd) (set! F4c51@&condition-rcd F4c48@F4c40) (set! F4f09@F4c51@&condition-rcd F4c51@&condition-rcd) (set! F4c9d@F4c98 (make-record-type-descriptor '&message F4c44@F4c3f 'F4c9b '#f '#f '#((immutable message)))) (set! F4f0a@F4c9d@F4c98 F4c9d@F4c98) (set! F4c9f@F4c9a '#f) (set! F4f0b@F4c9f@F4c9a F4c9f@F4c9a) (set! F4ca1@F4c99 (make-record-constructor-descriptor F4c9d@F4c98 F4c48@F4c40 F4c9f@F4c9a)) (set! F4f0c@F4ca1@F4c99 F4ca1@F4c99) (set! F4ca4@p? (record-predicate F4c9d@F4c98)) (set! F4f0d@F4ca4@p? F4ca4@p?) (set! F4ca6@make-message-condition (record-constructor F4ca1@F4c99)) (set! F4f0e@F4ca6@make-message-condition F4ca6@make-message-condition) (set! F4ca8@F4c97 (record-accessor F4c9d@F4c98 '0)) (set! F4f0f@F4ca8@F4c97 F4ca8@F4c97) (set! F4caa@message-condition? (condition-predicate F4c9d@F4c98)) (set! F4f10@F4caa@message-condition? F4caa@message-condition?) (set! F4cac@condition-message (condition-accessor F4c9d@F4c98 F4ca8@F4c97)) (set! F4f11@F4cac@condition-message F4cac@condition-message) (set! F4cae@&message-rtd F4c9d@F4c98) (set! F4f12@F4cae@&message-rtd F4cae@&message-rtd) (set! F4cb0@&message-rcd F4ca1@F4c99) (set! F4f13@F4cb0@&message-rcd F4cb0@&message-rcd) (set! F4cb6@F4cb1 (make-record-type-descriptor '&warning F4c44@F4c3f 'F4cb4 '#f '#f '#())) (set! F4f14@F4cb6@F4cb1 F4cb6@F4cb1) (set! F4cb8@F4cb3 '#f) (set! F4f15@F4cb8@F4cb3 F4cb8@F4cb3) (set! F4cba@F4cb2 (make-record-constructor-descriptor F4cb6@F4cb1 F4c48@F4c40 F4cb8@F4cb3)) (set! F4f16@F4cba@F4cb2 F4cba@F4cb2) (set! F4cbd@p? (record-predicate F4cb6@F4cb1)) (set! F4f17@F4cbd@p? F4cbd@p?) (set! F4cbf@make-warning (record-constructor F4cba@F4cb2)) (set! F4f18@F4cbf@make-warning F4cbf@make-warning) (set! F4cc1@warning? (condition-predicate F4cb6@F4cb1)) (set! F4f19@F4cc1@warning? F4cc1@warning?) (set! F4cc3@&warning-rtd F4cb6@F4cb1) (set! F4f1a@F4cc3@&warning-rtd F4cc3@&warning-rtd) (set! F4cc5@&warning-rcd F4cba@F4cb2) (set! F4f1b@F4cc5@&warning-rcd F4cc5@&warning-rcd) (set! F4ccb@F4cc6 (make-record-type-descriptor '&serious F4c44@F4c3f 'F4cc9 '#f '#f '#())) (set! F4f1c@F4ccb@F4cc6 F4ccb@F4cc6) (set! F4ccd@F4cc8 '#f) (set! F4f1d@F4ccd@F4cc8 F4ccd@F4cc8) (set! F4ccf@F4cc7 (make-record-constructor-descriptor F4ccb@F4cc6 F4c48@F4c40 F4ccd@F4cc8)) (set! F4f1e@F4ccf@F4cc7 F4ccf@F4cc7) (set! F4cd2@p? (record-predicate F4ccb@F4cc6)) (set! F4f1f@F4cd2@p? F4cd2@p?) (set! F4cd4@make-serious-condition (record-constructor F4ccf@F4cc7)) (set! F4f20@F4cd4@make-serious-condition F4cd4@make-serious-condition) (set! F4cd6@serious-condition? (condition-predicate F4ccb@F4cc6)) (set! F4f21@F4cd6@serious-condition? F4cd6@serious-condition?) (set! F4cd8@&serious-rtd F4ccb@F4cc6) (set! F4f22@F4cd8@&serious-rtd F4cd8@&serious-rtd) (set! F4cda@&serious-rcd F4ccf@F4cc7) (set! F4f23@F4cda@&serious-rcd F4cda@&serious-rcd) (set! F4ce0@F4cdb (make-record-type-descriptor '&error F4ccb@F4cc6 'F4cde '#f '#f '#())) (set! F4f24@F4ce0@F4cdb F4ce0@F4cdb) (set! F4ce2@F4cdd '#f) (set! F4f25@F4ce2@F4cdd F4ce2@F4cdd) (set! F4ce4@F4cdc (make-record-constructor-descriptor F4ce0@F4cdb F4ccf@F4cc7 F4ce2@F4cdd)) (set! F4f26@F4ce4@F4cdc F4ce4@F4cdc) (set! F4ce7@p? (record-predicate F4ce0@F4cdb)) (set! F4f27@F4ce7@p? F4ce7@p?) (set! F4ce9@make-error (record-constructor F4ce4@F4cdc)) (set! F4f28@F4ce9@make-error F4ce9@make-error) (set! F4ceb@error? (condition-predicate F4ce0@F4cdb)) (set! F4f29@F4ceb@error? F4ceb@error?) (set! F4ced@&error-rtd F4ce0@F4cdb) (set! F4f2a@F4ced@&error-rtd F4ced@&error-rtd) (set! F4cef@&error-rcd F4ce4@F4cdc) (set! F4f2b@F4cef@&error-rcd F4cef@&error-rcd) (set! F4cf5@F4cf0 (make-record-type-descriptor '&violation F4ccb@F4cc6 'F4cf3 '#f '#f '#())) (set! F4f2c@F4cf5@F4cf0 F4cf5@F4cf0) (set! F4cf7@F4cf2 '#f) (set! F4f2d@F4cf7@F4cf2 F4cf7@F4cf2) (set! F4cf9@F4cf1 (make-record-constructor-descriptor F4cf5@F4cf0 F4ccf@F4cc7 F4cf7@F4cf2)) (set! F4f2e@F4cf9@F4cf1 F4cf9@F4cf1) (set! F4cfc@p? (record-predicate F4cf5@F4cf0)) (set! F4f2f@F4cfc@p? F4cfc@p?) (set! F4cfe@make-violation (record-constructor F4cf9@F4cf1)) (set! F4f30@F4cfe@make-violation F4cfe@make-violation) (set! F4d00@violation? (condition-predicate F4cf5@F4cf0)) (set! F4f31@F4d00@violation? F4d00@violation?) (set! F4d02@&violation-rtd F4cf5@F4cf0) (set! F4f32@F4d02@&violation-rtd F4d02@&violation-rtd) (set! F4d04@&violation-rcd F4cf9@F4cf1) (set! F4f33@F4d04@&violation-rcd F4d04@&violation-rcd) (set! F4d0a@F4d05 (make-record-type-descriptor '&assertion F4cf5@F4cf0 'F4d08 '#f '#f '#())) (set! F4f34@F4d0a@F4d05 F4d0a@F4d05) (set! F4d0c@F4d07 '#f) (set! F4f35@F4d0c@F4d07 F4d0c@F4d07) (set! F4d0e@F4d06 (make-record-constructor-descriptor F4d0a@F4d05 F4cf9@F4cf1 F4d0c@F4d07)) (set! F4f36@F4d0e@F4d06 F4d0e@F4d06) (set! F4d11@p? (record-predicate F4d0a@F4d05)) (set! F4f37@F4d11@p? F4d11@p?) (set! F4d13@make-assertion-violation (record-constructor F4d0e@F4d06)) (set! F4f38@F4d13@make-assertion-violation F4d13@make-assertion-violation) (set! F4d15@assertion-violation? (condition-predicate F4d0a@F4d05)) (set! F4f39@F4d15@assertion-violation? F4d15@assertion-violation?) (set! F4d17@&assertion-rtd F4d0a@F4d05) (set! F4f3a@F4d17@&assertion-rtd F4d17@&assertion-rtd) (set! F4d19@&assertion-rcd F4d0e@F4d06) (set! F4f3b@F4d19@&assertion-rcd F4d19@&assertion-rcd) (set! F4d21@F4d1c (make-record-type-descriptor '&irritants F4c44@F4c3f 'F4d1f '#f '#f '#((immutable irritants)))) (set! F4f3c@F4d21@F4d1c F4d21@F4d1c) (set! F4d23@F4d1e '#f) (set! F4f3d@F4d23@F4d1e F4d23@F4d1e) (set! F4d25@F4d1d (make-record-constructor-descriptor F4d21@F4d1c F4c48@F4c40 F4d23@F4d1e)) (set! F4f3e@F4d25@F4d1d F4d25@F4d1d) (set! F4d28@p? (record-predicate F4d21@F4d1c)) (set! F4f3f@F4d28@p? F4d28@p?) (set! F4d2a@make-irritants-condition (record-constructor F4d25@F4d1d)) (set! F4f40@F4d2a@make-irritants-condition F4d2a@make-irritants-condition) (set! F4d2c@F4d1b (record-accessor F4d21@F4d1c '0)) (set! F4f41@F4d2c@F4d1b F4d2c@F4d1b) (set! F4d2e@irritants-condition? (condition-predicate F4d21@F4d1c)) (set! F4f42@F4d2e@irritants-condition? F4d2e@irritants-condition?) (set! F4d30@condition-irritants (condition-accessor F4d21@F4d1c F4d2c@F4d1b)) (set! F4f43@F4d30@condition-irritants F4d30@condition-irritants) (set! F4d32@&irritants-rtd F4d21@F4d1c) (set! F4f44@F4d32@&irritants-rtd F4d32@&irritants-rtd) (set! F4d34@&irritants-rcd F4d25@F4d1d) (set! F4f45@F4d34@&irritants-rcd F4d34@&irritants-rcd) (set! F4d3c@F4d37 (make-record-type-descriptor '&who F4c44@F4c3f 'F4d3a '#f '#f '#((immutable who)))) (set! F4f46@F4d3c@F4d37 F4d3c@F4d37) (set! F4d3e@F4d39 '#f) (set! F4f47@F4d3e@F4d39 F4d3e@F4d39) (set! F4d40@F4d38 (make-record-constructor-descriptor F4d3c@F4d37 F4c48@F4c40 F4d3e@F4d39)) (set! F4f48@F4d40@F4d38 F4d40@F4d38) (set! F4d43@p? (record-predicate F4d3c@F4d37)) (set! F4f49@F4d43@p? F4d43@p?) (set! F4d45@make-who-condition (record-constructor F4d40@F4d38)) (set! F4f4a@F4d45@make-who-condition F4d45@make-who-condition) (set! F4d47@F4d36 (record-accessor F4d3c@F4d37 '0)) (set! F4f4b@F4d47@F4d36 F4d47@F4d36) (set! F4d49@who-condition? (condition-predicate F4d3c@F4d37)) (set! F4f4c@F4d49@who-condition? F4d49@who-condition?) (set! F4d4b@condition-who (condition-accessor F4d3c@F4d37 F4d47@F4d36)) (set! F4f4d@F4d4b@condition-who F4d4b@condition-who) (set! F4d4d@&who-rtd F4d3c@F4d37) (set! F4f4e@F4d4d@&who-rtd F4d4d@&who-rtd) (set! F4d4f@&who-rcd F4d40@F4d38) (set! F4f4f@F4d4f@&who-rcd F4d4f@&who-rcd) (set! F4d55@F4d50 (make-record-type-descriptor '&non-continuable F4cf5@F4cf0 'F4d53 '#f '#f '#())) (set! F4f50@F4d55@F4d50 F4d55@F4d50) (set! F4d57@F4d52 '#f) (set! F4f51@F4d57@F4d52 F4d57@F4d52) (set! F4d59@F4d51 (make-record-constructor-descriptor F4d55@F4d50 F4cf9@F4cf1 F4d57@F4d52)) (set! F4f52@F4d59@F4d51 F4d59@F4d51) (set! F4d5c@p? (record-predicate F4d55@F4d50)) (set! F4f53@F4d5c@p? F4d5c@p?) (set! F4d5e@make-non-continuable-violation (record-constructor F4d59@F4d51)) (set! F4f54@F4d5e@make-non-continuable-violation F4d5e@make-non-continuable-violation) (set! F4d60@non-continuable-violation? (condition-predicate F4d55@F4d50)) (set! F4f55@F4d60@non-continuable-violation? F4d60@non-continuable-violation?) (set! F4d62@&non-continuable-rtd F4d55@F4d50) (set! F4f56@F4d62@&non-continuable-rtd F4d62@&non-continuable-rtd) (set! F4d64@&non-continuable-rcd F4d59@F4d51) (set! F4f57@F4d64@&non-continuable-rcd F4d64@&non-continuable-rcd) (set! F4d6a@F4d65 (make-record-type-descriptor '&implementation-restriction F4cf5@F4cf0 'F4d68 '#f '#f '#())) (set! F4f58@F4d6a@F4d65 F4d6a@F4d65) (set! F4d6c@F4d67 '#f) (set! F4f59@F4d6c@F4d67 F4d6c@F4d67) (set! F4d6e@F4d66 (make-record-constructor-descriptor F4d6a@F4d65 F4cf9@F4cf1 F4d6c@F4d67)) (set! F4f5a@F4d6e@F4d66 F4d6e@F4d66) (set! F4d71@p? (record-predicate F4d6a@F4d65)) (set! F4f5b@F4d71@p? F4d71@p?) (set! F4d73@make-implementation-restriction-violation (record-constructor F4d6e@F4d66)) (set! F4f5c@F4d73@make-implementation-restriction-violation F4d73@make-implementation-restriction-violation) (set! F4d75@implementation-restriction-violation? (condition-predicate F4d6a@F4d65)) (set! F4f5d@F4d75@implementation-restriction-violation? F4d75@implementation-restriction-violation?) (set! F4d77@&implementation-restriction-rtd F4d6a@F4d65) (set! F4f5e@F4d77@&implementation-restriction-rtd F4d77@&implementation-restriction-rtd) (set! F4d79@&implementation-restriction-rcd F4d6e@F4d66) (set! F4f5f@F4d79@&implementation-restriction-rcd F4d79@&implementation-restriction-rcd) (set! F4d7f@F4d7a (make-record-type-descriptor '&lexical F4cf5@F4cf0 'F4d7d '#f '#f '#())) (set! F4f60@F4d7f@F4d7a F4d7f@F4d7a) (set! F4d81@F4d7c '#f) (set! F4f61@F4d81@F4d7c F4d81@F4d7c) (set! F4d83@F4d7b (make-record-constructor-descriptor F4d7f@F4d7a F4cf9@F4cf1 F4d81@F4d7c)) (set! F4f62@F4d83@F4d7b F4d83@F4d7b) (set! F4d86@p? (record-predicate F4d7f@F4d7a)) (set! F4f63@F4d86@p? F4d86@p?) (set! F4d88@make-lexical-violation (record-constructor F4d83@F4d7b)) (set! F4f64@F4d88@make-lexical-violation F4d88@make-lexical-violation) (set! F4d8a@lexical-violation? (condition-predicate F4d7f@F4d7a)) (set! F4f65@F4d8a@lexical-violation? F4d8a@lexical-violation?) (set! F4d8c@&lexical-rtd F4d7f@F4d7a) (set! F4f66@F4d8c@&lexical-rtd F4d8c@&lexical-rtd) (set! F4d8e@&lexical-rcd F4d83@F4d7b) (set! F4f67@F4d8e@&lexical-rcd F4d8e@&lexical-rcd) (set! F4d98@F4d93 (make-record-type-descriptor '&syntax F4cf5@F4cf0 'F4d96 '#f '#f '#((immutable form) (immutable subform)))) (set! F4f68@F4d98@F4d93 F4d98@F4d93) (set! F4d9a@F4d95 '#f) (set! F4f69@F4d9a@F4d95 F4d9a@F4d95) (set! F4d9c@F4d94 (make-record-constructor-descriptor F4d98@F4d93 F4cf9@F4cf1 F4d9a@F4d95)) (set! F4f6a@F4d9c@F4d94 F4d9c@F4d94) (set! F4d9f@p? (record-predicate F4d98@F4d93)) (set! F4f6b@F4d9f@p? F4d9f@p?) (set! F4da1@make-syntax-violation (record-constructor F4d9c@F4d94)) (set! F4f6c@F4da1@make-syntax-violation F4da1@make-syntax-violation) (set! F4da3@F4d90 (record-accessor F4d98@F4d93 '0)) (set! F4f6d@F4da3@F4d90 F4da3@F4d90) (set! F4da5@F4d92 (record-accessor F4d98@F4d93 '1)) (set! F4f6e@F4da5@F4d92 F4da5@F4d92) (set! F4da7@syntax-violation? (condition-predicate F4d98@F4d93)) (set! F4f6f@F4da7@syntax-violation? F4da7@syntax-violation?) (set! F4da9@syntax-violation-form (condition-accessor F4d98@F4d93 F4da3@F4d90)) (set! F4f70@F4da9@syntax-violation-form F4da9@syntax-violation-form) (set! F4dab@syntax-violation-subform (condition-accessor F4d98@F4d93 F4da5@F4d92)) (set! F4f71@F4dab@syntax-violation-subform F4dab@syntax-violation-subform) (set! F4dad@&syntax-rtd F4d98@F4d93) (set! F4f72@F4dad@&syntax-rtd F4dad@&syntax-rtd) (set! F4daf@&syntax-rcd F4d9c@F4d94) (set! F4f73@F4daf@&syntax-rcd F4daf@&syntax-rcd) (set! F4db5@F4db0 (make-record-type-descriptor '&undefined F4cf5@F4cf0 'F4db3 '#f '#f '#())) (set! F4f74@F4db5@F4db0 F4db5@F4db0) (set! F4db7@F4db2 '#f) (set! F4f75@F4db7@F4db2 F4db7@F4db2) (set! F4db9@F4db1 (make-record-constructor-descriptor F4db5@F4db0 F4cf9@F4cf1 F4db7@F4db2)) (set! F4f76@F4db9@F4db1 F4db9@F4db1) (set! F4dbc@p? (record-predicate F4db5@F4db0)) (set! F4f77@F4dbc@p? F4dbc@p?) (set! F4dbe@make-undefined-violation (record-constructor F4db9@F4db1)) (set! F4f78@F4dbe@make-undefined-violation F4dbe@make-undefined-violation) (set! F4dc0@undefined-violation? (condition-predicate F4db5@F4db0)) (set! F4f79@F4dc0@undefined-violation? F4dc0@undefined-violation?) (set! F4dc2@&undefined-rtd F4db5@F4db0) (set! F4f7a@F4dc2@&undefined-rtd F4dc2@&undefined-rtd) (set! F4dc4@&undefined-rcd F4db9@F4db1) (set! F4f7b@F4dc4@&undefined-rcd F4dc4@&undefined-rcd) (set! F4dca@F4dc5 (make-record-type-descriptor '&i/o F4ce0@F4cdb 'F4dc8 '#f '#f '#())) (set! F4f7c@F4dca@F4dc5 F4dca@F4dc5) (set! F4dcc@F4dc7 '#f) (set! F4f7d@F4dcc@F4dc7 F4dcc@F4dc7) (set! F4dce@F4dc6 (make-record-constructor-descriptor F4dca@F4dc5 F4ce4@F4cdc F4dcc@F4dc7)) (set! F4f7e@F4dce@F4dc6 F4dce@F4dc6) (set! F4dd1@p? (record-predicate F4dca@F4dc5)) (set! F4f7f@F4dd1@p? F4dd1@p?) (set! F4dd3@make-i/o-error (record-constructor F4dce@F4dc6)) (set! F4f80@F4dd3@make-i/o-error F4dd3@make-i/o-error) (set! F4dd5@i/o-error? (condition-predicate F4dca@F4dc5)) (set! F4f81@F4dd5@i/o-error? F4dd5@i/o-error?) (set! F4dd7@&i/o-rtd F4dca@F4dc5) (set! F4f82@F4dd7@&i/o-rtd F4dd7@&i/o-rtd) (set! F4dd9@&i/o-rcd F4dce@F4dc6) (set! F4f83@F4dd9@&i/o-rcd F4dd9@&i/o-rcd) (set! F4ddf@F4dda (make-record-type-descriptor '&i/o-read F4dca@F4dc5 'F4ddd '#f '#f '#())) (set! F4f84@F4ddf@F4dda F4ddf@F4dda) (set! F4de1@F4ddc '#f) (set! F4f85@F4de1@F4ddc F4de1@F4ddc) (set! F4de3@F4ddb (make-record-constructor-descriptor F4ddf@F4dda F4dce@F4dc6 F4de1@F4ddc)) (set! F4f86@F4de3@F4ddb F4de3@F4ddb) (set! F4de6@p? (record-predicate F4ddf@F4dda)) (set! F4f87@F4de6@p? F4de6@p?) (set! F4de8@make-i/o-read-error (record-constructor F4de3@F4ddb)) (set! F4f88@F4de8@make-i/o-read-error F4de8@make-i/o-read-error) (set! F4dea@i/o-read-error? (condition-predicate F4ddf@F4dda)) (set! F4f89@F4dea@i/o-read-error? F4dea@i/o-read-error?) (set! F4dec@&i/o-read-rtd F4ddf@F4dda) (set! F4f8a@F4dec@&i/o-read-rtd F4dec@&i/o-read-rtd) (set! F4dee@&i/o-read-rcd F4de3@F4ddb) (set! F4f8b@F4dee@&i/o-read-rcd F4dee@&i/o-read-rcd) (set! F4df4@F4def (make-record-type-descriptor '&i/o-write F4dca@F4dc5 'F4df2 '#f '#f '#())) (set! F4f8c@F4df4@F4def F4df4@F4def) (set! F4df6@F4df1 '#f) (set! F4f8d@F4df6@F4df1 F4df6@F4df1) (set! F4df8@F4df0 (make-record-constructor-descriptor F4df4@F4def F4dce@F4dc6 F4df6@F4df1)) (set! F4f8e@F4df8@F4df0 F4df8@F4df0) (set! F4dfb@p? (record-predicate F4df4@F4def)) (set! F4f8f@F4dfb@p? F4dfb@p?) (set! F4dfd@make-i/o-write-error (record-constructor F4df8@F4df0)) (set! F4f90@F4dfd@make-i/o-write-error F4dfd@make-i/o-write-error) (set! F4dff@i/o-write-error? (condition-predicate F4df4@F4def)) (set! F4f91@F4dff@i/o-write-error? F4dff@i/o-write-error?) (set! F4e01@&i/o-write-rtd F4df4@F4def) (set! F4f92@F4e01@&i/o-write-rtd F4e01@&i/o-write-rtd) (set! F4e03@&i/o-write-rcd F4df8@F4df0) (set! F4f93@F4e03@&i/o-write-rcd F4e03@&i/o-write-rcd) (set! F4e0b@F4e06 (make-record-type-descriptor '&i/o-invalid-position F4dca@F4dc5 'F4e09 '#f '#f '#((immutable position)))) (set! F4f94@F4e0b@F4e06 F4e0b@F4e06) (set! F4e0d@F4e08 '#f) (set! F4f95@F4e0d@F4e08 F4e0d@F4e08) (set! F4e0f@F4e07 (make-record-constructor-descriptor F4e0b@F4e06 F4dce@F4dc6 F4e0d@F4e08)) (set! F4f96@F4e0f@F4e07 F4e0f@F4e07) (set! F4e12@p? (record-predicate F4e0b@F4e06)) (set! F4f97@F4e12@p? F4e12@p?) (set! F4e14@make-i/o-invalid-position-error (record-constructor F4e0f@F4e07)) (set! F4f98@F4e14@make-i/o-invalid-position-error F4e14@make-i/o-invalid-position-error) (set! F4e16@F4e05 (record-accessor F4e0b@F4e06 '0)) (set! F4f99@F4e16@F4e05 F4e16@F4e05) (set! F4e18@i/o-invalid-position-error? (condition-predicate F4e0b@F4e06)) (set! F4f9a@F4e18@i/o-invalid-position-error? F4e18@i/o-invalid-position-error?) (set! F4e1a@i/o-error-position (condition-accessor F4e0b@F4e06 F4e16@F4e05)) (set! F4f9b@F4e1a@i/o-error-position F4e1a@i/o-error-position) (set! F4e1c@&i/o-invalid-position-rtd F4e0b@F4e06) (set! F4f9c@F4e1c@&i/o-invalid-position-rtd F4e1c@&i/o-invalid-position-rtd) (set! F4e1e@&i/o-invalid-position-rcd F4e0f@F4e07) (set! F4f9d@F4e1e@&i/o-invalid-position-rcd F4e1e@&i/o-invalid-position-rcd) (set! F4e26@F4e21 (make-record-type-descriptor '&i/o-filename F4dca@F4dc5 'F4e24 '#f '#f '#((immutable filename)))) (set! F4f9e@F4e26@F4e21 F4e26@F4e21) (set! F4e28@F4e23 '#f) (set! F4f9f@F4e28@F4e23 F4e28@F4e23) (set! F4e2a@F4e22 (make-record-constructor-descriptor F4e26@F4e21 F4dce@F4dc6 F4e28@F4e23)) (set! F4fa0@F4e2a@F4e22 F4e2a@F4e22) (set! F4e2d@p? (record-predicate F4e26@F4e21)) (set! F4fa1@F4e2d@p? F4e2d@p?) (set! F4e2f@make-i/o-filename-error (record-constructor F4e2a@F4e22)) (set! F4fa2@F4e2f@make-i/o-filename-error F4e2f@make-i/o-filename-error) (set! F4e31@F4e20 (record-accessor F4e26@F4e21 '0)) (set! F4fa3@F4e31@F4e20 F4e31@F4e20) (set! F4e33@i/o-filename-error? (condition-predicate F4e26@F4e21)) (set! F4fa4@F4e33@i/o-filename-error? F4e33@i/o-filename-error?) (set! F4e35@i/o-error-filename (condition-accessor F4e26@F4e21 F4e31@F4e20)) (set! F4fa5@F4e35@i/o-error-filename F4e35@i/o-error-filename) (set! F4e37@&i/o-filename-rtd F4e26@F4e21) (set! F4fa6@F4e37@&i/o-filename-rtd F4e37@&i/o-filename-rtd) (set! F4e39@&i/o-filename-rcd F4e2a@F4e22) (set! F4fa7@F4e39@&i/o-filename-rcd F4e39@&i/o-filename-rcd) (set! F4e3f@F4e3a (make-record-type-descriptor '&i/o-file-protection F4e26@F4e21 'F4e3d '#f '#f '#())) (set! F4fa8@F4e3f@F4e3a F4e3f@F4e3a) (set! F4e41@F4e3c '#f) (set! F4fa9@F4e41@F4e3c F4e41@F4e3c) (set! F4e43@F4e3b (make-record-constructor-descriptor F4e3f@F4e3a F4e2a@F4e22 F4e41@F4e3c)) (set! F4faa@F4e43@F4e3b F4e43@F4e3b) (set! F4e46@p? (record-predicate F4e3f@F4e3a)) (set! F4fab@F4e46@p? F4e46@p?) (set! F4e48@make-i/o-file-protection-error (record-constructor F4e43@F4e3b)) (set! F4fac@F4e48@make-i/o-file-protection-error F4e48@make-i/o-file-protection-error) (set! F4e4a@i/o-file-protection-error? (condition-predicate F4e3f@F4e3a)) (set! F4fad@F4e4a@i/o-file-protection-error? F4e4a@i/o-file-protection-error?) (set! F4e4c@&i/o-file-protection-rtd F4e3f@F4e3a) (set! F4fae@F4e4c@&i/o-file-protection-rtd F4e4c@&i/o-file-protection-rtd) (set! F4e4e@&i/o-file-protection-rcd F4e43@F4e3b) (set! F4faf@F4e4e@&i/o-file-protection-rcd F4e4e@&i/o-file-protection-rcd) (set! F4e54@F4e4f (make-record-type-descriptor '&i/o-file-is-read-only F4e3f@F4e3a 'F4e52 '#f '#f '#())) (set! F4fb0@F4e54@F4e4f F4e54@F4e4f) (set! F4e56@F4e51 '#f) (set! F4fb1@F4e56@F4e51 F4e56@F4e51) (set! F4e58@F4e50 (make-record-constructor-descriptor F4e54@F4e4f F4e43@F4e3b F4e56@F4e51)) (set! F4fb2@F4e58@F4e50 F4e58@F4e50) (set! F4e5b@p? (record-predicate F4e54@F4e4f)) (set! F4fb3@F4e5b@p? F4e5b@p?) (set! F4e5d@make-i/o-file-is-read-only-error (record-constructor F4e58@F4e50)) (set! F4fb4@F4e5d@make-i/o-file-is-read-only-error F4e5d@make-i/o-file-is-read-only-error) (set! F4e5f@i/o-file-is-read-only-error? (condition-predicate F4e54@F4e4f)) (set! F4fb5@F4e5f@i/o-file-is-read-only-error? F4e5f@i/o-file-is-read-only-error?) (set! F4e61@&i/o-file-is-read-only-rtd F4e54@F4e4f) (set! F4fb6@F4e61@&i/o-file-is-read-only-rtd F4e61@&i/o-file-is-read-only-rtd) (set! F4e63@&i/o-file-is-read-only-rcd F4e58@F4e50) (set! F4fb7@F4e63@&i/o-file-is-read-only-rcd F4e63@&i/o-file-is-read-only-rcd) (set! F4e69@F4e64 (make-record-type-descriptor '&i/o-file-already-exists F4e26@F4e21 'F4e67 '#f '#f '#())) (set! F4fb8@F4e69@F4e64 F4e69@F4e64) (set! F4e6b@F4e66 '#f) (set! F4fb9@F4e6b@F4e66 F4e6b@F4e66) (set! F4e6d@F4e65 (make-record-constructor-descriptor F4e69@F4e64 F4e2a@F4e22 F4e6b@F4e66)) (set! F4fba@F4e6d@F4e65 F4e6d@F4e65) (set! F4e70@p? (record-predicate F4e69@F4e64)) (set! F4fbb@F4e70@p? F4e70@p?) (set! F4e72@make-i/o-file-already-exists-error (record-constructor F4e6d@F4e65)) (set! F4fbc@F4e72@make-i/o-file-already-exists-error F4e72@make-i/o-file-already-exists-error) (set! F4e74@i/o-file-already-exists-error? (condition-predicate F4e69@F4e64)) (set! F4fbd@F4e74@i/o-file-already-exists-error? F4e74@i/o-file-already-exists-error?) (set! F4e76@&i/o-file-already-exists-rtd F4e69@F4e64) (set! F4fbe@F4e76@&i/o-file-already-exists-rtd F4e76@&i/o-file-already-exists-rtd) (set! F4e78@&i/o-file-already-exists-rcd F4e6d@F4e65) (set! F4fbf@F4e78@&i/o-file-already-exists-rcd F4e78@&i/o-file-already-exists-rcd) (set! F4e7e@F4e79 (make-record-type-descriptor '&i/o-file-does-not-exist F4e26@F4e21 'F4e7c '#f '#f '#())) (set! F4fc0@F4e7e@F4e79 F4e7e@F4e79) (set! F4e80@F4e7b '#f) (set! F4fc1@F4e80@F4e7b F4e80@F4e7b) (set! F4e82@F4e7a (make-record-constructor-descriptor F4e7e@F4e79 F4e2a@F4e22 F4e80@F4e7b)) (set! F4fc2@F4e82@F4e7a F4e82@F4e7a) (set! F4e85@p? (record-predicate F4e7e@F4e79)) (set! F4fc3@F4e85@p? F4e85@p?) (set! F4e87@make-i/o-file-does-not-exist-error (record-constructor F4e82@F4e7a)) (set! F4fc4@F4e87@make-i/o-file-does-not-exist-error F4e87@make-i/o-file-does-not-exist-error) (set! F4e89@i/o-file-does-not-exist-error? (condition-predicate F4e7e@F4e79)) (set! F4fc5@F4e89@i/o-file-does-not-exist-error? F4e89@i/o-file-does-not-exist-error?) (set! F4e8b@&i/o-file-does-not-exist-rtd F4e7e@F4e79) (set! F4fc6@F4e8b@&i/o-file-does-not-exist-rtd F4e8b@&i/o-file-does-not-exist-rtd) (set! F4e8d@&i/o-file-does-not-exist-rcd F4e82@F4e7a) (set! F4fc7@F4e8d@&i/o-file-does-not-exist-rcd F4e8d@&i/o-file-does-not-exist-rcd) (set! F4e95@F4e90 (make-record-type-descriptor '&i/o-port F4dca@F4dc5 'F4e93 '#f '#f '#((immutable port)))) (set! F4fc8@F4e95@F4e90 F4e95@F4e90) (set! F4e97@F4e92 '#f) (set! F4fc9@F4e97@F4e92 F4e97@F4e92) (set! F4e99@F4e91 (make-record-constructor-descriptor F4e95@F4e90 F4dce@F4dc6 F4e97@F4e92)) (set! F4fca@F4e99@F4e91 F4e99@F4e91) (set! F4e9c@p? (record-predicate F4e95@F4e90)) (set! F4fcb@F4e9c@p? F4e9c@p?) (set! F4e9e@make-i/o-port-error (record-constructor F4e99@F4e91)) (set! F4fcc@F4e9e@make-i/o-port-error F4e9e@make-i/o-port-error) (set! F4ea0@F4e8f (record-accessor F4e95@F4e90 '0)) (set! F4fcd@F4ea0@F4e8f F4ea0@F4e8f) (set! F4ea2@i/o-port-error? (condition-predicate F4e95@F4e90)) (set! F4fce@F4ea2@i/o-port-error? F4ea2@i/o-port-error?) (set! F4ea4@i/o-error-port (condition-accessor F4e95@F4e90 F4ea0@F4e8f)) (set! F4fcf@F4ea4@i/o-error-port F4ea4@i/o-error-port) (set! F4ea6@&i/o-port-rtd F4e95@F4e90) (set! F4fd0@F4ea6@&i/o-port-rtd F4ea6@&i/o-port-rtd) (set! F4ea8@&i/o-port-rcd F4e99@F4e91) (set! F4fd1@F4ea8@&i/o-port-rcd F4ea8@&i/o-port-rcd) (set! F4eae@F4ea9 (make-record-type-descriptor '&i/o-decoding F4e95@F4e90 'F4eac '#f '#f '#())) (set! F4fd2@F4eae@F4ea9 F4eae@F4ea9) (set! F4eb0@F4eab '#f) (set! F4fd3@F4eb0@F4eab F4eb0@F4eab) (set! F4eb2@F4eaa (make-record-constructor-descriptor F4eae@F4ea9 F4e99@F4e91 F4eb0@F4eab)) (set! F4fd4@F4eb2@F4eaa F4eb2@F4eaa) (set! F4eb5@p? (record-predicate F4eae@F4ea9)) (set! F4fd5@F4eb5@p? F4eb5@p?) (set! F4eb7@make-i/o-decoding-error (record-constructor F4eb2@F4eaa)) (set! F4fd6@F4eb7@make-i/o-decoding-error F4eb7@make-i/o-decoding-error) (set! F4eb9@i/o-decoding-error? (condition-predicate F4eae@F4ea9)) (set! F4fd7@F4eb9@i/o-decoding-error? F4eb9@i/o-decoding-error?) (set! F4ebb@&i/o-decoding-rtd F4eae@F4ea9) (set! F4fd8@F4ebb@&i/o-decoding-rtd F4ebb@&i/o-decoding-rtd) (set! F4ebd@&i/o-decoding-rcd F4eb2@F4eaa) (set! F4fd9@F4ebd@&i/o-decoding-rcd F4ebd@&i/o-decoding-rcd) (set! F4ec5@F4ec0 (make-record-type-descriptor '&i/o-encoding F4e95@F4e90 'F4ec3 '#f '#f '#((immutable char)))) (set! F4fda@F4ec5@F4ec0 F4ec5@F4ec0) (set! F4ec7@F4ec2 '#f) (set! F4fdb@F4ec7@F4ec2 F4ec7@F4ec2) (set! F4ec9@F4ec1 (make-record-constructor-descriptor F4ec5@F4ec0 F4e99@F4e91 F4ec7@F4ec2)) (set! F4fdc@F4ec9@F4ec1 F4ec9@F4ec1) (set! F4ecc@p? (record-predicate F4ec5@F4ec0)) (set! F4fdd@F4ecc@p? F4ecc@p?) (set! F4ece@make-i/o-encoding-error (record-constructor F4ec9@F4ec1)) (set! F4fde@F4ece@make-i/o-encoding-error F4ece@make-i/o-encoding-error) (set! F4ed0@F4ebf (record-accessor F4ec5@F4ec0 '0)) (set! F4fdf@F4ed0@F4ebf F4ed0@F4ebf) (set! F4ed2@i/o-encoding-error? (condition-predicate F4ec5@F4ec0)) (set! F4fe0@F4ed2@i/o-encoding-error? F4ed2@i/o-encoding-error?) (set! F4ed4@i/o-encoding-error-char (condition-accessor F4ec5@F4ec0 F4ed0@F4ebf)) (set! F4fe1@F4ed4@i/o-encoding-error-char F4ed4@i/o-encoding-error-char) (set! F4ed6@&i/o-encoding-rtd F4ec5@F4ec0) (set! F4fe2@F4ed6@&i/o-encoding-rtd F4ed6@&i/o-encoding-rtd) (set! F4ed8@&i/o-encoding-rcd F4ec9@F4ec1) (set! F4fe3@F4ed8@&i/o-encoding-rcd F4ed8@&i/o-encoding-rcd) (set! F4ede@F4ed9 (make-record-type-descriptor '&no-infinities F4d6a@F4d65 'F4edc '#f '#f '#())) (set! F4fe4@F4ede@F4ed9 F4ede@F4ed9) (set! F4ee0@F4edb '#f) (set! F4fe5@F4ee0@F4edb F4ee0@F4edb) (set! F4ee2@F4eda (make-record-constructor-descriptor F4ede@F4ed9 F4d6e@F4d66 F4ee0@F4edb)) (set! F4fe6@F4ee2@F4eda F4ee2@F4eda) (set! F4ee5@p? (record-predicate F4ede@F4ed9)) (set! F4fe7@F4ee5@p? F4ee5@p?) (set! F4ee7@make-no-infinities-violation (record-constructor F4ee2@F4eda)) (set! F4fe8@F4ee7@make-no-infinities-violation F4ee7@make-no-infinities-violation) (set! F4ee9@no-infinities-violation? (condition-predicate F4ede@F4ed9)) (set! F4fe9@F4ee9@no-infinities-violation? F4ee9@no-infinities-violation?) (set! F4eeb@&no-infinities-rtd F4ede@F4ed9) (set! F4fea@F4eeb@&no-infinities-rtd F4eeb@&no-infinities-rtd) (set! F4eed@&no-infinities-rcd F4ee2@F4eda) (set! F4feb@F4eed@&no-infinities-rcd F4eed@&no-infinities-rcd) (set! F4ef3@F4eee (make-record-type-descriptor '&no-nans F4d6a@F4d65 'F4ef1 '#f '#f '#())) (set! F4fec@F4ef3@F4eee F4ef3@F4eee) (set! F4ef5@F4ef0 '#f) (set! F4fed@F4ef5@F4ef0 F4ef5@F4ef0) (set! F4ef7@F4eef (make-record-constructor-descriptor F4ef3@F4eee F4d6e@F4d66 F4ef5@F4ef0)) (set! F4fee@F4ef7@F4eef F4ef7@F4eef) (set! F4efa@p? (record-predicate F4ef3@F4eee)) (set! F4fef@F4efa@p? F4efa@p?) (set! F4efc@make-no-nans-violation (record-constructor F4ef7@F4eef)) (set! F4ff0@F4efc@make-no-nans-violation F4efc@make-no-nans-violation) (set! F4efe@no-nans-violation? (condition-predicate F4ef3@F4eee)) (set! F4ff1@F4efe@no-nans-violation? F4efe@no-nans-violation?) (set! F4f00@&no-nans-rtd F4ef3@F4eee) (set! F4ff2@F4f00@&no-nans-rtd F4f00@&no-nans-rtd) (set! F4f02@&no-nans-rcd F4ef7@F4eef) (set! F4ff3@F4f02@&no-nans-rcd F4f02@&no-nans-rcd) (void))
(begin (begin (F2a78@F2a2d@current-primitive-locations (lambda (F54bc@x) (let ((F54be@t (assq F54bc@x '((&no-nans-rcd . F4ff3@F4f02@&no-nans-rcd) (&no-nans-rtd . F4ff2@F4f00@&no-nans-rtd) (&no-infinities-rcd . F4feb@F4eed@&no-infinities-rcd) (&no-infinities-rtd . F4fea@F4eeb@&no-infinities-rtd) (&i/o-encoding-rcd . F4fe3@F4ed8@&i/o-encoding-rcd) (&i/o-encoding-rtd . F4fe2@F4ed6@&i/o-encoding-rtd) (&i/o-decoding-rcd . F4fd9@F4ebd@&i/o-decoding-rcd) (&i/o-decoding-rtd . F4fd8@F4ebb@&i/o-decoding-rtd) (&i/o-port-rcd . F4fd1@F4ea8@&i/o-port-rcd) (&i/o-port-rtd . F4fd0@F4ea6@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . F4fc7@F4e8d@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . F4fc6@F4e8b@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . F4fbf@F4e78@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . F4fbe@F4e76@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . F4fb7@F4e63@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . F4fb6@F4e61@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . F4faf@F4e4e@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . F4fae@F4e4c@&i/o-file-protection-rtd) (&i/o-filename-rcd . F4fa7@F4e39@&i/o-filename-rcd) (&i/o-filename-rtd . F4fa6@F4e37@&i/o-filename-rtd) (&i/o-invalid-position-rcd . F4f9d@F4e1e@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . F4f9c@F4e1c@&i/o-invalid-position-rtd) (&i/o-write-rcd . F4f93@F4e03@&i/o-write-rcd) (&i/o-write-rtd . F4f92@F4e01@&i/o-write-rtd) (&i/o-read-rcd . F4f8b@F4dee@&i/o-read-rcd) (&i/o-read-rtd . F4f8a@F4dec@&i/o-read-rtd) (&i/o-rcd . F4f83@F4dd9@&i/o-rcd) (&i/o-rtd . F4f82@F4dd7@&i/o-rtd) (&undefined-rcd . F4f7b@F4dc4@&undefined-rcd) (&undefined-rtd . F4f7a@F4dc2@&undefined-rtd) (&syntax-rcd . F4f73@F4daf@&syntax-rcd) (&syntax-rtd . F4f72@F4dad@&syntax-rtd) (&lexical-rcd . F4f67@F4d8e@&lexical-rcd) (&lexical-rtd . F4f66@F4d8c@&lexical-rtd) (&implementation-restriction-rcd . F4f5f@F4d79@&implementation-restriction-rcd) (&implementation-restriction-rtd . F4f5e@F4d77@&implementation-restriction-rtd) (&non-continuable-rcd . F4f57@F4d64@&non-continuable-rcd) (&non-continuable-rtd . F4f56@F4d62@&non-continuable-rtd) (&who-rcd . F4f4f@F4d4f@&who-rcd) (&who-rtd . F4f4e@F4d4d@&who-rtd) (&irritants-rcd . F4f45@F4d34@&irritants-rcd) (&irritants-rtd . F4f44@F4d32@&irritants-rtd) (&assertion-rcd . F4f3b@F4d19@&assertion-rcd) (&assertion-rtd . F4f3a@F4d17@&assertion-rtd) (&violation-rcd . F4f33@F4d04@&violation-rcd) (&violation-rtd . F4f32@F4d02@&violation-rtd) (&error-rcd . F4f2b@F4cef@&error-rcd) (&error-rtd . F4f2a@F4ced@&error-rtd) (&serious-rcd . F4f23@F4cda@&serious-rcd) (&serious-rtd . F4f22@F4cd8@&serious-rtd) (&warning-rcd . F4f1b@F4cc5@&warning-rcd) (&warning-rtd . F4f1a@F4cc3@&warning-rtd) (&message-rcd . F4f13@F4cb0@&message-rcd) (&message-rtd . F4f12@F4cae@&message-rtd) (&condition-rcd . F4f09@F4c51@&condition-rcd) (&condition-rtd . F4f08@F4c4f@&condition-rtd) (syntax-error . F4c2b@F31cf@syntax-error) (syntax-dispatch . F4bc9@F30f3@syntax-dispatch) (load . F515b@F5011@load) (interaction-environment . F4c34@F31e1@interaction-environment) (library-path . F2cef@F2b1b@library-path) (mosh-cache-dir . F2a26@F2905@mosh-cache-dir) (make-parameter . F2a25@F2903@make-parameter) (make-variable-transformer . F4b86@F2f1e@make-variable-transformer) (identifier? . F4c2e@F31d5@identifier?) (generate-temporaries . F4c24@F31c1@generate-temporaries) (free-identifier=? . F4c25@F31c3@free-identifier=?) (syntax->datum . F4c30@F31d9@syntax->datum) (datum->syntax . F4c2f@F31d7@datum->syntax) (bound-identifier=? . F4c26@F31c5@bound-identifier=?) (make-i/o-write-error . F4f90@F4dfd@make-i/o-write-error) (make-i/o-read-error . F4f88@F4de8@make-i/o-read-error) (make-i/o-port-error . F4fcc@F4e9e@make-i/o-port-error) (make-i/o-invalid-position-error . F4f98@F4e14@make-i/o-invalid-position-error) (make-i/o-filename-error . F4fa2@F4e2f@make-i/o-filename-error) (make-i/o-file-protection-error . F4fac@F4e48@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . F4fb4@F4e5d@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . F4fc4@F4e87@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . F4fbc@F4e72@make-i/o-file-already-exists-error) (make-i/o-error . F4f80@F4dd3@make-i/o-error) (make-i/o-encoding-error . F4fde@F4ece@make-i/o-encoding-error) (make-i/o-decoding-error . F4fd6@F4eb7@make-i/o-decoding-error) (i/o-write-error? . F4f91@F4dff@i/o-write-error?) (i/o-read-error? . F4f89@F4dea@i/o-read-error?) (i/o-port-error? . F4fce@F4ea2@i/o-port-error?) (i/o-invalid-position-error? . F4f9a@F4e18@i/o-invalid-position-error?) (i/o-filename-error? . F4fa4@F4e33@i/o-filename-error?) (i/o-file-protection-error? . F4fad@F4e4a@i/o-file-protection-error?) (i/o-file-is-read-only-error? . F4fb5@F4e5f@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . F4fc5@F4e89@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . F4fbd@F4e74@i/o-file-already-exists-error?) (i/o-error? . F4f81@F4dd5@i/o-error?) (i/o-error-position . F4f9b@F4e1a@i/o-error-position) (i/o-error-port . F4fcf@F4ea4@i/o-error-port) (i/o-error-filename . F4fa5@F4e35@i/o-error-filename) (i/o-encoding-error? . F4fe0@F4ed2@i/o-encoding-error?) (i/o-encoding-error-char . F4fe1@F4ed4@i/o-encoding-error-char) (i/o-decoding-error? . F4fd7@F4eb9@i/o-decoding-error?) (scheme-report-environment . F4c1b@F31af@scheme-report-environment) (null-environment . F4c1a@F31ad@null-environment) (command-line . F5158@F500b@command-line) (eval . F4c1d@F31b3@eval) (environment . F4c19@F31ab@environment) (who-condition? . F4f4c@F4d49@who-condition?) (warning? . F4f19@F4cc1@warning?) (violation? . F4f31@F4d00@violation?) (undefined-violation? . F4f79@F4dc0@undefined-violation?) (syntax-violation? . F4f6f@F4da7@syntax-violation?) (syntax-violation-subform . F4f71@F4dab@syntax-violation-subform) (syntax-violation-form . F4f70@F4da9@syntax-violation-form) (syntax-violation . F4c2d@F31d3@syntax-violation) (serious-condition? . F4f21@F4cd6@serious-condition?) (non-continuable-violation? . F4f55@F4d60@non-continuable-violation?) (message-condition? . F4f10@F4caa@message-condition?) (make-who-condition . F4f4a@F4d45@make-who-condition) (make-warning . F4f18@F4cbf@make-warning) (make-violation . F4f30@F4cfe@make-violation) (make-undefined-violation . F4f78@F4dbe@make-undefined-violation) (make-syntax-violation . F4f6c@F4da1@make-syntax-violation) (make-serious-condition . F4f20@F4cd4@make-serious-condition) (make-non-continuable-violation . F4f54@F4d5e@make-non-continuable-violation) (make-message-condition . F4f0e@F4ca6@make-message-condition) (make-lexical-violation . F4f64@F4d88@make-lexical-violation) (make-irritants-condition . F4f40@F4d2a@make-irritants-condition) (make-implementation-restriction-violation . F4f5c@F4d73@make-implementation-restriction-violation) (make-error . F4f28@F4ce9@make-error) (make-assertion-violation . F4f38@F4d13@make-assertion-violation) (lexical-violation? . F4f65@F4d8a@lexical-violation?) (irritants-condition? . F4f42@F4d2e@irritants-condition?) (implementation-restriction-violation? . F4f5d@F4d75@implementation-restriction-violation?) (error? . F4f29@F4ceb@error?) (condition-who . F4f4d@F4d4b@condition-who) (condition-message . F4f11@F4cac@condition-message) (condition-irritants . F4f43@F4d30@condition-irritants) (assertion-violation? . F4f39@F4d15@assertion-violation?) (no-nans-violation? . F4ff1@F4efe@no-nans-violation?) (no-infinities-violation? . F4fe9@F4ee9@no-infinities-violation?) (make-no-nans-violation . F4ff0@F4efc@make-no-nans-violation) (make-no-infinities-violation . F4fe8@F4ee7@make-no-infinities-violation) (assertion-error . F4c2a@F31cd@assertion-error))))) (if F54be@t (cdr F54be@t) '#f)))) (F2cff@F2b3b@install-library 'F5499 '(mosh interaction) '() '() '() '() '((regexp? . F5491) (alist->eq-hash-table . F548d) (format . F548a) (string-split . F547e) (call-process . F5478) (set-current-directory! . F5474) (expand-path . F5473) (current-directory . F5472) (%spawn . F5471) (%waitpid . F5470) (simple-struct-name . F546f) (simple-struct-set! . F546e) (simple-struct-ref . F546d) (make-simple-struct . F546c) (simple-struct? . F546b) (pointer-ref-c-int64 . F546a) (pointer-ref-c-int32 . F5469) (pointer-ref-c-int16 . F5468) (pointer-ref-c-int8 . F5467) (pointer-ref-c-uint64 . F5466) (pointer-ref-c-uint32 . F5465) (pointer-ref-c-uint16 . F5464) (pointer-ref-c-uint8 . F5463) (pointer-set-c-uint64! . F5462) (pointer-set-c-uint32! . F5461) (pointer-set-c-uint16! . F5460) (pointer-set-c-uint8! . F545f) (pointer-set-c-int64! . F545e) (pointer-set-c-int32! . F545d) (pointer-set-c-int16! . F545c) (pointer-set-c-int8! . F545b) (pointer-set-c-pointer! . F545a) (pointer-set-c-double! . F5459) (pointer-set-c-float! . F5458) (pointer-set-c-long-long! . F5457) (pointer-set-c-long! . F5456) (pointer-set-c-int! . F5455) (pointer-set-c-short! . F5454) (pointer-set-c-char! . F5453) (pointer-ref-c-pointer . F5452) (pointer-ref-c-double . F5451) (pointer-ref-c-float . F5450) (pointer-ref-c-unsigned-long-long . F544f) (pointer-ref-c-signed-long-long . F544e) (pointer-ref-c-unsigned-long . F544d) (pointer-ref-c-signed-long . F544c) (pointer-ref-c-unsigned-int . F544b) (pointer-ref-c-signed-int . F544a) (pointer-ref-c-unsigned-short . F5449) (pointer-ref-c-signed-short . F5448) (pointer-ref-c-unsigned-char . F5447) (pointer-ref-c-signed-char . F5446) (pointer->integer . F5445) (integer->pointer . F5444) (pointer? . F5443) (shared-errno . F5442) (%ffi-supported? . F5438) (%ffi-pointer->string . F5437) (%ffi-call . F5436) (%ffi-lookup . F5435) (%ffi-open . F5434) (null-terminated-utf8->string . F5433) (null-terminated-bytevector->string . F5432) (%fork . F5431) (%pipe . F5430) (p . F542f) (whereis . F5413) (register . F5412) (vm-join! . F5411) (vm-set-value! . F5410) (vm? . F540f) (main-vm? . F540e) (vm-eval . F540d) (vm-self . F540c) (vm-start! . F540b) (make-vm . F540a) (mutex-try-lock! . F5409) (mutex-unlock! . F5408) (mutex-lock! . F5407) (mutex? . F5406) (make-mutex . F5405) (condition-variable-notify-all! . F5404) (condition-variable-notify! . F5403) (condition-variable-wait! . F5402) (make-condition-variable . F5401) (string-upcase . F53e4) (string-titlecase . F53e3) (string-normalize-nfkd . F53e2) (string-normalize-nfkc . F53e1) (string-normalize-nfd . F53e0) (string-normalize-nfc . F53df) (string-foldcase . F53de) (string-downcase . F53dd) (string-ci>? . F53dc) (string-ci>=? . F53db) (string-ci=? . F53da) (string-ci<? . F53d9) (string-ci<=? . F53d8) (char-whitespace? . F53d7) (char-upper-case? . F53d6) (char-title-case? . F53d5) (char-numeric? . F53d4) (char-lower-case? . F53d3) (char-general-category . F53d2) (char-upcase . F53d1) (char-titlecase . F53d0) (char-foldcase . F53cf) (char-downcase . F53ce) (char-ci>? . F53cd) (char-ci>=? . F53cc) (char-ci=? . F53cb) (char-ci<? . F53ca) (char-ci<=? . F53c9) (char-alphabetic? . F53c8) (make-variable-transformer . F2f1d) (identifier? . F31d4) (generate-temporaries . F31c0) (free-identifier=? . F31c2) (syntax->datum . F31d8) (datum->syntax . F31d6) (bound-identifier=? . F31c4) (record-type-descriptor? . F53c7) (record-predicate . F53c6) (record-mutator . F53c5) (record-constructor . F53c4) (record-accessor . F53c3) (make-record-type-descriptor . F53c2) (make-record-constructor-descriptor . F53c1) (record? . F53c0) (record-type-uid . F53bf) (record-type-sealed? . F53be) (record-type-parent . F53bd) (record-type-opaque? . F53bc) (record-type-name . F53bb) (record-type-generative? . F53ba) (record-type-field-names . F53b9) (record-rtd . F53b8) (record-field-mutable? . F53b7) (delete-file . F53b6) (file-exists? . F53b5) (vector-sort! . F53b4) (vector-sort . F53b3) (list-sort . F53b2) (symbol-hash . F53b1) (string-ci-hash . F53b0) (string-hash . F53af) (equal-hash . F53ae) (hashtable-equivalence-function . F53ad) (make-hashtable . F53ac) (hashtable-hash-function . F53ab) (make-eqv-hashtable . F53aa) (make-eq-hashtable . F53a9) (hashtable? . F53a8) (hashtable-update! . F53a7) (hashtable-size . F53a6) (hashtable-set! . F53a5) (hashtable-ref . F53a4) (hashtable-mutable? . F53a3) (hashtable-keys . F53a2) (hashtable-entries . F53a1) (hashtable-delete! . F53a0) (hashtable-copy . F539f) (hashtable-contains? . F539e) (hashtable-clear! . F539d) (call-with-output-file . F539c) (call-with-input-file . F539b) (write-char . F539a) (write . F5399) (with-output-to-file . F5398) (with-input-from-file . F5397) (read-char . F5396) (read . F5395) (peek-char . F5394) (open-output-file . F5393) (open-input-file . F5392) (newline . F5391) (display . F5390) (close-output-port . F538f) (close-input-port . F538e) (eof-object? . F538d) (eof-object . F538c) (current-error-port . F538b) (current-output-port . F538a) (current-input-port . F5389) (output-port? . F5388) (input-port? . F5387) (utf-8-codec . F5386) (utf-16-codec . F5385) (transcoder-error-handling-mode . F5384) (transcoder-eol-style . F5383) (transcoder-codec . F5382) (transcoded-port . F5381) (textual-port? . F5380) (string->bytevector . F537f) (standard-output-port . F537e) (standard-input-port . F537d) (standard-error-port . F537c) (set-port-position! . F537b) (put-u8 . F537a) (put-string . F5379) (put-datum . F5378) (put-char . F5377) (put-bytevector . F5376) (port? . F5375) (port-transcoder . F5374) (port-position . F5373) (port-has-set-port-position!? . F5372) (port-has-port-position? . F5371) (port-eof? . F5370) (output-port-buffer-mode . F536f) (open-string-output-port . F536e) (open-string-input-port . F536d) (open-file-output-port . F536c) (open-file-input/output-port . F536b) (open-file-input-port . F536a) (open-bytevector-output-port . F5369) (open-bytevector-input-port . F5368) (native-transcoder . F5367) (native-eol-style . F5366) (make-transcoder . F5365) (latin-1-codec . F5364) (make-i/o-write-error . F4dfc) (make-i/o-read-error . F4de7) (make-i/o-port-error . F4e9d) (make-i/o-invalid-position-error . F4e13) (make-i/o-filename-error . F4e2e) (make-i/o-file-protection-error . F4e47) (make-i/o-file-is-read-only-error . F4e5c) (make-i/o-file-does-not-exist-error . F4e86) (make-i/o-file-already-exists-error . F4e71) (make-i/o-error . F4dd2) (make-i/o-encoding-error . F4ecd) (make-i/o-decoding-error . F4eb6) (make-custom-textual-output-port . F5363) (make-custom-textual-input/output-port . F5362) (make-custom-textual-input-port . F5361) (make-custom-binary-output-port . F5360) (make-custom-binary-input/output-port . F535f) (make-custom-binary-input-port . F535e) (make-bytevector . F535d) (lookahead-u8 . F535c) (lookahead-char . F535b) (i/o-write-error? . F4dfe) (i/o-read-error? . F4de9) (i/o-port-error? . F4ea1) (i/o-invalid-position-error? . F4e17) (i/o-filename-error? . F4e32) (i/o-file-protection-error? . F4e49) (i/o-file-is-read-only-error? . F4e5e) (i/o-file-does-not-exist-error? . F4e88) (i/o-file-already-exists-error? . F4e73) (i/o-error? . F4dd4) (i/o-error-position . F4e19) (i/o-error-port . F4ea3) (i/o-error-filename . F4e34) (i/o-encoding-error? . F4ed1) (i/o-encoding-error-char . F4ed3) (i/o-decoding-error? . F4eb8) (get-u8 . F535a) (get-string-n! . F5359) (get-string-n . F5358) (get-string-all . F5357) (get-line . F5356) (get-datum . F5355) (get-char . F5354) (get-bytevector-some . F5353) (get-bytevector-n! . F5352) (get-bytevector-n . F5351) (get-bytevector-all . F5350) (flush-output-port . F534f) (close-port . F534e) (exit . F5346) (command-line . F500a) (string-fill! . F5345) (string-set! . F5344) (set-cdr! . F5343) (set-car! . F5342) (remove . F5341) (remv . F5340) (remp . F533f) (remq . F533e) (partition . F533d) (memv . F533c) (memq . F533b) (memp . F533a) (member . F5339) (exists . F5338) (for-all . F5337) (fold-right . F5336) (fold-left . F5335) (find . F5334) (filter . F5333) (cons* . F5332) (assv . F5331) (assq . F5330) (assp . F532f) (assoc . F532e) (call-with-string-output-port . F532d) (call-with-port . F532c) (call-with-bytevector-output-port . F532b) (bytevector->string . F532a) (buffer-mode? . F5329) (binary-port? . F5328) (with-exception-handler . F5327) (raise-continuable . F5326) (raise . F5325) (eval . F31b2) (environment . F31aa) (make-enumeration . F5324) (enum-set=? . F5323) (enum-set-universe . F5322) (enum-set-union . F5321) (enum-set-subset? . F5320) (enum-set-projection . F531f) (enum-set-member? . F531e) (enum-set-intersection . F531d) (enum-set-indexer . F531c) (enum-set-difference . F531b) (enum-set-constructor . F531a) (enum-set-complement . F5319) (enum-set->list . F5318) (who-condition? . F4d48) (warning? . F4cc0) (violation? . F4cff) (undefined-violation? . F4dbf) (syntax-violation? . F4da6) (syntax-violation-subform . F4daa) (syntax-violation-form . F4da8) (syntax-violation . F31d2) (simple-conditions . F5317) (serious-condition? . F4cd5) (non-continuable-violation? . F4d5f) (message-condition? . F4ca9) (make-who-condition . F4d44) (make-warning . F4cbe) (make-violation . F4cfd) (make-undefined-violation . F4dbd) (make-syntax-violation . F4da0) (make-serious-condition . F4cd3) (make-non-continuable-violation . F4d5d) (make-message-condition . F4ca5) (make-lexical-violation . F4d87) (make-irritants-condition . F4d29) (make-implementation-restriction-violation . F4d72) (make-error . F4ce8) (make-assertion-violation . F4d12) (lexical-violation? . F4d89) (irritants-condition? . F4d2d) (implementation-restriction-violation? . F4d74) (error? . F4cea) (condition-who . F4d4a) (condition-predicate . F5316) (condition-message . F4cab) (condition-irritants . F4d2f) (condition-accessor . F5315) (condition . F5314) (assertion-violation? . F4d14) (condition? . F5313) (utf32->string . F5312) (utf16->string . F5311) (utf8->string . F5310) (uint-list->bytevector . F530f) (u8-list->bytevector . F530e) (string->utf8 . F530d) (string->utf32 . F530c) (string->utf16 . F530b) (sint-list->bytevector . F530a) (native-endianness . F5309) (bytevector? . F5308) (bytevector=? . F5307) (bytevector-uint-set! . F5306) (bytevector-uint-ref . F5305) (bytevector-u8-set! . F5304) (bytevector-u8-ref . F5303) (bytevector-u64-set! . F5302) (bytevector-u64-ref . F5301) (bytevector-u64-native-set! . F5300) (bytevector-u64-native-ref . F52ff) (bytevector-u32-set! . F52fe) (bytevector-u32-ref . F52fd) (bytevector-u32-native-set! . F52fc) (bytevector-u32-native-ref . F52fb) (bytevector-u16-set! . F52fa) (bytevector-u16-ref . F52f9) (bytevector-u16-native-set! . F52f8) (bytevector-u16-native-ref . F52f7) (bytevector-sint-set! . F52f6) (bytevector-sint-ref . F52f5) (bytevector-s8-set! . F52f4) (bytevector-s8-ref . F52f3) (bytevector-s64-set! . F52f2) (bytevector-s64-ref . F52f1) (bytevector-s64-native-set! . F52f0) (bytevector-s64-native-ref . F52ef) (bytevector-s32-set! . F52ee) (bytevector-s32-ref . F52ed) (bytevector-s32-native-set! . F52ec) (bytevector-s32-native-ref . F52eb) (bytevector-s16-set! . F52ea) (bytevector-s16-ref . F52e9) (bytevector-s16-native-set! . F52e8) (bytevector-s16-native-ref . F52e7) (bytevector-length . F52e6) (bytevector-ieee-single-ref . F52e5) (bytevector-ieee-single-set! . F52e4) (bytevector-ieee-single-native-set! . F52e3) (bytevector-ieee-single-native-ref . F52e2) (bytevector-ieee-double-set! . F52e1) (bytevector-ieee-double-ref . F52e0) (bytevector-ieee-double-native-set! . F52df) (bytevector-ieee-double-native-ref . F52de) (bytevector-fill! . F52dd) (bytevector-copy! . F52dc) (bytevector-copy . F52db) (bytevector->uint-list . F52da) (bytevector->u8-list . F52d9) (bytevector->sint-list . F52d8) (no-nans-violation? . F4efd) (no-infinities-violation? . F4ee8) (make-no-nans-violation . F4efb) (make-no-infinities-violation . F4ee6) (real->flonum . F52d7) (flzero? . F52d6) (fltruncate . F52d5) (fltan . F52d4) (flsqrt . F52d3) (flsin . F52d2) (flround . F52d1) (flpositive? . F52d0) (flonum? . F52cf) (flodd? . F52ce) (flnumerator . F52cd) (flnegative? . F52cc) (flnan? . F52cb) (flmod0 . F52ca) (flmod . F52c9) (flmin . F52c8) (flmax . F52c7) (fllog . F52c6) (flinteger? . F52c5) (flinfinite? . F52c4) (flfloor . F52c3) (flfinite? . F52c2) (flexpt . F52c1) (flexp . F52c0) (fleven? . F52bf) (fldiv0-and-mod0 . F52be) (fldiv0 . F52bd) (fldiv-and-mod . F52bc) (fldiv . F52bb) (fldenominator . F52ba) (flcos . F52b9) (flceiling . F52b8) (flatan . F52b7) (flasin . F52b6) (flacos . F52b5) (flabs . F52b4) (fl>? . F52b3) (fl>=? . F52b2) (fl=? . F52b1) (fl<? . F52b0) (fl<=? . F52af) (fl/ . F52ae) (fl- . F52ad) (fl+ . F52ac) (fl* . F52ab) (fixnum->flonum . F52aa) (fxzero? . F52a9) (fxxor . F52a8) (fxrotate-bit-field . F52a7) (fxreverse-bit-field . F52a6) (fxpositive? . F52a5) (fxodd? . F52a4) (fxnot . F52a3) (fxnegative? . F52a2) (fxmod0 . F52a1) (fxmod . F52a0) (fxmin . F529f) (fxmax . F529e) (fxlength . F529d) (fxior . F529c) (fxif . F529b) (fxfirst-bit-set . F529a) (fxeven? . F5299) (fxdiv0-and-mod0 . F5298) (fxdiv0 . F5297) (fxdiv-and-mod . F5296) (fxdiv . F5295) (fxcopy-bit-field . F5294) (fxcopy-bit . F5293) (fxbit-set? . F5292) (fxbit-field . F5291) (fxbit-count . F5290) (fxarithmetic-shift-right . F528f) (fxarithmetic-shift-left . F528e) (fxarithmetic-shift . F528d) (fxand . F528c) (fx>? . F528b) (fx>=? . F528a) (fx=? . F5289) (fx<? . F5288) (fx<=? . F5287) (fx-/carry . F5286) (fx- . F5285) (fx+/carry . F5284) (fx+ . F5283) (fx*/carry . F5282) (fx* . F5281) (greatest-fixnum . F5280) (least-fixnum . F527f) (fixnum-width . F527e) (fixnum? . F527d) (bitwise-rotate-bit-field . F527c) (bitwise-reverse-bit-field . F527b) (bitwise-length . F527a) (bitwise-if . F5279) (bitwise-first-bit-set . F5278) (bitwise-copy-bit-field . F5277) (bitwise-copy-bit . F5276) (bitwise-bit-set? . F5275) (bitwise-bit-field . F5274) (bitwise-bit-count . F5273) (bitwise-xor . F5272) (bitwise-ior . F5271) (bitwise-and . F5270) (bitwise-not . F526f) (bitwise-arithmetic-shift-right . F526e) (bitwise-arithmetic-shift-left . F526d) (bitwise-arithmetic-shift . F526c) (zero? . F526b) (vector? . F526a) (vector-set! . F5269) (vector-ref . F5268) (vector-map . F5267) (vector-length . F5266) (vector-for-each . F5265) (vector-fill! . F5264) (vector->list . F5263) (vector . F5262) (values . F5261) (truncate . F5260) (tan . F525f) (symbol? . F525e) (symbol=? . F525d) (symbol->string . F525c) (substring . F525b) (string? . F525a) (string>? . F5259) (string>=? . F5258) (string=? . F5257) (string<? . F5256) (string<=? . F5255) (string-ref . F5254) (string-length . F5253) (string-for-each . F5252) (string-copy . F5251) (string-append . F5250) (string->symbol . F524f) (string->number . F524e) (string->list . F524d) (string . F524c) (sqrt . F524b) (sin . F524a) (round . F5249) (reverse . F5248) (real? . F5247) (real-valued? . F5246) (real-part . F5245) (rationalize . F5244) (rational? . F5243) (rational-valued? . F5242) (procedure? . F5241) (positive? . F5240) (pair? . F523f) (odd? . F523e) (numerator . F523d) (number? . F523c) (number->string . F523b) (null? . F523a) (not . F5239) (negative? . F5238) (nan? . F5237) (min . F5236) (max . F5235) (map . F5234) (make-vector . F5233) (make-string . F5232) (make-rectangular . F5231) (make-polar . F5230) (magnitude . F522f) (log . F522e) (list? . F522d) (list-tail . F522c) (list-ref . F522b) (list->vector . F522a) (list->string . F5229) (list . F5228) (length . F5227) (lcm . F5226) (integer? . F5225) (integer-valued? . F5224) (integer->char . F5223) (infinite? . F5222) (inexact? . F5221) (inexact . F5220) (imag-part . F521f) (gcd . F521e) (for-each . F521d) (floor . F521c) (finite? . F521b) (expt . F521a) (exp . F5219) (exact? . F5218) (exact-integer-sqrt . F5217) (exact . F5216) (even? . F5215) (error . F5214) (eqv? . F5213) (equal? . F5212) (eq? . F5211) (dynamic-wind . F5210) (div0-and-mod0 . F520f) (mod0 . F520e) (div0 . F520d) (div-and-mod . F520c) (mod . F520b) (div . F520a) (denominator . F5209) (cos . F5208) (cons . F5207) (complex? . F5206) (char? . F5205) (char>? . F5204) (char>=? . F5203) (char=? . F5202) (char<? . F5201) (char<=? . F5200) (char->integer . F51ff) (ceiling . F51fe) (call-with-values . F51fd) (call/cc . F51fc) (call-with-current-continuation . F51fb) (cddddr . F51fa) (cdddar . F51f9) (cddadr . F51f8) (cddaar . F51f7) (cdaddr . F51f6) (cdadar . F51f5) (cdaadr . F51f4) (cdaaar . F51f3) (cadddr . F51f2) (caddar . F51f1) (cadadr . F51f0) (cadaar . F51ef) (caaddr . F51ee) (caadar . F51ed) (caaadr . F51ec) (caaaar . F51eb) (cdddr . F51ea) (cddar . F51e9) (cdadr . F51e8) (cdaar . F51e7) (caddr . F51e6) (cadar . F51e5) (caadr . F51e4) (caaar . F51e3) (cddr . F51e2) (cdar . F51e1) (cadr . F51e0) (caar . F51df) (cdr . F51de) (car . F51dd) (boolean? . F51dc) (boolean=? . F51db) (atan . F51da) (assertion-violation . F51d9) (asin . F51d8) (apply . F51d7) (append . F51d6) (angle . F51d5) (acos . F51d4) (abs . F51d3) (/ . F51d2) (* . F51d1) (- . F51d0) (+ . F51cf) (>= . F51ce) (> . F51cd) (= . F51cc) (<= . F51cb) (< . F51ca) (library . F51c9) (&no-nans . F51c8) (&no-infinities . F51c7) (&i/o-encoding . F51c6) (&i/o-decoding . F51c5) (&i/o-port . F51c4) (&i/o-file-does-not-exist . F51c3) (&i/o-file-already-exists . F51c2) (&i/o-file-is-read-only . F51c1) (&i/o-file-protection . F51c0) (&i/o-filename . F51bf) (&i/o-invalid-position . F51be) (&i/o-write . F51bd) (&i/o-read . F51bc) (&i/o . F51bb) (&undefined . F51ba) (&syntax . F51b9) (&lexical . F51b8) (&implementation-restriction . F51b7) (&non-continuable . F51b6) (&who . F51b5) (&irritants . F51b4) (&assertion . F51b3) (&violation . F51b2) (&error . F51b1) (&serious . F51b0) (&warning . F51af) (&message . F51ae) (&condition . F51ad) (define-condition-type . F51ac) (define-enumeration . F51ab) (define-record-type . F51aa) (parent-rtd . F51a9) (nongenerative . F51a8) (opaque . F51a7) (sealed . F51a6) (protocol . F51a5) (parent . F51a4) (immutable . F51a3) (mutable . F51a2) (fields . F51a1) (error-handling-mode . F51a0) (file-options . F519f) (buffer-mode . F519e) (eol-style . F519d) (guard . F519c) (unsyntax-splicing . F5199) (unsyntax . F5198) (unquote-splicing . F5197) (unquote . F5196) (_ . F5195) (else . F5194) (=> . F5193) (... . F5192) (assert . F5191) (endianness . F5190) (time . F518e) (do . F518d) (cond . F518c) (let* . F518b) (let*-values . F518a) (let-values . F5189) (identifier-syntax . F5188) (with-syntax . F5187) (quasisyntax . F5186) (quasiquote . F5185) (syntax-rules . F5184) (include . F5183) (record-constructor-descriptor . F5181) (record-type-descriptor . F5180) (case . F517f) (unless . F517d) (when . F517c) (or . F517b) (and . F517a) (if . F5179) (let . F5178) (letrec* . F5177) (letrec . F5176) (case-lambda . F5174) (lambda . F5173) (syntax . F5172) (syntax-case . F5171) (quote . F5170) (letrec-syntax . F516e) (let-syntax . F516d) (set! . F516c) (import . F516b) (begin . F516a) (define-syntax . F5168) (define . F5167)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F549a '(psyntax null-environment-5) '() '() '() '() '((make-promise . F5347) (unquote-splicing . F5197) (unquote . F5196) (_ . F5195) (else . F5194) (=> . F5193) (... . F5192) (delay . F518f) (do . F518d) (cond . F518c) (let* . F518b) (quasiquote . F5185) (syntax-rules . F5184) (case . F517f) (or . F517b) (and . F517a) (if . F5179) (let . F5178) (letrec . F5176) (lambda . F5173) (quote . F5170) (letrec-syntax . F516e) (let-syntax . F516d) (set! . F516c) (begin . F516a) (define-syntax . F5168) (define . F5167)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F549b '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . F53dc) (string-ci>=? . F53db) (string-ci=? . F53da) (string-ci<? . F53d9) (string-ci<=? . F53d8) (char-whitespace? . F53d7) (char-upper-case? . F53d6) (char-numeric? . F53d4) (char-lower-case? . F53d3) (char-upcase . F53d1) (char-downcase . F53ce) (char-ci>? . F53cd) (char-ci>=? . F53cc) (char-ci=? . F53cb) (char-ci<? . F53ca) (char-ci<=? . F53c9) (char-alphabetic? . F53c8) (call-with-output-file . F539c) (call-with-input-file . F539b) (write-char . F539a) (write . F5399) (with-output-to-file . F5398) (with-input-from-file . F5397) (read-char . F5396) (read . F5395) (peek-char . F5394) (open-output-file . F5393) (open-input-file . F5392) (newline . F5391) (display . F5390) (close-output-port . F538f) (close-input-port . F538e) (eof-object . F538c) (current-output-port . F538a) (current-input-port . F5389) (output-port? . F5388) (input-port? . F5387) (scheme-report-environment . F31ae) (quotient . F534d) (null-environment . F31ac) (remainder . F534c) (modulo . F534b) (inexact->exact . F534a) (force . F5349) (exact->inexact . F5348) (make-promise . F5347) (string-fill! . F5345) (string-set! . F5344) (set-cdr! . F5343) (set-car! . F5342) (memv . F533c) (memq . F533b) (member . F5339) (assv . F5331) (assq . F5330) (assoc . F532e) (eval . F31b2) (zero? . F526b) (vector? . F526a) (vector-set! . F5269) (vector-ref . F5268) (vector-length . F5266) (vector-fill! . F5264) (vector->list . F5263) (vector . F5262) (values . F5261) (truncate . F5260) (tan . F525f) (symbol? . F525e) (symbol->string . F525c) (substring . F525b) (string? . F525a) (string>? . F5259) (string>=? . F5258) (string=? . F5257) (string<? . F5256) (string<=? . F5255) (string-ref . F5254) (string-length . F5253) (string-copy . F5251) (string-append . F5250) (string->symbol . F524f) (string->number . F524e) (string->list . F524d) (string . F524c) (sqrt . F524b) (sin . F524a) (round . F5249) (reverse . F5248) (real? . F5247) (real-part . F5245) (rationalize . F5244) (rational? . F5243) (procedure? . F5241) (positive? . F5240) (pair? . F523f) (odd? . F523e) (numerator . F523d) (number? . F523c) (number->string . F523b) (not . F5239) (negative? . F5238) (min . F5236) (max . F5235) (map . F5234) (make-vector . F5233) (make-string . F5232) (make-rectangular . F5231) (make-polar . F5230) (magnitude . F522f) (log . F522e) (list? . F522d) (list-tail . F522c) (list-ref . F522b) (list->vector . F522a) (list->string . F5229) (list . F5228) (length . F5227) (lcm . F5226) (integer? . F5225) (integer->char . F5223) (inexact? . F5221) (imag-part . F521f) (gcd . F521e) (for-each . F521d) (floor . F521c) (expt . F521a) (exp . F5219) (exact? . F5218) (even? . F5215) (eqv? . F5213) (equal? . F5212) (eq? . F5211) (dynamic-wind . F5210) (denominator . F5209) (cos . F5208) (cons . F5207) (complex? . F5206) (char? . F5205) (char>? . F5204) (char>=? . F5203) (char=? . F5202) (char<? . F5201) (char<=? . F5200) (char->integer . F51ff) (ceiling . F51fe) (call-with-values . F51fd) (call-with-current-continuation . F51fb) (cddddr . F51fa) (cdddar . F51f9) (cddadr . F51f8) (cddaar . F51f7) (cdaddr . F51f6) (cdadar . F51f5) (cdaadr . F51f4) (cdaaar . F51f3) (cadddr . F51f2) (caddar . F51f1) (cadadr . F51f0) (cadaar . F51ef) (caaddr . F51ee) (caadar . F51ed) (caaadr . F51ec) (caaaar . F51eb) (cdddr . F51ea) (cddar . F51e9) (cdadr . F51e8) (cdaar . F51e7) (caddr . F51e6) (cadar . F51e5) (caadr . F51e4) (caaar . F51e3) (cddr . F51e2) (cdar . F51e1) (cadr . F51e0) (caar . F51df) (cdr . F51de) (car . F51dd) (boolean? . F51dc) (atan . F51da) (asin . F51d8) (apply . F51d7) (append . F51d6) (angle . F51d5) (acos . F51d4) (abs . F51d3) (/ . F51d2) (* . F51d1) (- . F51d0) (+ . F51cf) (>= . F51ce) (> . F51cd) (= . F51cc) (<= . F51cb) (< . F51ca) (unquote-splicing . F5197) (unquote . F5196) (else . F5194) (=> . F5193) (... . F5192) (delay . F518f) (do . F518d) (cond . F518c) (let* . F518b) (quasiquote . F5185) (syntax-rules . F5184) (case . F517f) (or . F517b) (and . F517a) (if . F5179) (let . F5178) (letrec . F5176) (lambda . F5173) (quote . F5170) (letrec-syntax . F516e) (let-syntax . F516d) (set! . F516c) (begin . F516a) (define-syntax . F5168) (define . F5167)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F549c '(psyntax modules) '() '() '() '() '((module . F5169)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F549d '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F549e '(rnrs) '(6) '() '() '() '((regexp? . F5491) (string-upcase . F53e4) (string-titlecase . F53e3) (string-normalize-nfkd . F53e2) (string-normalize-nfkc . F53e1) (string-normalize-nfd . F53e0) (string-normalize-nfc . F53df) (string-foldcase . F53de) (string-downcase . F53dd) (string-ci>? . F53dc) (string-ci>=? . F53db) (string-ci=? . F53da) (string-ci<? . F53d9) (string-ci<=? . F53d8) (char-whitespace? . F53d7) (char-upper-case? . F53d6) (char-title-case? . F53d5) (char-numeric? . F53d4) (char-lower-case? . F53d3) (char-general-category . F53d2) (char-upcase . F53d1) (char-titlecase . F53d0) (char-foldcase . F53cf) (char-downcase . F53ce) (char-ci>? . F53cd) (char-ci>=? . F53cc) (char-ci=? . F53cb) (char-ci<? . F53ca) (char-ci<=? . F53c9) (char-alphabetic? . F53c8) (make-variable-transformer . F2f1d) (identifier? . F31d4) (generate-temporaries . F31c0) (free-identifier=? . F31c2) (syntax->datum . F31d8) (datum->syntax . F31d6) (bound-identifier=? . F31c4) (record-type-descriptor? . F53c7) (record-predicate . F53c6) (record-mutator . F53c5) (record-constructor . F53c4) (record-accessor . F53c3) (make-record-type-descriptor . F53c2) (make-record-constructor-descriptor . F53c1) (record? . F53c0) (record-type-uid . F53bf) (record-type-sealed? . F53be) (record-type-parent . F53bd) (record-type-opaque? . F53bc) (record-type-name . F53bb) (record-type-generative? . F53ba) (record-type-field-names . F53b9) (record-rtd . F53b8) (record-field-mutable? . F53b7) (delete-file . F53b6) (file-exists? . F53b5) (vector-sort! . F53b4) (vector-sort . F53b3) (list-sort . F53b2) (symbol-hash . F53b1) (string-ci-hash . F53b0) (string-hash . F53af) (equal-hash . F53ae) (hashtable-equivalence-function . F53ad) (make-hashtable . F53ac) (hashtable-hash-function . F53ab) (make-eqv-hashtable . F53aa) (make-eq-hashtable . F53a9) (hashtable? . F53a8) (hashtable-update! . F53a7) (hashtable-size . F53a6) (hashtable-set! . F53a5) (hashtable-ref . F53a4) (hashtable-mutable? . F53a3) (hashtable-keys . F53a2) (hashtable-entries . F53a1) (hashtable-delete! . F53a0) (hashtable-copy . F539f) (hashtable-contains? . F539e) (hashtable-clear! . F539d) (call-with-output-file . F539c) (call-with-input-file . F539b) (write-char . F539a) (write . F5399) (with-output-to-file . F5398) (with-input-from-file . F5397) (read-char . F5396) (read . F5395) (peek-char . F5394) (open-output-file . F5393) (open-input-file . F5392) (newline . F5391) (display . F5390) (close-output-port . F538f) (close-input-port . F538e) (eof-object? . F538d) (eof-object . F538c) (current-error-port . F538b) (current-output-port . F538a) (current-input-port . F5389) (output-port? . F5388) (input-port? . F5387) (utf-8-codec . F5386) (utf-16-codec . F5385) (transcoder-error-handling-mode . F5384) (transcoder-eol-style . F5383) (transcoder-codec . F5382) (transcoded-port . F5381) (textual-port? . F5380) (string->bytevector . F537f) (standard-output-port . F537e) (standard-input-port . F537d) (standard-error-port . F537c) (set-port-position! . F537b) (put-u8 . F537a) (put-string . F5379) (put-datum . F5378) (put-char . F5377) (put-bytevector . F5376) (port? . F5375) (port-transcoder . F5374) (port-position . F5373) (port-has-set-port-position!? . F5372) (port-has-port-position? . F5371) (port-eof? . F5370) (output-port-buffer-mode . F536f) (open-string-output-port . F536e) (open-string-input-port . F536d) (open-file-output-port . F536c) (open-file-input/output-port . F536b) (open-file-input-port . F536a) (open-bytevector-output-port . F5369) (open-bytevector-input-port . F5368) (native-transcoder . F5367) (native-eol-style . F5366) (make-transcoder . F5365) (latin-1-codec . F5364) (make-i/o-write-error . F4dfc) (make-i/o-read-error . F4de7) (make-i/o-port-error . F4e9d) (make-i/o-invalid-position-error . F4e13) (make-i/o-filename-error . F4e2e) (make-i/o-file-protection-error . F4e47) (make-i/o-file-is-read-only-error . F4e5c) (make-i/o-file-does-not-exist-error . F4e86) (make-i/o-file-already-exists-error . F4e71) (make-i/o-error . F4dd2) (make-i/o-encoding-error . F4ecd) (make-i/o-decoding-error . F4eb6) (make-custom-textual-output-port . F5363) (make-custom-textual-input/output-port . F5362) (make-custom-textual-input-port . F5361) (make-custom-binary-output-port . F5360) (make-custom-binary-input/output-port . F535f) (make-custom-binary-input-port . F535e) (make-bytevector . F535d) (lookahead-u8 . F535c) (lookahead-char . F535b) (i/o-write-error? . F4dfe) (i/o-read-error? . F4de9) (i/o-port-error? . F4ea1) (i/o-invalid-position-error? . F4e17) (i/o-filename-error? . F4e32) (i/o-file-protection-error? . F4e49) (i/o-file-is-read-only-error? . F4e5e) (i/o-file-does-not-exist-error? . F4e88) (i/o-file-already-exists-error? . F4e73) (i/o-error? . F4dd4) (i/o-error-position . F4e19) (i/o-error-port . F4ea3) (i/o-error-filename . F4e34) (i/o-encoding-error? . F4ed1) (i/o-encoding-error-char . F4ed3) (i/o-decoding-error? . F4eb8) (get-u8 . F535a) (get-string-n! . F5359) (get-string-n . F5358) (get-string-all . F5357) (get-line . F5356) (get-datum . F5355) (get-char . F5354) (get-bytevector-some . F5353) (get-bytevector-n! . F5352) (get-bytevector-n . F5351) (get-bytevector-all . F5350) (flush-output-port . F534f) (close-port . F534e) (exit . F5346) (command-line . F500a) (remove . F5341) (remv . F5340) (remp . F533f) (remq . F533e) (partition . F533d) (memv . F533c) (memq . F533b) (memp . F533a) (member . F5339) (exists . F5338) (for-all . F5337) (fold-right . F5336) (fold-left . F5335) (find . F5334) (filter . F5333) (cons* . F5332) (assv . F5331) (assq . F5330) (assp . F532f) (assoc . F532e) (call-with-string-output-port . F532d) (call-with-port . F532c) (call-with-bytevector-output-port . F532b) (bytevector->string . F532a) (buffer-mode? . F5329) (binary-port? . F5328) (with-exception-handler . F5327) (raise-continuable . F5326) (raise . F5325) (make-enumeration . F5324) (enum-set=? . F5323) (enum-set-universe . F5322) (enum-set-union . F5321) (enum-set-subset? . F5320) (enum-set-projection . F531f) (enum-set-member? . F531e) (enum-set-intersection . F531d) (enum-set-indexer . F531c) (enum-set-difference . F531b) (enum-set-constructor . F531a) (enum-set-complement . F5319) (enum-set->list . F5318) (who-condition? . F4d48) (warning? . F4cc0) (violation? . F4cff) (undefined-violation? . F4dbf) (syntax-violation? . F4da6) (syntax-violation-subform . F4daa) (syntax-violation-form . F4da8) (syntax-violation . F31d2) (simple-conditions . F5317) (serious-condition? . F4cd5) (non-continuable-violation? . F4d5f) (message-condition? . F4ca9) (make-who-condition . F4d44) (make-warning . F4cbe) (make-violation . F4cfd) (make-undefined-violation . F4dbd) (make-syntax-violation . F4da0) (make-serious-condition . F4cd3) (make-non-continuable-violation . F4d5d) (make-message-condition . F4ca5) (make-lexical-violation . F4d87) (make-irritants-condition . F4d29) (make-implementation-restriction-violation . F4d72) (make-error . F4ce8) (make-assertion-violation . F4d12) (lexical-violation? . F4d89) (irritants-condition? . F4d2d) (implementation-restriction-violation? . F4d74) (error? . F4cea) (condition-who . F4d4a) (condition-predicate . F5316) (condition-message . F4cab) (condition-irritants . F4d2f) (condition-accessor . F5315) (condition . F5314) (assertion-violation? . F4d14) (condition? . F5313) (utf32->string . F5312) (utf16->string . F5311) (utf8->string . F5310) (uint-list->bytevector . F530f) (u8-list->bytevector . F530e) (string->utf8 . F530d) (string->utf32 . F530c) (string->utf16 . F530b) (sint-list->bytevector . F530a) (native-endianness . F5309) (bytevector? . F5308) (bytevector=? . F5307) (bytevector-uint-set! . F5306) (bytevector-uint-ref . F5305) (bytevector-u8-set! . F5304) (bytevector-u8-ref . F5303) (bytevector-u64-set! . F5302) (bytevector-u64-ref . F5301) (bytevector-u64-native-set! . F5300) (bytevector-u64-native-ref . F52ff) (bytevector-u32-set! . F52fe) (bytevector-u32-ref . F52fd) (bytevector-u32-native-set! . F52fc) (bytevector-u32-native-ref . F52fb) (bytevector-u16-set! . F52fa) (bytevector-u16-ref . F52f9) (bytevector-u16-native-set! . F52f8) (bytevector-u16-native-ref . F52f7) (bytevector-sint-set! . F52f6) (bytevector-sint-ref . F52f5) (bytevector-s8-set! . F52f4) (bytevector-s8-ref . F52f3) (bytevector-s64-set! . F52f2) (bytevector-s64-ref . F52f1) (bytevector-s64-native-set! . F52f0) (bytevector-s64-native-ref . F52ef) (bytevector-s32-set! . F52ee) (bytevector-s32-ref . F52ed) (bytevector-s32-native-set! . F52ec) (bytevector-s32-native-ref . F52eb) (bytevector-s16-set! . F52ea) (bytevector-s16-ref . F52e9) (bytevector-s16-native-set! . F52e8) (bytevector-s16-native-ref . F52e7) (bytevector-length . F52e6) (bytevector-ieee-single-ref . F52e5) (bytevector-ieee-single-set! . F52e4) (bytevector-ieee-single-native-set! . F52e3) (bytevector-ieee-single-native-ref . F52e2) (bytevector-ieee-double-set! . F52e1) (bytevector-ieee-double-ref . F52e0) (bytevector-ieee-double-native-set! . F52df) (bytevector-ieee-double-native-ref . F52de) (bytevector-fill! . F52dd) (bytevector-copy! . F52dc) (bytevector-copy . F52db) (bytevector->uint-list . F52da) (bytevector->u8-list . F52d9) (bytevector->sint-list . F52d8) (no-nans-violation? . F4efd) (no-infinities-violation? . F4ee8) (make-no-nans-violation . F4efb) (make-no-infinities-violation . F4ee6) (real->flonum . F52d7) (flzero? . F52d6) (fltruncate . F52d5) (fltan . F52d4) (flsqrt . F52d3) (flsin . F52d2) (flround . F52d1) (flpositive? . F52d0) (flonum? . F52cf) (flodd? . F52ce) (flnumerator . F52cd) (flnegative? . F52cc) (flnan? . F52cb) (flmod0 . F52ca) (flmod . F52c9) (flmin . F52c8) (flmax . F52c7) (fllog . F52c6) (flinteger? . F52c5) (flinfinite? . F52c4) (flfloor . F52c3) (flfinite? . F52c2) (flexpt . F52c1) (flexp . F52c0) (fleven? . F52bf) (fldiv0-and-mod0 . F52be) (fldiv0 . F52bd) (fldiv-and-mod . F52bc) (fldiv . F52bb) (fldenominator . F52ba) (flcos . F52b9) (flceiling . F52b8) (flatan . F52b7) (flasin . F52b6) (flacos . F52b5) (flabs . F52b4) (fl>? . F52b3) (fl>=? . F52b2) (fl=? . F52b1) (fl<? . F52b0) (fl<=? . F52af) (fl/ . F52ae) (fl- . F52ad) (fl+ . F52ac) (fl* . F52ab) (fixnum->flonum . F52aa) (fxzero? . F52a9) (fxxor . F52a8) (fxrotate-bit-field . F52a7) (fxreverse-bit-field . F52a6) (fxpositive? . F52a5) (fxodd? . F52a4) (fxnot . F52a3) (fxnegative? . F52a2) (fxmod0 . F52a1) (fxmod . F52a0) (fxmin . F529f) (fxmax . F529e) (fxlength . F529d) (fxior . F529c) (fxif . F529b) (fxfirst-bit-set . F529a) (fxeven? . F5299) (fxdiv0-and-mod0 . F5298) (fxdiv0 . F5297) (fxdiv-and-mod . F5296) (fxdiv . F5295) (fxcopy-bit-field . F5294) (fxcopy-bit . F5293) (fxbit-set? . F5292) (fxbit-field . F5291) (fxbit-count . F5290) (fxarithmetic-shift-right . F528f) (fxarithmetic-shift-left . F528e) (fxarithmetic-shift . F528d) (fxand . F528c) (fx>? . F528b) (fx>=? . F528a) (fx=? . F5289) (fx<? . F5288) (fx<=? . F5287) (fx-/carry . F5286) (fx- . F5285) (fx+/carry . F5284) (fx+ . F5283) (fx*/carry . F5282) (fx* . F5281) (greatest-fixnum . F5280) (least-fixnum . F527f) (fixnum-width . F527e) (fixnum? . F527d) (bitwise-rotate-bit-field . F527c) (bitwise-reverse-bit-field . F527b) (bitwise-length . F527a) (bitwise-if . F5279) (bitwise-first-bit-set . F5278) (bitwise-copy-bit-field . F5277) (bitwise-copy-bit . F5276) (bitwise-bit-set? . F5275) (bitwise-bit-field . F5274) (bitwise-bit-count . F5273) (bitwise-xor . F5272) (bitwise-ior . F5271) (bitwise-and . F5270) (bitwise-not . F526f) (bitwise-arithmetic-shift-right . F526e) (bitwise-arithmetic-shift-left . F526d) (bitwise-arithmetic-shift . F526c) (zero? . F526b) (vector? . F526a) (vector-set! . F5269) (vector-ref . F5268) (vector-map . F5267) (vector-length . F5266) (vector-for-each . F5265) (vector-fill! . F5264) (vector->list . F5263) (vector . F5262) (values . F5261) (truncate . F5260) (tan . F525f) (symbol? . F525e) (symbol=? . F525d) (symbol->string . F525c) (substring . F525b) (string? . F525a) (string>? . F5259) (string>=? . F5258) (string=? . F5257) (string<? . F5256) (string<=? . F5255) (string-ref . F5254) (string-length . F5253) (string-for-each . F5252) (string-copy . F5251) (string-append . F5250) (string->symbol . F524f) (string->number . F524e) (string->list . F524d) (string . F524c) (sqrt . F524b) (sin . F524a) (round . F5249) (reverse . F5248) (real? . F5247) (real-valued? . F5246) (real-part . F5245) (rationalize . F5244) (rational? . F5243) (rational-valued? . F5242) (procedure? . F5241) (positive? . F5240) (pair? . F523f) (odd? . F523e) (numerator . F523d) (number? . F523c) (number->string . F523b) (null? . F523a) (not . F5239) (negative? . F5238) (nan? . F5237) (min . F5236) (max . F5235) (map . F5234) (make-vector . F5233) (make-string . F5232) (make-rectangular . F5231) (make-polar . F5230) (magnitude . F522f) (log . F522e) (list? . F522d) (list-tail . F522c) (list-ref . F522b) (list->vector . F522a) (list->string . F5229) (list . F5228) (length . F5227) (lcm . F5226) (integer? . F5225) (integer-valued? . F5224) (integer->char . F5223) (infinite? . F5222) (inexact? . F5221) (inexact . F5220) (imag-part . F521f) (gcd . F521e) (for-each . F521d) (floor . F521c) (finite? . F521b) (expt . F521a) (exp . F5219) (exact? . F5218) (exact-integer-sqrt . F5217) (exact . F5216) (even? . F5215) (error . F5214) (eqv? . F5213) (equal? . F5212) (eq? . F5211) (dynamic-wind . F5210) (div0-and-mod0 . F520f) (mod0 . F520e) (div0 . F520d) (div-and-mod . F520c) (mod . F520b) (div . F520a) (denominator . F5209) (cos . F5208) (cons . F5207) (complex? . F5206) (char? . F5205) (char>? . F5204) (char>=? . F5203) (char=? . F5202) (char<? . F5201) (char<=? . F5200) (char->integer . F51ff) (ceiling . F51fe) (call-with-values . F51fd) (call/cc . F51fc) (call-with-current-continuation . F51fb) (cddddr . F51fa) (cdddar . F51f9) (cddadr . F51f8) (cddaar . F51f7) (cdaddr . F51f6) (cdadar . F51f5) (cdaadr . F51f4) (cdaaar . F51f3) (cadddr . F51f2) (caddar . F51f1) (cadadr . F51f0) (cadaar . F51ef) (caaddr . F51ee) (caadar . F51ed) (caaadr . F51ec) (caaaar . F51eb) (cdddr . F51ea) (cddar . F51e9) (cdadr . F51e8) (cdaar . F51e7) (caddr . F51e6) (cadar . F51e5) (caadr . F51e4) (caaar . F51e3) (cddr . F51e2) (cdar . F51e1) (cadr . F51e0) (caar . F51df) (cdr . F51de) (car . F51dd) (boolean? . F51dc) (boolean=? . F51db) (atan . F51da) (assertion-violation . F51d9) (asin . F51d8) (apply . F51d7) (append . F51d6) (angle . F51d5) (acos . F51d4) (abs . F51d3) (/ . F51d2) (* . F51d1) (- . F51d0) (+ . F51cf) (>= . F51ce) (> . F51cd) (= . F51cc) (<= . F51cb) (< . F51ca) (&no-nans . F51c8) (&no-infinities . F51c7) (&i/o-encoding . F51c6) (&i/o-decoding . F51c5) (&i/o-port . F51c4) (&i/o-file-does-not-exist . F51c3) (&i/o-file-already-exists . F51c2) (&i/o-file-is-read-only . F51c1) (&i/o-file-protection . F51c0) (&i/o-filename . F51bf) (&i/o-invalid-position . F51be) (&i/o-write . F51bd) (&i/o-read . F51bc) (&i/o . F51bb) (&undefined . F51ba) (&syntax . F51b9) (&lexical . F51b8) (&implementation-restriction . F51b7) (&non-continuable . F51b6) (&who . F51b5) (&irritants . F51b4) (&assertion . F51b3) (&violation . F51b2) (&error . F51b1) (&serious . F51b0) (&warning . F51af) (&message . F51ae) (&condition . F51ad) (define-condition-type . F51ac) (define-enumeration . F51ab) (define-record-type . F51aa) (parent-rtd . F51a9) (nongenerative . F51a8) (opaque . F51a7) (sealed . F51a6) (protocol . F51a5) (parent . F51a4) (immutable . F51a3) (mutable . F51a2) (fields . F51a1) (error-handling-mode . F51a0) (file-options . F519f) (buffer-mode . F519e) (eol-style . F519d) (guard . F519c) (unsyntax-splicing . F5199) (unsyntax . F5198) (unquote-splicing . F5197) (unquote . F5196) (_ . F5195) (else . F5194) (=> . F5193) (... . F5192) (assert . F5191) (endianness . F5190) (do . F518d) (cond . F518c) (let* . F518b) (let*-values . F518a) (let-values . F5189) (identifier-syntax . F5188) (with-syntax . F5187) (quasisyntax . F5186) (quasiquote . F5185) (syntax-rules . F5184) (record-constructor-descriptor . F5181) (record-type-descriptor . F5180) (case . F517f) (unless . F517d) (when . F517c) (or . F517b) (and . F517a) (if . F5179) (let . F5178) (letrec* . F5177) (letrec . F5176) (case-lambda . F5174) (lambda . F5173) (syntax . F5172) (syntax-case . F5171) (quote . F5170) (letrec-syntax . F516e) (let-syntax . F516d) (set! . F516c) (begin . F516a) (define-syntax . F5168) (define . F5167)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F549f '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . F31ae) (quotient . F534d) (null-environment . F31ac) (remainder . F534c) (modulo . F534b) (inexact->exact . F534a) (force . F5349) (exact->inexact . F5348) (make-promise . F5347) (delay . F518f)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a0 '(rnrs control) '(6) '() '() '() '((do . F518d) (unless . F517d) (when . F517c) (case-lambda . F5174)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a1 '(rnrs eval) '(6) '() '() '() '((eval . F31b2) (environment . F31aa)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a2 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . F5343) (set-car! . F5342)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a3 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . F5345) (string-set! . F5344)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a4 '(rnrs programs) '(6) '() '() '() '((exit . F5346) (command-line . F500a)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a5 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . F2f1d) (identifier? . F31d4) (generate-temporaries . F31c0) (free-identifier=? . F31c2) (syntax->datum . F31d8) (datum->syntax . F31d6) (bound-identifier=? . F31c4) (syntax-violation . F31d2) (unsyntax-splicing . F5199) (unsyntax . F5198) (_ . F5195) (... . F5192) (with-syntax . F5187) (quasisyntax . F5186) (syntax . F5172) (syntax-case . F5171)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a6 '(rnrs files) '(6) '() '() '() '((delete-file . F53b6) (file-exists? . F53b5) (make-i/o-write-error . F4dfc) (make-i/o-read-error . F4de7) (make-i/o-port-error . F4e9d) (make-i/o-invalid-position-error . F4e13) (make-i/o-filename-error . F4e2e) (make-i/o-file-protection-error . F4e47) (make-i/o-file-is-read-only-error . F4e5c) (make-i/o-file-does-not-exist-error . F4e86) (make-i/o-file-already-exists-error . F4e71) (make-i/o-error . F4dd2) (i/o-write-error? . F4dfe) (i/o-read-error? . F4de9) (i/o-port-error? . F4ea1) (i/o-invalid-position-error? . F4e17) (i/o-filename-error? . F4e32) (i/o-file-protection-error? . F4e49) (i/o-file-is-read-only-error? . F4e5e) (i/o-file-does-not-exist-error? . F4e88) (i/o-file-already-exists-error? . F4e73) (i/o-error? . F4dd4) (i/o-error-position . F4e19) (i/o-error-port . F4ea3) (i/o-error-filename . F4e34) (&i/o-port . F51c4) (&i/o-file-does-not-exist . F51c3) (&i/o-file-already-exists . F51c2) (&i/o-file-is-read-only . F51c1) (&i/o-file-protection . F51c0) (&i/o-filename . F51bf) (&i/o-invalid-position . F51be) (&i/o-write . F51bd) (&i/o-read . F51bc) (&i/o . F51bb)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a7 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . F53b4) (vector-sort . F53b3) (list-sort . F53b2)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a8 '(rnrs base) '(6) '() '() '() '((zero? . F526b) (vector? . F526a) (vector-set! . F5269) (vector-ref . F5268) (vector-map . F5267) (vector-length . F5266) (vector-for-each . F5265) (vector-fill! . F5264) (vector->list . F5263) (vector . F5262) (values . F5261) (truncate . F5260) (tan . F525f) (symbol? . F525e) (symbol=? . F525d) (symbol->string . F525c) (substring . F525b) (string? . F525a) (string>? . F5259) (string>=? . F5258) (string=? . F5257) (string<? . F5256) (string<=? . F5255) (string-ref . F5254) (string-length . F5253) (string-for-each . F5252) (string-copy . F5251) (string-append . F5250) (string->symbol . F524f) (string->number . F524e) (string->list . F524d) (string . F524c) (sqrt . F524b) (sin . F524a) (round . F5249) (reverse . F5248) (real? . F5247) (real-valued? . F5246) (real-part . F5245) (rationalize . F5244) (rational? . F5243) (rational-valued? . F5242) (procedure? . F5241) (positive? . F5240) (pair? . F523f) (odd? . F523e) (numerator . F523d) (number? . F523c) (number->string . F523b) (null? . F523a) (not . F5239) (negative? . F5238) (nan? . F5237) (min . F5236) (max . F5235) (map . F5234) (make-vector . F5233) (make-string . F5232) (make-rectangular . F5231) (make-polar . F5230) (magnitude . F522f) (log . F522e) (list? . F522d) (list-tail . F522c) (list-ref . F522b) (list->vector . F522a) (list->string . F5229) (list . F5228) (length . F5227) (lcm . F5226) (integer? . F5225) (integer-valued? . F5224) (integer->char . F5223) (infinite? . F5222) (inexact? . F5221) (inexact . F5220) (imag-part . F521f) (gcd . F521e) (for-each . F521d) (floor . F521c) (finite? . F521b) (expt . F521a) (exp . F5219) (exact? . F5218) (exact-integer-sqrt . F5217) (exact . F5216) (even? . F5215) (error . F5214) (eqv? . F5213) (equal? . F5212) (eq? . F5211) (dynamic-wind . F5210) (div0-and-mod0 . F520f) (mod0 . F520e) (div0 . F520d) (div-and-mod . F520c) (mod . F520b) (div . F520a) (denominator . F5209) (cos . F5208) (cons . F5207) (complex? . F5206) (char? . F5205) (char>? . F5204) (char>=? . F5203) (char=? . F5202) (char<? . F5201) (char<=? . F5200) (char->integer . F51ff) (ceiling . F51fe) (call-with-values . F51fd) (call/cc . F51fc) (call-with-current-continuation . F51fb) (cddddr . F51fa) (cdddar . F51f9) (cddadr . F51f8) (cddaar . F51f7) (cdaddr . F51f6) (cdadar . F51f5) (cdaadr . F51f4) (cdaaar . F51f3) (cadddr . F51f2) (caddar . F51f1) (cadadr . F51f0) (cadaar . F51ef) (caaddr . F51ee) (caadar . F51ed) (caaadr . F51ec) (caaaar . F51eb) (cdddr . F51ea) (cddar . F51e9) (cdadr . F51e8) (cdaar . F51e7) (caddr . F51e6) (cadar . F51e5) (caadr . F51e4) (caaar . F51e3) (cddr . F51e2) (cdar . F51e1) (cadr . F51e0) (caar . F51df) (cdr . F51de) (car . F51dd) (boolean? . F51dc) (boolean=? . F51db) (atan . F51da) (assertion-violation . F51d9) (asin . F51d8) (apply . F51d7) (append . F51d6) (angle . F51d5) (acos . F51d4) (abs . F51d3) (/ . F51d2) (* . F51d1) (- . F51d0) (+ . F51cf) (>= . F51ce) (> . F51cd) (= . F51cc) (<= . F51cb) (< . F51ca) (unquote-splicing . F5197) (unquote . F5196) (_ . F5195) (else . F5194) (=> . F5193) (... . F5192) (assert . F5191) (cond . F518c) (let* . F518b) (let*-values . F518a) (let-values . F5189) (identifier-syntax . F5188) (quasiquote . F5185) (syntax-rules . F5184) (case . F517f) (or . F517b) (and . F517a) (if . F5179) (let . F5178) (letrec* . F5177) (letrec . F5176) (lambda . F5173) (quote . F5170) (letrec-syntax . F516e) (let-syntax . F516d) (set! . F516c) (begin . F516a) (define-syntax . F5168) (define . F5167)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54a9 '(rnrs lists) '(6) '() '() '() '((remove . F5341) (remv . F5340) (remp . F533f) (remq . F533e) (partition . F533d) (memv . F533c) (memq . F533b) (memp . F533a) (member . F5339) (exists . F5338) (for-all . F5337) (fold-right . F5336) (fold-left . F5335) (find . F5334) (filter . F5333) (cons* . F5332) (assv . F5331) (assq . F5330) (assp . F532f) (assoc . F532e)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54aa '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . F539c) (call-with-input-file . F539b) (write-char . F539a) (write . F5399) (with-output-to-file . F5398) (with-input-from-file . F5397) (read-char . F5396) (read . F5395) (peek-char . F5394) (open-output-file . F5393) (open-input-file . F5392) (newline . F5391) (display . F5390) (close-output-port . F538f) (close-input-port . F538e) (eof-object? . F538d) (eof-object . F538c) (current-error-port . F538b) (current-output-port . F538a) (current-input-port . F5389) (output-port? . F5388) (input-port? . F5387) (make-i/o-write-error . F4dfc) (make-i/o-read-error . F4de7) (make-i/o-port-error . F4e9d) (make-i/o-invalid-position-error . F4e13) (make-i/o-filename-error . F4e2e) (make-i/o-file-protection-error . F4e47) (make-i/o-file-is-read-only-error . F4e5c) (make-i/o-file-does-not-exist-error . F4e86) (make-i/o-file-already-exists-error . F4e71) (make-i/o-error . F4dd2) (i/o-write-error? . F4dfe) (i/o-read-error? . F4de9) (i/o-port-error? . F4ea1) (i/o-invalid-position-error? . F4e17) (i/o-filename-error? . F4e32) (i/o-file-protection-error? . F4e49) (i/o-file-is-read-only-error? . F4e5e) (i/o-file-does-not-exist-error? . F4e88) (i/o-file-already-exists-error? . F4e73) (i/o-error? . F4dd4) (i/o-error-position . F4e19) (i/o-error-port . F4ea3) (i/o-error-filename . F4e34) (&i/o-port . F51c4) (&i/o-file-does-not-exist . F51c3) (&i/o-file-already-exists . F51c2) (&i/o-file-is-read-only . F51c1) (&i/o-file-protection . F51c0) (&i/o-filename . F51bf) (&i/o-invalid-position . F51be) (&i/o-write . F51bd) (&i/o-read . F51bc) (&i/o . F51bb)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54ab '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . F535d) (utf32->string . F5312) (utf16->string . F5311) (utf8->string . F5310) (uint-list->bytevector . F530f) (u8-list->bytevector . F530e) (string->utf8 . F530d) (string->utf32 . F530c) (string->utf16 . F530b) (sint-list->bytevector . F530a) (native-endianness . F5309) (bytevector? . F5308) (bytevector=? . F5307) (bytevector-uint-set! . F5306) (bytevector-uint-ref . F5305) (bytevector-u8-set! . F5304) (bytevector-u8-ref . F5303) (bytevector-u64-set! . F5302) (bytevector-u64-ref . F5301) (bytevector-u64-native-set! . F5300) (bytevector-u64-native-ref . F52ff) (bytevector-u32-set! . F52fe) (bytevector-u32-ref . F52fd) (bytevector-u32-native-set! . F52fc) (bytevector-u32-native-ref . F52fb) (bytevector-u16-set! . F52fa) (bytevector-u16-ref . F52f9) (bytevector-u16-native-set! . F52f8) (bytevector-u16-native-ref . F52f7) (bytevector-sint-set! . F52f6) (bytevector-sint-ref . F52f5) (bytevector-s8-set! . F52f4) (bytevector-s8-ref . F52f3) (bytevector-s64-set! . F52f2) (bytevector-s64-ref . F52f1) (bytevector-s64-native-set! . F52f0) (bytevector-s64-native-ref . F52ef) (bytevector-s32-set! . F52ee) (bytevector-s32-ref . F52ed) (bytevector-s32-native-set! . F52ec) (bytevector-s32-native-ref . F52eb) (bytevector-s16-set! . F52ea) (bytevector-s16-ref . F52e9) (bytevector-s16-native-set! . F52e8) (bytevector-s16-native-ref . F52e7) (bytevector-length . F52e6) (bytevector-ieee-single-ref . F52e5) (bytevector-ieee-single-set! . F52e4) (bytevector-ieee-single-native-set! . F52e3) (bytevector-ieee-single-native-ref . F52e2) (bytevector-ieee-double-set! . F52e1) (bytevector-ieee-double-ref . F52e0) (bytevector-ieee-double-native-set! . F52df) (bytevector-ieee-double-native-ref . F52de) (bytevector-fill! . F52dd) (bytevector-copy! . F52dc) (bytevector-copy . F52db) (bytevector->uint-list . F52da) (bytevector->u8-list . F52d9) (bytevector->sint-list . F52d8) (endianness . F5190)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54ac '(rnrs unicode) '(6) '() '() '() '((string-upcase . F53e4) (string-titlecase . F53e3) (string-normalize-nfkd . F53e2) (string-normalize-nfkc . F53e1) (string-normalize-nfd . F53e0) (string-normalize-nfc . F53df) (string-foldcase . F53de) (string-downcase . F53dd) (string-ci>? . F53dc) (string-ci>=? . F53db) (string-ci=? . F53da) (string-ci<? . F53d9) (string-ci<=? . F53d8) (char-whitespace? . F53d7) (char-upper-case? . F53d6) (char-title-case? . F53d5) (char-numeric? . F53d4) (char-lower-case? . F53d3) (char-general-category . F53d2) (char-upcase . F53d1) (char-titlecase . F53d0) (char-foldcase . F53cf) (char-downcase . F53ce) (char-ci>? . F53cd) (char-ci>=? . F53cc) (char-ci=? . F53cb) (char-ci<? . F53ca) (char-ci<=? . F53c9) (char-alphabetic? . F53c8)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54ad '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . F5327) (raise-continuable . F5326) (raise . F5325) (guard . F519c) (else . F5194) (=> . F5193)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54ae '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . F527c) (bitwise-reverse-bit-field . F527b) (bitwise-length . F527a) (bitwise-if . F5279) (bitwise-first-bit-set . F5278) (bitwise-copy-bit-field . F5277) (bitwise-copy-bit . F5276) (bitwise-bit-set? . F5275) (bitwise-bit-field . F5274) (bitwise-bit-count . F5273) (bitwise-xor . F5272) (bitwise-ior . F5271) (bitwise-and . F5270) (bitwise-not . F526f) (bitwise-arithmetic-shift-right . F526e) (bitwise-arithmetic-shift-left . F526d) (bitwise-arithmetic-shift . F526c)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54af '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . F52a9) (fxxor . F52a8) (fxrotate-bit-field . F52a7) (fxreverse-bit-field . F52a6) (fxpositive? . F52a5) (fxodd? . F52a4) (fxnot . F52a3) (fxnegative? . F52a2) (fxmod0 . F52a1) (fxmod . F52a0) (fxmin . F529f) (fxmax . F529e) (fxlength . F529d) (fxior . F529c) (fxif . F529b) (fxfirst-bit-set . F529a) (fxeven? . F5299) (fxdiv0-and-mod0 . F5298) (fxdiv0 . F5297) (fxdiv-and-mod . F5296) (fxdiv . F5295) (fxcopy-bit-field . F5294) (fxcopy-bit . F5293) (fxbit-set? . F5292) (fxbit-field . F5291) (fxbit-count . F5290) (fxarithmetic-shift-right . F528f) (fxarithmetic-shift-left . F528e) (fxarithmetic-shift . F528d) (fxand . F528c) (fx>? . F528b) (fx>=? . F528a) (fx=? . F5289) (fx<? . F5288) (fx<=? . F5287) (fx-/carry . F5286) (fx- . F5285) (fx+/carry . F5284) (fx+ . F5283) (fx*/carry . F5282) (fx* . F5281) (greatest-fixnum . F5280) (least-fixnum . F527f) (fixnum-width . F527e) (fixnum? . F527d)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54b0 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . F4efd) (no-infinities-violation? . F4ee8) (make-no-nans-violation . F4efb) (make-no-infinities-violation . F4ee6) (real->flonum . F52d7) (flzero? . F52d6) (fltruncate . F52d5) (fltan . F52d4) (flsqrt . F52d3) (flsin . F52d2) (flround . F52d1) (flpositive? . F52d0) (flonum? . F52cf) (flodd? . F52ce) (flnumerator . F52cd) (flnegative? . F52cc) (flnan? . F52cb) (flmod0 . F52ca) (flmod . F52c9) (flmin . F52c8) (flmax . F52c7) (fllog . F52c6) (flinteger? . F52c5) (flinfinite? . F52c4) (flfloor . F52c3) (flfinite? . F52c2) (flexpt . F52c1) (flexp . F52c0) (fleven? . F52bf) (fldiv0-and-mod0 . F52be) (fldiv0 . F52bd) (fldiv-and-mod . F52bc) (fldiv . F52bb) (fldenominator . F52ba) (flcos . F52b9) (flceiling . F52b8) (flatan . F52b7) (flasin . F52b6) (flacos . F52b5) (flabs . F52b4) (fl>? . F52b3) (fl>=? . F52b2) (fl=? . F52b1) (fl<? . F52b0) (fl<=? . F52af) (fl/ . F52ae) (fl- . F52ad) (fl+ . F52ac) (fl* . F52ab) (fixnum->flonum . F52aa) (&no-nans . F51c8) (&no-infinities . F51c7)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54b1 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . F53b1) (string-ci-hash . F53b0) (string-hash . F53af) (equal-hash . F53ae) (hashtable-equivalence-function . F53ad) (make-hashtable . F53ac) (hashtable-hash-function . F53ab) (make-eqv-hashtable . F53aa) (make-eq-hashtable . F53a9) (hashtable? . F53a8) (hashtable-update! . F53a7) (hashtable-size . F53a6) (hashtable-set! . F53a5) (hashtable-ref . F53a4) (hashtable-mutable? . F53a3) (hashtable-keys . F53a2) (hashtable-entries . F53a1) (hashtable-delete! . F53a0) (hashtable-copy . F539f) (hashtable-contains? . F539e) (hashtable-clear! . F539d)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54b2 '(rnrs io ports) '(6) '() '() '() '((eof-object? . F538d) (eof-object . F538c) (current-error-port . F538b) (current-output-port . F538a) (current-input-port . F5389) (output-port? . F5388) (input-port? . F5387) (utf-8-codec . F5386) (utf-16-codec . F5385) (transcoder-error-handling-mode . F5384) (transcoder-eol-style . F5383) (transcoder-codec . F5382) (transcoded-port . F5381) (textual-port? . F5380) (string->bytevector . F537f) (standard-output-port . F537e) (standard-input-port . F537d) (standard-error-port . F537c) (set-port-position! . F537b) (put-u8 . F537a) (put-string . F5379) (put-datum . F5378) (put-char . F5377) (put-bytevector . F5376) (port? . F5375) (port-transcoder . F5374) (port-position . F5373) (port-has-set-port-position!? . F5372) (port-has-port-position? . F5371) (port-eof? . F5370) (output-port-buffer-mode . F536f) (open-string-output-port . F536e) (open-string-input-port . F536d) (open-file-output-port . F536c) (open-file-input/output-port . F536b) (open-file-input-port . F536a) (open-bytevector-output-port . F5369) (open-bytevector-input-port . F5368) (native-transcoder . F5367) (native-eol-style . F5366) (make-transcoder . F5365) (latin-1-codec . F5364) (make-i/o-write-error . F4dfc) (make-i/o-read-error . F4de7) (make-i/o-port-error . F4e9d) (make-i/o-invalid-position-error . F4e13) (make-i/o-filename-error . F4e2e) (make-i/o-file-protection-error . F4e47) (make-i/o-file-is-read-only-error . F4e5c) (make-i/o-file-does-not-exist-error . F4e86) (make-i/o-file-already-exists-error . F4e71) (make-i/o-error . F4dd2) (make-i/o-encoding-error . F4ecd) (make-i/o-decoding-error . F4eb6) (make-custom-textual-output-port . F5363) (make-custom-textual-input/output-port . F5362) (make-custom-textual-input-port . F5361) (make-custom-binary-output-port . F5360) (make-custom-binary-input/output-port . F535f) (make-custom-binary-input-port . F535e) (lookahead-u8 . F535c) (lookahead-char . F535b) (i/o-write-error? . F4dfe) (i/o-read-error? . F4de9) (i/o-port-error? . F4ea1) (i/o-invalid-position-error? . F4e17) (i/o-filename-error? . F4e32) (i/o-file-protection-error? . F4e49) (i/o-file-is-read-only-error? . F4e5e) (i/o-file-does-not-exist-error? . F4e88) (i/o-file-already-exists-error? . F4e73) (i/o-error? . F4dd4) (i/o-error-position . F4e19) (i/o-error-port . F4ea3) (i/o-error-filename . F4e34) (i/o-encoding-error? . F4ed1) (i/o-encoding-error-char . F4ed3) (i/o-decoding-error? . F4eb8) (get-u8 . F535a) (get-string-n! . F5359) (get-string-n . F5358) (get-string-all . F5357) (get-line . F5356) (get-datum . F5355) (get-char . F5354) (get-bytevector-some . F5353) (get-bytevector-n! . F5352) (get-bytevector-n . F5351) (get-bytevector-all . F5350) (flush-output-port . F534f) (close-port . F534e) (call-with-string-output-port . F532d) (call-with-port . F532c) (call-with-bytevector-output-port . F532b) (bytevector->string . F532a) (buffer-mode? . F5329) (binary-port? . F5328) (&i/o-encoding . F51c6) (&i/o-decoding . F51c5) (&i/o-port . F51c4) (&i/o-file-does-not-exist . F51c3) (&i/o-file-already-exists . F51c2) (&i/o-file-is-read-only . F51c1) (&i/o-file-protection . F51c0) (&i/o-filename . F51bf) (&i/o-invalid-position . F51be) (&i/o-write . F51bd) (&i/o-read . F51bc) (&i/o . F51bb) (error-handling-mode . F51a0) (file-options . F519f) (buffer-mode . F519e) (eol-style . F519d)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54b3 '(rnrs enums) '(6) '() '() '() '((make-enumeration . F5324) (enum-set=? . F5323) (enum-set-universe . F5322) (enum-set-union . F5321) (enum-set-subset? . F5320) (enum-set-projection . F531f) (enum-set-member? . F531e) (enum-set-intersection . F531d) (enum-set-indexer . F531c) (enum-set-difference . F531b) (enum-set-constructor . F531a) (enum-set-complement . F5319) (enum-set->list . F5318) (define-enumeration . F51ab)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54b4 '(rnrs conditions) '(6) '() '() '() '((who-condition? . F4d48) (warning? . F4cc0) (violation? . F4cff) (undefined-violation? . F4dbf) (syntax-violation? . F4da6) (syntax-violation-subform . F4daa) (syntax-violation-form . F4da8) (syntax-violation . F31d2) (simple-conditions . F5317) (serious-condition? . F4cd5) (non-continuable-violation? . F4d5f) (message-condition? . F4ca9) (make-who-condition . F4d44) (make-warning . F4cbe) (make-violation . F4cfd) (make-undefined-violation . F4dbd) (make-syntax-violation . F4da0) (make-serious-condition . F4cd3) (make-non-continuable-violation . F4d5d) (make-message-condition . F4ca5) (make-lexical-violation . F4d87) (make-irritants-condition . F4d29) (make-implementation-restriction-violation . F4d72) (make-error . F4ce8) (make-assertion-violation . F4d12) (lexical-violation? . F4d89) (irritants-condition? . F4d2d) (implementation-restriction-violation? . F4d74) (error? . F4cea) (condition-who . F4d4a) (condition-predicate . F5316) (condition-message . F4cab) (condition-irritants . F4d2f) (condition-accessor . F5315) (condition . F5314) (assertion-violation? . F4d14) (condition? . F5313) (&undefined . F51ba) (&syntax . F51b9) (&lexical . F51b8) (&implementation-restriction . F51b7) (&non-continuable . F51b6) (&who . F51b5) (&irritants . F51b4) (&assertion . F51b3) (&violation . F51b2) (&error . F51b1) (&serious . F51b0) (&warning . F51af) (&message . F51ae) (&condition . F51ad) (define-condition-type . F51ac)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54b5 '(rnrs records inspection) '(6) '() '() '() '((record? . F53c0) (record-type-uid . F53bf) (record-type-sealed? . F53be) (record-type-parent . F53bd) (record-type-opaque? . F53bc) (record-type-name . F53bb) (record-type-generative? . F53ba) (record-type-field-names . F53b9) (record-rtd . F53b8) (record-field-mutable? . F53b7)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54b6 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . F53c7) (record-predicate . F53c6) (record-mutator . F53c5) (record-constructor . F53c4) (record-accessor . F53c3) (make-record-type-descriptor . F53c2) (make-record-constructor-descriptor . F53c1)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54b7 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . F51aa) (parent-rtd . F51a9) (nongenerative . F51a8) (opaque . F51a7) (sealed . F51a6) (protocol . F51a5) (parent . F51a4) (immutable . F51a3) (mutable . F51a2) (fields . F51a1) (record-constructor-descriptor . F5181) (record-type-descriptor . F5180)) '() values values '#f '#f '#t '#f) (F2cff@F2b3b@install-library 'F54b8 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . F4f01) (&no-nans-rtd . F4eff) (&no-infinities-rcd . F4eec) (&no-infinities-rtd . F4eea) (&i/o-encoding-rcd . F4ed7) (&i/o-encoding-rtd . F4ed5) (&i/o-decoding-rcd . F4ebc) (&i/o-decoding-rtd . F4eba) (&i/o-port-rcd . F4ea7) (&i/o-port-rtd . F4ea5) (&i/o-file-does-not-exist-rcd . F4e8c) (&i/o-file-does-not-exist-rtd . F4e8a) (&i/o-file-already-exists-rcd . F4e77) (&i/o-file-already-exists-rtd . F4e75) (&i/o-file-is-read-only-rcd . F4e62) (&i/o-file-is-read-only-rtd . F4e60) (&i/o-file-protection-rcd . F4e4d) (&i/o-file-protection-rtd . F4e4b) (&i/o-filename-rcd . F4e38) (&i/o-filename-rtd . F4e36) (&i/o-invalid-position-rcd . F4e1d) (&i/o-invalid-position-rtd . F4e1b) (&i/o-write-rcd . F4e02) (&i/o-write-rtd . F4e00) (&i/o-read-rcd . F4ded) (&i/o-read-rtd . F4deb) (&i/o-rcd . F4dd8) (&i/o-rtd . F4dd6) (&undefined-rcd . F4dc3) (&undefined-rtd . F4dc1) (&syntax-rcd . F4dae) (&syntax-rtd . F4dac) (&lexical-rcd . F4d8d) (&lexical-rtd . F4d8b) (&implementation-restriction-rcd . F4d78) (&implementation-restriction-rtd . F4d76) (&non-continuable-rcd . F4d63) (&non-continuable-rtd . F4d61) (&who-rcd . F4d4e) (&who-rtd . F4d4c) (&irritants-rcd . F4d33) (&irritants-rtd . F4d31) (&assertion-rcd . F4d18) (&assertion-rtd . F4d16) (&violation-rcd . F4d03) (&violation-rtd . F4d01) (&error-rcd . F4cee) (&error-rtd . F4cec) (&serious-rcd . F4cd9) (&serious-rtd . F4cd7) (&warning-rcd . F4cc4) (&warning-rtd . F4cc2) (&message-rcd . F4caf) (&message-rtd . F4cad) (&condition-rcd . F4c50) (&condition-rtd . F4c4e) (syntax-error . F31ce) (syntax-dispatch . F30f2) (pretty-print . F5498) (eval-core . F5497) (set-symbol-value! . F5496) (symbol-value . F5495) (gensym . F5494) (void . F5493) (load . F5010) (interaction-environment . F31e0) (char-ready? . F5492) (regexp? . F5491) (read-line . F5490) (gensym-prefix-set! . F548f) (ungensym . F548e) (alist->eq-hash-table . F548d) (assoc-ref . F548c) (print . F548b) (format . F548a) (host-os . F5489) (library-path . F2b1a) (standard-library-path . F5488) (file-newer? . F5487) (stat-mtime . F5486) (write-to-file . F5485) (file->sexp-list . F5484) (file->list . F5483) (file->string . F5482) (digit->integer . F5481) (call-with-string-input-port . F5480) (call-with-string-io . F547f) (string-split . F547e) (bytevector-for-each . F547d) (string->regexp . F547c) (rxmatch . F547b) (regexp-replace-all . F547a) (hashtable-for-each . F5479) (mosh-cache-dir . F2904) (call-process . F5478) (local-tz-offset . F5477) (microseconds . F5476) (directory-list . F5475) (set-current-directory! . F5474) (expand-path . F5473) (current-directory . F5472) (%spawn . F5471) (%waitpid . F5470) (simple-struct-name . F546f) (simple-struct-set! . F546e) (simple-struct-ref . F546d) (make-simple-struct . F546c) (simple-struct? . F546b) (pointer-ref-c-int64 . F546a) (pointer-ref-c-int32 . F5469) (pointer-ref-c-int16 . F5468) (pointer-ref-c-int8 . F5467) (pointer-ref-c-uint64 . F5466) (pointer-ref-c-uint32 . F5465) (pointer-ref-c-uint16 . F5464) (pointer-ref-c-uint8 . F5463) (pointer-set-c-uint64! . F5462) (pointer-set-c-uint32! . F5461) (pointer-set-c-uint16! . F5460) (pointer-set-c-uint8! . F545f) (pointer-set-c-int64! . F545e) (pointer-set-c-int32! . F545d) (pointer-set-c-int16! . F545c) (pointer-set-c-int8! . F545b) (pointer-set-c-pointer! . F545a) (pointer-set-c-double! . F5459) (pointer-set-c-float! . F5458) (pointer-set-c-long-long! . F5457) (pointer-set-c-long! . F5456) (pointer-set-c-int! . F5455) (pointer-set-c-short! . F5454) (pointer-set-c-char! . F5453) (pointer-ref-c-pointer . F5452) (pointer-ref-c-double . F5451) (pointer-ref-c-float . F5450) (pointer-ref-c-unsigned-long-long . F544f) (pointer-ref-c-signed-long-long . F544e) (pointer-ref-c-unsigned-long . F544d) (pointer-ref-c-signed-long . F544c) (pointer-ref-c-unsigned-int . F544b) (pointer-ref-c-signed-int . F544a) (pointer-ref-c-unsigned-short . F5449) (pointer-ref-c-signed-short . F5448) (pointer-ref-c-unsigned-char . F5447) (pointer-ref-c-signed-char . F5446) (pointer->integer . F5445) (integer->pointer . F5444) (pointer? . F5443) (shared-errno . F5442) (get-c-address . F5441) (set-jit-compiled! . F5440) (jit-compiled? . F543f) (obj->integer . F543e) (u8-list->c-procedure . F543d) (%ffi-free-c-callback-trampoline . F543c) (%ffi-make-c-callback-trampoline . F543b) (%ffi-free . F543a) (%ffi-malloc . F5439) (%ffi-supported? . F5438) (%ffi-pointer->string . F5437) (%ffi-call . F5436) (%ffi-lookup . F5435) (%ffi-open . F5434) (null-terminated-utf8->string . F5433) (null-terminated-bytevector->string . F5432) (%fork . F5431) (%pipe . F5430) (p . F542f) (open-output-string . F542e) (get-output-string . F542d) (file-stat-ctime . F542c) (file-stat-atime . F542b) (file-stat-mtime . F542a) (file-size-in-bytes . F5429) (file-writable? . F5428) (file-executable? . F5427) (file-readable? . F5426) (file-regular? . F5425) (file-symbolic-link? . F5424) (file-directory? . F5423) (create-symbolic-link . F5422) (rename-file . F5421) (delete-directory . F5420) (create-directory . F541f) (create-mosh-cache-dir . F541e) (get-environment-variables . F541d) (current-exception-handler . F541c) (get-environment-variable . F541b) (join-wraps . F541a) (id->real-label . F5419) (same-marks? . F5418) (same-marks*? . F5417) (get-timeofday . F5416) (get-command-line . F5415) (sys-display . F5414) (whereis . F5413) (register . F5412) (vm-join! . F5411) (vm-set-value! . F5410) (vm? . F540f) (main-vm? . F540e) (vm-eval . F540d) (vm-self . F540c) (vm-start! . F540b) (make-vm . F540a) (mutex-try-lock! . F5409) (mutex-unlock! . F5408) (mutex-lock! . F5407) (mutex? . F5406) (make-mutex . F5405) (condition-variable-notify-all! . F5404) (condition-variable-notify! . F5403) (condition-variable-wait! . F5402) (make-condition-variable . F5401) (mosh-executable-path . F5400) (make-file-options . F53ff) (for-each-with-index . F53fe) (source-info . F53fd) (instruction? . F53fc) (instruction->integer . F53fb) (instruction->symbol . F53fa) (closure->list . F53f9) (make-compiler-instruction . F53f8) (make-instruction . F53f7) (set-source-info! . F53f6) (bignum? . F53f5) (fast-equal? . F53f4) (fasl-read . F53f3) (fasl-write . F53f2) (time-usage . F53f1) (os-constant . F53f0) (disasm . F53ef) (make-parameter . F2902) (socket-port . F53ee) (socket-shutdown . F53ed) (socket-close . F53ec) (socket-send . F53eb) (socket-recv! . F53ea) (socket-recv . F53e9) (make-server-socket . F53e8) (make-client-socket . F53e7) (socket-accept . F53e6) (socket? . F53e5) (string-upcase . F53e4) (string-titlecase . F53e3) (string-normalize-nfkd . F53e2) (string-normalize-nfkc . F53e1) (string-normalize-nfd . F53e0) (string-normalize-nfc . F53df) (string-foldcase . F53de) (string-downcase . F53dd) (string-ci>? . F53dc) (string-ci>=? . F53db) (string-ci=? . F53da) (string-ci<? . F53d9) (string-ci<=? . F53d8) (char-whitespace? . F53d7) (char-upper-case? . F53d6) (char-title-case? . F53d5) (char-numeric? . F53d4) (char-lower-case? . F53d3) (char-general-category . F53d2) (char-upcase . F53d1) (char-titlecase . F53d0) (char-foldcase . F53cf) (char-downcase . F53ce) (char-ci>? . F53cd) (char-ci>=? . F53cc) (char-ci=? . F53cb) (char-ci<? . F53ca) (char-ci<=? . F53c9) (char-alphabetic? . F53c8) (make-variable-transformer . F2f1d) (identifier? . F31d4) (generate-temporaries . F31c0) (free-identifier=? . F31c2) (syntax->datum . F31d8) (datum->syntax . F31d6) (bound-identifier=? . F31c4) (record-type-descriptor? . F53c7) (record-predicate . F53c6) (record-mutator . F53c5) (record-constructor . F53c4) (record-accessor . F53c3) (make-record-type-descriptor . F53c2) (make-record-constructor-descriptor . F53c1) (record? . F53c0) (record-type-uid . F53bf) (record-type-sealed? . F53be) (record-type-parent . F53bd) (record-type-opaque? . F53bc) (record-type-name . F53bb) (record-type-generative? . F53ba) (record-type-field-names . F53b9) (record-rtd . F53b8) (record-field-mutable? . F53b7) (delete-file . F53b6) (file-exists? . F53b5) (vector-sort! . F53b4) (vector-sort . F53b3) (list-sort . F53b2) (symbol-hash . F53b1) (string-ci-hash . F53b0) (string-hash . F53af) (equal-hash . F53ae) (hashtable-equivalence-function . F53ad) (make-hashtable . F53ac) (hashtable-hash-function . F53ab) (make-eqv-hashtable . F53aa) (make-eq-hashtable . F53a9) (hashtable? . F53a8) (hashtable-update! . F53a7) (hashtable-size . F53a6) (hashtable-set! . F53a5) (hashtable-ref . F53a4) (hashtable-mutable? . F53a3) (hashtable-keys . F53a2) (hashtable-entries . F53a1) (hashtable-delete! . F53a0) (hashtable-copy . F539f) (hashtable-contains? . F539e) (hashtable-clear! . F539d) (call-with-output-file . F539c) (call-with-input-file . F539b) (write-char . F539a) (write . F5399) (with-output-to-file . F5398) (with-input-from-file . F5397) (read-char . F5396) (read . F5395) (peek-char . F5394) (open-output-file . F5393) (open-input-file . F5392) (newline . F5391) (display . F5390) (close-output-port . F538f) (close-input-port . F538e) (eof-object? . F538d) (eof-object . F538c) (current-error-port . F538b) (current-output-port . F538a) (current-input-port . F5389) (output-port? . F5388) (input-port? . F5387) (utf-8-codec . F5386) (utf-16-codec . F5385) (transcoder-error-handling-mode . F5384) (transcoder-eol-style . F5383) (transcoder-codec . F5382) (transcoded-port . F5381) (textual-port? . F5380) (string->bytevector . F537f) (standard-output-port . F537e) (standard-input-port . F537d) (standard-error-port . F537c) (set-port-position! . F537b) (put-u8 . F537a) (put-string . F5379) (put-datum . F5378) (put-char . F5377) (put-bytevector . F5376) (port? . F5375) (port-transcoder . F5374) (port-position . F5373) (port-has-set-port-position!? . F5372) (port-has-port-position? . F5371) (port-eof? . F5370) (output-port-buffer-mode . F536f) (open-string-output-port . F536e) (open-string-input-port . F536d) (open-file-output-port . F536c) (open-file-input/output-port . F536b) (open-file-input-port . F536a) (open-bytevector-output-port . F5369) (open-bytevector-input-port . F5368) (native-transcoder . F5367) (native-eol-style . F5366) (make-transcoder . F5365) (latin-1-codec . F5364) (make-i/o-write-error . F4dfc) (make-i/o-read-error . F4de7) (make-i/o-port-error . F4e9d) (make-i/o-invalid-position-error . F4e13) (make-i/o-filename-error . F4e2e) (make-i/o-file-protection-error . F4e47) (make-i/o-file-is-read-only-error . F4e5c) (make-i/o-file-does-not-exist-error . F4e86) (make-i/o-file-already-exists-error . F4e71) (make-i/o-error . F4dd2) (make-i/o-encoding-error . F4ecd) (make-i/o-decoding-error . F4eb6) (make-custom-textual-output-port . F5363) (make-custom-textual-input/output-port . F5362) (make-custom-textual-input-port . F5361) (make-custom-binary-output-port . F5360) (make-custom-binary-input/output-port . F535f) (make-custom-binary-input-port . F535e) (make-bytevector . F535d) (lookahead-u8 . F535c) (lookahead-char . F535b) (i/o-write-error? . F4dfe) (i/o-read-error? . F4de9) (i/o-port-error? . F4ea1) (i/o-invalid-position-error? . F4e17) (i/o-filename-error? . F4e32) (i/o-file-protection-error? . F4e49) (i/o-file-is-read-only-error? . F4e5e) (i/o-file-does-not-exist-error? . F4e88) (i/o-file-already-exists-error? . F4e73) (i/o-error? . F4dd4) (i/o-error-position . F4e19) (i/o-error-port . F4ea3) (i/o-error-filename . F4e34) (i/o-encoding-error? . F4ed1) (i/o-encoding-error-char . F4ed3) (i/o-decoding-error? . F4eb8) (get-u8 . F535a) (get-string-n! . F5359) (get-string-n . F5358) (get-string-all . F5357) (get-line . F5356) (get-datum . F5355) (get-char . F5354) (get-bytevector-some . F5353) (get-bytevector-n! . F5352) (get-bytevector-n . F5351) (get-bytevector-all . F5350) (flush-output-port . F534f) (close-port . F534e) (scheme-report-environment . F31ae) (quotient . F534d) (null-environment . F31ac) (remainder . F534c) (modulo . F534b) (inexact->exact . F534a) (force . F5349) (exact->inexact . F5348) (make-promise . F5347) (exit . F5346) (command-line . F500a) (string-fill! . F5345) (string-set! . F5344) (set-cdr! . F5343) (set-car! . F5342) (remove . F5341) (remv . F5340) (remp . F533f) (remq . F533e) (partition . F533d) (memv . F533c) (memq . F533b) (memp . F533a) (member . F5339) (exists . F5338) (for-all . F5337) (fold-right . F5336) (fold-left . F5335) (find . F5334) (filter . F5333) (cons* . F5332) (assv . F5331) (assq . F5330) (assp . F532f) (assoc . F532e) (call-with-string-output-port . F532d) (call-with-port . F532c) (call-with-bytevector-output-port . F532b) (bytevector->string . F532a) (buffer-mode? . F5329) (binary-port? . F5328) (with-exception-handler . F5327) (raise-continuable . F5326) (raise . F5325) (eval . F31b2) (environment . F31aa) (make-enumeration . F5324) (enum-set=? . F5323) (enum-set-universe . F5322) (enum-set-union . F5321) (enum-set-subset? . F5320) (enum-set-projection . F531f) (enum-set-member? . F531e) (enum-set-intersection . F531d) (enum-set-indexer . F531c) (enum-set-difference . F531b) (enum-set-constructor . F531a) (enum-set-complement . F5319) (enum-set->list . F5318) (who-condition? . F4d48) (warning? . F4cc0) (violation? . F4cff) (undefined-violation? . F4dbf) (syntax-violation? . F4da6) (syntax-violation-subform . F4daa) (syntax-violation-form . F4da8) (syntax-violation . F31d2) (simple-conditions . F5317) (serious-condition? . F4cd5) (non-continuable-violation? . F4d5f) (message-condition? . F4ca9) (make-who-condition . F4d44) (make-warning . F4cbe) (make-violation . F4cfd) (make-undefined-violation . F4dbd) (make-syntax-violation . F4da0) (make-serious-condition . F4cd3) (make-non-continuable-violation . F4d5d) (make-message-condition . F4ca5) (make-lexical-violation . F4d87) (make-irritants-condition . F4d29) (make-implementation-restriction-violation . F4d72) (make-error . F4ce8) (make-assertion-violation . F4d12) (lexical-violation? . F4d89) (irritants-condition? . F4d2d) (implementation-restriction-violation? . F4d74) (error? . F4cea) (condition-who . F4d4a) (condition-predicate . F5316) (condition-message . F4cab) (condition-irritants . F4d2f) (condition-accessor . F5315) (condition . F5314) (assertion-violation? . F4d14) (condition? . F5313) (utf32->string . F5312) (utf16->string . F5311) (utf8->string . F5310) (uint-list->bytevector . F530f) (u8-list->bytevector . F530e) (string->utf8 . F530d) (string->utf32 . F530c) (string->utf16 . F530b) (sint-list->bytevector . F530a) (native-endianness . F5309) (bytevector? . F5308) (bytevector=? . F5307) (bytevector-uint-set! . F5306) (bytevector-uint-ref . F5305) (bytevector-u8-set! . F5304) (bytevector-u8-ref . F5303) (bytevector-u64-set! . F5302) (bytevector-u64-ref . F5301) (bytevector-u64-native-set! . F5300) (bytevector-u64-native-ref . F52ff) (bytevector-u32-set! . F52fe) (bytevector-u32-ref . F52fd) (bytevector-u32-native-set! . F52fc) (bytevector-u32-native-ref . F52fb) (bytevector-u16-set! . F52fa) (bytevector-u16-ref . F52f9) (bytevector-u16-native-set! . F52f8) (bytevector-u16-native-ref . F52f7) (bytevector-sint-set! . F52f6) (bytevector-sint-ref . F52f5) (bytevector-s8-set! . F52f4) (bytevector-s8-ref . F52f3) (bytevector-s64-set! . F52f2) (bytevector-s64-ref . F52f1) (bytevector-s64-native-set! . F52f0) (bytevector-s64-native-ref . F52ef) (bytevector-s32-set! . F52ee) (bytevector-s32-ref . F52ed) (bytevector-s32-native-set! . F52ec) (bytevector-s32-native-ref . F52eb) (bytevector-s16-set! . F52ea) (bytevector-s16-ref . F52e9) (bytevector-s16-native-set! . F52e8) (bytevector-s16-native-ref . F52e7) (bytevector-length . F52e6) (bytevector-ieee-single-ref . F52e5) (bytevector-ieee-single-set! . F52e4) (bytevector-ieee-single-native-set! . F52e3) (bytevector-ieee-single-native-ref . F52e2) (bytevector-ieee-double-set! . F52e1) (bytevector-ieee-double-ref . F52e0) (bytevector-ieee-double-native-set! . F52df) (bytevector-ieee-double-native-ref . F52de) (bytevector-fill! . F52dd) (bytevector-copy! . F52dc) (bytevector-copy . F52db) (bytevector->uint-list . F52da) (bytevector->u8-list . F52d9) (bytevector->sint-list . F52d8) (no-nans-violation? . F4efd) (no-infinities-violation? . F4ee8) (make-no-nans-violation . F4efb) (make-no-infinities-violation . F4ee6) (real->flonum . F52d7) (flzero? . F52d6) (fltruncate . F52d5) (fltan . F52d4) (flsqrt . F52d3) (flsin . F52d2) (flround . F52d1) (flpositive? . F52d0) (flonum? . F52cf) (flodd? . F52ce) (flnumerator . F52cd) (flnegative? . F52cc) (flnan? . F52cb) (flmod0 . F52ca) (flmod . F52c9) (flmin . F52c8) (flmax . F52c7) (fllog . F52c6) (flinteger? . F52c5) (flinfinite? . F52c4) (flfloor . F52c3) (flfinite? . F52c2) (flexpt . F52c1) (flexp . F52c0) (fleven? . F52bf) (fldiv0-and-mod0 . F52be) (fldiv0 . F52bd) (fldiv-and-mod . F52bc) (fldiv . F52bb) (fldenominator . F52ba) (flcos . F52b9) (flceiling . F52b8) (flatan . F52b7) (flasin . F52b6) (flacos . F52b5) (flabs . F52b4) (fl>? . F52b3) (fl>=? . F52b2) (fl=? . F52b1) (fl<? . F52b0) (fl<=? . F52af) (fl/ . F52ae) (fl- . F52ad) (fl+ . F52ac) (fl* . F52ab) (fixnum->flonum . F52aa) (fxzero? . F52a9) (fxxor . F52a8) (fxrotate-bit-field . F52a7) (fxreverse-bit-field . F52a6) (fxpositive? . F52a5) (fxodd? . F52a4) (fxnot . F52a3) (fxnegative? . F52a2) (fxmod0 . F52a1) (fxmod . F52a0) (fxmin . F529f) (fxmax . F529e) (fxlength . F529d) (fxior . F529c) (fxif . F529b) (fxfirst-bit-set . F529a) (fxeven? . F5299) (fxdiv0-and-mod0 . F5298) (fxdiv0 . F5297) (fxdiv-and-mod . F5296) (fxdiv . F5295) (fxcopy-bit-field . F5294) (fxcopy-bit . F5293) (fxbit-set? . F5292) (fxbit-field . F5291) (fxbit-count . F5290) (fxarithmetic-shift-right . F528f) (fxarithmetic-shift-left . F528e) (fxarithmetic-shift . F528d) (fxand . F528c) (fx>? . F528b) (fx>=? . F528a) (fx=? . F5289) (fx<? . F5288) (fx<=? . F5287) (fx-/carry . F5286) (fx- . F5285) (fx+/carry . F5284) (fx+ . F5283) (fx*/carry . F5282) (fx* . F5281) (greatest-fixnum . F5280) (least-fixnum . F527f) (fixnum-width . F527e) (fixnum? . F527d) (bitwise-rotate-bit-field . F527c) (bitwise-reverse-bit-field . F527b) (bitwise-length . F527a) (bitwise-if . F5279) (bitwise-first-bit-set . F5278) (bitwise-copy-bit-field . F5277) (bitwise-copy-bit . F5276) (bitwise-bit-set? . F5275) (bitwise-bit-field . F5274) (bitwise-bit-count . F5273) (bitwise-xor . F5272) (bitwise-ior . F5271) (bitwise-and . F5270) (bitwise-not . F526f) (bitwise-arithmetic-shift-right . F526e) (bitwise-arithmetic-shift-left . F526d) (bitwise-arithmetic-shift . F526c) (zero? . F526b) (vector? . F526a) (vector-set! . F5269) (vector-ref . F5268) (vector-map . F5267) (vector-length . F5266) (vector-for-each . F5265) (vector-fill! . F5264) (vector->list . F5263) (vector . F5262) (values . F5261) (truncate . F5260) (tan . F525f) (symbol? . F525e) (symbol=? . F525d) (symbol->string . F525c) (substring . F525b) (string? . F525a) (string>? . F5259) (string>=? . F5258) (string=? . F5257) (string<? . F5256) (string<=? . F5255) (string-ref . F5254) (string-length . F5253) (string-for-each . F5252) (string-copy . F5251) (string-append . F5250) (string->symbol . F524f) (string->number . F524e) (string->list . F524d) (string . F524c) (sqrt . F524b) (sin . F524a) (round . F5249) (reverse . F5248) (real? . F5247) (real-valued? . F5246) (real-part . F5245) (rationalize . F5244) (rational? . F5243) (rational-valued? . F5242) (procedure? . F5241) (positive? . F5240) (pair? . F523f) (odd? . F523e) (numerator . F523d) (number? . F523c) (number->string . F523b) (null? . F523a) (not . F5239) (negative? . F5238) (nan? . F5237) (min . F5236) (max . F5235) (map . F5234) (make-vector . F5233) (make-string . F5232) (make-rectangular . F5231) (make-polar . F5230) (magnitude . F522f) (log . F522e) (list? . F522d) (list-tail . F522c) (list-ref . F522b) (list->vector . F522a) (list->string . F5229) (list . F5228) (length . F5227) (lcm . F5226) (integer? . F5225) (integer-valued? . F5224) (integer->char . F5223) (infinite? . F5222) (inexact? . F5221) (inexact . F5220) (imag-part . F521f) (gcd . F521e) (for-each . F521d) (floor . F521c) (finite? . F521b) (expt . F521a) (exp . F5219) (exact? . F5218) (exact-integer-sqrt . F5217) (exact . F5216) (even? . F5215) (error . F5214) (eqv? . F5213) (equal? . F5212) (eq? . F5211) (dynamic-wind . F5210) (div0-and-mod0 . F520f) (mod0 . F520e) (div0 . F520d) (div-and-mod . F520c) (mod . F520b) (div . F520a) (denominator . F5209) (cos . F5208) (cons . F5207) (complex? . F5206) (char? . F5205) (char>? . F5204) (char>=? . F5203) (char=? . F5202) (char<? . F5201) (char<=? . F5200) (char->integer . F51ff) (ceiling . F51fe) (call-with-values . F51fd) (call/cc . F51fc) (call-with-current-continuation . F51fb) (cddddr . F51fa) (cdddar . F51f9) (cddadr . F51f8) (cddaar . F51f7) (cdaddr . F51f6) (cdadar . F51f5) (cdaadr . F51f4) (cdaaar . F51f3) (cadddr . F51f2) (caddar . F51f1) (cadadr . F51f0) (cadaar . F51ef) (caaddr . F51ee) (caadar . F51ed) (caaadr . F51ec) (caaaar . F51eb) (cdddr . F51ea) (cddar . F51e9) (cdadr . F51e8) (cdaar . F51e7) (caddr . F51e6) (cadar . F51e5) (caadr . F51e4) (caaar . F51e3) (cddr . F51e2) (cdar . F51e1) (cadr . F51e0) (caar . F51df) (cdr . F51de) (car . F51dd) (boolean? . F51dc) (boolean=? . F51db) (atan . F51da) (assertion-violation . F51d9) (assertion-error . F31cc) (asin . F51d8) (apply . F51d7) (append . F51d6) (angle . F51d5) (acos . F51d4) (abs . F51d3) (/ . F51d2) (* . F51d1) (- . F51d0) (+ . F51cf) (>= . F51ce) (> . F51cd) (= . F51cc) (<= . F51cb) (< . F51ca) (library . F51c9) (&no-nans . F51c8) (&no-infinities . F51c7) (&i/o-encoding . F51c6) (&i/o-decoding . F51c5) (&i/o-port . F51c4) (&i/o-file-does-not-exist . F51c3) (&i/o-file-already-exists . F51c2) (&i/o-file-is-read-only . F51c1) (&i/o-file-protection . F51c0) (&i/o-filename . F51bf) (&i/o-invalid-position . F51be) (&i/o-write . F51bd) (&i/o-read . F51bc) (&i/o . F51bb) (&undefined . F51ba) (&syntax . F51b9) (&lexical . F51b8) (&implementation-restriction . F51b7) (&non-continuable . F51b6) (&who . F51b5) (&irritants . F51b4) (&assertion . F51b3) (&violation . F51b2) (&error . F51b1) (&serious . F51b0) (&warning . F51af) (&message . F51ae) (&condition . F51ad) (define-condition-type . F51ac) (define-enumeration . F51ab) (define-record-type . F51aa) (parent-rtd . F51a9) (nongenerative . F51a8) (opaque . F51a7) (sealed . F51a6) (protocol . F51a5) (parent . F51a4) (immutable . F51a3) (mutable . F51a2) (fields . F51a1) (error-handling-mode . F51a0) (file-options . F519f) (buffer-mode . F519e) (eol-style . F519d) (guard . F519c) (trace-define . F519b) (trace-lambda . F519a) (unsyntax-splicing . F5199) (unsyntax . F5198) (unquote-splicing . F5197) (unquote . F5196) (_ . F5195) (else . F5194) (=> . F5193) (... . F5192) (assert . F5191) (endianness . F5190) (delay . F518f) (time . F518e) (do . F518d) (cond . F518c) (let* . F518b) (let*-values . F518a) (let-values . F5189) (identifier-syntax . F5188) (with-syntax . F5187) (quasisyntax . F5186) (quasiquote . F5185) (syntax-rules . F5184) (include . F5183) (define-struct . F5182) (record-constructor-descriptor . F5181) (record-type-descriptor . F5180) (case . F517f) (parameterize . F517e) (unless . F517d) (when . F517c) (or . F517b) (and . F517a) (if . F5179) (let . F5178) (letrec* . F5177) (letrec . F5176) (type-descriptor . F5175) (case-lambda . F5174) (lambda . F5173) (syntax . F5172) (syntax-case . F5171) (quote . F5170) (foreign-call . F516f) (letrec-syntax . F516e) (let-syntax . F516d) (set! . F516c) (import . F516b) (begin . F516a) (module . F5169) (define-syntax . F5168) (define . F5167)) '((F4f01 core-prim . &no-nans-rcd) (F4eff core-prim . &no-nans-rtd) (F4eec core-prim . &no-infinities-rcd) (F4eea core-prim . &no-infinities-rtd) (F4ed7 core-prim . &i/o-encoding-rcd) (F4ed5 core-prim . &i/o-encoding-rtd) (F4ebc core-prim . &i/o-decoding-rcd) (F4eba core-prim . &i/o-decoding-rtd) (F4ea7 core-prim . &i/o-port-rcd) (F4ea5 core-prim . &i/o-port-rtd) (F4e8c core-prim . &i/o-file-does-not-exist-rcd) (F4e8a core-prim . &i/o-file-does-not-exist-rtd) (F4e77 core-prim . &i/o-file-already-exists-rcd) (F4e75 core-prim . &i/o-file-already-exists-rtd) (F4e62 core-prim . &i/o-file-is-read-only-rcd) (F4e60 core-prim . &i/o-file-is-read-only-rtd) (F4e4d core-prim . &i/o-file-protection-rcd) (F4e4b core-prim . &i/o-file-protection-rtd) (F4e38 core-prim . &i/o-filename-rcd) (F4e36 core-prim . &i/o-filename-rtd) (F4e1d core-prim . &i/o-invalid-position-rcd) (F4e1b core-prim . &i/o-invalid-position-rtd) (F4e02 core-prim . &i/o-write-rcd) (F4e00 core-prim . &i/o-write-rtd) (F4ded core-prim . &i/o-read-rcd) (F4deb core-prim . &i/o-read-rtd) (F4dd8 core-prim . &i/o-rcd) (F4dd6 core-prim . &i/o-rtd) (F4dc3 core-prim . &undefined-rcd) (F4dc1 core-prim . &undefined-rtd) (F4dae core-prim . &syntax-rcd) (F4dac core-prim . &syntax-rtd) (F4d8d core-prim . &lexical-rcd) (F4d8b core-prim . &lexical-rtd) (F4d78 core-prim . &implementation-restriction-rcd) (F4d76 core-prim . &implementation-restriction-rtd) (F4d63 core-prim . &non-continuable-rcd) (F4d61 core-prim . &non-continuable-rtd) (F4d4e core-prim . &who-rcd) (F4d4c core-prim . &who-rtd) (F4d33 core-prim . &irritants-rcd) (F4d31 core-prim . &irritants-rtd) (F4d18 core-prim . &assertion-rcd) (F4d16 core-prim . &assertion-rtd) (F4d03 core-prim . &violation-rcd) (F4d01 core-prim . &violation-rtd) (F4cee core-prim . &error-rcd) (F4cec core-prim . &error-rtd) (F4cd9 core-prim . &serious-rcd) (F4cd7 core-prim . &serious-rtd) (F4cc4 core-prim . &warning-rcd) (F4cc2 core-prim . &warning-rtd) (F4caf core-prim . &message-rcd) (F4cad core-prim . &message-rtd) (F4c50 core-prim . &condition-rcd) (F4c4e core-prim . &condition-rtd) (F31ce core-prim . syntax-error) (F30f2 core-prim . syntax-dispatch) (F5498 core-prim . pretty-print) (F5497 core-prim . eval-core) (F5496 core-prim . set-symbol-value!) (F5495 core-prim . symbol-value) (F5494 core-prim . gensym) (F5493 core-prim . void) (F5010 core-prim . load) (F31e0 core-prim . interaction-environment) (F5492 core-prim . char-ready?) (F5491 core-prim . regexp?) (F5490 core-prim . read-line) (F548f core-prim . gensym-prefix-set!) (F548e core-prim . ungensym) (F548d core-prim . alist->eq-hash-table) (F548c core-prim . assoc-ref) (F548b core-prim . print) (F548a core-prim . format) (F5489 core-prim . host-os) (F2b1a core-prim . library-path) (F5488 core-prim . standard-library-path) (F5487 core-prim . file-newer?) (F5486 core-prim . stat-mtime) (F5485 core-prim . write-to-file) (F5484 core-prim . file->sexp-list) (F5483 core-prim . file->list) (F5482 core-prim . file->string) (F5481 core-prim . digit->integer) (F5480 core-prim . call-with-string-input-port) (F547f core-prim . call-with-string-io) (F547e core-prim . string-split) (F547d core-prim . bytevector-for-each) (F547c core-prim . string->regexp) (F547b core-prim . rxmatch) (F547a core-prim . regexp-replace-all) (F5479 core-prim . hashtable-for-each) (F2904 core-prim . mosh-cache-dir) (F5478 core-prim . call-process) (F5477 core-prim . local-tz-offset) (F5476 core-prim . microseconds) (F5475 core-prim . directory-list) (F5474 core-prim . set-current-directory!) (F5473 core-prim . expand-path) (F5472 core-prim . current-directory) (F5471 core-prim . %spawn) (F5470 core-prim . %waitpid) (F546f core-prim . simple-struct-name) (F546e core-prim . simple-struct-set!) (F546d core-prim . simple-struct-ref) (F546c core-prim . make-simple-struct) (F546b core-prim . simple-struct?) (F546a core-prim . pointer-ref-c-int64) (F5469 core-prim . pointer-ref-c-int32) (F5468 core-prim . pointer-ref-c-int16) (F5467 core-prim . pointer-ref-c-int8) (F5466 core-prim . pointer-ref-c-uint64) (F5465 core-prim . pointer-ref-c-uint32) (F5464 core-prim . pointer-ref-c-uint16) (F5463 core-prim . pointer-ref-c-uint8) (F5462 core-prim . pointer-set-c-uint64!) (F5461 core-prim . pointer-set-c-uint32!) (F5460 core-prim . pointer-set-c-uint16!) (F545f core-prim . pointer-set-c-uint8!) (F545e core-prim . pointer-set-c-int64!) (F545d core-prim . pointer-set-c-int32!) (F545c core-prim . pointer-set-c-int16!) (F545b core-prim . pointer-set-c-int8!) (F545a core-prim . pointer-set-c-pointer!) (F5459 core-prim . pointer-set-c-double!) (F5458 core-prim . pointer-set-c-float!) (F5457 core-prim . pointer-set-c-long-long!) (F5456 core-prim . pointer-set-c-long!) (F5455 core-prim . pointer-set-c-int!) (F5454 core-prim . pointer-set-c-short!) (F5453 core-prim . pointer-set-c-char!) (F5452 core-prim . pointer-ref-c-pointer) (F5451 core-prim . pointer-ref-c-double) (F5450 core-prim . pointer-ref-c-float) (F544f core-prim . pointer-ref-c-unsigned-long-long) (F544e core-prim . pointer-ref-c-signed-long-long) (F544d core-prim . pointer-ref-c-unsigned-long) (F544c core-prim . pointer-ref-c-signed-long) (F544b core-prim . pointer-ref-c-unsigned-int) (F544a core-prim . pointer-ref-c-signed-int) (F5449 core-prim . pointer-ref-c-unsigned-short) (F5448 core-prim . pointer-ref-c-signed-short) (F5447 core-prim . pointer-ref-c-unsigned-char) (F5446 core-prim . pointer-ref-c-signed-char) (F5445 core-prim . pointer->integer) (F5444 core-prim . integer->pointer) (F5443 core-prim . pointer?) (F5442 core-prim . shared-errno) (F5441 core-prim . get-c-address) (F5440 core-prim . set-jit-compiled!) (F543f core-prim . jit-compiled?) (F543e core-prim . obj->integer) (F543d core-prim . u8-list->c-procedure) (F543c core-prim . %ffi-free-c-callback-trampoline) (F543b core-prim . %ffi-make-c-callback-trampoline) (F543a core-prim . %ffi-free) (F5439 core-prim . %ffi-malloc) (F5438 core-prim . %ffi-supported?) (F5437 core-prim . %ffi-pointer->string) (F5436 core-prim . %ffi-call) (F5435 core-prim . %ffi-lookup) (F5434 core-prim . %ffi-open) (F5433 core-prim . null-terminated-utf8->string) (F5432 core-prim . null-terminated-bytevector->string) (F5431 core-prim . %fork) (F5430 core-prim . %pipe) (F542f core-prim . p) (F542e core-prim . open-output-string) (F542d core-prim . get-output-string) (F542c core-prim . file-stat-ctime) (F542b core-prim . file-stat-atime) (F542a core-prim . file-stat-mtime) (F5429 core-prim . file-size-in-bytes) (F5428 core-prim . file-writable?) (F5427 core-prim . file-executable?) (F5426 core-prim . file-readable?) (F5425 core-prim . file-regular?) (F5424 core-prim . file-symbolic-link?) (F5423 core-prim . file-directory?) (F5422 core-prim . create-symbolic-link) (F5421 core-prim . rename-file) (F5420 core-prim . delete-directory) (F541f core-prim . create-directory) (F541e core-prim . create-mosh-cache-dir) (F541d core-prim . get-environment-variables) (F541c core-prim . current-exception-handler) (F541b core-prim . get-environment-variable) (F541a core-prim . join-wraps) (F5419 core-prim . id->real-label) (F5418 core-prim . same-marks?) (F5417 core-prim . same-marks*?) (F5416 core-prim . get-timeofday) (F5415 core-prim . get-command-line) (F5414 core-prim . sys-display) (F5413 core-prim . whereis) (F5412 core-prim . register) (F5411 core-prim . vm-join!) (F5410 core-prim . vm-set-value!) (F540f core-prim . vm?) (F540e core-prim . main-vm?) (F540d core-prim . vm-eval) (F540c core-prim . vm-self) (F540b core-prim . vm-start!) (F540a core-prim . make-vm) (F5409 core-prim . mutex-try-lock!) (F5408 core-prim . mutex-unlock!) (F5407 core-prim . mutex-lock!) (F5406 core-prim . mutex?) (F5405 core-prim . make-mutex) (F5404 core-prim . condition-variable-notify-all!) (F5403 core-prim . condition-variable-notify!) (F5402 core-prim . condition-variable-wait!) (F5401 core-prim . make-condition-variable) (F5400 core-prim . mosh-executable-path) (F53ff core-prim . make-file-options) (F53fe core-prim . for-each-with-index) (F53fd core-prim . source-info) (F53fc core-prim . instruction?) (F53fb core-prim . instruction->integer) (F53fa core-prim . instruction->symbol) (F53f9 core-prim . closure->list) (F53f8 core-prim . make-compiler-instruction) (F53f7 core-prim . make-instruction) (F53f6 core-prim . set-source-info!) (F53f5 core-prim . bignum?) (F53f4 core-prim . fast-equal?) (F53f3 core-prim . fasl-read) (F53f2 core-prim . fasl-write) (F53f1 core-prim . time-usage) (F53f0 core-prim . os-constant) (F53ef core-prim . disasm) (F2902 core-prim . make-parameter) (F53ee core-prim . socket-port) (F53ed core-prim . socket-shutdown) (F53ec core-prim . socket-close) (F53eb core-prim . socket-send) (F53ea core-prim . socket-recv!) (F53e9 core-prim . socket-recv) (F53e8 core-prim . make-server-socket) (F53e7 core-prim . make-client-socket) (F53e6 core-prim . socket-accept) (F53e5 core-prim . socket?) (F53e4 core-prim . string-upcase) (F53e3 core-prim . string-titlecase) (F53e2 core-prim . string-normalize-nfkd) (F53e1 core-prim . string-normalize-nfkc) (F53e0 core-prim . string-normalize-nfd) (F53df core-prim . string-normalize-nfc) (F53de core-prim . string-foldcase) (F53dd core-prim . string-downcase) (F53dc core-prim . string-ci>?) (F53db core-prim . string-ci>=?) (F53da core-prim . string-ci=?) (F53d9 core-prim . string-ci<?) (F53d8 core-prim . string-ci<=?) (F53d7 core-prim . char-whitespace?) (F53d6 core-prim . char-upper-case?) (F53d5 core-prim . char-title-case?) (F53d4 core-prim . char-numeric?) (F53d3 core-prim . char-lower-case?) (F53d2 core-prim . char-general-category) (F53d1 core-prim . char-upcase) (F53d0 core-prim . char-titlecase) (F53cf core-prim . char-foldcase) (F53ce core-prim . char-downcase) (F53cd core-prim . char-ci>?) (F53cc core-prim . char-ci>=?) (F53cb core-prim . char-ci=?) (F53ca core-prim . char-ci<?) (F53c9 core-prim . char-ci<=?) (F53c8 core-prim . char-alphabetic?) (F2f1d core-prim . make-variable-transformer) (F31d4 core-prim . identifier?) (F31c0 core-prim . generate-temporaries) (F31c2 core-prim . free-identifier=?) (F31d8 core-prim . syntax->datum) (F31d6 core-prim . datum->syntax) (F31c4 core-prim . bound-identifier=?) (F53c7 core-prim . record-type-descriptor?) (F53c6 core-prim . record-predicate) (F53c5 core-prim . record-mutator) (F53c4 core-prim . record-constructor) (F53c3 core-prim . record-accessor) (F53c2 core-prim . make-record-type-descriptor) (F53c1 core-prim . make-record-constructor-descriptor) (F53c0 core-prim . record?) (F53bf core-prim . record-type-uid) (F53be core-prim . record-type-sealed?) (F53bd core-prim . record-type-parent) (F53bc core-prim . record-type-opaque?) (F53bb core-prim . record-type-name) (F53ba core-prim . record-type-generative?) (F53b9 core-prim . record-type-field-names) (F53b8 core-prim . record-rtd) (F53b7 core-prim . record-field-mutable?) (F53b6 core-prim . delete-file) (F53b5 core-prim . file-exists?) (F53b4 core-prim . vector-sort!) (F53b3 core-prim . vector-sort) (F53b2 core-prim . list-sort) (F53b1 core-prim . symbol-hash) (F53b0 core-prim . string-ci-hash) (F53af core-prim . string-hash) (F53ae core-prim . equal-hash) (F53ad core-prim . hashtable-equivalence-function) (F53ac core-prim . make-hashtable) (F53ab core-prim . hashtable-hash-function) (F53aa core-prim . make-eqv-hashtable) (F53a9 core-prim . make-eq-hashtable) (F53a8 core-prim . hashtable?) (F53a7 core-prim . hashtable-update!) (F53a6 core-prim . hashtable-size) (F53a5 core-prim . hashtable-set!) (F53a4 core-prim . hashtable-ref) (F53a3 core-prim . hashtable-mutable?) (F53a2 core-prim . hashtable-keys) (F53a1 core-prim . hashtable-entries) (F53a0 core-prim . hashtable-delete!) (F539f core-prim . hashtable-copy) (F539e core-prim . hashtable-contains?) (F539d core-prim . hashtable-clear!) (F539c core-prim . call-with-output-file) (F539b core-prim . call-with-input-file) (F539a core-prim . write-char) (F5399 core-prim . write) (F5398 core-prim . with-output-to-file) (F5397 core-prim . with-input-from-file) (F5396 core-prim . read-char) (F5395 core-prim . read) (F5394 core-prim . peek-char) (F5393 core-prim . open-output-file) (F5392 core-prim . open-input-file) (F5391 core-prim . newline) (F5390 core-prim . display) (F538f core-prim . close-output-port) (F538e core-prim . close-input-port) (F538d core-prim . eof-object?) (F538c core-prim . eof-object) (F538b core-prim . current-error-port) (F538a core-prim . current-output-port) (F5389 core-prim . current-input-port) (F5388 core-prim . output-port?) (F5387 core-prim . input-port?) (F5386 core-prim . utf-8-codec) (F5385 core-prim . utf-16-codec) (F5384 core-prim . transcoder-error-handling-mode) (F5383 core-prim . transcoder-eol-style) (F5382 core-prim . transcoder-codec) (F5381 core-prim . transcoded-port) (F5380 core-prim . textual-port?) (F537f core-prim . string->bytevector) (F537e core-prim . standard-output-port) (F537d core-prim . standard-input-port) (F537c core-prim . standard-error-port) (F537b core-prim . set-port-position!) (F537a core-prim . put-u8) (F5379 core-prim . put-string) (F5378 core-prim . put-datum) (F5377 core-prim . put-char) (F5376 core-prim . put-bytevector) (F5375 core-prim . port?) (F5374 core-prim . port-transcoder) (F5373 core-prim . port-position) (F5372 core-prim . port-has-set-port-position!?) (F5371 core-prim . port-has-port-position?) (F5370 core-prim . port-eof?) (F536f core-prim . output-port-buffer-mode) (F536e core-prim . open-string-output-port) (F536d core-prim . open-string-input-port) (F536c core-prim . open-file-output-port) (F536b core-prim . open-file-input/output-port) (F536a core-prim . open-file-input-port) (F5369 core-prim . open-bytevector-output-port) (F5368 core-prim . open-bytevector-input-port) (F5367 core-prim . native-transcoder) (F5366 core-prim . native-eol-style) (F5365 core-prim . make-transcoder) (F5364 core-prim . latin-1-codec) (F4dfc core-prim . make-i/o-write-error) (F4de7 core-prim . make-i/o-read-error) (F4e9d core-prim . make-i/o-port-error) (F4e13 core-prim . make-i/o-invalid-position-error) (F4e2e core-prim . make-i/o-filename-error) (F4e47 core-prim . make-i/o-file-protection-error) (F4e5c core-prim . make-i/o-file-is-read-only-error) (F4e86 core-prim . make-i/o-file-does-not-exist-error) (F4e71 core-prim . make-i/o-file-already-exists-error) (F4dd2 core-prim . make-i/o-error) (F4ecd core-prim . make-i/o-encoding-error) (F4eb6 core-prim . make-i/o-decoding-error) (F5363 core-prim . make-custom-textual-output-port) (F5362 core-prim . make-custom-textual-input/output-port) (F5361 core-prim . make-custom-textual-input-port) (F5360 core-prim . make-custom-binary-output-port) (F535f core-prim . make-custom-binary-input/output-port) (F535e core-prim . make-custom-binary-input-port) (F535d core-prim . make-bytevector) (F535c core-prim . lookahead-u8) (F535b core-prim . lookahead-char) (F4dfe core-prim . i/o-write-error?) (F4de9 core-prim . i/o-read-error?) (F4ea1 core-prim . i/o-port-error?) (F4e17 core-prim . i/o-invalid-position-error?) (F4e32 core-prim . i/o-filename-error?) (F4e49 core-prim . i/o-file-protection-error?) (F4e5e core-prim . i/o-file-is-read-only-error?) (F4e88 core-prim . i/o-file-does-not-exist-error?) (F4e73 core-prim . i/o-file-already-exists-error?) (F4dd4 core-prim . i/o-error?) (F4e19 core-prim . i/o-error-position) (F4ea3 core-prim . i/o-error-port) (F4e34 core-prim . i/o-error-filename) (F4ed1 core-prim . i/o-encoding-error?) (F4ed3 core-prim . i/o-encoding-error-char) (F4eb8 core-prim . i/o-decoding-error?) (F535a core-prim . get-u8) (F5359 core-prim . get-string-n!) (F5358 core-prim . get-string-n) (F5357 core-prim . get-string-all) (F5356 core-prim . get-line) (F5355 core-prim . get-datum) (F5354 core-prim . get-char) (F5353 core-prim . get-bytevector-some) (F5352 core-prim . get-bytevector-n!) (F5351 core-prim . get-bytevector-n) (F5350 core-prim . get-bytevector-all) (F534f core-prim . flush-output-port) (F534e core-prim . close-port) (F31ae core-prim . scheme-report-environment) (F534d core-prim . quotient) (F31ac core-prim . null-environment) (F534c core-prim . remainder) (F534b core-prim . modulo) (F534a core-prim . inexact->exact) (F5349 core-prim . force) (F5348 core-prim . exact->inexact) (F5347 core-prim . make-promise) (F5346 core-prim . exit) (F500a core-prim . command-line) (F5345 core-prim . string-fill!) (F5344 core-prim . string-set!) (F5343 core-prim . set-cdr!) (F5342 core-prim . set-car!) (F5341 core-prim . remove) (F5340 core-prim . remv) (F533f core-prim . remp) (F533e core-prim . remq) (F533d core-prim . partition) (F533c core-prim . memv) (F533b core-prim . memq) (F533a core-prim . memp) (F5339 core-prim . member) (F5338 core-prim . exists) (F5337 core-prim . for-all) (F5336 core-prim . fold-right) (F5335 core-prim . fold-left) (F5334 core-prim . find) (F5333 core-prim . filter) (F5332 core-prim . cons*) (F5331 core-prim . assv) (F5330 core-prim . assq) (F532f core-prim . assp) (F532e core-prim . assoc) (F532d core-prim . call-with-string-output-port) (F532c core-prim . call-with-port) (F532b core-prim . call-with-bytevector-output-port) (F532a core-prim . bytevector->string) (F5329 core-prim . buffer-mode?) (F5328 core-prim . binary-port?) (F5327 core-prim . with-exception-handler) (F5326 core-prim . raise-continuable) (F5325 core-prim . raise) (F31b2 core-prim . eval) (F31aa core-prim . environment) (F5324 core-prim . make-enumeration) (F5323 core-prim . enum-set=?) (F5322 core-prim . enum-set-universe) (F5321 core-prim . enum-set-union) (F5320 core-prim . enum-set-subset?) (F531f core-prim . enum-set-projection) (F531e core-prim . enum-set-member?) (F531d core-prim . enum-set-intersection) (F531c core-prim . enum-set-indexer) (F531b core-prim . enum-set-difference) (F531a core-prim . enum-set-constructor) (F5319 core-prim . enum-set-complement) (F5318 core-prim . enum-set->list) (F4d48 core-prim . who-condition?) (F4cc0 core-prim . warning?) (F4cff core-prim . violation?) (F4dbf core-prim . undefined-violation?) (F4da6 core-prim . syntax-violation?) (F4daa core-prim . syntax-violation-subform) (F4da8 core-prim . syntax-violation-form) (F31d2 core-prim . syntax-violation) (F5317 core-prim . simple-conditions) (F4cd5 core-prim . serious-condition?) (F4d5f core-prim . non-continuable-violation?) (F4ca9 core-prim . message-condition?) (F4d44 core-prim . make-who-condition) (F4cbe core-prim . make-warning) (F4cfd core-prim . make-violation) (F4dbd core-prim . make-undefined-violation) (F4da0 core-prim . make-syntax-violation) (F4cd3 core-prim . make-serious-condition) (F4d5d core-prim . make-non-continuable-violation) (F4ca5 core-prim . make-message-condition) (F4d87 core-prim . make-lexical-violation) (F4d29 core-prim . make-irritants-condition) (F4d72 core-prim . make-implementation-restriction-violation) (F4ce8 core-prim . make-error) (F4d12 core-prim . make-assertion-violation) (F4d89 core-prim . lexical-violation?) (F4d2d core-prim . irritants-condition?) (F4d74 core-prim . implementation-restriction-violation?) (F4cea core-prim . error?) (F4d4a core-prim . condition-who) (F5316 core-prim . condition-predicate) (F4cab core-prim . condition-message) (F4d2f core-prim . condition-irritants) (F5315 core-prim . condition-accessor) (F5314 core-prim . condition) (F4d14 core-prim . assertion-violation?) (F5313 core-prim . condition?) (F5312 core-prim . utf32->string) (F5311 core-prim . utf16->string) (F5310 core-prim . utf8->string) (F530f core-prim . uint-list->bytevector) (F530e core-prim . u8-list->bytevector) (F530d core-prim . string->utf8) (F530c core-prim . string->utf32) (F530b core-prim . string->utf16) (F530a core-prim . sint-list->bytevector) (F5309 core-prim . native-endianness) (F5308 core-prim . bytevector?) (F5307 core-prim . bytevector=?) (F5306 core-prim . bytevector-uint-set!) (F5305 core-prim . bytevector-uint-ref) (F5304 core-prim . bytevector-u8-set!) (F5303 core-prim . bytevector-u8-ref) (F5302 core-prim . bytevector-u64-set!) (F5301 core-prim . bytevector-u64-ref) (F5300 core-prim . bytevector-u64-native-set!) (F52ff core-prim . bytevector-u64-native-ref) (F52fe core-prim . bytevector-u32-set!) (F52fd core-prim . bytevector-u32-ref) (F52fc core-prim . bytevector-u32-native-set!) (F52fb core-prim . bytevector-u32-native-ref) (F52fa core-prim . bytevector-u16-set!) (F52f9 core-prim . bytevector-u16-ref) (F52f8 core-prim . bytevector-u16-native-set!) (F52f7 core-prim . bytevector-u16-native-ref) (F52f6 core-prim . bytevector-sint-set!) (F52f5 core-prim . bytevector-sint-ref) (F52f4 core-prim . bytevector-s8-set!) (F52f3 core-prim . bytevector-s8-ref) (F52f2 core-prim . bytevector-s64-set!) (F52f1 core-prim . bytevector-s64-ref) (F52f0 core-prim . bytevector-s64-native-set!) (F52ef core-prim . bytevector-s64-native-ref) (F52ee core-prim . bytevector-s32-set!) (F52ed core-prim . bytevector-s32-ref) (F52ec core-prim . bytevector-s32-native-set!) (F52eb core-prim . bytevector-s32-native-ref) (F52ea core-prim . bytevector-s16-set!) (F52e9 core-prim . bytevector-s16-ref) (F52e8 core-prim . bytevector-s16-native-set!) (F52e7 core-prim . bytevector-s16-native-ref) (F52e6 core-prim . bytevector-length) (F52e5 core-prim . bytevector-ieee-single-ref) (F52e4 core-prim . bytevector-ieee-single-set!) (F52e3 core-prim . bytevector-ieee-single-native-set!) (F52e2 core-prim . bytevector-ieee-single-native-ref) (F52e1 core-prim . bytevector-ieee-double-set!) (F52e0 core-prim . bytevector-ieee-double-ref) (F52df core-prim . bytevector-ieee-double-native-set!) (F52de core-prim . bytevector-ieee-double-native-ref) (F52dd core-prim . bytevector-fill!) (F52dc core-prim . bytevector-copy!) (F52db core-prim . bytevector-copy) (F52da core-prim . bytevector->uint-list) (F52d9 core-prim . bytevector->u8-list) (F52d8 core-prim . bytevector->sint-list) (F4efd core-prim . no-nans-violation?) (F4ee8 core-prim . no-infinities-violation?) (F4efb core-prim . make-no-nans-violation) (F4ee6 core-prim . make-no-infinities-violation) (F52d7 core-prim . real->flonum) (F52d6 core-prim . flzero?) (F52d5 core-prim . fltruncate) (F52d4 core-prim . fltan) (F52d3 core-prim . flsqrt) (F52d2 core-prim . flsin) (F52d1 core-prim . flround) (F52d0 core-prim . flpositive?) (F52cf core-prim . flonum?) (F52ce core-prim . flodd?) (F52cd core-prim . flnumerator) (F52cc core-prim . flnegative?) (F52cb core-prim . flnan?) (F52ca core-prim . flmod0) (F52c9 core-prim . flmod) (F52c8 core-prim . flmin) (F52c7 core-prim . flmax) (F52c6 core-prim . fllog) (F52c5 core-prim . flinteger?) (F52c4 core-prim . flinfinite?) (F52c3 core-prim . flfloor) (F52c2 core-prim . flfinite?) (F52c1 core-prim . flexpt) (F52c0 core-prim . flexp) (F52bf core-prim . fleven?) (F52be core-prim . fldiv0-and-mod0) (F52bd core-prim . fldiv0) (F52bc core-prim . fldiv-and-mod) (F52bb core-prim . fldiv) (F52ba core-prim . fldenominator) (F52b9 core-prim . flcos) (F52b8 core-prim . flceiling) (F52b7 core-prim . flatan) (F52b6 core-prim . flasin) (F52b5 core-prim . flacos) (F52b4 core-prim . flabs) (F52b3 core-prim . fl>?) (F52b2 core-prim . fl>=?) (F52b1 core-prim . fl=?) (F52b0 core-prim . fl<?) (F52af core-prim . fl<=?) (F52ae core-prim . fl/) (F52ad core-prim . fl-) (F52ac core-prim . fl+) (F52ab core-prim . fl*) (F52aa core-prim . fixnum->flonum) (F52a9 core-prim . fxzero?) (F52a8 core-prim . fxxor) (F52a7 core-prim . fxrotate-bit-field) (F52a6 core-prim . fxreverse-bit-field) (F52a5 core-prim . fxpositive?) (F52a4 core-prim . fxodd?) (F52a3 core-prim . fxnot) (F52a2 core-prim . fxnegative?) (F52a1 core-prim . fxmod0) (F52a0 core-prim . fxmod) (F529f core-prim . fxmin) (F529e core-prim . fxmax) (F529d core-prim . fxlength) (F529c core-prim . fxior) (F529b core-prim . fxif) (F529a core-prim . fxfirst-bit-set) (F5299 core-prim . fxeven?) (F5298 core-prim . fxdiv0-and-mod0) (F5297 core-prim . fxdiv0) (F5296 core-prim . fxdiv-and-mod) (F5295 core-prim . fxdiv) (F5294 core-prim . fxcopy-bit-field) (F5293 core-prim . fxcopy-bit) (F5292 core-prim . fxbit-set?) (F5291 core-prim . fxbit-field) (F5290 core-prim . fxbit-count) (F528f core-prim . fxarithmetic-shift-right) (F528e core-prim . fxarithmetic-shift-left) (F528d core-prim . fxarithmetic-shift) (F528c core-prim . fxand) (F528b core-prim . fx>?) (F528a core-prim . fx>=?) (F5289 core-prim . fx=?) (F5288 core-prim . fx<?) (F5287 core-prim . fx<=?) (F5286 core-prim . fx-/carry) (F5285 core-prim . fx-) (F5284 core-prim . fx+/carry) (F5283 core-prim . fx+) (F5282 core-prim . fx*/carry) (F5281 core-prim . fx*) (F5280 core-prim . greatest-fixnum) (F527f core-prim . least-fixnum) (F527e core-prim . fixnum-width) (F527d core-prim . fixnum?) (F527c core-prim . bitwise-rotate-bit-field) (F527b core-prim . bitwise-reverse-bit-field) (F527a core-prim . bitwise-length) (F5279 core-prim . bitwise-if) (F5278 core-prim . bitwise-first-bit-set) (F5277 core-prim . bitwise-copy-bit-field) (F5276 core-prim . bitwise-copy-bit) (F5275 core-prim . bitwise-bit-set?) (F5274 core-prim . bitwise-bit-field) (F5273 core-prim . bitwise-bit-count) (F5272 core-prim . bitwise-xor) (F5271 core-prim . bitwise-ior) (F5270 core-prim . bitwise-and) (F526f core-prim . bitwise-not) (F526e core-prim . bitwise-arithmetic-shift-right) (F526d core-prim . bitwise-arithmetic-shift-left) (F526c core-prim . bitwise-arithmetic-shift) (F526b core-prim . zero?) (F526a core-prim . vector?) (F5269 core-prim . vector-set!) (F5268 core-prim . vector-ref) (F5267 core-prim . vector-map) (F5266 core-prim . vector-length) (F5265 core-prim . vector-for-each) (F5264 core-prim . vector-fill!) (F5263 core-prim . vector->list) (F5262 core-prim . vector) (F5261 core-prim . values) (F5260 core-prim . truncate) (F525f core-prim . tan) (F525e core-prim . symbol?) (F525d core-prim . symbol=?) (F525c core-prim . symbol->string) (F525b core-prim . substring) (F525a core-prim . string?) (F5259 core-prim . string>?) (F5258 core-prim . string>=?) (F5257 core-prim . string=?) (F5256 core-prim . string<?) (F5255 core-prim . string<=?) (F5254 core-prim . string-ref) (F5253 core-prim . string-length) (F5252 core-prim . string-for-each) (F5251 core-prim . string-copy) (F5250 core-prim . string-append) (F524f core-prim . string->symbol) (F524e core-prim . string->number) (F524d core-prim . string->list) (F524c core-prim . string) (F524b core-prim . sqrt) (F524a core-prim . sin) (F5249 core-prim . round) (F5248 core-prim . reverse) (F5247 core-prim . real?) (F5246 core-prim . real-valued?) (F5245 core-prim . real-part) (F5244 core-prim . rationalize) (F5243 core-prim . rational?) (F5242 core-prim . rational-valued?) (F5241 core-prim . procedure?) (F5240 core-prim . positive?) (F523f core-prim . pair?) (F523e core-prim . odd?) (F523d core-prim . numerator) (F523c core-prim . number?) (F523b core-prim . number->string) (F523a core-prim . null?) (F5239 core-prim . not) (F5238 core-prim . negative?) (F5237 core-prim . nan?) (F5236 core-prim . min) (F5235 core-prim . max) (F5234 core-prim . map) (F5233 core-prim . make-vector) (F5232 core-prim . make-string) (F5231 core-prim . make-rectangular) (F5230 core-prim . make-polar) (F522f core-prim . magnitude) (F522e core-prim . log) (F522d core-prim . list?) (F522c core-prim . list-tail) (F522b core-prim . list-ref) (F522a core-prim . list->vector) (F5229 core-prim . list->string) (F5228 core-prim . list) (F5227 core-prim . length) (F5226 core-prim . lcm) (F5225 core-prim . integer?) (F5224 core-prim . integer-valued?) (F5223 core-prim . integer->char) (F5222 core-prim . infinite?) (F5221 core-prim . inexact?) (F5220 core-prim . inexact) (F521f core-prim . imag-part) (F521e core-prim . gcd) (F521d core-prim . for-each) (F521c core-prim . floor) (F521b core-prim . finite?) (F521a core-prim . expt) (F5219 core-prim . exp) (F5218 core-prim . exact?) (F5217 core-prim . exact-integer-sqrt) (F5216 core-prim . exact) (F5215 core-prim . even?) (F5214 core-prim . error) (F5213 core-prim . eqv?) (F5212 core-prim . equal?) (F5211 core-prim . eq?) (F5210 core-prim . dynamic-wind) (F520f core-prim . div0-and-mod0) (F520e core-prim . mod0) (F520d core-prim . div0) (F520c core-prim . div-and-mod) (F520b core-prim . mod) (F520a core-prim . div) (F5209 core-prim . denominator) (F5208 core-prim . cos) (F5207 core-prim . cons) (F5206 core-prim . complex?) (F5205 core-prim . char?) (F5204 core-prim . char>?) (F5203 core-prim . char>=?) (F5202 core-prim . char=?) (F5201 core-prim . char<?) (F5200 core-prim . char<=?) (F51ff core-prim . char->integer) (F51fe core-prim . ceiling) (F51fd core-prim . call-with-values) (F51fc core-prim . call/cc) (F51fb core-prim . call-with-current-continuation) (F51fa core-prim . cddddr) (F51f9 core-prim . cdddar) (F51f8 core-prim . cddadr) (F51f7 core-prim . cddaar) (F51f6 core-prim . cdaddr) (F51f5 core-prim . cdadar) (F51f4 core-prim . cdaadr) (F51f3 core-prim . cdaaar) (F51f2 core-prim . cadddr) (F51f1 core-prim . caddar) (F51f0 core-prim . cadadr) (F51ef core-prim . cadaar) (F51ee core-prim . caaddr) (F51ed core-prim . caadar) (F51ec core-prim . caaadr) (F51eb core-prim . caaaar) (F51ea core-prim . cdddr) (F51e9 core-prim . cddar) (F51e8 core-prim . cdadr) (F51e7 core-prim . cdaar) (F51e6 core-prim . caddr) (F51e5 core-prim . cadar) (F51e4 core-prim . caadr) (F51e3 core-prim . caaar) (F51e2 core-prim . cddr) (F51e1 core-prim . cdar) (F51e0 core-prim . cadr) (F51df core-prim . caar) (F51de core-prim . cdr) (F51dd core-prim . car) (F51dc core-prim . boolean?) (F51db core-prim . boolean=?) (F51da core-prim . atan) (F51d9 core-prim . assertion-violation) (F31cc core-prim . assertion-error) (F51d8 core-prim . asin) (F51d7 core-prim . apply) (F51d6 core-prim . append) (F51d5 core-prim . angle) (F51d4 core-prim . acos) (F51d3 core-prim . abs) (F51d2 core-prim . /) (F51d1 core-prim . *) (F51d0 core-prim . -) (F51cf core-prim . +) (F51ce core-prim . >=) (F51cd core-prim . >) (F51cc core-prim . =) (F51cb core-prim . <=) (F51ca core-prim . <) (F51c9 core-prim . library) (F51c8 $core-rtd &no-nans-rtd &no-nans-rcd) (F51c7 $core-rtd &no-infinities-rtd &no-infinities-rcd) (F51c6 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (F51c5 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (F51c4 $core-rtd &i/o-port-rtd &i/o-port-rcd) (F51c3 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (F51c2 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (F51c1 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (F51c0 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (F51bf $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (F51be $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (F51bd $core-rtd &i/o-write-rtd &i/o-write-rcd) (F51bc $core-rtd &i/o-read-rtd &i/o-read-rcd) (F51bb $core-rtd &i/o-rtd &i/o-rcd) (F51ba $core-rtd &undefined-rtd &undefined-rcd) (F51b9 $core-rtd &syntax-rtd &syntax-rcd) (F51b8 $core-rtd &lexical-rtd &lexical-rcd) (F51b7 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (F51b6 $core-rtd &non-continuable-rtd &non-continuable-rcd) (F51b5 $core-rtd &who-rtd &who-rcd) (F51b4 $core-rtd &irritants-rtd &irritants-rcd) (F51b3 $core-rtd &assertion-rtd &assertion-rcd) (F51b2 $core-rtd &violation-rtd &violation-rcd) (F51b1 $core-rtd &error-rtd &error-rcd) (F51b0 $core-rtd &serious-rtd &serious-rcd) (F51af $core-rtd &warning-rtd &warning-rcd) (F51ae $core-rtd &message-rtd &message-rcd) (F51ad $core-rtd &condition-rtd &condition-rcd) (F51ac macro . define-condition-type) (F51ab macro . define-enumeration) (F51aa macro . define-record-type) (F51a9 macro . parent-rtd) (F51a8 macro . nongenerative) (F51a7 macro . opaque) (F51a6 macro . sealed) (F51a5 macro . protocol) (F51a4 macro . parent) (F51a3 macro . immutable) (F51a2 macro . mutable) (F51a1 macro . fields) (F51a0 macro . error-handling-mode) (F519f macro . file-options) (F519e macro . buffer-mode) (F519d macro . eol-style) (F519c macro . guard) (F519b macro . trace-define) (F519a macro . trace-lambda) (F5199 macro . unsyntax-splicing) (F5198 macro . unsyntax) (F5197 macro . unquote-splicing) (F5196 macro . unquote) (F5195 macro . _) (F5194 macro . else) (F5193 macro . =>) (F5192 macro . ...) (F5191 macro . assert) (F5190 macro . endianness) (F518f macro . delay) (F518e macro . time) (F518d macro . do) (F518c macro . cond) (F518b macro . let*) (F518a macro . let*-values) (F5189 macro . let-values) (F5188 macro . identifier-syntax) (F5187 macro . with-syntax) (F5186 macro . quasisyntax) (F5185 macro . quasiquote) (F5184 macro . syntax-rules) (F5183 macro . include) (F5182 macro . define-struct) (F5181 core-macro . record-constructor-descriptor) (F5180 core-macro . record-type-descriptor) (F517f macro . case) (F517e macro . parameterize) (F517d macro . unless) (F517c macro . when) (F517b core-macro . or) (F517a core-macro . and) (F5179 core-macro . if) (F5178 core-macro . let) (F5177 core-macro . letrec*) (F5176 core-macro . letrec) (F5175 core-macro . type-descriptor) (F5174 core-macro . case-lambda) (F5173 core-macro . lambda) (F5172 core-macro . syntax) (F5171 core-macro . syntax-case) (F5170 core-macro . quote) (F516f core-macro . foreign-call) (F516e letrec-syntax) (F516d let-syntax) (F516c set!) (F516b import) (F516a begin) (F5169 module) (F5168 define-syntax) (F5167 define)) values values '#f '#f '#f '#f) (F2cff@F2b3b@install-library 'F54b9 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . F5498) (eval-core . F5497) (set-symbol-value! . F5496) (symbol-value . F5495) (gensym . F5494) (void . F5493)) '() values values '#f '#f '#f '#f) (F2cff@F2b3b@install-library 'F54ba '(mosh) '() '() '() '() '((set-symbol-value! . F5496) (symbol-value . F5495) (gensym . F5494) (regexp? . F5491) (read-line . F5490) (ungensym . F548e) (alist->eq-hash-table . F548d) (assoc-ref . F548c) (print . F548b) (format . F548a) (host-os . F5489) (library-path . F2b1a) (standard-library-path . F5488) (file-newer? . F5487) (stat-mtime . F5486) (digit->integer . F5481) (call-with-string-input-port . F5480) (call-with-string-io . F547f) (string-split . F547e) (bytevector-for-each . F547d) (string->regexp . F547c) (rxmatch . F547b) (regexp-replace-all . F547a) (hashtable-for-each . F5479) (set-current-directory! . F5474) (expand-path . F5473) (current-directory . F5472) (p . F542f) (get-timeofday . F5416) (get-command-line . F5415) (sys-display . F5414) (whereis . F5413) (register . F5412) (vm-join! . F5411) (vm-set-value! . F5410) (vm? . F540f) (main-vm? . F540e) (vm-eval . F540d) (vm-self . F540c) (vm-start! . F540b) (make-vm . F540a) (mutex-try-lock! . F5409) (mutex-unlock! . F5408) (mutex-lock! . F5407) (mutex? . F5406) (make-mutex . F5405) (condition-variable-notify-all! . F5404) (condition-variable-notify! . F5403) (condition-variable-wait! . F5402) (make-condition-variable . F5401) (mosh-executable-path . F5400) (make-file-options . F53ff) (for-each-with-index . F53fe) (source-info . F53fd) (make-compiler-instruction . F53f8) (make-instruction . F53f7) (set-source-info! . F53f6) (bignum? . F53f5) (fast-equal? . F53f4) (fasl-read . F53f3) (fasl-write . F53f2) (time-usage . F53f1) (os-constant . F53f0) (time . F518e) (include . F5183)) '() values values '#f '#f '#f '#f) (F2cff@F2b3b@install-library 'F54bb '(system) '() '() '() '() '((gensym-prefix-set! . F548f) (write-to-file . F5485) (file->sexp-list . F5484) (file->list . F5483) (file->string . F5482) (mosh-cache-dir . F2904) (call-process . F5478) (local-tz-offset . F5477) (microseconds . F5476) (directory-list . F5475) (expand-path . F5473) (%spawn . F5471) (%waitpid . F5470) (simple-struct-name . F546f) (simple-struct-set! . F546e) (simple-struct-ref . F546d) (make-simple-struct . F546c) (simple-struct? . F546b) (pointer-ref-c-int64 . F546a) (pointer-ref-c-int32 . F5469) (pointer-ref-c-int16 . F5468) (pointer-ref-c-int8 . F5467) (pointer-ref-c-uint64 . F5466) (pointer-ref-c-uint32 . F5465) (pointer-ref-c-uint16 . F5464) (pointer-ref-c-uint8 . F5463) (pointer-set-c-uint64! . F5462) (pointer-set-c-uint32! . F5461) (pointer-set-c-uint16! . F5460) (pointer-set-c-uint8! . F545f) (pointer-set-c-int64! . F545e) (pointer-set-c-int32! . F545d) (pointer-set-c-int16! . F545c) (pointer-set-c-int8! . F545b) (pointer-set-c-pointer! . F545a) (pointer-set-c-double! . F5459) (pointer-set-c-float! . F5458) (pointer-set-c-long-long! . F5457) (pointer-set-c-long! . F5456) (pointer-set-c-int! . F5455) (pointer-set-c-short! . F5454) (pointer-set-c-char! . F5453) (pointer-ref-c-pointer . F5452) (pointer-ref-c-double . F5451) (pointer-ref-c-float . F5450) (pointer-ref-c-unsigned-long-long . F544f) (pointer-ref-c-signed-long-long . F544e) (pointer-ref-c-unsigned-long . F544d) (pointer-ref-c-signed-long . F544c) (pointer-ref-c-unsigned-int . F544b) (pointer-ref-c-signed-int . F544a) (pointer-ref-c-unsigned-short . F5449) (pointer-ref-c-signed-short . F5448) (pointer-ref-c-unsigned-char . F5447) (pointer-ref-c-signed-char . F5446) (pointer->integer . F5445) (integer->pointer . F5444) (pointer? . F5443) (shared-errno . F5442) (get-c-address . F5441) (set-jit-compiled! . F5440) (jit-compiled? . F543f) (obj->integer . F543e) (u8-list->c-procedure . F543d) (%ffi-free-c-callback-trampoline . F543c) (%ffi-make-c-callback-trampoline . F543b) (%ffi-free . F543a) (%ffi-malloc . F5439) (%ffi-supported? . F5438) (%ffi-pointer->string . F5437) (%ffi-call . F5436) (%ffi-lookup . F5435) (%ffi-open . F5434) (null-terminated-utf8->string . F5433) (null-terminated-bytevector->string . F5432) (%fork . F5431) (%pipe . F5430) (open-output-string . F542e) (get-output-string . F542d) (file-stat-ctime . F542c) (file-stat-atime . F542b) (file-stat-mtime . F542a) (file-size-in-bytes . F5429) (file-writable? . F5428) (file-executable? . F5427) (file-readable? . F5426) (file-regular? . F5425) (file-symbolic-link? . F5424) (file-directory? . F5423) (create-symbolic-link . F5422) (rename-file . F5421) (delete-directory . F5420) (create-directory . F541f) (create-mosh-cache-dir . F541e) (get-environment-variables . F541d) (current-exception-handler . F541c) (get-environment-variable . F541b) (join-wraps . F541a) (id->real-label . F5419) (same-marks? . F5418) (same-marks*? . F5417) (instruction? . F53fc) (instruction->integer . F53fb) (instruction->symbol . F53fa) (closure->list . F53f9) (disasm . F53ef) (make-parameter . F2902) (socket-port . F53ee) (socket-shutdown . F53ed) (socket-close . F53ec) (socket-send . F53eb) (socket-recv! . F53ea) (socket-recv . F53e9) (make-server-socket . F53e8) (make-client-socket . F53e7) (socket-accept . F53e6) (socket? . F53e5) (parameterize . F517e)) '() values values '#f '#f '#f '#f)))
(begin (set! F4ff7@ref (unspecified)) (set! F4ff9@x* (unspecified)) (set! F4ffb@add-library-path! (unspecified)) (set! F4ffd@parse-and-add-library-path (unspecified)) (set! F4fff@rpad (unspecified)) (set! F5001@condition-printer (unspecified)) (set! F5003@record->field-alist (unspecified)) (set! F5005@map-with-index (unspecified)) (set! F5007@repl (unspecified)) (set! F5009@trace-printer (unspecified)) (set! F500b@command-line (unspecified)) (set! F500d@local-library-path (unspecified)) (set! F500f@load/args (unspecified)) (set! F5011@load (unspecified)) (set! F5013@ironscheme-build (unspecified)) (set! F5015@eval-top-level (unspecified)) (set! F5017@compile-system-libraries (unspecified)) (set! F5019@compile (unspecified)) (set! F501b@compile->closure (unspecified)) (set! F501d@pre-compile-r6rs-file (unspecified)) (set! F501f@load-r6rs-top-level (unspecified)) (set! F5021@load-r6rs-top-level-sexp (unspecified)) (set! F5023@prefix-inc (unspecified)) (set! F5025@prefix-inc! (unspecified)) (set! F4ff7@ref (lambda (F5060@rtd F5061@i F5062@x) (let ((F5066@val ((record-accessor F5060@rtd F5061@i) F5062@x))) (if (symbol? F5066@val) (ungensym F5066@val) F5066@val)))) (set! F514e@F4ff7@ref F4ff7@ref) (set! F4ff9@x* '()) (set! F514f@F4ff9@x* F4ff9@x*) (set! F4ffb@add-library-path! (lambda (F5068@path) (F2cef@F2b1b@library-path (append (F2cef@F2b1b@library-path) (list F5068@path))))) (set! F5150@F4ffb@add-library-path! F4ffb@add-library-path!) (set! F4ffd@parse-and-add-library-path (lambda (F506a@paths F506b@message) (let ((F506f@separator '#f)) (begin (set! F506f@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((F5070@t F506a@paths)) (if F5070@t ((lambda (F5072@paths) (for-each (lambda (F5074@path) (if (file-exists? F5074@path) (F4ffb@add-library-path! (expand-path F5074@path)) (format (current-error-port) F506b@message F5074@path))) (string-split F5072@paths F506f@separator))) F5070@t) (void))))))) (set! F5151@F4ffd@parse-and-add-library-path F4ffd@parse-and-add-library-path) (set! F4fff@rpad (lambda (F5076@str F5077@pad F5078@n) (let ((F507c@rest (- F5078@n (string-length (format '"~a" F5076@str))))) (let F5082@loop ((F507e@rest F507c@rest) (F507f@ret (format '"~a" F5076@str))) (if (<= F507e@rest '0) F507f@ret (F5082@loop (- F507e@rest '1) (string-append F507f@ret F5077@pad))))))) (set! F5152@F4fff@rpad F4fff@rpad) (set! F5001@condition-printer (lambda (F5084@e F5085@port) (let ((F5089@max-condition-len '#f)) (begin (set! F5089@max-condition-len (apply max (map (lambda (F509a@c) (string-length (symbol->string (record-type-name (record-rtd F509a@c))))) (simple-conditions F5084@e)))) (begin (display '" Condition components:\n" F5085@port) (for-each-with-index (lambda (F508a@i F508b@x) (let ((F508e@rtd (record-rtd F508b@x)) (F508f@fields-alist (F5003@record->field-alist F508b@x))) (begin (format F5085@port '" ~d. ~a" (+ F508a@i '1) (F4fff@rpad (symbol->string (record-type-name F508e@rtd)) '" " F5089@max-condition-len)) (if (null? F508f@fields-alist) (newline F5085@port) (void)) (let F5096@loop ((F5092@first '#t) (F5093@fields-alist F508f@fields-alist)) (if (null? F5093@fields-alist) '() (let ((F5098@field (car F5093@fields-alist))) (begin (if (not F5092@first) (display (F4fff@rpad '"" '" " (+ '4 F5089@max-condition-len)) F5085@port) (void)) (display '"       " F5085@port) (display (car F5098@field) F5085@port) (display '": " F5085@port) (write (cdr F5098@field) F5085@port) (newline F5085@port) (F5096@loop '#f (cdr F5093@fields-alist))))))))) (simple-conditions F5084@e))))))) (set! F5153@F5001@condition-printer F5001@condition-printer) (set! F5003@record->field-alist (lambda (F509c@r) (let ((F509f@ref '#f)) (begin (set! F509f@ref (lambda (F50aa@rtd F50ab@i F50ac@x) (let ((F50b0@val ((record-accessor F50aa@rtd F50ab@i) F50ac@x))) (if (symbol? F50b0@val) (ungensym F50b0@val) F50b0@val)))) (let F50a4@loop ((F50a0@ret '()) (F50a1@rtd (record-rtd F509c@r))) (if F50a1@rtd (F50a4@loop (append F50a0@ret (F5005@map-with-index (lambda (F50a6@i F50a7@field) (cons F50a7@field (F509f@ref F50a1@rtd F50a6@i F509c@r))) (vector->list (record-type-field-names F50a1@rtd)))) (record-type-parent F50a1@rtd)) F50a0@ret)))))) (set! F5154@F5003@record->field-alist F5003@record->field-alist) (set! F5005@map-with-index (lambda (F50b2@proc F50b3@lst) (let F50bc@loop ((F50b6@i '0) (F50b7@lst F50b3@lst) (F50b8@ret '())) (if (null? F50b7@lst) (reverse F50b8@ret) (F50bc@loop (+ F50b6@i '1) (cdr F50b7@lst) (cons (F50b2@proc F50b6@i (car F50b7@lst)) F50b8@ret)))))) (set! F5155@F5005@map-with-index F5005@map-with-index) (set! F5007@repl (lambda F50be@x (let ((F50c1@rec '#f)) (begin (set! F50c1@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (F50c4@F50c2) (lambda () (with-exception-handler (lambda (F50c6@e) ((call/cc (lambda (F50c8@F50c3) (F50c4@F50c2 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? F50c6@e) (F5001@condition-printer F50c6@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" F50c6@e))) (F50c8@F50c3 (lambda () (raise-continuable F50c6@e)))))))))) (lambda () (let F50ce@loop ((F50ca@line (get-line (current-input-port))) (F50cb@accum '"")) (let ((F50d1@parentheses-ok? '#f) (F50d3@eval-string-print '#f)) (begin (set! F50d1@parentheses-ok? (lambda (F50d8@text) (let F50e0@loop ((F50da@chars (string->list F50d8@text)) (F50db@p0 '0) (F50dc@p1 '0)) (if (null? F50da@chars) (= '0 F50db@p0 F50dc@p1) (let ((F50e2@t (car F50da@chars))) (if (memv F50e2@t '(#\()) (F50e0@loop (cdr F50da@chars) (+ F50db@p0 '1) F50dc@p1) (if (memv F50e2@t '(#\))) (F50e0@loop (cdr F50da@chars) (- F50db@p0 '1) F50dc@p1) (if (memv F50e2@t '(#\[)) (F50e0@loop (cdr F50da@chars) F50db@p0 (+ F50dc@p1 '1)) (if (memv F50e2@t '(#\])) (F50e0@loop (cdr F50da@chars) F50db@p0 (- F50dc@p1 '1)) (F50e0@loop (cdr F50da@chars) F50db@p0 F50dc@p1)))))))))) (set! F50d3@eval-string-print (lambda (F50d6@text) (if (not (or (string=? '"\n" F50d6@text) (= '0 (string-length F50d6@text)))) (write (F5015@eval-top-level (call-with-port (open-string-input-port F50d6@text) read))) (void)))) (if (eof-object? F50ca@line) (begin (F50d3@eval-string-print F50cb@accum) (exit)) (let ((F50d4@current (string-append F50cb@accum F50ca@line))) (if (F50d1@parentheses-ok? F50d4@current) (F50d3@eval-string-print F50d4@current) (F50ce@loop (get-line (current-input-port)) F50d4@current))))))))))))) (newline) (F50c1@rec)))) (F50c1@rec))))) (set! F5156@F5007@repl F5007@repl) (set! F5009@trace-printer (F2a25@F2903@make-parameter write)) (set! F5157@F5009@trace-printer F5009@trace-printer) (set! F500b@command-line (F2a25@F2903@make-parameter (get-command-line))) (set! F5158@F500b@command-line F500b@command-line) (set! F500d@local-library-path (lambda (F50e4@filename) (F2cef@F2b1b@library-path))) (set! F5159@F500d@local-library-path F500d@local-library-path) (set! F500f@load/args (lambda (F50e6@filename . F50e8@args) (begin (apply F501f@load-r6rs-top-level F50e6@filename 'load F50e8@args) (void)))) (set! F515a@F500f@load/args F500f@load/args) (set! F5011@load (lambda (F50ea@filename) (begin (apply F501f@load-r6rs-top-level F50ea@filename 'load (F500b@command-line)) (void)))) (set! F515b@F5011@load F5011@load) (set! F5013@ironscheme-build (lambda () (F5011@load '"ironscheme-buildscript.ss"))) (set! F515c@F5013@ironscheme-build F5013@ironscheme-build) (set! F5015@eval-top-level (lambda (F50ec@x) (F4c1d@F31b3@eval F50ec@x (F4c34@F31e1@interaction-environment)))) (set! F515d@F5015@eval-top-level F5015@eval-top-level) (set! F5017@compile-system-libraries (lambda () (F5015@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! F515e@F5017@compile-system-libraries F5017@compile-system-libraries) (set! F5019@compile (lambda (F50ee@filename) (F501f@load-r6rs-top-level F50ee@filename 'compile))) (set! F515f@F5019@compile F5019@compile) (set! F501b@compile->closure (lambda (F50f0@filename) (F501f@load-r6rs-top-level F50f0@filename 'closure))) (set! F5160@F501b@compile->closure F501b@compile->closure) (set! F501d@pre-compile-r6rs-file (lambda (F50f2@filename) (F501f@load-r6rs-top-level F50f2@filename 'compile))) (set! F5161@F501d@pre-compile-r6rs-file F501d@pre-compile-r6rs-file) (set! F501f@load-r6rs-top-level (lambda (F50f4@filename F50f5@how . F50f8@args) (begin (F2cef@F2b1b@library-path (F500d@local-library-path F50f4@filename)) (let ((F50fa@x* (with-input-from-file F50f4@filename (lambda () (let F50fc@f () (let ((F50fe@x (F2a17@F28e7@read-annotated))) (if (eof-object? F50fe@x) '() (cons F50fe@x (F50fc@f))))))))) (let ((F5100@t F50f5@how)) (if (memv F5100@t '(closure)) (F4c33@F31df@pre-compile-r6rs-top-level F50fa@x*) (if (memv F5100@t '(load)) (begin (F500b@command-line (cons F50f4@filename (car F50f8@args))) (F2a26@F2905@mosh-cache-dir (create-mosh-cache-dir)) (if (F2a26@F2905@mosh-cache-dir) (gensym-prefix-set! (F5025@prefix-inc! (string-append (F2a26@F2905@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (F5102@file) ((call/cc (lambda (F5106@F5104) (lambda () (with-exception-handler (lambda (F5108@c2) ((call/cc (lambda (F510a@F5105) (F5106@F5104 (lambda () (if '#t '#t (F510a@F5105 (lambda () (raise-continuable F5108@c2)))))))))) (lambda () (delete-file (string-append (F2a26@F2905@mosh-cache-dir) '"/" F5102@file))))))))) (directory-list (F2a26@F2905@mosh-cache-dir))) (void)) (let ((F510c@compiled (F4c32@F31dd@compile-r6rs-top-level F50fa@x*))) (begin (if (and (F2a26@F2905@mosh-cache-dir) (not (symbol-value '%disable-acc))) (F2cf3@F2b23@serialize-all F2a20@F28f9@serialize-library F2a7c@F2a35@compile-core-expr) (void)) (F510c@compiled)))) (if (memv F5100@t '(compile)) (begin (F4c32@F31dd@compile-r6rs-top-level F50fa@x*) (F2cf3@F2b23@serialize-all F2a20@F28f9@serialize-library F2a7c@F2a35@compile-core-expr)) (if '#f '#f (void)))))))))) (set! F5162@F501f@load-r6rs-top-level F501f@load-r6rs-top-level) (set! F5021@load-r6rs-top-level-sexp (lambda (F510e@import-spec F510f@thunk) (let ((F511a@F5113 F2cef@F2b1b@library-path) (F511b@F5115 F2a26@F2905@mosh-cache-dir) (F511c@F5117 (F500d@local-library-path '"")) (F511d@F5119 (create-mosh-cache-dir))) (let ((F5122@swap (lambda () (begin (let ((F5124@t (F511a@F5113))) (begin (F511a@F5113 F511c@F5117) (set! F511c@F5117 F5124@t))) (let ((F5126@t (F511b@F5115))) (begin (F511b@F5115 F511d@F5119) (set! F511d@F5119 F5126@t))))))) (dynamic-wind F5122@swap (lambda () (begin (if (F2a26@F2905@mosh-cache-dir) (gensym-prefix-set! (F5025@prefix-inc! (string-append (F2a26@F2905@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((F512c@F5129 F500b@command-line) (F512d@F512b '())) (let ((F5130@swap (lambda () (let ((F5132@t (F512c@F5129))) (begin (F512c@F5129 F512d@F512b) (set! F512d@F512b F5132@t)))))) (dynamic-wind F5130@swap (lambda () ((F4c32@F31dd@compile-r6rs-top-level (list (cons 'import F510e@import-spec) (list F510f@thunk))))) F5130@swap))))) F5122@swap))))) (set! F5163@F5021@load-r6rs-top-level-sexp F5021@load-r6rs-top-level-sexp) (set! F5023@prefix-inc (lambda (F5134@prefix-string) (let ((F5136@prefix (symbol->string F5134@prefix-string))) (let ((F5138@len (string-length F5136@prefix))) (let F5140@loop ((F513a@i (- F5138@len '1)) (F513b@carry? '#t) (F513c@accum '())) (if (< F513a@i '0) (string->symbol (list->string (if F513b@carry? (cons '#\a F513c@accum) F513c@accum))) (if F513b@carry? (let ((F5142@next-integer (+ '1 (char->integer (string-ref F5136@prefix F513a@i))))) (if (= F5142@next-integer '123) (F5140@loop (- F513a@i '1) '#f (cons '#\A F513c@accum)) (if (= F5142@next-integer '91) (F5140@loop (- F513a@i '1) '#t (cons '#\a F513c@accum)) (F5140@loop (- F513a@i '1) '#f (cons (integer->char F5142@next-integer) F513c@accum))))) (F5140@loop (- F513a@i '1) '#f (cons (string-ref F5136@prefix F513a@i) F513c@accum))))))))) (set! F5164@F5023@prefix-inc F5023@prefix-inc) (set! F5025@prefix-inc! (lambda (F5144@file) (begin (if (not (file-exists? F5144@file)) (call-with-output-file F5144@file (lambda (F5146@port) (write 'd F5146@port))) (void)) (let ((F5148@prefix (call-with-input-file F5144@file read))) (if (main-vm?) (let ((F514a@next-prefix (F5023@prefix-inc F5148@prefix))) (begin (call-with-port (open-file-output-port F5144@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (F514c@port) (write F514a@next-prefix F514c@port))) F5148@prefix)) F5148@prefix))))) (set! F5165@F5025@prefix-inc! F5025@prefix-inc!) (begin (F2cf4@F2b25@current-precompiled-library-loader F2a21@F28fb@load-serialized-library) (set-symbol-value! 'load F5011@load) (set-symbol-value! 'pre-compile-r6rs-file F501d@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs F5015@eval-top-level) (set-symbol-value! 'int-env-syms F4c14@F31a1@interaction-environment-symbols) (set-symbol-value! 'expanded2core F2a7b@F2a33@expanded->core) (set-symbol-value! 'trace-printer F5009@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'invoke-library-by-name F2d04@F2b45@invoke-library-by-name) (set-symbol-value! 'create-non-continuable-violation (lambda (F5026@c) (condition (F4f54@F4d5e@make-non-continuable-violation) (F4f4a@F4d45@make-who-condition 'raise) (F4f0e@F4ca6@make-message-condition '"returned from non-continuable exception") (F4f40@F4d2a@make-irritants-condition (list F5026@c))))) (F4ffd@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (F4ffd@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (F4ffb@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (F4ffb@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (F4ffb@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((F5028@prefix (lambda (F502a@ext F502b@ls) (append (map (lambda (F502e@x) (string-append F502a@ext F502e@x)) F502b@ls) F502b@ls)))) (F2cf0@F2b1d@library-extensions (F5028@prefix '".mosh" (F2cf0@F2b1d@library-extensions)))) (with-exception-handler (lambda (F5030@c) (begin (if (condition? F5030@c) (F5001@condition-printer F5030@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" F5030@c)) F5030@c)) (lambda () (if ((call/cc (lambda (F5034@F5032) (lambda () (with-exception-handler (lambda (F5036@c3) ((call/cc (lambda (F5038@F5033) (F5034@F5032 (lambda () (if '#t '#f (F5038@F5033 (lambda () (raise-continuable F5036@c3)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (F5021@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (F500b@command-line)) (let ((F5042@F503b F500b@command-line) (F5043@F503d F2a26@F2905@mosh-cache-dir) (F5044@F503f '()) (F5045@F5041 (create-mosh-cache-dir))) (let ((F504a@swap (lambda () (begin (let ((F504c@t (F5042@F503b))) (begin (F5042@F503b F5044@F503f) (set! F5044@F503f F504c@t))) (let ((F504e@t (F5043@F503d))) (begin (F5043@F503d F5045@F5041) (set! F5045@F5041 F504e@t))))))) (dynamic-wind F504a@swap (lambda () (begin (if (F2a26@F2905@mosh-cache-dir) (gensym-prefix-set! (F5025@prefix-inc! (string-append (F2a26@F2905@mosh-cache-dir) '"/prefix.txt"))) (void)) (F5007@repl))) F504a@swap))) (begin (F2cef@F2b1b@library-path (F500d@local-library-path (car (F500b@command-line)))) (set! F4ff9@x* (with-input-from-file (car (F500b@command-line)) (lambda () (let F5050@f () (let ((F5052@x (F2a17@F28e7@read-annotated))) (if (eof-object? F5052@x) '() (cons F5052@x (F5050@f)))))))) (F500b@command-line (cons (car (F500b@command-line)) (cdr (F500b@command-line)))) (F2a26@F2905@mosh-cache-dir (create-mosh-cache-dir)) (if (F2a26@F2905@mosh-cache-dir) (gensym-prefix-set! (F5025@prefix-inc! (string-append (F2a26@F2905@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (F5054@file) ((call/cc (lambda (F5058@F5056) (lambda () (with-exception-handler (lambda (F505a@c4) ((call/cc (lambda (F505c@F5057) (F5058@F5056 (lambda () (if '#t '#t (F505c@F5057 (lambda () (raise-continuable F505a@c4)))))))))) (lambda () (delete-file (string-append (F2a26@F2905@mosh-cache-dir) '"/" F5054@file))))))))) (directory-list (F2a26@F2905@mosh-cache-dir))) (void)) (let ((F505e@compiled (F4c32@F31dd@compile-r6rs-top-level F4ff9@x*))) (begin (if (and (F2a26@F2905@mosh-cache-dir) (not (symbol-value '%disable-acc))) (F2cf3@F2b23@serialize-all F2a20@F28f9@serialize-library F2a7c@F2a35@compile-core-expr) (void)) (F505e@compiled))))))))))
