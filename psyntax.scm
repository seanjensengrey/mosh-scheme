;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! wy2912@library-file-path->cache-path (unspecified)) (set! wy2914@read-annotated (unspecified)) (set! wy2916@annotation-stripped (unspecified)) (set! wy2918@annotation? (unspecified)) (set! wy291a@annotation-source (unspecified)) (set! wy291c@annotation-expression (unspecified)) (set! wy291e@scm->fasl (unspecified)) (set! wy2920@fasl-save (unspecified)) (set! wy2922@fasl-load (unspecified)) (set! wy2924@verbose? (unspecified)) (set! wy2926@serialize-library (unspecified)) (set! wy2928@load-serialized-library (unspecified)) (set! wy292a@make-record-printer (unspecified)) (set! wy292c@compile-core (unspecified)) (set! wy292e@read-library-source-file (unspecified)) (set! wy2930@make-parameter (unspecified)) (set! wy2932@mosh-cache-dir (unspecified)) (set! wy29c8@file-options-spec (unspecified)) (set! wy2912@library-file-path->cache-path (lambda (wy29c9@x) (call-with-values (lambda () (open-string-output-port)) (lambda (wy29cf@wy29cc wy29d0@wy29ce) (let ((wy29d3@extract wy29d0@wy29ce) (wy29d4@p wy29cf@wy29cc)) (letrec* ((wy29d8@display-hex (lambda (wy29e1@n) (if (<= '0 wy29e1@n '9) (display wy29e1@n wy29d4@p) (display (integer->char (+ (char->integer '#\a) (- wy29e1@n '10))) wy29d4@p))))) (begin (let wy29db@f ((wy29d9@ls (string-split wy29c9@x '#\/))) (if (not (null? wy29d9@ls)) (begin (display '"_" wy29d4@p) (for-each (lambda (wy29dd@c) (if (or (char<=? '#\a wy29dd@c '#\z) (char<=? '#\A wy29dd@c '#\Z) (char<=? '#\0 wy29dd@c '#\9) (memv wy29dd@c '(#\- #\. #\_ #\~))) (display wy29dd@c wy29d4@p) (begin (display '"%" wy29d4@p) (let ((wy29df@n (char->integer wy29dd@c))) (begin (wy29d8@display-hex (quotient wy29df@n '16)) (wy29d8@display-hex (remainder wy29df@n '16))))))) (string->list (car wy29d9@ls))) (wy29db@f (cdr wy29d9@ls))) (void))) (wy29d3@extract)))))))) (set! wy2a43@wy2912@library-file-path->cache-path wy2912@library-file-path->cache-path) (set! wy2914@read-annotated read) (set! wy2a44@wy2914@read-annotated wy2914@read-annotated) (set! wy2916@annotation-stripped (lambda (wy29e3@x) (if (pair? wy29e3@x) (cons (wy2916@annotation-stripped (car wy29e3@x)) (wy2916@annotation-stripped (cdr wy29e3@x))) (if (procedure? wy29e3@x) (set-source-info! wy29e3@x '#f) wy29e3@x)))) (set! wy2a45@wy2916@annotation-stripped wy2916@annotation-stripped) (set! wy2918@annotation? (lambda (wy29e5@x) (or (and (annotated-pair? wy29e5@x) (source-info wy29e5@x)) (and (procedure? wy29e5@x) (source-info wy29e5@x))))) (set! wy2a46@wy2918@annotation? wy2918@annotation?) (set! wy291a@annotation-source (lambda (wy29e7@x) (source-info wy29e7@x))) (set! wy2a47@wy291a@annotation-source wy291a@annotation-source) (set! wy291c@annotation-expression (lambda (wy29e9@x) (if (annotated-pair? wy29e9@x) (cons (car wy29e9@x) (cdr wy29e9@x)) (if (procedure? wy29e9@x) (set-source-info! wy29e9@x '#f) wy29e9@x)))) (set! wy2a48@wy291c@annotation-expression wy291c@annotation-expression) (set! wy291e@scm->fasl (lambda (wy29eb@filename) (string-append (wy2932@mosh-cache-dir) '"/" (wy2912@library-file-path->cache-path wy29eb@filename) '".mosh-fasl"))) (set! wy2a49@wy291e@scm->fasl wy291e@scm->fasl) (set! wy2920@fasl-save (lambda (wy29ed@filename wy29ee@obj) (call-with-port (open-file-output-port wy29ed@filename) (lambda (wy29f1@port) ((symbol-value 'fasl-write!) wy29ee@obj wy29f1@port))))) (set! wy2a4a@wy2920@fasl-save wy2920@fasl-save) (set! wy2922@fasl-load (lambda (wy29f3@filename) (call-with-port (open-file-input-port wy29f3@filename) (symbol-value 'fasl-read!)))) (set! wy2a4b@wy2922@fasl-load wy2922@fasl-load) (set! wy2924@verbose? (symbol-value '%verbose)) (set! wy2a4c@wy2924@verbose? wy2924@verbose?) (set! wy2926@serialize-library (lambda (wy29f5@filename wy29f6@obj) (begin (if wy2924@verbose? (format (current-error-port) '"serialize-library ~a\n..." wy29f5@filename) (void)) (let ((wy29f9@expanded2core (symbol-value 'expanded2core))) (let ((wy29fb@compile (symbol-value 'compile-w/o-halt))) (let ((wy29fd@code wy29f6@obj)) (let ((wy29ff@pivot (cddddr (cddddr wy29fd@code)))) (let ((wy2a01@visit (wy29fb@compile (wy29f9@expanded2core (car wy29ff@pivot))))) (begin (set-car! wy29ff@pivot wy2a01@visit) (let ((wy2a03@pivot (cdr wy29ff@pivot))) (let ((wy2a05@invoke (wy29fb@compile (wy29f9@expanded2core (car wy2a03@pivot))))) (set-car! wy2a03@pivot wy2a05@invoke))))))))) (let ((wy2a07@fasl-file (wy291e@scm->fasl wy29f5@filename))) (begin (if (file-exists? wy2a07@fasl-file) (delete-file wy2a07@fasl-file) (void)) ((call/cc (lambda (wy2a0b@wy2a09) (lambda () (with-exception-handler (lambda (wy2a0d@c) ((call/cc (lambda (wy2a0f@wy2a0a) (wy2a0b@wy2a09 (lambda () (if '#t (begin (if wy2924@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" wy29f5@filename) (void)) (if (file-exists? wy2a07@fasl-file) (delete-file wy2a07@fasl-file) (void)) '#f) (wy2a0f@wy2a0a (lambda () (raise-continuable wy2a0d@c)))))))))) (lambda () (wy2920@fasl-save wy2a07@fasl-file wy29f6@obj)))))))))))) (set! wy2a4d@wy2926@serialize-library wy2926@serialize-library) (set! wy2928@load-serialized-library (lambda (wy2a11@filename wy2a12@obj) (and (wy2932@mosh-cache-dir) (let ((wy2a15@fasl-file (wy291e@scm->fasl wy2a11@filename))) (if (and (file-exists? wy2a15@fasl-file) ((symbol-value 'file-newer?) wy2a15@fasl-file wy2a11@filename)) (let ((wy2a17@expanded2core (symbol-value 'expanded2core))) (let ((wy2a19@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((wy2a1b@code (wy2922@fasl-load wy2a15@fasl-file))) (let ((wy2a1d@pivot (cddddr (cddddr wy2a1b@code)))) (let ((wy2a1f@visit (car wy2a1d@pivot))) (let ((wy2a21@visit-proc (lambda () (wy2a19@eval-compiled-core wy2a1f@visit)))) (begin (set-car! wy2a1d@pivot wy2a21@visit-proc) (let ((wy2a23@pivot (cdr wy2a1d@pivot))) (let ((wy2a25@invoke (car wy2a23@pivot))) (begin (set-car! wy2a23@pivot (lambda () (wy2a19@eval-compiled-core wy2a25@invoke))) (apply wy2a12@obj wy2a1b@code))))))))))) '#f))))) (set! wy2a4e@wy2928@load-serialized-library wy2928@load-serialized-library) (set! wy292a@make-record-printer (lambda (wy2a27@name wy2a28@printer) (lambda wy2a2b@x (begin (display '"record printer") (for-each display wy2a2b@x))))) (set! wy2a4f@wy292a@make-record-printer wy292a@make-record-printer) (set! wy292c@compile-core (lambda wy2a2d@x (apply error 'comile-core '"not implementated" wy2a2d@x))) (set! wy2a50@wy292c@compile-core wy292c@compile-core) (set! wy292e@read-library-source-file (lambda (wy2a2f@file-name) (with-input-from-file wy2a2f@file-name wy2914@read-annotated))) (set! wy2a51@wy292e@read-library-source-file wy292e@read-library-source-file) (set! wy2930@make-parameter (lambda wy2a3f (let ((wy2a40 (length wy2a3f))) (if (= wy2a40 '1) (apply (lambda (wy2a31@x) (wy2930@make-parameter wy2a31@x (lambda (wy2a33@x) wy2a33@x))) wy2a3f) (if (= wy2a40 '2) (apply (lambda (wy2a35@x wy2a36@fender) (let ((wy2a39@x (wy2a36@fender wy2a35@x))) (lambda wy2a3d (let ((wy2a3e (length wy2a3d))) (if (= wy2a3e '0) (apply (lambda () wy2a39@x) wy2a3d) (if (= wy2a3e '1) (apply (lambda (wy2a3b@v) (set! wy2a39@x (wy2a36@fender wy2a3b@v))) wy2a3d) (error 'apply '"invalid arg count"))))))) wy2a3f) (error 'apply '"invalid arg count")))))) (set! wy2a52@wy2930@make-parameter wy2930@make-parameter) (set! wy2932@mosh-cache-dir (wy2930@make-parameter '#f)) (set! wy2a53@wy2932@mosh-cache-dir wy2932@mosh-cache-dir) (set! wy29c8@file-options-spec (lambda (wy2a41@x) wy2a41@x)) (set! wy2a54@wy29c8@file-options-spec wy29c8@file-options-spec) (void))
(begin (set! wy2a5a@current-primitive-locations (unspecified)) (set! wy2a5c@mutable? (unspecified)) (set! wy2a5e@rewriter (unspecified)) (set! wy2a60@expanded->core (unspecified)) (set! wy2a62@compile-core-expr (unspecified)) (set! wy2a64@pretty-print (unspecified)) (set! wy2a66@compile-core-expr-to-port (unspecified)) (set! wy2a5a@current-primitive-locations (wy2a52@wy2930@make-parameter (lambda (wy2a67@x) '#f) (lambda (wy2a69@p) wy2a69@p))) (set! wy2aa5@wy2a5a@current-primitive-locations wy2a5a@current-primitive-locations) (set! wy2a5c@mutable? (lambda (wy2a6b@x) (or (pair? wy2a6b@x) (vector? wy2a6b@x) (hashtable? wy2a6b@x)))) (set! wy2aa6@wy2a5c@mutable? wy2a5c@mutable?) (set! wy2a5e@rewriter (lambda (wy2a6d@quote-hack?) (letrec* ((wy2a70@f (lambda (wy2a71@x) (if (pair? wy2a71@x) (let ((wy2a73@t (car wy2a71@x))) (if (memv wy2a73@t '(quote)) (if (and wy2a6d@quote-hack? (wy2a5c@mutable? (cadr wy2a71@x))) (let ((wy2a75@g (gensym))) (begin (set-symbol-value! wy2a75@g (cadr wy2a71@x)) wy2a75@g)) wy2a71@x) (if (memv wy2a73@t '(case-lambda)) (cons 'case-lambda (map (lambda (wy2a77@x) (cons (car wy2a77@x) (map wy2a70@f (cdr wy2a77@x)))) (cdr wy2a71@x))) (if (memv wy2a73@t '(lambda)) (cons* 'lambda (cadr wy2a71@x) (map wy2a70@f (cddr wy2a71@x))) (if (memv wy2a73@t '(letrec)) (let ((wy2a79@bindings (cadr wy2a71@x)) (wy2a7a@body* (cddr wy2a71@x))) (let ((wy2a7d@lhs* (map car wy2a79@bindings)) (wy2a7e@rhs* (map cadr wy2a79@bindings))) (cons* 'letrec (map list wy2a7d@lhs* (map wy2a70@f wy2a7e@rhs*)) (map wy2a70@f wy2a7a@body*)))) (if (memv wy2a73@t '(letrec*)) (let ((wy2a81@bindings (cadr wy2a71@x)) (wy2a82@body* (cddr wy2a71@x))) (let ((wy2a85@lhs* (map car wy2a81@bindings)) (wy2a86@rhs* (map cadr wy2a81@bindings))) (cons* 'letrec* (map list wy2a85@lhs* (map wy2a70@f wy2a86@rhs*)) (map wy2a70@f wy2a82@body*)))) (if (memv wy2a73@t '(library-letrec*)) (let ((wy2a89@name (cadr wy2a71@x)) (wy2a8a@x (cdr wy2a71@x))) (let ((wy2a8d@bindings (cadr wy2a8a@x)) (wy2a8e@body* (cddr wy2a8a@x))) (let ((wy2a91@lhs* (map car wy2a8d@bindings)) (wy2a92@lhs** (map cadr wy2a8d@bindings)) (wy2a93@rhs* (map caddr wy2a8d@bindings))) (cons* 'library-letrec* wy2a89@name (map list wy2a91@lhs* wy2a92@lhs** (map wy2a70@f wy2a93@rhs*)) (map wy2a70@f wy2a8e@body*))))) (if (memv wy2a73@t '(begin)) (cons 'begin (map wy2a70@f (cdr wy2a71@x))) (if (memv wy2a73@t '(set!)) (list 'set! (cadr wy2a71@x) (wy2a70@f (caddr wy2a71@x))) (if (memv wy2a73@t '(primitive)) (let ((wy2a97@op (cadr wy2a71@x))) (let ((wy2a99@t ((wy2a5a@current-primitive-locations) wy2a97@op))) (if wy2a99@t ((lambda (wy2a9b@loc) wy2a9b@loc) wy2a99@t) wy2a97@op))) (if (memv wy2a73@t '(define)) wy2a71@x (if (list? wy2a71@x) (map wy2a70@f wy2a71@x) (error 'rewrite '"invalid form ~s ~s" wy2a71@x (list? wy2a71@x)))))))))))))) wy2a71@x)))) wy2a70@f))) (set! wy2aa7@wy2a5e@rewriter wy2a5e@rewriter) (set! wy2a60@expanded->core (lambda (wy2a9d@x) ((wy2a5e@rewriter '#f) wy2a9d@x))) (set! wy2aa8@wy2a60@expanded->core wy2a60@expanded->core) (set! wy2a62@compile-core-expr (lambda (wy2a9f@x) ((wy2a5e@rewriter '#f) wy2a9f@x))) (set! wy2aa9@wy2a62@compile-core-expr wy2a62@compile-core-expr) (set! wy2a64@pretty-print write) (set! wy2aaa@wy2a64@pretty-print wy2a64@pretty-print) (set! wy2a66@compile-core-expr-to-port (lambda (wy2aa1@x wy2aa2@p) (wy2a64@pretty-print ((wy2a5e@rewriter '#f) wy2aa1@x) wy2aa2@p))) (set! wy2aab@wy2a66@compile-core-expr-to-port wy2a66@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! wy2afa@make-collection (unspecified)) (set! wy2afc@current-library-collection (unspecified)) (set! wy2afe@rp (unspecified)) (set! wy2b08@library? (unspecified)) (set! wy2b0a@library-id (unspecified)) (set! wy2b0c@set-library-id! (unspecified)) (set! wy2b0e@library-name (unspecified)) (set! wy2b10@set-library-name! (unspecified)) (set! wy2b12@library-version (unspecified)) (set! wy2b14@set-library-version! (unspecified)) (set! wy2b16@library-imp* (unspecified)) (set! wy2b18@set-library-imp*! (unspecified)) (set! wy2b1a@library-vis* (unspecified)) (set! wy2b1c@set-library-vis*! (unspecified)) (set! wy2b1e@library-inv* (unspecified)) (set! wy2b20@set-library-inv*! (unspecified)) (set! wy2b22@library-subst (unspecified)) (set! wy2b24@set-library-subst! (unspecified)) (set! wy2b26@library-env (unspecified)) (set! wy2b28@set-library-env! (unspecified)) (set! wy2b2a@library-visit-state (unspecified)) (set! wy2b2c@set-library-visit-state! (unspecified)) (set! wy2b2e@library-invoke-state (unspecified)) (set! wy2b30@set-library-invoke-state! (unspecified)) (set! wy2b32@library-visit-code (unspecified)) (set! wy2b34@set-library-visit-code! (unspecified)) (set! wy2b36@library-invoke-code (unspecified)) (set! wy2b38@set-library-invoke-code! (unspecified)) (set! wy2b3a@library-visible? (unspecified)) (set! wy2b3c@set-library-visible?! (unspecified)) (set! wy2b3e@library-source-file-name (unspecified)) (set! wy2b40@set-library-source-file-name! (unspecified)) (set! wy2b42@dummy (unspecified)) (set! wy2b44@find-dependencies (unspecified)) (set! wy2b46@find-library-by (unspecified)) (set! wy2b48@library-path (unspecified)) (set! wy2b4a@library-extensions (unspecified)) (set! wy2b4c@library-name->file-name (unspecified)) (set! wy2b4e@file-locator (unspecified)) (set! wy2b50@serialize-all (unspecified)) (set! wy2b52@current-precompiled-library-loader (unspecified)) (set! wy2b54@try-load-from-file (unspecified)) (set! wy2b56@library-loader (unspecified)) (set! wy2b58@current-library-expander (unspecified)) (set! wy2b5a@external-pending-libraries (unspecified)) (set! wy2b5c@find-external-library (unspecified)) (set! wy2b5e@find-library-by-name (unspecified)) (set! wy2b60@library-exists? (unspecified)) (set! wy2b62@find-library-by-spec/die (unspecified)) (set! wy2b64@label->binding-table (unspecified)) (set! wy2b66@install-library-record (unspecified)) (set! wy2b68@install-library (unspecified)) (set! wy2b6a@imported-label->binding (unspecified)) (set! wy2b6c@invoke-library (unspecified)) (set! wy2b6e@visit-library (unspecified)) (set! wy2b70@invoke-library-by-spec (unspecified)) (set! wy2b72@installed-libraries (unspecified)) (set! wy2b74@library-spec (unspecified)) (set! wy2afa@make-collection (lambda () (let ((wy2b75@set '())) (letrec* ((wy2b78@set-cons (lambda (wy2b7d@x wy2b7e@ls) (if (memq wy2b7d@x wy2b7e@ls) wy2b7e@ls (cons wy2b7d@x wy2b7e@ls))))) (lambda wy2b7b (let ((wy2b7c (length wy2b7b))) (if (= wy2b7c '0) (apply (lambda () wy2b75@set) wy2b7b) (if (= wy2b7c '1) (apply (lambda (wy2b79@x) (set! wy2b75@set (wy2b78@set-cons wy2b79@x wy2b75@set))) wy2b7b) (error 'apply '"invalid arg count"))))))))) (set! wy2ce9@wy2afa@make-collection wy2afa@make-collection) (set! wy2afc@current-library-collection (wy2a52@wy2930@make-parameter (wy2afa@make-collection) (lambda (wy2b81@x) (begin (if (not (procedure? wy2b81@x)) (assertion-violation 'current-library-collection '"not a procedure" wy2b81@x) (void)) wy2b81@x)))) (set! wy2cea@wy2afc@current-library-collection wy2afc@current-library-collection) (set! wy2afe@rp (wy2a4f@wy292a@make-record-printer 'library (lambda (wy2b83@x wy2b84@p wy2b85@wr) (begin (if (not (wy2b08@library? wy2b83@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (wy2b12@library-version wy2b83@x)) (wy2b0e@library-name wy2b83@x) (append (wy2b0e@library-name wy2b83@x) (list (wy2b12@library-version wy2b83@x))))) wy2b84@p))))) (set! wy2ceb@wy2afe@rp wy2afe@rp) (set! wy2b08@library? (lambda (wy2b89@x) (and (simple-struct? wy2b89@x) (eq? (simple-struct-name wy2b89@x) 'library)))) (set! wy2cec@wy2b08@library? wy2b08@library?) (set! wy2b0a@library-id (lambda (wy2b8b@x) (simple-struct-ref wy2b8b@x '0))) (set! wy2ced@wy2b0a@library-id wy2b0a@library-id) (set! wy2b0c@set-library-id! (lambda (wy2b8d@x wy2b8e@val) (simple-struct-set! wy2b8d@x '0 wy2b8e@val))) (set! wy2cee@wy2b0c@set-library-id! wy2b0c@set-library-id!) (set! wy2b0e@library-name (lambda (wy2b91@x) (simple-struct-ref wy2b91@x '1))) (set! wy2cef@wy2b0e@library-name wy2b0e@library-name) (set! wy2b10@set-library-name! (lambda (wy2b93@x wy2b94@val) (simple-struct-set! wy2b93@x '1 wy2b94@val))) (set! wy2cf0@wy2b10@set-library-name! wy2b10@set-library-name!) (set! wy2b12@library-version (lambda (wy2b97@x) (simple-struct-ref wy2b97@x '2))) (set! wy2cf1@wy2b12@library-version wy2b12@library-version) (set! wy2b14@set-library-version! (lambda (wy2b99@x wy2b9a@val) (simple-struct-set! wy2b99@x '2 wy2b9a@val))) (set! wy2cf2@wy2b14@set-library-version! wy2b14@set-library-version!) (set! wy2b16@library-imp* (lambda (wy2b9d@x) (simple-struct-ref wy2b9d@x '3))) (set! wy2cf3@wy2b16@library-imp* wy2b16@library-imp*) (set! wy2b18@set-library-imp*! (lambda (wy2b9f@x wy2ba0@val) (simple-struct-set! wy2b9f@x '3 wy2ba0@val))) (set! wy2cf4@wy2b18@set-library-imp*! wy2b18@set-library-imp*!) (set! wy2b1a@library-vis* (lambda (wy2ba3@x) (simple-struct-ref wy2ba3@x '4))) (set! wy2cf5@wy2b1a@library-vis* wy2b1a@library-vis*) (set! wy2b1c@set-library-vis*! (lambda (wy2ba5@x wy2ba6@val) (simple-struct-set! wy2ba5@x '4 wy2ba6@val))) (set! wy2cf6@wy2b1c@set-library-vis*! wy2b1c@set-library-vis*!) (set! wy2b1e@library-inv* (lambda (wy2ba9@x) (simple-struct-ref wy2ba9@x '5))) (set! wy2cf7@wy2b1e@library-inv* wy2b1e@library-inv*) (set! wy2b20@set-library-inv*! (lambda (wy2bab@x wy2bac@val) (simple-struct-set! wy2bab@x '5 wy2bac@val))) (set! wy2cf8@wy2b20@set-library-inv*! wy2b20@set-library-inv*!) (set! wy2b22@library-subst (lambda (wy2baf@x) (simple-struct-ref wy2baf@x '6))) (set! wy2cf9@wy2b22@library-subst wy2b22@library-subst) (set! wy2b24@set-library-subst! (lambda (wy2bb1@x wy2bb2@val) (simple-struct-set! wy2bb1@x '6 wy2bb2@val))) (set! wy2cfa@wy2b24@set-library-subst! wy2b24@set-library-subst!) (set! wy2b26@library-env (lambda (wy2bb5@x) (simple-struct-ref wy2bb5@x '7))) (set! wy2cfb@wy2b26@library-env wy2b26@library-env) (set! wy2b28@set-library-env! (lambda (wy2bb7@x wy2bb8@val) (simple-struct-set! wy2bb7@x '7 wy2bb8@val))) (set! wy2cfc@wy2b28@set-library-env! wy2b28@set-library-env!) (set! wy2b2a@library-visit-state (lambda (wy2bbb@x) (simple-struct-ref wy2bbb@x '8))) (set! wy2cfd@wy2b2a@library-visit-state wy2b2a@library-visit-state) (set! wy2b2c@set-library-visit-state! (lambda (wy2bbd@x wy2bbe@val) (simple-struct-set! wy2bbd@x '8 wy2bbe@val))) (set! wy2cfe@wy2b2c@set-library-visit-state! wy2b2c@set-library-visit-state!) (set! wy2b2e@library-invoke-state (lambda (wy2bc1@x) (simple-struct-ref wy2bc1@x '9))) (set! wy2cff@wy2b2e@library-invoke-state wy2b2e@library-invoke-state) (set! wy2b30@set-library-invoke-state! (lambda (wy2bc3@x wy2bc4@val) (simple-struct-set! wy2bc3@x '9 wy2bc4@val))) (set! wy2d00@wy2b30@set-library-invoke-state! wy2b30@set-library-invoke-state!) (set! wy2b32@library-visit-code (lambda (wy2bc7@x) (simple-struct-ref wy2bc7@x '10))) (set! wy2d01@wy2b32@library-visit-code wy2b32@library-visit-code) (set! wy2b34@set-library-visit-code! (lambda (wy2bc9@x wy2bca@val) (simple-struct-set! wy2bc9@x '10 wy2bca@val))) (set! wy2d02@wy2b34@set-library-visit-code! wy2b34@set-library-visit-code!) (set! wy2b36@library-invoke-code (lambda (wy2bcd@x) (simple-struct-ref wy2bcd@x '11))) (set! wy2d03@wy2b36@library-invoke-code wy2b36@library-invoke-code) (set! wy2b38@set-library-invoke-code! (lambda (wy2bcf@x wy2bd0@val) (simple-struct-set! wy2bcf@x '11 wy2bd0@val))) (set! wy2d04@wy2b38@set-library-invoke-code! wy2b38@set-library-invoke-code!) (set! wy2b3a@library-visible? (lambda (wy2bd3@x) (simple-struct-ref wy2bd3@x '12))) (set! wy2d05@wy2b3a@library-visible? wy2b3a@library-visible?) (set! wy2b3c@set-library-visible?! (lambda (wy2bd5@x wy2bd6@val) (simple-struct-set! wy2bd5@x '12 wy2bd6@val))) (set! wy2d06@wy2b3c@set-library-visible?! wy2b3c@set-library-visible?!) (set! wy2b3e@library-source-file-name (lambda (wy2bd9@x) (simple-struct-ref wy2bd9@x '13))) (set! wy2d07@wy2b3e@library-source-file-name wy2b3e@library-source-file-name) (set! wy2b40@set-library-source-file-name! (lambda (wy2bdb@x wy2bdc@val) (simple-struct-set! wy2bdb@x '13 wy2bdc@val))) (set! wy2d08@wy2b40@set-library-source-file-name! wy2b40@set-library-source-file-name!) (set! wy2b42@dummy '3) (set! wy2d09@wy2b42@dummy wy2b42@dummy) (set! wy2b44@find-dependencies (lambda (wy2bdf@ls) (if (null? wy2bdf@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! wy2d0a@wy2b44@find-dependencies wy2b44@find-dependencies) (set! wy2b46@find-library-by (lambda (wy2be1@pred) (let wy2be5@f ((wy2be3@ls ((wy2afc@current-library-collection)))) (if (null? wy2be3@ls) '#f (if (wy2be1@pred (car wy2be3@ls)) (car wy2be3@ls) (wy2be5@f (cdr wy2be3@ls))))))) (set! wy2d0b@wy2b46@find-library-by wy2b46@find-library-by) (set! wy2b48@library-path (wy2a52@wy2930@make-parameter '(".") (lambda (wy2be7@x) (if (and (list? wy2be7@x) (for-all string? wy2be7@x)) (map (lambda (wy2be9@x) wy2be9@x) wy2be7@x) (assertion-violation 'library-path '"not a list of strings" wy2be7@x))))) (set! wy2d0c@wy2b48@library-path wy2b48@library-path) (set! wy2b4a@library-extensions (wy2a52@wy2930@make-parameter '(".sls" ".ss" ".scm") (lambda (wy2beb@x) (if (and (list? wy2beb@x) (for-all string? wy2beb@x)) (map (lambda (wy2bed@x) wy2bed@x) wy2beb@x) (assertion-violation 'library-extensions '"not a list of strings" wy2beb@x))))) (set! wy2d0d@wy2b4a@library-extensions wy2b4a@library-extensions) (set! wy2b4c@library-name->file-name (lambda (wy2bef@x) (call-with-values (lambda () (open-string-output-port)) (lambda (wy2bf5@wy2bf2 wy2bf6@wy2bf4) (let ((wy2bf9@extract wy2bf6@wy2bf4) (wy2bfa@p wy2bf5@wy2bf2)) (letrec* ((wy2bfe@display-hex (lambda (wy2c07@n) (if (<= '0 wy2c07@n '9) (display wy2c07@n wy2bfa@p) (display (integer->char (+ (char->integer '#\a) (- wy2c07@n '10))) wy2bfa@p))))) (begin (let wy2c01@f ((wy2bff@ls wy2bef@x)) (if (not (null? wy2bff@ls)) (begin (display '"/" wy2bfa@p) (for-each (lambda (wy2c03@c) (if (or (char<=? '#\a wy2c03@c '#\z) (char<=? '#\A wy2c03@c '#\Z) (char<=? '#\0 wy2c03@c '#\9) (memv wy2c03@c '(#\- #\. #\_ #\~))) (display wy2c03@c wy2bfa@p) (begin (display '"%" wy2bfa@p) (let ((wy2c05@n (char->integer wy2c03@c))) (begin (wy2bfe@display-hex (quotient wy2c05@n '16)) (wy2bfe@display-hex (remainder wy2c05@n '16))))))) (string->list (symbol->string (car wy2bff@ls)))) (wy2c01@f (cdr wy2bff@ls))) (void))) (wy2bf9@extract)))))))) (set! wy2d0e@wy2b4c@library-name->file-name wy2b4c@library-name->file-name) (set! wy2b4e@file-locator (wy2a52@wy2930@make-parameter (lambda (wy2c09@x) (let ((wy2c0b@str (wy2b4c@library-name->file-name wy2c09@x))) (let wy2c13@f ((wy2c0d@ls (wy2b48@library-path)) (wy2c0e@exts (wy2b4a@library-extensions)) (wy2c0f@failed-list '())) (if (null? wy2c0d@ls) (letrec* ((wy2c1d@wy2c18 (make-record-type-descriptor '&library-resolution &condition-rtd 'wy2c1b '#f '#f '#((immutable library) (immutable files)))) (wy2c1f@wy2c1a '#f) (wy2c21@wy2c19 (make-record-constructor-descriptor wy2c1d@wy2c18 &condition-rcd wy2c1f@wy2c1a)) (wy2c24@wy2c17 (record-predicate wy2c1d@wy2c18)) (wy2c26@make-library-resolution-condition (record-constructor wy2c21@wy2c19)) (wy2c28@wy2c15 (record-accessor wy2c1d@wy2c18 '0)) (wy2c2a@wy2c16 (record-accessor wy2c1d@wy2c18 '1)) (wy2c2c@library-resolution-condition? (condition-predicate wy2c1d@wy2c18)) (wy2c2e@condition-library (condition-accessor wy2c1d@wy2c18 wy2c28@wy2c15)) (wy2c30@condition-files (condition-accessor wy2c1d@wy2c18 wy2c2a@wy2c16))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (wy2c26@make-library-resolution-condition wy2c09@x (reverse wy2c0f@failed-list))))) (if (null? wy2c0e@exts) (wy2c13@f (cdr wy2c0d@ls) (wy2b4a@library-extensions) wy2c0f@failed-list) (let ((wy2c31@name (string-append (car wy2c0d@ls) wy2c0b@str (car wy2c0e@exts)))) (if (file-exists? wy2c31@name) wy2c31@name (wy2c13@f wy2c0d@ls (cdr wy2c0e@exts) (cons wy2c31@name wy2c0f@failed-list))))))))) (lambda (wy2c33@f) (if (procedure? wy2c33@f) wy2c33@f (assertion-violation 'file-locator '"not a procedure" wy2c33@f))))) (set! wy2d0f@wy2b4e@file-locator wy2b4e@file-locator) (set! wy2b50@serialize-all (lambda (wy2c35@serialize wy2c36@compile) (letrec* ((wy2c3a@library-desc (lambda (wy2c3d@x) (list (wy2b0a@library-id wy2c3d@x) (wy2b0e@library-name wy2c3d@x))))) (for-each (lambda (wy2c3b@x) (if (wy2b3e@library-source-file-name wy2c3b@x) (wy2c35@serialize (wy2b3e@library-source-file-name wy2c3b@x) (list (wy2b0a@library-id wy2c3b@x) (wy2b0e@library-name wy2c3b@x) (wy2b12@library-version wy2c3b@x) (map wy2c3a@library-desc (wy2b16@library-imp* wy2c3b@x)) (map wy2c3a@library-desc (wy2b1a@library-vis* wy2c3b@x)) (map wy2c3a@library-desc (wy2b1e@library-inv* wy2c3b@x)) (wy2b22@library-subst wy2c3b@x) (wy2b26@library-env wy2c3b@x) (wy2c36@compile (wy2b32@library-visit-code wy2c3b@x)) (wy2c36@compile (wy2b36@library-invoke-code wy2c3b@x)) (wy2b3a@library-visible? wy2c3b@x))) (void))) ((wy2afc@current-library-collection)))))) (set! wy2d10@wy2b50@serialize-all wy2b50@serialize-all) (set! wy2b52@current-precompiled-library-loader (wy2a52@wy2930@make-parameter (lambda (wy2c3f@filename wy2c40@sk) '#f))) (set! wy2d11@wy2b52@current-precompiled-library-loader wy2b52@current-precompiled-library-loader) (set! wy2b54@try-load-from-file (lambda (wy2c43@filename) ((wy2b52@current-precompiled-library-loader) wy2c43@filename (lambda wy2c69 (let ((wy2c6a (length wy2c69))) (if (= wy2c6a '11) (apply (lambda (wy2c45@id wy2c46@name wy2c47@ver wy2c48@imp* wy2c49@vis* wy2c4a@inv* wy2c4b@exp-subst wy2c4c@exp-env wy2c4d@visit-proc wy2c4e@invoke-proc wy2c4f@visible?) (let wy2c5d@f ((wy2c5b@deps (append wy2c48@imp* wy2c49@vis* wy2c4a@inv*))) (if (null? wy2c5b@deps) (begin (wy2b68@install-library wy2c45@id wy2c46@name wy2c47@ver wy2c48@imp* wy2c49@vis* wy2c4a@inv* wy2c4b@exp-subst wy2c4c@exp-env wy2c4d@visit-proc wy2c4e@invoke-proc '#f '#f wy2c4f@visible? '#f) '#t) (let ((wy2c5f@d (car wy2c5b@deps))) (let ((wy2c61@label (car wy2c5f@d)) (wy2c62@dname (cadr wy2c5f@d))) (let ((wy2c65@l (wy2b5e@find-library-by-name wy2c62@dname))) (if (and (wy2b08@library? wy2c65@l) (eq? wy2c61@label (wy2b0a@library-id wy2c65@l))) (wy2c5d@f (cdr wy2c5b@deps)) (begin (if wy2a4c@wy2924@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" wy2c46@name wy2c62@dname wy2c43@filename) (void)) '#f)))))))) wy2c69) (if (>= wy2c6a '0) (apply (lambda wy2c67@others '#f) wy2c69) (error 'apply '"invalid arg count")))))))) (set! wy2d12@wy2b54@try-load-from-file wy2b54@try-load-from-file) (set! wy2b56@library-loader (wy2a52@wy2930@make-parameter (lambda (wy2c6b@x) (let ((wy2c6d@file-name ((wy2b4e@file-locator) wy2c6b@x))) (if (not wy2c6d@file-name) (assertion-violation '#f '"cannot file library" wy2c6b@x) (or (wy2b54@try-load-from-file wy2c6d@file-name) ((wy2b58@current-library-expander) (wy2a51@wy292e@read-library-source-file wy2c6d@file-name) wy2c6d@file-name (lambda (wy2c6f@name) (if (not (fast-equal? wy2c6f@name wy2c6b@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (wy2c75@wy2c72 wy2c76@wy2c74) (let ((wy2c79@e wy2c76@wy2c74) (wy2c7a@p wy2c75@wy2c72)) (begin (display '"expected to find library " wy2c7a@p) (write wy2c6b@x wy2c7a@p) (display '" in file " wy2c7a@p) (display wy2c6d@file-name wy2c7a@p) (display '", found " wy2c7a@p) (write wy2c6f@name wy2c7a@p) (display '" instead" wy2c7a@p) (wy2c79@e)))))) (void)))))))) (lambda (wy2c7d@f) (if (procedure? wy2c7d@f) wy2c7d@f (assertion-violation 'library-locator '"not a procedure" wy2c7d@f))))) (set! wy2d13@wy2b56@library-loader wy2b56@library-loader) (set! wy2b58@current-library-expander (wy2a52@wy2930@make-parameter (lambda (wy2c7f@x) (assertion-violation 'library-expander '"not initialized")) (lambda (wy2c81@f) (if (procedure? wy2c81@f) wy2c81@f (assertion-violation 'library-expander '"not a procedure" wy2c81@f))))) (set! wy2d14@wy2b58@current-library-expander wy2b58@current-library-expander) (set! wy2b5a@external-pending-libraries (wy2a52@wy2930@make-parameter '())) (set! wy2d15@wy2b5a@external-pending-libraries wy2b5a@external-pending-libraries) (set! wy2b5c@find-external-library (lambda (wy2c83@name) (begin (if (member wy2c83@name (wy2b5a@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" wy2c83@name) (void)) (let ((wy2c89@wy2c86 wy2b5a@external-pending-libraries) (wy2c8a@wy2c88 (cons wy2c83@name (wy2b5a@external-pending-libraries)))) (let ((wy2c8d@swap (lambda () (let ((wy2c8f@t (wy2c89@wy2c86))) (begin (wy2c89@wy2c86 wy2c8a@wy2c88) (set! wy2c8a@wy2c88 wy2c8f@t)))))) (dynamic-wind wy2c8d@swap (lambda () (begin ((wy2b56@library-loader) wy2c83@name) (or (wy2b46@find-library-by (lambda (wy2c91@x) (fast-equal? (wy2b0e@library-name wy2c91@x) wy2c83@name))) (assertion-violation '#f '"handling external library did not yield the correct library" wy2c83@name)))) wy2c8d@swap)))))) (set! wy2d16@wy2b5c@find-external-library wy2b5c@find-external-library) (set! wy2b5e@find-library-by-name (lambda (wy2c93@name) (or (wy2b46@find-library-by (lambda (wy2c95@x) (fast-equal? (wy2b0e@library-name wy2c95@x) wy2c93@name))) (wy2b5c@find-external-library wy2c93@name)))) (set! wy2d17@wy2b5e@find-library-by-name wy2b5e@find-library-by-name) (set! wy2b60@library-exists? (lambda (wy2c97@name) (and (wy2b46@find-library-by (lambda (wy2c99@x) (fast-equal? (wy2b0e@library-name wy2c99@x) wy2c97@name))) '#t))) (set! wy2d18@wy2b60@library-exists? wy2b60@library-exists?) (set! wy2b62@find-library-by-spec/die (lambda (wy2c9b@spec) (let ((wy2c9d@id (car wy2c9b@spec))) (or (wy2b46@find-library-by (lambda (wy2c9f@x) (eq? wy2c9d@id (wy2b0a@library-id wy2c9f@x)))) (assertion-violation '#f '"cannot find library with required spec" wy2c9b@spec))))) (set! wy2d19@wy2b62@find-library-by-spec/die wy2b62@find-library-by-spec/die) (set! wy2b64@label->binding-table (make-eq-hashtable)) (set! wy2d1a@wy2b64@label->binding-table wy2b64@label->binding-table) (set! wy2b66@install-library-record (lambda (wy2ca1@lib) (begin (let ((wy2ca3@exp-env (wy2b26@library-env wy2ca1@lib))) (for-each (lambda (wy2ca5@x) (let ((wy2ca7@label (car wy2ca5@x)) (wy2ca8@binding (cdr wy2ca5@x))) (let ((wy2cab@binding (let ((wy2cad@t (car wy2ca8@binding))) (if (memv wy2cad@t '(global)) (cons 'global (cons wy2ca1@lib (cdr wy2ca8@binding))) (if (memv wy2cad@t '(global-macro)) (cons 'global-macro (cons wy2ca1@lib (cdr wy2ca8@binding))) (if (memv wy2cad@t '(global-macro!)) (cons 'global-macro! (cons wy2ca1@lib (cdr wy2ca8@binding))) wy2ca8@binding)))))) (begin (if (hashtable-ref wy2b64@label->binding-table wy2ca7@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" wy2ca7@label (hashtable-ref wy2b64@label->binding-table wy2ca7@label '#f) wy2cab@binding) (exit)) (void)) (hashtable-set! wy2b64@label->binding-table wy2ca7@label wy2cab@binding))))) wy2ca3@exp-env)) ((wy2afc@current-library-collection) wy2ca1@lib)))) (set! wy2d1b@wy2b66@install-library-record wy2b66@install-library-record) (set! wy2b68@install-library (lambda (wy2caf@id wy2cb0@name wy2cb1@ver wy2cb2@imp* wy2cb3@vis* wy2cb4@inv* wy2cb5@exp-subst wy2cb6@exp-env wy2cb7@visit-proc wy2cb8@invoke-proc wy2cb9@visit-code wy2cba@invoke-code wy2cbb@visible? wy2cbc@source-file-name) (let ((wy2ccb@imp-lib* (map wy2b62@find-library-by-spec/die wy2cb2@imp*)) (wy2ccc@vis-lib* (map wy2b62@find-library-by-spec/die wy2cb3@vis*)) (wy2ccd@inv-lib* (map wy2b62@find-library-by-spec/die wy2cb4@inv*))) (begin (if (not (and (symbol? wy2caf@id) (list? wy2cb0@name) (list? wy2cb1@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" wy2caf@id wy2cb0@name wy2cb1@ver) (void)) (if (wy2b60@library-exists? wy2cb0@name) (assertion-violation 'install-library '"library is already installed" wy2cb0@name) (void)) (let ((wy2cd1@lib (make-simple-struct 'library '15 (list wy2caf@id wy2cb0@name wy2cb1@ver wy2ccb@imp-lib* wy2ccc@vis-lib* wy2ccd@inv-lib* wy2cb5@exp-subst wy2cb6@exp-env wy2cb7@visit-proc wy2cb8@invoke-proc wy2cb9@visit-code wy2cba@invoke-code wy2cbb@visible? wy2cbc@source-file-name)))) (wy2b66@install-library-record wy2cd1@lib)))))) (set! wy2d1c@wy2b68@install-library wy2b68@install-library) (set! wy2b6a@imported-label->binding (lambda (wy2cd3@lab) (hashtable-ref wy2b64@label->binding-table wy2cd3@lab '#f))) (set! wy2d1d@wy2b6a@imported-label->binding wy2b6a@imported-label->binding) (set! wy2b6c@invoke-library (lambda (wy2cd5@lib) (let ((wy2cd7@invoke (wy2b2e@library-invoke-state wy2cd5@lib))) (if (procedure? wy2cd7@invoke) (begin (wy2b30@set-library-invoke-state! wy2cd5@lib (lambda () (assertion-violation 'invoke '"circularity detected" wy2cd5@lib))) (for-each wy2b6c@invoke-library (wy2b1e@library-inv* wy2cd5@lib)) (wy2b30@set-library-invoke-state! wy2cd5@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" wy2cd5@lib))) (wy2cd7@invoke) (wy2b30@set-library-invoke-state! wy2cd5@lib '#t)) (void))))) (set! wy2d1e@wy2b6c@invoke-library wy2b6c@invoke-library) (set! wy2b6e@visit-library (lambda (wy2cd9@lib) (let ((wy2cdb@visit (wy2b2a@library-visit-state wy2cd9@lib))) (if (procedure? wy2cdb@visit) (begin (wy2b2c@set-library-visit-state! wy2cd9@lib (lambda () (assertion-violation 'visit '"circularity detected" wy2cd9@lib))) (for-each wy2b6c@invoke-library (wy2b1a@library-vis* wy2cd9@lib)) (wy2b2c@set-library-visit-state! wy2cd9@lib (lambda () (assertion-violation 'invoke '"first visit did not return" wy2cd9@lib))) (wy2cdb@visit) (wy2b2c@set-library-visit-state! wy2cd9@lib '#t)) (void))))) (set! wy2d1f@wy2b6e@visit-library wy2b6e@visit-library) (set! wy2b70@invoke-library-by-spec (lambda (wy2cdd@spec) (wy2b6c@invoke-library (wy2b62@find-library-by-spec/die wy2cdd@spec)))) (set! wy2d20@wy2b70@invoke-library-by-spec wy2b70@invoke-library-by-spec) (set! wy2b72@installed-libraries (lambda wy2ce5 (let ((wy2ce6 (length wy2ce5))) (if (= wy2ce6 '1) (apply (lambda (wy2cdf@all?) (let wy2ce3@f ((wy2ce1@ls ((wy2afc@current-library-collection)))) (if (null? wy2ce1@ls) '() (if (or wy2cdf@all? (wy2b3a@library-visible? (car wy2ce1@ls))) (cons (car wy2ce1@ls) (wy2ce3@f (cdr wy2ce1@ls))) (wy2ce3@f (cdr wy2ce1@ls)))))) wy2ce5) (if (= wy2ce6 '0) (apply (lambda () (wy2b72@installed-libraries '#f)) wy2ce5) (error 'apply '"invalid arg count")))))) (set! wy2d21@wy2b72@installed-libraries wy2b72@installed-libraries) (set! wy2b74@library-spec (lambda (wy2ce7@x) (begin (if (not (wy2b08@library? wy2ce7@x)) (assertion-violation 'library-spec '"not a library" wy2ce7@x) (void)) (list (wy2b0a@library-id wy2ce7@x) (wy2b0e@library-name wy2ce7@x) (wy2b12@library-version wy2ce7@x))))) (set! wy2d22@wy2b74@library-spec wy2b74@library-spec) (void))
(begin (set! wy2d26@build-global-define (unspecified)) (set! wy2d97@build-lambda (unspecified)) (set! wy2d99@build-case-lambda (unspecified)) (set! wy2dc7@build-sequence (unspecified)) (set! wy2dc9@build-void (unspecified)) (set! wy2dcb@build-letrec (unspecified)) (set! wy2dcd@build-let (unspecified)) (set! wy2dcf@build-named-let (unspecified)) (set! wy2dd1@build-letrec* (unspecified)) (set! wy2dd3@build-library-letrec* (unspecified)) (set! wy2dd5@build-receive (unspecified)) (set! wy2d26@build-global-define (lambda (wy2dd6@x) (wy2dc9@build-void))) (set! wy2e64@wy2d26@build-global-define wy2d26@build-global-define) (set! wy2d97@build-lambda (lambda (wy2dd8@ae wy2dd9@vars wy2dda@exp) (list 'lambda wy2dd9@vars wy2dda@exp))) (set! wy2e65@wy2d97@build-lambda wy2d97@build-lambda) (set! wy2d99@build-case-lambda (lambda (wy2dde@ae wy2ddf@vars* wy2de0@exp*) (letrec* ((wy2de5@build-error (lambda (wy2e1c@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (wy2de7@build-pred (lambda (wy2e04@ae wy2e05@n wy2e06@vars) (call-with-values (lambda () (let wy2e12@f ((wy2e0e@vars wy2e06@vars) (wy2e0f@count '0)) (if (pair? wy2e0e@vars) (wy2e12@f (cdr wy2e0e@vars) (+ wy2e0f@count '1)) (if (null? wy2e0e@vars) (values wy2e0f@count '=) (values wy2e0f@count '>=))))) (lambda (wy2e14@wy2e0b wy2e15@wy2e0d) (let ((wy2e18@pred wy2e15@wy2e0d) (wy2e19@count wy2e14@wy2e0b)) (list (list 'primitive wy2e18@pred) wy2e05@n (list 'quote wy2e19@count))))))) (wy2de9@build-apply (lambda (wy2dfc@ae wy2dfd@g wy2dfe@vars wy2dff@exp) (list '(primitive apply) (wy2d97@build-lambda wy2dfc@ae wy2dfe@vars wy2dff@exp) wy2dfd@g))) (wy2deb@expand-case-lambda (lambda (wy2dec@ae wy2ded@vars wy2dee@exp*) (let ((wy2df2@g (gensym)) (wy2df3@n (gensym))) (list 'lambda wy2df2@g (wy2dcd@build-let wy2dec@ae (list wy2df3@n) (list (list '(primitive length) wy2df2@g)) (let wy2dfa@f ((wy2df6@vars* wy2ddf@vars*) (wy2df7@exp* wy2dee@exp*)) (if (null? wy2df6@vars*) (wy2de5@build-error wy2dec@ae) (list 'if (wy2de7@build-pred wy2dec@ae wy2df3@n (car wy2df6@vars*)) (wy2de9@build-apply wy2dec@ae wy2df2@g (car wy2df6@vars*) (car wy2df7@exp*)) (wy2dfa@f (cdr wy2df6@vars*) (cdr wy2df7@exp*))))))))))) (if (= (length wy2de0@exp*) '1) (wy2d97@build-lambda wy2dde@ae (car wy2ddf@vars*) (car wy2de0@exp*)) (wy2deb@expand-case-lambda wy2dde@ae wy2ddf@vars* wy2de0@exp*))))) (set! wy2e66@wy2d99@build-case-lambda wy2d99@build-case-lambda) (set! wy2dc7@build-sequence (lambda (wy2e1e@ae wy2e1f@exps) (let wy2e24@loop ((wy2e22@exps wy2e1f@exps)) (if (null? (cdr wy2e22@exps)) (car wy2e22@exps) (if (equal? (car wy2e22@exps) (wy2dc9@build-void)) (wy2e24@loop (cdr wy2e22@exps)) (cons 'begin wy2e22@exps)))))) (set! wy2e67@wy2dc7@build-sequence wy2dc7@build-sequence) (set! wy2dc9@build-void (lambda () '((primitive void)))) (set! wy2e68@wy2dc9@build-void wy2dc9@build-void) (set! wy2dcb@build-letrec (lambda (wy2e26@ae wy2e27@vars wy2e28@val-exps wy2e29@body-exp) (if (null? wy2e27@vars) wy2e29@body-exp (list 'letrec (map list wy2e27@vars wy2e28@val-exps) wy2e29@body-exp)))) (set! wy2e69@wy2dcb@build-letrec wy2dcb@build-letrec) (set! wy2dcd@build-let (lambda (wy2e2e@ae wy2e2f@vars wy2e30@val-exps wy2e31@body-exp) (if (null? wy2e2f@vars) wy2e31@body-exp (list 'let (map list wy2e2f@vars wy2e30@val-exps) wy2e31@body-exp)))) (set! wy2e6a@wy2dcd@build-let wy2dcd@build-let) (set! wy2dcf@build-named-let (lambda (wy2e36@ae wy2e37@name wy2e38@vars wy2e39@val-exps wy2e3a@body-exp) (list 'let wy2e37@name (map list wy2e38@vars wy2e39@val-exps) wy2e3a@body-exp))) (set! wy2e6b@wy2dcf@build-named-let wy2dcf@build-named-let) (set! wy2dd1@build-letrec* (lambda (wy2e40@ae wy2e41@vars wy2e42@val-exps wy2e43@body-exp) (if (null? wy2e41@vars) wy2e43@body-exp (list 'letrec* (map list wy2e41@vars wy2e42@val-exps) wy2e43@body-exp)))) (set! wy2e6c@wy2dd1@build-letrec* wy2dd1@build-letrec*) (set! wy2dd3@build-library-letrec* (lambda (wy2e48@ae wy2e49@name wy2e4a@vars wy2e4b@locs wy2e4c@val-exps wy2e4d@body-exp) (cons 'begin (append (map (lambda (wy2e54@var) (cons 'set! (cons wy2e54@var '((unspecified))))) wy2e4a@vars) (append (apply append (map (lambda (wy2e56@var wy2e57@loc wy2e58@val-exp) (list (list 'set! wy2e56@var wy2e58@val-exp) (list 'set! wy2e57@loc wy2e56@var))) wy2e4a@vars wy2e4b@locs wy2e4c@val-exps)) (list wy2e4d@body-exp)))))) (set! wy2e6d@wy2dd3@build-library-letrec* wy2dd3@build-library-letrec*) (set! wy2dd5@build-receive (lambda (wy2e5c@ae wy2e5d@vars wy2e5e@producer wy2e5f@body*) (begin (display '"************** in ") (cons 'receive (cons wy2e5d@vars (cons wy2e5e@producer wy2e5f@body*)))))) (set! wy2e6e@wy2dd5@build-receive wy2dd5@build-receive) (void))
(begin (set! wy2e7d@file-options-macro (unspecified)) (set! wy2e7f@set-cons (unspecified)) (set! wy2e81@set-union (unspecified)) (set! wy2e86@top-mark* (unspecified)) (set! wy2e88@top-marked? (unspecified)) (set! wy2e8a@gen-lexical (unspecified)) (set! wy2e8c@gen-global (unspecified)) (set! wy2e8e@gen-label (unspecified)) (set! wy2e90@gen-top-level-label (unspecified)) (set! wy2e92@gen-define-label+loc (unspecified)) (set! wy2e94@gen-define-label (unspecified)) (set! wy2e9e@rib? (unspecified)) (set! wy2ea0@rib-sym* (unspecified)) (set! wy2ea2@set-rib-sym*! (unspecified)) (set! wy2ea4@rib-mark** (unspecified)) (set! wy2ea6@set-rib-mark**! (unspecified)) (set! wy2ea8@rib-label* (unspecified)) (set! wy2eaa@set-rib-label*! (unspecified)) (set! wy2eac@rib-sealed/freq (unspecified)) (set! wy2eae@set-rib-sealed/freq! (unspecified)) (set! wy2eb0@rib-cache (unspecified)) (set! wy2eb2@set-rib-cache! (unspecified)) (set! wy2eb4@dummy (unspecified)) (set! wy2eb6@make-empty-rib (unspecified)) (set! wy2eb8@extend-rib! (unspecified)) (set! wy2eba@extend-rib/nc! (unspecified)) (set! wy2ebc@make-rib-map (unspecified)) (set! wy2ebe@seal-rib! (unspecified)) (set! wy2ec0@unseal-rib! (unspecified)) (set! wy2ec2@make-full-rib (unspecified)) (set! wy2ec4@rp (unspecified)) (set! wy2ece@stx? (unspecified)) (set! wy2ed0@stx-expr (unspecified)) (set! wy2ed2@set-stx-expr! (unspecified)) (set! wy2ed4@stx-mark* (unspecified)) (set! wy2ed6@set-stx-mark*! (unspecified)) (set! wy2ed8@stx-subst* (unspecified)) (set! wy2eda@set-stx-subst*! (unspecified)) (set! wy2edc@stx-ae* (unspecified)) (set! wy2ede@set-stx-ae*! (unspecified)) (set! wy2ee0@dummy (unspecified)) (set! wy2ee2@datum->stx (unspecified)) (set! wy2ee4@gen-mark (unspecified)) (set! wy2ee6@anti-mark (unspecified)) (set! wy2ee8@anti-mark? (unspecified)) (set! wy2eea@mkstx (unspecified)) (set! wy2eec@add-subst (unspecified)) (set! wy2eee@add-mark (unspecified)) (set! wy2ef0@syntax-kind? (unspecified)) (set! wy2ef2@syntax-vector->list (unspecified)) (set! wy2ef4@syntax-pair? (unspecified)) (set! wy2ef6@syntax-vector? (unspecified)) (set! wy2ef8@syntax-null? (unspecified)) (set! wy2efa@syntax-list? (unspecified)) (set! wy2efc@syntax-car (unspecified)) (set! wy2efe@syntax-cdr (unspecified)) (set! wy2f00@syntax->list (unspecified)) (set! wy2f02@id? (unspecified)) (set! wy2f04@id->sym (unspecified)) (set! wy2f06@bound-id=? (unspecified)) (set! wy2f08@free-id=? (unspecified)) (set! wy2f0a@valid-bound-ids? (unspecified)) (set! wy2f0c@distinct-bound-ids? (unspecified)) (set! wy2f0e@bound-id-member? (unspecified)) (set! wy2f10@self-evaluating? (unspecified)) (set! wy2f12@strip-annotations (unspecified)) (set! wy2f14@strip (unspecified)) (set! wy2f16@stx->datum (unspecified)) (set! wy2f18@id->label (unspecified)) (set! wy2f1a@label->binding (unspecified)) (set! wy2f1c@make-binding (unspecified)) (set! wy2f1e@binding-type (unspecified)) (set! wy2f20@binding-value (unspecified)) (set! wy2f22@raise-unbound-error (unspecified)) (set! wy2f24@syntax-type (unspecified)) (set! wy2f32@sanitize-binding (unspecified)) (set! wy2f34@make-variable-transformer (unspecified)) (set! wy2f36@variable-transformer? (unspecified)) (set! wy2f38@variable-transformer-procedure (unspecified)) (set! wy2f3a@make-eval-transformer (unspecified)) (set! wy308b@parse-define (unspecified)) (set! wy308d@parse-define-syntax (unspecified)) (set! wy308f@scheme-stx-hashtable (unspecified)) (set! wy3091@scheme-stx (unspecified)) (set! wy3093@lexical-var (unspecified)) (set! wy3095@lexical-mutable? (unspecified)) (set! wy3097@set-lexical-mutable! (unspecified)) (set! wy3099@add-lexical (unspecified)) (set! wy309b@add-lexicals (unspecified)) (set! wy309d@letrec-helper (unspecified)) (set! wy309f@let-transformer (unspecified)) (set! wy30a1@letrec-transformer (unspecified)) (set! wy30a3@letrec*-transformer (unspecified)) (set! wy30a5@fluid-let-syntax-transformer (unspecified)) (set! wy30a7@type-descriptor-transformer (unspecified)) (set! wy30a9@record-type-descriptor-transformer (unspecified)) (set! wy30ab@record-constructor-descriptor-transformer (unspecified)) (set! wy30ad@when-macro (unspecified)) (set! wy30af@unless-macro (unspecified)) (set! wy30b1@if-transformer (unspecified)) (set! wy30b3@and-transformer (unspecified)) (set! wy30b5@or-transformer (unspecified)) (set! wy30b7@case-macro (unspecified)) (set! wy30b9@quote-transformer (unspecified)) (set! wy30bb@case-lambda-transformer (unspecified)) (set! wy30bd@lambda-transformer (unspecified)) (set! wy30bf@bless (unspecified)) (set! wy30c1@with-syntax-macro (unspecified)) (set! wy30c3@invalid-fmls-error (unspecified)) (set! wy30c5@let-macro (unspecified)) (set! wy30c7@let-values-macro (unspecified)) (set! wy30c9@let*-values-macro (unspecified)) (set! wy30cb@trace-lambda-macro (unspecified)) (set! wy30cd@trace-define-macro (unspecified)) (set! wy30cf@trace-define-syntax-macro (unspecified)) (set! wy30d1@trace-let/rec-syntax (unspecified)) (set! wy30d3@trace-let-syntax-macro (unspecified)) (set! wy30d5@trace-letrec-syntax-macro (unspecified)) (set! wy30d7@guard-macro (unspecified)) (set! wy30d9@define-enumeration-macro (unspecified)) (set! wy30db@time-macro (unspecified)) (set! wy30dd@delay-macro (unspecified)) (set! wy30df@assert-macro (unspecified)) (set! wy30e1@endianness-macro (unspecified)) (set! wy30e3@identifier-syntax-macro (unspecified)) (set! wy30e5@do-macro (unspecified)) (set! wy30e7@let*-macro (unspecified)) (set! wy30e9@or-macro (unspecified)) (set! wy30eb@and-macro (unspecified)) (set! wy30ed@cond-macro (unspecified)) (set! wy30ef@do-include (unspecified)) (set! wy30f1@include-macro (unspecified)) (set! wy30f3@include-into-macro (unspecified)) (set! wy30f5@syntax-rules-macro (unspecified)) (set! wy30f7@quasiquote-macro (unspecified)) (set! wy30f9@quasisyntax-macro (unspecified)) (set! wy30fb@define-struct-macro (unspecified)) (set! wy30fd@define-record-type-macro (unspecified)) (set! wy30ff@define-condition-type-macro (unspecified)) (set! wy3101@incorrect-usage-macro (unspecified)) (set! wy3103@parameterize-macro (unspecified)) (set! wy3105@foreign-call-transformer (unspecified)) (set! wy3107@convert-pattern (unspecified)) (set! wy3109@syntax-dispatch (unspecified)) (set! wy310b@ellipsis? (unspecified)) (set! wy310d@underscore? (unspecified)) (set! wy310f@verify-literals (unspecified)) (set! wy3111@syntax-case-transformer (unspecified)) (set! wy3113@ellipsis-map (unspecified)) (set! wy3115@syntax-transformer (unspecified)) (set! wy3117@core-macro-transformer (unspecified)) (set! wy3119@symbol-macro (unspecified)) (set! wy311b@macro-transformer (unspecified)) (set! wy311d@local-macro-transformer (unspecified)) (set! wy311f@do-macro-call (unspecified)) (set! wy3121@chi-macro (unspecified)) (set! wy3123@chi-local-macro (unspecified)) (set! wy3125@chi-global-macro (unspecified)) (set! wy3127@chi-expr* (unspecified)) (set! wy3129@chi-application (unspecified)) (set! wy312b@chi-expr (unspecified)) (set! wy312d@chi-set! (unspecified)) (set! wy312f@verify-formals (unspecified)) (set! wy3131@chi-lambda-clause (unspecified)) (set! wy3133@chi-lambda-clause* (unspecified)) (set! wy3135@chi-defun (unspecified)) (set! wy3137@chi-rhs (unspecified)) (set! wy3139@expand-interaction-rhs*/init* (unspecified)) (set! wy313b@chi-rhs* (unspecified)) (set! wy313d@find-bound=? (unspecified)) (set! wy313f@find-dups (unspecified)) (set! wy3141@chi-internal (unspecified)) (set! wy3143@parse-module (unspecified)) (set! wy314d@module-interface? (unspecified)) (set! wy314f@module-interface-first-mark (unspecified)) (set! wy3151@set-module-interface-first-mark! (unspecified)) (set! wy3153@module-interface-exp-id-vec (unspecified)) (set! wy3155@set-module-interface-exp-id-vec! (unspecified)) (set! wy3157@module-interface-exp-lab-vec (unspecified)) (set! wy3159@set-module-interface-exp-lab-vec! (unspecified)) (set! wy315b@dummy (unspecified)) (set! wy315d@module-interface-exp-id* (unspecified)) (set! wy315f@chi-internal-module (unspecified)) (set! wy3161@chi-body* (unspecified)) (set! wy3163@expand-transformer (unspecified)) (set! wy3165@parse-exports (unspecified)) (set! wy3167@parse-library-name (unspecified)) (set! wy3169@parse-library (unspecified)) (set! wy316b@parse-import-spec* (unspecified)) (set! wy316d@make-top-rib (unspecified)) (set! wy316f@make-collector (unspecified)) (set! wy3171@inv-collector (unspecified)) (set! wy3173@vis-collector (unspecified)) (set! wy3175@imp-collector (unspecified)) (set! wy3177@chi-library-internal (unspecified)) (set! wy3179@chi-interaction-expr (unspecified)) (set! wy317b@library-body-expander (unspecified)) (set! wy317d@core-library-expander (unspecified)) (set! wy317f@parse-top-level-program (unspecified)) (set! wy3181@top-level-expander (unspecified)) (set! wy3183@rp (unspecified)) (set! wy318d@env? (unspecified)) (set! wy318f@env-names (unspecified)) (set! wy3191@set-env-names! (unspecified)) (set! wy3193@env-labels (unspecified)) (set! wy3195@set-env-labels! (unspecified)) (set! wy3197@env-itc (unspecified)) (set! wy3199@set-env-itc! (unspecified)) (set! wy319b@dummy (unspecified)) (set! wy319d@rp (unspecified)) (set! wy31a7@interaction-env? (unspecified)) (set! wy31a9@interaction-env-rib (unspecified)) (set! wy31ab@set-interaction-env-rib! (unspecified)) (set! wy31ad@interaction-env-r (unspecified)) (set! wy31af@set-interaction-env-r! (unspecified)) (set! wy31b1@interaction-env-locs (unspecified)) (set! wy31b3@set-interaction-env-locs! (unspecified)) (set! wy31b5@dummy (unspecified)) (set! wy31b7@interaction-environment-symbols (unspecified)) (set! wy31b9@environment-bindings (unspecified)) (set! wy31bb@parse-binding (unspecified)) (set! wy31bd@environment? (unspecified)) (set! wy31bf@environment-symbols (unspecified)) (set! wy31c1@environment (unspecified)) (set! wy31c3@null-environment (unspecified)) (set! wy31c5@scheme-report-environment (unspecified)) (set! wy31c7@expand (unspecified)) (set! wy31c9@eval (unspecified)) (set! wy31cb@library-expander (unspecified)) (set! wy31cd@boot-library-expand (unspecified)) (set! wy31cf@rev-map-append (unspecified)) (set! wy31d1@build-exports (unspecified)) (set! wy31d3@make-export-subst (unspecified)) (set! wy31d5@make-export-env/macros (unspecified)) (set! wy31d7@generate-temporaries (unspecified)) (set! wy31d9@free-identifier=? (unspecified)) (set! wy31db@bound-identifier=? (unspecified)) (set! wy31dd@make-source-condition (unspecified)) (set! wy31df@extract-position-condition (unspecified)) (set! wy31e1@expression-position (unspecified)) (set! wy31e3@assertion-error (unspecified)) (set! wy31e5@syntax-error (unspecified)) (set! wy31e7@syntax-violation* (unspecified)) (set! wy31e9@syntax-violation (unspecified)) (set! wy31eb@identifier? (unspecified)) (set! wy31ed@datum->syntax (unspecified)) (set! wy31ef@syntax->datum (unspecified)) (set! wy31f1@ungensym-all (unspecified)) (set! wy31f3@compile-r6rs-top-level (unspecified)) (set! wy31f5@pre-compile-r6rs-top-level (unspecified)) (set! wy31f7@interaction-environment (unspecified)) (set! wy31f9@top-level-context (unspecified)) (set! wy2e7d@file-options-macro (lambda (wy31fa@x) (letrec* ((wy31fd@valid-option? (lambda (wy3206@x) (and (wy2f02@id? wy3206@x) (memq (wy2f04@id->sym wy3206@x) '(no-fail no-create no-truncate)))))) (let ((wy31fe@t wy31fa@x)) (let ((wy3200@ls/false (wy3109@syntax-dispatch wy31fe@t '(_ . each-any)))) (if (and wy3200@ls/false (apply (lambda (wy3202@opt*) (for-all wy31fd@valid-option? wy3202@opt*)) wy3200@ls/false)) (apply (lambda (wy3204@opt*) (wy30bf@bless (list 'make-file-options (list 'quote wy3204@opt*)))) wy3200@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy31fe@t))))))) (set! wy4b86@wy2e7d@file-options-macro wy2e7d@file-options-macro) (set! wy2e7f@set-cons (lambda (wy3208@x wy3209@ls) (if (memq wy3208@x wy3209@ls) wy3209@ls (cons wy3208@x wy3209@ls)))) (set! wy4b87@wy2e7f@set-cons wy2e7f@set-cons) (set! wy2e81@set-union (lambda (wy320c@ls1 wy320d@ls2) (if (null? wy320c@ls1) wy320d@ls2 (if (memq (car wy320c@ls1) wy320d@ls2) (wy2e81@set-union (cdr wy320c@ls1) wy320d@ls2) (cons (car wy320c@ls1) (wy2e81@set-union (cdr wy320c@ls1) wy320d@ls2)))))) (set! wy4b88@wy2e81@set-union wy2e81@set-union) (set! wy2e86@top-mark* '(top)) (set! wy4b89@wy2e86@top-mark* wy2e86@top-mark*) (set! wy2e88@top-marked? (lambda (wy3210@m*) (memq 'top wy3210@m*))) (set! wy4b8a@wy2e88@top-marked? wy2e88@top-marked?) (set! wy2e8a@gen-lexical (lambda (wy3212@sym) (if (symbol? wy3212@sym) (gensym wy3212@sym) (if (wy2ece@stx? wy3212@sym) (wy2e8a@gen-lexical (wy2f04@id->sym wy3212@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" wy3212@sym))))) (set! wy4b8b@wy2e8a@gen-lexical wy2e8a@gen-lexical) (set! wy2e8c@gen-global (lambda (wy3214@x) (wy2e8a@gen-lexical wy3214@x))) (set! wy4b8c@wy2e8c@gen-global wy2e8c@gen-global) (set! wy2e8e@gen-label (lambda (wy3216@_) (gensym))) (set! wy4b8d@wy2e8e@gen-label wy2e8e@gen-label) (set! wy2e90@gen-top-level-label (lambda (wy3218@id wy3219@rib) (letrec* ((wy321d@find (lambda (wy3228@sym wy3229@mark* wy322a@sym* wy322b@mark** wy322c@label*) (and (pair? wy322a@sym*) (if (and (eq? wy3228@sym (car wy322a@sym*)) (same-marks? wy3229@mark* (car wy322b@mark**))) (car wy322c@label*) (wy321d@find wy3228@sym wy3229@mark* (cdr wy322a@sym*) (cdr wy322b@mark**) (cdr wy322c@label*))))))) (let ((wy321e@sym (wy2f04@id->sym wy3218@id)) (wy321f@mark* (wy2ed4@stx-mark* wy3218@id))) (let ((wy3222@sym* (wy2ea0@rib-sym* wy3219@rib))) (let ((wy3224@t (and (memq wy321e@sym (wy2ea0@rib-sym* wy3219@rib)) (wy321d@find wy321e@sym wy321f@mark* wy3222@sym* (wy2ea4@rib-mark** wy3219@rib) (wy2ea8@rib-label* wy3219@rib))))) (if wy3224@t ((lambda (wy3226@label) (if (wy2d1d@wy2b6a@imported-label->binding wy3226@label) (gensym) wy3226@label)) wy3224@t) (gensym)))))))) (set! wy4b8e@wy2e90@gen-top-level-label wy2e90@gen-top-level-label) (set! wy2e92@gen-define-label+loc (lambda (wy3232@id wy3233@rib) (let ((wy3236@t (wy31f9@top-level-context))) (if wy3236@t ((lambda (wy3238@env) (let ((wy323a@label (wy2e90@gen-top-level-label wy3232@id wy3233@rib)) (wy323b@locs (wy31b1@interaction-env-locs wy3238@env))) (values wy323a@label (let ((wy323e@t (assq wy323a@label wy323b@locs))) (if wy323e@t (cdr wy323e@t) (let ((wy3240@loc (wy2e8a@gen-lexical wy3232@id))) (begin (wy31b3@set-interaction-env-locs! wy3238@env (cons (cons wy323a@label wy3240@loc) wy323b@locs)) wy3240@loc))))))) wy3236@t) (values (gensym) (wy2e8a@gen-lexical wy3232@id)))))) (set! wy4b8f@wy2e92@gen-define-label+loc wy2e92@gen-define-label+loc) (set! wy2e94@gen-define-label (lambda (wy3242@id wy3243@rib) (if (wy31f9@top-level-context) (wy2e90@gen-top-level-label wy3242@id wy3243@rib) (gensym)))) (set! wy4b90@wy2e94@gen-define-label wy2e94@gen-define-label) (set! wy2e9e@rib? (lambda (wy3246@x) (and (simple-struct? wy3246@x) (eq? (simple-struct-name wy3246@x) 'rib)))) (set! wy4b91@wy2e9e@rib? wy2e9e@rib?) (set! wy2ea0@rib-sym* (lambda (wy3248@x) (simple-struct-ref wy3248@x '0))) (set! wy4b92@wy2ea0@rib-sym* wy2ea0@rib-sym*) (set! wy2ea2@set-rib-sym*! (lambda (wy324a@x wy324b@val) (simple-struct-set! wy324a@x '0 wy324b@val))) (set! wy4b93@wy2ea2@set-rib-sym*! wy2ea2@set-rib-sym*!) (set! wy2ea4@rib-mark** (lambda (wy324e@x) (simple-struct-ref wy324e@x '1))) (set! wy4b94@wy2ea4@rib-mark** wy2ea4@rib-mark**) (set! wy2ea6@set-rib-mark**! (lambda (wy3250@x wy3251@val) (simple-struct-set! wy3250@x '1 wy3251@val))) (set! wy4b95@wy2ea6@set-rib-mark**! wy2ea6@set-rib-mark**!) (set! wy2ea8@rib-label* (lambda (wy3254@x) (simple-struct-ref wy3254@x '2))) (set! wy4b96@wy2ea8@rib-label* wy2ea8@rib-label*) (set! wy2eaa@set-rib-label*! (lambda (wy3256@x wy3257@val) (simple-struct-set! wy3256@x '2 wy3257@val))) (set! wy4b97@wy2eaa@set-rib-label*! wy2eaa@set-rib-label*!) (set! wy2eac@rib-sealed/freq (lambda (wy325a@x) (simple-struct-ref wy325a@x '3))) (set! wy4b98@wy2eac@rib-sealed/freq wy2eac@rib-sealed/freq) (set! wy2eae@set-rib-sealed/freq! (lambda (wy325c@x wy325d@val) (simple-struct-set! wy325c@x '3 wy325d@val))) (set! wy4b99@wy2eae@set-rib-sealed/freq! wy2eae@set-rib-sealed/freq!) (set! wy2eb0@rib-cache (lambda (wy3260@x) (simple-struct-ref wy3260@x '4))) (set! wy4b9a@wy2eb0@rib-cache wy2eb0@rib-cache) (set! wy2eb2@set-rib-cache! (lambda (wy3262@x wy3263@val) (simple-struct-set! wy3262@x '4 wy3263@val))) (set! wy4b9b@wy2eb2@set-rib-cache! wy2eb2@set-rib-cache!) (set! wy2eb4@dummy '3) (set! wy4b9c@wy2eb4@dummy wy2eb4@dummy) (set! wy2eb6@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! wy4b9d@wy2eb6@make-empty-rib wy2eb6@make-empty-rib) (set! wy2eb8@extend-rib! (lambda (wy3266@rib wy3267@id wy3268@label) (letrec* ((wy326d@find (lambda (wy327a@sym wy327b@mark* wy327c@sym* wy327d@mark** wy327e@label*) (and (pair? wy327c@sym*) (if (and (eq? wy327a@sym (car wy327c@sym*)) (same-marks? wy327b@mark* (car wy327d@mark**))) wy327e@label* (wy326d@find wy327a@sym wy327b@mark* (cdr wy327c@sym*) (cdr wy327d@mark**) (cdr wy327e@label*))))))) (begin (if (wy2eac@rib-sealed/freq wy3266@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" wy3266@rib) (void)) (let ((wy326e@sym (wy2f04@id->sym wy3267@id)) (wy326f@mark* (wy2ed4@stx-mark* wy3267@id))) (let ((wy3272@sym* (wy2ea0@rib-sym* wy3266@rib))) (let ((wy3274@t (and (memq wy326e@sym (wy2ea0@rib-sym* wy3266@rib)) (wy326d@find wy326e@sym wy326f@mark* wy3272@sym* (wy2ea4@rib-mark** wy3266@rib) (wy2ea8@rib-label* wy3266@rib))))) (if wy3274@t ((lambda (wy3276@p) (if (not (eq? wy3268@label (car wy3276@p))) (if (wy31f9@top-level-context) (set-car! wy3276@p wy3268@label) (wy31e9@syntax-violation '#f '"multiple definitions of identifier" wy3267@id)) (void))) wy3274@t) (begin (if (wy2eb0@rib-cache wy3266@rib) (hashtable-update! (wy2eb0@rib-cache wy3266@rib) wy326e@sym (lambda (wy3278@e) (cons (cons wy326f@mark* wy3268@label) wy3278@e)) '()) (void)) (wy2ea2@set-rib-sym*! wy3266@rib (cons wy326e@sym wy3272@sym*)) (wy2ea6@set-rib-mark**! wy3266@rib (cons wy326f@mark* (wy2ea4@rib-mark** wy3266@rib))) (wy2eaa@set-rib-label*! wy3266@rib (cons wy3268@label (wy2ea8@rib-label* wy3266@rib)))))))))))) (set! wy4b9e@wy2eb8@extend-rib! wy2eb8@extend-rib!) (set! wy2eba@extend-rib/nc! (lambda (wy3284@rib wy3285@id wy3286@label) (let ((wy328a@sym (wy2f04@id->sym wy3285@id)) (wy328b@mark* (wy2ed4@stx-mark* wy3285@id))) (let ((wy328e@sym* (wy2ea0@rib-sym* wy3284@rib))) (begin (if (wy2eb0@rib-cache wy3284@rib) (hashtable-update! (wy2eb0@rib-cache wy3284@rib) wy328a@sym (lambda (wy3290@e) (cons (cons wy328b@mark* wy3286@label) wy3290@e)) '()) (void)) (wy2ea2@set-rib-sym*! wy3284@rib (cons wy328a@sym wy328e@sym*)) (wy2ea6@set-rib-mark**! wy3284@rib (cons wy328b@mark* (wy2ea4@rib-mark** wy3284@rib))) (wy2eaa@set-rib-label*! wy3284@rib (cons wy3286@label (wy2ea8@rib-label* wy3284@rib)))))))) (set! wy4b9f@wy2eba@extend-rib/nc! wy2eba@extend-rib/nc!) (set! wy2ebc@make-rib-map (lambda (wy3292@sym*) (let ((wy3294@ht (make-eq-hashtable))) (let wy329a@f ((wy3296@i '0) (wy3297@sym* wy3292@sym*)) (if (null? wy3297@sym*) wy3294@ht (begin (hashtable-update! wy3294@ht (car wy3297@sym*) (lambda (wy329c@x) (cons wy3296@i wy329c@x)) '()) (wy329a@f (+ wy3296@i '1) (cdr wy3297@sym*)))))))) (set! wy4ba0@wy2ebc@make-rib-map wy2ebc@make-rib-map) (set! wy2ebe@seal-rib! (lambda (wy329e@rib) (let ((wy32a0@sym* (wy2ea0@rib-sym* wy329e@rib))) (if (not (null? wy32a0@sym*)) (begin (wy2ea2@set-rib-sym*! wy329e@rib (list->vector wy32a0@sym*)) (wy2ea6@set-rib-mark**! wy329e@rib (list->vector (wy2ea4@rib-mark** wy329e@rib))) (wy2eaa@set-rib-label*! wy329e@rib (list->vector (wy2ea8@rib-label* wy329e@rib))) (wy2eae@set-rib-sealed/freq! wy329e@rib (wy2ebc@make-rib-map wy32a0@sym*))) (void))))) (set! wy4ba1@wy2ebe@seal-rib! wy2ebe@seal-rib!) (set! wy2ec0@unseal-rib! (lambda (wy32a2@rib) (if (wy2eac@rib-sealed/freq wy32a2@rib) (begin (wy2eae@set-rib-sealed/freq! wy32a2@rib '#f) (wy2ea2@set-rib-sym*! wy32a2@rib (vector->list (wy2ea0@rib-sym* wy32a2@rib))) (wy2ea6@set-rib-mark**! wy32a2@rib (vector->list (wy2ea4@rib-mark** wy32a2@rib))) (wy2eaa@set-rib-label*! wy32a2@rib (vector->list (wy2ea8@rib-label* wy32a2@rib)))) (void)))) (set! wy4ba2@wy2ec0@unseal-rib! wy2ec0@unseal-rib!) (set! wy2ec2@make-full-rib (lambda (wy32a4@id* wy32a5@label*) (let ((wy32a8@r (make-simple-struct 'rib '6 (list (map wy2f04@id->sym wy32a4@id*) (map wy2ed4@stx-mark* wy32a4@id*) wy32a5@label* '#f '#f)))) (begin (wy2ebe@seal-rib! wy32a8@r) wy32a8@r)))) (set! wy4ba3@wy2ec2@make-full-rib wy2ec2@make-full-rib) (set! wy2ec4@rp (wy2a4f@wy292a@make-record-printer 'stx (lambda (wy32aa@x wy32ab@p wy32ac@wr) (begin (display '"#<syntax " wy32ab@p) (write (wy2f16@stx->datum wy32aa@x) wy32ab@p) (let ((wy32b0@expr (wy2ed0@stx-expr wy32aa@x))) (if (wy2a46@wy2918@annotation? wy32b0@expr) (let ((wy32b2@src (wy2a47@wy291a@annotation-source wy32b0@expr))) (if (pair? wy32b2@src) (begin (display '" [" wy32ab@p) (display (cdr wy32b2@src) wy32ab@p) (display '" of " wy32ab@p) (display (car wy32b2@src) wy32ab@p) (display '"]" wy32ab@p)) (void))) (void))) (display '">" wy32ab@p))))) (set! wy4ba4@wy2ec4@rp wy2ec4@rp) (set! wy2ece@stx? (lambda (wy32b4@x) (and (simple-struct? wy32b4@x) (eq? (simple-struct-name wy32b4@x) 'stx)))) (set! wy4ba5@wy2ece@stx? wy2ece@stx?) (set! wy2ed0@stx-expr (lambda (wy32b6@x) (simple-struct-ref wy32b6@x '0))) (set! wy4ba6@wy2ed0@stx-expr wy2ed0@stx-expr) (set! wy2ed2@set-stx-expr! (lambda (wy32b8@x wy32b9@val) (simple-struct-set! wy32b8@x '0 wy32b9@val))) (set! wy4ba7@wy2ed2@set-stx-expr! wy2ed2@set-stx-expr!) (set! wy2ed4@stx-mark* (lambda (wy32bc@x) (simple-struct-ref wy32bc@x '1))) (set! wy4ba8@wy2ed4@stx-mark* wy2ed4@stx-mark*) (set! wy2ed6@set-stx-mark*! (lambda (wy32be@x wy32bf@val) (simple-struct-set! wy32be@x '1 wy32bf@val))) (set! wy4ba9@wy2ed6@set-stx-mark*! wy2ed6@set-stx-mark*!) (set! wy2ed8@stx-subst* (lambda (wy32c2@x) (simple-struct-ref wy32c2@x '2))) (set! wy4baa@wy2ed8@stx-subst* wy2ed8@stx-subst*) (set! wy2eda@set-stx-subst*! (lambda (wy32c4@x wy32c5@val) (simple-struct-set! wy32c4@x '2 wy32c5@val))) (set! wy4bab@wy2eda@set-stx-subst*! wy2eda@set-stx-subst*!) (set! wy2edc@stx-ae* (lambda (wy32c8@x) (simple-struct-ref wy32c8@x '3))) (set! wy4bac@wy2edc@stx-ae* wy2edc@stx-ae*) (set! wy2ede@set-stx-ae*! (lambda (wy32ca@x wy32cb@val) (simple-struct-set! wy32ca@x '3 wy32cb@val))) (set! wy4bad@wy2ede@set-stx-ae*! wy2ede@set-stx-ae*!) (set! wy2ee0@dummy '3) (set! wy4bae@wy2ee0@dummy wy2ee0@dummy) (set! wy2ee2@datum->stx (lambda (wy32ce@id wy32cf@datum) (make-simple-struct 'stx '5 (list wy32cf@datum (wy2ed4@stx-mark* wy32ce@id) (wy2ed8@stx-subst* wy32ce@id) (wy2edc@stx-ae* wy32ce@id))))) (set! wy4baf@wy2ee2@datum->stx wy2ee2@datum->stx) (set! wy2ee4@gen-mark (lambda () (string '#\m))) (set! wy4bb0@wy2ee4@gen-mark wy2ee4@gen-mark) (set! wy2ee6@anti-mark '#f) (set! wy4bb1@wy2ee6@anti-mark wy2ee6@anti-mark) (set! wy2ee8@anti-mark? not) (set! wy4bb2@wy2ee8@anti-mark? wy2ee8@anti-mark?) (set! wy2eea@mkstx (lambda (wy32d2@e wy32d3@m* wy32d4@s* wy32d5@ae*) (if (and (wy2ece@stx? wy32d2@e) (not (wy2e88@top-marked? wy32d3@m*))) (call-with-values (lambda () (join-wraps wy32d3@m* wy32d4@s* wy32d5@ae* wy32d2@e)) (lambda (wy32e0@wy32db wy32e1@wy32dd wy32e2@wy32df) (let ((wy32e6@ae* wy32e2@wy32df) (wy32e7@s* wy32e1@wy32dd) (wy32e8@m* wy32e0@wy32db)) (make-simple-struct 'stx '5 (list (wy2ed0@stx-expr wy32d2@e) wy32e8@m* wy32e7@s* wy32e6@ae*))))) (make-simple-struct 'stx '5 (list wy32d2@e wy32d3@m* wy32d4@s* wy32d5@ae*))))) (set! wy4bb3@wy2eea@mkstx wy2eea@mkstx) (set! wy2eec@add-subst (lambda (wy32ec@subst wy32ed@e) (wy2eea@mkstx wy32ed@e '() (list wy32ec@subst) '()))) (set! wy4bb4@wy2eec@add-subst wy2eec@add-subst) (set! wy2eee@add-mark (lambda (wy32f0@mark wy32f1@subst wy32f2@expr wy32f3@ae) (letrec* ((wy32f9@merge-ae* (lambda (wy3320@ls1 wy3321@ls2) (if (and (pair? wy3320@ls1) (pair? wy3321@ls2) (not (car wy3321@ls2))) (wy32fb@cancel wy3320@ls1 wy3321@ls2) (append wy3320@ls1 wy3321@ls2)))) (wy32fb@cancel (lambda (wy3316@ls1 wy3317@ls2) (let wy331e@f ((wy331a@x (car wy3316@ls1)) (wy331b@ls1 (cdr wy3316@ls1))) (if (null? wy331b@ls1) (cdr wy3317@ls2) (cons wy331a@x (wy331e@f (car wy331b@ls1) (cdr wy331b@ls1))))))) (wy32fd@f (lambda (wy32fe@e wy32ff@m wy3300@s1* wy3301@ae*) (if (pair? wy32fe@e) (let ((wy3306@a (wy32fd@f (car wy32fe@e) wy32ff@m wy3300@s1* wy3301@ae*)) (wy3307@d (wy32fd@f (cdr wy32fe@e) wy32ff@m wy3300@s1* wy3301@ae*))) (if (eq? wy3306@a wy3307@d) wy32fe@e (cons wy3306@a wy3307@d))) (if (vector? wy32fe@e) (let ((wy330a@ls1 (vector->list wy32fe@e))) (let ((wy330c@ls2 (map (lambda (wy330e@x) (wy32fd@f wy330e@x wy32ff@m wy3300@s1* wy3301@ae*)) wy330a@ls1))) (if (for-all eq? wy330a@ls1 wy330c@ls2) wy32fe@e (list->vector wy330c@ls2)))) (if (wy2ece@stx? wy32fe@e) (let ((wy3310@m* (wy2ed4@stx-mark* wy32fe@e)) (wy3311@s2* (wy2ed8@stx-subst* wy32fe@e))) (if (null? wy3310@m*) (wy32fd@f (wy2ed0@stx-expr wy32fe@e) wy32ff@m (append wy3300@s1* wy3311@s2*) (wy32f9@merge-ae* wy3301@ae* (wy2edc@stx-ae* wy32fe@e))) (if (eq? (car wy3310@m*) wy2ee6@anti-mark) (make-simple-struct 'stx '5 (list (wy2ed0@stx-expr wy32fe@e) (cdr wy3310@m*) (cdr (append wy3300@s1* wy3311@s2*)) (wy32f9@merge-ae* wy3301@ae* (wy2edc@stx-ae* wy32fe@e)))) (make-simple-struct 'stx '5 (list (wy2ed0@stx-expr wy32fe@e) (cons wy32ff@m wy3310@m*) (let ((wy3314@s* (cons 'shift (append wy3300@s1* wy3311@s2*)))) (if wy32f1@subst (cons wy32f1@subst wy3314@s*) wy3314@s*)) (wy32f9@merge-ae* wy3301@ae* (wy2edc@stx-ae* wy32fe@e))))))) (if (symbol? wy32fe@e) (wy31e9@syntax-violation '#f '"raw symbol encountered in output of macro" wy32f2@expr wy32fe@e) (make-simple-struct 'stx '5 (list wy32fe@e (list wy32ff@m) wy3300@s1* wy3301@ae*))))))))) (wy2eea@mkstx (wy32fd@f wy32f2@expr wy32f0@mark '() '()) '() '() (list wy32f3@ae))))) (set! wy4bb5@wy2eee@add-mark wy2eee@add-mark) (set! wy2ef0@syntax-kind? (lambda (wy3324@x wy3325@p?) (if (wy2ece@stx? wy3324@x) (wy2ef0@syntax-kind? (wy2ed0@stx-expr wy3324@x) wy3325@p?) (if (wy2a46@wy2918@annotation? wy3324@x) (wy2ef0@syntax-kind? (wy2a48@wy291c@annotation-expression wy3324@x) wy3325@p?) (wy3325@p? wy3324@x))))) (set! wy4bb6@wy2ef0@syntax-kind? wy2ef0@syntax-kind?) (set! wy2ef2@syntax-vector->list (lambda (wy3328@x) (if (wy2ece@stx? wy3328@x) (let ((wy332a@ls (wy2ef2@syntax-vector->list (wy2ed0@stx-expr wy3328@x))) (wy332b@m* (wy2ed4@stx-mark* wy3328@x)) (wy332c@s* (wy2ed8@stx-subst* wy3328@x)) (wy332d@ae* (wy2edc@stx-ae* wy3328@x))) (map (lambda (wy3332@x) (wy2eea@mkstx wy3332@x wy332b@m* wy332c@s* wy332d@ae*)) wy332a@ls)) (if (wy2a46@wy2918@annotation? wy3328@x) (wy2ef2@syntax-vector->list (wy2a48@wy291c@annotation-expression wy3328@x)) (if (vector? wy3328@x) (vector->list wy3328@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" wy3328@x)))))) (set! wy4bb7@wy2ef2@syntax-vector->list wy2ef2@syntax-vector->list) (set! wy2ef4@syntax-pair? (lambda (wy3334@x) (wy2ef0@syntax-kind? wy3334@x pair?))) (set! wy4bb8@wy2ef4@syntax-pair? wy2ef4@syntax-pair?) (set! wy2ef6@syntax-vector? (lambda (wy3336@x) (wy2ef0@syntax-kind? wy3336@x vector?))) (set! wy4bb9@wy2ef6@syntax-vector? wy2ef6@syntax-vector?) (set! wy2ef8@syntax-null? (lambda (wy3338@x) (wy2ef0@syntax-kind? wy3338@x null?))) (set! wy4bba@wy2ef8@syntax-null? wy2ef8@syntax-null?) (set! wy2efa@syntax-list? (lambda (wy333a@x) (or (wy2ef8@syntax-null? wy333a@x) (and (wy2ef4@syntax-pair? wy333a@x) (wy2efa@syntax-list? (wy2efe@syntax-cdr wy333a@x)))))) (set! wy4bbb@wy2efa@syntax-list? wy2efa@syntax-list?) (set! wy2efc@syntax-car (lambda (wy333c@x) (if (wy2ece@stx? wy333c@x) (wy2eea@mkstx (wy2efc@syntax-car (wy2ed0@stx-expr wy333c@x)) (wy2ed4@stx-mark* wy333c@x) (wy2ed8@stx-subst* wy333c@x) (wy2edc@stx-ae* wy333c@x)) (if (wy2a46@wy2918@annotation? wy333c@x) (wy2efc@syntax-car (wy2a48@wy291c@annotation-expression wy333c@x)) (if (pair? wy333c@x) (car wy333c@x) (assertion-violation 'syntax-car '"BUG: not a pair" wy333c@x)))))) (set! wy4bbc@wy2efc@syntax-car wy2efc@syntax-car) (set! wy2efe@syntax-cdr (lambda (wy333e@x) (if (wy2ece@stx? wy333e@x) (wy2eea@mkstx (wy2efe@syntax-cdr (wy2ed0@stx-expr wy333e@x)) (wy2ed4@stx-mark* wy333e@x) (wy2ed8@stx-subst* wy333e@x) (wy2edc@stx-ae* wy333e@x)) (if (wy2a46@wy2918@annotation? wy333e@x) (wy2efe@syntax-cdr (wy2a48@wy291c@annotation-expression wy333e@x)) (if (pair? wy333e@x) (cdr wy333e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" wy333e@x)))))) (set! wy4bbd@wy2efe@syntax-cdr wy2efe@syntax-cdr) (set! wy2f00@syntax->list (lambda (wy3340@x) (if (wy2ef4@syntax-pair? wy3340@x) (cons (wy2efc@syntax-car wy3340@x) (wy2f00@syntax->list (wy2efe@syntax-cdr wy3340@x))) (if (wy2ef8@syntax-null? wy3340@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" wy3340@x))))) (set! wy4bbe@wy2f00@syntax->list wy2f00@syntax->list) (set! wy2f02@id? (lambda (wy3342@x) (and (wy2ece@stx? wy3342@x) (symbol? (wy2ed0@stx-expr wy3342@x))))) (set! wy4bbf@wy2f02@id? wy2f02@id?) (set! wy2f04@id->sym (lambda (wy3344@x) (wy2ed0@stx-expr wy3344@x))) (set! wy4bc0@wy2f04@id->sym wy2f04@id->sym) (set! wy2f06@bound-id=? (lambda (wy3346@x wy3347@y) (and (eq? (wy2f04@id->sym wy3346@x) (wy2f04@id->sym wy3347@y)) (same-marks? (wy2ed4@stx-mark* wy3346@x) (wy2ed4@stx-mark* wy3347@y))))) (set! wy4bc1@wy2f06@bound-id=? wy2f06@bound-id=?) (set! wy2f08@free-id=? (lambda (wy334a@i wy334b@j) (let ((wy334e@t0 (id->real-label wy334a@i)) (wy334f@t1 (id->real-label wy334b@j))) (if (or wy334e@t0 wy334f@t1) (eq? wy334e@t0 wy334f@t1) (eq? (wy2f04@id->sym wy334a@i) (wy2f04@id->sym wy334b@j)))))) (set! wy4bc2@wy2f08@free-id=? wy2f08@free-id=?) (set! wy2f0a@valid-bound-ids? (lambda (wy3352@id*) (and (for-all wy2f02@id? wy3352@id*) (wy2f0c@distinct-bound-ids? wy3352@id*)))) (set! wy4bc3@wy2f0a@valid-bound-ids? wy2f0a@valid-bound-ids?) (set! wy2f0c@distinct-bound-ids? (lambda (wy3354@id*) (or (null? wy3354@id*) (and (not (wy2f0e@bound-id-member? (car wy3354@id*) (cdr wy3354@id*))) (wy2f0c@distinct-bound-ids? (cdr wy3354@id*)))))) (set! wy4bc4@wy2f0c@distinct-bound-ids? wy2f0c@distinct-bound-ids?) (set! wy2f0e@bound-id-member? (lambda (wy3356@id wy3357@id*) (and (pair? wy3357@id*) (or (wy2f06@bound-id=? wy3356@id (car wy3357@id*)) (wy2f0e@bound-id-member? wy3356@id (cdr wy3357@id*)))))) (set! wy4bc5@wy2f0e@bound-id-member? wy2f0e@bound-id-member?) (set! wy2f10@self-evaluating? (lambda (wy335a@x) (or (number? wy335a@x) (string? wy335a@x) (char? wy335a@x) (boolean? wy335a@x) (regexp? wy335a@x) (bytevector? wy335a@x)))) (set! wy4bc6@wy2f10@self-evaluating? wy2f10@self-evaluating?) (set! wy2f12@strip-annotations (lambda (wy335c@x) (if (pair? wy335c@x) (cons (wy2f12@strip-annotations (car wy335c@x)) (wy2f12@strip-annotations (cdr wy335c@x))) (if (vector? wy335c@x) (vector-map wy2f12@strip-annotations wy335c@x) (if (wy2a46@wy2918@annotation? wy335c@x) (wy2a45@wy2916@annotation-stripped wy335c@x) wy335c@x))))) (set! wy4bc7@wy2f12@strip-annotations wy2f12@strip-annotations) (set! wy2f14@strip (lambda (wy335e@x wy335f@m*) (if (wy2e88@top-marked? wy335f@m*) (if (or (wy2a46@wy2918@annotation? wy335e@x) (and (pair? wy335e@x) (wy2a46@wy2918@annotation? (car wy335e@x))) (and (vector? wy335e@x) (> (vector-length wy335e@x) '0) (wy2a46@wy2918@annotation? (vector-ref wy335e@x '0)))) (wy2f12@strip-annotations wy335e@x) wy335e@x) (let wy3364@f ((wy3362@x wy335e@x)) (if (wy2ece@stx? wy3362@x) (begin (if (pair? (wy2ed0@stx-expr wy3362@x)) (begin (set-source-info! (wy2ed0@stx-expr wy3362@x) '#f) (set-source-info! (cdr (wy2ed0@stx-expr wy3362@x)) '#f) (set-source-info! (car (wy2ed0@stx-expr wy3362@x)) '#f)) (void)) (wy2f14@strip (wy2ed0@stx-expr wy3362@x) (wy2ed4@stx-mark* wy3362@x))) (if (wy2a46@wy2918@annotation? wy3362@x) (wy2a45@wy2916@annotation-stripped wy3362@x) (if (pair? wy3362@x) (let ((wy3366@a (wy3364@f (car wy3362@x))) (wy3367@d (wy3364@f (cdr wy3362@x)))) (if (and (eq? wy3366@a (car wy3362@x)) (eq? wy3367@d (cdr wy3362@x))) wy3362@x (cons wy3366@a wy3367@d))) (if (vector? wy3362@x) (let ((wy336a@old (vector->list wy3362@x))) (let ((wy336c@new (map wy3364@f wy336a@old))) (if (for-all eq? wy336a@old wy336c@new) wy3362@x (list->vector wy336c@new)))) wy3362@x)))))))) (set! wy4bc8@wy2f14@strip wy2f14@strip) (set! wy2f16@stx->datum (lambda (wy336e@x) (wy2f14@strip wy336e@x '()))) (set! wy4bc9@wy2f16@stx->datum wy2f16@stx->datum) (set! wy2f18@id->label (lambda (wy3370@id) (or (id->real-label wy3370@id) (let ((wy3372@t (wy31f9@top-level-context))) (if wy3372@t ((lambda (wy3374@env) (let ((wy3376@rib (wy31a9@interaction-env-rib wy3374@env))) (call-with-values (lambda () (wy2e92@gen-define-label+loc wy3370@id wy3376@rib)) (lambda (wy337c@wy3379 wy337d@wy337b) (let ((wy3380@loc_ wy337d@wy337b) (wy3381@lab wy337c@wy3379)) (begin (wy2eb8@extend-rib! wy3376@rib wy3370@id wy3381@lab) wy3381@lab)))))) wy3372@t) '#f))))) (set! wy4bca@wy2f18@id->label wy2f18@id->label) (set! wy2f1a@label->binding (lambda (wy3384@x wy3385@r) (let ((wy3388@t (wy2d1d@wy2b6a@imported-label->binding wy3384@x))) (if wy3388@t ((lambda (wy338a@b) (if (and (pair? wy338a@b) (eq? (car wy338a@b) '$core-rtd)) (cons '$rtd (map wy30bf@bless (cdr wy338a@b))) (if (and (pair? wy338a@b) (eq? (car wy338a@b) 'global-rtd)) (let ((wy338c@lib (cadr wy338a@b)) (wy338d@loc (cddr wy338a@b))) (cons '$rtd (symbol-value wy338d@loc))) wy338a@b))) wy3388@t) (let ((wy3390@t (assq wy3384@x wy3385@r))) (if wy3390@t (cdr wy3390@t) (let ((wy3392@t (wy31f9@top-level-context))) (if wy3392@t ((lambda (wy3394@env) (let ((wy3396@t (assq wy3384@x (wy31b1@interaction-env-locs wy3394@env)))) (if wy3396@t ((lambda (wy3398@p) (cons* 'lexical (cdr wy3398@p) '#f)) wy3396@t) '(displaced-lexical . #f)))) wy3392@t) '(displaced-lexical . #f))))))))) (set! wy4bcb@wy2f1a@label->binding wy2f1a@label->binding) (set! wy2f1c@make-binding cons) (set! wy4bcc@wy2f1c@make-binding wy2f1c@make-binding) (set! wy2f1e@binding-type car) (set! wy4bcd@wy2f1e@binding-type wy2f1e@binding-type) (set! wy2f20@binding-value cdr) (set! wy4bce@wy2f20@binding-value wy2f20@binding-value) (set! wy2f22@raise-unbound-error (lambda (wy339a@id) (wy31e7@syntax-violation* '#f '"unbound identifier" wy339a@id (make-undefined-violation)))) (set! wy4bcf@wy2f22@raise-unbound-error wy2f22@raise-unbound-error) (set! wy2f24@syntax-type (lambda (wy339c@e wy339d@r) (if (wy2f02@id? wy339c@e) (let ((wy33a0@id wy339c@e)) (let ((wy33a2@label (wy2f18@id->label wy33a0@id))) (let ((wy33a4@b (wy2f1a@label->binding wy33a2@label wy339d@r))) (let ((wy33a6@type (wy2f1e@binding-type wy33a4@b))) (begin (if (not wy33a2@label) (wy2f22@raise-unbound-error wy33a0@id) (void)) (let ((wy33a8@t wy33a6@type)) (if (memv wy33a8@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values wy33a6@type (wy2f20@binding-value wy33a4@b) wy33a0@id) (values 'other '#f '#f)))))))) (if (wy2ef4@syntax-pair? wy339c@e) (let ((wy33aa@id (wy2efc@syntax-car wy339c@e))) (if (wy2f02@id? wy33aa@id) (let ((wy33ac@label (wy2f18@id->label wy33aa@id))) (let ((wy33ae@b (wy2f1a@label->binding wy33ac@label wy339d@r))) (let ((wy33b0@type (wy2f1e@binding-type wy33ae@b))) (begin (if (not wy33ac@label) (wy2f22@raise-unbound-error wy33aa@id) (void)) (let ((wy33b2@t wy33b0@type)) (if (memv wy33b2@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values wy33b0@type (wy2f20@binding-value wy33ae@b) wy33aa@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((wy33b4@d (wy2f16@stx->datum wy339c@e))) (if (wy2f10@self-evaluating? wy33b4@d) (values 'constant wy33b4@d '#f) (values 'other '#f '#f))))))) (set! wy4bd0@wy2f24@syntax-type wy2f24@syntax-type) (set! wy2f32@sanitize-binding (lambda (wy33b6@x wy33b7@src) (if (procedure? wy33b6@x) (cons* 'local-macro wy33b6@x wy33b7@src) (if (and (pair? wy33b6@x) (eq? (car wy33b6@x) 'macro!) (procedure? (cdr wy33b6@x))) (cons* 'local-macro! (cdr wy33b6@x) wy33b7@src) (if (and (pair? wy33b6@x) (eq? (car wy33b6@x) '$rtd)) wy33b6@x (assertion-violation 'expand '"invalid transformer" wy33b6@x)))))) (set! wy4bd1@wy2f32@sanitize-binding wy2f32@sanitize-binding) (set! wy2f34@make-variable-transformer (lambda (wy33ba@x) (if (procedure? wy33ba@x) (cons 'macro! wy33ba@x) (assertion-violation 'make-variable-transformer '"not a procedure" wy33ba@x)))) (set! wy4bd2@wy2f34@make-variable-transformer wy2f34@make-variable-transformer) (set! wy2f36@variable-transformer? (lambda (wy33bc@x) (and (pair? wy33bc@x) (eq? (car wy33bc@x) 'macro!) (procedure? (cdr wy33bc@x))))) (set! wy4bd3@wy2f36@variable-transformer? wy2f36@variable-transformer?) (set! wy2f38@variable-transformer-procedure (lambda (wy33be@x) (if (wy2f36@variable-transformer? wy33be@x) (cdr wy33be@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" wy33be@x)))) (set! wy4bd4@wy2f38@variable-transformer-procedure wy2f38@variable-transformer-procedure) (set! wy2f3a@make-eval-transformer (lambda (wy33c0@x) (wy2f32@sanitize-binding (eval-core (wy2aa8@wy2a60@expanded->core wy33c0@x)) wy33c0@x))) (set! wy4bd5@wy2f3a@make-eval-transformer wy2f3a@make-eval-transformer) (set! wy308b@parse-define (lambda (wy33c2@x) (let ((wy33c4@t wy33c2@x)) (let ((wy33c6@ls/false (wy3109@syntax-dispatch wy33c4@t '(_ (any . any) any . each-any)))) (if (and wy33c6@ls/false (apply (lambda (wy33c8@id wy33c9@fmls wy33ca@b wy33cb@b*) (wy2f02@id? wy33c8@id)) wy33c6@ls/false)) (apply (lambda (wy33d0@id wy33d1@fmls wy33d2@b wy33d3@b*) (begin (wy312f@verify-formals wy33d1@fmls wy33c2@x) (values wy33d0@id (cons 'defun (cons wy33d1@fmls (cons wy33d2@b wy33d3@b*)))))) wy33c6@ls/false) (let ((wy33d8@t wy33c4@t)) (let ((wy33da@ls/false (wy3109@syntax-dispatch wy33d8@t '(_ any any)))) (if (and wy33da@ls/false (apply (lambda (wy33dc@id wy33dd@val) (wy2f02@id? wy33dc@id)) wy33da@ls/false)) (apply (lambda (wy33e0@id wy33e1@val) (values wy33e0@id (cons 'expr wy33e1@val))) wy33da@ls/false) (let ((wy33e4@t wy33d8@t)) (let ((wy33e6@ls/false (wy3109@syntax-dispatch wy33e4@t '(_ any)))) (if (and wy33e6@ls/false (apply (lambda (wy33e8@id) (wy2f02@id? wy33e8@id)) wy33e6@ls/false)) (apply (lambda (wy33ea@id) (values wy33ea@id (cons 'expr (wy30bf@bless '(void))))) wy33e6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy33e4@t)))))))))))) (set! wy4bd6@wy308b@parse-define wy308b@parse-define) (set! wy308d@parse-define-syntax (lambda (wy33ec@x) (let ((wy33ee@t wy33ec@x)) (let ((wy33f0@ls/false (wy3109@syntax-dispatch wy33ee@t '(_ any any)))) (if (and wy33f0@ls/false (apply (lambda (wy33f2@id wy33f3@val) (wy2f02@id? wy33f2@id)) wy33f0@ls/false)) (apply (lambda (wy33f6@id wy33f7@val) (values wy33f6@id wy33f7@val)) wy33f0@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy33ee@t)))))) (set! wy4bd7@wy308d@parse-define-syntax wy308d@parse-define-syntax) (set! wy308f@scheme-stx-hashtable (make-eq-hashtable)) (set! wy4bd8@wy308f@scheme-stx-hashtable wy308f@scheme-stx-hashtable) (set! wy3091@scheme-stx (lambda (wy33fa@sym) (or (hashtable-ref wy308f@scheme-stx-hashtable wy33fa@sym '#f) (let ((wy33fc@subst (wy2cf9@wy2b22@library-subst (wy2d17@wy2b5e@find-library-by-name '(psyntax system $all))))) (let ((wy33fe@stx (make-simple-struct 'stx '5 (list wy33fa@sym wy2e86@top-mark* '() '())))) (let ((wy3400@stx (let ((wy3402@t (assq wy33fa@sym wy33fc@subst))) (if wy3402@t ((lambda (wy3404@x) (let ((wy3406@name (car wy3404@x)) (wy3407@label (cdr wy3404@x))) (wy2eec@add-subst (make-simple-struct 'rib '6 (list (list wy3406@name) (list wy2e86@top-mark*) (list wy3407@label) '#f '#f)) wy33fe@stx))) wy3402@t) wy33fe@stx)))) (begin (hashtable-set! wy308f@scheme-stx-hashtable wy33fa@sym wy3400@stx) wy3400@stx))))))) (set! wy4bd9@wy3091@scheme-stx wy3091@scheme-stx) (set! wy3093@lexical-var car) (set! wy4bda@wy3093@lexical-var wy3093@lexical-var) (set! wy3095@lexical-mutable? cdr) (set! wy4bdb@wy3095@lexical-mutable? wy3095@lexical-mutable?) (set! wy3097@set-lexical-mutable! set-cdr!) (set! wy4bdc@wy3097@set-lexical-mutable! wy3097@set-lexical-mutable!) (set! wy3099@add-lexical (lambda (wy340a@lab wy340b@lex wy340c@r) (cons (cons* wy340a@lab 'lexical wy340b@lex '#f) wy340c@r))) (set! wy4bdd@wy3099@add-lexical wy3099@add-lexical) (set! wy309b@add-lexicals (lambda (wy3410@lab* wy3411@lex* wy3412@r) (if (null? wy3410@lab*) wy3412@r (wy309b@add-lexicals (cdr wy3410@lab*) (cdr wy3411@lex*) (wy3099@add-lexical (car wy3410@lab*) (car wy3411@lex*) wy3412@r))))) (set! wy4bde@wy309b@add-lexicals wy309b@add-lexicals) (set! wy309d@letrec-helper (lambda (wy3416@e wy3417@r wy3418@mr wy3419@build) (let ((wy341e@t wy3416@e)) (let ((wy3420@ls/false (wy3109@syntax-dispatch wy341e@t '(_ #(each (any any)) any . each-any)))) (if wy3420@ls/false (apply (lambda (wy3422@lhs* wy3423@rhs* wy3424@b wy3425@b*) (if (not (wy2f0a@valid-bound-ids? wy3422@lhs*)) (wy30c3@invalid-fmls-error wy3416@e wy3422@lhs*) (let ((wy342a@lex* (map wy2e8a@gen-lexical wy3422@lhs*)) (wy342b@lab* (map wy2e8e@gen-label wy3422@lhs*))) (let ((wy342e@rib (wy2ec2@make-full-rib wy3422@lhs* wy342b@lab*)) (wy342f@r (wy309b@add-lexicals wy342b@lab* wy342a@lex* wy3417@r))) (let ((wy3432@body (wy3141@chi-internal (wy2eec@add-subst wy342e@rib (cons wy3424@b wy3425@b*)) wy342f@r wy3418@mr)) (wy3433@rhs* (wy3127@chi-expr* (map (lambda (wy3436@x) (wy2eec@add-subst wy342e@rib wy3436@x)) wy3423@rhs*) wy342f@r wy3418@mr))) (wy3419@build '#f wy342a@lex* wy3433@rhs* wy3432@body)))))) wy3420@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy341e@t)))))) (set! wy4bdf@wy309d@letrec-helper wy309d@letrec-helper) (set! wy309f@let-transformer (lambda (wy3438@e wy3439@r wy343a@mr) (let ((wy343e@t wy3438@e)) (let ((wy3440@ls/false (wy3109@syntax-dispatch wy343e@t '(_ #(each (any any)) any . each-any)))) (if wy3440@ls/false (apply (lambda (wy3442@lhs* wy3443@rhs* wy3444@b wy3445@b*) (if (not (wy2f0a@valid-bound-ids? wy3442@lhs*)) (wy30c3@invalid-fmls-error wy3438@e wy3442@lhs*) (let ((wy344a@lex* (map wy2e8a@gen-lexical wy3442@lhs*)) (wy344b@lab* (map wy2e8e@gen-label wy3442@lhs*)) (wy344c@rhs* (wy3127@chi-expr* wy3443@rhs* wy3439@r wy343a@mr))) (let ((wy3450@rib (wy2ec2@make-full-rib wy3442@lhs* wy344b@lab*)) (wy3451@r (wy309b@add-lexicals wy344b@lab* wy344a@lex* wy3439@r))) (let ((wy3454@body (wy3141@chi-internal (wy2eec@add-subst wy3450@rib (cons wy3444@b wy3445@b*)) wy3451@r wy343a@mr))) (wy2e6a@wy2dcd@build-let '#f wy344a@lex* wy344c@rhs* wy3454@body)))))) wy3440@ls/false) (let ((wy3456@t wy343e@t)) (let ((wy3458@ls/false (wy3109@syntax-dispatch wy3456@t '(_ any #(each (any any)) any . each-any)))) (if wy3458@ls/false (apply (lambda (wy345a@loop wy345b@lhs* wy345c@rhs* wy345d@b wy345e@b*) (if (not (wy2f0a@valid-bound-ids? wy345b@lhs*)) (wy30c3@invalid-fmls-error wy3438@e wy345b@lhs*) (let ((wy3464@lex* (map wy2e8a@gen-lexical wy345b@lhs*)) (wy3465@lab* (map wy2e8e@gen-label wy345b@lhs*)) (wy3466@rhs* (wy3127@chi-expr* wy345c@rhs* wy3439@r wy343a@mr)) (wy3467@loop-lex (wy2e8a@gen-lexical wy345a@loop)) (wy3468@loop-lab (wy2e8e@gen-label wy345a@loop))) (let ((wy346e@loop-rib (wy2ec2@make-full-rib (list wy345a@loop) (list wy3468@loop-lab))) (wy346f@rib (wy2ec2@make-full-rib wy345b@lhs* wy3465@lab*)) (wy3470@r (wy309b@add-lexicals (cons wy3468@loop-lab wy3465@lab*) (cons wy3467@loop-lex wy3464@lex*) wy3439@r))) (let ((wy3474@body (wy3141@chi-internal (wy2eec@add-subst wy346e@loop-rib (wy2eec@add-subst wy346f@rib (cons wy345d@b wy345e@b*))) wy3470@r wy343a@mr))) (wy2e6b@wy2dcf@build-named-let '#f wy3467@loop-lex wy3464@lex* wy3466@rhs* wy3474@body)))))) wy3458@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3456@t))))))))) (set! wy4be0@wy309f@let-transformer wy309f@let-transformer) (set! wy30a1@letrec-transformer (lambda (wy3476@e wy3477@r wy3478@mr) (wy309d@letrec-helper wy3476@e wy3477@r wy3478@mr wy2e69@wy2dcb@build-letrec))) (set! wy4be1@wy30a1@letrec-transformer wy30a1@letrec-transformer) (set! wy30a3@letrec*-transformer (lambda (wy347c@e wy347d@r wy347e@mr) (wy309d@letrec-helper wy347c@e wy347d@r wy347e@mr wy2e6c@wy2dd1@build-letrec*))) (set! wy4be2@wy30a3@letrec*-transformer wy30a3@letrec*-transformer) (set! wy30a5@fluid-let-syntax-transformer (lambda (wy3482@e wy3483@r wy3484@mr) (letrec* ((wy3489@lookup (lambda (wy349c@x) (or (wy2f18@id->label wy349c@x) (wy31e9@syntax-violation '#f '"unbound identifier" wy3482@e wy349c@x))))) (let ((wy348a@t wy3482@e)) (let ((wy348c@ls/false (wy3109@syntax-dispatch wy348a@t '(_ #(each (any any)) any . each-any)))) (if wy348c@ls/false (apply (lambda (wy348e@lhs* wy348f@rhs* wy3490@b wy3491@b*) (if (not (wy2f0a@valid-bound-ids? wy348e@lhs*)) (wy30c3@invalid-fmls-error wy3482@e wy348e@lhs*) (let ((wy3496@lab* (map wy3489@lookup wy348e@lhs*)) (wy3497@rhs* (map (lambda (wy349a@x) (wy2f3a@make-eval-transformer (wy3163@expand-transformer wy349a@x wy3484@mr))) wy348f@rhs*))) (wy3141@chi-internal (cons wy3490@b wy3491@b*) (append (map cons wy3496@lab* wy3497@rhs*) wy3483@r) (append (map cons wy3496@lab* wy3497@rhs*) wy3484@mr))))) wy348c@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy348a@t))))))) (set! wy4be3@wy30a5@fluid-let-syntax-transformer wy30a5@fluid-let-syntax-transformer) (set! wy30a7@type-descriptor-transformer (lambda (wy349e@e wy349f@r wy34a0@mr) (let ((wy34a4@t wy349e@e)) (let ((wy34a6@ls/false (wy3109@syntax-dispatch wy34a4@t '(_ any)))) (if (and wy34a6@ls/false (apply (lambda (wy34a8@id) (wy2f02@id? wy34a8@id)) wy34a6@ls/false)) (apply (lambda (wy34aa@id) (let ((wy34ac@lab (wy2f18@id->label wy34aa@id))) (let ((wy34ae@b (wy2f1a@label->binding wy34ac@lab wy349f@r))) (let ((wy34b0@type (wy2f1e@binding-type wy34ae@b))) (begin (if (not wy34ac@lab) (wy2f22@raise-unbound-error wy34aa@id) (void)) (if (not (and (eq? wy34b0@type '$rtd) (not (list? (wy2f20@binding-value wy34ae@b))))) (wy31e9@syntax-violation '#f '"not a record type" wy349e@e) (void)) (list 'quote (wy2f20@binding-value wy34ae@b))))))) wy34a6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy34a4@t)))))) (set! wy4be4@wy30a7@type-descriptor-transformer wy30a7@type-descriptor-transformer) (set! wy30a9@record-type-descriptor-transformer (lambda (wy34b2@e wy34b3@r wy34b4@mr) (let ((wy34b8@t wy34b2@e)) (let ((wy34ba@ls/false (wy3109@syntax-dispatch wy34b8@t '(_ any)))) (if (and wy34ba@ls/false (apply (lambda (wy34bc@id) (wy2f02@id? wy34bc@id)) wy34ba@ls/false)) (apply (lambda (wy34be@id) (let ((wy34c0@lab (wy2f18@id->label wy34be@id))) (let ((wy34c2@b (wy2f1a@label->binding wy34c0@lab wy34b3@r))) (let ((wy34c4@type (wy2f1e@binding-type wy34c2@b))) (begin (if (not wy34c0@lab) (wy2f22@raise-unbound-error wy34be@id) (void)) (if (not (and (eq? wy34c4@type '$rtd) (list? (wy2f20@binding-value wy34c2@b)))) (wy31e9@syntax-violation '#f '"not a record type" wy34b2@e) (void)) (wy312b@chi-expr (car (wy2f20@binding-value wy34c2@b)) wy34b3@r wy34b4@mr)))))) wy34ba@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy34b8@t)))))) (set! wy4be5@wy30a9@record-type-descriptor-transformer wy30a9@record-type-descriptor-transformer) (set! wy30ab@record-constructor-descriptor-transformer (lambda (wy34c6@e wy34c7@r wy34c8@mr) (let ((wy34cc@t wy34c6@e)) (let ((wy34ce@ls/false (wy3109@syntax-dispatch wy34cc@t '(_ any)))) (if (and wy34ce@ls/false (apply (lambda (wy34d0@id) (wy2f02@id? wy34d0@id)) wy34ce@ls/false)) (apply (lambda (wy34d2@id) (let ((wy34d4@lab (wy2f18@id->label wy34d2@id))) (let ((wy34d6@b (wy2f1a@label->binding wy34d4@lab wy34c7@r))) (let ((wy34d8@type (wy2f1e@binding-type wy34d6@b))) (begin (if (not wy34d4@lab) (wy2f22@raise-unbound-error wy34d2@id) (void)) (if (not (and (eq? wy34d8@type '$rtd) (list? (wy2f20@binding-value wy34d6@b)))) (wy31e9@syntax-violation '#f '"invalid type" wy34c6@e) (void)) (wy312b@chi-expr (cadr (wy2f20@binding-value wy34d6@b)) wy34c7@r wy34c8@mr)))))) wy34ce@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy34cc@t)))))) (set! wy4be6@wy30ab@record-constructor-descriptor-transformer wy30ab@record-constructor-descriptor-transformer) (set! wy30ad@when-macro (lambda (wy34da@e) (let ((wy34dc@t wy34da@e)) (let ((wy34de@ls/false (wy3109@syntax-dispatch wy34dc@t '(_ any any . each-any)))) (if wy34de@ls/false (apply (lambda (wy34e0@test wy34e1@e wy34e2@e*) (wy30bf@bless (list 'if wy34e0@test (cons 'begin (cons wy34e1@e wy34e2@e*))))) wy34de@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy34dc@t)))))) (set! wy4be7@wy30ad@when-macro wy30ad@when-macro) (set! wy30af@unless-macro (lambda (wy34e6@e) (let ((wy34e8@t wy34e6@e)) (let ((wy34ea@ls/false (wy3109@syntax-dispatch wy34e8@t '(_ any any . each-any)))) (if wy34ea@ls/false (apply (lambda (wy34ec@test wy34ed@e wy34ee@e*) (wy30bf@bless (list 'if (list 'not wy34ec@test) (cons 'begin (cons wy34ed@e wy34ee@e*))))) wy34ea@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy34e8@t)))))) (set! wy4be8@wy30af@unless-macro wy30af@unless-macro) (set! wy30b1@if-transformer (lambda (wy34f2@e wy34f3@r wy34f4@mr) (let ((wy34f8@t wy34f2@e)) (let ((wy34fa@ls/false (wy3109@syntax-dispatch wy34f8@t '(_ any any any)))) (if wy34fa@ls/false (apply (lambda (wy34fc@e0 wy34fd@e1 wy34fe@e2) (list 'if (wy312b@chi-expr wy34fc@e0 wy34f3@r wy34f4@mr) (wy312b@chi-expr wy34fd@e1 wy34f3@r wy34f4@mr) (wy312b@chi-expr wy34fe@e2 wy34f3@r wy34f4@mr))) wy34fa@ls/false) (let ((wy3502@t wy34f8@t)) (let ((wy3504@ls/false (wy3109@syntax-dispatch wy3502@t '(_ any any)))) (if wy3504@ls/false (apply (lambda (wy3506@e0 wy3507@e1) (list 'if (wy312b@chi-expr wy3506@e0 wy34f3@r wy34f4@mr) (wy312b@chi-expr wy3507@e1 wy34f3@r wy34f4@mr) (wy2e68@wy2dc9@build-void))) wy3504@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3502@t))))))))) (set! wy4be9@wy30b1@if-transformer wy30b1@if-transformer) (set! wy30b3@and-transformer (lambda (wy350a@e wy350b@r wy350c@mr) (let ((wy3510@t wy350a@e)) (let ((wy3512@ls/false (wy3109@syntax-dispatch wy3510@t '(_ . each-any)))) (if wy3512@ls/false (apply (lambda (wy3514@e*) (cons 'and (wy3127@chi-expr* wy3514@e* wy350b@r wy350c@mr))) wy3512@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3510@t)))))) (set! wy4bea@wy30b3@and-transformer wy30b3@and-transformer) (set! wy30b5@or-transformer (lambda (wy3516@e wy3517@r wy3518@mr) (let ((wy351c@t wy3516@e)) (let ((wy351e@ls/false (wy3109@syntax-dispatch wy351c@t '(_ . each-any)))) (if wy351e@ls/false (apply (lambda (wy3520@e*) (cons 'or (wy3127@chi-expr* wy3520@e* wy3517@r wy3518@mr))) wy351e@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy351c@t)))))) (set! wy4beb@wy30b5@or-transformer wy30b5@or-transformer) (set! wy30b7@case-macro (lambda (wy3522@e) (letrec* ((wy3525@build-last (lambda (wy354c@cls) (let ((wy354e@t wy354c@cls)) (let ((wy3550@ls/false (wy3109@syntax-dispatch wy354e@t '(#(scheme-id else) any . each-any)))) (if wy3550@ls/false (apply (lambda (wy3552@e wy3553@e*) (cons 'begin (cons wy3552@e wy3553@e*))) wy3550@ls/false) (let ((wy3556@t wy354e@t)) (let ((wy3558@ls/false (wy3109@syntax-dispatch wy3556@t '_))) (if wy3558@ls/false (apply (lambda () (wy3527@build-one wy354c@cls '(if #f #f))) wy3558@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3556@t))))))))) (wy3527@build-one (lambda (wy353e@cls wy353f@k) (let ((wy3542@t wy353e@cls)) (let ((wy3544@ls/false (wy3109@syntax-dispatch wy3542@t '(each-any any . each-any)))) (if wy3544@ls/false (apply (lambda (wy3546@d* wy3547@e wy3548@e*) (list 'if (list 'memv 't (list 'quote wy3546@d*)) (cons 'begin (cons wy3547@e wy3548@e*)) wy353f@k)) wy3544@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3542@t))))))) (let ((wy3528@t wy3522@e)) (let ((wy352a@ls/false (wy3109@syntax-dispatch wy3528@t '(_ any)))) (if wy352a@ls/false (apply (lambda (wy352c@expr) (wy30bf@bless (cons 'let (cons (list (list 't wy352c@expr)) '((if #f #f)))))) wy352a@ls/false) (let ((wy352e@t wy3528@t)) (let ((wy3530@ls/false (wy3109@syntax-dispatch wy352e@t '(_ any any . each-any)))) (if wy3530@ls/false (apply (lambda (wy3532@expr wy3533@cls wy3534@cls*) (wy30bf@bless (list 'let (list (list 't wy3532@expr)) (let wy353c@f ((wy3538@cls wy3533@cls) (wy3539@cls* wy3534@cls*)) (if (null? wy3539@cls*) (wy3525@build-last wy3538@cls) (wy3527@build-one wy3538@cls (wy353c@f (car wy3539@cls*) (cdr wy3539@cls*)))))))) wy3530@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy352e@t)))))))))) (set! wy4bec@wy30b7@case-macro wy30b7@case-macro) (set! wy30b9@quote-transformer (lambda (wy355a@e wy355b@r wy355c@mr) (let ((wy3560@t wy355a@e)) (let ((wy3562@ls/false (wy3109@syntax-dispatch wy3560@t '(_ any)))) (if wy3562@ls/false (apply (lambda (wy3564@datum) (list 'quote (wy2f16@stx->datum wy3564@datum))) wy3562@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3560@t)))))) (set! wy4bed@wy30b9@quote-transformer wy30b9@quote-transformer) (set! wy30bb@case-lambda-transformer (lambda (wy3566@e wy3567@r wy3568@mr) (let ((wy356c@t wy3566@e)) (let ((wy356e@ls/false (wy3109@syntax-dispatch wy356c@t '(_ . #(each (any any . each-any)))))) (if wy356e@ls/false (apply (lambda (wy3570@fmls* wy3571@b* wy3572@b**) (call-with-values (lambda () (wy3133@chi-lambda-clause* wy3566@e wy3570@fmls* (map cons wy3571@b* wy3572@b**) wy3567@r wy3568@mr)) (lambda (wy357a@wy3577 wy357b@wy3579) (let ((wy357e@body* wy357b@wy3579) (wy357f@fmls* wy357a@wy3577)) (wy2e66@wy2d99@build-case-lambda '#f wy357f@fmls* wy357e@body*))))) wy356e@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy356c@t)))))) (set! wy4bee@wy30bb@case-lambda-transformer wy30bb@case-lambda-transformer) (set! wy30bd@lambda-transformer (lambda (wy3582@e wy3583@r wy3584@mr) (let ((wy3588@t wy3582@e)) (let ((wy358a@ls/false (wy3109@syntax-dispatch wy3588@t '(_ any any . each-any)))) (if wy358a@ls/false (apply (lambda (wy358c@fmls wy358d@b wy358e@b*) (call-with-values (lambda () (wy3131@chi-lambda-clause wy3582@e wy358c@fmls (cons wy358d@b wy358e@b*) wy3583@r wy3584@mr)) (lambda (wy3596@wy3593 wy3597@wy3595) (let ((wy359a@body wy3597@wy3595) (wy359b@fmls wy3596@wy3593)) (wy2e65@wy2d97@build-lambda '#f wy359b@fmls wy359a@body))))) wy358a@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3588@t)))))) (set! wy4bef@wy30bd@lambda-transformer wy30bd@lambda-transformer) (set! wy30bf@bless (lambda (wy359e@x) (wy2eea@mkstx (let wy35a2@f ((wy35a0@x wy359e@x)) (if (wy2ece@stx? wy35a0@x) wy35a0@x (if (pair? wy35a0@x) (cons (wy35a2@f (car wy35a0@x)) (wy35a2@f (cdr wy35a0@x))) (if (symbol? wy35a0@x) (wy3091@scheme-stx wy35a0@x) (if (vector? wy35a0@x) (vector-map wy35a2@f wy35a0@x) wy35a0@x))))) '() '() '()))) (set! wy4bf0@wy30bf@bless wy30bf@bless) (set! wy30c1@with-syntax-macro (lambda (wy35a4@e) (let ((wy35a6@t wy35a4@e)) (let ((wy35a8@ls/false (wy3109@syntax-dispatch wy35a6@t '(_ #(each (any any)) any . each-any)))) (if wy35a8@ls/false (apply (lambda (wy35aa@pat* wy35ab@expr* wy35ac@b wy35ad@b*) (let ((wy35b2@idn* (let wy35b6@f ((wy35b4@pat* wy35aa@pat*)) (if (null? wy35b4@pat*) '() (call-with-values (lambda () (wy3107@convert-pattern (car wy35b4@pat*) '())) (lambda (wy35bc@wy35b9 wy35bd@wy35bb) (let ((wy35c0@idn* wy35bd@wy35bb) (wy35c1@pat wy35bc@wy35b9)) (append wy35c0@idn* (wy35b6@f (cdr wy35b4@pat*)))))))))) (begin (wy312f@verify-formals (map car wy35b2@idn*) wy35a4@e) (let ((wy35c4@t* (wy31d7@generate-temporaries wy35ab@expr*))) (wy30bf@bless (list 'let (map list wy35c4@t* wy35ab@expr*) (let wy35ca@f ((wy35c6@pat* wy35aa@pat*) (wy35c7@t* wy35c4@t*)) (if (null? wy35c6@pat*) (cons 'let (cons '() (cons wy35ac@b wy35ad@b*))) (list 'syntax-case (car wy35c7@t*) '() (list (car wy35c6@pat*) (wy35ca@f (cdr wy35c6@pat*) (cdr wy35c7@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car wy35c6@pat*)) (car wy35c7@t*)))))))))))) wy35a8@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy35a6@t)))))) (set! wy4bf1@wy30c1@with-syntax-macro wy30c1@with-syntax-macro) (set! wy30c3@invalid-fmls-error (lambda (wy35cc@stx wy35cd@fmls) (let ((wy35d0@t wy35cd@fmls)) (let ((wy35d2@ls/false (wy3109@syntax-dispatch wy35d0@t '#(each+ any () any)))) (if wy35d2@ls/false (apply (lambda (wy35d4@id* wy35d5@last) (let wy35da@f ((wy35d8@id* (if (wy2f02@id? wy35d5@last) (cons wy35d5@last wy35d4@id*) (if (wy2ef8@syntax-null? wy35d5@last) wy35d4@id* (wy31e9@syntax-violation '#f '"not an identifier" wy35cc@stx wy35d5@last))))) (if (null? wy35d8@id*) (values) (if (not (wy2f02@id? (car wy35d8@id*))) (wy31e9@syntax-violation '#f '"not an identifier" wy35cc@stx (car wy35d8@id*)) (begin (wy35da@f (cdr wy35d8@id*)) (if (wy2f0e@bound-id-member? (car wy35d8@id*) (cdr wy35d8@id*)) (wy31e9@syntax-violation '#f '"duplicate binding" wy35cc@stx (car wy35d8@id*)) (void))))))) wy35d2@ls/false) (let ((wy35dc@t wy35d0@t)) (let ((wy35de@ls/false (wy3109@syntax-dispatch wy35dc@t '_))) (if wy35de@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"malformed binding form" wy35cc@stx wy35cd@fmls)) wy35de@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy35dc@t))))))))) (set! wy4bf2@wy30c3@invalid-fmls-error wy30c3@invalid-fmls-error) (set! wy30c5@let-macro (lambda (wy35e0@stx) (let ((wy35e2@t wy35e0@stx)) (let ((wy35e4@ls/false (wy3109@syntax-dispatch wy35e2@t '(_ #(each (any any)) any . each-any)))) (if wy35e4@ls/false (apply (lambda (wy35e6@lhs* wy35e7@rhs* wy35e8@b wy35e9@b*) (if (wy2f0a@valid-bound-ids? wy35e6@lhs*) (wy30bf@bless (cons (cons 'lambda (cons wy35e6@lhs* (cons wy35e8@b wy35e9@b*))) wy35e7@rhs*)) (wy30c3@invalid-fmls-error wy35e0@stx wy35e6@lhs*))) wy35e4@ls/false) (let ((wy35ee@t wy35e2@t)) (let ((wy35f0@ls/false (wy3109@syntax-dispatch wy35ee@t '(_ any #(each (any any)) any . each-any)))) (if (and wy35f0@ls/false (apply (lambda (wy35f2@f wy35f3@lhs* wy35f4@rhs* wy35f5@b wy35f6@b*) (wy2f02@id? wy35f2@f)) wy35f0@ls/false)) (apply (lambda (wy35fc@f wy35fd@lhs* wy35fe@rhs* wy35ff@b wy3600@b*) (if (wy2f0a@valid-bound-ids? wy35fd@lhs*) (wy30bf@bless (cons (list 'letrec (list (list wy35fc@f (cons 'lambda (cons wy35fd@lhs* (cons wy35ff@b wy3600@b*))))) wy35fc@f) wy35fe@rhs*)) (wy30c3@invalid-fmls-error wy35e0@stx wy35fd@lhs*))) wy35f0@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy35ee@t))))))))) (set! wy4bf3@wy30c5@let-macro wy30c5@let-macro) (set! wy30c7@let-values-macro (lambda (wy3606@stx) (letrec* ((wy3609@rename (lambda (wy366e@x wy366f@old* wy3670@new*) (begin (if (not (wy2f02@id? wy366e@x)) (wy31e9@syntax-violation '#f '"not an indentifier" wy3606@stx wy366e@x) (void)) (if (wy2f0e@bound-id-member? wy366e@x wy366f@old*) (wy31e9@syntax-violation '#f '"duplicate binding" wy3606@stx wy366e@x) (void)) (let ((wy3674@y (gensym (wy31ef@syntax->datum wy366e@x)))) (values wy3674@y (cons wy366e@x wy366f@old*) (cons wy3674@y wy3670@new*)))))) (wy360b@rename* (lambda (wy365c@x* wy365d@old* wy365e@new*) (if (null? wy365c@x*) (values '() wy365d@old* wy365e@new*) (call-with-values (lambda () (wy3609@rename (car wy365c@x*) wy365d@old* wy365e@new*)) (lambda (wy3662@x wy3663@old* wy3664@new*) (call-with-values (lambda () (wy360b@rename* (cdr wy365c@x*) wy3663@old* wy3664@new*)) (lambda (wy3668@x* wy3669@old* wy366a@new*) (values (cons wy3662@x wy3668@x*) wy3669@old* wy366a@new*))))))))) (let ((wy360c@t wy3606@stx)) (let ((wy360e@ls/false (wy3109@syntax-dispatch wy360c@t '(_ () any . each-any)))) (if wy360e@ls/false (apply (lambda (wy3610@b wy3611@b*) (cons* (wy30bf@bless 'let) '() wy3610@b wy3611@b*)) wy360e@ls/false) (let ((wy3614@t wy360c@t)) (let ((wy3616@ls/false (wy3109@syntax-dispatch wy3614@t '(_ #(each (any any)) any . each-any)))) (if wy3616@ls/false (apply (lambda (wy3618@lhs* wy3619@rhs* wy361a@b wy361b@b*) (wy30bf@bless (let wy3628@f ((wy3620@lhs* wy3618@lhs*) (wy3621@rhs* wy3619@rhs*) (wy3622@old* '()) (wy3623@new* '())) (if (null? wy3620@lhs*) (cons 'let (cons (map list wy3622@old* wy3623@new*) (cons wy361a@b wy361b@b*))) (let ((wy362a@t (car wy3620@lhs*))) (let ((wy362c@ls/false (wy3109@syntax-dispatch wy362a@t 'each-any))) (if wy362c@ls/false (apply (lambda (wy362e@x*) (call-with-values (lambda () (wy360b@rename* wy362e@x* wy3622@old* wy3623@new*)) (lambda (wy3636@wy3631 wy3637@wy3633 wy3638@wy3635) (let ((wy363c@new* wy3638@wy3635) (wy363d@old* wy3637@wy3633) (wy363e@y* wy3636@wy3631)) (list 'call-with-values (list 'lambda '() (car wy3621@rhs*)) (list 'lambda wy363e@y* (wy3628@f (cdr wy3620@lhs*) (cdr wy3621@rhs*) wy363d@old* wy363c@new*))))))) wy362c@ls/false) (let ((wy3642@t wy362a@t)) (let ((wy3644@ls/false (wy3109@syntax-dispatch wy3642@t '#(each+ any () any)))) (if wy3644@ls/false (apply (lambda (wy3646@x* wy3647@x) (call-with-values (lambda () (wy3609@rename wy3647@x wy3622@old* wy3623@new*)) (lambda (wy364a@y wy364b@old* wy364c@new*) (call-with-values (lambda () (wy360b@rename* wy3646@x* wy364b@old* wy364c@new*)) (lambda (wy3650@y* wy3651@old* wy3652@new*) (list 'call-with-values (list 'lambda '() (car wy3621@rhs*)) (list 'lambda (append wy3650@y* wy364a@y) (wy3628@f (cdr wy3620@lhs*) (cdr wy3621@rhs*) wy3651@old* wy3652@new*)))))))) wy3644@ls/false) (let ((wy3656@t wy3642@t)) (let ((wy3658@ls/false (wy3109@syntax-dispatch wy3656@t 'any))) (if wy3658@ls/false (apply (lambda (wy365a@others) (wy31e9@syntax-violation '#f '"malformed bindings" wy3606@stx wy365a@others)) wy3658@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3656@t)))))))))))))) wy3616@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3614@t)))))))))) (set! wy4bf4@wy30c7@let-values-macro wy30c7@let-values-macro) (set! wy30c9@let*-values-macro (lambda (wy3676@stx) (letrec* ((wy3679@check (lambda (wy36a8@x*) (if (not (null? wy36a8@x*)) (let ((wy36aa@x (car wy36a8@x*))) (begin (if (not (wy2f02@id? wy36aa@x)) (wy31e9@syntax-violation '#f '"not an identifier" wy3676@stx wy36aa@x) (void)) (wy3679@check (cdr wy36a8@x*)) (if (wy2f0e@bound-id-member? wy36aa@x (cdr wy36a8@x*)) (wy31e9@syntax-violation '#f '"duplicate identifier" wy3676@stx wy36aa@x) (void)))) (void))))) (let ((wy367a@t wy3676@stx)) (let ((wy367c@ls/false (wy3109@syntax-dispatch wy367a@t '(_ () any . each-any)))) (if wy367c@ls/false (apply (lambda (wy367e@b wy367f@b*) (cons* (wy30bf@bless 'let) '() wy367e@b wy367f@b*)) wy367c@ls/false) (let ((wy3682@t wy367a@t)) (let ((wy3684@ls/false (wy3109@syntax-dispatch wy3682@t '(_ #(each (any any)) any . each-any)))) (if wy3684@ls/false (apply (lambda (wy3686@lhs* wy3687@rhs* wy3688@b wy3689@b*) (wy30bf@bless (let wy3692@f ((wy368e@lhs* wy3686@lhs*) (wy368f@rhs* wy3687@rhs*)) (if (null? wy368e@lhs*) (cons 'begin (cons wy3688@b wy3689@b*)) (let ((wy3694@t (car wy368e@lhs*))) (let ((wy3696@ls/false (wy3109@syntax-dispatch wy3694@t 'each-any))) (if wy3696@ls/false (apply (lambda (wy3698@x*) (begin (wy3679@check wy3698@x*) (list 'call-with-values (list 'lambda '() (car wy368f@rhs*)) (list 'lambda wy3698@x* (wy3692@f (cdr wy368e@lhs*) (cdr wy368f@rhs*)))))) wy3696@ls/false) (let ((wy369a@t wy3694@t)) (let ((wy369c@ls/false (wy3109@syntax-dispatch wy369a@t '#(each+ any () any)))) (if wy369c@ls/false (apply (lambda (wy369e@x* wy369f@x) (begin (wy3679@check (cons wy369f@x wy369e@x*)) (list 'call-with-values (list 'lambda '() (car wy368f@rhs*)) (list 'lambda (append wy369e@x* wy369f@x) (wy3692@f (cdr wy368e@lhs*) (cdr wy368f@rhs*)))))) wy369c@ls/false) (let ((wy36a2@t wy369a@t)) (let ((wy36a4@ls/false (wy3109@syntax-dispatch wy36a2@t 'any))) (if wy36a4@ls/false (apply (lambda (wy36a6@others) (wy31e9@syntax-violation '#f '"malformed bindings" wy3676@stx wy36a6@others)) wy36a4@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy36a2@t)))))))))))))) wy3684@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3682@t)))))))))) (set! wy4bf5@wy30c9@let*-values-macro wy30c9@let*-values-macro) (set! wy30cb@trace-lambda-macro (lambda (wy36ac@stx) (let ((wy36ae@t wy36ac@stx)) (let ((wy36b0@ls/false (wy3109@syntax-dispatch wy36ae@t '(_ any each-any any . each-any)))) (if wy36b0@ls/false (apply (lambda (wy36b2@who wy36b3@fmls wy36b4@b wy36b5@b*) (if (wy2f0a@valid-bound-ids? wy36b3@fmls) (wy30bf@bless (list 'make-traced-procedure (list 'quote wy36b2@who) (cons 'lambda (cons wy36b3@fmls (cons wy36b4@b wy36b5@b*))))) (wy30c3@invalid-fmls-error wy36ac@stx wy36b3@fmls))) wy36b0@ls/false) (let ((wy36ba@t wy36ae@t)) (let ((wy36bc@ls/false (wy3109@syntax-dispatch wy36ba@t '(_ any #(each+ any () any) any . each-any)))) (if wy36bc@ls/false (apply (lambda (wy36be@who wy36bf@fmls wy36c0@last wy36c1@b wy36c2@b*) (if (wy2f0a@valid-bound-ids? (cons wy36c0@last wy36bf@fmls)) (wy30bf@bless (list 'make-traced-procedure (list 'quote wy36be@who) (cons 'lambda (cons (append wy36bf@fmls wy36c0@last) (cons wy36c1@b wy36c2@b*))))) (wy30c3@invalid-fmls-error wy36ac@stx (append wy36bf@fmls wy36c0@last)))) wy36bc@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy36ba@t))))))))) (set! wy4bf6@wy30cb@trace-lambda-macro wy30cb@trace-lambda-macro) (set! wy30cd@trace-define-macro (lambda (wy36c8@stx) (let ((wy36ca@t wy36c8@stx)) (let ((wy36cc@ls/false (wy3109@syntax-dispatch wy36ca@t '(_ (any . each-any) any . each-any)))) (if wy36cc@ls/false (apply (lambda (wy36ce@who wy36cf@fmls wy36d0@b wy36d1@b*) (if (wy2f0a@valid-bound-ids? wy36cf@fmls) (wy30bf@bless (list 'define wy36ce@who (list 'make-traced-procedure (list 'quote wy36ce@who) (cons 'lambda (cons wy36cf@fmls (cons wy36d0@b wy36d1@b*)))))) (wy30c3@invalid-fmls-error wy36c8@stx wy36cf@fmls))) wy36cc@ls/false) (let ((wy36d6@t wy36ca@t)) (let ((wy36d8@ls/false (wy3109@syntax-dispatch wy36d6@t '(_ (any . #(each+ any () any)) any . each-any)))) (if wy36d8@ls/false (apply (lambda (wy36da@who wy36db@fmls wy36dc@last wy36dd@b wy36de@b*) (if (wy2f0a@valid-bound-ids? (cons wy36dc@last wy36db@fmls)) (wy30bf@bless (list 'define wy36da@who (list 'make-traced-procedure (list 'quote wy36da@who) (cons 'lambda (cons (append wy36db@fmls wy36dc@last) (cons wy36dd@b wy36de@b*)))))) (wy30c3@invalid-fmls-error wy36c8@stx (append wy36db@fmls wy36dc@last)))) wy36d8@ls/false) (let ((wy36e4@t wy36d6@t)) (let ((wy36e6@ls/false (wy3109@syntax-dispatch wy36e4@t '(_ any any)))) (if wy36e6@ls/false (apply (lambda (wy36e8@who wy36e9@expr) (if (wy2f02@id? wy36e8@who) (wy30bf@bless (list 'define wy36e8@who (list 'let (list (list 'v wy36e9@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote wy36e8@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (wy31e9@syntax-violation '#f '"invalid name" wy36c8@stx))) wy36e6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy36e4@t)))))))))))) (set! wy4bf7@wy30cd@trace-define-macro wy30cd@trace-define-macro) (set! wy30cf@trace-define-syntax-macro (lambda (wy36ec@stx) (let ((wy36ee@t wy36ec@stx)) (let ((wy36f0@ls/false (wy3109@syntax-dispatch wy36ee@t '(_ any any)))) (if wy36f0@ls/false (apply (lambda (wy36f2@who wy36f3@expr) (if (wy2f02@id? wy36f2@who) (wy30bf@bless (list 'define-syntax wy36f2@who (list 'make-traced-macro (list 'quote wy36f2@who) wy36f3@expr))) (wy31e9@syntax-violation '#f '"invalid name" wy36ec@stx))) wy36f0@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy36ee@t)))))) (set! wy4bf8@wy30cf@trace-define-syntax-macro wy30cf@trace-define-syntax-macro) (set! wy30d1@trace-let/rec-syntax (lambda (wy36f6@who) (lambda (wy36f8@stx) (let ((wy36fa@t wy36f8@stx)) (let ((wy36fc@ls/false (wy3109@syntax-dispatch wy36fa@t '(_ #(each (any any)) any . each-any)))) (if wy36fc@ls/false (apply (lambda (wy36fe@lhs* wy36ff@rhs* wy3700@b wy3701@b*) (if (wy2f0a@valid-bound-ids? wy36fe@lhs*) (let ((wy3706@rhs* (map (lambda (wy3708@lhs wy3709@rhs) (list 'make-traced-macro (list 'quote wy3708@lhs) wy3709@rhs)) wy36fe@lhs* wy36ff@rhs*))) (wy30bf@bless (cons wy36f6@who (cons (map list wy36fe@lhs* wy3706@rhs*) (cons wy3700@b wy3701@b*))))) (wy30c3@invalid-fmls-error wy36f8@stx wy36fe@lhs*))) wy36fc@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy36fa@t))))))) (set! wy4bf9@wy30d1@trace-let/rec-syntax wy30d1@trace-let/rec-syntax) (set! wy30d3@trace-let-syntax-macro (wy30d1@trace-let/rec-syntax 'let-syntax)) (set! wy4bfa@wy30d3@trace-let-syntax-macro wy30d3@trace-let-syntax-macro) (set! wy30d5@trace-letrec-syntax-macro (wy30d1@trace-let/rec-syntax 'letrec-syntax)) (set! wy4bfb@wy30d5@trace-letrec-syntax-macro wy30d5@trace-letrec-syntax-macro) (set! wy30d7@guard-macro (lambda (wy370c@x) (letrec* ((wy370f@gen-clauses (lambda (wy3726@con wy3727@outerk wy3728@clause*) (letrec* ((wy372d@f (lambda (wy3766@x wy3767@k) (let ((wy376a@t wy3766@x)) (let ((wy376c@ls/false (wy3109@syntax-dispatch wy376a@t '(any #(scheme-id =>) any)))) (if wy376c@ls/false (apply (lambda (wy376e@e wy376f@p) (let ((wy3772@t (gensym))) (list 'let (list (list wy3772@t wy376e@e)) (list 'if wy3772@t (list wy376f@p wy3772@t) wy3767@k)))) wy376c@ls/false) (let ((wy3774@t wy376a@t)) (let ((wy3776@ls/false (wy3109@syntax-dispatch wy3774@t '(any)))) (if wy3776@ls/false (apply (lambda (wy3778@e) (let ((wy377a@t (gensym))) (list 'let (list (list wy377a@t wy3778@e)) (list 'if wy377a@t wy377a@t wy3767@k)))) wy3776@ls/false) (let ((wy377c@t wy3774@t)) (let ((wy377e@ls/false (wy3109@syntax-dispatch wy377c@t '(any any . each-any)))) (if wy377e@ls/false (apply (lambda (wy3780@e wy3781@v wy3782@v*) (list 'if wy3780@e (cons 'begin (cons wy3781@v wy3782@v*)) wy3767@k)) wy377e@ls/false) (let ((wy3786@t wy377c@t)) (let ((wy3788@ls/false (wy3109@syntax-dispatch wy3786@t '_))) (if wy3788@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid guard clause" wy3766@x)) wy3788@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3786@t))))))))))))))) (wy372f@f* (lambda (wy373c@x*) (let ((wy373e@t wy373c@x*)) (let ((wy3740@ls/false (wy3109@syntax-dispatch wy373e@t '()))) (if wy3740@ls/false (apply (lambda () (let ((wy3742@g (gensym))) (values (list wy3742@g (list 'lambda '() (list 'raise-continuable wy3726@con))) wy3742@g))) wy3740@ls/false) (let ((wy3744@t wy373e@t)) (let ((wy3746@ls/false (wy3109@syntax-dispatch wy3744@t '((#(scheme-id else) any . each-any))))) (if wy3746@ls/false (apply (lambda (wy3748@e wy3749@e*) (values (cons 'begin (cons wy3748@e wy3749@e*)) '#f)) wy3746@ls/false) (let ((wy374c@t wy3744@t)) (let ((wy374e@ls/false (wy3109@syntax-dispatch wy374c@t '(any . any)))) (if wy374e@ls/false (apply (lambda (wy3750@cls wy3751@cls*) (call-with-values (lambda () (wy372f@f* wy3751@cls*)) (lambda (wy3758@wy3755 wy3759@wy3757) (let ((wy375c@g wy3759@wy3757) (wy375d@e wy3758@wy3755)) (values (wy372d@f wy3750@cls wy375d@e) wy375c@g))))) wy374e@ls/false) (let ((wy3760@t wy374c@t)) (let ((wy3762@ls/false (wy3109@syntax-dispatch wy3760@t 'any))) (if wy3762@ls/false (apply (lambda (wy3764@others) (wy31e9@syntax-violation '#f '"invalid guard clause" wy3764@others)) wy3762@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3760@t)))))))))))))))) (call-with-values (lambda () (wy372f@f* wy3728@clause*)) (lambda (wy3734@wy3731 wy3735@wy3733) (let ((wy3738@raisek wy3735@wy3733) (wy3739@code wy3734@wy3731)) (if wy3738@raisek (list (list 'call/cc (list 'lambda (list wy3738@raisek) (list wy3727@outerk (list 'lambda '() wy3739@code))))) (list wy3727@outerk (list 'lambda '() wy3739@code)))))))))) (let ((wy3710@t wy370c@x)) (let ((wy3712@ls/false (wy3109@syntax-dispatch wy3710@t '(_ (any . each-any) any . each-any)))) (if (and wy3712@ls/false (apply (lambda (wy3714@con wy3715@clause* wy3716@b wy3717@b*) (wy2f02@id? wy3714@con)) wy3712@ls/false)) (apply (lambda (wy371c@con wy371d@clause* wy371e@b wy371f@b*) (let ((wy3724@outerk (gensym))) (wy30bf@bless (list (list 'call/cc (list 'lambda (list wy3724@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list wy371c@con) (wy370f@gen-clauses wy371c@con wy3724@outerk wy371d@clause*)) (cons 'lambda (cons '() (cons wy371e@b wy371f@b*))))))))))) wy3712@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3710@t))))))) (set! wy4bfc@wy30d7@guard-macro wy30d7@guard-macro) (set! wy30d9@define-enumeration-macro (lambda (wy378a@stx) (letrec* ((wy378d@set? (lambda (wy37a6@x) (or (null? wy37a6@x) (and (not (memq (car wy37a6@x) (cdr wy37a6@x))) (wy378d@set? (cdr wy37a6@x)))))) (wy378f@remove-dups (lambda (wy37a4@ls) (if (null? wy37a4@ls) '() (cons (car wy37a4@ls) (wy378f@remove-dups (remq (car wy37a4@ls) (cdr wy37a4@ls)))))))) (let ((wy3790@t wy378a@stx)) (let ((wy3792@ls/false (wy3109@syntax-dispatch wy3790@t '(_ any each-any any)))) (if (and wy3792@ls/false (apply (lambda (wy3794@name wy3795@id* wy3796@maker) (and (wy2f02@id? wy3794@name) (wy2f02@id? wy3796@maker) (for-all wy2f02@id? wy3795@id*))) wy3792@ls/false)) (apply (lambda (wy379a@name wy379b@id* wy379c@maker) (let ((wy37a0@name* (wy378f@remove-dups (wy31ef@syntax->datum wy379b@id*))) (wy37a1@mk (gensym))) (wy30bf@bless (list 'begin (list 'define wy37a1@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote wy37a0@name*)))) (list 'define-syntax wy379a@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote wy37a0@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote wy379a@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax wy379c@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote wy379c@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote wy37a0@name*)) (cons 'syntax-violation (cons (list 'quote wy379c@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons wy37a1@mk '('(n* ...))))))))))))) wy3792@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3790@t))))))) (set! wy4bfd@wy30d9@define-enumeration-macro wy30d9@define-enumeration-macro) (set! wy30db@time-macro (lambda (wy37a8@stx) (let ((wy37aa@t wy37a8@stx)) (let ((wy37ac@ls/false (wy3109@syntax-dispatch wy37aa@t '(_ any)))) (if wy37ac@ls/false (apply (lambda (wy37ae@expr) (wy30bf@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() wy37ae@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) wy37ac@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy37aa@t)))))) (set! wy4bfe@wy30db@time-macro wy30db@time-macro) (set! wy30dd@delay-macro (lambda (wy37b0@stx) (let ((wy37b2@t wy37b0@stx)) (let ((wy37b4@ls/false (wy3109@syntax-dispatch wy37b2@t '(_ any)))) (if wy37b4@ls/false (apply (lambda (wy37b6@expr) (wy30bf@bless (list 'make-promise (list 'lambda '() wy37b6@expr)))) wy37b4@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy37b2@t)))))) (set! wy4bff@wy30dd@delay-macro wy30dd@delay-macro) (set! wy30df@assert-macro (lambda (wy37b8@stx) (let ((wy37ba@t wy37b8@stx)) (let ((wy37bc@ls/false (wy3109@syntax-dispatch wy37ba@t '(_ any)))) (if wy37bc@ls/false (apply (lambda (wy37be@expr) (let ((wy37c0@pos (or (wy31e1@expression-position wy37b8@stx) (wy31e1@expression-position wy37be@expr)))) (wy30bf@bless (list 'let (list (list 'x wy37be@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote wy37be@expr) (list 'quote wy37c0@pos))))))) wy37bc@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy37ba@t)))))) (set! wy4c00@wy30df@assert-macro wy30df@assert-macro) (set! wy30e1@endianness-macro (lambda (wy37c2@stx) (let ((wy37c4@t wy37c2@stx)) (let ((wy37c6@ls/false (wy3109@syntax-dispatch wy37c4@t '(_ any)))) (if wy37c6@ls/false (apply (lambda (wy37c8@e) (let ((wy37ca@t (wy31ef@syntax->datum wy37c8@e))) (if (memv wy37ca@t '(little)) (wy30bf@bless ''little) (if (memv wy37ca@t '(big)) (wy30bf@bless ''big) (wy31e9@syntax-violation '#f '"endianness must be big or little" wy37c2@stx))))) wy37c6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy37c4@t)))))) (set! wy4c01@wy30e1@endianness-macro wy30e1@endianness-macro) (set! wy30e3@identifier-syntax-macro (lambda (wy37cc@stx) (let ((wy37ce@t wy37cc@stx)) (let ((wy37d0@ls/false (wy3109@syntax-dispatch wy37ce@t '(_ any)))) (if wy37d0@ls/false (apply (lambda (wy37d2@expr) (wy30bf@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax wy37d2@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax wy37d2@expr) '((syntax (e* ...)))))))))) wy37d0@ls/false) (let ((wy37d4@t wy37ce@t)) (let ((wy37d6@ls/false (wy3109@syntax-dispatch wy37d4@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and wy37d6@ls/false (apply (lambda (wy37d8@id1 wy37d9@expr1 wy37da@id2 wy37db@expr2 wy37dc@expr3) (and (wy2f02@id? wy37d8@id1) (wy2f02@id? wy37da@id2) (wy2f02@id? wy37db@expr2))) wy37d6@ls/false)) (apply (lambda (wy37e2@id1 wy37e3@expr1 wy37e4@id2 wy37e5@expr2 wy37e6@expr3) (wy30bf@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax wy37e3@expr1)) (list (list 'set! 'id wy37e5@expr2) (list 'syntax wy37e6@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons wy37e3@expr1 '(e* ...))))))))) wy37d6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy37d4@t))))))))) (set! wy4c02@wy30e3@identifier-syntax-macro wy30e3@identifier-syntax-macro) (set! wy30e5@do-macro (lambda (wy37ec@stx) (letrec* ((wy37ef@bind (lambda (wy3806@x) (let ((wy3808@t wy3806@x)) (let ((wy380a@ls/false (wy3109@syntax-dispatch wy3808@t '(any any)))) (if wy380a@ls/false (apply (lambda (wy380c@x wy380d@init) (list wy380c@x wy380d@init wy380c@x)) wy380a@ls/false) (let ((wy3810@t wy3808@t)) (let ((wy3812@ls/false (wy3109@syntax-dispatch wy3810@t '(any any any)))) (if wy3812@ls/false (apply (lambda (wy3814@x wy3815@init wy3816@step) (list wy3814@x wy3815@init wy3816@step)) wy3812@ls/false) (let ((wy381a@t wy3810@t)) (let ((wy381c@ls/false (wy3109@syntax-dispatch wy381a@t '_))) (if wy381c@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid binding" wy37ec@stx)) wy381c@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy381a@t))))))))))))) (let ((wy37f0@t wy37ec@stx)) (let ((wy37f2@ls/false (wy3109@syntax-dispatch wy37f0@t '(_ each-any (any . each-any) . each-any)))) (if wy37f2@ls/false (apply (lambda (wy37f4@binding* wy37f5@test wy37f6@expr* wy37f7@command*) (let ((wy37fc@t (map wy37ef@bind wy37f4@binding*))) (let ((wy37fe@ls/false (wy3109@syntax-dispatch wy37fc@t '#(each (any any any))))) (if wy37fe@ls/false (apply (lambda (wy3800@x* wy3801@init* wy3802@step*) (if (wy2f0a@valid-bound-ids? wy3800@x*) (wy30bf@bless (list 'letrec (list (list 'loop (list 'lambda wy3800@x* (list 'if wy37f5@test (cons 'begin (cons '(if #f #f) wy37f6@expr*)) (cons 'begin (append wy37f7@command* (list (cons 'loop wy3802@step*)))))))) (cons 'loop wy3801@init*))) (wy31e9@syntax-violation '#f '"invalid bindings" wy37ec@stx))) wy37fe@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy37fc@t))))) wy37f2@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy37f0@t))))))) (set! wy4c03@wy30e5@do-macro wy30e5@do-macro) (set! wy30e7@let*-macro (lambda (wy381e@stx) (let ((wy3820@t wy381e@stx)) (let ((wy3822@ls/false (wy3109@syntax-dispatch wy3820@t '(_ #(each (any any)) any . each-any)))) (if (and wy3822@ls/false (apply (lambda (wy3824@lhs* wy3825@rhs* wy3826@b wy3827@b*) (for-all wy2f02@id? wy3824@lhs*)) wy3822@ls/false)) (apply (lambda (wy382c@lhs* wy382d@rhs* wy382e@b wy382f@b*) (wy30bf@bless (let wy3836@f ((wy3834@x* (map list wy382c@lhs* wy382d@rhs*))) (if (null? wy3834@x*) (cons 'let (cons '() (cons wy382e@b wy382f@b*))) (list 'let (list (car wy3834@x*)) (wy3836@f (cdr wy3834@x*))))))) wy3822@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3820@t)))))) (set! wy4c04@wy30e7@let*-macro wy30e7@let*-macro) (set! wy30e9@or-macro (lambda (wy3838@stx) (let ((wy383a@t wy3838@stx)) (let ((wy383c@ls/false (wy3109@syntax-dispatch wy383a@t '(_)))) (if wy383c@ls/false (apply (lambda () '#f) wy383c@ls/false) (let ((wy383e@t wy383a@t)) (let ((wy3840@ls/false (wy3109@syntax-dispatch wy383e@t '(_ any . each-any)))) (if wy3840@ls/false (apply (lambda (wy3842@e wy3843@e*) (wy30bf@bless (let wy384a@f ((wy3846@e wy3842@e) (wy3847@e* wy3843@e*)) (if (null? wy3847@e*) (list 'begin '#f wy3846@e) (list 'let (list (list 't wy3846@e)) (list 'if 't 't (wy384a@f (car wy3847@e*) (cdr wy3847@e*)))))))) wy3840@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy383e@t))))))))) (set! wy4c05@wy30e9@or-macro wy30e9@or-macro) (set! wy30eb@and-macro (lambda (wy384c@stx) (let ((wy384e@t wy384c@stx)) (let ((wy3850@ls/false (wy3109@syntax-dispatch wy384e@t '(_)))) (if wy3850@ls/false (apply (lambda () '#t) wy3850@ls/false) (let ((wy3852@t wy384e@t)) (let ((wy3854@ls/false (wy3109@syntax-dispatch wy3852@t '(_ any . each-any)))) (if wy3854@ls/false (apply (lambda (wy3856@e wy3857@e*) (wy30bf@bless (let wy385e@f ((wy385a@e wy3856@e) (wy385b@e* wy3857@e*)) (if (null? wy385b@e*) (list 'begin '#f wy385a@e) (cons 'if (cons wy385a@e (cons (wy385e@f (car wy385b@e*) (cdr wy385b@e*)) '(#f)))))))) wy3854@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3852@t))))))))) (set! wy4c06@wy30eb@and-macro wy30eb@and-macro) (set! wy30ed@cond-macro (lambda (wy3860@stx) (let ((wy3862@t wy3860@stx)) (let ((wy3864@ls/false (wy3109@syntax-dispatch wy3862@t '(_ any . each-any)))) (if wy3864@ls/false (apply (lambda (wy3866@cls wy3867@cls*) (wy30bf@bless (let wy386e@f ((wy386a@cls wy3866@cls) (wy386b@cls* wy3867@cls*)) (if (null? wy386b@cls*) (let ((wy3870@t wy386a@cls)) (let ((wy3872@ls/false (wy3109@syntax-dispatch wy3870@t '(#(scheme-id else) any . each-any)))) (if wy3872@ls/false (apply (lambda (wy3874@e wy3875@e*) (cons 'begin (cons wy3874@e wy3875@e*))) wy3872@ls/false) (let ((wy3878@t wy3870@t)) (let ((wy387a@ls/false (wy3109@syntax-dispatch wy3878@t '(any #(scheme-id =>) any)))) (if wy387a@ls/false (apply (lambda (wy387c@e wy387d@p) (list 'let (list (list 't wy387c@e)) (list 'if 't (cons wy387d@p '(t))))) wy387a@ls/false) (let ((wy3880@t wy3878@t)) (let ((wy3882@ls/false (wy3109@syntax-dispatch wy3880@t '(any)))) (if wy3882@ls/false (apply (lambda (wy3884@e) (cons 'or (cons wy3884@e '((if #f #f))))) wy3882@ls/false) (let ((wy3886@t wy3880@t)) (let ((wy3888@ls/false (wy3109@syntax-dispatch wy3886@t '(any . each-any)))) (if wy3888@ls/false (apply (lambda (wy388a@e wy388b@e*) (list 'if wy388a@e (cons 'begin wy388b@e*))) wy3888@ls/false) (let ((wy388e@t wy3886@t)) (let ((wy3890@ls/false (wy3109@syntax-dispatch wy388e@t '_))) (if wy3890@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid last clause" wy3860@stx)) wy3890@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy388e@t)))))))))))))))) (let ((wy3892@t wy386a@cls)) (let ((wy3894@ls/false (wy3109@syntax-dispatch wy3892@t '(#(scheme-id else) any . each-any)))) (if wy3894@ls/false (apply (lambda (wy3896@e wy3897@e*) (wy31e9@syntax-violation '#f '"incorrect position of keyword else" wy3860@stx)) wy3894@ls/false) (let ((wy389a@t wy3892@t)) (let ((wy389c@ls/false (wy3109@syntax-dispatch wy389a@t '(any #(scheme-id =>) any)))) (if wy389c@ls/false (apply (lambda (wy389e@e wy389f@p) (list 'let (list (list 't wy389e@e)) (list 'if 't (cons wy389f@p '(t)) (wy386e@f (car wy386b@cls*) (cdr wy386b@cls*))))) wy389c@ls/false) (let ((wy38a2@t wy389a@t)) (let ((wy38a4@ls/false (wy3109@syntax-dispatch wy38a2@t '(any)))) (if wy38a4@ls/false (apply (lambda (wy38a6@e) (list 'or wy38a6@e (wy386e@f (car wy386b@cls*) (cdr wy386b@cls*)))) wy38a4@ls/false) (let ((wy38a8@t wy38a2@t)) (let ((wy38aa@ls/false (wy3109@syntax-dispatch wy38a8@t '(any . each-any)))) (if wy38aa@ls/false (apply (lambda (wy38ac@e wy38ad@e*) (list 'if wy38ac@e (cons 'begin wy38ad@e*) (wy386e@f (car wy386b@cls*) (cdr wy386b@cls*)))) wy38aa@ls/false) (let ((wy38b0@t wy38a8@t)) (let ((wy38b2@ls/false (wy3109@syntax-dispatch wy38b0@t '_))) (if wy38b2@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid last clause" wy3860@stx)) wy38b2@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy38b0@t)))))))))))))))))))) wy3864@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3862@t)))))) (set! wy4c07@wy30ed@cond-macro wy30ed@cond-macro) (set! wy30ef@do-include (lambda (wy38b4@stx wy38b5@id wy38b6@filename) (let ((wy38ba@filename (wy2f16@stx->datum wy38b6@filename))) (begin (if (not (and (string? wy38ba@filename) (wy2f02@id? wy38b5@id))) (wy31e9@syntax-violation '#f '"invalid syntax" wy38b4@stx) (void)) (cons (wy30bf@bless 'begin) (with-input-from-file wy38ba@filename (lambda () (let wy38be@f ((wy38bc@ls '())) (let ((wy38c0@x (wy2a44@wy2914@read-annotated))) (if (eof-object? wy38c0@x) (reverse wy38bc@ls) (wy38be@f (cons (wy2ee2@datum->stx wy38b5@id wy38c0@x) wy38bc@ls)))))))))))) (set! wy4c08@wy30ef@do-include wy30ef@do-include) (set! wy30f1@include-macro (lambda (wy38c2@e) (let ((wy38c4@t wy38c2@e)) (let ((wy38c6@ls/false (wy3109@syntax-dispatch wy38c4@t '(any any)))) (if wy38c6@ls/false (apply (lambda (wy38c8@id wy38c9@filename) (wy30ef@do-include wy38c2@e wy38c8@id wy38c9@filename)) wy38c6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy38c4@t)))))) (set! wy4c09@wy30f1@include-macro wy30f1@include-macro) (set! wy30f3@include-into-macro (lambda (wy38cc@e) (let ((wy38ce@t wy38cc@e)) (let ((wy38d0@ls/false (wy3109@syntax-dispatch wy38ce@t '(_ any any)))) (if wy38d0@ls/false (apply (lambda (wy38d2@id wy38d3@filename) (wy30ef@do-include wy38cc@e wy38d2@id wy38d3@filename)) wy38d0@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy38ce@t)))))) (set! wy4c0a@wy30f3@include-into-macro wy30f3@include-into-macro) (set! wy30f5@syntax-rules-macro (lambda (wy38d6@e) (let ((wy38d8@t wy38d6@e)) (let ((wy38da@ls/false (wy3109@syntax-dispatch wy38d8@t '(_ each-any . #(each (any any)))))) (if wy38da@ls/false (apply (lambda (wy38dc@lits wy38dd@pat* wy38de@tmp*) (begin (wy310f@verify-literals wy38dc@lits wy38d6@e) (wy30bf@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons wy38dc@lits (map (lambda (wy38e2@pat wy38e3@tmp) (let ((wy38e6@t wy38e2@pat)) (let ((wy38e8@ls/false (wy3109@syntax-dispatch wy38e6@t '(_ . any)))) (if wy38e8@ls/false (apply (lambda (wy38ea@rest) (list (cons 'g wy38ea@rest) (list 'syntax wy38e3@tmp))) wy38e8@ls/false) (let ((wy38ec@t wy38e6@t)) (let ((wy38ee@ls/false (wy3109@syntax-dispatch wy38ec@t '_))) (if wy38ee@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid syntax-rules pattern" wy38d6@e wy38e2@pat)) wy38ee@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy38ec@t)))))))) wy38dd@pat* wy38de@tmp*)))))))) wy38da@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy38d8@t)))))) (set! wy4c0b@wy30f5@syntax-rules-macro wy30f5@syntax-rules-macro) (set! wy30f7@quasiquote-macro (letrec* ((wy38f1@datum (lambda (wy39f2@x) (list (wy3091@scheme-stx 'quote) (wy2eea@mkstx wy39f2@x wy2e86@top-mark* '() '())))) (wy390d@quasicons* (lambda (wy39ea@x wy39eb@y) (let wy39f0@f ((wy39ee@x wy39ea@x)) (if (null? wy39ee@x) wy39eb@y (wy390f@quasicons (car wy39ee@x) (wy39f0@f (cdr wy39ee@x))))))) (wy390f@quasicons (lambda (wy39c4@x wy39c5@y) (let ((wy39c8@t wy39c5@y)) (let ((wy39ca@ls/false (wy3109@syntax-dispatch wy39c8@t '(#(scheme-id quote) any)))) (if wy39ca@ls/false (apply (lambda (wy39cc@dy) (let ((wy39ce@t wy39c4@x)) (let ((wy39d0@ls/false (wy3109@syntax-dispatch wy39ce@t '(#(scheme-id quote) any)))) (if wy39d0@ls/false (apply (lambda (wy39d2@dx) (list (wy3091@scheme-stx 'quote) (cons wy39d2@dx wy39cc@dy))) wy39d0@ls/false) (let ((wy39d4@t wy39ce@t)) (let ((wy39d6@ls/false (wy3109@syntax-dispatch wy39d4@t '_))) (if wy39d6@ls/false (apply (lambda () (let ((wy39d8@t wy39cc@dy)) (let ((wy39da@ls/false (wy3109@syntax-dispatch wy39d8@t '()))) (if wy39da@ls/false (apply (lambda () (list (wy3091@scheme-stx 'list) wy39c4@x)) wy39da@ls/false) (let ((wy39dc@t wy39d8@t)) (let ((wy39de@ls/false (wy3109@syntax-dispatch wy39dc@t '_))) (if wy39de@ls/false (apply (lambda () (list (wy3091@scheme-stx 'cons) wy39c4@x wy39c5@y)) wy39de@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy39dc@t)))))))) wy39d6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy39d4@t)))))))) wy39ca@ls/false) (let ((wy39e0@t wy39c8@t)) (let ((wy39e2@ls/false (wy3109@syntax-dispatch wy39e0@t '(#(scheme-id list) . each-any)))) (if wy39e2@ls/false (apply (lambda (wy39e4@stuff) (cons* (wy3091@scheme-stx 'list) wy39c4@x wy39e4@stuff)) wy39e2@ls/false) (let ((wy39e6@t wy39e0@t)) (let ((wy39e8@ls/false (wy3109@syntax-dispatch wy39e6@t '_))) (if wy39e8@ls/false (apply (lambda () (list (wy3091@scheme-stx 'cons) wy39c4@x wy39c5@y)) wy39e8@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy39e6@t)))))))))))) (wy3911@quasiappend (lambda (wy39aa@x wy39ab@y) (let ((wy39ae@ls (let wy39b2@f ((wy39b0@x wy39aa@x)) (if (null? wy39b0@x) (let ((wy39b4@t wy39ab@y)) (let ((wy39b6@ls/false (wy3109@syntax-dispatch wy39b4@t '(#(scheme-id quote) ())))) (if wy39b6@ls/false (apply (lambda () '()) wy39b6@ls/false) (let ((wy39b8@t wy39b4@t)) (let ((wy39ba@ls/false (wy3109@syntax-dispatch wy39b8@t '_))) (if wy39ba@ls/false (apply (lambda () (list wy39ab@y)) wy39ba@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy39b8@t))))))) (let ((wy39bc@t (car wy39b0@x))) (let ((wy39be@ls/false (wy3109@syntax-dispatch wy39bc@t '(#(scheme-id quote) ())))) (if wy39be@ls/false (apply (lambda () (wy39b2@f (cdr wy39b0@x))) wy39be@ls/false) (let ((wy39c0@t wy39bc@t)) (let ((wy39c2@ls/false (wy3109@syntax-dispatch wy39c0@t '_))) (if wy39c2@ls/false (apply (lambda () (cons (car wy39b0@x) (wy39b2@f (cdr wy39b0@x)))) wy39c2@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy39c0@t))))))))))) (if (null? wy39ae@ls) (list (wy3091@scheme-stx 'quote) '()) (if (null? (cdr wy39ae@ls)) (car wy39ae@ls) (cons* (wy3091@scheme-stx 'append) wy39ae@ls)))))) (wy3913@quasivector (lambda (wy3978@x) (let ((wy397a@pat-x wy3978@x)) (let ((wy397c@t wy397a@pat-x)) (let ((wy397e@ls/false (wy3109@syntax-dispatch wy397c@t '(#(scheme-id quote) each-any)))) (if wy397e@ls/false (apply (lambda (wy3980@x*) (list (wy3091@scheme-stx 'quote) (list->vector wy3980@x*))) wy397e@ls/false) (let ((wy3982@t wy397c@t)) (let ((wy3984@ls/false (wy3109@syntax-dispatch wy3982@t '_))) (if wy3984@ls/false (apply (lambda () (let wy398c@f ((wy3986@x wy3978@x) (wy3987@k (lambda (wy398a@ls) (cons* (wy3091@scheme-stx 'vector) wy398a@ls)))) (let ((wy398e@t wy3986@x)) (let ((wy3990@ls/false (wy3109@syntax-dispatch wy398e@t '(#(scheme-id quote) each-any)))) (if wy3990@ls/false (apply (lambda (wy3992@x*) (wy3987@k (map (lambda (wy3994@x) (list (wy3091@scheme-stx 'quote) wy3994@x)) wy3992@x*))) wy3990@ls/false) (let ((wy3996@t wy398e@t)) (let ((wy3998@ls/false (wy3109@syntax-dispatch wy3996@t '(#(scheme-id list) . each-any)))) (if wy3998@ls/false (apply (lambda (wy399a@x*) (wy3987@k wy399a@x*)) wy3998@ls/false) (let ((wy399c@t wy3996@t)) (let ((wy399e@ls/false (wy3109@syntax-dispatch wy399c@t '(#(scheme-id cons) any any)))) (if wy399e@ls/false (apply (lambda (wy39a0@x wy39a1@y) (wy398c@f wy39a1@y (lambda (wy39a4@ls) (wy3987@k (cons wy39a0@x wy39a4@ls))))) wy399e@ls/false) (let ((wy39a6@t wy399c@t)) (let ((wy39a8@ls/false (wy3109@syntax-dispatch wy39a6@t '_))) (if wy39a8@ls/false (apply (lambda () (list (wy3091@scheme-stx 'list->vector) wy397a@pat-x)) wy39a8@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy39a6@t))))))))))))))) wy3984@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3982@t)))))))))) (wy3915@vquasi (lambda (wy3956@p wy3957@lev) (let ((wy395a@t wy3956@p)) (let ((wy395c@ls/false (wy3109@syntax-dispatch wy395a@t '(any . any)))) (if wy395c@ls/false (apply (lambda (wy395e@p wy395f@q) (let ((wy3962@t wy395e@p)) (let ((wy3964@ls/false (wy3109@syntax-dispatch wy3962@t '(#(scheme-id unquote) . each-any)))) (if wy3964@ls/false (apply (lambda (wy3966@p) (if (= wy3957@lev '0) (wy390d@quasicons* wy3966@p (wy3915@vquasi wy395f@q wy3957@lev)) (wy390f@quasicons (wy390f@quasicons (wy38f1@datum 'unquote) (wy3917@quasi wy3966@p (- wy3957@lev '1))) (wy3915@vquasi wy395f@q wy3957@lev)))) wy3964@ls/false) (let ((wy3968@t wy3962@t)) (let ((wy396a@ls/false (wy3109@syntax-dispatch wy3968@t '(#(scheme-id unquote-splicing) . each-any)))) (if wy396a@ls/false (apply (lambda (wy396c@p) (if (= wy3957@lev '0) (wy3911@quasiappend wy396c@p (wy3915@vquasi wy395f@q wy3957@lev)) (wy390f@quasicons (wy390f@quasicons (wy38f1@datum 'unquote-splicing) (wy3917@quasi wy396c@p (- wy3957@lev '1))) (wy3915@vquasi wy395f@q wy3957@lev)))) wy396a@ls/false) (let ((wy396e@t wy3968@t)) (let ((wy3970@ls/false (wy3109@syntax-dispatch wy396e@t 'any))) (if wy3970@ls/false (apply (lambda (wy3972@p) (wy390f@quasicons (wy3917@quasi wy3972@p wy3957@lev) (wy3915@vquasi wy395f@q wy3957@lev))) wy3970@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy396e@t))))))))))) wy395c@ls/false) (let ((wy3974@t wy395a@t)) (let ((wy3976@ls/false (wy3109@syntax-dispatch wy3974@t '()))) (if wy3976@ls/false (apply (lambda () (list (wy3091@scheme-stx 'quote) '())) wy3976@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3974@t))))))))) (wy3917@quasi (lambda (wy3920@p wy3921@lev) (let ((wy3924@t wy3920@p)) (let ((wy3926@ls/false (wy3109@syntax-dispatch wy3924@t '(#(scheme-id unquote) any)))) (if wy3926@ls/false (apply (lambda (wy3928@p) (if (= wy3921@lev '0) wy3928@p (wy390f@quasicons (wy38f1@datum 'unquote) (wy3917@quasi (list wy3928@p) (- wy3921@lev '1))))) wy3926@ls/false) (let ((wy392a@t wy3924@t)) (let ((wy392c@ls/false (wy3109@syntax-dispatch wy392a@t '((#(scheme-id unquote) . each-any) . any)))) (if wy392c@ls/false (apply (lambda (wy392e@p wy392f@q) (if (= wy3921@lev '0) (wy390d@quasicons* wy392e@p (wy3917@quasi wy392f@q wy3921@lev)) (wy390f@quasicons (wy390f@quasicons (wy38f1@datum 'unquote) (wy3917@quasi wy392e@p (- wy3921@lev '1))) (wy3917@quasi wy392f@q wy3921@lev)))) wy392c@ls/false) (let ((wy3932@t wy392a@t)) (let ((wy3934@ls/false (wy3109@syntax-dispatch wy3932@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if wy3934@ls/false (apply (lambda (wy3936@p wy3937@q) (if (= wy3921@lev '0) (wy3911@quasiappend wy3936@p (wy3917@quasi wy3937@q wy3921@lev)) (wy390f@quasicons (wy390f@quasicons (wy38f1@datum 'unquote-splicing) (wy3917@quasi wy3936@p (- wy3921@lev '1))) (wy3917@quasi wy3937@q wy3921@lev)))) wy3934@ls/false) (let ((wy393a@t wy3932@t)) (let ((wy393c@ls/false (wy3109@syntax-dispatch wy393a@t '(#(scheme-id quasiquote) any)))) (if wy393c@ls/false (apply (lambda (wy393e@p) (wy390f@quasicons (wy38f1@datum 'quasiquote) (wy3917@quasi (list wy393e@p) (+ wy3921@lev '1)))) wy393c@ls/false) (let ((wy3940@t wy393a@t)) (let ((wy3942@ls/false (wy3109@syntax-dispatch wy3940@t '(any . any)))) (if wy3942@ls/false (apply (lambda (wy3944@p wy3945@q) (wy390f@quasicons (wy3917@quasi wy3944@p wy3921@lev) (wy3917@quasi wy3945@q wy3921@lev))) wy3942@ls/false) (let ((wy3948@t wy3940@t)) (let ((wy394a@ls/false (wy3109@syntax-dispatch wy3948@t '#(vector each-any)))) (if (and wy394a@ls/false (apply (lambda (wy394c@x) (not (wy2ece@stx? wy394c@x))) wy394a@ls/false)) (apply (lambda (wy394e@x) (wy3913@quasivector (wy3915@vquasi wy394e@x wy3921@lev))) wy394a@ls/false) (let ((wy3950@t wy3948@t)) (let ((wy3952@ls/false (wy3109@syntax-dispatch wy3950@t 'any))) (if wy3952@ls/false (apply (lambda (wy3954@p) (list (wy3091@scheme-stx 'quote) wy3954@p)) wy3952@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3950@t))))))))))))))))))))))))) (lambda (wy3918@x) (let ((wy391a@t wy3918@x)) (let ((wy391c@ls/false (wy3109@syntax-dispatch wy391a@t '(_ any)))) (if wy391c@ls/false (apply (lambda (wy391e@e) (wy3917@quasi wy391e@e '0)) wy391c@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy391a@t))))))) (set! wy4c0c@wy30f7@quasiquote-macro wy30f7@quasiquote-macro) (set! wy30f9@quasisyntax-macro (letrec* ((wy39f5@quasi (lambda (wy3a10@p wy3a11@lev) (let ((wy3a14@t wy3a10@p)) (let ((wy3a16@ls/false (wy3109@syntax-dispatch wy3a14@t '(#(scheme-id unsyntax) any)))) (if wy3a16@ls/false (apply (lambda (wy3a18@p) (if (= wy3a11@lev '0) (let ((wy3a1a@g (gensym))) (values (list wy3a1a@g) (list wy3a18@p) wy3a1a@g)) (call-with-values (lambda () (wy39f5@quasi wy3a18@p (- wy3a11@lev '1))) (lambda (wy3a22@wy3a1d wy3a23@wy3a1f wy3a24@wy3a21) (let ((wy3a28@p wy3a24@wy3a21) (wy3a29@rhs* wy3a23@wy3a1f) (wy3a2a@lhs* wy3a22@wy3a1d)) (values wy3a2a@lhs* wy3a29@rhs* (list 'unsyntax wy3a28@p))))))) wy3a16@ls/false) (let ((wy3a2e@t wy3a14@t)) (let ((wy3a30@ls/false (wy3109@syntax-dispatch wy3a2e@t '#(scheme-id unsyntax)))) (if (and wy3a30@ls/false (apply (lambda () (= wy3a11@lev '0)) wy3a30@ls/false)) (apply (lambda () (wy31e9@syntax-violation '#f '"incorrect use of unsyntax" wy3a10@p)) wy3a30@ls/false) (let ((wy3a32@t wy3a2e@t)) (let ((wy3a34@ls/false (wy3109@syntax-dispatch wy3a32@t '((#(scheme-id unsyntax) . each-any) . any)))) (if wy3a34@ls/false (apply (lambda (wy3a36@p* wy3a37@q) (call-with-values (lambda () (wy39f5@quasi wy3a37@q wy3a11@lev)) (lambda (wy3a40@wy3a3b wy3a41@wy3a3d wy3a42@wy3a3f) (let ((wy3a46@q wy3a42@wy3a3f) (wy3a47@rhs* wy3a41@wy3a3d) (wy3a48@lhs* wy3a40@wy3a3b)) (if (= wy3a11@lev '0) (let ((wy3a4c@g* (map (lambda (wy3a4e@x) (gensym)) wy3a36@p*))) (values (append wy3a4c@g* wy3a48@lhs*) (append wy3a36@p* wy3a47@rhs*) (append wy3a4c@g* wy3a46@q))) (call-with-values (lambda () (wy39f5@quasi wy3a36@p* (- wy3a11@lev '1))) (lambda (wy3a56@wy3a51 wy3a57@wy3a53 wy3a58@wy3a55) (let ((wy3a5c@p* wy3a58@wy3a55) (wy3a5d@rhs2* wy3a57@wy3a53) (wy3a5e@lhs2* wy3a56@wy3a51)) (values (append wy3a5e@lhs2* wy3a48@lhs*) (append wy3a5d@rhs2* wy3a47@rhs*) (cons (cons 'unsyntax wy3a5c@p*) wy3a46@q)))))))))) wy3a34@ls/false) (let ((wy3a62@t wy3a32@t)) (let ((wy3a64@ls/false (wy3109@syntax-dispatch wy3a62@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if wy3a64@ls/false (apply (lambda (wy3a66@p* wy3a67@q) (call-with-values (lambda () (wy39f5@quasi wy3a67@q wy3a11@lev)) (lambda (wy3a70@wy3a6b wy3a71@wy3a6d wy3a72@wy3a6f) (let ((wy3a76@q wy3a72@wy3a6f) (wy3a77@rhs* wy3a71@wy3a6d) (wy3a78@lhs* wy3a70@wy3a6b)) (if (= wy3a11@lev '0) (let ((wy3a7c@g* (map (lambda (wy3a7e@x) (gensym)) wy3a66@p*))) (values (append (map (lambda (wy3a80@g) (cons wy3a80@g '(...))) wy3a7c@g*) wy3a78@lhs*) (append wy3a66@p* wy3a77@rhs*) (append (apply append (map (lambda (wy3a82@g) (cons wy3a82@g '(...))) wy3a7c@g*)) wy3a76@q))) (call-with-values (lambda () (wy39f5@quasi wy3a66@p* (- wy3a11@lev '1))) (lambda (wy3a8a@wy3a85 wy3a8b@wy3a87 wy3a8c@wy3a89) (let ((wy3a90@p* wy3a8c@wy3a89) (wy3a91@rhs2* wy3a8b@wy3a87) (wy3a92@lhs2* wy3a8a@wy3a85)) (values (append wy3a92@lhs2* wy3a78@lhs*) (append wy3a91@rhs2* wy3a77@rhs*) (cons (cons 'unsyntax-splicing wy3a90@p*) wy3a76@q)))))))))) wy3a64@ls/false) (let ((wy3a96@t wy3a62@t)) (let ((wy3a98@ls/false (wy3109@syntax-dispatch wy3a96@t '#(scheme-id unsyntax-splicing)))) (if (and wy3a98@ls/false (apply (lambda () (= wy3a11@lev '0)) wy3a98@ls/false)) (apply (lambda () (wy31e9@syntax-violation '#f '"incorrect use of unsyntax-splicing" wy3a10@p)) wy3a98@ls/false) (let ((wy3a9a@t wy3a96@t)) (let ((wy3a9c@ls/false (wy3109@syntax-dispatch wy3a9a@t '(#(scheme-id quasisyntax) any)))) (if wy3a9c@ls/false (apply (lambda (wy3a9e@p) (call-with-values (lambda () (wy39f5@quasi wy3a9e@p (+ wy3a11@lev '1))) (lambda (wy3aa6@wy3aa1 wy3aa7@wy3aa3 wy3aa8@wy3aa5) (let ((wy3aac@p wy3aa8@wy3aa5) (wy3aad@rhs* wy3aa7@wy3aa3) (wy3aae@lhs* wy3aa6@wy3aa1)) (values wy3aae@lhs* wy3aad@rhs* (list 'quasisyntax wy3aac@p)))))) wy3a9c@ls/false) (let ((wy3ab2@t wy3a9a@t)) (let ((wy3ab4@ls/false (wy3109@syntax-dispatch wy3ab2@t '(any . any)))) (if wy3ab4@ls/false (apply (lambda (wy3ab6@p wy3ab7@q) (call-with-values (lambda () (wy39f5@quasi wy3ab6@p wy3a11@lev)) (lambda (wy3ac6@wy3abb wy3ac7@wy3abd wy3ac8@wy3abf) (call-with-values (lambda () (wy39f5@quasi wy3ab7@q wy3a11@lev)) (lambda (wy3acc@wy3ac1 wy3acd@wy3ac3 wy3ace@wy3ac5) (let ((wy3ad2@q wy3ace@wy3ac5) (wy3ad3@rhs2* wy3acd@wy3ac3) (wy3ad4@lhs2* wy3acc@wy3ac1) (wy3ad5@p wy3ac8@wy3abf) (wy3ad6@rhs* wy3ac7@wy3abd) (wy3ad7@lhs* wy3ac6@wy3abb)) (values (append wy3ad4@lhs2* wy3ad7@lhs*) (append wy3ad3@rhs2* wy3ad6@rhs*) (cons wy3ad5@p wy3ad2@q)))))))) wy3ab4@ls/false) (let ((wy3ade@t wy3ab2@t)) (let ((wy3ae0@ls/false (wy3109@syntax-dispatch wy3ade@t '#(vector each-any)))) (if wy3ae0@ls/false (apply (lambda (wy3ae2@x*) (call-with-values (lambda () (wy39f5@quasi wy3ae2@x* wy3a11@lev)) (lambda (wy3aea@wy3ae5 wy3aeb@wy3ae7 wy3aec@wy3ae9) (let ((wy3af0@x* wy3aec@wy3ae9) (wy3af1@rhs* wy3aeb@wy3ae7) (wy3af2@lhs* wy3aea@wy3ae5)) (values wy3af2@lhs* wy3af1@rhs* (list->vector wy3af0@x*)))))) wy3ae0@ls/false) (let ((wy3af6@t wy3ade@t)) (let ((wy3af8@ls/false (wy3109@syntax-dispatch wy3af6@t '_))) (if wy3af8@ls/false (apply (lambda () (values '() '() wy3a10@p)) wy3af8@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3af6@t))))))))))))))))))))))))))))))) (lambda (wy39f6@x) (let ((wy39f8@t wy39f6@x)) (let ((wy39fa@ls/false (wy3109@syntax-dispatch wy39f8@t '(_ any)))) (if wy39fa@ls/false (apply (lambda (wy39fc@e) (call-with-values (lambda () (wy39f5@quasi wy39fc@e '0)) (lambda (wy3a04@wy39ff wy3a05@wy3a01 wy3a06@wy3a03) (let ((wy3a0a@v wy3a06@wy3a03) (wy3a0b@rhs* wy3a05@wy3a01) (wy3a0c@lhs* wy3a04@wy39ff)) (wy30bf@bless (list 'syntax-case (cons 'list wy3a0b@rhs*) '() (list wy3a0c@lhs* (list 'syntax wy3a0a@v)))))))) wy39fa@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy39f8@t))))))) (set! wy4c0d@wy30f9@quasisyntax-macro wy30f9@quasisyntax-macro) (set! wy30fb@define-struct-macro (lambda (wy3afa@stx) (wy31e9@syntax-violation '#f '"define-struct not supported" wy3afa@stx))) (set! wy4c0e@wy30fb@define-struct-macro wy30fb@define-struct-macro) (set! wy30fd@define-record-type-macro (lambda (wy3afc@x) (letrec* ((wy3aff@id (lambda (wy3cf2@ctxt . wy3cf4@str*) (wy31ed@datum->syntax wy3cf2@ctxt (string->symbol (apply string-append (map (lambda (wy3cf6@x) (if (symbol? wy3cf6@x) (symbol->string wy3cf6@x) (if (string? wy3cf6@x) wy3cf6@x (assertion-violation 'define-record-type '"BUG")))) wy3cf4@str*)))))) (wy3b01@get-record-name (lambda (wy3ce0@spec) (let ((wy3ce2@t wy3ce0@spec)) (let ((wy3ce4@ls/false (wy3109@syntax-dispatch wy3ce2@t '(any any any)))) (if wy3ce4@ls/false (apply (lambda (wy3ce6@foo wy3ce7@make-foo wy3ce8@foo?) wy3ce6@foo) wy3ce4@ls/false) (let ((wy3cec@t wy3ce2@t)) (let ((wy3cee@ls/false (wy3109@syntax-dispatch wy3cec@t 'any))) (if wy3cee@ls/false (apply (lambda (wy3cf0@foo) wy3cf0@foo) wy3cee@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3cec@t))))))))) (wy3b03@get-record-constructor-name (lambda (wy3ccc@spec) (let ((wy3cce@t wy3ccc@spec)) (let ((wy3cd0@ls/false (wy3109@syntax-dispatch wy3cce@t '(any any any)))) (if wy3cd0@ls/false (apply (lambda (wy3cd2@foo wy3cd3@make-foo wy3cd4@foo?) wy3cd3@make-foo) wy3cd0@ls/false) (let ((wy3cd8@t wy3cce@t)) (let ((wy3cda@ls/false (wy3109@syntax-dispatch wy3cd8@t 'any))) (if (and wy3cda@ls/false (apply (lambda (wy3cdc@foo) (wy2f02@id? wy3cdc@foo)) wy3cda@ls/false)) (apply (lambda (wy3cde@foo) (wy3aff@id wy3cde@foo '"make-" (wy2f16@stx->datum wy3cde@foo))) wy3cda@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3cd8@t))))))))) (wy3b05@get-record-predicate-name (lambda (wy3cb8@spec) (let ((wy3cba@t wy3cb8@spec)) (let ((wy3cbc@ls/false (wy3109@syntax-dispatch wy3cba@t '(any any any)))) (if wy3cbc@ls/false (apply (lambda (wy3cbe@foo wy3cbf@make-foo wy3cc0@foo?) wy3cc0@foo?) wy3cbc@ls/false) (let ((wy3cc4@t wy3cba@t)) (let ((wy3cc6@ls/false (wy3109@syntax-dispatch wy3cc4@t 'any))) (if (and wy3cc6@ls/false (apply (lambda (wy3cc8@foo) (wy2f02@id? wy3cc8@foo)) wy3cc6@ls/false)) (apply (lambda (wy3cca@foo) (wy3aff@id wy3cca@foo (wy2f16@stx->datum wy3cca@foo) '"?")) wy3cc6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3cc4@t))))))))) (wy3b07@get-clause (lambda (wy3ca6@id wy3ca7@ls) (let ((wy3caa@t wy3ca7@ls)) (let ((wy3cac@ls/false (wy3109@syntax-dispatch wy3caa@t '()))) (if wy3cac@ls/false (apply (lambda () '#f) wy3cac@ls/false) (let ((wy3cae@t wy3caa@t)) (let ((wy3cb0@ls/false (wy3109@syntax-dispatch wy3cae@t '((any . any) . any)))) (if wy3cb0@ls/false (apply (lambda (wy3cb2@x wy3cb3@rest wy3cb4@ls) (if (wy2f08@free-id=? (wy30bf@bless wy3ca6@id) wy3cb2@x) (cons wy3cb2@x wy3cb3@rest) (wy3b07@get-clause wy3ca6@id wy3cb4@ls))) wy3cb0@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3cae@t))))))))) (wy3b09@foo-rtd-code (lambda (wy3c54@name wy3c55@clause* wy3c56@parent-rtd-code) (letrec* ((wy3c5b@convert-field-spec* (lambda (wy3c8c@ls) (list->vector (map (lambda (wy3c8e@x) (let ((wy3c90@t wy3c8e@x)) (let ((wy3c92@ls/false (wy3109@syntax-dispatch wy3c90@t '(#(scheme-id mutable) any . any)))) (if wy3c92@ls/false (apply (lambda (wy3c94@name wy3c95@rest) (list 'mutable wy3c94@name)) wy3c92@ls/false) (let ((wy3c98@t wy3c90@t)) (let ((wy3c9a@ls/false (wy3109@syntax-dispatch wy3c98@t '(#(scheme-id immutable) any . any)))) (if wy3c9a@ls/false (apply (lambda (wy3c9c@name wy3c9d@rest) (list 'immutable wy3c9c@name)) wy3c9a@ls/false) (let ((wy3ca0@t wy3c98@t)) (let ((wy3ca2@ls/false (wy3109@syntax-dispatch wy3ca0@t 'any))) (if wy3ca2@ls/false (apply (lambda (wy3ca4@name) (list 'immutable wy3ca4@name)) wy3ca2@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3ca0@t))))))))))) wy3c8c@ls))))) (let ((wy3c5c@uid-code (let ((wy3c64@t (wy3b07@get-clause 'nongenerative wy3c55@clause*))) (let ((wy3c66@ls/false (wy3109@syntax-dispatch wy3c64@t '(_)))) (if wy3c66@ls/false (apply (lambda () (list 'quote (gensym))) wy3c66@ls/false) (let ((wy3c68@t wy3c64@t)) (let ((wy3c6a@ls/false (wy3109@syntax-dispatch wy3c68@t '(_ any)))) (if wy3c6a@ls/false (apply (lambda (wy3c6c@uid) (list 'quote wy3c6c@uid)) wy3c6a@ls/false) (let ((wy3c6e@t wy3c68@t)) (let ((wy3c70@ls/false (wy3109@syntax-dispatch wy3c6e@t '_))) (if wy3c70@ls/false (apply (lambda () '#f) wy3c70@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c6e@t))))))))))) (wy3c5d@sealed? (let ((wy3c72@t (wy3b07@get-clause 'sealed wy3c55@clause*))) (let ((wy3c74@ls/false (wy3109@syntax-dispatch wy3c72@t '(_ #(atom #t))))) (if wy3c74@ls/false (apply (lambda () '#t) wy3c74@ls/false) (let ((wy3c76@t wy3c72@t)) (let ((wy3c78@ls/false (wy3109@syntax-dispatch wy3c76@t '_))) (if wy3c78@ls/false (apply (lambda () '#f) wy3c78@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c76@t)))))))) (wy3c5e@opaque? (let ((wy3c7a@t (wy3b07@get-clause 'opaque wy3c55@clause*))) (let ((wy3c7c@ls/false (wy3109@syntax-dispatch wy3c7a@t '(_ #(atom #t))))) (if wy3c7c@ls/false (apply (lambda () '#t) wy3c7c@ls/false) (let ((wy3c7e@t wy3c7a@t)) (let ((wy3c80@ls/false (wy3109@syntax-dispatch wy3c7e@t '_))) (if wy3c80@ls/false (apply (lambda () '#f) wy3c80@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c7e@t)))))))) (wy3c5f@fields (let ((wy3c82@t (wy3b07@get-clause 'fields wy3c55@clause*))) (let ((wy3c84@ls/false (wy3109@syntax-dispatch wy3c82@t '(_ . each-any)))) (if wy3c84@ls/false (apply (lambda (wy3c86@field-spec*) (list 'quote (wy3c5b@convert-field-spec* wy3c86@field-spec*))) wy3c84@ls/false) (let ((wy3c88@t wy3c82@t)) (let ((wy3c8a@ls/false (wy3109@syntax-dispatch wy3c88@t '_))) (if wy3c8a@ls/false (apply (lambda () ''#()) wy3c8a@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c88@t))))))))) (wy30bf@bless (list 'make-record-type-descriptor (list 'quote wy3c54@name) wy3c56@parent-rtd-code wy3c5c@uid-code wy3c5d@sealed? wy3c5e@opaque? wy3c5f@fields)))))) (wy3b0b@parent-rtd-code (lambda (wy3c3c@clause*) (let ((wy3c3e@t (wy3b07@get-clause 'parent wy3c3c@clause*))) (let ((wy3c40@ls/false (wy3109@syntax-dispatch wy3c3e@t '(_ any)))) (if wy3c40@ls/false (apply (lambda (wy3c42@name) (list 'record-type-descriptor wy3c42@name)) wy3c40@ls/false) (let ((wy3c44@t wy3c3e@t)) (let ((wy3c46@ls/false (wy3109@syntax-dispatch wy3c44@t '#(atom #f)))) (if wy3c46@ls/false (apply (lambda () (let ((wy3c48@t (wy3b07@get-clause 'parent-rtd wy3c3c@clause*))) (let ((wy3c4a@ls/false (wy3109@syntax-dispatch wy3c48@t '(_ any any)))) (if wy3c4a@ls/false (apply (lambda (wy3c4c@rtd wy3c4d@rcd) wy3c4c@rtd) wy3c4a@ls/false) (let ((wy3c50@t wy3c48@t)) (let ((wy3c52@ls/false (wy3109@syntax-dispatch wy3c50@t '#(atom #f)))) (if wy3c52@ls/false (apply (lambda () '#f) wy3c52@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c50@t)))))))) wy3c46@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c44@t))))))))) (wy3b0d@parent-rcd-code (lambda (wy3c24@clause*) (let ((wy3c26@t (wy3b07@get-clause 'parent wy3c24@clause*))) (let ((wy3c28@ls/false (wy3109@syntax-dispatch wy3c26@t '(_ any)))) (if wy3c28@ls/false (apply (lambda (wy3c2a@name) (list 'record-constructor-descriptor wy3c2a@name)) wy3c28@ls/false) (let ((wy3c2c@t wy3c26@t)) (let ((wy3c2e@ls/false (wy3109@syntax-dispatch wy3c2c@t '#(atom #f)))) (if wy3c2e@ls/false (apply (lambda () (let ((wy3c30@t (wy3b07@get-clause 'parent-rtd wy3c24@clause*))) (let ((wy3c32@ls/false (wy3109@syntax-dispatch wy3c30@t '(_ any any)))) (if wy3c32@ls/false (apply (lambda (wy3c34@rtd wy3c35@rcd) wy3c35@rcd) wy3c32@ls/false) (let ((wy3c38@t wy3c30@t)) (let ((wy3c3a@ls/false (wy3109@syntax-dispatch wy3c38@t '#(atom #f)))) (if wy3c3a@ls/false (apply (lambda () '#f) wy3c3a@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c38@t)))))))) wy3c2e@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c2c@t))))))))) (wy3b0f@foo-rcd-code (lambda (wy3c1c@clause* wy3c1d@foo-rtd wy3c1e@protocol wy3c1f@parent-rcd-code) (list 'make-record-constructor-descriptor wy3c1d@foo-rtd wy3c1f@parent-rcd-code wy3c1e@protocol))) (wy3b11@get-protocol-code (lambda (wy3c10@clause*) (let ((wy3c12@t (wy3b07@get-clause 'protocol wy3c10@clause*))) (let ((wy3c14@ls/false (wy3109@syntax-dispatch wy3c12@t '(_ any)))) (if wy3c14@ls/false (apply (lambda (wy3c16@expr) wy3c16@expr) wy3c14@ls/false) (let ((wy3c18@t wy3c12@t)) (let ((wy3c1a@ls/false (wy3109@syntax-dispatch wy3c18@t '_))) (if wy3c1a@ls/false (apply (lambda () '#f) wy3c1a@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c18@t))))))))) (wy3b13@get-fields (lambda (wy3bfe@clause*) (let ((wy3c00@t wy3bfe@clause*)) (let ((wy3c02@ls/false (wy3109@syntax-dispatch wy3c00@t '()))) (if wy3c02@ls/false (apply (lambda () '()) wy3c02@ls/false) (let ((wy3c04@t wy3c00@t)) (let ((wy3c06@ls/false (wy3109@syntax-dispatch wy3c04@t '((#(scheme-id fields) . each-any) . _)))) (if wy3c06@ls/false (apply (lambda (wy3c08@f*) wy3c08@f*) wy3c06@ls/false) (let ((wy3c0a@t wy3c04@t)) (let ((wy3c0c@ls/false (wy3109@syntax-dispatch wy3c0a@t '(_ . any)))) (if wy3c0c@ls/false (apply (lambda (wy3c0e@rest) (wy3b13@get-fields wy3c0e@rest)) wy3c0c@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3c0a@t)))))))))))) (wy3b15@get-mutator-indices (lambda (wy3be6@fields) (let wy3bec@f ((wy3be8@fields wy3be6@fields) (wy3be9@i '0)) (let ((wy3bee@t wy3be8@fields)) (let ((wy3bf0@ls/false (wy3109@syntax-dispatch wy3bee@t '()))) (if wy3bf0@ls/false (apply (lambda () '()) wy3bf0@ls/false) (let ((wy3bf2@t wy3bee@t)) (let ((wy3bf4@ls/false (wy3109@syntax-dispatch wy3bf2@t '((#(scheme-id mutable) . _) . any)))) (if wy3bf4@ls/false (apply (lambda (wy3bf6@rest) (cons wy3be9@i (wy3bec@f wy3bf6@rest (+ wy3be9@i '1)))) wy3bf4@ls/false) (let ((wy3bf8@t wy3bf2@t)) (let ((wy3bfa@ls/false (wy3109@syntax-dispatch wy3bf8@t '(_ . any)))) (if wy3bfa@ls/false (apply (lambda (wy3bfc@rest) (wy3bec@f wy3bfc@rest (+ wy3be9@i '1))) wy3bfa@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3bf8@t))))))))))))) (wy3b17@get-mutators (lambda (wy3bbc@foo wy3bbd@fields) (letrec* ((wy3bc1@gen-name (lambda (wy3be4@x) (wy31ed@datum->syntax wy3bbc@foo (string->symbol (string-append (symbol->string (wy31ef@syntax->datum wy3bbc@foo)) '"-" (symbol->string (wy31ef@syntax->datum wy3be4@x)) '"-set!")))))) (let wy3bc4@f ((wy3bc2@fields wy3bbd@fields)) (let ((wy3bc6@t wy3bc2@fields)) (let ((wy3bc8@ls/false (wy3109@syntax-dispatch wy3bc6@t '()))) (if wy3bc8@ls/false (apply (lambda () '()) wy3bc8@ls/false) (let ((wy3bca@t wy3bc6@t)) (let ((wy3bcc@ls/false (wy3109@syntax-dispatch wy3bca@t '((#(scheme-id mutable) any any any) . any)))) (if wy3bcc@ls/false (apply (lambda (wy3bce@name wy3bcf@accessor wy3bd0@mutator wy3bd1@rest) (cons wy3bd0@mutator (wy3bc4@f wy3bd1@rest))) wy3bcc@ls/false) (let ((wy3bd6@t wy3bca@t)) (let ((wy3bd8@ls/false (wy3109@syntax-dispatch wy3bd6@t '((#(scheme-id mutable) any) . any)))) (if wy3bd8@ls/false (apply (lambda (wy3bda@name wy3bdb@rest) (cons (wy3bc1@gen-name wy3bda@name) (wy3bc4@f wy3bdb@rest))) wy3bd8@ls/false) (let ((wy3bde@t wy3bd6@t)) (let ((wy3be0@ls/false (wy3109@syntax-dispatch wy3bde@t '(_ . any)))) (if wy3be0@ls/false (apply (lambda (wy3be2@rest) (wy3bc4@f wy3be2@rest)) wy3be0@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3bde@t))))))))))))))))) (wy3b19@get-accessors (lambda (wy3b78@foo wy3b79@fields) (letrec* ((wy3b7d@gen-name (lambda (wy3bba@x) (wy31ed@datum->syntax wy3b78@foo (string->symbol (string-append (symbol->string (wy31ef@syntax->datum wy3b78@foo)) '"-" (symbol->string (wy31ef@syntax->datum wy3bba@x)))))))) (map (lambda (wy3b7e@field) (let ((wy3b80@t wy3b7e@field)) (let ((wy3b82@ls/false (wy3109@syntax-dispatch wy3b80@t '(#(scheme-id mutable) any any any)))) (if (and wy3b82@ls/false (apply (lambda (wy3b84@name wy3b85@accessor wy3b86@mutator) (wy2f02@id? wy3b85@accessor)) wy3b82@ls/false)) (apply (lambda (wy3b8a@name wy3b8b@accessor wy3b8c@mutator) wy3b8b@accessor) wy3b82@ls/false) (let ((wy3b90@t wy3b80@t)) (let ((wy3b92@ls/false (wy3109@syntax-dispatch wy3b90@t '(#(scheme-id immutable) any any)))) (if (and wy3b92@ls/false (apply (lambda (wy3b94@name wy3b95@accessor) (wy2f02@id? wy3b95@accessor)) wy3b92@ls/false)) (apply (lambda (wy3b98@name wy3b99@accessor) wy3b99@accessor) wy3b92@ls/false) (let ((wy3b9c@t wy3b90@t)) (let ((wy3b9e@ls/false (wy3109@syntax-dispatch wy3b9c@t '(#(scheme-id mutable) any)))) (if (and wy3b9e@ls/false (apply (lambda (wy3ba0@name) (wy2f02@id? wy3ba0@name)) wy3b9e@ls/false)) (apply (lambda (wy3ba2@name) (wy3b7d@gen-name wy3ba2@name)) wy3b9e@ls/false) (let ((wy3ba4@t wy3b9c@t)) (let ((wy3ba6@ls/false (wy3109@syntax-dispatch wy3ba4@t '(#(scheme-id immutable) any)))) (if (and wy3ba6@ls/false (apply (lambda (wy3ba8@name) (wy2f02@id? wy3ba8@name)) wy3ba6@ls/false)) (apply (lambda (wy3baa@name) (wy3b7d@gen-name wy3baa@name)) wy3ba6@ls/false) (let ((wy3bac@t wy3ba4@t)) (let ((wy3bae@ls/false (wy3109@syntax-dispatch wy3bac@t 'any))) (if (and wy3bae@ls/false (apply (lambda (wy3bb0@name) (wy2f02@id? wy3bb0@name)) wy3bae@ls/false)) (apply (lambda (wy3bb2@name) (wy3b7d@gen-name wy3bb2@name)) wy3bae@ls/false) (let ((wy3bb4@t wy3bac@t)) (let ((wy3bb6@ls/false (wy3109@syntax-dispatch wy3bb4@t 'any))) (if wy3bb6@ls/false (apply (lambda (wy3bb8@others) (wy31e9@syntax-violation '#f '"invalid field spec" wy3b7e@field)) wy3bb6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3bb4@t)))))))))))))))))))) wy3b79@fields)))) (wy3b1b@enumerate (lambda (wy3b70@ls) (let wy3b76@f ((wy3b72@ls wy3b70@ls) (wy3b73@i '0)) (if (null? wy3b72@ls) '() (cons wy3b73@i (wy3b76@f (cdr wy3b72@ls) (+ wy3b73@i '1))))))) (wy3b1d@do-define-record (lambda (wy3b48@namespec wy3b49@clause*) (let ((wy3b4c@foo (wy3b01@get-record-name wy3b48@namespec))) (let ((wy3b4e@foo-rtd (gensym))) (let ((wy3b50@foo-rcd (gensym))) (let ((wy3b52@protocol (gensym))) (let ((wy3b54@make-foo (wy3b03@get-record-constructor-name wy3b48@namespec))) (let ((wy3b56@fields (wy3b13@get-fields wy3b49@clause*))) (let ((wy3b58@idx* (wy3b1b@enumerate wy3b56@fields))) (let ((wy3b5a@foo-x* (wy3b19@get-accessors wy3b4c@foo wy3b56@fields))) (let ((wy3b5c@set-foo-x!* (wy3b17@get-mutators wy3b4c@foo wy3b56@fields))) (let ((wy3b5e@set-foo-idx* (wy3b15@get-mutator-indices wy3b56@fields))) (let ((wy3b60@foo? (wy3b05@get-record-predicate-name wy3b48@namespec))) (let ((wy3b62@foo-rtd-code (wy3b09@foo-rtd-code wy3b4c@foo wy3b49@clause* (wy3b0b@parent-rtd-code wy3b49@clause*)))) (let ((wy3b64@foo-rcd-code (wy3b0f@foo-rcd-code wy3b49@clause* wy3b4e@foo-rtd wy3b52@protocol (wy3b0d@parent-rcd-code wy3b49@clause*)))) (let ((wy3b66@protocol-code (wy3b11@get-protocol-code wy3b49@clause*))) (wy30bf@bless (cons 'begin (cons (list 'define wy3b4e@foo-rtd wy3b62@foo-rtd-code) (cons (list 'define wy3b52@protocol wy3b66@protocol-code) (cons (list 'define wy3b50@foo-rcd wy3b64@foo-rcd-code) (cons (list 'define-syntax wy3b4c@foo (list 'list ''$rtd (list 'syntax wy3b4e@foo-rtd) (list 'syntax wy3b50@foo-rcd))) (cons (list 'define wy3b60@foo? (list 'record-predicate wy3b4e@foo-rtd)) (cons (list 'define wy3b54@make-foo (list 'record-constructor wy3b50@foo-rcd)) (append (map (lambda (wy3b68@foo-x wy3b69@idx) (list 'define wy3b68@foo-x (list 'record-accessor wy3b4e@foo-rtd wy3b69@idx))) wy3b5a@foo-x* wy3b58@idx*) (map (lambda (wy3b6c@set-foo-x! wy3b6d@idx) (list 'define wy3b6c@set-foo-x! (list 'record-mutator wy3b4e@foo-rtd wy3b6d@idx))) wy3b5c@set-foo-x!* wy3b5e@set-foo-idx*)))))))))))))))))))))))))) (wy3b1f@verify-clauses (lambda (wy3b28@x wy3b29@cls*) (letrec* ((wy3b2d@valid-kwds (map wy30bf@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (wy3b2f@free-id-member? (lambda (wy3b44@x wy3b45@ls) (and (pair? wy3b45@ls) (or (wy2f08@free-id=? wy3b44@x (car wy3b45@ls)) (wy3b2f@free-id-member? wy3b44@x (cdr wy3b45@ls))))))) (let wy3b34@f ((wy3b30@cls* wy3b29@cls*) (wy3b31@seen* '())) (if (not (null? wy3b30@cls*)) (let ((wy3b36@t (car wy3b30@cls*))) (let ((wy3b38@ls/false (wy3109@syntax-dispatch wy3b36@t '(any . any)))) (if wy3b38@ls/false (apply (lambda (wy3b3a@kwd wy3b3b@rest) (if (or (not (wy2f02@id? wy3b3a@kwd)) (not (wy3b2f@free-id-member? wy3b3a@kwd wy3b2d@valid-kwds))) (wy31e9@syntax-violation '#f '"not a valid define-record-type keyword" wy3b3a@kwd) (if (wy2f0e@bound-id-member? wy3b3a@kwd wy3b31@seen*) (wy31e9@syntax-violation '#f '"duplicate use of keyword " wy3b28@x wy3b3a@kwd) (wy3b34@f (cdr wy3b30@cls*) (cons wy3b3a@kwd wy3b31@seen*))))) wy3b38@ls/false) (let ((wy3b3e@t wy3b36@t)) (let ((wy3b40@ls/false (wy3109@syntax-dispatch wy3b3e@t 'any))) (if wy3b40@ls/false (apply (lambda (wy3b42@cls) (wy31e9@syntax-violation '#f '"malformed define-record-type clause" wy3b42@cls)) wy3b40@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3b3e@t))))))) (void))))))) (let ((wy3b20@t wy3afc@x)) (let ((wy3b22@ls/false (wy3109@syntax-dispatch wy3b20@t '(_ any . each-any)))) (if wy3b22@ls/false (apply (lambda (wy3b24@namespec wy3b25@clause*) (begin (wy3b1f@verify-clauses wy3afc@x wy3b25@clause*) (wy3b1d@do-define-record wy3b24@namespec wy3b25@clause*))) wy3b22@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3b20@t))))))) (set! wy4c0f@wy30fd@define-record-type-macro wy30fd@define-record-type-macro) (set! wy30ff@define-condition-type-macro (lambda (wy3cf8@x) (letrec* ((wy3cfb@mkname (lambda (wy3d28@name wy3d29@suffix) (wy31ed@datum->syntax wy3d28@name (string->symbol (string-append (symbol->string (wy31ef@syntax->datum wy3d28@name)) wy3d29@suffix)))))) (let ((wy3cfc@t wy3cf8@x)) (let ((wy3cfe@ls/false (wy3109@syntax-dispatch wy3cfc@t '(any any any any any . #(each (any any)))))) (if (and wy3cfe@ls/false (apply (lambda (wy3d00@ctxt wy3d01@name wy3d02@super wy3d03@constructor wy3d04@predicate wy3d05@field* wy3d06@accessor*) (and (wy2f02@id? wy3d01@name) (wy2f02@id? wy3d02@super) (wy2f02@id? wy3d03@constructor) (wy2f02@id? wy3d04@predicate) (for-all wy2f02@id? wy3d05@field*) (for-all wy2f02@id? wy3d06@accessor*))) wy3cfe@ls/false)) (apply (lambda (wy3d0e@ctxt wy3d0f@name wy3d10@super wy3d11@constructor wy3d12@predicate wy3d13@field* wy3d14@accessor*) (let ((wy3d1c@aux-accessor* (map (lambda (wy3d1e@x) (gensym)) wy3d14@accessor*))) (wy30bf@bless (cons 'begin (cons (cons 'define-record-type (cons (list wy3d0f@name wy3d11@constructor (gensym)) (cons (list 'parent wy3d10@super) (cons (cons 'fields (map (lambda (wy3d20@field wy3d21@aux) (list 'immutable wy3d20@field wy3d21@aux)) wy3d13@field* wy3d1c@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define wy3d12@predicate (list 'condition-predicate (list 'record-type-descriptor wy3d0f@name))) (map (lambda (wy3d24@accessor wy3d25@aux) (list 'define wy3d24@accessor (list 'condition-accessor (list 'record-type-descriptor wy3d0f@name) wy3d25@aux))) wy3d14@accessor* wy3d1c@aux-accessor*))))))) wy3cfe@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3cfc@t))))))) (set! wy4c10@wy30ff@define-condition-type-macro wy30ff@define-condition-type-macro) (set! wy3101@incorrect-usage-macro (lambda (wy3d2c@e) (wy31e9@syntax-violation '#f '"incorrect usage of auxiliary keyword" wy3d2c@e))) (set! wy4c11@wy3101@incorrect-usage-macro wy3101@incorrect-usage-macro) (set! wy3103@parameterize-macro (lambda (wy3d2e@e) (let ((wy3d30@t wy3d2e@e)) (let ((wy3d32@ls/false (wy3109@syntax-dispatch wy3d30@t '(_ () any . each-any)))) (if wy3d32@ls/false (apply (lambda (wy3d34@b wy3d35@b*) (wy30bf@bless (cons 'let (cons '() (cons wy3d34@b wy3d35@b*))))) wy3d32@ls/false) (let ((wy3d38@t wy3d30@t)) (let ((wy3d3a@ls/false (wy3109@syntax-dispatch wy3d38@t '(_ #(each (any any)) any . each-any)))) (if wy3d3a@ls/false (apply (lambda (wy3d3c@olhs* wy3d3d@orhs* wy3d3e@b wy3d3f@b*) (let ((wy3d44@lhs* (wy31d7@generate-temporaries wy3d3c@olhs*)) (wy3d45@rhs* (wy31d7@generate-temporaries wy3d3d@orhs*))) (wy30bf@bless (cons (list 'lambda (append wy3d44@lhs* wy3d45@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (wy3d48@lhs wy3d49@rhs) (list 'let (list (list 't (list wy3d48@lhs))) (list wy3d48@lhs wy3d49@rhs) (cons 'set! (cons wy3d49@rhs '(t))))) wy3d44@lhs* wy3d45@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons wy3d3e@b wy3d3f@b*))) '(swap)))))) (append wy3d3c@olhs* wy3d3d@orhs*))))) wy3d3a@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3d38@t))))))))) (set! wy4c12@wy3103@parameterize-macro wy3103@parameterize-macro) (set! wy3105@foreign-call-transformer (lambda (wy3d4c@e wy3d4d@r wy3d4e@mr) (let ((wy3d52@t wy3d4c@e)) (let ((wy3d54@ls/false (wy3109@syntax-dispatch wy3d52@t '(_ any . each-any)))) (if wy3d54@ls/false (apply (lambda (wy3d56@name wy3d57@arg*) (cons 'foreign-call (cons (wy312b@chi-expr wy3d56@name wy3d4d@r wy3d4e@mr) (wy3127@chi-expr* wy3d57@arg* wy3d4d@r wy3d4e@mr)))) wy3d54@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3d52@t)))))) (set! wy4c13@wy3105@foreign-call-transformer wy3105@foreign-call-transformer) (set! wy3107@convert-pattern (lambda (wy3d5a@pattern wy3d5b@keys) (letrec* ((wy3d5f@cvt* (lambda (wy3dfe@p* wy3dff@n wy3e00@ids) (if (null? wy3dfe@p*) (values '() wy3e00@ids) (call-with-values (lambda () (wy3d5f@cvt* (cdr wy3dfe@p*) wy3dff@n wy3e00@ids)) (lambda (wy3e08@wy3e05 wy3e09@wy3e07) (let ((wy3e0c@ids wy3e09@wy3e07) (wy3e0d@y wy3e08@wy3e05)) (call-with-values (lambda () (wy3d61@cvt (car wy3dfe@p*) wy3dff@n wy3e0c@ids)) (lambda (wy3e14@wy3e11 wy3e15@wy3e13) (let ((wy3e18@ids wy3e15@wy3e13) (wy3e19@x wy3e14@wy3e11)) (values (cons wy3e19@x wy3e0d@y) wy3e18@ids)))))))))) (wy3d61@cvt (lambda (wy3d62@p wy3d63@n wy3d64@ids) (let ((wy3d68@t wy3d62@p)) (let ((wy3d6a@ls/false (wy3109@syntax-dispatch wy3d68@t 'any))) (if (and wy3d6a@ls/false (apply (lambda (wy3d6c@id) (wy2f02@id? wy3d6c@id)) wy3d6a@ls/false)) (apply (lambda (wy3d6e@id) (if (wy2f0e@bound-id-member? wy3d62@p wy3d5b@keys) (values (vector 'free-id wy3d62@p) wy3d64@ids) (if (wy2f08@free-id=? wy3d62@p (wy3091@scheme-stx '_)) (values '_ wy3d64@ids) (values 'any (cons (cons wy3d62@p wy3d63@n) wy3d64@ids))))) wy3d6a@ls/false) (let ((wy3d70@t wy3d68@t)) (let ((wy3d72@ls/false (wy3109@syntax-dispatch wy3d70@t '(any any)))) (if (and wy3d72@ls/false (apply (lambda (wy3d74@p wy3d75@dots) (wy310b@ellipsis? wy3d75@dots)) wy3d72@ls/false)) (apply (lambda (wy3d78@p wy3d79@dots) (call-with-values (lambda () (wy3d61@cvt wy3d78@p (+ wy3d63@n '1) wy3d64@ids)) (lambda (wy3d80@wy3d7d wy3d81@wy3d7f) (let ((wy3d84@ids wy3d81@wy3d7f) (wy3d85@p wy3d80@wy3d7d)) (values (if (eq? wy3d85@p 'any) 'each-any (vector 'each wy3d85@p)) wy3d84@ids))))) wy3d72@ls/false) (let ((wy3d88@t wy3d70@t)) (let ((wy3d8a@ls/false (wy3109@syntax-dispatch wy3d88@t '(any any . #(each+ any () any))))) (if (and wy3d8a@ls/false (apply (lambda (wy3d8c@x wy3d8d@dots wy3d8e@ys wy3d8f@z) (wy310b@ellipsis? wy3d8d@dots)) wy3d8a@ls/false)) (apply (lambda (wy3d94@x wy3d95@dots wy3d96@ys wy3d97@z) (call-with-values (lambda () (wy3d61@cvt wy3d97@z wy3d63@n wy3d64@ids)) (lambda (wy3da0@wy3d9d wy3da1@wy3d9f) (let ((wy3da4@ids wy3da1@wy3d9f) (wy3da5@z wy3da0@wy3d9d)) (call-with-values (lambda () (wy3d5f@cvt* wy3d96@ys wy3d63@n wy3da4@ids)) (lambda (wy3dac@wy3da9 wy3dad@wy3dab) (let ((wy3db0@ids wy3dad@wy3dab) (wy3db1@ys wy3dac@wy3da9)) (call-with-values (lambda () (wy3d61@cvt wy3d94@x (+ wy3d63@n '1) wy3db0@ids)) (lambda (wy3db8@wy3db5 wy3db9@wy3db7) (let ((wy3dbc@ids wy3db9@wy3db7) (wy3dbd@x wy3db8@wy3db5)) (values (vector 'each+ wy3dbd@x (reverse wy3db1@ys) wy3da5@z) wy3dbc@ids))))))))))) wy3d8a@ls/false) (let ((wy3dc0@t wy3d88@t)) (let ((wy3dc2@ls/false (wy3109@syntax-dispatch wy3dc0@t '(any . any)))) (if wy3dc2@ls/false (apply (lambda (wy3dc4@x wy3dc5@y) (call-with-values (lambda () (wy3d61@cvt wy3dc5@y wy3d63@n wy3d64@ids)) (lambda (wy3dcc@wy3dc9 wy3dcd@wy3dcb) (let ((wy3dd0@ids wy3dcd@wy3dcb) (wy3dd1@y wy3dcc@wy3dc9)) (call-with-values (lambda () (wy3d61@cvt wy3dc4@x wy3d63@n wy3dd0@ids)) (lambda (wy3dd8@wy3dd5 wy3dd9@wy3dd7) (let ((wy3ddc@ids wy3dd9@wy3dd7) (wy3ddd@x wy3dd8@wy3dd5)) (values (cons wy3ddd@x wy3dd1@y) wy3ddc@ids)))))))) wy3dc2@ls/false) (let ((wy3de0@t wy3dc0@t)) (let ((wy3de2@ls/false (wy3109@syntax-dispatch wy3de0@t '()))) (if wy3de2@ls/false (apply (lambda () (values '() wy3d64@ids)) wy3de2@ls/false) (let ((wy3de4@t wy3de0@t)) (let ((wy3de6@ls/false (wy3109@syntax-dispatch wy3de4@t '#(vector each-any)))) (if (and wy3de6@ls/false (apply (lambda (wy3de8@p) (not (wy2ece@stx? wy3de8@p))) wy3de6@ls/false)) (apply (lambda (wy3dea@p) (call-with-values (lambda () (wy3d61@cvt wy3dea@p wy3d63@n wy3d64@ids)) (lambda (wy3df0@wy3ded wy3df1@wy3def) (let ((wy3df4@ids wy3df1@wy3def) (wy3df5@p wy3df0@wy3ded)) (values (vector 'vector wy3df5@p) wy3df4@ids))))) wy3de6@ls/false) (let ((wy3df8@t wy3de4@t)) (let ((wy3dfa@ls/false (wy3109@syntax-dispatch wy3df8@t 'any))) (if wy3dfa@ls/false (apply (lambda (wy3dfc@datum) (values (vector 'atom (wy2f16@stx->datum wy3dfc@datum)) wy3d64@ids)) wy3dfa@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3df8@t))))))))))))))))))))))))) (wy3d61@cvt wy3d5a@pattern '0 '())))) (set! wy4c14@wy3107@convert-pattern wy3107@convert-pattern) (set! wy3109@syntax-dispatch (letrec* ((wy3e1d@stx^ (lambda (wy3ef8@e wy3ef9@m* wy3efa@s* wy3efb@ae*) (if (and (null? wy3ef9@m*) (null? wy3efa@s*) (null? wy3efb@ae*)) wy3ef8@e (wy2eea@mkstx wy3ef8@e wy3ef9@m* wy3efa@s* wy3efb@ae*)))) (wy3e1f@match-each (lambda (wy3ed8@e wy3ed9@p wy3eda@m* wy3edb@s* wy3edc@ae*) (if (pair? wy3ed8@e) (let ((wy3ee2@first (wy3e2b@match (car wy3ed8@e) wy3ed9@p wy3eda@m* wy3edb@s* wy3edc@ae* '()))) (and wy3ee2@first (let ((wy3ee4@rest (wy3e1f@match-each (cdr wy3ed8@e) wy3ed9@p wy3eda@m* wy3edb@s* wy3edc@ae*))) (and wy3ee4@rest (cons wy3ee2@first wy3ee4@rest))))) (if (null? wy3ed8@e) '() (if (wy2ece@stx? wy3ed8@e) (and (not (wy2e88@top-marked? wy3eda@m*)) (call-with-values (lambda () (join-wraps wy3eda@m* wy3edb@s* wy3edc@ae* wy3ed8@e)) (lambda (wy3eec@wy3ee7 wy3eed@wy3ee9 wy3eee@wy3eeb) (let ((wy3ef2@ae* wy3eee@wy3eeb) (wy3ef3@s* wy3eed@wy3ee9) (wy3ef4@m* wy3eec@wy3ee7)) (wy3e1f@match-each (wy2ed0@stx-expr wy3ed8@e) wy3ed9@p wy3ef4@m* wy3ef3@s* wy3ef2@ae*))))) (if (wy2a46@wy2918@annotation? wy3ed8@e) (wy3e1f@match-each (wy2a48@wy291c@annotation-expression wy3ed8@e) wy3ed9@p wy3eda@m* wy3edb@s* wy3edc@ae*) '#f)))))) (wy3e21@match-each+ (lambda (wy3e98@e wy3e99@x-pat wy3e9a@y-pat wy3e9b@z-pat wy3e9c@m* wy3e9d@s* wy3e9e@ae* wy3e9f@r) (let wy3eb0@f ((wy3ea8@e wy3e98@e) (wy3ea9@m* wy3e9c@m*) (wy3eaa@s* wy3e9d@s*) (wy3eab@ae* wy3e9e@ae*)) (if (pair? wy3ea8@e) (call-with-values (lambda () (wy3eb0@f (cdr wy3ea8@e) wy3ea9@m* wy3eaa@s* wy3eab@ae*)) (lambda (wy3eb8@wy3eb3 wy3eb9@wy3eb5 wy3eba@wy3eb7) (let ((wy3ebe@r wy3eba@wy3eb7) (wy3ebf@y-pat wy3eb9@wy3eb5) (wy3ec0@xr* wy3eb8@wy3eb3)) (if wy3ebe@r (if (null? wy3ebf@y-pat) (let ((wy3ec4@xr (wy3e2b@match (car wy3ea8@e) wy3e99@x-pat wy3ea9@m* wy3eaa@s* wy3eab@ae* '()))) (if wy3ec4@xr (values (cons wy3ec4@xr wy3ec0@xr*) wy3ebf@y-pat wy3ebe@r) (values '#f '#f '#f))) (values '() (cdr wy3ebf@y-pat) (wy3e2b@match (car wy3ea8@e) (car wy3ebf@y-pat) wy3ea9@m* wy3eaa@s* wy3eab@ae* wy3ebe@r))) (values '#f '#f '#f))))) (if (wy2ece@stx? wy3ea8@e) (if (wy2e88@top-marked? wy3ea9@m*) (values '() wy3e9a@y-pat (wy3e2b@match wy3ea8@e wy3e9b@z-pat wy3ea9@m* wy3eaa@s* wy3eab@ae* wy3e9f@r)) (call-with-values (lambda () (join-wraps wy3ea9@m* wy3eaa@s* wy3eab@ae* wy3ea8@e)) (lambda (wy3ecc@wy3ec7 wy3ecd@wy3ec9 wy3ece@wy3ecb) (let ((wy3ed2@ae* wy3ece@wy3ecb) (wy3ed3@s* wy3ecd@wy3ec9) (wy3ed4@m* wy3ecc@wy3ec7)) (wy3eb0@f (wy2ed0@stx-expr wy3ea8@e) wy3ed4@m* wy3ed3@s* wy3ed2@ae*))))) (if (wy2a46@wy2918@annotation? wy3ea8@e) (wy3eb0@f (wy2a48@wy291c@annotation-expression wy3ea8@e) wy3ea9@m* wy3eaa@s* wy3eab@ae*) (values '() wy3e9a@y-pat (wy3e2b@match wy3ea8@e wy3e9b@z-pat wy3ea9@m* wy3eaa@s* wy3eab@ae* wy3e9f@r)))))))) (wy3e23@match-each-any (lambda (wy3e7c@e wy3e7d@m* wy3e7e@s* wy3e7f@ae*) (if (pair? wy3e7c@e) (let ((wy3e84@l (wy3e23@match-each-any (cdr wy3e7c@e) wy3e7d@m* wy3e7e@s* wy3e7f@ae*))) (and wy3e84@l (cons (wy3e1d@stx^ (car wy3e7c@e) wy3e7d@m* wy3e7e@s* wy3e7f@ae*) wy3e84@l))) (if (null? wy3e7c@e) '() (if (wy2ece@stx? wy3e7c@e) (and (not (wy2e88@top-marked? wy3e7d@m*)) (call-with-values (lambda () (join-wraps wy3e7d@m* wy3e7e@s* wy3e7f@ae* wy3e7c@e)) (lambda (wy3e8c@wy3e87 wy3e8d@wy3e89 wy3e8e@wy3e8b) (let ((wy3e92@ae* wy3e8e@wy3e8b) (wy3e93@s* wy3e8d@wy3e89) (wy3e94@m* wy3e8c@wy3e87)) (wy3e23@match-each-any (wy2ed0@stx-expr wy3e7c@e) wy3e94@m* wy3e93@s* wy3e92@ae*))))) (if (wy2a46@wy2918@annotation? wy3e7c@e) (wy3e23@match-each-any (wy2a48@wy291c@annotation-expression wy3e7c@e) wy3e7d@m* wy3e7e@s* wy3e7f@ae*) '#f)))))) (wy3e25@match-empty (lambda (wy3e76@p wy3e77@r) (if (null? wy3e76@p) wy3e77@r (if (eq? wy3e76@p '_) wy3e77@r (if (eq? wy3e76@p 'any) (cons '() wy3e77@r) (if (pair? wy3e76@p) (wy3e25@match-empty (car wy3e76@p) (wy3e25@match-empty (cdr wy3e76@p) wy3e77@r)) (if (eq? wy3e76@p 'each-any) (cons '() wy3e77@r) (let ((wy3e7a@t (vector-ref wy3e76@p '0))) (if (memv wy3e7a@t '(each)) (wy3e25@match-empty (vector-ref wy3e76@p '1) wy3e77@r) (if (memv wy3e7a@t '(each+)) (wy3e25@match-empty (vector-ref wy3e76@p '1) (wy3e25@match-empty (reverse (vector-ref wy3e76@p '2)) (wy3e25@match-empty (vector-ref wy3e76@p '3) wy3e77@r))) (if (memv wy3e7a@t '(free-id atom)) wy3e77@r (if (memv wy3e7a@t '(scheme-id atom)) wy3e77@r (if (memv wy3e7a@t '(vector)) (wy3e25@match-empty (vector-ref wy3e76@p '1) wy3e77@r) (assertion-violation 'syntax-dispatch '"invalid pattern" wy3e76@p)))))))))))))) (wy3e27@combine (lambda (wy3e72@r* wy3e73@r) (if (null? (car wy3e72@r*)) wy3e73@r (cons (map car wy3e72@r*) (wy3e27@combine (map cdr wy3e72@r*) wy3e73@r))))) (wy3e29@match* (lambda (wy3e4e@e wy3e4f@p wy3e50@m* wy3e51@s* wy3e52@ae* wy3e53@r) (if (null? wy3e4f@p) (and (null? wy3e4e@e) wy3e53@r) (if (pair? wy3e4f@p) (and (pair? wy3e4e@e) (wy3e2b@match (car wy3e4e@e) (car wy3e4f@p) wy3e50@m* wy3e51@s* wy3e52@ae* (wy3e2b@match (cdr wy3e4e@e) (cdr wy3e4f@p) wy3e50@m* wy3e51@s* wy3e52@ae* wy3e53@r))) (if (eq? wy3e4f@p 'each-any) (let ((wy3e5a@l (wy3e23@match-each-any wy3e4e@e wy3e50@m* wy3e51@s* wy3e52@ae*))) (and wy3e5a@l (cons wy3e5a@l wy3e53@r))) (let ((wy3e5c@t (vector-ref wy3e4f@p '0))) (if (memv wy3e5c@t '(each)) (if (null? wy3e4e@e) (wy3e25@match-empty (vector-ref wy3e4f@p '1) wy3e53@r) (let ((wy3e5e@r* (wy3e1f@match-each wy3e4e@e (vector-ref wy3e4f@p '1) wy3e50@m* wy3e51@s* wy3e52@ae*))) (and wy3e5e@r* (wy3e27@combine wy3e5e@r* wy3e53@r)))) (if (memv wy3e5c@t '(free-id)) (and (symbol? wy3e4e@e) (wy2e88@top-marked? wy3e50@m*) (wy2f08@free-id=? (wy3e1d@stx^ wy3e4e@e wy3e50@m* wy3e51@s* wy3e52@ae*) (vector-ref wy3e4f@p '1)) wy3e53@r) (if (memv wy3e5c@t '(scheme-id)) (and (symbol? wy3e4e@e) (wy2e88@top-marked? wy3e50@m*) (wy2f08@free-id=? (wy3e1d@stx^ wy3e4e@e wy3e50@m* wy3e51@s* wy3e52@ae*) (wy3091@scheme-stx (vector-ref wy3e4f@p '1))) wy3e53@r) (if (memv wy3e5c@t '(each+)) (call-with-values (lambda () (wy3e21@match-each+ wy3e4e@e (vector-ref wy3e4f@p '1) (vector-ref wy3e4f@p '2) (vector-ref wy3e4f@p '3) wy3e50@m* wy3e51@s* wy3e52@ae* wy3e53@r)) (lambda (wy3e66@wy3e61 wy3e67@wy3e63 wy3e68@wy3e65) (let ((wy3e6c@r wy3e68@wy3e65) (wy3e6d@y-pat wy3e67@wy3e63) (wy3e6e@xr* wy3e66@wy3e61)) (and wy3e6c@r (null? wy3e6d@y-pat) (if (null? wy3e6e@xr*) (wy3e25@match-empty (vector-ref wy3e4f@p '1) wy3e6c@r) (wy3e27@combine wy3e6e@xr* wy3e6c@r)))))) (if (memv wy3e5c@t '(atom)) (and (fast-equal? (vector-ref wy3e4f@p '1) (wy2f14@strip wy3e4e@e wy3e50@m*)) wy3e53@r) (if (memv wy3e5c@t '(vector)) (and (vector? wy3e4e@e) (wy3e2b@match (vector->list wy3e4e@e) (vector-ref wy3e4f@p '1) wy3e50@m* wy3e51@s* wy3e52@ae* wy3e53@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" wy3e4f@p))))))))))))) (wy3e2b@match (lambda (wy3e30@e wy3e31@p wy3e32@m* wy3e33@s* wy3e34@ae* wy3e35@r) (if (not wy3e35@r) '#f (if (eq? wy3e31@p '_) wy3e35@r (if (eq? wy3e31@p 'any) (cons (wy3e1d@stx^ wy3e30@e wy3e32@m* wy3e33@s* wy3e34@ae*) wy3e35@r) (if (wy2ece@stx? wy3e30@e) (and (not (wy2e88@top-marked? wy3e32@m*)) (call-with-values (lambda () (join-wraps wy3e32@m* wy3e33@s* wy3e34@ae* wy3e30@e)) (lambda (wy3e42@wy3e3d wy3e43@wy3e3f wy3e44@wy3e41) (let ((wy3e48@ae* wy3e44@wy3e41) (wy3e49@s* wy3e43@wy3e3f) (wy3e4a@m* wy3e42@wy3e3d)) (wy3e2b@match (wy2ed0@stx-expr wy3e30@e) wy3e31@p wy3e4a@m* wy3e49@s* wy3e48@ae* wy3e35@r))))) (if (wy2a46@wy2918@annotation? wy3e30@e) (wy3e2b@match (wy2a48@wy291c@annotation-expression wy3e30@e) wy3e31@p wy3e32@m* wy3e33@s* wy3e34@ae* wy3e35@r) (wy3e29@match* wy3e30@e wy3e31@p wy3e32@m* wy3e33@s* wy3e34@ae* wy3e35@r))))))))) (lambda (wy3e2c@e wy3e2d@p) (wy3e2b@match wy3e2c@e wy3e2d@p '() '() '() '())))) (set! wy4c15@wy3109@syntax-dispatch wy3109@syntax-dispatch) (set! wy310b@ellipsis? (lambda (wy3f00@x) (and (wy2f02@id? wy3f00@x) (wy2f08@free-id=? wy3f00@x (wy3091@scheme-stx '...))))) (set! wy4c16@wy310b@ellipsis? wy310b@ellipsis?) (set! wy310d@underscore? (lambda (wy3f02@x) (and (wy2f02@id? wy3f02@x) (wy2f08@free-id=? wy3f02@x (wy3091@scheme-stx '_))))) (set! wy4c17@wy310d@underscore? wy310d@underscore?) (set! wy310f@verify-literals (lambda (wy3f04@lits wy3f05@expr) (for-each (lambda (wy3f08@x) (if (or (not (wy2f02@id? wy3f08@x)) (wy310b@ellipsis? wy3f08@x) (wy310d@underscore? wy3f08@x)) (wy31e9@syntax-violation '#f '"invalid literal" wy3f05@expr wy3f08@x) (void))) wy3f04@lits))) (set! wy4c18@wy310f@verify-literals wy310f@verify-literals) (set! wy3111@syntax-case-transformer (letrec* ((wy3f0b@build-dispatch-call (lambda (wy3f7c@pvars wy3f7d@expr wy3f7e@y wy3f7f@r wy3f80@mr) (let ((wy3f86@ids (map car wy3f7c@pvars)) (wy3f87@levels (map cdr wy3f7c@pvars))) (let ((wy3f8a@labels (map wy2e8e@gen-label wy3f86@ids)) (wy3f8b@new-vars (map wy2e8a@gen-lexical wy3f86@ids))) (let ((wy3f8e@body (wy312b@chi-expr (wy2eec@add-subst (wy2ec2@make-full-rib wy3f86@ids wy3f8a@labels) wy3f7d@expr) (append (map (lambda (wy3f90@label wy3f91@var wy3f92@level) (cons wy3f90@label (wy2f1c@make-binding 'syntax (cons wy3f91@var wy3f92@level)))) wy3f8a@labels wy3f8b@new-vars (map cdr wy3f7c@pvars)) wy3f7f@r) wy3f80@mr))) (list '(primitive apply) (wy2e65@wy2d97@build-lambda '#f wy3f8b@new-vars wy3f8e@body) wy3f7e@y)))))) (wy3f0d@invalid-ids-error (lambda (wy3f70@id* wy3f71@e wy3f72@class) (let wy3f7a@find ((wy3f76@id* wy3f70@id*) (wy3f77@ok* '())) (if (null? wy3f76@id*) (wy31e9@syntax-violation '#f '"invalid syntax" wy3f71@e) (if (wy2f02@id? (car wy3f76@id*)) (if (wy2f0e@bound-id-member? (car wy3f76@id*) wy3f77@ok*) (wy31e5@syntax-error (car wy3f76@id*) '"duplicate " wy3f72@class) (wy3f7a@find (cdr wy3f76@id*) (cons (car wy3f76@id*) wy3f77@ok*))) (wy31e5@syntax-error (car wy3f76@id*) '"invalid " wy3f72@class)))))) (wy3f0f@gen-clause (lambda (wy3f48@x wy3f49@keys wy3f4a@clauses wy3f4b@r wy3f4c@mr wy3f4d@pat wy3f4e@fender wy3f4f@expr) (call-with-values (lambda () (wy3107@convert-pattern wy3f4d@pat wy3f49@keys)) (lambda (wy3f5c@wy3f59 wy3f5d@wy3f5b) (let ((wy3f60@pvars wy3f5d@wy3f5b) (wy3f61@p wy3f5c@wy3f59)) (if (not (wy2f0c@distinct-bound-ids? (map car wy3f60@pvars))) (wy3f0d@invalid-ids-error (map car wy3f60@pvars) wy3f4d@pat '"pattern variable") (if (not (for-all (lambda (wy3f64@x) (not (wy310b@ellipsis? (car wy3f64@x)))) wy3f60@pvars)) (wy31e9@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" wy3f4d@pat) (let ((wy3f66@y (wy2e8a@gen-lexical 'tmp))) (let ((wy3f68@test (if (eq? wy3f4e@fender '#t) wy3f66@y (let ((wy3f6a@call (wy3f0b@build-dispatch-call wy3f60@pvars wy3f4e@fender wy3f66@y wy3f4b@r wy3f4c@mr))) (list 'if wy3f66@y wy3f6a@call (list 'quote '#f)))))) (let ((wy3f6c@conseq (wy3f0b@build-dispatch-call wy3f60@pvars wy3f4f@expr wy3f66@y wy3f4b@r wy3f4c@mr))) (let ((wy3f6e@altern (wy3f11@gen-syntax-case wy3f48@x wy3f49@keys wy3f4a@clauses wy3f4b@r wy3f4c@mr))) (list (wy2e65@wy2d97@build-lambda '#f (list wy3f66@y) (list 'if wy3f68@test wy3f6c@conseq wy3f6e@altern)) (list '(primitive syntax-dispatch) wy3f48@x (list 'quote wy3f61@p)))))))))))))) (wy3f11@gen-syntax-case (lambda (wy3f26@x wy3f27@keys wy3f28@clauses wy3f29@r wy3f2a@mr) (if (null? wy3f28@clauses) (list '(primitive syntax-error) wy3f26@x) (let ((wy3f30@t (car wy3f28@clauses))) (let ((wy3f32@ls/false (wy3109@syntax-dispatch wy3f30@t '(any any)))) (if wy3f32@ls/false (apply (lambda (wy3f34@pat wy3f35@expr) (if (and (wy2f02@id? wy3f34@pat) (not (wy2f0e@bound-id-member? wy3f34@pat wy3f27@keys)) (not (wy310b@ellipsis? wy3f34@pat))) (if (wy2f08@free-id=? wy3f34@pat (wy3091@scheme-stx '_)) (wy312b@chi-expr wy3f35@expr wy3f29@r wy3f2a@mr) (let ((wy3f38@lab (wy2e8e@gen-label wy3f34@pat)) (wy3f39@lex (wy2e8a@gen-lexical wy3f34@pat))) (let ((wy3f3c@body (wy312b@chi-expr (wy2eec@add-subst (wy2ec2@make-full-rib (list wy3f34@pat) (list wy3f38@lab)) wy3f35@expr) (cons (cons wy3f38@lab (wy2f1c@make-binding 'syntax (cons wy3f39@lex '0))) wy3f29@r) wy3f2a@mr))) (list (wy2e65@wy2d97@build-lambda '#f (list wy3f39@lex) wy3f3c@body) wy3f26@x)))) (wy3f0f@gen-clause wy3f26@x wy3f27@keys (cdr wy3f28@clauses) wy3f29@r wy3f2a@mr wy3f34@pat '#t wy3f35@expr))) wy3f32@ls/false) (let ((wy3f3e@t wy3f30@t)) (let ((wy3f40@ls/false (wy3109@syntax-dispatch wy3f3e@t '(any any any)))) (if wy3f40@ls/false (apply (lambda (wy3f42@pat wy3f43@fender wy3f44@expr) (wy3f0f@gen-clause wy3f26@x wy3f27@keys (cdr wy3f28@clauses) wy3f29@r wy3f2a@mr wy3f42@pat wy3f43@fender wy3f44@expr)) wy3f40@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3f3e@t))))))))))) (lambda (wy3f12@e wy3f13@r wy3f14@mr) (let ((wy3f18@t wy3f12@e)) (let ((wy3f1a@ls/false (wy3109@syntax-dispatch wy3f18@t '(_ any each-any . each-any)))) (if wy3f1a@ls/false (apply (lambda (wy3f1c@expr wy3f1d@keys wy3f1e@clauses) (begin (wy310f@verify-literals wy3f1d@keys wy3f12@e) (let ((wy3f22@x (wy2e8a@gen-lexical 'tmp))) (let ((wy3f24@body (wy3f11@gen-syntax-case wy3f22@x wy3f1d@keys wy3f1e@clauses wy3f13@r wy3f14@mr))) (list (wy2e65@wy2d97@build-lambda '#f (list wy3f22@x) wy3f24@body) (wy312b@chi-expr wy3f1c@expr wy3f13@r wy3f14@mr)))))) wy3f1a@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3f18@t))))))) (set! wy4c19@wy3111@syntax-case-transformer wy3111@syntax-case-transformer) (set! wy3113@ellipsis-map (lambda (wy3f96@proc wy3f97@ls . wy3f9a@ls*) (letrec* ((wy3f9d@who '...)) (begin (if (not (list? wy3f97@ls)) (assertion-violation wy3f9d@who '"not a list" wy3f97@ls) (void)) (if (not (null? wy3f9a@ls*)) (let ((wy3f9e@n (length wy3f97@ls))) (for-each (lambda (wy3fa0@x) (begin (if (not (list? wy3fa0@x)) (assertion-violation wy3f9d@who '"not a list" wy3fa0@x) (void)) (if (not (= (length wy3fa0@x) wy3f9e@n)) (assertion-violation wy3f9d@who '"length mismatch" wy3f97@ls wy3fa0@x) (void)))) wy3f9a@ls*)) (void)) (apply map wy3f96@proc wy3f97@ls wy3f9a@ls*))))) (set! wy4c1a@wy3113@ellipsis-map wy3113@ellipsis-map) (set! wy3115@syntax-transformer (letrec* ((wy3fa3@gen-syntax (lambda (wy401a@src wy401b@e wy401c@r wy401d@maps wy401e@ellipsis? wy401f@vec?) (let ((wy4026@t wy401b@e)) (let ((wy4028@ls/false (wy3109@syntax-dispatch wy4026@t 'any))) (if (and wy4028@ls/false (apply (lambda (wy402a@dots) (wy401e@ellipsis? wy402a@dots)) wy4028@ls/false)) (apply (lambda (wy402c@dots) (wy31e9@syntax-violation '#f '"misplaced ellipsis in syntax form" wy401a@src)) wy4028@ls/false) (let ((wy402e@t wy4026@t)) (let ((wy4030@ls/false (wy3109@syntax-dispatch wy402e@t 'any))) (if (and wy4030@ls/false (apply (lambda (wy4032@id) (wy2f02@id? wy4032@id)) wy4030@ls/false)) (apply (lambda (wy4034@id) (let ((wy4036@label (wy2f18@id->label wy401b@e))) (let ((wy4038@b (wy2f1a@label->binding wy4036@label wy401c@r))) (if (eq? (wy2f1e@binding-type wy4038@b) 'syntax) (call-with-values (lambda () (let ((wy403e@var.lev (wy2f20@binding-value wy4038@b))) (wy3fa5@gen-ref wy401a@src (car wy403e@var.lev) (cdr wy403e@var.lev) wy401d@maps))) (lambda (wy4040@wy403b wy4041@wy403d) (let ((wy4044@maps wy4041@wy403d) (wy4045@var wy4040@wy403b)) (values (list 'ref wy4045@var) wy4044@maps)))) (values (list 'quote wy401b@e) wy401d@maps))))) wy4030@ls/false) (let ((wy4048@t wy402e@t)) (let ((wy404a@ls/false (wy3109@syntax-dispatch wy4048@t '(any any)))) (if (and wy404a@ls/false (apply (lambda (wy404c@dots wy404d@e) (wy401e@ellipsis? wy404c@dots)) wy404a@ls/false)) (apply (lambda (wy4050@dots wy4051@e) (if wy401f@vec? (wy31e9@syntax-violation '#f '"misplaced ellipsis in syntax form" wy401a@src) (wy3fa3@gen-syntax wy401a@src wy4051@e wy401c@r wy401d@maps (lambda (wy4054@x) '#f) '#f))) wy404a@ls/false) (let ((wy4056@t wy4048@t)) (let ((wy4058@ls/false (wy3109@syntax-dispatch wy4056@t '(any any . any)))) (if (and wy4058@ls/false (apply (lambda (wy405a@x wy405b@dots wy405c@y) (wy401e@ellipsis? wy405b@dots)) wy4058@ls/false)) (apply (lambda (wy4060@x wy4061@dots wy4062@y) (let wy4078@f ((wy4066@y wy4062@y) (wy4067@k (lambda (wy406a@maps) (call-with-values (lambda () (wy3fa3@gen-syntax wy401a@src wy4060@x wy401c@r (cons '() wy406a@maps) wy401e@ellipsis? '#f)) (lambda (wy4070@wy406d wy4071@wy406f) (let ((wy4074@maps wy4071@wy406f) (wy4075@x wy4070@wy406d)) (if (null? (car wy4074@maps)) (wy31e9@syntax-violation '#f '"extra ellipsis in syntax form" wy401a@src) (values (wy3fab@gen-map wy4075@x (car wy4074@maps)) (cdr wy4074@maps))))))))) (let ((wy407a@t wy4066@y)) (let ((wy407c@ls/false (wy3109@syntax-dispatch wy407a@t '()))) (if wy407c@ls/false (apply (lambda () (wy4067@k wy401d@maps)) wy407c@ls/false) (let ((wy407e@t wy407a@t)) (let ((wy4080@ls/false (wy3109@syntax-dispatch wy407e@t '(any . any)))) (if (and wy4080@ls/false (apply (lambda (wy4082@dots wy4083@y) (wy401e@ellipsis? wy4082@dots)) wy4080@ls/false)) (apply (lambda (wy4086@dots wy4087@y) (wy4078@f wy4087@y (lambda (wy408a@maps) (call-with-values (lambda () (wy4067@k (cons '() wy408a@maps))) (lambda (wy4090@wy408d wy4091@wy408f) (let ((wy4094@maps wy4091@wy408f) (wy4095@x wy4090@wy408d)) (if (null? (car wy4094@maps)) (wy31e9@syntax-violation '#f '"extra ellipsis in syntax form" wy401a@src) (values (wy3fa9@gen-mappend wy4095@x (car wy4094@maps)) (cdr wy4094@maps))))))))) wy4080@ls/false) (let ((wy4098@t wy407e@t)) (let ((wy409a@ls/false (wy3109@syntax-dispatch wy4098@t '_))) (if wy409a@ls/false (apply (lambda () (call-with-values (lambda () (wy3fa3@gen-syntax wy401a@src wy4066@y wy401c@r wy401d@maps wy401e@ellipsis? wy401f@vec?)) (lambda (wy40a0@wy409d wy40a1@wy409f) (let ((wy40a4@maps wy40a1@wy409f) (wy40a5@y wy40a0@wy409d)) (call-with-values (lambda () (wy4067@k wy40a4@maps)) (lambda (wy40ac@wy40a9 wy40ad@wy40ab) (let ((wy40b0@maps wy40ad@wy40ab) (wy40b1@x wy40ac@wy40a9)) (values (wy3fa7@gen-append wy40b1@x wy40a5@y) wy40b0@maps)))))))) wy409a@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4098@t)))))))))))) wy4058@ls/false) (let ((wy40b4@t wy4056@t)) (let ((wy40b6@ls/false (wy3109@syntax-dispatch wy40b4@t '(any . any)))) (if wy40b6@ls/false (apply (lambda (wy40b8@x wy40b9@y) (call-with-values (lambda () (wy3fa3@gen-syntax wy401a@src wy40b8@x wy401c@r wy401d@maps wy401e@ellipsis? '#f)) (lambda (wy40c0@wy40bd wy40c1@wy40bf) (let ((wy40c4@maps wy40c1@wy40bf) (wy40c5@xnew wy40c0@wy40bd)) (call-with-values (lambda () (wy3fa3@gen-syntax wy401a@src wy40b9@y wy401c@r wy40c4@maps wy401e@ellipsis? wy401f@vec?)) (lambda (wy40cc@wy40c9 wy40cd@wy40cb) (let ((wy40d0@maps wy40cd@wy40cb) (wy40d1@ynew wy40cc@wy40c9)) (values (wy3fad@gen-cons wy401b@e wy40b8@x wy40b9@y wy40c5@xnew wy40d1@ynew) wy40d0@maps)))))))) wy40b6@ls/false) (let ((wy40d4@t wy40b4@t)) (let ((wy40d6@ls/false (wy3109@syntax-dispatch wy40d4@t '#(vector each-any)))) (if wy40d6@ls/false (apply (lambda (wy40d8@ls) (call-with-values (lambda () (wy3fa3@gen-syntax wy401a@src wy40d8@ls wy401c@r wy401d@maps wy401e@ellipsis? '#t)) (lambda (wy40de@wy40db wy40df@wy40dd) (let ((wy40e2@maps wy40df@wy40dd) (wy40e3@lsnew wy40de@wy40db)) (values (wy3faf@gen-vector wy401b@e wy40d8@ls wy40e3@lsnew) wy40e2@maps))))) wy40d6@ls/false) (let ((wy40e6@t wy40d4@t)) (let ((wy40e8@ls/false (wy3109@syntax-dispatch wy40e6@t '_))) (if wy40e8@ls/false (apply (lambda () (values (list 'quote wy401b@e) wy401d@maps)) wy40e8@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy40e6@t)))))))))))))))))))))))) (wy3fa5@gen-ref (lambda (wy4000@src wy4001@var wy4002@level wy4003@maps) (if (= wy4002@level '0) (values wy4001@var wy4003@maps) (if (null? wy4003@maps) (wy31e9@syntax-violation '#f '"missing ellipsis in syntax form" wy4000@src) (call-with-values (lambda () (wy3fa5@gen-ref wy4000@src wy4001@var (- wy4002@level '1) (cdr wy4003@maps))) (lambda (wy400c@wy4009 wy400d@wy400b) (let ((wy4010@outer-maps wy400d@wy400b) (wy4011@outer-var wy400c@wy4009)) (let ((wy4014@t (assq wy4011@outer-var (car wy4003@maps)))) (if wy4014@t ((lambda (wy4016@b) (values (cdr wy4016@b) wy4003@maps)) wy4014@t) (let ((wy4018@inner-var (wy2e8a@gen-lexical 'tmp))) (values wy4018@inner-var (cons (cons (cons wy4011@outer-var wy4018@inner-var) (car wy4003@maps)) wy4010@outer-maps)))))))))))) (wy3fa7@gen-append (lambda (wy3ffc@x wy3ffd@y) (if (fast-equal? wy3ffd@y ''()) wy3ffc@x (list 'append wy3ffc@x wy3ffd@y)))) (wy3fa9@gen-mappend (lambda (wy3ff8@e wy3ff9@map-env) (list 'apply '(primitive append) (wy3fab@gen-map wy3ff8@e wy3ff9@map-env)))) (wy3fab@gen-map (lambda (wy3fe6@e wy3fe7@map-env) (let ((wy3fea@formals (map cdr wy3fe7@map-env)) (wy3feb@actuals (map (lambda (wy3fee@x) (list 'ref (car wy3fee@x))) wy3fe7@map-env))) (if (eq? (car wy3fe6@e) 'ref) (car wy3feb@actuals) (if (for-all (lambda (wy3ff0@x) (and (eq? (car wy3ff0@x) 'ref) (memq (cadr wy3ff0@x) wy3fea@formals))) (cdr wy3fe6@e)) (let ((wy3ff2@args (map (let ((wy3ff4@r (map cons wy3fea@formals wy3feb@actuals))) (lambda (wy3ff6@x) (cdr (assq (cadr wy3ff6@x) wy3ff4@r)))) (cdr wy3fe6@e)))) (cons 'map (cons (list 'primitive (car wy3fe6@e)) wy3ff2@args))) (cons* 'map (list 'lambda wy3fea@formals wy3fe6@e) wy3feb@actuals)))))) (wy3fad@gen-cons (lambda (wy3fd6@e wy3fd7@x wy3fd8@y wy3fd9@xnew wy3fda@ynew) (let ((wy3fe0@t (car wy3fda@ynew))) (if (memv wy3fe0@t '(quote)) (if (eq? (car wy3fd9@xnew) 'quote) (let ((wy3fe2@xnew (cadr wy3fd9@xnew)) (wy3fe3@ynew (cadr wy3fda@ynew))) (if (and (eq? wy3fe2@xnew wy3fd7@x) (eq? wy3fe3@ynew wy3fd8@y)) (list 'quote wy3fd6@e) (list 'quote (cons wy3fe2@xnew wy3fe3@ynew)))) (if (null? (cadr wy3fda@ynew)) (list 'list wy3fd9@xnew) (list 'cons wy3fd9@xnew wy3fda@ynew))) (if (memv wy3fe0@t '(list)) (cons 'list (cons wy3fd9@xnew (cdr wy3fda@ynew))) (list 'cons wy3fd9@xnew wy3fda@ynew)))))) (wy3faf@gen-vector (lambda (wy3fd0@e wy3fd1@ls wy3fd2@lsnew) (if (eq? (car wy3fd2@lsnew) 'quote) (if (eq? (cadr wy3fd2@lsnew) wy3fd1@ls) (list 'quote wy3fd0@e) (list 'quote (list->vector (cadr wy3fd2@lsnew)))) (if (eq? (car wy3fd2@lsnew) 'list) (cons 'vector (cdr wy3fd2@lsnew)) (list 'list->vector wy3fd2@lsnew))))) (wy3fb1@regen (lambda (wy3fca@x) (let ((wy3fcc@t (car wy3fca@x))) (if (memv wy3fcc@t '(ref)) (cadr wy3fca@x) (if (memv wy3fcc@t '(primitive)) (list 'primitive (cadr wy3fca@x)) (if (memv wy3fcc@t '(quote)) (list 'quote (cadr wy3fca@x)) (if (memv wy3fcc@t '(lambda)) (wy2e65@wy2d97@build-lambda '#f (cadr wy3fca@x) (wy3fb1@regen (caddr wy3fca@x))) (if (memv wy3fcc@t '(map)) (let ((wy3fce@ls (map wy3fb1@regen (cdr wy3fca@x)))) (cons '(primitive ellipsis-map) wy3fce@ls)) (cons (list 'primitive (car wy3fca@x)) (map wy3fb1@regen (cdr wy3fca@x)))))))))))) (lambda (wy3fb2@e wy3fb3@r wy3fb4@mr) (let ((wy3fb8@t wy3fb2@e)) (let ((wy3fba@ls/false (wy3109@syntax-dispatch wy3fb8@t '(_ any)))) (if wy3fba@ls/false (apply (lambda (wy3fbc@x) (call-with-values (lambda () (wy3fa3@gen-syntax wy3fb2@e wy3fbc@x wy3fb3@r '() wy310b@ellipsis? '#f)) (lambda (wy3fc2@wy3fbf wy3fc3@wy3fc1) (let ((wy3fc6@maps wy3fc3@wy3fc1) (wy3fc7@e wy3fc2@wy3fbf)) (wy3fb1@regen wy3fc7@e))))) wy3fba@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy3fb8@t))))))) (set! wy4c1b@wy3115@syntax-transformer wy3115@syntax-transformer) (set! wy3117@core-macro-transformer (lambda (wy40ea@name) (let ((wy40ec@t wy40ea@name)) (if (memv wy40ec@t '(quote)) wy30b9@quote-transformer (if (memv wy40ec@t '(lambda)) wy30bd@lambda-transformer (if (memv wy40ec@t '(case-lambda)) wy30bb@case-lambda-transformer (if (memv wy40ec@t '(letrec)) wy30a1@letrec-transformer (if (memv wy40ec@t '(letrec*)) wy30a3@letrec*-transformer (if (memv wy40ec@t '(let)) wy309f@let-transformer (if (memv wy40ec@t '(if)) wy30b1@if-transformer (if (memv wy40ec@t '(and)) wy30b3@and-transformer (if (memv wy40ec@t '(or)) wy30b5@or-transformer (if (memv wy40ec@t '(foreign-call)) wy3105@foreign-call-transformer (if (memv wy40ec@t '(syntax-case)) wy3111@syntax-case-transformer (if (memv wy40ec@t '(syntax)) wy3115@syntax-transformer (if (memv wy40ec@t '(type-descriptor)) wy30a7@type-descriptor-transformer (if (memv wy40ec@t '(record-type-descriptor)) wy30a9@record-type-descriptor-transformer (if (memv wy40ec@t '(record-constructor-descriptor)) wy30ab@record-constructor-descriptor-transformer (if (memv wy40ec@t '(fluid-let-syntax)) wy30a5@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" wy40ea@name)))))))))))))))))))) (set! wy4c1c@wy3117@core-macro-transformer wy3117@core-macro-transformer) (set! wy3119@symbol-macro (lambda (wy40ee@x wy40ef@set) (let ((wy40f2@t wy40ee@x)) (let ((wy40f4@ls/false (wy3109@syntax-dispatch wy40f2@t '(_ any)))) (if (and wy40f4@ls/false (apply (lambda (wy40f6@name) (and (wy2f02@id? wy40f6@name) (memq (wy2f04@id->sym wy40f6@name) wy40ef@set))) wy40f4@ls/false)) (apply (lambda (wy40f8@name) (wy30bf@bless (list 'quote wy40f8@name))) wy40f4@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy40f2@t)))))) (set! wy4c1d@wy3119@symbol-macro wy3119@symbol-macro) (set! wy311b@macro-transformer (lambda (wy40fa@x) (if (procedure? wy40fa@x) wy40fa@x (if (symbol? wy40fa@x) (let ((wy40fc@t wy40fa@x)) (if (memv wy40fc@t '(define-record-type)) wy30fd@define-record-type-macro (if (memv wy40fc@t '(define-struct)) wy30fb@define-struct-macro (if (memv wy40fc@t '(include)) wy30f1@include-macro (if (memv wy40fc@t '(cond)) wy30ed@cond-macro (if (memv wy40fc@t '(let)) wy30c5@let-macro (if (memv wy40fc@t '(do)) wy30e5@do-macro (if (memv wy40fc@t '(or)) wy30e9@or-macro (if (memv wy40fc@t '(and)) wy30eb@and-macro (if (memv wy40fc@t '(let*)) wy30e7@let*-macro (if (memv wy40fc@t '(let-values)) wy30c7@let-values-macro (if (memv wy40fc@t '(let*-values)) wy30c9@let*-values-macro (if (memv wy40fc@t '(syntax-rules)) wy30f5@syntax-rules-macro (if (memv wy40fc@t '(quasiquote)) wy30f7@quasiquote-macro (if (memv wy40fc@t '(quasisyntax)) wy30f9@quasisyntax-macro (if (memv wy40fc@t '(with-syntax)) wy30c1@with-syntax-macro (if (memv wy40fc@t '(when)) wy30ad@when-macro (if (memv wy40fc@t '(unless)) wy30af@unless-macro (if (memv wy40fc@t '(case)) wy30b7@case-macro (if (memv wy40fc@t '(identifier-syntax)) wy30e3@identifier-syntax-macro (if (memv wy40fc@t '(time)) wy30db@time-macro (if (memv wy40fc@t '(delay)) wy30dd@delay-macro (if (memv wy40fc@t '(assert)) wy30df@assert-macro (if (memv wy40fc@t '(endianness)) wy30e1@endianness-macro (if (memv wy40fc@t '(guard)) wy30d7@guard-macro (if (memv wy40fc@t '(define-enumeration)) wy30d9@define-enumeration-macro (if (memv wy40fc@t '(trace-lambda)) wy30cb@trace-lambda-macro (if (memv wy40fc@t '(trace-define)) wy30cd@trace-define-macro (if (memv wy40fc@t '(trace-define-syntax)) wy30cf@trace-define-syntax-macro (if (memv wy40fc@t '(trace-let-syntax)) wy30d3@trace-let-syntax-macro (if (memv wy40fc@t '(trace-letrec-syntax)) wy30d5@trace-letrec-syntax-macro (if (memv wy40fc@t '(define-condition-type)) wy30ff@define-condition-type-macro (if (memv wy40fc@t '(parameterize)) wy3103@parameterize-macro (if (memv wy40fc@t '(include-into)) wy30f3@include-into-macro (if (memv wy40fc@t '(eol-style)) (lambda (wy40fe@x) (wy3119@symbol-macro wy40fe@x '(none lf cr crlf nel crnel ls))) (if (memv wy40fc@t '(error-handling-mode)) (lambda (wy4100@x) (wy3119@symbol-macro wy4100@x '(ignore raise replace))) (if (memv wy40fc@t '(buffer-mode)) (lambda (wy4102@x) (wy3119@symbol-macro wy4102@x '(none line block))) (if (memv wy40fc@t '(file-options)) wy2e7d@file-options-macro (if (memv wy40fc@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) wy3101@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" wy40fa@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" wy40fa@x))))) (set! wy4c1e@wy311b@macro-transformer wy311b@macro-transformer) (set! wy311d@local-macro-transformer (lambda (wy4104@x) (car wy4104@x))) (set! wy4c1f@wy311d@local-macro-transformer wy311d@local-macro-transformer) (set! wy311f@do-macro-call (lambda (wy4106@transformer wy4107@expr wy4108@rib) (let ((wy410c@out (wy4106@transformer (wy2eee@add-mark wy2ee6@anti-mark '#f wy4107@expr '#f)))) (begin (let wy4110@f ((wy410e@x wy410c@out)) (if (not (wy2ece@stx? wy410e@x)) (if (pair? wy410e@x) (begin (wy4110@f (car wy410e@x)) (wy4110@f (cdr wy410e@x))) (if (vector? wy410e@x) (vector-for-each wy4110@f wy410e@x) (if (symbol? wy410e@x) (wy31e9@syntax-violation '#f '"raw symbol encountered in output of macro" wy4107@expr wy410e@x) (void)))) (void))) (wy2eee@add-mark (wy2ee4@gen-mark) wy4108@rib wy410c@out wy4107@expr))))) (set! wy4c20@wy311f@do-macro-call wy311f@do-macro-call) (set! wy3121@chi-macro (lambda (wy4112@p wy4113@e wy4114@rib) (wy311f@do-macro-call (wy311b@macro-transformer wy4112@p) wy4113@e wy4114@rib))) (set! wy4c21@wy3121@chi-macro wy3121@chi-macro) (set! wy3123@chi-local-macro (lambda (wy4118@p wy4119@e wy411a@rib) (wy311f@do-macro-call (wy311d@local-macro-transformer wy4118@p) wy4119@e wy411a@rib))) (set! wy4c22@wy3123@chi-local-macro wy3123@chi-local-macro) (set! wy3125@chi-global-macro (lambda (wy411e@p wy411f@e wy4120@rib) (let ((wy4124@lib (car wy411e@p)) (wy4125@loc (cdr wy411e@p))) (begin (wy2d1f@wy2b6e@visit-library wy4124@lib) (let ((wy4128@x (symbol-value wy4125@loc))) (let ((wy412a@transformer (if (procedure? wy4128@x) wy4128@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" wy4128@x)))) (wy311f@do-macro-call wy412a@transformer wy411f@e wy4120@rib))))))) (set! wy4c23@wy3125@chi-global-macro wy3125@chi-global-macro) (set! wy3127@chi-expr* (lambda (wy412c@e* wy412d@r wy412e@mr) (if (null? wy412c@e*) '() (let ((wy4132@e (wy312b@chi-expr (car wy412c@e*) wy412d@r wy412e@mr))) (cons wy4132@e (wy3127@chi-expr* (cdr wy412c@e*) wy412d@r wy412e@mr)))))) (set! wy4c24@wy3127@chi-expr* wy3127@chi-expr*) (set! wy3129@chi-application (lambda (wy4134@e wy4135@r wy4136@mr) (let ((wy413a@t wy4134@e)) (let ((wy413c@ls/false (wy3109@syntax-dispatch wy413a@t '(any . each-any)))) (if wy413c@ls/false (apply (lambda (wy413e@rator wy413f@rands) (let ((wy4142@rator (wy312b@chi-expr wy413e@rator wy4135@r wy4136@mr))) (cons wy4142@rator (wy3127@chi-expr* wy413f@rands wy4135@r wy4136@mr)))) wy413c@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy413a@t)))))) (set! wy4c25@wy3129@chi-application wy3129@chi-application) (set! wy312b@chi-expr (lambda (wy4144@e wy4145@r wy4146@mr) (call-with-values (lambda () (wy2f24@syntax-type wy4144@e wy4145@r)) (lambda (wy4150@wy414b wy4151@wy414d wy4152@wy414f) (let ((wy4156@kwd wy4152@wy414f) (wy4157@value wy4151@wy414d) (wy4158@type wy4150@wy414b)) (let ((wy415c@t wy4158@type)) (if (memv wy415c@t '(core-macro)) (let ((wy415e@transformer (wy3117@core-macro-transformer wy4157@value))) (wy415e@transformer wy4144@e wy4145@r wy4146@mr)) (if (memv wy415c@t '(global)) (let ((wy4160@lib (car wy4157@value))) (let ((wy4162@loc (cdr wy4157@value))) (begin ((wy3171@inv-collector) wy4160@lib) wy4162@loc))) (if (memv wy415c@t '(core-prim)) (let ((wy4164@name wy4157@value)) (list 'primitive wy4164@name)) (if (memv wy415c@t '(call)) (wy3129@chi-application wy4144@e wy4145@r wy4146@mr) (if (memv wy415c@t '(lexical)) (let ((wy4166@lex (wy3093@lexical-var wy4157@value))) wy4166@lex) (if (memv wy415c@t '(global-macro global-macro!)) (wy312b@chi-expr (wy3125@chi-global-macro wy4157@value wy4144@e '#f) wy4145@r wy4146@mr) (if (memv wy415c@t '(local-macro local-macro!)) (wy312b@chi-expr (wy3123@chi-local-macro wy4157@value wy4144@e '#f) wy4145@r wy4146@mr) (if (memv wy415c@t '(macro macro!)) (wy312b@chi-expr (wy3121@chi-macro wy4157@value wy4144@e '#f) wy4145@r wy4146@mr) (if (memv wy415c@t '(constant)) (let ((wy4168@datum wy4157@value)) (list 'quote wy4168@datum)) (if (memv wy415c@t '(set!)) (wy312d@chi-set! wy4144@e wy4145@r wy4146@mr) (if (memv wy415c@t '(begin)) (let ((wy416a@t wy4144@e)) (let ((wy416c@ls/false (wy3109@syntax-dispatch wy416a@t '(_ any . each-any)))) (if wy416c@ls/false (apply (lambda (wy416e@x wy416f@x*) (wy2e67@wy2dc7@build-sequence '#f (wy3127@chi-expr* (cons wy416e@x wy416f@x*) wy4145@r wy4146@mr))) wy416c@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy416a@t)))) (if (memv wy415c@t '(let-syntax letrec-syntax)) (let ((wy4172@t wy4144@e)) (let ((wy4174@ls/false (wy3109@syntax-dispatch wy4172@t '(_ #(each (any any)) any . each-any)))) (if (and wy4174@ls/false (apply (lambda (wy4176@xlhs* wy4177@xrhs* wy4178@xbody wy4179@xbody*) (if (not (wy2f0a@valid-bound-ids? wy4176@xlhs*)) (wy31e9@syntax-violation '#f '"invalid identifiers" wy4144@e) (void))) wy4174@ls/false)) (apply (lambda (wy417e@xlhs* wy417f@xrhs* wy4180@xbody wy4181@xbody*) (let ((wy4186@xlab* (map wy2e8e@gen-label wy417e@xlhs*))) (let ((wy4188@xrib (wy2ec2@make-full-rib wy417e@xlhs* wy4186@xlab*))) (let ((wy418a@xb* (map (lambda (wy418c@x) (wy2f3a@make-eval-transformer (wy3163@expand-transformer (if (eq? wy4158@type 'let-syntax) wy418c@x (wy2eec@add-subst wy4188@xrib wy418c@x)) wy4146@mr))) wy417f@xrhs*))) (wy2e67@wy2dc7@build-sequence '#f (wy3127@chi-expr* (map (lambda (wy418e@x) (wy2eec@add-subst wy4188@xrib wy418e@x)) (cons wy4180@xbody wy4181@xbody*)) (append (map cons wy4186@xlab* wy418a@xb*) wy4145@r) (append (map cons wy4186@xlab* wy418a@xb*) wy4146@mr))))))) wy4174@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4172@t)))) (if (memv wy415c@t '(displaced-lexical)) (wy31e9@syntax-violation '#f '"identifier out of context" wy4144@e) (if (memv wy415c@t '(syntax)) (wy31e9@syntax-violation '#f '"reference to pattern variable outside a syntax form" wy4144@e) (if (memv wy415c@t '(define define-syntax module import library)) (wy31e9@syntax-violation '#f (string-append (let ((wy4190@t wy4158@type)) (if (memv wy4190@t '(define)) '"a definition" (if (memv wy4190@t '(define-syntax)) '"a define-syntax" (if (memv wy4190@t '(module)) '"a module definition" (if (memv wy4190@t '(library)) '"a library definition" (if (memv wy4190@t '(import)) '"an import declaration" (if (memv wy4190@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") wy4144@e) (if (memv wy415c@t '(mutable)) (wy31e9@syntax-violation '#f '"attempt to reference an unexportable variable" wy4144@e) (wy31e9@syntax-violation '#f '"invalid expression" wy4144@e))))))))))))))))))))))) (set! wy4c26@wy312b@chi-expr wy312b@chi-expr) (set! wy312d@chi-set! (lambda (wy4192@e wy4193@r wy4194@mr) (let ((wy4198@t wy4192@e)) (let ((wy419a@ls/false (wy3109@syntax-dispatch wy4198@t '(_ any any)))) (if (and wy419a@ls/false (apply (lambda (wy419c@x wy419d@v) (wy2f02@id? wy419c@x)) wy419a@ls/false)) (apply (lambda (wy41a0@x wy41a1@v) (call-with-values (lambda () (wy2f24@syntax-type wy41a0@x wy4193@r)) (lambda (wy41aa@wy41a5 wy41ab@wy41a7 wy41ac@wy41a9) (let ((wy41b0@kwd wy41ac@wy41a9) (wy41b1@value wy41ab@wy41a7) (wy41b2@type wy41aa@wy41a5)) (let ((wy41b6@t wy41b2@type)) (if (memv wy41b6@t '(lexical)) (begin (wy3097@set-lexical-mutable! wy41b1@value '#t) (list 'set! (wy3093@lexical-var wy41b1@value) (wy312b@chi-expr wy41a1@v wy4193@r wy4194@mr))) (if (memv wy41b6@t '(core-prim)) (wy31e9@syntax-violation '#f '"cannot modify imported core primitive" wy4192@e) (if (memv wy41b6@t '(global)) (wy31e9@syntax-violation '#f '"attempt to modify imported binding" wy4192@e) (if (memv wy41b6@t '(global-macro!)) (wy312b@chi-expr (wy3125@chi-global-macro wy41b1@value wy4192@e '#f) wy4193@r wy4194@mr) (if (memv wy41b6@t '(local-macro!)) (wy312b@chi-expr (wy3123@chi-local-macro wy41b1@value wy4192@e '#f) wy4193@r wy4194@mr) (if (memv wy41b6@t '(mutable)) (wy31e9@syntax-violation '#f '"attempt to assign to an unexportable variable" wy4192@e) (wy31e9@syntax-violation '#f '"invalid syntax" wy4192@e)))))))))))) wy419a@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4198@t)))))) (set! wy4c27@wy312d@chi-set! wy312d@chi-set!) (set! wy312f@verify-formals (lambda (wy41b8@fmls wy41b9@stx) (let ((wy41bc@t wy41b8@fmls)) (let ((wy41be@ls/false (wy3109@syntax-dispatch wy41bc@t 'each-any))) (if wy41be@ls/false (apply (lambda (wy41c0@x*) (if (not (wy2f0a@valid-bound-ids? wy41c0@x*)) (wy30c3@invalid-fmls-error wy41b9@stx wy41b8@fmls) (void))) wy41be@ls/false) (let ((wy41c2@t wy41bc@t)) (let ((wy41c4@ls/false (wy3109@syntax-dispatch wy41c2@t '#(each+ any () any)))) (if wy41c4@ls/false (apply (lambda (wy41c6@x* wy41c7@x) (if (not (wy2f0a@valid-bound-ids? (cons wy41c7@x wy41c6@x*))) (wy30c3@invalid-fmls-error wy41b9@stx wy41b8@fmls) (void))) wy41c4@ls/false) (let ((wy41ca@t wy41c2@t)) (let ((wy41cc@ls/false (wy3109@syntax-dispatch wy41ca@t '_))) (if wy41cc@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid syntax" wy41b9@stx)) wy41cc@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy41ca@t)))))))))))) (set! wy4c28@wy312f@verify-formals wy312f@verify-formals) (set! wy3131@chi-lambda-clause (lambda (wy41ce@stx wy41cf@fmls wy41d0@body* wy41d1@r wy41d2@mr) (let ((wy41d8@t wy41cf@fmls)) (let ((wy41da@ls/false (wy3109@syntax-dispatch wy41d8@t 'each-any))) (if wy41da@ls/false (apply (lambda (wy41dc@x*) (begin (wy312f@verify-formals wy41cf@fmls wy41ce@stx) (let ((wy41de@lex* (map wy2e8a@gen-lexical wy41dc@x*)) (wy41df@lab* (map wy2e8e@gen-label wy41dc@x*))) (values wy41de@lex* (wy3141@chi-internal (wy2eec@add-subst (wy2ec2@make-full-rib wy41dc@x* wy41df@lab*) wy41d0@body*) (wy309b@add-lexicals wy41df@lab* wy41de@lex* wy41d1@r) wy41d2@mr))))) wy41da@ls/false) (let ((wy41e2@t wy41d8@t)) (let ((wy41e4@ls/false (wy3109@syntax-dispatch wy41e2@t '#(each+ any () any)))) (if wy41e4@ls/false (apply (lambda (wy41e6@x* wy41e7@x) (begin (wy312f@verify-formals wy41cf@fmls wy41ce@stx) (let ((wy41ea@lex* (map wy2e8a@gen-lexical wy41e6@x*)) (wy41eb@lab* (map wy2e8e@gen-label wy41e6@x*)) (wy41ec@lex (wy2e8a@gen-lexical wy41e7@x)) (wy41ed@lab (wy2e8e@gen-label wy41e7@x))) (values (append wy41ea@lex* wy41ec@lex) (wy3141@chi-internal (wy2eec@add-subst (wy2ec2@make-full-rib (cons wy41e7@x wy41e6@x*) (cons wy41ed@lab wy41eb@lab*)) wy41d0@body*) (wy309b@add-lexicals (cons wy41ed@lab wy41eb@lab*) (cons wy41ec@lex wy41ea@lex*) wy41d1@r) wy41d2@mr))))) wy41e4@ls/false) (let ((wy41f2@t wy41e2@t)) (let ((wy41f4@ls/false (wy3109@syntax-dispatch wy41f2@t '_))) (if wy41f4@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid syntax" wy41cf@fmls)) wy41f4@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy41f2@t)))))))))))) (set! wy4c29@wy3131@chi-lambda-clause wy3131@chi-lambda-clause) (set! wy3133@chi-lambda-clause* (lambda (wy41f6@stx wy41f7@fmls* wy41f8@body** wy41f9@r wy41fa@mr) (if (null? wy41f7@fmls*) (values '() '()) (call-with-values (lambda () (wy3131@chi-lambda-clause wy41f6@stx (car wy41f7@fmls*) (car wy41f8@body**) wy41f9@r wy41fa@mr)) (lambda (wy4204@wy4201 wy4205@wy4203) (let ((wy4208@b wy4205@wy4203) (wy4209@a wy4204@wy4201)) (call-with-values (lambda () (wy3133@chi-lambda-clause* wy41f6@stx (cdr wy41f7@fmls*) (cdr wy41f8@body**) wy41f9@r wy41fa@mr)) (lambda (wy4210@wy420d wy4211@wy420f) (let ((wy4214@b* wy4211@wy420f) (wy4215@a* wy4210@wy420d)) (values (cons wy4209@a wy4215@a*) (cons wy4208@b wy4214@b*))))))))))) (set! wy4c2a@wy3133@chi-lambda-clause* wy3133@chi-lambda-clause*) (set! wy3135@chi-defun (lambda (wy4218@x wy4219@r wy421a@mr) (let ((wy421e@fmls (car wy4218@x)) (wy421f@body* (cdr wy4218@x))) (call-with-values (lambda () (wy3131@chi-lambda-clause wy421e@fmls wy421e@fmls wy421f@body* wy4219@r wy421a@mr)) (lambda (wy4226@wy4223 wy4227@wy4225) (let ((wy422a@body wy4227@wy4225) (wy422b@fmls wy4226@wy4223)) (wy2e65@wy2d97@build-lambda '#f wy422b@fmls wy422a@body))))))) (set! wy4c2b@wy3135@chi-defun wy3135@chi-defun) (set! wy3137@chi-rhs (lambda (wy422e@rhs wy422f@r wy4230@mr) (let ((wy4234@t (car wy422e@rhs))) (if (memv wy4234@t '(defun)) (wy3135@chi-defun (cdr wy422e@rhs) wy422f@r wy4230@mr) (if (memv wy4234@t '(expr)) (let ((wy4236@expr (cdr wy422e@rhs))) (wy312b@chi-expr wy4236@expr wy422f@r wy4230@mr)) (if (memv wy4234@t '(top-expr)) (let ((wy4238@expr (cdr wy422e@rhs))) (wy2e67@wy2dc7@build-sequence '#f (list (wy312b@chi-expr wy4238@expr wy422f@r wy4230@mr) (wy2e68@wy2dc9@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" wy422e@rhs))))))) (set! wy4c2c@wy3137@chi-rhs wy3137@chi-rhs) (set! wy3139@expand-interaction-rhs*/init* (lambda (wy423a@lhs* wy423b@rhs* wy423c@init* wy423d@r wy423e@mr) (let wy4248@f ((wy4244@lhs* wy423a@lhs*) (wy4245@rhs* wy423b@rhs*)) (if (null? wy4244@lhs*) (map (lambda (wy424a@x) (wy312b@chi-expr wy424a@x wy423d@r wy423e@mr)) wy423c@init*) (let ((wy424c@lhs (car wy4244@lhs*)) (wy424d@rhs (car wy4245@rhs*))) (let ((wy4250@t (car wy424d@rhs))) (if (memv wy4250@t '(defun)) (let ((wy4252@rhs (wy3135@chi-defun (cdr wy424d@rhs) wy423d@r wy423e@mr))) (cons (list 'set! wy424c@lhs wy4252@rhs) (wy4248@f (cdr wy4244@lhs*) (cdr wy4245@rhs*)))) (if (memv wy4250@t '(expr)) (let ((wy4254@rhs (wy312b@chi-expr (cdr wy424d@rhs) wy423d@r wy423e@mr))) (cons (list 'set! wy424c@lhs wy4254@rhs) (wy4248@f (cdr wy4244@lhs*) (cdr wy4245@rhs*)))) (if (memv wy4250@t '(top-expr)) (let ((wy4256@e (wy312b@chi-expr (cdr wy424d@rhs) wy423d@r wy423e@mr))) (cons wy4256@e (wy4248@f (cdr wy4244@lhs*) (cdr wy4245@rhs*)))) (error 'expand-interaction '"invallid" wy424d@rhs)))))))))) (set! wy4c2d@wy3139@expand-interaction-rhs*/init* wy3139@expand-interaction-rhs*/init*) (set! wy313b@chi-rhs* (lambda (wy4258@rhs* wy4259@r wy425a@mr) (let wy4260@f ((wy425e@ls wy4258@rhs*)) (if (null? wy425e@ls) '() (let ((wy4262@a (wy3137@chi-rhs (car wy425e@ls) wy4259@r wy425a@mr))) (cons wy4262@a (wy4260@f (cdr wy425e@ls)))))))) (set! wy4c2e@wy313b@chi-rhs* wy313b@chi-rhs*) (set! wy313d@find-bound=? (lambda (wy4264@x wy4265@lhs* wy4266@rhs*) (if (null? wy4265@lhs*) '#f (if (wy2f06@bound-id=? wy4264@x (car wy4265@lhs*)) (car wy4266@rhs*) (wy313d@find-bound=? wy4264@x (cdr wy4265@lhs*) (cdr wy4266@rhs*)))))) (set! wy4c2f@wy313d@find-bound=? wy313d@find-bound=?) (set! wy313f@find-dups (lambda (wy426a@ls) (let wy4270@f ((wy426c@ls wy426a@ls) (wy426d@dups '())) (if (null? wy426c@ls) wy426d@dups (let ((wy4272@t (wy313d@find-bound=? (car wy426c@ls) (cdr wy426c@ls) (cdr wy426c@ls)))) (if wy4272@t ((lambda (wy4274@x) (wy4270@f (cdr wy426c@ls) (cons (list (car wy426c@ls) wy4274@x) wy426d@dups))) wy4272@t) (wy4270@f (cdr wy426c@ls) wy426d@dups))))))) (set! wy4c30@wy313f@find-dups wy313f@find-dups) (set! wy3141@chi-internal (lambda (wy4276@e* wy4277@r wy4278@mr) (let ((wy427c@rib (wy2eb6@make-empty-rib))) (call-with-values (lambda () (wy3161@chi-body* (map (lambda (wy428e@x) (wy2eec@add-subst wy427c@rib wy428e@x)) (wy2f00@syntax->list wy4276@e*)) wy4277@r wy4278@mr '() '() '() '() '() wy427c@rib '#f)) (lambda (wy4290@wy427f wy4291@wy4281 wy4292@wy4283 wy4293@wy4285 wy4294@wy4287 wy4295@wy4289 wy4296@wy428b wy4297@wy428d) (let ((wy42a0@_exp* wy4297@wy428d) (wy42a1@kwd* wy4296@wy428b) (wy42a2@mod** wy4295@wy4289) (wy42a3@rhs* wy4294@wy4287) (wy42a4@lex* wy4293@wy4285) (wy42a5@mr wy4292@wy4283) (wy42a6@r wy4291@wy4281) (wy42a7@e* wy4290@wy427f)) (begin (if (null? wy42a7@e*) (wy31e9@syntax-violation '#f '"no expression in body" wy42a7@e*) (void)) (let ((wy42b0@init* (wy3127@chi-expr* (append (apply append (reverse wy42a2@mod**)) wy42a7@e*) wy42a6@r wy42a5@mr))) (let ((wy42b2@rhs* (wy313b@chi-rhs* wy42a3@rhs* wy42a6@r wy42a5@mr))) (wy2e6c@wy2dd1@build-letrec* '#f (reverse wy42a4@lex*) (reverse wy42b2@rhs*) (wy2e67@wy2dc7@build-sequence '#f wy42b0@init*))))))))))) (set! wy4c31@wy3141@chi-internal wy3141@chi-internal) (set! wy3143@parse-module (lambda (wy42b4@e) (let ((wy42b6@t wy42b4@e)) (let ((wy42b8@ls/false (wy3109@syntax-dispatch wy42b6@t '(_ each-any . each-any)))) (if wy42b8@ls/false (apply (lambda (wy42ba@export* wy42bb@b*) (begin (if (not (for-all wy2f02@id? wy42ba@export*)) (wy31e9@syntax-violation '#f '"module exports must be identifiers" wy42b4@e) (void)) (values '#f (list->vector wy42ba@export*) wy42bb@b*))) wy42b8@ls/false) (let ((wy42be@t wy42b6@t)) (let ((wy42c0@ls/false (wy3109@syntax-dispatch wy42be@t '(_ any each-any . each-any)))) (if wy42c0@ls/false (apply (lambda (wy42c2@name wy42c3@export* wy42c4@b*) (begin (if (not (wy2f02@id? wy42c2@name)) (wy31e9@syntax-violation '#f '"module name must be an identifier" wy42b4@e) (void)) (if (not (for-all wy2f02@id? wy42c3@export*)) (wy31e9@syntax-violation '#f '"module exports must be identifiers" wy42b4@e) (void)) (values wy42c2@name (list->vector wy42c3@export*) wy42c4@b*))) wy42c0@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy42be@t))))))))) (set! wy4c32@wy3143@parse-module wy3143@parse-module) (set! wy314d@module-interface? (lambda (wy42c8@x) (and (simple-struct? wy42c8@x) (eq? (simple-struct-name wy42c8@x) 'module-interface)))) (set! wy4c33@wy314d@module-interface? wy314d@module-interface?) (set! wy314f@module-interface-first-mark (lambda (wy42ca@x) (simple-struct-ref wy42ca@x '0))) (set! wy4c34@wy314f@module-interface-first-mark wy314f@module-interface-first-mark) (set! wy3151@set-module-interface-first-mark! (lambda (wy42cc@x wy42cd@val) (simple-struct-set! wy42cc@x '0 wy42cd@val))) (set! wy4c35@wy3151@set-module-interface-first-mark! wy3151@set-module-interface-first-mark!) (set! wy3153@module-interface-exp-id-vec (lambda (wy42d0@x) (simple-struct-ref wy42d0@x '1))) (set! wy4c36@wy3153@module-interface-exp-id-vec wy3153@module-interface-exp-id-vec) (set! wy3155@set-module-interface-exp-id-vec! (lambda (wy42d2@x wy42d3@val) (simple-struct-set! wy42d2@x '1 wy42d3@val))) (set! wy4c37@wy3155@set-module-interface-exp-id-vec! wy3155@set-module-interface-exp-id-vec!) (set! wy3157@module-interface-exp-lab-vec (lambda (wy42d6@x) (simple-struct-ref wy42d6@x '2))) (set! wy4c38@wy3157@module-interface-exp-lab-vec wy3157@module-interface-exp-lab-vec) (set! wy3159@set-module-interface-exp-lab-vec! (lambda (wy42d8@x wy42d9@val) (simple-struct-set! wy42d8@x '2 wy42d9@val))) (set! wy4c39@wy3159@set-module-interface-exp-lab-vec! wy3159@set-module-interface-exp-lab-vec!) (set! wy315b@dummy '3) (set! wy4c3a@wy315b@dummy wy315b@dummy) (set! wy315d@module-interface-exp-id* (lambda (wy42dc@iface wy42dd@id) (letrec* ((wy42e1@diff-marks (lambda (wy42e8@ls wy42e9@x) (begin (if (null? wy42e8@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((wy42ec@a (car wy42e8@ls))) (if (eq? wy42ec@a wy42e9@x) '() (cons wy42ec@a (wy42e1@diff-marks (cdr wy42e8@ls) wy42e9@x)))))))) (let ((wy42e2@diff (wy42e1@diff-marks (wy2ed4@stx-mark* wy42dd@id) (wy314f@module-interface-first-mark wy42dc@iface))) (wy42e3@id-vec (wy3153@module-interface-exp-id-vec wy42dc@iface))) (if (null? wy42e2@diff) wy42e3@id-vec (vector-map (lambda (wy42e6@x) (make-simple-struct 'stx '5 (list (wy2ed0@stx-expr wy42e6@x) (append wy42e2@diff (wy2ed4@stx-mark* wy42e6@x)) '() '()))) wy42e3@id-vec)))))) (set! wy4c3b@wy315d@module-interface-exp-id* wy315d@module-interface-exp-id*) (set! wy315f@chi-internal-module (lambda (wy42ee@e wy42ef@r wy42f0@mr wy42f1@lex* wy42f2@rhs* wy42f3@mod** wy42f4@kwd*) (call-with-values (lambda () (wy3143@parse-module wy42ee@e)) (lambda (wy4302@wy42fd wy4303@wy42ff wy4304@wy4301) (let ((wy4308@e* wy4304@wy4301) (wy4309@exp-id* wy4303@wy42ff) (wy430a@name wy4302@wy42fd)) (let ((wy430e@rib (wy2eb6@make-empty-rib))) (let ((wy4310@e* (map (lambda (wy4312@x) (wy2eec@add-subst wy430e@rib wy4312@x)) (wy2f00@syntax->list wy4308@e*)))) (call-with-values (lambda () (wy3161@chi-body* wy4310@e* wy42ef@r wy42f0@mr wy42f1@lex* wy42f2@rhs* wy42f3@mod** wy42f4@kwd* '() wy430e@rib '#f)) (lambda (wy4324@wy4315 wy4325@wy4317 wy4326@wy4319 wy4327@wy431b wy4328@wy431d wy4329@wy431f wy432a@wy4321 wy432b@wy4323) (let ((wy4334@_exp* wy432b@wy4323) (wy4335@kwd* wy432a@wy4321) (wy4336@mod** wy4329@wy431f) (wy4337@rhs* wy4328@wy431d) (wy4338@lex* wy4327@wy431b) (wy4339@mr wy4326@wy4319) (wy433a@r wy4325@wy4317) (wy433b@e* wy4324@wy4315)) (let ((wy4344@exp-lab* (vector-map (lambda (wy4348@x) (or (wy2f18@id->label (make-simple-struct 'stx '5 (list (wy2f04@id->sym wy4348@x) (wy2ed4@stx-mark* wy4348@x) (list wy430e@rib) '()))) (wy31e9@syntax-violation '#f '"cannot find module export" wy4348@x))) wy4309@exp-id*)) (wy4345@mod** (cons wy433b@e* wy4336@mod**))) (if (not wy430a@name) (values wy4338@lex* wy4337@rhs* wy4309@exp-id* wy4344@exp-lab* wy433a@r wy4339@mr wy4345@mod** wy4335@kwd*) (let ((wy434a@lab (wy2e8e@gen-label 'module)) (wy434b@iface (make-simple-struct 'module-interface '4 (list (car (wy2ed4@stx-mark* wy430a@name)) (vector-map (lambda (wy434e@x) (make-simple-struct 'stx '5 (list (wy2ed0@stx-expr wy434e@x) (wy2ed4@stx-mark* wy434e@x) '() '()))) wy4309@exp-id*) wy4344@exp-lab*)))) (values wy4338@lex* wy4337@rhs* (vector wy430a@name) (vector wy434a@lab) (cons (cons wy434a@lab (cons '$module wy434b@iface)) wy433a@r) (cons (cons wy434a@lab (cons '$module wy434b@iface)) wy4339@mr) wy4345@mod** wy4335@kwd*)))))))))))))) (set! wy4c3c@wy315f@chi-internal-module wy315f@chi-internal-module) (set! wy3161@chi-body* (lambda (wy4350@e* wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4356@kwd* wy4357@exp* wy4358@rib wy4359@top?) (if (null? wy4350@e*) (values wy4350@e* wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4356@kwd* wy4357@exp*) (let ((wy4364@e (car wy4350@e*))) (call-with-values (lambda () (wy2f24@syntax-type wy4364@e wy4351@r)) (lambda (wy436c@wy4367 wy436d@wy4369 wy436e@wy436b) (let ((wy4372@kwd wy436e@wy436b) (wy4373@value wy436d@wy4369) (wy4374@type wy436c@wy4367)) (let ((wy4378@kwd* (if (wy2f02@id? wy4372@kwd) (cons wy4372@kwd wy4356@kwd*) wy4356@kwd*))) (let ((wy437a@t wy4374@type)) (if (memv wy437a@t '(define)) (call-with-values (lambda () (wy308b@parse-define wy4364@e)) (lambda (wy4380@wy437d wy4381@wy437f) (let ((wy4384@rhs wy4381@wy437f) (wy4385@id wy4380@wy437d)) (begin (if (wy2f0e@bound-id-member? wy4385@id wy4378@kwd*) (wy31e9@syntax-violation '#f '"cannot redefine keyword" wy4364@e) (void)) (call-with-values (lambda () (wy2e92@gen-define-label+loc wy4385@id wy4358@rib)) (lambda (wy438c@wy4389 wy438d@wy438b) (let ((wy4390@lex wy438d@wy438b) (wy4391@lab wy438c@wy4389)) (begin (wy2eb8@extend-rib! wy4358@rib wy4385@id wy4391@lab) (wy3161@chi-body* (cdr wy4350@e*) (wy3099@add-lexical wy4391@lab wy4390@lex wy4351@r) wy4352@mr (cons wy4390@lex wy4353@lex*) (cons wy4384@rhs wy4354@rhs*) wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?))))))))) (if (memv wy437a@t '(define-syntax)) (call-with-values (lambda () (wy308d@parse-define-syntax wy4364@e)) (lambda (wy4398@wy4395 wy4399@wy4397) (let ((wy439c@rhs wy4399@wy4397) (wy439d@id wy4398@wy4395)) (begin (if (wy2f0e@bound-id-member? wy439d@id wy4378@kwd*) (wy31e9@syntax-violation '#f '"cannot redefine keyword" wy4364@e) (void)) (let ((wy43a0@lab (wy2e94@gen-define-label wy439d@id wy4358@rib)) (wy43a1@expanded-rhs (wy3163@expand-transformer wy439c@rhs wy4352@mr))) (begin (wy2eb8@extend-rib! wy4358@rib wy439d@id wy43a0@lab) (let ((wy43a4@b (wy2f3a@make-eval-transformer wy43a1@expanded-rhs))) (wy3161@chi-body* (cdr wy4350@e*) (cons (cons wy43a0@lab wy43a4@b) wy4351@r) (cons (cons wy43a0@lab wy43a4@b) wy4352@mr) wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?)))))))) (if (memv wy437a@t '(let-syntax letrec-syntax)) (let ((wy43a6@t wy4364@e)) (let ((wy43a8@ls/false (wy3109@syntax-dispatch wy43a6@t '(_ #(each (any any)) . each-any)))) (if (and wy43a8@ls/false (apply (lambda (wy43aa@xlhs* wy43ab@xrhs* wy43ac@xbody*) (if (not (wy2f0a@valid-bound-ids? wy43aa@xlhs*)) (wy31e9@syntax-violation '#f '"invalid identifiers" wy4364@e) (void))) wy43a8@ls/false)) (apply (lambda (wy43b0@xlhs* wy43b1@xrhs* wy43b2@xbody*) (let ((wy43b6@xlab* (map wy2e8e@gen-label wy43b0@xlhs*))) (let ((wy43b8@xrib (wy2ec2@make-full-rib wy43b0@xlhs* wy43b6@xlab*))) (let ((wy43ba@xb* (map (lambda (wy43bc@x) (wy2f3a@make-eval-transformer (wy3163@expand-transformer (if (eq? wy4374@type 'let-syntax) wy43bc@x (wy2eec@add-subst wy43b8@xrib wy43bc@x)) wy4352@mr))) wy43b1@xrhs*))) (wy3161@chi-body* (append (map (lambda (wy43be@x) (wy2eec@add-subst wy43b8@xrib wy43be@x)) wy43b2@xbody*) (cdr wy4350@e*)) (append (map cons wy43b6@xlab* wy43ba@xb*) wy4351@r) (append (map cons wy43b6@xlab* wy43ba@xb*) wy4352@mr) wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?))))) wy43a8@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy43a6@t)))) (if (memv wy437a@t '(begin)) (let ((wy43c0@t wy4364@e)) (let ((wy43c2@ls/false (wy3109@syntax-dispatch wy43c0@t '(_ . each-any)))) (if wy43c2@ls/false (apply (lambda (wy43c4@x*) (wy3161@chi-body* (append wy43c4@x* (cdr wy4350@e*)) wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?)) wy43c2@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy43c0@t)))) (if (memv wy437a@t '(global-macro global-macro!)) (wy3161@chi-body* (cons (wy3125@chi-global-macro wy4373@value wy4364@e wy4358@rib) (cdr wy4350@e*)) wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?) (if (memv wy437a@t '(local-macro local-macro!)) (wy3161@chi-body* (cons (wy3123@chi-local-macro wy4373@value wy4364@e wy4358@rib) (cdr wy4350@e*)) wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?) (if (memv wy437a@t '(macro macro!)) (wy3161@chi-body* (cons (wy3121@chi-macro wy4373@value wy4364@e wy4358@rib) (cdr wy4350@e*)) wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?) (if (memv wy437a@t '(module)) (call-with-values (lambda () (wy315f@chi-internal-module wy4364@e wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd*)) (lambda (wy43d6@wy43c7 wy43d7@wy43c9 wy43d8@wy43cb wy43d9@wy43cd wy43da@wy43cf wy43db@wy43d1 wy43dc@wy43d3 wy43dd@wy43d5) (let ((wy43e6@kwd* wy43dd@wy43d5) (wy43e7@mod** wy43dc@wy43d3) (wy43e8@mr wy43db@wy43d1) (wy43e9@r wy43da@wy43cf) (wy43ea@m-exp-lab* wy43d9@wy43cd) (wy43eb@m-exp-id* wy43d8@wy43cb) (wy43ec@rhs* wy43d7@wy43c9) (wy43ed@lex* wy43d6@wy43c7)) (begin (vector-for-each (lambda (wy43f6@id wy43f7@lab) (wy2eb8@extend-rib! wy4358@rib wy43f6@id wy43f7@lab)) wy43eb@m-exp-id* wy43ea@m-exp-lab*) (wy3161@chi-body* (cdr wy4350@e*) wy43e9@r wy43e8@mr wy43ed@lex* wy43ec@rhs* wy43e7@mod** wy43e6@kwd* wy4357@exp* wy4358@rib wy4359@top?))))) (if (memv wy437a@t '(library)) (begin (wy31cb@library-expander (wy2f16@stx->datum wy4364@e)) (wy3161@chi-body* (cdr wy4350@e*) wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?)) (if (memv wy437a@t '(export)) (let ((wy43fa@t wy4364@e)) (let ((wy43fc@ls/false (wy3109@syntax-dispatch wy43fa@t '(_ . each-any)))) (if wy43fc@ls/false (apply (lambda (wy43fe@exp-decl*) (wy3161@chi-body* (cdr wy4350@e*) wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* (append wy43fe@exp-decl* wy4357@exp*) wy4358@rib wy4359@top?)) wy43fc@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy43fa@t)))) (if (memv wy437a@t '(import)) (letrec* ((wy4401@module-import? (lambda (wy4454@e) (let ((wy4456@t wy4454@e)) (let ((wy4458@ls/false (wy3109@syntax-dispatch wy4456@t '(_ any)))) (if (and wy4458@ls/false (apply (lambda (wy445a@id) (wy2f02@id? wy445a@id)) wy4458@ls/false)) (apply (lambda (wy445c@id) '#t) wy4458@ls/false) (let ((wy445e@t wy4456@t)) (let ((wy4460@ls/false (wy3109@syntax-dispatch wy445e@t '(_ . each-any)))) (if wy4460@ls/false (apply (lambda (wy4462@imp*) '#f) wy4460@ls/false) (let ((wy4464@t wy445e@t)) (let ((wy4466@ls/false (wy3109@syntax-dispatch wy4464@t '_))) (if wy4466@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"malformed import form" wy4454@e)) wy4466@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4464@t)))))))))))) (wy4403@module-import (lambda (wy4432@e wy4433@r) (let ((wy4436@t wy4432@e)) (let ((wy4438@ls/false (wy3109@syntax-dispatch wy4436@t '(_ any)))) (if (and wy4438@ls/false (apply (lambda (wy443a@id) (wy2f02@id? wy443a@id)) wy4438@ls/false)) (apply (lambda (wy443c@id) (call-with-values (lambda () (wy2f24@syntax-type wy443c@id wy4433@r)) (lambda (wy4444@wy443f wy4445@wy4441 wy4446@wy4443) (let ((wy444a@kwd wy4446@wy4443) (wy444b@value wy4445@wy4441) (wy444c@type wy4444@wy443f)) (let ((wy4450@t wy444c@type)) (if (memv wy4450@t '($module)) (let ((wy4452@iface wy444b@value)) (values (wy315d@module-interface-exp-id* wy4452@iface wy443c@id) (wy3157@module-interface-exp-lab-vec wy4452@iface))) (wy31e9@syntax-violation '#f '"invalid import" wy4432@e))))))) wy4438@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4436@t)))))) (wy4405@library-import (lambda (wy4416@e) (let ((wy4418@t wy4416@e)) (let ((wy441a@ls/false (wy3109@syntax-dispatch wy4418@t '(any . each-any)))) (if wy441a@ls/false (apply (lambda (wy441c@ctxt wy441d@imp*) (call-with-values (lambda () (wy316b@parse-import-spec* (wy31ef@syntax->datum wy441d@imp*))) (lambda (wy4424@wy4421 wy4425@wy4423) (let ((wy4428@subst-labels wy4425@wy4423) (wy4429@subst-names wy4424@wy4421)) (values (vector-map (lambda (wy442c@name) (wy2ee2@datum->stx wy441c@ctxt wy442c@name)) wy4429@subst-names) wy4428@subst-labels))))) wy441a@ls/false) (let ((wy442e@t wy4418@t)) (let ((wy4430@ls/false (wy3109@syntax-dispatch wy442e@t '_))) (if wy4430@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid import form" wy4416@e)) wy4430@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy442e@t)))))))))) (begin (call-with-values (lambda () (if (wy4401@module-import? wy4364@e) (wy4403@module-import wy4364@e wy4351@r) (wy4405@library-import wy4364@e))) (lambda (wy440a@wy4407 wy440b@wy4409) (let ((wy440e@lab* wy440b@wy4409) (wy440f@id* wy440a@wy4407)) (vector-for-each (lambda (wy4412@id wy4413@lab) (wy2eb8@extend-rib! wy4358@rib wy4412@id wy4413@lab)) wy440f@id* wy440e@lab*)))) (wy3161@chi-body* (cdr wy4350@e*) wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?))) (if wy4359@top? (wy3161@chi-body* (cdr wy4350@e*) wy4351@r wy4352@mr (cons (wy2e8a@gen-lexical 'dummy) wy4353@lex*) (cons (cons 'top-expr wy4364@e) wy4354@rhs*) wy4355@mod** wy4378@kwd* wy4357@exp* wy4358@rib wy4359@top?) (values wy4350@e* wy4351@r wy4352@mr wy4353@lex* wy4354@rhs* wy4355@mod** wy4378@kwd* wy4357@exp*)))))))))))))))))))))) (set! wy4c3d@wy3161@chi-body* wy3161@chi-body*) (set! wy3163@expand-transformer (lambda (wy4468@expr wy4469@r) (let ((wy446c@rtc (wy316f@make-collector))) (let ((wy446e@expanded-rhs (let ((wy4478@wy4471 wy3171@inv-collector) (wy4479@wy4473 wy3173@vis-collector) (wy447a@wy4475 wy446c@rtc) (wy447b@wy4477 (lambda (wy4480@x) (values)))) (let ((wy4482@swap (lambda () (begin (let ((wy4484@t (wy4478@wy4471))) (begin (wy4478@wy4471 wy447a@wy4475) (set! wy447a@wy4475 wy4484@t))) (let ((wy4486@t (wy4479@wy4473))) (begin (wy4479@wy4473 wy447b@wy4477) (set! wy447b@wy4477 wy4486@t))))))) (dynamic-wind wy4482@swap (lambda () (wy312b@chi-expr wy4468@expr wy4469@r wy4469@r)) wy4482@swap))))) (begin (for-each (let ((wy4488@mark-visit (wy3173@vis-collector))) (lambda (wy448a@x) (begin (wy2d1e@wy2b6c@invoke-library wy448a@x) (wy4488@mark-visit wy448a@x)))) (wy446c@rtc)) wy446e@expanded-rhs))))) (set! wy4c3e@wy3163@expand-transformer wy3163@expand-transformer) (set! wy3165@parse-exports (lambda (wy448c@exp*) (let wy4494@f ((wy448e@exp* wy448c@exp*) (wy448f@int* '()) (wy4490@ext* '())) (if (null? wy448e@exp*) (begin (if (not (wy2f0a@valid-bound-ids? wy4490@ext*)) (wy31e9@syntax-violation 'export '"invalid exports" (wy313f@find-dups wy4490@ext*)) (void)) (values (map wy31ef@syntax->datum wy4490@ext*) wy448f@int*)) (let ((wy4496@t (car wy448e@exp*))) (let ((wy4498@ls/false (wy3109@syntax-dispatch wy4496@t '(any . #(each (any any)))))) (if wy4498@ls/false (apply (lambda (wy449a@rename wy449b@i* wy449c@e*) (begin (if (not (and (eq? (wy31ef@syntax->datum wy449a@rename) 'rename) (for-all wy2f02@id? wy449b@i*) (for-all wy2f02@id? wy449c@e*))) (wy31e9@syntax-violation 'export '"invalid export specifier" (car wy448e@exp*)) (void)) (wy4494@f (cdr wy448e@exp*) (append wy449b@i* wy448f@int*) (append wy449c@e* wy4490@ext*)))) wy4498@ls/false) (let ((wy44a0@t wy4496@t)) (let ((wy44a2@ls/false (wy3109@syntax-dispatch wy44a0@t 'any))) (if wy44a2@ls/false (apply (lambda (wy44a4@ie) (begin (if (not (wy2f02@id? wy44a4@ie)) (wy31e9@syntax-violation 'export '"invalid export" wy44a4@ie) (void)) (wy4494@f (cdr wy448e@exp*) (cons wy44a4@ie wy448f@int*) (cons wy44a4@ie wy4490@ext*)))) wy44a2@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy44a0@t))))))))))) (set! wy4c3f@wy3165@parse-exports wy3165@parse-exports) (set! wy3167@parse-library-name (lambda (wy44a6@spec) (letrec* ((wy44a9@parse (lambda (wy44b6@x) (let ((wy44b8@t wy44b6@x)) (let ((wy44ba@ls/false (wy3109@syntax-dispatch wy44b8@t '(each-any)))) (if (and wy44ba@ls/false (apply (lambda (wy44bc@v*) (for-all (lambda (wy44be@x) (let ((wy44c0@x (wy31ef@syntax->datum wy44be@x))) (and (integer? wy44c0@x) (exact? wy44c0@x)))) wy44bc@v*)) wy44ba@ls/false)) (apply (lambda (wy44c2@v*) (values '() (map wy31ef@syntax->datum wy44c2@v*))) wy44ba@ls/false) (let ((wy44c4@t wy44b8@t)) (let ((wy44c6@ls/false (wy3109@syntax-dispatch wy44c4@t '(any . any)))) (if (and wy44c6@ls/false (apply (lambda (wy44c8@x wy44c9@rest) (symbol? (wy31ef@syntax->datum wy44c8@x))) wy44c6@ls/false)) (apply (lambda (wy44cc@x wy44cd@rest) (call-with-values (lambda () (wy44a9@parse wy44cd@rest)) (lambda (wy44d4@wy44d1 wy44d5@wy44d3) (let ((wy44d8@v* wy44d5@wy44d3) (wy44d9@x* wy44d4@wy44d1)) (values (cons (wy31ef@syntax->datum wy44cc@x) wy44d9@x*) wy44d8@v*))))) wy44c6@ls/false) (let ((wy44dc@t wy44c4@t)) (let ((wy44de@ls/false (wy3109@syntax-dispatch wy44dc@t '()))) (if wy44de@ls/false (apply (lambda () (values '() '())) wy44de@ls/false) (let ((wy44e0@t wy44dc@t)) (let ((wy44e2@ls/false (wy3109@syntax-dispatch wy44e0@t '_))) (if wy44e2@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid library name" wy44a6@spec)) wy44e2@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy44e0@t)))))))))))))))) (call-with-values (lambda () (wy44a9@parse wy44a6@spec)) (lambda (wy44ae@wy44ab wy44af@wy44ad) (let ((wy44b2@ver* wy44af@wy44ad) (wy44b3@name* wy44ae@wy44ab)) (begin (if (null? wy44b3@name*) (wy31e9@syntax-violation '#f '"empty library name" wy44a6@spec) (void)) (values wy44b3@name* wy44b2@ver*)))))))) (set! wy4c40@wy3167@parse-library-name wy3167@parse-library-name) (set! wy3169@parse-library (lambda (wy44e4@e) (let ((wy44e6@t wy44e4@e)) (let ((wy44e8@ls/false (wy3109@syntax-dispatch wy44e6@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and wy44e8@ls/false (apply (lambda (wy44ea@library wy44eb@name* wy44ec@export wy44ed@exp* wy44ee@import wy44ef@imp* wy44f0@b*) (and (eq? (wy31ef@syntax->datum wy44ec@export) 'export) (eq? (wy31ef@syntax->datum wy44ee@import) 'import) (eq? (wy31ef@syntax->datum wy44ea@library) 'library))) wy44e8@ls/false)) (apply (lambda (wy44f8@library wy44f9@name* wy44fa@export wy44fb@exp* wy44fc@import wy44fd@imp* wy44fe@b*) (values wy44f9@name* wy44fb@exp* wy44fd@imp* wy44fe@b*)) wy44e8@ls/false) (let ((wy4506@t wy44e6@t)) (let ((wy4508@ls/false (wy3109@syntax-dispatch wy4506@t '_))) (if wy4508@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"malformed library" wy44e4@e)) wy4508@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4506@t))))))))) (set! wy4c41@wy3169@parse-library wy3169@parse-library) (set! wy316b@parse-import-spec* (letrec* ((wy450b@idsyn? (lambda (wy4714@x) (symbol? (wy31ef@syntax->datum wy4714@x)))) (wy450d@dup-error (lambda (wy4712@name) (wy31e9@syntax-violation 'import '"two imports with different bindings" wy4712@name))) (wy450f@merge-substs (lambda (wy4700@s wy4701@subst) (letrec* ((wy4705@insert-to-subst (lambda (wy4706@a wy4707@subst) (let ((wy470a@name (car wy4706@a)) (wy470b@label (cdr wy4706@a))) (let ((wy470e@t (assq wy470a@name wy4707@subst))) (if wy470e@t ((lambda (wy4710@x) (if (eq? (cdr wy4710@x) wy470b@label) wy4707@subst (wy450d@dup-error wy470a@name))) wy470e@t) (cons wy4706@a wy4707@subst))))))) (if (null? wy4700@s) wy4701@subst (wy4705@insert-to-subst (car wy4700@s) (wy450f@merge-substs (cdr wy4700@s) wy4701@subst)))))) (wy4511@exclude* (lambda (wy46d0@sym* wy46d1@subst) (letrec* ((wy46d5@exclude (lambda (wy46ee@sym wy46ef@subst) (if (null? wy46ef@subst) (wy31e9@syntax-violation 'import '"cannot rename unbound identifier" wy46ee@sym) (if (eq? wy46ee@sym (caar wy46ef@subst)) (values (cdar wy46ef@subst) (cdr wy46ef@subst)) (let ((wy46f2@a (car wy46ef@subst))) (call-with-values (lambda () (wy46d5@exclude wy46ee@sym (cdr wy46ef@subst))) (lambda (wy46f8@wy46f5 wy46f9@wy46f7) (let ((wy46fc@subst wy46f9@wy46f7) (wy46fd@old wy46f8@wy46f5)) (values wy46fd@old (cons wy46f2@a wy46fc@subst))))))))))) (if (null? wy46d0@sym*) (values '() wy46d1@subst) (call-with-values (lambda () (wy46d5@exclude (car wy46d0@sym*) wy46d1@subst)) (lambda (wy46da@wy46d7 wy46db@wy46d9) (let ((wy46de@subst wy46db@wy46d9) (wy46df@old wy46da@wy46d7)) (call-with-values (lambda () (wy4511@exclude* (cdr wy46d0@sym*) wy46de@subst)) (lambda (wy46e6@wy46e3 wy46e7@wy46e5) (let ((wy46ea@subst wy46e7@wy46e5) (wy46eb@old* wy46e6@wy46e3)) (values (cons wy46df@old wy46eb@old*) wy46ea@subst))))))))))) (wy4513@find* (lambda (wy46c8@sym* wy46c9@subst) (map (lambda (wy46cc@x) (let ((wy46ce@t (assq wy46cc@x wy46c9@subst))) (if wy46ce@t (cdr wy46ce@t) (wy31e9@syntax-violation 'import '"cannot find identifier" wy46cc@x)))) wy46c8@sym*))) (wy4515@rem* (lambda (wy46c0@sym* wy46c1@subst) (let wy46c6@f ((wy46c4@subst wy46c1@subst)) (if (null? wy46c4@subst) '() (if (memq (caar wy46c4@subst) wy46c0@sym*) (wy46c6@f (cdr wy46c4@subst)) (cons (car wy46c4@subst) (wy46c6@f (cdr wy46c4@subst)))))))) (wy4517@remove-dups (lambda (wy46be@ls) (if (null? wy46be@ls) '() (if (memq (car wy46be@ls) (cdr wy46be@ls)) (wy4517@remove-dups (cdr wy46be@ls)) (cons (car wy46be@ls) (wy4517@remove-dups (cdr wy46be@ls))))))) (wy4519@parse-library-name (lambda (wy45d6@spec) (letrec* ((wy45d9@subversion? (lambda (wy46ba@x) (let ((wy46bc@x (wy31ef@syntax->datum wy46ba@x))) (and (integer? wy46bc@x) (exact? wy46bc@x) (>= wy46bc@x '0))))) (wy45db@subversion-pred (lambda (wy465a@x*) (let ((wy465c@t wy465a@x*)) (let ((wy465e@ls/false (wy3109@syntax-dispatch wy465c@t 'any))) (if (and wy465e@ls/false (apply (lambda (wy4660@n) (wy45d9@subversion? wy4660@n)) wy465e@ls/false)) (apply (lambda (wy4662@n) (lambda (wy4664@x) (= wy4664@x (wy31ef@syntax->datum wy4662@n)))) wy465e@ls/false) (let ((wy4666@t wy465c@t)) (let ((wy4668@ls/false (wy3109@syntax-dispatch wy4666@t '(any . each-any)))) (if (and wy4668@ls/false (apply (lambda (wy466a@p? wy466b@sub*) (eq? (wy31ef@syntax->datum wy466a@p?) 'and)) wy4668@ls/false)) (apply (lambda (wy466e@p? wy466f@sub*) (let ((wy4672@p* (map wy45db@subversion-pred wy466f@sub*))) (lambda (wy4674@x) (for-all (lambda (wy4676@p) (wy4676@p wy4674@x)) wy4672@p*)))) wy4668@ls/false) (let ((wy4678@t wy4666@t)) (let ((wy467a@ls/false (wy3109@syntax-dispatch wy4678@t '(any . each-any)))) (if (and wy467a@ls/false (apply (lambda (wy467c@p? wy467d@sub*) (eq? (wy31ef@syntax->datum wy467c@p?) 'or)) wy467a@ls/false)) (apply (lambda (wy4680@p? wy4681@sub*) (let ((wy4684@p* (map wy45db@subversion-pred wy4681@sub*))) (lambda (wy4686@x) (exists (lambda (wy4688@p) (wy4688@p wy4686@x)) wy4684@p*)))) wy467a@ls/false) (let ((wy468a@t wy4678@t)) (let ((wy468c@ls/false (wy3109@syntax-dispatch wy468a@t '(any any)))) (if (and wy468c@ls/false (apply (lambda (wy468e@p? wy468f@sub) (eq? (wy31ef@syntax->datum wy468e@p?) 'not)) wy468c@ls/false)) (apply (lambda (wy4692@p? wy4693@sub) (let ((wy4696@p (wy45db@subversion-pred wy4693@sub))) (lambda (wy4698@x) (not (wy4696@p wy4698@x))))) wy468c@ls/false) (let ((wy469a@t wy468a@t)) (let ((wy469c@ls/false (wy3109@syntax-dispatch wy469a@t '(any any)))) (if (and wy469c@ls/false (apply (lambda (wy469e@p? wy469f@n) (and (eq? (wy31ef@syntax->datum wy469e@p?) '<=) (wy45d9@subversion? wy469f@n))) wy469c@ls/false)) (apply (lambda (wy46a2@p? wy46a3@n) (lambda (wy46a6@x) (<= wy46a6@x (wy31ef@syntax->datum wy46a3@n)))) wy469c@ls/false) (let ((wy46a8@t wy469a@t)) (let ((wy46aa@ls/false (wy3109@syntax-dispatch wy46a8@t '(any any)))) (if (and wy46aa@ls/false (apply (lambda (wy46ac@p? wy46ad@n) (and (eq? (wy31ef@syntax->datum wy46ac@p?) '>=) (wy45d9@subversion? wy46ad@n))) wy46aa@ls/false)) (apply (lambda (wy46b0@p? wy46b1@n) (lambda (wy46b4@x) (>= wy46b4@x (wy31ef@syntax->datum wy46b1@n)))) wy46aa@ls/false) (let ((wy46b6@t wy46a8@t)) (let ((wy46b8@ls/false (wy3109@syntax-dispatch wy46b6@t '_))) (if wy46b8@ls/false (apply (lambda () (wy31e9@syntax-violation 'import '"invalid sub-version spec" wy45d6@spec wy465a@x*)) wy46b8@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy46b6@t)))))))))))))))))))))))) (wy45dd@version-pred (lambda (wy460a@x*) (let ((wy460c@t wy460a@x*)) (let ((wy460e@ls/false (wy3109@syntax-dispatch wy460c@t '()))) (if wy460e@ls/false (apply (lambda () (lambda (wy4610@x) '#t)) wy460e@ls/false) (let ((wy4612@t wy460c@t)) (let ((wy4614@ls/false (wy3109@syntax-dispatch wy4612@t '(any . each-any)))) (if (and wy4614@ls/false (apply (lambda (wy4616@c wy4617@ver*) (eq? (wy31ef@syntax->datum wy4616@c) 'and)) wy4614@ls/false)) (apply (lambda (wy461a@c wy461b@ver*) (let ((wy461e@p* (map wy45dd@version-pred wy461b@ver*))) (lambda (wy4620@x) (for-all (lambda (wy4622@p) (wy4622@p wy4620@x)) wy461e@p*)))) wy4614@ls/false) (let ((wy4624@t wy4612@t)) (let ((wy4626@ls/false (wy3109@syntax-dispatch wy4624@t '(any . each-any)))) (if (and wy4626@ls/false (apply (lambda (wy4628@c wy4629@ver*) (eq? (wy31ef@syntax->datum wy4628@c) 'or)) wy4626@ls/false)) (apply (lambda (wy462c@c wy462d@ver*) (let ((wy4630@p* (map wy45dd@version-pred wy462d@ver*))) (lambda (wy4632@x) (exists (lambda (wy4634@p) (wy4634@p wy4632@x)) wy4630@p*)))) wy4626@ls/false) (let ((wy4636@t wy4624@t)) (let ((wy4638@ls/false (wy3109@syntax-dispatch wy4636@t '(any any)))) (if (and wy4638@ls/false (apply (lambda (wy463a@c wy463b@ver) (eq? (wy31ef@syntax->datum wy463a@c) 'not)) wy4638@ls/false)) (apply (lambda (wy463e@c wy463f@ver) (let ((wy4642@p (wy45dd@version-pred wy463f@ver))) (lambda (wy4644@x) (not (wy4642@p wy4644@x))))) wy4638@ls/false) (let ((wy4646@t wy4636@t)) (let ((wy4648@ls/false (wy3109@syntax-dispatch wy4646@t 'each-any))) (if wy4648@ls/false (apply (lambda (wy464a@sub*) (let ((wy464c@p* (map wy45db@subversion-pred wy464a@sub*))) (lambda (wy464e@x) (let wy4654@f ((wy4650@p* wy464c@p*) (wy4651@x wy464e@x)) (if (null? wy4650@p*) '#t (if (null? wy4651@x) '#f (and ((car wy4650@p*) (car wy4651@x)) (wy4654@f (cdr wy4650@p*) (cdr wy4651@x))))))))) wy4648@ls/false) (let ((wy4656@t wy4646@t)) (let ((wy4658@ls/false (wy3109@syntax-dispatch wy4656@t '_))) (if wy4658@ls/false (apply (lambda () (wy31e9@syntax-violation 'import '"invalid version spec" wy45d6@spec wy460a@x*)) wy4658@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4656@t)))))))))))))))))))))) (let wy45e0@f ((wy45de@x wy45d6@spec)) (let ((wy45e2@t wy45de@x)) (let ((wy45e4@ls/false (wy3109@syntax-dispatch wy45e2@t '(each-any)))) (if wy45e4@ls/false (apply (lambda (wy45e6@version-spec*) (values '() (wy45dd@version-pred wy45e6@version-spec*))) wy45e4@ls/false) (let ((wy45e8@t wy45e2@t)) (let ((wy45ea@ls/false (wy3109@syntax-dispatch wy45e8@t '(any . any)))) (if (and wy45ea@ls/false (apply (lambda (wy45ec@x wy45ed@x*) (wy450b@idsyn? wy45ec@x)) wy45ea@ls/false)) (apply (lambda (wy45f0@x wy45f1@x*) (call-with-values (lambda () (wy45e0@f wy45f1@x*)) (lambda (wy45f8@wy45f5 wy45f9@wy45f7) (let ((wy45fc@pred wy45f9@wy45f7) (wy45fd@name wy45f8@wy45f5)) (values (cons (wy31ef@syntax->datum wy45f0@x) wy45fd@name) wy45fc@pred))))) wy45ea@ls/false) (let ((wy4600@t wy45e8@t)) (let ((wy4602@ls/false (wy3109@syntax-dispatch wy4600@t '()))) (if wy4602@ls/false (apply (lambda () (values '() (lambda (wy4604@x) '#t))) wy4602@ls/false) (let ((wy4606@t wy4600@t)) (let ((wy4608@ls/false (wy3109@syntax-dispatch wy4606@t '_))) (if wy4608@ls/false (apply (lambda () (wy31e9@syntax-violation '#f '"invalid import spec" wy45d6@spec)) wy4608@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4606@t))))))))))))))))) (wy451b@import-library (lambda (wy45c6@spec*) (call-with-values (lambda () (wy4519@parse-library-name wy45c6@spec*)) (lambda (wy45cc@wy45c9 wy45cd@wy45cb) (let ((wy45d0@pred wy45cd@wy45cb) (wy45d1@name wy45cc@wy45c9)) (begin (if (null? wy45d1@name) (wy31e9@syntax-violation 'import '"empty library name" wy45c6@spec*) (void)) (let ((wy45d4@lib (wy2d17@wy2b5e@find-library-by-name wy45d1@name))) (begin (if (not wy45d4@lib) (wy31e9@syntax-violation 'import '"cannot find library with required name" wy45d1@name) (void)) (if (not (wy45d0@pred (wy2cf1@wy2b12@library-version wy45d4@lib))) (wy31e9@syntax-violation 'import '"library does not satisfy version specification" wy45c6@spec* wy45d4@lib) (void)) ((wy3175@imp-collector) wy45d4@lib) (wy2cf9@wy2b22@library-subst wy45d4@lib))))))))) (wy451d@get-import (lambda (wy4538@spec) (let ((wy453a@t wy4538@spec)) (let ((wy453c@ls/false (wy3109@syntax-dispatch wy453a@t '(any . each-any)))) (if (and wy453c@ls/false (apply (lambda (wy453e@x wy453f@x*) (not (memq (wy31ef@syntax->datum wy453e@x) '(for rename except only prefix library)))) wy453c@ls/false)) (apply (lambda (wy4542@x wy4543@x*) (wy451b@import-library (cons wy4542@x wy4543@x*))) wy453c@ls/false) (let ((wy4546@t wy453a@t)) (let ((wy4548@ls/false (wy3109@syntax-dispatch wy4546@t '(any any . #(each (any any)))))) (if (and wy4548@ls/false (apply (lambda (wy454a@rename wy454b@isp wy454c@old* wy454d@new*) (and (eq? (wy31ef@syntax->datum wy454a@rename) 'rename) (for-all wy450b@idsyn? wy454c@old*) (for-all wy450b@idsyn? wy454d@new*))) wy4548@ls/false)) (apply (lambda (wy4552@rename wy4553@isp wy4554@old* wy4555@new*) (let ((wy455a@subst (wy451d@get-import wy4553@isp)) (wy455b@old* (map wy31ef@syntax->datum wy4554@old*)) (wy455c@new* (map wy31ef@syntax->datum wy4555@new*))) (let ((wy4560@old-label* (wy4513@find* wy455b@old* wy455a@subst))) (let ((wy4562@subst (wy4515@rem* wy455b@old* wy455a@subst))) (wy450f@merge-substs (map cons wy455c@new* wy4560@old-label*) wy4562@subst))))) wy4548@ls/false) (let ((wy4564@t wy4546@t)) (let ((wy4566@ls/false (wy3109@syntax-dispatch wy4564@t '(any any . each-any)))) (if (and wy4566@ls/false (apply (lambda (wy4568@except wy4569@isp wy456a@sym*) (and (eq? (wy31ef@syntax->datum wy4568@except) 'except) (for-all wy450b@idsyn? wy456a@sym*))) wy4566@ls/false)) (apply (lambda (wy456e@except wy456f@isp wy4570@sym*) (let ((wy4574@subst (wy451d@get-import wy456f@isp))) (wy4515@rem* (map wy31ef@syntax->datum wy4570@sym*) wy4574@subst))) wy4566@ls/false) (let ((wy4576@t wy4564@t)) (let ((wy4578@ls/false (wy3109@syntax-dispatch wy4576@t '(any any . each-any)))) (if (and wy4578@ls/false (apply (lambda (wy457a@only wy457b@isp wy457c@sym*) (and (eq? (wy31ef@syntax->datum wy457a@only) 'only) (for-all wy450b@idsyn? wy457c@sym*))) wy4578@ls/false)) (apply (lambda (wy4580@only wy4581@isp wy4582@sym*) (let ((wy4586@subst (wy451d@get-import wy4581@isp)) (wy4587@sym* (map wy31ef@syntax->datum wy4582@sym*))) (let ((wy458a@sym* (wy4517@remove-dups wy4587@sym*))) (let ((wy458c@lab* (wy4513@find* wy458a@sym* wy4586@subst))) (map cons wy458a@sym* wy458c@lab*))))) wy4578@ls/false) (let ((wy458e@t wy4576@t)) (let ((wy4590@ls/false (wy3109@syntax-dispatch wy458e@t '(any any any)))) (if (and wy4590@ls/false (apply (lambda (wy4592@prefix wy4593@isp wy4594@p) (and (eq? (wy31ef@syntax->datum wy4592@prefix) 'prefix) (wy450b@idsyn? wy4594@p))) wy4590@ls/false)) (apply (lambda (wy4598@prefix wy4599@isp wy459a@p) (let ((wy459e@subst (wy451d@get-import wy4599@isp)) (wy459f@prefix (symbol->string (wy31ef@syntax->datum wy459a@p)))) (map (lambda (wy45a2@x) (cons (string->symbol (string-append wy459f@prefix (symbol->string (car wy45a2@x)))) (cdr wy45a2@x))) wy459e@subst))) wy4590@ls/false) (let ((wy45a4@t wy458e@t)) (let ((wy45a6@ls/false (wy3109@syntax-dispatch wy45a4@t '(any each-any)))) (if (and wy45a6@ls/false (apply (lambda (wy45a8@library wy45a9@spec*) (eq? (wy31ef@syntax->datum wy45a8@library) 'library)) wy45a6@ls/false)) (apply (lambda (wy45ac@library wy45ad@spec*) (wy451b@import-library wy45ad@spec*)) wy45a6@ls/false) (let ((wy45b0@t wy45a4@t)) (let ((wy45b2@ls/false (wy3109@syntax-dispatch wy45b0@t '(any any . any)))) (if (and wy45b2@ls/false (apply (lambda (wy45b4@for wy45b5@isp wy45b6@rest) (eq? (wy31ef@syntax->datum wy45b4@for) 'for)) wy45b2@ls/false)) (apply (lambda (wy45ba@for wy45bb@isp wy45bc@rest) (wy451d@get-import wy45bb@isp)) wy45b2@ls/false) (let ((wy45c0@t wy45b0@t)) (let ((wy45c2@ls/false (wy3109@syntax-dispatch wy45c0@t 'any))) (if wy45c2@ls/false (apply (lambda (wy45c4@spec) (wy31e9@syntax-violation 'import '"invalid import spec" wy45c4@spec)) wy45c2@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy45c0@t))))))))))))))))))))))))))) (wy451f@add-imports! (lambda (wy4528@imp wy4529@h) (let ((wy452c@subst (wy451d@get-import wy4528@imp))) (for-each (lambda (wy452e@x) (let ((wy4530@name (car wy452e@x)) (wy4531@label (cdr wy452e@x))) (let ((wy4534@t (hashtable-ref wy4529@h wy4530@name '#f))) (if wy4534@t ((lambda (wy4536@l) (if (not (eq? wy4536@l wy4531@label)) (wy450d@dup-error wy4530@name) (void))) wy4534@t) (hashtable-set! wy4529@h wy4530@name wy4531@label))))) wy452c@subst))))) (lambda (wy4520@imp*) (let wy4526@f ((wy4522@imp* wy4520@imp*) (wy4523@h (make-eq-hashtable))) (if (null? wy4522@imp*) (hashtable-entries wy4523@h) (begin (wy451f@add-imports! (car wy4522@imp*) wy4523@h) (wy4526@f (cdr wy4522@imp*) wy4523@h))))))) (set! wy4c42@wy316b@parse-import-spec* wy316b@parse-import-spec*) (set! wy316d@make-top-rib (lambda (wy4716@names wy4717@labels) (let ((wy471a@rib (wy2eb6@make-empty-rib))) (begin (vector-for-each (lambda (wy471c@name wy471d@label) (begin (if (not (symbol? wy471c@name)) (error 'make-top-rib '"BUG: not a symbol" wy471c@name) (void)) (wy2eba@extend-rib/nc! wy471a@rib (make-simple-struct 'stx '5 (list wy471c@name wy2e86@top-mark* '() '())) wy471d@label))) wy4716@names wy4717@labels) wy471a@rib)))) (set! wy4c43@wy316d@make-top-rib wy316d@make-top-rib) (set! wy316f@make-collector (lambda () (let ((wy4720@ls '())) (lambda wy4724 (let ((wy4725 (length wy4724))) (if (= wy4725 '0) (apply (lambda () wy4720@ls) wy4724) (if (= wy4725 '1) (apply (lambda (wy4722@x) (set! wy4720@ls (wy2e7f@set-cons wy4722@x wy4720@ls))) wy4724) (error 'apply '"invalid arg count")))))))) (set! wy4c44@wy316f@make-collector wy316f@make-collector) (set! wy3171@inv-collector (wy2a52@wy2930@make-parameter (lambda wy4726@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (wy4728@x) (begin (if (not (procedure? wy4728@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" wy4728@x) (void)) wy4728@x)))) (set! wy4c45@wy3171@inv-collector wy3171@inv-collector) (set! wy3173@vis-collector (wy2a52@wy2930@make-parameter (lambda wy472a@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (wy472c@x) (begin (if (not (procedure? wy472c@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" wy472c@x) (void)) wy472c@x)))) (set! wy4c46@wy3173@vis-collector wy3173@vis-collector) (set! wy3175@imp-collector (wy2a52@wy2930@make-parameter (lambda wy472e@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (wy4730@x) (begin (if (not (procedure? wy4730@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" wy4730@x) (void)) wy4730@x)))) (set! wy4c47@wy3175@imp-collector wy3175@imp-collector) (set! wy3177@chi-library-internal (lambda (wy4732@e* wy4733@rib wy4734@top?) (call-with-values (lambda () (wy3161@chi-body* wy4732@e* '() '() '() '() '() '() '() wy4733@rib wy4734@top?)) (lambda (wy4748@wy4739 wy4749@wy473b wy474a@wy473d wy474b@wy473f wy474c@wy4741 wy474d@wy4743 wy474e@wy4745 wy474f@wy4747) (let ((wy4758@exp* wy474f@wy4747) (wy4759@_kwd* wy474e@wy4745) (wy475a@mod** wy474d@wy4743) (wy475b@rhs* wy474c@wy4741) (wy475c@lex* wy474b@wy473f) (wy475d@mr wy474a@wy473d) (wy475e@r wy4749@wy473b) (wy475f@e* wy4748@wy4739)) (values (append (apply append (reverse wy475a@mod**)) wy475f@e*) wy475e@r wy475d@mr (reverse wy475c@lex*) (reverse wy475b@rhs*) wy4758@exp*)))))) (set! wy4c48@wy3177@chi-library-internal wy3177@chi-library-internal) (set! wy3179@chi-interaction-expr (lambda (wy4768@e wy4769@rib wy476a@r) (call-with-values (lambda () (wy3161@chi-body* (list wy4768@e) wy476a@r wy476a@r '() '() '() '() '() wy4769@rib '#t)) (lambda (wy477e@wy476f wy477f@wy4771 wy4780@wy4773 wy4781@wy4775 wy4782@wy4777 wy4783@wy4779 wy4784@wy477b wy4785@wy477d) (let ((wy478e@_exp* wy4785@wy477d) (wy478f@_kwd* wy4784@wy477b) (wy4790@mod** wy4783@wy4779) (wy4791@rhs* wy4782@wy4777) (wy4792@lex* wy4781@wy4775) (wy4793@mr wy4780@wy4773) (wy4794@r wy477f@wy4771) (wy4795@e* wy477e@wy476f)) (let ((wy479e@e* (wy3139@expand-interaction-rhs*/init* (reverse wy4792@lex*) (reverse wy4791@rhs*) (append (apply append (reverse wy4790@mod**)) wy4795@e*) wy4794@r wy4793@mr))) (let ((wy47a0@e (if (null? wy479e@e*) (wy2e68@wy2dc9@build-void) (if (null? (cdr wy479e@e*)) (car wy479e@e*) (wy2e67@wy2dc7@build-sequence '#f wy479e@e*))))) (values wy47a0@e wy4794@r)))))))) (set! wy4c49@wy3179@chi-interaction-expr wy3179@chi-interaction-expr) (set! wy317b@library-body-expander (lambda (wy47a2@name wy47a3@main-exp* wy47a4@imp* wy47a5@b* wy47a6@top?) (letrec* ((wy47ad@itc (wy316f@make-collector))) (let ((wy47b6@wy47af wy3175@imp-collector) (wy47b7@wy47b1 wy31f9@top-level-context) (wy47b8@wy47b3 wy47ad@itc) (wy47b9@wy47b5 '#f)) (let ((wy47be@swap (lambda () (begin (let ((wy47c0@t (wy47b6@wy47af))) (begin (wy47b6@wy47af wy47b8@wy47b3) (set! wy47b8@wy47b3 wy47c0@t))) (let ((wy47c2@t (wy47b7@wy47b1))) (begin (wy47b7@wy47b1 wy47b9@wy47b5) (set! wy47b9@wy47b5 wy47c2@t))))))) (dynamic-wind wy47be@swap (lambda () (call-with-values (lambda () (wy316b@parse-import-spec* wy47a4@imp*)) (lambda (wy47c8@wy47c5 wy47c9@wy47c7) (let ((wy47cc@subst-labels wy47c9@wy47c7) (wy47cd@subst-names wy47c8@wy47c5)) (let ((wy47d0@rib (wy316d@make-top-rib wy47cd@subst-names wy47cc@subst-labels))) (letrec* ((wy47d3@wrap (lambda (wy484e@x) (make-simple-struct 'stx '5 (list wy484e@x wy2e86@top-mark* (list wy47d0@rib) '()))))) (let ((wy47d4@b* (map wy47d3@wrap wy47a5@b*)) (wy47d5@main-exp* (map wy47d3@wrap wy47a3@main-exp*)) (wy47d6@rtc (wy316f@make-collector)) (wy47d7@vtc (wy316f@make-collector))) (let ((wy47e4@wy47dd wy3171@inv-collector) (wy47e5@wy47df wy3173@vis-collector) (wy47e6@wy47e1 wy47d6@rtc) (wy47e7@wy47e3 wy47d7@vtc)) (let ((wy47ec@swap (lambda () (begin (let ((wy47ee@t (wy47e4@wy47dd))) (begin (wy47e4@wy47dd wy47e6@wy47e1) (set! wy47e6@wy47e1 wy47ee@t))) (let ((wy47f0@t (wy47e5@wy47df))) (begin (wy47e5@wy47df wy47e7@wy47e3) (set! wy47e7@wy47e3 wy47f0@t))))))) (dynamic-wind wy47ec@swap (lambda () (call-with-values (lambda () (wy3177@chi-library-internal wy47d4@b* wy47d0@rib wy47a6@top?)) (lambda (wy47fe@wy47f3 wy47ff@wy47f5 wy4800@wy47f7 wy4801@wy47f9 wy4802@wy47fb wy4803@wy47fd) (let ((wy480a@internal-exp* wy4803@wy47fd) (wy480b@rhs* wy4802@wy47fb) (wy480c@lex* wy4801@wy47f9) (wy480d@mr wy4800@wy47f7) (wy480e@r wy47ff@wy47f5) (wy480f@init* wy47fe@wy47f3)) (call-with-values (lambda () (wy3165@parse-exports (append wy47d5@main-exp* wy480a@internal-exp*))) (lambda (wy481a@wy4817 wy481b@wy4819) (let ((wy481e@exp-id* wy481b@wy4819) (wy481f@exp-name* wy481a@wy4817)) (begin (wy2ebe@seal-rib! wy47d0@rib) (let ((wy4822@init* (wy3127@chi-expr* wy480f@init* wy480e@r wy480d@mr))) (let ((wy4824@rhs* (wy313b@chi-rhs* wy480b@rhs* wy480e@r wy480d@mr))) (begin (wy2ec0@unseal-rib! wy47d0@rib) (let ((wy4826@loc* (map wy2e8c@gen-global wy480c@lex*)) (wy4827@export-subst (wy31d3@make-export-subst wy481f@exp-name* wy481e@exp-id*))) (letrec* ((wy482b@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (wy31d5@make-export-env/macros wy480c@lex* wy4826@loc* wy480e@r)) (lambda (wy4832@wy482d wy4833@wy482f wy4834@wy4831) (let ((wy4838@macro* wy4834@wy4831) (wy4839@global* wy4833@wy482f) (wy483a@export-env wy4832@wy482d)) (begin (for-each (lambda (wy483e@s) (let ((wy4840@name (car wy483e@s)) (wy4841@label (cdr wy483e@s))) (let ((wy4844@p (assq wy4841@label wy483a@export-env))) (if wy4844@p (let ((wy4846@b (cdr wy4844@p))) (let ((wy4848@type (car wy4846@b))) (if (eq? wy4848@type 'mutable) (wy31e9@syntax-violation 'export wy482b@errstr wy4840@name) (void)))) (void))))) wy4827@export-subst) (let ((wy484a@invoke-body (wy2e6d@wy2dd3@build-library-letrec* '#f wy47a2@name wy480c@lex* wy4826@loc* wy4824@rhs* (if (null? wy4822@init*) (wy2e68@wy2dc9@build-void) (wy2e67@wy2dc7@build-sequence '#f wy4822@init*)))) (wy484b@invoke-definitions (map wy2e64@wy2d26@build-global-define (map cdr wy4839@global*)))) (values (wy47ad@itc) (wy47d6@rtc) (wy47d7@vtc) (wy2e67@wy2dc7@build-sequence '#f (append wy484b@invoke-definitions (list wy484a@invoke-body))) wy4838@macro* wy4827@export-subst wy483a@export-env))))))))))))))))))) wy47ec@swap)))))))))) wy47be@swap)))))) (set! wy4c4a@wy317b@library-body-expander wy317b@library-body-expander) (set! wy317d@core-library-expander (lambda (wy4850@e wy4851@verify-name) (call-with-values (lambda () (wy3169@parse-library wy4850@e)) (lambda (wy485c@wy4855 wy485d@wy4857 wy485e@wy4859 wy485f@wy485b) (let ((wy4864@b* wy485f@wy485b) (wy4865@imp* wy485e@wy4859) (wy4866@exp* wy485d@wy4857) (wy4867@name* wy485c@wy4855)) (call-with-values (lambda () (wy3167@parse-library-name wy4867@name*)) (lambda (wy4870@wy486d wy4871@wy486f) (let ((wy4874@ver wy4871@wy486f) (wy4875@name wy4870@wy486d)) (begin (wy4851@verify-name wy4875@name) (call-with-values (lambda () (wy317b@library-body-expander wy4875@name wy4866@exp* wy4865@imp* wy4864@b* '#f)) (lambda (wy4886@wy4879 wy4887@wy487b wy4888@wy487d wy4889@wy487f wy488a@wy4881 wy488b@wy4883 wy488c@wy4885) (let ((wy4894@export-env wy488c@wy4885) (wy4895@export-subst wy488b@wy4883) (wy4896@visit-code wy488a@wy4881) (wy4897@invoke-code wy4889@wy487f) (wy4898@visit-req* wy4888@wy487d) (wy4899@invoke-req* wy4887@wy487b) (wy489a@imp* wy4886@wy4879)) (values wy4875@name wy4874@ver wy489a@imp* wy4899@invoke-req* wy4898@visit-req* wy4897@invoke-code wy4896@visit-code wy4895@export-subst wy4894@export-env))))))))))))) (set! wy4c4b@wy317d@core-library-expander wy317d@core-library-expander) (set! wy317f@parse-top-level-program (lambda (wy48a2@e*) (let ((wy48a4@t wy48a2@e*)) (let ((wy48a6@ls/false (wy3109@syntax-dispatch wy48a4@t '((any . each-any) . each-any)))) (if (and wy48a6@ls/false (apply (lambda (wy48a8@import wy48a9@imp* wy48aa@b*) (eq? (wy31ef@syntax->datum wy48a8@import) 'import)) wy48a6@ls/false)) (apply (lambda (wy48ae@import wy48af@imp* wy48b0@b*) (values wy48af@imp* wy48b0@b*)) wy48a6@ls/false) (let ((wy48b4@t wy48a4@t)) (let ((wy48b6@ls/false (wy3109@syntax-dispatch wy48b4@t '((any . any) . any)))) (if (and wy48b6@ls/false (apply (lambda (wy48b8@import wy48b9@x wy48ba@y) (eq? (wy31ef@syntax->datum wy48b8@import) 'import)) wy48b6@ls/false)) (apply (lambda (wy48be@import wy48bf@x wy48c0@y) (wy31e9@syntax-violation 'expander '"invalid syntax of top-level program" (wy2efc@syntax-car wy48a2@e*))) wy48b6@ls/false) (let ((wy48c4@t wy48b4@t)) (let ((wy48c6@ls/false (wy3109@syntax-dispatch wy48c4@t '_))) (if wy48c6@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) wy48c6@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy48c4@t)))))))))))) (set! wy4c4c@wy317f@parse-top-level-program wy317f@parse-top-level-program) (set! wy3181@top-level-expander (lambda (wy48c8@e*) (call-with-values (lambda () (wy317f@parse-top-level-program wy48c8@e*)) (lambda (wy48ce@wy48cb wy48cf@wy48cd) (let ((wy48d2@b* wy48cf@wy48cd) (wy48d3@imp* wy48ce@wy48cb)) (call-with-values (lambda () (wy317b@library-body-expander '() '() wy48d3@imp* wy48d2@b* '#t)) (lambda (wy48e4@wy48d7 wy48e5@wy48d9 wy48e6@wy48db wy48e7@wy48dd wy48e8@wy48df wy48e9@wy48e1 wy48ea@wy48e3) (let ((wy48f2@export-env wy48ea@wy48e3) (wy48f3@export-subst wy48e9@wy48e1) (wy48f4@visit-code wy48e8@wy48df) (wy48f5@invoke-code wy48e7@wy48dd) (wy48f6@visit-req* wy48e6@wy48db) (wy48f7@invoke-req* wy48e5@wy48d9) (wy48f8@imp* wy48e4@wy48d7)) (values wy48f7@invoke-req* wy48f5@invoke-code))))))))) (set! wy4c4d@wy3181@top-level-expander wy3181@top-level-expander) (set! wy3183@rp (wy2a4f@wy292a@make-record-printer 'env (lambda (wy4900@x wy4901@p wy4902@wr) (display '"#<environment>" wy4901@p)))) (set! wy4c4e@wy3183@rp wy3183@rp) (set! wy318d@env? (lambda (wy4906@x) (and (simple-struct? wy4906@x) (eq? (simple-struct-name wy4906@x) 'env)))) (set! wy4c4f@wy318d@env? wy318d@env?) (set! wy318f@env-names (lambda (wy4908@x) (simple-struct-ref wy4908@x '0))) (set! wy4c50@wy318f@env-names wy318f@env-names) (set! wy3191@set-env-names! (lambda (wy490a@x wy490b@val) (simple-struct-set! wy490a@x '0 wy490b@val))) (set! wy4c51@wy3191@set-env-names! wy3191@set-env-names!) (set! wy3193@env-labels (lambda (wy490e@x) (simple-struct-ref wy490e@x '1))) (set! wy4c52@wy3193@env-labels wy3193@env-labels) (set! wy3195@set-env-labels! (lambda (wy4910@x wy4911@val) (simple-struct-set! wy4910@x '1 wy4911@val))) (set! wy4c53@wy3195@set-env-labels! wy3195@set-env-labels!) (set! wy3197@env-itc (lambda (wy4914@x) (simple-struct-ref wy4914@x '2))) (set! wy4c54@wy3197@env-itc wy3197@env-itc) (set! wy3199@set-env-itc! (lambda (wy4916@x wy4917@val) (simple-struct-set! wy4916@x '2 wy4917@val))) (set! wy4c55@wy3199@set-env-itc! wy3199@set-env-itc!) (set! wy319b@dummy '3) (set! wy4c56@wy319b@dummy wy319b@dummy) (set! wy319d@rp (wy2a4f@wy292a@make-record-printer 'interaction-env (lambda (wy491a@x wy491b@p wy491c@wr) (display '"#<environment>" wy491b@p)))) (set! wy4c57@wy319d@rp wy319d@rp) (set! wy31a7@interaction-env? (lambda (wy4920@x) (and (simple-struct? wy4920@x) (eq? (simple-struct-name wy4920@x) 'interaction-env)))) (set! wy4c58@wy31a7@interaction-env? wy31a7@interaction-env?) (set! wy31a9@interaction-env-rib (lambda (wy4922@x) (simple-struct-ref wy4922@x '0))) (set! wy4c59@wy31a9@interaction-env-rib wy31a9@interaction-env-rib) (set! wy31ab@set-interaction-env-rib! (lambda (wy4924@x wy4925@val) (simple-struct-set! wy4924@x '0 wy4925@val))) (set! wy4c5a@wy31ab@set-interaction-env-rib! wy31ab@set-interaction-env-rib!) (set! wy31ad@interaction-env-r (lambda (wy4928@x) (simple-struct-ref wy4928@x '1))) (set! wy4c5b@wy31ad@interaction-env-r wy31ad@interaction-env-r) (set! wy31af@set-interaction-env-r! (lambda (wy492a@x wy492b@val) (simple-struct-set! wy492a@x '1 wy492b@val))) (set! wy4c5c@wy31af@set-interaction-env-r! wy31af@set-interaction-env-r!) (set! wy31b1@interaction-env-locs (lambda (wy492e@x) (simple-struct-ref wy492e@x '2))) (set! wy4c5d@wy31b1@interaction-env-locs wy31b1@interaction-env-locs) (set! wy31b3@set-interaction-env-locs! (lambda (wy4930@x wy4931@val) (simple-struct-set! wy4930@x '2 wy4931@val))) (set! wy4c5e@wy31b3@set-interaction-env-locs! wy31b3@set-interaction-env-locs!) (set! wy31b5@dummy '3) (set! wy4c5f@wy31b5@dummy wy31b5@dummy) (set! wy31b7@interaction-environment-symbols (lambda () (wy31bf@environment-symbols (wy31f7@interaction-environment)))) (set! wy4c60@wy31b7@interaction-environment-symbols wy31b7@interaction-environment-symbols) (set! wy31b9@environment-bindings (lambda (wy4934@e) (vector->list (vector-map (lambda (wy4936@name wy4937@label) (wy31bb@parse-binding (cons wy4936@name (wy2d1d@wy2b6a@imported-label->binding wy4937@label)))) (wy318f@env-names wy4934@e) (wy3193@env-labels wy4934@e))))) (set! wy4c61@wy31b9@environment-bindings wy31b9@environment-bindings) (set! wy31bb@parse-binding (lambda (wy493a@b) (cons (car wy493a@b) (let ((wy493c@t (cadr wy493a@b))) (if (memv wy493c@t '(core-prim global)) 'procedure (if (memv wy493c@t '(core-macro macro global-macro)) 'syntax (if (memv wy493c@t '($core-rtd)) 'record (if (eq? (car wy493a@b) (cadr wy493a@b)) 'syntax 'unknown)))))))) (set! wy4c62@wy31bb@parse-binding wy31bb@parse-binding) (set! wy31bd@environment? (lambda (wy493e@x) (or (wy318d@env? wy493e@x) (wy31a7@interaction-env? wy493e@x)))) (set! wy4c63@wy31bd@environment? wy31bd@environment?) (set! wy31bf@environment-symbols (lambda (wy4940@x) (if (wy318d@env? wy4940@x) (vector->list (wy318f@env-names wy4940@x)) (if (wy31a7@interaction-env? wy4940@x) (map values (wy2ea0@rib-sym* (wy31a9@interaction-env-rib wy4940@x))) (assertion-violation 'environment-symbols '"not an environment" wy4940@x))))) (set! wy4c64@wy31bf@environment-symbols wy31bf@environment-symbols) (set! wy31c1@environment (lambda wy4942@imp* (let ((wy4944@itc (wy316f@make-collector))) (let ((wy494a@wy4947 wy3175@imp-collector) (wy494b@wy4949 wy4944@itc)) (let ((wy494e@swap (lambda () (let ((wy4950@t (wy494a@wy4947))) (begin (wy494a@wy4947 wy494b@wy4949) (set! wy494b@wy4949 wy4950@t)))))) (dynamic-wind wy494e@swap (lambda () (call-with-values (lambda () (wy316b@parse-import-spec* wy4942@imp*)) (lambda (wy4956@wy4953 wy4957@wy4955) (let ((wy495a@subst-labels wy4957@wy4955) (wy495b@subst-names wy4956@wy4953)) (make-simple-struct 'env '4 (list wy495b@subst-names wy495a@subst-labels wy4944@itc)))))) wy494e@swap)))))) (set! wy4c65@wy31c1@environment wy31c1@environment) (set! wy31c3@null-environment (lambda (wy495e@n) (begin (if (not (eqv? wy495e@n '5)) (assertion-violation 'null-environment '"not 5" wy495e@n) (void)) (wy31c1@environment '(psyntax null-environment-5))))) (set! wy4c66@wy31c3@null-environment wy31c3@null-environment) (set! wy31c5@scheme-report-environment (lambda (wy4960@n) (begin (if (not (eqv? wy4960@n '5)) (assertion-violation 'scheme-report-environment '"not 5" wy4960@n) (void)) (wy31c1@environment '(psyntax scheme-report-environment-5))))) (set! wy4c67@wy31c5@scheme-report-environment wy31c5@scheme-report-environment) (set! wy31c7@expand (lambda (wy4962@x wy4963@env) (if (wy318d@env? wy4963@env) (let ((wy4966@rib (wy316d@make-top-rib (wy318f@env-names wy4963@env) (wy3193@env-labels wy4963@env)))) (let ((wy4968@x (make-simple-struct 'stx '5 (list wy4962@x wy2e86@top-mark* (list wy4966@rib) '()))) (wy4969@itc (wy3197@env-itc wy4963@env)) (wy496a@rtc (wy316f@make-collector)) (wy496b@vtc (wy316f@make-collector))) (let ((wy4970@x (let ((wy4982@wy4973 wy31f9@top-level-context) (wy4983@wy4975 wy3171@inv-collector) (wy4984@wy4977 wy3173@vis-collector) (wy4985@wy4979 wy3175@imp-collector) (wy4986@wy497b '#f) (wy4987@wy497d wy496a@rtc) (wy4988@wy497f wy496b@vtc) (wy4989@wy4981 wy4969@itc)) (let ((wy4992@swap (lambda () (begin (let ((wy4994@t (wy4982@wy4973))) (begin (wy4982@wy4973 wy4986@wy497b) (set! wy4986@wy497b wy4994@t))) (let ((wy4996@t (wy4983@wy4975))) (begin (wy4983@wy4975 wy4987@wy497d) (set! wy4987@wy497d wy4996@t))) (let ((wy4998@t (wy4984@wy4977))) (begin (wy4984@wy4977 wy4988@wy497f) (set! wy4988@wy497f wy4998@t))) (let ((wy499a@t (wy4985@wy4979))) (begin (wy4985@wy4979 wy4989@wy4981) (set! wy4989@wy4981 wy499a@t))))))) (dynamic-wind wy4992@swap (lambda () (wy312b@chi-expr wy4968@x '() '())) wy4992@swap))))) (begin (wy2ebe@seal-rib! wy4966@rib) (values wy4970@x (wy496a@rtc)))))) (if (wy31a7@interaction-env? wy4963@env) (let ((wy499c@rib (wy31a9@interaction-env-rib wy4963@env)) (wy499d@r (wy31ad@interaction-env-r wy4963@env)) (wy499e@rtc (wy316f@make-collector))) (let ((wy49a2@x (make-simple-struct 'stx '5 (list wy4962@x wy2e86@top-mark* (list wy499c@rib) '())))) (call-with-values (lambda () (let ((wy49b8@wy49a9 wy31f9@top-level-context) (wy49b9@wy49ab wy3171@inv-collector) (wy49ba@wy49ad wy3173@vis-collector) (wy49bb@wy49af wy3175@imp-collector) (wy49bc@wy49b1 wy4963@env) (wy49bd@wy49b3 wy499e@rtc) (wy49be@wy49b5 (wy316f@make-collector)) (wy49bf@wy49b7 (wy316f@make-collector))) (let ((wy49c8@swap (lambda () (begin (let ((wy49ca@t (wy49b8@wy49a9))) (begin (wy49b8@wy49a9 wy49bc@wy49b1) (set! wy49bc@wy49b1 wy49ca@t))) (let ((wy49cc@t (wy49b9@wy49ab))) (begin (wy49b9@wy49ab wy49bd@wy49b3) (set! wy49bd@wy49b3 wy49cc@t))) (let ((wy49ce@t (wy49ba@wy49ad))) (begin (wy49ba@wy49ad wy49be@wy49b5) (set! wy49be@wy49b5 wy49ce@t))) (let ((wy49d0@t (wy49bb@wy49af))) (begin (wy49bb@wy49af wy49bf@wy49b7) (set! wy49bf@wy49b7 wy49d0@t))))))) (dynamic-wind wy49c8@swap (lambda () (wy3179@chi-interaction-expr wy49a2@x wy499c@rib wy499d@r)) wy49c8@swap)))) (lambda (wy49d2@wy49a5 wy49d3@wy49a7) (let ((wy49d6@r^ wy49d3@wy49a7) (wy49d7@e wy49d2@wy49a5)) (begin (wy31af@set-interaction-env-r! wy4963@env wy49d6@r^) (values wy49d7@e (wy499e@rtc)))))))) (assertion-violation 'expand '"not an environment" wy4963@env))))) (set! wy4c68@wy31c7@expand wy31c7@expand) (set! wy31c9@eval (lambda (wy49da@x wy49db@env) (begin (if (not (wy31bd@environment? wy49db@env)) (error 'eval '"not an environment" wy49db@env) (void)) (call-with-values (lambda () (wy31c7@expand wy49da@x wy49db@env)) (lambda (wy49e2@wy49df wy49e3@wy49e1) (let ((wy49e6@invoke-req* wy49e3@wy49e1) (wy49e7@x wy49e2@wy49df)) (begin (for-each wy2d1e@wy2b6c@invoke-library wy49e6@invoke-req*) (eval-core (wy2aa8@wy2a60@expanded->core wy49e7@x))))))))) (set! wy4c69@wy31c9@eval wy31c9@eval) (set! wy31cb@library-expander (lambda wy4a58 (let ((wy4a59 (length wy4a58))) (if (= wy4a59 '3) (apply (lambda (wy49ea@x wy49eb@filename wy49ec@verify-name) (letrec* ((wy49f1@build-visit-code (lambda (wy4a46@macro*) (if (null? wy4a46@macro*) (wy2e68@wy2dc9@build-void) (wy2e67@wy2dc7@build-sequence '#f (map (lambda (wy4a48@x) (let ((wy4a4a@loc (car wy4a48@x)) (wy4a4b@src (cddr wy4a48@x))) (list 'set! wy4a4a@loc wy4a4b@src))) wy4a46@macro*))))) (wy49f3@visit! (lambda (wy4a3e@macro*) (for-each (lambda (wy4a40@x) (let ((wy4a42@loc (car wy4a40@x)) (wy4a43@proc (cadr wy4a40@x))) (set-symbol-value! wy4a42@loc wy4a43@proc))) wy4a3e@macro*)))) (call-with-values (lambda () (wy317d@core-library-expander wy49ea@x wy49ec@verify-name)) (lambda (wy4a06@wy49f5 wy4a07@wy49f7 wy4a08@wy49f9 wy4a09@wy49fb wy4a0a@wy49fd wy4a0b@wy49ff wy4a0c@wy4a01 wy4a0d@wy4a03 wy4a0e@wy4a05) (let ((wy4a18@export-env wy4a0e@wy4a05) (wy4a19@export-subst wy4a0d@wy4a03) (wy4a1a@macro* wy4a0c@wy4a01) (wy4a1b@invoke-code wy4a0b@wy49ff) (wy4a1c@vis* wy4a0a@wy49fd) (wy4a1d@inv* wy4a09@wy49fb) (wy4a1e@imp* wy4a08@wy49f9) (wy4a1f@ver wy4a07@wy49f7) (wy4a20@name wy4a06@wy49f5)) (let ((wy4a2a@id (gensym)) (wy4a2b@name wy4a20@name) (wy4a2c@ver wy4a1f@ver) (wy4a2d@imp* (map wy2d22@wy2b74@library-spec wy4a1e@imp*)) (wy4a2e@vis* (map wy2d22@wy2b74@library-spec wy4a1c@vis*)) (wy4a2f@inv* (map wy2d22@wy2b74@library-spec wy4a1d@inv*)) (wy4a30@visit-proc (lambda () (wy49f3@visit! wy4a1a@macro*))) (wy4a31@invoke-proc (lambda () (eval-core (wy2aa8@wy2a60@expanded->core wy4a1b@invoke-code)))) (wy4a32@visit-code (wy49f1@build-visit-code wy4a1a@macro*)) (wy4a33@invoke-code wy4a1b@invoke-code)) (begin (wy2d1c@wy2b68@install-library wy4a2a@id wy4a2b@name wy4a2c@ver wy4a2d@imp* wy4a2e@vis* wy4a2f@inv* wy4a19@export-subst wy4a18@export-env wy4a30@visit-proc wy4a31@invoke-proc wy4a32@visit-code wy4a33@invoke-code '#t wy49eb@filename) (values wy4a2a@id wy4a2b@name wy4a2c@ver wy4a2d@imp* wy4a2e@vis* wy4a2f@inv* wy4a33@invoke-code wy4a32@visit-code wy4a19@export-subst wy4a18@export-env)))))))) wy4a58) (if (= wy4a59 '2) (apply (lambda (wy4a4e@x wy4a4f@filename) (wy31cb@library-expander wy4a4e@x wy4a4f@filename (lambda (wy4a52@x) (values)))) wy4a58) (if (= wy4a59 '1) (apply (lambda (wy4a54@x) (wy31cb@library-expander wy4a54@x '#f (lambda (wy4a56@x) (values)))) wy4a58) (error 'apply '"invalid arg count"))))))) (set! wy4c6a@wy31cb@library-expander wy31cb@library-expander) (set! wy31cd@boot-library-expand (lambda (wy4a5a@x) (call-with-values (lambda () (wy31cb@library-expander wy4a5a@x)) (lambda (wy4a70@wy4a5d wy4a71@wy4a5f wy4a72@wy4a61 wy4a73@wy4a63 wy4a74@wy4a65 wy4a75@wy4a67 wy4a76@wy4a69 wy4a77@wy4a6b wy4a78@wy4a6d wy4a79@wy4a6f) (let ((wy4a84@export-env wy4a79@wy4a6f) (wy4a85@export-subst wy4a78@wy4a6d) (wy4a86@visit-code wy4a77@wy4a6b) (wy4a87@invoke-code wy4a76@wy4a69) (wy4a88@inv* wy4a75@wy4a67) (wy4a89@vis* wy4a74@wy4a65) (wy4a8a@imp* wy4a73@wy4a63) (wy4a8b@ver wy4a72@wy4a61) (wy4a8c@name wy4a71@wy4a5f) (wy4a8d@id wy4a70@wy4a5d)) (values wy4a8c@name wy4a87@invoke-code wy4a85@export-subst wy4a84@export-env)))))) (set! wy4c6b@wy31cd@boot-library-expand wy31cd@boot-library-expand) (set! wy31cf@rev-map-append (lambda (wy4a98@f wy4a99@ls wy4a9a@ac) (if (null? wy4a99@ls) wy4a9a@ac (wy31cf@rev-map-append wy4a98@f (cdr wy4a99@ls) (cons (wy4a98@f (car wy4a99@ls)) wy4a9a@ac))))) (set! wy4c6c@wy31cf@rev-map-append wy31cf@rev-map-append) (set! wy31d1@build-exports (lambda (wy4a9e@lex*+loc* wy4a9f@init*) (wy2e67@wy2dc7@build-sequence '#f (cons (wy2e68@wy2dc9@build-void) (wy31cf@rev-map-append (lambda (wy4aa2@x) (list 'set! (cdr wy4aa2@x) (car wy4aa2@x))) wy4a9e@lex*+loc* wy4a9f@init*))))) (set! wy4c6d@wy31d1@build-exports wy31d1@build-exports) (set! wy31d3@make-export-subst (lambda (wy4aa4@name* wy4aa5@id*) (map (lambda (wy4aa8@name wy4aa9@id) (let ((wy4aac@label (wy2f18@id->label wy4aa9@id))) (begin (if (not wy4aac@label) (wy31e9@syntax-violation '#f '"cannot export unbound identifier" wy4aa9@id) (void)) (cons wy4aa8@name wy4aac@label)))) wy4aa4@name* wy4aa5@id*))) (set! wy4c6e@wy31d3@make-export-subst wy31d3@make-export-subst) (set! wy31d5@make-export-env/macros (lambda (wy4aae@lex* wy4aaf@loc* wy4ab0@r) (letrec* ((wy4ab5@lookup (lambda (wy4ad2@x) (let wy4ada@f ((wy4ad4@x wy4ad2@x) (wy4ad5@lex* wy4aae@lex*) (wy4ad6@loc* wy4aaf@loc*)) (if (pair? wy4ad5@lex*) (if (eq? wy4ad4@x (car wy4ad5@lex*)) (car wy4ad6@loc*) (wy4ada@f wy4ad4@x (cdr wy4ad5@lex*) (cdr wy4ad6@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let wy4abe@f ((wy4ab6@r wy4ab0@r) (wy4ab7@env '()) (wy4ab8@global* '()) (wy4ab9@macro* '())) (if (null? wy4ab6@r) (values wy4ab7@env wy4ab8@global* wy4ab9@macro*) (let ((wy4ac0@x (car wy4ab6@r))) (let ((wy4ac2@label (car wy4ac0@x)) (wy4ac3@b (cdr wy4ac0@x))) (let ((wy4ac6@t (wy2f1e@binding-type wy4ac3@b))) (if (memv wy4ac6@t '(lexical)) (let ((wy4ac8@v (wy2f20@binding-value wy4ac3@b))) (let ((wy4aca@loc (wy4ab5@lookup (wy3093@lexical-var wy4ac8@v))) (wy4acb@type (if (wy3095@lexical-mutable? wy4ac8@v) 'mutable 'global))) (wy4abe@f (cdr wy4ab6@r) (cons (cons* wy4ac2@label wy4acb@type wy4aca@loc) wy4ab7@env) (cons (cons (wy3093@lexical-var wy4ac8@v) wy4aca@loc) wy4ab8@global*) wy4ab9@macro*))) (if (memv wy4ac6@t '(local-macro)) (let ((wy4ace@loc (gensym))) (wy4abe@f (cdr wy4ab6@r) (cons (cons* wy4ac2@label 'global-macro wy4ace@loc) wy4ab7@env) wy4ab8@global* (cons (cons wy4ace@loc (wy2f20@binding-value wy4ac3@b)) wy4ab9@macro*))) (if (memv wy4ac6@t '(local-macro!)) (let ((wy4ad0@loc (gensym))) (wy4abe@f (cdr wy4ab6@r) (cons (cons* wy4ac2@label 'global-macro! wy4ad0@loc) wy4ab7@env) wy4ab8@global* (cons (cons wy4ad0@loc (wy2f20@binding-value wy4ac3@b)) wy4ab9@macro*))) (if (memv wy4ac6@t '($rtd $module)) (wy4abe@f (cdr wy4ab6@r) (cons wy4ac0@x wy4ab7@env) wy4ab8@global* wy4ab9@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (wy2f1e@binding-type wy4ac3@b) (wy2f20@binding-value wy4ac3@b)))))))))))))) (set! wy4c6f@wy31d5@make-export-env/macros wy31d5@make-export-env/macros) (set! wy31d7@generate-temporaries (lambda (wy4adc@ls) (let ((wy4ade@t wy4adc@ls)) (let ((wy4ae0@ls/false (wy3109@syntax-dispatch wy4ade@t 'each-any))) (if wy4ae0@ls/false (apply (lambda (wy4ae2@ls) (map (lambda (wy4ae4@x) (make-simple-struct 'stx '5 (list (let ((wy4ae6@x (wy31ef@syntax->datum wy4ae4@x))) (if (or (symbol? wy4ae6@x) (string? wy4ae6@x)) (gensym wy4ae6@x) (gensym 't))) wy2e86@top-mark* '() '()))) wy4ae2@ls)) wy4ae0@ls/false) (let ((wy4ae8@t wy4ade@t)) (let ((wy4aea@ls/false (wy3109@syntax-dispatch wy4ae8@t '_))) (if wy4aea@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) wy4aea@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4ae8@t))))))))) (set! wy4c70@wy31d7@generate-temporaries wy31d7@generate-temporaries) (set! wy31d9@free-identifier=? (lambda (wy4aec@x wy4aed@y) (if (wy2f02@id? wy4aec@x) (if (wy2f02@id? wy4aed@y) (wy2f08@free-id=? wy4aec@x wy4aed@y) (assertion-violation 'free-identifier=? '"not an identifier" wy4aed@y)) (assertion-violation 'free-identifier=? '"not an identifier" wy4aec@x)))) (set! wy4c71@wy31d9@free-identifier=? wy31d9@free-identifier=?) (set! wy31db@bound-identifier=? (lambda (wy4af0@x wy4af1@y) (if (wy2f02@id? wy4af0@x) (if (wy2f02@id? wy4af1@y) (wy2f06@bound-id=? wy4af0@x wy4af1@y) (assertion-violation 'bound-identifier=? '"not an identifier" wy4af1@y)) (assertion-violation 'bound-identifier=? '"not an identifier" wy4af0@x)))) (set! wy4c72@wy31db@bound-identifier=? wy31db@bound-identifier=?) (set! wy31dd@make-source-condition (lambda (wy4af4@x) (letrec* ((wy4afe@wy4af9 (make-record-type-descriptor '&source-information &condition-rtd 'wy4afc '#f '#f '#((immutable file-name) (immutable line)))) (wy4b00@wy4afb '#f) (wy4b02@wy4afa (make-record-constructor-descriptor wy4afe@wy4af9 &condition-rcd wy4b00@wy4afb)) (wy4b05@wy4af8 (record-predicate wy4afe@wy4af9)) (wy4b07@make-source-condition (record-constructor wy4b02@wy4afa)) (wy4b09@wy4af6 (record-accessor wy4afe@wy4af9 '0)) (wy4b0b@wy4af7 (record-accessor wy4afe@wy4af9 '1)) (wy4b0d@source-condition? (condition-predicate wy4afe@wy4af9)) (wy4b0f@source-filename (condition-accessor wy4afe@wy4af9 wy4b09@wy4af6)) (wy4b11@source-character (condition-accessor wy4afe@wy4af9 wy4b0b@wy4af7))) (if (and (pair? wy4af4@x) (pair? (cdr wy4af4@x))) (wy4b07@make-source-condition (car wy4af4@x) (cadr wy4af4@x)) (condition))))) (set! wy4c73@wy31dd@make-source-condition wy31dd@make-source-condition) (set! wy31df@extract-position-condition (lambda (wy4b12@x) (wy31dd@make-source-condition (wy31e1@expression-position wy4b12@x)))) (set! wy4c74@wy31df@extract-position-condition wy31df@extract-position-condition) (set! wy31e1@expression-position (lambda (wy4b14@x) (and (wy2ece@stx? wy4b14@x) (let ((wy4b16@x (wy2ed0@stx-expr wy4b14@x))) (and (wy2a46@wy2918@annotation? wy4b16@x) (wy2a47@wy291a@annotation-source wy4b16@x)))))) (set! wy4c75@wy31e1@expression-position wy31e1@expression-position) (set! wy31e3@assertion-error (lambda (wy4b18@expr wy4b19@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list wy4b18@expr)) (wy31dd@make-source-condition wy4b19@pos))))) (set! wy4c76@wy31e3@assertion-error wy31e3@assertion-error) (set! wy31e5@syntax-error (lambda (wy4b1c@x . wy4b1e@args) (begin (if (not (for-all string? wy4b1e@args)) (assertion-violation 'syntax-error '"invalid argument" wy4b1e@args) (void)) (raise (condition (make-message-condition (if (null? wy4b1e@args) '"invalid syntax" (apply string-append wy4b1e@args))) (make-syntax-violation (wy31ef@syntax->datum wy4b1c@x) '#f) (wy31df@extract-position-condition wy4b1c@x)))))) (set! wy4c77@wy31e5@syntax-error wy31e5@syntax-error) (set! wy31e7@syntax-violation* (lambda (wy4b20@who wy4b21@msg wy4b22@form wy4b23@condition-object) (begin (if (not (string? wy4b21@msg)) (assertion-violation 'syntax-violation '"message is not a string" wy4b21@msg) (void)) (let ((wy4b28@who (if (or (string? wy4b20@who) (symbol? wy4b20@who)) wy4b20@who (if (not wy4b20@who) (let ((wy4b2a@t wy4b22@form)) (let ((wy4b2c@ls/false (wy3109@syntax-dispatch wy4b2a@t 'any))) (if (and wy4b2c@ls/false (apply (lambda (wy4b2e@id) (wy2f02@id? wy4b2e@id)) wy4b2c@ls/false)) (apply (lambda (wy4b30@id) (wy31ef@syntax->datum wy4b30@id)) wy4b2c@ls/false) (let ((wy4b32@t wy4b2a@t)) (let ((wy4b34@ls/false (wy3109@syntax-dispatch wy4b32@t '(any . any)))) (if (and wy4b34@ls/false (apply (lambda (wy4b36@id wy4b37@rest) (wy2f02@id? wy4b36@id)) wy4b34@ls/false)) (apply (lambda (wy4b3a@id wy4b3b@rest) (wy31ef@syntax->datum wy4b3a@id)) wy4b34@ls/false) (let ((wy4b3e@t wy4b32@t)) (let ((wy4b40@ls/false (wy3109@syntax-dispatch wy4b3e@t '_))) (if wy4b40@ls/false (apply (lambda () '#f) wy4b40@ls/false) (wy31e9@syntax-violation '#f '"invalid syntax" wy4b3e@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" wy4b20@who))))) (raise (condition (if wy4b28@who (make-who-condition wy4b28@who) (condition)) (make-message-condition wy4b21@msg) wy4b23@condition-object (wy31df@extract-position-condition wy4b22@form))))))) (set! wy4c78@wy31e7@syntax-violation* wy31e7@syntax-violation*) (set! wy31e9@syntax-violation (lambda wy4b50 (let ((wy4b51 (length wy4b50))) (if (= wy4b51 '3) (apply (lambda (wy4b42@who wy4b43@msg wy4b44@form) (wy31e9@syntax-violation wy4b42@who wy4b43@msg wy4b44@form '#f)) wy4b50) (if (= wy4b51 '4) (apply (lambda (wy4b48@who wy4b49@msg wy4b4a@form wy4b4b@subform) (wy31e7@syntax-violation* wy4b48@who wy4b49@msg wy4b4a@form (make-syntax-violation (wy31ef@syntax->datum wy4b4a@form) (wy31ef@syntax->datum wy4b4b@subform)))) wy4b50) (error 'apply '"invalid arg count")))))) (set! wy4c79@wy31e9@syntax-violation wy31e9@syntax-violation) (set! wy31eb@identifier? (lambda (wy4b52@x) (wy2f02@id? wy4b52@x))) (set! wy4c7a@wy31eb@identifier? wy31eb@identifier?) (set! wy31ed@datum->syntax (lambda (wy4b54@id wy4b55@datum) (if (wy2f02@id? wy4b54@id) (wy2ee2@datum->stx wy4b54@id wy4b55@datum) (assertion-violation 'datum->syntax '"not an identifier" wy4b54@id)))) (set! wy4c7b@wy31ed@datum->syntax wy31ed@datum->syntax) (set! wy31ef@syntax->datum (lambda (wy4b58@x) (wy2f16@stx->datum wy4b58@x))) (set! wy4c7c@wy31ef@syntax->datum wy31ef@syntax->datum) (set! wy31f1@ungensym-all (lambda (wy4b5a@code) (if (pair? wy4b5a@code) (cons (wy31f1@ungensym-all (car wy4b5a@code)) (wy31f1@ungensym-all (cdr wy4b5a@code))) (if (symbol? wy4b5a@code) (ungensym wy4b5a@code) wy4b5a@code)))) (set! wy4c7d@wy31f1@ungensym-all wy31f1@ungensym-all) (set! wy31f3@compile-r6rs-top-level (lambda (wy4b5c@x*) (call-with-values (lambda () (wy3181@top-level-expander wy4b5c@x*)) (lambda (wy4b62@wy4b5f wy4b63@wy4b61) (let ((wy4b66@invoke-code wy4b63@wy4b61) (wy4b67@lib* wy4b62@wy4b5f)) (lambda () (begin (for-each wy2d1e@wy2b6c@invoke-library wy4b67@lib*) (let ((wy4b6a@expanded (wy2aa8@wy2a60@expanded->core wy4b66@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (wy31f1@ungensym-all wy4b6a@expanded)) (void)) (eval-core wy4b6a@expanded)))))))))) (set! wy4c7e@wy31f3@compile-r6rs-top-level wy31f3@compile-r6rs-top-level) (set! wy31f5@pre-compile-r6rs-top-level (lambda (wy4b6c@x*) (call-with-values (lambda () (wy3181@top-level-expander wy4b6c@x*)) (lambda (wy4b72@wy4b6f wy4b73@wy4b71) (let ((wy4b76@invoke-code wy4b73@wy4b71) (wy4b77@lib* wy4b72@wy4b6f)) (begin (for-each wy2d1e@wy2b6c@invoke-library wy4b77@lib*) (wy2a50@wy292c@compile-core (wy2aa8@wy2a60@expanded->core wy4b76@invoke-code)))))))) (set! wy4c7f@wy31f5@pre-compile-r6rs-top-level wy31f5@pre-compile-r6rs-top-level) (set! wy31f7@interaction-environment (let ((wy4b7a@the-env '#f)) (lambda () (or wy4b7a@the-env (let ((wy4b7c@lib (wy2d17@wy2b5e@find-library-by-name '(mosh interaction))) (wy4b7d@rib (wy2eb6@make-empty-rib))) (begin (let ((wy4b80@subst (wy2cf9@wy2b22@library-subst wy4b7c@lib))) (begin (wy2ea2@set-rib-sym*! wy4b7d@rib (map car wy4b80@subst)) (wy2ea6@set-rib-mark**! wy4b7d@rib (map (lambda (wy4b82@x) wy2e86@top-mark*) wy4b80@subst)) (wy2eaa@set-rib-label*! wy4b7d@rib (map cdr wy4b80@subst)))) (let ((wy4b84@env (make-simple-struct 'interaction-env '4 (list wy4b7d@rib '() '())))) (begin (set! wy4b7a@the-env wy4b84@env) wy4b84@env)))))))) (set! wy4c80@wy31f7@interaction-environment wy31f7@interaction-environment) (set! wy31f9@top-level-context (wy2a52@wy2930@make-parameter '#f)) (set! wy4c81@wy31f9@top-level-context wy31f9@top-level-context) (wy2d14@wy2b58@current-library-expander wy31cb@library-expander))
(begin (begin (wy2aa5@wy2a5a@current-primitive-locations (lambda (wy51e7@x) (let ((wy51e9@t (assq wy51e7@x '((syntax-error . wy4c77@wy31e5@syntax-error) (syntax-dispatch . wy4c15@wy3109@syntax-dispatch) (load . wy4e01@wy4ca8@load) (interaction-environment . wy4c80@wy31f7@interaction-environment) (library-path . wy2d0c@wy2b48@library-path) (mosh-cache-dir . wy2a53@wy2932@mosh-cache-dir) (make-parameter . wy2a52@wy2930@make-parameter) (make-variable-transformer . wy4bd2@wy2f34@make-variable-transformer) (identifier? . wy4c7a@wy31eb@identifier?) (generate-temporaries . wy4c70@wy31d7@generate-temporaries) (free-identifier=? . wy4c71@wy31d9@free-identifier=?) (syntax->datum . wy4c7c@wy31ef@syntax->datum) (datum->syntax . wy4c7b@wy31ed@datum->syntax) (bound-identifier=? . wy4c72@wy31db@bound-identifier=?) (scheme-report-environment . wy4c67@wy31c5@scheme-report-environment) (null-environment . wy4c66@wy31c3@null-environment) (command-line . wy4dfe@wy4ca2@command-line) (eval . wy4c69@wy31c9@eval) (environment . wy4c65@wy31c1@environment) (syntax-violation . wy4c79@wy31e9@syntax-violation) (assertion-error . wy4c76@wy31e3@assertion-error))))) (if wy51e9@t (cdr wy51e9@t) '#f)))) (wy2d1c@wy2b68@install-library 'wy51c4 '(mosh interaction) '() '() '() '() '((regexp? . wy5184) (alist->eq-hash-table . wy5180) (format . wy517d) (string-split . wy5163) (%start-process . wy515c) (%call-process . wy515b) (set-current-directory! . wy5157) (expand-path . wy5156) (current-directory . wy5155) (%getpid . wy5154) (%spawn . wy5153) (%waitpid . wy5152) (simple-struct-name . wy5151) (simple-struct-set! . wy5150) (simple-struct-ref . wy514f) (make-simple-struct . wy514e) (simple-struct? . wy514d) (pointer-ref-c-int64 . wy514c) (pointer-ref-c-int32 . wy514b) (pointer-ref-c-int16 . wy514a) (pointer-ref-c-int8 . wy5149) (pointer-ref-c-uint64 . wy5148) (pointer-ref-c-uint32 . wy5147) (pointer-ref-c-uint16 . wy5146) (pointer-ref-c-uint8 . wy5145) (pointer-set-c-uint64! . wy5144) (pointer-set-c-uint32! . wy5143) (pointer-set-c-uint16! . wy5142) (pointer-set-c-uint8! . wy5141) (pointer-set-c-int64! . wy5140) (pointer-set-c-int32! . wy513f) (pointer-set-c-int16! . wy513e) (pointer-set-c-int8! . wy513d) (pointer-set-c-pointer! . wy513c) (pointer-set-c-double! . wy513b) (pointer-set-c-float! . wy513a) (pointer-set-c-long-long! . wy5139) (pointer-set-c-long! . wy5138) (pointer-set-c-int! . wy5137) (pointer-set-c-short! . wy5136) (pointer-set-c-char! . wy5135) (pointer-ref-c-pointer . wy5134) (pointer-ref-c-double . wy5133) (pointer-ref-c-float . wy5132) (pointer-ref-c-unsigned-long-long . wy5131) (pointer-ref-c-signed-long-long . wy5130) (pointer-ref-c-unsigned-long . wy512f) (pointer-ref-c-signed-long . wy512e) (pointer-ref-c-unsigned-int . wy512d) (pointer-ref-c-signed-int . wy512c) (pointer-ref-c-unsigned-short . wy512b) (pointer-ref-c-signed-short . wy512a) (pointer-ref-c-unsigned-char . wy5129) (pointer-ref-c-signed-char . wy5128) (pointer->integer . wy5127) (integer->pointer . wy5126) (pointer? . wy5125) (shared-errno . wy5124) (%ffi-supported? . wy511f) (%ffi-pointer->string . wy511e) (%ffi-call . wy511d) (%ffi-lookup . wy511c) (%ffi-open . wy511b) (null-terminated-utf8->string . wy511a) (null-terminated-bytevector->string . wy5119) (%exec . wy5118) (%fork . wy5117) (%pipe . wy5116) (p . wy5115) (whereis . wy50f9) (register . wy50f8) (vm-join! . wy50f7) (vm-set-value! . wy50f6) (vm? . wy50f5) (main-vm? . wy50f4) (vm-eval . wy50f3) (vm-self . wy50f2) (vm-start! . wy50f1) (make-vm . wy50f0) (mutex-try-lock! . wy50ef) (mutex-unlock! . wy50ee) (mutex-lock! . wy50ed) (mutex? . wy50ec) (make-mutex . wy50eb) (condition-variable-notify-all! . wy50ea) (condition-variable-notify! . wy50e9) (condition-variable-wait! . wy50e8) (make-condition-variable . wy50e7) (write/ss . wy50e6) (string-upcase . wy50c9) (string-titlecase . wy50c8) (string-normalize-nfkd . wy50c7) (string-normalize-nfkc . wy50c6) (string-normalize-nfd . wy50c5) (string-normalize-nfc . wy50c4) (string-foldcase . wy50c3) (string-downcase . wy50c2) (string-ci>? . wy50c1) (string-ci>=? . wy50c0) (string-ci=? . wy50bf) (string-ci<? . wy50be) (string-ci<=? . wy50bd) (char-whitespace? . wy50bc) (char-upper-case? . wy50bb) (char-title-case? . wy50ba) (char-numeric? . wy50b9) (char-lower-case? . wy50b8) (char-general-category . wy50b7) (char-upcase . wy50b6) (char-titlecase . wy50b5) (char-foldcase . wy50b4) (char-downcase . wy50b3) (char-ci>? . wy50b2) (char-ci>=? . wy50b1) (char-ci=? . wy50b0) (char-ci<? . wy50af) (char-ci<=? . wy50ae) (char-alphabetic? . wy50ad) (make-variable-transformer . wy2f33) (identifier? . wy31ea) (generate-temporaries . wy31d6) (free-identifier=? . wy31d8) (syntax->datum . wy31ee) (datum->syntax . wy31ec) (bound-identifier=? . wy31da) (record-type-descriptor? . wy50ac) (record-predicate . wy50ab) (record-mutator . wy50aa) (record-constructor . wy50a9) (record-accessor . wy50a8) (make-record-type-descriptor . wy50a7) (make-record-constructor-descriptor . wy50a6) (record? . wy50a5) (record-type-uid . wy50a4) (record-type-sealed? . wy50a3) (record-type-parent . wy50a2) (record-type-opaque? . wy50a1) (record-type-name . wy50a0) (record-type-generative? . wy509f) (record-type-field-names . wy509e) (record-rtd . wy509d) (record-field-mutable? . wy509c) (delete-file . wy509b) (file-exists? . wy509a) (vector-sort! . wy5099) (vector-sort . wy5098) (list-sort . wy5097) (symbol-hash . wy5096) (string-ci-hash . wy5095) (string-hash . wy5094) (equal-hash . wy5093) (hashtable-equivalence-function . wy5092) (make-hashtable . wy5091) (hashtable-hash-function . wy5090) (make-eqv-hashtable . wy508f) (make-eq-hashtable . wy508e) (hashtable? . wy508d) (hashtable-update! . wy508c) (hashtable-size . wy508b) (hashtable-set! . wy508a) (hashtable-ref . wy5089) (hashtable-mutable? . wy5088) (hashtable-keys . wy5087) (hashtable-entries . wy5086) (hashtable-delete! . wy5085) (hashtable-copy . wy5084) (hashtable-contains? . wy5083) (hashtable-clear! . wy5082) (call-with-output-file . wy5081) (call-with-input-file . wy5080) (write-char . wy507f) (write . wy507e) (with-output-to-file . wy507d) (with-input-from-file . wy507c) (read-char . wy507b) (read . wy507a) (peek-char . wy5079) (open-output-file . wy5078) (open-input-file . wy5077) (newline . wy5076) (display . wy5075) (close-output-port . wy5074) (close-input-port . wy5073) (eof-object? . wy5072) (eof-object . wy5071) (current-error-port . wy5070) (current-output-port . wy506f) (current-input-port . wy506e) (output-port? . wy506d) (input-port? . wy506c) (utf-8-codec . wy506b) (utf-16-codec . wy506a) (transcoder-error-handling-mode . wy5069) (transcoder-eol-style . wy5068) (transcoder-codec . wy5067) (transcoded-port . wy5066) (textual-port? . wy5065) (string->bytevector . wy5064) (standard-output-port . wy5063) (standard-input-port . wy5062) (standard-error-port . wy5061) (set-port-position! . wy5060) (put-u8 . wy505f) (put-string . wy505e) (put-datum . wy505d) (put-char . wy505c) (put-bytevector . wy505b) (port? . wy505a) (port-transcoder . wy5059) (port-position . wy5058) (port-has-set-port-position!? . wy5057) (port-has-port-position? . wy5056) (port-eof? . wy5055) (output-port-buffer-mode . wy5054) (open-string-output-port . wy5053) (open-string-input-port . wy5052) (open-file-output-port . wy5051) (open-file-input/output-port . wy5050) (open-file-input-port . wy504f) (open-bytevector-output-port . wy504e) (open-bytevector-input-port . wy504d) (native-transcoder . wy504c) (native-eol-style . wy504b) (make-transcoder . wy504a) (latin-1-codec . wy5049) (make-i/o-write-error . wy5048) (make-i/o-read-error . wy5047) (make-i/o-port-error . wy5046) (make-i/o-invalid-position-error . wy5045) (make-i/o-filename-error . wy5044) (make-i/o-file-protection-error . wy5043) (make-i/o-file-is-read-only-error . wy5042) (make-i/o-file-does-not-exist-error . wy5041) (make-i/o-file-already-exists-error . wy5040) (make-i/o-error . wy503f) (make-i/o-encoding-error . wy503e) (make-i/o-decoding-error . wy503d) (make-custom-textual-output-port . wy503c) (make-custom-textual-input/output-port . wy503b) (make-custom-textual-input-port . wy503a) (make-custom-binary-output-port . wy5039) (make-custom-binary-input/output-port . wy5038) (make-custom-binary-input-port . wy5037) (make-bytevector . wy5036) (lookahead-u8 . wy5035) (lookahead-char . wy5034) (i/o-write-error? . wy5033) (i/o-read-error? . wy5032) (i/o-port-error? . wy5031) (i/o-invalid-position-error? . wy5030) (i/o-filename-error? . wy502f) (i/o-file-protection-error? . wy502e) (i/o-file-is-read-only-error? . wy502d) (i/o-file-does-not-exist-error? . wy502c) (i/o-file-already-exists-error? . wy502b) (i/o-error? . wy502a) (i/o-error-position . wy5029) (i/o-error-port . wy5028) (i/o-error-filename . wy5027) (i/o-encoding-error? . wy5026) (i/o-encoding-error-char . wy5025) (i/o-decoding-error? . wy5024) (get-u8 . wy5023) (get-string-n! . wy5022) (get-string-n . wy5021) (get-string-all . wy5020) (get-line . wy501f) (get-datum . wy501e) (get-char . wy501d) (get-bytevector-some . wy501c) (get-bytevector-n! . wy501b) (get-bytevector-n . wy501a) (get-bytevector-all . wy5019) (flush-output-port . wy5018) (close-port . wy5017) (exit . wy500f) (command-line . wy4ca1) (string-fill! . wy500e) (string-set! . wy500d) (set-cdr! . wy500c) (set-car! . wy500b) (remove . wy500a) (remv . wy5009) (remp . wy5008) (remq . wy5007) (partition . wy5006) (memv . wy5005) (memq . wy5004) (memp . wy5003) (member . wy5002) (exists . wy5001) (for-all . wy5000) (fold-right . wy4fff) (fold-left . wy4ffe) (find . wy4ffd) (filter . wy4ffc) (cons* . wy4ffb) (assv . wy4ffa) (assq . wy4ff9) (assp . wy4ff8) (assoc . wy4ff7) (call-with-string-output-port . wy4ff6) (call-with-port . wy4ff5) (call-with-bytevector-output-port . wy4ff4) (bytevector->string . wy4ff3) (buffer-mode? . wy4ff2) (binary-port? . wy4ff1) (with-exception-handler . wy4ff0) (raise-continuable . wy4fef) (raise . wy4fee) (eval . wy31c8) (environment . wy31c0) (make-enumeration . wy4fed) (enum-set=? . wy4fec) (enum-set-universe . wy4feb) (enum-set-union . wy4fea) (enum-set-subset? . wy4fe9) (enum-set-projection . wy4fe8) (enum-set-member? . wy4fe7) (enum-set-intersection . wy4fe6) (enum-set-indexer . wy4fe5) (enum-set-difference . wy4fe4) (enum-set-constructor . wy4fe3) (enum-set-complement . wy4fe2) (enum-set->list . wy4fe1) (who-condition? . wy4fe0) (warning? . wy4fdf) (violation? . wy4fde) (undefined-violation? . wy4fdd) (syntax-violation? . wy4fdc) (syntax-violation-subform . wy4fdb) (syntax-violation-form . wy4fda) (syntax-violation . wy31e8) (simple-conditions . wy4fd9) (serious-condition? . wy4fd8) (non-continuable-violation? . wy4fd7) (message-condition? . wy4fd6) (make-who-condition . wy4fd5) (make-warning . wy4fd4) (make-violation . wy4fd3) (make-undefined-violation . wy4fd2) (make-syntax-violation . wy4fd1) (make-serious-condition . wy4fd0) (make-non-continuable-violation . wy4fcf) (make-message-condition . wy4fce) (make-lexical-violation . wy4fcd) (make-irritants-condition . wy4fcc) (make-implementation-restriction-violation . wy4fcb) (make-error . wy4fca) (make-assertion-violation . wy4fc9) (lexical-violation? . wy4fc8) (irritants-condition? . wy4fc7) (implementation-restriction-violation? . wy4fc6) (error? . wy4fc5) (condition-who . wy4fc4) (condition-predicate . wy4fc3) (condition-message . wy4fc2) (condition-irritants . wy4fc1) (condition-accessor . wy4fc0) (condition . wy4fbf) (assertion-violation? . wy4fbe) (condition? . wy4fbd) (utf32->string . wy4fbc) (utf16->string . wy4fbb) (utf8->string . wy4fba) (uint-list->bytevector . wy4fb9) (u8-list->bytevector . wy4fb8) (string->utf8 . wy4fb7) (string->utf32 . wy4fb6) (string->utf16 . wy4fb5) (sint-list->bytevector . wy4fb4) (native-endianness . wy4fb3) (bytevector? . wy4fb2) (bytevector=? . wy4fb1) (bytevector-uint-set! . wy4fb0) (bytevector-uint-ref . wy4faf) (bytevector-u8-set! . wy4fae) (bytevector-u8-ref . wy4fad) (bytevector-u64-set! . wy4fac) (bytevector-u64-ref . wy4fab) (bytevector-u64-native-set! . wy4faa) (bytevector-u64-native-ref . wy4fa9) (bytevector-u32-set! . wy4fa8) (bytevector-u32-ref . wy4fa7) (bytevector-u32-native-set! . wy4fa6) (bytevector-u32-native-ref . wy4fa5) (bytevector-u16-set! . wy4fa4) (bytevector-u16-ref . wy4fa3) (bytevector-u16-native-set! . wy4fa2) (bytevector-u16-native-ref . wy4fa1) (bytevector-sint-set! . wy4fa0) (bytevector-sint-ref . wy4f9f) (bytevector-s8-set! . wy4f9e) (bytevector-s8-ref . wy4f9d) (bytevector-s64-set! . wy4f9c) (bytevector-s64-ref . wy4f9b) (bytevector-s64-native-set! . wy4f9a) (bytevector-s64-native-ref . wy4f99) (bytevector-s32-set! . wy4f98) (bytevector-s32-ref . wy4f97) (bytevector-s32-native-set! . wy4f96) (bytevector-s32-native-ref . wy4f95) (bytevector-s16-set! . wy4f94) (bytevector-s16-ref . wy4f93) (bytevector-s16-native-set! . wy4f92) (bytevector-s16-native-ref . wy4f91) (bytevector-length . wy4f90) (bytevector-ieee-single-ref . wy4f8f) (bytevector-ieee-single-set! . wy4f8e) (bytevector-ieee-single-native-set! . wy4f8d) (bytevector-ieee-single-native-ref . wy4f8c) (bytevector-ieee-double-set! . wy4f8b) (bytevector-ieee-double-ref . wy4f8a) (bytevector-ieee-double-native-set! . wy4f89) (bytevector-ieee-double-native-ref . wy4f88) (bytevector-fill! . wy4f87) (bytevector-copy! . wy4f86) (bytevector-copy . wy4f85) (bytevector->uint-list . wy4f84) (bytevector->u8-list . wy4f83) (bytevector->sint-list . wy4f82) (no-nans-violation? . wy4f81) (no-infinities-violation? . wy4f80) (make-no-nans-violation . wy4f7f) (make-no-infinities-violation . wy4f7e) (real->flonum . wy4f7d) (flzero? . wy4f7c) (fltruncate . wy4f7b) (fltan . wy4f7a) (flsqrt . wy4f79) (flsin . wy4f78) (flround . wy4f77) (flpositive? . wy4f76) (flonum? . wy4f75) (flodd? . wy4f74) (flnumerator . wy4f73) (flnegative? . wy4f72) (flnan? . wy4f71) (flmod0 . wy4f70) (flmod . wy4f6f) (flmin . wy4f6e) (flmax . wy4f6d) (fllog . wy4f6c) (flinteger? . wy4f6b) (flinfinite? . wy4f6a) (flfloor . wy4f69) (flfinite? . wy4f68) (flexpt . wy4f67) (flexp . wy4f66) (fleven? . wy4f65) (fldiv0-and-mod0 . wy4f64) (fldiv0 . wy4f63) (fldiv-and-mod . wy4f62) (fldiv . wy4f61) (fldenominator . wy4f60) (flcos . wy4f5f) (flceiling . wy4f5e) (flatan . wy4f5d) (flasin . wy4f5c) (flacos . wy4f5b) (flabs . wy4f5a) (fl>? . wy4f59) (fl>=? . wy4f58) (fl=? . wy4f57) (fl<? . wy4f56) (fl<=? . wy4f55) (fl/ . wy4f54) (fl- . wy4f53) (fl+ . wy4f52) (fl* . wy4f51) (fixnum->flonum . wy4f50) (fxzero? . wy4f4f) (fxxor . wy4f4e) (fxrotate-bit-field . wy4f4d) (fxreverse-bit-field . wy4f4c) (fxpositive? . wy4f4b) (fxodd? . wy4f4a) (fxnot . wy4f49) (fxnegative? . wy4f48) (fxmod0 . wy4f47) (fxmod . wy4f46) (fxmin . wy4f45) (fxmax . wy4f44) (fxlength . wy4f43) (fxior . wy4f42) (fxif . wy4f41) (fxfirst-bit-set . wy4f40) (fxeven? . wy4f3f) (fxdiv0-and-mod0 . wy4f3e) (fxdiv0 . wy4f3d) (fxdiv-and-mod . wy4f3c) (fxdiv . wy4f3b) (fxcopy-bit-field . wy4f3a) (fxcopy-bit . wy4f39) (fxbit-set? . wy4f38) (fxbit-field . wy4f37) (fxbit-count . wy4f36) (fxarithmetic-shift-right . wy4f35) (fxarithmetic-shift-left . wy4f34) (fxarithmetic-shift . wy4f33) (fxand . wy4f32) (fx>? . wy4f31) (fx>=? . wy4f30) (fx=? . wy4f2f) (fx<? . wy4f2e) (fx<=? . wy4f2d) (fx-/carry . wy4f2c) (fx- . wy4f2b) (fx+/carry . wy4f2a) (fx+ . wy4f29) (fx*/carry . wy4f28) (fx* . wy4f27) (greatest-fixnum . wy4f26) (least-fixnum . wy4f25) (fixnum-width . wy4f24) (fixnum? . wy4f23) (bitwise-rotate-bit-field . wy4f22) (bitwise-reverse-bit-field . wy4f21) (bitwise-length . wy4f20) (bitwise-if . wy4f1f) (bitwise-first-bit-set . wy4f1e) (bitwise-copy-bit-field . wy4f1d) (bitwise-copy-bit . wy4f1c) (bitwise-bit-set? . wy4f1b) (bitwise-bit-field . wy4f1a) (bitwise-bit-count . wy4f19) (bitwise-xor . wy4f18) (bitwise-ior . wy4f17) (bitwise-and . wy4f16) (bitwise-not . wy4f15) (bitwise-arithmetic-shift-right . wy4f14) (bitwise-arithmetic-shift-left . wy4f13) (bitwise-arithmetic-shift . wy4f12) (zero? . wy4f11) (vector? . wy4f10) (vector-set! . wy4f0f) (vector-ref . wy4f0e) (vector-map . wy4f0d) (vector-length . wy4f0c) (vector-for-each . wy4f0b) (vector-fill! . wy4f0a) (vector->list . wy4f09) (vector . wy4f08) (values . wy4f07) (truncate . wy4f06) (tan . wy4f05) (symbol? . wy4f04) (symbol=? . wy4f03) (symbol->string . wy4f02) (substring . wy4f01) (string? . wy4f00) (string>? . wy4eff) (string>=? . wy4efe) (string=? . wy4efd) (string<? . wy4efc) (string<=? . wy4efb) (string-ref . wy4efa) (string-length . wy4ef9) (string-for-each . wy4ef8) (string-copy . wy4ef7) (string-append . wy4ef6) (string->symbol . wy4ef5) (string->number . wy4ef4) (string->list . wy4ef3) (string . wy4ef2) (sqrt . wy4ef1) (sin . wy4ef0) (round . wy4eef) (reverse . wy4eee) (real? . wy4eed) (real-valued? . wy4eec) (real-part . wy4eeb) (rationalize . wy4eea) (rational? . wy4ee9) (rational-valued? . wy4ee8) (procedure? . wy4ee7) (positive? . wy4ee6) (pair? . wy4ee5) (odd? . wy4ee4) (numerator . wy4ee3) (number? . wy4ee2) (number->string . wy4ee1) (null? . wy4ee0) (not . wy4edf) (negative? . wy4ede) (nan? . wy4edd) (min . wy4edc) (max . wy4edb) (map . wy4eda) (make-vector . wy4ed9) (make-string . wy4ed8) (make-rectangular . wy4ed7) (make-polar . wy4ed6) (magnitude . wy4ed5) (log . wy4ed4) (list? . wy4ed3) (list-tail . wy4ed2) (list-ref . wy4ed1) (list->vector . wy4ed0) (list->string . wy4ecf) (list . wy4ece) (length . wy4ecd) (lcm . wy4ecc) (integer? . wy4ecb) (integer-valued? . wy4eca) (integer->char . wy4ec9) (infinite? . wy4ec8) (inexact? . wy4ec7) (inexact . wy4ec6) (imag-part . wy4ec5) (gcd . wy4ec4) (for-each . wy4ec3) (floor . wy4ec2) (finite? . wy4ec1) (expt . wy4ec0) (exp . wy4ebf) (exact? . wy4ebe) (exact-integer-sqrt . wy4ebd) (exact . wy4ebc) (even? . wy4ebb) (error . wy4eba) (eqv? . wy4eb9) (equal? . wy4eb8) (eq? . wy4eb7) (dynamic-wind . wy4eb6) (div0-and-mod0 . wy4eb5) (mod0 . wy4eb4) (div0 . wy4eb3) (div-and-mod . wy4eb2) (mod . wy4eb1) (div . wy4eb0) (denominator . wy4eaf) (cos . wy4eae) (cons . wy4ead) (complex? . wy4eac) (char? . wy4eab) (char>? . wy4eaa) (char>=? . wy4ea9) (char=? . wy4ea8) (char<? . wy4ea7) (char<=? . wy4ea6) (char->integer . wy4ea5) (ceiling . wy4ea4) (call-with-values . wy4ea3) (call/cc . wy4ea2) (call-with-current-continuation . wy4ea1) (cddddr . wy4ea0) (cdddar . wy4e9f) (cddadr . wy4e9e) (cddaar . wy4e9d) (cdaddr . wy4e9c) (cdadar . wy4e9b) (cdaadr . wy4e9a) (cdaaar . wy4e99) (cadddr . wy4e98) (caddar . wy4e97) (cadadr . wy4e96) (cadaar . wy4e95) (caaddr . wy4e94) (caadar . wy4e93) (caaadr . wy4e92) (caaaar . wy4e91) (cdddr . wy4e90) (cddar . wy4e8f) (cdadr . wy4e8e) (cdaar . wy4e8d) (caddr . wy4e8c) (cadar . wy4e8b) (caadr . wy4e8a) (caaar . wy4e89) (cddr . wy4e88) (cdar . wy4e87) (cadr . wy4e86) (caar . wy4e85) (cdr . wy4e84) (car . wy4e83) (boolean? . wy4e82) (boolean=? . wy4e81) (atan . wy4e80) (assertion-violation . wy4e7f) (asin . wy4e7e) (apply . wy4e7d) (append . wy4e7c) (angle . wy4e7b) (acos . wy4e7a) (abs . wy4e79) (/ . wy4e78) (* . wy4e77) (- . wy4e76) (+ . wy4e75) (>= . wy4e74) (> . wy4e73) (= . wy4e72) (<= . wy4e71) (< . wy4e70) (library . wy4e6f) (&no-nans . wy4e6e) (&no-infinities . wy4e6d) (&i/o-encoding . wy4e6c) (&i/o-decoding . wy4e6b) (&i/o-port . wy4e6a) (&i/o-file-does-not-exist . wy4e69) (&i/o-file-already-exists . wy4e68) (&i/o-file-is-read-only . wy4e67) (&i/o-file-protection . wy4e66) (&i/o-filename . wy4e65) (&i/o-invalid-position . wy4e64) (&i/o-write . wy4e63) (&i/o-read . wy4e62) (&i/o . wy4e61) (&undefined . wy4e60) (&syntax . wy4e5f) (&lexical . wy4e5e) (&implementation-restriction . wy4e5d) (&non-continuable . wy4e5c) (&who . wy4e5b) (&irritants . wy4e5a) (&assertion . wy4e59) (&violation . wy4e58) (&error . wy4e57) (&serious . wy4e56) (&warning . wy4e55) (&message . wy4e54) (&condition . wy4e53) (define-condition-type . wy4e52) (define-enumeration . wy4e51) (define-record-type . wy4e50) (parent-rtd . wy4e4f) (nongenerative . wy4e4e) (opaque . wy4e4d) (sealed . wy4e4c) (protocol . wy4e4b) (parent . wy4e4a) (immutable . wy4e49) (mutable . wy4e48) (fields . wy4e47) (error-handling-mode . wy4e46) (file-options . wy4e45) (buffer-mode . wy4e44) (eol-style . wy4e43) (guard . wy4e42) (unsyntax-splicing . wy4e3f) (unsyntax . wy4e3e) (unquote-splicing . wy4e3d) (unquote . wy4e3c) (_ . wy4e3b) (else . wy4e3a) (=> . wy4e39) (... . wy4e38) (assert . wy4e37) (endianness . wy4e36) (time . wy4e34) (do . wy4e33) (cond . wy4e32) (let* . wy4e31) (let*-values . wy4e30) (let-values . wy4e2f) (identifier-syntax . wy4e2e) (with-syntax . wy4e2d) (quasisyntax . wy4e2c) (quasiquote . wy4e2b) (syntax-rules . wy4e2a) (include . wy4e29) (record-constructor-descriptor . wy4e27) (record-type-descriptor . wy4e26) (case . wy4e25) (unless . wy4e23) (when . wy4e22) (or . wy4e21) (and . wy4e20) (if . wy4e1f) (let . wy4e1e) (letrec* . wy4e1d) (letrec . wy4e1c) (case-lambda . wy4e1a) (lambda . wy4e19) (syntax . wy4e18) (syntax-case . wy4e17) (quote . wy4e16) (letrec-syntax . wy4e14) (let-syntax . wy4e13) (set! . wy4e12) (import . wy4e11) (begin . wy4e10) (define-syntax . wy4e0e) (define . wy4e0d)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51c5 '(psyntax null-environment-5) '() '() '() '() '((make-promise . wy5010) (unquote-splicing . wy4e3d) (unquote . wy4e3c) (_ . wy4e3b) (else . wy4e3a) (=> . wy4e39) (... . wy4e38) (delay . wy4e35) (do . wy4e33) (cond . wy4e32) (let* . wy4e31) (quasiquote . wy4e2b) (syntax-rules . wy4e2a) (case . wy4e25) (or . wy4e21) (and . wy4e20) (if . wy4e1f) (let . wy4e1e) (letrec . wy4e1c) (lambda . wy4e19) (quote . wy4e16) (letrec-syntax . wy4e14) (let-syntax . wy4e13) (set! . wy4e12) (begin . wy4e10) (define-syntax . wy4e0e) (define . wy4e0d)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51c6 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . wy50c1) (string-ci>=? . wy50c0) (string-ci=? . wy50bf) (string-ci<? . wy50be) (string-ci<=? . wy50bd) (char-whitespace? . wy50bc) (char-upper-case? . wy50bb) (char-numeric? . wy50b9) (char-lower-case? . wy50b8) (char-upcase . wy50b6) (char-downcase . wy50b3) (char-ci>? . wy50b2) (char-ci>=? . wy50b1) (char-ci=? . wy50b0) (char-ci<? . wy50af) (char-ci<=? . wy50ae) (char-alphabetic? . wy50ad) (call-with-output-file . wy5081) (call-with-input-file . wy5080) (write-char . wy507f) (write . wy507e) (with-output-to-file . wy507d) (with-input-from-file . wy507c) (read-char . wy507b) (read . wy507a) (peek-char . wy5079) (open-output-file . wy5078) (open-input-file . wy5077) (newline . wy5076) (display . wy5075) (close-output-port . wy5074) (close-input-port . wy5073) (eof-object . wy5071) (current-output-port . wy506f) (current-input-port . wy506e) (output-port? . wy506d) (input-port? . wy506c) (scheme-report-environment . wy31c4) (quotient . wy5016) (null-environment . wy31c2) (remainder . wy5015) (modulo . wy5014) (inexact->exact . wy5013) (force . wy5012) (exact->inexact . wy5011) (make-promise . wy5010) (string-fill! . wy500e) (string-set! . wy500d) (set-cdr! . wy500c) (set-car! . wy500b) (memv . wy5005) (memq . wy5004) (member . wy5002) (assv . wy4ffa) (assq . wy4ff9) (assoc . wy4ff7) (eval . wy31c8) (zero? . wy4f11) (vector? . wy4f10) (vector-set! . wy4f0f) (vector-ref . wy4f0e) (vector-length . wy4f0c) (vector-fill! . wy4f0a) (vector->list . wy4f09) (vector . wy4f08) (values . wy4f07) (truncate . wy4f06) (tan . wy4f05) (symbol? . wy4f04) (symbol->string . wy4f02) (substring . wy4f01) (string? . wy4f00) (string>? . wy4eff) (string>=? . wy4efe) (string=? . wy4efd) (string<? . wy4efc) (string<=? . wy4efb) (string-ref . wy4efa) (string-length . wy4ef9) (string-copy . wy4ef7) (string-append . wy4ef6) (string->symbol . wy4ef5) (string->number . wy4ef4) (string->list . wy4ef3) (string . wy4ef2) (sqrt . wy4ef1) (sin . wy4ef0) (round . wy4eef) (reverse . wy4eee) (real? . wy4eed) (real-part . wy4eeb) (rationalize . wy4eea) (rational? . wy4ee9) (procedure? . wy4ee7) (positive? . wy4ee6) (pair? . wy4ee5) (odd? . wy4ee4) (numerator . wy4ee3) (number? . wy4ee2) (number->string . wy4ee1) (not . wy4edf) (negative? . wy4ede) (min . wy4edc) (max . wy4edb) (map . wy4eda) (make-vector . wy4ed9) (make-string . wy4ed8) (make-rectangular . wy4ed7) (make-polar . wy4ed6) (magnitude . wy4ed5) (log . wy4ed4) (list? . wy4ed3) (list-tail . wy4ed2) (list-ref . wy4ed1) (list->vector . wy4ed0) (list->string . wy4ecf) (list . wy4ece) (length . wy4ecd) (lcm . wy4ecc) (integer? . wy4ecb) (integer->char . wy4ec9) (inexact? . wy4ec7) (imag-part . wy4ec5) (gcd . wy4ec4) (for-each . wy4ec3) (floor . wy4ec2) (expt . wy4ec0) (exp . wy4ebf) (exact? . wy4ebe) (even? . wy4ebb) (eqv? . wy4eb9) (equal? . wy4eb8) (eq? . wy4eb7) (dynamic-wind . wy4eb6) (denominator . wy4eaf) (cos . wy4eae) (cons . wy4ead) (complex? . wy4eac) (char? . wy4eab) (char>? . wy4eaa) (char>=? . wy4ea9) (char=? . wy4ea8) (char<? . wy4ea7) (char<=? . wy4ea6) (char->integer . wy4ea5) (ceiling . wy4ea4) (call-with-values . wy4ea3) (call-with-current-continuation . wy4ea1) (cddddr . wy4ea0) (cdddar . wy4e9f) (cddadr . wy4e9e) (cddaar . wy4e9d) (cdaddr . wy4e9c) (cdadar . wy4e9b) (cdaadr . wy4e9a) (cdaaar . wy4e99) (cadddr . wy4e98) (caddar . wy4e97) (cadadr . wy4e96) (cadaar . wy4e95) (caaddr . wy4e94) (caadar . wy4e93) (caaadr . wy4e92) (caaaar . wy4e91) (cdddr . wy4e90) (cddar . wy4e8f) (cdadr . wy4e8e) (cdaar . wy4e8d) (caddr . wy4e8c) (cadar . wy4e8b) (caadr . wy4e8a) (caaar . wy4e89) (cddr . wy4e88) (cdar . wy4e87) (cadr . wy4e86) (caar . wy4e85) (cdr . wy4e84) (car . wy4e83) (boolean? . wy4e82) (atan . wy4e80) (asin . wy4e7e) (apply . wy4e7d) (append . wy4e7c) (angle . wy4e7b) (acos . wy4e7a) (abs . wy4e79) (/ . wy4e78) (* . wy4e77) (- . wy4e76) (+ . wy4e75) (>= . wy4e74) (> . wy4e73) (= . wy4e72) (<= . wy4e71) (< . wy4e70) (unquote-splicing . wy4e3d) (unquote . wy4e3c) (else . wy4e3a) (=> . wy4e39) (... . wy4e38) (delay . wy4e35) (do . wy4e33) (cond . wy4e32) (let* . wy4e31) (quasiquote . wy4e2b) (syntax-rules . wy4e2a) (case . wy4e25) (or . wy4e21) (and . wy4e20) (if . wy4e1f) (let . wy4e1e) (letrec . wy4e1c) (lambda . wy4e19) (quote . wy4e16) (letrec-syntax . wy4e14) (let-syntax . wy4e13) (set! . wy4e12) (begin . wy4e10) (define-syntax . wy4e0e) (define . wy4e0d)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51c7 '(psyntax modules) '() '() '() '() '((module . wy4e0f)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51c8 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51c9 '(rnrs) '(6) '() '() '() '((regexp? . wy5184) (string-upcase . wy50c9) (string-titlecase . wy50c8) (string-normalize-nfkd . wy50c7) (string-normalize-nfkc . wy50c6) (string-normalize-nfd . wy50c5) (string-normalize-nfc . wy50c4) (string-foldcase . wy50c3) (string-downcase . wy50c2) (string-ci>? . wy50c1) (string-ci>=? . wy50c0) (string-ci=? . wy50bf) (string-ci<? . wy50be) (string-ci<=? . wy50bd) (char-whitespace? . wy50bc) (char-upper-case? . wy50bb) (char-title-case? . wy50ba) (char-numeric? . wy50b9) (char-lower-case? . wy50b8) (char-general-category . wy50b7) (char-upcase . wy50b6) (char-titlecase . wy50b5) (char-foldcase . wy50b4) (char-downcase . wy50b3) (char-ci>? . wy50b2) (char-ci>=? . wy50b1) (char-ci=? . wy50b0) (char-ci<? . wy50af) (char-ci<=? . wy50ae) (char-alphabetic? . wy50ad) (make-variable-transformer . wy2f33) (identifier? . wy31ea) (generate-temporaries . wy31d6) (free-identifier=? . wy31d8) (syntax->datum . wy31ee) (datum->syntax . wy31ec) (bound-identifier=? . wy31da) (record-type-descriptor? . wy50ac) (record-predicate . wy50ab) (record-mutator . wy50aa) (record-constructor . wy50a9) (record-accessor . wy50a8) (make-record-type-descriptor . wy50a7) (make-record-constructor-descriptor . wy50a6) (record? . wy50a5) (record-type-uid . wy50a4) (record-type-sealed? . wy50a3) (record-type-parent . wy50a2) (record-type-opaque? . wy50a1) (record-type-name . wy50a0) (record-type-generative? . wy509f) (record-type-field-names . wy509e) (record-rtd . wy509d) (record-field-mutable? . wy509c) (delete-file . wy509b) (file-exists? . wy509a) (vector-sort! . wy5099) (vector-sort . wy5098) (list-sort . wy5097) (symbol-hash . wy5096) (string-ci-hash . wy5095) (string-hash . wy5094) (equal-hash . wy5093) (hashtable-equivalence-function . wy5092) (make-hashtable . wy5091) (hashtable-hash-function . wy5090) (make-eqv-hashtable . wy508f) (make-eq-hashtable . wy508e) (hashtable? . wy508d) (hashtable-update! . wy508c) (hashtable-size . wy508b) (hashtable-set! . wy508a) (hashtable-ref . wy5089) (hashtable-mutable? . wy5088) (hashtable-keys . wy5087) (hashtable-entries . wy5086) (hashtable-delete! . wy5085) (hashtable-copy . wy5084) (hashtable-contains? . wy5083) (hashtable-clear! . wy5082) (call-with-output-file . wy5081) (call-with-input-file . wy5080) (write-char . wy507f) (write . wy507e) (with-output-to-file . wy507d) (with-input-from-file . wy507c) (read-char . wy507b) (read . wy507a) (peek-char . wy5079) (open-output-file . wy5078) (open-input-file . wy5077) (newline . wy5076) (display . wy5075) (close-output-port . wy5074) (close-input-port . wy5073) (eof-object? . wy5072) (eof-object . wy5071) (current-error-port . wy5070) (current-output-port . wy506f) (current-input-port . wy506e) (output-port? . wy506d) (input-port? . wy506c) (utf-8-codec . wy506b) (utf-16-codec . wy506a) (transcoder-error-handling-mode . wy5069) (transcoder-eol-style . wy5068) (transcoder-codec . wy5067) (transcoded-port . wy5066) (textual-port? . wy5065) (string->bytevector . wy5064) (standard-output-port . wy5063) (standard-input-port . wy5062) (standard-error-port . wy5061) (set-port-position! . wy5060) (put-u8 . wy505f) (put-string . wy505e) (put-datum . wy505d) (put-char . wy505c) (put-bytevector . wy505b) (port? . wy505a) (port-transcoder . wy5059) (port-position . wy5058) (port-has-set-port-position!? . wy5057) (port-has-port-position? . wy5056) (port-eof? . wy5055) (output-port-buffer-mode . wy5054) (open-string-output-port . wy5053) (open-string-input-port . wy5052) (open-file-output-port . wy5051) (open-file-input/output-port . wy5050) (open-file-input-port . wy504f) (open-bytevector-output-port . wy504e) (open-bytevector-input-port . wy504d) (native-transcoder . wy504c) (native-eol-style . wy504b) (make-transcoder . wy504a) (latin-1-codec . wy5049) (make-i/o-write-error . wy5048) (make-i/o-read-error . wy5047) (make-i/o-port-error . wy5046) (make-i/o-invalid-position-error . wy5045) (make-i/o-filename-error . wy5044) (make-i/o-file-protection-error . wy5043) (make-i/o-file-is-read-only-error . wy5042) (make-i/o-file-does-not-exist-error . wy5041) (make-i/o-file-already-exists-error . wy5040) (make-i/o-error . wy503f) (make-i/o-encoding-error . wy503e) (make-i/o-decoding-error . wy503d) (make-custom-textual-output-port . wy503c) (make-custom-textual-input/output-port . wy503b) (make-custom-textual-input-port . wy503a) (make-custom-binary-output-port . wy5039) (make-custom-binary-input/output-port . wy5038) (make-custom-binary-input-port . wy5037) (make-bytevector . wy5036) (lookahead-u8 . wy5035) (lookahead-char . wy5034) (i/o-write-error? . wy5033) (i/o-read-error? . wy5032) (i/o-port-error? . wy5031) (i/o-invalid-position-error? . wy5030) (i/o-filename-error? . wy502f) (i/o-file-protection-error? . wy502e) (i/o-file-is-read-only-error? . wy502d) (i/o-file-does-not-exist-error? . wy502c) (i/o-file-already-exists-error? . wy502b) (i/o-error? . wy502a) (i/o-error-position . wy5029) (i/o-error-port . wy5028) (i/o-error-filename . wy5027) (i/o-encoding-error? . wy5026) (i/o-encoding-error-char . wy5025) (i/o-decoding-error? . wy5024) (get-u8 . wy5023) (get-string-n! . wy5022) (get-string-n . wy5021) (get-string-all . wy5020) (get-line . wy501f) (get-datum . wy501e) (get-char . wy501d) (get-bytevector-some . wy501c) (get-bytevector-n! . wy501b) (get-bytevector-n . wy501a) (get-bytevector-all . wy5019) (flush-output-port . wy5018) (close-port . wy5017) (exit . wy500f) (command-line . wy4ca1) (remove . wy500a) (remv . wy5009) (remp . wy5008) (remq . wy5007) (partition . wy5006) (memv . wy5005) (memq . wy5004) (memp . wy5003) (member . wy5002) (exists . wy5001) (for-all . wy5000) (fold-right . wy4fff) (fold-left . wy4ffe) (find . wy4ffd) (filter . wy4ffc) (cons* . wy4ffb) (assv . wy4ffa) (assq . wy4ff9) (assp . wy4ff8) (assoc . wy4ff7) (call-with-string-output-port . wy4ff6) (call-with-port . wy4ff5) (call-with-bytevector-output-port . wy4ff4) (bytevector->string . wy4ff3) (buffer-mode? . wy4ff2) (binary-port? . wy4ff1) (with-exception-handler . wy4ff0) (raise-continuable . wy4fef) (raise . wy4fee) (make-enumeration . wy4fed) (enum-set=? . wy4fec) (enum-set-universe . wy4feb) (enum-set-union . wy4fea) (enum-set-subset? . wy4fe9) (enum-set-projection . wy4fe8) (enum-set-member? . wy4fe7) (enum-set-intersection . wy4fe6) (enum-set-indexer . wy4fe5) (enum-set-difference . wy4fe4) (enum-set-constructor . wy4fe3) (enum-set-complement . wy4fe2) (enum-set->list . wy4fe1) (who-condition? . wy4fe0) (warning? . wy4fdf) (violation? . wy4fde) (undefined-violation? . wy4fdd) (syntax-violation? . wy4fdc) (syntax-violation-subform . wy4fdb) (syntax-violation-form . wy4fda) (syntax-violation . wy31e8) (simple-conditions . wy4fd9) (serious-condition? . wy4fd8) (non-continuable-violation? . wy4fd7) (message-condition? . wy4fd6) (make-who-condition . wy4fd5) (make-warning . wy4fd4) (make-violation . wy4fd3) (make-undefined-violation . wy4fd2) (make-syntax-violation . wy4fd1) (make-serious-condition . wy4fd0) (make-non-continuable-violation . wy4fcf) (make-message-condition . wy4fce) (make-lexical-violation . wy4fcd) (make-irritants-condition . wy4fcc) (make-implementation-restriction-violation . wy4fcb) (make-error . wy4fca) (make-assertion-violation . wy4fc9) (lexical-violation? . wy4fc8) (irritants-condition? . wy4fc7) (implementation-restriction-violation? . wy4fc6) (error? . wy4fc5) (condition-who . wy4fc4) (condition-predicate . wy4fc3) (condition-message . wy4fc2) (condition-irritants . wy4fc1) (condition-accessor . wy4fc0) (condition . wy4fbf) (assertion-violation? . wy4fbe) (condition? . wy4fbd) (utf32->string . wy4fbc) (utf16->string . wy4fbb) (utf8->string . wy4fba) (uint-list->bytevector . wy4fb9) (u8-list->bytevector . wy4fb8) (string->utf8 . wy4fb7) (string->utf32 . wy4fb6) (string->utf16 . wy4fb5) (sint-list->bytevector . wy4fb4) (native-endianness . wy4fb3) (bytevector? . wy4fb2) (bytevector=? . wy4fb1) (bytevector-uint-set! . wy4fb0) (bytevector-uint-ref . wy4faf) (bytevector-u8-set! . wy4fae) (bytevector-u8-ref . wy4fad) (bytevector-u64-set! . wy4fac) (bytevector-u64-ref . wy4fab) (bytevector-u64-native-set! . wy4faa) (bytevector-u64-native-ref . wy4fa9) (bytevector-u32-set! . wy4fa8) (bytevector-u32-ref . wy4fa7) (bytevector-u32-native-set! . wy4fa6) (bytevector-u32-native-ref . wy4fa5) (bytevector-u16-set! . wy4fa4) (bytevector-u16-ref . wy4fa3) (bytevector-u16-native-set! . wy4fa2) (bytevector-u16-native-ref . wy4fa1) (bytevector-sint-set! . wy4fa0) (bytevector-sint-ref . wy4f9f) (bytevector-s8-set! . wy4f9e) (bytevector-s8-ref . wy4f9d) (bytevector-s64-set! . wy4f9c) (bytevector-s64-ref . wy4f9b) (bytevector-s64-native-set! . wy4f9a) (bytevector-s64-native-ref . wy4f99) (bytevector-s32-set! . wy4f98) (bytevector-s32-ref . wy4f97) (bytevector-s32-native-set! . wy4f96) (bytevector-s32-native-ref . wy4f95) (bytevector-s16-set! . wy4f94) (bytevector-s16-ref . wy4f93) (bytevector-s16-native-set! . wy4f92) (bytevector-s16-native-ref . wy4f91) (bytevector-length . wy4f90) (bytevector-ieee-single-ref . wy4f8f) (bytevector-ieee-single-set! . wy4f8e) (bytevector-ieee-single-native-set! . wy4f8d) (bytevector-ieee-single-native-ref . wy4f8c) (bytevector-ieee-double-set! . wy4f8b) (bytevector-ieee-double-ref . wy4f8a) (bytevector-ieee-double-native-set! . wy4f89) (bytevector-ieee-double-native-ref . wy4f88) (bytevector-fill! . wy4f87) (bytevector-copy! . wy4f86) (bytevector-copy . wy4f85) (bytevector->uint-list . wy4f84) (bytevector->u8-list . wy4f83) (bytevector->sint-list . wy4f82) (no-nans-violation? . wy4f81) (no-infinities-violation? . wy4f80) (make-no-nans-violation . wy4f7f) (make-no-infinities-violation . wy4f7e) (real->flonum . wy4f7d) (flzero? . wy4f7c) (fltruncate . wy4f7b) (fltan . wy4f7a) (flsqrt . wy4f79) (flsin . wy4f78) (flround . wy4f77) (flpositive? . wy4f76) (flonum? . wy4f75) (flodd? . wy4f74) (flnumerator . wy4f73) (flnegative? . wy4f72) (flnan? . wy4f71) (flmod0 . wy4f70) (flmod . wy4f6f) (flmin . wy4f6e) (flmax . wy4f6d) (fllog . wy4f6c) (flinteger? . wy4f6b) (flinfinite? . wy4f6a) (flfloor . wy4f69) (flfinite? . wy4f68) (flexpt . wy4f67) (flexp . wy4f66) (fleven? . wy4f65) (fldiv0-and-mod0 . wy4f64) (fldiv0 . wy4f63) (fldiv-and-mod . wy4f62) (fldiv . wy4f61) (fldenominator . wy4f60) (flcos . wy4f5f) (flceiling . wy4f5e) (flatan . wy4f5d) (flasin . wy4f5c) (flacos . wy4f5b) (flabs . wy4f5a) (fl>? . wy4f59) (fl>=? . wy4f58) (fl=? . wy4f57) (fl<? . wy4f56) (fl<=? . wy4f55) (fl/ . wy4f54) (fl- . wy4f53) (fl+ . wy4f52) (fl* . wy4f51) (fixnum->flonum . wy4f50) (fxzero? . wy4f4f) (fxxor . wy4f4e) (fxrotate-bit-field . wy4f4d) (fxreverse-bit-field . wy4f4c) (fxpositive? . wy4f4b) (fxodd? . wy4f4a) (fxnot . wy4f49) (fxnegative? . wy4f48) (fxmod0 . wy4f47) (fxmod . wy4f46) (fxmin . wy4f45) (fxmax . wy4f44) (fxlength . wy4f43) (fxior . wy4f42) (fxif . wy4f41) (fxfirst-bit-set . wy4f40) (fxeven? . wy4f3f) (fxdiv0-and-mod0 . wy4f3e) (fxdiv0 . wy4f3d) (fxdiv-and-mod . wy4f3c) (fxdiv . wy4f3b) (fxcopy-bit-field . wy4f3a) (fxcopy-bit . wy4f39) (fxbit-set? . wy4f38) (fxbit-field . wy4f37) (fxbit-count . wy4f36) (fxarithmetic-shift-right . wy4f35) (fxarithmetic-shift-left . wy4f34) (fxarithmetic-shift . wy4f33) (fxand . wy4f32) (fx>? . wy4f31) (fx>=? . wy4f30) (fx=? . wy4f2f) (fx<? . wy4f2e) (fx<=? . wy4f2d) (fx-/carry . wy4f2c) (fx- . wy4f2b) (fx+/carry . wy4f2a) (fx+ . wy4f29) (fx*/carry . wy4f28) (fx* . wy4f27) (greatest-fixnum . wy4f26) (least-fixnum . wy4f25) (fixnum-width . wy4f24) (fixnum? . wy4f23) (bitwise-rotate-bit-field . wy4f22) (bitwise-reverse-bit-field . wy4f21) (bitwise-length . wy4f20) (bitwise-if . wy4f1f) (bitwise-first-bit-set . wy4f1e) (bitwise-copy-bit-field . wy4f1d) (bitwise-copy-bit . wy4f1c) (bitwise-bit-set? . wy4f1b) (bitwise-bit-field . wy4f1a) (bitwise-bit-count . wy4f19) (bitwise-xor . wy4f18) (bitwise-ior . wy4f17) (bitwise-and . wy4f16) (bitwise-not . wy4f15) (bitwise-arithmetic-shift-right . wy4f14) (bitwise-arithmetic-shift-left . wy4f13) (bitwise-arithmetic-shift . wy4f12) (zero? . wy4f11) (vector? . wy4f10) (vector-set! . wy4f0f) (vector-ref . wy4f0e) (vector-map . wy4f0d) (vector-length . wy4f0c) (vector-for-each . wy4f0b) (vector-fill! . wy4f0a) (vector->list . wy4f09) (vector . wy4f08) (values . wy4f07) (truncate . wy4f06) (tan . wy4f05) (symbol? . wy4f04) (symbol=? . wy4f03) (symbol->string . wy4f02) (substring . wy4f01) (string? . wy4f00) (string>? . wy4eff) (string>=? . wy4efe) (string=? . wy4efd) (string<? . wy4efc) (string<=? . wy4efb) (string-ref . wy4efa) (string-length . wy4ef9) (string-for-each . wy4ef8) (string-copy . wy4ef7) (string-append . wy4ef6) (string->symbol . wy4ef5) (string->number . wy4ef4) (string->list . wy4ef3) (string . wy4ef2) (sqrt . wy4ef1) (sin . wy4ef0) (round . wy4eef) (reverse . wy4eee) (real? . wy4eed) (real-valued? . wy4eec) (real-part . wy4eeb) (rationalize . wy4eea) (rational? . wy4ee9) (rational-valued? . wy4ee8) (procedure? . wy4ee7) (positive? . wy4ee6) (pair? . wy4ee5) (odd? . wy4ee4) (numerator . wy4ee3) (number? . wy4ee2) (number->string . wy4ee1) (null? . wy4ee0) (not . wy4edf) (negative? . wy4ede) (nan? . wy4edd) (min . wy4edc) (max . wy4edb) (map . wy4eda) (make-vector . wy4ed9) (make-string . wy4ed8) (make-rectangular . wy4ed7) (make-polar . wy4ed6) (magnitude . wy4ed5) (log . wy4ed4) (list? . wy4ed3) (list-tail . wy4ed2) (list-ref . wy4ed1) (list->vector . wy4ed0) (list->string . wy4ecf) (list . wy4ece) (length . wy4ecd) (lcm . wy4ecc) (integer? . wy4ecb) (integer-valued? . wy4eca) (integer->char . wy4ec9) (infinite? . wy4ec8) (inexact? . wy4ec7) (inexact . wy4ec6) (imag-part . wy4ec5) (gcd . wy4ec4) (for-each . wy4ec3) (floor . wy4ec2) (finite? . wy4ec1) (expt . wy4ec0) (exp . wy4ebf) (exact? . wy4ebe) (exact-integer-sqrt . wy4ebd) (exact . wy4ebc) (even? . wy4ebb) (error . wy4eba) (eqv? . wy4eb9) (equal? . wy4eb8) (eq? . wy4eb7) (dynamic-wind . wy4eb6) (div0-and-mod0 . wy4eb5) (mod0 . wy4eb4) (div0 . wy4eb3) (div-and-mod . wy4eb2) (mod . wy4eb1) (div . wy4eb0) (denominator . wy4eaf) (cos . wy4eae) (cons . wy4ead) (complex? . wy4eac) (char? . wy4eab) (char>? . wy4eaa) (char>=? . wy4ea9) (char=? . wy4ea8) (char<? . wy4ea7) (char<=? . wy4ea6) (char->integer . wy4ea5) (ceiling . wy4ea4) (call-with-values . wy4ea3) (call/cc . wy4ea2) (call-with-current-continuation . wy4ea1) (cddddr . wy4ea0) (cdddar . wy4e9f) (cddadr . wy4e9e) (cddaar . wy4e9d) (cdaddr . wy4e9c) (cdadar . wy4e9b) (cdaadr . wy4e9a) (cdaaar . wy4e99) (cadddr . wy4e98) (caddar . wy4e97) (cadadr . wy4e96) (cadaar . wy4e95) (caaddr . wy4e94) (caadar . wy4e93) (caaadr . wy4e92) (caaaar . wy4e91) (cdddr . wy4e90) (cddar . wy4e8f) (cdadr . wy4e8e) (cdaar . wy4e8d) (caddr . wy4e8c) (cadar . wy4e8b) (caadr . wy4e8a) (caaar . wy4e89) (cddr . wy4e88) (cdar . wy4e87) (cadr . wy4e86) (caar . wy4e85) (cdr . wy4e84) (car . wy4e83) (boolean? . wy4e82) (boolean=? . wy4e81) (atan . wy4e80) (assertion-violation . wy4e7f) (asin . wy4e7e) (apply . wy4e7d) (append . wy4e7c) (angle . wy4e7b) (acos . wy4e7a) (abs . wy4e79) (/ . wy4e78) (* . wy4e77) (- . wy4e76) (+ . wy4e75) (>= . wy4e74) (> . wy4e73) (= . wy4e72) (<= . wy4e71) (< . wy4e70) (&no-nans . wy4e6e) (&no-infinities . wy4e6d) (&i/o-encoding . wy4e6c) (&i/o-decoding . wy4e6b) (&i/o-port . wy4e6a) (&i/o-file-does-not-exist . wy4e69) (&i/o-file-already-exists . wy4e68) (&i/o-file-is-read-only . wy4e67) (&i/o-file-protection . wy4e66) (&i/o-filename . wy4e65) (&i/o-invalid-position . wy4e64) (&i/o-write . wy4e63) (&i/o-read . wy4e62) (&i/o . wy4e61) (&undefined . wy4e60) (&syntax . wy4e5f) (&lexical . wy4e5e) (&implementation-restriction . wy4e5d) (&non-continuable . wy4e5c) (&who . wy4e5b) (&irritants . wy4e5a) (&assertion . wy4e59) (&violation . wy4e58) (&error . wy4e57) (&serious . wy4e56) (&warning . wy4e55) (&message . wy4e54) (&condition . wy4e53) (define-condition-type . wy4e52) (define-enumeration . wy4e51) (define-record-type . wy4e50) (parent-rtd . wy4e4f) (nongenerative . wy4e4e) (opaque . wy4e4d) (sealed . wy4e4c) (protocol . wy4e4b) (parent . wy4e4a) (immutable . wy4e49) (mutable . wy4e48) (fields . wy4e47) (error-handling-mode . wy4e46) (file-options . wy4e45) (buffer-mode . wy4e44) (eol-style . wy4e43) (guard . wy4e42) (unsyntax-splicing . wy4e3f) (unsyntax . wy4e3e) (unquote-splicing . wy4e3d) (unquote . wy4e3c) (_ . wy4e3b) (else . wy4e3a) (=> . wy4e39) (... . wy4e38) (assert . wy4e37) (endianness . wy4e36) (do . wy4e33) (cond . wy4e32) (let* . wy4e31) (let*-values . wy4e30) (let-values . wy4e2f) (identifier-syntax . wy4e2e) (with-syntax . wy4e2d) (quasisyntax . wy4e2c) (quasiquote . wy4e2b) (syntax-rules . wy4e2a) (record-constructor-descriptor . wy4e27) (record-type-descriptor . wy4e26) (case . wy4e25) (unless . wy4e23) (when . wy4e22) (or . wy4e21) (and . wy4e20) (if . wy4e1f) (let . wy4e1e) (letrec* . wy4e1d) (letrec . wy4e1c) (case-lambda . wy4e1a) (lambda . wy4e19) (syntax . wy4e18) (syntax-case . wy4e17) (quote . wy4e16) (letrec-syntax . wy4e14) (let-syntax . wy4e13) (set! . wy4e12) (begin . wy4e10) (define-syntax . wy4e0e) (define . wy4e0d)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51ca '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . wy31c4) (quotient . wy5016) (null-environment . wy31c2) (remainder . wy5015) (modulo . wy5014) (inexact->exact . wy5013) (force . wy5012) (exact->inexact . wy5011) (make-promise . wy5010) (delay . wy4e35)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51cb '(rnrs control) '(6) '() '() '() '((do . wy4e33) (unless . wy4e23) (when . wy4e22) (case-lambda . wy4e1a)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51cc '(rnrs eval) '(6) '() '() '() '((eval . wy31c8) (environment . wy31c0)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51cd '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . wy500c) (set-car! . wy500b)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51ce '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . wy500e) (string-set! . wy500d)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51cf '(rnrs programs) '(6) '() '() '() '((exit . wy500f) (command-line . wy4ca1)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d0 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . wy2f33) (identifier? . wy31ea) (generate-temporaries . wy31d6) (free-identifier=? . wy31d8) (syntax->datum . wy31ee) (datum->syntax . wy31ec) (bound-identifier=? . wy31da) (syntax-violation . wy31e8) (unsyntax-splicing . wy4e3f) (unsyntax . wy4e3e) (_ . wy4e3b) (... . wy4e38) (with-syntax . wy4e2d) (quasisyntax . wy4e2c) (syntax . wy4e18) (syntax-case . wy4e17)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d1 '(rnrs files) '(6) '() '() '() '((delete-file . wy509b) (file-exists? . wy509a) (make-i/o-write-error . wy5048) (make-i/o-read-error . wy5047) (make-i/o-port-error . wy5046) (make-i/o-invalid-position-error . wy5045) (make-i/o-filename-error . wy5044) (make-i/o-file-protection-error . wy5043) (make-i/o-file-is-read-only-error . wy5042) (make-i/o-file-does-not-exist-error . wy5041) (make-i/o-file-already-exists-error . wy5040) (make-i/o-error . wy503f) (i/o-write-error? . wy5033) (i/o-read-error? . wy5032) (i/o-port-error? . wy5031) (i/o-invalid-position-error? . wy5030) (i/o-filename-error? . wy502f) (i/o-file-protection-error? . wy502e) (i/o-file-is-read-only-error? . wy502d) (i/o-file-does-not-exist-error? . wy502c) (i/o-file-already-exists-error? . wy502b) (i/o-error? . wy502a) (i/o-error-position . wy5029) (i/o-error-port . wy5028) (i/o-error-filename . wy5027) (&i/o-port . wy4e6a) (&i/o-file-does-not-exist . wy4e69) (&i/o-file-already-exists . wy4e68) (&i/o-file-is-read-only . wy4e67) (&i/o-file-protection . wy4e66) (&i/o-filename . wy4e65) (&i/o-invalid-position . wy4e64) (&i/o-write . wy4e63) (&i/o-read . wy4e62) (&i/o . wy4e61)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d2 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . wy5099) (vector-sort . wy5098) (list-sort . wy5097)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d3 '(rnrs base) '(6) '() '() '() '((zero? . wy4f11) (vector? . wy4f10) (vector-set! . wy4f0f) (vector-ref . wy4f0e) (vector-map . wy4f0d) (vector-length . wy4f0c) (vector-for-each . wy4f0b) (vector-fill! . wy4f0a) (vector->list . wy4f09) (vector . wy4f08) (values . wy4f07) (truncate . wy4f06) (tan . wy4f05) (symbol? . wy4f04) (symbol=? . wy4f03) (symbol->string . wy4f02) (substring . wy4f01) (string? . wy4f00) (string>? . wy4eff) (string>=? . wy4efe) (string=? . wy4efd) (string<? . wy4efc) (string<=? . wy4efb) (string-ref . wy4efa) (string-length . wy4ef9) (string-for-each . wy4ef8) (string-copy . wy4ef7) (string-append . wy4ef6) (string->symbol . wy4ef5) (string->number . wy4ef4) (string->list . wy4ef3) (string . wy4ef2) (sqrt . wy4ef1) (sin . wy4ef0) (round . wy4eef) (reverse . wy4eee) (real? . wy4eed) (real-valued? . wy4eec) (real-part . wy4eeb) (rationalize . wy4eea) (rational? . wy4ee9) (rational-valued? . wy4ee8) (procedure? . wy4ee7) (positive? . wy4ee6) (pair? . wy4ee5) (odd? . wy4ee4) (numerator . wy4ee3) (number? . wy4ee2) (number->string . wy4ee1) (null? . wy4ee0) (not . wy4edf) (negative? . wy4ede) (nan? . wy4edd) (min . wy4edc) (max . wy4edb) (map . wy4eda) (make-vector . wy4ed9) (make-string . wy4ed8) (make-rectangular . wy4ed7) (make-polar . wy4ed6) (magnitude . wy4ed5) (log . wy4ed4) (list? . wy4ed3) (list-tail . wy4ed2) (list-ref . wy4ed1) (list->vector . wy4ed0) (list->string . wy4ecf) (list . wy4ece) (length . wy4ecd) (lcm . wy4ecc) (integer? . wy4ecb) (integer-valued? . wy4eca) (integer->char . wy4ec9) (infinite? . wy4ec8) (inexact? . wy4ec7) (inexact . wy4ec6) (imag-part . wy4ec5) (gcd . wy4ec4) (for-each . wy4ec3) (floor . wy4ec2) (finite? . wy4ec1) (expt . wy4ec0) (exp . wy4ebf) (exact? . wy4ebe) (exact-integer-sqrt . wy4ebd) (exact . wy4ebc) (even? . wy4ebb) (error . wy4eba) (eqv? . wy4eb9) (equal? . wy4eb8) (eq? . wy4eb7) (dynamic-wind . wy4eb6) (div0-and-mod0 . wy4eb5) (mod0 . wy4eb4) (div0 . wy4eb3) (div-and-mod . wy4eb2) (mod . wy4eb1) (div . wy4eb0) (denominator . wy4eaf) (cos . wy4eae) (cons . wy4ead) (complex? . wy4eac) (char? . wy4eab) (char>? . wy4eaa) (char>=? . wy4ea9) (char=? . wy4ea8) (char<? . wy4ea7) (char<=? . wy4ea6) (char->integer . wy4ea5) (ceiling . wy4ea4) (call-with-values . wy4ea3) (call/cc . wy4ea2) (call-with-current-continuation . wy4ea1) (cddddr . wy4ea0) (cdddar . wy4e9f) (cddadr . wy4e9e) (cddaar . wy4e9d) (cdaddr . wy4e9c) (cdadar . wy4e9b) (cdaadr . wy4e9a) (cdaaar . wy4e99) (cadddr . wy4e98) (caddar . wy4e97) (cadadr . wy4e96) (cadaar . wy4e95) (caaddr . wy4e94) (caadar . wy4e93) (caaadr . wy4e92) (caaaar . wy4e91) (cdddr . wy4e90) (cddar . wy4e8f) (cdadr . wy4e8e) (cdaar . wy4e8d) (caddr . wy4e8c) (cadar . wy4e8b) (caadr . wy4e8a) (caaar . wy4e89) (cddr . wy4e88) (cdar . wy4e87) (cadr . wy4e86) (caar . wy4e85) (cdr . wy4e84) (car . wy4e83) (boolean? . wy4e82) (boolean=? . wy4e81) (atan . wy4e80) (assertion-violation . wy4e7f) (asin . wy4e7e) (apply . wy4e7d) (append . wy4e7c) (angle . wy4e7b) (acos . wy4e7a) (abs . wy4e79) (/ . wy4e78) (* . wy4e77) (- . wy4e76) (+ . wy4e75) (>= . wy4e74) (> . wy4e73) (= . wy4e72) (<= . wy4e71) (< . wy4e70) (unquote-splicing . wy4e3d) (unquote . wy4e3c) (_ . wy4e3b) (else . wy4e3a) (=> . wy4e39) (... . wy4e38) (assert . wy4e37) (cond . wy4e32) (let* . wy4e31) (let*-values . wy4e30) (let-values . wy4e2f) (identifier-syntax . wy4e2e) (quasiquote . wy4e2b) (syntax-rules . wy4e2a) (case . wy4e25) (or . wy4e21) (and . wy4e20) (if . wy4e1f) (let . wy4e1e) (letrec* . wy4e1d) (letrec . wy4e1c) (lambda . wy4e19) (quote . wy4e16) (letrec-syntax . wy4e14) (let-syntax . wy4e13) (set! . wy4e12) (begin . wy4e10) (define-syntax . wy4e0e) (define . wy4e0d)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d4 '(rnrs lists) '(6) '() '() '() '((remove . wy500a) (remv . wy5009) (remp . wy5008) (remq . wy5007) (partition . wy5006) (memv . wy5005) (memq . wy5004) (memp . wy5003) (member . wy5002) (exists . wy5001) (for-all . wy5000) (fold-right . wy4fff) (fold-left . wy4ffe) (find . wy4ffd) (filter . wy4ffc) (cons* . wy4ffb) (assv . wy4ffa) (assq . wy4ff9) (assp . wy4ff8) (assoc . wy4ff7)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d5 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . wy5081) (call-with-input-file . wy5080) (write-char . wy507f) (write . wy507e) (with-output-to-file . wy507d) (with-input-from-file . wy507c) (read-char . wy507b) (read . wy507a) (peek-char . wy5079) (open-output-file . wy5078) (open-input-file . wy5077) (newline . wy5076) (display . wy5075) (close-output-port . wy5074) (close-input-port . wy5073) (eof-object? . wy5072) (eof-object . wy5071) (current-error-port . wy5070) (current-output-port . wy506f) (current-input-port . wy506e) (output-port? . wy506d) (input-port? . wy506c) (make-i/o-write-error . wy5048) (make-i/o-read-error . wy5047) (make-i/o-port-error . wy5046) (make-i/o-invalid-position-error . wy5045) (make-i/o-filename-error . wy5044) (make-i/o-file-protection-error . wy5043) (make-i/o-file-is-read-only-error . wy5042) (make-i/o-file-does-not-exist-error . wy5041) (make-i/o-file-already-exists-error . wy5040) (make-i/o-error . wy503f) (i/o-write-error? . wy5033) (i/o-read-error? . wy5032) (i/o-port-error? . wy5031) (i/o-invalid-position-error? . wy5030) (i/o-filename-error? . wy502f) (i/o-file-protection-error? . wy502e) (i/o-file-is-read-only-error? . wy502d) (i/o-file-does-not-exist-error? . wy502c) (i/o-file-already-exists-error? . wy502b) (i/o-error? . wy502a) (i/o-error-position . wy5029) (i/o-error-port . wy5028) (i/o-error-filename . wy5027) (&i/o-port . wy4e6a) (&i/o-file-does-not-exist . wy4e69) (&i/o-file-already-exists . wy4e68) (&i/o-file-is-read-only . wy4e67) (&i/o-file-protection . wy4e66) (&i/o-filename . wy4e65) (&i/o-invalid-position . wy4e64) (&i/o-write . wy4e63) (&i/o-read . wy4e62) (&i/o . wy4e61)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d6 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . wy5036) (utf32->string . wy4fbc) (utf16->string . wy4fbb) (utf8->string . wy4fba) (uint-list->bytevector . wy4fb9) (u8-list->bytevector . wy4fb8) (string->utf8 . wy4fb7) (string->utf32 . wy4fb6) (string->utf16 . wy4fb5) (sint-list->bytevector . wy4fb4) (native-endianness . wy4fb3) (bytevector? . wy4fb2) (bytevector=? . wy4fb1) (bytevector-uint-set! . wy4fb0) (bytevector-uint-ref . wy4faf) (bytevector-u8-set! . wy4fae) (bytevector-u8-ref . wy4fad) (bytevector-u64-set! . wy4fac) (bytevector-u64-ref . wy4fab) (bytevector-u64-native-set! . wy4faa) (bytevector-u64-native-ref . wy4fa9) (bytevector-u32-set! . wy4fa8) (bytevector-u32-ref . wy4fa7) (bytevector-u32-native-set! . wy4fa6) (bytevector-u32-native-ref . wy4fa5) (bytevector-u16-set! . wy4fa4) (bytevector-u16-ref . wy4fa3) (bytevector-u16-native-set! . wy4fa2) (bytevector-u16-native-ref . wy4fa1) (bytevector-sint-set! . wy4fa0) (bytevector-sint-ref . wy4f9f) (bytevector-s8-set! . wy4f9e) (bytevector-s8-ref . wy4f9d) (bytevector-s64-set! . wy4f9c) (bytevector-s64-ref . wy4f9b) (bytevector-s64-native-set! . wy4f9a) (bytevector-s64-native-ref . wy4f99) (bytevector-s32-set! . wy4f98) (bytevector-s32-ref . wy4f97) (bytevector-s32-native-set! . wy4f96) (bytevector-s32-native-ref . wy4f95) (bytevector-s16-set! . wy4f94) (bytevector-s16-ref . wy4f93) (bytevector-s16-native-set! . wy4f92) (bytevector-s16-native-ref . wy4f91) (bytevector-length . wy4f90) (bytevector-ieee-single-ref . wy4f8f) (bytevector-ieee-single-set! . wy4f8e) (bytevector-ieee-single-native-set! . wy4f8d) (bytevector-ieee-single-native-ref . wy4f8c) (bytevector-ieee-double-set! . wy4f8b) (bytevector-ieee-double-ref . wy4f8a) (bytevector-ieee-double-native-set! . wy4f89) (bytevector-ieee-double-native-ref . wy4f88) (bytevector-fill! . wy4f87) (bytevector-copy! . wy4f86) (bytevector-copy . wy4f85) (bytevector->uint-list . wy4f84) (bytevector->u8-list . wy4f83) (bytevector->sint-list . wy4f82) (endianness . wy4e36)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d7 '(rnrs unicode) '(6) '() '() '() '((string-upcase . wy50c9) (string-titlecase . wy50c8) (string-normalize-nfkd . wy50c7) (string-normalize-nfkc . wy50c6) (string-normalize-nfd . wy50c5) (string-normalize-nfc . wy50c4) (string-foldcase . wy50c3) (string-downcase . wy50c2) (string-ci>? . wy50c1) (string-ci>=? . wy50c0) (string-ci=? . wy50bf) (string-ci<? . wy50be) (string-ci<=? . wy50bd) (char-whitespace? . wy50bc) (char-upper-case? . wy50bb) (char-title-case? . wy50ba) (char-numeric? . wy50b9) (char-lower-case? . wy50b8) (char-general-category . wy50b7) (char-upcase . wy50b6) (char-titlecase . wy50b5) (char-foldcase . wy50b4) (char-downcase . wy50b3) (char-ci>? . wy50b2) (char-ci>=? . wy50b1) (char-ci=? . wy50b0) (char-ci<? . wy50af) (char-ci<=? . wy50ae) (char-alphabetic? . wy50ad)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d8 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . wy4ff0) (raise-continuable . wy4fef) (raise . wy4fee) (guard . wy4e42) (else . wy4e3a) (=> . wy4e39)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51d9 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . wy4f22) (bitwise-reverse-bit-field . wy4f21) (bitwise-length . wy4f20) (bitwise-if . wy4f1f) (bitwise-first-bit-set . wy4f1e) (bitwise-copy-bit-field . wy4f1d) (bitwise-copy-bit . wy4f1c) (bitwise-bit-set? . wy4f1b) (bitwise-bit-field . wy4f1a) (bitwise-bit-count . wy4f19) (bitwise-xor . wy4f18) (bitwise-ior . wy4f17) (bitwise-and . wy4f16) (bitwise-not . wy4f15) (bitwise-arithmetic-shift-right . wy4f14) (bitwise-arithmetic-shift-left . wy4f13) (bitwise-arithmetic-shift . wy4f12)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51da '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . wy4f4f) (fxxor . wy4f4e) (fxrotate-bit-field . wy4f4d) (fxreverse-bit-field . wy4f4c) (fxpositive? . wy4f4b) (fxodd? . wy4f4a) (fxnot . wy4f49) (fxnegative? . wy4f48) (fxmod0 . wy4f47) (fxmod . wy4f46) (fxmin . wy4f45) (fxmax . wy4f44) (fxlength . wy4f43) (fxior . wy4f42) (fxif . wy4f41) (fxfirst-bit-set . wy4f40) (fxeven? . wy4f3f) (fxdiv0-and-mod0 . wy4f3e) (fxdiv0 . wy4f3d) (fxdiv-and-mod . wy4f3c) (fxdiv . wy4f3b) (fxcopy-bit-field . wy4f3a) (fxcopy-bit . wy4f39) (fxbit-set? . wy4f38) (fxbit-field . wy4f37) (fxbit-count . wy4f36) (fxarithmetic-shift-right . wy4f35) (fxarithmetic-shift-left . wy4f34) (fxarithmetic-shift . wy4f33) (fxand . wy4f32) (fx>? . wy4f31) (fx>=? . wy4f30) (fx=? . wy4f2f) (fx<? . wy4f2e) (fx<=? . wy4f2d) (fx-/carry . wy4f2c) (fx- . wy4f2b) (fx+/carry . wy4f2a) (fx+ . wy4f29) (fx*/carry . wy4f28) (fx* . wy4f27) (greatest-fixnum . wy4f26) (least-fixnum . wy4f25) (fixnum-width . wy4f24) (fixnum? . wy4f23)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51db '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . wy4f81) (no-infinities-violation? . wy4f80) (make-no-nans-violation . wy4f7f) (make-no-infinities-violation . wy4f7e) (real->flonum . wy4f7d) (flzero? . wy4f7c) (fltruncate . wy4f7b) (fltan . wy4f7a) (flsqrt . wy4f79) (flsin . wy4f78) (flround . wy4f77) (flpositive? . wy4f76) (flonum? . wy4f75) (flodd? . wy4f74) (flnumerator . wy4f73) (flnegative? . wy4f72) (flnan? . wy4f71) (flmod0 . wy4f70) (flmod . wy4f6f) (flmin . wy4f6e) (flmax . wy4f6d) (fllog . wy4f6c) (flinteger? . wy4f6b) (flinfinite? . wy4f6a) (flfloor . wy4f69) (flfinite? . wy4f68) (flexpt . wy4f67) (flexp . wy4f66) (fleven? . wy4f65) (fldiv0-and-mod0 . wy4f64) (fldiv0 . wy4f63) (fldiv-and-mod . wy4f62) (fldiv . wy4f61) (fldenominator . wy4f60) (flcos . wy4f5f) (flceiling . wy4f5e) (flatan . wy4f5d) (flasin . wy4f5c) (flacos . wy4f5b) (flabs . wy4f5a) (fl>? . wy4f59) (fl>=? . wy4f58) (fl=? . wy4f57) (fl<? . wy4f56) (fl<=? . wy4f55) (fl/ . wy4f54) (fl- . wy4f53) (fl+ . wy4f52) (fl* . wy4f51) (fixnum->flonum . wy4f50) (&no-nans . wy4e6e) (&no-infinities . wy4e6d)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51dc '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . wy5096) (string-ci-hash . wy5095) (string-hash . wy5094) (equal-hash . wy5093) (hashtable-equivalence-function . wy5092) (make-hashtable . wy5091) (hashtable-hash-function . wy5090) (make-eqv-hashtable . wy508f) (make-eq-hashtable . wy508e) (hashtable? . wy508d) (hashtable-update! . wy508c) (hashtable-size . wy508b) (hashtable-set! . wy508a) (hashtable-ref . wy5089) (hashtable-mutable? . wy5088) (hashtable-keys . wy5087) (hashtable-entries . wy5086) (hashtable-delete! . wy5085) (hashtable-copy . wy5084) (hashtable-contains? . wy5083) (hashtable-clear! . wy5082)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51dd '(rnrs io ports) '(6) '() '() '() '((eof-object? . wy5072) (eof-object . wy5071) (current-error-port . wy5070) (current-output-port . wy506f) (current-input-port . wy506e) (output-port? . wy506d) (input-port? . wy506c) (utf-8-codec . wy506b) (utf-16-codec . wy506a) (transcoder-error-handling-mode . wy5069) (transcoder-eol-style . wy5068) (transcoder-codec . wy5067) (transcoded-port . wy5066) (textual-port? . wy5065) (string->bytevector . wy5064) (standard-output-port . wy5063) (standard-input-port . wy5062) (standard-error-port . wy5061) (set-port-position! . wy5060) (put-u8 . wy505f) (put-string . wy505e) (put-datum . wy505d) (put-char . wy505c) (put-bytevector . wy505b) (port? . wy505a) (port-transcoder . wy5059) (port-position . wy5058) (port-has-set-port-position!? . wy5057) (port-has-port-position? . wy5056) (port-eof? . wy5055) (output-port-buffer-mode . wy5054) (open-string-output-port . wy5053) (open-string-input-port . wy5052) (open-file-output-port . wy5051) (open-file-input/output-port . wy5050) (open-file-input-port . wy504f) (open-bytevector-output-port . wy504e) (open-bytevector-input-port . wy504d) (native-transcoder . wy504c) (native-eol-style . wy504b) (make-transcoder . wy504a) (latin-1-codec . wy5049) (make-i/o-write-error . wy5048) (make-i/o-read-error . wy5047) (make-i/o-port-error . wy5046) (make-i/o-invalid-position-error . wy5045) (make-i/o-filename-error . wy5044) (make-i/o-file-protection-error . wy5043) (make-i/o-file-is-read-only-error . wy5042) (make-i/o-file-does-not-exist-error . wy5041) (make-i/o-file-already-exists-error . wy5040) (make-i/o-error . wy503f) (make-i/o-encoding-error . wy503e) (make-i/o-decoding-error . wy503d) (make-custom-textual-output-port . wy503c) (make-custom-textual-input/output-port . wy503b) (make-custom-textual-input-port . wy503a) (make-custom-binary-output-port . wy5039) (make-custom-binary-input/output-port . wy5038) (make-custom-binary-input-port . wy5037) (lookahead-u8 . wy5035) (lookahead-char . wy5034) (i/o-write-error? . wy5033) (i/o-read-error? . wy5032) (i/o-port-error? . wy5031) (i/o-invalid-position-error? . wy5030) (i/o-filename-error? . wy502f) (i/o-file-protection-error? . wy502e) (i/o-file-is-read-only-error? . wy502d) (i/o-file-does-not-exist-error? . wy502c) (i/o-file-already-exists-error? . wy502b) (i/o-error? . wy502a) (i/o-error-position . wy5029) (i/o-error-port . wy5028) (i/o-error-filename . wy5027) (i/o-encoding-error? . wy5026) (i/o-encoding-error-char . wy5025) (i/o-decoding-error? . wy5024) (get-u8 . wy5023) (get-string-n! . wy5022) (get-string-n . wy5021) (get-string-all . wy5020) (get-line . wy501f) (get-datum . wy501e) (get-char . wy501d) (get-bytevector-some . wy501c) (get-bytevector-n! . wy501b) (get-bytevector-n . wy501a) (get-bytevector-all . wy5019) (flush-output-port . wy5018) (close-port . wy5017) (call-with-string-output-port . wy4ff6) (call-with-port . wy4ff5) (call-with-bytevector-output-port . wy4ff4) (bytevector->string . wy4ff3) (buffer-mode? . wy4ff2) (binary-port? . wy4ff1) (&i/o-encoding . wy4e6c) (&i/o-decoding . wy4e6b) (&i/o-port . wy4e6a) (&i/o-file-does-not-exist . wy4e69) (&i/o-file-already-exists . wy4e68) (&i/o-file-is-read-only . wy4e67) (&i/o-file-protection . wy4e66) (&i/o-filename . wy4e65) (&i/o-invalid-position . wy4e64) (&i/o-write . wy4e63) (&i/o-read . wy4e62) (&i/o . wy4e61) (error-handling-mode . wy4e46) (file-options . wy4e45) (buffer-mode . wy4e44) (eol-style . wy4e43)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51de '(rnrs enums) '(6) '() '() '() '((make-enumeration . wy4fed) (enum-set=? . wy4fec) (enum-set-universe . wy4feb) (enum-set-union . wy4fea) (enum-set-subset? . wy4fe9) (enum-set-projection . wy4fe8) (enum-set-member? . wy4fe7) (enum-set-intersection . wy4fe6) (enum-set-indexer . wy4fe5) (enum-set-difference . wy4fe4) (enum-set-constructor . wy4fe3) (enum-set-complement . wy4fe2) (enum-set->list . wy4fe1) (define-enumeration . wy4e51)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51df '(rnrs conditions) '(6) '() '() '() '((who-condition? . wy4fe0) (warning? . wy4fdf) (violation? . wy4fde) (undefined-violation? . wy4fdd) (syntax-violation? . wy4fdc) (syntax-violation-subform . wy4fdb) (syntax-violation-form . wy4fda) (syntax-violation . wy31e8) (simple-conditions . wy4fd9) (serious-condition? . wy4fd8) (non-continuable-violation? . wy4fd7) (message-condition? . wy4fd6) (make-who-condition . wy4fd5) (make-warning . wy4fd4) (make-violation . wy4fd3) (make-undefined-violation . wy4fd2) (make-syntax-violation . wy4fd1) (make-serious-condition . wy4fd0) (make-non-continuable-violation . wy4fcf) (make-message-condition . wy4fce) (make-lexical-violation . wy4fcd) (make-irritants-condition . wy4fcc) (make-implementation-restriction-violation . wy4fcb) (make-error . wy4fca) (make-assertion-violation . wy4fc9) (lexical-violation? . wy4fc8) (irritants-condition? . wy4fc7) (implementation-restriction-violation? . wy4fc6) (error? . wy4fc5) (condition-who . wy4fc4) (condition-predicate . wy4fc3) (condition-message . wy4fc2) (condition-irritants . wy4fc1) (condition-accessor . wy4fc0) (condition . wy4fbf) (assertion-violation? . wy4fbe) (condition? . wy4fbd) (&undefined . wy4e60) (&syntax . wy4e5f) (&lexical . wy4e5e) (&implementation-restriction . wy4e5d) (&non-continuable . wy4e5c) (&who . wy4e5b) (&irritants . wy4e5a) (&assertion . wy4e59) (&violation . wy4e58) (&error . wy4e57) (&serious . wy4e56) (&warning . wy4e55) (&message . wy4e54) (&condition . wy4e53) (define-condition-type . wy4e52)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51e0 '(rnrs records inspection) '(6) '() '() '() '((record? . wy50a5) (record-type-uid . wy50a4) (record-type-sealed? . wy50a3) (record-type-parent . wy50a2) (record-type-opaque? . wy50a1) (record-type-name . wy50a0) (record-type-generative? . wy509f) (record-type-field-names . wy509e) (record-rtd . wy509d) (record-field-mutable? . wy509c)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51e1 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . wy50ac) (record-predicate . wy50ab) (record-mutator . wy50aa) (record-constructor . wy50a9) (record-accessor . wy50a8) (make-record-type-descriptor . wy50a7) (make-record-constructor-descriptor . wy50a6)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51e2 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . wy4e50) (parent-rtd . wy4e4f) (nongenerative . wy4e4e) (opaque . wy4e4d) (sealed . wy4e4c) (protocol . wy4e4b) (parent . wy4e4a) (immutable . wy4e49) (mutable . wy4e48) (fields . wy4e47) (record-constructor-descriptor . wy4e27) (record-type-descriptor . wy4e26)) '() values values '#f '#f '#t '#f) (wy2d1c@wy2b68@install-library 'wy51e3 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . wy51c3) (&no-nans-rtd . wy51c2) (&no-infinities-rcd . wy51c1) (&no-infinities-rtd . wy51c0) (&i/o-encoding-rcd . wy51bf) (&i/o-encoding-rtd . wy51be) (&i/o-decoding-rcd . wy51bd) (&i/o-decoding-rtd . wy51bc) (&i/o-port-rcd . wy51bb) (&i/o-port-rtd . wy51ba) (&i/o-file-does-not-exist-rcd . wy51b9) (&i/o-file-does-not-exist-rtd . wy51b8) (&i/o-file-already-exists-rcd . wy51b7) (&i/o-file-already-exists-rtd . wy51b6) (&i/o-file-is-read-only-rcd . wy51b5) (&i/o-file-is-read-only-rtd . wy51b4) (&i/o-file-protection-rcd . wy51b3) (&i/o-file-protection-rtd . wy51b2) (&i/o-filename-rcd . wy51b1) (&i/o-filename-rtd . wy51b0) (&i/o-invalid-position-rcd . wy51af) (&i/o-invalid-position-rtd . wy51ae) (&i/o-write-rcd . wy51ad) (&i/o-write-rtd . wy51ac) (&i/o-read-rcd . wy51ab) (&i/o-read-rtd . wy51aa) (&i/o-rcd . wy51a9) (&i/o-rtd . wy51a8) (&undefined-rcd . wy51a7) (&undefined-rtd . wy51a6) (&syntax-rcd . wy51a5) (&syntax-rtd . wy51a4) (&lexical-rcd . wy51a3) (&lexical-rtd . wy51a2) (&implementation-restriction-rcd . wy51a1) (&implementation-restriction-rtd . wy51a0) (&non-continuable-rcd . wy519f) (&non-continuable-rtd . wy519e) (&who-rcd . wy519d) (&who-rtd . wy519c) (&irritants-rcd . wy519b) (&irritants-rtd . wy519a) (&assertion-rcd . wy5199) (&assertion-rtd . wy5198) (&violation-rcd . wy5197) (&violation-rtd . wy5196) (&error-rcd . wy5195) (&error-rtd . wy5194) (&serious-rcd . wy5193) (&serious-rtd . wy5192) (&warning-rcd . wy5191) (&warning-rtd . wy5190) (&message-rcd . wy518f) (&message-rtd . wy518e) (&condition-rcd . wy518d) (&condition-rtd . wy518c) (syntax-error . wy31e4) (syntax-dispatch . wy3108) (pretty-print . wy518b) (eval-core . wy518a) (set-symbol-value! . wy5189) (symbol-value . wy5188) (gensym . wy5187) (void . wy5186) (load . wy4ca7) (interaction-environment . wy31f6) (char-ready? . wy5185) (regexp? . wy5184) (read-line . wy5183) (gensym-prefix-set! . wy5182) (ungensym . wy5181) (alist->eq-hash-table . wy5180) (assoc-ref . wy517f) (print . wy517e) (format . wy517d) (host-os . wy517c) (library-path . wy2b47) (standard-library-path . wy517b) (ssl-supported? . wy517a) (ssl-socket? . wy5179) (socket-sslize! . wy5178) (%monapi-stream-read . wy5177) (%monapi-stream-write . wy5176) (%monapi-stream-handle . wy5175) (%monapi-make-stream . wy5174) (%monapi-name-add! . wy5173) (%monapi-message-receive . wy5172) (%monapi-name-whereis . wy5171) (%monapi-message-reply . wy5170) (%monapi-message-send-receive . wy516f) (%monapi-message-send . wy516e) (process-terminate! . wy516d) (process-list . wy516c) (file-newer? . wy516b) (stat-mtime . wy516a) (write-to-file . wy5169) (file->list . wy5168) (file->string . wy5167) (digit->integer . wy5166) (call-with-string-input-port . wy5165) (call-with-string-io . wy5164) (string-split . wy5163) (bytevector-for-each . wy5162) (string->regexp . wy5161) (rxmatch . wy5160) (regexp-replace-all . wy515f) (hashtable-fold-left . wy515e) (hashtable-for-each . wy515d) (mosh-cache-dir . wy2931) (%start-process . wy515c) (%call-process . wy515b) (local-tz-offset . wy515a) (microseconds . wy5159) (directory-list . wy5158) (set-current-directory! . wy5157) (expand-path . wy5156) (current-directory . wy5155) (%getpid . wy5154) (%spawn . wy5153) (%waitpid . wy5152) (simple-struct-name . wy5151) (simple-struct-set! . wy5150) (simple-struct-ref . wy514f) (make-simple-struct . wy514e) (simple-struct? . wy514d) (pointer-ref-c-int64 . wy514c) (pointer-ref-c-int32 . wy514b) (pointer-ref-c-int16 . wy514a) (pointer-ref-c-int8 . wy5149) (pointer-ref-c-uint64 . wy5148) (pointer-ref-c-uint32 . wy5147) (pointer-ref-c-uint16 . wy5146) (pointer-ref-c-uint8 . wy5145) (pointer-set-c-uint64! . wy5144) (pointer-set-c-uint32! . wy5143) (pointer-set-c-uint16! . wy5142) (pointer-set-c-uint8! . wy5141) (pointer-set-c-int64! . wy5140) (pointer-set-c-int32! . wy513f) (pointer-set-c-int16! . wy513e) (pointer-set-c-int8! . wy513d) (pointer-set-c-pointer! . wy513c) (pointer-set-c-double! . wy513b) (pointer-set-c-float! . wy513a) (pointer-set-c-long-long! . wy5139) (pointer-set-c-long! . wy5138) (pointer-set-c-int! . wy5137) (pointer-set-c-short! . wy5136) (pointer-set-c-char! . wy5135) (pointer-ref-c-pointer . wy5134) (pointer-ref-c-double . wy5133) (pointer-ref-c-float . wy5132) (pointer-ref-c-unsigned-long-long . wy5131) (pointer-ref-c-signed-long-long . wy5130) (pointer-ref-c-unsigned-long . wy512f) (pointer-ref-c-signed-long . wy512e) (pointer-ref-c-unsigned-int . wy512d) (pointer-ref-c-signed-int . wy512c) (pointer-ref-c-unsigned-short . wy512b) (pointer-ref-c-signed-short . wy512a) (pointer-ref-c-unsigned-char . wy5129) (pointer-ref-c-signed-char . wy5128) (pointer->integer . wy5127) (integer->pointer . wy5126) (pointer? . wy5125) (shared-errno . wy5124) (%ffi-free-c-callback-trampoline . wy5123) (%ffi-make-c-callback-trampoline . wy5122) (%ffi-free . wy5121) (%ffi-malloc . wy5120) (%ffi-supported? . wy511f) (%ffi-pointer->string . wy511e) (%ffi-call . wy511d) (%ffi-lookup . wy511c) (%ffi-open . wy511b) (null-terminated-utf8->string . wy511a) (null-terminated-bytevector->string . wy5119) (%exec . wy5118) (%fork . wy5117) (%pipe . wy5116) (p . wy5115) (open-output-string . wy5114) (get-output-string . wy5113) (file-stat-ctime . wy5112) (file-stat-atime . wy5111) (file-stat-mtime . wy5110) (file-size-in-bytes . wy510f) (file-writable? . wy510e) (file-executable? . wy510d) (file-readable? . wy510c) (file-regular? . wy510b) (file-symbolic-link? . wy510a) (file-directory? . wy5109) (create-symbolic-link . wy5108) (rename-file . wy5107) (delete-directory . wy5106) (create-directory . wy5105) (create-mosh-cache-dir . wy5104) (get-environment-variables . wy5103) (current-exception-handler . wy5102) (get-environment-variable . wy5101) (join-wraps . wy5100) (id->real-label . wy50ff) (same-marks? . wy50fe) (same-marks*? . wy50fd) (get-timeofday . wy50fc) (get-command-line . wy50fb) (sys-display . wy50fa) (whereis . wy50f9) (register . wy50f8) (vm-join! . wy50f7) (vm-set-value! . wy50f6) (vm? . wy50f5) (main-vm? . wy50f4) (vm-eval . wy50f3) (vm-self . wy50f2) (vm-start! . wy50f1) (make-vm . wy50f0) (mutex-try-lock! . wy50ef) (mutex-unlock! . wy50ee) (mutex-lock! . wy50ed) (mutex? . wy50ec) (make-mutex . wy50eb) (condition-variable-notify-all! . wy50ea) (condition-variable-notify! . wy50e9) (condition-variable-wait! . wy50e8) (make-condition-variable . wy50e7) (write/ss . wy50e6) (mosh-executable-path . wy50e5) (make-file-options . wy50e4) (source-info . wy50e3) (make-compiler-instruction . wy50e2) (make-instruction . wy50e1) (set-annotation! . wy50e0) (get-annotation . wy50df) (annotated-pair? . wy50de) (annotated-cons . wy50dd) (set-source-info! . wy50dc) (bignum? . wy50db) (fast-equal? . wy50da) (fasl-read . wy50d9) (fasl-write . wy50d8) (time-usage . wy50d7) (os-constant . wy50d6) (condition-printer . wy50d5) (disasm . wy50d4) (make-parameter . wy292f) (socket-port . wy50d3) (socket-shutdown . wy50d2) (socket-close . wy50d1) (socket-send . wy50d0) (socket-recv! . wy50cf) (socket-recv . wy50ce) (make-server-socket . wy50cd) (make-client-socket . wy50cc) (socket-accept . wy50cb) (socket? . wy50ca) (string-upcase . wy50c9) (string-titlecase . wy50c8) (string-normalize-nfkd . wy50c7) (string-normalize-nfkc . wy50c6) (string-normalize-nfd . wy50c5) (string-normalize-nfc . wy50c4) (string-foldcase . wy50c3) (string-downcase . wy50c2) (string-ci>? . wy50c1) (string-ci>=? . wy50c0) (string-ci=? . wy50bf) (string-ci<? . wy50be) (string-ci<=? . wy50bd) (char-whitespace? . wy50bc) (char-upper-case? . wy50bb) (char-title-case? . wy50ba) (char-numeric? . wy50b9) (char-lower-case? . wy50b8) (char-general-category . wy50b7) (char-upcase . wy50b6) (char-titlecase . wy50b5) (char-foldcase . wy50b4) (char-downcase . wy50b3) (char-ci>? . wy50b2) (char-ci>=? . wy50b1) (char-ci=? . wy50b0) (char-ci<? . wy50af) (char-ci<=? . wy50ae) (char-alphabetic? . wy50ad) (make-variable-transformer . wy2f33) (identifier? . wy31ea) (generate-temporaries . wy31d6) (free-identifier=? . wy31d8) (syntax->datum . wy31ee) (datum->syntax . wy31ec) (bound-identifier=? . wy31da) (record-type-descriptor? . wy50ac) (record-predicate . wy50ab) (record-mutator . wy50aa) (record-constructor . wy50a9) (record-accessor . wy50a8) (make-record-type-descriptor . wy50a7) (make-record-constructor-descriptor . wy50a6) (record? . wy50a5) (record-type-uid . wy50a4) (record-type-sealed? . wy50a3) (record-type-parent . wy50a2) (record-type-opaque? . wy50a1) (record-type-name . wy50a0) (record-type-generative? . wy509f) (record-type-field-names . wy509e) (record-rtd . wy509d) (record-field-mutable? . wy509c) (delete-file . wy509b) (file-exists? . wy509a) (vector-sort! . wy5099) (vector-sort . wy5098) (list-sort . wy5097) (symbol-hash . wy5096) (string-ci-hash . wy5095) (string-hash . wy5094) (equal-hash . wy5093) (hashtable-equivalence-function . wy5092) (make-hashtable . wy5091) (hashtable-hash-function . wy5090) (make-eqv-hashtable . wy508f) (make-eq-hashtable . wy508e) (hashtable? . wy508d) (hashtable-update! . wy508c) (hashtable-size . wy508b) (hashtable-set! . wy508a) (hashtable-ref . wy5089) (hashtable-mutable? . wy5088) (hashtable-keys . wy5087) (hashtable-entries . wy5086) (hashtable-delete! . wy5085) (hashtable-copy . wy5084) (hashtable-contains? . wy5083) (hashtable-clear! . wy5082) (call-with-output-file . wy5081) (call-with-input-file . wy5080) (write-char . wy507f) (write . wy507e) (with-output-to-file . wy507d) (with-input-from-file . wy507c) (read-char . wy507b) (read . wy507a) (peek-char . wy5079) (open-output-file . wy5078) (open-input-file . wy5077) (newline . wy5076) (display . wy5075) (close-output-port . wy5074) (close-input-port . wy5073) (eof-object? . wy5072) (eof-object . wy5071) (current-error-port . wy5070) (current-output-port . wy506f) (current-input-port . wy506e) (output-port? . wy506d) (input-port? . wy506c) (utf-8-codec . wy506b) (utf-16-codec . wy506a) (transcoder-error-handling-mode . wy5069) (transcoder-eol-style . wy5068) (transcoder-codec . wy5067) (transcoded-port . wy5066) (textual-port? . wy5065) (string->bytevector . wy5064) (standard-output-port . wy5063) (standard-input-port . wy5062) (standard-error-port . wy5061) (set-port-position! . wy5060) (put-u8 . wy505f) (put-string . wy505e) (put-datum . wy505d) (put-char . wy505c) (put-bytevector . wy505b) (port? . wy505a) (port-transcoder . wy5059) (port-position . wy5058) (port-has-set-port-position!? . wy5057) (port-has-port-position? . wy5056) (port-eof? . wy5055) (output-port-buffer-mode . wy5054) (open-string-output-port . wy5053) (open-string-input-port . wy5052) (open-file-output-port . wy5051) (open-file-input/output-port . wy5050) (open-file-input-port . wy504f) (open-bytevector-output-port . wy504e) (open-bytevector-input-port . wy504d) (native-transcoder . wy504c) (native-eol-style . wy504b) (make-transcoder . wy504a) (latin-1-codec . wy5049) (make-i/o-write-error . wy5048) (make-i/o-read-error . wy5047) (make-i/o-port-error . wy5046) (make-i/o-invalid-position-error . wy5045) (make-i/o-filename-error . wy5044) (make-i/o-file-protection-error . wy5043) (make-i/o-file-is-read-only-error . wy5042) (make-i/o-file-does-not-exist-error . wy5041) (make-i/o-file-already-exists-error . wy5040) (make-i/o-error . wy503f) (make-i/o-encoding-error . wy503e) (make-i/o-decoding-error . wy503d) (make-custom-textual-output-port . wy503c) (make-custom-textual-input/output-port . wy503b) (make-custom-textual-input-port . wy503a) (make-custom-binary-output-port . wy5039) (make-custom-binary-input/output-port . wy5038) (make-custom-binary-input-port . wy5037) (make-bytevector . wy5036) (lookahead-u8 . wy5035) (lookahead-char . wy5034) (i/o-write-error? . wy5033) (i/o-read-error? . wy5032) (i/o-port-error? . wy5031) (i/o-invalid-position-error? . wy5030) (i/o-filename-error? . wy502f) (i/o-file-protection-error? . wy502e) (i/o-file-is-read-only-error? . wy502d) (i/o-file-does-not-exist-error? . wy502c) (i/o-file-already-exists-error? . wy502b) (i/o-error? . wy502a) (i/o-error-position . wy5029) (i/o-error-port . wy5028) (i/o-error-filename . wy5027) (i/o-encoding-error? . wy5026) (i/o-encoding-error-char . wy5025) (i/o-decoding-error? . wy5024) (get-u8 . wy5023) (get-string-n! . wy5022) (get-string-n . wy5021) (get-string-all . wy5020) (get-line . wy501f) (get-datum . wy501e) (get-char . wy501d) (get-bytevector-some . wy501c) (get-bytevector-n! . wy501b) (get-bytevector-n . wy501a) (get-bytevector-all . wy5019) (flush-output-port . wy5018) (close-port . wy5017) (scheme-report-environment . wy31c4) (quotient . wy5016) (null-environment . wy31c2) (remainder . wy5015) (modulo . wy5014) (inexact->exact . wy5013) (force . wy5012) (exact->inexact . wy5011) (make-promise . wy5010) (exit . wy500f) (command-line . wy4ca1) (string-fill! . wy500e) (string-set! . wy500d) (set-cdr! . wy500c) (set-car! . wy500b) (remove . wy500a) (remv . wy5009) (remp . wy5008) (remq . wy5007) (partition . wy5006) (memv . wy5005) (memq . wy5004) (memp . wy5003) (member . wy5002) (exists . wy5001) (for-all . wy5000) (fold-right . wy4fff) (fold-left . wy4ffe) (find . wy4ffd) (filter . wy4ffc) (cons* . wy4ffb) (assv . wy4ffa) (assq . wy4ff9) (assp . wy4ff8) (assoc . wy4ff7) (call-with-string-output-port . wy4ff6) (call-with-port . wy4ff5) (call-with-bytevector-output-port . wy4ff4) (bytevector->string . wy4ff3) (buffer-mode? . wy4ff2) (binary-port? . wy4ff1) (with-exception-handler . wy4ff0) (raise-continuable . wy4fef) (raise . wy4fee) (eval . wy31c8) (environment . wy31c0) (make-enumeration . wy4fed) (enum-set=? . wy4fec) (enum-set-universe . wy4feb) (enum-set-union . wy4fea) (enum-set-subset? . wy4fe9) (enum-set-projection . wy4fe8) (enum-set-member? . wy4fe7) (enum-set-intersection . wy4fe6) (enum-set-indexer . wy4fe5) (enum-set-difference . wy4fe4) (enum-set-constructor . wy4fe3) (enum-set-complement . wy4fe2) (enum-set->list . wy4fe1) (who-condition? . wy4fe0) (warning? . wy4fdf) (violation? . wy4fde) (undefined-violation? . wy4fdd) (syntax-violation? . wy4fdc) (syntax-violation-subform . wy4fdb) (syntax-violation-form . wy4fda) (syntax-violation . wy31e8) (simple-conditions . wy4fd9) (serious-condition? . wy4fd8) (non-continuable-violation? . wy4fd7) (message-condition? . wy4fd6) (make-who-condition . wy4fd5) (make-warning . wy4fd4) (make-violation . wy4fd3) (make-undefined-violation . wy4fd2) (make-syntax-violation . wy4fd1) (make-serious-condition . wy4fd0) (make-non-continuable-violation . wy4fcf) (make-message-condition . wy4fce) (make-lexical-violation . wy4fcd) (make-irritants-condition . wy4fcc) (make-implementation-restriction-violation . wy4fcb) (make-error . wy4fca) (make-assertion-violation . wy4fc9) (lexical-violation? . wy4fc8) (irritants-condition? . wy4fc7) (implementation-restriction-violation? . wy4fc6) (error? . wy4fc5) (condition-who . wy4fc4) (condition-predicate . wy4fc3) (condition-message . wy4fc2) (condition-irritants . wy4fc1) (condition-accessor . wy4fc0) (condition . wy4fbf) (assertion-violation? . wy4fbe) (condition? . wy4fbd) (utf32->string . wy4fbc) (utf16->string . wy4fbb) (utf8->string . wy4fba) (uint-list->bytevector . wy4fb9) (u8-list->bytevector . wy4fb8) (string->utf8 . wy4fb7) (string->utf32 . wy4fb6) (string->utf16 . wy4fb5) (sint-list->bytevector . wy4fb4) (native-endianness . wy4fb3) (bytevector? . wy4fb2) (bytevector=? . wy4fb1) (bytevector-uint-set! . wy4fb0) (bytevector-uint-ref . wy4faf) (bytevector-u8-set! . wy4fae) (bytevector-u8-ref . wy4fad) (bytevector-u64-set! . wy4fac) (bytevector-u64-ref . wy4fab) (bytevector-u64-native-set! . wy4faa) (bytevector-u64-native-ref . wy4fa9) (bytevector-u32-set! . wy4fa8) (bytevector-u32-ref . wy4fa7) (bytevector-u32-native-set! . wy4fa6) (bytevector-u32-native-ref . wy4fa5) (bytevector-u16-set! . wy4fa4) (bytevector-u16-ref . wy4fa3) (bytevector-u16-native-set! . wy4fa2) (bytevector-u16-native-ref . wy4fa1) (bytevector-sint-set! . wy4fa0) (bytevector-sint-ref . wy4f9f) (bytevector-s8-set! . wy4f9e) (bytevector-s8-ref . wy4f9d) (bytevector-s64-set! . wy4f9c) (bytevector-s64-ref . wy4f9b) (bytevector-s64-native-set! . wy4f9a) (bytevector-s64-native-ref . wy4f99) (bytevector-s32-set! . wy4f98) (bytevector-s32-ref . wy4f97) (bytevector-s32-native-set! . wy4f96) (bytevector-s32-native-ref . wy4f95) (bytevector-s16-set! . wy4f94) (bytevector-s16-ref . wy4f93) (bytevector-s16-native-set! . wy4f92) (bytevector-s16-native-ref . wy4f91) (bytevector-length . wy4f90) (bytevector-ieee-single-ref . wy4f8f) (bytevector-ieee-single-set! . wy4f8e) (bytevector-ieee-single-native-set! . wy4f8d) (bytevector-ieee-single-native-ref . wy4f8c) (bytevector-ieee-double-set! . wy4f8b) (bytevector-ieee-double-ref . wy4f8a) (bytevector-ieee-double-native-set! . wy4f89) (bytevector-ieee-double-native-ref . wy4f88) (bytevector-fill! . wy4f87) (bytevector-copy! . wy4f86) (bytevector-copy . wy4f85) (bytevector->uint-list . wy4f84) (bytevector->u8-list . wy4f83) (bytevector->sint-list . wy4f82) (no-nans-violation? . wy4f81) (no-infinities-violation? . wy4f80) (make-no-nans-violation . wy4f7f) (make-no-infinities-violation . wy4f7e) (real->flonum . wy4f7d) (flzero? . wy4f7c) (fltruncate . wy4f7b) (fltan . wy4f7a) (flsqrt . wy4f79) (flsin . wy4f78) (flround . wy4f77) (flpositive? . wy4f76) (flonum? . wy4f75) (flodd? . wy4f74) (flnumerator . wy4f73) (flnegative? . wy4f72) (flnan? . wy4f71) (flmod0 . wy4f70) (flmod . wy4f6f) (flmin . wy4f6e) (flmax . wy4f6d) (fllog . wy4f6c) (flinteger? . wy4f6b) (flinfinite? . wy4f6a) (flfloor . wy4f69) (flfinite? . wy4f68) (flexpt . wy4f67) (flexp . wy4f66) (fleven? . wy4f65) (fldiv0-and-mod0 . wy4f64) (fldiv0 . wy4f63) (fldiv-and-mod . wy4f62) (fldiv . wy4f61) (fldenominator . wy4f60) (flcos . wy4f5f) (flceiling . wy4f5e) (flatan . wy4f5d) (flasin . wy4f5c) (flacos . wy4f5b) (flabs . wy4f5a) (fl>? . wy4f59) (fl>=? . wy4f58) (fl=? . wy4f57) (fl<? . wy4f56) (fl<=? . wy4f55) (fl/ . wy4f54) (fl- . wy4f53) (fl+ . wy4f52) (fl* . wy4f51) (fixnum->flonum . wy4f50) (fxzero? . wy4f4f) (fxxor . wy4f4e) (fxrotate-bit-field . wy4f4d) (fxreverse-bit-field . wy4f4c) (fxpositive? . wy4f4b) (fxodd? . wy4f4a) (fxnot . wy4f49) (fxnegative? . wy4f48) (fxmod0 . wy4f47) (fxmod . wy4f46) (fxmin . wy4f45) (fxmax . wy4f44) (fxlength . wy4f43) (fxior . wy4f42) (fxif . wy4f41) (fxfirst-bit-set . wy4f40) (fxeven? . wy4f3f) (fxdiv0-and-mod0 . wy4f3e) (fxdiv0 . wy4f3d) (fxdiv-and-mod . wy4f3c) (fxdiv . wy4f3b) (fxcopy-bit-field . wy4f3a) (fxcopy-bit . wy4f39) (fxbit-set? . wy4f38) (fxbit-field . wy4f37) (fxbit-count . wy4f36) (fxarithmetic-shift-right . wy4f35) (fxarithmetic-shift-left . wy4f34) (fxarithmetic-shift . wy4f33) (fxand . wy4f32) (fx>? . wy4f31) (fx>=? . wy4f30) (fx=? . wy4f2f) (fx<? . wy4f2e) (fx<=? . wy4f2d) (fx-/carry . wy4f2c) (fx- . wy4f2b) (fx+/carry . wy4f2a) (fx+ . wy4f29) (fx*/carry . wy4f28) (fx* . wy4f27) (greatest-fixnum . wy4f26) (least-fixnum . wy4f25) (fixnum-width . wy4f24) (fixnum? . wy4f23) (bitwise-rotate-bit-field . wy4f22) (bitwise-reverse-bit-field . wy4f21) (bitwise-length . wy4f20) (bitwise-if . wy4f1f) (bitwise-first-bit-set . wy4f1e) (bitwise-copy-bit-field . wy4f1d) (bitwise-copy-bit . wy4f1c) (bitwise-bit-set? . wy4f1b) (bitwise-bit-field . wy4f1a) (bitwise-bit-count . wy4f19) (bitwise-xor . wy4f18) (bitwise-ior . wy4f17) (bitwise-and . wy4f16) (bitwise-not . wy4f15) (bitwise-arithmetic-shift-right . wy4f14) (bitwise-arithmetic-shift-left . wy4f13) (bitwise-arithmetic-shift . wy4f12) (zero? . wy4f11) (vector? . wy4f10) (vector-set! . wy4f0f) (vector-ref . wy4f0e) (vector-map . wy4f0d) (vector-length . wy4f0c) (vector-for-each . wy4f0b) (vector-fill! . wy4f0a) (vector->list . wy4f09) (vector . wy4f08) (values . wy4f07) (truncate . wy4f06) (tan . wy4f05) (symbol? . wy4f04) (symbol=? . wy4f03) (symbol->string . wy4f02) (substring . wy4f01) (string? . wy4f00) (string>? . wy4eff) (string>=? . wy4efe) (string=? . wy4efd) (string<? . wy4efc) (string<=? . wy4efb) (string-ref . wy4efa) (string-length . wy4ef9) (string-for-each . wy4ef8) (string-copy . wy4ef7) (string-append . wy4ef6) (string->symbol . wy4ef5) (string->number . wy4ef4) (string->list . wy4ef3) (string . wy4ef2) (sqrt . wy4ef1) (sin . wy4ef0) (round . wy4eef) (reverse . wy4eee) (real? . wy4eed) (real-valued? . wy4eec) (real-part . wy4eeb) (rationalize . wy4eea) (rational? . wy4ee9) (rational-valued? . wy4ee8) (procedure? . wy4ee7) (positive? . wy4ee6) (pair? . wy4ee5) (odd? . wy4ee4) (numerator . wy4ee3) (number? . wy4ee2) (number->string . wy4ee1) (null? . wy4ee0) (not . wy4edf) (negative? . wy4ede) (nan? . wy4edd) (min . wy4edc) (max . wy4edb) (map . wy4eda) (make-vector . wy4ed9) (make-string . wy4ed8) (make-rectangular . wy4ed7) (make-polar . wy4ed6) (magnitude . wy4ed5) (log . wy4ed4) (list? . wy4ed3) (list-tail . wy4ed2) (list-ref . wy4ed1) (list->vector . wy4ed0) (list->string . wy4ecf) (list . wy4ece) (length . wy4ecd) (lcm . wy4ecc) (integer? . wy4ecb) (integer-valued? . wy4eca) (integer->char . wy4ec9) (infinite? . wy4ec8) (inexact? . wy4ec7) (inexact . wy4ec6) (imag-part . wy4ec5) (gcd . wy4ec4) (for-each . wy4ec3) (floor . wy4ec2) (finite? . wy4ec1) (expt . wy4ec0) (exp . wy4ebf) (exact? . wy4ebe) (exact-integer-sqrt . wy4ebd) (exact . wy4ebc) (even? . wy4ebb) (error . wy4eba) (eqv? . wy4eb9) (equal? . wy4eb8) (eq? . wy4eb7) (dynamic-wind . wy4eb6) (div0-and-mod0 . wy4eb5) (mod0 . wy4eb4) (div0 . wy4eb3) (div-and-mod . wy4eb2) (mod . wy4eb1) (div . wy4eb0) (denominator . wy4eaf) (cos . wy4eae) (cons . wy4ead) (complex? . wy4eac) (char? . wy4eab) (char>? . wy4eaa) (char>=? . wy4ea9) (char=? . wy4ea8) (char<? . wy4ea7) (char<=? . wy4ea6) (char->integer . wy4ea5) (ceiling . wy4ea4) (call-with-values . wy4ea3) (call/cc . wy4ea2) (call-with-current-continuation . wy4ea1) (cddddr . wy4ea0) (cdddar . wy4e9f) (cddadr . wy4e9e) (cddaar . wy4e9d) (cdaddr . wy4e9c) (cdadar . wy4e9b) (cdaadr . wy4e9a) (cdaaar . wy4e99) (cadddr . wy4e98) (caddar . wy4e97) (cadadr . wy4e96) (cadaar . wy4e95) (caaddr . wy4e94) (caadar . wy4e93) (caaadr . wy4e92) (caaaar . wy4e91) (cdddr . wy4e90) (cddar . wy4e8f) (cdadr . wy4e8e) (cdaar . wy4e8d) (caddr . wy4e8c) (cadar . wy4e8b) (caadr . wy4e8a) (caaar . wy4e89) (cddr . wy4e88) (cdar . wy4e87) (cadr . wy4e86) (caar . wy4e85) (cdr . wy4e84) (car . wy4e83) (boolean? . wy4e82) (boolean=? . wy4e81) (atan . wy4e80) (assertion-violation . wy4e7f) (assertion-error . wy31e2) (asin . wy4e7e) (apply . wy4e7d) (append . wy4e7c) (angle . wy4e7b) (acos . wy4e7a) (abs . wy4e79) (/ . wy4e78) (* . wy4e77) (- . wy4e76) (+ . wy4e75) (>= . wy4e74) (> . wy4e73) (= . wy4e72) (<= . wy4e71) (< . wy4e70) (library . wy4e6f) (&no-nans . wy4e6e) (&no-infinities . wy4e6d) (&i/o-encoding . wy4e6c) (&i/o-decoding . wy4e6b) (&i/o-port . wy4e6a) (&i/o-file-does-not-exist . wy4e69) (&i/o-file-already-exists . wy4e68) (&i/o-file-is-read-only . wy4e67) (&i/o-file-protection . wy4e66) (&i/o-filename . wy4e65) (&i/o-invalid-position . wy4e64) (&i/o-write . wy4e63) (&i/o-read . wy4e62) (&i/o . wy4e61) (&undefined . wy4e60) (&syntax . wy4e5f) (&lexical . wy4e5e) (&implementation-restriction . wy4e5d) (&non-continuable . wy4e5c) (&who . wy4e5b) (&irritants . wy4e5a) (&assertion . wy4e59) (&violation . wy4e58) (&error . wy4e57) (&serious . wy4e56) (&warning . wy4e55) (&message . wy4e54) (&condition . wy4e53) (define-condition-type . wy4e52) (define-enumeration . wy4e51) (define-record-type . wy4e50) (parent-rtd . wy4e4f) (nongenerative . wy4e4e) (opaque . wy4e4d) (sealed . wy4e4c) (protocol . wy4e4b) (parent . wy4e4a) (immutable . wy4e49) (mutable . wy4e48) (fields . wy4e47) (error-handling-mode . wy4e46) (file-options . wy4e45) (buffer-mode . wy4e44) (eol-style . wy4e43) (guard . wy4e42) (trace-define . wy4e41) (trace-lambda . wy4e40) (unsyntax-splicing . wy4e3f) (unsyntax . wy4e3e) (unquote-splicing . wy4e3d) (unquote . wy4e3c) (_ . wy4e3b) (else . wy4e3a) (=> . wy4e39) (... . wy4e38) (assert . wy4e37) (endianness . wy4e36) (delay . wy4e35) (time . wy4e34) (do . wy4e33) (cond . wy4e32) (let* . wy4e31) (let*-values . wy4e30) (let-values . wy4e2f) (identifier-syntax . wy4e2e) (with-syntax . wy4e2d) (quasisyntax . wy4e2c) (quasiquote . wy4e2b) (syntax-rules . wy4e2a) (include . wy4e29) (define-struct . wy4e28) (record-constructor-descriptor . wy4e27) (record-type-descriptor . wy4e26) (case . wy4e25) (parameterize . wy4e24) (unless . wy4e23) (when . wy4e22) (or . wy4e21) (and . wy4e20) (if . wy4e1f) (let . wy4e1e) (letrec* . wy4e1d) (letrec . wy4e1c) (type-descriptor . wy4e1b) (case-lambda . wy4e1a) (lambda . wy4e19) (syntax . wy4e18) (syntax-case . wy4e17) (quote . wy4e16) (foreign-call . wy4e15) (letrec-syntax . wy4e14) (let-syntax . wy4e13) (set! . wy4e12) (import . wy4e11) (begin . wy4e10) (module . wy4e0f) (define-syntax . wy4e0e) (define . wy4e0d)) '((wy51c3 core-prim . &no-nans-rcd) (wy51c2 core-prim . &no-nans-rtd) (wy51c1 core-prim . &no-infinities-rcd) (wy51c0 core-prim . &no-infinities-rtd) (wy51bf core-prim . &i/o-encoding-rcd) (wy51be core-prim . &i/o-encoding-rtd) (wy51bd core-prim . &i/o-decoding-rcd) (wy51bc core-prim . &i/o-decoding-rtd) (wy51bb core-prim . &i/o-port-rcd) (wy51ba core-prim . &i/o-port-rtd) (wy51b9 core-prim . &i/o-file-does-not-exist-rcd) (wy51b8 core-prim . &i/o-file-does-not-exist-rtd) (wy51b7 core-prim . &i/o-file-already-exists-rcd) (wy51b6 core-prim . &i/o-file-already-exists-rtd) (wy51b5 core-prim . &i/o-file-is-read-only-rcd) (wy51b4 core-prim . &i/o-file-is-read-only-rtd) (wy51b3 core-prim . &i/o-file-protection-rcd) (wy51b2 core-prim . &i/o-file-protection-rtd) (wy51b1 core-prim . &i/o-filename-rcd) (wy51b0 core-prim . &i/o-filename-rtd) (wy51af core-prim . &i/o-invalid-position-rcd) (wy51ae core-prim . &i/o-invalid-position-rtd) (wy51ad core-prim . &i/o-write-rcd) (wy51ac core-prim . &i/o-write-rtd) (wy51ab core-prim . &i/o-read-rcd) (wy51aa core-prim . &i/o-read-rtd) (wy51a9 core-prim . &i/o-rcd) (wy51a8 core-prim . &i/o-rtd) (wy51a7 core-prim . &undefined-rcd) (wy51a6 core-prim . &undefined-rtd) (wy51a5 core-prim . &syntax-rcd) (wy51a4 core-prim . &syntax-rtd) (wy51a3 core-prim . &lexical-rcd) (wy51a2 core-prim . &lexical-rtd) (wy51a1 core-prim . &implementation-restriction-rcd) (wy51a0 core-prim . &implementation-restriction-rtd) (wy519f core-prim . &non-continuable-rcd) (wy519e core-prim . &non-continuable-rtd) (wy519d core-prim . &who-rcd) (wy519c core-prim . &who-rtd) (wy519b core-prim . &irritants-rcd) (wy519a core-prim . &irritants-rtd) (wy5199 core-prim . &assertion-rcd) (wy5198 core-prim . &assertion-rtd) (wy5197 core-prim . &violation-rcd) (wy5196 core-prim . &violation-rtd) (wy5195 core-prim . &error-rcd) (wy5194 core-prim . &error-rtd) (wy5193 core-prim . &serious-rcd) (wy5192 core-prim . &serious-rtd) (wy5191 core-prim . &warning-rcd) (wy5190 core-prim . &warning-rtd) (wy518f core-prim . &message-rcd) (wy518e core-prim . &message-rtd) (wy518d core-prim . &condition-rcd) (wy518c core-prim . &condition-rtd) (wy31e4 core-prim . syntax-error) (wy3108 core-prim . syntax-dispatch) (wy518b core-prim . pretty-print) (wy518a core-prim . eval-core) (wy5189 core-prim . set-symbol-value!) (wy5188 core-prim . symbol-value) (wy5187 core-prim . gensym) (wy5186 core-prim . void) (wy4ca7 core-prim . load) (wy31f6 core-prim . interaction-environment) (wy5185 core-prim . char-ready?) (wy5184 core-prim . regexp?) (wy5183 core-prim . read-line) (wy5182 core-prim . gensym-prefix-set!) (wy5181 core-prim . ungensym) (wy5180 core-prim . alist->eq-hash-table) (wy517f core-prim . assoc-ref) (wy517e core-prim . print) (wy517d core-prim . format) (wy517c core-prim . host-os) (wy2b47 core-prim . library-path) (wy517b core-prim . standard-library-path) (wy517a core-prim . ssl-supported?) (wy5179 core-prim . ssl-socket?) (wy5178 core-prim . socket-sslize!) (wy5177 core-prim . %monapi-stream-read) (wy5176 core-prim . %monapi-stream-write) (wy5175 core-prim . %monapi-stream-handle) (wy5174 core-prim . %monapi-make-stream) (wy5173 core-prim . %monapi-name-add!) (wy5172 core-prim . %monapi-message-receive) (wy5171 core-prim . %monapi-name-whereis) (wy5170 core-prim . %monapi-message-reply) (wy516f core-prim . %monapi-message-send-receive) (wy516e core-prim . %monapi-message-send) (wy516d core-prim . process-terminate!) (wy516c core-prim . process-list) (wy516b core-prim . file-newer?) (wy516a core-prim . stat-mtime) (wy5169 core-prim . write-to-file) (wy5168 core-prim . file->list) (wy5167 core-prim . file->string) (wy5166 core-prim . digit->integer) (wy5165 core-prim . call-with-string-input-port) (wy5164 core-prim . call-with-string-io) (wy5163 core-prim . string-split) (wy5162 core-prim . bytevector-for-each) (wy5161 core-prim . string->regexp) (wy5160 core-prim . rxmatch) (wy515f core-prim . regexp-replace-all) (wy515e core-prim . hashtable-fold-left) (wy515d core-prim . hashtable-for-each) (wy2931 core-prim . mosh-cache-dir) (wy515c core-prim . %start-process) (wy515b core-prim . %call-process) (wy515a core-prim . local-tz-offset) (wy5159 core-prim . microseconds) (wy5158 core-prim . directory-list) (wy5157 core-prim . set-current-directory!) (wy5156 core-prim . expand-path) (wy5155 core-prim . current-directory) (wy5154 core-prim . %getpid) (wy5153 core-prim . %spawn) (wy5152 core-prim . %waitpid) (wy5151 core-prim . simple-struct-name) (wy5150 core-prim . simple-struct-set!) (wy514f core-prim . simple-struct-ref) (wy514e core-prim . make-simple-struct) (wy514d core-prim . simple-struct?) (wy514c core-prim . pointer-ref-c-int64) (wy514b core-prim . pointer-ref-c-int32) (wy514a core-prim . pointer-ref-c-int16) (wy5149 core-prim . pointer-ref-c-int8) (wy5148 core-prim . pointer-ref-c-uint64) (wy5147 core-prim . pointer-ref-c-uint32) (wy5146 core-prim . pointer-ref-c-uint16) (wy5145 core-prim . pointer-ref-c-uint8) (wy5144 core-prim . pointer-set-c-uint64!) (wy5143 core-prim . pointer-set-c-uint32!) (wy5142 core-prim . pointer-set-c-uint16!) (wy5141 core-prim . pointer-set-c-uint8!) (wy5140 core-prim . pointer-set-c-int64!) (wy513f core-prim . pointer-set-c-int32!) (wy513e core-prim . pointer-set-c-int16!) (wy513d core-prim . pointer-set-c-int8!) (wy513c core-prim . pointer-set-c-pointer!) (wy513b core-prim . pointer-set-c-double!) (wy513a core-prim . pointer-set-c-float!) (wy5139 core-prim . pointer-set-c-long-long!) (wy5138 core-prim . pointer-set-c-long!) (wy5137 core-prim . pointer-set-c-int!) (wy5136 core-prim . pointer-set-c-short!) (wy5135 core-prim . pointer-set-c-char!) (wy5134 core-prim . pointer-ref-c-pointer) (wy5133 core-prim . pointer-ref-c-double) (wy5132 core-prim . pointer-ref-c-float) (wy5131 core-prim . pointer-ref-c-unsigned-long-long) (wy5130 core-prim . pointer-ref-c-signed-long-long) (wy512f core-prim . pointer-ref-c-unsigned-long) (wy512e core-prim . pointer-ref-c-signed-long) (wy512d core-prim . pointer-ref-c-unsigned-int) (wy512c core-prim . pointer-ref-c-signed-int) (wy512b core-prim . pointer-ref-c-unsigned-short) (wy512a core-prim . pointer-ref-c-signed-short) (wy5129 core-prim . pointer-ref-c-unsigned-char) (wy5128 core-prim . pointer-ref-c-signed-char) (wy5127 core-prim . pointer->integer) (wy5126 core-prim . integer->pointer) (wy5125 core-prim . pointer?) (wy5124 core-prim . shared-errno) (wy5123 core-prim . %ffi-free-c-callback-trampoline) (wy5122 core-prim . %ffi-make-c-callback-trampoline) (wy5121 core-prim . %ffi-free) (wy5120 core-prim . %ffi-malloc) (wy511f core-prim . %ffi-supported?) (wy511e core-prim . %ffi-pointer->string) (wy511d core-prim . %ffi-call) (wy511c core-prim . %ffi-lookup) (wy511b core-prim . %ffi-open) (wy511a core-prim . null-terminated-utf8->string) (wy5119 core-prim . null-terminated-bytevector->string) (wy5118 core-prim . %exec) (wy5117 core-prim . %fork) (wy5116 core-prim . %pipe) (wy5115 core-prim . p) (wy5114 core-prim . open-output-string) (wy5113 core-prim . get-output-string) (wy5112 core-prim . file-stat-ctime) (wy5111 core-prim . file-stat-atime) (wy5110 core-prim . file-stat-mtime) (wy510f core-prim . file-size-in-bytes) (wy510e core-prim . file-writable?) (wy510d core-prim . file-executable?) (wy510c core-prim . file-readable?) (wy510b core-prim . file-regular?) (wy510a core-prim . file-symbolic-link?) (wy5109 core-prim . file-directory?) (wy5108 core-prim . create-symbolic-link) (wy5107 core-prim . rename-file) (wy5106 core-prim . delete-directory) (wy5105 core-prim . create-directory) (wy5104 core-prim . create-mosh-cache-dir) (wy5103 core-prim . get-environment-variables) (wy5102 core-prim . current-exception-handler) (wy5101 core-prim . get-environment-variable) (wy5100 core-prim . join-wraps) (wy50ff core-prim . id->real-label) (wy50fe core-prim . same-marks?) (wy50fd core-prim . same-marks*?) (wy50fc core-prim . get-timeofday) (wy50fb core-prim . get-command-line) (wy50fa core-prim . sys-display) (wy50f9 core-prim . whereis) (wy50f8 core-prim . register) (wy50f7 core-prim . vm-join!) (wy50f6 core-prim . vm-set-value!) (wy50f5 core-prim . vm?) (wy50f4 core-prim . main-vm?) (wy50f3 core-prim . vm-eval) (wy50f2 core-prim . vm-self) (wy50f1 core-prim . vm-start!) (wy50f0 core-prim . make-vm) (wy50ef core-prim . mutex-try-lock!) (wy50ee core-prim . mutex-unlock!) (wy50ed core-prim . mutex-lock!) (wy50ec core-prim . mutex?) (wy50eb core-prim . make-mutex) (wy50ea core-prim . condition-variable-notify-all!) (wy50e9 core-prim . condition-variable-notify!) (wy50e8 core-prim . condition-variable-wait!) (wy50e7 core-prim . make-condition-variable) (wy50e6 core-prim . write/ss) (wy50e5 core-prim . mosh-executable-path) (wy50e4 core-prim . make-file-options) (wy50e3 core-prim . source-info) (wy50e2 core-prim . make-compiler-instruction) (wy50e1 core-prim . make-instruction) (wy50e0 core-prim . set-annotation!) (wy50df core-prim . get-annotation) (wy50de core-prim . annotated-pair?) (wy50dd core-prim . annotated-cons) (wy50dc core-prim . set-source-info!) (wy50db core-prim . bignum?) (wy50da core-prim . fast-equal?) (wy50d9 core-prim . fasl-read) (wy50d8 core-prim . fasl-write) (wy50d7 core-prim . time-usage) (wy50d6 core-prim . os-constant) (wy50d5 core-prim . condition-printer) (wy50d4 core-prim . disasm) (wy292f core-prim . make-parameter) (wy50d3 core-prim . socket-port) (wy50d2 core-prim . socket-shutdown) (wy50d1 core-prim . socket-close) (wy50d0 core-prim . socket-send) (wy50cf core-prim . socket-recv!) (wy50ce core-prim . socket-recv) (wy50cd core-prim . make-server-socket) (wy50cc core-prim . make-client-socket) (wy50cb core-prim . socket-accept) (wy50ca core-prim . socket?) (wy50c9 core-prim . string-upcase) (wy50c8 core-prim . string-titlecase) (wy50c7 core-prim . string-normalize-nfkd) (wy50c6 core-prim . string-normalize-nfkc) (wy50c5 core-prim . string-normalize-nfd) (wy50c4 core-prim . string-normalize-nfc) (wy50c3 core-prim . string-foldcase) (wy50c2 core-prim . string-downcase) (wy50c1 core-prim . string-ci>?) (wy50c0 core-prim . string-ci>=?) (wy50bf core-prim . string-ci=?) (wy50be core-prim . string-ci<?) (wy50bd core-prim . string-ci<=?) (wy50bc core-prim . char-whitespace?) (wy50bb core-prim . char-upper-case?) (wy50ba core-prim . char-title-case?) (wy50b9 core-prim . char-numeric?) (wy50b8 core-prim . char-lower-case?) (wy50b7 core-prim . char-general-category) (wy50b6 core-prim . char-upcase) (wy50b5 core-prim . char-titlecase) (wy50b4 core-prim . char-foldcase) (wy50b3 core-prim . char-downcase) (wy50b2 core-prim . char-ci>?) (wy50b1 core-prim . char-ci>=?) (wy50b0 core-prim . char-ci=?) (wy50af core-prim . char-ci<?) (wy50ae core-prim . char-ci<=?) (wy50ad core-prim . char-alphabetic?) (wy2f33 core-prim . make-variable-transformer) (wy31ea core-prim . identifier?) (wy31d6 core-prim . generate-temporaries) (wy31d8 core-prim . free-identifier=?) (wy31ee core-prim . syntax->datum) (wy31ec core-prim . datum->syntax) (wy31da core-prim . bound-identifier=?) (wy50ac core-prim . record-type-descriptor?) (wy50ab core-prim . record-predicate) (wy50aa core-prim . record-mutator) (wy50a9 core-prim . record-constructor) (wy50a8 core-prim . record-accessor) (wy50a7 core-prim . make-record-type-descriptor) (wy50a6 core-prim . make-record-constructor-descriptor) (wy50a5 core-prim . record?) (wy50a4 core-prim . record-type-uid) (wy50a3 core-prim . record-type-sealed?) (wy50a2 core-prim . record-type-parent) (wy50a1 core-prim . record-type-opaque?) (wy50a0 core-prim . record-type-name) (wy509f core-prim . record-type-generative?) (wy509e core-prim . record-type-field-names) (wy509d core-prim . record-rtd) (wy509c core-prim . record-field-mutable?) (wy509b core-prim . delete-file) (wy509a core-prim . file-exists?) (wy5099 core-prim . vector-sort!) (wy5098 core-prim . vector-sort) (wy5097 core-prim . list-sort) (wy5096 core-prim . symbol-hash) (wy5095 core-prim . string-ci-hash) (wy5094 core-prim . string-hash) (wy5093 core-prim . equal-hash) (wy5092 core-prim . hashtable-equivalence-function) (wy5091 core-prim . make-hashtable) (wy5090 core-prim . hashtable-hash-function) (wy508f core-prim . make-eqv-hashtable) (wy508e core-prim . make-eq-hashtable) (wy508d core-prim . hashtable?) (wy508c core-prim . hashtable-update!) (wy508b core-prim . hashtable-size) (wy508a core-prim . hashtable-set!) (wy5089 core-prim . hashtable-ref) (wy5088 core-prim . hashtable-mutable?) (wy5087 core-prim . hashtable-keys) (wy5086 core-prim . hashtable-entries) (wy5085 core-prim . hashtable-delete!) (wy5084 core-prim . hashtable-copy) (wy5083 core-prim . hashtable-contains?) (wy5082 core-prim . hashtable-clear!) (wy5081 core-prim . call-with-output-file) (wy5080 core-prim . call-with-input-file) (wy507f core-prim . write-char) (wy507e core-prim . write) (wy507d core-prim . with-output-to-file) (wy507c core-prim . with-input-from-file) (wy507b core-prim . read-char) (wy507a core-prim . read) (wy5079 core-prim . peek-char) (wy5078 core-prim . open-output-file) (wy5077 core-prim . open-input-file) (wy5076 core-prim . newline) (wy5075 core-prim . display) (wy5074 core-prim . close-output-port) (wy5073 core-prim . close-input-port) (wy5072 core-prim . eof-object?) (wy5071 core-prim . eof-object) (wy5070 core-prim . current-error-port) (wy506f core-prim . current-output-port) (wy506e core-prim . current-input-port) (wy506d core-prim . output-port?) (wy506c core-prim . input-port?) (wy506b core-prim . utf-8-codec) (wy506a core-prim . utf-16-codec) (wy5069 core-prim . transcoder-error-handling-mode) (wy5068 core-prim . transcoder-eol-style) (wy5067 core-prim . transcoder-codec) (wy5066 core-prim . transcoded-port) (wy5065 core-prim . textual-port?) (wy5064 core-prim . string->bytevector) (wy5063 core-prim . standard-output-port) (wy5062 core-prim . standard-input-port) (wy5061 core-prim . standard-error-port) (wy5060 core-prim . set-port-position!) (wy505f core-prim . put-u8) (wy505e core-prim . put-string) (wy505d core-prim . put-datum) (wy505c core-prim . put-char) (wy505b core-prim . put-bytevector) (wy505a core-prim . port?) (wy5059 core-prim . port-transcoder) (wy5058 core-prim . port-position) (wy5057 core-prim . port-has-set-port-position!?) (wy5056 core-prim . port-has-port-position?) (wy5055 core-prim . port-eof?) (wy5054 core-prim . output-port-buffer-mode) (wy5053 core-prim . open-string-output-port) (wy5052 core-prim . open-string-input-port) (wy5051 core-prim . open-file-output-port) (wy5050 core-prim . open-file-input/output-port) (wy504f core-prim . open-file-input-port) (wy504e core-prim . open-bytevector-output-port) (wy504d core-prim . open-bytevector-input-port) (wy504c core-prim . native-transcoder) (wy504b core-prim . native-eol-style) (wy504a core-prim . make-transcoder) (wy5049 core-prim . latin-1-codec) (wy5048 core-prim . make-i/o-write-error) (wy5047 core-prim . make-i/o-read-error) (wy5046 core-prim . make-i/o-port-error) (wy5045 core-prim . make-i/o-invalid-position-error) (wy5044 core-prim . make-i/o-filename-error) (wy5043 core-prim . make-i/o-file-protection-error) (wy5042 core-prim . make-i/o-file-is-read-only-error) (wy5041 core-prim . make-i/o-file-does-not-exist-error) (wy5040 core-prim . make-i/o-file-already-exists-error) (wy503f core-prim . make-i/o-error) (wy503e core-prim . make-i/o-encoding-error) (wy503d core-prim . make-i/o-decoding-error) (wy503c core-prim . make-custom-textual-output-port) (wy503b core-prim . make-custom-textual-input/output-port) (wy503a core-prim . make-custom-textual-input-port) (wy5039 core-prim . make-custom-binary-output-port) (wy5038 core-prim . make-custom-binary-input/output-port) (wy5037 core-prim . make-custom-binary-input-port) (wy5036 core-prim . make-bytevector) (wy5035 core-prim . lookahead-u8) (wy5034 core-prim . lookahead-char) (wy5033 core-prim . i/o-write-error?) (wy5032 core-prim . i/o-read-error?) (wy5031 core-prim . i/o-port-error?) (wy5030 core-prim . i/o-invalid-position-error?) (wy502f core-prim . i/o-filename-error?) (wy502e core-prim . i/o-file-protection-error?) (wy502d core-prim . i/o-file-is-read-only-error?) (wy502c core-prim . i/o-file-does-not-exist-error?) (wy502b core-prim . i/o-file-already-exists-error?) (wy502a core-prim . i/o-error?) (wy5029 core-prim . i/o-error-position) (wy5028 core-prim . i/o-error-port) (wy5027 core-prim . i/o-error-filename) (wy5026 core-prim . i/o-encoding-error?) (wy5025 core-prim . i/o-encoding-error-char) (wy5024 core-prim . i/o-decoding-error?) (wy5023 core-prim . get-u8) (wy5022 core-prim . get-string-n!) (wy5021 core-prim . get-string-n) (wy5020 core-prim . get-string-all) (wy501f core-prim . get-line) (wy501e core-prim . get-datum) (wy501d core-prim . get-char) (wy501c core-prim . get-bytevector-some) (wy501b core-prim . get-bytevector-n!) (wy501a core-prim . get-bytevector-n) (wy5019 core-prim . get-bytevector-all) (wy5018 core-prim . flush-output-port) (wy5017 core-prim . close-port) (wy31c4 core-prim . scheme-report-environment) (wy5016 core-prim . quotient) (wy31c2 core-prim . null-environment) (wy5015 core-prim . remainder) (wy5014 core-prim . modulo) (wy5013 core-prim . inexact->exact) (wy5012 core-prim . force) (wy5011 core-prim . exact->inexact) (wy5010 core-prim . make-promise) (wy500f core-prim . exit) (wy4ca1 core-prim . command-line) (wy500e core-prim . string-fill!) (wy500d core-prim . string-set!) (wy500c core-prim . set-cdr!) (wy500b core-prim . set-car!) (wy500a core-prim . remove) (wy5009 core-prim . remv) (wy5008 core-prim . remp) (wy5007 core-prim . remq) (wy5006 core-prim . partition) (wy5005 core-prim . memv) (wy5004 core-prim . memq) (wy5003 core-prim . memp) (wy5002 core-prim . member) (wy5001 core-prim . exists) (wy5000 core-prim . for-all) (wy4fff core-prim . fold-right) (wy4ffe core-prim . fold-left) (wy4ffd core-prim . find) (wy4ffc core-prim . filter) (wy4ffb core-prim . cons*) (wy4ffa core-prim . assv) (wy4ff9 core-prim . assq) (wy4ff8 core-prim . assp) (wy4ff7 core-prim . assoc) (wy4ff6 core-prim . call-with-string-output-port) (wy4ff5 core-prim . call-with-port) (wy4ff4 core-prim . call-with-bytevector-output-port) (wy4ff3 core-prim . bytevector->string) (wy4ff2 core-prim . buffer-mode?) (wy4ff1 core-prim . binary-port?) (wy4ff0 core-prim . with-exception-handler) (wy4fef core-prim . raise-continuable) (wy4fee core-prim . raise) (wy31c8 core-prim . eval) (wy31c0 core-prim . environment) (wy4fed core-prim . make-enumeration) (wy4fec core-prim . enum-set=?) (wy4feb core-prim . enum-set-universe) (wy4fea core-prim . enum-set-union) (wy4fe9 core-prim . enum-set-subset?) (wy4fe8 core-prim . enum-set-projection) (wy4fe7 core-prim . enum-set-member?) (wy4fe6 core-prim . enum-set-intersection) (wy4fe5 core-prim . enum-set-indexer) (wy4fe4 core-prim . enum-set-difference) (wy4fe3 core-prim . enum-set-constructor) (wy4fe2 core-prim . enum-set-complement) (wy4fe1 core-prim . enum-set->list) (wy4fe0 core-prim . who-condition?) (wy4fdf core-prim . warning?) (wy4fde core-prim . violation?) (wy4fdd core-prim . undefined-violation?) (wy4fdc core-prim . syntax-violation?) (wy4fdb core-prim . syntax-violation-subform) (wy4fda core-prim . syntax-violation-form) (wy31e8 core-prim . syntax-violation) (wy4fd9 core-prim . simple-conditions) (wy4fd8 core-prim . serious-condition?) (wy4fd7 core-prim . non-continuable-violation?) (wy4fd6 core-prim . message-condition?) (wy4fd5 core-prim . make-who-condition) (wy4fd4 core-prim . make-warning) (wy4fd3 core-prim . make-violation) (wy4fd2 core-prim . make-undefined-violation) (wy4fd1 core-prim . make-syntax-violation) (wy4fd0 core-prim . make-serious-condition) (wy4fcf core-prim . make-non-continuable-violation) (wy4fce core-prim . make-message-condition) (wy4fcd core-prim . make-lexical-violation) (wy4fcc core-prim . make-irritants-condition) (wy4fcb core-prim . make-implementation-restriction-violation) (wy4fca core-prim . make-error) (wy4fc9 core-prim . make-assertion-violation) (wy4fc8 core-prim . lexical-violation?) (wy4fc7 core-prim . irritants-condition?) (wy4fc6 core-prim . implementation-restriction-violation?) (wy4fc5 core-prim . error?) (wy4fc4 core-prim . condition-who) (wy4fc3 core-prim . condition-predicate) (wy4fc2 core-prim . condition-message) (wy4fc1 core-prim . condition-irritants) (wy4fc0 core-prim . condition-accessor) (wy4fbf core-prim . condition) (wy4fbe core-prim . assertion-violation?) (wy4fbd core-prim . condition?) (wy4fbc core-prim . utf32->string) (wy4fbb core-prim . utf16->string) (wy4fba core-prim . utf8->string) (wy4fb9 core-prim . uint-list->bytevector) (wy4fb8 core-prim . u8-list->bytevector) (wy4fb7 core-prim . string->utf8) (wy4fb6 core-prim . string->utf32) (wy4fb5 core-prim . string->utf16) (wy4fb4 core-prim . sint-list->bytevector) (wy4fb3 core-prim . native-endianness) (wy4fb2 core-prim . bytevector?) (wy4fb1 core-prim . bytevector=?) (wy4fb0 core-prim . bytevector-uint-set!) (wy4faf core-prim . bytevector-uint-ref) (wy4fae core-prim . bytevector-u8-set!) (wy4fad core-prim . bytevector-u8-ref) (wy4fac core-prim . bytevector-u64-set!) (wy4fab core-prim . bytevector-u64-ref) (wy4faa core-prim . bytevector-u64-native-set!) (wy4fa9 core-prim . bytevector-u64-native-ref) (wy4fa8 core-prim . bytevector-u32-set!) (wy4fa7 core-prim . bytevector-u32-ref) (wy4fa6 core-prim . bytevector-u32-native-set!) (wy4fa5 core-prim . bytevector-u32-native-ref) (wy4fa4 core-prim . bytevector-u16-set!) (wy4fa3 core-prim . bytevector-u16-ref) (wy4fa2 core-prim . bytevector-u16-native-set!) (wy4fa1 core-prim . bytevector-u16-native-ref) (wy4fa0 core-prim . bytevector-sint-set!) (wy4f9f core-prim . bytevector-sint-ref) (wy4f9e core-prim . bytevector-s8-set!) (wy4f9d core-prim . bytevector-s8-ref) (wy4f9c core-prim . bytevector-s64-set!) (wy4f9b core-prim . bytevector-s64-ref) (wy4f9a core-prim . bytevector-s64-native-set!) (wy4f99 core-prim . bytevector-s64-native-ref) (wy4f98 core-prim . bytevector-s32-set!) (wy4f97 core-prim . bytevector-s32-ref) (wy4f96 core-prim . bytevector-s32-native-set!) (wy4f95 core-prim . bytevector-s32-native-ref) (wy4f94 core-prim . bytevector-s16-set!) (wy4f93 core-prim . bytevector-s16-ref) (wy4f92 core-prim . bytevector-s16-native-set!) (wy4f91 core-prim . bytevector-s16-native-ref) (wy4f90 core-prim . bytevector-length) (wy4f8f core-prim . bytevector-ieee-single-ref) (wy4f8e core-prim . bytevector-ieee-single-set!) (wy4f8d core-prim . bytevector-ieee-single-native-set!) (wy4f8c core-prim . bytevector-ieee-single-native-ref) (wy4f8b core-prim . bytevector-ieee-double-set!) (wy4f8a core-prim . bytevector-ieee-double-ref) (wy4f89 core-prim . bytevector-ieee-double-native-set!) (wy4f88 core-prim . bytevector-ieee-double-native-ref) (wy4f87 core-prim . bytevector-fill!) (wy4f86 core-prim . bytevector-copy!) (wy4f85 core-prim . bytevector-copy) (wy4f84 core-prim . bytevector->uint-list) (wy4f83 core-prim . bytevector->u8-list) (wy4f82 core-prim . bytevector->sint-list) (wy4f81 core-prim . no-nans-violation?) (wy4f80 core-prim . no-infinities-violation?) (wy4f7f core-prim . make-no-nans-violation) (wy4f7e core-prim . make-no-infinities-violation) (wy4f7d core-prim . real->flonum) (wy4f7c core-prim . flzero?) (wy4f7b core-prim . fltruncate) (wy4f7a core-prim . fltan) (wy4f79 core-prim . flsqrt) (wy4f78 core-prim . flsin) (wy4f77 core-prim . flround) (wy4f76 core-prim . flpositive?) (wy4f75 core-prim . flonum?) (wy4f74 core-prim . flodd?) (wy4f73 core-prim . flnumerator) (wy4f72 core-prim . flnegative?) (wy4f71 core-prim . flnan?) (wy4f70 core-prim . flmod0) (wy4f6f core-prim . flmod) (wy4f6e core-prim . flmin) (wy4f6d core-prim . flmax) (wy4f6c core-prim . fllog) (wy4f6b core-prim . flinteger?) (wy4f6a core-prim . flinfinite?) (wy4f69 core-prim . flfloor) (wy4f68 core-prim . flfinite?) (wy4f67 core-prim . flexpt) (wy4f66 core-prim . flexp) (wy4f65 core-prim . fleven?) (wy4f64 core-prim . fldiv0-and-mod0) (wy4f63 core-prim . fldiv0) (wy4f62 core-prim . fldiv-and-mod) (wy4f61 core-prim . fldiv) (wy4f60 core-prim . fldenominator) (wy4f5f core-prim . flcos) (wy4f5e core-prim . flceiling) (wy4f5d core-prim . flatan) (wy4f5c core-prim . flasin) (wy4f5b core-prim . flacos) (wy4f5a core-prim . flabs) (wy4f59 core-prim . fl>?) (wy4f58 core-prim . fl>=?) (wy4f57 core-prim . fl=?) (wy4f56 core-prim . fl<?) (wy4f55 core-prim . fl<=?) (wy4f54 core-prim . fl/) (wy4f53 core-prim . fl-) (wy4f52 core-prim . fl+) (wy4f51 core-prim . fl*) (wy4f50 core-prim . fixnum->flonum) (wy4f4f core-prim . fxzero?) (wy4f4e core-prim . fxxor) (wy4f4d core-prim . fxrotate-bit-field) (wy4f4c core-prim . fxreverse-bit-field) (wy4f4b core-prim . fxpositive?) (wy4f4a core-prim . fxodd?) (wy4f49 core-prim . fxnot) (wy4f48 core-prim . fxnegative?) (wy4f47 core-prim . fxmod0) (wy4f46 core-prim . fxmod) (wy4f45 core-prim . fxmin) (wy4f44 core-prim . fxmax) (wy4f43 core-prim . fxlength) (wy4f42 core-prim . fxior) (wy4f41 core-prim . fxif) (wy4f40 core-prim . fxfirst-bit-set) (wy4f3f core-prim . fxeven?) (wy4f3e core-prim . fxdiv0-and-mod0) (wy4f3d core-prim . fxdiv0) (wy4f3c core-prim . fxdiv-and-mod) (wy4f3b core-prim . fxdiv) (wy4f3a core-prim . fxcopy-bit-field) (wy4f39 core-prim . fxcopy-bit) (wy4f38 core-prim . fxbit-set?) (wy4f37 core-prim . fxbit-field) (wy4f36 core-prim . fxbit-count) (wy4f35 core-prim . fxarithmetic-shift-right) (wy4f34 core-prim . fxarithmetic-shift-left) (wy4f33 core-prim . fxarithmetic-shift) (wy4f32 core-prim . fxand) (wy4f31 core-prim . fx>?) (wy4f30 core-prim . fx>=?) (wy4f2f core-prim . fx=?) (wy4f2e core-prim . fx<?) (wy4f2d core-prim . fx<=?) (wy4f2c core-prim . fx-/carry) (wy4f2b core-prim . fx-) (wy4f2a core-prim . fx+/carry) (wy4f29 core-prim . fx+) (wy4f28 core-prim . fx*/carry) (wy4f27 core-prim . fx*) (wy4f26 core-prim . greatest-fixnum) (wy4f25 core-prim . least-fixnum) (wy4f24 core-prim . fixnum-width) (wy4f23 core-prim . fixnum?) (wy4f22 core-prim . bitwise-rotate-bit-field) (wy4f21 core-prim . bitwise-reverse-bit-field) (wy4f20 core-prim . bitwise-length) (wy4f1f core-prim . bitwise-if) (wy4f1e core-prim . bitwise-first-bit-set) (wy4f1d core-prim . bitwise-copy-bit-field) (wy4f1c core-prim . bitwise-copy-bit) (wy4f1b core-prim . bitwise-bit-set?) (wy4f1a core-prim . bitwise-bit-field) (wy4f19 core-prim . bitwise-bit-count) (wy4f18 core-prim . bitwise-xor) (wy4f17 core-prim . bitwise-ior) (wy4f16 core-prim . bitwise-and) (wy4f15 core-prim . bitwise-not) (wy4f14 core-prim . bitwise-arithmetic-shift-right) (wy4f13 core-prim . bitwise-arithmetic-shift-left) (wy4f12 core-prim . bitwise-arithmetic-shift) (wy4f11 core-prim . zero?) (wy4f10 core-prim . vector?) (wy4f0f core-prim . vector-set!) (wy4f0e core-prim . vector-ref) (wy4f0d core-prim . vector-map) (wy4f0c core-prim . vector-length) (wy4f0b core-prim . vector-for-each) (wy4f0a core-prim . vector-fill!) (wy4f09 core-prim . vector->list) (wy4f08 core-prim . vector) (wy4f07 core-prim . values) (wy4f06 core-prim . truncate) (wy4f05 core-prim . tan) (wy4f04 core-prim . symbol?) (wy4f03 core-prim . symbol=?) (wy4f02 core-prim . symbol->string) (wy4f01 core-prim . substring) (wy4f00 core-prim . string?) (wy4eff core-prim . string>?) (wy4efe core-prim . string>=?) (wy4efd core-prim . string=?) (wy4efc core-prim . string<?) (wy4efb core-prim . string<=?) (wy4efa core-prim . string-ref) (wy4ef9 core-prim . string-length) (wy4ef8 core-prim . string-for-each) (wy4ef7 core-prim . string-copy) (wy4ef6 core-prim . string-append) (wy4ef5 core-prim . string->symbol) (wy4ef4 core-prim . string->number) (wy4ef3 core-prim . string->list) (wy4ef2 core-prim . string) (wy4ef1 core-prim . sqrt) (wy4ef0 core-prim . sin) (wy4eef core-prim . round) (wy4eee core-prim . reverse) (wy4eed core-prim . real?) (wy4eec core-prim . real-valued?) (wy4eeb core-prim . real-part) (wy4eea core-prim . rationalize) (wy4ee9 core-prim . rational?) (wy4ee8 core-prim . rational-valued?) (wy4ee7 core-prim . procedure?) (wy4ee6 core-prim . positive?) (wy4ee5 core-prim . pair?) (wy4ee4 core-prim . odd?) (wy4ee3 core-prim . numerator) (wy4ee2 core-prim . number?) (wy4ee1 core-prim . number->string) (wy4ee0 core-prim . null?) (wy4edf core-prim . not) (wy4ede core-prim . negative?) (wy4edd core-prim . nan?) (wy4edc core-prim . min) (wy4edb core-prim . max) (wy4eda core-prim . map) (wy4ed9 core-prim . make-vector) (wy4ed8 core-prim . make-string) (wy4ed7 core-prim . make-rectangular) (wy4ed6 core-prim . make-polar) (wy4ed5 core-prim . magnitude) (wy4ed4 core-prim . log) (wy4ed3 core-prim . list?) (wy4ed2 core-prim . list-tail) (wy4ed1 core-prim . list-ref) (wy4ed0 core-prim . list->vector) (wy4ecf core-prim . list->string) (wy4ece core-prim . list) (wy4ecd core-prim . length) (wy4ecc core-prim . lcm) (wy4ecb core-prim . integer?) (wy4eca core-prim . integer-valued?) (wy4ec9 core-prim . integer->char) (wy4ec8 core-prim . infinite?) (wy4ec7 core-prim . inexact?) (wy4ec6 core-prim . inexact) (wy4ec5 core-prim . imag-part) (wy4ec4 core-prim . gcd) (wy4ec3 core-prim . for-each) (wy4ec2 core-prim . floor) (wy4ec1 core-prim . finite?) (wy4ec0 core-prim . expt) (wy4ebf core-prim . exp) (wy4ebe core-prim . exact?) (wy4ebd core-prim . exact-integer-sqrt) (wy4ebc core-prim . exact) (wy4ebb core-prim . even?) (wy4eba core-prim . error) (wy4eb9 core-prim . eqv?) (wy4eb8 core-prim . equal?) (wy4eb7 core-prim . eq?) (wy4eb6 core-prim . dynamic-wind) (wy4eb5 core-prim . div0-and-mod0) (wy4eb4 core-prim . mod0) (wy4eb3 core-prim . div0) (wy4eb2 core-prim . div-and-mod) (wy4eb1 core-prim . mod) (wy4eb0 core-prim . div) (wy4eaf core-prim . denominator) (wy4eae core-prim . cos) (wy4ead core-prim . cons) (wy4eac core-prim . complex?) (wy4eab core-prim . char?) (wy4eaa core-prim . char>?) (wy4ea9 core-prim . char>=?) (wy4ea8 core-prim . char=?) (wy4ea7 core-prim . char<?) (wy4ea6 core-prim . char<=?) (wy4ea5 core-prim . char->integer) (wy4ea4 core-prim . ceiling) (wy4ea3 core-prim . call-with-values) (wy4ea2 core-prim . call/cc) (wy4ea1 core-prim . call-with-current-continuation) (wy4ea0 core-prim . cddddr) (wy4e9f core-prim . cdddar) (wy4e9e core-prim . cddadr) (wy4e9d core-prim . cddaar) (wy4e9c core-prim . cdaddr) (wy4e9b core-prim . cdadar) (wy4e9a core-prim . cdaadr) (wy4e99 core-prim . cdaaar) (wy4e98 core-prim . cadddr) (wy4e97 core-prim . caddar) (wy4e96 core-prim . cadadr) (wy4e95 core-prim . cadaar) (wy4e94 core-prim . caaddr) (wy4e93 core-prim . caadar) (wy4e92 core-prim . caaadr) (wy4e91 core-prim . caaaar) (wy4e90 core-prim . cdddr) (wy4e8f core-prim . cddar) (wy4e8e core-prim . cdadr) (wy4e8d core-prim . cdaar) (wy4e8c core-prim . caddr) (wy4e8b core-prim . cadar) (wy4e8a core-prim . caadr) (wy4e89 core-prim . caaar) (wy4e88 core-prim . cddr) (wy4e87 core-prim . cdar) (wy4e86 core-prim . cadr) (wy4e85 core-prim . caar) (wy4e84 core-prim . cdr) (wy4e83 core-prim . car) (wy4e82 core-prim . boolean?) (wy4e81 core-prim . boolean=?) (wy4e80 core-prim . atan) (wy4e7f core-prim . assertion-violation) (wy31e2 core-prim . assertion-error) (wy4e7e core-prim . asin) (wy4e7d core-prim . apply) (wy4e7c core-prim . append) (wy4e7b core-prim . angle) (wy4e7a core-prim . acos) (wy4e79 core-prim . abs) (wy4e78 core-prim . /) (wy4e77 core-prim . *) (wy4e76 core-prim . -) (wy4e75 core-prim . +) (wy4e74 core-prim . >=) (wy4e73 core-prim . >) (wy4e72 core-prim . =) (wy4e71 core-prim . <=) (wy4e70 core-prim . <) (wy4e6f core-prim . library) (wy4e6e $core-rtd &no-nans-rtd &no-nans-rcd) (wy4e6d $core-rtd &no-infinities-rtd &no-infinities-rcd) (wy4e6c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (wy4e6b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (wy4e6a $core-rtd &i/o-port-rtd &i/o-port-rcd) (wy4e69 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (wy4e68 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (wy4e67 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (wy4e66 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (wy4e65 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (wy4e64 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (wy4e63 $core-rtd &i/o-write-rtd &i/o-write-rcd) (wy4e62 $core-rtd &i/o-read-rtd &i/o-read-rcd) (wy4e61 $core-rtd &i/o-rtd &i/o-rcd) (wy4e60 $core-rtd &undefined-rtd &undefined-rcd) (wy4e5f $core-rtd &syntax-rtd &syntax-rcd) (wy4e5e $core-rtd &lexical-rtd &lexical-rcd) (wy4e5d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (wy4e5c $core-rtd &non-continuable-rtd &non-continuable-rcd) (wy4e5b $core-rtd &who-rtd &who-rcd) (wy4e5a $core-rtd &irritants-rtd &irritants-rcd) (wy4e59 $core-rtd &assertion-rtd &assertion-rcd) (wy4e58 $core-rtd &violation-rtd &violation-rcd) (wy4e57 $core-rtd &error-rtd &error-rcd) (wy4e56 $core-rtd &serious-rtd &serious-rcd) (wy4e55 $core-rtd &warning-rtd &warning-rcd) (wy4e54 $core-rtd &message-rtd &message-rcd) (wy4e53 $core-rtd &condition-rtd &condition-rcd) (wy4e52 macro . define-condition-type) (wy4e51 macro . define-enumeration) (wy4e50 macro . define-record-type) (wy4e4f macro . parent-rtd) (wy4e4e macro . nongenerative) (wy4e4d macro . opaque) (wy4e4c macro . sealed) (wy4e4b macro . protocol) (wy4e4a macro . parent) (wy4e49 macro . immutable) (wy4e48 macro . mutable) (wy4e47 macro . fields) (wy4e46 macro . error-handling-mode) (wy4e45 macro . file-options) (wy4e44 macro . buffer-mode) (wy4e43 macro . eol-style) (wy4e42 macro . guard) (wy4e41 macro . trace-define) (wy4e40 macro . trace-lambda) (wy4e3f macro . unsyntax-splicing) (wy4e3e macro . unsyntax) (wy4e3d macro . unquote-splicing) (wy4e3c macro . unquote) (wy4e3b macro . _) (wy4e3a macro . else) (wy4e39 macro . =>) (wy4e38 macro . ...) (wy4e37 macro . assert) (wy4e36 macro . endianness) (wy4e35 macro . delay) (wy4e34 macro . time) (wy4e33 macro . do) (wy4e32 macro . cond) (wy4e31 macro . let*) (wy4e30 macro . let*-values) (wy4e2f macro . let-values) (wy4e2e macro . identifier-syntax) (wy4e2d macro . with-syntax) (wy4e2c macro . quasisyntax) (wy4e2b macro . quasiquote) (wy4e2a macro . syntax-rules) (wy4e29 macro . include) (wy4e28 macro . define-struct) (wy4e27 core-macro . record-constructor-descriptor) (wy4e26 core-macro . record-type-descriptor) (wy4e25 macro . case) (wy4e24 macro . parameterize) (wy4e23 macro . unless) (wy4e22 macro . when) (wy4e21 core-macro . or) (wy4e20 core-macro . and) (wy4e1f core-macro . if) (wy4e1e core-macro . let) (wy4e1d core-macro . letrec*) (wy4e1c core-macro . letrec) (wy4e1b core-macro . type-descriptor) (wy4e1a core-macro . case-lambda) (wy4e19 core-macro . lambda) (wy4e18 core-macro . syntax) (wy4e17 core-macro . syntax-case) (wy4e16 core-macro . quote) (wy4e15 core-macro . foreign-call) (wy4e14 letrec-syntax) (wy4e13 let-syntax) (wy4e12 set!) (wy4e11 import) (wy4e10 begin) (wy4e0f module) (wy4e0e define-syntax) (wy4e0d define)) values values '#f '#f '#f '#f) (wy2d1c@wy2b68@install-library 'wy51e4 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . wy518b) (eval-core . wy518a) (set-symbol-value! . wy5189) (symbol-value . wy5188) (gensym . wy5187) (void . wy5186)) '() values values '#f '#f '#f '#f) (wy2d1c@wy2b68@install-library 'wy51e5 '(mosh) '() '() '() '() '((set-symbol-value! . wy5189) (symbol-value . wy5188) (regexp? . wy5184) (read-line . wy5183) (ungensym . wy5181) (alist->eq-hash-table . wy5180) (assoc-ref . wy517f) (print . wy517e) (format . wy517d) (host-os . wy517c) (library-path . wy2b47) (standard-library-path . wy517b) (file-newer? . wy516b) (stat-mtime . wy516a) (digit->integer . wy5166) (call-with-string-input-port . wy5165) (call-with-string-io . wy5164) (string-split . wy5163) (bytevector-for-each . wy5162) (string->regexp . wy5161) (rxmatch . wy5160) (regexp-replace-all . wy515f) (hashtable-fold-left . wy515e) (hashtable-for-each . wy515d) (set-current-directory! . wy5157) (expand-path . wy5156) (current-directory . wy5155) (p . wy5115) (get-timeofday . wy50fc) (get-command-line . wy50fb) (sys-display . wy50fa) (whereis . wy50f9) (register . wy50f8) (vm-join! . wy50f7) (vm-set-value! . wy50f6) (vm? . wy50f5) (main-vm? . wy50f4) (vm-eval . wy50f3) (vm-self . wy50f2) (vm-start! . wy50f1) (make-vm . wy50f0) (mutex-try-lock! . wy50ef) (mutex-unlock! . wy50ee) (mutex-lock! . wy50ed) (mutex? . wy50ec) (make-mutex . wy50eb) (condition-variable-notify-all! . wy50ea) (condition-variable-notify! . wy50e9) (condition-variable-wait! . wy50e8) (make-condition-variable . wy50e7) (write/ss . wy50e6) (mosh-executable-path . wy50e5) (make-file-options . wy50e4) (source-info . wy50e3) (make-compiler-instruction . wy50e2) (make-instruction . wy50e1) (set-annotation! . wy50e0) (get-annotation . wy50df) (annotated-pair? . wy50de) (annotated-cons . wy50dd) (set-source-info! . wy50dc) (bignum? . wy50db) (fast-equal? . wy50da) (fasl-read . wy50d9) (fasl-write . wy50d8) (time-usage . wy50d7) (os-constant . wy50d6) (condition-printer . wy50d5) (time . wy4e34) (include . wy4e29)) '() values values '#f '#f '#f '#f) (wy2d1c@wy2b68@install-library 'wy51e6 '(system) '() '() '() '() '((gensym-prefix-set! . wy5182) (ssl-supported? . wy517a) (ssl-socket? . wy5179) (socket-sslize! . wy5178) (%monapi-stream-read . wy5177) (%monapi-stream-write . wy5176) (%monapi-stream-handle . wy5175) (%monapi-make-stream . wy5174) (%monapi-name-add! . wy5173) (%monapi-message-receive . wy5172) (%monapi-name-whereis . wy5171) (%monapi-message-reply . wy5170) (%monapi-message-send-receive . wy516f) (%monapi-message-send . wy516e) (process-terminate! . wy516d) (process-list . wy516c) (write-to-file . wy5169) (file->list . wy5168) (file->string . wy5167) (mosh-cache-dir . wy2931) (%start-process . wy515c) (%call-process . wy515b) (local-tz-offset . wy515a) (microseconds . wy5159) (directory-list . wy5158) (expand-path . wy5156) (%getpid . wy5154) (%spawn . wy5153) (%waitpid . wy5152) (simple-struct-name . wy5151) (simple-struct-set! . wy5150) (simple-struct-ref . wy514f) (make-simple-struct . wy514e) (simple-struct? . wy514d) (pointer-ref-c-int64 . wy514c) (pointer-ref-c-int32 . wy514b) (pointer-ref-c-int16 . wy514a) (pointer-ref-c-int8 . wy5149) (pointer-ref-c-uint64 . wy5148) (pointer-ref-c-uint32 . wy5147) (pointer-ref-c-uint16 . wy5146) (pointer-ref-c-uint8 . wy5145) (pointer-set-c-uint64! . wy5144) (pointer-set-c-uint32! . wy5143) (pointer-set-c-uint16! . wy5142) (pointer-set-c-uint8! . wy5141) (pointer-set-c-int64! . wy5140) (pointer-set-c-int32! . wy513f) (pointer-set-c-int16! . wy513e) (pointer-set-c-int8! . wy513d) (pointer-set-c-pointer! . wy513c) (pointer-set-c-double! . wy513b) (pointer-set-c-float! . wy513a) (pointer-set-c-long-long! . wy5139) (pointer-set-c-long! . wy5138) (pointer-set-c-int! . wy5137) (pointer-set-c-short! . wy5136) (pointer-set-c-char! . wy5135) (pointer-ref-c-pointer . wy5134) (pointer-ref-c-double . wy5133) (pointer-ref-c-float . wy5132) (pointer-ref-c-unsigned-long-long . wy5131) (pointer-ref-c-signed-long-long . wy5130) (pointer-ref-c-unsigned-long . wy512f) (pointer-ref-c-signed-long . wy512e) (pointer-ref-c-unsigned-int . wy512d) (pointer-ref-c-signed-int . wy512c) (pointer-ref-c-unsigned-short . wy512b) (pointer-ref-c-signed-short . wy512a) (pointer-ref-c-unsigned-char . wy5129) (pointer-ref-c-signed-char . wy5128) (pointer->integer . wy5127) (integer->pointer . wy5126) (pointer? . wy5125) (shared-errno . wy5124) (%ffi-free-c-callback-trampoline . wy5123) (%ffi-make-c-callback-trampoline . wy5122) (%ffi-free . wy5121) (%ffi-malloc . wy5120) (%ffi-supported? . wy511f) (%ffi-pointer->string . wy511e) (%ffi-call . wy511d) (%ffi-lookup . wy511c) (%ffi-open . wy511b) (null-terminated-utf8->string . wy511a) (null-terminated-bytevector->string . wy5119) (%exec . wy5118) (%fork . wy5117) (%pipe . wy5116) (open-output-string . wy5114) (get-output-string . wy5113) (file-stat-ctime . wy5112) (file-stat-atime . wy5111) (file-stat-mtime . wy5110) (file-size-in-bytes . wy510f) (file-writable? . wy510e) (file-executable? . wy510d) (file-readable? . wy510c) (file-regular? . wy510b) (file-symbolic-link? . wy510a) (file-directory? . wy5109) (create-symbolic-link . wy5108) (rename-file . wy5107) (delete-directory . wy5106) (create-directory . wy5105) (create-mosh-cache-dir . wy5104) (get-environment-variables . wy5103) (current-exception-handler . wy5102) (get-environment-variable . wy5101) (join-wraps . wy5100) (id->real-label . wy50ff) (same-marks? . wy50fe) (same-marks*? . wy50fd) (disasm . wy50d4) (make-parameter . wy292f) (socket-port . wy50d3) (socket-shutdown . wy50d2) (socket-close . wy50d1) (socket-send . wy50d0) (socket-recv! . wy50cf) (socket-recv . wy50ce) (make-server-socket . wy50cd) (make-client-socket . wy50cc) (socket-accept . wy50cb) (socket? . wy50ca) (parameterize . wy4e24)) '() values values '#f '#f '#f '#f)))
(begin (set! wy4c8c@ref (unspecified)) (set! wy4c8e@x* (unspecified)) (set! wy4c90@add-library-path! (unspecified)) (set! wy4c92@parse-and-add-library-path (unspecified)) (set! wy4c94@for-each-with-index (unspecified)) (set! wy4c96@rpad (unspecified)) (set! wy4c98@condition-printer/p (unspecified)) (set! wy4c9a@record->field-alist (unspecified)) (set! wy4c9c@map-with-index (unspecified)) (set! wy4c9e@repl (unspecified)) (set! wy4ca0@trace-printer (unspecified)) (set! wy4ca2@command-line (unspecified)) (set! wy4ca4@local-library-path (unspecified)) (set! wy4ca6@load/args (unspecified)) (set! wy4ca8@load (unspecified)) (set! wy4caa@ironscheme-build (unspecified)) (set! wy4cac@eval-top-level (unspecified)) (set! wy4cae@compile-system-libraries (unspecified)) (set! wy4cb0@compile (unspecified)) (set! wy4cb2@compile->closure (unspecified)) (set! wy4cb4@pre-compile-r6rs-file (unspecified)) (set! wy4cb6@load-r6rs-top-level (unspecified)) (set! wy4cb8@load-r6rs-top-level-sexp (unspecified)) (set! wy4cba@prefix-inc (unspecified)) (set! wy4cbc@prefix-inc! (unspecified)) (set! wy4c8c@ref (lambda (wy4cf7@rtd wy4cf8@i wy4cf9@x) (let ((wy4cfd@val ((record-accessor wy4cf7@rtd wy4cf8@i) wy4cf9@x))) (if (symbol? wy4cfd@val) (ungensym wy4cfd@val) wy4cfd@val)))) (set! wy4df3@wy4c8c@ref wy4c8c@ref) (set! wy4c8e@x* '()) (set! wy4df4@wy4c8e@x* wy4c8e@x*) (set! wy4c90@add-library-path! (lambda (wy4cff@path) (wy2d0c@wy2b48@library-path (append (wy2d0c@wy2b48@library-path) (list wy4cff@path))))) (set! wy4df5@wy4c90@add-library-path! wy4c90@add-library-path!) (set! wy4c92@parse-and-add-library-path (lambda (wy4d01@paths wy4d02@message) (letrec* ((wy4d06@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((wy4d07@t wy4d01@paths)) (if wy4d07@t ((lambda (wy4d09@paths) (for-each (lambda (wy4d0b@path) (if (file-exists? wy4d0b@path) (wy4c90@add-library-path! (expand-path wy4d0b@path)) (format (current-error-port) wy4d02@message wy4d0b@path))) (string-split wy4d09@paths wy4d06@separator))) wy4d07@t) (void)))))) (set! wy4df6@wy4c92@parse-and-add-library-path wy4c92@parse-and-add-library-path) (set! wy4c94@for-each-with-index (lambda (wy4d0d@proc wy4d0e@lst) (letrec ((wy4d11@loop (lambda (wy4d13@i wy4d14@lst) (if (null? wy4d14@lst) (if '#f '#f (void)) (begin (wy4d0d@proc wy4d13@i (car wy4d14@lst)) (wy4d11@loop (+ wy4d13@i '1) (cdr wy4d14@lst))))))) (wy4d11@loop '1 wy4d0e@lst)))) (set! wy4df7@wy4c94@for-each-with-index wy4c94@for-each-with-index) (set! wy4c96@rpad (lambda (wy4d17@str wy4d18@pad wy4d19@n) (let ((wy4d1d@rest (- wy4d19@n (string-length (format '"~a" wy4d17@str))))) (let wy4d23@loop ((wy4d1f@rest wy4d1d@rest) (wy4d20@ret (format '"~a" wy4d17@str))) (if (<= wy4d1f@rest '0) wy4d20@ret (wy4d23@loop (- wy4d1f@rest '1) (string-append wy4d20@ret wy4d18@pad))))))) (set! wy4df8@wy4c96@rpad wy4c96@rpad) (set! wy4c98@condition-printer/p (lambda (wy4d25@e wy4d26@port) (letrec* ((wy4d2a@max-condition-len (apply max (map (lambda (wy4d3b@c) (string-length (symbol->string (record-type-name (record-rtd wy4d3b@c))))) (simple-conditions wy4d25@e))))) (begin (display '" Condition components:\n" wy4d26@port) (wy4c94@for-each-with-index (lambda (wy4d2b@i wy4d2c@x) (let ((wy4d2f@rtd (record-rtd wy4d2c@x)) (wy4d30@fields-alist (wy4c9a@record->field-alist wy4d2c@x))) (begin (format wy4d26@port '" ~d. ~a" wy4d2b@i (wy4c96@rpad (symbol->string (record-type-name wy4d2f@rtd)) '" " wy4d2a@max-condition-len)) (if (null? wy4d30@fields-alist) (newline wy4d26@port) (void)) (let wy4d37@loop ((wy4d33@first '#t) (wy4d34@fields-alist wy4d30@fields-alist)) (if (null? wy4d34@fields-alist) '() (let ((wy4d39@field (car wy4d34@fields-alist))) (begin (if (not wy4d33@first) (display (wy4c96@rpad '"" '" " (+ '4 wy4d2a@max-condition-len)) wy4d26@port) (void)) (display '"       " wy4d26@port) (display (car wy4d39@field) wy4d26@port) (display '": " wy4d26@port) (write (cdr wy4d39@field) wy4d26@port) (newline wy4d26@port) (wy4d37@loop '#f (cdr wy4d34@fields-alist))))))))) (simple-conditions wy4d25@e)))))) (set! wy4df9@wy4c98@condition-printer/p wy4c98@condition-printer/p) (set! wy4c9a@record->field-alist (lambda (wy4d3d@r) (letrec* ((wy4d40@ref (lambda (wy4d4b@rtd wy4d4c@i wy4d4d@x) (let ((wy4d51@val ((record-accessor wy4d4b@rtd wy4d4c@i) wy4d4d@x))) (if (symbol? wy4d51@val) (ungensym wy4d51@val) wy4d51@val))))) (let wy4d45@loop ((wy4d41@ret '()) (wy4d42@rtd (record-rtd wy4d3d@r))) (if wy4d42@rtd (wy4d45@loop (append wy4d41@ret (wy4c9c@map-with-index (lambda (wy4d47@i wy4d48@field) (cons wy4d48@field (wy4d40@ref wy4d42@rtd wy4d47@i wy4d3d@r))) (vector->list (record-type-field-names wy4d42@rtd)))) (record-type-parent wy4d42@rtd)) wy4d41@ret))))) (set! wy4dfa@wy4c9a@record->field-alist wy4c9a@record->field-alist) (set! wy4c9c@map-with-index (lambda (wy4d53@proc wy4d54@lst) (let wy4d5d@loop ((wy4d57@i '0) (wy4d58@lst wy4d54@lst) (wy4d59@ret '())) (if (null? wy4d58@lst) (reverse wy4d59@ret) (wy4d5d@loop (+ wy4d57@i '1) (cdr wy4d58@lst) (cons (wy4d53@proc wy4d57@i (car wy4d58@lst)) wy4d59@ret)))))) (set! wy4dfb@wy4c9c@map-with-index wy4c9c@map-with-index) (set! wy4c9e@repl (lambda wy4d5f@x (letrec* ((wy4d62@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (wy4d65@wy4d63) (lambda () (with-exception-handler (lambda (wy4d67@e) ((call/cc (lambda (wy4d69@wy4d64) (wy4d65@wy4d63 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? wy4d67@e) (wy4c98@condition-printer/p wy4d67@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" wy4d67@e))) (wy4d69@wy4d64 (lambda () (raise-continuable wy4d67@e)))))))))) (lambda () (let wy4d6f@loop ((wy4d6b@line (get-line (current-input-port))) (wy4d6c@accum '"")) (letrec* ((wy4d72@parentheses-ok? (lambda (wy4d7d@text) (let wy4d85@loop ((wy4d7f@chars (string->list wy4d7d@text)) (wy4d80@p0 '0) (wy4d81@p1 '0)) (if (null? wy4d7f@chars) (= '0 wy4d80@p0 wy4d81@p1) (let ((wy4d87@t (car wy4d7f@chars))) (if (memv wy4d87@t '(#\()) (wy4d85@loop (cdr wy4d7f@chars) (+ wy4d80@p0 '1) wy4d81@p1) (if (memv wy4d87@t '(#\))) (wy4d85@loop (cdr wy4d7f@chars) (- wy4d80@p0 '1) wy4d81@p1) (if (memv wy4d87@t '(#\[)) (wy4d85@loop (cdr wy4d7f@chars) wy4d80@p0 (+ wy4d81@p1 '1)) (if (memv wy4d87@t '(#\])) (wy4d85@loop (cdr wy4d7f@chars) wy4d80@p0 (- wy4d81@p1 '1)) (wy4d85@loop (cdr wy4d7f@chars) wy4d80@p0 wy4d81@p1)))))))))) (wy4d74@eval-string-print (lambda (wy4d77@text) (if (not (or (string=? '"\n" wy4d77@text) (= '0 (string-length wy4d77@text)))) (call-with-values (lambda () (wy4cac@eval-top-level (call-with-port (open-string-input-port wy4d77@text) read))) (lambda wy4d79@out* (for-each (lambda (wy4d7b@out) (begin (write/ss wy4d7b@out) (newline))) wy4d79@out*))) (void))))) (if (eof-object? wy4d6b@line) (begin (wy4d74@eval-string-print wy4d6c@accum) (exit)) (let ((wy4d75@current (string-append wy4d6c@accum wy4d6b@line))) (if (wy4d72@parentheses-ok? wy4d75@current) (wy4d74@eval-string-print wy4d75@current) (wy4d6f@loop (get-line (current-input-port)) wy4d75@current)))))))))))) (newline) (wy4d62@rec))))) (wy4d62@rec)))) (set! wy4dfc@wy4c9e@repl wy4c9e@repl) (set! wy4ca0@trace-printer (wy2a52@wy2930@make-parameter write)) (set! wy4dfd@wy4ca0@trace-printer wy4ca0@trace-printer) (set! wy4ca2@command-line (wy2a52@wy2930@make-parameter (get-command-line))) (set! wy4dfe@wy4ca2@command-line wy4ca2@command-line) (set! wy4ca4@local-library-path (lambda (wy4d89@filename) (wy2d0c@wy2b48@library-path))) (set! wy4dff@wy4ca4@local-library-path wy4ca4@local-library-path) (set! wy4ca6@load/args (lambda (wy4d8b@filename . wy4d8d@args) (begin (apply wy4cb6@load-r6rs-top-level wy4d8b@filename 'load wy4d8d@args) (void)))) (set! wy4e00@wy4ca6@load/args wy4ca6@load/args) (set! wy4ca8@load (lambda (wy4d8f@filename) (begin (apply wy4cb6@load-r6rs-top-level wy4d8f@filename 'load (wy4ca2@command-line)) (void)))) (set! wy4e01@wy4ca8@load wy4ca8@load) (set! wy4caa@ironscheme-build (lambda () (wy4ca8@load '"ironscheme-buildscript.ss"))) (set! wy4e02@wy4caa@ironscheme-build wy4caa@ironscheme-build) (set! wy4cac@eval-top-level (lambda (wy4d91@x) (wy4c69@wy31c9@eval wy4d91@x (wy4c80@wy31f7@interaction-environment)))) (set! wy4e03@wy4cac@eval-top-level wy4cac@eval-top-level) (set! wy4cae@compile-system-libraries (lambda () (wy4cac@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! wy4e04@wy4cae@compile-system-libraries wy4cae@compile-system-libraries) (set! wy4cb0@compile (lambda (wy4d93@filename) (wy4cb6@load-r6rs-top-level wy4d93@filename 'compile))) (set! wy4e05@wy4cb0@compile wy4cb0@compile) (set! wy4cb2@compile->closure (lambda (wy4d95@filename) (wy4cb6@load-r6rs-top-level wy4d95@filename 'closure))) (set! wy4e06@wy4cb2@compile->closure wy4cb2@compile->closure) (set! wy4cb4@pre-compile-r6rs-file (lambda (wy4d97@filename) (wy4cb6@load-r6rs-top-level wy4d97@filename 'compile))) (set! wy4e07@wy4cb4@pre-compile-r6rs-file wy4cb4@pre-compile-r6rs-file) (set! wy4cb6@load-r6rs-top-level (lambda (wy4d99@filename wy4d9a@how . wy4d9d@args) (begin (wy2d0c@wy2b48@library-path (wy4ca4@local-library-path wy4d99@filename)) (let ((wy4d9f@x* (with-input-from-file wy4d99@filename (lambda () (let wy4da1@f () (let ((wy4da3@x (wy2a44@wy2914@read-annotated))) (if (eof-object? wy4da3@x) '() (cons wy4da3@x (wy4da1@f))))))))) (let ((wy4da5@t wy4d9a@how)) (if (memv wy4da5@t '(closure)) (wy4c7f@wy31f5@pre-compile-r6rs-top-level wy4d9f@x*) (if (memv wy4da5@t '(load)) (begin (wy4ca2@command-line (cons wy4d99@filename (car wy4d9d@args))) (wy2a53@wy2932@mosh-cache-dir (create-mosh-cache-dir)) (if (wy2a53@wy2932@mosh-cache-dir) (gensym-prefix-set! (wy4cbc@prefix-inc! (string-append (wy2a53@wy2932@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (wy4da7@file) ((call/cc (lambda (wy4dab@wy4da9) (lambda () (with-exception-handler (lambda (wy4dad@c) ((call/cc (lambda (wy4daf@wy4daa) (wy4dab@wy4da9 (lambda () (if '#t '#t (wy4daf@wy4daa (lambda () (raise-continuable wy4dad@c)))))))))) (lambda () (delete-file (string-append (wy2a53@wy2932@mosh-cache-dir) '"/" wy4da7@file))))))))) (directory-list (wy2a53@wy2932@mosh-cache-dir))) (void)) (let ((wy4db1@compiled (wy4c7e@wy31f3@compile-r6rs-top-level wy4d9f@x*))) (begin (if (and (wy2a53@wy2932@mosh-cache-dir) (not (symbol-value '%disable-acc))) (wy2d10@wy2b50@serialize-all wy2a4d@wy2926@serialize-library wy2aa9@wy2a62@compile-core-expr) (void)) (wy4db1@compiled)))) (if (memv wy4da5@t '(compile)) (begin (wy4c7e@wy31f3@compile-r6rs-top-level wy4d9f@x*) (wy2d10@wy2b50@serialize-all wy2a4d@wy2926@serialize-library wy2aa9@wy2a62@compile-core-expr)) (if '#f '#f (void)))))))))) (set! wy4e08@wy4cb6@load-r6rs-top-level wy4cb6@load-r6rs-top-level) (set! wy4cb8@load-r6rs-top-level-sexp (lambda (wy4db3@import-spec wy4db4@thunk) (let ((wy4dbf@wy4db8 wy2d0c@wy2b48@library-path) (wy4dc0@wy4dba wy2a53@wy2932@mosh-cache-dir) (wy4dc1@wy4dbc (wy4ca4@local-library-path '"")) (wy4dc2@wy4dbe (create-mosh-cache-dir))) (let ((wy4dc7@swap (lambda () (begin (let ((wy4dc9@t (wy4dbf@wy4db8))) (begin (wy4dbf@wy4db8 wy4dc1@wy4dbc) (set! wy4dc1@wy4dbc wy4dc9@t))) (let ((wy4dcb@t (wy4dc0@wy4dba))) (begin (wy4dc0@wy4dba wy4dc2@wy4dbe) (set! wy4dc2@wy4dbe wy4dcb@t))))))) (dynamic-wind wy4dc7@swap (lambda () (begin (if (wy2a53@wy2932@mosh-cache-dir) (gensym-prefix-set! (wy4cbc@prefix-inc! (string-append (wy2a53@wy2932@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((wy4dd1@wy4dce wy4ca2@command-line) (wy4dd2@wy4dd0 '())) (let ((wy4dd5@swap (lambda () (let ((wy4dd7@t (wy4dd1@wy4dce))) (begin (wy4dd1@wy4dce wy4dd2@wy4dd0) (set! wy4dd2@wy4dd0 wy4dd7@t)))))) (dynamic-wind wy4dd5@swap (lambda () ((wy4c7e@wy31f3@compile-r6rs-top-level (list (cons 'import wy4db3@import-spec) (list wy4db4@thunk))))) wy4dd5@swap))))) wy4dc7@swap))))) (set! wy4e09@wy4cb8@load-r6rs-top-level-sexp wy4cb8@load-r6rs-top-level-sexp) (set! wy4cba@prefix-inc (lambda (wy4dd9@prefix-string) (let ((wy4ddb@prefix (symbol->string wy4dd9@prefix-string))) (let ((wy4ddd@len (string-length wy4ddb@prefix))) (let wy4de5@loop ((wy4ddf@i (- wy4ddd@len '1)) (wy4de0@carry? '#t) (wy4de1@accum '())) (if (< wy4ddf@i '0) (string->symbol (list->string (if wy4de0@carry? (cons '#\a wy4de1@accum) wy4de1@accum))) (if wy4de0@carry? (let ((wy4de7@next-integer (+ '1 (char->integer (string-ref wy4ddb@prefix wy4ddf@i))))) (if (= wy4de7@next-integer '123) (wy4de5@loop (- wy4ddf@i '1) '#f (cons '#\A wy4de1@accum)) (if (= wy4de7@next-integer '91) (wy4de5@loop (- wy4ddf@i '1) '#t (cons '#\a wy4de1@accum)) (wy4de5@loop (- wy4ddf@i '1) '#f (cons (integer->char wy4de7@next-integer) wy4de1@accum))))) (wy4de5@loop (- wy4ddf@i '1) '#f (cons (string-ref wy4ddb@prefix wy4ddf@i) wy4de1@accum))))))))) (set! wy4e0a@wy4cba@prefix-inc wy4cba@prefix-inc) (set! wy4cbc@prefix-inc! (lambda (wy4de9@file) (begin (if (not (file-exists? wy4de9@file)) (call-with-output-file wy4de9@file (lambda (wy4deb@port) (write 'd wy4deb@port))) (void)) (let ((wy4ded@prefix (call-with-input-file wy4de9@file read))) (if (main-vm?) (let ((wy4def@next-prefix (wy4cba@prefix-inc wy4ded@prefix))) (begin (call-with-port (open-file-output-port wy4de9@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (wy4df1@port) (write wy4def@next-prefix wy4df1@port))) wy4ded@prefix)) wy4ded@prefix))))) (set! wy4e0b@wy4cbc@prefix-inc! wy4cbc@prefix-inc!) (begin (wy2d11@wy2b52@current-precompiled-library-loader wy2a4e@wy2928@load-serialized-library) (set-symbol-value! 'load wy4ca8@load) (set-symbol-value! 'pre-compile-r6rs-file wy4cb4@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs wy4cac@eval-top-level) (set-symbol-value! 'int-env-syms wy4c60@wy31b7@interaction-environment-symbols) (set-symbol-value! 'expanded2core wy2aa8@wy2a60@expanded->core) (set-symbol-value! 'trace-printer wy4ca0@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (wy4cbd@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list wy4cbd@c))))) (wy4c92@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (wy4c92@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (wy4c90@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (wy4c90@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (wy4c90@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((wy4cbf@prefix (lambda (wy4cc1@ext wy4cc2@ls) (append (map (lambda (wy4cc5@x) (string-append wy4cc1@ext wy4cc5@x)) wy4cc2@ls) wy4cc2@ls)))) (wy2d0d@wy2b4a@library-extensions (wy4cbf@prefix '".mosh" (wy2d0d@wy2b4a@library-extensions)))) (current-exception-handler (lambda (wy4cc7@c) (begin (if (condition? wy4cc7@c) (wy4c98@condition-printer/p wy4cc7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" wy4cc7@c)) wy4cc7@c))) (if ((call/cc (lambda (wy4ccb@wy4cc9) (lambda () (with-exception-handler (lambda (wy4ccd@c) ((call/cc (lambda (wy4ccf@wy4cca) (wy4ccb@wy4cc9 (lambda () (if '#t '#f (wy4ccf@wy4cca (lambda () (raise-continuable wy4ccd@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (wy4cb8@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (wy4ca2@command-line)) (let ((wy4cd9@wy4cd2 wy4ca2@command-line) (wy4cda@wy4cd4 wy2a53@wy2932@mosh-cache-dir) (wy4cdb@wy4cd6 '()) (wy4cdc@wy4cd8 (create-mosh-cache-dir))) (let ((wy4ce1@swap (lambda () (begin (let ((wy4ce3@t (wy4cd9@wy4cd2))) (begin (wy4cd9@wy4cd2 wy4cdb@wy4cd6) (set! wy4cdb@wy4cd6 wy4ce3@t))) (let ((wy4ce5@t (wy4cda@wy4cd4))) (begin (wy4cda@wy4cd4 wy4cdc@wy4cd8) (set! wy4cdc@wy4cd8 wy4ce5@t))))))) (dynamic-wind wy4ce1@swap (lambda () (begin (if (wy2a53@wy2932@mosh-cache-dir) (gensym-prefix-set! (wy4cbc@prefix-inc! (string-append (wy2a53@wy2932@mosh-cache-dir) '"/prefix.txt"))) (void)) (wy4c9e@repl))) wy4ce1@swap))) (begin (wy2d0c@wy2b48@library-path (wy4ca4@local-library-path (car (wy4ca2@command-line)))) (set! wy4c8e@x* (with-input-from-file (car (wy4ca2@command-line)) (lambda () (let wy4ce7@f () (let ((wy4ce9@x (wy2a44@wy2914@read-annotated))) (if (eof-object? wy4ce9@x) '() (cons wy4ce9@x (wy4ce7@f)))))))) (wy4ca2@command-line (cons (car (wy4ca2@command-line)) (cdr (wy4ca2@command-line)))) (wy2a53@wy2932@mosh-cache-dir (create-mosh-cache-dir)) (if (wy2a53@wy2932@mosh-cache-dir) (gensym-prefix-set! (wy4cbc@prefix-inc! (string-append (wy2a53@wy2932@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (wy4ceb@file) ((call/cc (lambda (wy4cef@wy4ced) (lambda () (with-exception-handler (lambda (wy4cf1@c) ((call/cc (lambda (wy4cf3@wy4cee) (wy4cef@wy4ced (lambda () (if '#t '#t (wy4cf3@wy4cee (lambda () (raise-continuable wy4cf1@c)))))))))) (lambda () (delete-file (string-append (wy2a53@wy2932@mosh-cache-dir) '"/" wy4ceb@file))))))))) (directory-list (wy2a53@wy2932@mosh-cache-dir))) (void)) (let ((wy4cf5@compiled (wy4c7e@wy31f3@compile-r6rs-top-level wy4c8e@x*))) (begin (if (and (wy2a53@wy2932@mosh-cache-dir) (not (symbol-value '%disable-acc))) (wy2d10@wy2b50@serialize-all wy2a4d@wy2926@serialize-library wy2aa9@wy2a62@compile-core-expr) (void)) (wy4cf5@compiled))))))))
